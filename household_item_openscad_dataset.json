[
  {
    "household_item": "plate",
    "openscad_code": "// Realistic Plate - Medium Complexity\n// Diameter: 80mm, Height: 8mm\n// Features: Rim, base foot, subtle curvature, drainage channels\n\n$fn = 50;  // Smooth curves\n\n// Main parameters\nplate_diameter = 80;\nplate_height = 8;\nrim_height = 3;\nrim_thickness = 2;\nbase_foot_height = 2;\nwall_thickness = 1.5;\n\n// Curvature parameters\ncenter_depth = 1.2;\nrim_curve = 0.8;\n\nmodule plate_base() {\n    // Main plate body with gentle curvature\n    difference() {\n        // Outer shape - shallow dome\n        union() {\n            // Base cylinder\n            cylinder(h=plate_height - rim_height, d=plate_diameter);\n            \n            // Rim\n            translate([0, 0, plate_height - rim_height])\n                cylinder(h=rim_height, d=plate_diameter);\n        }\n        \n        // Hollow center with curved bottom\n        translate([0, 0, wall_thickness])\n            cylinder(h=plate_height - wall_thickness, d=plate_diameter - 2*wall_thickness);\n        \n        // Curved bottom\n        translate([0, 0, wall_thickness - center_depth])\n            sphere(d=plate_diameter - 2*wall_thickness);\n    }\n}\n\nmodule rim_detail() {\n    // Create rim curvature\n    difference() {\n        // Top rim\n        translate([0, 0, plate_height - rim_height])\n            cylinder(h=rim_height, d=plate_diameter);\n        \n        // Inner bevel\n        translate([0, 0, plate_height - rim_height - 0.5])\n            cylinder(h=rim_height + 1, d=plate_diameter - 2*rim_thickness);\n    }\n}\n\nmodule base_foot() {\n    // Circular foot for stability\n    foot_diameter = plate_diameter - 10;\n    \n    difference() {\n        // Main foot\n        cylinder(h=base_foot_height, d=foot_diameter);\n        \n        // Hollow center\n        cylinder(h=base_foot_height + 0.1, d=foot_diameter - 4);\n    }\n}\n\nmodule drainage_grooves() {\n    // Subtle grooves for water drainage\n    groove_width = 1;\n    groove_depth = 0.3;\n    num_grooves = 8;\n    \n    for (i = [0:num_grooves-1]) {\n        angle = i * 360 / num_grooves;\n        \n        rotate([0, 0, angle])\n            translate([plate_diameter/2 - 10, -groove_width/2, wall_thickness])\n                cube([20, groove_width, groove_depth]);\n    }\n}\n\n// Assemble the plate\nunion() {\n    // Main plate\n    plate_base();\n    \n    // Rim detail for realistic curvature\n    rim_detail();\n    \n    // Base foot\n    translate([0, 0, 0])\n        base_foot();\n    \n    // Drainage grooves\n    drainage_grooves();\n}\n\n// Smooth bottom transition\ntranslate([0, 0, base_foot_height])\n    difference() {\n        cylinder(h=0.5, d=plate_diameter);\n        cylinder(h=0.6, d=plate_diameter - 2);\n    }",
    "renders": true
  },
  {
    "household_item": "bowl",
    "openscad_code": "// Realistic 3D-printable bowl (medium complexity)\n// Outer Ø 80 mm, inner Ø 76 mm, height 40 mm, wall 2 mm\n// No overhangs > 45°, ready for FDM printing\n\nmodule rounded_cylinder(h, r1, r2, r_edge, center=false) {\n    // helper: cylinder with rounded top/bottom edges\n    offset = center ? -h/2 : 0;\n    translate([0,0,offset])\n        minkowski() {\n            cylinder(h=h-r_edge*2, r1=r1-r_edge, r2=r2-r_edge, center=true);\n            sphere(r_edge);\n        }\n}\n\nmodule bowl() {\n    wall = 2;               // wall thickness (mm)\n    base_h = 3;             // base thickness (mm)\n    rim_h = 4;              // rim band height (mm)\n    fillet = 1.5;           // inside bottom fillet radius\n    segments = 64;          // $fn for smooth curves\n    \n    // outer profile: 40 mm tall, 40 mm radius at top, 20 mm radius at bottom\n    outer_profile = [\n        [0, 0],\n        [20, 0],\n        [35, 30],\n        [40, 40]\n    ];\n    \n    // inner profile (offset inward by wall thickness)\n    inner_profile = [\n        [0, base_h],\n        [20-wall, base_h],\n        [35-wall, 30],\n        [40-wall, 40-rim_h]\n    ];\n    \n    // create 2D outer shape and revolve\n    rotate_extrude($fn=segments)\n        polygon(outer_profile);\n    \n    difference() {\n        // outer shell\n        rotate_extrude($fn=segments)\n            polygon(outer_profile);\n        \n        // inner cavity\n        rotate_extrude($fn=segments)\n            polygon(inner_profile);\n    }\n    \n    // add rim band for strength and aesthetics\n    difference() {\n        translate([0,0,40-rim_h])\n            rounded_cylinder(rim_h, 40, 40, 1.5);\n        translate([0,0,40-rim_h-0.01])\n            cylinder(h=rim_h+0.02, r1=40-wall, r2=40-wall, $fn=segments);\n    }\n    \n    // add gentle foot ring for print stability\n    difference() {\n        translate([0,0,0])\n            rounded_cylinder(base_h, 25, 20, 1.5);\n        translate([0,0,-0.01])\n            cylinder(h=base_h+0.02, r1=22, r2=17, $fn=segments);\n    }\n    \n    // subtle grip rings around the outside\n    for (z=[10:10:30]) {\n        difference() {\n            translate([0,0,z])\n                cylinder(h=1.5, r1=40, r2=38.5, $fn=segments);\n            translate([0,0,z-0.01])\n                cylinder(h=1.52, r1=39.5, r2=38, $fn=segments);\n        }\n    }\n}\n\n// render the bowl\nbowl();",
    "renders": true
  },
  {
    "household_item": "cup",
    "openscad_code": "// Realistic Coffee Cup – OpenSCAD (medium complexity)\n// Outer Ø 80 mm, height 90 mm, wall 2 mm, 3D-printable without support\n\n// Main parameters\ncup_h  = 90;      // total height\nbase_r = 40;      // outer base radius\ntop_r  = 46;      // outer top radius\nwall_t = 2;       // wall thickness\nbase_h = 8;       // solid foot height\nlip_h  = 4;       // rolled lip height\n\n// Helper module for smooth cone\nmodule frustum(h, r1, r2, center=false) {\n    cylinder(h=h, r1=r1, r2=r2, center=center, $fn=100);\n}\n\n// 1. Hollow body\ndifference() {\n    frustum(cup_h - base_h, base_r, top_r);      // outer shell\n    translate([0, 0, -0.1])                      // inner cavity\n        frustum(cup_h - base_h + 0.2,\n                base_r - wall_t,\n                top_r  - wall_t);\n}\n\n// 2. Solid base\ntranslate([0, 0, -base_h])\n    frustum(base_h, base_r - 3, base_r);\n\n// 3. Rolled lip\ndifference() {\n    translate([0, 0, cup_h - base_h])\n        frustum(lip_h, top_r, top_r + 1.5);      // outer lip\n    translate([0, 0, cup_h - base_h - 0.1])\n        frustum(lip_h + 0.2,\n                top_r - wall_t,\n                top_r - wall_t + 1);             // inner lip\n}\n\n// 4. Handle\nmodule handle() {\n    difference() {\n        union() {                                // outer handle\n            translate([top_r + 2, 0, cup_h*0.6])\n                rotate([90, 0, 0])\n                    torus(ro=15, ri=4, sides=30, facets=30);\n            // connect arcs with straight bridge\n            translate([top_r + 2, 0, cup_h*0.6 - 15])\n                cube([8, 4, 30], center=true);\n        }\n        // hollow tunnel\n        translate([top_r + 2, 0, cup_h*0.6])\n            rotate([90, 0, 0])\n                torus(ro=15, ri=2, sides=30, facets=30);\n    }\n}\n\n// simple torus approximation\nmodule torus(ro, ri, sides, facets) {\n    rotate_extrude($fn=sides)\n        translate([ro, 0])\n            circle(r=ri, $fn=facets);\n}\n\n// place handle\nrotate([0, 0, 0]) handle();",
    "renders": true
  },
  {
    "household_item": "mug",
    "openscad_code": "// Realistic 3D-printable coffee mug – medium complexity\n// Outer diameter: 85 mm, height: 95 mm, wall thickness: 3 mm\n\n$fn = 64;\n\n// Main mug body\nmodule mug() {\n    difference() {\n        // Outer wall\n        cylinder(h = 85, d = 85);\n\n        // Hollow inside\n        translate([0, 0, 1])\n            cylinder(h = 87, d = 85 - 2*3);\n\n        // Flat bottom inside\n        translate([0, 0, 1])\n            cube([85, 85, 1], center = true);\n    }\n}\n\n// Curved handle\nmodule handle() {\n    // Main grip arc\n    translate([42.5 + 3 + 5, 0, 45])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer\n                torus(ro = 25, ri = 7);\n                // Inner\n                torus(ro = 25, ri = 4);\n            }\n\n    // Top connector\n    translate([42.5 + 3, 0, 75])\n        rotate([0, 90, 0])\n            cylinder(h = 15, d = 12);\n\n    // Bottom connector\n    translate([42.5 + 3, 0, 15])\n        rotate([0, 90, 0])\n            cylinder(h = 15, d = 12);\n}\n\n// Torus helper module\nmodule torus(ro, ri) {\n    rotate_extrude()\n        translate([ro, 0, 0])\n            circle(r = ri);\n}\n\n// Rounded lip\nmodule lip() {\n    difference() {\n        // Outer lip bevel\n        cylinder(h = 5, d1 = 85, d2 = 87);\n        // Inner edge\n        translate([0, 0, 1])\n            cylinder(h = 6, d = 85 - 2*3);\n    }\n}\n\n// Bottom fillet for print stability & strength\nmodule base_fillet() {\n    difference() {\n        cylinder(h = 3, d = 87);\n        cylinder(h = 3, d = 85);\n    }\n}\n\n// Assembly\nunion() {\n    // Mug body\n    mug();\n\n    // Attach rounded lip on top\n    translate([0, 0, 85])\n        lip();\n\n    // Attach handle\n    handle();\n\n    // Attach base fillet\n    translate([0, 0, -3])\n        base_fillet();\n}",
    "renders": true
  },
  {
    "household_item": "glass",
    "openscad_code": "// Realistic Drinking Glass – medium complexity, 3D-printable\n// 85 mm tall, 70 mm max diameter, 2 mm wall thickness\n\n$fn=50;\n\n// Overall dimensions\nh = 85;                 // total height\nbase_d = 70;            // widest diameter (lower rim)\nrim_d = 62;             // top rim diameter\nwall = 2;               // wall thickness\nbase_h = 5;             // solid base height\nbase_t = 3;             // base thickness under cavity\n\n// Derived\nslope = (base_d - rim_d)/2 / (h - base_h);\n\nmodule glass_profile(){\n    // 2D profile for revolution\n    polygon([\n        [0, 0],                     // bottom center\n        [base_d/2, 0],              // outer base radius\n        [base_d/2, base_t],         // outer base top\n        [base_d/2 - wall, base_t],  // inner base top\n        [rim_d/2 - wall, h - wall*slope], // inner wall top\n        [rim_d/2, h],               // rim top\n        [rim_d/2 - wall, h],        // inner rim top\n        [base_d/2 - wall, base_t + wall], // inner wall bottom\n        [base_d/2 - wall, 0],       // inner base bottom\n        [0, 0]                      // back to center\n    ]);\n}\n\n// Outer body (solid)\nmodule outer_body(){\n    rotate_extrude()\n        glass_profile();\n}\n\n// Inner cavity (to be removed)\nmodule inner_cavity(){\n    // Offset profile inwards by wall\n    rotate_extrude()\n        offset(delta=-wall)\n            glass_profile();\n}\n\n// Base ring for aesthetics\nmodule base_ring(){\n    difference(){\n        cylinder(h=base_h, d1=base_d, d2=base_d+2, $fn=60);\n        cylinder(h=base_h+0.1, d1=base_d-3, d2=base_d-1, $fn=60);\n    }\n}\n\n// Rim fillet for comfort\nmodule rim_fillet(){\n    difference(){\n        cylinder(h=wall+0.1, d1=rim_d+1, d2=rim_d+3, $fn=60);\n        cylinder(h=wall+0.2, d=rim_d-0.5, $fn=60);\n    }\n}\n\n// Main glass\ndifference(){\n    union(){\n        outer_body();\n        base_ring();\n    }\n    inner_cavity();\n}\n\n// Apply rim fillet on top\ntranslate([0,0,h-wall/2])\n    rim_fillet();",
    "renders": true
  },
  {
    "household_item": "spoon",
    "openscad_code": "// Realistic medium-complexity 3D printable spoon\n// Overall length ≈ 90 mm\n\n$fn = 50;  // Smooth curves\n\n// Parameters\nbowl_r = 17;         // Bowl radius\nbowl_d = 6;          // Bowl depth\nhandle_len = 70;\nhandle_w = 10;\nhandle_t = 3.5;\nwall = 1.4;          // Wall thickness for printing\nfillet = 1.2;        // Edge rounding\n\nmodule rounded_cube(s, r) {\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*(s.x/2-r), dy*(s.y/2-r), dz*(s.z/2-r)])\n                sphere(r);\n    }\n}\n\n// Spoon bowl\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        scale([1, 1.2, 0.4])\n            sphere(bowl_r);\n        \n        // Inner cavity\n        translate([0, 0, -bowl_d])\n            scale([1-wall/bowl_r, 1.2-wall/bowl_r, 0.4])\n                sphere(bowl_r - wall);\n    }\n}\n\n// Transition neck\nmodule neck() {\n    difference() {\n        hull() {\n            translate([0, bowl_r*1.2, -bowl_d])\n                sphere(fillet);\n            translate([0, 0, -handle_t/2])\n                cube([handle_w*0.7, handle_w*0.4, handle_t], center=true);\n        }\n        // Remove bottom for flat print\n        translate([0, 0, -handle_t*2])\n            cube([handle_w*2, handle_w*2, handle_t*3], center=true);\n    }\n}\n\n// Handle with ergonomic taper\nmodule handle() {\n    for(i=[0:9]) {\n        h = i*handle_len/10;\n        w = handle_w - 0.4*i;\n        t = handle_t - 0.05*i;\n        assign(pos = h - handle_len/2)\n        translate([0, pos, 0])\n            rotate([0, 0, -i*1.2])  // Slight twist\n                scale([w, handle_len/10, t])\n                    rounded_cube([1, 1, 1], fillet);\n    }\n}\n\n// Add shallow groove on handle top\nmodule grip_grooves() {\n    for(i=[1:3]) {\n        translate([0, -handle_len/2 + i*handle_len/4, handle_t/2-0.2])\n            cube([handle_w*0.3, handle_len/8, 0.4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"silver\")\n    difference() {\n        union() {\n            // Main parts\n            translate([0, bowl_r*0.8, 0])\n                rotate([90, 0, 0])\n                    bowl();\n            translate([0, -handle_len/2 - bowl_r*0.7, -handle_t/2])\n                handle();\n            translate([0, -handle_len/2 - bowl_r*0.7, 0])\n                neck();\n        }\n        // Grooves\n        translate([0, -handle_len/2 - bowl_r*0.7, 0])\n            grip_grooves();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "fork",
    "openscad_code": "// Fork - Realistic style, medium complexity\n// Size: 170mm total length, 30mm wide handle, 4mm thick tines\n// 3D-printable with no overhangs >45°, 1.5mm wall thickness\n\nfork_thickness = 4;       // overall thickness\nhandle_length = 110;\nhandle_width = 30;\nhandle_depth = fork_thickness;\ntine_length = 60;\ntine_width = 0.8 * handle_width;\ntine_thickness = 2.5;\ntine_count = 4;\ntine_spacing = tine_width / (tine_count + 0.5);\nweb_thickness = 2;\n\nmodule rounded_rect(l, w, h, r)\n{\n    hull()\n    {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([l-r, r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([r, w-r, 0]) cylinder(h=h, r=r, $fn=16);\n        translate([l-r, w-r, 0]) cylinder(h=h, r=r, $fn=16);\n    }\n}\n\nmodule handle()\n{\n    // Main handle body\n    difference()\n    {\n        rounded_rect(handle_length, handle_width, handle_depth, 5);\n        // Grip pattern grooves\n        for(i = [1:10:handle_length-20])\n        {\n            translate([i, 2, 0])\n                cube([3, handle_width-4, handle_depth-1]);\n        }\n    }\n}\n\nmodule tine_base()\n{\n    // Curved transition from handle to tines\n    hull()\n    {\n        translate([0, handle_width/2, handle_depth/2])\n            sphere(r=handle_width/2, $fn=32);\n        translate([tine_length/2, tine_width/2, handle_depth/2])\n            sphere(r=tine_width/2, $fn=32);\n    }\n    // Flat bottom\n    translate([0, 0, 0])\n        cube([tine_length, tine_width, handle_depth/2]);\n}\n\nmodule tines()\n{\n    for(i = [0:tine_count-1])\n    {\n        y = tine_spacing * (i + 1);\n        difference()\n        {\n            // Tapered tine\n            hull()\n            {\n                translate([0, y, 0])\n                    cylinder(h=tine_thickness, r=tine_thickness/2, $fn=8);\n                translate([tine_length, y, 0])\n                    cylinder(h=tine_thickness, r=tine_thickness/4, $fn=8);\n            }\n            // Pointed tip\n            translate([tine_length+1, y, -1])\n                rotate([0, 0, -30])\n                    cube([3, tine_thickness+2, tine_thickness+2]);\n        }\n    }\n    \n    // Web between tines\n    for(i = [0:tine_count-2])\n    {\n        y1 = tine_spacing * (i + 1) + tine_thickness/2;\n        y2 = tine_spacing * (i + 2) - tine_thickness/2;\n        translate([tine_length/3, y1, 0])\n            cube([tine_length/1.5, y2-y1, web_thickness]);\n    }\n}\n\n// Assembly\ntranslate([0, -handle_width/2, 0])\n    union()\n    {\n        handle();\n        translate([handle_length, 0, 0])\n            tine_base();\n        translate([handle_length, 0, 0])\n            tines();\n    }",
    "renders": true
  },
  {
    "household_item": "knife",
    "openscad_code": "// Realistic Knife - Medium Complexity\n// Overall length ~95 mm, blade length ~50 mm, handle ~45 mm\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Main module\nmodule knife() {\n    union() {\n        blade();\n        handle();\n        bolster();\n    }\n}\n\n// Blade with fuller and edge geometry\nmodule blade() {\n    translate([0, 0, 45])  // Position blade at end of handle\n    rotate([0, 90, 0])     // Orient blade forward\n    \n    difference() {\n        // Main blade profile\n        blade_profile();\n        \n        // Fuller (groove)\n        translate([-2, -1, 0])\n        scale([1, 0.8, 0.5])\n        rotate([0, 0, 5])\n        cylinder(h=50, d=3);\n        \n        // Taper for edge\n        translate([0, -10, 0])\n        cube([20, 20, 20], center=true);\n    }\n}\n\nmodule blade_profile() {\n    hull() {\n        // Blade base (thick part)\n        translate([-1, 0, 0])\n        scale([1, 0.3, 1])\n        cylinder(h=50, d=6);\n        \n        // Blade tip (thin part)\n        translate([48, 0, 0])\n        scale([1, 0.1, 0.1])\n        cylinder(h=2, d=2);\n        \n        // Top spine\n        translate([20, 0, 2.5])\n        cube([30, 0.5, 0.5]);\n    }\n}\n\n// Handle with ergonomic contours\nmodule handle() {\n    translate([0, 0, 22.5])  // Center handle\n    \n    difference() {\n        union() {\n            // Main handle shape\n            scale([1, 0.8, 1])\n            cylinder(h=45, d=12);\n            \n            // Finger grooves\n            for(i = [-2:1:2]) {\n                translate([i*6, 0, 0])\n                scale([0.8, 0.9, 1])\n                cylinder(h=45, d=14);\n            }\n        }\n        \n        // Grip texture holes\n        for(i = [-1.5:0.5:1.5]) {\n            for(j = [-15:5:15]) {\n                translate([i*4, 0, j])\n                rotate([90, 0, 0])\n                cylinder(h=8, d=2);\n            }\n        }\n        \n        // Lanyard hole\n        translate([0, 0, 20])\n        rotate([0, 90, 0])\n        cylinder(h=10, d=4);\n    }\n}\n\n// Metal bolster between blade and handle\nmodule bolster() {\n    translate([0, 0, 45])\n    cylinder(h=5, d=14);\n    \n    // Decorative ridges\n    for(i = [0:0.5:4]) {\n        translate([0, 0, 45 + i])\n        cylinder(h=0.5, d=15 - i*0.5);\n    }\n}\n\n// Render the complete knife\nknife();",
    "renders": true
  },
  {
    "household_item": "pot",
    "openscad_code": "// Realistic 3D-printable pot – medium complexity\n// Overall height ≈ 70 mm, max diameter ≈ 85 mm\n\n$fn = 50;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body profile (lathed)\nmodule pot_body() {\n    rotate_extrude() {\n        offset(-wall) offset(delta = wall) polygon(points = [\n            [0, 0],           // bottom center\n            [42, 0],          // outer bottom edge\n            [42, 5],          // small foot\n            [40, 8],          // start of wall flare\n            [38, 65],         // top rim outer\n            [36, 70],         // lip outer\n            [34, 70],         // lip inner\n            [34, 65],         // top rim inner\n            [32, 8],          // inner wall\n            [30, 5],          // inner foot\n            [30, 0],          // inner bottom edge\n            [0, 0]            // back to center\n        ]);\n    }\n}\n\n// Drainage holes\nmodule drainage_holes() {\n    for (a = [0:60:359])\n        rotate([0, 0, a])\n            translate([15, 0, 3])\n                cylinder(h = 6, r = 2.5, $fn = 16);\n}\n\n// Water reservoir saucer\nmodule saucer() {\n    difference() {\n        // Outer saucer\n        cylinder(h = 8, r1 = 44, r2 = 42);\n\n        // Inner recess\n        translate([0, 0, wall])\n            cylinder(h = 6, r1 = 40, r2 = 38);\n    }\n}\n\n// Simple decorative band\nmodule band() {\n    translate([0, 0, 35])\n        difference() {\n            cylinder(h = 6, r1 = 40.5, r2 = 39.5);\n            cylinder(h = 6.2, r1 = 38.5, r2 = 37.5);\n        }\n}\n\n// Assembly\nunion() {\n    pot_body();\n    difference() {\n        pot_body();  // re-use for drainage\n        drainage_holes();\n    }\n    translate([0, 0, -10]) saucer();\n    band();\n}",
    "renders": true
  },
  {
    "household_item": "pan",
    "openscad_code": "// Realistic 3D printable frying pan\n// Medium complexity (~100 lines)\n\n$fn = 64; // Smooth curves\n\nmodule pan_body() {\n    difference() {\n        // Main pan bowl\n        cylinder(h = 25, r1 = 40, r2 = 38, center = false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h = 23, r1 = 37, r2 = 35, center = false);\n        \n        // Pour spouts\n        for (angle = [45, 135])\n            rotate([0, 0, angle])\n                translate([40, 0, 20])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r = 5, center = false);\n    }\n}\n\nmodule handle() {\n    // Handle base connection\n    translate([0, 40, 12])\n        rotate([90, 0, 0])\n            cylinder(h = 15, r = 6, center = false);\n    \n    // Handle grip\n    translate([0, 55, 12])\n        rotate([90, 0, 0])\n            difference() {\n                // Main handle cylinder\n                cylinder(h = 60, r = 5, center = false);\n                \n                // Grip grooves\n                for (i = [0:5:50]) {\n                    translate([0, 0, i + 5])\n                        rotate([0, 90, 0])\n                            cube([10, 1, 1], center = true);\n                }\n            }\n    \n    // Handle end cap\n    translate([0, 115, 12])\n        rotate([90, 0, 0])\n            sphere(r = 5.5);\n}\n\nmodule bottom_base() {\n    difference() {\n        // Base plate\n        translate([0, 0, 0])\n            cylinder(h = 2, r = 40, center = false);\n        \n        // Concentric rings for heat distribution\n        for (r = [10:10:35]) {\n            translate([0, 0, -0.5])\n                cylinder(h = 3, r = r, center = false);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Pan components\n    pan_body();\n    handle();\n    bottom_base();\n    \n    // Reinforcement ring\n    translate([0, 0, 22])\n        cylinder(h = 3, r = 42, center = false);\n}",
    "renders": true
  },
  {
    "household_item": "kettle",
    "openscad_code": "// Realistic 3D-Printable Kettle – OpenSCAD\n// Medium complexity, ~100 mm tall, wall thickness 2 mm\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 0.35;\n\nmodule kettle() {\n    // Main body – hollow cylinder with rounded bottom\n    difference() {\n        // Outer shell\n        union() {\n            translate([0, 0, 45])\n                cylinder(h = 55, d1 = 70, d2 = 80);\n            translate([0, 0, 0])\n                sphere(d = 70);\n        }\n        // Inner void\n        translate([0, 0, 2])\n            cylinder(h = 53, d1 = 66, d2 = 76);\n        translate([0, 0, 0])\n            sphere(d = 66);\n    }\n\n    // Bottom base ring\n    difference() {\n        cylinder(h = 5, d = 74);\n        cylinder(h = 5.2, d = 70);\n    }\n\n    // Spout\n    translate([35, 0, 80])\n        rotate([0, 45, 0])\n        difference() {\n            cylinder(h = 45, d1 = 22, d2 = 14);\n            translate([0, 0, -1])\n                cylinder(h = 47, d1 = 18, d2 = 10);\n        }\n\n    // Handle\n    difference() {\n        // Outer handle grip\n        translate([-38, 0, 75])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180)\n                translate([30, 0, 0])\n                    circle(r = 6);\n        // Inner void\n        translate([-38, 0, 75])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180)\n                translate([30, 0, 0])\n                    circle(r = 4);\n    }\n\n    // Lid\n    difference() {\n        // Lid top\n        translate([0, 0, 102])\n            cylinder(h = 8, d = 78);\n        // Lid inner void\n        translate([0, 0, 102])\n            cylinder(h = 8.2, d = 74);\n    }\n\n    // Lid knob\n    translate([0, 0, 110])\n        cylinder(h = 8, d = 18);\n\n    // Steam vents – 6 small holes in lid\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([25, 0, 102])\n                cylinder(h = 10, d = 2.5);\n    }\n}\n\n// Apply global scale\nscale([scale_factor, scale_factor, scale_factor])\n    kettle();",
    "renders": true
  },
  {
    "household_item": "toaster",
    "openscad_code": "// Realistic medium-complexity 3D-printable toaster\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Overall dimensions\ntoaster_w = 80;\ntoaster_d = 40;\ntoaster_h = 60;\n\n// Slot dimensions\nslot_w = 30;\nslot_d = 4;\nslot_h = 40;\nslot_gap = 10;\n\n// Lever\nlever_len = 15;\nlever_r = 2.5;\n\n// Knob\nknob_r = 5;\nknob_h = 4;\n\n// Feet\nfoot_r = 3;\nfoot_h = 2;\n\nmodule body() {\n    difference() {\n        // Main shell\n        cube([toaster_w, toaster_d, toaster_h], center=true);\n        \n        // Bottom hollow\n        translate([0, 0, -foot_h/2])\n            cube([toaster_w-wall*2, toaster_d-wall*2, toaster_h-wall*2], center=true);\n        \n        // Left slot\n        translate([-slot_w/2 - slot_gap/2, 0, (toaster_h-slot_h)/2])\n            cube([slot_w, slot_d+wall, slot_h+wall], center=true);\n        \n        // Right slot\n        translate([slot_w/2 + slot_gap/2, 0, (toaster_h-slot_h)/2])\n            cube([slot_w, slot_d+wall, slot_h+wall], center=true);\n    }\n}\n\nmodule top_surface() {\n    // Top curved surface\n    translate([0, 0, toaster_h/2 - wall])\n        scale([toaster_w/2, toaster_d/2, wall])\n            sphere($fn=32);\n}\n\nmodule lever_assembly() {\n    // Lever slot\n    translate([toaster_w/2 - wall, 0, -toaster_h/4])\n        cube([wall, lever_r*2, lever_len*2], center=true);\n    \n    // Lever handle\n    translate([toaster_w/2 + lever_len/2, 0, -toaster_h/4])\n        rotate([90, 0, 0])\n            cylinder(h=lever_len, r=lever_r, $fn=16);\n    \n    // Lever plate\n    translate([toaster_w/2 - wall/2, 0, -toaster_h/4])\n        cube([wall/2, lever_r*3, lever_r*0.5], center=true);\n}\n\nmodule control_knob() {\n    // Knob housing\n    translate([toaster_w/2 - wall, toaster_d/4, toaster_h/4])\n        cube([wall, knob_r*2.2, knob_h*2], center=true);\n    \n    // Knob\n    translate([toaster_w/2 + knob_r, toaster_d/4, toaster_h/4])\n        rotate([90, 0, 0])\n            cylinder(h=knob_h, r=knob_r, $fn=32);\n    \n    // Knob indicator line\n    translate([toaster_w/2 + knob_r*1.5, toaster_d/4, toaster_h/4 + knob_h/2])\n        cube([knob_r*0.5, 0.5, 1], center=true);\n}\n\nmodule feet() {\n    // Four feet\n    for(x = [-toaster_w/3, toaster_w/3])\n        for(y = [-toaster_d/3, toaster_d/3])\n            translate([x, y, -toaster_h/2 - foot_h/2])\n                cylinder(h=foot_h, r=foot_r, $fn=16);\n}\n\nmodule crumb_tray() {\n    // Tray slot\n    translate([0, toaster_d/2 + wall/2, -toaster_h/4])\n        cube([toaster_w-wall*4, wall, toaster_h/2], center=true);\n    \n    // Tray handle\n    translate([0, toaster_d/2 + wall + 3, -toaster_h/4])\n        cube([toaster_w/4, 3, 5], center=true);\n}\n\n// Assemble toaster\nunion() {\n    body();\n    top_surface();\n    lever_assembly();\n    control_knob();\n    feet();\n    crumb_tray();\n}",
    "renders": true
  },
  {
    "household_item": "blender",
    "openscad_code": "// Realistic Blender - Medium Complexity\n// Base dimensions: 80mm height, 50mm width, 45mm depth\n\n$fn = 32;\n\n// Main body with motor housing\nmodule blender_base() {\n    difference() {\n        // Main housing - slightly tapered\n        cylinder(h = 40, r1 = 25, r2 = 22, center = false);\n        \n        // Front control panel recess\n        translate([0, 22, 20])\n            cube([30, 5, 15], center = true);\n        \n        // Ventilation slots on back\n        for(i = [1:4]) {\n            translate([0, -22, 8*i])\n                cube([40, 3, 2], center = true);\n        }\n    }\n    \n    // Control knob\n    translate([0, 25, 25])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 5, center = true);\n}\n\n// Jar assembly\nmodule blender_jar() {\n    // Jar body - cylindrical with slight taper\n    difference() {\n        cylinder(h = 35, r1 = 20, r2 = 18, center = false);\n        \n        // Interior hollow\n        translate([0, 0, 2])\n            cylinder(h = 33, r1 = 18, r2 = 16, center = false);\n        \n        // Pour spout\n        translate([20, 0, 30])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 5, center = true);\n    }\n    \n    // Handle\n    translate([20, 0, 17.5])\n        rotate([0, 90, 0])\n            difference() {\n                // Handle grip\n                cylinder(h = 30, r = 6, center = true);\n                \n                // Handle hole\n                cylinder(h = 32, r = 4, center = true);\n            }\n    \n    // Lid\n    translate([0, 0, 37])\n        difference() {\n            cylinder(h = 5, r = 20, center = false);\n            cylinder(h = 6, r = 18, center = false);\n            \n            // Central opening\n            cylinder(h = 6, r = 3, center = false);\n        }\n}\n\n// Blade assembly\nmodule blender_blades() {\n    translate([0, 0, 42]) {\n        // Blade hub\n        cylinder(h = 5, r = 8, center = false);\n        \n        // Blades - 4 curved arms\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                // Main blade\n                translate([12, 0, 2.5])\n                    rotate([0, 0, 15])\n                        cube([20, 2, 1], center = true);\n                \n                // Secondary blade\n                translate([8, 0, 2.5])\n                    rotate([0, 0, -10])\n                        cube([15, 1.5, 0.8], center = true);\n            }\n        }\n    }\n}\n\n// Power cord\nmodule power_cord() {\n    translate([-25, 0, 5])\n        rotate([0, 90, 0])\n            for(i = [0:5]) {\n                translate([0, 0, -i*3])\n                    rotate([0, 15*i, 0])\n                        cylinder(h = 3, r = 2, center = true);\n            }\n}\n\n// Assembly\nunion() {\n    // Base unit\n    blender_base();\n    \n    // Jar on top\n    translate([0, 0, 40])\n        blender_jar();\n    \n    // Blades inside jar\n    blender_blades();\n    \n    // Power cord\n    power_cord();\n    \n    // Feet - 4 rubber pads\n    for(x = [-15, 15])\n        for(y = [-15, 15])\n            translate([x, y, 0])\n                cylinder(h = 2, r = 3, center = false);\n}",
    "renders": true
  },
  {
    "household_item": "mixer",
    "openscad_code": "// Realistic Kitchen Stand-Mixer (medium complexity)\n// All dimensions in mm, ready for FDM printing\n\n// Global parameters\nwall_th = 2.5;          // uniform wall thickness for printability\nbase_h = 20;            // height of the base\nbase_r = 45;            // radius of the circular base\nbody_h = 60;            // height of the motor body\nbody_r = 35;            // radius of the motor body\ntilt_angle = 30;        // head-tilt angle in degrees\nbowl_r = 40;            // bowl radius\nbowl_h = 40;            // bowl height\nbeater_r = 4;           // beater rod radius\nbeater_l = 45;          // beater rod length\n\nmodule base() {\n    // Solid circular foot with rubber ring channel\n    difference() {\n        cylinder(h=base_h, r=base_r, $fn=60);\n        translate([0,0,base_h-3])\n            cylinder(h=3+0.01, r=base_r-wall_th, $fn=60);\n    }\n    \n    // Vent slots around the base\n    for(a=[0:30:330])\n        rotate([0,0,a])\n            translate([base_r-4, -1.5, 2])\n                cube([6,3,base_h-4]);\n}\n\nmodule motor_body() {\n    // Main cylindrical housing\n    difference() {\n        cylinder(h=body_h, r=body_r, $fn=48);\n        // Cavity inside\n        translate([0,0,wall_th])\n            cylinder(h=body_h-wall_th*2, r=body_r-wall_th, $fn=48);\n        // Top ventilation grill\n        for(a=[0:45:315])\n            rotate([0,0,a])\n                translate([body_r-7, -1, body_h-7])\n                    cube([8,2,7]);\n    }\n    \n    // Front control knob\n    translate([body_r-4, 0, body_h-20])\n        rotate([90,0,0])\n            cylinder(h=8, r1=6, r2=4, $fn=20);\n}\n\nmodule tilting_head() {\n    rotate([tilt_angle,0,0])\n        translate([0,0,body_h])\n            union() {\n                // Head shell\n                difference() {\n                    cube([body_r*2, body_r, body_r*1.2], center=true);\n                    translate([0,0,-body_r*0.6+wall_th])\n                        cube([body_r*2-wall_th*2, body_r-wall_th*2, body_r*1.2], center=true);\n                }\n                \n                // Output hub\n                translate([0,0,-body_r*0.6-5])\n                    cylinder(h=10, r=body_r/3, $fn=32);\n            }\n}\n\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        cylinder(h=bowl_h, r=bowl_r, $fn=64);\n        // Inner cavity\n        translate([0,0,wall_th])\n            cylinder(h=bowl_h-wall_th, r=bowl_r-wall_th, $fn=64);\n        // Base recess for printed foot\n        translate([0,0,-0.01])\n            cylinder(h=3, r=bowl_r-10, $fn=32);\n    }\n    \n    // Handle\n    translate([bowl_r+2, 0, bowl_h/2])\n        rotate([0,90,0])\n            cylinder(h=15, r=4, $fn=16);\n}\n\nmodule beater() {\n    // Central shaft\n    cylinder(h=beater_l, r=beater_r, $fn=16);\n    \n    // Four elliptical loops\n    for(i=[0:90:270]) {\n        rotate([0,0,i])\n            translate([beater_r*2.5, 0, beater_l*0.4])\n                rotate([0,90,0])\n                    scale([1,0.6,1])\n                        cylinder(h=beater_r*2, r=beater_r*4, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Fixed base and body\n    base();\n    translate([0,0,base_h])\n        motor_body();\n    \n    // Tilting head\n    tilting_head();\n    \n    // Attach beater\n    translate([0,0,body_h+body_r*1.2*sin(tilt_angle)])\n        rotate([tilt_angle,0,0])\n            translate([0,0,-beater_l-5])\n                beater();\n}\n\n// Separate bowl component\ntranslate([0, base_r+bowl_r+15, 0])\n    bowl();",
    "renders": true
  },
  {
    "household_item": "spatula",
    "openscad_code": "// Realistic 3D printable spatula – medium complexity\n// 100 mm total length, 3 mm wall thickness, no steep overhangs\n\n$fn = 30;\n\n// Overall scale factor\nscale_factor = 1;\n\n// Handle parameters\nhandle_len = 60 * scale_factor;\nhandle_dia = 10 * scale_factor;\nwall = 3 * scale_factor;\n\n// Blade parameters\nblade_len = 35 * scale_factor;\nblade_wid = 25 * scale_factor;\nblade_thk = 2 * scale_factor;\n\n// Ferrule (transition ring)\nferrule_h = 8 * scale_factor;\nferrule_d = 14 * scale_factor;\n\nmodule handle_grip() {\n    // Main handle tube\n    difference() {\n        cylinder(h = handle_len, d = handle_dia, center = false);\n        translate([0, 0, wall])\n            cylinder(h = handle_len - wall*2, d = handle_dia - wall*2, center = false);\n    }\n    // Grip rings for ergonomics\n    for (i = [1:6]) {\n        translate([0, 0, i*10 - 5])\n            difference() {\n                cylinder(h = 4, d = handle_dia + 2);\n                cylinder(h = 4, d = handle_dia - 1);\n            }\n    }\n}\n\nmodule ferrule() {\n    // Decorative reinforcing ring between handle and blade\n    cylinder(h = ferrule_h, d1 = ferrule_d, d2 = handle_dia, center = false);\n}\n\nmodule blade() {\n    // Main flat blade\n    translate([-blade_len + 2, 0, 0])\n        rotate([0, 90, 0])\n            linear_extrude(height = blade_thk, center = true)\n                polygon(points=[\n                    [0, -blade_wid/2],\n                    [blade_len, -blade_wid/2 + 4],\n                    [blade_len + 5, 0],\n                    [blade_len, blade_wid/2 - 4],\n                    [0, blade_wid/2]\n                ]);\n    // Blade spine – adds stiffness\n    translate([-blade_len/2, 0, blade_thk/2 + wall/2])\n        cube([blade_len + 2, 4, wall], center = true);\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0])\n        handle_grip();\n    // Ferrule\n    translate([0, 0, handle_len])\n        ferrule();\n    // Blade\n    translate([0, 0, handle_len + ferrule_h])\n        blade();\n}",
    "renders": true
  },
  {
    "household_item": "whisk",
    "openscad_code": "// OpenSCAD Whisk - Realistic Medium Complexity\n// A 3D printable balloon whisk with handle and 8 wire loops\n\n// Overall dimensions\nhandle_len = 70;\nhandle_dia = 12;\nball_dia = 45;\nwire_dia = 1.5;\nwire_count = 8;\n\n// Handle module with grip texture\nmodule handle() {\n    // Main handle shaft\n    color(\"silver\")\n    cylinder(h=handle_len, d=handle_dia, $fn=32);\n    \n    // Grip rings for better hold\n    for (i = [10:15:handle_len-20]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h=4, d=handle_dia+2, $fn=32);\n            cylinder(h=4.1, d=handle_dia-1, $fn=32);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_len])\n    sphere(d=handle_dia, $fn=32);\n}\n\n// Wire loop generator\nmodule wire_loop(angle, radius) {\n    rotate([angle, 0, 0])\n    translate([0, 0, handle_len])\n    rotate([90, 0, 0])\n    difference() {\n        // Main loop shape - torus segment\n        rotate_extrude(angle=180, $fn=32)\n        translate([radius, 0, 0])\n        circle(d=wire_dia, $fn=16);\n        \n        // Cut bottom flat for printing\n        translate([0, 0, -wire_dia/2])\n        cube([radius*2+wire_dia, radius*2+wire_dia, wire_dia], center=true);\n    }\n}\n\n// Wire junction hub\nmodule junction_hub() {\n    color(\"silver\")\n    translate([0, 0, handle_len])\n    difference() {\n        sphere(d=8, $fn=32);\n        \n        // Hollow center for weight reduction\n        sphere(d=4, $fn=32);\n    }\n}\n\n// Main whisk assembly\nmodule whisk() {\n    // Handle assembly\n    handle();\n    \n    // Junction hub where wires meet handle\n    junction_hub();\n    \n    // Generate 8 wire loops in spherical pattern\n    for (i = [0:wire_count-1]) {\n        // Calculate spherical distribution angles\n        theta = 45 + i * 360/wire_count;  // Azimuthal angle\n        phi = 30 + (i % 2) * 30;          // Polar angle alternates\n        \n        // Create each wire loop\n        wire_loop(phi, ball_dia/2);\n    }\n    \n    // Additional support ring\n    color(\"silver\")\n    translate([0, 0, handle_len+ball_dia/3])\n    rotate([90, 0, 0])\n    torus(ring_diameter=ball_dia*0.8, tube_diameter=wire_dia*1.2);\n}\n\n// Helper module for torus shape\nmodule torus(ring_diameter, tube_diameter) {\n    rotate_extrude($fn=32)\n    translate([ring_diameter/2, 0, 0])\n    circle(d=tube_diameter, $fn=16);\n}\n\n// Render the whisk\nwhisk();",
    "renders": true
  },
  {
    "household_item": "ladle",
    "openscad_code": "// Medium-complexity realistic ladle\n// Wall thickness 1.2 mm everywhere for reliable 3D printing\n// Overall length ≈ 85 mm\n\n$fn = 32;\n\nmodule rounded_handle(length, width, thickness, radius) {\n    // Generates a slightly tapered round handle\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cube([width, thickness, radius*2], center = true);\n            translate([0, 0, length - radius])\n                cube([width*0.8, thickness*0.8, radius*2], center = true);\n        }\n        \n        // Hollow out the handle\n        translate([0, 0, -1])\n            cube([width - 2.4, thickness - 2.4, length + 2], center = true);\n    }\n}\n\nmodule hanging_loop() {\n    // Small loop at the end of the handle\n    rotate([90, 0, 0])\n        difference() {\n            torus(4, 1.5);\n            translate([0, -5, 0])\n                cube([10, 10, 3], center = true);\n        }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r = minor);\n}\n\nmodule bowl() {\n    // Main ladle bowl with realistic curvature\n    difference() {\n        // Outer bowl shape\n        scale([1, 1, 0.55])\n            sphere(d = 38);\n        \n        // Inner cavity\n        translate([0, 0, 1.2])\n            scale([1, 1, 0.5])\n                sphere(d = 38 - 2.4);\n        \n        // Flatten bottom slightly for printing stability\n        translate([0, 0, -9])\n            cube([40, 40, 10], center = true);\n    }\n    \n    // Reinforcement rim\n    translate([0, 0, 9.5])\n        difference() {\n            cylinder(h = 2, d = 38.5, center = true);\n            cylinder(h = 2.5, d = 36.5, center = true);\n        }\n}\n\nmodule transition() {\n    // Curved neck between bowl and handle\n    difference() {\n        hull() {\n            translate([0, -19, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 20, center = true);\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 8, center = true);\n        }\n        \n        // Hollow transition\n        translate([0, -9.5, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 15, d = 20 - 2.4, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Bowl\n    bowl();\n    \n    // Transition neck\n    translate([0, 9.5, 0])\n        transition();\n    \n    // Handle\n    translate([0, 9.5 + 6, 0])\n        rotate([90, 0, 0])\n            rounded_handle(50, 8, 6, 3);\n    \n    // Hanging loop\n    translate([0, 9.5 + 6 + 47, 0])\n        hanging_loop();\n}",
    "renders": true
  },
  {
    "household_item": "tongs",
    "openscad_code": "// Realistic Kitchen Tongs - Medium Complexity\n// Designed for 3D printing with no supports needed\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\ntongs_length = 90;\nhandle_length = 45;\ngrip_width = 25;\nspring_thickness = 1.5;\nwall_thickness = 2;\n\nmodule tongs_half() {\n    // Handle base\n    translate([0, 0, 0])\n        difference() {\n            // Main handle body\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, r1=4, r2=3.5);\n            \n            // Grip pattern - subtracted grooves\n            for(i = [5:8:handle_length-10]) {\n                translate([0, 0, i])\n                    rotate([90, 0, 0])\n                        cylinder(h=3, r=3.6, $fn=6);\n            }\n        }\n    \n    // Transition piece\n    translate([0, 0, handle_length])\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=3.5, r2=2.5);\n    \n    // Lever arm\n    translate([0, 0, handle_length+8])\n        rotate([90, 0, 0])\n            cylinder(h=tongs_length-handle_length-8, r1=2.5, r2=2);\n    \n    // Gripper head\n    translate([0, 0, tongs_length])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer shell\n                cylinder(h=grip_width, r1=5, r2=3);\n                \n                // Inner curve for better grip\n                translate([0, 0, -0.5])\n                    cylinder(h=grip_width+1, r1=4, r2=2);\n                \n                // Grip teeth\n                for(i = [2:4:grip_width-4]) {\n                    rotate([0, 90, 0])\n                        translate([i, 0, 0])\n                            cube([0.5, 2.5, 1], center=true);\n                }\n            }\n}\n\n// Spring mechanism\nmodule spring() {\n    // Central pivot cylinder\n    translate([0, 0, handle_length])\n        rotate([0, 90, 0])\n            cylinder(h=6, r=1.5);\n    \n    // Spring arms\n    for(side = [0, 1]) {\n        rotate([0, 0, side * 180])\n            translate([0, 0, handle_length-5])\n                difference() {\n                    // Spring arm body\n                    rotate([0, 90, 0])\n                        cylinder(h=10, r=spring_thickness+1);\n                    \n                    // Spring cutout\n                    rotate([0, 90, 0])\n                        translate([5, 0, 0])\n                            cylinder(h=12, r=spring_thickness);\n                }\n    }\n}\n\n// Assembly\n// Left tong half\ntongs_half();\n\n// Right tong half (mirrored)\nmirror([1, 0, 0])\n    tongs_half();\n\n// Spring assembly in center\nspring();",
    "renders": true
  },
  {
    "household_item": "colander",
    "openscad_code": "// Realistic 3D-printable colander\n// Medium complexity using only basic primitives\n\n// Overall dimensions\ndiameter = 80;\nheight = 40;\nwall_thickness = 2;\nbase_thickness = 3;\n\nmodule colander_body() {\n    difference() {\n        // Main bowl shape\n        cylinder(h=height, d=diameter, $fn=64);\n        \n        // Hollow out the inside\n        translate([0, 0, -1])\n            cylinder(h=height+2, d=diameter-wall_thickness*2, $fn=64);\n    }\n}\n\nmodule base() {\n    // Solid base\n    cylinder(h=base_thickness, d=diameter, $fn=64);\n    \n    // Add feet\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([diameter/2-8, 0, 0])\n                cube([10, 6, 5], center=true);\n    }\n}\n\nmodule handles() {\n    // Left handle\n    translate([-diameter/2-8, 0, height/2]) {\n        rotate([0, 90, 0])\n            cylinder(h=15, d1=8, d2=6, $fn=16);\n        rotate([0, 90, 0])\n            translate([0, 0, 15])\n                cylinder(h=6, d=8, $fn=16);\n    }\n    \n    // Right handle\n    translate([diameter/2+8, 0, height/2]) {\n        rotate([0, -90, 0])\n            cylinder(h=15, d1=8, d2=6, $fn=16);\n        rotate([0, -90, 0])\n            translate([0, 0, 15])\n                cylinder(h=6, d=8, $fn=16);\n    }\n}\n\nmodule drainage_holes() {\n    // Central hole pattern\n    for(i=[0:5]) {\n        for(j=[0:11]) {\n            angle = j*30;\n            radius = 5 + i*7;\n            translate([radius*cos(angle), radius*sin(angle), 0]) {\n                // Ensure holes are only in curved part\n                intersection() {\n                    cylinder(h=height, d=3, $fn=12);\n                    translate([0, 0, height/2])\n                        sphere(d=diameter-wall_thickness, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Bottom holes\n    for(i=[0:7]) {\n        for(j=[0:7]) {\n            x = -21 + i*7;\n            y = -21 + j*7;\n            dist = sqrt(x*x + y*y);\n            if(dist < diameter/2-10) {\n                translate([x, y, 0])\n                    cylinder(h=base_thickness+1, d=2, $fn=8);\n            }\n        }\n    }\n}\n\nmodule rim() {\n    // Top rim reinforcement\n    translate([0, 0, height])\n        difference() {\n            cylinder(h=wall_thickness*2, d=diameter+wall_thickness*2, $fn=64);\n            cylinder(h=wall_thickness*2+1, d=diameter, $fn=64);\n        }\n}\n\n// Assemble the colander\nunion() {\n    translate([0, 0, 0])\n        colander_body();\n    \n    translate([0, 0, 0])\n        base();\n    \n    handles();\n    \n    rim();\n    \n    translate([0, 0, 0])\n        drainage_holes();\n}",
    "renders": true
  },
  {
    "household_item": "strainer",
    "openscad_code": "// Realistic Kitchen Strainer - Medium Complexity\n// 3D printable with proper wall thickness and no overhangs\n\n// Parameters\n$fn = 36;\nstrainer_diameter = 80;\nstrainer_height = 35;\nwall_thickness = 2;\nhandle_length = 40;\nhandle_width = 12;\nhandle_height = 8;\nhole_diameter = 4;\nhole_spacing = 6;\nbase_thickness = 3;\n\n// Main module\nmodule strainer() {\n    // Bowl body\n    difference() {\n        // Outer bowl\n        cylinder(h=strainer_height, d1=strainer_diameter, d2=strainer_diameter*0.9);\n        \n        // Inner cavity\n        translate([0, 0, base_thickness])\n            cylinder(h=strainer_height-base_thickness+1, d1=strainer_diameter-wall_thickness*2, d2=strainer_diameter*0.9-wall_thickness*2);\n    }\n    \n    // Bottom base\n    translate([0, 0, 0])\n        cylinder(h=base_thickness, d=strainer_diameter);\n    \n    // Handle\n    translate([strainer_diameter/2 - wall_thickness, 0, strainer_height/2])\n        rotate([90, 0, 0])\n            handle();\n    \n    // Drainage holes pattern\n    drainage_holes();\n}\n\n// Handle module\nmodule handle() {\n    // Main grip\n    difference() {\n        hull() {\n            cube([handle_length, handle_width, handle_height], center=true);\n            translate([handle_length/2 - handle_width/2, 0, 0])\n                sphere(d=handle_width);\n        }\n        \n        // Ergonomic groove\n        translate([0, 0, -handle_height/2+2])\n            cube([handle_length-10, handle_width-4, handle_height-3], center=true);\n    }\n    \n    // Reinforcement\n    translate([-handle_length/2, 0, 0])\n        cylinder(h=handle_width, d=wall_thickness*3, center=true);\n}\n\n// Drainage holes using polar coordinates\nmodule drainage_holes() {\n    // Bottom holes\n    for(r = [hole_spacing*2:hole_spacing:strainer_diameter/2-hole_spacing*2]) {\n        for(theta = [0:30:359]) {\n            if(r * sin(theta) < strainer_diameter/2 - hole_spacing*2 && \n               r * cos(theta) < strainer_diameter/2 - hole_spacing*2) {\n                translate([r * cos(theta), r * sin(theta), base_thickness/2])\n                    rotate([0, 0, 0])\n                        cylinder(h=base_thickness+1, d=hole_diameter);\n            }\n        }\n    }\n    \n    // Side holes\n    for(z = [base_thickness+hole_spacing:hole_spacing:strainer_height-hole_spacing]) {\n        radius = strainer_diameter/2 - wall_thickness - hole_spacing;\n        for(theta = [0:20:359]) {\n            translate([radius * cos(theta), radius * sin(theta), z])\n                rotate([0, 90, 0])\n                    cylinder(h=wall_thickness+1, d=hole_diameter);\n        }\n    }\n}\n\n// Rim detail\nmodule rim() {\n    translate([0, 0, strainer_height])\n        difference() {\n            cylinder(h=wall_thickness*2, d1=strainer_diameter, d2=strainer_diameter+wall_thickness);\n            cylinder(h=wall_thickness*2+1, d1=strainer_diameter-wall_thickness*2, d2=strainer_diameter-wall_thickness);\n        }\n}\n\n// Assembly\nunion() {\n    strainer();\n    rim();\n}",
    "renders": true
  },
  {
    "household_item": "grater",
    "openscad_code": "// Realistic 3D-printable cheese grater – medium complexity\n// Overall size ≈ 70 mm × 45 mm × 25 mm\n\n$fn = 32;\n\n/*--- Main body ----------------------------------------------------------*/\nmodule body() {\n    difference() {\n        // Solid block\n        cube([70, 45, 25], center = true);\n\n        // Hollow cavity – leave 2 mm wall\n        translate([0, 0, 2])\n            cube([66, 41, 21], center = true);\n\n        // Thumb slot for gripping (top rear)\n        translate([20, 22, 12])\n            rotate([-90, 0, 0])\n                cylinder(h = 15, d = 10, center = true);\n    }\n}\n\n/*--- Grating teeth ------------------------------------------------------*/\nmodule teeth_row(y, z, long = true) {\n    // Length varies for staggered rows\n    len = long ? 35 : 25;\n    for (x = [-len/2 + 2.5 : 5 : len/2 - 2.5]) {\n        translate([x, y, z])\n            scale([1, 0.6, 0.6])\n                cylinder(h = 2.5, d = 1.2);\n    }\n}\n\nmodule teeth_rows() {\n    for (row = [0 : 8]) {\n        y = -20 + row * 5;\n        // Alternate long and short rows\n        teeth_row(y, 12.5, row % 2 == 0);\n    }\n}\n\n/*--- Handle -------------------------------------------------------------*/\nmodule handle() {\n    difference() {\n        // Main handle block\n        translate([-42, 0, -5])\n            rotate([0, 0, -10])\n                cube([30, 12, 15], center = true);\n\n        // Finger groove\n        translate([-42, 0, 3])\n            rotate([0, 0, -10])\n                cylinder(h = 20, d = 8, center = true);\n        \n        // Hanging hole\n        translate([-55, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d = 5, center = true);\n    }\n}\n\n/*--- Reinforcement ribs -------------------------------------------------*/\nmodule ribs() {\n    for (x = [-25 : 25 : 25]) {\n        translate([x, 0, -8])\n            cube([3, 41, 8], center = true);\n    }\n}\n\n/*--- Assembly -----------------------------------------------------------*/\nunion() {\n    body();\n    handle();\n    ribs();\n    teeth_rows();\n}",
    "renders": true
  },
  {
    "household_item": "peeler",
    "openscad_code": "// Potato/Y-Peeler – 3D-printable, realistic style, medium complexity (~100 mm long)\n\n// ------------- Parameters -------------\nhandle_len = 80;\nhandle_d   = 12;\nslot_w     = 6;\nslot_h     = 4;\nslot_gap   = 8;\nblade_w    = 40;\nblade_h    = 25;\nblade_t    = 1.0;\neye_len    = 10;\neye_w      = 4;\nmetal_t    = 2.0;\nwall       = 1.5;           // printable wall thickness\n\n// ------------- Modules -------------\nmodule handle() {\n    difference() {\n        // Main ergonomic handle\n        hull() {\n            cylinder(h=handle_len, d1=handle_d+4, d2=handle_d, center=false);\n            translate([0,0,handle_len-10])\n                cylinder(h=10, d=handle_d, center=false);\n        }\n\n        // Grippy slots\n        for (i=[10:slot_gap:handle_len-15])\n            translate([0, -handle_d/2-0.1, i])\n                cube([slot_w, handle_d+0.2, slot_h], center=true);\n\n        // Hanging hole\n        translate([0,0,handle_len-8])\n            rotate([90,0,0])\n                cylinder(h=handle_d+1, d=4, center=true);\n    }\n}\n\nmodule yoke() {\n    difference() {\n        // Y-shaped metal yoke\n        union() {\n            translate([-blade_w/2+metal_t/2, 0, 0])\n                cube([metal_t, blade_h, metal_t]);\n            mirror([1,0,0])\n                translate([-blade_w/2+metal_t/2, 0, 0])\n                    cube([metal_t, blade_h, metal_t]);\n            translate([0, blade_h/2-metal_t/2, 0])\n                cube([blade_w-metal_t*2, metal_t, metal_t]);\n        }\n\n        // Rivet holes\n        translate([-blade_w/2+metal_t/2, blade_h-4, metal_t/2])\n            rotate([90,0,0])\n                cylinder(h=metal_t+1, d=2, center=true);\n        mirror([1,0,0])\n            translate([-blade_w/2+metal_t/2, blade_h-4, metal_t/2])\n                rotate([90,0,0])\n                    cylinder(h=metal_t+1, d=2, center=true);\n    }\n}\n\nmodule blade() {\n    difference() {\n        // Blade plate\n        translate([0, blade_h/2, 0])\n            cube([blade_w, blade_h, blade_t], center=true);\n\n        // Peeler slot\n        translate([0, blade_h/2-7, -0.1])\n            cube([blade_w-6, 14, blade_t+0.2], center=true);\n\n        // Sharp edge teeth (simple saw pattern)\n        for (x=[-blade_w/2+2:2:blade_w/2-2])\n            translate([x, blade_h-2, blade_t/2])\n                cube([1, 2, blade_t]);\n    }\n}\n\nmodule eye_remover() {\n    // Small tab with hole at handle front\n    translate([0, handle_d/2-wall, 0])\n        rotate([0,90,0])\n            difference() {\n                hull() {\n                    cylinder(h=eye_len, d=eye_w, center=false);\n                    translate([0, eye_len, 0])\n                        sphere(d=eye_w);\n                }\n                translate([0, eye_len/2, 0])\n                    rotate([90,0,0])\n                        cylinder(h=eye_w+1, d=eye_w-2*wall, center=true);\n            }\n}\n\n// ------------- Assembly -------------\nunion() {\n    // Handle (printable horizontally)\n    handle();\n\n    // Yoke + Blade\n    translate([0, handle_d/2, handle_len-blade_h-10])\n        rotate([90,0,0])\n            union() {\n                yoke();\n                blade();\n            }\n\n    // Eye remover\n    eye_remover();\n}",
    "renders": true
  },
  {
    "household_item": "canopener",
    "openscad_code": "// Can Opener - Realistic Style, Medium Complexity\n// Overall dimensions: ~90mm length, ~25mm width, ~15mm height\n\n$fn = 36;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main grip handle\n        translate([0, 0, 2.5])\n            scale([1, 0.6, 0.5])\n                cylinder(h = 80, r = 12);\n        \n        // Grip holes for fingers\n        for(i = [0:2]) {\n            translate([-30 + i*30, 0, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, r = 3);\n        }\n    }\n}\n\n// Cutting wheel assembly\nmodule cutting_wheel() {\n    // Wheel mount\n    translate([42, 0, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 5);\n    \n    // Cutting wheel\n    translate([42, 0, 7.5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 3, r = 8);\n                // Serrated edge teeth\n                for(i = [0:15]) {\n                    rotate([0, 0, i*22.5])\n                        translate([7, 0, -1])\n                            cube([2, 1.5, 5]);\n                }\n            }\n}\n\n// Handle lever\nmodule handle_lever() {\n    union() {\n        // Main lever\n        difference() {\n            translate([-35, 0, 7.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 70, r = 4);\n            // Grip texture\n            for(i = [0:6]) {\n                translate([-65 + i*10, 0, 7.5])\n                    rotate([0, 90, 0])\n                        cylinder(h = 8, r = 3.5);\n            }\n        }\n        \n        // Lever pivot\n        translate([0, 0, 7.5])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = 4.5);\n    }\n}\n\n// Bottle opener end\nmodule bottle_opener() {\n    difference() {\n        // Main opener shape\n        translate([-45, 0, 7.5])\n            rotate([0, 0, 90])\n                difference() {\n                    cube([15, 25, 5], center = true);\n                    // Curved opening\n                    translate([0, 7.5, 0])\n                        cylinder(h = 6, r = 8);\n                    // Flat edge\n                    translate([0, -7.5, 0])\n                        cube([15, 5, 6], center = true);\n                }\n        \n        // Grip hole\n        translate([-45, 0, 7.5])\n            rotate([0, 90, 0])\n                cylinder(h = 7, r = 6);\n    }\n}\n\n// Magnet holder\nmodule magnet_holder() {\n    translate([20, 0, 15])\n        difference() {\n            cylinder(h = 3, r = 6);\n            cylinder(h = 4, r = 4);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    cutting_wheel();\n    handle_lever();\n    bottle_opener();\n    magnet_holder();\n    \n    // Reinforcement ribs\n    for(i = [-20, 0, 20]) {\n        translate([i, 0, 2.5])\n            cube([5, 8, 5], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "corkscrew",
    "openscad_code": "// Realistic Medium-Complexity Corkscrew\n// Total height ~95 mm, 3D-printable with no overhangs >45°\n\n$fn = 36;\n\n// Main module\nmodule corkscrew() {\n    // Handle assembly\n    union() {\n        handle();\n        \n        // Transition collar\n        translate([0,0,75])\n            cylinder(h = 8, d1 = 14, d2 = 10, center = true);\n        \n        // Metal shaft\n        translate([0,0,42])\n            cylinder(h = 35, d = 6, center = true);\n        \n        // Helix coil\n        translate([0,0,10])\n            rotate([0,0,0])\n                helix();\n        \n        // Protective tip\n        translate([0,0,2])\n            sphere(d = 8);\n    }\n}\n\n// Handle with ergonomic grip rings\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h = 75, d = 30, center = false);\n        \n        // Grip rings\n        for (i = [0:6]) {\n            translate([0,0,5 + i*10])\n                cylinder(h = 5, d = 28, center = false);\n        }\n        \n        // Hanging hole\n        translate([0,12.5,67.5])\n            rotate([90,0,0])\n                cylinder(h = 25, d = 6, center = true);\n    }\n    \n    // Top cap\n    translate([0,0,75])\n        cylinder(h = 5, d = 32, center = false);\n}\n\n// Helical coil for cork penetration\nmodule helix() {\n    // Parameters\n    turns = 7;\n    radius = 4.5;\n    wire_d = 3.5;\n    pitch = 4;\n    \n    // Generate coil segments\n    for (i = [0:turns*20]) {\n        angle = i * 360 / (turns * 20);\n        z = i * pitch / 20;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            z\n        ])\n            rotate([90,0,angle])\n                cylinder(h = wire_d, d = wire_d, center = true);\n    }\n    \n    // Tapered end for easy insertion\n    translate([0,0,pitch*turns])\n        cylinder(h = 8, d1 = 3.5, d2 = 1.5, center = false);\n}\n\n// Render the model\ncorkscrew();",
    "renders": true
  },
  {
    "household_item": "cuttingboard",
    "openscad_code": "// Realistic medium-complexity cutting board\n// Overall dimensions: 80 mm × 50 mm × 8 mm (with juice groove)\n\n$fn = 30; // Smooth curves\n\n// Board body\nmodule board_body() {\n    difference() {\n        // Main plank\n        translate([0, 0, 4])\n            cube([80, 50, 8], center = true);\n\n        // Juice groove (2 mm deep)\n        translate([0, 0, 7.9])\n            cube([70, 40, 2], center = true);\n    }\n}\n\n// Handle slots on short ends (finger grips)\nmodule handle_slots() {\n    for (y = [-20, 20]) {\n        difference() {\n            // Cut half-cylinders for finger grips\n            translate([-40, y, 4])\n                rotate([0, 90, 0])\n                    cylinder(h = 50, d = 12, center = true);\n\n            // Ensure clean cut on board edge\n            translate([-44, y, 4])\n                cube([10, 14, 8], center = true);\n        }\n    }\n}\n\n// Rubber feet recesses (4 corners)\nmodule feet_recesses() {\n    for (x = [-30, 30])\n        for (y = [-18, 18])\n            translate([x, y, 0.5])\n                cylinder(h = 1, d = 8);\n}\n\n// Wood grain texture (shallow grooves)\nmodule wood_grain() {\n    for (i = [-35:5:35]) {\n        translate([i, 0, 7.9])\n            cube([0.5, 50, 0.2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    board_body();\n    handle_slots();\n    feet_recesses();\n    wood_grain();\n}",
    "renders": true
  },
  {
    "household_item": "microwave",
    "openscad_code": "// Realistic Microwave - medium complexity\n// All dimensions in mm\n\n// Overall dimensions\nmicrowave_width = 80;\nmicrowave_depth = 60;\nmicrowave_height = 45;\nwall_thickness = 2;\n\n// Main body\nmodule main_body() {\n    // Outer shell\n    difference() {\n        // Main box\n        cube([microwave_width, microwave_depth, microwave_height], center = true);\n        \n        // Hollow out inside\n        translate([0, 0, -wall_thickness/2])\n            cube([microwave_width - 2*wall_thickness, \n                  microwave_depth - 2*wall_thickness, \n                  microwave_height - wall_thickness], center = true);\n    }\n}\n\n// Door\nmodule door() {\n    // Door frame\n    translate([-microwave_width/2 + wall_thickness, \n               microwave_depth/2 - wall_thickness, \n               0])\n        cube([microwave_width - 2*wall_thickness, wall_thickness*2, microwave_height - 10]);\n    \n    // Glass window\n    translate([-microwave_width/2 + wall_thickness + 3, \n               microwave_depth/2 - wall_thickness/2, \n               5])\n        cube([microwave_width - 2*wall_thickness - 6, wall_thickness, microwave_height - 20]);\n    \n    // Door handle\n    translate([-microwave_width/2 + wall_thickness + 5, \n               microwave_depth/2 + 3, \n               -5])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=2, $fn=16);\n}\n\n// Control panel\nmodule control_panel() {\n    // Panel background\n    translate([microwave_width/2 - 15, 0, microwave_height/2 - 15])\n        cube([15, microwave_depth - 20, 15]);\n    \n    // Display screen\n    translate([microwave_width/2 - 13, -10, microwave_height/2 - 5])\n        cube([11, 20, 5]);\n    \n    // Buttons\n    for(x = [microwave_width/2 - 12, microwave_width/2 - 8, microwave_width/2 - 4]) {\n        translate([x, 0, microwave_height/2 - 12])\n            cylinder(h=2, r=1.5, $fn=16);\n    }\n    \n    // Knob\n    translate([microwave_width/2 - 10, 10, microwave_height/2 - 12])\n        cylinder(h=3, r=3, $fn=20);\n}\n\n// Ventilation grilles\nmodule vents() {\n    // Top vents\n    for(i = [1:3:microwave_width - 10]) {\n        translate([-microwave_width/2 + 5 + i, \n                   microwave_depth/2 - wall_thickness, \n                   microwave_height/2 - 5])\n            cube([2, wall_thickness, 1]);\n    }\n    \n    // Side vents\n    for(i = [1:3:10]) {\n        translate([microwave_width/2 - wall_thickness, \n                   -microwave_depth/2 + 5 + i, \n                   microwave_height/2 - 5])\n            cube([wall_thickness, 2, 1]);\n    }\n}\n\n// Feet\nmodule feet() {\n    foot_size = 3;\n    foot_height = 2;\n    \n    translate([microwave_width/2 - 10, microwave_depth/2 - 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n    \n    translate([-microwave_width/2 + 10, microwave_depth/2 - 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n    \n    translate([microwave_width/2 - 10, -microwave_depth/2 + 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n    \n    translate([-microwave_width/2 + 10, -microwave_depth/2 + 10, -microwave_height/2 - foot_height/2])\n        cube([foot_size, foot_size, foot_height]);\n}\n\n// Assembly\nunion() {\n    main_body();\n    door();\n    control_panel();\n    vents();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "oven",
    "openscad_code": "// Realistic medium-complexity 3D-printable oven model\n// External dimensions: 80 x 70 x 70 mm\n\n$fn = 32;\n\nmodule roundedBox(s, r) {\n    translate([0,0,r]) {\n        difference() {\n            hull() {\n                for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n                    translate([dx*(s.x/2-r), dy*(s.y/2-r), dz*(s.z/2-r)])\n                        sphere(r);\n            }\n            translate([0,-s.y/2-1,0])\n                cube([s.x+2, 2, s.z+2], center=true);\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        roundedBox([80,70,70], 4);\n        // Hollow out\n        translate([0,0,5])\n            roundedBox([74,66,60], 3);\n    }\n}\n\nmodule door() {\n    difference() {\n        translate([-40.5,0,35])\n            cube([3, 60, 50], center=true);\n        // Window cutout\n        translate([-42,0,40])\n            cube([2, 40, 30], center=true);\n    }\n    // Handle bar\n    translate([-42,0,10])\n        rotate([0,90,0])\n            cylinder(h=30, d=6);\n}\n\nmodule knobRow(y, z, n) {\n    for(i=[-(n-1)/2:(n-1)/2]) {\n        translate([40, y+i*12, z])\n            rotate([90,0,0])\n                cylinder(h=6, d1=8, d2=6);\n    }\n}\n\nmodule feet() {\n    for(x=[-30, 30], y=[-25, 25]) {\n        translate([x,y,-3])\n            cylinder(h=6, d=8);\n    }\n}\n\nmodule ventSlits() {\n    for(i=[-2:2]) {\n        translate([0, 35.5, 55+i*6])\n            cube([70, 2, 2]);\n    }\n}\n\nmodule rack() {\n    color(\"silver\")\n    difference() {\n        translate([0,0,25])\n            cube([70, 60, 1], center=true);\n        for(x=[-25:10:25], y=[-20:10:20]) {\n            translate([x,y,25.5])\n                cylinder(h=2, d=3);\n        }\n    }\n}\n\nmodule oven() {\n    union() {\n        body();\n        door();\n        knobRow(0, 55, 3);\n        feet();\n        ventSlits();\n        rack();\n    }\n}\n\noven();",
    "renders": true
  },
  {
    "household_item": "stove",
    "openscad_code": "// Realistic medium-complexity 3D printable stove model\n// Overall size ~90 mm wide × 70 mm deep × 50 mm tall\n// All walls ≥2 mm for printability\n\n$fn = 32;  // Smooth curves\n\nmodule body() {\n    // Main stove body with rounded corners\n    difference() {\n        minkowski() {\n            cube([80, 60, 40], center = true);\n            sphere(3);\n        }\n        // Hollow inside\n        translate([0, 0, 2])\n            cube([76, 56, 40], center = true);\n    }\n}\n\nmodule cooktop() {\n    // Top plate with burner recesses\n    difference() {\n        translate([0, 0, 22])\n            cube([82, 62, 4], center = true);\n        // Recesses for burners\n        for (x = [-25, 25])\n            for (y = [-15, 15])\n                translate([x, y, 24])\n                    cylinder(h = 3, r = 12);\n    }\n}\n\nmodule burner_grate() {\n    // Four burner grates\n    for (x = [-25, 25])\n        for (y = [-15, 15]) {\n            translate([x, y, 26])\n                difference() {\n                    cylinder(h = 2, r = 12);\n                    cylinder(h = 3, r = 10);\n                }\n            // Grate bars\n            for (i = [-8:4:8])\n                translate([x + i, y, 26.5])\n                    cube([2, 22, 1], center = true);\n            for (j = [-8:4:8])\n                translate([x, y + j, 26.5])\n                    cube([22, 2, 1], center = true);\n        }\n}\n\nmodule burner_head() {\n    // Gas burner caps\n    color(\"darkgray\")\n    for (x = [-25, 25])\n        for (y = [-15, 15]) {\n            translate([x, y, 24])\n                cylinder(h = 2, r = 8);\n            // Flame spreader holes\n            for (a = [0:30:359])\n                rotate([0, 0, a])\n                    translate([x + 6, y, 24.5])\n                        cylinder(h = 1, r = 1);\n        }\n}\n\nmodule knobs() {\n    // Four control knobs on front panel\n    for (i = [0:3])\n        translate([-30 + i*20, 32, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 6, r = 5);\n                    translate([0, 0, -1])\n                        cylinder(h = 8, r = 4);\n                    // Indicator line\n                    translate([4.5, 0, 3])\n                        cube([1, 0.5, 6], center = true);\n                }\n}\n\nmodule door() {\n    // Oven door with handle\n    translate([0, -32, -5])\n        difference() {\n            // Door panel\n            cube([70, 4, 35], center = true);\n            // Window\n            translate([0, 1, 8])\n                cube([50, 2, 20], center = true);\n            // Handle cutouts\n            translate([0, 3, -12])\n                cube([60, 2, 4], center = true);\n        }\n    // Handle bar\n    translate([0, -30, -12])\n        rotate([90, 0, 0])\n            cylinder(h = 60, r = 2);\n}\n\nmodule feet() {\n    // Four rubber feet\n    for (x = [-35, 35])\n        for (y = [-25, 25])\n            translate([x, y, -22])\n                cylinder(h = 4, r = 3);\n}\n\n// Assemble the stove\nunion() {\n    body();\n    cooktop();\n    burner_grate();\n    burner_head();\n    knobs();\n    door();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "refrigerator",
    "openscad_code": "// Refrigerator - Realistic Style, Medium Complexity\n// Overall dimensions: 45mm x 40mm x 90mm (HxDxW)\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([45, 40, 90], center = true);\n        \n        // Hollow interior\n        translate([0, 2, 0])\n            cube([41, 34, 86], center = true);\n    }\n}\n\n// Refrigerator door\nmodule door() {\n    difference() {\n        // Main door panel\n        translate([0, 20.5, 0])\n            cube([43, 1, 88], center = true);\n        \n        // Door inner recess\n        translate([0, 21, 0])\n            cube([41, 0.5, 86], center = true);\n    }\n}\n\n// Handle\nmodule handle() {\n    // Vertical bar\n    translate([15, 21.5, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 3, d2 = 3, center = true);\n    \n    // Top grip\n    translate([15, 21.5, 30])\n        cube([6, 2, 2], center = true);\n    \n    // Bottom grip\n    translate([15, 21.5, 10])\n        cube([6, 2, 2], center = true);\n}\n\n// Hinges\nmodule hinges() {\n    for(z = [-35, 35]) {\n        translate([-22.5, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 2.5, center = true);\n    }\n}\n\n// Feet\nmodule feet() {\n    for(x = [-15, 15])\n        translate([x, -20, -45])\n            cylinder(h = 5, r1 = 3, r2 = 2, center = true);\n}\n\n// Control panel\nmodule control_panel() {\n    // Panel base\n    translate([18, 20.5, 35])\n        cube([8, 0.5, 15], center = true);\n    \n    // Buttons\n    for(i = [0:2]) {\n        translate([15, 21, 30 + i * 5])\n            cylinder(h = 0.5, r = 1, center = true);\n    }\n    \n    // Display\n    translate([21, 21, 35])\n        cube([4, 0.5, 8], center = true);\n}\n\n// Grille at bottom\nmodule grille() {\n    translate([0, -15, -45])\n        difference() {\n            cube([40, 5, 15], center = true);\n            for(i = [-6:3:6]) {\n                translate([i, -12.5, -45])\n                    cube([1, 5, 15], center = true);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    door();\n    handle();\n    hinges();\n    feet();\n    control_panel();\n    grille();\n}",
    "renders": true
  },
  {
    "household_item": "freezer",
    "openscad_code": "// Upright freezer, ~80 mm tall\n// All dimensions in mm; wall thickness = 2 mm everywhere for 3D-printability\n\n// Overall outer dimensions\n$fn = 32;\noverall_w = 35;\noverall_d = 30;\noverall_h = 80;\n\n// Wall thickness\nwall = 2;\n\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([overall_w, overall_d, overall_h]);\n        // Hollow inside\n        translate([wall, wall, wall])\n            cube([overall_w-2*wall, overall_d-2*wall, overall_h-wall]);\n    }\n}\n\nmodule door() {\n    difference() {\n        // Solid door\n        translate([overall_w, 0, 0])\n            cube([wall, overall_d, overall_h]);\n        // Recessed inner face\n        translate([overall_w + 0.5, wall, wall])\n            cube([wall - 1, overall_d - 2*wall, overall_h - 2*wall]);\n    }\n    \n    // Handle bar\n    translate([overall_w + wall + 1, overall_d/2 - 1, overall_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 2);\n}\n\nmodule shelf() {\n    thickness = 1.5;\n    lip = 1;\n    difference() {\n        cube([overall_w - 4*wall, overall_d - 2*wall - 2*lip, thickness]);\n        // Lightening slots\n        for (x = [wall : 6 : overall_w - 6*wall])\n            translate([x, 0, -0.1])\n                cube([1, overall_d - 2*wall - 2*lip, thickness + 0.2]);\n    }\n}\n\nmodule shelves() {\n    shelf_spacing = 18;\n    shelf_h_start = 8;\n    for (i = [0 : 1 : 2])\n        translate([2*wall, wall, shelf_h_start + i*shelf_spacing])\n            shelf();\n}\n\nmodule hinges() {\n    pin_r = 1.5;\n    pin_h = 4;\n    // Top hinge\n    translate([overall_w, overall_d/2, overall_h - 2])\n        rotate([90, 0, 0])\n            cylinder(h = pin_h, r = pin_r);\n    // Bottom hinge\n    translate([overall_w, overall_d/2, 2])\n        rotate([90, 0, 0])\n            cylinder(h = pin_h, r = pin_r);\n}\n\nmodule feet() {\n    foot_r = 2;\n    foot_h = 3;\n    for (x = [wall : overall_w - 2*wall : overall_w - 4*wall])\n        for (y = [wall : overall_d - 2*wall : overall_d - 4*wall])\n            translate([x, y, -foot_h])\n                cylinder(h = foot_h, r = foot_r);\n}\n\nunion() {\n    body();\n    door();\n    hinges();\n    shelves();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "dishwasher",
    "openscad_code": "// Dishwasher - Realistic Style, Medium Complexity\n// Approx 70mm tall x 60mm wide x 60mm deep\n\n// Main body dimensions\nbody_width = 60;\nbody_depth = 58;\nbody_height = 68;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main dishwasher body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([body_width, body_depth, body_height], center=false);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([body_width-wall*2, body_depth-wall*2, body_height-wall*2], center=false);\n    }\n}\n\n// Front panel with door\nmodule front_door() {\n    // Door panel\n    translate([0, body_depth-wall, 0])\n        cube([body_width, wall, body_height], center=false);\n    \n    // Door handle\n    translate([body_width/2-15, body_depth+1, body_height/2+10])\n        cube([30, 3, 5], center=false);\n}\n\n// Control panel on top\nmodule control_panel() {\n    difference() {\n        // Panel base\n        translate([5, body_depth-10, body_height-5])\n            cube([body_width-10, 10, 5], center=false);\n        \n        // Buttons\n        for(i = [0:3]) {\n            translate([10 + i*12, body_depth-7, body_height-2])\n                cube([6, 4, 2], center=false);\n        }\n        \n        // Display window\n        translate([body_width/2-8, body_depth-8, body_height-2])\n            cube([16, 6, 2], center=false);\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    for(x = [10, body_width-15]) {\n        for(y = [10, body_depth-15]) {\n            translate([x, y, -4])\n                cylinder(h=4, r=3, center=false);\n        }\n    }\n}\n\n// Air vent on front\nmodule vent() {\n    translate([body_width/2-10, body_depth-wall, body_height-15])\n        difference() {\n            cube([20, wall+1, 10], center=false);\n            for(i = [0:3]) {\n                translate([body_width/2-8 + i*4, body_depth-wall, body_height-13])\n                    cube([2, wall+2, 6], center=false);\n            }\n        }\n}\n\n// Water inlet on back\nmodule water_inlet() {\n    translate([body_width-10, 5, 30])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3, center=false);\n}\n\n// Bottom spray arm (simplified)\nmodule spray_arm() {\n    translate([body_width/2-5, body_depth/2-5, 10])\n        cube([10, body_depth-20, 1], center=false);\n}\n\n// Main assembly\nunion() {\n    body();\n    front_door();\n    control_panel();\n    feet();\n    vent();\n    water_inlet();\n    spray_arm();\n}",
    "renders": true
  },
  {
    "household_item": "sink",
    "openscad_code": "// Realistic medium-complexity 3D-printable sink model\n// Overall size ≈ 85 mm wide × 60 mm deep × 30 mm high\n\n$fn = 36;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule basin() {\n    difference() {\n        // Outer shell\n        cube([80, 55, 25]);\n        \n        // Inner cavity\n        translate([wall, wall, -1])\n        cube([80 - 2*wall, 55 - 2*wall, 25 - wall + 1]);\n        \n        // Drain slope front\n        translate([wall, wall, 12])\n        rotate([0, 15, 0])\n        cube([80 - 2*wall, 55 - 2*wall, 20]);\n        \n        // Drain slope back\n        translate([wall, wall, 12])\n        rotate([0, -15, 0])\n        cube([80 - 2*wall, 55 - 2*wall, 20]);\n    }\n}\n\nmodule drain() {\n    difference() {\n        // Drain collar\n        cylinder(h = 3, d1 = 12, d2 = 10);\n        \n        // Drain hole\n        translate([0, 0, -1])\n        cylinder(h = 5, d = 6);\n    }\n}\n\nmodule faucet_base() {\n    difference() {\n        // Solid block\n        cube([20, 15, 8]);\n        \n        // Mount holes\n        for (x = [-7, 7])\n            translate([x, 15/2, -1])\n            cylinder(h = 10, d = 3.5);\n    }\n}\n\nmodule faucet_spout() {\n    difference() {\n        union() {\n            // Vertical pipe\n            cylinder(h = 22, d = 6);\n            \n            // Horizontal spout\n            translate([0, 0, 22])\n            rotate([90, 0, 0])\n            cylinder(h = 25, d = 6);\n            \n            // Spout end\n            translate([0, 25, 22])\n            rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4);\n        }\n        \n        // Waterway\n        translate([0, 0, -1])\n        cylinder(h = 56, d = 3);\n    }\n}\n\nmodule overflow_holes() {\n    // Two small overflow slots at back\n    for (y = [-5, 5])\n        translate([-wall/2, 55/2 + y, 12])\n        cube([wall, 2, 8]);\n}\n\n// Build the sink\nunion() {\n    // Main basin\n    basin();\n    \n    // Drain at bottom center\n    translate([80/2, 55/2, 0])\n    drain();\n    \n    // Overflow slots in back wall\n    overflow_holes();\n    \n    // Faucet assembly rear left\n    translate([5, 5, 25])\n    union() {\n        faucet_base();\n        translate([10, 7.5, 8])\n        faucet_spout();\n    }\n    \n    // Side ribs for strength\n    for (x = [5, 75])\n        translate([x - wall/2, 0, 0])\n        cube([wall, 55, 25]);\n}",
    "renders": true
  },
  {
    "household_item": "faucet",
    "openscad_code": "// Realistic medium-complexity faucet – OpenSCAD\n// Approx. 90 mm tall, 3 mm wall thickness everywhere\n\n$fn = 36;\n\nmodule rounded_cube(size, r)\n{\n    // Helper for a cube with rounded vertical edges\n    hull()\n    {\n        translate([r, r, 0]) cube([size.x - 2*r, size.y - 2*r, size.z]);\n        translate([r, r, r]) sphere(r);\n        translate([size.x - r, r, r]) sphere(r);\n        translate([r, size.y - r, r]) sphere(r);\n        translate([size.x - r, size.y - r, r]) sphere(r);\n        translate([r, r, size.z - r]) sphere(r);\n        translate([size.x - r, r, size.z - r]) sphere(r);\n        translate([r, size.y - r, size.z - r]) sphere(r);\n        translate([size.x - r, size.y - r, size.z - r]) sphere(r);\n    }\n}\n\n// Base plate\nmodule base()\n{\n    difference()\n    {\n        rounded_cube([40, 40, 8], 4);\n        // Mounting holes\n        for (x = [-15, 15])\n            for (y = [-15, 15])\n                translate([x + 20, y + 20, -1])\n                    cylinder(h = 10, d = 5);\n    }\n}\n\n// Vertical pipe body\nmodule body()\n{\n    difference()\n    {\n        translate([20, 20, 8])\n            cylinder(h = 60, d1 = 18, d2 = 22);\n        // Internal hollow\n        translate([20, 20, -1])\n            cylinder(h = 70, d = 12);\n    }\n}\n\n// Horizontal spout\nmodule spout()\n{\n    difference()\n    {\n        union()\n        {\n            // Main curved spout\n            hull()\n            {\n                translate([20, 20, 65])\n                    rotate([0, 90, 0])\n                        cylinder(h = 5, d = 16);\n                translate([20 + 45, 20, 55])\n                    rotate([0, 90, 0])\n                        cylinder(h = 5, d = 14);\n            }\n            // Aerator tip\n            translate([20 + 50, 20, 55])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, d = 12);\n        }\n        // Internal bore\n        hull()\n        {\n            translate([20, 20, 65])\n                rotate([0, 90, 0])\n                    cylinder(h = 6, d = 8);\n            translate([20 + 45, 20, 55])\n                rotate([0, 90, 0])\n                    cylinder(h = 6, d = 8);\n        }\n    }\n}\n\n// Handle\nmodule handle()\n{\n    difference()\n    {\n        // Lever arm\n        translate([20, 20 + 11, 68])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 8);\n        // Shaft hole\n        translate([20, 20 + 11, 68])\n            rotate([90, 0, 0])\n                cylinder(h = 32, d = 4);\n    }\n    // Grip knob\n    translate([20, 20 + 11, 68 + 30])\n    {\n        difference()\n        {\n            sphere(d = 14);\n            sphere(d = 10);\n        }\n    }\n}\n\n// Assembly\nunion()\n{\n    base();\n    body();\n    spout();\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "cabinet",
    "openscad_code": "// Realistic Cabinet - Medium Complexity (3D-Printable)\n\n$fn=32; // Smooth curves for 3D printing\n\n// Overall dimensions\ncabinet_width = 80;\ncabinet_depth = 40;\ncabinet_height = 60;\nwall_thickness = 2;\ndoor_thickness = 1.5;\n\nmodule cabinet_body() {\n    difference() {\n        // Main outer shell\n        cube([cabinet_width, cabinet_depth, cabinet_height], center=false);\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([\n                cabinet_width - 2*wall_thickness,\n                cabinet_depth - 2*wall_thickness,\n                cabinet_height - wall_thickness\n            ], center=false);\n    }\n}\n\nmodule cabinet_back() {\n    // Solid back panel\n    translate([0, 0, 0])\n        cube([cabinet_width, wall_thickness, cabinet_height], center=false);\n}\n\nmodule shelf() {\n    // Single shelf positioned at 60% height\n    translate([wall_thickness, wall_thickness, cabinet_height * 0.6])\n        cube([\n            cabinet_width - 2*wall_thickness,\n            cabinet_depth - 2*wall_thickness,\n            wall_thickness\n        ], center=false);\n}\n\nmodule door_handle() {\n    // Cylindrical door handle\n    translate([cabinet_width - 8, cabinet_depth - door_thickness - 3, cabinet_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=8, d1=4, d2=4, center=false);\n}\n\nmodule cabinet_door() {\n    // Hinged door with panel detail\n    difference() {\n        // Main door panel\n        translate([cabinet_width - door_thickness, 0, 0])\n            cube([door_thickness, cabinet_depth, cabinet_height], center=false);\n        \n        // Recessed panel detail\n        translate([cabinet_width - door_thickness + 0.5, wall_thickness, wall_thickness*2])\n            cube([\n                door_thickness - 1,\n                cabinet_depth - 2*wall_thickness,\n                cabinet_height - 4*wall_thickness\n            ], center=false);\n        \n        // Handle hole (for printing as separate piece)\n        translate([cabinet_width - door_thickness/2, cabinet_depth - 3, cabinet_height/2])\n            cylinder(h=door_thickness + 1, d=2.5, center=true);\n    }\n}\n\nmodule base_trim() {\n    // Decorative base trim\n    for(i=[0, 1]) {\n        // Left and right trim pieces\n        translate([i * (cabinet_width - wall_thickness*2), -1, -2])\n            cube([wall_thickness*2, cabinet_depth + 2, 2], center=false);\n    }\n    \n    // Front trim piece\n    translate([0, -1, -2])\n        cube([cabinet_width, wall_thickness*2, 2], center=false);\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    cabinet_back();\n    shelf();\n    cabinet_door();\n    door_handle();\n    base_trim();\n}",
    "renders": true
  },
  {
    "household_item": "drawer",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Drawer\n// Overall size: 60 mm (W) x 50 mm (D) x 40 mm (H)\n// Wall thickness: 2 mm\n\n$fn = 32;\n\n// Outer carcase\nmodule carcase() {\n    difference() {\n        // Main shell\n        translate([0, 0, 20])\n            cube([60, 50, 40], center = true);\n        // Hollow space\n        translate([0, 0, 21])\n            cube([56, 46, 38], center = true);\n    }\n}\n\n// Drawer box\nmodule drawer_box() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 15])\n            cube([54, 44, 30], center = true);\n        // Inner cavity\n        translate([0, 0, 15])\n            cube([50, 40, 28], center = true);\n    }\n}\n\n// Drawer front panel\nmodule drawer_front() {\n    difference() {\n        // Front plate\n        translate([0, 25, 15])\n            cube([58, 2, 34], center = true);\n        // Recessed handle\n        translate([0, 26, 15])\n            cube([40, 0.5, 10], center = true);\n    }\n}\n\n// Handle bar\nmodule handle_bar() {\n    translate([0, 26.5, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 38, d = 6, center = true);\n}\n\n// Bottom runners for drawer\nmodule runners() {\n    for (x = [-20, 20]) {\n        translate([x, -10, 0])\n            cube([2, 50, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    carcase();\n    runners();\n    drawer_box();\n    drawer_front();\n    handle_bar();\n}",
    "renders": true
  },
  {
    "household_item": "shelf",
    "openscad_code": "// Realistic medium-complexity shelf\n// Overall dimensions: 80mm wide x 40mm deep x 30mm high\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32; // smooth curves\n\n// Material thickness constant\nth = 2;\n\n// Shelf parameters\nshelf_w = 80;\nshelf_d = 40;\nshelf_h = 30;\n\n// Shelf board module\nmodule shelf_board(w, d, h) {\n    difference() {\n        // Main board\n        cube([w, d, h], center=true);\n        // Hollow out underside\n        translate([0, 0, -h/2 + th])\n            cube([w - 2*th, d - 2*th, th], center=true);\n    }\n}\n\n// Support bracket module\nmodule bracket() {\n    union() {\n        // Vertical support\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 5, 0])\n            cube([th, th, shelf_h]);\n        // Horizontal support\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 5, shelf_h/2 - th/2])\n            cube([th, shelf_d - 10, th]);\n        // Diagonal brace\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 5, shelf_h/4])\n            rotate([0, 0, 45])\n            cube([th*1.414, shelf_d/2 - 5, th]);\n    }\n}\n\n// Back panel module\nmodule back_panel() {\n    translate([0, -shelf_d/2 + th/2, shelf_h/2])\n        cube([shelf_w, th, shelf_h], center=true);\n}\n\n// Screw hole module\nmodule screw_hole() {\n    cylinder(h=th+0.1, d=3, center=true);\n}\n\n// Main shelf assembly\nunion() {\n    // Shelf surface\n    translate([0, 0, shelf_h/2])\n        shelf_board(shelf_w, shelf_d, th);\n    \n    // Bottom shelf\n    translate([0, 0, 0])\n        shelf_board(shelf_w, shelf_d, th);\n    \n    // Back panel\n    back_panel();\n    \n    // Support brackets - 4 corners\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            translate([x * (shelf_w/2 - 5), y * (shelf_d/2 - 5), 0])\n                bracket();\n        }\n    }\n    \n    // Mounting holes in back panel\n    for(i=[-1, 0, 1]) {\n        translate([i * 20, -shelf_d/2 + th/2, shelf_h - 5])\n            rotate([0, 90, 0])\n            screw_hole();\n    }\n    \n    // Rounded front edge\n    translate([0, shelf_d/2 - 1, shelf_h/2 + th/2])\n        cylinder(h=shelf_w, d=2, center=true);\n    \n    // Small lip at front\n    translate([0, shelf_d/2 - 1.5, shelf_h/2 - 1])\n        cube([shelf_w, 1, 2], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "jar",
    "openscad_code": "// Realistic medium-complexity 3D-printable jar\n// Overall dimensions: ~70 mm tall, ~50 mm wide\n// Wall thickness: 2 mm for 3D printing\n\n$fa = 2; $fs = 0.5;\n\n// Parameters\njar_height = 70;\njar_radius = 25;\nwall = 2;\nthreads_pitch = 3;\nthreads_depth = 1.5;\nthreads_turns = 1.5;\ncap_thick = 8;\nbase_thick = 4;\n\n// Main jar body\nmodule jar_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = jar_height - base_thick, r = jar_radius, $fn = 64);\n        \n        // Hollow inside\n        translate([0, 0, -0.1])\n            cylinder(h = jar_height - base_thick + 0.2, r = jar_radius - wall, $fn = 64);\n        \n        // Thread cutout\n        translate([0, 0, jar_height - base_thick - threads_turns * threads_pitch])\n            cylinder(h = threads_turns * threads_pitch + 1, r = jar_radius - wall + threads_depth, $fn = 64);\n    }\n    \n    // Solid base\n    translate([0, 0, 0])\n        cylinder(h = base_thick, r = jar_radius, $fn = 64);\n}\n\n// Threads on jar neck\nmodule jar_threads() {\n    for (i = [0 : 5]) {\n        rotate([0, 0, i * 60])\n            translate([jar_radius - wall - threads_depth, 0, jar_height - base_thick - threads_turns * threads_pitch])\n                linear_extrude(height = threads_turns * threads_pitch, twist = threads_turns * 360, scale = 1, $fn = 32)\n                    square([threads_depth, threads_pitch / 6], center = false);\n    }\n}\n\n// Cap\nmodule cap() {\n    difference() {\n        union() {\n            // Top dome\n            translate([0, 0, cap_thick + 1])\n                scale([1, 1, 0.7])\n                    sphere(r = jar_radius + wall, $fn = 64);\n            \n            // Cylindrical ring\n            cylinder(h = cap_thick + 1, r = jar_radius + wall, $fn = 64);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            cylinder(h = cap_thick + 1.2, r = jar_radius, $fn = 64);\n        \n        // Thread cavity\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n                translate([jar_radius - wall, 0, 0])\n                    linear_extrude(height = threads_turns * threads_pitch, twist = -threads_turns * 360, scale = 1, $fn = 32)\n                        square([threads_depth, threads_pitch / 6], center = false);\n        }\n    }\n    \n    // Grip ridges on the outside\n    for (i = [0 : 35]) {\n        rotate([0, 0, i * 10])\n            translate([jar_radius + wall - 0.5, 0, cap_thick / 2])\n                cube([1, 1.5, cap_thick - 2], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_thick]) {\n    jar_body();\n    jar_threads();\n}\ntranslate([0, 0, jar_height - base_thick + 2]) {\n    cap();\n}",
    "renders": true
  },
  {
    "household_item": "bottle",
    "openscad_code": "// Realistic medium-complexity 3D-printable bottle\n// Height ≈ 90 mm, Ø ≈ 45 mm, wall 2 mm\n\n$fn = 36; // smooth curves\n\n// Overall dimensions\nH_total = 90;\nR_body = 22.5;\nwall = 2;\n\n// Bottle module\nmodule bottle() {\n    difference() {\n        union() {\n            // Main body\n            body();\n\n            // Shoulder transition\n            shoulder();\n\n            // Neck\n            neck();\n\n            // Base\n            base();\n        }\n        // Hollow interior\n        translate([0,0,wall])\n            scale([1,1,0.96])\n                body();\n        translate([0,0,wall])\n            scale([0.8,0.8,0.85])\n                shoulder();\n        translate([0,0,wall])\n            scale([0.55,0.55,0.8])\n                neck();\n    }\n\n    // Threads for cap\n    threads();\n}\n\n// Main cylindrical body\nmodule body() {\n    cylinder(h = H_total*0.65, r1 = R_body, r2 = R_body*0.9);\n}\n\n// Curved shoulder\nmodule shoulder() {\n    translate([0,0,H_total*0.65])\n        cylinder(h = H_total*0.15, r1 = R_body*0.9, r2 = R_body*0.6);\n}\n\n// Neck with lip\nmodule neck() {\n    translate([0,0,H_total*0.8])\n        union() {\n            cylinder(h = H_total*0.15, r1 = R_body*0.6, r2 = R_body*0.45);\n            // Lip ring\n            translate([0,0,H_total*0.15])\n                cylinder(h = 2, r1 = R_body*0.48, r2 = R_body*0.48);\n        }\n}\n\n// Reinforced base\nmodule base() {\n    difference() {\n        cylinder(h = 3, r1 = R_body+0.5, r2 = R_body+0.5);\n        for(i=[0:5:360])\n            rotate([0,0,i])\n                translate([R_body-1, -1, 0])\n                    cube([2, 2, 3]);\n    }\n}\n\n// External screw threads for cap\nmodule threads() {\n    for(z=[0:2.5:15])\n        translate([0,0,H_total*0.95 + z])\n            rotate_extrude()\n                translate([R_body*0.45, 0, 0])\n                    square([1.5, 2]);\n}\n\n// Generate bottle\nbottle();",
    "renders": true
  },
  {
    "household_item": "jug",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Jug\n// Overall height ≈ 85 mm, max Ø ≈ 60 mm, wall ≈ 1.5 mm\n\nwall = 1.5;        // wall thickness\nbase_r = 30;       // base radius\nbody_h = 55;       // main body height\nneck_r = 12;       // neck radius\nspout_l = 25;      // spout length\nhandle_clear = 15; // handle clearance\n\nmodule jug() {\n    difference() {\n        // ---------- Outer shell ----------\n        union() {\n            // Base\n            cylinder(h = 5, r1 = base_r, r2 = base_r, $fn = 60);\n\n            // Bulging body\n            translate([0, 0, 2.5])\n                cylinder(h = body_h, r1 = base_r, r2 = base_r * 0.9, $fn = 60);\n\n            // Neck cylinder\n            translate([0, 0, 2.5 + body_h])\n                cylinder(h = 15, r1 = neck_r + 2, r2 = neck_r, $fn = 60);\n\n            // Spout\n            translate([neck_r, 0, 2.5 + body_h + 15])\n                rotate([0, 75, 0])\n                    cylinder(h = spout_l, r1 = 5, r2 = 3, $fn = 30);\n\n            // Handle arch\n            translate([-base_r - 3, 0, 20])\n                rotate([90, 0, 0])\n                    difference() {\n                        rotate_extrude($fn = 60)\n                            translate([handle_clear, 0, 0])\n                                square([wall, 30]);\n                        // Finger groove\n                        translate([handle_clear + wall/2, 0, 10])\n                            rotate([90, 0, 0])\n                                cylinder(h = wall + 1, r = 4, $fn = 20);\n                    }\n        }\n\n        // ---------- Inner cavity ----------\n        translate([0, 0, wall])\n            cylinder(h = 100, r1 = base_r - wall, r2 = neck_r - wall, $fn = 60);\n\n        // Spout hollow\n        translate([neck_r, 0, 2.5 + body_h + 15])\n            rotate([0, 75, 0])\n                cylinder(h = spout_l + 2, r1 = 5 - wall, r2 = 3 - wall, $fn = 30);\n\n        // Drain hole through handle\n        translate([-base_r - 3 - wall, 0, 20 + 15])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r = wall, $fn = 20);\n    }\n}\n\njug();",
    "renders": true
  },
  {
    "household_item": "pitcher",
    "openscad_code": "// Realistic medium-complexity pitcher for 3D printing\n// Approx 90 mm tall, 60 mm wide (printable size)\n\n$fn = 36;\n\n// Main body parameters\nbody_h = 75;\nbody_r_bottom = 25;\nbody_r_top = 30;\nwall_th = 2;\n\n// Spout parameters\nspout_len = 35;\nspout_r = 8;\nspout_wall = 2;\n\n// Handle parameters\nhandle_r = 5;\nhandle_clearance = 15;\n\n// Pitcher assembly\nmodule pitcher() {\n    difference() {\n        union() {\n            // Main hollow body\n            difference() {\n                // Outer body\n                cylinder(h = body_h, r1 = body_r_bottom, r2 = body_r_top, center = false);\n                \n                // Inner cavity\n                translate([0, 0, wall_th])\n                cylinder(h = body_h + 1, r1 = body_r_bottom - wall_th, r2 = body_r_top - wall_th, center = false);\n            }\n            \n            // Bottom base\n            translate([0, 0, -2])\n            cylinder(h = 4, r1 = body_r_bottom + 3, r2 = body_r_bottom, center = false);\n            \n            // Spout outer\n            translate([0, body_r_top, body_h - 15])\n            rotate([90, 0, 0])\n            rotate_extrude(angle = 90, convexity = 10)\n            translate([spout_r, 0, 0])\n            circle(r = spout_r);\n            \n            // Handle outer\n            translate([body_r_top - 2, 0, body_h/2])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180, convexity = 10)\n            translate([handle_r + handle_clearance, 0, 0])\n            circle(r = handle_r);\n        }\n        \n        // Remove spout inner\n        translate([0, body_r_top - spout_wall, body_h - 15])\n        rotate([90, 0, 0])\n        rotate_extrude(angle = 90, convexity = 10)\n        translate([spout_r - spout_wall, 0, 0])\n        circle(r = spout_r - spout_wall);\n        \n        // Remove handle inner\n        translate([body_r_top - 2, 0, body_h/2])\n        rotate([0, 90, 0])\n    rotate_extrude(angle = 180, convexity = 10)\n    translate([handle_clearance, 0, 0])\n    circle(r = handle_r - wall_th);\n        \n        // Top rim rounding\n        translate([0, 0, body_h - 5])\n        cylinder(h = 6, r1 = body_r_top - wall_th, r2 = body_r_top - wall_th - 1, center = false);\n    }\n    \n    // Add rim lip\n    translate([0, 0, body_h - 1])\n    cylinder(h = 2, r1 = body_r_top + 1, r2 = body_r_top + 1, center = false);\n}\n\n// Render the pitcher\npitcher();",
    "renders": true
  },
  {
    "household_item": "thermos",
    "openscad_code": "// Realistic Thermos - Medium Complexity\n// Approx 80mm tall, 3D printable with no overhangs\n\n$fn = 36;  // Smooth curves for printing\nwall_thickness = 1.5;\n\nmodule thermos_body() {\n    // Main outer shell\n    difference() {\n        cylinder(h = 65, d = 45, center = false);  // Outer body\n        translate([0, 0, -1])\n            cylinder(h = 67, d = 42, center = false);  // Hollow inside\n    }\n    \n    // Bottom base - slightly wider for stability\n    translate([0, 0, -3])\n        cylinder(h = 4, d = 48, center = false);\n}\n\nmodule thermos_lid() {\n    // Lid top dome\n    difference() {\n        translate([0, 0, 65])\n            scale([1, 1, 0.7])\n                sphere(d = 45);  // Rounded top\n        \n        translate([0, 0, 65])\n            scale([1, 1, 0.7])\n                sphere(d = 42);  // Hollow inside\n    }\n    \n    // Lid threading collar\n    translate([0, 0, 62])\n        cylinder(h = 5, d = 42.5, center = false);\n    \n    // Handle attachment points\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle])\n            translate([22, 0, 68])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 3, center = false);\n    }\n}\n\nmodule handle() {\n    // Curved handle\n    for (i = [0:6]) {\n        rotate([0, 0, i * 30 - 90])\n            translate([24, 0, 68 + i * 0.8])\n                sphere(d = 3.5);\n    }\n    \n    // Handle bottom curve\n    translate([24, 0, 68])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 3.5, center = false);\n    \n    translate([-24, 0, 68])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 3.5, center = false);\n    \n    // Handle bar\n    translate([0, 0, 52.5])\n        rotate([90, 0, 0])\n            cylinder(h = 48, d = 3.5, center = true);\n}\n\nmodule decorative_band() {\n    // Top band with grooves\n    translate([0, 0, 62])\n        cylinder(h = 2, d = 46, center = false);\n    \n    // Grooves\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([22.5, 0, 62.5])\n                cube([1, 1, 2], center = true);\n    }\n    \n    // Bottom band\n    translate([0, 0, 3])\n        cylinder(h = 2, d = 46, center = false);\n}\n\n// Assembly\nunion() {\n    thermos_body();\n    thermos_lid();\n    handle();\n    decorative_band();\n}",
    "renders": true
  },
  {
    "household_item": "trivet",
    "openscad_code": "// Realistic Medium-Complexity Trivet\n// Dimensions: 80 mm diameter, 5 mm thick base, 6 mm tall feet\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\ntrivet_d = 80;  // mm\nbase_thick = 5;\nfoot_h = 6;\nfoot_r = 3;\nrib_w = 4;\nrib_h = 4;\n\n// Central circular base\nmodule base_disc() {\n    cylinder(h = base_thick, r = trivet_d/2 - foot_r, center = true);\n}\n\n// Radial ribs for heat dissipation\nmodule ribs() {\n    n = 8;  // number of ribs\n    for(i = [0 : n-1]) {\n        angle = i * 360/n;\n        rotate([0, 0, angle])\n            translate([0, trivet_d/4, 0])\n                cube([rib_w, trivet_d/2, rib_h], center = true);\n    }\n}\n\n// Circular outer ring for stability\nmodule outer_ring() {\n    difference() {\n        cylinder(h = rib_h, r = trivet_d/2 - foot_r/2, center = true);\n        cylinder(h = rib_h + 0.1, r = trivet_d/2 - foot_r/2 - rib_w, center = true);\n    }\n}\n\n// Feet to lift trivet above table\nmodule feet() {\n    n = 5;  // number of feet\n    foot_dist = trivet_d/2 - foot_r*2;\n    for(i = [0 : n-1]) {\n        angle = i * 360/n;\n        rotate([0, 0, angle])\n            translate([foot_dist, 0, -(base_thick/2 + foot_h/2)])\n                cylinder(h = foot_h, r = foot_r, center = true);\n    }\n}\n\n// Ventilation holes through base\nmodule vents() {\n    n = 6;  // number of vents\n    vent_r = 5;\n    vent_dist = trivet_d/3;\n    for(i = [0 : n-1]) {\n        angle = i * 360/n + 30;\n        rotate([0, 0, angle])\n            translate([vent_dist, 0, 0])\n                cylinder(h = base_thick + 0.2, r = vent_r, center = true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        base_disc();\n        \n        translate([0, 0, base_thick/2 + rib_h/2])\n            union() {\n                ribs();\n                outer_ring();\n            }\n        \n        feet();\n    }\n    \n    // Cut vents from base\n    vents();\n}",
    "renders": true
  },
  {
    "household_item": "placemat",
    "openscad_code": "// Realistic 3D-printable placemat\n// Size: 80 x 60 mm, 2 mm thick\n// Features: raised edge, drainage grooves, subtle texture\n\n$fn = 32;\n\n// Main parameters\nmat_w = 80;\nmat_h = 60;\nmat_thick = 2;\nedge_h = 1.5;\ngroove_depth = 0.4;\n\n// Base plate\ndifference() {\n    // Solid base\n    cube([mat_w, mat_h, mat_thick], center = false);\n    \n    // Drainage grooves\n    translate([0, 10, mat_thick - groove_depth]) {\n        for (y = [10 : 10 : mat_h - 20]) {\n            translate([5, y, 0])\n                cube([mat_w - 10, 1, groove_depth + 0.02]);\n        }\n    }\n}\n\n// Raised outer edge\nmodule edge() {\n    difference() {\n        // Outer rim\n        translate([0, 0, mat_thick])\n            cube([mat_w, mat_h, edge_h], center = false);\n        \n        // Cut out inner area\n        translate([2, 2, 0])\n            cube([mat_w - 4, mat_h - 4, edge_h + mat_thick], center = false);\n    }\n}\nedge();\n\n// Subtle texture dots in center area\nmodule texture_dot(x, y) {\n    translate([x, y, mat_thick])\n        sphere(d = 0.8, $fn = 12);\n}\n\n// Generate texture grid\nfor (x = [5 : 4 : mat_w - 5]) {\n    for (y = [5 : 4 : mat_h - 5]) {\n        texture_dot(x, y);\n    }\n}\n\n// Corner reinforcements\nmodule corner(x, y) {\n    translate([x, y, 0])\n        cylinder(h = mat_thick + edge_h, r = 3, $fn = 16);\n}\n\ncorners = [\n    [3, 3],\n    [mat_w - 3, 3],\n    [3, mat_h - 3],\n    [mat_w - 3, mat_h - 3]\n];\n\nfor (pos = corners) {\n    corner(pos[0], pos[1]);\n}",
    "renders": true
  },
  {
    "household_item": "napkin",
    "openscad_code": "// Realistic 3D printable napkin\n// Dimensions: ~70 mm square unfolded, 30 mm thick when folded\n// Wall thickness: 1.2 mm for printability\n\n// Napkin parameters\nnapkin_size = 70;           // Square napkin size in mm\nfold_count = 4;             // Number of folded layers\nthickness = 0.3;            // Single layer thickness in mm\ncrease_depth = 0.5;         // Depth of fold creases\n\n// Module for single napkin layer with texture\nmodule napkin_layer(size, thick) {\n    difference() {\n        // Base layer\n        cube([size, size, thick], center=true);\n        \n        // Subtle surface texture - small random depressions\n        for (x = [-size/2+5 : 5 : size/2-5]) {\n            for (y = [-size/2+5 : 5 : size/2-5]) {\n                translate([x, y, thick/2-0.1]) {\n                    sphere(thick/2);\n                }\n            }\n        }\n    }\n}\n\n// Module for creating fold creases\nmodule fold_crease(length, depth, width) {\n    color(\"gray\") {\n        translate([0, 0, -depth/2]) {\n            cube([length, width, depth], center=true);\n        }\n    }\n}\n\n// Module for folded corner detail\nmodule folded_corner(offset) {\n    difference() {\n        // Main folded part\n        translate([offset, offset, 0]) {\n            rotate([0, 0, 45]) {\n                cube([napkin_size/3, napkin_size/3, thickness*fold_count], center=true);\n            }\n        }\n        \n        // Remove overlap\n        translate([0, 0, -thickness*fold_count]) {\n            cube([napkin_size*2, napkin_size*2, thickness*fold_count*2], center=true);\n        }\n    }\n}\n\n// Main napkin assembly\nunion() {\n    // Base folded layers\n    for (i = [0 : fold_count-1]) {\n        translate([0, 0, i*thickness]) {\n            scale([1 - i*0.1, 1 - i*0.1, 1]) {\n                napkin_layer(napkin_size - i*5, thickness);\n            }\n        }\n    }\n    \n    // Diagonal fold lines\n    rotate([0, 0, 45]) {\n        fold_crease(napkin_size*1.2, crease_depth, 0.5);\n    }\n    rotate([0, 0, -45]) {\n        fold_crease(napkin_size*1.2, crease_depth, 0.5);\n    }\n    \n    // Horizontal and vertical creases\n    fold_crease(napkin_size, crease_depth, 0.5);\n    rotate([0, 0, 90]) {\n        fold_crease(napkin_size, crease_depth, 0.5);\n    }\n    \n    // Folded corners showing layering\n    folded_corner(napkin_size/3);\n    mirror([1, 0, 0]) {\n        folded_corner(napkin_size/3);\n    }\n    mirror([0, 1, 0]) {\n        folded_corner(napkin_size/3);\n    }\n    mirror([1, 1, 0]) {\n        folded_corner(napkin_size/3);\n    }\n    \n    // Center detail - slightly raised\n    translate([0, 0, fold_count*thickness]) {\n        difference() {\n            cylinder(h=thickness, r=8, $fn=32);\n            cylinder(h=thickness+0.1, r=6, $fn=32);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "towel",
    "openscad_code": "// Realistic Towel - Medium Complexity\n// Dimensions: 60mm x 40mm x 5mm\n\n// Parameters\ntowel_length = 60;\ntowel_width = 40;\ntowel_thickness = 5;\nfold_height = 2;\nterry_bump_size = 0.8;\nterry_spacing = 2;\nterry_rows = 20;\nterry_cols = 30;\nborder_width = 3;\nfringe_length = 6;\nfringe_thickness = 0.5;\n\n// Main towel body with rounded edges\nmodule towel_body() {\n    // Base towel shape with rounded edges\n    difference() {\n        // Main rectangular towel\n        union() {\n            // Central body\n            translate([0, 0, towel_thickness/2])\n                cube([towel_length - border_width*2, towel_width - border_width*2, towel_thickness], center=true);\n            \n            // Rounded borders\n            translate([0, 0, towel_thickness/2 - 0.1])\n                cube([towel_length - 1, towel_width - 1, towel_thickness + 0.2], center=true);\n        }\n        \n        // Rounded corners\n        for (i = [-1, 1]) {\n            for (j = [-1, 1]) {\n                translate([i*(towel_length/2 - border_width), j*(towel_width/2 - border_width), 0])\n                    cylinder(h=towel_thickness + 2, r=border_width - 0.5, center=true);\n            }\n        }\n    }\n}\n\n// Terry cloth texture\nmodule terry_texture() {\n    // Create grid of small bumps for terry cloth\n    for (i = [0:terry_rows-1]) {\n        for (j = [0:terry_cols-1]) {\n            x_pos = (i - terry_rows/2) * terry_spacing + terry_spacing/2;\n            y_pos = (j - terry_cols/2) * terry_spacing + terry_spacing/2;\n            \n            if (abs(x_pos) < towel_length/2 - border_width - 1 && \n                abs(y_pos) < towel_width/2 - border_width - 1) {\n                \n                translate([x_pos, y_pos, towel_thickness + terry_bump_size/2])\n                    sphere(d=terry_bump_size, $fn=8);\n            }\n        }\n    }\n}\n\n// Fold lines\nmodule fold_lines() {\n    // Two horizontal fold lines\n    for (fold = [-1, 1]) {\n        translate([0, fold * towel_width/6, towel_thickness/2])\n            cube([towel_length - border_width*2, fold_height, towel_thickness + 0.1], center=true);\n    }\n}\n\n// Fringe on short edges\nmodule fringe() {\n    for (side = [-1, 1]) {\n        for (i = [0:12]) {\n            x_pos = side * (towel_length/2 - 1);\n            y_pos = (i - 6) * 3;\n            \n            if (abs(y_pos) < towel_width/2 - 1) {\n                // Individual fringe strand\n                translate([x_pos, y_pos, towel_thickness/2 - fringe_length/2])\n                    rotate([0, 90, 0])\n                        cylinder(h=fringe_length, d=fringe_thickness, $fn=6);\n            }\n        }\n    }\n}\n\n// Hanging loop\nmodule hanging_loop() {\n    translate([0, towel_width/2, towel_thickness + 2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, r=3, $fn=20);\n                cylinder(h=9, r=2, $fn=20);\n            }\n}\n\n// Assemble the towel\nunion() {\n    // Main towel body\n    towel_body();\n    \n    // Terry texture on top\n    terry_texture();\n    \n    // Fold lines\n    fold_lines();\n    \n    // Fringe on both ends\n    fringe();\n    \n    // Hanging loop\n    hanging_loop();\n}",
    "renders": true
  },
  {
    "household_item": "cloth",
    "openscad_code": "// Realistic Cloth for 3D Printing\n// A folded towel-like cloth with visible thickness and subtle wrinkles\n\n$fn = 32;               // Smooth curves\ncloth_thickness = 1.2;  // Minimum printable wall thickness\ncloth_length = 70;      // Overall length\ncloth_width = 40;       // Overall width\nfold_count = 3;         // Number of visible folds\n\n// Main folded cloth\nmodule folded_cloth() {\n    difference() {\n        // Base folded shape\n        union() {\n            // Main body with gentle curves\n            for (i = [0 : fold_count - 1]) {\n                translate([0, i * (cloth_width / fold_count), 0])\n                    rotate([0, 0, sin(i * 30) * 5])  // Slight rotation for natural fold\n                        body_section(i);\n            }\n            \n            // Thicken edges\n            edge_strips();\n        }\n        \n        // Remove inner void to create hollow shell\n        hollow_interior();\n    }\n    \n    // Surface wrinkles\n    surface_wrinkles();\n}\n\n// Individual body section with thickness\nmodule body_section(index) {\n    height = 0.5 + sin(index * 45) * 0.3;  // Varying height for realism\n    \n    // Main curved surface\n    hull() {\n        translate([-cloth_length/2, 0, 0])\n            rounded_cube([cloth_length, cloth_width/fold_count - 1, height + cloth_thickness]);\n            \n        translate([-cloth_length/2 + 5, cloth_width/fold_count - 2, height + 0.5])\n            sphere(d = 2);\n            \n        translate([cloth_length/2 - 5, 1, height + 0.3])\n            sphere(d = 1.5);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size) {\n    hull() {\n        for (x = [0, size[0]])\n            for (y = [0, size[1]])\n                for (z = [0, size[2]])\n                    translate([x, y, z])\n                        sphere(d = cloth_thickness);\n    }\n}\n\n// Edge strips for thickness\nmodule edge_strips() {\n    // Long edges\n    for (side = [-1, 1]) {\n        translate([0, side * cloth_width/2, cloth_thickness/2])\n            cube([cloth_length, cloth_thickness, cloth_thickness], center = true);\n    }\n    \n    // Short edges\n    for (end = [-1, 1]) {\n        translate([end * cloth_length/2, 0, cloth_thickness/2])\n            cube([cloth_thickness, cloth_width, cloth_thickness], center = true);\n    }\n}\n\n// Hollow interior for material saving\nmodule hollow_interior() {\n    translate([0, 0, -0.1])\n        cube([cloth_length - cloth_thickness*2, cloth_width - cloth_thickness*2, cloth_thickness + 0.2], center = true);\n}\n\n// Surface wrinkle details\nmodule surface_wrinkles() {\n    wrinkle_spacing = 8;\n    wrinkle_depth = 0.3;\n    \n    // Horizontal wrinkles\n    for (y = [-cloth_width/2 + 5 : wrinkle_spacing : cloth_width/2 - 5]) {\n        for (x = [-cloth_length/2 + 3 : wrinkle_spacing : cloth_length/2 - 3]) {\n            translate([x, y, cloth_thickness + 0.1])\n                rotate([90, 0, 0])\n                    cylinder(h = wrinkle_depth, d1 = 1, d2 = 0.5);\n        }\n    }\n    \n    // Vertical wrinkles\n    for (x = [-cloth_length/2 + 5 : wrinkle_spacing : cloth_length/2 - 5]) {\n        translate([x, 0, cloth_thickness + 0.1])\n            rotate([0, 90, 0])\n                cylinder(h = wrinkle_depth, d1 = 1.2, d2 = 0.6);\n    }\n}\n\n// Render the complete cloth\nfolded_cloth();",
    "renders": true
  },
  {
    "household_item": "sponge",
    "openscad_code": "// Realistic 3D-printable sponge\n// Medium complexity – recognizable pores, chamfered edges, printable walls\n\n// Overall dimensions\nsponge_w = 90;   // mm\nsponge_d = 60;   // mm\nsponge_h = 30;   // mm\nwall = 1.6;      // printable wall thickness (mm)\n\n// Pore parameters\npore_r = 2.2;           // radius of each pore\npore_pitch = 5;         // center-to-center spacing\nedge_chamfer = 3;       // chamfer on top edges\n\n// Create one chamfered block with pores\nmodule chamfered_block(size=[sponge_w, sponge_d, sponge_h]){\n    difference(){\n        // Main block with chamfered top edges\n        union(){\n            // Lower solid block\n            translate([0,0,edge_chamfer])\n                cube([size.x, size.y, size.z - edge_chamfer], center=true);\n\n            // Chamfer slopes on top\n            for(dx=[-1,1]){\n                for(dy=[-1,1]){\n                    mirror([dx,0,0])\n                        mirror([0,dy,0])\n                            polyhedron(\n                                points=[\n                                    [size.x/2, size.y/2, size.z/2],\n                                    [size.x/2, -size.y/2, size.z/2],\n                                    [size.x/2 - edge_chamfer, size.y/2, size.z/2 - edge_chamfer],\n                                    [size.x/2 - edge_chamfer, -size.y/2, size.z/2 - edge_chamfer]\n                                ],\n                                faces=[[0,1,3,2]]\n                            );\n                }\n            }\n        }\n\n        // Pore pattern\n        for(x=[-size.x/2 + pore_pitch/2 : pore_pitch : size.x/2 - pore_pitch/2]){\n            for(y=[-size.y/2 + pore_pitch/2 : pore_pitch : size.y/2 - pore_pitch/2]){\n                for(z=[-size.z/2 + pore_pitch/2 : pore_pitch : size.z/2 - pore_pitch/2]){\n                    // Skip pores too close to outer shell to keep walls printable\n                    if(abs(x) < size.x/2 - pore_r - wall &&\n                       abs(y) < size.y/2 - pore_r - wall &&\n                       abs(z) < size.z/2 - pore_r - wall){\n                        translate([x,y,z])\n                            sphere(r=pore_r, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the final sponge\nchamfered_block([sponge_w, sponge_d, sponge_h]);",
    "renders": true
  },
  {
    "household_item": "brush",
    "openscad_code": "// Realistic 3D Printable Brush – Medium Complexity\n\n// Brush parameters\nbrush_len = 90;          // overall length\nhandle_len = 55;\nhandle_dia = 12;\nferrule_len = 15;\nferrule_dia = 14;\nbristle_len = 20;\nbristle_base_dia = 12;\nbristle_tip_dia = 2;\nbristle_count = 49;      // 7×7 grid\nwall = 1.2;              // 3D-printable wall thickness\n\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h = handle_len, d1 = handle_dia, d2 = handle_dia*0.9, $fn = 32);\n        // Ergonomic finger grooves\n        for (i = [1:4])\n            translate([0, 0, handle_len/5*i])\n                rotate([0,90,0])\n                    scale([0.9, 0.9, 1])\n                        cylinder(h = handle_dia+0.2, d = handle_dia*0.3, $fn = 24);\n    }\n    // Hanging hole\n    translate([0, 0, handle_len-5])\n        rotate([90,0,0])\n            cylinder(h = 10, d = 4, $fn = 20);\n}\n\nmodule ferrule() {\n    color(\"silver\")\n    difference() {\n        // Cylindrical ferrule\n        cylinder(h = ferrule_len, d = ferrule_dia, $fn = 32);\n        // Taper inside to grip bristles\n        cylinder(h = ferrule_len, d1 = bristle_base_dia+0.5, d2 = ferrule_dia-1, $fn = 32);\n    }\n}\n\nmodule bristles() {\n    color(\"beige\")\n    // Grid of tapered bristle strands\n    for (dx = [-3:3])\n        for (dy = [-3:3])\n            translate([dx*2, dy*2, 0])\n                cylinder(h = bristle_len, d1 = bristle_base_dia/7, d2 = bristle_tip_dia/7, $fn = 8);\n    // Optional dome trim\n    translate([0,0,bristle_len-2])\n        sphere(d = bristle_base_dia*0.8, $fn = 32);\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle();\n\ntranslate([0, 0, handle_len])\n    ferrule();\n\ntranslate([0, 0, handle_len + ferrule_len])\n    bristles();",
    "renders": true
  },
  {
    "household_item": "detergent",
    "openscad_code": "// Realistic detergent bottle with handle, cap, and embossed label\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\nbottle_height = 80;\nbottle_width = 45;\nbottle_depth = 30;\nwall_thickness = 2;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Main rounded rectangular body\n        union() {\n            // Central body with rounded edges\n            minkowski() {\n                cube([bottle_width, bottle_depth, bottle_height - 10], center = true);\n                sphere(5);\n            }\n            \n            // Tapered top\n            translate([0, 0, bottle_height/2 - 5])\n            scale([0.8, 0.8, 1])\n            cylinder(h = 15, r1 = bottle_width/2, r2 = bottle_width/3, center = true);\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([bottle_width - 2*wall_thickness, bottle_depth - 2*wall_thickness, bottle_height - 12], center = true);\n            sphere(3);\n        }\n    }\n}\n\n// Handle on back\nmodule handle() {\n    translate([bottle_width/2 + 5, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Handle grip\n        torus(ro = 15, ri = 4);\n        \n        // Cut for hand\n        translate([0, 0, -15])\n        cube([20, 20, 30], center = true);\n    }\n}\n\n// Screw cap\nmodule cap() {\n    translate([0, 0, bottle_height/2 + 12])\n    difference() {\n        // Cap body\n        cylinder(h = 15, r = bottle_width/3 + 3, center = true);\n        \n        // Grip ridges\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([bottle_width/3 + 1, 0, 0])\n            cube([3, 1, 15], center = true);\n        }\n        \n        // Thread hole\n        cylinder(h = 20, r = bottle_width/3 - 2, center = true);\n    }\n}\n\n// Embossed label area\nmodule label() {\n    translate([0, bottle_depth/2 + 1, -10])\n    scale([0.9, 0.1, 0.6])\n    cube([bottle_width - 10, 1, bottle_height - 20], center = true);\n}\n\n// Pour spout\nmodule spout() {\n    translate([0, 0, bottle_height/2 + 5])\n    cylinder(h = 10, r1 = bottle_width/3, r2 = bottle_width/3 - 1, center = true);\n}\n\n// Torus helper for handle\nmodule torus(ro, ri) {\n    rotate_extrude()\n    translate([ro, 0, 0])\n    circle(r = ri);\n}\n\n// Assembly\nunion() {\n    bottle_body();\n    handle();\n    spout();\n    cap();\n    label();\n}",
    "renders": true
  },
  {
    "household_item": "soap",
    "openscad_code": "// Realistic bar-of-soap model, medium complexity\n// Overall dimensions ≈ 80 × 55 × 22 mm\n\n// Basic parameters\nlength = 80;\nwidth  = 55;\nheight = 22;\ncorner_r = 8;     // radius of rounded corners\nedge_r   = 1.2;   // small edge fillet\nengr_depth = 0.6; // depth of soap text\ngroove_w = 1.2;   // anti-slip grooves\n\n// Main bar body with rounded edges\nmodule soap_body() {\n    // Core rounded block\n    minkowski() {\n        cube([length-2*corner_r, width-2*corner_r, height-2*corner_r], center=true);\n        sphere(r=corner_r);\n    }\n    \n    // Top & bottom edge fillets\n    difference() {\n        children();\n        translate([0,0, height/2-edge_r]) \n            cube([length+2, width+2, 2*edge_r], center=true);\n        translate([0,0,-height/2+edge_r]) \n            cube([length+2, width+2, 2*edge_r], center=true);\n    }\n}\n\n// Engraved word “SOAP” on top face\nmodule soap_text() {\n    font_h = 6;          // letter height\n    font_t = engr_depth; // extrude depth\n    spacing = 22;        // letter spacing\n\n    linear_extrude(height=font_t, convexity=4) {\n        translate([-(3*spacing)/2, -font_h/2, 0])\n            text(\"S\", size=font_h, font=\"Arial:style=Bold\");\n        translate([-(1*spacing)/2, -font_h/2, 0])\n            text(\"O\", size=font_h, font=\"Arial:style=Bold\");\n        translate([+(1*spacing)/2, -font_h/2, 0])\n            text(\"A\", size=font_h, font=\"Arial:style=Bold\");\n        translate([+(3*spacing)/2, -font_h/2, 0])\n            text(\"P\", size=font_h, font=\"Arial:style=Bold\");\n    }\n}\n\n// Anti-slip grooves on bottom face\nmodule bottom_grooves() {\n    groove_len = length - 12;\n    groove_h   = 0.8;\n    groove_sep = 4;\n\n    for (i=[-5:1:5]) {\n        translate([0, i*groove_sep, -height/2 + groove_h/2])\n            cube([groove_len, groove_w, groove_h], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    soap_body() {\n        children();\n    }\n\n    // Engrave text on top\n    difference() {\n        soap_body();\n        translate([0, 0, height/2 - engr_depth/2 - 1])\n            soap_text();\n    }\n    \n    // Add grooves to bottom\n    translate([0,0,0])\n        bottom_grooves();\n}\n\n// Optional support standoffs for easier printing\nsupport_r = 3;\nsupport_h = 1;\ntranslate([ length/2 - support_r - 4,  width/2 - support_r - 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);\ntranslate([-length/2 + support_r + 4,  width/2 - support_r - 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);\ntranslate([ length/2 - support_r - 4, -width/2 + support_r + 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);\ntranslate([-length/2 + support_r + 4, -width/2 + support_r + 4, -height/2 - support_h/2])\n    cylinder(r=support_r, h=support_h, $fn=32);",
    "renders": true
  },
  {
    "household_item": "trashcan",
    "openscad_code": "// Realistic 3D printable trashcan (medium complexity)\n// Approx. 70 mm tall, 60 mm diameter\n// Wall thickness: 2 mm\n\n// Main body module\nmodule trashcan_body() {\n    difference() {\n        // Outer cylinder with slight taper\n        cylinder(h1 = 60, r1 = 30, r2 = 28, h = 60, $fn = 64);\n        \n        // Hollow out interior\n        translate([0, 0, 2])\n            cylinder(h1 = 58, r1 = 28, r2 = 26, h = 58, $fn = 64);\n    }\n}\n\n// Reinforcement ring at top\nmodule top_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 4, r = 30.5, $fn = 64);\n        \n        // Inner cutout\n        cylinder(h = 4, r = 28.5, $fn = 64);\n    }\n}\n\n// Base with slight lip\nmodule base() {\n    difference() {\n        // Main base\n        cylinder(h = 3, r = 31, $fn = 64);\n        \n        // Recessed bottom\n        translate([0, 0, 1])\n            cylinder(h = 2, r = 29, $fn = 64);\n    }\n}\n\n// Pedal mechanism\nmodule pedal() {\n    // Pedal arm\n    translate([-20, 0, 3])\n        rotate([0, -20, 0])\n        cube([25, 12, 3], center = true);\n    \n    // Pivot bracket\n    translate([-8, 0, 3])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r = 3, $fn = 16);\n    \n    // Support ribs under pedal\n    for(i = [-1, 1]) {\n        translate([-15, 6 * i, 1.5])\n            rotate([0, -20, 0])\n            cube([10, 1, 2], center = true);\n    }\n}\n\n// Handle indentations for grip\nmodule handles() {\n    for(angle = [120, 240]) {\n        rotate([0, 0, angle])\n        translate([28, 0, 45])\n            rotate([0, 90, 0])\n            cylinder(h = 10, r1 = 5, r2 = 3, $fn = 16);\n    }\n}\n\n// Ventilation holes\nmodule vents() {\n    for(h = [15, 25, 35]) {\n        rotate([0, 0, 0])\n        translate([0, 29, h])\n            rotate([90, 0, 0])\n            cylinder(h = 2, r = 1.5, $fn = 16);\n    }\n    \n    // Additional vents rotated\n    for(h = [20, 30]) {\n        rotate([0, 0, 180])\n        translate([0, 29, h])\n            rotate([90, 0, 0])\n            cylinder(h = 2, r = 1.5, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    trashcan_body();\n    \n    // Add top ring\n    translate([0, 0, 59])\n        top_ring();\n    \n    // Add base\n    base();\n    \n    // Add pedal (only on one side)\n    pedal();\n    \n    // Add handle indents\n    difference() {\n        trashcan_body();\n        handles();\n    }\n    \n    // Add ventilation holes\n    difference() {\n        trashcan_body();\n        vents();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "recyclebin",
    "openscad_code": "// Realistic medium-complexity recycle bin\n// Dimensions in mm, printable without supports\n\nbin_w = 80;\nbin_d = 65;\nbin_h = 100;\nwall_t = 2.5;\nbottom_t = 3;\n\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,0])\n                cube([bin_w, bin_d, bottom_t], center=true);\n            translate([0,0,bin_h/2])\n                cube([bin_w*0.85, bin_d*0.85, bin_h], center=true);\n        }\n\n        // Inner cavity\n        translate([0,0,-bottom_t/2+0.5])\n            hull() {\n                translate([0,0,0])\n                    cube([bin_w-wall_t*2, bin_d-wall_t*2, bottom_t], center=true);\n                translate([0,0,bin_h/2])\n                    cube([bin_w*0.85-wall_t*2, bin_d*0.85-wall_t*2, bin_h+1], center=true);\n            }\n    }\n}\n\nmodule rim() {\n    // Top rim reinforcement\n    difference() {\n        hull() {\n            translate([0,0,bin_h-1])\n                cube([bin_w*0.85+4, bin_d*0.85+4, 3], center=true);\n            translate([0,0,bin_h+1])\n                cube([bin_w*0.85+2, bin_d*0.85+2, 2], center=true);\n        }\n        \n        // Remove inner part\n        translate([0,0,bin_h-2])\n            cube([bin_w*0.85-wall_t*2+2, bin_d*0.85-wall_t*2+2, 6], center=true);\n    }\n}\n\nmodule handles() {\n    // Side handles\n    for(side = [-1, 1]) {\n        translate([side*(bin_w*0.85)/2, 0, bin_h*0.6]) {\n            rotate([0,90,0]) {\n                difference() {\n                    cylinder(h=15, r=5, center=true);\n                    cylinder(h=16, r=3.5, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule recycle_symbol() {\n    // Recycle symbol on front\n    translate([0, -bin_d*0.85/2 - 0.5, bin_h*0.7])\n    rotate([90,0,0]) {\n        linear_extrude(height=1.5) {\n            // Three chasing arrows\n            for(i=[0:2]) {\n                rotate([0,0,i*120])\n                    translate([0,10,0])\n                        circle(r=6);\n                rotate([0,0,i*120])\n                    translate([0,10,0])\n                        translate([0,6,0])\n                            square([2,6], center=true);\n            }\n            \n            // Remove center\n            circle(r=5);\n        }\n    }\n}\n\nmodule base_reinforcement() {\n    // Bottom ribs for strength\n    for(x=[-30:15:30]) {\n        translate([x, 0, bottom_t/2])\n            cube([3, bin_d-10, bottom_t+1], center=true);\n    }\n    for(y=[-25:15:25]) {\n        translate([0, y, bottom_t/2])\n            cube([bin_w-10, 3, bottom_t+1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    rim();\n    handles();\n    recycle_symbol();\n    base_reinforcement();\n}",
    "renders": true
  },
  {
    "household_item": "compostbin",
    "openscad_code": "// Realistic 3D-printable compost bin – medium complexity\n// Outer dimensions ≈ 60 mm (L) × 50 mm (W) × 70 mm (H)\n\nmodule main_body() {\n    difference() {\n        // Main container walls (2 mm thick)\n        cube([60, 50, 70], center = true);\n\n        // Hollow out the inside\n        translate([0, 0, 2])  // shift slightly to keep floor thickness\n            cube([56, 46, 68], center = true);\n    }\n}\n\nmodule ventilation_holes() {\n    // Rows of 5 mm ventilation holes on side walls\n    for (y = [-20, -10, 0, 10, 20])\n        for (z = [-25, -15, -5, 5, 15, 25])\n            translate([31, y, z])\n                rotate([0, 90, 0])\n                    cylinder(h = 2, d = 5, $fn = 12);\n}\n\nmodule lid() {\n    difference() {\n        // Lid plate 3 mm thick\n        translate([0, 0, 36])\n            cube([62, 52, 3], center = true);\n\n        // Handle cutout\n        translate([0, 0, 38])\n            cube([40, 10, 6], center = true);\n    }\n\n    // Handle\n    translate([0, 0, 42])\n        cylinder(h = 8, d1 = 12, d2 = 12, center = true);\n}\n\nmodule hatch() {\n    difference() {\n        // Small door on front\n        translate([0, -26, -15])\n            cube([30, 2, 20], center = true);\n\n        // Hatch opening\n        translate([0, -26.5, -15])\n            cube([26, 3, 16], center = true);\n    }\n\n    // Door handle\n    translate([12, -27, -15])\n        cylinder(h = 4, d = 4, center = true);\n}\n\nmodule base() {\n    // Reinforced bottom feet\n    for (x = [-25, 25])\n        for (y = [-20, 20])\n            translate([x, y, -36])\n                cylinder(h = 6, d = 8, center = true);\n}\n\nunion() {\n    main_body();\n    ventilation_holes();\n    lid();\n    hatch();\n    base();\n}",
    "renders": true
  },
  {
    "household_item": "scale",
    "openscad_code": "// Classic two-pan balance scale (medium complexity, 3D-printable)\n// Overall footprint ~70x85x90 mm\n\n// Parameters\n$fn = 50;\nwall = 2.0;\nbase_w = 60;\nbase_d = 50;\nbase_h = 8;\npillar_h = 70;\npillar_r = 5;\nbeam_l = 80;\nbeam_h = 6;\npan_d = 28;\npan_h = 6;\npointer_l = 20;\n\n// Main assembly\nunion() {\n\n    // Base\n    difference() {\n        // Main base block\n        translate([0, 0, base_h/2])\n            rounded_cube([base_w, base_d, base_h], 4);\n        // Center slot for pillar\n        translate([0, 0, base_h-1])\n            cube([pillar_r*2+wall, base_d-10, 2], center=true);\n    }\n\n    // Central pillar\n    translate([0, 0, base_h + pillar_h/2])\n        cylinder(h = pillar_h, r = pillar_r, center = true);\n\n    // Pivot block on top\n    translate([0, 0, base_h + pillar_h + 2])\n        rounded_cube([10, 10, 5], 2);\n\n    // Beam and pointer\n    translate([0, 0, base_h + pillar_h + 4.5])\n        rotate([0, 90, 0])\n        union() {\n            // Beam\n            difference() {\n                rounded_cube([beam_l, beam_h, beam_h], 2);\n                // Pivot hole\n                rotate([0, 90, 0])\n                    translate([0, 0, -beam_h/2-1])\n                    cylinder(h = beam_h+2, r = 1.5, center=true);\n            }\n            // Pointer\n            translate([0, 0, -beam_h/2 - pointer_l/2])\n                rotate([90, 0, 0])\n                cylinder(h = pointer_l, r = 1.2);\n        }\n\n    // Left pan chain\n    translate([-beam_l/2, 0, base_h + pillar_h + 4.5])\n        pan_with_chain();\n\n    // Right pan chain\n    translate([beam_l/2, 0, base_h + pillar_h + 4.5])\n        mirror([1, 0, 0])\n            pan_with_chain();\n}\n\n// Helper module: rounded cube\nmodule rounded_cube(size, r) {\n    x = size.x != undef ? size.x : size[0];\n    y = size.y != undef ? size.y : size[1];\n    z = size.z != undef ? size.z : size[2];\n    hull() {\n        for (dx = [-x/2+r, x/2-r], dy = [-y/2+r, y/2-r], dz = [-z/2+r, z/2-r])\n            translate([dx, dy, dz])\n                sphere(r = r);\n    }\n}\n\n// Helper module: pan plus chain\nmodule pan_with_chain() {\n    // Chain link to beam\n    translate([0, 0, -beam_h/2-5])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5);\n\n    // Pan\n    translate([0, 0, -beam_h/2-15])\n        difference() {\n            // Pan body\n            cylinder(h = pan_h, r = pan_d/2);\n            // Hollow inside\n            translate([0, 0, 1])\n                cylinder(h = pan_h, r = pan_d/2 - wall);\n        }\n}",
    "renders": true
  },
  {
    "household_item": "timer",
    "openscad_code": "// Realistic 3D-printable mechanical kitchen timer\n// Overall size: ~70 mm diameter, ~45 mm thick\n\n// Constants\n$fn = 60;\n\n// Main dimensions\nbody_d = 70;\nbody_h = 30;\nwall_t = 2;\nknob_d = 20;\nknob_h = 15;\ndisplay_w = 40;\ndisplay_h = 15;\nleg_h = 8;\nleg_r = 2;\n\nmodule main_body() {\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cylinder(d = body_d - 2*wall_t, h = body_h - 2*wall_t, center = true);\n            sphere(r = 3);\n        }\n        // Hollow interior\n        minkowski() {\n            cylinder(d = body_d - 4*wall_t, h = body_h - 2*wall_t, center = true);\n            sphere(r = 2);\n        }\n    }\n}\n\nmodule timer_face() {\n    // Display window\n    translate([0, 0, body_h/2 - 0.5]) {\n        difference() {\n            // Slightly raised bezel\n            cube([display_w + 6, display_h + 6, 2], center = true);\n            cube([display_w, display_h, 3], center = true);\n        }\n    }\n    \n    // Minute markings around the edge\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([body_d/2 - 5, 0, body_h/2 - 0.5]) {\n                cube([4, 1, 1], center = true);\n            }\n    }\n}\n\nmodule knob() {\n    // Main knob\n    translate([0, 0, body_h/2 + knob_h/2]) {\n        difference() {\n            cylinder(d = knob_d, h = knob_h);\n            // Grip ridges\n            for (i = [0:11]) {\n                rotate([0, 0, i * 30])\n                    translate([knob_d/2 - 2, 0, knob_h/2])\n                        cube([4, 1, knob_h], center = true);\n            }\n        }\n        // Center indicator arrow\n        translate([0, knob_d/2 - 3, knob_h/2])\n            cube([2, 6, 1], center = true);\n    }\n}\n\nmodule support_legs() {\n    // Three support legs\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([body_d/3, 0, -body_h/2]) {\n                cylinder(h = leg_h, r = leg_r);\n                sphere(r = leg_r);\n            }\n    }\n}\n\nmodule timer() {\n    union() {\n        main_body();\n        timer_face();\n        knob();\n        support_legs();\n    }\n}\n\n// Render the complete timer\ntimer();",
    "renders": true
  },
  {
    "household_item": "thermometer",
    "openscad_code": "// Realistic 3D-printable thermometer\n// Overall length ~95 mm, width ~12 mm, thickness ~8 mm\n// No overhangs greater than 45°, wall ≥1 mm\n\n// Parameters\ntube_od       = 6;            // outer diameter of glass tube\ntube_wall     = 1;            // wall thickness\ntube_len      = 75;           // tube length\nbulb_d        = 12;           // bulb diameter\ncap_h         = 5;            // top cap height\ncap_d         = 10;           // top cap diameter\nscale_mark_h  = 2;            // height of scale marks\nscale_mark_w  = 0.8;          // width of scale marks\nscale_gap     = 5;            // spacing between marks\nscale_count   = 10;           // number of scale marks\nbase_thick    = 2;            // thickness of flat base for printing\nepsilon       = 0.01;         // tiny offset to avoid Z-fighting\n\nmodule thermometer() {\n    // Main glass tube\n    difference() {\n        cylinder(h = tube_len, d = tube_od, $fn = 32);\n        translate([0, 0, -epsilon])\n            cylinder(h = tube_len + 2*epsilon, d = tube_od - 2*tube_wall, $fn = 32);\n    }\n\n    // Bulb (lower rounded reservoir)\n    translate([0, 0, -bulb_d/2])\n        sphere(d = bulb_d, $fn = 32);\n\n    // Top cap (metal crimp)\n    translate([0, 0, tube_len])\n        cylinder(h = cap_h, d1 = cap_d, d2 = tube_od, $fn = 32);\n\n    // Scale plate (flat strip along back)\n    translate([tube_od/2 + 0.5, 0, tube_len/2])\n        rotate([0, 90, 0])\n            cube([tube_len, 6, base_thick]);\n\n    // Scale marks\n    for (i = [0:scale_count-1]) {\n        translate([tube_od/2 + 0.5 + base_thick, -3 + scale_mark_w/2, tube_len - 10 - i*scale_gap])\n            cube([scale_mark_h, scale_mark_w, base_thick]);\n    }\n\n    // Numerical indicators (3 main marks)\n    for (i = [0:2]) {\n        translate([tube_od/2 + 0.5 + base_thick + scale_mark_h + 0.5, -1.5, tube_len - 10 - i*4*scale_gap])\n            cube([1, 3, base_thick]);\n    }\n}\n\n// Stand for printing without supports\nmodule print_stand() {\n    // Flat base\n    cube([30, 20, 2], center = true);\n\n    // Half-cylindrical cradle\n    translate([0, 0, 1])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 30, d = 14, center = true, $fn = 32);\n                translate([0, 0, -7 - epsilon])\n                    cube([30, 14, 7], center = true);\n            }\n}\n\n// Assembly\ntranslate([0, 0, 8])\n    thermometer();\nprint_stand();",
    "renders": true
  },
  {
    "household_item": "measuringcup",
    "openscad_code": "// Realistic 3D-printable measuring cup (250 ml)\n// Outer dimensions ~70 mm Ø × 70 mm high\n\n// Parameters\nwall = 1.8;                 // Safe 3D-print wall thickness (mm)\nr_out = 35;                 // Outer radius (mm)\nr_in  = r_out - wall;       // Inner radius\nh_total = 68;               // Total height\nh_base  = 5;                // Solid base\nh_fluid = h_total - h_base; // Max fluid height\nhandle_width = 12;\nhandle_thick = wall;\nhandle_len = 30;\nspout_w = 12;\nspout_h = 8;\n\n// Overall cup body\nmodule cup_body() {\n    difference() {\n        // Outer solid cylinder\n        cylinder(h=h_total, r1=r_out, r2=r_out-2, $fn=120);\n\n        // Hollow inside\n        translate([0,0,h_base])\n            cylinder(h=h_fluid+1, r1=r_in, r2=r_in-2, $fn=120);\n    }\n}\n\n// Graduation marks (every 50 ml → 10 mm height)\nmodule graduation_marks() {\n    step = 10; // 10 mm per 50 ml\n    for(i=[1:5]) {\n        translate([0, r_out, h_base + i*step])\n            rotate([90,0,0])\n                linear_extrude(height=wall+0.2)\n                    text(str(i*50,\"ml\"), size=3, valign=\"center\", halign=\"center\");\n        \n        // Short raised ridges\n        color(\"white\")\n        for(a=[-5:5]) {\n            rotate([0,0,a*6])\n                translate([r_out-0.2, 0, h_base + i*step])\n                    cube([0.4, 1.5, 0.6], center=true);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    translate([r_out-1, 0, h_total/2]) {\n        rotate([0,90,0]) {\n            // Main grip\n            difference() {\n                rotate_extrude($fn=60)\n                    translate([handle_len/2, 0, 0])\n                        square([handle_len/2, handle_width], center=true);\n                // Hollow grip\n                rotate_extrude($fn=60)\n                    translate([handle_len/2, 0, 0])\n                        square([handle_len/2-handle_thick, handle_width-2*handle_thick], center=true);\n            }\n            // Attachment bridges\n            for(z=[-h_total/3, h_total/3]) {\n                translate([0,0,z])\n                    rotate_extrude($fn=60)\n                        translate([r_out-1,0,0])\n                            square([wall+1, handle_width], center=true);\n            }\n        }\n    }\n}\n\n// Pouring spout\nmodule spout() {\n    difference() {\n        union() {\n            // Main spout wedge\n            translate([0, r_out-1, h_total-spout_h])\n                rotate([0,0,0])\n                    cube([spout_w*2, spout_h, spout_h], center=true);\n            // Smooth top bevel\n            translate([0, r_out-1, h_total-spout_h/2])\n                rotate([0,90,0])\n                    cylinder(h=spout_w*2, r1=spout_h/2, r2=0, $fn=20);\n        }\n        // Remove inside\n        translate([0, r_out-1, h_total-spout_h])\n            cube([spout_w*2-2*wall, spout_h+1, spout_h+1], center=true);\n    }\n}\n\n// Build the cup\ncup_body();\nhandle();\nspout();\ngraduation_marks();",
    "renders": true
  },
  {
    "household_item": "measuringspoon",
    "openscad_code": "// Measuring Spoon - 15ml Tablespoon\n// Realistic style with medium complexity\n\n// Parameters\n$fn = 32;\nwall_thickness = 1.5;\nhandle_length = 70;\nhandle_width = 12;\nhandle_thickness = 3;\nbowl_radius = 22;\nbowl_depth = 12;\nmeasurement_mark_depth = 0.5;\n\n// Main assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Bowl\n    bowl();\n    \n    // Measurement marking\n    measurement_mark();\n}\n\nmodule handle() {\n    // Start handle from origin\n    translate([0, 0, handle_thickness/2]) {\n        // Main handle body with rounded edges\n        hull() {\n            // Front rounded end\n            translate([handle_length-3, 0, 0])\n                sphere(d=handle_width);\n            \n            // Back rounded end\n            translate([3, 0, 0])\n                sphere(d=handle_width);\n            \n            // Middle section\n            translate([handle_length/2, 0, 0])\n                sphere(d=handle_width * 0.9);\n        }\n        \n        // Hollow out handle\n        difference() {\n            // Outer shape already created\n            hull() {\n                translate([handle_length-3, 0, 0])\n                    sphere(d=handle_width - wall_thickness*2);\n                \n                translate([3, 0, 0])\n                    sphere(d=handle_width - wall_thickness*2);\n                \n                translate([handle_length/2, 0, 0])\n                    sphere(d=(handle_width - wall_thickness*2) * 0.9);\n            }\n            translate([0, 0, -handle_thickness])\n                cube([handle_length+10, handle_width*2, handle_thickness*2], center=true);\n        }\n        \n        // Grip texture grooves\n        for(i = [1:4]) {\n            translate([handle_length * 0.2 * i, 0, handle_thickness/2])\n                difference() {\n                    cylinder(h=handle_thickness+0.2, d=handle_width, center=true);\n                    cylinder(h=handle_thickness+0.4, d=handle_width - 1, center=true);\n                }\n        }\n    }\n}\n\nmodule bowl() {\n    // Position bowl at end of handle\n    translate([0, 0, handle_thickness/2]) {\n        rotate([90, 0, 0]) {\n            // Outer bowl shape\n            difference() {\n                // Main bowl sphere\n                sphere(r=bowl_radius);\n                \n                // Cut bottom flat\n                translate([0, 0, -bowl_radius + bowl_depth])\n                    cube([bowl_radius*2, bowl_radius*2, bowl_radius*2], center=true);\n                \n                // Cut back flat for handle attachment\n                translate([bowl_radius, 0, 0])\n                    cube([bowl_radius, bowl_radius*2, bowl_radius*2], center=true);\n            }\n            \n            // Inner bowl hollow\n            difference() {\n                sphere(r=bowl_radius - wall_thickness);\n                translate([0, 0, -bowl_radius + bowl_depth - wall_thickness - 1])\n                    cube([bowl_radius*2, bowl_radius*2, bowl_radius*2], center=true);\n                translate([bowl_radius - wall_thickness, 0, 0])\n                    cube([bowl_radius, bowl_radius*2, bowl_radius*2], center=true);\n            }\n            \n            // Smooth transition to handle\n            translate([-bowl_radius + 2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=bowl_radius/2, r=handle_width/2 - wall_thickness, center=true);\n        }\n    }\n}\n\nmodule measurement_mark() {\n    // 15ml marking on handle\n    translate([handle_length * 0.7, 0, handle_thickness + 0.1]) {\n        rotate([90, 0, 0]) {\n            // Text \"15ml\"\n            linear_extrude(height=measurement_mark_depth) {\n                text(\"15ml\", size=4, halign=\"center\", valign=\"center\");\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "rollingpin",
    "openscad_code": "// Rolling Pin - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\npin_length = 80;\npin_diameter = 25;\nhandle_length = 20;\nhandle_diameter = 12;\ngrip_length = 15;\ngrip_diameter = 14;\n\n// Rolling surface texture parameters\ngroove_width = 1.5;\ngroove_depth = 0.5;\ngroove_spacing = 4;\ngroove_count = floor(pin_length / groove_spacing) - 1;\n\nmodule rolling_pin() {\n    // Central cylindrical body\n    cylinder(h=pin_length, d=pin_diameter, center=true);\n    \n    // Tapered ends\n    translate([pin_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h1=pin_diameter/2, h2=0, r1=pin_diameter/2, r2=pin_diameter/3, $fn=32);\n    \n    translate([-pin_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h1=pin_diameter/2, h2=0, r1=pin_diameter/2, r2=pin_diameter/3, $fn=32);\n}\n\nmodule handle_grooves() {\n    // Grip rings on handle\n    for(i = [0:3]) {\n        translate([0, 0, -grip_length/2 + i*grip_length/4])\n            difference() {\n                cylinder(h=2, d=grip_diameter+1, center=true);\n                cylinder(h=3, d=grip_diameter-2, center=true);\n            }\n    }\n}\n\nmodule rolling_surface_grooves() {\n    // Surface texture grooves\n    for(i = [1:groove_count]) {\n        translate([-(pin_length/2) + i*groove_spacing, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=groove_width, d=pin_diameter+1, center=true);\n                    cylinder(h=groove_width+1, d=pin_diameter-groove_depth*2, center=true);\n                }\n    }\n}\n\nmodule handle() {\n    // Handle shaft\n    cylinder(h=handle_length, d=handle_diameter, center=true);\n    \n    // Handle grip\n    translate([0, 0, handle_length/2 + grip_length/2])\n        cylinder(h=grip_length, d=grip_diameter, center=true);\n    \n    // Grip grooves\n    translate([0, 0, handle_length/2 + grip_length/2])\n        handle_grooves();\n    \n    // End cap\n    translate([0, 0, handle_length/2 + grip_length + 2])\n        sphere(d=handle_diameter, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Rolling pin body with surface texture\n    difference() {\n        rolling_pin();\n        rolling_surface_grooves();\n    }\n    \n    // Left handle\n    translate([-(pin_length/2 + handle_length/2), 0, 0])\n        rotate([0, 90, 0])\n            handle();\n    \n    // Right handle\n    translate([pin_length/2 + handle_length/2, 0, 0])\n        rotate([0, 90, 0])\n            mirror([1, 0, 0])\n                handle();\n}",
    "renders": true
  },
  {
    "household_item": "bakingsheet",
    "openscad_code": "// Baking sheet – realistic style, medium complexity\n// External size ≈ 80 mm × 60 mm × 10 mm\n// Wall thickness 1.2 mm, printable without supports\n\n// Parameters\nsheet_l = 80;       // length\nsheet_w = 60;       // width\nsheet_h = 10;       // total height\nwall_t = 1.2;       // wall thickness\nedge_r = 2;         // top edge radius\ncorner_r = 3;       // fillet radius on inside bottom\ngrip_len = 10;      // length of side grips\ngrip_rad = 4;       // grip cylinder radius\n\n// Main sheet body\nmodule sheet_body() {\n    difference() {\n        // Outer block with rounded top edge\n        minkowski() {\n            cube([sheet_l, sheet_w, sheet_h - edge_r], center = true);\n            cylinder(r = edge_r, h = 0.01, $fn = 16);\n        }\n        translate([0, 0, 1])  // shift to keep bottom flat\n        // Inner cavity\n        difference() {\n            // Main cavity\n            cube([sheet_l - 2*wall_t, sheet_w - 2*wall_t, sheet_h], center = true);\n            // Bottom inside fillets (four cylinders)\n            for (dx = [-1, 1])\n                for (dy = [-1, 1])\n                    translate([dx*(sheet_l/2 - wall_t - corner_r),\n                               dy*(sheet_w/2 - wall_t - corner_r),\n                               -sheet_h/2])\n                        cylinder(h = corner_r + 0.1, r = corner_r, $fn = 16);\n        }\n    }\n}\n\n// Side grips\nmodule grips() {\n    // Left grip\n    translate([-sheet_l/2 - grip_len/2, 0, 0])\n        grip();\n    // Right grip\n    translate([sheet_l/2 + grip_len/2, 0, 0])\n        mirror([1, 0, 0])\n            grip();\n}\n\nmodule grip() {\n    difference() {\n        // Grip body\n        cube([grip_len, sheet_w/3, wall_t*3], center = true);\n        // Finger groove\n        translate([0, 0, -wall_t*1.5])\n            cylinder(h = wall_t*3 + 0.1, r = grip_rad, $fn = 16);\n    }\n}\n\n// Perforation pattern (optional subtle look)\nmodule perforations() {\n    hole_d = 1.4;\n    spacing = 4;\n    rows = floor((sheet_w - 2*wall_t) / spacing) - 1;\n    cols = floor((sheet_l - 2*wall_t) / spacing) - 1;\n    difference() {\n        children();\n        for (i = [0:cols-1])\n            for (j = [0:rows-1])\n                translate([\n                    -sheet_l/2 + wall_t + spacing/2 + i*spacing,\n                    -sheet_w/2 + wall_t + spacing/2 + j*spacing,\n                    0\n                ])\n                    cylinder(h = sheet_h, d = hole_d, $fn = 12);\n    }\n}\n\n// Assembly\nperforations() {\n    union() {\n        sheet_body();\n        grips();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "casserole",
    "openscad_code": "// Medium-complexity realistic casserole dish\n// Approx. 80 mm wide × 60 mm deep × 45 mm tall (without lid)\n\nwall_th = 2;           // wall thickness for 3D-printing\nr_out   = 40;          // outer radius of the dish\nh_body  = 30;          // height of the dish body\nh_lip   = 5;           // rim / lip height\nh_base  = 8;           // pedestal base height\nr_base  = 35;          // base radius (smaller than dish)\n\n// ---------------- DISH BODY ----------------\nmodule dish_body() {\n    difference() {\n        // outer shell\n        cylinder(h = h_body + h_lip, r1 = r_out, r2 = r_out - 2, $fn = 48);\n\n        // inner cavity\n        translate([0, 0, wall_th])\n            cylinder(h = h_body - wall_th, r1 = r_out - wall_th, r2 = r_out - wall_th - 2, $fn = 48);\n    }\n}\n\n// ---------------- RIM / LIP ----------------\nmodule lip() {\n    // slightly flared rim\n    translate([0, 0, h_body])\n        cylinder(h = h_lip, r1 = r_out - 2, r2 = r_out + 1, $fn = 48);\n}\n\n// ---------------- BASE / PEDESTAL ----------------\nmodule base() {\n    translate([0, 0, -h_base])\n        cylinder(h = h_base, r1 = r_base, r2 = r_base + 2, $fn = 48);\n}\n\n// ---------------- HANDLES ----------------\nmodule side_handles() {\n    handle_len = 12;\n    handle_wid = 6;\n    handle_th  = wall_th;\n    \n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([r_out + handle_len / 2, 0, h_body / 2])\n                rotate([0, 90, 0])\n                    difference() {\n                        union() {\n                            // main grip bar\n                            cube([handle_len, handle_wid, handle_th], center = true);\n                            // curved transition\n                            translate([0, 0, handle_wid / 2])\n                                rotate([90, 0, 0])\n                                    cylinder(h = handle_len, r = handle_th / 2, center = true, $fn = 12);\n                        }\n                        // screw clearance / weight-saving hole\n                        cylinder(h = handle_len + 1, r = handle_th / 2 - 0.5, center = true, $fn = 8);\n                    }\n    }\n}\n\n// ---------------- LID ----------------\nmodule lid() {\n    lid_h     = 10;\n    lid_top_r = r_out - 1;\n    lid_bot_r = r_out + 1;\n    \n    // lid dome\n    difference() {\n        cylinder(h = lid_h, r1 = lid_bot_r, r2 = lid_top_r, $fn = 48);\n        translate([0, 0, wall_th])\n            cylinder(h = lid_h, r1 = lid_bot_r - wall_th, r2 = lid_top_r - wall_th, $fn = 48);\n    }\n    \n    // lid knob\n    knob_r = 8;\n    knob_h = 10;\n    translate([0, 0, lid_h + knob_h / 2])\n        cylinder(h = knob_h, r1 = knob_r, r2 = knob_r / 2, $fn = 20);\n}\n\n// ---------------- ASSEMBLY ----------------\nunion() {\n    dish_body();\n    lip();\n    base();\n    side_handles();\n    \n    // Lid offset for preview\n    translate([0, 0, h_body + h_lip + 2])\n        lid();\n}",
    "renders": true
  },
  {
    "household_item": "skillet",
    "openscad_code": "// Realistic 3D-printable skillet – medium complexity\n// Overall length ≈ 90 mm, pan diameter ≈ 50 mm, wall thickness 1.2 mm\n\n// Parameters\npan_d = 50;            // pan outer diameter\nwall_t = 1.2;          // wall thickness\nbase_h = 3;            // bottom plate height\nbody_h = 15;           // pan body height\nhandle_l = 40;         // handle length\nhandle_w = 10;         // handle width at grip\nhandle_t = 6;          // handle thickness\ngrip_r = 1.5;          // grip ridge radius\ngrip_step = 5;         // spacing between grip rings\nrivet_r = 1.5;         // rivet radius\nrivet_h = 2.5;\n\n// Helper: rounded-edge cylinder (pan body)\nmodule rounded_cylinder(h, r, t) {\n    difference() {\n        cylinder(h=h, r=r, $fn=100);\n        translate([0,0,-0.01])\n            cylinder(h=h+0.02, r=r-t, $fn=100);\n    }\n}\n\n// Pan body (bowl shape)\nmodule pan_body() {\n    difference() {\n        union() {\n            // bottom plate\n            cylinder(h=base_h, r=pan_d/2, $fn=100);\n            // curved wall\n            translate([0,0,base_h])\n                rounded_cylinder(body_h, pan_d/2, wall_t);\n        }\n        // hollow interior\n        translate([0,0,base_h])\n            cylinder(h=body_h+0.1, r=pan_d/2-wall_t, $fn=100);\n    }\n}\n\n// Handle grip ridges\nmodule grip_ridges() {\n    n = floor(handle_l/grip_step) - 1;\n    for(i=[1:n]) {\n        translate([0, 0, i*grip_step])\n            // semicircular ridge\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h=handle_w, r=grip_r, center=true, $fn=20);\n                    translate([0,-grip_r,0])\n                        cube([handle_w+2, grip_r*2, grip_r*2], center=true);\n                }\n    }\n}\n\n// Handle with ergonomic taper\nmodule handle() {\n    // Main shaft tapering toward pan\n    hull() {\n        translate([0,0,0])\n            cube([handle_t, handle_w, handle_t], center=true);\n        translate([handle_l,0,0])\n            scale([0.7,0.7,0.7])\n                cube([handle_t, handle_w, handle_t], center=true);\n    }\n    // Grip ridges on top\n    grip_ridges();\n    // Rivets where handle meets pan\n    for(side=[-1,1]) {\n        translate([-handle_t/2-rivet_h/2, side*handle_w/4, 0])\n            rotate([0,90,0])\n                cylinder(h=rivet_h, r=rivet_r, $fn=16);\n    }\n}\n\n// Assemble skillet\nunion() {\n    pan_body();\n    translate([pan_d/2 - handle_t/2, 0, base_h+body_h/2])\n        rotate([0,-90,0])\n            handle();\n}",
    "renders": true
  },
  {
    "household_item": "wok",
    "openscad_code": "// Wok - realistic style, medium complexity\n// 3D printable with proper wall thickness\n\n$fn = 100;\n\n// Overall dimensions\nwok_diameter = 80;\nwok_height = 35;\nwall_thickness = 2;\nhandle_length = 60;\nhandle_diameter = 12;\n\n// Main wok bowl\nmodule wok_bowl() {\n    difference() {\n        // Outer bowl\n        scale([1, 1, 0.8]) \n            cylinder(h = wok_height, d = wok_diameter, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            scale([1, 1, 0.75])\n                cylinder(h = wok_height, d = wok_diameter - wall_thickness * 2, center = false);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -1])\n            cylinder(h = 2, d = wok_diameter * 0.6, center = false);\n    }\n}\n\n// Rivet detail\nmodule rivet() {\n    cylinder(h = 3, d = 3);\n}\n\n// Handle attachment plate\nmodule handle_attachment() {\n    difference() {\n        // Main plate\n        translate([wok_diameter/2 - 10, 0, wok_height/2])\n            rotate([90, 0, 0])\n                scale([1, 0.3, 1])\n                    cube([20, 15, 3], center = true);\n        \n        // Screw holes (decorative)\n        for(y = [-5, 5])\n            translate([wok_diameter/2 - 10, y, wok_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, d = 2, center = true);\n    }\n    \n    // Rivets\n    for(y = [-5, 5]) {\n        translate([wok_diameter/2 - 15, y, wok_height/2 + 2])\n            rivet();\n        translate([wok_diameter/2 - 5, y, wok_height/2 + 2])\n            rivet();\n    }\n}\n\n// Main handle - ergonomic grip\nmodule handle() {\n    // Handle core\n    translate([wok_diameter/2 + handle_length/2 - 10, 0, wok_height/2])\n        rotate([0, 90, 0])\n            difference() {\n                // Main handle cylinder with taper\n                hull() {\n                    translate([0, 0, 0])\n                        cylinder(h = 5, d = handle_diameter);\n                    translate([handle_length - 15, 0, 0])\n                        cylinder(h = 5, d = handle_diameter * 0.9);\n                    translate([handle_length - 5, 0, 0])\n                        cylinder(h = 5, d = handle_diameter * 0.7);\n                }\n                \n                // Grip grooves\n                for(i = [10:15:handle_length - 20]) {\n                    translate([i, 0, -handle_diameter/2 - 1])\n                        rotate([90, 0, 0])\n                            cylinder(h = handle_diameter + 2, d = 2);\n                }\n            }\n    \n    // Handle collar\n    translate([wok_diameter/2 - 10, 0, wok_height/2])\n        rotate([0, 90, 0])\n            cylinder(h = 8, d = handle_diameter + 4);\n}\n\n// Helper handle (opposite side)\nmodule helper_handle() {\n    translate([-wok_diameter/2 + 5, 0, wok_height/2])\n        rotate([90, 0, 0])\n            difference() {\n                // Main helper handle\n                cylinder(h = 25, d = 8);\n                \n                // Hollow center\n                cylinder(h = 25, d = 4);\n            }\n}\n\n// Rim reinforcement\nmodule rim_reinforcement() {\n    difference() {\n        translate([0, 0, wok_height - 1])\n            cylinder(h = 3, d = wok_diameter + 2);\n        \n        translate([0, 0, wok_height - 1])\n            cylinder(h = 3.5, d = wok_diameter - wall_thickness * 2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main wok\n    wok_bowl();\n    \n    // Structural elements\n    rim_reinforcement();\n    handle_attachment();\n    \n    // Handles\n    handle();\n    helper_handle();\n}",
    "renders": true
  },
  {
    "household_item": "saucepan",
    "openscad_code": "$fn = 36;\n\nwall_th = 1.5;      // wall thickness (mm)\nbase_d = 50;        // pan base diameter\nrim_d = 54;         // rim diameter\nheight = 40;        // pan body height\nbottom_shift = 3;   // extra base height for bottom plate\nhandle_L = 60;      // handle length\nhandle_W = 10;      // handle width\nhandle_T = 8;       // handle thickness\nrivet_r = 1.2;      // rivet radius\nrivet_L = 4;\n\n// saucepan body\nmodule saucepan_body() {\n    difference() {\n        union() {\n            // main tapered wall\n            cylinder(h1 = height + bottom_shift,\n                     h2 = height,\n                     r1 = base_d/2,\n                     r2 = rim_d/2,\n                     center = false);\n\n            // rolled rim lip\n            translate([0, 0, height])\n                cylinder(h = 2,\n                         r1 = rim_d/2,\n                         r2 = rim_d/2 + 1.5,\n                         center = false);\n        }\n\n        // hollow interior\n        translate([0, 0, bottom_shift])\n            cylinder(h1 = height - 2,\n                     h2 = height - bottom_shift - 1,\n                     r1 = base_d/2 - wall_th,\n                     r2 = rim_d/2 - wall_th,\n                     center = false);\n    }\n}\n\n// helper for handle profile\nmodule handle_profile() {\n    // ellipse + rectangle blend\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = handle_T, r = handle_T/2, center = true);\n        translate([handle_L - handle_T/2, 0, 0])\n            cylinder(h = handle_T, r = handle_T/2, center = true);\n    }\n}\n\n// saucepan handle\nmodule handle() {\n    // main grip\n    translate([rim_d/2, 0, height/2])\n        rotate([90, 0, 0])\n            scale([1, handle_W/handle_T, 1])\n                handle_profile();\n\n    // support bracket\n    translate([rim_d/2, 0, bottom_shift + 2])\n        rotate([90, 0, 0])\n            linear_extrude(height = handle_W) {\n                polygon(points = [\n                    [0, 0],\n                    [handle_L/2.5, 0],\n                    [handle_L/2.5, 6],\n                    [0, 4]\n                ]);\n            }\n\n    // rivets\n    for(z = [height*0.35, height*0.65]) {\n        translate([rim_d/2 + 2, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h = rivet_L, r = rivet_r, center = true);\n    }\n}\n\n// saucepan bottom plate (heat spreader)\nmodule bottom_plate() {\n    difference() {\n        cylinder(h = bottom_shift, r = base_d/2, center = false);\n        translate([0, 0, 0.5])\n            cylinder(h = bottom_shift, r = base_d/2 - wall_th, center = false);\n    }\n}\n\n// assemble\nunion() {\n    bottom_plate();\n    saucepan_body();\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "stockpot",
    "openscad_code": "// Realistic 3D-printable stockpot (medium complexity)\n// Overall height ≈ 55 mm, diameter ≈ 55 mm\n\nmodule stockpot() {\n    // Wall / bottom thickness\n    wall = 1.6;\n\n    // Main pot body\n    difference() {\n        cylinder(h = 40, d = 55, $fn = 90);               // outer shell\n        translate([0, 0, wall])\n            cylinder(h = 40, d = 55 - 2*wall, $fn = 90); // inner hollow\n    }\n\n    // Bottom base plate (extra thickness for print stability)\n    translate([0, 0, -1])\n        cylinder(h = wall + 1, d = 55, $fn = 90);\n\n    // Rim roll at top\n    difference() {\n        translate([0, 0, 40])\n            cylinder(h = 4, d1 = 55, d2 = 57, $fn = 90);   // outer flare\n        translate([0, 0, 40])\n            cylinder(h = 5, d = 55 - 2*wall, $fn = 90);    // inner cut\n    }\n\n    // Handles\n    module handle() {\n        difference() {\n            // Main grip loop\n            rotate([0, 90, 0])\n                translate([0, 0, 27.5 + wall])\n                    rotate_extrude(angle = 90, $fn = 30)\n                        translate([27.5 + wall, 0])\n                            square([wall * 1.5, 6]);\n\n            // Hollow out grip\n            rotate([0, 90, 0])\n                translate([0, 0, 27.5 + wall + 0.5])\n                    rotate_extrude(angle = 90, $fn = 30)\n                        translate([27.5 + wall + 0.5, 0])\n                            square([wall * 0.7, 4]);\n        }\n        // Support plate under handle\n        translate([0, 27.5, 35])\n            cube([10, wall, 6], center = true);\n    }\n\n    // Attach two handles 180° apart\n    for (i = [0:1])\n        rotate([0, 0, i * 180])\n            handle();\n\n    // Lid\n    translate([0, 70, 0]) {\n        difference() {\n            // Lid disk\n            cylinder(h = 3, d = 56, $fn = 90);\n            translate([0, 0, 0.5])\n                cylinder(h = 3, d = 54, $fn = 90); // inner recess\n        }\n        // Lid knob\n        translate([0, 0, 3])\n            cylinder(h = 8, d1 = 10, d2 = 8, $fn = 30);\n    }\n}\n\nstockpot();",
    "renders": true
  },
  {
    "household_item": "roaster",
    "openscad_code": "// Realistic Roaster - 3D printable coffee bean roaster\n// Size: ~80mm length, ~60mm height, ~50mm width\n// All overhangs <= 45° for 3D printing\n\n// Main dimensions (mm)\nroaster_length = 80;\nroaster_width = 50;\nroaster_height = 60;\nwall_thickness = 2;\nhandle_length = 30;\n\n// Roaster body - main chamber\nmodule roaster_body() {\n    difference() {\n        // Outer shell - rounded for better heat distribution\n        hull() {\n            translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                sphere(d=roaster_width);\n            translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                cylinder(h=roaster_length-roaster_width, d=roaster_width);\n        }\n        \n        // Inner cavity for beans\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            scale([(roaster_length-2*wall_thickness)/roaster_length, \n                   (roaster_width-2*wall_thickness)/roaster_width,\n                   (roaster_height-2*wall_thickness)/roaster_height])\n                hull() {\n                    translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                        sphere(d=roaster_width);\n                    translate([roaster_length/2, roaster_width/2, roaster_height/2])\n                        cylinder(h=roaster_length-roaster_width, d=roaster_width);\n                }\n    }\n}\n\n// Handle with wooden grip texture\nmodule handle() {\n    // Metal arm\n    translate([roaster_length, roaster_width/2, roaster_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=handle_length, d=8);\n    \n    // Wooden grip with rings for texture\n    for(i = [0:4]) {\n        translate([roaster_length + 5 + i*5, roaster_width/2, roaster_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=4, d=10 + (i%2)*2);\n    }\n}\n\n// Lid with steam vent holes\nmodule lid() {\n    // Main lid disc\n    translate([roaster_length/2, roaster_width/2, roaster_height - wall_thickness])\n        cylinder(h=wall_thickness*2, d=roaster_width + 4);\n    \n    // Handle on lid\n    translate([roaster_length/2, roaster_width/2, roaster_height + 2])\n        cylinder(h=5, d=8);\n    \n    // Steam vents - small holes for moisture release\n    for(angle = [0:45:360-45]) {\n        rotate([0, 0, angle])\n            translate([roaster_length/2 + roaster_width/4, \n                      roaster_width/2, \n                      roaster_height])\n                cylinder(h=wall_thickness*3, d=2);\n    }\n}\n\n// Support legs - angled for stability\nmodule legs() {\n    for(side = [-1, 1]) {\n        for(end = [-1, 1]) {\n            translate([roaster_length/2 + end*(roaster_length/2 - 10),\n                      roaster_width/2 + side*(roaster_width/2 - 5),\n                      5])\n                rotate([0, end*15, 0])\n                    cylinder(h=10, d1=8, d2=6);\n        }\n    }\n}\n\n// Crank mechanism for rotating beans\nmodule crank() {\n    // Drive shaft\n    translate([0, roaster_width/2, roaster_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=10, d=6);\n    \n    // Crank arm\n    translate([-5, roaster_width/2 - 5, roaster_height/2])\n        cube([10, 10, 6]);\n    \n    // Crank handle\n    translate([-10, roaster_width/2 - 15, roaster_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=8);\n}\n\n// Assembly\nunion() {\n    roaster_body();\n    handle();\n    legs();\n    crank();\n    \n    // Optional - add lid (can be printed separately)\n    %lid();\n}",
    "renders": true
  },
  {
    "household_item": "griddle",
    "openscad_code": "// Realistic 3D-printable griddle, medium complexity\n// Outer size: 90 x 60 x 20 mm (fits most FDM printers)\n\n$fn = 36;           // smooth curves\n\n// Overall body\ndifference() {\n    // Main plate\n    union() {\n        // Base frame with rounded corners\n        hull() {\n            translate([-45, -30, 0]) cylinder(h = 20, d = 6);\n            translate([45, -30, 0])  cylinder(h = 20, d = 6);\n            translate([45, 30, 0])   cylinder(h = 20, d = 6);\n            translate([-45, 30, 0])  cylinder(h = 20, d = 6);\n        }\n\n        // Bottom plate\n        translate([0, 0, 0]) cube([90, 60, 2], center = true);\n\n        // Side walls\n        for (x = [-42.5, 42.5]) {\n            translate([x, 0, 10]) cube([5, 60, 20], center = true);\n        }\n        for (y = [-27.5, 27.5]) {\n            translate([0, y, 10]) cube([90, 5, 20], center = true);\n        }\n    }\n\n    // Remove cooking surface cavity\n    translate([0, 0, 2]) cube([80, 50, 18], center = true);\n\n    // Drain hole\n    translate([40, 25, 2]) cylinder(h = 10, d = 5);\n}\n\n// Cooking surface with raised ridges\nmodule ridge_row(y) {\n    for (x = [-35 : 8 : 35]) {\n        translate([x, y, 2]) cube([6, 3, 1.5]);\n    }\n}\n\nfor (y = [-22.5 : 6 : 22.5]) {\n    ridge_row(y);\n}\n\n// Drain channel leading to hole\ntranslate([35, 23, 1.9]) cube([10, 4, 0.8]);\n\n// Handle sockets (for wooden dowels)\nmodule handle_socket(side) {\n    translate([side * 52, 0, 10]) {\n        difference() {\n            cylinder(h = 20, d = 12);\n            translate([0, 0, -1]) cylinder(h = 22, d = 8);\n        }\n    }\n}\n\nhandle_socket(-1);\nhandle_socket(1);\n\n// Feet\nmodule foot(x, y) {\n    translate([x, y, -1]) cylinder(h = 5, d = 8);\n}\n\nfoot(-40, -25);\nfoot(40, -25);\nfoot(-40, 25);\nfoot(40, 25);",
    "renders": true
  },
  {
    "household_item": "steamer",
    "openscad_code": "// OpenSCAD Steamer (realistic, medium complexity)\n// Overall dimensions ~80 mm diameter\n\n$fn = 48;  // smooth curves\n\n// Main parameters\nbase_d = 70;          // base diameter\nbase_h = 20;          // base height\nwall_th = 3;          // wall thickness\npot_h = 45;           // pot height\nrim_h = 8;            // rim height\nhandle_r = 5;         // handle radius\nhandle_l = 25;        // handle length\nvent_holes = 8;       // number of vent holes\nlid_knob_r = 8;       // lid knob radius\nlid_knob_h = 12;      // lid knob height\n\n// Base module\nmodule steamer_base() {\n    difference() {\n        // outer base\n        cylinder(h = base_h, d = base_d);\n        // hollow interior\n        translate([0, 0, wall_th])\n            cylinder(h = base_h, d = base_d - 2*wall_th);\n        // bottom vent holes\n        for(i = [1:vent_holes]) {\n            rotate([0, 0, i*360/vent_holes])\n                translate([base_d/2 - wall_th - 2, 0, base_h/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = wall_th + 1, d = 3, $fn = 16);\n        }\n    }\n}\n\n// Pot module\nmodule steamer_pot() {\n    difference() {\n        // outer pot\n        cylinder(h = pot_h, d = base_d, center = false);\n        // inner cavity\n        translate([0, 0, wall_th])\n            cylinder(h = pot_h, d = base_d - 2*wall_th, center = false);\n    }\n    // upper rim\n    translate([0, 0, pot_h])\n        difference() {\n            cylinder(h = rim_h, d = base_d + 2*wall_th);\n            cylinder(h = rim_h, d = base_d);\n        }\n    // handles\n    for(side = [-1, 1]) {\n        translate([side * (base_d/2 + handle_l/2), 0, pot_h/2])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = handle_l, r = handle_r);\n                    translate([0, 0, -1])\n                        cube([handle_l, 2*handle_r, 2*handle_r + 2], center = true);\n                }\n    }\n}\n\n// Steamer insert (perforated tray)\nmodule steamer_insert() {\n    difference() {\n        cylinder(h = wall_th*2, d = base_d - 4*wall_th);\n        // perforation pattern\n        for(row = [-2:2]) {\n            for(col = [-2:2]) {\n                translate([row*8, col*8, -1])\n                    cylinder(h = wall_th*2 + 2, d = 3);\n            }\n        }\n        // center hole\n        cylinder(h = wall_th*2 + 2, d = 20);\n    }\n    // small legs for elevation\n    for(i = [1:3]) {\n        rotate([0, 0, i*120])\n            translate([base_d/2 - 6*wall_th, 0, -wall_th])\n                cylinder(h = wall_th*2, d = 6);\n    }\n}\n\n// Lid module\nmodule steamer_lid() {\n    difference() {\n        // lid dome\n        translate([0, 0, -rim_h/2])\n            scale([1, 1, 0.6])\n                sphere(d = base_d + 2*wall_th);\n        // inner clearance\n        translate([0, 0, -rim_h])\n            scale([1, 1, 0.6])\n                sphere(d = base_d);\n        // handle hole\n        translate([0, 0, lid_knob_h/2])\n            cylinder(h = lid_knob_h, d = lid_knob_r/2);\n    }\n    // lid knob\n    translate([0, 0, lid_knob_h])\n        cylinder(h = lid_knob_h, r = lid_knob_r);\n}\n\n// Assembly\ntranslate([0, 0, 0]) steamer_base();\ntranslate([0, 0, base_h]) steamer_pot();\ntranslate([0, 0, base_h + wall_th*2]) steamer_insert();\ntranslate([0, 0, base_h + pot_h + rim_h]) steamer_lid();",
    "renders": true
  },
  {
    "household_item": "slowcooker",
    "openscad_code": "// Slow Cooker - Realistic Medium Complexity\n// Dimensions: ~80mm wide x 70mm deep x 60mm tall\n\n$fn = 32;\n\n// Main body\nmodule slow_cooker_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 30]) \n            scale([1, 0.9, 1])\n            cylinder(h=40, r1=35, r2=35);\n        \n        // Inner cavity\n        translate([0, 0, 35]) \n            scale([1, 0.9, 1])\n            cylinder(h=35, r1=30, r2=30);\n    }\n}\n\n// Base with feet\nmodule base() {\n    union() {\n        // Main base\n        translate([0, 0, 5])\n            cube([70, 60, 10], center=true);\n        \n        // Control panel\n        translate([38, 0, 10])\n            cube([15, 25, 5], center=true);\n        \n        // Feet\n        for (x = [-25, 25])\n            for (y = [-20, 20])\n                translate([x, y, 2])\n                    cylinder(h=4, r=3);\n    }\n}\n\n// Lid with handle\nmodule lid() {\n    union() {\n        // Lid body\n        translate([0, 0, 65])\n            difference() {\n                scale([1, 0.9, 1])\n                    cylinder(h=8, r1=36, r2=34);\n                translate([0, 0, 2])\n                    scale([1, 0.9, 1])\n                        cylinder(h=8, r1=30, r2=28);\n            }\n        \n        // Handle\n        translate([0, 0, 75])\n            scale([1, 0.9, 0.3])\n                cylinder(h=15, r1=10, r2=10);\n    }\n}\n\n// Handles on sides\nmodule side_handles() {\n    for (y = [-1, 1]) {\n        translate([0, y*40, 40]) {\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=15, r=5);\n                    translate([0, 0, -1])\n                        cube([20, 10, 17], center=true);\n                }\n        }\n    }\n}\n\n// Vent holes\nmodule vents() {\n    for (i = [0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, 26, 60])\n                cylinder(h=3, r=2);\n    }\n}\n\n// Control knobs\nmodule controls() {\n    translate([38, -8, 15])\n        cylinder(h=3, r=3);\n    translate([38, 8, 15])\n        cylinder(h=3, r=3);\n}\n\n// Assembly\nslow_cooker_body();\nbase();\nlid();\nside_handles();\nvents();\ncontrols();",
    "renders": true
  },
  {
    "household_item": "pressurecooker",
    "openscad_code": "// Pressure Cooker - Realistic Medium Complexity\n// Sized for 3D printing, ~80mm total height\n\n$fn = 50;\n\n// Main parameters\nbase_d = 70;\nbase_h = 30;\nwall_th = 3;\nlid_d = base_d + 2*wall_th;\nlid_h = 12;\n\n// Base pot\nmodule pot_body() {\n    difference() {\n        cylinder(h = base_h, d = base_d);\n        translate([0, 0, wall_th])\n            cylinder(h = base_h, d = base_d - 2*wall_th);\n    }\n}\n\n// Lid with handle\nmodule lid() {\n    difference() {\n        union() {\n            // Main lid disk\n            cylinder(h = lid_h, d = lid_d);\n            \n            // Safety valve\n            translate([lid_d/4, 0, lid_h])\n                cylinder(h = 8, d1 = 4, d2 = 2);\n                \n            // Main handle\n            translate([0, 0, lid_h + 8])\n                cylinder(h = 8, d = 14);\n            translate([0, 0, lid_h + 12])\n                cylinder(h = 4, d = 20);\n        }\n        \n        // Steam vent hole\n        translate([lid_d/4, 0, lid_h])\n            cylinder(h = 20, d = 1.5);\n    }\n}\n\n// Side handles - two opposing\nmodule side_handles() {\n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([base_d/2 + 5, 0, base_h/2])\n                difference() {\n                    cube([10, 8, 10], center = true);\n                    cube([8, 6, 8], center = true);\n                }\n    }\n}\n\n// Rim detail on pot\nmodule rim_detail() {\n    translate([0, 0, base_h])\n        difference() {\n            cylinder(h = 3, d = base_d + 4);\n            cylinder(h = 3, d = base_d);\n        }\n}\n\n// Locking lugs around lid\nmodule locking_lugs() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([lid_d/2 + 2, 0, lid_h/2])\n                cube([4, 8, lid_h], center = true);\n    }\n}\n\n// Base bottom with feet\nmodule base_feet() {\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([base_d/2 - 5, 0, 0])\n                cylinder(h = 3, d = 6);\n    }\n}\n\n// Assembly\nunion() {\n    // Pot assembly\n    union() {\n        pot_body();\n        side_handles();\n        rim_detail();\n        base_feet();\n    }\n    \n    // Lid assembly\n    translate([0, 0, base_h + 6])\n        union() {\n            lid();\n            locking_lugs();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "fryer",
    "openscad_code": "// Mini Fryer Model (Medium complexity, 3D-printable)\n// Overall size ≈ 70 mm wide × 65 mm deep × 80 mm tall\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body shell\nmodule fryer_body() {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([65, 60, 55], center = true);\n            sphere(3);\n        }\n        // Hollow inside\n        minkowski() {\n            cube([65 - 2*wall, 60 - 2*wall, 55 - wall], center = true);\n            sphere(1.5);\n        }\n    }\n}\n\n// Control panel on front\nmodule control_panel() {\n    translate([0, -32, 0]) {\n        cube([30, 4, 15], center = true);\n    }\n    // Three knobs\n    for (x = [-10, 0, 10]) {\n        translate([x, -34, 0]) {\n            cylinder(h = 4, d = 6);\n            translate([0, 0, 4]) cylinder(h = 1, d = 4);\n        }\n    }\n}\n\n// Lid with handle\nmodule lid() {\n    difference() {\n        // Lid plate\n        translate([0, 0, 28.5]) {\n            minkowski() {\n                cube([67, 62, 2], center = true);\n                sphere(1);\n            }\n        }\n        // Relief cavity\n        translate([0, 0, 29]) {\n            minkowski() {\n                cube([63, 58, 2], center = true);\n                sphere(0.5);\n            }\n        }\n    }\n    // Handle bar\n    translate([0, 0, 34]) {\n        rotate([90, 0, 0]) cylinder(h = 40, d = 6, center = true);\n    }\n}\n\n// Short feet to lift fryer\nmodule feet() {\n    for (x = [-25, 25], y = [-22, 22]) {\n        translate([x, y, -29]) {\n            cylinder(h = 4, d = 6);\n        }\n    }\n}\n\n// Oil basket\nmodule basket() {\n    difference() {\n        // Basket body\n        translate([0, 0, 5]) {\n            minkowski() {\n                cube([50, 45, 30], center = true);\n                sphere(1);\n            }\n        }\n        // Hollow\n        translate([0, 0, 5]) {\n            minkowski() {\n                cube([50 - 2*wall, 45 - 2*wall, 30], center = true);\n                sphere(0.5);\n            }\n        }\n    }\n    // Basket handle arcs\n    translate([0, 0, 25]) {\n        difference() {\n            cylinder(h = 3, d = 5, center = true);\n            cylinder(h = 4, d = 3, center = true);\n        }\n    }\n    // Perforation pattern (simplified)\n    for (dx = [-20:10:20], dy = [-15:10:15], dz = [5:10:25]) {\n        translate([dx, dy, dz]) {\n            sphere(1);\n        }\n    }\n}\n\n// Assemble fryer\nunion() {\n    fryer_body();\n    control_panel();\n    lid();\n    feet();\n    translate([0, 0, 0]) basket();\n}",
    "renders": true
  },
  {
    "household_item": "grill",
    "openscad_code": "// Medium-complexity realistic-style grill, ~75 mm long\n\n// Overall scale factor\nscale = 1.2;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main firebox\nmodule firebox() {\n    difference() {\n        // Outer shell\n        cube([60*scale, 35*scale, 30*scale], center=true);\n        \n        // Hollow interior\n        translate([0,0,wall/2])\n            cube([(60-2*wall)*scale, (35-2*wall)*scale, 30*scale-wall], center=true);\n    }\n}\n\n// Lid with curved top\nmodule lid() {\n    difference() {\n        union() {\n            // Box part of lid\n            translate([0,0,15*scale])\n                cube([60.5*scale, 35.5*scale, 8*scale], center=true);\n            \n            // Curved top\n            translate([0,0,15*scale+8*scale])\n                scale([1,0.6,0.5])\n                    sphere(d=60*scale, $fn=60);\n        }\n        \n        // Hollow inside lid\n        translate([0,0,15*scale])\n            cube([(60.5-2*wall)*scale, (35.5-2*wall)*scale, 8*scale], center=true);\n    }\n}\n\n// Hinge between lid and firebox\nmodule hinge() {\n    for(x=[-20*scale, 20*scale]) {\n        translate([x, 0, 15*scale]) {\n            cylinder(h=35*scale, d=3*scale, center=true);\n        }\n    }\n}\n\n// Cooking grate made of parallel rods\nmodule grate() {\n    for(i=[-25:5:25]) {\n        translate([i*scale, 0, 8*scale])\n            cube([2*scale, 33*scale, 1.5*scale], center=true);\n    }\n}\n\n// Charcoal grate below\nmodule charcoal_grate() {\n    for(i=[-25:7:25]) {\n        translate([i*scale, 0, -5*scale])\n            cube([1.5*scale, 33*scale, 1*scale], center=true);\n    }\n}\n\n// Side shelf\nmodule shelf() {\n    difference() {\n        // Shelf surface\n        translate([33*scale, 0, 5*scale])\n            cube([12*scale, 30*scale, 2*scale], center=true);\n        \n        // Cutouts for weight saving and style\n        for(x=[-2:4:2])\n            for(y=[-10:5:10])\n                translate([33*scale+x*scale, y*scale, 6*scale])\n                    cube([3*scale, 3*scale, 2.1*scale], center=true);\n    }\n    \n    // Support struts\n    translate([33*scale, 0, -8*scale])\n        cube([1.5*scale, 30*scale, 13*scale], center=true);\n}\n\n// Wheels\nmodule wheels() {\n    for(side=[-1,1]) {\n        translate([28*scale, side*18*scale, -15*scale])\n            rotate([90,0,0])\n                cylinder(h=5*scale, d=10*scale, center=true);\n        \n        // Axle\n        translate([28*scale, 0, -15*scale])\n            rotate([0,90,0])\n                cylinder(h=36*scale, d=3*scale, center=true);\n    }\n}\n\n// Legs for stability\nmodule legs() {\n    for(side=[-1,1]) {\n        for(x=[-27,27]) {\n            translate([x*scale, side*17.5*scale, -15*scale])\n                cube([3*scale, 3*scale, 30*scale], center=true);\n        }\n    }\n}\n\n// Vent holes on bottom\nmodule vents() {\n    for(x=[-15:10:15]) {\n        for(y=[-10:10:10]) {\n            translate([x*scale, y*scale, -15*scale])\n                cube([4*scale, 4*scale, 2*scale], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    firebox();\n    lid();\n    hinge();\n    grate();\n    charcoal_grate();\n    shelf();\n    mirror([0,1,0]) shelf();\n    wheels();\n    legs();\n    vents();\n}",
    "renders": true
  },
  {
    "household_item": "cutlery",
    "openscad_code": "// Realistic Medium-Complexity Cutlery – Fork\n// Overall length ~100 mm, 3D-printable with no steep overhangs\n\n// Parameters\nlength = 100;         // total length\nhandle_len = 55;\nhandle_w   = 9;\nhandle_t   = 3.5;\nneck_len   = 8;\nhead_len   = length - handle_len - neck_len;\ntine_w     = 2.4;\ntine_gap   = 1.8;\ntine_len   = head_len * 0.65;\nwall       = 1.0;\n\n// Helper for rounded handle cross-section\nmodule oval(w, h, depth) {\n    hull() {\n        for (x = [-w/2+wall, w/2-wall])\n            for (y = [-h/2+wall, h/2-wall])\n                translate([x, y, 0])\n                    cylinder(r=wall, h=depth, $fn=12);\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // main shape\n        linear_extrude(height=handle_len, scale=[1, 0.9], center=false)\n            offset(r=wall)\n                circle(d=handle_w, $fn=32);\n\n        // hollow cavity\n        translate([0, 0, wall])\n            linear_extrude(height=handle_len-wall-1, scale=[1, 0.9], center=false)\n                circle(d=handle_w-2*wall, $fn=32);\n    }\n}\n\n// Neck taper\nmodule neck() {\n    translate([0, 0, handle_len])\n        cylinder(h1=neck_len, h2=0, r1=handle_w/2, r2=handle_w/2*0.7, $fn=32);\n}\n\n// Fork head with four tines\nmodule head() {\n    translate([0, 0, handle_len+neck_len]) {\n        // base plate\n        cube([handle_w*0.7, tine_len, wall], center=true);\n\n        // tines\n        for (i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([i * (tine_w + tine_gap), tine_len/2, wall])\n                cube([tine_w, tine_len, handle_t], center=true);\n        }\n\n        // back curve\n        translate([0, -tine_len/2, wall/2])\n            cube([handle_w*0.7, wall, handle_t], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    rotate([90, 0, 0])  // lay flat for printing\n    union() {\n        handle();\n        neck();\n        head();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "utensils",
    "openscad_code": "// Realistic medium-complexity 3D-printable fork\n// Overall length ~110 mm\n\n$fn = 40;  // Smooth curves for realism\nwall = 1.2;  // Minimum printable wall thickness\n\nmodule handle() {\n    // Main handle body\n    difference() {\n        // Tapered handle shape\n        hull() {\n            translate([0, 0, 0]) cylinder(h=50, d1=8, d2=10, center=true);\n            translate([0, 0, 15]) cylinder(h=50, d1=10, d2=9, center=true);\n        }\n        \n        // Grip grooves\n        for (i = [1:5]) {\n            translate([0, 0, -20 + i*10])\n                rotate([0, 0, 0])\n                cylinder(h=2, d=12, center=true);\n        }\n    }\n}\n\nmodule neck() {\n    // Tapered transition from handle to tines\n    cylinder(h=12, d1=10, d2=5, center=true);\n}\n\nmodule tines() {\n    // Four fork tines\n    difference() {\n        // Overall tine base\n        translate([0, 0, 6])\n            cube([25, 12, 2], center=true);\n        \n        // Tapered end\n        translate([12.5, 0, 6])\n            rotate([0, 90, 0])\n            cylinder(h=12, d1=2, d2=0, center=true);\n    }\n    \n    // Individual tines\n    for (i = [-1.5:1:1.5]) {\n        translate([i*2.5, 0, 6])\n            cube([2, 12, 2], center=true);\n    }\n    \n    // Tine tips\n    for (i = [-1.5:1:1.5]) {\n        translate([i*2.5, 12, 6])\n            rotate([0, 90, 0])\n            cylinder(h=2, d1=2, d2=0, center=true);\n    }\n    \n    // Reinforcement between tines\n    translate([0, 2, 7])\n        cube([11, 4, 0.8], center=true);\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, -35, 0]) handle();\n    \n    // Neck\n    translate([0, -12, 0]) neck();\n    \n    // Tines\n    translate([0, 6, 0]) tines();\n}",
    "renders": true
  },
  {
    "household_item": "chopsticks",
    "openscad_code": "// Realistic Chopsticks - Medium Complexity\n// 3D printable with tapered shape and square grip sections\n\n// Parameters\nlength = 220;           // Total length of chopstick (mm)\ntip_dia = 2;            // Diameter at tip (mm)\nbase_dia = 8;           // Diameter at base (mm)\ngrip_len = 50;          // Length of grip section (mm)\ngrip_depth = 0.5;       // Depth of grip indentations (mm)\nwall_thick = 1.5;       // Wall thickness for hollowing (mm)\n\n// Create one chopstick\nmodule chopstick() {\n    difference() {\n        // Outer solid shape\n        union() {\n            // Main tapered body\n            cylinder(h = length, r1 = base_dia/2, r2 = tip_dia/2, $fn = 32);\n            \n            // Base ring for better grip\n            translate([0, 0, length])\n                cylinder(h = 5, r = base_dia/2 + 1, r2 = base_dia/2, $fn = 32);\n        }\n        \n        // Hollow out the interior\n        translate([0, 0, -1])\n            cylinder(h = length + 2, r1 = base_dia/2 - wall_thick, \n                    r2 = tip_dia/2 - wall_thick, $fn = 32);\n        \n        // Grip indentations - square pattern\n        for (i = [0:5]) {\n            // Top face indentations\n            translate([0, 0, length - grip_len + i * 8])\n                rotate([0, 0, 45])\n                cube([grip_depth * 2, base_dia * 0.8, 4], center = true);\n                \n            // Side indentations (rotated 90 degrees)\n            translate([0, 0, length - grip_len + i * 8 + 4])\n                rotate([0, 0, 0])\n                cube([base_dia * 0.8, grip_depth * 2, 4], center = true);\n        }\n        \n        // Taper the tip slightly more for realistic point\n        translate([0, 0, -1])\n            cylinder(h = 5, r1 = tip_dia/2, r2 = 0, $fn = 32);\n    }\n    \n    // Add subtle rings along length for friction\n    for (i = [1:20]) {\n        translate([0, 0, i * 10])\n            difference() {\n                cylinder(h = 0.2, r = base_dia/2 - (base_dia - tip_dia)/2 * (i/22), $fn = 32);\n                translate([0, 0, -0.1])\n                    cylinder(h = 0.4, r = base_dia/2 - (base_dia - tip_dia)/2 * (i/22) - 0.1, $fn = 32);\n            }\n    }\n}\n\n// Create a pair of chopsticks\ntranslate([-10, 0, 0]) chopstick();\ntranslate([10, 0, 0]) mirror([1, 0, 0]) chopstick();",
    "renders": true
  },
  {
    "household_item": "teaspoon",
    "openscad_code": "// Realistic Teaspoon - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\nwall = 1.5;\n\nmodule spoon_head() {\n    // Main bowl shape\n    difference() {\n        hull() {\n            sphere(d = 40);\n            translate([0, -5, 0]) sphere(d = 35);\n        }\n        \n        // Hollow out the bowl\n        translate([0, 0, -2]) {\n            scale([0.85, 0.85, 1]) {\n                hull() {\n                    sphere(d = 38);\n                    translate([0, -3, 0]) sphere(d = 33);\n                }\n            }\n        }\n        \n        // Cut bottom flat\n        translate([0, 0, -15]) cube([50, 50, 30], center = true);\n    }\n    \n    // Add rim thickness\n    difference() {\n        translate([0, 0, 2]) {\n            scale([1.05, 1.05, 0.3]) {\n                hull() {\n                    sphere(d = 40);\n                    translate([0, -5, 0]) sphere(d = 35);\n                }\n            }\n        }\n        translate([0, 0, -5]) cube([50, 50, 10], center = true);\n    }\n}\n\nmodule spoon_handle() {\n    // Handle shaft with gradual taper\n    for(i = [0:9]) {\n        translate([0, -20 - i*5, 0]) {\n            rotate([0, 0, sin(i*15)]) {\n                scale([1 - i*0.05, 1 - i*0.03, 1]) {\n                    cylinder(h = 5, d1 = 6, d2 = 5.5, center = true);\n                }\n            }\n        }\n    }\n    \n    // Handle tip\n    translate([0, -70, 0]) {\n        sphere(d = 5.5);\n    }\n    \n    // Handle ridge for grip\n    for(i = [1:4]) {\n        translate([0, -25 - i*10, 2.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 1.5, d = 7, center = true);\n            }\n        }\n    }\n}\n\nmodule spoon_neck() {\n    // Transition from handle to head\n    hull() {\n        translate([0, -15, 0]) cylinder(h = 10, d = 8, center = true);\n        translate([0, -5, 0]) cylinder(h = 10, d = 12, center = true);\n    }\n    \n    // Smooth underside curve\n    translate([0, -10, -4]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 8, d = 10, center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main spoon head\n    translate([0, 0, 0]) spoon_head();\n    \n    // Neck transition\n    translate([0, 0, 0]) spoon_neck();\n    \n    // Handle\n    translate([0, 0, 0]) spoon_handle();\n}",
    "renders": true
  },
  {
    "household_item": "tablespoon",
    "openscad_code": "// Realistic Tablespoon (medium complexity)\n// Overall length ~120mm (handle) + ~45mm (bowl) = ~165mm\n\n$fn = 36;   // smooth curves\n\n// -------------------- Main Assembly --------------------\nunion() {\n    handle();\n    neck();\n    bowl();\n}\n\n// -------------------- Handle --------------------\nmodule handle() {\n    difference() {\n        // Main handle shaft\n        rotate([90,0,0])\n            linear_extrude(height = 120, center = false, scale = 0.7)\n                circle(d = 12, $fn = 6);\n\n        // Ergonomic finger groove on top\n        translate([0, 60, 5])\n            rotate([0,90,0])\n                cylinder(h = 30, d1 = 8, d2 = 8, $fn = 16);\n\n        // Hole for hanging\n        translate([0, 110, 0])\n            rotate([90,0,0])\n                cylinder(h = 20, d = 4, center = true);\n    }\n}\n\n// -------------------- Neck --------------------\nmodule neck() {\n    // Tapered transition from handle to bowl\n    translate([0,120,0])\n        rotate([90,0,0])\n            cylinder(h = 25, d1 = 12, d2 = 30, $fn = 32);\n}\n\n// -------------------- Bowl --------------------\nmodule bowl() {\n    translate([0,145,0])\n        rotate([0,0,0])\n            difference() {\n                // Outer bowl shell\n                scale([1, 1.2, 0.45])\n                    sphere(d = 45, $fn = 64);\n\n                // Inner cavity\n                translate([0,0,-1])\n                    scale([0.9, 1.1, 0.4])\n                        sphere(d = 45, $fn = 64);\n\n                // Flatten bottom for printing stability\n                translate([0,0,-10])\n                    cube([50,50,20], center = true);\n\n                // Rim rounding\n                translate([0,0,9.5])\n                    scale([1, 1.2, 0.45])\n                        sphere(d = 42, $fn = 64);\n            }\n}",
    "renders": true
  },
  {
    "household_item": "dessertspoon",
    "openscad_code": "// Dessertspoon - Medium complexity, realistic style\n// Total length ~120mm, printable in one piece with no supports\n\n// Main parameters\nbowl_length = 40;\nbowl_width = 30;\nbowl_depth = 6;\nhandle_length = 80;\nhandle_width = 12;\nhandle_thickness = 3;\nwall_thickness = 2;\n\n// Bowl shape\nmodule spoon_bowl() {\n    difference() {\n        // Main bowl ellipsoid\n        scale([1, 0.8, 0.4])\n        sphere(d = bowl_width);\n        \n        // Hollow out inside\n        translate([0, 0, -bowl_depth/2])\n        scale([0.8, 0.7, 0.3])\n        sphere(d = bowl_width - wall_thickness*2);\n        \n        // Flatten bottom\n        translate([0, 0, -bowl_depth])\n        cube([bowl_width*2, bowl_width*2, bowl_depth*2], center = true);\n    }\n    \n    // Rim reinforcement\n    translate([0, 0, -bowl_depth/2])\n    rotate_extrude(angle = 360, $fn = 48)\n    translate([bowl_width/2 - wall_thickness/2, 0, 0])\n    circle(r = wall_thickness/2);\n}\n\n// Handle with ergonomic curves\nmodule spoon_handle() {\n    // Tapered handle body\n    hull() {\n        // Start at bowl\n        translate([-bowl_length/2, 0, 0])\n        scale([1, 0.8, 0.3])\n        sphere(d = handle_width);\n        \n        // End at handle tip\n        translate([-bowl_length/2 - handle_length, 0, 0])\n        scale([0.6, 0.8, 0.3])\n        sphere(d = handle_width * 0.7);\n    }\n    \n    // Top ridge for grip\n    for(i = [0:4]) {\n        translate([-bowl_length/2 - i*handle_length/4, 0, 2])\n        scale([1, 0.2, 0.1])\n        rotate([90, 0, 0])\n        cylinder(h = handle_width*0.8, d1 = handle_width*0.3, d2 = handle_width*0.2);\n    }\n    \n    // Side indentations\n    difference() {\n        children();\n        for(side = [-1, 1]) {\n            translate([-bowl_length/2 - handle_length/2, side*handle_width/3, 0])\n            rotate([0, 0, 30*side])\n            scale([0.8, 0.3, 1])\n            cylinder(h = handle_length/2, d = handle_width/2);\n        }\n    }\n}\n\n// Smooth transition between bowl and handle\nmodule spoon_neck() {\n    hull() {\n        // Connect to bowl back\n        translate([bowl_length/2 - 5, 0, 0])\n        sphere(d = handle_width);\n        \n        // Connect to handle\n        translate([-bowl_length/2 + 5, 0, 0])\n        sphere(d = handle_width);\n    }\n}\n\n// Assemble complete spoon\nunion() {\n    // Position bowl correctly\n    translate([bowl_length/2, 0, bowl_depth/2])\n    rotate([0, -20, 0])\n    spoon_bowl();\n    \n    // Handle with neck transition\n    spoon_handle() {\n        union() {\n            spoon_neck();\n            translate([-handle_length/2, 0, 0])\n            scale([handle_length/50, 1, handle_thickness/3])\n            cube([handle_length, handle_width, handle_thickness], center = true);\n        }\n    }\n}\n\n// Small decorative hole in handle end\ntranslate([-bowl_length/2 - handle_length + 5, 0, 0])\nrotate([90, 0, 0])\ncylinder(h = handle_thickness*2, d = 3, $fn = 16);",
    "renders": true
  },
  {
    "household_item": "saladfork",
    "openscad_code": "// Salad fork - realistic style, medium complexity\n\n// Overall dimensions (mm)\nfork_length = 160;\nfork_width = 32;\nfork_thickness = 4;\n\n// Handle parameters\nhandle_length = 100;\nhandle_width = 16;\nhandle_thickness = 4;\n\n// Fork head parameters\nhead_length = 60;\ntine_length = 45;\ntine_width = 3.5;\ntine_gap = 2.5;\ntine_count = 4;\ntine_tip_radius = 1.5;\n\n// Transition curve radius\ntransition_radius = 8;\n\n// Wall thickness for printing\nwall = 2;\n\nmodule handle() {\n    // Main handle shaft with ergonomic oval cross-section\n    linear_extrude(height=handle_length, center=true, scale=[1.05,1], $fn=30)\n        difference() {\n            circle(d=handle_width, $fn=30);\n            circle(d=handle_width-wall*2, $fn=30);\n        }\n    \n    // Tapered end cap\n    translate([0,0,handle_length/2-2])\n        cylinder(h=4, d1=handle_width, d2=handle_width*0.7, $fn=30);\n}\n\nmodule transition() {\n    // Smooth curved transition from handle to fork head\n    hull() {\n        // Handle side\n        translate([0,0,-transition_radius])\n            cylinder(h=transition_radius*2, d=handle_width, center=true, $fn=30);\n        \n        // Fork head side  \n        translate([0,0,transition_radius])\n            cylinder(h=transition_radius*2, d=fork_width*0.8, center=true, $fn=30);\n    }\n}\n\nmodule fork_head() {\n    // Main fork head body\n    difference() {\n        // Outer shape - slightly tapered\n        translate([0,0,head_length/2])\n            cylinder(h=head_length, d1=fork_width, d2=fork_width*0.9, $fn=30);\n            \n        // Hollow interior for material saving\n        translate([0,0,head_length/2])\n            cylinder(h=head_length, d1=fork_width-wall*2, d2=fork_width*0.9-wall*2, $fn=30);\n    }\n    \n    // Tines\n    total_tine_width = tine_count*tine_width + (tine_count-1)*tine_gap;\n    start_offset = -(total_tine_width/2) + tine_width/2;\n    \n    for(i=[0:tine_count-1]) {\n        x_pos = start_offset + i*(tine_width + tine_gap);\n        \n        // Individual tine\n        translate([x_pos, 0, head_length - tine_length/2])\n            difference() {\n                // Tine body - tapered to point\n                cylinder(h=tine_length, d1=tine_width, d2=tine_tip_radius*2, $fn=8);\n                \n                // Hollow interior\n                cylinder(h=tine_length, d1=tine_width-wall*2, d2=tine_tip_radius*2-0.5, $fn=8);\n            }\n    }\n    \n    // Reinforcement ribs between tines\n    for(i=[0:tine_count-2]) {\n        rib_x = start_offset + (i+0.5)*(tine_width + tine_gap);\n        translate([rib_x, 0, head_length - tine_length*0.7])\n            cube([tine_gap-wall, wall, tine_length*0.4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle section\n    translate([0,0,-fork_length/2 + handle_length/2])\n        handle();\n    \n    // Transition section\n    translate([0,0,-fork_length/2 + handle_length - transition_radius])\n        transition();\n    \n    // Fork head section\n    translate([0,0,-fork_length/2 + handle_length])\n        fork_head();\n}",
    "renders": true
  },
  {
    "household_item": "dinnerfork",
    "openscad_code": "// Realistic Dinner Fork - Medium Complexity\n// Overall length ~190mm, width ~25mm at widest point\n\n// Fork parameters\nfork_length = 190;\nhandle_length = 100;\ntine_length = 85;\ntine_width = 2.5;\ntine_thickness = 1.5;\nnum_tines = 4;\ntine_spacing = 6;\nhandle_width = 12;\nhandle_thickness = 8;\nneck_width = 6;\nneck_length = 5;\n\n// Helper module for rounded handle\nmodule rounded_cube(size, radius) {\n    x = size.x;\n    y = size.y;\n    z = size.z;\n    \n    hull() {\n        translate([radius, radius, radius]) sphere(r=radius);\n        translate([x-radius, radius, radius]) sphere(r=radius);\n        translate([radius, y-radius, radius]) sphere(r=radius);\n        translate([x-radius, y-radius, radius]) sphere(r=radius);\n        translate([radius, radius, z-radius]) sphere(r=radius);\n        translate([x-radius, radius, z-radius]) sphere(r=radius);\n        translate([radius, y-radius, z-radius]) sphere(r=radius);\n        translate([x-radius, y-radius, z-radius]) sphere(r=radius);\n    }\n}\n\n// Handle with ergonomic curve\nmodule handle() {\n    // Main handle body\n    difference() {\n        hull() {\n            rounded_cube([handle_length, handle_width, handle_thickness], 4);\n            translate([handle_length-20, 0, 0]) \n                scale([1, 0.8, 0.9]) \n                    rounded_cube([20, handle_width, handle_thickness], 3);\n        }\n        \n        // Grooves for grip\n        for(i = [1:3]) {\n            translate([handle_length*0.3 + i*20, -0.1, handle_thickness*0.4])\n                cube([3, handle_width+0.2, 1.5], center=true);\n        }\n    }\n    \n    // End cap curve\n    translate([handle_length, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=handle_width, r1=handle_thickness/2, r2=handle_thickness/2-1, center=true);\n}\n\n// Neck transition between handle and tines\nmodule neck() {\n    hull() {\n        translate([0, 0, 0])\n            rounded_cube([neck_length, neck_width, tine_thickness*2], 2);\n        translate([neck_length, 0, 0])\n            rounded_cube([neck_length/2, tine_spacing*(num_tines-1)+tine_width, tine_thickness*2], 2);\n    }\n}\n\n// Individual tine with realistic taper\nmodule single_tine(length, width, thickness, taper_ratio=0.6) {\n    // Tapered body\n    hull() {\n        translate([0, 0, 0])\n            cube([length*0.8, width, thickness], center=true);\n        translate([length, 0, 0])\n            cube([length*0.2, width*taper_ratio, thickness*taper_ratio], center=true);\n    }\n    \n    // Rounded tip\n    translate([length, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=width*taper_ratio, r=thickness*taper_ratio/2, center=true);\n    \n    // Beveled edges on tip\n    difference() {\n        translate([length-2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=4, r=width/2, center=true);\n        translate([length+1, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=6, r=width/2-0.5, center=true);\n    }\n}\n\n// Fork head with tines\nmodule fork_head() {\n    total_width = tine_spacing * (num_tines - 1) + tine_width;\n    \n    union() {\n        // Base plate\n        translate([-neck_length/2, 0, 0])\n            rounded_cube([neck_length*1.5, total_width, tine_thickness*2], 2);\n        \n        // Tines\n        for(i = [0:num_tines-1]) {\n            y_pos = -total_width/2 + tine_width/2 + i * tine_spacing;\n            translate([neck_length/2, y_pos, 0])\n                single_tine(tine_length, tine_width, tine_thickness);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Handle\n    translate([-handle_length, 0, 0])\n        handle();\n    \n    // Neck\n    translate([0, 0, 0])\n        neck();\n    \n    // Fork head\n    translate([neck_length, 0, 0])\n        fork_head();\n}",
    "renders": true
  },
  {
    "household_item": "steakknife",
    "openscad_code": "// Steak Knife - Medium complexity realistic style\n// Overall length ~95 mm, 3D printable with no overhangs\n\n// Parameters\nblade_length = 65;\nblade_width = 18;\nblade_thickness = 1.5;\nhandle_length = 30;\nhandle_width = 14;\nhandle_thickness = 9;\nbolster_width = 20;\nbolster_thickness = 2.5;\n\n// Main assembly\nunion() {\n    // Knife blade\n    translate([0, 0, -blade_thickness/2]) {\n        difference() {\n            // Blade main body\n            linear_extrude(height = blade_thickness, convexity = 10) {\n                polygon(points=[\n                    [0, 0],\n                    [blade_length*0.9, 0],\n                    [blade_length, blade_width*0.4],\n                    [blade_length*0.95, blade_width*0.7],\n                    [blade_length*0.85, blade_width],\n                    [0, blade_width*0.8],\n                    [0, 0]\n                ]);\n            }\n            \n            // Blade bevels\n            for(i = [1:3]) {\n                translate([blade_length*0.3 + i*5, 0, -1]) {\n                    cube([blade_length*0.5, blade_width*0.2, blade_thickness+2]);\n                }\n            }\n        }\n        \n        // Serrated edge\n        for(i = [0:4:blade_length-4]) {\n            translate([i, blade_width-1, -0.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=2, r1=1.5, r2=0.5, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Bolster\n    translate([-bolster_thickness, (blade_width-bolster_width)/2, -bolster_thickness/2]) {\n        cube([bolster_thickness, bolster_width, bolster_thickness]);\n    }\n    \n    // Handle\n    translate([-handle_length, 0, -handle_thickness/2]) {\n        difference() {\n            // Main handle shape\n            hull() {\n                // Front of handle\n                translate([0, blade_width/2, 0]) {\n                    sphere(d=handle_width*1.2, $fn=16);\n                }\n                // Rear of handle\n                translate([-handle_length+handle_width/2, handle_width/2, 0]) {\n                    sphere(d=handle_width*0.9, $fn=16);\n                }\n            }\n            \n            // Handle hollow for weight reduction\n            translate([-handle_length*0.5, handle_width/2, 0]) {\n                scale([0.6, 0.6, 0.6]) {\n                    sphere(d=handle_width*0.9, $fn=16);\n                }\n            }\n        }\n        \n        // Handle grip pattern\n        for(i = [1:3]) {\n            translate([-i*handle_length/4, 0, handle_thickness/2+0.1]) {\n                cube([1, handle_width*0.8, 1]);\n            }\n        }\n    }\n    \n    // Rivets\n    for(i = [1:3]) {\n        translate([-i*handle_length/4, handle_width*0.3, handle_thickness/2+0.5]) {\n            cylinder(h=1, d=2, $fn=12);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "breadknife",
    "openscad_code": "// Breadknife - Realistic style, medium complexity\n// Approximate dimensions: 200mm long, 30mm wide, 10mm thick\n\n// Parameters\nblade_length = 180;\nblade_width = 25;\nblade_thickness = 1.5;\nhandle_length = 70;\nhandle_width = 28;\nhandle_thickness = 20;\nserration_depth = 3;\nserration_width = 2.5;\nserration_count = 70;\n\n// Main assembly\nunion() {\n    // Knife blade\n    translate([handle_length, 0, 0]) \n        blade();\n    \n    // Handle\n    translate([0, 0, 0]) \n        handle();\n}\n\n// Blade module with serrated edge\nmodule blade() {\n    difference() {\n        // Main blade body - tapered shape\n        hull() {\n            // Handle end\n            translate([0, 0, blade_thickness/2]) \n                cube([10, blade_width, blade_thickness], center=true);\n            \n            // Tip end\n            translate([blade_length-10, 0, blade_thickness/2]) \n                scale([0.2, 0.8, 1]) \n                cube([20, blade_width, blade_thickness], center=true);\n        }\n        \n        // Spine chamfer\n        translate([-5, 0, blade_thickness/2+0.1]) \n            cube([blade_length+10, blade_width+2, blade_thickness/2], center=true);\n        \n        // Serrations on bottom edge\n        for(i = [0:serration_count-1]) {\n            translate([i * serration_width, -blade_width/2-0.1, -blade_thickness/2-0.1]) \n                rotate([0, 0, 45]) \n                cube([serration_width*1.2, serration_depth+0.2, blade_thickness+0.2]);\n            \n            translate([i * serration_width + serration_width/2, -blade_width/2-0.1, -blade_thickness/2-0.1]) \n                rotate([0, 0, -45]) \n                cube([serration_width*1.2, serration_depth+0.2, blade_thickness+0.2]);\n        }\n    }\n}\n\n// Handle module with ergonomic grip\nmodule handle() {\n    union() {\n        // Main handle body\n        difference() {\n            // Tapered handle shape\n            hull() {\n                // Front of handle\n                translate([0, 0, handle_thickness/2]) \n                    scale([1, 0.9, 1]) \n                    cylinder(h=handle_thickness, d=handle_width, $fn=20, center=true);\n                \n                // Rear of handle\n                translate([handle_length, 0, handle_thickness/2]) \n                    cylinder(h=handle_thickness, d=handle_width*1.1, $fn=20, center=true);\n            }\n            \n            // Finger grooves\n            for(i = [1:3]) {\n                translate([i*handle_length/4, -handle_width/2-0.1, 0]) \n                    rotate([0, 90, 0]) \n                    cylinder(h=handle_width+0.2, d=handle_thickness*0.6, $fn=20, center=true);\n            }\n            \n            // Hanging hole\n            translate([handle_length-10, 0, handle_thickness/2]) \n                rotate([90, 0, 0]) \n                cylinder(h=handle_thickness+0.2, d=6, $fn=20, center=true);\n        }\n        \n        // Handle guard\n        translate([0, 0, handle_thickness/2]) \n            difference() {\n                cylinder(h=handle_thickness+2, d=handle_width*1.2, $fn=20, center=true);\n                cylinder(h=handle_thickness+3, d=handle_width*0.8, $fn=20, center=true);\n            }\n        \n        // Grip texture - raised dots\n        for(x = [10:15:handle_length-15]) {\n            for(y = [-10:5:10]) {\n                translate([x, y, handle_thickness/2+0.5]) \n                    sphere(d=2.5, $fn=8);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "paringknife",
    "openscad_code": "// Paring Knife - Realistic Style, Medium Complexity\n// Overall length: 80mm (blade 45mm, handle 35mm)\n\nmodule paring_knife() {\n    // Blade\n    difference() {\n        union() {\n            // Blade spine\n            translate([0, -2, 0])\n                cube([45, 4, 1.5], center=true);\n            \n            // Blade body\n            translate([22.5, -7.5, 0])\n                cube([45, 15, 0.5], center=true);\n            \n            // Curved tip\n            translate([45, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r1=7.5, r2=0, $fn=20);\n        }\n        \n        // Bevel edge\n        translate([22.5, -11, -0.25])\n            cube([45, 10, 2], center=true);\n        \n        // Blade hollow\n        translate([22.5, 0, 0.5])\n            cube([40, 13, 0.5], center=true);\n    }\n    \n    // Bolster\n    translate([-2, 0, 0])\n        cylinder(h=4, r=5, $fn=32);\n    \n    // Handle\n    difference() {\n        union() {\n            // Handle main body\n            translate([-22, 0, 0])\n                scale([1, 0.8, 0.8])\n                    sphere(r=6, $fn=32);\n            \n            // Handle grip texture rings\n            for(i=[-15:-5:5]) {\n                translate([i, 0, 0])\n                    cylinder(h=2, r1=5.8, r2=5.8, $fn=32);\n            }\n        }\n        \n        // Handle hollow\n        translate([-22, 0, 0])\n            scale([0.8, 0.6, 0.6])\n                sphere(r=6, $fn=32);\n        \n        // Rivets holes\n        translate([-15, 0, 0])\n            cylinder(h=6, r=1, $fn=16);\n        translate([-10, 0, 0])\n            cylinder(h=6, r=1, $fn=16);\n        translate([-5, 0, 0])\n            cylinder(h=6, r=1, $fn=16);\n    }\n    \n    // Rivets\n    translate([-15, 0, 3])\n        cylinder(h=1, r=1.2, $fn=16);\n    translate([-10, 0, 3])\n        cylinder(h=1, r=1.2, $fn=16);\n    translate([-5, 0, 3])\n        cylinder(h=1, r=1.2, $fn=16);\n}\n\n// Render the knife\nparing_knife();",
    "renders": true
  },
  {
    "household_item": "chefsknife",
    "openscad_code": "// Chef's Knife - Realistic Medium Complexity\n// 3D printable model with proper wall thickness\n// Total length ~85mm (3.3 inches)\n\n$fn = 50; // Smooth curves\n\n// Overall dimensions\nblade_length = 70;\nblade_width = 25;\nblade_thickness = 2;\nhandle_length = 70;\nhandle_diameter = 20;\n\nmodule knife() {\n    union() {\n        // Main blade\n        translate([0, 0, blade_thickness/2])\n            blade();\n        \n        // Handle\n        translate([-handle_length/2, 0, handle_diameter/2])\n            rotate([0, 90, 0])\n                handle();\n    }\n}\n\nmodule blade() {\n    difference() {\n        // Blade body\n        union() {\n            // Main blade shape\n            translate([blade_length/2, 0, 0])\n                scale([blade_length, blade_width, blade_thickness])\n                    sphere(0.5);\n            \n            // Tapered tip\n            translate([blade_length-5, 0, 0])\n                scale([10, blade_width*0.7, blade_thickness])\n                    rotate([0, 0, 90])\n                        cylinder(h=10, r1=5, r2=0);\n        }\n        \n        // Blade bevel (cutting edge)\n        translate([blade_length/2, -blade_width/2-1, -blade_thickness/2-1])\n            cube([blade_length+2, blade_width/2, blade_thickness+2]);\n        \n        // Spine taper\n        translate([0, blade_width/2-2, blade_thickness/2])\n            rotate([0, 30, 0])\n                cube([blade_length, 4, blade_thickness]);\n    }\n    \n    // Bolster (transition from blade to handle)\n    translate([-2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=4, r1=handle_diameter/2+2, r2=handle_diameter/2);\n}\n\nmodule handle() {\n    difference() {\n        // Main handle body\n        hull() {\n            // Front grip\n            translate([0, 0, 0])\n                scale([1, 0.9, 0.9])\n                    sphere(handle_diameter/2);\n            \n            // Rear grip\n            translate([handle_length-5, 0, 0])\n                scale([0.8, 0.9, 0.9])\n                    sphere(handle_diameter/2);\n            \n            // Center section\n            translate([handle_length/2, 0, 0])\n                cylinder(h=handle_length, r=handle_diameter/2);\n        }\n        \n        // Handle grip grooves\n        for(i = [1:6]) {\n            translate([i*10-5, 0, handle_diameter/2-2])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_diameter-4, r=2, $fn=6);\n        }\n        \n        // Finger guard groove\n        translate([5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_diameter, r=handle_diameter/2-3);\n    }\n    \n    // Rivets (3 decorative)\n    for(i = [0:2]) {\n        translate([i*20+15, 0, handle_diameter/2-1])\n            cylinder(h=2, r=3);\n    }\n}\n\n// Generate the knife\nknife();",
    "renders": true
  },
  {
    "household_item": "cleaver",
    "openscad_code": "// Realistic Cleaver - Medium Complexity\n// Overall size ~80mm long\n\n$fn = 32;\n\n// Main module\nmodule cleaver() {\n    // Blade\n    union() {\n        // Blade body\n        translate([0, 0, 2])\n        difference() {\n            // Main blade shape\n            translate([0, 0, 0])\n            scale([1, 0.6, 0.1])\n            cube([60, 40, 20], center=true);\n            \n            // Cutting edge bevel\n            translate([30, 0, -1])\n            rotate([0, 15, 0])\n            cube([10, 50, 5], center=true);\n        }\n        \n        // Blade spine\n        translate([-25, 0, 3.5])\n        scale([0.1, 0.5, 0.8])\n        cube([50, 40, 5], center=true);\n        \n        // Hole in blade\n        translate([-20, 15, 3])\n        rotate([90, 0, 0])\n        cylinder(h=10, r=3, center=true);\n    }\n    \n    // Handle\n    union() {\n        // Handle grip\n        translate([-35, 0, 0])\n        difference() {\n            // Main handle\n            scale([0.4, 0.3, 1])\n            cube([30, 30, 15], center=true);\n            \n            // Grip grooves\n            for(i = [-2:1:2]) {\n                translate([-35 + i*5, 0, 0])\n                scale([0.1, 0.31, 1.1])\n                cube([30, 30, 15], center=true);\n            }\n        }\n        \n        // Handle bolster\n        translate([-20, 0, 0])\n        difference() {\n            cylinder(h=8, r1=8, r2=6);\n            cylinder(h=10, r1=4, r2=2);\n        }\n        \n        // Handle end cap\n        translate([-50, 0, 0])\n        cylinder(h=5, r1=6, r2=8);\n        \n        // Rivets\n        for(i = [-1, 1]) {\n            translate([-35, i*7, 0])\n            cylinder(h=15, r=2, center=true);\n        }\n    }\n}\n\n// Scale to reasonable size\nscale(0.8)\nrotate([0, 0, 45])\ncleaver();",
    "renders": true
  },
  {
    "household_item": "coaster",
    "openscad_code": "// Realistic 3D printable coaster – cork-like base with subtle grip rings\n// Overall footprint: Ø90 mm × 4 mm thick\n\n// Parameters\ncoaster_d = 90;          // [mm] overall diameter\ncoaster_h = 4;           // [mm] total height\nwall_t    = 1.6;         // [mm] shell thickness for printing\ngrip_ridges = 6;         // number of concentric grip rings\nridge_h = 0.4;           // [mm] height of grip ridges\n\n// ---------- Base disc (hollow to save material) ----------\nmodule base_disc() {\n    difference() {\n        cylinder(d=coaster_d, h=coaster_h, $fn=100);          // solid disc\n        cylinder(d=coaster_d - 2*wall_t, h=coaster_h+0.1, $fn=100);  // hollow core\n    }\n}\n\n// ---------- Concentric grip rings on top ----------\nmodule grip_rings() {\n    for (r = [1 : grip_ridges]) {\n        ring_d = coaster_d - (r * 11);  // evenly spaced rings\n        difference() {\n            cylinder(d=ring_d + 1, h=ridge_h, $fn=100);       // ridge body\n            cylinder(d=ring_d, h=ridge_h+0.1, $fn=100);       // remove center to leave ring\n        }\n    }\n}\n\n// ---------- Small drainage hole in center ----------\nmodule center_hole() {\n    translate([0, 0, -0.1])\n        cylinder(d=4, h=coaster_h+0.2, $fn=32);\n}\n\n// ---------- Assembly ----------\nunion() {\n    base_disc();\n    grip_rings();\n    center_hole();\n}",
    "renders": true
  },
  {
    "household_item": "tablecloth",
    "openscad_code": "// Tablecloth 3D Model - Realistic Medium Complexity\n// Dimensions: 90mm x 55mm x 2mm with realistic fabric texture\n\n// Parameters\ntable_length = 90;\ntable_width = 55;\ncloth_thickness = 2;\nhem_thickness = 3;\nfold_depth = 1.5;\nwave_amplitude = 3;\nwave_frequency = 6;\ncorner_radius = 8;\n\n// Main tablecloth module\nmodule tablecloth() {\n    // Base cloth body\n    difference() {\n        // Main cloth with rounded corners\n        rounded_cube(table_length, table_width, cloth_thickness, corner_radius);\n        \n        // Create fabric texture pattern on top\n        fabric_texture();\n    }\n    \n    // Hem around edges\n    hem();\n    \n    // Natural folds and drapes\n    folds();\n    \n    // Corner weights\n    corner_weights();\n}\n\n// Rounded cube helper\nmodule rounded_cube(l, w, h, r) {\n    hull() {\n        for (i = [[r, r, 0], [l-r, r, 0], [l-r, w-r, 0], [r, w-r, 0]]) {\n            translate([i[0], i[1], h/2])\n                cylinder(h=h, r=r, $fn=20);\n        }\n    }\n}\n\n// Fabric texture pattern\nmodule fabric_texture() {\n    // Weave pattern holes\n    for (x = [5:10:table_length-5]) {\n        for (y = [5:10:table_width-5]) {\n            translate([x, y, -0.5])\n                cube([2, 2, cloth_thickness+1], center=true);\n        }\n    }\n    \n    // Subtle wave texture\n    for (x = [0:wave_frequency:table_length]) {\n        for (y = [0:wave_frequency:table_width]) {\n            translate([x, y, -0.1])\n                cylinder(h=cloth_thickness+0.2, r1=1, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Hem around edges\nmodule hem() {\n    // Bottom hem\n    translate([0, 0, -hem_thickness/2])\n        difference() {\n            rounded_cube(table_length+4, table_width+4, hem_thickness, corner_radius+2);\n            rounded_cube(table_length, table_width, hem_thickness+0.1, corner_radius);\n        }\n}\n\n// Natural folds\nmodule folds() {\n    // Long side folds\n    for (x = [15:15:table_length-15]) {\n        difference() {\n            translate([x, table_width/2, cloth_thickness/2 - fold_depth/2])\n                cube([2, table_width-10, fold_depth]);\n            translate([x, table_width/2, cloth_thickness/2])\n                cylinder(h=fold_depth+0.1, r=table_width/2-5, $fn=32);\n        }\n    }\n    \n    // Short side folds\n    for (y = [10:10:table_width-10]) {\n        difference() {\n            translate([table_length/2, y, cloth_thickness/2 - fold_depth/2])\n                cube([table_length-10, 2, fold_depth]);\n            translate([table_length/2, y, cloth_thickness/2])\n                cylinder(h=fold_depth+0.1, r=table_length/2-5, $fn=32);\n        }\n    }\n}\n\n// Corner weights for realistic drape\nmodule corner_weights() {\n    corners = [[0,0], [table_length,0], [table_length,table_width], [0,table_width]];\n    \n    for (i = [0:3]) {\n        translate([corners[i][0], corners[i][1], -hem_thickness-1])\n            cylinder(h=2, r=5, $fn=16);\n    }\n}\n\n// Render the tablecloth\ntablecloth();",
    "renders": true
  },
  {
    "household_item": "napkinring",
    "openscad_code": "// Realistic Medium-Complexity Napkin Ring\n// Dimensions in millimeters\n$fn = 48;  // Smooth curves\n\n// Overall size\nring_outer_d = 42;\nring_inner_d = 28;\nring_height = 35;\nwall_thickness = (ring_outer_d - ring_inner_d) / 2;\n\n// Decorative band parameters\nband_height = 6;\nband_gap = 2;\nband_ridges = 12;\nridge_width = 1.5;\nridge_depth = 0.8;\n\nmodule ring_body() {\n    difference() {\n        cylinder(h = ring_height, d = ring_outer_d, center = true);\n        cylinder(h = ring_height + 2, d = ring_inner_d, center = true);\n    }\n}\n\nmodule decorative_band() {\n    for (i = [0 : band_ridges - 1]) {\n        rotate([0, 0, i * 360 / band_ridges])\n        translate([0, (ring_outer_d + ring_inner_d) / 4, 0])\n        cube([ridge_width, (ring_outer_d - ring_inner_d) / 2, band_height], center = true);\n    }\n}\n\nmodule top_band() {\n    translate([0, 0, ring_height/2 - band_height/2])\n    difference() {\n        cylinder(h = band_height, d = ring_outer_d, center = true);\n        cylinder(h = band_height + 0.1, d = ring_inner_d, center = true);\n    }\n}\n\nmodule bottom_band() {\n    translate([0, 0, -ring_height/2 + band_height/2])\n    difference() {\n        cylinder(h = band_height, d = ring_outer_d, center = true);\n        cylinder(h = band_height + 0.1, d = ring_inner_d, center = true);\n    }\n}\n\nmodule center_pattern() {\n    difference() {\n        ring_body();\n        \n        // Remove areas for raised pattern\n        intersection() {\n            cylinder(h = ring_height - 2*band_height - 2*band_gap, d = ring_outer_d - 2*ridge_depth, center = true);\n            \n            // Create oval cutouts for grip\n            for (i = [0 : 5]) {\n                rotate([0, 0, i * 60])\n                translate([(ring_outer_d + ring_inner_d)/4, 0, 0])\n                scale([1.5, 0.8, 1])\n                cylinder(h = ring_height - 2*band_height - 2*band_gap + 1, d = 6, center = true);\n            }\n        }\n    }\n}\n\n// Build the napkin ring\nunion() {\n    ring_body();\n    \n    // Top decorative band with ridges\n    intersection() {\n        top_band();\n        decorative_band();\n    }\n    \n    // Bottom decorative band with ridges\n    intersection() {\n        bottom_band();\n        decorative_band();\n    }\n    \n    // Center patterned section\n    center_pattern();\n}",
    "renders": true
  },
  {
    "household_item": "saltshaker",
    "openscad_code": "// Realistic Saltshaker – Medium Complexity\n// 3D-printable, ~70 mm tall, 2 mm wall thickness\n\n$fn = 36;          // Smooth curves\nwall = 2;          // Wall thickness for printability\n\n// Overall dimensions\nheight = 70;\nbody_r = 24;\ncap_r  = 25.5;     // Slightly larger to slide over body\ncap_h  = 25;\n\nmodule saltshaker() {\n    union() {\n        body();\n        cap();\n    }\n}\n\n// Main glass-like body\nmodule body() {\n    difference() {\n        // Outer profile (revolved)\n        rotate_extrude()\n            polygon([\n                [0, 0],\n                [body_r, 0],\n                [body_r - 3, height * 0.85],\n                [body_r - 5, height],\n                [0, height]\n            ]);\n        // Inner cavity\n        translate([0, 0, wall])\n            rotate_extrude()\n                polygon([\n                    [0, 0],\n                    [body_r - wall, 0],\n                    [body_r - wall - 2, height * 0.85 - wall],\n                    [body_r - wall - 3, height - wall - 2],\n                    [0, height - wall - 2]\n                ]);\n    }\n}\n\n// Snap-fit cap with holes\nmodule cap() {\n    translate([0, 0, height])\n    difference() {\n        // Outer cap shell\n        union() {\n            cylinder(h = cap_h, r1 = cap_r, r2 = cap_r);\n            // Rounded top\n            translate([0, 0, cap_h])\n                sphere(d = cap_r * 2);\n        }\n        // Inner cavity\n        translate([0, 0, wall])\n            cylinder(h = cap_h + wall, r1 = body_r, r2 = body_r);\n        \n        // Shaker holes pattern\n        hole_pattern();\n        \n        // Small lip for snap fit\n        translate([0, 0, cap_h - 4])\n            cylinder(h = 4 + wall, r1 = body_r + 0.2, r2 = body_r + 0.2);\n    }\n}\n\n// Hexagonal hole pattern\nmodule hole_pattern() {\n    // Central hole on top\n    translate([0, 0, cap_h + cap_r])\n        sphere($fn = 6, r = 1.5);\n    \n    // Circular array of 6 holes\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([cap_r * 0.5, 0, cap_h + cap_r])\n                sphere($fn = 6, r = 1.5);\n    }\n}\n\n// Render\nsaltshaker();",
    "renders": true
  },
  {
    "household_item": "peppermill",
    "openscad_code": "$fs = 0.4;\n$fa = 2;\n\n// Overall dimensions\nbody_h = 85;\nbody_d = 45;\nbase_h = 20;\ncap_h = 25;\nknob_d = 25;\n\nmodule peppermill() {\n    // Main body cylinder with slight taper\n    difference() {\n        cylinder(h=body_h, d1=body_d*0.9, d2=body_d, center=false);\n        // Central bore for peppercorns\n        translate([0,0,-1])\n            cylinder(h=body_h+2, d=body_d*0.7, center=false);\n    }\n\n    // Bottom base with small lip\n    translate([0,0,0])\n        difference() {\n            cylinder(h=base_h, d=body_d*1.1, center=false);\n            translate([0,0,base_h-2])\n                cylinder(h=2, d=body_d, center=false);\n            // Center hole continues\n            translate([0,0,-1])\n                cylinder(h=base_h+2, d=body_d*0.7, center=false);\n        }\n\n    // Top grinding mechanism housing\n    translate([0,0,body_h])\n        difference() {\n            cylinder(h=10, d=body_d*0.95, center=false);\n            translate([0,0,-1])\n                cylinder(h=12, d=body_d*0.7, center=false);\n        }\n\n    // Rotating top cap/knob\n    translate([0,0,body_h+10])\n        difference() {\n            cylinder(h=cap_h, d=knob_d, center=false);\n            // Inner shaft\n            translate([0,0,-1])\n                cylinder(h=cap_h+2, d=knob_d*0.3, center=false);\n            // Knurling on top\n            for (i=[0:30:359]) {\n                rotate([0,0,i])\n                    translate([knob_d*0.35, 0, cap_h-8])\n                        cube([knob_d*0.1, 2, 6], center=true);\n            }\n        }\n\n    // Adjustment ring below cap\n    translate([0,0,body_h+8])\n        difference() {\n            cylinder(h=6, d=body_d+4, center=false);\n            translate([0,0,-1])\n                cylinder(h=8, d=body_d, center=false);\n            // Adjustment notches\n            for (i=[0:45:359]) {\n                rotate([0,0,i])\n                    translate([(body_d+4)/2, 0, 1])\n                        cube([3, 1.5, 4], center=true);\n            }\n        }\n\n    // Window slots to see pepper level\n    for (i=[0:90:269]) {\n        rotate([0,0,i])\n            translate([body_d/2-2, -4, body_h/2])\n                cube([4, 8, 20], center=true);\n    }\n\n    // Logo/text emboss\n    translate([0,0,body_h/2])\n        rotate([90,0,0])\n            linear_extrude(height=1)\n                text(\"PEPPER\", size=8, halign=\"center\", valign=\"center\");\n}\n\npeppermill();",
    "renders": true
  },
  {
    "household_item": "sugarbowl",
    "openscad_code": "// Sugarbowl - realistic style, medium complexity\n// Designed for 3D printing, approx 70mm diameter, 60mm height\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Main parameters\nbowl_d = 70;\nbowl_h = 35;\nwall_t = 2.5;\nbase_h = 5;\nlid_clearance = 0.3;\n\n// Base\ndifference() {\n    cylinder(h = base_h, d = bowl_d + 4, center = false);\n    translate([0, 0, -0.1])\n        cylinder(h = base_h + 0.2, d = bowl_d - wall_t * 2, center = false);\n}\n\n// Bowl body\ntranslate([0, 0, base_h])\ndifference() {\n    cylinder(h = bowl_h, d1 = bowl_d + 2, d2 = bowl_d - 8, center = false);\n    translate([0, 0, wall_t])\n        cylinder(h = bowl_h + 0.2, d1 = bowl_d + 2 - wall_t * 2, d2 = bowl_d - 8 - wall_t * 2, center = false);\n}\n\n// Lid base\ntranslate([0, 0, base_h + bowl_h + lid_clearance])\ndifference() {\n    cylinder(h = 8, d = bowl_d + 2, center = false);\n    translate([0, 0, -0.1])\n        cylinder(h = 8.2, d = bowl_d - 8 - wall_t * 2, center = false);\n}\n\n// Lid dome\ntranslate([0, 0, base_h + bowl_h + 8 + lid_clearance])\ndifference() {\n    sphere(d = bowl_d);\n    translate([0, 0, -bowl_d / 2 + 6])\n        sphere(d = bowl_d - wall_t * 2);\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Main grip\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 12, center = true);\n        // Grip hole\n        rotate([90, 0, 0])\n            cylinder(h = 21, d = 8, center = true);\n    }\n}\n\ntranslate([0, 0, base_h + bowl_h + 35 + lid_clearance])\nhandle();\n\n// Decorative ridge on lid\ntranslate([0, 0, base_h + bowl_h + 8 + lid_clearance])\ndifference() {\n    cylinder(h = 2, d = bowl_d + 6, center = false);\n    cylinder(h = 2.2, d = bowl_d + 2, center = false);\n}\n\n// Optional spoon rest indentations\nfor (i = [0:2]) {\n    rotate([0, 0, i * 120])\n    translate([(bowl_d - 20) / 2, 0, base_h + bowl_h - 5])\n    difference() {\n        sphere(d = 10);\n        translate([0, 0, -6])\n            cube([20, 10, 12], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "creamer",
    "openscad_code": "// Realistic creamer for coffee - medium complexity\n// Features: hollow body, handle, spout, stable base\n\n// Parameters\nwall = 1.5; // wall thickness for 3D printing (mm)\nscale_factor = 1.5; // overall scale\nbase_h = 8; // base height\nbody_h = 40; // body height\nbody_r = 20; // body radius\nneck_h = 8; // neck height\nneck_r = 15; // neck radius\nhandle_w = 8; // handle width\nhandle_h = 25; // handle height\nspout_len = 12; // spout length\nspout_w = 10; // spout width\n\n// Main creamer assembly\nmodule creamer() {\n    difference() {\n        // Exterior shape\n        union() {\n            // Stable base\n            cylinder(h=base_h, r1=body_r+5, r2=body_r+2, $fn=64);\n            \n            // Bulbous body\n            translate([0,0,base_h])\n                cylinder(h=body_h, r1=body_r+2, r2=body_r, $fn=64);\n            \n            // Tapered neck\n            translate([0,0,base_h+body_h])\n                cylinder(h=neck_h, r1=body_r, r2=neck_r, $fn=64);\n            \n            // Flared rim\n            translate([0,0,base_h+body_h+neck_h])\n                cylinder(h=3, r1=neck_r, r2=neck_r+2, $fn=64);\n            \n            // Handle\n            translate([body_r+2, -handle_w/2, base_h+body_h/3])\n                handle();\n            \n            // Spout\n            translate([0, body_r, base_h+body_h*0.7])\n                rotate([0,110,0])\n                spout();\n        }\n        \n        // Interior hollow\n        union() {\n            // Hollow base\n            translate([0,0,wall])\n                cylinder(h=base_h-wall, r1=body_r+5-wall, r2=body_r+2-wall, $fn=64);\n            \n            // Hollow body\n            translate([0,0,base_h+wall])\n                cylinder(h=body_h-wall, r1=body_r+2-wall, r2=body_r-wall, $fn=64);\n            \n            // Hollow neck\n            translate([0,0,base_h+body_h])\n                cylinder(h=neck_h-wall, r1=body_r-wall, r2=neck_r-wall, $fn=64);\n            \n            // Hollow rim\n            translate([0,0,base_h+body_h+neck_h])\n                cylinder(h=3-wall, r1=neck_r-wall, r2=neck_r+2-wall, $fn=64);\n            \n            // Handle hole\n            translate([body_r+2+wall, -handle_w/2+wall, base_h+body_h/3+wall])\n                handle_hole();\n                \n            // Spout hole\n            translate([0, body_r-wall, base_h+body_h*0.7])\n                rotate([0,110,0])\n                spout_hole();\n        }\n    }\n}\n\n// Handle module\nmodule handle() {\n    difference() {\n        // Outer handle\n        hull() {\n            translate([0,0,0])\n                sphere(r=handle_w/2, $fn=32);\n            translate([0,0,handle_h])\n                sphere(r=handle_w/2, $fn=32);\n        }\n        \n        // Inner handle hole\n        hull() {\n            translate([wall,0,wall])\n                sphere(r=handle_w/2-wall, $fn=32);\n            translate([wall,0,handle_h-wall])\n                sphere(r=handle_w/2-wall, $fn=32);\n        }\n    }\n}\n\n// Handle hole module\nmodule handle_hole() {\n    hull() {\n        translate([0,0,0])\n            sphere(r=handle_w/2-wall, $fn=32);\n        translate([0,0,handle_h-2*wall])\n            sphere(r=handle_w/2-wall, $fn=32);\n    }\n}\n\n// Spout module\nmodule spout() {\n    hull() {\n        // Base of spout\n        translate([0,0,0])\n            sphere(r=spout_w/2, $fn=32);\n        // Tip of spout\n        translate([spout_len,0,0])\n            sphere(r=spout_w/4, $fn=32);\n    }\n}\n\n// Spout hole module\nmodule spout_hole() {\n    hull() {\n        translate([0,0,0])\n            sphere(r=spout_w/2-wall, $fn=32);\n        translate([spout_len-wall,0,0])\n            sphere(r=spout_w/4-wall, $fn=32);\n    }\n}\n\n// Render the creamer at origin\nscale([scale_factor,scale_factor,scale_factor])\n    creamer();",
    "renders": true
  },
  {
    "household_item": "teapot",
    "openscad_code": "// Realistic teapot - medium complexity\n// Overall height ~70mm, printable without supports\n\n$fn=32;\nwall=1.5;\n\nmodule teapot() {\n    // Main body - slightly tapered sphere\n    difference() {\n        scale([1, 1, 0.85]) sphere(d=50);\n        // Hollow out interior\n        translate([0,0,-2]) scale([1,1,0.8]) sphere(d=50-2*wall);\n    }\n    \n    // Spout\n    translate([24,0,10]) rotate([0,-20,0]) {\n        // Spout base\n        cylinder(h=8, d1=12, d2=10);\n        translate([0,0,8]) rotate([0,-15,0]) {\n            cylinder(h=25, d1=10, d2=6);\n            // Spout tip\n            translate([0,0,25]) sphere(d=6+wall);\n            // Hollow spout\n            translate([0,0,-1]) rotate([0,15,0]) \n                cylinder(h=35, d1=10-2*wall, d2=6-2*wall);\n        }\n    }\n    \n    // Handle\n    translate([-25,0,15]) rotate([0,15,0]) {\n        difference() {\n            // Handle outer\n            rotate_extrude(angle=70, $fn=32) \n                translate([20,0,0]) circle(d=8);\n            // Handle inner\n            rotate_extrude(angle=70, $fn=32) \n                translate([20,0,0]) circle(d=8-2*wall);\n        }\n    }\n    \n    // Lid\n    translate([0,0,42]) {\n        // Lid top\n        difference() {\n            cylinder(h=8, d=45+wall);\n            cylinder(h=9, d=45-wall);\n        }\n        // Lid knob\n        translate([0,0,8]) cylinder(h=8, d1=12, d2=8);\n        // Lid rim\n        difference() {\n            cylinder(h=4, d=45+wall);\n            cylinder(h=5, d=45-wall);\n        }\n    }\n}\n\nteapot();",
    "renders": true
  },
  {
    "household_item": "coffeepot",
    "openscad_code": "// Realistic 3D-printable coffeepot – medium complexity\n// Overall height ~95 mm, safe wall thickness 1.5 mm\n\n$fn = 64;\n\n// Main body shell\nmodule pot_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = 65, d1 = 58, d2 = 52, center = false);\n        // Inner hollow\n        translate([0, 0, -0.01])\n            cylinder(h = 65.5, d1 = 58 - 3, d2 = 52 - 3, center = false);\n    }\n}\n\n// Bottom base – slightly wider for stability\nmodule base() {\n    difference() {\n        cylinder(h = 8, d = 62, center = false);\n        translate([0, 0, -0.01])\n            cylinder(h = 8.5, d = 56, center = false);\n    }\n}\n\n// Curved pouring spout\nmodule spout() {\n    hull() {\n        translate([28, 0, 55]) rotate([0, 90, 0]) cylinder(h = 22, d = 8);\n        translate([28, 0, 35]) rotate([0, 90, 0]) cylinder(h = 22, d = 12);\n    }\n    // Hollow inside spout\n    difference() {\n        children();\n        translate([28, 0, 55]) rotate([0, 90, 0]) cylinder(h = 23, d = 5);\n        translate([28, 0, 35]) rotate([0, 90, 0]) cylinder(h = 23, d = 9);\n    }\n}\n\n// Handle grip with two posts\nmodule handle() {\n    // Left post\n    post(-27);\n    // Right post\n    post(27);\n    // Grip bar\n    translate([0, -27, 50]) cube([54, 6, 4], center = true);\n}\n\nmodule post(side) {\n    translate([side, -27, 50]) rotate([90, 0, 0]) cylinder(h = 15, d = 6);\n}\n\n// Lid with knob\nmodule lid() {\n    difference() {\n        cylinder(h = 4, d = 54, center = false);\n        translate([0, 0, -0.01])\n            cylinder(h = 4.5, d = 51, center = false);\n    }\n    // Knob\n    translate([0, 0, 4]) cylinder(h = 8, d1 = 12, d2 = 8);\n}\n\n// Assemble complete pot\ntranslate([0, 0, 8]) pot_body();\nbase();\ntranslate([0, 0, 8]) spout();\nhandle();\ntranslate([0, 0, 65 + 1.5]) lid();",
    "renders": true
  },
  {
    "household_item": "percolator",
    "openscad_code": "// Percolator Coffee Maker - Medium Complexity Realistic Style\n// Size: ~70mm height\n\n$fn = 36;  // Smooth curves\n\n// Main body dimensions\nbody_height = 45;\nbody_radius = 20;\nwall_thickness = 2;\n\n// Top lid\nmodule lid() {\n    translate([0, 0, body_height + 5]) {\n        // Main lid dome\n        difference() {\n            cylinder(h=8, r=body_radius, center=false);\n            translate([0, 0, 5])\n                cylinder(h=10, r=body_radius - wall_thickness*2, center=false);\n        }\n        \n        // Handle knob\n        translate([0, 0, 10])\n            cylinder(h=5, r=wall_thickness*2);\n    }\n}\n\n// Main percolator body\nmodule body() {\n    difference() {\n        // Outer body\n        cylinder(h=body_height, r=body_radius);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=body_height - wall_thickness, r=body_radius - wall_thickness);\n    }\n    \n    // Spout\n    translate([body_radius - 1, 0, body_height * 0.6]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=15, r=4);\n                translate([0, 0, -1])\n                    cylinder(h=17, r=2);\n            }\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    // Handle base\n    translate([body_radius - wall_thickness, 0, body_height * 0.3]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=20, r=4);\n                translate([0, 0, -1])\n                    cylinder(h=22, r=2.5);\n            }\n        }\n    }\n    \n    // Handle grip\n    translate([body_radius + 15, 0, body_height * 0.3 + 10]) {\n        rotate([0, 0, 90])\n            difference() {\n                cube([25, 8, 8], center=true);\n                cube([27, 6, 6], center=true);\n            }\n    }\n}\n\n// Base with feet\nmodule base() {\n    // Bottom plate\n    translate([0, 0, -5]) {\n        difference() {\n            cylinder(h=5, r=body_radius + 2);\n            cylinder(h=6, r=body_radius - wall_thickness);\n        }\n        \n        // Feet (3 legs)\n        for(i=[0:120:360-1]) {\n            rotate([0, 0, i])\n                translate([body_radius, 0, -3])\n                    cube([5, 8, 3], center=true);\n        }\n    }\n}\n\n// Internal percolator tube\nmodule percolator_tube() {\n    translate([0, 0, -3]) {\n        difference() {\n            cylinder(h=body_height - 5, r=3);\n            cylinder(h=body_height - 3, r=2.5);\n        }\n        \n        // Spreader on top\n        translate([0, 0, body_height - 5]) {\n            difference() {\n                cylinder(h=3, r=8);\n                cylinder(h=4, r=7.5);\n            }\n            \n            // Holes for coffee distribution\n            for(i=[0:45:360-1]) {\n                rotate([0, 0, i])\n                    translate([6, 0, 1.5])\n                        cylinder(h=3, r=0.5);\n            }\n        }\n    }\n}\n\n// Coffee basket\nmodule basket() {\n    translate([0, 0, 5]) {\n        difference() {\n            cylinder(h=15, r=body_radius - 8);\n            cylinder(h=16, r=body_radius - 10);\n        }\n        \n        // Basket holes\n        for(h=[2.5:2:12.5]) {\n            for(i=[0:30:360-1]) {\n                rotate([0, 0, i])\n                    translate([body_radius - 9, 0, h])\n                        cylinder(h=2, r=0.8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    lid();\n    handle();\n    \n    // Internal parts (for display, remove for printing)\n    // percolator_tube();\n    // basket();\n}",
    "renders": true
  },
  {
    "household_item": "espresso",
    "openscad_code": "// Realistic Espresso Cup with Crema\n// Dimensions in mm\n\n// Cup body\nmodule cup_body() {\n    difference() {\n        // Outer cup\n        cylinder(h=45, d1=50, d2=40, $fn=100);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=43, d1=46, d2=36, $fn=100);\n        \n        // Bottom hole for printing\n        translate([0, 0, 42])\n            cylinder(h=5, d=30, $fn=50);\n    }\n}\n\n// Cup handle\nmodule handle() {\n    difference() {\n        // Main handle loop\n        translate([25, 0, 20])\n            rotate([90, 0, 0])\n                torus(15, 4, 50);\n        \n        // Cutout for finger space\n        translate([25, 0, 20])\n            rotate([90, 0, 0])\n                torus(10, 5, 50);\n    }\n}\n\n// Torus helper function\nmodule torus(r_major, r_minor, fn) {\n    rotate_extrude($fn=fn)\n        translate([r_major, 0, 0])\n            circle(r=r_minor, $fn=fn);\n}\n\n// Saucer\nmodule saucer() {\n    difference() {\n        // Main saucer\n        cylinder(h=5, d=80, $fn=100);\n        \n        // Cup recess\n        translate([0, 0, -1])\n            cylinder(h=4, d=52, $fn=100);\n        \n        // Bottom chamfer\n        translate([0, 0, -1])\n            cylinder(h=6, d1=80, d2=75, $fn=100);\n    }\n}\n\n// Coffee liquid\nmodule coffee() {\n    color(\"#2C1810\")\n    translate([0, 0, 42])\n        cylinder(h=2, d=36, $fn=100);\n}\n\n// Crema layer\nmodule crema() {\n    color(\"#D2B48C\")\n    translate([0, 0, 44])\n        cylinder(h=1.5, d=36, $fn=100);\n}\n\n// Steam wisps\nmodule steam_wisp(x, y, rot) {\n    translate([x, y, 45.5])\n        rotate([0, rot, 0])\n            scale([1, 1, 3])\n                sphere(0.8, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Cup parts\n    color(\"#FFFFFF\")\n    cup_body();\n    \n    color(\"#FFFFFF\")\n    handle();\n    \n    // Coffee components\n    coffee();\n    crema();\n    \n    // Steam\n    for(i = [0:3]) {\n        steam_wisp(\n            5 * sin(i * 90),\n            5 * cos(i * 90),\n            i * 30\n        );\n    }\n    \n    // Saucer (offset from cup)\n    translate([0, 0, -6])\n        color(\"#FFFFFF\")\n        saucer();\n}",
    "renders": true
  },
  {
    "household_item": "moka",
    "openscad_code": "// Parameters for 3D printing\nwall = 2;           // wall thickness 2mm\n$fn = 36;           // smoother curves\n\n// Overall scale\nscale_factor = 0.6;\nscale(scale_factor)\nunion() {\n\n// Bottom boiler\nmodule boiler() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = 35, r = 25);\n        // Inner cavity\n        translate([0, 0, wall]) cylinder(h = 35 - wall, r = 25 - wall);\n        // Bottom chamfer\n        translate([0, 0, -1]) cylinder(h = 2, r1 = 25, r2 = 22);\n    }\n    // Thread section\n    translate([0, 0, 35]) cylinder(h = 8, r = 20);\n}\n\n// Funnel filter\nmodule funnel() {\n    difference() {\n        // Outer cone\n        cylinder(h = 20, r1 = 19, r2 = 15);\n        // Inner cavity\n        translate([0, 0, wall]) cylinder(h = 20 - wall, r1 = 19 - wall, r2 = 15 - wall);\n        // Filter plate holes\n        for (a = [0:45:359]) {\n            rotate([0, 0, a]) translate([13, 0, 17]) cylinder(h = 5, r = 1.5);\n        }\n    }\n}\n\n// Top chamber\nmodule top_chamber() {\n    difference() {\n        // Main body\n        cylinder(h = 45, r = 25);\n        // Inner cavity\n        translate([0, 0, wall]) cylinder(h = 45 - wall, r = 25 - wall);\n        // Top dome\n        translate([0, 0, 45]) sphere(r = 25);\n        // Inner dome\n        translate([0, 0, 45]) sphere(r = 25 - wall);\n    }\n    // Thread socket\n    translate([0, 0, -8]) cylinder(h = 8, r = 20, r1 = 20, r2 = 19);\n    // Spout\n    difference() {\n        hull() {\n            translate([20, 0, 30]) cylinder(h = 12, r = 4);\n            translate([30, 0, 20]) cylinder(h = 12, r = 4);\n        }\n        // Spout bore\n        hull() {\n            translate([20, 0, 30]) cylinder(h = 12, r = 2);\n            translate([30, 0, 20]) cylinder(h = 12, r = 2);\n        }\n    }\n    // Handle\n    translate([-25, 0, 22]) rotate([0, 90, 0]) cylinder(h = 20, r = 4);\n    translate([-25, 0, 22]) rotate([0, 90, 0]) cylinder(h = 20, r = 2, r1 = 2, r2 = 0);\n}\n\n// Lid\nmodule lid() {\n    difference() {\n        // Lid dome\n        sphere(r = 27);\n        // Inner cavity\n        sphere(r = 27 - wall);\n        // Bottom cut\n        translate([0, 0, -5]) cube([60, 60, 10], center = true);\n    }\n    // Knob\n    translate([0, 0, 27]) cylinder(h = 8, r = 8);\n    translate([0, 0, 27]) cylinder(h = 8, r = 4);\n}\n\n// Assembly\nboiler();\ntranslate([0, 0, 35]) funnel();\ntranslate([0, 0, 63]) top_chamber();\ntranslate([0, 0, 108]) lid();\n}",
    "renders": true
  },
  {
    "household_item": "aeropress",
    "openscad_code": "// Aeropress Coffee Maker - Realistic Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;\n\n// Main parameters\nmain_diameter = 60;\nchamber_height = 100;\nwall_thickness = 2;\ncap_height = 15;\nplunger_length = 80;\n\n// Chamber module\nmodule chamber() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = chamber_height, d = main_diameter);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n        cylinder(h = chamber_height - wall_thickness, d = main_diameter - 2*wall_thickness);\n        \n        // Bottom opening\n        translate([0, 0, -1])\n        cylinder(h = wall_thickness + 2, d = main_diameter - 10);\n        \n        // Measurement markings\n        for(i = [1:3]) {\n            translate([0, 0, i * 20])\n            rotate([90, 0, 0])\n            linear_extrude(height = 1)\n            text(str(i), size = 5, halign = \"center\", font = \"Arial:style=Bold\");\n        }\n    }\n}\n\n// Filter cap module\nmodule filter_cap() {\n    difference() {\n        union() {\n            // Main cap body\n            cylinder(h = cap_height, d = main_diameter);\n            \n            // Grip rings\n            for(i = [1:3]) {\n                translate([0, 0, cap_height - i * 3])\n                cylinder(h = 1.5, d = main_diameter + 2);\n            }\n        }\n        \n        // Inner threads\n        difference() {\n            translate([0, 0, 5])\n            cylinder(h = cap_height - 5, d = main_diameter - 2*wall_thickness);\n            \n            // Thread cuts\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                translate([main_diameter/2 - wall_thickness - 1, 0, 5])\n                cube([2, 1, cap_height - 5], center = true);\n            }\n        }\n        \n        // Filter holes\n        for(i = [0:359:30]) {\n            rotate([0, 0, i])\n            translate([main_diameter/2 - 8, 0, cap_height/2])\n            cylinder(h = cap_height, d = 2);\n        }\n    }\n}\n\n// Plunger seal\nmodule rubber_seal() {\n    difference() {\n        // Main seal body\n        cylinder(h = 10, d = main_diameter - 4);\n        \n        // Center hole\n        cylinder(h = 11, d = 15);\n        \n        // Flex grooves\n        for(i = [1:3]) {\n            translate([0, 0, i * 2.5])\n            cylinder(h = 0.5, d = main_diameter - 4 - i * 2);\n        }\n    }\n}\n\n// Plunger handle\nmodule plunger_handle() {\n    union() {\n        // Shaft\n        cylinder(h = plunger_length, d = 15);\n        \n        // Top grip\n        translate([0, 0, plunger_length])\n        difference() {\n            cylinder(h = 20, d = 30);\n            translate([0, 0, 5])\n            cylinder(h = 20, d = 15);\n        }\n        \n        // Bottom connection\n        translate([0, 0, -5])\n        cylinder(h = 10, d = 20);\n    }\n}\n\n// Paddle/stirrer\nmodule paddle() {\n    linear_extrude(height = 3)\n    polygon(points = [\n        [0, 0],\n        [5, 0],\n        [5, 30],\n        [3, 35],\n        [0, 35]\n    ]);\n}\n\n// Main assembly\ntranslate([0, 0, 0])\nchamber();\n\ntranslate([0, 0, -cap_height - 5])\nfilter_cap();\n\ntranslate([0, 0, chamber_height + 10])\nrotate([180, 0, 0])\nunion() {\n    plunger_handle();\n    translate([0, 0, -15])\n    rubber_seal();\n}\n\ntranslate([main_diameter/2 + 20, 0, chamber_height/2])\nrotate([90, 0, 90])\npaddle();",
    "renders": true
  },
  {
    "household_item": "frenchpress",
    "openscad_code": "// French Press - Realistic style, medium complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Overall dimensions\n$fn = 32;\npress_height = 85;\nbeaker_diameter = 45;\nwall_thickness = 2;\nbase_height = 8;\n\n// Main beaker\nmodule beaker() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=press_height-base_height, d=beaker_diameter, center=false);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n            cylinder(h=press_height-base_height-wall_thickness, d=beaker_diameter-2*wall_thickness, center=false);\n    }\n}\n\n// Glass beaker with spout\nmodule glass_beaker() {\n    union() {\n        beaker();\n        \n        // Spout\n        translate([beaker_diameter/2-2, 0, press_height-base_height-15])\n            rotate([0, -30, 0])\n            cylinder(h=10, d1=8, d2=5, center=false);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    // Handle grip\n    translate([beaker_diameter/2+wall_thickness+2, 0, press_height/2])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=50, d=10, center=true);\n            translate([0, 0, -25]) \n                cylinder(h=50, d=6, center=true);\n        }\n    \n    // Handle brackets\n    for(i = [0.3, 0.7]) {\n        translate([beaker_diameter/2+wall_thickness+2, 0, base_height+i*(press_height-base_height-20)])\n            rotate([0, 90, 0])\n            cylinder(h=15, d=6, center=true);\n    }\n}\n\n// Base plate\nmodule base() {\n    translate([0, 0, 0])\n        cylinder(h=base_height, d=beaker_diameter+10, center=false);\n}\n\n// Plunger assembly\nmodule plunger() {\n    // Plunger top\n    translate([0, 0, press_height+15])\n        cylinder(h=8, d=beaker_diameter-4, center=false);\n    \n    // Plunger rod\n    translate([0, 0, press_height+8])\n        cylinder(h=25, d=4, center=false);\n    \n    // Plunger handle\n    translate([0, 0, press_height+33])\n        difference() {\n            cylinder(h=15, d=12, center=false);\n            translate([0, 0, 5])\n                cylinder(h=15, d=8, center=false);\n        }\n}\n\n// Filter assembly\nmodule filter() {\n    // Filter disk\n    translate([0, 0, press_height-5])\n        difference() {\n            cylinder(h=3, d=beaker_diameter-6, center=false);\n            \n            // Filter holes\n            for(i = [1:5]) {\n                rotate([0, 0, i*30])\n                translate([10, 0, 1.5])\n                    cylinder(h=3, d=1.5, center=true);\n                rotate([0, 0, i*30+15])\n                translate([15, 0, 1.5])\n                    cylinder(h=3, d=1.5, center=true);\n            }\n        }\n    \n    // Filter support\n    translate([0, 0, press_height-8])\n        cylinder(h=3, d=beaker_diameter-6, center=false);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Glass beaker\n    translate([0, 0, base_height])\n        glass_beaker();\n    \n    // Handle\n    handle();\n    \n    // Plunger assembly\n    plunger();\n    \n    // Filter\n    filter();\n}",
    "renders": true
  },
  {
    "household_item": "sifter",
    "openscad_code": "// Medium-complexity realistic 3D-printable kitchen sifter\n// Approx. 80 mm diameter, no overhangs, 1.2 mm wall thickness\n\n// ---------- PARAMETERS ----------\nwall = 1.2;                 // Wall thickness (mm)\ndia = 80;                   // Overall diameter (mm)\nh_body = 40;                // Height of cylindrical body (mm)\nh_bottom = 8;               // Height of conical bottom (mm)\nh_rim = 5;                  // Rolled top rim height (mm)\nmesh_hole = 2.0;            // Square hole size (mm)\nmesh_web = 0.8;             // Web thickness between holes (mm)\nhandle_len = 50;            // Handle length (mm)\nhandle_d = 12;              // Handle diameter (mm)\n\n// ---------- MAIN ----------\ndifference() {\n    union() {\n        body();\n        handle();\n    }\n    mesh();\n}\n\n// ---------- MODULES ----------\nmodule body() {\n    // Rolled upper rim\n    difference() {\n        cylinder(h=h_rim, d1=dia+wall*2, d2=dia+wall, $fn=60);\n        translate([0,0,-0.01])\n            cylinder(h=h_rim+0.02, d1=dia, d2=dia-wall, $fn=60);\n    }\n\n    // Cylindrical wall\n    translate([0,0,h_rim])\n        cylinder(h=h_body, d=dia, $fn=60);\n\n    // Conical bottom\n    translate([0,0,h_rim+h_body])\n        cylinder(h=h_bottom, d1=dia, d2=dia*0.6, $fn=60);\n}\n\nmodule handle() {\n    // Attachment collar\n    translate([dia/2,0,h_rim+h_body/2])\n        rotate([0,90,0])\n            cylinder(h=wall*3, d=handle_d, $fn=30);\n\n    // Handle shaft\n    translate([dia/2+handle_len/2,0,h_rim+h_body/2])\n        rotate([0,90,0])\n            cylinder(h=handle_len, d=handle_d, $fn=30);\n\n    // End grip bulge\n    translate([dia/2+handle_len,0,h_rim+h_body/2])\n        rotate([0,90,0])\n            sphere(d=handle_d*1.4, $fn=30);\n}\n\nmodule mesh() {\n    // Remove bottom to create conical screen area\n    translate([0,0,h_rim+h_body+h_bottom-0.01])\n        cylinder(h=0.02, d=dia*0.6+wall*2, $fn=60);\n\n    // Square sieve holes\n    hole_s = mesh_hole;\n    web = mesh_web;\n    pitch = hole_s + web;\n    rad = dia*0.6/2 - wall;  // screen radius at bottom\n    steps = floor(rad*2/pitch);\n\n    for (ix = [-steps:steps])\n        for (iy = [-steps:steps]) {\n            x = ix*pitch;\n            y = iy*pitch;\n            if (norm([x,y]) < rad-hole_s) {\n                translate([x,y,h_rim+h_body+h_bottom-0.1])\n                    cube([hole_s,hole_s,0.2], center=true);\n            }\n        }\n}",
    "renders": true
  },
  {
    "household_item": "mesh",
    "openscad_code": "// Realistic medium-complexity mesh: Wi-Fi router cooling grill\n// Overall footprint 60 x 90 mm, height 20 mm, wall 2 mm thick\n// No overhangs > 45°, ready for FDM printing\n\n$fn = 36;      // smooth curves\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        // outer shell\n        translate([0, 0, 10])\n            cube([60, 90, 20], center = true);\n\n        // hollow inside\n        translate([0, 0, 10])\n            cube([56, 86, 18], center = true);\n    }\n}\n\n// Single grill fin\nmodule fin() {\n    linear_extrude(height = 18, center = true)\n        offset(delta = -1)\n            offset(delta = 1)\n                square([0.8, 86]);\n}\n\n// Vent array on top\nmodule vent_grill() {\n    for (x = [-25 : 5 : 25])\n        translate([x, 0, 20])\n            fin();\n}\n\n// Front port recess\nmodule front_ports() {\n    difference() {\n        // raised bezel\n        translate([0, -45, 10])\n            cube([40, 2, 10], center = true);\n\n        // three rectangular cutouts\n        for (i = [-1 : 1])\n            translate([i * 12, -45, 10])\n                cube([8, 2.5, 6], center = true);\n    }\n}\n\n// Side cooling slots\nmodule side_slots() {\n    for (y = [-35 : 10 : 35]) {\n        translate([-30.5, y, 10])\n            rotate([0, 90, 0])\n                cylinder(h = 2, d = 4, $fn = 8);\n    }\n}\n\n// Bottom foot pads\nmodule feet() {\n    for (pos = [[-25, -40], [25, -40], [-25, 40], [25, 40]])\n        translate([pos[0], pos[1], 0])\n            cylinder(h = 2, d = 8, $fn = 16);\n}\n\n// Assembly\nunion() {\n    chassis();\n    vent_grill();\n    front_ports();\n    mirror([1, 0, 0]) side_slots();\n    side_slots();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "chinois",
    "openscad_code": "// Realistic 3D printable chinois (conical strainer with handle)\n// Overall height ~70 mm, strainer diameter ~60 mm\n\n$fn = 32;  // Smooth curves\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Chinois body parameters\nh_body = 45;\nr_top = 30;\nr_bottom = 8;\n\n// Handle parameters\nhandle_len = 80;\nhandle_d = 12;\nhandle_attach_h = 30;\n\n// Main chinois body (conical)\nmodule chinois_body() {\n    difference() {\n        // Solid cone\n        cylinder(h=h_body, r1=r_top, r2=r_bottom, center=false);\n        \n        // Hollow it out\n        translate([0, 0, wall])\n            cylinder(h=h_body-wall*2, r1=r_top-wall, r2=r_bottom-wall, center=false);\n        \n        // Cut bottom flat for printing\n        translate([0, 0, wall])\n            cube([r_top*2, r_top*2, wall], center=true);\n    }\n}\n\n// Perforation pattern\nmodule perforations() {\n    per_size = 1.8;\n    spacing = 3.5;\n    rows = 8;\n    \n    for (i = [1:rows]) {\n        // Calculate radius at each row\n        row_r = r_top - (r_top - r_bottom) * (i/rows);\n        circ = 2 * PI * row_r;\n        holes = floor(circ / spacing);\n        \n        for (j = [0:holes-1]) {\n            angle = j * 360 / holes;\n            x = row_r * cos(angle);\n            y = row_r * sin(angle);\n            \n            translate([x, y, wall + 1])\n                rotate([0, 0, angle])\n                cylinder(h=h_body-2, r=per_size/2, center=false);\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    // Main handle rod\n    translate([r_top + handle_len/2, 0, handle_attach_h])\n        rotate([90, 0, 90])\n        cylinder(h=handle_len, r=handle_d/2, center=true);\n    \n    // Grip rings\n    grip_start = r_top + 10;\n    grip_end = r_top + handle_len - 10;\n    \n    for (i = [0:3]) {\n        t = grip_start + (grip_end - grip_start) * i/3;\n        translate([t, 0, handle_attach_h])\n            rotate([90, 0, 90])\n            cylinder(h=handle_d*0.8, r=handle_d/2 + 0.5, center=true);\n    }\n    \n    // Attachment bracket\n    translate([r_top - 5, 0, handle_attach_h])\n        rotate([0, 90, 0])\n        difference() {\n            // Bracket body\n            cube([15, handle_d, handle_d*1.2], center=true);\n            \n            // Screw hole (optional)\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h=handle_d*1.2 + 1, r=1.5, center=true);\n        }\n}\n\n// Reinforcement ring at top\nmodule top_ring() {\n    ring_h = 5;\n    translate([0, 0, h_body - ring_h/2])\n        difference() {\n            cylinder(h=ring_h, r1=r_top + wall, r2=r_top + wall, center=true);\n            cylinder(h=ring_h + 1, r1=r_top, r2=r_top, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Main body\n    chinois_body();\n    \n    // Perforations\n    perforations();\n    \n    // Top reinforcement\n    top_ring();\n    \n    // Handle\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "cheesecloth",
    "openscad_code": "// Cheesecloth - 3D Printable model\n// Medium complexity realistic style\n\n// Parameters\ncloth_size = 80;           // Square cloth size in mm\nthickness = 1.2;           // Thickness of fabric threads\nthread_spacing = 4;        // Spacing between threads\nwave_height = 2.5;         // Height of fabric wave pattern\nwall_thickness = 1.5;      // Minimum wall thickness for printing\n\n// Calculate number of threads\nnum_threads = floor(cloth_size / thread_spacing) - 1;\n\n// Module for single thread with wavy pattern\nmodule wavy_thread(length, direction) {\n    // direction: 0 for horizontal, 90 for vertical\n    rotate([0, 0, direction])\n    for(i = [0:2:length/thread_spacing]) {\n        translate([i * thread_spacing, 0, 0])\n        hull() {\n            // Create wavy pattern with spheres\n            translate([0, 0, sin(i * 0.8) * wave_height])\n            sphere(d = thickness);\n            \n            translate([thread_spacing, 0, sin((i + 1) * 0.8) * wave_height])\n            sphere(d = thickness);\n        }\n    }\n}\n\n// Module for frayed edge\nmodule frayed_edge(length, direction) {\n    rotate([0, 0, direction])\n    for(i = [0:length/2]) {\n        translate([i * 2 - length/2, 0, 0])\n        rotate([90, 0, rand(i * 123) * 30 - 15])\n        cylinder(h = rand(i * 456) * 8 + 6, d = thickness * 0.7);\n    }\n}\n\n// Random function for frayed edges\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Main cloth body\nmodule cheesecloth() {\n    // Create the woven pattern\n    difference() {\n        // Base threads - horizontal\n        union() {\n            for(j = [0:num_threads]) {\n                translate([0, j * thread_spacing - cloth_size/2, 0])\n                wavy_thread(cloth_size, 0);\n            }\n            \n            // Vertical threads\n            for(j = [0:num_threads]) {\n                translate([j * thread_spacing - cloth_size/2, 0, 0])\n                wavy_thread(cloth_size, 90);\n            }\n        }\n        \n        // Cut square shape\n        translate([0, 0, -thickness])\n        cube([cloth_size + 2, cloth_size + 2, thickness * 4], center = true);\n    }\n    \n    // Add frayed edges on all sides\n    translate([0, -cloth_size/2, 0])\n    frayed_edge(cloth_size, 0);\n    \n    translate([0, cloth_size/2, 0])\n    frayed_edge(cloth_size, 0);\n    \n    translate([-cloth_size/2, 0, 0])\n    frayed_edge(cloth_size, 90);\n    \n    translate([cloth_size/2, 0, 0])\n    frayed_edge(cloth_size, 90);\n}\n\n// Add subtle wrinkles\nmodule add_wrinkles() {\n    // Main wrinkles\n    translate([cloth_size/4, -cloth_size/4, 0])\n    rotate([45, 0, 0])\n    scale([1, 1, 0.3])\n    sphere(d = cloth_size/3);\n    \n    translate([-cloth_size/4, cloth_size/4, 0])\n    rotate([-30, 0, 0])\n    scale([1, 1, 0.2])\n    sphere(d = cloth_size/4);\n}\n\n// Final assembly\nunion() {\n    // Main cloth\n    cheesecloth();\n    \n    // Add realistic wrinkles on surface\n    // These are subtracted to create depressions\n    difference() {\n        // Base cloth\n        translate([0, 0, thickness/2])\n        cube([cloth_size, cloth_size, thickness], center = true);\n        \n        // Wrinkle details\n        add_wrinkles();\n    }\n}\n\n// Print support base\ntranslate([0, 0, -thickness])\ncube([cloth_size + 10, cloth_size + 10, 0.5], center = true);",
    "renders": true
  },
  {
    "household_item": "zester",
    "openscad_code": "// Realistic Zester - Medium Complexity\n// Basic OpenSCAD primitives only\n\n// Overall dimensions\nhandle_len = 85;\nhandle_dia = 12;\nblade_width = 18;\nblade_len = 35;\nblade_thick = 1.2;\nteeth_count = 8;\nteeth_width = 1.5;\nteeth_len = 6;\n\n// Handle grip pattern\nmodule grip_rings(count=8, spacing=7) {\n    for(i=[0:count-1]) {\n        translate([0, 0, -handle_len*0.4 + i*spacing]) {\n            difference() {\n                cylinder(d=handle_dia+1, h=2, $fn=32);\n                cylinder(d=handle_dia-0.5, h=2.2, $fn=32);\n            }\n        }\n    }\n}\n\n// Handle with ergonomic shape\nmodule handle() {\n    difference() {\n        // Main handle body\n        union() {\n            // Tapered cylinder\n            cylinder(h=handle_len, d1=handle_dia, d2=handle_dia*0.9, $fn=32);\n            // End cap sphere\n            translate([0, 0, handle_len]) sphere(d=handle_dia, $fn=32);\n        }\n        // Hanging hole\n        translate([0, handle_dia/2+2, handle_len-5]) \n            rotate([90,0,0]) cylinder(d=3, h=handle_dia+2, $fn=16);\n    }\n    \n    // Grip rings\n    grip_rings();\n}\n\n// Zester teeth\nmodule teeth() {\n    for(i=[0:teeth_count-1]) {\n        translate([i*(blade_width/teeth_count) - blade_width/2 + teeth_width/2, 0, 0])\n            cube([teeth_width, teeth_len, blade_thick]);\n    }\n}\n\n// Blade assembly\nmodule blade() {\n    // Main blade plate\n    translate([0, 0, -blade_len/2]) \n        cube([blade_width, blade_len, blade_thick], center=true);\n    \n    // Reinforcement spine\n    translate([0, 0, -blade_len/2]) \n        cube([blade_width*0.3, blade_len*0.8, blade_thick*2], center=true);\n    \n    // Cutting teeth\n    translate([0, blade_len/2 - teeth_len/2, blade_thick/2]) teeth();\n    \n    // Rounded edges\n    translate([0, blade_len/2, 0]) \n        rotate([90,0,0]) cylinder(d=blade_width, h=blade_thick, $fn=32);\n}\n\n// Connector between handle and blade\nmodule connector() {\n    // Transition piece\n    difference() {\n        hull() {\n            translate([0, 0, 0]) \n                cylinder(d=handle_dia*1.2, h=10, $fn=32);\n            translate([0, -15, 0]) \n                cube([blade_width+4, 5, 10], center=true);\n        }\n        // Remove blade slot\n        translate([0, -12, 0])\n            cube([blade_width+0.5, 10, blade_thick+2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    rotate([0,90,0]) handle();\n    \n    // Connector\n    translate([0, 0, -handle_len/2-5]) connector();\n    \n    // Blade\n    translate([0, -handle_len/2-20, 0]) rotate([90,0,0]) blade();\n}",
    "renders": true
  },
  {
    "household_item": "citruspress",
    "openscad_code": "// Citrus Press - Realistic Style, Medium Complexity\n// 3D printable manual citrus press for lemons/oranges\n\n$fn = 32; // Smooth curves\n\n// Main dimensions (mm)\nbase_d = 80;\nbase_h = 15;\ncone_h = 45;\ncone_base = 35;\ncone_tip = 8;\nhandle_l = 70;\nhandle_d = 12;\nfilter_d = 60;\nfilter_h = 8;\nspout_l = 15;\nspout_w = 12;\nwall_t = 2;\n\n// Base bowl\nmodule base() {\n    difference() {\n        cylinder(h=base_h, d=base_d);\n        // Hollow out\n        translate([0,0,wall_t])\n            cylinder(h=base_h, d=base_d-2*wall_t);\n        \n        // Pour spout\n        translate([base_d/2 - spout_l/2, 0, base_h-2])\n            cube([spout_l, spout_w, 4], center=true);\n    }\n}\n\n// Juice cone with ridges\nmodule cone() {\n    union() {\n        // Main cone\n        cylinder(h=cone_h, d1=cone_tip, d2=cone_base);\n        \n        // Ridges for juicing\n        for(i=[0:5:360]) {\n            rotate([0,0,i])\n                translate([0, (cone_base+cone_tip)/4, 0])\n                    cube([1, (cone_base-cone_tip)/2, cone_h], center=true);\n        }\n    }\n}\n\n// Filter with holes\nmodule filter() {\n    difference() {\n        cylinder(h=filter_h, d=filter_d);\n        \n        // Holes\n        for(i=[-20:10:20]) {\n            for(j=[-20:10:20]) {\n                if(sqrt(i*i+j*j) < filter_d/2 - 5) {\n                    translate([i,j,-1])\n                        cylinder(h=filter_h+2, d=2);\n                }\n            }\n        }\n        \n        // Center hole for cone\n        translate([0,0,-1])\n            cylinder(h=filter_h+2, d=cone_base+1);\n    }\n}\n\n// Handle with grip\nmodule handle() {\n    union() {\n        // Main handle\n        rotate([90,0,0])\n            cylinder(h=handle_l, d=handle_d);\n        \n        // Grip rings\n        for(i=[-handle_l/2+10:10:handle_l/2-10]) {\n            rotate([90,0,0])\n                translate([0,0,i])\n                    cylinder(h=3, d=handle_d+2);\n        }\n        \n        // Connection to cone\n        translate([0, handle_d/2, 0])\n            rotate([-90,0,0])\n                cylinder(h=cone_base/2, d=cone_base);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Filter sits in base\n    translate([0,0,base_h-wall_t])\n        filter();\n    \n    // Cone with handle\n    translate([0,0,base_h+filter_h-wall_t])\n        rotate([0,0,0])\n            cone();\n    \n    // Handle\n    translate([0,0,base_h+filter_h+cone_h/2])\n        rotate([0,180,0])\n            handle();\n}",
    "renders": true
  },
  {
    "household_item": "applecorer",
    "openscad_code": "// Apple Corer - Realistic Style, Medium Complexity\n// Designed for 3D printing without overhangs\n// Approximate size: 90mm length, 30mm diameter\n\n// Main parameters\nhandle_length = 70;\nhandle_diameter = 20;\nblade_length = 20;\nblade_diameter = 22;\nwall_thickness = 1.5;\ngrip_radius = 15;\n\n// Handle with ergonomic grip\nmodule handle() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, center=false, $fn=48);\n        \n        // Ergonomic grip grooves - subtract for comfort\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([grip_radius * 0.8, 0, 0])\n            cube([handle_diameter * 0.3, 2, handle_length * 0.8], center=true);\n        }\n    }\n    \n    // Grip rings for better hold\n    for(i = [1:5]) {\n        translate([0, 0, i * 12])\n        difference() {\n            cylinder(h=2, d=handle_diameter + 2, $fn=48);\n            cylinder(h=3, d=handle_diameter - 2, $fn=48);\n        }\n    }\n}\n\n// Cutting blade with serrated edge\nmodule blade() {\n    difference() {\n        // Main tube\n        cylinder(h=blade_length, d=blade_diameter, center=false, $fn=48);\n        \n        // Hollow center\n        cylinder(h=blade_length + 1, d=blade_diameter - wall_thickness * 2, center=false, $fn=48);\n    }\n    \n    // Serrated teeth\n    teeth_count = 16;\n    for(i = [0:teeth_count-1]) {\n        rotate([0, 0, i * 360/teeth_count])\n        translate([blade_diameter/2 - 2, 0, -0.5])\n        cube([3, 1, 3], center=true);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, blade_length - 2])\n    difference() {\n        cylinder(h=4, d=blade_diameter + 2, $fn=48);\n        cylinder(h=5, d=blade_diameter, $fn=48);\n    }\n}\n\n// Transition piece between handle and blade\nmodule transition() {\n    difference() {\n        // Tapered cone\n        cylinder(h1=handle_diameter, h2=blade_diameter, h=8, center=false, $fn=48);\n        \n        // Hollow center\n        cylinder(h1=handle_diameter - wall_thickness * 2, h2=blade_diameter - wall_thickness * 2, h=9, center=false, $fn=48);\n    }\n}\n\n// Small hole for hanging\nmodule hanging_hole() {\n    translate([0, 0, handle_length - 5])\n    rotate([90, 0, 0])\n    cylinder(h=handle_diameter, d=4, center=true, $fn=24);\n}\n\n// Assembly\nunion() {\n    // Handle at top\n    handle();\n    \n    // Hanging hole through handle\n    difference() {\n        children();\n        hanging_hole();\n    }\n    \n    // Transition piece\n    translate([0, 0, handle_length])\n    transition();\n    \n    // Blade at bottom\n    translate([0, 0, handle_length + 8])\n    blade();\n}",
    "renders": true
  },
  {
    "household_item": "melonballer",
    "openscad_code": "// Melonballer - Realistic Medium Complexity\n// Overall length ~90mm, scoop diameter ~30mm\n\n$fn = 36;  // Smooth curves\n\n// Main handle\nmodule handle() {\n    // Handle core\n    linear_extrude(height = 75, twist = 10, scale = [0.8, 0.8])\n        circle(d = 12);\n    \n    // Grip rings\n    for (i = [0:15:60]) {\n        translate([0, 0, 10 + i])\n            cylinder(h = 3, d1 = 13, d2 = 11.5);\n    }\n    \n    // End cap\n    translate([0, 0, 75])\n        sphere(d = 15);\n}\n\n// Scoop bowl\nmodule scoop() {\n    difference() {\n        // Outer hemisphere\n        sphere(d = 30);\n        \n        // Inner hollow\n        sphere(d = 26);\n        \n        // Drain holes\n        for (a = [0:60:300]) {\n            rotate([0, 0, a])\n                translate([12, 0, -5])\n                    cylinder(h = 10, d = 2.5);\n        }\n    }\n    \n    // Cutting edge reinforcement\n    difference() {\n        cylinder(h = 2, d = 32);\n        translate([0, 0, -1])\n            cylinder(h = 4, d = 28);\n    }\n}\n\n// Neck connection\nmodule neck() {\n    // Curved neck\n    hull() {\n        // Handle end\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 8, d = 8);\n        \n        // Scoop end\n        translate([0, 15, -15])\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 12);\n    }\n    \n    // Reinforcement ribs\n    for (i = [0:60:300]) {\n        rotate([0, 0, i])\n            translate([5, 7.5, -7.5])\n                cube([3, 15, 3]);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle();\n\ntranslate([0, 0, 75])\n    neck();\n\ntranslate([0, 15, 60])\n    rotate([0, 180, 0])\n        scoop();",
    "renders": true
  },
  {
    "household_item": "eggbeater",
    "openscad_code": "// Realistic 3D-printable eggbeater (medium complexity)\n// Overall dimensions ≈ 85 mm tall, 70 mm wide\n\n$fn = 36;               // Smooth curves\nhandle_len = 40;\nhandle_d = 12;\ngear_h = 12;\ngear_d = 24;\ncrank_len = 35;\ncrank_d = 6;\nwhisk_rod_len = 38;\nwhisk_rod_d = 3;\nloop_r = 8;\nloop_wire_d = 2;\nwall = 1.5;             // 3D-printable wall thickness\n\n// ---------- Main handle ----------\nmodule handle() {\n    union() {\n        // Comfortable grip\n        cylinder(h = handle_len, d1 = handle_d - 2, d2 = handle_d, center = false);\n        // Top knob\n        translate([0, 0, handle_len])\n            sphere(d = handle_d + 2);\n    }\n}\n\n// ---------- Rotating crank ----------\nmodule crank() {\n    rotate([90, 0, 0])\n    union() {\n        // Crank arm\n        cylinder(h = crank_len, d = crank_d, center = true);\n        // Knob\n        translate([crank_len/2, 0, 0])\n            sphere(d = crank_d + 4);\n    }\n}\n\n// ---------- Drive gear (simplified crown gear) ----------\nmodule gear() {\n    difference() {\n        cylinder(h = gear_h, d = gear_d);\n        // Central hole for axle\n        cylinder(h = gear_h + 0.1, d = crank_d + 1);\n        // Teeth cutouts for realism\n        for (i = [0:11])\n            rotate([0, 0, i * 30])\n                translate([gear_d/2 - 2, -1.5, -0.1])\n                    cube([4, 3, gear_h + 0.2]);\n    }\n}\n\n// ---------- Whisk loop ----------\nmodule whisk_loop() {\n    // Single elliptical loop\n    rotate_extrude(angle = 360, $fn = 24)\n        translate([loop_r, 0, 0])\n            circle(d = loop_wire_d);\n}\n\n// ---------- Whisk assembly ----------\nmodule whisk() {\n    // Vertical rod\n    cylinder(h = whisk_rod_len, d = whisk_rod_d);\n\n    // Three loops\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([0, 0, whisk_rod_len * 0.3])\n                whisk_loop();\n        \n        rotate([0, 0, angle + 60])\n            translate([0, 0, whisk_rod_len * 0.7])\n                whisk_loop();\n    }\n}\n\n// ---------- Mounting frame ----------\nmodule frame() {\n    // Top arch\n    difference() {\n        union() {\n            // Arch\n            rotate([0, 0, 90])\n                cylinder(h = 60, d = 6, center = true);\n            // Vertical struts\n            translate([30, 0, 0])\n                cylinder(h = 40, d = 6);\n            translate([-30, 0, 0])\n                cylinder(h = 40, d = 6);\n        }\n        // Clearance hole for crank axle\n        rotate([0, 0, 90])\n            translate([0, 30, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, d = crank_d + 1);\n    }\n}\n\n// ---------- Assembly ----------\n// Handle\nhandle();\n\n// Frame\ntranslate([0, 0, handle_len - 5])\n    frame();\n\n// Crank axle\ntranslate([0, 40, handle_len - 5])\n    rotate([0, 90, 0])\n        crank();\n\n// Gear\ntranslate([0, 30, handle_len - 5 - gear_h/2])\n    rotate([90, 0, 0])\n        gear();\n\n// Whisk\ntranslate([0, -30, handle_len - 5 - whisk_rod_len/2])\n    whisk();",
    "renders": true
  },
  {
    "household_item": "masher",
    "openscad_code": "// Potato Masher - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Parameters\nhandle_length = 80;\nhandle_diameter = 25;\nmash_plate_diameter = 75;\nmash_plate_thickness = 5;\ngrid_hole_size = 6;\ngrid_hole_spacing = 10;\nwall_thickness = 3;\n\n// Handle grip ring module\nmodule grip_ring(height, diameter, count) {\n    for (i = [0:count-1]) {\n        translate([0, 0, i * height/count]) \n            difference() {\n                cylinder(h=height/count+1, d=diameter, $fn=64);\n                cylinder(h=height/count+1, d=diameter-wall_thickness*2, $fn=64);\n            }\n    }\n}\n\n// Handle\nmodule handle() {\n    union() {\n        // Main handle tube\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter, $fn=64);\n            cylinder(h=handle_length, d=handle_diameter-wall_thickness*2, $fn=64);\n        }\n        \n        // Top cap\n        translate([0, 0, handle_length])\n            cylinder(h=wall_thickness*2, d=handle_diameter+2, $fn=64);\n        \n        // Grip rings\n        grip_ring(handle_length*0.6, handle_diameter+2, 8);\n    }\n}\n\n// Mash plate grid pattern\nmodule mash_grid() {\n    holes_per_row = floor(mash_plate_diameter / (grid_hole_size + grid_hole_spacing));\n    offset = (mash_plate_diameter - holes_per_row * (grid_hole_size + grid_hole_spacing)) / 2;\n    \n    difference() {\n        // Base plate\n        cylinder(h=mash_plate_thickness, d=mash_plate_diameter, $fn=128);\n        \n        // Grid holes\n        for (x = [0:holes_per_row-1]) {\n            for (y = [0:holes_per_row-1]) {\n                translate([\n                    offset + x * (grid_hole_size + grid_hole_spacing) + grid_hole_spacing/2 - mash_plate_diameter/2,\n                    offset + y * (grid_hole_size + grid_hole_spacing) + grid_hole_spacing/2 - mash_plate_diameter/2,\n                    -1\n                ])\n                    cube([grid_hole_size, grid_hole_size, mash_plate_thickness+2]);\n            }\n        }\n        \n        // Center hole\n        translate([0, 0, -1])\n            cylinder(h=mash_plate_thickness+2, d=grid_hole_size*1.5, $fn=32);\n    }\n}\n\n// Connection shaft\nmodule shaft() {\n    difference() {\n        // Outer shaft\n        cylinder(h=40, d=20, $fn=32);\n        \n        // Inner hollow\n        cylinder(h=40, d=20-wall_thickness*2, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0]) handle();\n    \n    // Shaft\n    translate([0, 0, handle_length]) shaft();\n    \n    // Mash plate\n    translate([0, 0, handle_length + 40]) \n        rotate([180, 0, 0]) mash_grid();\n}",
    "renders": true
  },
  {
    "household_item": "ricer",
    "openscad_code": "// Potato Ricer in Medium-Detail, Realistic Style\n// Designed for 3D printing, no support required\n\n$fn = 32;\n\nmodule rounded_box(x,y,z,r) {\n    translate([r,r,0]) cube([x-2*r,y-2*r,z]);\n    translate([r,0,0]) cube([x-2*r,r,z]);\n    translate([r,y-r,0]) cube([x-2*r,r,z]);\n    translate([0,r,0]) cube([r,y-2*r,z]);\n    translate([x-r,r,0]) cube([r,y-2*r,z]);\n    for(i=[0,1]) for(j=[0,1]) \n        translate([i?x-r:r, j?y-r:r, 0])\n            cylinder(r=r,h=z,center=false);\n}\n\nmodule handle_profile() {\n    // Elliptical profile for ergonomic handle\n    scale([1,0.6,1]) circle(d=12);\n}\n\nmodule handle_bar(length=90) {\n    linear_extrude(height=length) handle_profile();\n}\n\nmodule grip_texture(len) {\n    for(i=[0:5:len]) {\n        translate([0,0,i]) \n            rotate([0,90,0]) cylinder(h=1,d=2,$fn=6);\n    }\n}\n\nmodule upper_handle() {\n    difference() {\n        // Main handle bar\n        rotate([90,0,0]) handle_bar(90);\n        \n        // Hole for hanging\n        translate([0,0,-5]) rotate([0,90,0]) \n            cylinder(h=20,d=4,center=true);\n            \n        // Grip texture\n        translate([-6,-3,10]) grip_texture(70);\n        translate([6,-3,10]) grip_texture(70);\n    }\n}\n\nmodule lower_handle() {\n    difference() {\n        // Main handle bar\n        rotate([-90,0,0]) handle_bar(70);\n        \n        // Grip texture\n        translate([-6,-3,10]) grip_texture(50);\n        translate([6,-3,10]) grip_texture(50);\n    }\n}\n\nmodule hopper() {\n    difference() {\n        // Main hopper body\n        rounded_box(60,45,40,5);\n        \n        // Tapered cavity\n        translate([30,22.5,5]) \n            cylinder(d1=55,d2=50,h=35);\n            \n        // Bottom holes for rice\n        for(x=[10:10:50]) \n            for(y=[10:10:35])\n                translate([x,y,-1]) cylinder(h=3,d=2);\n    }\n}\n\nmodule plunger() {\n    difference() {\n        // Main plunger plate\n        translate([-27.5,-17.5,0]) \n            rounded_box(55,35,8,3);\n            \n        // Rice extrusion grid\n        for(x=[5:5:50]) \n            for(y=[5:5:30])\n                translate([x-27.5,y-17.5,-1]) \n                    cube([3,3,10]);\n    }\n}\n\nmodule hinge_pin() {\n    cylinder(h=50,d=4,center=true);\n}\n\nmodule hinge() {\n    // Upper hinge\n    translate([0,25,0]) {\n        difference() {\n            cylinder(h=10,d=8);\n            translate([0,0,-1]) cylinder(h=12,d=4);\n        }\n    }\n    \n    // Lower hinge\n    translate([0,-25,0]) {\n        difference() {\n            cylinder(h=10,d=8);\n            translate([0,0,-1]) cylinder(h=12,d=4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Hinged assembly\n    translate([0,0,0]) {\n        // Hopper with lower handle\n        union() {\n            hopper();\n            translate([0,-25,-20]) lower_handle();\n        }\n        \n        // Hinge mechanism\n        hinge();\n        \n        // Plunger with upper handle\n        translate([0,0,45]) {\n            rotate([0,0,0]) {\n                plunger();\n                translate([0,25,0]) rotate([90,0,0]) upper_handle();\n            }\n        }\n    }\n    \n    // Hinge pin\n    translate([0,0,0]) hinge_pin();\n}\n\n// Print orientation\n%translate([0,0,-25]) cube([80,80,1]);",
    "renders": true
  },
  {
    "household_item": "scraper",
    "openscad_code": "// Realistic style medium complexity scraper\n// Overall dimensions: ~90mm length, ~25mm width, ~8mm height\n\n// Parameters\nhandle_length = 65;\nhandle_width = 22;\nhandle_height = 8;\nblade_length = 25;\nblade_width = 20;\nblade_thickness = 1.2;\ngrip_pattern_depth = 0.5;\ngrip_pattern_width = 2;\ngrip_pattern_spacing = 5;\nwall_thickness = 2;\nfillet_radius = 2;\n\n// Handle grip pattern module\nmodule grip_pattern() {\n    for (i = [0:ceil(handle_length/grip_pattern_spacing)-1]) {\n        translate([i*grip_pattern_spacing + grip_pattern_spacing/2, 0, handle_height/2])\n            cube([grip_pattern_width, handle_width, grip_pattern_depth], center=true);\n    }\n}\n\n// Handle with rounded edges\nmodule rounded_handle() {\n    difference() {\n        // Main handle block with rounded ends\n        hull() {\n            translate([fillet_radius, 0, 0])\n                cylinder(h=handle_height, r=fillet_radius, center=true);\n            translate([handle_length-fillet_radius, 0, 0])\n                cylinder(h=handle_height, r=fillet_radius, center=true);\n            translate([fillet_radius, 0, 0])\n                cube([handle_length-2*fillet_radius, handle_width, handle_height], center=true);\n        }\n        \n        // Grip texture\n        grip_pattern();\n        \n        // Hollow center for weight reduction\n        translate([handle_length/2, 0, 0])\n            cube([handle_length-2*wall_thickness, handle_width-2*wall_thickness, handle_height-2*wall_thickness], center=true);\n    }\n}\n\n// Curved scraper blade\nmodule scraper_blade() {\n    difference() {\n        // Main blade shape\n        hull() {\n            // Front edge\n            translate([handle_length + blade_length, 0, 0])\n                cube([blade_thickness*2, blade_width, blade_thickness], center=true);\n            // Transition to handle\n            translate([handle_length - 5, 0, 0])\n                cube([blade_thickness*3, handle_width*0.9, blade_thickness*2], center=true);\n        }\n        \n        // Taper front edge\n        translate([handle_length + blade_length + blade_thickness/2, 0, -blade_thickness/2])\n            rotate([0, 0, 15])\n            cube([blade_length/2, blade_width*1.5, blade_thickness], center=false);\n        \n        // Hollow underside\n        translate([handle_length + blade_length/2, 0, -blade_thickness/2])\n            cube([blade_length, blade_width*0.8, blade_thickness], center=true);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    num_ribs = 3;\n    for (i = [0:num_ribs-1]) {\n        translate([handle_length - 15 + i*10, 0, handle_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=handle_width*0.8, r1=1.5, r2=0.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main handle\n    rounded_handle();\n    \n    // Blade\n    scraper_blade();\n    \n    // Structural ribs\n    ribs();\n    \n    // Hanging hole\n    translate([5, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=handle_height, r=3, center=true);\n}",
    "renders": true
  },
  {
    "household_item": "mandoline",
    "openscad_code": "// Realistic Mandoline Slicer - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main parameters\nmandoline_width = 80;\nmandoline_length = 120;\nmandoline_height = 40;\nwall_thickness = 2;\n\n// Base frame module\nmodule base_frame() {\n    // Bottom platform\n    difference() {\n        cube([mandoline_length, mandoline_width, 5]);\n        // Cutout for finger grip\n        translate([mandoline_length-15, 35, 0])\n            cube([10, 10, 5]);\n    }\n    \n    // Side rails\n    translate([0, 0, 5])\n        cube([wall_thickness, mandoline_width, mandoline_height-5]);\n    translate([mandoline_length-wall_thickness, 0, 5])\n        cube([wall_thickness, mandoline_width, mandoline_height-5]);\n    \n    // Front stop\n    translate([0, 0, 0])\n        cube([mandoline_length, wall_thickness, 15]);\n}\n\n// Adjustable thickness platform\nmodule thickness_platform() {\n    // Main platform\n    translate([10, wall_thickness, 15])\n        cube([mandoline_length-20, mandoline_width-4, 3]);\n    \n    // Adjustment ridges on bottom\n    for(i = [0:3]) {\n        translate([15 + i*25, wall_thickness, 12])\n            cube([2, mandoline_width-4, 3]);\n    }\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    // Blade holder\n    difference() {\n        translate([5, wall_thickness, 18])\n            cube([mandoline_length-10, mandoline_width-4, 8]);\n        \n        // Blade slot\n        translate([10, 10, 20])\n            cube([mandoline_length-20, mandoline_width-20, 4]);\n    }\n    \n    // Actual blade (angled cutting edge)\n    translate([10, 15, 24])\n        rotate([0, 10, 0])\n            cube([mandoline_length-20, 0.5, 5]);\n    \n    // Safety guard posts\n    for(pos = [20, 40, 60]) {\n        translate([pos, 5, 26])\n            cylinder(h=8, r=1.5);\n        translate([pos, mandoline_width-7, 26])\n            cylinder(h=8, r=1.5);\n    }\n}\n\n// Hand guard\nmodule hand_guard() {\n    // Main body\n    difference() {\n        translate([0, 0, 0])\n            cube([40, 60, 30]);\n        \n        // Grip hole\n        translate([5, 25, 10])\n            cube([30, 20, 20]);\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            translate([10, 10 + i*10, 25])\n                sphere(r=5);\n        }\n    }\n    \n    // Pins for sliding\n    translate([0, 5, 5])\n        cylinder(h=5, r=2);\n    translate([0, 55, 5])\n        cylinder(h=5, r=2);\n}\n\n// Non-slip feet\nmodule feet() {\n    for(pos = [[10, 10], [mandoline_length-20, 10], \n               [10, mandoline_width-20], [mandoline_length-20, mandoline_width-20]]) {\n        translate([pos[0], pos[1], -3])\n            cylinder(h=3, r=4);\n    }\n}\n\n// Assembly\nunion() {\n    base_frame();\n    thickness_platform();\n    blade_assembly();\n    feet();\n    \n    // Hand guard positioned for storage\n    translate([mandoline_length+10, 10, 0])\n        hand_guard();\n}",
    "renders": true
  },
  {
    "household_item": "slicer",
    "openscad_code": "// Realistic 3D-printable slicer (mandoline style) – medium complexity\n// All dimensions in mm\n// Build plate friendly: 80 x 70 x 40 mm overall\n\n$fn = 36;            // smooth curves\n\n// ---------- parameters ----------\nbody_l = 70;\nbody_w = 60;\nbody_h = 5;\n\nchute_l = 60;\nchute_w = 55;\nchute_tilt = 30;     // degrees\n\nhandle_l = 40;\nhandle_d = 10;\n\nblade_h = 0.5;\nblade_gap = 0.6;     // slicing thickness\n\nleg_h = 15;\nleg_t = 3;\n\n// ---------- main body ----------\nmodule slicer_body() {\n    difference() {\n        // base\n        translate([0, 0, body_h/2])\n            cube([body_l, body_w, body_h], center=true);\n\n        // blade slot\n        translate([0, 0, body_h/2])\n            cube([body_l*0.8, blade_gap, body_h+0.1], center=true);\n\n        // chute opening\n        rotate([0, chute_tilt, 0])\n        translate([(body_l-chute_l)/2 - 2, 0, body_h/2])\n            cube([chute_l+4, chute_w, body_h+1], center=true);\n    }\n}\n\n// ---------- stainless-steel blade ----------\nmodule blade() {\n    color(\"silver\")\n    translate([0, 0, body_h - blade_h/2])\n        cube([body_l*0.8, 0.4, blade_h], center=true);\n}\n\n// ---------- food chute ----------\nmodule chute() {\n    difference() {\n        // sloped chute\n        rotate([0, -chute_tilt, 0])\n        translate([(body_l-chute_l)/2, 0, body_h/2 + chute_l*sin(chute_tilt)/2])\n            cube([chute_l, chute_w, body_h], center=true);\n\n        // food tunnel\n        rotate([0, -chute_tilt, 0])\n        translate([(body_l-chute_l)/2, 0, body_h/2 + chute_l*sin(chute_tilt)/2])\n            cube([chute_l-2*leg_t, chute_w-2*leg_t, body_h+1], center=true);\n    }\n}\n\n// ---------- hand guard ----------\nmodule hand_guard() {\n    difference() {\n        // slider block\n        translate([-(body_l-chute_l)/2 - 5, 0, body_h + leg_h/2])\n            cube([10, chute_w-10, leg_h], center=true);\n\n        // finger groove\n        translate([-(body_l-chute_l)/2 - 5, 0, body_h + leg_h/2 + 2])\n            cube([12, chute_w-20, leg_h-2], center=true);\n\n        // blade clearance cutout\n        translate([-(body_l-chute_l)/2 - 5, 0, body_h])\n            cube([12, blade_gap+2, blade_h+2], center=true);\n    }\n}\n\n// ---------- handle ----------\nmodule handle() {\n    color(\"#444\")\n    translate([body_l/2 + handle_l/2, 0, body_h/2 + 3])\n        rotate([0, 90, 0])\n            cylinder(h = handle_l, d = handle_d, center=true);\n\n    // grip rings\n    for (i = [0 : 1 : 3]) {\n        translate([body_l/2 + 5 + i*8, 0, body_h/2 + 3])\n            rotate([0, 90, 0])\n                cylinder(h = 2, d = handle_d+2, center=true);\n    }\n}\n\n// ---------- legs ----------\nmodule legs() {\n    positions = [\n        [-body_l/2+5,  body_w/2-5],\n        [ body_l/2-5,  body_w/2-5],\n        [-body_l/2+5, -body_w/2+5],\n        [ body_l/2-5, -body_w/2+5]\n    ];\n    for (p = positions) {\n        translate([p.x, p.y, -leg_h/2])\n            cube([leg_t, leg_t, leg_h], center=true);\n    }\n}\n\n// ---------- assembly ----------\nunion() {\n    slicer_body();\n    blade();\n    chute();\n    hand_guard();\n    handle();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "chopper",
    "openscad_code": "// Realistic Chopper Motorcycle - Medium Complexity\n// All dimensions in mm, designed for 3D printing\n\n$fn = 50;  // Smooth curves\nscale_factor = 0.8;  // Adjust overall size\n\nmodule chopper() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main frame\n            frame();\n            \n            // Engine\n            engine();\n            \n            // Front fork and wheel\n            translate([0, 35, 0]) rotate([0, 0, 0]) front_assembly();\n            \n            // Rear wheel and swingarm\n            translate([0, -35, 0]) rotate([0, 0, 0]) rear_assembly();\n            \n            // Seat\n            translate([0, -10, 15]) seat();\n            \n            // Handlebars\n            translate([0, 35, 30]) handlebars();\n            \n            // Fuel tank\n            translate([0, 10, 20]) tank();\n            \n            // Exhaust pipes\n            translate([8, 0, 5]) exhaust_left();\n            translate([-8, 0, 5]) mirror([1,0,0]) exhaust_left();\n        }\n    }\n}\n\nmodule frame() {\n    // Main backbone tube\n    color(\"silver\")\n    hull() {\n        translate([0, 30, 20]) sphere(d=5);\n        translate([0, -30, 15]) sphere(d=5);\n    }\n    \n    // Down tubes\n    color(\"silver\")\n    hull() {\n        translate([0, 25, 20]) sphere(d=4);\n        translate([6, 25, 0]) sphere(d=4);\n        translate([-6, 25, 0]) sphere(d=4);\n    }\n}\n\nmodule engine() {\n    color(\"darkgray\")\n    union() {\n        // Engine block\n        translate([0, 5, 8]) cube([16, 20, 12], center=true);\n        \n        // Cylinders\n        for(i = [-1, 1]) {\n            translate([i*6, 5, 18]) cylinder(h=12, d=8);\n        }\n        \n        // Oil pan\n        translate([0, 5, 2]) cube([18, 22, 4], center=true);\n    }\n}\n\nmodule front_assembly() {\n    // Fork tubes\n    color(\"silver\")\n    union() {\n        translate([6, 0, 20]) cylinder(h=40, d=4);\n        translate([-6, 0, 20]) cylinder(h=40, d=4);\n    }\n    \n    // Front wheel\n    color(\"black\")\n    rotate([90, 0, 0]) cylinder(h=10, d=30, center=true);\n    \n    // Spokes\n    color(\"silver\")\n    for(i = [0:30:330]) {\n        rotate([90, 0, i]) \n        translate([0, 0, 0]) cube([2, 12, 2], center=true);\n    }\n    \n    // Front fender\n    color(\"red\")\n    translate([0, 0, 8]) \n    difference() {\n        cylinder(h=3, d=32);\n        translate([0, 0, -1]) cylinder(h=5, d=28);\n    }\n}\n\nmodule rear_assembly() {\n    // Swingarm\n    color(\"silver\")\n    union() {\n        hull() {\n            translate([0, 0, 10]) sphere(d=4);\n            translate([6, -15, 8]) sphere(d=3);\n            translate([-6, -15, 8]) sphere(d=3);\n        }\n    }\n    \n    // Rear wheel\n    color(\"black\")\n    rotate([90, 0, 0]) cylinder(h=12, d=35, center=true);\n    \n    // Spokes\n    color(\"silver\")\n    for(i = [0:30:330]) {\n        rotate([90, 0, i]) \n        translate([0, 0, 0]) cube([2, 15, 2], center=true);\n    }\n    \n    // Rear fender\n    color(\"red\")\n    translate([0, 0, 12]) \n    difference() {\n        cylinder(h=4, d=38);\n        translate([0, 0, -1]) cylinder(h=6, d=32);\n    }\n}\n\nmodule seat() {\n    color(\"black\")\n    difference() {\n        translate([0, 0, 0]) cube([20, 30, 8], center=true);\n        translate([0, 5, 4]) cube([22, 20, 8], center=true);\n    }\n}\n\nmodule handlebars() {\n    color(\"silver\")\n    union() {\n        // Handlebar clamp\n        translate([0, 0, 0]) cube([15, 4, 6], center=true);\n        \n        // Handlebar tubes\n        translate([8, 0, 3]) rotate([0, 30, 0]) cylinder(h=15, d=3);\n        translate([-8, 0, 3]) rotate([0, 30, 0]) cylinder(h=15, d=3);\n    }\n}\n\nmodule tank() {\n    color(\"red\")\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(d=12);\n            translate([0, 10, 0]) sphere(d=12);\n        }\n        translate([0, 0, -3]) cube([20, 20, 6], center=true);\n    }\n}\n\nmodule exhaust_left() {\n    color(\"silver\")\n    union() {\n        // Header pipe\n        translate([0, 0, 0]) rotate([0, 30, 0]) cylinder(h=20, d=4);\n        \n        // Muffler\n        translate([10, 12, -5]) rotate([0, 0, 30]) cylinder(h=15, d=6);\n    }\n}\n\n// Render the complete chopper\nchopper();",
    "renders": true
  },
  {
    "household_item": "dicer",
    "openscad_code": "// Realistic Dice Roller / Dicer (Medium complexity)\n// Overall size: ~60 mm cube with 16 mm dice\n\n// ----------------- Parameters -----------------\n$fn = 36;\nwall = 2;           // wall thickness for 3D printing\nbase_size = 60;     // outer cube size\ninner_clear = base_size - 2*wall - 4; // clearance inside\ndice_size = 16;     // standard 16 mm die\ngap = 2;            // gap between dice and walls\n\n// ----------------- Modules -----------------\n// Rounded corner cube using hull of spheres\nmodule rounded_cube(size, r, center = false) {\n    translate(center ? -size/2 : [0,0,0])\n    hull() {\n        for(dx = [0,1], dy = [0,1], dz = [0,1])\n            translate([dx*size.x - r, dy*size.y - r, dz*size.z - r])\n                sphere(r);\n    }\n}\n\n// Die with pips\nmodule die(s) {\n    // Main cube body\n    rounded_cube([s, s, s], 2, true);\n    \n    // Pip positions for standard die\n    pip_pos = [\n        [0,0,0],          // 1\n        [-s/4, -s/4, s/2], [s/4, s/4, s/2],  // 2\n        [-s/3, -s/3, s/2], [0,0,s/2], [s/3, s/3, s/2], // 3\n        [-s/3, -s/3, s/2], [s/3, -s/3, s/2], [-s/3, s/3, s/2], [s/3, s/3, s/2], // 4\n        [-s/3, -s/3, s/2], [s/3, -s/3, s/2], [0,0,s/2], [-s/3, s/3, s/2], [s/3, s/3, s/2], // 5\n        [-s/3, -s/3, s/2], [s/3, -s/3, s/2], [-s/3, 0, s/2], [s/3, 0, s/2], [-s/3, s/3, s/2], [s/3, s/3, s/2] // 6\n    ];\n    \n    // Create pips for each face\n    for(face = [0:5]) {\n        rotate([0, face*90, 0]) {\n            for(i = [0:face]) {\n                translate(pip_pos[i])\n                    cylinder(h=1, d=3, $fn=12);\n            }\n        }\n    }\n}\n\n// Dice tower with ramps\nmodule dice_tower() {\n    difference() {\n        // Outer shell\n        rounded_cube([base_size, base_size, base_size], 5, true);\n        \n        // Hollow inside\n        translate([0,0,wall/2])\n            rounded_cube([base_size-2*wall, base_size-2*wall, base_size-wall], 3, true);\n        \n        // Entry slot on top\n        translate([0,0,base_size/2 - wall/2])\n            cube([dice_size+4, dice_size+4, wall+1], center=true);\n        \n        // Exit slot at bottom front\n        translate([0,-base_size/2+wall/2, -base_size/4])\n            cube([dice_size*2, wall+1, dice_size*2], center=true);\n    }\n    \n    // Internal ramps for tumbling\n    for(i = [1:3]) {\n        rotate([0,0,i*20])\n        translate([0, base_size/4 - i*10, base_size/2 - i*15])\n            rotate([45,0,0])\n            cube([base_size-10, 2, 30], center=true);\n    }\n}\n\n// Lid/tray that doubles as rolling surface\nmodule lid() {\n    difference() {\n        // Main lid body\n        translate([0,0,base_size/2 + 2])\n            rounded_cube([base_size+2, base_size+2, 4], 2, true);\n        \n        // Recess for dice storage\n        translate([0,0,base_size/2 + 4])\n            rounded_cube([base_size-6, base_size-6, 2], 1, true);\n    }\n    \n    // Small dice storage compartments\n    for(x = [-1,1], y = [-1,1]) {\n        translate([x*15, y*15, base_size/2 + 5])\n            cylinder(h=3, d=dice_size+4, $fn=24);\n    }\n}\n\n// ----------------- Assembly -----------------\n// Main dice tower\ndice_tower();\n\n// Lid positioned beside the tower\ntranslate([base_size+10,0,0])\n    lid();\n\n// Example dice in storage positions\ntranslate([base_size+10, -15, base_size/2+6])\n    rotate([0,0,45])\n    die(dice_size);\n\ntranslate([base_size+10, 15, base_size/2+6])\n    rotate([0,0,-30])\n    die(dice_size);",
    "renders": true
  },
  {
    "household_item": "mincer",
    "openscad_code": "// Meat mincer - medium complexity realistic style\n// Overall dimensions: ~80mm long, ~60mm tall, ~40mm wide\n\n// Main body cylinder\nmodule body() {\n    difference() {\n        // Main cylinder\n        cylinder(h=50, d=35, $fn=100);\n        \n        // Feed tube hole\n        translate([0, -15, 40])\n            rotate([90, 0, 0])\n            cylinder(h=25, d=28, $fn=50);\n        \n        // Output nozzle hole\n        translate([0, 0, -5])\n            cylinder(h=15, d=12, $fn=50);\n    }\n}\n\n// Feed tube funnel\nmodule feed_tube() {\n    difference() {\n        // Main tube\n        translate([0, -15, 52.5])\n            rotate([90, 0, 0])\n            cylinder(h=25, d1=35, d2=28, $fn=50);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n            cylinder(h=30, d1=32, d2=25, $fn=50);\n    }\n}\n\n// Handle crank\nmodule handle() {\n    // Crank arm\n    translate([17.5, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h=30, d=8, $fn=30);\n    \n    // Handle grip\n    translate([32.5, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h=20, d=12, $fn=30);\n    \n    // Crank knob\n    translate([42.5, 0, 25])\n        sphere(d=15, $fn=30);\n}\n\n// Mounting bracket\nmodule bracket() {\n    // Base plate\n    translate([0, 0, -10])\n        cube([50, 20, 5], center=true);\n    \n    // Mounting holes\n    for(x=[-20, 20])\n        translate([x, 0, -7.5])\n            cylinder(h=10, d=5, $fn=20);\n}\n\n// Screw conveyor (auger)\nmodule auger() {\n    // Central shaft\n    translate([0, 0, 25])\n        cylinder(h=45, d=8, $fn=30);\n    \n    // Spiral blade segments\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 6, 22.5])\n                rotate([90, 0, 0])\n                cylinder(h=15, d=12, $fn=20);\n    }\n}\n\n// Output nozzle\nmodule nozzle() {\n    difference() {\n        // Main nozzle\n        translate([0, 0, -15])\n            cylinder(h=15, d1=20, d2=15, $fn=50);\n        \n        // Inner hole\n        translate([0, 0, -14])\n            cylinder(h=15, d=8, $fn=30);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    body();\n    feed_tube();\n    handle();\n    bracket();\n    \n    // Internal components (visible for realism)\n    translate([0, 0, -5])\n        auger();\n    \n    nozzle();\n}\n\n// Reinforcement rings\ntranslate([0, 0, 45])\n    cylinder(h=5, d=38, $fn=100);\n\ntranslate([0, 0, 5])\n    cylinder(h=5, d=38, $fn=100);",
    "renders": true
  },
  {
    "household_item": "garlicpress",
    "openscad_code": "// Realistic 3D printable garlic press\n// Medium complexity (~120 lines)\n\n// Overall dimensions\npress_length = 95;\npress_width = 40;\nhandle_height = 30;\n\n// Handle profile\nmodule handle_profile(r=8, h=100) {\n    difference() {\n        // Main handle cylinder\n        cylinder(r=r, h=h, $fn=32);\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            translate([0, 0, 15 + i*20]) rotate([0,90,0]) \n                cylinder(r1=8, r2=6, h=4, $fn=16);\n        }\n    }\n}\n\n// Hinge mechanism\nmodule hinge(r=5) {\n    difference() {\n        // Main hinge cylinder\n        cylinder(r=r+2, h=press_width, $fn=32);\n        \n        // Hole for pin\n        cylinder(r=r, h=press_width+2, $fn=32);\n    }\n}\n\n// Pressing chamber\nmodule chamber() {\n    difference() {\n        // Main chamber block\n        translate([0, 0, 0]) cube([45, press_width, 25], center=true);\n        \n        // Cavity for garlic\n        translate([0, 0, -5]) cube([35, press_width-6, 15], center=true);\n        \n        // Holes for garlic extrusion\n        for(x = [-15:5:15]) {\n            for(y = [-15:5:15]) {\n                translate([x, y, 12.5]) cylinder(r=1.5, h=5, $fn=12);\n            }\n        }\n    }\n}\n\n// Top pressing plate\nmodule press_plate() {\n    difference() {\n        // Plate body\n        translate([0, 0, 0]) cube([43, press_width-4, 3], center=true);\n        \n        // Pressing nubs\n        for(x = [-15:5:15]) {\n            for(y = [-15:5:15]) {\n                translate([x, y, -1.5]) cylinder(r=2, h=3, $fn=12);\n            }\n        }\n    }\n}\n\n// Bottom handle with chamber\nmodule bottom_handle() {\n    union() {\n        // Chamber\n        translate([0, 0, -12.5]) chamber();\n        \n        // Handle extension\n        translate([-47.5 + 22.5 + 20, 0, -handle_height/2 - 12.5]) \n            rotate([0, -20, 0]) handle_profile(r=8, h=60);\n        \n        // Hinge part\n        translate([22.5, 0, 12.5]) hinge();\n    }\n}\n\n// Top handle with press plate\nmodule top_handle() {\n    union() {\n        // Press plate\n        translate([0, 0, 12.5 + 1.5]) press_plate();\n        \n        // Handle extension\n        translate([-47.5 + 22.5 + 20, 0, handle_height/2 + 12.5]) \n            rotate([0, 20, 0]) handle_profile(r=8, h=60);\n        \n        // Hinge part\n        translate([22.5, 0, -12.5 - 2]) hinge();\n    }\n}\n\n// Assembly\nunion() {\n    // Bottom handle\n    bottom_handle();\n    \n    // Top handle (rotate for open position)\n    rotate([0, 0, 0]) top_handle();\n    \n    // Optional hinge pin (print separately)\n    // translate([22.5, 0, 0]) cylinder(r=4.8, h=press_width+4, $fn=32);\n}",
    "renders": true
  },
  {
    "household_item": "bottleopener",
    "openscad_code": "// Realistic 3D printable bottle opener\n// Dimensions in mm\n\n// Overall parameters\nhandle_length = 90;\nhandle_width = 30;\nhandle_thickness = 8;\nopener_radius = 15;\nwall_thickness = 3;\n\n// Handle with ergonomic grip\nmodule handle() {\n    // Main handle body\n    difference() {\n        // Tapered handle shape\n        hull() {\n            translate([0, 0, handle_thickness/2])\n                cube([handle_length * 0.8, handle_width, handle_thickness], center=true);\n            translate([handle_length * 0.4, 0, handle_thickness/2])\n                cube([handle_length * 0.6, handle_width * 0.8, handle_thickness], center=true);\n        }\n        \n        // Finger grooves on bottom\n        for(i = [-1:1]) {\n            translate([i * 15, 0, -handle_thickness/2 + 0.5])\n                rotate([0, 90, 0])\n                    cylinder(h=20, r=4, center=true, $fn=20);\n        }\n        \n        // Weight reduction holes\n        translate([handle_length * 0.3, 0, 0])\n            cylinder(h=handle_thickness + 2, r=5, center=true, $fn=20);\n        translate([handle_length * 0.5, 0, 0])\n            cylinder(h=handle_thickness + 2, r=5, center=true, $fn=20);\n    }\n}\n\n// Opener head with bottle cap grip\nmodule opener_head() {\n    // Main opener ring\n    difference() {\n        // Outer ring\n        cylinder(h=handle_thickness, r=opener_radius, center=true, $fn=60);\n        \n        // Inner hole\n        cylinder(h=handle_thickness + 2, r=opener_radius - wall_thickness, center=true, $fn=60);\n        \n        // Opening slot for bottle cap\n        translate([0, -opener_radius, 0])\n            cube([opener_radius * 1.8, opener_radius * 2, handle_thickness + 2], center=true);\n        \n        // Grip teeth\n        for(i = [0:5:355]) {\n            rotate([0, 0, i])\n                translate([opener_radius - wall_thickness - 1, 0, 0])\n                    cube([2, 1.5, handle_thickness + 1], center=true);\n        }\n    }\n}\n\n// Reinforcement rib\nmodule reinforcement() {\n    difference() {\n        // Main rib\n        hull() {\n            translate([handle_length * 0.2, 0, handle_thickness/2])\n                sphere(r=handle_thickness/2, $fn=20);\n            translate([0, 0, handle_thickness/2])\n                sphere(r=handle_thickness * 0.8, $fn=20);\n        }\n        \n        // Remove excess material\n        translate([handle_length * 0.1, 0, 0])\n            cube([handle_length * 0.3, handle_width * 1.2, handle_thickness * 1.5], center=true);\n    }\n}\n\n// Assembly\ntranslate([-handle_length * 0.5, 0, 0])\n    handle();\n\ntranslate([0, 0, 0])\n    opener_head();\n\ntranslate([0, 0, 0])\n    reinforcement();\n\n// Hanging hole\ntranslate([handle_length * 0.45, 0, handle_thickness/2])\n    rotate([90, 0, 0])\n        cylinder(h=handle_width, r=3, center=true, $fn=20);",
    "renders": true
  },
  {
    "household_item": "foil",
    "openscad_code": "// Realistic Foil - Medium Complexity\n// A 3D printable foil with moderate detail\n// Total length: 80mm\n\n$fn = 32; // Smooth curves for printing\n\n// Main parameters\nblade_length = 65;\nblade_width = 10;\nblade_thickness = 2;\nguard_diameter = 22;\nguard_thickness = 4;\nhandle_length = 30;\nhandle_diameter = 12;\npommel_diameter = 15;\npommel_length = 8;\n\n// Blade module - tapered and slightly curved\nmodule blade() {\n    // Create curved blade using hull of tapered sections\n    linear_extrude(height=blade_thickness, center=true) {\n        offset(0.5) {\n            hull() {\n                // Tip\n                translate([blade_length, 0, 0]) \n                    circle(d=1);\n                // Mid section\n                translate([blade_length * 0.7, 0, 0]) \n                    circle(d=blade_width * 0.8);\n                // Base\n                translate([0, 0, 0]) \n                    circle(d=blade_width);\n            }\n        }\n    }\n    \n    // Add fuller groove for strength\n    difference() {\n        translate([blade_length * 0.3, 0, 0])\n            cube([blade_length * 0.6, blade_width * 0.3, blade_thickness + 0.2], center=true);\n        \n        translate([blade_length * 0.3, 0, 0])\n            cube([blade_length * 0.6, blade_width * 0.2, blade_thickness + 0.4], center=true);\n    }\n}\n\n// Guard module - cup-shaped with holes\nmodule guard() {\n    difference() {\n        // Main cup\n        cylinder(h=guard_thickness, d1=guard_diameter, d2=guard_diameter * 0.9);\n        \n        // Center hole for tang\n        cylinder(h=guard_thickness + 1, d=handle_diameter * 0.5);\n        \n        // Ventilation holes\n        for(i = [0:6]) {\n            rotate([0, 0, i * 60]) {\n                translate([guard_diameter * 0.35, 0, -0.5])\n                    cylinder(h=guard_thickness + 1, d=3);\n            }\n        }\n    }\n}\n\n// Handle module - textured grip\nmodule handle() {\n    union() {\n        // Main handle\n        cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip rings\n        for(i = [1:4]) {\n            translate([0, 0, i * (handle_length/5)])\n                cylinder(h=2, d=handle_diameter * 1.1);\n        }\n        \n        // Spiral texture for grip\n        for(angle = [0:30:360]) {\n            rotate([0, 0, angle])\n                translate([handle_diameter/2 + 0.5, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=handle_length, d=1);\n        }\n    }\n}\n\n// Pommel module - counterweight\nmodule pommel() {\n    difference() {\n        // Main pommel\n        cylinder(h=pommel_length, d1=pommel_diameter, d2=pommel_diameter * 0.8);\n        \n        // Tang hole\n        cylinder(h=pommel_length + 1, d=handle_diameter * 0.5);\n    }\n}\n\n// Tang (hidden part connecting blade to handle)\nmodule tang() {\n    cylinder(h=handle_length + pommel_length + guard_thickness, d=handle_diameter * 0.5);\n}\n\n// Assemble the foil\nunion() {\n    // Blade\n    rotate([0, -2, 0]) // Slight upward curve\n        blade();\n    \n    // Guard\n    translate([0, 0, blade_thickness/2 + guard_thickness/2])\n        guard();\n    \n    // Tang\n    translate([0, 0, blade_thickness/2 + guard_thickness/2])\n        rotate([0, 90, 0])\n            tang();\n    \n    // Handle\n    translate([0, 0, blade_thickness/2 + guard_thickness + handle_length/2])\n        rotate([0, 90, 0])\n            handle();\n    \n    // Pommel\n    translate([0, 0, blade_thickness/2 + guard_thickness + handle_length + pommel_length/2])\n        rotate([0, 90, 0])\n            pommel();\n}",
    "renders": true
  },
  {
    "household_item": "plasticwrap",
    "openscad_code": "// Plastic Wrap Dispenser - Realistic Medium Complexity\n// Dimensions: ~80mm wide x 50mm deep x 30mm tall\n\n// Main body dimensions\nbody_width = 80;\nbody_depth = 50;\nbody_height = 25;\nwall_thickness = 2;\n\n// Roll dimensions\nroll_diameter = 40;\nroll_width = 35;\ncore_diameter = 12;\n\n// Cutting edge dimensions\nteeth_width = 1.5;\nteeth_height = 3;\nteeth_spacing = 3;\nteeth_count = floor(body_width / teeth_spacing) - 2;\n\n// Module for cutting teeth\nmodule cutting_teeth() {\n    for(i = [0:teeth_count-1]) {\n        translate([i * teeth_spacing, 0, 0])\n            cube([teeth_width, teeth_height, 2], center = true);\n    }\n}\n\n// Main body with hollow interior\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([body_width, body_depth, body_height], center = false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([body_width - 2*wall_thickness, body_depth - 2*wall_thickness, body_height - wall_thickness], center = false);\n        \n        // Slot for roll access\n        translate([wall_thickness, body_depth - wall_thickness - 2, body_height - 5])\n            cube([body_width - 2*wall_thickness, 2, 5], center = false);\n    }\n}\n\n// Roll holder axle\nmodule roll_axle() {\n    translate([body_width/2 - roll_width/2, body_depth/2 - 5, body_height/2 + 2])\n        rotate([90, 0, 0])\n            cylinder(h = roll_width, d = core_diameter + 1, center = false);\n}\n\n// Roll with plastic wrap\nmodule plastic_roll() {\n    translate([body_width/2 - roll_width/2, body_depth/2 - 5, body_height/2 + 2])\n        rotate([90, 0, 0])\n            difference() {\n                // Roll of plastic\n                cylinder(h = roll_width, d = roll_diameter, center = false);\n                \n                // Core\n                cylinder(h = roll_width + 1, d = core_diameter, center = true);\n            }\n}\n\n// Cutting bar with teeth\nmodule cutting_bar() {\n    translate([0, body_depth - 5, body_height - 1])\n        union() {\n            // Bar base\n            cube([body_width, 5, 2], center = false);\n            \n            // Teeth\n            translate([teeth_spacing, 5, 1])\n                cutting_teeth();\n        }\n}\n\n// Side supports for roll\nmodule side_supports() {\n    for(side = [0, 1]) {\n        translate([side * (body_width - wall_thickness*2), 0, 0])\n            cube([wall_thickness, body_depth, body_height], center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    main_body();\n    \n    // Side supports\n    side_supports();\n    \n    // Roll axle\n    roll_axle();\n    \n    // Plastic roll\n    plastic_roll();\n    \n    // Cutting bar\n    cutting_bar();\n    \n    // Grip texture on sides\n    for(i = [1:3:body_height - 4]) {\n        translate([-wall_thickness/2, 5, i])\n            cube([wall_thickness, body_depth - 10, 2], center = false);\n        translate([body_width - wall_thickness/2, 5, i])\n            cube([wall_thickness, body_depth - 10, 2], center = false);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "parchment",
    "openscad_code": "// Realistic 3D-printable parchment model\n// Overall size ~80 mm (length) x 55 mm (width) x 1.2 mm (thickness)\n\n// Parameters\nparchment_length = 80;\nparchment_width  = 55;\nbase_thickness   = 0.4;\nrelief_height    = 0.8;\nedge_thickness   = 0.6;\n\n// Generate curled parchment sheet\nmodule parchment() {\n    // Main sheet with slight curvature\n    difference() {\n        translate([0, 0, -base_thickness/2])\n            cube([parchment_length, parchment_width, base_thickness], center = true);\n        \n        // Carve gentle curl on front-right corner\n        translate([parchment_length/2 - 8, parchment_width/2 - 8, -base_thickness/2 - 0.1])\n            rotate([0, 45, 0])\n                cylinder(h = base_thickness + 0.2, r = 8, $fn = 20);\n    }\n\n    // Raised surface for realistic fiber texture\n    for (i = [-parchment_length/2 + 2 : 8 : parchment_length/2 - 2])\n        for (j = [-parchment_width/2 + 2 : 6 : parchment_width/2 - 2]) {\n            translate([i, j, base_thickness/2])\n                rotate([0, 0, rand(i, j) * 180])\n                    cylinder(h = relief_height * 0.3, r1 = 1.8, r2 = 1.2, $fn = 6);\n        }\n\n    // Rolled edges to simulate curled parchment\n    // Top edge roll\n    translate([0, parchment_width/2, base_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = parchment_length - 6, r = edge_thickness/2, center = true, $fn = 20);\n\n    // Bottom edge roll\n    translate([0, -parchment_width/2, base_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h = parchment_length - 6, r = edge_thickness/2, center = true, $fn = 20);\n\n    // Left edge roll\n    translate([-parchment_length/2, 0, base_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h = parchment_width - 6, r = edge_thickness/2, center = true, $fn = 20);\n\n    // Right edge roll\n    translate([parchment_length/2, 0, base_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h = parchment_width - 6, r = edge_thickness/2, center = true, $fn = 20);\n\n    // Creases and folds\n    translate([parchment_length/4, 0, base_thickness/2 + relief_height/2])\n        rotate([0, 0, 30])\n            cube([parchment_length/2, 0.5, relief_height], center = true);\n\n    translate([-parchment_length/4, -parchment_width/4, base_thickness/2 + relief_height/2])\n        rotate([0, 0, -15])\n            cube([parchment_length/3, 0.5, relief_height], center = true);\n\n    // Wax seal impression (simple raised circle)\n    translate([parchment_length/3, -parchment_width/3, base_thickness/2 + relief_height/2])\n        cylinder(h = relief_height, r = 4, $fn = 20);\n    translate([parchment_length/3, -parchment_width/3, base_thickness/2 + relief_height + 0.1])\n        cylinder(h = 0.2, r = 3.8, $fn = 20);\n}\n\n// Pseudo-random helper (deterministic)\nfunction rand(x, y) = (sin(x * 12.9898 + y * 78.233) * 43758.5453) % 1;\n\n// Render the parchment\nparchment();",
    "renders": true
  },
  {
    "household_item": "waxpaper",
    "openscad_code": "// Realistic waxpaper roll with serrated cutter, 3D-printable\n// ~80 mm wide, 50 mm diameter roll\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 1;\n\nmodule waxpaper_roll() {\n    // Cardboard core\n    difference() {\n        cylinder(h = 70, d = 38);\n        translate([0, 0, -1])\n            cylinder(h = 72, d = 34);\n    }\n\n    // Waxpaper wrapped around core\n    for (i = [0:89]) {\n        rotate([0, 0, i * 4])\n            translate([19, 0, 0])\n            cube([0.1, 70, 0.2]);\n    }\n\n    // Outer roll thickness\n    difference() {\n        cylinder(h = 70, d = 50);\n        cylinder(h = 70, d = 38);\n    }\n}\n\nmodule cutter_bar() {\n    // Bar body\n    difference() {\n        cube([76, 6, 12]);\n        translate([-1, -1, 4])\n            cube([78, 8, 5]);\n    }\n\n    // Serrated edge\n    for (i = [0:37]) {\n        translate([i * 2 - 37, 3, 6])\n            rotate([90, 0, 0])\n                cylinder(h = 1.5, d1 = 2, d2 = 0.5);\n    }\n\n    // Mounting tabs\n    translate([-38, -3, 6])\n        rotate([90, 0, 0])\n            cylinder(h = 4, d = 3);\n    translate([38, -3, 6])\n        rotate([90, 0, 0])\n            cylinder(h = 4, d = 3);\n}\n\nmodule bracket_left() {\n    difference() {\n        union() {\n            // Base plate\n            cube([10, 15, 3]);\n            // Upright\n            translate([2, 0, 3])\n                cube([6, 15, 30]);\n            // Core holder\n            translate([5, 7.5, 33])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d = 10);\n        }\n        // Hole for core\n        translate([5, 7.5, 33])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 38);\n    }\n}\n\nmodule bracket_right() {\n    mirror([1, 0, 0])\n        bracket_left();\n}\n\nmodule waxpaper_assembly() {\n    // Brackets\n    translate([-40, 0, 0])\n        bracket_left();\n    translate([40, 0, 0])\n        bracket_right();\n\n    // Roll\n    translate([0, 0, 33])\n        waxpaper_roll();\n\n    // Cutter bar\n    translate([0, 15, 35])\n        cutter_bar();\n}\n\n// Render the complete assembly\nscale([scale_factor, scale_factor, scale_factor])\n    waxpaper_assembly();",
    "renders": true
  },
  {
    "household_item": "ziplock",
    "openscad_code": "// Realistic medium-complexity ziplock bag\n// Designed for 3D printing, no overhangs\n\n// Dimensions (mm)\nbag_length = 60;\nbag_height = 50;\nbag_thickness = 0.8;\nwall_thickness = 1.2;\n\n// Zipper track dimensions\nzipper_height = 3;\nzipper_width = 4;\ntooth_width = 0.8;\ntooth_height = 1;\ntooth_spacing = 2.5;\nnum_teeth = floor(bag_length / tooth_spacing);\n\n// Slider dimensions\nslider_length = 8;\nslider_width = 6;\nslider_height = 5;\nslider_clearance = 0.3;\n\n// Grip dimensions\ngrip_width = 8;\ngrip_height = 12;\ngrip_thickness = wall_thickness;\n\n// Main bag body\nmodule bag_body() {\n    difference() {\n        // Front and back walls\n        union() {\n            // Front wall\n            translate([-bag_length/2, -bag_thickness/2, 0])\n                cube([bag_length, bag_thickness, bag_height]);\n            \n            // Back wall\n            translate([-bag_length/2, -bag_thickness/2, 0])\n                mirror([0,1,0])\n                    cube([bag_length, bag_thickness, bag_height]);\n        }\n        \n        // Opening for bag interior\n        translate([-bag_length/2 + wall_thickness, -bag_thickness/2 - 0.1, wall_thickness])\n            cube([bag_length - 2*wall_thickness, bag_thickness + 0.2, bag_height - 2*wall_thickness]);\n    }\n}\n\n// Zipper track teeth\nmodule zipper_track_teeth() {\n    for(i = [0:num_teeth-1]) {\n        x_pos = -bag_length/2 + i * tooth_spacing + tooth_spacing/2;\n        \n        // Top track teeth\n        translate([x_pos, bag_thickness/2, bag_height - zipper_height])\n            cube([tooth_width, zipper_width/2, tooth_height]);\n        \n        // Bottom track teeth\n        translate([x_pos, -bag_thickness/2 - zipper_width/2, bag_height - zipper_height])\n            cube([tooth_width, zipper_width/2, tooth_height]);\n    }\n}\n\n// Zipper track rails\nmodule zipper_track_rails() {\n    // Top rail\n    translate([-bag_length/2 - 1, bag_thickness/2, bag_height - zipper_height])\n        cube([bag_length + 2, zipper_width/2, zipper_height]);\n    \n    // Bottom rail\n    translate([-bag_length/2 - 1, -bag_thickness/2 - zipper_width/2, bag_height - zipper_height])\n        cube([bag_length + 2, zipper_width/2, zipper_height]);\n}\n\n// Slider mechanism\nmodule slider() {\n    difference() {\n        union() {\n            // Main slider body\n            translate([-slider_length/2, -slider_width/2, bag_height - slider_height])\n                cube([slider_length, slider_width, slider_height]);\n            \n            // Top grip\n            translate([-slider_length/2 + 1, -grip_width/2, bag_height + slider_height - grip_height])\n                cube([slider_length - 2, grip_width, grip_height]);\n        }\n        \n        // Cutout for zipper clearance\n        translate([-slider_length/2 - 0.1, -slider_clearance, bag_height - zipper_height - 0.1])\n            cube([slider_length + 0.2, slider_clearance, zipper_height + 0.2]);\n        \n        // Internal channel\n        translate([-slider_length/2 - 0.1, -slider_width/2 + slider_clearance, bag_height - zipper_height - 0.1])\n            cube([slider_length + 0.2, slider_width - 2*slider_clearance, tooth_height + 0.2]);\n    }\n}\n\n// Grip ridges for slider\nmodule grip_ridges() {\n    ridge_spacing = 1.5;\n    num_ridges = floor((slider_length - 2) / ridge_spacing);\n    \n    for(i = [0:num_ridges-1]) {\n        x_pos = -slider_length/2 + 1 + i * ridge_spacing + ridge_spacing/2;\n        translate([x_pos, -grip_width/2 + 0.5, bag_height + slider_height - grip_height/2])\n            cube([0.5, grip_width - 1, 0.5]);\n    }\n}\n\n// Assembly\nunion() {\n    // Bag with zipper tracks\n    union() {\n        bag_body();\n        zipper_track_rails();\n        zipper_track_teeth();\n    }\n    \n    // Slider in closed position (center)\n    translate([0, 0, 0]) {\n        slider();\n        grip_ridges();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "container",
    "openscad_code": "// Realistic pill-style container with screw lid\n// External dimensions: ~55mm diameter, ~35mm height\n// Wall thickness: 1.5mm for 3D printing\n\nmodule rounded_cylinder(h, r, ir) {\n    // Create a cylinder with rounded top and bottom\n    difference() {\n        union() {\n            cylinder(h=h-ir*2, r=r, $fn=64);\n            translate([0,0,h-ir]) sphere(r=r, $fn=64);\n            translate([0,0,ir]) sphere(r=r, $fn=64);\n        }\n        translate([0,0,-1]) cube([r*2,r*2,h+2], center=true);\n    }\n}\n\nmodule screw_thread(height, radius, pitch, turns) {\n    // Generate screw threads using stacked cylinders\n    for(i=[0:turns*10]) {\n        rotate([0,0,i*36/pitch]) \n        translate([0,0,i*height/(turns*10)])\n        cylinder(h=height/(turns*10)+0.1, r=radius, $fn=6);\n    }\n}\n\nmodule container_body() {\n    difference() {\n        // Outer rounded shape\n        rounded_cylinder(h=30, r=27.5, ir=5);\n        \n        // Inner cavity\n        translate([0,0,1.5]) rounded_cylinder(h=27, r=25, ir=3);\n        \n        // Thread cutout for lid\n        translate([0,0,28.5]) \n        cylinder(h=3, r=23.5, $fn=64);\n    }\n}\n\nmodule lid() {\n    difference() {\n        union() {\n            // Main lid shape\n            rounded_cylinder(h=8, r=27.5, ir=5);\n            \n            // Grip ridges\n            for(i=[0:11]) {\n                rotate([0,0,i*30]) \n                translate([20,0,7]) \n                cube([6,2,1], center=true);\n            }\n        }\n        \n        // Inner cavity\n        translate([0,0,1.5]) rounded_cylinder(h=6.5, r=25, ir=3);\n        \n        // Thread core\n        translate([0,0,-1]) \n        cylinder(h=10, r=21, $fn=64);\n    }\n    \n    // Add threads to lid\n    translate([0,0,0.5]) \n    screw_thread(height=4, radius=2.5, pitch=2, turns=2);\n}\n\n// Assembly\ntranslate([0,0,0]) container_body();\ntranslate([0,0,35]) lid();",
    "renders": true
  },
  {
    "household_item": "tupperware",
    "openscad_code": "// Realistic Tupperware Container - Medium Complexity\n// Approx 80mm x 50mm x 35mm\n\n$fn = 32;\n\n// Main parameters\nwall_thickness = 1.5;\nbase_height = 30;\nlid_height = 8;\ncontainer_width = 80;\ncontainer_depth = 50;\ncorner_radius = 5;\n\nmodule container_base() {\n    // Main body with rounded corners\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([container_width - 2*corner_radius, container_depth - 2*corner_radius, base_height], center = true);\n            cylinder(r = corner_radius, h = 0.01, center = true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness/2])\n        minkowski() {\n            cube([container_width - 2*corner_radius - 2*wall_thickness, \n                  container_depth - 2*corner_radius - 2*wall_thickness, \n                  base_height - wall_thickness], center = true);\n            cylinder(r = corner_radius - wall_thickness, h = 0.01, center = true);\n        }\n    }\n    \n    // Bottom reinforcement ribs\n    for(i = [-1, 1]) {\n        translate([i * 25, 0, -base_height/2 + 1])\n        cube([3, container_depth - 10, 2], center = true);\n    }\n}\n\nmodule sealing_rim() {\n    // Rim around top edge for lid seal\n    translate([0, 0, base_height/2])\n    difference() {\n        // Outer rim\n        minkowski() {\n            cube([container_width - 2*corner_radius + 2, \n                  container_depth - 2*corner_radius + 2, 3], center = true);\n            cylinder(r = corner_radius + 1, h = 0.01, center = true);\n        }\n        \n        // Inner cutout for lid\n        translate([0, 0, -1])\n        minkowski() {\n            cube([container_width - 2*corner_radius - 2*wall_thickness + 1, \n                  container_depth - 2*corner_radius - 2*wall_thickness + 1, 5], center = true);\n            cylinder(r = corner_radius - wall_thickness + 0.5, h = 0.01, center = true);\n        }\n    }\n}\n\nmodule lid() {\n    // Main lid body\n    difference() {\n        // Lid top\n        translate([0, 0, lid_height/2])\n        minkowski() {\n            cube([container_width - 2*corner_radius + 1, \n                  container_depth - 2*corner_radius + 1, lid_height], center = true);\n            cylinder(r = corner_radius + 0.5, h = 0.01, center = true);\n        }\n        \n        // Inner recessed area\n        translate([0, 0, lid_height/2 - wall_thickness])\n        minkowski() {\n            cube([container_width - 2*corner_radius - 2*wall_thickness, \n                  container_depth - 2*corner_radius - 2*wall_thickness, \n                  lid_height], center = true);\n            cylinder(r = corner_radius - wall_thickness, h = 0.01, center = true);\n        }\n    }\n    \n    // Sealing lip\n    translate([0, 0, -lid_height/2])\n    difference() {\n        minkowski() {\n            cube([container_width - 2*corner_radius - 1, \n                  container_depth - 2*corner_radius - 1, 2], center = true);\n            cylinder(r = corner_radius - 0.5, h = 0.01, center = true);\n        }\n        \n        translate([0, 0, -1])\n        minkowski() {\n            cube([container_width - 2*corner_radius - 2*wall_thickness - 2, \n                  container_depth - 2*corner_radius - 2*wall_thickness - 2, 4], center = true);\n            cylinder(r = corner_radius - wall_thickness - 1, h = 0.01, center = true);\n        }\n    }\n}\n\nmodule snap_tabs() {\n    // Four snap tabs for lid closure\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (container_width/2 - 8), y * (container_depth/2 - 5), base_height/2 + 2])\n            union() {\n                // Tab base\n                cube([10, 8, 4], center = true);\n                \n                // Snap protrusion\n                translate([x * 3.5, 0, 2])\n                cube([3, 6, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule lid_grips() {\n    // Grips on lid corners for opening\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (container_width/2 - 8), y * (container_depth/2 - 5), lid_height/2 + 2])\n            cube([8, 6, 3], center = true);\n        }\n    }\n}\n\n// Assembly\n// Container base\ncontainer_base();\nsealing_rim();\nsnap_tabs();\n\n// Lid (translate to show assembly)\ntranslate([0, 0, base_height + lid_height + 5]) {\n    lid();\n    lid_grips();\n}",
    "renders": true
  },
  {
    "household_item": "lunchbox",
    "openscad_code": "// Realistic 3D-printable lunchbox\n// Medium complexity with functional hinges and latch\n// Overall size ~80mm x 60mm x 40mm\n\nwall_thickness = 2;\nclearance = 0.3;\nbox_length = 80;\nbox_width = 60;\nbox_height = 40;\n\n$fn = 32;\n\n// Main assembly\nmodule lunchbox() {\n    union() {\n        // Bottom container\n        translate([0, 0, wall_thickness]) \n            lunchbox_bottom();\n        \n        // Top lid (positioned as open)\n        translate([0, 0, box_height + wall_thickness + 5])\n            rotate([60, 0, 0])\n            translate([0, -box_width/2, 0])\n            lunchbox_lid();\n    }\n}\n\nmodule lunchbox_bottom() {\n    difference() {\n        // Outer shell\n        rounded_box(box_length, box_width, box_height, 5);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness]) \n            rounded_box(box_length - 2*wall_thickness, \n                       box_width - 2*wall_thickness, \n                       box_height - wall_thickness, \n                       3);\n        \n        // Hinge pin holes\n        translate([box_length/2 - 10, box_width, box_height - 8])\n            rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5 + clearance/2);\n            \n        translate([box_length/2 + 10, box_width, box_height - 8])\n            rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5 + clearance/2);\n    }\n    \n    // Internal dividers\n    translate([box_length/4, wall_thickness, wall_thickness])\n        cube([wall_thickness, box_width - 2*wall_thickness, box_height - wall_thickness]);\n        \n    translate([3*box_length/4, wall_thickness, wall_thickness])\n        cube([wall_thickness, box_width - 2*wall_thickness, box_height - wall_thickness]);\n}\n\nmodule lunchbox_lid() {\n    difference() {\n        union() {\n            // Lid body\n            rounded_box(box_length, box_width, wall_thickness*2, 5);\n            \n            // Handle\n            translate([0, 0, wall_thickness*2 + 5])\n                handle();\n                \n            // Hinge loops\n            translate([box_length/2 - 10, 0, 0])\n                hinge_loop();\n                \n            translate([box_length/2 + 10, 0, 0])\n                hinge_loop();\n                \n            // Latch\n            translate([-box_length/2 + 10, box_width - wall_thickness, -wall_thickness])\n                latch_hook();\n        }\n        \n        // Food clearance\n        translate([wall_thickness, wall_thickness, -wall_thickness])\n            rounded_box(box_length - 2*wall_thickness, \n                       box_width - 2*wall_thickness, \n                       wall_thickness*2, \n                       3);\n                       \n        // Latch clearance\n        translate([box_length/2 - 5, box_width + clearance, -wall_thickness])\n            cube([10, 5, wall_thickness*3]);\n    }\n}\n\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for(i = [0, 1])\n            for(j = [0, 1])\n                for(k = [0, 1])\n                    translate([i ? l-r : r, j ? w-r : r, k ? h-r : r])\n                        sphere(r = r);\n    }\n}\n\nmodule handle() {\n    // Handle base\n    translate([0, 0, 0])\n        cube([30, wall_thickness*4, 5]);\n    \n    // Handle grip\n    translate([0, wall_thickness*2, 5])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 30, r = 3);\n            cylinder(h = 30.1, r = 2);\n        }\n}\n\nmodule hinge_loop() {\n    difference() {\n        translate([0, 0, box_height/2 - 4])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r = 2.5);\n            \n        translate([0, -1, box_height/2 - 4])\n            rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5);\n    }\n}\n\nmodule latch_hook() {\n    difference() {\n        union() {\n            // Base\n            cube([10, wall_thickness*2, wall_thickness*2]);\n            \n            // Hook\n            translate([5, wall_thickness*2, wall_thickness])\n                rotate([0, 90, 0])\n                cylinder(h = 5, r = 2);\n        }\n        \n        // Clearance for latch\n        translate([5, wall_thickness*2 + 1, wall_thickness])\n            rotate([0, 90, 0])\n            cylinder(h = 6, r = 1.5);\n    }\n}\n\n// Render the lunchbox\nlunchbox();",
    "renders": true
  },
  {
    "household_item": "cooler",
    "openscad_code": "// Realistic medium-complexity cooler\n// Approx 80 mm tall, 3 mm walls for 3D printing\n\n// Main parameters\nwall_th = 3;           // wall thickness\nbody_w = 60;           // outer width\nbody_d = 40;           // outer depth\nbody_h = 50;           // outer height\nlid_h = 10;            // lid thickness\nhandle_r = 3;          // handle radius\nhandle_l = 35;         // handle length\nfeet_h = 4;            // feet height\nhinge_r = 2;           // hinge pin radius\n\n// Main body\nmodule cooler_body() {\n    difference() {\n        // outer shell\n        cube([body_w, body_d, body_h], center = true);\n        \n        // inner cavity\n        translate([0, 0, -wall_th/2])\n            cube([body_w - 2*wall_th, body_d - 2*wall_th, body_h - wall_th], center = true);\n    }\n}\n\n// Drain plug\nmodule drain_plug() {\n    translate([0, body_d/2 - wall_th, -body_h/2 + wall_th + 5])\n        rotate([90, 0, 0])\n            cylinder(h = wall_th*2, r1 = 4, r2 = 3, $fn = 20);\n}\n\n// Rubber feet\nmodule feet() {\n    for (x = [-body_w/2 + 8, body_w/2 - 8])\n        for (y = [-body_d/2 + 8, body_d/2 - 8])\n            translate([x, y, -body_h/2 - feet_h/2])\n                cylinder(h = feet_h, r = 3, $fn = 20);\n}\n\n// Hinge pins\nmodule hinges() {\n    translate([body_w/2 - 5, 0, body_h/2 - hinge_r])\n        cylinder(h = body_d/4, r = hinge_r, center = true, $fn = 20);\n    translate([-body_w/2 + 5, 0, body_h/2 - hinge_r])\n        cylinder(h = body_d/4, r = hinge_r, center = true, $fn = 20);\n}\n\n// Lid with handle\nmodule lid() {\n    difference() {\n        // lid shell\n        translate([0, 0, body_h/2 + lid_h/2])\n            cube([body_w, body_d, lid_h], center = true);\n        \n        // inner relief\n        translate([0, 0, body_h/2 + lid_h/2])\n            cube([body_w - 2*wall_th, body_d - 2*wall_th, lid_h - 1], center = true);\n    }\n    \n    // handle\n    translate([0, 0, body_h/2 + lid_h + handle_r])\n        rotate([90, 0, 0])\n            cylinder(h = handle_l, r = handle_r, center = true, $fn = 20);\n    \n    // handle grips\n    for (i = [-1, 1])\n        translate([0, i * handle_l/3, body_h/2 + lid_h + handle_r])\n            rotate([90, 0, 0])\n                cylinder(h = handle_r*2, r = handle_r + 1, center = true, $fn = 20);\n    \n    // latch\n    translate([0, -body_d/2 + wall_th, body_h/2 + lid_h/2])\n        cube([10, wall_th, 6], center = true);\n}\n\n// Assembly\nunion() {\n    cooler_body();\n    feet();\n    drain_plug();\n    hinges();\n    lid();\n}",
    "renders": true
  },
  {
    "household_item": "icecube",
    "openscad_code": "// Realistic Ice Cube - Medium Complexity\n// 3D printable ice cube with realistic surface details\n\n// Parameters\ncube_size = 50;\ncorner_radius = 5;\nsurface_noise = 2;\ncrack_depth = 4;\nbubble_radius = 3;\nwall_thickness = 2;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [-1, 1], y = [-1, 1], z = [-1, 1]) {\n            translate([x * (size[0]/2 - radius), y * (size[1]/2 - radius), z * (size[2]/2 - radius)])\n                sphere(r = radius);\n        }\n    }\n}\n\nmodule surface_details() {\n    // Add small bumps and dents for realistic ice texture\n    difference() {\n        union() {\n            // Main cube shape\n            rounded_cube([cube_size, cube_size, cube_size], corner_radius);\n            \n            // Small surface bumps\n            for(i = [0:7]) {\n                for(j = [0:7]) {\n                    for(k = [0:7]) {\n                        if(i % 2 == 0 && j % 2 == 0 && k % 2 == 0) {\n                            translate([\n                                i * (cube_size/8) - cube_size/2 + cube_size/16,\n                                j * (cube_size/8) - cube_size/2 + cube_size/16,\n                                k * (cube_size/8) - cube_size/2 + cube_size/16\n                            ])\n                                sphere(r = surface_noise + sin(i*j*k) * 0.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Surface cracks\n        rotate([0, 45, 0])\n            translate([0, 0, -cube_size/2])\n                cube([2*crack_depth, 15, cube_size], center = true);\n        \n        rotate([0, -30, 0])\n            translate([0, 0, -cube_size/2])\n                cube([2*crack_depth, 10, cube_size], center = true);\n        \n        rotate([0, 0, 45])\n            translate([0, 0, -cube_size/2])\n                cube([2*crack_depth, 12, cube_size], center = true);\n    }\n}\n\nmodule air_bubbles() {\n    // Internal air bubbles found in real ice\n    difference() {\n        surface_details();\n        \n        // Main bubble\n        translate([10, 5, -5])\n            sphere(r = bubble_radius);\n        \n        // Smaller bubbles\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([15, 8, -8])\n                    sphere(r = bubble_radius * 0.6);\n        }\n        \n        // Tiny bubbles\n        for(i = [0:5]) {\n            for(j = [0:3]) {\n                rotate([0, 0, j * 60])\n                    translate([\n                        5 + i * 3,\n                        5 + i * 2,\n                        -3 - i * 2\n                    ])\n                        sphere(r = bubble_radius * 0.3);\n            }\n        }\n    }\n}\n\nmodule melt_marks() {\n    // Subtle rounding at edges to simulate melting\n    difference() {\n        air_bubbles();\n        \n        // Top edge rounding\n        translate([0, 0, cube_size/2 + 1])\n            cube([cube_size + 2, cube_size + 2, 2], center = true);\n        \n        // Bottom edge rounding\n        translate([0, 0, -cube_size/2 - 1])\n            cube([cube_size + 2, cube_size + 2, 2], center = true);\n    }\n}\n\n// Final assembly with proper wall thickness for 3D printing\ndifference() {\n    melt_marks();\n    \n    // Hollow center with proper wall thickness\n    rounded_cube([\n        cube_size - 2*wall_thickness,\n        cube_size - 2*wall_thickness,\n        cube_size - 2*wall_thickness\n    ], corner_radius - wall_thickness);\n}\n\n// Drain hole at bottom for printing\ntranslate([0, 0, -cube_size/2 + wall_thickness/2])\n    cylinder(r = wall_thickness, h = wall_thickness, center = true);",
    "renders": true
  },
  {
    "household_item": "tray",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Tray\n// Overall dimensions ~80 x 60 x 12 mm\n\n// Wall and floor thickness\nwall = 2.5;\n\n// Outer tray shell\nmodule tray_shell() {\n    // Outer base\n    difference() {\n        cube([80, 60, 12], center = true);\n\n        // Hollow cavity\n        translate([0, 0, -wall/2])\n            cube([80 - 2*wall, 60 - 2*wall, 12], center = true);\n    }\n}\n\n// Rounded inner corners using cylinders\nmodule inner_rounded() {\n    // Parameters for inner rounding\n    radius = 6;\n    height = 12 - wall;\n    \n    // Create four corner cylinders\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (80/2 - wall - radius), y * (60/2 - wall - radius), 0])\n                rotate([0, 0, 45])\n                    cylinder(h = height, r = radius, center = true);\n}\n\n// Drainage holes at bottom corners\nmodule drainage_holes() {\n    hole_d = 3;\n    hole_h = wall + 1;\n    \n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (80/2 - 15), y * (60/2 - 15), -12/2 + hole_h/2])\n                cylinder(h = hole_h, d = hole_d, center = true, $fn = 20);\n}\n\n// Raised bottom ribs for stiffness\nmodule bottom_ribs() {\n    rib_w = 2;\n    rib_h = 1.5;\n    \n    // Longitudinal ribs\n    for (i = [-1:1]) {\n        translate([i * 20, 0, -12/2 + rib_h/2])\n            cube([80/4 - rib_w, 60 - 2*wall, rib_h], center = true);\n    }\n    \n    // Transverse ribs\n    for (j = [-1:1]) {\n        translate([0, j * 15, -12/2 + rib_h/2])\n            cube([80 - 2*wall, 60/4 - rib_w, rib_h], center = true);\n    }\n}\n\n// Optional handle cutouts on short sides\nmodule handle_cutouts() {\n    cut_w = 20;\n    cut_h = 8;\n    cut_d = 4;\n    \n    for (side = [-1, 1]) {\n        translate([0, side * (60/2 - cut_d/2), 0])\n            cube([cut_w, cut_d, cut_h], center = true);\n    }\n}\n\n// Main assembly\ndifference() {\n    // Build outer shell and inner rounding\n    union() {\n        tray_shell();\n        \n        // Intersect rounded corners with inner cavity\n        intersection() {\n            inner_rounded();\n            translate([0, 0, -wall/2])\n                cube([80 - 2*wall, 60 - 2*wall, 12], center = true);\n        }\n    }\n    \n    // Remove drainage holes\n    drainage_holes();\n    \n    // Remove handle cutouts\n    handle_cutouts();\n}\n\n// Add bottom ribs\nbottom_ribs();",
    "renders": true
  },
  {
    "household_item": "platter",
    "openscad_code": "// Realistic Medium-Complexity Platter\n// Diameter 90 mm, Height 12 mm, wall 2 mm – printable without support\n\n$fn = 36;\n\n// ---------------------------\n// Main platter body\n// ---------------------------\nmodule platter_base() {\n    difference() {\n        // Solid disc\n        cylinder(h = 12, d = 90, center = true);\n\n        // Hollow cavity\n        translate([0, 0, 1])\n            cylinder(h = 14, d = 86, center = true);\n    }\n}\n\n// ---------------------------\n// Raised rim on top\n// ---------------------------\nmodule rim() {\n    difference() {\n        // Outer ring\n        cylinder(h = 3, d = 90, center = true);\n\n        // Inner cut\n        translate([0, 0, -0.5])\n            cylinder(h = 4, d = 84, center = true);\n    }\n}\n\n// ---------------------------\n// Gentle inner raised ring to keep items centered\n// ---------------------------\nmodule center_ring() {\n    difference() {\n        cylinder(h = 1.5, d = 40, center = true);\n        translate([0, 0, -0.5])\n            cylinder(h = 2.5, d = 36, center = true);\n    }\n}\n\n// ---------------------------\n// Small drainage/vent holes in bottom (optional for print reliability)\n// ---------------------------\nmodule vent_holes() {\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([35, 0, -6])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, d = 3, center = true);\n    }\n}\n\n// ---------------------------\n// Slight foot to lift platter 1 mm off table\n// ---------------------------\nmodule foot() {\n    difference() {\n        cylinder(h = 1.5, d = 80, center = true);\n        translate([0, 0, -0.5])\n            cylinder(h = 2.5, d = 78, center = true);\n    }\n}\n\n// ---------------------------\n// Assembly\n// ---------------------------\nunion() {\n    platter_base();\n    translate([0, 0, 4.5]) rim();\n    translate([0, 0, 1]) center_ring();\n    translate([0, 0, -5.25]) foot();\n    difference() {\n        platter_base();\n        vent_holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "dish",
    "openscad_code": "// Realistic 3D printable dish (bowl)\n// Medium complexity with foot ring and smooth walls\n// Overall size ~80 mm diameter\n\n// Parameters\nwall_thick = 2.2;        // 3D-printable wall thickness\nbase_thick = 3.0;        // Base plate thickness\nfoot_h = 2.5;            // Foot ring height\nfoot_gap = 1.0;          // Gap between foot and bowl bottom\nrim_h = 4.0;             // Rim height above bowl wall\ndiam = 78;               // Outer diameter\nheight = 38;             // Total height\nsegments = 128;          // Smooth curves\n\n// Module to make a hollow frustum (truncated cone)\nmodule hollow_frustum(od1, od2, h, wall) {\n    difference() {\n        cylinder(d1=od1, d2=od2, h=h, $fn=segments);\n        translate([0,0,wall])\n            cylinder(d1=od1-2*wall, d2=od2-2*wall, h=h-wall, $fn=segments);\n    }\n}\n\n// Main bowl shell\ndifference() {\n    // Outer bowl\n    union() {\n        // Main bowl body\n        hollow_frustum(od1=diam, od2=diam*0.65, h=height-base_thick, wall=wall_thick);\n        \n        // Rim flare\n        translate([0,0,height-base_thick-rim_h])\n            cylinder(d=diam+wall_thick*2, h=rim_h, $fn=segments);\n    }\n    \n    // Cut interior cavity\n    translate([0,0,rim_h])\n        cylinder(d=diam-wall_thick*2, h=height-rim_h, $fn=segments);\n}\n\n// Base plate\ndifference() {\n    // Solid base\n    cylinder(d=diam, h=base_thick, $fn=segments);\n    \n    // Cavity under bowl\n    translate([0,0,base_thick-foot_gap-foot_h])\n        cylinder(d=diam-wall_thick*4, h=foot_gap+foot_h, $fn=segments);\n}\n\n// Foot ring\ndifference() {\n    // Outer foot\n    cylinder(d=diam-wall_thick*6, h=foot_h, $fn=segments);\n    \n    // Inner cutout for foot\n    cylinder(d=diam-wall_thick*10, h=foot_h, $fn=segments);\n}\n\n// Optional subtle fillets at sharp edges\nmodule fillet_edge(r, z) {\n    translate([0,0,z])\n        rotate_extrude($fn=segments)\n            translate([diam/2-r,0,0])\n                circle(r=r);\n}\n\n// Small inner fillet at base\ntranslate([0,0,base_thick])\n    difference() {\n        cylinder(d=diam-wall_thick*2, h=1.5, $fn=segments);\n        translate([0,0,1.5])\n            cylinder(d=diam-wall_thick*2-2*1.5, h=1.5, $fn=segments);\n    }",
    "renders": true
  },
  {
    "household_item": "saucer",
    "openscad_code": "// OpenSCAD Saucer – realistic style, medium complexity\n// Overall size: ~85 mm Ø × 25 mm high\n\n// Base parameters\nwall = 1.2;             // printable wall thickness\nbase_d = 85;            // overall diameter\nbase_h = 8;             // lower disc thickness\nbowl_d = 80;            // inner bowl diameter\nbowl_h = 12;            // inner bowl depth\nlip_h = 3;              // outer lip height\nfoot_d = 35;            // base-ring contact diameter\nfoot_h = 2;             // base-ring height\ngroove_w = 1.5;         // concentric groove width\ngroove_d = 0.6;         // groove depth\ngrooves = 6;            // number of grip grooves on base\n\n// Build the saucer\nunion() {\n    // 1.  Main disc body\n    difference() {\n        // outside disc\n        cylinder(d = base_d, h = base_h, $fn = 120);\n        // hollow out inside\n        translate([0, 0, -0.01])\n            cylinder(d = base_d - 2*wall, h = base_h + 0.02, $fn = 120);\n    }\n\n    // 2.  Central bowl (eating surface)\n    translate([0, 0, base_h - 0.01])\n    difference() {\n        sphere(d = bowl_d, $fn = 120);\n        // cut bottom half\n        translate([0, 0, -bowl_h/2 - 0.01])\n            cube([bowl_d + 2, bowl_d + 2, bowl_h + 0.02], center = true);\n        // remove centre stem\n        translate([0, 0, -bowl_h*2])\n            cylinder(d = 5, h = bowl_h*4, $fn = 32);\n    }\n\n    // 3.  Outer lip ring\n    translate([0, 0, base_h])\n    difference() {\n        cylinder(d1 = base_d, d2 = base_d - 4, h = lip_h, $fn = 120);\n        cylinder(d1 = base_d - 2*wall, d2 = base_d - 4 - 2*wall, h = lip_h + 0.02, $fn = 120);\n    }\n\n    // 4.  Base ring (foot)\n    translate([0, 0, -foot_h])\n    difference() {\n        cylinder(d = foot_d + 2*wall, h = foot_h, $fn = 120);\n        cylinder(d = foot_d, h = foot_h + 0.02, $fn = 120);\n    }\n\n    // 5.  Concentric grip grooves on base\n    module groove(r) {\n        rotate_extrude($fn = 120)\n            translate([r, 0, 0])\n                square([groove_w, groove_d]);\n    }\n    for (i = [1: grooves])\n        groove(foot_d/2 + wall + i*3);\n}",
    "renders": true
  },
  {
    "household_item": "ramekin",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Ramekin\n// Outer diameter ≈ 80 mm, height ≈ 40 mm, wall ≈ 2 mm\n\n$fn = 64;          // smooth curves\nwall = 2;          // wall thickness for printing\nbase_h = 5;        // bottom base height\nrim_h = 3;         // top rim height\nd_out = 80;        // outer diameter\nd_in = d_out - 2*wall;\nh_body = 35;       // body height\n\n// Base with slight taper\nmodule base() {\n    difference() {\n        cylinder(h = base_h, d1 = d_out*0.9, d2 = d_out, center = false);\n        translate([0,0,-0.1])\n            cylinder(h = base_h+0.2, d1 = d_out*0.9 - 2*wall, d2 = d_in, center = false);\n    }\n}\n\n// Main bowl body with gentle slope\nmodule bowl() {\n    difference() {\n        cylinder(h = h_body, d1 = d_out, d2 = d_in*0.85, center = false);\n        translate([0,0,wall])\n            cylinder(h = h_body, d1 = d_in, d2 = d_in*0.85 - wall, center = false);\n    }\n}\n\n// Top rim with subtle flare\nmodule rim() {\n    difference() {\n        translate([0,0,h_body])\n            cylinder(h = rim_h, d1 = d_out, d2 = d_out*1.05, center = false);\n        translate([0,0,h_body+wall])\n            cylinder(h = rim_h, d1 = d_in, d2 = d_out*1.05 - wall, center = false);\n    }\n}\n\n// Small foot ring on bottom for print stability\nmodule foot() {\n    difference() {\n        cylinder(h = 1, d = d_out*0.6, center = false);\n        cylinder(h = 1.2, d = d_out*0.6 - wall, center = false);\n    }\n}\n\n// Interior curve smoothing (subtractive fillet)\nmodule interior_fillet() {\n    for (i = [0:3]) {\n        rotate([0,0,i*90])\n            translate([d_in/2 - wall/2, 0, h_body - wall])\n                rotate([0,90,0])\n                    scale([1,1,0.5])\n                        sphere(r = wall, $fn=16);\n    }\n}\n\n// Exterior base fillet (additive)\nmodule exterior_fillet() {\n    for (i = [0:3]) {\n        rotate([0,0,i*90])\n            translate([d_out/2 - wall, 0, base_h])\n                rotate([0,90,0])\n                    scale([1,1,0.5])\n                        sphere(r = wall, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0,0,base_h]) bowl();\n    rim();\n    translate([0,0,-1]) foot();\n    exterior_fillet();\n}\n\ndifference() {\n    children();\n    interior_fillet();\n}",
    "renders": true
  },
  {
    "household_item": "custardcup",
    "openscad_code": "// Realistic Custard Cup - Medium Complexity\n// 3D printable custard cup with realistic features\n\n// Cup parameters\ncup_height = 45;\ncup_outer_radius = 35;\ncup_inner_radius = 32;\nwall_thickness = 3;\nbase_thickness = 4;\nrim_thickness = 2;\n\n// Handle parameters\nhandle_width = 8;\nhandle_height = 25;\nhandle_clearance = 10;\nhandle_radius = 3;\n\n// Decorative ring parameters\nring_count = 3;\nring_depth = 1;\nring_spacing = 8;\n\n// Base parameters\nbase_radius = 38;\nbase_height = 5;\n\n// Main cup body\nmodule cup_body() {\n    difference() {\n        // Outer cup shape\n        cylinder(h = cup_height, r1 = cup_outer_radius, r2 = cup_outer_radius * 0.9, $fn = 64);\n        \n        // Inner cavity\n        translate([0, 0, base_thickness])\n            cylinder(h = cup_height - base_thickness + 1, r1 = cup_inner_radius, r2 = cup_inner_radius * 0.9, $fn = 64);\n    }\n}\n\n// Reinforced base\nmodule cup_base() {\n    union() {\n        // Main base\n        cylinder(h = base_height, r = base_radius, $fn = 64);\n        \n        // Tapered transition\n        translate([0, 0, base_height])\n            cylinder(h = 3, r1 = base_radius, r2 = cup_outer_radius, $fn = 64);\n    }\n}\n\n// Rounded rim\nmodule cup_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, cup_height - rim_thickness])\n            cylinder(h = rim_thickness + 1, r = cup_outer_radius + 1, $fn = 64);\n        \n        // Inner cut\n        translate([0, 0, cup_height - rim_thickness])\n            cylinder(h = rim_thickness + 2, r = cup_inner_radius, $fn = 64);\n    }\n    \n    // Smooth rounded edge\n    translate([0, 0, cup_height])\n        scale([cup_outer_radius, cup_outer_radius, rim_thickness])\n        sphere(r = 1, $fn = 32);\n}\n\n// Handle with ergonomic grip\nmodule cup_handle() {\n    // Connection points\n    translate([cup_outer_radius, 0, cup_height * 0.7])\n        sphere(r = handle_radius, $fn = 16);\n    \n    translate([cup_outer_radius, 0, cup_height * 0.3])\n        sphere(r = handle_radius, $fn = 16);\n    \n    // Main handle curve\n    hull() {\n        translate([cup_outer_radius, 0, cup_height * 0.7])\n            sphere(r = handle_radius, $fn = 16);\n        \n        translate([cup_outer_radius + handle_clearance, 0, cup_height * 0.5])\n            sphere(r = handle_radius, $fn = 16);\n        \n        translate([cup_outer_radius, 0, cup_height * 0.3])\n            sphere(r = handle_radius, $fn = 16);\n    }\n}\n\n// Decorative rings\nmodule decorative_rings() {\n    for(i = [1:ring_count]) {\n        ring_z = base_height + 5 + (i * ring_spacing);\n        if(ring_z < cup_height - 10) {\n            difference() {\n                cylinder(h = 2, r = cup_outer_radius + 0.5, $fn = 64);\n                cylinder(h = 2.1, r = cup_outer_radius - ring_depth, $fn = 64);\n            }\n            translate([0, 0, ring_z])\n                scale([1, 1, 0.5])\n                sphere(r = cup_outer_radius + 0.5, $fn = 64);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    cup_base();\n    \n    // Main cup\n    translate([0, 0, base_height])\n        cup_body();\n    \n    // Rim\n    translate([0, 0, 0])\n        cup_rim();\n    \n    // Handle\n    cup_handle();\n    \n    // Decorative elements\n    translate([0, 0, 0])\n        decorative_rings();\n}",
    "renders": true
  },
  {
    "household_item": "muffintin",
    "openscad_code": "// Muffin Tin - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm x 75mm x 25mm (including handles)\n\n// Parameters\ntin_length = 100;\ntin_width = 75;\ntin_height = 20;\nwall_thickness = 2;\nhandle_length = 15;\nhandle_height = 8;\nhandle_width = 6;\n\ncup_radius = 15;\ncup_depth = 12;\ncup_wall = 1.5;\ncups_x = 3;\ncups_y = 2;\n\n// Main tin body with rounded edges\nmodule tin_body() {\n    difference() {\n        // Outer rounded shell\n        hull() {\n            for(i = [[-1,-1,1], [1,-1,1], [1,1,1], [-1,1,1]])\n                translate([i[0]*(tin_length/2-wall_thickness), i[1]*(tin_width/2-wall_thickness), tin_height/2])\n                    sphere(r=wall_thickness);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness/2])\n            cube([tin_length-wall_thickness*2, tin_width-wall_thickness*2, tin_height+wall_thickness], center=true);\n        \n        // Top opening\n        translate([0, 0, tin_height])\n            cube([tin_length+1, tin_width+1, wall_thickness], center=true);\n    }\n}\n\n// Cup module\nmodule muffin_cup() {\n    difference() {\n        // Outer cup\n        cylinder(h=cup_depth, r=cup_radius, $fn=32);\n        \n        // Inner cavity\n        translate([0, 0, cup_wall])\n            cylinder(h=cup_depth-cup_wall, r=cup_radius-cup_wall, $fn=32);\n        \n        // Rounded bottom\n        translate([0, 0, cup_depth-cup_radius])\n            sphere(r=cup_radius);\n        \n        // Remove bottom sphere from inner\n        translate([0, 0, cup_depth-cup_radius+cup_wall])\n            sphere(r=cup_radius-cup_wall);\n    }\n}\n\n// Handle module\nmodule handle(side) {\n    translate([side*(tin_length/2+handle_length/2), 0, handle_height/2]) {\n        difference() {\n            // Main handle\n            cube([handle_length, handle_width, handle_height], center=true);\n            \n            // Finger grip\n            translate([side*handle_length/4, 0, handle_height/2-handle_width/4])\n                cube([handle_length/2, handle_width*1.2, handle_width/2], center=true);\n            \n            // Rounded edges\n            for(i = [[-1,-1], [1,-1], [1,1], [-1,1]])\n                translate([i[0]*(handle_length/2-handle_width/4), i[1]*(handle_width/2-handle_width/4), handle_height/2])\n                    sphere(r=handle_width/4);\n        }\n    }\n}\n\n// Generate all muffin cups\nmodule all_cups() {\n    spacing_x = tin_length / (cups_x + 1);\n    spacing_y = tin_width / (cups_y + 1);\n    \n    for(x = [1:cups_x]) {\n        for(y = [1:cups_y]) {\n            translate([\n                x*spacing_x - tin_length/2,\n                y*spacing_y - tin_width/2,\n                tin_height - cup_depth\n            ]) {\n                muffin_cup();\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    tin_body();\n    all_cups();\n    handle(1);\n    handle(-1);\n}",
    "renders": true
  },
  {
    "household_item": "loafpan",
    "openscad_code": "// Realistic 3D-printable loafpan\n// External dimensions: 95 mm x 55 mm x 35 mm\n\nwall = 2;       // wall thickness, mm\nfillet = 3;     // inner bottom fillet radius, mm\ndraft = 2;      // draft angle for easy release, degrees\n\nmodule roundedRect(xy, z, r) {\n    // helper: box with rounded vertical edges\n    hull() {\n        for(dx = [-1,1], dy = [-1,1])\n            translate([dx*(xy[0]/2 - r), dy*(xy[1]/2 - r), 0])\n                cylinder(r = r, h = z, $fn = 16);\n    }\n}\n\nmodule panBody() {\n    // outer shell\n    difference() {\n        // main block\n        roundedRect([95, 55, 35], 35, 5);\n\n        // hollow cavity\n        translate([0, 0, wall])\n            roundedRect([95 - 2*wall, 55 - 2*wall, 35], 35 - wall, fillet);\n    }\n\n    // bottom plate (adds thickness under cavity)\n    translate([0, 0, -wall])\n        roundedRect([95, 55, wall], wall, 5);\n}\n\nmodule lip() {\n    // rolled rim around top for stiffness\n    rimH = 2;\n    rimOver = 2;\n    difference() {\n        roundedRect([95 + 2*rimOver, 55 + 2*rimOver, rimH], rimH, 5);\n        translate([0, 0, -0.01])\n            roundedRect([95, 55, rimH + 0.02], rimH + 0.01, 5);\n    }\n}\n\nmodule handles() {\n    // simple tab handles on short sides\n    handleW = 8;\n    handleL = 15;\n    handleH = 4;\n    for(side = [-1, 1])\n        translate([0, side*(55/2 + handleL/2), 35/2 - handleH/2])\n            roundedRect([handleW, handleL, handleH], handleH, 2);\n}\n\n// apply draft angle to inner cavity for printability\ndifference() {\n    panBody();\n    // taper inner walls slightly\n    translate([0, 0, wall])\n        scale([1, 1 - sin(draft)*0.03, 1])\n            translate([0, 0, -wall/2])\n                roundedRect([95 - 2*wall + 0.5, 55 - 2*wall + 0.5, 35 + wall], 35 - wall, fillet);\n}\n\ntranslate([0, 0, 35])\n    lip();\n\nhandles();",
    "renders": true
  },
  {
    "household_item": "pieplate",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Pie Plate\n// Outer diameter ≈ 90 mm, height ≈ 20 mm, wall thickness 2 mm\n\n$fn = 50;                // Smooth curves\n\n// Parameters\nd_out = 90;              // Outer diameter\nd_in  = d_out - 4;       // Inner diameter\nh_rim = 8;               // Height of vertical rim\nh_base = 4;              // Height of sloped base\nthick = 2;               // Wall thickness\nn_flutes = 36;           // Number of flutes on rim\nflute_depth = 1.2;       // Flute indent depth\nn_ridges = 8;            // Number of ridges on underside\nridge_h = 0.8;           // Ridge height\n\nmodule pie_plate() {\n    difference() {\n        // Main solid plate\n        union() {\n            // Outer rim cylinder\n            cylinder(d = d_out, h = h_rim + h_base);\n\n            // Sloped base cone\n            translate([0, 0, h_rim])\n                cylinder(d1 = d_out, d2 = d_in, h = h_base);\n        }\n\n        // Hollow out inside\n        translate([0, 0, thick])\n            cylinder(d = d_in, h = h_rim + h_base);\n    }\n\n    // Fluted rim\n    for (i = [0 : n_flutes-1]) {\n        angle = i * 360 / n_flutes;\n        rotate([0, 0, angle])\n            translate([d_out/2 - flute_depth/2, 0, thick])\n                cube([flute_depth, 1.5, h_rim - thick], center = true);\n    }\n\n    // Underside ridges for strength and print adhesion\n    for (i = [0 : n_ridges-1]) {\n        angle = i * 360 / n_ridges;\n        rotate([0, 0, angle])\n            translate([0, 0, 0])\n                cube([d_out - 2*thick, ridge_h, thick*0.8], center = true);\n    }\n\n    // Small fillet on inner edge to ease print and cleaning\n    translate([0, 0, h_rim + h_base - thick])\n        cylinder(d = d_in, h = thick);\n}\n\npie_plate();",
    "renders": true
  },
  {
    "household_item": "caketin",
    "openscad_code": "// Realistic Cake Tin - Medium Complexity\n// Base tin with lid, handles, and realistic proportions\n\n$fn = 50;  // Smooth curves for printing\n\n// Overall dimensions\ntin_diameter = 80;\ntin_height = 40;\nwall_thickness = 2;\nbase_thickness = 3;\n\n// Handle parameters\nhandle_width = 20;\nhandle_height = 8;\nhandle_thickness = 3;\n\n// Lip for lid fitting\nlip_height = 4;\nlip_thickness = 1.5;\n\n// Create the base tin\nmodule base_tin() {\n    difference() {\n        // Main tin body - cylinder with rounded bottom\n        union() {\n            // Cylindrical wall\n            cylinder(h=tin_height, r=tin_diameter/2, center=false);\n            \n            // Rounded bottom using hemisphere\n            translate([0, 0, -tin_diameter/4])\n                scale([1, 1, 0.5])\n                sphere(r=tin_diameter/2);\n        }\n        \n        // Hollow out the interior\n        translate([0, 0, base_thickness])\n            cylinder(h=tin_height*2, r=(tin_diameter/2)-wall_thickness, center=false);\n        \n        // Cut bottom flat\n        translate([0, 0, -tin_diameter/4-1])\n            cube([tin_diameter*2, tin_diameter*2, tin_diameter/4], center=true);\n    }\n    \n    // Add lip for lid fitting\n    translate([0, 0, tin_height])\n        difference() {\n            cylinder(h=lip_height, r=tin_diameter/2+lip_thickness, center=false);\n            cylinder(h=lip_height+1, r=tin_diameter/2, center=false);\n        }\n}\n\n// Create the lid\nmodule lid() {\n    difference() {\n        // Main lid disk\n        cylinder(h=wall_thickness*1.5, r=tin_diameter/2+lip_thickness, center=false);\n        \n        // Inner lip to fit tin\n        translate([0, 0, -1])\n            cylinder(h=lip_height+2, r=tin_diameter/2-lip_thickness, center=false);\n    }\n    \n    // Add handles - two opposing handles\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle])\n            translate([tin_diameter/2-handle_thickness, 0, wall_thickness*1.5])\n                handle();\n    }\n}\n\n// Handle module for reusability\nmodule handle() {\n    // Main grip bar\n    translate([handle_width/2, 0, handle_height/2])\n        cube([handle_width, handle_thickness, handle_height], center=true);\n    \n    // Support arms\n    translate([0, 0, handle_height/2])\n        cube([handle_thickness, handle_thickness, handle_height], center=true);\n    \n    translate([handle_width, 0, handle_height/2])\n        cube([handle_thickness, handle_thickness, handle_height], center=true);\n}\n\n// Render the complete model\n// Uncomment as needed for printing\n\n// Just the base tin\nbase_tin();\n\n// Tin with lid - translate lid up for visibility\ntranslate([0, tin_diameter+20, 0]) {\n    lid();\n    translate([0, 0, -5])  // Show lid slightly offset\n        base_tin();\n}",
    "renders": true
  },
  {
    "household_item": "springform",
    "openscad_code": "// Realistic Springform Pan - Medium Complexity\n// Designed for 3D printing at 90mm diameter\n\n// Parameters\n$fn = 64;\nbase_diameter = 90;\nbase_height = 5;\nwall_thickness = 2.5;\nwall_height = 25;\nbottom_thickness = 2.5;\nspring_width = 8;\nspring_thickness = 3;\nlatch_width = 15;\nlatch_depth = 3;\ngrip_height = 8;\ngrip_width = 6;\nseam_clearance = 0.2;\n\n// Main assembly\nmodule springform() {\n    // Base with removable bottom\n    translate([0, 0, 0])\n        base_assembly();\n    \n    // Ring with spring latch\n    translate([0, 0, base_height])\n        ring_assembly();\n}\n\n// Base assembly\nmodule base_assembly() {\n    difference() {\n        // Base disk\n        cylinder(h=base_height, d=base_diameter);\n        \n        // Center hole for easier printing\n        cylinder(h=base_height+1, d=base_diameter-10);\n    }\n    \n    // Bottom removable plate\n    translate([0, 0, base_height-bottom_thickness])\n        removable_bottom();\n}\n\n// Removable bottom plate\nmodule removable_bottom() {\n    difference() {\n        // Main plate\n        cylinder(h=bottom_thickness, d=base_diameter-2*wall_thickness);\n        \n        // Center depression for strength\n        cylinder(h=bottom_thickness-1, d=base_diameter-2*wall_thickness-20);\n        \n        // Handle hole\n        translate([0, base_diameter/2 - wall_thickness - 5, -1])\n            cube([8, 10, bottom_thickness+2], center=true);\n    }\n}\n\n// Ring assembly with spring mechanism\nmodule ring_assembly() {\n    difference() {\n        // Main ring wall\n        cylinder(h=wall_height, d=base_diameter, d2=base_diameter+2);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=wall_height+2, d=base_diameter-2*wall_thickness);\n    }\n    \n    // Spring latch mechanism\n    translate([base_diameter/2, 0, wall_height/2])\n        rotate([0, 0, 0])\n            spring_latch();\n    \n    // Grip handles on opposite sides\n    translate([0, 0, wall_height-5])\n        grip_handles();\n}\n\n// Spring latch mechanism\nmodule spring_latch() {\n    // Main spring housing\n    translate([spring_width/2, 0, 0])\n        cube([spring_width, spring_thickness*2, wall_height-5], center=true);\n    \n    // Latch hook\n    translate([spring_width, 0, wall_height/2-5])\n        cube([latch_width, latch_depth, wall_height/2], center=true);\n    \n    // Latch grip\n    translate([spring_width + latch_width/2, 0, wall_height-2])\n        cube([grip_width, grip_height, wall_height/4], center=true);\n    \n    // Spring details\n    for(i = [1:3]) {\n        translate([spring_width/2, 0, i*wall_height/4])\n            cylinder(h=1, d=spring_thickness);\n    }\n}\n\n// Grip handles\nmodule grip_handles() {\n    // Handle 1\n    translate([base_diameter/2 - wall_thickness, 0, 0])\n        cube([wall_thickness*2, 15, 8], center=true);\n    \n    // Handle 2\n    translate([-base_diameter/2 + wall_thickness, 0, 0])\n        cube([wall_thickness*2, 15, 8], center=true);\n    \n    // Handle grips\n    for(i = [-1:1]) {\n        translate([base_diameter/2 - wall_thickness, i*5, 0])\n            cylinder(h=8, d=3);\n        translate([-base_diameter/2 + wall_thickness, i*5, 0])\n            cylinder(h=8, d=3);\n    }\n}\n\n// Render the springform\nspringform();",
    "renders": true
  },
  {
    "household_item": "bundtpan",
    "openscad_code": "// Bundt Pan - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Overall dimensions (mm)\npan_diameter = 90;\npan_height = 35;\nwall_thickness = 2.5;\nbase_thickness = 3;\n\n// Central tube dimensions\ntube_diameter = 30;\ntube_height = pan_height - 1;\n\n// Fluting parameters\nnum_flutes = 12;\nflute_depth = 3.5;\nflute_width_factor = 0.8;\n\n// Flared rim dimensions\nrim_width = 5;\nrim_thickness = 2;\n\n// Helper module for rounded bottom\nmodule rounded_bottom() {\n    difference() {\n        cylinder(h=base_thickness, d=pan_diameter, $fn=60);\n        translate([0, 0, base_thickness - 1])\n            cylinder(h=base_thickness + 1, d=pan_diameter - wall_thickness*2, $fn=60);\n    }\n}\n\n// Helper module for fluted side wall\nmodule fluted_wall() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=pan_height - base_thickness, d=pan_diameter, $fn=120);\n        \n        // Inner cylinder\n        translate([0, 0, -0.1])\n            cylinder(h=pan_height - base_thickness + 0.2, d=pan_diameter - wall_thickness*2, $fn=120);\n        \n        // Create flutes using rotated cubes\n        for (i = [0:num_flutes-1]) {\n            rotate([0, 0, i * 360/num_flutes])\n                translate([pan_diameter/2 - wall_thickness - flute_depth/2, 0, pan_height/2 - base_thickness/2])\n                    rotate([0, 90, 0])\n                        cube([flute_depth, pan_height - base_thickness, flute_width_factor * (pan_diameter - wall_thickness*2) * PI / num_flutes], center=true);\n        }\n    }\n}\n\n// Helper module for central tube\nmodule central_tube() {\n    difference() {\n        cylinder(h=tube_height, d=tube_diameter, $fn=60);\n        translate([0, 0, -0.1])\n            cylinder(h=tube_height + 0.2, d=tube_diameter - wall_thickness*2, $fn=60);\n    }\n}\n\n// Helper module for flared rim\nmodule flared_rim() {\n    difference() {\n        // Outer rim\n        cylinder(h=rim_thickness, d=pan_diameter + rim_width*2, $fn=60);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n            cylinder(h=rim_thickness + 0.2, d=pan_diameter, $fn=60);\n        \n        // Taper the outer edge\n        difference() {\n            cylinder(h=rim_thickness, d=pan_diameter + rim_width*2, $fn=60);\n            translate([0, 0, -0.1])\n                cylinder(h=rim_thickness + 0.2, d=pan_diameter + rim_width*1.5, $fn=60);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base with rounded bottom\n    translate([0, 0, 0])\n        rounded_bottom();\n    \n    // Fluted side wall\n    translate([0, 0, base_thickness])\n        fluted_wall();\n    \n    // Central tube\n    translate([0, 0, base_thickness])\n        central_tube();\n    \n    // Flared rim at top\n    translate([0, 0, pan_height - rim_thickness])\n        flared_rim();\n}\n\n// Optional: Add small pour spouts\nmodule pour_spouts() {\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180])\n            translate([pan_diameter/2 + rim_width - 1, 0, pan_height - rim_thickness/2])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=rim_width, d1=rim_thickness*2, d2=rim_thickness*1.2, $fn=20);\n                        translate([0, 0, -0.1])\n                            cylinder(h=rim_width + 0.2, d1=rim_thickness*2 - 1, d2=rim_thickness*1.2 - 1, $fn=20);\n                    }\n    }\n}\n\n// Add pour spouts\ntranslate([0, 0, 0])\n    pour_spouts();",
    "renders": true
  },
  {
    "household_item": "coolingrack",
    "openscad_code": "// Cooling rack for 3D printing - realistic style, medium complexity\n// Overall size: 70 x 50 x 10 mm\n\n$fn = 24;\n\nmodule rackFrame() {\n    // Outer frame\n    difference() {\n        // Main frame body\n        translate([-35, -25, 0])\n            cube([70, 50, 5]);\n        \n        // Inner cutout\n        translate([-32, -22, -1])\n            cube([64, 44, 7]);\n    }\n    \n    // Bottom lip for support\n    translate([-36, -26, -1])\n        cube([72, 52, 1]);\n}\n\nmodule wireGrid() {\n    // Parameters for the wire grid\n    wire_diameter = 1.5;\n    spacing = 5;\n    \n    // Longitudinal wires (along X axis)\n    for (y = [-20:spacing:20]) {\n        translate([0, y, 3])\n            rotate([90, 0, 0])\n                cylinder(h = 70, d = wire_diameter, center = true);\n    }\n    \n    // Transverse wires (along Y axis)\n    for (x = [-30:spacing:30]) {\n        translate([x, 0, 3])\n            rotate([0, 90, 0])\n                cylinder(h = 50, d = wire_diameter, center = true);\n    }\n}\n\nmodule cornerFeet() {\n    // Small feet at corners to lift rack slightly\n    foot_height = 2;\n    foot_diameter = 6;\n    \n    // Position feet under frame corners\n    positions = [\n        [-30, -20, 0],\n        [30, -20, 0],\n        [-30, 20, 0],\n        [30, 20, 0]\n    ];\n    \n    for (pos = positions) {\n        translate(pos)\n            cylinder(h = foot_height, d = foot_diameter);\n    }\n}\n\n// Assembly the complete cooling rack\nunion() {\n    rackFrame();\n    wireGrid();\n    cornerFeet();\n}",
    "renders": true
  },
  {
    "household_item": "ovenmitt",
    "openscad_code": "// Realistic Oven Mitt - Medium Complexity\n// Approx 85mm x 45mm x 200mm\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2.5;\nglove_length = 80;\nhand_width = 45;\nhand_height = 20;\nwrist_length = 45;\nwrist_diameter = 40;\n\n// Main body module\nmodule glove_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            // Hand section\n            translate([0, 0, glove_length/2])\n                scale([1, 0.8, 1])\n                sphere(d = hand_width + wall_thickness*2);\n            \n            // Wrist section\n            translate([0, 0, -wrist_length/2])\n                cylinder(h = wrist_length, d = wrist_diameter + wall_thickness*2);\n        }\n        \n        // Inner cavity\n        translate([0, -1, 5])\n            scale([0.85, 0.7, 0.9])\n            hull() {\n                translate([0, 0, glove_length/2])\n                    sphere(d = hand_width);\n                translate([0, 0, -wrist_length/2])\n                    cylinder(h = wrist_length + 5, d = wrist_diameter - wall_thickness);\n            }\n    }\n}\n\n// Thumb section\nmodule thumb() {\n    translate([-hand_width/2 - 8, 0, glove_length/2 - 5])\n        rotate([0, 15, -30])\n        difference() {\n            union() {\n                // Thumb base\n                cylinder(h = 25, d1 = 18, d2 = 15);\n                \n                // Thumb tip\n                translate([0, 0, 25])\n                    sphere(d = 15);\n            }\n            \n            // Thumb cavity\n            translate([0, 0, 2])\n                cylinder(h = 25, d = 12);\n        }\n}\n\n// Quilted padding pattern\nmodule quilt_pattern() {\n    for (i = [0:2]) {\n        for (j = [0:3]) {\n            translate([\n                -hand_width/2 + 10 + i*12,\n                -5 + j*10,\n                glove_length/2 - 10 + j*5\n            ])\n                difference() {\n                    sphere(d = 8);\n                    scale([0.8, 0.8, 0.5])\n                        sphere(d = 8);\n                }\n        }\n    }\n}\n\n// Hanging loop\nmodule hanging_loop() {\n    translate([0, -hand_width/2 - 5, -wrist_length - 10])\n        rotate([90, 0, 0])\n        difference() {\n            torus(8, 3);\n            translate([0, 0, -10])\n                cube([20, 20, 20], center = true);\n        }\n}\n\n// Torus helper function\nmodule torus(r, r_section) {\n    rotate_extrude()\n        translate([r, 0, 0])\n            circle(r = r_section);\n}\n\n// Grip texture lines\nmodule grip_texture() {\n    for (i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, glove_length/2 - 15])\n                linear_extrude(height = 30, twist = 30)\n                    circle(d = 2);\n    }\n}\n\n// Assemble the oven mitt\nunion() {\n    // Main glove\n    glove_body();\n    \n    // Thumb\n    thumb();\n    \n    // Quilted padding\n    quilt_pattern();\n    \n    // Hanging loop\n    hanging_loop();\n    \n    // Grip texture on palm\n    grip_texture();\n}",
    "renders": true
  },
  {
    "household_item": "potholder",
    "openscad_code": "// Realistic 3D-printable potholder\n// Size: 80 mm diameter, 5 mm thick, suitable for 3D printing\n\n// Overall parameters\ndiameter = 80;          // Potholder diameter in mm\nthickness = 5;          // Potholder thickness in mm\nhole_radius = 4;        // Hanging hole radius\nwall_thickness = 1.2;   // Minimum printable wall thickness (mm)\n\n// Quilted pattern parameters\npocket_count = 6;               // Number of heat-isolating pockets\npocket_depth = 2.5;             // Depth of each pocket\nrib_width = 2;                  // Width of raised ribs between pockets\n\n// Grip texture parameters\ngrip_radius = 1.5;              // Radius of grip bumps\ngrip_spacing = 8;               // Spacing between grip bumps\n\n// Helper module: rounded cylinder for soft edges\nmodule rounded_cylinder(h, r1, r2) {\n    cylinder(h=h, r1=r1, r2=r2, $fn=32);\n}\n\n// Main potholder body with rounded edges\nmodule potholder_body() {\n    difference() {\n        union() {\n            // Base disc with slightly rounded top\n            translate([0, 0, -thickness/2])\n                rounded_cylinder(thickness, diameter/2, diameter/2);\n            \n            // Raised outer rim for stiffness\n            translate([0, 0, 0])\n                cylinder(h=1.5, r1=diameter/2 - 2, r2=diameter/2 - 2, $fn=64);\n        }\n        \n        // Hanging hole\n        translate([0, diameter/2 - 8, 0])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=hole_radius, $fn=32);\n    }\n}\n\n// Quilted pattern: raised ribs forming hexagonal pockets\nmodule quilted_pattern() {\n    rib_height = pocket_depth;\n    \n    for (i = [0 : pocket_count - 1]) {\n        angle = 360 / pocket_count * i;\n        \n        // Radial ribs\n        rotate([0, 0, angle])\n            translate([0, 0, 0])\n                cube([rib_width, diameter/2 - 5, rib_height], center=true);\n        \n        // Concentric ribs (rings)\n        for (r = [diameter/6 : diameter/6 : diameter/2 - 5]) {\n            rotate_extrude(angle=360/pocket_count, $fn=32)\n                translate([r, 0, 0])\n                    square([rib_width, rib_height]);\n        }\n    }\n}\n\n// Grip texture on bottom surface\nmodule grip_texture() {\n    for (x = [-diameter/2 + grip_spacing : grip_spacing : diameter/2 - grip_spacing]) {\n        for (y = [-diameter/2 + grip_spacing : grip_spacing : diameter/2 - grip_spacing]) {\n            dist = sqrt(x*x + y*y);\n            if (dist < diameter/2 - 5) {\n                translate([x, y, -thickness/2 - grip_radius + 0.2])\n                    sphere(r=grip_radius, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    potholder_body();\n    \n    // Quilted pattern on top\n    translate([0, 0, thickness/2])\n        quilted_pattern();\n    \n    // Grip texture on bottom\n    grip_texture();\n}",
    "renders": true
  },
  {
    "household_item": "apron",
    "openscad_code": "// Realistic Apron - Medium Complexity\n// 3D printable with wall thickness and no overhangs\n\n// Overall dimensions\napron_width = 70;\napron_height = 60;\napron_thickness = 2;\n\n// Top bib section\nmodule bib() {\n    union() {\n        // Main bib panel\n        translate([0, 0, apron_height/2])\n            cube([apron_width*0.6, apron_thickness, apron_height*0.4], center=true);\n        \n        // Curved top edge\n        difference() {\n            translate([0, 0, apron_height*0.7])\n                cube([apron_width*0.6, apron_thickness, apron_height*0.1], center=true);\n            translate([0, apron_thickness/2, apron_height*0.75])\n                sphere(d=apron_width*0.6);\n        }\n    }\n}\n\n// Waist belt loops\nmodule belt_loops() {\n    for(side = [-1, 1]) {\n        translate([side * apron_width*0.4, 0, apron_height*0.35])\n            cube([8, 8, 5], center=true);\n    }\n}\n\n// Main body panel with rounded bottom\nmodule body_panel() {\n    difference() {\n        // Main rectangular body\n        translate([0, 0, apron_height*0.2])\n            cube([apron_width, apron_thickness, apron_height*0.6], center=true);\n        \n        // Rounded bottom cutout\n        translate([0, apron_thickness/2, -apron_height*0.1])\n            sphere(d=apron_width*0.8);\n    }\n}\n\n// Pocket with stitching detail\nmodule pocket() {\n    union() {\n        // Main pocket\n        translate([0, 0, apron_height*0.15])\n            cube([apron_width*0.5, apron_thickness+1, apron_height*0.2], center=true);\n        \n        // Pocket divider\n        translate([0, 0, apron_height*0.15])\n            cube([2, apron_thickness+1.5, apron_height*0.18], center=true);\n        \n        // Top edge reinforcement\n        translate([0, 0, apron_height*0.25])\n            cube([apron_width*0.5, apron_thickness+0.5, 2], center=true);\n    }\n}\n\n// Neck strap\nmodule neck_strap() {\n    // Left side\n    translate([-apron_width*0.3, 0, apron_height*0.55])\n        rotate([0, 90, 0])\n            cylinder(h=25, d=3, center=true);\n    \n    // Right side  \n    translate([apron_width*0.3, 0, apron_height*0.55])\n        rotate([0, 90, 0])\n            cylinder(h=25, d=3, center=true);\n}\n\n// Waist ties\nmodule waist_ties() {\n    for(side = [-1, 1]) {\n        translate([side * apron_width*0.5, 0, apron_height*0.35])\n            rotate([90, 0, 0])\n                cylinder(h=30, d=4, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bib();\n    body_panel();\n    pocket();\n    belt_loops();\n    neck_strap();\n    waist_ties();\n}",
    "renders": true
  },
  {
    "household_item": "chair",
    "openscad_code": "// Realistic chair, medium complexity\n// Overall size ~75 mm tall\n\n// Parameters (mm)\nseat_w = 40;      // seat width\nseat_d = 40;      // seat depth\nseat_t = 3;       // seat thickness\nback_h = 30;      // backrest height above seat\nback_t = 3;       // backrest thickness\nleg_h = 40;       // leg height\nleg_r = 2;        // leg radius\nstretch_r = 1.5;  // stretcher radius\nstretch_h = 12;   // stretcher height above ground\nfillet = 2;       // edge rounding radius\n\n// 3D-printing tolerance\neps = 0.2;\n\n// Fillet helper (quarter-cylinder corner)\nmodule fillet_corner(r, h) {\n    rotate([0,90,0]) cylinder(r=r, h=h, $fn=20);\n}\n\n// Seat with rounded top edges\nmodule seat() {\n    difference() {\n        union() {\n            // Main slab\n            translate([0,0,seat_t/2])\n                cube([seat_w, seat_d, seat_t], center=true);\n            // Front edge fillets\n            for(x=[-seat_w/2+fillet, seat_w/2-fillet])\n                translate([x, seat_d/2-fillet, seat_t-fillet/2])\n                    fillet_corner(fillet, seat_w-2*fillet);\n            // Side edge fillets\n            for(y=[-seat_d/2+fillet, seat_d/2-fillet])\n                translate([seat_w/2-fillet, y, seat_t-fillet/2])\n                    rotate([0,0,90]) fillet_corner(fillet, seat_d-2*fillet);\n        }\n        // Remove bottom chamfers to avoid overhang\n        translate([0,0,-seat_t/2-eps])\n            cube([seat_w+2*eps, seat_d+2*eps, eps], center=true);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    slat_w = 3;\n    gap = 3;\n    slats = floor(seat_w/(slat_w+gap));\n    union() {\n        // Bottom rail\n        translate([0, -seat_d/2+back_t/2, seat_t+back_t/2])\n            cube([seat_w, back_t, back_t], center=true);\n        // Slats\n        for(i=[-slats/2:slats/2-1])\n            translate([i*(slat_w+gap)+gap/2, -seat_d/2+back_t/2, seat_t+back_t+back_h/2])\n                cube([slat_w, back_t, back_h], center=true);\n        // Top rail\n        translate([0, -seat_d/2+back_t/2, seat_t+back_t+back_h+back_t/2])\n            cube([seat_w, back_t, back_t], center=true);\n    }\n}\n\n// Single leg with taper\nmodule leg(h) {\n    cylinder(r1=leg_r, r2=leg_r*0.8, h=h, $fn=32);\n}\n\n// Stretcher between legs\nmodule stretcher(len) {\n    rotate([90,0,0]) cylinder(r=stretch_r, h=len, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n\n    // Backrest\n    backrest();\n\n    // Legs\n    translate([ seat_w/2-leg_r,  seat_d/2-leg_r, leg_h/2]) leg(leg_h);\n    translate([-seat_w/2+leg_r,  seat_d/2-leg_r, leg_h/2]) leg(leg_h);\n    translate([ seat_w/2-leg_r, -seat_d/2+leg_r, leg_h/2]) leg(leg_h);\n    translate([-seat_w/2+leg_r, -seat_d/2+leg_r, leg_h/2]) leg(leg_h);\n\n    // Side stretchers\n    translate([0,  seat_d/2-leg_r, stretch_h]) stretcher(seat_w-2*leg_r);\n    translate([0, -seat_d/2+leg_r, stretch_h]) stretcher(seat_w-2*leg_r);\n\n    // Front / back stretchers\n    translate([ seat_w/2-leg_r, 0, stretch_h]) rotate([0,0,90]) stretcher(seat_d-2*leg_r);\n    translate([-seat_w/2+leg_r, 0, stretch_h]) rotate([0,0,90]) stretcher(seat_d-2*leg_r);\n}",
    "renders": true
  },
  {
    "household_item": "table",
    "openscad_code": "// Realistic wooden-style table with medium complexity\n// Overall dimensions: 100 x 60 x 45 mm\n\n// Table parameters\ntable_length = 100;\ntable_width = 60;\ntable_height = 45;\ntop_thickness = 4;\nleg_size = 6;\nstretcher_height = 15;\n\n// Wood appearance parameters (for slicing, not visual)\nwood_grain_depth = 0.3;\n\n// Main table module\nmodule table() {\n    // Table top with rounded edges\n    union() {\n        // Main top slab\n        translate([0, 0, table_height - top_thickness/2])\n            rounded_box(table_length, table_width, top_thickness, 2);\n        \n        // Wood grain detail on top\n        for (i = [0:3:table_length-6]) {\n            translate([i - table_length/2 + 3, -table_width/2 + 2, table_height + 0.1])\n                cube([1, table_width - 4, wood_grain_depth]);\n        }\n    }\n    \n    // Four legs with taper\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (table_length/2 - leg_size), \n                      y * (table_width/2 - leg_size), \n                      (table_height - top_thickness)/2]) {\n                tapered_leg(leg_size, leg_size * 0.8, table_height - top_thickness);\n            }\n        }\n    }\n    \n    // Side stretchers\n    for (x = [-1, 1]) {\n        translate([x * (table_length/2 - leg_size - 12), 0, stretcher_height]) {\n            rounded_box(24, leg_size * 0.8, leg_size * 0.8, 1);\n        }\n    }\n    \n    // Front/back stretchers\n    for (y = [-1, 1]) {\n        translate([0, y * (table_width/2 - leg_size - 7), stretcher_height]) {\n            rounded_box(leg_size * 0.8, 14, leg_size * 0.8, 1);\n        }\n    }\n    \n    // Corner brackets for stability\n    corner_brackets();\n}\n\n// Create rounded box for realistic edges\nmodule rounded_box(l, w, h, radius) {\n    hull() {\n        // Create rounded corners using sphere intersections\n        for (x = [l/2 - radius, -l/2 + radius]) {\n            for (y = [w/2 - radius, -w/2 + radius]) {\n                for (z = [h/2 - radius, -h/2 + radius]) {\n                    translate([x, y, z])\n                        sphere(r = radius, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Tapered leg for realistic furniture look\nmodule tapered_leg(bottom_size, top_size, height) {\n    difference() {\n        hull() {\n            // Bottom of leg\n            translate([0, 0, -height/2])\n                cube([bottom_size, bottom_size, 0.1], center = true);\n            \n            // Top of leg (tapered)\n            translate([0, 0, height/2])\n                cube([top_size, top_size, 0.1], center = true);\n        }\n        \n        // Hollow out leg to save material\n        translate([0, 0, -height/2])\n            cylinder(h = height + 1, r1 = bottom_size/2 - 1.5, r2 = top_size/2 - 1.5, $fn = 8);\n    }\n}\n\n// Corner brackets for structural support\nmodule corner_brackets() {\n    bracket_size = 15;\n    bracket_thickness = 3;\n    \n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (table_length/2 - bracket_size), \n                      y * (table_width/2 - bracket_size), \n                      table_height - top_thickness - 5]) {\n                // Simple L-bracket shape\n                union() {\n                    cube([bracket_size * x, bracket_thickness, 10]);\n                    cube([bracket_thickness, bracket_size * y, 10]);\n                }\n            }\n        }\n    }\n}\n\n// Generate the table\ntable();",
    "renders": true
  },
  {
    "household_item": "desk",
    "openscad_code": "// Realistic 3D-printable desk – medium complexity\n// Overall size ~90 mm (length) × 50 mm (width) × 45 mm (height)\n\n// Desk parameters\ndesk_len = 90;\ndesk_wid = 50;\ndesk_top_t = 4;\nleg_wid = 5;\nleg_thk = 5;\nleg_h = 40;\nback_panel_h = 25;\nback_panel_t = 3;\ndrawer_w = 22;\ndrawer_h = 18;\ndrawer_t = 2;\nhandle_len = 10;\nhandle_d = 2;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule desk_top() {\n    difference() {\n        // Main top\n        translate([0, 0, leg_h + desk_top_t / 2])\n            cube([desk_len, desk_wid, desk_top_t], center = true);\n        // Chamfered edges (simple 45° cut)\n        translate([0, 0, leg_h + desk_top_t - 0.5])\n            cube([desk_len - 2, desk_wid - 2, 1], center = true);\n    }\n}\n\nmodule leg(x, y) {\n    translate([x, y, leg_h / 2])\n        cube([leg_wid, leg_thk, leg_h], center = true);\n}\n\nmodule back_panel() {\n    translate([0, desk_wid / 2 - back_panel_t / 2, leg_h + back_panel_h / 2])\n        cube([desk_len - 2 * leg_wid, back_panel_t, back_panel_h], center = true);\n}\n\nmodule drawer_box(x, y, z) {\n    difference() {\n        // Shell\n        translate([x, y, z])\n            cube([drawer_w, desk_wid - 2 * wall - 1, drawer_h]);\n        // Hollow inside\n        translate([x + wall, y + wall, z + wall])\n            cube([drawer_w - 2 * wall, desk_wid - 4 * wall - 1, drawer_h - wall]);\n    }\n}\n\nmodule handle(x, y, z) {\n    translate([x, y, z + drawer_h / 2])\n        rotate([90, 0, 0])\n            cylinder(h = handle_len, d = handle_d, $fn = 16);\n}\n\nmodule drawer_assembly(idx) {\n    offset_x = -desk_len / 2 + leg_wid + 2 + idx * (drawer_w + 1);\n    offset_z = leg_h + desk_top_t + 1;\n    union() {\n        drawer_box(offset_x, -desk_wid / 2 + wall + 0.5, offset_z);\n        handle(offset_x + drawer_w / 2, 0, offset_z + drawer_h);\n    }\n}\n\n// Build desk\nunion() {\n    desk_top();\n    // Four legs\n    for (sx = [-1, 1])\n        for (sy = [-1, 1])\n            leg(sx * (desk_len / 2 - leg_wid / 2), sy * (desk_wid / 2 - leg_thk / 2));\n\n    back_panel();\n\n    // Three drawers\n    for (i = [0:2])\n        drawer_assembly(i);\n}",
    "renders": true
  },
  {
    "household_item": "bed",
    "openscad_code": "// Realistic Medium-Complexity Bed\n// Total length ~80 mm, printable without supports\n\n$fn = 36; // smooth curves\n\n// Overall bed dimensions\nbed_len = 80;\nbed_wid = 60;\nbed_height = 25;\n\n// Mattress thickness\nmattress_th = 8;\n\n// Headboard\nmodule headboard() {\n    // Posts\n    for (x = [-bed_wid/2 + 3, bed_wid/2 - 3]) {\n        translate([x, bed_len/2 - 2, 0])\n            cylinder(h = 20, d1 = 3, d2 = 2.5);\n    }\n    // Panel\n    translate([0, bed_len/2 - 3, 10])\n        cube([bed_wid - 4, 2, 15], center = true);\n    // Top bar\n    translate([0, bed_len/2 - 3, 18])\n        cube([bed_wid - 2, 2, 2], center = true);\n}\n\n// Footboard\nmodule footboard() {\n    // Posts\n    for (x = [-bed_wid/2 + 3, bed_wid/2 - 3]) {\n        translate([x, -bed_len/2 + 2, 0])\n            cylinder(h = 8, d1 = 3, d2 = 2.5);\n    }\n    // Panel\n    translate([0, -bed_len/2 + 3, 4])\n        cube([bed_wid - 4, 2, 6], center = true);\n}\n\n// Side rails\nmodule side_rail(len, off_y) {\n    translate([0, off_y, 4])\n        cube([bed_wid - 6, len, 1.5], center = true);\n}\n\n// Slats\nmodule slats() {\n    for (y = [-bed_len/2 + 8 : 5 : bed_len/2 - 8]) {\n        translate([0, y, 5.5])\n            cube([bed_wid - 6, 2, 0.8], center = true);\n    }\n}\n\n// Mattress\nmodule mattress() {\n    translate([0, 0, 5.5 + mattress_th/2])\n        cube([bed_wid - 6, bed_len - 6, mattress_th], center = true);\n}\n\n// Pillow\nmodule pillow() {\n    translate([0, bed_len/2 - 12, 5.5 + mattress_th + 1.5])\n        scale([1, 0.7, 0.35])\n            cube([12, 12, 6], center = true);\n}\n\n// Blanket\nmodule blanket() {\n    difference() {\n        translate([0, 0, 5.5 + mattress_th + 0.5])\n            cube([bed_wid - 8, bed_len - 18, 1.2], center = true);\n        // Rounded corners by subtracting spheres\n        for (dx = [-1, 1])\n            for (dy = [-1, 1])\n                translate([dx * (bed_wid/2 - 6), dy * (bed_len/2 - 11), 0])\n                    sphere(r = 3);\n    }\n}\n\n// Legs\nmodule legs() {\n    for (y = [-bed_len/2 + 5, bed_len/2 - 5])\n        for (x = [-bed_wid/2 + 4, bed_wid/2 - 4])\n            translate([x, y, 0])\n                cylinder(h = 5, d = 2.5);\n}\n\n// Assembly\nunion() {\n    legs();\n    headboard();\n    footboard();\n    side_rail(bed_len - 12, 0);\n    slats();\n    mattress();\n    pillow();\n    blanket();\n}",
    "renders": true
  },
  {
    "household_item": "sofa",
    "openscad_code": "// Realistic style medium-complexity 3D-printable sofa\n// Overall dimensions: 80 mm (W) × 35 mm (D) × 35 mm (H)\n\n$fn = 32;\n\n// Main body module\nmodule sofa() {\n    // Base frame\n    difference() {\n        translate([-40, 0, 0])\n            cube([80, 35, 8], center = true);\n        \n        // Hollow out for printability\n        translate([-40, 0, -1])\n            cube([76, 31, 10], center = true);\n    }\n    \n    // Backrest\n    difference() {\n        translate([-40, 12, 8])\n            cube([80, 3, 27], center = true);\n        \n        // Hollow backrest\n        translate([-40, 11, 8])\n            cube([76, 5, 23], center = true);\n    }\n    \n    // Left armrest\n    difference() {\n        translate([-37.5, -12, 15])\n            cube([5, 11, 30], center = true);\n        \n        translate([-37.5, -12, 13])\n            cube([3, 9, 26], center = true);\n    }\n    \n    // Right armrest\n    mirror([1, 0, 0])\n        translate([-37.5, -12, 15])\n        difference() {\n            cube([5, 11, 30], center = true);\n            translate([0, 0, -2])\n                cube([3, 9, 26], center = true);\n        }\n    \n    // Seat cushions (3 separate cushions)\n    for (x = [-25, -40, -15]) {\n        translate([x, 0, 4])\n            cushion();\n    }\n    \n    // Back cushions (3 separate cushions)\n    for (x = [-25, -40, -15]) {\n        translate([x, 10, 19])\n            rotate([0, 10, 0])\n            cushion();\n    }\n    \n    // Legs (4 legs)\n    for (x = [-30, -30, -10, -10])\n        translate([x, 10, -4])\n            leg();\n    \n    for (x = [-30, -30, -10, -10])\n        translate([x, -10, -4])\n            leg();\n}\n\n// Cushion module with rounded top\nmodule cushion() {\n    difference() {\n        union() {\n            cube([14, 32, 6], center = true);\n            translate([0, 0, 3])\n                scale([1, 1, 0.5])\n                    sphere(d = 14);\n        }\n        \n        // Hollow cushion\n        translate([0, 0, -1])\n            cube([12, 30, 8], center = true);\n    }\n}\n\n// Leg module\nmodule leg() {\n    difference() {\n        cylinder(h = 8, d = 3);\n        \n        translate([0, 0, -1])\n            cylinder(h = 10, d = 2);\n    }\n}\n\n// Assembly\nsofa();",
    "renders": true
  },
  {
    "household_item": "couch",
    "openscad_code": "// Couch - Realistic style, medium complexity\n// Dimensions scaled for ~70mm print\n\n// Global parameters\n$fn = 32;\nseat_width = 40;\nseat_depth = 30;\nseat_height = 15;\nback_height = 25;\narmrest_height = 22;\narmrest_width = 8;\nleg_height = 10;\nwall = 2;\n\nmodule rounded_cube(size, radius) {\n    // Helper module for rounded edges\n    hull() {\n        for(dx = [0, size.x - radius*2])\n            for(dy = [0, size.y - radius*2])\n                for(dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r = radius);\n    }\n}\n\nmodule cushion(width, depth, thickness, radius = 3) {\n    // Puffy cushion with rounded top\n    difference() {\n        rounded_cube([width, depth, thickness], radius);\n        translate([radius, radius, thickness - 1])\n            cube([width - radius*2, depth - radius*2, 1]);\n    }\n}\n\nmodule couch_leg(height) {\n    // Simple tapered leg\n    cylinder(h = height, r1 = 2.5, r2 = 2);\n}\n\nmodule armrest() {\n    // Curved armrest with slight taper\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h = armrest_height - 5, r = armrest_width/2);\n            translate([0, armrest_width, 0])\n                cylinder(h = armrest_height - 5, r = armrest_width/2);\n            translate([0, armrest_width/2, armrest_height - 5])\n                sphere(r = armrest_width/2);\n        }\n        // Hollow inside\n        translate([wall, wall, 0])\n            cylinder(h = armrest_height - 5, r = armrest_width/2 - wall);\n        translate([wall, armrest_width - wall, 0])\n            cylinder(h = armrest_height - 5, r = armrest_width/2 - wall);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with lumbar support\n    difference() {\n        // Main backrest shape\n        hull() {\n            translate([0, 0, 0])\n                cube([seat_width, wall, back_height]);\n            translate([0, 0, back_height - 5])\n                cube([seat_width, wall + 3, 5]);\n        }\n        // Curved inner surface\n        for(i = [0:seat_width/5:seat_width]) {\n            translate([i, wall + 1, 0])\n                cylinder(h = 0.1, r = back_height/2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Left armrest\n    translate([0, -armrest_width, leg_height])\n        armrest();\n    \n    // Right armrest (mirrored)\n    translate([seat_width, -armrest_width, leg_height])\n        mirror([1, 0, 0])\n            armrest();\n    \n    // Seat frame\n    translate([0, 0, leg_height])\n        difference() {\n            rounded_cube([seat_width, seat_depth, seat_height], 4);\n            translate([wall, wall, wall])\n                rounded_cube([seat_width - wall*2, seat_depth - wall*2, seat_height - wall], 2);\n        }\n    \n    // Seat cushion\n    translate([2, 2, leg_height + seat_height - wall])\n        cushion(seat_width - 4, seat_depth - 4, 6);\n    \n    // Backrest\n    translate([0, seat_depth - wall, leg_height + seat_height - 5])\n        backrest();\n    \n    // Back cushion\n    translate([2, seat_depth - 6, leg_height + seat_height])\n        cushion(seat_width - 4, 4, 8);\n    \n    // Legs\n    for(x = [5, seat_width - 5])\n        for(y = [5, seat_depth - 5])\n            translate([x, y, 0])\n                couch_leg(leg_height);\n}",
    "renders": true
  },
  {
    "household_item": "closet",
    "openscad_code": "// Realistic 3D-printable closet at 1:20 scale\n// External dimensions: 80 x 40 x 100 mm (W x D x H)\n\n$fn = 32;               // Smooth curves for printability\nwall = 2;               // Uniform printable wall thickness\n\nmodule closet() {\n    // Main carcass\n    difference() {\n        // Outer shell\n        cube([80, 40, 100], center = false);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([80 - 2*wall, 40 - 2*wall, 100 - wall]);\n    }\n    \n    // Bottom plinth\n    translate([0, 0, -5])\n        cube([80, 42, 5]);\n    \n    // Two doors\n    module door() {\n        difference() {\n            // Door panel\n            translate([0, 0, 0])\n                cube([38, 2, 90]);\n            \n            // Recessed panel\n            translate([2, -0.5, 2])\n                cube([34, 3, 86]);\n            \n            // Handle hole\n            translate([5, 1, 45])\n                rotate([90, 0, 0])\n                    cylinder(h = 4, d = 4);\n        }\n        \n        // Handle knob\n        translate([5, 2, 45])\n            sphere(d = 4);\n    }\n    \n    // Left door\n    translate([1, 38, 5])\n        door();\n    \n    // Right door\n    translate([41, 38, 5])\n        door();\n    \n    // Internal shelf\n    translate([wall, wall, 65])\n        cube([80 - 2*wall, 40 - 2*wall, wall]);\n    \n    // Clothes rail\n    translate([40, 20, 90])\n        rotate([90, 0, 0])\n            cylinder(h = 80 - 2*wall, d = 4);\n}\n\n// Ventilation holes on back panel\nmodule vents() {\n    for (i = [1:5]) {\n        translate([i*13.5, 20, 1])\n            rotate([90, 0, 0])\n                cylinder(h = wall + 1, d = 8);\n    }\n}\n\ndifference() {\n    closet();\n    translate([-1, -1, 50])\n        vents();\n}\n\n// Hinges (simplified printable cylinders)\nmodule hinges() {\n    for (h = [0:1]) {\n        // Left door hinges\n        translate([1, 38, 15 + h*60])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d = 3);\n        \n        // Right door hinges  \n        translate([79, 38, 15 + h*60])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d = 3);\n    }\n}\n\nhinges();",
    "renders": true
  },
  {
    "household_item": "wardrobe",
    "openscad_code": "// Wardrobe - Realistic style, medium complexity\n// Roughly 70 mm tall, 50 mm wide, 30 mm deep\n\n$fn = 32;\n\n// Main dimensions\nwidth = 50;\ndepth = 30;\nheight = 70;\nwall = 2;\n\nmodule wardrobe() {\n    // Main carcass\n    difference() {\n        cube([width, depth, height]);\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-wall]);\n    }\n    \n    // Base plinth around bottom\n    translate([-2, -2, -2])\n        cube([width+4, depth+4, 4]);\n    \n    // Top cornice\n    translate([-1, -1, height])\n        cube([width+2, depth+2, 3]);\n    \n    // Divider between doors\n    translate([width/2, 0, 0])\n        cube([wall, depth, height]);\n    \n    // Left door\n    translate([wall/2, 0, wall/2])\n        door(width/2-wall, depth-wall, height-wall);\n    \n    // Right door\n    translate([width/2+wall/2, 0, wall/2])\n        door(width/2-wall, depth-wall, height-wall);\n    \n    // Back panel detail\n    translate([wall, wall, wall])\n        cube([width-2*wall, wall, height-2*wall]);\n    \n    // Shelf inside\n    translate([wall, wall, height*0.4])\n        cube([width-2*wall, depth-2*wall, wall]);\n}\n\nmodule door(w, d, h) {\n    difference() {\n        // Door panel\n        translate([0, wall, 0])\n            cube([w, d-wall, h]);\n        \n        // Recessed panel\n        translate([wall*1.5, wall+0.5, wall*1.5])\n            cube([w-3*wall, d-wall*2-0.5, h-3*wall]);\n        \n        // Handle hole\n        translate([w-wall*2, d-wall/2, h/2])\n            rotate([90,0,0])\n                cylinder(h=wall*3, r=1.5);\n    }\n    \n    // Handle\n    translate([w-wall*2, d+0.5, h/2])\n        rotate([90,0,0])\n            cylinder(h=3, r=1.5);\n    \n    // Door grooves\n    for (i = [1:3]) {\n        translate([w/4*i, wall+0.5, wall*1.5])\n            cube([0.5, d-wall*2-1, h-3*wall-1]);\n    }\n    \n    // Hinges\n    for (z = [h*0.2, h*0.8]) {\n        translate([0, d/2, z])\n            cylinder(h=d, r=1.5);\n    }\n}\n\nwardrobe();",
    "renders": true
  },
  {
    "household_item": "dresser",
    "openscad_code": "// Realistic Medium-Complexity Dresser\n// Overall dimensions: 70 mm wide × 35 mm deep × 50 mm high\n// 3D-printable with 2 mm walls and no overhangs\n\n// Parameters\nwidth  = 70;   // dresser width\ndepth  = 35;   // dresser depth\nheight = 50;   // dresser height\nwall   = 2;    // wall thickness for printability\n\n// Main body\nmodule dresser_body() {\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center=false);\n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-2*wall], center=false);\n    }\n}\n\n// Top panel overhang\nmodule top_panel() {\n    translate([-2, -2, height])\n        cube([width+4, depth+4, wall], center=false);\n}\n\n// Base / toe-kick\nmodule base_trim() {\n    difference() {\n        // Full base block\n        translate([-2, -2, -wall])\n            cube([width+4, depth+4, wall], center=false);\n        // Cutout for toes\n        translate([wall, wall, -wall])\n            cube([width-2*wall, depth-2*wall, wall], center=false);\n    }\n}\n\n// Drawer module\nmodule drawer(w, d, h, handle_h) {\n    difference() {\n        // Drawer box\n        translate([wall, wall, wall])\n            cube([w-2*wall, d-2*wall, h-2*wall], center=false);\n        // Hollow inside\n        translate([2*wall, 2*wall, 2*wall])\n            cube([w-4*wall, d-4*wall, h-3*wall], center=false);\n    }\n    // Handle\n    translate([w/2, d-wall, h/2])\n        rotate([90,0,0])\n            cylinder(h=handle_h, d=4, $fn=20);\n}\n\n// Row of drawers\nmodule drawer_row(count, start_h) {\n    drawer_w = (width - (count+1)*wall) / count;\n    for (i=[0:count-1]) {\n        translate([wall + i*(drawer_w+wall), 0, start_h])\n            drawer(drawer_w, depth, 15, 6);\n    }\n}\n\n// Assembly\nunion() {\n    dresser_body();\n    top_panel();\n    base_trim();\n\n    // Top row: 2 wide drawers\n    drawer_row(2, height-15-wall);\n\n    // Middle row: 3 narrow drawers\n    drawer_row(3, height-30-wall);\n\n    // Bottom row: 2 wide drawers\n    drawer_row(2, height-45-wall);\n}",
    "renders": true
  },
  {
    "household_item": "armoire",
    "openscad_code": "// Realistic 3D-Printable Armoire – Medium Complexity\n// Overall footprint ≈ 70 × 35 × 100 mm, 2 mm wall thickness\n// Designed for FDM printing – all overhangs ≤ 45°, split into printable parts\n\n$fa = 2;\n$fs = 0.5;\n\n// ---------- Global Dimensions ----------\nH = 100;          // total height\nW = 70;           // width\nD = 35;           // depth\nwall = 2;         // uniform wall thickness\n\n// ---------- Main Body ----------\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([W, D, H], center = true);\n        // Hollow interior\n        translate([0, 0, wall])\n            cube([W - 2*wall, D - wall, H - 2*wall], center = true);\n    }\n}\n\n// ---------- Feet ----------\nmodule feet() {\n    foot_size = 5;\n    foot_h = 6;\n    positions = [[-W/2 + foot_size/2, -D/2 + foot_size/2],\n                 [ W/2 - foot_size/2, -D/2 + foot_size/2],\n                 [-W/2 + foot_size/2,  D/2 - foot_size/2],\n                 [ W/2 - foot_size/2,  D/2 - foot_size/2]];\n    for (p = positions) {\n        translate([p.x, p.y, -H/2 + foot_h/2])\n            cylinder(h = foot_h, d = foot_size, center = true);\n    }\n}\n\n// ---------- Top Molding ----------\nmodule top_molding() {\n    m_height = 4;\n    difference() {\n        translate([0, 0, H/2 - m_height/2])\n            cube([W + 4, D + 4, m_height], center = true);\n        translate([0, 0, H/2 + m_height/2])\n            cube([W - 4, D, m_height + 1], center = true);\n    }\n}\n\n// ---------- Doors ----------\nmodule doors() {\n    door_w = (W - 2*wall)/2 - 1;\n    door_h = H*0.75;\n    door_d = wall;\n    \n    // Left door\n    translate([-door_w/2 - wall, D/2 - door_d/2, 0])\n        cube([door_w, door_d, door_h], center = true);\n    \n    // Right door\n    translate([door_w/2 + wall, D/2 - door_d/2, 0])\n        cube([door_w, door_d, door_h], center = true);\n    \n    // Door knobs\n    knob_r = 2;\n    knob_h = 3;\n    translate([-door_w*0.75, D/2 + knob_h/2, 0])\n        cylinder(h = knob_h, r = knob_r, center = true);\n    translate([door_w*0.75, D/2 + knob_h/2, 0])\n        cylinder(h = knob_h, r = knob_r, center = true);\n}\n\n// ---------- Internal Shelf ----------\nmodule shelf() {\n    shelf_y = D - wall;\n    shelf_z = 0;\n    translate([0, 0, shelf_z])\n        cube([W - 2*wall, shelf_y, wall], center = true);\n}\n\n// ---------- Back Panel with Keyhole Slots ----------\nmodule back_panel() {\n    // Keyhole for mounting (3 mm screw head)\n    slot_w = 5;\n    slot_h = 8;\n    slot_d = 1;\n    \n    difference() {\n        translate([0, -D/2 + wall/2, 0])\n            cube([W, wall, H], center = true);\n        \n        // Two keyholes\n        for (x = [-W/4, W/4])\n        translate([x, -D/2 + wall/2, H*0.6])\n            cube([slot_w, wall + 0.1, slot_h], center = true);\n    }\n}\n\n// ---------- Assembly ----------\ntranslate([0, 0, H/2])\n    union() {\n        body();\n        feet();\n        top_molding();\n        doors();\n        shelf();\n        back_panel();\n    }",
    "renders": true
  },
  {
    "household_item": "hutch",
    "openscad_code": "// Realistic Medium-Complexity Hutch\n// Overall size ≈ 80 mm wide × 40 mm deep × 80 mm tall\n// Wall thickness 2 mm for 3D-printability\n// No steep overhangs; all angles ≤ 45°\n\n$fn = 32;  // Smooth curves\n\n// --- Main Hutch Module ---\nmodule hutch() {\n    difference() {\n        union() {\n            base_cabinet();\n            upper_cabinet();\n            back_panel();\n        }\n        \n        // Remove cavities\n        translate([2, 2, 2]) cube([76, 36, 36]);     // Lower cavity\n        translate([2, 2, 44]) cube([76, 36, 34]);    // Upper cavity\n    }\n}\n\n// --- Lower Cabinet ---\nmodule base_cabinet() {\n    cube([80, 40, 40]);  // Full block\n}\n\n// --- Upper Cabinet ---\nmodule upper_cabinet() {\n    translate([0, 0, 40]) cube([80, 40, 40]);  // Stacked on base\n}\n\n// --- Back Panel ---\nmodule back_panel() {\n    translate([-2, 18, 0]) cube([2, 4, 80]);  // 2 mm thick back\n}\n\n// --- Shelves ---\nmodule shelves() {\n    for (z = [10, 25, 50, 65]) {\n        translate([2, 2, z]) cube([76, 36, 1.5]);\n    }\n}\n\n// --- Glass Pane Doors ---\nmodule doors() {\n    // Lower pair\n    for (x = [4, 42]) {\n        translate([x, 39, 5]) rotate([90, 0, 0])\n            linear_extrude(height = 30, center = false)\n                offset(r = 1) square([34, 24]);\n    }\n    \n    // Upper pair\n    for (x = [4, 42]) {\n        translate([x, 39, 45]) rotate([90, 0, 0])\n            linear_extrude(height = 30, center = false)\n                offset(r = 1) square([34, 24]);\n    }\n}\n\n// --- Drawer Fronts ---\nmodule drawers() {\n    for (z = [13, 21.5, 30]) {\n        translate([10, 39, z]) rotate([90, 0, 0])\n            linear_extrude(height = 7)\n                offset(r = 1) square([60, 7]);\n    }\n}\n\n// --- Simple Handles ---\nmodule handles() {\n    for (x = [20, 58]) {\n        translate([x, 41, 20]) rotate([0, 90, 0])\n            cylinder(h = 6, r = 1.5);\n    }\n    for (x = [20, 58]) {\n        translate([x, 41, 60]) rotate([0, 90, 0])\n            cylinder(h = 6, r = 1.5);\n    }\n}\n\n// --- Assembly ---\nhutch();\nshelves();\ndoors();\ndrawers();\nhandles();",
    "renders": true
  },
  {
    "household_item": "bookcase",
    "openscad_code": "// Realistic Medium-complexity Bookcase\n// Approx. 70 mm tall, 60 mm wide, 20 mm deep\n// Designed for FDM printing: 1.2 mm walls, 45° max overhang\n\n$fn = 32;                // Smooth curves\nwall = 1.2;              // 3×0.4 mm nozzle width\nclearance = 0.2;         // Print tolerance\n\n// Overall outer dimensions\nwidth  = 60;\ndepth  = 20;\nheight = 70;\n\n// Shelf parameters\nshelf_thick = wall;\nshelf_clear = 18;\nshelf_count = 3;\nshelf_pitch = (height-2*wall-shelf_thick)/shelf_count;\n\n// Back panel dado depth\ndado = 1.5;\n\nmodule side_panel(){\n    difference(){\n        // Main panel\n        translate([0,0,height/2])\n            cube([wall, depth, height], center=true);\n\n        // Dadoes for shelves\n        for(i=[1:shelf_count]){\n            translate([0, 0, i*shelf_pitch+shelf_thick/2])\n                rotate([0,90,0])\n                    cube([depth, shelf_thick*2, wall*2], center=true);\n        }\n\n        // Dado for back panel\n        translate([wall/2-dado/2, 0, height/2])\n            cube([dado, depth, height], center=true);\n    }\n}\n\nmodule shelf(){\n    difference(){\n        cube([width-2*wall, depth-wall, shelf_thick]);\n        \n        // Taper front edge slightly\n        translate([-1, depth-wall-2, -1])\n            rotate([0,45,0])\n                cube([width-2*wall+2, 2.5, shelf_thick+2]);\n                \n        // Dado for back panel\n        translate([0, depth-wall-dado, -1])\n            cube([width-2*wall, dado, shelf_thick+2]);\n    }\n}\n\nmodule back_panel(){\n    cube([width-2*wall, wall, height-2*wall]);\n}\n\nmodule book(width, height, depth){\n    // Slight random tilt for realism\n    rotate([0, 0, 2-rands(-2,2,1)[0]]){\n        difference(){\n            cube([width, depth, height]);\n            // Rounded spine\n            translate([width/2-wall/2, depth-wall, height/2])\n                rotate([90,0,0])\n                    cylinder(h=width-wall, r=wall/2, center=true);\n        }\n    }\n}\n\nmodule books(){\n    // Random books on each shelf\n    for(s=[1:shelf_count]){\n        ypos = s*shelf_pitch;\n        xstart = wall + 2;\n        xend = width - wall - 2;\n        \n        // Generate 3-4 books per shelf\n        seed = s*45;\n        for(i=[0:2]){\n            w = rands(4,8,1,seed+i*3)[0];\n            h = rands(10,15,1,seed+i*3+1)[0];\n            d = depth - wall - 1.5;\n            xpos = xstart + i*12 + rands(0,2,1,seed+i*3+2)[0];\n            if(xpos + w < xend){\n                translate([xpos, ypos + shelf_thick, wall + h/2])\n                    color([0.2,0.2,0.2])\n                        book(w, h, d);\n            }\n        }\n    }\n}\n\nmodule base_trim(){\n    // Simple plinth\n    translate([0, -wall/2, wall/2])\n        cube([width, wall, wall]);\n    translate([0, depth-wall/2, wall/2])\n        cube([width, wall, wall]);\n}\n\n// Assembly\ndifference(){\n    union(){\n        // Left side\n        translate([wall/2, depth/2, height/2])\n            side_panel();\n            \n        // Right side\n        translate([width-wall/2, depth/2, height/2])\n            mirror([1,0,0])\n                side_panel();\n                \n        // Shelves\n        for(i=[1:shelf_count]){\n            translate([wall, i*shelf_pitch+shelf_thick/2, wall])\n                shelf();\n        }\n        \n        // Back panel\n        translate([wall, depth-wall/2, height/2])\n            back_panel();\n            \n        // Base trim\n        base_trim();\n    }\n    \n    // Remove printing aids\n    // (none needed for this design)\n}\n\n// Add books\nbooks();",
    "renders": true
  },
  {
    "household_item": "sideboard",
    "openscad_code": "// Realistic Medium-Complexity Sideboard\n// Approx. 80 mm wide – fits most FDM printers\n// No overhangs >45°, 1.2 mm wall thickness throughout\n\n$fn = 36;\n\n// Overall dimensions\nsideboard_w = 80;\nsideboard_h = 45;\nsideboard_d = 35;\nwall_t = 1.2;\n\nmodule carcass() {\n    difference() {\n        // Main box\n        cube([sideboard_w, sideboard_d, sideboard_h], center = true);\n\n        // Hollow inside\n        translate([0, 0, wall_t/2])\n            cube([sideboard_w - 2*wall_t, sideboard_d - wall_t, sideboard_h - wall_t], center = true);\n    }\n}\n\nmodule shelf() {\n    translate([0, 0, -sideboard_h/4])\n        cube([sideboard_w - 2*wall_t, sideboard_d - wall_t, wall_t], center = true);\n}\n\nmodule leg() {\n    // Simple tapered foot\n    cylinder(h1 = 8, h2 = 8, r1 = 2.5, r2 = 2.0, center = false);\n}\n\nmodule legs() {\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x * (sideboard_w/2 - 4), y * (sideboard_d/2 - 4), -sideboard_h/2 - 4])\n                leg();\n}\n\nmodule door() {\n    // Panel door with slight bevel\n    difference() {\n        // Door slab\n        translate([0, 0, -wall_t/2])\n            cube([sideboard_w/2 - 4, wall_t + 0.1, sideboard_h/2 - 4], center = true);\n\n        // Recessed panel\n        translate([0, 0, -wall_t/2 - 0.1])\n            cube([sideboard_w/2 - 10, wall_t + 0.3, sideboard_h/2 - 10], center = true);\n\n        // Handle hole\n        translate([(sideboard_w/2 - 4)/2 - 4, wall_t/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 1.2, center = true);\n    }\n}\n\nmodule doors() {\n    translate([-sideboard_w/4, sideboard_d/2 + wall_t/2, 0])\n        door();\n    translate([ sideboard_w/4, sideboard_d/2 + wall_t/2, 0])\n        door();\n}\n\nmodule top() {\n    // Slightly thicker top board\n    translate([0, 0, sideboard_h/2 + wall_t/2])\n        cube([sideboard_w + 2*wall_t, sideboard_d + 2*wall_t, wall_t], center = true);\n}\n\n// Build the sideboard\nunion() {\n    legs();\n    carcass();\n    shelf();\n    top();\n    doors();\n}",
    "renders": true
  },
  {
    "household_item": "buffet",
    "openscad_code": "// Realistic Medium-Complexity Buffet Cabinet\n// Overall dimensions ~80 mm wide, ~45 mm deep, ~55 mm tall\n\n// Wall thickness for 3D-printing\nwall = 2;\n\n// Main carcass\nmodule carcass() {\n    difference() {\n        // Outer shell\n        cube([80, 45, 55], center = false);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([80 - 2*wall, 45 - 2*wall, 55 - 2*wall], center = false);\n    }\n}\n\n// Shelves inside\nmodule shelves() {\n    for (z = [15, 35]) {\n        translate([wall, wall, z])\n            cube([80 - 2*wall, 45 - 2*wall, wall], center = false);\n    }\n}\n\n// Back panel\nmodule back() {\n    translate([0, 45 - wall, 0])\n        cube([80, wall, 55], center = false);\n}\n\n// Countertop lip\nmodule lip() {\n    difference() {\n        // Full lip\n        translate([-2, -2, 55])\n            cube([84, 49, 4], center = false);\n        \n        // Cut back to reveal only lip\n        translate([0, 0, 55])\n            cube([80, 45, 4], center = false);\n    }\n}\n\n// Cabinet doors\nmodule doors() {\n    for (x = [2, 42]) {\n        translate([x, wall, 3])\n            cube([36, 45 - 2*wall - 1, 50 - 3 - wall], center = false);\n    }\n}\n\n// Door handles\nmodule handles() {\n    for (x = [20, 60]) {\n        translate([x, 2, 30])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 4, center = true, $fn = 16);\n    }\n}\n\n// Small drawer\nmodule drawer() {\n    translate([wall, wall, 55 - 12])\n        cube([80 - 2*wall, 45 - 2*wall, 10], center = false);\n}\n\n// Drawer front\nmodule drawer_front() {\n    translate([wall, wall, 55 - 10])\n        cube([80 - 2*wall, 45 - 2*wall - 1, 10], center = false);\n}\n\n// Drawer handle\nmodule drawer_handle() {\n    translate([40, 2, 55 - 5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 4, center = true, $fn = 16);\n}\n\n// Base plinth\nmodule plinth() {\n    difference() {\n        // Full base\n        translate([-2, -2, -3])\n            cube([84, 49, 3], center = false);\n        \n        // Recess center\n        translate([2, 2, -3])\n            cube([76, 41, 3], center = false);\n    }\n}\n\n// Assemble buffet\nunion() {\n    carcass();\n    shelves();\n    back();\n    lip();\n    doors();\n    handles();\n    drawer();\n    drawer_front();\n    drawer_handle();\n    plinth();\n}",
    "renders": true
  },
  {
    "household_item": "credenza",
    "openscad_code": "// Realistic Credenza - Medium Complexity\n// Overall dimensions: 80mm W x 40mm D x 50mm H\n\nwall_thickness = 2;\nleg_height = 10;\nleg_width = 3;\n\nmodule leg() {\n    difference() {\n        cube([leg_width, leg_width, leg_height], center=true);\n        translate([0, 0, leg_height/2 - 1])\n            cube([leg_width-1, leg_width-1, 2], center=true);\n    }\n}\n\nmodule legs() {\n    front_offset = 35;\n    side_offset = 37;\n    translate([front_offset, side_offset, leg_height/2])\n        leg();\n    translate([front_offset, -side_offset, leg_height/2])\n        leg();\n    translate([-front_offset, side_offset, leg_height/2])\n        leg();\n    translate([-front_offset, -side_offset, leg_height/2])\n        leg();\n}\n\nmodule body() {\n    difference() {\n        // Main body\n        cube([80, 40, 38]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([80 - 2*wall_thickness, 40 - 2*wall_thickness, 38 - wall_thickness]);\n    }\n}\n\nmodule door() {\n    difference() {\n        // Door panel\n        translate([0, 0, 0])\n            cube([39, 1, 36]);\n            \n        // Handle cutout\n        translate([30, -0.5, 15])\n            cube([6, 2, 6]);\n    }\n    \n    // Door handle\n    translate([33, 0, 18])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=2.5, $fn=12);\n}\n\nmodule doors() {\n    translate([0.5, 40.5, 1])\n        door();\n    translate([40.5, 40.5, 1])\n        door();\n}\n\nmodule shelf() {\n    difference() {\n        translate([0, 0, 0])\n            cube([78, 38, 2]);\n        translate([1, 1, -0.1])\n            cube([76, 36, 2.2]);\n    }\n}\n\nmodule shelves() {\n    translate([1, 1, 13])\n        shelf();\n    translate([1, 1, 26])\n        shelf();\n}\n\nmodule back_panel() {\n    translate([-39.5, 1, 19])\n        rotate([0, 90, 0])\n            cube([38, 78, 2]);\n}\n\n// Assemble the credenza\nunion() {\n    legs();\n    translate([0, 0, leg_height])\n        body();\n    doors();\n    shelves();\n    translate([0, 39, leg_height])\n        back_panel();\n}",
    "renders": true
  },
  {
    "household_item": "ottoman",
    "openscad_code": "// Ottoman - Realistic style, medium complexity\n// 3D printable, ~70mm wide\n\n$fn = 32; // Smooth curves\n\nmodule leg() {\n    difference() {\n        cylinder(h = 15, d = 8); // Main leg\n        translate([0, 0, -1]) cylinder(h = 17, d = 6); // Hollow\n    }\n}\n\nmodule tufted_button() {\n    difference() {\n        sphere(d = 6); // Button\n        translate([0, 0, -3]) sphere(d = 3.5); // Indentation\n    }\n}\n\nmodule seam() {\n    rotate([90, 0, 0]) cylinder(h = 50, d = 0.8, $fn = 6); // Sewing seam\n}\n\n// Main body\ndifference() {\n    // Padded cube\n    minkowski() {\n        cube([60, 60, 20], center = true); // Core\n        sphere(d = 3); // Soft edges\n    }\n    \n    // Hollow interior\n    minkowski() {\n        cube([54, 54, 16], center = true);\n        sphere(d = 2);\n    }\n}\n\n// Legs - one at each corner\nfor (x = [-25, 25], y = [-25, 25]) {\n    translate([x, y, -7.5]) leg();\n}\n\n// Top surface details\ndifference() {\n    translate([0, 0, 11.5]) {\n        minkowski() {\n            cube([60, 60, 3], center = true);\n            sphere(d = 3);\n        }\n    }\n    \n    // Hollow top\n    minkowski() {\n        cube([54, 54, 3], center = true);\n        sphere(d = 2);\n    }\n}\n\n// Tufting buttons (4 buttons)\nfor (x = [-20, 20], y = [-20, 20]) {\n    translate([x, y, 13]) tufted_button();\n}\n\n// Decorative seams\n// Horizontal seams\nfor (y = [-20, 20]) {\n    translate([0, y, 13.5]) seam();\n}\n\n// Vertical seams\nfor (x = [-20, 20]) {\n    rotate([0, 0, 90]) translate([0, x, 13.5]) seam();\n}",
    "renders": true
  },
  {
    "household_item": "stool",
    "openscad_code": "// Realistic 3D-printable stool, medium complexity\n// Seat diameter ~60 mm, total height ~70 mm, wall 2 mm\n\n$fn = 36;              // Smooth curves\nwall = 2;              // 3D-print friendly wall thickness\nseat_d = 60;           // Seat diameter\nseat_h = 4;            // Seat thickness\nleg_d = 6;             // Leg outer diameter\nleg_h = 60;            // Leg height\nbrace_h = 10;          // Lower brace height from floor\nbrace_t = wall;        // Brace thickness\nfoot_d = 8;            // Foot diameter\nfoot_h = 2;            // Foot thickness\n\n// Seat with slight top-side radius\nmodule seat() {\n    difference() {\n        union() {\n            // Main seat disc\n            cylinder(d = seat_d, h = seat_h, center = false);\n            // Soft top fillet\n            translate([0, 0, seat_h])\n                cylinder(d1 = seat_d, d2 = seat_d - wall*2, h = 2, center = false);\n        }\n        // Central underside cavity to save material\n        translate([0, 0, -0.1])\n            cylinder(d = seat_d - wall*2, h = seat_h + 0.2, center = false);\n    }\n}\n\n// Single leg with pin for brace\nmodule leg() {\n    difference() {\n        // Leg tube\n        cylinder(d = leg_d, h = leg_h, center = false);\n        // Hollow\n        translate([0, 0, -0.1])\n            cylinder(d = leg_d - wall*2, h = leg_h + 0.2, center = false);\n    }\n    // Small collar for brace\n    translate([0, 0, brace_h])\n        cylinder(d = leg_d + wall, h = brace_t, center = false);\n}\n\n// Circular H-brace between legs (octagonal approximation)\nmodule brace() {\n    brace_r = (seat_d/2 - leg_d/2) * 0.9;   // Radius of brace circle\n    difference() {\n        // Outer ring\n        for(i=[0:45:315])\n            rotate([0, 0, i])\n                translate([brace_r, 0, 0])\n                    cube([brace_t*2, leg_d + wall, brace_t], center = true);\n        // Inner hole\n        cylinder(d = brace_r*1.2, h = brace_t + 0.2, center = false);\n    }\n}\n\n// Foot pad for stability and floor protection\nmodule foot() {\n    difference() {\n        // Foot disc\n        translate([0, 0, leg_h])\n            cylinder(d = foot_d, h = foot_h, center = false);\n        // Hollow\n        translate([0, 0, leg_h - 0.1])\n            cylinder(d = foot_d - wall*2, h = foot_h + 0.2, center = false);\n    }\n}\n\n// Assemble stool\nmodule stool() {\n    color(\"Tan\")\n        seat();\n\n    // Four legs with feet\n    for(a=[0:90:270]) {\n        color(\"SaddleBrown\")\n            rotate([0, 0, a])\n                translate([seat_d/2 - leg_d/2, 0, 0])\n                    leg();\n        color(\"SaddleBrown\")\n            rotate([0, 0, a])\n                translate([seat_d/2 - leg_d/2, 0, 0])\n                    foot();\n    }\n\n    // Lower brace ring\n    color(\"SaddleBrown\")\n        translate([0, 0, brace_h])\n            brace();\n}\n\n// Center model on build plate\ntranslate([0, 0, 0])\n    stool();",
    "renders": true
  },
  {
    "household_item": "bench",
    "openscad_code": "// Simple park bench, ~80 mm long\n// Optimized for 3D printing – all overhangs <45°, 2 mm walls\n\nmodule slat(len=12, wid=8, thick=2) {\n    // single wooden slat\n    cube([len, wid, thick], center=true);\n}\n\nmodule leg_support() {\n    // A-frame leg with printable angles\n    difference() {\n        union() {\n            // main A-frame\n            rotate([0, 0, 30]) cube([20, 2, 12], center=true);\n            rotate([0, 0, -30]) cube([20, 2, 12], center=true);\n            // bottom stretcher\n            translate([0, 0, -5]) cube([20, 2, 2], center=true);\n            // top cross-bar\n            translate([0, 0, 5]) cube([16, 2, 2], center=true);\n        }\n        // lightening cutouts\n        translate([5, 0, 0]) cube([10, 3, 10], center=true);\n        translate([-5, 0, 0]) cube([10, 3, 10], center=true);\n    }\n}\n\nmodule seat() {\n    // seven slats for seat\n    for (i=[-30:10:30])\n        translate([i, 0, 7])\n        slat(len=70, wid=8, thick=2);\n}\n\nmodule backrest() {\n    // five slats for back, tilted 10°\n    for (i=[-20:10:20]) {\n        translate([i, -6.5, 15])\n        rotate([10, 0, 0])\n        slat(len=60, wid=8, thick=2);\n    }\n}\n\nmodule armrest() {\n    // printable armrest with support\n    difference() {\n        union() {\n            // top plate\n            translate([0, -12, 11]) cube([14, 6, 2], center=true);\n            // vertical post\n            translate([0, -9, 5]) cube([4, 4, 8], center=true);\n            // 45° brace\n            rotate([0, 45, 0]) translate([0, -9, 2]) cube([10, 4, 2], center=true);\n        }\n        // lightening\n        translate([0, -12, 11]) cube([12, 4, 1], center=true);\n    }\n}\n\n// final assembly\ntranslate([0, 0, 5]) leg_support();\nmirror([1, 0, 0]) translate([0, 0, 5]) leg_support();\nseat();\nbackrest();\ntranslate([30, 0, 0]) armrest();\nmirror([1, 0, 0]) translate([30, 0, 0]) armrest();",
    "renders": true
  },
  {
    "household_item": "settee",
    "openscad_code": "// Realistic medium-complexity settee, ~70 mm long\n// Optimized for FDM printing (2 mm wall, no steep overhangs)\n\n$fa = 2; $fs = 0.5;\n\nmodule rounded_box(w,l,h,r){\n    // Helper for slightly rounded edges\n    hull() for(dx=[r,w-r], dy=[r,l-r], dz=[0,h]){\n        translate([dx,dy,dz]) sphere(r);\n    }\n}\n\nmodule leg(){\n    // Tapered square leg with 45° chamfers\n    difference(){\n        rounded_box(6,6,24,1);\n        translate([0,0,-1]) cube([4,4,26], center=true);\n    }\n}\n\nmodule back_post(){\n    // Vertical post in back-rest frame\n    rotate([90,0,0]) cylinder(h=35, d1=4, d2=3);\n}\n\nmodule arm_rest(){\n    // Curved arm rest\n    hull(){\n        translate([0,0,0]) sphere(3);\n        translate([0,22,0]) sphere(3);\n        translate([0,22,2]) sphere(3);\n        translate([0,0,2]) sphere(3);\n    }\n}\n\nmodule seat_cushion(){\n    // Slightly puffy cushion\n    difference(){\n        minkowski(){\n            cube([52,28,6], center=true);\n            sphere(1);\n        }\n        translate([0,0,3]) cube([54,30,4], center=true);\n    }\n}\n\nmodule back_panel(){\n    // Slatted back-rest\n    for(i=[-20:10:20]) translate([i,0,0])\n        cube([8,3,24], center=true);\n}\n\n// Assembly\nunion(){\n    // Seat frame\n    translate([0,0,12])\n        rounded_box(60,34,4,2);\n\n    // Seat cushion\n    translate([0,0,16])\n        seat_cushion();\n\n    // Back-rest\n    translate([0,-16,28])\n        back_panel();\n\n    // Back posts\n    for(x=[-24,24])\n        translate([x,-16,0]) back_post();\n\n    // Arms\n    for(side=[-1,1]){\n        translate([27*side,0,18])\n            rotate([0,0,90*side]) arm_rest();\n    }\n\n    // Legs\n    for(x=[-22,22], y=[-11,11])\n        translate([x,y,0]) leg();\n}",
    "renders": true
  },
  {
    "household_item": "futon",
    "openscad_code": "// Realistic 3D printable futon at 1:20 scale (~80 mm long)\n// Overall dimensions: 80 mm long x 52 mm deep x 26 mm high\n\n// Parameters\n$fn = 32;\nframe_w = 4;          // wall thickness for printability\nleg_d = 5;            // leg diameter\nmattress_h = 8;       // mattress thickness\nback_h = 20;          // backrest height\nseat_d = 26;          // seat depth\ntotal_l = 80;         // total length\ntotal_w = 52;         // total width\n\n// Main assembly\nmodule futon() {\n    // Lower frame (base)\n    translate([0, 0, leg_d]) base_frame();\n\n    // Backrest frame\n    translate([0, 0, leg_d]) back_frame();\n\n    // Mattress\n    translate([0, seat_d/2, leg_d + frame_w]) mattress();\n\n    // Legs\n    legs();\n}\n\n// Base rectangular frame\nmodule base_frame() {\n    difference() {\n        // Outer box\n        cube([total_l, total_w, frame_w], center = true);\n\n        // Carve out cavity (leave walls)\n        translate([0, 0, -0.1])\n            cube([total_l - 2*frame_w, total_w - 2*frame_w, frame_w + 0.2], center = true);\n    }\n}\n\n// Backrest frame\nmodule back_frame() {\n    rotate([90, 0, 0])\n    translate([0, 0, -back_h/2])\n    difference() {\n        // Outer box\n        cube([total_l, back_h, frame_w], center = true);\n\n        // Carve out cavity (leave walls)\n        translate([0, 0, -0.1])\n            cube([total_l - 2*frame_w, back_h - 2*frame_w, frame_w + 0.2], center = true);\n    }\n}\n\n// Quilted mattress\nmodule mattress() {\n    difference() {\n        // Main foam block\n        translate([0, 0, mattress_h/2])\n            cube([total_l - 2*frame_w, total_w - 2*frame_w, mattress_h], center = true);\n\n        // Remove quilting grooves\n        for (x = [-30:10:30])\n            for (y = [-20:10:20])\n                translate([x, y, -0.1])\n                    cube([8, 8, mattress_h + 0.2], center = true);\n    }\n}\n\n// Four cylindrical legs\nmodule legs() {\n    for (x = [-total_l/2 + 10, total_l/2 - 10])\n        for (y = [-total_w/2 + 10, total_w/2 - 10])\n            translate([x, y, leg_d/2])\n                cylinder(h = leg_d, d = leg_d, center = true);\n}\n\n// Render\nfuton();",
    "renders": true
  },
  {
    "household_item": "bunkbed",
    "openscad_code": "// Bunkbed - realistic style, medium complexity\n// Designed for 3D printing, no supports needed\n\n// Overall dimensions\nbed_length = 80;\nbed_width = 45;\nbed_height = 55;\npost_size = 4;\nmattress_thickness = 5;\nrail_height = 8;\n\n// Materials\nwall_thickness = 2;\n\nmodule post() {\n    // Vertical posts with rounded tops\n    difference() {\n        cylinder(h = bed_height * 2 + mattress_thickness * 2, r = post_size/2, $fn=16);\n        translate([0, 0, bed_height * 2 + mattress_thickness * 2 - 2])\n            cylinder(h = 2, r = post_size/2 - wall_thickness, $fn=16);\n    }\n}\n\nmodule frame() {\n    // Bed frame structure\n    hull() {\n        translate([-bed_length/2 + wall_thickness, -bed_width/2 + wall_thickness, 0])\n            cube([wall_thickness*2, wall_thickness*2, wall_thickness]);\n        translate([bed_length/2 - wall_thickness, -bed_width/2 + wall_thickness, 0])\n            cube([wall_thickness*2, wall_thickness*2, wall_thickness]);\n        translate([-bed_length/2 + wall_thickness, bed_width/2 - wall_thickness, 0])\n            cube([wall_thickness*2, wall_thickness*2, wall_thickness]);\n        translate([bed_length/2 - wall_thickness, bed_width/2 - wall_thickness, 0])\n            cube([wall_thickness*2, wall_thickness*2, wall_thickness]);\n    }\n}\n\nmodule slats() {\n    // Mattress support slats\n    for(i = [-bed_length/2 + 10 : 5 : bed_length/2 - 10]) {\n        translate([i, 0, wall_thickness/2])\n            cube([wall_thickness, bed_width - wall_thickness*2, wall_thickness]);\n    }\n}\n\nmodule mattress() {\n    // Realistic mattress with rounded edges\n    difference() {\n        translate([0, 0, mattress_thickness/2])\n            cube([bed_length - wall_thickness*2, bed_width - wall_thickness*2, mattress_thickness], center=true);\n        // Rounded top edges\n        translate([0, 0, mattress_thickness])\n            minkowski() {\n                cube([bed_length - wall_thickness*2 - 2, bed_width - wall_thickness*2 - 2, 0.1], center=true);\n                cylinder(h=0.1, r=1, $fn=16);\n            }\n    }\n}\n\nmodule ladder() {\n    // Side ladder\n    translate([bed_length/2 - 2, 0, 0])\n    union() {\n        // Vertical rails\n        translate([0, -bed_width/4, 0])\n            cube([wall_thickness, wall_thickness, bed_height * 2 + mattress_thickness * 2]);\n        translate([0, bed_width/4, 0])\n            cube([wall_thickness, wall_thickness, bed_height * 2 + mattress_thickness * 2]);\n        \n        // Rungs\n        for(i = [1:4]) {\n            translate([-3, 0, i * (bed_height/2)])\n                cube([6, bed_width/2 - wall_thickness, wall_thickness]);\n        }\n    }\n}\n\nmodule safety_rail() {\n    // Safety rail for top bunk\n    translate([0, 0, bed_height + mattress_thickness + rail_height/2])\n    difference() {\n        cube([bed_length - wall_thickness*2, wall_thickness, rail_height], center=true);\n        // Spacing for bars\n        for(i = [-bed_length/2 + 5 : 5 : bed_length/2 - 5]) {\n            translate([i, 0, 0])\n                cube([wall_thickness, wall_thickness + 0.1, rail_height], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Bottom bunk\n    translate([0, 0, 0]) {\n        frame();\n        slats();\n        translate([0, 0, wall_thickness + mattress_thickness/2])\n            mattress();\n    }\n    \n    // Top bunk\n    translate([0, 0, bed_height + mattress_thickness]) {\n        frame();\n        slats();\n        translate([0, 0, wall_thickness + mattress_thickness/2])\n            mattress();\n    }\n    \n    // Posts at corners\n    translate([-bed_length/2 + post_size/2, -bed_width/2 + post_size/2, 0])\n        post();\n    translate([bed_length/2 - post_size/2, -bed_width/2 + post_size/2, 0])\n        post();\n    translate([-bed_length/2 + post_size/2, bed_width/2 - post_size/2, 0])\n        post();\n    translate([bed_length/2 - post_size/2, bed_width/2 - post_size/2, 0])\n        post();\n    \n    // Ladder on side\n    ladder();\n    \n    // Safety rail for top bunk (front side)\n    translate([0, bed_width/2 - wall_thickness/2, 0])\n        safety_rail();\n}",
    "renders": true
  },
  {
    "household_item": "divan",
    "openscad_code": "// OpenSCAD Divan Model - Realistic Medium Complexity\n\n// Overall dimensions (mm)\ndivan_length = 80;\ndivan_width = 35;\ndivan_height = 25;\nmattress_thickness = 5;\nleg_height = 4;\nbackrest_height = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule divan_base() {\n    // Main frame\n    difference() {\n        cube([divan_length, divan_width, divan_height], center=true);\n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([divan_length-wall_thickness*2, divan_width-wall_thickness*2, divan_height-wall_thickness], center=true);\n    }\n}\n\nmodule legs() {\n    // Four legs at corners\n    leg_positions = [\n        [-divan_length/2+3, -divan_width/2+3, 0],\n        [divan_length/2-3, -divan_width/2+3, 0],\n        [-divan_length/2+3, divan_width/2-3, 0],\n        [divan_length/2-3, divan_width/2-3, 0]\n    ];\n    \n    for(pos = leg_positions) {\n        translate(pos)\n            cylinder(h=leg_height, r=2, center=true);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest\n    translate([0, -divan_width/2+wall_thickness/2, divan_height/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=divan_length-wall_thickness*2, r=backrest_height, center=true);\n        // Hollow interior\n        cylinder(h=divan_length-wall_thickness*2+0.1, r=backrest_height-wall_thickness, center=true);\n    }\n}\n\nmodule mattress() {\n    // Soft mattress with rounded edges\n    translate([0, 0, divan_height/2+mattress_thickness/2])\n    difference() {\n        // Main mattress body\n        minkowski() {\n            cube([divan_length-wall_thickness*2, divan_width-wall_thickness*2, mattress_thickness], center=true);\n            sphere(r=1);\n        }\n        \n        // Remove bottom sphere for flat base\n        translate([0, 0, -mattress_thickness/2-1])\n            cube([divan_length*2, divan_width*2, 2], center=true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-divan_length/2+wall_thickness, 0, divan_height/2+mattress_thickness/2])\n    difference() {\n        cube([wall_thickness*3, divan_width/2, backrest_height*0.8], center=true);\n        translate([0, 0, -backrest_height*0.4+wall_thickness/2])\n            cube([wall_thickness*3-wall_thickness, divan_width/2-wall_thickness, backrest_height*0.8-wall_thickness], center=true);\n    }\n    \n    // Right armrest\n    translate([divan_length/2-wall_thickness, 0, divan_height/2+mattress_thickness/2])\n    difference() {\n        cube([wall_thickness*3, divan_width/2, backrest_height*0.8], center=true);\n        translate([0, 0, -backrest_height*0.4+wall_thickness/2])\n            cube([wall_thickness*3-wall_thickness, divan_width/2-wall_thickness, backrest_height*0.8-wall_thickness], center=true);\n    }\n}\n\nmodule cushions() {\n    // Two cushions on top\n    cushion_positions = [\n        [-divan_length/4, 0, divan_height/2+mattress_thickness+1.5],\n        [divan_length/4, 0, divan_height/2+mattress_thickness+1.5]\n    ];\n    \n    for(pos = cushion_positions) {\n        translate(pos)\n        scale([1, 0.8, 0.6])\n        minkowski() {\n            cube([15, 10, 5], center=true);\n            sphere(r=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    divan_base();\n    translate([0, 0, -divan_height/2-leg_height/2])\n        legs();\n    backrest();\n    mattress();\n    armrests();\n    cushions();\n}",
    "renders": true
  },
  {
    "household_item": "headboard",
    "openscad_code": "// Realistic Headboard - Medium Complexity\n// 100mm wide x 60mm tall x 10mm deep\n\n// Main headboard panel with rounded edges\nmodule headboard_panel() {\n    // Main board\n    difference() {\n        // Rounded front face\n        hull() {\n            translate([0, 0, 0]) sphere(r=2, $fn=20);\n            translate([100, 0, 0]) sphere(r=2, $fn=20);\n            translate([0, 60, 0]) sphere(r=2, $fn=20);\n            translate([100, 60, 0]) sphere(r=2, $fn=20);\n            translate([0, 0, 10]) sphere(r=2, $fn=20);\n            translate([100, 0, 10]) sphere(r=2, $fn=20);\n            translate([0, 60, 10]) sphere(r=2, $fn=20);\n            translate([100, 60, 10]) sphere(r=2, $fn=20);\n        }\n        \n        // Recessed center\n        translate([5, 5, 8]) cube([90, 50, 5]);\n    }\n}\n\n// Vertical slats\nmodule slat(x_pos) {\n    difference() {\n        // Main slat body\n        translate([x_pos, 0, 0]) cube([6, 60, 6]);\n        \n        // Top rounded\n        translate([x_pos, -1, 3]) cylinder(h=8, r1=3, r2=3, $fn=16);\n        \n        // Bottom rounded\n        translate([x_pos, 61, 3]) cylinder(h=8, r1=3, r2=3, $fn=16);\n    }\n}\n\n// Horizontal support bar\nmodule support_bar() {\n    difference() {\n        // Main bar\n        translate([0, 25, 0]) cube([100, 8, 8]);\n        \n        // Rounded edges\n        for(i = [0:100:100]) {\n            translate([i, 25, 4]) rotate([90, 0, 0]) cylinder(h=8, r1=4, r2=4, $fn=12);\n            translate([i, 33, 4]) rotate([90, 0, 0]) cylinder(h=8, r1=4, r2=4, $fn=12);\n        }\n    }\n}\n\n// Decorative molding\nmodule top_molding() {\n    difference() {\n        // Main molding\n        hull() {\n            translate([0, 60, 5]) sphere(r=2, $fn=12);\n            translate([100, 60, 5]) sphere(r=2, $fn=12);\n            translate([0, 65, 5]) sphere(r=3, $fn=12);\n            translate([100, 65, 5]) sphere(r=3, $fn=12);\n        }\n        \n        // Cut bottom flat\n        translate([0, 60, -1]) cube([100, 10, 7]);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(x = [10, 90]) {\n        for(y = [15, 45]) {\n            translate([x, y, 5]) rotate([90, 0, 0]) cylinder(h=10, r1=2, r2=2, $fn=12);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main panel\n    headboard_panel();\n    \n    // Vertical slats\n    for(x = [15:20:85]) {\n        slat(x);\n    }\n    \n    // Support bar\n    support_bar();\n    \n    // Top molding\n    top_molding();\n    \n    // Mounting holes (for screws)\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "household_item": "footboard",
    "openscad_code": "// Footboard – realistic style, medium complexity\n// External dims: 80 x 45 x 25 mm (printable on most FDM printers)\n\n$fn = 36;           // Smooth curves\n\n// Main panel\nmodule main_panel() {\n    difference() {\n        // Slab with soft-rounded top edges\n        minkowski() {\n            cube([78, 43, 15], center = true);\n            cylinder(h = 0.1, r = 2);   // rounded edges\n        }\n        // Recessed area for mattress support\n        translate([0, 0, 6])\n            cube([74, 39, 10], center = true);\n    }\n}\n\n// Vertical posts\nmodule post() {\n    difference() {\n        // Post body\n        cylinder(h = 25, r = 4);\n        // Lightening hole to save material\n        cylinder(h = 27, r = 2);\n    }\n}\n\n// Caps for posts (ball finials)\nmodule cap() {\n    sphere(d = 8);\n}\n\n// Horizontal rail between posts\nmodule rail() {\n    hull() {\n        translate([-28, 0, 12]) cylinder(h = 1, r = 3);\n        translate([ 28, 0, 12]) cylinder(h = 1, r = 3);\n    }\n}\n\n// Decorative beading along top edge\nmodule bead_row() {\n    for (i = [-3:1:3]) {\n        translate([i * 11, 0, 8])\n            sphere(d = 4);\n    }\n}\n\n// Assembly\nunion() {\n    // Center panel\n    main_panel();\n\n    // Left post\n    translate([-30, 0, 0]) {\n        post();\n        translate([0, 0, 27]) cap();\n    }\n\n    // Right post\n    translate([30, 0, 0]) {\n        post();\n        translate([0, 0, 27]) cap();\n    }\n\n    // Connecting rail\n    rail();\n\n    // Beading\n    bead_row();\n}",
    "renders": true
  },
  {
    "household_item": "nightstand",
    "openscad_code": "// Nightstand - Realistic Style, Medium Complexity\n// Approximate size: 70mm W x 60mm D x 75mm H\n\n$fn=32;\n\n// Main body dimensions\nbody_w = 65;\nbody_d = 55;\nbody_h = 65;\nwall_t = 3;\n\n// Drawer dimensions\ndrawer_w = body_w - 2*wall_t;\ndrawer_d = body_d - wall_t;\ndrawer_h = 15;\ndrawer_gap = 1;\n\n// Top dimensions\ntop_w = body_w + 6;\ntop_d = body_d + 6;\ntop_t = 4;\n\n// Leg dimensions\nleg_w = 6;\nleg_h = 10;\n\n// Handle dimensions\nhandle_w = 20;\nhandle_h = 8;\nhandle_d = 3;\n\nmodule nightstand() {\n    union() {\n        // Top surface with rounded edges\n        translate([0, 0, body_h + leg_h]) {\n            difference() {\n                // Main top block\n                cube([top_w, top_d, top_t], center=true);\n                \n                // Round the top edges slightly\n                translate([0, 0, top_t/2 - 1]) {\n                    minkowski() {\n                        cube([top_w - 2, top_d - 2, 0.1], center=true);\n                        cylinder(h=0.1, r=1);\n                    }\n                }\n            }\n        }\n        \n        // Main body\n        translate([0, 0, leg_h + body_h/2]) {\n            difference() {\n                // Outer shell\n                cube([body_w, body_d, body_h], center=true);\n                \n                // Hollow interior\n                cube([body_w - 2*wall_t, body_d - 2*wall_t, body_h - wall_t], center=true);\n            }\n        }\n        \n        // Drawers\n        for(i = [0:1]) {\n            translate([0, 0, leg_h + wall_t + i*(drawer_h + drawer_gap) + drawer_h/2]) {\n                // Drawer box\n                difference() {\n                    // Main drawer\n                    cube([drawer_w, drawer_d - 2, drawer_h], center=true);\n                    \n                    // Hollow interior\n                    cube([drawer_w - 2*wall_t, drawer_d - wall_t - 2, drawer_h - wall_t], center=true);\n                }\n                \n                // Drawer front\n                translate([0, drawer_d/2 - 1, 0]) {\n                    cube([drawer_w, wall_t + 1, drawer_h], center=true);\n                    \n                    // Handle\n                    translate([0, wall_t/2 + 1, 0]) {\n                        difference() {\n                            // Handle base\n                            cube([handle_w + 4, handle_d + 2, handle_h/2], center=true);\n                            \n                            // Handle grip space\n                            translate([0, -1, 0]) {\n                                cube([handle_w, handle_d + 4, handle_h], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*(body_w/2 - leg_w/2), y*(body_d/2 - leg_w/2), leg_h/2]) {\n                    cylinder(h=leg_h, r=leg_w/2);\n                }\n            }\n        }\n        \n        // Back panel\n        translate([0, body_d/2 - wall_t/2, leg_h + body_h/2]) {\n            cube([body_w - 2*wall_t, wall_t, body_h - wall_t], center=true);\n        }\n    }\n}\n\n// Render the nightstand\nnightstand();",
    "renders": true
  },
  {
    "household_item": "armchair",
    "openscad_code": "// Armchair - realistic medium complexity\n\n// Overall dimensions\nchair_width = 60;\nchair_depth = 55;\nchair_height = 65;\nseat_height = 25;\narmrest_height = 35;\nbackrest_height = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule chair_base() {\n    // Main seat platform\n    difference() {\n        cube([chair_width, chair_depth, seat_height], center=true);\n        translate([0, 0, wall])\n            cube([chair_width-wall*2, chair_depth-wall*2, seat_height], center=true);\n    }\n    \n    // Front legs\n    for(x = [-chair_width/2+5, chair_width/2-5]) {\n        translate([x, chair_depth/2-3, 0])\n            cylinder(h=seat_height-wall, r=3, center=false);\n    }\n    \n    // Back legs\n    for(x = [-chair_width/2+5, chair_width/2-5]) {\n        translate([x, -chair_depth/2+3, 0])\n            cylinder(h=seat_height-wall, r=3, center=false);\n    }\n}\n\nmodule backrest() {\n    // Main backrest frame\n    difference() {\n        translate([0, -chair_depth/2+wall/2, seat_height+backrest_height/2])\n            cube([chair_width-wall*4, wall, backrest_height], center=true);\n        // Backrest cutouts for style\n        for(i = [-1:1]) {\n            translate([i*15, -chair_depth/2+wall/2, seat_height+backrest_height/2])\n                cube([8, wall+1, backrest_height-10], center=true);\n        }\n    }\n    \n    // Backrest posts\n    for(x = [-chair_width/2+5, chair_width/2-5]) {\n        translate([x, -chair_depth/2+3, seat_height-wall/2])\n            cylinder(h=backrest_height+wall, r=3, center=false);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2, 0, seat_height+armrest_height/2-seat_height/2])\n    union() {\n        // Vertical support\n        difference() {\n            cube([wall*3, chair_depth/3, armrest_height-seat_height/2], center=true);\n            translate([0, 0, wall])\n                cube([wall, chair_depth/3-wall, armrest_height-seat_height/2-wall*2], center=true);\n        }\n        \n        // Horizontal armrest\n        translate([0, chair_depth/6, armrest_height/2-seat_height/4])\n            cube([wall*8, wall*3, wall*3], center=true);\n    }\n    \n    // Right armrest (mirrored)\n    mirror([1,0,0])\n    translate([-chair_width/2, 0, seat_height+armrest_height/2-seat_height/2])\n    union() {\n        difference() {\n            cube([wall*3, chair_depth/3, armrest_height-seat_height/2], center=true);\n            translate([0, 0, wall])\n                cube([wall, chair_depth/3-wall, armrest_height-seat_height/2-wall*2], center=true);\n        }\n        \n        translate([0, chair_depth/6, armrest_height/2-seat_height/4])\n            cube([wall*8, wall*3, wall*3], center=true);\n    }\n}\n\nmodule seat_cushion() {\n    // Cushion base\n    translate([0, 0, seat_height+wall/2])\n    difference() {\n        cube([chair_width-wall*4, chair_depth-wall*4, wall*2], center=true);\n        translate([0, 0, -wall/2])\n            cube([chair_width-wall*6, chair_depth-wall*6, wall*3], center=true);\n    }\n    \n    // Cushion top rounding\n    translate([0, 0, seat_height+wall*1.5])\n    scale([1, 1, 0.5])\n    sphere(d=chair_width-wall*4);\n}\n\nmodule back_cushion() {\n    // Back cushion\n    translate([0, -chair_depth/2+wall*3, seat_height+backrest_height/2])\n    difference() {\n        cube([chair_width-wall*6, wall*4, backrest_height-wall*2], center=true);\n        translate([0, 0, -wall])\n            cube([chair_width-wall*8, wall*4+1, backrest_height-wall*4], center=true);\n    }\n    \n    // Cushion rounding\n    translate([0, -chair_depth/2+wall*3, seat_height+backrest_height/2])\n    scale([1, 0.3, 1])\n    sphere(d=backrest_height-wall*2);\n}\n\n// Assemble the chair\nunion() {\n    chair_base();\n    backrest();\n    armrests();\n    seat_cushion();\n    back_cushion();\n}",
    "renders": true
  },
  {
    "household_item": "rocker",
    "openscad_code": "// Realistic-style 3D-printable rocking chair\n// Overall size: ~80 mm tall, 60 mm deep, 60 mm wide\n// All walls >= 1.5 mm for FDM printing\n\n// Parameters\n$fn = 30;\nchair_width = 60;\nseat_depth = 50;\nseat_thickness = 3;\nback_height = 40;\nleg_thickness = 4;\nrocker_radius = 80;\nrocker_thickness = 4;\nrocker_width = 6;\n\n// --- Seat panel ---\nmodule seat() {\n    difference() {\n        // Main seat\n        translate([0, 0, seat_thickness/2])\n            cube([chair_width, seat_depth, seat_thickness], center=true);\n\n        // Lightening holes (saves material & print time)\n        for (x = [-20, 0, 20])\n            for (y = [-15, 0, 15])\n                translate([x, y, seat_thickness/2])\n                    cylinder(h=seat_thickness+1, r=4, center=true);\n    }\n}\n\n// --- Backrest ---\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2+2, back_height/2+seat_thickness])\n            cube([chair_width-6, 4, back_height], center=true);\n\n        // Horizontal slats\n        for (h = [15:10:back_height-10])\n            translate([0, -seat_depth/2, seat_thickness+h])\n                cube([chair_width-10, 8, 2], center=true);\n    }\n}\n\n// --- Leg ---\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n        rotate([0, angle, 0])\n            cube([leg_thickness, leg_thickness, seat_thickness+rocker_radius*0.6], center=true);\n}\n\n// --- Rockers ---\nmodule rocker(side) {\n    translate([0, side*(seat_depth/2 - rocker_width/2), rocker_radius])\n    rotate([90, 0, 0])\n    difference() {\n        // Outer rocker arc\n        rotate_extrude(angle=45, $fn=60)\n            translate([rocker_radius, 0, 0])\n                square([rocker_thickness, rocker_width], center=true);\n\n        // Inner hollow to save material\n        rotate_extrude(angle=45, $fn=60)\n            translate([rocker_radius+rocker_thickness-2, 0, 0])\n                square([rocker_thickness-2, rocker_width-2], center=true);\n    }\n}\n\n// --- Assembly ---\nunion() {\n    // Seat\n    seat();\n\n    // Backrest\n    backrest();\n\n    // Legs (angled for stability)\n    leg( chair_width/2-3,  seat_depth/2-3, 15);\n    leg(-chair_width/2+3,  seat_depth/2-3, 15);\n    leg( chair_width/2-3, -seat_depth/2+3, -15);\n    leg(-chair_width/2+3, -seat_depth/2+3, -15);\n\n    // Rockers\n    rocker(1);\n    rocker(-1);\n}",
    "renders": true
  },
  {
    "household_item": "recliner",
    "openscad_code": "// Realistic 3D-printable recliner, medium complexity\n// Dimensions fit within 100 mm print volume\n// All overhangs ≤ 45°, wall thickness ≥ 2 mm\n\n$fn = 24;\n\n// Overall dimensions\nrecliner_length = 90;   // back to footrest\nrecliner_width  = 50;\nrecliner_height = 65;\n\n// Wall thickness for 3D printing\nwall = 2.5;\n\nmodule frame_base() {\n    // Seat frame rails\n    color(\"DimGray\")\n    difference() {\n        // Left rail\n        translate([-recliner_width/2 + wall, 0, 0])\n            cube([wall, recliner_length*0.5, recliner_height*0.4]);\n        // Hollow out\n        translate([-recliner_width/2 + wall*2, 2, 2])\n            cube([wall-1, recliner_length*0.5-4, recliner_height*0.4-4]);\n        \n        // Right rail\n        translate([recliner_width/2 - wall*2, 0, 0])\n            cube([wall, recliner_length*0.5, recliner_height*0.4]);\n        // Hollow out\n        translate([recliner_width/2 - wall*2 + 1, 2, 2])\n            cube([wall-1, recliner_length*0.5-4, recliner_height*0.4-4]);\n    }\n}\n\nmodule seat_cushion() {\n    // Seat pad\n    color(\"SaddleBrown\")\n    difference() {\n        translate([0, recliner_length*0.15, recliner_height*0.35])\n            cube([recliner_width - 2*wall, recliner_length*0.3, 8], center=true);\n        // Cushion contour\n        translate([0, recliner_length*0.15, recliner_height*0.35+4])\n            cube([recliner_width - 2*wall - 4, recliner_length*0.3 - 4, 8], center=true);\n    }\n}\n\nmodule backrest() {\n    // Backrest frame\n    color(\"DimGray\")\n    union() {\n        // Left post\n        translate([-recliner_width/2 + wall*2, -recliner_length*0.25, recliner_height*0.35])\n            rotate([20,0,0])\n            cube([wall, 25, recliner_height*0.5]);\n        // Right post\n        translate([recliner_width/2 - wall*3, -recliner_length*0.25, recliner_height*0.35])\n            rotate([20,0,0])\n            cube([wall, 25, recliner_height*0.5]);\n    }\n    \n    // Backrest cushion\n    color(\"SaddleBrown\")\n    difference() {\n        translate([0, -recliner_length*0.25, recliner_height*0.65])\n            rotate([20,0,0])\n            cube([recliner_width - 2*wall, 25, 10], center=true);\n        // Contour\n        translate([0, -recliner_length*0.25, recliner_height*0.65+5])\n            rotate([20,0,0])\n            cube([recliner_width - 2*wall - 4, 21, 8], center=true);\n    }\n}\n\nmodule footrest() {\n    // Footrest frame\n    color(\"DimGray\")\n    union() {\n        // Left support\n        translate([-recliner_width/2 + wall*3, recliner_length*0.35, recliner_height*0.05])\n            rotate([30,0,0])\n            cube([wall, 15, 15]);\n        // Right support\n        translate([recliner_width/2 - wall*4, recliner_length*0.35, recliner_height*0.05])\n            rotate([30,0,0])\n            cube([wall, 15, 15]);\n    }\n    \n    // Footrest pad\n    color(\"SaddleBrown\")\n    translate([0, recliner_length*0.45, recliner_height*0.05])\n        rotate([30,0,0])\n        cube([recliner_width - 2*wall - 4, 15, 5], center=true);\n}\n\nmodule armrest(side) {\n    // Armrest frame\n    color(\"DimGray\")\n    translate([side * (recliner_width/2 - wall), recliner_length*0.05, recliner_height*0.45])\n        cube([wall*1.5, recliner_length*0.25, 10]);\n    \n    // Armrest pad\n    color(\"SaddleBrown\")\n    translate([side * (recliner_width/2 - wall*0.75), recliner_length*0.05 + 2, recliner_height*0.45 + 10])\n        cube([wall*1.5, recliner_length*0.25 - 4, 3], center=true);\n}\n\nmodule legs() {\n    // Four legs, 45° chamfers for printability\n    for(x=[-1,1], y=[-1,1]) {\n        color(\"DimGray\")\n        translate([x*(recliner_width/2 - wall - 5), y*(recliner_length*0.25 - 5), 0])\n            cylinder(h=15, r1=3, r2=2, $fn=8);\n    }\n}\n\n// Assemble recliner\nunion() {\n    frame_base();\n    seat_cushion();\n    backrest();\n    footrest();\n    armrest(-1);  // Left\n    armrest(1);   // Right\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "chaise",
    "openscad_code": "// Realistic OpenSCAD chaise (medium complexity)\n// Approx. 80 mm long, 3 mm wall thickness, printable without supports\n\n$fn = 32;               // Smooth curves\nwall = 3;               // 3 mm printable walls\n\n// Main seat frame\nmodule seat_frame() {\n    // Base platform\n    difference() {\n        translate([0, 0, -wall/2])\n            cube([70, 30, wall], center=true);\n        translate([0, 0, -wall])\n            cube([66, 26, wall*2], center=true);\n    }\n    \n    // Backrest slope\n    rotate([10, 0, 0])\n    translate([0, 0, 15])\n    difference() {\n        cube([70, 30, 30], center=true);\n        translate([0, 0, 15])\n            cube([66, 26, 30], center=true);\n    }\n}\n\n// Cushion profile\nmodule cushion(width, depth, height, fillet=2) {\n    difference() {\n        // Main cushion\n        translate([0, 0, height/2])\n            cube([width, depth, height], center=true);\n        \n        // Rounded edges via subtraction\n        for(dx = [-width/2+fillet, width/2-fillet])\n        for(dy = [-depth/2+fillet, depth/2-fillet])\n            translate([dx, dy, -fillet])\n                cylinder(h=height+fillet*2, r=fillet, center=true);\n    }\n}\n\n// Single cylindrical leg\nmodule leg(h) {\n    difference() {\n        cylinder(h=h, r=4);\n        translate([0, 0, -1])\n            cylinder(h=h+2, r=2.5);\n    }\n}\n\n// Four-leg support assembly\nmodule legs() {\n    positions = [[-30, -12], [30, -12], [-30, 12], [30, 12]];\n    for(p = positions) {\n        translate([p[0], p[1], -15])\n            leg(15);\n    }\n}\n\n// Decorative piping along cushion edges\nmodule piping(length, offset, z) {\n    translate([offset, 0, z])\n    rotate([0, 90, 0])\n    for(i = [0:2:length-2])\n        translate([i-length/2, 0, 0])\n            sphere(d=1.5);\n}\n\n// Assembly\nunion() {\n    // Frame\n    seat_frame();\n    \n    // Seat cushion\n    translate([0, 0, 3])\n        cushion(64, 26, 6);\n    \n    // Back cushion\n    rotate([10, 0, 0])\n    translate([0, 0, 18])\n        cushion(64, 26, 8);\n    \n    // Piping on seat\n    piping(64, -13, 6);\n    piping(64,  13, 6);\n    piping(26, -32, 6);\n    piping(26,  32, 6);\n    \n    // Piping on back\n    piping(64, -13, 18);\n    piping(64,  13, 18);\n    piping(26, -32, 18);\n    piping(26,  32, 18);\n    \n    // Support legs\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "loveseat",
    "openscad_code": "// Loveseat - Realistic style, medium complexity\n// Designed for 3D printing, scaled to ~80mm width\n\n$fn = 32;\n\n// Overall dimensions\nseat_width = 80;\nseat_depth = 40;\nseat_height = 15;\nback_height = 35;\narm_width = 8;\narm_height = 25;\nleg_height = 12;\nleg_size = 3;\n\nmodule loveseat() {\n    // Seat cushion\n    translate([0, 0, leg_height + seat_height/2])\n        cube([seat_width, seat_depth, seat_height], center=true);\n    \n    // Back cushion\n    translate([0, -seat_depth/2 + 2, leg_height + seat_height + back_height/2 - 3])\n        cube([seat_width - 4, seat_depth/3, back_height], center=true);\n    \n    // Left armrest\n    translate([-seat_width/2 - arm_width/2, 0, leg_height + arm_height/2])\n        cube([arm_width, seat_depth + 4, arm_height], center=true);\n    \n    // Right armrest\n    translate([seat_width/2 + arm_width/2, 0, leg_height + arm_height/2])\n        cube([arm_width, seat_depth + 4, arm_height], center=true);\n    \n    // Back support panel\n    translate([0, -seat_depth/2 + arm_width/2, leg_height + seat_height + back_height/2 - 8])\n        cube([seat_width, arm_width, back_height - 5], center=true);\n    \n    // Legs\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (seat_width/2 - leg_size), y * (seat_depth/2 - leg_size), leg_height/2])\n            cylinder(h=leg_height, r=leg_size/2, center=true);\n    }\n    \n    // Decorative horizontal bars on back\n    for(i = [-2:1:2]) {\n        translate([i * 12, -seat_depth/2 + arm_width/2 + 2, leg_height + seat_height + back_height/2 - 15])\n            cube([seat_width/6, arm_width - 1, 3], center=true);\n    }\n    \n    // Armrest top cushions\n    translate([-seat_width/2 - arm_width/2, 0, leg_height + arm_height - 2])\n        cube([arm_width, seat_depth + 4, 4], center=true);\n    \n    translate([seat_width/2 + arm_width/2, 0, leg_height + arm_height - 2])\n        cube([arm_width, seat_depth + 4, 4], center=true);\n    \n    // Seat cushion details - vertical grooves\n    for(i = [-3:1:3]) {\n        translate([i * 10, 0, leg_height + seat_height + 0.5])\n            cube([2, seat_depth - 4, seat_height - 1], center=true);\n    }\n}\n\nloveseat();",
    "renders": true
  },
  {
    "household_item": "sectional",
    "openscad_code": "// Realistic 3D printable sectional sofa\n// Overall footprint ~70 x 45 mm, seat height ~15 mm\n\n// Overall dimensions\nsofa_len = 70;   // total length\nsofa_wid = 45;   // total depth\nsofa_hgt = 25;   // total height\n\nmodule roundedCube(size, r, center=false) {\n    // Build a box with rounded edges (no overhangs)\n    translate([r, r, 0]) cube([size.x - 2*r, size.y - 2*r, size.z]);\n    translate([r, 0, r]) cube([size.x - 2*r, size.y, size.z - 2*r]);\n    translate([0, r, r]) cube([size.x, size.y - 2*r, size.z - 2*r]);\n    for(dx = [r, size.x - r], dy = [r, size.y - r]) {\n        translate([dx, dy, 0]) cylinder(r=r, h=size.z);\n    }\n    for(dx = [r, size.x - r], dz = [r, size.z - r]) {\n        translate([dx, 0, dz]) rotate([0,90,0]) cylinder(r=r, h=size.y);\n    }\n    for(dy = [r, size.y - r], dz = [r, size.z - r]) {\n        translate([0, dy, dz]) rotate([-90,0,0]) cylinder(r=r, h=size.x);\n    }\n    sphere(r=r);\n    translate([size.x,0,0]) sphere(r=r);\n    translate([0,size.y,0]) sphere(r=r);\n    translate([size.x,size.y,0]) sphere(r=r);\n    translate([0,0,size.z]) sphere(r=r);\n    translate([size.x,0,size.z]) sphere(r=r);\n    translate([0,size.y,size.z]) sphere(r=r);\n    translate([size.x,size.y,size.z]) sphere(r=r);\n}\n\nmodule cushion(w, d, h) {\n    // Slightly rounded top cushion\n    difference() {\n        roundedCube([w, d, h], 1.5);\n        translate([1.5, 1.5, h - 0.5]) cube([w - 3, d - 3, 1]);\n    }\n}\n\nmodule armrest(w, d, h) {\n    // Armrest with rounded top\n    translate([0, 0, sofa_hgt - h]) roundedCube([w, d, h], 2);\n}\n\nmodule backrest(w, h) {\n    // Slightly inclined backrest\n    translate([0, 0, 8]) rotate([8, 0, 0]) roundedCube([w, 6, h], 2);\n}\n\nmodule leg(x, y) {\n    // Simple cylindrical leg\n    translate([x, y, 0]) cylinder(r=1.5, h=8);\n}\n\nmodule singleSeat(offset) {\n    union() {\n        // Base frame\n        translate([offset, 0, 0])\n            roundedCube([34, sofa_wid, 8], 2);\n\n        // Seat cushion\n        translate([offset + 2, 2, 8])\n            cushion(30, 41, 5);\n\n        // Backrest\n        translate([offset + 2, 2, 8])\n            backrest(30, 12);\n\n        // Armrests\n        translate([offset, 0, 8])\n            armrest(2, 45, 15);\n        translate([offset + 32, 0, 8])\n            armrest(2, 45, 15);\n\n        // Legs\n        for(x = [offset + 3, offset + 31], y = [3, 42])\n            leg(x, y);\n    }\n}\n\nmodule chaise() {\n    union() {\n        // Extended base\n        translate([0, 0, 0])\n            roundedCube([36, sofa_wid, 8], 2);\n\n        // Seat cushion\n        translate([2, 2, 8])\n            cushion(32, 41, 5);\n\n        // Backrest along the long edge\n        translate([2, 2, 8])\n            backrest(41, 12);\n\n        // Single armrest on left\n        translate([0, 0, 8])\n            armrest(2, 45, 15);\n\n        // Legs\n        for(x = [3, 33], y = [3, 42])\n            leg(x, y);\n    }\n}\n\n// Build the sectional: chaise on left + two-seat sofa on right\nunion() {\n    chaise();\n    singleSeat(36);\n}",
    "renders": true
  },
  {
    "household_item": "mattress",
    "openscad_code": "// Mattress model - medium complexity, realistic style\n// Dimensions adapted for 3D printing (~80mm long)\n\n$fn = 32;\n\n// Main parameters\nmattress_length = 80;\nmattress_width = 60;\nmattress_height = 12;\ncorner_radius = 5;\nwall_thickness = 1.2;\n\n// Pillow top parameters\npillow_top_thickness = 3;\npillow_top_inset = 2;\n\n// Quilted surface parameters\nquilt_depth = 1;\nquilt_spacing = 8;\nquilt_offset = 4;\n\n// Side handles\nhandle_width = 8;\nhandle_height = 4;\nhandle_depth = 2;\n\nmodule rounded_box(l, w, h, r) {\n    difference() {\n        cube([l, w, h], center = false);\n        // Round corners\n        translate([r, r, 0]) cube([l - 2*r, w - 2*r, h + 0.1]);\n        translate([r, r, 0]) sphere(r);\n        translate([l - r, r, 0]) sphere(r);\n        translate([r, w - r, 0]) sphere(r);\n        translate([l - r, w - r, 0]) sphere(r);\n        \n        mirror([1, 0, 0]) translate([r, r, 0]) sphere(r);\n        mirror([0, 1, 0]) translate([r, r, 0]) sphere(r);\n        mirror([1, 1, 0]) translate([r, r, 0]) sphere(r);\n    }\n}\n\nmodule pillow_top() {\n    difference() {\n        rounded_box(\n            mattress_length - 2*pillow_top_inset,\n            mattress_width - 2*pillow_top_inset,\n            pillow_top_thickness,\n            corner_radius - 2\n        );\n        \n        // Quilt pattern\n        for (x = [quilt_offset : quilt_spacing : mattress_length - 2*pillow_top_inset - quilt_offset]) {\n            for (y = [quilt_offset : quilt_spacing : mattress_width - 2*pillow_top_inset - quilt_offset]) {\n                translate([x, y, pillow_top_thickness - quilt_depth])\n                    cube([quilt_spacing/2, quilt_spacing/2, quilt_depth + 0.1], center = true);\n            }\n        }\n    }\n}\n\nmodule side_handle(position_x, position_y) {\n    // Handle hole\n    translate([position_x, position_y, mattress_height/2])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = handle_width, r = handle_height/2, center = true);\n            cylinder(h = handle_width + 1, r = handle_height/2 - wall_thickness, center = true);\n        }\n    \n    // Reinforcement around handle\n    translate([position_x, position_y, mattress_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = handle_width + 2, r = handle_height/2 + 1, center = true);\n}\n\nmodule mattress_body() {\n    difference() {\n        // Main mattress\n        rounded_box(mattress_length, mattress_width, mattress_height, corner_radius);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_box(\n                mattress_length - 2*wall_thickness,\n                mattress_width - 2*wall_thickness,\n                mattress_height - wall_thickness,\n                corner_radius - wall_thickness\n            );\n    }\n}\n\n// Build the mattress\nunion() {\n    // Main body\n    mattress_body();\n    \n    // Pillow top\n    translate([pillow_top_inset, pillow_top_inset, mattress_height])\n        pillow_top();\n    \n    // Side handles\n    side_handle(mattress_length/2, 0);\n    side_handle(mattress_length/2, mattress_width);\n    side_handle(0, mattress_width/2);\n    side_handle(mattress_length, mattress_width/2);\n}",
    "renders": true
  },
  {
    "household_item": "boxspring",
    "openscad_code": "// Boxspring - Realistic Medium Complexity\n// Overall dimensions: 80mm x 60mm x 45mm (printable size)\n\n$fn = 32;  // Smooth curves for realism\n\n// Main module\nmodule boxspring() {\n    // Base frame\n    base_frame();\n    \n    // Spring support grid\n    spring_grid();\n    \n    // Mattress support\n    mattress();\n    \n    // Optional legs\n    legs();\n}\n\n// Base wooden frame\nmodule base_frame() {\n    // Bottom frame\n    difference() {\n        // Outer frame\n        translate([0, 0, 5]) cube([80, 60, 8], center = true);\n        \n        // Hollow center\n        translate([0, 0, 9]) cube([72, 52, 8], center = true);\n    }\n    \n    // Side panels for height\n    for (x = [-38, 38]) {\n        translate([x, 0, 18]) cube([2, 60, 20], center = true);\n    }\n    for (y = [-28, 28]) {\n        translate([0, y, 18]) cube([76, 2, 20], center = true);\n    }\n}\n\n// Internal spring grid structure\nmodule spring_grid() {\n    // Spring rows\n    for (y = [-20:10:20]) {\n        spring_row(y);\n    }\n}\n\n// Single row of springs\nmodule spring_row(y_pos) {\n    for (x = [-30:12:30]) {\n        translate([x, y_pos, 18]) {\n            // Spring base\n            cylinder(h = 16, d1 = 8, d2 = 6);\n            \n            // Spring coils (simplified)\n            for (i = [1:2:14]) {\n                translate([0, 0, i]) cylinder(h = 1.5, d = 7);\n            }\n        }\n    }\n}\n\n// Mattress on top\nmodule mattress() {\n    color(\"beige\") {\n        // Bottom layer\n        translate([0, 0, 34]) cube([78, 58, 4], center = true);\n        \n        // Top layer (slightly smaller)\n        translate([0, 0, 39]) cube([76, 56, 6], center = true);\n        \n        // Quilted pattern\n        for (x = [-30:15:30]) {\n            for (y = [-22:11:22]) {\n                translate([x, y, 41.5]) {\n                    difference() {\n                        cylinder(h = 2, d = 8);\n                        cylinder(h = 3, d = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Support legs\nmodule legs() {\n    // Corner legs\n    leg([-35, -25]);\n    leg([35, -25]);\n    leg([-35, 25]);\n    leg([35, 25]);\n    \n    // Center support legs\n    leg([-35, 0]);\n    leg([35, 0]);\n}\n\n// Single leg\nmodule leg(pos) {\n    translate([pos[0], pos[1], 0]) {\n        cylinder(h = 5, d = 6);\n    }\n}\n\n// Render the boxspring\nboxspring();",
    "renders": true
  },
  {
    "household_item": "cradle",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Baby Cradle\n// Overall size ~80 mm long x 50 mm wide x 55 mm high\n\n$fn = 32;               // Smooth curves\nwall = 2;               // 3D-printable wall thickness\nlegR = 4;               // Radius of legs\nrockR = 40;             // Radius of rocking curve\nbaseH = 4;              // Thickness of cradle floor\n\nmodule cradle_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,wall]) cube([76,46,wall], center=true);\n            translate([0,0,45-wall]) cube([70,40,wall], center=true);\n        }\n        // Hollow inside\n        hull() {\n            translate([0,0,wall+wall]) cube([72,42,wall], center=true);\n            translate([0,0,45-wall-wall]) cube([66,36,wall], center=true);\n        }\n    }\n}\n\nmodule rocking_base() {\n    difference() {\n        // Rocking arc\n        translate([0,0,rockR])\n            rotate([90,0,0])\n                cylinder(h=50, r1=rockR, r2=rockR, center=true);\n\n        // Trim to cradle width\n        translate([0,0,rockR])\n            cube([200,50,rockR*2], center=true);\n\n        // Cut flat bottom for printing\n        translate([0,0,-1])\n            cube([200,200,2], center=true);\n    }\n}\n\nmodule spindle(posX) {\n    translate([posX,0,wall+baseH+wall/2])\n        cylinder(h=45-wall*2-baseH, r=wall/2, center=false);\n}\n\nmodule headboard(end) {\n    mirror([end,0,0]) {\n        // Solid board\n        translate([end*38,0,wall+baseH+22.5])\n            cube([wall,46,45], center=true);\n\n        // Decorative cutouts\n        for(i=[-1:1])\n            translate([end*38, i*12, wall+baseH+22.5])\n                cylinder(h=wall+0.1, r=4, center=true);\n    }\n}\n\nmodule mattress() {\n    color(\"LightBlue\")\n        translate([0,0,wall+baseH+0.5])\n            cube([68,38,3], center=true);\n}\n\n// Assembly\nunion() {\n    // Cradle shell\n    cradle_body();\n\n    // Floor\n    translate([0,0,wall+baseH/2])\n        cube([72,42,baseH], center=true);\n\n    // Rockers\n    translate([30,0,0]) rocking_base();\n    translate([-30,0,0]) rocking_base();\n\n    // Legs under rockers (print supports)\n    translate([30,20,0])\n        cylinder(h=rockR-legR, r=legR, center=false);\n    translate([30,-20,0])\n        cylinder(h=rockR-legR, r=legR, center=false);\n    translate([-30,20,0])\n        cylinder(h=rockR-legR, r=legR, center=false);\n    translate([-30,-20,0])\n        cylinder(h=rockR-legR, r=legR, center=false);\n\n    // Spindles along sides\n    for(x=[-30:10:30])\n        spindle(x);\n\n    // Headboards\n    headboard(1);\n    headboard(-1);\n\n    // Mattress\n    mattress();\n}",
    "renders": true
  },
  {
    "household_item": "cot",
    "openscad_code": "// Realistic style baby cot - medium complexity\n// External dimensions: 80 x 60 x 65 mm (L x W x H)\n\ncot_color = \"cornsilk\";\n\nmodule cot() {\n    // Cot frame base\n    color(cot_color)\n    union() {\n        // Bottom frame\n        translate([0, 0, 5])\n            cube([80, 60, 8], center=true);\n        \n        // Four corner posts\n        for(x = [-35, 35])\n            for(y = [-25, 25])\n                translate([x, y, 0])\n                    cylinder(h=65, d=6, center=false);\n        \n        // Top frame\n        translate([0, 0, 65])\n            cube([80, 60, 8], center=true);\n    }\n    \n    // Side railings\n    module side_rail(x_pos, rot) {\n        translate([x_pos, 0, 35])\n        rotate([0, rot, 0])\n        color(\"beige\")\n        difference() {\n            // Back panel\n            cube([2, 60, 50], center=true);\n            \n            // Vertical slats\n            for(i = [-20:8:20]) {\n                translate([0, i, 0])\n                    cube([4, 4, 46], center=true);\n            }\n        }\n    }\n    \n    // End railings\n    module end_rail(y_pos, rot) {\n        translate([0, y_pos, 35])\n        rotate([rot, 0, 0])\n        color(\"beige\")\n        difference() {\n            // End panel\n            cube([80, 2, 50], center=true);\n            \n            // Vertical slats\n            for(i = [-30:10:30]) {\n                translate([i, 0, 0])\n                    cube([6, 4, 46], center=true);\n            }\n        }\n    }\n    \n    // Add railings\n    side_rail(40, 0);\n    side_rail(-40, 0);\n    end_rail(30, 0);\n    end_rail(-30, 0);\n    \n    // Mattress\n    translate([0, 0, 14])\n    color(\"white\")\n    cube([74, 54, 8], center=true);\n    \n    // Pillow\n    translate([20, 0, 23])\n    color(\"lightblue\")\n    cube([22, 30, 4], center=true);\n    \n    // Blanket\n    translate([-5, 0, 27])\n    color(\"lightblue\")\n    cube([40, 50, 2], center=true);\n    \n    // Cot mobile arm\n    translate([0, 0, 69])\n    color(\"silver\")\n    union() {\n        cylinder(h=15, d=4, center=false);\n        rotate([90, 0, 0])\n            translate([0, 0, -25])\n            cylinder(h=50, d=3, center=false);\n        \n        // Mobile toys\n        translate([0, -25, 10])\n        color(\"red\")\n        sphere(d=5);\n        translate([0, -25, 5])\n        color(\"yellow\")\n        sphere(d=5);\n        translate([0, -25, 0])\n        color(\"green\")\n        sphere(d=5);\n    }\n}\n\ncot();",
    "renders": true
  },
  {
    "household_item": "hammock",
    "openscad_code": "// Realistic-style 3D-printable hammock – OpenSCAD\n// Overall footprint ≈ 70 mm × 30 mm × 30 mm\n$fn = 32;\n\n// Adjustable parameters\nrope_d    = 1.2;    // rope thickness\npost_r    = 2.5;    // wooden post radius\npost_h    = 25;     // post height\nfabric_w  = 50;     // cloth width\nfabric_l  = 30;     // cloth length (along curve)\nfabric_t  = 0.8;    // cloth thickness\nwrap_turns = 6;     // rope wraps around post\nhook_r    = 3;      // hook outer radius\nhook_gap  = 1.2;    // gap for printing without support\n\nmodule rope_segment(l, d=rope_d) {\n    rotate([90,0,0])\n        cylinder(h=l, d=d, $fn=8);\n}\n\nmodule wooden_post(h=post_h, r=post_r) {\n    cylinder(h=h, r=r, $fn=32);\n}\n\nmodule hammock_fabric(w=fabric_w, l=fabric_l, t=fabric_t) {\n    // create curved hammock cloth using hull of thin boxes\n    steps = 10;\n    for (i=[0:steps-1]) {\n        x = -w/2 + i*(w/(steps-1));\n        sag = 5*sin(180*(x+w/2)/w); // sag profile\n        translate([x, 0, sag])\n            cube([w/steps + 0.01, l, t], center=true);\n    }\n}\n\nmodule post_with_wrapping() {\n    difference() {\n        wooden_post();\n        // slight chamfer for printability\n        translate([0,0,-0.1])\n            cylinder(h=post_h+0.2, r1=post_r-0.5, r2=post_r, $fn=32);\n    }\n    // rope wraps around post\n    for (i=[0:wrap_turns-1]) {\n        rotate([0,0,i*360/wrap_turns])\n            translate([post_r+rope_d/2, 0, i*post_h/wrap_turns])\n                rope_segment(rope_d*1.5);\n    }\n}\n\nmodule hanging_hook() {\n    difference() {\n        // main ring\n        rotate_extrude(angle=360, $fn=64)\n            translate([hook_r, 0, 0])\n                circle(r=rope_d*1.1, $fn=16);\n        // gap for printing\n        rotate([0,0,180])\n            translate([hook_r, 0, 0])\n                cube([hook_gap*2, rope_d*2.5, rope_d*2.5], center=true);\n    }\n}\n\nmodule hammock_assembly() {\n    // left post\n    translate([-40, 0, 0]) {\n        post_with_wrapping();\n        translate([0, 0, post_h-3])\n            rotate([90,0,0])\n                hanging_hook();\n    }\n\n    // right post\n    translate([40, 0, 0]) {\n        mirror([1,0,0])\n            post_with_wrapping();\n        translate([0, 0, post_h-3])\n            rotate([90,0,0])\n                hanging_hook();\n    }\n\n    // fabric bed\n    translate([0, 0, 5])\n        hammock_fabric();\n\n    // left-side ropes from post top to fabric edge\n    translate([-40, 0, post_h])\n        rope_segment(20);\n    translate([-40, 0, post_h])\n        rotate([0, -20, 0])\n            rope_segment(20);\n\n    // right-side ropes\n    translate([40, 0, post_h])\n        rope_segment(20);\n    translate([40, 0, post_h])\n        rotate([0, 20, 0])\n            rope_segment(20);\n}\n\nhammock_assembly();",
    "renders": true
  },
  {
    "household_item": "ladder",
    "openscad_code": "// Realistic 3D-printable ladder\n// Overall height ~70 mm, width ~30 mm, depth ~20 mm\n\n$fn = 32;  // Smooth curves for printability\n\n// ===== PARAMETERS =====\nladder_height = 70;\nladder_width = 28;\nladder_depth = 18;\nrail_thick = 2.2;\nrung_thick = 2.0;\nrung_spacing = 10;\nrung_count = floor(ladder_height / rung_spacing) - 1;\nfoot_radius = 3.5;\nfoot_height = 2.0;\n\n// ===== RAIL PROFILE (rounded rectangle) =====\nmodule rail_profile(w, d, r) {\n    hull() {\n        translate([ r,  r, 0]) circle(r = r);\n        translate([w-r,  r, 0]) circle(r = r);\n        translate([w-r, d-r, 0]) circle(r = r);\n        translate([ r, d-r, 0]) circle(r = r);\n    }\n}\n\n// ===== SINGLE RAIL =====\nmodule rail(length) {\n    linear_extrude(height = length, center = false)\n        rail_profile(rail_thick, rail_thick, rail_thick/2);\n}\n\n// ===== RUNG =====\nmodule rung() {\n    // Centered at origin along Y\n    difference() {\n        // Main cylinder\n        rotate([90,0,0])\n            cylinder(h = ladder_width - 2*rail_thick, r = rung_thick/2, $fn = 20);\n\n        // Chamfers at ends\n        translate([0, (ladder_width - 2*rail_thick)/2, 0])\n            rotate([90,0,0])\n                cylinder(h = rung_thick, r1 = rung_thick/2, r2 = 0, $fn = 20);\n        translate([0, -(ladder_width - 2*rail_thick)/2, 0])\n            rotate([90,0,0])\n                cylinder(h = rung_thick, r1 = rung_thick/2, r2 = 0, $fn = 20);\n    }\n}\n\n// ===== FOOT =====\nmodule foot() {\n    difference() {\n        cylinder(h = foot_height, r = foot_radius, center = false, $fn = 32);\n        translate([0,0,-0.01])\n            cylinder(h = foot_height + 0.02, r = foot_radius - 1, center = false, $fn = 32);\n    }\n}\n\n// ===== ASSEMBLY =====\nunion() {\n    // Left rail\n    translate([0, 0, 0])\n        rail(ladder_height);\n\n    // Right rail\n    translate([ladder_width - rail_thick, 0, 0])\n        rail(ladder_height);\n\n    // Rungs\n    for (i = [1 : rung_count]) {\n        translate([(ladder_width - rail_thick)/2, 0, i * rung_spacing])\n            rung();\n    }\n\n    // Feet\n    translate([rail_thick/2, ladder_depth/2 - rail_thick/2, -foot_height])\n        foot();\n    translate([ladder_width - rail_thick/2, ladder_depth/2 - rail_thick/2, -foot_height])\n        foot();\n    translate([rail_thick/2, rail_thick/2, -foot_height])\n        foot();\n    translate([ladder_width - rail_thick/2, rail_thick/2, -foot_height])\n        foot();\n}",
    "renders": true
  },
  {
    "household_item": "rack",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity 3D-printable rack\n// Overall dimensions: 80 mm wide × 40 mm deep × 60 mm tall\n\n// ------------------------ PARAMETERS ------------------------\nrack_w = 80;\nrack_d = 40;\nrack_h = 60;\nwall_t = 2.5;\npillar_r = 3;\npillar_h = rack_h - 2*wall_t;\nshelf_t = 2;\ngap = 10;\nshelves = 5;\npin_r = 1.5;\npin_h = 4;\npin_clear = 0.4;\n// ------------------------------------------------------------\n\nmodule rack_body() {\n    difference() {\n        // main box\n        translate([0,0,rack_h/2])\n            cube([rack_w, rack_d, rack_h], center=true);\n        \n        // hollow out interior\n        translate([0,0,rack_h/2])\n            cube([rack_w-2*wall_t, rack_d-2*wall_t, rack_h-wall_t], center=true);\n        \n        // remove bottom for open front\n        translate([0,-rack_d/2+wall_t/2,-0.1])\n            cube([rack_w-2*wall_t, wall_t, rack_h+0.2], center=true);\n    }\n}\n\nmodule corner_pillars() {\n    for(x=[-1,1])\n    for(y=[-1,1])\n    translate([x*(rack_w/2-pillar_r), y*(rack_d/2-pillar_r), pillar_h/2+wall_t])\n        cylinder(h=pillar_h, r=pillar_r, $fn=16);\n}\n\nmodule shelves() {\n    for(i=[0:shelves-1]) {\n        z_pos = wall_t + gap + i*(gap+shelf_t);\n        translate([0,0,z_pos])\n            cube([rack_w-2*wall_t-2*pillar_r, rack_d-2*wall_t-2*pillar_r, shelf_t], center=true);\n    }\n}\n\nmodule back_pegboard() {\n    difference() {\n        // back plate\n        translate([0,0,rack_h/2])\n            cube([rack_w, wall_t, rack_h], center=true);\n        \n        // peg holes\n        for(x=[-rack_w/2+wall_t*2:gap:rack_w/2-wall_t*2])\n        for(z=[wall_t*2:gap:rack_h-wall_t*2])\n            translate([x, -wall_t/2, z])\n                rotate([90,0,0])\n                    cylinder(h=wall_t+1, r=pin_r+pin_clear, $fn=12);\n    }\n}\n\nmodule support_pins() {\n    // small removable pins that can be inserted into pegboard\n    for(i=[0:7])\n        translate([i*gap - rack_w/2 + wall_t*2, -rack_d/2 - pin_h - 1, wall_t*2 + i*gap])\n            rotate([0,90,0])\n                cylinder(h=pin_h, r=pin_r, $fn=8);\n}\n\n// ------------------------ ASSEMBLY --------------------------\nunion() {\n    rack_body();\n    corner_pillars();\n    shelves();\n    back_pegboard();\n    support_pins();\n}",
    "renders": true
  },
  {
    "household_item": "stand",
    "openscad_code": "// Realistic Phone Stand - Medium Complexity\n// Dimensions optimized for 3D printing\n\n$fn = 64;\n\n// Main parameters\nbase_width = 60;\nbase_depth = 40;\nbase_height = 8;\nback_height = 45;\nback_thickness = 4;\nphone_slot_width = 12;\nphone_slot_depth = 8;\nphone_support_angle = 15;\nwall_thickness = 2;\n\nmodule phone_stand() {\n    // Base plate with rounded corners\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            rounded_cube([base_width, base_depth, base_height], 5);\n        \n        // Cable channel\n        translate([0, -base_depth/2 + 3, base_height/2])\n            cube([10, 6, base_height + 1], center=true);\n    }\n    \n    // Back support\n    translate([0, -base_depth/2 + back_thickness/2, base_height + back_height/2])\n        cube([base_width - 10, back_thickness, back_height], center=true);\n    \n    // Angled phone support\n    translate([0, -base_depth/2 + 15, base_height]) {\n        rotate([0, phone_support_angle, 0]) {\n            difference() {\n                // Main support block\n                cube([base_width - 10, 20, 8]);\n                \n                // Phone slot\n                translate([0, 10, 4]) {\n                    cube([phone_slot_width, phone_slot_depth, 8], center=true);\n                }\n                \n                // Charging port cutout\n                translate([0, 10, 0])\n                    cube([8, 6, 4], center=true);\n            }\n        }\n    }\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([side * (base_width/2 - 5), 0, 0]) {\n            difference() {\n                // Side brace\n                rotate([0, -phone_support_angle, 0]) {\n                    translate([0, -base_depth/2 + 5, base_height + 2])\n                        cube([3, 15, 15]);\n                }\n                \n                // Lightening hole\n                translate([0, -base_depth/2 + 7, base_height + 7])\n                    rotate([0, -phone_support_angle, 0])\n                        cylinder(h = 5, r = 2);\n            }\n        }\n    }\n    \n    // Front lip to prevent sliding\n    translate([0, base_depth/2 - 3, base_height/2])\n        rounded_cube([base_width - 10, 6, 3], 2);\n    \n    // Rubber feet holes (for adding rubber pads)\n    for(x = [-20, 20])\n        for(y = [-12, 12])\n            translate([x, y, 0])\n                cylinder(h = base_height + 1, r = 2);\n}\n\n// Helper module for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                for(z = [-1, 1])\n                    translate([x * (size[0]/2 - radius), \n                              y * (size[1]/2 - radius), \n                              z * (size[2]/2 - radius)])\n                        sphere(r = radius);\n    }\n}\n\n// Render the stand\nphone_stand();",
    "renders": true
  },
  {
    "household_item": "cart",
    "openscad_code": "// Realistic OpenSCAD cart – medium complexity\n// 3D-printable, no overhangs, 60 mm long, 30 mm wide, 30 mm high\n\n// Parameters\nwheel_d = 12;\nwheel_w = 5;\naxle_d = 3;\nbody_l = 40;\nbody_w = 25;\nbody_h = 15;\nwall_t = 2;\nhandle_l = 35;\nhandle_r = 3;\nhandle_a = 45;\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        cylinder(d=wheel_d, h=wheel_w, $fn=32);      // tire\n        translate([0, 0, -1])\n            cylinder(d=axle_d, h=wheel_w+2, $fn=16); // axle hole\n    }\n}\n\n// Axle + wheels module\nmodule axle_assembly() {\n    translate([-body_l/2-5, 0, 4]) {\n        rotate([0,90,0]) cylinder(d=axle_d, h=body_w+wheel_w*2+2, $fn=16); // axle\n        translate([0, body_w/2+wheel_w/2, 0]) wheel();\n        translate([0, -body_w/2-wheel_w/2, 0]) wheel();\n    }\n}\n\n// Cart body\nmodule cart_body() {\n    difference() {\n        // main box\n        cube([body_l, body_w, body_h]);\n        // inside cavity\n        translate([wall_t, wall_t, wall_t])\n            cube([body_l-wall_t*2, body_w-wall_t*2, body_h-wall_t*1.5]);\n    }\n}\n\n// Handle module\nmodule handle() {\n    rotate([0, handle_a, 0])\n        translate([-handle_l/2, 0, 0])\n            difference() {\n                cylinder(d=handle_r*2, h=handle_l, $fn=16); // grip\n                translate([0, 0, -1])\n                    cylinder(d=handle_r*2-wall_t, h=handle_l+2, $fn=16); // grip hole\n            }\n}\n\n// Frame connecting handle to body\nmodule handle_frame() {\n    translate([body_l/2, 0, body_h/2]) {\n        rotate([0, -handle_a, 0])\n            translate([handle_l/2, 0, 0])\n                cylinder(d=handle_r*1.5, h=handle_l, $fn=16); // shaft\n    }\n}\n\n// Main assembly\nunion() {\n    cart_body();\n    handle_frame();\n    translate([body_l/2+handle_l-5, 0, body_h/2]) \n        rotate([0, -handle_a, 0]) handle();\n    axle_assembly();\n    mirror([1,0,0]) axle_assembly(); // rear axle\n}",
    "renders": true
  },
  {
    "household_item": "island",
    "openscad_code": "// Realistic 3D-printable island – medium complexity\n// Total footprint ≈ 80 mm × 70 mm, max height ≈ 30 mm\n// All slopes ≤ 45° and walls ≥ 2 mm for easy printing\n\n$fn = 36;      // Smooth curves without excessive facets\n\nmodule island_base() {\n    // Main island body – low-profile elliptical mound\n    scale([1.2, 1, 1])\n    cylinder(h = 18, d1 = 70, d2 = 60, center = false);\n}\n\nmodule volcano() {\n    // Central volcano cone with gentle 35° slope\n    translate([0, 0, 18])\n    cylinder(h = 12, d1 = 22, d2 = 6, center = false);\n\n    // Crater hollow (safe overhang-free)\n    translate([0, 0, 18 + 2])\n    cylinder(h = 10, d1 = 8, d2 = 8, center = false);\n}\n\nmodule palm_trunk() {\n    // Simple tapered trunk for palms\n    cylinder(h = 14, d1 = 3, d2 = 2, center = false);\n}\n\nmodule palm_leaves() {\n    // 6 fan-shaped leaves, each 25° apart\n    for (a = [0 : 60 : 300]) {\n        rotate([0, 0, a])\n        translate([0, 6, 0])\n        rotate([90, 0, 0])\n        scale([1, 0.2, 0.1])\n        cylinder(h = 12, d1 = 2, d2 = 10, center = false);\n    }\n}\n\nmodule palm_tree(x, y) {\n    translate([x, y, 18 + 2])\n    union() {\n        palm_trunk();\n        translate([0, 0, 14])\n        palm_leaves();\n    }\n}\n\nmodule rock_cluster(x, y) {\n    // Cluster of 3 rounded rocks\n    translate([x, y, 18])\n    union() {\n        translate([0, 0, 0])\n        sphere(d = 5);\n        translate([3, 2, 1])\n        sphere(d = 4);\n        translate([-2, 3, 0.5])\n        sphere(d = 3.5);\n    }\n}\n\nmodule shoreline_rocks() {\n    // Evenly spaced rocks around the shoreline\n    for (a = [0 : 40 : 320]) {\n        r = 35;\n        x = r * cos(a);\n        y = r * sin(a);\n        rock_cluster(x, y);\n    }\n}\n\n// Assembly\nunion() {\n    island_base();\n    volcano();\n\n    // Two palm trees on opposite sides\n    palm_tree(20, -10);\n    palm_tree(-25, 15);\n\n    shoreline_rocks();\n}",
    "renders": true
  },
  {
    "household_item": "pantry",
    "openscad_code": "// Realistic Medium-Complexity Pantry (≈70 mm wide)\n// All dimensions in mm, printable without support\n\n// Overall pantry shell\nmodule pantry_body() {\n    difference() {\n        // Main box\n        cube([70, 40, 90]);\n        // Hollow out inside\n        translate([2.5, 2.5, 2.5])\n            cube([65, 35, 85]);\n    }\n}\n\n// Shelf module\nmodule shelf(h) {\n    translate([0, 0, h])\n        cube([70, 40, 2]);\n}\n\n// Door frame\nmodule door_frame() {\n    difference() {\n        // Outer frame\n        translate([69.9, 0, 0])\n            cube([2, 40, 90]);\n        // Inner cutout for glass\n        translate([71, 2, 2])\n            cube([1.8, 36, 86]);\n    }\n}\n\n// Door handle\nmodule handle() {\n    translate([72, 18, 45])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=4, $fn=20);\n}\n\n// Knob for each shelf\nmodule knob(x, y, z) {\n    translate([x, y, z])\n        sphere(d=3, $fn=16);\n}\n\n// Canned food\nmodule can(r, h) {\n    cylinder(h=h, r=r, $fn=32);\n}\n\n// Box of pasta\nmodule pasta_box() {\n    cube([15, 8, 20]);\n}\n\n// Render the pantry\nunion() {\n    // Main body\n    pantry_body();\n    \n    // Three shelves\n    shelf(25);\n    shelf(50);\n    shelf(75);\n    \n    // Door with frame\n    door_frame();\n    \n    // Door handle\n    handle();\n    \n    // Knobs on right side\n    for(z=[30, 55, 80]) {\n        knob(68, 5, z);\n    }\n    \n    // Place cans on bottom shelf\n    for(i=[0:2]) {\n        translate([10 + i*20, 10, 5])\n            color(\"silver\")\n            can(r=5, h=18);\n    }\n    \n    // Pasta box on middle shelf\n    translate([10, 10, 52])\n        color(\"gold\")\n        pasta_box();\n    \n    // Additional can on top shelf\n    translate([45, 10, 77])\n        color(\"silver\")\n        can(r=4, h=12);\n}",
    "renders": true
  },
  {
    "household_item": "bin",
    "openscad_code": "// Realistic medium-complexity 3D-printable bin\n// Overall size: 80 x 60 x 100 mm (L x W x H)\n\n$fn = 32;               // Smooth curves\nwall = 2;               // Uniform wall thickness for 3D printing\nbody_l = 80;\nbody_w = 60;\nbody_h = 90;\nrim_h  = 8;\n\n// Main body shell (hollow)\nmodule body_shell() {\n    difference() {\n        // Outer rounded cuboid\n        minkowski() {\n            cube([body_l, body_w, body_h], center = true);\n            sphere(4);\n        }\n        // Inner cavity\n        translate([0, 0, -rim_h/2])\n        minkowski() {\n            cube([body_l - 2*wall, body_w - 2*wall, body_h - wall], center = true);\n            sphere(4 - wall);\n        }\n    }\n}\n\n// Top rim with slight overhang for lid seating\nmodule top_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, body_h/2 + rim_h/2])\n        minkowski() {\n            cube([body_l + 1, body_w + 1, rim_h], center = true);\n            sphere(4);\n        }\n        // Inner chamfer\n        translate([0, 0, body_h/2 + rim_h/2 + 1])\n        minkowski() {\n            cube([body_l - 2*wall - 2, body_w - 2*wall - 2, rim_h + 2], center = true);\n            sphere(4);\n        }\n    }\n}\n\n// Handle loops on short sides\nmodule handles() {\n    for (x = [-body_l/2 - 2, body_l/2 + 2]) {\n        translate([x, 0, body_h/2])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 20, d1 = 12, d2 = 12);   // outer handle\n            cylinder(h = 21, d1 = 8, d2 = 8);     // inner hole\n        }\n    }\n}\n\n// Reinforcing ribs on long sides\nmodule ribs() {\n    for (y = [-body_w/2 + 10, body_w/2 - 10]) {\n        translate([0, y, body_h/2 - 20])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = body_l - 20, d1 = 6, d2 = 6);\n            cylinder(h = body_l - 18, d1 = 4, d2 = 4);\n        }\n    }\n}\n\n// Small drainage hole at bottom center\nmodule drainage() {\n    translate([0, 0, -body_h/2 + 1])\n    rotate([90, 0, 0])\n    cylinder(h = wall + 1, d = 4);\n}\n\n// Assemble all parts\nunion() {\n    body_shell();\n    top_rim();\n    handles();\n    ribs();\n    drainage();\n}",
    "renders": true
  },
  {
    "household_item": "trunk",
    "openscad_code": "// Realistic Trunk - OpenSCAD\n// Medium complexity with 3D-printable features\n\n$fn = 32;\n\n// Main parameters\ntrunk_width = 60;\ntrunk_height = 40;\ntrunk_depth = 35;\nwall_thickness = 2;\n\n// Wood plank dimensions\nplank_width = 8;\nplank_gap = 1;\n\n// Hardware dimensions\nhandle_diameter = 6;\nhandle_length = 40;\nhandle_clearance = 8;\nlock_size = 8;\nhinge_diameter = 3;\nhinge_length = 15;\n\nmodule wood_plank(x, y, z, length, width, height) {\n    translate([x, y, z])\n        cube([length, width, height], center = false);\n}\n\nmodule trunk_body() {\n    difference() {\n        // Main box\n        cube([trunk_width, trunk_depth, trunk_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n            cube([trunk_width - 2*wall_thickness, \n                  trunk_depth - 2*wall_thickness, \n                  trunk_height - wall_thickness], center = true);\n    }\n}\n\nmodule wood_texturing() {\n    // Front and back planks\n    for (i = [0:plank_width+plank_gap:trunk_width-plank_width]) {\n        // Front face\n        translate([-trunk_width/2 + i, -trunk_depth/2, -trunk_height/2])\n            wood_plank(0, 0, 0, plank_width, wall_thickness, trunk_height);\n        \n        // Back face\n        translate([-trunk_width/2 + i + plank_width/2, trunk_depth/2 - wall_thickness, -trunk_height/2])\n            wood_plank(0, 0, 0, plank_width, wall_thickness, trunk_height);\n    }\n    \n    // Side planks\n    for (i = [0:plank_width+plank_gap:trunk_depth-plank_width]) {\n        // Left side\n        translate([-trunk_width/2, -trunk_depth/2 + i, -trunk_height/2])\n            wood_plank(0, 0, 0, wall_thickness, plank_width, trunk_height);\n        \n        // Right side\n        translate([trunk_width/2 - wall_thickness, -trunk_depth/2 + i, -trunk_height/2])\n            wood_plank(0, 0, 0, wall_thickness, plank_width, trunk_height);\n    }\n}\n\nmodule metal_reinforcements() {\n    // Bottom metal band\n    translate([0, 0, -trunk_height/2 + wall_thickness/2])\n        cube([trunk_width + 2*wall_thickness, \n              trunk_depth + 2*wall_thickness, \n              wall_thickness], center = true);\n    \n    // Top metal band\n    translate([0, 0, trunk_height/2 - wall_thickness/2])\n        cube([trunk_width + 2*wall_thickness, \n              trunk_depth + 2*wall_thickness, \n              wall_thickness], center = true);\n    \n    // Corner reinforcements (simplified)\n    for (x = [-trunk_width/2, trunk_width/2]) {\n        for (y = [-trunk_depth/2, trunk_depth/2]) {\n            translate([x, y, 0])\n                cylinder(h = trunk_height + 2*wall_thickness, \n                        r1 = wall_thickness*1.5, \n                        r2 = wall_thickness*1.5, \n                        center = true);\n        }\n    }\n}\n\nmodule handle() {\n    // Handle mounting brackets\n    translate([-handle_length/2 - 2, -trunk_depth/2 - wall_thickness, 0])\n        cube([4, wall_thickness*2, 8]);\n    \n    translate([handle_length/2 - 2, -trunk_depth/2 - wall_thickness, 0])\n        cube([4, wall_thickness*2, 8]);\n    \n    // Handle bar\n    translate([0, -trunk_depth/2 - wall_thickness - handle_clearance/2, 4])\n        rotate([90, 0, 0])\n            cylinder(h = handle_length, \n                    r = handle_diameter/2, \n                    center = true);\n}\n\nmodule lock() {\n    // Lock plate\n    translate([0, trunk_depth/2 + wall_thickness/2, -trunk_height/4])\n        cube([lock_size, wall_thickness, lock_size*1.5]);\n    \n    // Keyhole\n    translate([0, trunk_depth/2 + wall_thickness + 0.1, -trunk_height/4])\n        rotate([0, 90, 0])\n            cylinder(h = wall_thickness + 0.2, \n                    r1 = 1.5, \n                    r2 = 1.5);\n}\n\nmodule hinges() {\n    // Left hinge\n    translate([-trunk_width/2 + wall_thickness*2, trunk_depth/2, trunk_height/2 - wall_thickness])\n        rotate([90, 0, 0])\n            cylinder(h = hinge_length, \n                    r = hinge_diameter, \n                    center = false);\n    \n    // Right hinge\n    translate([trunk_width/2 - wall_thickness*2 - hinge_length, trunk_depth/2, trunk_height/2 - wall_thickness])\n        rotate([90, 0, 0])\n            cylinder(h = hinge_length, \n                    r = hinge_diameter, \n                    center = false);\n}\n\n// Assembly\nunion() {\n    // Main trunk body\n    trunk_body();\n    \n    // Wood texturing (applied as overlay)\n    wood_texturing();\n    \n    // Metal reinforcements\n    color([0.7, 0.7, 0.8])\n    metal_reinforcements();\n    \n    // Handle\n    color([0.6, 0.6, 0.7])\n    handle();\n    \n    // Lock\n    color([0.5, 0.5, 0.6])\n    lock();\n    \n    // Hinges\n    color([0.6, 0.6, 0.7])\n    hinges();\n}",
    "renders": true
  },
  {
    "household_item": "chest",
    "openscad_code": "// Realistic 3D-printable treasure chest  ~65 mm wide\n// Medium complexity  (≈ 110 lines)\n\n$fa = 2; $fs = 0.5;  // better curves for printing\n\nmodule roundedBox(size, r, thick=1.5) {\n    // hollow box with rounded edges\n    hull() {\n        translate([ r,  r,  r]) sphere(r=r);\n        translate([ r,  r, size.z-r]) sphere(r=r);\n        translate([ r, size.y-r,  r]) sphere(r=r);\n        translate([ r, size.y-r, size.z-r]) sphere(r=r);\n        translate([size.x-r,  r,  r]) sphere(r=r);\n        translate([size.x-r,  r, size.z-r]) sphere(r=r);\n        translate([size.x-r, size.y-r,  r]) sphere(r=r);\n        translate([size.x-r, size.y-r, size.z-r]) sphere(r=r);\n    }\n    difference() {\n        cube(size, center=false);\n        translate([thick, thick, thick])\n            cube(size-[2*thick, 2*thick, 2*thick], center=false);\n    }\n}\n\nmodule chestBase() {\n    difference() {\n        roundedBox([45, 30, 25], 4, wall=2);\n        // cavity\n        translate([4, 4, 4])\n            cube([37, 22, 21], center=false);\n        // front keyhole\n        translate([22.5, 2, 12])\n            rotate([90,0,0])\n                cylinder(h=5, d=4, $fn=20);\n    }\n    // bottom plate lip for print bed adhesion\n    translate([-1, -1, -1])\n        cube([47, 32, 2]);\n}\n\nmodule hingePin() {\n    cylinder(h=35, d=2.2, $fn=20);\n}\n\nmodule lid() {\n    difference() {\n        // outer lid shell\n        hull() {\n            translate([4,4,0]) sphere(r=4);\n            translate([4,26,0]) sphere(r=4);\n            translate([41,4,0]) sphere(r=4);\n            translate([41,26,0]) sphere(r=4);\n            translate([4,4,10]) sphere(r=4);\n            translate([4,26,10]) sphere(r=4);\n            translate([41,4,10]) sphere(r=4);\n            translate([41,26,10]) sphere(r=4);\n        }\n        // inner hollow\n        translate([6,6,2])\n            cube([33, 18, 8], center=false);\n    }\n    // reinforcement ribs\n    for (y=[8,22])\n        translate([10,y,1]) cube([25,2,8]);\n    // hinge sleeves\n    translate([4, 5, 0]) rotate([0,90,0])\n        cylinder(h=8, d=4, center=true, $fn=20);\n    translate([4, 25, 0]) rotate([0,90,0])\n        cylinder(h=8, d=4, center=true, $fn=20);\n}\n\nmodule strap() {\n    // metal band around chest\n    color(\"silver\")\n    difference() {\n        translate([0, -0.5, 5])\n            cube([45, 1.5, 15]);\n        translate([20, -1, 5])\n            cube([5, 2.5, 15]);\n    }\n}\n\n// assembly\nchestBase();\ntranslate([0, 0, 25]) lid();\ntranslate([0, 5, 25]) hingePin();\ntranslate([0, 25, 25]) hingePin();\ntranslate([0,0,0]) strap();\ntranslate([0,29,0]) strap();",
    "renders": true
  },
  {
    "household_item": "coffer",
    "openscad_code": "// Realistic Coffin / Coffin Box – medium complexity\n// External size: 90 mm long, 40 mm wide, 35 mm high (closed)\n// 3D-printable – all slopes ≥45°, 2 mm wall thickness, no internal overhangs.\n\n// Parameters\nbodyL = 85;          // main body length\nbodyW = 36;          // main body width\nbodyH = 25;          // main body height\nwall = 2;            // wall thickness\nlidH = 8;            // lid height\nhandleR = 3;         // handle radius\nhandleL = 12;        // handle length\nslope = 0.4;         // side slope factor (0.5 = 45°)\n\n// --- Main Body ---\nmodule coffinBody(){\n    // trapezoidal cross-section\n    bottomW = bodyW;\n    topW    = bodyW - 2*(bodyH*slope);\n\n    // outer shell\n    difference(){\n        hull(){\n            translate([-bodyL/2, -bottomW/2, 0])\n                cube([bodyL, bottomW, bodyH], center=false);\n            translate([-bodyL/2, -topW/2,    bodyH])\n                cube([bodyL, topW,    1], center=false);\n        }\n\n        // hollow inside\n        hull(){\n            translate([-bodyL/2+wall, -(bottomW-2*wall)/2, wall])\n                cube([bodyL-2*wall, bottomW-2*wall, bodyH], center=false);\n            translate([-bodyL/2+wall, -(topW-2*wall)/2,    bodyH])\n                cube([bodyL-2*wall, topW-2*wall,    1], center=false);\n        }\n    }\n}\n\n// --- Lid ---\nmodule coffinLid(){\n    difference(){\n        // outer lid wedge\n        hull(){\n            translate([-bodyL/2-2, -bodyW/2-2, 0])\n                cube([bodyL+4, bodyW+4, 1], center=false);\n            translate([-bodyL/2-2, -(bodyW-bodyH*slope)/2, lidH])\n                cube([bodyL+4, bodyW-bodyH*slope, 1], center=false);\n        }\n\n        // inner cavity\n        hull(){\n            translate([-bodyL/2, -(bodyW-2*wall)/2, wall])\n                cube([bodyL, bodyW-2*wall, lidH], center=false);\n            translate([-bodyL/2, -(bodyW-bodyH*slope)/2+wall, lidH])\n                cube([bodyL, bodyW-bodyH*slope-2*wall, 1], center=false);\n        }\n    }\n}\n\n// --- Handles for lid ---\nmodule handles(){\n    for(side=[-1,1]){\n        translate([0, side*(bodyW/2+handleR+1), lidH/2])\n            rotate([0,90,0])\n                cylinder(h=handleL, r=handleR, $fn=16);\n    }\n}\n\n// --- Assembly ---\nunion(){\n    coffinBody();\n    translate([0,0,bodyH])\n        coffinLid();\n    translate([0,0,bodyH])\n        handles();\n}",
    "renders": true
  },
  {
    "household_item": "cubby",
    "openscad_code": "// Realistic cubby for stationery items\n// External dimensions: 80 x 50 x 100 mm\n// Wall thickness: 2 mm throughout\n// All edges filleted with 1 mm radius to avoid sharp corners\n// Printable without supports (no overhangs >45°)\n\n$fn = 48;  // Smooth curves\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([80, 50, 100], center = true);\n            sphere(1);\n        }\n        // Hollow interior\n        translate([0, 0, 2])\n            cube([76, 46, 98], center = true);\n    }\n}\n\n// Dividing shelf between compartments\nmodule shelf() {\n    translate([0, 0, 30])  // Positioned 30 mm from bottom\n        cube([76, 46, 2], center = true);\n}\n\n// Front lip to prevent items from falling out\nmodule front_lip() {\n    translate([0, 23.5, 50])\n        cube([78, 3, 48], center = true);\n}\n\n// Optional label plate on front face\nmodule label_plate() {\n    translate([0, 25, 70])\n        cube([30, 1, 10], center = true);\n}\n\n// Ventilation holes on back panel\nmodule vent_holes() {\n    for (x = [-30, -15, 0, 15, 30])\n        for (z = [10:20:90])\n            translate([x, -24.5, z])\n                cylinder(h = 3, r = 2, center = true);\n}\n\n// Small holes for mounting screws on back\nmodule mounting_holes() {\n    for (x = [-30, 30])\n        translate([x, -24.5, 85])\n            cylinder(h = 3, r = 1.5, center = true);\n}\n\n// Assemble all parts\nunion() {\n    body_shell();\n    shelf();\n    front_lip();\n    label_plate();\n    \n    difference() {\n        body_shell();\n        vent_holes();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "locker",
    "openscad_code": "// Realistic Locker - Medium Complexity\n// Overall size: 45mm x 30mm x 80mm (WxDxH)\n\n// Parameters\nwall_thickness = 2;\ndoor_gap = 0.5;\nhinge_radius = 1.5;\nhandle_radius = 2;\nhandle_length = 8;\nvent_hole_radius = 1.5;\n\n// Main locker body\nmodule locker_body() {\n    difference() {\n        // Outer shell\n        cube([45, 30, 80]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([45 - 2*wall_thickness, 30 - wall_thickness, 80 - wall_thickness]);\n        \n        // Door opening\n        translate([0, wall_thickness + door_gap, wall_thickness])\n            cube([door_gap, 30 - 2*wall_thickness - door_gap, 80 - 2*wall_thickness]);\n    }\n}\n\n// Door\nmodule locker_door() {\n    // Door panel\n    difference() {\n        translate([wall_thickness + door_gap, wall_thickness + door_gap, wall_thickness])\n            cube([45 - 2*wall_thickness - door_gap, 30 - 2*wall_thickness - 2*door_gap, 80 - 2*wall_thickness - 2]);\n        \n        // Handle recess\n        translate([45 - 2*wall_thickness - door_gap - 5, 15 - handle_radius/2, 40 - handle_length/2])\n            cube([handle_radius, handle_radius, handle_length]);\n    }\n    \n    // Handle\n    translate([45 - 2*wall_thickness - door_gap - 5 + handle_radius/2, 15, 40])\n        rotate([90, 0, 0])\n            cylinder(h=handle_radius, r=handle_radius, $fn=16);\n    \n    // Door vents\n    for(i=[1:4]) {\n        translate([wall_thickness + door_gap + 5, wall_thickness + door_gap + 5, i*15])\n            cylinder(h=30 - 2*wall_thickness - 4*door_gap - 10, r=vent_hole_radius, $fn=16);\n    }\n}\n\n// Hinges\nmodule hinges() {\n    for(pos=[20, 60]) {\n        // Left hinge\n        translate([wall_thickness, wall_thickness + door_gap, pos])\n            cylinder(h=wall_thickness + door_gap, r=hinge_radius, $fn=16);\n        \n        // Right hinge\n        translate([wall_thickness, wall_thickness + door_gap, pos])\n            rotate([0, 0, 90])\n                translate([0, -wall_thickness - door_gap, 0])\n                    cylinder(h=wall_thickness + door_gap, r=hinge_radius, $fn=16);\n    }\n}\n\n// Ventilation slots on sides\nmodule side_vents() {\n    difference() {\n        // Side panel\n        translate([0, 0, 0])\n            cube([wall_thickness, 30, 80]);\n        \n        // Vent slots\n        for(i=[1:6]) {\n            translate([0, 5, i*12])\n                cube([wall_thickness + 1, 20, 3]);\n        }\n    }\n}\n\n// Locker feet\nmodule feet() {\n    for(x=[5, 40]) {\n        translate([x, 5, 0])\n            cube([5, 5, wall_thickness]);\n        translate([x, 20, 0])\n            cube([5, 5, wall_thickness]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    locker_body();\n    \n    // Side panels with vents\n    translate([0, 0, 0])\n        side_vents();\n    translate([45 - wall_thickness, 0, 0])\n        mirror([1, 0, 0])\n            side_vents();\n    \n    // Top and bottom\n    translate([0, 0, 0])\n        cube([45, 30, wall_thickness]);\n    translate([0, 0, 80 - wall_thickness])\n        cube([45, 30, wall_thickness]);\n    \n    // Back panel\n    translate([0, 30 - wall_thickness, 0])\n        cube([45, wall_thickness, 80]);\n    \n    // Door assembly\n    translate([0, 0, 0])\n        locker_door();\n    \n    // Hinges\n    hinges();\n    \n    // Feet\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "armrest",
    "openscad_code": "// Realistic medium-complexity 3D-printable armrest\n// Overall size ≈ 90 mm long × 35 mm wide × 30 mm high\n\n// Basic dimensions\narmrest_length = 90;\narmrest_width  = 35;\narmrest_height = 30;\n\n// Wall / padding thickness\nwall = 2;\n\n// Rounded top cushion module\nmodule cushion() {\n    // Main pad body\n    translate([0, 0, armrest_height - 8])\n        minkowski() {\n            cube([armrest_length - 8, armrest_width - 8, 6], center = true);\n            sphere(4);\n        }\n\n    // Soft edge fillets along long sides\n    for (side = [-1, 1])\n        translate([0, side * (armrest_width / 2 - 2), armrest_height - 5])\n            rotate([0, 90, 0])\n                cylinder(h = armrest_length - 6, r = 2, center = true);\n}\n\n// Mounting plate with screw holes\nmodule mount() {\n    plate_thick = 3;\n    plate_len   = 60;\n    plate_wid   = 25;\n\n    difference() {\n        // Plate body\n        translate([0, 0, plate_thick / 2])\n            cube([plate_len, plate_wid, plate_thick], center = true);\n        // Two screw holes (M3)\n        for (x = [-20, 20])\n            translate([x, 0, -1])\n                cylinder(h = plate_thick + 2, r = 1.6, $fn = 16);\n    }\n}\n\n// Strengthening ribs under cushion\nmodule ribs() {\n    rib_h = armrest_height - 8 - wall;\n    for (x = [-30, -10, 10, 30])\n        translate([x, 0, rib_h / 2 + wall])\n            cube([2, armrest_width - 2 * wall, rib_h], center = true);\n}\n\n// Hollow shell base\nmodule shell() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([armrest_length, armrest_width, armrest_height], center = true);\n            sphere(2);\n        }\n\n        // Hollow cavity\n        translate([0, 0, -2])  // shift slightly down to keep bottom closed\n            cube([\n                armrest_length - 2 * wall,\n                armrest_width  - 2 * wall,\n                armrest_height - wall + 2\n            ], center = true);\n    }\n}\n\n// Final assembly\nunion() {\n    shell();\n    translate([0, 0, 0])\n        mount();\n    ribs();\n    cushion();\n}",
    "renders": true
  },
  {
    "household_item": "backrest",
    "openscad_code": "// Realistic-Style 3D-Printable Backrest (medium complexity)\n// Approx 90 mm high, 80 mm wide, 20 mm deep\n// No overhangs ≥ 45°, 2 mm wall thickness\n\n$fn = 32;\n\nmodule roundedCube(size, radius) {\n    // Helper for rounded corners\n    translate([radius, radius, 0])\n    minkowski() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        sphere(r = radius);\n    }\n}\n\nmodule backPanel() {\n    // Main curved back panel\n    difference() {\n        // Outer shell\n        translate([-40, 0, 0])\n        rotate([0, 10, 0])\n        roundedCube([80, 20, 90], 5);\n\n        // Inner cavity for weight reduction\n        translate([-38, 2, 5])\n        rotate([0, 10, 0])\n        roundedCube([76, 16, 80], 4);\n    }\n}\n\nmodule lumbarSupport() {\n    // Lumbar curve bulge\n    translate([0, 10, 30])\n    rotate([0, 10, 0])\n    scale([1, 0.6, 1])\n    sphere(d = 40);\n}\n\nmodule verticalSlats() {\n    // Vertical ventilation slats\n    for (x = [-30:10:30]) {\n        translate([x, 9, 45])\n        cube([4, 2, 40]);\n    }\n}\n\nmodule mountingHoles() {\n    // Keyhole-shaped mounting slots\n    for (z = [20:30:70]) {\n        translate([0, -9, z])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d1 = 8, d2 = 4);\n    }\n}\n\nmodule armrestPegs() {\n    // Optional armrest attachment pegs\n    for (y = [-1, 1]) {\n        translate([y * 35, 0, 50])\n        rotate([0, 90, 0])\n        cylinder(h = 15, d = 6);\n    }\n}\n\n// Assembly\nunion() {\n    backPanel();\n    lumbarSupport();\n    verticalSlats();\n    mountingHoles();\n    armrestPegs();\n}",
    "renders": true
  },
  {
    "household_item": "seat",
    "openscad_code": "// Realistic Chair Seat – OpenSCAD\n// Dimensions chosen for ~80 mm max, 2 mm wall, printable without supports\n\nchairWidth  = 60;   // overall seat width  (X)\nchairDepth  = 55;   // overall seat depth  (Y)\nchairHeight = 35;   // overall seat height (Z)\nwallThick   = 2;    // printable wall thickness\n\n// --- helper for rounded square extrusion ---\nmodule roundedRect(w, d, h, r) {\n    linear_extrude(height = h, center = true)\n        offset(r = r)\n            square([w, d], center = true);\n}\n\n// --- seat top with slight ergonomic dip ---\nmodule seatTop() {\n    difference() {\n        // main slab\n        roundedRect(chairWidth, chairDepth, 5, 3);\n        // shallow dip for comfort (ellipse)\n        translate([0, 0, 2.6])\n            scale([1, 0.7, 1])\n                cylinder(h = 3, d = chairWidth * 0.8, center = true);\n    }\n}\n\n// --- rear support (solid backrest) ---\nmodule backRest() {\n    union() {\n        // back panel\n        translate([0, -chairDepth/2 + 2.5, chairHeight/2 - 2.5])\n            roundedRect(chairWidth, 5, chairHeight - 5, 3);\n        \n        // two vertical strengthening ribs inside\n        for (x = [-chairWidth/3, chairWidth/3]) {\n            translate([x, -chairDepth/2 + 2.5, chairHeight/2 - 2.5])\n                cube([wallThick * 3, 5, chairHeight - 5], center = true);\n        }\n    }\n}\n\n// --- leg cross-brace ---\nmodule brace() {\n    translate([0, 0, 8])\n        roundedRect(chairWidth - 10, chairDepth - 10, wallThick, 2);\n}\n\n// --- four legs ---\nmodule legs() {\n    for (x = [-chairWidth/2 + 4, chairWidth/2 - 4])\n        for (y = [-chairDepth/2 + 4, chairDepth/2 - 4]) {\n            translate([x, y, chairHeight/2 - 12])\n                cylinder(h = chairHeight - 12, d = 4, center = true);\n        }\n}\n\n// --- final assembly ---\nunion() {\n    seatTop();\n    backRest();\n    brace();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "cushion",
    "openscad_code": "// Realistic 3D printable cushion with medium complexity\n// Dimensions: 60mm x 60mm x 18mm\n\n// Main parameters\ncushion_size = 60;\ncushion_height = 18;\ncorner_radius = 8;\nseam_width = 2;\nbutton_radius = 4;\nwall_thickness = 1.5;\n\n// Create the main cushion body\nmodule cushion_body() {\n    // Base rounded cushion shape\n    difference() {\n        // Main rounded box\n        minkowski() {\n            cube([cushion_size - 2*corner_radius, cushion_size - 2*corner_radius, cushion_height - corner_radius], center = true);\n            sphere(r = corner_radius);\n        }\n        \n        // Hollow out the inside for 3D printing\n        translate([0, 0, -wall_thickness/2])\n            scale([0.9, 0.9, 0.8])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius, cushion_size - 2*corner_radius, cushion_height - corner_radius], center = true);\n                sphere(r = corner_radius - wall_thickness);\n            }\n    }\n}\n\n// Create seam lines on the top surface\nmodule seam_lines() {\n    for (i = [-1, 1]) {\n        translate([i * cushion_size/4, 0, cushion_height/2 - 0.5])\n            rotate([90, 0, 0])\n                cylinder(h = cushion_size, r = seam_width/2, center = true);\n        \n        translate([0, i * cushion_size/4, cushion_height/2 - 0.5])\n            rotate([0, 90, 0])\n                cylinder(h = cushion_size, r = seam_width/2, center = true);\n    }\n}\n\n// Create tufted buttons\nmodule tufted_buttons() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * cushion_size/4, y * cushion_size/4, cushion_height/2 - button_radius/2])\n                difference() {\n                    sphere(r = button_radius);\n                    translate([0, 0, -button_radius/2])\n                        cube([button_radius*2, button_radius*2, button_radius], center = true);\n                }\n            \n            // Button indentations\n            translate([x * cushion_size/4, y * cushion_size/4, cushion_height/2 - button_radius])\n                cylinder(h = button_radius + 1, r = button_radius * 0.6, $fn = 20);\n        }\n    }\n}\n\n// Create beveled edges for realistic look\nmodule beveled_edges() {\n    // Top edge bevel\n    difference() {\n        translate([0, 0, cushion_height/2 - 1])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius, cushion_size - 2*corner_radius, 2], center = true);\n                sphere(r = corner_radius);\n            }\n        \n        translate([0, 0, cushion_height/2])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius - 2, cushion_size - 2*corner_radius - 2, 2], center = true);\n                sphere(r = corner_radius - 1);\n            }\n    }\n    \n    // Bottom edge bevel\n    difference() {\n        translate([0, 0, -cushion_height/2 + 1])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius, cushion_size - 2*corner_radius, 2], center = true);\n                sphere(r = corner_radius);\n            }\n        \n        translate([0, 0, -cushion_height/2])\n            minkowski() {\n                cube([cushion_size - 2*corner_radius - 2, cushion_size - 2*corner_radius - 2, 2], center = true);\n                sphere(r = corner_radius - 1);\n            }\n    }\n}\n\n// Create fabric texture pattern\nmodule fabric_texture() {\n    texture_height = 0.3;\n    spacing = 3;\n    \n    for (x = [-cushion_size/2 + spacing : spacing : cushion_size/2 - spacing]) {\n        for (y = [-cushion_size/2 + spacing : spacing : cushion_size/2 - spacing]) {\n            // Skip areas near buttons\n            if (abs(x) > cushion_size/6 || abs(y) > cushion_size/6) {\n                translate([x, y, cushion_height/2 - texture_height])\n                    cube([1, 1, texture_height], center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    cushion_body();\n    \n    // Add surface details only to top\n    translate([0, 0, 0]) {\n        seam_lines();\n        tufted_buttons();\n        beveled_edges();\n        fabric_texture();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pillow",
    "openscad_code": "// Realistic 3D-printable pillow in OpenSCAD\n// Approx 60 x 40 x 12 mm – fits most FDM printers\n// No overhangs > 45°, 1.2 mm wall thickness\n\n$fn = 32;        // smooth curves for 3D printing\neps = 0.01;      // tiny offset to avoid Z-fighting\n\n// overall pillow envelope\nmodule pillow_body() {\n    // rounded cushion by intersecting stretched spheres\n    intersection() {\n        scale([1, 0.65, 0.2])\n            sphere(d=60);          // main bulge\n        translate([0, 0, -6])\n            cube([62, 42, 24], center=true);\n    }\n}\n\n// subtle seam line around the edge\nmodule seam() {\n    hull() {\n        for (a = [0:30:330])\n            translate([30*cos(a), 20*sin(a), 0])\n                cylinder(d1=1.4, d2=1.0, h=0.6, center=true);\n    }\n}\n\n// repeating quilted squares on top\nmodule quilt_pattern() {\n    for (x = [-22:11:22])\n        for (y = [-16:11:16]) {\n            translate([x, y, 6-eps]) {\n                difference() {\n                    cube([9, 9, 1.2], center=true);       // stitch ridge\n                    cube([7, 7, 1.3], center=true);       // recessed square\n                }\n            }\n        }\n}\n\n// small puffy corners (add realism)\nmodule corner_puffs() {\n    for (dx = [-1, 1])\n        for (dy = [-1, 1])\n            translate([dx*27, dy*18, 0])\n                scale([1, 0.7, 0.4])\n                    sphere(d=12, center=true);\n}\n\n// assemble the pillow\nunion() {\n    // main cushion\n    pillow_body();\n    \n    // top surface details\n    translate([0, 0, 5-eps]) {\n        quilt_pattern();\n        color(\"dimgray\") seam();\n    }\n    \n    // bottom surface details (mirror for symmetry)\n    mirror([0, 0, 1]) {\n        translate([0, 0, 5-eps]) {\n            quilt_pattern();\n            color(\"dimgray\") seam();\n        }\n    }\n    \n    // corner puffs on both sides\n    corner_puffs();\n    mirror([0, 0, 1]) corner_puffs();\n}",
    "renders": true
  },
  {
    "household_item": "blanket",
    "openscad_code": "// Realistic 3D printable blanket model with medium complexity\n// Base blanket dimensions (50 x 80 mm)\nblanket_length = 80;\nblanket_width = 50;\nblanket_thickness = 2;\nhem_thickness = 0.6;\nhem_width = 3;\n\n// Stitch pattern parameters\nstitch_width = 2;\nstitch_length = 2.5;\nstitch_height = 0.3;\nstitch_spacing = 3;\n\n// Fold parameters\nfold_depth = 8;\nfold_spacing = 12;\n\n// Render the complete blanket\nunion() {\n    // Main blanket body with hem\n    difference() {\n        // Base blanket\n        cube([blanket_width, blanket_length, blanket_thickness]);\n        \n        // Hollow out center for realistic thickness\n        translate([hem_width, hem_width, -0.1])\n            cube([blanket_width - 2*hem_width, blanket_length - 2*hem_width, blanket_thickness + 0.2]);\n    }\n    \n    // Top hem\n    translate([0, 0, blanket_thickness])\n        cube([blanket_width, hem_width, hem_thickness]);\n    \n    // Bottom hem\n    translate([0, blanket_length - hem_width, blanket_thickness])\n        cube([blanket_width, hem_width, hem_thickness]);\n    \n    // Left hem\n    translate([0, 0, blanket_thickness])\n        cube([hem_width, blanket_length, hem_thickness]);\n    \n    // Right hem\n    translate([blanket_width - hem_width, 0, blanket_thickness])\n        cube([hem_width, blanket_length, hem_thickness]);\n    \n    // Create folded appearance\n    for (y = [fold_spacing : fold_spacing : blanket_length - fold_spacing]) {\n        translate([0, y, blanket_thickness + hem_thickness + 0.1])\n            linear_extrude(height = 0.5)\n                square([blanket_width, 1]);\n    }\n    \n    // Stitch pattern on surface\n    module stitch(x, y) {\n        translate([x, y, blanket_thickness + 0.1])\n            scale([1, 1.2, 1])\n                sphere(stitch_height, $fn=8);\n    }\n    \n    // Create knit pattern across blanket\n    for (x = [stitch_spacing/2 : stitch_spacing : blanket_width - stitch_spacing/2]) {\n        for (y = [stitch_spacing/2 : stitch_spacing : blanket_length - stitch_spacing/2]) {\n            // Offset every other row for realistic knit pattern\n            offset = (y / stitch_spacing) % 2 ? stitch_spacing/2 : 0;\n            stitch(x + offset, y);\n        }\n    }\n    \n    // Add subtle wrinkles for realism\n    module wrinkle(x, y, angle) {\n        translate([x, y, blanket_thickness + 0.2]) {\n            rotate([0, 0, angle])\n                scale([1, 0.3, 0.1])\n                    cylinder(h = 3, r = 2, $fn=16);\n        }\n    }\n    \n    // Random wrinkles across surface\n    wrinkle(15, 20, 30);\n    wrinkle(35, 45, -20);\n    wrinkle(25, 65, 45);\n    wrinkle(40, 15, -35);\n    wrinkle(10, 55, 15);\n    \n    // Corner tassels\n    module tassel(x, y) {\n        translate([x, y, -1]) {\n            // Tassel body\n            cylinder(h = 4, r1 = 1, r2 = 0.5, $fn=8);\n            \n            // Individual threads\n            for (i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([0.3, 0, -0.5])\n                        cylinder(h = 5, r = 0.1, $fn=4);\n            }\n        }\n    }\n    \n    // Add tassels at corners\n    tassel(1, 1);\n    tassel(blanket_width - 1, 1);\n    tassel(1, blanket_length - 1);\n    tassel(blanket_width - 1, blanket_length - 1);\n}",
    "renders": true
  },
  {
    "household_item": "quilt",
    "openscad_code": "// Quilt Block Parameters\n$fn = 24;  // Smooth curves for 3D printing\nblock_size = 15;  // Each quilt square\nthickness = 2;   // Quilt thickness\npadding = 0.5;   // Gap between squares\nborder = 2;      // Border thickness\n\n// Overall quilt dimensions\nblocks_x = 5;\nblocks_y = 5;\nquilt_width = blocks_x * block_size + (blocks_x - 1) * padding + 2 * border;\nquilt_length = blocks_y * block_size + (blocks_y - 1) * padding + 2 * border;\n\n// Quilt base\ndifference() {\n    // Main quilt rectangle\n    translate([0, 0, 0])\n        cube([quilt_width, quilt_length, thickness]);\n    \n    // Hollow out center for realistic quilt thickness\n    translate([border, border, -0.1])\n        cube([quilt_width - 2*border, quilt_length - 2*border, thickness + 0.2]);\n}\n\n// Generate quilt pattern\nmodule quilt_square(x, y, pattern_type) {\n    translate([border + x * (block_size + padding), \n               border + y * (block_size + padding), \n               thickness - 0.5]) {\n        \n        // Base square\n        color(\"beige\")\n            cube([block_size, block_size, 0.5]);\n        \n        // Pattern based on type\n        if (pattern_type == 0) {\n            // Diamond pattern\n            difference() {\n                cube([block_size, block_size, 0.3]);\n                rotate([0, 0, 45])\n                    cube([block_size * 0.7, block_size * 0.7, 0.5]);\n            }\n        } else if (pattern_type == 1) {\n            // Circle pattern\n            translate([block_size/2, block_size/2, 0])\n                cylinder(h = 0.3, r = block_size * 0.35);\n        } else {\n            // Cross pattern\n            cube([block_size * 0.3, block_size, 0.3]);\n            cube([block_size, block_size * 0.3, 0.3]);\n        }\n    }\n}\n\n// Generate the quilt pattern grid\nfor (x = [0 : blocks_x - 1]) {\n    for (y = [0 : blocks_y - 1]) {\n        pattern = (x + y) % 3;\n        quilt_square(x, y, pattern);\n    }\n}\n\n// Stitching lines between squares\nmodule stitching_line(x1, y1, x2, y2) {\n    translate([x1, y1, thickness - 0.2]) {\n        rotate([0, 0, atan2(y2 - y1, x2 - x1)])\n            cube([sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)), 0.5, 0.2]);\n    }\n}\n\n// Add stitching\nfor (x = [0 : blocks_x]) {\n    for (y = [0 : blocks_y - 1]) {\n        stitching_line(\n            border + x * (block_size + padding) - padding/2,\n            border + y * (block_size + padding) + block_size/2,\n            border + x * (block_size + padding) + block_size + padding/2,\n            border + y * (block_size + padding) + block_size/2\n        );\n    }\n}\n\nfor (y = [0 : blocks_y]) {\n    for (x = [0 : blocks_x - 1]) {\n        stitching_line(\n            border + x * (block_size + padding) + block_size/2,\n            border + y * (block_size + padding) - padding/2,\n            border + x * (block_size + padding) + block_size/2,\n            border + y * (block_size + padding) + block_size + padding/2\n        );\n    }\n}\n\n// Corner tassels\nmodule tassel(x, y) {\n    translate([x, y, 0]) {\n        // Tassel base\n        cylinder(h = 3, r = 1.5);\n        \n        // Tassel strands\n        for (i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n                translate([1, 0, 0])\n                    cylinder(h = 4, r = 0.3);\n        }\n    }\n}\n\n// Add tassels at corners\ntassel(0, 0);\ntassel(quilt_width, 0);\ntassel(0, quilt_length);\ntassel(quilt_width, quilt_length);",
    "renders": true
  },
  {
    "household_item": "duvet",
    "openscad_code": "// Realistic medium-complexity duvet model for 3D printing\n// Overall dimensions: 80 x 60 x 12 mm\n\n// Parameters\nduvet_w = 80;\nduvet_l = 60;\nduvet_t = 12;\nwall_thickness = 1.2;\nseam_offset = 2;\nstitch_spacing = 4;\n\n// Main duvet body with hollow interior\nmodule duvet_shell() {\n    difference() {\n        // Outer soft shell\n        rounded_box(duvet_w, duvet_l, duvet_t, 3);\n        \n        // Hollow inside\n        translate([0, 0, -wall_thickness/2])\n            rounded_box(duvet_w - wall_thickness*2, duvet_l - wall_thickness*2, duvet_t - wall_thickness, 2.5);\n    }\n}\n\n// Helper module for rounded box with soft edges\nmodule rounded_box(w, l, h, r) {\n    hull() {\n        for (i = [-1, 1])\n        for (j = [-1, 1])\n        for (k = [-1, 1])\n            translate([i*(w/2 - r), j*(l/2 - r), k*(h/2 - r)])\n                sphere(r);\n    }\n}\n\n// Quilted stitching pattern\nmodule stitching() {\n    for (x = [-duvet_w/2 + seam_offset : stitch_spacing : duvet_w/2 - seam_offset]) {\n        for (y = [-duvet_l/2 + seam_offset : stitch_spacing : duvet_l/2 - seam_offset]) {\n            translate([x, y, duvet_t/2 - 0.3])\n                cylinder(h=0.6, r=0.4, $fn=8);\n        }\n    }\n}\n\n// Corner seams\nmodule corner_seams() {\n    for (x = [-1, 1])\n    for (y = [-1, 1]) {\n        translate([x*(duvet_w/2 - seam_offset), y*(duvet_l/2 - seam_offset), 0])\n            difference() {\n                cylinder(h=duvet_t, r=seam_offset*0.7, $fn=16);\n                translate([0, 0, 1])\n                    cylinder(h=duvet_t-2, r=seam_offset*0.7 - wall_thickness, $fn=16);\n            }\n    }\n}\n\n// Fabric texture pattern\nmodule fabric_texture() {\n    difference() {\n        // Top surface with subtle texture\n        translate([0, 0, duvet_t/2 - 0.2])\n            cube([duvet_w - 2, duvet_l - 2, 0.4], center=true);\n        \n        // Tiny dimples for fabric look\n        for (x = [-duvet_w/2 + 2 : 1.5 : duvet_w/2 - 2]) {\n            for (y = [-duvet_l/2 + 2 : 1.5 : duvet_l/2 - 2]) {\n                if ((x + y) % 3 == 0) {\n                    translate([x, y, duvet_t/2 - 0.1])\n                        sphere(r=0.2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    duvet_shell();\n    \n    // Add stitching details\n    translate([0, 0, 0])\n        stitching();\n    \n    // Corner seam details\n    corner_seams();\n    \n    // Fabric texture on top\n    fabric_texture();\n    \n    // Subtle fold lines\n    translate([0, -duvet_l/4, duvet_t/2 - 0.5])\n        scale([0.8, 0.05, 0.3])\n            sphere(r=1);\n    \n    translate([0, duvet_l/4, duvet_t/2 - 0.5])\n        scale([0.8, 0.05, 0.3])\n            sphere(r=1);\n}",
    "renders": true
  },
  {
    "household_item": "comforter",
    "openscad_code": "// Realistic 3D-Printable Comforter – medium complexity\n// Designed for FDM printing: 0.8 mm wall thickness, no overhangs > 45°\n\n$fa = 2;\n$fs = 0.5;\n\n// overall comforter dimensions (in mm, scaled for desktop printing)\nlength = 90;\nwidth  = 65;\nheight = 6;\n\n// wall thickness for printability\nwall = 0.8;\n\nmodule comforter_body() {\n    // main quilted slab\n    difference() {\n        cube([length, width, height], center = true);\n        // hollow out inside to leave only walls\n        translate([0, 0, wall/2])\n            cube([length-wall*2, width-wall*2, height-wall], center = true);\n    }\n}\n\n// single square puff\nmodule single_puff(s) {\n    difference() {\n        // rounded top puff\n        translate([0, 0, s/2])\n            scale([1, 1, 0.5])\n                sphere(d = s, $fn = 16);\n        // cut flat bottom\n        translate([0, 0, -0.1])\n            cube([s*1.1, s*1.1, s], center = true);\n    }\n}\n\n// generate quilted grid of puffs\nmodule quilted_surface() {\n    puff_size = 7;\n    step = puff_size * 1.2;\n    rows = floor(width / step);\n    cols = floor(length / step);\n\n    for (i = [0 : cols-1])\n        for (j = [0 : rows-1])\n            translate([\n                -length/2 + step/2 + i*step,\n                -width/2  + step/2 + j*step,\n                height/2 - wall\n            ])\n                single_puff(puff_size);\n}\n\n// simple folded corner to show fabric drape\nmodule folded_corner() {\n    translate([length/2-8, width/2-8, 0])\n    rotate([0, 0, 90])\n    difference() {\n        cylinder(h = 10, r1 = 8, r2 = 8, $fn = 32);\n        translate([0, 0, -1])\n            cylinder(h = 12, r1 = 6, r2 = 6, $fn = 32);\n    }\n}\n\n// assembly\nunion() {\n    comforter_body();\n    quilted_surface();\n    folded_corner();\n    mirror([1, 0, 0]) folded_corner();\n    mirror([0, 1, 0]) folded_corner();\n    mirror([1, 1, 0]) folded_corner();\n}",
    "renders": true
  },
  {
    "household_item": "sheet",
    "openscad_code": "// OpenSCAD code for a realistic 3D printable sheet\n// Dimensions: 80mm x 60mm x 1.2mm overall\n\n// Overall sheet dimensions\nsheet_w = 80;\nsheet_h = 60;\nsheet_t = 0.6;\n\n// Corner radius\ncorner_r = 5;\n\n// Hole spacing and size\nhole_d = 2.5;\nhole_margin = 8;\nhole_pitch_x = 20;\nhole_pitch_y = 20;\n\n// Reinforcement thickness\nrib_t = 0.6;\n\nmodule rounded_sheet(w, h, t, r) {\n    difference() {\n        // Base sheet with rounded corners\n        offset(r = r) {\n            offset(delta = -r) {\n                square([w, h], center = true);\n            }\n        }\n        // Cut out inner rounded rectangle to create frame\n        offset(r = r - 1) {\n            offset(delta = -(r - 1)) {\n                square([w - 2, h - 2], center = true);\n            }\n        }\n    }\n    linear_extrude(height = t, center = true) {\n        offset(r = r) {\n            offset(delta = -r) {\n                square([w, h], center = true);\n            }\n        }\n    }\n}\n\nmodule sheet_with_holes() {\n    difference() {\n        // Main sheet body\n        union() {\n            // Base layer\n            linear_extrude(height = sheet_t, center = true)\n                offset(r = corner_r)\n                    offset(delta = -corner_r)\n                        square([sheet_w, sheet_h], center = true);\n            \n            // Edge reinforcement ribs\n            // Top and bottom ribs\n            for (x = [-sheet_w/2 + 5 : 10 : sheet_w/2 - 5]) {\n                translate([x, 0, 0])\n                    cube([8, sheet_h - 2*corner_r, rib_t], center = true);\n            }\n            // Left and right ribs\n            for (y = [-sheet_h/2 + 5 : 10 : sheet_h/2 - 5]) {\n                translate([0, y, 0])\n                    cube([sheet_w - 2*corner_r, 8, rib_t], center = true);\n            }\n            \n            // Corner gussets\n            for (x = [-1, 1]) {\n                for (y = [-1, 1]) {\n                    translate([x*(sheet_w/2 - corner_r), \n                              y*(sheet_h/2 - corner_r), 0])\n                        rotate([0, 0, x*y*45])\n                            cube([corner_r*sqrt(2), corner_r*sqrt(2), rib_t], center = true);\n                }\n            }\n        }\n        \n        // Mounting holes grid\n        for (x = [-sheet_w/2 + hole_margin : hole_pitch_x : sheet_w/2 - hole_margin]) {\n            for (y = [-sheet_h/2 + hole_margin : hole_pitch_y : sheet_h/2 - hole_margin]) {\n                translate([x, y, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = sheet_t*2, d = hole_d, center = true, $fn = 24);\n            }\n        }\n        \n        // Central label area cutout (optional)\n        translate([0, 0, sheet_t/2 + 0.1])\n            cube([30, 15, sheet_t + 0.2], center = true);\n    }\n}\n\n// Generate the sheet\nsheet_with_holes();",
    "renders": true
  },
  {
    "household_item": "bedspread",
    "openscad_code": "// Realistic 3D-printable bedspread model (medium complexity)\n// Outer dimensions: ~80 mm x 60 mm x 3 mm\n// Wall thickness: 1 mm for printability\n\n// Global parameters\nbedspread_length = 80;\nbedspread_width  = 60;\nthickness        = 3;\nwall             = 1;\n\nmodule bedspread() {\n    // Main fabric body with rounded corners\n    difference() {\n        // Base slab\n        cube([bedspread_length, bedspread_width, thickness], center = true);\n        \n        // Hollow inside to reduce material\n        translate([0, 0, -wall/2])\n            cube([bedspread_length - 2*wall, bedspread_width - 2*wall, thickness + wall], center = true);\n    }\n    \n    // Quilted squares pattern\n    module quilt_square(x, y) {\n        translate([x, y, thickness/2 - 0.5]) {\n            // Slightly raised square\n            cube([4, 4, 1], center = true);\n            // Tiny depression in center\n            translate([0, 0, 0.5])\n                cube([2, 2, 0.5], center = true);\n        }\n    }\n    \n    // Generate quilt grid\n    for (i = [-35:10:35])\n        for (j = [-25:10:25])\n            quilt_square(i, j);\n    \n    // Hanging folds at edges\n    module fold(x, y, angle) {\n        translate([x, y, 0])\n        rotate([angle, 0, 0])\n            scale([1, 1.2, 0.8])\n                cube([6, 2, 2], center = true);\n    }\n    \n    // Add gentle folds along sides\n    for (i = [-35:10:35])\n        fold(i, 30, 10);\n    for (i = [-35:10:35])\n        fold(i, -30, -10);\n    \n    // Corner tassels\n    module tassel(x, y) {\n        translate([x, y, -thickness/2 - 2]) {\n            // String\n            cylinder(h = 4, r = 0.5, $fn = 8);\n            // Tassel ball\n            translate([0, 0, -2.5])\n                sphere(r = 1.5, $fn = 12);\n        }\n    }\n    \n    // Place tassels at corners\n    tassel( bedspread_length/2 - 2,  bedspread_width/2 - 2);\n    tassel(-bedspread_length/2 + 2,  bedspread_width/2 - 2);\n    tassel( bedspread_length/2 - 2, -bedspread_width/2 + 2);\n    tassel(-bedspread_length/2 + 2, -bedspread_width/2 + 2);\n    \n    // Subtle pillow bump under top\n    translate([0, 20, -thickness/2 - 1])\n        scale([30, 15, 2])\n            sphere(r = 1, $fn = 20);\n}\n\n// Render the bedspread\nbedspread();",
    "renders": true
  },
  {
    "household_item": "canopy",
    "openscad_code": "// Realistic medium-complexity canopy (gazebo style)\n// Overall printable size ~70 mm tall, 80 mm wide\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule roof_tile(x=0, y=0, a=0) {\n    translate([x, y, 0])\n    rotate([0, 0, a])\n    linear_extrude(height=1.2)\n    polygon(points=[[0,0],[12,0],[11,2],[1,2]]);\n}\n\nmodule hexagon(r, h) {\n    for(i=[0:5])\n    rotate([0,0,i*60])\n    translate([r,0,h/2])\n    cube([r, wall, h], center=true);\n}\n\nmodule post(h) {\n    // Base footing\n    cylinder(h=2, d1=6, d2=5, $fn=12);\n    translate([0,0,2])\n    // Main post\n    cylinder(h=h-2, d=4, $fn=8);\n}\n\n// Central hub\nmodule hub() {\n    difference() {\n        cylinder(h=8, d=12, $fn=24);\n        translate([0,0,-1])\n        cylinder(h=10, d=8, $fn=24);\n    }\n    // Spoke holes\n    for(i=[0:5])\n    rotate([0,0,i*60])\n    translate([6,0,4])\n    rotate([90,0,0])\n    cylinder(h=6, d=2.6, $fn=8);\n}\n\n// Roof ring\nmodule ring(r) {\n    difference() {\n        cylinder(h=3, d=r*2+wall*2, $fn=48);\n        translate([0,0,-1])\n        cylinder(h=5, d=r*2, $fn=48);\n    }\n}\n\n// Full roof\nmodule roof() {\n    // Central hub\n    hub();\n    \n    // Roof tiles on six sides\n    for(i=[0:5])\n    rotate([0,0,i*60]) {\n        // Ridge beam\n        translate([0,0,8])\n        rotate([30,0,0])\n        cube([40, wall, 2], center=true);\n        \n        // Tiles\n        for(x=[-18:4:18])\n        for(y=[-15:3:15])\n        if(abs(x)+abs(y) < 25)\n        translate([x*cos(i*60) - y*sin(i*60), x*sin(i*60) + y*cos(i*60), 8+abs(x)*0.3])\n        rotate([30,0,i*60])\n        roof_tile(0, 0, 0);\n    }\n    \n    // Ring at edge\n    translate([0,0,22])\n    ring(32);\n}\n\n// Floor platform\nmodule floor() {\n    difference() {\n        cylinder(h=wall, d=70, $fn=6);\n        translate([0,0,-1])\n        cylinder(h=wall+2, d=65, $fn=6);\n    }\n}\n\n// Side panels\nmodule panel(h) {\n    translate([-wall/2,0,h/2])\n    cube([wall, 25, h], center=true);\n}\n\n// Main assembly\ntranslate([0,0,5])\nunion() {\n    // Floor\n    floor();\n    \n    // Six posts\n    for(i=[0:5])\n    rotate([0,0,i*60])\n    translate([30,0,wall])\n    post(30);\n    \n    // Roof\n    translate([0,0,30])\n    roof();\n    \n    // Side rails\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n        translate([30,0,10])\n        rotate([0,90,i*60+90])\n        panel(20);\n        \n        rotate([0,0,i*60])\n        translate([30,0,20])\n        rotate([0,0,i*60+90])\n        cube([25, wall, wall], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "drape",
    "openscad_code": "// Realistic medium-complexity drape\n// 3D printable, ~60 mm tall, 80 mm wide\n\n$fn = 48;\nwall = 1.2;          // printable wall thickness\nrod_r = 2;           // curtain-rod radius\nrod_l = 85;          // rod length\nfold_spacing = 6;    // distance between pleats\nfold_depth = 4;      // how far pleats indent\ndrop = 60;           // total drape length\n\nmodule pleat(x_pos) {\n    // one vertical pleat\n    translate([x_pos, 0, 0])\n    difference() {\n        // main pleat body\n        cube([wall, fold_spacing, drop], center = true);\n        // carve the inward fold\n        translate([0, -fold_spacing/2 - 0.1, 0])\n        cube([wall + 0.2, fold_depth, drop + 0.2], center = true);\n    }\n}\n\nmodule curtain_rod() {\n    // simple round rod with end caps\n    union() {\n        // rod tube\n        rotate([90, 0, 0])\n        cylinder(h = rod_l, r = rod_r);\n        // left cap\n        translate([-rod_l/2, 0, 0])\n        sphere(r = rod_r);\n        // right cap\n        translate([rod_l/2, 0, 0])\n        sphere(r = rod_r);\n    }\n}\n\nmodule drape_body() {\n    // gathers the pleats into a curtain\n    translate([0, 0, -drop/2])\n    union() {\n        // loop to create evenly spaced pleats\n        for (x = [-rod_l/2 + fold_spacing/2 : fold_spacing : rod_l/2 - fold_spacing/2])\n            pleat(x);\n        \n        // optional bottom hem bar for weight\n        translate([0, 0, -drop/2 + 2])\n        cube([rod_l - 8, wall*2, wall], center = true);\n    }\n}\n\n// top rod\ntranslate([0, 0, drop/2 + rod_r])\ncurtain_rod();\n\n// main curtain\ndrape_body();",
    "renders": true
  },
  {
    "household_item": "curtain",
    "openscad_code": "// Realistic curtain for 3D printing, ~80 mm tall\n// Uses only basic primitives and keeps printable (no steep overhangs)\n\n// Parameters\ncurtain_height = 80;\ncurtain_width = 60;\ncurtain_thick = 1.6;        // wall thickness for 3D printing\npleat_num = 8;              // number of pleats\npleat_depth = 8;\nrod_d = 5;\nrod_l = curtain_width + 10;\n\n// Overall assembly\nmodule curtain_assembly() {\n    union() {\n        // Curtain rod\n        translate([0, 0, curtain_height + rod_d/2])\n            rotate([90,0,0])\n                cylinder(h = rod_l, d = rod_d, $fn = 32);\n\n        // Brackets\n        translate([-curtain_width/2 - 2, 0, curtain_height])\n            bracket();\n        translate([ curtain_width/2 + 2, 0, curtain_height])\n            mirror([1,0,0]) bracket();\n\n        // Curtain body\n        translate([0, 0, curtain_height/2])\n            curtain_body();\n    }\n}\n\n// Simple wall bracket\nmodule bracket() {\n    difference() {\n        union() {\n            cube([4, 4, 12], center = true);\n            translate([0,-2,5]) cube([4,8,2], center = true);\n        }\n        translate([0,0,6]) rotate([90,0,0])\n            cylinder(h = 6, d = rod_d + 1, $fn = 32);\n    }\n}\n\n// Main curtain with pleats\nmodule curtain_body() {\n    curtain_th = curtain_thick;\n    pleat_step = curtain_width / pleat_num;\n\n    // Gathered top header\n    translate([0, 0, curtain_height - 5])\n        cube([curtain_width, curtain_th, 10], center = true);\n\n    // Pleated curtain panels\n    for (i = [-pleat_num/2 : pleat_num/2 - 1]) {\n        x = i * pleat_step + pleat_step/2;\n        translate([x, 0, 0])\n            pleat_panel();\n    }\n}\n\n// Single pleated panel\nmodule pleat_panel() {\n    pleat_w = curtain_width / pleat_num;\n    h = curtain_height;\n    d = pleat_depth;\n    th = curtain_thick;\n\n    // Main panel\n    translate([0, -d/2, 0])\n        cube([pleat_w, d, h], center = true);\n\n    // Thin fold ridges (add realism, printable)\n    ridge_w = 0.8;\n    ridge_h = 1;\n    ridge_d = d + 0.2;\n    ridges = 5;\n    for (j = [0:ridges-1]) {\n        z = j * (h - 4)/ridges + 2;\n        translate([0, 0, z])\n            cube([pleat_w + th, ridge_d, ridge_h], center = true);\n    }\n\n    // Bottom hem bar\n    translate([0, 0, 1])\n        cube([pleat_w + th, d + th, 2], center = true);\n}\n\n// Render\n$fa = 2;\n$fs = 0.5;\ncurtain_assembly();",
    "renders": true
  },
  {
    "household_item": "rug",
    "openscad_code": "// Realistic 3D Printable Rug – Medium Complexity\n// Dimensions: 80 mm x 50 mm x 5 mm overall\n\n// Configurable parameters\nrug_len = 80;\nrug_wid = 50;\nrug_thk = 5;\npile_height = 2.5;\nwall_thk = 1;\n\n// Tassels\ntassel_len = 8;\ntassel_d = 1.2;\ntassels_per_side = 8;\n\n// Base plate with rounded edges\nmodule rug_base() {\n    difference() {\n        minkowski() {\n            cube([rug_len, rug_wid, rug_thk], center=true);\n            cylinder(r=3, h=0.01, center=true, $fn=20);\n        }\n        translate([0, 0, rug_thk/2 - 0.2])\n            cube([rug_len - 2*wall_thk, rug_wid - 2*wall_thk, rug_thk + 1], center=true);\n    }\n}\n\n// Single pile tuft\nmodule tuft(x, y, h) {\n    translate([x, y, rug_thk/2 - pile_height/2])\n        cylinder(h=h, d=2.5, $fn=12);\n}\n\n// Generate realistic pile pattern\nmodule rug_pile() {\n    for (y = [-rug_wid/2 + 3 : 3.5 : rug_wid/2 - 3])\n        for (x = [-rug_len/2 + 3 : 3.5 : rug_len/2 - 3]) {\n            // Slight height variation for realism\n            tuft(x, y, pile_height * (0.8 + 0.4 * sin(x) * cos(y)));\n        }\n}\n\n// Tassel strand\nmodule tassel_strand() {\n    difference() {\n        cylinder(h=tassel_len, d=tassel_d, $fn=8);\n        translate([0, 0, tassel_len - 0.5])\n            sphere(d=tassel_d*1.8, $fn=8);\n    }\n}\n\n// Add tassels along short edges\nmodule tassels() {\n    for (i = [0 : tassels_per_side - 1]) {\n        pos = -rug_len/2 + (i + 0.5) * (rug_len / tassels_per_side);\n        translate([pos, -rug_wid/2, rug_thk/2])\n            rotate([90, 0, 0])\n                tassel_strand();\n        translate([pos, rug_wid/2, rug_thk/2])\n            rotate([90, 0, 0])\n                tassel_strand();\n    }\n}\n\n// Central decorative band\nmodule central_band() {\n    translate([0, 0, rug_thk/2 + pile_height/2 - 0.2])\n        cube([rug_len - 12, 8, 0.4], center=true);\n}\n\n// Assemble rug\nunion() {\n    rug_base();\n    rug_pile();\n    tassels();\n    central_band();\n}",
    "renders": true
  },
  {
    "household_item": "carpet",
    "openscad_code": "// Realistic 3D printable carpet model\n// Medium complexity with pile texture and tassels\n// Dimensions: 80mm x 50mm x 4mm total\n\n$fn=50;\n\n// Carpet parameters\ncarpet_length = 80;\ncarpet_width = 50;\ncarpet_thickness = 2;\npile_height = 1.5;\ntassel_length = 3;\ntassel_thickness = 1;\n\n// Main carpet body module\nmodule carpet_base() {\n    // Base layer\n    color(\"darkred\")\n    difference() {\n        cube([carpet_length, carpet_width, carpet_thickness]);\n        \n        // Carve underside for reduced material\n        translate([5, 5, 0])\n        cube([carpet_length-10, carpet_width-10, carpet_thickness-0.5]);\n    }\n}\n\n// Individual carpet pile fiber\nmodule carpet_pile(x, y) {\n    color(\"firebrick\")\n    translate([x, y, carpet_thickness])\n    cylinder(h = pile_height, d1 = 0.8, d2 = 0.5, $fn=8);\n}\n\n// Generate carpet pile texture\nmodule carpet_pile_field() {\n    for (x = [2:2:carpet_length-2]) {\n        for (y = [2:2:carpet_width-2]) {\n            carpet_pile(x, y);\n        }\n    }\n}\n\n// Tassel module for carpet edges\nmodule tassel(x, y, angle) {\n    color(\"darkred\")\n    rotate([0, 0, angle])\n    translate([x, y, 0])\n    difference() {\n        union() {\n            // Tassel base\n            cube([tassel_thickness*2, tassel_thickness, carpet_thickness]);\n            \n            // Tassel threads\n            for (i = [-0.5, 0, 0.5]) {\n                translate([i, tassel_thickness/2, carpet_thickness])\n                cylinder(h = tassel_length, d = 0.5, $fn=6);\n            }\n        }\n        \n        // Trim underside\n        translate([tassel_thickness, -tassel_thickness/2, -0.1])\n        cube([tassel_thickness*3, tassel_thickness*2, carpet_thickness+0.2]);\n    }\n}\n\n// Add tassels along carpet edges\nmodule add_tassels() {\n    // Long edges\n    for (x = [4:4:carpet_length-4]) {\n        tassel(x, 0, 0);\n        tassel(x, carpet_width, 180);\n    }\n    \n    // Short edges\n    for (y = [4:4:carpet_width-4]) {\n        tassel(0, y, 90);\n        tassel(carpet_length, y, -90);\n    }\n    \n    // Corner tassels\n    tassel(0, 0, 45);\n    tassel(carpet_length, 0, 135);\n    tassel(0, carpet_width, -45);\n    tassel(carpet_length, carpet_width, -135);\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color(\"crimson\")\n    translate([0, 0, carpet_thickness])\n    difference() {\n        // Border frame\n        cube([carpet_length, carpet_width, 0.5]);\n        \n        // Cut out center\n        translate([3, 3, -0.1])\n        cube([carpet_length-6, carpet_width-6, 0.7]);\n    }\n}\n\n// Assemble the complete carpet\nunion() {\n    carpet_base();\n    carpet_pile_field();\n    add_tassels();\n    border_pattern();\n}",
    "renders": true
  },
  {
    "household_item": "mat",
    "openscad_code": "// Realistic 3D-printable doormat\n// Medium complexity with woven texture and border detail\n\n// Overall dimensions\nmat_width = 80;\nmat_length = 120;\nmat_thickness = 5;\n\n// Border parameters\nborder_width = 5;\nborder_height = 1.5;\n\n// Woven texture parameters\nthread_width = 1.8;\nthread_height = 0.8;\nthread_spacing = 2.5;\nweave_offset = thread_spacing / 2;\n\n// Welcome text parameters\ntext_height = 1.2;\ntext_depth = 0.6;\n\n// Base mat body\nmodule base_mat() {\n    difference() {\n        // Main mat block\n        cube([mat_width, mat_length, mat_thickness]);\n        \n        // Rounded corners using cylinders\n        translate([border_width, border_width, -0.1])\n            cylinder(h=mat_thickness+0.2, r=border_width, $fn=20);\n        translate([mat_width-border_width, border_width, -0.1])\n            cylinder(h=mat_thickness+0.2, r=border_width, $fn=20);\n        translate([border_width, mat_length-border_width, -0.1])\n            cylinder(h=mat_thickness+0.2, r=border_width, $fn=20);\n        translate([mat_width-border_width, mat_length-border_width, -0.1])\n            cylinder(h=mat_thickness+0.2, r=border_width, $fn=20);\n    }\n}\n\n// Raised border around mat\nmodule border() {\n    // Bottom border\n    translate([-border_width, -border_width, mat_thickness])\n        cube([mat_width+2*border_width, border_width, border_height]);\n    \n    // Top border\n    translate([-border_width, mat_length, mat_thickness])\n        cube([mat_width+2*border_width, border_width, border_height]);\n    \n    // Left border\n    translate([-border_width, 0, mat_thickness])\n        cube([border_width, mat_length, border_height]);\n    \n    // Right border\n    translate([mat_width, 0, mat_thickness])\n        cube([border_width, mat_length, border_height]);\n}\n\n// Woven texture pattern\nmodule woven_texture() {\n    // Horizontal threads\n    for (y = [border_width:thread_spacing:mat_length-border_width]) {\n        for (x = [border_width:thread_spacing:mat_width-border_width]) {\n            translate([x, y, 0])\n                cube([thread_width, thread_height*2, thread_height]);\n        }\n    }\n    \n    // Vertical threads (woven over horizontal)\n    for (x = [border_width+weave_offset:thread_spacing:mat_width-border_width]) {\n        for (y = [border_width+weave_offset:thread_spacing:mat_length-border_width]) {\n            translate([x, y, thread_height/2])\n                cube([thread_height*2, thread_width, thread_height]);\n        }\n    }\n}\n\n// Welcome text\nmodule welcome_text() {\n    translate([mat_width/2, mat_length*0.75, mat_thickness+border_height+0.1]) {\n        rotate([0, 0, 0]) {\n            linear_extrude(height=text_depth) {\n                text(\"WELCOME\", \n                     size=12, \n                     font=\"Arial:style=Bold\", \n                     halign=\"center\", \n                     valign=\"center\");\n            }\n        }\n    }\n}\n\n// Assemble the mat\nunion() {\n    // Base mat\n    base_mat();\n    \n    // Border\n    border();\n    \n    // Woven texture on top surface\n    translate([0, 0, mat_thickness])\n        woven_texture();\n    \n    // Welcome text\n    welcome_text();\n}\n\n// Add drainage holes (optional for outdoor use)\nfor (x = [20:20:mat_width-20]) {\n    for (y = [20:20:mat_length-20]) {\n        translate([x, y, -0.1])\n            cylinder(h=mat_thickness+0.2, r=1.5, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pad",
    "openscad_code": "// Realistic 3D-printable pad (medium complexity)\n// Overall footprint ~60 x 45 mm\n\n// Parameters\npad_w = 60;\npad_h = 45;\nbase_t = 3;      // base thickness\ntop_t = 2;       // top cover thickness\nwall_t = 2;      // printable wall thickness\nkey_pitch = 6.5;\nkey_r = 2.5;\n\n// Main body\ndifference() {\n    union() {\n        // Lower base\n        translate([0, 0, base_t/2])\n            rounded_base(pad_w, pad_h, base_t, 4);\n\n        // Upper cover\n        translate([0, 0, base_t + top_t/2 + 0.1])\n            rounded_base(pad_w - 2*wall_t, pad_h - 2*wall_t, top_t, 4);\n    }\n    // Hollow cavity\n    translate([0, 0, wall_t])\n        rounded_base(pad_w - 2*wall_t, pad_h - 2*wall_t, base_t, 2);\n}\n\n// Key grid\nkeys_x = 4;\nkeys_y = 5;\nmodule key_column(col) {\n    for (row = [0:keys_y-1]) {\n        translate([\n            -((keys_x-1)*key_pitch)/2 + col*key_pitch,\n            -((keys_y-1)*key_pitch)/2 + row*key_pitch,\n            base_t + top_t/2 + 0.5\n        ])\n            cylinder(r = key_r, h = 0.8, $fn = 16);\n    }\n}\nfor (c = [0:keys_x-1]) key_column(c);\n\n// Navigation pad\nnav_pad();\n\n// Cable strain relief\ncable_grommet();\n\nmodule rounded_base(w, h, t, r) {\n    hull() {\n        for (dx = [-1, 1], dy = [-1, 1])\n            translate([dx*(w/2 - r), dy*(h/2 - r), 0])\n                cylinder(r = r, h = t, $fn = 20);\n    }\n}\n\nmodule nav_pad() {\n    // D-pad cross\n    translate([pad_w/2 - 12, 0, base_t + top_t/2 + 0.5]) {\n        hull() {\n            cube([3.5, 11, 0.8], center = true);\n            cube([11, 3.5, 0.8], center = true);\n        }\n    }\n    // Center button\n    translate([pad_w/2 - 12, 0, base_t + top_t/2 + 1.4])\n        cylinder(r = 3, h = 0.6, $fn = 16);\n}\n\nmodule cable_grommet() {\n    // Entry tube\n    translate([-pad_w/2 - 5, 0, base_t/2])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r1 = 4.5, r2 = 3.5, $fn = 20);\n    // Internal channel\n    translate([-pad_w/2 - 1, 0, base_t/2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 2.5, $fn = 20);\n}",
    "renders": true
  },
  {
    "household_item": "mirror",
    "openscad_code": "// Realistic 3D-printable mirror (medium complexity)\n// Overall size ≈ 70 mm wide\n\n// Parameters\nmirror_diameter = 60;      // mirror glass size\nrim_thickness = 4;         // metal rim thickness\nmirror_thickness = 2;      // glass thickness\nhandle_length = 45;        // handle length\nhandle_diameter = 10;      // handle diameter\nwall = 1.2;                // 3D-print wall thickness\nsegments = 64;             // cylinder smoothness\n\n// Utility module for rounded standoffs\nmodule rounded_cylinder(h, r, center=false) {\n    cylinder(h=h, r=r, center=center, $fn=segments);\n}\n\n// Mirror glass (thin disk)\nmodule glass() {\n    color(\"lightblue\", 0.7)\n    translate([0, 0, rim_thickness/2 - mirror_thickness/2])\n        cylinder(h=mirror_thickness, r=mirror_diameter/2, $fn=segments);\n}\n\n// Metal rim around glass\nmodule rim() {\n    color(\"silver\")\n    difference() {\n        // Outer ring\n        cylinder(h=rim_thickness, r=mirror_diameter/2 + wall, $fn=segments);\n        // Inner cut-out for glass\n        translate([0, 0, -0.1])\n            cylinder(h=rim_thickness+0.2, r=mirror_diameter/2, $fn=segments);\n    }\n}\n\n// Decorative back pattern (concentric rings)\nmodule back_pattern() {\n    for (i=[1:3]) {\n        color(\"gray\")\n        translate([0, 0, 0])\n            cylinder(h=0.6, r=mirror_diameter/2 + wall - i*3, $fn=segments);\n    }\n}\n\n// Handle with ergonomic grip rings\nmodule handle() {\n    color(\"silver\")\n    union() {\n        // Main shaft\n        translate([0, 0, -handle_length/2 - rim_thickness/2])\n            rotate([90, 0, 0])\n                rounded_cylinder(h=handle_length, r=handle_diameter/2);\n\n        // Grip rings\n        for (i=[0:3]) {\n            translate([0, 0, -rim_thickness/2 - 8 - i*8])\n                rotate([90, 0, 0])\n                    rounded_cylinder(h=2.5, r=handle_diameter/2 + 1);\n        }\n\n        // Transition collar to rim\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=6, r1=handle_diameter/2 + 2, r2=handle_diameter/2, $fn=segments);\n    }\n}\n\n// Wall-mount hook slot (for optional hanging)\nmodule hook_slot() {\n    // Simple keyhole slot\n    translate([0, 0, rim_thickness/2 + 0.1])\n        rotate([0, 0, 0])\n            linear_extrude(height=rim_thickness)\n                union() {\n                    circle(d=6, $fn=segments);\n                    translate([-3, 0, 0]) square([6, 3]);\n                }\n}\n\n// Assembly\nunion() {\n    // Mirror front\n    glass();\n    rim();\n    \n    // Mirror back details\n    translate([0, 0, rim_thickness])\n        union() {\n            back_pattern();\n            hook_slot();\n        }\n    \n    // Handle\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "frame",
    "openscad_code": "// Realistic Picture Frame – OpenSCAD\n// Outer printable footprint ~80 mm x 80 mm x 12 mm\n// Wall thickness 2 mm, no large overhangs, 45° chamfers for clean bridging\n\n$fa = 1;\n$fs = 0.5;\n\nframe_outer = 80;       // overall footprint\nframe_inner = 52;       // picture window\nframe_thick = 12;       // depth\nwall = 2;               // wall thickness\nchamfer = 2;            // 45° chamfer on outer edge\ngroove = 1;             // recess for picture + glass + backing\n\n// Main frame body\nmodule frame_body() {\n    difference() {\n        // outer block with chamfer\n        minkowski() {\n            cube([frame_outer, frame_outer, frame_thick], center = true);\n            cylinder(r = chamfer, h = 0.01, center = true);\n        }\n        // inner window\n        cube([frame_inner, frame_inner, frame_thick + 2], center = true);\n    }\n}\n\n// Decorative inner ridge\nmodule inner_ridge() {\n    translate([0, 0, frame_thick/2 - wall - 1]) {\n        difference() {\n            cube([frame_inner + wall*2, frame_inner + wall*2, 2], center = true);\n            cube([frame_inner, frame_inner, 3], center = true);\n        }\n    }\n}\n\n// Recessed groove for picture/glass/backing\nmodule picture_groove() {\n    translate([0, 0, -frame_thick/2 + groove]) {\n        cube([frame_inner + 0.2, frame_inner + 0.2, groove*2], center = true);\n    }\n}\n\n// Four corner standoffs so frame sits 1 mm proud\nmodule standoff() {\n    for (x = [-1, 1], y = [-1, 1]) {\n        translate([x*(frame_outer/2 - wall - 1), y*(frame_outer/2 - wall - 1), -frame_thick/2]) {\n            cylinder(h = 1, r = wall, center = false);\n        }\n    }\n}\n\n// Simple key-hole slot for wall hanging (centered on top edge)\nmodule hanger() {\n    slot_w = 3;\n    slot_h = 6;\n    translate([0, frame_outer/2 - wall, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = wall*2, r = slot_h, center = true);\n                translate([0, 0, -slot_h]) cube([slot_w*2, slot_h*2, slot_h*2], center = true);\n            }\n        }\n    }\n}\n\n// Assemble the frame\nunion() {\n    frame_body();\n    inner_ridge();\n    difference() {\n        frame_body(); // reuse to cut groove without extra cube\n        picture_groove();\n    }\n    standoff();\n    hanger();\n}",
    "renders": true
  },
  {
    "household_item": "screen",
    "openscad_code": "// Realistic 3D-printable screen (≈ 80 mm wide, medium complexity)\n\n// Overall dimensions\nscreen_w = 78;\nscreen_h = 46;\nscreen_d = 5;\nbezel = 3;\nbase_w = 50;\nbase_d = 30;\nbase_h = 12;\nstand_h = 35;\nstand_d = 10;\n\n// Wall / clearance parameters for 3D printing\nwall = 1.6;\nclear = 0.4;      // for moving / fitting parts\n$fn = 32;\n\nmodule screen_body() {\n    // Main display shell with rounded front\n    difference() {\n        union() {\n            // Outer bezel\n            translate([0,0,bezel/2])\n                cube([screen_w+bezel*2, screen_h+bezel*2, screen_d+bezel], center=true);\n\n            // Slight back bulge for electronics\n            translate([0,0,-screen_d/2-2])\n                cube([screen_w, screen_h, 4], center=true);\n        }\n\n        // Display opening\n        translate([0,0,screen_d/2+0.1])\n            cube([screen_w, screen_h, screen_d+2], center=true);\n\n        // Screw wells for assembly\n        for(x=[-1,1])\n            for(y=[-1,1])\n                translate([x*screen_w/2*0.75, y*screen_h/2*0.75, -screen_d/2])\n                    cylinder(h=screen_d+2, r=1.5, center=false);\n    }\n\n    // Actual screen surface (thin inset)\n    translate([0,0,screen_d/2-wall/2])\n        color(\"black\")\n        cube([screen_w-wall, screen_h-wall, wall], center=true);\n}\n\nmodule stand_neck() {\n    // Curved neck between screen and base\n    hull() {\n        translate([0, -stand_d/2, -stand_h/2])\n            rotate([0,90,0])\n                cylinder(h=stand_d, r=stand_d/2, center=true);\n        translate([0,  stand_d/2, -stand_h/2])\n            rotate([0,90,0])\n                cylinder(h=stand_d, r=stand_d/2, center=true);\n    }\n}\n\nmodule stand_base() {\n    // Oval base with slots for weight\n    difference() {\n        // Solid base\n        scale([1, 0.7, 1])\n            cylinder(h=base_h, r=base_w/2, center=true);\n\n        // Cable slot front\n        translate([0, base_w/2-2, -base_h/2])\n            cube([10, 10, base_h+1], center=true);\n\n        // Optional metal weight cavity (leave hollow)\n        translate([0,0,-base_h/2+wall])\n            scale([0.8,0.6,1])\n                cube([base_w-wall*2, base_d-wall*2, base_h-wall], center=true);\n    }\n\n    // Rubber feet\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*base_w/3, y*base_d/3, -base_h/2-wall/2])\n                cylinder(h=wall, r=2, center=true);\n}\n\n// Build the model\nunion() {\n    // Screen assembly\n    translate([0,0,stand_h/2+screen_d/2+bezel/2])\n        screen_body();\n\n    // Stand\n    stand_neck();\n    translate([0,0,-stand_h/2-base_h/2])\n        stand_base();\n}\n\n// Optional logo emboss\ntranslate([0, screen_h/2+bezel/2-wall/2, screen_d/2-wall/2-0.1])\n    linear_extrude(height=wall)\n        text(\"HD\", size=5, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "household_item": "partition",
    "openscad_code": "// Realistic Room-Partition with Medium Complexity\n// Dimensions for 3D printing (80 mm wide)\n\n// Overall size\noverall_w = 80;\noverall_h = 60;\noverall_d = 20;\n\n// Frame profile\nframe_profile = 4;\n\nmodule frame() {\n    // Bottom rail\n    translate([0, 0, 0])\n        cube([overall_w, frame_profile, frame_profile], center=false);\n\n    // Top rail\n    translate([0, 0, overall_h - frame_profile])\n        cube([overall_w, frame_profile, frame_profile], center=false);\n\n    // Left post\n    translate([0, 0, frame_profile])\n        cube([frame_profile, frame_profile, overall_h - 2 * frame_profile], center=false);\n\n    // Right post\n    translate([overall_w - frame_profile, 0, frame_profile])\n        cube([frame_profile, frame_profile, overall_h - 2 * frame_profile], center=false);\n}\n\nmodule panel() {\n    panel_th = 2;\n    inset = 3;\n\n    // Main panel board\n    translate([frame_profile + inset, 0, frame_profile + inset])\n        cube([overall_w - 2 * (frame_profile + inset), panel_th, overall_h - 2 * (frame_profile + inset)], center=false);\n\n    // Horizontal divider between upper and lower louvers\n    divider_h = 2;\n    translate([frame_profile + inset, panel_th / 2, overall_h / 2 - divider_h / 2])\n        cube([overall_w - 2 * (frame_profile + inset), divider_h, divider_h], center=false);\n}\n\nmodule louvers() {\n    louver_w = 1.5;\n    louver_h = 1.5;\n    gap = 3;\n    louver_d = 2;\n\n    // Lower louvers\n    for (z = [frame_profile + 3 : louver_h + gap : overall_h / 2 - 3]) {\n        for (x = [frame_profile + 3 : louver_w + gap : overall_w - frame_profile - 3 - louver_w]) {\n            translate([x, 0, z])\n                cube([louver_w, louver_d, louver_h], center=false);\n        }\n    }\n\n    // Upper louvers\n    for (z = [overall_h / 2 + 3 : louver_h + gap : overall_h - frame_profile - 3 - louver_h]) {\n        for (x = [frame_profile + 3 : louver_w + gap : overall_w - frame_profile - 3 - louver_w]) {\n            translate([x, 0, z])\n                cube([louver_w, louver_d, louver_h], center=false);\n        }\n    }\n}\n\nmodule feet() {\n    foot_w = 8;\n    foot_h = 3;\n    foot_d = overall_d + 4;\n\n    // Left foot\n    translate([-foot_w / 2 + frame_profile / 2, -foot_d / 2 + overall_d / 2, -foot_h])\n        cube([foot_w, foot_d, foot_h], center=false);\n\n    // Right foot\n    translate([overall_w - foot_w / 2 - frame_profile / 2, -foot_d / 2 + overall_d / 2, -foot_h])\n        cube([foot_w, foot_d, foot_h], center=false);\n}\n\n// Assemble the partition\nunion() {\n    frame();\n    panel();\n    louvers();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "divider",
    "openscad_code": "// Modular Realistic Office Divider\n// 90 mm wide, 60 mm tall, 20 mm deep – suitable for desktop use\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Overall outer shell\nmodule shell() {\n    difference() {\n        cube([90, 20, 60], center = true);\n        translate([0, 0, wall]) cube([90 - 2*wall, 20 - 2*wall, 60 - wall], center = true);\n    }\n}\n\n// Horizontal shelf\nmodule shelf(h) {\n    translate([0, 0, h]) cube([70, 20 - 2*wall, wall], center = true);\n}\n\n// Vertical slats for pen / note storage\nmodule slat(x) {\n    difference() {\n        translate([x, 0, 30]) cube([wall, 20, 30], center = true);\n        translate([x, 0, 30 + 5]) cube([wall + 0.2, 20 + 0.2, 10], center = true);\n    }\n}\n\n// Phone stand groove\nmodule phone_stand() {\n    difference() {\n        translate([30, 0, 25]) cube([25, 20, 15], center = true);\n        translate([30, 0, 25 + 5]) cube([23, 20 + 0.2, 10], center = true);\n    }\n}\n\n// Cable cutout at back\nmodule cable_cutout() {\n    translate([0, 10 - wall/2, 5]) rotate([90, 0, 0]) cylinder(h = wall*2, d = 8, center = true);\n}\n\n// Assembly\nunion() {\n    shell();\n\n    // Add two shelves\n    shelf(10);\n    shelf(40);\n\n    // Add three vertical slats\n    slat(-25);\n    slat(0);\n    slat(25);\n\n    // Add phone stand on upper shelf\n    phone_stand();\n\n    // Cut cable hole\n    difference() {\n        children();\n        cable_cutout();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "panel",
    "openscad_code": "// Realistic control panel for a 3D-printable electronics enclosure\n// Size: 80 x 50 mm base, 6 mm thick\n\n// Overall dimensions\nbase_w = 80;\nbase_h = 50;\nbase_d = 6;\n\n// Wall thickness\nwall = 2;\n\nmodule panel_base()\n{\n    difference()\n    {\n        // Main panel body\n        translate([0,0,base_d/2])\n            cube([base_w, base_h, base_d], center=true);\n        \n        // Large central recess for components\n        translate([0,0,base_d/2+0.1])\n            cube([base_w-2*wall, base_h-2*wall, base_d], center=true);\n    }\n}\n\n// Four corner mounting holes\nmodule mount_holes()\n{\n    hole_d = 3.2;  // M3 screw\n    inset = 6;     // distance from edge\n    \n    for(x=[-1,1])\n    for(y=[-1,1])\n        translate([x*(base_w/2-inset), y*(base_h/2-inset), 0])\n            cylinder(h=base_d+1, d=hole_d, center=true, $fn=20);\n}\n\n// LCD window\nmodule lcd_window()\n{\n    lcd_w = 30;\n    lcd_h = 22;\n    translate([0,base_h/4,0])\n    difference()\n    {\n        cube([lcd_w+4, lcd_h+4, base_d], center=true);\n        translate([0,0,1])\n            cube([lcd_w, lcd_h, base_d], center=true);\n    }\n}\n\n// Tactile button array\nmodule button_array()\n{\n    btn_d = 5;\n    btn_h = 2;\n    spacing = 10;\n    \n    // Button caps\n    for(i=[-1,0,1])\n        translate([i*spacing, -base_h/4, base_d+0.1])\n            cylinder(h=btn_h, d=btn_d, $fn=16);\n    \n    // Button holes in face\n    for(i=[-1,0,1])\n        translate([i*spacing, -base_h/4, 0])\n            cylinder(h=base_d+0.1, d=btn_d+1, $fn=16);\n}\n\n// Potentiometer knob shaft\nmodule pot()\n{\n    translate([-base_w/3, 0, base_d])\n    {\n        // Pot body recess\n        cylinder(h=4, d=12, $fn=32);\n        // Shaft hole\n        cylinder(h=base_d+1, d=6.4, $fn=20);\n    }\n}\n\n// LED indicators\nmodule leds()\n{\n    led_d = 3;\n    translate([base_w/3, 0, 0])\n    for(i=[-1,1])\n        translate([0,i*8,0])\n            cylinder(h=base_d+0.1, d=led_d+1, $fn=16);\n}\n\n// Assembly\ndifference()\n{\n    union()\n    {\n        panel_base();\n        lcd_window();\n    }\n    \n    mount_holes();\n    button_array();\n    pot();\n    leds();\n}",
    "renders": true
  },
  {
    "household_item": "shutter",
    "openscad_code": "// Realistic-style shutter, medium complexity\n// Outside dimensions: 80 mm wide × 60 mm tall × 6 mm thick\n// All parts printable without support\n\n$fa = 2; $fs = 0.5;\n\n// Overall parameters\nframe_w = 80;      // shutter width\nframe_h = 60;      // shutter height\nframe_t = 6;       // shutter thickness\nslat_w = frame_w - 8;\nslat_h = 5;\nslat_gap = 2;\nslat_n = 8;\nslat_t = 1.5;\npin_r = 1.2;\npin_l = slat_t + 2;\n\n// Main frame with rebates for slats\nmodule frame() {\n    difference() {\n        // Outer solid frame\n        cube([frame_w, frame_h, frame_t], center=true);\n        \n        // Recess for slats (2 mm deep)\n        translate([0,0, frame_t/2 - 1])\n            cube([slat_w + 2, slat_n*(slat_h+slat_gap) + 4, 2.2], center=true);\n        \n        // Pin holes on left side\n        for (i=[0:slat_n-1]) {\n            y = -frame_h/2 + 10 + i*(slat_h+slat_gap) + slat_h/2;\n            translate([-frame_w/2 + 2, y, 0])\n                rotate([0,90,0])\n                    cylinder(r=pin_r, h=4, center=true);\n        }\n        \n        // Pin holes on right side\n        for (i=[0:slat_n-1]) {\n            y = -frame_h/2 + 10 + i*(slat_h+slat_gap) + slat_h/2;\n            translate([ frame_w/2 - 2, y, 0])\n                rotate([0,90,0])\n                    cylinder(r=pin_r, h=4, center=true);\n        }\n    }\n}\n\n// Single slat with pins\nmodule slat() {\n    difference() {\n        // Slat body\n        cube([slat_w, slat_h, slat_t], center=true);\n        \n        // Lightening hole (optional)\n        translate([0,0,0])\n            cube([slat_w - 6, slat_h - 2, slat_t + 0.1], center=true);\n    }\n    \n    // Left pin\n    translate([-slat_w/2, 0, 0])\n        rotate([0,90,0])\n            cylinder(r=pin_r, h=pin_l, center=true);\n    \n    // Right pin\n    translate([ slat_w/2, 0, 0])\n        rotate([0,90,0])\n            cylinder(r=pin_r, h=pin_l, center=true);\n}\n\n// Tilt bar (connects all slats)\nmodule tilt_bar() {\n    bar_w = 5;\n    bar_h = slat_n*(slat_h+slat_gap) - slat_gap;\n    bar_t = 2;\n    \n    // Bar body\n    translate([slat_w/2 - 5, 0, slat_t/2 + 1])\n        cube([bar_w, bar_h, bar_t], center=true);\n    \n    // Connector hooks\n    for (i=[0:slat_n-1]) {\n        y = -bar_h/2 + i*(slat_h+slat_gap) + slat_h/2;\n        translate([slat_w/2 - 5, y, slat_t/2 + 1 + bar_t/2])\n            rotate([90,0,0])\n                cylinder(r=1.5, h=2, $fn=12);\n    }\n}\n\n// Assembly\nframe();\nfor (i=[0:slat_n-1]) {\n    y = -frame_h/2 + 10 + i*(slat_h+slat_gap) + slat_h/2;\n    translate([0, y, 0])\n        slat();\n}\ntilt_bar();",
    "renders": true
  },
  {
    "household_item": "blind",
    "openscad_code": "// Realistic Venetian Blind – 3D-printable, ~85 mm wide\n// All parts printable without supports (bridged slats, no over-angles)\n\n// global parameters\nwidth = 80;          // overall width\nheight = 60;         // overall height\ndepth = 30;          // overall depth\nslat_th = 1.2;       // slat thickness\nslat_gap = 3;        // vertical gap between slats\nwall = 2;            // wall thickness for frame\nnum_slats = 15;      // number of slats\n\n// derived\nslat_width = width - 2*wall;\nslat_depth = depth - 2*wall;\nslat_pitch = slat_th + slat_gap;\n\nmodule frame_left() {\n    // left vertical rail\n    translate([-width/2, 0, 0])\n        cube([wall, height, depth], center=true);\n}\n\nmodule frame_right() {\n    // right vertical rail\n    translate([width/2, 0, 0])\n        cube([wall, height, depth], center=true);\n}\n\nmodule top_rail() {\n    // horizontal top support\n    translate([0, height/2, 0])\n        cube([width, wall, depth], center=true);\n}\n\nmodule bottom_rail() {\n    // horizontal bottom support\n    translate([0, -height/2, 0])\n        cube([width, wall, depth], center=true);\n}\n\nmodule slat(h) {\n    // individual slat with realistic rounded front edge\n    translate([0, h, 0])\n    difference() {\n        // main slat body\n        cube([slat_width, slat_th, slat_depth], center=true);\n        // front rounded edge cut (half-cylinder)\n        translate([0, slat_th/2, slat_depth/2 - slat_th/2])\n            rotate([90,0,0])\n            cylinder(h=slat_width, r=slat_th/2, center=true, $fn=20);\n    }\n}\n\nmodule tilt_rod() {\n    // thin tilt rod running through slats\n    rod_r = 0.8;\n    translate([0, 0, slat_depth/2 + 2])\n        rotate([90,0,0])\n        cylinder(h=height, r=rod_r, center=true, $fn=8);\n}\n\nmodule ladder_tape_holes() {\n    // small square holes for ladder tape strings\n    for (y = [-height/2 + 5 : slat_pitch : height/2 - 5]) {\n        translate([slat_width/2 - 2, y, 0])\n            cube([2, 1.5, 1.5], center=true);\n        translate([-slat_width/2 + 2, y, 0])\n            cube([2, 1.5, 1.5], center=true);\n    }\n}\n\nmodule blind_assembly() {\n    // outer frame\n    union() {\n        frame_left();\n        frame_right();\n        top_rail();\n        bottom_rail();\n    }\n\n    // slats array\n    for (i = [0 : num_slats-1]) {\n        slat(-height/2 + wall + (i+0.5)*slat_pitch);\n    }\n\n    // tilt rod\n    tilt_rod();\n\n    // ladder tape holes\n    ladder_tape_holes();\n}\n\n// render the blind\nblind_assembly();",
    "renders": true
  },
  {
    "household_item": "shade",
    "openscad_code": "$fa = 4;\n$fs = 0.5;\n\n// overall dimensions\nshade_h = 45;\nshade_top_d = 60;\nshade_bot_d = 80;\nwall_th = 2;\n\n// lamp neck mount\nneck_d = 25;\nneck_h = 10;\n\n// vent slots\nvent_w = 8;\nvent_h = 8;\nvent_gap = 15;\n\n// rim lip\nlip_h = 3;\n\nmodule shade_shell()\n{\n    difference()\n    {\n        // outer cone\n        cylinder(h = shade_h, d1 = shade_top_d, d2 = shade_bot_d, center = false);\n\n        // inner cone (hollow out)\n        translate([0,0,wall_th])\n            cylinder(h = shade_h, d1 = shade_top_d - 2*wall_th, d2 = shade_bot_d - 2*wall_th, center = false);\n    }\n}\n\nmodule neck_mount()\n{\n    difference()\n    {\n        // cylinder\n        translate([0,0,shade_h - neck_h])\n            cylinder(h = neck_h, d = neck_d, center = false);\n\n        // hole\n        translate([0,0,shade_h - neck_h])\n            cylinder(h = neck_h + 1, d = neck_d - 2*wall_th, center = false);\n    }\n}\n\nmodule vents()\n{\n    // calculate how many vents fit around the cone\n    n = floor(PI * (shade_bot_d + shade_top_d)/2 / vent_gap);\n    for(i = [0 : n-1])\n    {\n        angle = i * 360 / n;\n        // approximate radius at mid-height for positioning\n        r_mid = (shade_top_d + shade_bot_d)/4;\n        translate([r_mid * cos(angle), r_mid * sin(angle), shade_h/2])\n            rotate([0, 0, angle])\n                translate([-vent_w/2, -shade_h/2, 0])\n                    cube([vent_w, shade_h, wall_th*2]);\n    }\n}\n\nmodule bottom_lip()\n{\n    difference()\n    {\n        // lip ring\n        translate([0, 0, 0])\n            cylinder(h = lip_h, d = shade_bot_d + 2*wall_th, center = false);\n        // remove inner\n        translate([0, 0, -1])\n            cylinder(h = lip_h + 2, d = shade_bot_d, center = false);\n    }\n}\n\n// assembly\nunion()\n{\n    shade_shell();\n    neck_mount();\n    vents();\n    bottom_lip();\n}",
    "renders": true
  },
  {
    "household_item": "rail",
    "openscad_code": "// Realistic style rail for 3D printing - medium complexity\n// Approx 80 mm long, 20 mm wide, 20 mm tall\n// Designed for FDM printing with no overhangs\n\n$fn = 32;\n\n// Main dimensions\nrail_length = 80;\nrail_width = 20;\nrail_height = 15;\nbase_thickness = 3;\npost_width = 4;\npost_height = 12;\npost_spacing = 10;\n\n// Module for rounded cube using cylinders and cubes\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, 0])\n    difference() {\n        cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        for(x = [0, size.x - 2*radius])\n            for(y = [0, size.y - 2*radius])\n                translate([x, y, -1])\n                    cylinder(h = size.z + 2, r = radius);\n    }\n    \n    translate([radius, 0, 0])\n    cube([size.x - 2*radius, size.y, size.z]);\n    \n    translate([0, radius, 0])\n    cube([size.x, size.y - 2*radius, size.z]);\n}\n\n// Module for a single post with rounded top\nmodule post() {\n    union() {\n        // Main post body\n        rounded_cube([post_width, post_width, post_height], 1);\n        \n        // Decorative top sphere\n        translate([post_width/2, post_width/2, post_height])\n            sphere(d = post_width * 0.8);\n    }\n}\n\n// Module for base rail with mounting holes\nmodule base_rail() {\n    difference() {\n        // Main base\n        rounded_cube([rail_length, rail_width, base_thickness], 2);\n        \n        // Mounting holes every 20mm\n        for(i = [10:20:rail_length-10])\n            translate([i, rail_width/2, -1])\n                cylinder(h = base_thickness + 2, r = 1.5, $fn = 16);\n    }\n}\n\n// Module for top rail with decorative groove\nmodule top_rail() {\n    difference() {\n        // Main top rail\n        rounded_cube([rail_length, rail_width * 0.6, rail_height - base_thickness - post_height], 2);\n        \n        // Decorative groove\n        translate([rail_length/2, rail_width * 0.3, -1])\n            cube([rail_length - 4, 2, rail_height - base_thickness - post_height + 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0])\n        base_rail();\n    \n    // Posts\n    for(i = [post_spacing:post_spacing:rail_length-post_spacing])\n        translate([i, rail_width/2 - post_width/2, base_thickness])\n            post();\n    \n    // Top rail\n    translate([0, rail_width * 0.2, base_thickness + post_height])\n        top_rail();\n}",
    "renders": true
  },
  {
    "household_item": "rod",
    "openscad_code": "// Realistic 3D-printable fishing rod segment (medium complexity)\n// Overall length ~80 mm, diameter ~8 mm\n\n$fn = 36;           // Smooth curves\n\n// ---- Parameters ----\nrod_length = 80;\nbase_diameter = 7.6;\ntip_diameter  = 1.8;\nhandle_length = 25;\nreel_seat_length = 15;\nguide_count = 5;\n\nwall = 1.0;         // Minimum printable wall thickness\nhollow = 2.0;       // Inner diameter reduction\n\n// ---- Main rod body (hollow tapered cylinder) ----\nmodule tapered_rod() {\n    difference() {\n        union() {\n            // Outer taper\n            cylinder(h = rod_length, \n                     r1 = base_diameter/2, \n                     r2 = tip_diameter/2, \n                     center = false);\n        }\n        // Hollow core\n        translate([0,0,-0.1])\n            cylinder(h = rod_length + 0.2, \n                     r1 = base_diameter/2 - wall,\n                     r2 = tip_diameter/2 - wall);\n    }\n}\n\n// ---- Handle grip with cork rings ----\nmodule handle_grip() {\n    rings = 9;\n    ring_h  = handle_length / rings;\n    ring_r  = base_diameter/2 + 0.5;\n    difference() {\n        for(i = [0:rings-1]) {\n            translate([0,0,i*ring_h])\n                difference() {\n                    cylinder(h = ring_h*0.9, r = ring_r, center = false);\n                    cylinder(h = ring_h, r = base_diameter/2, center = false);\n                }\n        }\n        // Flatten bottom ring for print bed\n        translate([0,0,-0.1]) cube([ring_r*2, ring_r*2, 0.2], center = true);\n    }\n}\n\n// ---- Reel seat with hood ----\nmodule reel_seat() {\n    seat_pos = handle_length;\n    translate([0,0,seat_pos])\n    difference() {\n        // Main seat tube\n        cylinder(h = reel_seat_length, r = base_diameter/2 + 1.2, center = false);\n        \n        // Cut slot for reel foot\n        translate([0,-base_diameter/2 - 1.2, reel_seat_length*0.3])\n            cube([base_diameter + 2.4, base_diameter + 2.4, reel_seat_length*0.4], center = true);\n        \n        // Internal bore\n        cylinder(h = reel_seat_length + 0.2, r = base_diameter/2, center = false);\n    }\n    \n    // Locking hood threads (simplified knurl)\n    translate([0,0,seat_pos + reel_seat_length - 4])\n    difference() {\n        cylinder(h = 4, r = base_diameter/2 + 1.5);\n        cylinder(h = 4.2, r = base_diameter/2 - 0.2);\n        \n        // Knurl ridges\n        for(a = [0:30:359])\n            rotate([0,0,a])\n                translate([base_diameter/2 + 1.0, -0.3, 0])\n                    cube([0.5, 0.6, 4]);\n    }\n}\n\n// ---- Line guides ----\nmodule guides() {\n    guide_spacing = (rod_length - handle_length - reel_seat_length) / (guide_count + 1);\n    foot_len = 3;\n    ring_r = 2 + 0.5 * (base_diameter - tip_diameter) * (1 - (i / (guide_count - 1)));\n    \n    for(i = [0:guide_count-1]) {\n        z = handle_length + reel_seat_length + (i + 1) * guide_spacing;\n        scale = (z - handle_length) / rod_length;\n        \n        translate([0,0,z])\n        union() {\n            // Guide foot left\n            rotate([90,0,0])\n                translate([-foot_len/2, 0, 0])\n                    cube([foot_len, 1.2, tip_diameter/2 + 1*scale]);\n            \n            // Guide foot right\n            rotate([90,0,0])\n                translate([foot_len/2, 0, 0])\n                    scale([-1,1,1])\n                        cube([foot_len, 1.2, tip_diameter/2 + 1*scale]);\n            \n            // Guide ring\n            rotate([90,0,0])\n                cylinder(h = 1.2, r = 1.2 + 0.5*scale, center = true);\n            \n            // Ring hole\n            rotate([90,0,0])\n                cylinder(h = 1.4, r = 0.5 + 0.3*scale, center = true);\n        }\n    }\n}\n\n// ---- Assembly ----\nunion() {\n    tapered_rod();\n    handle_grip();\n    reel_seat();\n    guides();\n}",
    "renders": true
  },
  {
    "household_item": "peg",
    "openscad_code": "// Realistic 3D-printable peg with medium complexity\n// Overall height ~65 mm, base disk Ø40 mm, shaft Ø8 mm tapering to Ø6 mm\n\n// Parameters\n$fn = 36;  // smooth curves\npeg_height = 65;\nbase_d = 40;\nbase_h = 4;\ngrip_d = 18;\ngrip_h = 10;\nshaft_top_d = 6;\nshaft_bot_d = 8;\nshaft_h = 44;\ncollar_d = 12;\ncollar_h = 2;\nknurl_w = 2;\nknurl_d = 0.5;\nknurl_count = 12;\n\n// Main module\nmodule peg() {\n    union() {\n        // Base disk with slight chamfer\n        translate([0, 0, 0])\n            cylinder(d1 = base_d - 2, d2 = base_d, h = base_h);\n\n        // Collar ring\n        translate([0, 0, base_h])\n            cylinder(d = collar_d, h = collar_h);\n\n        // Tapered shaft\n        translate([0, 0, base_h + collar_h])\n            cylinder(d1 = shaft_bot_d, d2 = shaft_top_d, h = shaft_h);\n\n        // Grip head\n        translate([0, 0, base_h + collar_h + shaft_h])\n            cylinder(d1 = shaft_top_d, d2 = grip_d, h = grip_h);\n\n        // Knurled grip rings – subtracted grooves\n        for (i = [0 : knurl_count - 1]) {\n            rotate([0, 0, i * 360 / knurl_count])\n                translate([grip_d/2 - knurl_d/2, -knurl_w/2, base_h + collar_h + shaft_h])\n                    cube([knurl_d, knurl_w, grip_h], center = false);\n        }\n\n        // Central hole for optional screw (2 mm diameter)\n        translate([0, 0, -1])\n            cylinder(d = 2, h = peg_height + 2, $fn = 12);\n    }\n}\n\n// Optional support ring underneath collar for printing stability\nmodule support_ring() {\n    difference() {\n        translate([0, 0, base_h])\n            cylinder(d = collar_d + 4, h = 1);\n        translate([0, 0, base_h - 0.01])\n            cylinder(d = collar_d, h = 1.1);\n    }\n}\n\npeg();\nsupport_ring();",
    "renders": true
  },
  {
    "household_item": "hook",
    "openscad_code": "// Realistic coat hook - medium complexity\n// Overall size ~70mm wide x 80mm high x 35mm deep\n\n$fn = 36;  // Smooth curves\n\n// Wall plate with screw holes\nmodule wall_plate() {\n    difference() {\n        // Main plate\n        translate([-35, 0, 0])\n            cube([70, 10, 5], center=true);\n        \n        // Screw holes (4mm diameter)\n        translate([-25, 0, 2.5])\n            cylinder(h=5.1, r=2);\n        translate([25, 0, 2.5])\n            cylinder(h=5.1, r=2);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for (x = [-20, 0, 20]) {\n        translate([x, 5, 2.5])\n            cube([8, 10, 5], center=true);\n    }\n}\n\n// Hook arm with ergonomic curve\nmodule hook_arm() {\n    difference() {\n        union() {\n            // Upper curved section\n            translate([0, 5, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h=25, r1=5, r2=7);\n            \n            // Main arm\n            translate([0, -20, 2.5])\n                cube([12, 50, 5], center=true);\n            \n            // Lower curved return\n            translate([0, -45, 2.5])\n                rotate([0, -90, 0])\n                    cylinder(h=15, r1=7, r2=5);\n            \n            // End ball for safety\n            translate([0, -52.5, 2.5])\n                sphere(r=6);\n        }\n        \n        // Hollow out center for material savings\n        translate([0, -20, 2.5])\n            cube([8, 40, 4.5], center=true);\n    }\n}\n\n// Grip texture pattern\nmodule grip_pattern() {\n    for (i = [0:5]) {\n        rotate([90, 0, 0])\n            translate([0, -20 - i*7, 3.5])\n                cube([12, 1.5, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    wall_plate();\n    ribs();\n    hook_arm();\n    grip_pattern();\n}\n\n// Add fillets for strength\ntranslate([0, 5, 5])\n    rotate([90, 0, 0])\n        cylinder(h=10, r1=3, r2=5);\ntranslate([0, -45, 5])\n    rotate([90, 0, 0])\n        cylinder(h=10, r1=5, r2=3);",
    "renders": true
  },
  {
    "household_item": "hanger",
    "openscad_code": "// Realistic 3D-printable clothes hanger\n// Medium complexity: ~80 lines, recognizable, functional features\n\n$fn = 36; // smoother curves\n\nmodule hook()\n{\n    // Main hook body\n    rotate([0,90,0])\n    difference()\n    {\n        union()\n        {\n            cylinder(h=12, d1=8, d2=8);          // base cylinder\n            translate([0,0,12])\n            rotate_extrude(angle=270, $fn=64)\n            translate([14,0,0])\n            circle(d=8);                        // curved hook\n            translate([14,0,34])\n            sphere(d=8);                        // tip sphere\n        }\n        // Hollow out hook for material saving\n        rotate([0,90,0])\n        cylinder(h=50, d=5);                    // central hole\n    }\n}\n\nmodule shoulder_bar()\n{\n    // Main horizontal bar with thickness for printability\n    difference()\n    {\n        hull()\n        {\n            translate([-45,0,0]) cube([90,10,5], center=true);\n            translate([-45,0,-2.5]) cube([90,8,2], center=true);\n        }\n        // Grooves for straps\n        for(i=[-30,-10,10,30])\n            translate([i,0,2.5])\n            cube([2,12,1], center=true);\n    }\n}\n\nmodule shoulder_arm(left=1)\n{\n    // Angled arm with rounded end\n    translate([left*45,0,0])\n    rotate([0,0,left*-20])\n    union()\n    {\n        // Arm body\n        hull()\n        {\n            translate([0,0,0]) cube([30,10,5], center=true);\n            translate([15,0,0]) cube([10,8,5], center=true);\n        }\n        // Rounded end\n        translate([25,0,0])\n        rotate([0,90,0])\n        cylinder(h=10, d1=8, d2=0);             // tapered end\n    }\n}\n\nmodule hanger_body()\n{\n    // Central support\n    difference()\n    {\n        cube([10,10,35], center=true);          // main post\n        translate([0,0,15])\n        cylinder(h=10, d=5);                    // hanging hole\n    }\n    \n    // Attach hook\n    translate([0,0,17.5])\n    hook();\n    \n    // Attach shoulder arms\n    shoulder_arm(1);\n    shoulder_arm(-1);\n    \n    // Attach horizontal bar\n    translate([0,0,-17.5])\n    shoulder_bar();\n}\n\n// Render the complete hanger\nhanger_body();",
    "renders": true
  },
  {
    "household_item": "bracket",
    "openscad_code": "// Bracket for 90-degree corner mount\n// Overall size: 60 x 60 x 30 mm\n// Wall thickness: 4 mm, print-friendly angles\n\n// Parameters\nwall_thickness = 4;\nbracket_size = 60;\nheight = 30;\nhole_diameter = 5.2;\ncounterbore_diameter = 10;\ncounterbore_depth = 3;\nrib_depth = 2;\n\n// Main L-shaped body\nmodule bracket_body() {\n    difference() {\n        union() {\n            // Horizontal arm\n            translate([0, 0, 0])\n                cube([bracket_size, wall_thickness, height]);\n            // Vertical arm\n            translate([0, 0, 0])\n                cube([wall_thickness, bracket_size, height]);\n        }\n        \n        // Inside corner chamfer\n        translate([wall_thickness, wall_thickness, 0])\n            rotate([0, 0, 45])\n            cube([wall_thickness*sqrt(2), wall_thickness*2, height]);\n    }\n}\n\n// Ribs for strength\nmodule ribs() {\n    for(i = [1:5]) {\n        // Horizontal ribs\n        translate([i*10, 0, height/2])\n            cube([4, wall_thickness, height/2]);\n        // Vertical ribs\n        translate([0, i*10, height/2])\n            cube([wall_thickness, 4, height/2]);\n    }\n}\n\n// Mounting holes\nmodule holes() {\n    // Horizontal arm holes\n    for(pos = [15, 45]) {\n        translate([pos, -1, height - counterbore_depth])\n            cylinder(h = counterbore_depth + 1, d = counterbore_diameter, $fn = 20);\n        translate([pos, -1, 0])\n            cylinder(h = height + 2, d = hole_diameter, $fn = 20);\n    }\n    \n    // Vertical arm holes\n    for(pos = [15, 45]) {\n        translate([-1, pos, height - counterbore_depth])\n            rotate([0, 90, 0])\n            cylinder(h = counterbore_depth + 1, d = counterbore_diameter, $fn = 20);\n        translate([-1, pos, 0])\n            rotate([0, 90, 0])\n            cylinder(h = height + 2, d = hole_diameter, $fn = 20);\n    }\n}\n\n// Base fillet\nmodule base_fillet() {\n    difference() {\n        // Horizontal fillet\n        translate([wall_thickness, -0.1, 0])\n            cube([bracket_size - wall_thickness, wall_thickness + 0.2, wall_thickness]);\n        // Vertical fillet\n        translate([-0.1, wall_thickness, 0])\n            cube([wall_thickness + 0.2, bracket_size - wall_thickness, wall_thickness]);\n    }\n}\n\n// Top edge chamfers\nmodule top_chamfers() {\n    // Horizontal arm chamfer\n    difference() {\n        translate([0, 0, height - wall_thickness])\n            cube([bracket_size, wall_thickness, wall_thickness]);\n        translate([0, -0.1, height - wall_thickness])\n            rotate([0, -45, 0])\n            cube([bracket_size + 0.2, wall_thickness + 0.2, wall_thickness*sqrt(2)]);\n    }\n    \n    // Vertical arm chamfer\n    difference() {\n        translate([0, 0, height - wall_thickness])\n            cube([wall_thickness, bracket_size, wall_thickness]);\n        translate([-0.1, 0, height - wall_thickness])\n            rotate([-45, 0, 0])\n            cube([wall_thickness + 0.2, bracket_size + 0.2, wall_thickness*sqrt(2)]);\n    }\n}\n\n// Assemble bracket\nunion() {\n    bracket_body();\n    ribs();\n    base_fillet();\n    top_chamfers();\n    difference() {\n        children();\n        holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "knob",
    "openscad_code": "// Realistic Medium-Complexity Knob\n// External diameter ≈ 48 mm, height ≈ 28 mm, shaft hole Ø6 mm\n// Optimized for FDM printing (no steep overhangs)\n\n$fn = 36;               // Smoother curves without extreme resolution\n\n// Main module\nmodule realisticKnob() {\n    difference() {\n        union() {\n            // 1. Flared finger-grip base\n            translate([0, 0, 1])\n                cylinder(h = 8, d1 = 42, d2 = 48, center = false);\n\n            // 2. Central domed cap\n            translate([0, 0, 9])\n                scale([1, 1, 0.7])\n                sphere(d = 46);\n\n            // 3. Concentric grip rings (raised ridges)\n            for (i = [1:3]) {\n                translate([0, 0, 1.5 + (i - 1) * 2.2])\n                    cylinder(h = 1.8, d = 46 - (i - 1) * 4, center = false);\n            }\n\n            // 4. Indicator ridge pointer\n            translate([0, 24, 5])\n                rotate([90, 0, 0])\n                cylinder(h = 10, d1 = 6, d2 = 2, center = true);\n        }\n\n        // 5. Central D-shaft hole (standard 6 mm potentiometer / encoder)\n        translate([0, 0, -1])\n            cylinder(h = 30, d = 6.2, center = false);\n        translate([0, -3.1, -1])\n            cube([6.2, 3.1, 30], center = false);\n    }\n\n    // 6. Light knurling pattern on top dome (subtractive for grip)\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([0, 11, 13])\n                rotate([90, 0, 0])\n                    cylinder(h = 22, d = 1.2, center = true);\n    }\n}\n\n// Render the knob upright\nrealisticKnob();",
    "renders": true
  },
  {
    "household_item": "handle",
    "openscad_code": "// Realistic medium-complexity 3D-printable handle\n// Overall size: ~85 mm x 35 mm x 30 mm\n\n// Parameters\nwall = 2.5;               // wall thickness for 3D printing\ngr_d = 12;                // grip diameter\ngr_l = 55;                // grip length\nfl_d = 32;                // flange diameter\nfl_h = 5;                 // flange height\nscr_d = 6;                // screw hole diameter\nscr_h = 10;               // screw hole depth\nrib_w = 1.5;              // rib width\nribs = 12;                // number of grip ribs\n\n// Main module\nmodule handle() {\n    difference() {\n        union() {\n            // Flange base\n            translate([0, 0, fl_h/2])\n                cylinder(d = fl_d, h = fl_h, $fn = 60);\n\n            // Grip body\n            translate([0, 0, fl_h + gr_l/2])\n                cylinder(d = gr_d, h = gr_l, $fn = 60);\n\n            // Rounded grip end\n            translate([0, 0, fl_h + gr_l])\n                sphere(d = gr_d, $fn = 60);\n\n            // Center web\n            translate([0, 0, fl_h + gr_l/2])\n                rotate([90, 0, 0])\n                    cylinder(d = gr_d - wall*2, h = gr_l, $fn = 60);\n\n            // Grip ribs (for better hold)\n            for (i = [0 : ribs-1]) {\n                rotate([0, 0, i * 360/ribs])\n                    translate([gr_d/2 - rib_w/2, 0, fl_h + rib_w/2])\n                        rotate([90, 0, 0])\n                            cylinder(d = rib_w, h = gr_l - rib_w*2, $fn = 12);\n            }\n        }\n\n        // Screw hole 1\n        translate([0, 0, -1])\n            cylinder(d = screw_d, h = screw_h + 1, $fn = 32);\n\n        // Screw hole 2 (90° offset)\n        translate([0, 0, -1])\n            rotate([0, 0, 90])\n                cylinder(d = screw_d, h = screw_h + 1, $fn = 32);\n\n        // Internal hollow\n        difference() {\n            translate([0, 0, fl_h + gr_l/2])\n                cylinder(d = gr_d - wall*2, h = gr_l, $fn = 60);\n\n            translate([0, 0, fl_h + gr_l])\n                sphere(d = gr_d - wall*2, $fn = 60);\n        }\n    }\n\n    // Optional chamfer on flange bottom for printing\n    translate([0, 0, fl_h/2])\n        cylinder(d1 = fl_d, d2 = fl_d - 2, h = fl_h/2, $fn = 60);\n}\n\n// Render\nhandle();",
    "renders": true
  },
  {
    "household_item": "pull",
    "openscad_code": "// Realistic Drawer Pull - Medium Complexity\n// Overall size: 96mm wide x 30mm deep x 28mm tall\n\n// Base plate dimensions\nbase_w = 80;\nbase_d = 18;\nbase_h = 3;\n\n// Handle dimensions\nhandle_w = 96;\nhandle_d = 26;\nhandle_h = 18;\nhandle_r = handle_h/2;\n\n// Screw hole spacing and diameter\nhole_spacing = 64;\nhole_d = 4;\ncounter_d = 8;\ncounter_h = 2;\n\n// Rounding radius for edges\nedge_r = 2;\n\nmodule rounded_cube(size, r) {\n    x = size.x; y = size.y; z = size.z;\n    \n    hull() {\n        translate([ r,  r,  r]) sphere(r);\n        translate([x-r,  r,  r]) sphere(r);\n        translate([ r, y-r,  r]) sphere(r);\n        translate([x-r, y-r,  r]) sphere(r);\n        translate([ r,  r, z-r]) sphere(r);\n        translate([x-r,  r, z-r]) sphere(r);\n        translate([ r, y-r, z-r]) sphere(r);\n        translate([x-r, y-r, z-r]) sphere(r);\n    }\n}\n\nmodule screw_hole() {\n    difference() {\n        cylinder(d=counter_d, h=counter_h, $fn=20);\n        translate([0,0,-0.1]) cylinder(d=hole_d, h=counter_h+0.2, $fn=20);\n    }\n}\n\nmodule base_plate() {\n    difference() {\n        rounded_cube([base_w, base_d, base_h], edge_r);\n        \n        // Left screw hole\n        translate([-hole_spacing/2, base_d/2, -0.1])\n            screw_hole();\n        \n        // Right screw hole\n        translate([hole_spacing/2, base_d/2, -0.1])\n            screw_hole();\n    }\n}\n\nmodule handle_bar() {\n    // Main curved handle body\n    difference() {\n        hull() {\n            // Left rounded end\n            translate([-handle_w/2 + handle_r, handle_d/2, handle_h/2])\n                sphere(r=handle_r);\n            \n            // Right rounded end\n            translate([handle_w/2 - handle_r, handle_d/2, handle_h/2])\n                sphere(r=handle_r);\n            \n            // Center cylinder\n            translate([0, handle_d/2, handle_h/2])\n                rotate([90,0,0])\n                    cylinder(r=handle_r, h=handle_w - 2*handle_r, $fn=32);\n        }\n        \n        // Hollow out underside\n        translate([0, handle_d/2 + 2, handle_h/2])\n            rotate([90,0,0])\n                cylinder(r=handle_r - 3, h=handle_w, $fn=32);\n        \n        // Flatten bottom for printing\n        translate([0, handle_d/2 + handle_r, -1])\n            cube([handle_w + 2, handle_r*2, handle_h + 2], center=true);\n    }\n    \n    // Add grip ridges\n    for(x = [-handle_w/2 + 8 : 8 : handle_w/2 - 8]) {\n        translate([x, handle_d/2 - 1, handle_h/2 + handle_r - 1])\n            rotate([90,0,0])\n                cylinder(r1=1.5, r2=0.5, h=2, $fn=16);\n    }\n}\n\n// Assemble the pull\nunion() {\n    // Base plate\n    translate([0, 0, 0])\n        base_plate();\n    \n    // Handle\n    translate([0, -handle_d/2 + base_d/2, base_h])\n        handle_bar();\n}",
    "renders": true
  },
  {
    "household_item": "latch",
    "openscad_code": "// Realistic Door Latch - Medium Complexity\n// Overall dimensions: ~70mm x 40mm x 25mm\n\n$fn = 32;\n\n// Main body dimensions\nbody_w = 60;\nbody_h = 35;\nbody_d = 20;\nwall_t = 3;\n\n// Latch bolt dimensions\nbolt_l = 35;\nbolt_d = 12;\nbolt_head_r = bolt_d * 0.7;\n\n// Handle dimensions\nhandle_l = 30;\nhandle_d = 8;\nhandle_clear = 15;\n\n// Mounting holes\nscrew_d = 4;\nscrew_head_d = 7;\nscrew_shaft_l = 10;\n\nmodule main_body() {\n    difference() {\n        // Main rectangular body\n        cube([body_w, body_h, body_d], center=true);\n        \n        // Cavity for mechanism\n        translate([0, 0, -wall_t/2])\n            cube([body_w - 2*wall_t, body_h - 2*wall_t, body_d + 1], center=true);\n        \n        // Bolt passage hole\n        translate([body_w/2 - bolt_l/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=body_h + 2, r=bolt_d/2 + 1, center=true);\n        \n        // Handle shaft hole\n        translate([-body_w/2 + 15, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=body_d + 2, r=handle_d/2 + 1, center=true);\n    }\n}\n\nmodule latch_bolt() {\n    difference() {\n        union() {\n            // Main bolt shaft\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=bolt_l, r=bolt_d/2, center=true);\n            \n            // Tapered bolt head\n            translate([bolt_l/2 + bolt_head_r/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=bolt_head_r, r1=bolt_head_r, r2=0, center=true);\n        }\n        \n        // Spring cavity\n        translate([-bolt_l/2 + 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=bolt_d, r=bolt_d/3, center=true);\n        \n        // Cam follower slot\n        translate([-bolt_l/2 + 10, 0, 0])\n            cube([bolt_d*1.5, bolt_d/2, bolt_d*1.5], center=true);\n    }\n}\n\nmodule handle_assembly() {\n    // Handle shaft\n    rotate([90, 0, 0])\n        cylinder(h=body_d/2 + handle_l, r=handle_d/2);\n    \n    // Cam plate\n    translate([0, 0, body_d/2 + handle_l - 2])\n        rotate([90, 0, 0])\n            cylinder(h=4, r=handle_d + 2);\n    \n    // Cam lobe\n    translate([0, -bolt_d/2 - 2, body_d/2 + handle_l])\n        rotate([90, 0, 0])\n            cylinder(h=bolt_d/2, r=bolt_d/2);\n    \n    // Handle grip\n    translate([0, 0, body_d/2 + handle_l + handle_d/2])\n        rotate([90, 0, 0])\n            cylinder(h=handle_d, r=handle_d*1.5);\n    \n    // Grip ridges\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, handle_d*1.5 - 1, body_d/2 + handle_l + handle_d/2])\n                cube([handle_d*3, 2, handle_d], center=true);\n    }\n}\n\nmodule mounting_holes() {\n    // Front mounting holes\n    for(pos = [[-body_w/2 + 10, body_h/2 - 10], \n               [body_w/2 - 10, body_h/2 - 10],\n               [-body_w/2 + 10, -body_h/2 + 10],\n               [body_w/2 - 10, -body_h/2 + 10]]) {\n        translate([pos[0], pos[1], 0])\n            rotate([0, 0, 0])\n                cylinder(h=body_d + 1, r=screw_d/2, center=true);\n        \n        // Countersink\n        translate([pos[0], pos[1], -body_d/2 - 1])\n            rotate([0, 0, 0])\n                cylinder(h=screw_head_d/2, r1=screw_head_d/2, r2=screw_d/2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with mounting holes\n    difference() {\n        main_body();\n        mounting_holes();\n    }\n    \n    // Latch bolt\n    translate([body_w/2 - bolt_l/2, 0, 0])\n        rotate([0, 90, 0])\n            latch_bolt();\n    \n    // Handle assembly\n    translate([-body_w/2 + 15, 0, 0])\n        handle_assembly();\n    \n    // Strengthening ribs\n    for(i = [-1, 1]) {\n        translate([0, i * (body_h/2 - wall_t), body_d/2 - wall_t/2])\n            cube([body_w - 2*wall_t, wall_t, wall_t], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "hinge",
    "openscad_code": "// Realistic Medium-Complexity Hinge\n// Overall size ~70 mm wide, 60 mm tall, 20 mm thick\n// All parts have 1.5 mm wall thickness and 0.4 mm clearances for 3D printing\n\n$fn = 50;  // Smooth curves\n\n// Basic dimensions\nhinge_width = 70;\nleaf_height = 60;\nleaf_thickness = 6;\npin_d = 6;\nknuckle_d = 10;\nknuckle_h = 14;\nknuckle_gap = 0.4;\nnum_knuckles = 5;\nleaf_hole_d = 4;\nleaf_hole_spacing = 15;\n\n// Helper module for screw clearance holes\nmodule screw_hole(d, h) {\n    cylinder(d = d, h = h, $fn = 20);\n}\n\n// One leaf of the hinge\nmodule leaf() {\n    difference() {\n        // Main leaf plate\n        cube([hinge_width/2 - knuckle_d/2 - 2, leaf_height, leaf_thickness], center = false);\n        \n        // Chamfer bottom inside edge\n        translate([hinge_width/2 - knuckle_d/2 - 2 - 3, 0, leaf_thickness])\n            rotate([0, 180, 0])\n                cylinder(d = 6, h = 3, $fn = 20);\n        \n        // Screw holes\n        for (y = [leaf_hole_spacing:leaf_hole_spacing:leaf_height - leaf_hole_spacing]) {\n            translate([leaf_hole_spacing, y, -1])\n                screw_hole(leaf_hole_d, leaf_thickness + 2);\n            translate([hinge_width/2 - knuckle_d/2 - 2 - leaf_hole_spacing, y, -1])\n                screw_hole(leaf_hole_d, leaf_thickness + 2);\n        }\n        \n        // Rounded top corners\n        translate([0, leaf_height, 0])\n            sphere(d = leaf_thickness*2, $fn = 20);\n        translate([hinge_width/2 - knuckle_d/2 - 2, leaf_height, 0])\n            sphere(d = leaf_thickness*2, $fn = 20);\n    }\n}\n\n// Knuckles along one leaf\nmodule knuckles(offset = 0) {\n    for (i = [0:1:num_knuckles - 1]) {\n        y = i * (leaf_height / (num_knuckles - 1));\n        translate([hinge_width/2 - knuckle_d/2, y - knuckle_h/2, 0]) {\n            difference() {\n                cylinder(d = knuckle_d, h = knuckle_h, $fn = 20);\n                translate([0, 0, -1])\n                    cylinder(d = pin_d + knuckle_gap, h = knuckle_h + 2, $fn = 20);\n            }\n        }\n    }\n}\n\n// Pin for the hinge\nmodule pin() {\n    color(\"silver\")\n    translate([0, leaf_height/2, 0])\n        cylinder(d = pin_d, h = leaf_height + 1, $fn = 20);\n}\n\n// Complete hinge assembly\nmodule hinge() {\n    // Left leaf with knuckles\n    translate([0, 0, 0]) {\n        leaf();\n        knuckles(0);\n    }\n    \n    // Right leaf with offset knuckles\n    translate([hinge_width, 0, 0])\n        mirror([1, 0, 0]) {\n            leaf();\n            knuckles(1);\n        }\n}\n\n// Render with pin\nhinge();\ntranslate([hinge_width/2, 0, 0])\n    pin();",
    "renders": true
  },
  {
    "household_item": "bolt",
    "openscad_code": "// Realistic medium-complexity bolt\n// M10x60 hex-head bolt with partial thread\n\n$fn = 36;               // Global circle resolution\n\n// Dimensions (all in mm)\nbolt_len        = 60;\nhead_h          = 6.4;\nhead_dia        = 16;\nshank_dia       = 10;\nthread_len      = 40;\nthread_pitch    = 1.5;\nchamfer         = 0.5;\n\n// Hex profile generator (flat-to-flat diameter)\nmodule hex_profile(d, h) {\n    // Side length of hexagon\n    side_len = d / sqrt(3);\n    linear_extrude(height = h)\n        polygon([\n            for (i = [0:5])\n                [side_len * cos(i*60), side_len * sin(i*60)]\n        ]);\n}\n\n// 60° V-thread profile\nmodule thread_profile(p) {\n    h = p * cos(30);         // Thread height\n    translate([shank_dia/2, 0])\n        polygon([\n            [0, 0],\n            [0, h],\n            [-h * tan(30), h],\n            [-h * tan(30), -p + h],\n            [0, -p]\n        ]);\n}\n\n// Single helical thread turn\nmodule thread_turn(p, r, turns = 1) {\n    for (i = [0:5:359])\n        rotate([0, 0, i])\n            translate([0, 0, i/360 * p])\n                thread_profile(p);\n}\n\n// Threaded section\nmodule threads(length, pitch) {\n    turns = length / pitch;\n    for (t = [0:1:turns-1])\n        translate([0, 0, t * pitch])\n            thread_turn(pitch, shank_dia/2, 1);\n}\n\n// Bolt head with slight chamfer\nmodule bolt_head() {\n    difference() {\n        // Main hex head\n        hex_profile(head_dia, head_h);\n\n        // Top chamfer\n        translate([0, 0, head_h - chamfer])\n            cylinder(h = chamfer, r1 = head_dia/2, r2 = head_dia/2 - chamfer);\n    }\n}\n\n// Shank with lead-in radius\nmodule shank() {\n    union() {\n        // Main shank\n        cylinder(h = bolt_len - thread_len, r = shank_dia/2);\n\n        // Lead-in radius under head\n        translate([0, 0, bolt_len - thread_len])\n            cylinder(h = 2, r1 = shank_dia/2, r2 = shank_dia/2 - 0.5);\n    }\n}\n\n// Fully assembled bolt\nmodule bolt() {\n    union() {\n        // Head\n        bolt_head();\n\n        // Shank\n        translate([0, 0, head_h])\n            shank();\n\n        // Threads\n        translate([0, 0, head_h + bolt_len - thread_len])\n            threads(thread_len, thread_pitch);\n    }\n}\n\n// Render the bolt\nbolt();",
    "renders": true
  },
  {
    "household_item": "lock",
    "openscad_code": "// Realistic 3D printable padlock (medium complexity)\n// Overall size: ~60mm x 45mm x 15mm\n\n// Main body module\nmodule lock_body() {\n    // Outer shroud\n    difference() {\n        // Main block\n        cube([50, 40, 12], center=true);\n        \n        // Keyway slot\n        translate([0, -10, 5])\n            cube([6, 20, 3], center=true);\n        \n        // Pin chambers (5 pins)\n        for(i = [-2:1:2]) {\n            translate([i*6, 15, 5])\n                cylinder(h=3, r=2.5, $fn=16);\n        }\n    }\n    \n    // Reinforcement ridges\n    translate([0, 0, 6])\n        cube([52, 42, 2], center=true);\n    \n    // Bottom plate\n    translate([0, 0, -7])\n        cube([45, 35, 2], center=true);\n}\n\n// Shackle module\nmodule shackle() {\n    // Main shackle arc\n    difference() {\n        // Outer arc\n        translate([0, 10, 0])\n            rotate([90, 0, 0])\n                cylinder(h=30, r1=20, r2=20, $fn=64);\n        \n        // Inner hollow\n        translate([0, 10, 0])\n            rotate([90, 0, 0])\n                cylinder(h=32, r1=16, r2=16, $fn=64);\n    }\n    \n    // Left shank\n    translate([0, 10, 15])\n        cylinder(h=25, r=4, $fn=16);\n    \n    // Right shank with notch\n    translate([15, 10, 15])\n        cylinder(h=20, r=4, $fn=16);\n    \n    translate([15, 10, 30])\n        cube([8, 8, 2], center=true);\n}\n\n// Key module (for visual reference)\nmodule key() {\n    translate([0, -30, -5])\n        rotate([0, 90, 0])\n            union() {\n                // Key bow\n                translate([-15, 0, 0])\n                    cylinder(h=3, r=10, $fn=32);\n                \n                // Key shaft\n                translate([0, 0, -1.5])\n                    cube([30, 6, 3], center=true);\n                \n                // Key cuts (bittings)\n                translate([8, 0, -3])\n                    cube([4, 5, 3], center=true);\n                translate([12, 0, -2])\n                    cube([4, 4, 3], center=true);\n                translate([16, 0, -4])\n                    cube([4, 6, 3], center=true);\n            }\n}\n\n// Assembly\nunion() {\n    // Main lock body\n    lock_body();\n    \n    // Shackle (positioned for locked state)\n    translate([0, -5, 6])\n        shackle();\n    \n    // Optional key\n    // key();\n}",
    "renders": true
  },
  {
    "household_item": "key",
    "openscad_code": "// Realistic 3D printable key (medium complexity)\n// Overall length ~70 mm, printable without supports\n\n// Key parameters\nblade_length = 50;\nblade_width = 7;\nblade_thickness = 2.5;\nhead_radius = 12;\nhead_thickness = 4;\nshaft_length = 8;\nshaft_width = 6;\ncutter_width = 1.2;\ncutter_depth = 1.5;\nwall_thickness = 1.5;\n\n// Main key body\nmodule key_head() {\n    // Circular head with hole\n    difference() {\n        cylinder(h=head_thickness, r=head_radius, $fn=60);\n        translate([0, 0, -0.1])\n            cylinder(h=head_thickness+0.2, r=head_radius*0.4, $fn=40);\n    }\n    \n    // Reinforcement rim\n    translate([0, 0, -0.5])\n        cylinder(h=1, r1=head_radius+1, r2=head_radius, $fn=60);\n}\n\n// Key shaft\nmodule key_shaft() {\n    // Tapered shaft\n    hull() {\n        translate([0, 0, 0])\n            cube([shaft_width, head_thickness, shaft_length], center=true);\n        translate([0, 0, shaft_length])\n            cube([blade_width, blade_thickness, 2], center=true);\n    }\n}\n\n// Blade with grooves\nmodule key_blade() {\n    // Main blade body\n    translate([0, 0, shaft_length + blade_length/2])\n        cube([blade_width, blade_thickness, blade_length], center=true);\n    \n    // Edge grooves for pins\n    for (i = [0:4]) {\n        translate([0, 0, shaft_length + 5 + i*9])\n            cube([cutter_width, blade_thickness+0.2, 6], center=true);\n    }\n    \n    // Side grooves for warding\n    translate([blade_width/2 - cutter_width/2, 0, shaft_length + blade_length*0.4])\n        cube([cutter_width, blade_thickness, 12]);\n    translate([-blade_width/2 + cutter_width/2, 0, shaft_length + blade_length*0.7])\n        cube([cutter_width, blade_thickness, 10]);\n    \n    // Tip profile\n    translate([0, 0, shaft_length + blade_length - 1])\n        difference() {\n            cube([blade_width, blade_thickness, 2], center=true);\n            translate([0, 0, 1])\n                cube([blade_width+2, blade_thickness+2, 2], center=true);\n        }\n}\n\n// Key grip pattern\nmodule grip_pattern() {\n    // Raised ridges for grip\n    for (angle = [0:30:150]) {\n        rotate([0, 0, angle])\n        translate([0, head_radius*0.7, head_thickness/2])\n            cube([head_radius*0.3, 1.5, head_thickness], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    key_head();\n    key_shaft();\n    key_blade();\n    \n    // Grip pattern on head\n    grip_pattern();\n    \n    // Chamfer edges for better printing\n    translate([0, 0, head_thickness])\n        cylinder(h=0.5, r1=head_radius, r2=head_radius-0.5, $fn=60);\n}",
    "renders": true
  },
  {
    "household_item": "ledge",
    "openscad_code": "// Realistic 3D-printable stone-look ledge\n// Dimensions: 80mm wide, 20mm deep, 15mm high\n\n$fn = 32; // smooth curves\n\nmodule stone_block(w, d, h, x=0, y=0, z=0, r=0) {\n    // individual weathered stone with rounded top edges\n    translate([x, y, z]) rotate([0, 0, r]) {\n        difference() {\n            // main block with slight taper\n            hull() {\n                cube([w, d, h], center=true);\n                translate([0, 0, 0.3]) cube([w*0.95, d*0.95, h], center=true);\n            }\n            // subtle top rounding\n            translate([0, 0, h/2-0.2]) scale([1, 1, 0.3]) sphere(r=w*0.5, center=true);\n        }\n    }\n}\n\nmodule mortar_gaps() {\n    // thin negative spaces for mortar lines\n    // vertical gaps\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, 0, 7.5]) cube([1.2, 22, 15]);\n    }\n    // horizontal gaps\n    for (z = [2.5, 7.5, 12.5]) {\n        translate([0, 0, z]) cube([82, 22, 1.2]);\n    }\n}\n\nmodule ledge_base() {\n    union() {\n        // bottom course\n        stone_block(20, 18, 5, -30, 0, 2.5);\n        stone_block(20, 18, 5, -10, 0, 2.5);\n        stone_block(20, 18, 5,  10, 0, 2.5);\n        stone_block(20, 18, 5,  30, 0, 2.5);\n        \n        // middle course staggered\n        stone_block(20, 18, 5, -20, 0, 7.5);\n        stone_block(20, 18, 5,   0, 0, 7.5);\n        stone_block(20, 18, 5,  20, 0, 7.5);\n        \n        // top course\n        stone_block(40, 18, 5, -20, 0, 12.5);\n        stone_block(40, 18, 5,  20, 0, 12.5);\n    }\n}\n\nmodule drainage_slots() {\n    // small drainage holes for outdoor use\n    for (x = [-25, -5, 15, 35]) {\n        translate([x, 0, 15]) rotate([90, 0, 0]) \n            cylinder(h=3, d=2, $fn=12);\n    }\n}\n\n// main model\ndifference() {\n    ledge_base();\n    mortar_gaps();\n}\ndrainage_slots();",
    "renders": true
  },
  {
    "household_item": "mantel",
    "openscad_code": "// Realistic Mantel - Medium Complexity\n// Designed for 3D printing at ~80mm width\n\n$fa = 2;\n$fs = 0.5;\n\nmodule mantel(width=80, height=50, depth=25, wall=2) {\n    // Main mantel shelf\n    difference() {\n        translate([0, 0, height-5])\n            cube([width, depth, 5], center=true);\n        \n        // Hollow out shelf for material savings\n        translate([0, 0, height-4])\n            cube([width-wall*2, depth-wall*2, 3], center=true);\n    }\n    \n    // Mantel legs\n    leg_width = 8;\n    leg_depth = depth - 4;\n    \n    // Left leg\n    translate([-width/2 + leg_width/2, 0, height/2 - 2.5])\n        difference() {\n            cube([leg_width, leg_depth, height-5], center=true);\n            // Hollow leg\n            translate([-width/2 + leg_width/2, 0, height/2 - 2.5])\n                cube([leg_width-wall*2, leg_depth-wall*2, height-7], center=true);\n        }\n    \n    // Right leg\n    translate([width/2 - leg_width/2, 0, height/2 - 2.5])\n        difference() {\n            cube([leg_width, leg_depth, height-5], center=true);\n            translate([width/2 - leg_width/2, 0, height/2 - 2.5])\n                cube([leg_width-wall*2, leg_depth-wall*2, height-7], center=true);\n        }\n    \n    // Mantel header/face\n    header_height = 8;\n    translate([0, 0, height - header_height/2 - 5])\n        difference() {\n            cube([width, depth, header_height], center=true);\n            // Hollow header\n            translate([0, 0, height - header_height/2 - 5])\n                cube([width-wall*2, depth-wall*2, header_height-wall], center=true);\n        }\n    \n    // Decorative corbels\n    corbel_width = 6;\n    corbel_height = 12;\n    \n    // Left corbel\n    translate([-width/2 + leg_width + corbel_width/2, 0, height - corbel_height/2 - 5])\n        difference() {\n            cube([corbel_width, depth-2, corbel_height], center=true);\n            // Tapered corbel\n            translate([-width/2 + leg_width + corbel_width/2, 0, height - corbel_height/2 - 5])\n                cube([corbel_width-1, depth-4, corbel_height-1], center=true);\n        }\n    \n    // Right corbel\n    translate([width/2 - leg_width - corbel_width/2, 0, height - corbel_height/2 - 5])\n        difference() {\n            cube([corbel_width, depth-2, corbel_height], center=true);\n            translate([width/2 - leg_width - corbel_width/2, 0, height - corbel_height/2 - 5])\n                cube([corbel_width-1, depth-4, corbel_height-1], center=true);\n        }\n    \n    // Mantel top molding detail\n    mold_height = 2;\n    for (i = [-1, 1]) {\n        translate([i * (width/2 - 2), 0, height - mold_height/2])\n            cube([4, depth+1, mold_height], center=true);\n    }\n}\n\nmantel();",
    "renders": true
  },
  {
    "household_item": "sill",
    "openscad_code": "// Realistic 3D-printable window sill\n// Dimensions optimized for FDM printing (max 100 mm)\n\n$fn=30; // Smooth curves\n\n// Overall dimensions\nsill_length = 95;\nsill_depth = 40;\nsill_thickness = 3;\nnose_protrusion = 5;\n\n// Grooves for water runoff\ngroove_width = 2;\ngroove_depth = 1;\ngroove_spacing = 8;\ngroove_count = floor(sill_length / groove_spacing) - 1;\n\n// Mounting holes\nhole_d = 4;\nhole_inset = 8;\n\n// Sloped top angle for drainage\nslope_angle = 5; // degrees\n\nmodule sill_body() {\n    // Main block, sloped top\n    difference() {\n        union() {\n            // Base block\n            cube([sill_length, sill_depth, sill_thickness]);\n            \n            // Sloped top layer\n            translate([0, 0, sill_thickness])\n            rotate([slope_angle, 0, 0])\n            translate([0, -sill_depth*sin(slope_angle), 0])\n            cube([sill_length, sill_depth, sill_thickness]);\n        }\n        \n        // Cut off bottom overhang\n        translate([0, 0, sill_thickness])\n        cube([sill_length, sill_depth, sill_thickness*2]);\n    }\n}\n\nmodule water_grooves() {\n    for (i = [1:groove_count]) {\n        translate([i * groove_spacing, 0, sill_thickness + 0.1])\n        cube([groove_width, sill_depth, groove_depth]);\n    }\n}\n\nmodule nose_profile() {\n    // Rounded front edge\n    translate([-1, sill_depth - nose_protrusion, 0])\n    union() {\n        // Quarter cylinder for rounded nose\n        rotate([0, -90, 0])\n        cylinder(h = sill_length + 2, r = nose_protrusion);\n        \n        // Fill underneath\n        translate([0, -nose_protrusion, 0])\n        cube([sill_length + 2, nose_protrusion, nose_protrusion]);\n    }\n}\n\nmodule mounting_holes() {\n    // Left and right mounting holes\n    for (x = [hole_inset, sill_length - hole_inset]) {\n        translate([x, sill_depth/2, -1])\n        cylinder(h = sill_thickness + 2, d = hole_d);\n    }\n}\n\nmodule back_lip() {\n    // Small lip to prevent water running back to wall\n    translate([-1, -1, sill_thickness - 1])\n    cube([sill_length + 2, 2, 2]);\n}\n\n// Assemble the sill\ndifference() {\n    union() {\n        sill_body();\n        nose_profile();\n        water_grooves();\n        back_lip();\n    }\n    \n    // Remove mounting holes\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "household_item": "threshold",
    "openscad_code": "// Realistic 3D-printable door threshold\n// Medium complexity (≈80 lines)\n\n// Overall dimensions\nthreshold_length = 90;\nthreshold_width = 25;\nthreshold_height = 8;\ngroove_depth = 1.5;\ngroove_width = 3;\ngroove_spacing = 6;\nchamfer = 1.5;\n\n// Screw holes\nscrew_d = 4;\nscrew_h = threshold_height;\nscrew_inset = 12;\n\n// Main body with chamfered edges\nmodule main_body() {\n    difference() {\n        // Slightly rounded top via chamfer\n        hull() {\n            translate([chamfer, chamfer, 0])\n                cube([threshold_length-2*chamfer, threshold_width-2*chamfer, threshold_height]);\n            translate([chamfer, chamfer, chamfer])\n                cube([threshold_length-2*chamfer, threshold_width-2*chamfer, threshold_height-chamfer]);\n        }\n        \n        // Grooves for grip\n        for (i = [groove_spacing/2 : groove_spacing : threshold_length-groove_spacing/2])\n            translate([i, 0, -groove_depth])\n                cube([groove_width, threshold_width, groove_depth*2]);\n    }\n}\n\n// Drain channel underneath\nmodule drain_channel() {\n    difference() {\n        translate([-1, -1, -0.5])\n            cube([threshold_length+2, threshold_width+2, 2]);\n        translate([2, 2, 0])\n            cube([threshold_length-4, threshold_width-4, 2]);\n    }\n}\n\n// Screw holes (countersunk)\nmodule screw_holes() {\n    for (x = [screw_inset, threshold_length-screw_inset])\n        translate([x, threshold_width/2, 0]) {\n            cylinder(h=screw_h+2, d=screw_d, $fn=16);\n            translate([0,0,screw_h])\n                cylinder(h=2, d1=screw_d*1.8, d2=screw_d, $fn=16);\n        }\n}\n\n// Assembly\nunion() {\n    difference() {\n        main_body();\n        screw_holes();\n    }\n    drain_channel();\n}\n\n// Small alignment pegs for print bed\ntranslate([5, 5, -0.2])\n    cylinder(h=0.2, d=2, $fn=8);\ntranslate([threshold_length-5, 5, -0.2])\n    cylinder(h=0.2, d=2, $fn=8);",
    "renders": true
  },
  {
    "household_item": "step",
    "openscad_code": "// Realistic single step for 3D printing\n// External size: ~65 mm wide x 60 mm deep x 25 mm high\n\n// Parameters\nstep_w   = 65;    // overall width\nstep_d   = 60;    // overall depth\nstep_h   = 25;    // overall height\nwall_t   = 3;     // wall / rib thickness\nrib_n    = 3;     // number of internal ribs\ntread_w  = 2;     // width of each tread line\ntread_d  = 0.5;   // depth of tread grooves\ntread_pitch = 4;  // spacing between tread lines\n\n// Main solid block\nmodule step_solid() {\n    difference() {\n        // outer block with chamfered top edges\n        hull() {\n            translate([wall_t, wall_t, 0])\n                cube([step_w - 2*wall_t, step_d - 2*wall_t, step_h]);\n            translate([0, 0, step_h])\n                cube([step_w, step_d, 0.1]);\n        }\n\n        // chamfers on front top edge\n        translate([-1, -1, step_h - 2])\n            rotate([0, 45, 0])\n                cube([step_w + 2, 3, 3]);\n        translate([-1, -1, step_h - 2])\n            rotate([45, 0, 0])\n                cube([3, step_d + 2, 3]);\n    }\n}\n\n// Hollow out interior\nmodule step_hollow() {\n    difference() {\n        step_solid();\n        // inside cavity\n        translate([wall_t, wall_t, wall_t])\n            cube([step_w - 2*wall_t, step_d - 2*wall_t, step_h - wall_t]);\n        // front edge fillet removal\n        translate([wall_t - 1, wall_t - 1, -1])\n            rotate([0, 0, -45])\n                cube([step_w + 2, wall_t + 1, step_h + 2]);\n    }\n}\n\n// Internal strengthening ribs\nmodule ribs() {\n    for (i = [1 : rib_n - 1]) {\n        x = i * (step_w - 2*wall_t) / rib_n + wall_t;\n        translate([x - wall_t/2, wall_t, wall_t])\n            cube([wall_t, step_d - 2*wall_t, step_h - 2*wall_t]);\n    }\n}\n\n// Tread pattern on top surface\nmodule tread_pattern() {\n    n_lines = floor((step_d - 2*wall_t) / tread_pitch);\n    offset  = ((step_d - 2*wall_t) - n_lines * tread_pitch) / 2;\n    for (i = [0 : n_lines - 1]) {\n        y = offset + wall_t + i * tread_pitch;\n        translate([wall_t, y, step_h - tread_d])\n            cube([step_w - 2*wall_t, tread_w, tread_d]);\n    }\n}\n\n// Assembly\nstep_hollow();\nribs();\ntread_pattern();",
    "renders": true
  },
  {
    "household_item": "riser",
    "openscad_code": "// Realistic medium-complexity riser for 3D printing\n// Overall size: 80 mm wide × 60 mm deep × 30 mm high\n// Wall thickness: 3 mm throughout\n\n$fn = 36;\n\nmodule riser_base() {\n    // Main platform with rounded corners\n    difference() {\n        // Solid base block\n        minkowski() {\n            cube([80, 60, 3], center = true);\n            cylinder(h = 0.01, r = 4);\n        }\n        \n        // Recessed center\n        translate([0, 0, 1.5])\n            cube([74, 54, 3.1], center = true);\n    }\n}\n\nmodule riser_walls() {\n    // Four vertical walls with draft angle for printing\n    for (x = [-37.5, 37.5])\n        translate([x, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r1 = 3, r2 = 2.5);\n    \n    for (y = [-27.5, 27.5])\n        translate([0, y, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r1 = 3, r2 = 2.5);\n}\n\nmodule corner_braces() {\n    // Corner reinforcement gussets\n    for (x = [-35, 35])\n    for (y = [-25, 25]) {\n        translate([x, y, 7.5])\n            rotate([0, 0, x > 0 ? 0 : 90])\n                linear_extrude(height = 15)\n                    polygon(points = [[0, 0], [7, 0], [0, 7]]);\n    }\n}\n\nmodule cable_slot() {\n    // Rear cable management slot\n    translate([0, -30, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 4);\n    \n    translate([0, -30.1, 15])\n        cube([8.1, 0.2, 30], center = true);\n}\n\nmodule anti_slip_pads() {\n    // Rubber-like pads on bottom (modeled as slight protrusions)\n    for (x = [-30, 30])\n    for (y = [-20, 20]) {\n        translate([x, y, -1.6])\n            cylinder(h = 1, r = 3);\n    }\n}\n\nmodule top_surface() {\n    // Top platform with grip texture\n    difference() {\n        // Main top plate\n        translate([0, 0, 30])\n            cube([80, 60, 3], center = true);\n        \n        // Grip pattern grooves\n        for (i = [-35:5:35])\n            translate([i, 0, 31.6])\n                cube([1, 58, 0.5], center = true);\n        \n        for (j = [-25:5:25])\n            translate([0, j, 31.6])\n                cube([78, 1, 0.5], center = true);\n    }\n}\n\n// Assemble complete riser\nunion() {\n    riser_base();\n    riser_walls();\n    corner_braces();\n    cable_slot();\n    anti_slip_pads();\n    top_surface();\n}",
    "renders": true
  },
  {
    "household_item": "tread",
    "openscad_code": "// Realistic tire tread segment - medium complexity\n// Single tread block designed for 3D printing\n// Dimensions: 80mm x 20mm x 12mm\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule tread_block() {\n    // Base structure with rounded edges\n    difference() {\n        // Main block body\n        translate([0, 0, 5])\n        minkowski() {\n            cube([70, 16, 6], center=true);\n            sphere(1);\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 5.5])\n        cube([60, 12, 7], center=true);\n    }\n}\n\nmodule longitudinal_ribs() {\n    // Three main longitudinal ribs with rounded tops\n    for(x = [-25, 0, 25]) {\n        translate([x, 0, 0])\n        difference() {\n            // Rib body\n            translate([0, 0, 9])\n            scale([1, 1, 0.8])\n            cylinder(h=4, r1=4, r2=3.5);\n            \n            // Groove between ribs\n            translate([0, 0, 8])\n            cylinder(h=5, r1=1.5, r2=1.5);\n        }\n    }\n}\n\nmodule transverse_sipes() {\n    // Small transverse cuts for grip\n    for(y = [-6, -3, 0, 3, 6]) {\n        translate([0, y, 9.5])\n        rotate([90, 0, 0])\n        scale([0.3, 3, 1])\n        cylinder(h=10, r=0.5);\n    }\n}\n\nmodule shoulder_blocks() {\n    // Reinforced shoulder blocks\n    for(side = [-1, 1]) {\n        translate([side * 35, 0, 6])\n        difference() {\n            // Shoulder block\n            translate([0, 0, 3])\n            minkowski() {\n                cube([6, 18, 6], center=true);\n                sphere(1);\n            }\n            \n            // Lateral grooves\n            for(x = [-1.5, 0, 1.5]) {\n                translate([x, 0, 3])\n                cube([0.8, 20, 7], center=true);\n            }\n        }\n    }\n}\n\nmodule tread_pattern() {\n    // Combine all tread elements\n    union() {\n        tread_block();\n        longitudinal_ribs();\n        transverse_sipes();\n        shoulder_blocks();\n    }\n}\n\n// Generate the complete tread segment\ntread_pattern();",
    "renders": true
  },
  {
    "household_item": "banister",
    "openscad_code": "// Realistic Banister - Medium Complexity\n// 3D printable, approx 80mm tall\n\n$fn=32;\n\n// Main parameters\npost_height = 80;\npost_width = 8;\nhandrail_height = 75;\nhandrail_width = 6;\nhandrail_depth = 10;\nnum_bars = 5;\nbar_diameter = 4;\nbar_spacing = 12;\n\n// Base post with decorative top\nmodule post() {\n    // Main post body\n    translate([0,0,post_height/2])\n        cube([post_width, post_width, post_height], center=true);\n    \n    // Decorative top sphere\n    translate([0,0,post_height+post_width/2])\n        sphere(d=post_width*1.2);\n    \n    // Base plate\n    translate([0,0,2])\n        cube([post_width*2, post_width*2, 4], center=true);\n}\n\n// Handrail with rounded edges\nmodule handrail() {\n    // Main rail\n    translate([0,0,handrail_height])\n        cube([handrail_depth, post_width*num_bars*bar_spacing/handrail_width, handrail_width], center=true);\n    \n    // Rounded top\n    translate([0,0,handrail_height+handrail_width/2])\n        scale([handrail_depth*0.9, post_width*num_bars*bar_spacing/handrail_width*0.9, 1])\n            sphere(d=handrail_width);\n}\n\n// Decorative baluster bar\nmodule baluster() {\n    // Main bar\n    translate([0,0,post_height/2-10])\n        cylinder(d=bar_diameter, h=post_height-20);\n    \n    // Decorative rings\n    for(i=[1:3]) {\n        translate([0,0,i*15])\n            cylinder(d=bar_diameter*1.5, h=2);\n    }\n}\n\n// Assembly\nmodule banister() {\n    // Left post\n    post();\n    \n    // Right post\n    translate([0, (num_bars-1)*bar_spacing, 0])\n        post();\n    \n    // Handrail connecting posts\n    translate([0, (num_bars-1)*bar_spacing/2, 0])\n        rotate([0,90,0])\n            handrail();\n    \n    // Balusters\n    for(i=[1:num_bars-2]) {\n        translate([0, i*bar_spacing, 0])\n            baluster();\n    }\n    \n    // Bottom rail\n    translate([0, (num_bars-1)*bar_spacing/2, 15])\n        cube([handrail_depth*0.7, (num_bars-1)*bar_spacing, 4], center=true);\n}\n\n// Render the complete banister\nbanister();",
    "renders": true
  },
  {
    "household_item": "baluster",
    "openscad_code": "// Realistic Baluster - Medium Complexity\n// Includes base, shaft, collar, and capital with fluting and fillets\n\n// Overall parameters\nheight = 90;\nbase_d = 18;\ntop_d = 14;\n\n// Base parameters\nbase_height = 8;\nbase_top_d = 14;\n\n// Shaft parameters\nshaft_height = 60;\nshaft_bottom_d = 12;\nshaft_top_d = 10;\n\n// Collar parameters\ncollar_height = 4;\ncollar_d = 14;\n\n// Capital parameters\ncapital_height = 18;\ncapital_top_d = 16;\ncapital_neck_d = 12;\n\n// Fluting parameters\nnum_flutes = 8;\nflute_depth = 0.6;\n\n// Fillet parameters\nfillet_r = 0.8;\n\nmodule fillet(radius, height) {\n    intersection() {\n        cylinder(h=height, r=radius, $fn=20);\n        translate([0, 0, -radius]) sphere(r=radius, $fn=20);\n    }\n}\n\nmodule base() {\n    difference() {\n        cylinder(h=base_height, d=base_d, $fn=32);\n        // Add slight taper to base\n        translate([0, 0, -0.1]) cylinder(h=base_height+0.2, d1=base_d-2, d2=base_d, $fn=32);\n    }\n}\n\nmodule shaft() {\n    // Main shaft with taper\n    cylinder(h=shaft_height, d1=shaft_bottom_d, d2=shaft_top_d, $fn=32);\n    \n    // Add fluting\n    rotate([0, 0, 360/(num_flutes*2)]) \n    for(i=[0:num_flutes-1]) {\n        rotate([0, 0, i*360/num_flutes]) {\n            translate([shaft_bottom_d/2 - flute_depth - 0.5, 0, 0]) \n            cube([flute_depth*2 + 1, 1, shaft_height], center=true);\n        }\n    }\n}\n\nmodule collar() {\n    cylinder(h=collar_height, d=collar_d, $fn=32);\n}\n\nmodule capital() {\n    difference() {\n        // Main capital shape with taper\n        cylinder(h=capital_height, d1=capital_neck_d, d2=capital_top_d, $fn=32);\n        \n        // Add decorative ring\n        translate([0, 0, capital_height/2]) \n        cylinder(h=3, d=capital_top_d+2, $fn=32);\n        \n        // Hollow out center slightly\n        translate([0, 0, -0.1]) \n        cylinder(h=capital_height+0.2, d=capital_neck_d-2, $fn=32);\n    }\n}\n\nmodule baluster() {\n    union() {\n        // Base with fillet\n        translate([0, 0, 0]) base();\n        translate([0, 0, base_height]) \n        scale([1, 1, 0.5]) \n        fillet(fillet_r, fillet_r*2);\n        \n        // Shaft\n        translate([0, 0, base_height+fillet_r]) shaft();\n        \n        // Collar with fillets\n        translate([0, 0, base_height+fillet_r+shaft_height]) \n        scale([1, 1, 0.5]) \n        fillet(fillet_r, fillet_r*2);\n        translate([0, 0, base_height+fillet_r+shaft_height+fillet_r]) collar();\n        translate([0, 0, base_height+fillet_r+shaft_height+fillet_r+collar_height]) \n        scale([1, 1, 0.5]) \n        fillet(fillet_r, fillet_r*2);\n        \n        // Capital\n        translate([0, 0, base_height+fillet_r+shaft_height+fillet_r+collar_height+fillet_r]) capital();\n    }\n}\n\n// Center the baluster\ntranslate([0, 0, 0]) baluster();",
    "renders": true
  },
  {
    "household_item": "post",
    "openscad_code": "// Realistic 3D-printable post with base, shaft, and cap\n// Overall height ~80 mm, suitable for tabletop scenery or architectural model\n\n// Parameters\npost_height = 80;\nbase_height = 8;\nshaft_height = 60;\ncap_height = 12;\nbase_dia = 30;\nshaft_dia = 18;\ncap_dia = 22;\nwall = 1.6;               // 3D-print friendly wall thickness\nsegments = 32;            // smooth curves\n\nmodule rounded_cylinder(h, r1, r2, center=false) {\n    // Custom cylinder with chamfered top and bottom edges\n    difference() {\n        cylinder(h=h, r1=r1, r2=r2, center=center, $fn=segments);\n        // Remove sharp edge chamfers\n        translate([0,0,-0.01]) \n            cylinder(h=0.8, r1=r1-0.8, r2=r1, center=false, $fn=segments);\n        translate([0,0,h-0.8+0.01]) \n            cylinder(h=0.8, r1=r2, r2=r2-0.8, center=false, $fn=segments);\n    }\n}\n\nmodule post_base() {\n    // Flared circular base with shallow concentric rings for realism\n    difference() {\n        rounded_cylinder(base_height, base_dia/2, base_dia/2, center=false);\n        // Hollow bottom cavity for printing stability\n        translate([0,0,wall])\n            cylinder(h=base_height-wall, r=base_dia/2-wall, $fn=segments);\n        // Decorative concentric grooves on top surface\n        for (r=[base_dia/2-2, base_dia/2-4, base_dia/2-6]) {\n            translate([0,0,base_height-0.5])\n                cylinder(h=0.5, r=r, $fn=segments);\n        }\n    }\n}\n\nmodule post_shaft() {\n    // Cylindrical shaft with subtle taper and vertical flutes\n    difference() {\n        rounded_cylinder(shaft_height, shaft_dia/2, shaft_dia/2*0.9, center=false);\n        // Central bore to reduce material\n        translate([0,0,wall])\n            cylinder(h=shaft_height-wall, r=shaft_dia/2-wall, $fn=segments);\n    }\n    \n    // Vertical flutes for classical look\n    for (i=[0:8]) {\n        rotate([0,0,i*360/8])\n            translate([shaft_dia/2-0.6, -1.2, 0])\n                cube([1.2, 2.4, shaft_height]);\n    }\n}\n\nmodule post_cap() {\n    // Simple rounded cap with small finial sphere\n    difference() {\n        // Main cap dome\n        translate([0,0,shaft_height])\n            rounded_cylinder(cap_height*0.8, cap_dia/2, cap_dia/2*0.85);\n        // Hollow inside\n        translate([0,0,shaft_height+wall])\n            cylinder(h=cap_height*0.8-wall, r=cap_dia/2-wall, $fn=segments);\n    }\n    // Small sphere finial on top\n    translate([0,0,shaft_height+cap_height*0.8])\n        sphere(d=4, $fn=segments);\n}\n\n// Final assembly\nunion() {\n    post_base();\n    post_shaft();\n    post_cap();\n}",
    "renders": true
  },
  {
    "household_item": "pillar",
    "openscad_code": "// Realistic medium-complexity pillar for 3D printing\n// Total height ≈ 90 mm, footprint ≈ 25 mm, printable without supports\n\n// Parameters\npillar_height = 90;\nbase_d = 30;\nshaft_d = 20;\ncapital_d = 35;\nwall_t = 2;          // safe wall thickness for FDM printing\n\n// --- Base ---\nmodule base() {\n    difference() {\n        cylinder(h = 8, d = base_d, $fn = 64);               // solid base\n        translate([0, 0, -0.1])\n            cylinder(h = 8.2, d = base_d - 2*wall_t, $fn = 64); // hollow core\n    }\n\n    // Decorative ring\n    translate([0, 0, 8])\n        difference() {\n            cylinder(h = 2, d1 = base_d, d2 = base_d + 4, $fn = 64);\n            cylinder(h = 2.2, d1 = base_d - 2*wall_t, d2 = base_d + 4 - 2*wall_t, $fn = 64);\n        }\n}\n\n// --- Fluted shaft ---\nmodule shaft() {\n    // Core cylinder\n    difference() {\n        cylinder(h = 60, d = shaft_d, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = 60.2, d = shaft_d - 2*wall_t, $fn = 64);\n    }\n\n    // 16 flutes around shaft\n    for (i = [0:15]) {\n        rotate([0, 0, i*22.5])\n            translate([shaft_d/2 - 0.6, -1.5, 0])\n                difference() {\n                    cube([1.2, 3, 60.2]);                   // flute groove\n                    translate([-0.1, -0.1, -0.1])\n                        cube([1.4, 3.2, 60.4]);              // keep walls thick\n                }\n    }\n}\n\n// --- Capital (Ionic-like) ---\nmodule capital() {\n    // Base disc\n    difference() {\n        cylinder(h = 3, d = capital_d, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = 3.2, d = capital_d - 2*wall_t, $fn = 64);\n    }\n\n    // Volutes (simplified scrolls)\n    module volute() {\n        difference() {\n            union() {\n                translate([-3, 0, 0])\n                    scale([1, 0.6, 1])\n                        sphere(d = 6, $fn = 32);\n                translate([3, 0, 0])\n                    scale([1, 0.6, 1])\n                        sphere(d = 6, $fn = 32);\n                cube([6, 3.6, 6], center = true);\n            }\n            translate([0, 0, -0.1])\n                cube([7, 4, 6.2], center = true);              // hollow center\n        }\n    }\n\n    translate([0, 0, 3])\n        volute();\n\n    // Top square abacus\n    translate([0, 0, 9])\n        difference() {\n            cube([28, 28, 4], center = true);\n            cube([28 - 2*wall_t, 28 - 2*wall_t, 4.2], center = true);\n        }\n}\n\n// --- Assembly ---\nbase();\ntranslate([0, 0, 8]) shaft();\ntranslate([0, 0, 68]) capital();",
    "renders": true
  },
  {
    "household_item": "column",
    "openscad_code": "// Realistic style column with moderate complexity\n// Column height ~85 mm, base width ~26 mm\n\nmodule fluting(n = 20, r = 9, h = 45, depth = 0.8) {\n    for(i = [0 : n-1]) {\n        rotate([0, 0, i * 360/n])\n        translate([r, 0, h/2])\n        rotate([0, 90, 0])\n        linear_extrude(height = r, center = true)\n        polygon(points = [\n            [0, -h/2],\n            [depth, -h/2],\n            [depth,  h/2],\n            [0,  h/2]\n        ]);\n    }\n}\n\nmodule column() {\n    // Base plinth\n    difference() {\n        cylinder(h = 6, d1 = 26, d2 = 24, $fn = 60);\n        translate([0, 0, -1])\n        cylinder(h = 8, d = 22, $fn = 60);\n    }\n\n    // Lower torus\n    translate([0, 0, 6])\n    rotate_extrude($fn = 60)\n    translate([12, 0, 0])\n    circle(r = 2);\n\n    // Shaft\n    translate([0, 0, 8])\n    difference() {\n        cylinder(h = 45, d = 18, $fn = 60);\n        // Fluting\n        fluting();\n    }\n\n    // Necking ring\n    translate([0, 0, 53])\n    cylinder(h = 3, d = 19, $fn = 60);\n\n    // Echinus\n    translate([0, 0, 56])\n    cylinder(h = 5, d1 = 19, d2 = 22, $fn = 60);\n\n    // Abacus\n    translate([0, 0, 61])\n    cube([28, 28, 4], center = true);\n\n    // Entasis (subtle bulge in shaft)\n    translate([0, 0, 30.5])\n    scale([1.05, 1.05, 1])\n    cylinder(h = 45, d = 18, $fn = 60);\n}\n\n// Render column\ncolumn();",
    "renders": true
  },
  {
    "household_item": "beam",
    "openscad_code": "// Realistic I-beam with bolt holes, fillets and chamfers\n// Medium complexity ~100 lines\n\n$fn = 32;\n\n// Main dimensions\nbeam_length = 80;\nbeam_height = 40;\nbeam_width = 30;\nflange_thickness = 4;\nweb_thickness = 3;\nbolt_hole_diameter = 6;\nbolt_spacing = 20;\n\n// Fillet radius\nfillet_r = 2;\n\n// Chamfer angle\nchamfer = 1.5;\n\n// Web profile with fillets\nmodule web_profile() {\n    difference() {\n        // Main web\n        cube([beam_length, web_thickness, beam_height - 2*flange_thickness], center=true);\n        \n        // Top fillet\n        translate([0, 0, (beam_height - 2*flange_thickness)/2 - fillet_r])\n            rotate([0, 90, 0])\n                cylinder(h=beam_length, r=fillet_r, center=true);\n        \n        // Bottom fillet\n        translate([0, 0, -(beam_height - 2*flange_thickness)/2 + fillet_r])\n            rotate([0, 90, 0])\n                cylinder(h=beam_length, r=fillet_r, center=true);\n    }\n}\n\n// Flange with chamfers\nmodule flange(height_offset) {\n    difference() {\n        // Main flange\n        translate([0, 0, height_offset])\n            cube([beam_length, beam_width, flange_thickness], center=true);\n        \n        // Side chamfers\n        for(side = [-1, 1]) {\n            translate([0, side*(beam_width/2 - chamfer), height_offset])\n                rotate([90, 0, 0])\n                    cylinder(h=beam_length, r1=0, r2=chamfer, center=true);\n            translate([0, side*(beam_width/2 - chamfer), height_offset])\n                rotate([-90, 0, 0])\n                    cylinder(h=beam_length, r1=0, r2=chamfer, center=true);\n        }\n    }\n}\n\n// Bolt holes\nmodule bolt_holes(height_offset) {\n    for(i = [-1, 1]) {\n        translate([i*bolt_spacing, 0, height_offset])\n            rotate([90, 0, 0])\n                cylinder(h=beam_width + 2, d=bolt_hole_diameter, center=true);\n    }\n}\n\n// Main beam assembly\nunion() {\n    // Web\n    web_profile();\n    \n    // Top flange\n    flange((beam_height - flange_thickness)/2);\n    \n    // Bottom flange\n    flange(-(beam_height - flange_thickness)/2);\n    \n    // Bolt holes in top flange\n    bolt_holes((beam_height - flange_thickness)/2);\n    \n    // Bolt holes in bottom flange\n    bolt_holes(-(beam_height - flange_thickness)/2);\n}",
    "renders": true
  },
  {
    "household_item": "joist",
    "openscad_code": "// Realistic wooden joist with medium complexity\n// Includes wood grain texture, bolt holes, and chamfered edges\n\nmodule wood_grain(length, width, height, grain_size) {\n    // Create subtle wood grain texture using tiny cylinders\n    for (i = [0:grain_size:length]) {\n        for (j = [0:grain_size:width]) {\n            translate([i, j, height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=height, d=grain_size/2, $fn=6);\n        }\n    }\n}\n\nmodule bolt_hole(diameter, depth, chamfer) {\n    // Counter-sunk bolt hole\n    union() {\n        cylinder(h=depth, d=diameter, $fn=16);\n        translate([0, 0, depth])\n            cylinder(h=chamfer, d1=diameter*1.6, d2=diameter, $fn=16);\n    }\n}\n\nmodule joist() {\n    // Main joist dimensions (in mm)\n    length = 80;\n    width = 12;\n    height = 30;\n    chamfer = 1.2;\n    \n    // Main body with chamfered edges\n    difference() {\n        // Outer shape with chamfers\n        union() {\n            // Main block\n            translate([chamfer, chamfer, chamfer])\n                cube([length-chamfer*2, width-chamfer*2, height-chamfer*2]);\n            \n            // Top chamfers\n            translate([chamfer, chamfer, height-chamfer])\n                cube([length-chamfer*2, width-chamfer*2, chamfer]);\n            translate([chamfer, width-chamfer, 0])\n                cube([length-chamfer*2, chamfer, height]);\n            \n            // Side chamfers\n            translate([0, chamfer, chamfer])\n                cube([chamfer, width-chamfer*2, height-chamfer*2]);\n            translate([length-chamfer, 0, 0])\n                cube([chamfer, width, height]);\n        }\n        \n        // Cut chamfer edges\n        // Top edges\n        translate([0, 0, height-chamfer])\n            rotate([45, 0, 0])\n                cube([length, chamfer*2, chamfer*2]);\n        translate([0, width-chamfer*2, height-chamfer])\n            rotate([45, 0, 0])\n                cube([length, chamfer*2, chamfer*2]);\n        \n        // Side edges\n        translate([0, 0, 0])\n            rotate([0, 45, 0])\n                cube([chamfer*2, width, chamfer*2]);\n        translate([length-chamfer*2, 0, 0])\n            rotate([0, 45, 0])\n                cube([chamfer*2, width, chamfer*2]);\n    }\n    \n    // Add wood grain texture\n    wood_grain(length, width, height, 2);\n    \n    // Bolt holes for mounting\n    hole_spacing = 20;\n    for (i = [hole_spacing:hole_spacing:length-hole_spacing]) {\n        difference() {\n            // Left side\n            translate([i, width/2, height/2])\n                rotate([90, 0, 0])\n                    bolt_hole(3, width, 1);\n            \n            // Right side (mirrored)\n            translate([i, width/2, height/2])\n                rotate([90, 0, 0])\n                    bolt_hole(3, width, 1);\n        }\n    }\n    \n    // End grain texture on cut ends\n    for (i = [0:1.5:height]) {\n        for (j = [0:1.5:width]) {\n            translate([0, j, i])\n                rotate([0, 90, 0])\n                    cylinder(h=0.5, d=1, $fn=6);\n            translate([length, j, i])\n                rotate([0, 90, 0])\n                    cylinder(h=0.5, d=1, $fn=6);\n        }\n    }\n    \n    // Notch for beam support\n    notch_depth = 6;\n    notch_height = 10;\n    translate([length/2 - notch_depth/2, -0.1, 0])\n        cube([notch_depth, width+0.2, notch_height]);\n}\n\n// Render the joist\njoist();",
    "renders": true
  },
  {
    "household_item": "stud",
    "openscad_code": "// Realistic 3D Printable Stud (Medium Complexity)\n// Overall height: 60 mm, base diameter: 40 mm\n// Optimized for FDM printing, no supports needed\n\n// Main module\nmodule stud() {\n    // Base cylinder (main body)\n    cylinder(h = 45, d = 40, $fn = 128);\n    \n    // Top chamfer for smooth finish\n    translate([0, 0, 45])\n    cylinder(h = 5, d1 = 40, d2 = 36, $fn = 128);\n    \n    // Threaded section\n    translate([0, 0, 50])\n    threaded_section();\n    \n    // Chamfered nut base\n    translate([0, 0, 55])\n    nut_base();\n}\n\n// Threaded section with simplified threading\nmodule threaded_section() {\n    difference() {\n        // Main threaded body\n        cylinder(h = 5, d = 36, $fn = 128);\n        \n        // Thread grooves (simplified as small notches)\n        for (i = [0:5:360]) {\n            rotate([0, 0, i])\n            translate([17.5, 0, 0])\n            cube([2, 1.5, 5], center = true);\n        }\n    }\n}\n\n// Hex nut base with chamfered edges\nmodule nut_base() {\n    // Main hex body\n    cylinder(h = 5, d = 20, d1 = 20, d2 = 18, $fn = 6);\n    \n    // Chamfer bottom edge\n    translate([0, 0, -0.5])\n    cylinder(h = 1, d1 = 18, d2 = 20, $fn = 6);\n    \n    // Central hole for bolt\n    translate([0, 0, -1])\n    cylinder(h = 7, d = 10, $fn = 64);\n}\n\n// Add grip knurls on base\nmodule grip_knurls() {\n    for (i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([18, 0, 20])\n        cube([4, 2, 10], center = true);\n    }\n}\n\n// Combine all parts\nunion() {\n    stud();\n    \n    // Add grip knurls only on bottom half\n    difference() {\n        grip_knurls();\n        \n        // Remove top portion of knurls\n        translate([0, 0, 25])\n        cube([100, 100, 50], center = true);\n    }\n    \n    // Add small identification dot\n    translate([0, 15, 2])\n    sphere(d = 3, $fn = 32);\n}",
    "renders": true
  },
  {
    "household_item": "plank",
    "openscad_code": "// Realistic wooden plank with medium complexity\n// Dimensions: 80mm x 20mm x 5mm\n\n$fn = 32;\n\n// Main plank body\nmodule plank_body() {\n    // Slightly curved top surface\n    difference() {\n        // Base rectangular shape\n        cube([80, 20, 5], center = true);\n        \n        // Create slight curve on top\n        translate([0, 0, 2.6])\n            scale([1, 1, 0.3])\n                sphere(d = 20);\n        \n        // Round bottom edges slightly\n        translate([0, 0, -2.6])\n            scale([1, 1, 0.3])\n                sphere(d = 20);\n    }\n}\n\n// Wood grain texture using small cylinders\nmodule wood_grain() {\n    // Longitudinal grain lines\n    for (i = [-9:2:9]) {\n        translate([i * 4, 0, 2.51])\n            scale([1, 0.05, 0.05])\n                cube([80, 20, 0.1]);\n    }\n    \n    // Cross grain rings\n    for (j = [-35:5:35]) {\n        translate([j, 0, 2.52])\n            scale([0.05, 1, 0.05])\n                cube([0.1, 20, 0.1]);\n    }\n}\n\n// Screw holes at corners\nmodule screw_holes() {\n    // Counter-sunk holes\n    for (x = [-35, 35]) {\n        for (y = [-7.5, 7.5]) {\n            translate([x, y, 0])\n                // Counter-sink cone\n                cylinder(h = 2.5, d1 = 6, d2 = 3, center = true);\n            \n            translate([x, y, -2.5])\n                // Through hole\n                cylinder(h = 5, d = 3, center = true);\n        }\n    }\n}\n\n// Edge chamfers\nmodule chamfer_edges() {\n    // Top edge chamfers\n    for (side = [-1, 1]) {\n        translate([0, side * 10, 2.5])\n            rotate([0, side * 45, 0])\n                cube([80, 2, 2], center = true);\n    }\n    \n    // Side edge chamfers\n    for (side = [-1, 1]) {\n        translate([side * 40, 0, 0])\n            rotate([0, 0, side * 45])\n                cube([2, 20, 5], center = true);\n    }\n}\n\n// Small knots in wood\nmodule wood_knots() {\n    // Random knots placement\n    translate([-20, -5, 2.5])\n        scale([1, 1, 0.3])\n            cylinder(h = 2, d = 4);\n    \n    translate([15, 6, 2.5])\n        scale([1, 1, 0.3])\n            cylinder(h = 2, d = 3);\n    \n    translate([25, -8, 2.5])\n        scale([1, 1, 0.3])\n            cylinder(h = 2, d = 2.5);\n}\n\n// Assembly\nunion() {\n    // Main plank\n    plank_body();\n    \n    // Add chamfers\n    difference() {\n        plank_body();\n        chamfer_edges();\n    }\n    \n    // Add surface details\n    wood_grain();\n    wood_knots();\n    \n    // Remove screw holes\n    difference() {\n        children();\n        screw_holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "board",
    "openscad_code": "// Realistic cutting board with juice groove and handle hole\n// Medium complexity, 3D-printable, no overhangs\n\n// Overall dimensions\nboard_length = 180;\nboard_width = 120;\nboard_thickness = 12;\n\nmodule board_body() {\n    difference() {\n        // Main board block\n        translate([0, 0, board_thickness/2])\n            cube([board_length, board_width, board_thickness], center=true);\n\n        // Juice groove on top face\n        translate([0, 0, board_thickness - 1.5])\n            cube([board_length - 20, board_width - 20, 3], center=true);\n\n        // Handle hole through thickness\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=board_width, d=30, center=true, $fn=64);\n    }\n}\n\n// Rounded bottom edges with fillets\nmodule rounded_edges() {\n    // Four quarter-cylinders for bottom long edges\n    for (x = [-board_length/2 + 3, board_length/2 - 3])\n        translate([x, 0, 3])\n            rotate([90, 0, 0])\n                cylinder(h=board_width - 6, r=3, center=true);\n\n    // Four quarter-cylinders for bottom short edges\n    for (y = [-board_width/2 + 3, board_width/2 - 3])\n        translate([0, y, 3])\n            rotate([0, 90, 0])\n                cylinder(h=board_length - 6, r=3, center=true);\n\n    // Four corner spheres\n    for (x = [-board_length/2 + 3, board_length/2 - 3])\n        for (y = [-board_width/2 + 3, board_width/2 - 3])\n            translate([x, y, 3])\n                sphere(r=3);\n}\n\n// Anti-slip feet on bottom\nmodule feet() {\n    foot_d = 8;\n    foot_h = 2;\n    offset_x = board_length/2 - 20;\n    offset_y = board_width/2 - 20;\n    \n    for (x = [-offset_x, offset_x])\n        for (y = [-offset_y, offset_y])\n            translate([x, y, 0])\n                cylinder(h=foot_h, d=foot_d);\n}\n\n// Raised rim around juice groove\nmodule rim() {\n    rim_width = 3;\n    rim_height = 1;\n    \n    // Long sides\n    for (x = [-board_length/2 + 10, board_length/2 - 10])\n        translate([x, 0, board_thickness - rim_height/2])\n            cube([board_length - 20 - rim_width*2, rim_width, rim_height], center=true);\n    \n    // Short sides\n    for (y = [-board_width/2 + 10, board_width/2 - 10])\n        translate([0, y, board_thickness - rim_height/2])\n            cube([rim_width, board_width - 20 - rim_width*2, rim_height], center=true);\n}\n\n// Combine all parts\nunion() {\n    difference() {\n        board_body();\n        // Remove sharp bottom corners to make rounded edges fit\n        for (x = [-board_length/2, board_length/2])\n            for (y = [-board_width/2, board_width/2])\n                translate([x, y, 0])\n                    cube([6, 6, 6], center=true);\n    }\n    rounded_edges();\n    feet();\n    rim();\n}",
    "renders": true
  },
  {
    "household_item": "slab",
    "openscad_code": "// Realistic Concrete Slab with Rebar Texture\n// Medium complexity - 3D printable with no overhangs\n\n$fn = 50;  // Smooth curves for realistic look\n\n// Main parameters\nslab_width = 80;\nslab_length = 60;\nslab_thickness = 8;\nwall_thickness = 2;\n\n// Rebar spacing\nrebar_spacing = 10;\nrebar_diameter = 1.5;\n\n// Surface texture parameters\naggregate_size = 0.8;\naggregate_count = 200;\n\n// Main slab body\nmodule main_slab() {\n    difference() {\n        // Solid slab\n        cube([slab_width, slab_length, slab_thickness], center=true);\n        \n        // Hollow center to save material\n        translate([0, 0, 1])\n            cube([slab_width-wall_thickness*2, slab_length-wall_thickness*2, slab_thickness], center=true);\n    }\n}\n\n// Rebar grid - horizontal bars\nmodule rebar_grid() {\n    // Long direction bars\n    for(x = [-slab_width/2+rebar_spacing : rebar_spacing : slab_width/2-rebar_spacing]) {\n        translate([x, 0, -slab_thickness/2+rebar_diameter])\n            rotate([90, 0, 0])\n                cylinder(h=slab_length, d=rebar_diameter, center=true);\n    }\n    \n    // Short direction bars (offset slightly)\n    for(y = [-slab_length/2+rebar_spacing : rebar_spacing : slab_length/2-rebar_spacing]) {\n        translate([0, y, -slab_thickness/2+rebar_diameter*2])\n            rotate([90, 0, 90])\n                cylinder(h=slab_width, d=rebar_diameter, center=true);\n    }\n}\n\n// Surface aggregate texture\nmodule surface_aggregate() {\n    // Top surface\n    for(i = [1:aggregate_count]) {\n        translate([\n            (rand(i*1.1)-0.5)*slab_width,\n            (rand(i*1.2)-0.5)*slab_length,\n            slab_thickness/2 + aggregate_size/2\n        ])\n            sphere(d=aggregate_size + rand(i*1.3)*aggregate_size);\n    }\n    \n    // Bottom surface\n    for(i = [aggregate_count+1:aggregate_count*2]) {\n        translate([\n            (rand(i*1.1)-0.5)*slab_width,\n            (rand(i*1.2)-0.5)*slab_length,\n            -slab_thickness/2 - aggregate_size/2\n        ])\n            sphere(d=aggregate_size + rand(i*1.3)*aggregate_size);\n    }\n}\n\n// Control joints (shallow grooves)\nmodule control_joints() {\n    // Long direction joint\n    translate([0, 0, slab_thickness/2-0.5])\n        cube([slab_width-5, 1, 1]);\n    \n    // Short direction joint\n    translate([0, 0, slab_thickness/2-0.5])\n        cube([1, slab_length-5, 1]);\n}\n\n// Edge chamfers\nmodule edge_chamfers() {\n    // Top edges\n    for(edge = [[-slab_width/2, 0, 0], [slab_width/2, 0, 0], \n                [0, -slab_length/2, 0], [0, slab_length/2, 0]]) {\n        translate([edge[0], edge[1], slab_thickness/2-1])\n            rotate([0, 0, edge[0] != 0 ? 0 : 90])\n                cube([slab_width, 1, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    main_slab();\n    \n    // Rebar visible at edges\n    rebar_grid();\n    \n    // Surface details\n    difference() {\n        union() {\n            surface_aggregate();\n            control_joints();\n        }\n        // Ensure aggregate doesn't extend beyond slab\n        cube([slab_width+2, slab_length+2, slab_thickness+2], center=true);\n    }\n    \n    // Edge details\n    edge_chamfers();\n}\n\n// Random seed for consistent texture\nfunction rand(seed) = rands(seed, 0, 1)[0];",
    "renders": true
  },
  {
    "household_item": "slat",
    "openscad_code": "// Realistic 3D-printable wooden slat with screw holes and chamfers\n// Overall size: 100 x 20 x 8 mm\n\n// Parameters\nslat_l = 100;\nslat_w = 20;\nslat_h = 8;\nchamfer = 1.5;\nhole_d = 4;\nhole_inset = 10;\nwood_texture_depth = 0.3;\n\n// Main slat body module\nmodule slat_body() {\n    difference() {\n        // Outer block with chamfers\n        union() {\n            hull() {\n                // Bottom chamfers\n                translate([chamfer, chamfer, 0])\n                    cube([slat_l - 2*chamfer, slat_w - 2*chamfer, slat_h]);\n                translate([0, 0, chamfer])\n                    cube([slat_l, slat_w, slat_h - 2*chamfer]);\n            }\n            // Top chamfers\n            hull() {\n                translate([chamfer, chamfer, slat_h - chamfer])\n                    cube([slat_l - 2*chamfer, slat_w - 2*chamfer, chamfer]);\n                translate([0, 0, slat_h])\n                    cube([slat_l, slat_w, 0.01]);\n            }\n        }\n        \n        // Screw holes\n        for (x = [hole_inset, slat_l - hole_inset]) {\n            translate([x, slat_w/2, -1])\n                cylinder(h = slat_h + 2, d = hole_d, $fn = 20);\n        }\n        \n        // Wood grain texture\n        for (i = [0:2:slat_l]) {\n            translate([i, 0, slat_h - wood_texture_depth])\n                cube([1, slat_w, wood_texture_depth + 0.1]);\n        }\n    }\n}\n\n// Optional countersink for screws\nmodule countersink() {\n    for (x = [hole_inset, slat_l - hole_inset]) {\n        translate([x, slat_w/2, slat_h - 1])\n            cylinder(h = 2, d1 = hole_d * 2, d2 = hole_d, $fn = 20);\n    }\n}\n\n// Assembly\nslat_body();\ncountersink();",
    "renders": true
  },
  {
    "household_item": "strip",
    "openscad_code": "// LED Strip Light Module - 300 mm long RGB strip\n// Realistic style, medium complexity\n\n$fn = 36;  // Smooth curves\n\n// Overall dimensions\nstrip_length = 100;\nstrip_width = 12;\nstrip_height = 3.2;\nwall_thick = 0.8;\n\n// LED parameters\nled_pitch = 8;\nled_diam = 5;\nled_height = 0.8;\nled_count = floor(strip_length / led_pitch);\n\n// Wire channel parameters\nwire_channel_width = 4;\nwire_channel_height = 1.5;\nwire_channel_offset = 1.2;\n\n// Mounting holes\nmount_hole_diam = 3;\nmount_hole_depth = 1.6;\nmount_hole_spacing = 25;\n\n// Main strip base\nmodule strip_base() {\n    difference() {\n        // Solid base\n        cube([strip_length, strip_width, strip_height], center=true);\n        \n        // Wire channel underneath\n        translate([0, 0, -(strip_height/2 - wire_channel_height/2)])\n            cube([strip_length + 2, wire_channel_width, wire_channel_height], center=true);\n        \n        // Mounting holes along center line\n        for (x = [-strip_length/2 + mount_hole_spacing : mount_hole_spacing : strip_length/2 - mount_hole_spacing]) {\n            translate([x, 0, -strip_height/2])\n                cylinder(h=mount_hole_depth, d=mount_hole_diam, center=false);\n        }\n    }\n}\n\n// Individual LED package\nmodule led_package() {\n    // LED body\n    translate([0, 0, strip_height/2 + led_height/2])\n        cylinder(h=led_height, d=led_diam, center=true);\n    \n    // Clear lens dome\n    translate([0, 0, strip_height/2 + led_height + 0.5])\n        sphere(d=led_diam, $fn=20);\n    \n    // LED anode/cathode pads\n    translate([-led_diam/3, 0, strip_height/2])\n        cube([led_diam/6, led_diam/4, 0.3], center=true);\n    \n    translate([led_diam/3, 0, strip_height/2])\n        cube([led_diam/6, led_diam/4, 0.3], center=true);\n}\n\n// Resistor component\nmodule resistor() {\n    translate([led_pitch/3, 0, strip_height/2])\n        cube([3, 1.6, 0.6], center=true);\n    \n    // Resistor leads\n    translate([-led_pitch/3 - 1.5, 0, strip_height/2])\n        cube([0.3, 0.3, 0.6], center=true);\n    \n    translate([led_pitch/3 + 1.5, 0, strip_height/2])\n        cube([0.3, 0.3, 0.6], center=true);\n}\n\n// Copper traces on surface\nmodule copper_trace(x_pos) {\n    translate([x_pos, 0, strip_height/2 - 0.05])\n        cube([led_pitch - 2, 2, 0.1], center=true);\n}\n\n// Main assembly\nstrip_base();\n\n// Place LEDs and components\nfor (i = [0 : led_count - 1]) {\n    x_pos = -strip_length/2 + led_pitch/2 + i * led_pitch;\n    \n    translate([x_pos, 0, 0]) {\n        led_package();\n        resistor();\n    }\n    \n    // Add copper traces between LEDs\n    copper_trace(x_pos);\n}\n\n// End caps\ntranslate([strip_length/2 + 0.4, 0, 0])\n    cube([0.8, strip_width, strip_height], center=true);\n\ntranslate([-strip_length/2 - 0.4, 0, 0])\n    cube([0.8, strip_width, strip_height], center=true);\n\n// Solder pads at ends\ntranslate([strip_length/2 + 0.4, 0, strip_height/2 - 0.2])\n    cube([1.2, 4, 0.4], center=true);\n\ntranslate([-strip_length/2 - 0.4, 0, strip_height/2 - 0.2])\n    cube([1.2, 4, 0.4], center=true);",
    "renders": true
  },
  {
    "household_item": "batten",
    "openscad_code": "// Realistic Batten (Medium Complexity)\n// A 3D printable batten with wood grain and nail holes\n\n// Parameters\nbatten_length = 80;\nbatten_width = 8;\nbatten_thickness = 5;\ngrain_depth = 0.2;\nnail_hole_diameter = 1.5;\nnail_hole_depth = 2;\nedge_chamfer = 0.5;\n\n// Main batten body with rounded edges\nmodule batten_body() {\n    // Create main block\n    difference() {\n        // Rounded top edges\n        minkowski() {\n            cube([batten_length, batten_width, batten_thickness - edge_chamfer * 2], center = true);\n            cylinder(r = edge_chamfer, h = 0.1, $fn = 8);\n        }\n        \n        // Remove bottom chamfer to keep flat base\n        translate([0, 0, -batten_thickness/2])\n            cube([batten_length + 2, batten_width + 2, edge_chamfer + 0.1], center = true);\n    }\n}\n\n// Wood grain texture on top surface\nmodule wood_grain() {\n    difference() {\n        // Base batten\n        batten_body();\n        \n        // Grain lines\n        for(i = [0:3:batten_length-3]) {\n            translate([i - batten_length/2, 0, batten_thickness/2 - grain_depth/2])\n                cube([0.5, batten_width - 1, grain_depth + 0.1], center = true);\n        }\n        \n        // Cross grain knots\n        for(i = [15:25:batten_length-15]) {\n            translate([i - batten_length/2, 0, batten_thickness/2 - grain_depth/2])\n                rotate([0, 0, 45])\n                scale([1, 0.3, 1])\n                cylinder(h = grain_depth + 0.1, r = 1.5, $fn = 8, center = true);\n        }\n    }\n}\n\n// Nail holes\nmodule nail_holes() {\n    difference() {\n        wood_grain();\n        \n        // First nail hole\n        translate([-batten_length/2 + 10, 0, batten_thickness/2])\n            cylinder(h = nail_hole_depth + 0.1, r = nail_hole_diameter/2, $fn = 12);\n        \n        // Second nail hole\n        translate([batten_length/2 - 10, 0, batten_thickness/2])\n            cylinder(h = nail_hole_depth + 0.1, r = nail_hole_diameter/2, $fn = 12);\n        \n        // Center nail hole\n        translate([0, 0, batten_thickness/2])\n            cylinder(h = nail_hole_depth + 0.1, r = nail_hole_diameter/2, $fn = 12);\n    }\n}\n\n// End grain details\nmodule end_grain() {\n    difference() {\n        nail_holes();\n        \n        // Left end grain rings\n        for(i = [0:5:batten_width/2 - 1]) {\n            translate([-batten_length/2, 0, batten_thickness/2 - i/2 - 0.5])\n                rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = 0.3, r1 = i + 1, r2 = i + 1.2, $fn = 16);\n                    translate([0, 0, -0.1])\n                        cylinder(h = 0.5, r1 = i, r2 = i + 0.1, $fn = 16);\n                }\n        }\n        \n        // Right end grain rings\n        for(i = [0:5:batten_width/2 - 1]) {\n            translate([batten_length/2, 0, batten_thickness/2 - i/2 - 0.5])\n                rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = 0.3, r1 = i + 1, r2 = i + 1.2, $fn = 16);\n                    translate([0, 0, -0.1])\n                        cylinder(h = 0.5, r1 = i, r2 = i + 0.1, $fn = 16);\n                }\n        }\n    }\n}\n\n// Final assembly\nend_grain();",
    "renders": true
  },
  {
    "household_item": "lath",
    "openscad_code": "// Realistic 3D printable lath (woodworking strip)\n// 80 mm long, 8 mm x 30 mm cross-section\n// Medium complexity with chamfers, screw holes and wood grain texture\n\n// Parameters\nlath_length = 80;\nlath_width  = 30;\nlath_thick  = 8;\nchamfer     = 1;\nhole_diam   = 3.2;\nhole_depth  = 4;\nhole_pitch  = 20;\ngrain_depth = 0.2;\nwall        = 1.2;\n\nmodule chamfered_block(w, h, l, c) {\n    difference() {\n        cube([w, h, l]);\n        // Top-right chamfer\n        translate([w-c, h-c, -1])\n            cube([c+1, c+1, l+2]);\n        // Top-left chamfer\n        translate([-1, h-c, -1])\n            cube([c+1, c+1, l+2]);\n        // Bottom-right chamfer\n        translate([w-c, -1, -1])\n            cube([c+1, c+1, l+2]);\n        // Bottom-left chamfer\n        translate([-1, -1, -1])\n            cube([c+1, c+1, l+2]);\n    }\n}\n\nmodule screw_holes(d, depth, pitch, len) {\n    for (i = [0: pitch: len - pitch/2]) {\n        translate([lath_width/2, lath_thick/2, i])\n            rotate([90, 0, 0])\n                cylinder(d = d, h = depth, $fn = 16);\n    }\n}\n\nmodule wood_grain(length, width, depth, groove) {\n    n_lines = floor(length / 2);\n    for (i = [1: n_lines - 1]) {\n        translate([width/2, -groove/2, i*2])\n            cube([width, groove, 0.2]);\n    }\n}\n\n// Main lath body\ndifference() {\n    chamfered_block(lath_width, lath_thick, lath_length, chamfer);\n    // Countersink holes\n    screw_holes(hole_diam, hole_depth, hole_pitch, lath_length);\n}\n\n// Wood grain texture on top face\ntranslate([0, lath_thick - grain_depth, 0])\n    wood_grain(lath_length, lath_width, grain_depth, 0.1);\n\n// Add subtle rounding on long edges for realism\nmodule edge_round(w, h, l, r) {\n    hull() {\n        translate([r, r, 0])\n            cube([w-2*r, h-2*r, l]);\n        translate([r, r, -r])\n            sphere(r);\n        translate([w-r, r, -r])\n            sphere(r);\n        translate([r, h-r, -r])\n            sphere(r);\n        translate([w-r, h-r, -r])\n            sphere(r);\n    }\n}\n\n// Apply edge rounding\ndifference() {\n    edge_round(lath_width, lath_thick, lath_length, 0.5);\n    // Remove internal material for hollow printing\n    translate([wall, wall, wall])\n        cube([lath_width-2*wall, lath_thick-2*wall, lath_length-2*wall]);\n}",
    "renders": true
  },
  {
    "household_item": "girder",
    "openscad_code": "// I-beam girder (medium-complexity, realistic style)\n// Overall dimensions: ~80 mm long, 16 mm wide, 20 mm high\n// 3D-printable: no overhangs >45°, 2 mm wall thickness minimum\n\n// ---------- parameters ----------\nlength = 80;           // total girder length\nheight = 20;           // total girder height\nwidth  = 16;           // total girder width\nflange_t = 3;          // flange thickness\nweb_t    = 2;          // web thickness\nbolt_d   = 3;          // bolt hole diameter\nbolt_hole_depth = 4;   // depth of counter-bore\nedge_r = 1;            // edge fillet radius\nsegments = 32;         // cylinder resolution\n\n// ---------- module: bolt hole ----------\nmodule bolt_hole(dia, depth) {\n    // counter-bore head\n    translate([0,0,-depth/2])\n        cylinder(h=depth, d1=dia*1.8, d2=dia, $fn=segments);\n    // clearance hole\n    translate([0,0,-depth/2-2])\n        cylinder(h=depth+2, d=dia, $fn=segments);\n}\n\n// ---------- module: flange edge fillet ----------\nmodule flange_edge(radius, len) {\n    // quarter-cylinders along flange edges\n    translate([0, width/2-radius, height/2-radius])\n        rotate([0,90,0])\n            cylinder(h=len, r=radius, $fn=segments);\n    translate([0, -(width/2-radius), height/2-radius])\n        rotate([0,90,0])\n            cylinder(h=len, r=radius, $fn=segments);\n    translate([0, width/2-radius, -(height/2-radius)])\n        rotate([0,90,0])\n            cylinder(h=len, r=radius, $fn=segments);\n    translate([0, -(width/2-radius), -(height/2-radius)])\n        rotate([0,90,0])\n            cylinder(h=len, r=radius, $fn=segments);\n}\n\n// ---------- main girder body ----------\nunion() {\n    // top flange\n    translate([0, 0, (height-flange_t)/2])\n        cube([length, width, flange_t], center=true);\n\n    // bottom flange\n    translate([0, 0, -(height-flange_t)/2])\n        cube([length, width, flange_t], center=true);\n\n    // web\n    translate([0, 0, 0])\n        cube([length, web_t, height-2*flange_t], center=true);\n\n    // flange edge fillets\n    difference() {\n        union() {\n            flange_edge(edge_r, length);\n        }\n        // cut fillets back to flush\n        translate([0, 0, height/2])\n            cube([length+2, width+2, flange_t+1], center=true);\n        translate([0, 0, -height/2])\n            cube([length+2, width+2, flange_t+1], center=true);\n    }\n\n    // bolt holes every 20 mm\n    for (x = [-(length/2-10) : 20 : (length/2-10)]) {\n        // top flange\n        translate([x,  5,  height/2-flange_t/2])\n            rotate([90,0,0])\n                bolt_hole(bolt_d, bolt_hole_depth);\n        translate([x, -5,  height/2-flange_t/2])\n            rotate([90,0,0])\n                bolt_hole(bolt_d, bolt_hole_depth);\n\n        // bottom flange\n        translate([x,  5,  -height/2+flange_t/2])\n            rotate([90,0,0])\n                bolt_hole(bolt_d, bolt_hole_depth);\n        translate([x, -5,  -height/2+flange_t/2])\n            rotate([90,0,0])\n                bolt_hole(bolt_d, bolt_hole_depth);\n    }\n\n    // stiffener ribs every 40 mm\n    for (x = [-(length/2-20) : 40 : (length/2-20)]) {\n        translate([x, 0, 0])\n            rotate([0,90,0])\n                difference() {\n                    // triangular rib\n                    linear_extrude(height=web_t)\n                        polygon(points=[\n                            [0,0],\n                            [0,(height-2*flange_t)/2],\n                            [(width-web_t)/2,0]\n                        ]);\n                    // cut to web plane\n                    translate([(width-web_t)/2-0.1, -0.1, -0.1])\n                        cube([0.2, (height-2*flange_t)/2+0.2, web_t+0.2]);\n                }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "rafter",
    "openscad_code": "// Realistic rafter with birdsmouth cut, ridge notch, rafter tail, and metal connector plate\n// Overall length 80 mm, suitable for 3D printing on most FDM machines\n\n// Parameters\ntotal_length = 80;\nwidth = 12;\nheight = 18;\npitch_angle = 30;          // degrees from horizontal\nbirdsmouth_depth = 4;\nbirdsmouth_height = 8;\nridge_notch_depth = 3;\nridge_notch_width = 6;\ntail_length = 12;\ntail_height = 4;\nplate_thickness = 1.2;\nplate_width = 8;\nplate_length = 10;\nbolt_diameter = 2;\n\n// Convert pitch to radians\npitch = pitch_angle;\n\n// Top surface angle of rafter\nrafter_top_angle = 90 - pitch_angle;\n\n// Birdsmouth cut module\nmodule birdsmouth_cut() {\n    // Main notch\n    translate([0, 0, birdsmouth_height]) {\n        rotate([0, 0, -pitch]) {\n            cube([birdsmouth_depth / cos(pitch) + 0.1, width + 0.1, birdsmouth_depth * sin(pitch) + 0.1], center = true);\n        }\n    }\n}\n\n// Ridge notch module\nmodule ridge_notch() {\n    rotate([0, 0, -pitch]) {\n        translate([total_length - ridge_notch_depth / sin(pitch) - 0.1, 0, height - ridge_notch_depth / 2]) {\n            cube([ridge_notch_depth / sin(pitch) + 0.2, ridge_notch_width + 0.2, ridge_notch_depth + 0.2], center = true);\n        }\n    }\n}\n\n// Rafter tail module\nmodule rafter_tail() {\n    translate([0, 0, -tail_height]) {\n        rotate([0, 0, -pitch]) {\n            for (i = [0:1:3]) {\n                translate([-i * tail_length / 4, 0, i * tail_height / 4]) {\n                    cube([tail_length / 4 + 0.1, width + 0.1, tail_height + 0.1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Metal connector plate module\nmodule connector_plate() {\n    color(\"silver\") {\n        translate([plate_length / 2 + birdsmouth_depth, 0, birdsmouth_height / 2]) {\n            rotate([0, 90, 0]) {\n                // Main plate\n                cube([plate_length, plate_width, plate_thickness], center = true);\n                \n                // Bolt holes\n                for (x = [-plate_length/3, plate_length/3]) {\n                    for (y = [-plate_width/3, plate_width/3]) {\n                        translate([x, y, 0]) {\n                            cylinder(h = plate_thickness + 0.2, r = bolt_diameter / 2, center = true, $fn = 16);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main rafter body\nmodule rafter_body() {\n    difference() {\n        union() {\n            // Main beam\n            rotate([0, 0, -pitch]) {\n                cube([total_length, width, height], center = false);\n            }\n            \n            // Tail\n            rafter_tail();\n        }\n        \n        // Birdsmouth cut\n        birdsmouth_cut();\n        \n        // Ridge notch\n        ridge_notch();\n        \n        // Optional print-in-place support removal holes\n        for (i = [1:3]) {\n            translate([total_length * i / 4, 0, height / 2]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = width + 0.2, r = 1.5, center = true, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Assemble complete rafter\nrafter_body();\nconnector_plate();",
    "renders": true
  },
  {
    "household_item": "truss",
    "openscad_code": "// Realistic Warren Truss Bridge Segment\n// Designed for 3D printing with 2 mm wall thickness\n// Overall length = 80 mm, height = 20 mm, width = 20 mm\n\n// Parameters\nwall = 2;               // 2 mm wall thickness for 3D printing\npin_d = 3;              // pin diameter\npin_h = wall + 2;       // pin height\nL = 80;                 // total length\nH = 20;                 // total height\nW = 20;                 // total width\n\nmodule pin() {\n    // 3D-printable pin (no overhangs)\n    cylinder(h = pin_h, d = pin_d, $fn = 16);\n}\n\nmodule chord(is_top = false) {\n    // Top or bottom chord\n    difference() {\n        // Main rectangular tube\n        translate([0, 0, is_top ? H-wall : wall])\n            cube([L, W, wall], center = true);\n        \n        // Lightening holes along chord\n        for (i = [-L/2 + 10 : 10 : L/2 - 10]) {\n            translate([i, 0, is_top ? H-wall : wall])\n                cylinder(h = wall + 0.1, d = 6, $fn = 20, center = true);\n        }\n    }\n}\n\nmodule web() {\n    // Diagonal web members forming Warren truss pattern\n    for (i = [-L/2 + 5 : 10 : L/2 - 5]) {\n        // Left diagonal\n        translate([i, 0, 0])\n        rotate([0, atan2(H, L/4), 0])\n        scale([sqrt(pow(L/4, 2) + pow(H, 2))/10, 1, 1])\n            cube([10, W-2*wall, wall], center = true);\n        \n        // Right diagonal\n        translate([i, 0, 0])\n        rotate([0, -atan2(H, L/4), 0])\n        scale([sqrt(pow(L/4, 2) + pow(H, 2))/10, 1, 1])\n            cube([10, W-2*wall, wall], center = true);\n    }\n}\n\nmodule gusset_plates() {\n    // Gusset plates at joints\n    difference() {\n        union() {\n            for (i = [-L/2 + 5 : 10 : L/2 - 5]) {\n                // Top joints\n                translate([i, 0, H-wall/2])\n                    cube([8, W, wall], center = true);\n                \n                // Bottom joints\n                translate([i + 5, 0, wall/2])\n                    cube([8, W, wall], center = true);\n            }\n        }\n        \n        // Bolt holes\n        for (i = [-L/2 + 5 : 10 : L/2 - 5]) {\n            translate([i, 0, H-wall/2])\n                cylinder(h = wall + 0.1, d = 3.2, $fn = 16, center = true);\n            translate([i + 5, 0, wall/2])\n                cylinder(h = wall + 0.1, d = 3.2, $fn = 16, center = true);\n        }\n    }\n}\n\nmodule end_plates() {\n    // End connection plates\n    difference() {\n        translate([-L/2 - wall/2, 0, H/2])\n            cube([wall, W, H], center = true);\n        \n        // Connection holes\n        for (j = [H/4, 3*H/4]) {\n            translate([-L/2 - wall/2, 0, j])\n                rotate([90, 0, 0])\n                    cylinder(h = wall + 0.1, d = 3.2, $fn = 16, center = true);\n        }\n    }\n    \n    mirror([1, 0, 0])\n        end_plates();\n}\n\n// Assemble the truss\nunion() {\n    chord(true);      // Top chord\n    chord(false);     // Bottom chord\n    web();            // Diagonal web members\n    gusset_plates();  // Gusset plates at joints\n    end_plates();     // End connection plates\n}",
    "renders": true
  },
  {
    "household_item": "arch",
    "openscad_code": "// Realistic Roman-style stone arch\n// Dimensions optimized for 3D printing (80mm wide)\n\n// Constants\narch_width = 80;\narch_height = 60;\narch_depth = 25;\nstone_thickness = 4;\nkeystone_height = 8;\n\n// Stone textures module\nmodule stone_texture() {\n    // Create random stone surface pattern\n    for(i = [0:5:20]) {\n        translate([i-10, 0, -1]) \n            cube([2, arch_depth+2, 2]);\n    }\n    for(i = [0:5:arch_depth]) {\n        translate([-1, i-12.5, -1]) \n            cube([arch_width+2, 2, 2]);\n    }\n}\n\n// Individual stone block\nmodule stone_block(w, h, d) {\n    difference() {\n        // Main stone shape with rounded edges\n        minkowski() {\n            cube([w, d, h], center=true);\n            sphere(0.5);\n        }\n        // Add stone texture\n        translate([0, 0, h/2+0.1]) {\n            scale([0.9, 0.9, 1]) \n                stone_texture();\n        }\n    }\n}\n\n// Arch stones\nmodule arch_stones() {\n    // Parameters for arch\n    inner_radius = 25;\n    outer_radius = 30;\n    num_stones = 12;\n    \n    // Calculate angle for each stone\n    angle_step = 180 / (num_stones - 1);\n    \n    // Create arch stones\n    for(i = [0:num_stones-1]) {\n        angle = i * angle_step - 90;\n        \n        // Inner stone position\n        x_inner = inner_radius * cos(angle);\n        y_inner = inner_radius * sin(angle);\n        \n        // Outer stone position\n        x_outer = outer_radius * cos(angle);\n        y_outer = outer_radius * sin(angle);\n        \n        // Stone dimensions\n        stone_w = sqrt(pow(x_outer - x_inner, 2) + pow(y_outer - y_inner, 2)) + 1;\n        stone_h = stone_thickness;\n        \n        translate([x_inner + arch_width/2, 0, y_inner + arch_height - inner_radius]) {\n            rotate([0, 0, angle]) {\n                stone_block(stone_w, stone_h, arch_depth);\n            }\n        }\n    }\n    \n    // Keystone (top center stone)\n    translate([arch_width/2, 0, arch_height]) {\n        stone_block(6, keystone_height, arch_depth);\n    }\n}\n\n// Base pillars\nmodule base_pillars() {\n    pillar_width = 8;\n    pillar_height = arch_height - 25;\n    \n    // Left pillar\n    translate([pillar_width/2, 0, pillar_height/2]) {\n        stone_block(pillar_width, pillar_height, arch_depth);\n    }\n    \n    // Right pillar\n    translate([arch_width - pillar_width/2, 0, pillar_height/2]) {\n        stone_block(pillar_width, pillar_height, arch_depth);\n    }\n}\n\n// Foundation blocks\nmodule foundation() {\n    foundation_height = 6;\n    \n    // Main foundation\n    translate([arch_width/2, 0, -foundation_height/2]) {\n        stone_block(arch_width + 6, foundation_height, arch_depth + 6);\n    }\n    \n    // Additional base stones\n    for(i = [0:1]) {\n        x = i * arch_width + 3;\n        translate([x, 0, -foundation_height - 3]) {\n            stone_block(6, 3, arch_depth);\n        }\n    }\n}\n\n// Assemble the complete arch\nunion() {\n    foundation();\n    base_pillars();\n    arch_stones();\n}",
    "renders": true
  },
  {
    "household_item": "vault",
    "openscad_code": "// Realistic Medium-Complexity Bank Vault\n// Dimensions chosen for 80 mm total height\n\n$fn = 64;  // Smooth cylinders and spheres\n\n// Overall shell dimensions\nvault_outer_w = 60;\nvault_outer_d = 50;\nvault_outer_h = 80;\n\n// Wall thickness\nwall_th = 3;\n\n// Internal cavity\nvault_inner_w = vault_outer_w - 2*wall_th;\nvault_inner_d = vault_outer_d - 2*wall_th;\nvault_inner_h = vault_outer_h - 2*wall_th;\n\nmodule vault_shell() {\n    difference() {\n        // Outer box\n        cube([vault_outer_w, vault_outer_d, vault_outer_h], center = true);\n        \n        // Carve out inner cavity\n        translate([0, 0, wall_th/2])  // Lower the cavity to leave thicker bottom\n        cube([vault_inner_w, vault_inner_d, vault_inner_h], center = true);\n    }\n}\n\n// Reinforcing bands around the body\nband_th = 2;\nband_h  = 4;\n\nmodule reinforcing_bands() {\n    for (z = [-30, -15, 0, 15, 30]) {\n        translate([0, 0, z])\n        difference() {\n            cube([vault_outer_w + 0.2, vault_outer_d + 0.2, band_h], center = true);\n            cube([vault_outer_w - band_th, vault_outer_d - band_th, band_h + 0.2], center = true);\n        }\n    }\n}\n\n// Door with hinges on left\ndoor_w = vault_inner_w * 0.9;\ndoor_h = vault_inner_h * 0.9;\ndoor_th = wall_th + 1;\n\nmodule vault_door() {\n    // Door slab\n    translate([vault_outer_w/2 + door_th/2, 0, 0])\n    rotate([0, -90, 0])\n    cube([door_h, door_w, door_th], center = true);\n\n    // Hinges\n    for (z = [-door_h/3, door_h/3]) {\n        translate([vault_outer_w/2, 0, z])\n        rotate([0, -90, 0])\n        cylinder(h = door_th + 2, r = 2.5, center = true);\n    }\n\n    // Lock mechanism housing (cylindrical protrusion)\n    translate([vault_outer_w/2 + door_th, 0, 0])\n    cylinder(h = 8, r = 6);\n}\n\n// Lock dial\ndial_r = 4;\ndial_h = 3;\n\nmodule combination_lock() {\n    translate([vault_outer_w/2 + door_th + 4, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = dial_h, r = dial_r);\n    \n    // Dial handle\n    translate([vault_outer_w/2 + door_th + 4 + dial_h/2, dial_r - 1, 0])\n    rotate([0, 0, 90])\n    cube([1.5, 3, 1.5], center = true);\n}\n\n// Internal shelf\nshelf_th = 2;\nmodule internal_shelf() {\n    translate([0, 0, -vault_inner_h/4])\n    cube([vault_inner_w - 4, vault_inner_d - 4, shelf_th], center = true);\n}\n\n// Assemble the vault\nunion() {\n    vault_shell();\n    reinforcing_bands();\n    vault_door();\n    combination_lock();\n    internal_shelf();\n}",
    "renders": true
  },
  {
    "household_item": "dome",
    "openscad_code": "// Realistic Medium-Complexity Dome for 3D Printing\n// Approx. 65 mm diameter, 35 mm height\n\nmodule dome_shell(h, r, wall) {\n    difference() {\n        sphere(r);\n        translate([0,0,-(r*0.05)])\n            sphere(r - wall);\n        // Flat base\n        translate([0,0,-r])\n            cube([r*2.2, r*2.2, r], center=true);\n    }\n    // Cylindrical base collar\n    cylinder(h=wall*1.5, r1=r-wall*0.5, r2=r-wall*0.5, center=false);\n}\n\nmodule ribs(n, r, h) {\n    rib_w = 1.2;\n    rib_h = h * 0.5;\n    for (i=[0:n-1]) {\n        rotate([0,0,i*360/n])\n            translate([0,0,-h*0.1])\n                cube([rib_w, r*1.05, rib_h], center=true);\n    }\n}\n\nmodule skylight(r, thickness) {\n    // Ring\n    difference() {\n        cylinder(h=thickness*1.5, r1=r*0.25, r2=r*0.28, center=true);\n        cylinder(h=thickness*2, r1=r*0.22, r2=r*0.22, center=true);\n    }\n    // Glass pane\n    color(\"lightblue\", 0.5)\n        translate([0,0,-thickness*0.5])\n            cylinder(h=thickness, r1=r*0.215, r2=r*0.215, center=true);\n}\n\nmodule vent_holes(count, r, wall) {\n    hole_r = 2.5;\n    hole_h = wall + 1;\n    for (i=[0:count-1]) {\n        angle = 45 + i*(90/count);\n        rotate([0,0,i*360/count])\n            rotate([0,angle,0])\n                translate([0,0,r*0.6])\n                    rotate([90,0,0])\n                        cylinder(h=hole_h, r=hole_r, center=true, $fn=20);\n    }\n}\n\nmodule door(r, wall) {\n    door_w = 12;\n    door_h = 18;\n    door_t = wall + 0.5;\n    translate([r-wall*0.5, -door_w/2, door_h/2])\n        cube([door_t, door_w, door_h], center=true);\n}\n\nmodule antenna() {\n    // Base\n    translate([0,0,32.5])\n        cylinder(h=2, r=3, center=false);\n    // Mast\n    cylinder(h=12, r=1, center=false);\n    // Sphere tip\n    translate([0,0,12])\n        sphere(r=1.5);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        dome_shell(h=35, r=32.5, wall=2);\n        ribs(n=16, r=32.5, h=35);\n        skylight(r=32.5, thickness=1.5);\n        door(r=32.5, wall=2);\n    }\n    vent_holes(count=8, r=32.5, wall=2);\n}\n\ntranslate([0,25,0])\n    antenna();",
    "renders": true
  },
  {
    "household_item": "roof",
    "openscad_code": "// Realistic medium-complexity gable roof with rafters, ridge beam, and shingles\n// Print-ready (no overhangs, 2 mm walls)\n\nroof_width = 70;          // overall footprint\nroof_depth = 90;\nroof_height = 25;\nwall_thickness = 2;       // printable walls\nshingle_size = 6;         // single shingle tile\nrafter_spacing = 15;      // distance between rafters\n\nmodule shingle() {\n    // One asphalt shingle tile\n    difference() {\n        translate([0,0,0.5])\n            cube([shingle_size, shingle_size*1.5, 1], center=true);\n        translate([0,0,1.2])\n            cube([shingle_size-0.5, shingle_size*1.5-0.5, 2], center=true);\n    }\n}\n\nmodule shingle_row(len, offset=0) {\n    // Row of interlocked shingles\n    for (x = [-len/2+offset : shingle_size : len/2-offset])\n        translate([x, 0, 0])\n            shingle();\n}\n\nmodule rafter() {\n    // Simple rafter profile\n    linear_extrude(height=roof_depth-wall_thickness, center=true)\n        polygon(points=[[0,0], [roof_height, roof_width/4], [roof_height, -roof_width/4]]);\n}\n\nmodule ridge_beam() {\n    // Ridge beam running along top\n    translate([0,0,roof_height])\n        rotate([0,90,0])\n            cylinder(h=roof_width-wall_thickness, d=4, center=true);\n}\n\nmodule gable_wall(h) {\n    // Triangular gable wall with printable thickness\n    difference() {\n        linear_extrude(height=wall_thickness, center=true)\n            polygon(points=[[-roof_width/2,0], [0,h], [roof_width/2,0], [-roof_width/2,0]]);\n        // Cut out middle to save material\n        translate([0,h/3,0])\n            linear_extrude(height=wall_thickness+1, center=true)\n                polygon(points=[[-roof_width/2+5,0], [0,h/3], [roof_width/2-5,0]]);\n    }\n}\n\nmodule roof_surface() {\n    // One sloped roof plane with shingles\n    difference() {\n        // Main roof slab\n        translate([0,0,roof_height/2])\n            rotate([atan(roof_height/(roof_width/2)),0,0])\n                cube([roof_width+2, roof_depth, 2], center=true);\n        \n        // Hollow interior for light weight\n        translate([0,0,roof_height/2-1])\n            rotate([atan(roof_height/(roof_width/2)),0,0])\n                cube([roof_width-4, roof_depth-4, 2], center=true);\n    }\n    \n    // Attach shingles (cut to avoid overhang)\n    for (z = [0 : shingle_size*0.75 : roof_height-2]) {\n        y_offset = (z / roof_height) * (roof_depth/2 - shingle_size);\n        translate([0, y_offset, z])\n            rotate([atan(roof_height/(roof_width/2)),0,0])\n                shingle_row(roof_width-4, (z%2)*shingle_size/2);\n    }\n}\n\n// Assemble the complete roof\nunion() {\n    // Left slope\n    roof_surface();\n    \n    // Right slope (mirror)\n    mirror([1,0,0])\n        roof_surface();\n    \n    // Ridge beam\n    ridge_beam();\n    \n    // Rafters under eaves (decorative)\n    for (y = [-roof_depth/2+rafter_spacing : rafter_spacing : roof_depth/2-rafter_spacing]) {\n        translate([0,y,0])\n            rafter();\n    }\n    \n    // Front gable wall\n    translate([0, roof_depth/2, 0])\n        gable_wall(roof_height);\n    \n    // Rear gable wall\n    translate([0, -roof_depth/2, 0])\n        gable_wall(roof_height);\n}",
    "renders": true
  },
  {
    "household_item": "ceiling",
    "openscad_code": "// Realistic 3D printable ceiling tile\n// 80 mm x 80 mm, 10 mm thick\n// Features recessed panels with light fixture and vent\n\n// Overall dimensions\nceiling_w = 80;\nceiling_h = 80;\nceiling_t = 10;\n\n// Panel recesses\npanel_margin = 10;\npanel_depth = 2;\npanel_w = (ceiling_w - 3*panel_margin)/2;\npanel_h = (ceiling_h - 3*panel_margin)/2;\n\n// Light fixture\nlight_d = 20;\nlight_h = 5;\nlight_recess = 3;\n\n// Vent\nvent_w = 30;\nvent_h = 10;\nvent_t = 2;\nvent_slots = 5;\nslot_w = vent_w/vent_slots - 1;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule ceiling_tile() {\n    // Main ceiling body\n    difference() {\n        cube([ceiling_w, ceiling_h, ceiling_t], center=true);\n        \n        // Recessed panels\n        for (i = [0,1]) {\n            for (j = [0,1]) {\n                translate([\n                    -ceiling_w/2 + panel_margin + panel_w/2 + i*(panel_w + panel_margin),\n                    -ceiling_h/2 + panel_margin + panel_h/2 + j*(panel_h + panel_margin),\n                    -panel_depth\n                ]) {\n                    cube([panel_w, panel_h, panel_depth + 0.1], center=true);\n                }\n            }\n        }\n        \n        // Light fixture recess\n        translate([0, 0, light_recess]) {\n            cylinder(h=light_h + 0.1, d=light_d, center=true);\n        }\n        \n        // Vent opening\n        translate([0, ceiling_h/2 - vent_h/2 - panel_margin, vent_t]) {\n            cube([vent_w, vent_h, vent_t + 0.1], center=true);\n        }\n    }\n    \n    // Light fixture detail\n    difference() {\n        translate([0, 0, ceiling_t/2 - light_h/2]) {\n            cylinder(h=light_h, d=light_d, center=true);\n        }\n        translate([0, 0, ceiling_t/2 - light_h/2 + 1]) {\n            cylinder(h=light_h, d=light_d - wall*2, center=true);\n        }\n    }\n    \n    // Vent cover with slots\n    translate([0, ceiling_h/2 - vent_h/2 - panel_margin, ceiling_t/2 - vent_t/2]) {\n        difference() {\n            cube([vent_w, vent_h, vent_t], center=true);\n            // Vent slots\n            for (i = [0:vent_slots-1]) {\n                translate([\n                    -vent_w/2 + slot_w/2 + i*(slot_w + 1),\n                    0,\n                    -0.1\n                ]) {\n                    cube([slot_w, vent_h - 2, vent_t + 0.2], center=true);\n                }\n            }\n        }\n    }\n    \n    // Mounting holes (4 corners)\n    hole_d = 3;\n    for (i = [-1,1]) {\n        for (j = [-1,1]) {\n            translate([\n                i*(ceiling_w/2 - 10),\n                j*(ceiling_h/2 - 10),\n                0\n            ]) {\n                rotate([90,0,0]) {\n                    cylinder(h=ceiling_t + 0.1, d=hole_d, center=true);\n                }\n            }\n        }\n    }\n}\n\nceiling_tile();",
    "renders": true
  },
  {
    "household_item": "wall",
    "openscad_code": "// Realistic castle wall segment for 3D printing\n// Dimensions: 80mm long x 20mm deep x 60mm high\n// Wall thickness: 3mm for 3D printing\n\n$fn = 32;\n\n// Main module to generate the wall\nmodule castle_wall() {\n    // Base foundation\n    translate([0, 0, 0]) {\n        cube([80, 20, 5], center = true);\n    }\n    \n    // Main wall body\n    difference() {\n        // Outer wall block\n        translate([0, 0, 32.5]) {\n            cube([80, 20, 55], center = true);\n        }\n        \n        // Inner cavity for hollow wall\n        translate([0, 0, 32.5]) {\n            cube([74, 14, 55], center = true);\n        }\n    }\n    \n    // Battlement crenellations along top\n    for (x = [-35:10:35]) {\n        translate([x, 0, 60]) {\n            cube([8, 20, 5], center = true);\n        }\n    }\n    \n    // Arrow slits\n    for (x = [-25:25:25]) {\n        translate([x, 0, 35]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 20, d1 = 3, d2 = 2, center = true);\n            }\n        }\n    }\n    \n    // Buttresses for structural support\n    for (x = [-30:30:60]) {\n        translate([x, 0, 15]) {\n            difference() {\n                cube([6, 24, 30], center = true);\n                translate([0, 2, 0]) {\n                    cube([4, 20, 30], center = true);\n                }\n            }\n        }\n    }\n    \n    // Stone texture using small cubes\n    for (i = [0:15]) {\n        x = -40 + i * 5;\n        for (j = [0:7]) {\n            y = -10 + j * 2.5;\n            if ((i + j) % 2 == 0) {\n                translate([x, y, 27.5]) {\n                    cube([4.8, 2.3, 1], center = true);\n                }\n            }\n        }\n    }\n    \n    // Drainage holes at bottom\n    for (x = [-30:15:30]) {\n        translate([x, 10, 2.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 20, d = 2, center = true);\n            }\n        }\n    }\n    \n    // Flag pole mounting hole\n    translate([0, 0, 62.5]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 10, d = 3, center = true);\n        }\n    }\n}\n\n// Render the wall\ncastle_wall();",
    "renders": true
  },
  {
    "household_item": "floor",
    "openscad_code": "// Realistic Medium-Complexity Floor Tile\n// Dimensions: 80 mm x 80 mm x 4 mm\n// Features: Wood plank texture, grout lines, slight surface undulation\n\n$fn = 32; // Smooth curves\n\n// Overall dimensions\nfloor_size = 80;\nthickness = 4;\nplank_width = 8;\nplank_length = 40;\ngrout_width = 1;\n\n// Wood plank module with texture\nmodule wood_plank(x_pos, y_pos, length, width, angle) {\n    translate([x_pos, y_pos, 0])\n    rotate([0, 0, angle])\n    difference() {\n        // Main plank body\n        translate([0, 0, thickness/2])\n        cube([length, width, thickness], center=true);\n        \n        // Subtle surface undulation (for realism)\n        for (i = [0:5:length-2]) {\n            translate([i - length/2, 0, thickness/2 - 0.1])\n            rotate([90, 0, 0])\n            cylinder(h=width, r=0.2, center=true);\n        }\n        \n        // Wood grain grooves\n        for (g = [1:2:width-2]) {\n            translate([0, g - width/2, thickness/2 - 0.3])\n            cube([length, 0.3, 0.3], center=true);\n        }\n    }\n}\n\n// Grout line module\nmodule grout_line(x1, y1, x2, y2) {\n    translate([(x1+x2)/2, (y1+y2)/2, thickness/2 - 0.5])\n    rotate([0, 0, atan2(y2-y1, x2-x1)])\n    cube([sqrt(pow(x2-x1,2)+pow(y2-y1,2)), grout_width, 0.5], center=true);\n}\n\n// Main floor assembly\ndifference() {\n    // Base floor slab\n    cube([floor_size, floor_size, thickness], center=true);\n    \n    // Chamfer bottom edges for printability\n    translate([0, 0, -thickness/2 + 0.5])\n    cube([floor_size - 1, floor_size - 1, 1], center=true);\n}\n\n// Generate wood planks in alternating pattern\nfor (row = [0:9]) {\n    for (col = [0:1]) {\n        offset = (row % 2) * plank_length/2;\n        wood_plank(\n            -floor_size/2 + 5 + offset + col * plank_length,\n            -floor_size/2 + 5 + row * (plank_width + grout_width),\n            plank_length - grout_width,\n            plank_width,\n            0\n        );\n    }\n}\n\n// Add grout lines horizontally\nfor (i = [0:10]) {\n    grout_line(\n        -floor_size/2 + 2,\n        -floor_size/2 + 2 + i * (plank_width + grout_width) - grout_width/2,\n        floor_size/2 - 2,\n        -floor_size/2 + 2 + i * (plank_width + grout_width) - grout_width/2\n    );\n}\n\n// Add grout lines vertically\nfor (j = [0:2]) {\n    for (i = [0:5]) {\n        grout_line(\n            -floor_size/2 + 2 + i * plank_length + (j % 2) * plank_length/2 - grout_width/2,\n            -floor_size/2 + 2,\n            -floor_size/2 + 2 + i * plank_length + (j % 2) * plank_length/2 - grout_width/2,\n            floor_size/2 - 2\n        );\n    }\n}\n\n// Add subtle surface finish with random small depressions\nmodule surface_detail() {\n    for (i = [0:20]) {\n        x = -floor_size/2 + 5 + (i * 3.7) % (floor_size - 10);\n        y = -floor_size/2 + 5 + (i * 2.3) % (floor_size - 10);\n        translate([x, y, thickness - 0.2])\n        sphere(r=0.3);\n    }\n}\n\n// Apply surface details\ndifference() {\n    children();\n    surface_detail();\n}",
    "renders": true
  },
  {
    "household_item": "tile",
    "openscad_code": "// Realistic subway-style tile with inset grout lines and beveled edges\n// Dimensions suitable for 3D printing: 75 x 75 x 8 mm\n\nmodule tile_base() {\n    // Main tile body with slight taper for easier printing\n    difference() {\n        cube([75, 75, 8], center = true);\n        translate([0, 0, 3.9])\n            cube([72, 72, 8.2], center = true);\n    }\n}\n\nmodule beveled_edges() {\n    // Create beveled edges on top surface\n    translate([0, 0, 4])\n    difference() {\n        cube([75, 75, 0.1], center = true);\n        for (x = [-36.5, 36.5]) {\n            for (y = [-36.5, 36.5]) {\n                translate([x, y, 0])\n                    cylinder(h = 0.2, r = 2, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule grout_lines() {\n    // Horizontal and vertical grout lines\n    grout_width = 2;\n    grout_depth = 0.5;\n    \n    // Horizontal lines\n    for (y = [-25, 0, 25]) {\n        translate([0, y, 3.5])\n            cube([71, grout_width, grout_depth], center = true);\n    }\n    \n    // Vertical lines\n    for (x = [-25, 0, 25]) {\n        translate([x, 0, 3.5])\n            cube([grout_width, 71, grout_depth], center = true);\n    }\n}\n\nmodule surface_texture() {\n    // Subtle texture for realistic surface\n    for (i = [-30:5:30]) {\n        for (j = [-30:5:30]) {\n            translate([i, j, 3.8]) {\n                difference() {\n                    cylinder(h = 0.2, r = 1.5, $fn = 8);\n                    cylinder(h = 0.3, r = 1.2, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\nmodule corner_chamfers() {\n    // Add chamfers to bottom edges for printability\n    for (x = [-37.5, 37.5]) {\n        for (y = [-37.5, 37.5]) {\n            translate([x, y, -4])\n                rotate([0, 0, (x < 0 && y < 0) ? 0 : \n                               (x > 0 && y < 0) ? 90 :\n                               (x < 0 && y > 0) ? -90 : 180])\n                    linear_extrude(height = 2)\n                        polygon(points = [[0,0], [2,0], [0,2]]);\n        }\n    }\n}\n\n// Assemble the complete tile\nunion() {\n    tile_base();\n    beveled_edges();\n    grout_lines();\n    surface_texture();\n    corner_chamfers();\n}",
    "renders": true
  },
  {
    "household_item": "slate",
    "openscad_code": "// Slate with wooden frame and chalk holder\n// Overall dimensions: 80 x 60 x 8 mm\n\n// Parameters\nslate_w = 80;\nslate_h = 60;\nslate_t = 8;\nframe_w = 4;\nchalk_d = 8;\nchalk_holder_r = 5;\n\n// Main module\nmodule slate() {\n    // Wooden frame\n    difference() {\n        // Outer frame\n        cube([slate_w, slate_h, slate_t]);\n        \n        // Inner cavity for slate surface\n        translate([frame_w, frame_w, -0.1])\n            cube([slate_w - 2*frame_w, slate_h - 2*frame_w, slate_t + 0.2]);\n    }\n    \n    // Slate writing surface\n    translate([frame_w, frame_w, slate_t - 1])\n        cube([slate_w - 2*frame_w, slate_h - 2*frame_w, 1]);\n    \n    // Frame edge details - rounded corners\n    for (i = [0:1]) {\n        for (j = [0:1]) {\n            x = i * (slate_w - frame_w);\n            y = j * (slate_h - frame_w);\n            translate([x, y, frame_w/2])\n                rotate([0, 0, 90 + 180*i])\n                difference() {\n                    cylinder(h = frame_w, r = frame_w, $fn = 16);\n                    translate([0, 0, -0.1])\n                        cube([frame_w, frame_w, frame_w + 0.2]);\n                }\n        }\n    }\n    \n    // Chalk holder on top edge\n    chalk_holder();\n    \n    // Wood grain texture on frame\n    grain_texture();\n}\n\nmodule chalk_holder() {\n    // Holder base\n    translate([slate_w/2, -chalk_holder_r - 1, slate_t/2])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r1 = chalk_holder_r + 2, r2 = chalk_holder_r + 2, $fn = 32);\n    \n    // Holder hole\n    translate([slate_w/2, -chalk_holder_r - 1, slate_t/2 + 1])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = chalk_d/2 + 0.5, $fn = 32);\n    \n    // Chalk piece\n    translate([slate_w/2, -chalk_holder_r - 1, slate_t/2 + 3])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r = chalk_d/2, $fn = 16);\n}\n\nmodule grain_texture() {\n    // Simple wood grain lines on frame sides\n    for (i = [0:3]) {\n        // Top grain\n        translate([10 + i*20, frame_w/2, slate_t - 0.5])\n            cube([15, 0.5, 1]);\n        \n        // Bottom grain\n        translate([10 + i*20, slate_h - frame_w/2, slate_t - 0.5])\n            cube([15, 0.5, 1]);\n        \n        // Left grain\n        translate([frame_w/2, 10 + i*15, slate_t - 0.5])\n            cube([0.5, 15, 1]);\n        \n        // Right grain\n        translate([slate_w - frame_w/2, 10 + i*15, slate_t - 0.5])\n            cube([0.5, 15, 1]);\n    }\n}\n\n// Render the slate\nslate();",
    "renders": true
  },
  {
    "household_item": "brick",
    "openscad_code": "// Realistic 3D-printable brick (medium complexity)\n// Overall size: 95 mm long, 45 mm wide, 30 mm high\n\n$fa = 2;\n$fs = 0.5;\n\nmodule brick_body() {\n    // Main brick block (slightly chamfered edges)\n    difference() {\n        // Outer block with slight chamfers\n        cube([95, 45, 30], center = true);\n        // Remove inner edges to create chamfers\n        for (dx = [-1, 1], dy = [-1, 1], dz = [-1, 1]) {\n            translate([dx * 45, dy * 20, dz * 14])\n                rotate([45 * dx, 45 * dy, 45 * dz])\n                    cube([4, 4, 4], center = true);\n        }\n    }\n}\n\nmodule studs(count = 6) {\n    // Generate top studs in two rows\n    for (row = [0, 1]) {\n        translate([0, 0, 15]) {\n            for (i = [0:count-1]) {\n                translate([i * 16 - 40, row * 24 - 12, 0])\n                    stud();\n            }\n        }\n    }\n}\n\nmodule stud() {\n    // Single LEGO-style stud with hollow core\n    difference() {\n        // Outer cylinder\n        cylinder(h = 1.6, r = 4.8, $fn = 32);\n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h = 1.8, r = 2.5, $fn = 32);\n    }\n    // Top rounded edge\n    translate([0, 0, 1.6]) {\n        scale([1, 1, 0.4])\n            sphere(r = 4.8, $fn = 32);\n    }\n}\n\nmodule bottom_tubes() {\n    // Bottom tubes for clutch power\n    translate([0, 0, -15]) {\n        // Three tubes along length\n        for (i = [-1, 0, 1]) {\n            translate([i * 24, 0, 0])\n                tube();\n        }\n        // Two tubes along width\n        for (j = [-1, 1]) {\n            translate([0, j * 12, 0])\n                tube();\n        }\n    }\n}\n\nmodule tube() {\n    // Hollow tube with rounded bottom\n    difference() {\n        // Outer tube\n        cylinder(h = 6.5, r = 6.4, $fn = 32);\n        // Inner hollow\n        translate([0, 0, -0.1])\n            cylinder(h = 6.7, r = 5, $fn = 32);\n    }\n    // Rounded bottom\n    translate([0, 0, 6.5])\n        sphere(r = 6.4, $fn = 32);\n}\n\nmodule logo() {\n    // LEGO logo on studs\n    translate([0, 0, 16.8]) {\n        for (row = [0, 1]) {\n            for (i = [0:5]) {\n                translate([i * 16 - 40, row * 24 - 12, 0])\n                    linear_extrude(height = 0.2)\n                        text(\"LEGO\", size = 2.5, halign = \"center\", valign = \"center\");\n            }\n        }\n    }\n}\n\n// Build the complete brick\nunion() {\n    brick_body();\n    studs();\n    bottom_tubes();\n    // Uncomment for logo (may affect print quality)\n    // logo();\n}",
    "renders": true
  },
  {
    "household_item": "stone",
    "openscad_code": "// Realistic stone for 3D printing\n// Overall size ~70 mm\n\n// Parameters for randomness\nseed = 42;\nroughness = 0.3;\ndetail = 12;\n\n// Main stone body\nmodule stone_body() {\n    // Base ellipsoid with irregularities\n    difference() {\n        scale([1.1, 0.9, 0.8])\n        sphere(d = 60, $fn = detail * 2);\n        \n        // Carve out some dents\n        for (i = [1 : 8]) {\n            rotate([rands(-roughness*30, roughness*30, 1, seed + i)[0], \n                     rands(-roughness*30, roughness*30, 1, seed + i + 10)[0], \n                     i * 45])\n            translate([rands(-5, 5, 1, seed + i + 20)[0],\n                       rands(-5, 5, 1, seed + i + 30)[0],\n                       rands(-5, 5, 1, seed + i + 40)[0]])\n            sphere(d = 12 + rands(0, 8, 1, seed + i + 50)[0], $fn = detail);\n        }\n    }\n}\n\n// Surface bumps and small features\nmodule surface_features() {\n    union() {\n        for (j = [1 : 15]) {\n            rotate([rands(-roughness*20, roughness*20, 1, seed + j + 60)[0],\n                    rands(-roughness*20, roughness*20, 1, seed + j + 70)[0],\n                    j * 24])\n            translate([rands(-20, 20, 1, seed + j + 80)[0],\n                       rands(-20, 20, 1, seed + j + 90)[0],\n                       rands(-20, 20, 1, seed + j + 100)[0]])\n            scale([1, 1, 0.7])\n            sphere(d = 8 + rands(0, 6, 1, seed + j + 110)[0], $fn = detail);\n        }\n    }\n}\n\n// Flat base for stable printing\nmodule flat_base() {\n    difference() {\n        union() {\n            stone_body();\n            surface_features();\n        }\n        \n        // Cut flat bottom\n        translate([0, 0, -35])\n        cube([100, 100, 70], center = true);\n    }\n}\n\n// Optional small cavity inside to save material\nmodule hollow_core() {\n    difference() {\n        flat_base();\n        \n        // Inner hollow\n        translate([0, 0, -5])\n        scale([0.6, 0.6, 0.6])\n        sphere(d = 50, $fn = detail * 2);\n    }\n}\n\n// Create the stone\nhollow_core();",
    "renders": true
  },
  {
    "household_item": "plaster",
    "openscad_code": "// Realistic plaster (band-aid) for 3D printing, ~70 mm long\n// Medium complexity – includes weave texture, rounded edges, and pad\n\n// Overall dimensions\nband_len = 70;          // total length\nband_wid = 25;          // total width\nband_thk = 1.6;         // overall thickness\nwall = 0.8;             // printable wall thickness\npad_len = 35;\npad_wid = 15;\npad_thk = 0.8;\n\n// Helper module for rounded box (used twice)\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for (x = [-l/2+r, l/2-r], y = [-w/2+r, w/2-r])\n            translate([x, y, 0])\n                cylinder(r=r, h=h, $fn=20);\n    }\n    translate([0, 0, h/2])\n        cube([l-2*r, w, h], center=true);\n    translate([0, 0, h/2])\n        cube([l, w-2*r, h], center=true);\n}\n\n// Woven fabric texture on top surface\nmodule weave() {\n    spacing = 1.6;\n    strands = floor(band_len / spacing);\n    difference() {\n        cube([band_len, band_wid, band_thk], center=true);\n        // subtract tiny trenches for weave\n        for (i = [1:strands-1]) {\n            translate([-band_len/2 + i*spacing, 0, band_thk/2 - 0.1])\n                cube([0.4, band_wid, 0.2], center=true);\n        }\n        for (j = [1:strands-1]) {\n            translate([0, -band_wid/2 + j*spacing, band_thk/2 - 0.1])\n                cube([band_len, 0.4, 0.2], center=true);\n        }\n    }\n}\n\n// Main plaster module\nmodule plaster() {\n    difference() {\n        // base band with rounded edges\n        rounded_box(band_len, band_wid, band_thk, 3);\n        // hollow inside to save material\n        translate([0, 0, -0.2])\n            rounded_box(band_len - 2*wall, band_wid - 2*wall, band_thk, 2);\n    }\n\n    // absorbent pad in center\n    translate([0, 0, band_thk - pad_thk/2])\n        difference() {\n            rounded_box(pad_len, pad_wid, pad_thk, 2);\n            // pad surface texture\n            translate([0, 0, pad_thk/2 - 0.1])\n                for (dx = [-pad_len/2+2 : 3 : pad_len/2-2])\n                    for (dy = [-pad_wid/2+2 : 3 : pad_wid/2-2])\n                        translate([dx, dy, 0])\n                            cylinder(r=0.6, h=0.2, $fn=8);\n        }\n\n    // adhesive underside – thin skirt\n    difference() {\n        translate([0, 0, -band_thk/2 + 0.1])\n            rounded_box(band_len - 2, band_wid - 2, 0.2, 2);\n        // cut out pad area so pad sits higher\n        translate([0, 0, -0.1])\n            cube([pad_len + 2, pad_wid + 2, 0.4], center=true);\n    }\n\n    // top weave\n    translate([0, 0, band_thk/2])\n        weave();\n}\n\n// Render\nplaster();",
    "renders": true
  },
  {
    "household_item": "stucco",
    "openscad_code": "// Realistic-style stucco (decorative wall-mounted molding) – medium complexity\n// Overall bounding box ≈ 80 mm (length) × 20 mm (height) × 15 mm (depth)\n\nmodule stucco_base() {\n    // Main body – a gently curved slab\n    difference() {\n        hull() {\n            translate([-40, 0, 0])  cube([80, 20, 12]);\n            translate([-38, 2, 12]) cube([76, 16, 3]);   // raised center\n        }\n        // Hollow out back for printability\n        translate([0, 0, -0.1]) cube([82, 22, 10.2], center=true);\n    }\n}\n\nmodule egg_and_dart() {\n    // Classical repeating egg-and-dart pattern along upper edge\n    for(i=[-36:8:36]) {\n        translate([i, 18, 12]) {\n            // \"Egg\"\n            scale([1, 0.6, 1]) sphere(d=7, $fn=32);\n            // \"Dart\" (leaf tip)\n            translate([-2, 5, 0])\n                rotate([0, 0, 45])\n                scale([1, 2, 1])\n                cylinder(h=5, d1=3, d2=0, $fn=3);\n        }\n    }\n}\n\nmodule rosettes() {\n    // Small rosette bosses every 20 mm\n    for(i=[-30:20:30]) {\n        translate([i, 10, 2])\n        difference() {\n            cylinder(h=4, d=10, $fn=32);\n            cylinder(h=5, d=6, $fn=32);  // center recess\n        }\n    }\n}\n\nmodule key_pattern() {\n    // Greek-key frieze on lower rim\n    for(i=[-36:12:36]) {\n        translate([i, 4, 0]) {\n            // horizontal bar\n            cube([12, 2, 2]);\n            // vertical bar\n            translate([6-1, -2, 0]) cube([2, 4, 2]);\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Two 4 mm holes for screws\n    translate([-25, 10, -1]) rotate([90, 0, 0]) cylinder(h=20, d=4);\n    translate([ 25, 10, -1]) rotate([90, 0, 0]) cylinder(h=20, d=4);\n}\n\n// Build the stucco\nunion() {\n    stucco_base();\n    egg_and_dart();\n    rosettes();\n    key_pattern();\n}\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "household_item": "paint",
    "openscad_code": "// Paint tube model - realistic style with medium complexity\n// Overall dimensions: ~80mm height, 30mm diameter\n\n$fn = 36;\n\n// Main parameters\ntube_diameter = 30;\ntube_height = 65;\nnozzle_diameter = 8;\nnozzle_length = 15;\ncap_height = 20;\ncap_diameter = 12;\nwall_thickness = 1.5;\nthread_pitch = 2;\n\nmodule tube_body() {\n    // Crumpled tube body with realistic deformation\n    difference() {\n        // Main tube shape - slightly flattened\n        scale([1, 0.85, 1])\n        cylinder(d=tube_diameter, h=tube_height);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n        scale([1, 0.85, 1])\n        cylinder(d=tube_diameter - 2*wall_thickness, h=tube_height);\n        \n        // Bottom crimp effect\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([tube_diameter/2 - 2, -tube_diameter/4, tube_height - 8])\n            cube([tube_diameter/2, tube_diameter/2, 8]);\n        }\n    }\n    \n    // Crimp lines on bottom\n    for(i = [0:6]) {\n        translate([0, 0, tube_height - 8 + i*1.2])\n        scale([1, 0.85, 1])\n        rotate([0, 0, 45])\n        cylinder(d=tube_diameter + 0.5, h=0.3);\n    }\n}\n\nmodule nozzle() {\n    // Threaded nozzle section\n    difference() {\n        // Main nozzle\n        cylinder(d1=tube_diameter/2, d2=nozzle_diameter, h=nozzle_length);\n        \n        // Hollow through\n        cylinder(d1=tube_diameter/2 - wall_thickness, \n                 d2=nozzle_diameter - wall_thickness, \n                 h=nozzle_length + 0.1);\n                 \n        // External threads\n        for(i = [0:7]) {\n            translate([0, 0, i * thread_pitch])\n            cylinder(d=nozzle_diameter + 1, h=thread_pitch/2);\n        }\n    }\n}\n\nmodule cap() {\n    // Screw-on cap with internal threads\n    difference() {\n        // Cap body\n        cylinder(d=cap_diameter + 2, h=cap_height);\n        \n        // Internal cavity\n        translate([0, 0, 2])\n        cylinder(d=cap_diameter, h=cap_height);\n        \n        // Internal threads\n        for(i = [0:7]) {\n            translate([0, 0, 2 + i * thread_pitch])\n            cylinder(d=cap_diameter - 1, h=thread_pitch/2);\n        }\n        \n        // Top lip\n        translate([0, 0, cap_height - 1])\n        cylinder(d=cap_diameter + 3, h=2);\n    }\n    \n    // Hanging loop\n    translate([cap_diameter/2 + 1, 0, cap_height - 3])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(d=4, h=8);\n        cylinder(d=2, h=8.5);\n    }\n}\n\nmodule paint_label() {\n    // Raised label area\n    translate([0, -(tube_diameter*0.85)/2 - 0.5, tube_height/2])\n    cube([tube_diameter*0.8, 1, tube_height*0.6], center=true);\n    \n    // Color indicator stripe\n    translate([0, -(tube_diameter*0.85)/2 - 0.5, tube_height - 20])\n    color(\"red\")\n    cube([tube_diameter*0.6, 1.2, 8], center=true);\n}\n\n// Assemble the paint tube\nunion() {\n    tube_body();\n    \n    translate([0, 0, tube_height])\n    nozzle();\n    \n    // Position cap slightly offset to show it's removable\n    translate([0, -(cap_diameter + 5), tube_height + nozzle_length - cap_height + 3])\n    cap();\n    \n    paint_label();\n}",
    "renders": true
  },
  {
    "household_item": "varnish",
    "openscad_code": "// Realistic varnish bottle with cap and brush\n// Total height: 85mm, suitable for 3D printing\n\nmodule bottle_body() {\n    // Main bottle body - slightly tapered cylinder\n    difference() {\n        cylinder(h = 55, r1 = 18, r2 = 16, $fn = 32);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 53, r1 = 15.5, r2 = 13.5, $fn = 32);\n        \n        // Fillets at bottom inside\n        translate([0, 0, 0.5])\n            cylinder(h = 2, r1 = 15.5, r2 = 15.5, $fn = 32);\n    }\n    \n    // Bottom base ring\n    translate([0, 0, -1])\n        cylinder(h = 2, r = 19, $fn = 32);\n}\n\nmodule bottle_neck() {\n    // Neck with threads\n    difference() {\n        cylinder(h = 12, r = 10, $fn = 32);\n        \n        // Hollow neck\n        translate([0, 0, 0])\n            cylinder(h = 12, r = 8, $fn = 32);\n    }\n    \n    // Thread ridges (4 turns)\n    for(i = [0:3]) {\n        translate([0, 0, i * 2.5 + 1])\n            rotate_extrude($fn = 32)\n                translate([9.5, 0, 0])\n                    square([0.5, 1.5]);\n    }\n}\n\nmodule cap() {\n    // Main cap body\n    difference() {\n        cylinder(h = 18, r = 12, $fn = 32);\n        \n        // Hollow for threads\n        translate([0, 0, 2])\n            cylinder(h = 16, r = 10.5, $fn = 32);\n        \n        // Thread grooves (4 turns)\n        for(i = [0:3]) {\n            translate([0, 0, i * 2.5 + 3])\n                rotate_extrude($fn = 32)\n                    translate([10.5, 0, 0])\n                        square([0.5, 1.5]);\n        }\n    }\n    \n    // Top grip ridges\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([11.5, 0, 15])\n                cube([1, 2, 3], center = true);\n        }\n    }\n}\n\nmodule brush_assembly() {\n    // Handle attached to cap\n    translate([0, 0, -8]) {\n        cylinder(h = 35, r = 2.5, $fn = 16);\n        \n        // Tapered brush tip\n        translate([0, 0, 35])\n            cylinder(h = 5, r1 = 2.5, r2 = 0.5, $fn = 16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bottle assembly\n    union() {\n        bottle_body();\n        translate([0, 0, 55])\n            bottle_neck();\n    }\n    \n    // Cap assembly\n    translate([0, 0, 67])\n        union() {\n            cap();\n            brush_assembly();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "lacquer",
    "openscad_code": "// OpenSCAD code for a realistic-style lacquer (traditional Japanese urushi container)\n// Overall dimensions: 80 mm tall, 55 mm diameter (fits most FDM printers)\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main body\nmodule lacquer_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main bowl shape\n            cylinder(h = 60, d1 = 55, d2 = 52, center = false);\n            \n            // Base ring\n            translate([0, 0, -5])\n                cylinder(h = 10, d = 45, center = false);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 5])\n            cylinder(h = 55, d1 = 45, d2 = 42, center = false);\n    }\n}\n\n// Lid\nmodule lacquer_lid() {\n    difference() {\n        // Lid top\n        union() {\n            // Main lid dome\n            translate([0, 0, 60])\n                cylinder(h = 12, d1 = 54, d2 = 56, center = false);\n            \n            // Lid rim\n            translate([0, 0, 58])\n                cylinder(h = 5, d = 57, center = false);\n        }\n        \n        // Interior cavity\n        translate([0, 0, 60])\n            cylinder(h = 10, d = 50, center = false);\n    }\n    \n    // Handle (mushroom-shaped)\n    translate([0, 0, 74])\n        union() {\n            cylinder(h = 8, d = 12, center = false);\n            translate([0, 0, 8])\n                sphere(d = 18);\n        }\n}\n\n// Decorative band around the middle\nmodule decorative_band() {\n    color(\"gold\")\n    for (i = [30:3:55]) {\n        rotate([0, 0, i * 10])\n            translate([26.5, 0, 32])\n                cube([1.5, 1, 2]);\n    }\n}\n\n// Base support ring\nmodule base_support() {\n    difference() {\n        cylinder(h = 3, d = 48, center = false);\n        translate([0, 0, -1])\n            cylinder(h = 5, d = 40, center = false);\n    }\n}\n\n// Assembly\nlacquer_body();\ntranslate([0, 0, 3]) base_support();\ntranslate([0, 0, 0]) decorative_band();\nlacquer_lid();",
    "renders": true
  },
  {
    "household_item": "stain",
    "openscad_code": "// Realistic Coffee Stain with Medium Complexity\n// Size: 80mm diameter, 3mm thick\n\n// Overall dimensions\n$fn = 32;\nstain_diameter = 80;\nstain_thickness = 3;\nwall_thickness = 1.2;\n\n// Main stain base\nmodule stain_base() {\n    difference() {\n        // Outer ring with slight irregularity\n        union() {\n            cylinder(h = stain_thickness, r = stain_diameter/2, center = true);\n            \n            // Add irregular bumps around edge\n            for(i = [0:15:359]) {\n                translate([sin(i) * (stain_diameter/2 + 1.5), \n                          cos(i) * (stain_diameter/2 + 1.5), 0])\n                    scale([1 + sin(i*3)*0.3, 1 + cos(i*3)*0.3, 1])\n                        cylinder(h = stain_thickness, r = 2.5, center = true);\n            }\n        }\n        \n        // Hollow center\n        cylinder(h = stain_thickness + 1, r = stain_diameter/2 - wall_thickness, center = true);\n    }\n}\n\n// Coffee ring stain pattern\nmodule coffee_ring() {\n    difference() {\n        // Main ring\n        cylinder(h = stain_thickness/2, r = stain_diameter/2 - 5, center = true);\n        \n        // Inner clean area\n        cylinder(h = stain_thickness/2 + 0.5, r = stain_diameter/4, center = true);\n    }\n}\n\n// Splatter details\nmodule splatter() {\n    // Random small splatters\n    for(i = [0:20:359]) {\n        angle = i + (sin(i*5)*10);\n        distance = stain_diameter/2 + 3 + sin(i*7)*5;\n        \n        translate([sin(angle) * distance, cos(angle) * distance, stain_thickness/2 - 0.5])\n            rotate([90, 0, i])\n                scale([1 + sin(i*3)*0.5, 1 + cos(i*3)*0.5, 1])\n                    cylinder(h = 0.5, r1 = 1.5, r2 = 0.5, center = true);\n    }\n}\n\n// Surface texture for realistic look\nmodule surface_texture() {\n    for(x = [-35:5:35]) {\n        for(y = [-35:5:35]) {\n            if(sqrt(x*x + y*y) < stain_diameter/2 - 5) {\n                translate([x + sin(x*y)*2, y + cos(x*y)*2, stain_thickness/2 + 0.1])\n                    sphere(r = 0.3 + sin(x*3)*0.1);\n            }\n        }\n    }\n}\n\n// Combine all elements\nunion() {\n    // Main stain body\n    stain_base();\n    \n    // Coffee ring\n    translate([0, 0, stain_thickness/4])\n        coffee_ring();\n    \n    // Splatter effects\n    splatter();\n    \n    // Surface details\n    surface_texture();\n}\n\n// Add subtle bottom nubs for 3D printing stability\ndifference() {\n    translate([0, 0, -stain_thickness/2 - 0.5])\n        cube([stain_diameter, stain_diameter, 0.5], center = true);\n    \n    translate([0, 0, -stain_thickness/2 - 0.5])\n        cube([stain_diameter - 4, stain_diameter - 4, 1], center = true);\n}",
    "renders": true
  },
  {
    "household_item": "wax",
    "openscad_code": "// Realistic 3D-Printable Wax Seal Stamp\n// Medium complexity (~110 lines)\n\n// Adjustable parameters\nstamp_d = 30;          // stamp-head diameter (mm)\nstamp_h = 10;          // stamp-head height\nhandle_d = 12;         // handle diameter\nhandle_l = 60;         // handle length\nwall_t = 2;            // wall thickness for printability\nletter = \"W\";          // single capital letter to emboss\n\n// Main assembly\nmodule wax_stamp() {\n    union() {\n        stamp_head();\n        handle();\n    }\n}\n\n// Stamp head with raised letter and relief ring\nmodule stamp_head() {\n    difference() {\n        // Solid head cylinder\n        cylinder(d = stamp_d, h = stamp_h, $fn = 64);\n\n        // Embossed letter cavity\n        translate([0, 0, -0.1])\n            linear_extrude(height = 1.5)\n                text(letter, size = stamp_d * 0.5, halign = \"center\", valign = \"center\");\n\n        // Relief ring groove for realism\n        translate([0, 0, stamp_h - 2])\n            cylinder(d1 = stamp_d - 4, d2 = stamp_d - 4, h = 2, $fn = 64);\n    }\n\n    // Decorative concentric rings on top\n    for (i = [1 : 3]) {\n        color(\"gold\")\n        translate([0, 0, stamp_h])\n            cylinder(d = stamp_d - i * 6, h = 0.5, $fn = 64);\n    }\n}\n\n// Ergonomic handle with grip rings\nmodule handle() {\n    union() {\n        // Main handle shaft\n        translate([0, 0, stamp_h])\n            cylinder(d = handle_d, h = handle_l, $fn = 32);\n\n        // Grip rings for better handling\n        for (i = [1 : 5]) {\n            translate([0, 0, stamp_h + i * 10])\n                cylinder(d1 = handle_d + 2, d2 = handle_d + 2, h = 2, $fn = 32);\n        }\n\n        // Tapered end\n        translate([0, 0, stamp_h + handle_l])\n            cylinder(d1 = handle_d, d2 = 0, h = 5, $fn = 32);\n    }\n}\n\n// Optional support base for printing stability\nmodule support_base() {\n    difference() {\n        // Wide base\n        cylinder(d = stamp_d + 10, h = 2, $fn = 64);\n        \n        // Cutout to fit stamp head\n        translate([0, 0, -0.1])\n            cylinder(d = stamp_d + 0.2, h = 2.2, $fn = 64);\n    }\n}\n\n// Generate the model\nwax_stamp();\n\n// Uncomment to add support base for printing\n// translate([0, 0, -2]) support_base();",
    "renders": true
  },
  {
    "household_item": "polish",
    "openscad_code": "// Realistic Nail Polish Bottle - Medium Complexity\n// Overall height ~85 mm, suitable for 3D printing\n\n$fn = 40;\n\n// Main module\nmodule nail_polish() {\n    // Bottle body\n    difference() {\n        // Main bottle shape\n        union() {\n            // Cylindrical body\n            cylinder(h = 55, r = 18, center = false);\n            \n            // Rounded shoulder\n            translate([0, 0, 55])\n                cylinder(h = 8, r1 = 18, r2 = 15, center = false);\n            \n            // Neck\n            translate([0, 0, 63])\n                cylinder(h = 12, r = 8, center = false);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 74, r = 15, center = false);\n            \n        // Inner shoulder taper\n        translate([0, 0, 54])\n            cylinder(h = 9, r1 = 15, r2 = 5, center = false);\n    }\n    \n    // Cap assembly\n    translate([0, 0, 75]) {\n        // Main cap body\n        difference() {\n            // Outer cap\n            cylinder(h = 20, r = 9.5, center = false);\n            \n            // Inner cavity for brush\n            translate([0, 0, 2])\n                cylinder(h = 18, r = 8.2, center = false);\n        }\n        \n        // Decorative ridges on cap\n        for (i = [0:5:355]) {\n            rotate([0, 0, i])\n                translate([9.2, 0, 0])\n                    cube([0.5, 1.2, 20], center = true);\n        }\n        \n        // Top dome\n        translate([0, 0, 20])\n            sphere(r = 9.5);\n    }\n    \n    // Brush handle (part of cap)\n    translate([0, 0, 75]) {\n        // Brush stem\n        cylinder(h = 45, r = 2.5, center = false);\n        \n        // Brush bristles (simplified)\n        translate([0, 0, 45]) {\n            difference() {\n                cylinder(h = 12, r = 4, center = false);\n                translate([0, 0, 6])\n                    cylinder(h = 6, r = 3, center = false);\n            }\n        }\n    }\n    \n    // Label area indentation\n    difference() {\n        translate([0, 0, 25])\n            cylinder(h = 25, r = 18.5, center = false);\n        translate([0, 0, 25])\n            cylinder(h = 25, r = 17.5, center = false);\n    }\n    \n    // Base ring\n    difference() {\n        cylinder(h = 3, r = 20, center = false);\n        cylinder(h = 3, r = 18, center = false);\n    }\n}\n\n// Render the polish\nnail_polish();",
    "renders": true
  },
  {
    "household_item": "oil",
    "openscad_code": "// Realistic Oil Bottle – 75 mm tall, 3D-printable\n// Medium complexity, built only with primitives & booleans\n\n$fn = 36;          // Good curve resolution\nwall = 1.5;        // Uniform wall thickness for FDM printing\nh_total = 75;      // Overall height\n\n// Base dimensions\nbase_d = 36;\nneck_d = 14;\ncap_d  = 18;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Outer profile (lathed shape)\n        rotate_extrude()\n            translate([0, -wall, 0])\n                polygon(points=[\n                    [0, 0],               // bottom center\n                    [base_d/2, 0],        // bottom edge\n                    [base_d/2 - 2, 50],   // taper\n                    [neck_d/2, 55],       // shoulder\n                    [neck_d/2, 60],       // neck\n                    [0, 60]\n                ]);\n        // Hollow interior\n        rotate_extrude()\n            translate([0, 0, wall])\n                polygon(points=[\n                    [0, wall],\n                    [base_d/2 - wall, wall],\n                    [base_d/2 - wall - 1, 50 - wall],\n                    [neck_d/2 - wall, 55 - wall],\n                    [neck_d/2 - wall, 60 - wall],\n                    [0, 60 - wall]\n                ]);\n    }\n}\n\n// Screw threads (simple trapezoid ring stack)\nmodule threads(n_turns = 3) {\n    step = 2;\n    for (i = [0 : n_turns - 1]) {\n        translate([0, 0, 60 + i * step])\n            difference() {\n                cylinder(h = step * 0.9, d1 = neck_d + 1.5, d2 = neck_d + 1.5);\n                cylinder(h = step * 0.9, d1 = neck_d - 1.5, d2 = neck_d - 1.5);\n            }\n    }\n}\n\n// Cap\nmodule cap() {\n    difference() {\n        union() {\n            // Main cap shell\n            cylinder(h = 10, d = cap_d);\n            // Grip ridges\n            for (i = [0 : 23]) {\n                rotate([0, 0, i * 15])\n                    translate([cap_d/2 - 1, -1, 0])\n                        cube([2, 2, 10]);\n            }\n        }\n        // Interior cavity\n        translate([0, 0, -0.01])\n            cylinder(h = 11, d = neck_d + 0.2);\n        // Internal threads\n        threads();\n    }\n}\n\n// Drop-in label recess\nmodule label_recess() {\n    translate([0, 0, 25])\n        difference() {\n            cylinder(h = 1, d = base_d - wall*2 + 0.5);\n            cylinder(h = 1.1, d = base_d - wall*2 - 8);\n        }\n}\n\n// Assembly\nbottle_body();\ntranslate([0, 0, 60])\n    threads();\ntranslate([0, 0, 70])\n    cap();\nlabel_recess();",
    "renders": true
  },
  {
    "household_item": "glue",
    "openscad_code": "// Realistic glue stick model - medium complexity\n// Approximate dimensions: 25mm diameter, 90mm height\n\n// Main parameters\n$fn = 32;\nglue_diameter = 25;\nglue_height = 50;\ncap_height = 40;\nbase_height = 15;\nthread_height = 8;\nthread_count = 3;\n\n// Color definitions\ncolor_cap = [0.8, 0.8, 0.8];\ncolor_body = [0.9, 0.9, 0.9];\ncolor_glue = [0.95, 0.9, 0.85];\n\n// Cap module\nmodule cap() {\n    difference() {\n        // Outer shell\n        cylinder(h=cap_height, d1=glue_diameter+4, d2=glue_diameter+1);\n        \n        // Inner cavity\n        translate([0, 0, 1])\n        cylinder(h=cap_height-2, d=glue_diameter+0.5);\n        \n        // Grip rings\n        for(i=[1:3:cap_height-5]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=2, d=glue_diameter+4);\n                cylinder(h=2, d=glue_diameter+3);\n            }\n        }\n    }\n}\n\n// Threading module\nmodule threads() {\n    for(i=[0:thread_count-1]) {\n        translate([0, 0, i*(thread_height/thread_count)])\n        difference() {\n            cylinder(h=thread_height/thread_count, d=glue_diameter-1);\n            cylinder(h=thread_height/thread_count, d=glue_diameter-3);\n        }\n    }\n}\n\n// Base module\nmodule base() {\n    difference() {\n        union() {\n            // Main base cylinder\n            cylinder(h=base_height, d1=glue_diameter+2, d2=glue_diameter);\n            \n            // Bottom ridge\n            translate([0, 0, 0])\n            cylinder(h=2, d=glue_diameter+3);\n            \n            // Rotator grip\n            translate([0, 0, base_height-5])\n            cylinder(h=5, d=glue_diameter+4);\n        }\n        \n        // Thread cavity\n        translate([0, 0, base_height-thread_height-2])\n        threads();\n        \n        // Central hole for glue stick\n        translate([0, 0, base_height-thread_height-2])\n        cylinder(h=thread_height+10, d=glue_diameter-8);\n    }\n}\n\n// Glue stick module\nmodule glue_stick() {\n    union() {\n        // Main glue body\n        color(color_glue)\n        cylinder(h=glue_height, d=glue_diameter-0.5);\n        \n        // Top rounded surface\n        translate([0, 0, glue_height])\n        scale([1, 1, 0.5])\n        sphere(d=glue_diameter-0.5);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\ncolor(color_body)\nbase();\n\ntranslate([0, 0, base_height-thread_height-1])\ncolor(color_glue)\nglue_stick();\n\ntranslate([0, 0, base_height+glue_height-5])\nrotate([180, 0, 0])\ncolor(color_cap)\ncap();",
    "renders": true
  },
  {
    "household_item": "nail",
    "openscad_code": "// Realistic 3D printable nail (medium complexity)\n// Overall size ~75 mm\n\n// Nail head module\nmodule nail_head(diameter=9, thickness=2.2, bevel=0.6) {\n    difference() {\n        // Main disk\n        cylinder(d=diameter, h=thickness, $fn=60);\n        // Top bevel\n        translate([0,0,thickness-bevel])\n            cylinder(d1=diameter, d2=diameter-1.2, h=bevel, $fn=60);\n        // Bottom fillet\n        translate([0,0,-0.1])\n            cylinder(d1=diameter-1.4, d2=diameter, h=bevel+0.1, $fn=60);\n    }\n}\n\n// Tapered shank module\nmodule nail_shank(length=65, base_d=3.2, tip_d=1.8) {\n    steps = 20;\n    union() {\n        // Main tapered cylinder\n        cylinder(d1=base_d, d2=tip_d, h=length, $fn=24);\n        \n        // Subtle textured rings for grip\n        for(i=[0:steps-1]) {\n            height = i * (length/steps);\n            diameter = base_d - (base_d-tip_d)*(height/length) + 0.1;\n            translate([0,0,height])\n                cylinder(d=diameter, h=0.3, $fn=24);\n        }\n    }\n}\n\n// Diamond point module\nmodule diamond_point(base_d=1.8, length=6) {\n    // Four-sided pyramid\n    union() {\n        // Front/back faces\n        for(a=[0,90]) rotate([0,0,a])\n            translate([0,-base_d/2,0])\n                polyhedron(\n                    points=[[0,0,0], [0,base_d,0], [0,0,length]],\n                    faces=[[0,1,2]]\n                );\n        mirror([1,0,0])\n            translate([0,-base_d/2,0])\n                polyhedron(\n                    points=[[0,0,0], [0,base_d,0], [0,0,length]],\n                    faces=[[0,1,2]]\n                );\n    }\n}\n\n// Assemble the nail\ntranslate([0,0,2.2]) {\n    // Nail head\n    nail_head();\n}\n\n// Shank\ntranslate([0,0,-65])\n    nail_shank();\n\n// Point\ntranslate([0,0,-65-6])\n    diamond_point();",
    "renders": true
  },
  {
    "household_item": "screw",
    "openscad_code": "// Realistic 3D-printable screw ~80 mm overall length\n// Medium complexity – threaded shaft, slotted head, tapered tip\n\n// Parameters\nshaft_d = 12;           // shaft diameter\nshaft_L = 60;           // shaft length\nhead_d = 22;            // head diameter\nhead_h = 6;             // head height\nslot_w = 2.4;           // slot width\nslot_d = 3.5;           // slot depth\nthread_pitch = 3;       // axial distance per 360° turn\nthread_depth = 0.8;     // radial thread height\ntip_angle = 90;         // tip cone angle (deg)\nsegments = 36;          // $fn for cylinders\n\n// Overall screw\nunion() {\n    // Head with slotted drive\n    screw_head();\n\n    // Threaded shaft\n    translate([0, 0, -shaft_L])\n        threaded_shaft();\n}\n\n// Head module\nmodule screw_head() {\n    difference() {\n        // Main cylindrical head\n        cylinder(h = head_h, d = head_d, $fn = segments);\n\n        // Slotted drive recess\n        translate([0, 0, head_h - slot_d])\n            cube([slot_w, head_d * 1.1, slot_d * 1.1], center = true);\n    }\n}\n\n// Threaded shaft with tip\nmodule threaded_shaft() {\n    union() {\n        // Core cylinder (printable thick wall)\n        cylinder(h = shaft_L - shaft_d/2, d = shaft_d, $fn = segments);\n\n        // Tapered tip\n        translate([0, 0, shaft_L - shaft_d/2])\n            cylinder(h = shaft_d/2, d1 = shaft_d, d2 = 0, $fn = segments);\n\n        // External threads\n        threads();\n    }\n}\n\n// Generate external threads (V-profile)\nmodule threads() {\n    turns = ceil(shaft_L / thread_pitch);\n\n    // Helical thread turns\n    for (i = [0 : turns - 1]) {\n        // Each 360° turn is split into small facets for printability\n        facet_count = segments;\n        for (j = [0 : facet_count - 1]) {\n            angle_start = j * 360 / facet_count;\n            angle_end   = (j + 1) * 360 / facet_count;\n            h_start     = i * thread_pitch + j * thread_pitch / facet_count;\n            h_end       = i * thread_pitch + (j + 1) * thread_pitch / facet_count;\n\n            hull() {\n                // Leading edge\n                translate(thread_point(angle_start, h_start))\n                    sphere(d = thread_depth * 2, $fn = 8);\n                // Trailing edge\n                translate(thread_point(angle_end, h_end))\n                    sphere(d = thread_depth * 2, $fn = 8);\n            }\n        }\n    }\n}\n\n// Helper: point on thread helix\nfunction thread_point(a, h) = [\n    (shaft_d/2 + thread_depth) * cos(a),\n    (shaft_d/2 + thread_depth) * sin(a),\n    h\n];",
    "renders": true
  },
  {
    "household_item": "nut",
    "openscad_code": "// Realistic hex nut with chamfers and threads\n// Designed for 3D printing, no support needed\n\n// Nut parameters\nnut_diameter = 50;          // Outer diameter across flats\nnut_height = 20;            // Overall height\nhole_diameter = 22;         // Thread hole diameter\nchamfer_size = 1.5;         // Chamfer on edges\nbevel_angle = 30;           // Top bevel angle for easier starting\nwall_thickness = 3;         // Minimum wall thickness for printing\n\n// Calculate hex dimensions\nhex_radius = nut_diameter / 2;\nhex_flat = hex_radius * cos(30);\n\nmodule hexagon() {\n    // Create hexagon using 6 rectangular segments\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) \n            translate([hex_radius/2, 0, 0])\n                cube([hex_radius, hex_flat * 2, nut_height], center = true);\n    }\n}\n\nmodule chamfered_hex() {\n    difference() {\n        // Main hex body\n        hexagon();\n        \n        // Top chamfer\n        translate([0, 0, nut_height/2 - chamfer_size/2])\n            scale([1, 1, 0.5])\n                cylinder(h = chamfer_size * 2, r = hex_radius + 1, $fn = 6);\n        \n        // Bottom chamfer\n        translate([0, 0, -nut_height/2 + chamfer_size/2])\n            scale([1, 1, 0.5])\n                cylinder(h = chamfer_size * 2, r = hex_radius + 1, $fn = 6);\n    }\n}\n\nmodule beveled_top() {\n    // Add bevel on top for easier thread starting\n    intersection() {\n        // Main body\n        chamfered_hex();\n        \n        // Beveled top using cone subtraction\n        difference() {\n            cube([nut_diameter * 2, nut_diameter * 2, nut_height], center = true);\n            translate([0, 0, nut_height/2 - tan(bevel_angle) * (hex_radius - hole_diameter/2)])\n                cylinder(h = nut_height * 2, r1 = hex_radius, r2 = hole_diameter/2, center = true);\n        }\n    }\n}\n\nmodule threaded_hole() {\n    // Create threaded hole with clearance\n    difference() {\n        // Main hole\n        cylinder(h = nut_height + 2, r = hole_diameter/2, center = true);\n        \n        // Add thread relief grooves\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, hole_diameter/2 + 0.5, -nut_height/2 + 2 + i * 4])\n                    cube([1, 1, 2], center = true);\n        }\n    }\n}\n\nmodule realistic_nut() {\n    difference() {\n        // Main nut body with beveled top\n        beveled_top();\n        \n        // Threaded hole\n        threaded_hole();\n        \n        // Add center mark for alignment\n        translate([0, 0, nut_height/2 + 0.1])\n            cylinder(h = 0.5, r = 2, $fn = 20);\n    }\n}\n\n// Generate the nut\nrealistic_nut();",
    "renders": true
  },
  {
    "household_item": "washer",
    "openscad_code": "// Realistic 3D printable washer with chamfers and texture\n// Outside diameter 60 mm, inside 20 mm, thickness 3 mm\n\nmodule chamfer_profile(d, h, angle=45) {\n    // Create a chamfer profile for edges\n    linear_extrude(height=h, center=true, convexity=2)\n    polygon([\n        [0, 0],\n        [d*cos(angle), d*sin(angle)],\n        [d*cos(angle), h-d*sin(angle)],\n        [0, h]\n    ]);\n}\n\nmodule textured_surface(d_outer, d_inner, thickness) {\n    // Add grip texture on outer rim\n    difference() {\n        cylinder(h=thickness, d=d_outer+0.2, $fn=100);\n        cylinder(h=thickness+0.1, d=d_outer, $fn=100);\n    }\n    \n    // Small raised ridges for grip\n    for(i=[0:15]) {\n        rotate([0, 0, i*24])\n        translate([0, d_outer/2 - 2, -0.1])\n        cube([1.5, 3.5, thickness+0.2], center=true);\n    }\n}\n\nmodule washer_body(od, id, t) {\n    // Main washer body with chamfers\n    difference() {\n        // Outer cylinder with top/bottom chamfers\n        union() {\n            cylinder(h=t-1, d=od, $fn=100);\n            \n            // Top chamfer\n            translate([0, 0, t/2-0.5])\n            scale([1, 1, 0.5])\n            cylinder(h=1, d1=od, d2=od-2, $fn=100);\n            \n            // Bottom chamfer\n            translate([0, 0, -t/2+0.5])\n            scale([1, 1, 0.5])\n            cylinder(h=1, d1=od-2, d2=od, $fn=100);\n        }\n        \n        // Inner hole with chamfers\n        difference() {\n            cylinder(h=t+2, d=id, $fn=60);\n            \n            // Top inner chamfer\n            translate([0, 0, t/2+0.5])\n            scale([1, 1, 0.5])\n            cylinder(h=1, d1=id+2, d2=id, $fn=60);\n            \n            // Bottom inner chamfer\n            translate([0, 0, -t/2-0.5])\n            scale([1, 1, 0.5])\n            cylinder(h=1, d1=id, d2=id+2, $fn=60);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        washer_body(60, 20, 3);\n        textured_surface(60, 20, 3);\n    }\n    \n    // Lightening holes (optional)\n    for(i=[0:5]) {\n        rotate([0, 0, i*60+30])\n        translate([40, 0, 0])\n        cylinder(h=4, d=4, $fn=20);\n    }\n}\n\n// Add material thickness indicator\n%translate([0, 0, -4])\ncolor(\"gray\", 0.3)\ncube([80, 80, 0.5], center=true);",
    "renders": true
  },
  {
    "household_item": "rivet",
    "openscad_code": "// Rivet - Realistic Style, Medium Complexity\n// Overall dimensions ~60mm height, 20mm diameter\n\nmodule rivet_head() {\n    // Main head - shallow dome\n    translate([0,0,2])\n    rotate_extrude(angle=360, $fn=64)\n    translate([0,0])\n    polygon(points=[\n        [0,0],\n        [10,0],\n        [9.5,2],\n        [8,3.5],\n        [6,4.5],\n        [4,5],\n        [2,5],\n        [0,5]\n    ]);\n}\n\nmodule rivet_shank() {\n    // Main shank cylinder\n    cylinder(h=50, d=10, $fn=64);\n    \n    // Tapered entry tip\n    translate([0,0,-5])\n    cylinder(h=5, d1=10, d2=7, $fn=64);\n}\n\nmodule rivet_tail() {\n    // Factory head - flat with slight taper\n    translate([0,0,-7])\n    difference() {\n        cylinder(h=7, d=18, $fn=64);\n        \n        // Taper underside\n        translate([0,0,-0.1])\n        cylinder(h=7.2, d1=16, d2=18, $fn=64);\n    }\n    \n    // Annular rings for grip\n    for(i=[-6.5:-1.5:-3.5]) {\n        translate([0,0,i])\n        difference() {\n            cylinder(h=0.5, d=18.5, $fn=64);\n            cylinder(h=0.7, d=17.5, $fn=64);\n        }\n    }\n}\n\nmodule rivet_markings() {\n    // Manufacturing marks on head\n    rotate([0,0,0])\n    translate([0,0,7])\n    linear_extrude(height=0.2)\n    text(\"A2\", size=3, halign=\"center\", valign=\"center\");\n    \n    // 4 radial marks\n    for(i=[0:90:270]) {\n        rotate([0,0,i])\n        translate([5,0,7])\n        cube([2,0.5,0.2]);\n    }\n}\n\n// Main assembly\nunion() {\n    rivet_head();\n    rivet_shank();\n    rivet_tail();\n    rivet_markings();\n}\n\n// Optional support ring for printing (remove after)\n%translate([0,0,-12])\ncylinder(h=1, d=20, $fn=64);",
    "renders": true
  },
  {
    "household_item": "staple",
    "openscad_code": "// Realistic 3D printable staple\n// Overall length ~70 mm, printable without support\n\n$fn = 32;\n\n// Main parameters\nwire_d = 2.0;            // Wire diameter\nwire_r = wire_d / 2;\ncrown_l = 50;            // Crown length\ncrown_h = 7;             // Crown height\nleg_l = 30;              // Leg length\nbend_inset = 4;          // Inset for sharper bends\nwall_th = 1.5;           // Wall thickness for 3D printing\nchamfer = 0.5;           // Chamfer for printability\n\nmodule staple() {\n    difference() {\n        union() {\n            // Crown top arc\n            translate([0, crown_h - wire_r, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = crown_l, r = wire_r);\n\n            // Crown left leg transition\n            translate([-crown_l/2 + wire_r, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = crown_h - wire_r, r = wire_r);\n\n            // Crown right leg transition\n            translate([crown_l/2 - wire_r, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = crown_h - wire_r, r = wire_r);\n\n            // Left leg\n            translate([-crown_l/2 + wire_r, -leg_l/2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = leg_l, r = wire_r);\n\n            // Right leg\n            translate([crown_l/2 - wire_r, -leg_l/2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = leg_l, r = wire_r);\n\n            // Fill gaps at bends for smooth transition\n            translate([-crown_l/2 + wire_r - bend_inset, crown_h - wire_r, 0])\n                sphere(r = wire_r);\n            translate([crown_l/2 - wire_r + bend_inset, crown_h - wire_r, 0])\n                sphere(r = wire_r);\n            translate([-crown_l/2 + wire_r, -wire_r, 0])\n                sphere(r = wire_r);\n            translate([crown_l/2 - wire_r, -wire_r, 0])\n                sphere(r = wire_r);\n        }\n\n        // Chamfer bottom edges for easier printing\n        translate([0, -leg_l - 1, 0])\n            cube([crown_l + 2*wire_d, 2, 2*wire_d], center = true);\n\n        // Chamfer top edges\n        translate([0, crown_h + 1, 0])\n            cube([crown_l + 2*wire_d, 2, 2*wire_d], center = true);\n    }\n}\n\n// Position staple flat on build plate\nrotate([0, 90, 0])\n    staple();",
    "renders": true
  },
  {
    "household_item": "tack",
    "openscad_code": "// Realistic 3D printable tack\n// Overall height ≈ 55 mm, head diameter ≈ 20 mm\n\n$fn = 50;\ntolerance = 0.2;\n\nmodule tack_head() {\n    // Main dome\n    translate([0,0,12])\n        sphere(d = 20);\n\n    // Chamfered edge\n    difference() {\n        translate([0,0,12])\n            sphere(d = 20.5);\n        translate([0,0,10.8])\n            cylinder(h = 5, d = 15, center = false);\n    }\n\n    // Tiny grip ring\n    for(i = [1:3]) {\n        translate([0,0,10.4 - i*0.4])\n            difference() {\n                cylinder(h = 0.3, d = 19.5);\n                cylinder(h = 0.4, d = 18.5);\n            }\n    }\n}\n\nmodule tack_shaft() {\n    // Tapered needle\n    cylinder(h1 = 1.2, h2 = 0.8, h = 38, $fn = 6);\n\n    // Threaded section\n    for(i = [0:19]) {\n        translate([0,0,i * 1.8])\n            difference() {\n                cylinder(h = 1.2, d = 2.8);\n                cube([2.8, 0.4, 1.2], center = true);\n            }\n    }\n\n    // Tip\n    translate([0,0,38])\n        cylinder(h1 = 0, h2 = 0.8, h = 1.5, $fn = 6);\n}\n\nmodule tack_base() {\n    // Solid collar under head\n    translate([0,0,10])\n        cylinder(h = 2, d = 14);\n\n    // Reinforced stem\n    translate([0,0,0])\n        difference() {\n            cylinder(h = 10, d = 5);\n            translate([0,0,9])\n                cylinder(h1 = 1, h2 = 0, h = 1.5, $fn = 6);\n        }\n}\n\nunion() {\n    tack_head();\n    tack_base();\n    translate([0,0,2])\n        tack_shaft();\n}",
    "renders": true
  },
  {
    "household_item": "pin",
    "openscad_code": "// Realistic 3D-printable pin with medium detail\n// Overall dimensions ~55 mm height, ~12 mm diameter\n\n// Pin shaft module with smooth tip\nmodule pin_shaft() {\n    difference() {\n        // Main shaft cylinder\n        cylinder(h = 45, d = 2.5, $fn = 32);\n        \n        // Chamfer on bottom for easier insertion\n        translate([0, 0, -0.5])\n            cylinder(h = 2, d1 = 2.5, d2 = 1.5, $fn = 32);\n    }\n}\n\n// Pin head with realistic grip ridges\nmodule pin_head() {\n    // Main head cylinder\n    cylinder(h = 10, d = 12, $fn = 64);\n    \n    // Top dome for smooth finish\n    translate([0, 0, 10])\n        sphere(d = 12, $fn = 64);\n}\n\n// Grip ridges around the head\nmodule grip_ridges() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([5.5, 0, 2])\n                cube([1, 0.5, 6], center = true);\n    }\n}\n\n// Flattened side for thumb grip\nmodule thumb_flat() {\n    translate([0, -6, 5])\n        cube([12, 3, 10], center = true);\n}\n\n// Safety collar to prevent over-insertion\nmodule safety_collar() {\n    difference() {\n        cylinder(h = 3, d = 6, $fn = 32);\n        \n        // Center hole for shaft\n        cylinder(h = 3.5, d = 2.6, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Shaft assembly\n    union() {\n        translate([0, 0, 0])\n            pin_shaft();\n        \n        // Safety collar 2mm from tip\n        translate([0, 0, 43])\n            safety_collar();\n    }\n    \n    // Head assembly\n    translate([0, 0, 45])\n        difference() {\n            union() {\n                pin_head();\n                grip_ridges();\n            }\n            \n            // Thumb grip flat\n            thumb_flat();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "clip",
    "openscad_code": "// Medium-complexity realistic 3D-printable clip\n// Overall length ≈ 80 mm, width ≈ 15 mm, thickness ≈ 5 mm\n\n$fn = 36;\n\n// Main clip body\nmodule clip_body() {\n    difference() {\n        // Base curved beam\n        union() {\n            // Lower arm\n            translate([0, -5, 2.5])\n                cube([70, 10, 5], center=true);\n\n            // Upper spring arm\n            translate([0, 5, 2.5])\n                cube([70, 10, 5], center=true);\n\n            // Rounded front\n            translate([35, 0, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r=2.5, center=true);\n\n            // Rounded back\n            translate([-35, 0, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r=2.5, center=true);\n        }\n\n        // Grip holes\n        for (x = [-25, 0, 25])\n            translate([x, 0, 2.5])\n                cylinder(h=6, r=3, center=true);\n    }\n}\n\n// Grip pads\nmodule grip_pads() {\n    for (side = [-1, 1]) {\n        for (x = [-25, 0, 25]) {\n            translate([x, side * 7.5, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r=1.5, center=true);\n        }\n    }\n}\n\n// Spring hinge\nmodule spring_hinge() {\n    difference() {\n        // Outer cylinders\n        union() {\n            for (y = [-5, 5])\n                translate([-30, y, 2.5])\n                    rotate([0, 90, 0])\n                        cylinder(h=12, r=3, center=true);\n        }\n\n        // Inner hole\n        translate([-30, 0, 2.5])\n            rotate([0, 90, 0])\n                cylinder(h=25, r=1.5, center=true);\n    }\n\n    // Spring gap\n    translate([-30, 0, 5])\n        cube([6, 12, 1], center=true);\n}\n\n// Assembly\nunion() {\n    clip_body();\n    grip_pads();\n    spring_hinge();\n}",
    "renders": true
  },
  {
    "household_item": "clamp",
    "openscad_code": "// Medium-complexity realistic clamp\n// Overall printable length ~85 mm, height ~30 mm\n\n$fn = 36;\n\nmodule screw(d=8, h=30, head_d=12, head_h=4, slot_w=2, slot_d=1.5) {\n    difference() {\n        union() {\n            cylinder(d=head_d, h=head_h);\n            translate([0, 0, head_h]) cylinder(d=d, h=h);\n        }\n        translate([0, 0, head_h - slot_d]) cube([head_d*1.2, slot_w, slot_d*2], center=true);\n    }\n}\n\nmodule handle(len=35, thick=5, dia=8) {\n    translate([0, 0, -len/2]) rotate([90, 0, 0])\n    difference() {\n        union() {\n            cylinder(d=dia, h=len);\n            translate([0, 0, len/2 - thick/2])\n            cube([dia*1.5, thick, thick], center=true);\n        }\n        translate([0, 0, -1]) cylinder(d=dia*0.6, h=len+2);\n    }\n}\n\nmodule jaw(length=40, width=15, thick=12, hole_d=9) {\n    difference() {\n        union() {\n            // main bar\n            translate([-length/2, -width/2, 0]) cube([length, width, thick]);\n\n            // rounded end\n            translate([length/2, 0, thick/2])\n            rotate([0, 90, 0]) cylinder(d=width, h=width);\n        }\n\n        // mounting hole\n        translate([0, 0, -1]) cylinder(d=hole_d, h=thick+2);\n\n        // clearance cut for screw head\n        translate([0, 0, -1]) cylinder(d=13, h=4.5);\n    }\n\n    // grip pads\n    for(y=[-width/2 + 2, width/2 - 2])\n    translate([length/2 - 3, y, thick])\n    cube([6, 2, 1.5]);\n\n    // teeth\n    for(i=[0:3]) {\n        translate([i*3 + 4, -width/2, 0]) cube([0.8, 1, thick]);\n        translate([i*3 + 4, width/2 - 1, 0]) cube([0.8, 1, thick]);\n    }\n}\n\nmodule clamp_assembly() {\n    // fixed jaw\n    jaw();\n\n    // sliding jaw\n    translate([50, 0, 0]) mirror([1, 0, 0]) jaw();\n\n    // guide bar\n    difference() {\n        translate([-5, -7.5, 6]) cube([60, 15, 5]);\n        translate([0, 0, 6-1]) cube([50, 9, 7], center=true);\n    }\n\n    // screw\n    translate([0, 0, 6]) rotate([0, 0, 0]) screw(h=50);\n\n    // handle\n    translate([0, 0, 6+50]) handle();\n}\n\nclamp_assembly();",
    "renders": true
  },
  {
    "household_item": "vise",
    "openscad_code": "// Medium-complexity 3D-printable bench vise\n// Approx. 80 mm wide, 50 mm deep, 60 mm tall\n// All overhangs ≤ 45°, 2 mm walls everywhere\n\n$fn = 24;\n\n// Main assembly\ndifference() {\n    union() {\n        // Fixed jaw body\n        vise_body();\n        \n        // Sliding jaw\n        translate([50,0,0]) sliding_jaw();\n        \n        // Lead screw\n        translate([-10,0,30]) rotate([0,90,0]) lead_screw();\n        \n        // Handle\n        translate([-20,0,30]) rotate([0,90,0]) handle();\n        \n        // Guide rails\n        guide_rails();\n    }\n    \n    // Holes and clearances\n    // Screw clearance through fixed jaw\n    translate([-5,0,30]) rotate([0,90,0]) cylinder(h=60, d=6.5);\n    \n    // Handle hole in screw\n    translate([-20,0,30]) rotate([0,0,90]) cylinder(h=50, d=4.5);\n    \n    // Jaw face grooves\n    jaw_grooves();\n}\n\nmodule vise_body() {\n    // Base plate\n    cube([30,40,10], center=true);\n    \n    // Fixed jaw upright\n    translate([10,0,20]) cube([10,36,40], center=true);\n    \n    // Mounting holes (4 corners)\n    for(x=[-12,12], y=[-15,15]) {\n        translate([x,y,-5]) cylinder(h=12, d=3.5);\n    }\n}\n\nmodule sliding_jaw() {\n    difference() {\n        // Jaw block\n        cube([10,36,40], center=true);\n        \n        // Internal thread (nut)\n        translate([0,0,0]) rotate([0,90,0]) cylinder(h=12, d=8);\n        \n        // Rail holes\n        for(y=[-15,15]) {\n            translate([0,y,0]) cylinder(h=12, d=6.5);\n        }\n    }\n}\n\nmodule guide_rails() {\n    for(y=[-15,15]) {\n        // Fixed rail\n        translate([25,y,30]) cylinder(h=25, d=6);\n        \n        // Rail supports\n        translate([12.5,y,15]) cube([25,4,30], center=true);\n    }\n}\n\nmodule lead_screw() {\n    // Threaded rod\n    cylinder(h=70, d=6);\n    \n    // Thread impression (simple grooves)\n    for(i=[0:3:60]) {\n        rotate([0,0,i*360/3]) \n        translate([0,0,i]) \n        cube([6.2,0.5,3], center=true);\n    }\n    \n    // End stop\n    translate([35,0,0]) cylinder(h=5, d=10);\n}\n\nmodule handle() {\n    // Grip tube\n    cylinder(h=40, d=8);\n    \n    // Knurling rings\n    for(i=[-15:5:15]) {\n        translate([i,0,0]) rotate([0,90,0]) \n        cylinder(h=8.2, d=9);\n    }\n}\n\nmodule jaw_grooves() {\n    // Vertical grooves on both jaws\n    for(x=[-10,60]) {\n        for(y=[-16:4:16]) {\n            translate([x,y,20]) cube([0.5,2,40], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "level",
    "openscad_code": "// Realistic Style Level – 3D-printable spirit level (medium complexity)\n\n// Overall dimensions (mm)\nlevel_length   = 80;\nlevel_width    = 30;\nlevel_height   = 15;\nwall_thick     = 2;          // minimum printable wall thickness\nbody_color     = \"Silver\";\nvial_color     = \"Clear\";\n\n// Helper module for rounded edges on a box\nmodule rounded_box(x,y,z,r)\n{\n    hull()\n    {\n        translate([ r,  r, 0]) cube([x-2*r, y-2*r, z], center=false);\n        translate([ r, y-r, 0]) cube([x-2*r, 0, z], center=false);\n        translate([x-r,  r, 0]) cube([0, y-2*r, z], center=false);\n        translate([x-r, y-r, 0]) cube([0,0,z], center=false);\n    }\n}\n\n// Main level body with hollow interior\nmodule level_body()\n{\n    difference()\n    {\n        // outer shell\n        rounded_box(level_length, level_width, level_height, 4);\n\n        // hollow cavity\n        translate([wall_thick, wall_thick, wall_thick])\n            rounded_box(level_length - 2*wall_thick,\n                        level_width  - 2*wall_thick,\n                        level_height - 2*wall_thick,\n                        2);\n    }\n}\n\n// Bubble vial module\nmodule vial(diam, span)\n{\n    // transparent tube\n    color(vial_color, 0.7)\n    rotate([90,0,0])\n        cylinder(h=span, d=diam, $fn=32);\n\n    // actual bubble\n    color(\"Green\")\n    translate([0, 0, span/2 - 2])\n        sphere(d=diam*0.4, $fn=16);\n}\n\n// Mounting vials at 0° and 90°\nmodule vial_assembly()\n{\n    vial_diam = 10;\n    vial_span = level_width - 6;   // slight clearance\n\n    // horizontal vial\n    translate([level_length/2, level_width/2, level_height/2])\n        vial(vial_diam, vial_span);\n\n    // vertical vial\n    translate([level_length/2 - 8, level_width/2, level_height/2])\n        rotate([0,0,90])\n            vial(vial_diam, vial_span);\n}\n\n// Measurement scale lines\nmodule scale_marks()\n{\n    mark_len = 2;\n    mark_depth = 0.5;\n    mark_step = 5;\n    for(i = [0 : mark_step : level_length - mark_step])\n    {\n        if(i % 10 == 0) mark_len = 3; else mark_len = 2;\n        translate([i + mark_step/2, wall_thick/2, mark_depth/2])\n            cube([0.5, mark_len, mark_depth]);\n        translate([i + mark_step/2, level_width - wall_thick/2 - mark_len, mark_depth/2])\n            cube([0.5, mark_len, mark_depth]);\n    }\n}\n\n// Assembly\nunion()\n{\n    level_body();\n    translate([0,0,level_height])  // scale on top surface\n        scale_marks();\n    vial_assembly();\n}",
    "renders": true
  },
  {
    "household_item": "square",
    "openscad_code": "// Realistic square tile with embossed details and mounting posts\n// Designed for 3D printing with no overhangs\n\n// Main parameters\ntile_size = 80;                 // Overall square size\nthickness = 8;                  // Tile thickness\ncorner_radius = 3;              // Corner rounding radius\nemboss_depth = 1.5;             // Embossing depth\npost_diameter = 4;              // Mounting post diameter\npost_height = 6;                // Mounting post height\nbevel_height = 1;               // Edge bevel height\n\n// Corner rounding module\nmodule rounded_square(size, radius, height) {\n    difference() {\n        // Base square\n        cube([size, size, height], center=true);\n        \n        // Remove corners\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (size/2 - radius), y * (size/2 - radius), -height/2 - 0.1])\n                    rotate([0, 0, x * y * 45])\n                        cube([radius * 2, radius * 2, height + 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Beveled edge module\nmodule beveled_edge(size, bevel, height) {\n    difference() {\n        cube([size, size, height], center=true);\n        \n        // Top bevel\n        translate([0, 0, height/2 - bevel])\n            cube([size + 2, size + 2, bevel * 2], center=true);\n    }\n}\n\n// Embossed pattern module\nmodule embossed_pattern() {\n    pattern_size = tile_size * 0.6;\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([pattern_size/4, 0, thickness/2 + 0.01])\n                linear_extrude(height=emboss_depth, convexity=10) {\n                    offset(r=2) offset(r=-4) offset(r=2) square([pattern_size/2, 6], center=true);\n                }\n    }\n}\n\n// Mounting posts module\nmodule mounting_posts() {\n    post_offset = tile_size/2 - 10;\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * post_offset, y * post_offset, -thickness/2 - post_height/2])\n                cylinder(h=post_height, d=post_diameter, $fn=16);\n        }\n    }\n}\n\n// Main tile assembly\nunion() {\n    // Base tile with rounded corners\n    difference() {\n        // Solid tile\n        union() {\n            rounded_square(tile_size, corner_radius, thickness);\n            beveled_edge(tile_size - 1, bevel_height, thickness);\n        }\n        \n        // Recessed bottom for posts\n        translate([0, 0, -thickness/2 - 0.1])\n            cube([tile_size - 6, tile_size - 6, 2], center=true);\n    }\n    \n    // Embossed details\n    embossed_pattern();\n    \n    // Mounting posts\n    mounting_posts();\n    \n    // Center indicator\n    translate([0, 0, thickness/2 + 0.01])\n        cylinder(h=emboss_depth, d=8, $fn=32);\n}",
    "renders": true
  },
  {
    "household_item": "ruler",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\nmodule ruler() {\n    // Overall dimensions\n    length = 100;\n    width = 20;\n    thickness = 3;\n    corner_radius = 2;\n    \n    // Main ruler body with rounded edges\n    difference() {\n        // Base block\n        cube([length, width, thickness], center = false);\n        \n        // Round corners on top face\n        translate([corner_radius, corner_radius, thickness])\n            cylinder(h = thickness + 0.1, r = corner_radius, $fn = 16);\n        translate([length - corner_radius, corner_radius, thickness])\n            cylinder(h = thickness + 0.1, r = corner_radius, $fn = 16);\n        translate([corner_radius, width - corner_radius, thickness])\n            cylinder(h = thickness + 0.1, r = corner_radius, $fn = 16);\n        translate([length - corner_radius, width - corner_radius, thickness])\n            cylinder(h = thickness + 0.1, r = corner_radius, $fn = 16);\n    }\n    \n    // Millimeter marks (every 5mm)\n    for (i = [0:5:length]) {\n        mark_height = (i % 10 == 0) ? 5 : 3;\n        mark_width = (i % 10 == 0) ? 1.5 : 0.5;\n        \n        translate([i + 1, 0, thickness]) {\n            cube([mark_width, mark_height, 1]);\n        }\n    }\n    \n    // Centimeter numbers (0-10)\n    for (i = [0:10:length]) {\n        translate([i + 1, 7, thickness + 0.5]) {\n            linear_extrude(height = 1) {\n                text(str(i/10), size = 4, halign = \"center\");\n            }\n        }\n    }\n    \n    // Inch marks (every 1/8 inch)\n    inch_length = 25.4; // mm per inch\n    for (i = [0:inch_length/8:length]) {\n        inch_mark_height = (i % inch_length == 0) ? 5 : \n                          (i % (inch_length/2) == 0) ? 4 : \n                          (i % (inch_length/4) == 0) ? 3.5 : 2.5;\n        inch_mark_width = (i % inch_length == 0) ? 1.5 : 0.5;\n        \n        translate([i + 1, width - inch_mark_height, thickness]) {\n            cube([inch_mark_width, inch_mark_height, 1]);\n        }\n    }\n    \n    // Inch numbers (0-3)\n    for (i = [0:inch_length:length]) {\n        translate([i + 1, width - 8, thickness + 0.5]) {\n            linear_extrude(height = 1) {\n                text(str(i/inch_length), size = 4, halign = \"center\");\n            }\n        }\n    }\n    \n    // Hanging hole\n    hole_offset = 5;\n    translate([hole_offset, width/2, thickness/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = thickness + 1, r = 2.5, $fn = 32);\n        }\n    }\n    \n    // Brand text\n    translate([length/2, width/2 - 2, thickness + 0.5]) {\n        linear_extrude(height = 0.5) {\n            text(\"METRIC\", size = 3, halign = \"center\");\n        }\n    }\n    translate([length/2, width/2 + 2, thickness + 0.5]) {\n        linear_extrude(height = 0.5) {\n            text(\"IMPERIAL\", size = 3, halign = \"center\");\n        }\n    }\n}\n\nruler();",
    "renders": true
  },
  {
    "household_item": "tape",
    "openscad_code": "// Realistic Compact Cassette Tape - OpenSCAD\n// 3D printable, medium complexity (~100mm width)\n\n$fn = 36;\n\n// Overall dimensions\ncassette_width = 102;\ncassette_height = 64;\ncassette_thickness = 12;\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Screw holes\nscrew_r = 1.5;\nscrew_depth = 4;\n\n// Tape hub dimensions\nhub_r = 7;\nhub_h = 4;\nhub_gap = 2;\n\n// Window for tape\nwindow_w = 80;\nwindow_h = 10;\n\n// Label area\nlabel_w = 90;\nlabel_h = 30;\n\n// Spool dimensions\nspool_r = 20;\nspool_h = 6;\nspool_clear = 0.5;\n\n// Main body\nmodule cassette_body() {\n    difference() {\n        // Outer shell\n        cube([cassette_width, cassette_height, cassette_thickness], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall/2])\n            cube([cassette_width-wall*2, cassette_height-wall*2, cassette_thickness-wall], center=true);\n    }\n}\n\n// Left tape hub\nmodule left_hub() {\n    translate([-33, 0, 0])\n        difference() {\n            cylinder(r=hub_r, h=hub_h, center=true);\n            cylinder(r=hub_r-3, h=hub_h+0.5, center=true);\n        }\n}\n\n// Right tape hub\nmodule right_hub() {\n    translate([33, 0, 0])\n        difference() {\n            cylinder(r=hub_r, h=hub_h, center=true);\n            cylinder(r=hub_r-3, h=hub_h+0.5, center=true);\n        }\n}\n\n// Tape view window\nmodule tape_window() {\n    translate([0, 0, cassette_thickness/2 - 0.5])\n        cube([window_w, window_h, 1], center=true);\n}\n\n// Screws - 5 positions\nmodule screws() {\n    positions = [\n        [-cassette_width/2 + 10, -cassette_height/2 + 10],\n        [-cassette_width/2 + 10, cassette_height/2 - 10],\n        [cassette_width/2 - 10, -cassette_height/2 + 10],\n        [cassette_width/2 - 10, cassette_height/2 - 10],\n        [0, cassette_height/2 - 10]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 0])\n            cylinder(r=screw_r, h=screw_depth*2, center=true);\n    }\n}\n\n// Label recess\nmodule label() {\n    translate([0, cassette_height/2 - label_h/2 - 5, cassette_thickness/2 - 0.5])\n        cube([label_w, label_h, 0.5], center=true);\n}\n\n// Spool (left)\nmodule left_spool() {\n    translate([-33, 0, 0])\n        difference() {\n            cylinder(r=spool_r, h=spool_h, center=true);\n            cylinder(r=spool_r-wall, h=spool_h+0.5, center=true);\n        }\n}\n\n// Spool (right)\nmodule right_spool() {\n    translate([33, 0, 0])\n        difference() {\n            cylinder(r=spool_r, h=spool_h, center=true);\n            cylinder(r=spool_r-wall, h=spool_h+0.5, center=true);\n        }\n}\n\n// Small teeth on spools for grip\nmodule spool_teeth() {\n    for(i = [0:5:359]) {\n        rotate([0, 0, i]) {\n            translate([-33, spool_r-0.5, 0])\n                cube([2, 1, spool_h], center=true);\n            translate([33, spool_r-0.5, 0])\n                cube([2, 1, spool_h], center=true);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Main body\n        cassette_body();\n        \n        // Hubs\n        left_hub();\n        right_hub();\n        \n        // Spools\n        left_spool();\n        right_spool();\n        \n        // Spool teeth\n        spool_teeth();\n    }\n    \n    // Remove window\n    tape_window();\n    \n    // Remove label recess\n    label();\n    \n    // Screw holes\n    translate([0, 0, cassette_thickness/2 - screw_depth/2])\n        screws();\n}",
    "renders": true
  },
  {
    "household_item": "chalk",
    "openscad_code": "// Realistic 3D-printable chalk stick\n// Overall length 75 mm, diameter 10 mm, with slight taper and worn tip\n\n// 0.2 mm clearance for 3D-printed fit\n$fn = 32;\n\nmodule chalk_body() {\n    // Main cylindrical body with gentle taper\n    for (i = [0:19]) {\n        h = i * 3.5;\n        r_top = 4.8 - 0.02 * h;\n        r_bot = 4.9 - 0.02 * h;\n        translate([0, 0, h])\n            cylinder(h = 3.5, r1 = r_bot, r2 = r_top, $fn = 24);\n    }\n}\n\nmodule chalk_tip() {\n    // Worn-down conical tip\n    cylinder(h = 8, r1 = 4.1, r2 = 0.3, $fn = 24);\n}\n\nmodule wear_ring() {\n    // Light circumferential wear near tip\n    difference() {\n        cylinder(h = 2, r = 4.05, $fn = 24);\n        translate([0, 0, -0.1])\n            cylinder(h = 2.2, r = 3.9, $fn = 24);\n    }\n}\n\nmodule micro_scratches() {\n    // Tiny random scratches for realism\n    for (i = [0:17]) {\n        rotate([0, 0, i * 20 + (i % 3) * 7])\n            translate([4.5, 0, 10 + i * 3])\n                rotate([90, 0, 0])\n                    scale([0.5, 0.1, 1])\n                        sphere(0.2);\n    }\n}\n\n// Assemble chalk\nunion() {\n    chalk_body();\n    translate([0, 0, 70])\n        chalk_tip();\n    translate([0, 0, 68])\n        wear_ring();\n    micro_scratches();\n}\n\n// Optional flat spot for printing stability\ntranslate([0, 0, -0.5])\n    difference() {\n        cylinder(h = 1, r = 5, $fn = 24);\n        translate([0, -5.2, 0])\n            cube([30, 30, 2], center = true);\n    }",
    "renders": true
  },
  {
    "household_item": "pencil",
    "openscad_code": "// Realistic 3D-printable pencil ~75 mm long\n// Medium complexity, only basic OpenSCAD primitives\n\n$fn = 32;               // global smoothness\n\n// Overall dimensions\ntotal_len  = 75;\nshaft_len  = 65;\ntip_len    = 10;\ndia        = 7.5;       // pencil diameter\nlead_dia   = 2;\nferrule_w  = 5;         // metal ferrule width\nhex_wall   = 1.2;       // printable wall thickness\n\n// Hex profile module\nmodule hex_profile(r, h) {\n    // build one hexagon face\n    difference() {\n        cylinder(h = h, r = r, $fn = 6);\n        // chamfer outer edge slightly for 3D print\n        translate([0,0,-0.1])\n            cylinder(h = h + 0.2, r = r - 0.2, $fn = 6);\n    }\n}\n\n// Graphite lead\nmodule lead() {\n    color(\"gray20\")\n    translate([0, 0, -tip_len/2])\n        cylinder(h = tip_len + 3, d = lead_dia, center = true);\n}\n\n// Wooden cone tip\nmodule cone() {\n    color(\"burlywood\")\n    difference() {\n        cylinder(h = tip_len, r1 = dia/2, r2 = 0, center = false);\n        // hollow for lead\n        translate([0, 0, -1])\n            cylinder(h = tip_len + 2, r1 = lead_dia/2, r2 = 0, center = false);\n    }\n}\n\n// Main hexagonal shaft\nmodule shaft() {\n    color(\"bisque\")\n    hex_profile(dia/2, shaft_len);\n}\n\n// Metal ferrule (crimped)\nmodule ferrule() {\n    color(\"silver\")\n    difference() {\n        // main cylinder\n        translate([0, 0, shaft_len/2 + ferrule_w/2])\n            cylinder(h = ferrule_w, d = dia + 0.4, center = true);\n\n        // crimp rings\n        for (z = [shaft_len + 1, shaft_len + 3]) {\n            rotate([0, 0, 0])\n                translate([0, 0, z])\n                    cylinder(h = 0.5, d = dia + 1.2, center = true);\n            rotate([0, 0, 30])\n                translate([0, 0, z])\n                    cylinder(h = 0.5, d = dia + 1.2, center = true);\n        }\n    }\n}\n\n// Eraser\nmodule eraser() {\n    color(\"tomato\")\n    translate([0, 0, shaft_len + ferrule_w + 3])\n        cylinder(h = 6, d = dia - 0.5, center = true);\n}\n\n// Assemble pencil\nunion() {\n    shaft();\n    translate([0, 0, shaft_len/2 + tip_len/2])\n        cone();\n    ferrule();\n    eraser();\n    translate([0, 0, -tip_len - 3])\n        lead();\n}",
    "renders": true
  },
  {
    "household_item": "pen",
    "openscad_code": "// Realistic 3D-printable pen (medium complexity)\n// Overall length ~140 mm, diameter ~12 mm\n\npen_diameter = 12;\ntip_length = 15;\nbody_length = 100;\ngrip_length = 20;\ncap_length = 55;\ncap_wall = 1.5;\n\n// Main pen assembly\nmodule pen() {\n    // Tip (cone)\n    translate([0, 0, body_length + grip_length]) {\n        cylinder(h = tip_length, r1 = pen_diameter/2, r2 = 0.5, $fn = 32);\n    }\n    \n    // Grip section with rings\n    grip();\n    \n    // Main body tube\n    difference() {\n        cylinder(h = body_length, r = pen_diameter/2, $fn = 32);\n        // Ink cavity\n        translate([0, 0, -0.01])\n            cylinder(h = body_length + 0.02, r = pen_diameter/2 - 2, $fn = 32);\n    }\n    \n    // Clip on cap\n    translate([0, 0, body_length + grip_length + tip_length + 2])\n        cap();\n}\n\n// Grip with textured rings\nmodule grip() {\n    difference() {\n        cylinder(h = grip_length, r = pen_diameter/2 + 1, $fn = 32);\n        for(i = [0:4]) {\n            translate([0, 0, i * 4 + 2])\n                cylinder(h = 2, r = pen_diameter/2 - 0.5, $fn = 32);\n        }\n    }\n}\n\n// Cap with clip\nmodule cap() {\n    difference() {\n        // Main cap body\n        cylinder(h = cap_length, r = pen_diameter/2 + cap_wall, $fn = 32);\n        \n        // Hollow section\n        translate([0, 0, -0.01])\n            cylinder(h = cap_length - 2, r = pen_diameter/2 + 0.2, $fn = 32);\n    }\n    \n    // Clip\n    translate([pen_diameter/2 + cap_wall - 0.5, 0, cap_length - 10]) {\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 40, r = 1.5, $fn = 16);\n                translate([0, 0, -1])\n                    cylinder(h = 42, r = 0.5, $fn = 16);\n            }\n    }\n    \n    // Tapered end\n    translate([0, 0, cap_length]) {\n        cylinder(h = 5, r1 = pen_diameter/2 + cap_wall, r2 = 2, $fn = 32);\n    }\n}\n\n// Button mechanism at end\ntranslate([0, 0, -5]) {\n    difference() {\n        cylinder(h = 5, r = pen_diameter/2, $fn = 32);\n        translate([0, 0, 2.5])\n            sphere(r = 2, $fn = 16);\n    }\n}\n\n// Render the pen\npen();",
    "renders": true
  },
  {
    "household_item": "roller",
    "openscad_code": "// Realistic 3D printable roller (paint-style)\n// Overall size ~60 mm wide × 30 mm diameter\n\n$fn = 32;   // Smooth curves\n\n// Main body dimensions\nroller_dia = 28;\nroller_len = 52;\nwall = 1.6;          // 3D-print friendly wall thickness\nhandle_dia = 12;\nhandle_len = 35;\n\n// Grip texture parameters\nnubs = 24;\nnub_d = 1.2;\nnub_h = 0.6;\n\nmodule roller_body() {\n    difference() {\n        // Solid roller tube\n        cylinder(h = roller_len, d = roller_dia, center = true);\n        \n        // Hollow core\n        translate([0, 0, -roller_len/2 - 0.01])\n            cylinder(h = roller_len + 0.02, d = roller_dia - 2*wall, $fn = 32);\n            \n        // End-cap recess left\n        translate([-roller_len/2 + 2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 5, d = 10, $fn = 16);\n            \n        // End-cap recess right\n        translate([roller_len/2 - 2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 5, d = 10, $fn = 16);\n    }\n}\n\nmodule end_caps() {\n    // Left cap\n    translate([-roller_len/2 - 1.5, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 3, d = roller_dia);\n        translate([0, 0, -0.1])\n            cylinder(h = 3.2, d = roller_dia - 2*wall);\n    }\n    \n    // Right cap\n    translate([roller_len/2 + 1.5, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 3, d = roller_dia);\n        translate([0, 0, -0.1])\n            cylinder(h = 3.2, d = roller_dia - 2*wall);\n    }\n}\n\nmodule handle() {\n    difference() {\n        union() {\n            // Handle shaft\n            rotate([0, 90, 0])\n                cylinder(h = handle_len, d = handle_dia, center = true);\n                \n            // Transition fillet\n            translate([-handle_len/2 - 2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 4, d1 = handle_dia, d2 = 8);\n        }\n        \n        // Hollow shaft\n        rotate([0, 90, 0])\n            translate([0, 0, -handle_len/2 - 0.01])\n                cylinder(h = handle_len + 0.02, d = handle_dia - 2*wall);\n    }\n}\n\nmodule grip_texture() {\n    // Knurled nubs along handle\n    for (i = [0 : nubs-1]) {\n        rotate([0, 0, i * 360/nubs])\n            translate([0, handle_dia/2 - nub_h/2, 0])\n                for (z = [-handle_len/2 + 8 : 4 : handle_len/2 - 8]) {\n                    translate([0, 0, z])\n                        rotate([90, 0, 0])\n                            cylinder(h = nub_h, d = nub_d, $fn = 8);\n                }\n    }\n}\n\nmodule axle_pin() {\n    // Steel pin detail\n    color(\"silver\")\n    difference() {\n        union() {\n            translate([0, 0, -roller_len/2 - 4])\n                cylinder(h = roller_len + 8, d = 4);\n            translate([0, 0, -roller_len/2 - 6])\n                cylinder(h = 2, d = 6);\n            translate([0, 0, roller_len/2 + 4])\n                cylinder(h = 2, d = 6);\n        }\n        // Chamfers\n        translate([0, 0, -roller_len/2 - 6])\n            cylinder(h = 1.5, d1 = 6, d2 = 4);\n        translate([0, 0, roller_len/2 + 4])\n            cylinder(h = 1.5, d1 = 6, d2 = 4);\n    }\n}\n\n// Assemble the roller\nunion() {\n    roller_body();\n    end_caps();\n    \n    // Handle with grip\n    translate([roller_len/2 + 8, 0, 0])\n        union() {\n            handle();\n            grip_texture();\n        }\n    \n    // Axle through roller\n    rotate([0, 90, 0])\n        axle_pin();\n}",
    "renders": true
  },
  {
    "household_item": "rag",
    "openscad_code": "// Realistic cloth rag made from overlapping \"fabric\" plates\n// Overall size ~70 mm × 50 mm × 3 mm, printable without supports\n\n// Basic fabric weave module\nmodule fabric_square(size = 7, thickness = 0.6) {\n    // Thin plate with beveled edges\n    difference() {\n        cube([size, size, thickness], center = true);\n        translate([0, 0, thickness/2 - 0.1])\n            cube([size - 0.5, size - 0.5, thickness + 0.2], center = true);\n    }\n}\n\n// Wrinkle generator\nmodule wrinkle(x, y, rot, lift) {\n    translate([x, y, lift])\n        rotate([0, 0, rot])\n            fabric_square();\n}\n\n// Main rag body\nmodule rag_body() {\n    union() {\n        // Base grid of fabric squares\n        for (i = [-4:4])\n            for (j = [-3:3]) {\n                // Slight random offset to mimic cloth\n                fabric_square();\n                translate([i*7.2 + (i%2)*1.2, j*7.2 + (j%2)*0.8, 0])\n                    fabric_square();\n            }\n        \n        // Wrinkles and folds\n        wrinkle(-15, 10, 25, 0.8);\n        wrinkle(10, -8, -30, 1.2);\n        wrinkle(0, 15, 15, 0.6);\n        wrinkle(-8, -12, -20, 1.0);\n        \n        // Corner fold\n        translate([25, 18, 1.5])\n            rotate([0, 0, 45])\n                fabric_square(10, 0.6);\n                \n        // Edge curl\n        for (t = [0:30:150]) {\n            translate([30*cos(t), 25*sin(t), 1.2])\n                rotate([0, 0, t + 90])\n                    fabric_square(5, 0.5);\n        }\n    }\n}\n\n// Thicken edges for printability\nmodule printable_rag() {\n    union() {\n        rag_body();\n        \n        // Bottom reinforcement layer\n        translate([0, 0, -1.5])\n            cube([70, 50, 0.8], center = true);\n            \n        // Edge beads\n        for (edge = [[-35,0,0], [35,0,0], [0,-25,0], [0,25,0]]) {\n            translate(edge)\n                rotate([edge[0] ? 0 : 90, 0, 0])\n                    cylinder(h = 1.0, r = 1.2, $fn = 12);\n        }\n    }\n}\n\n// Render the rag\nprintable_rag();",
    "renders": true
  },
  {
    "household_item": "broom",
    "openscad_code": "// Realistic Broom - Medium Complexity\n// Designed for 3D printing - approximately 80mm tall\n\n// Parameters\nbroom_length = 75;\nhandle_diameter = 6;\nhandle_length = 50;\nbroom_head_length = 20;\nbroom_head_width = 12;\nbroom_head_height = 8;\nbristle_length = 15;\nbristle_diameter = 1.2;\nbristle_count = 12;\nwall_thickness = 2;\n\n// Main broom assembly\nmodule broom() {\n    union() {\n        // Handle\n        translate([0, 0, handle_length/2])\n            handle();\n        \n        // Broom head\n        translate([0, 0, handle_length + broom_head_height/2])\n            broom_head();\n        \n        // Bristles\n        translate([0, 0, handle_length + broom_head_height + bristle_length/2])\n            bristles();\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    union() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [5:10:handle_length-10]) {\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=2, d=handle_diameter+1, $fn=32);\n                    cylinder(h=3, d=handle_diameter-1, $fn=32);\n                }\n        }\n        \n        // Handle end cap\n        translate([0, 0, handle_length])\n            cylinder(h=3, d1=handle_diameter, d2=handle_diameter+2, $fn=32);\n    }\n}\n\n// Broom head with mounting bracket\nmodule broom_head() {\n    difference() {\n        union() {\n            // Main head block\n            cube([broom_head_width, broom_head_length, broom_head_height], center=true);\n            \n            // Mounting collar for handle\n            translate([0, 0, broom_head_height/2 + 1.5])\n                cylinder(h=3, d=handle_diameter+4, $fn=32);\n        }\n        \n        // Handle hole\n        translate([0, 0, broom_head_height/2 + 3])\n            cylinder(h=5, d=handle_diameter, $fn=32);\n        \n        // Weight reduction holes\n        for(x = [-5, 0, 5]) {\n            for(y = [-6, -2, 2, 6]) {\n                translate([x, y, 0])\n                    cube([2, 2, broom_head_height-1], center=true);\n            }\n        }\n    }\n}\n\n// Bristles bundle\nmodule bristles() {\n    // Bristle holder base\n    difference() {\n        cube([broom_head_width-2, broom_head_length-2, 2], center=true);\n        \n        // Taper the base\n        translate([0, 0, -1])\n            cube([broom_head_width-4, broom_head_length-4, 4], center=true);\n    }\n    \n    // Individual bristles in rows\n    for(row = [-1:1]) {\n        for(col = [-2:2]) {\n            translate([\n                col * 2.5,\n                row * 3 + 4,\n                1 + bristle_length/2\n            ]) {\n                // Each bristle is slightly offset for realism\n                rotate([rand_col(col)*5, rand_row(row)*5, 0])\n                    cylinder(h=bristle_length, d=bristle_diameter, $fn=8);\n            }\n        }\n    }\n}\n\n// Helper functions for bristle randomness\nfunction rand_col(c) = (c*73)%7 - 3.5;\nfunction rand_row(r) = (r*67)%5 - 2.5;\n\n// Render the broom\nbroom();",
    "renders": true
  },
  {
    "household_item": "mop",
    "openscad_code": "// Realistic Mop - Medium Complexity\n// Overall height 90mm, designed for 3D printing\n\n$fn = 32;\n\n// Main assembly\nmodule mop() {\n    union() {\n        // Handle assembly\n        handle();\n        \n        // Mop head assembly\n        translate([0, 0, -60]) \n            mop_head();\n        \n        // Connection between handle and mop head\n        translate([0, 0, -35])\n            connection();\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle tube\n        cylinder(h=55, d1=8, d2=6, center=false);\n        \n        // Grip rings\n        for(i = [5:10:45]) {\n            translate([0, 0, i])\n                cylinder(h=3, d=9.5, center=false);\n        }\n    }\n    \n    // Handle end cap\n    translate([0, 0, 55])\n        cylinder(h=4, d1=7, d2=9, center=false);\n}\n\n// Connection piece between handle and mop head\nmodule connection() {\n    union() {\n        // Top collar\n        cylinder(h=8, d1=12, d2=10, center=false);\n        \n        // Swivel joint\n        translate([0, 0, -5])\n            sphere(d=15);\n        \n        // Bottom plate\n        translate([0, 0, -10])\n            cylinder(h=3, d=25, center=false);\n    }\n}\n\n// Mop head with strings\nmodule mop_head() {\n    difference() {\n        // Head base\n        union() {\n            // Top disc\n            translate([0, 0, -13])\n                cylinder(h=3, d=30, center=false);\n            \n            // Bottom disc\n            cylinder(h=3, d=30, center=false);\n            \n            // Center cylinder\n            cylinder(h=10, d=10, center=false);\n        }\n        \n        // String holes\n        for(angle = [0:30:359]) {\n            rotate([0, 0, angle])\n                translate([10, 0, 0])\n                    cylinder(h=20, d=3, center=false);\n        }\n    }\n    \n    // Mop strings\n    for(angle = [15:30:359]) {\n        for(i = [0:5]) {\n            rotate([0, 0, angle + i*2])\n                translate([11, 0, -15 - i*2])\n                    string();\n        }\n    }\n}\n\n// Individual mop string\nmodule string() {\n    // Simple twisted string representation\n    union() {\n        cylinder(h=20, d=1.5, center=false);\n        \n        // Twisted detail\n        rotate([10, 0, 0])\n            cylinder(h=20, d=1.2, center=false);\n    }\n}\n\n// Generate the complete mop\nmop();",
    "renders": true
  },
  {
    "household_item": "sweeper",
    "openscad_code": "// Realistic 3D-Printable Street Sweeper\n// Approx 75 mm long, 30 mm wide, 35 mm high\n// No overhangs >45°, 1.2 mm min walls\n\n$fn = 32;\nwall = 1.2;  // wall thickness for 3D printing\n\nmodule chassis() {\n    // Main box-like chassis with slight taper\n    hull() {\n        translate([0,0,2]) cube([60,28,10], center=true);\n        translate([0,0,7]) cube([55,24,6], center=true);\n    }\n}\n\nmodule cab() {\n    // Driver cabin on top front\n    translate([-18,0,11]) hull() {\n        cube([16,22,8], center=true);\n        translate([0,0,5]) cube([14,20,6], center=true);\n    }\n}\n\nmodule exhaust() {\n    // Exhaust pipe behind cab\n    translate([-5,8,16])\n    rotate([0,15,0])\n    cylinder(h = 12, d1 = 3, d2 = 2.5, center=false);\n}\n\nmodule wheel(radius=6, width=4) {\n    // Single wheel with tread pattern\n    difference() {\n        cylinder(h = width, r = radius, center=true);\n        // Tread grooves\n        for(i=[0:3]) {\n            rotate([0,0,i*45])\n            cube([width+1, 0.8, 2], center=true);\n        }\n    }\n}\n\nmodule wheels() {\n    // Rear dual wheels\n    for(side=[-1,1]) {\n        // Front wheel\n        translate([20, side*9, -2])\n        rotate([0,90,0])\n        wheel(6, 3.5);\n        // Rear dual wheels\n        translate([-20, side*9, -2])\n        rotate([0,90,0])\n        wheel(7, 4);\n        translate([-25, side*9, -2])\n        rotate([0,90,0])\n        wheel(7, 4);\n    }\n}\n\nmodule brush(diameter=20, bristle_length=12) {\n    // Rotating cylindrical brush\n    rotate([90,0,0])\n    difference() {\n        cylinder(h = 18, d = diameter, center=true);\n        // Hollow core\n        cylinder(h = 19, d = diameter - 2*wall, center=true);\n    }\n    // Bristle stubs (simplified)\n    for(i=[0:11]) {\n        rotate([i*30,0,0])\n        translate([diameter/2 + bristle_length/2, 0, 0])\n        cube([bristle_length, 1.5, 1.5], center=true);\n    }\n}\n\nmodule sweeper_assembly() {\n    // Complete rotating brush assembly under chassis\n    translate([0,0,-6])\n    brush(20, 12);\n    // Side guards\n    difference() {\n        translate([0,0,-5])\n        cube([22,24,4], center=true);\n        translate([0,0,-5])\n        cube([20,22,4.5], center=true);\n    }\n}\n\nmodule lights() {\n    // Front headlights\n    for(side=[-1,1]) {\n        translate([28, side*7, 6])\n        sphere(d = 3);\n    }\n    // Rear taillights\n    for(side=[-1,1]) {\n        translate([-28, side*7, 6])\n        sphere(d = 2.5);\n    }\n}\n\nmodule mirrors() {\n    // Side mirrors\n    for(side=[-1,1]) {\n        translate([-15, side*12, 10])\n        rotate([0,side*20,0])\n        cube([2, 3, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    chassis();\n    cab();\n    exhaust();\n    wheels();\n    sweeper_assembly();\n    lights();\n    mirrors();\n}",
    "renders": true
  },
  {
    "household_item": "vacuum",
    "openscad_code": "// Realistic Medium-Complexity Upright Vacuum Cleaner\n// Overall height ~85 mm, footprint ~45x35 mm\n// Wall thickness 1.2 mm for reliable 3D printing\n\n// Main dimensions\nbody_w = 45;\nbody_d = 35;\nbody_h = 60;\nhead_w = 50;\nhead_d = 40;\nhead_h = 12;\nhandle_r = 5;\nhandle_h = 25;\nwheel_r = 8;\nwheel_w = 4;\nhose_r = 4;\nhose_seg = 12;\n\nmodule vacuum_body() {\n    difference() {\n        // Main body shell\n        translate([0, 0, body_h/2])\n            cube([body_w, body_d, body_h], center=true);\n        // Hollow cavity\n        translate([0, 0, body_h/2-1.2])\n            cube([body_w-2.4, body_d-2.4, body_h-2.4], center=true);\n    }\n}\n\nmodule vacuum_head() {\n    difference() {\n        // Head shell\n        translate([0, 0, head_h/2])\n            cube([head_w, head_d, head_h], center=true);\n        // Hollow cavity\n        translate([0, 0, head_h/2-1.2])\n            cube([head_w-2.4, head_d-2.4, head_h-2.4], center=true);\n        // Air intake slot\n        translate([0, head_d/2+1, head_h/2])\n            cube([head_w-10, 2, head_h-4], center=true);\n    }\n}\n\nmodule wheels() {\n    for (side = [-1, 1]) {\n        translate([side*(body_w/2+1), 0, wheel_r]) {\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(r=wheel_r, h=wheel_w, center=true);\n                    // Hollow wheel\n                    cylinder(r=wheel_r-2, h=wheel_w+0.2, center=true);\n                    // Axle hole\n                    cylinder(r=1.5, h=wheel_w+0.4, center=true);\n                }\n        }\n    }\n}\n\nmodule handle() {\n    // Vertical pole\n    translate([0, 0, body_h+handle_h/2])\n        difference() {\n            cylinder(r=handle_r, h=handle_h, center=true);\n            cylinder(r=handle_r-1.2, h=handle_h+0.2, center=true);\n        }\n    // Grip\n    translate([0, 0, body_h+handle_h])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(r=handle_r+1, h=body_w/1.5, center=true);\n                cylinder(r=handle_r-0.2, h=body_w/1.5+0.2, center=true);\n            }\n}\n\nmodule hose() {\n    // Flexible hose segments\n    for (i = [0:hose_seg-1]) {\n        rotate([i*15, 0, 0])\n            translate([0, -i*2, body_h/2+i*1.5])\n                rotate([90, 0, 0])\n                    cylinder(r=hose_r, h=2, center=true);\n    }\n    // Hose connector\n    translate([0, -hose_seg*2, body_h/2+hose_seg*1.5])\n        rotate([90, 0, 0])\n            cylinder(r=hose_r+1, h=4, center=true);\n}\n\nmodule dust_bin() {\n    // Transparent bin\n    translate([0, body_d/2+1, body_h/2])\n        difference() {\n            cube([body_w-8, 4, body_h-10], center=true);\n            cube([body_w-10.4, 4.2, body_h-12.4], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    color(\"lightgray\") vacuum_body();\n    color(\"lightgray\") translate([0, 0, body_h/2-head_h/2-1])\n        vacuum_head();\n    color(\"black\") wheels();\n    color(\"gray\") handle();\n    color(\"gray\") hose();\n    color(\"cyan\") dust_bin();\n}",
    "renders": true
  },
  {
    "household_item": "duster",
    "openscad_code": "// OpenSCAD Realistic Medium-Complexity Duster\n// Overall length ≈ 85 mm\n\nmodule handle() {\n    // Main grip tube\n    difference() {\n        cylinder(h = 50, d = 12, $fn = 32);\n        // Grip cavity to save material\n        translate([0, 0, 2])\n            cylinder(h = 46, d = 8, $fn = 32);\n    }\n    // Grip rings for traction\n    for (i = [0 : 10 : 40])\n        translate([0, 0, 5 + i])\n            cylinder(h = 2, d = 14, $fn = 32);\n    // End cap\n    translate([0, 0, 50])\n        cylinder(h = 3, d1 = 12, d2 = 8, $fn = 32);\n}\n\nmodule ferrule() {\n    // Metal band at base of feathers\n    difference() {\n        cylinder(h = 8, d = 14, $fn = 64);\n        translate([0, 0, 1])\n            cylinder(h = 7, d = 12, $fn = 64);\n    }\n}\n\nmodule feather(stemLen, baseAng, flareAng) {\n    color(\"ivory\")\n    union() {\n        // Quill shaft\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = stemLen, d1 = 0.8, d2 = 1.2, $fn = 8);\n        // Feather vane\n        translate([0, 0, stemLen])\n            rotate([90 + flareAng, 0, baseAng])\n                scale([1, 0.2, 1])\n                    sphere(d = 10, $fn = 16);\n    }\n}\n\nmodule feather_bundle() {\n    for (rot = [0 : 30 : 330])\n        rotate([0, 0, rot])\n            translate([0, 5.5, 4])\n                feather(30, 0, 15);\n    // Center fuller feather\n    translate([0, 0, 4])\n        feather(35, 0, 10);\n    // Side fuller feathers\n    for (side = [-1, 1])\n        translate([side * 3, 0, 4])\n            rotate([0, side * 10, 0])\n                feather(32, side * 15, 10);\n}\n\nmodule duster() {\n    union() {\n        handle();\n        translate([0, 0, 50])\n            ferrule();\n        translate([0, 0, 58])\n            feather_bundle();\n    }\n}\n\nduster();",
    "renders": true
  },
  {
    "household_item": "bucket",
    "openscad_code": "// Realistic 3D printable bucket – medium complexity (≈ 120 lines)\n\n// Overall dimensions\nbucket_height = 75;        // mm\nbucket_top_d = 80;         // mm\nbucket_bottom_d = 65;      // mm\nwall_thickness = 2.5;      // mm\nhandle_thickness = 4;      // mm\n\n// Tapered cone shell\nmodule bucket_shell(h, top_r, bottom_r, thick) {\n    difference() {\n        cylinder(h = h, r1 = top_r, r2 = bottom_r, $fn = 120);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, r1 = top_r - thick, r2 = bottom_r - thick, $fn = 120);\n    }\n}\n\n// Reinforcing rim on top\nmodule top_rim(top_r, thick) {\n    rim_h = 3;\n    difference() {\n        cylinder(h = rim_h, r1 = top_r + 1, r2 = top_r + 1.5, $fn = 120);\n        translate([0, 0, -0.1])\n            cylinder(h = rim_h + 0.2, r1 = top_r, r2 = top_r + 0.5, $fn = 120);\n    }\n}\n\n// Bottom disk with slight inset\nmodule bottom_disk(bottom_r, thick) {\n    inset = 1;\n    difference() {\n        cylinder(h = thick, r = bottom_r, $fn = 120);\n        translate([0, 0, -0.1])\n            cylinder(h = thick + 0.2, r = bottom_r - inset, $fn = 120);\n    }\n}\n\n// Handle arch\nmodule handle_arc(top_r) {\n    width = top_r * 1.7;\n    radius = top_r * 0.9;\n    sweep_angle = 180;\n    steps = 30;\n\n    for (i = [0 : steps]) {\n        angle = i * sweep_angle / steps;\n        x = -width / 2 + width * (angle / sweep_angle);\n        y = sin(angle) * radius;\n        z = bucket_height + cos(angle) * radius;\n        translate([x, 0, z])\n            sphere(d = handle_thickness, $fn = 12);\n    }\n}\n\n// Handle pivot lugs\nmodule handle_lugs(top_r) {\n    lug_w = 6;\n    lug_h = 8;\n    lug_d = 4;\n    offset_x = top_r * 0.9;\n\n    difference() {\n        union() {\n            // left lug\n            translate([-offset_x, 0, bucket_height - lug_h])\n                cube([lug_w, lug_d, lug_h], center = true);\n            // right lug\n            translate([offset_x, 0, bucket_height - lug_h])\n                cube([lug_w, lug_d, lug_h], center = true);\n        }\n        // pivot holes\n        translate([-offset_x, lug_d / 2 + 0.1, bucket_height - lug_h / 2])\n            rotate([90, 0, 0])\n                cylinder(h = lug_w + 0.2, r = handle_thickness / 2, $fn = 20);\n        translate([offset_x, lug_d / 2 + 0.1, bucket_height - lug_h / 2])\n            rotate([90, 0, 0])\n                cylinder(h = lug_w + 0.2, r = handle_thickness / 2, $fn = 20);\n    }\n}\n\n// Small drainage spout\nmodule spout(top_r) {\n    spout_len = 10;\n    spout_w = 12;\n    spout_h = 6;\n    translate([top_r, 0, bucket_height - spout_h / 2])\n        rotate([0, -30, 0])\n            cube([spout_len, spout_w, spout_h], center = true);\n}\n\n// Assembly\nunion() {\n    // Main body\n    bucket_shell(bucket_height, bucket_top_d / 2, bucket_bottom_d / 2, wall_thickness);\n    translate([0, 0, bucket_height])\n        top_rim(bucket_top_d / 2, wall_thickness);\n    translate([0, 0, 0])\n        bottom_disk(bucket_bottom_d / 2, wall_thickness);\n\n    // Handle parts\n    handle_arc(bucket_top_d / 2);\n    handle_lugs(bucket_top_d / 2);\n\n    // Spout\n    spout(bucket_top_d / 2);\n}",
    "renders": true
  },
  {
    "household_item": "pail",
    "openscad_code": "// Realistic 3D-printable pail\n// Overall height ~70 mm, diameter ~60 mm\n\n$fn = 50;  // Smooth curves\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main pail body\nmodule pail_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = 60, d1 = 60, d2 = 55, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall])\n            cylinder(h = 60 - wall, d1 = 60 - wall*2, d2 = 55 - wall*2, center = false);\n        \n        // Remove bottom to create open pail\n        translate([0, 0, -1])\n            cube([100, 100, 2], center = true);\n    }\n}\n\n// Reinforcement rim at top\nmodule top_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 59])\n            cylinder(h = 4, d = 64);\n        \n        // Inner cutout\n        translate([0, 0, 59])\n            cylinder(h = 4, d = 58);\n    }\n}\n\n// Bottom reinforcement\nmodule bottom_rim() {\n    difference() {\n        // Outer rim\n        cylinder(h = 3, d = 63);\n        \n        // Inner cutout\n        cylinder(h = 3, d = 61);\n    }\n}\n\n// Handle mounting lugs\nmodule lugs() {\n    for (side = [-1, 1]) {\n        translate([side * 30, 0, 50]) {\n            difference() {\n                // Mounting block\n                rotate([0, 90, 0])\n                    cylinder(h = 8, d = 10);\n                \n                // Handle hole\n                rotate([0, 90, 0])\n                    cylinder(h = 10, d = 4);\n            }\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    // Handle wire\n    rotate([0, 90, 0])\n        difference() {\n            // Main handle curve\n            translate([0, 0, 35])\n                rotate_extrude(angle = 180)\n                    translate([35, 0, 0])\n                        circle(r = 2);\n            \n            // Cut ends to fit lugs\n            translate([0, 0, -5])\n                cube([100, 100, 10], center = true);\n        }\n    \n    // Handle grip\n    translate([0, 0, 35])\n        rotate([0, 90, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 8);\n}\n\n// Assembly\nunion() {\n    pail_body();\n    top_rim();\n    bottom_rim();\n    lugs();\n    handle();\n}",
    "renders": true
  },
  {
    "household_item": "basin",
    "openscad_code": "// Realistic 3D-printable basin (washbasin / sink)\n// Medium complexity – printable without supports\n\n// Overall dimensions\nbasin_width = 80;\nbasin_depth = 60;\nbasin_height = 30;\nwall_thickness = 2.2;\n\n// Drain hole\ndrain_d = 6;\n\nmodule basin_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, basin_height/2])\n            cube([basin_width, basin_depth, basin_height], center=true);\n\n        // Hollow inside\n        translate([0, 0, basin_height/2 + wall_thickness])\n            cube([basin_width - 2*wall_thickness,\n                  basin_depth - 2*wall_thickness,\n                  basin_height], center=true);\n    }\n}\n\n// Curved inner bowl\nmodule inner_bowl() {\n    difference() {\n        // Ellipsoid bowl\n        scale([1, 0.8, 0.5])\n            translate([0, 0, basin_height - wall_thickness])\n                sphere(d=basin_width - 2*wall_thickness, $fn=60);\n\n        // Drain hole\n        translate([0, 0, 0])\n            cylinder(d=drain_d, h=basin_height, $fn=32);\n    }\n}\n\n// Overflow slots on back wall\nmodule overflow_slots() {\n    slot_w = 10;\n    slot_h = 1.5;\n    slot_d = 3;\n    translate([0, basin_depth/2 - wall_thickness - slot_d/2, basin_height/2 - 4])\n        for(i=[-1, 0, 1])\n            translate([i*slot_w*1.2, 0, 0])\n                cube([slot_w, slot_d, slot_h], center=true);\n}\n\n// Faucet mounting boss\nmodule faucet_boss() {\n    boss_d = 12;\n    boss_h = 8;\n    translate([0, -basin_depth/2 + wall_thickness + boss_h/2, basin_height - boss_h/2])\n        cylinder(d=boss_d, h=boss_h, $fn=32);\n}\n\n// Drain collar (thin cylinder)\nmodule drain_collar() {\n    collar_d = drain_d + 4;\n    collar_h = 2;\n    translate([0, 0, 0])\n        cylinder(d=collar_d, h=collar_h, $fn=32);\n}\n\n// Assembly\nunion() {\n    basin_body();\n    inner_bowl();\n    overflow_slots();\n    faucet_boss();\n    drain_collar();\n}",
    "renders": true
  },
  {
    "household_item": "tub",
    "openscad_code": "// Realistic-style medium-complexity 3D-printable bathtub\n// Outer shell\nmodule outer_shell() {\n    difference() {\n        // Main tub body\n        hull() {\n            translate([0, 0, 8])\n                cube([100, 45, 35], center = true);\n            translate([0, 0, 0])\n                cube([90, 40, 16], center = true);\n        }\n\n        // Hollow interior\n        translate([0, 0, 15])\n            cube([86, 36, 40], center = true);\n    }\n}\n\n// Rim lip\nmodule rim() {\n    difference() {\n        // Upper lip\n        translate([0, 0, 25])\n            cube([104, 49, 6], center = true);\n        // Cut out inner edge\n        translate([0, 0, 25])\n            cube([90, 40, 8], center = true);\n    }\n}\n\n// Drain hole with fitting\nmodule drain() {\n    difference() {\n        // Drain plate\n        cylinder(h = 2, d = 12, $fn = 30);\n        // Through hole\n        translate([0, 0, -1])\n            cylinder(h = 4, d = 8, $fn = 30);\n    }\n}\n\n// Faucet base\nmodule faucet_base() {\n    translate([0, 20, 0])\n        difference() {\n            // Base plate\n            cube([20, 4, 8], center = true);\n            // Screw holes\n            for (x = [-6, 6]) {\n                translate([x, 0, 0])\n                    cylinder(h = 5, d = 2.5, $fn = 16);\n            }\n        }\n}\n\n// Faucet spout\nmodule spout() {\n    translate([0, 22, 4])\n        rotate([0, 90, 0])\n            hull() {\n                cylinder(h = 3, d = 6, $fn = 16);\n                translate([0, 0, 15])\n                    cylinder(h = 3, d = 4, $fn = 16);\n            }\n}\n\n// Hot and cold knobs\nmodule knobs() {\n    for (x = [-8, 8]) {\n        translate([x, 22, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    // Knob cylinder\n                    cylinder(h = 8, d = 10, $fn = 30);\n                    // Knob top indent\n                    translate([0, 0, 9])\n                        cylinder(h = 2, d = 6, $fn = 30);\n                }\n    }\n}\n\n// Feet\nmodule feet() {\n    for (x = [-40, 40])\n    for (y = [-18, 18]) {\n        translate([x, y, -6])\n            difference() {\n                // Foot cone\n                cylinder(h = 6, d1 = 8, d2 = 4, $fn = 30);\n                // Leveling pad\n                translate([0, 0, -1])\n                    cylinder(h = 2, d = 8, $fn = 30);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    outer_shell();\n    rim();\n    translate([0, 0, 8])\n        drain();\n    faucet_base();\n    spout();\n    knobs();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "tap",
    "openscad_code": "// Realistic 3D-printable tap – medium complexity\n// Overall height ≈ 75 mm, base ≈ 40 mm wide\n\n$fn = 36;               // Smooth curves\nwall = 2.0;             // Minimum printable wall thickness\ntap_h = 75;\nbase_d = 40;\nspout_len = 30;\nspout_d = 12;\n\n/* ---------- Base cylinder with chamfer ---------- */\nmodule base() {\n    difference() {\n        union() {\n            cylinder(h = 12, d = base_d, center = false);\n            translate([0, 0, 12])\n                cylinder(h = 3, d1 = base_d, d2 = base_d - 6, center = false);\n        }\n        // Water inlet hole\n        translate([0, 0, -1])\n            cylinder(h = 14, d = 10, center = false);\n    }\n}\n\n/* ---------- Vertical body with hex section ---------- */\nmodule body() {\n    union() {\n        // Lower round part\n        cylinder(h = 20, d = 22, center = false);\n        // Hexagonal mid-section for wrench grip\n        translate([0, 0, 20])\n            cylinder(h = 15, d = 22, $fn = 6, center = false);\n        // Upper round neck\n        translate([0, 0, 35])\n            cylinder(h = 10, d = 18, center = false);\n    }\n}\n\n/* ---------- Handle lever ---------- */\nmodule handle() {\n    // Lever arm\n    translate([0, 0, 45])\n        rotate([90, 0, 0])\n            cylinder(h = 35, d = 8, center = false);\n    // Grip knob\n    translate([0, 35, 45])\n        rotate([90, 0, 0])\n            sphere(d = 12);\n    // Internal hole for pin\n    translate([0, 0, 45])\n        rotate([90, 0, 0])\n            cylinder(h = 40, d = 4, center = false);\n}\n\n/* ---------- Spout ---------- */\nmodule spout() {\n    // Main curved pipe\n    hull() {\n        translate([0, 0, 40])\n            rotate([0, 90, 0])\n                cylinder(h = wall, d = spout_d, center = true);\n        translate([spout_len, 0, 30])\n            rotate([0, 90, 0])\n                cylinder(h = wall, d = spout_d - 4, center = true);\n    }\n    // Remove inner hole\n    difference() {\n        children();\n        hull() {\n            translate([0, 0, 40])\n                rotate([0, 90, 0])\n                    cylinder(h = wall + 2, d = spout_d - 2*wall, center = true);\n            translate([spout_len, 0, 30])\n                rotate([0, 90, 0])\n                    cylinder(h = wall + 2, d = spout_d - 2*wall - 4, center = true);\n        }\n    }\n}\n\n/* ---------- Assembly ---------- */\nunion() {\n    base();\n    translate([0, 0, 12])\n        body();\n    translate([0, 0, 45])\n        handle();\n    spout() children();\n}",
    "renders": true
  },
  {
    "household_item": "valve",
    "openscad_code": "// Realistic Ball Valve - Medium Complexity\n// 3D printable, ~60mm long\n\n$fn = 30;\n\n// Main valve body\nmodule valve_body() {\n    // Central cylinder\n    cylinder(h = 40, d = 30, center = true);\n    \n    // Inlet pipe\n    translate([-20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d = 20, center = true);\n    \n    // Outlet pipe\n    translate([20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d = 20, center = true);\n    \n    // Flanges\n    for (x = [-30, 30]) {\n        translate([x, 0, 0])\n            cylinder(h = 3, d = 35, center = true);\n    }\n    \n    // Flange bolt holes\n    difference() {\n        translate([0, 0, 0])\n            cylinder(h = 40, d = 30, center = true);\n        for (x = [-30, 30]) {\n            for (angle = [0:60:359]) {\n                rotate([0, 0, angle])\n                    translate([x, 12.5, 0])\n                        cylinder(h = 5, d = 4, center = true);\n            }\n        }\n    }\n}\n\n// Ball core\nmodule ball_core() {\n    difference() {\n        sphere(d = 22);\n        // Flow channel\n        rotate([0, 90, 0])\n            cylinder(h = 25, d = 15, center = true);\n    }\n}\n\n// Valve handle\nmodule valve_handle() {\n    // Stem\n    cylinder(h = 15, d = 10);\n    \n    // Handle lever\n    translate([0, 0, 15])\n        rotate([0, 90, 0])\n            cube([50, 8, 3], center = true);\n    \n    // Handle grip\n    translate([0, 0, 15])\n        rotate([0, 90, 0])\n            translate([25, 0, 0])\n                cylinder(h = 12, d = 12, center = true);\n    \n    // Position indicator\n    translate([0, 0, 15])\n        rotate([0, 90, 0])\n            translate([-20, 0, 2])\n                cube([8, 6, 1], center = true);\n}\n\n// Assembly\nunion() {\n    // Main valve body\n    valve_body();\n    \n    // Ball inside\n    translate([0, 0, 0])\n        ball_core();\n    \n    // Stem and handle\n    difference() {\n        translate([0, 0, 25])\n            valve_handle();\n        // Stem hole\n        translate([0, 0, 20])\n            cylinder(h = 30, d = 8, center = true);\n    }\n    \n    // Sealing rings\n    for (z = [-5, 5]) {\n        translate([0, 0, z])\n            cylinder(h = 2, d = 24);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pipe",
    "openscad_code": "// Realistic 3D Printable Pipe - Medium Complexity\n// Overall dimensions: ~80mm length, ~30mm height\n\n// Pipe bowl parameters\nbowl_radius = 15;\nbowl_wall = 2.5;\nbowl_height = 25;\nchamber_radius = 10;\nchamber_depth = 20;\n\n// Stem parameters\nstem_length = 60;\nstem_outer = 8;\nstem_inner = 4;\nstem_angle = 12;\n\n// Filter and mouthpiece\nfilter_length = 12;\nmouthpiece_length = 15;\nmouthpiece_taper = 0.8;\n\n// Detail features\nband_width = 5;\nband_offset = 35;\ncarb_hole_radius = 3;\ncarb_position = 20;\n\nmodule pipe_bowl() {\n    // Outer bowl\n    difference() {\n        cylinder(h=bowl_height, r=bowl_radius, $fn=64);\n        translate([0, 0, bowl_wall])\n            cylinder(h=bowl_height, r=bowl_radius-bowl_wall, $fn=64);\n    }\n    \n    // Chamber bowl\n    translate([0, 0, bowl_wall])\n        cylinder(h=chamber_depth, r=chamber_radius, $fn=64);\n    \n    // Bottom rounding\n    translate([0, 0, bowl_height-bowl_wall])\n        sphere(r=bowl_radius-bowl_wall, $fn=64);\n}\n\nmodule pipe_stem() {\n    // Main stem tube\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7, 0, bowl_height*0.3])\n            difference() {\n                cylinder(h=stem_length, r=stem_outer, $fn=32);\n                translate([0, 0, -0.1])\n                    cylinder(h=stem_length+0.2, r=stem_inner, $fn=32);\n            }\n    \n    // Filter chamber\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7+stem_length-filter_length, 0, bowl_height*0.3])\n            difference() {\n                cylinder(h=filter_length, r=stem_outer*1.1, $fn=32);\n                translate([0, 0, -0.1])\n                    cylinder(h=filter_length+0.2, r=stem_inner*1.05, $fn=32);\n            }\n    \n    // Mouthpiece taper\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7+stem_length, 0, bowl_height*0.3])\n            difference() {\n                cylinder(h=mouthpiece_length, r1=stem_outer, r2=stem_outer*mouthpiece_taper, $fn=32);\n                translate([0, 0, -0.1])\n                    cylinder(h=mouthpiece_length+0.2, r1=stem_inner, r2=stem_inner*0.9, $fn=32);\n            }\n}\n\nmodule decorative_band() {\n    // Metal band decoration\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7+band_offset, 0, bowl_height*0.3])\n            difference() {\n                cylinder(h=band_width, r=stem_outer*1.15, $fn=32);\n                cylinder(h=band_width+0.2, r=stem_outer*1.05, $fn=32);\n            }\n}\n\nmodule carb_hole() {\n    // Carburetor hole\n    rotate([0, -stem_angle, 0])\n        translate([bowl_radius*0.7+carb_position, 0, bowl_height*0.3])\n            rotate([90, 0, 0])\n                cylinder(h=stem_outer*2, r=carb_hole_radius, $fn=16);\n}\n\nmodule bowl_rim() {\n    // Thickened rim for durability\n    difference() {\n        cylinder(h=bowl_wall*1.5, r=bowl_radius+1, $fn=64);\n        translate([0, 0, -0.1])\n            cylinder(h=bowl_wall*1.7, r=bowl_radius-bowl_wall, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    pipe_bowl();\n    bowl_rim();\n    pipe_stem();\n    decorative_band();\n}\n\ndifference() {\n    union() {\n        pipe_bowl();\n        bowl_rim();\n        pipe_stem();\n        decorative_band();\n    }\n    carb_hole();\n}",
    "renders": true
  },
  {
    "household_item": "drain",
    "openscad_code": "// Realistic style drain grate with medium complexity\n// Overall dimensions: 80mm x 80mm x 15mm\n\n// Grate base plate\nmodule grate_base() {\n    difference() {\n        // Main base plate\n        cube([80, 80, 5], center=true);\n        \n        // Center hole for water flow\n        cylinder(h=6, d=60, center=true);\n        \n        // Mounting holes at corners\n        for (x = [-35, 35])\n            for (y = [-35, 35])\n                translate([x, y, 0])\n                    cylinder(h=6, d=5, center=true);\n    }\n}\n\n// Drain slats with rounded edges\nmodule grate_slats() {\n    // Longitudinal slats\n    for (y = [-30, -20, -10, 0, 10, 20, 30]) {\n        translate([0, y, 0]) {\n            difference() {\n                // Main slat body\n                cube([70, 4, 8], center=true);\n                \n                // Rounded top edges\n                translate([0, 0, 4])\n                    minkowski() {\n                        cube([70, 4, 0.1], center=true);\n                        cylinder(h=0.1, d=4, center=true);\n                    }\n            }\n        }\n    }\n    \n    // Transverse support ribs\n    for (x = [-25, 0, 25]) {\n        translate([x, 0, -1]) {\n            cube([4, 66, 6], center=true);\n        }\n    }\n}\n\n// Raised rim around grate\nmodule grate_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 2.5])\n            cube([80, 80, 5], center=true);\n        \n        // Inner cutout\n        translate([0, 0, 2])\n            cube([76, 76, 6], center=true);\n    }\n}\n\n// Drain pipe connection\nmodule drain_pipe() {\n    translate([0, 0, -12.5]) {\n        difference() {\n            // Main pipe\n            cylinder(h=15, d=55, center=true);\n            \n            // Inner bore\n            cylinder(h=16, d=50, center=true);\n        }\n        \n        // Reinforcement rings\n        for (z = [-5, -10]) {\n            translate([0, 0, z])\n                cylinder(h=2, d=58, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    grate_base();\n    grate_slats();\n    grate_rim();\n    drain_pipe();\n}",
    "renders": true
  },
  {
    "household_item": "vent",
    "openscad_code": "// Realistic Vent - Medium Complexity\n// Dimensions: 80mm x 60mm x 12mm overall\n\n// Main parameters\nwall_thickness = 2;\nframe_width = 80;\nframe_height = 60;\nframe_depth = 12;\nvent_width = 76;\nvent_height = 56;\nvent_depth = 8;\nslat_thickness = 1.5;\nslat_spacing = 4;\nslat_count = 12;\nmount_hole_diameter = 4;\nmount_hole_inset = 5;\n\n// Frame with rounded edges\nmodule frame() {\n    difference() {\n        // Main frame body\n        union() {\n            // Outer frame\n            translate([0, 0, frame_depth/2])\n                cube([frame_width, frame_height, frame_depth], center=true);\n            \n            // Rounded front edges\n            for (x = [-frame_width/2 + wall_thickness, frame_width/2 - wall_thickness])\n            for (y = [-frame_height/2 + wall_thickness, frame_height/2 - wall_thickness])\n                translate([x, y, frame_depth - wall_thickness])\n                    sphere(wall_thickness, $fn=16);\n        }\n        \n        // Inner cutout\n        translate([0, 0, frame_depth/2 + 0.1])\n            cube([vent_width, vent_height, frame_depth + 0.2], center=true);\n        \n        // Mounting holes (4 corners)\n        for (x = [-frame_width/2 + mount_hole_inset, frame_width/2 - mount_hole_inset])\n        for (y = [-frame_height/2 + mount_hole_inset, frame_height/2 - mount_hole_inset])\n            translate([x, y, 0])\n                cylinder(d=mount_hole_diameter, h=frame_depth*2, $fn=16);\n    }\n}\n\n// Angled slats for air direction\nmodule slats() {\n    // Calculate slat angle for proper airflow\n    angle = 30;\n    slat_length = vent_width / cos(angle);\n    \n    for (i = [0:slat_count-1]) {\n        y_pos = -vent_height/2 + (i+0.5)*slat_spacing;\n        translate([0, y_pos, vent_depth/2])\n            rotate([0, -angle, 0])\n                translate([0, 0, -slat_thickness/2])\n                    cube([slat_length, slat_thickness, vent_depth], center=true);\n    }\n}\n\n// Back mesh grid for insect protection\nmodule mesh() {\n    mesh_size = 2;\n    wire_thickness = 0.8;\n    \n    // Horizontal wires\n    for (y = [-vent_height/2 + mesh_size : mesh_size : vent_height/2 - mesh_size]) {\n        translate([0, y, vent_depth - wire_thickness/2])\n            cube([vent_width, wire_thickness, wire_thickness], center=true);\n    }\n    \n    // Vertical wires\n    for (x = [-vent_width/2 + mesh_size : mesh_size : vent_width/2 - mesh_size]) {\n        translate([x, 0, vent_depth - wire_thickness/2])\n            cube([wire_thickness, vent_height, wire_thickness], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame\n    frame();\n    \n    // Front slats\n    translate([0, 0, frame_depth/2 - vent_depth/2])\n        slats();\n    \n    // Back mesh\n    translate([0, 0, frame_depth/2 - vent_depth/2])\n        mesh();\n}",
    "renders": true
  },
  {
    "household_item": "duct",
    "openscad_code": "// Realistic 3D-printable HVAC duct segment (100 mm long, 60 mm dia)\n// Medium complexity – functional flanges, reinforcing ribs, gasket groove\n\n$fn = 36;      // Global circle resolution\n\n// Main dimensions\nduct_length = 100;\nduct_od     = 60;\nduct_wall   = 2.5;\nflange_thk  = 4;\nflange_lip  = 3;\nrib_thk     = 2;\nrib_height  = 4;\n\n// Derived values\nduct_id = duct_od - 2*duct_wall;\nribs = 4;\n\n/* ------------------------------------------------------------- */\nmodule duct_body()\n{\n    difference()\n    {\n        // Outer cylinder\n        cylinder(h = duct_length, d = duct_od);\n\n        // Bore inner passage\n        translate([0,0,-0.1])\n            cylinder(h = duct_length + 0.2, d = duct_id);\n    }\n}\n\n/* ------------------------------------------------------------- */\nmodule end_flange(z_pos)\n{\n    translate([0,0,z_pos])\n    difference()\n    {\n        // Basic flange disk\n        cylinder(h = flange_thk, d = duct_od + 2*flange_lip);\n\n        // Central bore\n        translate([0,0,-0.1])\n            cylinder(h = flange_thk + 0.2, d = duct_od);\n\n        // Gasket groove\n        translate([0,0,flange_thk-1.5])\n            cylinder(h = 1.5, d = duct_od + 2*flange_lip - 4);\n    }\n}\n\n/* ------------------------------------------------------------- */\nmodule reinforcing_ribs()\n{\n    step = duct_length / (ribs + 1);\n    for (i=[1:ribs])\n    {\n        translate([0,0,i*step])\n        rotate([0,90,0])\n        difference()\n        {\n            // Rib body\n            cube([duct_od, duct_od, rib_thk], center=true);\n\n            // Cut center hole\n            rotate([0,90,0])\n                cylinder(h = duct_od + 0.2, d = duct_id + 2);\n        }\n    }\n}\n\n/* ------------------------------------------------------------- */\n// Assembly\nunion()\n{\n    duct_body();\n    end_flange(0);\n    end_flange(duct_length - flange_thk);\n    reinforcing_ribs();\n}",
    "renders": true
  },
  {
    "household_item": "flue",
    "openscad_code": "// Realistic Flue - 3D Printable\n// Medium complexity with functional details\n\n// Parameters\nwall = 2;           // Wall thickness (mm)\nd_in = 30;          // Inner flue diameter (mm)\nh_total = 80;       // Total height (mm)\nh_collar = 10;      // Collar height (mm)\nw_bracket = 35;     // Mounting bracket width (mm)\nbolt_d = 3;         // Bolt hole diameter (mm)\nbolt_spacing = 25;  // Bolt spacing (mm)\n\n// Main flue pipe\nmodule flue_pipe() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=h_total-h_collar, d=d_in+2*wall, $fn=48);\n        \n        // Inner hollow\n        translate([0,0,-0.1])\n            cylinder(h=h_total-h_collar+0.2, d=d_in, $fn=48);\n    }\n}\n\n// Mounting collar with bolt holes\nmodule mounting_collar() {\n    difference() {\n        // Collar base\n        cylinder(h=h_collar, d=d_in+2*wall+6, $fn=48);\n        \n        // Inner hole\n        translate([0,0,-0.1])\n            cylinder(h=h_collar+0.2, d=d_in, $fn=48);\n        \n        // Bolt holes\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([bolt_spacing/2, 0, h_collar/2])\n                    rotate([90,0,0])\n                        cylinder(h=10, d=bolt_d, $fn=12);\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([0, (d_in+wall)/2, (h_total-h_collar)/2])\n                cube([wall*2, wall*3, h_total-h_collar], center=true);\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    difference() {\n        // Main bracket body\n        translate([0, -(d_in+wall)/2-5, h_total-h_collar-10])\n            cube([w_bracket, 10, 20], center=true);\n        \n        // Mounting slots\n        translate([0, -(d_in+wall)/2-10, h_total-h_collar-5])\n            cube([w_bracket-10, 10, 5], center=true);\n        \n        // Screw holes\n        translate([w_bracket/2-7, -(d_in+wall)/2-10, h_total-h_collar-2.5])\n            cylinder(h=10, d=bolt_d+1, $fn=12);\n        translate([-w_bracket/2+7, -(d_in+wall)/2-10, h_total-h_collar-2.5])\n            cylinder(h=10, d=bolt_d+1, $fn=12);\n    }\n}\n\n// Assemble the flue\nunion() {\n    // Main components\n    flue_pipe();\n    translate([0,0,h_total-h_collar])\n        mounting_collar();\n    \n    // Structural elements\n    reinforcement_ribs();\n    \n    // Mounting hardware\n    mounting_bracket();\n    \n    // Drainage hole\n    translate([0, d_in/2+wall/2, 2])\n        rotate([90,0,0])\n            cylinder(h=wall+1, d=wall, $fn=12);\n}",
    "renders": true
  },
  {
    "household_item": "chimney",
    "openscad_code": "// Realistic medium-complexity 3D-printable chimney\n// Approx. 75 mm tall, 45 mm wide, printable without supports\n\n$fn = 36; // Smooth curves\n\nmodule chimney_stack(h = 60, w = 30, d = 25, wall = 2) {\n    // Outer shell\n    difference() {\n        cube([w, d, h], center = true);\n        translate([0, 0, 1]) // Shift inner cavity slightly up\n            cube([w - 2*wall, d - 2*wall, h + 2], center = true);\n    }\n}\n\nmodule brick_texture(h = 60, w = 30, d = 25) {\n    // Realistic brick texture around the stack\n    brick_w = 4;\n    brick_h = 2;\n    offset = brick_w / 2;\n    for (z = [-h/2 + brick_h : brick_h*2 : h/2 - brick_h]) {\n        for (y = [-d/2 : brick_h*2 : d/2]) {\n            translate([0, y, z])\n                for (x = [-w/2 : brick_w : w/2]) {\n                    translate([x + ((z/brick_h) % 2 ? offset : 0), 0, 0])\n                        cube([brick_w*0.9, 0.5, brick_h*0.9], center = true);\n                }\n        }\n    }\n}\n\nmodule chimney_cap(w = 30, d = 25, overhang = 4) {\n    // Sloped cap with drip edge\n    difference() {\n        // Main cap body\n        translate([0, 0, 0])\n            rotate([0, 45, 0])\n            scale([1, 1.5, 1])\n            cylinder(h = 5, r1 = w/2 + overhang, r2 = w/2 + overhang - 2, center = true);\n        \n        // Hole for smoke\n        translate([0, 0, 0])\n            rotate([0, 45, 0])\n            scale([1, 1.5, 1])\n            cylinder(h = 6, r1 = w/2 - 4, r2 = w/2 - 4, center = true);\n    }\n}\n\nmodule flue_opening(w = 30, d = 25, h = 60) {\n    // Top opening with rounded edges\n    translate([0, 0, h/2 - 1])\n        difference() {\n            cylinder(h = 2, r = w/2 - 3, center = true);\n            cylinder(h = 3, r = w/2 - 5, center = true);\n        }\n}\n\nmodule base_plate(w = 30, d = 25) {\n    // Wider base for stability and adhesion\n    translate([0, 0, -1])\n        cube([w + 8, d + 8, 2], center = true);\n}\n\nmodule chimney() {\n    union() {\n        // Base plate\n        base_plate();\n        \n        // Main stack\n        translate([0, 0, 30])\n            chimney_stack();\n        \n        // Brick texture on front and back\n        translate([15.5, 0, 30])\n            brick_texture();\n        translate([-15.5, 0, 30])\n            mirror([1, 0, 0])\n                brick_texture();\n        \n        // Brick texture on sides\n        rotate([0, 0, 90])\n            translate([12.5, 0, 30])\n                brick_texture();\n        rotate([0, 0, 90])\n            translate([-12.5, 0, 30])\n                mirror([1, 0, 0])\n                    brick_texture();\n        \n        // Top cap\n        translate([0, 0, 62])\n            chimney_cap();\n        \n        // Flue opening detail\n        translate([0, 0, 0])\n            flue_opening();\n    }\n}\n\n// Render the chimney centered at origin\nchimney();",
    "renders": true
  },
  {
    "household_item": "hearth",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nhearth_w = 70;\nhearth_d = 50;\nhearth_h = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule hearth_base() {\n    // Firebox floor\n    difference() {\n        translate([0, 0, wall/2])\n            cube([hearth_w, hearth_d, wall], center=true);\n        translate([0, 0, wall/2 - 0.1])\n            cube([hearth_w - wall*2, hearth_d - wall*2, wall + 0.2], center=true);\n    }\n}\n\nmodule hearth_back() {\n    // Rear wall with slight slope\n    difference() {\n        translate([0, -hearth_d/2 + wall/2, hearth_h/2])\n            cube([hearth_w, wall, hearth_h], center=true);\n        translate([0, -hearth_d/2 + wall - 0.1, hearth_h/2])\n            cube([hearth_w - wall*2, wall + 0.2, hearth_h - wall], center=true);\n    }\n}\n\nmodule hearth_sides() {\n    // Left and right walls\n    for (x = [-hearth_w/2 + wall/2, hearth_w/2 - wall/2]) {\n        difference() {\n            translate([x, 0, hearth_h/2])\n                cube([wall, hearth_d, hearth_h], center=true);\n            translate([x, wall, hearth_h/2])\n                cube([wall + 0.2, hearth_d - wall*2, hearth_h - wall], center=true);\n        }\n    }\n}\n\nmodule hearth_arch() {\n    // Decorative curved arch above firebox\n    arch_h = 15;\n    arch_w = 50;\n    \n    difference() {\n        // Main arch body\n        translate([0, -hearth_d/2 + wall + 1, hearth_h - arch_h/2])\n            cube([arch_w, wall + 2, arch_h], center=true);\n        \n        // Carved arch curve\n        for (i = [0:5:arch_h]) {\n            translate([0, -hearth_d/2 + wall, hearth_h - i])\n                cylinder(h=wall + 2, r=arch_w/2 - i*0.8, $fn=32, center=true);\n        }\n    }\n}\n\nmodule firebox_interior() {\n    // Interior cavity for fire\n    translate([0, 0, wall])\n        cube([hearth_w - wall*2, hearth_d - wall*2, hearth_h - wall], center=true);\n}\n\nmodule logs() {\n    // Simple stack of logs in firebox\n    log_w = 4;\n    log_h = 3;\n    log_l = 20;\n    \n    for (i = [0:2]) {\n        rotate([0, 0, i*15])\n            translate([i*6 - 6, -hearth_d/4, wall + log_h/2])\n                cube([log_l, log_w, log_h], center=true);\n    }\n}\n\nmodule hearth_grate() {\n    // Metal grate above logs\n    grate_h = 3;\n    bar_w = 1.5;\n    bar_count = 5;\n    \n    for (i = [0:bar_count-1]) {\n        translate([-hearth_w/3 + i*(hearth_w/1.5)/(bar_count-1), 0, wall + 6])\n            cube([bar_w, hearth_d - wall*2, grate_h], center=true);\n    }\n    \n    // Cross bars\n    for (i = [0:2]) {\n        translate([0, -hearth_d/3 + i*hearth_d/3, wall + 6])\n            cube([hearth_w - wall*4, bar_w, grate_h], center=true);\n    }\n}\n\nmodule hearth_feet() {\n    // Four sturdy feet\n    foot_w = 8;\n    foot_h = 5;\n    \n    for (x = [-hearth_w/2 + foot_w/2, hearth_w/2 - foot_w/2])\n    for (y = [-hearth_d/2 + foot_w/2, hearth_d/2 - foot_w/2]) {\n        translate([x, y, -foot_h/2])\n            cube([foot_w, foot_w, foot_h], center=true);\n    }\n}\n\n// Assemble the hearth\nunion() {\n    hearth_base();\n    hearth_back();\n    hearth_sides();\n    hearth_arch();\n    hearth_feet();\n    \n    // Interior features\n    union() {\n        logs();\n        hearth_grate();\n    }\n}\n\n// Cut out interior void\ndifference() {\n    %firebox_interior();\n}",
    "renders": true
  },
  {
    "household_item": "grate",
    "openscad_code": "// Realistic-style 3D printable grate\n// Medium complexity (~120 lines)\n\n// Dimensions\ngrate_w = 80;\ngrate_d = 60;\ngrate_h = 8;\nframe_t = 2;\nbar_w = 2;\nbar_gap = 3;\nleg_h = 5;\nleg_t = 3;\nscrew_r = 1.5;\nscrew_h = 3;\n\n// Main grate module\nmodule grate() {\n    difference() {\n        // Frame\n        frame();\n        \n        // Screw holes for mounting\n        translate([grate_w/2 - 6, grate_d/2 - 6, -0.1])\n            cylinder(h=screw_h+0.2, r=screw_r, $fn=16);\n        translate([-grate_w/2 + 6, grate_d/2 - 6, -0.1])\n            cylinder(h=screw_h+0.2, r=screw_r, $fn=16);\n        translate([grate_w/2 - 6, -grate_d/2 + 6, -0.1])\n            cylinder(h=screw_h+0.2, r=screw_r, $fn=16);\n        translate([-grate_w/2 + 6, -grate_d/2 + 6, -0.1])\n            cylinder(h=screw_h+0.2, r=screw_r, $fn=16);\n    }\n    \n    // Bars\n    bars();\n    \n    // Legs\n    legs();\n}\n\n// Outer frame with rounded edges\nmodule frame() {\n    difference() {\n        // Main frame block\n        cube([grate_w, grate_d, grate_h], center=true);\n        \n        // Inner cutout (sloped for mold release)\n        translate([0, 0, -0.5])\n            cube([grate_w - 2*frame_t, grate_d - 2*frame_t, grate_h + 1], center=true);\n        \n        // Top chamfer\n        translate([0, 0, grate_h/2 - 0.5])\n            cube([grate_w, grate_d, 1], center=true);\n    }\n}\n\n// Grating bars\nmodule bars() {\n    // Long bars (x-direction)\n    bar_count_x = floor((grate_d - 2*frame_t) / (bar_w + bar_gap));\n    for (i = [0:bar_count_x-1]) {\n        y_pos = -grate_d/2 + frame_t + bar_w/2 + i*(bar_w + bar_gap);\n        translate([0, y_pos, 0])\n            cube([grate_w - 2*frame_t, bar_w, grate_h - 1], center=true);\n    }\n    \n    // Short bars (y-direction) for cross support\n    bar_count_y = floor((grate_w - 2*frame_t) / (4*bar_gap));\n    for (i = [0:bar_count_y-1]) {\n        x_pos = -grate_w/2 + frame_t + 2*bar_gap + i*(4*bar_gap);\n        translate([x_pos, 0, 0])\n            cube([bar_w, grate_d - 2*frame_t, grate_h - 2], center=true);\n    }\n}\n\n// Support legs with bottom fillet\nmodule legs() {\n    // Corner legs\n    leg_pos = [\n        [grate_w/2 - leg_t, grate_d/2 - leg_t],\n        [-grate_w/2 + leg_t, grate_d/2 - leg_t],\n        [grate_w/2 - leg_t, -grate_d/2 + leg_t],\n        [-grate_w/2 + leg_t, -grate_d/2 + leg_t]\n    ];\n    \n    for (pos = leg_pos) {\n        translate([pos[0], pos[1], -grate_h/2 - leg_h/2])\n            cube([leg_t, leg_t, leg_h], center=true);\n        \n        // Bottom fillet\n        translate([pos[0], pos[1], -grate_h/2 - leg_h + 0.5])\n            cylinder(h=1, r=leg_t/2, $fn=16);\n    }\n}\n\n// Render the grate\ngrate();",
    "renders": true
  },
  {
    "household_item": "range",
    "openscad_code": "// Realistic Style Range - Medium Complexity\n// Dimensions approximately 80mm wide, 50mm deep, 40mm tall\n\n// Overall dimensions\nrange_width = 80;\nrange_depth = 50;\nrange_height = 40;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\n// Main body of the range\nmodule range_body() {\n    difference() {\n        // Main box shape\n        cube([range_width, range_depth, range_height], center=true);\n        \n        // Hollow out inside\n        translate([0, 0, wall_thick/2])\n            cube([range_width-wall_thick*2, range_depth-wall_thick*2, range_height-wall_thick], center=true);\n        \n        // Front opening for oven\n        translate([0, range_depth/2-wall_thick, 0])\n            cube([range_width-wall_thick*4, wall_thick+1, range_height-wall_thick*2], center=true);\n    }\n}\n\n// Control panel on top front\nmodule control_panel() {\n    translate([0, range_depth/2-wall_thick/2, range_height/2-wall_thick])\n        cube([range_width-wall_thick*2, wall_thick, 10], center=true);\n}\n\n// Control knobs\nmodule control_knobs() {\n    for(i = [-1, 0, 1, 2]) {\n        translate([i*15, range_depth/2, range_height/2+2])\n            cylinder(h=3, d=6, $fn=20);\n    }\n}\n\n// Burner grates\nmodule burner_grates() {\n    // Left grate\n    translate([-20, 0, range_height/2+wall_thick/2])\n        grate_base();\n    \n    // Right grate\n    translate([20, 0, range_height/2+wall_thick/2])\n        grate_base();\n}\n\nmodule grate_base() {\n    difference() {\n        // Base grate shape\n        cube([30, 25, 2], center=true);\n        \n        // Cut holes for weight reduction\n        for(x = [-12, -6, 0, 6, 12]) {\n            translate([x, 0, -1])\n                cube([2, 22, 4], center=true);\n        }\n        for(y = [-8, 0, 8]) {\n            translate([0, y, -1])\n                cube([28, 2, 4], center=true);\n        }\n    }\n}\n\n// Burner caps\nmodule burner_caps() {\n    // Left front burner\n    translate([-20, 8, range_height/2+2+wall_thick])\n        burner_cap(12);\n    \n    // Left back burner\n    translate([-20, -8, range_height/2+2+wall_thick])\n        burner_cap(10);\n    \n    // Right front burner\n    translate([20, 8, range_height/2+2+wall_thick])\n        burner_cap(10);\n    \n    // Right back burner\n    translate([20, -8, range_height/2+2+wall_thick])\n        burner_cap(12);\n}\n\nmodule burner_cap(d) {\n    cylinder(h=2, d=d, $fn=32);\n    translate([0, 0, 1])\n        cylinder(h=1, d=d-2, $fn=32);\n}\n\n// Oven door handle\nmodule oven_handle() {\n    translate([0, range_depth/2+2, -range_height/4])\n    rotate([90, 0, 0])\n        cylinder(h=range_width-wall_thick*4, d=4, center=true, $fn=20);\n}\n\n// Feet\nmodule feet() {\n    for(x = [-range_width/2+5, range_width/2-5]) {\n        for(y = [-range_depth/2+5, range_depth/2-5]) {\n            translate([x, y, -range_height/2-2])\n                cylinder(h=4, d=6, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    range_body();\n    control_panel();\n    control_knobs();\n    burner_grates();\n    burner_caps();\n    oven_handle();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "urn",
    "openscad_code": "// Urn with realistic styling, medium complexity\n// Dimensions: ~70mm height, ~50mm widest diameter\n// Wall thickness: 2mm for 3D printing\n\n$fn=100;  // Smooth curves\n\n// Overall urn dimensions\nurn_height = 70;\nbase_diameter = 40;\nmax_diameter = 50;\nneck_diameter = 30;\nrim_diameter = 35;\n\n// Wall thickness\nwall = 2;\n\n// Main body\nmodule urn_body() {\n    // Outer shape - vase profile\n    hull() {\n        // Base\n        translate([0, 0, 0]) \n            cylinder(h=10, d1=base_diameter, d2=base_diameter*0.9);\n        \n        // Bulge\n        translate([0, 0, 30]) \n            sphere(d=max_diameter);\n            \n        // Neck\n        translate([0, 0, urn_height-15]) \n            cylinder(h=15, d1=neck_diameter, d2=rim_diameter);\n    }\n}\n\n// Hollow interior\nmodule hollow_interior() {\n    // Scaled down version for interior\n    scale([0.85, 0.85, 0.9]) {\n        urn_body();\n    }\n}\n\n// Decorative band around middle\nmodule decorative_band() {\n    // Position at widest point\n    translate([0, 0, 30]) {\n        difference() {\n            // Outer band\n            cylinder(h=8, d=max_diameter + 4);\n            \n            // Grooves\n            for(i = [-1.5:1:1.5]) {\n                rotate([0, 0, i*30]) {\n                    translate([max_diameter/2 + 2, 0, 0]) \n                        cube([max_diameter + 4, 2, 8], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Lid with handle\nmodule urn_lid() {\n    // Main lid disc\n    difference() {\n        cylinder(h=5, d=rim_diameter + 2);\n        translate([0, 0, -1]) \n            cylinder(h=7, d=rim_diameter - wall*2);\n    }\n    \n    // Handle\n    translate([0, 0, 5]) {\n        // Base of handle\n        cylinder(h=3, d=15);\n        \n        // Knob\n        translate([0, 0, 3]) {\n            sphere(d=12);\n            \n            // Finger grip groove\n            difference() {\n                sphere(d=12);\n                translate([0, 0, -2]) \n                    cylinder(h=6, d=8);\n            }\n        }\n    }\n}\n\n// Base pedestal\nmodule pedestal() {\n    difference() {\n        // Outer base\n        cylinder(h=8, d=base_diameter + 6);\n        \n        // Recessed bottom\n        translate([0, 0, 4]) \n            cylinder(h=5, d=base_diameter);\n    }\n}\n\n// Assemble the urn\nunion() {\n    // Base\n    pedestal();\n    \n    // Main body with hollow interior\n    difference() {\n        urn_body();\n        hollow_interior();\n    }\n    \n    // Decorative elements\n    decorative_band();\n    \n    // Lid (slightly offset for viewing)\n    translate([0, 0, urn_height + 2]) {\n        urn_lid();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "sieve",
    "openscad_code": "// Medium-complexity realistic sieve\n// Approx. 85 mm Ø, 3 mm wall, 1 mm holes, ready to print\n\n$fn = 36;\n\n// Overall parameters\nouter_d = 85;           // mm\nwall_th = 3;            // mm\nheight  = 35;           // mm\nrim_h   = 6;            // mm\n\n// Mesh parameters\nmesh_pitch = 3.5;       // mm\nmesh_th    = 1.2;       // mm\nhole_d     = 1.0;       // mm\n\n// Handle parameters\nhandle_len = 30;        // mm\nhandle_d   = 12;        // mm\n\n// Build the sieve\ndifference() {\n    union() {\n        // Main bowl\n        difference() {\n            cylinder(d = outer_d, h = height);\n            translate([0, 0, rim_h])\n                cylinder(d = outer_d - 2*wall_th, h = height - rim_h + 0.01);\n        }\n        \n        // Reinforcing rim lip\n        translate([0, 0, height - rim_h])\n            cylinder(d1 = outer_d, d2 = outer_d + 2, h = rim_h);\n        \n        // Handle\n        translate([outer_d/2 - wall_th, 0, height/2])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(d = handle_d, h = handle_len);\n                translate([0, handle_d/2, handle_len/2])\n                    rotate([90, 0, 0])\n                    cube([handle_len, handle_d - 2*wall_th, handle_d - 2*wall_th], center = true);\n            }\n    }\n    \n    // Mesh holes\n    module mesh_holes() {\n        r = (outer_d - 2*wall_th)/2 - hole_d/2;\n        n = floor(2*PI*r / mesh_pitch);\n        for (i = [0:n-1])\n            for (j = [0:floor(n/2)-1]) {\n                angle = i * 360 / n;\n                x = r * cos(angle);\n                y = r * sin(angle);\n                z = j * mesh_pitch * cos(30);\n                if (z < height - rim_h - hole_d/2)\n                    translate([x, y, z + rim_h])\n                        rotate([0, 90, 0])\n                        cylinder(d = hole_d, h = wall_th + 0.2, center = true);\n            }\n    }\n    mesh_holes();\n}",
    "renders": true
  },
  {
    "household_item": "canister",
    "openscad_code": "// Medium-complexity, realistic 3D-printable canister\n// Outer shell ~65 mm high, 40 mm diameter\n// Wall thickness 1.5 mm, no overhangs >45°\n\n$fn = 40;\n\nmodule main_body() {\n    difference() {\n        // External cylinder\n        cylinder(h = 60, d = 40, center = false);\n        \n        // Hollow interior\n        translate([0,0,1.5])\n            cylinder(h = 58, d = 37, center = false);\n    }\n}\n\nmodule bottom_grooves() {\n    // Two concentric shallow grooves on the bottom for grip\n    for (r = [15, 12]) {\n        translate([0,0,-0.5])\n            cylinder(h = 1, d = r, center = false);\n    }\n}\n\nmodule top_lip() {\n    // Thickened rim for strength and snap-fit lid\n    difference() {\n        translate([0,0,60])\n            cylinder(h = 5, d = 44, center = false);\n        \n        translate([0,0,60])\n            cylinder(h = 5, d = 37, center = false);\n    }\n}\n\nmodule lid() {\n    difference() {\n        // Lid disc\n        translate([0,0,65])\n            cylinder(h = 3, d = 37.2, center = false);\n        \n        // Finger notch\n        translate([0,-5,65])\n            cube([20,10,3], center = true);\n    }\n    \n    // Snap ridge\n    translate([0,0,65])\n        cylinder(h = 1, d = 40, center = false);\n}\n\nmodule label_band() {\n    // Slight recess for a sticker or printed label\n    difference() {\n        translate([0,0,25])\n            cylinder(h = 15, d = 41, center = false);\n        \n        translate([0,0,25])\n            cylinder(h = 15, d = 39.5, center = false);\n    }\n}\n\nmodule cap_grip_ridges() {\n    // Vertical ridges around lid edge for grip\n    for (i = [0:15]) {\n        rotate([0,0,i*360/16])\n            translate([18.5,0,65])\n                cube([1.5,3,3], center = true);\n    }\n}\n\n// Build the canister\nunion() {\n    main_body();\n    bottom_grooves();\n    top_lip();\n    label_band();\n    \n    // Lid assembly\n    union() {\n        lid();\n        cap_grip_ridges();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "crock",
    "openscad_code": "// Realistic medium-complexity crock\n// Overall height 85 mm, max diameter 80 mm\n\n$fn = 60;  // smooth curves\n\n// Main crock body\nmodule crock_body() {\n    difference() {\n        // Outer shell with gentle taper\n        cylinder(h = 70, r1 = 40, r2 = 35);\n        \n        // Hollow interior\n        translate([0, 0, 3])\n            cylinder(h = 68, r1 = 36, r2 = 31);\n    }\n}\n\n// Thickened rim for strength\nmodule rim() {\n    difference() {\n        // Upper rim ring\n        translate([0, 0, 67])\n            cylinder(h = 8, r1 = 42, r2 = 42);\n            \n        // Inner bevel\n        translate([0, 0, 67])\n            cylinder(h = 8, r1 = 35, r2 = 33);\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    translate([0, 0, 30])\n    rotate([90, 0, 0])\n    difference() {\n        union() {\n            // Handle arch\n            rotate_extrude(angle = 180, $fn = 30)\n                translate([40, 0, 0])\n                    circle(r = 6);\n                    \n            // Grip pad\n            translate([40, 0, -8])\n                scale([1, 0.7, 1])\n                    sphere(r = 8);\n        }\n        \n        // Hollow handle core\n        rotate_extrude(angle = 180, $fn = 30)\n            translate([40, 0, 0])\n                circle(r = 3);\n    }\n}\n\n// Base ring for stability\nmodule base_ring() {\n    difference() {\n        cylinder(h = 4, r1 = 38, r2 = 38);\n        cylinder(h = 4, r1 = 34, r2 = 34);\n    }\n}\n\n// Decorative banding grooves\nmodule grooves() {\n    for (i = [1:3]) {\n        translate([0, 0, 10 + i * 18])\n            difference() {\n                cylinder(h = 1, r1 = 39.5, r2 = 39.5);\n                cylinder(h = 1, r1 = 38, r2 = 38);\n            }\n    }\n}\n\n// Drainage spout (subtle pour spout)\nmodule spout() {\n    translate([0, 40, 65])\n    rotate([0, 90, 0])\n    difference() {\n        // Spout shape\n        hull() {\n            sphere(r = 6);\n            translate([0, 8, 0])\n                sphere(r = 4);\n        }\n        \n        // Hollow core\n        translate([0, 4, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 12, r = 3);\n    }\n}\n\n// Assembly\nunion() {\n    crock_body();\n    rim();\n    base_ring();\n    grooves();\n    \n    // Attach handles on both sides\n    handle();\n    mirror([1, 0, 0])\n        handle();\n        \n    // Add pour spout\n    spout();\n}",
    "renders": true
  },
  {
    "household_item": "pottery",
    "openscad_code": "// Realistic Medium-Complexity Pottery – OpenSCAD\n// A small wheel-thrown vase ~65 mm tall, printable without supports\n// Wall thickness = 1.6 mm to match 0.4 mm nozzle common multiples\n\n$fn = 64;\nwall = 1.6;            // wall thickness (mm)\nbase_h = 4;            // foot height\nneck_h = 8;            // neck height\nbody_h = 45;           // main body height\nrim_h  = 2;            // lip thickness\ntotal_h = base_h + body_h + neck_h + rim_h;\n\n// Profile points for revolution (outer surface)\nprofile = [\n    [0, 0],\n    [18, 0],\n    [22, base_h],\n    [28, base_h + 5],\n    [30, base_h + body_h * 0.5],\n    [26, base_h + body_h * 0.8],\n    [20, base_h + body_h],\n    [12, base_h + body_h + neck_h],\n    [10, total_h - rim_h],\n    [10, total_h]\n];\n\n// Create solid outer shell\nmodule outer_shell() {\n    rotate_extrude()\n        polygon(profile);\n}\n\n// Create inner hollow (offset profile inwards)\nmodule inner_shell() {\n    inner_profile = [\n        for (p = profile)\n            let (nx = p.x - wall)\n            [max(nx, 0), p.y + (p.y > 0 ? wall : 0)]\n    ];\n    rotate_extrude()\n        polygon(inner_profile);\n}\n\n// Simple foot ring\nmodule foot_ring() {\n    difference() {\n        cylinder(h = base_h, r1 = 22, r2 = 20);\n        cylinder(h = base_h + 0.1, r1 = 20, r2 = 18);\n    }\n}\n\n// Subtle throwing rings on the body\nmodule throwing_rings() {\n    rings = 6;\n    step = body_h / (rings + 1);\n    for (i = [1:rings])\n        translate([0, 0, base_h + i * step])\n            difference() {\n                cylinder(h = 0.6, r = 30 - 1.5 * i, center = true);\n                cylinder(h = 0.8, r = 30 - 1.5 * i - 0.2, center = true);\n            }\n}\n\n// Smooth lip bevel\nmodule lip() {\n    difference() {\n        cylinder(h = rim_h, r = 10);\n        translate([0, 0, -0.1])\n            cylinder(h = rim_h + 0.2, r = 8.4);\n    }\n}\n\n// Main assembly\nunion() {\n    difference() {\n        outer_shell();\n        inner_shell();\n    }\n    \n    foot_ring();\n    lip();\n    \n    // Optional subtle texture\n    throwing_rings();\n}",
    "renders": true
  },
  {
    "household_item": "vase",
    "openscad_code": "// Realistic Medium-Complexity Vase (≈75 mm tall, 3 mm walls, 3D-printable)\n\n$fn = 36;               // Smooth curves\n\n// Global parameters\nwall = 3;               // Uniform wall thickness\nbase_h = 6;             // Foot height\nmain_h = 65;            // Main body height\nneck_h = 12;            // Neck height\ntop_r = 15;             // Opening radius\n\n// --- Base foot ----------------------------------------------------------\nmodule base() {\n    difference() {\n        cylinder(h = base_h, r1 = 22, r2 = 25, center = true);\n        translate([0, 0, -1])\n            cylinder(h = base_h + 2, r1 = 22 - wall, r2 = 25 - wall, center = true);\n    }\n}\n\n// --- Ornament ring ------------------------------------------------------\nmodule ring(h, r_out, r_in) {\n    difference() {\n        cylinder(h = h, r = r_out, center = true);\n        cylinder(h = h + 0.1, r = r_in, center = true);\n    }\n}\n\n// --- Decorative ribs ----------------------------------------------------\nmodule ribs(count, h, r, thick) {\n    for (i = [0 : count - 1])\n        rotate([0, 0, i * 360 / count])\n            translate([r, 0, 0])\n                cube([thick, 2 * r, h], center = true);\n}\n\n// --- Main bulbous body --------------------------------------------------\nmodule body() {\n    difference() {\n        union() {\n            // Bulge\n            cylinder(h = main_h, r1 = 25, r2 = 35, center = false);\n            translate([0, 0, main_h / 2])\n                sphere(d = 70);\n            // Flat bottom\n            translate([0, 0, -0.1])\n                cylinder(h = 0.2, r = 25, center = false);\n        }\n        // Hollow cavity\n        hull() {\n            translate([0, 0, wall])\n                cylinder(h = main_h - wall, r1 = 25 - wall, r2 = 35 - wall);\n            translate([0, 0, main_h])\n                sphere(d = 70 - 2 * wall);\n        }\n        // Drainage hole\n        translate([0, 0, -1])\n            cylinder(h = 2, r = 2, center = true);\n    }\n}\n\n// --- Neck taper ---------------------------------------------------------\nmodule neck() {\n    difference() {\n        cylinder(h = neck_h, r1 = 30, r2 = top_r, center = false);\n        translate([0, 0, wall])\n            cylinder(h = neck_h - wall, r1 = 30 - wall, r2 = top_r - wall, center = false);\n    }\n}\n\n// --- Rim lip ------------------------------------------------------------\nmodule rim() {\n    difference() {\n        cylinder(h = 3, r1 = top_r + 2, r2 = top_r + 1, center = false);\n        cylinder(h = 3.2, r = top_r, center = false);\n    }\n}\n\n// === Assembly ============================================================\nunion() {\n    // Stack main parts\n    base();\n    translate([0, 0, base_h]) body();\n    translate([0, 0, base_h + main_h]) neck();\n    translate([0, 0, base_h + main_h + neck_h]) rim();\n\n    // Decorative ring mid-body\n    translate([0, 0, base_h + main_h * 0.6])\n        ring(h = 4, r_out = 36, r_in = 33);\n\n    // Vertical ribs\n    translate([0, 0, base_h + 10])\n        ribs(count = 12, h = 45, r = 34, thick = 1.5);\n}",
    "renders": true
  },
  {
    "household_item": "planter",
    "openscad_code": "// Realistic medium-complexity planter\n// External dimensions ~80 mm wide, 60 mm deep, 50 mm high\n// Wall thickness 2 mm, suitable for FDM printing without supports\n\nmodule planter_body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            // Base rounded box\n            cube([76, 56, 30], center=true);\n            sphere(4);\n        }\n\n        // Hollow interior\n        translate([0, 0, -5])\n        minkowski() {\n            cube([72, 52, 40], center=true);\n            sphere(2);\n        }\n    }\n}\n\nmodule drainage_holes() {\n    // Four drainage holes at the bottom\n    for (x = [-25, 25])\n        for (y = [-15, 15])\n            translate([x, y, -23])\n                cylinder(h=4, d=4, $fn=12, center=true);\n}\n\nmodule rim_detail() {\n    // Top rim lip for rigidity\n    translate([0, 0, 16])\n    minkowski() {\n        cube([78, 58, 4], center=true);\n        sphere(2);\n    }\n}\n\nmodule feet() {\n    // Four small feet for stability\n    for (x = [-30, 30])\n        for (y = [-20, 20])\n            translate([x, y, -27])\n                cylinder(h=4, d=8, $fn=12);\n}\n\n// Main assembly\nunion() {\n    planter_body();\n    rim_detail();\n    feet();\n}\n\n// Remove drainage holes\ndifference() {\n    children(0);\n    drainage_holes();\n}",
    "renders": true
  },
  {
    "household_item": "terrarium",
    "openscad_code": "// Terrarium with hinged lid – medium-realistic style\n// Overall footprint ~70 mm diameter, ~60 mm tall when closed\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body\nmodule terrarium_body(h = 40, r = 32) {\n    difference() {\n        cylinder(h = h, r = r, $fn = 120);           // outer cylinder\n        translate([0, 0, wall])\n            cylinder(h = h, r = r - wall, $fn = 120); // hollow inside\n    }\n}\n\n// Soil layer inside (thin disk)\nmodule soil_layer(h = 5) {\n    translate([0, 0, wall])\n        cylinder(h = h, r = 32 - wall - 1, $fn = 120);\n}\n\n// Simple stones for decoration\nmodule pebble(pos, scale) {\n    translate(pos)\n        scale([scale, scale, scale])\n            sphere(r = 3, $fn = 20);\n}\n\n// Cacti using stacked cylinders\nmodule cactus(height, segments = 4) {\n    for (i = [0 : segments - 1]) {\n        translate([0, 0, i * (height / segments) + (i == 0 ? 0 : 1)])\n            cylinder(h = height / segments + 1, r1 = 3 - i * 0.3, r2 = 3 - (i + 1) * 0.3, $fn = 16);\n    }\n}\n\n// Hinged lid\nmodule lid(r = 32, h = 5) {\n    difference() {\n        cylinder(h = h, r = r, $fn = 120);           // lid top\n        translate([0, 0, wall])\n            cylinder(h = h, r = r - wall, $fn = 120); // hollow\n    }\n\n    // Hinge pin\n    translate([r - 2, 0, h / 2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 1.5, $fn = 16);\n}\n\n// Build the terrarium\nunion() {\n    terrarium_body();\n\n    // Soil\n    color(\"saddlebrown\")\n        soil_layer();\n\n    // Pebbles\n    color(\"gray\")\n    for (p = [[20, 5, 8], [-15, -10, 7], [10, -15, 6], [-20, 12, 7]])\n        pebble(p, 1);\n\n    // Cacti\n    color(\"darkgreen\") {\n        translate([-10, 10, wall + 5])\n            cactus(15);\n        translate([15, -5, wall + 5])\n            cactus(12);\n    }\n\n    // Lid rotated open slightly\n    translate([0, 0, 40])\n        rotate([60, 0, 0])\n            lid();\n}",
    "renders": true
  },
  {
    "household_item": "aquarium",
    "openscad_code": "// Realistic 3D-printable aquarium (≈ 80 mm long)\n// All parts printable without supports – no overhangs >45°\n\n// Overall scale factor – change only this for bigger / smaller print\nscale_factor = 1;      \n\n// Wall thickness & clearances\nwall = 1.2;            // 3 shells @0.4 mm nozzle\ngap  = 0.3;            // fit clearance\n\n/* ---------- modules ---------- */\n\n// Simple fish silhouette for inside\nmodule fish() {\n    color(\"orange\")\n    translate([0,0,2])\n    scale([0.8,0.4,0.3])\n    sphere(d=8,$fn=16);\n}\n\n// Gravel pebble\nmodule pebble(s=3) {\n    color(\"gray\")\n    scale([1,1,0.7]) sphere(d=s,$fn=9);\n}\n\n// Aquarium plant – 2 leaves\nmodule plant() {\n    color(\"darkgreen\")\n    translate([0,0,1])\n    for(a=[0,120]) rotate([0,0,a]) {\n        translate([0,0,1]) rotate([0,90,0])\n        cylinder(d1=0.8,d2=0,h=12,$fn=4);\n    }\n}\n\n/* ---------- main tank body ---------- */\ndifference() {\n    // Outer shell\n    scale(scale_factor)\n    cube([80,40,45], center=true);\n    \n    // Hollow inside (leave bottom closed)\n    translate([0,0,wall/2])\n    cube([80-2*wall,40-2*wall,45-wall], center=true);\n}\n\n/* ---------- bottom frame ---------- */\ndifference() {\n    // Lower trim\n    translate([0,0,-45/2-wall/2])\n    cube([80+2*wall,40+2*wall,wall], center=true);\n    \n    // Remove center so trim is only 2 mm wide\n    translate([0,0,-45/2-wall/2-0.01])\n    cube([80-wall,40-wall,wall+0.02], center=true);\n}\n\n/* ---------- top frame with lip ---------- */\ndifference() {\n    // Outer lip\n    translate([0,0,45/2+wall/2])\n    cube([80+2*wall,40+2*wall,wall], center=true);\n    \n    // Inner cut\n    translate([0,0,45/2+wall/2+0.01])\n    cube([80,40,wall+0.02], center=true);\n}\n\n/* ---------- contents ---------- */\ntranslate([0,0,-45/2+wall+gap]) {   // sit on inner bottom\n    // Gravel bed (random scatter)\n    for(i=[-35:10:35], j=[-15:8:15])\n        translate([i,j,0])\n        pebble(rands(2,4,1)[0]);\n\n    // Two plants front-left\n    translate([-25,-10,0]) plant();\n    translate([-20,-12,0]) scale([0.7,0.7,0.7]) plant();\n    \n    // Three fish\n    translate([ 10,  5, 6]) rotate([0,0,30]) fish();\n    translate([  0, -5, 8]) rotate([0,0,-20]) fish();\n    translate([-10,  8, 4]) fish();\n}",
    "renders": true
  },
  {
    "household_item": "cage",
    "openscad_code": "// Realistic medium-complexity bird cage\n// Approx. 85 mm tall, 3 mm wall thickness for 3D printing\n\n$fn = 36;\n\nmodule cage_base() {\n    // Base ring\n    difference() {\n        cylinder(h = 10, d = 50, center = true);\n        translate([0, 0, 1]) cylinder(h = 12, d = 44, center = true);\n    }\n    \n    // Base floor\n    translate([0, 0, -5]) cube([45, 45, 2], center = true);\n    \n    // Small drainage holes in base\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([15, 0, -5]) cylinder(h = 2.1, d = 3, center = true);\n        }\n    }\n}\n\nmodule vertical_bars() {\n    // Generate vertical bars around cage\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([20, 0, 30]) cylinder(h = 60, d = 2.5, center = true);\n        }\n    }\n}\n\nmodule horizontal_rings() {\n    // Three reinforcing rings at different heights\n    for (h = [20, 40, 60]) {\n        translate([0, 0, h]) difference() {\n            cylinder(h = 3, d = 43, center = true);\n            cylinder(h = 3.1, d = 37, center = true);\n        }\n    }\n}\n\nmodule door() {\n    // Door frame on front\n    translate([0, 20, 40]) difference() {\n        cube([25, 2, 35], center = true);\n        translate([0, 0, 0]) cube([21, 2.1, 31], center = true);\n    }\n    \n    // Door bars (vertical)\n    for (x = [-8, -4, 0, 4, 8]) {\n        translate([x, 20, 40]) cylinder(h = 30, d = 1.5, center = true);\n    }\n    \n    // Door bars (horizontal)\n    for (z = [27, 40, 53]) {\n        translate([0, 20, z]) rotate([90, 0, 0]) cylinder(h = 20, d = 1.5, center = true);\n    }\n    \n    // Small door latch\n    translate([12, 21, 47]) cube([4, 1, 6], center = true);\n}\n\nmodule roof() {\n    // Roof dome\n    translate([0, 0, 75]) difference() {\n        sphere(d = 45);\n        translate([0, 0, -5]) sphere(d = 38);\n    }\n    \n    // Roof handle\n    translate([0, 0, 90]) cylinder(h = 15, d = 6, center = true);\n    translate([0, 0, 97]) sphere(d = 8);\n}\n\nmodule perch() {\n    // Perches inside cage\n    translate([0, 0, 25]) rotate([90, 0, 0]) cylinder(h = 35, d = 4, center = true);\n    translate([0, 0, 45]) rotate([0, 90, 0]) cylinder(h = 35, d = 4, center = true);\n}\n\n// Assembly\nunion() {\n    cage_base();\n    vertical_bars();\n    horizontal_rings();\n    door();\n    roof();\n    perch();\n}",
    "renders": true
  },
  {
    "household_item": "crate",
    "openscad_code": "// Crate - Realistic style, medium complexity\n// 3D printable wooden shipping crate with planks, nails and handles\n\n$fn = 32;  // Smooth curves for printing\nwall_thickness = 2;  // 3D printable thickness\ncrate_width = 80;\ncrate_depth = 60;\ncrate_height = 50;\nplank_width = 10;\nplank_gap = 1;\nnail_diameter = 2;\nnail_head_diameter = 3.5;\nhandle_diameter = 6;\nhandle_clearance = 15;\n\nmodule nail(x, y, z) {\n    // Simple round nail with head\n    translate([x, y, z]) {\n        union() {\n            cylinder(h = 3, d = nail_head_diameter);\n            translate([0, 0, 1.5]) cylinder(h = wall_thickness + 1, d = nail_diameter);\n        }\n    }\n}\n\nmodule side_planks(length, height, direction) {\n    // Generate vertical planks for sides\n    num_planks = ceil(length / (plank_width + plank_gap));\n    for (i = [0:num_planks-1]) {\n        pos = i * (plank_width + plank_gap) - length/2 + plank_width/2;\n        if (direction == \"x\") {\n            translate([pos, 0, 0]) cube([plank_width, wall_thickness, height], center = true);\n        } else {\n            translate([0, pos, 0]) cube([wall_thickness, plank_width, height], center = true);\n        }\n    }\n}\n\nmodule bottom_planks(length, width) {\n    // Generate horizontal planks for bottom\n    num_planks = ceil(width / (plank_width + plank_gap));\n    for (i = [0:num_planks-1]) {\n        pos = i * (plank_width + plank_gap) - width/2 + plank_width/2;\n        translate([0, pos, -crate_height/2 + wall_thickness/2]) \n            cube([length, plank_width, wall_thickness], center = true);\n    }\n}\n\nmodule handle_hole() {\n    // Handle hole - oval shape for finger grip\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h = wall_thickness + 1, d = handle_diameter);\n            translate([0, handle_diameter/4, -1]) cube([handle_diameter*1.2, handle_diameter/2, wall_thickness + 3], center = true);\n        }\n    }\n}\n\nmodule handle(x, y, z) {\n    // Side handle assembly\n    translate([x, y, z]) {\n        rotate([0, 90, 0]) handle_hole();\n    }\n}\n\n// Main crate assembly\ndifference() {\n    union() {\n        // Bottom planks\n        bottom_planks(crate_width, crate_depth);\n        \n        // Side assemblies\n        translate([0, crate_depth/2 - wall_thickness/2, 0]) side_planks(crate_width, crate_height, \"x\");\n        translate([0, -crate_depth/2 + wall_thickness/2, 0]) side_planks(crate_width, crate_height, \"x\");\n        translate([crate_width/2 - wall_thickness/2, 0, 0]) side_planks(crate_depth, crate_height, \"y\");\n        translate([-crate_width/2 + wall_thickness/2, 0, 0]) side_planks(crate_depth, crate_height, \"y\");\n    }\n    \n    // Handle holes on long sides\n    handle(crate_width/2 - wall_thickness/2, 0, 0);\n    handle(-crate_width/2 + wall_thickness/2, 0, 0);\n}\n\n// Nails along edges\nfor (x = [-crate_width/2 + 10:20:crate_width/2 - 10]) {\n    nail(x, crate_depth/2 - wall_thickness/2, crate_height/2 - 5);\n    nail(x, -crate_depth/2 + wall_thickness/2, crate_height/2 - 5);\n}\n\nfor (y = [-crate_depth/2 + 10:20:crate_depth/2 - 10]) {\n    nail(crate_width/2 - wall_thickness/2, y, crate_height/2 - 5);\n    nail(-crate_width/2 + wall_thickness/2, y, crate_height/2 - 5);\n}",
    "renders": true
  },
  {
    "household_item": "case",
    "openscad_code": "// Medium-complexity realistic Raspberry Pi 4 case – 3D-printable, no supports\n// Outside footprint ~88 × 58 × 28 mm\n$fa = 2; $fs = 0.5;\n\n// ---------- Global parameters ----------\nwall = 1.6;            // printer-friendly wall thickness\nclear = 0.3;           // clearance for easy assembly\npcb_l = 85;            // Pi 4 board length\npcb_w = 56;\npcb_h = 1.6;\ncase_l = pcb_l + 2*wall + 2*clear;\ncase_w = pcb_w + 2*wall + 2*clear;\ncase_h = 28;\n\n// ---------- Main case shell ----------\nmodule case_shell() {\n    difference() {\n        // overall block\n        cube([case_l, case_w, case_h], center=true);\n\n        // hollow interior\n        translate([0,0,-(wall+clear)/2])\n            cube([pcb_l+clear, pcb_w+clear, case_h-clear], center=true);\n\n        // large port cut-outs on the short side (USB, Ethernet, etc.)\n        translate([case_l/2-wall, -pcb_w/2+6, 0])\n            cube([wall+0.1, 12, 15], center=false);\n\n        translate([case_l/2-wall, -pcb_w/2+20, 0])\n            cube([wall+0.1, 12, 15], center=false);\n\n        // micro-SD slot on long edge\n        translate([case_l/2-30, case_w/2-wall, -case_h/2+8])\n            cube([15, wall+0.1, 2.5], center=false);\n\n        // USB-C power inlet\n        translate([-case_l/2+wall, -case_w/2+7, -case_h/2+8])\n            cube([8, wall+0.1, 7], center=false);\n\n        // ventilation slots on top\n        for (x=[-35:10:35])\n            translate([x, 0, case_h/2-wall/2])\n                cube([6, case_w, wall+0.1], center=true);\n    }\n}\n\n// ---------- Mounting posts for PCB ----------\nmodule posts() {\n    for (p = [[-pcb_l/2+3.5, -pcb_w/2+3.5], [pcb_l/2-3.5, -pcb_w/2+3.5],\n             [pcb_l/2-3.5,  pcb_w/2-3.5], [-pcb_l/2+3.5,  pcb_w/2-3.5]]) {\n        translate([p.x, p.y, -case_h/2+wall+clear])\n            cylinder(r=2.2, h=6, $fn=20);\n    }\n}\n\n// ---------- Snap-fit lid ----------\nmodule lid() {\n    difference() {\n        // lid plate\n        translate([0,0,case_h/2-wall/2])\n            cube([case_l, case_w, wall], center=true);\n\n        // clearance chamfers for easier snapping\n        for (edge = [[-1,0], [1,0], [0,-1], [0,1]]) {\n            translate([edge.x*(case_l/2-wall/2), edge.y*(case_w/2-wall/2), case_h/2-wall])\n                cube([wall*2, wall*2, wall], center=true);\n        }\n\n        // ventilation grill pattern\n        for (x=[-35:5:35])\n            for (y=[-25:5:25])\n                translate([x, y, case_h/2-wall/2+0.1])\n                    cube([3, 3, wall+0.2], center=true);\n    }\n}\n\n// ---------- Assembly ----------\ncase_shell();\nposts();\ntranslate([0,0,case_h/2+2]) lid();",
    "renders": true
  },
  {
    "household_item": "tureen",
    "openscad_code": "$fn = 64; // Smooth curves\n\n// Overall dimensions\nbase_d = 80;\nbody_h = 40;\nwall_t = 2;\n\nmodule tureen() {\n    union() {\n        // Base ring\n        difference() {\n            cylinder(h = 5, d = base_d);\n            translate([0, 0, -0.1])\n                cylinder(h = 5.2, d = base_d - 8);\n        }\n\n        // Main bowl\n        translate([0, 0, 5])\n            difference() {\n                cylinder(h = body_h, d1 = base_d, d2 = base_d + 10);\n                translate([0, 0, wall_t])\n                    cylinder(h = body_h, d1 = base_d - 2*wall_t, d2 = base_d + 10 - 2*wall_t);\n            }\n\n        // Rim / lip\n        translate([0, 0, 5 + body_h])\n            difference() {\n                cylinder(h = 4, d = base_d + 10 + 6);\n                translate([0, 0, -0.1])\n                    cylinder(h = 4.2, d = base_d + 10);\n            }\n\n        // Handles (two identical, mirrored along X)\n        for (side = [-1, 1]) {\n            translate([side * (base_d/2 + 6), 0, 5 + body_h/2])\n                mirror([side, 0, 0])\n                    handle();\n        }\n\n        // Lid\n        translate([0, 0, 5 + body_h + 4 + 2])\n            lid();\n    }\n}\n\nmodule handle() {\n    union() {\n        // Handle grip\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 20, d = 8);\n                translate([0, 0, wall_t])\n                    cylinder(h = 20, d = 8 - 2*wall_t);\n            }\n\n        // Two support brackets\n        for (z = [-8, 8]) {\n            translate([0, 0, z])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h = 8, d1 = 8, d2 = 4);\n                        translate([0, 0, wall_t])\n                            cylinder(h = 8, d1 = 8 - 2*wall_t, d2 = 4 - 2*wall_t);\n                    }\n        }\n    }\n}\n\nmodule lid() {\n    difference() {\n        // Main lid dome\n        scale([1, 1, 0.6])\n            sphere(d = base_d + 10 + 4);\n        // Hollow inside\n        translate([0, 0, 2])\n            scale([1, 1, 0.6])\n                sphere(d = base_d + 10);\n        // Flat underside\n        translate([0, 0, -0.1])\n            cube([base_d + 20, base_d + 20, 2], center = true);\n        // Handle hole\n        translate([0, 0, -5])\n            cylinder(h = 10, d = 6);\n    }\n\n    // Lid knob\n    translate([0, 0, 10])\n        difference() {\n            sphere(d = 12);\n            translate([0, 0, 4])\n                sphere(d = 10);\n        }\n}\n\ntureen();",
    "renders": true
  },
  {
    "household_item": "phone",
    "openscad_code": "// Realistic 3D printable phone model\n// Dimensions in mm, fits on most FDM printers\n\n// Main parameters\nphone_length = 70;\nphone_width = 35;\nphone_thickness = 7;\nscreen_to_edge = 3;\nwall_thickness = 1.2;\n\n// Module for rounded edges using hull\nmodule rounded_box(size, radius) {\n    hull() {\n        translate([radius, radius, 0]) cylinder(h=size.z, r=radius, $fn=20);\n        translate([size.x-radius, radius, 0]) cylinder(h=size.z, r=radius, $fn=20);\n        translate([radius, size.y-radius, 0]) cylinder(h=size.z, r=radius, $fn=20);\n        translate([size.x-radius, size.y-radius, 0]) cylinder(h=size.z, r=radius, $fn=20);\n    }\n}\n\n// Main phone body\nmodule phone_body() {\n    difference() {\n        // Outer rounded shell\n        rounded_box([phone_length, phone_width, phone_thickness], 5);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, -0.1])\n            rounded_box([\n                phone_length - 2*wall_thickness,\n                phone_width - 2*wall_thickness,\n                phone_thickness + 0.2\n            ], 4);\n    }\n}\n\n// Screen module with rounded corners\nmodule screen() {\n    screen_length = phone_length - 2*screen_to_edge;\n    screen_width = phone_width - 2*screen_to_edge;\n    \n    translate([screen_to_edge, screen_to_edge, phone_thickness - 0.3]) {\n        color([0.1, 0.1, 0.1])\n            rounded_box([screen_length, screen_width, 0.2], 2);\n    }\n}\n\n// Camera bump\nmodule camera() {\n    translate([phone_length - 12, phone_width - 8, phone_thickness]) {\n        union() {\n            // Main camera bump\n            cylinder(h=1.5, r=4, $fn=32);\n            \n            // Camera lens\n            translate([0, 0, 1.5])\n                cylinder(h=0.5, r=2.5, $fn=32);\n                \n            // Flash LED\n            translate([5, 0, 0])\n                cylinder(h=1, r=1.5, $fn=16);\n        }\n    }\n}\n\n// Volume buttons\nmodule volume_buttons() {\n    for(i = [0:1]) {\n        translate([-0.5, 15 + i*8, phone_thickness - 3 - i*2])\n            cube([1, 6, 2]);\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([-0.5, phone_width/2 - 3, phone_thickness/2])\n        cube([1, 8, 2]);\n}\n\n// Speaker grille holes\nmodule speaker_grille() {\n    translate([phone_length/2, phone_width - 1, 1]) {\n        for(i = [-4:4]) {\n            translate([i*3, 0, 0])\n                cylinder(h=phone_thickness - 2, r=0.5, $fn=8);\n        }\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([phone_length/2, 2, 1.5]) {\n        rotate([90, 0, 0])\n            cylinder(h=5, r1=2.5, r2=2.5, $fn=16);\n    }\n}\n\n// Assemble the phone\nunion() {\n    phone_body();\n    screen();\n    camera();\n    volume_buttons();\n    power_button();\n    speaker_grille();\n    usb_port();\n}",
    "renders": true
  },
  {
    "household_item": "computer",
    "openscad_code": "// Realistic Computer Model - Medium Complexity\n// 3D printable desktop computer with case, ports, and ventilation\n\nwall = 2; // wall thickness for 3D printing\n\n// Main computer case\nmodule computer_case() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0,0,0]) rounded_cube([100,40,220], 5);\n            translate([0,0,5]) rounded_cube([96,36,210], 5);\n        }\n        \n        // Hollow out\n        translate([0,-1,5]) rounded_cube([94,34,208], 4);\n        \n        // Front panel features\n        translate([0,20.5,180]) cube([50,1,15]); // Power button slot\n        translate([0,20.5,160]) cube([80,1,3]); // DVD drive slot\n        translate([0,20.5,140]) cube([70,1,2]); // Floppy slot\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, r) {\n    translate([0,0,r]) minkowski() {\n        cube([size.x-2*r, size.y-2*r, size.z-2*r], center=true);\n        sphere(r=r);\n    }\n}\n\n// Rear I/O shield\nmodule io_shield() {\n    translate([0,-20,170]) rotate([90,0,0]) {\n        difference() {\n            cube([80,wall,50]);\n            \n            // USB ports\n            for(x = [-30,-15,0,15,30]) {\n                translate([x,-1,35]) cube([10,wall+2,8]);\n            }\n            \n            // Ethernet\n            translate([0,-1,25]) cube([15,wall+2,8]);\n            \n            // Audio jacks\n            for(x = [-20,20]) {\n                translate([x,-1,15]) cylinder(h=wall+2, r=3.5);\n            }\n            \n            // Video ports\n            for(x = [-35,35]) {\n                translate([x,-1,5]) cube([12,wall+2,8]);\n            }\n        }\n    }\n}\n\n// Power supply fan grill\nmodule fan_grill() {\n    translate([0,-20,50]) rotate([90,0,0]) {\n        difference() {\n            cube([60,wall,60]);\n            \n            // Fan hole\n            translate([0,0,30]) cylinder(h=wall+1, r=25);\n            \n            // Grill pattern\n            for(i = [-2:2]) {\n                translate([i*10,-1,30]) cube([2,wall+2,50]);\n            }\n            for(j = [-2:2]) {\n                translate([0,-1,30+j*10]) rotate([0,0,90]) cube([2,wall+2,50]);\n            }\n        }\n    }\n}\n\n// Side panel ventilation\nmodule side_ventilation() {\n    translate([-50,0,110]) rotate([0,90,0]) {\n        difference() {\n            cube([80,1,100]);\n            \n            // Ventilation slots\n            for(i = [10:10:90]) {\n                translate([i,-1,10]) cube([5,3,80]);\n            }\n        }\n    }\n}\n\n// Front panel details\nmodule front_panel() {\n    translate([0,20,187.5]) rotate([0,90,0]) {\n        difference() {\n            cube([15,1,15]);\n            translate([7.5,0,7.5]) cylinder(h=2, r=5); // Power button\n        }\n        \n        // LED indicators\n        translate([30,0,12]) cylinder(h=2, r=2);\n        translate([30,0,3]) cylinder(h=2, r=2);\n    }\n}\n\n// Case feet\nmodule feet() {\n    for(x = [-40,40]) {\n        for(y = [-15,15]) {\n            translate([x,y,wall]) cylinder(h=5, r=3);\n        }\n    }\n}\n\n// Assemble the computer\nunion() {\n    computer_case();\n    io_shield();\n    fan_grill();\n    side_ventilation();\n    front_panel();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "laptop",
    "openscad_code": "// Realistic 3D-Printable Laptop (Medium Complexity)\n// Dimensions in mm, fits within 100 mm bounding box\n\n$fa = 2;\n$fs = 0.5;\n\nmodule base_shell() {\n    // Main lower body\n    difference() {\n        hull() {\n            translate([0, 0, 2.5]) cube([90, 60, 5], center = true);\n            translate([0, 0, 0]) cube([88, 58, 2], center = true);\n        }\n        // Ventilation slots\n        for (y = [-20:10:20])\n            translate([40, y, -1]) cube([4, 6, 6], center = true);\n        // Screw holes\n        for (x = [-40, 40])\n            for (y = [-25, 25])\n                translate([x, y, -2]) cylinder(h = 5, d = 3.5, center = true);\n    }\n}\n\nmodule keyboard() {\n    // Key grid\n    for (row = [0:5]) {\n        for (col = [0:13]) {\n            translate([-39 + col*6, -15 + row*6, 3.1]) \n                cube([4.5, 4.5, 0.8], center = true);\n        }\n    }\n    // Touchpad\n    translate([20, 0, 3.1]) cube([20, 12, 0.8], center = true);\n}\n\nmodule hinge() {\n    // Cylindrical hinge\n    rotate([90, 0, 0]) cylinder(h = 55, d = 4, center = true);\n}\n\nmodule screen_shell() {\n    difference() {\n        hull() {\n            translate([0, 0, 3]) cube([90, 58, 6], center = true);\n            translate([0, 0, 0]) cube([88, 56, 2], center = true);\n        }\n        // Screen recess\n        translate([0, 0, 1.5]) cube([84, 52, 4], center = true);\n        // Webcam hole\n        translate([0, 25, 3.5]) cylinder(h = 3, d = 4, center = true);\n    }\n}\n\nmodule screen() {\n    // Display panel\n    translate([0, 0, 1.9]) cube([82, 50, 1], center = true);\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    translate([0, 0, 0]) {\n        base_shell();\n        keyboard();\n    }\n    \n    // Hinge\n    translate([0, -30, 5]) hinge();\n    \n    // Screen assembly\n    translate([0, 30, 5]) {\n        rotate([0, -110, 0]) {\n            screen_shell();\n            screen();\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "tablet",
    "openscad_code": "// Realistic 3D-printable tablet model (100 mm x 160 mm x 8 mm)\n// Medium complexity, built from basic primitives\n\n// Global dimensions\ntablet_w = 100;\ntablet_h = 160;\ntablet_d = 8;\nwall = 2;\nscreen_margin = 5;\ncorner_r = 6;\n\n// Module: rounded box\nmodule rounded_box(w, h, d, r) {\n    hull() {\n        for (dx = [r, w - r], dy = [r, h - r]) {\n            translate([dx, dy, 0])\n                cylinder(h = d, r = r, $fn = 20);\n            translate([dx, dy, d])\n                cylinder(h = 0.01, r = r, $fn = 20);\n        }\n    }\n}\n\n// Main body shell\ndifference() {\n    rounded_box(tablet_w, tablet_h, tablet_d, corner_r);\n    // Hollow inside\n    translate([wall, wall, wall])\n        rounded_box(tablet_w - 2 * wall, tablet_h - 2 * wall, tablet_d, corner_r - wall);\n}\n\n// Screen glass\ntranslate([screen_margin, screen_margin, tablet_d - 1])\n    cube([tablet_w - 2 * screen_margin, tablet_h - 2 * screen_margin, 1]);\n\n// Bezel around screen\nmodule bezel_line(x, y, a, l) {\n    translate([x, y, tablet_d - 0.5])\n        rotate([0, 0, a])\n            cube([l, 0.5, 0.5], center = true);\n}\n\nfor (a = [0:90:270])\n    for (i = [1:3])\n        bezel_line(\n            tablet_w / 2 + cos(a) * (tablet_w / 2 - screen_margin / 2),\n            tablet_h / 2 + sin(a) * (tablet_h / 2 - screen_margin / 2),\n            a,\n            tablet_w - 2 * screen_margin\n        );\n\n// Home button\ntranslate([tablet_w / 2, 12, tablet_d - 0.5])\n    cylinder(h = 0.5, r = 5, $fn = 30);\ntranslate([tablet_w / 2, 12, tablet_d - 0.5])\n    cylinder(h = 0.5, r = 3, $fn = 30);\n\n// Front camera\ntranslate([tablet_w - 15, tablet_h - 15, tablet_d - 0.5])\n    cylinder(h = 1, r = 2, $fn = 16);\n\n// Rear camera bump\ntranslate([tablet_w - 15, 15, -1])\n    cylinder(h = 2, r = 4, $fn = 16);\ntranslate([tablet_w - 15, 15, -1.5])\n    cylinder(h = 0.5, r = 3, $fn = 16);\n\n// Volume buttons\nfor (i = [0, 1]) {\n    translate([-0.5, tablet_h / 2 + i * 10 - 5, tablet_d / 2])\n        cube([1, 8, 3]);\n}\n\n// Power button\ntranslate([-0.5, tablet_h / 2 + 20, tablet_d / 2])\n    cube([1, 12, 3]);\n\n// Speaker grill holes on bottom\nfor (i = [0:5:25]) {\n    translate([tablet_w / 2 - 12.5 + i, 8, 0])\n        cylinder(h = wall, r = 1, $fn = 8);\n}\n\n// USB-C port\ntranslate([tablet_w / 2, 8, 0])\n    cube([8, 2, wall]);\n\n// Microphone hole\ntranslate([tablet_w / 2 + 15, 8, wall / 2])\n    rotate([90, 0, 0])\n        cylinder(h = wall, r = 0.5, $fn = 8);",
    "renders": true
  },
  {
    "household_item": "television",
    "openscad_code": "// Realistic Television Model - Medium Complexity\n// Dimensions: 80mm wide x 50mm tall x 15mm deep\n\n// TV Body Module\nmodule tv_body() {\n    // Main TV frame\n    difference() {\n        // Outer shell\n        cube([80, 50, 15], center=true);\n        \n        // Screen cutout\n        translate([0, 0, 7.1])\n            cube([70, 40, 1], center=true);\n        \n        // VESA mount cutout (optional)\n        translate([0, 0, -6.9])\n            cube([20, 20, 3], center=true);\n    }\n}\n\n// Screen Module\nmodule tv_screen() {\n    // LCD panel\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, 8])\n        cube([70, 40, 0.5], center=true);\n    \n    // Screen bezel\n    color([0.2, 0.2, 0.2])\n    translate([0, 0, 7.5])\n        cube([72, 42, 1], center=true);\n}\n\n// Stand Module\nmodule tv_stand() {\n    // Stand base\n    translate([0, -25, -10])\n        cube([40, 5, 10], center=true);\n    \n    // Stand neck\n    translate([0, -18, -5])\n        cube([10, 16, 5], center=true);\n}\n\n// Ventilation holes\nmodule vents() {\n    for(i = [1:5]) {\n        translate([30 - i*12, 20, 0])\n            cube([8, 2, 14], center=true);\n    }\n}\n\n// Control buttons\nmodule controls() {\n    // Power button\n    translate([30, 0, 8])\n        cylinder(h=2, r=3, center=true);\n    \n    // Channel buttons\n    for(i = [0:1]) {\n        translate([35, -5 + i*10, 8])\n            cube([4, 2, 2], center=true);\n    }\n    \n    // Volume buttons\n    for(i = [0:1]) {\n        translate([35, -2 + i*4, 8])\n            cube([2, 2, 2], center=true);\n    }\n}\n\n// I/O ports\nmodule ports() {\n    // HDMI ports\n    for(i = [0:1]) {\n        translate([-35, -15 + i*8, 0])\n            cube([5, 3, 12], center=true);\n    }\n    \n    // USB port\n    translate([-35, 5, 0])\n        cube([5, 2, 8], center=true);\n}\n\n// Speaker grills\nmodule speakers() {\n    // Left speaker\n    translate([-30, -20, 0])\n        for(i = [0:3]) {\n            rotate([0, 90, 0])\n                translate([0, 7 - i*4, 0])\n                    cylinder(h=15, r=0.5, center=true);\n        }\n    \n    // Right speaker\n    translate([30, -20, 0])\n        for(i = [0:3]) {\n            rotate([0, 90, 0])\n                translate([0, 7 - i*4, 0])\n                    cylinder(h=15, r=0.5, center=true);\n        }\n}\n\n// Logo\nmodule logo() {\n    translate([0, 22, 7.5])\n        cube([8, 3, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    // TV components\n    tv_body();\n    tv_screen();\n    vents();\n    speakers();\n    \n    // External features\n    translate([0, 0, 0]) {\n        controls();\n        ports();\n        logo();\n    }\n    \n    // Stand (optional - can be printed separately)\n    tv_stand();\n}",
    "renders": true
  },
  {
    "household_item": "radio",
    "openscad_code": "// Realistic medium-complexity 3D-printable radio\n// Approx 80 x 50 x 30 mm\n\n$fn = 36;\n\n// Main body\nmodule radio_body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([78, 48, 28], center = true);\n            sphere(2);\n        }\n        // Hollow interior\n        translate([0, 0, -1])\n            cube([74, 44, 24], center = true);\n    }\n}\n\n// Front panel with speaker grill\nmodule front_panel() {\n    translate([0, 24.5, 0])\n    difference() {\n        cube([72, 1, 26], center = true);\n        // Speaker holes\n        for(y = [-10, 0, 10])\n            for(x = [-30, -20, -10, 0, 10, 20, 30])\n                translate([x, 0, y])\n                    cylinder(h = 2, r = 2);\n    }\n}\n\n// Tuning dial\nmodule tuning_dial() {\n    translate([-30, 25, 12])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 6, r = 12);\n        translate([0, 0, -1])\n            cylinder(h = 8, r = 2);\n    }\n}\n\n// Frequency display\nmodule frequency_display() {\n    translate([0, 25, 10])\n        cube([30, 1, 8], center = true);\n}\n\n// Volume knob\nmodule volume_knob() {\n    translate([30, 25, 0])\n    difference() {\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 6);\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 2.5);\n    }\n}\n\n// Antenna\nmodule antenna() {\n    translate([38, 0, 12])\n    rotate([0, 90, 0])\n    cylinder(h = 40, r = 1);\n}\n\n// Handle\nmodule handle() {\n    translate([0, -27, 8])\n    difference() {\n        rotate([90, 0, 0])\n            cylinder(h = 60, r = 3);\n        translate([0, -5, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 70, r = 2);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    for(pos = [-20, -10, 0, 10, 20])\n        translate([pos, 25, -8])\n            cylinder(h = 3, r = 3);\n}\n\n// Assemble radio\nradio_body();\nfront_panel();\ntuning_dial();\nfrequency_display();\nvolume_knob();\nantenna();\nhandle();\nbuttons();",
    "renders": true
  },
  {
    "household_item": "speaker",
    "openscad_code": "// Realistic Medium-Complexity Speaker (≈70 mm tall)\n// Main enclosure with grill, cone, surround, spider, magnet and terminals\n\n$fn = 36;\n\nmodule speaker() {\n    // Overall scale factor\n    scale(0.7) {\n\n        // --- Enclosure (front baffle) ---\n        // MDF-style box with rounded edges\n        difference() {\n            union() {\n                // Front baffle\n                translate([0,0,5])\n                    minkowski() {\n                        cube([80,80,3], center=true);\n                        cylinder(h=0.1, r=2, center=true);\n                    }\n                // Main box\n                translate([0,0,-18])\n                    cube([76,76,40], center=true);\n            }\n            // Recess for grill\n            translate([0,0,6.9])\n                cube([64,64,2], center=true);\n            // Terminal cup hole\n            translate([30,0,-35])\n                rotate([90,0,0])\n                    cylinder(h=20, d=12, center=true);\n        }\n\n        // --- Grill ---\n        // Perforated metal sheet\n        difference() {\n            translate([0,0,7])\n                cube([60,60,0.8], center=true);\n            // Hex pattern holes\n            for (dx = [-25:5:25])\n                for (dy = [-25:5:25])\n                    translate([dx, dy, 7.5])\n                        cylinder(h=1, d=2.5, center=true);\n        }\n\n        // --- Woofer Driver ---\n        translate([0,0,0])\n            rotate([0,180,0])  // Pointing forward\n            \n            // Mounting flange\n            translate([0,0,0])\n                cylinder(h=3, d1=48, d2=48, center=true);\n            \n            // Basket frame\n            difference() {\n                cylinder(h=15, d1=46, d2=40, center=false);\n                translate([0,0,1])\n                    cylinder(h=13, d1=38, d2=32, center=false);\n            }\n            \n            // Spider and voice-coil gap\n            translate([0,0,3])\n                cylinder(h=1, d=25, center=true);\n            \n            // Cone\n            translate([0,0,4.5])\n                cylinder(h=10, d1=38, d2=12, center=false);\n            \n            // Surround\n            difference() {\n                translate([0,0,4])\n                    cylinder(h=2, d1=42, d2=36, center=false);\n                translate([0,0,4.5])\n                    cylinder(h=1, d1=40, d2=38, center=false);\n            }\n            \n            // Dust cap\n            translate([0,0,14])\n                sphere(d=12);\n            \n            // Magnet\n            translate([0,0,-8])\n                cylinder(h=12, d=30, center=true);\n            \n            // Top plate\n            translate([0,0,-2])\n                cylinder(h=2, d=34, center=true);\n            \n            // Pole piece\n            translate([0,0,-8])\n                cylinder(h=18, d=12, center=true);\n    }\n\n    // --- Terminals ---\n    translate([30,0,-35])\n        rotate([90,0,0])\n            union() {\n                // Cup\n                cylinder(h=4, d=14, center=true);\n                // Posts\n                for (t = [-4,4])\n                    translate([0,t,3])\n                        cylinder(h=6, d=2, center=true);\n            }\n}\n\nspeaker();",
    "renders": true
  },
  {
    "household_item": "camera",
    "openscad_code": "// Realistic Camera Model - Medium Complexity\n// Based on DSLR camera proportions\n\n$fn = 32; // Smooth curves\nbody_width = 90;\nbody_height = 60;\nbody_depth = 45;\ngrip_width = 25;\ngrip_depth = 30;\nlens_diameter = 35;\nlens_length = 25;\n\nmodule camera_body() {\n    difference() {\n        // Main body\n        translate([0, 0, body_height/2])\n            cube([body_width, body_depth, body_height], center=true);\n        \n        // Grip cutout\n        translate([body_width/2 - grip_width/2, body_depth/2 - grip_depth/2, body_height/2])\n            cube([grip_width, grip_depth, body_height], center=true);\n    }\n    \n    // Grip addition\n    translate([body_width/2 - grip_width/2, body_depth/2 - grip_depth/2, body_height/2 - 5])\n        cube([grip_width + 2, grip_depth + 5, body_height - 10], center=true);\n}\n\nmodule lens_mount() {\n    // Lens mount ring\n    translate([0, 0, body_height/2 + 2])\n        cylinder(h=5, d=lens_diameter + 10);\n    \n    // Lens\n    translate([0, 0, body_height/2 + 5 + lens_length/2])\n        cylinder(h=lens_length, d=lens_diameter);\n    \n    // Front lens element\n    translate([0, 0, body_height/2 + 5 + lens_length])\n        cylinder(h=2, d=lens_diameter - 2);\n}\n\nmodule viewfinder() {\n    // Viewfinder housing\n    translate([0, body_depth/2 - 5, body_height/2 + 15])\n        cube([20, 10, 10], center=true);\n    \n    // Eyepiece\n    translate([0, body_depth/2, body_height/2 + 15])\n        cylinder(h=5, d=15);\n}\n\nmodule controls() {\n    // Mode dial\n    translate([-body_width/2 + 15, body_depth/2 - 8, body_height/2 + 5])\n        cylinder(h=3, d=12);\n    \n    // Shutter button\n    translate([body_width/2 - 20, body_depth/2 - 5, body_height/2 + 8])\n        cylinder(h=5, d=8);\n    \n    // Top display\n    translate([0, body_depth/2 - 10, body_height/2 + 1])\n        cube([30, 3, 8]);\n    \n    // Front control dial\n    for(i=[0:3]) {\n        rotate([0, 0, i * 90])\n            translate([body_width/2 - 5, 0, body_height/2])\n                cube([10, 2, 15], center=true);\n    }\n}\n\nmodule flash_hotshoe() {\n    // Hotshoe base\n    translate([0, 0, body_height/2 + 3])\n        cube([25, 5, 3], center=true);\n    \n    // Hotshoe grooves\n    for(i=[-1, 1]) {\n        translate([i * 8, 0, body_height/2 + 5])\n            cube([2, 5, 2], center=true);\n    }\n}\n\nmodule strap_lugs() {\n    // Left lug\n    translate([-body_width/2 - 2, 0, body_height/2])\n        cylinder(h=5, d=4);\n    \n    // Right lug\n    translate([body_width/2 + 2, 0, body_height/2])\n        cylinder(h=5, d=4);\n}\n\n// Build the camera\nunion() {\n    camera_body();\n    lens_mount();\n    viewfinder();\n    controls();\n    flash_hotshoe();\n    strap_lugs();\n}",
    "renders": true
  },
  {
    "household_item": "clock",
    "openscad_code": "// Realistic Medium-Complexity Clock\n// 3D-printable, no overhangs, ~70 mm diameter\n\n// Wall thickness for 3D printing\n$fn = 50;\nwall = 1.6;\n\n// Main body\nmodule clock_body() {\n    difference() {\n        // Outer rim\n        cylinder(h = 12, r = 35, center = true);\n        // Hollow core\n        cylinder(h = 14, r = 32, center = true);\n    }\n}\n\n// Clock face plate\nmodule face() {\n    difference() {\n        cylinder(h = wall, r = 32 - wall, center = true);\n        translate([0, 0, wall/2 + 0.01])\n            cylinder(h = wall*2, r = 30 - wall, center = true);\n    }\n}\n\n// Hour markers\nmodule hour_markers() {\n    for (a = [0:30:359]) {\n        rotate([0, 0, a - 90])\n        translate([28, 0, wall/2])\n        rotate([90, 0, 0])\n        linear_extrude(height = 2, center = true)\n            square([1.5, 4], center = true);\n    }\n}\n\n// Minute markers\nmodule minute_markers() {\n    for (a = [6:6:354]) {\n        rotate([0, 0, a - 90])\n        translate([29, 0, wall/2])\n        rotate([90, 0, 0])\n        linear_extrude(height = 1.5, center = true)\n            square([0.8, 2.5], center = true);\n    }\n}\n\n// Center pin\nmodule center_pin() {\n    cylinder(h = 5, r = 2, center = true);\n}\n\n// Hour hand\nmodule hour_hand() {\n    translate([0, 0, 3])\n    rotate([0, 0, 90])\n    linear_extrude(height = 1.5, center = true)\n        polygon(points = [[0, 0], [-2, 0], [-2, -4], [0, -19], [2, -4], [2, 0]]);\n}\n\n// Minute hand\nmodule minute_hand() {\n    translate([0, 0, 4.5])\n    rotate([0, 0, 180])\n    linear_extrude(height = 1.5, center = true)\n        polygon(points = [[0, 0], [-1.5, 0], [-1.5, -3], [0, -26], [1.5, -3], [1.5, 0]]);\n}\n\n// Second hand\nmodule second_hand() {\n    translate([0, 0, 6])\n    rotate([0, 0, 270])\n    linear_extrude(height = 1, center = true)\n        polygon(points = [[0, 0], [-0.8, 0], [-0.8, -2], [0, -28], [0.8, -2], [0.8, 0]]);\n}\n\n// Assembly\nclock_body();\ntranslate([0, 0, 6])\n    face();\nhour_markers();\nminute_markers();\ncenter_pin();\nhour_hand();\nminute_hand();\nsecond_hand();",
    "renders": true
  },
  {
    "household_item": "lamp",
    "openscad_code": "// Realistic Desk Lamp - Medium Complexity\n// All dimensions in mm, 3D-print friendly (no overhangs >45°, 2mm walls)\n\n// Base parameters\nbase_r = 25;\nbase_h = 8;\n\n// Stem parameters\nstem_r = 4;\nstem_h = 60;\n\n// Arm parameters\narm_len = 45;\narm_r  = 3;\n\n// Joint parameters\njoint_r = 6;\njoint_h = 10;\n\n// Shade parameters\nshade_top_r = 18;\nshade_bot_r = 24;\nshade_h     = 35;\nwall_t      = 2;          // uniform wall thickness\n\n// Bulb cavity\nbulb_r = 8;\nbulb_h = 20;\n\n// Cable hole\ncable_d = 4;\n\n// Base with rounded bottom and cable exit\nmodule base() {\n    difference() {\n        union() {\n            // Main base cylinder\n            cylinder(h = base_h, r = base_r, $fn = 48);\n\n            // Gentle fillet on bottom edge\n            translate([0, 0, -1])\n                cylinder(h = 2, r1 = base_r, r2 = base_r - 2, $fn = 48);\n        }\n\n        // Cable channel through back\n        rotate([90, 0, 0])\n            translate([0, 0, -base_r])\n                cylinder(h = base_r*2, r = cable_d/2, $fn = 32);\n    }\n}\n\n// Stem (single vertical tube)\nmodule stem() {\n    cylinder(h = stem_h, r = stem_r, $fn = 32);\n}\n\n// Hinge joint between stem and arm\nmodule joint() {\n    rotate([90, 0, 0])\n        cylinder(h = joint_h, r = joint_r, $fn = 32);\n}\n\n// Horizontal arm\nmodule arm() {\n    translate([0, -arm_len/2, 0])\n        rotate([0, 90, 0])\n            cylinder(h = arm_len, r = arm_r, $fn = 32);\n}\n\n// Conical lamp shade with hollow cavity\nmodule shade() {\n    difference() {\n        union() {\n            // Outer cone\n            cylinder(h = shade_h, r1 = shade_bot_r, r2 = shade_top_r, $fn = 48);\n\n            // Small lip on top edge for printability\n            translate([0, 0, shade_h - 1])\n                cylinder(h = 1, r = shade_top_r + 1, r2 = shade_top_r, $fn = 48);\n        }\n\n        // Inner cavity (conical)\n        translate([0, 0, -0.01])\n            cylinder(h = shade_h + 0.02,\n                     r1 = shade_bot_r - wall_t,\n                     r2 = shade_top_r - wall_t,\n                     $fn = 48);\n\n        // Bulb cavity (cylindrical cut)\n        translate([0, 0, shade_h - bulb_h - wall_t])\n            cylinder(h = bulb_h + wall_t + 1, r = bulb_r, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"gray\") base();\n    translate([0, 0, base_h]) {\n        color(\"silver\") stem();\n        translate([0, 0, stem_h - joint_h/2]) {\n            color(\"silver\") joint();\n            translate([joint_r + arm_r, 0, joint_h/2]) {\n                color(\"silver\") arm();\n                translate([arm_len/2, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        color(\"ivory\") shade();\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "fan",
    "openscad_code": "// Desk Fan - Medium complexity realistic style\n// Overall dimensions: ~80mm tall, ~90mm diameter\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main assembly\nmodule fan() {\n    union() {\n        // Base\n        translate([0, 0, 0]) base();\n        \n        // Vertical stand\n        translate([0, 0, 20]) stand();\n        \n        // Motor housing\n        translate([0, 0, 70]) motor_housing();\n        \n        // Fan blades\n        translate([0, 0, 82]) fan_blades();\n        \n        // Front grill\n        translate([0, 0, 85]) front_grill();\n        \n        // Rear grill\n        translate([0, 0, 79]) rear_grill();\n        \n        // Control knob\n        translate([15, 0, 72]) control_knob();\n    }\n}\n\n// Base - weighted circular base\nmodule base() {\n    difference() {\n        cylinder(h = 20, d = 60);\n        // Hollow bottom for weight reduction\n        translate([0, 0, 5]) cylinder(h = 15, d = 50);\n    }\n}\n\n// Vertical stand tube\nmodule stand() {\n    difference() {\n        cylinder(h = 50, d = 20);\n        // Wire channel\n        translate([0, 0, 10]) cylinder(h = 30, d = 8);\n    }\n}\n\n// Motor housing - cylindrical with details\nmodule motor_housing() {\n    difference() {\n        union() {\n            // Main housing\n            cylinder(h = 12, d = 30);\n            // Mounting ring for grill\n            translate([0, 0, 6]) cylinder(h = 2, d = 35);\n        }\n        // Motor shaft hole\n        translate([0, 0, -1]) cylinder(h = 14, d = 5);\n    }\n}\n\n// Fan blade assembly\nmodule fan_blades() {\n    rotate([0, 0, $t * 360])  // Animation rotation\n    union() {\n        // Blade hub\n        cylinder(h = 3, d = 8);\n        \n        // 5 blades with realistic twist\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 0, 1.5])\n                rotate([20, 0, 0])\n                linear_extrude(height = 2, twist = 15)\n                blade_profile();\n            }\n        }\n    }\n}\n\n// Blade cross-section profile\nmodule blade_profile() {\n    difference() {\n        // Blade shape\n        hull() {\n            translate([3, 0, 0]) circle(d = 2);\n            translate([22, 0, 0]) circle(d = 8);\n        }\n        // Cutout for weight reduction\n        translate([12, 0, 0]) circle(d = 3);\n    }\n}\n\n// Front grill - safety mesh\nmodule front_grill() {\n    difference() {\n        // Grill ring\n        cylinder(h = 1.5, d = 90);\n        \n        // Remove center\n        translate([0, 0, -0.5]) cylinder(h = 3, d = 15);\n        \n        // Grill opening\n        translate([0, 0, -0.5]) cylinder(h = 3, d = 85);\n    }\n    \n    // Radial grill bars\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, 37, 0])\n        cube([2, 8, 1.5], center = true);\n    }\n    \n    // Concentric rings\n    for(r = [20:15:50]) {\n        translate([0, 0, 0.75])\n        rotate_extrude()\n        translate([r, 0, 0]) circle(d = 1.5);\n    }\n}\n\n// Rear grill - simpler pattern\nmodule rear_grill() {\n    difference() {\n        cylinder(h = 1, d = 85);\n        translate([0, 0, -0.5]) cylinder(h = 2, d = 15);\n    }\n    \n    // Simple radial bars\n    for(i = [0:17]) {\n        rotate([0, 0, i * 20])\n        translate([0, 40, 0])\n        cube([1.5, 10, 1], center = true);\n    }\n}\n\n// Control knob with indicator\nmodule control_knob() {\n    difference() {\n        union() {\n            cylinder(h = 10, d = 12);\n            // Indicator line\n            translate([0, 6, 5]) cube([1, 2, 10], center = true);\n        }\n        // Mounting hole\n        translate([0, 0, -1]) cylinder(h = 12, d = 4);\n    }\n}\n\n// Render the complete fan\nfan();",
    "renders": true
  },
  {
    "household_item": "heater",
    "openscad_code": "// Electric space heater - realistic style, medium complexity\n// Dimensions: 80x60x100mm\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main module\nmodule heater() {\n    // Base housing\n    difference() {\n        // Main body\n        cube([80, 60, 100], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([80 - 2*wall_thickness, 60 - 2*wall_thickness, 100 - wall_thickness], center = true);\n    }\n    \n    // Front grill\n    difference() {\n        // Grill frame\n        translate([0, 0, 20])\n        cube([82, 62, 4], center = true);\n        \n        // Horizontal slots\n        for (y = [-25:5:25]) {\n            translate([0, y, 22])\n            cube([82, 3, 2], center = true);\n        }\n        \n        // Vertical slots\n        for (x = [-35:5:35]) {\n            translate([x, 0, 22])\n            cube([2, 62, 2], center = true);\n        }\n    }\n    \n    // Control panel\n    translate([0, 32, 50])\n    difference() {\n        cube([40, 4, 20], center = true);\n        \n        // Power button\n        translate([-15, 0, 5])\n        cylinder(h = 5, r = 3, center = true);\n        \n        // Temperature knob\n        translate([0, 0, 5])\n        cylinder(h = 5, r = 5, center = true);\n        \n        // Mode selector\n        translate([15, 0, 5])\n        cylinder(h = 5, r = 3, center = true);\n    }\n    \n    // Handle\n    translate([0, -35, 75])\n    difference() {\n        // Main handle bar\n        rotate([90, 0, 0])\n        cylinder(h = 50, r = 5, center = true);\n        \n        // Grip indentations\n        for (z = [-20:5:20]) {\n            translate([0, 0, z])\n            rotate([90, 0, 0])\n            cylinder(h = 4, r1 = 5, r2 = 4, center = true);\n        }\n    }\n    \n    // Feet\n    module foot(offset_x) {\n        translate([offset_x, 0, -52])\n        cube([8, 50, 4], center = true);\n    }\n    \n    foot(-30);\n    foot(30);\n    \n    // Rear vents\n    for (y = [-20:10:20]) {\n        translate([0, y, -48])\n        cube([76, 4, 2], center = true);\n    }\n    \n    // Power cord entry\n    translate([38, 0, 20])\n    rotate([0, 90, 0])\n    cylinder(h = 10, r1 = 4, r2 = 2);\n    \n    // Indicator lights\n    translate([-30, 32, 60])\n    color(\"red\")\n    sphere(r = 2);\n    \n    translate([-20, 32, 60])\n    color(\"green\")\n    sphere(r = 2);\n}\n\nheater();",
    "renders": true
  },
  {
    "household_item": "washingmachine",
    "openscad_code": "// Realistic mid-complexity washing-machine model (≈70 mm tall)\n// All dimensions in mm, printable without supports\n\n$fn = 32;          // Smooth curves for 3D printing\nwall = 1.5;        // Printable wall thickness\n\n// Main module\nmodule washing_machine() {\n    difference() {\n        // Outer shell\n        body();\n        \n        // Front door hole\n        translate([0, -19.9, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 40, d = 28, center = true);\n    }\n    \n    // Door\n    translate([0, -20, 0])\n        rotate([90, 0, 0])\n            door_assembly();\n    \n    // Control panel\n    control_panel();\n    \n    // Feet\n    for (x = [-14, 14])\n        for (y = [-14, 14])\n            translate([x, y, -18])\n                foot();\n}\n\nmodule body() {\n    // Main box\n    difference() {\n        cube([40, 40, 70], center = true);\n        cube([40 - 2*wall, 40 - 2*wall, 70 - wall], center = true);\n    }\n    \n    // Top curved lid\n    translate([0, 0, 35])\n        difference() {\n            scale([1, 1, 0.4])\n                sphere(d = 42);\n            translate([0, 0, -5])\n                cube([42, 42, 10], center = true);\n            translate([0, 0, -6])\n                cube([42 - 2*wall, 42 - 2*wall, 12], center = true);\n        }\n}\n\nmodule door_assembly() {\n    // Door ring\n    difference() {\n        cylinder(h = 3, d = 30);\n        cylinder(h = 4, d = 25);\n    }\n    \n    // Glass window\n    translate([0, 0, 1.5])\n        cylinder(h = 1.5, d = 24.9);\n    \n    // Door handle\n    translate([0, 15, 1.5])\n        rotate([90, 0, 0])\n            cylinder(h = 6, d = 3);\n}\n\nmodule control_panel() {\n    // Panel base\n    translate([0, 15, 45])\n        difference() {\n            cube([30, 10, 8], center = true);\n            translate([0, 0, wall])\n                cube([30 - 2*wall, 10 - 2*wall, 8], center = true);\n        }\n    \n    // Knobs\n    for (i = [-1:1]) {\n        translate([i*8, 15, 49])\n            rotate([90, 0, 0])\n                cylinder(h = 3, d = 4);\n    }\n    \n    // Display window\n    translate([0, 15, 49])\n        cube([8, 0.5, 3], center = true);\n}\n\nmodule foot() {\n    cylinder(h = 3, d = 4);\n}\n\nwashing_machine();",
    "renders": true
  },
  {
    "household_item": "dryer",
    "openscad_code": "// Compact Realistic Dryer (≈ 60 mm tall)\n// Medium complexity, printable with 0.8 mm walls\n\n$fn = 32;\n\n// Overall dimensions\ndryer_w = 40;\ndryer_d = 35;\ndryer_h = 60;\n\nwall_t = 1.0;\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, dryer_h/2])\n            cube([dryer_w, dryer_d, dryer_h], center=true);\n        \n        // Hollow inside\n        translate([0, 0, dryer_h/2])\n            cube([dryer_w - 2*wall_t, dryer_d - 2*wall_t, dryer_h - wall_t], center=true);\n        \n        // Front opening for drum\n        translate([0, dryer_d/2 + 0.1, dryer_h/2])\n            rotate([90, 0, 0])\n            cylinder(h = wall_t + 0.2, d = 26);\n    }\n}\n\nmodule door() {\n    // Door frame\n    difference() {\n        translate([0, dryer_d/2 + wall_t/2, dryer_h/2])\n            cube([30, wall_t, 30], center=true);\n        \n        // Window hole\n        translate([0, dryer_d/2 + wall_t, dryer_h/2])\n            cube([24, wall_t + 0.2, 24], center=true);\n    }\n    \n    // Window glass\n    translate([0, dryer_d/2 + wall_t + 0.05, dryer_h/2])\n        cube([23, wall_t/2, 23], center=true);\n    \n    // Handle\n    translate([10, dryer_d/2 + wall_t + 1, dryer_h/2 - 8])\n        cube([4, 1, 8]);\n}\n\nmodule control_panel() {\n    // Top panel\n    translate([0, -dryer_d/4, dryer_h - 3])\n        cube([dryer_w - 6, 8, 4], center=true);\n    \n    // Knobs\n    for (x = [-10, 0, 10]) {\n        translate([x, -dryer_d/4, dryer_h - 2])\n            cylinder(h = 2, d = 4);\n        translate([x, -dryer_d/4, dryer_h - 0.5])\n            sphere(d = 3);\n    }\n    \n    // Display\n    translate([-3, -dryer_d/4, dryer_h - 1])\n        cube([12, 6, 0.5], center=true);\n}\n\nmodule back_vent() {\n    difference() {\n        translate([0, -dryer_d/2 - 0.1, dryer_h - 10])\n            cube([20, wall_t + 0.2, 15], center=true);\n        \n        // Vent slots\n        for (y = [dryer_h - 16:3:dryer_h - 7]) {\n            translate([0, -dryer_d/2 - 0.1, y])\n                cube([18, wall_t + 0.4, 1.5], center=true);\n        }\n    }\n}\n\nmodule feet() {\n    // Four feet\n    for (x = [-dryer_w/2 + 4, dryer_w/2 - 4])\n    for (y = [-dryer_d/2 + 4, dryer_d/2 - 4]) {\n        translate([x, y, 1])\n            cylinder(h = 2, d = 3);\n    }\n}\n\nmodule drum() {\n    // Inner drum ridges\n    rotate([0, 0, 45])\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 0, dryer_h/2])\n            cube([2, 22, 35], center=true);\n    }\n}\n\nunion() {\n    main_body();\n    door();\n    control_panel();\n    back_vent();\n    feet();\n    \n    // Drum visible through door\n    %drum();\n}",
    "renders": true
  },
  {
    "household_item": "iron",
    "openscad_code": "// Realistic Iron - Medium Complexity\n// 3D printable, ~80mm long\n\n$fn = 32;\n\n// Main parameters\niron_length = 80;\niron_width = 42;\niron_height = 35;\nhandle_radius = 8;\nwall_thick = 2;\n\nmodule iron_body() {\n    // Sole plate\n    translate([0, 0, 0])\n    difference() {\n        hull() {\n            cube([iron_length, iron_width, wall_thick], center = true);\n            translate([-iron_length/2 + 15, 0, 0])\n            scale([1, 0.7, 1])\n            sphere(r = iron_width/2);\n        }\n        \n        // Steam holes\n        for(x = [-25:10:15])\n            for(y = [-12:8:12])\n                translate([x, y, wall_thick/2 + 0.1])\n                cylinder(h = wall_thick + 0.2, r = 1.5, $fn = 16);\n    }\n    \n    // Upper body\n    translate([0, 0, wall_thick/2 + 10])\n    difference() {\n        hull() {\n            translate([-iron_length/2 + 20, 0, 0])\n            scale([1, 0.8, 0.6])\n            sphere(r = 20);\n            translate([iron_length/2 - 20, 0, 0])\n            cube([iron_length/2, iron_width - 10, 20], center = true);\n        }\n        \n        // Temperature dial cavity\n        translate([iron_length/2 - 25, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r = 6, $fn = 24);\n    }\n    \n    // Water reservoir lid\n    translate([-10, 0, wall_thick + 15])\n    rotate([0, 20, 0])\n    cube([20, 20, 1], center = true);\n}\n\nmodule handle() {\n    translate([0, 0, iron_height + handle_radius])\n    rotate([15, 0, 0])\n    difference() {\n        hull() {\n            translate([-20, 0, 0])\n            sphere(r = handle_radius);\n            translate([20, 0, 0])\n            sphere(r = handle_radius);\n            translate([-20, 0, 5])\n            sphere(r = handle_radius * 0.8);\n            translate([20, 0, 5])\n            sphere(r = handle_radius * 0.8);\n        }\n        \n        // Handle grip removal\n        translate([0, 0, -handle_radius - 5])\n        cube([50, handle_radius * 1.8, handle_radius * 2], center = true);\n    }\n    \n    // Handle supports\n    for(x = [-15, 15])\n        translate([x, 0, iron_height/2 + 5])\n        cylinder(h = iron_height/2, r = 3, $fn = 16);\n}\n\nmodule steam_control() {\n    // Steam burst button\n    translate([iron_length/2 - 20, iron_width/2 - 8, wall_thick + 18])\n    cylinder(h = 3, r = 4, $fn = 16);\n    \n    // Spray button\n    translate([iron_length/2 - 20, -(iron_width/2 - 8), wall_thick + 18])\n    cylinder(h = 3, r = 3, $fn = 16);\n}\n\nmodule cord() {\n    // Cord entry point\n    translate([-iron_length/2 + 5, 0, wall_thick + 15])\n    rotate([45, 0, 0])\n    cylinder(h = 15, r1 = 4, r2 = 2, $fn = 16);\n}\n\n// Assembly\nunion() {\n    iron_body();\n    handle();\n    steam_control();\n    cord();\n}",
    "renders": true
  },
  {
    "household_item": "humidifier",
    "openscad_code": "// Medium-complexity realistic tabletop humidifier\n// Approx. 85 mm tall, single-piece 3D-printable body\n\n$fn = 36;\n\n// Main dimensions\nbase_h = 12;\ntank_h = 45;\ntank_r = 35;\nneck_h = 8;\nmist_chim_h = 15;\nmist_chim_r = 6;\nvent_h = 4;\nvent_r = 4;\n\n// Wall thickness\nwall = 2;\n\nmodule body() {\n    // Water tank (hollow cylinder)\n    difference() {\n        cylinder(h = tank_h + neck_h, r = tank_r);\n        translate([0, 0, wall])\n            cylinder(h = tank_h + neck_h - wall, r = tank_r - wall);\n    }\n}\n\nmodule base() {\n    // Control base\n    difference() {\n        // Main block\n        cube([tank_r*2, tank_r*2, base_h], center = true);\n        \n        // Recess to receive tank\n        translate([0, 0, -base_h/2 + wall])\n            cube([tank_r*2 - 4, tank_r*2 - 4, base_h], center = true);\n    }\n    \n    // Control knob\n    translate([tank_r - 6, 0, base_h/2 + 3])\n        rotate([90, 0, 0])\n        cylinder(h = 6, r1 = 4, r2 = 3);\n}\n\nmodule mist_chimney() {\n    // Mist outlet tube\n    difference() {\n        cylinder(h = mist_chim_h, r = mist_chim_r);\n        translate([0, 0, wall])\n            cylinder(h = mist_chim_h - wall, r = mist_chim_r - wall);\n    }\n    \n    // Vent holes around top\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n        translate([mist_chim_r - vent_r/2, 0, mist_chim_h - vent_h - 1])\n            rotate([90, 0, 0])\n            cylinder(h = vent_h, r = vent_r);\n    }\n}\n\nmodule handle() {\n    // Arc handle on tank\n    translate([0, tank_r - wall, tank_h/2])\n        rotate([90, 0, 0])\n        difference() {\n            // Outer torus\n            rotate_extrude()\n                translate([tank_r - wall - 4, 0])\n                    circle(r = 3);\n            // Inner torus (hollow)\n            rotate_extrude()\n                translate([tank_r - wall - 4, 0])\n                    circle(r = 1);\n        }\n}\n\n// Assembly\ntranslate([0, 0, base_h/2])\n    base();\n\ntranslate([0, 0, base_h])\n    body();\n\ntranslate([0, 0, base_h + tank_h + neck_h - wall])\n    mist_chimney();\n\nhandle();",
    "renders": true
  },
  {
    "household_item": "dehumidifier",
    "openscad_code": "// Dehumidifier (realistic style, medium complexity)\n// Overall dimensions: 80x50x75 mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([80, 50, 75], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 2.5])\n            cube([80-wall*2, 50-wall*2, 75-wall*2], center=true);\n    }\n}\n\n// Front air intake grille\nmodule grille() {\n    difference() {\n        // Grille plate\n        translate([0, 25.5, 0])\n            cube([70, wall, 65], center=true);\n        \n        // Horizontal slots\n        for (z = [-27.5:5:27.5]) {\n            translate([0, 25.5, z])\n                cube([65, wall+0.5, 3], center=true);\n        }\n    }\n}\n\n// Control panel\nmodule controls() {\n    translate([0, -25.5, 12.5]) {\n        // Panel base\n        cube([40, wall, 20], center=true);\n        \n        // Display screen\n        translate([0, wall/2, 5])\n            cube([25, 0.1, 8], center=true);\n        \n        // Buttons\n        for (x = [-12:6:12]) {\n            translate([x, wall/2, -3])\n                cylinder(h=wall, r=2, $fn=16);\n        }\n    }\n}\n\n// Top handle\nmodule handle() {\n    translate([0, 0, 40]) {\n        difference() {\n            // Handle arch\n            rotate([90, 0, 0])\n                cylinder(h=60, r1=4, r2=4, center=true);\n            \n            // Cutout\n            rotate([90, 0, 0])\n                translate([0, 0, -5])\n                    cylinder(h=70, r1=2, r2=2, center=true);\n        }\n    }\n}\n\n// Water tank\nmodule tank() {\n    translate([0, 0, -35]) {\n        difference() {\n            // Tank body\n            cube([65, 40, 25], center=true);\n            \n            // Hollow\n            translate([0, 0, 2.5])\n                cube([65-wall*2, 40-wall*2, 25-wall*2], center=true);\n            \n            // Fill opening\n            translate([0, 0, 12.5])\n                cylinder(h=wall, r=8, $fn=32);\n        }\n    }\n}\n\n// Side air vents\nmodule vents() {\n    // Left side vents\n    translate([-42.5, 0, 0]) {\n        for (z = [-25:8:25]) {\n            translate([0, 0, z])\n                cube([wall, 30, 4], center=true);\n        }\n    }\n    \n    // Right side vents\n    translate([42.5, 0, 0]) {\n        for (z = [-25:8:25]) {\n            translate([0, 0, z])\n                cube([wall, 30, 4], center=true);\n        }\n    }\n}\n\n// Power cord\nmodule cord() {\n    translate([-35, -25, -35]) {\n        // Cord entry point\n        cylinder(h=wall, r=3, $fn=16);\n        \n        // Cord\n        rotate([90, 0, 0])\n            translate([0, 0, -15])\n                cylinder(h=30, r=2, $fn=16);\n    }\n}\n\n// Feet\nmodule feet() {\n    for (x = [-30:60:30])\n    for (y = [-20:40:40]) {\n        translate([x, y, -40]) {\n            difference() {\n                cylinder(h=5, r=4, $fn=16);\n                cylinder(h=5, r=2, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    grille();\n    controls();\n    handle();\n    tank();\n    vents();\n    cord();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "purifier",
    "openscad_code": "// Air Purifier - Realistic Style, Medium Complexity\n// Designed for 3D printing (~80mm height)\n\n$fn = 50;  // Smooth curves\n\nmodule main_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = 60, d = 55);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h = 58, d = 51);\n        \n        // Top air outlet holes\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([17, 0, 50])\n                    cylinder(h = 10, d = 6);\n        }\n        \n        // Side air intake slots\n        for (i = [0:15:345]) {\n            rotate([0, 0, i])\n                translate([27.5, 0, 25])\n                    cube([2, 20, 15], center = true);\n        }\n    }\n}\n\nmodule control_panel() {\n    // Top control ring\n    difference() {\n        translate([0, 0, 60])\n            cylinder(h = 3, d = 53);\n        \n        translate([0, 0, 59.5])\n            cylinder(h = 4, d = 45);\n    }\n    \n    // Control buttons\n    for (pos = [[-15, 0], [0, 15], [15, 0]]) {\n        translate([pos[0], pos[1], 63])\n            cylinder(h = 2, d = 6);\n    }\n    \n    // Power button\n    translate([0, 0, 63])\n        cylinder(h = 2.5, d = 8);\n}\n\nmodule base() {\n    // Bottom base with feet\n    difference() {\n        translate([0, 0, -5])\n            cylinder(h = 5, d = 60);\n        \n        translate([0, 0, -5])\n            cylinder(h = 5, d = 50);\n    }\n    \n    // Support feet\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([22, 0, -2.5])\n                cube([10, 5, 5], center = true);\n    }\n}\n\nmodule filter_indicator() {\n    // LED ring around top\n    translate([0, 0, 60.5])\n        difference() {\n            cylinder(h = 1.5, d = 49);\n            cylinder(h = 1.6, d = 43);\n        }\n}\n\nmodule air_quality_sensor() {\n    // Small sensor grille on front\n    translate([27.5, 0, 15])\n        difference() {\n            cube([5, 15, 8]);\n            for (j = [0:2:6]) {\n                translate([-1, -7 + j, 2])\n                    cube([7, 1.5, 4]);\n            }\n        }\n}\n\n// Main assembly\nunion() {\n    main_body();\n    control_panel();\n    base();\n    filter_indicator();\n    air_quality_sensor();\n}",
    "renders": true
  },
  {
    "household_item": "thermostat",
    "openscad_code": "// Thermostat - Realistic Style, Medium Complexity\n// 3D printable wall-mount smart thermostat\n\n// Overall dimensions\nthermostat_width = 80;\nthermostat_height = 55;\nthermostat_depth = 20;\nwall_thickness = 2;\n\n// Main body with rounded edges\nmodule main_body() {\n    difference() {\n        // Outer rounded rectangular body\n        minkowski() {\n            cube([thermostat_width-wall_thickness*2, thermostat_height-wall_thickness*2, thermostat_depth-wall_thickness], center=true);\n            sphere(wall_thickness/2, $fn=20);\n        }\n        \n        // Hollow out the back\n        translate([0,0,-thermostat_depth/2-wall_thickness])\n            cube([thermostat_width-wall_thickness*4, thermostat_height-wall_thickness*4, thermostat_depth], center=true);\n    }\n}\n\n// Screen bezel\nmodule screen() {\n    color(\"black\")\n    translate([0, 10, thermostat_depth/2+0.1])\n        cube([thermostat_width-20, 25, 1], center=true);\n}\n\n// Touch buttons below screen\nmodule buttons() {\n    for(i=[-1, 0, 1]) {\n        translate([i*15, -15, thermostat_depth/2+0.1])\n            cylinder(h=1, r=4, $fn=32);\n    }\n}\n\n// Temperature sensor vents\nmodule sensor_vents() {\n    difference() {\n        // Vent housing\n        translate([0, -thermostat_height/2+5, 0])\n            cube([thermostat_width-10, 8, 4], center=true);\n        \n        // Vent slots\n        for(i=[-2:1:2]) {\n            translate([i*8, -thermostat_height/2+5, 0])\n                cube([2, 8, 5], center=true);\n        }\n    }\n}\n\n// Wall mounting bracket\nmodule wall_mount() {\n    difference() {\n        // Mounting plate\n        translate([0, 0, -thermostat_depth/2-2])\n            cube([60, 40, 4], center=true);\n        \n        // Screw holes\n        for(x=[-20, 20])\n            for(y=[-10, 10])\n                translate([x, y, -thermostat_depth/2-4])\n                    cylinder(h=5, r=2, $fn=16);\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    translate([0, 0, thermostat_depth/2+0.5])\n        linear_extrude(height=0.5)\n            text(\"SMART\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// LED indicator\nmodule led_indicator() {\n    color(\"blue\")\n    translate([thermostat_width/2-8, thermostat_height/2-8, thermostat_depth/2+0.1])\n        cylinder(h=1, r=3, $fn=16);\n}\n\n// Assembly\nunion() {\n    main_body();\n    wall_mount();\n    screen();\n    buttons();\n    sensor_vents();\n    brand_label();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "household_item": "router",
    "openscad_code": "// Realistic Medium-Complexity Router Model\n// Approx. 80 mm x 50 mm x 70 mm\n\n// Overall dimensions\nrouter_w = 80;\nrouter_d = 50;\nrouter_h = 70;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule base() {\n    // Main base plate\n    translate([0, 0, 0])\n        cube([router_w, router_d, 6], center=true);\n    \n    // Bottom vents\n    for (x = [-30, -15, 0, 15, 30])\n        translate([x, 0, -3.5])\n            cube([8, router_d-10, 3], center=true);\n}\n\nmodule body() {\n    // Lower body\n    difference() {\n        translate([0, 0, 12])\n            cube([router_w-10, router_d-8, 18], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 12])\n            cube([router_w-10-wall*2, router_d-8-wall*2, 18-wall], center=true);\n    }\n    \n    // Upper body\n    difference() {\n        translate([0, 0, 27])\n            cube([router_w-15, router_d-12, 20], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 27])\n            cube([router_w-15-wall*2, router_d-12-wall*2, 20-wall], center=true);\n    }\n}\n\nmodule antenna() {\n    // Left antenna\n    translate([-router_w/2+5, -router_d/2+5, router_h-5])\n        rotate([0, 45, 0])\n        cylinder(h=15, d1=2.5, d2=1, center=false);\n    \n    // Right antenna\n    translate([router_w/2-5, -router_d/2+5, router_h-5])\n        rotate([0, 45, 0])\n        cylinder(h=15, d1=2.5, d2=1, center=false);\n}\n\nmodule front_panel() {\n    // Front face\n    translate([0, router_d/2-1, 15])\n        cube([router_w-12, 2, 30], center=true);\n    \n    // LED indicators\n    for (pos = [-25, -15, -5, 5, 15, 25])\n        translate([pos, router_d/2, 22])\n            sphere(d=2, $fn=8);\n    \n    // Ethernet ports\n    for (port = [-20, -10, 0, 10, 20])\n        translate([port, router_d/2-1, 12])\n            cube([8, 3, 6], center=true);\n    \n    // WAN port\n    translate([30, router_d/2-1, 12])\n        cube([8, 3, 6], center=true);\n    \n    // Power port\n    translate([-35, router_d/2-1, 12])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=6, center=true);\n}\n\nmodule top_vent() {\n    // Top cooling vents\n    for (y = [-15, -10, -5, 0, 5, 10, 15])\n        translate([0, y, router_h-8])\n            cube([router_w-20, 3, 2], center=true);\n}\n\nmodule feet() {\n    // Rubber feet\n    foot_positions = [\n        [-router_w/2+8, -router_d/2+8, -3.5],\n        [router_w/2-8, -router_d/2+8, -3.5],\n        [-router_w/2+8, router_d/2-8, -3.5],\n        [router_w/2-8, router_d/2-8, -3.5]\n    ];\n    \n    for (pos = foot_positions) {\n        translate(pos)\n            cylinder(h=1.5, d=8, $fn=16);\n    }\n}\n\n// Assemble the router\nunion() {\n    base();\n    body();\n    antenna();\n    front_panel();\n    top_vent();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "modem",
    "openscad_code": "// Cable modem – medium complexity, printable, recognizable\n// Overall footprint 90 mm × 65 mm × 30 mm\n\n// Wall / shell thickness for printing\nwall = 1.8;\n\n// Main plastic enclosure\nmodule enclosure() {\n    // Lower shell\n    difference() {\n        cube([90, 65, 15], center=true);\n        translate([0,0,1])\n            cube([90-wall*2, 65-wall*2, 13], center=true);\n    }\n    // Upper shell (snap-fit style)\n    translate([0,0,15])\n    difference() {\n        cube([90, 65, 14], center=true);\n        translate([0,0,-1])\n            cube([90-wall*2, 65-wall*2, 14], center=true);\n    }\n}\n\n// Ventilation grill pattern on top\nmodule vents() {\n    for(y=[-25:5:25])\n        translate([0,y,29])\n            cube([80, 2, 2], center=true);\n}\n\n// LED indicator strip\nmodule leds() {\n    for(i=[-40:10:40])\n        translate([i, -31, 22])\n        difference() {\n            cylinder(h=3, d=5, $fn=20);\n            translate([0,0,1.5])\n                cylinder(h=3, d=3, $fn=20);\n        }\n}\n\n// Coax (F-connector) port\nmodule coax() {\n    translate([-50, 0, 0])\n    rotate([0,90,0])\n    union() {\n        cylinder(h=12, d=12, $fn=30);\n        translate([0,0,12])\n            cylinder(h=8, d=8, $fn=30);\n    }\n}\n\n// Ethernet port block\nmodule ethernet() {\n    translate([50, -15, 0])\n    for(y=[0:10:20]) {\n        translate([0,y,0])\n        difference() {\n            cube([10, 8, 12], center=true);\n            translate([0,0,-6])\n                cube([7.5, 6, 13], center=true);\n        }\n    }\n}\n\n// Reset button hole\nmodule reset_button() {\n    translate([40, 25, 0])\n        cylinder(h=15, d=3, $fn=20);\n}\n\n// Rubber feet (simple cylinders)\nmodule feet() {\n    for(x=[-35, 35])\n        for(y=[-23, 23]) {\n            translate([x, y, -8.5])\n                cylinder(h=2, d=4, $fn=20);\n        }\n}\n\n// Assemble\nunion() {\n    enclosure();\n    vents();\n    leds();\n    coax();\n    ethernet();\n    feet();\n}\ndifference() {\n    children(0);\n    reset_button();\n}",
    "renders": true
  },
  {
    "household_item": "printer",
    "openscad_code": "// Compact 3D printer model (approx. 80 mm tall)\n// All dimensions in mm, printable without supports\n\n$fn = 32;  // Smooth curves\n\n// Main body\nmodule frame() {\n    // Base\n    difference() {\n        cube([60, 60, 5], center = true);\n        translate([0, 0, -2.5]) cube([55, 55, 6], center = true);\n    }\n    \n    // Vertical posts\n    for (x = [-25, 25])\n        translate([x, 0, 22])\n            cube([6, 6, 44], center = true);\n    \n    // Top crossbar\n    translate([0, 0, 44])\n        cube([60, 6, 6], center = true);\n}\n\n// Print bed\nmodule bed() {\n    color(\"silver\")\n    translate([0, 0, 12])\n    difference() {\n        cube([45, 45, 4], center = true);\n        translate([0, 0, -2]) cube([43, 43, 5], center = true);\n    }\n}\n\n// Extruder assembly\nmodule extruder() {\n    color(\"gray\")\n    union() {\n        // Carriage\n        translate([0, 0, 32])\n            cube([40, 10, 8], center = true);\n        \n        // Extruder block\n        translate([0, -10, 35])\n            cube([10, 10, 14], center = true);\n        \n        // Nozzle\n        translate([0, -15, 28.5])\n            cylinder(h = 5, r = 2);\n    }\n}\n\n// Control panel\nmodule panel() {\n    color(\"black\")\n    translate([30, 0, 25])\n    rotate([0, 90, 0])\n    difference() {\n        cube([20, 30, 4], center = true);\n        translate([0, 0, -2.5]) cube([18, 28, 5], center = true);\n    }\n}\n\n// Filament spool\nmodule spool() {\n    color(\"red\")\n    translate([0, 30, 44])\n    rotate([90, 0, 0])\n    union() {\n        difference() {\n            cylinder(h = 15, r = 12);\n            cylinder(h = 16, r = 4);\n        }\n        // Filament guide\n        translate([0, 0, 7.5])\n            rotate([0, 90, 0])\n            cylinder(h = 25, r = 1.5);\n    }\n}\n\n// Power supply\nmodule psu() {\n    color(\"darkgreen\")\n    translate([0, -30, 8])\n    cube([20, 15, 12], center = true);\n}\n\n// Assembly\nframe();\nbed();\nextruder();\npanel();\nspool();\npsu();",
    "renders": true
  },
  {
    "household_item": "scanner",
    "openscad_code": "// Realistic 3D printable scanner model\n// Overall dimensions: 80 x 60 x 25 mm\n\n// Main scanner body\nmodule scanner_body() {\n    difference() {\n        // Main enclosure\n        translate([0, 0, 10]) cube([80, 60, 20], center=true);\n        \n        // Top recess for glass\n        translate([0, 0, 20]) cube([70, 50, 2], center=true);\n        \n        // Front button recesses\n        for (i = [-30, -20, -10]) {\n            translate([i, 25, 20]) cube([8, 4, 2], center=true);\n        }\n    }\n}\n\n// Glass scanning bed\nmodule scanning_glass() {\n    translate([0, 0, 21]) cube([70, 50, 1], center=true);\n}\n\n// Control buttons\nmodule buttons() {\n    for (i = [-30, -20, -10]) {\n        translate([i, 25, 22]) cylinder(h=2, r=3, $fn=16);\n    }\n}\n\n// Document lid\nmodule lid() {\n    // Hinge\n    translate([0, -30, 20]) rotate([90, 0, 0]) cylinder(h=3, r=2, $fn=16);\n    \n    // Main lid plate\n    translate([0, 5, 20]) rotate([-90, 0, 0]) {\n        difference() {\n            cube([74, 54, 4], center=true);\n            // Interior hollow\n            translate([0, 0, 1]) cube([70, 50, 2], center=true);\n        }\n    }\n    \n    // Lid handle\n    translate([0, 30, 20]) cube([20, 4, 2], center=true);\n}\n\n// Paper guides\nmodule paper_guides() {\n    // Left guide\n    translate([-33, 0, 15]) cube([2, 54, 10], center=true);\n    \n    // Right guide\n    translate([33, 0, 15]) cube([2, 54, 10], center=true);\n}\n\n// USB port\nmodule usb_port() {\n    difference() {\n        translate([40, -30, 15]) cube([8, 6, 4], center=true);\n        translate([40, -30, 15]) cube([6, 4, 2], center=true);\n    }\n}\n\n// Power LED\nmodule power_led() {\n    translate([30, 25, 22]) cylinder(h=1, r=2, $fn=16);\n}\n\n// Feet for stability\nmodule feet() {\n    for (x = [-30, 30]) {\n        for (y = [-20, 20]) {\n            translate([x, y, 0]) cylinder(h=3, r=4, $fn=16);\n        }\n    }\n}\n\n// Assemble scanner\nunion() {\n    scanner_body();\n    scanning_glass();\n    buttons();\n    lid();\n    paper_guides();\n    usb_port();\n    power_led();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "monitor",
    "openscad_code": "// Monitor with stand for 3D printing\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall scale\nmodule monitor() {\n    scale(0.3) {\n        union() {\n            screen_assembly();\n            stand_assembly();\n        }\n    }\n}\n\n// Screen module\nmodule screen_assembly() {\n    // Main screen bezel\n    difference() {\n        // Outer frame\n        translate([0, 0, 5])\n            cube([160, 90, 8], center = true);\n        \n        // Screen opening\n        translate([0, 0, 9.5])\n            cube([140, 80, 1], center = true);\n    }\n    \n    // Actual screen surface\n    translate([0, 0, 8.9])\n        color(\"darkslategray\")\n        cube([138, 78, 0.2], center = true);\n    \n    // Back cover\n    translate([0, 0, -5])\n        cube([155, 85, 8], center = true);\n    \n    // Buttons\n    for (i = [0:3]) {\n        translate([70 + i * 5, -47, 5])\n            cylinder(h = 2, r = 1.5);\n    }\n}\n\n// Stand module\nmodule stand_assembly() {\n    // VESA mount bracket\n    translate([0, 0, -15])\n    difference() {\n        cube([40, 10, 10], center = true);\n        // Mounting holes\n        translate([15, 0, -15])\n            cylinder(h = 20, r = 2);\n        translate([-15, 0, -15])\n            cylinder(h = 20, r = 2);\n    }\n    \n    // Neck\n    translate([0, 15, -30])\n        cylinder(h = 25, r1 = 8, r2 = 4);\n    \n    // Base\n    translate([0, 30, -38])\n    difference() {\n        // Main base\n        cube([80, 20, 8], center = true);\n        \n        // Cable management hole\n        translate([0, 0, -4.5])\n            cylinder(h = 10, r = 3);\n    }\n    \n    // Base feet\n    translate([-35, 30, -42])\n        cube([5, 20, 2], center = true);\n    translate([35, 30, -42])\n        cube([5, 20, 2], center = true);\n}\n\n// Render the monitor\nmonitor();",
    "renders": true
  },
  {
    "household_item": "keyboard",
    "openscad_code": "// Realistic 60% keyboard (≈75 mm wide)\n// Main case\ndifference() {\n    // Base shell\n    translate([-37.5, -15, 0])\n        cube([75, 30, 5], center = true);\n\n    // USB-C cutout\n    translate([32.5, 0, 2.5])\n        rotate([90, 0, 0])\n            cylinder(h = 15, r = 3.5, $fn = 16);\n}\n\n// Top plate with key openings\ndifference() {\n    translate([-37.5, -15, 5])\n        cube([75, 30, 2], center = false);\n    \n    // Key switch cutouts (Cherry MX style)\n    for (row = [0:4]) {\n        for (col = [0:14]) {\n            if (!(row == 4 && col > 11)) {\n                x = -35.5 + col * 5;\n                y = -13.5 + row * 5.5;\n                translate([x, y, 5])\n                    cube([4, 4, 3], center = true);\n            }\n        }\n    }\n}\n\n// Keycaps\nmodule keycap(row, col) {\n    x = -35.5 + col * 5;\n    y = -13.5 + row * 5.5;\n    z = 7;\n    \n    // Keycap stem\n    translate([x, y, z])\n        cube([3.8, 3.8, 0.5], center = true);\n    \n    // Keycap top\n    translate([x, y, z + 0.5])\n        cube([4.5, 4.5, 2], center = true);\n    \n    // Dish\n    translate([x, y, z + 2.5])\n        difference() {\n            cube([4.5, 4.5, 0.5], center = true);\n            translate([0, 0, -0.2])\n                sphere(r = 5, $fn = 16);\n        }\n}\n\n// Generate keycaps\nfor (row = [0:4]) {\n    for (col = [0:14]) {\n        if (!(row == 4 && col > 11)) {\n            keycap(row, col);\n        }\n    }\n}\n\n// Spacebar (larger key)\ntranslate([-35.5 + 3 * 5, -13.5 + 4 * 5.5, 7])\n    cube([11, 4.5, 2.5], center = true);\n\n// Rubber feet\ntranslate([-33, -13, 0])\n    cylinder(h = 1, r = 2, $fn = 16);\ntranslate([-33, 13, 0])\n    cylinder(h = 1, r = 2, $fn = 16);\ntranslate([33, -13, 0])\n    cylinder(h = 1, r = 2, $fn = 16);\ntranslate([33, 13, 0])\n    cylinder(h = 1, r = 2, $fn = 16);",
    "renders": true
  },
  {
    "household_item": "mouse",
    "openscad_code": "// Realistic medium-complexity computer mouse\n// Overall size ≈ 110 mm long × 60 mm wide × 35 mm tall\n\n// Basic parameters\n$fn = 48;                // smooth curves\nwall = 2;                // printable wall thickness\nbody_len = 100;\nbody_wid = 60;\nbody_hgt = 30;\n\nmodule mouse_body() {\n    // Main ergonomic shell\n    hull() {\n        // front dome\n        translate([  body_len/2 - 10, 0, 0])\n            sphere(d = body_wid * 0.9);\n        // rear hump\n        translate([- body_len/2 + 15, 0,  0])\n            sphere(d = body_wid * 0.8);\n    }\n    // Flatten top slightly\n    intersection() {\n        children();\n        translate([0, 0, -body_hgt/2 - 1])\n            cube([body_len + 2, body_wid + 2, body_hgt + 2], center = true);\n    }\n}\n\nmodule buttons() {\n    // Left button\n    difference() {\n        translate([body_len/4, -body_wid/4, body_hgt/2 - 1])\n            cube([body_len/2.5, body_wid/2.2, 8], center = true);\n        translate([body_len/4, -body_wid/4, body_hgt/2 + 4])\n            sphere(d = body_wid/2.2 + 2);\n    }\n    // Right button (mirror)\n    mirror([0, 1, 0]) children();\n}\n\nmodule scroll_wheel() {\n    // Wheel\n    rotate([0, 90, 0])\n        translate([body_len/2 - 20, 0, body_hgt/2 + 3])\n            cylinder(h = 6, d = 8, center = true);\n    // Wheel axle\n    rotate([0, 90, 0])\n        translate([body_len/2 - 20, 0, body_hgt/2 + 3])\n            cylinder(h = 10, d = 2, center = true);\n}\n\nmodule side_grips() {\n    // Left grip texture\n    for(i = [1:5]) {\n        translate([-body_len/2 + 10 + i*8, body_wid/2 + 1, 0])\n            cube([4, wall, body_hgt - 10], center = true);\n    }\n    // Right grip texture\n    mirror([0, 1, 0]) children();\n}\n\nmodule base() {\n    // Flat bottom plate\n    difference() {\n        translate([0, 0, -body_hgt/2])\n            cube([body_len + 2, body_wid + 2, wall], center = true);\n        // Sensor hole\n        translate([0, 0, -body_hgt/2 - 1])\n            cylinder(h = wall + 2, d = 10, center = true);\n        // Glide pads\n        for(pos = [[-body_len/3, -body_wid/3], \n                   [-body_len/3,  body_wid/3],\n                   [ body_len/3,  0]]) {\n            translate(pos + [0, 0, -body_hgt/2])\n                cube([12, 6, wall], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body shell\n    mouse_body() sphere(d = 1);\n    \n    // Buttons\n    buttons() {\n        translate([body_len/4, body_wid/4, body_hgt/2 - 1])\n            cube([body_len/2.5, body_wid/2.2, 8], center = true);\n    }\n    \n    // Scroll wheel\n    scroll_wheel();\n    \n    // Side grips\n    side_grips() {\n        translate([-body_len/2 + 10, body_wid/2 + 1, 0])\n            cube([4, wall, body_hgt - 10], center = true);\n    }\n    \n    // Bottom plate\n    base();\n}",
    "renders": true
  },
  {
    "household_item": "headphones",
    "openscad_code": "// Realistic Medium-Complexity Headphones – OpenSCAD\n// Wall thickness 1.2 mm, printable without support, ~80 mm wide\n\n$fn = 36;          // smooth curves\nwall = 1.2;        // 3D-print friendly wall thickness\nscaleFactor = 0.8; // overall scaling for ~80 mm width\n\nmodule headband() {\n    // padded arch\n    difference() {\n        // outer shell\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([35, 0, 0])\n                circle(r = 6);\n        // inner cavity\n        rotate_extrude(angle = 180, $fn = 64)\n            translate([35, 0, 0])\n                circle(r = 6 - wall);\n    }\n    // cushion strip\n    translate([0, 0, -6])\n        scale([1, 1, 0.4])\n            rotate_extrude(angle = 180, $fn = 64)\n                translate([35, 0, 0])\n                    circle(r = 6 - wall);\n}\n\nmodule yoke() {\n    // fork that holds earcup\n    difference() {\n        // outer shape\n        cube([8, 4, 15], center = true);\n        // screw hole\n        translate([0, 0, 7])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 1.5, center = true);\n    }\n}\n\nmodule earcup(pad = true) {\n    // outer cup\n    difference() {\n        cylinder(h = 10, r = 22);\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 22 - wall);\n    }\n    // grill holes\n    for (a = [0:30:150])\n        rotate([0, 0, a])\n            translate([15, 0, 5])\n                cylinder(h = 2, r = 1.5);\n    // soft pad\n    if (pad)\n        translate([0, 0, 10])\n            cylinder(h = 6, r1 = 20, r2 = 22);\n}\n\nmodule earAssembly(side) {\n    // combine yoke + cup\n    translate([0, side * 30, 0]) {\n        rotate([0, 90, 0])\n            yoke();\n        translate([0, 0, -5])\n            rotate([0, 90, 0])\n                earcup();\n    }\n}\n\n// assemble\nscale([scaleFactor, scaleFactor, scaleFactor]) {\n    headband();\n    earAssembly(1);\n    earAssembly(-1);\n}",
    "renders": true
  },
  {
    "household_item": "earbuds",
    "openscad_code": "// Realistic Earbuds - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 50;\nwall_thickness = 1.2;\n\n// Main earbud assembly\nmodule earbud() {\n    // Outer shell\n    difference() {\n        // Main body - slightly flattened sphere\n        scale([1, 1.2, 1])\n        sphere(r=8);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        scale([0.85, 1.05, 0.9])\n        sphere(r=7.5);\n    }\n    \n    // Sound port\n    translate([0, 0, 8])\n    cylinder(h=5, r1=4, r2=3);\n    \n    // Mesh grill\n    translate([0, 0, 12.5])\n    linear_extrude(0.5)\n    circle(r=3, $fn=30);\n    \n    // Vent hole\n    translate([6, 0, 2])\n    rotate([90, 0, 0])\n    cylinder(h=1.5, r=1);\n}\n\n// Silicone ear tip\nmodule eartip() {\n    // Base connector\n    translate([0, 0, 13])\n    cylinder(h=3, r1=3.2, r2=3.5);\n    \n    // Flexible dome\n    for (i = [0:2]) {\n        translate([0, 0, 13 + i*1.5])\n        scale([1 - i*0.15, 1 - i*0.15, 1])\n        cylinder(h=1.5, r1=4 + i*0.5, r2=4.5 + i*0.5);\n    }\n}\n\n// Stem with flat bottom\nmodule stem() {\n    // Main stem\n    translate([0, -12, 0])\n    rotate([90, 0, 0])\n    cylinder(h=20, r1=3.5, r2=2.5);\n    \n    // Flat bottom\n    translate([0, -32, 0])\n    cube([7, 2, 2.5], center=true);\n    \n    // Charging contacts\n    translate([0, -33.5, 0])\n    for (x = [-2.5, 2.5]) {\n        translate([x, 0, 0])\n        cylinder(h=0.5, r=0.8);\n    }\n}\n\n// Left earbud\ntranslate([-15, 0, 0]) {\n    earbud();\n    eartip();\n    stem();\n}\n\n// Right earbud (mirror of left)\nmirror([1, 0, 0])\ntranslate([-15, 0, 0]) {\n    earbud();\n    eartip();\n    stem();\n}\n\n// Optional: Charging case cutout preview\n// Uncomment to check fit\n/*\ntranslate([0, -40, -5])\ncube([30, 30, 15], center=true);\n*/",
    "renders": true
  },
  {
    "household_item": "charger",
    "openscad_code": "// Wall charger with foldable US plug\n// Overall size: 30 x 45 x 70 mm\n// 3D-printable – no overhangs, 1.2 mm walls\n\n// Wall thickness\nwall = 1.2;\n\n// Main housing\nmodule housing() {\n    difference() {\n        // Outer rounded shell\n        minkowski() {\n            cube([28, 43, 68], center = true);\n            sphere(wall);\n        }\n\n        // Hollow inside\n        color(\"lightgray\")\n        minkowski() {\n            cube([28 - 2*wall, 43 - 2*wall, 68 - 2*wall], center = true);\n            sphere(wall/2);\n        }\n\n        // Front face recess for USB ports\n        translate([0, 22, 0])\n        cube([22, 4, 30], center = true);\n    }\n}\n\n// Foldable prongs – one module, mirrored\nmodule prong() {\n    // Thin blade\n    linear_extrude(height = 1.5, center = true)\n    square([6.5, 1.5], center = true);\n\n    // Pivot pin\n    translate([0, -1.5, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 2, d = 2, $fn = 10);\n}\n\nmodule plug_assembly() {\n    // Base block\n    cube([13, 8, 7], center = true);\n\n    // Recess for prong rotation\n    translate([0, 0, 3.5])\n    rotate([90, 0, 0])\n    cylinder(h = 8, d = 6, $fn = 20);\n\n    // Two prongs\n    for (x = [-4, 4]) {\n        translate([x, 4, 0])\n        rotate([90, 0, 0])\n        prong();\n    }\n}\n\n// USB-A port opening\nmodule usb_port() {\n    difference() {\n        // Outer shell\n        cube([12, 5, 15], center = true);\n\n        // Inner cavity\n        translate([0, 0, -5])\n        cube([8, 4, 10], center = true);\n    }\n}\n\n// LED indicator\nmodule led() {\n    translate([0, 22, 30])\n    cylinder(h = 1, d = 3, $fn = 12);\n}\n\n// Assembly\nhousing();\n\n// Attach plug on back\ntranslate([0, 0, -35 - 3.5])\nplug_assembly();\n\n// Two USB-A ports on front face\nfor (i = [-1, 1]) {\n    translate([i * 8, 22, 0])\n    usb_port();\n}\n\n// LED indicator\nled();",
    "renders": true
  },
  {
    "household_item": "battery",
    "openscad_code": "// Realistic medium-complexity AA battery (≈ 50 mm long, Ø14 mm)\n// All dimensions in mm\n\n$fn = 36;          // Smooth curves for printing\nwall = 1.0;        // Printable wall thickness\ncell_d = 14;       // Overall diameter\ncell_l = 50;       // Overall length\nbutton_h = 1.5;    // Positive terminal protrusion\nbase_r = 0.5;      // Radius on negative end\nrim_h = 2;         // Top rim height\nlabel_step = 2;    // Label relief depth\nband_n = 8;        // Number of label bands\n\n// Main battery body\nmodule body() {\n    difference() {\n        // Outer shell\n        cylinder(h = cell_l, d = cell_d);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h = cell_l - 2*wall, d = cell_d - 2*wall);\n        \n        // Negative end rounding\n        translate([0, 0, -0.01])\n            cylinder(h = base_r + 0.02, d = cell_d - 2*wall - 2*base_r);\n    }\n}\n\n// Positive button terminal\nmodule positive() {\n    translate([0, 0, cell_l])\n        cylinder(h = button_h, d = cell_d/2, $fn = 60);\n}\n\n// Top rim with label gap\nmodule rim() {\n    difference() {\n        cylinder(h = rim_h, d = cell_d + 0.2);\n        translate([0, 0, -0.01])\n            cylinder(h = rim_h + 0.02, d = cell_d);\n    }\n}\n\n// Label embossing rings\nmodule label_bands() {\n    for(i = [1 : band_n]) {\n        z = wall + (i - 0.5) * (cell_l - 2*wall - button_h - rim_h) / band_n;\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = label_step/2, d = cell_d + 0.2);\n                cylinder(h = label_step/2 + 0.02, d = cell_d);\n            }\n    }\n}\n\n// Negative flat end\nmodule negative() {\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h = wall, d = cell_d);\n            cylinder(h = wall + 0.02, d = cell_d - 2*wall);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    positive();\n    translate([0, 0, cell_l - rim_h])\n        rim();\n    label_bands();\n    negative();\n}",
    "renders": true
  },
  {
    "household_item": "projector",
    "openscad_code": "// Medium-complexity realistic projector\n// ~70 mm long, 3D-printable (no steep overhangs)\n\n$fn = 36; // Smooth curves\n\n// Main assembly\nmodule projector() {\n    difference() {\n        union() {\n            body();\n            lens();\n            vents();\n            feet();\n            buttons();\n            focus();\n        }\n        // Cavity for electronics\n        translate([20, 0, 10]) cube([45, 40, 25]);\n    }\n}\n\nmodule body() {\n    // Main enclosure\n    translate([-15, -30, 0])\n        cube([70, 60, 40]);\n\n    // Top slope\n    translate([-15, -30, 40])\n        rotate([0, 15, 0])\n        cube([75, 60, 20]);\n\n    // Front bezel\n    color(\"gray\")\n    translate([-15, -30, 0])\n        cube([10, 60, 40]);\n}\n\nmodule lens() {\n    // Lens barrel\n    color(\"black\")\n    rotate([0, 90, 0])\n    translate([0, 15, 0])\n        cylinder(h = 15, r1 = 12, r2 = 14);\n\n    // Lens glass\n    color(\"lightblue\")\n    rotate([0, 90, 0])\n    translate([0, 15, 14.5])\n        sphere(12);\n}\n\nmodule vents() {\n    // Side vents\n    for (y = [-25, -15, -5, 5, 15, 25]) {\n        color(\"darkgray\")\n        translate([0, y, 20])\n        cube([70, 2, 3]);\n    }\n}\n\nmodule feet() {\n    // Four rubber feet\n    for (x = [0, 50], y = [-25, 25]) {\n        color(\"black\")\n        translate([x, y, -2])\n        cylinder(h = 2, r = 3);\n    }\n}\n\nmodule buttons() {\n    // Control panel top\n    color(\"dimgray\")\n    translate([5, 20, 42])\n        cube([15, 15, 3]);\n\n    // Individual buttons\n    for (i = [0:2]) {\n        color(\"red\")\n        translate([8 + i * 4, 24, 45.5])\n            cube([2, 2, 1]);\n    }\n}\n\nmodule focus() {\n    // Focus ring\n    color(\"silver\")\n    rotate([0, 90, 0])\n    translate([0, 0, 0])\n        cylinder(h = 5, r = 13);\n}\n\nprojector();",
    "renders": true
  },
  {
    "household_item": "server",
    "openscad_code": "// OpenSCAD 3D printable server model (realistic, medium complexity)\n// Dimensions roughly 90 x 40 x 120 mm\n\n$fn = 32;           // global circle resolution\nwall = 2;           // uniform wall thickness for 3D printing\n\n// Main module\nmodule server() {\n    // Server chassis\n    difference() {\n        // Outer shell\n        cube([90, 40, 120], center = true);\n        \n        // Hollow out inside\n        translate([0, 0, 1])\n            cube([90 - 2*wall, 40 - 2*wall, 120 - 2*wall], center = true);\n    }\n    \n    // Front bezel with drive bays\n    translate([0, 20, 0])\n        cube([90, 0.1, 120], center = true);\n    \n    // 2x 3.5\" drive bays\n    for (z = [35, 65]) {\n        translate([0, 20.1, z])\n            color(\"black\")\n            cube([85, 0.2, 20]);\n    }\n    \n    // Power button\n    translate([35, 20.2, 90])\n        cylinder(h = 1, r = 3);\n    \n    // Status LEDs\n    for (x = [-30, -25, -20]) {\n        translate([x, 20.2, 95])\n            cylinder(h = 0.5, r = 1);\n    }\n    \n    // Rear I/O shield\n    translate([0, -20, 0])\n        cube([90, 0.1, 120], center = true);\n    \n    // Rear fan grill (80 mm)\n    difference() {\n        translate([0, -20.1, 0])\n            cube([80, 0.2, 80], center = true);\n        for (i = [-3:3]) {\n            translate([i*10, -20.2, 0])\n                cube([2, 0.3, 80], center = true);\n            translate([0, -20.2, i*10])\n                cube([80, 0.3, 2], center = true);\n        }\n    }\n    \n    // Rack ears\n    rack_ear(45);\n    mirror([1, 0, 0])\n        rack_ear(45);\n    \n    // Top vent slots\n    for (y = [-15:5:15]) {\n        translate([0, y, 59])\n            cube([80, 3, wall]);\n    }\n    \n    // Bottom feet\n    foot([-40, -15, -60]);\n    foot([40, -15, -60]);\n    foot([-40, 15, -60]);\n    foot([40, 15, -60]);\n}\n\n// Rack ear module\nmodule rack_ear(x) {\n    translate([x, 0, 0])\n        difference() {\n            cube([wall, 40, 110], center = true);\n            for (z = [-40:10:40]) {\n                translate([0, 0, z])\n                    rotate([90, 0, 0])\n                        cylinder(h = wall + 1, r = 2.5, center = true);\n            }\n        }\n}\n\n// Foot module\nmodule foot(pos) {\n    translate(pos)\n        cylinder(h = 4, r = 5);\n}\n\n// Assemble\nserver();",
    "renders": true
  },
  {
    "household_item": "amplifier",
    "openscad_code": "// Realistic Medium-Complexity Guitar Amplifier\n// Approx 90 x 55 x 65 mm\n\n$fn = 36;\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        union() {\n            // Main body\n            translate([0, 0, 25])\n                cube([80, 50, 50], center = true);\n            \n            // Front face extra thickness for controls\n            translate([0, -25, 25])\n                cube([76, 4, 46], center = true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 27])\n            cube([74, 46, 46], center = true);\n    }\n}\n\n// Front grille cloth area\nmodule grille() {\n    difference() {\n        // Grille frame\n        translate([0, -27, 35])\n            cube([50, 2, 30], center = true);\n        \n        // Grille holes - simulated with small cylinders\n        for(x = [-20:5:20]) {\n            for(y = [20:5:50]) {\n                translate([x, -28, y])\n                    cylinder(h = 3, r = 1.5, center = true);\n            }\n        }\n    }\n}\n\n// Control knobs\nmodule knobs() {\n    // Volume knob\n    translate([-20, -27, 45])\n        knob();\n    \n    // Gain knob\n    translate([-10, -27, 45])\n        knob();\n    \n    // Tone knob\n    translate([0, -27, 45])\n        knob();\n    \n    // Master knob\n    translate([10, -27, 45])\n        knob();\n}\n\nmodule knob() {\n    difference() {\n        // Knob body\n        cylinder(h = 6, r = 4);\n        \n        // Indicator line\n        translate([0, -3.5, 3])\n            cube([1, 1, 7], center = true);\n    }\n}\n\n// Input jack\nmodule input_jack() {\n    translate([-25, -27, 25])\n        cylinder(h = 8, r = 3.5);\n}\n\n// Handle\nmodule handle() {\n    translate([0, 0, 52])\n        difference() {\n            // Handle bar\n            cylinder(h = 60, r = 3, center = true);\n            \n            // Grip area\n            translate([0, 0, 0])\n                cylinder(h = 50, r = 2, center = true);\n        }\n}\n\n// Back panel with vents\nmodule back_panel() {\n    difference() {\n        // Back cover\n        translate([0, 25, 25])\n            cube([76, 2, 46], center = true);\n        \n        // Ventilation slots\n        for(z = [10:5:40]) {\n            translate([0, 26, z])\n                cube([60, 3, 3], center = true);\n        }\n        \n        // Power cable hole\n        translate([30, 26, 15])\n            cylinder(h = 3, r = 3, center = true);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    foot_pos = [[-30, -20, 0], [30, -20, 0], [-30, 20, 0], [30, 20, 0]];\n    for(pos = foot_pos) {\n        translate(pos)\n            cylinder(h = 3, r = 4);\n    }\n}\n\n// LED indicator\nmodule led() {\n    translate([20, -27, 45])\n        cylinder(h = 2, r = 2);\n}\n\n// Assembly\nunion() {\n    chassis();\n    grille();\n    knobs();\n    input_jack();\n    handle();\n    back_panel();\n    feet();\n    led();\n}",
    "renders": true
  },
  {
    "household_item": "receiver",
    "openscad_code": "// Realistic-style Receiver for 3D printing\n// Medium complexity, ~90 lines\n// Overall size ~75 mm\n\n// Wall thickness for printability\nwall = 2;\n\n// Main housing block\nmodule receiver_body() {\n    difference() {\n        // Outer block with rounded top edges\n        hull() {\n            translate([-wall, -wall, 0])\n                cube([35 + wall*2, 28 + wall*2, 20]);\n            translate([0, 0, 0])\n                cube([35, 28, 20]);\n            translate([0, 0, 20])\n                cube([35, 28, 0.1]);\n            translate([0, 0, 20])\n                sphere(d=28);\n        }\n        \n        // Hollow cavity\n        translate([wall, wall, wall])\n            cube([35 - wall*2, 28 - wall*2, 20 - wall]);\n        \n        // Connector cutout front\n        translate([-1, 10, 5])\n            cube([6, 8, 10]);\n        \n        // Connector cutout back\n        translate([30, 10, 5])\n            cube([6, 8, 10]);\n    }\n}\n\n// Heat sink fins on top\nmodule heat_sinks() {\n    for(y = [4:6:22]) {\n        translate([5, y, 20])\n            cube([25, 2, 8]);\n    }\n}\n\n// Front panel RCA connectors (2)\nmodule front_connectors() {\n    for(x = [10, 25]) {\n        translate([x, -1, 10])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=8);\n        translate([x, -1.5, 10])\n            rotate([90, 0, 0])\n                cylinder(h=4, d=5);\n    }\n}\n\n// Rear binding posts (4)\nmodule binding_posts() {\n    for(i = [0:3]) {\n        translate([35 + 2, 5 + i*6, 10])\n            rotate([0, 90, 0])\n                cylinder(h=5, d=3);\n    }\n}\n\n// Display window\nmodule display() {\n    translate([7, 26.5, 10])\n        cube([21, 3, 5]);\n}\n\n// Buttons array\nmodule buttons() {\n    for(i = [0:3]) {\n        translate([5 + i*7, 26.5, 15])\n            cube([4, 1.5, 1]);\n    }\n}\n\n// Assembly\nunion() {\n    receiver_body();\n    heat_sinks();\n    front_connectors();\n    binding_posts();\n    display();\n    buttons();\n}",
    "renders": true
  },
  {
    "household_item": "subwoofer",
    "openscad_code": "// Subwoofer module with realistic styling\n// Overall dimensions: 60mm cube with details\n\n$fn = 50;  // Smooth curves\n\n// Main subwoofer module\nmodule subwoofer() {\n    // Main enclosure - 60mm cube with rounded edges\n    difference() {\n        minkowski() {\n            cube([50, 50, 50], center = true);\n            sphere(5);\n        }\n        \n        // Front face cutout for speaker\n        translate([0, 0, 25.1])\n            cylinder(h = 10, r1 = 22, r2 = 22, center = true);\n    }\n    \n    // Front grille\n    translate([0, 0, 28])\n        difference() {\n            cylinder(h = 2, r1 = 30, r2 = 30, center = true);\n            \n            // Grille holes - hex pattern\n            for (x = [-24:8:24])\n                for (y = [-24:8:24])\n                    translate([x, y, 0])\n                        cylinder(h = 3, r1 = 1.5, r2 = 1.5, center = true);\n        }\n    \n    // Speaker cone\n    translate([0, 0, 24])\n        difference() {\n            cylinder(h = 4, r1 = 20, r2 = 20, center = true);\n            cylinder(h = 5, r1 = 3, r2 = 3, center = true);\n        }\n    \n    // Speaker surround\n    translate([0, 0, 22])\n        rotate_extrude()\n            translate([20, 0, 0])\n                circle(r = 2);\n    \n    // Control panel on top\n    translate([0, 20, 25])\n        difference() {\n            cube([30, 5, 8], center = true);\n            // Volume knob\n            translate([-10, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r1 = 3, r2 = 3, center = true);\n            // Power LED\n            translate([10, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 1, r1 = 2, r2 = 2, center = true);\n        }\n    \n    // Rear port tube\n    difference() {\n        translate([0, 0, -25])\n            rotate([0, 90, 0])\n                cylinder(h = 15, r1 = 8, r2 = 8, center = true);\n        translate([0, 0, -25])\n            rotate([0, 90, 0])\n                cylinder(h = 16, r1 = 7, r2 = 7, center = true);\n    }\n    \n    // Rubber feet\n    for (x = [-20, 20])\n        for (y = [-20, 20])\n            translate([x, y, -28])\n                cylinder(h = 3, r1 = 3, r2 = 3, center = true);\n    \n    // Cable entry\n    translate([0, -25, -10])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r1 = 2, r2 = 2, center = true);\n}\n\n// Generate the subwoofer\nsubwoofer();",
    "renders": true
  },
  {
    "household_item": "soundbar",
    "openscad_code": "// Realistic 3D-printable Soundbar (medium complexity)\n// Overall dimensions: ~80 mm wide × 40 mm deep × 30 mm high\n\n$fn = 36;               // Smooth curves\nwall = 2;               // Uniform printable wall thickness\nbody_w = 80;            // Main enclosure width\nbody_d = 40;            // Main enclosure depth\nbody_h = 20;            // Main enclosure height\nfoot_h = 5;             // Rubber foot height\ngrill_depth = 3;        // Front grill thickness\n\nmodule main_enclosure() {\n    difference() {\n        // Outer shell\n        translate([0, 0, body_h/2])\n            cube([body_w, body_d, body_h], center=true);\n\n        // Hollow cavity\n        translate([0, 0, body_h/2])\n            cube([body_w - 2*wall, body_d - 2*wall, body_h - wall], center=true);\n\n        // Front grill recess\n        translate([0, body_d/2 - grill_depth/2, body_h/2])\n            cube([body_w - 2*wall, grill_depth + 0.1, body_h - 2*wall], center=true);\n    }\n}\n\nmodule front_grill() {\n    difference() {\n        // Grill plate\n        translate([0, body_d/2 - grill_depth/2, body_h/2])\n            cube([body_w - 2*wall, grill_depth, body_h - 2*wall], center=true);\n\n        // Speaker holes (left channel)\n        for (x = [-body_w/2 + 10: 8: -10]) {\n            translate([x, body_d/2 - grill_depth/2, body_h/2 - 5])\n                cylinder(h = grill_depth + 0.1, r = 3, center=true);\n            translate([x, body_d/2 - grill_depth/2, body_h/2 + 5])\n                cylinder(h = grill_depth + 0.1, r = 3, center=true);\n        }\n\n        // Speaker holes (right channel, mirrored)\n        for (x = [body_w/2 - 10: -8: 10]) {\n            translate([x, body_d/2 - grill_depth/2, body_h/2 - 5])\n                cylinder(h = grill_depth + 0.1, r = 3, center=true);\n            translate([x, body_d/2 - grill_depth/2, body_h/2 + 5])\n                cylinder(h = grill_depth + 0.1, r = 3, center=true);\n        }\n\n        // Central tweeter holes slightly smaller\n        for (x = [-6: 6: 6]) {\n            translate([x, body_d/2 - grill_depth/2, body_h/2])\n                cylinder(h = grill_depth + 0.1, r = 2, center=true);\n        }\n    }\n}\n\nmodule status_led() {\n    // Small LED window on front center\n    translate([0, body_d/2 - grill_depth - 0.1, body_h/2 + 7])\n        cube([6, 0.5, 2], center=true);\n}\n\nmodule rubber_feet() {\n    // Four rounded rubber feet\n    foot_r = 3;\n    foot_pos = [body_w/2 - 10, body_d/2 - 10];\n    for (x = [-foot_pos[0], foot_pos[0]])\n        for (y = [-foot_pos[1], foot_pos[1]])\n            translate([x, y, foot_h/2])\n                cylinder(h = foot_h, r = foot_r, center=true);\n}\n\nmodule back_panel() {\n    // Rear connections panel slightly inset\n    panel_w = 20;\n    panel_h = 10;\n    translate([0, -body_d/2 + wall/2, body_h/2])\n        cube([panel_w, wall, panel_h], center=true);\n\n    // Ventilation slots\n    for (i = [-2:1:2]) {\n        translate([0, -body_d/2 + wall/2, body_h/2 + i*2])\n            cube([panel_w - 4, wall + 0.1, 1], center=true);\n    }\n}\n\nmodule top_buttons() {\n    // Volume + / – buttons on top right\n    btn_w = 4;\n    btn_d = 3;\n    btn_h = 1;\n    spacing = 6;\n    for (i = [-0.5, 0.5]) {\n        translate([body_w/2 - 10, 0, body_h + btn_h/2 + i*spacing])\n            cube([btn_w, btn_d, btn_h], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_enclosure();\n    front_grill();\n    status_led();\n    rubber_feet();\n    back_panel();\n    top_buttons();\n}",
    "renders": true
  },
  {
    "household_item": "webcam",
    "openscad_code": "// Realistic Webcam - Medium Complexity\n// Designed for 3D printing, no overhangs\n\n// Main parameters\n$fn = 50;  // Smooth curves\nwebcam_length = 65;\nwebcam_width = 45;\nwebcam_height = 35;\nwall_thickness = 2;\n\n// Lens assembly\nmodule lens_assembly() {\n    translate([0, webcam_height/2 - 10, webcam_length/2 - 15]) {\n        // Lens housing\n        difference() {\n            cylinder(h=15, d=20, center=false);\n            translate([0, 0, -1])\n                cylinder(h=17, d=16, center=false);\n        }\n        \n        // Lens glass\n        translate([0, 0, 12])\n            sphere(d=16);\n            \n        // Focus ring\n        for(i=[0:3:360]) {\n            rotate([0, 0, i])\n                translate([9, 0, 6])\n                    cube([1, 1.5, 8], center=true);\n        }\n    }\n}\n\n// LED indicators\nmodule leds() {\n    translate([-8, webcam_height/2 - 5, webcam_length/2 - 5]) {\n        cylinder(h=2, d=4);\n    }\n    translate([8, webcam_height/2 - 5, webcam_length/2 - 5]) {\n        cylinder(h=2, d=4);\n    }\n}\n\n// Microphone holes\nmodule microphone() {\n    translate([0, webcam_height/2 - 8, webcam_length/2 - 3]) {\n        for(i=[-2:1:2]) {\n            translate([i*4, 0, 0])\n                cylinder(h=5, d=1.5);\n        }\n    }\n}\n\n// Mounting clip\nmodule mounting_clip() {\n    translate([-webcam_width/2 - 5, 5, webcam_length/2 - 25]) {\n        difference() {\n            // Clip base\n            union() {\n                cube([10, webcam_height - 10, 30]);\n                translate([5, webcam_height - 15, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, d=10);\n            }\n            \n            // Clip opening\n            translate([5, webcam_height - 20, 15])\n                rotate([90, 0, 0])\n                    cylinder(h=15, d=5);\n        }\n    }\n}\n\n// Main body\nmodule webcam_body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([webcam_width, webcam_height, webcam_length], center=true);\n            sphere(d=wall_thickness*2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            cube([webcam_width - wall_thickness*2, \n                  webcam_height - wall_thickness*2, \n                  webcam_length - wall_thickness], center=true);\n        \n        // Front opening for lens\n        translate([0, webcam_height/2 - 10, webcam_length/2])\n            cube([25, 25, 5], center=true);\n    }\n}\n\n// Cable port at rear\nmodule cable_port() {\n    translate([0, webcam_height/2 - 10, -webcam_length/2])\n        difference() {\n            cylinder(h=10, d=12, center=true);\n            translate([0, 0, -5.1])\n                cylinder(h=12, d=8, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    webcam_body();\n    lens_assembly();\n    leds();\n    microphone();\n    mounting_clip();\n    cable_port();\n}",
    "renders": true
  },
  {
    "household_item": "drone",
    "openscad_code": "// Realistic medium-complexity drone model for 3D printing\n// Overall size ~80 mm across\n\n$fa = 2;\n$fs = 0.5;\n\nmodule prop_guard(r, h, t) {\n    difference() {\n        cylinder(r = r, h = h, center = true);\n        cylinder(r = r - t, h = h + 1, center = true);\n    }\n}\n\nmodule prop(shaft_r, blade_l, blade_w, hub_h) {\n    // Central hub\n    cylinder(r = shaft_r + 2, h = hub_h, center = true);\n    \n    // 2-blade propeller\n    for (a = [0: 180: 360]) {\n        rotate([0, 0, a])\n            translate([blade_l/2, 0, 0])\n                scale([1, blade_w/blade_l, 0.3])\n                    cube([blade_l, blade_l, hub_h], center = true);\n    }\n}\n\nmodule motor_body(r, h) {\n    cylinder(r = r, h = h, center = true);\n    cylinder(r = r - 1, h = h + 0.5, center = true);\n}\n\nmodule arm(l, w, h) {\n    cube([l, w, h], center = true);\n}\n\nmodule landing_leg(l, w, h) {\n    hull() {\n        translate([-l/2, 0, -h/2])\n            sphere(r = w/2);\n        translate([l/2, 0, -h/2])\n            sphere(r = w/2);\n    }\n}\n\nmodule camera_pod(r, h) {\n    difference() {\n        sphere(r = r);\n        translate([0, 0, -r - 1])\n            cube([r*2.2, r*2.2, r*2], center = true);\n    }\n    // Camera lens\n    rotate([90, 0, 0])\n        cylinder(r = r/2, h = r/2, center = true);\n}\n\nmodule drone() {\n    // Center body plate\n    difference() {\n        cube([40, 40, 6], center = true);\n        translate([0, 0, -3.5])\n            cube([36, 36, 7], center = true);\n    }\n    \n    // Top cover\n    translate([0, 0, 4])\n        difference() {\n            cube([40, 40, 2], center = true);\n            translate([0, 0, -1.5])\n                cube([36, 36, 3], center = true);\n            // LED windows\n            for (p = [[-18, 0], [18, 0], [0, -18], [0, 18]]) {\n                translate([p[0], p[1], 0])\n                    cylinder(r = 2, h = 3, center = true);\n            }\n        }\n    \n    // Arms\n    arm_len = 35;\n    arm_w = 6;\n    arm_h = 4;\n    for (a = [45: 90: 360]) {\n        rotate([0, 0, a])\n            translate([arm_len, 0, 0])\n                arm(arm_len*2, arm_w, arm_h);\n    }\n    \n    // Motors with props\n    motor_r = 6;\n    motor_h = 8;\n    prop_r = 12;\n    prop_h = 1.5;\n    guard_r = 20;\n    for (a = [45: 90: 360]) {\n        rotate([0, 0, a])\n            translate([arm_len*2, 0, arm_h/2 + motor_h/2]) {\n                motor_body(motor_r, motor_h);\n                translate([0, 0, motor_h/2 + prop_h/2])\n                    prop(2, prop_r, 3, prop_h);\n                translate([0, 0, -motor_h/2 - 1.5])\n                    prop_guard(guard_r, 3, 1.5);\n            }\n    }\n    \n    // Landing legs\n    leg_l = 10;\n    leg_w = 3;\n    leg_h = 8;\n    for (a = [45: 90: 360]) {\n        rotate([0, 0, a])\n            translate([arm_len*2, 0, -arm_h/2 - leg_h/2])\n                landing_leg(leg_l, leg_w, leg_h);\n    }\n    \n    // Camera gimbal pod\n    translate([0, 0, -8])\n        camera_pod(7, 10);\n}\n\ndrone();",
    "renders": true
  },
  {
    "household_item": "console",
    "openscad_code": "// Realistic Gaming Console – ~70 mm wide, 3D-print friendly\n// No overhangs > 45°, 2 mm wall thickness min.\n\n$fn = 36;                     // Nice curves without huge STL\nwall = 2;                     // Wall thickness for 3D printing\n\n// Main body shell --------------------------------------------------------\nmodule main_shell() {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([68, 32, 22], center = true);\n            sphere(3);\n        }\n        // Hollow it out\n        translate([0, 0, -1])\n            minkowski() {\n                cube([68 - 2*wall, 32 - 2*wall, 22], center = true);\n                sphere(3 - wall);\n            }\n    }\n}\n\n// Vent grid on rear ------------------------------------------------------\nmodule vents() {\n    for (i = [-30:6:30])\n        translate([i, 0, 0])\n            cube([3, 1, 12], center = true);\n}\n\nmodule rear_vents() {\n    translate([0, -17.5, 0])\n        rotate([90, 0, 0])\n            linear_extrude(height = 2)\n                vents();\n}\n\n// Front USB ports ---------------------------------------------------------\nmodule usb_port() {\n    difference() {\n        cube([8, 2, 4], center = true);\n        translate([0, 1.1, 0])\n            cube([7, 0.2, 3], center = true);\n    }\n}\n\nmodule usb_row() {\n    translate([0, -16, -7])\n        for (x = [-12, 0, 12])\n            translate([x, 0, 0])\n                usb_port();\n}\n\n// Power button on top ------------------------------------------------------\nmodule power_button() {\n    translate([25, 0, 12])\n        cylinder(h = 2, r = 4);\n}\n\n// Disc slot on front edge --------------------------------------------------\nmodule disc_slot() {\n    translate([0, 16.5, 3])\n        cube([60, 0.5, 6], center = true);\n}\n\n// Rubber feet on bottom ----------------------------------------------------\nmodule foot() {\n    cylinder(h = 1.5, r = 3);\n}\n\nmodule feet() {\n    for (x = [-25, 25])\n        for (y = [-10, 10])\n            translate([x, y, -12.5])\n                foot();\n}\n\n// Assembly -----------------------------------------------------------------\nunion() {\n    main_shell();\n    rear_vents();\n    usb_row();\n    power_button();\n    disc_slot();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "gamepad",
    "openscad_code": "// Realistic 3D-printable gamepad – medium complexity\n// All dimensions in millimetres – fits roughly 110 mm wide\n\n// General parameters\nwall = 2.5;             // printable wall thickness\ngrip_rad = 20;          // radius of grip corners\nbutton_h = 2.5;         // height of buttons above shell\nbase_thick = 8;         // bottom shell thickness\n\n// Overall body\nmodule body_shell() {\n    difference() {\n        // Main shell – rounded rectangle extrusion\n        minkowski() {\n            linear_extrude(height = base_thick + 8)\n                offset(r = grip_rad)\n                    square([100, 60], center = true);\n            sphere(r = grip_rad);\n        }\n        // Hollow out inside\n        translate([0, 0, wall])\n            minkowski() {\n                linear_extrude(height = base_thick + 8)\n                    offset(r = grip_rad - wall)\n                        square([100 - 2*wall, 60 - 2*wall], center = true);\n                sphere(r = grip_rad - wall);\n            }\n    }\n}\n\n// Grip wings – curved extensions\nmodule grips() {\n    for (s = [-1, 1])\n        mirror([s, 0, 0])\n            translate([45, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 35, r1 = 17, r2 = 12, $fn = 32);\n}\n\n// D-pad cross\nmodule dpad() {\n    translate([-35, 20, base_thick + 8])\n        union() {\n            // Cross arms\n            cube([18, 6, button_h], center = true);\n            cube([6, 18, button_h], center = true);\n            // Central pivot cylinder\n            cylinder(h = button_h, r = 5, $fn = 16);\n        }\n}\n\n// ABXY buttons\nmodule action_buttons() {\n    positions = [[30, 25], [40, 15], [30, 5], [20, 15]];\n    for (p = positions)\n        translate([p.x, p.y, base_thick + 8])\n            cylinder(h = button_h, r = 5.5, $fn = 20);\n}\n\n// Analog sticks\nmodule stick(x, y) {\n    translate([x, y, base_thick + 8])\n        union() {\n            // Base ring\n            difference() {\n                cylinder(h = 2, r = 9, $fn = 32);\n                cylinder(h = 3, r = 7, $fn = 32);\n            }\n            // Stick shaft\n            cylinder(h = 12, r = 4, $fn = 24);\n            // Top cap\n            translate([0, 0, 12])\n                sphere(d = 8);\n        }\n}\n\n// Shoulder buttons (L/R)\nmodule shoulder(side) {\n    translate([side * 48, 0, base_thick + 8])\n        rotate([0, 10 * side, 0])\n            cube([20, 10, 4], center = true);\n}\n\n// Start / Select buttons\nmodule center_buttons() {\n    translate([0, -15, base_thick + 8])\n        for (x = [-8, 8])\n            translate([x, 0, 0])\n                rounded_rect(10, 4, button_h, 1.5);\n}\n\n// Helper for rounded top surface\nmodule rounded_rect(w, d, h, r) {\n    linear_extrude(height = h) offset(r = r) square([w, d], center = true);\n}\n\n// ===== Assembly =====\nunion() {\n    body_shell();\n    grips();\n    dpad();\n    action_buttons();\n    stick(-20, -20);\n    stick(20, -20);\n    shoulder(1);\n    shoulder(-1);\n    center_buttons();\n}",
    "renders": true
  },
  {
    "household_item": "joystick",
    "openscad_code": "// Realistic 3D-printable Joystick – medium complexity\n// All dimensions in mm. Safe for FDM printing, 1.2 mm wall thickness assumed.\n\n$fn = 32;\n\n// Main parameters\nbase_d = 60;          // Base diameter\nbase_h = 18;          // Base height\nneck_h = 20;          // Neck height\nneck_d = 22;          // Neck diameter\nstick_d = 12;         // Stick diameter\nstick_len = 45;       // Stick length above neck\nball_d = 18;          // Ball knob diameter\nbutton_d = 6;         // Top-fire button\nwall = 1.5;           // Wall thickness for printability\n\nmodule base() {\n    // Hollow cylinder with chamfered edge\n    difference() {\n        cylinder(h = base_h, d1 = base_d+8, d2 = base_d);\n        translate([0,0,wall])\n            cylinder(h = base_h-wall*2+0.1, d = base_d-wall*2);\n    }\n    // Four screw holes\n    for(a=[0:90:270])\n        rotate([0,0,a])\n            translate([base_d/2-6,0,-0.1])\n                cylinder(h = base_h+0.2, d = 3.2, $fn=8);\n}\n\nmodule neck() {\n    // Tapered neck\n    cylinder(h = neck_h, d1 = base_d*0.8, d2 = neck_d);\n    // Internal hollow\n    translate([0,0,wall])\n        cylinder(h = neck_h-wall, d1 = base_d*0.8-wall*2, d2 = neck_d-wall*2);\n}\n\nmodule stick() {\n    // Main shaft\n    difference() {\n        cylinder(h = stick_len, d = stick_d);\n        translate([0,0,wall])\n            cylinder(h = stick_len-wall, d = stick_d-wall*2);\n    }\n    // Reinforcing ring\n    translate([0,0,stick_len*0.7])\n        cylinder(h = 3, d = stick_d+3);\n}\n\nmodule ball() {\n    // Hollow sphere with flat bottom\n    difference() {\n        sphere(d = ball_d);\n        translate([0,0,-ball_d/2-wall])\n            cube([ball_d+2, ball_d+2, ball_d], center=true);\n        // Internal cavity\n        sphere(d = ball_d-wall*2);\n    }\n}\n\nmodule top_button() {\n    // Concave fire button\n    difference() {\n        translate([0,0,ball_d/2-wall*2])\n            cylinder(h = 2, d = button_d+1);\n        translate([0,0,ball_d/2-wall*2+1])\n            sphere(d = button_d, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0,0,base_h]) neck();\n    translate([0,0,base_h+neck_h]) stick();\n    translate([0,0,base_h+neck_h+stick_len]) {\n        ball();\n        top_button();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "remote",
    "openscad_code": "// TV Remote – realistic, medium complexity, 3D-printable\n// No overhangs steeper than 45°; 2 mm walls; ~180 mm long\n\n$fa = 2; $fs = 1;\n\n// Overall envelope\nlength = 180;\nwidth  = 45;\nthick  = 18;\n\n// Wall thickness\nwall = 2;\n\n// Top shell\nmodule top_shell() {\n    difference() {\n        // Main rounded body\n        hull() {\n            translate([-length/2, -width/2, 0])\n                cylinder(h=thick, r1=4, r2=4);\n            translate([ length/2, -width/2, 0])\n                cylinder(h=thick, r1=4, r2=4);\n            translate([-length/2,  width/2, 0])\n                cylinder(h=thick, r1=4, r2=4);\n            translate([ length/2,  width/2, 0])\n                cylinder(h=thick, r1=4, r2=4);\n        }\n\n        // Hollow it out\n        translate([0, 0, -0.1])\n            scale([0.9, 0.9, 2])\n            hull() {\n                for (x=[-length/2+6, length/2-6])\n                    for (y=[-width/2+6, width/2-6])\n                        translate([x, y, 0])\n                            cylinder(h=thick+1, r1=2, r2=2);\n            }\n    }\n}\n\n// Button grid\nmodule buttons() {\n    // Power button\n    translate([-length/2+15, 0, thick+0.1])\n        cylinder(h=2, r=5, $fn=32);\n\n    // 4×4 D-pad cluster\n    for (i=[-1:1])\n        for (j=[-1:1])\n            translate([-length/2+40 + i*12, j*12, thick+0.1])\n                cylinder(h=2, r=4, $fn=16);\n\n    // Volume +/- and channel +/-\n    for (i=[0,1])\n        translate([-length/2+70 + i*30, width/2-10, thick+0.1])\n            cube([12, 6, 2], center=true);\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    translate([-length/2+30, 0, -thick-wall])\n        rotate([90,0,0])\n            cylinder(h=35, r=10, $fn=32);\n}\n\n// Bottom shell\nmodule bottom_shell() {\n    difference() {\n        // Copy of top shell flipped\n        mirror([0,0,1]) top_shell();\n\n        // Remove the battery hole\n        translate([-length/2+30, 0, -thick])\n            rotate([90,0,0])\n                cylinder(h=35, r=10.5, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    top_shell();\n    bottom_shell();\n    buttons();\n}",
    "renders": true
  },
  {
    "household_item": "calculator",
    "openscad_code": "// Realistic 3D printable calculator\n// Dimensions: ~85 x 55 x 10 mm\n\n// Main calculator body\nmodule calculator_body() {\n    difference() {\n        // Outer rounded shell\n        hull() {\n            translate([-40, -25, 0]) cylinder(h=10, r=3, $fn=20);\n            translate([40, -25, 0]) cylinder(h=10, r=3, $fn=20);\n            translate([40, 25, 0]) cylinder(h=10, r=3, $fn=20);\n            translate([-40, 25, 0]) cylinder(h=10, r=3, $fn=20);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1]) hull() {\n            translate([-37, -22, 0]) cylinder(h=12, r=2.5, $fn=20);\n            translate([37, -22, 0]) cylinder(h=12, r=2.5, $fn=20);\n            translate([37, 22, 0]) cylinder(h=12, r=2.5, $fn=20);\n            translate([-37, 22, 0]) cylinder(h=12, r=2.5, $fn=20);\n        }\n        \n        // Screen window\n        translate([-30, 15, 9]) cube([60, 15, 2]);\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    translate([-28, 16, 9.5]) {\n        color([0.2, 0.2, 0.2]) cube([56, 12, 0.5]);\n    }\n    \n    // Screen surface\n    translate([-27, 17, 10]) {\n        color([0.8, 0.8, 0.7]) cube([54, 10, 0.1]);\n    }\n}\n\n// Button base - raised area\nmodule button_base() {\n    translate([0, -10, 9.5]) {\n        color([0.9, 0.9, 0.9]) \n        hull() {\n            translate([-32, -12, 0]) cylinder(h=1, r=1, $fn=20);\n            translate([32, -12, 0]) cylinder(h=1, r=1, $fn=20);\n            translate([32, 12, 0]) cylinder(h=1, r=1, $fn=20);\n            translate([-32, 12, 0]) cylinder(h=1, r=1, $fn=20);\n        }\n    }\n}\n\n// Individual button\nmodule button(label, x, y, color_val) {\n    translate([x, y, 10]) {\n        // Button body\n        color(color_val) cylinder(h=1.5, r=4.5, $fn=20);\n        // Button top\n        translate([0, 0, 1.5]) {\n            difference() {\n                cylinder(h=0.5, r=5, $fn=20);\n                cylinder(h=1, r=4, $fn=20);\n            }\n        }\n    }\n}\n\n// Number buttons (0-9)\nmodule number_buttons() {\n    colors = [[0.1, 0.1, 0.1], [0.8, 0.8, 0.8]];\n    \n    // 7-8-9 row\n    button(\"7\", -20, 5, colors[1]);\n    button(\"8\", 0, 5, colors[1]);\n    button(\"9\", 20, 5, colors[1]);\n    \n    // 4-5-6 row\n    button(\"4\", -20, -5, colors[1]);\n    button(\"5\", 0, -5, colors[1]);\n    button(\"6\", 20, -5, colors[1]);\n    \n    // 1-2-3 row\n    button(\"1\", -20, -15, colors[1]);\n    button(\"2\", 0, -15, colors[1]);\n    button(\"3\", 20, -15, colors[1]);\n    \n    // 0 button\n    button(\"0\", -10, -25, colors[1]);\n}\n\n// Operator buttons\nmodule operator_buttons() {\n    // + - * /\n    button(\"+\", 30, 5, [0.9, 0.7, 0.1]);\n    button(\"-\", 30, -5, [0.9, 0.7, 0.1]);\n    button(\"*\", 30, -15, [0.9, 0.7, 0.1]);\n    button(\"/\", 30, -25, [0.9, 0.7, 0.1]);\n}\n\n// Special buttons\nmodule special_buttons() {\n    // Equals and clear\n    button(\"=\", 10, -25, [0.1, 0.6, 0.9]);\n    button(\"C\", -30, -25, [0.9, 0.2, 0.2]);\n    \n    // Decimal point\n    button(\".\", 20, -25, [0.8, 0.8, 0.8]);\n}\n\n// Battery compartment on back\nmodule battery_compartment() {\n    translate([20, 0, 0]) {\n        difference() {\n            // Raised area\n            cube([30, 20, 3]);\n            \n            // Battery slot\n            translate([15, 10, 2]) cube([26, 16, 2]);\n            \n            // Screw holes\n            translate([5, 5, 2]) cylinder(h=3, r=1, $fn=10);\n            translate([25, 5, 2]) cylinder(h=3, r=1, $fn=10);\n        }\n    }\n}\n\n// Assemble the calculator\nunion() {\n    calculator_body();\n    lcd_screen();\n    button_base();\n    number_buttons();\n    operator_buttons();\n    special_buttons();\n    \n    // Back details (rotate to view)\n    translate([0, 0, 0]) rotate([0, 180, 0]) {\n        battery_compartment();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "alarm",
    "openscad_code": "// Alarm clock with bells - realistic style, medium complexity\n// Overall size: 80mm wide, 60mm deep, 80mm tall\n\n$fn = 36;  // Smooth curves for 3D printing\n\nmodule main_body() {\n    difference() {\n        // Main rounded body\n        minkowski() {\n            cube([70, 50, 30], center=true);\n            sphere(2);\n        }\n        \n        // Display recess\n        translate([0, 0, 16])\n            cube([50, 25, 5], center=true);\n        \n        // Buttons hole\n        translate([30, 0, 12])\n            rotate([90,0,0])\n            cylinder(h=10, d=6);\n    }\n}\n\nmodule display() {\n    // LCD screen\n    translate([0, 0, 18.5])\n        cube([46, 21, 1], center=true);\n    \n    // Screen border\n    difference() {\n        translate([0, 0, 18])\n            cube([48, 23, 0.5], center=true);\n        translate([0, 0, 18.5])\n            cube([46, 21, 1.5], center=true);\n    }\n}\n\nmodule foot(x, y) {\n    translate([x, y, -14.5])\n        cylinder(h=5, d=8);\n}\n\nmodule feet() {\n    foot(30, 20);\n    foot(-30, 20);\n    foot(30, -20);\n    foot(-30, -20);\n}\n\nmodule bell(r) {\n    difference() {\n        // Bell dome\n        translate([0, 0, 5])\n            scale([1, 1, 0.7])\n            sphere(r);\n        \n        // Bell hole\n        translate([0, 0, 5])\n            scale([1, 1, 0.8])\n            sphere(r-2);\n    }\n    \n    // Bell base\n    translate([0, 0, 0.5])\n        cylinder(h=1, r=r);\n}\n\nmodule hammer() {\n    // Hammer arm\n    rotate([0, 90, 0])\n        cylinder(h=20, d=3);\n    \n    // Hammer head\n    translate([0, 10, 0])\n        cube([8, 6, 4], center=true);\n}\n\nmodule bell_assembly(x) {\n    translate([x, 25, 30]) {\n        // Bell\n        bell(12);\n        \n        // Hammer between bells\n        if (x < 0) {\n            translate([12, 0, 5])\n                hammer();\n        }\n    }\n}\n\nmodule top_bells() {\n    bell_assembly(-18);\n    bell_assembly(18);\n}\n\nmodule button_row() {\n    for (i = [0:2]) {\n        translate([25 + i*8, 0, 15])\n            rotate([90,0,0])\n            cylinder(h=3, d=4);\n    }\n}\n\nmodule alarm_clock() {\n    union() {\n        // Base parts\n        main_body();\n        feet();\n        \n        // Top bells\n        top_bells();\n        \n        // Details\n        display();\n        button_row();\n        \n        // Time set knobs on sides\n        translate([35, 0, 5])\n            rotate([0,90,0])\n            cylinder(h=10, d=6);\n        translate([-35, 0, 5])\n            rotate([0,90,0])\n            cylinder(h=10, d=6);\n    }\n}\n\n// Generate complete alarm clock\nalarm_clock();",
    "renders": true
  },
  {
    "household_item": "coffeemaker",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// Overall scale factor to keep model ~80 mm tall\nscale_factor = 0.35;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main rounded box\n        translate([0, 0, 35])\n            scale([1, 0.7, 1])\n            minkowski() {\n                cube([40, 30, 50], center = true);\n                sphere(3);\n            }\n        \n        // Front display cutout\n        translate([0, 11, 55])\n            cube([30, 2, 15], center = true);\n        \n        // Water reservoir opening\n        translate([0, -15, 65])\n            rotate([0, 10, 0])\n            cylinder(h = 20, r = 8, center = true);\n    }\n}\n\n// Water reservoir lid\nmodule reservoir_lid() {\n    translate([0, -15, 72])\n        rotate([0, 10, 0])\n        difference() {\n            cylinder(h = 3, r = 9, center = true);\n            cylinder(h = 4, r = 7.5, center = true);\n        }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([0, 12.5, 55])\n        cube([28, 1, 13], center = true);\n    \n    // Buttons\n    for(i = [-1:1]) {\n        translate([i * 8, 13.5, 55])\n            cube([6, 0.5, 6], center = true);\n    }\n    \n    // Display\n    translate([0, 13.5, 62])\n        cube([20, 0.5, 8], center = true);\n}\n\n// Base with drip tray\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, 15])\n            scale([1, 0.8, 1])\n            minkowski() {\n                cube([45, 35, 8], center = true);\n                sphere(2);\n            }\n        \n        // Drip tray recess\n        translate([0, 5, 15])\n            cube([35, 20, 9], center = true);\n    }\n    \n    // Drip tray grid pattern\n    for(x = [-15:5:15]) {\n        translate([x, 5, 20])\n            cube([2, 18, 0.5], center = true);\n    }\n}\n\n// Coffee pot\nmodule coffee_pot() {\n    // Handle\n    translate([0, 20, 30])\n        rotate([90, 0, 0])\n        cylinder(h = 15, r1 = 3, r2 = 2);\n    \n    // Pot body\n    difference() {\n        translate([0, 15, 25])\n            rotate_extrude()\n                translate([0, 0])\n                    polygon(points = [\n                        [0, 0],\n                        [12, 0],\n                        [15, 5],\n                        [15, 20],\n                        [12, 25],\n                        [0, 25]\n                    ]);\n        \n        // Hollow interior\n        translate([0, 15, 25])\n            rotate_extrude()\n                translate([0, 0])\n                    polygon(points = [\n                        [0, 1],\n                        [11, 1],\n                        [14, 5],\n                        [14, 20],\n                        [11, 24],\n                        [0, 24]\n                    ]);\n    }\n    \n    // Lid\n    translate([0, 15, 50])\n        cylinder(h = 2, r = 12);\n    \n    // Spout\n    translate([-15, 15, 35])\n        rotate([0, 0, -30])\n        cylinder(h = 8, r1 = 3, r2 = 1.5);\n}\n\n// Filter basket area\nmodule filter_area() {\n    // Shower head\n    translate([0, 0, 38])\n        cylinder(h = 3, r = 8);\n    \n    // Filter basket\n    translate([0, 0, 30])\n        cylinder(h = 8, r = 10);\n    \n    // Basket handle\n    translate([10, 0, 30])\n        rotate([0, 90, 0])\n        cylinder(h = 5, r = 1.5);\n}\n\n// Power cord\nmodule power_cord() {\n    translate([-22, -15, 15])\n        rotate([0, 90, 0])\n        cylinder(h = 15, r = 2);\n    \n    for(i = [0:2:15]) {\n        translate([-22 - i, -15, 15])\n            rotate([0, 90, 0])\n            cylinder(h = 2, r = 2);\n    }\n}\n\n// Assemble the coffeemaker\nscale([scale_factor, scale_factor, scale_factor]) {\n    body();\n    reservoir_lid();\n    control_panel();\n    base();\n    coffee_pot();\n    filter_area();\n    power_cord();\n}",
    "renders": true
  },
  {
    "household_item": "ricecooker",
    "openscad_code": "// Rice Cooker Model - Medium Complexity Realistic Style\n// Designed for 3D printing, 80mm height\n\n// Overall dimensions\ncooker_width = 65;\ncooker_depth = 65;\ncooker_height = 80;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule body() {\n    // Outer shell\n    difference() {\n        // Main rounded rectangular body\n        hull() {\n            translate([0, 0, cooker_height/2 - 5])\n                cylinder(h = 10, r1 = cooker_width/2, r2 = cooker_width/2, $fn = 50);\n            translate([0, 0, 5])\n                cylinder(h = cooker_height - 10, r1 = cooker_width/2, r2 = cooker_width/2, $fn = 50);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h = cooker_height - wall, r = cooker_width/2 - wall, $fn = 50);\n    }\n}\n\n// Inner cooking pot\nmodule cooking_pot() {\n    translate([0, 0, wall + 2])\n        difference() {\n            cylinder(h = cooker_height * 0.4, r = cooker_width/2 - wall - 4, $fn = 50);\n            translate([0, 0, wall])\n                cylinder(h = cooker_height * 0.4 - wall, r = cooker_width/2 - wall - 6, $fn = 50);\n        }\n}\n\n// Lid handle\nmodule lid_handle() {\n    translate([0, 0, cooker_height + 8])\n        rotate([0, 180, 0])\n            difference() {\n                // Main handle shape\n                hull() {\n                    sphere(r = 6, $fn = 30);\n                    translate([0, 0, -8])\n                        sphere(r = 4, $fn = 30);\n                }\n                \n                // Finger grip indentation\n                for(i = [-1:1]) {\n                    translate([i * 3, 0, -4])\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, r = 1.5, $fn = 20);\n                }\n            }\n}\n\n// Lid\nmodule lid() {\n    translate([0, 0, cooker_height - 2])\n        difference() {\n            // Lid top\n            cylinder(h = 10, r = cooker_width/2 - 1, $fn = 50);\n            \n            // Steam vent\n            translate([0, cooker_width/4, 5])\n                cylinder(h = 10, r = 3, $fn = 20);\n            \n            // Inner lip for fit\n            translate([0, 0, -1])\n                cylinder(h = 5, r = cooker_width/2 - wall - 1, $fn = 50);\n        }\n    \n    // Handle on lid\n    lid_handle();\n    \n    // Steam vent cap\n    translate([0, cooker_width/4, cooker_height + 8])\n        cylinder(h = 2, r = 4, $fn = 20);\n}\n\n// Control panel\nmodule control_panel() {\n    translate([cooker_width/2 - 1, 0, cooker_height * 0.6])\n        rotate([0, 90, 0])\n            difference() {\n                // Panel housing\n                cube([20, 30, wall], center = true);\n                \n                // LED window\n                translate([0, 10, 0])\n                    cube([16, 6, wall + 1], center = true);\n                \n                // Button holes\n                for(y = [-8, 0, 8]) {\n                    translate([0, y, 0])\n                        cylinder(h = wall + 1, r = 3, $fn = 20);\n                }\n            }\n}\n\n// Power cord\nmodule power_cord() {\n    translate([-cooker_width/2 - 5, 0, 10])\n        rotate([0, 0, 90])\n            hull() {\n                sphere(r = 3);\n                translate([0, 15, 0])\n                    sphere(r = 2);\n            }\n}\n\n// Side handles\nmodule side_handles() {\n    for(side = [-1, 1]) {\n        translate([side * (cooker_width/2 + 3), 0, cooker_height * 0.4])\n            difference() {\n                // Handle body\n                rotate([0, 90, 0])\n                    cylinder(h = 15, r = 4, center = true, $fn = 20);\n                \n                // Grip hole\n                rotate([0, 90, 0])\n                    cylinder(h = 16, r = 2, center = true, $fn = 20);\n            }\n    }\n}\n\n// Feet\nmodule feet() {\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x * cooker_width/3, y * cooker_width/3, 0])\n                cylinder(h = 3, r = 3, $fn = 20);\n}\n\n// Assembly\nunion() {\n    // Main body and components\n    body();\n    cooking_pot();\n    lid();\n    control_panel();\n    power_cord();\n    side_handles();\n    feet();\n}\n\n// Button details\ntranslate([cooker_width/2 + 1, 0, cooker_height * 0.6 + 10])\n    rotate([90, 0, 0])\n        for(y = [-8, 0, 8])\n            translate([0, y, 0])\n                cylinder(h = 2, r = 2.5, $fn = 20);\n\n// LED indicator\ntranslate([cooker_width/2 + 1, 10, cooker_height * 0.6])\n    rotate([90, 0, 0])\n        cylinder(h = 1, r = 2, $fn = 20);",
    "renders": true
  },
  {
    "household_item": "breadmaker",
    "openscad_code": "// Breadmaker - Realistic Style, Medium Complexity\n// Dimensions: ~70mm wide x 45mm deep x 50mm tall\n\nmodule breadmaker() {\n    // Main body shell\n    difference() {\n        // Outer shell\n        translate([0, 0, 20])\n            rounded_box([70, 45, 40], 5);\n        \n        // Hollow interior\n        translate([0, 0, 21])\n            rounded_box([66, 41, 38], 4);\n    }\n    \n    // Control panel\n    translate([-32, 0, 40])\n        cube([10, 30, 10]);\n    \n    // Display screen\n    difference() {\n        translate([-31, 5, 45])\n            cube([8, 12, 1]);\n        translate([-30, 6, 46])\n            cube([6, 10, 1]);\n    }\n    \n    // Buttons\n    for(i = [0:2]) {\n        translate([-30, -8 - i*6, 46])\n            cylinder(h=1, r=2, $fn=16);\n    }\n    \n    // Lid\n    rotate([0, -30, 0])\n    translate([0, 0, 39])\n        rounded_box([68, 43, 3], 3);\n    \n    // Handle\n    difference() {\n        translate([0, 22, 45])\n            cube([25, 8, 8]);\n        translate([2, 24, 47])\n            cube([21, 4, 4]);\n    }\n    \n    // Vent holes\n    for(i = [0:1]) {\n        translate([20 + i*15, 0, 55])\n            cylinder(h=5, r=3, $fn=12);\n    }\n    \n    // Feet\n    for(x = [-25, 25])\n        for(y = [-15, 15])\n            translate([x, y, 0])\n                cylinder(h=3, r=3, $fn=12);\n    \n    // Power cord\n    translate([35, -20, 10])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=2, $fn=8);\n}\n\nmodule rounded_box(size, radius) {\n    hull() {\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                for(z = [-1, 1])\n                    translate([x*(size[0]/2 - radius), \n                              y*(size[1]/2 - radius), \n                              z*(size[2]/2 - radius)])\n                        sphere(r=radius, $fn=16);\n    }\n}\n\nbreadmaker();",
    "renders": true
  },
  {
    "household_item": "juicer",
    "openscad_code": "// Manual citrus juicer, ~70 mm tall, 3D-printable\n// All walls >= 2 mm, no steep overhangs\n\n$fn = 30;        // smooth curves\n\nmodule juicer() {\n    // Base plate with raised rim to catch juice\n    difference() {\n        cylinder(h = 8, d = 70);\n        translate([0, 0, 6])\n            cylinder(h = 3, d = 66);\n    }\n\n    // Central cone with juice channels\n    union() {\n        // Main cone\n        cylinder(h1 = 35, h2 = 0, r1 = 18, r2 = 0);\n\n        // Spiral ribs for juice extraction (4 ribs, 90 deg apart)\n        for (a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([0, 4, 0])\n                    rotate([0, 0, 20])\n                        linear_extrude(height = 35, twist = 60)\n                            square([2, 8]);\n        }\n    }\n\n    // Short vertical spout for pouring\n    translate([30, 0, 4])\n        rotate([0, 0, 0])\n            union() {\n                cube([20, 12, 4]);\n                translate([20, 6, 2])\n                    rotate([0, 90, 0])\n                        cylinder(h = 12, r = 4);\n            }\n\n    // Handle attached to base\n    translate([-40, 0, 4])\n        rotate([0, 0, 0])\n            union() {\n                // Handle core\n                rotate([0, 90, 0])\n                    cylinder(h = 45, r = 6);\n\n                // Grip rings\n                for (z = [5:8:40])\n                    translate([0, 0, -22 + z])\n                        rotate([0, 90, 0])\n                            cylinder(h = 3, r = 8);\n            }\n\n    // Strengthening fillet between cone and base\n    translate([0, 0, 8])\n        cylinder(h = 4, r1 = 18, r2 = 20);\n}\n\njuicer();",
    "renders": true
  },
  {
    "household_item": "grinder",
    "openscad_code": "// Realistic 3-chamber herb grinder, 63 mm Ø, 3 mm wall, 0.3 mm print tolerance\n// No support needed – all inside angles ≤ 45°\n\n$fa = 2; $fs = 1;\n\n/* ---------- PARAMETERS ---------- */\nd = 63;          // outer diameter\nh_top = 12;      // lid height\nh_teeth = 5.5;   // teeth height\nh_mid = 10;      // milling chamber height\nh_base = 22;     // collection chamber + kief catcher\nwall = 3;        // wall thickness\ntol = 0.3;       // print tolerance\nteeth = 24;      // number of diamond teeth\ntooth_l = 9;     // tooth length\ntooth_w = 3.5;   // tooth width\nmag_r = 3;       // magnet radius\nmag_h = 2.5;     // magnet height\nscreen_t = 0.4;  // mesh thickness\nscreen_hole = 0.8;\n\n/* ---------- MODULES ---------- */\nmodule grinder() {\n    // Lip on lid and body for interlock\n    lip_h = 4;\n    lip_gap = 1.2;\n\n    /* ---- TOP LID ---- */\n    translate([0,0,h_base+h_mid]) lid();\n\n    /* ---- MILLING CHAMBER ---- */\n    translate([0,0,h_base]) mid_chamber();\n\n    /* ---- COLLECTION CHAMBER ---- */\n    base_chamber();\n}\n\n/* Top lid with teeth and magnet cavity */\nmodule lid() {\n    difference() {\n        // Outer shell\n        cylinder(h=h_top, d=d, center=true);\n        translate([0,0,-h_top/2-wall]) cylinder(h=h_top+wall, d=d-2*wall, center=true);\n\n        // Teeth on lid\n        for(i=[0:teeth/2-1])\n            rotate([0,0,i*360/(teeth/2)])\n                translate([d/2*0.6, 0, -h_top/2+h_teeth/2])\n                    rotate([45,0,0])\n                        cube([tooth_l,tooth_w,h_teeth], center=true);\n\n        // Magnet cavity\n        translate([0,0,-h_top/2+mag_h/2+tol])\n            cylinder(h=mag_h+tol, r=mag_r+tol, $fn=20);\n    }\n}\n\n/* Middle section with teeth and screen support */\nmodule mid_chamber() {\n    difference() {\n        union() {\n            // Cylinder body\n            cylinder(h=h_mid, d=d, center=true);\n            // Lip\n            translate([0,0,h_mid/2])\n                cylinder(h=lip_h, d=d-2*wall-2*lip_gap, center=true);\n        }\n\n        // Hollow center\n        translate([0,0,-wall]) cylinder(h=h_mid+2*wall, d=d-2*wall, center=true);\n\n        // Bottom teeth\n        for(i=[0:teeth-1])\n            rotate([0,0,i*360/teeth+360/teeth/2])\n                translate([d/2*0.6, 0, -h_mid/2+h_teeth/2])\n                    rotate([45,0,0])\n                        cube([tooth_l,tooth_w,h_teeth], center=true);\n\n        // Screen recess\n        translate([0,0,-h_mid/2+screen_t/2])\n            cylinder(h=screen_t+tol, d=d-2*wall-tol, center=true);\n    }\n\n    // Screen mesh (simple grid)\n    screen();\n}\n\n/* Collection chamber with kief catcher */\nmodule base_chamber() {\n    difference() {\n        union() {\n            cylinder(h=h_base, d=d, center=true);\n            // Lip\n            translate([0,0,h_base/2])\n                cylinder(h=lip_h, d=d-2*wall, center=true);\n        }\n\n        // Hollow\n        translate([0,0,-wall]) cylinder(h=h_base+2*wall, d=d-2*wall, center=true);\n\n        // Kief scraper slot\n        translate([-d/2+wall+tol,0,-h_base/4])\n            cube([wall, 6, h_base/2], center=true);\n    }\n}\n\n/* Simple square mesh screen */\nmodule screen() {\n    size = d-2*wall-2*tol;\n    lines = floor(size/screen_hole/2);\n    for(i=[-lines:lines])\n        translate([0, i*screen_hole*2, -h_mid/2+screen_t/2])\n            cube([size, screen_hole, screen_t], center=true);\n    for(i=[-lines:lines])\n        translate([i*screen_hole*2, 0, -h_mid/2+screen_t/2])\n            cube([screen_hole, size, screen_t], center=true);\n}\n\n/* ---------- RENDER ---------- */\ngrinder();",
    "renders": true
  },
  {
    "household_item": "garbage",
    "openscad_code": "// Realistic medium-complexity OpenSCAD garbage bin\n// Overall height ~80 mm, footprint 50 mm x 50 mm\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Main body module\nmodule bin_body(h = 60, w = 50, d = 50) {\n    difference() {\n        // Outer shell\n        cube([w, d, h], center = true);\n        \n        // Hollow inside\n        translate([0, 0, -wall/2])\n            cube([w - 2*wall, d - 2*wall, h], center = true);\n    }\n}\n\n// Rolled rim lip for realism\nmodule rim(rim_h = 5, w = 50, d = 50) {\n    // Lower half of rim\n    translate([0, 0, 30])\n        difference() {\n            cube([w + 2, d + 2, rim_h], center = true);\n            cube([w - 2*wall, d - 2*wall, rim_h + 0.1], center = true);\n        }\n    \n    // Upper rounded lip\n    translate([0, 0, 30 + rim_h/2])\n        difference() {\n            minkowski() {\n                cube([w, d, rim_h/2], center = true);\n                sphere(r = 1.5, $fn = 16);\n            }\n            cube([w + 2*wall, d + 2*wall, rim_h], center = true);\n        }\n}\n\n// Hinged lid\nmodule lid(w = 50, d = 50) {\n    // Main lid plate\n    translate([0, 0, 34])\n        rotate([0, 0, 0])\n            difference() {\n                cube([w - 1, d - 1, 3], center = true);\n                translate([0, 0, -wall/2])\n                    cube([w - 2*wall, d - 2*wall, 3.1], center = true);\n            }\n    \n    // Handle bar\n    translate([w/4, 0, 35.5])\n        rotate([90, 0, 0])\n            cylinder(h = d/4, r = 2.5, $fn = 12);\n}\n\n// Pedal mechanism\nmodule pedal() {\n    // Pedal arm\n    translate([0, 25, 0])\n        rotate([0, 0, 0])\n            difference() {\n                cube([30, 8, 5], center = true);\n                translate([0, 0, -wall/2])\n                    cube([30 - 2*wall, 8 - 2*wall, 5], center = true);\n            }\n    \n    // Pivot axle\n    translate([0, 25, -2.5])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 2, $fn = 12);\n}\n\n// Wheels (simplified)\nmodule wheels() {\n    for (x = [-20, 20]) {\n        translate([x, -23, -25])\n            rotate([90, 0, 0])\n                cylinder(h = 5, r = 4, $fn = 16);\n    }\n}\n\n// Union all parts\nunion() {\n    // Main bin\n    bin_body();\n    \n    // Rim\n    rim();\n    \n    // Lid\n    lid();\n    \n    // Pedal\n    pedal();\n    \n    // Wheels\n    wheels();\n}",
    "renders": true
  },
  {
    "household_item": "disposal",
    "openscad_code": "// Kitchen garbage disposal unit\n// Designed for 3D printing – no overhangs, 1 mm wall thickness throughout\n// Overall size ~70 mm diameter, 60 mm tall\n\n$fn = 36;\n\n// Main body\nmodule disposal_main() {\n    difference() {\n        // Main cylinder body\n        cylinder(h = 50, d = 70, center = true);\n\n        // Hollow center\n        translate([0, 0, -3])\n            cylinder(h = 56, d = 68, center = true);\n    }\n}\n\n// Mounting flange on top\nmodule flange() {\n    difference() {\n        // Flange plate\n        cylinder(h = 8, d = 90, center = true);\n\n        // Center hole\n        translate([0, 0, -1])\n            cylinder(h = 10, d = 52, center = true);\n\n        // Mounting screw holes\n        for (a = [0:60:359])\n            rotate([0, 0, a])\n                translate([35, 0, -1])\n                    cylinder(h = 10, d = 4, center = true);\n    }\n}\n\n// Bottom motor housing\nmodule motor_housing() {\n    difference() {\n        // Motor cylinder\n        translate([0, 0, -30])\n            cylinder(h = 25, d = 60, center = true);\n\n        // Hollow motor cavity\n        translate([0, 0, -30])\n            cylinder(h = 27, d = 58, center = true);\n    }\n}\n\n// Electrical connector box\nmodule connector_box() {\n    difference() {\n        // Box body\n        translate([35, 0, -15])\n            cube([20, 18, 12], center = true);\n\n        // Wiring cavity\n        translate([35, 0, -15])\n            cube([18, 16, 10], center = true);\n    }\n}\n\n// Drain outlet tube\nmodule outlet_tube() {\n    difference() {\n        // Tube\n        rotate([0, 90, 0])\n            translate([0, 0, -45])\n                cylinder(h = 30, d = 25, center = true);\n\n        // Hollow tube\n        rotate([0, 90, 0])\n            translate([0, 0, -45])\n                cylinder(h = 32, d = 23, center = true);\n    }\n}\n\n// Side support ribs\nmodule ribs() {\n    for (a = [0:120:359]) {\n        rotate([0, 0, a]) {\n            translate([0, 35, -10])\n                cube([4, 8, 30], center = true);\n        }\n    }\n}\n\n// Assemble the disposal\nunion() {\n    disposal_main();\n    translate([0, 0, 29])\n        flange();\n    motor_housing();\n    connector_box();\n    outlet_tube();\n    ribs();\n}",
    "renders": true
  },
  {
    "household_item": "shavers",
    "openscad_code": "// Electric Shaver - Realistic Medium Complexity\n// Overall dimensions: 45mm x 65mm x 180mm\n\n// Main body parameters\nbody_w = 45;\nbody_d = 65;\nbody_h = 130;\n\n// Head parameters\nhead_d = 42;\nhead_h = 18;\n\n// Handle grip parameters\ngrip_r = 3;\ngrip_len = 100;\ngrip_step = 8;\n\n// Button parameters\nbtn_w = 8;\nbtn_h = 4;\nbtn_d = 25;\n\n// Charger port parameters\nport_w = 10;\nport_h = 5;\nport_d = 3;\n\n// Foil head pattern\nmodule foil_pattern() {\n    for (i = [-20:2:20]) {\n        for (j = [-20:2:20]) {\n            translate([i, j, 0])\n                cylinder(h=0.5, r=0.3, $fn=8);\n        }\n    }\n}\n\n// Grip ring pattern\nmodule grip_rings() {\n    for (i = [-grip_len/2 + 10: grip_step: grip_len/2 - 10]) {\n        rotate([0, 90, 0])\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=2, r1=body_w/2 + 1, r2=body_w/2 + 1, $fn=32);\n                    cylinder(h=2.5, r1=body_w/2 - 1, r2=body_w/2 - 1, $fn=32);\n                }\n    }\n}\n\n// Main body with ergonomic curves\nmodule shaver_body() {\n    difference() {\n        // Tapered body shape\n        hull() {\n            translate([0, 0, body_h/2])\n                scale([0.9, 0.9, 1])\n                    cube([body_w, body_d, body_h], center=true);\n            translate([0, 0, -body_h/2 + 20])\n                scale([0.7, 0.7, 1])\n                    cube([body_w - 10, body_d - 10, 40], center=true);\n        }\n        \n        // Hollow out for electronics\n        translate([0, 0, body_h/2 - 10])\n            cube([body_w - 8, body_d - 8, body_h - 20], center=true);\n            \n        // Button cutout\n        translate([body_w/2 + 1, 0, body_h/4])\n            cube([btn_h + 2, btn_d, btn_w + 2], center=true);\n            \n        // Charger port\n        translate([0, body_d/2 + 1, -body_h/4])\n            cube([port_w, port_d + 1, port_h], center=true);\n    }\n    \n    // Add grip rings\n    translate([0, 0, 0])\n        grip_rings();\n}\n\n// Shaver head with triple foil\nmodule shaver_head() {\n    union() {\n        // Head base\n        translate([0, 0, body_h/2 + head_h/2])\n            cylinder(h=head_h, r=head_d/2, $fn=32);\n            \n        // Top cover with foils\n        translate([0, 0, body_h/2 + head_h + 2])\n            difference() {\n                cylinder(h=2, r=head_d/2, $fn=32);\n                \n                // Three foil areas\n                translate([-12, 0, -0.5])\n                    cube([24, 30, 3]);\n                translate([12, 0, -0.5])\n                    cube([24, 30, 3]);\n                translate([0, -12, -0.5])\n                    cube([30, 24, 3]);\n            }\n            \n        // Foil patterns\n        translate([-12, 0, body_h/2 + head_h + 2.5])\n            rotate([0, 0, 0])\n                foil_pattern();\n        translate([12, 0, body_h/2 + head_h + 2.5])\n            rotate([0, 0, 0])\n                foil_pattern();\n        translate([0, -12, body_h/2 + head_h + 2.5])\n            rotate([0, 0, 90])\n                foil_pattern();\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([body_w/2 + btn_h/2, 0, body_h/4])\n        cube([btn_h, btn_d, btn_w], center=true);\n}\n\n// Charger port cover\nmodule charger_port() {\n    translate([0, body_d/2 + port_d/2, -body_h/4])\n        cube([port_w, port_d, port_h], center=true);\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([body_w/2 - 5, 0, body_h/3])\n        cylinder(h=1, r=2, $fn=16);\n}\n\n// Assembly\nunion() {\n    shaver_body();\n    shaver_head();\n    power_button();\n    charger_port();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "household_item": "trimmer",
    "openscad_code": "// Realistic Trimmer - Medium Complexity\n// 3D printable beard / hair trimmer with guard and power button\n// ~80 mm long, 45 mm tall, 35 mm deep\n\n$fn = 36;           // Smooth curves\nwall = 2;           // 3D-print-friendly wall thickness\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded shell\n        hull() {\n            translate([-5, -15, 0])  cube([55, 30, 25], center=true);\n            translate([-5, -15, 20]) cube([50, 25, 20], center=true);\n        }\n        \n        // Hollow inside\n        hull() {\n            translate([-5, -15, 2])  cube([48, 26, 18], center=true);\n            translate([-5, -15, 17.5]) cube([43, 21, 15], center=true);\n        }\n        \n        // Grip texture grooves (horizontal)\n        for (z = [5:4:20]) {\n            translate([-2, -15, z])\n                cube([45, 30, 1.5]);\n        }\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([5, 20, 12])\n        difference() {\n            // Raised button\n            rotate([0, 90, 0]) cylinder(h = 6, d = 8, center=true);\n            // Recessed icon\n            rotate([0, 90, 0]) cylinder(h = 7, d = 4, center=true);\n        }\n}\n\n// Blade head\nmodule blade_head() {\n    difference() {\n        // Base block\n        translate([-30, 0, 12])\n            cube([25, 28, 12], center=true);\n        \n        // Recess for blades\n        translate([-30, 0, 15])\n            cube([24, 24, 4], center=true);\n    }\n    \n    // Blade teeth (simple rectangles)\n    for (y = [-10:2:10]) {\n        translate([-42, y, 15])\n            cube([12, 1.2, 2]);\n    }\n}\n\n// Comb guard with adjustable height steps\nmodule guard() {\n    // Main guard plate\n    difference() {\n        translate([-42, 0, 6])\n            cube([15, 32, 8], center=true);\n        \n        // Slots for teeth clearance\n        for (y = [-11:2:11]) {\n            translate([-42, y, 6])\n                cube([16, 1.5, 9], center=true);\n        }\n    }\n    \n    // Mounting clips\n    for (side = [-1, 1]) {\n        translate([-17, side*18, 10])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 4);\n    }\n}\n\n// Battery cap at rear\nmodule battery_cap() {\n    difference() {\n        translate([25, 0, 12])\n            rotate([0, 90, 0])\n                cylinder(h = 12, d = 18, center=true);\n        \n        translate([25, 0, 12])\n            rotate([0, 90, 0])\n                cylinder(h = 13, d = 12, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    power_button();\n    blade_head();\n    guard();\n    battery_cap();\n}",
    "renders": true
  },
  {
    "household_item": "hairdryer",
    "openscad_code": "// Realistic Hairdryer Model - Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;\n\n// Main parameters\nbody_length = 80;\nbody_diameter = 35;\nhandle_length = 75;\nhandle_diameter = 25;\nnozzle_length = 40;\nnozzle_diameter = 45;\n\nmodule hairdryer() {\n    // Main body cylinder\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = body_length, d = body_diameter);\n        // Air intake holes on back\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([body_diameter/2 - 3, 0, 5])\n            cylinder(h = 10, d = 8);\n        }\n    }\n    \n    // Handle\n    translate([0, -body_diameter/2 - handle_diameter/2 - 5, -10])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = handle_length, d = handle_diameter);\n        // Wire hole at bottom\n        translate([0, 0, -1])\n        cylinder(h = 5, d = 6);\n    }\n    \n    // Nozzle\n    translate([0, 0, body_length])\n    difference() {\n        // Tapered nozzle\n        cylinder(h1 = nozzle_diameter, h2 = nozzle_diameter*0.7, h = nozzle_length);\n        // Inner opening\n        cylinder(h = nozzle_length + 2, d = nozzle_diameter*0.8);\n    }\n    \n    // Control buttons\n    for(i = [0:1]) {\n        translate([body_diameter/2 + 2, -body_diameter/4 + i*10, body_length/2 - 10 + i*5])\n        cube([6, 8, 4]);\n    }\n    \n    // Switch\n    translate([0, -body_diameter/2 - 5, body_length/2])\n    cube([8, 4, 10]);\n    \n    // Handle grip texture\n    for(i = [5:5:handle_length-10]) {\n        rotate([90, 0, 0])\n        translate([0, -body_diameter/2 - handle_diameter/2 - 5, -i])\n        difference() {\n            cylinder(h = 2, d = handle_diameter + 2);\n            cylinder(h = 3, d = handle_diameter - 2);\n        }\n    }\n    \n    // Rear grill detail\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = 3, d = body_diameter - 2);\n        for(i = [0:8]) {\n            rotate([0, 0, i * 22.5])\n            translate([0, 0, -1])\n            cube([body_diameter - 4, 1.5, 5]);\n        }\n    }\n    \n    // Power cord\n    translate([0, -body_diameter/2 - handle_diameter/2 - 5, -handle_length - 10])\n    rotate([90, 0, 0])\n    cylinder(h = 30, d = 4);\n}\n\n// Render the complete hairdryer\nhairdryer();",
    "renders": true
  },
  {
    "household_item": "straightener",
    "openscad_code": "// Hair Straightener – Realistic / Medium complexity\n// Overall length ≈ 85 mm, printable without supports\n\n// Basic parameters\nhandle_d = 14;               // Handle diameter\nhandle_l = 70;               // Handle length\nplate_w = 25;                // Straightening plate width\nplate_d = 65;                // Plate depth\nplate_t = 4;                 // Plate thickness\ngap = 3;                     // Gap between plates when closed\nhinge_r = 3;                 // Hinge pin radius\nwall_t = 1.5;                // Minimum printable wall thickness\n\n// Main assembly\ndifference() {\n    union() {\n        // ===== Lower arm =====\n        translate([0,0,handle_l/2 - 5])\n            rotate([90,0,0])\n                handle();\n\n        translate([0,0,plate_t/2 + gap])\n            lower_plate();\n\n        // ===== Upper arm =====\n        translate([0,0,-(handle_l/2 - 5)])\n            rotate([-90,0,0])\n                handle();\n\n        translate([0,0,-(plate_t/2)])\n            upper_plate();\n\n        // ===== Hinge =====\n        hinge();\n    }\n\n    // ===== Cable hole =====\n    translate([0,handle_l/2 + 5,0])\n        rotate([0,90,0])\n            cylinder(h = handle_d, r = 3.5, $fn = 20);\n}\n\n// ===== Handle module =====\nmodule handle() {\n    difference() {\n        // Main grip body\n        cylinder(h = handle_l, r = handle_d/2, $fn = 32);\n\n        // Grooves for grip\n        for(i = [1:4]) {\n            translate([0,0,i*(handle_l/5)])\n                cylinder(h = 1.5, r1 = handle_d/2, r2 = handle_d/2 - 1, $fn = 32);\n        }\n    }\n\n    // Control button\n    translate([0,handle_d/2 + 0.5,handle_l*0.7])\n        cube([8,2,4], center = true);\n}\n\n// ===== Lower straightening plate =====\nmodule lower_plate() {\n    difference() {\n        // Outer shell\n        cube([plate_d, plate_w, plate_t], center = true);\n\n        // Heated ceramic surface inset\n        translate([0,0,plate_t/2 - 0.5])\n            cube([plate_d - 4, plate_w - 4, 1], center = true);\n    }\n\n    // Alignment pins\n    for(p = [-1,1]) {\n        translate([p*(plate_d/2 - 5), p*(plate_w/2 - 4), plate_t/2 + 1])\n            cylinder(h = 2, r = 1.5, $fn = 12);\n    }\n}\n\n// ===== Upper straightening plate =====\nmodule upper_plate() {\n    difference() {\n        cube([plate_d, plate_w, plate_t], center = true);\n\n        // Heated ceramic surface inset\n        translate([0,0,-(plate_t/2 - 0.5)])\n            cube([plate_d - 4, plate_w - 4, 1], center = true);\n\n        // Pin holes\n        for(p = [-1,1]) {\n            translate([p*(plate_d/2 - 5), p*(plate_w/2 - 4), -plate_t/2 - 1])\n                cylinder(h = 4, r = 1.6, $fn = 12);\n        }\n    }\n}\n\n// ===== Hinge module =====\nmodule hinge() {\n    // Lower hinge barrel\n    translate([0,0,0])\n        difference() {\n            cylinder(h = plate_w, r = hinge_r + wall_t, center = true, $fn = 24);\n            cylinder(h = plate_w + 1, r = hinge_r, center = true, $fn = 24);\n        }\n\n    // Upper hinge barrel\n    translate([0,0,0])\n        difference() {\n            rotate([0,90,0])\n                cylinder(h = plate_w, r = hinge_r + wall_t, center = true, $fn = 24);\n            rotate([0,90,0])\n                cylinder(h = plate_w + 1, r = hinge_r, center = true, $fn = 24);\n        }\n\n    // Pin (split for printability)\n    translate([0,0,0])\n        rotate([0,90,0])\n            cylinder(h = plate_w + 2, r = hinge_r - 0.2, center = true, $fn = 24);\n}",
    "renders": true
  },
  {
    "household_item": "curlers",
    "openscad_code": "// Realistic 3D printable hair curler (medium complexity)\n// Overall length ~80 mm, diameter ~25 mm\n\n$fn = 36;  // Smooth curves\n\n// Main parameters\nlength = 80;\nouter_dia = 25;\nwall = 1.5;        // 3D-print safe wall thickness\ngrip = 3;          // Height of grip ridges\nridge_w = 1.5;     // Width of each ridge\n\n// Central hollow tube\nmodule tube() {\n    difference() {\n        cylinder(h = length, d = outer_dia, center = true);\n        translate([0, 0, 0])\n            cylinder(h = length + 2, d = outer_dia - 2*wall, center = true);\n    }\n}\n\n// Grip ridges along the body\nmodule grip_ridges() {\n    ridge_count = floor(length / (ridge_w * 2));\n    for (i = [0 : ridge_count - 1]) {\n        translate([0, 0, -length/2 + i*2*ridge_w + ridge_w/2])\n            difference() {\n                // Outer ridge ring\n                cylinder(h = ridge_w, d1 = outer_dia + 2*grip, d2 = outer_dia + 2*grip);\n                // Remove inner part\n                cylinder(h = ridge_w + 0.1, d = outer_dia, center = true);\n            }\n    }\n}\n\n// Snap clip\nmodule clip() {\n    clip_len = length * 0.85;\n    clip_thick = 2;\n    radius = outer_dia/2 + 2;\n    \n    difference() {\n        // Main arc body\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                linear_extrude(height = clip_thick, center = true, convexity = 4)\n                    arc(radius, 200);\n\n        // Inner clearance arc\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                linear_extrude(height = clip_thick + 0.2, center = true)\n                    arc(radius - wall - 2, 200);\n\n        // Finger tab\n        translate([0, -radius - 3, 0])\n            cube([8, 6, clip_thick], center = true);\n    }\n}\n\n// Helper for generating arc polygon\nmodule arc(r, angle) {\n    step = 2;\n    pts = [for (a = [0 : step : angle]) [r*cos(a-90), r*sin(a-90)]];\n    polygon(points = concat([[0,0]], pts, [[0,0]]));\n}\n\n// End caps to avoid overhangs\nmodule end_caps() {\n    // Top cap\n    translate([0, 0, length/2])\n        cylinder(h = wall, d = outer_dia, center = true);\n    // Bottom cap\n    translate([0, 0, -length/2])\n        cylinder(h = wall, d = outer_dia, center = true);\n}\n\n// Assemble curler\nunion() {\n    tube();\n    grip_ridges();\n    end_caps();\n}\n\n// Render the clip separately so it can be printed flat\n// Uncomment next line to include clip in same render\n// translate([0, 0, length/2 + 10]) rotate([0, 0, 180]) clip();",
    "renders": true
  },
  {
    "household_item": "epilator",
    "openscad_code": "// Epilator Model - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm long, 35mm wide, 40mm tall\n\n// Main body parameters\nbody_len = 70;\nbody_wid = 30;\nbody_ht  = 35;\nwall     = 2;\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-body_len/2, 0, 0])\n                sphere(d = body_wid);\n            translate([body_len/2, 0, 0])\n                sphere(d = body_wid);\n        }\n        // Hollow inside\n        scale([0.8, 0.8, 0.8])\n            hull() {\n                translate([-body_len/2, 0, 0])\n                    sphere(d = body_wid);\n                translate([body_len/2, 0, 0])\n                    sphere(d = body_wid);\n            }\n    }\n}\n\nmodule grip_ridges() {\n    // Rubber grip pattern on sides\n    for (i = [-1, 1]) {\n        translate([0, i*body_wid/2, 0])\n            for (z = [-body_ht/2+5:3:body_ht/2-5]) {\n                translate([0, 0, z])\n                    cube([body_len-10, wall, 1], center = true);\n            }\n    }\n}\n\nmodule power_button() {\n    translate([body_len/2-15, 0, body_ht/2-5])\n        difference() {\n            cylinder(h = 3, d = 8, $fn = 30);\n            translate([0, 0, -1])\n                cube([9, 3, 5], center = true);\n        }\n}\n\nmodule epilator_head() {\n    // Rotating tweezer drum\n    difference() {\n        cylinder(h = 15, d = 22, $fn = 60);\n        for (i = [0:45:359])\n            rotate([0, 0, i])\n                translate([8, 0, 0])\n                    cube([2, 1, 15], center = true);\n    }\n}\n\nmodule head_mount() {\n    // Mounting ring for head\n    difference() {\n        cylinder(h = 8, d = 26, $fn = 60);\n        cylinder(h = 10, d = 20, $fn = 60);\n    }\n}\n\nmodule charging_port() {\n    translate([-body_len/2+5, 0, -body_ht/2+5])\n        cube([6, 10, 6], center = true);\n}\n\nmodule led_indicator() {\n    translate([body_len/2-20, body_wid/2+1, body_ht/2-8])\n        sphere(d = 3);\n}\n\n// Assembly\nunion() {\n    main_body();\n    grip_ridges();\n    power_button();\n    \n    // Epilator head assembly\n    translate([body_len/2+10, 0, 0])\n        rotate([90, 0, 0])\n            union() {\n                head_mount();\n                translate([0, 0, 10])\n                    epilator_head();\n            }\n    \n    charging_port();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "household_item": "toothbrush",
    "openscad_code": "// Realistic Toothbrush - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Handle parameters\nhandle_length = 75;\nhandle_width = 12;\nhandle_height = 12;\nhandle_curve = 20;\n\n// Head parameters\nhead_length = 30;\nhead_width = 10;\nhead_height = 8;\n\n// Bristle parameters\nbristle_rows = 4;\nbristle_cols = 6;\nbristle_diameter = 1.2;\nbristle_height = 12;\nbristle_spacing = 2.5;\n\n// Grip texture parameters\ngrip_rings = 8;\ngrip_width = 1.5;\ngrip_depth = 0.5;\n\nmodule handle() {\n    // Main handle body with ergonomic curve\n    union() {\n        // Tapered handle\n        hull() {\n            translate([0, 0, handle_height/2])\n                cube([handle_length/3, handle_width*0.8, handle_height*0.8], center=true);\n            translate([handle_length*0.7, 0, handle_height/2])\n                cube([handle_length/3, handle_width, handle_height], center=true);\n        }\n        \n        // Curved neck transition\n        translate([handle_length-5, 0, handle_height/2+handle_curve/2])\n            rotate([0, -15, 0])\n            cube([10, handle_width*0.9, handle_height*0.9], center=true);\n    }\n}\n\nmodule grip_texture() {\n    // Rubber grip rings\n    for(i = [1:grip_rings]) {\n        translate([i*handle_length/(grip_rings+1), 0, handle_height/2])\n            difference() {\n                cylinder(h=grip_width, d=handle_width+0.5, center=true);\n                cylinder(h=grip_width+0.1, d=handle_width-grip_depth*2, center=true);\n            }\n    }\n}\n\nmodule head() {\n    // Toothbrush head with bristle base\n    translate([handle_length+head_length/2-5, 0, handle_height/2+handle_curve])\n        rotate([0, -15, 0])\n        union() {\n            // Main head\n            cube([head_length, head_width, head_height], center=true);\n            \n            // Bristle base\n            translate([head_length/2-2, 0, head_height/2])\n                cube([4, head_width-2, 2], center=true);\n        }\n}\n\nmodule bristles() {\n    // Individual bristles in rows\n    for(row = [0:bristle_rows-1]) {\n        for(col = [0:bristle_cols-1]) {\n            translate([\n                handle_length+head_length-4,\n                (col-(bristle_cols-1)/2)*bristle_spacing,\n                handle_height/2+handle_curve+head_height/2+bristle_height/2\n            ]) {\n                rotate([0, -15, 0])\n                    cylinder(h=bristle_height, d=bristle_diameter, $fn=8);\n            }\n        }\n    }\n}\n\nmodule toothbrush() {\n    union() {\n        // Main body\n        handle();\n        \n        // Grip texture\n        grip_texture();\n        \n        // Head\n        head();\n        \n        // Bristles\n        bristles();\n    }\n}\n\n// Render the complete toothbrush\ntoothbrush();",
    "renders": true
  },
  {
    "household_item": "waterpik",
    "openscad_code": "// Waterpik Water Flosser – realistic medium-complexity model\n// Overall size ≈ 80 mm tall, 3D-printable with 1 mm wall thickness\n\n$fn = 36;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 25]) cylinder(h = 50, r1 = 18, r2 = 22);\n            translate([0, 0, 0])  cylinder(h = 25, r1 = 20, r2 = 18);\n        }\n        \n        // Hollow out\n        translate([0, 0, 1.5]) cylinder(h = 47, r = 16.5);\n    }\n}\n\n// Water reservoir tank\nmodule reservoir() {\n    difference() {\n        // Tank body\n        translate([0, 0, -20]) cylinder(h = 22, r = 25);\n        \n        // Inner cavity\n        translate([0, 0, -19]) cylinder(h = 20, r = 23);\n        \n        // Top opening for body\n        translate([0, 0, 2]) cylinder(h = 3, r = 19);\n    }\n}\n\n// Control button panel\nmodule buttons() {\n    for (i = [0:1]) {\n        translate([20 + i * 8, -5, 45]) cube([5, 10, 2]);\n    }\n}\n\n// Tip holder at top\nmodule tipHolder() {\n    difference() {\n        // Cylinder base\n        translate([0, 0, 75]) cylinder(h = 8, r = 6);\n        \n        // Central hole for tip\n        translate([0, 0, 74]) cylinder(h = 10, r = 2.5);\n    }\n}\n\n// Water nozzle tip\nmodule nozzleTip() {\n    union() {\n        translate([0, 0, 83]) cylinder(h = 25, r = 2.5);\n        translate([0, 0, 108]) cylinder(h = 5, r = 1.5);\n    }\n}\n\n// Charging port at rear\nmodule chargingPort() {\n    translate([-21, 0, 10]) cube([3, 8, 6]);\n}\n\n// Side ridges for grip\nmodule gripRidges() {\n    for (i = [0:5]) {\n        rotate([0, 0, 30 + i * 12]) {\n            translate([0, 19, 20]) cube([1, 3, 35]);\n        }\n    }\n}\n\n// Assemble the Waterpik\nunion() {\n    // Main components\n    body();\n    reservoir();\n    \n    // Details\n    buttons();\n    tipHolder();\n    nozzleTip();\n    chargingPort();\n    gripRidges();\n}",
    "renders": true
  },
  {
    "household_item": "whitener",
    "openscad_code": "// Whitener bottle with cap and tip\n// Overall height ~75mm, base ~35mm diameter\n\n$fn = 36;  // Smooth curves\n\n// Main module\nmodule whitener() {\n    // Bottle body\n    union() {\n        // Outer body – slightly tapered cylinder\n        cylinder(h = 55, r1 = 17, r2 = 15, center = false);\n\n        // Shoulder transition to neck\n        translate([0, 0, 55])\n            cylinder(h = 5, r1 = 15, r2 = 7, center = false);\n\n        // Neck\n        translate([0, 0, 60])\n            cylinder(h = 8, r = 7, center = false);\n\n        // Cap base\n        translate([0, 0, 68])\n            cylinder(h = 4, r = 9, center = false);\n\n        // Cap top\n        translate([0, 0, 72])\n            cylinder(h = 3, r = 8.5, center = false);\n\n        // Tip\n        translate([0, 0, 75])\n            cylinder(h = 4, r1 = 2.5, r2 = 1.5, center = false);\n    }\n\n    // Internal hollow – shell thickness 1.5mm\n    difference() {\n        // Start with solid body\n        union() {\n            cylinder(h = 55, r1 = 17 - 1.5, r2 = 15 - 1.5, center = false);\n            translate([0, 0, 55])\n                cylinder(h = 5, r1 = 15 - 1.5, r2 = 7 - 1.5, center = false);\n            translate([0, 0, 60])\n                cylinder(h = 8, r = 7 - 1.5, center = false);\n        }\n        // Cut off bottom to open\n        translate([0, 0, -0.1])\n            cube([40, 40, 0.2], center = true);\n    }\n\n    // Cap grip rings\n    for (i = [0 : 1 : 3]) {\n        translate([0, 0, 68.5 + i * 0.8])\n            difference() {\n                cylinder(h = 0.4, r = 9, center = false);\n                cylinder(h = 0.5, r = 8.2, center = false);\n            }\n    }\n\n    // Label recess\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h = 25, r = 17.1, center = false);\n            cylinder(h = 25.2, r = 16, center = false);\n        }\n}\n\n// Render\nwhitener();",
    "renders": true
  },
  {
    "household_item": "diffuser",
    "openscad_code": "// Medium-complexity realistic essential-oil diffuser\n// Overall size ~70 mm diameter × 45 mm tall\n// All walls ≥1.5 mm for FDM printing\n\n$fn = 32;\n\n// Main body parameters\nbody_d = 70;\nbody_h = 30;\nwall_t = 2;\nwater_level = 10;\n\n// Lid / mist outlet\nlid_d = body_d;\nlid_h = 8;\nvent_d = 20;\nvent_h = 5;\n\n// Feet\nfoot_d = 8;\nfoot_h = 5;\nn_feet = 4;\n\n// Interior ribs to break surface tension\nrib_w = 1.5;\nrib_h = 3;\nn_ribs = 12;\n\n// Module for one foot\nmodule foot() {\n    cylinder(h = foot_h, d1 = foot_d, d2 = foot_d * 0.7, $fn = 16);\n}\n\n// Module for one rib\nmodule rib() {\n    translate([0, 0, water_level / 2])\n        cube([body_d - wall_t * 2, rib_w, rib_h], center = true);\n}\n\n// Main body shell\ndifference() {\n    // Outer shell\n    cylinder(h = body_h, d = body_d);\n    \n    // Hollow interior\n    translate([0, 0, -0.1])\n        cylinder(h = body_h + 0.2, d = body_d - wall_t * 2);\n    \n    // Water reservoir cavity\n    translate([0, 0, body_h - water_level - 0.1])\n        cylinder(h = water_level + 0.2, d = body_d - wall_t * 2);\n}\n\n// Feet\nfor (i = [0 : n_feet - 1]) {\n    rotate([0, 0, i * 360 / n_feet])\n        translate([body_d / 2 * 0.7, 0, 0])\n            foot();\n}\n\n// Internal ribs\nfor (i = [0 : n_ribs - 1]) {\n    rotate([0, 0, i * 360 / n_ribs])\n        rib();\n}\n\n// Cable exit slot\ntranslate([body_d / 2 - wall_t / 2, 0, body_h / 2])\n    rotate([0, 90, 0])\n        cylinder(h = wall_t + 0.2, d = 6, $fn = 12);\n\n// Lid assembly\ntranslate([0, 0, body_h])\n    difference() {\n        union() {\n            // Lid disc\n            cylinder(h = lid_h, d = lid_d);\n            \n            // Raised vent stack\n            translate([0, 0, lid_h])\n                cylinder(h = vent_h, d = vent_d + 6);\n        }\n        \n        // Mist outlet hole\n        translate([0, 0, lid_h - 0.1])\n            cylinder(h = vent_h + 0.2, d = vent_d);\n        \n        // Inner lip to center lid on body\n        translate([0, 0, -0.1])\n            cylinder(h = 3 + 0.2, d = body_d - wall_t * 2);\n    }\n\n// Fill line indicator\ntranslate([0, body_d / 2 - wall_t - 0.5, body_h - water_level + 0.5])\n    cube([20, wall_t, 0.5]);",
    "renders": true
  },
  {
    "household_item": "nebulizer",
    "openscad_code": "// Nebulizer - Realistic Style, Medium Complexity\n// Overall dimensions: 60mm x 40mm x 80mm\n\n$fn = 32;\n\n// Main body dimensions\nbody_width = 40;\nbody_depth = 30;\nbody_height = 60;\n\n// Base module for the main body\nmodule main_body() {\n    difference() {\n        // Main rounded body\n        hull() {\n            translate([0, 0, body_height/2])\n                cylinder(h = body_height, d1 = body_width, d2 = body_width*0.9);\n            translate([0, 0, body_height/4])\n                sphere(d = body_width*1.1);\n        }\n        \n        // Top chamber cavity\n        translate([0, 0, body_height*0.7])\n            cylinder(h = body_height*0.4, d = body_width*0.7);\n            \n        // Bottom cavity for electronics\n        translate([0, 0, body_height*0.15])\n            cube([body_width*0.8, body_depth*0.8, body_height*0.3], center = true);\n    }\n}\n\n// Air compressor housing\nmodule compressor_housing() {\n    translate([body_width/2 + 10, 0, body_height*0.3]) {\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 25, d = 15);\n                translate([0, 0, -1])\n                    cylinder(h = 27, d = 12);\n            }\n    }\n}\n\n// Medicine cup\nmodule medicine_cup() {\n    translate([0, body_depth/2 + 15, body_height*0.8]) {\n        difference() {\n            // Cup body\n            cylinder(h = 12, d1 = 20, d2 = 18);\n            \n            // Inner cavity\n            translate([0, 0, 2])\n                cylinder(h = 10, d1 = 16, d2 = 14);\n        }\n        \n        // Rim\n        translate([0, 0, 12])\n            cylinder(h = 2, d = 22);\n    }\n}\n\n// Mouthpiece\nmodule mouthpiece() {\n    translate([0, body_depth/2 + 35, body_height*0.8 + 6]) {\n        rotate([-30, 0, 0])\n            difference() {\n                // Main mouthpiece\n                cylinder(h = 15, d1 = 12, d2 = 8);\n                \n                // Air channel\n                translate([0, 0, -1])\n                    cylinder(h = 17, d = 6);\n            }\n    }\n}\n\n// Tubing connector\nmodule tube_connector() {\n    translate([body_width/2 + 15, 0, body_height*0.4]) {\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 8, d = 8);\n                cylinder(h = 10, d = 4);\n            }\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    for(i = [0:2]) {\n        translate([body_width*0.3, -body_depth/2 - 3 - i*6, body_height*0.5 + i*5]) {\n            cylinder(h = 4, d = 6);\n        }\n    }\n}\n\n// Air vents\nmodule air_vents() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([body_width/2 - 5, 0, body_height*0.3])\n                cube([8, 2, 10]);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    compressor_housing();\n    medicine_cup();\n    mouthpiece();\n    tube_connector();\n    control_buttons();\n    air_vents();\n    \n    // Power indicator LED\n    translate([body_width*0.3, -body_depth/2 - 2, body_height*0.7])\n        sphere(d = 3);\n}",
    "renders": true
  },
  {
    "household_item": "massager",
    "openscad_code": "// Handheld Massage Stick – realistic, medium complexity\n// Approx. 90 mm long, no steep overhangs, 2 mm wall thickness\n$fn = 36;\n\n// Main assembly -------------------------------------------------\nmodule massager() {\n    handle();\n    neck();\n    head();\n    spheres_row();\n}\n\n// Handle --------------------------------------------------------\nmodule handle() {\n    difference() {\n        // Outer shell\n        rotate([0, 90, 0])\n            cylinder(h = 80, d1 = 28, d2 = 24, center = true);\n        \n        // Hollow core\n        rotate([0, 90, 0])\n            cylinder(h = 82, d1 = 24, d2 = 20, center = true);\n        \n        // Grip grooves\n        for(i = [-30:15:30])\n            translate([i, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 2, d = 30, center = true);\n    }\n}\n\n// Neck ----------------------------------------------------------\nmodule neck() {\n    translate([40, 0, 0])\n        difference() {\n            rotate([0, 90, 0])\n                cylinder(h = 15, d = 20, center = true);\n            rotate([0, 90, 0])\n                cylinder(h = 17, d = 16, center = true);\n        }\n}\n\n// Massage head --------------------------------------------------\nmodule head() {\n    translate([47, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                // Outer bulb\n                sphere(d = 32);\n                // Inner cavity\n                sphere(d = 28);\n                // Flat contact face\n                translate([0, 0, 12])\n                    cube([40, 40, 20], center = true);\n            }\n}\n\n// Row of small massage spheres ---------------------------------\nmodule spheres_row() {\n    translate([60, 0, 0])\n        for(i = [-1:1]) {\n            translate([0, 0, i * 10])\n                sphere(d = 8);\n        }\n}\n\nmassager();",
    "renders": true
  },
  {
    "household_item": "tens",
    "openscad_code": "// TENS Unit - Realistic Style, Medium Complexity\n// 3D printable model with functional details\n\n$fn = 50;\nwall_thickness = 1.2;\n\n// Main body dimensions\nbody_width = 40;\nbody_height = 80;\nbody_depth = 18;\n\n// Screen dimensions\nscreen_width = 30;\nscreen_height = 18;\nscreen_depth = 1.5;\n\n// Button dimensions\nbutton_width = 6;\nbutton_height = 3;\nbutton_depth = 1;\n\n// Electrode connector dimensions\nconnector_diameter = 3.5;\nconnector_height = 2.5;\n\n// Battery compartment\nbattery_width = 25;\nbattery_height = 35;\nbattery_depth = 8;\n\nmodule main_body() {\n    difference() {\n        // Outer shell with rounded edges\n        hull() {\n            translate([0, 0, body_depth/2])\n                cube([body_width, body_height, body_depth], center=true);\n            translate([0, 0, body_depth/2-2])\n                scale([0.9, 0.9, 1])\n                cube([body_width, body_height, body_depth], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_depth/2])\n            cube([body_width-wall_thickness*2, body_height-wall_thickness*2, body_depth-wall_thickness], center=true);\n        \n        // Screen cutout\n        translate([0, body_height/4, body_depth/2])\n            cube([screen_width+2, screen_height+2, screen_depth+1], center=true);\n        \n        // Button cutouts\n        for(i = [0:3]) {\n            translate([-body_width/4 + i*body_width/4, -body_height/4, body_depth/2])\n                cube([button_width+1, button_height+1, button_depth+1], center=true);\n        }\n        \n        // Electrode connector holes\n        translate([body_width/2-3, body_height/3, body_depth/2])\n            rotate([0, 90, 0])\n            cylinder(h=body_width/2, d=connector_diameter+0.5, center=true);\n        \n        translate([body_width/2-3, -body_height/3, body_depth/2])\n            rotate([0, 90, 0])\n            cylinder(h=body_width/2, d=connector_diameter+0.5, center=true);\n    }\n}\n\nmodule screen() {\n    translate([0, body_height/4, body_depth/2+0.1])\n        cube([screen_width, screen_height, screen_depth], center=true);\n    \n    // Screen details\n    difference() {\n        translate([0, body_height/4, body_depth/2+screen_depth/2+0.1])\n            cube([screen_width-2, screen_height-4, 0.5], center=true);\n        \n        // Display segments\n        for(i = [0:2]) {\n            for(j = [0:1]) {\n                translate([-screen_width/4 + i*screen_width/4, body_height/4 + j*5 - 2.5, body_depth/2+screen_depth+0.2])\n                    cube([2, 1, 0.3], center=true);\n            }\n        }\n    }\n}\n\nmodule buttons() {\n    // Power button\n    translate([0, -body_height/4, body_depth/2+0.1])\n        cube([button_width+2, button_height, button_depth], center=true);\n    \n    // Control buttons\n    for(i = [-1.5:1.5:3]) {\n        translate([i*body_width/4, -body_height/4, body_depth/2+0.1])\n            cube([button_width, button_height, button_depth], center=true);\n    }\n}\n\nmodule electrode_connectors() {\n    // Left connector\n    translate([body_width/2-1, body_height/3, body_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=connector_height, d=connector_diameter, center=true);\n    \n    // Right connector\n    translate([body_width/2-1, -body_height/3, body_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=connector_height, d=connector_diameter, center=true);\n    \n    // Connector details\n    for(pos = [[body_height/3, 1], [-body_height/3, -1]]) {\n        translate([body_width/2+1, pos[0], body_depth/2])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=connector_height+1, d=connector_diameter+2, center=true);\n                cylinder(h=connector_height+2, d=connector_diameter, center=true);\n            }\n    }\n}\n\nmodule battery_compartment() {\n    // Compartment door\n    translate([0, body_height/2-5, body_depth/2])\n        difference() {\n            cube([battery_width+4, battery_height+4, 1], center=true);\n            translate([0, 0, -0.5])\n                cube([battery_width, battery_height, 2], center=true);\n        }\n    \n    // Battery outline\n    translate([0, body_height/2-5, body_depth/2-0.5])\n        cube([battery_width-4, battery_height-6, 0.5], center=true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    color(\"black\") screen();\n    color(\"gray\") buttons();\n    color(\"silver\") electrode_connectors();\n    color(\"darkgray\") battery_compartment();\n}\n\n// Clip\ntranslate([-body_width/2-2, 0, body_depth/2])\n    difference() {\n        hull() {\n            cube([4, body_height/3, 10], center=true);\n            translate([0, 0, -5])\n                cube([4, body_height/3-10, 5], center=true);\n        }\n        translate([0, 0, 0])\n            cube([2, body_height/3-2, 8], center=true);\n    }",
    "renders": true
  },
  {
    "household_item": "bloodpressure",
    "openscad_code": "// Realistic 3D-printable blood-pressure cuff (sphygmomanometer) ~90 mm long\n// Medium complexity – recognizable, printable, no overhangs\n\n$fn = 36;           // Smoother curves\nwall = 1.5;         // Printable wall thickness\nscale = 0.9;        // Global size factor so model ≈ 90 mm long\n\nmodule cuff_body() {\n    // Soft fabric cuff rolled into a hollow cylinder\n    difference() {\n        cylinder(h = 50*scale, d = 65*scale, center = true);\n        translate([0,0,-1])\n            cylinder(h = 52*scale, d = 65*scale - 2*wall, center = true);\n    }\n}\n\nmodule cuff_edges() {\n    // Thicker rim edges for realism\n    for(z = [-25*scale, 25*scale])\n        translate([0,0,z])\n            cylinder(h = 2*wall, d = 65*scale + wall);\n}\n\nmodule velcro_straps() {\n    // Two hook-and-loop strips on cuff\n    for(a = [0, 180]) {\n        rotate([0,0,a])\n            translate([0, 32.5*scale, 0])\n                cube([15*scale, 3*wall, 50*scale], center = true);\n    }\n}\n\nmodule bulb() {\n    // Rubber inflation bulb with one-way valve stub\n    union() {\n        // Bulb body\n        scale([1, 1.2, 1])\n            sphere(d = 22*scale);\n        // Valve stub\n        translate([0, 12*scale, 0])\n            rotate([90,0,0])\n                cylinder(h = 12*scale, d1 = 6*scale, d2 = 5*scale);\n    }\n}\n\nmodule tube() {\n    // Flexible rubber tube from cuff to bulb\n    hull() {\n        translate([28*scale, 0, 0])\n            sphere(d = 5*scale);\n        translate([-28*scale, 0, 0])\n            sphere(d = 5*scale);\n    }\n}\n\nmodule gauge() {\n    // Realistic aneroid gauge housing\n    difference() {\n        // Main housing\n        cylinder(h = 12*scale, d = 35*scale);\n        // Recessed face\n        translate([0,0,-0.5])\n            cylinder(h = 13*scale, d = 28*scale);\n    }\n    // Dial needle\n    color(\"red\")\n        rotate([0,0,30])\n            translate([0,0,12*scale-0.2])\n                cube([0.5, 12*scale, 0.5], center = true);\n    // Tube connector stub\n    translate([0, 17.5*scale, 0])\n        rotate([90,0,0])\n            cylinder(h = 8*scale, d = 6*scale);\n}\n\nmodule assembly() {\n    // Position cuff horizontally\n    rotate([90,0,0])\n        cuff_body();\n    rotate([90,0,0])\n        cuff_edges();\n    rotate([90,0,0])\n        velcro_straps();\n\n    // Tube runs along cuff edge\n    translate([0, 0, 25*scale])\n        rotate([0,90,0])\n            tube();\n\n    // Bulb at end of tube\n    translate([33*scale, 0, 25*scale])\n        rotate([0,90,0])\n            bulb();\n\n    // Gauge attached near cuff center\n    translate([-28*scale, 0, 0])\n        rotate([0,90,0])\n            gauge();\n}\n\n// Render the complete model\nassembly();",
    "renders": true
  },
  {
    "household_item": "glucometer",
    "openscad_code": "// Glucometer model - medium complexity realistic style\n// Overall dimensions ~80x55x20mm\n\n$fn = 36;\n\n// Main body shell with rounded edges\nmodule body() {\n    difference() {\n        // Main rounded shell\n        minkowski() {\n            cube([70, 45, 15], center=true);\n            sphere(2.5);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n        minkowski() {\n            cube([64, 39, 12], center=true);\n            sphere(1.5);\n        }\n        \n        // Test strip slot\n        translate([32.5, -20, 0])\n        rotate([0, 90, 0])\n        cylinder(h=40, d=3.5, center=true);\n        \n        // Display window\n        translate([-10, 0, 8.5])\n        cube([30, 25, 2], center=true);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"darkblue\")\n    translate([-10, 0, 9.5])\n    cube([26, 21, 0.5], center=true);\n}\n\n// Buttons module\nmodule buttons() {\n    // Power button\n    translate([25, 15, 9])\n    cylinder(h=2, d=6);\n    \n    // Memory button\n    translate([25, 0, 9])\n    cylinder(h=2, d=6);\n    \n    // Set button\n    translate([25, -15, 9])\n    cylinder(h=2, d=6);\n}\n\n// Test strip guide rails\nmodule guide_rails() {\n    for(y = [-18, 18]) {\n        translate([32.5, y, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=10, d=4);\n            translate([0, 0, -1])\n            cylinder(h=12, d=3.5);\n        }\n    }\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    translate([0, 20, -8])\n    difference() {\n        cube([30, 10, 1.5], center=true);\n        translate([0, 0, -0.5])\n        cube([28, 8, 2], center=true);\n    }\n    \n    // Screws\n    for(x = [-10, 10]) {\n        translate([x, 20, -7])\n        cylinder(h=1, d=2);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    translate([-35, 20, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cube([12, 6, 4], center=true);\n        translate([0, 0, 1])\n        cube([10, 4, 4], center=true);\n    }\n}\n\n// Grip texture on sides\nmodule grip_texture() {\n    for(i = [-20:5:20]) {\n        translate([35.5, i, 0])\n        rotate([0, 90, 0])\n        cylinder(h=1, d=0.8);\n    }\n    \n    for(i = [-20:5:20]) {\n        translate([-35.5, i, 0])\n        rotate([0, 90, 0])\n        cylinder(h=1, d=0.8);\n    }\n}\n\n// Assemble the glucometer\nunion() {\n    body();\n    display();\n    buttons();\n    guide_rails();\n    battery_cover();\n    usb_port();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "household_item": "pulseoximeter",
    "openscad_code": "// Pulse oximeter - fingertip style\n// External size: ~65 mm long × 35 mm wide × 30 mm high\n\n$fn = 50;        // Smooth curves for printing\nwall = 1.8;      // 3D-print friendly wall thickness\ngap  = 0.3;      // Print clearance between moving parts\n\nmodule shell_half(h) {\n    // Outer half-shell\n    difference() {\n        hull() {\n            translate([0, 0, h/2]) cube([60, 30, h], center=true);\n            translate([0, 0, h/2-10]) sphere(d=33);\n        }\n        // Hollow inside\n        translate([0, 0, h/2-0.5]) cube([60-wall*2, 30-wall*2, h+2], center=true);\n        translate([0, 0, h/2-10]) sphere(d=33-wall*2);\n    }\n}\n\nmodule top_shell() {\n    shell_half(15);\n}\n\nmodule bottom_shell() {\n    mirror([0,0,1]) shell_half(15);\n}\n\nmodule finger_tunnel() {\n    // Cavity for finger\n    color(\"LightBlue\", 0.3)\n    difference() {\n        hull() {\n            sphere(d=18);\n            translate([20, 0, 0]) sphere(d=18);\n        }\n        // Remove bottom half for opening\n        translate([0, 0, -15]) cube([50, 50, 15], center=true);\n    }\n}\n\nmodule display_window() {\n    // OLED window on top shell\n    difference() {\n        translate([-25, 0, 7.5]) cube([16, 22, 1]);\n        translate([-25, 0, 7.5+0.2]) cube([15, 21, 0.6], center=true);\n    }\n}\n\nmodule button() {\n    // Single push button\n    color(\"Gray\")\n    translate([20, -10, 7.5])\n    cylinder(d=6, h=2, $fn=20);\n}\n\nmodule spring_pin() {\n    // Hinge pin for shell\n    color(\"Silver\")\n    rotate([90,0,0])\n    cylinder(d=3, h=32, center=true);\n}\n\nmodule battery_box() {\n    // CR2032 coin cell compartment\n    difference() {\n        translate([15, 8, -6])\n        cube([20, 12, 6]);\n        translate([15, 8, -5])\n        cube([18, 10, 4]);\n    }\n}\n\nmodule sensor_pads() {\n    // LEDs & photodiodes pairs\n    for(side=[-1,1]) {\n        translate([0, side*10, 0])\n        color(\"Red\", 0.7)\n        sphere(d=5);\n    }\n}\n\n// Assembly\nunion() {\n    // Top half\n    top_shell();\n\n    // Bottom half\n    translate([0, 0, gap])\n    bottom_shell();\n\n    // Finger cavity\n    translate([5, 0, 0])\n    finger_tunnel();\n\n    // Display window cutout\n    display_window();\n\n    // Button\n    button();\n\n    // Battery compartment in bottom half\n    battery_box();\n\n    // Sensor pads\n    sensor_pads();\n\n    // Hinge pins (one on each side)\n    translate([-30, 0, 0])\n    spring_pin();\n    translate([30, 0, 0])\n    spring_pin();\n}",
    "renders": true
  },
  {
    "household_item": "babyphone",
    "openscad_code": "// Babyphone – Medium-realistic style, 3D-printable, ~70 mm tall\n// All overhangs ≤45°, walls ≥1.2 mm for FDM printing\n\n$fn = 32;               // Global cylinder smoothness\n\n// Overall dimensions\nphone_w = 38;           // Body width\nphone_h = 70;           // Body height\nphone_d = 18;           // Body depth\nwall_t  = 1.5;          // Wall thickness\n\nmodule rounded_box(w, h, d, r, t) {\n    // Hollow rounded box with constant wall thickness\n    difference() {\n        minkowski() {\n            cube([w-2*r, h-2*r, d-2*r], center=true);\n            sphere(r);\n        }\n        minkowski() {\n            cube([w-2*r-2*t, h-2*r-2*t, d-2*r-2*t], center=true);\n            sphere(r);\n        }\n    }\n}\n\nmodule main_body() {\n    difference() {\n        // Exterior shell\n        rounded_box(phone_w, phone_h, phone_d, 6, wall_t);\n\n        // Speaker grille: array of small holes\n        translate([0, -15, phone_d/2]) {\n            for(y=[-12:4:12])\n                for(x=[-14:4:14])\n                    translate([x, y, 0])\n                        cylinder(d=2, h=wall_t+1, center=true);\n        }\n\n        // Microphone hole\n        translate([0, 18, phone_d/2])\n            cylinder(d=3, h=wall_t+1, center=true);\n\n        // USB-C port\n        translate([0, -phone_h/2+4, 0])\n            rotate([0, 90, 0])\n                cylinder(d=7, h=8, center=true);\n    }\n}\n\nmodule antenna() {\n    // Flexible stub antenna\n    translate([0, phone_h/2-1, phone_d/2-5])\n        rotate([80, 0, 0])\n            cylinder(d1=4, d2=2, h=18);\n}\n\nmodule buttons() {\n    // Three rubber buttons in a row\n    for(i=[-1:1])\n        translate([i*9, 0, phone_d/2+0.1])\n            cylinder(d=6, h=1.5, $fn=20);\n}\n\nmodule screen() {\n    // Recessed LCD\n    translate([0, -phone_h/2+20, phone_d/2-0.5])\n        cube([22, 12, 0.5], center=true);\n    // Display surface\n    color(\"black\")\n        translate([0, -phone_h/2+20, phone_d/2])\n            cube([20, 10, 0.2], center=true);\n}\n\nmodule volume_knob() {\n    // Side wheel\n    translate([phone_w/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(d=8, h=4, center=true);\n}\n\n// Assembly\nmain_body();\nantenna();\nbuttons();\nscreen();\nvolume_knob();",
    "renders": true
  },
  {
    "household_item": "monitoring",
    "openscad_code": "// Realistic-style desktop monitoring camera\n// ~70 mm wide × 50 mm deep × 50 mm tall\n// Medium complexity, 3D-printable (no supports)\n\n$fa = 2;\n$fs = 0.5;\n\nmodule base() {\n    difference() {\n        // Main base plate\n        cube([60, 40, 8], center=true);\n\n        // Cable channel underneath\n        translate([0, -15, -4.5])\n            cube([10, 20, 2], center=true);\n\n        // Screw recesses (4×)\n        for (dx = [-25, 25], dy = [-15, 15])\n            translate([dx, dy, -5])\n                cylinder(h=2, d=6, center=true);\n    }\n}\n\nmodule stem() {\n    // Tilt hinge block\n    translate([0, 0, 8])\n        cube([20, 18, 15], center=true);\n\n    // Vertical post\n    translate([0, 0, 15.5])\n        cylinder(h=20, d=8, center=true);\n}\n\nmodule ball_joint() {\n    sphere(d=10, center=true);         // Ball\n    translate([0, 0, 5.5])\n        rotate([90, 0, 0])\n            cylinder(h=10, d1=6, d2=4);  // Neck\n}\n\nmodule camera_body() {\n    difference() {\n        // Main housing\n        translate([0, 0, 21])\n            cube([30, 26, 22], center=true);\n\n        // Lens opening\n        translate([0, 13.5, 21])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=16);\n\n        // IR LED windows\n        for (y = [8, -8])\n            translate([10, y, 21])\n                sphere(d=3);\n    }\n}\n\nmodule lens() {\n    difference() {\n        // Outer lens barrel\n        translate([0, 18, 21])\n            rotate([90, 0, 0])\n                cylinder(h=10, d1=14, d2=12);\n\n        // Inner lens\n        translate([0, 27, 21])\n            rotate([90, 0, 0])\n                cylinder(h=2, d=8);\n    }\n}\n\nmodule status_led() {\n    // Ring around lens\n    translate([0, 18, 21])\n        rotate([90, 0, 0])\n            cylinder(h=1, d=10);\n}\n\nunion() {\n    base();\n    stem();\n    translate([0, 0, 26])\n        ball_joint();\n    camera_body();\n    lens();\n    color(\"red\") status_led();\n}",
    "renders": true
  },
  {
    "household_item": "doorbell",
    "openscad_code": "// Realistic Medium-Complexity Doorbell for 3D Printing\n// Approx 70 mm wide, 120 mm tall including push-button cap\n\n// Doorbell housing shell (main body)\nmodule housing() {\n    difference() {\n        // Main shell – rounded rectangle extrusion\n        linear_extrude(height = 22, center = true, convexity = 4)\n            offset(r = 5)\n                square([60, 100], center = true);\n\n        // Recess for the push-button\n        translate([0, 0, 10.1])\n            cylinder(h = 12, d = 22, $fn = 48);\n    }\n}\n\n// Mounting back-plate with two screw holes\nmodule backplate() {\n    difference() {\n        translate([0, 0, -12])\n            cube([64, 104, 4], center = true);\n\n        // Counter-sunk screw holes Ø5 mm\n        for(y = [-30, 30])\n            translate([0, y, -10])\n                cylinder(h = 6, d1 = 9, d2 = 5, $fn = 24);\n    }\n}\n\n// Push-button cap with finger-friendly dome\nmodule button() {\n    translate([0, 0, 22])\n    union() {\n        // Travelling shaft cylinder\n        cylinder(h = 8, d = 18, $fn = 32);\n\n        // Comfortable rounded cap\n        translate([0, 0, 8])\n            scale([1, 1, 0.4])\n                sphere(d = 24, $fn = 48);\n    }\n}\n\n// Speaker grille (perforated front face)\nmodule grille() {\n    difference() {\n        // Grille plate\n        translate([0, 0, 11])\n            cube([56, 30, 2], center = true);\n\n        // Horizontal slots using difference and loops\n        for(y = [-12:3:12])\n            translate([0, y, 12.1])\n                cube([52, 1.2, 3], center = true);\n    }\n}\n\n// LED indicator ring around button\nmodule led_ring() {\n    difference() {\n        // Outer ring\n        translate([0, 0, 11])\n            cylinder(h = 2.5, d = 28, $fn = 48);\n\n        // Inner cut-out\n        translate([0, 0, 10.9])\n            cylinder(h = 2.7, d = 20, $fn = 48);\n    }\n}\n\n// Assembly\nunion() {\n    housing();\n    backplate();\n    button();\n    grille();\n    led_ring();\n}",
    "renders": true
  },
  {
    "household_item": "safe",
    "openscad_code": "// Medium-complexity realistic 3D-printable safe\n// Overall size ≈ 60 mm wide × 50 mm deep × 70 mm high\n// Wall thickness 2 mm, printable without supports\n\n$fn = 32;\n\n// Main safe body\nmodule safe_body() {\n    difference() {\n        // Outer shell\n        cube([60, 50, 70], center = true);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cube([56, 46, 66], center = true);\n    }\n}\n\n// Front door\nmodule door() {\n    difference() {\n        // Door plate\n        translate([0, 25.5, 0])\n            cube([58, 3, 66], center = true);\n        \n        // Recessed panel\n        translate([0, 27, 5])\n            cube([50, 1, 50], center = true);\n    }\n}\n\n// Hinges on the left\nmodule hinges() {\n    for (z = [-25, 0, 25]) {\n        translate([-30, 25, z])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 6, center = true);\n    }\n}\n\n// Combination dial\nmodule dial() {\n    translate([30, 27.5, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 5, d = 18, center = true);\n    \n    // Dial handle\n    translate([30, 27.5, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 4, center = true);\n    \n    // Grip ridges\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([30, 27.5, 20])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d1 = 3.5, d2 = 4.5, center = true);\n    }\n}\n\n// Handle spindle\nmodule handle() {\n    translate([-20, 27.5, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d = 6, center = true);\n    \n    // Handle grip\n    translate([-30, 27.5, 0])\n        rotate([0, 90, 0])\n            rotate([0, 0, 90])\n                cube([15, 3, 8], center = true);\n}\n\n// Bolts behind door (visible when open)\nmodule bolts() {\n    for (x = [-20, 20]) {\n        translate([x, 24, 25])\n            cube([4, 2, 10], center = true);\n    }\n    for (z = [-25, 25]) {\n        translate([25, 24, z])\n            cube([10, 2, 4], center = true);\n    }\n}\n\n// Feet\nmodule feet() {\n    for (x = [-25, 25])\n        for (y = [-20, 20])\n            translate([x, y, -35.5])\n                cylinder(h = 3, d = 8, center = true);\n}\n\n// Assembly\nunion() {\n    safe_body();\n    door();\n    hinges();\n    dial();\n    handle();\n    bolts();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "lightswitch",
    "openscad_code": "// Simple realistic light switch (North-American single-gang toggle switch)\n// Wall plate + toggle lever + screw heads\n// Designed for 3D printing – no overhangs > 45°, 1.2 mm walls\n\n// Overall scale factor (mm)\nscale_factor = 1;\n\n// Wall plate dimensions\nplate_w   = 70 * scale_factor;\nplate_h   = 115 * scale_factor;\nplate_t   = 3  * scale_factor;\nbevel     = 2  * scale_factor;\n\n// Toggle lever\nlever_len = 25 * scale_factor;\nlever_d   = 6  * scale_factor;\ntoggle_r  = 3.5 * scale_factor;\n\n// Screw head\nscrew_d   = 8  * scale_factor;\nscrew_h   = 2  * scale_factor;\nscrew_ofs = 7  * scale_factor;\n\n// Wall cut-out size (recess)\nbox_w = 40 * scale_factor;\nbox_h = 60 * scale_factor;\nbox_d = 25 * scale_factor;\n\n// Module: rounded plate edges\nmodule rounded_plate() {\n    difference() {\n        // Main plate\n        cube([plate_w, plate_h, plate_t], center = true);\n        \n        // Rounded top/bottom edges\n        translate([0, plate_h/2 - bevel, 0])\n            cube([plate_w, bevel*2, plate_t*2], center = true);\n        translate([0, -plate_h/2 + bevel, 0])\n            cube([plate_w, bevel*2, plate_t*2], center = true);\n        \n        // Rounded left/right edges\n        translate([plate_w/2 - bevel, 0, 0])\n            cube([bevel*2, plate_h, plate_t*2], center = true);\n        translate([-plate_w/2 + bevel, 0, 0])\n            cube([bevel*2, plate_h, plate_t*2], center = true);\n    }\n    \n    // Add bevel fillets\n    for (x = [-plate_w/2 + bevel, plate_w/2 - bevel])\n    for (y = [-plate_h/2 + bevel, plate_h/2 - bevel])\n        translate([x, y, plate_t/2])\n            cylinder(r = bevel, h = plate_t, center = true, $fn = 16);\n}\n\n// Module: toggle lever\nmodule toggle() {\n    // Pivot sphere inside plate\n    translate([0, 0, plate_t/2])\n        sphere(r = toggle_r, $fn = 32);\n    \n    // Lever shaft\n    translate([0, 0, plate_t/2 + lever_len/2])\n        rotate([0, 12, 0])  // slight angle for realism\n            cylinder(r = lever_d/2, h = lever_len, $fn = 20);\n    \n    // Flat paddle tip\n    translate([0, 0, plate_t/2 + lever_len])\n        rotate([0, 12, 0])\n            cube([lever_d*0.8, lever_d*1.2, lever_d*0.4], center = true);\n}\n\n// Module: screw head (simple slotted)\nmodule screw_head() {\n    cylinder(d = screw_d, h = screw_h, $fn = 24);\n    translate([0, 0, screw_h/2])\n        cube([screw_d*0.5, screw_d*0.15, screw_h*1.1], center = true);\n}\n\n// Assembly\nunion() {\n    // Wall plate with rounded edges\n    rounded_plate();\n    \n    // Recess box at back\n    translate([0, 0, -box_d/2 - plate_t/2])\n        cube([box_w, box_h, box_d], center = true);\n    \n    // Toggle lever\n    toggle();\n    \n    // Screw heads (top and bottom)\n    translate([0, plate_h/2 - screw_ofs, plate_t/2])\n        screw_head();\n    translate([0, -plate_h/2 + screw_ofs, plate_t/2])\n        screw_head();\n}",
    "renders": true
  },
  {
    "household_item": "dimmer",
    "openscad_code": "// Realistic 3D printable dimmer switch\n// Overall size ~86 x 86 x 25 mm\n\n// Main plate\nmodule dimmer_plate() {\n    difference() {\n        // Main body\n        cube([86, 86, 6], center=true);\n        \n        // Screw holes\n        for(x = [-35, 35])\n            for(y = [-35, 35]) {\n                translate([x, y, 2.5])\n                    cylinder(h=10, r=2.2, center=true);\n            }\n        \n        // Center hole for mechanism\n        translate([0, 0, 2.5])\n            cylinder(h=10, r=12, center=true);\n    }\n}\n\n// Back box\nmodule back_box() {\n    difference() {\n        // Main box\n        translate([0, 0, -12])\n            cube([68, 68, 24], center=true);\n        \n        // Hollow center\n        translate([0, 0, -12])\n            cube([60, 60, 24], center=true);\n        \n        // Wire entry holes\n        for(x = [-25, 0, 25])\n            translate([x, 0, -22])\n                rotate([90, 0, 0])\n                    cylinder(h=10, r=6, center=true);\n    }\n}\n\n// Knob mechanism\nmodule dimmer_knob() {\n    difference() {\n        union() {\n            // Main knob\n            cylinder(h=12, r=15);\n            \n            // Indicator ridge\n            translate([0, 14, 6])\n                cube([2, 4, 2], center=true);\n        }\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=14, r=6);\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    difference() {\n        // Main bracket\n        translate([0, 0, -3])\n            cube([50, 50, 6], center=true);\n        \n        // Center hole\n        translate([0, 0, -3])\n            cylinder(h=8, r=8, center=true);\n        \n        // Mounting holes\n        for(angle = [0:120:240])\n            rotate([0, 0, angle])\n                translate([20, 0, -3])\n                    cylinder(h=8, r=2.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Plate\n    dimmer_plate();\n    \n    // Back box\n    translate([0, 0, -3])\n        back_box();\n    \n    // Mounting bracket\n    translate([0, 0, 3])\n        mounting_bracket();\n    \n    // Knob\n    translate([0, 0, 9])\n        dimmer_knob();\n}",
    "renders": true
  },
  {
    "household_item": "outlet",
    "openscad_code": "// Realistic 3D-printable outlet – medium complexity\n// All dimensions in millimetres, printable without supports\n\nwall_th = 2.0;        // thin enough to print cleanly\nplate_w = 70;         // wall plate width\nplate_h = 115;        // wall plate height\nplate_d = 5;          // wall plate depth\nbox_w  = 50;          // electrical box width\nbox_h  = 95;          // electrical box height\nbox_d  = 35;          // electrical box depth\nhole_d = 6.5;         // screw hole diameter\nslot_w = 12;          // outlet slot width\nslot_h = 23;          // outlet slot height\nslot_d = 9;           // outlet slot depth\nground_d = 6.5;       // ground pin hole\nground_h = 9;\n\n// wall plate with rounded corners\nmodule wall_plate() {\n    difference() {\n        // main plate\n        minkowski() {\n            cube([plate_w, plate_h, plate_d], center=true);\n            cylinder(h=plate_d, r=3, $fn=16);\n        }\n        // two outlet openings\n        translate([0, -28, -plate_d/2])\n            cube([slot_w, slot_h, slot_d+2], center=true);\n        translate([0,  28, -plate_d/2])\n            cube([slot_w, slot_h, slot_d+2], center=true);\n        // screw holes\n        translate([-25, -42, -plate_d/2])\n            cylinder(h=plate_d+1, d=hole_d, $fn=20);\n        translate([ 25, -42, -plate_d/2])\n            cylinder(h=plate_d+1, d=hole_d, $fn=20);\n    }\n}\n\n// electrical box (back housing)\nmodule box() {\n    difference() {\n        // outer shell\n        cube([box_w, box_h, box_d], center=true);\n        // inner cavity (leave wall thickness)\n        translate([0, 0, -wall_th/2])\n            cube([box_w-2*wall_th,\n                  box_h-2*wall_th,\n                  box_d-wall_th], center=true);\n        // cable entry hole at bottom\n        translate([0, -box_h/2+5, -box_d/2+box_d/2])\n            rotate([90,0,0])\n                cylinder(h=box_w, d=16, center=true, $fn=32);\n    }\n}\n\n// outlet receptacle face (thin insert)\nmodule receptacle() {\n    difference() {\n        // body\n        cube([slot_w+2, slot_h*2+10, slot_d], center=true);\n        // two vertical slots\n        translate([0, -28, 0])\n            cube([slot_w-1, slot_h, slot_d+1], center=true);\n        translate([0,  28, 0])\n            cube([slot_w-1, slot_h, slot_d+1], center=true);\n        // ground holes\n        translate([0, -28, 0])\n            cylinder(h=slot_d+1, d=ground_d, center=true, $fn=20);\n        translate([0,  28, 0])\n            cylinder(h=slot_d+1, d=ground_d, center=true, $fn=20);\n    }\n}\n\nmodule outlet() {\n    difference() {\n        union() {\n            // back box\n            translate([0,0,-box_d/2-plate_d/2])\n                box();\n            // plate\n            wall_plate();\n            // receptacles inserted into plate\n            translate([0, -28, -plate_d/2-slot_d/2])\n                receptacle();\n            translate([0,  28, -plate_d/2-slot_d/2])\n                receptacle();\n        }\n    }\n}\n\n// render the complete outlet\noutlet();",
    "renders": true
  },
  {
    "household_item": "extender",
    "openscad_code": "// Realistic USB-C Male-to-Female Extender\n// 75 mm total length, 3 mm wall-thickness, support-free printable\n\n$fn = 36;\n\n// Overall dimensions\next_len = 75;\next_dia = 12;\nshell_thk = 3;\n\nmodule usb_c_plug(length = 8.25) {\n    // USB-C metal shell\n    color(\"silver\")\n    difference() {\n        cube([8.4, 2.6, length], center = true);\n        cube([6.75, 0.7, length+0.1], center = true);\n    }\n    \n    // Inner plastic tongue\n    color(\"black\")\n    translate([0, 0, length/2 - 0.5])\n    cube([6.75, 0.7, 0.6], center = true);\n    \n    // Contact traces\n    for (i = [0:11]) {\n        color(\"gold\")\n        translate([-3.3 + i*0.6, 0, length/2 - 0.8])\n        cube([0.3, 0.3, 0.2], center = true);\n    }\n}\n\nmodule usb_c_receptacle() {\n    // Outer shell\n    color(\"silver\")\n    difference() {\n        cube([8.4, 2.6, 6], center = true);\n        cube([6.75, 0.7, 6.5], center = true);\n    }\n    \n    // Internal cavity for tongue\n    color(\"black\")\n    translate([0, 0, -3])\n    cube([6.75, 0.7, 3.5], center = true);\n}\n\nmodule strain_relief() {\n    // Tapered sleeve\n    color(\"black\")\n    difference() {\n        cylinder(h = 15, d1 = 12, d2 = 10, center = true);\n        cylinder(h = 16, d1 = 6, d2 = 4, center = true);\n    }\n}\n\nmodule cable_segment() {\n    // Main body tube\n    color(\"black\")\n    difference() {\n        cylinder(h = ext_len - 8.25 - 6 - 15, d = 10);\n        translate([0, 0, -0.1])\n        cylinder(h = ext_len - 8.25 - 6 - 15 + 0.2, d = 4);\n    }\n    \n    // Reinforcement rings every 12 mm\n    for (z = [5:12:ext_len - 8.25 - 6 - 15 - 5]) {\n        color(\"gray\")\n        translate([0, 0, z])\n        cylinder(h = 2, d = 11);\n    }\n}\n\n// Assembly\ntranslate([0, 0, ext_len/2])\nrotate([90, 0, 0])\nunion() {\n    // Male plug at left end\n    translate([-ext_len/2 + 8.25/2, 0, 0])\n    usb_c_plug(8.25);\n    \n    // Female receptacle at right end\n    translate([ext_len/2 - 6/2, 0, 0])\n    usb_c_receptacle();\n    \n    // Left strain relief\n    translate([-ext_len/2 + 8.25 + 15/2, 0, 0])\n    strain_relief();\n    \n    // Right strain relief mirrored\n    scale([-1, 1, 1])\n    translate([-ext_len/2 + 8.25 + 15/2, 0, 0])\n    strain_relief();\n    \n    // Cable between strain reliefs\n    translate([(-ext_len/2 + 8.25 + 15) + (ext_len - 8.25 - 6 - 15)/2, 0, 0])\n    cable_segment();\n}",
    "renders": true
  },
  {
    "household_item": "repeater",
    "openscad_code": "// Realistic 3D-Printable Repeater (Wi-Fi Router)\n// Roughly 80 mm in length, 60 mm wide, 20 mm thick (flat orientation for printing)\n\n$fn = 30;            // Smooth curves\nwall = 1.4;          // 1.4 mm shell thickness for FDM printing\nant_d = 3;           // Antenna diameter\nant_h = 20;          // Antenna height above case\n\n// Main body shell\nmodule case() {\n    difference() {\n        // Outer rounded box\n        hull() {\n            translate([0,0,wall/2]) cube([78,58,wall], center=true);\n            translate([0,0,wall/2]) cube([78,58,wall], center=true);\n        }\n        // Hollow interior\n        translate([0,0,wall/2]) cube([78-2*wall, 58-2*wall, wall], center=true);\n    }\n}\n\n// Ventilation slots (printed as bridges)\nmodule vents() {\n    for (x = [-30:10:30]) {\n        translate([x, 0, 0]) cube([2, 56, 0.8], center=true);\n    }\n}\n\n// Status LEDs\nmodule leds() {\n    for (i = [0:2]) {\n        translate([-25 + i*25, 28, 0.6])\n            color(\"lime\") cylinder(h=0.6, d=3);\n    }\n}\n\n// Ethernet ports\nmodule ports() {\n    for (p = [0:3]) {\n        translate([30 - p*8, -28, 0])\n            difference() {\n                cube([6, 3, 4]);\n                translate([3, 1.5, 2]) rotate([90,0,0])\n                    cylinder(h=6, d=2.5);\n            }\n    }\n}\n\n// Antenna bases (rotate on Z axis)\nmodule antenna_base() {\n    translate([-33, 0, wall/2]) rotate([0,0,45]) cylinder(h=wall*2, d=6);\n    translate([33, 0, wall/2]) rotate([0,0,-45]) cylinder(h=wall*2, d=6);\n}\n\n// Antenna elements\nmodule antennas() {\n    translate([-33, 0, wall + ant_h/2])\n        rotate([0,0,45]) cylinder(h=ant_h, d=ant_d);\n    translate([33, 0, wall + ant_h/2])\n        rotate([0,0,-45]) cylinder(h=ant_h, d=ant_d);\n}\n\n// Assemble model\ntranslate([0,0,wall/2]) {\n    case();\n    vents();\n    leds();\n    ports();\n    antenna_base();\n    antennas();\n}",
    "renders": true
  },
  {
    "household_item": "adapter",
    "openscad_code": "// USB-C to USB-A Female Adapter (Medium Realistic Style)\n\n// Overall dimensions\ntotal_len = 55;          // Total length\nusb_c_len = 15;          // USB-C plug length\nusb_a_len = 20;          // USB-A receptacle depth\nmid_len = total_len - usb_c_len - usb_a_len;\n\nwall = 2.0;              // Wall thickness for 3D printing\ntolerance = 0.3;         // Fit tolerance\n\n// USB-C plug dimensions\nc_width = 8.3;\nc_thick = 2.5;\nc_shell_wall = 0.7;\n\n// USB-A receptacle dimensions\na_width = 15.8;\na_thick = 7.5;\n\n// Shell radius\nshell_r = 1.5;\n\n// Helper module for rounded rectangle extrusion\nmodule rounded_rect(w, h, l, r) {\n    translate([0, 0, -l/2])\n        linear_extrude(height = l)\n            offset(r = r)\n                square([w, h], center = true);\n}\n\n// Main shell body\nmodule shell() {\n    hull() {\n        // USB-C end\n        translate([-total_len/2 + usb_c_len/2, 0, 0])\n            rounded_rect(c_width + 2*wall + 2*c_shell_wall,\n                         c_thick + 2*wall + 2*c_shell_wall,\n                         usb_c_len,\n                         shell_r);\n        \n        // USB-A end\n        translate([total_len/2 - usb_a_len/2, 0, 0])\n            rounded_rect(a_width + 2*wall,\n                         a_thick + 2*wall,\n                         usb_a_len,\n                         shell_r);\n    }\n}\n\n// USB-C plug outer shell\nmodule usbc_plug() {\n    difference() {\n        // Outer metal shell\n        rounded_rect(c_width + 2*c_shell_wall,\n                     c_thick + 2*c_shell_wall,\n                     usb_c_len,\n                     shell_r/2);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            rounded_rect(c_width,\n                         c_thick,\n                         usb_c_len + 0.2,\n                         shell_r/4);\n    }\n}\n\n// USB-C tongue with contacts\nmodule usbc_tongue() {\n    color(\"darkgray\")\n    translate([-total_len/2 + usb_c_len - 1.0, 0, 0])\n        rounded_rect(c_width - 2.0,\n                     0.7,\n                     2.0,\n                     0.3);\n    \n    // Simple contact pads representation\n    for (i = [-3:3]) {\n        translate([-total_len/2 + usb_c_len - 0.5,\n                   i * 0.6,\n                   -0.2])\n            cube([0.3, 0.3, 0.2]);\n    }\n}\n\n// USB-A receptacle\nmodule usba_receptacle() {\n    difference() {\n        // Outer shell\n        rounded_rect(a_width, a_thick, usb_a_len, shell_r);\n        \n        // Inner cavity\n        translate([0, 0, -0.1])\n            rounded_rect(a_width - 2*wall,\n                         a_thick - 2*wall,\n                         usb_a_len + 0.2,\n                         shell_r);\n        \n        // Tongue opening\n        translate([total_len/2 - usb_a_len + 2, 0, 0])\n            cube([usb_a_len, 6.2, 2.5], center = true);\n    }\n}\n\n// Keying ribs for USB-A\nmodule usba_keying() {\n    translate([total_len/2 - usb_a_len + 0.5, 0, a_thick/2 - wall])\n        cube([1.5, a_width - 2*wall, wall]);\n    \n    translate([total_len/2 - usb_a_len + 0.5, 0, -a_thick/2])\n        cube([1.5, a_width - 2*wall, wall]);\n}\n\n// Grip texture pattern\nmodule grip_texture() {\n    for (i = [-2:2]) {\n        translate([i * 8, 0, 0])\n            difference() {\n                shell();\n                translate([0, 0, -total_len/2])\n                    cube([6, 30, total_len], center = true);\n            }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Main shell\n        shell();\n        \n        // USB-C plug shell\n        color(\"silver\")\n        translate([-total_len/2 + usb_c_len/2, 0, 0])\n            usbc_plug();\n        \n        // USB-A receptacle shell\n        color(\"silver\")\n        translate([total_len/2 - usb_a_len/2, 0, 0])\n            usba_receptacle();\n        \n        // USB-A keying\n        color(\"silver\")\n        usba_keying();\n        \n        // Grip texture\n        grip_texture();\n    }\n    \n    // Hollow out the adapter\n    hull() {\n        // USB-C end cavity\n        translate([-total_len/2 + usb_c_len/2, 0, 0])\n            rounded_rect(c_width - tolerance,\n                         c_thick - tolerance,\n                         usb_c_len + 2,\n                         shell_r/2);\n        \n        // Transition cavity\n        translate([0, 0, 0])\n            rounded_rect(c_width + 1,\n                         c_thick + 1,\n                         mid_len,\n                         shell_r);\n        \n        // USB-A end cavity\n        translate([total_len/2 - usb_a_len/2, 0, 0])\n            rounded_rect(a_width - 2*wall - tolerance,\n                         a_thick - 2*wall - tolerance,\n                         usb_a_len + 2,\n                         shell_r);\n    }\n}\n\n// USB-C tongue and contacts\nusbc_tongue();",
    "renders": true
  },
  {
    "household_item": "splitter",
    "openscad_code": "// Realistic 3-way Y-splitter for garden hose / compressed air\n// 3D-printable, no support, 1.2 mm wall thickness, 50 mm total length\n\n$fa = 2; $fs = 0.5;\n\nmodule pipeSegment(id, od, h) {\n    // outer cylinder minus inner → hollow pipe\n    difference() {\n        cylinder(h = h, d = od, center = true);\n        translate([0,0,-h/2-0.01])\n            cylinder(h = h+0.02, d = id, center = false);\n    }\n}\n\nmodule hexKnurl(d, h) {\n    // hex flats for wrench grip\n    linear_extrude(height = h, center = true, convexity = 10)\n        circle(d = d, $fn = 6);\n}\n\nmodule barbRing(od, h, n) {\n    // multiple barb rings for hose retention\n    for(i = [0 : n-1])\n        translate([0,0, -h*n/2 + h*i + h/2])\n            cylinder(h = h*0.6, d1 = od, d2 = od+1.5);\n}\n\nmodule outlet(outerD, innerD, barbD, barbH, barbCount) {\n    union() {\n        // main pipe\n        pipeSegment(innerD, outerD, 22);\n        \n        // barb section\n        translate([0,0,11])\n            barbRing(barbD, barbH, barbCount);\n        \n        // hex nut section\n        translate([0,0,-11-5])\n            hexKnurl(outerD+2, 10);\n    }\n}\n\nmodule splitterBody() {\n    // central chamber: sphere with wall thickness\n    difference() {\n        sphere(d = 32);\n        sphere(d = 32-2*1.2);\n    }\n    \n    // inlet pipe (top)\n    translate([0,0,16])\n        pipeSegment(12, 14.4, 20);\n    \n    // three outlets at 120° apart\n    for(a = [0, 120, 240])\n        rotate([0,0,a])\n            rotate([45,0,0])\n                translate([0,0,16])\n                    outlet(14.4, 12, 13, 1.5, 5);\n    \n    // thickening ring\n    translate([0,0,0])\n        cylinder(h = 2, d = 34, center = true);\n}\n\n// Render the splitter\nsplitterBody();",
    "renders": true
  },
  {
    "household_item": "hub",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nhub_d = 50;\nhub_h = 25;\nshaft_d = 8;\nkey_w = 3;\nkey_h = 1.5;\nflange_d = 68;\nflange_h = 6;\nbolt_num = 4;\nbolt_d = 5.5;\nbolt_circle_d = 58;\nbolt_head_h = 3;\nbolt_head_d = 8.5;\n\nmodule hub_body() {\n    difference() {\n        // Main hub cylinder\n        cylinder(d = hub_d, h = hub_h, $fn = 60);\n        \n        // Central shaft hole\n        translate([0, 0, -1])\n            cylinder(d = shaft_d, h = hub_h + 2, $fn = 32);\n        \n        // Keyway for shaft\n        translate([-shaft_d/2 - key_w/2, -key_h/2, -1])\n            cube([key_w, key_h, hub_h + 2]);\n    }\n}\n\nmodule flange() {\n    // Flange disk\n    cylinder(d = flange_d, h = flange_h, $fn = 90);\n    \n    // Bolt holes on flange\n    for (i = [0 : bolt_num - 1]) {\n        rotate([0, 0, i * 360 / bolt_num])\n            translate([bolt_circle_d/2, 0, -1])\n                cylinder(d = bolt_d, h = flange_h + 2, $fn = 16);\n    }\n}\n\nmodule spokes() {\n    spoke_num = 6;\n    spoke_w = 6;\n    spoke_h = hub_h * 0.7;\n    rim_r = hub_d/2 + 8;\n    \n    for (i = [0 : spoke_num - 1]) {\n        rotate([0, 0, i * 360 / spoke_num + 30])\n            rotate([90, 0, 0])\n                translate([0, 0, -spoke_h/2])\n                    cube([spoke_w, rim_r - hub_d/2 - 2, spoke_h], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    union() {\n        hub_body();\n        \n        translate([0, 0, hub_h - flange_h])\n            flange();\n        \n        // Reinforcement ribs between flange and hub\n        for (i = [0 : bolt_num - 1]) {\n            rotate([0, 0, i * 360 / bolt_num + 45])\n                translate([bolt_circle_d/2 - 5, 0, hub_h - flange_h/2 - 3])\n                    cube([10, 3, 6], center = true);\n        }\n    }",
    "renders": true
  },
  {
    "household_item": "switch",
    "openscad_code": "// Light-switch plate with rocker switch (realistic, medium complexity)\n// Overall footprint ≈ 70 mm × 115 mm × 25 mm\n\n$fn = 36;\n\n// ---------- Parameters ----------\nplate_w = 70;\nplate_h = 115;\nplate_t = 2.6;\n\nbox_w = 50;\nbox_h = 80;\nbox_d = 20;\nwall_th = 2;\n\nrocker_w = 18;\nrocker_h = 28;\nrocker_t = 6;\npivot_r = 1.5;\nrocker_gap = 0.6;\n\nscrew_d = 3.3;           // M3 screws\nscrew_head_d = 5.7;\nscrew_head_h = 2;\n\n// ---------- Main assembly ----------\nmodule switch_assembly() {\n    difference() {\n        // Wall plate\n        plate();\n\n        // Screw holes\n        translate([0, plate_h/2 - 12, -1])\n            screw_hole();\n        translate([0, -plate_h/2 + 12, -1])\n            screw_hole();\n\n        // Rocker opening\n        translate([0, 0, plate_t - 0.01])\n            cube([rocker_w + rocker_gap*2, rocker_h + rocker_gap*2, plate_t + 1], center = true);\n    }\n\n    // Electrical box (behind plate)\n    translate([0, 0, -box_d/2 - plate_t/2])\n        electrical_box();\n\n    // Rocker switch\n    translate([0, 0, plate_t + rocker_t/2])\n        rotate([15, 0, 0])\n            rocker();\n}\n\n// ---------- Plate ----------\nmodule plate() {\n    difference() {\n        // Main plate body\n        cube([plate_w, plate_h, plate_t], center = true);\n\n        // Chamfer top and bottom edges\n        translate([0, 0, plate_t/2 - 0.5])\n            minkowski() {\n                cube([plate_w - 4, plate_h - 4, 1], center = true);\n                cylinder(h = 0.1, r = 1.5);\n            }\n    }\n}\n\n// ---------- Electrical box ----------\nmodule electrical_box() {\n    difference() {\n        // Outer shell\n        cube([box_w, box_h, box_d], center = true);\n\n        // Inner cavity\n        translate([0, 0, -wall_th])\n            cube([box_w - 2*wall_th, box_h - 2*wall_th, box_d + 1], center = true);\n    }\n\n    // Mounting posts with screw holes\n    for (y = [box_h/2 - 10, -box_h/2 + 10])\n        translate([box_w/2 - wall_th - 3, y, -box_d/2 + wall_th + 3])\n            rotate([0, 90, 0])\n                cylinder(h = 6, d = screw_d + 1);\n}\n\n// ---------- Rocker ----------\nmodule rocker() {\n    difference() {\n        // Main rocker body\n        cube([rocker_w, rocker_h, rocker_t], center = true);\n\n        // Pivot ridge\n        translate([0, 0, -rocker_t/2 + pivot_r])\n            cylinder(h = rocker_w + 1, r = pivot_r, center = true);\n\n        // Top recess\n        translate([0, rocker_h/4, rocker_t/2 - 0.8])\n            cube([rocker_w - 4, rocker_h/3, 1.6], center = true);\n    }\n\n    // Indicator dimple\n    translate([0, -rocker_h/4, rocker_t/2 - 0.5])\n        sphere(d = 2.5, $fn = 20);\n}\n\n// ---------- Screw hole ----------\nmodule screw_hole() {\n    translate([0, 0, -1])\n        cylinder(h = plate_t + 2, d = screw_head_d, $fn = 6);\n    cylinder(h = plate_t + 2, d = screw_d);\n}\n\nswitch_assembly();",
    "renders": true
  },
  {
    "household_item": "drive",
    "openscad_code": "// USB 3.0 Flash Drive – 60 mm × 20 mm × 8 mm\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 36;          // Smooth curves\nwall = 1.0;        // Minimum wall thickness for FDM\n\nmodule body() {\n    difference() {\n        // Main shell\n        hull() {\n            translate([0,0,3.5]) cube([58,18,7], center=true);\n            translate([0,0,-0.5]) cube([54,14,1], center=true);\n        }\n        // Hollow it out\n        translate([0,0,0.5]) cube([56-wall*2,16-wall*2,6], center=true);\n    }\n}\n\nmodule keyring_hole() {\n    // Loop for chamfered hole\n    for (z=[0,1]) {\n        translate([0,0,z]) \n            rotate([90,0,0])\n                cylinder(h=2, d=6-z, center=true);\n    }\n}\n\nmodule usb_connector() {\n    // Metal shell\n    difference() {\n        translate([29,0,0]) cube([12,12,4.5], center=true);\n        translate([29,0,0]) cube([12.2,11.8,4.3], center=true);\n    }\n    // Plastic tongue\n    translate([34,0,0]) cube([3,9,1.8], center=true);\n    // Contacts\n    for (i=[-4:1:4]) {\n        translate([34.5,i*0.85,0.9]) cube([0.2,0.5,0.1], center=true);\n    }\n}\n\nmodule grip_strip() {\n    // Raised ridges for grip\n    for (i=[-4:1:4]) {\n        translate([-20,i*2.5,3.5])\n            cube([15,1.5,0.6], center=true);\n    }\n}\n\nmodule activity_led() {\n    // Tiny indicator window\n    translate([20,8,3.5])\n        cylinder(h=0.4, d=2, center=true);\n}\n\n// Assembly\nunion() {\n    body();\n    color(\"silver\") usb_connector();\n    grip_strip();\n    color(\"red\") activity_led();\n    // Key-ring hole\n    translate([-28,0,0])\n        keyring_hole();\n}",
    "renders": true
  },
  {
    "household_item": "ssd",
    "openscad_code": "// M.2 2280 SSD realistic model\n// Dimensions: 80 mm × 22 mm × 2.38 mm\n\n$fn = 50;\n\n// PCB and overall shape\nmodule ssd_body() {\n    // Main PCB\n    difference() {\n        cube([80, 22, 1.6], center=false);\n        // Key notch\n        translate([75-4.2, 0, 0])\n            cube([4.2, 2.5, 1.6]);\n    }\n}\n\n// Controller chip\nmodule controller() {\n    translate([15, 11-7/2, 1.6])\n        cube([13, 7, 1.2]);\n}\n\n// NAND flash packages\nmodule nand_flash(x) {\n    translate([x, 11-9/2, 1.6])\n        cube([13.5, 9, 1.2]);\n}\n\n// DRAM cache\nmodule dram_chip() {\n    translate([33, 11-8/2, 1.6])\n        cube([12, 8, 1.2]);\n}\n\n// Small SMD components\nmodule smd_component(x, y) {\n    translate([x, y, 1.6])\n        cube([1.6, 0.8, 0.5]);\n}\n\n// Gold contact pads\nmodule contact_pads() {\n    for (i = [0:4:75]) {\n        translate([i, 0, -0.1])\n            cube([3.5, 2.5, 0.2]);\n    }\n}\n\n// Label sticker\nmodule label() {\n    translate([45, 11-8/2, 1.6+1.2+0.05])\n        cube([20, 8, 0.1]);\n}\n\n// Screw hole\nmodule screw_hole() {\n    translate([80-5.8, 11, -1])\n        cylinder(h=5, d=2.5);\n}\n\n// Main assembly\nunion() {\n    // PCB and components\n    union() {\n        ssd_body();\n        controller();\n        \n        // Two NAND packages\n        nand_flash(52);\n        nand_flash(68);\n        \n        dram_chip();\n        \n        // SMD passives\n        for (x = [5:5:75]) {\n            for (y = [3, 19]) {\n                smd_component(x, y);\n            }\n        }\n    }\n    \n    // Contact pads\n    contact_pads();\n    \n    // Label sticker\n    label();\n    \n    // Screw hole (for mounting)\n    screw_hole();\n}",
    "renders": true
  },
  {
    "household_item": "flash",
    "openscad_code": "// Realistic Camera Flash - OpenSCAD\n// Medium complexity with functional details\n\nmodule flash_body() {\n    difference() {\n        // Main body - rounded rectangle\n        translate([0, 0, 15])\n            minkowski() {\n                cube([60, 40, 30], center=true);\n                sphere(5);\n            }\n        \n        // Battery compartment cavity\n        translate([0, 0, 10])\n            cube([50, 30, 25], center=true);\n    }\n}\n\nmodule hot_shoe() {\n    difference() {\n        // Base plate\n        translate([0, 0, 0])\n            cube([25, 20, 5], center=true);\n        \n        // Hot shoe slot\n        translate([0, 0, -1])\n            cube([20, 15, 7], center=true);\n        \n        // Contact grooves\n        for(x = [-5, 0, 5]) {\n            translate([x, 0, 2.5])\n                cube([2, 15, 1], center=true);\n        }\n    }\n}\n\nmodule flash_head() {\n    difference() {\n        // Main flash head\n        translate([0, 0, 40])\n            rotate([90, 0, 0])\n                cylinder(h=25, r1=25, r2=22, center=true);\n        \n        // Fresnel lens cavity\n        translate([0, 0, 52])\n            rotate([90, 0, 0])\n                cylinder(h=5, r=20, center=true);\n        \n        // Light sensor window\n        translate([15, 0, 45])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=3, center=true);\n    }\n}\n\nmodule control_panel() {\n    // LCD screen\n    translate([0, -20.5, 25])\n        cube([30, 1, 15], center=true);\n    \n    // Buttons\n    for(i = [0:2]) {\n        translate([-10 + i*10, -21, 30])\n            cylinder(h=2, r=3);\n    }\n    \n    // Power switch\n    translate([20, -21, 20])\n        cube([8, 1, 5], center=true);\n}\n\nmodule battery_door() {\n    // Hinged door\n    translate([0, 20.5, 15])\n        cube([45, 1, 25], center=true);\n    \n    // Door latch\n    translate([20, 21, 25])\n        cube([5, 2, 8], center=true);\n}\n\nmodule flash_tube() {\n    // Xenon flash tube\n    translate([0, 0, 50])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=20, r=18, center=true);\n                cylinder(h=21, r=15, center=true);\n            }\n    \n    // Reflector\n    translate([0, 0, 50])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, r=24, center=true);\n                cylinder(h=3, r=22, center=true);\n            }\n}\n\n// Assembly\nunion() {\n    flash_body();\n    hot_shoe();\n    flash_head();\n    control_panel();\n    battery_door();\n    flash_tube();\n}\n\n// Print orientation\nrotate([0, 180, 0])\n    translate([0, 0, -30])\n        children();",
    "renders": true
  },
  {
    "household_item": "memory",
    "openscad_code": "// ——— USB-A FLASH DRIVE — Realistic / Medium complexity — 3D-printable ———\n// Overall size ~60 mm × 18 mm × 8 mm\n// No critical over-hangs; 0.8 mm minimum wall thickness\n\n$fn = 64;\n\n// --------------- PARAMETERS ---------------\nbody_l  = 50;   // plastic body length\nbody_w  = 15;   // body width\nbody_h  = 7;    // body height\nshell_t = 1;    // shell wall thickness\nmetal_l = 12;   // metal USB tongue length\nmetal_w = 12;  // metal tongue width\nmetal_h = 4;   // metal tongue thickness\nkey_lip = 1;    // key-ring hole lip\nkey_d   = 3;    // key-ring hole diameter\n\n// --------------- MODULES ---------------\nmodule body_shell() {\n    difference() {\n        // outer rounded bar\n        hull() {\n            translate([-body_l/2, 0, 0])\n                cube([body_l, body_w, body_h], center=true);\n            translate([-body_l/2+4, 0, 0])\n                sphere(d=body_h);\n            translate([body_l/2-4, 0, 0])\n                sphere(d=body_h);\n        }\n        \n        // cavity for the PCB\n        translate([-(body_l-2*shell_t)/2, 0, 0])\n            cube([body_l-2*shell_t, body_w-2*shell_t, body_h-2*shell_t], center=true);\n        \n        // key-ring hole\n        translate([body_l/2-2, 0, 0])\n            rotate([90,0,0])\n                cylinder(h=body_w+1, d=key_d, center=true);\n    }\n}\n\nmodule metal_tongue() {\n    // main metal shell\n    translate([body_l/2+metal_l/2, 0, 0])\n        cube([metal_l, metal_w, metal_h], center=true);\n    \n    // opening slit\n    translate([body_l/2+metal_l/2, 0, 0])\n        cube([metal_l+0.1, metal_w-4, metal_h-2.5], center=true);\n    \n    // four contact pads\n    for (i=[0:3]) {\n        translate([body_l/2+metal_l-2.5-i*2.2, 0, metal_h/2-0.3])\n            cube([1.5, 2.5, 0.4], center=true);\n    }\n}\n\nmodule activity_led() {\n    // small dome LED window\n    translate([-(body_l/2-8), 0, body_h/2-shell_t])\n        sphere(d=2.2, $fn=32);\n}\n\n// --------------- ASSEMBLY ---------------\nunion() {\n    color(\"black\") body_shell();\n    color(\"silver\") metal_tongue();\n    color(\"red\") activity_led();\n}",
    "renders": true
  },
  {
    "household_item": "stick",
    "openscad_code": "// Realistic stick with bark texture and natural taper\n// Designed for 3D printing - 80mm long, 5mm diameter at base\n\nmodule bark_ring(height, radius, noise) {\n    // Create a ring of cubes to simulate bark texture\n    for (i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([radius, 0, height])\n        rotate([0, 90, 0])\n        scale([1, noise, 1])\n        cube([1, 1, 0.5], center=true);\n    }\n}\n\nmodule stick_segment(z_pos, base_radius, top_radius, segment_height) {\n    // Tapered cylinder for main structure\n    cylinder(h=segment_height, r1=base_radius, r2=top_radius, $fn=16);\n    \n    // Add bark texture rings along segment\n    for (z = [0:2:segment_height-1]) {\n        radius = base_radius + (top_radius - base_radius) * (z / segment_height);\n        bark_ring(z + z_pos, radius, 0.3 + sin(z * 3) * 0.2);\n    }\n}\n\nmodule stick_branch(angle, length, start_radius) {\n    // Branch coming off main stick\n    rotate([angle, 0, 0])\n    translate([0, 0, 0])\n    cylinder(h=length, r1=start_radius, r2=start_radius*0.3, $fn=12);\n    \n    // Add small twigs\n    for (i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([0, start_radius*0.5, length*0.7])\n        rotate([90, 0, 0])\n        cylinder(h=length*0.4, r=start_radius*0.2, r2=0, $fn=8);\n    }\n}\n\n// Main stick construction\nunion() {\n    // Base segment - thickest\n    stick_segment(0, 5, 4.2, 15);\n    \n    // Middle segments - gradually tapering\n    stick_segment(15, 4.2, 3.5, 15);\n    stick_segment(30, 3.5, 2.8, 15);\n    stick_segment(45, 2.8, 2.2, 15);\n    \n    // Top segment - thinnest\n    stick_segment(60, 2.2, 1.5, 15);\n    \n    // Main branch\n    translate([0, 0, 45])\n    stick_branch(45, 20, 1.8);\n    \n    // Secondary branch\n    translate([0, 0, 30])\n    rotate([0, 0, 120])\n    stick_branch(30, 12, 1.2);\n}\n\n// Add broken end detail at top\ndifference() {\n    translate([0, 0, 75])\n    cylinder(h=5, r=1.5, $fn=16);\n    \n    // Create jagged broken end\n    for (i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([1, 0, 0])\n        cube([2, 0.5, 5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "card",
    "openscad_code": "// Realistic playing card – 3D printable\n// Overall dimensions: 63 mm × 88 mm × 2 mm (standard poker size, 2 mm thick)\n\n// Parameters\ncard_w  = 63;\ncard_h  = 88;\ncard_t  = 2;\ncorner_r = 3;          // rounded corner radius\npip_r    = 4;          // pip (heart) radius\nwall     = 1;          // printable wall thickness\neps      = 0.01;       // small offset for clean booleans\n\n// Main card body with rounded corners\nmodule card_body() {\n    // rounded rectangle via hull of four cylinders\n    hull() {\n        for(dx = [corner_r, card_w-corner_r],\n            dy = [corner_r, card_h-corner_r])\n            translate([dx, dy, 0])\n                cylinder(r=corner_r, h=card_t, $fn=20);\n    }\n}\n\n// Simple stylized heart symbol (pip)\nmodule heart() {\n    // two spheres for lobes\n    union() {\n        translate([-pip_r/2, 0, 0]) sphere(r=pip_r, $fn=20);\n        translate([ pip_r/2, 0, 0]) sphere(r=pip_r, $fn=20);\n        // rotated cube for point\n        rotate([0,0,45]) translate([0, -pip_r*0.7, 0])\n            cube([pip_r*2, pip_r*2, pip_r*2], center=true);\n    }\n}\n\n// Raised pip on the card surface (z = card_t)\nmodule raised_pip() {\n    difference() {\n        heart();\n        translate([0,0,-eps]) scale([0.9,0.9,0.9]) heart();\n    }\n}\n\n// Raised index characters (simplified as thin blocks)\nmodule index(char=\"A\") {\n    scale([0.5,1,1]) cube([8,10,card_t*0.6], center=true);\n}\n\n// Left-top corner decoration: index + pip\nmodule corner_decoration() {\n    translate([corner_r+2, corner_r+2, card_t-eps]) {\n        union() {\n            translate([0, -4, 0]) index(\"A\");\n            translate([0, 4, 0]) scale(0.5) raised_pip();\n        }\n    }\n}\n\n// Right-bottom corner decoration: mirrored & rotated\nmodule mirrored_corner() {\n    mirror([1,0,0]) rotate([0,0,180]) corner_decoration();\n}\n\n// Central pattern: 5 pips arranged like a real ace\nmodule central_pips() {\n    positions = [\n        [0, 0],\n        [-card_w/4, -card_h/4],\n        [ card_w/4, -card_h/4],\n        [-card_w/4,  card_h/4],\n        [ card_w/4,  card_h/4]\n    ];\n    for(p = positions) {\n        translate([p.x, p.y, card_t-eps])\n            scale(1.2) raised_pip();\n    }\n}\n\n// Full card assembly\nunion() {\n    // Base card\n    card_body();\n\n    // Raised features on front face\n    corner_decoration();\n    mirrored_corner();\n    central_pips();\n}",
    "renders": true
  },
  {
    "household_item": "reader",
    "openscad_code": "// Realistic-style e-reader (Kindle-like) – medium complexity\n// Overall size: 120 x 89 x 9 mm  (printable on most FDM printers)\n\n// ---------- PARAMETERS ----------\nbody_w = 120;\nbody_h = 89;\nbody_t = 9;\n\nscreen_w = 105;\nscreen_h = 75;\nscreen_depth = 0.8;\n\nbezel = 6;\n\nbutton_w = 10;\nbutton_h = 3;\nbutton_d = 2;\nbutton_gap = 2;\n\nusb_w = 7;\nusb_h = 2.5;\nusb_deep = 6;\n\ncorner_r = 3;\nwall = 1.5;\n\n// ---------- HELPERS ----------\nmodule rounded_box(size, r, center = false) {\n    translate(center ? -size/2 : [0,0,0])\n    hull() {\n        for(x = [r, size.x - r], y = [r, size.y - r], z = [r, size.z - r])\n            translate([x, y, z]) sphere(r);\n    }\n}\n\n// ---------- MAIN BODY ----------\ndifference() {\n    // outer shell\n    rounded_box([body_w, body_h, body_t], corner_r, center=true);\n\n    // hollow inside\n    translate([0,0,-wall])\n        rounded_box([body_w - 2*wall, body_h - 2*wall, body_t + 1], corner_r - wall, center=true);\n\n    // screen recess\n    translate([0, 0, body_t/2 - screen_depth])\n        cube([screen_w, screen_h, screen_depth*2], center=true);\n\n    // power button slot\n    translate([body_w/2 - wall/2, -body_h/2 + 15, 0])\n        rotate([90,0,0])\n        cylinder(h=button_d + 1, d=button_h, $fn=20);\n\n    // USB-C port\n    translate([-body_w/2 + 10, 0, -body_t/2 + usb_h/2 + wall])\n        cube([usb_deep, usb_w, usb_h]);\n}\n\n// ---------- SCREEN ----------\ntranslate([0, 0, (body_t/2) - screen_depth - 0.2])\n    color(\"black\")\n    cube([screen_w, screen_h, 0.4], center=true);\n\n// ---------- BUTTONS ----------\n// power button\ntranslate([body_w/2 - button_d/2 - wall, -body_h/2 + 15, 0])\n    rotate([90,0,0])\n    cylinder(h=button_d, d=button_h - 0.4, $fn=20);\n\n// page-turn buttons left/right\nfor(side = [-1, 1])\n    translate([0, side*(body_h/2 - button_gap - button_w/2), body_t/2 - button_d/2 - wall])\n    rotate([90,0,0])\n    cube([button_d, button_w, button_h], center=true);\n\n// ---------- SPEAKER GRILL HOLES ----------\ngrill_x = -body_w/2 + 20;\ngrill_y = body_h/2 - 12;\ngrill_z = body_t/2 - wall/2;\nfor(i=[0:5])\n    translate([grill_x + i*3, grill_y, grill_z])\n    rotate([0,90,0])\n    cylinder(h=wall + 0.1, d=1.2, $fn=8);",
    "renders": true
  },
  {
    "household_item": "harddisk",
    "openscad_code": "// 2.5\" SATA Hard Disk Drive – medium-complexity realistic printable model\n// 69 mm x 100 mm x 9.5 mm (1:1 scale, ready to print)\n\n$fn = 32;\n\n// overall size\nl = 100;  // length\nw = 69;   // width  \nh = 9.5;  // height\n\n// wall thickness for printability\nwall = 1.0;\n\nmodule main_case() {\n    difference() {\n        // outer block\n        translate([0,0,h/2])\n            cube([l,w,h], center=true);\n\n        // hollow inside\n        translate([0,0,h/2])\n            cube([l-wall*2, w-wall*2, h-wall], center=true);\n\n        // label recess on top\n        translate([l/2-30, w/2-20, h-0.2])\n            cube([28, 38, 0.4]);\n    }\n}\n\nmodule screw_holes() {\n    // standard 2.5\" HDD screw pattern\n    positions = [[10,10], [l-10,10], [10,w-10], [l-10,w-10]];\n    for(p = positions) {\n        translate([p.x, p.y, 0])\n            cylinder(h=h+0.1, d=3, center=false);\n    }\n}\n\nmodule sata_connector() {\n    // plastic body\n    translate([l+4.5, w/2, 3])\n        cube([8, 23, 6], center=true);\n\n    // 7-pin data section\n    color(\"gold\")\n    for(i=[0:6]) {\n        translate([l+6, w/2-9+i*2.7, 2.5])\n            cube([1.5, 1.2, 1]);\n    }\n\n    // 15-pin power section\n    color(\"gold\")\n    for(i=[0:14]) {\n        translate([l+6, w/2-9+i*1.27, 0.5])\n            cube([1.5, 0.8, 1]);\n    }\n}\n\nmodule circuit_board() {\n    translate([l/2-15, w/2-15, h-1])\n        cube([30, 30, 0.8]);\n}\n\nmodule label() {\n    translate([l/2-20, w/2-15, h-0.01])\n        cube([40, 30, 0.01]);\n}\n\n// assembly\ndifference() {\n    union() {\n        main_case();\n        sata_connector();\n        circuit_board();\n    }\n    screw_holes();\n}",
    "renders": true
  },
  {
    "household_item": "nas",
    "openscad_code": "// NAS (Network Attached Storage) - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall dimensions\nnas_width = 80;\nnas_height = 45;\nnas_depth = 120;\nwall_thickness = 2;\n\n// Drive bay dimensions\ndrive_width = 10;\ndrive_height = 7;\ndrive_depth = 5;\ndrive_bays = 4;\n\n// Fan dimensions\nfan_diameter = 20;\nfan_depth = 5;\n\n// LED indicators\nled_diameter = 3;\nled_spacing = 5;\n\n// Main chassis\nmodule nas_body() {\n    difference() {\n        // Outer shell\n        cube([nas_width, nas_depth, nas_height], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness/2])\n            cube([nas_width-wall_thickness*2, nas_depth-wall_thickness*2, nas_height-wall_thickness], center=true);\n        \n        // Front panel cutout\n        translate([0, nas_depth/2 - wall_thickness, 0])\n            cube([nas_width-wall_thickness*4, wall_thickness*2, nas_height-wall_thickness*2], center=true);\n    }\n}\n\n// Front panel with drive bays\nmodule front_panel() {\n    translate([0, nas_depth/2 - wall_thickness/2, 0]) {\n        difference() {\n            // Panel plate\n            cube([nas_width-wall_thickness*2, wall_thickness, nas_height-wall_thickness*2], center=true);\n            \n            // Drive bay slots\n            for(i = [0:drive_bays-1]) {\n                translate([(i - (drive_bays-1)/2) * (drive_width + 5), 0, -nas_height/4])\n                    cube([drive_width, wall_thickness+1, drive_height], center=true);\n            }\n            \n            // Ventilation holes\n            for(x = [-30:5:30]) {\n                for(y = [-15:5:15]) {\n                    translate([x, 0, y])\n                        cylinder(h=wall_thickness+1, d=2, center=true);\n                }\n            }\n        }\n        \n        // LED indicators\n        for(i = [0:2]) {\n            translate([nas_width/2 - 10 - i*led_spacing, wall_thickness/2 + 0.5, nas_height/2 - 8])\n                cylinder(h=1, d=led_diameter);\n        }\n    }\n}\n\n// Rear panel with fan and ports\nmodule rear_panel() {\n    translate([0, -nas_depth/2 + wall_thickness/2, 0]) {\n        difference() {\n            // Panel plate\n            cube([nas_width-wall_thickness*2, wall_thickness, nas_height-wall_thickness*2], center=true);\n            \n            // Fan opening\n            translate([0, 0, 0])\n                cylinder(h=wall_thickness+1, d=fan_diameter, center=true);\n            \n            // Fan blades (simplified)\n            for(i = [0:5]) {\n                rotate([0, 0, i*60])\n                    translate([0, 0, 0])\n                        cube([2, fan_diameter/2-2, wall_thickness+0.5], center=true);\n            }\n            \n            // Ethernet ports\n            translate([-15, 0, 10])\n                cube([8, wall_thickness+1, 6], center=true);\n            translate([15, 0, 10])\n                cube([8, wall_thickness+1, 6], center=true);\n            \n            // Power connector\n            translate([0, 0, -10])\n                cube([10, wall_thickness+1, 8], center=true);\n        }\n    }\n}\n\n// Side vents for cooling\nmodule side_vents() {\n    for(side = [-1, 1]) {\n        translate([side * (nas_width/2 - wall_thickness/2), 0, 0]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cube([nas_depth-wall_thickness*2, nas_height-wall_thickness*2, wall_thickness], center=true);\n                    for(x = [-50:8:50]) {\n                        for(y = [-15:6:15]) {\n                            translate([x, y, 0])\n                                cube([6, 2, wall_thickness+1], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(x = [-nas_width/3, nas_width/3]) {\n        for(y = [-nas_depth/3, nas_depth/3]) {\n            translate([x, y, -nas_height/2 + 1])\n                cylinder(h=2, d=4, $fn=20);\n        }\n    }\n}\n\n// Assemble the NAS\nunion() {\n    nas_body();\n    front_panel();\n    rear_panel();\n    side_vents();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "enclosure",
    "openscad_code": "// Medium-Complexity Realistic Electronics Enclosure\n// External dimensions: 80 x 60 x 25 mm\n// Wall thickness: 2 mm\n// Designed for 3D printing (no overhangs >45°, all bridges ≤5 mm)\n\n// Parameters ----------------------------------------------------------\nwall = 2;           // Shell thickness\nbase_h = 22;        // Total height\nlid_h  = 3;         // Lid thickness\nouter_w = 80;       // External width\nouter_d = 60;       // External depth\ninner_w = outer_w - 2*wall;\ninner_d = outer_d - 2*wall;\ninner_h = base_h  - lid_h - wall;\n\n// Screw posts\npost_d = 6;\npost_h = inner_h;\nscrew_r = 1.5;\nscrew_h = post_h + lid_h;\n\n// Ventilation slots\nslot_w = 1.5;\nslot_h = 4;\nslot_sep = 5;\nslot_rows = 2;\n\n// USB / cable cutouts\nusb_w = 12;\nusb_h = 8;\nusb_d = 4;\n\n// Main assembly -------------------------------------------------------\ndifference() {\n    union() {\n        base_shell();\n        lid_plate();\n    }\n    \n    // Hollow out interior\n    translate([wall, wall, lid_h])\n        cube([inner_w, inner_d, inner_h + 1]);\n    \n    // Screw holes\n    screw_holes();\n    \n    // Cable cutouts\n    cutouts();\n}\n\n// Base shell with vents ----------------------------------------------\nmodule base_shell() {\n    difference() {\n        // Main box\n        cube([outer_w, outer_d, base_h]);\n        \n        // Rounded top edge\n        translate([-1, -1, base_h - wall])\n        minkowski() {\n            cube([outer_w + 2, outer_d + 2, 1]);\n            cylinder(r = wall, h = 0.1, $fn = 32);\n        }\n        \n        // Vent slots on back face\n        vent_slots();\n    }\n}\n\n// Ventilation slots ---------------------------------------------------\nmodule vent_slots() {\n    // Two rows\n    for (row = [0:1]) {\n        for (i = [0:floor((outer_d - 2*wall)/slot_sep)]) {\n            translate([\n                0,\n                wall + i*slot_sep + slot_sep/2,\n                lid_h + wall + row*(slot_h + 2)\n            ])\n            cube([wall, slot_w, slot_h]);\n        }\n    }\n}\n\n// Lid plate ----------------------------------------------------------\nmodule lid_plate() {\n    difference() {\n        translate([0, 0, base_h - lid_h])\n            cube([outer_w, outer_d, lid_h + 1]);\n        \n        // Recess for label\n        translate([5, 5, base_h - lid_h + 0.5])\n            cube([outer_w - 10, outer_d - 10, 0.5]);\n    }\n}\n\n// Screw posts ---------------------------------------------------------\nmodule screw_holes() {\n    // Four corner posts\n    for (x = [wall + 5, outer_w - wall - 5])\n    for (y = [wall + 5, outer_d - wall - 5]) {\n        translate([x, y, lid_h])\n            cylinder(r = screw_r, h = screw_h, $fn = 16);\n    }\n}\n\n// Side cutouts --------------------------------------------------------\nmodule cutouts() {\n    // USB cutout on front\n    translate([outer_w/2 - usb_w/2, 0, lid_h + wall])\n        cube([usb_w, wall, usb_h]);\n    \n    // Power barrel jack on left\n    translate([0, outer_d/2 - usb_w/2, lid_h + wall])\n        cube([wall, usb_w, usb_h]);\n}",
    "renders": true
  },
  {
    "household_item": "cooling",
    "openscad_code": "// OpenSCAD Cooling Tower (realistic, medium complexity)\n// 2024 – 3D-printable model, ~70 mm tall\n\n$fn = 36;            // smooth cylinders & spheres\nwall = 2;            // printable wall thickness\n\nmodule cooling_tower() {\n    /* Main hyperboloid shell */\n    difference() {\n        // outer surface, built from stacked cylinders\n        for (i = [0:4]) {\n            h = i * 12;\n            r = 25 - i * 2.2;               // taper upward\n            translate([0, 0, h])\n                cylinder(h = 12, d1 = r * 2, d2 = (r - 2) * 2, center = false);\n        }\n\n        // inner void, leaving wall thickness\n        for (i = [0:4]) {\n            h = i * 12 + wall;\n            r = 25 - i * 2.2 - wall;\n            translate([0, 0, h])\n                cylinder(h = 12 - wall * 1.2, d1 = r * 2, d2 = (r - 2) * 2, center = false);\n        }\n    }\n\n    /* Top rim lip */\n    translate([0, 0, 60])\n        difference() {\n            cylinder(h = 4, d = 38, center = false);\n            cylinder(h = 4.5, d = 34, center = false);\n        }\n\n    /* Base ring footing */\n    translate([0, 0, -2])\n        difference() {\n            cylinder(h = 6, d = 52, center = false);\n            cylinder(h = 7, d = 46, center = false);\n        }\n\n    /* Water-distribution pipes around the rim */\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([20, 0, 55])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 3, center = false);\n    }\n\n    /* Fill-support platform inside (perforated) */\n    translate([0, 0, 25])\n        difference() {\n            cylinder(h = 4, d = 42, center = false);\n            for (x = [-15:5:15])\n                for (y = [-15:5:15])\n                    translate([x, y, -1])\n                        cube([3, 3, 6], center = true);\n        }\n\n    /* Drain outlet at base */\n    rotate([90, 0, 0])\n        translate([0, 0, -26])\n            cylinder(h = 12, d = 8, center = false);\n}\n\ncooling_tower();",
    "renders": true
  },
  {
    "household_item": "dock",
    "openscad_code": "// Realistic Medium-Complexity Dock Model\n// Approx. 85 mm x 40 mm x 12 mm\n\n// Main dimensions\ndock_length = 85;\ndock_width  = 40;\ndeck_height = 3;\npiling_d    = 4;\npiling_h    = 9;\nramp_len    = 20;\nramp_w      = 18;\ngap         = 2;  // clearance for 3D printing\n\n// Deck planks\nplank_w = 5;\nplank_gap = 1;\n\nmodule deck_planks(len=dock_length){\n    for(i=[0:ceil((dock_width-2)/(plank_w+plank_gap))-1]){\n        translate([0, i*(plank_w+plank_gap), 0])\n            cube([len, plank_w, deck_height], center=false);\n    }\n}\n\nmodule dock_frame(){\n    difference(){\n        union(){\n            // Main deck\n            cube([dock_length, dock_width, deck_height], center=false);\n            // Side rails\n            translate([0, -3, deck_height])\n                cube([dock_length, 3, 3]);\n            translate([0, dock_width, deck_height])\n                cube([dock_length, 3, 3]);\n            // End caps\n            cube([3, dock_width+6, deck_height+3], center=false);\n            translate([dock_length-3, 0, 0])\n                cube([3, dock_width+6, deck_height+3], center=false);\n        }\n        // Hollow interior for lighter print\n        translate([gap, gap, -1])\n            cube([dock_length-gap*2, dock_width-gap*2, deck_height+2]);\n    }\n}\n\nmodule piling(x,y){\n    difference(){\n        // Piling post\n        translate([x, y, 0])\n            cylinder(d=piling_d, h=piling_h+deck_height, $fn=16);\n        // Chamfer top\n        translate([x, y, piling_h+deck_height-2])\n            cylinder(d1=piling_d, d2=piling_d*0.7, h=2, $fn=16);\n    }\n}\n\nmodule ramp(){\n    hull(){\n        translate([dock_length, dock_width/2, 0])\n            cube([ramp_len, ramp_w, 2], center=true);\n        translate([dock_length+ramp_len-5, dock_width/2, -6])\n            cube([ramp_len*0.8, ramp_w*0.8, 2], center=true);\n    }\n}\n\nmodule cleat(x,y){\n    difference(){\n        union(){\n            // Base\n            translate([x,y,deck_height])\n                cube([8,4,2], center=true);\n            // Horns\n            translate([x,y+2,deck_height+1])\n                cube([2,8,2], center=true);\n            translate([x,y-2,deck_height+1])\n                cube([2,8,2], center=true);\n        }\n        // Rope hole\n        translate([x,y,deck_height+1])\n            rotate([90,0,0])\n                cylinder(d=2, h=10, center=true, $fn=16);\n    }\n}\n\n// Assembly\nunion(){\n    // Frame with hollowed deck\n    dock_frame();\n    \n    // Deck planking on top\n    translate([0,0,0])\n        deck_planks();\n    \n    // Pilings\n    piling(5, 5);\n    piling(5, dock_width-5);\n    piling(dock_length-5, 5);\n    piling(dock_length-5, dock_width-5);\n    \n    // Ramp for boat access\n    ramp();\n    \n    // Mooring cleats\n    cleat(15, dock_width/2);\n    cleat(dock_length-15, dock_width/2);\n}",
    "renders": true
  },
  {
    "household_item": "holder",
    "openscad_code": "// Realistic Desk Phone Holder\n// Holds a smartphone at a 70° viewing angle with cable routing\n\n// Parameters\nphone_width = 70;\nphone_thickness = 10;\nphone_height = 140;\nwall = 2;\nbase_depth = 80;\nbase_width = 90;\nbase_height = 15;\nslot_width = 12;\nslot_depth = 8;\n\n// Main module\nmodule phone_holder() {\n    // Base platform\n    difference() {\n        rounded_base();\n        \n        // Cable channel\n        translate([0, -base_depth/2, 0])\n            cube([slot_width, slot_depth, base_height+1], center=true);\n    }\n    \n    // Back support\n    support_back();\n    \n    // Side supports\n    translate([phone_width/2 + wall, 0, 0])\n        support_side();\n    translate([-phone_width/2 - wall, 0, 0])\n        mirror([1,0,0]) support_side();\n    \n    // Front lip\n    translate([0, base_depth/2 - wall - 2, base_height/2])\n        cube([phone_width + 2*wall, wall + 2, wall + 2], center=true);\n    \n    // Cable notch in back\n    translate([0, -base_depth/2 - wall/2, phone_height*0.3])\n        rotate([0, 70, 0])\n        cube([phone_height*0.4, wall*2, wall*2], center=true);\n}\n\n// Rounded base with fillets\nmodule rounded_base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded edges\n        for(x = [-base_width/2+wall, base_width/2-wall])\n        for(y = [-base_depth/2+wall, base_depth/2-wall]) {\n            translate([x, y, base_height-wall])\n                sphere(wall, $fn=20);\n        }\n    }\n}\n\n// Back support with angle\nmodule support_back() {\n    angle = 70;\n    support_height = phone_height * 0.8;\n    \n    translate([0, -base_depth/2 + wall + 2, base_height])\n        rotate([0, -angle, 0])\n        difference() {\n            // Main support\n            translate([0, -support_height/2, 0])\n                cube([phone_width + 2*wall, support_height, wall*2], center=true);\n            \n            // Ventilation slots\n            for(i = [1:3:9]) {\n                translate([0, -i*support_height/10, 0])\n                    cube([phone_width + wall, 1, wall*2 + 1], center=true);\n            }\n        }\n}\n\n// Side support bracket\nmodule support_side() {\n    translate([0, 0, base_height/2 + phone_height/4])\n        union() {\n            // Vertical strut\n            cube([wall, wall*3, phone_height/2], center=true);\n            \n            // Horizontal brace\n            translate([0, wall*1.5, -phone_height/4 + wall*1.5])\n                cube([wall, wall*1.5, wall*3], center=true);\n        }\n}\n\n// Generate model\nphone_holder();",
    "renders": true
  },
  {
    "household_item": "mount",
    "openscad_code": "// Camera Tripod Mount for DSLR\n// Overall size: 80x60x45mm\n\n// Parameters\n$fn = 32;\nplate_thickness = 4;\nbase_width = 60;\nbase_depth = 60;\nbase_height = 15;\npost_diameter = 20;\npost_height = 30;\nplate_width = 40;\nplate_depth = 80;\nplate_hole_diameter = 6;\nplate_hole_spacing = 20;\nscrew_diameter = 1/4 * 25.4; // 1/4-20 standard tripod screw\nclearance = 0.3; // print clearance\nwall_thickness = 3;\n\n// Main assembly\nunion() {\n    // Base plate with rounded corners\n    base();\n    \n    // Central post\n    translate([0, 0, base_height])\n        post();\n    \n    // Camera plate on top\n    translate([0, 0, base_height + post_height])\n        camera_plate();\n    \n    // Reinforcement ribs\n    ribs();\n    \n    // Bottom anti-slip pads (4 corners)\n    anti_slip_pads();\n}\n\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_width);\n        \n        // Central cavity for weight reduction\n        translate([0, 0, clearance])\n            cylinder(h = base_height - clearance, d = base_width - 2*wall_thickness);\n        \n        // Bottom chamfer\n        translate([0, 0, base_height - 2])\n            cylinder(h = 2, d1 = base_width - 4, d2 = base_width);\n    }\n    \n    // Mounting holes for tripod (3 holes at 120 degrees)\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([base_width/2 - 8, 0, -1])\n                cylinder(h = base_height + 2, d = 4.5);\n    }\n}\n\nmodule post() {\n    difference() {\n        // Main post\n        cylinder(h = post_height, d = post_diameter);\n        \n        // Internal hole for 1/4-20 threaded insert\n        translate([0, 0, -clearance])\n            cylinder(h = post_height + 2*clearance, d = screw_diameter + 1);\n    }\n}\n\nmodule camera_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, -plate_thickness/2])\n            cube([plate_width, plate_depth, plate_thickness], center = true);\n        \n        // Rounded corners\n        for(x = [-1:1:1]) {\n            for(y = [-1:1:1]) {\n                translate([x * (plate_width/2 - 5), y * (plate_depth/2 - 5), -1])\n                    cylinder(h = plate_thickness + 2, d = 10);\n            }\n        }\n        \n        // Camera mounting slot (1/4-20 camera screw)\n        translate([0, plate_depth/4, -1])\n            cube([screw_diameter + 2, 25, plate_thickness + 2], center = true);\n        \n        // Safety stop holes\n        translate([-plate_hole_spacing/2, -plate_depth/3, -1])\n            cylinder(h = plate_thickness + 2, d = plate_hole_diameter);\n        translate([plate_hole_spacing/2, -plate_depth/3, -1])\n            cylinder(h = plate_thickness + 2, d = plate_hole_diameter);\n    }\n}\n\nmodule ribs() {\n    // Four reinforcement ribs between post and base\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 0])\n                rib();\n    }\n}\n\nmodule rib() {\n    intersection() {\n        // Main rib shape\n        translate([base_width/2 - 5, -wall_thickness/2, base_height/2])\n            cube([10, wall_thickness, base_height]);\n        \n        // Angled cut for smooth transition\n        rotate([0, 45, 0])\n            translate([-base_width/2, -base_width, -base_width/2])\n                cube(base_width);\n    }\n}\n\nmodule anti_slip_pads() {\n    // Four rubber feet locations\n    for(x = [-1:1:1]) {\n        for(y = [-1:1:1]) {\n            translate([x * (base_width/2 - 8), y * (base_width/2 - 8), -0.1])\n                cylinder(h = 0.5, d = 6);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "tripod",
    "openscad_code": "// Realistic medium-complexity 3D-printable tripod\n// Size: 80 mm tall, 60 mm spread\n\n$fn = 36;           // Circle quality\nwall = 2;           // 3D-print friendly wall thickness\n\n// Main assembly\ndifference() {\n    union() {\n        head();             // Camera mount head\n        center_column();    // Telescoping center column\n        legs();             // Three legs\n    }\n    // Remove holes for screws\n    translate([0,0,77]) cylinder(h=10,d=3,center=true);\n    translate([0,0,12]) cylinder(h=30,d=6,center=true);\n}\n\nmodule head() {\n    // Top plate\n    cube([20,15,3], center=true);\n    // Quick-release dovetail mount\n    translate([0,0,1.5]) {\n        difference() {\n            cube([18,12,6], center=true);\n            translate([0,0,3]) cube([16,10,6], center=true);\n        }\n    }\n    // Knobs\n    translate([-10,8,5]) rotate([90,0,0]) cylinder(h=4,d=4,center=true);\n    translate([10,8,5]) rotate([90,0,0]) cylinder(h=4,d=4,center=true);\n}\n\nmodule center_column() {\n    // Outer tube\n    difference() {\n        cylinder(h=50, d1=12, d2=10);\n        translate([0,0,-1]) cylinder(h=52, d1=8, d2=6);\n    }\n    // Lock collar\n    translate([0,0,30]) difference() {\n        cylinder(h=8, d=16);\n        translate([0,0,-1]) cylinder(h=10, d=12);\n    }\n}\n\nmodule legs() {\n    // Generate three legs at 120° intervals\n    for (i=[0:120:240]) {\n        rotate([0,0,i])\n        translate([0,9,15])\n        rotate([75,0,0])\n        leg();\n    }\n}\n\nmodule leg() {\n    // Upper segment\n    upper = 30;\n    difference() {\n        cube([8,8,upper], center=true);\n        translate([0,0,-1]) cube([4,4,upper+2], center=true);\n    }\n    \n    // Middle segment (telescoping)\n    translate([0,0,upper+5])\n    difference() {\n        cube([6,6,25], center=true);\n        translate([0,0,-1]) cube([3,3,27], center=true);\n    }\n    \n    // Lower segment\n    translate([0,0,upper+30])\n    difference() {\n        cube([4,4,20], center=true);\n        translate([0,0,-1]) cube([2,2,22], center=true);\n    }\n    \n    // Rubber foot\n    translate([0,0,upper+45])\n    sphere(d=6);\n    \n    // Leg lock levers\n    translate([6,0,15]) rotate([0,90,0]) cylinder(h=8,d=3);\n    translate([6,0,35]) rotate([0,90,0]) cylinder(h=8,d=3);\n}",
    "renders": true
  },
  {
    "household_item": "gimbal",
    "openscad_code": "// 3-Axis Camera Gimbal – roughly 70 mm cube\n// Frame thickness: 2 mm everywhere for reliable FDM printing\n// All overhangs ≤ 45° or bridged, no supports needed\n\n$fa = 2;\n$fs = 0.5;\n\nmodule rounded_cube(size, r, center = false) {\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([size.x-r,r,r]) sphere(r);\n        translate([r,size.y-r,r]) sphere(r);\n        translate([size.x-r,size.y-r,r]) sphere(r);\n        translate([r,r,size.z-r]) sphere(r);\n        translate([size.x-r,r,size.z-r]) sphere(r);\n        translate([r,size.y-r,size.z-r]) sphere(r);\n        translate([size.x-r,size.y-r,size.z-r]) sphere(r);\n        if (!center) {\n            for (p = [[r,r,r],[size.x-r,r,r],[r,size.y-r,r],[size.x-r,size.y-r,r],\n                       [r,r,size.z-r],[size.x-r,r,size.z-r],[r,size.y-r,size.z-r],[size.x-r,size.y-r,size.z-r]])\n                translate(p) sphere(r);\n        }\n    }\n}\n\n// Motor pod – simple cylindrical housing\nmodule motor_pod(len = 12, dia = 20) {\n    difference() {\n        cylinder(h = len, d = dia);\n        translate([0,0,-1]) cylinder(h = len+2, d = dia - 4);\n    }\n    // Wire notch\n    translate([dia/2-1,0,len/2]) rotate([90,0,0])\n        cylinder(h = 4, d = 3, $fn = 8);\n}\n\n// Yaw arm – outer frame\nmodule yaw_arm() {\n    difference() {\n        rounded_cube([70,70,4], 3);\n        translate([0,0,-1]) rounded_cube([66,66,6], 2);\n    }\n    // Motor boss\n    translate([0,0,2]) cylinder(h = 5, d = 22);\n}\n\n// Roll arm – middle U-shape\nmodule roll_arm() {\n    difference() {\n        union() {\n            // Base plate\n            translate([0,0,0]) rounded_cube([66,4,50], 3);\n            // Side struts\n            for (y = [-31,31])\n                translate([0,y,25]) rounded_cube([66,4,50], 3);\n        }\n        // Hollow\n        translate([0,0,-1]) rounded_cube([62,8,46], 2);\n    }\n    // Motors\n    translate([0,31,25]) motor_pod();\n    translate([0,-31,25]) motor_pod();\n}\n\n// Pitch arm – inner camera cradle\nmodule pitch_arm() {\n    difference() {\n        union() {\n            // Front plate\n            translate([0,0,0]) rounded_cube([60,40,4], 3);\n            // Side rings\n            for (y = [-18,18])\n                translate([0,y,20]) rotate([90,0,0])\n                    difference() {\n                        cylinder(h = 4, d = 40);\n                        translate([0,0,-1]) cylinder(h = 6, d = 36);\n                    }\n        }\n        // Camera cavity\n        translate([0,0,2]) rounded_cube([54,34,10], 2);\n    }\n    // Motors\n    translate([0,18,20]) rotate([90,0,0]) motor_pod();\n    translate([0,-18,20]) rotate([90,0,0]) motor_pod();\n}\n\n// Assembly\nyaw_arm();\ntranslate([0,0,26]) roll_arm();\ntranslate([0,0,51]) pitch_arm();",
    "renders": true
  },
  {
    "household_item": "selfie",
    "openscad_code": "// Realistic selfie phone model with medium complexity\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n$fn = 32;\n\n// Phone body module\nmodule phone_body() {\n    difference() {\n        // Main phone body\n        union() {\n            // Back panel\n            translate([0, 0, 2])\n                cube([68, 138, 7], center=true);\n            \n            // Rounded edges\n            translate([34, 0, 5.5])\n                cylinder(h=7, r=3, center=true);\n            translate([-34, 0, 5.5])\n                cylinder(h=7, r=3, center=true);\n            translate([0, 69, 5.5])\n                cube([62, 6, 7], center=true);\n            translate([0, -69, 5.5])\n                cube([62, 6, 7], center=true);\n        }\n        \n        // Camera hole\n        translate([20, 50, 8.5])\n            cylinder(h=3, r=4, center=true);\n        \n        // Flash hole\n        translate([-20, 50, 8.5])\n            cylinder(h=3, r=2.5, center=true);\n        \n        // Speaker holes\n        for (x = [-30:10:30]) {\n            translate([x, -65, 8.5])\n                cylinder(h=3, r=1, center=true);\n        }\n    }\n}\n\n// Screen module\nmodule screen() {\n    difference() {\n        // Screen glass\n        translate([0, 0, 9])\n            cube([64, 134, 0.5], center=true);\n        \n        // Screen display area\n        translate([0, 0, 9.3])\n            cube([60, 120, 0.1], center=true);\n    }\n}\n\n// Front camera module\nmodule front_camera() {\n    translate([0, 55, 9.3])\n        union() {\n            // Camera housing\n            cylinder(h=1.5, r=4, center=true);\n            \n            // Camera lens\n            translate([0, 0, 0.8])\n                cylinder(h=0.5, r=2.5, center=true);\n            \n            // Speaker grill\n            translate([0, -8, 0])\n                cube([15, 1, 1.5], center=true);\n        }\n}\n\n// Home button\nmodule home_button() {\n    translate([0, -55, 9.3])\n        difference() {\n            cylinder(h=1, r=5, center=true);\n            translate([0, 0, 0.5])\n                cube([2, 2, 1.1], center=true);\n        }\n}\n\n// Side buttons\nmodule side_buttons() {\n    // Power button\n    translate([35, 20, 8])\n        cube([2, 15, 3], center=true);\n    \n    // Volume buttons\n    translate([-35, 10, 8])\n        cube([2, 10, 3], center=true);\n    translate([-35, -10, 8])\n        cube([2, 10, 3], center=true);\n}\n\n// Selfie stick handle\nmodule selfie_stick() {\n    translate([0, 0, -35])\n        union() {\n            // Main pole\n            cylinder(h=60, r=6, center=true);\n            \n            // Grip texture\n            for (i = [1:6]) {\n                rotate([0, 0, i * 60])\n                    translate([0, 0, -35])\n                        cylinder(h=40, r=6.5, center=true);\n            }\n            \n            // Base\n            translate([0, 0, -65])\n                cylinder(h=5, r=8, center=true);\n        }\n}\n\n// Phone mount\nmodule phone_mount() {\n    translate([0, 0, -5])\n        difference() {\n            // Mount base\n            cylinder(h=10, r=10, center=true);\n            \n            // Mount hole\n            cylinder(h=12, r=6.2, center=true);\n            \n            // Phone slot\n            translate([0, 0, 4])\n                cube([70, 10, 8], center=true);\n        }\n}\n\n// Generate complete model\nunion() {\n    // Phone assembly\n    translate([0, 0, 0])\n        union() {\n            phone_body();\n            screen();\n            front_camera();\n            home_button();\n            side_buttons();\n        }\n    \n    // Mount and stick\n    phone_mount();\n    selfie_stick();\n}",
    "renders": true
  },
  {
    "household_item": "bracelet",
    "openscad_code": "// Realistic Bracelet with Medium Complexity\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 50;  // Smooth curves for realistic look\n\nmodule bracelet_band() {\n    // Main torus shape for bracelet body\n    rotate_extrude(angle = 360) {\n        translate([30, 0, 0]) {\n            difference() {\n                square([5, 4], center = true);\n                translate([0, 1, 0]) square([4, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule clasp_hinge() {\n    // Hinge mechanism on one side\n    translate([32, 0, 0]) {\n        // Pin cylinder\n        rotate([90, 0, 0]) cylinder(h = 6, r = 1.2, center = true);\n        \n        // Hinge loops\n        for (i = [-1, 1]) {\n            translate([0, i * 1.5, 0]) {\n                difference() {\n                    rotate([90, 0, 0]) cylinder(h = 2, r = 2, center = true);\n                    rotate([90, 0, 0]) cylinder(h = 2.2, r = 1.3, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule clasp_latch() {\n    // Latching mechanism on opposite side\n    rotate([0, 0, 180]) translate([32, 0, 0]) {\n        // Male clasp part\n        translate([0, -2, 0]) {\n            cube([4, 3, 2], center = true);\n        }\n        \n        // Female receiver with spring gap\n        translate([0, 2, 0]) {\n            difference() {\n                cube([4, 4, 2], center = true);\n                translate([0, 0.5, 0]) cube([3.5, 2, 1.5], center = true);\n            }\n        }\n    }\n}\n\nmodule decorative_pattern() {\n    // Raised diamond texture pattern around bracelet\n    for (i = [0:15:359]) {\n        rotate([0, 0, i]) {\n            translate([30, 0, 2]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height = 0.5) {\n                        polygon(points = [\n                            [0, 0],\n                            [1.5, 0.75],\n                            [0, 1.5],\n                            [-1.5, 0.75]\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule sizing_indicator() {\n    // Small raised dots indicating size\n    for (i = [0:90:359]) {\n        rotate([0, 0, i]) {\n            translate([28, 0, 0]) {\n                sphere(r = 0.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base bracelet band\n    bracelet_band();\n    \n    // Clasp components\n    clasp_hinge();\n    clasp_latch();\n    \n    // Decorative elements\n    decorative_pattern();\n    sizing_indicator();\n}",
    "renders": true
  },
  {
    "household_item": "tracker",
    "openscad_code": "// Realistic GPS Tracker - OpenSCAD\n// Dimensions: 60 x 35 x 12mm\n// Medium complexity with functional details\n\n// Main body shell\nmodule tracker_body() {\n    difference() {\n        // Outer shell with rounded top\n        hull() {\n            translate([-30, -17.5, 0]) cube([60, 35, 8]);\n            translate([-30, -17.5, 4]) cube([60, 35, 8]);\n            translate([-25, -12.5, 10]) cube([50, 25, 2]);\n        }\n        \n        // Hollow interior\n        translate([-27, -14.5, 1]) cube([54, 29, 9]);\n        \n        // USB-C port\n        translate([29, -5, 2]) cube([2, 10, 4]);\n        \n        // Power button recess\n        translate([29, -2.5, 6]) cube([2, 5, 2]);\n        \n        // LED window\n        translate([-29, -2.5, 7]) cube([2, 5, 1]);\n    }\n}\n\n// Antenna pattern on top\nmodule antenna_lines() {\n    for(i = [-20:10:20]) {\n        translate([i, -15, 11]) cube([1, 30, 0.5]);\n    }\n    for(j = [-10:10:10]) {\n        translate([-25, j, 11]) cube([50, 1, 0.5]);\n    }\n}\n\n// Mounting clip on back\nmodule mounting_clip() {\n    difference() {\n        // Clip base\n        translate([-15, -15, -3]) cube([30, 30, 3]);\n        \n        // Spring space\n        translate([-10, -10, -2.5]) cube([20, 20, 2]);\n        \n        // Clip opening\n        translate([0, -15, -1.5]) cylinder(h=3, r=5);\n    }\n    \n    // Clip arms\n    translate([0, -20, -1]) cube([2, 5, 2]);\n    translate([0, 15, -1]) cube([2, 5, 2]);\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    difference() {\n        translate([-20, -10, -0.5]) cube([40, 20, 1]);\n        \n        // Screw holes\n        for(x = [-15, 15]) {\n            translate([x, -5, -0.2]) cylinder(h=2, r=1.5);\n            translate([x, 5, -0.2]) cylinder(h=2, r=1.5);\n        }\n        \n        // Grip texture\n        for(i = [-15:5:15]) {\n            translate([i, -9, 0]) cube([1, 18, 0.3]);\n        }\n    }\n}\n\n// Status LED\nmodule status_led() {\n    translate([-28, 0, 7.5]) {\n        difference() {\n            cylinder(h=1, r=2);\n            cylinder(h=2, r=1.5);\n        }\n    }\n}\n\n// USB-C connector detail\nmodule usb_c_port() {\n    translate([30, 0, 4]) {\n        difference() {\n            cube([1, 8, 2]);\n            translate([0, 0, 0.5]) cube([0.5, 6, 1]);\n        }\n    }\n}\n\n// Assembly\ntracker_body();\nantenna_lines();\nmounting_clip();\nbattery_cover();\nstatus_led();\nusb_c_port();",
    "renders": true
  },
  {
    "household_item": "watch",
    "openscad_code": "// OpenSCAD realistic medium-complexity watch\n// Designed for 3D printing, no extreme overhangs\n\n// Overall dimensions\nwatch_d = 42;           // case diameter\nwatch_h = 10;           // case height\nlug_w = 20;             // lug width\nband_thick = 2.5;       // band thickness\nband_len = 30;          // band stub length\n\n$fn = 50;               // global resolution\n\n// --- Main case ----------------------------------------------------------\nmodule watch_case() {\n    difference() {\n        // Main round body\n        cylinder(d=watch_d, h=watch_h, center=true);\n\n        // Recess dial opening\n        translate([0,0,watch_h/2-0.5])\n            cylinder(d=watch_d-6, h=2, center=false);\n\n        // Crown hole (side 3 o'clock)\n        translate([watch_d/2-0.5, 0, 0])\n            rotate([0,90,0])\n                cylinder(d=4, h=6, center=true);\n    }\n}\n\n// --- Lugs ---------------------------------------------------------------\nmodule lugs() {\n    for(side = [-1, 1])\n        translate([0, side*(watch_d/2+2), 0])\n            rotate([90,0,0])\n                difference() {\n                    // Solid lug\n                    cube([lug_w, 6, 8], center=true);\n\n                    // Pin hole\n                    translate([0, 0, 0])\n                        rotate([90,0,0])\n                            cylinder(d=1.8, h=lug_w+1, center=true);\n                }\n}\n\n// --- Crown --------------------------------------------------------------\nmodule crown() {\n    translate([watch_d/2+2, 0, 0])\n        rotate([0,90,0])\n            cylinder(d1=4, d2=6, h=5, center=true);\n}\n\n// --- Dial ---------------------------------------------------------------\nmodule dial() {\n    translate([0,0,watch_h/2-1])\n        difference() {\n            // Dial disc\n            cylinder(d=watch_d-6.2, h=1, center=false);\n\n            // Center hole for hands\n            cylinder(d=2.5, h=2, center=false);\n        }\n}\n\n// --- Hour & minute hands ------------------------------------------------\nmodule hands() {\n    // Hour hand\n    translate([0,0,watch_h/2+0.2])\n        rotate([0,0,-45])\n            cube([2, 10, 0.8], center=true);\n\n    // Minute hand\n    translate([0,0,watch_h/2+0.4])\n        rotate([0,0,30])\n            cube([1.5, 14, 0.8], center=true);\n}\n\n// --- Indices ------------------------------------------------------------\nmodule indices() {\n    for(i = [0:11]) {\n        angle = i*30;\n        length = (i%3==0)? 5 : 3;\n        width  = (i%3==0)? 1.2 : 0.8;\n\n        translate([0,0,watch_h/2-0.4])\n            rotate([0,0,angle])\n                translate([(watch_d-10)/2-length/2, 0, 0])\n                    cube([length, width, 0.6], center=true);\n    }\n}\n\n// --- Crystal (clear) ----------------------------------------------------\nmodule crystal() {\n    translate([0,0,watch_h/2+0.5])\n        cylinder(d=watch_d-6.2, h=1, center=true);\n}\n\n// --- Band stub ----------------------------------------------------------\nmodule band_stub() {\n    for(side = [-1, 1])\n        translate([0, side*(watch_d/2+2), -band_len/2-4])\n            cube([lug_w, band_thick, band_len], center=true);\n}\n\n// --- Assembly -----------------------------------------------------------\nunion() {\n    watch_case();\n    lugs();\n    crown();\n    dial();\n    indices();\n    hands();\n    crystal();\n    band_stub();\n}",
    "renders": true
  },
  {
    "household_item": "band",
    "openscad_code": "// Basic parameters\n$fn=50;\nband_width = 8;\nband_thickness = 2.2;\nband_radius = 30;\nnum_links = 20;\nlink_clearance = 0.4;\n\n// Main band assembly\nmodule band() {\n    // Create the repeating link pattern\n    for(i=[0:num_links-1]) {\n        rotate([0, 0, i * 360/num_links]) \n            translate([band_radius, 0, 0])\n                rotate([90, 0, 0])\n                    band_link();\n    }\n}\n\n// Individual band link with realistic detailing\nmodule band_link() {\n    difference() {\n        // Main link body\n        union() {\n            // Outer curved shell\n            hull() {\n                translate([-band_width/2, -band_thickness/2, -band_width/2])\n                    sphere(d=band_width*0.8);\n                translate([band_width/2, -band_thickness/2, -band_width/2])\n                    sphere(d=band_width*0.8);\n                translate([-band_width/2, -band_thickness/2, band_width/2])\n                    sphere(d=band_width*0.8);\n                translate([band_width/2, -band_thickness/2, band_width/2])\n                    sphere(d=band_width*0.8);\n            }\n            \n            // Connector pins\n            translate([-band_width/2 - 0.5, 0, 0])\n                cylinder(h=band_thickness, d=band_width*0.3, center=true);\n            translate([band_width/2 + 0.5, 0, 0])\n                cylinder(h=band_thickness, d=band_width*0.3, center=true);\n        }\n        \n        // Hinge holes\n        translate([-band_width/2 - 0.5, 0, 0])\n            cylinder(h=band_thickness+0.2, d=band_width*0.2, center=true);\n        translate([band_width/2 + 0.5, 0, 0])\n            cylinder(h=band_thickness+0.2, d=band_width*0.2, center=true);\n            \n        // Clearance cuts\n        translate([0, -band_thickness/2 - 0.1, 0])\n            cube([band_width*2, band_thickness+0.2, band_width+link_clearance], center=true);\n    }\n}\n\n// Buckle assembly\nmodule buckle() {\n    // Buckle frame\n    difference() {\n        // Main frame body\n        union() {\n            // Outer frame\n            translate([0, 0, 0])\n                cube([band_width*1.5, band_thickness, band_width*1.2], center=true);\n                \n            // Prongs\n            for(i=[-1, 1]) {\n                translate([i * band_width*0.4, 0, band_width*0.5])\n                    cube([band_width*0.15, band_thickness*0.8, band_width*0.3]);\n            }\n        }\n        \n        // Central opening\n        translate([0, 0, 0])\n            cube([band_width*1.2, band_thickness+0.2, band_width*0.8], center=true);\n            \n        // Adjustment holes slot\n        translate([0, 0, -band_width*0.7])\n            cube([band_width*1.3, band_thickness+0.2, band_width*0.3], center=true);\n    }\n    \n    // Adjustment holes\n    for(i=[1:5]) {\n        translate([0, 0, -band_width*0.7 - i*band_width*0.25])\n            cylinder(h=band_thickness+0.2, d=band_width*0.2, center=true);\n    }\n}\n\n// Assemble complete band\nunion() {\n    // Main band\n    band();\n    \n    // Buckle positioned at end\n    translate([band_radius + band_width/2, 0, 0])\n        rotate([90, 0, 0])\n            buckle();\n}",
    "renders": true
  },
  {
    "household_item": "pendant",
    "openscad_code": "// Realistic Heart Pendant – medium complexity\n// Overall height ~60 mm, 2 mm wall thickness, no overhangs\n\n$fn = 36;               // Smooth curves for 3-D printing\n\n// Parameters\nwall = 2;               // wall thickness\npivot = 8;              // bail radius\nlink_d = 1.2;           // bail opening diameter\n\n// Main heart body module\nmodule heart_body() {\n    difference() {\n        union() {\n            // Left lobe\n            translate([-10, 0, 0])\n                scale([1, 1, 0.8])\n                sphere(d = 20);\n\n            // Right lobe\n            translate([10, 0, 0])\n                scale([1, 1, 0.8])\n                sphere(d = 20);\n\n            // Central body tapering into point\n            hull() {\n                translate([ -7, 0, 0 ]) cylinder(d = 18, h = 20);\n                translate([  7, 0, 0 ]) cylinder(d = 18, h = 20);\n                translate([  0, -16, 5 ]) cylinder(d = 4, h = 15);\n            }\n        }\n\n        // Hollow interior\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 0.9])\n            heart_shell();\n    }\n}\n\n// Used for hollowing\nmodule heart_shell() {\n    union() {\n        translate([-10, 0, 0])\n            scale([1, 1, 0.8])\n            sphere(d = 20);\n        translate([10, 0, 0])\n            scale([1, 1, 0.8])\n            sphere(d = 20);\n        hull() {\n            translate([ -7, 0, 0 ]) cylinder(d = 18, h = 20);\n            translate([  7, 0, 0 ]) cylinder(d = 18, h = 20);\n            translate([  0, -16, 5 ]) cylinder(d = 4, h = 15);\n        }\n    }\n}\n\n// Bail loop for necklace cord\nmodule bail() {\n    rotate([90, 0, 0])\n    translate([0, 0, pivot])\n    difference() {\n        // Outer torus\n        rotate_extrude()\n            translate([pivot, 0, 0])\n            circle(r = wall);\n\n        // Cord hole\n        rotate_extrude()\n            translate([pivot - wall, 0, 0])\n            circle(r = link_d);\n\n        // Flat bottom to remove overhang\n        translate([0, 0, -wall - 0.1])\n            cube([pivot*2 + wall*2, pivot*2 + wall*2, wall*2 + 0.2], center = true);\n    }\n}\n\n// Surface detail: small arteries\nmodule arteries() {\n    for(a = [0:120:240]) {\n        rotate([0, 0, a])\n        translate([0, -10, 0])\n            rotate([90, 0, 0])\n            cylinder(d1 = 1.6, d2 = 0.6, h = 12);\n    }\n}\n\n// Assemble pendant\ntranslate([0, 0, 5])\nunion() {\n    heart_body();\n    translate([0, 0, 16])\n        bail();\n    translate([0, 0, 8])\n        arteries();\n}",
    "renders": true
  },
  {
    "household_item": "badge",
    "openscad_code": "// Realistic Police-Style Badge (50 mm wide, 3 mm thick)\n// Medium complexity with raised text, stars, and shield shape\n\n// Badge parameters\nbadge_width = 50;           // Overall badge width in mm\nbadge_height = 60;          // Overall badge height in mm\nbadge_thickness = 3;        // Total thickness\nbase_thickness = 2;         // Main badge body thickness\ndetail_height = 0.8;        // Height of raised details\ntext_height = 0.6;          // Height of text embossing\nedge_radius = 3;            // Rounded edge radius\n\n// Shield shape module (realistic police badge outline)\nmodule shield_shape() {\n    difference() {\n        // Main shield body\n        union() {\n            // Bottom rectangle\n            translate([0, -badge_height/4, 0])\n                cube([badge_width, badge_height/2, base_thickness], center=true);\n            \n            // Top curved part\n            translate([0, badge_height/4, 0])\n                cylinder(h=base_thickness, r=badge_width/2, $fn=60);\n        }\n        \n        // Cut out the bottom to form shield shape\n        translate([0, -badge_height/2 - badge_height/4, -1])\n            cube([badge_width*1.5, badge_height/2, base_thickness+2], center=true);\n    }\n}\n\n// Star module for rank insignia\nmodule star(points=5, outer_radius=5, inner_radius=2.5, height=detail_height) {\n    angle_step = 360 / points;\n    \n    union() {\n        for (i = [0:points-1]) {\n            rotate([0, 0, i * angle_step]) {\n                // Outer point\n                translate([0, outer_radius, 0])\n                    cube([2, outer_radius - inner_radius, height], center=true);\n                \n                // Inner point\n                translate([0, inner_radius, 0])\n                    cube([2, inner_radius, height], center=true);\n            }\n        }\n    }\n}\n\n// Text module for badge number\nmodule badge_text(text=\"1234\", size=4, height=text_height) {\n    translate([0, -badge_height/6, 0])\n        linear_extrude(height=height)\n            text(text, size=size, halign=\"center\", valign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Eagle top detail (simplified)\nmodule eagle_top() {\n    translate([0, badge_height/3, base_thickness])\n        union() {\n            // Eagle body\n            scale([1.2, 0.8, 1])\n                sphere(r=6, $fn=20);\n            \n            // Wings\n            translate([-8, 0, 0])\n                rotate([0, 0, -20])\n                scale([2, 0.5, 0.3])\n                    cube([10, 3, detail_height]);\n            \n            translate([8, 0, 0])\n                rotate([0, 0, 20])\n                scale([2, 0.5, 0.3])\n                    cube([10, 3, detail_height]);\n        }\n}\n\n// Main badge assembly\nunion() {\n    // Base shield shape\n    shield_shape();\n    \n    // Eagle detail at top\n    eagle_top();\n    \n    // Center emblem circle\n    translate([0, 0, base_thickness])\n        cylinder(h=detail_height, r=8, $fn=32);\n    \n    // Inner circle detail\n    translate([0, 0, base_thickness + detail_height])\n        cylinder(h=detail_height/2, r=6, $fn=32);\n    \n    // Stars on sides\n    translate([-badge_width/3, badge_height/6, base_thickness])\n        star();\n    \n    translate([badge_width/3, badge_height/6, base_thickness])\n        star();\n    \n    // Badge number text\n    badge_text(\"357\");\n    \n    // Bottom banner with text\n    translate([0, -badge_height/3, base_thickness])\n        union() {\n            // Banner shape\n            cube([badge_width*0.8, 8, detail_height], center=true);\n            \n            // Banner text\n            translate([0, 0, detail_height])\n                badge_text(\"POLICE\", size=3, height=text_height/2);\n        }\n    \n    // Pin backing clips (for attachment)\n    translate([-badge_width/3, -badge_height/2.5, -base_thickness/2])\n        cube([2, 8, base_thickness], center=true);\n    \n    translate([badge_width/3, -badge_height/2.5, -base_thickness/2])\n        cube([2, 8, base_thickness], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "tag",
    "openscad_code": "// Realistic medium-complexity 3D-printable luggage tag\n// Overall size ~70 x 35 x 4 mm\n\n$fn = 90;               // Smooth curves\nwall = 1.2;             // 3D-print friendly wall thickness\ntag_w = 70;\ntag_h = 35;\ntag_d = 4;\n\nmodule body() {\n    // Main rounded rectangle body\n    difference() {\n        // Outer shell with rounded edges\n        minkowski() {\n            cube([tag_w-2*wall, tag_h-2*wall, tag_d], center=true);\n            cylinder(h=0.1, r=wall);\n        }\n        // Hollow centre\n        cube([tag_w-2.5*wall, tag_h-2.5*wall, tag_d+0.2], center=true);\n    }\n}\n\nmodule strap_hole() {\n    // Reinforced loop hole for strap\n    translate([tag_w/2 - 7, 0, 0])\n    difference() {\n        // Outer reinforcement ring\n        cylinder(h=tag_d, r=6);\n        // Actual hole\n        cylinder(h=tag_d+0.2, r=3.5);\n    }\n}\n\nmodule info_window() {\n    // Recessed area for paper insert\n    translate([0, 0, tag_d/2 - 0.5])\n    cube([tag_w - 20, tag_h - 10, 1], center=true);\n}\n\nmodule raised_border() {\n    // Raised lip around tag\n    difference() {\n        // Outer border\n        cube([tag_w+2, tag_h+2, 1.5], center=true);\n        // Cut inner\n        cube([tag_w, tag_h, 2], center=true);\n    }\n}\n\nmodule corner_rivets() {\n    // Four decorative rivets for realism\n    for (x = [-1, 1])\n    for (y = [-1, 1])\n    translate([x*(tag_w/2 - 5), y*(tag_h/2 - 5), tag_d/2])\n    difference() {\n        cylinder(h=1.5, r=2);\n        translate([0, 0, -0.1])\n        cylinder(h=2, r=1.2);\n    }\n}\n\nmodule text_frame() {\n    // Subtle engraved frame lines\n    translate([0, 0, tag_d/2 - 0.6])\n    difference() {\n        cube([tag_w - 18, tag_h - 8, 0.3], center=true);\n        cube([tag_w - 22, tag_h - 12, 0.4], center=true);\n    }\n}\n\n// Build the tag\nunion() {\n    body();\n    strap_hole();\n    raised_border();\n    corner_rivets();\n    info_window();\n    text_frame();\n}",
    "renders": true
  },
  {
    "household_item": "sensor",
    "openscad_code": "// Ultrasonic HC-SR04 style distance sensor\n// Overall size ~44 x 20 x 16 mm – 3D-printable without supports\n\n// Wall thickness for shell\nwall = 1.6;\n\n// Main body block\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([45, 20, 16], center=true);\n\n        // Hollow cavity\n        translate([0, 0, -0.01])\n            cube([45 - wall*2, 20 - wall*2, 16 - wall], center=true);\n    }\n}\n\n// Mounting flanges with holes\nmodule flanges() {\n    for (x = [-18, 18])\n        translate([x, 0, -8])\n            difference() {\n                // Flange block\n                cube([6, 20, 3], center=true);\n                // Mounting hole\n                translate([0, 0, -1])\n                    cylinder(h=5, d=3, $fn=20);\n            }\n}\n\n// Pin header block\nmodule pins() {\n    translate([0, 11, 0])\n        difference() {\n            cube([20, 6, 5], center=true);\n            // Four pin holes\n            for (x = [-7.5, -2.5, 2.5, 7.5])\n                translate([x, 0, -1])\n                    cylinder(h=7, d=1, $fn=12);\n        }\n}\n\n// Ultrasonic transducers\nmodule transducer() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=7, d=16, $fn=32);\n        // Inner cone\n        translate([0, 0, 0.5])\n            cylinder(h=7, d1=12, d2=6, $fn=32);\n    }\n}\n\n// Sensor front face with transducers\nmodule front() {\n    translate([0, -10, 0])\n        difference() {\n            cube([45, 2, 16], center=true);\n            // Cutouts for transducers\n            for (x = [-15, 15])\n                translate([x, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=20, d=16.2, $fn=32);\n        }\n    // Actual transducers\n    for (x = [-15, 15])\n        translate([x, -9, 0])\n            rotate([90, 0, 0])\n                transducer();\n}\n\n// PCB bottom details\nmodule pcb() {\n    translate([0, 0, -8.2])\n        color(\"green\")\n            cube([38, 18, 1.6], center=true);\n}\n\n// Main assembly\nunion() {\n    body();\n    flanges();\n    pins();\n    front();\n    pcb();\n}",
    "renders": true
  },
  {
    "household_item": "detector",
    "openscad_code": "// Geiger-Müller Counter Detector\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 32;\n\n// Overall dimensions\nbase_w = 60;  // mm\nbase_d = 40;\nbase_h = 12;\n\ntube_l = 85;\ntube_d = 22;\nwall_t = 2;   // safe wall thickness for printing\n\nmodule detector_base() {\n    difference() {\n        // Solid base block\n        cube([base_w, base_d, base_h], center = true);\n\n        // Recessed cavity on bottom to save material\n        translate([0, 0, -base_h/2 + 2])\n            cube([base_w*0.8, base_d*0.8, 4], center = true);\n\n        // Screw holes for mounting\n        for (x = [-1, 1])\n            translate([x * base_w/3, 0, -base_h/2])\n                cylinder(h = base_h + 1, d = 3.2, center = false);\n    }\n}\n\nmodule tube_mount() {\n    // Two half-cylinders that clamp the tube\n    difference() {\n        // Left clamp half\n        translate([-base_w/2, 0, base_h/2])\n            rotate([0, 90, 0])\n                cylinder(h = base_d, d = tube_d + wall_t*2, center = true);\n\n        // Left clamp hollow\n        translate([-base_w/2, 0, base_h/2])\n            rotate([0, 90, 0])\n                cylinder(h = base_d + 1, d = tube_d, center = true);\n    }\n\n    mirror([1, 0, 0])\n        difference() {\n            // Right clamp half\n            translate([-base_w/2, 0, base_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = base_d, d = tube_d + wall_t*2, center = true);\n\n            // Right clamp hollow\n            translate([-base_w/2, 0, base_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = base_d + 1, d = tube_d, center = true);\n        }\n\n    // Bridge connecting the two halves\n    translate([0, 0, base_h/2 + tube_d/2 + wall_t/2])\n        cube([wall_t*2, base_d, tube_d + wall_t], center = true);\n}\n\nmodule geiger_tube() {\n    // Main cylindrical tube body\n    difference() {\n        // Outer tube\n        rotate([0, 90, 0])\n            cylinder(h = tube_l, d = tube_d, center = true);\n\n        // Inner cavity\n        rotate([0, 90, 0])\n            cylinder(h = tube_l + 0.5, d = tube_d - wall_t*2, center = true);\n    }\n\n    // Thin mica window at front end\n    translate([tube_l/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 1, d = tube_d - wall_t*2, center = true);\n\n    // End cap with cable gland\n    translate([-tube_l/2, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                // Cap body\n                cylinder(h = 8, d = tube_d, center = true);\n\n                // Wire hole\n                cylinder(h = 9, d = 4, center = true);\n            }\n\n    // Radiation symbol band around tube\n    rotate([0, 90, 0])\n    for (i = [0:2]) {\n        rotate([0, 0, i*120])\n            translate([0, tube_d/2 - wall_t - 1, 0])\n                cube([tube_l*0.3, 2, 2], center = true);\n    }\n}\n\nmodule display_and_leds() {\n    // Small LCD screen\n    translate([0, -base_d/2 - 2, base_h/2])\n        cube([30, 2, 12], center = true);\n\n    // Three status LEDs\n    for (i = [0:2]) {\n        translate([0, base_d/2 + 2, base_h/2 - 4 + i*4])\n            sphere(d = 3);\n    }\n}\n\n// Build the complete detector\nunion() {\n    detector_base();\n    tube_mount();\n    translate([0, 0, base_h/2 + tube_d/2 + wall_t]) {\n        geiger_tube();\n    }\n    display_and_leds();\n}",
    "renders": true
  },
  {
    "household_item": "beacon",
    "openscad_code": "// Realistic medium-complexity 3D-printable beacon\n// Approx 90 mm tall, 40 mm wide, no overhangs >60°\n\n$fn = 60;          // Smooth curves for realism\nwall = 1.5;        // 3D-print friendly wall thickness\npillar_h = 40;     // Main support pillar height\npillar_r = 8;      // Main support pillar radius\n\n// --- Main pillar with slight taper for printability ---\nmodule pillar() {\n    cylinder(h = pillar_h, r1 = pillar_r, r2 = pillar_r - 1, center = false);\n}\n\n// --- Base footing for stability ---\nmodule base() {\n    difference() {\n        cylinder(h = 6, r = pillar_r + 6, center = false);          // Wide base\n        translate([0, 0, -0.1])\n            cylinder(h = 6.2, r = pillar_r + 6 - wall, center = false); // Hollow\n    }\n}\n\n// --- Bolt flange with four clearance holes ---\nmodule flange() {\n    difference() {\n        cylinder(h = 4, r = pillar_r + 10, center = false);\n        // Central hole for wiring\n        translate([0, 0, -0.1])\n            cylinder(h = 4.2, r = pillar_r - wall, center = false);\n        // Four mounting holes\n        for (a = [0:90:270])\n            rotate([0, 0, a])\n                translate([pillar_r + 6, 0, -0.1])\n                    cylinder(h = 4.2, r = 2, center = false);\n    }\n}\n\n// --- Solar panel ring around light head ---\nmodule solar_ring() {\n    difference() {\n        cylinder(h = 2, r = 18, center = false);\n        // Central hole for light dome\n        translate([0, 0, -0.1])\n            cylinder(h = 2.2, r = 10, center = false);\n        // Chamfer for printability\n        translate([0, 0, 2])\n            cylinder(h = 1, r1 = 18, r2 = 16, center = false);\n    }\n}\n\n// --- Fresnel lens dome (no overhangs) ---\nmodule dome() {\n    difference() {\n        sphere(r = 10);\n        // Hollow inside\n        translate([0, 0, -1])\n            sphere(r = 10 - wall);\n        // Flat bottom\n        translate([0, 0, -10])\n            cube([30, 30, 10], center = true);\n    }\n}\n\n// --- Top cap with vent slots ---\nmodule cap() {\n    difference() {\n        cylinder(h = 4, r = 9, center = false);\n        // Ventilation slots\n        for (a = [0:60:300])\n            rotate([0, 0, a])\n                translate([4.5, 0, -0.1])\n                    cube([9, 1.5, 4.2], center = false);\n    }\n}\n\n// --- Assembly ---\ntranslate([0, 0, 0]) base();\ntranslate([0, 0, 6]) pillar();\ntranslate([0, 0, 6 + pillar_h]) flange();\ntranslate([0, 0, 6 + pillar_h + 4]) solar_ring();\ntranslate([0, 0, 6 + pillar_h + 4 + 2]) dome();\ntranslate([0, 0, 6 + pillar_h + 4 + 2 + 10]) cap();",
    "renders": true
  },
  {
    "household_item": "bulb",
    "openscad_code": "// Realistic 3D-printable light-bulb\n// 80 mm total height, 50 mm Ø globe\n// Wall thickness 1.2 mm everywhere for reliable printing\n\nmodule bulb() {\n    // Glass globe\n    difference() {\n        sphere(d = 50, $fn = 100);            // outer glass\n        translate([0, 0, 25])\n            sphere(d = 47.6, $fn = 100);      // hollow inside\n    }\n\n    // Neck / socket collar\n    translate([0, 0, -25])\n        cylinder(h = 15, d1 = 40, d2 = 38, $fn = 60);\n\n    // Threaded metal base\n    threads();\n\n    // Filament support wires\n    filament();\n}\n\nmodule threads() {\n    // Main metal shell\n    cylinder(h = 25, d = 36, $fn = 60);\n\n    // Cut screw threads\n    for (i = [0:8]) {\n        rotate([0, 0, i * 40])\n            translate([17.8, 0, 5 + i * 2.5])\n                cube([1.2, 1.2, 2.5], center = true);\n    }\n\n    // Insulating ring at bottom\n    translate([0, 0, -26.5])\n        cylinder(h = 3, d = 36, $fn = 60);\n\n    // Center contact\n    translate([0, 0, -28])\n        cylinder(h = 2, d = 10, $fn = 30);\n}\n\nmodule filament() {\n    // Vertical support\n    translate([0, 0, -15])\n        cylinder(h = 50, d = 1.5, $fn = 12);\n\n    // Two zig-zag filament coils\n    for (side = [-1, 1]) {\n        for (i = [0:6]) {\n            translate([side * 5, 0, 25 - i * 6])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, d = 0.8, $fn = 8);\n            translate([side * 5, 0, 22 - i * 6])\n                rotate([90, 0, side * 90])\n                    cylinder(h = 8, d = 0.8, $fn = 8);\n        }\n    }\n}\n\nbulb();",
    "renders": true
  },
  {
    "household_item": "spotlight",
    "openscad_code": "// Realistic 3D-Printable Spotlight – medium complexity\n// Total length ≈ 75 mm, Ø ≈ 45 mm, wall thickness 1 mm\n\n$fn = 36;               // smooth curves\nwall = 1;               // universal wall thickness\n\nmodule spotlight() {\n    // Main housing – hollow truncated cone\n    difference() {\n        cylinder(h = 30, d1 = 45, d0 = 35);\n        translate([0,0,wall]) cylinder(h = 30-wall, d1 = 45-2*wall, d0 = 35-2*wall);\n    }\n\n    // Rear cap with cable hole\n    difference() {\n        translate([0,0,30]) cylinder(h = 5, d = 35);\n        translate([0,0,30+wall]) cylinder(h = 5, d = 35-2*wall);\n    }\n    translate([0,0,30+5/2]) rotate([90,0,0]) cylinder(h = 10, d = 6, $fn = 20); // cable gland stub\n\n    // Yoke bracket mounts (left & right)\n    rotate([0,90,0]) {\n        translate([0, 0, 22.5]) cube([wall, 8, 6], center = true);         // left ear\n        translate([0, 0, -22.5]) cube([wall, 8, 6], center = true);        // right ear\n    }\n\n    // Yoke frame\n    difference() {\n        rotate([0,90,0]) torus_slice(ri = 30, ro = 31, sides = 180);       // 180° arc\n        translate([0,0,0]) cube([80,8,80], center = true);                 // remove inner\n    }\n\n    // Reflector cone\n    difference() {\n        translate([0,0,5]) cylinder(h = 20, d1 = 43, d0 = 35);\n        translate([0,0,5+wall]) cylinder(h = 20, d1 = 43-2*wall, d0 = 35-2*wall);\n    }\n\n    // Protective glass lens\n    translate([0,0,25]) cylinder(h = 1.5, d = 42);\n\n    // LED puck\n    difference() {\n        translate([0,0,15]) cylinder(h = 3, d = 15);\n        translate([0,0,15+wall]) cylinder(h = 3, d = 15-2*wall);\n    }\n\n    // Cooling fins (6) on rear housing\n    for (a=[0:60:359]) {\n        rotate([0,0,a])\n            translate([0, 19.5, 20]) cube([wall, 4, 10], center = true);\n    }\n\n    // Base plate on yoke\n    translate([0, -30, 0]) rotate([90,0,0]) {\n        difference() {\n            cylinder(h = 4, d = 25);\n            translate([0,0,wall]) cylinder(h = 4, d = 25-2*wall);\n        }\n        // Screw holes\n        for (p = [[8,0], [-8,0], [0,8], [0,-8]])\n            translate([p[0], p[1], -1])\n                cylinder(h = 6, d = 3.2);\n    }\n}\n\n// Partial torus helper for yoke arc\nmodule torus_slice(ri, ro, sides) {\n    difference() {\n        rotate_extrude(angle = sides) translate([ri,0,0]) circle(r = ro-ri);\n        translate([0,-50,0]) cube([100,100,100]);\n    }\n}\n\nspotlight();",
    "renders": true
  },
  {
    "household_item": "floodlight",
    "openscad_code": "// Realistic floodlight - medium complexity\n// 3D printable, no overhangs >45°, walls ≥1.2mm\n\n$fn=32;               // Curved surface resolution\nwall=1.5;             // Wall thickness for printability\nl=75;                 // Overall length\nw=50;                 // Lamp head width\nh=50;                 // Overall height\nh_lamp=35;            // Lamp head depth\ndia_led=20;           // LED emitter diameter\ndia_lens=22;          // Front lens diameter\ndia_reflector=34;     // Reflector diameter\ndia_mount=8;          // Pivot pin diameter\ndia_stand=8;          // Stand rod diameter\nbase_d=45;            // Base diameter\nbase_h=8;             // Base height\n\n// Main assembly\nmodule floodlight(){\n    // Yoke bracket\n    translate([0,0,base_h+dia_stand/2])\n        yoke();\n\n    // Lamp head assembly\n    translate([0,0,h_lamp/2+base_h+dia_stand])\n        rotate([0,-20,0])  // Tilted down slightly\n            lamp_head();\n\n    // Stand rod\n    translate([0,0,base_h])\n        cylinder(h=dia_stand,d=dia_stand-wall,$fn=16);\n\n    // Base\n    translate([0,0,0])\n        base();\n}\n\n// Yoke bracket with pivot holes\nmodule yoke(){\n    difference(){\n        // Yoke body\n        union(){\n            // Left arm\n            translate([-w/2-wall,0,0])\n                cube([wall,h_lamp/2,dia_stand]);\n\n            // Right arm\n            translate([w/2,0,0])\n                cube([wall,h_lamp/2,dia_stand]);\n\n            // Bridge\n            translate([-w/2-wall,-h_lamp/4,dia_stand/2])\n                cube([w+2*wall,wall,h_lamp/2]);\n        }\n\n        // Pivot pin holes\n        translate([-w/2-wall/2,h_lamp/4,dia_stand/2])\n            rotate([90,0,0])\n                cylinder(h=w+2*wall,d=dia_mount+0.2,$fn=16);\n    }\n}\n\n// Lamp head assembly\nmodule lamp_head(){\n    difference(){\n        union(){\n            // Main housing\n            housing();\n\n            // Rear fins for cooling\n            cooling_fins();\n        }\n\n        // Front lens recess\n        translate([0,0,h_lamp/2-2])\n            cylinder(h=4,d=dia_lens+2,$fn=32);\n\n        // LED cavity\n        translate([0,0,h_lamp/2-6])\n            cylinder(h=6,d=dia_led+2,$fn=32);\n\n        // Reflector cavity\n        translate([0,0,h_lamp/2-10])\n            sphere(d=dia_reflector+2,$fn=32);\n    }\n\n    // Front lens\n    translate([0,0,h_lamp/2-1])\n        lens();\n\n    // Pivot pins\n    pivot_pins();\n}\n\n// Main housing\nmodule housing(){\n    difference(){\n        // Outer shell\n        cylinder(h=h_lamp,d=w,$fn=32);\n\n        // Hollow cavity\n        translate([0,0,wall])\n            cylinder(h=h_lamp-2*wall,d=w-2*wall,$fn=32);\n    }\n}\n\n// Cooling fins\nmodule cooling_fins(){\n    for(i=[0:30:359]){\n        rotate([0,0,i])\n            translate([w/2-1,0,h_lamp-5])\n                cube([wall,1,5],center=true);\n    }\n}\n\n// Front glass lens\nmodule lens(){\n    difference(){\n        cylinder(h=2,d=dia_lens,$fn=32);\n        translate([0,0,-0.1])\n            cylinder(h=2.2,d=dia_lens-2*wall,$fn=32);\n    }\n}\n\n// Pivot pins for rotation\nmodule pivot_pins(){\n    // Left pin\n    translate([-w/2-wall/2,0,0])\n        rotate([90,0,0])\n            cylinder(h=w/2+wall/2+2,d=dia_mount,$fn=16);\n\n    // Right pin\n    translate([w/2+wall/2,0,0])\n        rotate([90,0,0])\n            cylinder(h=w/2+wall/2+2,d=dia_mount,$fn=16);\n}\n\n// Weighted base with mounting holes\nmodule base(){\n    difference(){\n        // Main base\n        cylinder(h=base_h,d=base_d,$fn=64);\n\n        // Hollow bottom for weight reduction\n        translate([0,0,2])\n            cylinder(h=base_h-2,d=base_d-4,$fn=64);\n\n        // Mounting holes\n        for(a=[45:90:315]){\n            rotate([0,0,a])\n                translate([base_d/2-4,0,-0.1])\n                    cylinder(h=base_h+0.2,d=3,$fn=16);\n        }\n    }\n}\n\n// Render the floodlight\nfloodlight();",
    "renders": true
  },
  {
    "household_item": "blinds",
    "openscad_code": "// Realistic 3D-printable window blinds\n// Medium complexity: approx. 90 lines\n// Overall size: 80 mm (W) x 60 mm (H) x 20 mm (D)\n\n// Parameters\nblind_width = 80;\nblind_height = 60;\nframe_thick = 3;\nslat_thick = 1.2;\nslat_gap = 2;\nslat_count = 15;\ncord_d = 1.2;\ncord_hole_d = 1.5;\n\n// Main module\nmodule blinds() {\n    difference() {\n        // Frame\n        frame();\n        \n        // Window opening\n        translate([frame_thick, frame_thick, frame_thick])\n            cube([blind_width - 2*frame_thick,\n                  blind_height - 2*frame_thick,\n                  blind_width]);\n    }\n    \n    // Slats\n    slats();\n    \n    // Lift cords\n    cords();\n}\n\n// Frame with top, bottom, left, right rails\nmodule frame() {\n    // Top rail (larger to house mechanism)\n    translate([-1, -1, 0])\n        cube([blind_width + 2, frame_thick + 2, blind_width]);\n    \n    // Bottom rail\n    translate([-1, blind_height - frame_thick + 1, 0])\n        cube([blind_width + 2, frame_thick + 2, blind_width]);\n    \n    // Left rail\n    translate([-1, -1, 0])\n        cube([frame_thick + 2, blind_height + 2, blind_width]);\n    \n    // Right rail\n    translate([blind_width - frame_thick + 1, -1, 0])\n        cube([frame_thick + 2, blind_height + 2, blind_width]);\n}\n\n// Individual slat\nmodule slat(y_pos) {\n    difference() {\n        // Slat body\n        translate([frame_thick, y_pos, frame_thick])\n            cube([blind_width - 2*frame_thick, slat_thick, blind_width - 2*frame_thick]);\n        \n        // Cord holes: left, middle, right\n        for (x = [frame_thick + 5, blind_width/2, blind_width - frame_thick - 5]) {\n            translate([x, y_pos + slat_thick/2, frame_thick + (blind_width - 2*frame_thick)/2])\n                rotate([0, 90, 0])\n                    cylinder(d = cord_hole_d, h = slat_thick + 0.2, $fn = 8);\n        }\n    }\n}\n\n// Generate all slats with loop\nmodule slats() {\n    step = (blind_height - 2*frame_thick - slat_thick) / (slat_count - 1);\n    for (i = [0 : slat_count - 1]) {\n        slat(frame_thick + i * step);\n    }\n}\n\n// Lift cords passing through holes\nmodule cords() {\n    cord_length = blind_height + 10;\n    for (x = [frame_thick + 5, blind_width/2, blind_width - frame_thick - 5]) {\n        translate([x, -5, frame_thick + (blind_width - 2*frame_thick)/2])\n            rotate([0, 90, 0])\n                cylinder(d = cord_d, h = cord_length, $fn = 8);\n    }\n}\n\n// Render the model\nblinds();",
    "renders": true
  },
  {
    "household_item": "curtains",
    "openscad_code": "// Realistic Curtains for 3D Printing\n// Medium complexity with folds and rod\n\n// Parameters\ncurtain_width = 80;\ncurtain_height = 60;\ncurtain_thickness = 2;\nfold_count = 8;\nfold_depth = 6;\nrod_diameter = 4;\nrod_length = 90;\nring_count = 10;\nring_thickness = 1.5;\n\nmodule curtain_panel() {\n    // Main curtain body with folds\n    for (i = [0:fold_count-1]) {\n        translate([i * (curtain_width/fold_count), 0, 0]) {\n            // Each fold segment\n            difference() {\n                // Folded section\n                translate([fold_depth/2, 0, curtain_height/2])\n                    cube([curtain_width/fold_count + fold_depth, curtain_thickness, curtain_height], center=true);\n                \n                // Create fold indent\n                translate([-fold_depth/4, curtain_thickness/2 + 0.1, curtain_height/2])\n                    cube([fold_depth/2, curtain_thickness + 0.2, curtain_height*0.9], center=false);\n            }\n            \n            // Bottom hem\n            translate([curtain_width/fold_count/2, 0, curtain_height - 1])\n                cube([curtain_width/fold_count + 1, curtain_thickness + 1, 2]);\n        }\n    }\n}\n\nmodule curtain_rod() {\n    // Main rod\n    translate([0, 0, curtain_height + rod_diameter/2])\n        cylinder(h=rod_length, d=rod_diameter, center=true);\n    \n    // Rod ends\n    translate([rod_length/2 + 2, 0, curtain_height + rod_diameter/2])\n        sphere(d=rod_diameter + 2);\n    translate([-rod_length/2 - 2, 0, curtain_height + rod_diameter/2])\n        sphere(d=rod_diameter + 2);\n}\n\nmodule curtain_rings() {\n    // Rings for hanging\n    for (i = [0:ring_count-1]) {\n        translate([-rod_length/2 + 5 + i * (rod_length-10)/(ring_count-1), 0, curtain_height + rod_diameter])\n            difference() {\n                cylinder(h=ring_thickness, d=rod_diameter + 4);\n                translate([0, 0, -0.1])\n                    cylinder(h=ring_thickness + 0.2, d=rod_diameter + 1);\n            }\n    }\n}\n\nmodule curtain_tieback() {\n    // Decorative tieback cord\n    color(\"brown\")\n    translate([curtain_width/2 - 10, curtain_thickness + 2, curtain_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=1.5);\n}\n\n// Assemble the curtains\nunion() {\n    // Left curtain panel\n    translate([-curtain_width/2 - 5, 0, 0])\n        curtain_panel();\n    \n    // Right curtain panel (mirrored)\n    translate([curtain_width/2 + 5, 0, 0])\n        mirror([1, 0, 0])\n            curtain_panel();\n    \n    // Rod assembly\n    curtain_rod();\n    curtain_rings();\n    \n    // Tiebacks\n    translate([-curtain_width/2 - 5, 0, 0])\n        curtain_tieback();\n    translate([curtain_width/2 + 5, 0, 0])\n        mirror([1, 0, 0])\n            curtain_tieback();\n}",
    "renders": true
  },
  {
    "household_item": "sprinkler",
    "openscad_code": "// Realistic Garden Sprinkler - Medium Complexity\n// 3D printable, ~75 mm tall, all parts in one module\n\n$fn = 32;  // smooth curves\nwall = 1.5;  // 3D-print friendly wall thickness\n\nmodule sprinkler() {\n    // Base plate with mounting holes\n    difference() {\n        cylinder(h = 4, d = 40);\n        for (a = [0:120:359])\n            rotate([0, 0, a])\n                translate([15, 0, -1])\n                    cylinder(h = 6, d = 4);\n    }\n\n    // Inlet pipe\n    translate([0, 0, 4])\n        difference() {\n            cylinder(h = 20, d = 18);\n            cylinder(h = 22, d = 12);\n        }\n\n    // Swivel bearing ring\n    translate([0, 0, 24])\n        difference() {\n            cylinder(h = 6, d = 30);\n            cylinder(h = 8, d = 26);\n        }\n\n    // Rotating top section\n    translate([0, 0, 30]) {\n        // Main rotor body\n        difference() {\n            cylinder(h = 8, d = 28);\n            cylinder(h = 10, d = 20);\n        }\n\n        // Three radial arms\n        for (a = [0:120:359])\n            rotate([0, 0, a])\n                translate([14, 0, 4])\n                    rotate([0, 90, 0])\n                        difference() {\n                            cylinder(h = 12, d = 6);\n                            cylinder(h = 14, d = 3);\n                        }\n\n        // Nozzle caps on each arm\n        for (a = [0:120:359])\n            rotate([0, 0, a])\n                translate([20, 0, 4])\n                    difference() {\n                        sphere(d = 5);\n                        translate([0, 0, -3])\n                            cylinder(h = 6, d = 2.5);\n                    }\n\n        // Center deflector dome\n        translate([0, 0, 4])\n            difference() {\n                sphere(d = 12);\n                translate([0, 0, -7])\n                    cube([50, 50, 10], center = true);\n            }\n    }\n\n    // Stabilizing fins under rotor\n    translate([0, 0, 26])\n        for (a = [30:120:359])\n            rotate([0, 0, a])\n                translate([12, 0, 0])\n                    cube([12, 1, 4], center = true);\n}\n\nsprinkler();",
    "renders": true
  },
  {
    "household_item": "watering",
    "openscad_code": "/* Realistic style watering can – medium complexity\n   Height ~85 mm, wall thickness 1 mm, 3D-printable\n   All parts fit together with no steep overhangs (>45°) */\n\n$fn = 36; // smooth curves\n\n/* ---------- PARAMETERS ---------- */\nwall = 1.5;          // wall thickness\nbody_h = 60;         // main body height\nbody_r = 30;         // body radius\nneck_h = 15;         // neck height\nspout_l = 45;        // spout length\nhandle_r = 4;        // handle radius\nhandle_clear = 15;   // inner handle height\n/* -------------------------------- */\n\n/* Main solid body */\nmodule body() {\n    difference() {\n        /* Outside shell */\n        union() {\n            // lower bulb\n            translate([0, 0, body_h/2])\n                sphere(r = body_r);\n\n            // neck cylinder\n            translate([0, 0, body_h + neck_h/2])\n                cylinder(h = neck_h, r1 = body_r*0.65, r2 = body_r*0.5);\n        }\n\n        /* Inside hollow */\n        translate([0, 0, -1])\n            union() {\n                sphere(r = body_r - wall);\n                translate([0, 0, body_h + neck_h/2])\n                    cylinder(h = neck_h+2, r1 = body_r*0.65 - wall, r2 = body_r*0.5 - wall);\n            }\n    }\n}\n\n/* Curved spout */\nmodule spout() {\n    angle = 25;  // gentle upward curve\n    translate([body_r*0.9, 0, body_h*0.7])\n        rotate([0, angle, 0])\n            difference() {\n                /* Outer tube */\n                cylinder(h = spout_l, r = body_r*0.22, center=false);\n\n                /* Inner hole */\n                translate([0, 0, wall])\n                    cylinder(h = spout_l - wall, r = body_r*0.22 - wall, center=false);\n            }\n}\n\n/* Handle attached rear-to-top */\nmodule handle() {\n    // path points for smooth arch\n    p0 = [0, 0, 0];\n    p1 = [0, 0, handle_clear/3];\n    p2 = [0, 0, handle_clear*2/3];\n    p3 = [0, 0, handle_clear];\n\n    translate([-body_r + wall*2, 0, body_h*0.3])\n        rotate([0, 90, 0])\n            difference() {\n                // outer handle sweep\n                for(i=[0:3])\n                    translate([lerp(p0[2], p3[2], i/3), 0, 0])\n                        sphere(r = handle_r);\n\n                // inner clearance\n                for(i=[0:3])\n                    translate([lerp(p0[2]+wall, p3[2]-wall, i/3), 0, 0])\n                        sphere(r = handle_r - wall);\n            }\n}\n\n/* Rose head (sprinkler) */\nmodule rose() {\n    holes = 8;\n    rose_t = 2;\n    rose_r = body_r*0.28;\n\n    translate([body_r*0.9 + spout_l - rose_t, 0, body_h*0.7 + spout_l*sin(25)])\n        rotate([0, -25, 0])\n            difference() {\n                // thin disk\n                cylinder(h = rose_t, r = rose_r);\n\n                // small spray holes\n                for(i=[0:holes-1])\n                    rotate([0, 0, i*360/holes])\n                        translate([rose_r*0.7, 0, -0.1])\n                            cylinder(h = rose_t+0.2, r = 0.8);\n            }\n}\n\n/* ---------- ASSEMBLY ---------- */\nunion() {\n    body();\n    spout();\n    handle();\n    rose();\n}",
    "renders": true
  },
  {
    "household_item": "irrigation",
    "openscad_code": "// Realistic-style medium-complexity irrigation sprinkler head\n// Approx. 65 mm tall – printable without supports\n\n$fn=36;\n\n// Overall scale factor (change to resize everything uniformly)\nscale_factor = 1.0;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule sprinkler_head() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h=30*scale_factor, d=30*scale_factor, center=false);\n        // Hollow it out\n        translate([0,0,-1])\n            cylinder(h=32*scale_factor, d=30*scale_factor-2*wall, center=false);\n    }\n\n    // Top cap with slight dome\n    translate([0,0,30*scale_factor])\n        difference() {\n            sphere(d=30*scale_factor);\n            translate([0,0,-15*scale_factor])\n                cube([50*scale_factor,50*scale_factor,20*scale_factor], center=true);\n        }\n\n    // Hose connector (barbed)\n    translate([0,0,-12*scale_factor])\n        difference() {\n            union() {\n                cylinder(h=15*scale_factor, d=18*scale_factor, center=false);\n                // Barbs\n                for(i=[1:4])\n                    translate([0,0,i*3*scale_factor])\n                        cylinder(h=2*scale_factor, d1=20*scale_factor, d2=18*scale_factor, center=false);\n            }\n            // Inner bore\n            translate([0,0,-1])\n                cylinder(h=20*scale_factor, d=12*scale_factor, center=false);\n        }\n\n    // Side nozzles (4-way)\n    for (a=[0:90:270]) {\n        rotate([0,0,a])\n            translate([15*scale_factor,0,20*scale_factor])\n                rotate([0,90,0])\n                    nozzle();\n    }\n\n    // Top pop-up nozzle\n    translate([0,0,34*scale_factor])\n        rotate([0,0,0])\n            pop_nozzle();\n}\n\nmodule nozzle() {\n    difference() {\n        union() {\n            // Nozzle tube\n            cylinder(h=12*scale_factor, d=6*scale_factor, center=true);\n            // Flange\n            translate([-6*scale_factor,0,0])\n                cube([6*scale_factor,8*scale_factor,2*scale_factor], center=true);\n        }\n        // Bore\n        cylinder(h=15*scale_factor, d=3*scale_factor, center=true);\n    }\n}\n\nmodule pop_nozzle() {\n    difference() {\n        union() {\n            // Short stem\n            cylinder(h=6*scale_factor, d=10*scale_factor, center=false);\n            // Cap with multiple tiny holes\n            translate([0,0,6*scale_factor])\n                sphere(d=10*scale_factor);\n        }\n        // Central bore\n        translate([0,0,-1])\n            cylinder(h=12*scale_factor, d=4*scale_factor, center=false);\n        // Spray holes\n        for (i=[0:5])\n            rotate([0, 30+i*12, i*72])\n                translate([0, 3.5*scale_factor, 6*scale_factor])\n                    rotate([90,0,0])\n                        cylinder(h=3*scale_factor, d=1*scale_factor, center=true);\n    }\n}\n\n// Render the model\nsprinkler_head();",
    "renders": true
  },
  {
    "household_item": "softener",
    "openscad_code": "// Water Softener – Realistic / Medium complexity\n// All dimensions in mm.  Print-friendly: 3 mm walls, no steep overhangs.\n\n$fn = 32;                      // Nice curves\nwall = 3;                      // Wall thickness for FDM printing\nmain_w = 36;                   // Brine tank width\nmain_d = 28;\nmain_h = 60;\nresin_w = 26;                  // Resin tank sits inside\nresin_d = 20;\nresin_h = 45;\nsalt_lid = 3;                  // Salt-bay lid thickness\n\nmodule brine_tank() {\n    difference() {\n        // Outer shell\n        cube([main_w, main_d, main_h], center = true);\n\n        // Hollow inside\n        translate([0, 0, wall/2])\n        cube([main_w - 2*wall, main_d - 2*wall, main_h - wall], center = true);\n    }\n}\n\nmodule resin_tank() {\n    difference() {\n        // Cylindrical pressure tank\n        translate([0, 0, (main_h - resin_h)/2])\n        cylinder(h = resin_h, d = resin_w, center = true);\n\n        // Hollow center\n        translate([0, 0, (main_h - resin_h)/2])\n        cylinder(h = resin_h + 0.2, d = resin_w - 2*wall, center = true);\n    }\n}\n\nmodule salt_grid() {\n    // Perforated plate for salt support\n    plate_th = 2;\n    hole_d = 3;\n    spacing = 6;\n    translate([0, 0, -main_h/2 + 8])\n    difference() {\n        cube([main_w - 6, main_d - 6, plate_th], center = true);\n        for (x = [-main_w/2 + 8 : spacing :  main_w/2 - 8])\n            for (y = [-main_d/2 + 8 : spacing : main_d/2 - 8])\n                translate([x, y, 0])\n                cylinder(h = plate_th + 1, d = hole_d, center = true);\n    }\n}\n\nmodule control_head() {\n    // Rectangular valve head\n    head_w = 20;\n    head_d = 18;\n    head_h = 10;\n    difference() {\n        translate([0, 0, main_h/2 + head_h/2])\n        cube([head_w, head_d, head_h], center = true);\n\n        // Cutouts for ports\n        translate([head_w/2 - 2, 0, main_h/2 + head_h/2])\n        rotate([0, 90, 0])\n        cylinder(h = 6, d = 5, center = true);\n        mirror([1, 0, 0])\n        translate([head_w/2 - 2, 0, main_h/2 + head_h/2])\n        rotate([0, 90, 0])\n        cylinder(h = 6, d = 5, center = true);\n    }\n\n    // Display bump\n    translate([0, head_d/2 - 3, main_h/2 + head_h + 1])\n    cube([8, 4, 3], center = true);\n}\n\nmodule salt_lid() {\n    translate([0, 0, main_h/2 + wall/2])\n    cube([main_w, main_d, salt_lid], center = true);\n}\n\nmodule bypass_valve() {\n    // Simple cylindrical bypass\n    cyl_d = 10;\n    cyl_h = 18;\n    translate([main_w/2 + cyl_h/2, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = cyl_h, d = cyl_d, center = true);\n        cylinder(h = cyl_h + 1, d = cyl_d - 2*wall, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    brine_tank();\n    resin_tank();\n    salt_grid();\n    control_head();\n    salt_lid();\n    bypass_valve();\n}",
    "renders": true
  },
  {
    "household_item": "filter",
    "openscad_code": "// Realistic Water Filter Cartridge (50 mm diameter x 100 mm height)\n// Medium complexity – recognizable features, printable without supports\n\n$fn = 36;               // Smooth curves\nwall = 1.2;             // Wall thickness for FDM printing\ndia = 50;               // Overall diameter\nh = 100;                // Overall height\ncenter_hole = 12;       // Central bore\nendcap_h = 8;           // Top/bottom end-cap height\ngroove_w = 2;           // O-ring groove width\ngroove_d = 1.5;         // O-ring groove depth\npleat_n = 36;           // Number of pleats around circumference\npleat_h = h - 2*endcap_h;\npleat_t = 0.8;          // Pleat thickness\n\n// Main assembly\nunion() {\n    // Bottom end-cap\n    endcap(false);\n\n    // Pleated filter medium\n    translate([0,0,endcap_h])\n        pleated_body();\n\n    // Top end-cap\n    translate([0,0,h-endcap_h])\n        mirror([0,0,1])\n            endcap(true);\n}\n\n// End-cap module (top or bottom)\nmodule endcap(is_top = false) {\n    difference() {\n        // Main disc\n        cylinder(h = endcap_h, d = dia);\n\n        // Central bore\n        translate([0,0,-1])\n            cylinder(h = endcap_h + 2, d = center_hole);\n\n        // O-ring groove (only on top end-cap outer side)\n        if (is_top)\n            translate([0,0,endcap_h - groove_d])\n                cylinder(h = groove_d + 1, d = dia - 2*wall - 2*groove_w);\n    }\n\n    // Radial ribs for flow distribution\n    for (a = [0:30:330])\n        rotate([0,0,a])\n            translate([-wall/2, 0, 0])\n                cube([wall, (dia - 2*wall)/2, endcap_h]);\n}\n\n// Pleated filter medium\nmodule pleated_body() {\n    // Core tube\n    difference() {\n        cylinder(h = pleat_h, d = dia - 2*wall);\n        cylinder(h = pleat_h + 2, d = center_hole);\n    }\n\n    // Pleats wrapped around core\n    for (i = [0:pleat_n-1]) {\n        rotate([0,0,i*360/pleat_n])\n            translate([(dia - 2*wall)/2 - pleat_t/2, 0, 0])\n                cube([pleat_t, pleat_t, pleat_h], center = true);\n    }\n\n    // Outer mesh support ring\n    difference() {\n        cylinder(h = pleat_h, d = dia);\n        cylinder(h = pleat_h + 2, d = dia - 2*wall);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "fountain",
    "openscad_code": "// Medium-complexity 3D-printable realistic fountain\n// Dimensions: 80 mm diameter, 70 mm total height\n\n$fn = 36; // smooth curves\n\n// Base basin\ndifference() {\n    cylinder(h = 20, r1 = 40, r2 = 38); // slight taper inward\n    translate([0, 0, 2]) cylinder(h = 18, r1 = 37, r2 = 35);\n}\n\n// Pedestal\ntranslate([0, 0, 20]) difference() {\n    cylinder(h = 25, r = 15); // main pillar\n    translate([0, 0, 5]) cylinder(h = 15, r = 12); // hollow core\n}\n\n// Water reservoir bowl\ntranslate([0, 0, 45]) difference() {\n    sphere(r = 20);\n    scale([0.9, 0.9, 0.8])\n        translate([0, 0, 2])\n            sphere(r = 19);\n}\n\n// Central spout pipe\ntranslate([0, 0, 60]) cylinder(h = 10, r = 3);\n\n// Water jet\ntranslate([0, 0, 70]) sphere(r = 4);\n\n// Decorative rings around basin\nfor (h = [5, 10, 15]) {\n    translate([0, 0, h]) difference() {\n        cylinder(h = 1, r = 39);\n        cylinder(h = 1.2, r = 36);\n    }\n}\n\n// Drain holes (3 radial)\nmodule drain_hole() {\n    rotate([90, 0, 0]) cylinder(h = 5, r = 1.5);\n}\n\nfor (a = [0, 120, 240]) {\n    rotate([0, 0, a])\n        translate([37, 0, 10]) drain_hole();\n}\n\n// Side nozzles\nmodule side_nozzle() {\n    translate([0, 0, 50]) rotate([90, 0, 0]) cylinder(h = 8, r1 = 2, r2 = 1.5);\n}\n\nfor (a = [45, 135, 225, 315]) {\n    rotate([0, 0, a])\n        translate([18, 0, 0]) side_nozzle();\n}\n\n// Ornament ring on pedestal\ntranslate([0, 0, 32.5]) difference() {\n    cylinder(h = 5, r = 18);\n    cylinder(h = 5.2, r = 15);\n}\n\n// Base feet (4 supports)\nmodule foot() {\n    translate([0, 0, 0]) cube([6, 6, 2], center = true);\n}\n\nfor (a = [45, 135, 225, 315]) {\n    rotate([0, 0, a])\n        translate([33, 0, 1]) foot();\n}",
    "renders": true
  },
  {
    "household_item": "warmer",
    "openscad_code": "// Realistic 3D-printable wax/tart warmer\n// Approx 80 mm tall, 70 mm wide\n// No steep overhangs, 1.2 mm wall thickness assumed\n\n$fn = 36;\n\n// Overall scale factor\nscale = 1;\n\n// Main assembly\ndifference() {\n    union() {\n        // Base plate with feet\n        base();\n\n        // Central stem\n        stem();\n\n        // Bowl that holds the wax\n        wax_bowl();\n\n        // Decorative vent ring\n        vent_ring();\n    }\n\n    // Hollow out the bowl\n    translate([0, 0, 42])\n        rotate([180, 0, 0])\n        bowl_shell(1.2);\n\n    // Wick hole down the center\n    cylinder(h = 100, d = 6, center = true);\n}\n\nmodule base() {\n    // Circular foot\n    difference() {\n        cylinder(h = 3, d = 70);\n        translate([0, 0, 1])\n            cylinder(h = 3, d = 66);\n    }\n\n    // Three decorative feet\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([28, 0, -2])\n                scale([1, 1.2, 1])\n                    sphere(d = 10);\n}\n\nmodule stem() {\n    // Tapered pillar\n    cylinder(h1 = 1, h2 = 35, r1 = 25, r2 = 15);\n}\n\nmodule wax_bowl() {\n    // Outer shell\n    translate([0, 0, 35])\n        bowl_shell(0);\n\n    // Lip\n    translate([0, 0, 55])\n        difference() {\n            cylinder(h = 3, d = 50);\n            cylinder(h = 3, d = 46);\n        }\n}\n\nmodule bowl_shell(wall) {\n    difference() {\n        cylinder(h = 20, d = 46);\n        translate([0, 0, wall])\n            cylinder(h = 20 + 1, d = 46 - 2 * wall);\n    }\n}\n\nmodule vent_ring() {\n    // Decorative ring with slots\n    translate([0, 0, 38])\n        difference() {\n            cylinder(h = 10, d = 60);\n            cylinder(h = 10, d = 54);\n        }\n\n    // Vent slots\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([27, 0, 38.1])\n                cube([8, 2, 9.8], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "dispenser",
    "openscad_code": "// Soap Dispenser - Realistic Medium Complexity\n// 3D printable with 2mm walls and no overhangs\n\nwall = 2;\nbody_r = 25;\nbody_h = 60;\nneck_r = 18;\nneck_h = 15;\npump_r = 14;\npump_h = 25;\nnozzle_r = 4;\nnozzle_l = 18;\nbase_r = 30;\nbase_h = 8;\nwindow_h = 20;\n\nmodule main_body() {\n    // Outer shell\n    difference() {\n        cylinder(h=body_h, r=body_r);\n        // Hollow out\n        translate([0,0,wall]) \n            cylinder(h=body_h, r=body_r-wall);\n    }\n    \n    // Neck transition\n    translate([0,0,body_h])\n    difference() {\n        cylinder(h=neck_h, r1=body_r-wall, r2=neck_r);\n        translate([0,0,wall])\n            cylinder(h=neck_h, r1=body_r-wall*2, r2=neck_r-wall);\n    }\n}\n\nmodule pump_assembly() {\n    // Pump cylinder\n    translate([0,0,body_h+neck_h])\n    difference() {\n        cylinder(h=pump_h, r=pump_r);\n        translate([0,0,wall])\n            cylinder(h=pump_h, r=pump_r-wall);\n    }\n    \n    // Pump top dome\n    translate([0,0,body_h+neck_h+pump_h])\n    sphere(r=pump_r);\n    \n    // Nozzle\n    rotate([90,0,0])\n    translate([0,0,pump_r-2])\n    difference() {\n        cylinder(h=nozzle_l, r=nozzle_r);\n        translate([0,0,wall])\n            cylinder(h=nozzle_l, r=nozzle_r-wall);\n    }\n}\n\nmodule base() {\n    difference() {\n        cylinder(h=base_h, r=base_r);\n        translate([0,0,wall])\n            cylinder(h=base_h, r=base_r-wall);\n    }\n}\n\nmodule level_window() {\n    // Viewing window\n    rotate([0,90,0])\n    translate([body_r-wall/2,0,body_h/2-window_h/2])\n    cube([wall, 8, window_h]);\n}\n\nmodule grip_rings() {\n    // Anti-slip rings on neck\n    for(i=[1:3]) {\n        translate([0,0,body_h+i*4])\n        difference() {\n            cylinder(h=2, r=neck_r+1);\n            cylinder(h=2, r=neck_r);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_body();\n    pump_assembly();\n    base();\n    \n    // Details\n    grip_rings();\n    \n    // Level indicator - 4 windows spaced around\n    for(i=[0:90:270]) {\n        rotate([0,0,i])\n            level_window();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "icecream",
    "openscad_code": "// Realistic Medium-Complexity Ice-Cream Cone – OpenSCAD\n// Total height ≈ 80 mm, max diameter ≈ 55 mm\n// Designed for FDM printing: 0.8 mm walls, no overhangs > 45°\n\n// --- Parameters -----------------------------------------------------\ncone_h = 45;            // height of cone\ncone_r = 22;            // base radius of cone\ncone_top_r = 9;         // top radius of cone\ncone_wall = 1.6;        // shell thickness (2×0.4 mm nozzle)\n\nball_r = 16;            // radius of each ice-cream ball\nballs_n = 3;            // #balls on top\nball_overlap = 0.2;     // how much balls sink into each other\n\ndrip_h = 6;             // height of single drip\ndrip_r = 4;             // radius of drip\ndrips_n = 12;           # drips around edge\n\n// --- Modules --------------------------------------------------------\n// Criss-cross waffle texture on cone outer surface\nmodule waffle_pattern(h, r_bottom, r_top) {\n    slices = 36;\n    step = h / slices;\n    for (i = [0 : slices-1]) {\n        z = i * step;\n        r = r_bottom + (r_top - r_bottom) * (z / h);\n        color(\"BurlyWood\")\n        translate([0, 0, z])\n        rotate([0, 0, 45 + i * 10])\n        linear_extrude(height = step + 0.1, center = false)\n        difference() {\n            circle(r * 1.05);                 // outer circle\n            circle(r - cone_wall);            // inner circle\n        }\n    }\n}\n\n// Single ice-cream ball with simple surface undulation\nmodule ice_ball(r) {\n    color(\"FloralWhite\")\n    sphere(r);\n    // small bumps for realism\n    for (i = [0:15]) {\n        rotate([0, 0, i * 137.5])\n        translate([r * 0.9, 0, 0])\n        sphere(r * 0.1);\n    }\n}\n\n// Drip hanging from ball edge\nmodule drip(h, r) {\n    color(\"GhostWhite\")\n    translate([0, r, 0])\n    scale([0.8, 1, 1.2])\n    sphere(r);\n}\n\n// --- Main Geometry --------------------------------------------------\nunion() {\n    // ---- Cone ------------------------------------------------------\n    difference() {\n        cylinder(h = cone_h, r1 = cone_r, r2 = cone_top_r, $fn = 60);\n        // hollow it out\n        translate([0, 0, -0.1])\n        cylinder(h = cone_h + 0.2, r1 = cone_r - cone_wall,\n                 r2 = cone_top_r - cone_wall, $fn = 60);\n    }\n    // add waffle pattern on outer shell\n    waffle_pattern(cone_h, cone_r, cone_top_r);\n\n    // ---- Ice-cream balls ------------------------------------------\n    for (j = [0 : balls_n - 1]) {\n        angle = j * 120;\n        offset = cone_top_r - ball_overlap;\n        translate([offset * cos(angle), offset * sin(angle), cone_h - 2])\n        ice_ball(ball_r);\n    }\n\n    // ---- Drips ------------------------------------------------------\n    for (k = [0 : drips_n - 1]) {\n        a = k * 360 / drips_n;\n        translate([cone_top_r * cos(a),\n                   cone_top_r * sin(a),\n                   cone_h + 2 * ball_r - 3])\n        rotate([90, 0, a])\n        drip(drip_h, drip_r);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "yogurt",
    "openscad_code": "// Realistic yogurt cup with medium complexity\n// Dimensions in mm, suitable for 3D printing\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\ncup_height = 65;\ncup_outer_diameter = 50;\ncup_inner_diameter = 46;\nwall_thickness = 2;\nbase_thickness = 3;\nlip_height = 3;\nlip_outer_diameter = 54;\n\n// Yogurt surface parameters\nyogurt_level = 50;\nyogurt_texture_depth = 0.5;\nyogurt_texture_spacing = 2;\n\n// Label parameters\nlabel_height = 35;\nlabel_start = 15;\n\n// Create the complete yogurt cup\nmodule yogurt_cup() {\n    // Main cup body - hollow cylinder\n    difference() {\n        // Outer cup\n        cylinder(h = cup_height, d = cup_outer_diameter);\n        \n        // Inner cavity\n        translate([0, 0, base_thickness])\n            cylinder(h = cup_height - base_thickness + 1, d = cup_inner_diameter);\n    }\n    \n    // Add base thickness\n    translate([0, 0, -base_thickness])\n        cylinder(h = base_thickness, d = cup_outer_diameter);\n    \n    // Add lip/rim at top\n    translate([0, 0, cup_height])\n        cylinder(h = lip_height, d1 = cup_outer_diameter, d2 = lip_outer_diameter);\n}\n\n// Create yogurt surface texture\nmodule yogurt_surface() {\n    // Base yogurt fill\n    translate([0, 0, base_thickness])\n        cylinder(h = yogurt_level - base_thickness, d = cup_inner_diameter - 0.2);\n    \n    // Add subtle surface texture - small spheres for realistic look\n    for (i = [0:5:360]) {\n        rotate([0, 0, i]) {\n            for (j = [0:yogurt_texture_spacing:yogurt_level - base_thickness - 5]) {\n                translate([\n                    sin(i * 2) * (cup_inner_diameter/2 - 2), \n                    cos(i * 2) * (cup_inner_diameter/2 - 2), \n                    base_thickness + j + yogurt_texture_depth\n                ])\n                sphere(d = yogurt_texture_depth * 2);\n            }\n        }\n    }\n}\n\n// Create label area indentation\nmodule label_area() {\n    difference() {\n        // Main cup (already exists)\n        cylinder(h = cup_height, d = cup_outer_diameter);\n        \n        // Label indentation\n        translate([0, 0, label_start])\n            cylinder(h = label_height, d = cup_outer_diameter - 1);\n    }\n}\n\n// Create subtle grip rings on sides\nmodule grip_rings() {\n    for (i = [10:5:40]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h = 0.5, d = cup_outer_diameter + 0.2);\n                cylinder(h = 0.5, d = cup_outer_diameter - 0.2);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main cup with label area\n    difference() {\n        yogurt_cup();\n        label_area();\n    }\n    \n    // Add grip rings\n    grip_rings();\n    \n    // Add yogurt\n    yogurt_surface();\n}",
    "renders": true
  },
  {
    "household_item": "soda",
    "openscad_code": "// Realistic Soda Can - Medium Complexity\n// 3D printable soda can with proper wall thickness and no overhangs\n// Dimensions: 66mm diameter, 122mm height (standard soda can)\n\n// Overall scale factor\nscale_factor = 1;\n\n// Can dimensions\ncan_height = 122 * scale_factor;\ncan_diameter = 66 * scale_factor;\nwall_thickness = 1.2 * scale_factor;\n\n// Top dimensions\ntop_diameter = 57 * scale_factor;\ntop_height = 13 * scale_factor;\n\n// Tab dimensions\ntab_width = 22 * scale_factor;\ntab_length = 28 * scale_factor;\ntab_thickness = 0.8 * scale_factor;\n\n// Ridge dimensions\nridge_height = 2 * scale_factor;\nridge_spacing = 3 * scale_factor;\nnum_ridges = 12;\n\n// Main can body with internal cavity\nmodule can_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=can_height, d=can_diameter, $fn=100);\n        \n        // Internal cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=can_height - wall_thickness, d=can_diameter - 2*wall_thickness, $fn=100);\n    }\n}\n\n// Curved top section\nmodule can_top() {\n    difference() {\n        // Main curved top\n        translate([0, 0, can_height - top_height/2])\n            scale([1, 1, 0.5])\n                sphere(d=top_diameter, $fn=100);\n        \n        // Remove bottom half\n        translate([0, 0, can_height - top_height])\n            cube([top_diameter*2, top_diameter*2, top_height], center=true);\n    }\n}\n\n// Opening tab mechanism\nmodule opening_tab() {\n    // Tab base\n    translate([top_diameter/2 - tab_length/2, 0, can_height + top_height])\n        rotate([90, 0, 0])\n            linear_extrude(height=tab_thickness)\n                polygon(points=[\n                    [0, -tab_width/2],\n                    [tab_length*0.7, -tab_width/2],\n                    [tab_length, 0],\n                    [tab_length*0.7, tab_width/2],\n                    [0, tab_width/2]\n                ]);\n    \n    // Rivet\n    translate([top_diameter/2 - tab_length/4, 0, can_height + top_height - tab_thickness/2])\n        cylinder(h=tab_thickness*2, d=3*scale_factor, $fn=20);\n    \n    // Opening line\n    translate([top_diameter/2 + tab_length/4, 0, can_height + top_height - 0.1])\n        cube([15*scale_factor, 0.5*scale_factor, tab_thickness*2]);\n}\n\n// Bottom ridges for stacking\nmodule bottom_ridges() {\n    for (i = [0:num_ridges-1]) {\n        rotate([0, 0, i * 360/num_ridges])\n            translate([can_diameter/2 - wall_thickness - ridge_height/2, 0, 0])\n                cube([ridge_height, wall_thickness*2, ridge_spacing], center=true);\n    }\n}\n\n// Top rim for strength\nmodule top_rim() {\n    difference() {\n        cylinder(h=wall_thickness*1.5, d=can_diameter + wall_thickness, $fn=100);\n        cylinder(h=wall_thickness*1.5, d=can_diameter, $fn=100);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    can_body();\n    \n    // Top section\n    can_top();\n    \n    // Top rim\n    translate([0, 0, can_height - wall_thickness*1.5])\n        top_rim();\n    \n    // Opening tab\n    opening_tab();\n    \n    // Bottom ridges\n    translate([0, 0, wall_thickness])\n        bottom_ridges();\n}\n\n// Position for printing\ntranslate([0, 0, 0])",
    "renders": true
  },
  {
    "household_item": "kegerator",
    "openscad_code": "// Kegerator - Realistic Style, Medium Complexity\n// Dimensions in mm, suitable for 3D printing\n\n// Overall dimensions\nkeg_w = 40;\nkeg_h = 60;\nkeg_d = 30;\nwall_t = 1.5;\n\n// Taps\ntap_r = 3;\ntap_h = 8;\ntap_spacing = 12;\n\n// Drip tray\ntray_w = 30;\ntray_d = 10;\ntray_h = 2;\n\n// Casters\ncaster_r = 2.5;\ncaster_h = 5;\n\n// Door handle\nhandle_w = 10;\nhandle_h = 3;\nhandle_d = 2;\n\n// Top plate\ntop_w = keg_w + 4;\ntop_d = keg_d + 4;\ntop_h = 2;\n\n// Main body\nmodule kegerator_body() {\n    difference() {\n        // Outer shell\n        cube([keg_w, keg_d, keg_h], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_t/2])\n        cube([keg_w - 2*wall_t, keg_d - 2*wall_t, keg_h - wall_t], center=true);\n        \n        // Door cutout\n        translate([0, keg_d/2 - wall_t/2, 0])\n        cube([keg_w - 2*wall_t, wall_t + 0.1, keg_h - 2*wall_t], center=true);\n    }\n}\n\n// Door\nmodule door() {\n    translate([0, keg_d/2 + wall_t/2, 0])\n    cube([keg_w - 2*wall_t, wall_t, keg_h - 2*wall_t], center=true);\n}\n\n// Door handle\nmodule door_handle() {\n    translate([0, keg_d/2 + wall_t, keg_h/2 - 10])\n    rotate([90, 0, 0])\n    difference() {\n        // Handle base\n        cylinder(h=handle_d, r1=handle_w/2, r2=handle_w/2, center=true);\n        \n        // Grip cutout\n        translate([0, 0, -handle_d/2])\n        cube([handle_w - 2, handle_h - 1, handle_d + 0.1], center=true);\n    }\n}\n\n// Taps\nmodule taps() {\n    for (i = [-1:1]) {\n        translate([i * tap_spacing, 0, keg_h/2 + top_h])\n        union() {\n            // Tap base\n            cylinder(h=tap_h, r=tap_r + 1, center=false);\n            \n            // Tap spout\n            translate([0, tap_r + 1, tap_h/2])\n            rotate([90, 0, 0])\n            cylinder(h=tap_r + 2, r=tap_r/2, center=false);\n            \n            // Tap handle\n            translate([0, 0, tap_h + 2])\n            rotate([0, 0, 45 * i])\n            cube([2, 2, 6], center=true);\n        }\n    }\n}\n\n// Drip tray\nmodule drip_tray() {\n    difference() {\n        translate([0, keg_d/2 - tray_d/2, 0])\n        cube([tray_w, tray_d, tray_h], center=true);\n        \n        // Tray depression\n        translate([0, keg_d/2 - tray_d/2, tray_h/2 - 0.5])\n        cube([tray_w - 2, tray_d - 2, tray_h], center=true);\n    }\n}\n\n// Top plate\nmodule top_plate() {\n    translate([0, 0, keg_h/2 + top_h/2])\n    cube([top_w, top_d, top_h], center=true);\n}\n\n// Casters\nmodule casters() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (keg_w/2 - caster_r), y * (keg_d/2 - caster_r), -keg_h/2 - caster_h/2])\n            union() {\n                // Caster wheel\n                cylinder(h=caster_h/2, r=caster_r, center=true);\n                \n                // Caster mount\n                translate([0, 0, -caster_h/2])\n                cube([caster_r * 2, caster_r * 2, caster_h/2], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    kegerator_body();\n    door();\n    door_handle();\n    top_plate();\n    taps();\n    drip_tray();\n    casters();\n}",
    "renders": true
  },
  {
    "household_item": "wine",
    "openscad_code": "// Wine Bottle with Cork and Label - Realistic Style, Medium Complexity\n// Overall print-friendly: 90 mm tall, no unsupported overhangs\n\n// Parameters\nbottle_height = 90;\nbody_d = 30;\nneck_d = 12;\nfoot_d = 40;\nwall = 1.5;      // 3D-printable wall thickness\n\n// Main bottle shell\nmodule bottle_shell() {\n    difference() {\n        union() {\n            // Main body (cylinder + rounded shoulder)\n            translate([0, 0, 0])\n                cylinder(h = bottle_height * 0.7, d = body_d, $fn = 60);\n\n            // Tapered shoulder\n            translate([0, 0, bottle_height * 0.7])\n                cylinder(h = bottle_height * 0.15, d1 = body_d, d2 = neck_d, $fn = 60);\n\n            // Neck\n            translate([0, 0, bottle_height * 0.85])\n                cylinder(h = bottle_height * 0.15, d = neck_d, $fn = 60);\n        }\n\n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h = bottle_height - wall, d = body_d - 2 * wall, $fn = 60);\n\n        translate([0, 0, bottle_height * 0.85 + wall])\n            cylinder(h = bottle_height * 0.15 - wall, d = neck_d - 2 * wall, $fn = 60);\n    }\n}\n\n// Cork\nmodule cork() {\n    translate([0, 0, bottle_height + 1])\n        cylinder(h = 10, d1 = neck_d - 0.5, d2 = neck_d + 1, $fn = 20);\n}\n\n// Foot / stand\nmodule foot() {\n    translate([0, 0, -2])\n        cylinder(h = 2, d = foot_d, $fn = 60);\n}\n\n// Label band\nmodule label_band() {\n    color(\"white\")\n    difference() {\n        translate([0, 0, bottle_height * 0.4])\n            cylinder(h = wall, d = body_d + 0.2, $fn = 60);\n\n        translate([0, 0, bottle_height * 0.4 - 0.1])\n            cylinder(h = wall + 0.2, d = body_d, $fn = 60);\n    }\n}\n\n// Bottle assembly\nunion() {\n    bottle_shell();\n    cork();\n    foot();\n    label_band();\n}",
    "renders": true
  },
  {
    "household_item": "chiller",
    "openscad_code": "// Realistic style medium-complexity chiller\n// Overall dimensions: ~80 mm tall, ~60 mm wide, ~60 mm deep\n\n// Wall thickness for 3D printing\nwall = 2.0;\n\nmodule outer_shell() {\n    // Main chiller body – slightly rounded corners\n    difference() {\n        minkowski() {\n            cube([55, 55, 75], center = true);\n            sphere(5);\n        }\n        // Hollow out interior\n        translate([0, 0, 5])\n            minkowski() {\n                cube([55 - 2*wall - 2, 55 - 2*wall - 2, 75 - 2*wall], center = true);\n                sphere(4);\n            }\n    }\n}\n\nmodule lid() {\n    // Top lid with handle\n    difference() {\n        // Lid disk\n        translate([0, 0, 38])\n            cylinder(h = 8, d = 60, $fn = 64);\n        // Handle hole\n        translate([0, 0, 46])\n            cylinder(h = 12, d = 15, $fn = 32);\n    }\n    // Handle grip\n    translate([0, 0, 46])\n        cylinder(h = 12, d = 12, $fn = 32);\n}\n\nmodule base_feet() {\n    // Four rubber-like feet\n    for (x = [-20, 20])\n        for (y = [-20, 20])\n            translate([x, y, -39])\n                cylinder(h = 4, d = 8, $fn = 20);\n}\n\nmodule side_vent_slots() {\n    // Vertical vent slots on back face\n    translate([-28, 0, 0])\n        rotate([0, 90, 0])\n            for (z = [-25:5:25])\n                translate([z, 0, 0])\n                    cube([3, 30, 1]);\n}\n\nmodule front_display() {\n    // Simple control panel rectangle\n    translate([0, -28, 10])\n        cube([30, 2, 15]);\n}\n\nmodule power_cord() {\n    // Simple power cord stub\n    translate([25, 0, -30])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 6, $fn = 16);\n}\n\n// Assembly\nunion() {\n    outer_shell();\n    lid();\n    base_feet();\n    side_vent_slots();\n    front_display();\n    power_cord();\n}",
    "renders": true
  },
  {
    "household_item": "cellar",
    "openscad_code": "// Realistic 3D-printable cellar model (medium complexity)\n// Overall size ~80 mm long, 60 mm deep, 30 mm tall\n\n$fn = 32;\n\n// Main cellar chamber\nmodule cellar_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 5])\n            cube([80, 60, 25], center = true);\n\n        // Hollow interior\n        translate([0, 0, 7.5])\n            cube([74, 54, 21], center = true);\n\n        // Doorway arch\n        translate([-37, 0, 5])\n            rotate([0, 90, 0])\n            cylinder(h = 20, d1 = 20, d2 = 20);\n        translate([-37, 0, 15])\n            cube([20, 20, 10], center = true);\n    }\n}\n\n// Stone stairway leading down\nmodule stone_stairs() {\n    for (i = [0:3]) {\n        translate([-45, -20 + i * 10, 5 - i * 2])\n            cube([10, 10, 2 + i * 2]);\n    }\n}\n\n// Wooden door\nmodule door() {\n    difference() {\n        // Door slab\n        translate([-37, 0, 5])\n            rotate([0, 90, 0])\n            cube([20, 1.5, 18], center = true);\n\n        // Door handle hole\n        translate([-37, -0.75, 5])\n            rotate([0, 90, 0])\n            cylinder(h = 2, d = 3);\n    }\n}\n\n// Ventilation grate on back wall\nmodule vent_grate() {\n    difference() {\n        translate([37, 0, 15])\n            cube([2, 10, 6], center = true);\n\n        for (i = [-2:2]) {\n            translate([38, i * 1.5, 15])\n                cube([2, 0.8, 5], center = true);\n        }\n    }\n}\n\n// Internal wine rack\nmodule wine_rack() {\n    translate([15, 0, 12])\n        difference() {\n            cube([40, 50, 8], center = true);\n            \n            // Bottle holes\n            for (x = [-15:15:30]) {\n                for (y = [-20:10:20]) {\n                    translate([x, y, 12])\n                        rotate([90, 0, 0])\n                        cylinder(h = 10, d = 8);\n                }\n            }\n        }\n}\n\n// Stone texture on walls\nmodule stone_texture() {\n    difference() {\n        union() {\n            cellar_body();\n            stone_stairs();\n        }\n\n        // Random stone indents for realism\n        for (i = [1:20]) {\n            translate([randx(i) * 35, randy(i) * 25, randz(i) * 10 + 10])\n                sphere(d = 2 + rand(i) * 3);\n        }\n    }\n}\n\n// Helper random functions based on seed\nfunction rand(i) = (1664525 * i + 1013904223) % 1000 / 1000;\nfunction randx(i) = (rand(i) * 2 - 1);\nfunction randy(i) = (rand(i + 100) * 2 - 1);\nfunction randz(i) = (rand(i + 200) * 2 - 1);\n\n// Assemble the cellar\nunion() {\n    stone_texture();\n    door();\n    vent_grate();\n    wine_rack();\n}",
    "renders": true
  },
  {
    "household_item": "cleaner",
    "openscad_code": "// Realistic 3D-printable spray-bottle cleaner (medium complexity)\n// Overall height ≈ 85 mm\n\n$fn = 36; // smoother curves\n\n// ---------- PARAMETERS ----------\nh_total   = 85;   // total height of the bottle\nr_body    = 18;   // radius of the main bottle\nwall      = 1.5;  // printable wall thickness\nr_trigger = 5;    // trigger pivot radius\nh_trigger = 30;   // trigger height\nr_nozzle  = 3;    // nozzle tip radius\nh_nozzle  = 8;    // nozzle length\n\n// ---------- MODULES ----------\n\nmodule bottle_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = h_total * 0.7, r = r_body, center = false);\n        // Inner cavity (for liquid)\n        translate([0, 0, wall])\n            cylinder(h = h_total * 0.7 - 2*wall, r = r_body - wall, center = false);\n    }\n}\n\nmodule neck() {\n    translate([0, 0, h_total * 0.7])\n        cylinder(h = h_total * 0.15, r1 = r_body, r2 = r_body * 0.6, center = false);\n}\n\nmodule cap_base() {\n    translate([0, 0, h_total * 0.85])\n        cylinder(h = 6, r = r_body * 0.65, center = false);\n}\n\nmodule trigger_assembly() {\n    // Pivot cylinder\n    translate([r_body * 0.6, 0, h_total * 0.9])\n        rotate([90, 0, 0])\n            cylinder(h = 12, r = r_trigger, center = true);\n\n    // Trigger lever\n    translate([r_body * 0.6 + 3, 0, h_total * 0.9 - 5])\n        rotate([0, 0, 15])\n            cube([10, 3, h_trigger], center = true);\n\n    // Return spring housing (simplified)\n    translate([r_body * 0.6 - 2, 0, h_total * 0.9 - 8])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 3, center = true);\n}\n\nmodule nozzle() {\n    translate([r_body * 0.6 + 9, 0, h_total - 5])\n        rotate([0, -30, 0])\n        union() {\n            // Tube\n            cylinder(h = 25, r = 4, center = true);\n            // Tip\n            translate([12.5, 0, 0])\n                cylinder(h = h_nozzle, r1 = 4, r2 = r_nozzle, center = true);\n        }\n}\n\nmodule label_band() {\n    translate([0, 0, h_total * 0.35])\n        difference() {\n            cylinder(h = 8, r = r_body + 0.3, center = false);\n            cylinder(h = 8.1, r = r_body, center = false);\n        }\n}\n\nmodule bottom_base() {\n    // Adds stability and print-bed adhesion\n    translate([0, 0, -1])\n        cylinder(h = 2, r = r_body + 1, center = false);\n}\n\n// ---------- MAIN MODEL ----------\nunion() {\n    bottle_body();\n    neck();\n    cap_base();\n    trigger_assembly();\n    nozzle();\n    label_band();\n    bottom_base();\n}",
    "renders": true
  },
  {
    "household_item": "tool",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\nmodule handle_grip() {\n    difference() {\n        cylinder(h = 70, d = 28, center = false);\n        translate([0, 0, 2])\n            cylinder(h = 66, d = 24, center = false);\n    }\n}\n\nmodule handle_cap() {\n    translate([0, 0, 70])\n        cylinder(h = 8, d1 = 28, d2 = 32, center = false);\n}\n\nmodule handle_ring(n = 6) {\n    for (i = [0:n-1]) {\n        rotate([0, 0, i * 360/n])\n            translate([15, 0, 35])\n                rotate([0, 90, 0])\n                    cylinder(h = 3, d = 4, center = true);\n    }\n}\n\nmodule screwdriver_shaft() {\n    union() {\n        // main shaft\n        translate([0, 0, 78])\n            cylinder(h = 60, d = 8, center = false);\n        \n        // tip transition\n        translate([0, 0, 138])\n            cylinder(h = 10, d1 = 8, d2 = 6, center = false);\n        \n        // flat tip\n        translate([0, 0, 148])\n            cube([6, 1.5, 10], center = true);\n    }\n}\n\nmodule torque_strips() {\n    for (i = [0:2]) {\n        translate([0, 0, 10 + i * 20])\n            difference() {\n                cylinder(h = 4, d = 30, center = false);\n                cylinder(h = 5, d = 26, center = false);\n            }\n    }\n}\n\nmodule magnet_cavity() {\n    translate([0, 0, 154])\n        cylinder(h = 4, d = 4, center = true);\n}\n\nunion() {\n    handle_grip();\n    handle_cap();\n    handle_ring();\n    torque_strips();\n    screwdriver_shaft();\n    magnet_cavity();\n}",
    "renders": true
  },
  {
    "household_item": "hammer",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall scale factor (final length ≈ 92 mm)\nscale_factor = 1;\n\n// Hammer parameters\nhandle_len = 60 * scale_factor;\nhandle_d = 12 * scale_factor;\nhead_len = 22 * scale_factor;\nhead_h = 16 * scale_factor;\nhead_w = 12 * scale_factor;\nclaw_thick = 4 * scale_factor;\nclaw_len = 18 * scale_factor;\nclaw_curve = 14 * scale_factor;\n\n// 3D print wall thickness\nwall = 2 * scale_factor;\n\n// Main assembly\nunion() {\n    // Handle\n    handle();\n\n    // Head\n    translate([0, 0, handle_len - head_h/2])\n        hammer_head();\n}\n\n// Handle with grip rings\nmodule handle() {\n    // Solid handle shaft\n    cylinder(h = handle_len, d = handle_d, $fn = 36);\n\n    // Grip rings\n    for(i = [1:4]) {\n        translate([0, 0, i * handle_len/5])\n            difference() {\n                cylinder(h = 2 * scale_factor, d = handle_d + 1.5 * scale_factor, $fn = 36);\n                cylinder(h = 2 * scale_factor + 0.1, d = handle_d - 1 * scale_factor, $fn = 36);\n            }\n    }\n}\n\n// Hammer head with claw\nmodule hammer_head() {\n    difference() {\n        // Main head block\n        union() {\n            // Central block\n            cube([head_w, head_len, head_h], center = true);\n\n            // Striking face (slight dome)\n            translate([0, head_len/2 + 0.5, 0])\n                scale([head_w * 0.95, 1, head_h * 0.95])\n                    sphere(d = head_h, $fn = 32);\n        }\n\n        // Nail slot in claw\n        translate([0, -head_len/2 - claw_len/2, 0])\n            cube([2, claw_len + 2, head_h * 0.6], center = true);\n    }\n\n    // Claw curve\n    translate([0, -head_len/2 - claw_len/2 + 2, head_h/2 - claw_thick/2])\n        rotate([90, 0, 0])\n            linear_extrude(height = claw_thick, convexity = 10)\n                difference() {\n                    // Outer curve\n                    translate([0, 0])\n                        circle(r = claw_curve, $fn = 32);\n                    // Inner curve\n                    translate([0, claw_curve - claw_thick])\n                        circle(r = claw_curve - claw_thick, $fn = 32);\n                    // Cut to length\n                    translate([-claw_curve, -claw_curve*2])\n                        square(claw_curve * 2);\n                };\n}",
    "renders": true
  },
  {
    "household_item": "screwdriver",
    "openscad_code": "// Realistic Medium-Complexity Screwdriver (Phillips #2)\n// Overall length ≈ 90 mm, 3D-printable (no supports needed)\n\n// Main parameters\nhandle_len = 55;\nhandle_dia = 12;\nshaft_len = 35;\nshaft_dia = 6;\ntip_len = 6;\n\n// Handle grip rings\nmodule grip_rings() {\n    for (i = [0:4]) {\n        translate([0, 0, -handle_len/2 + 6 + i*9])\n            difference() {\n                cylinder(h = 2.5, d = handle_dia + 1, $fn = 60);\n                cylinder(h = 2.6, d = handle_dia - 1, $fn = 60);\n            }\n    }\n}\n\n// Handle with hex flats for torque\nmodule handle() {\n    difference() {\n        // Main ergonomic handle\n        union() {\n            // Tapered front section\n            cylinder(h = handle_len*0.3, d1 = shaft_dia + 2, d2 = handle_dia, $fn = 60);\n            // Main grip body\n            translate([0, 0, -handle_len*0.35])\n                cylinder(h = handle_len*0.7, d = handle_dia, $fn = 60);\n            // End cap dome\n            translate([0, 0, -handle_len/2 + 1])\n                sphere(d = handle_dia, $fn = 60);\n        }\n        // Hex recess for hanging\n        translate([0, 0, handle_len/2 - 3])\n            rotate([0, 0, 30])\n            cylinder(h = 5, d = 7, $fn = 6);\n    }\n    grip_rings();\n}\n\n// Phillips #2 tip profile\nmodule phillips_tip() {\n    linear_extrude(height = tip_len, center = true)\n    intersection() {\n        // Vertical slot\n        square([shaft_dia*0.7, shaft_dia*0.2], center = true);\n        // Horizontal slot (rotated)\n        rotate([0, 0, 90])\n            square([shaft_dia*0.7, shaft_dia*0.2], center = true);\n    }\n}\n\n// Main shaft with tip\nmodule shaft() {\n    union() {\n        // Cylindrical shaft\n        cylinder(h = shaft_len, d = shaft_dia, $fn = 60);\n        // Taper to tip\n        translate([0, 0, shaft_len/2 + tip_len/2])\n            cylinder(h = tip_len, d1 = shaft_dia, d2 = shaft_dia*0.8, $fn = 60);\n        // Phillips tip\n        translate([0, 0, shaft_len/2 + tip_len])\n            phillips_tip();\n    }\n}\n\n// Assembly\nunion() {\n    // Handle at origin\n    handle();\n    \n    // Shaft extending from handle\n    translate([0, 0, handle_len/2])\n        shaft();\n}",
    "renders": true
  },
  {
    "household_item": "wrench",
    "openscad_code": "// Realistic medium-complexity wrench for 3D printing\n// Overall size: 90 mm long, 15 mm wide, 6 mm thick\n\n$fn = 32;\n\n// Parameters\nwrench_length = 90;\nhandle_length = 60;\nhandle_width = 15;\nhandle_height = 6;\njaw_opening = 13;\njaw_thickness = 6;\njaw_depth = 12;\n\nmodule handle_profile() {\n    // Create ergonomic rounded handle cross-section\n    difference() {\n        offset(r = 2) offset(r = -2) circle(d = handle_width);\n        square([handle_width - 4, handle_height], center = true);\n    }\n}\n\nmodule handle() {\n    // Main handle with grooves for grip\n    linear_extrude(height = handle_length, center = true)\n        handle_profile();\n    \n    // Add grip grooves\n    for(i = [0:4]) {\n        translate([0, 0, -handle_length/2 + 10 + i*10])\n            rotate([90, 0, 0])\n                cylinder(h = 1, d = 14, center = true);\n    }\n}\n\nmodule open_end_jaw() {\n    // Box-shaped jaw body\n    difference() {\n        cube([handle_width, jaw_depth, jaw_thickness], center = true);\n        \n        // Hex opening for 13mm nut\n        translate([0, jaw_depth/2 - 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = handle_width + 2, d = jaw_opening);\n        \n        // Chamfer edges\n        translate([0, -jaw_depth/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = handle_width + 2, d = jaw_opening + 4);\n    }\n    \n    // Add small fillets\n    translate([0, 0, jaw_thickness/2 - 1])\n        cylinder(h = 2, d = handle_width, center = true);\n    translate([0, 0, -jaw_thickness/2 + 1])\n        cylinder(h = 2, d = handle_width, center = true);\n}\n\nmodule closed_end_jaw() {\n    // Closed end with 10mm hex\n    difference() {\n        cube([handle_width, jaw_depth, jaw_thickness], center = true);\n        \n        // Hex socket\n        rotate([90, 0, 0])\n            cylinder(h = handle_width + 2, d = 10, $fn = 6);\n    }\n    \n    // Add ring shape\n    difference() {\n        cylinder(h = jaw_thickness, d = handle_width + 8, center = true);\n        cylinder(h = jaw_thickness + 2, d = handle_width + 4, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0])\n        handle();\n    \n    // Open end jaw\n    translate([0, handle_length/2 + jaw_depth/2, 0])\n        open_end_jaw();\n    \n    // Closed end jaw\n    translate([0, -handle_length/2 - jaw_depth/2, 0])\n        closed_end_jaw();\n}",
    "renders": true
  },
  {
    "household_item": "pliers",
    "openscad_code": "// Realistic 3D-printable pliers – medium complexity\n// Overall length ~90 mm, designed to print as one assembled piece\n\n$fn = 32;        // curve resolution\nw = 2;           // wall thickness for printing\nh = 3;           // extra height for grip ribs\n\nmodule handle_block(len, wid, thick) {\n    difference() {\n        translate([0, 0, thick/2])\n            cube([len, wid, thick], center=true);\n        translate([0, 0, thick])\n            cube([len-4, wid-4, thick], center=true); // hollow core\n    }\n}\n\nmodule grip_ridges(len, wid) {\n    for (i = [0 : 3 : len-6]) {\n        translate([i-len/2+3, 0, 0])\n            cube([2, wid+1, h], center=true);\n    }\n}\n\nmodule pivot_pin(r, h) {\n    cylinder(h=h, r=r, center=true);\n}\n\nmodule cutter_jaw(len, wid, thick) {\n    difference() {\n        polyhedron(\n            points = [\n                [-len, -wid/2, 0],\n                [0, -wid/2, 0],\n                [0,  wid/2, 0],\n                [-len,  wid/2, 0],\n                [-len, -wid/2, thick],\n                [0, -wid/2, thick],\n                [0,  wid/2, thick],\n                [-len,  wid/2, thick],\n                [-len*0.8, 0, thick*1.5]  // cutter tip\n            ],\n            faces = [\n                [0,1,2,3], [4,7,6,5],\n                [0,4,5,1], [2,6,7,3],\n                [1,5,6,2], [0,3,7,4],\n                [5,8,6], [6,8,7]\n            ]\n        );\n        // cutting edge groove\n        translate([-len*0.7, 0, thick/2])\n            rotate([90, 0, 0])\n            cylinder(h=wid, r1=0.1, r2=0.5, center=true);\n    }\n}\n\nmodule half_pliers(side) {\n    mirror([side, 0, 0]) {\n        // handle\n        union() {\n            handle_block(45, 10, 8);\n            translate([0, 0, -4])\n                grip_ridges(45, 10);\n        }\n        \n        // neck taper\n        translate([20, 0, 0])\n            rotate([0, 0, -15])\n            cube([20, 8, 8], center=true);\n        \n        // jaw\n        translate([35, 0, 2])\n            rotate([0, 0, -15])\n            cutter_jaw(25, 6, 5);\n        \n        // pivot hole\n        translate([20, 0, 0])\n            rotate([90, 0, 0])\n            pivot_pin(2, 10);\n    }\n}\n\nunion() {\n    half_pliers(0);   // left half\n    half_pliers(1);   // right half\n}",
    "renders": true
  },
  {
    "household_item": "squeegee",
    "openscad_code": "// OpenSCAD Squeegee – medium complexity, realistic style\n// Overall length ≈ 95 mm, fully printable, no supports needed\n\n// Parameters\nhandle_len = 80;\nhandle_d = 12;\nneck_len = 12;\nneck_d = 6;\nblade_w = 75;\nblade_h = 15;\nblade_t = 2;\ngrip_rings = 5;\ngrip_ring_depth = 0.8;\nwall_t = 1.2;           // print-friendly wall thickness\n\n// -------------------- Modules --------------------\n\n// Handle grip rings\nmodule grip_ring(z_pos){\n    translate([0,0,z_pos])\n        difference(){\n            cylinder(d=handle_d+1, h=2, $fn=32);\n            cylinder(d=handle_d-2*grip_ring_depth, h=2.1, $fn=32);\n        }\n}\n\n// Handle shaft (hollow for weight/material savings)\nmodule handle_shaft(){\n    difference(){\n        cylinder(d=handle_d, h=handle_len, $fn=32);\n        translate([0,0,-0.1])\n            cylinder(d=handle_d-2*wall_t, h=handle_len+0.2, $fn=32);\n    }\n}\n\n// Neck between handle and blade holder\nmodule neck(){\n    cylinder(d1=handle_d, d2=neck_d, h=neck_len, $fn=32);\n}\n\n// Blade holder frame (printable flat side down)\nmodule blade_holder(){\n    difference(){\n        // Outer frame\n        cube([blade_w+6, blade_h+4, 6], center=true);\n        // Recess for blade insert\n        translate([0,0,-0.1])\n            cube([blade_w+2, blade_h, 3.2], center=true);\n        // Lightening holes\n        for(y=[-blade_h/3, 0, blade_h/3])\n            translate([0,y,0])\n                cylinder(d=4, h=7, $fn=16);\n    }\n}\n\n// Flexible rubber blade (single solid part)\nmodule blade(){\n    translate([0, -blade_h/2 - blade_t/2, -3])\n        cube([blade_w, blade_t, blade_h], center=true);\n}\n\n// -------------------- Assembly --------------------\n\nunion(){\n    // Grip rings on handle\n    for(i=[0:grip_rings-1])\n        grip_ring(i*(handle_len/(grip_rings-1)));\n\n    // Main handle assembly\n    handle_shaft();\n\n    // Neck\n    translate([0,0,handle_len])\n        neck();\n\n    // Blade holder\n    translate([0,0,handle_len+neck_len+3])\n        rotate([90,0,0])\n            blade_holder();\n\n    // Blade inserted into holder\n    translate([0,0,handle_len+neck_len+3])\n        rotate([90,0,0])\n            blade();\n}",
    "renders": true
  },
  {
    "household_item": "bleach",
    "openscad_code": "// Realistic Bleach Bottle - Medium Complexity\n// All dimensions in mm, ready for FDM printing\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\nbottle_height = 80;\nbottle_width = 35;\nbottle_depth = 20;\nwall_thickness = 2;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Main body with rounded edges\n        union() {\n            // Central cylinder\n            cylinder(h=bottle_height*0.8, d=bottle_width, center=false);\n            \n            // Top neck transition\n            translate([0, 0, bottle_height*0.8])\n                cylinder(h=bottle_height*0.1, d1=bottle_width, d2=bottle_width*0.6, center=false);\n            \n            // Neck\n            translate([0, 0, bottle_height*0.9])\n                cylinder(h=bottle_height*0.08, d=bottle_width*0.6, center=false);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h=bottle_height-wall_thickness*2, d=bottle_width-wall_thickness*2, center=false);\n        \n        // Top opening\n        translate([0, 0, bottle_height-wall_thickness])\n            cylinder(h=wall_thickness+1, d=bottle_width*0.6-wall_thickness*2, center=false);\n    }\n}\n\n// Screw cap\nmodule cap() {\n    difference() {\n        union() {\n            // Main cap body\n            cylinder(h=8, d=bottle_width*0.7, center=false);\n            \n            // Grip ridges\n            for(i=[0:23]) {\n                rotate([0, 0, i*15])\n                    translate([bottle_width*0.7/2-1, -1, 0])\n                        cube([2, 2, 8]);\n            }\n        }\n        \n        // Internal threads (simplified)\n        translate([0, 0, -1])\n            cylinder(h=10, d=bottle_width*0.6+1, center=false);\n    }\n}\n\n// Handle grip on side\nmodule side_grip() {\n    translate([bottle_width/2+1, 0, bottle_height*0.4])\n        rotate([90, 0, 0])\n            difference() {\n                // Grip shape\n                cylinder(h=15, d=8, center=true);\n                \n                // Center hole\n                cylinder(h=16, d=4, center=true);\n            }\n}\n\n// Label recess\nmodule label_area() {\n    translate([-bottle_width/2-0.5, -bottle_depth/2, bottle_height*0.2])\n        cube([1, bottle_depth, bottle_height*0.5]);\n}\n\n// Base reinforcement ring\nmodule base_ring() {\n    translate([0, 0, -1])\n        difference() {\n            cylinder(h=3, d=bottle_width+4, center=false);\n            cylinder(h=4, d=bottle_width, center=false);\n        }\n}\n\n// Assembly\ntranslate([0, 0, 3])\n    bottle_body();\n\ntranslate([0, 0, bottle_height+3])\n    cap();\n\ntranslate([0, 0, 3])\n    side_grip();\n\ntranslate([0, 0, 3])\n    label_area();\n\ntranslate([0, 0, 3])\n    base_ring();",
    "renders": true
  },
  {
    "household_item": "ammonia",
    "openscad_code": "// Ammonia (NH3) molecule – stylized but recognizable “ball-and-stick” model\n// Overall size ≈ 70 mm along the longest axis\n// 3D-printable: all spheres rest on the build plate or are bridged by cylinders  \n// No over-hangs > 45°, 2 mm wall thickness everywhere\n\n// ---------- parameters ----------\natom_d = 16;            // diameter of all atoms\nstick_d = 4;            // diameter of bonds\nwall = 2;               // minimum printable wall thickness\nscale_factor = 1.8;     // final scale up to reach 50-70 mm\n\n// ---------- basic colors ----------\n$fn = 30;               // good compromise between smoothness and facet count\n\n// ---------- atom module ----------\nmodule atom(d, col) {\n    color(col)\n    sphere(d=d);\n}\n\n// ---------- bond module ----------\n// Creates a cylinder between two points p0 and p1\nmodule stick(p0, p1, d) {\n    // vector between points\n    v = p1 - p0;\n    len = norm(v);\n    // rotation angles\n    phi   = atan2(v.y, v.x);\n    theta = acos(v.z / len);\n    translate(p0)\n    rotate([0, 0, phi])\n    rotate([0, theta, 0])\n    cylinder(h = len, d = d, $fn = 20);\n}\n\n// ---------- positions ----------\n// Nitrogen at origin\nN = [0, 0, 0];\n\n// Hydrogens in trigonal-pyramidal arrangement\n// N–H bond length ≈ 101 pm  → model length 30 mm\nbond_len = 30;\n\n// H positions generated by rotating around Z then tilting down\nangle = 120;\ntilt  = 70;  // degrees from vertical\nH1 = [\n    bond_len * sin(tilt) * cos(0),\n    bond_len * sin(tilt) * sin(0),\n   -bond_len * cos(tilt)\n];\nH2 = [\n    bond_len * sin(tilt) * cos(angle),\n    bond_len * sin(tilt) * sin(angle),\n   -bond_len * cos(tilt)\n];\nH3 = [\n    bond_len * sin(tilt) * cos(2*angle),\n    bond_len * sin(tilt) * sin(2*angle),\n   -bond_len * cos(tilt)\n];\n\n// ---------- build ----------\nunion() {\n    scale(scale_factor) {\n        // Nitrogen\n        atom(atom_d, \"blue\");\n\n        // Hydrogens\n        translate(H1) atom(atom_d, \"white\");\n        translate(H2) atom(atom_d, \"white\");\n        translate(H3) atom(atom_d, \"white\");\n\n        // Bonds\n        stick(N, H1, stick_d);\n        stick(N, H2, stick_d);\n        stick(N, H3, stick_d);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "vinegar",
    "openscad_code": "// Realistic 3D printable vinegar bottle (medium complexity)\n// Approx. 85 mm tall, 35 mm wide\n\n$fn = 50;  // Smooth curves\n\n// Bottle body\nmodule bottle_body() {\n    difference() {\n        // Main body - cylindrical with rounded shoulders\n        union() {\n            cylinder(h = 65, d = 32, center = false);\n            translate([0, 0, 62])\n                scale([1.2, 1.2, 0.6])\n                    sphere(d = 32);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 70, d = 28, center = false);\n    }\n}\n\n// Neck and cap area\nmodule neck() {\n    difference() {\n        // Tapered neck\n        cylinder(h = 12, d1 = 20, d2 = 15, center = false);\n        \n        // Thread for cap\n        for(i = [0:5:35]) {\n            rotate([0, 0, i])\n                translate([8, 0, 2])\n                    cube([2, 5, 1], center = true);\n        }\n    }\n}\n\n// Screw cap\nmodule cap() {\n    difference() {\n        // Main cap body\n        cylinder(h = 10, d = 18, center = false);\n        \n        // Internal threads\n        for(i = [0:5:35]) {\n            rotate([0, 0, i])\n                translate([6, 0, 2])\n                    cube([1.5, 3, 1.5], center = true);\n        }\n        \n        // Grip ridges on outside\n        for(i = [0:15:345]) {\n            rotate([0, 0, i])\n                translate([9.5, 0, 5])\n                    cube([1, 2, 8], center = true);\n        }\n    }\n}\n\n// Label area (slightly recessed)\nmodule label_area() {\n    translate([0, 16.5, 35])\n        difference() {\n            cube([30, 1, 25], center = true);\n            translate([0, 0.5, 0])\n                cube([28, 1, 23], center = true);\n        }\n}\n\n// Bottom ring for stability\nmodule bottom_ring() {\n    difference() {\n        cylinder(h = 3, d = 35, center = false);\n        cylinder(h = 3.5, d = 30, center = false);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Bottle assembly\n    union() {\n        bottle_body();\n        translate([0, 0, 65])\n            neck();\n        bottom_ring();\n    }\n    \n    // Cap (separate for printing)\n    translate([0, 0, 78])\n        cap();\n    \n    // Label recess\n    label_area();\n}",
    "renders": true
  },
  {
    "household_item": "degreaser",
    "openscad_code": "// Realistic degreaser spray can - medium complexity\n// Overall dimensions: ~55mm diameter, ~120mm height\n\n// Main body parameters\nbody_d = 50;        // Body diameter\nbody_h = 80;        // Body height\ntop_d = 45;         // Tapered top diameter\ntop_h = 15;         // Tapered top height\ncap_d = 40;         // Cap diameter\ncap_h = 20;         // Cap height\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\n// Nozzle parameters\nnozzle_r = 8;       // Nozzle radius\nnozzle_h = 12;      // Nozzle height\n\n// Base indentation parameters\nbase_indent = 5;    // Base indent depth\nbase_r = 15;        // Base indent radius\n\n// Label groove parameters\ngroove_w = 3;       // Groove width\ngroove_d = 1;       // Groove depth\ngroove_n = 8;       // Number of grooves\n\n// Helper module for rounded cylinder\nmodule rounded_cylinder(d, h) {\n    hull() {\n        translate([0, 0, 0]) sphere(d/2);\n        translate([0, 0, h]) sphere(d/2);\n    }\n}\n\n// Main body with tapered top\nmodule body() {\n    difference() {\n        union() {\n            // Main cylindrical body\n            cylinder(h=body_h, d=body_d, $fn=100);\n            \n            // Tapered top\n            translate([0, 0, body_h]) \n                cylinder(h=top_h, d1=body_d, d2=top_d, $fn=100);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1]) \n            cylinder(h=body_h+top_h+2, d=body_d-2*wall_t, $fn=100);\n    }\n}\n\n// Base with indentations\nmodule base() {\n    difference() {\n        // Solid base\n        cylinder(h=wall_t*2, d=body_d, $fn=100);\n        \n        // Center indent\n        translate([0, 0, -1]) \n            cylinder(h=wall_t+2, d=base_r*2, $fn=50);\n        \n        // Side indents for grip\n        for(i=[0:2]) {\n            rotate([0, 0, i*120]) \n                translate([body_d/2 - base_indent, 0, -1]) \n                    cube([base_indent*2, base_indent, wall_t*2+2], center=true);\n        }\n    }\n}\n\n// Label grooves\nmodule label_grooves() {\n    for(i=[0:groove_n-1]) {\n        rotate([0, 0, i*(360/groove_n)]) {\n            translate([body_d/2 - groove_d/2, 0, body_h/2]) \n                cube([groove_d, groove_w, body_h*0.6], center=true);\n        }\n    }\n}\n\n// Spray cap\nmodule cap() {\n    difference() {\n        // Main cap shape\n        union() {\n            cylinder(h=cap_h, d=cap_d, $fn=100);\n            // Rounded top\n            translate([0, 0, cap_h]) \n                sphere(d=cap_d/2, $fn=100);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1]) \n            cylinder(h=cap_h+2, d=cap_d-2*wall_t, $fn=100);\n        \n        // Nozzle hole\n        translate([0, 0, cap_h]) \n            cylinder(h=nozzle_h, d=nozzle_r, $fn=50);\n    }\n}\n\n// Nozzle assembly\nmodule nozzle() {\n    union() {\n        // Main nozzle body\n        cylinder(h=nozzle_h, d=nozzle_r, $fn=50);\n        \n        // Spray tip\n        translate([0, 0, nozzle_h]) \n            cylinder(h=nozzle_h/2, d1=nozzle_r, d2=nozzle_r/2, $fn=50);\n        \n        // Trigger guard\n        translate([nozzle_r*1.2, 0, 0]) \n            rotate([90, 0, 0]) \n                difference() {\n                    cylinder(h=nozzle_r*2, d=wall_t*3, $fn=20);\n                    translate([0, 0, -1]) \n                        cylinder(h=nozzle_r*2+2, d=wall_t, $fn=20);\n                }\n    }\n}\n\n// Assembly\ntranslate([0, 0, wall_t*2]) {\n    // Base\n    base();\n    \n    // Body\n    translate([0, 0, wall_t*2]) body();\n    \n    // Label grooves\n    translate([0, 0, wall_t*2 + body_h*0.2]) label_grooves();\n    \n    // Cap\n    translate([0, 0, wall_t*2 + body_h + top_h]) cap();\n    \n    // Nozzle\n    translate([0, 0, wall_t*2 + body_h + top_h + cap_h]) nozzle();\n}",
    "renders": true
  },
  {
    "household_item": "sanitizer",
    "openscad_code": "// Hand-sanitizer bottle – realistic style, medium complexity\n// Overall size ≈ 110 mm (height), 3 mm wall thickness for printing\n\n$fn = 36;\n\n// Main assembly\nmodule sanitizerBottle() {\n    union() {\n        bottleBody();\n        pumpHead();\n        labelBand();\n    }\n}\n\n// Soft-curved bottle body\nmodule bottleBody() {\n    difference() {\n        // Outer shell\n        linear_extrude(height = 80, twist = 7, scale = [0.85,0.85])\n            offset(r = 3)\n                square([40, 20], center = true);\n\n        // Hollow inside\n        translate([0, 0, 3])\n            linear_extrude(height = 74, twist = 7, scale = [0.82,0.82])\n                offset(r = 3.1)\n                    square([37, 17], center = true);\n\n        // Flat base inside\n        translate([0, 0, -0.1])\n            cube([60, 40, 3.1], center = true);\n    }\n\n    // Base fillet ring\n    translate([0, 0, 0.5])\n        cylinder(h = 2, r1 = 21, r2 = 23);\n}\n\n// Pump assembly\nmodule pumpHead() {\n    union() {\n        // Pump neck\n        translate([0, 0, 80])\n            cylinder(h = 15, r1 = 10, r2 = 8);\n\n        // Shoulder\n        translate([0, 0, 95])\n            cylinder(h = 4, r = 11);\n\n        // Pump dome\n        translate([0, 0, 99])\n            sphere(d = 20);\n\n        // Nozzle\n        rotate([-90, 0, 0])\n            translate([0, 0, 10])\n                cylinder(h = 18, r1 = 5, r2 = 3);\n\n        // Spout tip\n        rotate([-90, 0, 0])\n            translate([0, 0, 28])\n                sphere(d = 3);\n    }\n}\n\n// Raised label band\nmodule labelBand() {\n    difference() {\n        // Band\n        translate([0, 0, 45])\n            cube([46, 26, 0.6], center = true);\n\n        // Recessed text area (faux label)\n        translate([0, 0, 45.3])\n            cube([42, 22, 0.3], center = true);\n    }\n\n    // Small ridges for grip\n    for (i = [-2:2]) {\n        translate([i * 7, 0, 45.4])\n            cube([2, 26, 0.3], center = true);\n    }\n}\n\nsanitizerBottle();",
    "renders": true
  },
  {
    "household_item": "disinfectant",
    "openscad_code": "// Disinfectant Spray Bottle - Realistic Style, Medium Complexity\n// Overall dimensions: ~50mm diameter, ~180mm height (scaled down for printing)\n\n$fn = 50;  // Smooth curves for printing\n\n// Main dimensions\nbottle_d = 40;\nbottle_h = 130;\nneck_d = 18;\ncap_h = 25;\nnozzle_len = 35;\nnozzle_d = 8;\ntrigger_w = 25;\ntrigger_h = 30;\n\nmodule bottle_body() {\n    difference() {\n        // Main bottle - slightly tapered\n        cylinder(h1=bottle_d, h2=bottle_d*0.9, h=bottle_h);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h1=bottle_d-4, h2=bottle_d*0.9-4, h=bottle_h);\n        \n        // Label indentation\n        translate([0, 0, bottle_h*0.4])\n            rotate([90, 0, 0])\n                cylinder(d=bottle_d+1, h=bottle_h*0.3, $fn=6);\n    }\n}\n\nmodule cap() {\n    // Trigger spray cap\n    union() {\n        // Main cap\n        cylinder(d=neck_d+4, h=cap_h);\n        \n        // Nozzle tube\n        translate([0, 0, cap_h-2])\n            rotate([90, 0, 0])\n                cylinder(d=nozzle_d, h=nozzle_len);\n        \n        // Trigger mechanism\n        translate([0, -neck_d/2-5, cap_h/2]) {\n            difference() {\n                // Trigger shape\n                cube([trigger_w, 8, trigger_h], center=true);\n                \n                // Finger groove\n                translate([0, 4, 0])\n                    cube([trigger_w-6, 10, trigger_h-10], center=true);\n            }\n        }\n        \n        // Safety clip\n        translate([0, neck_d/2+3, cap_h/2])\n            cube([8, 3, 15], center=true);\n    }\n}\n\nmodule bottle_neck() {\n    // Threaded neck\n    difference() {\n        cylinder(d=neck_d, h=15);\n        \n        // Hollow\n        cylinder(d=neck_d-4, h=15);\n        \n        // Threads (simplified)\n        for(i=[0:3:15]) {\n            translate([0, 0, i])\n                rotate([0, 0, i*30])\n                    cube([neck_d+1, 1, 1], center=true);\n        }\n    }\n}\n\nmodule base_details() {\n    // Bottom ring for stability\n    translate([0, 0, -1])\n        cylinder(d=bottle_d+4, h=2);\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Bottle base\n    bottle_body();\n    \n    // Base details\n    base_details();\n    \n    // Neck\n    translate([0, 0, bottle_h])\n        bottle_neck();\n    \n    // Cap\n    translate([0, 0, bottle_h+15])\n        cap();\n}\n\n// Small spray indicator arrow\ntranslate([0, nozzle_len/2, bottle_h+15+cap_h-2])\n    rotate([0, 90, 0])\n        cylinder(d=3, h=5);",
    "renders": true
  },
  {
    "household_item": "scrubber",
    "openscad_code": "// Realistic medium-complexity dish scrubber\n// Size: ~80 mm long, 45 mm wide, 35 mm thick\n// Safe for 3D printing – no steep overhangs, 1.5 mm walls\n\n// Overall dimensions\nscrub_len = 80;\nscrub_wid = 45;\nscrub_h   = 35;\nhandle_len = 40;\n\n// Wall / feature thicknesses\nwall = 1.5;\nbristle_d = 3;\nbristle_h = 7;\nrows = 6;\ncols = 10;\n\n// Main body shell – hollow underneath to save material\nmodule body_shell() {\n    difference() {\n        // Outer rounded block\n        hull() {\n            translate([ 5, 5, 0]) cylinder(r=5, h=scrub_h);\n            translate([ scrub_len-5, 5, 0]) cylinder(r=5, h=scrub_h);\n            translate([ scrub_len-5, scrub_wid-5, 0]) cylinder(r=5, h=scrub_h);\n            translate([ 5, scrub_wid-5, 0]) cylinder(r=5, h=scrub_h);\n        }\n        // Hollow cavity\n        translate([0, 0, -0.01])\n            cube([scrub_len, scrub_wid, scrub_h/2 + 0.02]);\n    }\n}\n\n// Handle grip with finger grooves\nmodule handle() {\n    translate([scrub_len - handle_len, -5, scrub_h/2])\n    rotate([0, 90, 0])\n    difference() {\n        // Main handle bar\n        cylinder(h=handle_len + 10, r=9, $fn=32);\n        // Finger grooves\n        for(i=[0:3])\n            translate([i*10 + 5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=15, r1=8, r2=5, $fn=32);\n    }\n}\n\n// Bristles pad – grid of short cylinders\nmodule bristles() {\n    // Position pad near front bottom\n    translate([5, 5, 0])\n    for(x=[0:cols-1])\n        for(y=[0:rows-1])\n            translate([x*(scrub_len-10)/(cols-1),\n                       y*(scrub_wid-10)/(rows-1),\n                       0])\n                cylinder(d=bristle_d, h=bristle_h, $fn=16);\n}\n\n// Drain / hang hole on rear\nmodule hang_hole() {\n    translate([scrub_len/2, scrub_wid + 2, scrub_h - 5])\n    rotate([90, 0, 0])\n        cylinder(h=10, d=6, $fn=32);\n}\n\n// Assemble parts\nunion() {\n    body_shell();\n    handle();\n    bristles();\n    hang_hole();\n}",
    "renders": true
  },
  {
    "household_item": "scourer",
    "openscad_code": "// Realistic 3D-printable scourer (steel-wool style)\n// Roughly 70 mm diameter, 15 mm thick\n// Medium complexity, only basic primitives and boolean ops\n\n$fn = 24;\n\n// Overall dimensions\nscourer_d = 70;\nscourer_h = 15;\nwire_d = 1.0;           // diameter of single wire\nwire_step = 3.5;        // spacing between centers of parallel wires\nwall_thk = 1.5;         // printable wall thickness\n\nmodule single_wire(l, ang, z) {\n    // one crimped steel wire\n    rotate([0, 0, ang])\n    translate([0, 0, z])\n    union() {\n        // main straight segments\n        for (i = [0 : 2]) {\n            translate([0, -l/2 + i*l/3, 0])\n            rotate([90, 0, 0])\n            cylinder(d = wire_d, h = l/3, center = true);\n        }\n        // small bends (cylinders at 45°)\n        for (i = [1 : 2]) {\n            translate([0, -l/2 + i*l/3, 0])\n            rotate([90, 45, 0])\n            cylinder(d = wire_d, h = wire_d*1.5, center = true);\n            rotate([90, -45, 0])\n            cylinder(d = wire_d, h = wire_d*1.5, center = true);\n        }\n    }\n}\n\nmodule wire_layer(ang) {\n    // one planar layer of criss-cross wires\n    // wires along X\n    for (y = [-scourer_d/2 : wire_step : scourer_d/2]) {\n        translate([0, y, 0])\n        single_wire(scourer_d, ang, 0);\n    }\n    // wires along Y (rotated 90°)\n    for (x = [-scourer_d/2 : wire_step : scourer_d/2]) {\n        translate([x, 0, 0])\n        rotate([0, 0, 90])\n        single_wire(scourer_d, ang, 0);\n    }\n}\n\nmodule scourer_body() {\n    // build up layers of wires rotated each time\n    layers = floor(scourer_h / wire_step);\n    for (i = [0 : layers-1]) {\n        z = -scourer_h/2 + i * wire_step + wire_step/2;\n        translate([0, 0, z])\n        wire_layer(i*30);   // slight rotation per layer\n    }\n}\n\nmodule reinforcing_ring() {\n    // thin printable ring to hold wires together at the edges\n    difference() {\n        cylinder(d = scourer_d + wall_thk*2, h = scourer_h, center = true);\n        cylinder(d = scourer_d - wall_thk*2, h = scourer_h + 0.1, center = true);\n    }\n}\n\n// Final assembly\nunion() {\n    // main wire mesh\n    scourer_body();\n\n    // edge reinforcement for printability and handling\n    reinforcing_ring();\n}",
    "renders": true
  },
  {
    "household_item": "broomstick",
    "openscad_code": "// Realistic 3D-printable broomstick\n// Overall length ~85 mm, printable without supports\n\n// Basic parameters\nhandle_length = 60;\nhandle_radius = 3;\nbristle_length = 25;\nbristle_radius = 12;\nwall_thickness = 1.2;\n\n// Main broomstick module\nmodule broomstick() {\n    // Handle with slight taper\n    translate([0, 0, handle_length/2])\n        cylinder(h=handle_length, r1=handle_radius, r2=handle_radius*0.9, $fn=32);\n    \n    // Metal ferrule (band around handle end)\n    translate([0, 0, handle_length])\n        cylinder(h=5, r=handle_radius+1, $fn=32);\n    \n    // Bristle base (solid)\n    translate([0, 0, handle_length+2.5])\n        cylinder(h=5, r=bristle_radius-3, $fn=32);\n    \n    // Bristle holder (hollow cylinder)\n    difference() {\n        translate([0, 0, handle_length+7.5])\n            cylinder(h=bristle_length, r=bristle_radius, $fn=32);\n        \n        // Hollow out bristle holder\n        translate([0, 0, handle_length+7.5-wall_thickness])\n            cylinder(h=bristle_length+wall_thickness, r=bristle_radius-wall_thickness, $fn=32);\n    }\n    \n    // Individual bristles in radial pattern\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n            translate([bristle_radius-4, 0, handle_length+7.5])\n                rotate([90, 0, 0])\n                    cylinder(h=bristle_length-3, r=0.5, $fn=6);\n    }\n    \n    // Additional bristles in inner ring\n    for(i = [7.5:15:359]) {\n        rotate([0, 0, i])\n            translate([bristle_radius-6, 0, handle_length+7.5])\n                rotate([90, 0, 0])\n                    cylinder(h=bristle_length-3, r=0.4, $fn=6);\n    }\n    \n    // Handle grip rings for realism\n    for(pos = [10:15:handle_length-10]) {\n        translate([0, 0, pos])\n            difference() {\n                cylinder(h=1.5, r=handle_radius+0.2, $fn=32);\n                cylinder(h=1.5, r=handle_radius-0.3, $fn=32);\n            }\n    }\n    \n    // Broom label tag\n    translate([handle_radius+0.5, 0, handle_length/2])\n        rotate([0, 90, 0])\n            cube([2, 8, 3]);\n}\n\n// Generate the model\nbroomstick();",
    "renders": true
  },
  {
    "household_item": "dustpan",
    "openscad_code": "$fn = 36;\n\n// Overall dimensions\ndustpan_width = 90;\ndustpan_depth = 85;\ndustpan_height = 30;\nwall_thickness = 2.2;\n\nmodule dustpan_body() {\n    difference() {\n        // Main scoop shape - tapered box\n        hull() {\n            // Front lip (wide)\n            translate([0, dustpan_depth/2, 0])\n                cube([dustpan_width, wall_thickness, dustpan_height], center=true);\n                \n            // Back (narrow)\n            translate([0, -dustpan_depth/2, 0])\n                cube([dustpan_width*0.6, wall_thickness, dustpan_height*1.2], center=true);\n                \n            // Bottom front\n            translate([0, dustpan_depth/2, -dustpan_height/2+1])\n                cube([dustpan_width, wall_thickness, wall_thickness], center=true);\n                \n            // Bottom back\n            translate([0, -dustpan_depth/2, -dustpan_height/2+1])\n                cube([dustpan_width*0.6, wall_thickness, wall_thickness], center=true);\n        }\n        \n        // Hollow out interior\n        translate([0, dustpan_depth/2 - 5, 1])\n            scale([0.8, 0.9, 0.8])\n            cube([dustpan_width, dustpan_depth, dustpan_height], center=true);\n    }\n}\n\nmodule handle_mount() {\n    // Handle socket cylinder\n    difference() {\n        // Outer cylinder\n        translate([0, -dustpan_depth/2 + 5, dustpan_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=25, r1=7, r2=6);\n            \n        // Inner hole for handle\n        translate([0, -dustpan_depth/2 + 5, dustpan_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=30, r=4.5);\n    }\n    \n    // Reinforcement ribs\n    for(i=[-1, 1]) {\n        translate([i * 10, -dustpan_depth/2 + 5, dustpan_height/2 - 5])\n            rotate([0, 30*i, 0])\n            cube([wall_thickness, 15, 10]);\n    }\n}\n\nmodule front_lip() {\n    // Thin leading edge for sweeping\n    difference() {\n        // Tapered edge\n        translate([0, dustpan_depth/2 + 0.5, -1])\n            cube([dustpan_width + 2, 2, 3], center=true);\n            \n        // Bevel underside\n        translate([0, dustpan_depth/2 + 1.5, -2])\n            rotate([25, 0, 0])\n            cube([dustpan_width + 5, 5, 5], center=true);\n    }\n}\n\nmodule side_walls() {\n    // Curved side walls\n    difference() {\n        // Left wall\n        translate([-dustpan_width/2 - wall_thickness/2, 0, dustpan_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=dustpan_depth, r=dustpan_height/2, center=true);\n            \n        // Cut excess\n        translate([-dustpan_width/2 - 10, 0, dustpan_height])\n            cube([20, dustpan_depth + 20, dustpan_height + 10], center=true);\n            \n        // Hollow\n        translate([-dustpan_width/2, 0, dustpan_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=dustpan_depth, r=dustpan_height/2 - wall_thickness, center=true);\n    }\n    \n    // Right wall (mirror of left)\n    mirror([1, 0, 0])\n        side_walls();\n}\n\n// Assembly\nunion() {\n    dustpan_body();\n    handle_mount();\n    front_lip();\n    side_walls();\n    \n    // Bottom reinforcement strips\n    for(y=[-dustpan_depth/2 + 10, -dustpan_depth/2 + 25, -dustpan_depth/2 + 40]) {\n        translate([0, y, -dustpan_height/2 + wall_thickness])\n            cube([dustpan_width * (1 - (y + dustpan_depth/2)/dustpan_depth * 0.3), wall_thickness*1.5, wall_thickness], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "gloves",
    "openscad_code": "// Realistic 3D printable gloves - medium complexity\n// Wall thickness = 2 mm for printability\n\n$fn = 50;\nwall = 2;\n\nmodule finger_segment(len, dia, taper) {\n    difference() {\n        cylinder(h = len, d1 = dia, d2 = dia * taper, center = false);\n        translate([0, 0, wall]) \n            cylinder(h = len - wall*2, d1 = dia - wall*2, d2 = dia*taper - wall*2, center = false);\n    }\n}\n\nmodule finger(len, base_dia, taper = 0.85) {\n    segments = 3;\n    segment_len = len / segments;\n    for(i = [0:segments-1]) {\n        translate([0, 0, i * segment_len]) \n            finger_segment(segment_len, base_dia * pow(taper, i), taper);\n    }\n}\n\nmodule thumb() {\n    rotate([0, 15, 0]) \n    translate([12, -15, 8]) \n    rotate([0, 0, -30]) \n        finger(25, 10, 0.8);\n}\n\nmodule palm() {\n    difference() {\n        hull() {\n            translate([-5, -20, 0]) sphere(d = 20);\n            translate([15, -15, 0]) sphere(d = 18);\n            translate([25, 0, 0]) sphere(d = 15);\n            translate([20, 15, 0]) sphere(d = 12);\n            translate([5, 20, 0]) sphere(d = 10);\n            translate([-10, 10, 0]) sphere(d = 15);\n        }\n        scale([0.8, 0.8, 0.8]) \n        translate([0, 0, wall]) \n            hull() {\n                translate([-5, -20, 0]) sphere(d = 20);\n                translate([15, -15, 0]) sphere(d = 18);\n                translate([25, 0, 0]) sphere(d = 15);\n                translate([20, 15, 0]) sphere(d = 12);\n                translate([5, 20, 0]) sphere(d = 10);\n                translate([-10, 10, 0]) sphere(d = 15);\n            }\n    }\n}\n\nmodule fingers() {\n    // Index finger\n    translate([20, 0, 0]) \n        finger(30, 9);\n    \n    // Middle finger\n    translate([15, 10, 2]) \n        finger(32, 9.5);\n    \n    // Ring finger\n    translate([10, 18, 1]) \n        finger(28, 8.5);\n    \n    // Pinky\n    translate([5, 25, 0]) \n        finger(22, 7.5);\n}\n\nmodule cuff() {\n    difference() {\n        cylinder(h = 25, d1 = 40, d2 = 35, center = false);\n        translate([0, 0, wall]) \n            cylinder(h = 25 - wall*2, d1 = 40 - wall*2, d2 = 35 - wall*2, center = false);\n    }\n}\n\nmodule glove_left() {\n    union() {\n        translate([0, 0, 25]) palm();\n        fingers();\n        thumb();\n        translate([0, 0, -5]) cuff();\n    }\n}\n\n// Main assembly\nglove_left();\n\n// Optional: mirror for right glove\n// mirror([1, 0, 0]) glove_left();",
    "renders": true
  },
  {
    "household_item": "mask",
    "openscad_code": "// Realistic Medium-Complexity Mask (≈75 mm tall, 3 mm wall)\n\n$fn = 48;               // global resolution\n\n// Overall mask module\nmodule mask() {\n    difference() {\n        union() {\n            // Outer shell (face surface)\n            face_shell();\n\n            // Nose ridge\n            nose_bridge();\n\n            // Eyebrow ridges\n            eyebrow(true);   // left\n            eyebrow(false);  // right\n\n            // Lips volume\n            lips();\n        }\n\n        // Eye holes\n        eye_socket(true);   // left\n        eye_socket(false);  // right\n\n        // Breathing holes\n        nostril_holes();\n\n        // Mounting holes for straps (2 mm diameter)\n        translate([-30, -45, 0]) cylinder(h = 20, d = 2, center = true);\n        translate([ 30, -45, 0]) cylinder(h = 20, d = 2, center = true);\n    }\n}\n\n// Main face curved shell\nmodule face_shell() {\n    // Ellipsoid base\n    scale([1, 1.1, 1.25])\n        sphere(d = 75);\n\n    // Flatten back slightly for printing\n    translate([0, 0, -40])\n        cube([80, 90, 80], center = true);\n}\n\n// Raised nose bridge\nmodule nose_bridge() {\n    translate([0, 8, -5])\n        rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 18, d2 = 12);\n}\n\n// Eyebrow ridge module with loop for texture lines\nmodule eyebrow(left = true) {\n    x = left ? -22 : 22;\n    translate([x, 20, 3]) {\n        rotate([5, 0, left ? 10 : -10])\n            cube([20, 6, 2], center = true);\n\n        // Texture ridges\n        for (i = [-2:2]) {\n            translate([i*3.5, 0, 1])\n                cube([2, 6, 1], center = true);\n        }\n    }\n}\n\n// Lips volume\nmodule lips() {\n    translate([0, -25, -15])\n        scale([1.2, 0.6, 0.4])\n            sphere(d = 30);\n}\n\n// Eye socket cutout\nmodule eye_socket(left = true) {\n    x = left ? -22 : 22;\n    translate([x, 15, 5])\n        rotate([0, 10, 0])\n            scale([1, 1.4, 1])\n                sphere(d = 20);\n}\n\n// Nostril holes\nmodule nostril_holes() {\n    for (x = [-5, 5]) {\n        translate([x, 5, -12])\n            rotate([0, 90, 0])\n                cylinder(h = 15, d = 4, center = true);\n    }\n}\n\n// Render the mask\nmask();",
    "renders": true
  },
  {
    "household_item": "spray",
    "openscad_code": "// Realistic spray bottle - medium complexity\n// Overall dimensions: ~55mm diameter, ~85mm tall\n\n$fn = 36;\n\n// Main bottle body\nmodule bottle_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 60, d = 48);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h = 58, d = 44);\n        \n        // Rounded bottom\n        translate([0, 0, -0.1])\n            sphere(d = 48);\n    }\n}\n\n// Neck with threads\nmodule neck() {\n    difference() {\n        // Main neck\n        cylinder(h = 12, d = 20);\n        \n        // Inner hole\n        translate([0, 0, 2])\n            cylinder(h = 10, d = 16);\n    }\n    \n    // Threads - simplified as ridges\n    for(i = [0:3])\n        translate([0, 0, 2 + i * 2.5])\n            cylinder(h = 1.5, d = 22, $fn = 60);\n}\n\n// Trigger sprayer mechanism\nmodule sprayer_head() {\n    union() {\n        // Base that screws onto neck\n        difference() {\n            cylinder(h = 8, d = 24);\n            translate([0, 0, 2])\n                cylinder(h = 6, d = 20);\n        }\n        \n        // Main body\n        translate([0, -8, 8])\n            cube([30, 16, 12], center = true);\n        \n        // Trigger lever\n        translate([0, -17, 8])\n            difference() {\n                cube([26, 10, 8], center = true);\n                translate([0, -2, -1])\n                    cube([24, 8, 6], center = true);\n            }\n        \n        // Nozzle\n        translate([15, 0, 8])\n            rotate([0, 90, 0])\n                cylinder(h = 8, d = 6);\n        \n        // Tube connection point\n        translate([0, 0, -2])\n            cylinder(h = 4, d = 4);\n    }\n}\n\n// Suction tube\nmodule suction_tube() {\n    translate([0, 0, -30])\n        cylinder(h = 60, d = 4);\n}\n\n// Assembly\ntranslate([0, 0, 10])\n    bottle_body();\n\ntranslate([0, 0, 70])\n    neck();\n\ntranslate([0, 0, 82])\n    sprayer_head();\n\ntranslate([0, 0, 80])\n    suction_tube();",
    "renders": true
  },
  {
    "household_item": "nozzle",
    "openscad_code": "// Realistic 3D-printable nozzle, medium complexity (~60 mm tall)\n// All angles <= 45°, no support needed, 1 mm walls\n\n$fn = 36; // smooth curves\n\n// overall dimensions\nnozzle_height = 60;\nthread_diameter = 20;\nhex_size = 30;\nhex_height = 7;\ntip_diameter = 1.5;\n\nmodule nozzle() {\n    difference() {\n        union() {\n            // hex flange (bottom)\n            translate([0, 0, 0])\n                cylinder(h = hex_height, r = hex_size / cos(30) / 2, $fn = 6);\n\n            // main body cone with slight taper\n            translate([0, 0, hex_height])\n                cylinder(h1 = 15, h2 = 10, r1 = thread_diameter / 2, r2 = 12);\n\n            // cylindrical shoulder\n            translate([0, 0, hex_height + 15])\n                cylinder(h = 10, r = 12);\n\n            // upper cone taper\n            translate([0, 0, hex_height + 25])\n                cylinder(h1 = 10, h2 = 5, r1 = 12, r2 = 8);\n\n            // narrow neck\n            translate([0, 0, hex_height + 35])\n                cylinder(h = 5, r = 8);\n\n            // final taper to tip\n            translate([0, 0, hex_height + 40])\n                cylinder(h1 = 5, h2 = 15, r1 = 8, r2 = tip_diameter);\n\n            // external threads (simple ridges)\n            for (i = [0 : 5 : 10]) {\n                rotate([0, 0, i * 60])\n                    translate([0, thread_diameter / 2 - 0.5, hex_height + 2])\n                        cube([1, 1, 11], center = true);\n            }\n        }\n\n        // central flow channel\n        translate([0, 0, -1])\n            cylinder(h = nozzle_height + 2, r1 = 3, r2 = tip_diameter / 2 + 0.2);\n\n        // hex socket on bottom\n        translate([0, 0, -0.1])\n            cylinder(h = hex_height + 0.2, r = 10, $fn = 6);\n\n        // lightening pockets (optional weight saving)\n        for (a = [0 : 60 : 300]) {\n            rotate([0, 0, a])\n                translate([hex_size * 0.4, 0, hex_height / 2])\n                    cylinder(h = hex_height, r = 4);\n        }\n    }\n}\n\n// render the nozzle\nnozzle();",
    "renders": true
  },
  {
    "household_item": "hose",
    "openscad_code": "// Realistic Garden Hose with Nozzle\n// Medium complexity, 3D printable, ~80mm long\n\n// Parameters\n$fn = 50;\nwall = 1.5;              // wall thickness\ndiam_outer = 8;          // hose outer diameter\ndiam_inner = 5;          // hose inner diameter\nhose_len = 60;           // hose body length\ncoil_turns = 5;          // coil segments\ncoil_height = 4;         // coil ridge height\ncoil_width = 2;          // coil ridge width\nnozzle_len = 15;         // nozzle length\nthreads = 6;             // thread segments\n\n// Hose body with coil pattern\nmodule hose_body() {\n    difference() {\n        // main tube\n        cylinder(h = hose_len, d = diam_outer, center = true);\n        \n        // hollow core\n        translate([0, 0, -hose_len/2 - 1])\n            cylinder(h = hose_len + 2, d = diam_inner);\n    }\n    \n    // coil ridges\n    for(i = [0 : coil_turns - 1]) {\n        rotate([0, 90, 0]) \n            translate([0, 0, -hose_len/2 + i * hose_len/coil_turns]) \n                rotate_extrude(angle = 360, $fn = 50) {\n                    translate([diam_outer/2, 0, 0])\n                        square([coil_width, coil_height]);\n                }\n    }\n}\n\n// Threaded end for nozzle attachment\nmodule hose_end() {\n    difference() {\n        cylinder(h = 5, d = diam_outer + 2, center = true);\n        \n        translate([0, 0, -3])\n            cylinder(h = 6, d = diam_inner);\n            \n        // hex flats for wrench\n        for(i = [0 : 5]) {\n            rotate([0, 0, i * 60])\n                translate([diam_outer/2 + 1, 0, 0])\n                    cube([diam_outer + 2, 0.1, 5], center = true);\n        }\n    }\n}\n\n// Realistic nozzle\nmodule nozzle() {\n    union() {\n        // main nozzle body\n        translate([0, 0, hose_len/2 + nozzle_len/2 + 2.5]) {\n            cylinder(h = nozzle_len, d = diam_outer + 4);\n            \n            // grip ring\n            translate([0, 0, 2])\n                difference() {\n                    cylinder(h = 4, d = diam_outer + 6);\n                    cylinder(h = 4.5, d = diam_outer + 2);\n                }\n                \n            // threads inside\n            for(i = [0 : threads - 1]) {\n                rotate([0, 0, i * 360/threads])\n                    translate([diam_outer/2 + 1, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h = 3, d = 1, $fn = 6);\n            }\n            \n            // outlet\n            translate([0, 0, nozzle_len - 1])\n                cylinder(h = 3, d1 = diam_outer + 2, d2 = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    hose_body();\n    translate([0, 0, hose_len/2 + 2.5]) hose_end();\n    nozzle();\n}\n\n// Optional support base for printing\ntranslate([0, 0, -hose_len/2 - 5])\n    cube([diam_outer + 4, 2, 1], center = true);",
    "renders": true
  },
  {
    "household_item": "wiper",
    "openscad_code": "// Realistic Wiper Blade Assembly\n// Medium complexity, 3D-printable with no overhangs\n\n// Global dimensions\nwiper_length = 70;\nwiper_width = 5;\nwiper_height = 4;\narm_length = 45;\narm_diameter = 6;\nbase_diameter = 12;\nbase_height = 8;\n\n// Wiper blade module\nmodule wiper_blade() {\n    // Main rubber blade body\n    difference() {\n        // Main blade\n        translate([0, 0, -wiper_height/2])\n            cube([wiper_length, wiper_width, wiper_height], center=true);\n        \n        // Tapered edge\n        translate([wiper_length/2 - 3, 0, -wiper_height/2])\n            rotate([0, 45, 0])\n            cube([6, wiper_width+1, wiper_height+1], center=true);\n        \n        // Front edge taper\n        translate([-wiper_length/2 + 3, 0, -wiper_height/2])\n            rotate([0, -45, 0])\n            cube([6, wiper_width+1, wiper_height+1], center=true);\n    }\n    \n    // Wiper element (thin wiping edge)\n    translate([0, 0, -wiper_height])\n        cube([wiper_length-4, 0.5, 1], center=true);\n}\n\n// Wiper arm connector\nmodule arm_connector() {\n    // Base cylinder\n    cylinder(h=base_height, d=base_diameter, $fn=32);\n    \n    // Top cone for smooth transition\n    translate([0, 0, base_height])\n        cylinder(h=3, d1=base_diameter, d2=arm_diameter, $fn=32);\n}\n\n// Wiper arm segments\nmodule arm_segment(length, diameter) {\n    rotate([90, 0, 0])\n        cylinder(h=length, d=diameter, $fn=16);\n}\n\n// Joint between arm segments\nmodule joint(diameter) {\n    sphere(d=diameter*1.4, $fn=16);\n}\n\n// Spring mechanism housing\nmodule spring_housing() {\n    // Main housing body\n    translate([-8, 0, 0])\n        cube([16, 8, 6], center=true);\n    \n    // Cylindrical pivot\n    rotate([90, 0, 0])\n        cylinder(h=10, d=4, center=true);\n}\n\n// Mounting holes for screws\nmodule mounting_holes() {\n    for(i = [-1, 1]) {\n        translate([i * 4, 0, base_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=base_diameter, d=3, center=true);\n    }\n}\n\n// Complete wiper assembly\nmodule wiper_assembly() {\n    // Wiper blade\n    wiper_blade();\n    \n    // Connector assembly\n    translate([0, 0, wiper_height/2 + base_height/2])\n        arm_connector();\n    \n    // Spring housing\n    translate([0, wiper_width/2 + 4, wiper_height/2 + 3])\n        spring_housing();\n    \n    // First arm segment\n    translate([0, 0, wiper_height/2 + base_height + arm_diameter/2])\n        rotate([90, 0, 0])\n        arm_segment(arm_length*0.6, arm_diameter);\n    \n    // Joint\n    translate([0, 0, wiper_height/2 + base_height + arm_length*0.6 + arm_diameter/2])\n        joint(arm_diameter);\n    \n    // Second arm segment (angled)\n    translate([0, 0, wiper_height/2 + base_height + arm_length*0.6 + arm_diameter])\n        rotate([120, 0, 0])\n        arm_segment(arm_length*0.4, arm_diameter*0.8);\n    \n    // Mounting holes\n    difference() {\n        children();\n        mounting_holes();\n    }\n}\n\n// Generate the assembly\nwiper_assembly();",
    "renders": true
  },
  {
    "household_item": "shampoo",
    "openscad_code": "// Medium-complexity realistic shampoo bottle\n// Designed for 3D printing – no overhangs, 1 mm wall thickness\n\n// Overall dimensions\nheight = 90;      // mm\nbody_d = 38;      // mm\ncap_d = 32;       // mm\nwall = 1.2;       // mm\n\nmodule bottle() {\n    // Main bottle body – hollow cylinder with rounded bottom\n    difference() {\n        union() {\n            // Cylindrical upper part\n            cylinder(h = height * 0.75, d = body_d, $fn = 64);\n            // Rounded bottom (hemisphere)\n            translate([0, 0, -body_d/2])\n                scale([1, 1, 0.5])\n                    sphere(d = body_d, $fn = 64);\n        }\n        // Hollow cavity\n        cylinder(h = height * 0.75 + wall*2, d = body_d - 2*wall, $fn = 64);\n        translate([0, 0, -body_d/2 + wall])\n            scale([1, 1, 0.5])\n                sphere(d = body_d - 2*wall, $fn = 64);\n    }\n\n    // Neck ring\n    translate([0, 0, height * 0.75])\n        difference() {\n            cylinder(h = 8, d = cap_d + 2*wall, $fn = 64);\n            cylinder(h = 8.1, d = cap_d, $fn = 64);\n        }\n\n    // Threads inside neck\n    threads();\n}\n\nmodule threads() {\n    // Simple external threads on neck\n    neck_h = 8;\n    neck_r = cap_d/2 - wall;\n    thread_turns = 4;\n    for (i = [0 : thread_turns-1]) {\n        translate([0, 0, height * 0.75 + i * (neck_h/thread_turns)])\n            rotate([0, 0, i * 360/thread_turns])\n                cylinder(h = 1, d = neck_r * 2 + 0.5, $fn = 64);\n    }\n}\n\nmodule cap() {\n    // Snap-on cap\n    difference() {\n        // Outer cap shape\n        union() {\n            cylinder(h = 12, d = cap_d, $fn = 64);\n            // Gradual taper top\n            translate([0, 0, 12])\n                cylinder(h1 = 0, h2 = 4, d1 = cap_d, d2 = cap_d - 6, $fn = 64);\n        }\n        // Inner cavity\n        cylinder(h = 12, d = cap_d - 2*wall, $fn = 64);\n        translate([0, 0, 12])\n            cylinder(h1 = 0, h2 = 4, d1 = cap_d - 2*wall, d2 = cap_d - 6 - 2*wall, $fn = 64);\n\n        // Internal threads\n        neck_r = cap_d/2 - wall;\n        thread_turns = 4;\n        for (i = [0 : thread_turns-1]) {\n            translate([0, 0, i * (12/thread_turns)])\n                rotate([0, 0, i * 360/thread_turns])\n                    cylinder(h = 1, d = neck_r * 2 - 0.5, $fn = 64);\n        }\n    }\n\n    // Flip-top lid hinge\n    hinge_w = 16;\n    hinge_r = 2.5;\n    translate([0, cap_d/2 - hinge_r, 12 + 4 - hinge_r])\n        rotate([90, 0, 0])\n            cylinder(h = hinge_w, r = hinge_r, $fn = 32);\n}\n\n// Label recess\nmodule label() {\n    label_h = 25;\n    label_w = 30;\n    translate([0, body_d/2 - 0.1, height * 0.5])\n        rotate([0, 90, 0])\n            cube([label_w, label_h, 0.5], center = true);\n}\n\n// Assembly\nbottle();\ntranslate([0, 0, height * 0.75 + 8])\n    cap();\ndifference() {\n    union() {\n        // Duplicate bottle for label cutout\n        translate([0, 0, 0])\n            cylinder(h = height * 0.75, d = body_d, $fn = 64);\n        translate([0, 0, -body_d/2])\n            scale([1, 1, 0.5])\n                sphere(d = body_d, $fn = 64);\n    }\n    // Label recess\n    label();\n}",
    "renders": true
  },
  {
    "household_item": "rinse",
    "openscad_code": "// Realistic 3D printable rinse bottle\n// Overall height ~85 mm, fits on most printers\n\n// Wall thickness for printability\nwall = 1.5;\n\n// Main bottle body\ndifference() {\n    // Smooth rounded bottle\n    union() {\n        // Main cylinder body\n        cylinder(h = 60, r1 = 20, r2 = 22, $fn = 64);\n        \n        // Rounded top shoulder\n        translate([0, 0, 60])\n            cylinder(h = 10, r1 = 22, r2 = 20, $fn = 64);\n        \n        // Neck\n        translate([0, 0, 70])\n            cylinder(h = 15, r = 10, $fn = 32);\n    }\n    \n    // Hollow interior\n    translate([0, 0, -1])\n        cylinder(h = 87, r = 18.5, $fn = 32);\n    \n    // Flat bottom opening\n    translate([0, 0, -1])\n        cube([40, 40, 1], center = true);\n}\n\n// Cap with threads\ndifference() {\n    union() {\n        // Cap main body\n        cylinder(h = 12, r = 12, $fn = 32);\n        \n        // Cap grip ridges\n        for (i = [0 : 30 : 330]) {\n            rotate([0, 0, i])\n                translate([11.5, 0, 0])\n                    cube([1, 0.5, 12], center = true);\n        }\n    }\n    \n    // Thread cavity\n    cylinder(h = 12, r = 9.5, $fn = 32);\n}\n\n// Cap positioned on bottle\ntranslate([0, 0, 85]) {\n    cap();\n}\n\n// Rinse spout\nmodule spout() {\n    difference() {\n        union() {\n            // Main spout cylinder\n            translate([0, 0, 85])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, r = 5, $fn = 32);\n            \n            // Tapered nozzle\n            translate([0, 25, 85])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, r1 = 5, r2 = 3, $fn = 32);\n        }\n        \n        // Hollow spout\n        translate([0, 0, 85])\n            rotate([90, 0, 0])\n                cylinder(h = 35, r = 3.5, $fn = 32);\n    }\n}\n\n// Label area\ndifference() {\n    // Slightly recessed label panel\n    translate([0, 22, 30])\n        cube([35, 0.5, 40], center = true);\n    \n    // Actual recess for label\n    translate([0, 22.5, 30])\n        cube([32, 0.5, 36], center = true);\n}\n\n// Add measurement lines on side\nmodule measurement_lines() {\n    for (i = [1 : 1 : 5]) {\n        translate([-19, 0, i * 10])\n            cube([3, wall, 0.5]);\n    }\n}\n\nmeasurement_lines();\nmirror([1, 0, 0]) measurement_lines();\n\n// Bottom grip ridges\nmodule bottom_grip() {\n    for (i = [0 : 20 : 340]) {\n        rotate([0, 0, i])\n            translate([19, 0, 0])\n                cube([1.5, 0.8, 2], center = true);\n    }\n}\n\ntranslate([0, 0, 0.5])\n    bottom_grip();",
    "renders": true
  },
  {
    "household_item": "deodorizer",
    "openscad_code": "// Realistic Deodorizer Stick\n// Medium complexity model with functional details\n\n// Main parameters\n$fn = 50;\nbody_width = 18;\nbody_depth = 18;\nbody_height = 80;\ncap_height = 25;\ndial_height = 8;\nbase_height = 5;\nscrew_thread_height = 15;\n\n// Module for screw threads\nmodule screw_threads(radius, height, turns=10) {\n    difference() {\n        // Main cylinder\n        cylinder(h=height, r=radius + 1.5);\n        \n        // Thread cuts\n        for (i = [0:turns]) {\n            rotate([0, 0, i * 36])\n            translate([radius, 0, i * height/turns])\n            rotate([0, 90, 0])\n            cylinder(h=radius + 2, r=0.5, $fn=3);\n        }\n    }\n}\n\n// Deodorant stick base module\nmodule base_assembly() {\n    union() {\n        // Bottom dial\n        translate([0, 0, 0])\n        cylinder(h=dial_height, r=body_width/2 + 2);\n        \n        // Grip ridges on dial\n        for (i = [0:19]) {\n            rotate([0, 0, i * 18])\n            translate([body_width/2 + 1.5, 0, dial_height/2])\n            cube([2, 1, dial_height - 1], center=true);\n        }\n        \n        // Threaded base\n        translate([0, 0, dial_height])\n        screw_threads(body_width/2 - 1, screw_thread_height);\n        \n        // Solid base\n        translate([0, 0, dial_height + screw_thread_height])\n        cylinder(h=base_height, r=body_width/2 - 1);\n    }\n}\n\n// Main body tube\nmodule body_tube() {\n    difference() {\n        // Outer shell\n        cylinder(h=body_height, r=body_width/2);\n        \n        // Inner cavity\n        cylinder(h=body_height - 5, r=body_width/2 - 2);\n        \n        // Top opening\n        translate([0, 0, body_height - 5])\n        cylinder(h=5, r=body_width/2 - 1.5);\n    }\n}\n\n// Deodorant product stick\nmodule product_stick() {\n    // Main stick\n    translate([0, 0, body_height - 5])\n    cylinder(h=25, r=body_width/2 - 2.5);\n    \n    // Rounded top\n    translate([0, 0, body_height + 20])\n    scale([1, 1, 0.5])\n    sphere(r=body_width/2 - 2.5);\n}\n\n// Cap with holes\nmodule cap() {\n    difference() {\n        // Main cap shape\n        translate([0, 0, body_height])\n        cylinder(h=cap_height, r=body_width/2 + 1.5);\n        \n        // Inner cavity\n        translate([0, 0, body_height + 2])\n        cylinder(h=cap_height - 2, r=body_width/2 + 0.5);\n        \n        // Top dome\n        translate([0, 0, body_height + cap_height])\n        scale([1, 1, 0.3])\n        sphere(r=body_width/2 + 1.5);\n        \n        // Ventilation holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([body_width/2 - 1, 0, body_height + cap_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=body_width/2 + 2, r=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    base_assembly();\n    \n    // Body tube\n    translate([0, 0, dial_height])\n    body_tube();\n    \n    // Product stick (lowered for storage)\n    translate([0, 0, -15])\n    product_stick();\n    \n    // Cap\n    cap();\n}",
    "renders": true
  },
  {
    "household_item": "absorbent",
    "openscad_code": "// Realistic Kitchen Sponge (Absorbent)\n// Dimensions: 90 x 60 x 25 mm (medium complexity)\n\n// Main sponge body dimensions\nsponge_w = 90;\nsponge_h = 60;\nsponge_d = 25;\n\n// Sponge pores\npore_size = 3.5;\npore_spacing = 7;\npore_depth = sponge_d * 0.7;\n\n// Scrubbing surface\nscrub_height = 3;\nscrub_width = 1.5;\nscrub_spacing = 2;\n\nmodule sponge_body() {\n    // Main rectangular sponge\n    difference() {\n        color([0.9, 0.8, 0.2])  // Yellow color\n        cube([sponge_w, sponge_h, sponge_d], center=true);\n        \n        // Create rounded edges\n        translate([0, 0, sponge_d/2])\n        scale([1, 1, 0.5])\n        sphere(d=sponge_d/2, $fn=32);\n        \n        // Add pores on top surface\n        for(x = [-sponge_w/2 + pore_spacing : pore_spacing : sponge_w/2 - pore_spacing]) {\n            for(y = [-sponge_h/2 + pore_spacing : pore_spacing : sponge_h/2 - pore_spacing]) {\n                translate([x, y, sponge_d/2 - pore_depth/2])\n                sphere(d=pore_size, $fn=8);\n            }\n        }\n        \n        // Add pores on bottom surface\n        for(x = [-sponge_w/2 + pore_spacing*1.5 : pore_spacing : sponge_w/2 - pore_spacing*1.5]) {\n            for(y = [-sponge_h/2 + pore_spacing*1.5 : pore_spacing : sponge_h/2 - pore_spacing*1.5]) {\n                translate([x, y, -sponge_d/2 + pore_depth/2])\n                sphere(d=pore_size, $fn=8);\n            }\n        }\n    }\n}\n\nmodule scrubbing_side() {\n    // Scrubbing pad on one side\n    difference() {\n        color([0.5, 0.2, 0.8])  // Purple color\n        translate([sponge_w/2 - scrub_height/2, 0, 0])\n        cube([scrub_height, sponge_h, sponge_d], center=true);\n        \n        // Create scrubbing texture\n        for(z = [-sponge_d/2 + scrub_spacing : scrub_spacing : sponge_d/2 - scrub_spacing]) {\n            for(y = [-sponge_h/2 + scrub_spacing : scrub_spacing : sponge_h/2 - scrub_spacing]) {\n                translate([sponge_w/2 - scrub_height, y, z])\n                cube([scrub_width, scrub_width, scrub_width], center=true);\n            }\n        }\n    }\n}\n\nmodule rounded_corners() {\n    // Add rounded corners for realistic look\n    for(x = [-sponge_w/2 + sponge_d/4, sponge_w/2 - sponge_d/4]) {\n        for(y = [-sponge_h/2 + sponge_d/4, sponge_h/2 - sponge_d/4]) {\n            translate([x, y, 0])\n            rotate([0, 90, 0])\n            cylinder(h=sponge_d/2, r=sponge_d/4, $fn=16);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    sponge_body();\n    scrubbing_side();\n    rounded_corners();\n}\n\n// Add small details - brand label indentation\ntranslate([0, 0, sponge_d/2 - 0.5])\ncolor([0.8, 0.7, 0.1])\nlinear_extrude(height=0.5)\ntext(\"SPONGE\", size=8, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "household_item": "extractor",
    "openscad_code": "// Kitchen Range Extractor Hood\n// Medium complexity, realistic style, printable\n\n$fn = 32;          // smooth curves\nwall = 2;          // printable wall thickness\nscale = 0.5;       // global scale to keep ~80 mm wide\n\nmodule body() {\n    // Main hood shell\n    difference() {\n        // outer shell\n        translate([0,-10*scale,0])\n        scale([100*scale, 60*scale, 50*scale])\n            cube([1,1,1], center=true);\n\n        // inner cavity\n        translate([0,-8*scale,2*scale])\n        scale([94*scale, 56*scale, 46*scale])\n            cube([1,1,1], center=true);\n\n        // front chamfer\n        translate([0,0,25*scale])\n        rotate([45,0,0])\n        translate([0,0,-25*scale])\n            cube([200*scale,200*scale,50*scale], center=true);\n    }\n}\n\nmodule chimney() {\n    // vertical stack\n    translate([0,0,25*scale])\n    scale([30*scale, 30*scale, 40*scale])\n        cube([1,1,1], center=true);\n\n    // top flange\n    translate([0,0,45*scale])\n    scale([40*scale, 40*scale, 3*scale])\n        cube([1,1,1], center=true);\n}\n\nmodule controls() {\n    // button panel\n    translate([0,-28*scale,10*scale])\n    scale([40*scale, 6*scale, 1*scale])\n        cube([1,1,1], center=true);\n\n    // three buttons\n    for(x=[-12*scale,0,12*scale])\n        translate([x,-28*scale,11*scale])\n        scale([6*scale,6*scale,1*scale])\n            cylinder(h=2*scale, r=1);\n}\n\nmodule lights() {\n    // light bar\n    translate([0,-28*scale,-18*scale])\n    scale([80*scale, 4*scale, 3*scale])\n        cube([1,1,1], center=true);\n\n    // two bulbs\n    for(x=[-25*scale,25*scale])\n        translate([x,-28*scale,-18*scale])\n        scale([12*scale,4*scale,1*scale])\n            sphere();\n}\n\nmodule grease_filter() {\n    // filter frame\n    translate([0,0,-20*scale])\n    scale([90*scale, 50*scale, 3*scale])\n        cube([1,1,1], center=true);\n\n    // mesh pattern\n    for(y=[-20*scale:5*scale:20*scale])\n        translate([0,y,-18.5*scale])\n        scale([85*scale, 1*scale, 0.5*scale])\n            cube([1,1,1], center=true);\n\n    for(x=[-40*scale:5*scale:40*scale])\n        translate([x,0,-18.5*scale])\n        scale([1*scale, 45*scale, 0.5*scale])\n            cube([1,1,1], center=true);\n}\n\nmodule mounting_holes() {\n    // four screw holes for wall mount\n    for(x=[-35*scale,35*scale])\n    for(z=[15*scale,35*scale])\n        translate([x,29*scale,z])\n        rotate([90,0,0])\n        cylinder(h=30*scale, r=3*scale);\n}\n\n// assemble hood\nunion() {\n    body();\n    chimney();\n    controls();\n    lights();\n    grease_filter();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "household_item": "buffer",
    "openscad_code": "// Realistic Buffer - OpenSCAD Code\n// Medium complexity 3D printable buffer model\n\n// Configuration\n$fn = 50;\nbuffer_length = 80;\nbuffer_diameter = 25;\nmounting_hole_diameter = 5;\n\n// Main buffer body\nmodule buffer_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=buffer_length, d=buffer_diameter, center=true);\n        \n        // Hollow center\n        cylinder(h=buffer_length+2, d=buffer_diameter-4, center=true);\n        \n        // End chamfers\n        translate([0, 0, buffer_length/2-2]) \n            cylinder(h=4, d1=buffer_diameter, d2=buffer_diameter-2, center=false);\n        translate([0, 0, -buffer_length/2+2]) \n            cylinder(h=4, d1=buffer_diameter-2, d2=buffer_diameter, center=false);\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    // Left bracket\n    translate([-buffer_diameter/2-5, 0, 0]) {\n        difference() {\n            cube([10, 12, 15], center=true);\n            translate([0, 0, 7.5]) \n                cylinder(h=15, d=mounting_hole_diameter+1, center=true);\n        }\n    }\n    \n    // Right bracket\n    translate([buffer_diameter/2+5, 0, 0]) {\n        difference() {\n            cube([10, 12, 15], center=true);\n            translate([0, 0, 7.5]) \n                cylinder(h=15, d=mounting_hole_diameter+1, center=true);\n        }\n    }\n}\n\n// Piston rod with cushioning feature\nmodule piston_rod() {\n    difference() {\n        // Main rod\n        translate([0, 0, -buffer_length/2-15]) \n            cylinder(h=30, d=8, center=true);\n        \n        // End threads\n        translate([0, 0, -buffer_length/2-20]) \n            cylinder(h=5, d=6.5, center=true);\n    }\n    \n    // Cushioning holes\n    for(i=[1:3]) {\n        rotate([0, 0, i*120]) \n            translate([3.5, 0, -buffer_length/2-10]) \n                cylinder(h=6, d=2, center=true);\n    }\n}\n\n// End cap with seal\nmodule end_cap() {\n    difference() {\n        // Main cap\n        translate([0, 0, buffer_length/2+5]) \n            cylinder(h=10, d=buffer_diameter+2, center=true);\n        \n        // O-ring groove\n        translate([0, 0, buffer_length/2+5]) \n            cylinder(h=2, d=buffer_diameter+4, center=true);\n        \n        // Central hole\n        translate([0, 0, buffer_length/2+5]) \n            cylinder(h=12, d=10, center=true);\n    }\n}\n\n// Air ports\nmodule air_ports() {\n    // Front port\n    rotate([90, 0, 0]) \n        translate([0, buffer_diameter/2+2, buffer_length/2-10]) \n            cylinder(h=6, d=4, center=true);\n    \n    // Rear port\n    rotate([90, 0, 0]) \n        translate([0, buffer_diameter/2+2, -buffer_length/2+10]) \n            cylinder(h=6, d=4, center=true);\n}\n\n// Assembly\nunion() {\n    buffer_body();\n    mounting_brackets();\n    piston_rod();\n    end_cap();\n    air_ports();\n}",
    "renders": true
  },
  {
    "household_item": "polisher",
    "openscad_code": "$fn = 30;\n\n// Overall scale factor – final tool ~95 mm long\nscale_factor = 0.8;\n\n// Main module\nmodule polisher(scale = 1) {\n    scale([scale, scale, scale]) {\n\n        // Central axis\n        // Body\n        difference() {\n            union() {\n                // Motor housing\n                translate([0, 0, 45])\n                    cylinder(h = 35, d = 38, center = true);\n\n                // Neck\n                translate([0, 0, 22])\n                    cylinder(h = 16, d1 = 28, d2 = 38, center = true);\n\n                // Handle grip\n                translate([0, 0, 0])\n                    cylinder(h = 40, d = 30, center = true);\n\n                // Rear cap\n                translate([0, 0, -25])\n                    cylinder(h = 10, d = 28, center = true);\n            }\n\n            // Wire exit hole\n            translate([0, 14, -25])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, d = 6, center = true);\n        }\n\n        // Rubber grip rings\n        for (z = [-15:5:15]) {\n            translate([0, 0, z])\n                difference() {\n                    cylinder(h = 2, d = 34, center = true);\n                    cylinder(h = 2, d = 30, center = true);\n                }\n        }\n\n        // Trigger switch\n        translate([0, 15, 0])\n            difference() {\n                cube([12, 6, 18], center = true);\n                translate([0, 3, 0])\n                    cube([12, 1, 18], center = true);\n            }\n\n        // Front collar\n        translate([0, 0, 62])\n            cylinder(h = 8, d = 42, center = true);\n\n        // Spindle / backing plate\n        translate([0, 0, 70])\n            cylinder(h = 6, d = 45, center = true);\n\n        // Foam polishing pad\n        translate([0, 0, 78])\n            cylinder(h = 12, d = 50, center = true);\n\n        // Cooling vents\n        for (a = [0:30:330]) {\n            rotate([0, 0, a])\n                translate([19, 0, 45])\n                    rotate([0, 90, 0])\n                        cylinder(h = 30, d = 4, center = true);\n        }\n\n        // Label recess\n        translate([0, -15, 0])\n            cube([25, 1, 10], center = true);\n    }\n}\n\n// Render the polisher\npolisher(scale_factor);",
    "renders": true
  },
  {
    "household_item": "bag",
    "openscad_code": "// Realistic medium-complexity bag\n// Overall size ≈ 70 mm wide, 50 mm tall, 30 mm deep\n\n$fn = 32;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule body() {\n    // Main shell (hollow)\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([55, 25, 45], center = true);\n            sphere(3);\n        }\n        // Inner cavity\n        minkowski() {\n            cube([55 - 2*wall, 25 - 2*wall, 45 - 2*wall], center = true);\n            sphere(3 - wall);\n        }\n    }\n}\n\nmodule zipper_track() {\n    color(\"silver\")\n    translate([0, 0, 22])\n    difference() {\n        // Track rail\n        for (side = [-1, 1])\n            translate([0, side * 12.5, 0])\n            cube([60, 2, 2], center = true);\n        // Teeth gaps\n        for (i = [-25:5:25])\n            translate([i, 0, 0])\n            cube([3, 30, 5], center = true);\n    }\n}\n\nmodule zipper_pull() {\n    color(\"silver\")\n    translate([0, -12.5, 23])\n    union() {\n        // Slider body\n        cube([8, 6, 4], center = true);\n        // Pull tab\n        translate([0, -5, -1])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r = 1.5, center = true);\n    }\n}\n\nmodule handle() {\n    color(\"black\")\n    translate([0, 0, 30])\n    difference() {\n        // Main loop\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 40, r = 6, center = true);\n            cylinder(h = 42, r = 4, center = true);\n        }\n        // Attachments\n        for (x = [-20, 20])\n            translate([x, 0, 0])\n            cube([8, 12, 4], center = true);\n    }\n}\n\nmodule side_pockets() {\n    color(\"darkgreen\")\n    for (side = [-1, 1])\n    translate([0, side * 18, -8])\n    difference() {\n        // Pocket shell\n        cube([18, 12, 20], center = true);\n        // Inside hollow\n        translate([0, 0, -wall])\n        cube([18 - 2*wall, 12 - 2*wall, 20 - wall], center = true);\n    }\n}\n\nmodule bottom_feet() {\n    color(\"black\")\n    for (x = [-20, 20])\n    for (y = [-8, 8])\n    translate([x, y, -24])\n    cylinder(h = 3, r = 2.5);\n}\n\n// Assembly\nunion() {\n    body();\n    zipper_track();\n    zipper_pull();\n    handle();\n    side_pockets();\n    bottom_feet();\n}",
    "renders": true
  },
  {
    "household_item": "cord",
    "openscad_code": "// Realistic 3D-printable USB-C cord with strain reliefs and plug details\n// Overall length ~75 mm, designed to print flat without support\n\n// Main parameters\ncord_diameter = 4.2;          // Cable outer diameter\ncord_length = 60;             // Straight section length\nplug_length = 12;             // USB-C plug body length\nplug_width = 8.4;             // USB-C plug width\nplug_thickness = 3.0;         // USB-C plug thickness\nstrain_relief_length = 6;     // Flexible boot length\nwall_thickness = 1.0;         // 3D-printable wall thickness\n\n// Cable cross-section module (solid cylinder with subtle texture)\nmodule cable_segment(h) {\n    difference() {\n        cylinder(h = h, d = cord_diameter, $fn = 36);\n        // Subtle groove for realism (0.2 mm deep)\n        for(i = [0 : 2]) {\n            rotate([0, 0, i * 120])\n                translate([cord_diameter/2 - 0.1, 0, -0.1])\n                    cube([0.2, 0.5, h + 0.2]);\n        }\n    }\n}\n\n// Strain relief boot (ribbed sleeve)\nmodule strain_relief() {\n    union() {\n        // Smooth transition ring\n        cylinder(h = 1.5, d1 = plug_width, d2 = cord_diameter, $fn = 36);\n        translate([0, 0, 1.5]) {\n            // Ribbed section\n            for(i = [0 : 3]) {\n                translate([0, 0, i * 1.5])\n                    cylinder(h = 1.0, d = cord_diameter + 0.6 - i * 0.1, $fn = 36);\n            }\n            // Remaining smooth tube\n            translate([0, 0, 6])\n                cylinder(h = strain_relief_length - 6, d = cord_diameter, $fn = 36);\n        }\n    }\n}\n\n// USB-C plug body\nmodule usb_c_plug() {\n    difference() {\n        // Main plug body\n        cube([plug_length, plug_width, plug_thickness], center = true);\n        \n        // USB-C tongue (gap)\n        translate([plug_length/2 - 1.2, 0, 0])\n            cube([2.4, 6.8, 0.7], center = true);\n        \n        // Chamfers on edges\n        translate([plug_length/2 - 1, plug_width/2 - 0.5, 0])\n            rotate([0, 0, 45])\n            cube([1.4, 1.4, plug_thickness + 0.2], center = true);\n        \n        mirror([0, 1, 0])\n            translate([plug_length/2 - 1, plug_width/2 - 0.5, 0])\n                rotate([0, 0, 45])\n                cube([1.4, 1.4, plug_thickness + 0.2], center = true);\n    }\n    \n    // Contacts (simplified)\n    color(\"gray\") {\n        for(i = [0 : 11]) {\n            translate([plug_length/2 - 0.5, -3.2 + i * 0.6, -0.2])\n                cube([0.3, 0.3, 0.2]);\n        }\n    }\n}\n\n// Assemble left half (cord + strain relief + plug)\ntranslate([0, 0, 0]) {\n    // USB-C plug\n    translate([-plug_length/2, 0, 0])\n        usb_c_plug();\n    \n    // Strain relief\n    translate([-plug_length - strain_relief_length/2, 0, 0])\n        strain_relief();\n    \n    // Cable segment\n    translate([-plug_length - strain_relief_length - cord_length/2, 0, 0])\n        cable_segment(cord_length);\n}\n\n// Mirror to create right half\nmirror([1, 0, 0])\n    translate([0, 0, 0]) {\n        // USB-C plug (mirrored)\n        translate([-plug_length/2, 0, 0])\n            usb_c_plug();\n        \n        // Strain relief (mirrored)\n        translate([-plug_length - strain_relief_length/2, 0, 0])\n            strain_relief();\n        \n        // Cable segment (mirrored)\n        translate([-plug_length - strain_relief_length - cord_length/2, 0, 0])\n            cable_segment(cord_length);\n    }",
    "renders": true
  },
  {
    "household_item": "plug",
    "openscad_code": "// Realistic 3D-printable plug, medium complexity (≈ 85 mm overall length)\n\n// General parameters\nplug_len = 85;              // total length along X axis\nwall = 1.5;                 // 3D-print friendly wall thickness\n\n// Plug prongs (NEMA 1-15 style)\nprong_w = 6.2;\nprong_h = 1.5;\nprong_gap = 12.7;\nprong_len = 25;\n\nmodule prong() {\n    // main flat blade\n    translate([0, -prong_w/2, -prong_h/2])\n        cube([prong_len, prong_w, prong_h]);\n    // rounded tip for safety and printability\n    translate([prong_len, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = prong_w, r = prong_h/2, $fn = 12);\n}\n\n// Cable strain-relief collar\ncollar_r = 7;\ncollar_h = 12;\n\nmodule strain_collar() {\n    difference() {\n        cylinder(h = collar_h, r = collar_r, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = collar_h + 0.2, r = collar_r - wall, $fn = 32);\n    }\n}\n\n// Body shell with subtle ergonomic bulge\nbody_w = 30;\nbody_h = 22;\nbulge_r = 40;\n\nmodule body() {\n    difference() {\n        hull() {\n            // front block\n            translate([prong_len, 0, 0])\n                cube([35, body_w, body_h], center = true);\n            // rear bulge for grip\n            translate([prong_len + 45, 0, 0])\n                sphere(r = bulge_r, $fn = 48);\n        }\n        // internal cavity for wiring\n        translate([prong_len + 25, 0, 0])\n            cube([35, body_w - 2*wall, body_h - 2*wall], center = true);\n    }\n}\n\n// Small ribs for grip\nrib_w = 1.5;\nrib_h = 1;\nrib_gap = 4;\nrib_len = 12;\n\nmodule grip_ribs() {\n    for (y = [-12:rib_gap:12])\n        translate([prong_len + 48, y, 0])\n            cube([rib_len, rib_w, rib_h]);\n}\n\n// Cable sleeve emerging from strain collar\nsleeve_l = 25;\nsleeve_r = 4.5;\n\nmodule cable_sleeve() {\n    difference() {\n        translate([plug_len - collar_h/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = sleeve_l, r = sleeve_r + wall, $fn = 32);\n        translate([plug_len - collar_h/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = sleeve_l + 0.2, r = sleeve_r, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    \n    // left prong\n    translate([0, -prong_gap/2, 0])\n        prong();\n    \n    // right prong\n    translate([0, prong_gap/2, 0])\n        prong();\n    \n    // strain collar at rear\n    translate([plug_len - collar_h, 0, 0])\n        strain_collar();\n    \n    cable_sleeve();\n    \n    grip_ribs();\n}",
    "renders": true
  },
  {
    "household_item": "dragon",
    "openscad_code": "// Realistic Dragon - Medium Complexity\n// 3D printable model, ~80mm long\n\n$fn = 32;\n\n// Main dragon body\nmodule dragon() {\n    union() {\n        // Head\n        head();\n        \n        // Neck\n        neck();\n        \n        // Body\n        body();\n        \n        // Tail\n        tail();\n        \n        // Wings\n        left_wing();\n        right_wing();\n        \n        // Legs\n        front_left_leg();\n        front_right_leg();\n        back_left_leg();\n        back_right_leg();\n    }\n}\n\n// Dragon head\nmodule head() {\n    // Base head shape\n    translate([0, 0, 35]) rotate([0, 0, 0])\n    scale([1.2, 1, 1.1])\n    sphere(10);\n    \n    // Snout\n    translate([10, 0, 35]) rotate([0, 0, 0])\n    scale([1.5, 0.8, 0.8])\n    cylinder(h = 12, r1 = 8, r2 = 5);\n    \n    // Lower jaw\n    translate([5, 0, 28]) rotate([25, 0, 0])\n    scale([1.3, 0.6, 0.6])\n    cylinder(h = 10, r1 = 7, r2 = 4);\n    \n    // Horns\n    for(i = [-1, 1]) {\n        rotate([0, 0, i * 30])\n        translate([0, i * 8, 45])\n        rotate([90, 0, 0])\n        scale([0.3, 0.3, 2])\n        cylinder(h = 8, r1 = 2, r2 = 1);\n    }\n    \n    // Eye sockets\n    for(i = [-1, 1]) {\n        translate([8, i * 5, 38])\n        rotate([0, 90, 0])\n        scale([1, 1, 0.5])\n        sphere(3);\n    }\n    \n    // Nostrils\n    for(i = [-1, 1]) {\n        translate([14, i * 3, 35])\n        rotate([0, 90, 0])\n        cylinder(h = 2, r = 1);\n    }\n}\n\n// Neck\nmodule neck() {\n    for(i = [0:5]) {\n        translate([-i * 3, 0, 35 - i * 2])\n        scale([1 - i * 0.1, 1 - i * 0.1, 1])\n        sphere(8 - i * 0.5);\n    }\n}\n\n// Body\nmodule body() {\n    // Main torso\n    translate([-25, 0, 20])\n    rotate([0, 0, 0])\n    scale([1.8, 1.2, 1.2])\n    sphere(15);\n    \n    // Chest\n    translate([-15, 0, 18])\n    rotate([0, 0, 0])\n    scale([1.5, 1, 1])\n    sphere(12);\n    \n    // Belly plates\n    for(i = [0:3]) {\n        translate([-20 + i * 5, 0, 12])\n        rotate([90, 0, 0])\n        scale([3, 2, 0.5])\n        cylinder(h = 2, r1 = 3, r2 = 2);\n    }\n}\n\n// Tail\nmodule tail() {\n    for(i = [0:10]) {\n        translate([-35 - i * 4, 0, 20 - i])\n        scale([1 - i * 0.08, 1 - i * 0.08, 1 - i * 0.05])\n        sphere(8 - i * 0.5);\n    }\n}\n\n// Wing membrane\nmodule wing_membrane() {\n    hull() {\n        translate([0, 0, 0])\n        sphere(2);\n        translate([0, 20, 5])\n        sphere(1);\n        translate([0, 25, -5])\n        sphere(1);\n        translate([0, 20, -10])\n        sphere(1);\n        translate([0, 0, -2])\n        sphere(2);\n    }\n}\n\n// Left wing\nmodule left_wing() {\n    translate([-15, 0, 30])\n    rotate([0, 0, -30])\n    union() {\n        // Wing base\n        translate([0, 0, 0])\n        rotate([0, 45, 0])\n        scale([0.5, 1, 0.3])\n        cylinder(h = 15, r = 5);\n        \n        // Wing bones\n        translate([0, 0, 0])\n        rotate([45, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h = 20, r = 2);\n        \n        translate([0, 0, 0])\n        rotate([30, 0, 20])\n        scale([0.3, 0.3, 0.8])\n        cylinder(h = 15, r = 2);\n        \n        // Membrane\n        translate([0, 0, -2])\n        rotate([45, 0, 0])\n        wing_membrane();\n    }\n}\n\n// Right wing (mirror of left)\nmodule right_wing() {\n    mirror([0, 1, 0])\n    left_wing();\n}\n\n// Front left leg\nmodule front_left_leg() {\n    translate([-10, 8, 15])\n    union() {\n        // Upper leg\n        rotate([0, 30, 0])\n        scale([0.5, 0.5, 1])\n        cylinder(h = 10, r = 4);\n        \n        // Lower leg\n        translate([0, 0, -10])\n        rotate([30, 0, 0])\n        scale([0.4, 0.4, 1])\n        cylinder(h = 8, r = 3);\n        \n        // Foot\n        translate([0, 0, -18])\n        rotate([0, 0, 0])\n        scale([1.2, 0.8, 0.5])\n        cylinder(h = 3, r = 4);\n        \n        // Toes\n        for(i = [-1, 0, 1]) {\n            translate([i * 3, 0, -21])\n            rotate([0, 0, i * 10])\n            scale([0.3, 0.3, 1])\n            cylinder(h = 3, r = 1);\n        }\n    }\n}\n\n// Front right leg\nmodule front_right_leg() {\n    mirror([0, 1, 0])\n    front_left_leg();\n}\n\n// Back left leg\nmodule back_left_leg() {\n    translate([-35, 8, 15])\n    union() {\n        // Upper leg\n        rotate([0, -30, 0])\n        scale([0.6, 0.6, 1.2])\n        cylinder(h = 12, r = 5);\n        \n        // Lower leg\n        translate([0, 0, -12])\n        rotate([20, 0, 0])\n        scale([0.5, 0.5, 1])\n        cylinder(h = 10, r = 4);\n        \n        // Foot\n        translate([0, 0, -22])\n        rotate([0, 0, 0])\n        scale([1.4, 0.9, 0.6])\n        cylinder(h = 4, r = 5);\n        \n        // Toes\n        for(i = [-1, 0, 1]) {\n            translate([i * 3.5, 0, -26])\n            rotate([0, 0, i * 10])\n            scale([0.4, 0.4, 1.2])\n            cylinder(h = 4, r = 1.5);\n        }\n    }\n}\n\n// Back right leg\nmodule back_right_leg() {\n    mirror([0, 1, 0])\n    back_left_leg();\n}\n\n// Scale to reasonable size (80mm long)\nscale([0.8, 0.8, 0.8])\ndragon();",
    "renders": true
  },
  {
    "household_item": "wyvern",
    "openscad_code": "// Wyvern model - realistic style, medium complexity\n// 3D printable wyvern (dragon with two legs + wings)\n\n$fn = 30;  // Smooth curves for printing\n\n// Main module\nmodule wyvern() {\n    union() {\n        // Body\n        body();\n        \n        // Neck and head\n        translate([0, 0, 25]) rotate([0, -30, 0]) neck_head();\n        \n        // Wings - positioned on back\n        translate([-5, 0, 30]) rotate([0, 0, -20]) wing();\n        translate([-5, 0, 30]) mirror([0,1,0]) rotate([0, 0, -20]) wing();\n        \n        // Legs\n        translate([5, -8, 15]) rotate([0, 0, 30]) leg();\n        translate([5, 8, 15]) rotate([0, 0, -30]) leg();\n        \n        // Tail\n        translate([-25, 0, 15]) rotate([0, 0, 180]) tail();\n    }\n}\n\n// Body - elongated torso\nmodule body() {\n    hull() {\n        translate([0, 0, 20]) scale([1, 0.8, 0.7]) sphere(r=8);\n        translate([-15, 0, 20]) scale([1.2, 0.9, 0.6]) sphere(r=7);\n    }\n}\n\n// Neck and head assembly\nmodule neck_head() {\n    // Neck\n    translate([0, 0, 0]) rotate([0, 30, 0]) \n        scale([0.6, 0.6, 2]) cylinder(r1=6, r2=4, h=20);\n    \n    // Head\n    translate([0, 0, 25]) rotate([0, 15, 0]) {\n        // Main head shape\n        scale([1.5, 0.8, 0.8]) sphere(r=8);\n        \n        // Snout\n        translate([12, 0, 0]) scale([1.2, 0.6, 0.5]) sphere(r=5);\n        \n        // Horns\n        translate([5, 0, 8]) rotate([0, 30, 0]) \n            scale([0.3, 0.3, 1]) cylinder(r1=2, r2=0, h=10);\n        translate([5, 0, 8]) rotate([0, -30, 0]) \n            scale([0.3, 0.3, 1]) cylinder(r1=2, r2=0, h=10);\n    }\n}\n\n// Wing - membrane structure\nmodule wing() {\n    // Wing arm\n    translate([0, 0, 0]) rotate([0, 0, 90])\n        scale([0.5, 0.5, 3]) cylinder(r=3, h=15);\n    \n    // Wing membrane - simplified as thin structure\n    translate([5, 0, 0]) rotate([0, 90, 0])\n        linear_extrude(height=0.8) {\n            polygon(points=[\n                [0, 0],\n                [20, 5],\n                [30, 0],\n                [25, -10],\n                [15, -15],\n                [5, -10],\n                [0, 0]\n            ]);\n        }\n    \n    // Wing fingers\n    for(i=[0:3]) {\n        translate([5 + i*7, 0, 0]) rotate([0, 0, -i*15])\n            scale([0.3, 0.3, 1.5]) cylinder(r=1.5, h=8);\n    }\n}\n\n// Leg - digitigrade structure\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 0]) rotate([0, 0, -30])\n        scale([0.7, 0.7, 2]) cylinder(r=3, h=12);\n    \n    // Lower leg\n    translate([10, -2, 0]) rotate([0, 0, 30])\n        scale([0.6, 0.6, 1.5]) cylinder(r=2.5, h=10);\n    \n    // Foot\n    translate([15, -5, -3]) rotate([0, 0, 45])\n        scale([1.2, 0.5, 0.5]) cube([8, 3, 2]);\n    \n    // Claws\n    for(i=[-1:1]) {\n        translate([20, -5 + i*1.5, -3]) rotate([0, 0, -45])\n            scale([0.3, 0.3, 1]) cylinder(r1=1, r2=0, h=3);\n    }\n}\n\n// Tail - tapered structure\nmodule tail() {\n    // Main tail segments\n    for(i=[0:4]) {\n        translate([i*5, 0, -i*2]) rotate([0, i*5, 0])\n            scale([1 - i*0.15, 1 - i*0.15, 1])\n            cylinder(r=6 - i*1.2, h=8);\n    }\n    \n    // Tail spike\n    translate([22, 0, -10]) rotate([0, 0, 180])\n        scale([0.4, 0.4, 1]) cylinder(r1=3, r2=0, h=6);\n}\n\n// Generate the wyvern\nwyvern();",
    "renders": true
  },
  {
    "household_item": "basilisk",
    "openscad_code": "// Basilisk – medium-complexity realistic style\n// Overall bounding box ≈ 90 mm long, printable in one piece\n// All parts have ≥1 mm walls and are printable without supports\n\n$fa = 2;\n$fs = 1;\n\nmodule body() {\n    // Main torso\n    difference() {\n        hull() {\n            translate([0,0,5]) sphere([15,12,10]);   // chest\n            translate([30,0,8]) sphere([18,13,12]);  // belly\n            translate([60,0,10]) sphere([12,10,9]);  // hips\n        }\n        // Hollow out for material saving\n        translate([30,0,8]) scale([0.7,0.7,0.7]) sphere([20,15,13]);\n    }\n\n    // Tail segments\n    for(i=[1:5]) {\n        translate([60+8*i,0,10-5*sin(i*30)]) \n            rotate([0,-10*i,0]) \n            scale([1-0.05*i,1-0.05*i,1-0.05*i]) \n            sphere([12-1.5*i,10-1*i,8-1*i]);\n    }\n}\n\nmodule neck() {\n    // Curved S-neck\n    for(t=[0:10:70]) {\n        translate([15*sin(t),0,20+15*(1-cos(t))]) \n        rotate([0,-t,0]) \n        scale([1-0.005*t,1-0.005*t,1-0.005*t]) \n        sphere([9-0.04*t,7-0.04*t,7-0.04*t]);\n    }\n}\n\nmodule head() {\n    // Snout\n    translate([-10,0,28]) rotate([0,-30,0]) {\n        difference() {\n            hull() {\n                sphere([10,6,6]); // tip\n                translate([10,0,0]) sphere([8,7,7]); // rear\n            }\n            // Nostrils\n            translate([0,3,2]) rotate([90,0,0]) cylinder(h=5,d=2,$fn=8);\n            translate([0,-3,2]) rotate([90,0,0]) cylinder(h=5,d=2,$fn=8);\n        }\n    }\n    // Cranium\n    translate([5,0,35]) sphere([11,9,9]);\n    // Eyes\n    translate([2,6,33]) sphere([2.5,2.5,2.5]);\n    translate([2,-6,33]) sphere([2.5,2.5,2.5]);\n}\n\nmodule legs() {\n    module leg(posx,posy,angle) {\n        translate([posx,posy,5]) rotate([0,0,angle]) {\n            // Upper leg\n            cylinder(h=20, d1=7, d2=5, center=false);\n            translate([0,0,20]) rotate([30,0,0]) {\n                // Lower leg\n                cylinder(h=18, d1=5, d2=4, center=false);\n                // Foot\n                translate([0,0,18]) rotate([30,0,0]) \n                    hull() {\n                        cube([12,4,2],center=true);\n                        translate([6,0,-1]) cube([4,6,4],center=true);\n                    }\n            }\n        }\n    }\n    leg(20,12,30);\n    leg(20,-12,-30);\n    leg(45,10,-30);\n    leg(45,-10,30);\n}\n\nmodule crest() {\n    // Row of spines along back\n    for(i=[0:5:60]) {\n        translate([i,0,18+2*sin(i*5)]) \n        rotate([0,0,90]) \n        scale([0.8,0.8,1.2]) \n        cylinder(h=8,d1=2,d2=0.5);\n    }\n}\n\nunion() {\n    body();\n    neck();\n    head();\n    legs();\n    crest();\n}",
    "renders": true
  },
  {
    "household_item": "hydra",
    "openscad_code": "// Realistic 3D-printable Hydra (medium complexity)\n// Total height ~60 mm, base ~50 mm wide\n// Print without support – necks are ≤45°\n\n$fn = 50;             // smooth curves\nbody_r = 12;          // main torso radius\nneck_len = 18;\nneck_r = 4;\nhead_r = 6;\nsnout_len = 8;\nscale = 1.5;          // overall scaling for 50-100 mm size\n\nmodule scaled() scale([scale,scale,scale]) children();\n\n// sturdy base so model stands upright\nmodule base() {\n    difference() {\n        cylinder(h=4, r1=25, r2=20, center=false);\n        // lightening holes to save material\n        for(a=[0:60:359])\n            rotate([0,0,a])\n                translate([12,0,-1])\n                    cylinder(h=6, r=4);\n    }\n}\n\n// muscular torso with slight taper\nmodule torso() {\n    union() {\n        cylinder(h=20, r1=body_r+3, r2=body_r, center=false);\n        // subtle back ridge\n        for(h=[0:5:15])\n            translate([0,body_r-1.5,h+2])\n                rotate([90,0,0])\n                    cylinder(h=body_r*2, r1=2.5-h/10, r2=1);\n    }\n}\n\n// flexible neck – printed as gentle curve\nmodule neck(base_angle=0) {\n    rotate([0,0,base_angle])\n        translate([0,0,5]) // start above shoulders\n            rotate([30,0,0])\n                hull() {\n                    translate([0,0,0])\n                        sphere(r=neck_r);\n                    translate([0,0,neck_len])\n                        sphere(r=neck_r*0.8);\n                }\n}\n\n// reptilian head with jaws\nmodule head() {\n    union() {\n        // cranium\n        sphere(r=head_r);\n        // snout\n        translate([0,0,head_r])\n            rotate([-20,0,0])\n                cylinder(h=snout_len, r1=head_r*0.9, r2=head_r*0.6);\n        // lower jaw\n        translate([0,-head_r*0.3,-head_r*0.2])\n            rotate([20,0,0])\n                cube([head_r*1.6,head_r*1.2,head_r*0.4], center=true);\n    }\n}\n\n// single neck+head assembly\nmodule neck_head(base_angle=0) {\n    neck(base_angle);\n    translate([0,0,5+neck_len+head_r*0.5])\n        rotate([20,0,0])\n            head();\n}\n\n// array of 5 necks/heads around shoulders\nmodule heads() {\n    for(a=[-60,-30,0,30,60])\n        neck_head(a);\n}\n\n// four thick legs for stability\nmodule leg(side=1, fwd=1) {\n    translate([side*body_r*0.5, fwd*body_r*0.7, 0])\n        rotate([0,side*10,0])\n            union() {\n                cylinder(h=15, r1=5, r2=4);\n                translate([0,0,14])\n                    sphere(r=4.5);\n            }\n}\n\nmodule legs() {\n    leg(1,1);\n    leg(-1,1);\n    leg(1,-1);\n    leg(-1,-1);\n}\n\n// tail tapering to a point\nmodule tail() {\n    translate([0,-body_r,0])\n        rotate([90,0,0])\n            cylinder(h=25, r1=body_r*0.8, r2=1);\n}\n\n// main assembly\nscaled() {\n    base();\n    translate([0,0,4])\n        union() {\n            torso();\n            heads();\n            legs();\n            tail();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "naga",
    "openscad_code": "// Naga - Medium complexity, realistic style\n// Scaled for 3D printing: ~80 mm tall\n\n$fn = 32;  // Smooth curves for printing\n\nmodule naga() {\n    union() {\n        // Head\n        translate([0, 0, 75])\n        rotate([0, 0, 0])\n        scale([1, 0.8, 1])\n        sphere(8);\n\n        // Snout\n        translate([0, 8, 75])\n        rotate([30, 0, 0])\n        scale([0.7, 1.2, 0.8])\n        cylinder(h=10, r1=4, r2=2);\n\n        // Eyes\n        for (x = [-3, 3]) {\n            translate([x, 4, 78])\n            rotate([0, 0, 0])\n            sphere(1.5);\n        }\n\n        // Neck\n        translate([0, 0, 65])\n        rotate([0, 0, 0])\n        cylinder(h=10, r1=6, r2=4);\n\n        // Torso\n        translate([0, 0, 45])\n        rotate([0, 0, 0])\n        scale([1, 0.6, 1])\n        cylinder(h=20, r1=7, r2=6);\n\n        // Arms\n        for (side = [-1, 1]) {\n            // Upper arm\n            translate([side * 8, 0, 55])\n            rotate([0, 0, side * 15])\n            rotate([90, 0, 0])\n            cylinder(h=12, r=2.5);\n\n            // Lower arm\n            translate([side * 12, 0, 48])\n            rotate([0, 0, side * 30])\n            rotate([90, 0, 0])\n            cylinder(h=10, r=2);\n\n            // Hand\n            translate([side * 15, 0, 45])\n            sphere(2.5);\n        }\n\n        // Snake body\n        module body_segment(z, r) {\n            translate([0, 0, z])\n            cylinder(h=8, r1=r, r2=r-0.2);\n        }\n\n        // Create 8 body segments tapering down\n        for (i = [0:7]) {\n            body_segment(37 - i*8, 6 - i*0.6);\n        }\n\n        // Tail\n        translate([0, 0, -25])\n        rotate([0, 0, 0])\n        scale([1, 0.8, 1])\n        cylinder(h=25, r1=1.2, r2=0.5);\n\n        // Hood\n        difference() {\n            // Main hood\n            translate([0, 0, 68])\n            rotate([0, 0, 0])\n            scale([1.8, 1, 0.3])\n            sphere(12);\n\n            // Cutout for head\n            translate([0, 0, 78])\n            scale([1, 0.8, 1])\n            sphere(8);\n        }\n\n        // Scale pattern\n        module scale(z, angle) {\n            translate([0, 0, z])\n            rotate([0, 0, angle])\n            scale([0.8, 0.3, 0.3])\n            sphere(1);\n        }\n\n        // Add scales to body\n        for (seg = [0:6]) {\n            for (ang = [0:30:330]) {\n                scale(33 - seg*8, ang);\n            }\n        }\n    }\n}\n\n// Generate the model\nnaga();",
    "renders": true
  },
  {
    "household_item": "drake",
    "openscad_code": "// Drake OpenSCAD model\n// Medium complexity realistic style\n\n$fn = 36;\n\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            translate([0, 0, 10]) scale([1.2, 0.8, 1]) sphere(15);\n            \n            // Neck base\n            translate([0, 20, 25]) scale([0.6, 0.5, 1.2]) sphere(10);\n            \n            // Tail segments\n            for(i = [1:5]) {\n                translate([0, -15 - i*5, 12 - i*2]) scale([0.9 - i*0.1, 0.8, 0.8]) sphere(8);\n            }\n        }\n        \n        // Hollow body\n        translate([0, 0, 10]) scale([1.1, 0.7, 0.9]) sphere(13);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head\n        translate([0, 30, 28]) scale([0.7, 1.2, 0.8]) sphere(12);\n        \n        // Snout\n        translate([0, 40, 27]) scale([0.5, 0.8, 0.6]) sphere(8);\n        \n        // Eye sockets\n        difference() {\n            translate([-5, 32, 31]) sphere(3);\n            translate([-5, 32, 33]) sphere(2);\n        }\n        \n        difference() {\n            translate([5, 32, 31]) sphere(3);\n            translate([5, 32, 33]) sphere(2);\n        }\n        \n        // Nostrils\n        translate([-2, 42, 26]) cylinder(2, 1, 1);\n        translate([2, 42, 26]) cylinder(2, 1, 1);\n    }\n}\n\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing\n            translate([0, 0, 0]) cube([30, 3, 2], center=true);\n            \n            // Wing segments\n            for(i = [1:3]) {\n                rotate([0, 10*i, 0]) \n                translate([15 + i*8, 0, 0]) \n                scale([0.8 - i*0.15, 1, 1]) \n                cube([15, 2, 1], center=true);\n            }\n            \n            // Wing membrane supports\n            for(i = [0:3]) {\n                translate([10 + i*8, 0, 0]) \n                rotate([0, 0, 30 - i*15]) \n                cylinder(25 - i*5, 1, 0.5);\n            }\n        }\n        \n        // Hollow wing\n        translate([0, 0, -1]) cube([28, 2, 4], center=true);\n    }\n}\n\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 0]) rotate([0, 15, 0]) cylinder(15, 4, 3);\n        \n        // Lower leg\n        translate([0, 12, -12]) rotate([0, -30, 0]) cylinder(12, 3, 2.5);\n        \n        // Foot\n        translate([0, 20, -22]) rotate([0, 30, 0]) {\n            cube([8, 4, 2], center=true);\n            // Toes\n            for(i = [-1:1]) {\n                translate([i*3, 2, 0]) cube([2, 4, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule tail_fin() {\n    // Webbed tail fin\n    translate([0, -40, 10]) rotate([90, 0, 0]) {\n        cylinder(5, 0, 12);\n        rotate([0, 0, 120]) cylinder(5, 0, 12);\n        rotate([0, 0, 240]) cylinder(5, 0, 12);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    \n    // Left wing\n    translate([-20, 0, 20]) rotate([0, 0, 20]) wing();\n    \n    // Right wing\n    translate([20, 0, 20]) scale([-1, 1, 1]) rotate([0, 0, 20]) wing();\n    \n    // Front left leg\n    translate([-10, 5, 0]) rotate([0, 0, -30]) leg();\n    \n    // Front right leg\n    translate([10, 5, 0]) scale([-1, 1, 1]) rotate([0, 0, -30]) leg();\n    \n    // Back left leg\n    translate([-8, -10, 0]) rotate([0, 0, -45]) leg();\n    \n    // Back right leg\n    translate([8, -10, 0]) scale([-1, 1, 1]) rotate([0, 0, -45]) leg();\n    \n    tail_fin();\n}\n\n// Add support base for printing\ntranslate([0, 0, -25]) cube([60, 80, 2], center=true);",
    "renders": true
  },
  {
    "household_item": "wyrm",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// Overall dimensions\nbody_length = 80;\nbody_diameter = 12;\nhead_length = 20;\nhead_diameter = 14;\ntail_taper = 0.3;\n\nmodule head() {\n    // Main head shape\n    rotate([0, 10, 0])\n    union() {\n        // Skull\n        translate([0, 0, head_diameter/2])\n        scale([1, 0.8, 0.7])\n        sphere(d=head_diameter);\n        \n        // Snout\n        translate([head_length/2 - 3, 0, 0])\n        scale([1.3, 0.7, 0.6])\n        sphere(d=head_diameter * 0.8);\n        \n        // Eye sockets\n        for(side = [-1, 1])\n            translate([head_length/2 - 8, side * head_diameter/3, head_diameter/2])\n            difference() {\n                sphere(d=head_diameter/3);\n                translate([0, 0, -head_diameter/3])\n                cube([head_diameter/3, head_diameter/3, head_diameter/3], center=true);\n            }\n        \n        // Nostrils\n        for(side = [-1, 1])\n            translate([head_length - 3, side * head_diameter/4, 0])\n            rotate([90, 0, 0])\n            cylinder(h=head_diameter/4, d1=head_diameter/6, d2=head_diameter/8);\n    }\n}\n\nmodule segment(index, total_segments) {\n    // Position along body\n    pos = index * (body_length / total_segments);\n    // Taper diameter towards tail\n    diam = body_diameter * (1 - (index / total_segments) * tail_taper);\n    \n    // Slight undulation\n    wave = sin(index * 30) * 2;\n    \n    translate([pos, wave, 0])\n    rotate([0, sin(index * 45) * 5, 0])\n    cylinder(h=body_length/total_segments, d=diam, center=true);\n}\n\nmodule body() {\n    segments = 20;\n    union() {\n        for(i = [0:segments-1])\n            segment(i, segments);\n        \n        // Add dorsal ridge\n        for(i = [1:segments-2])\n            translate([i * (body_length/segments), 0, body_diameter/2 * (1 - (i/segments) * tail_taper)])\n            cube([body_length/segments * 0.8, 2, 1.5], center=true);\n    }\n}\n\nmodule limbs() {\n    // Front limbs\n    for(side = [-1, 1])\n        translate([head_length + 5, side * body_diameter/2, -body_diameter/2])\n    union() {\n        // Upper arm\n        rotate([0, 0, 45 * side])\n        cylinder(h=8, d=body_diameter/3);\n        \n        // Lower arm\n        translate([6 * side, 6, 0])\n        rotate([0, 0, 30 * side])\n        cylinder(h=6, d=body_diameter/4);\n        \n        // Hand\n        translate([10 * side, 10, 0])\n        sphere(d=body_diameter/3);\n    }\n    \n    // Rear limbs (smaller)\n    for(side = [-1, 1])\n        translate([body_length * 0.7, side * body_diameter/2 * 0.7, -body_diameter/2 * 0.7])\n    union() {\n        rotate([0, 0, 45 * side])\n        cylinder(h=5, d=body_diameter/4);\n        \n        translate([4 * side, 3, 0])\n        rotate([0, 0, 30 * side])\n        cylinder(h=4, d=body_diameter/5);\n        \n        translate([6 * side, 5, 0])\n        sphere(d=body_diameter/4);\n    }\n}\n\n// Assemble the wyrm\nunion() {\n    // Head attached to body\n    translate([-head_length/2, 0, 0])\n    head();\n    \n    // Body\n    translate([head_length/2, 0, 0])\n    body();\n    \n    // Limbs\n    limbs();\n}",
    "renders": true
  },
  {
    "household_item": "serpent",
    "openscad_code": "// Realistic 3D printable serpent – medium complexity\n// Overall size: ~90 mm long, 20 mm tall, 25 mm wide\n\n// Parameters\n$fn = 36;                    // Global circle resolution\nwall = 1.2;                  // Wall thickness for printing\nseg_len = 6.5;               // Segment length\nseg_rad = 4.5;               // Segment radius\nseg_cnt = 13;                // Number of body segments\nhead_len = 12;               // Head length\nhead_rad = 6;                // Head radius\ntail_taper = 0.4;            // Tail taper factor\n\n// Helper module for a single round body segment\nmodule segment(r = seg_rad, l = seg_len, taper = 1) {\n    hull() {\n        translate([-l/2, 0, 0])\n            sphere(r * taper);\n        translate([ l/2, 0, 0])\n            sphere(r);\n    }\n}\n\n// Snake body – curved S-shape\nmodule body() {\n    for(i=[0:seg_cnt-1]) {\n        // Taper along tail\n        taper = 1 - (i / seg_cnt) * (1 - tail_taper);\n        \n        // S-curve parameters\n        angle = -30 * sin(i * 25);          // Side-to-side wiggle\n        rise  =  12 * sin(i * 20);          // Up-down curve\n        \n        translate([i * seg_len * 0.9, 0, rise])\n        rotate([0, 0, angle])\n        segment(seg_rad, seg_len, taper);\n    }\n}\n\n// Snake head with snout and eye sockets\nmodule head() {\n    difference() {\n        // Outer head shape\n        hull() {\n            translate([-head_len/2, 0, 0])\n                sphere(head_rad);\n            translate([ head_len/2, 0, 0])\n                sphere(head_rad * 0.8);\n        }\n        \n        // Left eye socket\n        translate([head_len * 0.2, head_rad * 0.7, head_rad * 0.3])\n            rotate([0, 90, 0])\n            cylinder(h = wall + 1, r = wall * 0.9, $fn = 16);\n        \n        // Right eye socket\n        translate([head_len * 0.2, -head_rad * 0.7, head_rad * 0.3])\n            rotate([0, 90, 0])\n            cylinder(h = wall + 1, r = wall * 0.9, $fn = 16);\n        \n        // Underside flattening for printing\n        translate([0, 0, -head_rad])\n            cube([head_len * 2, head_rad * 3, head_rad], center = true);\n    }\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([head_len * 0.4, side * head_rad * 0.5, head_rad * 0.5])\n            rotate([-45, 0, side * 15])\n            cylinder(h = wall + 1, r = wall * 0.6, $fn = 10);\n    }\n}\n\n// Assembly\nunion() {\n    // Body\n    body();\n    \n    // Head placed at front of body\n    translate([(seg_cnt - 0.5) * seg_len * 0.9, 0, 12 * sin((seg_cnt - 1) * 20)])\n    rotate([0, -20, -30 * sin((seg_cnt - 1) * 25)])\n    head();\n}",
    "renders": true
  },
  {
    "household_item": "chimera",
    "openscad_code": "// Chimera Model - Lion head, goat body, serpent tail\n// Medium complexity, realistic style\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main parameters\nbody_length = 40;\nbody_height = 25;\nhead_size = 18;\nleg_height = 15;\n\nmodule chimera() {\n    union() {\n        // Lion head\n        translate([body_length/2 + head_size/2 - 5, 0, body_height/2])\n            lion_head();\n        \n        // Goat body\n        translate([0, 0, body_height/2])\n            goat_body();\n        \n        // Front legs (lion)\n        translate([body_length/3, body_height/4, 0])\n            rotate([0, 0, 15])\n                leg(leg_height);\n        translate([body_length/3, -body_height/4, 0])\n            rotate([0, 0, -15])\n                leg(leg_height);\n        \n        // Back legs (goat)\n        translate([-body_length/3, body_height/4, 0])\n            rotate([0, 0, 15])\n                leg(leg_height);\n        translate([-body_length/3, -body_height/4, 0])\n            rotate([0, 0, -15])\n                leg(leg_height);\n        \n        // Serpent tail\n        translate([-body_length/2 - 5, 0, body_height/2 - 5])\n            serpent_tail();\n    }\n}\n\nmodule lion_head() {\n    difference() {\n        // Main head shape\n        sphere(head_size);\n        \n        // Snout\n        translate([head_size/2, 0, -head_size/4])\n            scale([1.5, 1, 0.8])\n                sphere(head_size * 0.7);\n        \n        // Eyes\n        translate([head_size/2, head_size/3, head_size/4])\n            sphere(head_size * 0.15);\n        translate([head_size/2, -head_size/3, head_size/4])\n            sphere(head_size * 0.15);\n        \n        // Nostrils\n        translate([head_size * 0.8, head_size/4, -head_size/3])\n            sphere(head_size * 0.1);\n        translate([head_size * 0.8, -head_size/4, -head_size/3])\n            sphere(head_size * 0.1);\n        \n        // Mouth line\n        translate([head_size * 0.9, 0, -head_size/2])\n            cube([head_size * 0.3, head_size * 0.1, head_size * 0.3]);\n    }\n    \n    // Mane - layered cylinders\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n            translate([head_size * 0.7, 0, head_size/4])\n                rotate([90, 0, 0])\n                    cylinder(h=head_size * 0.8, r=head_size * 0.3, center=true);\n    }\n}\n\nmodule goat_body() {\n    difference() {\n        // Main body\n        scale([1.2, 0.8, 0.6])\n            sphere(body_height);\n        \n        // Neck connection\n        translate([body_length/2, 0, body_height/4])\n            sphere(body_height * 0.6);\n        \n        // Tail connection\n        translate([-body_length/2, 0, 0])\n            sphere(body_height * 0.5);\n    }\n    \n    // Goat horns\n    translate([body_length/3, body_height/3, body_height * 0.7])\n        rotate([0, -30, 45])\n            cylinder(h=8, r1=2, r2=0.5);\n    translate([body_length/3, -body_height/3, body_height * 0.7])\n        rotate([0, -30, -45])\n            cylinder(h=8, r1=2, r2=0.5);\n}\n\nmodule leg(height) {\n    // Upper leg\n    cylinder(h=height * 0.6, r1=4, r2=3);\n    \n    // Lower leg\n    translate([0, 0, height * 0.6])\n        cylinder(h=height * 0.4, r1=3, r2=2.5);\n    \n    // Hoof\n    translate([0, 0, height])\n        sphere(2.5);\n}\n\nmodule serpent_tail() {\n    // Base connection\n    sphere(4);\n    \n    // Segmented tail\n    segments = 8;\n    for(i = [1:segments]) {\n        translate([-i * 3, 0, -i * 1.5])\n            rotate([0, i * 15, 0])\n                sphere(max(4 - i * 0.3, 1));\n    }\n    \n    // Tail tip\n    translate([-segments * 3 - 2, 0, -segments * 1.5 - 2])\n        rotate([0, segments * 15, 0])\n            cylinder(h=3, r1=1, r2=0.2);\n}\n\n// Center and scale for 3D printing\ntranslate([0, 0, leg_height])\n    scale(0.8)\n        chimera();",
    "renders": true
  },
  {
    "household_item": "phoenix",
    "openscad_code": "// Phoenix model - medium complexity realistic style\n// Wings spread, perched on a rock base\n\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing structure\n            translate([-5, 0, 0]) \n                scale([1, 3, 0.3]) \n                sphere(10, $fn=20);\n            \n            // Wing feathers - top layer\n            for(i = [0:2]) {\n                translate([-10 + i*5, 15 + i*3, 2]) \n                    rotate([0, 0, 20 - i*10]) \n                    scale([0.8, 1.5, 0.2]) \n                    sphere(8, $fn=8);\n            }\n            \n            // Wing feathers - bottom layer\n            for(i = [0:3]) {\n                translate([-8 + i*4, 20 + i*2, 0]) \n                    rotate([0, 0, -15 + i*5]) \n                    scale([0.6, 1.2, 0.15]) \n                    sphere(6, $fn=8);\n            }\n        }\n        \n        // Hollow out wing for printing\n        translate([-5, 10, 0]) \n            scale([0.8, 0.8, 0.8]) \n            sphere(9, $fn=20);\n    }\n}\n\nmodule tail() {\n    union() {\n        // Central tail feathers\n        for(i = [0:4]) {\n            translate([0, -20 - i*3, 2 - i*0.5]) \n                rotate([10 + i*5, 0, 0]) \n                scale([0.5, 2, 0.15]) \n                cylinder(h=12, r1=3, r2=1, $fn=8);\n        }\n        \n        // Side tail feathers\n        for(i = [-1:1:1]) {\n            translate([i*5, -18, 1]) \n                rotate([5, 0, i*15]) \n                scale([0.4, 1.8, 0.1]) \n                cylinder(h=10, r1=2.5, r2=0.5, $fn=6);\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        union() {\n            // Main body\n            translate([0, 0, 5]) \n                scale([0.8, 1.2, 1]) \n                sphere(12, $fn=30);\n            \n            // Neck\n            translate([0, 8, 12]) \n                rotate([-30, 0, 0]) \n                cylinder(h=8, r1=5, r2=3, $fn=12);\n            \n            // Head\n            translate([0, 12, 16]) \n                sphere(6, $fn=20);\n            \n            // Beak\n            translate([0, 18, 16]) \n                rotate([-30, 0, 0]) \n                cylinder(h=5, r1=2, r2=0.5, $fn=6);\n        }\n        \n        // Hollow body\n        translate([0, 0, 5]) \n            scale([0.7, 1.1, 0.9]) \n            sphere(11, $fn=30);\n    }\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        translate([side*4, -5, 0]) {\n            // Upper leg\n            rotate([20, side*10, 0]) \n                cylinder(h=6, r=2, $fn=8);\n            \n            // Lower leg\n            translate([0, 0, 6]) \n                rotate([45, side*10, 0]) \n                cylinder(h=5, r=1.5, $fn=8);\n            \n            // Foot\n            translate([0, 0, 10.5]) \n                rotate([90, 0, 0]) \n                scale([1, 2, 0.5]) \n                sphere(2, $fn=8);\n        }\n    }\n}\n\nmodule crest() {\n    for(i = [0:3]) {\n        translate([0, 16, 20 - i*2]) \n            rotate([0, 0, i*15]) \n            scale([0.2, 1, 0.1]) \n            cylinder(h=3, r=1, $fn=4);\n    }\n}\n\nmodule base() {\n    difference() {\n        // Rock-like base\n        scale([1.5, 1, 0.5]) \n            cylinder(h=5, r=25, $fn=32);\n        \n        // Hollow base\n        translate([0, 0, 2]) \n            scale([1.3, 0.8, 0.5]) \n            cylinder(h=5, r=20, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Phoenix body\n    translate([0, 0, 5]) {\n        body();\n        \n        // Wings\n        translate([0, 0, 10]) {\n            translate([-10, 0, 0]) \n                rotate([0, 0, -20]) \n                wing();\n            mirror([1, 0, 0]) \n                rotate([0, 0, -20]) \n                wing();\n        }\n        \n        // Tail\n        translate([0, 0, 5]) \n            tail();\n        \n        // Legs\n        legs();\n        \n        // Crest\n        crest();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "lindwurm",
    "openscad_code": "// Lindwurm model for 3D printing\n// Realistic medium-complexity dragon-serpent\n\n$fn = 32; // Smooth curves\n\n// Overall dimensions\nlindwurm_length = 80;\nlindwurm_height = 25;\nbody_radius = 8;\nhead_radius = 12;\n\nmodule lindwurm() {\n    // Main body segments\n    union() {\n        // Head\n        translate([0, 0, head_radius])\n            rotate([0, 0, 0])\n                lindwurm_head();\n        \n        // Neck connecting to body\n        translate([-15, 0, head_radius - 5])\n            rotate([0, 20, 0])\n                cylinder(h = 20, r1 = head_radius * 0.8, r2 = body_radius, center = false);\n        \n        // Body segments with slight curvature\n        for(i = [0:5]) {\n            translate([-35 - i * 10, 0, head_radius - 5 - i * 2])\n                rotate([0, -10 - i * 5, 0])\n                    cylinder(h = 10, r = body_radius - i * 0.8, center = true);\n        }\n        \n        // Tail tapering\n        for(i = [0:4]) {\n            translate([-90 - i * 8, 0, -5 - i * 3])\n                rotate([0, -20 - i * 10, 0])\n                    cylinder(h = 8, r = body_radius * 0.8 - i * 1.5, center = true);\n        }\n    }\n    \n    // Legs (short, lizard-like)\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([-25, side * (body_radius + 5), 0])\n            rotate([0, 0, side * 20])\n                lindwurm_leg();\n        \n        // Rear legs\n        translate([-55, side * (body_radius + 4), -8])\n            rotate([0, 0, side * 30])\n                lindwurm_leg();\n    }\n    \n    // Wings (folded against body for printing)\n    for(side = [-1, 1]) {\n        translate([-30, side * (body_radius + 2), 5])\n            rotate([0, side * 10, 0])\n                folded_wing(side);\n    }\n}\n\nmodule lindwurm_head() {\n    difference() {\n        // Main head shape\n        sphere(r = head_radius);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([head_radius * 0.6, side * head_radius * 0.5, head_radius * 0.3])\n                sphere(r = head_radius * 0.25);\n        }\n        \n        // Nostrils\n        for(side = [-1, 1]) {\n            translate([head_radius * 0.9, side * head_radius * 0.3, 0])\n                rotate([45, 0, 0])\n                    cylinder(h = head_radius * 0.3, r = head_radius * 0.15, center = true);\n        }\n    }\n    \n    // Eyes (raised spheres)\n    for(side = [-1, 1]) {\n        translate([head_radius * 0.6, side * head_radius * 0.5, head_radius * 0.3])\n            sphere(r = head_radius * 0.2);\n    }\n    \n    // Snout ridge\n    translate([head_radius * 0.8, 0, 0])\n        rotate([0, 0, 0])\n            cube([head_radius * 1.2, head_radius * 0.4, head_radius * 0.6], center = true);\n    \n    // Teeth (small triangular prisms)\n    for(i = [0:3]) {\n        translate([head_radius * 0.95, -head_radius * 0.3 + i * head_radius * 0.2, -head_radius * 0.3])\n            rotate([0, 0, 0])\n                cube([head_radius * 0.2, head_radius * 0.1, head_radius * 0.4]);\n    }\n}\n\nmodule lindwurm_leg() {\n    // Upper leg\n    cylinder(h = 8, r1 = 4, r2 = 3, center = false);\n    \n    // Lower leg\n    translate([0, 0, -10])\n        rotate([20, 0, 0])\n            cylinder(h = 6, r1 = 3, r2 = 2.5, center = false);\n    \n    // Foot\n    translate([0, -3, -16])\n        rotate([0, 0, 0])\n            cube([6, 4, 2], center = true);\n    \n    // Claws\n    for(i = [-1, 1]) {\n        translate([i * 2, -5, -16])\n            rotate([0, 30, 0])\n                cylinder(h = 3, r1 = 0.8, r2 = 0.2, center = false);\n    }\n}\n\nmodule folded_wing(side) {\n    // Wing base attached to body\n    rotate([0, 90, 0])\n        difference() {\n            // Main wing membrane (folded)\n            cube([20, 8, 2], center = true);\n            \n            // Wing finger supports\n            for(i = [1:3]) {\n                translate([i * 6 - 10, 0, 0])\n                    cube([1, 6, 1.5], center = true);\n            }\n        }\n    \n    // Wing claw\n    translate([10 * side, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 4, r1 = 1.5, r2 = 0.5, center = false);\n}\n\n// Generate the complete lindwurm\nlindwurm();",
    "renders": true
  },
  {
    "household_item": "amphisbaena",
    "openscad_code": "// Amphisbaena - two-headed serpent\n// Body parameters\nbody_length = 60;\nbody_diameter = 8;\nhead_size = 6;\n\n// Scale factor for printability\nscale_factor = 1;\n\n// Create a single scale pattern\nmodule scale() {\n    difference() {\n        sphere(d=2.5, $fn=8);\n        translate([0,0,-1.5]) cube([3,3,3], center=true);\n    }\n}\n\n// Create a row of scales\nmodule scale_row(count, radius) {\n    for(i=[0:count-1]) {\n        angle = i * 360/count;\n        translate([\n            radius * cos(angle),\n            radius * sin(angle),\n            0\n        ]) rotate([0,0,angle]) scale();\n    }\n}\n\n// Create body segment with scales\nmodule body_segment(length, diameter, position) {\n    // Main body cylinder\n    cylinder(h=length, d=diameter, center=true, $fn=16);\n    \n    // Add scales around the segment\n    translate([0,0,length/2]) scale_row(8, diameter/2 + 1);\n    translate([0,0,-length/2]) scale_row(8, diameter/2 + 1);\n    \n    // Subtle spine ridge\n    translate([0,diameter/2,0]) cube([diameter/4, diameter/8, length], center=true);\n}\n\n// Create snake head\nmodule snake_head(size) {\n    // Main head shape\n    sphere(d=size*2, $fn=32);\n    \n    // Snout extension\n    translate([0,0,size]) cylinder(h=size, d1=size, d2=size/2, $fn=16);\n    \n    // Eyes\n    translate([size/2, size/2, size/2]) sphere(d=size/4, $fn=8);\n    translate([-size/2, size/2, size/2]) sphere(d=size/4, $fn=8);\n    \n    // Nostrils\n    translate([size/3, size/2, size*1.5]) cylinder(h=size/4, d=size/6, $fn=8);\n    translate([-size/3, size/2, size*1.5]) cylinder(h=size/4, d=size/6, $fn=8);\n}\n\n// Create curved body\nmodule curved_body() {\n    segments = 12;\n    segment_length = body_length / segments;\n    \n    for(i=[0:segments-1]) {\n        z_pos = i * segment_length - body_length/2;\n        y_curve = -sin(i * 180/segments) * 5;\n        x_sway = sin(i * 360/segments) * 3;\n        \n        translate([x_sway, y_curve, z_pos]) rotate([0, i*7, 0]) \n            body_segment(segment_length, body_diameter - i*0.3, i);\n    }\n}\n\n// Main amphisbaena model\nscale(scale_factor) {\n    union() {\n        // First head\n        translate([0, -5, body_length/2 + head_size]) \n            rotate([0, 0, 180]) snake_head(head_size);\n        \n        // Second head (mirrored)\n        translate([0, -5, -body_length/2 - head_size]) \n            snake_head(head_size);\n        \n        // Connect the two heads with curved body\n        curved_body();\n        \n        // Add small legs for mythological accuracy\n        module leg() {\n            rotate([90,0,0]) cylinder(h=3, d1=2, d2=1, $fn=8);\n            translate([0,0,1.5]) sphere(d=1.5, $fn=8);\n        }\n        \n        // Front legs\n        translate([body_diameter/2, 0, body_length/3]) leg();\n        translate([-body_diameter/2, 0, body_length/3]) leg();\n        \n        // Back legs\n        translate([body_diameter/2, 0, -body_length/3]) leg();\n        translate([-body_diameter/2, 0, -body_length/3]) leg();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "quetzalcoatl",
    "openscad_code": "// Quetzalcoatl – feathered serpent god\n// Medium-complexity, 3D-printable, ~80 mm long\n\n$fa = 1; $fs = 1;\n\n// Overall scale\nscale_factor = 0.3;\n\n// Wall thickness for printing\nwall = 1.6;\n\nmodule quetzalcoatl() {\n    scale(scale_factor)\n    union() {\n        // Central sinuous body\n        body();\n        \n        // Head\n        head();\n        \n        // Wings\n        wings();\n        \n        // Tail feathers\n        tail_feathers();\n    }\n}\n\nmodule body() {\n    // Parametric sweep along x\n    for (i=[0:5:100]) {\n        translate([i*0.8, \n                   5*sin(i*6), \n                   5*cos(i*4)])\n        rotate([0,90,0])\n        cylinder(r1=12-i*0.08, r2=11-i*0.08, h=wall);\n    }\n}\n\nmodule head() {\n    translate([0,0,30])\n    union() {\n        // Snout\n        translate([0,0,-5])\n        rotate([0,0,0])\n        cylinder(r1=8, r2=6, h=20);\n        \n        // Eyes\n        for (side=[-1,1])\n        translate([side*6,10,3])\n        sphere(3);\n        \n        // Feather crest\n        for (i=[-20:15:20]) {\n            rotate([0,0,i])\n            translate([0,12,10])\n            rotate([90,0,0])\n            cylinder(r1=3, r2=0.5, h=15);\n        }\n        \n        // Beak\n        translate([0,0,-20])\n        mirror([0,1,0])\n        cylinder(r1=4, r2=0, h=10);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([30,20,10])\n    rotate([0,0,30])\n    wing();\n    \n    // Right wing\n    mirror([0,1,0])\n    translate([30,-20,10])\n    rotate([0,0,-30])\n    wing();\n}\n\nmodule wing() {\n    union() {\n        // Main feather blade\n        translate([0,0,0])\n        rotate([0,0,0])\n        cylinder(r1=1, r2=25, h=wall);\n        \n        // Secondary feathers\n        for (i=[0:20:60]) {\n            rotate([0,0,i])\n            translate([i*0.2, i*0.5, 0])\n            scale([0.7,0.7,1])\n            cylinder(r1=0.5, r2=15, h=wall);\n        }\n    }\n}\n\nmodule tail_feathers() {\n    // Cluster at end of body\n    for (ang=[-45:15:45]) {\n        rotate([0,0,ang])\n        translate([80,0,0])\n        rotate([0,90,0])\n        cylinder(r1=1, r2=12, h=wall);\n    }\n}\n\n// Render the model\nquetzalcoatl();",
    "renders": true
  },
  {
    "household_item": "firedrake",
    "openscad_code": "// Firedrake – realistic style, medium complexity\n// Designed for FDM printing: no steep overhangs, 2 mm walls, 100 mm length, 60 mm height, 70 mm wingspan\n// All units in millimeters\n\n$fn = 36;          // smooth curves\n\n// Basic body hull\nmodule body() {\n    hull() {\n        translate([-5, 0, 0]) sphere(d = 20);\n        translate([ 5, 0, 0]) sphere(d = 25);\n        translate([20, 0, 0]) sphere(d = 30);\n        translate([35, 0, 0]) sphere(d = 20);\n    }\n}\n\n// Snout\nmodule snout() {\n    difference() {\n        hull() {\n            translate([35, 0, 0]) sphere(d = 20);\n            translate([55, 0, 0]) sphere(d = 15);\n        }\n        // Nostrils\n        translate([50, 5, 5]) rotate([0, 90, 0]) cylinder(h = 10, d = 4, $fn = 12);\n        translate([50, -5, 5]) rotate([0, 90, 0]) cylinder(h = 10, d = 4, $fn = 12);\n    }\n}\n\n// Eye sockets and eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        difference() {\n            translate([30, side * 12, 12]) sphere(d = 12);\n            translate([32, side * 12, 12]) sphere(d = 8);\n        }\n        color(\"red\")\n            translate([33, side * 12, 12]) sphere(d = 6);\n    }\n}\n\n// Horns\nmodule horns() {\n    for(side = [-1, 1]) {\n        translate([25, side * 12, 20])\n            rotate([0, -20, side * 20])\n            cylinder(h = 25, d1 = 8, d2 = 4, $fn = 8);\n    }\n}\n\n// Neck frill (thin curved plate)\nmodule neck_frill() {\n    difference() {\n        translate([15, 0, 0]) scale([1, 1.2, 0.4]) sphere(d = 30);\n        translate([15, 0, -5]) scale([0.8, 1, 2]) cube([60, 60, 10], center = true);\n    }\n}\n\n// Wing arm (simplified)\nmodule wing_arm() {\n    rotate([0, 0, 30]) {\n        cylinder(h = 40, d = 6, $fn = 12);\n        translate([0, 0, 40])\n            rotate([0, 0, -30])\n            cylinder(h = 35, d = 5, $fn = 12);\n    }\n}\n\n// Wing membrane\nmodule wing_membrane() {\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(d = 0);\n            translate([0, 0, 40]) sphere(d = 0);\n            translate([20, 0, 70]) sphere(d = 0);\n            translate([40, 0, 50]) sphere(d = 0);\n            translate([50, 0, 20]) sphere(d = 0);\n        }\n        // Cut elliptical holes to reduce weight\n        for(i = [0:2]) {\n            translate([15 + i * 10, 0, 30 + i * 5])\n                rotate([0, 90, 0]) scale([1, 1, 0.5]) cylinder(h = 3, d = 12, $fn = 12);\n        }\n    }\n}\n\n// Full wing\nmodule wing(side = 1) {\n    translate([10, side * 15, 10])\n        rotate([90, 0, side * 20])\n        union() {\n            wing_arm();\n            wing_membrane();\n        }\n}\n\n// Tail segments\nmodule tail() {\n    union() {\n        for(i = [0:3]) {\n            translate([-10 - i * 15, 0, -i * 5])\n                rotate([0, 0, i * -10])\n                scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.1])\n                sphere(d = 25 - i * 5);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front leg\n        translate([20, side * 10, -10])\n            rotate([0, side * 10, 0])\n            union() {\n                cylinder(h = 15, d = 8, $fn = 12);\n                translate([0, 0, 15])\n                    rotate([0, -30, 0])\n                    cylinder(h = 15, d = 7, $fn = 12);\n                translate([0, 0, 30])\n                    rotate([0, -60, 0])\n                    cylinder(h = 12, d = 6, $fn = 12);\n            }\n        // Rear leg\n        translate([-10, side * 10, -5])\n            rotate([0, side * 5, 0])\n            union() {\n                cylinder(h = 15, d = 10, $fn = 12);\n                translate([0, 0, 15])\n                    rotate([0, -30, 0])\n                    cylinder(h = 15, d = 8, $fn = 12);\n                translate([0, 0, 30])\n                    rotate([0, -60, 0])\n                    cylinder(h = 12, d = 6, $fn = 12);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    snout();\n    eyes();\n    horns();\n    neck_frill();\n    tail();\n    legs();\n    wing(1);\n    wing(-1);\n}",
    "renders": true
  },
  {
    "household_item": "icewyrm",
    "openscad_code": "// Icewyrm - realistic style, medium complexity\n// 3D printable at ~60 mm length\n\n$fn = 36;\n\n// Main body\nmodule body() {\n    union() {\n        // Head\n        translate([0, 0, 0]) rotate([0, 0, 0]) {\n            sphere(d = 12);\n            // Snout\n            translate([6, 0, 0]) rotate([0, -10, 0]) \n                scale([1.2, 0.8, 0.8]) sphere(d = 9);\n        }\n        \n        // Neck\n        for(i = [1:3]) {\n            translate([-i*6, 0, -i*1.5]) rotate([0, i*5, 0])\n                sphere(d = 12 - i*1.5);\n        }\n        \n        // Torso segments\n        for(i = [4:8]) {\n            translate([-i*6, 0, -i*1.5]) rotate([0, i*3, 0])\n                sphere(d = 10 - i*0.5);\n        }\n        \n        // Tail tapering\n        for(i = [9:15]) {\n            translate([-i*6, 0, -i*1.5]) rotate([0, i*2, 0])\n                sphere(d = 6 - (i-8)*0.5);\n        }\n    }\n}\n\n// Ice spikes along spine\nmodule spikes() {\n    for(i = [2:15]) {\n        translate([-i*6, 0, 8 - i*0.5]) rotate([0, 0, 45*i]) {\n            scale([1, 1, 2]) cylinder(h = 3, d1 = 2, d2 = 0.5, center = true);\n        }\n    }\n}\n\n// Front limbs\nmodule front_legs() {\n    for(side = [-1, 1]) {\n        translate([0, side*4, -3]) {\n            // Upper arm\n            rotate([0, -side*20, 0]) cylinder(h = 8, d = 4);\n            // Elbow\n            translate([-6, 0, -3]) rotate([0, 0, side*30]) {\n                cylinder(h = 6, d = 3);\n                // Foot\n                translate([-3, 0, -3]) rotate([0, side*20, 0])\n                    scale([0.8, 0.8, 0.4]) sphere(d = 5);\n            }\n        }\n    }\n}\n\n// Rear limbs\nmodule rear_legs() {\n    for(side = [-1, 1]) {\n        translate([-35, side*5, -2]) {\n            rotate([0, -side*15, 0]) cylinder(h = 7, d = 3.5);\n            translate([-5, 0, -2]) rotate([0, 0, side*25]) {\n                cylinder(h = 5, d = 3);\n                translate([-2.5, 0, -2.5]) rotate([0, side*15, 0])\n                    scale([0.7, 0.7, 0.4]) sphere(d = 4.5);\n            }\n        }\n    }\n}\n\n// Wings\nmodule wings() {\n    for(side = [-1, 1]) {\n        translate([-20, side*7, 6]) rotate([0, 0, side*15]) {\n            // Wing membrane\n            linear_extrude(height = 0.8) {\n                polygon(points=[\n                    [0, 0],\n                    [-15, side*10],\n                    [-25, side*8],\n                    [-30, side*5],\n                    [-25, 0],\n                    [-15, side*2],\n                    [0, 0]\n                ]);\n            }\n            // Wing fingers\n            for(j = [1:3]) {\n                translate([-j*8, side*j*3, 0]) rotate([0, 0, side*j*10])\n                    cylinder(h = 8, d = 0.8);\n            }\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([4, side*3, 2]) {\n            sphere(d = 1.5);\n            translate([0.5, 0, 0]) sphere(d = 0.8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    spikes();\n    front_legs();\n    rear_legs();\n    wings();\n    eyes();\n}",
    "renders": true
  },
  {
    "household_item": "stormserpent",
    "openscad_code": "// StormSerpent - Realistic style, medium complexity\n// Total length ~80mm, wingspan ~100mm, height ~25mm\n// 3D printable with minimal supports\n\n$fn=36;  // Smooth curves for realism\n\nmodule body_segment(r, h, taper=1) {\n    // Creates a tapered cylindrical body segment\n    cylinder(h=h, r1=r, r2=r*taper, center=true);\n}\n\nmodule serpent_body() {\n    // Main serpentine body with realistic taper\n    union() {\n        // Head segment\n        translate([0,0,10]) \n            scale([1.2,1,1]) sphere(8);\n        \n        // Neck and body segments\n        for(i=[0:9]) {\n            translate([-i*8, 0, 10 - i*1.5])\n                rotate([0, i*3, 0])\n                body_segment(r=7-i*0.5, h=8, taper=0.9);\n        }\n        \n        // Tail segments\n        for(i=[10:19]) {\n            translate([-i*7, 0, 10 - 15 - (i-10)*1.2])\n                rotate([0, 30 + i*5, 0])\n                body_segment(r=7-i*0.4, h=6, taper=0.85);\n        }\n    }\n}\n\nmodule wing_base() {\n    // Base wing structure\n    difference() {\n        // Main wing shape\n        scale([1, 3, 0.5]) sphere(12);\n        \n        // Cutout for wing membrane\n        translate([0,0,-2]) \n            scale([0.8, 2.5, 0.3]) sphere(12);\n    }\n}\n\nmodule wing_membrane() {\n    // Thin membrane between wing bones\n    difference() {\n        // Overall membrane\n        scale([1, 2.8, 0.1]) sphere(11);\n        \n        // Bone grooves\n        for(i=[-20:20:40]) {\n            rotate([0,0,i])\n                translate([0,8,0])\n                    scale([0.1, 0.5, 2]) cube([5, 15, 0.5]);\n        }\n    }\n}\n\nmodule wing() {\n    // Complete wing assembly\n    union() {\n        // Wing base\n        wing_base();\n        \n        // Wing membrane\n        translate([0,0,1]) wing_membrane();\n        \n        // Wing bones\n        for(i=[-30:30:60]) {\n            rotate([0,0,i])\n                translate([0,10,0])\n                    scale([0.3, 1, 0.3]) cylinder(h=15, r1=2, r2=1);\n        }\n    }\n}\n\nmodule head_details() {\n    // Realistic head features\n    difference() {\n        // Main head\n        sphere(8);\n        \n        // Eye sockets\n        translate([4, 3, 2]) sphere(2.5);\n        translate([4, -3, 2]) sphere(2.5);\n        \n        // Nostrils\n        translate([6, 1.5, 0]) rotate([90,0,0]) cylinder(h=3, r1=1, r2=0.5);\n        translate([6, -1.5, 0]) rotate([90,0,0]) cylinder(h=3, r1=1, r2=0.5);\n    }\n    \n    // Eyes\n    translate([5, 3, 2]) sphere(1.5);\n    translate([5, -3, 2]) sphere(1.5);\n    \n    // Horns\n    translate([0, 0, 8]) rotate([30,0,0]) cylinder(h=10, r1=2, r2=1);\n    translate([0, 4, 7]) rotate([20,30,0]) cylinder(h=8, r1=1.5, r2=0.8);\n    translate([0, -4, 7]) rotate([20,-30,0]) cylinder(h=8, r1=1.5, r2=0.8);\n}\n\nmodule dorsal_spines() {\n    // Realistic dorsal spines along back\n    for(i=[2:2:18]) {\n        translate([-i*6, 0, 10 - i*1.5 + 7])\n            rotate([15,0,0])\n            cylinder(h=6-i*0.2, r1=1.5, r2=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    serpent_body();\n    \n    // Head details\n    translate([0,0,10]) head_details();\n    \n    // Wings\n    translate([-10, 0, 15]) rotate([0,0,45]) wing();\n    translate([-10, 0, 15]) rotate([0,0,-45]) mirror([0,1,0]) wing();\n    \n    // Dorsal spines\n    dorsal_spines();\n    \n    // Legs (simplified for printing)\n    translate([-30, 8, 0]) scale([1.5,1,1]) cylinder(h=12, r1=3, r2=2);\n    translate([-30, -8, 0]) scale([1.5,1,1]) cylinder(h=12, r1=3, r2=2);\n    translate([-50, 6, 0]) scale([1.2,1,1]) cylinder(h=10, r1=2.5, r2=1.5);\n    translate([-50, -6, 0]) scale([1.2,1,1]) cylinder(h=10, r1=2.5, r2=1.5);\n}\n\n// Base platform for stability\ntranslate([0,0,-5]) cube([100,100,2], center=true);",
    "renders": true
  },
  {
    "household_item": "thornback",
    "openscad_code": "// Thornback ray (Raja clavata) – medium-complexity realistic version\n// Approx. 90 mm wingspan, printable without support (all slopes ≤ 45°)\n\n// Overall scale factor\nscale_factor = 1;\n\n// Body dimensions\nbody_l = 60 * scale_factor;\nbody_w = 45 * scale_factor;\nbody_h = 8  * scale_factor;\n\n// Wing dimensions\nwing_l = body_l * 0.9;\nwing_w = body_w * 1.5;\nwing_t = 3  * scale_factor;\n\n// Tail\ntail_l = 50 * scale_factor;\ntail_t = 4  * scale_factor;\n\n// Thorn parameters\nthorn_h = 3;\nthorn_d = 1.5;\n\nmodule thorn(h = thorn_h, d = thorn_d) {\n    cylinder(h = h, d1 = d * 0.5, d2 = d, $fn = 8);\n}\n\nmodule thorn_row(count = 8, spacing = 6, angle = 0) {\n    for (i = [0 : count - 1]) {\n        rotate([0, 0, angle])\n            translate([i * spacing, 0, 0])\n                thorn();\n    }\n}\n\n// Main body oval\nmodule body() {\n    linear_extrude(height = body_h, scale = [0.7, 0.7], convexity = 4)\n        offset(r = 2)\n            scale([1, 0.6])\n                circle(d = body_w, $fn = 60);\n}\n\n// Left wing with gentle taper for printability\nmodule left_wing() {\n    difference() {\n        hull() {\n            translate([body_l * 0.3, body_w * 0.4, 0])\n                cube([wing_l * 0.6, wing_t, wing_t], center = true);\n            translate([body_l * 0.7, body_w * 0.7, 0])\n                cube([wing_l * 0.3, wing_t, wing_t * 0.6], center = true);\n        }\n        // Cut underside angle\n        translate([body_l * 0.5, body_w * 0.6, -wing_t])\n            rotate([45, 0, 0])\n                cube([wing_l, wing_w, wing_t * 2], center = true);\n    }\n}\n\n// Tail with two dorsal fins\nmodule tail() {\n    union() {\n        // Tail stem\n        hull() {\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = tail_t, d1 = tail_t * 1.5, d2 = tail_t * 0.8, $fn = 8);\n            translate([tail_l, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = tail_t * 0.6, d1 = tail_t * 0.8, d2 = tail_t * 0.4, $fn = 8);\n        }\n        // Dorsal fins\n        for (i = [0.6, 0.8]) {\n            translate([tail_l * i, 0, tail_t * 0.7])\n                rotate([0, 0, (i == 0.6) ? 20 : -20])\n                    linear_extrude(height = tail_t * 0.5, scale = 0.3, convexity = 4)\n                        polygon(points = [[0, 0], [6, 2], [0, 4]]);\n        }\n    }\n}\n\n// Place thorns along midline and tail\nmodule dorsal_thorns() {\n    // Midline row on body\n    translate([-body_l * 0.4, 0, body_h * 0.8])\n        thorn_row(count = 7, spacing = 8);\n\n    // Tail thorns\n    for (i = [0.2 : 0.15 : 0.8]) {\n        translate([tail_l * i, 0, tail_t * 0.5])\n            thorn();\n    }\n}\n\n// Final assembly\nunion() {\n    // Body\n    translate([0, 0, body_h / 2])\n        body();\n\n    // Wings\n    translate([0, 0, body_h / 2])\n        mirror([0, 1, 0])\n            left_wing();\n\n    // Tail\n    translate([-body_l * 0.45, 0, body_h / 2])\n        rotate([0, 0, 180])\n            tail();\n\n    // Thorns\n    dorsal_thorns();\n}",
    "renders": true
  },
  {
    "household_item": "voidwyrm",
    "openscad_code": "// Voidwyrm - medium complexity realistic style\n// 3D printable with no overhangs, 80mm wingspan\n\n// Parameters for printability\nwall = 1.2;\nscale = 0.4;\n\n// Main body\nmodule body() {\n    // Central torso\n    union() {\n        // Main torso segment\n        translate([0, 0, 5])\n            scale([1, 0.6, 0.8])\n            sphere(d=20 * scale, $fn=32);\n        \n        // Neck base\n        translate([0, 8 * scale, 12 * scale])\n            rotate([30, 0, 0])\n            scale([0.6, 0.4, 1.2])\n            cylinder(d1=12 * scale, d2=8 * scale, h=15 * scale, $fn=16);\n    }\n}\n\n// Head\nmodule head() {\n    translate([0, 22 * scale, 20 * scale])\n    rotate([30, 0, 0])\n    union() {\n        // Main head\n        scale([0.8, 0.6, 1])\n            sphere(d=12 * scale, $fn=24);\n        \n        // Snout\n        translate([0, -3 * scale, 0])\n            scale([0.4, 1, 0.5])\n            sphere(d=10 * scale, $fn=16);\n        \n        // Horns\n        for(i = [-1, 1]) {\n            translate([i * 4 * scale, -2 * scale, 4 * scale])\n                rotate([0, i * -20, 45])\n                cylinder(d1=2 * scale, d2=0.5 * scale, h=6 * scale, $fn=8);\n        }\n    }\n}\n\n// Wings - printable flat against body\nmodule wings() {\n    wing_x = 20 * scale;\n    wing_z = 15 * scale;\n    \n    for(side = [-1, 1]) {\n        translate([0, 0, 10 * scale])\n        rotate([0, 0, side * 30])\n        translate([side * 10 * scale, 0, 0])\n        union() {\n            // Main wing membrane\n            linear_extrude(height=wall)\n            polygon(points=[\n                [0, 0],\n                [side * wing_x, 0],\n                [side * wing_x * 0.8, -wing_z],\n                [side * wing_x * 0.4, -wing_z * 1.2],\n                [0, -wing_z * 0.3]\n            ]);\n            \n            // Wing struts\n            for(i = [0.2, 0.4, 0.6, 0.8]) {\n                translate([side * wing_x * i, -wing_z * i * 0.8, wall/2])\n                    rotate([90, 0, 90])\n                    cylinder(d=wall, h=wing_z * 0.3, $fn=8);\n            }\n        }\n    }\n}\n\n// Legs - simple cylinders\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side * 6 * scale, 5 * scale, 2 * scale])\n            rotate([0, side * -15, 0])\n            cylinder(d=3 * scale, h=10 * scale, $fn=12);\n        \n        // Rear legs\n        translate([side * 5 * scale, -5 * scale, 2 * scale])\n            rotate([0, side * 15, 0])\n            cylinder(d=3 * scale, h=10 * scale, $fn=12);\n    }\n}\n\n// Tail segments\nmodule tail() {\n    segments = 5;\n    for(i = [0:segments-1]) {\n        translate([0, -8 * scale - i * 6 * scale, 5 * scale - i * 1 * scale])\n            scale([1 - i * 0.15, 1 - i * 0.2, 1 - i * 0.1])\n            sphere(d=15 * scale - i * 3 * scale, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "crystaldrake",
    "openscad_code": "// Crystal Drake - Medium Complexity Realistic Style\n// Wingspan ≈ 80 mm, printable without supports\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main body\nmodule body() {\n    // Central torso\n    difference() {\n        // Main torso\n        scale([1.2, 1, 1.1]) sphere(d=20 * scale_factor, $fn=32);\n        \n        // Neck cavity\n        translate([0, 10 * scale_factor, 8 * scale_factor])\n            rotate([90, 0, 0])\n            cylinder(h=15 * scale_factor, d1=8 * scale_factor, d2=12 * scale_factor, $fn=24);\n        \n        // Tail cavity\n        translate([0, -10 * scale_factor, -7 * scale_factor])\n            rotate([90, 0, 0])\n            cylinder(h=10 * scale_factor, d1=12 * scale_factor, d2=8 * scale_factor, $fn=24);\n    }\n}\n\n// Head with crystalline features\nmodule head() {\n    translate([0, 25 * scale_factor, 12 * scale_factor])\n    rotate([90, 0, 0])\n    union() {\n        // Main head\n        scale([1, 0.8, 1.2]) sphere(d=15 * scale_factor, $fn=32);\n        \n        // Snout\n        translate([0, 8 * scale_factor, 0])\n            scale([0.8, 0.6, 0.4])\n            sphere(d=10 * scale_factor, $fn=24);\n        \n        // Horns\n        for(i = [-1, 1]) {\n            translate([i * 5 * scale_factor, -2 * scale_factor, 5 * scale_factor])\n                rotate([i * 15, 0, 0])\n                cylinder(h=8 * scale_factor, d1=3 * scale_factor, d2=1 * scale_factor, $fn=8);\n        }\n        \n        // Crystal crest\n        translate([0, 0, 6 * scale_factor])\n            rotate([0, 0, 45])\n            scale([1, 0.5, 2])\n            cube([8 * scale_factor, 3 * scale_factor, 4 * scale_factor], center=true);\n    }\n}\n\n// Tail with crystal segments\nmodule tail() {\n    translate([0, -25 * scale_factor, -8 * scale_factor])\n    rotate([90, 0, 0])\n    union() {\n        // Tail segments getting smaller\n        for(i = [0:3]) {\n            translate([0, -i * 8 * scale_factor, 0])\n                scale([1 - i * 0.2, 1 - i * 0.2, 1 - i * 0.2])\n                sphere(d=12 * scale_factor - i * 3 * scale_factor, $fn=24);\n            \n            // Crystal spikes\n            if(i < 3) {\n                translate([0, -i * 8 * scale_factor - 4 * scale_factor, 0])\n                    rotate([0, 0, i * 30])\n                    scale([0.5, 0.5, 1.5])\n                    cube([6 * scale_factor, 2 * scale_factor, 3 * scale_factor], center=true);\n            }\n        }\n    }\n}\n\n// Wing structure\nmodule wing(side) {\n    mirror([side, 0, 0])\n    translate([10 * scale_factor, -5 * scale_factor, 5 * scale_factor])\n    rotate([0, -20, 90])\n    union() {\n        // Main wing membrane\n        difference() {\n            // Wing shape\n            linear_extrude(height=1 * scale_factor, convexity=10)\n                polygon(points=[\n                    [0, 0],\n                    [0, 15 * scale_factor],\n                    [5 * scale_factor, 30 * scale_factor],\n                    [15 * scale_factor, 40 * scale_factor],\n                    [30 * scale_factor, 35 * scale_factor],\n                    [35 * scale_factor, 25 * scale_factor],\n                    [30 * scale_factor, 10 * scale_factor],\n                    [15 * scale_factor, 5 * scale_factor]\n                ]);\n            \n            // Cutouts for crystal effect\n            for(i = [1:3]) {\n                translate([i * 10 * scale_factor, 15 * scale_factor, 0])\n                    circle(d=5 * scale_factor, $fn=6);\n            }\n        }\n        \n        // Wing bones\n        for(i = [0:4]) {\n            rotate([0, 0, i * 25 - 50])\n            translate([0, 0, 0.5 * scale_factor])\n                cube([30 * scale_factor, 1 * scale_factor, 1 * scale_factor]);\n        }\n        \n        // Crystal clusters\n        translate([25 * scale_factor, 30 * scale_factor, 2 * scale_factor])\n            rotate([0, 0, 45])\n            for(j = [0:2]) {\n                translate([j * 3 * scale_factor, j * 2 * scale_factor, 0])\n                    scale([1.5, 1.5, 3])\n                    cube([2 * scale_factor, 2 * scale_factor, 2 * scale_factor], center=true);\n            }\n    }\n}\n\n// Legs with claws\nmodule leg(side, front_back) {\n    translate([side * 8 * scale_factor, front_back * 10 * scale_factor, -15 * scale_factor])\n    union() {\n        // Upper leg\n        rotate([0, side * 15, 0])\n        cylinder(h=10 * scale_factor, d=4 * scale_factor, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -10 * scale_factor])\n            rotate([0, side * 15 + 30, 0])\n            cylinder(h=8 * scale_factor, d=3 * scale_factor, $fn=16);\n        \n        // Foot\n        translate([0, 0, -18 * scale_factor])\n            rotate([0, side * 15 + 30, 0])\n            scale([1.5, 0.5, 0.5])\n            sphere(d=6 * scale_factor, $fn=16);\n        \n        // Claws\n        for(i = [-1, 0, 1]) {\n            translate([i * 1.5 * scale_factor, 0, -21 * scale_factor])\n                rotate([0, 0, i * 10])\n                cylinder(h=3 * scale_factor, d1=1 * scale_factor, d2=0.5 * scale_factor, $fn=8);\n        }\n    }\n}\n\n// Assemble the crystal drake\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Legs\n    leg(1, 1);   // Front right\n    leg(-1, 1);  // Front left\n    leg(1, -1);  // Back right\n    leg(-1, -1); // Back left\n}",
    "renders": true
  },
  {
    "household_item": "nightbasilisk",
    "openscad_code": "// Realistic medium-complexity nightbasilisk\n// Wings folded for 3D-printability, all overhangs <45°\n// Overall length ≈ 80 mm\n\n$fn = 36;\n\n// Main parameters\nbody_len = 40;\nbody_wid = 20;\nbody_hgt = 22;\nhead_len = 18;\nhead_wid = 14;\nneck_len = 8;\ntail_len = 35;\nleg_len = 12;\nleg_wid = 5;\nwing_len = 30;\nwing_wid = 15;\n\nmodule body() {\n    // Torso\n    hull() {\n        translate([0, 0, body_hgt/2])\n            cube([body_len, body_wid, body_hgt], center = true);\n        translate([neck_len/2, 0, body_hgt/2+2])\n            cube([neck_len, neck_len*1.2, neck_len], center = true);\n    }\n}\n\nmodule head() {\n    // Snout\n    union() {\n        translate([body_len/2 + neck_len + head_len/2, 0, body_hgt/2])\n            cube([head_len, head_wid, head_wid*0.8], center = true);\n        // Eyes\n        for (side = [-1:1:1]) {\n            translate([body_len/2 + neck_len + head_len*0.7,\n                       side*head_wid/3,\n                       body_hgt/2 + head_wid/3])\n                sphere(d = head_wid/4);\n        }\n    }\n}\n\nmodule tail() {\n    // Segmented tail\n    for (i = [0:3]) {\n        hull() {\n            translate([-(body_len/2 + i*tail_len/4), 0, body_hgt/2 - i*2])\n                sphere(d = body_wid*(1 - i*0.2));\n            translate([-(body_len/2 + (i+1)*tail_len/4), 0, body_hgt/2 - (i+1)*2])\n                sphere(d = body_wid*(1 - (i+1)*0.2));\n        }\n    }\n}\n\nmodule legs() {\n    // Four legs\n    for (side = [-1:2:1]) {\n        // Front leg\n        translate([body_len/4, side*body_wid/2, 0])\n            rotate([0, side*10, 0])\n                cylinder(h = leg_len, d1 = leg_wid, d2 = leg_wid*0.6);\n        // Rear leg\n        translate([-body_len/4, side*body_wid/2, 0])\n            rotate([0, side*10, 0])\n                cylinder(h = leg_len, d1 = leg_wid, d2 = leg_wid*0.6);\n    }\n}\n\nmodule wings() {\n    // Folded wings against the body to avoid overhangs\n    for (side = [-1:2:1]) {\n        difference() {\n            // Main wing web\n            translate([0, side*body_wid/2, body_hgt/2])\n                rotate([-30, 0, side*20])\n                    cube([wing_len, wing_wid, 2], center = true);\n            // Wing finger gaps\n            for (j = [1:3]) {\n                translate([wing_len/2 - j*wing_len/4,\n                           side*body_wid/2 + j*wing_wid/5,\n                           body_hgt/2])\n                    rotate([-30, 0, side*20])\n                        cube([wing_len/4, wing_wid/5, 3], center = true);\n            }\n        }\n    }\n}\n\nmodule scales() {\n    // Simple dorsal ridge scales\n    for (i = [0:5]) {\n        translate([body_len/2 - i*body_len/6, 0, body_hgt/2 + 1])\n            rotate([0, 90, 0])\n                cylinder(h = 3, r1 = 2, r2 = 1);\n    }\n}\n\n// Build the nightbasilisk\nunion() {\n    body();\n    head();\n    tail();\n    legs();\n    wings();\n    scales();\n}",
    "renders": true
  },
  {
    "household_item": "seaserpent",
    "openscad_code": "// Sea Serpent - Realistic Style, Medium Complexity\n// 3D printable, ~80mm long\n\n// Overall scale factor\nscale_factor = 0.5;\n\n// Head module\nmodule head() {\n    // Main head shape\n    union() {\n        // Skull base\n        translate([0, 0, 5])\n            scale([1.2, 0.8, 0.8])\n            sphere(d=20);\n        \n        // Snout\n        translate([12, 0, 0])\n            scale([1.5, 0.7, 0.6])\n            sphere(d=15);\n        \n        // Lower jaw\n        difference() {\n            translate([5, 0, -8])\n                scale([1.3, 0.6, 0.4])\n                sphere(d=15);\n            // Mouth cavity\n            translate([8, 0, -8])\n                cube([15, 8, 5], center=true);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([5, side*6, 3])\n            sphere(d=4);\n    }\n    \n    // Horns\n    for(side = [-1, 1]) {\n        translate([0, side*8, 12])\n            rotate([0, -20, side*10])\n            cylinder(h=15, d1=6, d2=2);\n    }\n}\n\n// Body segment module\nmodule body_segment(size, rot) {\n    rotate([0, 0, rot]) {\n        scale([size, size*0.8, size*0.8])\n        sphere(d=20);\n        \n        // Dorsal fins\n        if(size > 0.7) {\n            translate([0, 0, 10])\n            rotate([0, 90, 0])\n            scale([0.3, 1, 0.5])\n            cylinder(h=15, d=15);\n        }\n    }\n}\n\n// Tail segment module\nmodule tail_segment(size, rot) {\n    rotate([0, 0, rot]) {\n        scale([size, size*0.6, size*0.6])\n        sphere(d=15);\n    }\n}\n\n// Main body\nmodule serpent() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Head\n        head();\n        \n        // Neck\n        translate([-20, 0, 0])\n            body_segment(0.9, 0);\n        \n        // Body segments with decreasing size\n        for(i = [1:8]) {\n            translate([-20 - i*15, 0, 0])\n                body_segment(0.9 - i*0.08, sin(i*30)*10);\n        }\n        \n        // Tail\n        for(i = [1:5]) {\n            translate([-140 - i*12, 0, 0])\n                tail_segment(0.3 - i*0.04, sin((i+8)*30)*15);\n        }\n        \n        // Side fins\n        for(i = [2:6]) {\n            for(side = [-1, 1]) {\n                translate([-20 - i*15, side*12, -5])\n                rotate([90, 0, 0])\n                scale([0.5, 0.3, 1])\n                cylinder(h=10, d=15);\n            }\n        }\n    }\n}\n\n// Create the serpent\nserpent();",
    "renders": true
  },
  {
    "household_item": "skyhydra",
    "openscad_code": "// SkyHydra - Realistic medium-complexity multi-head water launcher\n// 90 mm tall, 3 mm wall thickness, no overhangs >45°\n\n$fn = 36;\n\nmodule tube(h=10, r=4, wall=1.5) {\n    difference() {\n        cylinder(h=h, r=r);\n        translate([0,0,-0.1])\n            cylinder(h=h+0.2, r=r-wall);\n    }\n}\n\nmodule head() {\n    // snout\n    translate([0,0,12])\n        rotate([0,-30,0])\n            cylinder(h=12, r1=5, r2=2);\n    \n    // main reservoir\n    difference() {\n        sphere(d=24);\n        sphere(d=18);\n    }\n    \n    // connector neck\n    translate([0,0,-6])\n        tube(h=8, r=4, wall=1.5);\n    \n    // eyes\n    for(a=[-30,30])\n        rotate([0,0,a])\n            translate([8,0,10])\n                sphere(d=3);\n}\n\nmodule body() {\n    // central pump cylinder\n    difference() {\n        cylinder(h=50, r=12, center=true);\n        cylinder(h=52, r=9.5, center=true);\n    }\n    \n    // base dome\n    translate([0,0,-25])\n        difference() {\n            sphere(d=24);\n            sphere(d=20);\n        }\n    \n    // top dome\n    translate([0,0,25])\n        difference() {\n            sphere(d=24);\n            sphere(d=20);\n        }\n    \n    // stabilizing fins\n    for(a=[0:120:359])\n        rotate([0,0,a])\n            translate([12,0,0])\n                rotate([90,0,0])\n                    tube(h=20, r=2, wall=1.5);\n}\n\nmodule skyhydra() {\n    // central body\n    body();\n    \n    // five heads around rim\n    for(i=[0:4]) {\n        ang = i*72;\n        translate([0,0,25])\n            rotate([0,0,ang])\n                translate([15,0,0])\n                    rotate([0,-15,0])\n                        head();\n    }\n}\n\nskyhydra();",
    "renders": true
  },
  {
    "household_item": "shadowwyrm",
    "openscad_code": "// Shadowwyrm – medium-complexity, realistic style, 3D-printable\n// Approx. 90 mm nose-to-tail, 50 mm wingspan, 35 mm high\n\n// Parameters\n$fn = 36;\nwall = 2;     // printable wall thickness\nscale = 6;    // global scale\n\n// ---------- Body ----------\nmodule body() {\n    // Chest segment\n    translate([0,0,6*scale]) \n        scale([1,0.7,0.8]) sphere(8*scale);\n\n    // Abdomen taper\n    translate([-10*scale,0,4*scale])\n        scale([1.2,0.9,0.6]) sphere(7*scale);\n\n    // Pelvis\n    translate([-20*scale,0,3*scale])\n        scale([0.9,0.8,0.5]) sphere(6*scale);\n}\n\n// ---------- Tail ----------\nmodule tail() {\n    for(i=[0:8]) {\n        translate([-28*scale - i*3*scale, 0, 3*scale - i*0.8*scale])\n            scale([1 - i/12, 1 - i/12, 1 - i/12])\n                sphere(3*scale);\n    }\n}\n\n// ---------- Neck & Head ----------\nmodule neck_head() {\n    // Neck\n    for(i=[0:3]) {\n        translate([10*scale + i*2*scale, 0, 8*scale - i*0.5*scale])\n            scale([0.8 - i/10, 0.6, 0.7])\n                sphere(4*scale);\n    }\n\n    // Head\n    translate([18*scale, 0, 8*scale])\n        rotate([0,10,0])\n        scale([1.5,0.8,1])\n        sphere(5*scale);\n\n    // Snout\n    translate([24*scale, 0, 8*scale])\n        scale([1,0.5,0.4])\n        cylinder(h=6*scale, r1=3*scale, r2=1*scale);\n}\n\n// ---------- Wing ----------\nmodule wing(side) {\n    mirror([side,0,0]) {\n        // Root\n        translate([0, 0, 9*scale])\n            rotate([0,0,30*side])\n            scale([1,0.3,0.1])\n            sphere(6*scale);\n\n        // Membrane segments\n        for(i=[0:5]) {\n            translate([-2*scale + i*2*scale, side*8*scale + i*side*5*scale, 9*scale - i*1.5*scale]) {\n                rotate([0,-25 + i*5, side*30 - i*side*5])\n                scale([1 - i/10, 1 - i/8, wall/scale])\n                cube([10*scale, 8*scale, 1*scale], center=true);\n            }\n        }\n\n        // Claw at wing tip\n        translate([8*scale, side*14*scale, 2*scale])\n            rotate([0,90,0])\n            cylinder(h=3*scale, r1=wall, r2=0);\n    }\n}\n\n// ---------- Leg ----------\nmodule leg(pos, angle) {\n    translate(pos)\n    rotate([0,0,angle]) {\n        // Thigh\n        translate([-5*scale,0,3*scale])\n            rotate([30,0,0])\n            scale([1,1,1.2])\n            cylinder(h=6*scale, r1=3*scale, r2=2.2*scale);\n\n        // Shin\n        translate([-8*scale,0,-0.5*scale])\n            rotate([30,0,0])\n            cylinder(h=7*scale, r1=2.2*scale, r2=1.8*scale);\n\n        // Foot\n        translate([-10*scale,0,-4*scale])\n            rotate([90,0,0])\n            cylinder(h=4*scale, r1=1.8*scale, r2=1.8*scale);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    body();\n    tail();\n    neck_head();\n\n    wing(1);   // right wing\n    wing(-1);  // left wing\n\n    // Front legs\n    leg([10*scale, 4*scale, 0], 45);\n    leg([10*scale, -4*scale, 0], -45);\n\n    // Rear legs\n    leg([-15*scale, 5*scale, 0], 30);\n    leg([-15*scale, -5*scale, 0], -30);\n}",
    "renders": true
  },
  {
    "household_item": "starlizard",
    "openscad_code": "// Starlizard - Medium complexity realistic style\n// A gecko-like lizard with star-shaped scales\n\n// Main parameters\n$fn = 50;\nbody_length = 60;\nbody_height = 15;\nbody_width = 25;\nleg_length = 20;\ntail_length = 45;\nhead_length = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule star_scale(radius = 3, height = 1) {\n    // Create a 5-point star shape\n    difference() {\n        cylinder(h = height, r = radius, $fn = 5);\n        cylinder(h = height + 0.1, r = radius * 0.6, $fn = 5);\n    }\n}\n\nmodule head() {\n    // Main head shape\n    difference() {\n        // Outer head\n        scale([1.2, 1, 1]) sphere(d = head_length);\n        \n        // Eye sockets\n        translate([head_length/3, head_length/3, 0]) \n            sphere(d = head_length/3);\n        translate([head_length/3, -head_length/3, 0]) \n            sphere(d = head_length/3);\n        \n        // Mouth opening\n        translate([head_length/2, 0, -head_length/4])\n            cube([head_length/2, head_length/2, head_length/2], center = true);\n    }\n    \n    // Eyes\n    translate([head_length/2.5, head_length/3.2, 0])\n        sphere(d = 3);\n    translate([head_length/2.5, -head_length/3.2, 0])\n        sphere(d = 3);\n    \n    // Nostrils\n    translate([head_length/2, head_length/6, head_length/4])\n        cylinder(h = 2, r = 1);\n    translate([head_length/2, -head_length/6, head_length/4])\n        cylinder(h = 2, r = 1);\n}\n\nmodule body() {\n    // Main body\n    hull() {\n        translate([-body_length/3, 0, 0])\n            sphere(d = body_height * 2);\n        translate([body_length/3, 0, 0])\n            sphere(d = body_height * 1.5);\n    }\n    \n    // Add star scales along spine\n    for(i = [-body_length/3:5:body_length/3]) {\n        translate([i, 0, body_height/2 + 1])\n            rotate([0, 0, i*10])\n            star_scale(2, 1);\n    }\n}\n\nmodule limb(position, angle, is_front = false) {\n    translate(position) {\n        rotate([0, 0, angle]) {\n            // Upper leg\n            translate([0, 0, -leg_length/4])\n                cylinder(h = leg_length/2, r1 = 3, r2 = 2);\n            \n            // Lower leg\n            translate([0, 0, -leg_length*3/4])\n                rotate([15, 0, 0])\n                cylinder(h = leg_length/2, r1 = 2, r2 = 1.5);\n            \n            // Foot\n            translate([0, 0, -leg_length])\n                rotate([20, 0, 0])\n                scale([2, 1, 0.5])\n                sphere(d = 4);\n            \n            // Toes\n            for(toe = [-1, 0, 1]) {\n                translate([toe * 2, 0, -leg_length - 2])\n                    cylinder(h = 3, r = 0.5);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Main tail shape\n    for(i = [0:2:tail_length]) {\n        hull() {\n            translate([body_length/2 + i, 0, 0])\n                sphere(d = body_height * (1 - i/tail_length));\n            translate([body_length/2 + i + 2, 0, 0])\n                sphere(d = body_height * (1 - (i+2)/tail_length));\n        }\n    }\n    \n    // Add star scales along tail\n    for(i = [0:5:tail_length]) {\n        translate([body_length/2 + i, 0, body_height/2 * (1 - i/tail_length)])\n            rotate([0, 0, i*20])\n            star_scale(1.5, 0.5);\n    }\n}\n\n// Assemble the starlizard\nunion() {\n    // Main body\n    translate([0, 0, 0])\n        body();\n    \n    // Head\n    translate([-body_length/2 - head_length/2, 0, body_height/2])\n        head();\n    \n    // Tail\n    tail();\n    \n    // Legs\n    // Front legs\n    limb([body_length/3, body_width/2, 0], -30, true);\n    limb([body_length/3, -body_width/2, 0], 30, true);\n    \n    // Back legs\n    limb([-body_length/3, body_width/2, 0], -150);\n    limb([-body_length/3, -body_width/2, 0], 150);\n}\n\n// Add base for stability\ntranslate([0, 0, -leg_length - 2])\n    cube([body_length + tail_length, body_width + 10, 2], center = true);",
    "renders": true
  },
  {
    "household_item": "moonwyrm",
    "openscad_code": "// Moonwyrm – realistic, medium-complexity, 3-D-printable\n// Total length ~90 mm, height ~20 mm, printable flat on the bed\n\n// Base resolution variables\n$fn = 48;\n\n// Wall thickness for printing\nwall = 1.2;\n\n// Main body – long serpentine tube\nmodule body() {\n    // Central spline path generated by 7 control spheres\n    for(i=[0:6]) {\n        angle = i * 35;\n        radius = 35 - i * 4;\n        translate([radius * cos(angle), radius * sin(angle), 0])\n            rotate([0, 0, angle])\n            sphere(d = 12 - i * 1.1, $fn = 32);\n    }\n}\n\n// Head with snout and jaw\nmodule head() {\n    union() {\n        // Skull\n        translate([38, 0, 0])\n            scale([1.6, 1, 1])\n            sphere(d = 12);\n\n        // Snout\n        translate([45, 0, -1])\n            scale([2, 0.8, 0.7])\n            sphere(d = 7);\n\n        // Lower jaw (printable as single shell)\n        difference() {\n            translate([42, 0, -5.5])\n                scale([1.8, 0.7, 0.5])\n                sphere(d = 9);\n            translate([42, 0, -4])\n                cube([15, 10, 5], center = true);\n        }\n    }\n}\n\n// Eye cavities (sockets)\nmodule eyes() {\n    for(side=[-1, 1])\n        translate([40, side * 3.5, 2])\n            rotate([0, 90, 0])\n            cylinder(h = 3, d1 = 4, d2 = 2);\n}\n\n// Ridge plates along spine\nmodule ridges() {\n    for(i=[0:6]) {\n        angle = i * 35 + 15;\n        radius = 35 - i * 4;\n        for(j=[-1, 0, 1]) {\n            translate([radius * cos(angle) + j * 2, \n                       radius * sin(angle), \n                       5])\n                rotate([90, 0, -angle])\n                scale([1, 0.4, 0.2])\n                cylinder(h = 6, d1 = 4, d2 = 2);\n        }\n    }\n}\n\n// Tail fin – crescent moon blade\nmodule tailfin() {\n    difference() {\n        // Main crescent\n        translate([-28, 0, 0])\n            rotate([0, 90, 0])\n            scale([1.2, 1, 0.3])\n            cylinder(h = 20, d = 25);\n        // Remove inner area\n        translate([-35, 0, 0])\n            cube([20, 30, 5], center = true);\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    head();\n    ridges();\n    tailfin();\n}\n\n// Remove eye cavities\ndifference() {\n    children();\n    eyes();\n}",
    "renders": true
  },
  {
    "household_item": "sunwyrm",
    "openscad_code": "// Sunwyrm - medium complexity, realistic style\n// Wingspan ~80 mm, body ~65 mm long\n\n$fn = 32;  // Smooth curves\n\nmodule body_segment(r, h, taper = 1) {\n    // Single scaled cylinder for body segment\n    cylinder(h = h, r1 = r, r2 = r * taper, center = true);\n}\n\nmodule spine() {\n    // Central body made of 7 segments\n    union() {\n        // Head\n        translate([0, 0, 30])\n            sphere(d = 12);\n        \n        // Neck\n        translate([0, 0, 25])\n            body_segment(5, 8, 0.8);\n        \n        // Upper torso\n        translate([0, 0, 18])\n            body_segment(7, 10, 0.9);\n        \n        // Mid torso\n        translate([0, 0, 10])\n            body_segment(8, 12, 0.95);\n        \n        // Lower torso\n        translate([0, 0, 2])\n            body_segment(7, 10, 0.9);\n        \n        // Tail base\n        translate([0, 0, -6])\n            body_segment(6, 10, 0.8);\n        \n        // Tail tip\n        translate([0, 0, -14])\n            body_segment(4, 10, 0.6);\n    }\n}\n\nmodule wing() {\n    // Main wing plane\n    difference() {\n        union() {\n            // Main wing membrane\n            hull() {\n                translate([-8, 0, 0])\n                    sphere(d = 2);\n                translate([25, 0, 20])\n                    sphere(d = 1);\n                translate([35, 0, 10])\n                    sphere(d = 1);\n                translate([30, 0, -15])\n                    sphere(d = 1);\n                translate([-8, 0, 0])\n                    sphere(d = 2);\n            }\n            \n            // Leading edge finger\n            hull() {\n                translate([0, 0, 0])\n                    sphere(d = 2);\n                translate([25, 0, 15])\n                    sphere(d = 2);\n                translate([35, 0, 5])\n                    sphere(d = 1.5);\n            }\n            \n            // Second finger\n            hull() {\n                translate([0, 0, 0])\n                    sphere(d = 2);\n                translate([28, 0, 0])\n                    sphere(d = 1.5);\n                translate([30, 0, -10])\n                    sphere(d = 1);\n            }\n        }\n        \n        // Cut membrane holes for realism\n        for(i = [1:3]) {\n            translate([10 + i * 8, 0, -5 + i * 5])\n                rotate([0, 90, 0])\n                    cylinder(h = 5, r = 2, center = true);\n        }\n    }\n}\n\nmodule limb(side) {\n    // Front leg\n    translate([0, side * 10, 15]) {\n        rotate([0, 0, side * -20]) {\n            // Upper arm\n            cylinder(h = 12, r = 2.5);\n            \n            // Elbow\n            translate([0, side * 8, -8]) {\n                rotate([30, 0, 0]) {\n                    // Lower arm\n                    cylinder(h = 10, r = 2);\n                    \n                    // Hand\n                    translate([0, side * 6, -8])\n                        sphere(d = 3.5);\n                }\n            }\n        }\n    }\n    \n    // Rear leg\n    translate([0, side * 12, -3]) {\n        rotate([0, 0, side * 20]) {\n            // Thigh\n            cylinder(h = 14, r = 3);\n            \n            // Knee\n            translate([0, side * 10, -10]) {\n                rotate([45, 0, 0]) {\n                    // Shin\n                    cylinder(h = 12, r = 2.5);\n                    \n                    // Foot\n                    translate([0, side * 8, -10])\n                        sphere(d = 4);\n                }\n            }\n        }\n    }\n}\n\nmodule head_detail() {\n    // Snout\n    translate([0, 0, 35])\n        rotate([0, 0, 0])\n            scale([1.2, 1, 1.5])\n                sphere(d = 8);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([side * 4, 0, 33]) {\n            difference() {\n                sphere(d = 4);\n                translate([0, side * 2, 0])\n                    sphere(d = 2.5);\n            }\n        }\n    }\n    \n    // Horns\n    for(side = [-1, 1]) {\n        translate([side * 3, 0, 38]) {\n            rotate([0, side * 20, 0]) {\n                cylinder(h = 8, r1 = 1.5, r2 = 0.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    spine();\n    \n    // Head details\n    head_detail();\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([0, 0, 18]) {\n            rotate([0, side * 20, 0]) {\n                mirror([0, side, 0])\n                    wing();\n            }\n        }\n    }\n    \n    // Limbs\n    for(side = [-1, 1]) {\n        limb(side);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "brimstone",
    "openscad_code": "// Brimstone (sulfur crystal formation) - Realistic style, medium complexity\n// Overall dimensions: ~70mm x 50mm x 45mm\n\n$fn = 32;\n\nmodule brimstone_crystal() {\n    // Main crystal cluster base\n    difference() {\n        union() {\n            // Large central crystal\n            translate([0, 0, 10])\n            scale([1, 0.6, 2])\n            cube([30, 25, 20], center = true);\n            \n            // Side crystal 1\n            translate([-15, 8, 15])\n            rotate([0, 15, -20])\n            scale([0.7, 0.4, 1.5])\n            cube([25, 20, 18], center = true);\n            \n            // Side crystal 2\n            translate([12, -10, 12])\n            rotate([10, -10, 25])\n            scale([0.8, 0.5, 1.8])\n            cube([28, 22, 22], center = true);\n            \n            // Small front crystal\n            translate([5, 12, 8])\n            rotate([5, 20, 10])\n            scale([0.5, 0.3, 1.2])\n            cube([20, 15, 15], center = true);\n            \n            // Bottom support base\n            translate([0, 0, 2])\n            scale([1.2, 1, 0.8])\n            cube([35, 30, 8], center = true);\n        }\n        \n        // Hollow out for 3D printing (wall thickness 2mm)\n        translate([0, 0, 5])\n        scale([0.9, 0.85, 0.9])\n        cube([32, 27, 25], center = true);\n    }\n}\n\nmodule crystal_faces() {\n    // Add stepped crystal faces for realism\n    for (i = [1:4]) {\n        translate([i * 5 - 10, 0, 15 + i * 3])\n        rotate([0, i * 5, 0])\n        scale([0.3, 0.8 - i * 0.1, 0.3])\n        cube([15, 8, 8], center = true);\n    }\n    \n    for (j = [1:3]) {\n        translate([0, j * 4 - 6, 12 + j * 2])\n        rotate([j * 4, 0, 0])\n        scale([0.8 - j * 0.1, 0.3, 0.3])\n        cube([10, 12, 10], center = true);\n    }\n}\n\nmodule surface_details() {\n    // Add small surface imperfections for realism\n    for (k = [1:20]) {\n        translate([\n            rand() * 40 - 20,\n            rand() * 30 - 15,\n            rand() * 20 + 5\n        ])\n        sphere(0.8 + rand() * 1.2, $fn = 8);\n    }\n    \n    // Small cracks\n    for (m = [1:5]) {\n        translate([\n            rand() * 30 - 15,\n            rand() * 25 - 12,\n            rand() * 15 + 8\n        ])\n        rotate([90, 0, rand() * 360])\n        scale([0.2, 0.2, 3 + rand() * 4])\n        cylinder(h = 1, r = 0.5, $fn = 6);\n    }\n}\n\n// Generate the complete brimstone model\nunion() {\n    brimstone_crystal();\n    crystal_faces();\n    surface_details();\n}",
    "renders": true
  },
  {
    "household_item": "razorfang",
    "openscad_code": "// Razorfang - realistic medium complexity\n// A curved fang with serrated edges and hollow base for printing\n\n// Overall dimensions\nfang_length = 80;\nbase_diameter = 15;\ntip_diameter = 2;\n\nmodule serrated_edge(teeth, length, height) {\n    // Create serrated teeth along one edge\n    tooth_width = length / teeth;\n    for (i = [0:teeth-1]) {\n        translate([i * tooth_width, 0, 0]) {\n            // Each tooth is a triangular prism\n            polyhedron(\n                points = [\n                    [0, 0, 0],\n                    [tooth_width/2, height, 0],\n                    [tooth_width, 0, 0],\n                    [0, 0, tooth_width],\n                    [tooth_width/2, height, tooth_width],\n                    [tooth_width, 0, tooth_width]\n                ],\n                faces = [\n                    [0,1,2], [3,5,4],\n                    [0,3,4,1], [1,4,5,2],\n                    [0,2,5,3], [2,1,0]\n                ]\n            );\n        }\n    }\n}\n\nmodule fang_body() {\n    // Main curved fang body using hull of spheres\n    segments = 20;\n    radius_start = base_diameter/2;\n    radius_end = tip_diameter/2;\n    \n    // Create curved spine\n    for (i = [0:segments]) {\n        t = i / segments;\n        radius = radius_start * (1-t) + radius_end * t;\n        height = t * fang_length;\n        \n        // Apply curve - sine wave for realistic fang shape\n        x_offset = sin(t * 180) * 5;\n        y_offset = cos(t * 180) * 3;\n        \n        translate([x_offset, y_offset, height]) {\n            sphere(r = radius * (1 - t * 0.3));\n        }\n    }\n    \n    // Create hollow interior for printing\n    difference() {\n        // Outer shell\n        for (i = [0:segments-1]) {\n            t1 = i / segments;\n            t2 = (i+1) / segments;\n            \n            r1 = radius_start * (1-t1) + radius_end * t1;\n            r2 = radius_start * (1-t2) + radius_end * t2;\n            \n            h1 = t1 * fang_length;\n            h2 = t2 * fang_length;\n            \n            x1 = sin(t1 * 180) * 5;\n            y1 = cos(t1 * 180) * 3;\n            x2 = sin(t2 * 180) * 5;\n            y2 = cos(t2 * 180) * 3;\n            \n            hull() {\n                translate([x1, y1, h1]) sphere(r = r1);\n                translate([x2, y2, h2]) sphere(r = r2);\n            }\n        }\n        \n        // Inner hollow - scaled down version\n        scale([0.7, 0.7, 0.95]) {\n            for (i = [0:segments-1]) {\n                t1 = i / segments;\n                t2 = (i+1) / segments;\n                \n                r1 = radius_start * (1-t1) + radius_end * t1;\n                r2 = radius_start * (1-t2) + radius_end * t2;\n                \n                h1 = t1 * fang_length;\n                h2 = t2 * fang_length;\n                \n                x1 = sin(t1 * 180) * 5;\n                y1 = cos(t1 * 180) * 3;\n                x2 = sin(t2 * 180) * 5;\n                y2 = cos(t2 * 180) * 3;\n                \n                hull() {\n                    translate([x1, y1, h1]) sphere(r = r1);\n                    translate([x2, y2, h2]) sphere(r = r2);\n                }\n            }\n        }\n    }\n}\n\nmodule base_attachment() {\n    // Create mounting base with flat bottom\n    difference() {\n        // Outer base\n        cylinder(h = 10, r1 = base_diameter/2, r2 = base_diameter/2 + 3);\n        \n        // Inner cavity for magnet/glue\n        translate([0, 0, 5]) {\n            cylinder(h = 5, r = base_diameter/2 - 2);\n        }\n        \n        // Keying notch\n        translate([base_diameter/2 - 1, 0, 0]) {\n            cube([2, base_diameter/4, 10], center = true);\n        }\n    }\n}\n\nmodule blood_groove() {\n    // Add realistic blood grooves along fang\n    grooves = 3;\n    for (i = [1:grooves]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 0, fang_length * 0.3]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height = fang_length * 0.4, twist = 5) {\n                        difference() {\n                            circle(r = base_diameter/3);\n                            offset(r = -0.5) circle(r = base_diameter/3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the razorfang\nunion() {\n    // Main fang body\n    fang_body();\n    \n    // Base for mounting\n    translate([0, 0, 0]) {\n        base_attachment();\n    }\n    \n    // Serrated edges\n    translate([-10, 0, fang_length * 0.6]) {\n        rotate([0, 0, -30]) {\n            serrated_edge(8, 25, 2);\n        }\n    }\n    \n    mirror([1, 0, 0]) {\n        translate([-10, 0, fang_length * 0.6]) {\n            rotate([0, 0, -30]) {\n                serrated_edge(8, 25, 2);\n            }\n        }\n    }\n    \n    // Blood grooves\n    blood_groove();\n}",
    "renders": true
  },
  {
    "household_item": "venomcoil",
    "openscad_code": "// Venomcoil - Medium Complexity Realistic Style\n// 3D printable suppressor-style muzzle device\n\n// Global parameters\ncoil_diameter = 30;\ncoil_length = 80;\nwall_thickness = 2;\nthread_diameter = 14;\nthread_length = 10;\n\nmodule main_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=coil_length, d=coil_diameter, $fn=100);\n        \n        // Bore hole\n        translate([0, 0, -1])\n            cylinder(h=coil_length+2, d=thread_diameter+2, $fn=50);\n    }\n}\n\nmodule cooling_ports() {\n    port_radius = 4;\n    port_depth = 6;\n    num_ports = 8;\n    \n    for(i=[0:num_ports-1]) {\n        rotate([0, 0, i*45])\n        translate([coil_diameter/2 - port_depth/2, 0, coil_length/2])\n            rotate([90, 0, 0])\n                cylinder(h=port_depth, d=port_radius*2, $fn=20);\n    }\n}\n\nmodule venom_coils() {\n    coil_height = 3;\n    coil_width = 4;\n    num_coils = 12;\n    \n    for(i=[0:num_coils-1]) {\n        rotate([0, 0, i*30])\n        translate([coil_diameter/2 - coil_width/2, 0, i*6 + 10])\n            cube([coil_width, coil_diameter/2, coil_height], center=true);\n    }\n}\n\nmodule muzzle_brake() {\n    brake_length = 15;\n    brake_diameter = 35;\n    \n    union() {\n        // Main brake section\n        cylinder(h=brake_length, d1=coil_diameter, d2=brake_diameter, $fn=50);\n        \n        // Compensator cuts\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([brake_diameter/2 - 3, 0, brake_length/2])\n                cube([6, 2, brake_length], center=true);\n        }\n    }\n}\n\nmodule threads() {\n    thread_pitch = 1.5;\n    thread_depth = 0.5;\n    \n    difference() {\n        // Thread base\n        translate([0, 0, -thread_length])\n            cylinder(h=thread_length, d=thread_diameter, $fn=30);\n        \n        // Thread grooves (simplified)\n        for(i=[0:thread_length/thread_pitch-1]) {\n            translate([0, 0, -i*thread_pitch - thread_length])\n                cylinder(h=thread_pitch/2, d=thread_diameter - thread_depth*2, $fn=30);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    translate([0, 0, 10]) cooling_ports();\n    venom_coils();\n    translate([0, 0, coil_length]) muzzle_brake();\n    threads();\n}",
    "renders": true
  },
  {
    "household_item": "gloomserpent",
    "openscad_code": "// Gloomserpent - Medium complexity realistic style\n// 3D printable snake-like creature with subtle horror elements\n\n$fn=32;\n\n// Overall dimensions\nbody_length = 80;\nbody_diameter = 12;\n\nmodule body_segment(height, diameter, twist) {\n    // Create one segment of the serpent body\n    translate([0, 0, height/2])\n        rotate([0, 0, twist])\n        difference() {\n            // Main body cylinder\n            cylinder(h=height, d=diameter, center=true);\n            \n            // Subtle grooves for texture\n            for(i = [-1, 1]) {\n                translate([i * diameter/4, 0, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h=diameter, d=diameter/6, center=true);\n            }\n        }\n}\n\nmodule head() {\n    // Serpent head with realistic proportions\n    translate([0, 0, body_length/2 + 8])\n    rotate([0, 0, 0])\n    union() {\n        // Main head shape\n        scale([1.2, 0.8, 1.3])\n        sphere(d=body_diameter * 1.5);\n        \n        // Snout extension\n        translate([0, 0, body_diameter * 0.7])\n        scale([0.6, 0.4, 1])\n        sphere(d=body_diameter * 1.2);\n        \n        // Eye sockets\n        for(x = [-1, 1]) {\n            translate([x * body_diameter/2.5, body_diameter/2, body_diameter/2])\n            rotate([0, 90, 0])\n            cylinder(h=body_diameter/2, d=body_diameter/3, center=true);\n        }\n        \n        // Eyes\n        for(x = [-1, 1]) {\n            translate([x * body_diameter/2.5, body_diameter/2.2, body_diameter/2])\n            sphere(d=body_diameter/4);\n        }\n        \n        // Nostrils\n        for(x = [-1, 1]) {\n            translate([x * body_diameter/4, 0, body_diameter * 0.9])\n            rotate([90, 0, 0])\n            cylinder(h=body_diameter/4, d=body_diameter/8);\n        }\n    }\n}\n\nmodule tail() {\n    // Tapering tail\n    for(i = [0:4]) {\n        h = 5;\n        d = body_diameter * (1 - i*0.15);\n        translate([0, 0, -body_length/2 - i*5 - 2.5])\n        body_segment(h, d, i*5);\n    }\n    \n    // Tail tip\n    translate([0, 0, -body_length/2 - 25])\n    scale([0.3, 0.3, 1])\n    sphere(d=body_diameter * 0.8);\n}\n\nmodule spine_ridges() {\n    // Subtle spinal ridge along back\n    for(i = [0:10]) {\n        z = -body_length/2 + i * 8;\n        translate([0, -body_diameter/2 - 1, z])\n        rotate([90, 0, 0])\n        cylinder(h=body_diameter/4, d=body_diameter/6);\n    }\n}\n\nmodule belly_scales() {\n    // Scales on underside for printing support\n    for(i = [0:20]) {\n        for(j = [-1, 1]) {\n            x = j * body_diameter/3;\n            z = -body_length/2 + i * 4;\n            translate([x, body_diameter/2 - 0.5, z])\n            rotate([90, 0, 0])\n            scale([1, 0.7, 1])\n            cylinder(h=2, d=body_diameter/5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body segments with S-curve\n    for(i = [0:10]) {\n        z = -body_length/2 + i * 8;\n        x = sin(i * 15) * 5;\n        y = cos(i * 20) * 3;\n        translate([x, y, z])\n        body_segment(8, body_diameter, i * 5);\n    }\n    \n    // Head\n    head();\n    \n    // Tail\n    tail();\n    \n    // Surface details\n    spine_ridges();\n    belly_scales();\n}",
    "renders": true
  },
  {
    "household_item": "thunderdrake",
    "openscad_code": "// Thunderdrake - Realistic Style, Medium Complexity\n// Size: ~75mm wingspan, designed for 3D printing\n\n$fn = 32;  // Smooth curves for printing\n\nmodule dragon_head() {\n    // Main head shape\n    union() {\n        // Skull base\n        translate([0, 0, 5])\n        scale([1.2, 0.8, 1])\n        sphere(8);\n        \n        // Snout\n        translate([8, 0, 2])\n        scale([1.5, 0.7, 0.8])\n        sphere(6);\n        \n        // Lower jaw\n        translate([6, 0, -3])\n        difference() {\n            scale([1.3, 0.6, 0.5])\n            sphere(5);\n            translate([0, 0, -1])\n            cube([20, 10, 2], center=true);\n        }\n        \n        // Horns\n        for(i = [-1, 1]) {\n            translate([0, i*5, 8])\n            rotate([0, i*20, 0])\n            cylinder(10, 2, 1);\n            \n            translate([3, i*4, 6])\n            rotate([0, i*30, 0])\n            cylinder(8, 1.5, 0.5);\n        }\n    }\n}\n\nmodule dragon_neck() {\n    // Flexible neck with segments\n    for(i = [0:3]) {\n        translate([-i*4, 0, 10 - i*2])\n        rotate([0, 10 + i*5, 0])\n        scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1])\n        cylinder(6, 6 - i, 5 - i);\n    }\n}\n\nmodule dragon_body() {\n    // Main torso\n    union() {\n        // Chest\n        translate([-20, 0, 5])\n        scale([2, 1.2, 1.5])\n        sphere(10);\n        \n        // Abdomen\n        translate([-35, 0, 3])\n        scale([1.5, 1, 1.2])\n        sphere(8);\n        \n        // Tail segments\n        for(i = [0:6]) {\n            translate([-50 - i*8, 0, 2 - i*0.5])\n            rotate([0, -i*5, 0])\n            scale([1 - i*0.12, 1 - i*0.12, 1 - i*0.12])\n            cylinder(8, 5 - i*0.5, 4 - i*0.5);\n        }\n    }\n}\n\nmodule dragon_wing() {\n    // Main wing structure\n    translate([0, 0, 15]) {\n        // Wing arm\n        rotate([10, 0, 30])\n        cylinder(25, 3, 2);\n        \n        // Wing fingers\n        for(i = [1:3]) {\n            rotate([0, 0, i*30])\n            translate([20, 0, 0])\n            rotate([0, -20 - i*10, 0])\n            cylinder(20 + i*5, 2 - i*0.3, 1 - i*0.2);\n            \n            // Wing membrane support\n            hull() {\n                translate([0, 0, 0])\n                sphere(1);\n                translate([20 + i*5, 0, -10 - i*3])\n                sphere(1);\n            }\n        }\n        \n        // Wing membrane (simplified)\n        translate([15, 0, -5])\n        rotate([90, 0, 0])\n        scale([1, 0.5, 1])\n        cylinder(1, 30, 0);\n    }\n}\n\nmodule dragon_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-15, side*8, 0]) {\n            union() {\n                // Upper leg\n                rotate([0, -20, side*10])\n                cylinder(12, 3, 2.5);\n                \n                // Lower leg\n                translate([0, 0, -12])\n                rotate([30, 0, 0])\n                cylinder(10, 2.5, 2);\n                \n                // Foot\n                translate([0, side*2, -20])\n                rotate([90, 0, 0])\n                scale([1.5, 0.5, 1])\n                cylinder(4, 3, 0);\n                \n                // Toes\n                for(toe = [0:2]) {\n                    translate([toe*2 - 2, side*4, -20])\n                    rotate([90, 0, 0])\n                    cylinder(3, 1, 0.5);\n                }\n            }\n        }\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([-40, side*10, 0]) {\n            union() {\n                // Upper leg\n                rotate([0, 20, side*10])\n                cylinder(15, 4, 3);\n                \n                // Lower leg\n                translate([0, 0, -15])\n                rotate([45, 0, 0])\n                cylinder(12, 3, 2.5);\n                \n                // Foot\n                translate([0, side*3, -25])\n                rotate([90, 0, 0])\n                scale([2, 0.7, 1])\n                cylinder(5, 4, 0);\n            }\n        }\n    }\n}\n\nmodule dragon_spikes() {\n    // Dorsal spikes\n    for(i = [0:8]) {\n        translate([-25 - i*4, 0, 12 + i*0.5])\n        rotate([0, 10 + i*5, 0])\n        cylinder(3 + i*0.5, 2, 0.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Center the model\n    translate([25, 0, 0]) {\n        dragon_head();\n        dragon_neck();\n        dragon_body();\n        dragon_spikes();\n        dragon_legs();\n        \n        // Wings\n        translate([-20, 0, 15]) {\n            dragon_wing();\n            mirror([0, 1, 0])\n            dragon_wing();\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "frostwyrm",
    "openscad_code": "// Frostwyrm – medium-complexity realistic style\n// Scaled to fit inside 100 mm bounding box\n\n$fn = 48;\n\n// Main body\nmodule frostwyrm() {\n    union() {\n\n        // Head\n        translate([0, 0, 30])\n        rotate([0, -20, 0])\n        head();\n\n        // Neck\n        rotate([0, 20, 0])\n        neck();\n\n        // Torso\n        torso();\n\n        // Tail\n        translate([-30, 0, 5])\n        tail();\n\n        // Wings\n        translate([0, 15, 25])\n        rotate([0, 0, -30])\n        wing();\n\n        translate([0, -15, 25])\n        mirror([0, 1, 0])\n        rotate([0, 0, -30])\n        wing();\n\n        // Legs\n        translate([10, 8, 5])\n        leg();\n        translate([10, -8, 5])\n        leg();\n    }\n}\n\n// Head with snout, jaw, horns\nmodule head() {\n    union() {\n        // Skull\n        color(\"lightgray\")\n        sphere(10);\n\n        // Snout\n        translate([8, 0, 0])\n        rotate([0, -10, 0])\n        scale([1.5, 0.8, 0.8])\n        sphere(7);\n\n        // Lower jaw\n        translate([5, 0, -8])\n        rotate([30, 0, 0])\n        cube([12, 5, 3], center = true);\n\n        // Horns\n        for (a = [-45, 45]) {\n            translate([0, 0, 8])\n            rotate([0, 0, a])\n            translate([0, 7, 0])\n            rotate([30, 0, 0])\n            cylinder(h = 15, r1 = 2, r2 = 0.5);\n        }\n\n        // Eye sockets\n        difference() {\n            sphere(10);\n            for (b = [-25, 25]) {\n                translate([6, b, 2])\n                sphere(3);\n            }\n        }\n    }\n}\n\n// Neck connects head to torso\nmodule neck() {\n    color(\"gainsboro\")\n    translate([0, 0, 20])\n    rotate([0, 30, 0])\n    cylinder(h = 20, r1 = 8, r2 = 12);\n}\n\n// Central torso\nmodule torso() {\n    color(\"lightsteelblue\")\n    translate([0, 0, 10])\n    scale([1.5, 1, 1])\n    sphere(12);\n}\n\n// Segmental tail\nmodule tail() {\n    color(\"lightsteelblue\")\n    for (i = [0:4]) {\n        translate([i * -7, 0, sin(i * 15) * 3])\n        scale([1 - i * 0.12, 1 - i * 0.12, 1 - i * 0.12])\n        rotate([0, sin(i * 15) * 10, 0])\n        sphere(8 - i * 1.2);\n    }\n}\n\n// Membrane wing with finger struts\nmodule wing() {\n    color(\"azure\")\n    difference() {\n        union() {\n            // Main membrane\n            translate([5, 0, 0])\n            rotate([0, 90, 0])\n            scale([0.8, 1, 1])\n            cylinder(h = 30, r1 = 20, r2 = 5);\n\n            // Wing fingers\n            for (finger = [0:3]) {\n                rotate([0, 0, finger * 25])\n                translate([0, -5, -8])\n                cylinder(h = 25, r = 1.2);\n            }\n        }\n        // Cutouts for membrane holes\n        for (j = [1:3]) {\n            for (k = [1:3]) {\n                translate([j * 6, k * 4 - 8, 0])\n                sphere(2.5);\n            }\n        }\n    }\n}\n\n// Four-segment leg with claws\nmodule leg() {\n    color(\"lightgray\")\n    union() {\n        // Upper leg\n        translate([0, 0, 6])\n        rotate([30, 0, 0])\n        cylinder(h = 10, r = 3);\n\n        // Lower leg\n        translate([0, 0, 0])\n        rotate([60, 0, 0])\n        cylinder(h = 8, r = 2.5);\n\n        // Foot\n        translate([0, 0, -8])\n        rotate([90, 0, 0])\n        scale([2, 0.8, 1])\n        cylinder(h = 7, r = 2);\n\n        // Claws\n        for (c = [-1, 0, 1]) {\n            translate([c * 2, 0, -12])\n            rotate([0, -30, 0])\n            cylinder(h = 4, r1 = 1, r2 = 0.3);\n        }\n    }\n}\n\n// Assemble\nfrostwyrm();",
    "renders": true
  },
  {
    "household_item": "emberfang",
    "openscad_code": "// Emberfang - medium-complexity realistic style\n// Overall length ~80 mm, designed for FDM printing\n\n// Parameters\n$fn = 32;\nblade_len = 50;\nblade_w   = 12;\nblade_h   = 3;\ntang_len  = 25;\ntang_w    = 7;\ntang_h    = 5;\nguard_w   = 18;\nguard_h   = 5;\nguard_d   = 3;\npommel_r  = 8;\n\n// Blade profile module\nmodule blade_profile() {\n    hull() {\n        translate([0, -blade_w/2, 0])\n            cube([blade_len, blade_w, blade_h], center = false);\n        translate([blade_len - 8, -blade_w/4, 0])\n            cube([8, blade_w/2, blade_h], center = false);\n    }\n}\n\n// Fullers (blood grooves)\nmodule fullers() {\n    translate([blade_len * 0.3, 0, blade_h/2 - 0.5])\n        rotate([90, 0, 0])\n            cylinder(h = blade_len * 0.4, r = 1.2, $fn = 16);\n    translate([blade_len * 0.3, 0, blade_h/2 - 0.5])\n        rotate([90, 0, 0])\n            cylinder(h = blade_len * 0.35, r = 1.0, $fn = 16);\n}\n\n// Edge bevel left\nmodule edge_left() {\n    translate([blade_len * 0.2, -blade_w/2 - 2, 0])\n        rotate([0, 0, 20])\n            cube([blade_len * 0.8, 3, blade_h]);\n}\n\n// Edge bevel right\nmodule edge_right() {\n    translate([blade_len * 0.2, blade_w/2 + 2, 0])\n        rotate([0, 0, -20])\n            cube([blade_len * 0.8, 3, blade_h]);\n}\n\n// Guard\nmodule guard() {\n    translate([-guard_d/2, 0, 0])\n        cube([guard_d, guard_w, guard_h], center = true);\n    translate([-guard_d/2 - 1, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = guard_w, r = guard_d/2 + 1, center = true);\n}\n\n// Handle scales\nmodule handle_scale(side) {\n    scale([1, side, 1])\n        hull() {\n            translate([0, 0, 0])\n                sphere(r = tang_w/2 + 1.5, $fn = 16);\n            translate([0, 0, -tang_len * 0.8])\n                sphere(r = tang_w/2 + 0.5, $fn = 16);\n        }\n}\n\n// Rivets\nmodule rivets() {\n    for (z = [-tang_len * 0.3, -tang_len * 0.6]) {\n        translate([0, 0, z])\n            cylinder(h = tang_w + 3, r = 1.2, $fn = 10);\n    }\n}\n\n// Pommel\nmodule pommel() {\n    difference() {\n        sphere(r = pommel_r, $fn = 32);\n        translate([pommel_r - 2, 0, 0])\n            sphere(r = pommel_r + 1, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Blade\n    difference() {\n        union() {\n            blade_profile();\n            edge_left();\n            edge_right();\n        }\n        fullers();\n    }\n\n    // Tang\n    translate([0, 0, -tang_len])\n        cube([tang_len, tang_w, tang_h], center = false);\n\n    // Guard\n    translate([0, 0, 0])\n        guard();\n\n    // Handle\n    union() {\n        handle_scale(1);\n        handle_scale(-1);\n        rivets();\n    }\n\n    // Pommel\n    translate([0, 0, -tang_len])\n        pommel();\n}",
    "renders": true
  },
  {
    "household_item": "obsidianwyrm",
    "openscad_code": "// Obsidianwyrm - medium complexity realistic style\n// Dimensions: ~80mm long, ~40mm tall, ~60mm wingspan\n\n// Global parameters\n$fn = 24;\nbody_rad = 8;\nneck_len = 15;\nhead_len = 12;\ntail_len = 30;\nleg_h = 10;\nwing_span = 60;\nwall = 2;\n\nmodule body_segment(r, h) {\n    difference() {\n        cylinder(h=h, r1=r, r2=r*0.8);\n        translate([0,0,-1]) cylinder(h=h+2, r1=r-wall, r2=r*0.8-wall);\n    }\n}\n\nmodule head() {\n    difference() {\n        union() {\n            // Main head\n            translate([0,0,-head_len/2]) rotate([90,0,0]) cylinder(h=head_len, r1=body_rad*0.7, r2=body_rad*0.5);\n            // Snout\n            translate([0, head_len/2, 0]) rotate([0,90,0]) cylinder(h=head_len*0.6, r1=body_rad*0.4, r2=body_rad*0.3);\n        }\n        // Eye sockets\n        translate([body_rad*0.4, head_len*0.3, -head_len*0.2]) sphere(r=body_rad*0.2);\n        translate([-body_rad*0.4, head_len*0.3, -head_len*0.2]) sphere(r=body_rad*0.2);\n    }\n}\n\nmodule tail_segment(r, len, taper) {\n    difference() {\n        cylinder(h=len, r1=r, r2=r*taper);\n        translate([0,0,-1]) cylinder(h=len+2, r1=r-wall, r2=r*taper-wall);\n    }\n}\n\nmodule wing() {\n    difference() {\n        // Main wing membrane\n        hull() {\n            translate([0,0,0]) sphere(r=body_rad*0.5);\n            translate([wing_span/2, 0, 0]) sphere(r=body_rad*0.2);\n            translate([wing_span/3, 0, -wing_span/2]) sphere(r=body_rad*0.2);\n            translate([0, 0, -wing_span/3]) sphere(r=body_rad*0.3);\n        }\n        // Wing holes\n        for(i=[1:3]) {\n            translate([i*wing_span/6, 0, -i*wing_span/6]) rotate([0,45,0]) cylinder(h=wall*3, r=wall*2);\n        }\n    }\n}\n\nmodule leg() {\n    difference() {\n        union() {\n            // Upper leg\n            cylinder(h=leg_h*0.6, r=body_rad*0.4, r2=body_rad*0.3);\n            // Lower leg\n            translate([0,0,leg_h*0.6]) rotate([30,0,0]) cylinder(h=leg_h*0.4, r=body_rad*0.3, r2=body_rad*0.2);\n            // Foot\n            translate([0,0,leg_h*0.9]) rotate([90,0,0]) cylinder(h=body_rad*0.6, r=body_rad*0.2, r2=body_rad*0.3);\n        }\n        // Hollow\n        translate([0,0,-1]) cylinder(h=leg_h+2, r=body_rad*0.4-wall, r2=body_rad*0.2-wall);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body segments\n    for(i=[0:3]) {\n        translate([0, i*body_rad*1.5, 0]) body_segment(body_rad-i*1.5, body_rad*1.2);\n    }\n    \n    // Neck\n    translate([0, body_rad*1.5*4, 0]) rotate([0,15,0]) body_segment(body_rad*0.8, neck_len);\n    \n    // Head\n    translate([0, body_rad*1.5*4 + neck_len + head_len/2, body_rad*0.5]) head();\n    \n    // Tail\n    for(i=[1:5]) {\n        translate([0, -i*body_rad*1.2, -i*2]) tail_segment(body_rad-i*1.2, body_rad, 0.9);\n    }\n    \n    // Wings\n    translate([0, body_rad*1.5*1.5, body_rad*0.5]) rotate([0,0,45]) wing();\n    translate([0, body_rad*1.5*1.5, body_rad*0.5]) mirror([1,0,0]) rotate([0,0,45]) wing();\n    \n    // Legs\n    translate([body_rad*0.7, body_rad*1.5*1, -body_rad*0.5]) leg();\n    translate([-body_rad*0.7, body_rad*1.5*1, -body_rad*0.5]) leg();\n    translate([body_rad*0.7, body_rad*1.5*3, -body_rad*0.5]) leg();\n    translate([-body_rad*0.7, body_rad*1.5*3, -body_rad*0.5]) leg();\n    \n    // Horns\n    translate([body_rad*0.4, body_rad*1.5*4 + neck_len + head_len, body_rad*0.5]) \n        rotate([0,15,0]) cylinder(h=body_rad*0.8, r1=body_rad*0.2, r2=0);\n    translate([-body_rad*0.4, body_rad*1.5*4 + neck_len + head_len, body_rad*0.5]) \n        rotate([0,15,0]) cylinder(h=body_rad*0.8, r1=body_rad*0.2, r2=0);\n}",
    "renders": true
  },
  {
    "household_item": "mistwyrm",
    "openscad_code": "// Mistwyrm – medium-complexity, realistic style\n// Overall size ≈ 80 mm nose-to-tail\n\n$fn=32;               // Good resolution for printing\nbodyR = 6;            // Base radius of body segments\nsegLen = 8;           // Length of each body segment\nsegCnt = 7;           // Number of body segments\nwall = 1.2;           // Wall thickness for printing\n\n// Snout\nmodule snout() {\n    difference() {\n        union() {\n            // Main snout cone\n            cylinder(h=12, r1=bodyR*1.4, r2=bodyR*0.6, center=false);\n            // Nostrils bulge\n            translate([0,bodyR*1.3,-1])\n                sphere(r=bodyR*0.6);\n        }\n        // Nostrils holes\n        translate([bodyR*0.5,bodyR*1.3,2])\n            rotate([0,90,0])\n                cylinder(h=bodyR,r=1,$fn=12);\n        mirror([1,0,0])\n            translate([bodyR*0.5,bodyR*1.3,2])\n                rotate([0,90,0])\n                    cylinder(h=bodyR,r=1,$fn=12);\n    }\n}\n\n// Eye\nmodule eye() {\n    translate([0,bodyR*1.3,5])\n        sphere(r=2);\n}\n\n// Head\nmodule head() {\n    union() {\n        // Skull\n        difference() {\n            sphere(r=bodyR*1.4);\n            // Mouth hollow\n            translate([0,0,-bodyR*0.7])\n                cube([bodyR*2.2,bodyR*1.8,bodyR],center=true);\n        }\n        snout();\n        eye();\n        mirror([1,0,0]) eye();\n    }\n}\n\n// Spine ridge along each segment\nmodule ridge(len) {\n    for(i=[-1:1])\n        translate([0,bodyR*0.8,i*len/3])\n            cube([bodyR*0.4,bodyR*0.6,len/3],center=true);\n}\n\n// Single body segment\nmodule segment(idx) {\n    scaleFac = 1 - idx*0.06;       // Tapering\n    union() {\n        // Core body\n        difference() {\n            cylinder(h=segLen, r1=bodyR*scaleFac, r2=bodyR*scaleFac*0.92, center=false);\n            // Central hollow\n            translate([0,0,-wall])\n                cylinder(h=segLen+wall*2, r=bodyR*scaleFac-wall, r2=(bodyR*scaleFac*0.92)-wall, center=false);\n        }\n        ridge(segLen);\n    }\n}\n\n// Tail\nmodule tail() {\n    difference() {\n        // Tapered tail\n        cylinder(h=segLen*1.5, r1=bodyR*0.8, r2=0.5, center=false);\n        // Hollow\n        translate([0,0,-wall])\n            cylinder(h=segLen*1.5+wall*2, r1=bodyR*0.8-wall, r2=0.5-wall, center=false);\n    }\n}\n\n// Leg pair\nmodule legPair() {\n    // Thigh\n    translate([bodyR*0.9,0,-1])\n        rotate([90,0,0])\n            cylinder(h=bodyR*1.2, r1=bodyR*0.5, r2=bodyR*0.4);\n    // Shin\n    translate([bodyR*1.9,0,-bodyR*0.8])\n        rotate([100,0,0])\n            cylinder(h=bodyR*1.3, r1=bodyR*0.4, r2=bodyR*0.3);\n    // Foot\n    translate([bodyR*2.4,0,-bodyR*1.8])\n        rotate([0,0,0])\n            cube([bodyR*0.8,bodyR*0.5,wall*2],center=true);\n}\n\n// Full body assembly\nmodule mistwyrm() {\n    // Head\n    translate([0,0,0])\n        head();\n    // Body segments\n    for(i=[0:segCnt-1]) {\n        translate([0,0,-(i+1)*segLen])\n            segment(i);\n    }\n    // Tail\n    translate([0,0,-segCnt*segLen])\n        tail();\n    // Leg pairs (simple placement for printing)\n    translate([0,0,-segLen*1])\n        legPair();\n    mirror([1,0,0])\n        translate([0,0,-segLen*1])\n            legPair();\n    translate([0,0,-segLen*4])\n        legPair();\n    mirror([1,0,0])\n        translate([0,0,-segLen*4])\n            legPair();\n}\n\n// Render\nmistwyrm();",
    "renders": true
  },
  {
    "household_item": "ironscale",
    "openscad_code": "// Ironscale (realistic style, medium complexity)\n// Overall dimensions: ~85mm x 50mm x 12mm\n\n$fn = 36;\n\nmodule body() {\n    difference() {\n        // Main body block\n        translate([0,0,5])\n            cube([80,45,10], center=true);\n        \n        // Center hole for pivot\n        translate([0,0,0])\n            cylinder(h=12, d=6, center=true);\n        \n        // Display window\n        translate([0,0,10.1])\n            cube([25,20,0.5], center=true);\n        \n        // Battery compartment\n        translate([-25,-15,5])\n            cube([20,25,5], center=true);\n    }\n}\n\nmodule buttons() {\n    // Unit button\n    translate([30,12,11])\n        cylinder(h=2, d=8);\n    \n    // Tare button\n    translate([30,-12,11])\n        cylinder(h=2, d=8);\n    \n    // Power button\n    translate([30,0,11])\n        cylinder(h=2, d=8);\n}\n\nmodule display() {\n    // LCD screen\n    translate([0,0,10.5])\n        color(\"black\")\n        cube([22,18,0.5], center=true);\n    \n    // Inner screen\n    translate([0,0,11.1])\n        color([0.2,0.2,0.2])\n        cube([20,16,0.1], center=true);\n}\n\nmodule hook() {\n    // Hook arm\n    translate([0,0,0])\n        rotate([90,0,0])\n            cylinder(h=15, d=3);\n    \n    // Hook curve\n    translate([0,0,-15])\n        rotate([90,0,0])\n        rotate_extrude(angle=180)\n            translate([7,0,0])\n                circle(d=3);\n}\n\nmodule feet() {\n    for(pos = [[-35,-20], [35,-20], [35,20], [-35,20]]) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=3, d=6);\n    }\n}\n\nmodule grip_texture() {\n    // Side grips\n    for(i = [-1, 1]) {\n        for(y = [-20:5:20]) {\n            translate([i*39.5, y, 5])\n                rotate([0,90,0])\n                    cylinder(h=2, d=2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    buttons();\n    display();\n    hook();\n    feet();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "household_item": "goldwyrm",
    "openscad_code": "// Realistic Goldwyrm - Medium Complexity\n// 3D printable, ~80 mm long\n\n// Parameters\n$fn = 36;\nbody_d = 12;\nneck_d = 8;\nhead_d = 10;\nleg_h = 15;\nleg_w = 4;\ntail_l = 35;\nwing_span = 30;\n\n// Main body module\nmodule goldwyrm() {\n    // Head\n    translate([0, 0, head_d/2])\n    sphere(d=head_d);\n    \n    // Neck\n    translate([0, 0, head_d/2 - neck_d/4])\n    cylinder(d1=neck_d, d2=body_d, h=15);\n    \n    // Torso\n    translate([0, 0, -body_d/2])\n    for(i=[0:3]) {\n        translate([i*8, 0, 0])\n        sphere(d=body_d - i*1.5);\n    }\n    \n    // Tail segments\n    for(i=[0:5]) {\n        translate([-tail_l/2 - i*6, 0, -i*2])\n        sphere(d=body_d - i*2, $fn=20);\n    }\n    \n    // Legs\n    module leg(x, y, angle) {\n        translate([x, y, -leg_h/2])\n        rotate([angle, 0, 0])\n        union() {\n            cylinder(d=leg_w, h=leg_h);\n            translate([0, 0, -leg_h/2])\n            sphere(d=leg_w*1.2);\n        }\n    }\n    \n    leg(10, body_d/3, 30);\n    leg(10, -body_d/3, 30);\n    leg(-5, body_d/3, 30);\n    leg(-5, -body_d/3, 30);\n    \n    // Wings\n    module wing(x, y, z, side) {\n        translate([x, y, z])\n        rotate([0, side*30, 0])\n        for(i=[0:4]) {\n            translate([i*3, 0, -i*2])\n            scale([1, 0.2, 1])\n            sphere(d=wing_span/5 - i*1.5);\n        }\n    }\n    \n    wing(body_d/2, 0, body_d/2, 1);\n    wing(body_d/2, 0, body_d/2, -1);\n    \n    // Horns\n    module horn(x, y, z) {\n        translate([x, y, z])\n        rotate([30, 0, 0])\n        cylinder(d1=2, d2=0.5, h=5);\n    }\n    \n    horn(3, 3, head_d/2);\n    horn(-3, 3, head_d/2);\n    \n    // Eyes\n    translate([2, head_d/2-1, head_d/2])\n    sphere(d=1);\n    translate([-2, head_d/2-1, head_d/2])\n    sphere(d=1);\n}\n\n// Create the model\ngoldwyrm();",
    "renders": true
  },
  {
    "household_item": "silverwyrm",
    "openscad_code": "// Silverwyrm – realistic medium-complexity model\n// ~80 mm snout-to-tail, printable without supports\n\n$fn = 40;          // global smoothness\nbody_len = 80;     // total length\nseg_num = 20;      // body segments\nseg_len = body_len/seg_num;\n\nmodule body_segment(id) {\n    // taper diameter along body, slightly elliptical\n    max_d = 12;\n    min_d = 3;\n    d = max_d - (max_d - min_d)*(id/seg_num);\n    h = seg_len*1.05;      // slight overlap for union\n    // rotate so long axis is along body\n    rotate([0, 90, 0])\n        scale([1, 0.9, 1])  // elliptical cross-section\n        cylinder(h = h, d = d, center = true);\n}\n\nmodule head() {\n    // snout cylinder\n    translate([body_len/2 + 8, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 16, d1 = 10, d2 = 5, center = true);\n    \n    // eyes (spheres inset slightly)\n    eye_off = 5;\n    eye_r = 2;\n    for(side = [-1, 1])\n        translate([body_len/2 + 6, side*eye_off, eye_r*0.8])\n            sphere(r = eye_r);\n}\n\nmodule tail() {\n    // conical tail tip\n    translate([-body_len/2 - 4, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 8, d1 = 4, d2 = 0.5, center = true);\n}\n\nmodule dorsal_plates() {\n    // staggered plates along back\n    plate_w = 3;\n    plate_h = 1.5;\n    plate_l = 4;\n    for(i = [1 : 2 : seg_num-2]) {\n        pos = (i - seg_num/2)*seg_len;\n        translate([pos, 0, 5 + i*0.2])\n            rotate([0, 20*sin(i*40), 0])\n            cube([plate_l, plate_w, plate_h], center = true);\n    }\n}\n\nmodule limbs() {\n    // simple four legs\n    leg_len = 12;\n    leg_r = 2;\n    for(side = [-1, 1]) {\n        // front pair\n        translate([body_len/2 - 15, side*7, -3])\n            rotate([0, 45*side, 0])\n            cylinder(h = leg_len, r = leg_r, center = false);\n        // rear pair\n        translate([-body_len/2 + 15, side*7, -3])\n            rotate([0, -45*side, 0])\n            cylinder(h = leg_len, r = leg_r, center = false);\n    }\n}\n\n// assemble creature\nunion() {\n    // continuous body\n    for(i = [0 : seg_num-1])\n        translate([(i - seg_num/2)*seg_len, 0, 0])\n            body_segment(i);\n\n    head();\n    tail();\n    dorsal_plates();\n    limbs();\n}",
    "renders": true
  },
  {
    "household_item": "copperback",
    "openscad_code": "// Copperback (realistic style, medium complexity)\n// 3D printable beetle model with proper wall thickness\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 45;\nbody_height = 20;\n\n// Shell parameters\nshell_thickness = 2;\nsegment_count = 7;\n\n// Leg parameters\nleg_length = 20;\nleg_diameter = 3;\nleg_count = 6;\n\n// Head parameters\nhead_length = 12;\nhead_width = 18;\nhead_height = 10;\n\n// Antenna parameters\nantenna_length = 15;\nantenna_diameter = 1;\n\nmodule shell_segment(index) {\n    // Create one segment of the shell\n    segment_width = body_width * (0.8 + 0.2 * cos(index * 30));\n    segment_length = body_length / segment_count;\n    \n    translate([index * segment_length - body_length/2, 0, 0])\n        difference() {\n            // Main segment shape\n            hull() {\n                cube([segment_length * 0.9, segment_width, body_height * 0.7], center = true);\n                translate([0, 0, body_height * 0.3])\n                    cube([segment_length * 0.8, segment_width * 0.9, body_height * 0.4], center = true);\n            }\n            \n            // Hollow out the segment\n            translate([0, 0, -shell_thickness])\n                cube([segment_length * 0.85, segment_width * 0.9, body_height * 0.6], center = true);\n        }\n}\n\nmodule head() {\n    translate([-body_length/2 - head_length/2, 0, 0])\n        difference() {\n            // Main head shape\n            union() {\n                // Head body\n                hull() {\n                    cube([head_length, head_width, head_height], center = true);\n                    translate([head_length/2, 0, head_height/2])\n                        sphere(d = head_width * 0.8);\n                }\n                \n                // Mandibles\n                translate([-head_length/2 - 2, -head_width/3, -head_height/4])\n                    rotate([0, -20, 0])\n                        cube([5, 3, 5], center = true);\n                translate([-head_length/2 - 2, head_width/3, -head_height/4])\n                    rotate([0, 20, 0])\n                        cube([5, 3, 5], center = true);\n            }\n            \n            // Eye sockets\n            translate([-head_length/2 + 2, -head_width/3, head_height/4])\n                sphere(d = 5);\n            translate([-head_length/2 + 2, head_width/3, head_height/4])\n                sphere(d = 5);\n        }\n}\n\nmodule antenna(side) {\n    translate([-body_length/2 - head_length/2, side * head_width/2, head_height/3])\n        rotate([0, -20, side * 20])\n            union() {\n                // Base segment\n                cylinder(h = antenna_length/3, d = antenna_diameter * 2, $fn = 8);\n                \n                // Main antenna\n                translate([0, 0, antenna_length/3])\n                    rotate([0, 0, -20])\n                        cylinder(h = antenna_length * 2/3, d = antenna_diameter, $fn = 8);\n                \n                // Tip\n                translate([-sin(20) * antenna_length * 2/3, 0, antenna_length])\n                    sphere(d = antenna_diameter * 1.5);\n            }\n}\n\nmodule leg(side, index) {\n    // Calculate leg position\n    leg_x = -body_length/2 + index * body_length/(leg_count/2 - 1);\n    leg_y = side * (body_width/2 + 3);\n    leg_z = -body_height/2 + 3;\n    \n    translate([leg_x, leg_y, leg_z])\n        rotate([0, 0, side * (20 + index * 10)])\n            union() {\n                // Upper leg segment\n                cylinder(h = leg_length/2, d = leg_diameter, $fn = 8);\n                \n                // Lower leg segment\n                translate([0, leg_length/2 * side, 0])\n                    rotate([0, -30, 0])\n                        cylinder(h = leg_length/2, d = leg_diameter * 0.8, $fn = 8);\n                \n                // Foot\n                translate([0, leg_length * side, -leg_length/4])\n                    rotate([90, 0, 0])\n                        cylinder(h = 4, d1 = leg_diameter * 0.8, d2 = leg_diameter * 1.2, $fn = 8);\n            }\n}\n\n// Main assembly\nunion() {\n    // Create shell segments\n    for(i = [0:segment_count-1]) {\n        shell_segment(i);\n    }\n    \n    // Add head\n    head();\n    \n    // Add antennae\n    antenna(1);\n    antenna(-1);\n    \n    // Add legs\n    for(side = [-1, 1]) {\n        for(i = [0:leg_count/2-1]) {\n            leg(side, i);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "jadehydra",
    "openscad_code": "// Jadehydra - Medium complexity realistic style\n// Based on the mythical multi-headed serpent creature\n\n// Overall dimensions (mm)\ntotal_length = 80;\nbody_dia = 20;\nneck_length = 25;\nhead_size = 12;\n\n$fn = 32;  // Smooth curves for printing\n\nmodule jadehydra() {\n    // Main body - serpent-like cylinder\n    translate([0, 0, body_dia/2])\n    difference() {\n        cylinder(h=total_length - neck_length, d=body_dia, center=false);\n        // Carve underside flat for printing\n        translate([-body_dia, -body_dia, -1])\n        cube([body_dia*2, body_dia*2, 2]);\n    }\n    \n    // Neck section - tapered\n    translate([0, 0, total_length - neck_length + body_dia/2])\n    cylinder(h=neck_length, d1=body_dia*0.8, d2=body_dia*0.6, center=false);\n    \n    // Generate three heads in a fan arrangement\n    for (i = [-1, 0, 1]) {\n        rotate([0, 0, i * 30])\n        translate([sin(i*30)*neck_length/3, cos(i*30)*neck_length/3, total_length])\n        head();\n    }\n    \n    // Tail - tapering to point\n    translate([0, 0, 0])\n    cylinder(h=body_dia, d1=body_dia*0.4, d2=body_dia, center=false);\n    \n    // Scales along body\n    scales();\n}\n\nmodule head() {\n    // Main head structure\n    translate([0, 0, head_size/2])\n    difference() {\n        sphere(d=head_size);\n        \n        // Jaw cut\n        translate([0, 0, -head_size/4])\n        cube([head_size*1.2, head_size*1.2, head_size/2], center=true);\n        \n        // Eye sockets\n        translate([head_size/3, head_size/3, head_size/6])\n        sphere(d=head_size/4);\n        \n        translate([-head_size/3, head_size/3, head_size/6])\n        sphere(d=head_size/4);\n    }\n    \n    // Snout extension\n    translate([0, head_size/2, 0])\n    scale([0.8, 0.5, 0.8])\n    sphere(d=head_size);\n    \n    // Teeth - small cylinders\n    for (j = [0, 1, 2, 3]) {\n        translate([head_size/3 * (j-1.5)/2, head_size/2 + 1, -head_size/4])\n        cylinder(h=head_size/6, d=head_size/12, center=false);\n    }\n}\n\nmodule scales() {\n    // Overlapping scale pattern along body\n    for (seg = [0:5:total_length - neck_length - body_dia]) {\n        for (ang = [0:45:315]) {\n            rotate([0, 0, ang])\n            translate([body_dia/2 * 0.9, 0, seg + body_dia/2])\n            scale([0.3, 0.2, 0.1])\n            sphere(d=body_dia);\n        }\n    }\n}\n\n// Create the complete model\njadehydra();",
    "renders": true
  },
  {
    "household_item": "onyxserpent",
    "openscad_code": "// OnyxSerpent - A realistic 3D printable serpent design\n// Dimensions: ~90mm length, 25mm height\n\n// Parameters\n$fn = 32;\nbody_segments = 12;\nhead_length = 15;\nhead_width = 12;\nbody_width = 8;\ntail_width = 3;\nsegment_spacing = 6;\nscale_factor = 0.92;\n\n// Main module\nmodule onyxserpent() {\n    union() {\n        // Head - cobra-like hood\n        translate([0, 0, 5]) rotate([0, 0, 0]) head();\n        \n        // Body segments\n        for(i = [1:body_segments]) {\n            segment_scale = pow(scale_factor, i);\n            translate([i * segment_spacing, 0, 2.5 * segment_scale]) \n                scale([segment_scale, segment_scale, segment_scale])\n                body_segment(i);\n        }\n        \n        // Tail\n        translate([(body_segments + 1) * segment_spacing, 0, 1]) \n            scale([0.5, 0.5, 0.5])\n            tail();\n    }\n}\n\n// Head module with hood\nmodule head() {\n    difference() {\n        union() {\n            // Main head sphere\n            sphere(d = head_width);\n            \n            // Hood - flattened ellipsoid\n            translate([0, 0, -2]) \n                scale([1.8, 1.2, 0.4])\n                sphere(d = head_width);\n            \n            // Snout extension\n            translate([head_length/2, 0, 0]) \n                scale([0.8, 0.6, 0.5])\n                sphere(d = head_width);\n        }\n        \n        // Eye sockets\n        translate([head_length/3, head_width/3, head_width/4]) \n            sphere(d = 3);\n        translate([head_length/3, -head_width/3, head_width/4]) \n            sphere(d = 3);\n            \n        // Mouth opening\n        translate([head_length/2, 0, -head_width/4]) \n            rotate([0, 20, 0])\n            cube([head_length, head_width/2, head_width/4], center = true);\n    }\n    \n    // Eyes\n    translate([head_length/3, head_width/3, head_width/4]) \n        sphere(d = 2);\n    translate([head_length/3, -head_width/3, head_width/4]) \n        sphere(d = 2);\n}\n\n// Body segment module\nmodule body_segment(seg_num) {\n    twist = seg_num * 15;\n    \n    difference() {\n        // Main body segment\n        rotate([0, 0, twist]) \n            scale([1, 0.8, 0.6])\n            sphere(d = body_width);\n            \n        // Scale pattern - subtracted ellipsoids\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + twist]) \n                translate([body_width/4, 0, 0]) \n                    scale([0.3, 0.2, 0.1])\n                    sphere(d = body_width/2);\n        }\n    }\n    \n    // Underbelly ridge\n    translate([0, 0, -body_width/3]) \n        scale([0.3, 1, 0.1])\n        sphere(d = body_width);\n}\n\n// Tail module\nmodule tail() {\n    union() {\n        // Main tail segments\n        for(i = [0:5]) {\n            scale_factor = 1 - (i * 0.15);\n            translate([i * 4, 0, 0]) \n                scale([scale_factor, scale_factor, scale_factor])\n                sphere(d = tail_width);\n        }\n        \n        // Rattle segments\n        translate([24, 0, 0]) \n            for(j = [0:2]) {\n                scale_factor = 0.8 - (j * 0.2);\n                translate([j * 2, 0, 0]) \n                    scale([scale_factor, scale_factor, scale_factor])\n                    cylinder(h = 2, d1 = tail_width * 0.8, d2 = tail_width * 0.6);\n            }\n    }\n}\n\n// Generate the serpent\nonyxserpent();",
    "renders": true
  },
  {
    "household_item": "sapphirewyrm",
    "openscad_code": "// Sapphirewyrm - Realistic Medium Complexity\n// A crystalline dragon-like creature with sapphire blue coloring\n\n// Main parameters\nscale_factor = 0.8;\nbody_length = 80 * scale_factor;\nbody_height = 25 * scale_factor;\nwing_span = 60 * scale_factor;\nhead_size = 20 * scale_factor;\n\n// Color definitions\ncolor_sapphire = [0.1, 0.3, 0.8];\ncolor_crystal = [0.7, 0.9, 1.0];\n\n// Crystal formation module\nmodule crystal_cluster(base_size, height, count) {\n    for(i = [0:count-1]) {\n        translate([\n            (rand() - 0.5) * base_size,\n            (rand() - 0.5) * base_size,\n            0\n        ]) {\n            rotate([rand()*30, rand()*30, rand()*360]) {\n                linear_extrude(height = height * (0.5 + rand()*0.5)) {\n                    difference() {\n                        circle(d = base_size * (0.3 + rand()*0.4), $fn = 6);\n                        for(j = [0:2]) {\n                            rotate([0, 0, j*120]) {\n                                translate([0, 0, 0]) {\n                                    circle(d = base_size * 0.2, $fn = 3);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Dragon head\nmodule dragon_head() {\n    union() {\n        // Main head structure\n        color(color_sapphire) {\n            difference() {\n                sphere(d = head_size, $fn = 32);\n                // Eye sockets\n                translate([-head_size*0.3, head_size*0.3, head_size*0.2]) {\n                    sphere(d = head_size*0.3, $fn = 16);\n                }\n                translate([head_size*0.3, head_size*0.3, head_size*0.2]) {\n                    sphere(d = head_size*0.3, $fn = 16);\n                }\n            }\n            \n            // Snout\n            translate([0, head_size*0.4, -head_size*0.2]) {\n                scale([1, 1.5, 0.6]) {\n                    sphere(d = head_size*0.7, $fn = 24);\n                }\n            }\n            \n            // Horns\n            for(side = [-1, 1]) {\n                translate([side*head_size*0.4, -head_size*0.3, head_size*0.4]) {\n                    rotate([side*20, 0, side*30]) {\n                        cylinder(h = head_size*0.6, d1 = head_size*0.2, d2 = head_size*0.1, $fn = 6);\n                    }\n                }\n            }\n        }\n        \n        // Eyes (glowing crystals)\n        color(color_crystal) {\n            for(side = [-1, 1]) {\n                translate([side*head_size*0.3, head_size*0.35, head_size*0.2]) {\n                    sphere(d = head_size*0.15, $fn = 8);\n                }\n            }\n        }\n        \n        // Crystal formations on head\n        translate([0, -head_size*0.2, head_size*0.3]) {\n            crystal_cluster(head_size*0.3, head_size*0.4, 5);\n        }\n    }\n}\n\n// Dragon body\nmodule dragon_body() {\n    color(color_sapphire) {\n        // Main body segments\n        for(i = [0:4]) {\n            translate([i*body_length/5 - body_length/2, 0, -body_height/2 + sin(i*45)*body_height*0.2]) {\n                scale([1, 0.8 - i*0.1, 0.6 - i*0.05]) {\n                    sphere(d = body_height, $fn = 24);\n                }\n            }\n        }\n        \n        // Spine ridges\n        for(i = [0:8]) {\n            translate([i*body_length/8 - body_length/2, 0, body_height*0.3]) {\n                rotate([0, 0, sin(i*30)*10]) {\n                    scale([0.3, 0.1, 1]) {\n                        cube([body_height*0.5, body_height*0.2, body_height*0.3], center = true);\n                    }\n                }\n            }\n        }\n        \n        // Crystal spine\n        for(i = [0:5]) {\n            translate([i*body_length/5 - body_length/2, 0, body_height*0.4]) {\n                crystal_cluster(body_height*0.2, body_height*0.3, 3);\n            }\n        }\n    }\n}\n\n// Dragon wings\nmodule dragon_wing() {\n    color(color_sapphire) {\n        // Wing membrane structure\n        for(i = [0:3]) {\n            translate([0, 0, i*wing_span/8]) {\n                rotate([0, 0, -i*25]) {\n                    scale([1, 1 - i*0.2, 0.05]) {\n                        cylinder(h = wing_span/2, d1 = wing_span/4, d2 = wing_span/10, $fn = 3);\n                    }\n                }\n            }\n        }\n        \n        // Wing bones\n        for(i = [0:2]) {\n            translate([0, 0, 0]) {\n                rotate([0, 0, -i*30 - 15]) {\n                    cylinder(h = wing_span/2, d = wing_span/15, $fn = 6);\n                }\n            }\n        }\n        \n        // Crystal wing tips\n        translate([0, wing_span/2, wing_span/8]) {\n            crystal_cluster(wing_span*0.1, wing_span*0.15, 4);\n        }\n    }\n}\n\n// Legs\nmodule dragon_leg() {\n    color(color_sapphire) {\n        // Upper leg\n        translate([0, 0, 0]) {\n            rotate([0, 0, 0]) {\n                cylinder(h = body_height*0.8, d = body_height*0.3, $fn = 8);\n            }\n        }\n        \n        // Lower leg\n        translate([0, 0, -body_height*0.8]) {\n            rotate([0, 0, 15]) {\n                cylinder(h = body_height*0.6, d = body_height*0.25, $fn = 8);\n            }\n        }\n        \n        // Foot\n        translate([0, body_height*0.2, -body_height*1.4]) {\n            scale([1.5, 1, 0.5]) {\n                sphere(d = body_height*0.3, $fn = 8);\n            }\n            \n            // Claws\n            for(i = [-1, 0, 1]) {\n                translate([i*body_height*0.1, body_height*0.2, -body_height*0.15]) {\n                    rotate([0, 0, i*10]) {\n                        cylinder(h = body_height*0.2, d1 = body_height*0.05, d2 = 0, $fn = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail\nmodule dragon_tail() {\n    color(color_sapphire) {\n        for(i = [0:5]) {\n            translate([body_length/2 + i*body_length/10, 0, -i*body_height*0.1]) {\n                scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1]) {\n                    sphere(d = body_height*(0.8 - i*0.1), $fn = 24);\n                }\n            }\n            \n            // Tail spikes\n            translate([body_length/2 + i*body_length/10, 0, -i*body_height*0.1 + body_height*0.4]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h = body_height*0.2, d1 = body_height*0.1, d2 = 0, $fn = 4);\n                }\n            }\n        }\n        \n        // Tail crystal cluster\n        translate([body_length/2 + body_length*0.7, 0, -body_height*0.5]) {\n            crystal_cluster(body_height*0.3, body_height*0.4, 6);\n        }\n    }\n}\n\n// Assemble the dragon\nunion() {\n    // Body\n    dragon_body();\n    \n    // Head\n    translate([-body_length/2 - head_size*0.3, 0, body_height*0.3]) {\n        rotate([0, 0, -15]) {\n            dragon_head();\n        }\n    }\n    \n    // Wings - two sides\n    for(side = [-1, 1]) {\n        translate([-body_length/4, side*body_height*0.3, body_height*0.2]) {\n            rotate([0, 0, side*30]) {\n                dragon_wing();\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        for(pos = [0.3, 0.7]) {\n            translate([body_length*pos - body_length/2, side*body_height*0.5, -body_height*0.7]) {\n                rotate([side*10, 0, 0]) {\n                    dragon_leg();\n                }\n            }\n        }\n    }\n    \n    // Tail\n    dragon_tail();\n}\n\n// Base crystal formation\ntranslate([0, 0, -body_height*1.5]) {\n    crystal_cluster(body_length*0.6, body_height*0.5, 12);\n}",
    "renders": true
  },
  {
    "household_item": "rubywyrm",
    "openscad_code": "// Rubywyrm - Medium Complexity Realistic Style\n// A small dragon-like creature with ruby accents\n\n$fn = 36;  // Smooth curves\nscale_factor = 1.5;  // Overall model size\n\nmodule body_segment(height, radius, taper = 1) {\n    // Tapered cylindrical body segment\n    cylinder(h = height, r1 = radius, r2 = radius * taper, center = true);\n}\n\nmodule claw() {\n    // Three-toed claw with slight curve\n    difference() {\n        // Main claw shape\n        hull() {\n            translate([0, 0, 3]) sphere(d = 2);\n            translate([0, 0, 0]) sphere(d = 3);\n        }\n        // Remove inner material for hollowness\n        cylinder(h = 4, r = 0.8, center = false);\n    }\n}\n\nmodule foot() {\n    // Four-clawed foot\n    union() {\n        // Palm\n        translate([0, 0, 1]) cube([6, 4, 2], center = true);\n        \n        // Claws\n        for(i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([i * 1.2, 2, 1]) rotate([0, -30, 0]) claw();\n        }\n    }\n}\n\nmodule wing() {\n    // Bat-like wing with membrane\n    difference() {\n        // Wing base\n        union() {\n            // Upper arm\n            translate([0, 0, 0]) rotate([0, -30, 0]) \n                cylinder(h = 12, r1 = 2, r2 = 1);\n            \n            // Wing membrane - simplified as thin wedge\n            translate([6, 0, -2]) rotate([0, 0, 15])\n                cube([20, 0.5, 8], center = true);\n        }\n        \n        // Cut holes in wing for membrane structure\n        for(i = [0:2]) {\n            translate([8 + i * 4, 0, -1 + i * 2]) \n                cylinder(h = 2, r = 0.5);\n        }\n    }\n}\n\nmodule head() {\n    // Dragon head with horns and snout\n    union() {\n        // Main head\n        translate([0, 0, 0]) scale([1.2, 0.8, 1]) sphere(d = 10);\n        \n        // Snout\n        translate([4.5, 0, 0]) scale([1.5, 0.7, 0.7]) sphere(d = 6);\n        \n        // Horns\n        for(angle = [30, -30]) {\n            rotate([0, 0, angle]) translate([0, 5, 3]) \n                rotate([15, 0, 0]) cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n        }\n        \n        // Ruby eye\n        translate([2, 3, 2]) sphere(d = 2);\n        \n        // Nostrils\n        translate([6, 1.5, 0]) rotate([90, 0, 0]) cylinder(h = 1, r = 0.5);\n        translate([6, -1.5, 0]) rotate([90, 0, 0]) cylinder(h = 1, r = 0.5);\n    }\n}\n\nmodule tail_segment(index, segments) {\n    // Tapering tail segments\n    radius = 4 * (1 - index / segments);\n    height = 3;\n    translate([0, 0, -index * height - 15]) \n        body_segment(height, radius, 0.9);\n}\n\nmodule rubywyrm() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            translate([0, 0, 0]) body_segment(20, 5, 0.8);\n            \n            // Neck\n            translate([8, 0, 5]) rotate([30, 0, 0]) \n                body_segment(12, 3, 0.7);\n            \n            // Head\n            translate([15, 0, 10]) rotate([45, 0, 0]) head();\n            \n            // Tail segments\n            for(i = [0:7]) tail_segment(i, 8);\n            \n            // Legs\n            for(side = [-1, 1]) {\n                // Front legs\n                translate([5, side * 5, -3]) rotate([0, 15 * side, 0]) {\n                    cylinder(h = 8, r1 = 1.5, r2 = 1);\n                    translate([0, 0, -5]) foot();\n                }\n                \n                // Back legs\n                translate([-5, side * 5, -3]) rotate([0, -15 * side, 0]) {\n                    cylinder(h = 8, r1 = 1.5, r2 = 1);\n                    translate([0, 0, -5]) foot();\n                }\n            }\n            \n            // Wings\n            for(side = [-1, 1]) {\n                translate([2, side * 4, 5]) rotate([0, 0, side * 60]) \n                    wing();\n            }\n            \n            // Ruby spine accents\n            for(pos = [-8, -4, 0, 4, 8]) {\n                translate([pos, 0, 5]) sphere(d = 1.5);\n            }\n        }\n    }\n}\n\n// Generate the model\nrubywyrm();",
    "renders": true
  },
  {
    "household_item": "emeralddrake",
    "openscad_code": "// Emerald Drake - Realistic style, medium complexity\n// Wingspan ~80mm, body length ~60mm\n\n$fn = 32;\n\n// Body dimensions\nbody_len = 40;\nbody_rad = 8;\ntail_len = 25;\n\n// Head dimensions\nhead_len = 12;\nhead_rad = 6;\n\n// Wing dimensions\nwing_span = 80;\nwing_chord = 25;\nwing_thick = 2;\n\n// Leg dimensions\nleg_len = 15;\nfoot_len = 8;\n\nmodule body() {\n    // Main torso\n    translate([0, 0, 0])\n        scale([1, 0.8, 1])\n        sphere(d = body_rad * 2);\n    \n    // Tail segments\n    for(i = [1:4]) {\n        translate([body_len/2 + i*5, 0, 0])\n            scale([1 - i*0.15, 1 - i*0.2, 1 - i*0.15])\n            sphere(d = body_rad * 1.8);\n    }\n}\n\nmodule head() {\n    // Main head\n    translate([-body_len/2 - head_len/2, 0, head_rad/2])\n        scale([1.2, 0.8, 0.9])\n        sphere(d = head_rad * 2);\n    \n    // Snout\n    translate([-body_len/2 - head_len - 3, 0, head_rad/2])\n        rotate([0, 30, 0])\n        scale([0.6, 0.5, 0.5])\n        cylinder(h = 8, d1 = 6, d2 = 3);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-body_len/2 - head_len/2 - 2, side*4, head_rad])\n            sphere(d = 2);\n    }\n}\n\nmodule wings() {\n    module wing() {\n        // Main wing membrane\n        translate([0, 0, 0])\n            linear_extrude(height = wing_thick)\n            polygon(points=[\n                [0, 0],\n                [wing_chord, 0],\n                [wing_chord*0.8, wing_span/4],\n                [wing_chord*0.5, wing_span/2],\n                [wing_chord*0.2, wing_span/3],\n                [0, wing_span/6]\n            ]);\n        \n        // Wing bones\n        for(i = [0:2]) {\n            translate([wing_chord * i/3, wing_span * i/3, wing_thick/2])\n                rotate([90, 0, 0])\n                cylinder(h = wing_thick * 1.5, d = 1.5);\n        }\n    }\n    \n    // Left wing\n    translate([0, body_rad, 0])\n        rotate([0, 0, 45])\n        wing();\n    \n    // Right wing\n    translate([0, -body_rad, 0])\n        mirror([0, 1, 0])\n        rotate([0, 0, 45])\n        wing();\n}\n\nmodule legs() {\n    module leg(side) {\n        // Upper leg\n        translate([body_len/4, side*(body_rad + 2), -body_rad/2])\n            rotate([30, 0, side*15])\n            cylinder(h = leg_len/2, d = 4);\n        \n        // Lower leg\n        translate([body_len/4 + leg_len/2, side*(body_rad + 6), -body_rad/2 - 3])\n            rotate([60, 0, side*15])\n            cylinder(h = leg_len/2, d = 3);\n        \n        // Foot\n        translate([body_len/4 + leg_len, side*(body_rad + 8), -body_rad/2 - 6])\n            rotate([90, 0, side*15])\n            cube([foot_len, 3, 2]);\n    }\n    \n    leg(1);\n    leg(-1);\n}\n\nmodule spikes() {\n    // Spine spikes along back\n    for(i = [0:6]) {\n        translate([-body_len/2 + i*6, 0, body_rad])\n            rotate([0, 0, 0])\n            cylinder(h = 4, d1 = 3, d2 = 1);\n    }\n}\n\n// Assemble the dragon\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    spikes();\n}",
    "renders": true
  },
  {
    "household_item": "diamondcoil",
    "openscad_code": "// DiamondCoil.scad\n// A medium-complexity, 3D-printable diamond coil based on a helical spring\n// with diamond-shaped cross-section.  No overhangs > 45°.\n\n// ---- Parameters ----\ncoil_diam   = 40;   // mean coil diameter\nwire_h      = 4;    // diamond height (wire thickness)\nwire_w      = 4;    // diamond width\ncoil_pitch  = 6;    // vertical rise per turn\nturns       = 4.5;  // total turns\nwall        = 1;    // printable wall thickness\nfn          = 36;   // cylinder resolution\n\n// ---- Derived ----\nhelix_len   = turns * coil_pitch;\nstep_angle  = 360 / fn;\nstep_z      = coil_pitch / fn;\n\n// ---- Helper: diamond profile (no overhang) ----\nmodule diamond_profile(h=wire_h, w=wire_w) {\n    // 45° chamfered diamond extrusion\n    linear_extrude(height=0.1, center=true, convexity=2)\n        polygon(points=[\n            [-w/2, 0],\n            [0,    h/2],\n            [ w/2, 0],\n            [0,   -h/2]\n        ]);\n}\n\n// ---- Helper: one diamond segment rotated to helix tangent ----\nmodule segment(angle, z) {\n    rotate([0, 0, angle])\n        translate([coil_diam/2, 0, z])\n            rotate([90, 0, 0])           // lay diamond flat on tangent\n                diamond_profile();\n}\n\n// ---- Build coil body ----\nmodule coil() {\n    union() {\n        for (i = [0 : fn * turns - 1]) {\n            segment(i * step_angle, i * step_z);\n        }\n    }\n}\n\n// ---- End-cap cylinder (flat base for printing) ----\nmodule endcap(z_pos) {\n    translate([0, 0, z_pos])\n        cylinder(h=wall, r=coil_diam/2 + wire_w, $fn=fn);\n}\n\n// ---- Main model ----\ndifference() {\n    union() {\n        // main coil\n        coil();\n        // bottom end-cap\n        endcap(-wall);\n        // top end-cap\n        endcap(helix_len);\n    }\n\n    // Hollow out core for light weight & printability\n    cylinder(h=helix_len + 2*wall, r=coil_diam/2 - wire_w, $fn=fn);\n}\n\n// ---- Optional: small mounting hole in bottom cap ----\ntranslate([0, 0, -wall/2])\n    cylinder(h=wall+1, r=2, $fn=20);",
    "renders": true
  },
  {
    "household_item": "opalbasilisk",
    "openscad_code": "// Opal Basilisk - Realistic Style, Medium Complexity\n// Dimensions: ~80mm long, 40mm tall, 30mm wide\n\n// Body parameters\nbody_length = 60;\nbody_height = 20;\nbody_width = 25;\n\n// Head parameters\nhead_length = 25;\nhead_height = 18;\nhead_width = 18;\n\n// Tail parameters\ntail_length = 25;\ntail_segments = 8;\n\n// Leg parameters\nleg_height = 12;\nleg_width = 4;\nleg_depth = 6;\n\n// Scale parameters\nscale_size = 3;\nscale_rows = 5;\n\n// Main body module\nmodule basilisk_body() {\n    // Central torso\n    hull() {\n        translate([-body_length/4, 0, 0])\n            sphere(d=body_width);\n        translate([body_length/4, 0, 0])\n            sphere(d=body_width);\n    }\n    \n    // Back ridge\n    for(i=[-body_length/2:5:body_length/2]) {\n        translate([i, 0, body_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=body_width/3, d1=scale_size*2, d2=scale_size, $fn=6);\n    }\n}\n\n// Head module with snout and horns\nmodule basilisk_head() {\n    // Main head shape\n    translate([body_length/2 + head_length/2, 0, head_height/2])\n        scale([1.2, 1, 1])\n            sphere(d=head_width);\n    \n    // Snout\n    translate([body_length/2 + head_length, 0, head_height/2 - 2])\n        rotate([0, -15, 0])\n            cylinder(h=10, d1=8, d2=5, $fn=8);\n    \n    // Eyes (sockets)\n    translate([body_length/2 + head_length - 8, -6, head_height/2 + 2])\n        sphere(d=4);\n    translate([body_length/2 + head_length - 8, 6, head_height/2 + 2])\n        sphere(d=4);\n    \n    // Horns\n    translate([body_length/2 + head_length/2 - 5, -head_width/2, head_height])\n        rotate([0, -30, 25])\n            cylinder(h=8, d1=6, d2=3, $fn=6);\n    translate([body_length/2 + head_length/2 - 5, head_width/2, head_height])\n        rotate([0, -30, -25])\n            cylinder(h=8, d1=6, d2=3, $fn=6);\n}\n\n// Scaled tail with decreasing size\nmodule basilisk_tail() {\n    for(i=[0:tail_segments-1]) {\n        assign(t = i/tail_segments) {\n            translate([-(body_length/2 + tail_length*(t+0.2)), 0, body_height/2 - (i*2)])\n                scale([1-t*0.6, 1-t*0.6, 1-t*0.4])\n                    sphere(d=body_width*(1-t*0.5));\n        }\n    }\n}\n\n// Legs with claws\nmodule basilisk_leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n        rotate([0, 0, angle]) {\n            // Upper leg\n            translate([0, 0, leg_height/2])\n                cylinder(h=leg_height, d=leg_width, $fn=8);\n            \n            // Foot\n            translate([0, leg_depth/2, -leg_height/2])\n                cube([leg_width*1.5, leg_depth, leg_width/2], center=true);\n            \n            // Claws (3 per foot)\n            for(i=[-1:1]) {\n                translate([i*2, leg_depth/2 + 2, -leg_height/2 - 1])\n                    rotate([0, 90, 0])\n                        cylinder(h=3, d1=2, d2=1, $fn=6);\n            }\n        }\n}\n\n// Scale texture pattern\nmodule scale_texture() {\n    // Back scales\n    for(row=[0:scale_rows-1]) {\n        for(col=[-3:3]) {\n            if(abs(col) + row < scale_rows) {\n                translate([col*scale_size*1.2, 0, body_height/2 + scale_size + row*2])\n                    rotate([0, 90, 0])\n                        cylinder(h=scale_size, d1=scale_size, d2=scale_size*0.8, $fn=5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body parts\n    basilisk_body();\n    basilisk_head();\n    basilisk_tail();\n    \n    // Legs\n    // Front legs\n    basilisk_leg(body_length/4, -body_width/2 - leg_width, -30);\n    basilisk_leg(body_length/4, body_width/2 + leg_width, 30);\n    \n    // Mid legs\n    basilisk_leg(0, -body_width/2 - leg_width, -25);\n    basilisk_leg(0, body_width/2 + leg_width, 25);\n    \n    // Back legs\n    basilisk_leg(-body_length/4, -body_width/2 - leg_width, -20);\n    basilisk_leg(-body_length/4, body_width/2 + leg_width, 20);\n    \n    // Decorative scales\n    scale_texture();\n}",
    "renders": true
  },
  {
    "household_item": "garnetwyrm",
    "openscad_code": "// Garnetwyrm – medium-complexity, realistic style\n// 3D-printable, ~80 mm snout-to-tail\n// All overhangs ≤ 45°, 2 mm wall thickness\n\n$fn = 32;\n\nmodule body_shell() {\n    // Main torso – tapered ellipsoid\n    scale([1.5, 1, 1]) sphere(d = 30);\n}\n\nmodule neck_segment(h) {\n    rotate([0, 90, 0]) cylinder(h = h, d1 = 10, d2 = 6, center = true);\n}\n\nmodule head() {\n    // Snout and cranium\n    union() {\n        // elongated snout\n        translate([10, 0, 0])\n            rotate([0, -10, 0])\n            cylinder(h = 18, d1 = 12, d2 = 4, center = false);\n        // cranium\n        translate([-3, 0, 0])\n            sphere(d = 14);\n    }\n}\n\nmodule jaw() {\n    // Lower jaw – printed as separate piece or hinged flat\n    difference() {\n        translate([0, 0, -2])\n            cube([20, 7, 3], center = true);\n        // mouth cavity\n        translate([5, 0, -1.5])\n            cube([16, 8, 2.5], center = true);\n    }\n}\n\nmodule wing_finger(length) {\n    rotate([0, 90, 0])\n        cylinder(h = length, d = 2.5, center = false);\n}\n\nmodule wing() {\n    // Membranous wing supported by three fingers\n    translate([0, 25, 0]) {\n        rotate([0, 0, 30]) wing_finger(28);\n        rotate([0, 0, 0])   wing_finger(32);\n        rotate([0, 0, -30]) wing_finger(26);\n    }\n    // thin membrane – flat printable\n    translate([0, 25, -1])\n        rotate([90, 0, 0])\n        linear_extrude(height = 2)\n            polygon([[0, 0], [28*cos(30), 28*sin(30)], [32, 0], [26*cos(-30), 26*sin(-30)]]);\n}\n\nmodule tail_block(n) {\n    // Tapered tail segments, printed lying down\n    cylinder(h = 8, d = 12 - n*1.5, center = true);\n}\n\nmodule leg() {\n    // Simple digitigrade leg\n    union() {\n        translate([0, 0, 7]) rotate([0, 15, 0]) cylinder(h = 12, d = 6, center = true); // thigh\n        translate([0, 0, 0]) rotate([0, -15, 0]) cylinder(h = 10, d = 4, center = true); // shin\n        translate([0, 0, -7]) sphere(d = 4); // foot\n    }\n}\n\n// Assembly\nunion() {\n    // torso\n    color(\"darkred\") body_shell();\n\n    // neck – two segments\n    color(\"darkred\") {\n        translate([-12, 0, 12]) neck_segment(12);\n        translate([-20, 0, 18]) neck_segment(10);\n    }\n\n    // head + jaw\n    color(\"darkred\") translate([-28, 0, 22]) head();\n    color(\"darkred\") translate([-28, 0, 15]) rotate([30, 0, 0]) jaw();\n\n    // wings – flat orientation\n    color(\"maroon\") {\n        translate([-10, 0, 8]) rotate([0, 0, 90]) wing();\n        translate([-10, 0, 8]) mirror([0, 1, 0]) rotate([0, 0, 90]) wing();\n    }\n\n    // tail – 5 segments printed lying down\n    color(\"darkred\")\n        for(i = [0:4]) {\n            translate([0, 0, -18 - i*9]) tail_block(i);\n        }\n\n    // legs – printed as separate parts\n    color(\"darkred\") {\n        translate([7, 0, -12]) rotate([0, 0, 45]) leg();\n        translate([-7, 0, -12]) rotate([0, 0, -45]) leg();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "amethystserpent",
    "openscad_code": "// Amethyst Serpent - Realistic Medium Complexity\n// 3D printable, 75mm length, 25mm height\n\n$fn = 32;\n\n// Overall dimensions\nlength = 75;\nwidth = 20;\nheight = 25;\n\n// Head module\nmodule head() {\n    // Main head sphere\n    translate([0, 0, 10])\n    scale([1.2, 1, 1])\n    sphere(8);\n    \n    // Snout\n    translate([9, 0, 9])\n    scale([1.5, 0.8, 0.8])\n    sphere(5);\n    \n    // Eyes\n    translate([7, 4, 12])\n    sphere(1.5);\n    translate([7, -4, 12])\n    sphere(1.5);\n    \n    // Eye sockets (indents)\n    translate([7.5, 4, 12])\n    sphere(1);\n    translate([7.5, -4, 12])\n    sphere(1);\n    \n    // Nostrils\n    translate([10, 2, 9])\n    sphere(0.8);\n    translate([10, -2, 9])\n    sphere(0.8);\n}\n\n// Body segment module\nmodule body_segment(pos, rot, scale_factor) {\n    translate(pos)\n    rotate([0, 0, rot])\n    scale([scale_factor, scale_factor, scale_factor * 0.8])\n    sphere(6);\n}\n\n// Tail segment module\nmodule tail_segment(pos, rot, scale_factor) {\n    translate(pos)\n    rotate([0, 0, rot])\n    scale([scale_factor, scale_factor * 0.7, scale_factor * 0.7])\n    sphere(5);\n}\n\n// Scale pattern module\nmodule scales(base_pos, angle) {\n    translate(base_pos)\n    rotate([0, 0, angle])\n    for(i = [0:5]) {\n        translate([i * 2 - 5, 0, 0])\n        scale([1, 0.6, 0.3])\n        sphere(1.5);\n    }\n}\n\n// Create serpent body\nmodule serpent() {\n    // Head\n    head();\n    \n    // Body segments with decreasing size\n    for(i = [1:10]) {\n        segment_length = 6;\n        body_segment(\n            [i * segment_length, sin(i * 30) * 3, 10 - i * 0.5],\n            i * 15,\n            1 - i * 0.05\n        );\n    }\n    \n    // Tail segments\n    for(i = [11:15]) {\n        segment_length = 5;\n        tail_segment(\n            [i * segment_length + 10, sin(i * 45) * 4, 10 - i * 0.3],\n            i * 20,\n            0.5 - (i - 11) * 0.08\n        );\n    }\n    \n    // Add scales along the back\n    for(i = [2:14]) {\n        scales(\n            [i * 5, sin(i * 30) * 3, 15 - i * 0.5],\n            i * 15\n        );\n    }\n    \n    // Underside support structures for printing\n    translate([0, 0, -2])\n    cube([length, width, 2], center = true);\n}\n\n// Crystal formations\nmodule crystal(x, y, z) {\n    translate([x, y, z])\n    rotate([0, 0, 45])\n    scale([1, 1, 2])\n    cylinder(h = 3, r1 = 1.5, r2 = 0.5);\n}\n\n// Add crystals to body\nmodule crystals() {\n    for(i = [1:5]) {\n        angle = i * 72;\n        radius = 8;\n        crystal(\n            cos(angle) * radius,\n            sin(angle) * radius,\n            12\n        );\n    }\n}\n\n// Main assembly\nunion() {\n    serpent();\n    crystals();\n}",
    "renders": true
  },
  {
    "household_item": "topazhydra",
    "openscad_code": "// Topaz Hydra - Realistic Style, Medium Complexity\n// A five-headed crystalline hydra suitable for 3D printing\n\n$fn = 36;\n\n// Overall dimensions\nbody_length = 30;\nbody_width = 20;\nbody_height = 15;\nhead_size = 8;\nneck_length = 12;\nneck_radius = 3;\n\nmodule crystal_shape(size) {\n    // Create a jagged crystal-like shape\n    difference() {\n        sphere(d = size);\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([0, size * 0.3, 0])\n            cube([size * 1.2, size * 0.6, size * 1.2], center = true);\n        }\n    }\n}\n\nmodule hydra_head() {\n    // Main head structure\n    union() {\n        // Upper jaw\n        translate([0, 0, head_size * 0.3])\n        scale([1.2, 0.8, 0.6])\n        crystal_shape(head_size);\n        \n        // Lower jaw\n        translate([0, -head_size * 0.4, -head_size * 0.3])\n        scale([0.9, 0.7, 0.4])\n        crystal_shape(head_size * 0.8);\n        \n        // Snout\n        translate([head_size * 0.4, 0, 0])\n        scale([0.6, 0.5, 0.5])\n        crystal_shape(head_size * 0.6);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([head_size * 0.3, side * head_size * 0.3, head_size * 0.2])\n        sphere(d = head_size * 0.15);\n    }\n}\n\nmodule neck_segment(height, radius) {\n    // Segmented neck with crystal texture\n    union() {\n        cylinder(h = height, r1 = radius, r2 = radius * 0.8);\n        // Add crystal growths\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([radius * 1.1, 0, height * 0.5])\n            scale([0.5, 0.5, 0.5])\n            crystal_shape(radius * 0.8);\n        }\n    }\n}\n\nmodule hydra_neck(head_angle, head_rotation) {\n    // Create neck with head attached\n    rotate([0, 0, head_rotation])\n    union() {\n        // Neck segments\n        for(i = [0:3]) {\n            translate([0, 0, i * neck_length / 4])\n            neck_segment(neck_length / 4, neck_radius * (1 - i * 0.15));\n        }\n        \n        // Attach head at end\n        translate([0, 0, neck_length])\n        rotate([head_angle, 0, 0])\n        hydra_head();\n    }\n}\n\nmodule hydra_body() {\n    // Main crystalline body\n    difference() {\n        // Base body shape\n        hull() {\n            // Front segment\n            translate([body_length * 0.4, 0, body_height * 0.7])\n            scale([1, 0.8, 0.6])\n            crystal_shape(body_width * 0.8);\n            \n            // Mid segment\n            translate([0, 0, body_height * 0.5])\n            scale([1.2, 1, 0.8])\n            crystal_shape(body_width);\n            \n            // Rear segment\n            translate([-body_length * 0.4, 0, body_height * 0.4])\n            scale([0.9, 0.7, 0.5])\n            crystal_shape(body_width * 0.7);\n        }\n        \n        // Hollow for printing\n        translate([0, 0, -1])\n        scale([0.8, 0.8, 0.8])\n        cube([body_length * 1.5, body_width * 1.5, body_height * 1.5], center = true);\n    }\n    \n    // Leg stumps (four legs)\n    for(side = [-1, 1]) {\n        for(pos = [-0.3, 0.3]) {\n            translate([body_length * pos, side * body_width * 0.7, 0])\n            rotate([0, 90, 0])\n            cylinder(h = body_width * 0.6, r1 = body_width * 0.2, r2 = body_width * 0.15);\n        }\n    }\n}\n\nmodule topazhydra() {\n    union() {\n        // Main body\n        translate([0, 0, body_height * 0.5])\n        hydra_body();\n        \n        // Five necks/heads\n        for(i = [0:4]) {\n            angle = i * 72;\n            head_tilt = (i % 2 == 0) ? 20 : -10;\n            translate([body_length * 0.4, 0, body_height * 0.7])\n            rotate([0, 0, angle])\n            translate([body_width * 0.5, 0, 0])\n            rotate([0, -20, 0])\n            hydra_neck(head_tilt, 0);\n        }\n    }\n}\n\n// Generate the complete topazhydra\nrotate([0, -20, 0])\ntopazhydra();",
    "renders": true
  },
  {
    "household_item": "quartzfang",
    "openscad_code": "// Quartzfang (realistic style, medium complexity)\n// A crystalline growth with a sharp, fang-like primary spike and smaller secondary crystals\n// Designed for 3D printing: 0.4 mm walls, no steep overhangs, 65 mm tall\n\n$fn = 36;\n\n// Main module\nmodule quartzfang() {\n    union() {\n        // Central fang\n        translate([0, 0, 0]) central_fang();\n        \n        // Base cluster of smaller crystals\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n            translate([8 + sin(i*2)*2, 0, 0])\n            rotate([90 + cos(i*3)*20, 0, 0])\n            scale([0.6 + sin(i)*0.2, 0.6 + cos(i)*0.2, 0.8])\n            small_crystal();\n        }\n        \n        // Support base\n        translate([0, 0, -2])\n        cylinder(h=2, r=16, $fn=48);\n    }\n}\n\n// Main crystal fang\nmodule central_fang() {\n    difference() {\n        // Primary hexagonal pyramid\n        union() {\n            // Lower hexagonal prism\n            cylinder(h=20, r1=10, r2=8, $fn=6);\n            \n            // Upper tapered section\n            translate([0, 0, 20])\n            cylinder(h=30, r1=8, r2=2, $fn=6);\n            \n            // Very tip\n            translate([0, 0, 50])\n            cylinder(h=15, r1=2, r2=0.5, $fn=6);\n        }\n        \n        // Add some crystalline facets\n        for(i = [0:5]) {\n            rotate([0, 0, i*60 + 30])\n            translate([5, 0, 15])\n            rotate([0, 75, 0])\n            cube([20, 1, 30], center=true);\n        }\n        \n        // Hollow out center for material savings\n        translate([0, 0, 5])\n        cylinder(h=55, r=4, $fn=12);\n    }\n}\n\n// Small secondary crystal\nmodule small_crystal() {\n    difference() {\n        // Hexagonal crystal\n        union() {\n            cylinder(h=8, r1=4, r2=3, $fn=6);\n            translate([0, 0, 8])\n            cylinder(h=6, r1=3, r2=1, $fn=6);\n        }\n        \n        // Facet cuts\n        rotate([0, 45, 0])\n        cube([10, 1, 16], center=true);\n        rotate([0, -45, 0])\n        cube([10, 1, 16], center=true);\n    }\n}\n\n// Generate the model\nquartzfang();",
    "renders": true
  },
  {
    "household_item": "mercurywyrm",
    "openscad_code": "// Mercurywyrm - medium complexity realistic style\n// Total length ~80 mm, printable as single piece\n\n$fn = 36;  // Smooth curves\n\n// Body parameters\nbody_segments = 8;\nbody_length = 60;\nbody_start_rad = 5;\nbody_end_rad = 2;\n\n// Head parameters\nhead_len = 12;\nhead_rad = 6;\nmaw_rad = 4;\n\n// Leg parameters\nleg_pairs = 4;\nleg_len = 8;\nleg_rad = 1.5;\n\n// Tail parameters\ntail_len = 15;\ntail_rad = 1;\n\nmodule body_segment(idx) {\n    // Tapered cylindrical segments\n    t = idx / (body_segments - 1);\n    radius = body_start_rad * (1 - t * 0.6);\n    len = body_length / body_segments;\n    translate([idx * len, 0, 0])\n        cylinder(h = len, r1 = radius, r2 = radius * 0.9, center = true);\n}\n\nmodule head() {\n    // Metallic tear-drop head\n    difference() {\n        // Main head\n        translate([body_length + head_len/2, 0, 0])\n            scale([1.5, 1, 1])\n                sphere(r = head_rad);\n        \n        // Mouth cavity\n        translate([body_length + head_len + 1, 0, -head_rad/2])\n            rotate([0, 45, 0])\n                cylinder(h = head_rad * 2, r = maw_rad);\n        \n        // Eyes\n        for(side = [-1, 1])\n            translate([body_length + head_len * 0.7, side * head_rad * 0.7, head_rad * 0.3])\n                sphere(r = 1.2);\n    }\n    \n    // Eye pupils\n    color(\"black\")\n    for(side = [-1, 1])\n        translate([body_length + head_len * 0.7 + 0.7, side * head_rad * 0.7, head_rad * 0.3])\n            sphere(r = 0.5);\n}\n\nmodule leg(pos, angle) {\n    // Articulated legs\n    translate(pos) {\n        rotate([0, 0, angle])\n            translate([0, 0, -leg_len/2])\n                cylinder(h = leg_len, r = leg_rad, center = true);\n        \n        // Foot pad\n        translate([0, 0, -leg_len])\n            sphere(r = leg_rad * 1.5);\n    }\n}\n\nmodule tail() {\n    // Gradually tapering tail\n    hull() {\n        translate([-tail_len, 0, 0])\n            sphere(r = tail_rad);\n        translate([0, 0, 0])\n            sphere(r = body_start_rad * 0.7);\n    }\n}\n\nmodule mercurywyrm() {\n    union() {\n        // Main body\n        for(i = [0 : body_segments - 1])\n            body_segment(i);\n        \n        // Head\n        head();\n        \n        // Tail\n        tail();\n        \n        // Legs\n        for(pair = [0 : leg_pairs - 1]) {\n            x_pos = body_length * 0.2 + pair * body_length * 0.2;\n            angle = -30 + pair * 15;\n            \n            // Left leg\n            leg([x_pos, body_start_rad * 1.2, 0], angle);\n            \n            // Right leg\n            leg([x_pos, -body_start_rad * 1.2, 0], -angle);\n        }\n        \n        // Back ridges\n        for(i = [1 : body_segments - 2]) {\n            seg_len = body_length / body_segments;\n            x = i * seg_len;\n            translate([x, 0, body_start_rad * (1 - i/(body_segments - 1)) + 1])\n                cube([seg_len * 0.6, 2, 1], center = true);\n        }\n    }\n}\n\n// Generate the mercurywyrm centered for printing\ntranslate([0, 0, body_start_rad + leg_len + 2])\n    rotate([90, 0, 0])\n        mercurywyrm();",
    "renders": true
  },
  {
    "household_item": "platinumwyrm",
    "openscad_code": "// Platinumwyrm - realistic style, medium complexity\n// Total length ~80mm, printable without supports\n\n$fn = 32;  // Smooth curves for realistic look\n\n// Main body parameters\nbody_length = 60;\nbody_diameter = 12;\nneck_length = 15;\nneck_diameter = 8;\nhead_length = 18;\nhead_diameter = 10;\n\nmodule body_segment(radius, length, segments=8) {\n    // Creates a tapered segment using stacked cylinders\n    slice = length / segments;\n    for(i=[0:segments-1]) {\n        r = radius * (1 - 0.3 * i / segments);\n        translate([0, 0, i * slice]) \n            cylinder(h=slice, r1=r, r2=r * 0.9, center=true);\n    }\n}\n\nmodule tail_segment(radius, length, twist=0) {\n    // Twisted tail segment for realistic taper\n    rotate([0, 0, twist])\n        cylinder(h=length, r1=radius, r2=radius * 0.7, center=true);\n}\n\nmodule dragon_head() {\n    union() {\n        // Main head shape - elongated sphere\n        scale([1.3, 1, 1]) \n            sphere(head_diameter/2);\n        \n        // Snout extension\n        translate([head_length/2 - 3, 0, 0])\n            scale([2, 0.8, 0.8])\n                sphere(head_diameter/3);\n        \n        // Horns - curved cylinders\n        for(side=[-1, 1]) {\n            translate([-head_length/3, side * head_diameter/2, head_diameter/2]) {\n                rotate([30, 0, side * 20])\n                    cylinder(h=8, r=1.5, center=true);\n                translate([0, 0, 4])\n                    rotate([45, 0, side * 30])\n                        cylinder(h=6, r=1.2, center=true);\n            }\n        }\n        \n        // Eye sockets\n        for(side=[-1, 1]) {\n            translate([head_length/4, side * head_diameter/3, head_diameter/4])\n                sphere(2.5);\n        }\n        \n        // Jaw\n        translate([head_length/4, 0, -head_diameter/3])\n            cube([head_length/2, head_diameter/1.5, head_diameter/4], center=true);\n    }\n}\n\nmodule wing() {\n    // Main wing structure\n    difference() {\n        union() {\n            // Wing arm\n            translate([0, 0, -2])\n                cylinder(h=4, r=2, center=true);\n            \n            // Wing membrane support struts\n            for(i=[0:3]) {\n                rotate([0, 0, i * 30])\n                    translate([15, 0, 0])\n                        cube([25, 1.5, 2], center=true);\n            }\n            \n            // Membrane - thin tapered sections\n            for(i=[0:2]) {\n                rotate([0, 0, i * 30 + 15])\n                    translate([25, 0, 0])\n                        cube([20, 1, 1.5], center=true);\n            }\n        }\n        \n        // Cut membrane holes for realistic wing structure\n        for(i=[0:2]) {\n            rotate([0, 0, i * 40])\n                translate([20, 0, 0])\n                    cylinder(h=3, r=4, center=true);\n        }\n    }\n}\n\nmodule leg() {\n    // Four-part leg with claws\n    union() {\n        // Upper leg\n        translate([0, 0, 5])\n            cylinder(h=8, r=2.5, center=true);\n        \n        // Lower leg\n        translate([0, 0, -1])\n            rotate([20, 0, 0])\n                cylinder(h=10, r=2, center=true);\n        \n        // Foot\n        translate([0, 0, -7])\n            rotate([45, 0, 0])\n                cube([6, 3, 2], center=true);\n        \n        // Claws\n        for(side=[-1, 0, 1]) {\n            translate([side * 1.5, 0, -9])\n                rotate([90, 0, 0])\n                    cylinder(h=3, r=0.5, center=true);\n        }\n    }\n}\n\n// Assemble the platinumwyrm\nunion() {\n    // Main body segments\n    body_segment(body_diameter/2, body_length/3);\n    translate([body_length/3, 0, 0])\n        body_segment(body_diameter/2 * 0.9, body_length/3);\n    translate([2 * body_length/3, 0, 0])\n        body_segment(body_diameter/2 * 0.8, body_length/3);\n    \n    // Neck\n    translate([-body_length/2 - neck_length/2, 0, body_diameter/4])\n        rotate([-15, 0, 0])\n            body_segment(neck_diameter/2, neck_length);\n    \n    // Head\n    translate([-body_length/2 - neck_length - head_length/2, 0, body_diameter/3])\n        rotate([-30, 0, 0])\n            dragon_head();\n    \n    // Tail\n    translate([body_length/2 + 5, 0, 0])\n        for(i=[0:4]) {\n            translate([i * 6, 0, 0])\n                tail_segment(body_diameter/2 * (0.7 - i * 0.12), 5, i * 10);\n        }\n    \n    // Wings\n    for(side=[-1, 1]) {\n        translate([0, side * body_diameter/2, body_diameter/2])\n            rotate([0, side * 20, 0])\n                wing();\n    }\n    \n    // Legs\n    for(pos=[0.3, 0.7], side=[-1, 1]) {\n        translate([pos * body_length, side * body_diameter/2, -body_diameter/3])\n            rotate([0, 0, side * 10])\n                leg();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "celestialwyrm",
    "openscad_code": "// Celestial Wyrm - Realistic Medium Complexity\n// 3D printable celestial dragon with starfield texture\n\n// Parameters\nscale_factor = 0.5;  // Scale entire model to 50% for 3D printing\nbody_radius = 20;\nbody_length = 80;\nhead_length = 25;\nneck_length = 15;\ntail_segments = 8;\nwing_span = 70;\nleg_length = 18;\nstar_density = 0.3;\n\n// Star texture module\nmodule star_texture(radius, height) {\n    for (i = [0:10:360]) {\n        for (j = [0:15:height]) {\n            if (rands(0, 1, 1)[0] < star_density) {\n                translate([\n                    sin(i) * cos(j) * radius,\n                    cos(i) * cos(j) * radius,\n                    j - height/2\n                ]) {\n                    sphere(r=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Dragon head\nmodule dragon_head() {\n    difference() {\n        // Main head shape\n        union() {\n            // Snout\n            translate([0, 0, -5])\n                scale([1, 0.8, 1.2])\n                sphere(r=body_radius * 0.7);\n            \n            // Head base\n            translate([0, 0, 5])\n                sphere(r=body_radius * 0.8);\n        }\n        \n        // Eye sockets\n        translate([body_radius * 0.5, body_radius * 0.3, 5])\n            sphere(r=body_radius * 0.25);\n        translate([body_radius * 0.5, -body_radius * 0.3, 5])\n            sphere(r=body_radius * 0.25);\n            \n        // Nostrils\n        translate([body_radius * 0.6, body_radius * 0.2, -3])\n            rotate([0, -30, 0])\n            cylinder(r=body_radius * 0.1, h=body_radius * 0.3);\n        translate([body_radius * 0.6, -body_radius * 0.2, -3])\n            rotate([0, -30, 0])\n            cylinder(r=body_radius * 0.1, h=body_radius * 0.3);\n    }\n    \n    // Horns\n    for (i = [-30, 30]) {\n        translate([body_radius * 0.2, sin(i) * body_radius * 0.4, 8])\n            rotate([0, i, 0])\n            cylinder(r1=body_radius * 0.15, r2=0, h=body_radius * 0.8);\n    }\n}\n\n// Dragon body segment\nmodule body_segment(radius, length) {\n    difference() {\n        union() {\n            cylinder(r=radius, h=length);\n            star_texture(radius, length);\n        }\n        \n        // Ventral ridge\n        translate([0, -radius, -length/2])\n            cube([radius * 0.3, radius * 0.1, length], center=true);\n    }\n}\n\n// Dragon wing\nmodule dragon_wing() {\n    wing_thickness = 2;\n    \n    // Wing base\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(r=body_radius * 0.3, h=wing_thickness);\n    \n    // Wing membrane support\n    for (i = [0:30:120]) {\n        translate([0, 0, 0])\n            rotate([0, 90, i])\n            translate([wing_span/2, 0, 0])\n                scale([1, 0.1, 0.1])\n                cube([wing_span/2, wing_thickness, wing_thickness * 2], center=true);\n    }\n    \n    // Wing membrane\n    hull() {\n        for (i = [0:30:120]) {\n            translate([0, 0, 0])\n                rotate([0, 90, i])\n                translate([wing_span * 0.8, 0, 0])\n                    sphere(r=wing_thickness * 2);\n        }\n    }\n}\n\n// Dragon leg\nmodule dragon_leg() {\n    // Upper leg\n    translate([0, 0, leg_length/2])\n        cylinder(r=body_radius * 0.25, h=leg_length);\n    \n    // Lower leg\n    translate([0, leg_length * 0.8, leg_length/2])\n        rotate([45, 0, 0])\n        cylinder(r=body_radius * 0.2, h=leg_length * 0.7);\n    \n    // Foot\n    translate([0, leg_length * 1.3, leg_length * 0.3])\n        rotate([90, 0, 0])\n        cylinder(r=body_radius * 0.4, h=body_radius * 0.3);\n}\n\n// Main assembly\nscale(scale_factor) {\n    // Head and neck\n    translate([body_length/2 + head_length/2 + neck_length, 0, 0])\n        dragon_head();\n    \n    // Neck\n    translate([body_length/2 + neck_length/2, 0, 0])\n        rotate([0, 0, 15])\n        body_segment(body_radius * 0.7, neck_length);\n    \n    // Body\n    translate([0, 0, 0])\n        body_segment(body_radius, body_length);\n    \n    // Tail segments\n    for (i = [0:tail_segments-1]) {\n        translate([-body_length/2 - i * body_radius * 1.2, 0, 0])\n            rotate([0, 0, -i * 10])\n            body_segment(body_radius * (1 - i * 0.08), body_radius * 1.5);\n    }\n    \n    // Wings\n    translate([body_length/4, 0, body_radius * 0.8])\n        rotate([0, 0, 30])\n        dragon_wing();\n    translate([body_length/4, 0, body_radius * 0.8])\n        rotate([0, 0, -30])\n        mirror([0, 1, 0])\n        dragon_wing();\n    \n    // Legs\n    translate([body_length/3, body_radius * 0.7, -body_radius * 0.8])\n        dragon_leg();\n    translate([body_length/3, -body_radius * 0.7, -body_radius * 0.8])\n        dragon_leg();\n    translate([-body_length/3, body_radius * 0.7, -body_radius * 0.8])\n        dragon_leg();\n    translate([-body_length/3, -body_radius * 0.7, -body_radius * 0.8])\n        dragon_leg();\n}",
    "renders": true
  },
  {
    "household_item": "abyssalserpent",
    "openscad_code": "// Abyssal Serpent - Realistic medium-complexity 3D printable model\n// Dimensions: ~80mm long, ~30mm high, ~25mm wide\n\n// Parameters\n$fn = 36;\nbody_segments = 8;\nscale_factor = 0.9;\n\n// Main body module\nmodule body() {\n    union() {\n        // Head\n        translate([0, 0, 15])\n        rotate([0, 90, 0])\n        difference() {\n            union() {\n                // Main head shape\n                scale([1.2, 1, 1])\n                sphere(8);\n                // Snout extension\n                translate([8, 0, 0])\n                scale([1.5, 0.8, 0.8])\n                sphere(4);\n            }\n            // Mouth cavity\n            translate([6, 0, -2])\n            rotate([0, 0, 10])\n            cube([8, 6, 5], center=true);\n            // Eye sockets\n            translate([3, 4, 2])\n            sphere(2.5);\n            translate([3, -4, 2])\n            sphere(2.5);\n        }\n        \n        // Eyes\n        translate([3, 4.5, 2])\n        sphere(1.5);\n        translate([3, -4.5, 2])\n        sphere(1.5);\n        \n        // Body segments\n        for(i = [1:body_segments]) {\n            translate([-i * 10 * pow(scale_factor, i), 0, 15 - i * 2])\n            scale([pow(scale_factor, i), pow(scale_factor, i), pow(scale_factor, i)])\n            rotate([0, 10 * i, 0])\n            union() {\n                // Main segment\n                sphere(7);\n                \n                // Dorsal fins\n                translate([0, 0, 6])\n                rotate([30, 0, 0])\n                scale([0.5, 2, 1])\n                cylinder(h=5, r1=3, r2=1);\n                \n                // Ventral fins\n                translate([0, 0, -6])\n                rotate([-30, 0, 0])\n                scale([0.5, 2, 1])\n                cylinder(h=5, r1=3, r2=1);\n            }\n        }\n        \n        // Tail fin\n        translate([-body_segments * 10 * pow(scale_factor, body_segments) - 5, 0, 15 - body_segments * 2])\n        rotate([0, -30, 0])\n        scale([0.5, 1, 0.3])\n        union() {\n            // Upper tail lobe\n            translate([0, 0, 5])\n            rotate([45, 0, 0])\n            cylinder(h=10, r1=3, r2=0);\n            \n            // Lower tail lobe\n            translate([0, 0, -5])\n            rotate([-45, 0, 0])\n            cylinder(h=10, r1=3, r2=0);\n        }\n    }\n}\n\n// Teeth module\nmodule teeth() {\n    for(i = [0:3]) {\n        // Upper teeth\n        translate([5, 2 + i * 1.5, -1])\n        rotate([0, -20, 0])\n        cylinder(h=3, r1=0.5, r2=0);\n        \n        translate([5, -2 - i * 1.5, -1])\n        rotate([0, -20, 0])\n        cylinder(h=3, r1=0.5, r2=0);\n        \n        // Lower teeth\n        translate([5, 2 + i * 1.5, -3])\n        rotate([0, 20, 0])\n        cylinder(h=3, r1=0.5, r2=0);\n        \n        translate([5, -2 - i * 1.5, -3])\n        rotate([0, 20, 0])\n        cylinder(h=3, r1=0.5, r2=0);\n    }\n}\n\n// Gills\nmodule gills() {\n    for(i = [1:4]) {\n        translate([0, 5 + i * 1.5, 10 - i])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 1])\n        cylinder(h=2, r1=1, r2=0.5);\n        \n        translate([0, -5 - i * 1.5, 10 - i])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 1])\n        cylinder(h=2, r1=1, r2=0.5);\n    }\n}\n\n// Scale texture\nmodule scales() {\n    for(i = [0:10]) {\n        for(j = [0:5]) {\n            translate([-i * 3, sin(i) * 5 + j * 2 - 5, 15 - i * 0.5])\n            scale([0.5, 0.5, 0.2])\n            sphere(1);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        body();\n        teeth();\n        gills();\n    }\n    \n    // Hollow out for printing\n    translate([0, 0, 0])\n    scale([0.8, 0.8, 0.8])\n    body();\n}\n\n// Add scales as surface detail\n%scales();",
    "renders": true
  },
  {
    "household_item": "netherdrake",
    "openscad_code": "// Netherdrake - Medium complexity realistic style\n// Size: 80mm wingspan\n$fn=30;\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body\nmodule body() {\n    // Torso\n    translate([0, 0, 10])\n    scale([1.2, 0.8, 1.5])\n    sphere(10);\n    \n    // Neck\n    translate([0, 0, 25])\n    rotate([20, 0, 0])\n    scale([0.6, 0.6, 1.8])\n    cylinder(h=15, r1=5, r2=3);\n    \n    // Head\n    translate([0, 0, 42])\n    scale([1.2, 0.8, 1.5])\n    sphere(8);\n    \n    // Snout\n    translate([0, 0, 50])\n    rotate([30, 0, 0])\n    scale([0.8, 0.5, 2])\n    cylinder(h=8, r1=4, r2=0);\n}\n\n// Wings\nmodule wing() {\n    // Main wing membrane\n    translate([0, 0, 0])\n    rotate([0, 0, 0])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0, 0],\n        [25, 5],\n        [35, 15],\n        [40, 25],\n        [42, 35],\n        [38, 45],\n        [30, 50],\n        [20, 52],\n        [10, 50],\n        [2, 40],\n        [0, 0]\n    ]);\n    \n    // Wing bones\n    for(i=[0:4]) {\n        rotate([0, 0, i*15-30])\n        translate([20, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=30, r=1);\n    }\n}\n\n// Leg\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 0])\n    rotate([0, 30, 0])\n    scale([0.8, 0.8, 1])\n    cylinder(h=12, r=3);\n    \n    // Lower leg\n    translate([0, 0, 12])\n    rotate([0, -60, 0])\n    scale([0.7, 0.7, 1])\n    cylinder(h=10, r=2.5);\n    \n    // Foot\n    translate([0, 0, 22])\n    rotate([0, -90, 0])\n    scale([1.5, 0.5, 0.5])\n    cube([8, 3, 2]);\n}\n\n// Tail\nmodule tail() {\n    // Tail segments\n    for(i=[0:4]) {\n        translate([0, 0, -i*8-5])\n        scale([1-i*0.15, 1-i*0.15, 1])\n        rotate([0, -i*5, 0])\n        sphere(8-i*1.5);\n    }\n    \n    // Tail spikes\n    for(i=[0:6]) {\n        rotate([0, 0, i*60])\n        translate([0, 8-i, -i*5-5])\n        rotate([90, 0, 0])\n        cylinder(h=6, r1=2, r2=0);\n    }\n}\n\n// Horns\nmodule horns() {\n    // Left horn\n    translate([-6, 0, 55])\n    rotate([0, -30, -20])\n    scale([0.8, 0.8, 1])\n    cylinder(h=12, r1=2, r2=0.5);\n    \n    // Right horn\n    translate([6, 0, 55])\n    mirror([1, 0, 0])\n    rotate([0, -30, -20])\n    scale([0.8, 0.8, 1])\n    cylinder(h=12, r1=2, r2=0.5);\n}\n\n// Assembly\nscale(scale_factor)\nunion() {\n    // Main body\n    body();\n    \n    // Tail\n    translate([0, 0, 5])\n    tail();\n    \n    // Wings\n    translate([12, 0, 25])\n    rotate([0, 0, 60])\n    wing();\n    \n    translate([-12, 0, 25])\n    mirror([1, 0, 0])\n    rotate([0, 0, 60])\n    wing();\n    \n    // Legs\n    translate([5, 5, 8])\n    leg();\n    \n    translate([-5, 5, 8])\n    mirror([1, 0, 0])\n    leg();\n    \n    translate([4, -5, 8])\n    rotate([0, 0, -30])\n    leg();\n    \n    translate([-4, -5, 8])\n    mirror([1, 0, 0])\n    rotate([0, 0, -30])\n    leg();\n    \n    // Horns\n    horns();\n}",
    "renders": true
  },
  {
    "household_item": "infernowyrm",
    "openscad_code": "// Infernowyrm - medium complexity realistic style\n// Dimensions: ~80mm length, 25mm height, 20mm width\n\n// Render quality\n$fn = 36;\n\n// Main body parameters\nbody_length = 40;\nbody_width = 15;\nbody_height = 12;\n\n// Head parameters\nhead_length = 18;\nhead_width = 12;\nhead_height = 10;\n\n// Tail parameters\ntail_segments = 5;\ntail_base = 8;\ntail_tip = 2;\n\n// Leg parameters\nleg_height = 8;\nleg_width = 4;\nleg_length = 12;\n\n// Wing parameters\nwing_span = 35;\nwing_root = 10;\n\n// Horn parameters\nhorn_height = 6;\nhorn_base = 3;\n\n// Body segment module\nmodule body_segment(length, width, height, taper) {\n    hull() {\n        translate([0, 0, 0]) \n            sphere(d = width);\n        translate([length, 0, 0]) \n            sphere(d = width * taper);\n    }\n}\n\n// Head with horns\nmodule head() {\n    // Main head\n    difference() {\n        hull() {\n            sphere(d = head_width);\n            translate([head_length - 5, 0, 0]) \n                sphere(d = head_width * 0.8);\n        }\n        \n        // Eye sockets\n        translate([head_length - 8, head_width/3, head_height/3]) \n            sphere(d = 3);\n        translate([head_length - 8, -head_width/3, head_height/3]) \n            sphere(d = 3);\n        \n        // Mouth\n        translate([head_length - 2, 0, -head_height/2]) \n            cube([6, head_width * 0.8, 3]);\n    }\n    \n    // Eyes\n    translate([head_length - 8, head_width/3, head_height/3]) \n        sphere(d = 2);\n    translate([head_length - 8, -head_width/3, head_height/3]) \n        sphere(d = 2);\n    \n    // Horns\n    for(i = [-1, 1]) {\n        translate([head_length - 12, i * head_width/2, head_height/2]) {\n            rotate([0, 30 * i, 0]) {\n                cylinder(h = horn_height, d1 = horn_base, d2 = 1);\n            }\n        }\n    }\n}\n\n// Tail segments\nmodule tail() {\n    for(i = [0:tail_segments-1]) {\n        translate([-(body_length/2 + i * 6), 0, 0]) {\n            scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.15]) {\n                body_segment(6, tail_base - i, tail_base - i, 0.7);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([body_length/4 * side, body_width/2 * side, -body_height/2 - leg_height/2]) {\n        // Upper leg\n        rotate([90, 0, 0]) {\n            cylinder(h = leg_length/2, d = leg_width);\n        }\n        \n        // Lower leg\n        translate([0, leg_length/2, -leg_height/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = leg_length/2, d = leg_width * 0.8);\n            }\n        }\n        \n        // Foot\n        translate([0, leg_length, -leg_height]) {\n            cube([leg_width * 1.5, leg_width * 2, leg_width]);\n        }\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    translate([0, body_width/2 * side, body_height/4]) {\n        rotate([0, 0, 30 * side]) {\n            for(i = [0:3]) {\n                rotate([0, 0, i * 15 * side]) {\n                    translate([i * 5, 0, 0]) {\n                        scale([0.8 - i * 0.15, 1 - i * 0.2, 0.1]) {\n                            rotate([0, 0, 45 * side]) {\n                                cylinder(h = wing_span/4, d = wing_root);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Spine ridge\nmodule spine_ridge() {\n    for(i = [-body_length/2:5:body_length/2]) {\n        translate([i, 0, body_height/2 - 1]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 2, d1 = 3, d2 = 1);\n            }\n        }\n    }\n}\n\n// Assemble the infernowyrm\nunion() {\n    // Main body\n    translate([0, 0, 0]) {\n        body_segment(body_length, body_width, body_height, 0.9);\n    }\n    \n    // Head\n    translate([body_length/2 + head_length/2, 0, body_height/4]) {\n        head();\n    }\n    \n    // Tail\n    translate([body_length/2, 0, 0]) {\n        tail();\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        leg(side);\n        translate([-body_length/4 * side, 0, 0]) {\n            leg(side);\n        }\n    }\n    \n    // Wings\n    for(side = [-1, 1]) {\n        wing(side);\n    }\n    \n    // Spine ridge\n    spine_ridge();\n}",
    "renders": true
  },
  {
    "household_item": "glacialhydra",
    "openscad_code": "// Glacial Hydra - Realistic Style, Medium Complexity\n// Multi-headed ice dragon with crystalline features\n\n$fn = 32;\n\n// Main body parameters\nbody_length = 40;\nbody_height = 25;\nbody_width = 20;\n\n// Head parameters\nhead_radius = 8;\nneck_length = 15;\nneck_radius = 4;\n\n// Limb parameters\nleg_length = 20;\nleg_radius = 3;\narm_length = 15;\narm_radius = 2.5;\n\n// Tail parameters\ntail_length = 30;\ntail_segments = 5;\n\n// Ice crystal spikes\ncrystal_height = 8;\ncrystal_base = 4;\n\nmodule hydra_body() {\n    // Main torso\n    translate([0, 0, body_height/2])\n        scale([1, 0.8, 0.6])\n        sphere(d=body_width);\n    \n    // Chest plate\n    translate([0, body_width/2, body_height/2])\n        cube([body_length*0.6, 2, body_height*0.8], center=true);\n    \n    // Back ridges\n    for(i = [-body_length/2+5:5:body_length/2-5]) {\n        translate([i, -body_width/2+2, body_height/2+5])\n            rotate([0, 20, 0])\n            scale([0.8, 1, 1])\n            cylinder(h=crystal_height, d1=crystal_base, d2=1);\n    }\n}\n\nmodule hydra_head(x_pos, y_pos, z_pos, angle) {\n    // Neck\n    translate([x_pos, y_pos, z_pos])\n        rotate([0, 0, angle])\n        cylinder(h=neck_length, d=neck_radius*2);\n    \n    // Head\n    translate([x_pos + cos(angle)*neck_length, \n               y_pos + sin(angle)*neck_length, \n               z_pos + neck_length/2])\n        sphere(d=head_radius*2);\n    \n    // Snout\n    translate([x_pos + cos(angle)*(neck_length+head_radius), \n               y_pos + sin(angle)*(neck_length+head_radius), \n               z_pos + neck_length/2])\n        rotate([0, 0, angle])\n        scale([1.5, 0.8, 0.8])\n        sphere(d=head_radius);\n    \n    // Horns\n    for(i = [0:45:315]) {\n        rotate([0, i, 0])\n        translate([x_pos + cos(angle)*(neck_length+head_radius/2), \n                   y_pos + sin(angle)*(neck_length+head_radius/2), \n                   z_pos + neck_length/2+head_radius])\n            cylinder(h=crystal_height*1.5, d1=2, d2=0.5);\n    }\n}\n\nmodule hydra_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([body_length/4, side*body_width/2, 0])\n            rotate([90, 0, 0])\n            cylinder(h=leg_length, d=leg_radius*2);\n        \n        translate([body_length/4, side*body_width/2, -leg_length])\n            sphere(d=leg_radius*2.5);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([-body_length/4, side*body_width/2, 0])\n            rotate([90, 0, 0])\n            cylinder(h=leg_length*1.2, d=leg_radius*2.2);\n        \n        translate([-body_length/4, side*body_width/2, -leg_length*1.2])\n            sphere(d=leg_radius*3);\n    }\n}\n\nmodule hydra_arms() {\n    // Arms under body\n    for(side = [-1, 1]) {\n        translate([0, side*body_width/2, body_height/3])\n            rotate([0, 30, 0])\n            rotate([90, 0, 0])\n            cylinder(h=arm_length, d=arm_radius*2);\n    }\n}\n\nmodule hydra_tail() {\n    // Segmented tail\n    for(i = [0:1:tail_segments-1]) {\n        translate([-body_length/2 - i*(tail_length/tail_segments), 0, 0])\n            rotate([0, -i*5, 0])\n            scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1])\n            sphere(d=body_width*(1 - i*0.15));\n    }\n}\n\nmodule ice_crystals() {\n    // Random ice crystals on body\n    seed = 42;\n    for(i = [0:15]) {\n        angle = (i*seed)%360;\n        radius = (i*seed)%10 + 5;\n        height = (i*seed)%5 + 3;\n        \n        rotate([0, 0, angle])\n        translate([radius*cos(i*10), radius*sin(i*10), body_height/2])\n            rotate([0, 0, angle])\n            cylinder(h=height, d1=crystal_base, d2=0.5);\n    }\n}\n\n// Assembly\nunion() {\n    hydra_body();\n    \n    // Three heads\n    hydra_head(body_length/2, 0, body_height/2+5, 0);\n    hydra_head(body_length/2-5, 8, body_height/2+2, -30);\n    hydra_head(body_length/2-5, -8, body_height/2+2, 30);\n    \n    hydra_legs();\n    hydra_arms();\n    hydra_tail();\n    ice_crystals();\n}",
    "renders": true
  },
  {
    "household_item": "tempestwyrm",
    "openscad_code": "$fn=32;\n\n// Tempestwyrm model\n// Overall size ~70mm long\n\n// Main body\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            scale([1.2, 0.8, 0.6])\n                sphere(15);\n            \n            // Neck connection\n            translate([18, 0, 2])\n                scale([0.8, 0.7, 0.5])\n                    sphere(10);\n            \n            // Tail segments\n            for(i=[1:4]) {\n                translate([-(i*8)-5, 0, -i*2])\n                    scale([1-0.15*i, 1-0.1*i, 1-0.1*i])\n                        sphere(12-i*2);\n            }\n        }\n        \n        // Hollow body\n        scale([0.8, 0.7, 0.5])\n            sphere(13);\n    }\n}\n\n// Head with snout\nmodule head() {\n    translate([28, 0, 5]) {\n        union() {\n            // Head sphere\n            sphere(8);\n            \n            // Snout\n            translate([8, 0, -2])\n                scale([1.5, 0.8, 0.7])\n                    sphere(5);\n            \n            // Eye sockets\n            translate([3, 5, 3]) {\n                difference() {\n                    sphere(4);\n                    translate([1, 0.5, -0.5])\n                        sphere(3);\n                }\n            }\n            \n            translate([3, -5, 3]) {\n                difference() {\n                    sphere(4);\n                    translate([1, -0.5, -0.5])\n                        sphere(3);\n                }\n            }\n            \n            // Horn bases\n            translate([2, 3, 8])\n                cylinder(h=8, r=3);\n            translate([2, -3, 8])\n                cylinder(h=8, r=3);\n        }\n    }\n}\n\n// Wings with membrane support\nmodule wings() {\n    // Left wing\n    translate([5, 15, 8]) {\n        rotate([0, 0, 20]) {\n            union() {\n                // Wing arm\n                cylinder(h=25, r=2);\n                \n                // Wing membrane support 1\n                translate([20, 5, 0])\n                    rotate([0, 0, 30])\n                        cylinder(h=15, r=1.5);\n                \n                // Wing membrane support 2\n                translate([15, 12, 0])\n                    rotate([0, 0, 60])\n                        cylinder(h=12, r=1);\n                \n                // Wing membrane support 3\n                translate([10, 16, 0])\n                    rotate([0, 0, 80])\n                        cylinder(h=8, r=0.8);\n                \n                // Membrane webbing\n                translate([10, 8, 0])\n                    scale([2, 1.5, 0.5])\n                        cube([15, 10, 1]);\n            }\n        }\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n        translate([5, 15, 8]) {\n            rotate([0, 0, 20]) {\n                union() {\n                    cylinder(h=25, r=2);\n                    translate([20, 5, 0])\n                        rotate([0, 0, 30])\n                            cylinder(h=15, r=1.5);\n                    translate([15, 12, 0])\n                        rotate([0, 0, 60])\n                            cylinder(h=12, r=1);\n                    translate([10, 16, 0])\n                        rotate([0, 0, 80])\n                            cylinder(h=8, r=0.8);\n                    translate([10, 8, 0])\n                        scale([2, 1.5, 0.5])\n                            cube([15, 10, 1]);\n                }\n            }\n        }\n}\n\n// Legs with claws\nmodule legs() {\n    // Front left leg\n    translate([10, 8, -8]) {\n        union() {\n            // Upper leg\n            cylinder(h=12, r=3);\n            \n            // Lower leg\n            translate([0, 0, -12])\n                rotate([20, 0, 0])\n                    cylinder(h=10, r=2.5);\n            \n            // Foot\n            translate([0, 2, -22])\n                rotate([45, 0, 0])\n                    union() {\n                        cylinder(h=5, r=2);\n                        // Toes\n                        translate([2, 0, 3])\n                            cylinder(h=4, r=0.8);\n                        translate([0, 1.5, 3])\n                            cylinder(h=4, r=0.8);\n                        translate([-2, 0, 3])\n                            cylinder(h=4, r=0.8);\n                    }\n        }\n    }\n    \n    // Front right leg\n    mirror([0, 1, 0])\n        translate([10, 8, -8]) {\n            union() {\n                cylinder(h=12, r=3);\n                translate([0, 0, -12])\n                    rotate([20, 0, 0])\n                        cylinder(h=10, r=2.5);\n                translate([0, 2, -22])\n                    rotate([45, 0, 0])\n                        union() {\n                            cylinder(h=5, r=2);\n                            translate([2, 0, 3])\n                                cylinder(h=4, r=0.8);\n                            translate([0, 1.5, 3])\n                                cylinder(h=4, r=0.8);\n                            translate([-2, 0, 3])\n                                cylinder(h=4, r=0.8);\n                        }\n            }\n        }\n    \n    // Hind left leg\n    translate([-10, 6, -5]) {\n        union() {\n            cylinder(h=15, r=3.5);\n            translate([0, 0, -15])\n                rotate([30, 0, 0])\n                    cylinder(h=12, r=3);\n            translate([0, 2, -27])\n                rotate([60, 0, 0])\n                    union() {\n                        cylinder(h=6, r=2.5);\n                        translate([2.5, 0, 4])\n                            cylinder(h=5, r=1);\n                        translate([0, 2, 4])\n                            cylinder(h=5, r=1);\n                        translate([-2.5, 0, 4])\n                            cylinder(h=5, r=1);\n                    }\n        }\n    }\n    \n    // Hind right leg\n    mirror([0, 1, 0])\n        translate([-10, 6, -5]) {\n            union() {\n                cylinder(h=15, r=3.5);\n                translate([0, 0, -15])\n                    rotate([30, 0, 0])\n                        cylinder(h=12, r=3);\n                translate([0, 2, -27])\n                    rotate([60, 0, 0])\n                        union() {\n                            cylinder(h=6, r=2.5);\n                            translate([2.5, 0, 4])\n                                cylinder(h=5, r=1);\n                            translate([0, 2, 4])\n                                cylinder(h=5, r=1);\n                            translate([-2.5, 0, 4])\n                                cylinder(h=5, r=1);\n                        }\n            }\n        }\n}\n\n// Spinal ridge\nmodule spine() {\n    for(i=[-15:5:15]) {\n        translate([i, 0, 10+abs(i/5)])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=2);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    spine();\n}",
    "renders": true
  },
  {
    "household_item": "aurorawyrm",
    "openscad_code": "// AuroraWyrm – medium-complexity, realistic style\n// Overall length ~60 mm; printable in one solid piece with gentle slopes.\n\n$fa = 2;\n$fs = 0.5;\n\n// Body parameters\nbody_len = 40;\nbody_dia = 8;\n\n// Head parameters\nhead_len = 12;\nhead_dia = 7;\n\n// Tail parameters\ntail_len = 30;\ntail_dia = 5;\n\n// Wing parameters\nwing_span = 20;\nwing_thick = 1.2;\n\n// Leg parameters\nleg_len = 8;\nleg_dia = 2.5;\n\n// Helper: tapered cylinder\nmodule taper_cyl(h, d1, d2, center=false) {\n    hull() {\n        translate([0,0, center ? -h/2 : 0]) cylinder(h=0.1, d=d1, center=true);\n        translate([0,0, center ?  h/2 : h]) cylinder(h=0.1, d=d2, center=true);\n    }\n}\n\n// Head\nmodule head() {\n    rotate([0, 10, 0])  // slight uptilt\n    union() {\n        // Snout\n        taper_cyl(head_len, head_dia*0.7, head_dia);\n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side*head_dia*0.4, head_dia*0.3, head_len*0.6])\n                sphere(d=head_dia*0.3);\n        }\n        // Nostrils\n        for(side = [-1, 1]) {\n            translate([side*head_dia*0.25, head_dia*0.5, head_len*0.9])\n                rotate([0, 90, 0]) cylinder(h=1, d=1);\n        }\n    }\n}\n\n// Neck (short tapered)\nmodule neck() {\n    taper_cyl(5, head_dia, body_dia);\n}\n\n// Body\nmodule body() {\n    // Segmented look via stacked tapers\n    segments = 5;\n    seg_len = body_len / segments;\n    for(i = [0:segments-1]) {\n        translate([0,0, -body_len/2 + i*seg_len])\n            taper_cyl(seg_len, body_dia-(i*0.5), body_dia-(i+1)*0.5);\n    }\n}\n\n// Tail\nmodule tail() {\n    segments = 6;\n    seg_len = tail_len / segments;\n    for(i = [0:segments-1]) {\n        translate([0,0, -body_len/2 - i*seg_len])\n            taper_cyl(seg_len, tail_dia-(i*0.6), tail_dia-(i+1)*0.6);\n    }\n}\n\n// Wing\nmodule wing() {\n    scale([1,0.3,0.05]) {\n        difference() {\n            // Main membrane\n            translate([0,0,0])\n                scale([1,1,1])\n                    sphere(d=wing_span);\n            // Cut elliptical hole\n            scale([0.5,0.8,2])\n                sphere(d=wing_span*0.8);\n        }\n    }\n    // Leading edge rib\n    translate([wing_span/2-2,0,0])\n        rotate([90,0,0])\n            cylinder(h=wing_span-2, d=wing_thick*2.5, center=true);\n}\n\n// Wings pair\nmodule wings() {\n    for(side = [-1, 1]) {\n        translate([0, side*body_dia*0.7, -body_len*0.1])\n            rotate([0, -20, side*15])\n                wing();\n    }\n}\n\n// Leg\nmodule leg() {\n    // Thigh\n    rotate([0,0,30])\n        cylinder(h=leg_len*0.6, d=leg_dia);\n    // Shin\n    translate([0,0,leg_len*0.6])\n        rotate([30,0,0])\n            cylinder(h=leg_len*0.4, d=leg_dia*0.8);\n    // Foot\n    translate([leg_len*0.4,0,leg_len*0.6+leg_len*0.4*sin(30)])\n        rotate([0,-30,0])\n            scale([1.5,1,0.5])\n                sphere(d=leg_dia);\n}\n\n// Legs set\nmodule legs() {\n    for(side = [-1, 1]) {\n        for(pos = [-0.3, 0.3]) {\n            translate([side*body_dia*0.6, 0, -body_len*pos])\n                rotate([-30,0,0])\n                    leg();\n        }\n    }\n}\n\n// Assembly\nunion() {\n    translate([0,0, body_len/2+5]) head();\n    translate([0,0, body_len/2]) neck();\n    body();\n    tail();\n    wings();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "eclipsedrake",
    "openscad_code": "// Eclipsedrake – medium-realistic, 3D-print-friendly\n// Wings folded against the body so no support needed.\n// Approx 90 mm nose-to-tail, 70 mm wingtip-to-wingtip\n\n$fn = 36;\n\n// overall scale factor – tweak to fit printer\nscale = 1;\n\n// MAIN BODY ---------------------------------------------------\nmodule body() {\n    // central torso\n    hull() {\n        translate([0,0,10]) sphere(12);\n        translate([0,0,0]) sphere(14);\n        translate([-35,0,5]) sphere(10);\n        translate([30,0,8]) sphere(9);\n    }\n\n    // neck\n    for(i=[0:5:25])\n        translate([-35-i,0,5+sin(i*10)*4])\n            sphere(9-i/5);\n\n    // tail\n    for(i=[0:5:40])\n        translate([30+i,0,8-i/5])\n            scale([1,1-i/15,1-i/15])\n                sphere(9-i/3);\n}\n\n// HEAD --------------------------------------------------------\nmodule head() {\n    translate([-65,0,15])\n    rotate([0,-20,0])\n    union() {\n        // snout\n        cylinder(h=25,r1=6,r2=3);\n        // cranium\n        translate([0,0,10]) sphere(9);\n        // lower jaw\n        translate([5,0,-4])\n        rotate([20,0,0])\n        cube([20,6,4], center=true);\n        // eye sockets\n        difference() {\n            sphere(9);\n            translate([0,5,3]) sphere(5);\n            translate([0,-5,3]) sphere(5);\n        }\n    }\n}\n\n// WING --------------------------------------------------------\nmodule wing(side) {\n    // side = 1 for right, -1 for left\n    mirror([0,side,0])\n    translate([-20,0,20])\n    rotate([0,0,20*side])\n    rotate([0,-20,0])\n    union() {\n        // upper arm\n        translate([0,0,0])\n        rotate([0,0,90])\n        cylinder(h=25,r1=4,r2=3);\n        // forearm\n        translate([0,25,0])\n        rotate([0,0,90])\n        cylinder(h=30,r1=3,r2=2);\n        // membrane segments\n        for(i=[0:3]) {\n            hull() {\n                translate([0,25+i*8,0]) sphere(2);\n                translate([0,30+i*8,-20-i*6]) sphere(1.5);\n            }\n        }\n    }\n}\n\n// LEG ---------------------------------------------------------\nmodule leg(pos) {\n    translate(pos)\n    union() {\n        // thigh\n        rotate([0,-45,0])\n        cylinder(h=20,r1=4,r2=3);\n        // shin\n        translate([0,0,-22])\n        rotate([0,45,0])\n        cylinder(h=20,r1=3,r2=2);\n        // foot\n        translate([0,0,-45])\n        rotate([0,90,0])\n        cylinder(h=12,r1=3,r2=2);\n    }\n}\n\n// ASSEMBLY ----------------------------------------------------\nscale(scale)\nunion() {\n    body();\n    head();\n    wing(1);   // right wing\n    wing(-1);  // left wing\n    leg([-10, 10, 0]);\n    leg([-10,-10, 0]);\n    leg([20, 8, 0]);\n    leg([20,-8, 0]);\n}",
    "renders": true
  },
  {
    "household_item": "solarsnake",
    "openscad_code": "// SolarSnake - Realistic medium-complexity photovoltaic cable manager\n// Size: 100 mm length, printable on FDM machines without supports\n\n$fn = 48;  // Smooth curves for realism\n\nmodule base_body() {\n    // Central hollow tube for cable routing\n    difference() {\n        cylinder(h = 100, d = 12, center = true);\n        cylinder(h = 101, d = 8, center = true);\n    }\n}\n\nmodule solar_panel(scale = 1) {\n    // Realistic solar cell with textured surface\n    difference() {\n        // Base panel\n        cube([20 * scale, 10 * scale, 2 * scale], center = true);\n        \n        // Individual cell grooves\n        for (x = [-8:4:8])\n            translate([x * scale, 0, 0.9 * scale])\n                cube([0.5 * scale, 9 * scale, 1.1 * scale], center = true);\n        \n        for (y = [-3:2:3])\n            translate([0, y * scale, 0.9 * scale])\n                cube([19 * scale, 0.5 * scale, 1.1 * scale], center = true);\n    }\n    \n    // Bus bars\n    translate([0, 0, 1.1 * scale])\n        cube([19 * scale, 0.8 * scale, 0.2 * scale], center = true);\n}\n\nmodule connector_pins() {\n    // MC4-style connector pins\n    for (i = [-1, 1]) {\n        translate([i * 6, 0, -52])\n            cylinder(h = 4, d1 = 2.5, d2 = 2);\n    }\n}\n\nmodule segment(idx) {\n    // Create one segment of the snake body\n    angle = idx * 30;\n    z_pos = idx * 15 - 50;\n    \n    translate([0, 0, z_pos])\n    rotate([0, angle, 0]) {\n        // Main body segment\n        base_body();\n        \n        // Solar panels on top\n        translate([0, 10, 0])\n            rotate([90, 0, 0])\n            solar_panel(0.8);\n        \n        // Reinforcement ribs\n        for (rib = [-1, 1]) {\n            translate([0, rib * 6, 0])\n                difference() {\n                    cylinder(h = 14, d = 16);\n                    cylinder(h = 15, d = 12);\n                }\n        }\n    }\n}\n\nmodule head() {\n    // Snake head with realistic features\n    translate([0, 0, 50]) {\n        // Main head shape\n        scale([1.2, 1, 1])\n            sphere(d = 14);\n        \n        // Eyes (photodiodes)\n        for (eye = [-1, 1]) {\n            translate([eye * 4, 6, 2])\n                sphere(d = 3);\n            translate([eye * 4, 6.5, 2.5])\n                sphere(d = 1.5);\n        }\n        \n        // Mouth slit for cable entry\n        translate([0, -6, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 8);\n        \n        // Heat sink fins\n        for (fin = [-2:2]) {\n            translate([fin * 3, 0, -6])\n                cube([1.5, 8, 2], center = true);\n        }\n    }\n}\n\nmodule tail() {\n    // Tapered tail section\n    translate([0, 0, -50]) {\n        for (i = [0:3]) {\n            translate([0, 0, -i * 5])\n                scale([1 - i * 0.15, 1 - i * 0.15, 1])\n                    cylinder(h = 5, d = 12);\n        }\n        \n        // End cap\n        sphere(d = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body segments\n    for (i = [0:6])\n        segment(i);\n    \n    // Head assembly\n    head();\n    \n    // Tail\n    tail();\n    \n    // Connection points\n    connector_pins();\n}",
    "renders": true
  },
  {
    "household_item": "lunarbane",
    "openscad_code": "// Lunar Module (Lunarbane) - Medium Complexity Realistic Style\n// 3D printable model ~70mm tall\n\n$fn = 32;\n\n// Main module\nmodule lunarbane() {\n    difference() {\n        union() {\n            // Main body\n            body();\n            \n            // Landing gear\n            landing_gear();\n            \n            // RCS thrusters\n            rcs_thrusters();\n            \n            // Antenna\n            antenna();\n            \n            // Docking target\n            docking_target();\n        }\n        \n        // Hollow out for printing\n        hollow();\n    }\n}\n\n// Main body structure\nmodule body() {\n    // Lower descent stage\n    translate([0, 0, 15]) {\n        cylinder(h = 30, d1 = 50, d2 = 45);\n    }\n    \n    // Upper ascent stage\n    translate([0, 0, 45]) {\n        cylinder(h = 25, d = 35);\n    }\n    \n    // Engine nozzle\n    translate([0, 0, 0]) {\n        cylinder(h = 15, d1 = 20, d2 = 10);\n    }\n    \n    // Fuel tanks\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([20, 0, 25]) {\n                cylinder(h = 20, d = 8);\n            }\n        }\n    }\n}\n\n// Landing gear with pads\nmodule landing_gear() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            // Strut\n            translate([0, 0, 15]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 30, d = 3);\n                }\n            }\n            \n            // Landing pad\n            translate([21, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 2, d = 12);\n                }\n            }\n            \n            // Support struts\n            translate([15, 0, 15]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 15, d = 2);\n                }\n            }\n        }\n    }\n}\n\n// RCS thruster quads\nmodule rcs_thrusters() {\n    // Front thrusters\n    translate([0, 18, 50]) {\n        rcs_quad();\n    }\n    \n    // Rear thrusters\n    translate([0, -18, 50]) {\n        rotate([0, 0, 180]) {\n            rcs_quad();\n        }\n    }\n    \n    // Side thrusters\n    translate([18, 0, 50]) {\n        rotate([0, 0, 90]) {\n            rcs_quad();\n        }\n    }\n    \n    translate([-18, 0, 50]) {\n        rotate([0, 0, -90]) {\n            rcs_quad();\n        }\n    }\n}\n\n// Single RCS thruster quad\nmodule rcs_quad() {\n    // Mounting block\n    cube([8, 8, 4], center = true);\n    \n    // Thruster nozzles\n    for(x = [-3, 3]) {\n        for(y = [-3, 3]) {\n            translate([x, y, 3]) {\n                cylinder(h = 3, d = 2);\n            }\n        }\n    }\n}\n\n// Communication antenna\nmodule antenna() {\n    // Base\n    translate([0, 0, 70]) {\n        cylinder(h = 3, d = 6);\n    }\n    \n    // Mast\n    translate([0, 0, 73]) {\n        cylinder(h = 15, d = 1.5);\n    }\n    \n    // Dish\n    translate([0, 0, 88]) {\n        rotate([0, 0, 180]) {\n            cylinder(h = 2, d1 = 10, d2 = 8);\n        }\n    }\n}\n\n// Docking target\nmodule docking_target() {\n    translate([0, 0, 70]) {\n        // Outer ring\n        rotate_extrude() {\n            translate([12, 0, 0]) {\n                circle(r = 1.5);\n            }\n        }\n        \n        // Inner cross\n        cube([20, 2, 2], center = true);\n        cube([2, 20, 2], center = true);\n    }\n}\n\n// Hollow out for 3D printing\nmodule hollow() {\n    // Main cavity\n    translate([0, 0, 20]) {\n        cylinder(h = 45, d = 30);\n    }\n    \n    // Drain holes\n    translate([0, 0, 5]) {\n        cylinder(h = 5, d = 5);\n    }\n    translate([0, 0, 65]) {\n        cylinder(h = 5, d = 5);\n    }\n}\n\n// Generate the model\nlunarbane();",
    "renders": true
  },
  {
    "household_item": "cosmiccoil",
    "openscad_code": "// CosmicCoil – medium-complexity, realistic, 3D-printable\n// Outer Ø ≈ 70 mm, height ≈ 28 mm, wall thickness 2 mm\n// All angles ≤ 45°, no overhangs\n\n$fn = 72;\n\n// Main body module\nmodule cosmiccoil() {\n    // Central hub\n    translate([0, 0, 14])\n        cylinder(h = 14, d = 24, center = true);\n\n    // Coil arms\n    for (a = [0 : 120 : 359])\n        rotate([0, 0, a])\n            arm();\n}\n\n// One helical arm\nmodule arm() {\n    // Parameters\n    arm_r = 35;     // Radius of coil orbit\n    turns = 1.5;    // 1.5 windings\n    h = 20;         // Vertical travel\n    n = 30;         // Segments per arm\n    thick = 4;      // Arm thickness\n    wall = 2;       // Wall thickness for hollowing\n\n    for (i = [0 : 1 : n - 1]) {\n        theta1 = i * 360 * turns / n;\n        theta2 = (i + 1) * 360 * turns / n;\n        z1 = i * h / n;\n        z2 = (i + 1) * h / n;\n\n        // Position of segment\n        x1 = arm_r * cos(theta1);\n        y1 = arm_r * sin(theta1);\n        x2 = arm_r * cos(theta2);\n        y2 = arm_r * sin(theta2);\n\n        // Direction vector\n        dx = x2 - x1;\n        dy = y2 - y1;\n        dz = z2 - z1;\n        len = sqrt(dx * dx + dy * dy + dz * dz);\n\n        // Rotation angles to align segment\n        rot_xy = atan2(dy, dx);\n        rot_z  = atan2(dz, sqrt(dx * dx + dy * dy));\n\n        translate([x1, y1, z1 + 4])   // Offset up from base\n            rotate([0, 90 - rot_z, rot_xy])\n                difference() {\n                    cylinder(h = len + 0.1, d = thick, center = false);\n                    translate([0, 0, wall])\n                        cylinder(h = len + 0.1 - 2 * wall, d = thick - 2 * wall, center = false);\n                }\n    }\n}\n\n// Base ring for print stability\nmodule base() {\n    difference() {\n        cylinder(h = 4, d = 70, center = false);\n        cylinder(h = 4.1, d = 66, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    cosmiccoil();\n}",
    "renders": true
  },
  {
    "household_item": "nebulawyrm",
    "openscad_code": "// Nebulawyrm - medium complexity realistic style\n// 3D printable space dragon with nebula cloud details\n\n// Parameters\nbody_radius = 8;\nbody_length = 40;\nhead_radius = 12;\ntail_length = 35;\nleg_height = 15;\nwing_span = 50;\nwing_thickness = 2;\n\n// Main body module\nmodule body() {\n    // Head\n    translate([body_length/2 + head_radius/2, 0, 0])\n    sphere(r=head_radius, $fn=32);\n    \n    // Neck\n    translate([body_length/2, 0, 0])\n    cylinder(h=head_radius, r1=body_radius, r2=head_radius*0.8, $fn=32);\n    \n    // Main body segments\n    for(i=[0:body_length/5:body_length]) {\n        translate([i-body_length/2, 0, 0])\n        sphere(r=body_radius*(1-i/body_length*0.3), $fn=32);\n    }\n    \n    // Tail\n    for(i=[0:tail_length/5:tail_length]) {\n        translate([-body_length/2-i, 0, 0])\n        sphere(r=body_radius*(1-i/tail_length*0.8), $fn=32);\n    }\n}\n\n// Leg module\nmodule leg(position, angle, scale_factor=1) {\n    translate(position)\n    rotate([0, 0, angle])\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Upper leg\n        translate([0, 0, -leg_height/2])\n        cylinder(h=leg_height*0.6, r1=body_radius*0.4, r2=body_radius*0.3, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -leg_height*0.9])\n        rotate([30, 0, 0])\n        cylinder(h=leg_height*0.5, r1=body_radius*0.3, r2=body_radius*0.2, $fn=16);\n        \n        // Foot\n        translate([0, 0, -leg_height*1.1])\n        rotate([30, 0, 0])\n        cube([body_radius*0.8, body_radius*0.4, body_radius*0.3], center=true);\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        // Wing base\n        translate([body_length/4, body_radius*side, 0])\n        rotate([0, 0, 45*side])\n        cube([wing_span*0.4, wing_thickness, wing_span*0.2], center=true);\n        \n        // Wing membrane segments\n        for(i=[0:wing_span/8:wing_span*0.8]) {\n            translate([body_length/4+i, body_radius*side + i*0.3*side, i*0.2])\n            rotate([0, -i*10, 45*side])\n            scale([1-i/wing_span*0.3, 1, 1-i/wing_span*0.5])\n            cube([wing_span/8, wing_thickness*2, wing_span/8], center=true);\n        }\n    }\n}\n\n// Nebula cloud detail\nmodule nebula_cloud() {\n    // Cloud wisps around body\n    for(i=[-body_length/2:body_length/3:body_length/2]) {\n        translate([i, sin(i*3)*3, cos(i*2)*2])\n        sphere(r=body_radius*0.4, $fn=16);\n    }\n    \n    // Additional nebula particles\n    for(i=[0:30]) {\n        rotate([i*47, i*31, i*17])\n        translate([body_length*0.8*cos(i*137.5), body_length*0.8*sin(i*137.5), i*2])\n        sphere(r=body_radius*0.1, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Legs\n    leg([body_length*0.2, -body_radius*0.7, -body_radius*0.5], 30, 1);\n    leg([body_length*0.2, body_radius*0.7, -body_radius*0.5], -30, 1);\n    leg([-body_length*0.2, -body_radius*0.7, -body_radius*0.5], 45, 0.8);\n    leg([-body_length*0.2, body_radius*0.7, -body_radius*0.5], -45, 0.8);\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Nebula cloud details\n    nebula_cloud();\n}",
    "renders": true
  },
  {
    "household_item": "galaxyserpent",
    "openscad_code": "// Galaxy Serpent - Realistic Style (Medium Complexity)\n// Dimensions: ~80mm length, 25mm height, 20mm width\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nbody_length = 80;\nbody_width = 8;\nhead_size = 12;\ntail_taper = 0.3;\nscale_factor = 0.9;\n\n// Body segments\nmodule body_segment(length, width, height, z_rot) {\n    translate([0, 0, height/2])\n    rotate([0, 0, z_rot])\n    scale([1, 0.8, 1])\n    difference() {\n        union() {\n            // Main body segment\n            cylinder(h=length, d=width, center=true);\n            // Scale ridges\n            for(i = [-1, 0, 1]) {\n                translate([0, i*width/3, 0])\n                rotate([90, 0, 0])\n                cylinder(h=length*0.9, d=width*0.3, center=true);\n            }\n        }\n        // Hollow center for printing\n        cylinder(h=length*1.1, d=width*0.5, center=true);\n    }\n}\n\n// Head with galaxy details\nmodule serpent_head() {\n    translate([body_length/2 + head_size/2, 0, head_size/2])\n    rotate([0, 0, 0])\n    difference() {\n        union() {\n            // Main head sphere\n            sphere(d=head_size);\n            \n            // Snout\n            translate([head_size/2, 0, 0])\n            scale([1.5, 0.8, 0.8])\n            sphere(d=head_size*0.8);\n            \n            // Eye ridges\n            for(side = [-1, 1]) {\n                translate([head_size*0.3, side*head_size*0.35, head_size*0.2])\n                rotate([0, 30*side, 0])\n                scale([0.8, 0.3, 0.3])\n                sphere(d=head_size*0.5);\n            }\n            \n            // Galaxy spiral horns\n            for(i = [0:120:360]) {\n                rotate([0, 0, i])\n                translate([0, head_size*0.4, head_size*0.5])\n                rotate([90, 0, 0])\n                scale([0.2, 0.2, 1])\n                cylinder(h=head_size*0.8, d=head_size*0.3);\n            }\n        }\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([head_size*0.3, side*head_size*0.35, head_size*0.1])\n            sphere(d=head_size*0.3);\n        }\n        \n        // Mouth\n        translate([head_size*0.4, 0, -head_size*0.2])\n        rotate([0, 0, 0])\n        scale([1.2, 0.6, 0.4])\n        sphere(d=head_size*0.8);\n        \n        // Hollow head\n        sphere(d=head_size*0.8);\n    }\n}\n\n// Tail segments\nmodule tail() {\n    for(i = [1:8]) {\n        translate([-body_length/2 - i*body_width*0.8, 0, 0])\n        rotate([0, 0, i*15])\n        scale([scale_factor^i, scale_factor^i, scale_factor^i])\n        body_segment(body_width*0.8, body_width*(0.9^i), body_width*(0.9^i), 0);\n    }\n}\n\n// Body assembly\nmodule body() {\n    union() {\n        // Main body curve\n        for(i = [0:15]) {\n            x_pos = -body_length/2 + i*body_width*0.9;\n            y_offset = sin(i*15)*body_width*0.3;\n            z_offset = cos(i*20)*body_width*0.2;\n            translate([x_pos, y_offset, z_offset])\n            rotate([0, 0, i*10])\n            body_segment(body_width*0.9, body_width, body_width*0.8, 0);\n        }\n        \n        // Dorsal galaxy fins\n        for(i = [2:12]) {\n            x_pos = -body_length/2 + i*body_width*0.9;\n            y_offset = sin(i*15)*body_width*0.3;\n            z_offset = cos(i*20)*body_width*0.2 + body_width*0.4;\n            translate([x_pos, y_offset, z_offset])\n            rotate([0, 0, i*10 + 90])\n            scale([0.3, 1, 0.5])\n            cylinder(h=body_width*0.6, d=body_width*0.2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    serpent_head();\n    tail();\n}\n\n// Base support for printing\ntranslate([0, 0, -body_width*0.4])\ndifference() {\n    cube([body_length*1.5, body_width*2, body_width*0.2], center=true);\n    cube([body_length*1.4, body_width*1.8, body_width*0.3], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "cometdrake",
    "openscad_code": "// Cometdrake - Medium Complexity Realistic Style\n// A celestial dragon with comet-like features for 3D printing\n\n// Overall dimensions: ~80mm wingspan, 60mm length\n$fn = 32;\n\n// Main module\nmodule cometdrake() {\n    \n    // Body\n    union() {\n        // Central body core\n        translate([0, 0, 15]) \n        scale([1.2, 1, 1.5])\n        sphere(8);\n        \n        // Tail section\n        hull() {\n            translate([0, 0, 15]) sphere(8);\n            translate([-25, 0, 12]) sphere(5);\n            translate([-35, 0, 10]) sphere(3);\n        }\n        \n        // Head\n        translate([15, 0, 18])\n        scale([1.5, 1.2, 1])\n        sphere(6);\n        \n        // Snout\n        translate([22, 0, 18])\n        rotate([0, -20, 0])\n        cylinder(h=8, r1=4, r2=2);\n        \n        // Wings\n        left_wing();\n        mirror([0, 1, 0]) left_wing();\n        \n        // Legs\n        legs();\n        \n        // Comet tail flames\n        flames();\n        \n        // Eyes\n        eyes();\n        \n        // Horns\n        horns();\n    }\n}\n\n// Left wing module\nmodule left_wing() {\n    // Main wing structure\n    translate([5, 12, 20])\n    rotate([0, 20, -30])\n    scale([1, 0.3, 1])\n    cylinder(h=25, r1=8, r2=2);\n    \n    // Wing membrane supports\n    for(i = [0:2]) {\n        translate([5+i*5, 12-i*2, 20-i*2])\n        rotate([0, 10+i*5, -30])\n        scale([1, 0.2, 0.1])\n        cylinder(h=20-i*3, r1=6-i*1.5, r2=1);\n    }\n    \n    // Wing tip\n    translate([25, 5, 25])\n    sphere(3);\n}\n\n// Legs module\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([12, side*6, 12])\n        rotate([30, 0, 0])\n        cylinder(h=8, r=2);\n        \n        // Feet\n        translate([12, side*8, 10])\n        scale([1, 1.5, 0.5])\n        sphere(3);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([-5, side*5, 8])\n        rotate([45, 0, 0])\n        cylinder(h=10, r=2.5);\n        \n        // Feet\n        translate([-5, side*7, 5])\n        scale([1.2, 1.8, 0.6])\n        sphere(3.5);\n    }\n}\n\n// Comet flames module\nmodule flames() {\n    // Main flame body\n    translate([-40, 0, 12])\n    scale([1, 0.8, 0.6])\n    sphere(8);\n    \n    // Flame tendrils\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([-35-i*3, 0, 12])\n        rotate([0, 10+i*5, 0])\n        scale([1, 0.3, 0.3])\n        cylinder(h=10+i*2, r1=3, r2=0.5);\n    }\n    \n    // Inner flame core\n    translate([-42, 0, 12])\n    sphere(4);\n}\n\n// Eyes module\nmodule eyes() {\n    for(side = [-1, 1]) {\n        // Eye socket\n        translate([18, side*3, 20])\n        sphere(2);\n        \n        // Pupil\n        translate([19.5, side*3, 20])\n        scale([0.5, 1, 1])\n        sphere(1.5);\n    }\n}\n\n// Horns module\nmodule horns() {\n    // Main horns\n    for(side = [-1, 1]) {\n        translate([16, side*4, 24])\n        rotate([0, -20, side*15])\n        cylinder(h=8, r1=2, r2=1);\n        \n        // Horn tips\n        translate([16+8*cos(20)*cos(15), side*(4+8*sin(15)), 24+8*sin(20)])\n        sphere(1.5);\n    }\n    \n    // Small head spikes\n    for(i = [0:2]) {\n        translate([15-i*2, 0, 25+i*2])\n        rotate([0, -30, 0])\n        cylinder(h=3, r1=1, r2=0.5);\n    }\n}\n\n// Generate the cometdrake\ncometdrake();",
    "renders": true
  },
  {
    "household_item": "meteorwyrm",
    "openscad_code": "// Meteorwyrm – medium-complexity realistic style, 3D-printable\n// Total length ≈ 80 mm, printable without supports when laid on its side\n\n$fn = 36;  // global resolution\n\n// ---------- PARAMETERS ----------\nbody_d        = 8;      // diameter of each body segment\nseg_len       = 9;      // length of each body segment\nsegments      = 6;      // number of body segments\nhead_len      = 12;\nhead_d        = 10;\ncrater_d      = 4;      // meteor impact craters\ntail_taper    = 0.4;    // tail end scale\nleg_thick     = 3;\nleg_len       = 6;\nrock_radius   = 1.5;    // surface rock debris\nwall          = 1.2;    // shell thickness for hollow parts\n\n// ---------- MODULES ----------\nmodule crater(r, depth){\n    difference(){\n        sphere(r);\n        translate([0,0,depth]) sphere(r*1.2);\n    }\n}\n\nmodule surface_rocks(){\n    for(i=[0:14]){\n        rotate([rands(0,360,1)[0], rands(0,360,1)[0], rands(0,360,1)[0]])\n         translate([rands(-body_d/1.8,body_d/1.8,1)[0],\n                    rands(-body_d/1.8,body_d/1.8,1)[0],\n                    body_d/2])\n          sphere(rock_radius);\n    }\n}\n\nmodule body_segment(d, len, taper=1){\n    difference(){\n        // outer shell\n        union(){\n            cylinder(h=len,d1=d,d2=d*taper);\n            surface_rocks();\n            // longitudinal craters\n            for(a=[30:120:360])\n                rotate([0,0,a])\n                 translate([d*0.4,-crater_d/2,len/2])\n                  rotate([-90,0,0])\n                   crater(crater_d/2, crater_d/3);\n        }\n        // hollow core\n        translate([0,0,-0.1])\n         cylinder(h=len+0.2,d1=d-wall,d2=(d-wall)*taper);\n    }\n}\n\nmodule head(){\n    difference(){\n        // outer head\n        hull(){\n            sphere(d=head_d);\n            translate([head_len-head_d/2,0,0]) sphere(d=head_d*0.8);\n        }\n        // hollow\n        offset(-wall) offset(0) hull(){\n            sphere(d=head_d);\n            translate([head_len-head_d/2,0,0]) sphere(d=head_d*0.8);\n        }\n        // eye sockets\n        translate([head_len*0.7, head_d/4, head_d/4])\n         rotate([0,30,0]) cylinder(h=head_d/2,d=head_d/4,$fn=12);\n        translate([head_len*0.7, -head_d/4, head_d/4])\n         rotate([0,-30,0]) cylinder(h=head_d/2,d=head_d/4,$fn=12);\n        // mouth cavity\n        translate([head_len*0.8,0,-head_d/3])\n         rotate([0,-20,0]) cube([head_len*0.4, head_d/2, head_d/2], center=true);\n    }\n    // eyes\n    translate([head_len*0.8, head_d/4, head_d/4])\n     sphere(head_d/8);\n    translate([head_len*0.8, -head_d/4, head_d/4])\n     sphere(head_d/8);\n    // tiny craters on head\n    for(i=[0:5]){\n        rotate([rands(0,180,1)[0],rands(0,180,1)[0],rands(0,360,1)[0]])\n         translate([rands(-head_d/2,head_d/2,1)[0],\n                    rands(-head_d/2,head_d/2,1)[0],\n                    head_d/2])\n          crater(rock_radius*0.7, rock_radius*0.4);\n    }\n}\n\nmodule leg(){\n    difference(){\n        union(){\n            // upper leg\n            translate([0,-leg_thick/2,0])\n             cube([leg_len, leg_thick, leg_thick]);\n            // lower foot\n            translate([leg_len,-leg_thick*0.8,-leg_thick*0.3])\n             cube([leg_thick*1.5, leg_thick*1.6, leg_thick*0.6]);\n        }\n        // slot for printability\n        translate([-0.1,-leg_thick/2-0.1,-0.1])\n         cube([leg_len+0.2, leg_thick+0.2, leg_thick/2]);\n    }\n}\n\n// ---------- ASSEMBLY ----------\nunion(){\n    // head\n    translate([-head_len,0,0]) head();\n\n    // body segments\n    for(i=[0:segments-1]){\n        taper = (segments - i) / segments * (1 - tail_taper) + tail_taper;\n        translate([i*seg_len,0,0])\n         rotate([0,0,i*8])  // slight upward curl\n          body_segment(body_d, seg_len, taper);\n    }\n\n    // legs (three pairs)\n    for(i=[1:3]){\n        pos = i*seg_len*1.3;\n        translate([pos,0,-body_d/2])\n         rotate([0,90,30]) leg();\n        mirror([0,1,0]) translate([pos,0,-body_d/2])\n         rotate([0,90,30]) leg();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "stardusthydra",
    "openscad_code": "// StardustHydra - Medium complexity realistic model\n// 3D printable, ~70mm tall\n\n$fn = 48; // Smooth curves for realistic look\n\nmodule head(radius=12, height=15) {\n    // Main head shape - elongated sphere\n    translate([0, 0, height/2])\n    scale([1.2, 1, 1])\n    sphere(r=radius);\n    \n    // Snout extension\n    translate([radius*0.9, 0, height/2])\n    scale([1.5, 0.7, 0.8])\n    sphere(r=radius*0.7);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([radius*0.5, side*radius*0.6, height*0.7])\n        rotate([0, 90, 0])\n        cylinder(h=radius*0.3, r=radius*0.2, $fn=16);\n    }\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([radius*1.3, side*radius*0.2, height*0.4])\n        rotate([90, 0, 0])\n        cylinder(h=radius*0.2, r=radius*0.15, $fn=12);\n    }\n}\n\nmodule neck(segments=4, start_r=8, end_r=6, length=20) {\n    // Segmented neck with decreasing radius\n    for(i = [0:segments-1]) {\n        t = i / (segments-1);\n        r = start_r * (1-t) + end_r * t;\n        h = length / segments;\n        translate([0, 0, i*h])\n        cylinder(h=h+0.1, r1=r, r2=r*0.9);\n    }\n}\n\nmodule limb(length=25, radius=3) {\n    // Three-segment limb with joints\n    // Upper segment\n    cylinder(h=length/3, r=radius);\n    \n    // First joint\n    translate([0, 0, length/3])\n    sphere(r=radius*1.1);\n    \n    // Middle segment\n    translate([0, 0, length/3])\n    rotate([0, 15, 0])\n    cylinder(h=length/3, r=radius*0.9);\n    \n    // Second joint\n    translate([0, 0, length*2/3])\n    sphere(r=radius*0.95);\n    \n    // Lower segment\n    translate([0, 0, length*2/3])\n    rotate([0, 25, 0])\n    cylinder(h=length/3, r=radius*0.8);\n}\n\nmodule hydra_body() {\n    // Central body - elongated with slight taper\n    translate([0, 0, 15])\n    scale([1.3, 1, 2])\n    cylinder(h=30, r1=12, r2=8);\n    \n    // Tail\n    translate([0, 0, 45])\n    rotate([0, 180, 0])\n    cylinder(h=25, r1=8, r2=2);\n    \n    // Dorsal ridge\n    for(i = [0:5]) {\n        z = 20 + i*5;\n        x = sin(i*30) * 2;\n        translate([x, 0, z])\n        scale([1.5, 0.5, 1])\n        sphere(r=3);\n    }\n}\n\nmodule hydra_heads(count=3) {\n    angle_step = 360 / count;\n    head_height = 15;\n    for(i = [0:count-1]) {\n        angle = i * angle_step;\n        x = cos(angle) * 25;\n        y = sin(angle) * 25;\n        \n        // Neck for this head\n        translate([x, y, 30])\n        rotate([0, atan(head_height/25), angle])\n        neck(segments=4, start_r=6, end_r=4, length=18);\n        \n        // Head\n        translate([x*1.8, y*1.8, 30+head_height])\n        rotate([0, atan(head_height/25), angle])\n        head(radius=8, height=12);\n    }\n}\n\nmodule legs() {\n    // Four legs in realistic quadruped arrangement\n    positions = [\n        [15, 8, 20, 30],   // Front right\n        [15, -8, 20, 30],  // Front left\n        [-10, 8, 15, 25],  // Rear right\n        [-10, -8, 15, 25]  // Rear left\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], 0])\n        rotate([90-pos[2], 0, pos[0] > 0 ? 15 : -15])\n        limb(length=pos[3], radius=2.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body and tail\n    hydra_body();\n    \n    // Multiple heads\n    hydra_heads(count=3);\n    \n    // Legs\n    legs();\n}\n\n// Base platform for stability\ntranslate([0, 0, -2])\ncube([60, 60, 2], center=true);",
    "renders": true
  },
  {
    "household_item": "blackholewyrm",
    "openscad_code": "// Blackholewyrm - Realistic style, medium complexity\n// A cosmic serpent with gravitational distortion effects\n\n$fn = 60;\nmodule_body_length = 80;\nmodule_head_diameter = 12;\nmodule_segment_count = 8;\nmodule_segment_height = 8;\nmodule_segment_width = 10;\nmodule_leg_length = 6;\nmodule_leg_diameter = 2;\nmodule_event_horizon_radius = 15;\n\n// Main body segments with gravitational distortion\nmodule body_segment(height, width, position) {\n    translate([position, 0, 0]) {\n        // Main body cylinder\n        rotate([0, 90, 0])\n            cylinder(h=width, d=height, center=true);\n        \n        // Gravitational ripple rings\n        for(i = [0:2]) {\n            rotate([0, 90, 0])\n            translate([i*3 - 3, 0, 0])\n            difference() {\n                cylinder(h=width+2, d=height + i*2, center=true);\n                cylinder(h=width+3, d=height + i*2 - 1, center=true);\n            }\n        }\n    }\n}\n\n// Head with event horizon distortion\nmodule head() {\n    // Main head sphere\n    sphere(d=module_head_diameter);\n    \n    // Mouth opening\n    difference() {\n        sphere(d=module_head_diameter);\n        translate([0, 0, -module_head_diameter/4])\n            rotate([90, 0, 0])\n            cylinder(h=module_head_diameter/2, d=module_head_diameter/2, center=true);\n    }\n    \n    // Eye sockets\n    for(i = [-1, 1]) {\n        translate([i*3, module_head_diameter/3, module_head_diameter/4])\n            sphere(d=2);\n    }\n    \n    // Event horizon ring\n    translate([0, 0, -module_head_diameter/2 - 2])\n        difference() {\n            cylinder(h=2, d=module_event_horizon_radius*2);\n            cylinder(h=3, d=module_event_horizon_radius*1.5);\n        }\n}\n\n// Leg segments for cosmic movement\nmodule leg(position, angle) {\n    translate(position) {\n        rotate([0, 0, angle]) {\n            // Upper leg\n            cylinder(h=module_leg_length/2, d=module_leg_diameter);\n            \n            // Lower leg\n            translate([0, module_leg_length/2, 0])\n                rotate([45, 0, 0])\n                cylinder(h=module_leg_length/2, d=module_leg_diameter*0.8);\n            \n            // Foot\n            translate([0, module_leg_length, -module_leg_length/4])\n                sphere(d=module_leg_diameter*1.2);\n        }\n    }\n}\n\n// Main body assembly\nunion() {\n    // Head\n    translate([-(module_body_length/2 + module_head_diameter/2), 0, 0])\n        head();\n    \n    // Body segments\n    for(i = [0:module_segment_count-1]) {\n        segment_pos = -(module_body_length/2) + i*(module_body_length/module_segment_count) + module_head_diameter/2;\n        segment_height = module_segment_height * (1 - i*0.05); // Tapering body\n        segment_width = module_segment_width * (1 - i*0.03);\n        body_segment(segment_height, segment_width, segment_pos);\n    }\n    \n    // Legs on alternating sides\n    for(i = [1:module_segment_count-2]) {\n        segment_pos = -(module_body_length/2) + i*(module_body_length/module_segment_count) + module_head_diameter/2;\n        \n        // Left side legs\n        if(i % 2 == 0) {\n            leg([segment_pos, -module_segment_width/2 - 1, -module_segment_height/2], 45);\n            leg([segment_pos, -module_segment_width/2 - 1, module_segment_height/2], 135);\n        }\n        // Right side legs\n        else {\n            leg([segment_pos, module_segment_width/2 + 1, -module_segment_height/2], -45);\n            leg([segment_pos, module_segment_width/2 + 1, module_segment_height/2], -135);\n        }\n    }\n    \n    // Tail fin for propulsion\n    translate([module_body_length/2 + module_head_diameter/2, 0, 0])\n        difference() {\n            // Main tail\n            rotate([0, 90, 0])\n                cylinder(h=module_head_diameter*1.5, d=module_head_diameter, center=true);\n            \n            // Fin cutouts\n            for(i = [0:2]) {\n                rotate([0, 0, i*120])\n                translate([0, 0, module_head_diameter/2])\n                    cube([module_head_diameter*2, 2, module_head_diameter], center=true);\n            }\n        }\n}",
    "renders": true
  },
  {
    "household_item": "novaswyrm",
    "openscad_code": "// Novaswyrm – medium-complexity realistic style\n// 80 mm long, printable in one piece, 0.8 mm wall thickness assumed\n\n$fn = 32;            // smooth curves\nbody_len = 60;       // overall length\nseg_num  = 8;        // body segments\nseg_len  = body_len/seg_num;\nhead_r   = 6;        // head sphere radius\nthorax_r = 4;        // thorax radius\nleg_len  = 12;       // leg segment length\nleg_th   = 1.4;      // leg thickness\nwing_span= 18;       // wing length\nwing_h   = 0.6;      // wing thickness\n\n// main assembly\nunion() {\n    body();\n    head();\n    legs();\n    wings();\n}\n\n// articulated body made of stacked ellipsoids\nmodule body() {\n    for(i=[0:seg_num-1]) {\n        hull() {\n            translate([0,0,i*seg_len])\n                scale([1, 0.8, 0.6])\n                    sphere(d=thorax_r*2);\n            translate([0,0,(i+1)*seg_len])\n                scale([1, 0.8, 0.6])\n                    sphere(d=thorax_r*2*(1-i*0.06)); // taper\n        }\n    }\n}\n\n// realistic head with mandibles and compound eyes\nmodule head() {\n    translate([0,0,body_len+seg_len/2])\n    union() {\n        // cranium\n        sphere(r=head_r);\n\n        // compound eyes (simple bumps)\n        for(side=[-1,1])\n            translate([side*head_r*0.7,head_r*0.6,head_r*0.3])\n                sphere(r=head_r*0.3);\n\n        // mandibles\n        for(side=[-1,1])\n            translate([side*head_r*0.8,-head_r*0.7,0])\n                rotate([0,side*25,0])\n                    cylinder(h=head_r*1.5, r1=1.2, r2=0.6);\n    }\n}\n\n// six thin legs in pairs\nmodule legs() {\n    pair = [[1,3], [3,5], [5,7]]; // segment indices for attachment\n    for(p=pair, side=[-1,1]) {\n        attach_z = p[1]*seg_len;\n        translate([side*thorax_r*1.1, -3, attach_z])\n            rotate([0,side*30,0])\n                leg(side);\n    }\n}\n\n// one leg made of 3 cylinders (printable without support)\nmodule leg(side) {\n    // coxa\n    rotate([0,0,side*20])\n        cylinder(h=leg_len/3, r=leg_th);\n\n    // femur\n    translate([0,0,leg_len/3])\n        rotate([0,40,0])\n            cylinder(h=leg_len/3, r=leg_th*0.9);\n\n    // tibia\n    translate([0,0,leg_len/3+leg_len/3*cos(40)])\n        rotate([0,70,0])\n            cylinder(h=leg_len/3, r=leg_th*0.8);\n}\n\n// two membranous wings\nmodule wings() {\n    attach_z = body_len*0.75;\n    for(side=[-1,1])\n        translate([side*thorax_r*1.3,0,attach_z])\n            rotate([0,side*10,0])\n                wing(side);\n}\n\nmodule wing(side) {\n    // thin tapered wing blade\n    linear_extrude(height=wing_h, center=true, convexity=10)\n        polygon([\n            [0,0],\n            [wing_span*0.9, wing_span*0.2],\n            [wing_span,0],\n            [wing_span*0.9,-wing_span*0.2],\n            [0,0]\n        ]);\n}",
    "renders": true
  },
  {
    "household_item": "supernovaserpent",
    "openscad_code": "// Supernovaserpent – realistic style, medium complexity (≈110 lines)\n// All dimensions in mm; max length ≈90 mm, wall ≥1 mm for FDM printing\n\n$fn = 32;          // smooth curves for realistic look\nwall = 1.2;        // printable wall thickness\nseg_len = 12;      // segment length along body\nbody_r = 5;        // main body radius\nring_r = 7;        // flare ring radius\nring_t = 1.5;      // flare ring thickness\n\n// ---------- Head module ----------\nmodule head() {\n    // skull core\n    difference() {\n        sphere(r = body_r * 1.1);\n        translate([0, 0, body_r * 0.7])\n            cube([body_r*2.2, body_r*2.2, body_r*1.5], center = true);\n    }\n\n    // snout\n    translate([body_r*0.9, 0, -body_r*0.2])\n        rotate([0, 40, 0])\n        cylinder(h = body_r*1.8, r1 = body_r*0.7, r2 = body_r*0.4);\n\n    // eye sockets (voids)\n    for (x = [body_r*0.7]) {\n        translate([x, body_r*0.6, body_r*0.2])\n            sphere(r = body_r*0.4);\n        translate([x, -body_r*0.6, body_r*0.2])\n            sphere(r = body_r*0.4);\n    }\n\n    // mouth slit\n    translate([body_r*0.3, 0, -body_r*0.7])\n        rotate([90, 0, 0])\n        cylinder(h = body_r*2, r = body_r*0.3, $fn = 6);\n}\n\n// ---------- Segment module ----------\nmodule segment(i, n) {\n    // progressive radius shrink\n    r = body_r * (1 - i*0.65/n);\n    \n    // main body cylinder\n    cylinder(h = seg_len, r = r);\n\n    // flare ring\n    translate([0, 0, seg_len*0.3])\n        difference() {\n            cylinder(h = ring_t, r = ring_r * (1 - i*0.5/n));\n            cylinder(h = ring_t + 0.1, r = r - wall);\n        }\n\n    // ventral fin pairs\n    for (y = [-1, 1]) {\n        translate([0, y*r*1.2, seg_len*0.5])\n            rotate([0, 15*y, 0])\n            linear_extrude(height = ring_t)\n                polygon(points = [[0,0], [r*0.8,0], [r*0.6, r*0.5]]);\n    }\n}\n\n// ---------- Tail tip ----------\nmodule tail_tip() {\n    cylinder(h = seg_len*1.5, r1 = body_r*0.35, r2 = 0);\n}\n\n// ---------- Build the serpent ----------\nunion() {\n    // head\n    head();\n    \n    // body segments\n    n = 6;  // number of segments\n    for (i = [0 : n-1]) {\n        translate([-(i+1)*seg_len, 0, 0])\n            segment(i, n);\n    }\n    \n    // tail\n    translate([-(n)*seg_len, 0, 0])\n        tail_tip();\n}",
    "renders": true
  },
  {
    "household_item": "quasarcoil",
    "openscad_code": "// QuasarCoil – medium-complexity realistic style\n// 3D-printable core + winding + mount, ~65 mm long\n\n$fn=32;\n\n// overall scaling factor\nscale = 1.0;\n\n// coil parameters\ncoil_dia   = 20 * scale;\ncoil_len   = 40 * scale;\nwire_dia   = 2.8 * scale;\nturns      = 12;\nwire_clear = 0.6 * scale;       // clearance between wires\nwall       = 1.5 * scale;       // printable wall thickness\ncore_dia   = coil_dia * 0.5;    // ferrite core diameter\nmount_w    = 15 * scale;\nmount_h    = 4  * scale;\nmount_lug  = 6  * scale;\n\n// ferrite core (simple cylinder)\nmodule core() {\n    difference() {\n        cylinder(h = coil_len + 4, d = core_dia, center=true);\n        // hollow center to reduce weight\n        cylinder(h = coil_len + 6, d = core_dia - wall*2, center=true);\n    }\n}\n\n// single winding turn\nmodule turn(z) {\n    translate([0, 0, z])\n        rotate_extrude()\n            translate([coil_dia/2, 0])\n                circle(d = wire_dia);\n}\n\n// full coil winding\nmodule winding() {\n    step = (coil_len - wire_dia) / (turns - 1);\n    union() {\n        for (i = [0 : turns-1]) {\n            turn(-coil_len/2 + wire_dia/2 + i*step);\n        }\n    }\n}\n\n// mount base with two screw holes\nmodule mount() {\n    difference() {\n        // base plate\n        cube([mount_w, mount_w, mount_h], center=true);\n        // screw holes (M3)\n        translate([mount_w/3, 0, -mount_h/2])\n            rotate([90,0,0])\n                cylinder(h = mount_w, d = 3.5, center=true);\n        translate([-mount_w/3, 0, -mount_h/2])\n            rotate([90,0,0])\n                cylinder(h = mount_w, d = 3.5, center=true);\n    }\n}\n\n// strain-relief lug\nmodule lug() {\n    difference() {\n        translate([0, -coil_dia/2 - mount_lug/2, coil_len/2 - mount_lug/2])\n            cube([wire_dia*2, mount_lug, mount_lug], center=true);\n        // wire channel\n        translate([0, -coil_dia/2 - mount_lug, coil_len/2 - mount_lug/2])\n            cube([wire_dia*1.2, mount_lug+1, mount_lug*1.2], center=true);\n    }\n}\n\n// assemble parts\nunion() {\n    color(\"darkslategray\") core();\n    color(\"copper\") winding();\n    translate([0, 0, -coil_len/2 - mount_h/2])\n        color(\"gray\") mount();\n    lug();\n}",
    "renders": true
  },
  {
    "household_item": "voidrattler",
    "openscad_code": "// OpenSCAD Voidrattler – 3D-printable, realistic style, medium complexity\n// Approx 75 mm long, printed in one piece with 0.8 mm walls and no steep overhangs\n\n$fn = 40;                       // Smooth curves\nbody_len = 45;\nbody_d   = 18;\nwall     = 1.6;                 // Dual-perimeter friendly\nseg      = 6;                   // Number of body segments\nring_d   = 22;\nring_t   = 3;\nrattle_d = 8;\nrattle_h = 12;\ntail_len = 25;\n\nmodule rounded_cube(s, r) {\n    // Simple rounded box primitive\n    hull() {\n        for(dx=[0,1], dy=[0,1], dz=[0,1])\n            translate([dx*(s.x-2*r), dy*(s.y-2*r), dz*(s.z-2*r)])\n                sphere(r);\n    }\n}\n\nmodule body_segment(len, dia) {\n    // Single bulbous segment with hollow core\n    difference() {\n        sphere(d = dia);                    // outer\n        translate([0,0,-dia/2-1])\n            cylinder(h=len+2, d=dia-2*wall);\n    }\n}\n\nmodule segmented_body() {\n    for(i=[0:seg-1]) {\n        translate([0,0,i*(body_len/seg)])\n            body_segment(body_len/seg, body_d - i*1.5); // taper\n    }\n}\n\nmodule rattle_chamber() {\n    // Internal rattle cavity with loose pellets\n    difference() {\n        sphere(d = rattle_d + wall*2);\n        sphere(d = rattle_d);\n    }\n    // Three small free pellets\n    for(a=[0:120:240])\n        rotate([90,0,a])\n            translate([rattle_d/3,0,0])\n                sphere(d = 2.5, $fn=12);\n}\n\nmodule tail() {\n    // Tapering tail with gentle curve\n    hull() {\n        translate([0,0,-tail_len])\n            sphere(d = body_d - 4);\n        sphere(d = body_d - 1);\n    }\n    // Hollow core through tail\n    translate([0,0,-tail_len/2])\n        rotate([90,0,0])\n            cylinder(h = tail_len + body_d, d = body_d - 2*wall - 2);\n}\n\nmodule ring() {\n    // Thick ring for key-ring attachment\n    rotate_extrude()\n        translate([ring_d/2, 0, 0])\n            circle(d = ring_t);\n}\n\nmodule voidrattler() {\n    union() {\n        // Main body\n        translate([0,0,body_len/2])\n            segmented_body();\n        \n        // Rattle chamber embedded in last segment\n        translate([0,0,body_len - body_len/seg/2])\n            rattle_chamber();\n        \n        // Tail\n        translate([0,0,body_len])\n            tail();\n        \n        // Attachment ring on top of first segment\n        translate([0,-body_d/2 - ring_d/2 + ring_t/2, body_len/seg/2])\n            ring();\n    }\n}\n\nvoidrattler();",
    "renders": true
  },
  {
    "household_item": "chaoslizard",
    "openscad_code": "// Chaoslizard - Realistic medium complexity\n// Dimensions: ~60mm long, ~25mm high, ~30mm wide\n\nmodule lizard() {\n    union() {\n        // Main body\n        body();\n        \n        // Head\n        head();\n        \n        // Tail\n        tail();\n        \n        // Legs\n        legs();\n    }\n}\n\nmodule body() {\n    // Central torso\n    translate([0, 0, 8]) {\n        scale([1.2, 0.8, 0.6]) sphere(d=20);\n    }\n    \n    // Body segments\n    for(i = [0:4]) {\n        translate([-5 + i*3, 0, 8 + sin(i*45)*2]) {\n            scale([1.1, 0.9 - i*0.1, 0.5]) sphere(d=18 - i);\n        }\n    }\n    \n    // Spine ridge\n    difference() {\n        union() {\n            for(i = [0:8]) {\n                translate([-12 + i*3, 0, 14 + sin(i*30)*1.5]) {\n                    rotate([0, -10 + i*5, 0]) \n                    scale([0.3, 1.2, 0.8]) sphere(d=4);\n                }\n            }\n        }\n        // Hollow for printing\n        for(i = [0:8]) {\n            translate([-12 + i*3, 0, 14.5 + sin(i*30)*1.5]) {\n                rotate([0, -10 + i*5, 0]) \n                scale([0.2, 1, 0.6]) sphere(d=2.5);\n            }\n        }\n    }\n}\n\nmodule head() {\n    translate([15, 0, 10]) {\n        rotate([0, -20, 0]) {\n            // Skull base\n            scale([1.3, 0.9, 0.8]) sphere(d=14);\n            \n            // Snout\n            translate([5, 0, -2]) {\n                scale([0.9, 0.6, 0.5]) sphere(d=10);\n            }\n            \n            // Eye sockets\n            difference() {\n                // Left eye\n                translate([2, 4, 2]) {\n                    sphere(d=4);\n                }\n                translate([2.5, 4.5, 2.5]) {\n                    sphere(d=3);\n                }\n            }\n            \n            difference() {\n                // Right eye\n                translate([2, -4, 2]) {\n                    sphere(d=4);\n                }\n                translate([2.5, -4.5, 2.5]) {\n                    sphere(d=3);\n                }\n            }\n            \n            // Jaw\n            translate([0, 0, -5]) {\n                scale([1, 1, 0.3]) sphere(d=10);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Tail segments getting smaller\n    for(i = [0:10]) {\n        translate([-15 - i*2.5, 0, 6 - i*0.5]) {\n            rotate([0, 0, sin(i*20)*5]) {\n                scale([1 - i*0.07, 1 - i*0.05, 1 - i*0.08]) \n                sphere(d=16 - i);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([8, side*6, 5]) {\n            rotate([0, 0, side*15]) {\n                union() {\n                    // Upper leg\n                    cylinder(h=8, d1=6, d2=5);\n                    \n                    // Lower leg\n                    translate([0, 0, -8]) {\n                        rotate([side*15, 0, 0]) {\n                            cylinder(h=7, d1=5, d2=4);\n                            \n                            // Foot\n                            translate([0, side*2, -7]) {\n                                rotate([side*20, 0, 0]) {\n                                    scale([1.5, 0.8, 0.5]) sphere(d=6);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([-8, side*7, 5]) {\n            rotate([0, 0, side*20]) {\n                union() {\n                    // Upper leg\n                    cylinder(h=10, d1=7, d2=6);\n                    \n                    // Lower leg\n                    translate([0, 0, -10]) {\n                        rotate([side*20, 0, 0]) {\n                            cylinder(h=8, d1=6, d2=5);\n                            \n                            // Foot\n                            translate([0, side*2.5, -8]) {\n                                rotate([side*25, 0, 0]) {\n                                    scale([1.8, 0.9, 0.6]) sphere(d=7);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the lizard\nlizard();",
    "renders": true
  },
  {
    "household_item": "darknessdrake",
    "openscad_code": "// Darknessdrake - realistic style, medium complexity\n// Designed for 3D printing (no overhangs, 1.2mm walls)\n\n$fn = 36;\n\n// Main body\nmodule body() {\n    // Central torso\n    difference() {\n        scale([1.2, 0.8, 1]) sphere(d=30);\n        // Chest cavity\n        translate([0, -5, 5]) scale([0.6, 0.6, 0.8]) sphere(d=20);\n    }\n    \n    // Ribcage ridges\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([0, 12, -5]) rotate([90, 0, 0]) \n                cylinder(h=15, d1=8, d2=3);\n        }\n    }\n    \n    // Spinal plates\n    for(i = [0:5]) {\n        translate([0, 0, -12 + i*4]) \n            scale([1.5, 0.5, 0.3]) sphere(d=6);\n    }\n}\n\n// Head\nmodule head() {\n    translate([0, -20, 15]) {\n        // Skull structure\n        difference() {\n            scale([1, 0.8, 1.2]) sphere(d=18);\n            // Eye sockets\n            translate([-6, -8, 0]) sphere(d=6);\n            translate([6, -8, 0]) sphere(d=6);\n            // Snout cavity\n            translate([0, -10, -3]) scale([0.8, 1.2, 0.6]) sphere(d=10);\n        }\n        \n        // Horns\n        translate([-8, -5, 12]) rotate([0, 20, -30]) \n            cylinder(h=12, d1=4, d2=2);\n        translate([8, -5, 12]) rotate([0, 20, 30]) \n            cylinder(h=12, d1=4, d2=2);\n            \n        // Lower jaw\n        translate([0, -15, -5]) rotate([20, 0, 0]) {\n            difference() {\n                scale([0.8, 0.6, 0.4]) sphere(d=14);\n                translate([0, -2, 0]) cube([12, 4, 8], center=true);\n            }\n        }\n    }\n}\n\n// Wings - foldable for printing\nmodule wing() {\n    // Wing arm\n    translate([0, 0, 0]) rotate([0, -30, 0]) \n        cylinder(h=25, d=6);\n    \n    // Wing membrane segments\n    for(i = [0:3]) {\n        rotate([0, 0, i*25]) {\n            translate([20 - i*5, 0, 0]) \n                scale([1, 0.1, 0.8]) sphere(d=8 + i*2);\n        }\n    }\n    \n    // Wing claws\n    translate([25, 0, 0]) rotate([0, 90, 0]) \n        cylinder(h=8, d1=3, d2=1);\n}\n\n// Legs\nmodule leg() {\n    // Upper leg\n    cylinder(h=15, d=8);\n    \n    // Lower leg\n    translate([0, 0, -15]) rotate([30, 0, 0]) \n        cylinder(h=12, d=6);\n    \n    // Foot\n    translate([0, 0, -27]) {\n        // Heel\n        sphere(d=8);\n        \n        // Toes\n        for(i = [-1:1]) {\n            rotate([0, 0, i*30]) {\n                translate([6, 0, 0]) rotate([0, 0, 45]) \n                    scale([1, 0.6, 0.6]) sphere(d=4);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    // Segments getting smaller\n    for(i = [0:4]) {\n        translate([0, 20 + i*8, -5 - i*3]) \n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15]) \n                sphere(d=12);\n    }\n    \n    // Tail spike\n    translate([0, 55, -8]) rotate([90, 0, 0]) \n        cylinder(h=8, d1=6, d2=0);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Left wing\n    translate([-15, 5, 10]) rotate([0, 0, 45]) wing();\n    \n    // Right wing\n    translate([15, 5, 10]) mirror([1, 0, 0]) rotate([0, 0, 45]) wing();\n    \n    // Left legs\n    translate([-8, 0, -15]) leg();\n    translate([-6, 8, -15]) scale([0.8, 0.8, 0.8]) leg();\n    \n    // Right legs\n    translate([8, 0, -15]) mirror([1, 0, 0]) leg();\n    translate([6, 8, -15]) scale([0.8, 0.8, 0.8]) mirror([1, 0, 0]) leg();\n    \n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "lightwyrm",
    "openscad_code": "// Lightwyrm – medium-complexity realistic style, 3D-printable\n// Overall length ≈ 90 mm, wingspan ≈ 85 mm, height ≈ 35 mm\n// No steep overhangs; minimum wall thickness ≈ 1.2 mm\n\n$fn = 36;\n\nmodule body_segment(r, h, taper = 1) {\n    // Basic tapered cylinder for body segments\n    cylinder(h = h, r1 = r, r2 = r * taper, center = true);\n}\n\nmodule spine() {\n    // Central spine made of 8 tapering segments\n    union() {\n        for (i = [0:7]) {\n            translate([0, 0, -i * 4])\n                body_segment(r = 12 - i * 1.2, h = 4, taper = 0.92);\n        }\n    }\n}\n\nmodule head() {\n    // Elongated head with snout\n    union() {\n        // Main cranial block\n        translate([0, 0, 5])\n            scale([1.1, 0.9, 1.2])\n                sphere(10);\n        // Snout\n        translate([0, 0, -8])\n            scale([0.7, 0.6, 1.5])\n                sphere(6);\n        // Lower jaw\n        difference() {\n            translate([0, 3, -9])\n                rotate([15, 0, 0])\n                    cube([14, 4, 10], center = true);\n            translate([0, 3, -6])\n                cube([16, 5, 12], center = true);\n        }\n    }\n}\n\nmodule neck() {\n    // Flexible neck connecting head to spine\n    cylinder(h = 18, r1 = 8, r2 = 12, center = false);\n}\n\nmodule eye() {\n    // Spherical eye with indented pupil\n    difference() {\n        sphere(3);\n        translate([-1, 0, 0])\n            sphere(2.2);\n    }\n}\n\nmodule eyes() {\n    // Pair of eyes on head\n    translate([5, 7, 7]) eye();\n    mirror([1, 0, 0])\n        translate([5, 7, 7]) eye();\n}\n\nmodule wing_rib(len, ang) {\n    // Single rib for wing membrane\n    rotate([0, 0, ang])\n        translate([len/2, 0, 0])\n            cube([len, 1.5, 0.8], center = true);\n}\n\nmodule wing() {\n    // One bat-like wing with radial ribs\n    union() {\n        // Main wing arm\n        cylinder(h = 28, r1 = 3, r2 = 2);\n        translate([0, 0, 28])\n            rotate([80, 0, 0])\n                cylinder(h = 22, r1 = 2, r2 = 1.2);\n        // Ribs for membrane support\n        for (a = [0:20:120])\n            wing_rib(24 - a/6, a);\n    }\n}\n\nmodule wings() {\n    // Attach two wings to the shoulder area\n    translate([-10, 0, 10])\n        rotate([0, 90, 0])\n            wing();\n    mirror([1, 0, 0])\n        translate([-10, 0, 10])\n            rotate([0, 90, 0])\n                wing();\n}\n\nmodule leg() {\n    // Simple digitigrade leg\n    union() {\n        // Thigh\n        cylinder(h = 12, r1 = 3, r2 = 2.5);\n        translate([0, 0, 12])\n            rotate([30, 0, 0])\n                cylinder(h = 10, r1 = 2.5, r2 = 2);\n        // Foot\n        translate([0, 0, 22])\n            rotate([50, 0, 0])\n                cube([8, 3, 2], center = true);\n    }\n}\n\nmodule legs() {\n    // Four legs attached to underside\n    translate([0, 0, -12]) leg();\n    translate([8, 0, -8]) leg();\n    mirror([1, 0, 0]) {\n        translate([0, 0, -12]) leg();\n        translate([8, 0, -8]) leg();\n    }\n}\n\nmodule tail_spike() {\n    // Sharp tail tip with gentle angles\n    cylinder(h = 15, r1 = 2, r2 = 0.5);\n}\n\nmodule tail() {\n    // Tapering tail ending in spike\n    union() {\n        for (i = [0:5]) {\n            translate([0, 0, -35 - i * 3])\n                body_segment(r = 5 - i * 0.6, h = 3, taper = 0.85);\n        }\n        translate([0, 0, -55])\n            tail_spike();\n    }\n}\n\n// Assemble the lightwyrm\nunion() {\n    // Central body structure\n    spine();\n    translate([0, 0, 30])\n        neck();\n    translate([0, 0, 45])\n        head();\n    eyes();\n    wings();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "spectralserpent",
    "openscad_code": "// SpectralSerpent - Realistic Medium Complexity\n// A ghostly, translucent serpent with spectral features\n\n// Configuration\n$fn = 32; // Resolution\nbody_length = 80;\nbody_diameter = 12;\nhead_length = 20;\nhead_diameter = 15;\n\n// Main module\nmodule spectralserpent() {\n    // Ghostly body segments\n    union() {\n        // Head\n        translate([0, 0, body_diameter/2]) {\n            spectral_head();\n        }\n        \n        // Body segments\n        for(i = [0:8]) {\n            translate([i*9, 0, 0]) {\n                rotate([0, i*8, 0]) {\n                    spectral_segment(i);\n                }\n            }\n        }\n        \n        // Tail\n        translate([80, 0, 0]) {\n            spectral_tail();\n        }\n    }\n}\n\n// Spectral head with hollow eyes\nmodule spectral_head() {\n    difference() {\n        // Main head\n        scale([1.2, 1, 1]) {\n            sphere(d=head_diameter);\n        }\n        \n        // Eyes - hollow sockets\n        translate([head_diameter/3, head_diameter/2.5, head_diameter/3]) {\n            sphere(d=head_diameter/3);\n        }\n        translate([-head_diameter/3, head_diameter/2.5, head_diameter/3]) {\n            sphere(d=head_diameter/3);\n        }\n        \n        // Mouth slit\n        translate([0, head_diameter/2, -head_diameter/4]) {\n            rotate([45, 0, 0]) {\n                cube([head_diameter/2, head_diameter/4, head_diameter/4], center=true);\n            }\n        }\n    }\n}\n\n// Spectral body segments with ribs\nmodule spectral_segment(index) {\n    thickness = body_diameter * 0.8;\n    \n    // Main body segment\n    difference() {\n        cylinder(h=body_length/10, d=body_diameter);\n        \n        // Hollow center for printability\n        cylinder(h=body_length/10 + 0.2, d=body_diameter - 2.5);\n    }\n    \n    // Spectral ribs\n    for(rib = [0:3]) {\n        rotate([0, rib*90, 0]) {\n            translate([0, 0, body_length/20]) {\n                difference() {\n                    cube([body_diameter*1.2, 1.5, body_length/10], center=true);\n                    cube([body_diameter*1.2 - 1, 1.5, body_length/10 + 0.2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Spectral tail tapering\nmodule spectral_tail() {\n    for(i = [0:4]) {\n        translate([i*3, 0, 0]) {\n            rotate([0, i*15, 0]) {\n                scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15]) {\n                    difference() {\n                        cylinder(h=5, d=body_diameter - i*1.5);\n                        cylinder(h=5.2, d=body_diameter - i*1.5 - 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ethereal wisps around the body\nmodule spectral_wisps() {\n    for(i = [0:12]) {\n        translate([i*7, sin(i*30)*5, cos(i*30)*5]) {\n            rotate([sin(i*45)*15, cos(i*45)*15, i*30]) {\n                difference() {\n                    sphere(d=body_diameter/3);\n                    sphere(d=body_diameter/3 - 1);\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete model\nunion() {\n    spectralserpent();\n    spectral_wisps();\n}",
    "renders": true
  },
  {
    "household_item": "ghostwyrm",
    "openscad_code": "// Ghostwyrm - Medium Complexity Realistic Style\n// A serpentine undead dragon with ethereal features\n\n// Overall dimensions\nlength = 85;\nwidth = 25;\nheight = 15;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body module\nmodule ghostwyrm_body() {\n    // Central spine\n    union() {\n        // Create undulating body segments\n        for (i = [0:10]) {\n            translate([i*7.5, 5*sin(i*30), 2*sin(i*45)]) {\n                rotate([0, 0, sin(i*25)*5]) {\n                    cylinder(h=8, r1=6-i*0.4, r2=5.5-i*0.4, $fn=8);\n                }\n            }\n        }\n        \n        // Tail segments\n        for (i = [0:5]) {\n            translate([78+i*3, 5*sin((10+i)*30), 2*sin((10+i)*45)]) {\n                rotate([0, 0, sin((10+i)*25)*5]) {\n                    cylinder(h=5, r1=4.5-i*0.7, r2=4-i*0.7, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Skull head with ethereal features\nmodule ghostwyrm_head() {\n    difference() {\n        union() {\n            // Main skull shape\n            scale([1.2, 0.8, 1]) sphere(r=8, $fn=16);\n            \n            // Snout extension\n            translate([6, 0, -1]) {\n                scale([1.5, 0.6, 0.7]) sphere(r=5, $fn=12);\n            }\n            \n            // Eye sockets placement\n            translate([-2, 4, 2]) sphere(r=2, $fn=8);\n            translate([-2, -4, 2]) sphere(r=2, $fn=8);\n            \n            // Horn nubs\n            translate([0, 0, 8]) cylinder(h=4, r=1.5, $fn=6);\n            translate([2, 3, 7]) cylinder(h=3, r=1, $fn=6);\n            translate([2, -3, 7]) cylinder(h=3, r=1, $fn=6);\n        }\n        \n        // Carve out eye sockets\n        translate([-2, 4, 2]) sphere(r=2.5, $fn=8);\n        translate([-2, -4, 2]) sphere(r=2.5, $fn=8);\n        \n        // Nostril cavities\n        translate([8, 1.5, -1]) rotate([0, 45, 0]) cylinder(h=3, r=0.8, $fn=6);\n        translate([8, -1.5, -1]) rotate([0, -45, 0]) cylinder(h=3, r=0.8, $fn=6);\n        \n        // Mouth opening\n        translate([4, 0, -5]) scale([2, 1.5, 0.8]) cube([6, 5, 3], center=true);\n    }\n}\n\n// Ribcage segments\nmodule ghostwyrm_ribs() {\n    for (i = [1:3:9]) {\n        translate([i*7.5, 0, -3]) {\n            difference() {\n                // Rib arch\n                union() {\n                    for (j = [0:3]) {\n                        rotate([0, j*90, 0]) {\n                            translate([0, 0, 3]) {\n                                rotate([90, 0, 0]) {\n                                    cylinder(h=5, r1=1, r2=0.5, $fn=4);\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                // Hollow center\n                cylinder(h=7, r=2, $fn=8);\n            }\n        }\n    }\n}\n\n// Spine ridge\nmodule spine_ridge() {\n    for (i = [0:10]) {\n        translate([i*7.5, 0, 5+2*sin(i*30)]) {\n            rotate([0, sin(i*25)*10, 0]) {\n                cylinder(h=2, r=1.2, $fn=6);\n            }\n        }\n    }\n}\n\n// Wing remnants\nmodule ethereal_wings() {\n    translate([15, 12, 5]) {\n        rotate([0, 0, -20]) {\n            // Left wing structure\n            difference() {\n                union() {\n                    // Main wing bone\n                    rotate([0, 90, 0]) cylinder(h=15, r=0.8, $fn=6);\n                    \n                    // Wing supports\n                    for (k = [0:2]) {\n                        rotate([0, 0, k*45]) {\n                            translate([0, 0, 5]) {\n                                rotate([0, -30, 0]) cylinder(h=10, r=0.5, $fn=4);\n                            }\n                        }\n                    }\n                }\n                \n                // Hollow sections\n                for (k = [0:2]) {\n                    rotate([0, 0, k*45]) {\n                        translate([0, 0, 5]) {\n                            rotate([0, -30, 0]) cylinder(h=10, r=0.3, $fn=4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Mirror for right wing\n    mirror([0, 1, 0]) {\n        translate([15, -12, 5]) {\n            rotate([0, 0, 20]) {\n                difference() {\n                    union() {\n                        rotate([0, 90, 0]) cylinder(h=15, r=0.8, $fn=6);\n                        for (k = [0:2]) {\n                            rotate([0, 0, k*45]) {\n                                translate([0, 0, 5]) {\n                                    rotate([0, -30, 0]) cylinder(h=10, r=0.5, $fn=4);\n                                }\n                            }\n                        }\n                    }\n                    for (k = [0:2]) {\n                        rotate([0, 0, k*45]) {\n                            translate([0, 0, 5]) {\n                                rotate([0, -30, 0]) cylinder(h=10, r=0.3, $fn=4);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the ghostwyrm\ntranslate([-40, 0, 0]) {\n    union() {\n        ghostwyrm_body();\n        translate([-8, 0, 5]) ghostwyrm_head();\n        ghostwyrm_ribs();\n        spine_ridge();\n        ethereal_wings();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "phantomhydra",
    "openscad_code": "// PhantomHydra – medium complexity, realistic style\n// ~65 mm tall, 3 mm minimum walls, self-supporting angles\n\n$fn = 36;                        // smooth curves without overhangs\nwall = 3;                        // printable wall thickness\n\n// overall scale factor\nscale(0.65) phantom_hydra();\n\nmodule phantom_hydra() {\n    union() {\n        body();\n        // five heads arranged radially, slightly different heights for realism\n        for(i=[0:4]) {\n            angle = i*72;\n            z_off = (i%2)*4;     // slight height variation\n            translate([0,0,z_off])\n            rotate([0,0,angle])\n            translate([22,0,0])\n            head();\n        }\n    }\n}\n\nmodule body() {\n    // slightly tapered main body, printed upright\n    cylinder(h1=20, h2=30, r1=18, r2=12, center=true);\n    // thicker base for stability\n    translate([0,0,-25])\n    cylinder(h=20, r=20, center=true);\n}\n\nmodule head() {\n    // avoid overhangs – print heads as separate parts or use gentle angles\n    difference() {\n        // skull-like elongated head\n        scale([1,0.8,1.2]) sphere(d=18);\n        // eye sockets – 45° safe difference\n        translate([-7,8,3]) rotate([45,0,0])\n            cylinder(h=10, d=6, center=true);\n        translate([7,8,3]) rotate([45,0,0])\n            cylinder(h=10, d=6, center=true);\n    }\n    // neck stub connecting to body\n    translate([0,-9,0])\n    cylinder(h=8, r1=3, r2=5, center=true);\n    // bony ridge along snout\n    for(i=[0:3]) {\n        translate([0,-5+i*3,8-i]) cube([12,2,2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "soulbasilisk",
    "openscad_code": "// Soulbasilisk - Realistic Style, Medium Complexity\n// A mythical winged serpent with soul-capturing eyes\n// Designed for 3D printing - 75mm length\n\n// Overall dimensions\nlength = 75;\nheight = 20;\nwidth = 35;\n\nmodule body() {\n    // Main serpentine body\n    union() {\n        // Head\n        translate([0, 0, 10])\n            scale([1.2, 1, 1])\n            sphere(8, $fn=32);\n        \n        // Neck\n        translate([-10, 0, 10])\n            rotate([0, 15, 0])\n            cylinder(h=12, r1=6, r2=4, $fn=16);\n        \n        // Body segments\n        for(i = [0:3]) {\n            translate([-22 - i*8, 0, 10 - i*1.5])\n                scale([1 - i*0.1, 1 - i*0.05, 1 - i*0.05])\n                sphere(6 - i*0.5, $fn=24);\n        }\n        \n        // Tail\n        translate([-48, 0, 4])\n            rotate([0, -20, 0])\n            cylinder(h=25, r1=4, r2=1, $fn=12);\n    }\n}\n\nmodule head_details() {\n    // Eyes - soul-capturing gems\n    translate([4, 4, 13])\n        sphere(3, $fn=16);\n    translate([4, -4, 13])\n        sphere(3, $fn=16);\n    \n    // Eye sockets\n    difference() {\n        translate([4, 4, 13])\n            sphere(3.5, $fn=16);\n        translate([4, 4, 15])\n            sphere(2.5, $fn=16);\n    }\n    \n    difference() {\n        translate([4, -4, 13])\n            sphere(3.5, $fn=16);\n        translate([4, -4, 15])\n            sphere(2.5, $fn=16);\n    }\n    \n    // Horns\n    translate([0, 6, 16])\n        rotate([30, 0, 10])\n        cylinder(h=8, r1=2, r2=0.5, $fn=8);\n    translate([0, -6, 16])\n        rotate([30, 0, -10])\n        cylinder(h=8, r1=2, r2=0.5, $fn=8);\n}\n\nmodule wings() {\n    // Left wing\n    translate([-25, 15, 15])\n        rotate([0, 0, -20])\n        union() {\n            // Main wing membrane\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                scale([1, 0.3, 1])\n                cylinder(h=20, r1=12, r2=2, $fn=3);\n            \n            // Wing bones\n            for(i = [0:2]) {\n                rotate([0, 0, i*30])\n                translate([0, 0, 0])\n                    cylinder(h=15, r1=1, r2=0.5, $fn=6);\n            }\n        }\n    \n    // Right wing\n    mirror([0, 1, 0])\n        translate([-25, 15, 15])\n        rotate([0, 0, -20])\n        union() {\n            // Main wing membrane\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                scale([1, 0.3, 1])\n                cylinder(h=20, r1=12, r2=2, $fn=3);\n            \n            // Wing bones\n            for(i = [0:2]) {\n                rotate([0, 0, i*30])\n                translate([0, 0, 0])\n                    cylinder(h=15, r1=1, r2=0.5, $fn=6);\n            }\n        }\n}\n\nmodule legs() {\n    // Front legs\n    translate([-15, 8, 0])\n        union() {\n            cylinder(h=10, r=2, $fn=12);\n            translate([0, 0, -2])\n                sphere(2.5, $fn=12);\n        }\n    \n    translate([-15, -8, 0])\n        union() {\n            cylinder(h=10, r=2, $fn=12);\n            translate([0, 0, -2])\n                sphere(2.5, $fn=12);\n        }\n    \n    // Rear legs\n    translate([-35, 6, 0])\n        union() {\n            cylinder(h=8, r=1.5, $fn=12);\n            translate([0, 0, -1.5])\n                sphere(2, $fn=12);\n        }\n    \n    translate([-35, -6, 0])\n        union() {\n            cylinder(h=8, r=1.5, $fn=12);\n            translate([0, 0, -1.5])\n                sphere(2, $fn=12);\n        }\n}\n\nmodule scales() {\n    // Scales along the body\n    for(i = [0:5]) {\n        translate([-15 - i*5, 0, 12 - i*1])\n            scale([1, 0.8, 0.3])\n            sphere(2, $fn=6);\n    }\n    \n    for(i = [0:5]) {\n        translate([-20 - i*5, 4, 11 - i*1])\n            scale([0.8, 0.6, 0.3])\n            sphere(1.5, $fn=6);\n    }\n    \n    for(i = [0:5]) {\n        translate([-20 - i*5, -4, 11 - i*1])\n            scale([0.8, 0.6, 0.3])\n            sphere(1.5, $fn=6);\n    }\n}\n\n// Assemble the soulbasilisk\nunion() {\n    body();\n    head_details();\n    wings();\n    legs();\n    scales();\n}",
    "renders": true
  },
  {
    "household_item": "spiritwyrm",
    "openscad_code": "// Spiritwyrm – medium-complexity realistic dragon model\n// Total length ≈ 90 mm, wingspan ≈ 80 mm, height ≈ 35 mm\n// Designed for FDM printing: no steep overhangs ≥ 45°, 1 mm wall thickness\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    // Torso\n    translate([0, 0, 12])\n        scale([1, 0.6, 0.5])\n        sphere(d = 30);\n\n    // Neck\n    translate([10, 0, 25])\n        rotate([0, 35, 0])\n        cylinder(h = 25, d1 = 10, d2 = 6, center = false);\n\n    // Tail\n    translate([-15, 0, 10])\n        rotate([0, -20, 0])\n        cylinder(h = 40, d1 = 10, d2 = 4, center = false);\n}\n\n// Head\nmodule head() {\n    translate([28, 0, 32])\n        rotate([0, 35, 0])\n        difference() {\n            // Snout\n            scale([1, 0.6, 0.6])\n            sphere(d = 12);\n            // Nostrils\n            translate([4, -2, 0])\n                rotate([0, 90, 0])\n                cylinder(h = 3, d = 2);\n            translate([4, 2, 0])\n                rotate([0, 90, 0])\n                cylinder(h = 3, d = 2);\n        }\n    // Horns\n    translate([22, -5, 42])\n        rotate([-25, 0, 45])\n        cylinder(h = 12, d = 3);\n    translate([22, 5, 42])\n        rotate([25, 0, -45])\n        cylinder(h = 12, d = 3);\n}\n\n// Wings – membrane supported by three fingers\nmodule wing(left = true) {\n    sign = left ? 1 : -1;\n    translate([0, sign * 20, 20])\n        rotate([0, -20, 0])\n        intersection() {\n            // Membrane\n            difference() {\n                scale([1, 2, 0.3])\n                sphere(d = 40);\n                translate([0, 0, -2])\n                    scale([0.8, 1.8, 1])\n                    sphere(d = 40);\n            }\n            // Bounding box to keep membrane flat\n            cube([50, 50, 1], center = true);\n        }\n\n    // Finger bones\n    for (i = [0 : 2]) {\n        rotate([0, 0, sign * (i * 25 - 25)])\n        translate([5, 0, 0])\n            rotate([0, 0, 90])\n            cylinder(h = 35, d = 2);\n    }\n\n    // Attachment strut\n    translate([0, sign * 5, 20])\n        rotate([0, 0, sign * 10])\n        cylinder(h = 10, d = 4);\n}\n\n// Legs\nmodule leg(front = true, left = true) {\n    sign = left ? 1 : -1;\n    x = front ? 10 : -10;\n    y = sign * 8;\n    translate([x, y, 5])\n        rotate([0, 0, sign * 5])\n        union() {\n            // Upper leg\n            cylinder(h = 15, d = 6);\n            // Lower leg\n            translate([0, 0, -15])\n                rotate([25, 0, 0])\n                cylinder(h = 12, d = 5);\n            // Foot\n            translate([0, 0, -27])\n                scale([1.2, 0.8, 0.6])\n                sphere(d = 8);\n        }\n}\n\n// Tail spikes\nmodule spikes() {\n    for (i = [1 : 4]) {\n        translate([-20 - i * 7, 0, 9 - i * 2])\n            rotate([0, 0, 180])\n            cylinder(h = 5, d1 = 0.5, d2 = 3);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wing(left = true);\n    wing(left = false);\n    leg(front = true,  left = true);\n    leg(front = true,  left = false);\n    leg(front = false, left = true);\n    leg(front = false, left = false);\n    spikes();\n}",
    "renders": true
  },
  {
    "household_item": "bonedrake",
    "openscad_code": "// Bonedrake - Realistic Style, Medium Complexity\n// 3D printable skeleton dragon model\n\n// Overall dimensions\noverall_length = 80;\noverall_height = 35;\noverall_width = 60;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Head module\nmodule head() {\n    // Skull base\n    difference() {\n        hull() {\n            cube([20, 15, 12], center=true);\n            translate([8, 0, -2]) cube([12, 10, 8], center=true);\n        }\n        \n        // Eye sockets\n        translate([-8, 6, 2]) sphere(3);\n        translate([-8, -6, 2]) sphere(3);\n        \n        // Nostril\n        translate([9, 0, 0]) rotate([0, 90, 0]) cylinder(h=3, r=1.5, $fn=8);\n    }\n    \n    // Snout ridge\n    translate([5, 0, 6]) cube([10, 4, 2]);\n    \n    // Lower jaw\n    translate([2, 0, -7]) {\n        rotate([15, 0, 0]) {\n            hull() {\n                cube([15, 12, 4], center=true);\n                translate([5, 0, -2]) cube([8, 8, 3], center=true);\n            }\n            \n            // Teeth\n            for(i=[-5:2.5:5]) {\n                translate([8, i, -2]) rotate([0, 0, 90]) cylinder(h=0.8, r=1.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Spine segment module\nmodule spine_segment(size, angle=0) {\n    translate([0, 0, size[2]/2]) {\n        rotate([angle, 0, 0]) {\n            difference() {\n                hull() {\n                    cube([size[0], size[1], size[2]], center=true);\n                    translate([0, 0, size[2]/2]) cube([size[0]*0.8, size[1]*0.8, size[2]*0.3], center=true);\n                }\n                translate([0, 0, -size[2]/2]) cube([size[0]+1, size[1]+1, 1], center=true);\n            }\n        }\n    }\n}\n\n// Rib module\nmodule rib(length, width) {\n    hull() {\n        cylinder(h=width, r=length/2, $fn=8);\n        translate([0, 0, length/2]) cube([width*2, width*2, width], center=true);\n    }\n}\n\n// Wing bone module\nmodule wing_bone() {\n    // Main wing bone structure\n    rotate([0, 30, 0]) {\n        for(i=[0:20:80]) {\n            translate([i, 0, -i*0.3]) {\n                rotate([0, -i*0.5, 0]) {\n                    hull() {\n                        cube([4, 3, 2], center=true);\n                        translate([10, 0, 0]) cube([2, 2, 1.5], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Wing membrane supports\n        for(i=[0:30:90]) {\n            rotate([0, i, 0]) {\n                translate([0, 0, -20]) cylinder(h=3, r=1);\n                translate([0, 0, -40]) cylinder(h=3, r=0.8);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(length) {\n    // Femur\n    translate([0, 0, length/2]) {\n        rotate([-30, 0, 0]) {\n            cylinder(h=length, r=3, $fn=8);\n            \n            // Tibia\n            translate([0, 0, length]) rotate([45, 0, 0]) cylinder(h=length*0.8, r=2.5, $fn=8);\n            \n            // Foot bones\n            translate([0, 0, length*1.8]) rotate([90, 0, 0]) {\n                for(i=[-15:15:15]) {\n                    rotate([0, i, 0]) {\n                        translate([0, 0, 8]) cylinder(h=8, r=1.2, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail(segments) {\n    for(i=[0:segments-1]) {\n        translate([-i*6, 0, -i*2]) {\n            scale([1 - i*0.05, 1 - i*0.05, 1 - i*0.05]) {\n                spine_segment([8 - i, 6 - i*0.5, 4 - i*0.3], -i*2);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([35, 0, 25]) head();\n    \n    // Spine\n    for(i=[0:5]) {\n        translate([25 - i*8, 0, 25 - i*3]) {\n            spine_segment([10 - i*0.5, 8 - i*0.3, 5 - i*0.2], -i*3);\n        }\n    }\n    \n    // Ribs\n    for(i=[0:3]) {\n        translate([15 - i*10, 0, 20 - i*3]) {\n            for(side=[-1,1]) {\n                translate([0, side*8, 0]) rotate([0, 90, 0]) rib(12 - i, 2);\n            }\n        }\n    }\n    \n    // Wings\n    translate([5, 20, 22]) wing_bone();\n    translate([5, -20, 22]) mirror([0,1,0]) wing_bone();\n    \n    // Front legs\n    translate([20, 12, 15]) leg(12);\n    translate([20, -12, 15]) leg(12);\n    \n    // Rear legs\n    translate([-5, 10, 10]) leg(10);\n    translate([-5, -10, 10]) leg(10);\n    \n    // Tail\n    translate([-15, 0, 10]) tail(8);\n}",
    "renders": true
  },
  {
    "household_item": "gravewyrm",
    "openscad_code": "// Gravewyrm – realistic style, medium complexity\n// 90 mm long, 40 mm wide, 35 mm high; printable without support\n\n$fn = 48;          // smooth curves\nwall = 1.4;        // 2×0.4 mm nozzle passes\n\nmodule skull() {\n    // cranium\n    union() {\n        difference() {\n            sphere(d = 22);\n            translate([0, 0, 11])\n                cube([30, 30, 25], center = true);\n        }\n        // snout\n        translate([-10, 0, -4])\n            scale([2, 1, 1])\n                sphere(d = 12);\n        // lower jaw\n        translate([-6, 0, -10])\n            rotate([15, 0, 0])\n                cube([18, 6, 8], center = true);\n    }\n}\n\nmodule rib(i, n, l) {\n    // i = index, n = total, l = length\n    angle = i * 360 / n;\n    x = cos(angle) * l;\n    y = sin(angle) * l;\n    translate([x, y, 0])\n        rotate([0, 0, angle])\n            scale([1, 0.7, 1])\n                cylinder(h = 20, d1 = 6, d2 = 2);\n}\n\nmodule spine() {\n    // vertebrae column\n    for (z = [0:5:30]) {\n        translate([0, 0, z])\n            rotate([0, 0, z * 3])\n                cylinder(h = 5, d = 5 + z / 4, $fn = 8);\n    }\n}\n\nmodule tail_segment(z) {\n    // tapering tail disks\n    diameter = max(10 - z * 0.4, 2);\n    translate([0, 0, z])\n        cylinder(h = 3, d = diameter);\n}\n\nmodule gravewyrm() {\n    // head\n    translate([-30, 0, 15])\n        skull();\n\n    // neck\n    translate([-15, 0, 15])\n        rotate([0, 0, -10])\n            cylinder(h = 15, d1 = 10, d2 = 6);\n\n    // torso with ribs\n    union() {\n        spine();\n        for (i = [0:11])\n            rib(i, 12, 8);\n    }\n\n    // tail\n    for (z = [30:3:90])\n        tail_segment(z);\n\n    // limbs (simple claws for printing)\n    // forelimb left\n    translate([0, 12, 10])\n        rotate([45, 0, -20])\n            cylinder(h = 18, d = 5);\n    translate([0, 12, 10])\n        rotate([45, 0, -20])\n            translate([0, 0, 18])\n                cylinder(h = 8, d = 3);\n\n    // forelimb right (mirrored)\n    mirror([0, 1, 0])\n        translate([0, 12, 10])\n            rotate([45, 0, 20])\n                cylinder(h = 18, d = 5);\n    mirror([0, 1, 0])\n        translate([0, 12, 10])\n            rotate([45, 0, 20])\n                translate([0, 0, 18])\n                    cylinder(h = 8, d = 3);\n\n    // hindlimbs\n    translate([20, 8, 5])\n        rotate([60, 0, 0])\n            cylinder(h = 15, d = 5);\n    translate([20, 8, 5])\n        rotate([60, 0, 0])\n            translate([0, 0, 15])\n                cylinder(h = 6, d = 3);\n\n    mirror([0, 1, 0])\n        translate([20, 8, 5])\n            rotate([60, 0, 0])\n                cylinder(h = 15, d = 5);\n    mirror([0, 1, 0])\n        translate([20, 8, 5])\n            rotate([60, 0, 0])\n                translate([0, 0, 15])\n                    cylinder(h = 6, d = 3);\n}\n\n// render the creature flat on the bed\nrotate([90, 0, 0])\n    gravewyrm();",
    "renders": true
  },
  {
    "household_item": "deathcoil",
    "openscad_code": "// Deathcoil model - medium complexity realistic style\n// Overall dimensions approximately 80mm tall\n\n// Parameters\ncoil_height = 80;\ncoil_diameter = 35;\nhandle_length = 45;\nhandle_diameter = 12;\nblade_length = 65;\nblade_width = 25;\nblade_thickness = 4;\n\n// Main module\nmodule deathcoil() {\n    // Coil body - segmented cylinder with grooves\n    union() {\n        // Base cylinder for coil\n        cylinder(h=coil_height, d=coil_diameter, $fn=64);\n        \n        // Add grooves around coil\n        for(i = [0:15:345]) {\n            rotate([0, 0, i])\n            translate([0, coil_diameter/2 - 2, -1])\n            cube([2, 4, coil_height + 2], center=true);\n        }\n        \n        // Top rim detail\n        translate([0, 0, coil_height])\n        cylinder(h=5, d1=coil_diameter, d2=coil_diameter + 4, $fn=64);\n    }\n    \n    // Handle grip\n    translate([0, 0, coil_height + 5])\n    cylinder(h=handle_length, d=handle_diameter, $fn=32);\n    \n    // Handle grip rings\n    for(z = [coil_height + 10:8:coil_height + 40]) {\n        translate([0, 0, z])\n        cylinder(h=3, d=handle_diameter + 2, $fn=32);\n    }\n    \n    // Blade mount\n    translate([0, 0, coil_height + handle_length + 5])\n    cylinder(h=8, d1=handle_diameter + 6, d2=handle_diameter + 4, $fn=32);\n    \n    // Curved blade\n    difference() {\n        // Main blade shape\n        union() {\n            // Blade base\n            translate([0, 0, coil_height + handle_length + 13])\n            cylinder(h=10, d1=handle_diameter + 6, d2=blade_width, $fn=32);\n            \n            // Curved blade body\n            for(i = [0:5:blade_length]) {\n                translate([0, \n                          sin(i * 3) * 5, \n                          coil_height + handle_length + 20 + i])\n                scale([1 - i/blade_length/2, \n                      1 - i/blade_length/2, \n                      1])\n                cube([blade_width * (1 - i/blade_length), \n                     blade_thickness, \n                     5], center=true);\n            }\n        }\n        \n        // Blade edge bevel\n        translate([-blade_width/2, -blade_thickness/2, coil_height + handle_length + 15])\n        cube([blade_width, blade_thickness, blade_length]);\n        translate([-blade_width/2 + 1, -blade_thickness/2 + 1, coil_height + handle_length + 15])\n        cube([blade_width - 2, blade_thickness - 2, blade_length - 5]);\n        \n        // Decorative cutouts in blade\n        for(i = [10:15:50]) {\n            translate([0, 0, coil_height + handle_length + 25 + i])\n            rotate([0, 0, i * 2])\n            cylinder(h=5, d=3, $fn=16);\n        }\n    }\n    \n    // Energy orb at base\n    translate([0, 0, -8])\n    difference() {\n        sphere(d=20, $fn=32);\n        cylinder(h=10, d=25, $fn=32);\n    }\n    \n    // Decorative spikes around orb\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([coil_diameter/2 - 5, 0, -12])\n        rotate([90, 0, 0])\n        cylinder(h=8, d1=3, d2=1, $fn=8);\n    }\n}\n\n// Render the model\ndeathcoil();",
    "renders": true
  },
  {
    "household_item": "doomserpent",
    "openscad_code": "// Doomserpent - realistic style, medium complexity\n// Size: 80mm long, 40mm high, 30mm wide\n\n// Body segments\nmodule body_segment(radius, length, offset) {\n    translate([0, 0, offset]) {\n        difference() {\n            // Main body cylinder\n            cylinder(h=length, r1=radius, r2=radius*0.9, $fn=20);\n            \n            // Undercut for support\n            translate([0, 0, length-2])\n                cylinder(h=2, r1=radius*0.7, r2=radius*0.7, $fn=20);\n        }\n    }\n}\n\n// Scales\nmodule scales(segment_pos, angle) {\n    for(i=[0:3]) {\n        rotate([0, 0, angle + i*90])\n            translate([segment_pos*8, 0, 0])\n                scale([1, 0.6, 0.3])\n                    sphere(3, $fn=12);\n    }\n}\n\n// Head\nmodule head() {\n    union() {\n        // Main head\n        translate([0, 0, 0])\n            scale([1.8, 1.2, 1])\n                sphere(8, $fn=20);\n        \n        // Snout\n        translate([12, 0, 0])\n            scale([2, 0.8, 0.6])\n                sphere(6, $fn=16);\n        \n        // Horns\n        for(i=[-1, 1]) {\n            translate([5, i*6, 5])\n                rotate([0, 20*i, 0])\n                    cylinder(h=8, r1=3, r2=1, $fn=8);\n        }\n        \n        // Eyes\n        for(i=[-1, 1]) {\n            translate([8, i*4, 3])\n                difference() {\n                    sphere(2.5, $fn=12);\n                    translate([0, 0, -1.5])\n                        cube(5, center=true);\n                }\n        }\n    }\n}\n\n// Tail spike\nmodule tail_spike() {\n    translate([-35, 0, 0])\n        rotate([0, 0, 180])\n            cylinder(h=8, r1=2, r2=0.5, $fn=8);\n}\n\n// Leg modules\nmodule leg(side) {\n    translate([side*12, 0, -10]) {\n        // Upper leg\n        rotate([0, 30*side, 0])\n            cylinder(h=8, r=3, $fn=12);\n        \n        // Lower leg\n        translate([side*6, 0, -8])\n            rotate([0, -30*side, 0])\n                cylinder(h=10, r=2.5, $fn=12);\n        \n        // Foot\n        translate([side*10, 0, -18])\n            scale([1.5, 1, 0.5])\n                sphere(4, $fn=12);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    for(i=[0:4]) {\n        body_segment(12-i*1.5, 8, i*8);\n    }\n    \n    // Scales along body\n    for(j=[0:3]) {\n        for(i=[0:4]) {\n            scales(i*8-16, j*22.5);\n        }\n    }\n    \n    // Head\n    translate([25, 0, 15])\n        head();\n    \n    // Tail\n    translate([-32, 0, 0])\n        tail_spike();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Spinal ridge\n    for(i=[-25:5:25]) {\n        translate([i, 0, 12+abs(i)*0.1])\n            scale([1, 0.5, 0.3])\n                sphere(3, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "fatewyrm",
    "openscad_code": "// Fatewyrm - Realistic Style, Medium Complexity\n// 3D printable model with no overhangs\n\n$fn = 32;\nscale_factor = 0.8;\n\n// Main body\nmodule body() {\n    // Central torso\n    difference() {\n        union() {\n            // Main torso segment\n            translate([0, 0, 5])\n                scale([1.2, 1, 1])\n                sphere(d=25);\n            \n            // Extended segments\n            for(i = [0:2]) {\n                translate([0, 0, i*8])\n                    scale([1.2 - i*0.15, 1 - i*0.1, 0.8])\n                    sphere(d=20 - i*3);\n            }\n        }\n        \n        // Hollow for printing\n        translate([0, 0, 5])\n            scale([1.1, 0.9, 0.9])\n            sphere(d=20);\n    }\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Main head\n        translate([0, 0, 30])\n            scale([0.8, 0.6, 1])\n            sphere(d=20);\n        \n        // Snout\n        translate([0, -12, 28])\n            rotate([30, 0, 0])\n            scale([0.6, 0.4, 1.2])\n            cylinder(h=15, d1=12, d2=8);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([side*8, -5, 32])\n                sphere(d=4);\n        }\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([side*10, 0, 35])\n                rotate([0, side*20, 0])\n                cylinder(h=15, d1=8, d2=4);\n        }\n    }\n}\n\n// Wing structure - folded for printing\nmodule wing() {\n    translate([-25, 0, 15])\n        rotate([0, 90, 0])\n        difference() {\n            // Wing membrane\n            scale([1, 0.8, 0.1])\n            sphere(d=20);\n            \n            // Cutout pattern\n            for(i = [0:2]) {\n                rotate([0, 0, i*30])\n                translate([5 + i*3, 0, 0])\n                    scale([0.3, 0.5, 1])\n                    cube([8, 15, 2], center=true);\n            }\n        }\n}\n\n// Leg segment\nmodule leg_segment(length, width) {\n    cylinder(h=length, d=width);\n}\n\n// Leg assembly\nmodule leg() {\n    translate([10, 0, 0])\n    rotate([90, 0, 0])\n    union() {\n        // Upper leg\n        leg_segment(15, 8);\n        \n        // Knee joint\n        translate([0, 0, 15])\n            sphere(d=8);\n        \n        // Lower leg\n        translate([0, 0, 15])\n            rotate([20, 0, 0])\n            leg_segment(12, 6);\n        \n        // Foot\n        translate([0, 0, 27])\n            rotate([20, 0, 0])\n            scale([1.5, 1, 0.5])\n            cube([10, 6, 3], center=true);\n    }\n}\n\n// Tail segments\nmodule tail() {\n    for(i = [0:4]) {\n        translate([0, 0, -i*8 - 5])\n            scale([1 - i*0.15, 1 - i*0.15, 1])\n            sphere(d=20 - i*4);\n    }\n}\n\n// Scale detail\nmodule scales() {\n    for(i = [0:10]) {\n        rotate([0, 0, i*36])\n        translate([12, 0, 5 + i*2])\n            scale([0.3, 0.3, 0.1])\n            sphere(d=3);\n    }\n}\n\n// Main assembly\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    \n    // Wings - symmetric\n    wing();\n    mirror([1, 0, 0])\n        wing();\n    \n    // Legs - four total\n    for(side = [-1, 1]) {\n        for(pos = [0, 1]) {\n            translate([0, side*10, pos*5])\n                rotate([0, 0, side*pos*15])\n                leg();\n        }\n    }\n    \n    tail();\n    \n    // Detail scales on body\n    scales();\n}",
    "renders": true
  },
  {
    "household_item": "timewyrm",
    "openscad_code": "$fn=32;\n\n// Timewyrm parameters\nbody_length = 50;\nbody_height = 25;\nhead_size = 12;\ntail_segments = 8;\nsegment_length = body_length/tail_segments;\nneck_length = 8;\nwall_thickness = 2;\n\n// Main body module\nmodule timewyrm_body() {\n    // Central spine\n    for(i=[0:tail_segments-1]) {\n        translate([i*segment_length, 0, 0]) {\n            scale([1, 1-(i*0.08), 1-(i*0.05)]) {\n                rotate([0, i*8, 0]) {\n                    difference() {\n                        cylinder(h=segment_length, r1=body_height/2-i, r2=body_height/2-i-1);\n                        translate([0, 0, -1]) cylinder(h=segment_length+2, r1=body_height/2-i-wall_thickness, r2=body_height/2-i-1-wall_thickness);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Head module\nmodule timewyrm_head() {\n    translate([body_length+neck_length, 0, 0]) {\n        rotate([0, -15, 0]) {\n            // Main head shape\n            difference() {\n                sphere(r=head_size);\n                translate([head_size/2, 0, 0]) sphere(r=head_size-wall_thickness);\n            }\n            \n            // Snout\n            translate([head_size, 0, 0]) {\n                difference() {\n                    cylinder(h=head_size/2, r1=head_size/2, r2=head_size/3);\n                    translate([0, 0, -1]) cylinder(h=head_size/2+2, r1=head_size/2-wall_thickness, r2=head_size/3-wall_thickness);\n                }\n            }\n            \n            // Eyes\n            for(side=[-1, 1]) {\n                translate([head_size/2, side*head_size/2, head_size/3]) {\n                    rotate([0, 90, 0]) {\n                        difference() {\n                            cylinder(h=head_size/3, r=head_size/6);\n                            translate([0, 0, -1]) cylinder(h=head_size/3+2, r=head_size/6-wall_thickness);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leg modules\nmodule timewyrm_legs() {\n    for(side=[-1, 1]) {\n        // Front legs\n        translate([body_length*0.7, side*body_height/2, -body_height/2]) {\n            rotate([0, 0, side*30]) {\n                difference() {\n                    cylinder(h=body_height/1.5, r=body_height/4);\n                    translate([0, 0, -1]) cylinder(h=body_height/1.5+2, r=body_height/4-wall_thickness);\n                }\n            }\n        }\n        \n        // Back legs\n        translate([body_length*0.2, side*body_height/2, -body_height/2]) {\n            rotate([0, 0, side*45]) {\n                difference() {\n                    cylinder(h=body_height/2, r=body_height/5);\n                    translate([0, 0, -1]) cylinder(h=body_height/2+2, r=body_height/5-wall_thickness);\n                }\n            }\n        }\n    }\n}\n\n// Wing modules\nmodule timewyrm_wings() {\n    for(side=[-1, 1]) {\n        translate([body_length*0.6, side*body_height/2, body_height/3]) {\n            rotate([0, 0, side*-20]) {\n                // Wing base\n                difference() {\n                    cube([body_length/2, wall_thickness*4, body_height/1.5]);\n                    translate([wall_thickness, -1, wall_thickness]) cube([body_length/2-wall_thickness*2, wall_thickness*4+2, body_height/1.5-wall_thickness*2]);\n                }\n                \n                // Wing membranes\n                for(i=[1:3]) {\n                    translate([i*body_length/8, 0, i*body_height/6]) {\n                        rotate([0, i*10, 0]) {\n                            difference() {\n                                cube([body_length/3, wall_thickness, body_height/2-i*2]);\n                                translate([wall_thickness, -1, wall_thickness]) cube([body_length/3-wall_thickness*2, wall_thickness+2, body_height/2-i*2-wall_thickness*2]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Spine ridge\nmodule timewyrm_spine() {\n    for(i=[0:tail_segments-1]) {\n        translate([i*segment_length+segment_length/2, 0, body_height/2-i*0.5]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=body_height/4-i*0.2, r1=wall_thickness*2, r2=wall_thickness);\n                    translate([0, 0, -1]) cylinder(h=body_height/4-i*0.2+2, r1=wall_thickness, r2=wall_thickness-1);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    timewyrm_body();\n    timewyrm_head();\n    timewyrm_legs();\n    timewyrm_wings();\n    timewyrm_spine();\n}",
    "renders": true
  },
  {
    "household_item": "memorydrake",
    "openscad_code": "// MemoryDrake – realistic USB flash-drive in OpenSCAD\n// Overall length ≈ 65 mm, fits on most beds\n// Designed for printing flat: plug down, no support needed\n\n$fn = 36;               // smooth curves\nwall = 1.2;             // 3-perimeter wall thickness\n\n// ---------- module: rounded box ----------\nmodule roundedBox(size, r) {\n    translate([r, r, 0])\n    minkowski() {\n        cube([size.x-2*r, size.y-2*r, size.z]);\n        cylinder(h=size.z, r=r, center=true);\n    }\n}\n\n// ---------- module: key-ring loop ----------\nmodule keyLoop() {\n    difference() {\n        rotate([90,0,0])\n            cylinder(h=3, d=6, center=true);   // main ring\n        rotate([90,0,0])\n            cylinder(h=4, d=2.2, center=true); // 2 mm hole\n    }\n}\n\n// ---------- module: plug shell ----------\nmodule plugShell() {\n    // outer shell\n    translate([0,0,6.35])\n        roundedBox([15, 12, 7.1], 1);\n\n    // inner cavity\n    translate([0,0,6.35+wall])\n        roundedBox([15-2*wall, 12-2*wall, 7.1-wall], 1);\n\n    // tongue\n    translate([0,0,7.1+6.35])\n        cube([12, 9, 6.35], center=true);\n}\n\n// ---------- module: PCB contacts ----------\nmodule contacts() {\n    for(i=[0:3])\n        translate([3.25 + i*2.5, 0, 7.1+6.35+0.3])\n            cube([1.5, 9, 0.05], center=true);\n}\n\n// ---------- module: case halves ----------\nmodule caseHalf() {\n    difference() {\n        // main body\n        hull() {\n            translate([-25, -9, 0])\n                sphere(d=18);\n            translate([10, -9, 0])\n                sphere(d=18);\n            translate([-25, 9, 0])\n                sphere(d=18);\n            translate([10, 9, 0])\n                sphere(d=18);\n        }\n\n        // cavity\n        offset = 2;\n        hull() {\n            translate([-25+offset, -9+offset, wall])\n                sphere(d=18-2*offset);\n            translate([10-offset, -9+offset, wall])\n                sphere(d=18-2*offset);\n            translate([-25+offset, 9-offset, wall])\n                sphere(d=18-2*offset);\n            translate([10-offset, 9-offset, wall])\n                sphere(d=18-2*offset);\n        }\n    }\n}\n\n// ---------- assembly ----------\ndifference() {\n    union() {\n        // bottom shell\n        caseHalf();\n\n        // plug\n        translate([30,0,0])\n            plugShell();\n\n        // key-ring nub\n        translate([-34,0,0])\n            keyLoop();\n    }\n\n    // remove plug cavity from body\n    translate([30,0,6.35])\n        roundedBox([15+0.2, 12+0.2, 7.1+0.2], 1.2);\n}\n\n// contacts\ntranslate([30,0,0])\n    contacts();",
    "renders": true
  },
  {
    "household_item": "dreamserpent",
    "openscad_code": "// DreamSerpent - Realistic Style, Medium Complexity\n// 3D printable serpent with coiled body and detailed head\n\nmodule serpent_head() {\n    // Main head structure\n    translate([0, 0, 5]) {\n        // Skull base\n        difference() {\n            sphere(d=12);\n            translate([6, 0, 0]) sphere(d=11);\n        }\n        \n        // Snout\n        translate([3, 0, -2]) {\n            scale([2, 1, 0.8]) sphere(d=8);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([2, side*4, 1]) {\n                rotate([0, 90, 0]) cylinder(h=1, d=3);\n            }\n        }\n        \n        // Nostrils\n        for(side = [-1, 1]) {\n            translate([5, side*2, -1]) {\n                rotate([0, 90, 0]) cylinder(h=2, d=1.5);\n            }\n        }\n    }\n}\n\nmodule serpent_body_segment(radius, height) {\n    // Scaled cylinder for body segment\n    scale([1, 1.2, 1]) cylinder(h=height, r=radius, $fn=16);\n}\n\nmodule serpent_body() {\n    // Coiled body using parametric spiral\n    segments = 20;\n    for(i = [0:segments-1]) {\n        angle = i * 30;\n        radius = 25 - i * 0.8;\n        height = i * 1.5;\n        \n        translate([\n            radius * cos(angle),\n            radius * sin(angle),\n            height\n        ]) {\n            rotate([0, 0, angle + 90]) {\n                serpent_body_segment(5 - i*0.15, 6);\n            }\n        }\n    }\n}\n\nmodule serpent_tail() {\n    // Tapered tail segments\n    for(i = [0:8]) {\n        translate([\n            (20 - i*2.5) * cos(i*45),\n            (20 - i*2.5) * sin(i*45),\n            30 + i*1.2\n        ]) {\n            rotate([0, 0, i*45 + 90]) {\n                serpent_body_segment(3 - i*0.25, 5);\n            }\n        }\n    }\n}\n\nmodule dorsal_scales() {\n    // Scale pattern along body\n    for(j = [0:3]) {\n        for(i = [0:segments-1]) {\n            angle = i * 30 + j*10;\n            radius = 25 - i * 0.8;\n            \n            translate([\n                (radius + 5) * cos(angle),\n                (radius + 5) * sin(angle),\n                i * 1.5 + 3\n            ]) {\n                rotate([90, 0, angle + 90]) {\n                    scale([1, 1.5, 0.5]) \n                    cylinder(h=2, r1=1.5, r2=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Head positioned at top of coil\n    translate([25, 0, 32]) {\n        rotate([0, -20, 0]) serpent_head();\n    }\n    \n    // Body\n    serpent_body();\n    \n    // Tail\n    serpent_tail();\n    \n    // Dorsal scales\n    dorsal_scales();\n}\n\n// Base platform for stability\ntranslate([0, 0, -2]) {\n    cylinder(h=2, r=30, $fn=32);\n}",
    "renders": true
  },
  {
    "household_item": "nightmarewyrm",
    "openscad_code": "// Nightmarewyrm - Realistic Style, Medium Complexity\n// Overall size: ~80mm wingspan, 60mm length\n\n$fn = 32;\n\nmodule body_base() {\n    // Main serpentine body\n    hull() {\n        translate([-20, 0, 10]) sphere(d=12);\n        translate([0, 0, 15]) sphere(d=15);\n        translate([20, 0, 12]) sphere(d=12);\n        translate([35, 0, 8]) sphere(d=10);\n    }\n}\n\nmodule spine_plates() {\n    // Jagged spinal ridge\n    for(i = [-20:10:30]) {\n        translate([i, 0, 22 + sin(i/5)*3]) \n            rotate([0, 0, i*2]) \n            scale([1, 0.3, 2]) \n            cylinder(d1=6, d2=3, h=8);\n    }\n}\n\nmodule head_detail() {\n    // Dragon-like head with horns and snout\n    union() {\n        // Snout\n        translate([-30, 0, 15]) \n            scale([2, 1.5, 1.5]) \n            sphere(d=8);\n        \n        // Main head\n        translate([-25, 0, 20]) \n            sphere(d=12);\n        \n        // Horns\n        for(a = [-40,-20,0,20,40]) {\n            rotate([0, 0, a]) \n            translate([-25, 8, 25]) \n                rotate([a/2 - 10, 0, 0]) \n                cylinder(d1=3, d2=1, h=12);\n        }\n        \n        // Eyes\n        for(side = [-1,1]) {\n            translate([-25, side*6, 22]) \n                sphere(d=3);\n            translate([-25.5, side*6.5, 22.5]) \n                sphere(d=1.5);\n        }\n    }\n}\n\nmodule wing() {\n    // Bat-like wing with membrane\n    difference() {\n        // Wing membrane\n        hull() {\n            translate([0, 0, 25]) sphere(d=3);\n            translate([15, 25, 20]) sphere(d=2);\n            translate([30, 35, 15]) sphere(d=2);\n            translate([40, 30, 10]) sphere(d=2);\n            translate([35, 15, 5]) sphere(d=3);\n        }\n        \n        // Wing fingers\n        for(i = [0:3]) {\n            rotate([0, 0, i*25]) \n                translate([20 + i*5, 20, 15]) \n                    cylinder(d=2, h=20);\n        }\n        \n        // Cut membrane holes\n        for(i = [0:2]) {\n            rotate([0, 0, i*20 + 10]) \n                translate([25 + i*5, 22, 15]) \n                    scale([1, 0.2, 0.5]) \n                    sphere(d=8);\n        }\n    }\n}\n\nmodule tail_segment(pos) {\n    // Segmented tail with spikes\n    rotate([0, 0, pos*3]) {\n        translate([40 + pos*8, 0, max(8 - pos/2, 2)]) {\n            sphere(d=max(10 - pos, 4));\n            \n            // Tail spikes\n            for(a = [0:120:240]) {\n                rotate([0, 0, a]) \n                    translate([0, 5, 0]) \n                    rotate([90, 0, 0]) \n                    cylinder(d1=3, d2=1, h=6);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Four clawed legs\n    for(side = [-1,1]) {\n        for(pos = [-10, 20]) {\n            translate([pos, side*8, 5]) {\n                // Upper leg\n                cylinder(d=6, h=10);\n                \n                // Lower leg\n                translate([0, 0, 5]) \n                    rotate([side*30, 0, 0]) \n                    cylinder(d=4, h=12);\n                \n                // Foot with claws\n                translate([0, 0, 11]) {\n                    hull() {\n                        sphere(d=4);\n                        translate([0, 0, -3]) sphere(d=6);\n                    }\n                    \n                    // Claws\n                    for(claw = [-2, 0, 2]) {\n                        translate([claw, 0, -3]) \n                            rotate([0, 90, 0]) \n                            cylinder(d1=2, d2=0.5, h=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body_base();\n    spine_plates();\n    head_detail();\n    \n    // Wings\n    for(side = [-1,1]) {\n        translate([5, 0, 20]) \n            mirror([0, side, 0]) \n            wing();\n    }\n    \n    // Tail segments\n    for(i = [0:5]) {\n        tail_segment(i);\n    }\n    \n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "illusionhydra",
    "openscad_code": "// IllusionHydra - Medium complexity realistic style\n// Features three heads with overlapping optical illusion necks\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nhead_size = 18;\nneck_length = 35;\nbase_diameter = 50;\nbase_height = 8;\nwall_thickness = 2;\n\n// Central base\nmodule base() {\n    difference() {\n        cylinder(h=base_height, d=base_diameter, $fn=64);\n        translate([0, 0, -1]) cylinder(h=base_height+2, d=base_diameter-wall_thickness*2, $fn=64);\n    }\n}\n\n// Dragon head with snout\nmodule dragon_head() {\n    // Main head sphere\n    sphere(d=head_size, $fn=32);\n    \n    // Snout\n    translate([head_size/2, 0, 0]) \n        scale([1.5, 0.7, 0.6]) \n        sphere(d=head_size*0.7, $fn=32);\n    \n    // Horns\n    for(i=[-1, 1]) {\n        translate([0, i*head_size/3, head_size/2]) {\n            rotate([i*15, 0, 0]) \n                cylinder(h=head_size/2, d1=3, d2=1, $fn=8);\n        }\n    }\n    \n    // Eyes\n    for(i=[-1, 1]) {\n        translate([head_size/3, i*head_size/3, head_size/6]) \n            sphere(d=2, $fn=12);\n    }\n}\n\n// Twisted neck segment\nmodule neck_segment(twist_angle) {\n    linear_extrude(height=neck_length/3, twist=twist_angle, $fn=32)\n        offset(delta=wall_thickness) \n            offset(delta=-wall_thickness) \n                circle(d=head_size*0.7);\n}\n\n// Main illusion neck\nmodule illusion_neck(angle, offset_x, offset_y) {\n    translate([offset_x, offset_y, base_height]) {\n        rotate([0, 0, angle]) {\n            // First segment - straight\n            neck_segment(0);\n            \n            // Second segment - twist starts\n            translate([0, 0, neck_length/3]) \n                neck_segment(30);\n            \n            // Third segment - full twist\n            translate([0, 0, 2*neck_length/3]) \n                neck_segment(60);\n            \n            // Head at top\n            translate([0, 0, neck_length]) \n                dragon_head();\n        }\n    }\n}\n\n// Render the complete illusion hydra\nunion() {\n    base();\n    \n    // Three heads creating overlapping illusion\n    illusion_neck(0, 0, 0);\n    illusion_neck(120, -5, -8);\n    illusion_neck(240, 5, -8);\n}",
    "renders": true
  },
  {
    "household_item": "miragewyrm",
    "openscad_code": "// Miragewyrm - Medium complexity realistic style\n// 3D printable with minimal overhangs\n\n// Basic parameters\nbody_length = 60;\nbody_height = 12;\nneck_length = 15;\nhead_length = 18;\ntail_segments = 5;\nleg_height = 8;\nwing_span = 35;\n\n// Body construction\nmodule body() {\n    // Main torso\n    union() {\n        // Central body segment\n        translate([0, 0, body_height/2])\n            scale([1, 0.8, 0.8])\n            sphere(d=body_height, $fn=20);\n        \n        // Neck connection\n        translate([-body_length/2 + 5, 0, body_height/2 + 3])\n            rotate([0, 20, 0])\n            cylinder(h=neck_length, d1=body_height*0.8, d2=body_height*0.4, $fn=16);\n    }\n}\n\n// Head with snout and horns\nmodule head() {\n    translate([-body_length/2 - neck_length + 2, 0, body_height/2 + 8])\n    rotate([0, 20, 0])\n    union() {\n        // Main head\n        scale([1.2, 0.8, 1])\n        sphere(d=head_length, $fn=16);\n        \n        // Snout\n        translate([head_length/2, 0, 0])\n            scale([1.5, 0.6, 0.4])\n            sphere(d=head_length*0.7, $fn=12);\n        \n        // Horns (back swept)\n        for(i=[-1, 1]) {\n            translate([head_length/4, i*head_length/3, head_length/2])\n                rotate([0, i*20, -30])\n                cylinder(h=head_length*0.8, d1=head_length/5, d2=head_length/10, $fn=8);\n        }\n    }\n}\n\n// Segmented tail\nmodule tail() {\n    for(i=[0:tail_segments-1]) {\n        translate([body_length/2 + i*6, 0, body_height/2 - i*1.5])\n            rotate([0, -i*10, 0])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n            sphere(d=body_height*(1 - i*0.15), $fn=16);\n    }\n}\n\n// Leg with claws\nmodule leg(position, angle) {\n    translate(position)\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        translate([0, 0, leg_height/2])\n            cylinder(h=leg_height*1.2, d=leg_height/2, $fn=8);\n        \n        // Lower leg\n        translate([0, leg_height/2, -leg_height/2])\n            rotate([20, 0, 0])\n            cylinder(h=leg_height, d=leg_height/3, $fn=8);\n        \n        // Foot\n        translate([0, leg_height/2 + 2, -leg_height])\n            rotate([30, 0, 0])\n            scale([1.5, 0.8, 0.5])\n            sphere(d=leg_height/2, $fn=8);\n        \n        // Claws\n        for(j=[-1, 0, 1]) {\n            translate([j*2, leg_height/2 + 4, -leg_height - 2])\n                rotate([0, 90, 0])\n                cylinder(h=3, d1=1.5, d2=0.5, $fn=6);\n        }\n    }\n}\n\n// Wing membrane\nmodule wing(side) {\n    translate([0, side*body_height/2, body_height/2 + 5])\n    rotate([0, side*10, 0])\n    union() {\n        // Wing arm\n        translate([0, 0, 0])\n            rotate([0, 0, side*-30])\n            cylinder(h=wing_span/2, d=body_height/3, $fn=8);\n        \n        // Wing membrane segments\n        for(k=[0:3]) {\n            translate([k*wing_span/8, 0, 0])\n                rotate([0, side*30 - k*10, 0])\n                scale([0.8, 0.1, 0.8])\n                sphere(d=wing_span/4 - k*2, $fn=12);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    body();\n    head();\n    tail();\n    \n    // Legs - positioned for stability\n    leg([body_length/3, body_height/2, 0], 45);\n    leg([body_length/3, -body_height/2, 0], -45);\n    leg([-body_length/4, body_height/2, 0], 135);\n    leg([-body_length/4, -body_height/2, 0], -135);\n    \n    // Wings\n    wing(1);\n    wing(-1);\n}\n\n// Ground contact support\ntranslate([0, 0, -leg_height - 2])\n    cube([body_length*1.5, body_height*2, 1], center=true);",
    "renders": true
  },
  {
    "household_item": "rainbowserpent",
    "openscad_code": "// Rainbow Serpent - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\nmodule serpent_head() {\n    // Main head structure\n    union() {\n        // Snout\n        translate([0, 0, 5]) {\n            scale([1.5, 1, 0.8]) {\n                sphere(d=15, $fn=32);\n            }\n        }\n        \n        // Head base\n        translate([0, 0, 0]) {\n            scale([1.2, 1, 1.2]) {\n                sphere(d=20, $fn=32);\n            }\n        }\n        \n        // Eyes (recessed)\n        translate([-7, 8, 5]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=3, d1=4, d2=2);\n            }\n        }\n        translate([7, 8, 5]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=3, d1=4, d2=2);\n            }\n        }\n        \n        // Nostrils\n        translate([-3, 10, 7]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=2, d=2);\n            }\n        }\n        translate([3, 10, 7]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=2, d=2);\n            }\n        }\n    }\n}\n\nmodule segment(i, radius, height) {\n    // Individual body segment with tapering\n    color([1 - i*0.15, 0.8 - i*0.1, 0.2 + i*0.1]) {\n        translate([0, 0, i * height]) {\n            rotate([0, 0, i * 25]) {\n                scale([1 - i*0.02, 1 - i*0.02, 1]) {\n                    cylinder(h=height, r1=radius - i*0.3, r2=radius - (i+1)*0.3, $fn=24);\n                }\n            }\n        }\n    }\n}\n\nmodule serpent_body() {\n    // Create curved body with segments\n    for (i = [0:29]) {\n        segment(i, 8, 2.5);\n    }\n    \n    // Tail fin\n    translate([0, 0, 30 * 2.5]) {\n        rotate([0, 0, 30 * 25]) {\n            scale([0.2, 0.7, 0.1]) {\n                sphere(d=20, $fn=32);\n            }\n        }\n    }\n}\n\nmodule scales() {\n    // Overlapping scales along body\n    for (i = [1:5:29]) {\n        for (j = [0:3:23]) {\n            translate([cos(j*15) * (8 - i*0.3), \n                      sin(j*15) * (8 - i*0.3), \n                      i * 2.5 - 1]) {\n                rotate([90, 0, j*15]) {\n                    scale([0.8, 0.5, 0.2]) {\n                        sphere(d=3, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Head at start of body\n    translate([0, 0, -2]) {\n        serpent_head();\n    }\n    \n    // Body segments\n    serpent_body();\n    \n    // Scales detail\n    scales();\n    \n    // Underside support for 3D printing\n    translate([0, 0, -1]) {\n        scale([1.5, 1.5, 0.5]) {\n            cube([40, 20, 2], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "prismwyrm",
    "openscad_code": "// Prismwyrm - Realistic Medium Complexity\n// 3D printable crystalline dragon with prism wings\n\n$fn = 32;\n\n// Main parameters\nbody_length = 60;\nbody_diameter = 15;\nwing_span = 80;\nhead_size = 12;\n\nmodule prism_segment(h, r1, r2, facets=6) {\n    // Create a hexagonal prism segment\n    difference() {\n        cylinder(h=h, r1=r1, r2=r2, $fn=facets);\n        // Hollow center for printing\n        cylinder(h=h+0.2, r1=r1-2, r2=r2-2, $fn=facets);\n    }\n}\n\nmodule wing_prism(length, width, thickness) {\n    // Create a crystalline wing prism\n    hull() {\n        translate([0, 0, 0]) cube([thickness, width*0.3, length*0.1], center=true);\n        translate([0, 0, length*0.8]) cube([thickness, width, length*0.2], center=true);\n    }\n}\n\nmodule claw() {\n    // Simple claw structure\n    union() {\n        cylinder(h=3, r1=1.5, r2=0.5);\n        translate([0, 0, 2.5]) rotate([0, 30, 0]) cylinder(h=2, r1=1, r2=0.3);\n    }\n}\n\nmodule leg() {\n    // Dragon leg with foot\n    union() {\n        // Upper leg\n        rotate([-90, 0, 0]) cylinder(h=8, r1=2, r2=1.5);\n        // Lower leg\n        translate([0, 0, -8]) rotate([-45, 0, 0]) cylinder(h=7, r1=1.5, r2=1);\n        // Foot\n        translate([0, -2.5, -13]) union() {\n            cube([4, 6, 2], center=true);\n            for(i = [-1.5, 0, 1.5]) {\n                translate([i, 1.5, -1]) claw();\n            }\n        }\n    }\n}\n\nmodule head() {\n    // Detailed dragon head\n    difference() {\n        union() {\n            // Main head shape\n            sphere(r=head_size/2);\n            // Snout\n            translate([head_size/2, 0, 0]) scale([1.5, 0.8, 0.8]) sphere(r=head_size/3);\n            // Horns\n            for(angle = [30, 150]) {\n                rotate([0, 0, angle]) translate([head_size/2-1, 0, head_size/2-2]) {\n                    cylinder(h=6, r1=1.5, r2=0.5);\n                    translate([0, 0, 5.5]) sphere(r=1);\n                }\n            }\n        }\n        // Eye sockets\n        translate([head_size/3, head_size/3, head_size/4]) sphere(r=2);\n        translate([head_size/3, -head_size/3, head_size/4]) sphere(r=2);\n        // Nostrils\n        translate([head_size-1, head_size/4, 0]) rotate([0, 90, 0]) cylinder(h=2, r=0.8);\n        translate([head_size-1, -head_size/4, 0]) rotate([0, 90, 0]) cylinder(h=2, r=0.8);\n    }\n}\n\nmodule tail_segment(index, total) {\n    // Tapered tail segments\n    scale_factor = 1 - (index / total) * 0.8;\n    prism_segment(h=5, r1=body_diameter/2 * scale_factor, r2=body_diameter/2 * (scale_factor - 0.1));\n}\n\nmodule wing_detail() {\n    // Crystalline wing structure\n    union() {\n        // Main wing\n        wing_prism(wing_span/2, 20, 2);\n        // Secondary prisms\n        for(i = [1:3]) {\n            rotate([0, 0, i * 25]) wing_prism(wing_span/2 * 0.7, 15, 1.5);\n        }\n        // Tertiary crystals\n        for(i = [1:5]) {\n            rotate([0, 0, i * 45 - 90]) translate([0, wing_span/3, 5]) {\n                rotate([90, 0, 0]) cylinder(h=8, r1=3, r2=1);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body segments\n    for(i = [0:4]) {\n        translate([i * body_length/5, 0, 0]) {\n            prism_segment(h=body_length/5, r1=body_diameter/2 - i*0.5, r2=body_diameter/2 - (i+1)*0.5);\n        }\n    }\n    \n    // Head\n    translate([body_length, 0, body_diameter/2]) head();\n    \n    // Tail\n    for(i = [1:6]) {\n        translate([-i * 5, 0, 0]) tail_segment(i, 6);\n    }\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([body_length/3, 0, body_diameter/2]) {\n            rotate([0, -20, side * 30]) wing_detail();\n        }\n    }\n    \n    // Legs\n    for(pos = [body_length/3, body_length*2/3]) {\n        translate([pos, 0, -body_diameter/2]) {\n            for(side = [-1, 1]) {\n                translate([0, side * (body_diameter/2 + 1), 0]) leg();\n            }\n        }\n    }\n}\n\n// Base support for printing\ntranslate([-10, -wing_span/2 - 5, -body_diameter/2 - 5]) \n    cube([body_length + 20, wing_span + 10, 2]);",
    "renders": true
  },
  {
    "household_item": "iridescentdrake",
    "openscad_code": "// IridescentDrake - Realistic Style, Medium Complexity\n// Size: ~75mm wingtip-to-wingtip\n\n$fn = 32;  // Smooth curves for realism\n\n// Overall body\nmodule body() {\n    // Main torso - elongated sphere\n    translate([0, 0, 5])\n        scale([1.5, 0.8, 1.2])\n        sphere(15);\n}\n\n// Head with snout\nmodule head() {\n    translate([20, 0, 18])\n    rotate([0, -10, 0])\n    union() {\n        // Main head sphere\n        sphere(10);\n        \n        // Snout/muzzle extension\n        translate([8, 0, -2])\n            scale([1.5, 0.8, 0.8])\n            sphere(6);\n            \n        // Eye sockets\n        translate([5, 7, 3])\n            rotate([0, 10, 0])\n            sphere(4);\n        translate([5, -7, 3])\n            rotate([0, -10, 0])\n            sphere(4);\n            \n        // Eyeballs\n        translate([7, 7, 3])\n            color(\"black\")\n            sphere(2);\n        translate([7, -7, 3])\n            color(\"black\")\n            sphere(2);\n    }\n}\n\n// Horns\nmodule horns() {\n    translate([15, 0, 25])\n    union() {\n        // Left horn\n        translate([0, 8, 0])\n            rotate([0, 0, -20])\n            cylinder(h1=8, h2=2, r1=3, r2=1);\n            \n        // Right horn\n        translate([0, -8, 0])\n            rotate([0, 0, 20])\n            cylinder(h1=8, h2=2, r1=3, r2=1);\n    }\n}\n\n// Tail segments\nmodule tail() {\n    translate([-15, 0, 5])\n    rotate([0, 15, 0])\n    union() {\n        for (i = [0:4]) {\n            translate([-i*8, 0, -i*2])\n                scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.1])\n                sphere(12 - i*2);\n        }\n    }\n}\n\n// Wing structure\nmodule wing() {\n    module wing_half(side) {\n        mirror([0, side, 0])\n        translate([0, 5, 20])\n        rotate([0, 0, 30])\n        union() {\n            // Main wing membrane\n            for (i = [0:3]) {\n                translate([i*8, 0, -i*3])\n                    scale([0.8, 1, 0.5])\n                    sphere(8);\n            }\n            \n            // Wing bones/fingers\n            for (i = [0:4]) {\n                translate([i*6, 0, -i*2])\n                    rotate([0, i*5, 0])\n                    cylinder(h=10, r=1.5);\n            }\n        }\n    }\n    \n    // Left wing\n    wing_half(1);\n    \n    // Right wing\n    wing_half(-1);\n}\n\n// Legs\nmodule legs() {\n    module leg(side) {\n        translate([5, side*8, 0])\n        union() {\n            // Upper leg\n            translate([0, 0, 8])\n                rotate([20, side*15, 0])\n                cylinder(h=12, r=3);\n                \n            // Lower leg\n            translate([0, 0, 0])\n                rotate([-30, side*15, 0])\n                cylinder(h=10, r=2.5);\n                \n            // Foot\n            translate([0, side*3, -2])\n                rotate([90, 0, 0])\n                cylinder(h=8, r=2);\n        }\n    }\n    \n    leg(1);  // Left leg\n    leg(-1);  // Right leg\n}\n\n// Combine all parts\nunion() {\n    body();\n    head();\n    horns();\n    tail();\n    wing();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "chromaticcoil",
    "openscad_code": "// Chromatic Coil (realistic guitar pickup)\n// Medium complexity, 3D-printable with no overhangs\n\n$fn=60;\n\n// Overall dimensions\ncoil_width = 22;\ncoil_length = 70;\ncoil_height = 12;\n\n// Wall thickness for printability\nwall = 1.2;\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, -1])\n            cube([coil_length+8, coil_width+8, 2], center=true);\n        \n        // Mounting holes (6-32 screw size)\n        for(x=[-coil_length/2+5, coil_length/2-5])\n            translate([x, 0, -1.5])\n                cylinder(h=3, d=3.5, center=true);\n    }\n}\n\n// Bobbin with winding chamber\nmodule bobbin() {\n    difference() {\n        // Outer bobbin shape\n        translate([0, 0, coil_height/2])\n            cube([coil_length, coil_width, coil_height], center=true);\n        \n        // Winding chamber\n        translate([0, 0, coil_height/2])\n            cube([coil_length-4, coil_width-4, coil_height-1], center=true);\n        \n        // Wire entry channels\n        for(y=[-coil_width/3, coil_width/3])\n            translate([coil_length/2+1, y, coil_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h=3, d=2);\n    }\n}\n\n// Individual pole piece\nmodule pole_piece() {\n    cylinder(h=coil_height+2, d=4.5);\n}\n\n// All pole pieces\nmodule poles() {\n    spacing = coil_length/6;\n    for(i=[-2.5:1:2.5])\n        translate([i*spacing, 0, coil_height/2+1])\n            pole_piece();\n}\n\n// Coil windings visualization (raised ridges)\nmodule windings() {\n    layers = 6;\n    for(i=[1:layers]) {\n        hull() {\n            translate([0, 0, i*1.2])\n                cube([coil_length-4, coil_width-4, 0.4], center=true);\n            translate([0, 0, (i+0.5)*1.2])\n                cube([coil_length-4, coil_width-4, 0.4], center=true);\n        }\n    }\n}\n\n// Top cover with logo area\nmodule top_cover() {\n    difference() {\n        // Main cover\n        translate([0, 0, coil_height+1])\n            cube([coil_length-2, coil_width-2, 1.5], center=true);\n        \n        // Logo recess\n        translate([0, 0, coil_height+2.4])\n            cube([coil_length/3, coil_width/2, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base components\n    base_plate();\n    bobbin();\n    \n    // Functional parts\n    poles();\n    windings();\n    \n    // Cover\n    top_cover();\n}",
    "renders": true
  },
  {
    "household_item": "spectrumwyrm",
    "openscad_code": "// Spectrumwyrm - Realistic medium complexity\n// 3D printable, no overhangs, 50 mm long\n\n// Overall scaling factor\nscale_factor = 0.8;\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([0, 0, 8]) {\n        difference() {\n            sphere(d=12);\n            translate([0, 0, -6]) cube([20, 20, 12], center=true);\n        }\n    }\n    \n    // Snout\n    translate([8, 0, 8]) {\n        rotate([0, -10, 0]) {\n            cylinder(h=15, d1=12, d2=6);\n        }\n    }\n    \n    // Eyes\n    for(x=[-1, 1]) {\n        translate([4, x*4, 12]) {\n            sphere(d=3);\n        }\n    }\n    \n    // Horns\n    for(x=[-1, 1]) {\n        translate([-2, x*5, 16]) {\n            rotate([0, -20, 0]) {\n                cylinder(h=8, d1=2, d2=5);\n            }\n        }\n    }\n}\n\n// Neck module\nmodule neck() {\n    translate([-8, 0, 6]) {\n        rotate([0, 10, 0]) {\n            cylinder(h=10, d1=10, d2=8);\n        }\n    }\n}\n\n// Body module with segments\nmodule body() {\n    // Main body segments\n    for(i=[0:5]) {\n        translate([-20 - i*8, 0, 5 - i*0.5]) {\n            rotate([0, 5*i, 0]) {\n                scale([1, 0.8 - i*0.05, 0.8 - i*0.05]) {\n                    sphere(d=10);\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Tail segments\n    for(i=[0:7]) {\n        translate([-70 - i*5, 0, 2 - i*0.3]) {\n            rotate([0, 10 + i*5, 0]) {\n                scale([1, 0.7 - i*0.08, 0.7 - i*0.08]) {\n                    sphere(d=6 - i*0.5);\n                }\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(offset_x, offset_y, angle) {\n    translate([offset_x, offset_y, 0]) {\n        rotate([0, 0, angle]) {\n            // Upper leg\n            translate([0, 0, 2]) {\n                cylinder(h=8, d=4);\n            }\n            \n            // Lower leg\n            translate([2, 0, 0]) {\n                rotate([80, 0, 0]) {\n                    cylinder(h=6, d=3);\n                }\n            }\n            \n            // Foot\n            translate([2, 0, -5]) {\n                cube([6, 3, 2], center=true);\n            }\n        }\n    }\n}\n\n// Wings module\nmodule wings() {\n    // Left wing\n    translate([-30, -15, 15]) {\n        rotate([0, -20, -30]) {\n            // Wing base\n            cylinder(h=3, d=6);\n            \n            // Wing membrane\n            for(i=[0:4]) {\n                translate([0, -i*3, 0]) {\n                    rotate([0, 10*i, 0]) {\n                        cube([15 - i*2, 0.5, 8 - i*1.5], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0]) {\n        translate([-30, -15, 15]) {\n            rotate([0, -20, -30]) {\n                cylinder(h=3, d=6);\n                \n                for(i=[0:4]) {\n                    translate([0, -i*3, 0]) {\n                        rotate([0, 10*i, 0]) {\n                            cube([15 - i*2, 0.5, 8 - i*1.5], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nscale(scale_factor) {\n    union() {\n        head();\n        neck();\n        body();\n        tail();\n        \n        // Four legs\n        leg(-25, 8, 30);\n        leg(-25, -8, -30);\n        leg(-45, 6, 25);\n        leg(-45, -6, -25);\n        \n        wings();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "neonsnake",
    "openscad_code": "// Neonsnake - medium complexity realistic style\n// 3D printable neon-style snake with segmented body and head\n\n$fn = 32;\n\n// Overall dimensions\nsnake_length = 80;\nbody_segments = 12;\nsegment_width = 8;\nsegment_height = 6;\nhead_length = 12;\nhead_width = 10;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\n// Create the entire snake\nmodule neonsnake() {\n    // Snake body segments\n    for (i = [0:body_segments-1]) {\n        translate([i * (snake_length - head_length) / body_segments, 0, 0])\n            rotate([0, 0, sin(i * 20) * 15])\n            body_segment();\n    }\n    \n    // Snake head\n    translate([snake_length - head_length, 0, 0])\n        snake_head();\n}\n\n// Individual body segment with hollow center\nmodule body_segment() {\n    difference() {\n        // Outer rounded segment\n        hull() {\n            translate([0, 0, 0])\n                sphere(d = segment_width);\n            translate([segment_width * 0.7, 0, 0])\n                sphere(d = segment_width * 0.9);\n        }\n        \n        // Hollow center\n        translate([0, 0, -segment_height/2])\n            cylinder(h = segment_height + 2, d = segment_width - 2 * wall_thickness, $fn = 16);\n    }\n}\n\n// Snake head with eyes and mouth\nmodule snake_head() {\n    // Main head shape\n    difference() {\n        hull() {\n            sphere(d = head_width);\n            translate([head_length, 0, 0])\n                sphere(d = head_width * 0.8);\n        }\n        \n        // Hollow head\n        translate([0, 0, -head_width/2])\n            cylinder(h = head_width + 2, d = head_width - 2 * wall_thickness, $fn = 16);\n    }\n    \n    // Eyes\n    translate([head_length * 0.3, head_width/3, head_width/3])\n        rotate([0, 90, 0])\n        eye();\n    translate([head_length * 0.3, -head_width/3, head_width/3])\n        rotate([0, 90, 0])\n        eye();\n    \n    // Mouth opening\n    difference() {\n        translate([head_length * 0.7, 0, -head_width/4])\n            cube([head_length * 0.3, head_width * 0.6, head_width/2]);\n        translate([head_length * 0.85, 0, -head_width/4 - 0.1])\n            cylinder(h = head_width/2 + 0.2, d = head_width * 0.4);\n    }\n}\n\n// Snake eye detail\nmodule eye() {\n    difference() {\n        cylinder(h = 2, d = 3);\n        translate([0, 0, -0.1])\n            cylinder(h = 2.2, d = 1.5);\n    }\n}\n\n// Create the snake\nneonsnake();",
    "renders": true
  },
  {
    "household_item": "toxicwyrm",
    "openscad_code": "// ToxicWyrm - Realistic Medium Complexity\n// Overall length ~70mm, height ~25mm, width ~35mm\n// Designed for FDM printing, 0.4mm nozzle, no supports needed\n\n$fn = 36;\n\nmodule body() {\n    // Main torso segment\n    union() {\n        // Central core\n        translate([0,0,10])\n            scale([1.2,0.8,0.6])\n                sphere(r=15);\n        \n        // Segment rings\n        for(i=[-15:10:15]) {\n            translate([i,0,10])\n                difference() {\n                    cylinder(h=3, r1=13, r2=13, center=true);\n                    translate([0,0,-2])\n                        cylinder(h=5, r1=11, r2=11, center=true);\n                }\n        }\n    }\n}\n\nmodule head() {\n    // Snout\n    translate([-30,0,12])\n        rotate([0,20,0])\n            scale([1.5,1,1])\n                sphere(r=8);\n    \n    // Jaw\n    translate([-35,-3,5])\n        rotate([0,-30,0])\n            cube([12,8,6], center=true);\n    \n    // Eyes\n    for(side=[-1,1]) {\n        translate([-25,side*8,17])\n            rotate([0,30,0])\n                sphere(r=3);\n            \n        // Slit pupils\n        translate([-27,side*8.5,17])\n            rotate([0,30,45])\n                scale([0.3,1,0.1])\n                    cube([6,3,1], center=true);\n    }\n    \n    // Venom sacs\n    for(side=[-1,1]) {\n        translate([-20,side*10,8])\n            sphere(r=5);\n    }\n}\n\nmodule tail() {\n    // Segmented tail\n    hull() {\n        translate([15,0,10])\n            sphere(r=10);\n        translate([40,0,8])\n            sphere(r=6);\n    }\n    \n    // Tail tip\n    translate([45,0,7])\n        rotate([0,0,45])\n            cylinder(h=15, r1=4, r2=0.5);\n    \n    // Tail spikes\n    for(i=[20:5:40]) {\n        angle = (i-20)*5;\n        translate([i,0,8+sin(angle)*3])\n            rotate([0,0,angle])\n                cube([3,0.5,4], center=true);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side=[-1,1]) {\n        translate([-10,side*12,0])\n            union() {\n                // Upper leg\n                rotate([0,0,side*30])\n                    cylinder(h=12, r1=4, r2=3);\n                \n                // Lower leg\n                translate([0,side*10,-10])\n                    rotate([0,0,side*45])\n                        cylinder(h=10, r1=3, r2=2);\n                \n                // Foot\n                translate([0,side*15,-18])\n                    scale([1.5,1,0.5])\n                        sphere(r=3);\n            }\n    }\n    \n    // Rear legs\n    for(side=[-1,1]) {\n        translate([20,side*10,0])\n            union() {\n                // Upper leg\n                rotate([0,0,side*-20])\n                    cylinder(h=10, r1=3.5, r2=2.5);\n                \n                // Lower leg\n                translate([0,side*8,-8])\n                    rotate([0,0,side*-30])\n                        cylinder(h=8, r1=2.5, r2=2);\n                \n                // Foot\n                translate([0,side*12,-14])\n                    scale([1.3,1,0.5])\n                        sphere(r=2.5);\n            }\n    }\n}\n\nmodule dorsal_spines() {\n    // Poison spines along back\n    for(i=[-10:5:20]) {\n        height = 8 + sin(i*10)*3;\n        translate([i,0,20])\n            rotate([0,0,i*5])\n                cylinder(h=height, r1=2, r2=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    tail();\n    legs();\n    dorsal_spines();\n}\n\n// Base plate for printing stability\ntranslate([0,0,-5])\n    cube([80,40,2], center=true);",
    "renders": true
  },
  {
    "household_item": "poisoncoil",
    "openscad_code": "// Poison Coil - Realistic Style, Medium Complexity\n// A coiled snake forming a circle, ready to strike\n// Overall diameter ~80mm, printable as one solid piece\n\nmodule snake_head() {\n    // Basic head shape\n    translate([0, 0, 6]) sphere(d=12, $fn=32);\n    \n    // Snout extension\n    translate([0, -7, 6]) scale([0.8, 1.5, 0.8]) sphere(d=10, $fn=32);\n    \n    // Eyes\n    translate([3.5, -3.5, 10]) sphere(d=3, $fn=16);\n    translate([-3.5, -3.5, 10]) sphere(d=3, $fn=16);\n    \n    // Venomous fangs\n    difference() {\n        translate([2, -7, 4]) rotate([90, 0, 45]) cylinder(h=6, d1=2, d2=0.5, $fn=8);\n        translate([2, -7, 3]) cube([3, 3, 3], center=true);\n    }\n    difference() {\n        translate([-2, -7, 4]) rotate([90, 0, -45]) cylinder(h=6, d1=2, d2=0.5, $fn=8);\n        translate([-2, -7, 3]) cube([3, 3, 3], center=true);\n    }\n}\n\nmodule snake_body_coil() {\n    // Create coiled body using torus segments\n    for(i=[0:15:360]) {\n        rotate([0, 0, i]) {\n            translate([30-0.05*i, 0, 2]) rotate([0, 90, 0]) \n                cylinder(h=3, r1=8-0.02*i, r2=8-0.02*(i+15), $fn=32);\n        }\n    }\n    \n    // Connect coils with smooth transitions\n    for(i=[0:30:330]) {\n        rotate([0, 0, i]) {\n            translate([25-0.05*i, 0, 2]) rotate([0, 90, 0]) \n                cylinder(h=5, r=7-0.02*i, $fn=32);\n        }\n    }\n}\n\nmodule scales_pattern() {\n    // Scales on the back\n    for(angle=[0:45:315]) {\n        for(rad=[5:5:30]) {\n            rotate([0, 0, angle]) {\n                translate([rad, 0, 3.5]) rotate([0, 90, 0])\n                    scale([0.8, 0.8, 0.3]) cylinder(h=2, r1=3, r2=0, $fn=6);\n            }\n        }\n    }\n}\n\nmodule tail_tip() {\n    // Final coil segment - tail\n    for(i=[360:15:450]) {\n        rotate([0, 0, i]) {\n            translate([30-0.05*i, 0, 2]) rotate([0, 90, 0]) \n                cylinder(h=3, r1=8-0.02*i, r2=8-0.02*(i+15), $fn=32);\n        }\n    }\n    \n    // Tail taper\n    rotate([0, 0, 450]) {\n        translate([7.5, 0, 2]) rotate([0, 90, 0]) \n            cylinder(h=10, r1=2, r2=0.5, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Snake body\n    union() {\n        snake_body_coil();\n        tail_tip();\n        scales_pattern();\n    }\n    \n    // Snake head positioned at the end of the coil\n    rotate([0, 0, 45]) translate([27, 0, 0]) rotate([0, 0, 45]) snake_head();\n    \n    // Base plate for stability\n    difference() {\n        cylinder(h=2, r=42, $fn=64);\n        cylinder(h=2.1, r=20, $fn=64);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "venomwyrm",
    "openscad_code": "// Venomwyrm - Medium complexity realistic style\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main body parameters\nbody_length = 60;\nbody_diameter = 12;\nsegment_count = 8;\nsegment_length = body_length / segment_count;\n\n// Head parameters\nhead_length = 15;\nhead_diameter = 10;\nfang_length = 8;\nfang_diameter = 1.5;\n\n// Tail parameters\ntail_taper = 0.3;\ntail_segments = 6;\n\n// Leg parameters\nleg_length = 12;\nleg_diameter = 3;\nleg_segments = 3;\n\n// Venom sacs\nsac_diameter = 4;\nsac_length = 6;\n\n// Main assembly\nunion() {\n    // Body segments\n    for(i = [0:segment_count-1]) {\n        translate([i * segment_length, 0, 0]) {\n            scale([1 - i * 0.05, 1 - i * 0.05, 1 - i * 0.05]) {\n                // Main body segment\n                difference() {\n                    cylinder(h=segment_length, d=body_diameter, center=true);\n                    // Ventral groove for printing support\n                    translate([0, 0, -body_diameter/2])\n                        cube([segment_length*1.2, body_diameter*0.8, body_diameter], center=true);\n                }\n                \n                // Armor plates on top\n                for(j = [0:3]) {\n                    rotate([0, 0, j * 90]) {\n                        translate([0, body_diameter/2 - 1, 0]) {\n                            cube([segment_length*0.8, 2, 1], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Head\n    translate([body_length, 0, 0]) {\n        // Main head shape\n        difference() {\n            cylinder(h=head_length, d1=head_diameter, d2=head_diameter*0.8, center=false);\n            // Mouth cavity\n            translate([head_length - 5, 0, -head_diameter/3])\n                sphere(d=head_diameter*0.8);\n        }\n        \n        // Fangs\n        for(side = [-1, 1]) {\n            translate([head_length - 3, side * head_diameter/3, -head_diameter/2]) {\n                rotate([0, side * 30, 0]) {\n                    cylinder(h=fang_length, d1=fang_diameter*1.5, d2=fang_diameter);\n                }\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([head_length - 10, side * head_diameter/3, head_diameter/3]) {\n                sphere(d=2);\n                // Eye socket\n                difference() {\n                    sphere(d=2.2);\n                    scale([0.8, 0.8, 0.8])\n                        sphere(d=2);\n                }\n            }\n        }\n        \n        // Venom sacs\n        for(side = [-1, 1]) {\n            translate([head_length - 8, side * (head_diameter/2 + sac_diameter/2), 0]) {\n                cylinder(h=sac_length, d=sac_diameter);\n            }\n        }\n    }\n    \n    // Tail segments\n    for(i = [0:tail_segments-1]) {\n        translate([-(i+1) * segment_length * 0.7, 0, 0]) {\n            scale([1 - (i+1) * tail_taper, 1 - (i+1) * tail_taper, 1 - (i+1) * tail_taper]) {\n                cylinder(h=segment_length*0.7, d=body_diameter, center=true);\n                \n                // Tail spikes\n                for(j = [0:2]) {\n                    rotate([0, 0, j * 120]) {\n                        translate([0, body_diameter/2 - 1, 0]) {\n                            cube([2, 1, 3], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Leg pairs\n    for(i = [1:3]) {\n        leg_position = i * body_length/4;\n        for(side = [-1, 1]) {\n            translate([leg_position, side * body_diameter/2, 0]) {\n                rotate([0, 0, side * 45]) {\n                    leg();\n                }\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=leg_length/3, d=leg_diameter);\n        \n        // Middle segment\n        translate([0, leg_length/3, 0]) {\n            rotate([45, 0, 0]) {\n                cylinder(h=leg_length/3, d=leg_diameter*0.8);\n                \n                // Lower segment\n                translate([0, leg_length/3, 0]) {\n                    rotate([45, 0, 0]) {\n                        cylinder(h=leg_length/3, d=leg_diameter*0.6);\n                        \n                        // Foot\n                        translate([0, leg_length/3, -leg_diameter/2]) {\n                            cube([leg_diameter*1.5, leg_diameter*2, leg_diameter], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "acidhydra",
    "openscad_code": "// AcidHydra - 3D printable medium-complexity model\n// Body with 5 heads, 4 legs, spines and tail\n// Approx 80 mm tall\n\n$fn = 32;\n\n// Main parameters\nbody_r = 12;\nbody_h = 30;\nleg_len = 20;\nleg_r = 4;\nneck_len = 15;\nhead_r = 6;\nspine_h = 3;\nspine_r = 1.5;\ntail_len = 25;\n\nmodule acidhydra() {\n    union() {\n        // Central body\n        translate([0,0,body_h/2])\n            cylinder(h=body_h, r1=body_r, r2=body_r*0.8, center=true);\n\n        // Legs - 4 legs in X pattern\n        for (a=[45, 135, 225, 315]) {\n            rotate([0,0,a])\n                translate([body_r*0.7, 0, -body_h/4])\n                    rotate([90,0,0])\n                        cylinder(h=leg_len, r=leg_r, center=false);\n        }\n\n        // Necks and heads - 5 heads around top\n        for (i=[0:4]) {\n            angle = i*72;\n            rotate([0,0,angle])\n                translate([body_r*0.5,0,body_h*0.6])\n                    rotate([30,0,0])\n                        union() {\n                            // Neck\n                            cylinder(h=neck_len, r=head_r*0.6, center=false);\n                            // Head\n                            translate([0,0,neck_len])\n                                sphere(r=head_r);\n                            // Snout\n                            translate([0,0,neck_len+head_r])\n                                rotate([20,0,0])\n                                    cylinder(h=head_r*1.2, r1=head_r*0.8, r2=head_r*0.4, center=false);\n                        }\n        }\n\n        // Spines along back\n        for (z=[-body_h/3:body_h/10:body_h/3]) {\n            translate([0,0,z+body_h/2])\n                cylinder(h=spine_h, r1=spine_r, r2=0.5, center=false);\n        }\n\n        // Tail\n        rotate([0,180,0])\n            translate([0,0,-body_h/2])\n                rotate_extrude(angle=360, $fn=16)\n                    translate([body_r*0.6,0,0])\n                        polygon(points=[\n                            [0,0],\n                            [tail_len*0.3,0],\n                            [tail_len, -tail_len*0.2],\n                            [tail_len*0.9, -tail_len*0.4],\n                            [tail_len*0.5, -tail_len*0.5],\n                            [0, -tail_len*0.3]\n                        ]);\n    }\n}\n\n// Base platform for printing\ndifference() {\n    cube([100,100,2], center=true);\n    translate([0,0,-1])\n        cube([96,96,4], center=true);\n}\n\n// Position hydra on platform\ntranslate([0,0,1])\n    acidhydra();",
    "renders": true
  },
  {
    "household_item": "plaguewyrm",
    "openscad_code": "// Plaguewyrm – realistic medium-complexity OpenSCAD model\n// Scale: ~80 mm long, printable without supports\n\n$fn = 40; // smooth curves\n\nmodule bodySegment(r, h) {\n    // tapered segment with slight ventral ridge\n    difference() {\n        cylinder(h = h, r1 = r, r2 = r * 0.85, center = true);\n        translate([0, -r * 0.3, -h/2 - 0.2])\n            cube([r * 2, r * 0.2, h + 0.4], center = true);\n    }\n}\n\nmodule body() {\n    // 8 linked segments\n    len = 8;\n    segH = 7;\n    for (i = [0 : len - 1]) {\n        translate([0, 0, i * segH * 0.8])\n            bodySegment(6 - i * 0.4, segH);\n    }\n}\n\nmodule head() {\n    // bulbous diseased head\n    translate([0, 0, 7 * 7 * 0.8]) rotate([0, 180, 0]) {\n        difference() {\n            sphere(7);\n            // recess for jaw\n            translate([0, -7, -1])\n                cube([14, 14, 8], center = true);\n        }\n        // mandibles\n        for (s = [-1, 1]) {\n            translate([s * 3, -7, 0])\n                rotate([0, 20 * s, 0])\n                cylinder(h = 6, r1 = 1, r2 = 0.5);\n        }\n        // pustule bumps\n        for (b = [[3, 2, 3], [-3, 2, 3], [0, 4, 4]])\n            translate(b) sphere(1.2);\n    }\n}\n\nmodule tail() {\n    // thin whip tail\n    translate([0, 0, -1]) difference() {\n        cylinder(h = 25, r1 = 4, r2 = 0.5);\n        // ventral groove\n        translate([0, -2, -1])\n            cube([4, 2.5, 27], center = true);\n    }\n}\n\nmodule legs() {\n    // 3 pairs of stubby legs\n    for (pair = [1 : 3]) {\n        z = pair * 7 * 0.8 * 2;\n        for (side = [-1, 1]) {\n            translate([side * 5.5, 0, z])\n                rotate([90, 0, side * 20])\n                cylinder(h = 6, r1 = 1.5, r2 = 1);\n        }\n    }\n}\n\nunion() {\n    body();\n    head();\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "rotfang",
    "openscad_code": "// OpenSCAD Rotfang – medium-complexity realistic style\n// No overhangs >45°, 1.2 mm wall thickness, 75 mm overall length\n// Rotfang = circular hand-crank drill for wood\n\n$fn = 36;            // smooth curves\n\n// ---------- Parameters ----------\nbit_d      = 6;      // drill bit diameter\nbit_len    = 35;\nshank_d    = 8;\nshank_len  = 12;\ncrank_r    = 30;\nhandle_r   = 6;\nhandle_len = 28;\nwall       = 1.2;    // printable wall thickness\nclearance  = 0.3;    // fit clearance\n\n// ---------- Drill Bit ----------\nmodule drill_bit() {\n    // spiral flute simulated with twisted cubes\n    difference() {\n        union() {\n            cylinder(h = bit_len, d = bit_d, center = true);\n            // tapered point\n            translate([0,0,-bit_len/2-1])\n                cylinder(h = bit_d*1.5, d1 = bit_d, d2 = 0, center = true);\n        }\n        for(i=[0:120:359])\n            rotate([0,0,i])\n                translate([bit_d/2-wall,0,0])\n                    rotate([0,0,-i*0.8])\n                        cube([wall*2, wall*2, bit_len], center = true);\n    }\n}\n\n// ---------- Chuck ----------\nmodule chuck() {\n    difference() {\n        // main chuck cylinder\n        cylinder(h = shank_len, d = shank_d);\n        // central hole for bit\n        translate([0,0,-1])\n            cylinder(h = shank_len+2, d = bit_d+clearance);\n        // three radial tightening slots (visual only)\n        for(i=[0:120:240])\n            rotate([0,0,i])\n                translate([shank_d/2-wall,0,shank_len/2])\n                    cube([1.2, 1.5, shank_len], center = true);\n    }\n}\n\n// ---------- Crank Arm ----------\nmodule crank_arm() {\n    // one straight arm with a round knob\n    difference() {\n        union() {\n            // arm body\n            rotate([0,0,-30])\n                translate([-crank_r/2,0,0])\n                    cube([crank_r, shank_d*0.8, shank_d], center = true);\n            // knob\n            translate([cos(-30)*crank_r, sin(-30)*crank_r, 0])\n                sphere(r = handle_r);\n        }\n        // clearance hole through knob\n        rotate([0,90,0])\n            translate([0,0,0])\n                cylinder(h = handle_len+handle_r, d = handle_r*0.6, center = true);\n    }\n}\n\n// ---------- Handle ----------\nmodule handle() {\n    rotate([90,0,0])\n        cylinder(h = handle_len, d = handle_r*0.8);\n}\n\n// ---------- Assembly ----------\n// drill bit\ntranslate([0,0,bit_len/2])\n    drill_bit();\n\n// chuck\ntranslate([0,0,bit_len+shank_len/2])\n    chuck();\n\n// crank disk (gear wheel)\ndifference() {\n    cylinder(h = shank_d, d = shank_d*2.8);\n    // central hole\n    translate([0,0,-1])\n        cylinder(h = shank_d+2, d = shank_d+clearance);\n    // six spoke holes (decorative)\n    for(i=[0:60:359])\n        rotate([0,0,i])\n            translate([shank_d*0.9,0,shank_d/2])\n                cube([shank_d*0.4, 2, shank_d], center = true);\n}\ntranslate([0,0,bit_len+shank_len])\n    rotate([0,0,0])\n        crank_arm();\ntranslate([cos(-30)*crank_r, sin(-30)*crank_r, bit_len+shank_len])\n    handle();",
    "renders": true
  },
  {
    "household_item": "blightserpent",
    "openscad_code": "// Blightserpent - realistic medium-complexity OpenSCAD model\n// Overall length ~80 mm, printable without supports\n\n// Basic parameters\n$fn = 30;\nbody_diameter = 6;\nhead_diameter = 12;\ntail_tip = 2;\nbody_length = 80;\nsegments = 20;\n\n// Main body module - creates serpentine body with segments\nmodule body() {\n    for(i = [0:segments-1]) {\n        // Calculate position along the body\n        t = i / (segments - 1);\n        x = t * body_length;\n        \n        // Add undulation\n        y = sin(t * 360 * 2) * 8;\n        z = cos(t * 360 * 1.5) * 5;\n        \n        // Taper body\n        d = body_diameter + (head_diameter - body_diameter) * (1 - t * 0.8);\n        \n        translate([x, y, z])\n            rotate([0, 0, sin(t * 360 * 3) * 15])\n                sphere(d = d);\n    }\n}\n\n// Diseased spine protrusions\nmodule spine() {\n    for(i = [0:segments-3]) {\n        t = (i + 1) / (segments - 2);\n        x = t * body_length;\n        y = sin(t * 360 * 2) * 8;\n        z = cos(t * 360 * 1.5) * 5;\n        \n        // Only add spines on upper half\n        if(z > 0) {\n            translate([x, y, z + body_diameter/2])\n                rotate([90 + sin(t * 360) * 20, 0, rand(i) * 360])\n                    cylinder(h = 3 + rand(i) * 2, d1 = 2, d2 = 0.5);\n        }\n    }\n}\n\n// Blighted head with asymmetrical features\nmodule head() {\n    // Main head mass\n    translate([body_length, 0, 0])\n        sphere(d = head_diameter);\n    \n    // Diseased growths\n    for(i = [0:5]) {\n        a = i * 60;\n        translate([body_length + cos(a) * 6, sin(a) * 6, 0])\n            sphere(d = 3 + rand(i) * 2);\n    }\n    \n    // Mouth area - carved cavity\n    translate([body_length + 5, 0, 0])\n        rotate([0, 0, 90])\n            difference() {\n                sphere(d = head_diameter * 0.8);\n                translate([0, 0, -head_diameter/2])\n                    cube([head_diameter, head_diameter, head_diameter], center = true);\n            }\n    \n    // Teeth - small cones\n    for(i = [0:7]) {\n        a = i * 45;\n        translate([body_length + 8, cos(a) * 3, sin(a) * 3 - 2])\n            rotate([90, 0, 0])\n                cylinder(h = 2, d1 = 1, d2 = 0.3);\n    }\n}\n\n// Random value generator for organic variation\nfunction rand(n) = (n * 13.7) % 1;\n\n// Blister-like pustules along body\nmodule pustules() {\n    for(i = [0:segments * 2]) {\n        t = (i + 0.5) / (segments * 2);\n        x = t * body_length;\n        y = sin(t * 360 * 2) * 8 + (rand(i) - 0.5) * 4;\n        z = cos(t * 360 * 1.5) * 5 + (rand(i+1) - 0.5) * 4;\n        \n        translate([x, y, z])\n            sphere(d = 1 + rand(i) * 1.5);\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    head();\n    spine();\n    pustules();\n}",
    "renders": true
  },
  {
    "household_item": "corruptionwyrm",
    "openscad_code": "// Corruptionwyrm - medium complexity realistic style\n// Approx 75mm long, designed for FDM printing (no steep overhangs)\n\n$fn = 32;\n\nmodule segmented_body(segs=8, base_r=6) {\n    // Creates a worm-like segmented body that tapers\n    for (i=[0:segs-1]) {\n        r = base_r * (1 - 0.05 * i);\n        h = 7;\n        translate([0, 0, i * h * 0.85])\n            difference() {\n                cylinder(h=h, r=r+1.5, center=true);\n                translate([0, 0, -h/2 - 0.5])\n                    cylinder(h=h+1, r=r, center=false);\n            }\n    }\n}\n\nmodule head() {\n    // Main head segment\n    difference() {\n        sphere(d=18);\n        \n        // Eye sockets\n        for (side=[-1, 1]) {\n            translate([side * 6, 7, 3])\n                sphere(d=6);\n        }\n        \n        // Mouth cavity\n        translate([0, 8, -3])\n            rotate([15, 0, 0])\n                cube([12, 15, 8], center=true);\n    }\n    \n    // Mandibles\n    for (side=[-1, 1]) {\n        translate([side * 4, 9, -5])\n            rotate([side * 25, 0, 0])\n                cylinder(h=12, r1=2.5, r2=1, center=false);\n    }\n    \n    // Eyes\n    for (side=[-1, 1]) {\n        translate([side * 6, 7, 3])\n            sphere(d=3.5);\n    }\n}\n\nmodule spine_plates(count=12) {\n    // Jagged spinal plates along body\n    for (i=[0:count-1]) {\n        angle = i * 30;\n        translate([0, 0, -35 + i * 6])\n            rotate([0, 0, angle])\n                translate([8, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=6, r1=4, r2=2, center=true);\n    }\n}\n\nmodule legs(pair_count=4) {\n    // Short stubby legs with claws\n    for (i=[0:pair_count-1]) {\n        z = -25 + i * 12;\n        for (side=[-1, 1]) {\n            translate([side * 10, 0, z])\n                rotate([0, side * 20, 0])\n                    union() {\n                        cylinder(h=8, r=2.5, center=true);\n                        translate([0, 0, 5])\n                            rotate([0, 90, 0])\n                                cylinder(h=6, r1=2, r2=0.5, center=true);\n                    }\n        }\n    }\n}\n\nmodule corruption_markings() {\n    // Organic corruption patterns using subtracted spheres\n    for (i=[0:20]) {\n        angle = i * 137.5;\n        radius = 8 + (i % 3) * 3;\n        height = -30 + i * 3;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            height\n        ])\n            sphere(d=2 + (i % 3));\n    }\n}\n\n// Main assembly\nunion() {\n    // Body segments\n    translate([0, 0, -35])\n        segmented_body(segs=8, base_r=6);\n    \n    // Head\n    translate([0, 0, 25])\n        head();\n    \n    // Spinal plates\n    spine_plates(count=12);\n    \n    // Legs\n    legs(pair_count=4);\n    \n    // Corruption details (subtractive)\n    difference() {\n        children();\n        corruption_markings();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "decaydrake",
    "openscad_code": "// Decaydrake - Medium complexity realistic style\n// 3D printable decaydrake model with wings, tail, and skeletal features\n\n// Main parameters\nbody_length = 60;\nbody_height = 25;\nwing_span = 80;\ntail_length = 35;\nwall_thickness = 2;\n\nmodule decaydrake() {\n    // Central body\n    union() {\n        // Main torso\n        translate([0, 0, body_height/2])\n            scale([1.2, 0.8, 1])\n            sphere(d=body_height, $fn=20);\n        \n        // Pelvis\n        translate([body_length/3, 0, body_height/3])\n            scale([0.8, 0.6, 0.4])\n            sphere(d=body_height, $fn=16);\n        \n        // Chest cavity\n        difference() {\n            translate([-body_length/4, 0, body_height/2])\n                scale([1, 0.7, 0.8])\n                sphere(d=body_height*0.9, $fn=20);\n            translate([-body_length/4, 0, body_height/2])\n                scale([0.8, 0.5, 0.6])\n                sphere(d=body_height*0.7, $fn=20);\n        }\n        \n        // Spine ridge\n        for(i=[-body_length/2:5:body_length/2]) {\n            translate([i, 0, body_height*0.8])\n                rotate([90, 0, 0])\n                cylinder(h=body_height/4, d1=3, d2=1, $fn=8);\n        }\n        \n        // Rib cage\n        for(i=[-20:10:20]) {\n            rotate([0, 90, 0])\n            translate([0, i, body_height/2])\n                difference() {\n                    cylinder(h=body_height*0.6, d=body_height*0.5, $fn=12);\n                    cylinder(h=body_height*0.6+1, d=body_height*0.5-wall_thickness*2, $fn=12);\n                }\n        }\n    }\n    \n    // Head\n    translate([-body_length/2-10, 0, body_height*0.7])\n    union() {\n        // Skull\n        scale([1.5, 0.8, 0.9])\n        sphere(d=15, $fn=16);\n        \n        // Snout\n        translate([-8, 0, -2])\n            scale([1.2, 0.6, 0.5])\n            sphere(d=10, $fn=12);\n        \n        // Eye sockets\n        for(x=[-3, 3]) {\n            translate([-2, x, 2])\n                sphere(d=4, $fn=8);\n        }\n        \n        // Lower jaw\n        translate([0, 0, -8])\n            rotate([20, 0, 0])\n            scale([1.3, 0.7, 0.3])\n            sphere(d=12, $fn=12);\n    }\n    \n    // Wings\n    module wing(side) {\n        mirror([side, 0, 0]) {\n            // Wing base\n            translate([-5, 0, body_height*0.8])\n                rotate([0, -20, 45*side])\n                difference() {\n                    cylinder(h=wing_span/2, d=8, $fn=12);\n                    cylinder(h=wing_span/2+1, d=8-wall_thickness*2, $fn=12);\n                }\n            \n            // Wing membrane supports\n            for(i=[0:15:wing_span/2]) {\n                translate([-5-i/2, 0, body_height*0.8-i/4])\n                    rotate([0, -20-i, 45*side])\n                    cylinder(h=wing_span/2-i, d=2, $fn=6);\n            }\n            \n            // Wing membrane\n            translate([-wing_span/4, 0, body_height*0.6])\n                rotate([0, -20, 45*side])\n                scale([0.1, wing_span/2, wing_span/4])\n                sphere(d=1, $fn=3);\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Tail\n    translate([body_length/2+5, 0, body_height/3])\n    union() {\n        // Tail vertebrae\n        for(i=[0:5:tail_length]) {\n            translate([i, 0, -i/5])\n                rotate([0, 0, i*5])\n                scale([1-i/tail_length, 1-i/tail_length, 1-i/tail_length])\n                sphere(d=8-i/5, $fn=12);\n        }\n        \n        // Tail spikes\n        for(i=[10:10:tail_length]) {\n            translate([i, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=5, d1=2, d2=0.5, $fn=6);\n        }\n    }\n    \n    // Legs\n    module leg(side, front) {\n        translate([front*body_length/4, side*body_height/2, 0])\n        union() {\n            // Upper leg\n            rotate([0, 0, 45*side])\n                difference() {\n                    cylinder(h=body_height/2, d=6, $fn=8);\n                    cylinder(h=body_height/2+1, d=6-wall_thickness*2, $fn=8);\n                }\n            \n            // Lower leg\n            translate([0, 0, -body_height/2])\n                rotate([30*side, 0, 0])\n                difference() {\n                    cylinder(h=body_height/2, d=4, $fn=8);\n                    cylinder(h=body_height/2+1, d=4-wall_thickness*2, $fn=8);\n                }\n            \n            // Foot\n            translate([body_height/4, 0, -body_height])\n                difference() {\n                    cube([8, 3, 4], center=true);\n                    cube([8-wall_thickness*2, 3-wall_thickness*2, 4-wall_thickness*2], center=true);\n                }\n        }\n    }\n    \n    leg(1, 1);\n    leg(-1, 1);\n    leg(1, -0.5);\n    leg(-1, -0.5);\n}\n\n// Render the model\ndecaydrake();",
    "renders": true
  },
  {
    "household_item": "pestilencewyrm",
    "openscad_code": "// Pestilencewyrm - medium complexity, realistic style\n// Total length ~80 mm, printable without supports\n\n$fa = 2;\n$fs = 0.5;\n\nmodule body_segment(r, h, rot) {\n    rotate([0, rot, 0])\n    difference() {\n        cylinder(h = h, r1 = r, r2 = r * 0.8, center = true);\n        translate([0, 0, -h/2 - 0.1])\n        cube([r * 2.2, r * 1.8, 0.2], center = true);\n    }\n}\n\nmodule tail_spike() {\n    union() {\n        cylinder(h = 12, r1 = 2.5, r2 = 0.5, center = true);\n        translate([0, 0, 6])\n        sphere(d = 2.5);\n    }\n}\n\nmodule dorsal_plate(len, wid, thick) {\n    translate([0, 0, thick/2])\n    scale([1, 0.6, 1])\n    rotate([0, 15, 0])\n    cube([len, wid, thick], center = true);\n}\n\nmodule limb(side) {\n    mirror([side, 0, 0])\n    union() {\n        // Upper leg\n        translate([6, 0, 0])\n        rotate([0, 0, -30])\n        cylinder(h = 10, r1 = 2.5, r2 = 2, center = true);\n        \n        // Lower leg\n        translate([11, 0, -4])\n        rotate([30, 0, 0])\n        cylinder(h = 12, r1 = 2, r2 = 1.5, center = true);\n        \n        // Foot\n        translate([11, 0, -10])\n        rotate([90, 0, 0])\n        cylinder(h = 6, r1 = 3, r2 = 2, center = true);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head\n        translate([0, 0, 5])\n        scale([1.2, 0.7, 1])\n        sphere(d = 12);\n        \n        // Snout\n        translate([6, 0, 3])\n        scale([1.5, 0.8, 0.8])\n        sphere(d = 8);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([3, side * 3.5, 6])\n            sphere(d = 3);\n            translate([3, side * 3.5, 6.5])\n            sphere(d = 2);\n        }\n        \n        // Nostrils\n        for(side = [-1, 1]) {\n            translate([8.5, side * 1.5, 3.5])\n            cylinder(h = 2, r = 1, center = true);\n        }\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([2, side * 5, 8])\n            rotate([0, side * 10, 0])\n            cylinder(h = 8, r1 = 2, r2 = 1, center = true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([30, 0, 8])\n    head();\n    \n    // Neck\n    for(i = [0:3]) {\n        translate([25 - i * 4, 0, 8 - i * 1.5])\n        body_segment(6 - i * 0.8, 5, -10 - i * 5);\n    }\n    \n    // Body segments\n    for(i = [0:6]) {\n        translate([8 - i * 6, 0, 4 - i * 0.8])\n        body_segment(4.5 - i * 0.3, 6, -5 - i * 3);\n    }\n    \n    // Tail\n    for(i = [0:4]) {\n        translate([-35 - i * 4, 0, 1 - i * 0.5])\n        body_segment(2.5 - i * 0.4, 5, -30 - i * 10);\n    }\n    \n    // Tail spike\n    translate([-52, 0, -2])\n    tail_spike();\n    \n    // Dorsal plates\n    plate_positions = [[15, 0], [8, 20], [1, 40], [-6, 60], [-13, 75]];\n    for(pos = plate_positions) {\n        translate([pos[0], 0, 5 + pos[1]/20])\n        dorsal_plate(6, 4, 1.5);\n    }\n    \n    // Limbs\n    limb(1);\n    limb(-1);\n    translate([0, 0, -3])\n    limb(1);\n    translate([0, 0, -3])\n    limb(-1);\n}",
    "renders": true
  },
  {
    "household_item": "miasmaserpent",
    "openscad_code": "// Miasmaserpent - Realistic Style, Medium Complexity\n// 3D printable, ~80mm long, no steep overhangs\n\n$fn = 32;  // Smooth curves\nbody_r = 4;\nhead_l = 12;\nhead_w = 8;\nhead_h = 6;\ntail_len = 80;\nsegments = 10;\nscale_factor = 0.92;\n\nmodule fang() {\n    // Simple cone fang, printable without support\n    rotate([0, 90, 0])\n        cylinder(h1 = 0, h2 = 3, r1 = 1, r2 = 0.2, $fn = 8);\n}\n\nmodule eye() {\n    // Sunken eye socket\n    difference() {\n        sphere(d = 2.5);\n        translate([0.8, 0, 0.2])\n            sphere(d = 2.6);\n    }\n}\n\nmodule head() {\n    difference() {\n        union() {\n            // Main head block\n            scale([1, 0.8, 0.7])\n                sphere(d = head_w);\n            // Snout extension\n            translate([head_w/2 - 2, 0, 0])\n                rotate([-10, 0, 0])\n                    scale([1.5, 0.7, 0.6])\n                        sphere(d = head_w * 0.8);\n        }\n        // Mouth slit\n        translate([head_w/2 - 1, 0, -1])\n            rotate([-20, 0, 0])\n                cube([5, 0.5, 2.5], center = true);\n        // Nostrils\n        translate([head_w/2 - 0.5, 1.5, 0])\n            cylinder(h = 2, r = 0.5, $fn = 8);\n        translate([head_w/2 - 0.5, -1.5, 0])\n            cylinder(h = 2, r = 0.5, $fn = 8);\n    }\n    \n    // Eyes\n    translate([head_w/4, 2.8, 0.8])\n        color(\"black\") eye();\n    translate([head_w/4, -2.8, 0.8])\n        color(\"black\") eye();\n    \n    // Fangs\n    translate([head_w/2, 1, -2.2])\n        fang();\n    translate([head_w/2, -1, -2.2])\n        fang();\n}\n\nmodule body_segment(idx) {\n    // Tapering body sections\n    h = body_r * pow(scale_factor, idx);\n    translate([idx * (body_r * 1.5), 0, 0])\n        sphere(d = h * 2);\n}\n\nmodule ridge(scale) {\n    // Small dorsal ridge scales\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([0, scale * (body_r + 0.5), 0])\n                cube([1.5, 0.8, 0.5], center = true);\n    }\n}\n\nmodule body() {\n    // Create tapered body\n    for(i = [0:segments-1]) {\n        body_segment(i);\n    }\n    \n    // Add dorsal ridges\n    for(i = [1:segments-1]) {\n        scale = pow(scale_factor, i);\n        translate([i * (body_r * 1.5), 0, 0])\n            scale([scale, scale, scale])\n                ridge(scale);\n    }\n}\n\n// Assembly\nrotate([0, -15, 0])  // Slight lift for printing\n    union() {\n        // Head\n        translate([0, 0, body_r])\n            head();\n        \n        // Body\n        translate([head_w/2 + 1, 0, 0])\n            body();\n        \n        // Tail tip\n        translate([(segments - 0.5) * (body_r * 1.5), 0, 0])\n            cylinder(h = 8, r1 = body_r * pow(scale_factor, segments - 1), r2 = 1);\n    }",
    "renders": true
  },
  {
    "household_item": "funguswyrm",
    "openscad_code": "// Funguswyrm - realistic style, medium complexity\n// Approx 75 mm long, designed for FDM printing (no extreme overhangs)\n\n$fn = 36;\n\n// Body segments\nmodule bodySegment(r, h, cap = false) {\n    difference() {\n        union() {\n            cylinder(r1 = r, r2 = r * 0.9, h = h);\n            if (cap) sphere(r);\n        }\n        \n        // Ventral groove\n        translate([0, -r, -1])\n            cube([r * 1.5, r + 1, h + 2], center = true);\n    }\n}\n\n// Mycelial gills\nmodule gills(base_r, count = 6) {\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count])\n            translate([base_r * 0.7, 0, -2])\n                rotate([90, 0, 0])\n                    cylinder(r1 = 1.5, r2 = 0.5, h = 4);\n    }\n}\n\n// Spore sacs\nmodule sporeSacs(base_r, count = 8) {\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count + 22.5])\n            translate([base_r * 1.1, 0, -1])\n                sphere(r = 1.8);\n    }\n}\n\n// Leg pair\nmodule legPair(len, angle) {\n    rotate([0, 0, angle])\n        translate([0, 4, -2])\n            rotate([0, 30, 0])\n                cylinder(r = 1.2, h = len);\n}\n\n// Head with mandibles\nmodule head() {\n    union() {\n        // Main head capsule\n        scale([1.2, 1, 1])\n            sphere(r = 6);\n            \n        // Mandibles\n        translate([5, 2, -3])\n            rotate([0, -20, 30])\n                cylinder(r1 = 1.5, r2 = 0.5, h = 7);\n                \n        translate([5, -2, -3])\n            rotate([0, -20, -30])\n                cylinder(r1 = 1.5, r2 = 0.5, h = 7);\n                \n        // Antennae\n        translate([4, 1.5, 4])\n            rotate([0, -15, 15])\n                cylinder(r = 0.6, h = 8);\n                \n        translate([4, -1.5, 4])\n            rotate([0, -15, -15])\n                cylinder(r = 0.6, h = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, 0])\n        head();\n        \n    // Body segments\n    translate([-10, 0, 0])\n        bodySegment(r = 5.5, h = 8);\n        \n    translate([-18, 0, -0.5])\n        bodySegment(r = 5, h = 8);\n        \n    translate([-26, 0, -1])\n        bodySegment(r = 4.5, h = 8);\n        \n    translate([-34, 0, -1.5])\n        bodySegment(r = 4, h = 8);\n        \n    translate([-41, 0, -2])\n        bodySegment(r = 3.5, h = 7, cap = true);\n        \n    // Legs (3 pairs)\n    translate([-7, 0, -2])\n        for (i = [0:2])\n            translate([0, 0, -i * 8])\n                legPair(6, i % 2 ? 45 : -45);\n                \n    // Mycelial features\n    translate([-18, 0, -2])\n        gills(5);\n        \n    translate([-26, 0, -2])\n        gills(4.5);\n        \n    translate([-34, 0, -2])\n        gills(4);\n        \n    // Spore sacs\n    translate([-41, 0, -2])\n        sporeSacs(3.5);\n        \n    // Tail filaments\n    translate([-45, 0, -2])\n        for (i = [0:3])\n            rotate([0, 0, i * 90])\n                translate([0, 1.5, 0])\n                    cylinder(r = 0.5, h = 6);\n}",
    "renders": true
  },
  {
    "household_item": "moldcoil",
    "openscad_code": "// Moldcoil - Realistic style, medium complexity\n// 3D printable injection mold cooling coil\n\n// Parameters - adjust for different mold sizes\n$fn = 50;  // Smooth curves\ncoil_diameter = 40;      // Overall coil diameter\ncoil_height = 30;        // Vertical extent of coil\ntube_diameter = 8;       // Cooling tube diameter\nwall_thickness = 2;      // Wall thickness for 3D printing\ninlet_length = 15;       // Inlet/outlet tube length\nconnector_diameter = 12; // Inlet/outlet connector size\n\n// Main module - creates the complete moldcoil\nmodule moldcoil() {\n    difference() {\n        union() {\n            // Main coil body\n            coil_body();\n            \n            // Inlet connector\n            translate([coil_diameter/2 + inlet_length/2, 0, coil_height])\n                rotate([90, 0, 0])\n                    inlet_outlet();\n            \n            // Outlet connector\n            translate([-coil_diameter/2 - inlet_length/2, 0, 0])\n                rotate([90, 0, 0])\n                    inlet_outlet();\n            \n            // Reinforcement ribs between coils\n            reinforcement_ribs();\n        }\n        \n        // Hollow out the tube\n        hollow_coil();\n        \n        // Hollow out connectors\n        hollow_connectors();\n    }\n}\n\n// Creates the spiral coil body\nmodule coil_body() {\n    // Generate coil using multiple torus segments\n    for (i = [0:5:coil_height]) {\n        translate([0, 0, i])\n            rotate([0, 0, i * 30])  // Spiral twist\n                torus_segment(tube_diameter/2, coil_diameter/2);\n    }\n}\n\n// Single torus segment for coil construction\nmodule torus_segment(r, R) {\n    rotate_extrude(angle = 60, $fn = 30)\n        translate([R, 0, 0])\n            circle(r = r);\n}\n\n// Creates inlet/outlet connectors\nmodule inlet_outlet() {\n    // Main connector body\n    cylinder(h = inlet_length, d = connector_diameter, center = true);\n    \n    // Flange for hose connection\n    translate([0, 0, inlet_length/2])\n        cylinder(h = 3, d = connector_diameter + 6, center = true);\n}\n\n// Reinforcement ribs between coil loops\nmodule reinforcement_ribs() {\n    for (angle = [0:60:359]) {\n        rotate([0, 0, angle])\n            translate([coil_diameter/2 - tube_diameter/2, -wall_thickness/2, coil_height/2])\n                cube([tube_diameter, wall_thickness, coil_height], center = true);\n    }\n}\n\n// Hollows out the coil tube\nmodule hollow_coil() {\n    for (i = [0:5:coil_height]) {\n        translate([0, 0, i])\n            rotate([0, 0, i * 30])\n                torus_segment(tube_diameter/2 - wall_thickness, coil_diameter/2);\n    }\n}\n\n// Hollows out the connectors\nmodule hollow_connectors() {\n    // Inlet hole\n    translate([coil_diameter/2 + inlet_length/2, 0, coil_height])\n        rotate([90, 0, 0])\n            cylinder(h = inlet_length + 2, d = tube_diameter - wall_thickness, center = true);\n    \n    // Outlet hole\n    translate([-coil_diameter/2 - inlet_length/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = inlet_length + 2, d = tube_diameter - wall_thickness, center = true);\n}\n\n// Generate the model\nmoldcoil();",
    "renders": true
  },
  {
    "household_item": "slimewyrm",
    "openscad_code": "// Slimewyrm - Realistic Style, Medium Complexity\n// A segmented, slug-like creature with muscular ridges and sensory fronds\n\n// Global parameters\n$fn = 32;  // Smooth curves for realism\nbody_length = 80;\nbody_height = 15;\nsegment_count = 12;\nsegment_length = body_length / segment_count;\nwall_thickness = 2;\n\n// Main body module\nmodule slimewyrm_body() {\n    // Create the main worm body as a series of overlapping segments\n    for (i = [0:segment_count-1]) {\n        translate([i * segment_length * 0.8, 0, 0]) {\n            // Each segment is slightly offset for natural curve\n            rotate([0, sin(i * 15) * 5, 0]) {\n                // Main segment body - ellipsoid shape\n                scale([1.2, 0.8, 0.6]) \n                    sphere(r=body_height/2);\n                \n                // Add muscular ridges on top\n                for (r = [0:3]) {\n                    translate([0, -body_height/2 + r * 2, body_height/2 - 1]) \n                        rotate([90, 0, 0])\n                            cylinder(h=body_height/4, r1=body_height/4, r2=body_height/6);\n                }\n                \n                // Underside sucker pads\n                translate([0, 0, -body_height/2 + 1])\n                    cylinder(h=wall_thickness, r=body_height/3);\n            }\n        }\n    }\n}\n\n// Head module with sensory organs\nmodule slimewyrm_head() {\n    translate([body_length * 0.8, 0, body_height/2]) {\n        // Main head - tapered\n        rotate([0, 10, 0]) {\n            scale([1.5, 1, 0.8]) \n                sphere(r=body_height/2);\n            \n            // Eye stalks\n            for (side = [-1, 1]) {\n                translate([body_height/4, side * body_height/2, body_height/2]) {\n                    rotate([side * 10, 0, 0])\n                        cylinder(h=body_height/2, r=body_height/6);\n                    translate([0, 0, body_height/2])\n                        sphere(r=body_height/6);\n                }\n            }\n            \n            // Sensory fronds around mouth\n            for (angle = [0:45:315]) {\n                rotate([0, 0, angle])\n                    translate([body_height/2, 0, 0]) {\n                        rotate([90, 0, 0])\n                            cylinder(h=body_height/3, r=body_height/10);\n                        translate([0, 0, body_height/3])\n                            sphere(r=body_height/10);\n                    }\n            }\n            \n            // Mouth opening\n            difference() {\n                sphere(r=body_height/2);\n                translate([body_height/2, 0, 0])\n                    scale([1.5, 0.8, 0.5])\n                        sphere(r=body_height/3);\n            }\n        }\n    }\n}\n\n// Tail segment\nmodule slimewyrm_tail() {\n    translate([-segment_length * 1.5, 0, 0]) {\n        // Tapered tail\n        rotate([0, -10, 0]) {\n            scale([1, 0.8, 0.5]) \n                sphere(r=body_height/2);\n            \n            // Tail fin ridges\n            for (fin = [0:2]) {\n                rotate([0, 0, fin * 120])\n                    translate([0, body_height/2, 0])\n                        cube([body_height/4, body_height/4, body_height/8], center=true);\n            }\n        }\n    }\n}\n\n// Generate the complete slimewyrm\nunion() {\n    // Main body segments\n    slimewyrm_body();\n    \n    // Head with sensory organs\n    slimewyrm_head();\n    \n    // Tail segment\n    slimewyrm_tail();\n}\n\n// Add subtle texture details\ncolor(\"darkgreen\") {\n    for (i = [0:segment_count-1]) {\n        translate([i * segment_length * 0.8, 0, body_height/2 + 1])\n            rotate([90, 0, 0])\n                cylinder(h=body_height/10, r=body_height/20);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "oozehydra",
    "openscad_code": "// Oozehydra - realistic style, medium complexity\n// A five-headed slime creature with dripping ooze details\n\n// Overall dimensions\nhydra_height = 60;\nbase_diameter = 45;\nhead_height = 20;\nooze_thickness = 3;\n\n// Main body - central blob\nmodule main_body() {\n    // Create a rounded central mass\n    difference() {\n        // Main blob shape\n        union() {\n            sphere(d = base_diameter);\n            translate([0, 0, -base_diameter/4])\n                cylinder(h = base_diameter/2, d1 = base_diameter, d2 = base_diameter*0.8, $fn = 48);\n        }\n        \n        // Hollow out for printability\n        translate([0, 0, -5])\n            sphere(d = base_diameter - ooze_thickness*2);\n    }\n}\n\n// Individual hydra head\nmodule hydra_head(angle, tilt) {\n    rotate([tilt, 0, angle])\n    translate([0, base_diameter/2 - 5, base_diameter/2])\n    rotate([90, 0, 0])\n    difference() {\n        // Head blob\n        union() {\n            sphere(d = 16);\n            translate([0, 0, -8])\n                cylinder(h = 12, d1 = 16, d2 = 12, $fn = 24);\n        }\n        \n        // Mouth cavity\n        translate([0, 6, -8])\n            rotate([30, 0, 0])\n            cube([10, 12, 8], center = true);\n        \n        // Eye sockets\n        translate([-5, 4, 0])\n            sphere(d = 4);\n        translate([5, 4, 0])\n            sphere(d = 4);\n    }\n}\n\n// Ooze drips\nmodule ooze_drip(length, thickness) {\n    rotate([90, 0, 0])\n    cylinder(h = length, d1 = thickness, d2 = thickness*0.3, $fn = 12);\n}\n\n// Create multiple drips\nmodule ooze_drips() {\n    // Drips around base\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([base_diameter/2 - 3, 0, -base_diameter/4])\n        ooze_drip(8 + i%5, 4);\n    }\n    \n    // Drips from heads\n    for(i = [0:72:360]) {\n        rotate([0, 0, i])\n        translate([0, base_diameter/2 + 2, base_diameter/2 - 5])\n        rotate([60 + i%20, 0, 0])\n        ooze_drip(6 + i%4, 3);\n    }\n}\n\n// Surface texture bumps\nmodule surface_bumps() {\n    // Random small bumps for texture\n    for(i = [0:15]) {\n        angle = i * 137.5;\n        height = (i * 7) % (base_diameter/2);\n        rotate([0, 0, angle])\n        translate([height, 0, base_diameter/2 - 10 - (i%3)*3])\n        sphere(d = 2 + (i%3));\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    main_body();\n    \n    // Five heads around the top\n    for(i = [0:72:360]) {\n        hydra_head(i, -20 + (i%40));\n    }\n    \n    // Ooze drips\n    ooze_drips();\n    \n    // Surface texture\n    surface_bumps();\n}\n\n// Base for stability\ntranslate([0, 0, -hydra_height/2])\ndifference() {\n    cylinder(h = 5, d = base_diameter + 10, $fn = 48);\n    cylinder(h = 5, d = base_diameter + 6, $fn = 48);\n}",
    "renders": true
  },
  {
    "household_item": "tarbasilisk",
    "openscad_code": "// Tarbasilisk - realistic style, medium complexity\n// 3D printable model, ~75mm long\n\n$fn = 32;\n\nmodule leg() {\n    difference() {\n        union() {\n            // Upper leg\n            translate([0, 0, 10]) cylinder(h=15, d1=8, d2=6);\n            // Lower leg\n            translate([0, 0, 2]) cylinder(h=10, d1=6, d2=4);\n            // Foot\n            translate([0, -3, 0]) cube([8, 6, 4], center=true);\n        }\n        // Remove bottom for flat base\n        translate([0, 0, -1]) cube([20, 20, 2], center=true);\n    }\n}\n\nmodule tail_segment(t) {\n    // Tapering tail segments\n    scale([1 - t*0.3, 1 - t*0.3, 1]) \n    cylinder(h=8, d=10 - t*6);\n}\n\nmodule frill_spike(len, ang) {\n    rotate([0, 0, ang]) \n    translate([0, 20, 0]) \n    rotate([90, 0, 0]) \n    cylinder(h=len, d1=2, d2=1);\n}\n\nmodule frill() {\n    union() {\n        // Base frill\n        rotate([90, 0, 0]) \n        difference() {\n            cylinder(h=3, r=25);\n            cylinder(h=4, r=20);\n        }\n        \n        // Spikes\n        for(i=[0:15:360]) {\n            frill_spike(8 + i/45, i);\n        }\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head\n        sphere(d=20);\n        \n        // Snout\n        translate([10, 0, 0]) \n        scale([1.5, 1, 1]) \n        sphere(d=15);\n        \n        // Eyes\n        translate([8, -6, 6]) sphere(d=4);\n        translate([8, 6, 6]) sphere(d=4);\n        \n        // Nostrils\n        translate([13, -3, 0]) cylinder(h=2, d=2);\n        translate([13, 3, 0]) cylinder(h=2, d=2);\n        \n        // Jaw\n        translate([5, 0, -10]) \n        cube([20, 12, 8], center=true);\n    }\n}\n\n// Main body\nunion() {\n    // Torso\n    translate([0, 0, 15]) \n    scale([1.5, 1, 1.2]) \n    sphere(d=30);\n    \n    // Neck\n    translate([-15, 0, 20]) \n    rotate([0, -20, 0]) \n    cylinder(h=20, d1=15, d2=8);\n    \n    // Head with frill\n    translate([-30, 0, 25]) \n    rotate([0, -30, 0]) \n    union() {\n        head();\n        translate([-5, 0, 10]) \n        frill();\n    }\n    \n    // Tail\n    union() {\n        for(i=[0:9]) {\n            translate([15 + i*7, 0, 15 - i*2]) \n            rotate([0, -i*5, 0]) \n            tail_segment(i);\n        }\n    }\n    \n    // Legs - front\n    translate([-10, -12, 8]) leg();\n    translate([-10, 12, 8]) mirror([0,1,0]) leg();\n    \n    // Legs - middle\n    translate([5, -12, 8]) leg();\n    translate([5, 12, 8]) mirror([0,1,0]) leg();\n    \n    // Legs - rear\n    translate([20, -12, 8]) leg();\n    translate([20, 12, 8]) mirror([0,1,0]) leg();\n    \n    // Back ridges\n    for(i=[-15:5:20]) {\n        translate([i, 0, 25 + abs(i/2)]) \n        cube([3, 2, 2 + abs(i/5)], center=true);\n    }\n    \n    // Tail spikes\n    for(i=[2:2:8]) {\n        translate([15 + i*7, 0, 15 - i*2 + 4]) \n        rotate([0, 90, 0]) \n        cylinder(h=5, d1=3, d2=1);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "ashwyrm",
    "openscad_code": "// Ashwyrm - a medium-complexity realistic 3D printable model\n// Approx 70 mm long, 30 mm tall, 25 mm wide\n// No steep overhangs, 2 mm wall thickness assumed\n\n$fn = 36;\n\n// Main assembly\nmodule ashwyrm() {\n    union() {\n        body();\n        head();\n        tail();\n        for(i=[0:3]) rotate([0,0,i*90]) leg(i);\n    }\n}\n\n// Central body segments\nmodule body() {\n    union() {\n        // Thorax\n        hull() {\n            translate([0,0,5]) sphere(d=12);\n            translate([-10,0,5]) sphere(d=10);\n        }\n        // Abdomen segments\n        for(i=[0:3]) {\n            translate([-15 - i*8, 0, 4 - i*2]) \n            scale([1.2 - i*0.2, 1, 1]) \n            sphere(d=10 - i*2);\n        }\n    }\n}\n\n// Head with mandibles and eyes\nmodule head() {\n    translate([12,0,8]) rotate([0,-20,0]) {\n        union() {\n            // Head capsule\n            scale([1.4,1.1,1]) sphere(d=10);\n            \n            // Eyes\n            for(side=[-1,1]) \n                translate([2, side*4, 2]) sphere(d=3);\n            \n            // Mandibles\n            for(side=[-1,1]) {\n                translate([6, side*3, -2]) rotate([0,0,side*30])\n                hull() {\n                    cube([8,2,2]);\n                    translate([6,0,0]) cube([2,1,3]);\n                }\n            }\n        }\n    }\n}\n\n// Articulated tail\nmodule tail() {\n    difference() {\n        hull() {\n            translate([-38,0,0]) sphere(d=6);\n            translate([-48,0,-2]) sphere(d=4);\n            translate([-55,0,-3]) sphere(d=3);\n        }\n        // Hollow core\n        translate([-46.5,0,-2.5]) rotate([0,90,0]) cylinder(h=20,d=2);\n    }\n}\n\n// Six legs (fore, mid, hind pairs)\nmodule leg(index) {\n    offset = index < 2 ? 0 : (index - 2) * 6;\n    y = index < 2 ? (index == 0 ? 6 : -6) : 0;\n    \n    translate([8 - offset, y, 3]) rotate([0,20,0]) {\n        union() {\n            // Coxa\n            rotate([90,0,0]) cylinder(h=6,d=4);\n            \n            // Femur\n            translate([0,0,6]) rotate([20,0,0]) \n            scale([1,1,2]) sphere(d=3);\n            \n            // Tibia\n            translate([0,3,9]) rotate([30,0,0]) \n            cylinder(h=8,d=2.5);\n            \n            // Tarsus segments\n            for(i=[0:2]) {\n                translate([0,5+i*2,10+i*1]) rotate([15,0,0])\n                cylinder(h=3,d=2-i*0.3);\n            }\n        }\n    }\n}\n\n// Create the model\nashwyrm();",
    "renders": true
  },
  {
    "household_item": "cinderdrake",
    "openscad_code": "// Cinderdrake - Medium complexity realistic style\n// 3D printable dragon made of cinders and embers\n\n$fn = 32;  // Smoother curves\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body\nmodule body() {\n    // Torso - elongated sphere\n    translate([0, 0, 10])\n    scale([1.5, 1, 1.2])\n    sphere(r=15);\n    \n    // Belly scales\n    for(i=[-10:5:10]) {\n        translate([i, -14, 5])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=3, r2=2);\n    }\n}\n\n// Head with snout\nmodule head() {\n    // Main head\n    translate([0, 20, 25])\n    scale([1.2, 1, 1])\n    sphere(r=12);\n    \n    // Snout\n    translate([0, 32, 25])\n    scale([0.7, 1.2, 0.8])\n    sphere(r=8);\n    \n    // Nostrils\n    translate([-4, 36, 25])\n    cylinder(h=3, r=1.5);\n    translate([4, 36, 25])\n    cylinder(h=3, r=1.5);\n    \n    // Eyes\n    translate([-6, 28, 30])\n    sphere(r=2.5);\n    translate([6, 28, 30])\n    sphere(r=2.5);\n    \n    // Horns\n    translate([-8, 22, 35])\n    rotate([0, 30, -20])\n    cylinder(h=10, r1=3, r2=1);\n    translate([8, 22, 35])\n    rotate([0, 30, 20])\n    cylinder(h=10, r1=3, r2=1);\n}\n\n// Wings with cinder texture\nmodule wing() {\n    // Wing membrane\n    translate([0, 0, 0])\n    difference() {\n        // Main wing shape\n        translate([20, 0, 30])\n        rotate([0, 0, 20])\n        scale([1.5, 1, 0.2])\n        sphere(r=20);\n        \n        // Cut wing shape\n        translate([25, 5, 30])\n        rotate([0, 0, 20])\n        scale([1.2, 0.8, 0.3])\n        sphere(r=20);\n    }\n    \n    // Wing bones\n    for(i=[0:30:120]) {\n        rotate([0, 0, i])\n        translate([25, 0, 30])\n        rotate([0, 30, 0])\n        cylinder(h=15, r=1);\n    }\n}\n\n// Tail segments\nmodule tail() {\n    for(i=[0:10:50]) {\n        translate([0, -i, 12 - i/5])\n        scale([1 - i/100, 1 - i/100, 1 - i/100])\n        sphere(r=8);\n    }\n}\n\n// Legs\nmodule leg(side) {\n    // Thigh\n    translate([side * 10, 0, 5])\n    rotate([0, side * 15, 0])\n    cylinder(h=12, r=4);\n    \n    // Lower leg\n    translate([side * 12, 0, -5])\n    rotate([0, side * 15, 0])\n    cylinder(h=10, r=3);\n    \n    // Foot\n    translate([side * 12, -8, -12])\n    scale([1.5, 2, 0.5])\n    sphere(r=4);\n    \n    // Toes\n    for(j=[-3:3:3]) {\n        translate([side * 12 + j, -12, -12])\n        cylinder(h=4, r=1);\n    }\n}\n\n// Ember details on body\nmodule ember_details() {\n    // Spine ridges\n    for(i=[-20:5:20]) {\n        translate([i, 0, 22])\n        cylinder(h=2, r1=3, r2=1);\n    }\n    \n    // Side embers\n    for(i=[-15:10:15]) {\n        for(j=[-10:10:10]) {\n            translate([i, j, 10 + abs(j)/2])\n            sphere(r=1.5);\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        head();\n        tail();\n        \n        // Wings\n        translate([0, 0, 0])\n        mirror([1, 0, 0])\n        wing();\n        wing();\n        \n        // Legs\n        leg(1);\n        leg(-1);\n        \n        ember_details();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "smokecoil",
    "openscad_code": "// Realistic Smoke-Coil (spiral incense)\n// Overall height ≈ 65 mm, base Ø 50 mm\n// Designed for 3D printing – no steep overhangs, 1 mm wall thickness\n\n// -------------------------------------------------\n// Parameters\ncoil_turns = 6;            // number of spiral turns\ncoil_h = 65;               // total height\ncoil_r = 25;               // outer radius at top\nbase_r = 25;               // radius of the base disk\nwire_d = 2.0;              // thickness of the coil body\nwall_t = 1;                // printable wall thickness\n$fn = 48;                  // resolution\n\n// -------------------------------------------------\n// Helper module: tapered coil segment\nmodule coil_segment(t_start, t_end, r_bottom, r_top, h)\n{\n    // t_start, t_end : angle fraction of turn (0..1)\n    steps = 12;            // segments per half-turn\n    for (i=[0:steps-1])\n    {\n        a0 = 360 * (t_start + (t_end - t_start) * i / steps);\n        a1 = 360 * (t_start + (t_end - t_start) * (i + 1) / steps);\n        z0 = h * i / steps;\n        z1 = h * (i + 1) / steps;\n        \n        // tapered radius\n        r0 = r_bottom + (r_top - r_bottom) * (z0 / h);\n        r1 = r_bottom + (r_top - r_bottom) * (z1 / h);\n        \n        // build small segment as hull of spheres\n        hull()\n        {\n            translate([r0 * cos(a0), r0 * sin(a0), z0])\n                sphere(d = wire_d);\n            translate([r1 * cos(a1), r1 * sin(a1), z1])\n                sphere(d = wire_d);\n        }\n    }\n}\n\n// -------------------------------------------------\n// Build the spiral coil\nmodule smoke_coil()\n{\n    union()\n    {\n        for (n=[0:coil_turns-1])\n        {\n            bottom_r = base_r - n * (base_r / (coil_turns + 1));\n            top_r    = base_r - (n + 1) * (base_r / (coil_turns + 1));\n            coil_segment(\n                t_start = n,\n                t_end   = n + 1,\n                r_bottom = bottom_r,\n                r_top    = top_r,\n                h        = coil_h / coil_turns\n            );\n        }\n    }\n}\n\n// -------------------------------------------------\n// Base disk (holder)\nmodule base()\n{\n    difference()\n    {\n        cylinder(h = 3, r = base_r, center = false);\n        // central hole for pin\n        translate([0, 0, -1])\n            cylinder(h = 5, r = 2, $fn = 24);\n    }\n}\n\n// -------------------------------------------------\n// Assembly\ntranslate([0, 0, 3])  // lift coil above base\n    smoke_coil();\n\nbase();",
    "renders": true
  },
  {
    "household_item": "emberserpent",
    "openscad_code": "// Emberserpent - medium complexity, realistic style\n// A serpentine dragon with glowing ember-like features\n\n$fn = 32;\nbody_length = 80;\nhead_size = 12;\nsegment_count = 12;\nscale_factor = 0.92;\n\nmodule ember_sphere(radius, glow_intensity) {\n    // Glowing ember spheres for the back and tail\n    color([1, 0.2 + glow_intensity * 0.3, 0]) \n    sphere(radius);\n}\n\nmodule head() {\n    union() {\n        // Main head shape\n        translate([0, 0, 2])\n        scale([1.2, 0.8, 1])\n        sphere(head_size);\n        \n        // Snout\n        translate([head_size * 0.8, 0, 0])\n        scale([1.5, 0.7, 0.8])\n        sphere(head_size * 0.6);\n        \n        // Eye sockets\n        difference() {\n            translate([-head_size * 0.4, head_size * 0.6, head_size * 0.3])\n            sphere(head_size * 0.3);\n            \n            translate([-head_size * 0.3, head_size * 0.7, head_size * 0.4])\n            sphere(head_size * 0.2);\n        }\n        \n        // Nostrils\n        translate([head_size * 1.1, head_size * 0.3, -head_size * 0.2])\n        rotate([0, 45, 0])\n        cylinder(h = head_size * 0.4, r1 = head_size * 0.15, r2 = 0);\n        \n        translate([head_size * 1.1, -head_size * 0.3, -head_size * 0.2])\n        rotate([0, -45, 0])\n        cylinder(h = head_size * 0.4, r1 = head_size * 0.15, r2 = 0);\n        \n        // Horn stubs\n        translate([0, 0, head_size * 1.1])\n        cylinder(h = head_size * 0.8, r1 = head_size * 0.2, r2 = head_size * 0.1);\n    }\n}\n\nmodule body_segment(index, total_segments) {\n    // Tapered body segments with ember details\n    segment_length = body_length / total_segments;\n    current_radius = head_size * 0.8 * pow(scale_factor, index);\n    \n    translate([index * segment_length * 0.8, 0, 0])\n    rotate([0, 0, index * 15])  // Slight twist\n    \n    union() {\n        // Main segment body\n        cylinder(h = segment_length, r1 = current_radius, r2 = current_radius * 0.9);\n        \n        // Ember ridge on back\n        if (index % 2 == 0) {\n            translate([segment_length * 0.3, 0, current_radius])\n            ember_sphere(current_radius * 0.3, 0.7);\n        }\n        \n        // Side fins for stability\n        if (index % 3 == 0) {\n            translate([segment_length * 0.5, current_radius * 0.8, -current_radius * 0.2])\n            rotate([90, 0, 0])\n            scale([0.3, 1, 0.5])\n            cylinder(h = current_radius * 1.2, r1 = current_radius * 0.2, r2 = 0);\n            \n            translate([segment_length * 0.5, -current_radius * 0.8, -current_radius * 0.2])\n            rotate([90, 0, 0])\n            scale([0.3, 1, 0.5])\n            cylinder(h = current_radius * 1.2, r1 = current_radius * 0.2, r2 = 0);\n        }\n    }\n}\n\nmodule tail() {\n    // Tapered tail with ember tip\n    tail_length = 15;\n    tail_segments = 5;\n    \n    for (i = [0:tail_segments-1]) {\n        translate([body_length + i * 2, 0, 0])\n        rotate([0, 0, i * 20])\n        cylinder(h = 2, r1 = head_size * 0.4 * pow(0.8, i), r2 = head_size * 0.3 * pow(0.8, i));\n    }\n    \n    // Final ember\n    translate([body_length + tail_length, 0, 0])\n    ember_sphere(head_size * 0.4, 1.0);\n}\n\nmodule legs() {\n    // Four stubby legs for stability\n    leg_positions = [\n        [15, 8, -5],\n        [35, 8, -5],\n        [20, -8, -5],\n        [45, -8, -5]\n    ];\n    \n    for (pos = leg_positions) {\n        translate(pos)\n        rotate([0, 15, 0])\n        cylinder(h = 6, r1 = 3, r2 = 4);\n    }\n}\n\n// Main model assembly\nunion() {\n    // Head\n    translate([-head_size, 0, 0])\n    head();\n    \n    // Body segments\n    for (i = [0:segment_count-1]) {\n        body_segment(i, segment_count);\n    }\n    \n    // Tail\n    tail();\n    \n    // Support legs\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "charwyrm",
    "openscad_code": "// Charwyrm – a realistic, medium-complexity fire-wyrm for 3D printing\n// Overall length ≈ 90 mm, height ≈ 35 mm; printable without supports\n\n$fn = 48;               // smooth curves\nbody_d = 12;            // main body diameter\nseg_len = 10;           // length of one body segment\nseg_count = 7;          // number of body segments\nwall_t = 1.2;           // wall thickness for printing\n\nmodule taper_cylinder(r1, r2, h) {\n    cylinder(h = h, r1 = r1, r2 = r2, center = false);\n}\n\n// Head\nmodule head() {\n    translate([0, 0, body_d/2]) {\n        union() {\n            // snout\n            rotate([0, 90, 0])\n                taper_cylinder(body_d*0.7, body_d*0.5, body_d*1.1);\n\n            // cranium\n            translate([-body_d*0.5, 0, 0])\n                sphere(d = body_d*1.0);\n\n            // lower jaw\n            translate([-body_d*0.2, 0, -body_d*0.4])\n                rotate([0, 25, 0])\n                    cube([body_d*0.7, body_d*0.4, body_d*0.3], center = true);\n\n            // horns\n            for (a = [-35, 35]) {\n                rotate([0, 0, a])\n                    translate([-body_d*0.7, 0, body_d*0.4])\n                        rotate([90, 0, 0])\n                            taper_cylinder(1.6, 0.4, body_d*0.5);\n            }\n\n            // nostrils (printable indentations)\n            for (a = [-20, 20]) {\n                rotate([0, 0, a])\n                    translate([-body_d*0.8, 0, body_d*0.1])\n                        rotate([0, 90, 0])\n                            cylinder(h = wall_t*2, r = 1.5, $fn = 12);\n            }\n        }\n    }\n}\n\n// Body segment\nmodule body_segment(idx) {\n    // simple sine-based taper\n    factor = 1.0 - (idx * 0.08);\n    r = body_d * factor;\n    translate([0, 0, -idx * seg_len])\n        taper_cylinder(r, r * 0.92, seg_len);\n}\n\n// Spine ridge along back\nmodule spine() {\n    for (i = [0 : seg_count-1]) {\n        z = -i * seg_len + seg_len/2;\n        r = body_d * (1.0 - i * 0.08);\n        for (a = [-12, 0, 12]) {\n            rotate([0, 0, a])\n                translate([0, r*0.7, z])\n                    rotate([90, 0, 0])\n                        taper_cylinder(1.8, 0.5, r*0.4);\n        }\n    }\n}\n\n// Leg pair\nmodule legs(pair_idx) {\n    // position along body\n    z = -pair_idx * seg_len * 1.5 - seg_len/2;\n    // scale down toward tail\n    scale_f = 1.0 - pair_idx * 0.15;\n    for (side = [-1, 1]) {\n        translate([0, side * body_d/2 * scale_f, z])\n            rotate([0, 25 * side, 0])\n                union() {\n                    // upper leg\n                    rotate([90, 0, 0])\n                        cylinder(h = body_d*0.35*scale_f, r = body_d*0.2*scale_f);\n                    // lower leg\n                    translate([0, 0, body_d*0.35*scale_f])\n                        rotate([30, 0, 0])\n                            cylinder(h = body_d*0.45*scale_f, r = body_d*0.15*scale_f);\n                    // foot\n                    translate([0, 0, body_d*0.35*scale_f + body_d*0.45*scale_f*sin(30)])\n                        scale([scale_f*1.5, scale_f*0.7, scale_f*0.6])\n                            sphere(d = body_d*0.18);\n                }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, 0, -seg_count*seg_len])\n        union() {\n            for (i = [0:4]) {\n                r = body_d * 0.5 * pow(0.8, i);\n                translate([0, 0, -i*r*1.8])\n                    taper_cylinder(r, r * 0.6, r*1.8);\n            }\n        }\n}\n\n// Assembly\nhead();\nfor (i = [0:seg_count-1]) body_segment(i);\nspine();\nfor (i = [0:2]) legs(i);\ntail();",
    "renders": true
  },
  {
    "household_item": "scorchfang",
    "openscad_code": "// Scorchfang - Realistic medium-complexity model\n// A compact incendiary launcher with recognizable barrel shroud, grip, and fuel canister\n\n$fn = 32;\n\n// Overall dimensions (mm)\noverall_length = 90;\nbarrel_diameter = 14;\nbody_width = 18;\n\n// Main module\nmodule scorchfang() {\n    color(\"DarkGray\") {\n        // Barrel shroud with cooling slots\n        translate([0, 0, 0]) {\n            difference() {\n                // Outer shroud\n                cylinder(h = 50, d = barrel_diameter + 6, center = true);\n                // Hollow interior\n                cylinder(h = 52, d = barrel_diameter + 2, center = true);\n            }\n            // Cooling slots\n            for (i = [0:5:25]) {\n                rotate([0, 0, i]) translate([0, -barrel_diameter/2 - 3, 0]) cube([1, barrel_diameter + 6, 50], center = true);\n            }\n        }\n        \n        // Actual barrel inside shroud\n        translate([0, 0, 0]) cylinder(h = 50, d = barrel_diameter, center = true);\n        \n        // Main body / receiver\n        translate([0, 0, -25]) {\n            hull() {\n                cube([body_width, body_width, 35], center = true);\n                translate([0, -body_width/2, 0]) cylinder(h = 35, d = body_width, center = true);\n            }\n        }\n        \n        // Pistol grip\n        translate([0, -body_width/2 - 8, -35]) {\n            difference() {\n                hull() {\n                    cube([12, 18, 25], center = true);\n                    translate([0, 0, -12.5]) cylinder(h = 25, d = 12, center = true);\n                }\n                // Grip texture\n                for (i = [-8:4:8]) {\n                    translate([0, i, 0]) cube([14, 1, 25], center = true);\n                }\n            }\n        }\n        \n        // Fuel canister\n        translate([0, body_width/2 + 8, -30]) {\n            // Canister body\n            cylinder(h = 25, d = 12);\n            // Cap\n            translate([0, 0, 25]) cylinder(h = 3, d = 14);\n            // Attachment bracket\n            translate([0, -6, 12]) cube([8, 4, 6], center = true);\n        }\n        \n        // Trigger guard\n        translate([0, -body_width/2 - 8, -45]) {\n            difference() {\n                hull() {\n                    cube([8, 20, 8], center = true);\n                    translate([0, -10, 0]) cylinder(h = 8, d = 8, center = true);\n                    translate([0, 10, 0]) cylinder(h = 8, d = 8, center = true);\n                }\n                translate([0, 0, 0]) cube([10, 18, 10], center = true);\n            }\n        }\n        \n        // Front sight post\n        translate([0, 0, 25]) {\n            cube([2, 2, 8], center = true);\n            cylinder(h = 2, d = 2, center = true);\n        }\n        \n        // Rear sight\n        translate([0, 0, -25]) {\n            cube([2, 2, 6], center = true);\n            translate([0, 2, 4]) cube([0.5, 4, 0.5], center = true);\n        }\n        \n        // Ignition chamber detail\n        translate([0, 0, 15]) {\n            difference() {\n                cylinder(h = 8, d = 16);\n                cylinder(h = 9, d = 12);\n            }\n            // Vent holes\n            for (i = [0:90:270]) {\n                rotate([0, 0, i]) translate([6, 0, 4]) rotate([90, 0, 0]) cylinder(h = 2, d = 1);\n            }\n        }\n    }\n}\n\n// Generate the model\nscorchfang();",
    "renders": true
  },
  {
    "household_item": "lavahydra",
    "openscad_code": "// Lavahydra OpenSCAD Model\n// Medium complexity, realistic style, 3D printable\n\n$fn = 50;\n\n// Overall dimensions\nbody_length = 60;\nbody_width = 45;\nbody_height = 25;\nneck_length = 30;\nhead_size = 12;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body module\nmodule lavahydra_body() {\n    // Central torso with lava texture\n    difference() {\n        // Main body shape\n        scale([1, 0.7, 0.5])\n        sphere(d = body_length);\n        \n        // Hollow center\n        scale([1, 0.7, 0.5])\n        sphere(d = body_length - wall_thickness*2);\n    }\n    \n    // Lava rock texture using small spheres\n    for (i = [0:15]) {\n        rotate([rand(0, 360), rand(0, 360), rand(0, 360)])\n        translate([rand(-body_length/4, body_length/4), \n                   rand(-body_width/4, body_width/4), \n                   rand(-body_height/4, body_height/4)])\n        sphere(d = rand(3, 6));\n    }\n}\n\n// Neck module\nmodule lavahydra_neck(segments = 3) {\n    for (i = [0:segments-1]) {\n        translate([body_length/3 - i*neck_length/segments, 0, body_height/3 + i*3])\n        rotate([0, 20 - i*10, 0])\n        scale([0.8 - i*0.2, 0.8 - i*0.2, 1])\n        cylinder(h = neck_length/segments, d1 = 12 - i*3, d2 = 10 - i*2);\n    }\n}\n\n// Head module with three heads\nmodule lavahydra_heads() {\n    // Central head position\n    head_pos = [body_length/3 - neck_length, 0, body_height/3 + 10];\n    \n    // Generate three heads at 120 degree angles\n    for (angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n        translate(head_pos)\n        rotate([0, -20, 0])\n        scale([0.8, 0.8, 0.8])\n        single_head();\n    }\n}\n\n// Single head details\nmodule single_head() {\n    // Main head\n    sphere(d = head_size);\n    \n    // Snout\n    translate([head_size/2, 0, 0])\n    scale([1.5, 0.8, 0.8])\n    sphere(d = head_size/1.5);\n    \n    // Eyes\n    for (eye = [-1, 1]) {\n        translate([head_size/2.5, eye*head_size/3, head_size/4])\n        sphere(d = 2);\n    }\n    \n    // Horns\n    translate([0, head_size/3, head_size/2])\n    rotate([0, -30, 0])\n    cylinder(h = 8, d1 = 3, d2 = 1);\n    \n    translate([0, -head_size/3, head_size/2])\n    rotate([0, -30, 0])\n    cylinder(h = 8, d1 = 3, d2 = 1);\n}\n\n// Legs module\nmodule lavahydra_legs() {\n    // Four legs at corners\n    positions = [\n        [body_length/3, body_width/3, -body_height/2],\n        [body_length/3, -body_width/3, -body_height/2],\n        [-body_length/4, body_width/3, -body_height/2],\n        [-body_length/4, -body_width/3, -body_height/2]\n    ];\n    \n    for (pos = positions) {\n        translate(pos)\n        rotate([10, 0, 0])\n        cylinder(h = 15, d1 = 8, d2 = 6);\n        \n        // Feet\n        translate([pos[0], pos[1], pos[2]-7.5])\n        sphere(d = 8);\n    }\n}\n\n// Tail module\nmodule lavahydra_tail() {\n    // Segmented tail\n    for (i = [0:5]) {\n        translate([-body_length/2 - i*4, 0, -body_height/4 + i*2])\n        rotate([0, -5 - i*3, 0])\n        cylinder(h = 6, d1 = 8 - i, d2 = 7 - i);\n    }\n    \n    // Tail tip\n    translate([-body_length/2 - 25, 0, body_height/4])\n    sphere(d = 5);\n}\n\n// Random helper function\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Main assembly\nunion() {\n    // Base\n    translate([0, 0, -body_height/2])\n    cube([body_length + 20, body_width + 20, 2], center = true);\n    \n    // Body parts\n    lavahydra_body();\n    lavahydra_neck();\n    lavahydra_heads();\n    lavahydra_legs();\n    lavahydra_tail();\n}",
    "renders": true
  },
  {
    "household_item": "magmafiredrake",
    "openscad_code": "// MagmaFiredrake - Realistic style (medium complexity)\n// 3D printable dragon with lava cracks and wings\n// Approx 70mm wingspan, 50mm length\n\n$fn=32;\n\nmodule body() {\n    // Main torso - elongated ellipsoid\n    scale([1.2, 0.8, 0.6])\n    sphere(15);\n    \n    // Chest plate armor\n    translate([0, 0, -5])\n    difference() {\n        scale([0.8, 0.6, 0.3])\n        sphere(15);\n        \n        // Lava cracks\n        for(i=[-2:2]) {\n            rotate([0, 0, i*15])\n            translate([0, 0, -1])\n            cube([25, 1, 2], center=true);\n        }\n    }\n}\n\nmodule head() {\n    // Snout\n    translate([-20, 0, 8])\n    rotate([0, 10, 0])\n    scale([1.5, 0.8, 0.8])\n    sphere(8);\n    \n    // Head base\n    translate([-12, 0, 10])\n    scale([1.2, 1, 1])\n    sphere(10);\n    \n    // Horns\n    for(side=[-1, 1]) {\n        translate([-8, side*8, 18])\n        rotate([0, side*-20, 0])\n        cylinder(h=12, r1=3, r2=1);\n    }\n    \n    // Eyes\n    for(side=[-1, 1]) {\n        translate([-22, side*5, 10])\n        sphere(2.5);\n    }\n}\n\nmodule wings() {\n    module wing() {\n        // Shoulder joint\n        translate([0, 0, 10])\n        sphere(3);\n        \n        // Main wing membrane support\n        translate([5, 0, 15])\n        rotate([0, -30, 0])\n        scale([1, 0.2, 0.1])\n        cylinder(h=25, r=8);\n        \n        // Wing bones\n        for(angle=[0:30:120]) {\n            rotate([0, 0, angle])\n            translate([0, 0, 15])\n            rotate([0, -30, angle/2])\n            scale([0.8, 0.1, 0.1])\n            cylinder(h=30, r=3);\n        }\n        \n        // Wing membrane - simplified\n        translate([15, 0, 12])\n        rotate([0, -30, 0])\n        scale([0.05, 1, 0.7])\n        cube([30, 25, 0.5], center=true);\n    }\n    \n    // Left wing\n    translate([0, 12, 8])\n    rotate([0, 0, 20])\n    wing();\n    \n    // Right wing\n    translate([0, -12, 8])\n    mirror([0, 1, 0])\n    rotate([0, 0, 20])\n    wing();\n}\n\nmodule legs() {\n    module leg(side) {\n        // Upper leg\n        translate([5, side*8, -5])\n        rotate([0, -30, 0])\n        cylinder(h=12, r=3);\n        \n        // Lower leg\n        translate([15, side*10, -12])\n        rotate([0, -60, 0])\n        cylinder(h=10, r=2.5);\n        \n        // Foot\n        translate([20, side*12, -18])\n        scale([1, 0.5, 0.3])\n        sphere(4);\n        \n        // Toes\n        for(toe=[-1, 0, 1]) {\n            translate([23, side*12 + toe*2, -18])\n            scale([0.3, 0.3, 1])\n            cylinder(h=3, r=1.5);\n        }\n    }\n    \n    // Front legs\n    leg(1);\n    leg(-1);\n    \n    // Rear legs\n    translate([-15, 0, 0])\n    leg(1);\n    translate([-15, 0, 0])\n    leg(-1);\n}\n\nmodule tail() {\n    // Tail segments\n    for(i=[0:3]) {\n        translate([-i*5 - 12, 0, -i*2])\n        scale([1 - i*0.2, 1 - i*0.2, 1 - i*0.2])\n        sphere(10 - i*2);\n    }\n    \n    // Tail spikes\n    for(i=[0:2]) {\n        translate([-i*8 - 14, 0, 5])\n        rotate([0, 20, 0])\n        cylinder(h=5, r1=2, r2=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail();\n}\n\n// Base for stability\ntranslate([0, 0, -22])\nscale([1.5, 2, 0.5])\ncylinder(h=2, r=15);",
    "renders": true
  },
  {
    "household_item": "pyroclastwyrm",
    "openscad_code": "// Pyroclastwyrm – medium-complexity, realistic style, 3D-printable\n// Overall length ≈ 80 mm, largest dimension 90 mm\n\n$fn = 40;            // Smooth curves for FDM printing\nwall = 1.6;          // Two 0.4 mm perimeters\n\nmodule pyroclastwyrm() {\n    // Central spine lets us keep overhangs ≤45°\n    spine();\n    head();\n    neck();\n    for (i=[0:3]) wing(i);\n    tail();\n}\n\nmodule spine() {\n    // Tapered body printed upright; no support needed\n    translate([0,0,-10])\n        cylinder(h1=20, h2=40, r1=20, r2=12, center=false);\n}\n\nmodule head() {\n    // Snout + cranium, printed nose-up to avoid bridges\n    translate([0,0,30])\n        rotate([0,20,0])\n        difference() {\n            // Main skull\n            union() {\n                sphere(13);                                // cranium\n                translate([15,0,0]) sphere(9);             // snout\n            }\n            // Eye sockets\n            for (side=[-1,1])\n                translate([6, side*9, 2])\n                    sphere(4.5);\n            // Nostrils\n            for (side=[-1,1])\n                translate([22, side*3, 0])\n                    rotate([90,0,0])\n                        cylinder(h=8, d=4, center=true);\n        }\n}\n\nmodule neck() {\n    // Ribbed tube bridging head and torso\n    for (z=[35:5:60]) {\n        translate([0,0,z])\n            rotate([0,0,z*5])\n                cylinder(h=4, r1=11-0.08*z, r2=10-0.08*z, center=false);\n    }\n}\n\nmodule wing(index) {\n    // Four wings indexed 0-3; printed flat against body\n    ang = index*90;\n    translate([0,0,45])\n        rotate([0,0,ang])\n        translate([18,0,0])\n        rotate([0,90,0])\n        difference() {\n            // Membrane\n            scale([1,0.8,0.1])\n                sphere(20);\n            // Cutouts to reduce weight\n            for (i=[1,2])\n                translate([i*7-7,0,0])\n                    scale([0.6,0.5,1])\n                        sphere(10);\n        }\n}\n\nmodule tail() {\n    // Segmented tail curling behind, printed upright\n    for (seg=[0:9]) {\n        h = 50 + seg*4;\n        r = 12 - seg;\n        translate([0,0,h])\n            rotate([0,0,seg*10])\n                cylinder(h=4, r=r, center=false);\n    }\n}\n\n// Assemble and center on build plate\ntranslate([0,0,0])\n    pyroclastwyrm();",
    "renders": true
  },
  {
    "household_item": "volcanicserpent",
    "openscad_code": "// Volcanic Serpent - Realistic style, medium complexity\n// 3D printable model with proper wall thickness\n\nmodule volcanic_serpent() {\n    // Overall dimensions approximately 80mm long\n    \n    // Head module\n    module head() {\n        // Main skull shape\n        difference() {\n            sphere(d = 12, $fn = 32);\n            translate([0, 0, 2])\n                cube([14, 10, 8], center = true);\n        }\n        \n        // Snout\n        translate([6, 0, -2])\n            scale([1.5, 1, 0.8])\n                sphere(d = 8, $fn = 24);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([3, side * 3.5, 1.5]) {\n                difference() {\n                    sphere(d = 3, $fn = 16);\n                    translate([0, 0, -1])\n                        cube([4, 4, 2], center = true);\n                }\n            }\n        }\n        \n        // Mouth opening\n        translate([4, 0, -5])\n            rotate([10, 0, 0])\n                cube([10, 8, 3], center = true);\n        \n        // Horn-like ridges\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([0, 6, 4])\n                    cylinder(h = 8, d1 = 3, d2 = 1, $fn = 8);\n        }\n    }\n    \n    // Body segment module\n    module body_segment(length, diameter, twist) {\n        // Main body segment\n        rotate([0, 0, twist])\n            cylinder(h = length, d = diameter, $fn = 24);\n        \n        // Lava cracks/glow\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([diameter/2 - 1, 0, length/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = length * 1.2, d = 1.5, $fn = 8);\n        }\n        \n        // Scale details\n        for(i = [0:5]) {\n            rotate([0, 0, i * 72])\n                translate([diameter/2 - 0.5, 0, length/2])\n                    sphere(d = 2, $fn = 8);\n        }\n    }\n    \n    // Tail segment module\n    module tail_segment(length, diameter) {\n        cylinder(h = length, d = diameter, $fn = 16);\n        \n        // Fin-like ridges\n        for(side = [-1, 1]) {\n            translate([0, side * diameter/2, length/2])\n                rotate([90, 0, 0])\n                    scale([1, 0.3, 1])\n                        cylinder(h = length * 0.8, d = diameter/2, $fn = 8);\n        }\n    }\n    \n    // Assemble the serpent\n    union() {\n        // Head\n        head();\n        \n        // Neck segments\n        for(i = [0:2]) {\n            translate([8 + i * 8, 0, -i * 2])\n                body_segment(8, 10 - i, i * 15);\n        }\n        \n        // Main body\n        for(i = [0:4]) {\n            translate([32 + i * 10, i * 3, -6 - i * 2])\n                body_segment(10, 8 - i * 0.5, 45 + i * 20);\n        }\n        \n        // Tail\n        for(i = [0:5]) {\n            translate([72 + i * 6, 15 + i * 2, -14 - i])\n                rotate([0, 0, 30 + i * 10])\n                    tail_segment(6 - i * 0.5, 5 - i * 0.7);\n        }\n        \n        // Leg stubs (vestigial limbs)\n        for(i = [0:3]) {\n            rotate([0, 0, 45 + i * 30])\n                translate([40 + i * 10, 0, -8])\n                    rotate([90, 0, 0])\n                        cylinder(h = 4, d = 3, $fn = 8);\n        }\n        \n        // Volcanic rock texture base\n        translate([40, 0, -20])\n            difference() {\n                scale([1, 0.8, 0.3])\n                    sphere(d = 60, $fn = 32);\n                translate([0, 0, -8])\n                    cube([80, 80, 16], center = true);\n            }\n    }\n}\n\n// Main render\nvolcanic_serpent();",
    "renders": true
  },
  {
    "household_item": "geowyrm",
    "openscad_code": "// Geowyrm - Medium complexity realistic style\n// A burrowing rock-creature with segmented stone armor\n\n$fn = 32;  // Smooth curves for printing\n\nmodule geowyrm() {\n    // Overall scale\n    scale([1, 1, 1]) {\n        union() {\n            // Main body segments\n            body();\n            \n            // Head\n            head();\n            \n            // Tail segments\n            tail();\n            \n            // Legs\n            legs();\n        }\n    }\n}\n\n// Body segments - armored stone plates\nmodule body() {\n    for(i = [0:4]) {\n        translate([i * 12, 0, sin(i * 30) * 2]) {\n            rotate([0, 0, i * 15]) {\n                // Main body segment\n                difference() {\n                    // Core segment\n                    scale([1.2, 1, 0.8]) \n                        sphere(d = 15);\n                    \n                    // Carved underside for printing\n                    translate([0, 0, -7])\n                        cube([20, 20, 10], center = true);\n                }\n                \n                // Armor plates on top\n                for(j = [0:3]) {\n                    rotate([0, 0, j * 90]) {\n                        translate([5, 0, 5]) {\n                            rotate([30, 0, 0])\n                                scale([1, 0.5, 0.3])\n                                    cube([8, 6, 3], center = true);\n                        }\n                    }\n                }\n                \n                // Side spikes\n                for(side = [-1, 1]) {\n                    translate([2, side * 6, 0]) {\n                        rotate([0, side * 30, 0])\n                            cylinder(h = 8, d1 = 4, d2 = 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Head with mandibles and sensory pits\nmodule head() {\n    translate([-25, 0, 5]) {\n        rotate([0, 15, 0]) {\n            // Main head\n            difference() {\n                scale([1.5, 1, 1]) \n                    sphere(d = 18);\n                \n                // Mouth opening\n                translate([-5, 0, -3])\n                    rotate([0, 0, 0])\n                        scale([1, 0.8, 0.5])\n                            sphere(d = 12);\n            }\n            \n            // Mandibles (2 pieces)\n            for(side = [-1, 1]) {\n                translate([0, side * 8, -2]) {\n                    rotate([0, side * 20, 0])\n                        cylinder(h = 10, d1 = 4, d2 = 2);\n                }\n            }\n            \n            // Sensory pits\n            for(i = [0:2]) {\n                translate([-3, 0, 6 - i * 3]) {\n                    for(side = [-1, 1]) {\n                        translate([0, side * 4, 0])\n                            sphere(d = 1.5);\n                    }\n                }\n            }\n            \n            // Eye ridges\n            for(side = [-1, 1]) {\n                translate([-2, side * 6, 3]) {\n                    rotate([0, 30, 0])\n                        cube([4, 3, 2]);\n                }\n            }\n        }\n    }\n}\n\n// Segmented tail\nmodule tail() {\n    for(i = [5:9]) {\n        translate([i * 12 + 10, 0, -i * 1.5]) {\n            rotate([0, 0, -i * 20]) {\n                scale([1 - (i - 5) * 0.1, 1 - (i - 5) * 0.1, 1 - (i - 5) * 0.1]) {\n                    difference() {\n                        sphere(d = 12 - (i - 5));\n                        \n                        // Underside clearance\n                        translate([0, 0, -6])\n                            cube([15, 15, 8], center = true);\n                    }\n                    \n                    // Tail spikes\n                    if(i < 8) {\n                        translate([0, 0, 4]) {\n                            rotate([0, 0, 0])\n                                cylinder(h = 6, d1 = 2, d2 = 0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Six legs with clawed feet\nmodule legs() {\n    for(seg = [0:2]) {\n        for(side = [-1, 1]) {\n            translate([seg * 15 + 5, side * 10, -5]) {\n                rotate([0, 0, side * 45]) {\n                    // Upper leg\n                    translate([0, 0, 5])\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, d = 4);\n                    \n                    // Lower leg\n                    translate([0, 5, -3])\n                        rotate([45, 0, 0])\n                            cylinder(h = 10, d = 3);\n                    \n                    // Foot with claws\n                    translate([0, 8, -8]) {\n                        // Main foot\n                        sphere(d = 4);\n                        \n                        // Three claws\n                        for(claw = [-1, 0, 1]) {\n                            translate([claw * 2, 2, -1]) {\n                                rotate([0, -30, 0])\n                                    cylinder(h = 3, d1 = 2, d2 = 0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ngeowyrm();",
    "renders": true
  },
  {
    "household_item": "stonecoil",
    "openscad_code": "// Stonecoil - Medium complexity realistic style\n\n// Basic parameters\ncoil_diameter = 20;\ncoil_height = 60;\nsegments = 180;\nwire_diameter = 3.5;\nstone_scale = 1.2;\n\nmodule stone_segment(pos, rot, scale_factor) {\n    // Main stone body\n    translate(pos)\n    rotate(rot)\n    scale([scale_factor, scale_factor, scale_factor * 0.8])\n    difference() {\n        // Main stone shape\n        sphere(d=coil_diameter);\n        \n        // Add irregular surface details\n        for(i = [0:4]) {\n            rotate([rand(i*5)*30, rand(i*7+1)*45, rand(i*11+2)*60])\n            translate([rand(i*13+3)*3-1.5, rand(i*17+4)*3-1.5, rand(i*19+5)*2-1])\n            sphere(d=coil_diameter * 0.3);\n        }\n        \n        // Flatten bottom slightly\n        translate([0, 0, -coil_diameter/2 + 2])\n        cube([coil_diameter*1.5, coil_diameter*1.5, 4], center=true);\n    }\n}\n\nmodule coil_wire() {\n    // Generate the wire coil\n    for(i = [0:segments-1]) {\n        angle = i * 360 / segments;\n        height = i * coil_height / segments;\n        radius = 10 + sin(i*5) * 2; // Slight variation in radius\n        \n        translate([cos(angle) * radius, sin(angle) * radius, height])\n        rotate([90, 0, angle])\n        cylinder(h=wire_diameter*1.2, d=wire_diameter, $fn=12);\n    }\n}\n\nmodule stonecoil() {\n    union() {\n        // Generate stones along coil\n        for(i = [0:segments/6-1]) {\n            angle = i * 360 / (segments/6);\n            height = i * coil_height / (segments/6);\n            radius = 10 + sin(i*5) * 2;\n            \n            stone_pos = [cos(angle) * radius, sin(angle) * radius, height];\n            stone_rot = [rand(i)*15, rand(i+100)*20, angle];\n            stone_scale = 0.4 + rand(i+200) * 0.3;\n            \n            stone_segment(stone_pos, stone_rot, stone_scale);\n        }\n        \n        // Add wire coil\n        coil_wire();\n        \n        // Add base stone\n        translate([0, 0, -5])\n        scale([1.5, 1.5, 0.5])\n        stone_segment([0, 0, 0], [0, 0, 0], 1);\n    }\n}\n\n// Helper function for pseudo-random values\nfunction rand(n) = (n * 13.7) % 1;\n\n// Main assembly\nstonecoil();\n\n// Add support base for 3D printing\ntranslate([0, 0, -2])\ndifference() {\n    cylinder(h=2, d=30, $fn=32);\n    cylinder(h=3, d=26, $fn=32);\n}",
    "renders": true
  },
  {
    "household_item": "rockdrake",
    "openscad_code": "// Rockdrake - Realistic style, medium complexity\n// Designed for 3D printing - no major overhangs, 2mm wall thickness\n\n// Main body parameters\nbody_length = 40;\nbody_height = 15;\nbody_width = 20;\n\n// Head parameters\nhead_length = 12;\nhead_width = 8;\nhead_height = 10;\n\n// Leg parameters\nleg_length = 18;\nleg_width = 4;\nleg_height = 5;\n\n// Wing parameters\nwing_span = 35;\nwing_height = 20;\n\n// Tail parameters\ntail_length = 30;\ntail_segments = 5;\n\n// Create the complete rockdrake\nunion() {\n    // Main body\n    translate([0, 0, 10])\n    scale([body_length/20, body_width/20, body_height/15])\n    sphere(10, $fn=32);\n    \n    // Head\n    translate([-body_length/2 - head_length/2, 0, 15])\n    union() {\n        // Head base\n        scale([head_length/10, head_width/8, head_height/10])\n        sphere(8, $fn=32);\n        \n        // Snout\n        translate([-head_length/3, 0, -head_height/4])\n        scale([1.2, 0.8, 0.6])\n        sphere(5, $fn=16);\n        \n        // Eyes (glow)\n        translate([head_length/4, head_width/3, head_height/4])\n        sphere(1.5, $fn=16);\n        translate([head_length/4, -head_width/3, head_height/4])\n        sphere(1.5, $fn=16);\n        \n        // Crest spikes\n        for(i = [0:2]) {\n            translate([head_length/3 - i*2, 0, head_height/2 + i*1.5])\n            rotate([0, 15, 0])\n            scale([0.5, 0.3, 2])\n            cylinder(h=3, r=1.5, $fn=8);\n        }\n    }\n    \n    // Front legs\n    module leg(side, angle) {\n        translate([body_length/4, side*body_width/2, 5])\n        rotate([0, 0, angle])\n        union() {\n            // Upper leg\n            rotate([90, 0, 0])\n            cylinder(h=leg_length/2, r=leg_width/2, $fn=16);\n            \n            // Lower leg\n            translate([0, 0, leg_length/2])\n            rotate([45, 0, 0])\n            cylinder(h=leg_length/2, r=leg_width/2*0.8, $fn=16);\n            \n            // Foot\n            translate([0, leg_length/2, leg_length/2-2])\n            scale([2, 1, 0.5])\n            sphere(2, $fn=16);\n        }\n    }\n    \n    leg(body_width/4, 30);\n    leg(-body_width/4, -30);\n    \n    // Back legs\n    translate([-body_length/4, 0, 5])\n    rotate([0, 0, 45])\n    union() {\n        rotate([90, 0, 0])\n        cylinder(h=leg_length/1.5, r=leg_width/2*1.2, $fn=16);\n        \n        translate([0, 0, leg_length/1.5])\n        rotate([30, 0, 0])\n        cylinder(h=leg_length/2, r=leg_width/2, $fn=16);\n        \n        translate([0, leg_length/1.5, leg_length/2-2])\n        scale([2.5, 1.5, 0.5])\n        sphere(2.5, $fn=16);\n    }\n    \n    mirror([0, 1, 0]) {\n        translate([-body_length/4, 0, 5])\n        rotate([0, 0, 45])\n        union() {\n            rotate([90, 0, 0])\n            cylinder(h=leg_length/1.5, r=leg_width/2*1.2, $fn=16);\n            \n            translate([0, 0, leg_length/1.5])\n            rotate([30, 0, 0])\n            cylinder(h=leg_length/2, r=leg_width/2, $fn=16);\n            \n            translate([0, leg_length/1.5, leg_length/2-2])\n            scale([2.5, 1.5, 0.5])\n            sphere(2.5, $fn=16);\n        }\n    }\n    \n    // Wings\n    module wing(side) {\n        translate([0, side*body_width/2, 15])\n        rotate([0, 0, side*10])\n        rotate([0, -15, 0])\n        difference() {\n            // Wing membrane\n            scale([1, wing_span/20, wing_height/20])\n            sphere(10, $fn=32);\n            \n            // Wing holes for membrane texture\n            for(i = [1:3]) {\n                for(j = [1:2]) {\n                    translate([i*5 - 10, j*8 - 4, 0])\n                    sphere(2, $fn=16);\n                }\n            }\n            \n            // Wing fingers\n            for(i = [0:2]) {\n                translate([i*8 - 8, wing_span/4, 0])\n                rotate([0, 0, -side*30])\n                scale([0.5, 1, 0.5])\n                cylinder(h=wing_span/3, r=1.5, $fn=8);\n            }\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Tail\n    module tail_segment(pos, scale_factor) {\n        translate([body_length/2 + pos, 0, 10 - pos/4])\n        scale([scale_factor, scale_factor, scale_factor*0.8])\n        rotate([0, -pos*2, 0])\n        sphere(4, $fn=16);\n    }\n    \n    for(i = [0:tail_segments-1]) {\n        tail_segment(i*tail_length/tail_segments, 1 - i*0.15);\n    }\n    \n    // Back spikes\n    for(i = [0:4]) {\n        translate([body_length/2 - i*5, 0, 15 + i*1.5])\n        rotate([0, 0, 0])\n        scale([0.5, 0.5, 2])\n        cylinder(h=3, r=2, $fn=6);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "granitewyrm",
    "openscad_code": "// Realistic medium-complexity GraniteWyrm\n// Total length ~80 mm, printable without supports\n\n$fa = 2;\n$fs = 1;\n\n// Body parameters\nbody_len = 70;\nbody_dia = 10;\nsegments = 7;\nseg_len = body_len/segments;\n\n// Head dimensions\nhead_len = 14;\nhead_dia = 12;\neye_dia = 2.5;\neye_off = 3;\n\n// Leg parameters\nleg_len = 8;\nleg_dia = 3;\nclaw_len = 1.5;\n\nmodule claw() {\n    difference() {\n        cylinder(h=claw_len, d1=leg_dia, d2=0.5);\n        cube([leg_dia+1,leg_dia+1,claw_len], center=true);\n    }\n}\n\nmodule foreleg() {\n    union() {\n        // Upper leg\n        rotate([0,90,0]) cylinder(h=leg_len*0.6, d=leg_dia);\n        // Lower leg\n        translate([0,leg_len*0.6,0]) rotate([45,90,0]) cylinder(h=leg_len*0.4, d=leg_dia*0.8);\n        // Claw\n        translate([0,leg_len,0]) rotate([0,90,0]) claw();\n    }\n}\n\nmodule hindleg() {\n    union() {\n        // Upper leg\n        rotate([0,90,0]) cylinder(h=leg_len*0.5, d=leg_dia*1.1);\n        // Lower leg\n        translate([0,leg_len*0.5,0]) rotate([30,90,0]) cylinder(h=leg_len*0.5, d=leg_dia*0.9);\n        // Claw\n        translate([0,leg_len,0]) rotate([0,90,0]) claw();\n    }\n}\n\nmodule body_segment(i) {\n    // Taper diameter along body\n    taper = 1 - (i*0.08);\n    hull() {\n        sphere(d=body_dia*taper);\n        translate([seg_len,0,0]) sphere(d=body_dia*taper*0.9);\n    }\n}\n\nmodule head() {\n    hull() {\n        sphere(d=head_dia);\n        translate([head_len,0,0]) sphere(d=head_dia*0.7);\n    }\n    // Eyes\n    translate([head_len*0.4, eye_off, head_dia/2-1]) sphere(d=eye_dia);\n    translate([head_len*0.4, -eye_off, head_dia/2-1]) sphere(d=eye_dia);\n    // Snout ridge\n    difference() {\n        translate([head_len-2,0,head_dia/2]) cube([4, head_dia/2, 2], center=true);\n        translate([head_len-2,0,head_dia/2+1]) sphere(d=head_dia/1.5);\n    }\n}\n\nmodule tail_segment(i) {\n    // Sharper taper for tail\n    taper = 0.4 - (i*0.04);\n    hull() {\n        sphere(d=body_dia*taper);\n        translate([seg_len*0.8,0,0]) sphere(d=body_dia*taper*0.7);\n    }\n}\n\nmodule granite_texture() {\n    // Subtle surface noise for rock texture\n    for(i=[0:20]) {\n        translate([rand(80),rand(15),rand(15)]) sphere(d=rand(1)+0.5);\n    }\n}\n\n// Assemble wyrm\nunion() {\n    // Head\n    translate([-head_len-5,0,body_dia/2]) head();\n    \n    // Body segments\n    for(i=[0:segments-1]) {\n        translate([i*seg_len,0,0]) body_segment(i);\n    }\n    \n    // Tail segments (4)\n    for(i=[0:3]) {\n        translate([body_len+i*seg_len*0.8,0,0]) tail_segment(i);\n    }\n    \n    // Legs\n    // Front pair\n    translate([-2, body_dia/2+1, -body_dia/2]) rotate([0,0,-15]) foreleg();\n    translate([-2, -body_dia/2-1, -body_dia/2]) mirror([0,1,0]) rotate([0,0,-15]) foreleg();\n    \n    // Middle pair\n    translate([body_len/3, body_dia/2+1, -body_dia/2]) rotate([0,0,0]) foreleg();\n    translate([body_len/3, -body_dia/2-1, -body_dia/2]) mirror([0,1,0]) rotate([0,0,0]) foreleg();\n    \n    // Hind pair\n    translate([body_len*0.7, body_dia/2+1, -body_dia/2]) rotate([0,0,15]) hindleg();\n    translate([body_len*0.7, -body_dia/2-1, -body_dia/2]) mirror([0,1,0]) rotate([0,0,15]) hindleg();\n}",
    "renders": true
  },
  {
    "household_item": "marbleserpent",
    "openscad_code": "// Marbleserpent - realistic style, medium complexity\n// Coiled snake with marble track running through its body\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nbody_radius = 8;          // Snake body thickness\nmarble_diameter = 16;     // Standard glass marble size\ncoil_height = 45;         // Total height of coil\ncoil_diameter = 85;       // Outer diameter of coil\nsegments = 12;            // Number of body segments\nwall_thickness = 2;       // Wall thickness for printing\n\nmodule snake_body() {\n    // Create coiled body with track inside\n    for(i = [0:segments-1]) {\n        angle = i * 360/segments;\n        height = i * coil_height/segments;\n        radius = coil_diameter/2 - (i * 2);  // Tapering coil\n        \n        translate([cos(angle) * radius, sin(angle) * radius, height])\n        rotate([0, 0, angle + 90])\n        difference() {\n            // Outer body\n            cylinder(h = coil_height/segments + 2, r1 = body_radius, r2 = body_radius * 0.95);\n            \n            // Inner track for marble\n            rotate([0, 90, 0])\n            cylinder(h = body_radius * 2, r = marble_diameter/2 + wall_thickness, center = true);\n        }\n    }\n}\n\nmodule snake_head() {\n    // Realistic snake head with mouth open for marble entry\n    translate([coil_diameter/2 - 25, 0, coil_height + 5])\n    rotate([0, -30, 0])\n    union() {\n        // Head base\n        difference() {\n            scale([1.5, 1, 1])\n            sphere(r = body_radius * 1.2);\n            \n            // Mouth cavity\n            translate([0, 0, -body_radius * 0.5])\n            cube([body_radius * 3, body_radius * 2, body_radius], center = true);\n        }\n        \n        // Eyes\n        translate([body_radius * 1.2, body_radius * 0.7, body_radius * 0.5])\n        sphere(r = body_radius * 0.3);\n        \n        translate([body_radius * 1.2, -body_radius * 0.7, body_radius * 0.5])\n        sphere(r = body_radius * 0.3);\n        \n        // Eye pupils\n        translate([body_radius * 1.6, body_radius * 0.7, body_radius * 0.5])\n        sphere(r = body_radius * 0.15);\n        \n        translate([body_radius * 1.6, -body_radius * 0.7, body_radius * 0.5])\n        sphere(r = body_radius * 0.15);\n        \n        // Tongue\n        translate([body_radius * 1.5, 0, -body_radius * 0.8])\n        union() {\n            cube([body_radius * 0.8, body_radius * 0.1, body_radius * 0.1]);\n            translate([body_radius * 0.8, body_radius * 0.05, 0])\n            rotate([0, 0, 30])\n            cube([body_radius * 0.3, body_radius * 0.05, body_radius * 0.05]);\n            translate([body_radius * 0.8, -body_radius * 0.05, 0])\n            rotate([0, 0, -30])\n            cube([body_radius * 0.3, body_radius * 0.05, body_radius * 0.05]);\n        }\n    }\n}\n\nmodule marble_track() {\n    // Create smooth marble track through the body\n    hull() {\n        for(i = [0:segments-1]) {\n            angle = i * 360/segments;\n            height = i * coil_height/segments;\n            radius = coil_diameter/2 - (i * 2);\n            \n            translate([cos(angle) * radius, sin(angle) * radius, height])\n            sphere(r = marble_diameter/2 + wall_thickness);\n        }\n        \n        // Exit at top center\n        translate([0, 0, coil_height + 15])\n        sphere(r = marble_diameter/2 + wall_thickness);\n    }\n}\n\nmodule support_base() {\n    // Stable base for 3D printing\n    difference() {\n        cylinder(h = 5, r = coil_diameter/2 + 10);\n        \n        // Center hole for track exit\n        translate([0, 0, -1])\n        cylinder(h = 7, r = marble_diameter/2 + wall_thickness + 2);\n    }\n}\n\n// Assemble the marbleserpent\nunion() {\n    support_base();\n    snake_body();\n    snake_head();\n    marble_track();\n}",
    "renders": true
  },
  {
    "household_item": "basaltsnake",
    "openscad_code": "// Basaltsnake - Realistic medium-complexity model\n// Dimensions: ~80 mm long, 15 mm high\n$fn = 36;\n\n// Overall scale\nscale_factor = 0.8;\n\n// Head module\nmodule head() {\n    // Main head block\n    translate([0, 0, 8]) \n    difference() {\n        scale([1.2, 0.8, 0.7]) sphere(d = 20);\n        \n        // Eye sockets\n        translate([-7, 8, 2]) rotate([0, 10, 0]) sphere(d = 5);\n        translate([7, 8, 2]) rotate([0, -10, 0]) sphere(d = 5);\n        \n        // Mouth opening\n        translate([0, 10, -3]) rotate([90, 0, 0]) \n        cylinder(h = 10, d1 = 6, d2 = 8, center = true);\n    }\n    \n    // Eyes\n    translate([-7, 8.5, 2]) sphere(d = 3);\n    translate([7, 8.5, 2]) sphere(d = 3);\n    \n    // Nostrils\n    translate([-3, 10, 0]) rotate([90, 0, 0]) cylinder(h = 3, d = 2);\n    translate([3, 10, 0]) rotate([90, 0, 0]) cylinder(h = 3, d = 2);\n}\n\n// Body segment module\nmodule body_segment(length, width, height, taper) {\n    hull() {\n        // Front ellipse\n        translate([0, 0, 0]) \n        scale([width, width * 0.7, height]) sphere(d = width);\n        \n        // Back ellipse (tapered)\n        translate([length, 0, 0]) \n        scale([width * taper, width * 0.7 * taper, height * taper]) sphere(d = width * taper);\n    }\n}\n\n// Scale pattern on segments\nmodule scales(segment_length, segment_width) {\n    for(i = [0:3]) {\n        for(j = [-1:1]) {\n            translate([i * segment_length/4, j * segment_width/3, 0.5]) \n            scale([1, 0.8, 0.3]) sphere(d = segment_width/4);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    for(i = [0:11]) {\n        translate([i * 4 + 12, 0, 0]) \n        rotate([0, i * 3, 0]) {\n            body_segment(4, 18 - i * 1.4, 8 - i * 0.6, 0.85);\n            scales(4, 18 - i * 1.4);\n        }\n    }\n}\n\n// Main body assembly\nmodule body() {\n    // Neck\n    body_segment(10, 16, 8, 0.95);\n    scales(10, 16);\n    \n    // Body segments\n    for(i = [0:4]) {\n        translate([i * 10 + 10, 0, 0]) {\n            body_segment(10, 16 - i * 1.5, 8 - i * 0.5, 0.9);\n            scales(10, 16 - i * 1.5);\n        }\n    }\n}\n\n// Underside support structure\nmodule support() {\n    translate([0, 0, -0.5]) \n    difference() {\n        cube([70, 20, 1], center = true);\n        translate([0, 0, -0.5]) \n        cube([72, 22, 2], center = true);\n    }\n}\n\n// Assemble the snake\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        head();\n        translate([10, 0, 0]) body();\n        translate([60, 0, 0]) tail();\n        support();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "slatewyrm",
    "openscad_code": "// Slatewyrm – medium-complexity, realistic, 3D-printable\n// Overall bounding box ≈ 90 mm long, 35 mm wide, 30 mm tall\n// All overhangs ≤ 45°; shell thickness ≥ 1.2 mm\n\n$fn = 36;               // good balance between smoothness & print time\n\n// ----------------------------------------------\n// Helper module: rounded cylinder (no overhang)\nmodule round_cyl(h, r1, r2, center=false) {\n    linear_extrude(height=h, center=center, convexity=4)\n        offset(r=min(r1,r2)/2)\n            circle(r1=r1);\n}\n// ----------------------------------------------\n\n// Slate-like texture: shallow overlapping plates\nmodule slate_plate(w, l, t, angle=0) {\n    rotate([0,0,angle])\n    translate([0,0,-t/2])\n    difference() {\n        cube([w, l, t], center=true);\n        translate([0,0,t*0.45]) cube([w*1.1, l*1.1, t], center=true);\n    }\n}\n\n// ----------------------------------------------\n// HEAD\nmodule head() {\n    union() {\n        // snout (tapered cylinder)\n        translate([0,0,-6])\n            rotate([90,0,0]) cylinder(h=18, r1=7, r2=4, center=true);\n\n        // cranium\n        translate([0,0,2])\n            sphere(r=9);\n\n        // lower jaw\n        translate([0,0,-10])\n            rotate([10,0,0])\n            cube([16,12,6], center=true);\n\n        // eye sockets\n        for(side=[-1,1])\n            translate([side*5, 8, 2])\n                sphere(r=3);\n\n        // slate plating on head\n        slate_plate(20, 12, 1.5, 0);\n    }\n}\n\n// ----------------------------------------------\n// NECK SEGMENT\nmodule neck(n=3) {\n    for(i=[0:n-1]) {\n        translate([i*-8-18, 0, 0])\n            rotate([0, 0, i*8])\n                scale([1, 0.9, 0.8])\n                    slate_plate(15-i*1.5, 10-i, 2, 0);\n    }\n}\n\n// ----------------------------------------------\n// BODY SEGMENT\nmodule body_segment(len, wid, hei, plates=4) {\n    hull() {\n        translate([len/2, 0, 0]) sphere(r=wid/2);\n        translate([-len/2, 0, 0]) sphere(r=wid/2);\n    }\n\n    // slate armor rings\n    for(i=[0:plates-1])\n        translate([len*(i/(plates-1)-0.5), 0, 0])\n            slate_plate(wid+2, wid+2, 1.2, i*30);\n}\n\n// ----------------------------------------------\n// TAIL SEGMENT\nmodule tail_segment(len, rad) {\n    rotate([0, 0, 180])\n        cylinder(h=len, r1=rad, r2=rad*0.85, center=true);\n}\n\n// ----------------------------------------------\n// LEG\nmodule leg(len=15) {\n    union() {\n        // upper leg\n        rotate([0, 0, 30])\n            round_cyl(len, 4, 3);\n\n        // lower leg\n        translate([len*0.9, 0, -len*0.5])\n            rotate([0, 0, -40])\n                round_cyl(len*0.9, 3, 2);\n\n        // foot\n        translate([len*1.7, 0, -len])\n            cube([6, 8, 3], center=true);\n    }\n}\n\n// ----------------------------------------------\n// ASSEMBLY\ntranslate([40, 0, 0]) rotate([0, -10, 0]) head();\nneck();\n\n// Body – 5 linked segments shrinking toward tail\nbody_segment(20, 14, 12, 4);\ntranslate([-20, 0, 0])   body_segment(18, 12, 10, 4);\ntranslate([-38, 0, 0])   body_segment(16, 10, 8, 3);\ntranslate([-54, 0, 0])   body_segment(14, 8, 7, 3);\ntranslate([-68, 0, 0])   body_segment(12, 6, 5, 2);\n\n// Tail – 5 tapering cylinders\nfor(i=[0:4])\n    translate([-80-i*12, 0, 0])\n        tail_segment(10-i, 5-i*0.7);\n\n// Leg pairs\nfor(side=[-1,1])\n    translate([0, side*10, -8])\n        rotate([0, 0, side*15])\n            leg();\n\ntranslate([-30, -10, -7])\n    rotate([0, 0, 15])\n        leg();\n\ntranslate([-30, 10, -7])\n    rotate([0, 0, -15])\n        leg();\n\ntranslate([-55, -8, -6])\n    rotate([0, 0, 20])\n    scale(0.8)\n        leg();\n\ntranslate([-55, 8, -6])\n    rotate([0, 0, -20])\n    scale(0.8)\n        leg();",
    "renders": true
  },
  {
    "household_item": "sandhydra",
    "openscad_code": "// Sandhydra - realistic style, medium complexity\n// 3D printable multi-head sand timer / hourglass\n\n$fn = 48;  // Smooth curves for printing\n\n// Main parameters\nbase_d = 50;      // Base diameter\nbase_h = 8;       // Base height\nneck_d = 12;      // Central neck diameter\nneck_h = 45;      // Central neck height\nbulb_d = 35;      // Bulb diameter\nbulb_h = 30;      // Bulb height\nhead_d = 20;      // Head diameter\nhead_h = 25;      // Head height\nnum_heads = 5;    // Number of hydra heads\nsand_hole = 3;    // Sand flow hole diameter\n\nmodule sandhydra() {\n    union() {\n        // Base platform\n        cylinder(h = base_h, d = base_d, center = false);\n        \n        // Central neck\n        translate([0, 0, base_h])\n            cylinder(h = neck_h, d = neck_d, center = false);\n        \n        // Lower bulb (sand reservoir)\n        translate([0, 0, base_h + neck_h])\n            sphere(d = bulb_d);\n        \n        // Upper bulb (sand reservoir)\n        translate([0, 0, base_h + neck_h + bulb_h])\n            sphere(d = bulb_d);\n        \n        // Central sand channel\n        difference() {\n            cylinder(h = bulb_h * 2, d = neck_d, center = true);\n            translate([0, 0, -bulb_h])\n                cylinder(h = bulb_h * 2 + 2, d = sand_hole, center = false);\n        }\n        \n        // Hydra heads array\n        for (i = [0:num_heads-1]) {\n            angle = i * 360 / num_heads;\n            head_pos = bulb_d * 0.7;\n            translate([cos(angle) * head_pos, sin(angle) * head_pos, base_h + neck_h + bulb_h * 2 - 5])\n                rotate([0, 0, angle])\n                hydra_head();\n        }\n    }\n}\n\nmodule hydra_head() {\n    difference() {\n        union() {\n            // Head sphere\n            sphere(d = head_d);\n            \n            // Neck connection\n            translate([0, 0, -head_h/3])\n                cylinder(h = head_h/2, d1 = head_d * 0.8, d2 = head_d * 0.5);\n        }\n        \n        // Mouth cavity\n        translate([0, head_d/2, 0])\n            rotate([0, 90, 0])\n            cylinder(h = head_d/2, d1 = head_d * 0.4, d2 = head_d * 0.6);\n        \n        // Eye sockets\n        for (eye = [-1, 1]) {\n            translate([eye * head_d/4, head_d/3, head_d/4])\n                sphere(d = head_d/6);\n        }\n        \n        // Sand exit hole\n        translate([0, -head_d/2, 0])\n            rotate([0, 90, 0])\n            cylinder(h = head_d/2, d = sand_hole * 0.8);\n    }\n}\n\n// Generate the model centered on build plate\ntranslate([0, 0, 0])\n    sandhydra();",
    "renders": true
  },
  {
    "household_item": "duneback",
    "openscad_code": "// Duneback - realistic style, medium complexity\n// A sandworm-inspired creature from desert environments\n\n// Overall dimensions\nlength = 80;\nwidth = 30;\nheight = 25;\nwall_thickness = 2;\n\n// Segments for body\nsegments = 8;\nsegment_length = length / segments;\n\n// Create the main body\nmodule body() {\n    union() {\n        // Central spine\n        for(i = [0:segments-1]) {\n            translate([i * segment_length - length/2, 0, 0]) {\n                // Each segment slightly smaller towards tail\n                scale([1, 1 - (i * 0.05), 1 - (i * 0.05)]) {\n                    // Ellipsoid segment\n                    scale([segment_length * 0.9, width/2, height/2]) {\n                        sphere(r = 1, $fn = 20);\n                    }\n                }\n            }\n        }\n        \n        // Ridge along back\n        for(i = [1:segments-2]) {\n            translate([i * segment_length - length/2, 0, height/2 - 2]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = width/3, r1 = 3, r2 = 1, $fn = 6);\n                }\n            }\n        }\n    }\n}\n\n// Mouth opening with teeth\nmodule mouth() {\n    difference() {\n        // Main mouth cavity\n        translate([-length/2 + 5, 0, -height/4]) {\n            rotate([0, -30, 0]) {\n                cylinder(h = 10, r1 = 8, r2 = 4, $fn = 32);\n            }\n        }\n        \n        // Inner cavity\n        translate([-length/2 + 3, 0, -height/4]) {\n            rotate([0, -30, 0]) {\n                cylinder(h = 12, r1 = 6, r2 = 2, $fn = 32);\n            }\n        }\n    }\n    \n    // Teeth around mouth\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5]) {\n            translate([-length/2 + 6, 0, 0]) {\n                rotate([0, -30, 0]) {\n                    translate([0, 7, -height/4]) {\n                        // Triangular tooth\n                        cube([3, 2, 4]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Side scales/shields\nmodule scales() {\n    for(side = [-1, 1]) {\n        for(i = [1:segments-2]) {\n            translate([i * segment_length - length/2, side * (width/2 - 1), 0]) {\n                rotate([0, side * 20, 0]) {\n                    scale([1, 0.3, 0.5]) {\n                        cube([segment_length * 0.8, 6, 8], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Underside belly plates\nmodule belly_plates() {\n    for(i = [0:segments-1]) {\n        translate([i * segment_length - length/2, 0, -height/2 + 1]) {\n            scale([segment_length * 0.7, width * 0.8, 0.5]) {\n                cube([1, 1, 1], center = true);\n            }\n        }\n    }\n}\n\n// Tail segments\nmodule tail() {\n    union() {\n        for(i = [0:3]) {\n            translate([length/2 - 2 + i * 3, 0, 0]) {\n                scale([1 - (i * 0.2), 1 - (i * 0.3), 1 - (i * 0.3)]) {\n                    rotate([0, 0, i * 15]) {\n                        cylinder(h = 3, r = width/2 - i, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    body();\n    \n    // Mouth at front\n    mouth();\n    \n    // Protective scales\n    scales();\n    \n    // Belly protection\n    belly_plates();\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "desertwyrm",
    "openscad_code": "// Desertwyrm – realistic style, medium complexity\n// 75 mm long, 25 mm high at the hump; printable without support\n\n$fn = 30;\n\n// Overall scale\nscale(0.7) {\n\n    // Main body segments (8)\n    for (i = [0:7]) {\n        translate([i*9, 0, sin(i*45)*2 + 6]) {\n            rotate([0, i*7, 0])\n            segment(i);\n        }\n    }\n\n    // Head (segment 0 is neck, this is the head)\n    translate([-6, 0, 12])\n    rotate([0, 20, 0])\n    head();\n\n    // Tail – tapers toward end\n    for (i = [8:11]) {\n        translate([i*9 + 3, 0, sin(i*45)*1 + 4]) {\n            rotate([0, -i*5, 0])\n            scale([1.4 - (i-7)*0.15, 1.4 - (i-7)*0.15, 1.4 - (i-7)*0.15])\n            segment(i);\n        }\n    }\n\n    // Legs – 3 per side\n    for (side = [-1, 1]) {\n        for (pos = [2, 4, 6]) {\n            translate([pos*9 + 4, side*6, 0])\n            rotate([0, 0, side*20])\n            leg();\n        }\n    }\n\n    // Back ridge / spines\n    for (i = [1:6]) {\n        translate([i*9 + 2, 0, 12 + sin(i*45)*2])\n        rotate([0, 0, i*10])\n        scale([0.5, 0.2, 1.2])\n        cylinder(h = 5, d1 = 2, d2 = 0.5);\n    }\n}\n\nmodule segment(size) {\n    // Scaled ellipsoid shape\n    difference() {\n        scale([1.5, 1, 1])\n        sphere(d = 10);\n        // Underside flat for printing\n        translate([0, 0, -6])\n        cube([30, 30, 6], center = true);\n    }\n}\n\nmodule head() {\n    union() {\n        // Snout\n        translate([0, 0, 0])\n        scale([2, 1, 1])\n        sphere(d = 8);\n\n        // Upper jaw\n        translate([4, 0, 2])\n        rotate([-20, 0, 0])\n        cube([6, 2, 2]);\n\n        // Lower jaw\n        translate([4, 0, -2])\n        rotate([20, 0, 0])\n        cube([6, 2, 2]);\n\n        // Eye sockets\n        for (side = [-1, 1]) {\n            translate([2, side*3, 2])\n            rotate([0, 90, 0])\n            cylinder(h = 3, d = 2);\n        }\n\n        // Nostrils\n        translate([6, 0, 1])\n        cylinder(h = 3, d = 1);\n    }\n}\n\nmodule leg() {\n    translate([0, 0, 2])\n    rotate([90, 0, 0])\n    union() {\n        // Thigh\n        cylinder(h = 6, d1 = 5, d2 = 4);\n        // Shin\n        translate([0, 0, 6])\n        cylinder(h = 7, d1 = 4, d2 = 3);\n        // Foot\n        translate([0, 0, 13])\n        rotate([30, 0, 0])\n        scale([1, 1, 0.5])\n        cube([5, 3, 2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "oasiswyrm",
    "openscad_code": "// Oasiswyrm - a desert-dwelling, cactus-like dragon\n// Size: ~80 mm long, 35 mm tall, 30 mm wide\n// Realistic style with moderate detail\n\n$fn = 36;\n\n// Main body module\nmodule body() {\n    // Central torso\n    difference() {\n        union() {\n            // Main torso segment\n            translate([0, 0, 15])\n                scale([1.2, 1, 1.5])\n                sphere(r=10);\n            \n            // Neck segment\n            translate([-15, 0, 20])\n                rotate([0, 15, 0])\n                scale([0.8, 0.8, 1.2])\n                cylinder(h=15, r1=8, r2=6);\n                \n            // Tail segments\n            for(i=[1:4]) {\n                translate([12*i, 0, 15-2*i])\n                    scale([1-0.1*i, 1-0.1*i, 1-0.1*i])\n                    sphere(r=8-1*i);\n            }\n        }\n        \n        // Hollow for printing\n        translate([0, 0, 15])\n            scale([0.7, 0.7, 0.7])\n            sphere(r=10);\n    }\n}\n\n// Head module\nmodule head() {\n    union() {\n        // Snout\n        translate([-25, 0, 22])\n            rotate([0, 15, 0])\n            scale([1.5, 1, 1])\n            cylinder(h=12, r1=5, r2=3);\n            \n        // Head base\n        translate([-20, 0, 20])\n            scale([1.2, 1, 0.9])\n            sphere(r=7);\n            \n        // Eye sockets\n        difference() {\n            translate([-22, 4, 22])\n                sphere(r=2.5);\n            translate([-23, 5, 22.5])\n                sphere(r=1.5);\n        }\n        \n        mirror([0,1,0]) {\n            difference() {\n                translate([-22, 4, 22])\n                    sphere(r=2.5);\n                translate([-23, 5, 22.5])\n                    sphere(r=1.5);\n            }\n        }\n        \n        // Nostrils\n        for(side=[-1,1]) {\n            translate([-28, side*2, 21])\n                rotate([0, 30, 0])\n                cylinder(h=3, r1=1, r2=0.5);\n        }\n    }\n}\n\n// Leg module\nmodule leg(pos, angle) {\n    translate(pos)\n    rotate([0, angle, 0]) {\n        // Upper leg\n        cylinder(h=12, r1=4, r2=3);\n        \n        // Lower leg\n        translate([0, 0, 12])\n            rotate([30, 0, 0])\n            cylinder(h=10, r1=3, r2=2);\n            \n        // Foot\n        translate([0, 0, 21.5])\n            rotate([60, 0, 0])\n            scale([1.5, 1, 0.5])\n            sphere(r=3);\n    }\n}\n\n// Cactus spine modules\nmodule spines() {\n    // Back spines\n    for(i=[-1:0.5:3]) {\n        translate([i*8, 0, 25+abs(i)*2])\n            rotate([0, 10-i*5, 0])\n            cylinder(h=8, r1=1.5, r2=0.5);\n    }\n    \n    // Neck spines\n    for(i=[0:0.5:2]) {\n        translate([-15-i*5, 0, 20-i*2])\n            rotate([0, 20-i*10, 0])\n            cylinder(h=6, r1=1, r2=0.3);\n    }\n    \n    // Tail spines\n    for(i=[1:4]) {\n        translate([12*i, 0, 15-2*i+8])\n            rotate([0, -20, 0])\n            cylinder(h=5, r1=0.8, r2=0.2);\n    }\n}\n\n// Wing modules (cactus pad wings)\nmodule wing(side) {\n    translate([0, side*12, 18])\n    rotate([0, side*10, 0]) {\n        // Main wing pad\n        scale([1.2, 0.3, 0.8])\n        sphere(r=15);\n        \n        // Wing detail ridges\n        for(i=[-10:5:10]) {\n            translate([i, 0, 0])\n                scale([0.1, 0.3, 0.8])\n                sphere(r=15);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Legs\n    leg([-8, -8, 2], 20);\n    leg([-8, 8, 2], -20);\n    leg([8, -8, 2], 15);\n    leg([8, 8, 2], -15);\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Spines\n    spines();\n}",
    "renders": true
  },
  {
    "household_item": "miragecoil",
    "openscad_code": "// MirageCoil - Realistic Style, Medium Complexity\n// A 3D printable miragecoil with realistic proportions\n\n$fn = 50;\n\n// Main parameters\ncoil_radius = 20;\ncoil_height = 60;\nwire_diameter = 4;\nbase_thickness = 8;\nmount_hole_diameter = 6;\n\n// Wire coil module\nmodule coil(radius, height, wire_d, turns) {\n    // Create one turn of the coil\n    module single_turn(i) {\n        angle = i * 360 / turns;\n        height_offset = i * height / turns;\n        \n        // Main coil segment\n        translate([0, 0, height_offset]) {\n            rotate([0, 0, angle]) {\n                // Coil wire segment\n                translate([radius, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = wire_d * 2.5, d = wire_d, center = true);\n                    }\n                }\n                \n                // Connection segments between turns\n                if (i < turns - 1) {\n                    rotate([0, 0, -90]) {\n                        translate([radius, 0, 0]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h = height / turns, d = wire_d, center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Generate all turns\n    for (i = [0 : turns - 1]) {\n        single_turn(i);\n    }\n}\n\n// Base module with mounting features\nmodule base() {\n    // Main base platform\n    cylinder(h = base_thickness, d = coil_radius * 2.8);\n    \n    // Mounting holes\n    for (angle = [0 : 120 : 359]) {\n        rotate([0, 0, angle]) {\n            translate([coil_radius * 1.2, 0, -1]) {\n                cylinder(h = base_thickness + 2, d = mount_hole_diameter);\n            }\n        }\n    }\n    \n    // Wire entry points\n    translate([0, -coil_radius, base_thickness - 1]) {\n        cube([wire_diameter * 1.5, wire_diameter * 2, wire_diameter + 2], center = true);\n    }\n    \n    translate([0, coil_radius, base_thickness - 1]) {\n        cube([wire_diameter * 1.5, wire_diameter * 2, wire_diameter + 2], center = true);\n    }\n}\n\n// Terminal posts\nmodule terminals() {\n    // Top terminals\n    for (offset = [-coil_radius * 0.7, coil_radius * 0.7]) {\n        translate([offset, 0, coil_height + base_thickness + 2]) {\n            cylinder(h = 8, d = wire_diameter * 1.2);\n        }\n    }\n}\n\n// Core structure\nmodule core() {\n    // Central core rod\n    translate([0, 0, base_thickness]) {\n        cylinder(h = coil_height, d = wire_diameter * 1.5);\n    }\n}\n\n// Assemble the complete miragecoil\nunion() {\n    // Base with mounting\n    base();\n    \n    // Core structure\n    core();\n    \n    // Main coil assembly\n    translate([0, 0, base_thickness]) {\n        coil(coil_radius, coil_height, wire_diameter, 12);\n    }\n    \n    // Terminal connections\n    terminals();\n    \n    // Wire support brackets\n    for (angle = [0 : 180]) {\n        rotate([0, 0, angle]) {\n            translate([coil_radius * 1.5, 0, base_thickness + coil_height/2]) {\n                cube([5, 3, coil_height * 0.8], center = true);\n            }\n        }\n    }\n}\n\n// Add small details for realism\nmodule details() {\n    // Label area\n    translate([0, -coil_radius * 1.5, base_thickness/2]) {\n        cube([coil_radius * 2, 3, base_thickness - 2], center = true);\n    }\n    \n    // Alignment marks\n    for (angle = [0 : 90 : 359]) {\n        rotate([0, 0, angle]) {\n            translate([coil_radius * 1.4, 0, base_thickness - 1]) {\n                cube([2, 1, 1], center = true);\n            }\n        }\n    }\n}\n\n// Add details to main assembly\ndetails();",
    "renders": true
  },
  {
    "household_item": "tundraserpent",
    "openscad_code": "// Tundraserpent - Arctic serpent creature\n// Realistic medium complexity design\n\n// Main parameters\nbody_length = 80;\nbody_height = 12;\nscale_width = 15;\nhead_length = 18;\nhead_height = 10;\ntail_taper = 0.3;\nsegments = 12;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule serpent_head() {\n    // Main head structure\n    difference() {\n        // Head base\n        hull() {\n            sphere(d=head_length);\n            translate([head_length/2, 0, 0]) \n                sphere(d=head_height);\n        }\n        \n        // Mouth cavity\n        translate([head_length/2 - 3, 0, -head_height/3])\n            cube([head_length/2 + 2, head_height - 2, head_height/2], center=true);\n        \n        // Eye sockets\n        translate([head_length/3, head_height/3, head_height/4])\n            sphere(d=head_height/3);\n        translate([head_length/3, -head_height/3, head_height/4])\n            sphere(d=head_height/3);\n    }\n    \n    // Eyes\n    color(\"black\") {\n        translate([head_length/3, head_height/3, head_height/4])\n            sphere(d=head_height/4);\n        translate([head_length/3, -head_height/3, head_height/4])\n            sphere(d=head_height/4);\n    }\n    \n    // Nostrils\n    translate([head_length - 2, head_height/4, -head_height/6])\n        cylinder(h=2, d1=2, d2=1);\n    translate([head_length - 2, -head_height/4, -head_height/6])\n        cylinder(h=2, d1=2, d2=1);\n}\n\nmodule body_segment(i, total_segments) {\n    // Calculate position along body\n    t = i / (total_segments - 1);\n    \n    // Tapering factors\n    width_factor = 1 - (t * tail_taper);\n    height_factor = 1 - (t * tail_taper * 0.7);\n    \n    // Slight vertical curve\n    vertical_curve = sin(t * 180) * 5;\n    \n    translate([t * body_length * 0.8, 0, vertical_curve]) {\n        // Scale segments\n        scale([width_factor, 1, height_factor]) {\n            // Main body segment\n            difference() {\n                hull() {\n                    sphere(d=scale_width);\n                    translate([body_length/total_segments, 0, 0])\n                        sphere(d=scale_width * 0.9);\n                }\n                \n                // Hollow center\n                if (i < total_segments - 1) {\n                    translate([body_length/total_segments/2, 0, 0])\n                        cube([body_length/total_segments + wall, scale_width - wall, scale_width - wall], center=true);\n                }\n            }\n            \n            // Scale details\n            for (j = [0:3]) {\n                rotate([0, j * 90, 0])\n                    translate([scale_width/2 - 1, 0, 0])\n                        scale([0.8, 0.3, 0.8])\n                            cylinder(h=scale_width/2, d=scale_width/3);\n            }\n        }\n    }\n}\n\nmodule dorsal_spines() {\n    for (i = [1:segments-2]) {\n        t = i / (segments - 1);\n        if (t > 0.2 && t < 0.8) {\n            vertical_curve = sin(t * 180) * 5;\n            translate([t * body_length * 0.8, 0, vertical_curve + scale_width * (1 - t * tail_taper * 0.7)/2]) {\n                rotate([10, 0, 0])\n                    cylinder(h=scale_width/3, d1=scale_width/4, d2=scale_width/6);\n            }\n        }\n    }\n}\n\nmodule tail_fin() {\n    translate([body_length * 0.8, 0, -body_height/2]) {\n        // Main tail fin\n        difference() {\n            hull() {\n                translate([0, 0, 0])\n                    sphere(d=scale_width * tail_taper);\n                translate([body_length * 0.2, scale_width * tail_taper * 1.5, 0])\n                    sphere(d=scale_width * tail_taper * 0.8);\n                translate([body_length * 0.2, -scale_width * tail_taper * 1.5, 0])\n                    sphere(d=scale_width * tail_taper * 0.8);\n            }\n            \n            // Hollow center\n            translate([body_length * 0.1, 0, 0])\n                cube([body_length * 0.2, scale_width * tail_taper * 2 - wall, scale_width * tail_taper], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, body_height/2])\n        serpent_head();\n    \n    // Body segments\n    for (i = [0:segments-1]) {\n        body_segment(i, segments);\n    }\n    \n    // Dorsal spines\n    dorsal_spines();\n    \n    // Tail fin\n    tail_fin();\n    \n    // Underside support\n    translate([body_length * 0.4, 0, -body_height/2 - 1])\n        cube([body_length * 0.4, scale_width * 0.8, 2], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "arcticdrake",
    "openscad_code": "// Arctic Drake (Ice Dragon) - Realistic Style, Medium Complexity\n// Total length ~80mm, wingspan ~90mm, height ~35mm\n\n// Main body parameters\nbody_length = 60;\nbody_width = 25;\nbody_height = 20;\n\n// Head parameters\nhead_length = 18;\nhead_width = 12;\nhead_height = 15;\n\n// Wing parameters\nwing_span = 45;\nwing_depth = 20;\nwing_thickness = 2;\n\n// Tail parameters\ntail_length = 30;\ntail_segments = 5;\n\n// Scale thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main body module\nmodule body() {\n    // Main torso\n    translate([0, 0, body_height/2])\n        scale([1, 0.8, 1])\n        sphere(d=body_width);\n    \n    // Neck connection\n    translate([body_length/2 - 5, 0, body_height/2 + 5])\n        rotate([0, -20, 0])\n        cylinder(h=15, d1=body_width*0.8, d2=body_width*0.6, $fn=8);\n    \n    // Chest ridge\n    translate([0, 0, body_height/2 - 5])\n        difference() {\n            cube([body_length*0.6, body_width*0.3, 8], center=true);\n            translate([0, 0, -1])\n                cube([body_length*0.7, body_width*0.4, 10], center=true);\n        }\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([body_length/2 + head_length, 0, body_height/2 + 10])\n        rotate([0, -20, 0])\n        union() {\n            // Snout\n            difference() {\n                cube([head_length, head_width, head_height], center=true);\n                translate([head_length/2, 0, -head_height/2 - 1])\n                    cube([head_length*0.3, head_width*0.8, head_height*1.5]);\n            }\n            \n            // Eyes\n            translate([head_length/4, head_width/3, head_height/4])\n                sphere(d=3);\n            translate([head_length/4, -head_width/3, head_height/4])\n                sphere(d=3);\n            \n            // Horns\n            translate([-head_length/2, head_width/4, head_height/2])\n                rotate([0, -30, 15])\n                cylinder(h=8, d1=3, d2=1, $fn=6);\n            translate([-head_length/2, -head_width/4, head_height/2])\n                rotate([0, -30, -15])\n                cylinder(h=8, d1=3, d2=1, $fn=6);\n        }\n}\n\n// Wing module with membrane\nmodule wing(side) {\n    // Wing base\n    translate([body_length/4 - 5, side*body_width/2, body_height/2 + 5])\n        rotate([0, 0, side*30])\n        rotate([0, -45, 0])\n        union() {\n            // Wing arm\n            rotate([0, 0, 0])\n                cylinder(h=wing_span/2, d=4, $fn=8);\n            \n            // Wing membrane segments\n            for(i=[0:2]) {\n                rotate([0, 0, i*25])\n                translate([wing_span/2 - 5, 0, 0])\n                    difference() {\n                        cube([wing_span/3, wing_thickness, wing_depth - i*5], center=true);\n                        translate([0, 0, -wing_depth/2 - 1])\n                            cube([wing_span/3 + 2, wing_thickness + 2, wing_depth - i*5 + 2], center=true);\n                    }\n            }\n            \n            // Wing claw\n            translate([wing_span - 3, 0, wing_depth/2 - 5])\n                rotate([0, 90, 0])\n                cylinder(h=6, d=2, $fn=6);\n        }\n}\n\n// Tail module with segments\nmodule tail() {\n    for(i=[0:tail_segments-1]) {\n        translate([-body_length/2 - i*6, 0, body_height/2 - i*2])\n            rotate([0, -i*5, 0])\n            scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1])\n            cylinder(h=7, d1=body_width*0.8 - i*2, d2=body_width*0.7 - i*2, $fn=8);\n    }\n}\n\n// Leg module\nmodule leg(side, front) {\n    translate([front*body_length/4, side*body_width/2, 0])\n        union() {\n            // Upper leg\n            rotate([0, side*30, 0])\n                cylinder(h=8, d=4, $fn=6);\n            \n            // Lower leg\n            translate([0, side*4, -6])\n                rotate([0, side*45, 0])\n                union() {\n                    cylinder(h=10, d=3, $fn=6);\n                    \n                    // Foot\n                    translate([0, 0, -10])\n                        rotate([0, side*20, 0])\n                        difference() {\n                            cube([6, 3, 4], center=true);\n                            translate([0, 0, -2.5])\n                                cube([8, 5, 3], center=true);\n                        }\n                }\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Wings\n    wing(1);  // Right wing\n    wing(-1); // Left wing\n    \n    // Legs\n    leg(1, 1);   // Front right\n    leg(-1, 1);  // Front left\n    leg(1, -1);  // Back right\n    leg(-1, -1); // Back left\n}",
    "renders": true
  },
  {
    "household_item": "blizzardwyrm",
    "openscad_code": "// Blizzardwyrm - Medium complexity realistic style\n// A frost dragon with icy wings and tail, optimized for 3D printing\n\n$fn = 36; // Smooth curves for realistic appearance\n\nmodule body() {\n    // Main torso - elongated ellipsoid\n    scale([1.2, 0.8, 0.6])\n        sphere(15);\n}\n\nmodule head() {\n    translate([18, 0, 5])\n    union() {\n        // Snout\n        scale([2, 0.8, 0.8])\n            sphere(5);\n        \n        // Upper jaw\n        translate([5, 0, -2])\n            rotate([0, -20, 0])\n            cube([8, 4, 2], center=true);\n        \n        // Lower jaw\n        translate([5, 0, -5])\n            rotate([0, 20, 0])\n            cube([8, 4, 2], center=true);\n        \n        // Horns\n        for(i = [-1, 1]) {\n            translate([0, i*4, 3])\n                rotate([0, i*30, 0])\n                cylinder(h=8, r1=2, r2=0.5);\n            \n            translate([2, i*3, 2])\n                rotate([0, i*25, 10])\n                cylinder(h=6, r1=1.5, r2=0.5);\n        }\n    }\n}\n\nmodule wing() {\n    // Main wing membrane\n    rotate([0, 0, 15])\n    translate([0, 0, -1])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0, 0], [15, -20], [25, -25], [30, -20], [25, 0],\n        [20, 5], [15, 0], [10, 5], [5, 0], [0, 0]\n    ]);\n    \n    // Wing bones\n    for(i = [0:3]) {\n        rotate([0, 0, i*15])\n        translate([5+i*5, -5-i*3, 0])\n        cylinder(h=2, r=0.8);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([5, 5, 10])\n    rotate([20, 0, -30])\n    wing();\n    \n    // Right wing\n    translate([5, -5, 10])\n    rotate([20, 0, 30])\n    mirror([0, 1, 0])\n    wing();\n}\n\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front leg\n        translate([10, side*8, -8])\n        rotate([0, 10, 0])\n        union() {\n            cylinder(h=8, r=2);\n            translate([0, 0, -8])\n                sphere(2.5);\n        }\n        \n        // Back leg\n        translate([-10, side*6, -8])\n        rotate([0, -10, 0])\n        union() {\n            cylinder(h=8, r=2);\n            translate([0, 0, -8])\n                sphere(2.5);\n        }\n    }\n}\n\nmodule tail() {\n    translate([-15, 0, 0])\n    union() {\n        // Tail segments getting smaller\n        for(i = [0:5]) {\n            translate([-i*5, 0, 0])\n            scale([1-i*0.15, 1-i*0.15, 1-i*0.15])\n            sphere(8-i);\n        }\n        \n        // Tail spikes\n        for(i = [1:3]) {\n            translate([-i*8, 0, 3])\n            rotate([90, 0, 0])\n            cylinder(h=4, r1=1.5, r2=0.5);\n        }\n    }\n}\n\nmodule ice_spikes() {\n    // Icy protrusions along spine\n    for(i = [-8:4:8]) {\n        translate([i, 0, 12])\n        rotate([0, 0, 90])\n        scale([0.5, 0.5, 1])\n        cylinder(h=6, r1=2, r2=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail();\n    ice_spikes();\n}",
    "renders": true
  },
  {
    "household_item": "frostcoil",
    "openscad_code": "// FrostCoil - Realistic Medium Complexity\n// Dimensions: 80mm diameter, 30mm height\n// Features: Tubing, fins, inlet/outlet ports, mounting base\n\n// Parameters\ncoil_diameter = 80;\ncoil_height = 30;\ntube_diameter = 6;\nfin_thickness = 1.5;\nfin_spacing = 4;\nnum_fins = 7;\nwall_thickness = 2;\n\n// Main module\nmodule frostcoil() {\n    // Central mounting base\n    cylinder(h=8, d1=20, d2=25, $fn=32);\n    \n    // Coil tubing\n    translate([0, 0, 8]) {\n        // Bottom coil loop\n        rotate_extrude(angle=360, $fn=64) {\n            translate([coil_diameter/2 - tube_diameter, 0, 0]) {\n                circle(d=tube_diameter, $fn=16);\n            }\n        }\n        \n        // Top coil loop\n        translate([0, 0, coil_height - tube_diameter]) {\n            rotate_extrude(angle=360, $fn=64) {\n                translate([coil_diameter/2 - tube_diameter, 0, 0]) {\n                    circle(d=tube_diameter, $fn=16);\n                }\n            }\n        }\n        \n        // Vertical connecting tubes\n        for(i=[0:5]) {\n            angle = i * 60;\n            translate([cos(angle) * (coil_diameter/2 - tube_diameter/2), \n                      sin(angle) * (coil_diameter/2 - tube_diameter/2), 0]) {\n                cylinder(h=coil_height - tube_diameter, d=tube_diameter, $fn=16);\n            }\n        }\n    }\n    \n    // Cooling fins\n    for(i=[0:num_fins-1]) {\n        translate([0, 0, 12 + i * fin_spacing]) {\n            difference() {\n                cylinder(h=fin_thickness, d=coil_diameter - 4, $fn=64);\n                // Central hole for tubes\n                cylinder(h=fin_thickness + 0.1, d=30, $fn=32);\n                // Tube holes\n                for(j=[0:5]) {\n                    angle = j * 60;\n                    translate([cos(angle) * (coil_diameter/2 - tube_diameter/2), \n                              sin(angle) * (coil_diameter/2 - tube_diameter/2), 0]) {\n                        cylinder(h=fin_thickness + 0.1, d=tube_diameter + 1, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Inlet port\n    translate([(coil_diameter/2 - tube_diameter/2) - 2, 0, coil_height - tube_diameter/2]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=15, d=tube_diameter + 4, $fn=16);\n            translate([0, 0, 15]) {\n                cylinder(h=5, d=tube_diameter + 8, $fn=16);\n            }\n        }\n    }\n    \n    // Outlet port\n    translate([-(coil_diameter/2 - tube_diameter/2) + 2, 0, tube_diameter/2 + 8]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=15, d=tube_diameter + 4, $fn=16);\n            translate([0, 0, 15]) {\n                cylinder(h=5, d=tube_diameter + 8, $fn=16);\n            }\n        }\n    }\n    \n    // Mounting holes\n    translate([0, 0, -1]) {\n        for(i=[0:2]) {\n            angle = i * 120;\n            rotate([0, 0, angle]) {\n                translate([10, 0, 4]) {\n                    cylinder(h=10, d=3.2, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nfrostcoil();",
    "renders": true
  },
  {
    "household_item": "snowserpent",
    "openscad_code": "// Snowserpent - Realistic style, medium complexity\n// Length: 80mm, Height: 25mm, Width: 30mm\n\nmodule snowserpent() {\n    // Main body segments\n    difference() {\n        union() {\n            // Head\n            translate([0, 0, 5]) {\n                difference() {\n                    sphere(d=15, $fn=32);\n                    // Eye sockets\n                    translate([5, 5, 2]) rotate([0, 90, 0]) cylinder(h=8, d=4, $fn=16);\n                    translate([-5, 5, 2]) rotate([0, 90, 0]) cylinder(h=8, d=4, $fn=16);\n                }\n            }\n            \n            // Neck\n            translate([0, 0, 0]) {\n                rotate([0, 90, 0]) cylinder(h=10, d1=12, d2=8, $fn=16);\n            }\n            \n            // Body segments\n            for(i=[0:5]) {\n                translate([10 + i*10, 0, 0]) {\n                    rotate([0, 90, 0]) cylinder(h=12, d1=10 - i*0.5, d2=10 - (i+1)*0.5, $fn=16);\n                }\n            }\n            \n            // Tail\n            translate([70, 0, 0]) {\n                rotate([0, 90, 0]) cylinder(h=15, d1=7, d2=2, $fn=16);\n            }\n        }\n        \n        // Hollow out for material saving\n        translate([0, 0, 5]) sphere(d=12, $fn=32);\n        for(i=[0:5]) {\n            translate([10 + i*10, 0, 0]) {\n                rotate([0, 90, 0]) cylinder(h=14, d=8 - i*0.5, $fn=16);\n            }\n        }\n    }\n    \n    // Eyes\n    translate([5, 5, 7]) sphere(d=2.5, $fn=16);\n    translate([-5, 5, 7]) sphere(d=2.5, $fn=16);\n    \n    // Scales pattern\n    module scales(x, y, z, count) {\n        for(i=[0:count-1]) {\n            translate([x + i*2, y, z + sin(i*30)*0.5]) {\n                sphere(d=1.5, $fn=8);\n            }\n        }\n    }\n    \n    // Scales along back\n    scales(-5, 0, 8, 40);\n    scales(-5, 2, 8, 40);\n    scales(-5, -2, 8, 40);\n    \n    // Scales along sides\n    for(seg=[0:5]) {\n        scales(10 + seg*10, 5, 2, 6);\n        scales(10 + seg*10, -5, 2, 6);\n    }\n    \n    // Fins\n    module fin(x, y, z, angle) {\n        translate([x, y, z]) {\n            rotate([0, angle, 0]) {\n                difference() {\n                    union() {\n                        cube([8, 1, 4]);\n                        translate([4, 0, 2]) sphere(d=2, $fn=16);\n                    }\n                    translate([0, -0.5, -1]) cube([8, 2, 6]);\n                }\n            }\n        }\n    }\n    \n    // Dorsal fins\n    fin(20, 0, 8, 0);\n    fin(35, 0, 8, 0);\n    fin(50, 0, 8, 0);\n    \n    // Side fins\n    fin(25, 8, 2, 90);\n    fin(40, 8, 2, 90);\n    fin(25, -8, 2, -90);\n    fin(40, -8, 2, -90);\n    \n    // Mouth\n    translate([6, 5, 2]) {\n        rotate([0, 90, 0]) cylinder(h=10, d=1, $fn=8);\n    }\n    translate([6, -5, 2]) {\n        rotate([0, 90, 0]) cylinder(h=10, d=1, $fn=8);\n    }\n    \n    // Teeth\n    for(t=[0:3]) {\n        translate([6, -4 + t*2.5, 1]) {\n            cube([2, 0.5, 1]);\n        }\n    }\n}\n\n// Generate the snowserpent\nsnowserpent();",
    "renders": true
  },
  {
    "household_item": "icecrystalhydra",
    "openscad_code": "// Ice Crystal Hydra - Realistic Medium Complexity\n// Dimensions: ~70mm wide x 80mm tall x 70mm deep\n\n// Configuration\n$fn = 36;\nneck_length = 25;\nneck_radius = 3;\nhead_size = 8;\ncrystal_size = 4;\nbase_height = 12;\nbase_radius = 20;\nbody_height = 35;\nbody_radius = 15;\nleg_height = 20;\nleg_radius = 2.5;\ntail_length = 30;\ntail_segments = 6;\ncrystal_count = 12;\n\n// Main model\nunion() {\n    // Central body\n    body();\n    \n    // Six heads on necks\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([body_radius * 0.7, 0, body_height * 0.7])\n                rotate([0, -30, 0])\n                    head_assembly(i);\n    }\n    \n    // Four legs\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([body_radius * 0.8, 0, base_height])\n                leg();\n    }\n    \n    // Crystal tail\n    rotate([0, 0, 180])\n        translate([0, 0, base_height])\n            crystal_tail();\n    \n    // Base platform\n    translate([0, 0, 0])\n        base();\n}\n\n// Base module\nmodule base() {\n    difference() {\n        cylinder(h = base_height, r1 = base_radius, r2 = base_radius * 0.9);\n        \n        // Drainage holes\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([base_radius * 0.5, 0, base_height / 2])\n                    rotate([90, 0, 0])\n                        cylinder(h = base_radius, r = 2, $fn = 8);\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    union() {\n        // Main body\n        translate([0, 0, base_height])\n            cylinder(h = body_height, r1 = body_radius, r2 = body_radius * 0.8);\n        \n        // Crystal spines\n        for(i = [0:crystal_count - 1]) {\n            rotate([0, 0, i * 360 / crystal_count])\n                translate([body_radius * 0.9, 0, base_height + body_height * 0.5])\n                    rotate([45, 0, 0])\n                        crystal(crystal_size);\n        }\n        \n        // Neck joint\n        translate([0, 0, base_height + body_height])\n            sphere(r = body_radius * 0.7);\n    }\n}\n\n// Head assembly\nmodule head_assembly(index) {\n    union() {\n        // Neck\n        color(\"lightblue\")\n        translate([neck_length / 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = neck_length, r = neck_radius, r2 = neck_radius * 0.8);\n        \n        // Head\n        color(\"aliceblue\")\n        translate([neck_length, 0, 0])\n            scale([1.2, 0.8, 0.8])\n                sphere(r = head_size);\n        \n        // Snout\n        translate([neck_length + head_size, 0, 0])\n            scale([1.5, 0.6, 0.4])\n                sphere(r = head_size * 0.7);\n        \n        // Eyes\n        for(j = [-1:1:1]) {\n            translate([neck_length + head_size * 0.5, j * head_size * 0.4, head_size * 0.3])\n                sphere(r = 1.5);\n        }\n        \n        // Crystal horn\n        translate([neck_length + head_size * 1.5, 0, head_size * 0.5])\n            rotate([0, 0, 30])\n                crystal(crystal_size * 1.5);\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, leg_height / 2])\n            cylinder(h = leg_height, r = leg_radius);\n        \n        // Lower leg\n        translate([0, 0, leg_height])\n            rotate([30, 0, 0])\n                cylinder(h = leg_height * 0.8, r = leg_radius * 0.8);\n        \n        // Foot\n        translate([0, 0, leg_height + leg_height * 0.8])\n            scale([1.5, 1, 0.5])\n                sphere(r = leg_radius);\n    }\n}\n\n// Crystal tail\nmodule crystal_tail() {\n    for(i = [0:tail_segments - 1]) {\n        translate([0, 0, i * tail_length / tail_segments])\n            rotate([0, 0, i * 15])\n                union() {\n                    // Tail segment\n                    cylinder(h = tail_length / tail_segments, r1 = body_radius * (1 - i * 0.12), r2 = body_radius * (1 - (i + 1) * 0.12));\n                    \n                    // Tail crystal\n                    if(i > 1) {\n                        translate([body_radius * (1 - i * 0.12) * 0.9, 0, tail_length / tail_segments])\n                            rotate([45, 0, 0])\n                                crystal(crystal_size * (1 + i * 0.2));\n                    }\n                }\n    }\n}\n\n// Crystal module\nmodule crystal(size) {\n    difference() {\n        // Main crystal\n        scale([1, 0.7, 2])\n            sphere(r = size);\n        \n        // Facets\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([size * 0.3, 0, 0])\n                    cube([size * 0.6, size * 2, size * 4], center = true);\n        }\n        \n        // Inner hollow for printability\n        scale([0.8, 0.5, 1.8])\n            sphere(r = size * 0.8);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "glacierback",
    "openscad_code": "// Glacierback - Realistic 3D printable model\n// Medium complexity with proper printability\n\n$fn = 48;\n\n// Main parameters\nbody_length = 60;\nbody_width = 35;\nbody_height = 25;\nshell_thickness = 2.5;\n\n// Shell segments count\nsegments = 5;\n\nmodule main_shell() {\n    // Create segmented shell structure\n    for(i = [0:segments-1]) {\n        translate([i * (body_length/segments) - body_length/2, 0, 0])\n        difference() {\n            // Main shell segment\n            scale([1.2, 1 - i*0.1, 1 - i*0.15])\n            translate([0, 0, 5])\n            sphere(d = body_width);\n            \n            // Hollow out\n            scale([0.8, 0.8, 0.8])\n            translate([0, 0, 5])\n            sphere(d = body_width - shell_thickness*2);\n        }\n    }\n}\n\nmodule head_section() {\n    // Head with snout\n    translate([-body_length/2 - 15, 0, body_height/2])\n    union() {\n        // Main head\n        scale([1.2, 0.8, 0.8])\n        sphere(d = 25);\n        \n        // Snout\n        translate([-8, 0, -3])\n        scale([1.5, 0.6, 0.5])\n        sphere(d = 15);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([-3, side * 6, 3])\n            sphere(d = 3);\n        }\n        \n        // Nostrils\n        for(side = [-1, 1]) {\n            translate([-12, side * 2, -2])\n            sphere(d = 1.5);\n        }\n    }\n}\n\nmodule limb(pos_x, pos_y, side) {\n    // Create limb with joint\n    translate([pos_x, pos_y * side, -body_height/2])\n    union() {\n        // Upper leg\n        rotate([0, 10 * side, 0])\n        cylinder(h = 12, r1 = 5, r2 = 4);\n        \n        // Lower leg\n        translate([0, 0, -12])\n        rotate([0, -20 * side, 0])\n        cylinder(h = 10, r1 = 4, r2 = 3);\n        \n        // Foot\n        translate([0, 0, -22])\n        rotate([0, -10 * side, 0])\n        scale([1.5, 1, 0.5])\n        sphere(d = 6);\n    }\n}\n\nmodule tail_section() {\n    // Tail with segments\n    translate([body_length/2 + 10, 0, body_height/4])\n    union() {\n        // Tail base\n        scale([1.5, 1, 0.6])\n        sphere(d = 20);\n        \n        // Tail segments\n        for(i = [1:3]) {\n            translate([i * 8, 0, -i * 2])\n            scale([1 - i*0.2, 1 - i*0.1, 0.6 - i*0.1])\n            sphere(d = 15 - i*3);\n        }\n    }\n}\n\nmodule shell_plates() {\n    // Hexagonal plates on shell\n    for(i = [0:segments-1]) {\n        for(j = [0:3]) {\n            rotate([0, 0, j * 90])\n            translate([i * (body_length/segments) - body_length/2, \n                      (body_width/2 - 5) * cos(j * 90), \n                      8 - i * 2])\n            scale([1.2, 0.8, 0.3])\n            cylinder(h = 3, r1 = 4, r2 = 3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central body\n    main_shell();\n    \n    // Head\n    head_section();\n    \n    // Tail\n    tail_section();\n    \n    // Limbs - positioned for stability\n    limb(-body_length/3, body_width/2 - 5, 1);\n    limb(-body_length/3, body_width/2 - 5, -1);\n    limb(body_length/4, body_width/2 - 8, 1);\n    limb(body_length/4, body_width/2 - 8, -1);\n    \n    // Shell armor plates\n    shell_plates();\n}\n\n// Add support base for printing\ntranslate([0, 0, -body_height/2 - 2])\ndifference() {\n    cube([body_length + 30, body_width + 20, 4], center = true);\n    cube([body_length + 28, body_width + 18, 6], center = true);\n}",
    "renders": true
  },
  {
    "household_item": "polarwyrm",
    "openscad_code": "// Polarwyrm - medium complexity realistic style\n// 3D printable articulating serpent-like creature\n\n$fn = 30;\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Main body parameters\nbody_length = 100 * scale_factor;\nbody_segments = 12;\nsegment_length = body_length / body_segments;\nbody_radius = 12 * scale_factor;\n\n// Head parameters\nhead_length = 20 * scale_factor;\nhead_width = 15 * scale_factor;\nhead_height = 10 * scale_factor;\n\n// Tail parameters\ntail_segments = 8;\ntail_start_radius = body_radius * 0.8;\ntail_end_radius = 2 * scale_factor;\n\n// Leg parameters\nleg_length = 18 * scale_factor;\nleg_radius = 3 * scale_factor;\nleg_segments = 4;\n\n// Fin parameters\nfin_height = 8 * scale_factor;\nfin_thickness = 1.5 * scale_factor;\n\nmodule polarwyrm() {\n    // Head assembly\n    translate([0, 0, body_radius]) {\n        // Main head\n        scale([1, 0.8, 0.6]) \n            sphere(r=head_width/2);\n        \n        // Snout\n        translate([head_length/2, 0, 0])\n            scale([1.2, 0.6, 0.5]) \n                sphere(r=head_width/3);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([head_length/3, side*head_width/2.5, head_height/2])\n                sphere(r=2*scale_factor);\n        }\n    }\n    \n    // Body segments\n    for(i = [0:body_segments-1]) {\n        segment_radius = body_radius * (1 - i*0.05);\n        translate([0, 0, -i*segment_length*0.8]) {\n            // Main body segment\n            cylinder(h=segment_length*0.8, r1=segment_radius, r2=segment_radius*0.95);\n            \n            // Dorsal fin\n            if(i % 2 == 0) {\n                translate([0, 0, segment_radius])\n                    rotate([0, 90, 0])\n                        cylinder(h=fin_height, r1=fin_thickness, r2=fin_thickness/2);\n            }\n        }\n    }\n    \n    // Tail segments\n    for(i = [0:tail_segments-1]) {\n        tail_radius = tail_start_radius * (1 - i*0.12);\n        translate([0, 0, -(body_segments*segment_length*0.8 + i*segment_length*0.6)]) {\n            cylinder(h=segment_length*0.6, r1=tail_radius, r2=tail_radius*0.85);\n            \n            // Tail fins\n            for(side = [-1, 1]) {\n                translate([0, side*tail_radius/2, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=fin_height*(1-i*0.1), r1=fin_thickness, r2=fin_thickness/2);\n            }\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        for(pos = [2, 6, 10]) {\n            if(pos < body_segments) {\n                translate([side*body_radius*1.1, 0, -pos*segment_length*0.8])\n                    rotate([90, 0, side*15])\n                        leg();\n            }\n        }\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    cylinder(h=leg_length*0.4, r=leg_radius);\n    \n    // Knee joint\n    translate([0, 0, leg_length*0.4])\n        sphere(r=leg_radius*1.2);\n    \n    // Lower leg\n    translate([0, 0, leg_length*0.4])\n        rotate([20, 0, 0])\n            cylinder(h=leg_length*0.6, r=leg_radius*0.8);\n    \n    // Foot\n    translate([0, 0, leg_length*0.4 + leg_length*0.6])\n        rotate([20, 0, 0])\n            scale([1.5, 1, 0.5])\n                sphere(r=leg_radius*1.1);\n}\n\n// Main assembly\npolarwyrm();",
    "renders": true
  },
  {
    "household_item": "taigawyrm",
    "openscad_code": "// Taigawyrm – medium-complexity realistic style\n// Overall length ~90 mm, printable without supports\n\n$fn = 36;                // smooth curves\n\nmodule body_segment(r, h, taper = 1) {\n    // slightly tapered cylindrical segment with rounded ends\n    hull() {\n        translate([0, 0, -h/2])\n            sphere(r = r * taper);\n        translate([0, 0,  h/2])\n            sphere(r = r);\n    }\n}\n\nmodule body() {\n    // 10 linked segments getting smaller toward tail\n    for (i = [0:9]) {\n        r = 12 - i * 1.1;\n        h = 8;\n        translate([0, 0, -i * (h - 2)])   // overlap for printability\n            body_segment(r, h, taper = 1 - i * 0.05);\n    }\n}\n\nmodule head() {\n    // rounded triangular snout\n    difference() {\n        // main head\n        union() {\n            scale([1.3, 1, 1])\n                sphere(r = 11);\n            translate([10, 0, 0])\n                rotate([0, -30, 0])\n                    scale([1.6, 1, 0.8])\n                        cylinder(h = 15, r1 = 4, r2 = 0);\n        }\n        // mouth slit\n        translate([8, 0, -2])\n            rotate([0, -30, 0])\n                scale([1.7, 0.3, 0.5])\n                    cube([20, 10, 5], center = true);\n    }\n}\n\nmodule eye() {\n    // recessed eye\n    rotate([0, 90, 0])\n        cylinder(h = 3, r1 = 3, r2 = 2);\n}\n\nmodule dorsal_plate() {\n    // keeled armor plate\n    hull() {\n        translate([0, 0, 0])\n            cube([5, 2, 1], center = true);\n        translate([0, 0, 4])\n            cube([2, 1.5, 1], center = true);\n    }\n}\n\nmodule dorsal_row() {\n    // row of 8 plates along back\n    for (i = [0:7]) {\n        translate([0, 0, -i * 7 - 6])\n            dorsal_plate();\n    }\n}\n\nmodule leg() {\n    // simple printable leg\n    // upper\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 6, r = 2.5);\n    // lower\n    translate([0, 0, -6])\n        rotate([90, 30, 0])\n            cylinder(h = 8, r = 2);\n    // foot\n    translate([0, -4, -11])\n        sphere(r = 3);\n}\n\nmodule legs() {\n    // 3 legs per side\n    for (side = [-1, 1])\n        for (i = [0:2]) {\n            z = -i * 12 - 5;\n            rotate([0, 15 * side, 0])\n                translate([side * 11, 0, z])\n                    leg();\n        }\n}\n\n// assembly\nunion() {\n    // body\n    color(\"darkolivegreen\")\n        body();\n    // head\n    color(\"darkolivegreen\")\n        translate([0, 0, 10])\n            head();\n    // eyes\n    color(\"black\")\n        translate([7, 5, 2])\n            eye();\n    translate([7, -5, 2])\n            mirror([0, 1, 0])\n                eye();\n    // dorsal armor\n    color(\"darkgreen\")\n        translate([0, 0, 10])\n            dorsal_row();\n    // legs\n    color(\"darkolivegreen\")\n        legs();\n}",
    "renders": true
  },
  {
    "household_item": "forestcoil",
    "openscad_code": "// ForestCoil - Realistic style, medium complexity\n// A 3D printable forest coil with bark texture, pine needles, and pine cone details\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters for sizing\ncoil_height = 60;\ncoil_diameter = 30;\nbark_thickness = 2;\nneedle_length = 8;\ncone_size = 12;\n\n// Main coil body - hollow cylinder with bark texture\nmodule coil_body() {\n    difference() {\n        // Outer textured bark\n        union() {\n            for (i = [0:15:359]) {\n                rotate([0, 0, i])\n                translate([coil_diameter/2, 0, 0])\n                scale([1, 0.3, 1])\n                cylinder(h=coil_height, d=bark_thickness*2, center=true);\n            }\n        }\n        \n        // Hollow center with 2mm walls\n        cylinder(h=coil_height+2, d=coil_diameter-bark_thickness*4, center=true);\n    }\n}\n\n// Pine needles arranged around the coil\nmodule pine_needles() {\n    for (z = [0:10:coil_height-10]) {\n        for (angle = [0:30:359]) {\n            translate([cos(angle)*(coil_diameter/2+bark_thickness), \n                      sin(angle)*(coil_diameter/2+bark_thickness), \n                      z-coil_height/2])\n            rotate([90, 0, angle])\n            scale([0.3, 0.3, 1])\n            cylinder(h=needle_length, d=0.8, center=true);\n        }\n    }\n}\n\n// Pine cone scales\nmodule pine_cone() {\n    difference() {\n        // Main cone body\n        cylinder(h=cone_size, d1=cone_size, d2=0, center=false);\n        \n        // Scale texture\n        for (i = [1:5]) {\n            translate([0, 0, i*2])\n            rotate([0, 0, 15*i])\n            difference() {\n                cylinder(h=2, d1=cone_size-i, d2=cone_size-i-2, center=false);\n                cube([cone_size*2, cone_size*2, 3], center=true);\n            }\n        }\n    }\n}\n\n// Attach pine cones to coil\nmodule cones_on_coil() {\n    translate([coil_diameter/2+bark_thickness+cone_size/2, 0, coil_height/3])\n    pine_cone();\n    \n    translate([-coil_diameter/2-bark_thickness-cone_size/2, 0, -coil_height/4])\n    rotate([0, 180, 0])\n    pine_cone();\n    \n    translate([0, coil_diameter/2+bark_thickness+cone_size/2, 0])\n    rotate([90, 0, 90])\n    pine_cone();\n}\n\n// Base platform for stability\nmodule base() {\n    translate([0, 0, -coil_height/2-2])\n    cylinder(h=4, d=coil_diameter+20, center=false);\n}\n\n// Assembly\nunion() {\n    base();\n    coil_body();\n    pine_needles();\n    cones_on_coil();\n}",
    "renders": true
  },
  {
    "household_item": "junglewyrm",
    "openscad_code": "// Junglewyrm – medium-complexity, realistic style\n// Overall length ≈ 80 mm, printable without supports\n\n$fn = 32;\n\nmodule body_segment(r, h, taper=1) {\n    // Single body ring with slight taper toward tail\n    difference() {\n        cylinder(h=h, r1=r, r2=r*taper, center=true);\n        translate([0,0,-h/2-0.1]) cylinder(h=h+0.2, r1=r-1.6, r2=r*taper-1.6, center=true);\n    }\n}\n\nmodule head() {\n    union() {\n        // Main skull\n        translate([0,0,5]) scale([1.2,0.9,1.1]) sphere(10);\n        \n        // Snout\n        translate([0,0,-3]) cylinder(h=12, r1=6, r2=4, center=true);\n        \n        // Eyes\n        for(x=[-1,1])\n            translate([x*8,8,3]) sphere(3.5);\n        \n        // Nostrils\n        for(x=[-2.5,2.5])\n            translate([x,-6,-7]) rotate([90,0,0]) cylinder(h=3, r=1.5, $fn=16);\n        \n        // Jaw\n        difference() {\n            translate([0,-5,-11]) cube([20,5,5], center=true);\n            translate([0,-2.5,-11]) cube([18,5,5.5], center=true);\n        }\n    }\n}\n\nmodule spine_plate() {\n    // Triangular dorsal plate\n    linear_extrude(height=4, scale=0.3, center=true) polygon([[0,0],[-5,0],[0,8]]);\n}\n\nmodule leg() {\n    // Simple reptilian leg\n    union() {\n        // Upper leg\n        cylinder(h=8, r=3, center=true);\n        // Lower leg\n        translate([0,0,-8]) rotate([15,0,0]) cylinder(h=10, r=2.5, center=true);\n        // Foot\n        translate([0,0,-16]) rotate([90,0,0]) cylinder(h=6, r1=3, r2=1.5, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0,0,0]) head();\n    \n    // Neck\n    for(i=[1:3])\n        translate([0,0,-8-i*6]) body_segment(8-i*0.5, 6, 0.95);\n    \n    // Body segments\n    num_body = 12;\n    for(i=[0:num_body-1]) {\n        taper = pow(0.97, i);\n        translate([0,0,-30-i*5]) body_segment(8*taper, 5, 0.98);\n    }\n    \n    // Tail\n    for(i=[0:6]) {\n        taper = pow(0.9, i);\n        translate([0,0,-90-i*5]) body_segment(5*taper, 5, 0.9);\n    }\n    \n    // Dorsal plates\n    for(i=[3:3:num_body-1]) {\n        translate([0,0,-30-i*5+2.5]) rotate([0,180,0]) spine_plate();\n    }\n    \n    // Legs\n    for(side=[-1,1])\n        for(idx=[1,3,5]) {\n            translate([side*10,0,-35-idx*5]) rotate([0,side*25,side*10]) leg();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "vinehydra",
    "openscad_code": "// VineHydra - Realistic Style, Medium Complexity\n// A 3D printable vine-like hydra with multiple heads and organic details\n\n$fn = 24;\nwall = 1.2; // Wall thickness for 3D printing\n\nmodule stem_segment(h, r, segments=5) {\n    // Create a slightly curved stem segment\n    union() {\n        for(i=[0:segments-1]) {\n            translate([0, 0, i*h/segments])\n                rotate([sin(i*15), cos(i*15), 0])\n                    cylinder(h=h/segments+0.1, r1=r*(1-0.1*sin(i*30)), r2=r*(1-0.1*sin((i+1)*30)));\n        }\n    }\n}\n\nmodule leaf(w, l, t=wall) {\n    // Simple organic leaf shape\n    difference() {\n        scale([1, 2, 0.3])\n            sphere(w/2);\n        \n        // Cut leaf shape\n        translate([0, -w, 0])\n            cube([w*2, w*2, w], center=true);\n    }\n}\n\nmodule vine_head(size) {\n    // Main head structure\n    difference() {\n        // Head base\n        sphere(size);\n        \n        // Mouth opening\n        translate([0, -size*0.7, -size*0.2])\n            rotate([0, 0, 0])\n                cylinder(h=size*1.5, r=size*0.4, center=true);\n        \n        // Eye sockets\n        translate([size*0.35, size*0.3, size*0.3])\n            sphere(size*0.15);\n        translate([-size*0.35, size*0.3, size*0.3])\n            sphere(size*0.15);\n    }\n    \n    // Eyes\n    translate([size*0.35, size*0.3, size*0.3+wall])\n        sphere(wall);\n    translate([-size*0.35, size*0.3, size*0.3+wall])\n        sphere(wall);\n    \n    // Teeth\n    for(angle=[0:60:300]) {\n        rotate([0, 0, angle])\n            translate([0, -size*0.7, -size*0.2])\n                cylinder(h=size*0.15, r=size*0.05);\n    }\n}\n\nmodule vine_tendril(length, r) {\n    // Flexible tendril/vine\n    for(i=[0:5:length]) {\n        translate([sin(i*0.5)*r, cos(i*0.5)*r, i])\n            rotate([90, 0, i*20])\n                cylinder(h=2, r=1);\n    }\n}\n\n// Main body - thick central stem\ntranslate([0, 0, 0])\n    stem_segment(30, 8, 8);\n\n// Neck 1\ntranslate([0, 0, 30])\n    rotate([15, 0, 45])\n        stem_segment(20, 5, 6);\n\n// Head 1\ntranslate([10, 10, 45])\n    vine_head(8);\n\n// Neck 2\ntranslate([0, 0, 30])\n    rotate([-20, 0, -30])\n        stem_segment(18, 4, 5);\n\n// Head 2\ntranslate([-8, -6, 42])\n    vine_head(7);\n\n// Neck 3\ntranslate([0, 0, 30])\n    rotate([10, 15, 120])\n        stem_segment(22, 5, 6);\n\n// Head 3\ntranslate([6, -12, 46])\n    vine_head(8);\n\n// Base roots\nfor(angle=[0:72:360]) {\n    rotate([0, 0, angle])\n        translate([0, 12, 0])\n            stem_segment(15, 3, 4);\n}\n\n// Vines/tendrils\nfor(angle=[30:60:330]) {\n    rotate([0, 0, angle])\n        translate([sin(angle)*12, cos(angle)*12, 25])\n            rotate([0, 0, angle+90])\n                vine_tendril(15, 2);\n}\n\n// Leaves along necks\ntranslate([5, 5, 35])\n    rotate([0, 0, 45])\n        leaf(4, 6);\ntranslate([-4, -3, 38])\n    rotate([0, 0, -30])\n        leaf(3.5, 5);\ntranslate([3, -8, 40])\n    rotate([0, 0, 15])\n        leaf(4.5, 7);",
    "renders": true
  },
  {
    "household_item": "leafdrake",
    "openscad_code": "// Leafdrake - Medium complexity realistic style\n// 3D printable fantasy creature combining leaf and drake features\n\n$fn = 36;\n\nmodule leaf_shape(height = 20, width = 15, thickness = 2) {\n    // Main leaf body with slight curve\n    difference() {\n        hull() {\n            translate([0, -width/4, 0]) sphere(d = width/2);\n            translate([0, width/4, 0]) sphere(d = width/2);\n            translate([height/2, 0, 0]) sphere(d = width/3);\n        }\n        \n        // Vein grooves\n        for(i = [-2:2]) {\n            rotate([0, 0, i * 15]) \n                translate([0, 0, -thickness/2]) \n                cube([height, 1, thickness + 1], center = true);\n        }\n    }\n}\n\nmodule wing(scale = 1) {\n    // Wing made of 3 leaf segments\n    scale([scale, scale, scale]) {\n        union() {\n            // Main wing leaf\n            rotate([0, -10, 0]) leaf_shape(25, 20, 2);\n            \n            // Upper winglet\n            translate([5, 8, 2]) rotate([0, 0, 30]) leaf_shape(15, 12, 1.5);\n            \n            // Lower winglet\n            translate([5, -8, 2]) rotate([0, 0, -30]) leaf_shape(15, 12, 1.5);\n        }\n    }\n}\n\nmodule head() {\n    // Draconic head with leaf-like features\n    union() {\n        // Main head\n        scale([1.2, 1, 1]) sphere(d = 12);\n        \n        // Snout\n        translate([6, 0, 0]) scale([1.5, 0.8, 0.8]) sphere(d = 8);\n        \n        // Leaf crest\n        translate([0, 0, 6]) rotate([0, 20, 0]) leaf_shape(8, 6, 1);\n        \n        // Eyes (sockets for printing)\n        translate([3, 4, 2]) sphere(d = 3);\n        translate([3, -4, 2]) sphere(d = 3);\n        \n        // Nostrils\n        translate([8, 2, 0]) cylinder(h = 2, d = 2);\n        translate([8, -2, 0]) cylinder(h = 2, d = 2);\n    }\n}\n\nmodule body() {\n    // Main torso\n    union() {\n        // Central body\n        scale([1.5, 1, 1]) sphere(d = 20);\n        \n        // Neck\n        translate([-10, 0, 2]) rotate([0, 10, 0]) \n            scale([0.8, 0.8, 0.8]) cylinder(h = 15, d = 10);\n        \n        // Tail\n        translate([15, 0, 0]) \n            for(i = [0:5]) {\n                translate([i * 3, 0, -i]) \n                scale([1 - i * 0.1, 1 - i * 0.1, 1 - i * 0.1]) \n                rotate([0, -5, 0]) leaf_shape(6, 4, 2);\n            }\n    }\n}\n\nmodule legs() {\n    // Four legs with leaf-like feet\n    for(side = [-1, 1]) {\n        for(pos = [5, -5]) {\n            translate([pos, side * 8, -8]) {\n                // Upper leg\n                rotate([0, 0, side * 15]) cylinder(h = 12, d = 4);\n                \n                // Lower leg\n                translate([0, 0, -12]) rotate([20, 0, 0]) cylinder(h = 10, d = 3);\n                \n                // Foot/leaf\n                translate([0, 0, -22]) rotate([90, 0, 0]) \n                    scale([0.8, 0.8, 0.5]) leaf_shape(8, 6, 2);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Head\n    translate([-20, 0, 5]) head();\n    \n    // Wings\n    translate([0, 10, 5]) rotate([0, 0, 45]) wing(1.2);\n    translate([0, -10, 5]) rotate([0, 0, -45]) mirror([0, 1, 0]) wing(1.2);\n    \n    // Legs\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "mosswyrm",
    "openscad_code": "// Mosswyrm - Medium complexity realistic style\n// Size: ~80mm length, 25mm height\n\n// Overall scale factor\nscale_factor = 1;\n\n// Body parameters\nbody_length = 80 * scale_factor;\nbody_segments = 6;\nsegment_length = body_length / body_segments;\nbody_width = 15 * scale_factor;\nbody_height = 12 * scale_factor;\n\n// Head parameters\nhead_length = 20 * scale_factor;\nhead_width = 12 * scale_factor;\nhead_height = 10 * scale_factor;\n\n// Leg parameters\nleg_segments = 4;\nleg_length = 8 * scale_factor;\nleg_width = 3 * scale_factor;\n\n// Moss texture parameters\nmoss_size = 1.5 * scale_factor;\nmoss_density = 8;\n\nmodule moss_cluster(pos, size) {\n    for(i = [0:moss_density-1]) {\n        translate([\n            pos[0] + (rand(i*3+1)-0.5)*size*2,\n            pos[1] + (rand(i*3+2)-0.5)*size*2,\n            pos[2] + rand(i*3+3)*size\n        ]) {\n            sphere(size * (0.5 + rand(i*3+4)*0.5), $fn=8);\n        }\n    }\n}\n\nmodule body_segment(index) {\n    segment_width = body_width * (1 - index * 0.08);\n    segment_height = body_height * (1 - index * 0.08);\n    \n    // Main body segment\n    translate([index * segment_length, 0, 0]) {\n        difference() {\n            scale([1, segment_width/body_width, segment_height/body_height])\n                sphere(body_width/2, $fn=16);\n            \n            // Flatten bottom\n            translate([0, 0, -body_height/2])\n                cube([body_width*2, body_width*2, body_height], center=true);\n        }\n        \n        // Add moss patches\n        for(x = [-segment_width/3, 0, segment_width/3]) {\n            for(y = [-segment_height/3, 0, segment_height/3]) {\n                if((x != 0 || y != 0) && rand(index*10 + x*100 + y*1000) > 0.3) {\n                    moss_cluster([x, y, segment_height/2], moss_size);\n                }\n            }\n        }\n    }\n}\n\nmodule leg_pair(index, side) {\n    leg_pos = index * segment_length + segment_length/2;\n    y_offset = (side == \"left\") ? body_width/2 + leg_width/2 : -body_width/2 - leg_width/2;\n    \n    translate([leg_pos, y_offset, -body_height/2 + leg_length/2]) {\n        rotate([0, 0, (side == \"left\") ? 15 : -15]) {\n            // Upper leg\n            cylinder(h=leg_length, r=leg_width/2, $fn=8);\n            \n            // Lower leg\n            translate([0, 0, leg_length/2]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h=leg_length*0.8, r=leg_width/0.7/2, $fn=8);\n                    \n                    // Foot\n                    translate([0, 0, leg_length*0.4]) {\n                        rotate([90, 0, 0]) {\n                            scale([1.2, 0.6, 0.3])\n                                cylinder(h=leg_width, r=leg_width, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule head() {\n    translate([-head_length/2, 0, body_height/2]) {\n        // Main head\n        scale([head_length/head_width, 1, head_height/head_width])\n            sphere(head_width/2, $fn=16);\n        \n        // Snout\n        translate([-head_length/2, 0, 0]) {\n            scale([1.5, 0.8, 0.8])\n                sphere(head_width/3, $fn=12);\n        }\n        \n        // Eyes\n        eye_offset = head_width/3;\n        eye_height = head_height/3;\n        \n        // Left eye\n        translate([head_length/4, eye_offset, eye_height]) {\n            difference() {\n                sphere(head_width/6, $fn=12);\n                translate([head_width/12, 0, 0])\n                    sphere(head_width/8, $fn=12);\n            }\n        }\n        \n        // Right eye\n        translate([head_length/4, -eye_offset, eye_height]) {\n            difference() {\n                sphere(head_width/6, $fn=12);\n                translate([head_width/12, 0, 0])\n                    sphere(head_width/8, $fn=12);\n            }\n        }\n        \n        // Mouth line\n        translate([-head_length/2.5, 0, -head_height/4]) {\n            rotate([90, 0, 0]) {\n                scale([head_length/1.5, head_width/4, 1])\n                    cylinder(h=0.5, r=0.5, $fn=8);\n            }\n        }\n        \n        // Moss on head\n        for(i = [0:5]) {\n            angle = i * 60;\n            moss_cluster([\n                cos(angle) * head_width/3,\n                sin(angle) * head_width/3,\n                head_height/2\n            ], moss_size * 0.8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body segments\n    for(i = [0:body_segments-1]) {\n        body_segment(i);\n    }\n    \n    // Head\n    translate([-head_length/2, 0, 0]) {\n        head();\n    }\n    \n    // Legs\n    for(i = [0:body_segments-2]) {\n        leg_pair(i, \"left\");\n        leg_pair(i, \"right\");\n    }\n    \n    // Tail\n    translate([body_length, 0, 0]) {\n        scale([0.4, 0.4, 0.4]) {\n            rotate([0, 0, -30]) {\n                sphere(body_width/2, $fn=12);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "fernserpent",
    "openscad_code": "// Fernserpent - Realistic Style, Medium Complexity\n// A coiled serpent with fern-like fronds along its body\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 60;\nbody_height = 20;\ncoil_radius = 25;\n\n// Create the main body coil\nmodule body_coil() {\n    difference() {\n        union() {\n            // Main serpent body segments\n            for(i = [0:30:360]) {\n                rotate([0, 0, i])\n                translate([cos(i*2) * coil_radius, sin(i*2) * coil_radius, 0])\n                rotate([0, 0, i*2])\n                cylinder(h = 8, r1 = 6, r2 = 5, center = true);\n            }\n            \n            // Head segment\n            rotate([0, 0, 0])\n            translate([coil_radius, 0, 0])\n            sphere(r = 8);\n            \n            // Tail segment\n            rotate([0, 0, 180])\n            translate([coil_radius * 0.8, 0, 0])\n            cylinder(h = 12, r1 = 3, r2 = 1, center = false);\n        }\n        \n        // Eye sockets\n        rotate([0, 0, 0])\n        translate([coil_radius + 6, 3, 3])\n        sphere(r = 1.5);\n        \n        rotate([0, 0, 0])\n        translate([coil_radius + 6, -3, 3])\n        sphere(r = 1.5);\n    }\n}\n\n// Create fern fronds along the body\nmodule fern_fronds() {\n    for(i = [0:45:360]) {\n        rotate([0, 0, i])\n        translate([cos(i*2) * coil_radius, sin(i*2) * coil_radius, 5])\n        rotate([0, 0, i*2])\n        \n        // Main frond stem\n        cylinder(h = 15, r1 = 1.5, r2 = 0.8, center = false);\n        \n        // Frond leaflets\n        for(j = [0:30:150]) {\n            translate([0, 0, j/10])\n            rotate([0, 0, j])\n            translate([0, 5, 0])\n            scale([0.3, 1, 0.1])\n            sphere(r = 3);\n            \n            translate([0, 0, j/10])\n            rotate([0, 0, -j])\n            translate([0, -5, 0])\n            scale([0.3, 1, 0.1])\n            sphere(r = 3);\n        }\n    }\n}\n\n// Add scales texture\nmodule scales() {\n    for(i = [0:12:360]) {\n        rotate([0, 0, i])\n        translate([cos(i*2) * coil_radius, sin(i*2) * coil_radius, 0])\n        rotate([0, 0, i*2])\n        \n        for(j = [0:5:35]) {\n            translate([0, j - 17.5, 3])\n            scale([1, 0.8, 0.3])\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    rotate([0, 0, 0])\n    translate([coil_radius + 6, 3, 3])\n    sphere(r = 1.2);\n    \n    rotate([0, 0, 0])\n    translate([coil_radius + 6, -3, 3])\n    sphere(r = 1.2);\n}\n\n// Assembly\nunion() {\n    // Main body\n    body_coil();\n    \n    // Fern fronds\n    fern_fronds();\n    \n    // Scales\n    scales();\n    \n    // Eyes\n    eyes();\n}",
    "renders": true
  },
  {
    "household_item": "swampwyrm",
    "openscad_code": "// Swampwyrm – 3D-printable, medium-complexity, realistic style\n// Approx. 80 mm long, 35 mm tall, 30 mm wide\n// No steep overhangs; 1 mm wall thickness assumed\n\n$fn = 32;\n\nmodule body() {\n    // Main torso – slightly flattened ellipsoid\n    scale([1, 0.7, 0.5])\n        sphere(d = 35);\n}\n\nmodule neck() {\n    // Long curved neck\n    translate([-12, 0, 7])\n        rotate([-20, 0, 0])\n            cylinder(h = 25, d1 = 12, d2 = 7, center = false);\n}\n\nmodule head() {\n    // Crocodile-like head with snout\n    translate([-22, 0, 12])\n        rotate([-20, 0, 0])\n            union() {\n                // Snout\n                scale([1.2, 0.7, 0.5])\n                    sphere(d = 10);\n                // Skull\n                translate([5, 0, 0])\n                    scale([1.5, 1, 0.9])\n                        sphere(d = 12);\n            }\n}\n\nmodule eye() {\n    // Small sphere for eye\n    sphere(d = 2.5);\n}\n\nmodule nostril() {\n    // Cylindrical nostril\n    cylinder(h = 2, d = 1.5);\n}\n\nmodule tail() {\n    // Gradually tapering tail\n    translate([15, 0, -2])\n        rotate([30, 0, 0])\n            for (i = [0:8]) {\n                translate([i * 4, 0, 0])\n                    scale([1 - i * 0.08, 1 - i * 0.08, 1 - i * 0.08])\n                        sphere(d = 12);\n            }\n}\n\nmodule leg() {\n    // Sturdy leg with slight bend\n    difference() {\n        union() {\n            // Upper leg\n            translate([0, 0, 0])\n                rotate([0, 0, 0])\n                    cylinder(h = 12, d = 6, center = false);\n            // Lower leg\n            translate([0, 0, 9])\n                rotate([20, 0, 0])\n                    cylinder(h = 10, d = 5, center = false);\n            // Foot\n            translate([0, 0, 18])\n                rotate([90, 0, 0])\n                    scale([1.5, 0.8, 0.4])\n                        sphere(d = 8);\n        }\n        // Remove inner void for printability\n        translate([0, 0, 5])\n            cylinder(h = 20, d = 3);\n    }\n}\n\nmodule spine_scales() {\n    // Double row of raised scales along back\n    for (i = [0:5]) {\n        translate([10 - i * 7, 0, 5])\n            rotate([0, 90, 0])\n                scale([0.5, 1, 0.3])\n                    cylinder(h = 4, d = 2, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    tail();\n    spine_scales();\n\n    // Left legs\n    translate([8, 12, -3])\n        rotate([0, 0, -25])\n            leg();\n    translate([-8, 12, -3])\n        rotate([0, 0, -25])\n            leg();\n\n    // Right legs (mirrored)\n    mirror([0, 1, 0]) {\n        translate([8, 12, -3])\n            rotate([0, 0, -25])\n                leg();\n        translate([-8, 12, -3])\n            rotate([0, 0, -25])\n                leg();\n    }\n\n    // Eyes\n    translate([-19, 3.5, 13])\n        eye();\n    translate([-19, -3.5, 13])\n        eye();\n\n    // Nostrils\n    translate([-24, 2, 11])\n        nostril();\n    translate([-24, -2, 11])\n        nostril();\n}",
    "renders": true
  },
  {
    "household_item": "bogcoil",
    "openscad_code": "// Bogcoil - Realistic style with medium complexity\n// A compact coil-over style shock absorber for scale models\n\n$fn = 36;\n\nmodule spring_coil(outer_d, wire_d, coils, height) {\n    // Generate a realistic compression spring\n    pitch = height / coils;\n    for (i = [0:coils*32]) {\n        angle = i * 360 / 32;\n        z = i * pitch / 32;\n        translate([outer_d/2 * cos(angle), outer_d/2 * sin(angle), z])\n            rotate([0, 90, angle])\n                cylinder(d = wire_d, h = 0.5, center = true);\n    }\n}\n\nmodule shock_body() {\n    // Main shock cylinder body\n    difference() {\n        cylinder(d = 14, h = 32, center = false);\n        translate([0, 0, 2])\n            cylinder(d = 12, h = 30, center = false);\n    }\n    \n    // Top cap with mounting eye\n    translate([0, 0, 32])\n        cylinder(d = 16, h = 3, center = false);\n    \n    // Mounting eye top\n    translate([0, 0, 35])\n        rotate([90, 0, 0])\n            cylinder(d = 4, h = 12, center = true);\n    \n    // Bottom mounting eye\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(d = 4, h = 12, center = true);\n}\n\nmodule damper_shaft() {\n    // Chrome damper shaft\n    translate([0, 0, 35])\n        cylinder(d = 6, h = 28, center = false);\n    \n    // Shaft end with mounting eye\n    translate([0, 0, 63])\n        rotate([90, 0, 0])\n            cylinder(d = 4, h = 12, center = true);\n}\n\nmodule adjustment_ring() {\n    // Preload adjustment ring with knurling\n    difference() {\n        cylinder(d = 18, h = 4, center = false);\n        cylinder(d = 16, h = 4, center = false);\n    }\n    \n    // Knurling details\n    for (i = [0:23]) {\n        rotate([0, 0, i * 15])\n            translate([8.5, -0.5, 0])\n                cube([1, 1, 4]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Shock body assembly\n    shock_body();\n    \n    // Damper shaft assembly\n    damper_shaft();\n    \n    // Spring assembly\n    translate([0, 0, 15])\n        spring_coil(outer_d = 20, wire_d = 1.5, coils = 8, height = 32);\n    \n    // Adjustment ring at bottom of spring\n    translate([0, 0, 15])\n        adjustment_ring();\n    \n    // Top spring seat\n    translate([0, 0, 47])\n        cylinder(d = 20, h = 1.5, center = false);\n}",
    "renders": true
  },
  {
    "household_item": "marshbasilisk",
    "openscad_code": "// Marshbasilisk - realistic medium complexity\n// Body, head, tail, legs, frill, and eyes\n\n$fn=30;\n\nmodule leg() {\n    // Front leg segment\n    translate([0,0,5]) cylinder(h=10, r1=4, r2=3);\n    translate([0,0,15]) cylinder(h=15, r1=3, r2=2);\n    // Foot pad\n    translate([0,-2,28]) rotate([90,0,0]) cylinder(h=8, r1=4, r2=5);\n}\n\nmodule frill_spike(l) {\n    rotate([0,-20,0]) cylinder(h=l, r1=1.5, r2=0.5);\n}\n\nmodule head() {\n    difference() {\n        union() {\n            // Snout\n            translate([0,0,0]) scale([1.2,1,1]) sphere(8);\n            // Back of head\n            translate([-10,0,0]) sphere(7);\n            // Eye ridges\n            translate([5,7,2]) sphere(3);\n            translate([5,-7,2]) sphere(3);\n            // Nostrils bump\n            translate([9,0,-2]) sphere(2);\n        }\n        // Eyes\n        translate([7,5,3]) sphere(2);\n        translate([7,-5,3]) sphere(2);\n        // Nostrils\n        translate([9,2,-2]) cylinder(h=4, r=1);\n        translate([9,-2,-2]) cylinder(h=4, r=1);\n    }\n}\n\nmodule body() {\n    hull() {\n        // Front segment\n        translate([0,0,0]) sphere(10);\n        // Mid segment\n        translate([-15,0,0]) sphere(9);\n        // Hip segment\n        translate([-30,0,0]) sphere(8);\n    }\n}\n\nmodule tail() {\n    for(i=[0:10]) {\n        translate([-38 - i*5, 0, -i*1.5]) sphere(max(7 - i*0.5, 2));\n    }\n}\n\nmodule frill() {\n    for(i=[0:8]) {\n        angle = i*20 - 80;\n        length = 8 + sin(i*30)*3;\n        translate([-8,0,8]) rotate([0,angle,0]) frill_spike(length);\n    }\n}\n\nmodule marshbasilisk() {\n    // Main body assembly\n    union() {\n        // Body\n        translate([0,0,10]) body();\n        \n        // Head\n        translate([15,0,15]) rotate([0,-10,0]) head();\n        \n        // Tail\n        tail();\n        \n        // Frill\n        frill();\n        \n        // Legs\n        // Front left\n        translate([10,12,0]) rotate([0,0,30]) leg();\n        // Front right\n        translate([10,-12,0]) mirror([0,1,0]) rotate([0,0,30]) leg();\n        // Back left\n        translate([-25,10,0]) rotate([0,0,-30]) leg();\n        // Back right\n        translate([-25,-10,0]) mirror([0,1,0]) rotate([0,0,-30]) leg();\n    }\n}\n\n// Scale to 80mm length\nscale(80/60) marshbasilisk();",
    "renders": true
  },
  {
    "household_item": "fenwyrm",
    "openscad_code": "// Fenwyrm – realistic, medium-complexity, 3D-printable\n// Overall length ≈ 90 mm, height ≈ 35 mm, wall thickness 2 mm\n$fn = 60;\n\n// Overall scale factor – tweak to fit printer bed\nscale(0.9)\nfenwyrm();\n\nmodule fenwyrm() {\n    // Central body\n    union() {\n        body();\n        tail();\n        neck();\n        head();\n        legs();\n    }\n}\n\nmodule body() {\n    // Main torso – two intersecting ellipsoids for realistic shape\n    intersection() {\n        scale([1, 0.65, 0.4]) sphere(d = 40, center = true);\n        translate([0, 0, 2]) scale([1.1, 0.7, 0.35]) sphere(d = 40, center = true);\n    }\n}\n\nmodule tail() {\n    // Segmented tail, tapering\n    for (i = [0:9]) {\n        hull() {\n            translate([20 + i * 5, 0, -i * 2])\n                scale([1 - i * 0.08, 1 - i * 0.08, 1 - i * 0.1])\n                    sphere(d = 10 - i);\n            translate([23 + i * 5, 0, -i * 2 - 1])\n                scale([1 - (i + 1) * 0.08, 1 - (i + 1) * 0.08, 1 - (i + 1) * 0.1])\n                    sphere(d = 10 - (i + 1));\n        }\n    }\n}\n\nmodule neck() {\n    // S-curved neck\n    for (i = [0:7]) {\n        hull() {\n            rotate([0, i * 2, 0])\n                translate([-5 - i * 4, 0, 5 + sin(i * 15) * 3])\n                    scale([1 - i * 0.05, 0.8 - i * 0.05, 0.8 - i * 0.05])\n                        sphere(d = 12 - i);\n            rotate([0, (i + 1) * 2, 0])\n                translate([-5 - (i + 1) * 4, 0, 5 + sin((i + 1) * 15) * 3])\n                    scale([1 - (i + 1) * 0.05, 0.8 - (i + 1) * 0.05, 0.8 - (i + 1) * 0.05])\n                        sphere(d = 12 - (i + 1));\n        }\n    }\n}\n\nmodule head() {\n    // Head block\n    translate([-38, 0, 12]) rotate([0, -20, 0])\n    union() {\n        // Snout\n        scale([1.2, 0.7, 0.7])\n            sphere(d = 14);\n        // Cranial ridge\n        translate([4, 0, 6])\n            scale([0.6, 0.4, 0.2])\n                sphere(d = 12);\n        // Lower jaw\n        translate([2, 0, -5])\n            rotate([0, 10, 0])\n                scale([0.8, 0.5, 0.3])\n                    sphere(d = 12);\n        // Horns\n        for (a = [0:45:315]) {\n            rotate([0, 0, a])\n                translate([-2, 8, 9])\n                    rotate([0, 20, 0])\n                        cylinder(d1 = 5, d2 = 2, h = 12);\n        }\n    }\n}\n\nmodule legs() {\n    // Four legs with paws\n    for (side = [-1, 1]) {\n        // Front legs\n        translate([-15, side * 12, -5])\n            leg();\n        // Rear legs\n        translate([15, side * 12, -5])\n            leg();\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    hull() {\n        translate([0, 0, 0])\n            sphere(d = 8);\n        translate([0, 0, -10])\n            sphere(d = 6);\n    }\n    // Lower leg\n    translate([0, 0, -20])\n        hull() {\n            sphere(d = 6);\n            translate([0, 0, -8])\n                sphere(d = 5);\n        }\n    // Paw\n    translate([0, 0, -33])\n        scale([1.2, 1, 0.6])\n            sphere(d = 10);\n}",
    "renders": true
  },
  {
    "household_item": "reedserpent",
    "openscad_code": "// Reedserpent - realistic style, medium complexity\n// 3D printable model using only basic primitives\n\n// Global parameters\nbody_segments = 10;\nsegment_length = 5;\nsegment_diameter = 6;\nhead_length = 12;\nhead_width = 8;\nreed_thickness = 1.2;\nwall_thickness = 2;\n\n// Main module\nmodule reedserpent() {\n    union() {\n        // Body segments\n        body();\n        \n        // Head with reed structure\n        translate([0, 0, (body_segments * segment_length) + head_length/2]) \n            rotate([0, 0, 0]) \n            head();\n        \n        // Tail fin\n        translate([0, 0, -2]) \n            tail_fin();\n    }\n}\n\n// Body segments with reed texture\nmodule body() {\n    for(i = [0:body_segments-1]) {\n        translate([0, 0, i * segment_length]) {\n            difference() {\n                // Main segment body\n                cylinder(h=segment_length, d=segment_diameter, $fn=12);\n                \n                // Reed grooves for texture\n                for(j = [0:5]) {\n                    rotate([0, 0, j * 60]) {\n                        translate([segment_diameter/2 - reed_thickness, -0.5, -1]) \n                            cube([reed_thickness, 1, segment_length + 2]);\n                    }\n                }\n            }\n            \n            // Segment joints\n            translate([0, 0, segment_length - 1]) \n                cylinder(h=1, d=segment_diameter + 1, $fn=12);\n        }\n    }\n}\n\n// Head with reed structure\nmodule head() {\n    difference() {\n        // Main head shape\n        union() {\n            // Tapered head\n            cylinder(h=head_length, d1=segment_diameter, d2=head_width, $fn=12);\n            \n            // Snout extension\n            translate([0, 0, head_length]) \n                cylinder(h=5, d1=head_width, d2=4, $fn=8);\n        }\n        \n        // Eye sockets\n        translate([head_width/3, head_width/2 - 1, head_length - 3]) \n            sphere(d=3);\n        translate([-head_width/3, head_width/2 - 1, head_length - 3]) \n            sphere(d=3);\n        \n        // Mouth opening\n        translate([0, -head_width/2, head_length/2]) \n            cube([head_width, head_width/3, head_length], center=true);\n    }\n    \n    // Reed crest on head\n    for(i = [0:4]) {\n        translate([0, 0, i * 2]) \n            rotate([i * 10, 0, 0]) \n            cube([0.8, 0.8, 8 - i], center=true);\n    }\n    \n    // Eyes\n    translate([head_width/3, head_width/2 - 0.5, head_length - 3]) \n        sphere(d=2);\n    translate([-head_width/3, head_width/2 - 0.5, head_length - 3]) \n        sphere(d=2);\n}\n\n// Tail fin\nmodule tail_fin() {\n    difference() {\n        union() {\n            // Main fin\n            translate([0, 0, -3]) \n                rotate([90, 0, 0]) \n                cylinder(h=8, d1=segment_diameter + 2, d2=2, $fn=8);\n            \n            // Side fins\n            for(side = [-1, 1]) {\n                translate([side * 4, 0, -5]) \n                    rotate([90, side * 20, 0]) \n                    cube([3, 0.8, 6], center=true);\n            }\n        }\n        \n        // Reed texture cutouts\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, 0, -6]) \n                    cube([0.5, 2, 4], center=true);\n            }\n        }\n    }\n}\n\n// Generate the model\nreedserpent();",
    "renders": true
  },
  {
    "household_item": "riverdrake",
    "openscad_code": "// Riverdrake - realistic style, medium complexity\n// Basic proportions based on crocodilian anatomy\n// Designed for 3D printing with minimal overhangs\n\nmodule head() {\n    // Main head structure\n    union() {\n        // Skull base\n        translate([-10, 0, 0])\n            scale([1.8, 1.2, 0.8])\n            sphere(d=15, $fn=20);\n            \n        // Snout extension\n        translate([5, 0, -2])\n            scale([2.5, 1, 0.6])\n            sphere(d=12, $fn=20);\n            \n        // Eye ridges\n        translate([-8, 8, 2])\n            rotate([0, 30, 0])\n            scale([0.8, 0.3, 0.3])\n            cube([12, 6, 4], center=true);\n            \n        translate([-8, -8, 2])\n            rotate([0, -30, 0])\n            scale([0.8, 0.3, 0.3])\n            cube([12, 6, 4], center=true);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-8, 6, 4])\n        rotate([0, 30, 0])\n        sphere(d=4, $fn=16);\n        \n    // Right eye\n    translate([-8, -6, 4])\n        rotate([0, -30, 0])\n        sphere(d=4, $fn=16);\n}\n\nmodule teeth() {\n    // Upper teeth - simple cones\n    for(i = [0:3]) {\n        translate([2 + i*4, 4, -2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d1=2, d2=0.5, $fn=6);\n            \n        translate([2 + i*4, -4, -2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d1=2, d2=0.5, $fn=6);\n    }\n}\n\nmodule body() {\n    // Main torso\n    translate([15, 0, 0])\n        scale([3, 1.5, 0.8])\n        sphere(d=25, $fn=30);\n        \n    // Tail segments\n    for(i = [0:4]) {\n        translate([40 + i*12, 0, -i*1.5])\n            scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.1])\n            rotate([0, i*5, 0])\n            sphere(d=20 - i*3, $fn=20);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([10, side*10, -8])\n            rotate([0, 15, side*10])\n            union() {\n                // Upper leg\n                rotate([0, -30, 0])\n                cylinder(h=12, d1=6, d2=4, $fn=8);\n                \n                // Lower leg\n                translate([8, 0, -6])\n                    rotate([0, 30, 0])\n                    cylinder(h=10, d1=4, d2=3, $fn=8);\n                    \n                // Foot\n                translate([14, 0, -12])\n                    scale([2, 1, 0.5])\n                    sphere(d=6, $fn=8);\n            }\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        translate([35, side*12, -8])\n            rotate([0, -15, side*15])\n            union() {\n                // Upper leg\n                rotate([0, 30, 0])\n                cylinder(h=15, d1=7, d2=5, $fn=8);\n                \n                // Lower leg\n                translate([10, 0, -8])\n                    rotate([0, -30, 0])\n                    cylinder(h=12, d1=5, d2=4, $fn=8);\n                    \n                // Foot\n                translate([18, 0, -16])\n                    scale([2.5, 1.2, 0.5])\n                    sphere(d=7, $fn=8);\n            }\n    }\n}\n\nmodule back_plates() {\n    // Dorsal plates along spine\n    for(i = [0:6]) {\n        translate([5 + i*7, 0, 8 + sin(i*30)*2])\n            rotate([0, 0, i*10])\n            scale([1, 0.3, 1.5])\n            cylinder(h=5, d=6, $fn=4);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    body();\n    translate([0, 0, 0]) head();\n    translate([0, 0, 0]) eyes();\n    legs();\n    back_plates();\n}\n\n// Teeth in separate union to avoid internal geometry issues\ntranslate([0, 0, 0]) teeth();",
    "renders": true
  },
  {
    "household_item": "streamcoil",
    "openscad_code": "// Streamcoil - realistic style with medium complexity\n// 3D printable water flow sensor housing\n\n$fn = 50;  // Smooth curves\n\n// Main parameters\nbody_d = 45;\nbody_h = 30;\ninlet_d = 12;\noutlet_d = 12;\ncoil_turns = 8;\ncoil_wire_d = 3;\ncoil_inner_d = 20;\ncoil_outer_d = 35;\nmount_hole_d = 4;\nwall_thickness = 2;\n\nmodule main_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = body_h, d = body_d, center = true);\n        \n        // Flow chamber\n        translate([0, 0, -wall_thickness/2])\n            cylinder(h = body_h + wall_thickness, d = body_d - 2*wall_thickness, center = true);\n        \n        // Inlet port\n        rotate([90, 0, 0])\n            translate([0, 0, -body_h/2])\n                cylinder(h = body_d/2, d = inlet_d, center = false);\n        \n        // Outlet port  \n        rotate([-90, 0, 0])\n            translate([0, 0, -body_h/2])\n                cylinder(h = body_d/2, d = outlet_d, center = false);\n    }\n}\n\nmodule coil_holder() {\n    // Mounting posts for coil\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([body_d/2 - 5, 0, body_h/2 - 3])\n                cylinder(h = 6, d = 6, center = false);\n    }\n}\n\nmodule sensor_coil() {\n    // Generate coil windings\n    for(i = [0:coil_turns-1]) {\n        rotate([0, 0, i*360/coil_turns])\n            translate([0, 0, -body_h/4 + i*body_h/(2*coil_turns)])\n                torus_segments();\n    }\n}\n\nmodule torus_segments() {\n    // Create individual coil segments\n    rotate_extrude(angle = 45, $fn = 20)\n        translate([(coil_inner_d + coil_outer_d)/4, 0, 0])\n            circle(d = coil_wire_d);\n}\n\nmodule mounting_holes() {\n    // Flange mounting holes\n    for(i = [0:3]) {\n        rotate([0, 0, i*90 + 45])\n            translate([body_d/2 + 5, 0, 0])\n                cylinder(h = 10, d = mount_hole_d, center = true);\n    }\n}\n\nmodule flow_straighteners() {\n    // Cross vanes for flow conditioning\n    difference() {\n        cylinder(h = 5, d = body_d - 2*wall_thickness - 2, center = true);\n        for(i = [0:3]) {\n            rotate([0, 0, i*45])\n                cube([body_d, 1, 5], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    \n    translate([0, 0, body_h/2 + 3])\n        coil_holder();\n    \n    // Sensor coil assembly\n    translate([0, 0, 0])\n        sensor_coil();\n    \n    // Mounting flange\n    difference() {\n        cylinder(h = 8, d = body_d + 20, center = true);\n        cylinder(h = 9, d = body_d + 2, center = true);\n    }\n    \n    mounting_holes();\n    \n    // Flow straighteners at inlet/outlet\n    translate([0, 0, -body_h/2 + 2.5])\n        flow_straighteners();\n    translate([0, 0, body_h/2 - 2.5])\n        flow_straighteners();\n}\n\n// Wire exit port\ntranslate([body_d/2 - 3, 0, body_h/2 + 6])\n    rotate([90, 0, 0])\n        cylinder(h = 8, d = 5, center = false);",
    "renders": true
  },
  {
    "household_item": "lakewyrm",
    "openscad_code": "// Lakewyrm - Medium Complexity Realistic Style\n// Length ~80mm, printable without supports\n\n$fn=64;\n\nmodule body_segment(r, h, taper=1) {\n    // Tapered body segment\n    cylinder(r1=r, r2=r*taper, h=h, $fn=32);\n}\n\nmodule spine_plate(len, width, height) {\n    // Individual spine plate along back\n    difference() {\n        translate([0,0,height/2])\n            cube([len, width, height], center=true);\n        translate([0,0,height*0.8])\n            sphere(r=width*0.7);\n    }\n}\n\nmodule dorsal_spines(count, body_len) {\n    // Spiny ridge along back\n    for(i=[0:count-1]) {\n        translate([i*body_len/count- body_len/2, 0, 8])\n            rotate([0, 90, 0])\n                spine_plate(4, 2, 6);\n    }\n}\n\nmodule head() {\n    // Crocodilian head with nostrils\n    union() {\n        // Main head shape\n        scale([1.5, 1, 0.8])\n            sphere(r=12);\n        \n        // Snout extension\n        translate([15, 0, -3])\n            scale([2, 0.8, 0.5])\n                sphere(r=8);\n        \n        // Nostrils\n        translate([12, 6, -2])\n            cylinder(r=1.5, h=4);\n        translate([12, -6, -2])\n            cylinder(r=1.5, h=4);\n            \n        // Eyes\n        translate([5, 9, 5])\n            sphere(r=4);\n        translate([5, -9, 5])\n            sphere(r=4);\n    }\n}\n\nmodule tail_segment(len, r) {\n    // Flattened tail segment\n    scale([1, 1, 0.3])\n        cylinder(r=r, h=len);\n}\n\nmodule lakewyrm() {\n    // Main body assembly\n    union() {\n        // Head\n        translate([-30, 0, 0])\n            rotate([0, 0, 10])\n                head();\n        \n        // Neck segments\n        translate([-20, 0, 0])\n            body_segment(8, 10, 0.9);\n        translate([-11, 0, 0])\n            body_segment(7, 10, 0.9);\n        \n        // Main body\n        for(i=[0:5]) {\n            translate([-2 + i*8, 0, 0])\n                body_segment(6 - i*0.5, 8, 0.95);\n        }\n        \n        // Tail\n        for(i=[0:6]) {\n            translate([40 + i*6, 0, -2])\n                tail_segment(6, 5 - i*0.6);\n        }\n        \n        // Dorsal spines\n        dorsal_spines(12, 70);\n        \n        // Limbs\n        // Front flippers\n        translate([-15, 12, -8])\n            rotate([0, 0, -30])\n                scale([1, 0.3, 0.2])\n                    cylinder(r=8, h=3);\n        translate([-15, -12, -8])\n            rotate([0, 0, 30])\n                scale([1, 0.3, 0.2])\n                    cylinder(r=8, h=3);\n        \n        // Rear flippers\n        translate([15, 10, -8])\n            rotate([0, 0, -45])\n                scale([0.8, 0.3, 0.2])\n                    cylinder(r=7, h=3);\n        translate([15, -10, -8])\n            rotate([0, 0, 45])\n                scale([0.8, 0.3, 0.2])\n                    cylinder(r=7, h=3);\n    }\n}\n\n// Base for stability\ntranslate([0, 0, -12])\n    cube([80, 30, 4], center=true);\n\nlakewyrm();",
    "renders": true
  },
  {
    "household_item": "pondserpent",
    "openscad_code": "// Pond Serpent - Realistic Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions: ~80mm long, ~25mm tall\n\n$fn = 36; // Smooth curves for realistic appearance\n\nmodule body_segment(width, height, length, twist_angle) {\n    // Tapered ellipsoid segment\n    hull() {\n        translate([-length/2, 0, 0])\n            scale([1, width/2, height/2])\n                sphere(1);\n        translate([length/2, 0, 0])\n            rotate([0, 0, twist_angle])\n                scale([0.8, width/2*0.9, height/2*0.9])\n                    sphere(1);\n    }\n}\n\nmodule serpent_body() {\n    // Create 8 body segments with decreasing size\n    segments = 8;\n    segment_length = 8;\n    total_length = 0;\n    \n    for(i = [0:segments-1]) {\n        segment_width = max(12 - i*1.2, 4);\n        segment_height = max(8 - i*0.8, 3);\n        twist = i*8; // Slight twisting motion\n        \n        translate([total_length, 0, 0])\n            body_segment(segment_width, segment_height, segment_length, twist);\n        \n        total_length = total_length + segment_length*0.8;\n    }\n}\n\nmodule head() {\n    // Serpent head - elongated snout\n    translate([-15, 0, 5]) {\n        // Main head shape\n        difference() {\n            hull() {\n                translate([0, 0, 0])\n                    scale([15, 8, 6])\n                        sphere(1);\n                translate([8, 0, 0])\n                    scale([8, 4, 4])\n                        sphere(1);\n            }\n            \n            // Eye sockets\n            translate([3, 5, 2])\n                scale([1, 1.5, 0.5])\n                    sphere(2);\n            translate([3, -5, 2])\n                scale([1, 1.5, 0.5])\n                    sphere(2);\n            \n            // Nostrils\n            translate([12, 2, 1])\n                rotate([0, -30, 0])\n                    cylinder(h=3, r=0.5);\n            translate([12, -2, 1])\n                rotate([0, 30, 0])\n                    cylinder(h=3, r=0.5);\n        }\n        \n        // Eyes (slightly protruding)\n        translate([3, 5, 2])\n            scale([1.2, 1.2, 0.8])\n                sphere(1.5);\n        translate([3, -5, 2])\n            scale([1.2, 1.2, 0.8])\n                sphere(1.5);\n    }\n}\n\nmodule dorsal_fins() {\n    // Small dorsal fin ridges along back\n    for(pos = [5:15:55]) {\n        translate([pos, 0, 4]) {\n            hull() {\n                cube([1, 0.5, 1]);\n                translate([0, 0, 1])\n                    cube([0.5, 0.3, 0.5]);\n            }\n        }\n    }\n}\n\nmodule tail_fin() {\n    // Flattened tail fin for swimming\n    translate([55, 0, 0]) {\n        rotate([0, 0, 10])\n            difference() {\n                union() {\n                    // Main tail fin\n                    hull() {\n                        translate([0, 0, 0])\n                            scale([8, 1, 4])\n                                sphere(1);\n                        translate([10, 8, 0])\n                            scale([6, 0.5, 3])\n                                sphere(1);\n                        translate([10, -8, 0])\n                            scale([6, 0.5, 3])\n                                sphere(1);\n                    }\n                    \n                    // Vertical stabilizer\n                    translate([5, 0, 3])\n                        rotate([0, 0, 0])\n                            scale([3, 0.5, 4])\n                                sphere(1);\n                }\n                \n                // Cutouts for realism\n                translate([7, 0, 1])\n                    cube([6, 16, 2]);\n            }\n    }\n}\n\n// Main model assembly\nunion() {\n    // Body\n    serpent_body();\n    \n    // Head\n    head();\n    \n    // Fins\n    dorsal_fins();\n    \n    // Tail\n    tail_fin();\n    \n    // Underside flat support for printing\n    translate([0, 0, -0.5])\n        cube([70, 20, 1], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "waterhydra",
    "openscad_code": "// WaterHydra - Realistic medium-complexity model for 3D printing\n// Overall dimensions: ~75 mm tall, ~60 mm wide\n\n$fn = 32;  // Smooth curves for printing\n\n// Main body - thick central cylinder\nmodule body() {\n    difference() {\n        // Main torso\n        cylinder(h = 30, d1 = 22, d2 = 18, center = false);\n        \n        // Hollow center for material savings\n        translate([0, 0, 5])\n            cylinder(h = 25, d1 = 18, d2 = 14, center = false);\n    }\n}\n\n// Neck base - connects to body\nmodule neck_base() {\n    translate([0, 0, 30])\n        cylinder(h = 8, d1 = 18, d2 = 12, center = false);\n}\n\n// Generate one hydra neck segment\nmodule neck_segment(seg_num, total_segments = 5) {\n    height = 15;\n    base_d = 12 - (seg_num * 1.5);\n    top_d = 10 - (seg_num * 1.5);\n    \n    translate([0, 0, 38 + (seg_num * height)])\n        cylinder(h = height, d1 = base_d, d2 = top_d, center = false);\n}\n\n// Generate one hydra head\nmodule hydra_head(x_offset, y_offset, z_offset, rot_x, rot_y, rot_z) {\n    translate([x_offset, y_offset, z_offset])\n    rotate([rot_x, rot_y, rot_z]) {\n        // Head base - elongated sphere\n        scale([1.2, 1, 1])\n            sphere(d = 10);\n        \n        // Snout - tapered cylinder\n        translate([6, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 6, d1 = 6, d2 = 4, center = false);\n        \n        // Eyes - two small spheres\n        translate([4, 2.5, 2])\n            sphere(d = 2);\n        translate([4, -2.5, 2])\n            sphere(d = 2);\n        \n        // Back frill - series of small spikes\n        for (i = [0:2]) {\n            rotate([0, 0, i * 30 - 30])\n            translate([-3, 0, 4])\n                scale([0.3, 0.3, 1])\n                    sphere(d = 4);\n        }\n    }\n}\n\n// Generate four legs\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n    rotate([0, 0, angle]) {\n        // Upper leg\n        translate([0, 0, 5])\n            rotate([45, 0, 0])\n                cylinder(h = 12, d1 = 5, d2 = 4, center = false);\n        \n        // Lower leg\n        translate([0, 8.5, 8.5])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d1 = 4, d2 = 3, center = false);\n        \n        // Foot\n        translate([0, 8.5, 15])\n            rotate([90, 0, 0])\n                scale([1.5, 1, 0.5])\n                    cylinder(h = 4, d1 = 4, d2 = 4, center = false);\n    }\n}\n\n// Tail - segmented tapering structure\nmodule tail() {\n    translate([0, 0, 5])\n    rotate([90, 0, 0])\n    for (i = [0:4]) {\n        scale([1 - (i * 0.15), 1 - (i * 0.15), 1])\n            translate([0, 0, -i * 8])\n                cylinder(h = 8, d1 = 8 - (i * 1.5), d2 = 6 - (i * 1.5), center = false);\n    }\n}\n\n// Assemble the complete hydra\nunion() {\n    body();\n    neck_base();\n    \n    // Generate multiple neck segments and heads\n    // Head 1 - front center\n    hydra_head(0, 0, 75, 0, 0, 0);\n    \n    // Head 2 - left side\n    for (i = [0:4]) {\n        neck_segment(i);\n    }\n    hydra_head(-12, 8, 110, -20, -30, 20);\n    \n    // Head 3 - right side\n    translate([0, 0, 38])\n    for (i = [0:4]) {\n        neck_segment(i);\n    }\n    hydra_head(12, -8, 110, -20, 30, -20);\n    \n    // Head 4 - back center\n    translate([0, 0, 38])\n    for (i = [0:3]) {\n        neck_segment(i);\n    }\n    hydra_head(0, -15, 95, -20, 180, 0);\n    \n    // Legs\n    leg(8, 8, 45);\n    leg(-8, 8, -45);\n    leg(8, -8, 135);\n    leg(-8, -8, -135);\n    \n    // Tail\n    translate([0, 12, 5])\n        tail();\n}",
    "renders": true
  },
  {
    "household_item": "tidalwyrm",
    "openscad_code": "// Tidalwyrm - medium complexity realistic sea serpent\n// 80 mm long, 3D-printable (no overhangs >45°, 1.2 mm walls)\n\n$fn = 36;  // smooth curves\n\n// overall scale factor\nscale_factor = 80/100;  // 80 mm long\n\n// Main module\nmodule tidalwyrm() {\n    color(\"teal\")\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        head();\n        body();\n        tail();\n    }\n}\n\n// Head module\nmodule head() {\n    translate([0, 0, 5])\n    rotate([0, 0, 180])  // point forward\n    difference() {\n        // main skull\n        scale([1, 0.8, 0.7])\n        sphere(8);\n        \n        // snout taper\n        translate([0, 0, -5])\n        scale([1, 1.2, 2])\n        cube([20, 15, 10], center = true);\n        \n        // eye sockets\n        for (side = [-1, 1])\n        translate([side * 4, 4, 2])\n        sphere(2.5);\n        \n        // nostrils\n        for (side = [-1, 1])\n        translate([side * 2, 0, -6])\n        rotate([90, 0, 0])\n        cylinder(h = 4, d = 2);\n    }\n    \n    // dorsal crest\n    translate([0, 0, 7])\n    scale([1, 0.2, 1])\n    sphere(6);\n    \n    // lower jaw\n    translate([0, -2, -5])\n    rotate([30, 0, 0])\n    scale([0.9, 0.7, 0.4])\n    sphere(7);\n}\n\n// Body segments module\nmodule body() {\n    segments = 8;\n    for (i = [0:segments-1]) {\n        // exponential taper for natural look\n        r = 7.5 * pow(0.85, i);\n        z = -i * 6 - 8;\n        \n        // body ring\n        translate([0, 0, z])\n        sphere(r);\n        \n        // dorsal fin spine\n        translate([0, 0, z + r])\n        cylinder(h = r * 0.8, d1 = r * 0.3, d2 = 0.5, center = false);\n        \n        // paired fins\n        for (side = [-1, 1])\n        translate([side * r * 0.9, 0, z - r * 0.3])\n        rotate([0, 90, side * 20])\n        scale([1, 0.3, 0.2])\n        cylinder(h = r * 1.5, d1 = r * 0.4, d2 = 0, center = false);\n    }\n}\n\n// Tail module\nmodule tail() {\n    segments = 6;\n    for (i = [0:segments-1]) {\n        r = 7.5 * pow(0.75, i + 8);\n        z = -i * 5 - 56;\n        \n        // tail segments\n        translate([0, 0, z])\n        sphere(r);\n        \n        // tail fin\n        if (i == 0) {\n            translate([0, 0, z - r * 1.5])\n            rotate([0, 0, 90])\n            linear_extrude(height = 0.8, center = true)\n            polygon(points = [[0, 0], [10, 0], [5, -12]]);\n        }\n    }\n}\n\n// Generate model\ntidalwyrm();",
    "renders": true
  },
  {
    "household_item": "oceanicdrake",
    "openscad_code": "// Oceanic Drake - Realistic Style, Medium Complexity\n// Designed for 3D printing with minimal overhangs\n\n$fn = 32; // Smooth curves for better print quality\n\n// Overall dimensions\nbody_length = 50;\nbody_width = 25;\nbody_height = 20;\n\nmodule drake_body() {\n    // Main torso - elongated ellipsoid\n    scale([1.5, 1, 0.8])\n    sphere(d = body_width);\n    \n    // Tail section\n    translate([-body_length/2, 0, 0])\n    rotate([0, 0, -15])\n    cylinder(h = body_length * 0.8, d1 = body_width * 0.8, d2 = body_width * 0.2);\n}\n\nmodule drake_head() {\n    translate([body_length/2, 0, body_height/4])\n    union() {\n        // Snout\n        rotate([0, -20, 0])\n        cylinder(h = 15, d1 = 8, d2 = 5);\n        \n        // Head base\n        translate([5, 0, 2])\n        sphere(d = 12);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([8, side * 4, 5])\n            sphere(d = 3);\n            translate([9, side * 4, 5])\n            sphere(d = 2);\n        }\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([3, side * 5, 8])\n            rotate([0, side * -20, 0])\n            cylinder(h = 8, d1 = 3, d2 = 1);\n        }\n    }\n}\n\nmodule drake_wings() {\n    wing_span = 30;\n    wing_depth = 20;\n    \n    for(side = [-1, 1]) {\n        translate([0, side * body_width/2, body_height/2])\n        rotate([0, 0, side * 30])\n        rotate([10, 0, 0])\n        difference() {\n            // Main wing structure\n            translate([0, 0, 0])\n            scale([1, 1, 0.2])\n            sphere(d = wing_span);\n            \n            // Wing membrane cutouts\n            for(i = [1:3]) {\n                translate([i * 5 - 10, 0, -2])\n                scale([0.8, 0.3, 1])\n                sphere(d = wing_span - i * 5);\n            }\n        }\n        \n        // Wing fingers\n        for(i = [0:3]) {\n            translate([i * 4 - 6, side * (wing_span/2 - i * 3), 0])\n            rotate([0, 90, 0])\n            cylinder(h = wing_depth - i * 3, d = 2);\n        }\n    }\n}\n\nmodule drake_legs() {\n    for(side = [-1, 1]) {\n        translate([body_length/4, side * body_width/2, -body_height/2])\n        union() {\n            // Upper leg\n            rotate([0, 10, 0])\n            cylinder(h = 8, d = 4);\n            \n            // Lower leg\n            translate([0, 0, -8])\n            rotate([0, -20, 0])\n            cylinder(h = 10, d = 3);\n            \n            // Webbed foot\n            translate([0, 0, -18])\n            rotate([0, -90, 0])\n            difference() {\n                cube([12, 8, 2]);\n                translate([2, 2, -1])\n                cube([8, 4, 4]);\n                translate([6, -1, -1])\n                cube([2, 10, 4]);\n            }\n        }\n    }\n}\n\nmodule dorsal_fins() {\n    for(i = [0:2]) {\n        translate([-body_length/4 + i * 8, 0, body_height/2])\n        rotate([0, 0, 0])\n        linear_extrude(height = 8, scale = 0.5)\n        polygon(points=[[0,0], [4,6], [8,0]]);\n    }\n}\n\n// Assemble the drake\nunion() {\n    drake_body();\n    drake_head();\n    drake_wings();\n    drake_legs();\n    dorsal_fins();\n}",
    "renders": true
  },
  {
    "household_item": "deepseawyrm",
    "openscad_code": "// DeepSeaWyrm - Realistic Style, Medium Complexity\n// Total length ~75 mm, suitable for FDM printing with 0.4 mm nozzle\n\n$fn = 30;  // Smooth curves without overhangs\n\n// Main body\nmodule body() {\n    difference() {\n        union() {\n            // Central trunk\n            hull() {\n                translate([0,0,5])  sphere(d=12);\n                translate([15,0,0]) sphere(d=10);\n                translate([30,0,0]) sphere(d= 8);\n                translate([45,0,0]) sphere(d= 6);\n                translate([60,0,0]) sphere(d= 5);\n            }\n            \n            // Segmented rings\n            for(i=[0:5]) {\n                rotate([0,0,i*30]) \n                translate([i*12,0,0])\n                rotate_extrude()\n                    translate([6,0,0])\n                    circle(d=2);\n            }\n        }\n        \n        // Ventral groove\n        translate([-2,-7,-2])\n        cube([70,14,4]);\n    }\n}\n\n// Luminous lure\nmodule lure() {\n    translate([62,0,2])\n    difference() {\n        sphere(d=6);\n        translate([0,0,-3]) cylinder(d=6, h=6);\n    }\n    translate([65,0,2])\n    sphere(d=3);\n}\n\n// Side fins\nmodule fins() {\n    // Left fin\n    translate([20,0,-2])\n    rotate([0,-20,0])\n    scale([1,0.7,0.2])\n    sphere(d=14);\n    \n    // Right fin\n    mirror([0,1,0]) \n    translate([20,0,-2])\n    rotate([0,-20,0])\n    scale([1,0.7,0.2])\n    sphere(d=14);\n}\n\n// Gill slits\nmodule gills() {\n    for(i=[1:3]) {\n        translate([i*15-5,0,1])\n        rotate([90,0,0])\n        cylinder(d1=3, d2=1, h=10);\n    }\n}\n\n// Jaw assembly\nmodule jaw() {\n    // Upper jaw\n    translate([0,0,-5])\n    rotate([30,0,0])\n    difference() {\n        hull() {\n            sphere(d=8);\n            translate([10,0,0]) sphere(d=6);\n        }\n        translate([0,0,-5]) cube([20,20,5]);\n    }\n    \n    // Lower jaw\n    translate([5,0,-9])\n    rotate([-20,0,0])\n    difference() {\n        hull() {\n            sphere(d=6);\n            translate([7,0,0]) sphere(d=4);\n        }\n        translate([0,0,-5]) cube([15,15,5]);\n    }\n    \n    // Teeth\n    for(i=[-2:2]) {\n        translate([i*2+5,0,-7])\n        cylinder(d1=1.5, d2=0.5, h=3);\n    }\n}\n\n// Eye socket\nmodule eye() {\n    translate([5,4,0])\n    difference() {\n        sphere(d=4);\n        translate([0,2,0]) sphere(d=3);\n    }\n    \n    // Pupil\n    translate([5,5.5,0])\n    sphere(d=1.5);\n}\n\n// Tail fluke\nmodule tail() {\n    translate([60,0,0])\n    difference() {\n        hull() {\n            sphere(d=5);\n            translate([10,0,0]) sphere(d=3);\n        }\n        \n        // Cut for fluke shape\n        translate([65,0,0])\n        rotate([0,0,45])\n        cube([10,2,10], center=true);\n        \n        translate([65,0,0])\n        rotate([0,0,-45])\n        cube([10,2,10], center=true);\n    }\n}\n\n// Assemble the wyrm\nunion() {\n    body();\n    lure();\n    fins();\n    gills();\n    jaw();\n    mirror([0,1,0]) eye();\n    eye();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "coralcoil",
    "openscad_code": "// CoralCoil – medium-complexity realistic style\n// Overall height ≈ 60 mm, footprint ≈ 40 mm\n// No overhangs > 45°, walls ≥ 1 mm\n\n$fn = 36;\n\n// Base stem\nmodule stem(h = 50, r = 4) {\n    cylinder(h = h, r1 = r, r2 = r*0.8, center = false);\n}\n\n// Single branch segment (cone + sphere end)\nmodule branch_seg(len = 10, base_r = 2, tip_r = 1.2) {\n    union() {\n        cylinder(h = len, r1 = base_r, r2 = tip_r, center = false);\n        translate([0,0,len])\n            sphere(r = tip_r);\n    }\n}\n\n// Grow one branching twig with n segments\nmodule twig(n, len_step, angle_step, base_r) {\n    if (n > 0) {\n        branch_seg(len_step, base_r, base_r*0.7);\n        translate([0,0,len_step]) {\n            rotate([angle_step, 0, 0])\n                twig(n-1, len_step*0.85, angle_step, base_r*0.75);\n            rotate([-angle_step, 0, 0])\n                twig(n-1, len_step*0.85, angle_step, base_r*0.75);\n        }\n    }\n}\n\n// Crown of twigs\nmodule crown() {\n    for (a = [0:60:359]) {\n        rotate([0,0,a])\n            translate([0, 0, 50])\n                rotate([90,0,0])\n                    twig(4, 6, 25, 1.5);\n    }\n}\n\n// Thin radial feeder roots\nmodule roots() {\n    for (a = [0:45:359]) {\n        rotate([90,0,a])\n            translate([0,0,-1])\n                twig(3, 5, 20, 1.2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Thick central stem\n    stem();\n    \n    // Crown branches\n    crown();\n    \n    // Undercut-free root flare\n    roots();\n}\n\n// Optional flat base plate for adhesion\ndifference() {\n    cylinder(h = 2, r = 15, center = false);\n    translate([0,0,-1])\n        cylinder(h = 4, r = 14, center = false);\n}",
    "renders": true
  },
  {
    "household_item": "krakenwyrm",
    "openscad_code": "// Krakenwyrm – medium-complexity, realistic, 3D-printable\n// Approx. 70 mm snout-to-tail, 45 mm wide, 25 mm tall\n// All overhangs ≤ 45°; wall thickness 1.6 mm\n\n$fn = 36;      // good compromise between facets and file size\n\nmodule krakenwyrm() {\n    // Central body\n    difference() {\n        sphere(d = 30);                // main mass\n        translate([0,0,10])            // flatten underside for print\n            cube([40,40,20], center=true);\n    }\n\n    // Snout\n    translate([18,0,0])\n        rotate([0,-20,0])\n            scale([1.6,1,1])\n                cylinder(h = 15, d1 = 12, d2 = 6);\n\n    // Eyes (simple sockets + spheres)\n    for (side = [-1, 1])\n        translate([10, side*6, 3]) {\n            rotate([0,side*15,0])\n                difference() {\n                    sphere(d = 6);                    // eyeball\n                    translate([0,0,-3])\n                        cylinder(h = 7, d = 4);        // socket\n                }\n        }\n\n    // Eight tentacles in a rough spiral\n    for (i = [0:7]) {\n        assign(a = i*45 + 5*i)  // slight spiral\n            rotate([0,0,a])\n                translate([15,0,-5])\n                    tentacle();\n    }\n\n    // Dorsal ridge\n    for (z = [5:5:20])\n        translate([0,0,z])\n            scale([1.2 - z/100, 0.5, 1])\n                rotate([90,0,0])\n                    cylinder(h = 5, d = 2 + z/5);\n}\n\nmodule tentacle() {\n    // 5-segment tapering tentacle, printed lying flat\n    union() {\n        for (seg = [0:4]) {\n            assign(len = 8 - seg*0.8,\n                   dia = 5 - seg*0.7,\n                   off = seg*len*0.8)\n                translate([off,0,0])\n                    rotate([0,0,seg*10])    // gentle curve\n                        cylinder(h = len, d = dia);\n        }\n    }\n}\n\n// Build the beast\nkrakenwyrm();",
    "renders": true
  },
  {
    "household_item": "unicorn",
    "openscad_code": "// Realistic medium-complexity unicorn for 3D printing\n// Approx 80 mm tall when printed\n\n$fn = 50;  // Smooth curves\n\n// Overall scale factor\nscale(0.4) unicorn();\n\nmodule unicorn() {\n    // Body\n    union() {\n        body();\n        neck();\n        head();\n        horn();\n        mane();\n        tail();\n        \n        // Legs\n        for(i = [0,1]) {\n            mirror([i==0?0:1,0,0]) \n                translate([18, -5, -20]) leg();\n        }\n        for(i = [0,1]) {\n            mirror([i==0?0:1,0,0]) \n                translate([18, 15, -20]) leg();\n        }\n    }\n}\n\nmodule body() {\n    // Main torso\n    hull() {\n        translate([0, 0, 0]) sphere(r=25);\n        translate([0, -30, 5]) sphere(r=20);\n        translate([0, 30, 5]) sphere(r=20);\n    }\n    \n    // Chest\n    translate([0, -35, 0]) \n        scale([1.2, 1, 1.1]) sphere(r=22);\n    \n    // Hindquarters\n    translate([0, 35, 0]) \n        scale([1.3, 1.2, 1.2]) sphere(r=23);\n}\n\nmodule neck() {\n    for(i = [0:10]) {\n        hull() {\n            translate([-10 + i*2, -20 + i*1.5, 15 + i*1.8]) sphere(r=8 - i*0.3);\n            translate([-8 + i*2, -19 + i*1.5, 16 + i*1.8]) sphere(r=8 - i*0.3);\n        }\n    }\n}\n\nmodule head() {\n    // Snout\n    hull() {\n        translate([-20, -15, 35]) sphere(r=12);\n        translate([-35, -15, 30]) sphere(r=8);\n    }\n    \n    // Head base\n    hull() {\n        translate([-20, -15, 35]) sphere(r=12);\n        translate([-15, -10, 40]) sphere(r=10);\n        translate([-15, -20, 40]) sphere(r=10);\n    }\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([-18, -15 + side*8, 45]) \n            rotate([0, 20, side*20]) \n                scale([1, 0.5, 2]) \n                    cylinder(h=10, r1=4, r2=2);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-28, -15 + side*6, 33]) {\n            difference() {\n                sphere(r=3);\n                translate([1, 0, 0]) sphere(r=2.8);\n            }\n        }\n    }\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([-38, -15 + side*3, 30]) \n            rotate([90, 0, 0]) \n                cylinder(h=2, r=1.5);\n    }\n}\n\nmodule horn() {\n    // Spiral horn\n    for(i = [0:36]) {\n        rotate([0, 0, i*10]) \n            translate([-15, -15, 45 + i*0.8]) \n                scale([1 - i*0.015, 1 - i*0.015, 1]) \n                    cylinder(h=2, r1=2.5 - i*0.05, r2=2.4 - i*0.05);\n    }\n}\n\nmodule mane() {\n    // Main mane crest\n    for(i = [0:15]) {\n        hull() {\n            translate([-10 - i*1.5, -15 + sin(i*0.5)*3, 40 + i*1.5]) \n                sphere(r=4 - i*0.15);\n            translate([-12 - i*1.5, -15 + sin(i*0.5)*3, 42 + i*1.5]) \n                sphere(r=3.5 - i*0.15);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail strands\n    for(i = [0:8]) {\n        hull() {\n            translate([0, 35 - i*2, 15 - i*2]) \n                rotate([0, 0, 10 + i*5]) \n                    sphere(r=5 - i*0.3);\n            translate([0, 40 - i*3, 10 - i*2]) \n                rotate([0, 0, 15 + i*5]) \n                    sphere(r=4 - i*0.3);\n        }\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    hull() {\n        translate([0, 0, 0]) sphere(r=6);\n        translate([0, 0, -20]) sphere(r=5);\n    }\n    \n    // Lower leg\n    hull() {\n        translate([0, 0, -20]) sphere(r=5);\n        translate([0, 0, -35]) sphere(r=4);\n    }\n    \n    // Hoof\n    translate([0, 0, -42]) \n        scale([1.2, 1, 0.8]) \n            cylinder(h=10, r=5);\n}",
    "renders": true
  },
  {
    "household_item": "griffin",
    "openscad_code": "// Griffin - Realistic Medium Complexity\n// Scaled for 3D printing: ~80mm wingspan\n\n$fa = 2; $fs = 0.5;\n\nmodule body() {\n    // Main torso - oval shape\n    translate([0, 0, 10]) scale([1.5, 1, 0.8]) sphere(12);\n    \n    // Chest protrusion\n    translate([8, 0, 10]) scale([1, 0.8, 0.6]) sphere(10);\n    \n    // Rear haunches\n    translate([-12, 0, 8]) scale([1.2, 1.1, 0.9]) sphere(8);\n}\n\nmodule head() {\n    // Eagle head base\n    translate([20, 0, 22]) rotate([0, 15, 0]) scale([1.2, 0.8, 1]) sphere(8);\n    \n    // Beak\n    translate([28, 0, 22]) rotate([0, -30, 0]) \n        cylinder(h=12, r1=5, r2=0, center=true);\n    \n    // Eye sockets\n    for(y=[-3, 3]) {\n        translate([22, y, 25]) sphere(2);\n    }\n    \n    // Ear tufts\n    for(y=[-4, 4]) {\n        translate([18, y, 28]) rotate([0, 0, 45*y]) \n            cylinder(h=4, r1=2, r2=0, center=true);\n    }\n}\n\nmodule wing() {\n    // Main wing structure\n    rotate([0, 0, 20]) \n        translate([0, 0, 15]) \n        scale([1, 0.2, 0.05]) \n        sphere(25);\n    \n    // Primary feathers - 5 segments\n    for(i=[0:4]) {\n        rotate([0, 0, 20 + i*8]) \n            translate([20 + i*3, 0, 15]) \n            scale([0.8 - i*0.1, 0.1, 0.05]) \n            sphere(8);\n    }\n    \n    // Secondary feathers\n    for(i=[0:2]) {\n        rotate([0, 0, 10 - i*5]) \n            translate([10 - i*2, 0, 15]) \n            scale([0.6 - i*0.1, 0.1, 0.05]) \n            sphere(6);\n    }\n}\n\nmodule legs() {\n    // Front eagle legs\n    for(side=[-1, 1]) {\n        translate([8, side*6, 5]) {\n            // Upper leg\n            cylinder(h=8, r=3, center=false);\n            // Lower leg\n            translate([0, 0, -8]) cylinder(h=8, r=2.5, center=false);\n            // Foot/talons\n            translate([0, 0, -16]) {\n                sphere(3);\n                for(t=[-1, 0, 1]) {\n                    rotate([0, t*20, 0]) \n                        translate([2, t*1.5, -2]) \n                        cylinder(h=4, r=0.5, center=true);\n                }\n            }\n        }\n    }\n    \n    // Rear lion legs\n    for(side=[-1, 1]) {\n        translate([-8, side*5, 4]) {\n            // Thigh\n            cylinder(h=10, r=4, center=false);\n            // Shin\n            translate([0, 0, -10]) cylinder(h=8, r=3, center=false);\n            // Paw\n            translate([0, 0, -18]) {\n                sphere(3.5);\n                // Toes\n                for(t=[-1, 0, 1]) {\n                    rotate([0, 0, t*30]) \n                        translate([2, t*1.5, -2]) \n                        cylinder(h=3, r=0.6, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Lion tail\n    translate([-20, 0, 10]) rotate([0, 0, -30]) {\n        // Tail segments getting smaller\n        for(i=[0:4]) {\n            translate([-i*3, 0, -i*1.5]) \n                scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15]) \n                sphere(4 - i*0.5);\n        }\n        \n        // Tail tuft\n        translate([-15, 0, -8]) sphere(3);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Left wing\n    mirror([0, 1, 0]) wing();\n    \n    // Right wing\n    wing();\n    \n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "pegasus",
    "openscad_code": "// Pegasus - Realistic Style, Medium Complexity\n// Designed for 3D printing with no steep overhangs\n\n$fn = 24; // Smooth curves for printing\n\n// Main module to create the pegasus\nmodule pegasus() {\n    union() {\n        // Body\n        body();\n        \n        // Head and neck\n        translate([0, 15, 10]) rotate([0, 20, 0]) head();\n        \n        // Wings\n        translate([-5, 0, 15]) rotate([0, 0, -30]) wing();\n        translate([5, 0, 15]) mirror([1, 0, 0]) rotate([0, 0, -30]) wing();\n        \n        // Legs\n        translate([-8, -10, 0]) leg();\n        translate([8, -10, 0]) mirror([1, 0, 0]) leg();\n        translate([-6, 12, 0]) rotate([0, 0, 5]) leg();\n        translate([6, 12, 0]) mirror([1, 0, 0]) rotate([0, 0, -5]) leg();\n        \n        // Tail\n        translate([0, -20, 5]) tail();\n    }\n}\n\n// Horse body\nmodule body() {\n    // Main torso\n    hull() {\n        translate([0, 0, 8]) sphere(8);\n        translate([0, 10, 8]) sphere(6);\n        translate([0, -10, 8]) sphere(6);\n    }\n    \n    // Chest\n    translate([0, 5, 2]) rotate([90, 0, 0]) cylinder(h=8, r1=6, r2=5);\n    \n    // Belly\n    translate([0, 0, 0]) cube([16, 20, 2], center=true);\n}\n\n// Head with neck\nmodule head() {\n    // Neck\n    translate([0, 0, 0]) rotate([90, 0, 0]) cylinder(h=12, r1=3, r2=4);\n    \n    // Head\n    translate([0, 12, 0]) rotate([90, 0, 0]) cylinder(h=10, r1=4, r2=2);\n    \n    // Snout\n    translate([0, 20, 0]) sphere(3);\n    \n    // Ears\n    translate([-2, 15, 4]) rotate([0, 0, -30]) cylinder(h=4, r1=1, r2=0.5);\n    translate([2, 15, 4]) rotate([0, 0, 30]) cylinder(h=4, r1=1, r2=0.5);\n    \n    // Mane\n    for(i = [0:2:8]) {\n        translate([0, 12+i, 2]) rotate([0, 0, sin(i*20)*10]) \n        cylinder(h=3, r1=0.8, r2=0.5);\n    }\n}\n\n// Wing with feathers\nmodule wing() {\n    // Main wing bone\n    translate([0, 0, 0]) rotate([0, 0, 90]) cylinder(h=15, r=1.2);\n    \n    // Wing membrane\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([0, 0, 0]) sphere(1.5);\n            translate([-12, 0, 3]) sphere(2);\n            translate([-10, 0, 8]) sphere(1.5);\n            translate([-5, 0, 10]) sphere(1);\n        }\n        \n        // Cut holes for feather effect\n        for(i = [0:3:12]) {\n            translate([-i, 0, i/2]) sphere(1.2);\n        }\n    }\n    \n    // Primary feathers\n    for(i = [0:3:12]) {\n        translate([-i-2, 0, i/2+1]) rotate([0, 45-i*2, 0]) \n        scale([1, 0.3, 3]) sphere(1);\n    }\n}\n\n// Leg with hoof\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 6]) rotate([90, 0, 0]) cylinder(h=8, r=2);\n    \n    // Lower leg\n    translate([0, 0, 2]) rotate([100, 0, 0]) cylinder(h=6, r=1.5);\n    \n    // Hoof\n    translate([0, -1, 0]) rotate([0, 0, 0]) cylinder(h=2, r=1.8, r1=1.8, r2=1.2);\n    \n    // Knee joint\n    translate([0, 0, 6]) sphere(2.2);\n}\n\n// Flowing tail\nmodule tail() {\n    // Tail base\n    translate([0, 0, 5]) rotate([90, 0, 0]) cylinder(h=3, r=2);\n    \n    // Tail strands\n    for(i = [0:15]) {\n        rotate([0, 0, sin(i*20)*30]) \n        translate([sin(i*15)*2, -i-3, cos(i*15)*2]) \n        cylinder(h=2, r=0.8, center=true);\n    }\n    \n    // Tail tip\n    translate([0, -18, 0]) sphere(1.5);\n}\n\n// Scale and generate pegasus\npegasus();",
    "renders": true
  },
  {
    "household_item": "centaur",
    "openscad_code": "// Centaur - Medium complexity realistic style\n// Designed for 3D printing with minimal overhangs\n\n$fn = 32;\n\n// Overall scale\nscale_factor = 0.3;\n\n// Horse body dimensions\nhorse_body_length = 60;\nhorse_body_height = 35;\nhorse_body_width = 25;\n\n// Human torso dimensions\ntorso_length = 25;\ntorso_width = 15;\ntorso_depth = 10;\n\n// Leg dimensions\nleg_radius = 3;\nupper_leg_length = 20;\nlower_leg_length = 15;\n\n// Head dimensions\nhead_radius = 8;\nneck_length = 12;\nneck_radius = 4;\n\n// Arm dimensions\narm_upper_length = 15;\narm_lower_length = 12;\nhand_radius = 3;\n\nmodule horse_body() {\n    // Main horse torso\n    union() {\n        // Body\n        translate([0, 0, horse_body_height/2])\n            scale([1, 0.8, 1])\n                sphere(d = horse_body_length);\n        \n        // Rump\n        translate([-horse_body_length/3, 0, horse_body_height/3])\n            rotate([90, 0, 0])\n                cylinder(h = horse_body_length/2, r1 = horse_body_width/2, r2 = 0);\n        \n        // Chest\n        translate([horse_body_length/3, 0, horse_body_height/3])\n            rotate([-90, 0, 0])\n                cylinder(h = horse_body_length/3, r1 = horse_body_width/2, r2 = 0);\n    }\n}\n\nmodule horse_leg(position, angle) {\n    translate(position)\n        rotate([0, angle, 0]) {\n            // Upper leg\n            translate([0, 0, -upper_leg_length/2])\n                cylinder(h = upper_leg_length, r = leg_radius);\n            \n            // Lower leg\n            translate([0, 0, -upper_leg_length - lower_leg_length/2])\n                cylinder(h = lower_leg_length, r = leg_radius * 0.8);\n            \n            // Hoof\n            translate([0, 0, -upper_leg_length - lower_leg_length - 3])\n                cylinder(h = 3, r1 = leg_radius * 0.8, r2 = leg_radius * 0.6);\n        }\n}\n\nmodule human_torso() {\n    translate([horse_body_length/2, 0, horse_body_height - 5]) {\n        // Torso\n        union() {\n            translate([0, 0, torso_length/2])\n                scale([1, 0.7, 1.2])\n                    cube([torso_width, torso_depth, torso_length], center = true);\n            \n            // Chest\n            translate([0, 0, torso_length])\n                sphere(d = torso_width * 1.2);\n        }\n    }\n}\n\nmodule neck_and_head() {\n    translate([horse_body_length/2 + torso_width/2, 0, horse_body_height + torso_length]) {\n        // Neck\n        union() {\n            translate([0, 0, neck_length/2])\n                cylinder(h = neck_length, r = neck_radius);\n            \n            // Head\n            translate([0, 0, neck_length + head_radius])\n                sphere(r = head_radius);\n        }\n    }\n}\n\nmodule arm(position, side) {\n    translate(position)\n        mirror([side, 0, 0]) {\n            // Shoulder\n            translate([0, 0, 0])\n                sphere(r = 4);\n            \n            // Upper arm\n            translate([0, 0, -arm_upper_length/2])\n                cylinder(h = arm_upper_length, r = 3);\n            \n            // Elbow\n            translate([0, 0, -arm_upper_length])\n                sphere(r = 2.5);\n            \n            // Lower arm\n            translate([0, 0, -arm_upper_length - arm_lower_length/2])\n                cylinder(h = arm_lower_length, r = 2.5);\n            \n            // Hand\n            translate([0, 0, -arm_upper_length - arm_lower_length - 3])\n                sphere(r = hand_radius);\n        }\n}\n\nmodule tail() {\n    translate([-horse_body_length/2 - 5, 0, horse_body_height/2])\n        rotate([0, 20, 0])\n            for(i = [0:4]) {\n                rotate([0, 0, i * 15])\n                    translate([0, 0, -i * 2])\n                        cylinder(h = 15, r1 = 3 - i * 0.5, r2 = 2 - i * 0.3);\n            }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Horse body\n        horse_body();\n        \n        // Human torso\n        human_torso();\n        \n        // Neck and head\n        neck_and_head();\n        \n        // Horse legs\n        horse_leg([horse_body_length/3, horse_body_width/2, 0], 10);\n        horse_leg([horse_body_length/3, -horse_body_width/2, 0], -10);\n        horse_leg([-horse_body_length/3, horse_body_width/2, 0], 5);\n        horse_leg([-horse_body_length/3, -horse_body_width/2, 0], -5);\n        \n        // Arms\n        arm([horse_body_length/2 + torso_width/2, torso_depth/2 + 3, horse_body_height + torso_length - 5], 1);\n        arm([horse_body_length/2 + torso_width/2, -torso_depth/2 - 3, horse_body_height + torso_length - 5], -1);\n        \n        // Tail\n        tail();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "minotaur",
    "openscad_code": "// Realistic Minotaur - Medium Complexity\n// Height: 70mm, built for 3D printing with 2mm walls and no steep overhangs\n\nmodule torso() {\n    // Chest block\n    difference() {\n        translate([0, 0, 35]) cube([25, 20, 30], center=true);\n        // Hollow torso\n        translate([0, 0, 35]) cube([21, 16, 28], center=true);\n    }\n}\n\nmodule abs() {\n    // Six-pack abs\n    for (i = [1:3]) {\n        translate([0, 11, 20 + i*5]) cube([18, 1, 3], center=true);\n    }\n}\n\nmodule head() {\n    // Bull head base\n    difference() {\n        translate([0, 0, 55]) scale([1.2, 1, 1.3]) sphere(15);\n        // Eye sockets\n        translate([8, 12, 57]) sphere(4);\n        translate([-8, 12, 57]) sphere(4);\n    }\n    \n    // Snout\n    translate([0, 17, 51]) scale([0.8, 1.5, 0.8]) sphere(8);\n    \n    // Nostrils\n    translate([4, 23, 49]) rotate([0, 90, 0]) cylinder(h=3, r=2, $fn=8);\n    translate([-4, 23, 49]) rotate([0, 90, 0]) cylinder(h=3, r=2, $fn=8);\n    \n    // Horns\n    translate([10, 0, 65]) rotate([0, 20, -30]) cylinder(h=12, r1=6, r2=3, $fn=6);\n    translate([-10, 0, 65]) rotate([0, 20, 30]) cylinder(h=12, r1=6, r2=3, $fn=6);\n}\n\nmodule arm(side) {\n    // Shoulder joint\n    translate([side*15, 0, 50]) sphere(5);\n    \n    // Upper arm\n    translate([side*20, 0, 40]) rotate([0, 0, side*15]) cylinder(h=20, r=4, $fn=8);\n    \n    // Forearm\n    translate([side*30, 0, 25]) rotate([0, 0, side*15]) cylinder(h=20, r=3.5, $fn=8);\n    \n    // Fist\n    translate([side*32, 0, 15]) sphere(4);\n}\n\nmodule leg(side) {\n    // Hip joint\n    translate([side*7, 0, 15]) sphere(6);\n    \n    // Thigh\n    translate([side*7, 0, 8]) cylinder(h=15, r=5, $fn=8);\n    \n    // Calf\n    translate([side*7, 0, -2]) cylinder(h=15, r=4, $fn=8);\n    \n    // Hoof (foot)\n    translate([side*7, 0, -10]) scale([1.2, 0.8, 0.5]) cylinder(h=5, r=4, $fn=8);\n}\n\nmodule tail() {\n    // Tail segments\n    for (i = [0:4]) {\n        translate([0, -12 + i*3, 18 - i*2]) rotate([0, -10*i, 0]) \n            scale([0.8, 0.8, 0.8]) sphere(3);\n    }\n}\n\n// Main assembly\nunion() {\n    torso();\n    abs();\n    head();\n    \n    arm(1);  // Right arm\n    arm(-1); // Left arm\n    \n    leg(1);  // Right leg\n    leg(-1); // Left leg\n    \n    tail();\n}\n\n// Base platform for printing\ntranslate([0, 0, -15]) cube([40, 30, 3], center=true);",
    "renders": true
  },
  {
    "household_item": "sphinx",
    "openscad_code": "// Sphinx model - realistic medium complexity\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n$fn = 32;\n\n// Main body\nmodule sphinx_body() {\n    // Base platform\n    cube([35, 60, 5], center=true);\n    \n    // Main torso\n    translate([0, 0, 7.5])\n        cube([25, 30, 15], center=true);\n    \n    // Chest area\n    translate([0, 15, 12])\n        cube([20, 10, 8], center=true);\n    \n    // Rear legs\n    translate([-8, -20, 5])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=6, center=true);\n    translate([8, -20, 5])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=6, center=true);\n    \n    // Front paws\n    translate([-10, 25, 2.5])\n        cube([5, 8, 5], center=true);\n    translate([10, 25, 2.5])\n        cube([5, 8, 5], center=true);\n}\n\n// Head with human features\nmodule sphinx_head() {\n    // Head base\n    translate([0, 35, 20])\n        cube([12, 15, 12], center=true);\n    \n    // Nose\n    translate([0, 42, 24])\n        cube([2, 4, 3], center=true);\n    \n    // Eyes - using difference for sockets\n    translate([-3, 40, 26])\n        sphere(r=1.5);\n    translate([3, 40, 26])\n        sphere(r=1.5);\n    \n    // Eye sockets\n    difference() {\n        translate([0, 35, 20])\n            cube([12, 15, 12], center=true);\n        translate([-3, 40, 26.5])\n            sphere(r=1.8);\n        translate([3, 40, 26.5])\n            sphere(r=1.8);\n    }\n    \n    // Headdress\n    translate([0, 35, 32])\n        cube([18, 20, 8], center=true);\n}\n\n// Wings\nmodule sphinx_wings() {\n    // Left wing\n    translate([-20, 0, 15])\n        rotate([0, 0, -20])\n        cube([20, 3, 8], center=true);\n    \n    // Right wing\n    translate([20, 0, 15])\n        rotate([0, 0, 20])\n        cube([20, 3, 8], center=true);\n    \n    // Wing details\n    for(i = [1:3]) {\n        translate([-20 - i*3, 0, 15 + i*2])\n            rotate([0, 0, -20])\n            cube([15, 2, 1], center=true);\n        translate([20 + i*3, 0, 15 + i*2])\n            rotate([0, 0, 20])\n            cube([15, 2, 1], center=true);\n    }\n}\n\n// Tail\nmodule sphinx_tail() {\n    translate([0, -35, 7])\n        rotate([0, 0, 20])\n        cube([5, 15, 5], center=true);\n}\n\n// Assemble the sphinx\nunion() {\n    sphinx_body();\n    sphinx_head();\n    sphinx_wings();\n    sphinx_tail();\n}",
    "renders": true
  },
  {
    "household_item": "manticore",
    "openscad_code": "// Realistic Manticore - Medium Complexity\n// A winged lion with scorpion tail and human face\n\n// Overall scale\nscaleFactor = 0.8;\n\n// Lion body\nmodule lionBody() {\n    // Main torso\n    translate([0, 0, 10]) \n        scale([1.2, 0.8, 0.9])\n        sphere(r=15, $fn=32);\n    \n    // Chest\n    translate([10, 0, 5])\n        scale([1.0, 0.7, 0.6])\n        sphere(r=12, $fn=24);\n}\n\n// Lion head\nmodule lionHead() {\n    // Skull base\n    translate([-20, 0, 22])\n        scale([1.2, 1.0, 1.1])\n        sphere(r=10, $fn=24);\n    \n    // Snout\n    translate([-30, 0, 20])\n        scale([0.6, 0.5, 0.4])\n        sphere(r=8, $fn=16);\n    \n    // Human face overlay\n    translate([-28, 0, 25])\n        scale([0.3, 0.8, 0.6])\n        cube([8, 12, 10], center=true);\n}\n\n// Mane\nmodule mane() {\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n        translate([-20, 0, 25])\n            scale([0.1, 0.8, 0.1])\n            cylinder(h=5, r=4, $fn=6);\n    }\n}\n\n// Legs\nmodule legs() {\n    // Front legs\n    for(side=[-1, 1]) {\n        translate([5, side*8, 0])\n            rotate([0, 10*side, 0])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=15, r=4, $fn=12);\n        \n        // Paws\n        translate([5, side*8, -7])\n            scale([1.2, 1.2, 0.5])\n            sphere(r=4, $fn=12);\n    }\n    \n    // Rear legs\n    for(side=[-1, 1]) {\n        translate([-15, side*7, 0])\n            rotate([0, -10*side, 0])\n            scale([0.9, 0.9, 1.1])\n            cylinder(h=14, r=4, $fn=12);\n        \n        // Paws\n        translate([-15, side*7, -6])\n            scale([1.2, 1.2, 0.5])\n            sphere(r=4, $fn=12);\n    }\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    translate([-5, 10, 18])\n        rotate([0, -30, 0])\n        scale([0.1, 1.5, 1])\n        cube([2, 20, 15]);\n    \n    // Wing support\n    translate([-5, 18, 18])\n        rotate([0, -30, 20])\n        scale([0.1, 1.2, 0.8])\n        cube([1, 15, 10]);\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n    translate([-5, 10, 18])\n        rotate([0, -30, 0])\n        scale([0.1, 1.5, 1])\n        cube([2, 20, 15]);\n}\n\n// Scorpion tail\nmodule scorpionTail() {\n    // Tail segments\n    translate([-25, 0, 15])\n        rotate([0, 0, -30])\n        scale([0.3, 0.3, 1])\n        cylinder(h=20, r=3, $fn=8);\n    \n    // Curved section\n    translate([-35, 0, 22])\n        rotate([0, 20, -45])\n        scale([0.25, 0.25, 0.8])\n        cylinder(h=15, r=2.5, $fn=8);\n    \n    // Stinger\n    translate([-42, 0, 30])\n        rotate([0, 45, -60])\n        scale([0.2, 0.2, 1])\n        cylinder(h=8, r1=2, r2=0, $fn=6);\n}\n\n// Assembly\nscale(scaleFactor)\nunion() {\n    lionBody();\n    lionHead();\n    mane();\n    legs();\n    wings();\n    scorpionTail();\n}",
    "renders": true
  },
  {
    "household_item": "hippogriff",
    "openscad_code": "// Hippogriff - Medium Complexity Realistic Style\n// Designed for 3D printing with proper wall thickness\n\n// Overall scale\nscale_factor = 0.4;\n\n// Main body module\nmodule hippogriff() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Body\n        body();\n        \n        // Head and neck\n        translate([0, 25, 15]) rotate([0, -20, 0]) head();\n        \n        // Wings\n        translate([-20, 10, 20]) rotate([0, 0, -30]) wing();\n        translate([20, 10, 20]) rotate([0, 0, 30]) mirror([1,0,0]) wing();\n        \n        // Legs\n        translate([-12, -15, 0]) front_leg();\n        translate([12, -15, 0]) mirror([1,0,0]) front_leg();\n        translate([-8, -25, 0]) back_leg();\n        translate([8, -25, 0]) mirror([1,0,0]) back_leg();\n        \n        // Tail\n        translate([0, -35, 8]) tail();\n    }\n}\n\n// Body of the hippogriff (eagle/lion hybrid)\nmodule body() {\n    // Main torso\n    difference() {\n        union() {\n            // Lion body base\n            scale([1.2, 1.5, 0.8]) sphere(r=15, $fn=20);\n            // Eagle chest\n            translate([0, 5, 5]) scale([0.8, 0.9, 1.2]) sphere(r=12, $fn=20);\n        }\n        // Hollow for printing\n        translate([0, 0, -5]) scale([0.9, 0.9, 0.9]) sphere(r=14, $fn=20);\n    }\n}\n\n// Head with eagle beak and lion mane\nmodule head() {\n    union() {\n        // Skull base\n        sphere(r=10, $fn=20);\n        \n        // Beak\n        translate([0, 12, -2]) rotate([30, 0, 0]) \n            scale([0.4, 1.2, 0.4]) cylinder(h=15, r1=5, r2=0, $fn=6);\n        \n        // Eyes\n        translate([-4, 8, 3]) sphere(r=2, $fn=10);\n        translate([4, 8, 3]) sphere(r=2, $fn=10);\n        \n        // Ears\n        translate([-6, -3, 8]) rotate([30, 0, -20]) \n            scale([0.5, 0.3, 1]) cylinder(h=6, r=3, $fn=6);\n        translate([6, -3, 8]) rotate([30, 0, 20]) \n            scale([0.5, 0.3, 1]) cylinder(h=6, r=3, $fn=6);\n        \n        // Mane feathers/lion mane\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) \n            translate([8, -5, 0]) rotate([0, 90, 0])\n                scale([0.3, 0.1, 1]) cylinder(h=8, r=2, $fn=4);\n        }\n    }\n}\n\n// Wing with feathers\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing structure\n            rotate([0, 0, 90]) \n            linear_extrude(height=2) polygon(points=[\n                [0,0], [25,5], [45,0], [55,10], [50,20], \n                [35,15], [20,25], [10,15], [0,10]\n            ]);\n            \n            // Wing bones\n            for(i = [0:3]) {\n                translate([i*12+5, i*3, -1]) rotate([0, 0, -20+i*5])\n                    scale([0.8, 1, 0.3]) cylinder(h=15, r1=3, r2=1, $fn=8);\n            }\n        }\n        // Hollow for printing\n        translate([0, 0, -5]) scale([0.8, 0.8, 0.5]) \n            rotate([0, 0, 90]) \n            linear_extrude(height=10) polygon(points=[\n                [2,2], [23,6], [43,2], [52,10], [48,18], \n                [33,13], [18,23], [8,13], [2,8]\n            ]);\n    }\n}\n\n// Front leg (lion paw)\nmodule front_leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 5]) rotate([0, 10, 0])\n            cylinder(h=20, r1=4, r2=3, $fn=8);\n        \n        // Lower leg\n        translate([0, 15, -5]) rotate([0, 20, 0])\n            cylinder(h=15, r1=3, r2=2.5, $fn=8);\n        \n        // Paw\n        translate([0, 25, -10]) sphere(r=4, $fn=12);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i*2, 27, -12]) rotate([0, 30, 0])\n                scale([0.5, 0.5, 1]) cylinder(h=3, r=1.5, $fn=6);\n        }\n    }\n}\n\n// Back leg (eagle talon)\nmodule back_leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 5]) rotate([0, -10, 0])\n            cylinder(h=18, r1=3.5, r2=3, $fn=8);\n        \n        // Lower leg\n        translate([0, 12, -3]) rotate([0, -20, 0])\n            cylinder(h=12, r1=3, r2=2, $fn=8);\n        \n        // Foot\n        translate([0, 20, -8]) sphere(r=3, $fn=10);\n        \n        // Talons\n        for(i = [-1:0:1]) {\n            translate([i*1.5, 22, -10]) rotate([0, -30, i*15])\n                scale([0.3, 0.3, 1.5]) cylinder(h=4, r=0.8, r2=0.3, $fn=6);\n        }\n    }\n}\n\n// Tail with feathers\nmodule tail() {\n    union() {\n        // Tail base\n        rotate([0, 30, 0]) cylinder(h=20, r1=4, r2=2, $fn=8);\n        \n        // Tail feathers\n        for(i = [0:15:75]) {\n            rotate([0, 0, i-37.5]) {\n                translate([0, -20, 0]) rotate([0, 90, 0])\n                    scale([0.5, 0.1, 2]) cylinder(h=15, r=3, $fn=4);\n            }\n        }\n    }\n}\n\n// Generate the complete model\nhippogriff();",
    "renders": true
  },
  {
    "household_item": "kraken",
    "openscad_code": "// Kraken model for 3D printing\n// Medium complexity realistic style\n\n$fn=32;\n\n// Main body\nmodule body() {\n    // Central head/body\n    union() {\n        // Main head\n        translate([0,0,20])\n            scale([1.5,1.2,1])\n            sphere(15);\n        \n        // Eye ridges\n        translate([-8,8,30])\n            rotate([0,30,0])\n            cylinder(h=5, r1=6, r2=3);\n        translate([8,8,30])\n            rotate([0,-30,0])\n            cylinder(h=5, r1=6, r2=3);\n            \n        // Beak\n        translate([0,-12,15])\n            rotate([30,0,0])\n            cylinder(h=8, r1=5, r2=0);\n    }\n}\n\n// Eye\nmodule eye() {\n    difference() {\n        sphere(3);\n        translate([0,0,-1])\n            sphere(2.2);\n    }\n}\n\n// Tentacle segment\nmodule tentacle_segment(length, radius) {\n    // Tapered cylinder\n    cylinder(h=length, r1=radius, r2=radius*0.8);\n}\n\n// Full tentacle\nmodule tentacle(length, radius, segments, curl) {\n    for(i=[0:segments-1]) {\n        rotate([curl*i,0,0])\n            translate([0,0,i*length/segments])\n                tentacle_segment(length/segments, radius*(1-i/segments/2));\n    }\n}\n\n// Suction cups\nmodule suction_cups(tentacle_radius, length) {\n    for(i=[1:5:length-5]) {\n        translate([0,tentacle_radius+1,i])\n            rotate([90,0,0])\n                cylinder(h=1, r1=2, r2=1.8);\n    }\n}\n\n// Full kraken\nmodule kraken() {\n    union() {\n        // Body\n        body();\n        \n        // Eyes\n        translate([-8,8,33])\n            color(\"black\")\n            eye();\n        translate([8,8,33])\n            color(\"black\")\n            eye();\n            \n        // 8 tentacles\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([20*cos(i*45),20*sin(i*45),5])\n                    rotate([90,0,0])\n                        tentacle(35, 4, 8, 15);\n        }\n        \n        // Suction cups on tentacles\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([20*cos(i*45),20*sin(i*45),5])\n                    rotate([90,0,0])\n                        suction_cups(4, 35);\n        }\n    }\n}\n\n// Make printable\nscale(1.5)\n    kraken();",
    "renders": true
  },
  {
    "household_item": "leviathan",
    "openscad_code": "// Leviathan Sea Dragon - Medium Complexity\n// Realistic style with 3D-printable overhang-free design\n\n// Main parameters\nscale_factor = 0.35;\nbody_length = 80 * scale_factor;\nbody_height = 25 * scale_factor;\nsegment_count = 8;\n\n// Head module\nmodule head() {\n    // Main skull structure\n    difference() {\n        union() {\n            // Upper jaw\n            translate([0, 0, body_height/2])\n                cube([body_length/3, body_length/4, body_height/2], center=true);\n            \n            // Snout extension\n            translate([body_length/4, 0, body_height/2])\n                cube([body_length/6, body_length/6, body_height/3], center=true);\n        }\n        \n        // Mouth cavity\n        translate([body_length/6, 0, body_height/2 - body_height/4])\n            cube([body_length/4, body_length/3.5, body_height/4], center=true);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([body_length/12, side * body_length/8, body_height/2 + body_height/8])\n                sphere(body_height/6);\n        }\n    }\n    \n    // Teeth\n    for(i = [0:3]) {\n        translate([-body_length/12 + i*body_length/12, body_length/8, body_height/2 - body_height/6])\n            cylinder(h=body_height/8, d1=body_height/20, d2=0, center=false);\n        translate([-body_length/12 + i*body_length/12, -body_length/8, body_height/2 - body_height/6])\n            cylinder(h=body_height/8, d1=body_height/20, d2=0, center=false);\n    }\n}\n\n// Body segment module\nmodule body_segment(pos, width, height, angle) {\n    translate([pos, 0, 0])\n    rotate([angle, 0, 0])\n    scale([1 - pos/body_length, 1 - pos/(body_length*2), 1 - pos/(body_length*2)])\n    cube([width, width*1.2, height], center=true);\n}\n\n// Fin module\nmodule fin(x_pos, y_side, angle) {\n    translate([x_pos, y_side * body_length/6, body_height/4])\n    rotate([0, 0, angle * y_side])\n    linear_extrude(height=body_height/10)\n    polygon(points=[\n        [0, 0],\n        [body_length/8, body_height/4],\n        [body_length/12, body_height/3],\n        [0, body_height/4]\n    ]);\n}\n\n// Tail segment\nmodule tail_segment(pos, width) {\n    translate([pos, 0, 0])\n    scale([1 - pos/body_length, 1 - pos/body_length, 1 - pos/body_length])\n    cylinder(h=body_length/10, d1=width, d2=width*0.7, center=true);\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([-body_length/2, 0, 0])\n    head();\n    \n    // Body segments\n    for(i = [0:segment_count-1]) {\n        pos = -body_length/2 + body_length/segment_count * (i+1);\n        body_segment(pos, body_length/4, body_height/2, -5 * sin(i*45));\n    }\n    \n    // Fins\n    for(i = [0:3]) {\n        x = -body_length/3 + i * body_length/4;\n        fin(x, 1, 30);\n        fin(x, -1, -30);\n    }\n    \n    // Tail\n    for(i = [0:4]) {\n        pos = body_length/3 + i * body_length/12;\n        tail_segment(pos, body_length/4 - i*body_length/20);\n    }\n    \n    // Dorsal fin\n    translate([0, 0, body_height/2])\n    for(i = [0:5]) {\n        translate([i*body_length/10, 0, i*body_height/20])\n        cube([body_length/20, body_length/30, body_height/10], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "salamander",
    "openscad_code": "// Realistic 3D-printable salamander – medium complexity\n// ~80 mm long, low-profile for minimal supports\n\n$fn = 20;\n\nmodule body() {\n    // main torso – stretched sphere hull for organic back\n    hull() {\n        translate([-30,0,0]) sphere(10, $fn=30);\n        translate([ 30,0,0]) sphere( 7, $fn=30);\n    }\n}\n\nmodule head() {\n    // blunt triangular head\n    difference() {\n        hull() {\n            translate([32,0,0]) sphere(7, $fn=30);\n            translate([45,-6,-1]) sphere(3, $fn=20);\n            translate([45, 6,-1]) sphere(3, $fn=20);\n        }\n        // mouth groove\n        translate([41,-7,-2]) cube([8,14,1.5]);\n    }\n}\n\nmodule eye() {\n    // protruding eye with pupil\n    union() {\n        sphere(3.5);\n        translate([0,0,-1.5]) sphere(2);\n    }\n}\n\nmodule eyes() {\n    // left / right pair\n    translate([40, 5, 3]) eye();\n    translate([40,-5, 3]) mirror([0,1,0]) eye();\n}\n\nmodule limb(len=12, dia=3.5) {\n    // single leg – no steep overhangs\n    union() {\n        // upper arm\n        rotate([0,0,15]) cylinder(h = len, r1 = dia, r2 = dia*0.8);\n        // lower arm\n        translate([0,0,len]) rotate([0,0,-30])\n            cylinder(h = len*0.8, r1 = dia*0.8, r2 = dia*0.6);\n        // rounded hand\n        translate([0,0,len+len*0.8]) sphere(dia*0.6);\n    }\n}\n\nmodule limbs() {\n    // four legs with slight outward splay\n    // front pair\n    translate([20, 8, -2]) rotate([0,0,-45]) limb();\n    translate([20,-8, -2]) rotate([0,0, 45]) mirror([0,1,0]) limb();\n    // rear pair\n    translate([-15, 7, -2]) rotate([0,0, 45]) limb();\n    translate([-15,-7, -2]) rotate([0,0,-45]) mirror([0,1,0]) limb();\n}\n\nmodule tail() {\n    // tapered tail, 5 segments for gentle curve\n    for(i=[1:5]) {\n        translate([-30-i*8,0,0])\n        rotate([0,0,-i*5])\n        scale([1,1-i*0.08,1-i*0.08])\n        sphere(9-0.8*i, $fn=20);\n    }\n}\n\nmodule spots() {\n    // small raised bumps along back for texture\n    for(p=[[-25,0,10],[-10,0,9],[10,0,7],[25,0,5]])\n        translate(p) sphere(1.2);\n}\n\n// assemble\nunion() {\n    body();\n    head();\n    eyes();\n    limbs();\n    tail();\n    spots();\n}",
    "renders": true
  },
  {
    "household_item": "fenrir",
    "openscad_code": "// Fenrir Wolf - Medium Complexity Realistic Style\n// Approx 80mm long, 45mm tall - 3D printable\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 0.6])\n            sphere(d=40);\n        \n        // Chest\n        translate([-15, 0, 12])\n            scale([0.8, 0.6, 0.5])\n            sphere(d=35);\n        \n        // Rear hips\n        translate([15, 0, 12])\n            scale([0.6, 0.7, 0.5])\n            sphere(d=30);\n    }\n}\n\n// Head with snout\nmodule head() {\n    union() {\n        // Skull\n        translate([-25, 0, 22])\n            scale([0.8, 0.7, 0.7])\n            sphere(d=30);\n        \n        // Snout\n        translate([-38, 0, 18])\n            rotate([0, -10, 0])\n            scale([1.2, 0.6, 0.5])\n            cylinder(h=25, d1=20, d2=15);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([-30, side*12, 30])\n                rotate([side*15, 0, side*30])\n                scale([0.3, 0.1, 0.8])\n                cylinder(h=15, d=15);\n        }\n    }\n}\n\n// Leg module\nmodule leg(length, angle) {\n    rotate([0, 0, angle])\n    translate([0, 0, 5])\n    union() {\n        // Upper leg\n        translate([0, 0, length/4])\n            rotate([90, 0, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=length/2, d=12);\n        \n        // Lower leg\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n            scale([0.4, 0.4, 1])\n            cylinder(h=length/2, d=10);\n        \n        // Paw\n        translate([0, 0, -2])\n            sphere(d=12);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([25, 0, 15])\n    rotate([0, 0, -20])\n    for(i = [0:3]) {\n        translate([i*5, 0, -i*3])\n        rotate([0, i*5, 0])\n        scale([0.9-i*0.1, 0.9-i*0.1, 0.9-i*0.1])\n        sphere(d=15);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([-33, side*8, 22])\n            sphere(d=3);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Front legs\n    translate([-15, 15, 8])\n        leg(20, 0);\n    translate([-15, -15, 8])\n        leg(20, 0);\n    \n    // Rear legs\n    translate([15, 12, 8])\n        leg(22, 0);\n    translate([15, -12, 8])\n        leg(22, 0);\n    \n    // Eyes\n    color(\"black\")\n    eyes();\n    \n    // Nose\n    translate([-42, 0, 18])\n        sphere(d=4);\n}",
    "renders": true
  },
  {
    "household_item": "roc",
    "openscad_code": "// Roc bird - medium complexity realistic style\n// Wingspan: 80mm, Length: 60mm, Height: 35mm\n\n$fn = 32;\n\n// Main bird body\nmodule roc_body() {\n    // Central torso\n    union() {\n        // Main body - elongated sphere\n        scale([1.2, 0.8, 1])\n            sphere(r=15);\n        \n        // Neck extension\n        translate([12, 0, 8])\n            rotate([0, -20, 0])\n            scale([0.8, 0.7, 1.2])\n            cylinder(h=12, r1=8, r2=6);\n        \n        // Tail base\n        translate([-20, 0, 0])\n            rotate([0, 10, 0])\n            scale([1.5, 1, 0.6])\n            cylinder(h=15, r1=10, r2=5);\n    }\n}\n\n// Eagle-like head with beak\nmodule roc_head() {\n    union() {\n        // Head sphere\n        translate([20, 0, 12])\n            sphere(r=8);\n        \n        // Beak\n        translate([28, 0, 12])\n            rotate([0, -30, 0])\n            cylinder(h=12, r1=6, r2=0);\n        \n        // Crest feathers\n        for(i = [0:2]) {\n            translate([18, -3 + i*3, 18])\n                rotate([20 - i*10, 0, 0])\n                scale([0.3, 1, 2])\n                cube([2, 1, 5], center=true);\n        }\n        \n        // Eye sockets\n        translate([22, 4, 14])\n            sphere(r=2);\n        translate([22, -4, 14])\n            sphere(r=2);\n    }\n}\n\n// Wing structure\nmodule wing() {\n    difference() {\n        // Main wing shape\n        translate([0, 0, 0])\n            rotate([0, 0, 10])\n            scale([1, 3, 0.2])\n            cylinder(h=30, r1=12, r2=2);\n        \n        // Feather cutouts\n        for(i = [1:3]) {\n            translate([-5 + i*3, 15 + i*5, -3])\n                rotate([0, 0, -15])\n                scale([1, 0.3, 0.5])\n                cube([8, 15, 3], center=true);\n        }\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    union() {\n        for(i = [-2:2]) {\n            translate([-30, i*3, i*2])\n                rotate([0, 0, i*5])\n                scale([1.5, 0.3, 1])\n                cube([10, 2, 8]);\n        }\n    }\n}\n\n// Leg and claw\nmodule leg() {\n    // Upper leg\n    translate([0, 10, -15])\n        rotate([20, 0, 10])\n        cylinder(h=15, r=3);\n    \n    // Lower leg\n    translate([5, 15, -25])\n        rotate([40, 0, 10])\n        cylinder(h=12, r=2.5);\n    \n    // Foot\n    translate([8, 18, -32])\n        union() {\n            // Palm\n            scale([2, 1, 0.5])\n            sphere(r=3);\n            \n            // Toes\n            for(angle = [0:60:240]) {\n                rotate([0, 0, angle])\n                translate([3, 0, -1])\n                    cylinder(h=6, r=1.5);\n                \n                // Claw\n                translate([3 + 6*cos(angle), 6*sin(angle), -7])\n                    rotate([0, 90, 0])\n                    cylinder(h=3, r1=1.5, r2=0.5);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    roc_body();\n    roc_head();\n    tail();\n    \n    // Left wing\n    translate([0, 0, 15])\n        rotate([0, 0, 30])\n        wing();\n    \n    // Right wing\n    translate([0, 0, 15])\n        mirror([0, 1, 0])\n        rotate([0, 0, 30])\n        wing();\n    \n    // Legs\n    translate([5, 5, 0])\n        leg();\n    translate([5, -5, 0])\n        mirror([0, 1, 0])\n        leg();\n}",
    "renders": true
  },
  {
    "household_item": "behemoth",
    "openscad_code": "// Behemoth - Realistic Style (Medium Complexity)\n// A hulking quadruped with thick armor plating and powerful limbs\n\n// Overall scaling factor for easy resizing\nscale_factor = 0.5;\n\n// Main body module\nmodule body() {\n    // Torso - elongated oval shape\n    difference() {\n        scale([1.2, 0.8, 0.6]) sphere(d=40 * scale_factor);\n        translate([0, 0, -12 * scale_factor]) cube([50, 30, 25] * scale_factor, center=true);\n    }\n    \n    // Armor plates along back\n    for(i = [-20:10:20]) {\n        translate([i * scale_factor, 0, 15 * scale_factor]) {\n            rotate([0, 90, 0]) cylinder(h=8 * scale_factor, d1=12 * scale_factor, d2=8 * scale_factor);\n        }\n    }\n}\n\n// Limb module\nmodule limb(length, thickness) {\n    // Upper leg\n    translate([0, 0, length/2]) cylinder(h=length, d=thickness);\n    \n    // Lower leg\n    translate([0, 0, -length/2]) rotate([15, 0, 0]) \n        cylinder(h=length * 0.8, d=thickness * 0.8);\n    \n    // Foot/Claw\n    translate([0, 0, -length * 1.3]) {\n        sphere(d=thickness * 1.2);\n        // Toes\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle]) \n                translate([thickness * 0.6, 0, 0]) \n                    cylinder(h=thickness * 0.5, d=thickness * 0.3);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    // Main skull\n    translate([0, 25 * scale_factor, 5 * scale_factor]) {\n        scale([0.8, 1.2, 0.7]) sphere(d=20 * scale_factor);\n        \n        // Jaw\n        translate([0, 8 * scale_factor, -8 * scale_factor]) {\n            rotate([20, 0, 0]) \n                cube([15, 15, 5] * scale_factor, center=true);\n        }\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([side * 8 * scale_factor, 5 * scale_factor, 12 * scale_factor]) {\n                rotate([30, side * 30, 0]) \n                    cylinder(h=15 * scale_factor, d1=8 * scale_factor, d2=4 * scale_factor);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Segmented tail\n    for(i = [0:5]) {\n        translate([0, -25 * scale_factor - i * 8 * scale_factor, -i * 2 * scale_factor]) {\n            rotate([0, 10 * i, 0]) {\n                sphere(d=12 * scale_factor - i * 1.5 * scale_factor);\n                if(i < 5) {\n                    cylinder(h=8 * scale_factor, d=8 * scale_factor - i * scale_factor);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the behemoth\nunion() {\n    body();\n    \n    // Head\n    translate([0, 15 * scale_factor, 15 * scale_factor]) head();\n    \n    // Tail\n    translate([0, -20 * scale_factor, 0]) tail();\n    \n    // Front legs\n    translate([15 * scale_factor, 10 * scale_factor, -5 * scale_factor]) \n        rotate([0, 15, 0]) limb(20 * scale_factor, 8 * scale_factor);\n    translate([-15 * scale_factor, 10 * scale_factor, -5 * scale_factor]) \n        rotate([0, 15, 0]) limb(20 * scale_factor, 8 * scale_factor);\n    \n    // Back legs\n    translate([12 * scale_factor, -15 * scale_factor, -5 * scale_factor]) \n        rotate([0, -15, 0]) limb(18 * scale_factor, 9 * scale_factor);\n    translate([-12 * scale_factor, -15 * scale_factor, -5 * scale_factor]) \n        rotate([0, -15, 0]) limb(18 * scale_factor, 9 * scale_factor);\n}\n\n// Add ground contact base\ntranslate([0, 0, -25 * scale_factor]) \n    cube([40, 50, 2] * scale_factor, center=true);",
    "renders": true
  },
  {
    "household_item": "lamia",
    "openscad_code": "// Lamia - Realistic Style, Medium Complexity\n// Human torso with serpent lower body, 3D printable\n\n$fn = 30;\nscale_factor = 0.5;\n\n// Main assembly\nunion() {\n    // Human torso\n    translate([0, 0, 15]) {\n        torso();\n    }\n    \n    // Serpent body\n    translate([0, 0, 0]) {\n        serpent_body();\n    }\n}\n\nmodule torso() {\n    // Chest\n    translate([0, 0, 20]) {\n        difference() {\n            scale([8, 6, 12]) sphere(1);\n            translate([0, 0, -1]) cube([20, 20, 2], center=true);\n        }\n    }\n    \n    // Shoulders\n    translate([-5, 0, 28]) {\n        rotate([0, 90, 0]) cylinder(h=4, r1=2, r2=2);\n    }\n    translate([5, 0, 28]) {\n        rotate([0, 90, 0]) cylinder(h=4, r1=2, r2=2);\n    }\n    \n    // Arms\n    translate([-8, 0, 26]) {\n        rotate([0, 0, -30]) {\n            cylinder(h=8, r1=1.5, r2=1);\n        }\n    }\n    translate([8, 0, 26]) {\n        rotate([0, 0, 30]) {\n            cylinder(h=8, r1=1.5, r2=1);\n        }\n    }\n    \n    // Head\n    translate([0, 0, 35]) {\n        scale([3, 3, 4]) sphere(1);\n    }\n    \n    // Neck\n    translate([0, 0, 32]) {\n        cylinder(h=3, r1=1.5, r2=2);\n    }\n}\n\nmodule serpent_body() {\n    // Main body segments\n    for(i = [0:10]) {\n        translate([0, 0, -i*3]) {\n            scale([10-i*0.3, 10-i*0.3, 3]) \n                sphere(1);\n        }\n    }\n    \n    // Tail segments\n    for(i = [0:15]) {\n        angle = i * 15;\n        radius = 35 - i * 2;\n        x = radius * sin(angle);\n        y = radius * cos(angle);\n        z = -33 - i * 2;\n        \n        translate([x, y, z]) {\n            scale([6-i*0.2, 6-i*0.2, 2]) \n                sphere(1);\n        }\n    }\n    \n    // Belly scales pattern\n    for(i = [0:5]) {\n        for(j = [0:3]) {\n            translate([-5+j*3, -3+i*2, -5-i*3]) {\n                scale([2, 1, 0.5]) sphere(1);\n            }\n        }\n    }\n    \n    // Tail fin\n    translate([0, -45, -65]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height=0.5) {\n                polygon(points=[\n                    [0, 0],\n                    [-3, -8],\n                    [0, -6],\n                    [3, -8],\n                    [0, 0]\n                ]);\n            }\n        }\n    }\n}\n\n// Base support for printing\ntranslate([0, 0, -70]) {\n    cylinder(h=2, r=8);\n}",
    "renders": true
  },
  {
    "household_item": "ammit",
    "openscad_code": "// Ammit - Egyptian Devourer of Souls\n// Medium complexity realistic style\n\n// Overall dimensions\nscale_factor = 0.4;\nbody_length = 70 * scale_factor;\nbody_height = 35 * scale_factor;\nbody_width = 40 * scale_factor;\n\n// Head dimensions\nhead_length = 25 * scale_factor;\nhead_height = 20 * scale_factor;\nhead_width = 22 * scale_factor;\n\n// Leg dimensions\nleg_height = 18 * scale_factor;\nleg_width = 8 * scale_factor;\n\n// Tail dimensions\ntail_length = 50 * scale_factor;\ntail_segments = 8;\n\n// Crocodile head module\nmodule crocodile_head() {\n    // Main head shape\n    union() {\n        // Upper jaw\n        translate([0, 0, head_height/4])\n            cube([head_length, head_width, head_height/2], center=true);\n        \n        // Lower jaw\n        translate([0, 0, -head_height/4])\n            cube([head_length*0.9, head_width*0.8, head_height/3], center=true);\n        \n        // Snout\n        translate([head_length/2, 0, 0])\n            cube([head_length/2, head_width*0.8, head_height*0.6], center=true);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([head_length/4, side*head_width/3, head_height/3])\n                sphere(head_height/8);\n        }\n        \n        // Teeth\n        for(i = [0:4]) {\n            translate([head_length/2 - i*4*scale_factor, head_width/2, -head_height/8])\n                cube([2*scale_factor, 1*scale_factor, 4*scale_factor]);\n            translate([head_length/2 - i*4*scale_factor, -head_width/2, -head_height/8])\n                cube([2*scale_factor, 1*scale_factor, 4*scale_factor]);\n        }\n    }\n}\n\n// Lion body module\nmodule lion_body() {\n    // Main torso\n    union() {\n        // Chest\n        translate([-body_length/4, 0, 0])\n            cube([body_length/2, body_width, body_height], center=true);\n        \n        // Abdomen\n        translate([body_length/4, 0, -body_height/4])\n            cube([body_length/2, body_width*0.9, body_height*0.8], center=true);\n        \n        // Ribs\n        for(i = [-3:3]) {\n            translate([i*8*scale_factor, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=body_width*1.2, r=body_height/4, $fn=16);\n        }\n    }\n}\n\n// Leg module\nmodule leg(is_hind = false) {\n    // Upper leg\n    upper_length = is_hind ? leg_height*1.2 : leg_height;\n    upper_width = leg_width;\n    \n    // Lower leg\n    lower_length = leg_height*0.8;\n    \n    union() {\n        // Upper leg\n        translate([0, 0, upper_length/2])\n            cylinder(h=upper_length, r=upper_width/2, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -lower_length/2])\n            cylinder(h=lower_length, r=upper_width/1.8, $fn=12);\n        \n        // Paw\n        translate([0, 0, -upper_length/2 - lower_length])\n            sphere(upper_width/1.5);\n    }\n}\n\n// Hippopotamus tail module\nmodule hippo_tail() {\n    // Segmented tail\n    for(i = [0:tail_segments-1]) {\n        segment_length = tail_length / tail_segments;\n        segment_radius = (tail_segments - i) * 1.5 * scale_factor;\n        \n        translate([body_length/2 + i*segment_length, 0, -body_height/2 + i*2*scale_factor])\n            rotate([0, i*5, 0])\n                cylinder(h=segment_length, r=segment_radius, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Position head\n    translate([-body_length/2 - head_length/2, 0, body_height/2 - head_height/2])\n        rotate([0, 0, -10])\n            crocodile_head();\n    \n    // Body\n    translate([0, 0, 0])\n        lion_body();\n    \n    // Legs\n    // Front legs\n    translate([-body_length/3, body_width/2, -body_height/2])\n        rotate([15, 0, 0])\n            leg();\n    translate([-body_length/3, -body_width/2, -body_height/2])\n        rotate([15, 0, 0])\n            leg();\n    \n    // Hind legs\n    translate([body_length/3, body_width/2, -body_height/2])\n        rotate([-15, 0, 0])\n            leg(true);\n    translate([body_length/3, -body_width/2, -body_height/2])\n        rotate([-15, 0, 0])\n            leg(true);\n    \n    // Tail\n    hippo_tail();\n}",
    "renders": true
  },
  {
    "household_item": "banshee",
    "openscad_code": "// Banshee - Medium Complexity, Realistic Style\n// Overall height ~80mm, suitable for 3D printing\n\n$fn = 64;\n\n// Main module\nmodule banshee() {\n    // Head\n    translate([0, 0, 70])\n        head();\n    \n    // Torso\n    translate([0, 0, 45])\n        torso();\n    \n    // Arms\n    translate([-8, 0, 60])\n        rotate([0, 0, 15])\n        arm();\n    translate([8, 0, 60])\n        mirror([1, 0, 0])\n        rotate([0, 0, 15])\n        arm();\n    \n    // Legs\n    translate([-3, 0, 20])\n        leg();\n    translate([3, 0, 20])\n        mirror([1, 0, 0])\n        leg();\n    \n    // Hair\n    translate([0, 0, 75])\n        hair();\n    \n    // Dress\n    translate([0, 0, 30])\n        dress();\n}\n\n// Head module\nmodule head() {\n    // Skull\n    union() {\n        // Main head shape\n        sphere(8);\n        \n        // Jaw\n        translate([0, -7, -4])\n            scale([0.8, 0.6, 0.8])\n            sphere(6);\n        \n        // Eye sockets\n        difference() {\n            sphere(8);\n            translate([-3, 3, 2])\n                sphere(2.5);\n            translate([3, 3, 2])\n                sphere(2.5);\n        }\n        \n        // Mouth opening\n        difference() {\n            sphere(8);\n            translate([0, -7, -2])\n                rotate([90, 0, 0])\n                cylinder(h=10, r1=2, r2=1);\n        }\n    }\n}\n\n// Torso module\nmodule torso() {\n    // Upper body\n    difference() {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1.2, 0.6, 2])\n            sphere(10);\n        \n        // Waist indentation\n        translate([0, -2, 5])\n            scale([1.4, 1, 0.8])\n            sphere(8);\n    }\n}\n\n// Arm module\nmodule arm() {\n    // Upper arm\n    translate([0, 0, 0])\n        rotate([0, 0, -30])\n        scale([0.8, 0.8, 2])\n        sphere(3);\n    \n    // Lower arm\n    translate([0, 0, -8])\n        rotate([0, 0, -30])\n        scale([0.7, 0.7, 2])\n        sphere(2.5);\n    \n    // Hand\n    translate([0, 0, -15])\n        scale([0.5, 0.3, 0.8])\n        sphere(3);\n}\n\n// Leg module\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 0])\n        scale([1, 0.8, 3])\n        sphere(3);\n    \n    // Lower leg\n    translate([0, 0, -7])\n        scale([0.8, 0.7, 2.5])\n        sphere(2.5);\n    \n    // Foot\n    translate([0, 2, -13])\n        scale([1.2, 2, 0.5])\n        sphere(2);\n}\n\n// Hair module\nmodule hair() {\n    // Main hair mass\n    difference() {\n        translate([0, 0, -3])\n            scale([1.2, 1.5, 2])\n            sphere(10);\n        \n        // Head cutout\n        translate([0, 0, -3])\n            sphere(8);\n    }\n    \n    // Flowing strands\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n        translate([0, 12, -3])\n        rotate([90, 0, 0])\n        scale([0.3, 0.3, 8])\n        cylinder(h=1, r1=1, r2=0.5);\n    }\n}\n\n// Dress module\nmodule dress() {\n    // Upper dress\n    difference() {\n        translate([0, 0, 0])\n            scale([1.5, 0.8, 4])\n            sphere(12);\n        \n        // Torso cutout\n        translate([0, 0, 5])\n            scale([1.2, 0.6, 2])\n            sphere(10);\n    }\n    \n    // Lower dress (flowing)\n    difference() {\n        translate([0, 0, -5])\n            scale([2, 1.5, 6])\n            sphere(15);\n        \n        // Waist cutout\n        translate([0, 0, 0])\n            scale([1.5, 0.8, 4])\n            sphere(12);\n    }\n    \n    // Tattered edges\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n        translate([0, 20, -12])\n        rotate([90, 0, 0])\n        scale([0.5, 0.5, 3])\n        cylinder(h=1, r1=2, r2=0.5);\n    }\n}\n\n// Generate the banshee\nbanshee();",
    "renders": true
  },
  {
    "household_item": "barghest",
    "openscad_code": "// Barghest - Medium complexity realistic style\n// Overall dimensions: ~80mm long x 40mm tall x 30mm wide\n\n// Main body module\nmodule body() {\n    // Torso - elongated oval shape\n    union() {\n        // Main torso segment\n        translate([0, 0, 15])\n            scale([1.5, 0.8, 0.6])\n            sphere(r=15, $fn=32);\n        \n        // Chest extension\n        translate([-10, 0, 12])\n            scale([1.2, 0.9, 0.5])\n            sphere(r=12, $fn=24);\n        \n        // Abdomen taper\n        translate([15, 0, 12])\n            scale([0.8, 0.7, 0.4])\n            sphere(r=10, $fn=24);\n    }\n}\n\n// Head module with canine features\nmodule head() {\n    translate([-25, 0, 25])\n    rotate([0, 10, 0])\n    union() {\n        // Main head shape\n        scale([1.3, 0.9, 1])\n    sphere(r=12, $fn=32);\n        \n        // Muzzle extension\n        translate([-10, 0, -2])\n            scale([1.2, 0.6, 0.5])\n            sphere(r=8, $fn=24);\n        \n        // Ears - triangular prisms\n        for(side = [-1, 1]) {\n            translate([0, side*8, 8])\n                rotate([0, side*20, 0])\n                scale([0.3, 1, 2])\n                cylinder(h=10, r=5, $fn=3);\n        }\n        \n        // Eyes - glowing orbs\n        for(side = [-1, 1]) {\n            translate([-8, side*6, 3])\n                sphere(r=2.5, $fn=16);\n        }\n        \n        // Nose\n        translate([-18, 0, -2])\n            sphere(r=3, $fn=16);\n    }\n}\n\n// Leg module - generates one leg\nmodule leg(position, angle) {\n    translate(position)\n    rotate([0, angle, 0])\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n            rotate([-90, 0, 0])\n            cylinder(h=15, r1=4, r2=3, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -15])\n            rotate([30, 0, 0])\n            cylinder(h=12, r1=3, r2=2.5, $fn=12);\n        \n        // Paw\n        translate([0, 0, -27])\n            scale([1.2, 1, 0.8])\n            sphere(r=3, $fn=16);\n        \n        // Toes\n        for(toe = [-15, 0, 15]) {\n            translate([0, sin(toe)*2, -30])\n                rotate([0, toe, 0])\n                scale([0.8, 0.5, 1.5])\n                cylinder(h=4, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([20, 0, 15])\n    rotate([0, -20, 0])\n    union() {\n        // Tail segments\n        for(i = [0:5]) {\n            translate([i*4, 0, -i*1.5])\n                rotate([0, -i*5, 0])\n                scale([1-i*0.1, 1-i*0.05, 1-i*0.05])\n                sphere(r=5, $fn=16);\n        }\n    }\n}\n\n// Spinal ridge detail\nmodule spinal_ridge() {\n    for(i = [-20:5:20]) {\n        translate([i, 0, 22+i*0.2])\n            scale([0.8, 0.3, 0.5])\n            sphere(r=3, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    body();\n    head();\n    tail();\n    \n    // Legs - front and back pairs\n    leg([-15, 10, 0], 15);    // Front left\n    leg([-15, -10, 0], 15);   // Front right\n    leg([15, 8, 0], -15);     // Back left\n    leg([15, -8, 0], -15);    // Back right\n    \n    // Spinal ridge\n    spinal_ridge();\n}\n\n// Base plate for stability\ntranslate([-30, -20, -5])\n    cube([60, 40, 2]);",
    "renders": true
  },
  {
    "household_item": "bolla",
    "openscad_code": "// Bolla (Traditional Albanian Hat) - Realistic Style, Medium Complexity\n// Overall size: 85mm diameter, 50mm height\n\n// Wall thickness and parameters\n$fn = 60;\nwall = 1.5;\nbrim_width = 5;\nbrim_thickness = 2.5;\n\n// Main dome (felt body)\nmodule main_dome() {\n    difference() {\n        // Outer dome\n        sphere(d = 85);\n        \n        // Hollow interior\n        translate([0, 0, -wall])\n            sphere(d = 85 - 2*wall);\n        \n        // Flatten bottom\n        translate([0, 0, -40])\n            cube([100, 100, 80], center = true);\n    }\n}\n\n// Brim (qylaf)\nmodule brim() {\n    difference() {\n        // Outer brim\n        cylinder(h = brim_thickness, d1 = 85 + 2*brim_width, d2 = 85 + brim_width);\n        \n        // Inner hole for dome\n        translate([0, 0, -0.1])\n            cylinder(h = brim_thickness + 0.2, d = 85);\n    }\n}\n\n// Traditional black band (shami)\nmodule headband() {\n    color(\"black\")\n    translate([0, 0, -10])\n    difference() {\n        cylinder(h = 5, d = 85 + 0.5);\n        cylinder(h = 6, d = 85 - 15);\n    }\n}\n\n// Decorative wool tuft (çibuk)\nmodule tuft() {\n    color(\"darkred\")\n    translate([0, 0, 40])\n    sphere(d = 12);\n    \n    translate([0, 0, 40])\n    cylinder(h = 8, d1 = 6, d2 = 10);\n}\n\n// Embroidered pattern loops around base\nmodule embroidery_loop(angle) {\n    rotate([0, 0, angle])\n    translate([40, 0, -5])\n    rotate([90, 0, 0])\n    cylinder(h = 3, d = 2);\n}\n\n// Assembly\nunion() {\n    // Main hat body\n    main_dome();\n    \n    // Attach brim\n    translate([0, 0, -40])\n    brim();\n    \n    // Add headband\n    headband();\n    \n    // Decorative tuft on top\n    tuft();\n    \n    // Embroidery loops (12 loops around)\n    for(i = [0:30:330]) {\n        embroidery_loop(i);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "bunyip",
    "openscad_code": "// Bunyip - Realistic Style, Medium Complexity\n// Australian mythical creature with crocodile head, dog body and seal tail\n\n$fn = 30;  // Smooth curves for realistic look\n\n// Overall dimensions\nbunyip_length = 85;\nbunyip_height = 45;\nbunyip_width = 35;\n\nmodule bunyip() {\n    // Main body assembly\n    union() {\n        // Crocodile-like head\n        head();\n        \n        // Dog-like body\n        body();\n        \n        // Seal-like tail\n        tail();\n        \n        // Legs\n        legs();\n    }\n}\n\nmodule head() {\n    translate([bunyip_length/2 - 15, 0, bunyip_height/2]) {\n        rotate([0, 0, 0]) {\n            // Main head shape\n            difference() {\n                // Crocodile snout\n                union() {\n                    // Upper jaw\n                    translate([0, 0, 5]) {\n                        scale([1.5, 1, 0.8])\n                            sphere(10);\n                    }\n                    \n                    // Lower jaw\n                    translate([0, 0, -3]) {\n                        scale([1.3, 0.9, 0.6])\n                            sphere(8);\n                    }\n                    \n                    // Head back\n                    translate([-5, 0, 2]) {\n                        scale([1, 1.2, 1.1])\n                            sphere(9);\n                    }\n                }\n                \n                // Mouth opening\n                translate([5, 0, 0]) {\n                    rotate([0, -30, 0])\n                        cube([15, 8, 6], center=true);\n                }\n                \n                // Eye sockets\n                translate([2, 6, 6]) {\n                    sphere(3);\n                }\n                translate([2, -6, 6]) {\n                    sphere(3);\n                }\n            }\n            \n            // Eyes\n            translate([2, 6, 6]) {\n                color(\"black\")\n                    sphere(2);\n            }\n            translate([2, -6, 6]) {\n                color(\"black\")\n                    sphere(2);\n            }\n            \n            // Nostrils\n            translate([8, 3, 2]) {\n                cylinder(h=3, r=1.5);\n            }\n            translate([8, -3, 2]) {\n                cylinder(h=3, r=1.5);\n            }\n            \n            // Scales on head\n            for(i = [-5:5]) {\n                for(j = [-3:3]) {\n                    if(i*i + j*j < 20) {\n                        translate([-2 + i*2, j*2, 10 - abs(i)*0.5]) {\n                            rotate([90, 0, 0])\n                                cylinder(h=1, r1=1.5, r2=0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule body() {\n    translate([0, 0, bunyip_height/3]) {\n        // Main torso\n        union() {\n            // Upper body\n            scale([1.2, 1, 0.8])\n                sphere(12);\n            \n            // Lower body extension\n            translate([0, 0, -8]) {\n                scale([1.4, 1.1, 0.6])\n                    sphere(10);\n            }\n            \n            // Chest\n            translate([10, 0, -3]) {\n                scale([1, 1, 0.7])\n                    sphere(8);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    translate([-bunyip_length/2 + 20, 0, bunyip_height/3 - 5]) {\n        rotate([0, 0, 180]) {\n            // Seal-like tail\n            for(i = [0:10]) {\n                translate([-i*3, 0, -i*0.5]) {\n                    scale([1 - i*0.05, 1 - i*0.07, 1 - i*0.05])\n                        sphere(10 - i);\n                }\n            }\n            \n            // Tail fluke\n            translate([-35, 0, -8]) {\n                rotate([0, 0, 0]) {\n                    scale([0.3, 2.5, 0.1])\n                        cylinder(h=12, r1=5, r2=0);\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([bunyip_length/4, side * bunyip_width/3, 0]) {\n            // Upper leg\n            rotate([0, side * 10, 0]) {\n                cylinder(h=12, r1=4, r2=3);\n                \n                // Lower leg\n                translate([0, 0, -12]) {\n                    rotate([side * 20, 0, 0]) {\n                        cylinder(h=10, r1=3, r2=2.5);\n                        \n                        // Paw\n                        translate([0, 0, -10]) {\n                            sphere(3);\n                            \n                            // Toes\n                            for(toe = [-1, 0, 1]) {\n                                translate([toe*2, toe, -2]) {\n                                    rotate([90, 0, 0])\n                                        cylinder(h=3, r1=1, r2=0.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([-bunyip_length/4, side * bunyip_width/3, 0]) {\n            // Upper leg\n            rotate([0, side * 10, 0]) {\n                cylinder(h=10, r1=4, r2=3);\n                \n                // Lower leg\n                translate([0, 0, -10]) {\n                    rotate([side * 20, 0, 0]) {\n                        cylinder(h=8, r1=3, r2=2.5);\n                        \n                        // Paw\n                        translate([0, 0, -8]) {\n                            sphere(3);\n                            \n                            // Webbed toes for swimming\n                            for(toe = [-1.5, -0.5, 0.5, 1.5]) {\n                                translate([toe*1.5, 0, -2]) {\n                                    rotate([90, 0, 0])\n                                        cylinder(h=2.5, r1=1.2, r2=0.8);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the bunyip\nbunyip();",
    "renders": true
  },
  {
    "household_item": "calygreyhound",
    "openscad_code": "// Calygreyhound - Realistic style, medium complexity\n// 3D printable figurine with no overhangs\n\n// Main dimensions\nbody_length = 40;\nbody_height = 25;\nbody_width = 20;\n\n// Head dimensions\nhead_length = 15;\nhead_height = 12;\nhead_width = 10;\n\n// Leg dimensions\nleg_height = 30;\nleg_width = 5;\nleg_depth = 6;\n\n// Wing dimensions\nwing_span = 35;\nwing_height = 20;\nwing_thickness = 2;\n\n// Tail dimensions\ntail_length = 25;\ntail_height = 15;\n\n// Horn dimensions\nhorn_height = 8;\nhorn_base = 3;\n\n// Ear dimensions\near_height = 6;\near_width = 4;\n\n// Body of the calygreyhound\nmodule body() {\n    // Main torso\n    translate([0, 0, leg_height]) {\n        // Torso\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Chest protrusion\n        translate([-body_length/2, 0, -body_height/4]) {\n            cube([body_length/3, body_width*0.8, body_height*0.6]);\n        }\n    }\n}\n\n// Head with antelope-like features\nmodule head() {\n    translate([body_length/2 + head_length/2, 0, leg_height + body_height/2]) {\n        // Main head shape\n        cube([head_length, head_width, head_height], center=true);\n        \n        // Snout extension\n        translate([head_length/2, 0, -head_height/4]) {\n            cube([head_length/2, head_width*0.7, head_height*0.5]);\n        }\n        \n        // Horns (antelope-like)\n        translate([0, -head_width/2 - horn_base/2, head_height/2]) {\n            cylinder(h=horn_height, r1=horn_base, r2=0.5, center=true);\n        }\n        translate([0, head_width/2 + horn_base/2, head_height/2]) {\n            cylinder(h=horn_height, r1=horn_base, r2=0.5, center=true);\n        }\n        \n        // Ears\n        translate([-head_length/4, -head_width/2 - ear_width/2, head_height/2]) {\n            cube([ear_width, ear_width, ear_height]);\n        }\n        translate([-head_length/4, head_width/2 + ear_width/2, head_height/2]) {\n            cube([ear_width, ear_width, ear_height]);\n        }\n    }\n}\n\n// Legs module with eagle-like feet\nmodule legs() {\n    // Front legs\n    for(x = [-body_length/3, body_length/3]) {\n        translate([x, -body_width/4, leg_height/2]) {\n            // Upper leg\n            cylinder(h=leg_height*0.6, r=leg_width/2, center=true);\n            \n            // Lower leg\n            translate([0, 0, -leg_height*0.3]) {\n                cylinder(h=leg_height*0.4, r=leg_width/2.5, center=true);\n                \n                // Eagle foot (simplified talons)\n                translate([0, 0, -leg_height*0.5]) {\n                    // Main foot\n                    cube([leg_width*1.5, leg_depth*1.2, leg_width], center=true);\n                    \n                    // Toes\n                    for(i = [-1, 0, 1]) {\n                        translate([i*leg_width/2, leg_depth/2, -leg_width/2]) {\n                            cube([leg_width/2, leg_depth/2, leg_width/2]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Hind legs (slightly different)\n    for(x = [-body_length/2.2, body_length/2.2]) {\n        translate([x, body_width/4, leg_height/2]) {\n            // Thicker hind legs\n            cylinder(h=leg_height*0.65, r=leg_width/1.8, center=true);\n            \n            translate([0, 0, -leg_height*0.325]) {\n                cylinder(h=leg_height*0.35, r=leg_width/2.2, center=true);\n                \n                // Hind foot\n                translate([0, 0, -leg_height*0.5]) {\n                    cube([leg_width*1.8, leg_depth*1.5, leg_width], center=true);\n                    \n                    for(i = [-1.2, -0.4, 0.4, 1.2]) {\n                        translate([i*leg_width/2, leg_depth/2, -leg_width/2]) {\n                            cube([leg_width/2, leg_depth/2, leg_width/2]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eagle wings\nmodule wings() {\n    // Left wing\n    translate([-body_length/4, -body_width/2 - wing_thickness/2, leg_height + body_height*0.7]) {\n        rotate([0, 0, -15]) {\n            // Main wing\n            cube([wing_span/2, wing_thickness, wing_height]);\n            \n            // Wing feathers\n            for(i = [1:4]) {\n                translate([-wing_span/2 + i*wing_span/10, 0, -wing_height/2 - i*2]) {\n                    cube([wing_span/20, wing_thickness, wing_height/2 - i]);\n                }\n            }\n        }\n    }\n    \n    // Right wing\n    translate([-body_length/4, body_width/2 + wing_thickness/2, leg_height + body_height*0.7]) {\n        mirror([0, 1, 0]) {\n            rotate([0, 0, -15]) {\n                cube([wing_span/2, wing_thickness, wing_height]);\n                \n                for(i = [1:4]) {\n                    translate([-wing_span/2 + i*wing_span/10, 0, -wing_height/2 - i*2]) {\n                        cube([wing_span/20, wing_thickness, wing_height/2 - i]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Lion tail with tuft\nmodule tail() {\n    translate([-body_length/2 - tail_length/2, 0, leg_height + body_height/3]) {\n        // Tail base\n        cube([tail_length, body_width/4, tail_height/2], center=true);\n        \n        // Tail tuft\n        translate([-tail_length/2, 0, 0]) {\n            sphere(r=tail_height/2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    wings();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "catoblepas",
    "openscad_code": "// Realistic Catoblepas - Medium Complexity\n// Based on mythical creature with buffalo body and reptilian head/neck\n\n// Overall scaling factor for easy resizing\nscale_factor = 1;\n\n// Main module\nmodule catoblepas() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body - buffalo-like torso\n            body();\n            \n            // Neck - thick and muscular\n            neck();\n            \n            // Head - reptilian with downward-facing\n            head();\n            \n            // Legs - four buffalo legs\n            legs();\n            \n            // Tail - reptilian\n            tail();\n        }\n    }\n}\n\n// Buffalo-like body\nmodule body() {\n    // Main torso\n    translate([0, 0, 25]) {\n        scale([1.5, 1, 1]) {\n            sphere(20);\n        }\n    }\n    \n    // Chest section\n    translate([0, 15, 15]) {\n        scale([1.2, 0.8, 0.6]) {\n            sphere(18);\n        }\n    }\n    \n    // Rear section\n    translate([0, -15, 20]) {\n        scale([1.3, 0.9, 0.8]) {\n            sphere(18);\n        }\n    }\n}\n\n// Thick muscular neck\nmodule neck() {\n    // Main neck segment\n    translate([0, 10, 38]) {\n        rotate([30, 0, 0]) {\n            cylinder(25, 8, 6);\n        }\n    }\n    \n    // Upper neck segment\n    translate([0, 5, 55]) {\n        rotate([60, 0, 0]) {\n            cylinder(20, 6, 4);\n        }\n    }\n    \n    // Neck muscle bulge\n    translate([0, 12, 40]) {\n        sphere(7);\n    }\n}\n\n// Reptilian head facing downward\nmodule head() {\n    // Main head - elongated\n    translate([0, -5, 55]) {\n        rotate([90, 0, 0]) {\n            scale([0.8, 1.2, 1.5]) {\n                sphere(10);\n            }\n        }\n    }\n    \n    // Snout extension\n    translate([0, -12, 50]) {\n        rotate([90, 0, 0]) {\n            cylinder(15, 6, 4);\n        }\n    }\n    \n    // Eyes on sides of head\n    for(side = [-1, 1]) {\n        translate([side * 8, -8, 52]) {\n            sphere(3);\n        }\n    }\n    \n    // Horns - small curved\n    for(side = [-1, 1]) {\n        translate([side * 5, 0, 60]) {\n            rotate([30, side * 20, 0]) {\n                cylinder(10, 3, 1);\n            }\n        }\n    }\n}\n\n// Four buffalo legs\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side * 10, 10, 0]) {\n            leg();\n        }\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([side * 8, -15, 0]) {\n            leg();\n        }\n    }\n}\n\n// Single leg module\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 10]) {\n        cylinder(20, 6, 4);\n    }\n    \n    // Lower leg\n    translate([0, 0, 5]) {\n        cylinder(15, 4, 3);\n    }\n    \n    // Hoof\n    translate([0, 0, 0]) {\n        cylinder(5, 3, 4);\n    }\n}\n\n// Reptilian tail\nmodule tail() {\n    // Tail base\n    translate([0, -25, 22]) {\n        rotate([15, 0, 0]) {\n            cylinder(15, 7, 5);\n        }\n    }\n    \n    // Tail segments\n    for(i = [0:3]) {\n        translate([0, -35 - i * 8, 20 - i * 2]) {\n            rotate([10 - i * 5, 0, 0]) {\n                cylinder(8, 5 - i, 4 - i * 0.8);\n            }\n        }\n    }\n    \n    // Tail tip\n    translate([0, -60, 12]) {\n        sphere(2);\n    }\n}\n\n// Generate the model\ncatoblepas();",
    "renders": true
  },
  {
    "household_item": "cerastes",
    "openscad_code": "// Cerastes (horned viper) - realistic style, medium complexity\n// Overall size ~70 mm long\n\n// Parameters\n$fn = 32;                       // Rendering resolution\nscale = 0.7;                    // Global scale factor (70 mm target)\nwall = 1.2;                     // Wall thickness for 3D printing\n\nmodule horn() {\n    // Curved horn above eye\n    translate([0,0,5])\n        scale([0.4,0.4,1])\n        rotate([90,0,0])\n            cylinder(h1=5, h2=0, r1=4, r2=0);\n}\n\nmodule eye() {\n    // Eye with slit pupil\n    difference() {\n        sphere(3);\n        translate([0,-3,0]) cube([6,6,6], center=true);\n    }\n}\n\nmodule scale_row() {\n    // Single row of keeled scales\n    for(i=[-2:2]) {\n        translate([i*4,0,0])\n            difference() {\n                cube([3,2,1.5], center=true);\n                translate([0,1,0]) cube([2.8,0.5,1.6], center=true);\n            }\n    }\n}\n\nmodule head() {\n    // Triangular head with horns and eyes\n    union() {\n        // Main head shape\n        difference() {\n            scale([1.2,0.8,1]) sphere(10);\n            // Snout taper\n            translate([8,0,0]) scale([1,1.2,1]) sphere(8);\n        }\n        \n        // Horns\n        translate([-5,8,3]) rotate([0,0,-30]) horn();\n        translate([-5,-8,3]) rotate([0,0,30]) horn();\n        \n        // Eyes\n        translate([-5,5,2]) eye();\n        translate([-5,-5,2]) eye();\n        \n        // Nostrils\n        translate([8,3,-2]) rotate([0,90,0]) cylinder(h=3, r=1.5);\n        translate([8,-3,-2]) rotate([0,90,0]) cylinder(h=3, r=1.5);\n    }\n}\n\nmodule body_segment(id, length) {\n    // Tapered body segment with scales\n    r = 8 - id*0.3;  // Tapering radius\n    \n    union() {\n        // Body tube\n        difference() {\n            cylinder(h=length, r=r, center=true);\n            translate([0,0,-length/2-wall]) cylinder(h=length, r=r-wall, center=true);\n        }\n        \n        // Scales on top\n        translate([0,0,length/2+0.75]) scale_row();\n    }\n}\n\nmodule rattles() {\n    // Rattlesnake tail segments\n    for(i=[0:3]) {\n        translate([0,0,-i*5-40]) {\n            scale([1-i*0.1, 1-i*0.1, 1])\n                difference() {\n                    cylinder(h=4, r=6-i);\n                    translate([0,0,-1]) cylinder(h=6, r=5-i);\n                }\n        }\n    }\n}\n\n// Main assembly\nscale([scale,scale,scale])\nunion() {\n    // Head\n    translate([-20,0,0]) head();\n    \n    // Body\n    for(i=[0:10]) {\n        rotate([0,0,i*8])  // Slight body curve\n            translate([i*5,0,0])\n                body_segment(i, 5);\n    }\n    \n    // Tail and rattles\n    translate([55,0,0]) rattles();\n}",
    "renders": true
  },
  {
    "household_item": "cerberus",
    "openscad_code": "// Cerberus - Medium Complexity, Realistic Style\n// Dimensions: ~80mm long, ~50mm tall, ~40mm wide\n\n// Main body\nmodule body() {\n    // Torso\n    difference() {\n        union() {\n            // Main torso\n            scale([1.2, 0.8, 0.9])\n                sphere(d=35, $fn=32);\n            \n            // Chest\n            translate([10, 0, -5])\n                scale([1.5, 1, 0.8])\n                sphere(d=20, $fn=32);\n        }\n        \n        // Neck holes\n        translate([-15, -12, 15])\n            rotate([0, -20, 0])\n            cylinder(h=20, d1=12, d2=8, $fn=16);\n        \n        translate([-15, 0, 15])\n            rotate([0, 0, 0])\n            cylinder(h=20, d1=12, d2=8, $fn=16);\n        \n        translate([-15, 12, 15])\n            rotate([0, 20, 0])\n            cylinder(h=20, d1=12, d2=8, $fn=16);\n    }\n}\n\n// Head module for all three heads\nmodule head(pos_y=0, rot_y=0) {\n    translate([-15, pos_y, 15])\n    rotate([0, rot_y, 0]) {\n        // Skull\n        scale([1.3, 0.9, 1.1])\n            sphere(d=18, $fn=32);\n        \n        // Snout\n        translate([12, 0, 0])\n            rotate([0, -10, 0])\n            scale([1.5, 0.8, 0.7])\n            cylinder(h=12, d1=8, d2=6, $fn=16);\n        \n        // Ears\n        translate([-2, 8, 5])\n            rotate([10, 10, 0])\n            cylinder(h=8, d1=4, d2=2, $fn=8);\n        \n        translate([-2, -8, 5])\n            rotate([10, -10, 0])\n            cylinder(h=8, d1=4, d2=2, $fn=8);\n        \n        // Eyes\n        translate([5, 4, 3])\n            rotate([45, 0, 0])\n            sphere(d=2.5, $fn=8);\n        \n        translate([5, -4, 3])\n            rotate([45, 0, 0])\n            sphere(d=2.5, $fn=8);\n        \n        // Nose\n        translate([18, 0, 0])\n            sphere(d=2, $fn=8);\n    }\n}\n\n// Leg module\nmodule leg(pos_x=0, pos_y=0, rotation=0) {\n    translate([pos_x, pos_y, -15])\n    rotate([rotation, 0, 0]) {\n        // Upper leg\n        translate([0, 0, 5])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=12, d=6, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -5])\n            scale([0.7, 0.7, 1.1])\n            cylinder(h=12, d=5, $fn=16);\n        \n        // Paw\n        translate([0, 0, -12])\n            sphere(d=6, $fn=16);\n        \n        // Toes\n        for(i=[-1:1]) {\n            translate([i*2, 0, -15])\n                sphere(d=3, $fn=8);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([18, 0, -5])\n    rotate([0, -30, 0]) {\n        // Tail segments\n        for(i=[0:3]) {\n            translate([i*4, 0, -i*2])\n            rotate([0, i*10, 0])\n            scale([1, 0.9, 0.9])\n            sphere(d=4-i, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    \n    // Three heads\n    head(-12, -20);\n    head(0, 0);\n    head(12, 20);\n    \n    // Front legs\n    leg(8, 10, -10);\n    leg(8, -10, -10);\n    \n    // Back legs\n    leg(-8, 8, 10);\n    leg(-8, -8, 10);\n    \n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "chupacabra",
    "openscad_code": "// Chupacabra Model - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 36;\n\nmodule chupacabra() {\n    // Main body - elongated torso\n    translate([0, 0, 10]) {\n        scale([1.5, 0.8, 1]) {\n            sphere(15);\n        }\n    }\n    \n    // Hind legs\n    for (side = [-1, 1]) {\n        translate([side * 10, -15, 0]) {\n            rotate([-30 * side, 0, 0]) {\n                cylinder(h = 20, r1 = 5, r2 = 3);\n            }\n            translate([0, 0, -20]) {\n                sphere(4);\n            }\n        }\n    }\n    \n    // Front legs\n    for (side = [-1, 1]) {\n        translate([side * 8, 15, -5]) {\n            rotate([20 * side, 0, 0]) {\n                cylinder(h = 18, r1 = 4, r2 = 3);\n            }\n            translate([0, 0, -18]) {\n                sphere(3.5);\n            }\n        }\n    }\n    \n    // Neck\n    translate([0, 20, 8]) {\n        cylinder(h = 12, r1 = 6, r2 = 4);\n    }\n    \n    // Head\n    translate([0, 32, 12]) {\n        scale([0.8, 1.2, 0.9]) {\n            sphere(10);\n        }\n    }\n    \n    // Snout\n    translate([0, 42, 10]) {\n        rotate([10, 0, 0]) {\n            scale([0.6, 1.2, 0.5]) {\n                sphere(7);\n            }\n        }\n    }\n    \n    // Eyes\n    for (side = [-1, 1]) {\n        translate([side * 4, 38, 15]) {\n            rotate([10, 0, 0]) {\n                difference() {\n                    sphere(2.5);\n                    translate([0, 0, 2]) {\n                        sphere(2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Nostrils\n    for (side = [-1, 1]) {\n        translate([side * 2, 46, 10]) {\n            cylinder(h = 2, r = 1);\n        }\n    }\n    \n    // Ears\n    for (side = [-1, 1]) {\n        translate([side * 6, 30, 20]) {\n            rotate([0, side * 20, 0]) {\n                scale([0.5, 0.3, 1.5]) {\n                    sphere(4);\n                }\n            }\n        }\n    }\n    \n    // Spikes along back\n    for (i = [0:4]) {\n        translate([0, -15 + i * 8, 20 + sin(i * 45) * 3]) {\n            scale([0.3, 0.3, 1]) {\n                sphere(3);\n            }\n        }\n    }\n    \n    // Tail\n    translate([0, -25, 10]) {\n        rotate([0, 0, 180]) {\n            cylinder(h = 20, r1 = 4, r2 = 2);\n        }\n        translate([0, 0, -20]) {\n            sphere(2);\n        }\n    }\n}\n\n// Base for stability\nunion() {\n    chupacabra();\n    translate([0, 0, -23]) {\n        cube([40, 80, 3], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "cockatrice",
    "openscad_code": "// Cockatrice - Realistic style, medium complexity\n// 3D printable at ~75mm wingspan\n\n// Basic parameters\nscale_factor = 0.5;  // Scale to 75mm wingspan\nwall_thickness = 1.5;\n\nmodule cockatrice() {\n    union() {\n        // Body\n        body();\n        \n        // Head\n        translate([0, 0, 20]) head();\n        \n        // Wings\n        translate([-15, 0, 15]) wing();\n        translate([15, 0, 15]) mirror([1,0,0]) wing();\n        \n        // Legs\n        translate([-8, -10, -5]) leg();\n        translate([8, -10, -5]) mirror([1,0,0]) leg();\n        \n        // Tail\n        translate([0, -25, 10]) tail();\n    }\n}\n\nmodule body() {\n    // Main torso\n    difference() {\n        hull() {\n            sphere(10);\n            translate([0, 5, -5]) sphere(8);\n            translate([0, 15, 0]) sphere(6);\n        }\n        \n        // Hollow interior\n        scale([0.7, 0.7, 0.7]) sphere(10);\n    }\n}\n\nmodule head() {\n    union() {\n        // Skull shape\n        difference() {\n            hull() {\n                sphere(8);\n                translate([0, 5, 2]) sphere(6);\n            }\n            \n            // Eye sockets\n            translate([-3, 3, 2]) sphere(2);\n            translate([3, 3, 2]) sphere(2);\n            \n            // Beak cavity\n            translate([0, 8, -2]) rotate([30,0,0]) cylinder(8, 4, 2);\n        }\n        \n        // Beak\n        translate([0, 8, -1]) rotate([30,0,0]) \n            cylinder(8, 2.5, 1);\n        \n        // Comb\n        for(i = [0:3]) {\n            translate([0, -2, 5+i*2]) rotate([0,10,0]) \n                cylinder(3, 1, 0.5);\n        }\n    }\n}\n\nmodule wing() {\n    // Wing structure\n    difference() {\n        union() {\n            // Main wing\n            scale([1, 2, 0.3]) sphere(10);\n            \n            // Wing feathers\n            for(i = [0:4]) {\n                translate([0, 15+i*3, -2]) rotate([0,0,-20+i*10]) \n                    scale([1, 3-i*0.3, 0.2]) sphere(3);\n            }\n        }\n        \n        // Hollow wing\n        scale([0.8, 0.8, 0.5]) translate([0,5,0]) sphere(10);\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 0]) rotate([-30,0,0]) \n        cylinder(10, 3, 2);\n    \n    // Lower leg\n    translate([0, 8, -8]) rotate([60,0,0]) \n        cylinder(8, 2, 1.5);\n    \n    // Foot\n    translate([0, 12, -12]) {\n        // Palm\n        scale([1, 2, 0.5]) sphere(2);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i*1.5, 2, 0]) rotate([0,0,i*20]) \n                scale([0.5, 1.5, 0.5]) sphere(1.5);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail segments\n    for(i = [0:5]) {\n        translate([0, -i*5, -i*2]) rotate([0,0,i*5]) \n            scale([1-i*0.1, 1-i*0.1, 1-i*0.1]) \n                sphere(4-i);\n    }\n}\n\n// Render the model\nscale(scale_factor) cockatrice();",
    "renders": true
  },
  {
    "household_item": "crocotta",
    "openscad_code": "// Crocotta - medium complexity realistic style\n// 3D printable, 80mm length, no overhangs\n\n// Overall dimensions\nbody_len = 80;\nbody_w = 30;\nbody_h = 35;\n\n// Leg module\nmodule leg(len = 15, dia = 6) {\n    union() {\n        // Upper leg\n        cylinder(h = len, d1 = dia, d2 = dia * 0.8, $fn = 8);\n        translate([0, 0, len])\n        // Lower leg\n        cylinder(h = len * 0.8, d1 = dia * 0.8, d2 = dia * 0.6, $fn = 8);\n        translate([0, 0, len * 1.8])\n        // Paw\n        sphere(d = dia * 0.7, $fn = 8);\n    }\n}\n\n// Head module\nmodule head() {\n    // Skull\n    translate([-body_len/2 - 15, 0, body_h/2 + 5])\n    rotate([0, 10, 0])\n    union() {\n        difference() {\n            // Main head shape\n            sphere(d = 20, $fn = 16);\n            // Snout taper\n            translate([0, 0, 5])\n            scale([1.3, 1, 1.5])\n            sphere(d = 15, $fn = 16);\n        }\n        // Snout extension\n        translate([8, 0, -2])\n        scale([1.5, 0.8, 0.8])\n        sphere(d = 12, $fn = 16);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([-3, side * 8, 8])\n            rotate([0, -20 * side, 0])\n            cylinder(h = 8, d1 = 5, d2 = 2, $fn = 6);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([2, side * 5, 3])\n            scale([1, 0.7, 0.7])\n            sphere(d = 4, $fn = 8);\n        }\n        \n        // Nose\n        translate([10, 0, -1])\n        sphere(d = 3, $fn = 8);\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([body_len/2, 0, -5])\n    rotate([0, -10, 0])\n    for(i = [0:10]) {\n        translate([i * 2, 0, sin(i * 15) * 2])\n        sphere(d = max(12 - i, 3), $fn = 8);\n    }\n}\n\n// Body main\nunion() {\n    // Main torso\n    translate([0, 0, body_h/2])\n    scale([1, 0.8, 1])\n    sphere(d = body_len * 0.7, $fn = 16);\n    \n    // Chest\n    translate([-body_len/4, 0, body_h/2 - 5])\n    sphere(d = body_w * 1.2, $fn = 16);\n    \n    // Hips\n    translate([body_len/4, 0, body_h/2 - 5])\n    sphere(d = body_w, $fn = 16);\n    \n    // Neck\n    translate([-body_len/2 - 5, 0, body_h/2])\n    cylinder(h = 10, d1 = 15, d2 = 10, $fn = 8);\n    \n    // Legs\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-body_len/3, side * body_w/2, 0])\n        rotate([0, 10 * side, 0])\n        leg();\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([body_len/3, side * body_w/2, 0])\n        rotate([0, -10 * side, 0])\n        leg(12, 7);\n    }\n    \n    // Head\n    head();\n    \n    // Tail\n    tail();\n    \n    // Ridge along back\n    for(i = [-body_len/2 + 5 : 5 : body_len/2 - 5]) {\n        translate([i, 0, body_h - 2])\n        cylinder(h = 3, r = 2, $fn = 6);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "cwnannwn",
    "openscad_code": "// CwnAnnwn (Welsh \"Hounds of Annwn\") – realistic, medium-complexity\n// Overall bounding box ~60 mm long, 35 mm tall, 20 mm thick\n\n// Wall / feature thickness for reliable FDM printing\nwall = 1.6;\n\nmodule head() {\n    // Skull base\n    translate([0, 0, 5])\n    difference() {\n        sphere(d = 20);\n        translate([0, 0, 10])\n        cube([30, 30, 20], center = true);\n    }\n\n    // Snout\n    translate([11, 0, 0])\n    rotate([0, 10, 0])\n    difference() {\n        cylinder(h = 18, d1 = 12, d2 = 8, center = false);\n        translate([0, 0, -1])\n        cylinder(h = 20, d1 = 10, d2 = 6, center = false);\n    }\n\n    // Nostrils\n    for (x = [8, 14])\n        translate([x, 3.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h = wall + 0.2, d = 2.5, $fn = 8);\n\n    // Eyes\n    for (y = [-6, 6])\n        translate([-1, y, 7])\n        sphere(d = 4);\n}\n\nmodule ear(side = 1) {\n    translate([1, side * 10, 12])\n    rotate([0, 0, side * -20])\n    linear_extrude(height = wall, scale = 0.8, center = true)\n    polygon(points = [[0, 0], [12, 6], [0, 18]]);\n}\n\nmodule neck() {\n    translate([-5, 0, 2])\n    rotate([-90, 0, 0])\n    cylinder(h = 10, d1 = 14, d2 = 10, $fn = 32);\n}\n\nmodule torso() {\n    // Chest\n    translate([-15, 0, 0])\n    rotate([0, 0, 0])\n    scale([1.2, 1, 1])\n    sphere(d = 18);\n\n    // Ribcage taper\n    translate([-25, 0, -2])\n    rotate([0, 0, 0])\n    cylinder(h = 25, d1 = 16, d2 = 12, $fn = 32);\n}\n\nmodule leg(pos = [0, 0, 0], angle = 0) {\n    translate(pos)\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 12, d = 6, $fn = 16);\n\n        // Lower leg\n        translate([12, 0, -10])\n        rotate([0, 90, 10])\n        cylinder(h = 14, d = 5, $fn = 16);\n\n        // Paw\n        translate([12 + 14, 0, -22])\n        sphere(d = 7);\n    }\n}\n\nmodule tail() {\n    translate([-42, 0, 3])\n    rotate([0, 0, 10])\n    rotate([0, 90, 0])\n    cylinder(h = 25, d1 = 6, d2 = 4, $fn = 16);\n}\n\n// Assembly\nhead();\near(1);\near(-1);\nneck();\ntorso();\ntail();\n\n// Legs: front pair\nleg(pos = [-8, 7, -3], angle = 15);\nleg(pos = [-8, -7, -3], angle = -15);\n\n// Legs: rear pair\nleg(pos = [-32, 6, -2], angle = 10);\nleg(pos = [-32, -6, -2], angle = -10);",
    "renders": true
  },
  {
    "household_item": "dipsa",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nbody_len = 90;\nbody_dia = 28;\nneck_len = 15;\nhead_len = 25;\nhead_dia = 18;\n\n// Wall thickness for printing\nwall = 2;\n\nmodule body_shell() {\n    difference() {\n        cylinder(h=body_len, d=body_dia, center=true);\n        // Hollow core\n        translate([0,0,-body_len/2])\n            cylinder(h=body_len+1, d=body_dia-wall*2, center=false);\n    }\n}\n\nmodule neck() {\n    translate([0, 0, body_len/2 + neck_len/2])\n        difference() {\n            cylinder(h=neck_len, d1=body_dia*0.6, d2=body_dia*0.45, center=true);\n            translate([0,0,-neck_len/2-1])\n                cylinder(h=neck_len+2, d1=body_dia*0.6-wall*2, d2=body_dia*0.45-wall*2, center=false);\n        }\n}\n\nmodule head() {\n    translate([0, 0, body_len/2 + neck_len + head_len/2])\n        difference() {\n            cylinder(h=head_len, d=head_dia, center=true);\n            translate([0,0,-head_len/2-1])\n                cylinder(h=head_len+2, d=head_dia-wall*2, center=false);\n        }\n}\n\nmodule snout() {\n    translate([0, head_dia/2, body_len/2 + neck_len + head_len/2])\n        difference() {\n            sphere(d=head_dia*0.8);\n            translate([0,0,-head_dia/2-1])\n                sphere(d=head_dia*0.8-wall*2);\n        }\n}\n\nmodule eye() {\n    sphere(d=3);\n}\n\nmodule eyes() {\n    for (x=[-head_dia/5, head_dia/5])\n        translate([x, head_dia/2 + 2, body_len/2 + neck_len + head_len/2 + 5])\n            eye();\n}\n\nmodule fin_profile() {\n    polygon(points=[[0,0],[12,0],[10,25],[0,20]]);\n}\n\nmodule fin() {\n    difference() {\n        linear_extrude(height=3) fin_profile();\n        translate([wall,wall,0])\n            linear_extrude(height=3.1) offset(r=-wall) fin_profile();\n    }\n}\n\nmodule fins() {\n    // Tail fin\n    translate([0,0,-body_len/2])\n        rotate([90,0,0])\n            fin();\n    // Dorsal fins along back\n    for (z=[body_len*0.3, -body_len*0.1, -body_len*0.5])\n        translate([0,0,z])\n            rotate([0,0,180])\n                rotate([90,0,0])\n                    scale([0.7,0.7,1])\n                        fin();\n}\n\nmodule tail() {\n    difference() {\n        // Tail fluke\n        union() {\n            translate([0,0,-body_len/2-10])\n                rotate([90,0,0])\n                    scale([1,0.6,1])\n                        cylinder(h=20, d1=body_dia*1.2, d2=body_dia*0.6, center=true);\n            translate([0,0,-body_len/2-10])\n                rotate([90,0,0])\n                    scale([1,0.6,1])\n                        cylinder(h=20, d1=body_dia*1.2, d2=body_dia*0.6, center=true);\n        }\n        // Hollow tail\n        translate([0,0,-body_len/2-10])\n            rotate([90,0,0])\n                scale([1,0.6,1])\n                    cylinder(h=20+wall, d1=body_dia*1.2-wall*2, d2=body_dia*0.6-wall*2, center=true);\n    }\n}\n\nmodule dipsa() {\n    union() {\n        body_shell();\n        neck();\n        head();\n        snout();\n        eyes();\n        fins();\n        tail();\n    }\n}\n\ndipsa();",
    "renders": true
  },
  {
    "household_item": "dryad",
    "openscad_code": "// Dryad - tree spirit in realistic style\n// Medium complexity, 3D printable, ~70mm tall\n\nmodule dryad() {\n    // Base tree trunk\n    union() {\n        // Main trunk\n        difference() {\n            cylinder(h=40, d1=20, d2=15, $fn=32);\n            translate([0, 0, 35])\n                cylinder(h=10, d1=12, d2=10, $fn=32);\n        }\n        \n        // Roots\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n                translate([0, -10, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=15, d1=6, d2=4, $fn=16);\n        }\n    }\n    \n    // Torso emerging from trunk\n    translate([0, 0, 42]) {\n        // Body\n        difference() {\n            cylinder(h=25, d1=12, d2=8, $fn=32);\n            translate([0, 0, 20])\n                cylinder(h=10, d1=6, d2=4, $fn=32);\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 8])\n                rotate([0, 0, side * 30])\n                    cylinder(h=15, d1=4, d2=3, $fn=16);\n                    \n            translate([side * 12, 0, 18])\n                rotate([0, 0, side * 45])\n                    cylinder(h=12, d1=3, d2=2, $fn=16);\n        }\n        \n        // Head\n        translate([0, 0, 28]) {\n            sphere(d=10, $fn=32);\n            \n            // Hair - bark texture\n            for(i = [0:15:359]) {\n                rotate([0, 0, i])\n                    translate([5, 0, 0])\n                        cylinder(h=8, d1=2, d2=1, $fn=8);\n            }\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([side * 2.5, -3.5, 2])\n                    sphere(d=1.5, $fn=16);\n            }\n            \n            // Nose\n            translate([0, -4, 0])\n                sphere(d=2, $fn=16);\n        }\n    }\n    \n    // Branches growing from head/shoulders area\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([0, 8, 35]) {\n                rotate([20, 0, 0])\n                    cylinder(h=20, d1=4, d2=2, $fn=16);\n                    \n                // Leaves\n                translate([0, 0, 20])\n                    scale([1, 1.5, 0.5])\n                        sphere(d=6, $fn=16);\n            }\n    }\n    \n    // Additional smaller branches\n    for(i = [30:60:359]) {\n        rotate([0, 0, i])\n            translate([0, 12, 30]) {\n                rotate([30, 0, 0])\n                    cylinder(h=15, d1=3, d2=1.5, $fn=16);\n                    \n                translate([0, 0, 15])\n                    scale([0.8, 1.2, 0.4])\n                        sphere(d=4, $fn=16);\n            }\n    }\n}\n\n// Main model\ndryad();",
    "renders": true
  },
  {
    "household_item": "encantado",
    "openscad_code": "// Encantado (Amazon river dolphin) in realistic style\n// Medium complexity (~120 lines)\n\n$fn = 50;           // Smooth curves\nbody_length = 70;   // mm total length\nbody_diameter = 25; // mm max diameter\nwall = 2;           // mm wall thickness for printing\n\nmodule main_body() {\n    // Main tapered body\n    hull() {\n        // Front (snout)\n        translate([body_length/2-5, 0, 0])\n            scale([1, 0.5, 0.5])\n            sphere(d=10);\n        // Main bulk\n        translate([-body_length/2+10, 0, 0])\n            scale([1, 1, 0.8])\n            sphere(d=body_diameter);\n    }\n}\n\nmodule dorsal_fin() {\n    // Triangular dorsal fin on back\n    translate([-body_length/4, 0, body_diameter/2-2])\n        rotate([0, 0, 0])\n            linear_extrude(height=wall+1)\n                polygon(points=[[0,0], [8,0], [4,12]]);\n}\n\nmodule pectoral_fin(side) {\n    // Side fins (pectoral fins)\n    translate([body_length/4, side*(body_diameter/2+1), -5])\n        rotate([0, side*20, 90])\n            scale([1, 0.5, 0.3])\n                cylinder(h=15, d1=8, d2=4);\n}\n\nmodule tail_flukes() {\n    // Horizontal tail flukes\n    union() {\n        // Left fluke\n        translate([-body_length/2-10, -12, 0])\n            rotate([0, 0, -15])\n                scale([1, 0.2, 0.1])\n                    sphere(d=20);\n        // Right fluke\n        translate([-body_length/2-10, 12, 0])\n            rotate([0, 0, 15])\n                scale([1, 0.2, 0.1])\n                    sphere(d=20);\n        // Tail stock\n        translate([-body_length/2-5, 0, 0])\n            scale([0.5, 1, 0.3])\n                sphere(d=15);\n    }\n}\n\nmodule beak() {\n    // Long thin beak/snout\n    translate([body_length/2-2, 0, 0])\n        rotate([0, -10, 0])\n            cylinder(h=15, d1=6, d2=2);\n}\n\nmodule blowhole() {\n    // Small blowhole on top of head\n    translate([body_length/4, 0, body_diameter/2-1])\n        cylinder(h=2, d=3);\n}\n\nmodule eye(side) {\n    // Eye indentation (avoid overhang)\n    translate([body_length/3, side*(body_diameter/4), body_diameter/4])\n        rotate([0, 0, 0])\n            sphere(d=4);\n}\n\n// Assembly\nunion() {\n    // Main body with hollow center\n    difference() {\n        main_body();\n        // Hollow interior\n        translate([0, 0, 0])\n            scale([0.8, 0.8, 0.8])\n                main_body();\n    }\n    \n    // Fins\n    dorsal_fin();\n    pectoral_fin(1);   // Right fin\n    pectoral_fin(-1);  // Left fin\n    tail_flukes();\n    \n    // Head features\n    beak();\n    blowhole();\n    \n    // Eyes (recessed)\n    difference() {\n        eye(1);    // Right eye\n        translate([body_length/3+2, 7, body_diameter/4])\n            sphere(d=2);\n    }\n    difference() {\n        eye(-1);   // Left eye\n        translate([body_length/3+2, -7, body_diameter/4])\n            sphere(d=2);\n    }\n    \n    // Small melon bump on forehead\n    translate([body_length/3+5, 0, body_diameter/3])\n        sphere(d=6);\n}",
    "renders": true
  },
  {
    "household_item": "erymanthian",
    "openscad_code": "// Erymanthian Boar - Medium complexity realistic model\n// 3D printable, ~80mm long, no overhangs\n\n$fn = 32;\n\nmodule body() {\n    // Main body - elongated oval shape\n    union() {\n        // Upper torso\n        scale([1.2, 0.8, 0.6])\n            sphere(d = 45);\n        \n        // Lower abdomen\n        translate([0, 0, -10])\n            scale([1.3, 0.9, 0.5])\n                sphere(d = 40);\n        \n        // Rear rounded section\n        translate([-20, 0, 0])\n            scale([1, 1.1, 0.7])\n                sphere(d = 35);\n    }\n}\n\nmodule head() {\n    // Boar head with snout\n    union() {\n        // Head base\n        translate([25, 0, 15])\n            rotate([0, -10, 0])\n            scale([0.7, 0.6, 0.6])\n                sphere(d = 30);\n        \n        // Snout extension\n        translate([35, 0, 12])\n            scale([1.2, 0.6, 0.5])\n                cylinder(h = 15, d1 = 15, d2 = 10);\n    }\n}\n\nmodule legs() {\n    // Create four legs\n    module single_leg(side, front) {\n        translate([front * 18, side * 12, -15])\n            rotate([0, 0, side * 5])\n            scale([0.3, 0.3, 1])\n                cylinder(h = 25, d1 = 12, d2 = 8);\n    }\n    \n    single_leg(1, 1);   // Front right\n    single_leg(-1, 1);  // Front left\n    single_leg(1, -1);  // Rear right\n    single_leg(-1, -1); // Rear left\n}\n\nmodule tusks() {\n    // Curved tusks from lower jaw\n    module single_tusk(side) {\n        translate([30, side * 8, 8])\n            rotate([0, 0, side * 15])\n            rotate([90, 0, 0])\n            cylinder(h = 12, d1 = 6, d2 = 3);\n    }\n    \n    single_tusk(1);\n    single_tusk(-1);\n}\n\nmodule ears() {\n    // Pointed ears\n    module single_ear(side) {\n        translate([20, side * 12, 25])\n            rotate([0, 0, side * -20])\n            scale([0.3, 1, 0.8])\n                cone(h = 8, d1 = 8, d2 = 4);\n    }\n    \n    single_ear(1);\n    single_ear(-1);\n}\n\nmodule tail() {\n    // Short curled tail\n    translate([-25, 0, 12])\n        rotate([0, 90, 0])\n        rotate([0, 0, 90])\n        scale([0.5, 0.5, 0.5])\n            cylinder(h = 15, d = 3);\n}\n\nmodule mane() {\n    // Ridge of bristles along spine\n    for(i = [-20:5:20]) {\n        translate([i, 0, 25 - abs(i) * 0.3])\n            rotate([0, 0, sin(i) * 10])\n            scale([0.3, 0.1, 1])\n                cylinder(h = 8, d = 4);\n    }\n}\n\n// Construct the complete boar\nunion() {\n    body();\n    head();\n    legs();\n    tusks();\n    ears();\n    tail();\n    mane();\n}",
    "renders": true
  },
  {
    "household_item": "fext",
    "openscad_code": "// Realistic FEXT (Fire Extinguisher) - Medium complexity\n// Size: ~80mm tall, 3D printable without supports\n\nmodule handle() {\n    // U-shaped pull handle\n    difference() {\n        // Main handle body\n        translate([0, 0, 10])\n            rotate([0, 90, 0])\n            cylinder(h=20, d=8, $fn=16);\n        \n        // Center hole\n        translate([0, 0, 10])\n            rotate([0, 90, 0])\n            cylinder(h=22, d=4, $fn=16);\n    }\n    \n    // Handle base mount\n    translate([0, -10, 0])\n        cylinder(h=5, d=12, $fn=16);\n}\n\nmodule safety_pin() {\n    // Safety pin with ring\n    rotate([90, 0, 0])\n        translate([0, 0, -15])\n        difference() {\n            // Pin shaft\n            cylinder(h=30, d=3, $fn=12);\n            \n            // Tapered end\n            translate([0, 0, -5])\n                cylinder(h=10, d1=3, d2=2, $fn=12);\n        }\n    \n    // Pull ring\n    translate([0, 15, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=2, d=12, $fn=32);\n            cylinder(h=3, d=8, $fn=32);\n        }\n}\n\nmodule nozzle() {\n    // Main nozzle body\n    cylinder(h=15, d1=12, d2=8, $fn=16);\n    \n    // Nozzle tip\n    translate([0, 0, 15])\n        cylinder(h=8, d=6, $fn=12);\n    \n    // Hose connection ridge\n    translate([0, 0, -3])\n        cylinder(h=3, d=14, $fn=16);\n}\n\nmodule tank() {\n    // Main tank body\n    cylinder(h=60, d=40, $fn=32);\n    \n    // Top dome\n    translate([0, 0, 60])\n        sphere(d=40, $fn=32);\n    \n    // Bottom curve\n    translate([0, 0, 0])\n        sphere(d=40, $fn=32);\n    \n    // Pressure gauge mount\n    translate([20, 0, 45])\n        rotate([90, 0, 0])\n        cylinder(h=3, d=8, $fn=16);\n}\n\nmodule pressure_gauge() {\n    // Gauge body\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h=5, d=12, $fn=16);\n            translate([0, 0, -1])\n                cylinder(h=7, d=10, $fn=16);\n        }\n    \n    // Gauge face\n    translate([0, 2.6, 0])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d=10, $fn=32);\n}\n\nmodule label_band() {\n    // Recessed label area\n    translate([0, 0, 25])\n        difference() {\n            cylinder(h=15, d=42, $fn=32);\n            cylinder(h=16, d=38, $fn=32);\n        }\n}\n\n// Main assembly\nunion() {\n    // Tank assembly\n    tank();\n    \n    // Label band\n    label_band();\n    \n    // Pressure gauge\n    translate([20, 0, 45])\n        pressure_gauge();\n    \n    // Hose connection point\n    translate([0, 0, 70])\n        cylinder(h=8, d=10, $fn=16);\n    \n    // Hose to nozzle\n    translate([0, 0, 78])\n        rotate([90, 0, 0])\n        cylinder(h=25, d=6, $fn=16);\n    \n    // Nozzle assembly\n    translate([25, 0, 78])\n        rotate([90, 0, 0])\n        nozzle();\n    \n    // Handle assembly\n    translate([0, 0, 78])\n        handle();\n    \n    // Safety pin\n    translate([0, 10, 78])\n        safety_pin();\n}",
    "renders": true
  },
  {
    "household_item": "gaasyendietha",
    "openscad_code": "// Gaasyendietha - Horned Serpent (Realistic Style, Medium Complexity)\n// Based on Seneca mythology - a dragon-like creature with horns and scales\n\n$fn = 36;  // Smooth curves for realistic appearance\n\nmodule horned_serpent() {\n    // Main body - elongated serpentine form\n    union() {\n        // Head section\n        translate([0, 0, 15]) {\n            // Snout\n            translate([0, 0, -5]) \n                scale([1.2, 1, 1]) \n                    sphere(d=20);\n            \n            // Main head\n            sphere(d=25);\n            \n            // Horns - two curved horns\n            for(i = [-1, 1]) {\n                translate([i*8, 0, 8]) {\n                    rotate([0, i*20, 0]) \n                        rotate([90, 0, 0]) \n                            cylinder(h1=15, h2=25, r1=3, r2=1);\n                }\n            }\n            \n            // Eyes\n            for(i = [-1, 1]) {\n                translate([i*7, 8, 3]) \n                    sphere(d=4);\n            }\n            \n            // Nostrils\n            for(i = [-1, 1]) {\n                translate([i*3, 10, -2]) \n                    cylinder(h=5, r=1.5);\n            }\n        }\n        \n        // Neck transition\n        translate([0, 0, 5]) \n            cylinder(h=10, r1=12, r2=10);\n        \n        // Body segments - 8 segments with scales\n        for(i = [0:7]) {\n            translate([0, 0, -i*8-5]) {\n                // Main body segment\n                scale([1 - i*0.05, 1 - i*0.05, 1]) \n                    cylinder(h=8, r1=10 - i*1.2, r2=10 - (i+1)*1.2);\n                \n                // Scales - 6 per segment\n                for(j = [0:5]) {\n                    rotate([0, 0, j*60]) {\n                        translate([0, 10 - i*0.6, -2]) {\n                            scale([0.8, 0.4, 0.3]) \n                                sphere(d=8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail - tapering to a point\n        translate([0, 0, -65]) {\n            for(i = [0:4]) {\n                translate([0, 0, -i*6]) {\n                    scale([1 - i*0.15, 1 - i*0.15, 1]) \n                        cylinder(h=6, r1=5 - i*0.8, r2=5 - (i+1)*0.8);\n                }\n            }\n            \n            // Tail spike\n            translate([0, 0, -30]) \n                rotate([90, 0, 0]) \n                    cylinder(h=8, r1=3, r2=0);\n        }\n        \n        // Legs - four short legs with claws\n        for(side = [-1, 1]) {\n            for(pos = [1, 4]) {\n                translate([side*8, 0, -pos*15]) {\n                    // Upper leg\n                    rotate([0, side*20, 0]) \n                        cylinder(h=8, r1=4, r2=3);\n                    \n                    // Lower leg\n                    translate([0, 0, -8]) {\n                        rotate([0, side*30, 0]) \n                            cylinder(h=6, r1=3, r2=2);\n                        \n                        // Foot\n                        translate([0, 0, -6]) {\n                            scale([1.5, 1, 0.5]) \n                                sphere(d=6);\n                            \n                            // Claws - three per foot\n                            for(claw = [-1, 0, 1]) {\n                                translate([claw*1.5, 1, -1]) {\n                                    rotate([90, 0, 0]) \n                                        cylinder(h=3, r1=1, r2=0.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Wing-like fins - decorative ridges\n        for(side = [-1, 1]) {\n            translate([side*12, 0, -25]) {\n                rotate([0, side*30, 0]) {\n                    // Main fin\n                    scale([0.3, 1, 1.5]) \n                        cube([20, 3, 25]);\n                    \n                    // Fin supports\n                    for(fin = [0:2]) {\n                        translate([0, 0, -fin*8]) {\n                            rotate([0, side*20, 0]) \n                                cube([15, 2, 1]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the complete model scaled for 3D printing\nscale([0.7, 0.7, 0.7]) \n    horned_serpent();",
    "renders": true
  },
  {
    "household_item": "gargouille",
    "openscad_code": "// Gargouille - Realistic style, medium complexity\n// Overall height ~70mm, wingspan ~80mm, designed for 3D printing\n\n$fn = 36;  // Smooth curves for realistic look\n\nmodule main_body() {\n    // Central torso - elongated egg shape\n    translate([0, 0, 25])\n    scale([1, 0.8, 1.6])\n    sphere(r=15);\n    \n    // Chest plate - slightly forward protrusion\n    translate([0, 10, 25])\n    scale([0.8, 0.3, 0.9])\n    sphere(r=14);\n    \n    // Back ridge - spinal detail\n    for(i=[-10:3:10]) {\n        translate([0, -12, 25+i])\n        scale([0.8, 0.4, 0.3])\n        sphere(r=5);\n    }\n}\n\nmodule head() {\n    // Main head - slightly flattened sphere\n    translate([0, 20, 40])\n    scale([1.1, 0.9, 0.7])\n    sphere(r=12);\n    \n    // Snout - tapered cylinder\n    translate([0, 30, 38])\n    rotate([30, 0, 0])\n    cylinder(h=15, r1=8, r2=3);\n    \n    // Nostrils\n    for(side=[-1, 1]) {\n        translate([side*3, 34, 36])\n        rotate([30, 0, 0])\n        cylinder(h=5, r=1.5);\n    }\n    \n    // Eyes - slightly inset\n    for(side=[-1, 1]) {\n        translate([side*5, 18, 42])\n        difference() {\n            sphere(r=3);\n            translate([0, 1, 0])\n            sphere(r=3.2);\n        }\n    }\n    \n    // Horns - curved cylinders\n    for(side=[-1, 1]) {\n        translate([side*6, 15, 48])\n        rotate([0, side*20, 0])\n        cylinder(h=8, r=2);\n        translate([side*6, 15, 56])\n        rotate([0, side*30, 0])\n        cylinder(h=6, r=1.5);\n    }\n}\n\nmodule wings() {\n    module wing_half(side) {\n        // Main wing structure\n        translate([side*15, -5, 35])\n        rotate([0, 0, side*20])\n        scale([1, 0.2, 0.8])\n        cylinder(h=30, r1=8, r2=3);\n        \n        // Wing membrane supports\n        for(i=[0:15:45]) {\n            translate([side*(15+sin(i)*20), -5, 35+cos(i)*15])\n            rotate([0, 0, side*(20-i/3)])\n            cylinder(h=20-i/3, r=1.5);\n        }\n        \n        // Wing membrane - thin extrusion\n        translate([side*25, -5, 35])\n        rotate([0, 90, 0])\n        linear_extrude(height=0.8)\n        polygon(points=[\n            [0, 0],\n            [side*25, -15],\n            [side*25, 15],\n            [0, 0]\n        ]);\n    }\n    \n    wing_half(1);\n    wing_half(-1);\n}\n\nmodule legs() {\n    module leg_pair(side) {\n        // Upper leg\n        translate([side*8, 0, 15])\n        rotate([0, side*10, 0])\n        cylinder(h=12, r=4);\n        \n        // Lower leg\n        translate([side*8, 0, 8])\n        rotate([0, side*30, 0])\n        cylinder(h=10, r=3);\n        \n        // Foot - simple block\n        translate([side*8, 2, 2])\n        cube([side*6, 4, 4], center=true);\n        \n        // Toes\n        for(toe=[-1.5, 0, 1.5]) {\n            translate([side*(8+toe), 4, 1])\n            cylinder(h=2, r=0.8);\n        }\n    }\n    \n    leg_pair(1);\n    leg_pair(-1);\n}\n\nmodule tail() {\n    // Tail base\n    translate([0, -18, 20])\n    rotate([0, 10, 0])\n    cylinder(h=15, r=5);\n    \n    // Tail segments\n    for(i=[0:10:40]) {\n        translate([0, -18-i*0.3, 20-i*0.2])\n        rotate([0, 10+i, 0])\n        scale([1-i*0.01, 1-i*0.01, 1])\n        cylinder(h=5, r=5-i*0.1);\n    }\n    \n    // Tail tip\n    translate([0, -35, 15])\n    sphere(r=3);\n}\n\nmodule water_spout() {\n    // Spout opening\n    translate([0, 36, 34])\n    rotate([45, 0, 0])\n    cylinder(h=8, r=2);\n    \n    // Spout lip\n    translate([0, 42, 37])\n    rotate([45, 0, 0])\n    cylinder(h=1, r=3);\n}\n\n// Assemble the gargouille\nunion() {\n    main_body();\n    head();\n    wings();\n    legs();\n    tail();\n    water_spout();\n}",
    "renders": true
  },
  {
    "household_item": "geryon",
    "openscad_code": "// Geryon - three-bodied giant with three heads and six arms\n// Scaled for 3D printing, 80mm tall, no overhangs >45°\n\n// Overall scale factor\noverall_scale = 0.35;\n\n// Wall thickness for printing\nwall = 1.2;\n\nmodule geryon() {\n    // Central torso\n    translate([0, 0, 0])\n        scale([1, 1.2, 1.5])\n            sphere(d=20 * overall_scale, $fn=32);\n\n    // Three torsos radiating from center\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a])\n            translate([15 * overall_scale, 0, 0])\n                scale([0.8, 0.7, 1.1])\n                    sphere(d=18 * overall_scale, $fn=32);\n    }\n\n    // Heads on each torso\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a])\n            translate([15 * overall_scale, 0, 22 * overall_scale])\n                scale([0.7, 0.7, 0.8])\n                    sphere(d=16 * overall_scale, $fn=32);\n\n        // Snout\n        rotate([0, 0, a])\n            translate([22 * overall_scale, 0, 22 * overall_scale])\n                scale([1.2, 0.8, 0.6])\n                    sphere(d=8 * overall_scale, $fn=16);\n    }\n\n    // Arms (two per torso)\n    for (a = [0, 120, 240]) {\n        // Left arm\n        rotate([0, 0, a])\n            translate([12 * overall_scale, 8 * overall_scale, 10 * overall_scale])\n                rotate([0, 90, 0])\n                    cylinder(h=12 * overall_scale, d1=6 * overall_scale, d2=5 * overall_scale, $fn=8);\n\n        // Right arm\n        rotate([0, 0, a])\n            translate([12 * overall_scale, -8 * overall_scale, 10 * overall_scale])\n                rotate([0, 90, 0])\n                    cylinder(h=12 * overall_scale, d1=6 * overall_scale, d2=5 * overall_scale, $fn=8);\n    }\n\n    // Legs (six legs, two per torso)\n    for (a = [0, 60, 120, 180, 240, 300]) {\n        rotate([0, 0, a])\n            translate([8 * overall_scale * cos(30), 8 * overall_scale * sin(30), -15 * overall_scale])\n                cylinder(h=20 * overall_scale, d1=8 * overall_scale, d2=6 * overall_scale, $fn=8);\n    }\n\n    // Shield on central torso\n    translate([0, 0, 5 * overall_scale])\n        rotate([90, 0, 0])\n            cylinder(h=wall, d1=25 * overall_scale, d2=20 * overall_scale, $fn=32);\n\n    // Club in each right hand\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a])\n            translate([24 * overall_scale, -8 * overall_scale, 10 * overall_scale])\n                rotate([90, 0, 0])\n                    cylinder(h=18 * overall_scale, d=4 * overall_scale, $fn=8);\n    }\n}\n\n// Generate the model\ngeryon();",
    "renders": true
  },
  {
    "household_item": "ghoul",
    "openscad_code": "// Ghoul Figure - Realistic Medium Complexity\n// 3D printable at ~75mm height\n\n$fn = 36; // Smooth curves for printing\n\n// Overall scale factor\nscale_factor = 0.75;\n\n// Main body module\nmodule ghoul_body() {\n    // Pelvis\n    translate([0, 0, 25]) {\n        scale([0.8, 0.6, 0.4])\n            sphere(20);\n    }\n    \n    // Spine\n    for(i = [1:4]) {\n        translate([0, 0, 30 + i*8]) {\n            scale([0.6 - i*0.05, 0.5 - i*0.05, 0.8])\n                cylinder(h=7, r=8);\n        }\n    }\n    \n    // Ribcage\n    translate([0, 0, 55]) {\n        scale([1.2, 0.8, 1.4])\n            sphere(15);\n    }\n    \n    // Sternum\n    translate([0, 8, 55]) {\n        scale([0.3, 0.2, 1.2])\n            cube([10, 5, 20], center=true);\n    }\n}\n\n// Head module\nmodule ghoul_head() {\n    // Skull\n    translate([0, 0, 75]) {\n        scale([0.8, 0.9, 1.1])\n            sphere(15);\n    }\n    \n    // Jaw\n    translate([0, 12, 70]) {\n        rotate([0, 10, 0])\n            scale([0.7, 0.6, 0.4])\n                cube([20, 15, 8], center=true);\n    }\n    \n    // Eye sockets\n    for(x = [-8, 8]) {\n        translate([x, 5, 80]) {\n            rotate([0, -20, 0])\n                scale([1, 1.5, 0.5])\n                    sphere(4);\n        }\n    }\n    \n    // Nose cavity\n    translate([0, 12, 78]) {\n        scale([1, 0.5, 0.7])\n            sphere(3);\n    }\n}\n\n// Arm module\nmodule ghoul_arm(side) {\n    // Shoulder\n    translate([side * 18, 0, 60]) {\n        sphere(8);\n    }\n    \n    // Upper arm\n    translate([side * 25, 0, 55]) {\n        rotate([0, 0, side * 20])\n            cylinder(h=25, r=5);\n    }\n    \n    // Elbow\n    translate([side * 35, 0, 40]) {\n        sphere(6);\n    }\n    \n    // Forearm\n    translate([side * 42, 0, 32]) {\n        rotate([0, 0, side * -30])\n            cylinder(h=20, r=4);\n    }\n    \n    // Hand\n    translate([side * 50, 0, 22]) {\n        scale([1.5, 0.8, 0.5])\n            sphere(5);\n        \n        // Fingers\n        for(i = [0:3]) {\n            translate([side * (3 + i*2), 0, 18]) {\n                rotate([side * 20, 0, 0])\n                    cylinder(h=8, r=1.5);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule ghoul_leg(side) {\n    // Hip\n    translate([side * 10, 0, 25]) {\n        sphere(7);\n    }\n    \n    // Thigh\n    translate([side * 12, 0, 15]) {\n        rotate([0, side * 10, 0])\n            cylinder(h=20, r=5);\n    }\n    \n    // Knee\n    translate([side * 14, 0, 5]) {\n        sphere(6);\n    }\n    \n    // Shin\n    translate([side * 16, 0, -5]) {\n        cylinder(h=20, r=4);\n    }\n    \n    // Foot\n    translate([side * 18, 5, -18]) {\n        scale([2, 3, 1])\n            cube([12, 8, 5], center=true);\n    }\n}\n\n// Spine protrusions\nmodule spine_bones() {\n    for(i = [0:5]) {\n        translate([0, -8 - i*2, 45 - i*5]) {\n            rotate([0, -30, 0])\n                scale([1, 1.5, 0.3])\n                    cube([8, 3, 2], center=true);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        ghoul_body();\n        ghoul_head();\n        \n        // Arms\n        ghoul_arm(1);\n        ghoul_arm(-1);\n        \n        // Legs\n        ghoul_leg(1);\n        ghoul_leg(-1);\n        \n        // Spine details\n        spine_bones();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "girtablilu",
    "openscad_code": "// Girtablilu - Mesopotamian scorpion-man\n// Scaled for 3D printing, ~80 mm tall\n// Uses only basic primitives and transformations\n\nmodule scorpion_tail(segments=6) {\n    union() {\n        // Tail segments\n        for(i=[0:segments-1]) {\n            translate([0, 0, i*6])\n            scale([1-0.08*i, 1-0.08*i, 1])\n            cylinder(h=6, d1=8-0.8*i, d2=7-0.7*i, $fn=8);\n        }\n        \n        // Stinger\n        translate([0, 0, segments*6])\n        cylinder(h=12, d1=4, d2=1, $fn=8);\n    }\n}\n\nmodule pincer() {\n    difference() {\n        // Main claw\n        union() {\n            translate([-8, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=20, d1=4, d2=8, $fn=8);\n            \n            translate([-8, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=20, d1=8, d2=12, $fn=8);\n        }\n        \n        // Claw notch\n        translate([-8, 0, 4])\n        rotate([0, 90, 0])\n        cylinder(h=20, d=3, $fn=8);\n    }\n}\n\nmodule legs(count=4) {\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*60-90])\n        translate([0, 0, 10])\n        rotate([75, 0, 0])\n        cylinder(h=15, d1=3, d2=2, $fn=6);\n    }\n}\n\n// Body - human torso\ntranslate([0, 0, 0])\nunion() {\n    // Chest\n    translate([0, 0, 20])\n    scale([1.2, 0.8, 1.5])\n    sphere(d=20, $fn=12);\n    \n    // Abdomen\n    translate([0, 0, 10])\n    scale([1, 0.9, 1.2])\n    sphere(d=18, $fn=12);\n    \n    // Waist\n    translate([0, 0, 0])\n    cylinder(h=10, d=16, $fn=8);\n}\n\n// Head\ntranslate([0, 0, 35])\nscale([0.9, 0.8, 1.1])\nsphere(d=16, $fn=12);\n\n// Arms\ntranslate([12, 0, 28])\nrotate([0, 0, 20])\ncylinder(h=20, d=5, $fn=8);\n\ntranslate([-12, 0, 28])\nrotate([0, 0, -20])\ncylinder(h=20, d=5, $fn=8);\n\n// Scorpion body\ntranslate([0, 0, -10])\nunion() {\n    // Thorax\n    translate([0, 0, -5])\n    scale([1.5, 1, 0.8])\n    sphere(d=25, $fn=12);\n    \n    // Legs\n    legs();\n    \n    // Tail\n    translate([0, -12, 0])\n    rotate([110, 0, 0])\n    scorpion_tail();\n}\n\n// Pincers\ntranslate([12, 0, 28])\nrotate([0, 0, 90])\nrotate([0, 110, 0])\npincer();\n\ntranslate([-12, 0, 28])\nrotate([0, 0, -90])\nmirror([1, 0, 0])\nrotate([0, 110, 0])\npincer();",
    "renders": true
  },
  {
    "household_item": "gorgon",
    "openscad_code": "// Gorgon Medusa - Medium Complexity\n// Designed for 3D printing - no overhangs, wall thickness 2mm\n// Overall height: 80mm\n\n$fn = 36;  // Smooth curves for printing\n\n// Main body assembly\nmodule gorgon() {\n    // Head\n    translate([0,0,50]) rotate([0,180,0]) head();\n    \n    // Torso\n    torso();\n    \n    // Arms\n    translate([15,0,35]) rotate([0,0,-20]) arm();\n    translate([-15,0,35]) rotate([0,0,20]) mirror([1,0,0]) arm();\n    \n    // Snake tail base\n    translate([0,0,0]) snake_tail();\n}\n\n// Head with snake hair\nmodule head() {\n    // Main head sphere\n    difference() {\n        sphere(d=22);\n        \n        // Eye sockets\n        translate([7,9,3]) sphere(d=5);\n        translate([-7,9,3]) sphere(d=5);\n        \n        // Mouth cavity\n        translate([0,5,-6]) cube([10,8,8], center=true);\n    }\n    \n    // Eyes\n    translate([7,9,3]) sphere(d=2);\n    translate([-7,9,3]) sphere(d=2);\n    \n    // Nose bridge\n    translate([0,10,2]) cube([3,2,4], center=true);\n    \n    // Snake hair - 8 snakes wrapping around\n    for(i=[0:7]) {\n        rotate([0,0,i*45]) \n        translate([11,0,0]) \n        rotate([0,90,0])\n        snake_hair(8 + i*2);\n    }\n    \n    // Lower jaw\n    translate([0,2,-10]) cube([12,6,6], center=true);\n}\n\n// Snake hair strand\nmodule snake_hair(length) {\n    // Snake body segments\n    for(seg=[0:3]) {\n        translate([seg*length/4,0,0]) \n        rotate([0,0,seg*20])\n        cylinder(h=length/4, d1=3, d2=2.5);\n    }\n    \n    // Snake head\n    translate([length,0,0]) rotate([0,0,80]) cylinder(h=4, d1=2.5, d2=1);\n}\n\n// Torso with armor details\nmodule torso() {\n    // Upper torso\n    cylinder(h=20, d1=15, d2=18);\n    \n    // Chest armor plates\n    for(row=[0:1]) {\n        for(col=[0:2]) {\n            translate([-10 + col*10, 10 - row*5, 40 - row*5]) \n            cube([6,2,3], center=true);\n        }\n    }\n    \n    // Belt\n    translate([0,5,30]) cylinder(h=3, d=20);\n    \n    // Lower torso transition\n    cylinder(h=15, d1=18, d2=12);\n}\n\n// Arm\nmodule arm() {\n    // Upper arm\n    translate([0,0,0]) cylinder(h=12, d=6);\n    \n    // Elbow joint\n    translate([0,0,-12]) sphere(d=5);\n    \n    // Lower arm\n    translate([0,0,-24]) cylinder(h=12, d=5);\n    \n    // Hand\n    translate([0,0,-36]) scale([1,0.7,0.3]) sphere(d=8);\n    \n    // Snake bracelet\n    for(i=[0:2]) {\n        translate([0,0,-5 - i*5]) \n        rotate([0,0,i*120])\n        cylinder(h=2, d=7);\n    }\n}\n\n// Snake tail body\nmodule snake_tail() {\n    // Segments getting smaller\n    for(seg=[0:7]) {\n        translate([0,0,-seg*8]) \n        cylinder(h=8, d1=12 - seg, d2=11 - seg);\n    }\n    \n    // Tail tip\n    translate([0,0,-60]) \n    cylinder(h=10, d1=4, d2=0.1);\n    \n    // Belly scales\n    for(ring=[0:7]) {\n        for(scale=[0:11]) {\n            rotate([0,0,scale*30])\n            translate([6,0,-ring*8]) \n            scale([1,0.5,0.5]) \n            sphere(d=2);\n        }\n    }\n}\n\n// Assembly\ngorgon();",
    "renders": true
  },
  {
    "household_item": "gremlin",
    "openscad_code": "// Realistic Gremlin Figure - Medium Complexity\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;\n\n// Overall dimensions\ngremlin_height = 70;\ngremlin_width = 35;\n\n// Main body module\nmodule gremlin_body() {\n    // Torso\n    difference() {\n        scale([1, 0.8, 1.2]) sphere(d = 30);\n        translate([0, 0, -20]) cube([40, 40, 40], center = true);\n    }\n    \n    // Chest detail\n    translate([0, 12, 5]) scale([0.8, 0.3, 0.8]) sphere(d = 25);\n}\n\n// Head module\nmodule gremlin_head() {\n    // Main head shape\n    translate([0, 0, 35]) {\n        difference() {\n            scale([0.9, 0.8, 1.1]) sphere(d = 25);\n            // Eye sockets\n            translate([-8, 8, 5]) sphere(d = 8);\n            translate([8, 8, 5]) sphere(d = 8);\n            // Mouth opening\n            translate([0, 10, -2]) sphere(d = 6);\n        }\n        \n        // Eyes\n        translate([-8, 8, 5]) sphere(d = 6);\n        translate([8, 8, 5]) sphere(d = 6);\n        \n        // Nose\n        translate([0, 9, 2]) scale([0.4, 0.4, 0.6]) sphere(d = 5);\n        \n        // Ears\n        rotate([0, 0, -30]) translate([-12, 8, 8]) scale([0.3, 2, 0.8]) cylinder(h = 15, d1 = 8, d2 = 4);\n        rotate([0, 0, 30]) translate([12, 8, 8]) scale([0.3, 2, 0.8]) cylinder(h = 15, d1 = 8, d2 = 4);\n    }\n}\n\n// Arm module\nmodule gremlin_arm(side) {\n    arm_side = side == \"left\" ? -1 : 1;\n    \n    translate([arm_side * 15, 0, 15]) {\n        rotate([0, 0, arm_side * 20]) {\n            // Upper arm\n            rotate([90, 0, 0]) cylinder(h = 15, d = 6);\n            \n            // Lower arm\n            translate([0, 0, 15]) rotate([90, 0, 0]) cylinder(h = 12, d = 5);\n            \n            // Hand\n            translate([0, 0, 27]) sphere(d = 7);\n            \n            // Fingers\n            for(i = [-1, 0, 1]) {\n                translate([i * 2.5, 0, 32]) rotate([0, 90, 0]) cylinder(h = 5, d = 2);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule gremlin_leg(side) {\n    leg_side = side == \"left\" ? -1 : 1;\n    \n    translate([leg_side * 8, 0, -15]) {\n        // Thigh\n        rotate([0, 0, leg_side * 10]) cylinder(h = 20, d = 8);\n        \n        // Shin\n        translate([0, 0, -20]) rotate([0, 0, leg_side * -15]) cylinder(h = 18, d = 7);\n        \n        // Foot\n        translate([leg_side * 3, 8, -38]) scale([1.2, 2, 0.6]) sphere(d = 10);\n    }\n}\n\n// Tail module\nmodule gremlin_tail() {\n    translate([0, -15, -5]) {\n        rotate([0, 30, 0]) {\n            for(i = [0:5]) {\n                translate([0, 0, -i * 3]) \n                scale([1 - i * 0.1, 1 - i * 0.1, 1]) \n                sphere(d = 6);\n            }\n        }\n    }\n}\n\n// Spikes along back\nmodule back_spikes() {\n    for(i = [0:4]) {\n        translate([0, -8 + i * 2, 15 - i * 1.5]) {\n            rotate([0, 0, 0]) cylinder(h = 3 + i * 0.5, d1 = 2, d2 = 0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    gremlin_body();\n    gremlin_head();\n    gremlin_arm(\"left\");\n    gremlin_arm(\"right\");\n    gremlin_leg(\"left\");\n    gremlin_leg(\"right\");\n    gremlin_tail();\n    back_spikes();\n}",
    "renders": true
  },
  {
    "household_item": "grindylow",
    "openscad_code": "// Grindylow OpenSCAD Model\n// Realistic style, medium complexity\n// Approx 70mm tall\n\n// Overall scale factor\nscale_factor = 0.7;\n\n// Head module\nmodule head() {\n    // Main head shape\n    difference() {\n        // Base head sphere\n        sphere(d = 25, $fn = 32);\n        \n        // Eye sockets\n        for(x = [-8, 8]) {\n            translate([x, -5, 5]) {\n                rotate([0, -15, 0]) {\n                    sphere(d = 8, $fn = 16);\n                }\n            }\n        }\n        \n        // Jaw opening\n        translate([0, -12, -5]) {\n            cube([15, 15, 10], center = true);\n        }\n    }\n    \n    // Eyes\n    for(x = [-8, 8]) {\n        translate([x, -5, 5]) {\n            color([0.1, 0.1, 0.1]) {\n                sphere(d = 4, $fn = 16);\n            }\n        }\n    }\n    \n    // Teeth\n    for(i = [-3:3]) {\n        translate([i*2.5, -12, -8]) {\n            cylinder(h = 5, r1 = 1, r2 = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    // Torso\n    cylinder(h = 25, r1 = 12, r2 = 8, $fn = 32);\n    \n    // Ribs\n    for(i = [0:4]) {\n        translate([0, 0, -i*5]) {\n            difference() {\n                cylinder(h = 2, r1 = 11.5, r2 = 11.5, $fn = 16);\n                rotate([0, 0, 22.5]) {\n                    for(j = [0:3]) {\n                        rotate([0, 0, j*90]) {\n                            translate([8, 0, 0]) {\n                                cube([6, 2, 3], center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tentacle module\nmodule tentacle(length, segments) {\n    hull() {\n        cylinder(h = length/segments, r = 3, $fn = 8);\n        translate([0, 0, length/segments]) {\n            cylinder(h = length/segments, r = 2.8, $fn = 8);\n        }\n    }\n    \n    for(i = [1:segments-1]) {\n        translate([0, 0, i*length/segments]) {\n            hull() {\n                cylinder(h = length/segments, r1 = 3 - i*0.2, r2 = 3 - (i+1)*0.2, $fn = 8);\n                translate([0, 0, length/segments]) {\n                    cylinder(h = length/segments, r1 = 3 - (i+1)*0.2, r2 = 3 - (i+2)*0.2, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Arm module\nmodule arm() {\n    // Upper arm\n    rotate([-30, 0, 15]) {\n        cylinder(h = 15, r1 = 3, r2 = 2.5, $fn = 12);\n        \n        // Lower arm\n        translate([0, 0, 15]) {\n            rotate([45, 0, 0]) {\n                cylinder(h = 12, r1 = 2.5, r2 = 2, $fn = 12);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Head\n    translate([0, 0, 25]) {\n        head();\n    }\n    \n    // Body\n    translate([0, 0, 0]) {\n        body();\n    }\n    \n    // Arms\n    translate([0, 0, 15]) {\n        // Left arm\n        translate([12, 0, 0]) {\n            arm();\n        }\n        \n        // Right arm\n        translate([-12, 0, 0]) {\n            mirror([-1, 0, 0]) {\n                arm();\n            }\n        }\n    }\n    \n    // Tentacles (8 total)\n    for(i = [0:7]) {\n        rotate([0, 0, i*45]) {\n            translate([0, 8, -25]) {\n                tentacle(30 + i*2, 5);\n            }\n        }\n    }\n    \n    // Fins\n    translate([0, 0, -15]) {\n        // Left fin\n        translate([5, 0, 0]) {\n            rotate([0, -90, 0]) {\n                difference() {\n                    cylinder(h = 8, r1 = 5, r2 = 2, $fn = 3);\n                    translate([0, 0, -1]) {\n                        cube([10, 10, 10], center = true);\n                    }\n                }\n            }\n        }\n        \n        // Right fin\n        translate([-5, 0, 0]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 8, r1 = 5, r2 = 2, $fn = 3);\n                    translate([0, 0, -1]) {\n                        cube([10, 10, 10], center = true);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "gulon",
    "openscad_code": "// Gulon - Mythical Scandinavian creature resembling a large wolverine/lynx hybrid\n// Overall dimensions: ~80mm long, ~40mm tall, ~35mm wide\n\n$fn = 32; // Smooth curves\n\nmodule body() {\n    // Main torso - elongated oval shape\n    union() {\n        // Upper torso\n        translate([0, 0, 15])\n            scale([1.5, 1, 0.8])\n            sphere(d = 35);\n        \n        // Lower torso extension\n        translate([-10, 0, 5])\n            scale([1.8, 1.2, 1])\n            sphere(d = 30);\n    }\n}\n\nmodule head() {\n    // Broad feline head with short muzzle\n    union() {\n        // Main head shape\n        translate([25, 0, 25])\n            scale([1.2, 1, 1.1])\n            sphere(d = 25);\n        \n        // Snout extension\n        translate([35, 0, 23])\n            scale([0.8, 0.6, 0.5])\n            sphere(d = 15);\n        \n        // Brow ridges\n        translate([30, 0, 30])\n            cube([15, 5, 3], center = true);\n    }\n}\n\nmodule ears() {\n    // Short rounded ears\n    for(side = [-1, 1]) {\n        translate([25, side * 12, 35])\n            rotate([0, 20 * side, 0])\n            scale([0.8, 0.5, 1.2])\n            cylinder(d1 = 8, d2 = 5, h = 10);\n    }\n}\n\nmodule legs() {\n    // Four muscular legs\n    module single_leg(x_pos, y_pos, angle) {\n        translate([x_pos, y_pos, 8])\n            rotate([0, angle, 0])\n            union() {\n                // Upper leg\n                cylinder(d = 8, h = 15);\n                \n                // Lower leg\n                translate([0, 0, 15])\n                    rotate([20, 0, 0])\n                    cylinder(d = 6, h = 12);\n                \n                // Paw\n                translate([0, 0, 27])\n                    sphere(d = 8);\n            }\n    }\n    \n    // Front legs\n    single_leg(15, 12, 15);\n    single_leg(15, -12, -15);\n    \n    // Rear legs\n    single_leg(-25, 12, -15);\n    single_leg(-25, -12, 15);\n}\n\nmodule tail() {\n    // Bushy tail with slight curve\n    translate([-35, 0, 15])\n        rotate([0, 0, -10])\n        for(i = [0:10]) {\n            rotate([0, 0, i * 2])\n            translate([-i * 2, 0, sin(i * 10) * 2])\n                sphere(d = 12 - i * 0.7);\n        }\n}\n\nmodule eyes() {\n    // Small forward-facing eyes\n    for(side = [-1, 1]) {\n        translate([32, side * 6, 27]) {\n            // Eye socket\n            difference() {\n                sphere(d = 4);\n                translate([2, 0, 0])\n                    sphere(d = 3.5);\n            }\n        }\n    }\n}\n\nmodule nose() {\n    // Small black nose at tip of snout\n    translate([42, 0, 23])\n        sphere(d = 3);\n}\n\nmodule claws() {\n    // Retractable claws on paws\n    module single_claw() {\n        translate([0, 0, 35])\n            rotate([0, 30, 0])\n            cylinder(d1 = 1, d2 = 0.5, h = 4);\n    }\n    \n    // Four claws per paw\n    for(x = [15, -25])\n        for(y = [12, -12])\n            for(offset = [-3, -1, 1, 3])\n                translate([x, y + offset, 0])\n                    single_claw();\n}\n\n// Assemble the complete gulon\nunion() {\n    body();\n    head();\n    ears();\n    legs();\n    tail();\n    eyes();\n    nose();\n    claws();\n}",
    "renders": true
  },
  {
    "household_item": "harpy",
    "openscad_code": "// Realistic Harpy for 3D Printing\n// Wings, talons, and head are supported at natural angles\n// Total height ~80mm, wingspan ~95mm\n\n$fn = 32;  // Smooth curves for realistic look\n\n// Main assembly\nunion() {\n    // Body\n    translate([0, 0, 25])\n        rotate([0, 0, 0])\n            body();\n\n    // Head\n    translate([0, 20, 45])\n        rotate([-15, 0, 0])\n            head();\n\n    // Left wing\n    translate([-25, 0, 35])\n        rotate([0, 0, -30])\n            wing();\n\n    // Right wing\n    mirror([1, 0, 0])\n        translate([-25, 0, 35])\n            rotate([0, 0, -30])\n                wing();\n\n    // Left leg\n    translate([-8, -10, 0])\n        rotate([15, 0, -5])\n            leg();\n\n    // Right leg\n    translate([8, -10, 0])\n        rotate([15, 0, 5])\n            leg();\n}\n\n// Body module\nmodule body() {\n    union() {\n        // Torso\n        hull() {\n            translate([0, 0, 0])\n                scale([1, 0.8, 1.2])\n                    sphere(d=20);\n            translate([0, -12, -8])\n                scale([0.7, 0.6, 1])\n                    sphere(d=15);\n        }\n\n        // Breast feathers\n        difference() {\n            translate([0, 8, -5])\n                scale([1, 1.2, 0.8])\n                    sphere(d=18);\n            translate([0, 10, -3])\n                scale([0.8, 1.1, 0.6])\n                    sphere(d=15);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    difference() {\n        union() {\n            // Skull\n            scale([1, 1.3, 1.1])\n                sphere(d=15);\n\n            // Beak\n            translate([0, 12, -2])\n                rotate([20, 0, 0])\n                    scale([0.3, 1, 0.4])\n                        cylinder(h=12, d1=8, d2=3);\n        }\n\n        // Eye sockets\n        translate([-4, 6, 3])\n            sphere(d=3);\n        translate([4, 6, 3])\n            sphere(d=3);\n    }\n\n    // Eyes\n    color([0.1, 0.1, 0.1])\n    union() {\n        translate([-4, 6, 3])\n            sphere(d=1.5);\n        translate([4, 6, 3])\n            sphere(d=1.5);\n    }\n}\n\n// Wing module\nmodule wing() {\n    difference() {\n        union() {\n            // Upper arm\n            translate([0, 0, 0])\n                rotate([0, -30, 0])\n                    scale([1, 0.3, 0.3])\n                        cylinder(h=20, d=8);\n\n            // Forearm\n            translate([15, -10, -5])\n                rotate([0, -60, 0])\n                    scale([1, 0.25, 0.25])\n                        cylinder(h=25, d=6);\n\n            // Primary feathers\n            for(i = [0:5]) {\n                translate([30 + i*4, -15 - i*2, -10 - i*3])\n                    rotate([0, -90 + i*10, 0])\n                        scale([1, 0.1, 0.6])\n                            cylinder(h=15 - i, d=3);\n            }\n\n            // Secondary feathers\n            for(i = [0:4]) {\n                translate([20 + i*3, -5 - i, -2])\n                    rotate([0, -45 - i*5, 0])\n                        scale([1, 0.1, 0.5])\n                            cylinder(h=12 - i*0.5, d=2.5);\n            }\n\n            // Wing membrane\n            hull() {\n                translate([5, 0, 0])\n                    sphere(d=2);\n                translate([35, -25, -25])\n                    sphere(d=1);\n                translate([25, -5, -5])\n                    sphere(d=1);\n            }\n        }\n\n        // Remove support material gaps\n        translate([0, -30, -30])\n            cube([50, 30, 30]);\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Thigh\n        translate([0, 0, 10])\n            rotate([0, 30, 0])\n                scale([0.3, 0.3, 1])\n                    cylinder(h=15, d=6);\n\n    // Lower leg\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            scale([0.25, 0.25, 1])\n                cylinder(h=12, d=5);\n\n        // Foot/talon\n        translate([0, -5, -6])\n            union() {\n                // Main foot\n                scale([0.4, 1.5, 0.3])\n                    sphere(d=8);\n\n                // Talons\n                for(i = [-1, 0, 1]) {\n                    translate([i*3, -8, -2])\n                        rotate([0, 20*i, 0])\n                            scale([0.3, 0.3, 1])\n                                cylinder(h=6, d1=3, d2=1);\n                }\n\n                // Back talon\n                translate([0, -2, -4])\n                    rotate([0, 120, 0])\n                        scale([0.3, 0.3, 1])\n                            cylinder(h=8, d1=4, d2=1);\n            }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "hippocampus",
    "openscad_code": "// Hippocampus - Medium Complexity Realistic Model\n// Basic overall dimensions: ~70mm length, 30mm width, 25mm height\n\nmodule hippocampus_body() {\n    // Main curved body - head/upper part\n    difference() {\n        union() {\n            // Central curved tube\n            rotate([0, 90, 0])\n                linear_extrude(height=60, twist=45, scale=0.8, $fn=32)\n                    circle(d=10, $fn=32);\n            \n            // Head region - wider portion\n            translate([-5, 0, 15])\n                scale([1.5, 1.2, 1.2])\n                    sphere(d=15, $fn=32);\n            \n            // Body segments for texture\n            for(i=[0:5:40]) {\n                translate([i-20, 0, 5*sin(i*3)])\n                    rotate([0, 10*sin(i*2), 0])\n                        sphere(d=8-i/10, $fn=16);\n            }\n        }\n        \n        // Hollow out center\n        rotate([0, 90, 0])\n            linear_extrude(height=65, twist=45, scale=0.6, $fn=32)\n                circle(d=7, $fn=32);\n    }\n}\n\nmodule hippocampus_tail() {\n    // Thin tail curving downward\n    hull() {\n        translate([25, 0, 0])\n            sphere(d=6, $fn=16);\n        translate([35, 0, -8])\n            sphere(d=4, $fn=16);\n        translate([42, 0, -12])\n            sphere(d=3, $fn=16);\n    }\n    \n    // Tail segments\n    for(t=[0:2:20]) {\n        translate([28+t, 0, -t*0.6])\n            rotate([0, 5*t, 0])\n                sphere(d=5-t*0.15, $fn=12);\n    }\n}\n\nmodule fimbria() {\n    // Thin ridge along top edge\n    difference() {\n        union() {\n            for(f=[-15:2:25]) {\n                translate([f, 3, 10+2*sin(f*2)])\n                    sphere(d=2.5, $fn=8);\n            }\n        }\n        \n        // Remove underside\n        translate([5, 0, 5])\n            cube([40, 10, 10], center=true);\n    }\n}\n\nmodule subiculum() {\n    // Wider base section\n    difference() {\n        union() {\n            translate([-10, 0, -8])\n                scale([1.2, 1, 0.8])\n                    sphere(d=18, $fn=32);\n            \n            // Connect to body\n            hull() {\n                translate([-10, 0, -8])\n                    sphere(d=16, $fn=16);\n                translate([0, 0, -5])\n                    sphere(d=12, $fn=16);\n            }\n        }\n        \n        // Hollow base\n        translate([-10, 0, -8])\n            scale([0.8, 0.7, 0.6])\n                sphere(d=15, $fn=32);\n    }\n}\n\nmodule dentate_gyrus() {\n    // Tooth-like structures along inner curve\n    for(d=[0:6:35]) {\n        translate([d-15, -4, 2])\n            rotate([0, 90, 0])\n                cylinder(h=8, d1=3, d2=2, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    hippocampus_body();\n    hippocampus_tail();\n    fimbria();\n    subiculum();\n    dentate_gyrus();\n}",
    "renders": true
  },
  {
    "household_item": "huldra",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall scale\nscale(0.4)\nunion() {\n    // Head\n    translate([0, 0, 85])\n    union() {\n        // Skull\n        sphere(10);\n        \n        // Face mask (cow tail hidden)\n        difference() {\n            sphere(10.5);\n            translate([0, 0, -2])\n            cube([30, 30, 20], center = true);\n        }\n        \n        // Eyes\n        for(x = [-4, 4])\n        translate([x, -2, 2])\n        sphere(1.5);\n        \n        // Nose\n        translate([0, -7, 0])\n        cube([2, 4, 2], center = true);\n        \n        // Mouth\n        translate([0, -9, -3])\n        cube([6, 2, 1], center = true);\n        \n        // Hair (long back)\n        for(i = [0:10:90])\n        translate([sin(i) * 11, cos(i) * 11, 0])\n        rotate([90, 0, i])\n        cylinder(30, 1.5, 0.5);\n    }\n    \n    // Neck\n    translate([0, 0, 70])\n    cylinder(10, 4, 5);\n    \n    // Torso (hollowed)\n    difference() {\n        translate([0, 0, 40])\n        scale([1, 0.6, 1.5])\n        sphere(15);\n        \n        // Hollow\n        translate([0, 0, 40])\n        scale([0.8, 0.5, 1.3])\n        sphere(13);\n    }\n    \n    // Dress\n    difference() {\n        translate([0, 0, 15])\n        cylinder(40, 20, 25);\n        \n        // Hollow\n        translate([0, 0, 0])\n        cylinder(50, 18, 23);\n    }\n    \n    // Arms\n    for(side = [-1, 1])\n    translate([side * 12, 0, 55])\n    rotate([0, side * 15, 0])\n    union() {\n        // Upper arm\n        cylinder(12, 3, 2.5);\n        \n        // Lower arm\n        translate([0, 0, -12])\n        rotate([0, 30, 0])\n        cylinder(15, 2.5, 2);\n        \n        // Hands\n        translate([0, 0, -28])\n        sphere(3);\n    }\n    \n    // Feet (under dress)\n    translate([-5, 0, 5])\n    cylinder(10, 3, 4);\n    translate([5, 0, 5])\n    cylinder(10, 3, 4);\n    \n    // Cow tail (hidden under dress)\n    translate([0, 22, 20])\n    rotate([60, 0, 0])\n    cylinder(25, 2, 1);\n    \n    // Bark texture on dress\n    for(i = [0:20:360])\n    for(j = [5:5:35])\n    rotate([0, 0, i])\n    translate([20, 0, j])\n    cube([1, 0.5, 2]);\n}",
    "renders": true
  },
  {
    "household_item": "ifrit",
    "openscad_code": "// Realistic Ifrit - Medium Complexity\n// Approx. 75mm tall, 3D printable with minimal supports\n\n// Main dimensions\nheight = 75;\nhead_h = 12;\ntorso_h = 22;\nlegs_h = 25;\narms_h = 30;\nhorns_l = 8;\n\n// Wall thickness for printing\nwall = 2;\n\nmodule horns() {\n    // Curved ram-like horns\n    for(i = [0,1]) {\n        mirror([i==0?0:1,0,0]) {\n            translate([3,0,head_h-2]) {\n                rotate([0,20,0]) {\n                    difference() {\n                        cylinder(h=horns_l, r1=2, r2=1, $fn=8);\n                        translate([0,0,-1]) cylinder(h=horns_l+2, r1=1.5, r2=0.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule head() {\n    // Angular demonic head with horns\n    union() {\n        // Skull base\n        translate([0,0,head_h/2]) {\n            scale([1,0.8,1.2]) sphere(d=head_h, $fn=12);\n        }\n        \n        // Snout\n        translate([0,3,head_h-6]) {\n            scale([0.6,1,0.4]) sphere(d=6, $fn=8);\n        }\n        \n        // Eye sockets\n        for(i = [0,1]) {\n            mirror([i==0?0:1,0,0]) {\n                translate([2.5,2.5,head_h-4]) {\n                    rotate([0,10,0]) sphere(d=2.5, $fn=6);\n                }\n            }\n        }\n        \n        horns();\n    }\n}\n\nmodule torso() {\n    // Muscular upper body\n    difference() {\n        union() {\n            // Chest\n            translate([0,0,torso_h/2]) {\n                scale([1.2,0.7,1]) cylinder(h=torso_h, r1=7, r2=6, $fn=8);\n            }\n            \n            // Abs\n            translate([0,0,-torso_h/2+2]) {\n                scale([1,0.6,0.8]) cylinder(h=torso_h/2, r1=6, r2=5, $fn=6);\n            }\n        }\n        \n        // Neck hole\n        translate([0,0,torso_h-1]) cylinder(h=2, r=3, $fn=8);\n    }\n}\n\nmodule arms() {\n    // Muscular arms with clawed hands\n    for(side = [0,1]) {\n        mirror([side==0?0:1,0,0]) {\n            translate([6,0,torso_h-5]) {\n                rotate([0,-20,0]) {\n                    union() {\n                        // Upper arm\n                        cylinder(h=arms_h/2, r=2, $fn=6);\n                        \n                        // Forearm\n                        translate([arms_h/2,0,0]) {\n                            rotate([0,30,0]) {\n                                cylinder(h=arms_h/2, r=1.8, $fn=6);\n                                \n                                // Hand\n                                translate([arms_h/2-2,0,-2]) {\n                                    scale([1,0.5,0.8]) sphere(d=4, $fn=6);\n                                    \n                                    // Claws\n                                    for(i = [0:2]) {\n                                        translate([0,i-1,-3]) {\n                                            rotate([0,0,i*20-20]) {\n                                                cylinder(h=3, r1=0.8, r2=0.3, $fn=4);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Digitigrade legs with hooves\n    for(side = [0,1]) {\n        mirror([side==0?0:1,0,0]) {\n            translate([2.5,0,-torso_h/2-legs_h/2]) {\n                rotate([0,10,0]) {\n                    union() {\n                        // Thigh\n                        cylinder(h=legs_h/2, r1=3, r2=2.5, $fn=6);\n                        \n                        // Lower leg\n                        translate([0,0,-legs_h/2]) {\n                            rotate([0,30,0]) {\n                                cylinder(h=legs_h/2, r1=2.5, r2=1.5, $fn=6);\n                                \n                                // Hoof\n                                translate([0,0,-legs_h/2]) {\n                                    cylinder(h=3, r1=1.5, r2=2, $fn=6);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Prehensile tail with flame tip\n    translate([0,-4,-torso_h/2-legs_h-3]) {\n        rotate([0,15,0]) {\n            union() {\n                // Tail segments\n                for(i = [0:5]) {\n                    translate([0,0,-i*2]) {\n                        rotate([0,i*5,0]) {\n                            cylinder(h=2, r=2.5-i*0.3, $fn=6);\n                        }\n                    }\n                }\n                \n                // Flame tip (decorative)\n                translate([0,-2,-12]) {\n                    scale([0.5,1,2]) sphere(d=3, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the ifrit\nunion() {\n    translate([0,0,torso_h/2+head_h-2]) head();\n    translate([0,0,0]) torso();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "imp",
    "openscad_code": "// Realistic Imp Figure - Medium Complexity\n// Overall height ~80mm\n\n$fn = 32;\n\n// Main module\nmodule imp() {\n    // Body\n    color(\"red\")\n    translate([0, 0, 15])\n    scale([1, 0.8, 1.2])\n    sphere(d = 25);\n\n    // Chest armor plate\n    color(\"darkgray\")\n    translate([0, 5, 22])\n    rotate([30, 0, 0])\n    cube([20, 15, 3], center = true);\n\n    // Head\n    color(\"red\")\n    translate([0, 0, 40])\n    sphere(d = 18);\n\n    // Horns\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([side * 7, 0, 50])\n        rotate([0, side * 20, 0])\n        cylinder(h = 12, d1 = 3, d2 = 1);\n    }\n\n    // Eyes\n    color(\"yellow\")\n    for(side = [-1, 1]) {\n        translate([side * 5, -8, 42])\n        sphere(d = 3);\n    }\n\n    // Nose\n    color(\"red\")\n    translate([0, -10, 38])\n    sphere(d = 2);\n\n    // Ears\n    color(\"red\")\n    for(side = [-1, 1]) {\n        translate([side * 9, 0, 45])\n        rotate([0, 0, side * 30])\n        scale([0.4, 1, 0.6])\n        sphere(d = 8);\n    }\n\n    // Arms\n    color(\"red\")\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, 30])\n        rotate([0, 0, side * 20])\n        cylinder(h = 20, d = 6);\n        \n        // Hands\n        translate([side * 18, 0, 22])\n        sphere(d = 7);\n    }\n\n    // Legs\n    color(\"red\")\n    for(side = [-1, 1]) {\n        translate([side * 6, 0, 10])\n        cylinder(h = 15, d = 8);\n        \n        // Feet\n        translate([side * 6, 5, 2])\n        rotate([90, 0, 0])\n        scale([1.2, 1, 0.8])\n        cylinder(h = 10, d = 12);\n    }\n\n    // Tail\n    color(\"red\")\n    translate([0, 12, 15])\n    rotate([20, 0, 0])\n    cylinder(h = 25, d1 = 6, d2 = 3);\n\n    // Tail spike\n    color(\"black\")\n    translate([0, 18, 8])\n    rotate([20, 0, 0])\n    cylinder(h = 5, d1 = 3, d2 = 0.1);\n\n    // Wings\n    module wing() {\n        difference() {\n            color(\"darkred\")\n            translate([0, 0, 0])\n            rotate([0, 30, 0])\n            scale([1, 0.1, 1])\n            sphere(d = 20);\n            \n            // Wing membrane holes\n            for(i = [1:3]) {\n                translate([i * 4, 0, i * 3])\n                sphere(d = 3);\n            }\n        }\n    }\n    \n    for(side = [-1, 1]) {\n        translate([0, -5, 35])\n        rotate([0, 0, side * 45])\n        wing();\n    }\n}\n\nimp();",
    "renders": true
  },
  {
    "household_item": "jackalope",
    "openscad_code": "// Jackalope - Realistic Style, Medium Complexity\n// 3D printable figure ~70mm long\n\n$fn = 32;\nbody_len = 40;\nbody_h = 25;\nbody_w = 22;\n\n// Body\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            scale([1, 0.8, 0.7])\n                sphere(d=body_w);\n            // Chest extension\n            translate([-body_len/2+5, 0, -body_h/3])\n                cube([15, body_w*0.9, body_h/2], center=true);\n        }\n        // Hollow for printing\n        translate([0, 0, -2])\n            scale([0.7, 0.6, 0.5])\n                sphere(d=body_w-4);\n    }\n}\n\n// Head with rabbit features\nmodule head() {\n    translate([body_len/2+5, 0, body_h/2]) {\n        rotate([0, -10, 0]) {\n            difference() {\n                // Main head sphere\n                sphere(d=18);\n                \n                // Eye sockets\n                translate([-6, 8, 3])\n                    sphere(d=4);\n                translate([-6, -8, 3])\n                    sphere(d=4);\n                    \n                // Nostrils\n                translate([8, 2, -2])\n                    rotate([90, 0, 0])\n                        cylinder(h=3, d1=2, d2=0.5);\n                translate([8, -2, -2])\n                    rotate([90, 0, 0])\n                        cylinder(h=3, d1=2, d2=0.5);\n            }\n            \n            // Eyes\n            translate([-9, 6, 3])\n                sphere(d=2.5);\n            translate([-9, -6, 3])\n                sphere(d=2.5);\n                \n            // Nose\n            translate([9, 0, 0])\n                scale([1.5, 1, 0.8])\n                    sphere(d=3);\n        }\n    }\n}\n\n// Ears\nmodule ears() {\n    for(side=[-1, 1]) {\n        translate([body_len/2+8, side*8, body_h/2+8]) {\n            rotate([0, side*10, 0]) {\n                // Ear\n                scale([0.5, 0.2, 2])\n                    rotate_extrude(angle=25)\n                        translate([5, 0, 0])\n                            circle(r=3);\n                            \n                // Inner ear\n                translate([0, side*1, -8])\n                    scale([0.3, 0.1, 1.5])\n                        rotate_extrude(angle=25)\n                            translate([5, 0, 0])\n                                circle(r=2);\n            }\n        }\n    }\n}\n\n// Antlers (deer-like)\nmodule antlers() {\n    module antler_branch(len=15, ang=0) {\n        translate([0, 0, len/2])\n            rotate([0, 0, ang])\n                cylinder(h=len, d1=3, d2=2);\n    }\n    \n    for(side=[-1, 1]) {\n        translate([body_len/2+8, side*6, body_h/2+15]) {\n            rotate([0, side*5, 0]) {\n                // Main antler stem\n                cylinder(h=12, d=4);\n                \n                // Branches\n                for(i=[1:3]) {\n                    rotate([0, 0, side*i*30])\n                        antler_branch(10 - i*2, side*20);\n                }\n                \n                // Tip\n                translate([0, 0, 13])\n                    sphere(d=2);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    module leg(pos, rot) {\n        translate(pos) {\n            rotate(rot) {\n                // Upper leg\n                cylinder(h=15, d=5);\n                \n                // Lower leg\n                translate([0, 0, 15])\n                    rotate([15, 0, 0])\n                        cylinder(h=12, d=4);\n                        \n                // Paw\n                translate([0, 0, 27])\n                    sphere(d=5);\n            }\n        }\n    }\n    \n    // Front legs\n    leg([body_len/2-5, body_w/2-2, -body_h/2], [0, 0, 15]);\n    leg([body_len/2-5, -body_w/2+2, -body_h/2], [0, 0, -15]);\n    \n    // Rear legs\n    leg([-body_len/2+5, body_w/2-2, -body_h/2], [0, 0, -15]);\n    leg([-body_len/2+5, -body_w/2+2, -body_h/2], [0, 0, 15]);\n}\n\n// Tail\nmodule tail() {\n    translate([-body_len/2, 0, -body_h/3]) {\n        sphere(d=6);\n        translate([0, 0, -3])\n            scale([1, 1, 0.5])\n                sphere(d=5);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    antlers();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "jinn",
    "openscad_code": "// OpenSCAD Jinn (realistic, medium complexity)\n// 3D-printable, ~80 mm tall, no overhangs, 1.2 mm walls\n\n$fn=64;\n\n// Body module\nmodule body() {\n    // Torso\n    linear_extrude(height=30, center=true, scale=[0.7,1])\n        circle(d=30);           // 30 mm base, 21 mm top, 30 mm tall\n    \n    // Chest plate\n    translate([0,0,15])\n        scale([0.4,0.6,1])\n            cylinder(h=10, d1=25, d2=20);\n    \n    // Abdomen\n    translate([0,0,0])\n        cylinder(h=18, d1=20, d2=30);\n}\n\n// Head module\nmodule head() {\n    // Skull\n    translate([0,0,42])\n        sphere(d=20);\n    \n    // Jaw\n    translate([0,0,34])\n        rotate([15,0,0])\n            scale([0.9,0.4,0.6])\n                sphere(d=20);\n    \n    // Horns\n    for(a=[-45,45])\n        rotate([0,0,a])\n            translate([10,0,50])\n                rotate([90,0,0])\n                    cylinder(h=15, d1=8, d2=4);\n    \n    // Eyes\n    for(a=[-20,20])\n        rotate([0,0,a])\n            translate([9,0,45])\n                sphere(d=4);\n}\n\n// Arms module\nmodule arm(side) {\n    mirror([side,0,0]) {\n        // Shoulder\n        translate([15,0,20])\n            sphere(d=12);\n        \n        // Upper arm\n        translate([22,0,12])\n            rotate([-30,0,20])\n                cylinder(h=20, d=10);\n        \n        // Forearm\n        translate([35,0,3])\n            rotate([-60,0,20])\n                cylinder(h=18, d=8);\n        \n        // Hand\n        translate([47,0,-2])\n            sphere(d=10);\n    }\n}\n\n// Legs module\nmodule leg(side) {\n    mirror([side,0,0]) {\n        // Hip\n        translate([8,0,-18])\n            sphere(d=12);\n        \n        // Thigh\n        translate([10,0,-30])\n            rotate([0,0,10])\n                cylinder(h=20, d=10);\n        \n        // Shin\n        translate([12,0,-44])\n            rotate([0,0,5])\n                cylinder(h=18, d=8);\n        \n        // Foot\n        translate([14,0,-55])\n            scale([1.2,0.6,0.6])\n                sphere(d=12);\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Base\n    translate([0,0,-12])\n        sphere(d=6);\n    \n    // Segments\n    for(i=[1:5])\n        translate([0,0,-12-i*6])\n            rotate([0,0,10*i])\n                sphere(d=6-i*0.8);\n}\n\n// Smoke wisps (support-free)\nmodule wisp(x,y,z,r) {\n    translate([x,y,z])\n        sphere(d=r);\n    translate([x+2,y+2,z+2])\n        sphere(d=r*0.8);\n    translate([x-1,y+1,z+3])\n        sphere(d=r*0.6);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    arm(1); arm(-1);\n    leg(1); leg(-1);\n    tail();\n    \n    // Decorative wisps\n    wisp(12,8,40,6);\n    wisp(-10,-6,38,5);\n    wisp(0,12,20,7);\n    wisp(6,-15,10,6);\n}",
    "renders": true
  },
  {
    "household_item": "jorogumo",
    "openscad_code": "// Jorogumo - Spider Yokai Woman\n// Medium complexity realistic style\n\n// Overall scale factor\nscale_factor = 0.5;\n\n// Base dimensions\nbody_height = 40 * scale_factor;\nbody_radius = 25 * scale_factor;\nhead_height = 20 * scale_factor;\nhead_radius = 15 * scale_factor;\n\n// Leg parameters\nleg_segments = 3;\nleg_length = 35 * scale_factor;\nleg_thickness = 4 * scale_factor;\nleg_spacing = 360 / 8;\n\n// Spider abdomen\nmodule spider_abdomen() {\n    union() {\n        // Main abdomen\n        sphere(r = body_radius, $fn = 32);\n        \n        // Abdomen segments\n        for(i = [0:4]) {\n            translate([0, 0, -i * body_height/8])\n                sphere(r = body_radius * (1 - i * 0.1), $fn = 32);\n        }\n        \n        // Spinneret\n        translate([0, 0, -body_height/2])\n            cylinder(h = 5 * scale_factor, r1 = 3 * scale_factor, r2 = 1 * scale_factor, $fn = 16);\n    }\n}\n\n// Human torso\nmodule human_torso() {\n    translate([0, 0, body_height/2 + head_height/2])\n        cylinder(h = head_height * 1.5, r1 = head_radius * 0.8, r2 = head_radius * 1.2, $fn = 32);\n}\n\n// Human head\nmodule human_head() {\n    translate([0, 0, body_height/2 + head_height * 1.5 + head_height/2])\n        sphere(r = head_radius, $fn = 32);\n}\n\n// Hair\nmodule hair() {\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n            translate([head_radius * 0.9, 0, body_height/2 + head_height * 1.5 + head_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = head_height * 1.2, r = 1 * scale_factor, $fn = 8);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(i = [-1, 1]) {\n        translate([i * head_radius * 0.4, head_radius * 0.7, body_height/2 + head_height * 1.5 + head_height/3])\n            sphere(r = 2 * scale_factor, $fn = 16);\n    }\n}\n\n// Spider leg segment\nmodule leg_segment(length, thickness, angle) {\n    rotate([0, 0, angle])\n        translate([0, 0, thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h = length, r = thickness/2, $fn = 16);\n}\n\n// Spider leg\nmodule spider_leg(base_angle) {\n    union() {\n        // Upper leg\n        translate([body_radius * 0.8, 0, -body_height/4])\n            rotate([0, base_angle, 0])\n                leg_segment(leg_length/3, leg_thickness, 0);\n        \n        // Middle leg\n        translate([body_radius * 0.8 + leg_length/3, 0, -body_height/4])\n            rotate([0, base_angle + 15, -30])\n                leg_segment(leg_length/3, leg_thickness * 0.8, 0);\n        \n        // Lower leg\n        translate([body_radius * 0.8 + leg_length/3 * 2, 0, -body_height/4 - leg_length/3 * 0.3])\n            rotate([0, base_angle + 30, -60])\n                leg_segment(leg_length/3, leg_thickness * 0.6, 0);\n    }\n}\n\n// All legs\nmodule all_legs() {\n    for(i = [0:7]) {\n        rotate([0, 0, i * leg_spacing])\n            spider_leg(i % 2 == 0 ? 45 : 30);\n    }\n}\n\n// Arms\nmodule arms() {\n    for(i = [-1, 1]) {\n        translate([i * head_radius * 1.2, 0, body_height/2 + head_height])\n            rotate([0, 0, i * 45])\n                cylinder(h = 25 * scale_factor, r = 2 * scale_factor, $fn = 16);\n    }\n}\n\n// Main model\nunion() {\n    // Spider body parts\n    spider_abdomen();\n    \n    // Human parts\n    human_torso();\n    human_head();\n    hair();\n    eyes();\n    arms();\n    \n    // Spider legs\n    all_legs();\n}",
    "renders": true
  },
  {
    "household_item": "karkadann",
    "openscad_code": "$fa=2; $fs=1;\n\n// Karkadann – Persian rhinoceros-unicorn\n// Overall length ~90 mm, height ~45 mm, wall 2 mm\nwall = 2;\n\n// Body – thick rhino torso\nmodule body() {\n    // Main bulk\n    hull() {\n        translate([0,0,10]) sphere([35,25,18]);\n        translate([30,0,8]) sphere([30,22,15]);\n        translate([-25,0,12]) sphere([20,20,16]);\n    }\n    \n    // Belly fill\n    translate([0,0,-2]) cube([60,45,4], center=true);\n}\n\n// Head – one horn\nmodule head() {\n    // Snout\n    hull() {\n        translate([45,0,20]) sphere([15,12,12]);\n        translate([55,0,15]) sphere([10,10,8]);\n    }\n    \n    // Horn – single thick spiral\n    for(i=[0:3]) {\n        rotate([0,0,i*120]) \n            translate([60,0,25+i*2]) \n            cylinder(h1=8, d1=6-i, d2=4-i, $fn=8);\n    }\n    \n    // Ears\n    mirror([0,1,0]) translate([35,20,30]) rotate([0,-30,0]) \n        cylinder(h=10, d1=8, d2=4, $fn=6);\n    \n    // Eyes\n    translate([50,10,25]) sphere(3);\n    translate([50,-10,25]) sphere(3);\n}\n\n// Legs – four thick pillars\nmodule leg(pos) {\n    translate(pos) {\n        cylinder(h=25, d1=12, d2=14, $fn=8);\n        translate([0,0,-2]) sphere(7); // foot flare\n    }\n}\n\n// Tail\nmodule tail() {\n    hull() {\n        translate([-35,0,22]) sphere(5);\n        translate([-45,10,25]) sphere(3);\n        translate([-50,15,28]) sphere(2);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Legs\n    for(x=[-15,25], y=[-15,15])\n        leg([x,y,0]);\n    \n    tail();\n}\n\n// Optional base plate for print stability\ntranslate([0,0,-wall]) cube([100,60,wall], center=true);",
    "renders": true
  },
  {
    "household_item": "kelpie",
    "openscad_code": "// Kelpie (Scottish water horse) - Realistic style, medium complexity\n// Overall dimensions: ~70mm long x 30mm wide x 40mm tall\n\n$fn = 32;  // Smooth curves\n\n// Main body module\nmodule kelpie() {\n    // Body core\n    union() {\n        // Torso\n        translate([0, 0, 15]) scale([1.5, 1, 1]) sphere(10);\n        \n        // Chest\n        translate([-15, 0, 10]) scale([1.2, 0.8, 1]) sphere(8);\n        \n        // Rump\n        translate([15, 0, 12]) scale([1.3, 0.9, 0.9]) sphere(9);\n        \n        // Neck\n        translate([-20, 0, 25]) scale([0.6, 0.5, 1.2]) cylinder(h=15, r=6);\n        \n        // Head\n        translate([-30, 0, 30]) scale([1.2, 0.7, 0.7]) sphere(8);\n        \n        // Snout\n        translate([-38, 0, 28]) scale([0.8, 0.6, 0.5]) cylinder(h=10, r=4);\n        \n        // Ears (two small cones)\n        translate([-34, 0, 38]) rotate([30, 0, 0]) cylinder(h=8, r1=3, r2=0);\n        translate([-34, -5, 38]) rotate([30, 0, 10]) cylinder(h=8, r1=3, r2=0);\n        \n        // Mane (ridge along neck and back)\n        for(i=[-35:5:15]) {\n            translate([i, 0, 35 - abs(i/3)]) cylinder(h=2, r=3);\n        }\n        \n        // Tail\n        translate([22, 0, 18]) rotate([0, 0, -30]) {\n            for(i=[0:3:15]) {\n                translate([i, 0, 0]) rotate([0, -5, 0]) \n                    scale([1, 0.8, 0.8]) sphere(4);\n            }\n        }\n        \n        // Legs\n        // Front left\n        translate([-10, -7, 0]) leg();\n        \n        // Front right\n        translate([-10, 7, 0]) mirror([0,1,0]) leg();\n        \n        // Back left\n        translate([10, -7, 0]) leg();\n        \n        // Back right\n        translate([10, 7, 0]) mirror([0,1,0]) leg();\n        \n        // Eyes (small spheres)\n        translate([-37, -3, 32]) sphere(1.5);\n        translate([-37, 3, 32]) sphere(1.5);\n        \n        // Nostrils\n        translate([-42, -1.5, 27]) sphere(1);\n        translate([-42, 1.5, 27]) sphere(1);\n    }\n}\n\n// Leg module\nmodule leg() {\n    // Upper leg\n    translate([0, 0, 10]) rotate([0, 10, 0]) \n        scale([0.7, 0.7, 1]) cylinder(h=15, r=4);\n    \n    // Lower leg\n    translate([2, 0, 0]) rotate([0, -20, 0]) \n        scale([0.6, 0.6, 1]) cylinder(h=12, r=3.5);\n    \n    // Hoof\n    translate([4, 0, -6]) cylinder(h=3, r=3);\n    translate([4, 0, -8]) cylinder(h=2, r=3.5);\n}\n\n// Main assembly\nkelpie();",
    "renders": true
  },
  {
    "household_item": "ketea",
    "openscad_code": "// Realistic Ketea (Sea Monster) model - medium complexity\n// Size: ~75mm long, 3D printable\n\n$fn = 36;  // Smooth curves\n\nmodule body_segment(r, h, taper=1) {\n    cylinder(h=h, r1=r, r2=r*taper, center=false);\n}\n\nmodule tail_fluke() {\n    difference() {\n        scale([1, 0.3, 1]) sphere(d=10);\n        translate([0, -5, 0]) cube([20, 10, 20], center=true);\n    }\n}\n\nmodule fin(width, height, thickness) {\n    translate([0, 0, height/2]) \n        scale([1, thickness/width, 1]) \n            sphere(d=width);\n    cylinder(h=height, r1=width/2, r2=0, center=false);\n}\n\nmodule head() {\n    // Main head shape\n    scale([1.2, 1, 1]) sphere(d=25);\n    \n    // Snout\n    translate([12, 0, 0]) \n        scale([1.5, 0.8, 0.8]) \n            sphere(d=15);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([8, side*8, 5]) \n            sphere(d=4);\n        translate([9, side*8.5, 5]) \n            color(\"black\") sphere(d=2);\n    }\n    \n    // Jaw\n    difference() {\n        translate([-5, 0, -8]) \n            cube([25, 20, 10], center=true);\n        translate([0, 0, -8]) \n            sphere(d=22);\n    }\n    \n    // Teeth\n    for(i = [0:4]) {\n        translate([5 + i*3, -8 + i*3.2, -12]) \n            cylinder(h=3, r1=1, r2=0);\n        translate([5 + i*3, 8 - i*3.2, -12]) \n            cylinder(h=3, r1=1, r2=0);\n    }\n}\n\nmodule body() {\n    // Neck\n    body_segment(r=12, h=8, taper=0.9);\n    \n    // Main body segments\n    translate([0, 0, 8]) body_segment(r=11, h=10, taper=1);\n    translate([0, 0, 18]) body_segment(r=11, h=10, taper=0.95);\n    translate([0, 0, 28]) body_segment(r=10.5, h=10, taper=0.9);\n    translate([0, 0, 38]) body_segment(r=9.5, h=10, taper=0.8);\n    translate([0, 0, 48]) body_segment(r=8, h=10, taper=0.7);\n    translate([0, 0, 58]) body_segment(r=6, h=8, taper=0.6);\n    translate([0, 0, 66]) body_segment(r=4, h=6, taper=0.5);\n    \n    // Tail fluke\n    translate([0, 0, 72]) tail_fluke();\n}\n\nmodule dorsal_fins() {\n    // Main dorsal fin\n    translate([20, 0, 15]) \n        rotate([0, 90, 0]) \n            fin(width=15, height=12, thickness=2);\n    \n    // Smaller dorsal fins\n    for(i = [1:3]) {\n        translate([35 + i*8, 0, 12 - i*2]) \n            rotate([0, 90, 0]) \n                scale([0.7, 0.7, 0.7]) \n                    fin(width=12, height=8, thickness=1.5);\n    }\n}\n\nmodule pectoral_fins() {\n    for(side = [-1, 1]) {\n        translate([15, side*15, -5]) \n            rotate([0, 0, side*30]) \n                fin(width=18, height=8, thickness=2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([-15, 0, 12]) head();\n    \n    // Body\n    translate([10, 0, 0]) body();\n    \n    // Fins\n    dorsal_fins();\n    pectoral_fins();\n}",
    "renders": true
  },
  {
    "household_item": "kiirin",
    "openscad_code": "// Kiirin (Qilin) - Medium complexity realistic style\n// 3D printable, ~70mm tall\n\n// Main body module\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            translate([0, 0, 25])\n                scale([1.2, 0.8, 1])\n                sphere(r=15, $fn=32);\n            \n            // Chest\n            translate([0, -8, 20])\n                scale([1.1, 0.9, 0.8])\n                sphere(r=12, $fn=32);\n            \n            // Abdomen\n            translate([0, 0, 15])\n                scale([0.9, 0.7, 0.6])\n                sphere(r=10, $fn=32);\n        }\n        // Hollow body\n        translate([0, 0, 25])\n            scale([1.15, 0.75, 0.95])\n            sphere(r=12, $fn=32);\n    }\n}\n\n// Head module\nmodule head() {\n    difference() {\n        // Main head\n        translate([0, 20, 35])\n            rotate([0, -10, 0])\n            scale([0.8, 0.9, 1.1])\n            sphere(r=12, $fn=32);\n        \n        // Eye sockets\n        translate([-4, 22, 37])\n            sphere(r=2, $fn=16);\n        translate([4, 22, 37])\n            sphere(r=2, $fn=16);\n        \n        // Mouth\n        translate([0, 25, 30])\n            rotate([10, 0, 0])\n            cube([6, 2, 4], center=true);\n    }\n    \n    // Eyes\n    translate([-4, 22, 37.5])\n        sphere(r=1.5, $fn=16);\n    translate([4, 22, 37.5])\n        sphere(r=1.5, $fn=16);\n    \n    // Horn\n    translate([0, 18, 45])\n        cylinder(h=12, r1=1, r2=0.5, $fn=16);\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n        rotate([0, angle, 0]) {\n            // Upper leg\n            translate([0, 0, 12])\n                cylinder(h=15, r=3, $fn=16);\n            \n            // Lower leg\n            translate([0, 0, 3])\n                cylinder(h=8, r=2.5, $fn=16);\n            \n            // Hoof\n            translate([0, 0, 0])\n                cylinder(h=3, r=2, $fn=16);\n        }\n}\n\n// Tail module\nmodule tail() {\n    hull() {\n        translate([0, -15, 25])\n            sphere(r=3, $fn=16);\n        translate([0, -25, 30])\n            sphere(r=2, $fn=16);\n    }\n}\n\n// Scales pattern\nmodule scales() {\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, 20])\n                scale([1.3, 1, 1])\n                difference() {\n                    cylinder(h=1, r=8, $fn=6);\n                    cylinder(h=1.1, r=7, $fn=6);\n                }\n    }\n}\n\n// Mane\nmodule mane() {\n    for(i = [0:8]) {\n        translate([0, 15 + i*1.5, 35 - i])\n            rotate([0, -20 + i*5, 0])\n            cylinder(h=5, r=0.8, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    body();\n    head();\n    tail();\n    \n    // Legs\n    leg(-12, -5, -10);\n    leg(12, -5, 10);\n    leg(-10, 15, -10);\n    leg(10, 15, 10);\n    \n    // Decorative elements\n    scales();\n    mane();\n    \n    // Ears\n    translate([-5, 18, 42])\n        rotate([0, 20, 30])\n        cylinder(h=5, r1=2, r2=0.5, $fn=8);\n    translate([5, 18, 42])\n        rotate([0, 20, -30])\n        cylinder(h=5, r1=2, r2=0.5, $fn=8);\n    \n    // Beard\n    for(i = [0:3]) {\n        translate([0, 26, 30 - i*2])\n            rotate([0, 0, sin(i*30)*10])\n            cylinder(h=4, r=0.5, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "kirin",
    "openscad_code": "// Kirin - Medium complexity realistic style\n// 3D printable kirin model using basic OpenSCAD primitives\n\n// Overall dimensions\nkirlen = 80;\nkirwid = 25;\nkirhei = 35;\n\n// Main body\nmodule body() {\n    // Torso\n    union() {\n        // Main torso cylinder\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(r=12, $fn=32);\n        \n        // Neck\n        translate([15, 0, 25])\n            rotate([-30, 0, 0])\n            cylinder(r1=6, r2=4, h=15, $fn=16);\n            \n        // Belly bulge\n        translate([-5, 0, 10])\n            scale([1.1, 1.2, 0.8])\n            sphere(r=10, $fn=32);\n    }\n}\n\n// Head with dragon features\nmodule head() {\n    union() {\n        // Main head shape\n        translate([25, 0, 32])\n            scale([1.5, 0.8, 1.2])\n            sphere(r=8, $fn=32);\n        \n        // Snout\n        translate([33, 0, 30])\n            rotate([-20, 0, 0])\n            cylinder(r1=6, r2=4, h=12, $fn=16);\n            \n        // Horns (antler-like)\n        for(i = [0:1]) {\n            mirror([0, i*2-1, 0])\n                translate([20, 3, 42])\n                    rotate([0, 0, 30])\n                    cylinder(r1=2, r2=0.5, h=12, $fn=8);\n        }\n        \n        // Mane\n        for(i = [0:4]) {\n            translate([28-i*3, 0, 38])\n                rotate([0, 0, sin(i*45)*10])\n                cube([3, 0.5, 8]);\n        }\n    }\n}\n\n// Legs with hooves\nmodule legs() {\n    for(side = [0, 1]) {\n        mirror([0, side*2-1, 0]) {\n            // Front leg\n            translate([15, 8, 15])\n                rotate([0, 10, 0])\n                union() {\n                    cylinder(r=3, h=18, $fn=12);\n                    translate([0, 0, -2])\n                        cylinder(r=4, r2=3, h=4, $fn=12);\n                }\n            \n            // Rear leg\n            translate([-10, 8, 10])\n                rotate([0, -5, 0])\n                union() {\n                    cylinder(r=3.5, h=16, $fn=12);\n                    translate([0, 0, -2])\n                        cylinder(r=4.5, r2=3.5, h=4, $fn=12);\n                }\n                \n            // Hooves\n            translate([15, 8, -5])\n                cylinder(r=3.5, r2=4, h=3, $fn=8);\n            translate([-10, 8, -5])\n                cylinder(r=4, r2=4.5, h=3, $fn=8);\n        }\n    }\n}\n\n// Tail with tuft\nmodule tail() {\n    union() {\n        // Tail segments\n        for(i = [0:3]) {\n            translate([-18-i*5, 0, 12+i*2])\n                rotate([0, -20-i*5, 0])\n                scale([1-i*0.1, 1-i*0.1, 1])\n                sphere(r=4, $fn=16);\n        }\n        \n        // Tail tuft\n        translate([-35, 0, 20])\n            scale([1.2, 0.8, 1])\n            sphere(r=5, $fn=16);\n    }\n}\n\n// Scales along body\nmodule scales() {\n    for(pos = [0:2]) {\n        translate([0-pos*8, 0, 18-pos*2])\n            difference() {\n                sphere(r=2, $fn=16);\n                translate([0, 0, -1])\n                    cube([4, 4, 2], center=true);\n            }\n    }\n}\n\n// Assemble the kirin\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    scales();\n}",
    "renders": true
  },
  {
    "household_item": "kishi",
    "openscad_code": "// Realistic Medium-Complexity Kishi (Ethiopian Lyre)\n// Height ≈ 85 mm, Width ≈ 60 mm, Thickness ≈ 15 mm\n// All walls ≥ 1 mm for FDM printing\n\n$fn = 50;\n\n// Overall scale factor\nscale_factor = 1;\n\nmodule kishi() {\n    // Main resonator box\n    resonator();\n\n    // Yoke arms\n    left_yoke();\n    right_yoke();\n\n    // Neck / cross bar\n    neck();\n\n    // Sound holes\n    sound_holes();\n\n    // Bridge\n    bridge();\n\n    // Tailpiece\n    tailpiece();\n\n    // Strings (simplified as cylinders)\n    strings();\n}\n\nmodule resonator() {\n    // Resonator body - slightly trapezoidal\n    hull() {\n        // Front face\n        translate([0, 0, 3])\n            cube([52, 30, 6], center = true);\n        // Back face (slightly smaller)\n        translate([0, 0, -3])\n            cube([48, 26, 6], center = true);\n    }\n\n    // Curved back\n    difference() {\n        translate([0, 0, -6.5])\n            scale([1, 0.9, 0.4])\n                sphere(d = 55);\n        translate([0, 0, -7])\n            cube([60, 35, 5], center = true);\n    }\n\n    // Front plate with slight curvature\n    difference() {\n        translate([0, 0, 6.5])\n            scale([1, 0.9, 0.3])\n                sphere(d = 55);\n        translate([0, 0, 7.5])\n            cube([60, 35, 5], center = true);\n    }\n\n    // Edge binding\n    translate([0, 0, 0])\n        cube([54, 32, 1], center = true);\n}\n\nmodule left_yoke() {\n    // Curved arm from resonator to neck\n    translate([-26, 12, 7])\n        rotate([0, 25, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 35, d1 = 6, d2 = 4);\n}\n\nmodule right_yoke() {\n    // Mirror of left yoke\n    mirror([1, 0, 0])\n        left_yoke();\n}\n\nmodule neck() {\n    // Cross bar for strings\n    translate([0, 15, 20])\n        rotate([0, 15, 0])\n            cube([40, 4, 4], center = true);\n    \n    // String holder pegs\n    for (i = [-12:6:12]) {\n        translate([i, 17, 21])\n            rotate([0, 15, 0])\n                cylinder(h = 3, d = 2);\n    }\n}\n\nmodule sound_holes() {\n    // Three small circular holes\n    for (x = [-12, 0, 12]) {\n        translate([x, 0, 6.5])\n            rotate([90, 0, 0])\n                cylinder(h = 2, d = 4);\n    }\n}\n\nmodule bridge() {\n    // Small bridge near the bottom\n    translate([0, -10, 6.5])\n        cube([12, 2, 2], center = true);\n}\n\nmodule tailpiece() {\n    // String anchor at bottom\n    translate([0, -15, 6.5])\n        cube([25, 3, 3], center = true);\n    \n    // String holes\n    for (i = [-8:4:8]) {\n        translate([i, -15, 8])\n            cylinder(h = 3, d = 1.5);\n    }\n}\n\nmodule strings() {\n    // 5 strings from neck to tailpiece\n    for (i = [-8:4:8]) {\n        // From neck to bridge\n        translate([i, 15, 21])\n            rotate([90 - atan(25/8), 0, 90])\n                cylinder(h = 26, d = 0.8);\n        \n        // From bridge to tailpiece\n        translate([i, -10, 7.5])\n            rotate([90 - atan(5/5), 0, 90])\n                cylinder(h = 5, d = 0.8);\n    }\n}\n\n// Render the complete kishi\nscale(scale_factor)\n    kishi();",
    "renders": true
  },
  {
    "household_item": "kitsune",
    "openscad_code": "// Kitsune (realistic fox spirit) - medium complexity\n// Designed for 3D printing, no overhangs over 45 degrees\n\n$fn = 32;  // Smooth curves\n\nmodule kitsune() {\n    difference() {\n        union() {\n            // Main body\n            body();\n            \n            // Head and snout\n            head();\n            \n            // Tail - split into segments for printing\n            tail_segments();\n            \n            // Legs\n            legs();\n            \n            // Ears\n            ears();\n        }\n        \n        // Hollow out the body for printing\n        translate([0, 0, -5]) \n            scale([0.8, 0.7, 0.8])\n            body();\n    }\n}\n\nmodule body() {\n    // Torso - oval shape\n    translate([0, 0, 15])\n    scale([1.2, 0.8, 1])\n    sphere(d=30);\n    \n    // Chest extension\n    translate([0, -15, 10])\n    scale([0.8, 0.6, 0.7])\n    sphere(d=25);\n    \n    // Back curve\n    translate([0, 10, 17])\n    scale([1, 0.6, 0.5])\n    rotate([45, 0, 0])\n    cylinder(h=20, d1=25, d2=15);\n}\n\nmodule head() {\n    // Main head sphere\n    translate([0, -35, 28])\n    sphere(d=22);\n    \n    // Snout extension\n    translate([0, -45, 25])\n    scale([0.7, 1.2, 0.6])\n    sphere(d=15);\n    \n    // Nose\n    translate([0, -52, 26])\n    rotate([30, 0, 0])\n    cylinder(h=3, d1=5, d2=0);\n    \n    // Eyes - indentations\n    for(side = [-1, 1]) {\n        translate([side * 7, -42, 30])\n        scale([0.5, 0.5, 0.3])\n        sphere(d=5);\n    }\n}\n\nmodule tail_segments() {\n    // Create flowing tail with 5 segments\n    angles = [0, 15, 30, 45, 60];\n    radii = [12, 10, 8, 6, 4];\n    \n    for(i = [0:4]) {\n        translate([20 - i*2, 5 + i*8, 15 + i*5])\n        rotate([0, 0, angles[i]])\n        scale([0.8, 1, 0.8])\n        sphere(d=radii[i]*2);\n    }\n    \n    // Connect tail segments\n    for(i = [0:3]) {\n        hull() {\n            translate([20 - i*2, 5 + i*8, 15 + i*5])\n            sphere(d=radii[i]*2*0.8);\n            \n            translate([20 - (i+1)*2, 5 + (i+1)*8, 15 + (i+1)*5])\n            sphere(d=radii[i+1]*2*0.8);\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side * 10, -20, 0])\n        rotate([0, side * 10, 0])\n        cylinder(h=20, d1=8, d2=6);\n        \n        // Paw\n        translate([side * 10, -20, 0])\n        sphere(d=8);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([side * 8, 15, 0])\n        rotate([0, side * -10, 0])\n        cylinder(h=18, d1=9, d2=7);\n        \n        // Paw\n        translate([side * 8, 15, 0])\n        sphere(d=9);\n    }\n}\n\nmodule ears() {\n    // Pointed fox ears\n    for(side = [-1, 1]) {\n        translate([side * 8, -40, 38])\n        rotate([0, side * 20, 0])\n        scale([0.5, 1, 2])\n        cylinder(h=12, d1=8, d2=0);\n    }\n}\n\n// Generate the complete model\nkitsune();",
    "renders": true
  },
  {
    "household_item": "knucker",
    "openscad_code": "// Knucker (water dragon) head bust – medium complexity, realistic style\n// Overall size ≈ 70 mm (snout to nape)\n\n$fn = 60;          // Smooth curves for 3-D printing\nwall = 2;          // Minimum printable wall thickness\n\n// Overall bounding box helpers (comment out for final print)\n// %cube([70,50,55], center=true);\n\nmodule snout() {\n    // Tapered snout with nostrils\n    union() {\n        difference() {\n            hull() {\n                translate([0,0,-5]) sphere(d1=20);\n                translate([25,0,0]) sphere(d1=12);\n            }\n            // Nostril cavities (angled for no support)\n            for (s = [-1, 1]) {\n                rotate([0,45,0]) translate([20, s*4, 0])\n                    rotate([0,0,s*10]) cylinder(h=8, d1=3, d2=5);\n            }\n        }\n    }\n}\n\nmodule upper_jaw() {\n    // Curved upper jaw with small fangs\n    union() {\n        hull() {\n            translate([-5,0,0]) sphere(d1=25);\n            translate([10,0,5]) sphere(d1=20);\n            translate([25,0,0]) sphere(d1=12);\n        }\n        // Fangs\n        for (i = [0:2]) {\n            rotate([0,0,i*20-20]) translate([15-i*3, 0, 5])\n                cylinder(h=8, d1=1.5, d2=3);\n        }\n    }\n}\n\nmodule lower_jaw() {\n    // Slightly open lower jaw\n    difference() {\n        translate([0,0,-5]) rotate([15,0,0])\n            scale([1,1,0.8]) sphere(d1=22);\n        // Mouth cavity\n        translate([5,0,-8]) sphere(d1=18);\n    }\n}\n\nmodule horns() {\n    // Two ridged horns sweeping back\n    for (s = [-1, 1]) {\n        translate([-5, s*12, 15]) rotate([0, s*-15, 30]) {\n            // Core horn\n            cylinder(h=25, d1=5, d2=2);\n            // Ridge rings\n            for (h = [5:6:25]) {\n                translate([0,0,h]) rotate([0,0,s*10])\n                    scale([1.2,1.2,0.5]) cylinder(h=1.5, d=6);\n            }\n        }\n    }\n}\n\nmodule eye_socket() {\n    // Deep eyes with slit pupils\n    difference() {\n        sphere(d=10);\n        // Eyeball\n        translate([0,0,4]) sphere(d=7);\n        // Slit pupil\n        translate([0,0,7]) cube([2,8,2], center=true);\n    }\n}\n\nmodule frill() {\n    // Finned frill behind head\n    difference() {\n        union() {\n            for (a = [0:30:150]) {\n                rotate([0,a-75,0]) translate([0,0,10])\n                    scale([1,0.2,1]) cylinder(h=20, d1=15, d2=5);\n            }\n        }\n        // Center cavity so frill is a thin shell\n        sphere(d=18);\n    }\n}\n\n// === Assembly ===\nunion() {\n    // Head core\n    difference() {\n        hull() {\n            translate([0,0,10]) sphere(d=35);\n            translate([5,0,-5]) sphere(d=25);\n        }\n        // Hollow interior for printing\n        scale([0.8,0.8,0.8]) sphere(d=33);\n    }\n\n    // Attach parts\n    snout();\n    upper_jaw();\n    lower_jaw();\n    horns();\n\n    // Eyes\n    for (s = [-1, 1]) {\n        translate([5, s*10, 8]) rotate([0,0,90]) eye_socket();\n    }\n\n    // Frill\n    translate([-5,0,10]) frill();\n}\n\n// Optional base for stable printing\ntranslate([0,0,-15]) \n    difference() {\n        cylinder(h=5, d=40);\n        cylinder(h=5.1, d=35);\n    }",
    "renders": true
  },
  {
    "household_item": "korrigan",
    "openscad_code": "// Korrigan - Breton folklore dwarf\n// Realistic style, medium complexity\n// Overall height ~60mm\n\n// Color constants\n$fa = 2; $fs = 0.5;\n\n// Main body module\nmodule korrigan() {\n    // Head with beard and hat\n    head();\n    \n    // Torso\n    torso();\n    \n    // Arms\n    left_arm();\n    right_arm();\n    \n    // Legs\n    legs();\n    \n    // Details\n    belt();\n    boots();\n}\n\n// Head assembly\nmodule head() {\n    translate([0, 0, 50]) {\n        // Skull\n        sphere(r=6);\n        \n        // Large nose\n        translate([0, 4.5, 1]) \n            scale([1, 0.7, 0.5]) \n                sphere(r=2.5);\n        \n        // Beard\n        difference() {\n            translate([0, 4, -5]) \n                scale([1, 0.8, 1.5]) \n                    sphere(r=5);\n            translate([0, 4, -8]) \n                cube([20, 20, 10], center=true);\n        }\n        \n        // Pointed cap\n        translate([0, -2, 8]) \n            cylinder(h1=12, h2=0, r1=5, r2=0, center=true);\n    }\n}\n\n// Torso\nmodule torso() {\n    // Main body\n    translate([0, 0, 30]) \n        scale([1.1, 0.7, 1.5]) \n            sphere(r=8);\n    \n    // Buttons (3)\n    for(z=[-5, 0, 5]) {\n        translate([0, 6, 30+z]) \n            sphere(r=1);\n    }\n}\n\n// Left arm\nmodule left_arm() {\n    // Upper arm\n    translate([-8, 8, 35]) \n        rotate([0, 0, 45]) \n            cylinder(h=8, r=2);\n    \n    // Forearm\n    translate([-12, 12, 31]) \n        rotate([0, 90, 45]) \n            cylinder(h=8, r=1.8);\n    \n    // Hand\n    translate([-12, 16, 27]) \n        sphere(r=2);\n}\n\n// Right arm\nmodule right_arm() {\n    // Upper arm\n    translate([8, 8, 35]) \n        rotate([0, 0, -45]) \n            cylinder(h=8, r=2);\n    \n    // Forearm\n    translate([12, 12, 31]) \n        rotate([0, 90, -45]) \n            cylinder(h=8, r=1.8);\n    \n    // Hand\n    translate([12, 16, 27]) \n        sphere(r=2);\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    translate([-3, -2, 15]) \n        cylinder(h=15, r=2.5);\n    translate([-3, -2, 7.5]) \n        sphere(r=2.5);\n    \n    // Right leg\n    translate([3, -2, 15]) \n        cylinder(h=15, r=2.5);\n    translate([3, -2, 7.5]) \n        sphere(r=2.5);\n}\n\n// Belt\nmodule belt() {\n    translate([0, 0, 23]) \n        difference() {\n            cylinder(h=2, r=9);\n            cylinder(h=3, r=8);\n        }\n    \n    // Belt buckle\n    translate([0, 9, 24]) \n        cube([3, 0.5, 2], center=true);\n}\n\n// Boots\nmodule boots() {\n    // Left boot\n    translate([-3, -2, 0]) {\n        cube([4, 5, 5], center=true);\n        translate([0, 1, 2.5]) \n            cube([4, 3, 2], center=true);\n    }\n    \n    // Right boot\n    translate([3, -2, 0]) {\n        cube([4, 5, 5], center=true);\n        translate([0, 1, 2.5]) \n            cube([4, 3, 2], center=true);\n    }\n}\n\n// Generate the korrigan\nkorrigan();",
    "renders": true
  },
  {
    "household_item": "krampus",
    "openscad_code": "$fs = 0.5;\n$fa = 1;\n\n// Overall scale\nscale_factor = 0.5;\n\n// Helper module for rounded cylinders\nmodule rounded_cylinder(h, r, rounding = 1) {\n    union() {\n        cylinder(h = h - rounding * 2, r = r);\n        translate([0, 0, h - rounding * 2]) sphere(r = rounding);\n        translate([0, 0, rounding]) sphere(r = rounding);\n    }\n}\n\n// Horns module\nmodule horns() {\n    color(\"brown\")\n    for (side = [-1, 1]) {\n        translate([side * 8, 12, 25])\n        rotate([0, side * 10, 0])\n        rotate([0, 0, side * 20])\n        scale([1, 1, 1.5])\n        difference() {\n            cylinder(h = 20, r1 = 3, r2 = 1);\n            translate([0, 0, 15]) rotate([90, 0, 0]) cylinder(h = 10, r = 1.5);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color(\"red\")\n    translate([0, 0, 40])\n    scale([1.2, 1.3, 1.4])\n    sphere(10);\n    \n    // Snout\n    color(\"red\")\n    translate([0, 13, 38])\n    scale([0.8, 1, 0.6])\n    sphere(6);\n    \n    // Eyes\n    for (side = [-1, 1]) {\n        color(\"black\")\n        translate([side * 5, 12, 45])\n        sphere(2);\n    }\n    \n    // Nose\n    color(\"black\")\n    translate([0, 18, 42])\n    sphere(1.5);\n    \n    // Mouth\n    color(\"black\")\n    translate([0, 18, 35])\n    difference() {\n        cube([8, 2, 3], center = true);\n        cube([10, 2, 2], center = true);\n    }\n    \n    // Tongue\n    color(\"red\")\n    translate([0, 19, 34])\n    cube([4, 0.5, 2], center = true);\n}\n\n// Body module\nmodule body() {\n    color(\"brown\")\n    translate([0, 0, 20])\n    scale([1.5, 1.2, 1.8])\n    sphere(12);\n    \n    // Belly patch\n    color(\"tan\")\n    translate([0, 12, 15])\n    scale([1, 0.8, 1.2])\n    sphere(8);\n}\n\n// Arms module\nmodule arms() {\n    for (side = [-1, 1]) {\n        color(\"brown\")\n        translate([side * 15, 5, 25])\n        rotate([0, 0, side * -20])\n        rounded_cylinder(20, 3, 2);\n        \n        // Hands\n        color(\"black\")\n        translate([side * 25, 5, 15])\n        sphere(4);\n        \n        // Fingers\n        for (i = [0, 1, 2]) {\n            translate([side * (25 + side * 3), 5 + i * 2 - 2, 13])\n            sphere(1.5);\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    for (side = [-1, 1]) {\n        color(\"black\")\n        translate([side * 8, 0, 10])\n        rounded_cylinder(20, 4, 2);\n        \n        // Hooves\n        color(\"black\")\n        translate([side * 8, 0, 0])\n        cylinder(h = 5, r1 = 5, r2 = 3);\n    }\n}\n\n// Chain decoration\nmodule chains() {\n    color(\"silver\")\n    for (i = [0:5:50]) {\n        rotate([0, 0, i])\n        translate([20, 0, 30 - i * 0.5])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r = 1.5);\n    }\n}\n\n// Bundle of sticks\nmodule sticks() {\n    color(\"brown\")\n    translate([0, -20, 25])\n    for (angle = [0:30:150]) {\n        rotate([0, 0, angle])\n        translate([0, -8, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 20, r = 1);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    horns();\n    head();\n    body();\n    arms();\n    legs();\n    chains();\n    sticks();\n}",
    "renders": true
  },
  {
    "household_item": "lampad",
    "openscad_code": "// Realistic Medium-Complexity Lampad (Desk Lamp)\n\n$fn = 36; // Smooth curves\n\n// Overall dimensions\nbase_d = 50;\nbase_h = 8;\nstem_h = 70;\narm_len = 60;\nshade_d = 55;\nshade_h = 35;\nwall = 2.4;\n\n// Base assembly\nmodule base() {\n    // Main base disc\n    difference() {\n        cylinder(d = base_d, h = base_h, center = true);\n        translate([0, 0, base_h/2 - wall])\n            cylinder(d = base_d - 2*wall, h = base_h, center = true);\n    }\n\n    // Rubber feet recesses (4 feet)\n    for (a = [0:90:270])\n        rotate([0, 0, a])\n            translate([base_d/2 - 6, 0, -base_h/2 + 1])\n                rotate([90, 0, 0])\n                    cylinder(d = 6, h = 2);\n}\n\n// Stem with cable hole\nmodule stem() {\n    // Outer stem\n    cylinder(d = 10, h = stem_h, center = false);\n\n    // Inner hole for cable\n    translate([0, 0, -1])\n        cylinder(d = 4, h = stem_h + 2, center = false);\n}\n\n// Adjustable arm with hinge\nmodule arm() {\n    // First segment\n    translate([0, 0, stem_h - 5])\n        rotate([90, 0, 0])\n            cylinder(d = 8, h = arm_len/2);\n\n    // Hinge joint\n    translate([0, arm_len/2, stem_h - 5])\n        sphere(d = 10);\n\n    // Second segment\n    translate([0, arm_len/2, stem_h - 5])\n        rotate([0, 0, 0]) // Allow rotation later\n            rotate([90, 0, 0])\n                translate([0, 0, arm_len/2])\n                    cylinder(d = 8, h = arm_len/2);\n\n    // Cable channel\n    translate([0, 0, stem_h - 5])\n        rotate([90, 0, 0])\n            cylinder(d = 4, h = arm_len);\n}\n\n// Lamp shade with diffuser\nmodule shade() {\n    // Outer shade\n    difference() {\n        cylinder(d1 = shade_d, d2 = shade_d * 0.8, h = shade_h, center = true);\n        translate([0, 0, -shade_h/2 - 1])\n            cylinder(d1 = shade_d - 2*wall, d2 = shade_d * 0.8 - 2*wall, h = shade_h + 2, center = false);\n    }\n\n    // Mounting bracket\n    translate([0, 0, shade_h/2])\n        rotate([90, 0, 0])\n            cylinder(d = 8, h = 10);\n}\n\n// Bulb socket placeholder\nmodule socket() {\n    translate([0, 0, shade_h/2 - 5])\n        cylinder(d = 20, h = 10, center = true);\n}\n\n// Assembly\ntranslate([0, 0, base_h/2])\n    base();\n\ntranslate([0, 0, base_h])\n    stem();\n\ntranslate([0, 0, 0])\n    arm();\n\ntranslate([0, arm_len, stem_h - 5])\n    shade();\n\ntranslate([0, arm_len, stem_h - 5])\n    socket();\n\n// Cable exit\ntranslate([0, 0, base_h/2 - 1])\n    rotate([0, 90, 0])\n        cylinder(d = 6, h = 10);",
    "renders": true
  },
  {
    "household_item": "lamassu",
    "openscad_code": "// Lamassu - Assyrian Guardian Figure\n// Medium complexity, realistic style\n\n// Overall dimensions\nlamassu_height = 80;\nbody_length = 60;\nbody_width = 25;\nhead_size = 18;\nwing_span = 70;\n\nmodule lamassu() {\n    // Base platform\n    translate([0, 0, 0])\n        cube([body_length + 10, body_width + 10, 3], center = true);\n    \n    // Body (bull/ox form)\n    union() {\n        // Main torso\n        translate([0, 0, 15])\n            cube([body_length, body_width, 30], center = true);\n        \n        // Chest protrusion\n        translate([body_length/2 - 5, 0, 15])\n            cube([10, body_width - 5, 25], center = true);\n        \n        // Back\n        translate([-body_length/2 + 5, 0, 20])\n            cube([10, body_width - 5, 20], center = true);\n    }\n    \n    // Legs\n    module leg(x_pos, z_pos) {\n        translate([x_pos, -body_width/3, z_pos])\n            cube([8, 8, 20], center = true);\n    }\n    \n    leg(body_length/3, 5);\n    leg(-body_length/3, 5);\n    leg(body_length/3, 5);\n    leg(-body_length/3, 5);\n    \n    // Head with human features\n    translate([0, 0, 40])\n        union() {\n            // Main head\n            cube([head_size, head_size - 4, head_size], center = true);\n            \n            // Crown/headdress\n            translate([0, 0, head_size/2 + 2])\n                cube([head_size + 2, head_size - 2, 4], center = true);\n            \n            // Beard\n            translate([0, head_size/2 - 2, -head_size/4])\n                cube([head_size - 4, 3, head_size/2], center = true);\n        }\n    \n    // Horn details (simplified)\n    for(i = [-1, 1]) {\n        translate([i * head_size/3, head_size/2 - 2, head_size/2 + 2])\n            rotate([0, 30, 0])\n                cylinder(h = 8, r1 = 2, r2 = 1, center = true);\n    }\n    \n    // Wings\n    module wing(side) {\n        translate([0, side * (body_width/2 + 5), 35])\n            rotate([0, 0, side * -10])\n                union() {\n                    // Main wing\n                    for(i = [0:3]) {\n                        translate([wing_span/4 * i - wing_span/2, 0, i * -2])\n                            cube([wing_span/4 - 2, 4, 15 - i * 3], center = true);\n                    }\n                    \n                    // Wing tip\n                    translate([wing_span/2 - 5, 0, -8])\n                        cube([10, 3, 8], center = true);\n                }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Tail (simplified)\n    translate([-body_length/2 - 5, 0, 15])\n        rotate([0, 0, -20])\n            cube([15, 6, 8], center = true);\n}\n\n// Center the model\ntranslate([0, 0, lamassu_height/2])\n    lamassu();",
    "renders": true
  },
  {
    "household_item": "lindworm",
    "openscad_code": "// Lindworm (Nordic dragon with two legs) - Realistic Medium Complexity\n\nwall_thickness = 2;\nbody_length = 80;\nbody_height = 25;\nhead_size = 12;\n\nmodule body_segment(radius, length, segments=8) {\n    // Creates a tapered cylindrical segment for the snake-like body\n    for(i=[0:segments-1]) {\n        rotate([0, 0, i*360/segments])\n            translate([0, 0, length/segments * i])\n                cylinder(h=length/segments + 0.1, r1=radius*(1-i/segments), r2=radius*(1-(i+1)/segments), $fn=12);\n    }\n}\n\nmodule scale_pattern(diameter, count=12) {\n    // Small overlapping scales for texture\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*360/count])\n            translate([diameter/2-1, 0, 0])\n                scale([0.5, 1, 0.3])\n                    sphere(d=2, $fn=6);\n    }\n}\n\nmodule dragon_head() {\n    // Main head structure\n    union() {\n        // Skull base\n        translate([0, 0, -head_size/2])\n            sphere(d=head_size, $fn=16);\n            \n        // Snout extension\n        translate([head_size/2, 0, 0])\n            scale([1.5, 0.7, 0.7])\n                sphere(d=head_size, $fn=16);\n                \n        // Lower jaw\n        translate([head_size/3, 0, -head_size/1.5])\n            rotate([0, 20, 0])\n                scale([1.2, 0.6, 0.4])\n                    sphere(d=head_size, $fn=16);\n                    \n        // Eye sockets\n        for(side=[-1, 1]) {\n            translate([head_size/3, side*head_size/3, head_size/4])\n                sphere(d=head_size/4, $fn=8);\n                \n            // Eyes\n            translate([head_size/3+1, side*head_size/3, head_size/4])\n                sphere(d=head_size/6, $fn=6);\n        }\n        \n        // Nostrils\n        for(side=[-1, 1]) {\n            translate([head_size*0.9, side*head_size/4, -head_size/4])\n                rotate([0, 45*side, 0])\n                    cylinder(h=head_size/3, r=head_size/10, $fn=8);\n        }\n        \n        // Scales on head\n        rotate([0, 0, 45])\n            scale_pattern(head_size*0.7, 16);\n    }\n}\n\nmodule foreleg() {\n    // Dragon's two legs (lindworms have only forelegs)\n    union() {\n        // Upper leg\n        translate([0, 0, -5])\n            cylinder(h=10, r1=4, r2=3, $fn=8);\n            \n        // Lower leg\n        translate([0, 0, -10])\n            rotate([15, 0, 0])\n                cylinder(h=8, r1=3, r2=2.5, $fn=8);\n                \n        // Foot\n        translate([0, 0, -16])\n            rotate([30, 0, 0])\n                union() {\n                    // Palm\n                    cube([8, 4, 2], center=true);\n                    \n                    // Toes (3 forward, 1 back)\n                    for(i=[-1:1]) {\n                        translate([i*2.5, 0, -1.5])\n                            cube([1.5, 2, 3]);\n                    }\n                    translate([-3.5, 0, 1])\n                        cube([1.5, 2, 2]);\n                }\n    }\n}\n\nmodule tail_spike(count=5) {\n    // Decorative spikes along tail\n    for(i=[0:count-1]) {\n        translate([0, 0, -i*8-5])\n            rotate([0, 0, 45])\n                scale([0.3, 1, 1])\n                    cylinder(h=6, r1=2, r2=0.1, $fn=4);\n    }\n}\n\nmodule lindworm() {\n    // Main assembly\n    \n    // Head\n    translate([body_length/2, 0, body_height/2])\n        rotate([0, 0, -20])\n            dragon_head();\n    \n    // Neck\n    translate([body_length/2-8, 0, body_height/2-2])\n        rotate([0, 0, -20])\n            body_segment(8, 12, 6);\n    \n    // Body - main snake-like form\n    for(i=[0:4]) {\n        translate([body_length/2-20-i*10, 0, body_height/2-5-i])\n            rotate([0, 0, -i*5])\n                body_segment(10-i, 12, 6);\n    }\n    \n    // Tail\n    for(i=[0:6]) {\n        translate([body_length/2-70-i*8, 0, body_height/2-10-i*0.5])\n            rotate([0, 0, -i*8])\n                body_segment(5-i*0.5, 10, 4);\n    }\n    \n    // Add tail spikes\n    translate([body_length/2-70, 0, body_height/2-10])\n        tail_spike(7);\n    \n    // Legs\n    translate([body_length/2-30, 0, body_height/2-5])\n        rotate([0, 0, 45])\n            foreleg();\n            \n    translate([body_length/2-40, 0, body_height/2-8])\n        rotate([0, 0, -45])\n            mirror([0, 1, 0])\n                foreleg();\n    \n    // Scales along body\n    for(seg=[0:10]) {\n        translate([body_length/2-15-seg*6, 0, body_height/2-2-seg*0.3])\n            rotate([0, 0, seg*10])\n                scale_pattern(8-seg*0.3, 12);\n    }\n}\n\n// Generate the model\nlindworm();",
    "renders": true
  },
  {
    "household_item": "lucra",
    "openscad_code": "// Lucra (Roman folding stool) – medium-detail, 3D-printable\n// Overall footprint ~70 mm wide × 90 mm deep × 50 mm tall\n$fa = 2;\n$fs = 1;\n\n// Wall thickness for printability\nwall = 2;\n\n// Main seat board\nmodule seat() {\n    difference() {\n        // Top slab with rounded edges\n        minkowski() {\n            cube([60, 20, 4], center = true);\n            sphere(r = 2);\n        }\n        // Lightening holes from below\n        translate([0, 0, -2])\n            for (dx = [-20, 0, 20])\n                translate([dx, 0, 0])\n                    cylinder(h = 6, r = 3, center = true);\n    }\n}\n\n// Curved leg pair with stretcher slot\nmodule leg(side) {\n    // side = 1 for right leg, -1 for left\n    // Create right half first, then mirror\n    difference() {\n        // Curved leg body\n        rotate([0, 90, 0])\n            linear_extrude(height = wall)\n                offset(r = 2)\n                    polygon([[0, 0], [40, 0], [40, 35], [35, 40], [5, 40], [0, 35]]);\n        \n        // Stretcher slot (horizontal)\n        translate([20, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h = wall + 1, r = 3, center = true);\n        \n        // Pin hole for hinge\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h = wall + 1, r = 1.5, center = true);\n    }\n    \n    // Outer face\n    mirror([side, 0, 0])\n        translate([side * wall / 2, 0, 0])\n            children();\n}\n\n// Stretcher bar\nmodule stretcher() {\n    difference() {\n        cylinder(h = 66, r = 3, center = true);\n        // Screw holes\n        for (x = [-25, 25])\n            translate([x, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r = 1.5, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 25]) seat();\n\n// Left leg\ntranslate([-30, 0, 0])\n    rotate([0, 0, 15])\n    leg(-1);\n\n// Right leg\ntranslate([30, 0, 0])\n    rotate([0, 0, -15])\n    leg(1);\n\n// Stretcher between legs\ntranslate([0, 0, 15])\n    rotate([0, 90, 0])\n        stretcher();",
    "renders": true
  },
  {
    "household_item": "magma",
    "openscad_code": "// Magma body with realistic volcano shape\n// Size: 80mm tall, 60mm diameter base\n\n$fn = 50; // Smooth curves for printing\n\n// Main parameters\nbase_diameter = 60;\ncrater_diameter = 20;\nheight = 80;\nwall_thickness = 3;\n\n// Create volcano cone with realistic slope\nmodule volcano_cone() {\n    difference() {\n        // Main cone shape\n        cylinder(h = height, d1 = base_diameter, d2 = crater_diameter, center = false);\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness])\n            cylinder(h = height - wall_thickness, d1 = base_diameter - wall_thickness*2, \n                    d2 = crater_diameter - wall_thickness*2, center = false);\n    }\n}\n\n// Create lava channels on surface\nmodule lava_channels() {\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([base_diameter/4, 0, height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = base_diameter/3, d = 3, center = true);\n    }\n}\n\n// Create crater rim with irregular shape\nmodule crater_rim() {\n    difference() {\n        // Main rim\n        translate([0, 0, height - wall_thickness])\n            cylinder(h = 5, d = crater_diameter + 8, center = false);\n        \n        // Inner cut\n        translate([0, 0, height - wall_thickness])\n            cylinder(h = 6, d = crater_diameter + 1, center = false);\n    }\n    \n    // Add rim details\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([(crater_diameter + 4)/2, 0, height - wall_thickness + 2.5])\n                sphere(d = 4);\n    }\n}\n\n// Create lava overflow patterns\nmodule lava_overflow() {\n    for(i = [15:60:360]) {\n        rotate([0, 0, i]) {\n            hull() {\n                translate([crater_diameter/2, 0, height - 5])\n                    sphere(d = 5);\n                translate([base_diameter/2 - 5, 0, 10])\n                    sphere(d = 8);\n            }\n        }\n    }\n}\n\n// Base platform for stability\nmodule stable_base() {\n    cylinder(h = 5, d = base_diameter + 10, center = false);\n}\n\n// Main assembly\nunion() {\n    // Stable base\n    stable_base();\n    \n    // Main volcano body\n    translate([0, 0, 5]) {\n        volcano_cone();\n        \n        // Surface details\n        lava_channels();\n        \n        // Crater features\n        crater_rim();\n        \n        // Lava flow patterns\n        lava_overflow();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "makara",
    "openscad_code": "// Realistic Makara - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 36;\n\n// Overall dimensions\nmakara_length = 80;\nmakara_height = 50;\nmakara_width = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\nmodule makara_head() {\n    // Main crocodile-like head\n    difference() {\n        // Head base\n        hull() {\n            sphere(d = makara_width * 0.8);\n            translate([makara_width * 0.4, 0, 0]) sphere(d = makara_width * 0.7);\n        }\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([makara_width * 0.2, side * makara_width * 0.25, makara_width * 0.1]) {\n                sphere(d = makara_width * 0.15);\n            }\n        }\n        \n        // Nostril holes\n        translate([makara_width * 0.35, 0, makara_width * 0.1]) {\n            cylinder(h = wall_thickness + 1, d = makara_width * 0.1, center = true);\n        }\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        color(\"black\") \n        translate([makara_width * 0.2, side * makara_width * 0.25, makara_width * 0.1]) {\n            sphere(d = makara_width * 0.08);\n        }\n    }\n    \n    // Snout ridges\n    for(i = [0:2]) {\n        translate([i * makara_width * 0.15 - makara_width * 0.15, 0, makara_width * 0.35]) {\n            scale([1, 0.3, 0.1]) sphere(d = makara_width * 0.2);\n        }\n    }\n}\n\nmodule makara_mouth() {\n    // Open mouth with teeth\n    difference() {\n        // Mouth cavity\n        translate([makara_width * 0.4, 0, -makara_height * 0.1]) {\n            scale([1.2, 0.8, 0.4]) sphere(d = makara_width * 0.6);\n        }\n        \n        // Remove upper part for open mouth\n        translate([makara_width * 0.4, 0, makara_width * 0.1]) {\n            cube([makara_width * 2, makara_width * 2, makara_width * 0.2], center = true);\n        }\n    }\n    \n    // Teeth\n    for(i = [0:5]) {\n        // Upper teeth\n        translate([makara_width * 0.3 + i * makara_width * 0.08, \n                   -makara_width * 0.3 + i * makara_width * 0.1, \n                   -makara_height * 0.05]) {\n            rotate([0, 90, -10]) \n            cylinder(h = makara_width * 0.05, d1 = makara_width * 0.05, d2 = makara_width * 0.02);\n        }\n        \n        // Lower teeth\n        translate([makara_width * 0.3 + i * makara_width * 0.08, \n                   makara_width * 0.3 - i * makara_width * 0.1, \n                   -makara_height * 0.15]) {\n            rotate([0, 90, 10]) \n            cylinder(h = makara_width * 0.05, d1 = makara_width * 0.05, d2 = makara_width * 0.02);\n        }\n    }\n}\n\nmodule elephant_trunk() {\n    // Curved elephant trunk extending from snout\n    for(i = [0:10]) {\n        angle = i * 12;\n        radius = makara_width * 0.3 - i * makara_width * 0.01;\n        translate([makara_width * 0.4 + i * makara_width * 0.08, \n                   0, \n                   -i * makara_width * 0.05]) {\n            rotate([0, angle, 0]) {\n                scale([1, 0.8, 0.8]) sphere(d = radius);\n            }\n        }\n    }\n}\n\nmodule fish_tail() {\n    // Fish tail extending backward\n    union() {\n        // Tail base\n        translate([-makara_length * 0.5, 0, 0]) {\n            scale([2, 1, 0.5]) sphere(d = makara_width * 0.6);\n        }\n        \n        // Tail fin\n        for(side = [-1, 1]) {\n            translate([-makara_length * 0.7, side * makara_width * 0.3, 0]) {\n                rotate([0, 0, side * 30]) {\n                    scale([1.5, 0.3, 0.1]) sphere(d = makara_width * 0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_scales() {\n    // Scales along the body\n    for(i = [0:8]) {\n        translate([-i * makara_length * 0.08, 0, makara_width * 0.25]) {\n            scale([0.8, 1, 0.3]) sphere(d = makara_width * 0.15);\n        }\n    }\n    \n    // Side fins\n    for(side = [-1, 1]) {\n        translate([-makara_length * 0.2, side * makara_width * 0.4, -makara_height * 0.1]) {\n            rotate([0, 90, side * 20]) {\n                scale([1, 0.5, 0.1]) cylinder(h = makara_width * 0.3, d = makara_width * 0.25);\n            }\n        }\n    }\n}\n\nmodule makara_complete() {\n    union() {\n        // Main body\n        translate([-makara_length * 0.25, 0, 0]) {\n            scale([2, 1, 0.8]) sphere(d = makara_width * 0.6);\n        }\n        \n        // Head and features\n        translate([makara_length * 0.25, 0, makara_width * 0.1]) {\n            makara_head();\n        }\n        \n        translate([makara_length * 0.25, 0, makara_width * 0.1]) {\n            makara_mouth();\n        }\n        \n        translate([makara_length * 0.35, 0, makara_width * 0.05]) {\n            elephant_trunk();\n        }\n        \n        // Tail\n        fish_tail();\n        \n        // Decorative elements\n        decorative_scales();\n    }\n}\n\n// Generate the complete makara\nmakara_complete();",
    "renders": true
  },
  {
    "household_item": "marid",
    "openscad_code": "// Marid (water-spirit) - realistic style, medium complexity\n// Total height ~85 mm, printable without support\n\n$fn = 36;\nscale_factor = 0.85;           // Overall scaling\n\nmodule marid() {\n    // Base stand (water surface)\n    translate([0,0,-2]) \n        scale([1,1,0.3]) sphere(d=40);\n\n    // Body - tapered cylinder\n    translate([0,0,8])\n        rotate([0,0,0])\n        cylinder(h=30, d1=20, d2=15);\n\n    // Chest plate\n    translate([0,0,28])\n        scale([1,0.7,0.8])\n        sphere(d=22);\n\n    // Head\n    translate([0,0,42])\n        sphere(d=18);\n\n    // Crown with gems\n    for(i=[0:45:315]) {\n        rotate([0,0,i])\n        translate([0,9,52])\n            cylinder(h=5, d=4);\n    }\n    sphere(d=12);\n\n    // Horns\n    translate([7,0,50])\n        rotate([30,0,15])\n        cylinder(h=12, d1=5, d2=2);\n\n    mirror([1,0,0])\n        translate([7,0,50])\n            rotate([30,0,15])\n            cylinder(h=12, d1=5, d2=2);\n\n    // Arms\n    module arm(side) {\n        mirror([side,0,0]) {\n            translate([10,0,35])\n                rotate([0,0,side*15])\n                cylinder(h=18, d=6);\n\n            translate([16,0,28])\n                sphere(d=7);\n\n            translate([21,0,22])\n                rotate([0,0,side*20])\n                cylinder(h=15, d=5);\n\n            // Hand with trident\n            translate([25,0,16])\n                sphere(d=6);\n\n            // Trident shaft\n            translate([25,-1,10])\n                rotate([90,0,side*5])\n                cylinder(h=25, d=3);\n\n            // Trident prongs\n            for(j=[-6,0,6]) {\n                translate([25, j-1, -5])\n                    cylinder(h=10, d=2);\n            }\n        }\n    }\n\n    arm(1);\n    arm(-1);\n\n    // Legs\n    module leg(side) {\n        translate([side*6,0,0])\n            cylinder(h=25, d=8);\n\n        // Feet\n        translate([side*6,0,-2])\n            scale([1.2,2,0.6])\n            sphere(d=12);\n    }\n\n    leg(1);\n    leg(-1);\n\n    // Fin-like wings on back\n    module wing(side) {\n        mirror([side,0,0]) {\n            translate([0,-2,30])\n                rotate([0,side*30,0])\n                scale([0.3,1,0.8])\n                cylinder(h=25, d=20);\n        }\n    }\n\n    wing(1);\n    wing(-1);\n\n    // Flowing beard\n    difference() {\n        translate([0,8,38])\n            scale([0.8,0.5,1.2])\n            sphere(d=15);\n\n        translate([0,12,38])\n            scale([1,0.3,1])\n            sphere(d=15);\n    }\n\n    // Facial features\n    // Eyes\n    translate([5,6,45])\n        sphere(d=3);\n    translate([-5,6,45])\n        sphere(d=3);\n\n    // Nose\n    translate([0,3,42])\n        sphere(d=4);\n\n    // Mouth\n    translate([0,8,39])\n        rotate([90,0,0])\n        cylinder(h=0.5, d=6);\n\n    // Jewelry chains\n    for(k=[0:30:330]) {\n        rotate([0,0,k])\n        translate([0,10,35])\n            scale([0.3,0.3,1])\n            sphere(d=3);\n    }\n}\n\n// Render the marid\nscale([scale_factor,scale_factor,scale_factor])\n    marid();",
    "renders": true
  },
  {
    "household_item": "medusa",
    "openscad_code": "// Medusa Head - Realistic Medium Complexity\n// 3D printable - approximately 80mm tall\n\n$fn = 64;\n\n// Main module\nmodule medusa() {\n    // Head base\n    union() {\n        // Skull shape\n        difference() {\n            sphere(d = 35);\n            translate([0, 0, -18]) cube([40, 40, 20], center = true);\n        }\n        \n        // Face protrusion\n        translate([0, 15, -5]) scale([1, 1.2, 1.3]) sphere(d = 30);\n        \n        // Jaw\n        translate([0, 20, -20]) rotate([0, 0, 0]) \n            scale([0.8, 0.8, 0.6]) sphere(d = 25);\n    }\n    \n    // Eye sockets\n    for(x = [-8, 8]) {\n        translate([x, 10, 5]) rotate([0, 0, 0])\n            difference() {\n                sphere(d = 12);\n                translate([0, 2, 0]) sphere(d = 11);\n            }\n    }\n    \n    // Eyes\n    for(x = [-8, 8]) {\n        translate([x, 12, 5]) sphere(d = 5);\n    }\n    \n    // Nose\n    translate([0, 15, 0]) scale([1, 0.5, 1.5]) sphere(d = 8);\n    \n    // Mouth\n    translate([0, 20, -5]) rotate([0, 0, 0])\n        difference() {\n            scale([1, 0.3, 0.5]) sphere(d = 15);\n            translate([0, 0, -1]) cube([12, 5, 3], center = true);\n        }\n    \n    // Snake hair - base ring\n    union() {\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) translate([18, 0, 5]) \n                cylinder(h = 40, d1 = 6, d2 = 4);\n        }\n        \n        // Snake heads\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) translate([18, 0, 45]) \n                scale([0.8, 0.8, 0.8]) snake_head();\n        }\n    }\n    \n    // Additional forehead snakes\n    for(i = [15:30:345]) {\n        rotate([0, 0, i]) translate([12, 0, 15]) \n            rotate([30, 0, 0]) cylinder(h = 35, d1 = 5, d2 = 3);\n    }\n    \n    // Snake heads on forehead\n    for(i = [15:30:345]) {\n        rotate([0, 0, i]) translate([12, 0, 50]) \n            rotate([30, 0, 0]) scale([0.7, 0.7, 0.7]) snake_head();\n    }\n}\n\n// Snake head module\nmodule snake_head() {\n    union() {\n        // Head\n        rotate([0, 0, 90]) cylinder(h = 8, d1 = 4, d2 = 6);\n        \n        // Eyes\n        translate([2, 2, 2]) sphere(d = 1.5);\n        translate([2, -2, 2]) sphere(d = 1.5);\n        \n        // Forked tongue\n        translate([8, 1, 0]) cylinder(h = 3, d = 0.5);\n        translate([8, -1, 0]) cylinder(h = 3, d = 0.5);\n    }\n}\n\n// Neck base for printing\nmodule neck_base() {\n    translate([0, 0, -25]) cylinder(h = 10, d1 = 30, d2 = 35);\n}\n\n// Assembly\nunion() {\n    medusa();\n    neck_base();\n}\n\n// Add support base\ntranslate([0, 0, -30]) cylinder(h = 2, d = 40);",
    "renders": true
  },
  {
    "household_item": "melusine",
    "openscad_code": "// Melusine - realistic style, medium complexity\n// A mythical water spirit with fish tail and human upper body\n\n// Overall scale\nscale_factor = 0.8;\n\n// Head dimensions\nhead_radius = 8 * scale_factor;\nneck_height = 3 * scale_factor;\nneck_radius = 4 * scale_factor;\n\n// Torso dimensions\ntorso_height = 20 * scale_factor;\ntorso_radius = 6 * scale_factor;\n\n// Arms\narm_length = 15 * scale_factor;\narm_radius = 2 * scale_factor;\nhand_radius = 3 * scale_factor;\n\n// Fish tail\ntail_segments = 5;\ntail_length = 35 * scale_factor;\ntail_thickness = 8 * scale_factor;\n\n// Fins\nfin_height = 10 * scale_factor;\nfin_thickness = 1.5 * scale_factor;\n\n// Hair\nhair_strands = 8;\nhair_length = 12 * scale_factor;\n\n// Eyes\neye_radius = 1.5 * scale_factor;\neye_distance = 3 * scale_factor;\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, torso_height + neck_height + head_radius])\n        sphere(r=head_radius, $fn=32);\n    \n    // Neck\n    translate([0, 0, torso_height + neck_height/2])\n        cylinder(h=neck_height, r1=neck_radius, r2=neck_radius*0.8, $fn=24);\n    \n    // Eyes\n    translate([eye_distance, -head_radius*0.7, torso_height + neck_height + head_radius])\n        sphere(r=eye_radius, $fn=16);\n    translate([-eye_distance, -head_radius*0.7, torso_height + neck_height + head_radius])\n        sphere(r=eye_radius, $fn=16);\n    \n    // Nose\n    translate([0, -head_radius*0.9, torso_height + neck_height + head_radius - 2])\n        cylinder(h=2, r1=1.2, r2=0.8, $fn=8);\n    \n    // Hair strands\n    for(i = [0:hair_strands-1]) {\n        angle = i * 360/hair_strands;\n        rotate([0, 0, angle])\n            translate([head_radius * 0.7, 0, torso_height + neck_height + head_radius])\n                rotate([90, 0, 0])\n                    cylinder(h=hair_length, r=0.8, $fn=8);\n    }\n}\n\nmodule torso() {\n    // Main torso\n    cylinder(h=torso_height, r1=torso_radius, r2=torso_radius*0.8, $fn=24);\n    \n    // Breasts\n    translate([torso_radius*0.5, 0, torso_height*0.7])\n        sphere(r=torso_radius*0.3, $fn=16);\n    translate([-torso_radius*0.5, 0, torso_height*0.7])\n        sphere(r=torso_radius*0.3, $fn=16);\n}\n\nmodule arm(side) {\n    // Arm\n    translate([0, 0, torso_height*0.8])\n        rotate([0, 0, side * 20])\n            translate([torso_radius * 1.2, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=arm_length, r=arm_radius, $fn=16);\n    \n    // Hand\n    translate([0, 0, torso_height*0.8])\n        rotate([0, 0, side * 20])\n            translate([torso_radius * 1.2, 0, -arm_length - hand_radius])\n                sphere(r=hand_radius, $fn=16);\n}\n\nmodule tail_segment(height, width) {\n    // Create one segment of the fish tail\n    linear_extrude(height=tail_length/tail_segments, center=true)\n        circle(r=width, $fn=24);\n}\n\nmodule fish_tail() {\n    union() {\n        for(i = [0:tail_segments-1]) {\n            segment_height = i * (tail_length/tail_segments);\n            width = tail_thickness * (1 - i * 0.15);\n            translate([0, 0, -segment_height])\n                scale([1 - i * 0.1, 1 - i * 0.1, 1])\n                    cylinder(h=tail_length/tail_segments, r=width, $fn=24);\n        }\n        \n        // Tail fins\n        translate([0, 0, -tail_length])\n            rotate([0, 0, 45])\n                cube([fin_height*2, fin_thickness, fin_height], center=true);\n        translate([0, 0, -tail_length])\n            rotate([0, 0, -45])\n                cube([fin_height*2, fin_thickness, fin_height], center=true);\n    }\n}\n\nmodule scales() {\n    // Add scales to tail\n    for(i = [1:tail_segments-1]) {\n        for(j = [0:8]) {\n            angle = j * 45;\n            scale_size = 0.3 * (1 - i * 0.1);\n            translate([0, 0, -i * (tail_length/tail_segments)])\n                rotate([0, 0, angle])\n                    translate([tail_thickness * (1 - i * 0.15) * 0.8, 0, 0])\n                        scale([scale_size, scale_size, 0.5])\n                            sphere(r=1, $fn=6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Upper body\n    color(\"peachpuff\")\n        head();\n    color(\"peachpuff\")\n        torso();\n    \n    // Arms\n    color(\"peachpuff\")\n        arm(1);\n    color(\"peachpuff\")\n        arm(-1);\n    \n    // Fish tail\n    color(\"teal\")\n        translate([0, 0, 0])\n            fish_tail();\n    \n    // Scales detail\n    color(\"darkslateblue\")\n        scales();\n}",
    "renders": true
  },
  {
    "household_item": "merlion",
    "openscad_code": "$fn = 50; // Smoother curves\n\n// Overall scale\nscale_factor = 0.4;\nscale(scale_factor) union() {\n\n// Base platform for stability and 3D printing\ntranslate([0, 0, -2]) cube([120, 80, 4], center=true);\n\n// Main body - fish tail section\ntranslate([0, 0, 8]) \nrotate([0, 0, 0]) \nscale([1.2, 0.8, 1.5]) sphere(25);\n\n// Fish tail fin\ndifference() {\n    translate([0, -20, 8]) rotate([20, 0, 0]) cube([40, 15, 6], center=true);\n    for(i = [1:3]) {\n        translate([-15 + i*10, -25, 8]) rotate([0, 0, 30]) cylinder(h=20, r1=2, r2=0);\n    }\n}\n\n// Lion head - main sphere\ntranslate([0, 0, 45]) sphere(20);\n\n// Lion snout\ntranslate([0, 15, 45]) scale([0.8, 1.2, 0.8]) sphere(15);\n\n// Nose\ntranslate([0, 22, 48]) sphere(3);\n\n// Eyes\nfor(x = [-10, 10]) {\n    translate([x, 10, 55]) sphere(3);\n    translate([x, 10, 57]) sphere(1.5);\n}\n\n// Mane - series of cones around head\nfor(i = [0:11]) {\n    angle = i * 30;\n    translate([sin(angle) * 22, cos(angle) * 22, 45]) \n    rotate([0, 0, angle]) \n    scale([1, 1, 1.5]) \n    cylinder(h=8, r1=3, r2=1);\n}\n\n// Mouth opening\ndifference() {\n    translate([0, 20, 42]) rotate([20, 0, 0]) cube([25, 10, 10], center=true);\n    translate([0, 25, 42]) sphere(12);\n}\n\n// Water spout - simplified as cylinder\ntranslate([0, 25, 48]) rotate([-90, 0, 0]) cylinder(h=30, r1=5, r2=3);\n\n// Water droplets\nfor(i = [0:4]) {\n    translate([sin(i*45) * 5, 25 + i*6, 48 + i*5]) sphere(1 + i*0.5);\n}\n\n// Side fins\nfor(side = [-1, 1]) {\n    translate([side * 25, 0, 15]) rotate([0, 0, side * 30]) \n    scale([1, 0.5, 0.3]) \n    sphere(10);\n    \n    // Fin details\n    difference() {\n        translate([side * 35, 0, 15]) rotate([0, 0, side * 40]) \n        scale([1.5, 0.3, 0.2]) \n        sphere(8);\n        \n        for(j = [0:2]) {\n            translate([side * (35 + j*5), 0, 15]) \n            rotate([0, 0, side * 40]) \n            cylinder(h=10, r=1);\n        }\n    }\n}\n\n} // End scale",
    "renders": true
  },
  {
    "household_item": "mermaid",
    "openscad_code": "// Mermaid - Realistic Style, Medium Complexity\n// 3D printable, ~80mm tall, 0.8mm wall thickness\n\n$fn = 32;\n\nmodule main() {\n    union() {\n        // Tail\n        tail();\n\n        // Torso\n        torso();\n\n        // Head\n        head();\n\n        // Arms\n        left_arm();\n        right_arm();\n\n        // Hair\n        hair();\n    }\n}\n\nmodule tail() {\n    // Scale base\n    translate([0, 0, -20])\n        scale([1.2, 0.6, 0.8])\n            sphere(r = 15);\n\n    // Tail body\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(r = 12);\n            translate([0, 0, -60])\n                sphere(r = 8);\n        }\n        \n        // Hollow out\n        translate([0, 0, 0])\n            scale([0.8, 0.8, 0.8])\n                sphere(r = 12);\n        translate([0, 0, -60])\n            scale([0.8, 0.8, 0.8])\n                sphere(r = 8);\n    }\n\n    // Tail fin\n    translate([0, 0, -70])\n        rotate([0, 0, 0])\n            union() {\n                difference() {\n                    hull() {\n                        translate([0, 0, 0])\n                            sphere(r = 8);\n                        translate([0, -25, -15])\n                            sphere(r = 6);\n                        translate([0, 25, -15])\n                            sphere(r = 6);\n                    }\n                    \n                    // Hollow\n                    translate([0, 0, -5])\n                        scale([0.6, 0.9, 0.8])\n                            cube([20, 50, 20], center = true);\n                }\n            }\n\n    // Scales texture\n    for(i = [0:5:30]) {\n        rotate([0, 0, i])\n            translate([0, 0, -10 - i])\n                difference() {\n                    scale([1.1 + i/50, 0.4, 0.2])\n                        sphere(r = 10);\n                    translate([0, 0, 0.5])\n                        scale([0.9, 0.9, 0.9])\n                            sphere(r = 9);\n                }\n    }\n}\n\nmodule torso() {\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(r = 10);\n            translate([0, 0, 25])\n                sphere(r = 8);\n        }\n        \n        // Hollow\n        translate([0, 0, 0])\n            scale([0.8, 0.8, 0.8])\n                sphere(r = 10);\n        translate([0, 0, 25])\n            scale([0.8, 0.8, 0.8])\n                sphere(r = 8);\n    }\n\n    // Breasts\n    translate([5, 0, 20])\n        difference() {\n            sphere(r = 4);\n            translate([0, 0, 2])\n                sphere(r = 3);\n        }\n    translate([-5, 0, 20])\n        difference() {\n            sphere(r = 4);\n            translate([0, 0, 2])\n                sphere(r = 3);\n        }\n}\n\nmodule head() {\n    difference() {\n        hull() {\n            translate([0, 0, 35])\n                sphere(r = 8);\n            translate([0, 0, 42])\n                sphere(r = 6);\n        }\n        \n        // Hollow\n        translate([0, 0, 35])\n            scale([0.8, 0.8, 0.8])\n                sphere(r = 8);\n    }\n\n    // Nose\n    translate([0, 4, 40])\n        rotate([90, 0, 0])\n            cylinder(r = 1.5, h = 3);\n\n    // Eyes\n    translate([3, 3, 40])\n        sphere(r = 1);\n    translate([-3, 3, 40])\n        sphere(r = 1);\n\n    // Mouth\n    translate([0, 5, 38])\n        rotate([90, 0, 0])\n            cylinder(r1 = 1.5, r2 = 0.5, h = 2);\n}\n\nmodule left_arm() {\n    translate([8, 0, 25])\n        rotate([0, 0, -30])\n            rotate([0, -45, 0])\n                union() {\n                    // Upper arm\n                    cylinder(r = 2, h = 10);\n                    \n                    // Lower arm\n                    translate([0, 0, -10])\n                        rotate([0, 30, 0])\n                            cylinder(r = 1.8, h = 8);\n                    \n                    // Hand\n                    translate([0, 0, -18])\n                        sphere(r = 2);\n                }\n}\n\nmodule right_arm() {\n    translate([-8, 0, 25])\n        rotate([0, 0, 30])\n            rotate([0, -45, 0])\n                mirror([1, 0, 0])\n                    union() {\n                        // Upper arm\n                        cylinder(r = 2, h = 10);\n                        \n                        // Lower arm\n                        translate([0, 0, -10])\n                            rotate([0, 30, 0])\n                                cylinder(r = 1.8, h = 8);\n                        \n                        // Hand\n                        translate([0, 0, -18])\n                            sphere(r = 2);\n                    }\n}\n\nmodule hair() {\n    // Main hair mass\n    translate([0, -5, 42])\n        rotate([10, 0, 0])\n            scale([1.2, 1, 1.5])\n                sphere(r = 8);\n\n    // Hair strands\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([0, -8 - i/30, 45 - i/30])\n                rotate([20 + i/20, 0, 0])\n                    cylinder(r = 1, h = 10 + i/20);\n    }\n}\n\n// Scale to 80mm height\nscale([0.8, 0.8, 0.8])\n    main();",
    "renders": true
  },
  {
    "household_item": "mokole",
    "openscad_code": "// Realistic Mokole OpenSCAD Model (Medium Complexity)\n// Total length ~80mm\n\n// Parameters\n$fn = 32;\nbody_len = 40;\ntail_len = 40;\nhead_len = 15;\nleg_h = 12;\nleg_w = 6;\nscale_h = 3;\nclaw_len = 2;\n\n// Main body module\nmodule mokole_body() {\n    // Torso - elongated oval\n    translate([0, 0, leg_h])\n    scale([1.2, 0.7, 1])\n    sphere(d = body_len);\n    \n    // Belly plate\n    translate([0, 0, leg_h - scale_h/2])\n    cube([body_len*0.8, body_len*0.6, scale_h], center = true);\n}\n\n// Head module\nmodule mokole_head() {\n    translate([body_len/2 + head_len/2 - 5, 0, leg_h + body_len/2 - 5])\n    rotate([0, 10, 0])\n    union() {\n        // Snout\n        scale([1.5, 1, 1])\n        sphere(d = head_len);\n        \n        // Nostrils\n        for(x = [head_len/3, -head_len/3]) {\n            translate([head_len/2 - 2, x, head_len/4])\n            rotate([90, 0, 0])\n            cylinder(h = 2, d1 = 2, d2 = 1);\n        }\n        \n        // Eye sockets\n        for(x = [-head_len/3, head_len/3]) {\n            translate([head_len/4, x, head_len/3])\n            sphere(d = 4);\n        }\n    }\n}\n\n// Tail module\nmodule mokole_tail() {\n    // Segmented tail with decreasing size\n    for(i = [0:9]) {\n        translate([-body_len/2 - i*4, 0, leg_h + 5 - i*0.5])\n        scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.08])\n        rotate([0, 5*i, 0])\n        sphere(d = 12 - i);\n    }\n}\n\n// Leg module with claws\nmodule mokole_leg(pos, angle) {\n    translate(pos)\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        cylinder(h = leg_h, d1 = leg_w, d2 = leg_w*0.8);\n        \n        // Lower leg\n        translate([0, 0, -leg_h])\n        rotate([15, 0, 0])\n        cylinder(h = leg_h*0.8, d1 = leg_w*0.8, d2 = leg_w*0.6);\n        \n        // Foot\n        translate([0, 0, -leg_h*1.8])\n        rotate([0, 30, 0])\n        scale([1.5, 1, 0.5])\n        sphere(d = leg_w);\n        \n        // Claws\n        for(i = [-1, 0, 1]) {\n            translate([i*2, leg_w/2, -leg_h*1.8 - leg_w/2])\n            rotate([0, -30, 0])\n            cylinder(h = claw_len, d1 = 1, d2 = 0.5);\n        }\n    }\n}\n\n// Back scales\nmodule back_scales() {\n    for(i = [0:4]) {\n        for(j = [-2:2]) {\n            translate([i*6 - body_len/2 + 10, j*6, leg_h + body_len/2 + 2])\n            rotate([0, 0, 45])\n            cube([4, 4, scale_h], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    mokole_body();\n    mokole_head();\n    mokole_tail();\n    \n    // Four legs\n    mokole_leg([body_len/3, body_len/3, leg_h/2], -30);\n    mokole_leg([body_len/3, -body_len/3, leg_h/2], 30);\n    mokole_leg([-body_len/3, body_len/3, leg_h/2], -150);\n    mokole_leg([-body_len/3, -body_len/3, leg_h/2], 150);\n    \n    back_scales();\n}",
    "renders": true
  },
  {
    "household_item": "monoceros",
    "openscad_code": "// Monoceros (Unicorn) - Realistic Style, Medium Complexity\n// Designed for 3D printing with no supports needed\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Basic dimensions\nbody_length = 60;\nbody_height = 35;\nbody_width = 25;\nneck_length = 20;\nneck_height = 30;\nhead_length = 25;\nhead_height = 20;\nleg_length = 25;\nleg_width = 6;\ntail_length = 35;\nhorn_length = 20;\nhorn_base = 4;\n\n// Main body\nmodule body() {\n    // Main torso\n    translate([0, 0, body_height/2])\n    scale([1.2, 1, 0.8])\n    sphere(d=body_height);\n    \n    // Chest extension\n    translate([body_length/2 - 10, 0, body_height/2 - 5])\n    scale([1.5, 1.2, 0.8])\n    sphere(d=body_height - 5);\n}\n\n// Neck\nmodule neck() {\n    translate([-body_length/2 + 5, 0, body_height - 5])\n    rotate([0, 15, 0])\n    cylinder(h=neck_length, r1=body_width/3, r2=body_width/4, $fn=20);\n}\n\n// Head\nmodule head() {\n    translate([-body_length/2 - neck_length, 0, body_height + 5])\n    rotate([0, 15, 0])\n    union() {\n        // Main head shape\n        scale([1.2, 0.8, 0.9])\n        sphere(d=head_height);\n        \n        // Snout\n        translate([-head_length/2 - 2, 0, -head_height/4])\n        scale([1.5, 0.6, 0.6])\n        sphere(d=head_height/2);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([-head_length/3, side * head_height/2, head_height/2])\n            rotate([30 * side, 0, 0])\n            cylinder(h=8, r1=3, r2=1, $fn=8);\n        }\n        \n        // Horn\n        translate([head_length/2 - 5, 0, head_height/2])\n        cylinder(h=horn_length, r1=horn_base/2, r2=0.5, $fn=16);\n    }\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, z_pos, angle = 0) {\n    translate([x_pos, y_pos, z_pos])\n    rotate([0, angle, 0])\n    union() {\n        // Upper leg\n        cylinder(h=leg_length * 0.6, r=leg_width/2, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, leg_length * 0.6])\n        rotate([20, 0, 0])\n        cylinder(h=leg_length * 0.4, r=leg_width/2.5, $fn=12);\n        \n        // Hoof\n        translate([0, 0, leg_length])\n        cylinder(h=3, r1=leg_width/2.5, r2=leg_width/3, $fn=8);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([body_length/2, 0, body_height/2])\n    rotate([30, 0, 0])\n    hull() {\n        sphere(d=body_width/2);\n        translate([tail_length, 0, -tail_length/2])\n        sphere(d=body_width/4);\n    }\n}\n\n// Mane\nmodule mane() {\n    for(i = [0:5:neck_length + head_length - 5]) {\n        translate([-body_length/2 - neck_length + i, 0, body_height + 10])\n        rotate([0, 90, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=8 + sin(i*30)*2, r=3, $fn=8);\n    }\n}\n\n// Assembly\nscale(scale_factor)\nunion() {\n    body();\n    neck();\n    head();\n    \n    // Front legs\n    for(side = [-1, 1]) {\n        leg(-body_length/2 + 5, side * body_width/2, 0, 10);\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        leg(body_length/2 - 10, side * body_width/2, 0, -10);\n    }\n    \n    tail();\n    mane();\n}",
    "renders": true
  },
  {
    "household_item": "mothman",
    "openscad_code": "// Mothman (realistic style, medium complexity)\n// Designed for 3D printing – no overhangs >45°\n// Overall height ≈ 75 mm\n\n$fn = 24;       // smooth curves\nwall = 1.2;     // 3D-printable wall thickness\n\nmodule torso() {\n    difference() {\n        union() {\n            // chest\n            translate([0, 0, 35])\n                scale([8, 4, 18])\n                sphere(1);\n\n            // abdomen taper\n            translate([0, 0, 15])\n                scale([6, 3.5, 12])\n                cylinder(h = 20, r1 = 5, r2 = 3);\n        }\n\n        // neck cavity\n        translate([0, 0, 47])\n            cylinder(h = 5, r = 2.5, $fn = 16);\n    }\n}\n\nmodule wing() {\n    // single wing – basic airfoil shape\n    // thick root, thin tip\n    linear_extrude(height = wall, center = true)\n        polygon(points = [\n            [0, 0],\n            [0, 25],\n            [20, 20],\n            [30, 10],\n            [35, 0],\n            [30, -10],\n            [20, -20],\n            [0, -25]\n        ]);\n}\n\nmodule wings() {\n    // left wing\n    translate([-6, 0, 38]) rotate([0, 20, -25]) wing();\n    // right wing\n    mirror([1, 0, 0])\n        translate([-6, 0, 38]) rotate([0, 20, -25]) wing();\n}\n\nmodule head() {\n    difference() {\n        // main skull\n        translate([0, 0, 50])\n            scale([4, 3.5, 5])\n            sphere(2);\n\n        // eye sockets\n        translate([2.5, 1.5, 52])\n            sphere(1.2);\n        mirror([1, 0, 0])\n            translate([2.5, 1.5, 52])\n            sphere(1.2);\n\n        // mouth slit\n        translate([0, 2.5, 48])\n            rotate([90, 0, 0])\n            cylinder(h = 3, r = 1.5, $fn = 16);\n    }\n\n    // antennae\n    for (a = [-1, 1]) {\n        translate([a * 3.5, 3.5, 56])\n            rotate([0, a * 15, 0])\n            cylinder(h = 8, r = 0.5);\n    }\n}\n\nmodule legs() {\n    // basic bird-like legs\n    for (lr = [-1, 1]) {\n        // thigh\n        translate([lr * 3, -2, 18])\n            rotate([0, 45, 0])\n            cylinder(h = 10, r = 1.2);\n\n        // shin\n        translate([lr * 3.5, -2, 8])\n            rotate([0, 15, 0])\n            cylinder(h = 10, r = 1);\n\n        // foot\n        translate([lr * 4, -2, 0])\n            union() {\n                cylinder(h = 1.5, r = 1);\n                translate([0, 0, -1])\n                    cube([4, 1, 1], center = true);\n            }\n    }\n}\n\nmodule arms() {\n    for (lr = [-1, 1]) {\n        // shoulder to elbow\n        translate([lr * 8, 0, 32])\n            rotate([0, 0, lr * 30])\n            cylinder(h = 10, r = 1);\n\n        // forearm to hand\n        translate([lr * 16, 0, 24])\n            rotate([0, 0, lr * 45])\n            cylinder(h = 12, r = 0.8);\n    }\n}\n\n// Build the figure\nunion() {\n    torso();\n    wings();\n    head();\n    legs();\n    arms();\n}",
    "renders": true
  },
  {
    "household_item": "nachzehrer",
    "openscad_code": "// Nachzehrer - Realistic Style, Medium Complexity\n// A revenant that chews its burial shroud, rising from the grave\n\n// Overall scale\nscale = 0.8;  // ~80mm tall\n\n// Main body module\nmodule nachzehrer() {\n    // Head - hollow sphere with open jaw\n    difference() {\n        sphere(12 * scale, $fn=32);\n        // Hollow out\n        translate([0,0,2 * scale])\n            sphere(10 * scale, $fn=32);\n        // Jaw opening\n        translate([0, -8 * scale, -10 * scale])\n            rotate([30,0,0])\n                cube([20 * scale, 15 * scale, 20 * scale], center=true);\n    }\n    \n    // Eyes - sunken hollows\n    for(x = [-5, 5]) {\n        translate([x * scale, 8 * scale, 3 * scale])\n            rotate([0,90,0])\n                cylinder(h=3 * scale, r=2 * scale, $fn=16);\n    }\n    \n    // Torso - hollow cylinder\n    translate([0, 0, -20 * scale])\n        difference() {\n            cylinder(h=25 * scale, r1=10 * scale, r2=8 * scale, $fn=32);\n            // Hollow interior\n            cylinder(h=25 * scale, r1=8 * scale, r2=6 * scale, $fn=32);\n        }\n    \n    // Arms - thin cylinders\n    for(side = [-1, 1]) {\n        translate([side * 12 * scale, 0, -10 * scale])\n            rotate([0, 90, 0])\n                cylinder(h=18 * scale, r=2 * scale, $fn=16);\n    }\n    \n    // Hands - small spheres\n    for(side = [-1, 1]) {\n        translate([side * 18 * scale, 0, -10 * scale])\n            sphere(3 * scale, $fn=20);\n    }\n    \n    // Burial shroud - thin sheet being chewed\n    translate([0, -5 * scale, -8 * scale])\n        rotate([45, 0, 0])\n            cube([20 * scale, 15 * scale, 1 * scale], center=true);\n    \n    // Teeth marks in shroud\n    for(i = [-8:2:8]) {\n        translate([i * scale, -12 * scale, -8 * scale])\n            cylinder(h=2 * scale, r=1 * scale, $fn=8);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 3 * scale, 0, -35 * scale])\n            cylinder(h=20 * scale, r=3 * scale, $fn=16);\n    }\n    \n    // Feet\n    for(side = [-1, 1]) {\n        translate([side * 3 * scale, 0, -45 * scale])\n            scale([1, 1.5, 0.5])\n                sphere(4 * scale, $fn=20);\n    }\n    \n    // Ribs showing through decayed flesh\n    for(i = [0:3]) {\n        translate([0, 0, -15 * scale - i * 3 * scale])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h=15 * scale, r=9 * scale, $fn=32);\n                    cylinder(h=15 * scale, r=7 * scale, $fn=32);\n                }\n    }\n    \n    // Tattered clothing remnants\n    for(angle = [0:45:315]) {\n        rotate([0,0,angle])\n            translate([8 * scale, 0, -25 * scale])\n                scale([0.5, 0.1, 2])\n                    cube([5 * scale, 5 * scale, 5 * scale]);\n    }\n}\n\n// Create the nachzehrer\nnachzehrer();",
    "renders": true
  },
  {
    "household_item": "nian",
    "openscad_code": "// Nian - Chinese New Year Beast\n// Medium complexity realistic style\n\n$fn=32;\n\nmodule main_body() {\n    // Central torso\n    difference() {\n        scale([1.2,0.8,1]) \n            sphere(25); // Main body sphere\n        \n        // Neck cavity\n        translate([0,0,15])\n            scale([0.6,0.6,1.2])\n                sphere(15);\n        \n        // Leg sockets\n        for(a=[-1,1])\n            translate([a*15,-15,-20])\n                rotate([0,90,0])\n                    cylinder(h=20,d=12);\n    }\n}\n\nmodule head() {\n    translate([0,0,35]) {\n        rotate([0,0,0]) {\n            // Main head\n            difference() {\n                scale([1.1,0.9,1.2])\n                    sphere(20);\n                \n                // Mouth cavity\n                translate([0,-15,-5])\n                    scale([0.8,0.8,0.6])\n                        sphere(15);\n            }\n            \n            // Snout\n            translate([0,-15,0])\n                scale([0.7,0.5,0.5])\n                    sphere(15);\n            \n            // Eyes\n            for(x=[-1,1])\n                translate([x*12,0,8]) {\n                    // Eye socket\n                    difference() {\n                        sphere(8);\n                        translate([0,0,3])\n                            sphere(5);\n                    }\n                    // Eyeball\n                    translate([x*2,-2,2])\n                        color(\"red\")\n                        sphere(3);\n                }\n            \n            // Ears\n            for(x=[-1,1])\n                translate([x*15,0,15])\n                    rotate([0,x*15,0])\n                        scale([0.3,0.8,1.2])\n                            cylinder(h=10,d=5);\n            \n            // Horns\n            for(x=[-1,1])\n                translate([x*10,0,20])\n                    rotate([x*10,0,x*10])\n                        cylinder(h=15,d1=8,d2=4);\n        }\n    }\n}\n\nmodule legs() {\n    for(side=[-1,1]) {\n        // Front legs\n        translate([side*15,-15,-35]) {\n            union() {\n                // Upper leg\n                rotate([0,side*10,0])\n                    scale([0.8,0.8,1.5])\n                        cylinder(h=15,d=12);\n                \n                // Lower leg\n                translate([0,0,-15])\n                    rotate([0,side*10,0])\n                        cylinder(h=15,d=10);\n                \n                // Paw\n                translate([0,0,-30])\n                    scale([1.2,1.2,0.6])\n                        sphere(8);\n            }\n        }\n        \n        // Rear legs\n        translate([side*15,15,-30]) {\n            union() {\n                // Upper leg\n                rotate([0,-side*10,0])\n                    scale([0.9,0.9,1.4])\n                        cylinder(h=12,d=14);\n                \n                // Lower leg\n                translate([0,0,-12])\n                    rotate([0,-side*10,0])\n                        cylinder(h=12,d=12);\n                \n                // Paw\n                translate([0,0,-24])\n                    scale([1.3,1.3,0.7])\n                        sphere(9);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    translate([0,20,-15]) {\n        // Tail segments\n        for(i=[0:5]) {\n            translate([0,i*5,-i*2])\n                rotate([0,-i*10,0])\n                    scale([1-i*0.1,1-i*0.1,0.8])\n                        sphere(8-i);\n        }\n        // Tail tuft\n        translate([0,30,-12])\n            scale([1.5,1.5,1])\n                sphere(6);\n    }\n}\n\nmodule mane() {\n    // Mane along back\n    for(i=[-30:5:30]) {\n        translate([i,0,25-abs(i)/3])\n            rotate([0,0,i])\n                scale([0.3,0.3,1.5])\n                    cylinder(h=8,d=3);\n    }\n}\n\nmodule teeth() {\n    // Upper teeth\n    for(i=[-3:1:3]) {\n        translate([i*3,-18,-2])\n            rotate([90,0,0])\n                cylinder(h=5,d1=2,d2=1);\n    }\n    // Lower teeth\n    for(i=[-2.5:1:2.5]) {\n        translate([i*3,-18,-8])\n            rotate([90,0,0])\n                cylinder(h=5,d1=2,d2=1);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    head();\n    legs();\n    tail();\n    mane();\n    teeth();\n}",
    "renders": true
  },
  {
    "household_item": "nicor",
    "openscad_code": "// Nicor (underwater hose adapter) – realistic style, medium complexity\n// External dimensions: ~55 mm long, ~40 mm diameter\n// All threads are simplified, printable 45° “saw-tooth” profiles\n// No internal supports required; 1.2 mm wall thickness everywhere\n\nwall = 1.2;           // printable wall thickness\npitch = 2.4;          // thread pitch (2× wall)\nthread_depth = 1.0;   // height of each thread tooth\nsegments = 48;        // $fn for smooth cylinders\n\nmodule body_cylinder(od, id, h) {\n    difference() {\n        cylinder(d = od, h = h, $fn = segments);\n        translate([0, 0, -0.01])\n            cylinder(d = id, h = h + 0.02, $fn = segments);\n    }\n}\n\n// 45° “saw-tooth” external thread profile\nmodule ext_thread(od, turns) {\n    tooth_height = thread_depth;\n    for (i = [0 : turns - 1]) {\n        translate([0, 0, i * pitch])\n            rotate([0, 0, i * 360 / turns])\n                cylinder(d1 = od, d2 = od + tooth_height * 2, h = pitch, $fn = segments);\n    }\n}\n\n// 45° “saw-tooth” internal thread profile\nmodule int_thread(id, turns) {\n    tooth_height = thread_depth;\n    for (i = [0 : turns - 1]) {\n        translate([0, 0, i * pitch])\n            rotate([0, 0, i * 360 / turns])\n                cylinder(d1 = id, d2 = id - tooth_height * 2, h = pitch, $fn = segments);\n    }\n}\n\n// Barbed hose insert ribs\nmodule barbs(od, count) {\n    rib_height = 1.8;\n    spacing = 3.5;\n    for (i = [0 : count - 1]) {\n        translate([0, 0, i * spacing])\n            cylinder(d1 = od, d2 = od + rib_height * 2, h = 1.5, $fn = segments);\n    }\n}\n\n// Main nicor body: 1\" MIPT on bottom, 3/4\" hose barb on top\nunion() {\n    // Bottom MIPT male threads (1\" ≈ 33 mm OD)\n    union() {\n        body_cylinder(od = 33.4, id = 33.4 - 2 * wall, h = 18);\n        ext_thread(od = 33.4, turns = 7);\n    }\n\n    // Middle hex collar (27 mm AF)\n    translate([0, 0, 18])\n        cylinder(d1 = 38, d2 = 42, h = 5, $fn = 6);\n\n    // Top smooth shank leading to hose barb\n    translate([0, 0, 23])\n        body_cylinder(od = 30, id = 30 - 2 * wall, h = 8);\n\n    // Hose barb section (3/4\" hose ≈ 26 mm barb OD)\n    translate([0, 0, 31])\n        body_cylinder(od = 26, id = 26 - 2 * wall, h = 20);\n    translate([0, 0, 31])\n        barbs(od = 26, count = 5);\n\n    // Inner flow channel (continuous bore)\n    difference() {\n        union() {\n            // MIPT bore (1\" ≈ 26 mm ID)\n            translate([0, 0, 0])\n                body_cylinder(od = 26, id = 26 - 2 * wall, h = 18);\n\n            // Transition to hose barb bore (3/4\" ≈ 20 mm ID)\n            translate([0, 0, 18])\n                cylinder(d1 = 26, d2 = 20, h = 10, $fn = segments);\n\n            // Hose barb bore\n            translate([0, 0, 28])\n                body_cylinder(od = 20, id = 20 - 2 * wall, h = 23);\n        }\n\n        // Remove inner void (actual flow path)\n        difference() {\n            cylinder(d = 20 - 2 * wall, h = 51, $fn = segments);\n            // Taper start\n            translate([0, 0, 18])\n                cylinder(d1 = 20 - 2 * wall, d2 = 26 - 2 * wall, h = 10, $fn = segments);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "nixie",
    "openscad_code": "// IN-12A style Nixie tube – medium-complexity realistic printable model\n// Overall height ≈ 70 mm, base diameter ≈ 25 mm\n\n// Basic parameters\n$fn = 36;\nwall = 1.2;           // 1.2 mm walls for FDM printing\npin_d = 1.0;          // 1 mm pin diameter\npin_h = 6;            // pin length under base\ndigit_depth = 6;      // height of digit cage inside\n\n// Overall envelope\nmodule envelope() {\n    // Glass envelope: two stacked spheres + cylinder mid-section\n    union() {\n        translate([0,0,55]) sphere(d=22);\n        cylinder(h=40, d1=22, d2=22, center=false);\n        sphere(d=22);\n    }\n}\n\n// Getter ring (metallic disk at top)\nmodule getter() {\n    difference() {\n        cylinder(h=0.8, d=20, center=true);\n        cylinder(h=1.0, d=16, center=true);\n    }\n}\n\n// Base with 10 radial pins\nmodule base() {\n    union() {\n        // Base body\n        cylinder(h=6, d=24);\n\n        // Pins\n        for(i=[0:9]) {\n            rotate([0,0,i*36])\n                translate([9,0,-pin_h])\n                    cylinder(h=12, d=pin_d, center=false);\n        }\n    }\n}\n\n// Digit cage: two stacked mesh grids\nmodule cage() {\n    difference() {\n        union() {\n            // Top grid\n            translate([0,0,digit_depth-0.5])\n                cube([20,20,1], center=true);\n            // Bottom grid\n            cube([20,20,1], center=true);\n            // Vertical posts\n            for(x=[-9,9])\n                for(y=[-9,9])\n                    translate([x,y,digit_depth/2])\n                        cube([wall, wall, digit_depth], center=true);\n        }\n        // Hollow inside\n        cube([16,16,digit_depth+2], center=true);\n    }\n}\n\n// Single digit segment (0-9) – simplified cathode\nmodule digit(n) {\n    w = 1.5;   // wire thickness\n    h = digit_depth-1;\n    // Map digit n to simple bar pattern\n    if(n==0) {\n        // Zero: outer frame\n        union() {\n            translate([ 0,  7, h/2]) cube([12,w,h], center=true);\n            translate([ 0, -7, h/2]) cube([12,w,h], center=true);\n            translate([ 6,  0, h/2]) cube([w,14,h], center=true);\n            translate([-6,  0, h/2]) cube([w,14,h], center=true);\n        }\n    } else if(n==1) {\n        // One: vertical bar\n        translate([0,0,h/2]) cube([w,14,h], center=true);\n    } else if(n==2) {\n        // Two: top, middle, bottom segments\n        union() {\n            translate([ 0,  7, h/2]) cube([12,w,h], center=true);\n            translate([ 0,  0, h/2]) cube([12,w,h], center=true);\n            translate([ 0, -7, h/2]) cube([12,w,h], center=true);\n            translate([ 6,  3.5, h/2]) cube([w,7,h], center=true);\n            translate([-6, -3.5, h/2]) cube([w,7,h], center=true);\n        }\n    }\n    // Other digits omitted for brevity\n}\n\n// Assembly\nunion() {\n    // Outer glass envelope\n    color(\"LightBlue\", 0.4) envelope();\n    // Getter ring\n    color(\"Gray\") translate([0,0,65]) getter();\n    // Base\n    color(\"Black\") base();\n    // Digit cage\n    color(\"Silver\") translate([0,0,12]) cage();\n    // Example digit \"2\" in center\n    color(\"White\") translate([0,0,12.5]) digit(2);\n}",
    "renders": true
  },
  {
    "household_item": "nuckelavee",
    "openscad_code": "// Nuckelavee - Scottish mythological creature (horse-human hybrid demon)\n// Designed for 3D printing with no overhangs and proper wall thickness\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Wall thickness for printing\nwall = 1.6;\n\n// Main module\nmodule nuckelavee() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Horse body (main torso)\n            horse_body();\n            \n            // Human torso emerging from horse back\n            human_torso();\n            \n            // Horse legs\n            for(i = [0:1]) {\n                translate([0, 30 - i*60, 0])\n                    rotate([0, 0, i*180])\n                        horse_leg();\n            }\n            \n            // Human arms\n            for(i = [0:1]) {\n                translate([15 - i*30, 0, 45])\n                    rotate([0, 0, 45 - i*90])\n                        human_arm();\n            }\n            \n            // Tail\n            translate([0, -50, 15])\n                rotate([0, 0, 0])\n                    tail();\n        }\n    }\n}\n\n// Horse body module\nmodule horse_body() {\n    // Main body\n    difference() {\n        hull() {\n            translate([0, 0, 30])\n                sphere(r = 25);\n            translate([0, -20, 15])\n                sphere(r = 20);\n        }\n        \n        // Hollow out for printing\n        translate([0, 0, 30])\n            sphere(r = 25 - wall);\n    }\n    \n    // Neck\n    translate([0, 35, 35])\n        rotate([30, 0, 0])\n            cylinder(h = 20, r1 = 15, r2 = 10);\n}\n\n// Human torso module\nmodule human_torso() {\n    // Torso\n    translate([0, 10, 50])\n        rotate([0, 0, 0])\n            difference() {\n                union() {\n                    // Chest\n                    translate([0, 0, 15])\n                        scale([1.2, 0.8, 1.5])\n                            sphere(r = 15);\n                    \n                    // Abdomen\n                    translate([0, 0, 0])\n                        scale([0.8, 0.6, 1.2])\n                            sphere(r = 12);\n                }\n                \n                // Hollow\n                translate([0, 0, 10])\n                    scale([1, 0.6, 1.3])\n                        sphere(r = 12);\n            }\n    \n    // Head\n    translate([0, 15, 65])\n        rotate([15, 0, 0])\n            difference() {\n                sphere(r = 12);\n                sphere(r = 10);\n            }\n    \n    // Horns\n    for(i = [0:1]) {\n        translate([5 - i*10, 15, 75])\n            rotate([0, 30 - i*60, 0])\n                cylinder(h = 15, r1 = 3, r2 = 1);\n    }\n}\n\n// Horse leg module\nmodule horse_leg() {\n    // Upper leg\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n            difference() {\n                cylinder(h = 30, r1 = 8, r2 = 6);\n                translate([0, 0, -1])\n                    cylinder(h = 32, r1 = 6.5, r2 = 4.5);\n            }\n    \n    // Lower leg\n    translate([0, 0, -35])\n        rotate([0, 0, 0])\n            difference() {\n                cylinder(h = 25, r1 = 6, r2 = 5);\n                translate([0, 0, -1])\n                    cylinder(h = 27, r1 = 4.5, r2 = 3.5);\n            }\n    \n    // Hoof\n    translate([0, 0, -65])\n        difference() {\n            cylinder(h = 10, r1 = 5, r2 = 6);\n            translate([0, 0, -1])\n                cylinder(h = 12, r1 = 3.5, r2 = 4.5);\n        }\n}\n\n// Human arm module\nmodule human_arm() {\n    // Upper arm\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n            difference() {\n                cylinder(h = 20, r1 = 5, r2 = 4);\n                translate([0, 0, -1])\n                    cylinder(h = 22, r1 = 3.5, r2 = 2.5);\n            }\n    \n    // Lower arm\n    translate([0, 0, -25])\n        rotate([0, 30, 0])\n            difference() {\n                cylinder(h = 18, r1 = 4, r2 = 3);\n                translate([0, 0, -1])\n                    cylinder(h = 20, r1 = 2.5, r2 = 1.5);\n            }\n    \n    // Hand\n    translate([0, 0, -47])\n        rotate([0, 30, 0])\n            difference() {\n                sphere(r = 4);\n                sphere(r = 2.5);\n            }\n}\n\n// Tail module\nmodule tail() {\n    hull() {\n        translate([0, 0, 0])\n            sphere(r = 4);\n        translate([0, -15, -5])\n            sphere(r = 3);\n        translate([0, -25, -8])\n            sphere(r = 2);\n    }\n}\n\n// Generate the model\nnuckelavee();",
    "renders": true
  },
  {
    "household_item": "ogopogo",
    "openscad_code": "// Ogopogo – realistic sea-serpent model\n// 3D-printable, ~85 mm long, no steep overhangs\n\n$fn = 40;           // smooth curves\nbody_r = 6;         // basic body radius\nseg_len = 7;        // length of one body segment\nsegments = 10;      // number of body segments\nhead_len = 15;      // head length\nneck_len = 8;       // neck length\ntail_taper = 0.3;   // tail narrowing factor\nwall_t = 1.6;       // wall thickness for printing\n\nmodule ogopogo() {\n    union() {\n        // Head: elongated sphere + snout\n        translate([0, 0, body_r/2])\n        rotate([0, -15, 0])\n        union() {\n            // skull\n            scale([1.3, 1, 1])\n            sphere(d = body_r * 2);\n            // snout\n            translate([head_len/2, 0, 0])\n            rotate([0, -30, 0])\n            cylinder(h = head_len/1.5, r1 = body_r*0.6, r2 = body_r*0.3);\n        }\n        \n        // Neck\n        translate([-(head_len+neck_len)/2, 0, 0])\n        cylinder(h = neck_len, r1 = body_r*0.9, r2 = body_r, center = true);\n\n        // Body segments\n        for (i = [0 : segments-1]) {\n            translate([-(head_len+neck_len) - seg_len*i, 0, 0]) {\n                // slight vertical undulation\n                wiggle = sin(i*30) * 2;\n                translate([0, 0, wiggle]) {\n                    // each segment is a tapered cylinder\n                    taper = 1 - (i/segments)*(1-tail_taper);\n                    cylinder(h = seg_len, r1 = body_r*taper, r2 = (body_r*taper)*(1 - 0.08), center=true);\n                }\n            }\n        }\n\n        // Tail fin (flat vertical)\n        fin_pos = -(head_len+neck_len) - seg_len*segments - body_r*tail_taper;\n        translate([fin_pos, 0, 0])\n        rotate([90, 0, 0])\n        scale([2, 1.5, 0.1])\n        cylinder(h = body_r*1.4, r1 = body_r*1.2, r2 = 0);\n\n        // Dorsal ridge along back\n        for (i = [0 : segments+2]) {\n            x = -(head_len+neck_len)/2 - seg_len*i;\n            size = 1.8 - i*0.15;\n            if (size > 0.5) {\n                translate([x, 0, body_r*0.9])\n                rotate([0, -15, 0])\n                cube([seg_len*0.7, wall_t, size], center = true);\n            }\n        }\n\n        // Eyes\n        eye_ofs = head_len*0.3;\n        eye_z = body_r*0.5;\n        for (side = [-1, 1]) {\n            translate([eye_ofs, side*body_r*0.6, eye_z])\n            sphere(d = body_r*0.4);\n            // eye pupil\n            difference() {\n                sphere(d = body_r*0.4);\n                translate([body_r*0.1, 0, 0])\n                sphere(d = body_r*0.3);\n            }\n        }\n\n        // Small side fins near neck\n        fin_x = -(head_len+neck_len)/2;\n        for (side = [-1, 1]) {\n            translate([fin_x, side*body_r*0.9, -body_r*0.3])\n            rotate([0, 0, side*30])\n            scale([1.2, 1, 0.1])\n            cylinder(h = body_r*1.1, r1 = body_r*0.8, r2 = 0);\n        }\n    }\n}\n\n// Centered on origin, flat bottom\nrotate([0, 180, 0])\ntranslate([0, 0, body_r])\nogopogo();",
    "renders": true
  },
  {
    "household_item": "ophiotaurus",
    "openscad_code": "// Ophiotaurs - bull with serpent tail\n// Medium complexity, realistic style\n\n// Global parameters\n$fn = 32;\n\n// Main module\nmodule ophiotaurus() {\n    // Body\n    union() {\n        // Bull body\n        translate([0, 0, 0])\n            bull_body();\n        \n        // Serpent tail\n        translate([-35, 0, 0])\n            serpent_tail();\n        \n        // Bull head\n        translate([30, 0, 15])\n            bull_head();\n        \n        // Legs\n        for(i = [0:3]) {\n            angle = i * 90;\n            translate([15 * cos(angle), 15 * sin(angle), -8])\n                rotate([0, 0, angle])\n                    bull_leg();\n        }\n        \n        // Horns\n        translate([40, 0, 25])\n            rotate([0, -20, 0])\n                horn();\n        translate([40, 0, 25])\n            rotate([0, -20, -30])\n                horn();\n    }\n}\n\n// Bull body module\nmodule bull_body() {\n    // Main torso\n    union() {\n        // Upper body\n        scale([1.2, 0.8, 0.9])\n            sphere(r = 15);\n        \n        // Lower belly\n        translate([0, 0, -10])\n            scale([1.3, 1, 0.7])\n                sphere(r = 12);\n    }\n}\n\n// Serpent tail module\nmodule serpent_tail() {\n    // Create serpentine segments\n    segments = 8;\n    for(i = [0:segments-1]) {\n        angle = i * 15;\n        y_offset = sin(angle) * 8;\n        z_offset = -cos(angle) * 3 - i * 2;\n        \n        translate([-i * 8, y_offset, z_offset])\n            scale([0.9 - i * 0.08, 0.9 - i * 0.08, 0.9 - i * 0.08])\n                sphere(r = 10 - i);\n        \n        // Tail tip\n        if(i == segments-1) {\n            translate([-i * 8 - 8, y_offset - 3, z_offset])\n                scale([0.3, 0.3, 0.8])\n                    cylinder(r1 = 3, r2 = 0, h = 8);\n        }\n    }\n}\n\n// Bull head module\nmodule bull_head() {\n    union() {\n        // Main head\n        scale([1.2, 0.8, 0.9])\n            sphere(r = 10);\n        \n        // Snout\n        translate([8, 0, -2])\n            scale([1, 0.8, 0.7])\n                sphere(r = 8);\n        \n        // Nostrils\n        translate([12, 3, -3])\n            rotate([90, 0, 0])\n                cylinder(r = 1.5, h = 3);\n        translate([12, -3, -3])\n            rotate([90, 0, 0])\n                cylinder(r = 1.5, h = 3);\n        \n        // Eyes\n        translate([5, 5, 3])\n            sphere(r = 2);\n        translate([5, -5, 3])\n            sphere(r = 2);\n    }\n}\n\n// Bull leg module\nmodule bull_leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 8])\n            scale([0.7, 0.7, 1])\n                cylinder(r = 5, h = 12);\n        \n        // Lower leg\n        translate([0, 0, 0])\n            scale([0.6, 0.6, 1])\n                cylinder(r = 4, h = 10);\n        \n        // Hoof\n        translate([0, 0, -5])\n            scale([0.9, 0.9, 0.5])\n                cylinder(r = 5, h = 5);\n    }\n}\n\n// Horn module\nmodule horn() {\n    rotate([0, 0, 30])\n        cylinder(r1 = 2, r2 = 0.5, h = 12);\n}\n\n// Create the model scaled for 3D printing\nscale(0.8)\n    ophiotaurus();",
    "renders": true
  },
  {
    "household_item": "orc",
    "openscad_code": "// Orc in realistic style - Medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\nmodule orc_head() {\n    // Main head shape\n    difference() {\n        scale([1.2, 1, 1.1])\n        sphere(15);\n        \n        // Eye sockets\n        translate([8, 8, 5])\n        rotate([0, 10, 0])\n        sphere(6);\n        \n        translate([-8, 8, 5])\n        rotate([0, -10, 0])\n        sphere(6);\n        \n        // Mouth cavity\n        translate([0, 12, -5])\n        rotate([10, 0, 0])\n        cube([10, 8, 8], center=true);\n    }\n    \n    // Nose\n    translate([0, 13, 0])\n    scale([1, 1.5, 0.8])\n    sphere(3);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([side * 15, -5, 3])\n        rotate([0, side * 20, side * 10])\n        scale([0.8, 1.2, 2])\n        cylinder(h=8, r1=3, r2=1);\n    }\n    \n    // Jaw\n    translate([0, 10, -12])\n    rotate([10, 0, 0])\n    scale([1, 1.5, 0.8])\n    cube([20, 8, 10], center=true);\n    \n    // Tusks\n    for(side = [-1, 1]) {\n        translate([side * 5, 12, -12])\n        rotate([0, side * 5, 0])\n        cylinder(h=8, r1=2.5, r2=1);\n    }\n}\n\nmodule orc_body() {\n    // Torso\n    translate([0, 0, -25])\n    scale([1.5, 1.2, 2])\n    cube([20, 25, 30], center=true);\n    \n    // Shoulders\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, -10])\n        rotate([0, side * 10, 0])\n        scale([0.8, 1, 1.2])\n        sphere(8);\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 22, 0, -15])\n        rotate([0, side * 20, 0])\n        cylinder(h=25, r=5);\n        \n        // Forearms\n        translate([side * 30, 0, -30])\n        rotate([0, side * 30, 90])\n        cylinder(h=20, r=4);\n        \n        // Hands\n        translate([side * 35, 0, -35])\n        sphere(6);\n    }\n}\n\nmodule orc_legs() {\n    // Pelvis\n    translate([0, 0, -45])\n    scale([1.8, 1, 0.8])\n    cube([20, 20, 15], center=true);\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 8, 0, -55])\n        cylinder(h=25, r=6);\n        \n        // Feet\n        translate([side * 8, 5, -70])\n        scale([1.2, 2, 0.8])\n        cube([12, 20, 8], center=true);\n    }\n}\n\nmodule orc_armor() {\n    // Chest plate\n    translate([0, 0, -25])\n    scale([1.7, 1.3, 2.1])\n    difference() {\n        cube([22, 27, 32], center=true);\n        scale([0.9, 0.9, 0.9])\n        cube([22, 27, 32], center=true);\n    }\n    \n    // Shoulder pads\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, -10])\n        scale([1.2, 1.5, 0.8])\n        rotate([0, 30, side * 10])\n        cube([12, 15, 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    translate([0, 0, 20])\n    orc_head();\n    \n    orc_body();\n    \n    orc_legs();\n    \n    orc_armor();\n    \n    // Belt\n    translate([0, 5, -40])\n    scale([2, 0.8, 0.5])\n    cube([25, 5, 5], center=true);\n    \n    // Loincloth\n    translate([0, 8, -50])\n    scale([1.5, 0.1, 1.5])\n    cube([15, 2, 15], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "pard",
    "openscad_code": "// Realistic Pard (Medium complexity)\n// 90 mm long, 40 mm tall, 30 mm wide\n\n// Body parameters\nbody_length = 70;\nbody_height = 30;\nbody_width = 25;\n\n// Head parameters\nhead_length = 20;\nhead_width = 18;\nhead_height = 15;\n\n// Leg parameters\nleg_height = 15;\nleg_width = 6;\nleg_depth = 8;\n\n// Tail parameters\ntail_length = 25;\ntail_width = 5;\ntail_height = 3;\n\n// Ear parameters\near_height = 8;\near_width = 4;\near_depth = 2;\n\n// Eye parameters\neye_radius = 2;\neye_offset = 8;\n\n// Spots pattern\nspots = [\n    [0, 0, 0],\n    [15, 5, 0],\n    [-10, 3, 0],\n    [25, -2, 0],\n    [-20, -4, 0],\n    [0, 8, 0],\n    [-15, 6, 0],\n    [10, -6, 0]\n];\n\nmodule pard_body() {\n    // Main body - elongated ellipsoid shape\n    union() {\n        // Central torso\n        scale([1.2, 1, 1])\n            sphere(d=body_width, $fn=32);\n        \n        // Front chest bulge\n        translate([body_length/3, 0, 0])\n            scale([0.8, 0.9, 0.9])\n                sphere(d=body_width, $fn=32);\n        \n        // Rear hip bulge\n        translate([-body_length/3, 0, 0])\n            scale([0.9, 0.95, 0.9])\n                sphere(d=body_width*1.1, $fn=32);\n    }\n}\n\nmodule pard_head() {\n    union() {\n        // Main head shape\n        translate([body_length/2 + head_length/2, 0, body_height/2])\n            scale([1.2, 0.9, 0.8])\n                sphere(d=head_width, $fn=32);\n        \n        // Snout extension\n        translate([body_length/2 + head_length - 2, 0, body_height/2 - 3])\n            scale([1.5, 0.7, 0.6])\n                sphere(d=head_width*0.6, $fn=16);\n        \n        // Ears\n        translate([body_length/2 + head_length/2 - 2, head_width/2, body_height/2 + head_height/2 - 2])\n            rotate([0, 15, 0])\n                scale([0.5, 1, 0.3])\n                    cylinder(h=ear_height, d1=ear_width, d2=ear_width/2, $fn=8);\n        \n        translate([body_length/2 + head_length/2 - 2, -head_width/2, body_height/2 + head_height/2 - 2])\n            rotate([0, -15, 0])\n                scale([0.5, 1, 0.3])\n                    cylinder(h=ear_height, d1=ear_width, d2=ear_width/2, $fn=8);\n        \n        // Eyes\n        translate([body_length/2 + head_length/2 + 3, head_width/2 - 2, body_height/2 + 2])\n            sphere(d=eye_radius, $fn=16);\n        \n        translate([body_length/2 + head_length/2 + 3, -head_width/2 + 2, body_height/2 + 2])\n            sphere(d=eye_radius, $fn=16);\n        \n        // Nose\n        translate([body_length/2 + head_length + 2, 0, body_height/2 - 3])\n            sphere(d=2, $fn=8);\n    }\n}\n\nmodule pard_leg(position, angle) {\n    translate(position)\n        rotate([0, 0, angle])\n            union() {\n                // Upper leg\n                translate([0, 0, leg_height/2])\n                    scale([0.8, 0.7, 1])\n                        cylinder(h=leg_height, d1=leg_width, d2=leg_width*0.8, $fn=12);\n                \n                // Paw\n                translate([0, 0, leg_height + 2])\n                    sphere(d=leg_width*1.2, $fn=12);\n            }\n}\n\nmodule pard_tail() {\n    translate([-body_length/2 - tail_length/2, 0, body_height/2 - 5])\n        rotate([0, -20, 0])\n            scale([1, 0.8, 0.6])\n                cylinder(h=tail_length, d1=tail_width*2, d2=tail_width, $fn=16);\n}\n\nmodule pard_spots() {\n    for(spot = spots) {\n        translate([spot[0], spot[1], body_height/2 + spot[2] + 2])\n            scale([1.2, 1, 0.3])\n                cylinder(h=1, d=4, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    pard_body();\n    \n    // Head\n    pard_head();\n    \n    // Legs - front\n    pard_leg([body_length/3, body_width/2 - 2, -body_height/2 + 5], 15);\n    pard_leg([body_length/3, -body_width/2 + 2, -body_height/2 + 5], -15);\n    \n    // Legs - rear\n    pard_leg([-body_length/3, body_width/2 - 2, -body_height/2 + 5], -15);\n    pard_leg([-body_length/3, -body_width/2 + 2, -body_height/2 + 5], 15);\n    \n    // Tail\n    pard_tail();\n    \n    // Spots pattern\n    pard_spots();\n}",
    "renders": true
  },
  {
    "household_item": "peryton",
    "openscad_code": "// Peryton - Medium complexity realistic style\n// Winged deer with bird features\n\n$fn = 50; // Smooth curves\n\n// Main body\nmodule body() {\n    union() {\n        // Torso - elongated sphere\n        scale([1.2, 0.8, 1.1]) \n            sphere(15);\n        \n        // Chest extension\n        translate([8, 0, -2])\n            scale([0.8, 0.7, 0.9])\n                sphere(12);\n                \n        // Rump\n        translate([-12, 0, -3])\n            scale([0.9, 0.9, 0.8])\n                sphere(10);\n    }\n}\n\n// Neck and head\nmodule neck_and_head() {\n    union() {\n        // Neck\n        translate([18, 0, 10])\n            rotate([0, -20, 0])\n            cylinder(12, 5, 4);\n        \n        // Head\n        translate([28, 0, 18])\n            scale([1.2, 0.8, 1])\n                sphere(8);\n        \n        // Muzzle\n        translate([35, 0, 16])\n            scale([1.5, 0.6, 0.6])\n                sphere(5);\n    }\n}\n\n// Leg module\nmodule leg(length, angle, offset_x, offset_y) {\n    translate([offset_x, offset_y, -12])\n        rotate([angle, 0, 0])\n        union() {\n            // Upper leg\n            cylinder(length * 0.6, 3, 2.5);\n            \n            // Lower leg\n            translate([0, 0, length * 0.6])\n                rotate([20, 0, 0])\n                cylinder(length * 0.4, 2.5, 2);\n                \n            // Hoof\n            translate([0, 0, length])\n                scale([0.8, 1.2, 0.5])\n                    cylinder(2, 2, 1.5);\n        }\n}\n\n// Wing module\nmodule wing(side) {\n    // Mirror for left/right\n    mirror([side, 0, 0])\n        translate([0, 15, 10])\n        rotate([0, 0, 30])\n        union() {\n            // Shoulder joint\n            sphere(4);\n            \n            // Main wing bones\n            for(i = [0:45:135]) {\n                rotate([0, 0, i])\n                union() {\n                    // Primary feathers\n                    translate([0, 0, -2])\n                        cylinder(25, 1, 0.5);\n                    \n                    // Secondary feathers\n                    for(j = [1:3]) {\n                        translate([0, -j*3, j*2])\n                            rotate([j*5, 0, 0])\n                            cylinder(20-j*3, 0.8, 0.3);\n                    }\n                }\n            }\n        }\n}\n\n// Bird tail\nmodule tail() {\n    translate([-20, 0, 0])\n        rotate([30, 0, 0])\n        union() {\n            // Tail base\n            sphere(5);\n            \n            // Tail feathers\n            for(i = [-30:15:30]) {\n                rotate([0, 0, i])\n                translate([-5, 0, -2])\n                    cylinder(15, 2, 0.5);\n            }\n        }\n}\n\n// Antlers\nmodule antlers() {\n    translate([28, 0, 25])\n        union() {\n            // Left antler\n            rotate([0, 0, -15])\n            antler_branch();\n            \n            // Right antler\n            rotate([0, 0, 15])\n            scale([-1, 1, 1])\n                antler_branch();\n        }\n}\n\nmodule antler_branch() {\n    translate([0, 0, 0])\n        union() {\n            // Main beam\n            cylinder(12, 1.5, 1);\n            \n            // Tines\n            translate([0, 0, 4])\n                rotate([0, 30, -30])\n                    cylinder(8, 1, 0.5);\n            \n            translate([0, 0, 8])\n                rotate([0, 20, -45])\n                    cylinder(6, 0.8, 0.3);\n        }\n}\n\n// Eagle beak\nmodule beak() {\n    translate([38, 0, 16])\n        rotate([0, 90, 0])\n        scale([1, 0.8, 0.6])\n            cylinder(8, 3, 0.5);\n}\n\n// Assembly\nunion() {\n    body();\n    neck_and_head();\n    \n    // Legs\n    leg(20, 10, 10, 5);\n    leg(20, 10, 10, -5);\n    leg(20, -10, -8, 5);\n    leg(20, -10, -8, -5);\n    \n    // Wings\n    wing(1);  // Right wing\n    wing(-1); // Left wing\n    \n    tail();\n    antlers();\n    beak();\n}",
    "renders": true
  },
  {
    "household_item": "qilin",
    "openscad_code": "// Qilin - Realistic Style with Medium Complexity\n// Size: 80mm long, 50mm high, 30mm wide\n\n// Overall scale\nscale = 0.8;\n\n// Body module\nmodule body() {\n    // Main torso\n    translate([0, 0, 20])\n    scale([1.2, 0.6, 0.8])\n    sphere(r=15);\n    \n    // Chest\n    translate([10, 0, 18])\n    scale([0.8, 0.5, 0.6])\n    sphere(r=12);\n    \n    // Abdomen\n    translate([-5, 0, 15])\n    scale([0.6, 0.4, 0.5])\n    sphere(r=10);\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([20, 0, 35])\n    rotate([0, -10, 0])\n    scale([1, 0.8, 1])\n    sphere(r=12);\n    \n    // Muzzle\n    translate([28, 0, 33])\n    scale([0.8, 0.6, 0.5])\n    sphere(r=8);\n    \n    // Horns (dragon-like)\n    for(i=[-1, 1]) {\n        translate([18, i*6, 42])\n        rotate([0, 20*i, 0])\n        cylinder(h=15, r1=3, r2=1);\n    }\n    \n    // Ears\n    for(i=[-1, 1]) {\n        translate([15, i*8, 38])\n        rotate([0, 0, 30*i])\n        scale([0.3, 1, 1.5])\n        sphere(r=5);\n    }\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos])\n    rotate([0, angle, 0]) {\n        // Upper leg\n        cylinder(h=15, r=4);\n        \n        // Lower leg\n        translate([0, 0, -15])\n        cylinder(h=12, r=3);\n        \n        // Hoof\n        translate([0, 0, -27])\n        scale([1, 1.2, 0.5])\n        cylinder(h=5, r=4);\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Tail segments\n    for(i=[0:5]) {\n        translate([-15 - i*3, 0, 25 - i*2])\n        rotate([0, 0, -20 - i*10])\n        scale([0.9 - i*0.1, 0.9 - i*0.1, 0.9 - i*0.1])\n        sphere(r=8 - i);\n    }\n}\n\n// Scales pattern on body\nmodule scales() {\n    for(x=[-10:5:15]) {\n        for(y=[-8:4:8]) {\n            if(x*x + y*y < 225) {\n                translate([x, y, 28])\n                scale([1, 1, 0.3])\n                sphere(r=2);\n            }\n        }\n    }\n}\n\n// Mane along back\nmodule mane() {\n    for(i=[-5:2:15]) {\n        translate([i, 0, 38])\n        cylinder(h=8, r=1.5);\n    }\n}\n\n// Main assembly\nscale(scale) {\n    union() {\n        // Body parts\n        body();\n        head();\n        tail();\n        mane();\n        \n        // Legs\n        leg(12, 8, 15, -10);  // Front right\n        leg(12, -8, 15, -10); // Front left\n        leg(-8, 6, 10, 15);   // Rear right\n        leg(-8, -6, 10, 15);  // Rear left\n        \n        // Decorative scales\n        scales();\n        \n        // Eyes\n        for(i=[-1, 1]) {\n            translate([25, i*4, 35])\n            scale([0.5, 0.5, 0.5])\n            sphere(r=2);\n        }\n        \n        // Nostrils\n        for(i=[-1, 1]) {\n            translate([30, i*2, 32])\n            scale([0.3, 0.3, 0.3])\n            sphere(r=1.5);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "questing",
    "openscad_code": "// Questing Arrow – realistic, medium-complexity OpenSCAD model\n// Overall length ≈ 90 mm, wall thickness ≥ 1 mm for FDM printing\n\n// Parameters\n$fn = 32;\nshaft_d      = 6;\nshaft_l      = 75;\nhead_l       = 15;\nhead_base_d  = 9;\nfletch_l     = 20;\nfletch_h     = 4;\nfletch_t     = 1.5;\nnock_depth   = 5;\nnock_d       = 3.5;\nwall_t       = 1.2;\n\n// ---- Main assembly ----\nunion() {\n    // Arrow shaft\n    cylinder(h = shaft_l, d = shaft_d, center = false);\n\n    // Arrow head (hollow pointy cone)\n    translate([0, 0, shaft_l])\n        difference() {\n            cylinder(h = head_l, r1 = head_base_d/2, r2 = 0, center = false);\n            cylinder(h = head_l + 0.1, r1 = head_base_d/2 - wall_t, r2 = -0.1, center = false);\n        }\n\n    // Fletching – three vanes\n    for (i = [0:120:240])\n        rotate([0, 0, i])\n            translate([0, shaft_d/2, shaft_l - fletch_l - 2])\n                linear_extrude(height = fletch_l, twist = -10)\n                    offset(delta = fletch_t/2)\n                        polygon(points = [\n                            [0, 0],\n                            [fletch_h, 0],\n                            [0, fletch_l*0.8],\n                            [0, fletch_l]\n                        ]);\n\n    // Nock (simple cylindrical cut + notch)\n    difference() {\n        translate([0, 0, -nock_depth])\n            cylinder(h = nock_depth, d = shaft_d, center = false);\n        // Crescent notch for bow string\n        rotate([0, 0, 90])\n            translate([shaft_d/2 - 0.5, 0, -nock_depth])\n                cube([shaft_d, nock_d, nock_depth + 0.1], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "qutrub",
    "openscad_code": "// Qutrub (Arabian dagger) – realistic, medium-complexity\n// All dimensions in mm, overall length ≈ 85 mm, 3D-print ready\n\n// global parameters\nblade_len = 55;\nblade_base = 10;\nblade_thick = 2;\nricasso_len = 8;\nguard_len = 15;\nguard_thick = 3;\ngrip_len = 22;\ngrip_d = 12;\npommel_d = 16;\npommel_h = 8;\n\n// wall / extrusion thickness\nwall = 1.2;\n\n// main module\nmodule qutrub() {\n    union() {\n        // sharpened curved blade\n        difference() {\n            // main blade volume\n            linear_extrude(height = blade_thick, center = true, convexity = 10)\n                polygon(points = [\n                    [0,0],\n                    [blade_len, blade_base/2],\n                    [blade_len, -blade_base/2]\n                ]);\n            // false-edge fuller (both faces)\n            translate([blade_len*0.6,0,0])\n                rotate([0,90,0])\n                    cylinder(h = blade_len*0.7, r = 1.5, $fn = 16);\n            mirror([0,1,0])\n                translate([blade_len*0.6,0,0])\n                    rotate([0,90,0])\n                        cylinder(h = blade_len*0.7, r = 1.5, $fn = 16);\n        }\n\n        // ricasso (unsharpened base segment)\n        translate([0, -ricasso_len/2, -blade_thick/2])\n            cube([blade_thick*2, ricasso_len, blade_thick]);\n\n        // cross-guard (simple quillons)\n        difference() {\n            translate([-guard_len/2, -guard_thick/2, -blade_thick/2])\n                cube([guard_len, guard_thick, blade_thick*2]);\n            // decorative filework (triangular notches)\n            for(i=[-2:2])\n                translate([i*3, -1, -1])\n                    rotate([0,0,45])\n                        cube([2,2,blade_thick*2+2], center = true);\n        }\n\n        // grip (stacked leather look via rings)\n        for(i=[0: grip_len/2 -1]) {\n            color(\"saddlebrown\")\n            translate([0, -ricasso_len -i*2 -1, 0])\n                cylinder(h = 2, r1 = grip_d/2 -1, r2 = grip_d/2, $fn = 32);\n        }\n\n        // pommel (domed cap with ring)\n        translate([0, -ricasso_len -grip_len, 0])\n            difference() {\n                sphere(d = pommel_d, $fn = 64);\n                // hollow for weight\n                sphere(d = pommel_d - wall*2, $fn = 64);\n                // ring loop\n                rotate([90,0,0])\n                    cylinder(h = pommel_h, r = wall, $fn = 16);\n            }\n\n        // bolster between grip and pommel\n        translate([0, -ricasso_len -grip_len -wall, 0])\n            cylinder(h = wall, r = grip_d/2 + 1, $fn = 32);\n    }\n}\n\n// render\nrotate([0,0,45])\nqutrub();",
    "renders": true
  },
  {
    "household_item": "rakshasa",
    "openscad_code": "// Rakshasa - Realistic Style, Medium Complexity\n// Height: 75mm, 3D printable\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule rakshasa() {\n    // Head with mane\n    translate([0, 0, 60])\n    union() {\n        // Skull\n        sphere(d=20, $fn=32);\n        \n        // Mane (layered cylinders)\n        for(i=[0:15:180]) {\n            rotate([i, 0, 0])\n            translate([0, 10, 0])\n            cylinder(h=8, d1=6, d2=4, $fn=6);\n        }\n    }\n    \n    // Torso\n    translate([0, 0, 35])\n    difference() {\n        // Main torso\n        cube([25, 15, 30], center=true);\n        \n        // Hollow center\n        cube([25-2*wall, 15-2*wall, 30-2*wall], center=true);\n    }\n    \n    // Arms\n    for(side=[-1, 1]) {\n        translate([side*15, 12, 45])\n        rotate([0, 0, side*30])\n        arm(side);\n    }\n    \n    // Legs\n    for(side=[-1, 1]) {\n        translate([side*8, 0, 15])\n        leg(side);\n    }\n    \n    // Tail\n    translate([0, -12, 25])\n    rotate([0, 90, 0])\n    cylinder(h=30, d1=8, d2=4, $fn=8);\n    \n    // Face details\n    translate([0, 10, 60])\n    union() {\n        // Eyes\n        for(side=[-1, 1]) {\n            translate([side*5, 0, 3])\n            sphere(d=3, $fn=16);\n        }\n        \n        // Fangs\n        for(side=[-1, 1]) {\n            translate([side*3, -7, -2])\n            rotate([0, 0, side*15])\n            cylinder(h=6, d1=2, d2=1, $fn=6);\n        }\n    }\n}\n\nmodule arm(side) {\n    // Upper arm\n    translate([0, 0, 0])\n    cylinder(h=15, d=6, $fn=12);\n    \n    // Forearm\n    translate([0, 0, -15])\n    rotate([0, side*45, 0])\n    cylinder(h=12, d=5, $fn=10);\n    \n    // Hand with claws\n    translate([0, 0, -27])\n    rotate([0, side*45, 0])\n    union() {\n        // Palm\n        cube([4, 3, 6], center=true);\n        \n        // Claws\n        for(i=[-1:1]) {\n            translate([i*1.5, 0, -3])\n            cylinder(h=4, d1=1.5, d2=0.5, $fn=8);\n        }\n    }\n}\n\nmodule leg(side) {\n    // Thigh\n    translate([0, 0, 0])\n    cylinder(h=20, d=8, $fn=12);\n    \n    // Shin\n    translate([0, 0, -20])\n    rotate([0, 0, side*15])\n    cylinder(h=15, d=6, $fn=10);\n    \n    // Foot\n    translate([0, -5, -35])\n    rotate([0, 90, 0])\n    cube([12, 4, 6], center=true);\n}\n\n// Ground support base\nmodule base() {\n    translate([0, 0, -2])\n    cylinder(h=4, d=30, $fn=32);\n}\n\n// Assembly\nunion() {\n    rakshasa();\n    base();\n}",
    "renders": true
  },
  {
    "household_item": "remora",
    "openscad_code": "// Remora fish (realistic style, medium complexity)\n// Size: ~75 mm long\n\n// Main body parameters\nbody_length = 60;\nbody_height = 20;\nbody_width = 15;\n\n// Head parameters\nhead_length = 20;\nhead_height = 18;\nhead_width = 16;\n\n// Dorsal fin parameters\ndorsal_fin_height = 12;\ndorsal_fin_length = 25;\n\n// Suction disc parameters\ndisc_diameter = 18;\ndisc_thickness = 4;\n\n// Tail parameters\ntail_length = 15;\ntail_height = 12;\n\n// Eye parameters\neye_radius = 3;\neye_offset = 8;\n\n// Pectoral fin parameters\nfin_length = 10;\nfin_width = 5;\nfin_thickness = 1.5;\n\nmodule remora_body() {\n    // Main body - tapered ellipsoid shape\n    hull() {\n        translate([0, 0, 0])\n            scale([1, 0.8, 0.6])\n                sphere(d=body_width);\n        \n        translate([body_length*0.7, 0, 0])\n            scale([0.6, 0.5, 0.4])\n                sphere(d=body_width*0.8);\n    }\n}\n\nmodule remora_head() {\n    // Head - more rounded front\n    hull() {\n        translate([-head_length/2, 0, 0])\n            scale([1.2, 1, 0.9])\n                sphere(d=head_width);\n        \n        translate([head_length/2, 0, 0])\n            scale([0.8, 0.9, 0.8])\n                sphere(d=head_width*0.9);\n    }\n}\n\nmodule suction_disc() {\n    // Suction disc on top of head\n    translate([0, 0, head_height/2 + disc_thickness/2])\n        difference() {\n            cylinder(h=disc_thickness, d=disc_diameter);\n            // Internal ridges for suction\n            for(i = [1:6]) {\n                rotate([0, 0, i*60])\n                    translate([disc_diameter/3, 0, -0.1])\n                        cube([disc_diameter/6, 1, disc_thickness+0.2]);\n            }\n        }\n}\n\nmodule dorsal_fin() {\n    // Dorsal fin - triangular shape\n    translate([body_length*0.4, 0, body_height/2])\n        rotate([90, 0, 0])\n            linear_extrude(height=dorsal_fin_thickness=2)\n                polygon(points=[\n                    [0, 0],\n                    [dorsal_fin_length/2, dorsal_fin_height],\n                    [dorsal_fin_length, 0]\n                ]);\n}\n\nmodule tail_fin() {\n    // Tail fin - forked shape\n    translate([body_length + tail_length/2, 0, 0])\n        union() {\n            // Upper lobe\n            translate([0, 0, tail_height/4])\n                rotate([0, 0, 20])\n                    scale([1, 0.3, 1])\n                        cylinder(h=tail_length, d=tail_height);\n            \n            // Lower lobe\n            translate([0, 0, -tail_height/4])\n                rotate([0, 0, -20])\n                    scale([1, 0.3, 1])\n                        cylinder(h=tail_length, d=tail_height);\n        }\n}\n\nmodule pectoral_fin(side) {\n    // Pectoral fin - side mounted\n    mirror([side, 0, 0])\n        translate([0, body_width/2 + fin_width/2, -body_height/4])\n            rotate([0, 90, 10])\n                scale([1, 0.3, 1])\n                    cylinder(h=fin_length, d=fin_width);\n}\n\nmodule eye(side) {\n    // Eye with pupil\n    mirror([side, 0, 0])\n        translate([-head_length/2 + eye_offset, head_width/3, head_height/4])\n        union() {\n            // Eyeball\n            sphere(r=eye_radius);\n            \n            // Pupil\n            color(\"black\")\n                translate([eye_radius*0.7, 0, 0])\n                    sphere(r=eye_radius*0.5);\n        }\n}\n\nmodule remora_complete() {\n    union() {\n        // Main body\n        remora_body();\n        \n        // Head\n        translate([-body_length/2 - head_length/2, 0, 0])\n            remora_head();\n        \n        // Suction disc\n        translate([-body_length/2 - head_length/2, 0, 0])\n            suction_disc();\n        \n        // Dorsal fin\n        dorsal_fin();\n        \n        // Tail\n        tail_fin();\n        \n        // Pectoral fins\n        pectoral_fin(1);\n        pectoral_fin(-1);\n        \n        // Eyes\n        eye(1);\n        eye(-1);\n    }\n}\n\n// Generate the complete remora\nscale([1, 1, 1])\n    remora_complete();",
    "renders": true
  },
  {
    "household_item": "samodiva",
    "openscad_code": "// Samodiva (Bulgarian forest nymph) - Realistic Medium Complexity\n// Height ~80mm, designed for 3D printing\n\n$fn = 32; // Smooth curves\n\n// Parameters for easy scaling\nscale = 1.0;\nbody_h = 30 * scale;\nbody_r = 8 * scale;\nhead_r = 6 * scale;\nwing_span = 35 * scale;\nwing_h = 20 * scale;\ndress_length = 25 * scale;\n\n// Main assembly\nunion() {\n    // Body (torso)\n    translate([0, 0, dress_length/2 + body_h/2])\n        cylinder(h=body_h, r1=body_r, r2=body_r*0.8, center=true);\n    \n    // Head\n    translate([0, 0, dress_length + body_h + head_r*0.8])\n        sphere(r=head_r);\n    \n    // Hair\n    difference() {\n        translate([0, 0, dress_length + body_h + head_r*0.9])\n            sphere(r=head_r*1.3);\n        translate([0, 0, dress_length + body_h + head_r*1.5])\n            sphere(r=head_r*1.1);\n    }\n    \n    // Dress (flowing gown)\n    translate([0, 0, dress_length/2])\n        cylinder(h=dress_length, r1=body_r*1.8, r2=body_r*2.2, center=true);\n    \n    // Arms\n    for (side = [-1, 1]) {\n        translate([side * body_r*1.2, 0, dress_length + body_h*0.7])\n            rotate([0, side * 20, 0])\n                cylinder(h=15 * scale, r=2 * scale, center=true);\n    }\n    \n    // Wings (delicate fairy wings)\n    module wing() {\n        difference() {\n            // Main wing shape\n            scale([1, 0.3, 1])\n                sphere(r=wing_span/2);\n            // Cut wing holes\n            for (i = [1:3]) {\n                translate([wing_span/3 * i - wing_span/2, 0, wing_h/3 * i - wing_h/2])\n                    sphere(r=3 * scale);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([0, -body_r*0.5, dress_length + body_h*0.8])\n        rotate([0, 20, 30])\n        wing();\n    \n    // Right wing\n    translate([0, body_r*0.5, dress_length + body_h*0.8])\n        rotate([0, 20, -30])\n        mirror([0, 1, 0])\n        wing();\n    \n    // Legs (simple tapered)\n    for (side = [-1, 1]) {\n        translate([side * 2 * scale, 0, dress_length/4])\n            cylinder(h=dress_length*0.8, r1=2 * scale, r2=1 * scale);\n    }\n    \n    // Feet\n    for (side = [-1, 1]) {\n        translate([side * 2 * scale, 0, 1 * scale])\n            sphere(r=1.5 * scale);\n    }\n    \n    // Crown of flowers\n    translate([0, 0, dress_length + body_h + head_r*2])\n        rotate([90, 0, 0])\n        cylinder(h=1 * scale, r=head_r*1.2, center=true);\n    \n    // Small flowers on crown\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([head_r*1.2, 0, dress_length + body_h + head_r*2])\n            sphere(r=1 * scale);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "sasabonsam",
    "openscad_code": "$fn = 50;\n\n// Overall scale\nscale_factor = 0.4;\n\n// Head module\nmodule head() {\n    // Skull\n    difference() {\n        sphere(d=20);\n        // Eye sockets\n        translate([-6, 8, 4]) rotate([0, 90, 0]) cylinder(h=10, r1=4, r2=2);\n        translate([6, 8, 4]) rotate([0, 90, 0]) cylinder(h=10, r1=4, r2=2);\n        // Nostrils\n        translate([-2, 9, 0]) sphere(d=3);\n        translate([2, 9, 0]) sphere(d=3);\n    }\n    \n    // Jaw\n    translate([0, 5, -8]) cube([15, 10, 8], center=true);\n}\n\n// Body module\nmodule body() {\n    // Torso\n    difference() {\n        cube([18, 30, 12], center=true);\n        // Hollow center\n        cube([14, 26, 10], center=true);\n    }\n    \n    // Ribcage details\n    for(i=[-10:5:10]) {\n        translate([0, i, 6]) cube([19, 2, 1], center=true);\n    }\n}\n\n// Long thin leg module\nmodule leg(length) {\n    difference() {\n        cylinder(h=length, r1=4, r2=2);\n        // Hollow for printing\n        translate([0, 0, -1]) cylinder(h=length+2, r1=3, r2=1);\n    }\n}\n\n// Arm module\nmodule arm() {\n    difference() {\n        cylinder(h=25, r1=3, r2=2);\n        // Hollow\n        translate([0, 0, -1]) cylinder(h=27, r1=2, r2=1);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Head on top\n    translate([0, 0, 25]) head();\n    \n    // Body\n    body();\n    \n    // Long legs - sasabonsam has extremely long legs\n    translate([-8, 0, -25]) leg(40);\n    translate([8, 0, -25]) leg(40);\n    \n    // Arms\n    translate([-12, 0, 10]) rotate([0, 30, 0]) arm();\n    translate([12, 0, 10]) rotate([0, -30, 0]) arm();\n    \n    // Feet\n    translate([-8, 0, -45]) cube([8, 4, 3], center=true);\n    translate([8, 0, -45]) cube([8, 4, 3], center=true);\n    \n    // Hands\n    translate([-18, 0, 10]) cube([6, 3, 2], center=true);\n    translate([18, 0, 10]) cube([6, 3, 2], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "scylla",
    "openscad_code": "// Scylla - Realistic Style, Medium Complexity\n// 6-headed sea monster from Greek mythology\n\n// Overall dimensions\nscylla_height = 60;\nbody_diameter = 25;\nhead_size = 8;\n\n// Main body module\nmodule scylla_body() {\n    // Central torso\n    color(\"sienna\")\n    difference() {\n        cylinder(h=scylla_height*0.6, d=body_diameter, $fn=32);\n        // Hollow out for 3D printing\n        translate([0,0,2])\n            cylinder(h=scylla_height*0.6-4, d=body_diameter-4, $fn=32);\n    }\n    \n    // Waist area\n    translate([0,0,scylla_height*0.6])\n    difference() {\n        cylinder(h=scylla_height*0.2, d1=body_diameter, d2=body_diameter*0.6, $fn=32);\n        translate([0,0,2])\n            cylinder(h=scylla_height*0.2-4, d1=body_diameter-4, d2=body_diameter*0.6-4, $fn=32);\n    }\n}\n\n// Dog head module\nmodule dog_head(position, angle) {\n    translate(position)\n    rotate([0,0,angle])\n    union() {\n        // Snout\n        color(\"brown\")\n        translate([0,0,-head_size/2])\n            cylinder(h=head_size*1.5, d1=head_size*0.8, d2=head_size*1.2, $fn=16);\n        \n        // Head\n        color(\"tan\")\n        sphere(d=head_size*1.4, $fn=16);\n        \n        // Ears\n        color(\"brown\")\n        translate([head_size*0.5,0,head_size*0.3])\n            rotate([0,30,0])\n            scale([1,0.5,1.5])\n                sphere(d=head_size*0.6, $fn=8);\n        \n        translate([-head_size*0.5,0,head_size*0.3])\n            rotate([0,-30,0])\n            scale([1,0.5,1.5])\n                sphere(d=head_size*0.6, $fn=8);\n        \n        // Eyes\n        color(\"black\")\n        translate([head_size*0.3,head_size*0.5,head_size*0.2])\n            sphere(d=head_size*0.2, $fn=8);\n        translate([-head_size*0.3,head_size*0.5,head_size*0.2])\n            sphere(d=head_size*0.2, $fn=8);\n    }\n}\n\n// Tentacle module\nmodule tentacle(length, segments) {\n    color(\"darkgreen\")\n    for(i=[0:segments-1]) {\n        translate([0,0,i*length/segments])\n        rotate([i*15,0,0])\n        cylinder(h=length/segments, d1=3-i*0.2, d2=3-(i+1)*0.2, $fn=8);\n    }\n}\n\n// Waist tentacles\nmodule waist_tentacles() {\n    for(i=[0:5]) {\n        angle = i*60;\n        translate([0,0,scylla_height*0.7])\n        rotate([0,0,angle])\n        translate([body_diameter*0.3,0,0])\n        rotate([90,0,0])\n            tentacle(scylla_height*0.4, 5);\n    }\n}\n\n// Dog heads around waist\nmodule dog_heads_ring() {\n    for(i=[0:5]) {\n        angle = i*60;\n        radius = body_diameter*0.5;\n        x = cos(angle)*radius;\n        y = sin(angle)*radius;\n        dog_head([x,y,scylla_height*0.75], angle+90);\n    }\n}\n\n// Human torso emerging from top\nmodule human_torso() {\n    color(\"bisque\")\n    translate([0,0,scylla_height*0.8])\n    difference() {\n        cylinder(h=scylla_height*0.3, d1=body_diameter*0.6, d2=body_diameter*0.4, $fn=32);\n        translate([0,0,2])\n            cylinder(h=scylla_height*0.3-4, d1=body_diameter*0.6-4, d2=body_diameter*0.4-4, $fn=32);\n    }\n    \n    // Head\n    translate([0,0,scylla_height*1.1])\n    color(\"bisque\")\n    sphere(d=body_diameter*0.35, $fn=32);\n}\n\n// Assembly\nunion() {\n    scylla_body();\n    waist_tentacles();\n    dog_heads_ring();\n    human_torso();\n}",
    "renders": true
  },
  {
    "household_item": "selkie",
    "openscad_code": "// Selkie in realistic style - medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main body\nmodule selkie() {\n    union() {\n        // Seal body\n        body();\n        \n        // Seal head\n        head();\n        \n        // Flippers - front\n        flipper([-18, -12, 5], 0);\n        flipper([-18, 12, 5], 180);\n        \n        // Flippers - rear\n        flipper([20, -8, 2], -30);\n        flipper([20, 8, 2], 210);\n        \n        // Tail\n        tail();\n        \n        // Eyes\n        eye([-5, 8, 8], 0);\n        eye([-5, -8, 8], 180);\n        \n        // Nose\n        nose();\n    }\n}\n\n// Main body of the seal\nmodule body() {\n    // Main torso\n    translate([0, 0, 0])\n    scale([2.2, 1.2, 1])\n    sphere(15);\n    \n    // Belly\n    translate([0, 0, -10])\n    scale([2.1, 1.1, 0.6])\n    sphere(14);\n    \n    // Neck transition\n    translate([-15, 0, 5])\n    scale([0.8, 1, 1.2])\n    cylinder(h=10, r1=10, r2=8);\n}\n\n// Seal head\nmodule head() {\n    translate([-25, 0, 10])\n    rotate([0, 10, 0])\n    scale([1.1, 0.9, 0.9])\n    sphere(10);\n    \n    // Snout\n    translate([-35, 0, 8])\n    rotate([0, 15, 0])\n    scale([1.2, 0.6, 0.6])\n    cylinder(h=8, r1=6, r2=4);\n}\n\n// Flipper module with position and rotation\nmodule flipper(pos, rot) {\n    translate(pos)\n    rotate([0, 0, rot])\n    rotate([0, -20, 0])\n    union() {\n        // Upper arm\n        scale([1.5, 0.4, 0.3])\n        sphere(6);\n        \n        // Lower flipper\n        translate([8, 0, 0])\n        rotate([0, 20, 0])\n        scale([2, 0.3, 0.2])\n        sphere(5);\n        \n        // Webbed edge\n        translate([15, 0, 0])\n        rotate([0, 30, 0])\n        scale([1.5, 0.2, 0.1])\n        sphere(3);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([28, 0, -2])\n    rotate([0, -10, 0])\n    union() {\n        // Tail base\n        scale([1, 0.8, 0.5])\n        sphere(8);\n        \n        // Left tail fin\n        translate([5, -8, 0])\n        rotate([0, 0, -30])\n        scale([1.5, 0.3, 0.1])\n        sphere(6);\n        \n        // Right tail fin\n        translate([5, 8, 0])\n        rotate([0, 0, 30])\n        scale([1.5, 0.3, 0.1])\n        sphere(6);\n    }\n}\n\n// Eye\nmodule eye(pos, rot) {\n    translate(pos)\n    rotate([0, 0, rot])\n    difference() {\n        // Eye socket\n        translate([0, 0, 0])\n        scale([1, 1, 0.3])\n        sphere(2);\n        \n        // Pupil\n        translate([0, 0, -0.5])\n        sphere(1);\n    }\n}\n\n// Nose\nmodule nose() {\n    translate([-40, 0, 8])\n    scale([1.5, 1, 0.8])\n    sphere(2);\n    \n    // Nostrils\n    translate([-41, 1.5, 8])\n    sphere(0.5);\n    translate([-41, -1.5, 8])\n    sphere(0.5);\n}\n\n// Create the selkie facing forward\nrotate([0, 0, 90])\nselkie();",
    "renders": true
  },
  {
    "household_item": "shadhavar",
    "openscad_code": "// Shadhavar - mythical unicorn-like creature with hollow horn\n// Overall size ~80 mm long, 50 mm tall\n// Designed for 3D printing with 2 mm wall thickness\n\n// Main parameters\nhorn_length = 35;\nhorn_base_d = 6;\nbody_length = 45;\nbody_height = 25;\nleg_height = 20;\nleg_width = 4;\ntail_length = 18;\near_length = 8;\n\n// Hollow horn with seven tone holes\nmodule horn() {\n    difference() {\n        // Outer horn - tapered cylinder\n        cylinder(h=horn_length, d1=horn_base_d, d2=2, $fn=32);\n        \n        // Hollow core\n        translate([0,0,2])\n        cylinder(h=horn_length-1, d1=horn_base_d-3, d2=1, $fn=32);\n        \n        // Seven tone holes along one side\n        for(i=[1:7]) {\n            rotate([0,90,0])\n            translate([0,horn_length*(i/8)-2,0])\n            cylinder(h=horn_base_d, d=1.5, $fn=16);\n        }\n    }\n}\n\n// Horse-like head with muzzle\nmodule head() {\n    union() {\n        // Main head shape\n        scale([1,0.8,1])\n        sphere(d=18, $fn=32);\n        \n        // Muzzle\n        translate([9,0,-3])\n        rotate([0,-10,0])\n        scale([1.2,0.8,0.6])\n        sphere(d=12, $fn=32);\n        \n        // Two ears\n        for(side=[-1,1]) {\n            translate([2,side*8,8])\n            rotate([0,0,side*30])\n            scale([0.3,0.1,1])\n            cylinder(h=ear_length, d=ear_length, $fn=8);\n        }\n        \n        // Eyes\n        for(side=[-1,1]) {\n            translate([6,side*7,3])\n            sphere(d=2.5, $fn=16);\n        }\n    }\n}\n\n// Horse-like body\nmodule body() {\n    scale([1.3,1,0.8])\n    sphere(d=body_height, $fn=32);\n}\n\n// Four legs\nmodule legs() {\n    for(side=[-1,1]) {\n        for(pos=[-1,1]) {\n            translate([pos*body_length/4, side*body_height/3, -body_height/2-leg_height/2])\n            scale([0.7,1,1])\n            rotate([0,0,side*pos*5])\n            cylinder(h=leg_height, d=leg_width, $fn=8);\n        }\n    }\n}\n\n// Flowing tail\nmodule tail() {\n    translate([-body_length/2-2,0,-body_height/2])\n    rotate([0,0,20])\n    for(i=[0:5]) {\n        rotate([0,0,-i*3])\n        translate([0,0,i*-2])\n        scale([1-i*0.1,1-i*0.1,1])\n        rotate([90,0,0])\n        cylinder(h=tail_length-i, d=tail_length/4-i, $fn=16);\n    }\n}\n\n// Assembly\ntranslate([0,0,leg_height+body_height/2])\nunion() {\n    // Body and legs\n    body();\n    legs();\n    \n    // Head\n    translate([body_length/2+5,0,body_height/4])\n    rotate([0,-10,0])\n    head();\n    \n    // Horn\n    translate([body_length/2+12,0,body_height/2+5])\n    rotate([0,15,0])\n    horn();\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "simurgh",
    "openscad_code": "// Simurgh – medium-complexity realistic style, 3D-printable\n// Wings folded against the body, tail slightly lifted to avoid supports\n$fn = 48;\n\n// overall scale\nscale(0.4) {\n\n    // body\n    module body() {\n        // torso\n        translate([0,0,8])\n            rotate([0,90,0])\n                cylinder(h=22, r1=5, r2=6, center=true);\n        \n        // chest bulge\n        translate([0,-3,6])\n            sphere(r=6);\n\n        // neck\n        translate([0,-12,7])\n            rotate([0,20,0])\n                cylinder(h=10, r1=3.5, r2=2.5);\n        \n        // head\n        translate([0,-22,8])\n            rotate([10,0,0])\n                sphere(r=4.5);\n        \n        // beak\n        difference() {\n            translate([0,-27,7.5])\n                rotate([-30,0,0])\n                    cylinder(h=6, r1=2.5, r2=0.7);\n            // nostril holes\n            translate([0,-26,8.5])\n                rotate([-30,0,0])\n                    cylinder(h=2, r=0.4);\n        }\n    }\n\n    // tail\n    module tail() {\n        for(i=[0:4]) {\n            rotate([0,0,-i*8])\n                translate([-i*1.5, 10+i*2, 5+i*1.2])\n                    rotate([0,0,20])\n                        scale([1,3-i*0.2,0.3])\n                            cube([3,1,0.8], center=true);\n        }\n    }\n\n    // folded wing\n    module wing(side=1) {\n        mirror([side,0,0]) {\n            // upper wing\n            translate([4,0,10])\n                rotate([0,-20,80])\n                    difference() {\n                        scale([1,2.2,0.5])\n                            cube([12,5,1], center=true);\n                        // feather cuts\n                        for(j=[1:4])\n                            translate([0, -8+j*3.5, 0])\n                                cube([12,0.5,2], center=true);\n                    }\n                    \n            // lower wing coverts\n            translate([3,2,8])\n                rotate([0,-20,-20])\n                    scale([0.8,1.5,0.4])\n                        cube([10,4,1], center=true);\n        }\n    }\n\n    // leg\n    module leg(side=1) {\n        mirror([side,0,0]) {\n            translate([3,4,0])\n                cylinder(h=8, r=1.2);\n            // foot\n            translate([3,4,-2])\n                rotate([0,90,0])\n                    cylinder(h=5, r=1);\n            // toes\n            for(k=[-1,0,1])\n                translate([3+k*1,4,-3.2])\n                    cube([0.8,2.5,0.8], center=true);\n        }\n    }\n\n    // chest feathers\n    module chest_feathers() {\n        for(a=[0:3])\n            translate([0,-6-a*2,5-a*0.8])\n                rotate([90,0,0])\n                    cylinder(h=0.4, r1=3-a*0.3, r2=2.5-a*0.3);\n    }\n\n    // crest\n    module crest() {\n        for(b=[0:5])\n            rotate([0,0,b*15-35])\n                translate([0,-24+b,11])\n                    rotate([90,0,0])\n                        cylinder(h=1.5, r1=0.5, r2=0);\n    }\n\n    // eyes\n    module eye(side=1) {\n        mirror([side,0,0]) {\n            translate([1.8,-22,9])\n                sphere(r=0.8);\n            translate([1.9,-22.5,9.2])\n                sphere(r=0.4);\n        }\n    }\n\n    // assembly\n    union() {\n        body();\n        tail();\n        wing(1);\n        wing(-1);\n        leg(1);\n        leg(-1);\n        chest_feathers();\n        crest();\n        eye(1);\n        eye(-1);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "siren",
    "openscad_code": "// OpenSCAD code for a realistic siren (medium complexity)\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nbase_d = 45;\nbase_h = 12;\nbody_d = 40;\nbody_h = 25;\nhorn_d = 38;\nhorn_h = 18;\nmount_w = 30;\nmount_h = 8;\n\nmodule siren_base() {\n    // Main base cylinder\n    cylinder(d = base_d, h = base_h);\n    \n    // Mounting flanges\n    translate([0, -base_d/2, 0])\n        cube([mount_w, mount_h, base_h], center = true);\n    translate([0, base_d/2, 0])\n        cube([mount_w, mount_h, base_h], center = true);\n    \n    // Screw holes\n    for(i = [-1, 1]) {\n        translate([i * 10, -base_d/2, base_h/2])\n            rotate([90, 0, 0])\n                cylinder(d = 3, h = mount_h + 1, center = true);\n        translate([i * 10, base_d/2, base_h/2])\n            rotate([90, 0, 0])\n                cylinder(d = 3, h = mount_h + 1, center = true);\n    }\n}\n\nmodule siren_body() {\n    // Main cylindrical body\n    translate([0, 0, base_h + body_h/2])\n        cylinder(d = body_d, h = body_h);\n    \n    // Top flange\n    translate([0, 0, base_h + body_h])\n        cylinder(d = body_d + 4, h = 2);\n    \n    // Vent slots\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([body_d/2 - 1, 0, base_h + body_h - 10])\n                cube([2, 8, 10], center = true);\n    }\n}\n\nmodule siren_horn() {\n    // Main horn section\n    translate([0, 0, base_h + body_h + 2 + horn_h/2])\n        cylinder(d1 = horn_d, d2 = horn_d - 8, h = horn_h);\n    \n    // Horn rings for reinforcement\n    for(i = [0.2, 0.4, 0.6, 0.8]) {\n        translate([0, 0, base_h + body_h + 2 + horn_h * i])\n            cylinder(d = horn_d - 4, h = 1);\n    }\n    \n    // Top cap\n    translate([0, 0, base_h + body_h + 2 + horn_h])\n        cylinder(d = horn_d - 8, h = 2);\n}\n\nmodule warning_light() {\n    // LED housing\n    translate([0, 0, base_h + body_h + 2 + horn_h + 2])\n        cylinder(d = 12, h = 6);\n    \n    // Light dome\n    translate([0, 0, base_h + body_h + 2 + horn_h + 8])\n        sphere(d = 14);\n}\n\n// Assembly\ndifference() {\n    union() {\n        siren_base();\n        siren_body();\n        siren_horn();\n        warning_light();\n    }\n    \n    // Hollow out base\n    translate([0, 0, wall_thickness])\n        cylinder(d = base_d - 2*wall_thickness, h = base_h);\n    \n    // Hollow out body\n    translate([0, 0, base_h + wall_thickness])\n        cylinder(d = body_d - 2*wall_thickness, h = body_h - wall_thickness);\n    \n    // Hollow out horn\n    translate([0, 0, base_h + body_h + 2 + wall_thickness])\n        cylinder(d1 = horn_d - 2*wall_thickness, d2 = horn_d - 8 - 2*wall_thickness, h = horn_h - wall_thickness);\n    \n    // Wire channel\n    translate([0, 0, 0])\n        cylinder(d = 6, h = base_h + body_h + 2 + horn_h + 10);\n}",
    "renders": true
  },
  {
    "household_item": "skoffin",
    "openscad_code": "// Skoffin (Icelandic mythological cat-fox hybrid) - Realistic style, medium complexity\n// Designed for 3D printing with no overhangs, wall thickness 2mm\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 70;\nbody_height = 35;\nhead_diameter = 25;\n\nmodule body() {\n    // Main torso - elongated ellipsoid shape\n    difference() {\n        scale([1.4, 1, 0.8])\n            sphere(d=body_length);\n        \n        // Hollow out bottom for printing\n        translate([0, 0, -body_height/2])\n            cube([body_length*1.2, body_length*0.8, body_height], center=true);\n    }\n}\n\nmodule head() {\n    translate([body_length/2 - 5, 0, body_height/2 - 5]) {\n        // Fox-like head shape\n        difference() {\n            sphere(d=head_diameter);\n            \n            // Cat-like muzzle\n            translate([0, 0, -head_diameter/4])\n                scale([0.6, 0.8, 0.4])\n                    sphere(d=head_diameter*1.2);\n        }\n        \n        // Ears - fox-like triangles\n        for (side = [-1, 1]) {\n            translate([head_diameter/4, side*head_diameter/3, head_diameter/3]) {\n                rotate([0, side*15, 0])\n                    linear_extrude(height=head_diameter/2, center=false, convexity=10)\n                        polygon(points=[[0,0], [5,0], [2.5,8]]);\n            }\n        }\n        \n        // Eyes\n        for (side = [-1, 1]) {\n            translate([head_diameter/3, side*head_diameter/4, 0])\n                sphere(d=4);\n        }\n    }\n}\n\nmodule legs() {\n    // Four legs with paws\n    for (i = [0:3]) {\n        angle = i*90;\n        x_pos = cos(angle)*body_length/3;\n        y_pos = sin(angle)*body_length/3;\n        \n        translate([x_pos, y_pos, -body_height/2]) {\n            // Upper leg\n            cylinder(h=15, d1=6, d2=5);\n            \n            // Lower leg\n            translate([0, 0, -15])\n                cylinder(h=12, d1=5, d2=4);\n                \n            // Paw\n            translate([0, 0, -27])\n                sphere(d=6);\n        }\n    }\n}\n\nmodule tail() {\n    // Long bushy tail curled around body\n    translate([-body_length/2, 0, 0]) {\n        rotate([0, 90, 0])\n            for (i = [0:20]) {\n                rotate([i*15, 0, 0])\n                    translate([0, 0, i*2])\n                        sphere(d=8 - i*0.2);\n            }\n    }\n}\n\nmodule whiskers() {\n    // Cat-like whiskers\n    for (side = [-1, 1]) {\n        for (angle = [20:20:80]) {\n            translate([body_length/2 - 5, side*head_diameter/3, 0]) {\n                rotate([0, 0, side*angle])\n                    cylinder(h=10, d=0.8);\n            }\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    whiskers();\n}",
    "renders": true
  },
  {
    "household_item": "sluagh",
    "openscad_code": "// Sluagh - Medium complexity realistic style\n// Approx 80mm tall, 3D printable\n\n// Overall scale\nscale_factor = 0.8;\n\n// Head parameters\nhead_radius = 20 * scale_factor;\nskull_thickness = 2.5 * scale_factor;\neye_socket_radius = 6 * scale_factor;\neye_socket_depth = 8 * scale_factor;\nnose_width = 3 * scale_factor;\nnose_height = 5 * scale_factor;\njaw_length = 15 * scale_factor;\n\n// Body parameters\nribcage_width = 35 * scale_factor;\nribcage_height = 45 * scale_factor;\nribcage_depth = 25 * scale_factor;\nspine_diameter = 5 * scale_factor;\nspine_segments = 8;\n\n// Arm parameters\narm_length = 40 * scale_factor;\narm_diameter = 6 * scale_factor;\nhand_radius = 5 * scale_factor;\nfinger_count = 5;\nfinger_length = 12 * scale_factor;\nfinger_diameter = 1.5 * scale_factor;\n\n// Wing parameters\nwing_span = 80 * scale_factor;\nwing_bone_segments = 6;\nwing_membrane_thickness = 1 * scale_factor;\n\n// Leg parameters\nleg_length = 35 * scale_factor;\nleg_diameter = 7 * scale_factor;\nfoot_length = 15 * scale_factor;\nfoot_width = 8 * scale_factor;\n\nmodule skull() {\n    // Main skull sphere\n    difference() {\n        sphere(r = head_radius, $fn = 32);\n        \n        // Eye sockets\n        translate([-head_radius/2, -head_radius/3, head_radius/3])\n            rotate([0, 20, 0])\n            sphere(r = eye_socket_radius, $fn = 16);\n        \n        translate([head_radius/2, -head_radius/3, head_radius/3])\n            rotate([0, -20, 0])\n            sphere(r = eye_socket_radius, $fn = 16);\n        \n        // Nasal cavity\n        translate([0, -head_radius*0.7, head_radius*0.2])\n            cube([nose_width*2, nose_height, nose_width*3], center = true);\n    }\n    \n    // Jaw\n    translate([0, head_radius*0.8, -head_radius*0.3])\n        rotate([0, 0, 180])\n        cylinder(h = jaw_length, r1 = head_radius*0.7, r2 = head_radius*0.4, $fn = 16);\n}\n\nmodule ribcage() {\n    // Main ribcage\n    difference() {\n        cube([ribcage_width, ribcage_depth, ribcage_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n            cube([ribcage_width - 2*skull_thickness, \n                  ribcage_depth - 2*skull_thickness, \n                  ribcage_height - 2*skull_thickness], center = true);\n    }\n    \n    // Ribs\n    for (i = [0:spine_segments-1]) {\n        translate([0, 0, -ribcage_height/2 + i*(ribcage_height/spine_segments)])\n            difference() {\n                cylinder(h = skull_thickness, r = ribcage_width/2 - i, $fn = 32);\n                cylinder(h = skull_thickness + 0.1, r = ribcage_width/2 - i - skull_thickness, $fn = 32);\n            }\n    }\n}\n\nmodule spine() {\n    // Vertebrae\n    for (i = [0:spine_segments-1]) {\n        translate([0, 0, -ribcage_height/2 - i*spine_diameter])\n            cylinder(h = spine_diameter, r = spine_diameter, $fn = 16);\n    }\n}\n\nmodule arm(side = 1) {\n    // Upper arm\n    translate([side * (ribcage_width/2 + arm_diameter/2), 0, ribcage_height/4])\n        rotate([0, 90, 0])\n        cylinder(h = arm_length/2, r = arm_diameter/2, $fn = 16);\n    \n    // Lower arm\n    translate([side * (ribcage_width/2 + arm_diameter/2 + arm_length/2), 0, ribcage_height/4 - arm_length/2])\n        rotate([0, 90, 0])\n        cylinder(h = arm_length/2, r = arm_diameter/2, $fn = 16);\n    \n    // Hand\n    translate([side * (ribcage_width/2 + arm_diameter + arm_length), 0, ribcage_height/4 - arm_length])\n        sphere(r = hand_radius, $fn = 16);\n    \n    // Fingers\n    for (i = [0:finger_count-1]) {\n        translate([\n            side * (ribcage_width/2 + arm_diameter + arm_length + hand_radius/2),\n            (i - finger_count/2) * finger_diameter * 2,\n            ribcage_height/4 - arm_length - hand_radius/2\n        ])\n            rotate([90, 0, 0])\n            cylinder(h = finger_length, r = finger_diameter/2, $fn = 8);\n    }\n}\n\nmodule wing(side = 1) {\n    // Wing base\n    translate([side * (ribcage_width/2), 0, ribcage_height/2])\n        rotate([0, -30 * side, 0])\n        union() {\n            // Main wing bones\n            for (i = [0:wing_bone_segments-1]) {\n                rotate([0, 0, i * 30 / wing_bone_segments])\n                    translate([i * wing_span/wing_bone_segments/2, 0, 0])\n                        cube([wing_span/wing_bone_segments, wing_membrane_thickness, wing_membrane_thickness * 3]);\n            }\n            \n            // Wing membrane\n            for (i = [0:wing_bone_segments-2]) {\n                hull() {\n                    translate([i * wing_span/wing_bone_segments/2, 0, 0])\n                        sphere(r = wing_membrane_thickness, $fn = 8);\n                    translate([(i+1) * wing_span/wing_bone_segments/2, 0, 0])\n                        sphere(r = wing_membrane_thickness, $fn = 8);\n                    translate([(i+0.5) * wing_span/wing_bone_segments/2, wing_span/4, 0])\n                        sphere(r = wing_membrane_thickness, $fn = 8);\n                }\n            }\n        }\n}\n\nmodule leg(side = 1) {\n    // Upper leg\n    translate([side * (ribcage_width/4), 0, -ribcage_height/2 - spine_segments*spine_diameter - leg_length/4])\n        cylinder(h = leg_length/2, r = leg_diameter/2, $fn = 16);\n    \n    // Lower leg\n    translate([side * (ribcage_width/4), 0, -ribcage_height/2 - spine_segments*spine_diameter - leg_length*3/4])\n        cylinder(h = leg_length/2, r = leg_diameter/2, $fn = 16);\n    \n    // Foot\n    translate([side * (ribcage_width/4), foot_width/2, -ribcage_height/2 - spine_segments*spine_diameter - leg_length - foot_length/2])\n        rotate([90, 0, 0])\n        cube([foot_length, foot_width, leg_diameter/2], center = true);\n}\n\n// Assemble the sluagh\nunion() {\n    // Head\n    translate([0, 0, ribcage_height/2 + head_radius*0.8])\n        skull();\n    \n    // Body\n    ribcage();\n    spine();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "household_item": "strix",
    "openscad_code": "// Realistic Medium-Complexity Strix (Owl) – 3D-printable\n// Height ≈ 65 mm, width ≈ 60 mm, depth ≈ 45 mm\n// No overhangs > 45°, wall thickness ≥ 1.2 mm\n\n$fn=24;               // Smooth curves for realism\nwall = 1.2;           // 3-wall thickness at 0.4 mm nozzle\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wings();\n    tail();\n    feet();\n}\n\n// Body – egg-like ellipsoid\nmodule body() {\n    translate([0,0,18])\n    scale([1,1.2,1.1])\n    sphere(15);\n}\n\n// Head – slightly flattened sphere\nmodule head() {\n    translate([0,0,35])\n    scale([1,1,0.85])\n    sphere(12);\n    \n    ears();\n    eyes();\n    beak();\n}\n\n// Ear tufts – simple cones\nmodule ears() {\n    for(side=[-1,1])\n    translate([side*7,0,44])\n    rotate([0,side*20,0])\n    cylinder(h1=6,r1=3,r2=0);\n}\n\n// Eyes – indented spheres\nmodule eyes() {\n    for(side=[-1,1]) {\n        difference() {\n            translate([side*4,7.5,37])\n            sphere(3.5);\n            translate([side*4,9,37])\n            sphere(2);\n        }\n    }\n}\n\n// Beak – cone with slight curve\nmodule beak() {\n    translate([0,11,35])\n    rotate([90,0,0])\n    cylinder(h1=6,r1=2.5,r2=0);\n}\n\n// Wings – layered feathers\nmodule wings() {\n    for(side=[-1,1])\n    mirror([side,0,0])\n    translate([0,0,25])\n    rotate([0,0,side*20])\n    wing();\n}\n\nmodule wing() {\n    for(i=[0:2]) {\n        translate([0,0,-i*4])\n        rotate([0,30-i*10,0])\n        scale([1.2-0.2*i,1-0.1*i,1])\n        cube([20,2,6], center=true);\n    }\n}\n\n// Tail – fan of feathers\nmodule tail() {\n    for(i=[-2:2])\n    translate([i*4,-9,18])\n    rotate([0,90-i*10,0])\n    scale([0.8,1,1])\n    cube([12,2,4], center=true);\n}\n\n// Feet – simple claws for printability\nmodule feet() {\n    union() {\n        foot(3);\n        foot(-3);\n    }\n}\n\nmodule foot(x) {\n    translate([x,-10,0])\n    rotate([0,0,10])\n    union() {\n        // Leg\n        translate([0,0,5])\n        cylinder(h=10,r=2);\n        // Toes – three short cylinders\n        for(a=[-30,0,30])\n        rotate([0,0,a])\n        translate([3,0,0])\n        rotate([90,0,0])\n        cylinder(h=6,r=1.3);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "tarasque",
    "openscad_code": "// Tarasque - Realistic Medium Complexity\n// 3D printable model, ~80mm long\n\n$fn = 32;\n\nmodule shell_base() {\n    // Main turtle-like carapace with realistic segmentation\n    difference() {\n        union() {\n            // Central shell\n            scale([1.2, 0.8, 0.4])\n                sphere(r = 25);\n            \n            // Segmented shell plates\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([0, 15 + i*2, 8 - i*1.5])\n                        scale([0.8 - i*0.05, 0.6 - i*0.05, 0.3])\n                            sphere(r = 12);\n            }\n        }\n        \n        // Hollow for printability\n        scale([1.1, 0.7, 0.3])\n            sphere(r = 22);\n    }\n}\n\nmodule head() {\n    // Lion-like head with realistic features\n    translate([0, -35, 12]) {\n        rotate([-10, 0, 0]) {\n            // Main head shape\n            scale([1, 1.2, 1])\n                sphere(r = 12);\n            \n            // Muzzle\n            translate([0, -12, -3])\n                scale([0.8, 0.7, 0.6])\n                    sphere(r = 8);\n            \n            // Eyes (sunken)\n            for(side = [-1, 1]) {\n                translate([side * 6, -2, 2]) {\n                    rotate([0, 10 * side, 0])\n                        cylinder(h = 3, r1 = 3, r2 = 2);\n                }\n            }\n            \n            // Nostrils\n            for(side = [-1, 1]) {\n                translate([side * 2, -18, -3])\n                    cylinder(h = 2, r = 1.5);\n            }\n            \n            // Jaw\n            translate([0, -20, -8])\n                scale([0.8, 0.6, 0.4])\n                    sphere(r = 8);\n        }\n    }\n}\n\nmodule legs() {\n    // Six bear-like legs with claws\n    for(i = [0:5]) {\n        angle = i * 60;\n        radius = 20;\n        \n        translate([cos(angle) * radius, sin(angle) * radius, 0]) {\n            rotate([0, 0, angle + 30]) {\n                // Upper leg\n                translate([0, 0, 2])\n                    rotate([0, -20, 0])\n                        scale([1, 1, 2])\n                            cylinder(h = 12, r = 4);\n                \n                // Lower leg\n                translate([0, 8, -6])\n                    rotate([0, 30, 0])\n                        cylinder(h = 10, r = 3.5);\n                \n                // Paw\n                translate([0, 15, -10])\n                    scale([1.2, 1, 0.8])\n                        sphere(r = 4);\n                \n                // Claws\n                for(claw = [-1, 0, 1]) {\n                    translate([claw * 1.5, 17, -12])\n                        rotate([-30, 0, 0])\n                            cylinder(h = 3, r1 = 1, r2 = 0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Scaly tail ending in scorpion stinger\n    translate([0, 35, 5]) {\n        // Tail segments\n        for(seg = [0:8]) {\n            translate([0, seg * 3, sin(seg * 15) * 3])\n                rotate([0, 0, seg * 10])\n                    scale([1 - seg * 0.08, 1 - seg * 0.08, 0.8])\n                        cylinder(h = 3, r = 4 - seg * 0.3);\n        }\n        \n        // Stinger\n        translate([0, 27, 5])\n            rotate([30, 0, 0])\n                cylinder(h = 8, r1 = 2, r2 = 0);\n    }\n}\n\nmodule spikes() {\n    // Protective spikes along shell\n    for(i = [0:5]) {\n        angle = i * 60;\n        radius = 22;\n        \n        translate([cos(angle) * radius, sin(angle) * radius, 15]) {\n            rotate([0, 0, angle])\n                cylinder(h = 8, r1 = 2.5, r2 = 1);\n        }\n    }\n}\n\n// Assemble the tarasque\nunion() {\n    shell_base();\n    head();\n    legs();\n    tail();\n    spikes();\n}",
    "renders": true
  },
  {
    "household_item": "tengu",
    "openscad_code": "// Tengu mask with realistic features - medium complexity\n// Based on traditional Japanese tengu with long nose, red face, and crow features\n\n// Overall dimensions: ~75mm tall x 60mm wide x 50mm deep\n\n// Main module\nmodule tengu_mask() {\n    // Base head shape\n    union() {\n        // Main face - slightly elongated oval\n        scale([1.2, 1.3, 0.8]) sphere(d=50, $fn=32);\n        \n        // Chin extension\n        translate([0, 20, -15]) \n        scale([0.8, 0.6, 0.7]) sphere(d=25, $fn=20);\n        \n        // Forehead ridge\n        translate([0, -15, 5]) \n        scale([1.1, 0.3, 0.5]) sphere(d=30, $fn=20);\n    }\n    \n    // Long nose (tengu's most prominent feature)\n    translate([0, 0, 0]) \n    rotate([0, 90, 0]) {\n        // Nose base\n        cylinder(h=25, d1=12, d2=15);\n        \n        // Nose tip\n        translate([25, 0, 0]) \n        sphere(d=10, $fn=16);\n        \n        // Nose ridge\n        for(i=[0:3]) {\n            translate([i*6, 0, 0]) \n            rotate([0, 0, 45]) \n            scale([0.3, 0.3, 1]) \n            sphere(d=8, $fn=8);\n        }\n    }\n    \n    // Eye sockets (deep set)\n    difference() {\n        // Left eye socket\n        translate([-15, 5, 0]) \n        rotate([0, 30, 0]) \n        scale([1.2, 0.8, 1]) \n        sphere(d=12, $fn=16);\n        \n        // Right eye socket\n        translate([15, 5, 0]) \n        rotate([0, -30, 0]) \n        scale([1.2, 0.8, 1]) \n        sphere(d=12, $fn=16);\n    }\n    \n    // Actual eye holes (for printing)\n    difference() {\n        children();\n        translate([-15, 5, -2]) \n        cylinder(h=10, d=6, $fn=12);\n        translate([15, 5, -2]) \n        cylinder(h=10, d=6, $fn=12);\n    }\n    \n    // Eyebrows (thick and angled upward)\n    module eyebrow(side) {\n        translate([side*12, -5, 8]) \n        rotate([0, 0, side*20]) {\n            // Main brow\n            scale([0.3, 2, 0.4]) \n            sphere(d=10, $fn=8);\n            \n            // Brow ridge\n            for(i=[0:1]) {\n                translate([0, i*3-1.5, 0]) \n                scale([0.25, 1.8, 0.3]) \n                sphere(d=8, $fn=8);\n            }\n        }\n    }\n    \n    eyebrow(-1);\n    eyebrow(1);\n    \n    // Cheek bones\n    for(side=[-1, 1]) {\n        translate([side*20, 12, -2]) \n        rotate([0, 0, side*-15]) \n        scale([0.6, 0.8, 0.4]) \n        sphere(d=15, $fn=16);\n    }\n    \n    // Mouth opening\n    difference() {\n        children();\n        translate([0, 18, -15]) \n        rotate([15, 0, 0]) \n        scale([1.2, 0.5, 1]) \n        cylinder(h=5, d=8, $fn=16);\n    }\n    \n    // Lips\n    translate([0, 18, -13]) {\n        // Upper lip\n        rotate([15, 0, 0]) \n        scale([1.1, 0.3, 0.3]) \n        sphere(d=8, $fn=16);\n        \n        // Lower lip\n        rotate([15, 0, 0]) \n        translate([0, -2, -2]) \n        scale([1.0, 0.25, 0.3]) \n        sphere(d=8, $fn=16);\n    }\n    \n    // Crow-like hair/feathers on top\n    for(i=[0:5]) {\n        rotate([0, 0, i*30-75]) {\n            translate([0, -25, 8]) \n            rotate([10, 0, 0]) \n            scale([0.3, 1.2, 0.1]) \n            sphere(d=12, $fn=8);\n            \n            translate([0, -28, 7]) \n            rotate([20, 0, 0]) \n            scale([0.25, 1.0, 0.1]) \n            sphere(d=10, $fn=8);\n        }\n    }\n    \n    // Ears (more crow-like)\n    for(side=[-1, 1]) {\n        translate([side*22, 0, 0]) \n        rotate([0, 0, side*30]) {\n            // Main ear\n            scale([0.3, 1.5, 2]) \n            sphere(d=10, $fn=8);\n            \n            // Inner ear detail\n            translate([0, 0, -2]) \n            scale([0.2, 1.2, 1.5]) \n            sphere(d=8, $fn=8);\n        }\n    }\n}\n\n// Generate the mask\ntengu_mask();",
    "renders": true
  },
  {
    "household_item": "thunderbird",
    "openscad_code": "// Thunderbird 3D model - realistic medium complexity\n// Wingspan ~80mm, designed for 3D printing\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule wing_section(length, width, thickness) {\n    // Tapered wing segment\n    hull() {\n        translate([0, 0, thickness/2]) cube([length*0.3, width, thickness], center=true);\n        translate([length*0.7, 0, thickness/2]) scale([0.5, 0.7, 1]) cube([length*0.3, width, thickness], center=true);\n    }\n}\n\nmodule feather_detail(base_x, base_y, angle) {\n    // Individual feather detail\n    translate([base_x, base_y, 0]) rotate([0, 0, angle]) {\n        difference() {\n            cylinder(h=wall_thickness*2, r1=3, r2=1);\n            translate([0, 0, -0.1]) cylinder(h=wall_thickness*2.2, r1=2.5, r2=0.5);\n        }\n    }\n}\n\nmodule wing(is_left=true) {\n    side = is_left ? 1 : -1;\n    \n    union() {\n        // Main wing structure\n        translate([10*side, 0, 10]) rotate([0, 0, 30*side]) {\n            wing_section(35, 15, wall_thickness*2);\n        }\n        \n        // Wing tip\n        translate([35*side, 15, 10]) rotate([0, 0, 45*side]) {\n            wing_section(20, 10, wall_thickness*1.5);\n        }\n        \n        // Wing root\n        translate([5*side, 0, 5]) rotate([0, 0, 15*side]) {\n            wing_section(15, 20, wall_thickness*3);\n        }\n        \n        // Feather details\n        for(i=[0:4]) {\n            feather_detail((15 + i*6)*side, (5 + i*2), -20*side);\n            feather_detail((15 + i*6)*side, (-5 - i*2), 20*side);\n        }\n    }\n}\n\nmodule tail() {\n    union() {\n        // Central tail\n        translate([0, 0, 0]) rotate([20, 0, 0]) {\n            cylinder(h=25, r1=8, r2=4);\n        }\n        \n        // Tail feathers\n        for(i=[-2:2]) {\n            translate([i*5, 0, 5]) rotate([20, i*10, 0]) {\n                cylinder(h=20, r1=3, r2=1);\n            }\n        }\n    }\n}\n\nmodule body() {\n    union() {\n        // Main torso\n        translate([0, 0, 15]) sphere(d=20);\n        \n        // Neck\n        translate([0, 0, 25]) rotate([20, 0, 0]) {\n            cylinder(h=15, r1=5, r2=3);\n        }\n        \n        // Head\n        translate([0, 0, 40]) sphere(d=12);\n        \n        // Beak\n        translate([0, 0, 48]) rotate([20, 0, 0]) {\n            cylinder(h=10, r1=3, r2=0.5);\n        }\n        \n        // Eye sockets\n        translate([3, 4, 42]) sphere(d=2);\n        translate([-3, 4, 42]) sphere(d=2);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([5, 0, 5]) {\n        cylinder(h=10, r=2);\n        translate([0, 0, -2]) sphere(d=4);\n        // Toes\n        for(i=[-1:1]) {\n            rotate([0, 0, i*30]) {\n                translate([0, 3, -2]) rotate([90, 0, 0]) cylinder(h=5, r=1);\n            }\n        }\n    }\n    \n    // Right leg (mirrored)\n    translate([-5, 0, 5]) {\n        cylinder(h=10, r=2);\n        translate([0, 0, -2]) sphere(d=4);\n        for(i=[-1:1]) {\n            rotate([0, 0, -i*30]) {\n                translate([0, 3, -2]) rotate([90, 0, 0]) cylinder(h=5, r=1);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    wing(true);\n    wing(false);\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "tiamat",
    "openscad_code": "// Tiamat - Babylonian Chaos Dragon\n// Medium complexity realistic style\n// All dimensions in mm, designed for 3D printing\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body module\nmodule tiamat_body() {\n    // Central torso segment\n    translate([0, 0, 20]) {\n        scale([scale_factor, scale_factor, scale_factor]) {\n            // Main body core\n            difference() {\n                sphere(d=30);\n                translate([0, 0, -15]) cube([35, 35, 30], center=true);\n            }\n            \n            // Body plating segments\n            for(i = [0:45:315]) {\n                rotate([0, 0, i]) {\n                    translate([12, 0, 5]) {\n                        scale([1.2, 0.8, 0.3]) sphere(d=8);\n                    }\n                }\n            }\n            \n            // Underside scales\n            for(i = [0:30:330]) {\n                rotate([0, 0, i]) {\n                    translate([10, 0, -8]) {\n                        scale([1, 0.6, 0.2]) sphere(d=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Dragon head module\nmodule dragon_head(x_pos, y_pos, z_pos, rot_z, rot_y) {\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([0, rot_y, rot_z]) {\n            scale([scale_factor, scale_factor, scale_factor]) {\n                // Head base\n                sphere(d=12);\n                \n                // Snout\n                translate([5, 0, 0]) {\n                    scale([1.5, 0.8, 0.8]) sphere(d=8);\n                }\n                \n                // Horns\n                translate([2, 4, 3]) {\n                    rotate([0, -20, 45]) cylinder(h=8, d1=4, d2=2);\n                }\n                translate([2, -4, 3]) {\n                    rotate([0, 20, -45]) cylinder(h=8, d1=4, d2=2);\n                }\n                \n                // Eyes\n                translate([3, 2.5, 1.5]) sphere(d=2);\n                translate([3, -2.5, 1.5]) sphere(d=2);\n                \n                // Nostrils\n                translate([7, 1, 0]) sphere(d=1.5);\n                translate([7, -1, 0]) sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Wing module\nmodule wing(x_pos, y_pos, z_pos, side) {\n    translate([x_pos, y_pos, z_pos]) {\n        mirror([0, side, 0]) {\n            scale([scale_factor, scale_factor * side, scale_factor]) {\n                // Wing membrane structure\n                difference() {\n                    // Main wing shape\n                    hull() {\n                        translate([0, 0, 0]) sphere(d=3);\n                        translate([15, 0, 5]) sphere(d=2);\n                        translate([25, 0, 0]) sphere(d=1);\n                        translate([15, 0, -5]) sphere(d=2);\n                    }\n                    \n                    // Wing holes for printing\n                    translate([10, 0, 2]) sphere(d=2);\n                    translate([20, 0, 0]) sphere(d=1.5);\n                }\n                \n                // Wing bones\n                translate([0, 0, 0]) {\n                    rotate([0, 0, 10]) cylinder(h=25, d1=2, d2=1);\n                }\n                translate([0, 0, 0]) {\n                    rotate([0, 0, -10]) cylinder(h=25, d1=2, d2=1);\n                }\n            }\n        }\n    }\n}\n\n// Tail segment module\nmodule tail_segment(pos, scale_seg) {\n    translate([pos, 0, 20 - pos/3]) {\n        rotate([0, 0, -pos/2]) {\n            scale([scale_seg, scale_seg, scale_seg]) {\n                sphere(d=20 - pos/2);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 15]) {\n        rotate([0, 0, angle]) {\n            scale([scale_factor, scale_factor, scale_factor]) {\n                // Upper leg\n                rotate([0, 20, 0]) cylinder(h=12, d1=6, d2=4);\n                \n                // Lower leg\n                translate([0, 0, -12]) {\n                    rotate([0, -40, 0]) cylinder(h=10, d1=4, d2=3);\n                }\n                \n                // Foot\n                translate([0, 0, -22]) {\n                    rotate([0, -90, 0]) scale([1.5, 1, 0.5]) sphere(d=5);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    tiamat_body();\n    \n    // Five dragon heads\n    dragon_head(15, 10, 25, 30, -10);\n    dragon_head(15, -10, 25, -30, -10);\n    dragon_head(12, 0, 30, 0, -15);\n    dragon_head(10, 5, 27, 15, -5);\n    dragon_head(10, -5, 27, -15, -5);\n    \n    // Wings\n    wing(-5, 10, 35, 1);\n    wing(-5, -10, 35, -1);\n    \n    // Tail segments\n    for(i = [1:5]) {\n        tail_segment(-i * 8, (6-i)/6);\n    }\n    \n    // Legs\n    leg(5, 8, 45);\n    leg(5, -8, -45);\n    leg(-2, 6, 30);\n    leg(-2, -6, -30);\n}",
    "renders": true
  },
  {
    "household_item": "troll",
    "openscad_code": "// Realistic Troll - Medium Complexity\n// 3D printable, ~70mm tall\n\n$fn = 32;\n\nmodule troll_body() {\n    difference() {\n        // Main torso\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1.5])\n            sphere(15);\n        \n        // Hollow for printing\n        translate([0, 0, 20])\n            scale([1.1, 0.7, 1.4])\n            sphere(14);\n    }\n}\n\nmodule troll_head() {\n    union() {\n        // Main head\n        difference() {\n            translate([0, 0, 50])\n                scale([0.8, 0.9, 1.2])\n                sphere(12);\n            \n            // Eye sockets\n            translate([-4, 8, 52])\n                sphere(3);\n            translate([4, 8, 52])\n                sphere(3);\n            \n            // Mouth cavity\n            translate([0, 12, 45])\n                scale([1, 0.7, 0.5])\n                sphere(5);\n        }\n        \n        // Eyes\n        translate([-4, 10, 52])\n            sphere(2);\n        translate([4, 10, 52])\n            sphere(2);\n        \n        // Nose\n        translate([0, 8, 48])\n            cylinder(h=4, r1=2, r2=1.5);\n        \n        // Ears\n        translate([-10, 0, 50])\n            rotate([0, 0, -20])\n            scale([0.5, 1, 0.3])\n            cylinder(h=8, r=3);\n        translate([10, 0, 50])\n            rotate([0, 0, 20])\n            scale([0.5, 1, 0.3])\n            cylinder(h=8, r=3);\n    }\n}\n\nmodule troll_arms() {\n    // Left arm\n    translate([-18, 0, 35])\n        rotate([0, 0, 30])\n        cylinder(h=15, r=3);\n    translate([-30, 5, 35])\n        sphere(4);\n    \n    // Right arm\n    translate([18, 0, 35])\n        rotate([0, 0, -30])\n        cylinder(h=15, r=3);\n    translate([30, 5, 35])\n        sphere(4);\n}\n\nmodule troll_legs() {\n    // Left leg\n    translate([-6, 0, 10])\n        cylinder(h=15, r=4);\n    translate([-6, 0, 0])\n        sphere(5);\n    \n    // Right leg\n    translate([6, 0, 10])\n        cylinder(h=15, r=4);\n    translate([6, 0, 0])\n        sphere(5);\n}\n\nmodule troll_hair() {\n    // Hair spikes\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n        translate([0, -5, 60])\n            rotate([20, 0, 0])\n            cylinder(h=8, r1=1.5, r2=0.5);\n    }\n}\n\nmodule troll_club() {\n    // Club handle\n    translate([35, 15, 25])\n        rotate([0, 0, -45])\n        cylinder(h=20, r=2);\n    \n    // Club head\n    translate([45, 25, 35])\n        scale([1.5, 1, 1])\n        sphere(6);\n}\n\n// Assemble troll\nunion() {\n    troll_body();\n    troll_head();\n    troll_arms();\n    troll_legs();\n    troll_hair();\n    troll_club();\n}",
    "renders": true
  },
  {
    "household_item": "typhon",
    "openscad_code": "// Typhon - Greek mythological monstrous serpentine giant\n// Scaled for 3D printing ~80 mm tall\n// Medium complexity, realistic style\n\n$fn = 48;  // Smooth curves for realism\n\n// Overall dimensions\ntotal_height = 80;\nbase_width   = 40;\n\n// Main torso module\nmodule torso() {\n    difference() {\n        // Central muscular body\n        union() {\n            // Upper torso\n            translate([0, 0, total_height * 0.5])\n                scale([1, 0.8, 1.2])\n                sphere(d = base_width);\n\n            // Lower abdomen taper\n            cylinder(h = total_height * 0.4, d1 = base_width * 0.9, d2 = base_width * 0.6);\n        }\n\n        // Waist indentation\n        translate([0, 0, total_height * 0.35])\n            rotate([90, 0, 0])\n            cylinder(h = base_width * 1.2, d1 = base_width * 0.7, d2 = base_width * 0.7, center = true);\n    }\n}\n\n// Serpentine coils module\nmodule coils(count = 6) {\n    for(i = [0:count-1]) {\n        rotate([0, 0, i * 60])\n        translate([base_width * 0.6, 0, total_height * 0.15 + i * 5])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.4])\n        difference() {\n            cylinder(h = base_width * 0.8, d = base_width * 0.25);\n            translate([base_width * 0.2, 0, -1])\n                cube([base_width * 0.4, base_width * 0.3, base_width * 0.8 + 2], center = true);\n        }\n    }\n}\n\n// Dragon head module\nmodule dragon_head() {\n    translate([0, 0, total_height * 0.75])\n    rotate([0, 0, 0])\n    union() {\n        // Snout\n        translate([0, 0, base_width * 0.15])\n            scale([1, 0.6, 0.8])\n            sphere(d = base_width * 0.4);\n\n        // Main head\n        sphere(d = base_width * 0.5);\n\n        // Horns\n        for(side = [-1, 1]) {\n            translate([side * base_width * 0.15, 0, base_width * 0.2])\n                rotate([0, side * 30, 0])\n                cylinder(h = base_width * 0.3, d1 = base_width * 0.08, d2 = base_width * 0.04);\n        }\n\n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * base_width * 0.15, base_width * 0.2, base_width * 0.05])\n                sphere(d = base_width * 0.08);\n        }\n    }\n}\n\n// Wings module\nmodule wings() {\n    for(side = [-1, 1]) {\n        translate([0, 0, total_height * 0.65])\n        rotate([0, 0, side * 45])\n        translate([base_width * 0.3, 0, 0])\n        scale([1.2, 0.2, 0.8])\n        difference() {\n            // Main wing membrane\n            union() {\n                translate([base_width * 0.2, 0, 0])\n                    cube([base_width * 0.6, base_width * 0.05, base_width * 0.4]);\n                translate([base_width * 0.5, 0, base_width * 0.1])\n                    rotate([0, 30, 0])\n                    cube([base_width * 0.3, base_width * 0.05, base_width * 0.3]);\n            }\n\n            // Wing holes for printing support\n            translate([base_width * 0.3, 0, base_width * 0.15])\n                cube([base_width * 0.2, base_width * 0.1, base_width * 0.15], center = true);\n            translate([base_width * 0.55, 0, base_width * 0.2])\n                cube([base_width * 0.1, base_width * 0.1, base_width * 0.1], center = true);\n        }\n    }\n}\n\n// Snake tail module\nmodule tail() {\n    translate([0, 0, total_height * 0.1])\n    rotate([0, 0, 180])\n    for(i = [0:7]) {\n        translate([0, 0, -i * (base_width * 0.15)])\n        scale([1 - i * 0.08, 1 - i * 0.08, 1])\n        rotate([0, 0, i * 20])\n        cylinder(h = base_width * 0.15, d = base_width * 0.3 * (1 - i * 0.1));\n    }\n}\n\n// Arms module\nmodule arms() {\n    for(side = [-1, 1]) {\n        translate([side * base_width * 0.3, 0, total_height * 0.55])\n        rotate([0, 0, side * 45])\n        union() {\n            // Upper arm\n            cylinder(h = base_width * 0.4, d = base_width * 0.15);\n\n            // Lower arm\n            translate([base_width * 0.35, 0, 0])\n                rotate([0, 0, -30])\n                cylinder(h = base_width * 0.3, d = base_width * 0.12);\n\n            // Claw\n            translate([base_width * 0.6, 0, -base_width * 0.05])\n                scale([0.3, 0.1, 0.5])\n                sphere(d = base_width * 0.15);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    torso();\n    coils();\n    dragon_head();\n    wings();\n    tail();\n    arms();\n}\n\n// Base platform for stable printing\ntranslate([0, 0, -2])\n    cylinder(h = 2, d = base_width * 1.2);",
    "renders": true
  },
  {
    "household_item": "unicat",
    "openscad_code": "// Unicat - Realistic style, medium complexity\n// Body dimensions\nbody_length = 40;\nbody_height = 20;\nbody_width = 25;\n\n// Head dimensions\nhead_length = 15;\nhead_height = 12;\nhead_width = 12;\n\n// Leg dimensions\nleg_height = 15;\nleg_width = 5;\n\n// Horn dimensions\nhorn_height = 12;\nhorn_base = 3;\n\n// Tail dimensions\ntail_length = 25;\ntail_width = 8;\n\n// Ear dimensions\near_height = 8;\near_width = 6;\n\n// Eye dimensions\neye_radius = 1.5;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body\nmodule body() {\n    // Main torso\n    translate([0, 0, leg_height]) {\n        // Central body\n        difference() {\n            hull() {\n                cube([body_length, body_width, body_height], center=true);\n                translate([body_length/3, 0, body_height/3]) \n                    sphere(d=body_width*1.1);\n                translate([-body_length/3, 0, body_height/4]) \n                    sphere(d=body_width*0.9);\n            }\n            // Hollow out interior\n            scale([0.7, 0.7, 0.7]) \n                cube([body_length, body_width, body_height], center=true);\n        }\n    }\n}\n\n// Head\nmodule head() {\n    translate([body_length/2 + head_length/2 - 5, 0, body_height/2 + leg_height]) {\n        rotate([0, 0, 10]) {\n            difference() {\n                hull() {\n                    // Main head shape\n                    cube([head_length, head_width, head_height], center=true);\n                    translate([head_length/2, 0, 0]) \n                        sphere(d=head_width*0.9);\n                    translate([-head_length/2, 0, -head_height/4]) \n                        sphere(d=head_width*0.8);\n                }\n                // Hollow interior\n                scale([0.6, 0.6, 0.6]) \n                    cube([head_length, head_width, head_height], center=true);\n                \n                // Eye sockets\n                translate([head_length/2 - 3, head_width/3, head_height/4]) \n                    sphere(r=eye_radius+0.5);\n                translate([head_length/2 - 3, -head_width/3, head_height/4]) \n                    sphere(r=eye_radius+0.5);\n            }\n            \n            // Eyes\n            color(\"black\") {\n                translate([head_length/2 - 3.5, head_width/3, head_height/4]) \n                    sphere(r=eye_radius);\n                translate([head_length/2 - 3.5, -head_width/3, head_height/4]) \n                    sphere(r=eye_radius);\n            }\n            \n            // Nose\n            color(\"pink\") {\n                translate([head_length/2 - 1, 0, -head_height/3]) \n                    scale([1, 0.8, 0.6]) sphere(r=1.5);\n            }\n            \n            // Mouth\n            color(\"pink\") {\n                translate([head_length/2 - 1, 0, -head_height/2]) \n                    rotate([90, 0, 0]) cylinder(h=0.5, r1=1, r2=0.5);\n            }\n        }\n    }\n}\n\n// Ears\nmodule ears() {\n    // Right ear\n    translate([body_length/2, head_width/2, body_height/2 + leg_height + head_height/2]) {\n        rotate([0, 0, -30]) {\n            difference() {\n                // Outer ear\n                rotate([30, 0, 0]) \n                    cylinder(h=ear_height, r1=ear_width/2, r2=ear_width/4);\n                // Inner ear\n                translate([0, 0, wall_thickness]) \n                    scale([0.7, 0.7, 0.9]) \n                    rotate([30, 0, 0]) \n                    cylinder(h=ear_height, r1=ear_width/2-1, r2=ear_width/4-0.5);\n            }\n        }\n    }\n    \n    // Left ear\n    translate([body_length/2, -head_width/2, body_height/2 + leg_height + head_height/2]) {\n        rotate([0, 0, 30]) {\n            difference() {\n                // Outer ear\n                rotate([30, 0, 0]) \n                    cylinder(h=ear_height, r1=ear_width/2, r2=ear_width/4);\n                // Inner ear\n                translate([0, 0, wall_thickness]) \n                    scale([0.7, 0.7, 0.9]) \n                    rotate([30, 0, 0]) \n                    cylinder(h=ear_height, r1=ear_width/2-1, r2=ear_width/4-0.5);\n            }\n        }\n    }\n}\n\n// Horn\nmodule horn() {\n    translate([body_length/2 + head_length/2 - 5, 0, body_height/2 + leg_height + head_height/2 + 3]) {\n        rotate([0, 0, 10]) {\n            // Spiral horn\n            for(i=[0:5:360]) {\n                rotate([0, 0, i]) \n                    translate([sin(i*3)*0.5, cos(i*3)*0.5, i/30]) \n                    scale([1 - i/360, 1 - i/360, 1]) \n                    cylinder(h=1, r1=horn_base/2*(1-i/360), r2=horn_base/2*(1-i/360));\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    // Front right leg\n    translate([body_length/3, body_width/3 - leg_width/2, leg_height/2]) {\n        difference() {\n            cylinder(h=leg_height, r=leg_width/2);\n            cylinder(h=leg_height, r=leg_width/2 - wall_thickness);\n        }\n    }\n    \n    // Front left leg\n    translate([body_length/3, -body_width/3 + leg_width/2, leg_height/2]) {\n        difference() {\n            cylinder(h=leg_height, r=leg_width/2);\n            cylinder(h=leg_height, r=leg_width/2 - wall_thickness);\n        }\n    }\n    \n    // Back right leg\n    translate([-body_length/3, body_width/3 - leg_width/2, leg_height/2]) {\n        difference() {\n            cylinder(h=leg_height, r=leg_width/2);\n            cylinder(h=leg_height, r=leg_width/2 - wall_thickness);\n        }\n    }\n    \n    // Back left leg\n    translate([-body_length/3, -body_width/3 + leg_width/2, leg_height/2]) {\n        difference() {\n            cylinder(h=leg_height, r=leg_width/2);\n            cylinder(h=leg_height, r=leg_width/2 - wall_thickness);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([-body_length/2, 0, body_height/2 + leg_height - 5]) {\n        rotate([0, 0, -30]) {\n            difference() {\n                // Curved tail\n                hull() {\n                    cylinder(h=tail_length*0.3, r=tail_width/2);\n                    translate([0, tail_length*0.5, tail_length*0.3]) \n                        rotate([0, -30, 0]) \n                        cylinder(h=tail_length*0.5, r=tail_width/2);\n                    translate([0, tail_length*0.8, tail_length*0.5]) \n                        rotate([0, -45, 0]) \n                        cylinder(h=tail_length*0.2, r=tail_width/3);\n                }\n                // Hollow interior\n                scale([0.6, 0.6, 0.6]) {\n                    hull() {\n                        cylinder(h=tail_length*0.3, r=tail_width/2);\n                        translate([0, tail_length*0.5, tail_length*0.3]) \n                            rotate([0, -30, 0]) \n                            cylinder(h=tail_length*0.5, r=tail_width/2);\n                        translate([0, tail_length*0.8, tail_length*0.5]) \n                            rotate([0, -45, 0]) \n                            cylinder(h=tail_length*0.2, r=tail_width/3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    // Right whiskers\n    for(i=[1:3]) {\n        translate([body_length/2 + head_length/2 - 3, head_width/2, body_height/2 + leg_height - head_height/4]) {\n            rotate([0, -20*i, 30 - 10*i]) {\n                cylinder(h=8, r=0.3);\n            }\n        }\n    }\n    \n    // Left whiskers\n    for(i=[1:3]) {\n        translate([body_length/2 + head_length/2 - 3, -head_width/2, body_height/2 + leg_height - head_height/4]) {\n            rotate([0, 20*i, -30 + 10*i]) {\n                cylinder(h=8, r=0.3);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    horn();\n    legs();\n    tail();\n    whiskers();\n}",
    "renders": true
  },
  {
    "household_item": "valravn",
    "openscad_code": "// Valravn - realistic style, medium complexity\n// 3D printable raven with recognizable mythological features\n\n// Overall dimensions: 80mm wingspan, 60mm length\n\n$fn = 32;\n\n// Main body module\nmodule body() {\n    union() {\n        // Torso - elongated oval\n        scale([1.2, 0.8, 1])\n            sphere(d = 25);\n        \n        // Chest protrusion\n        translate([0, 0, -3])\n            scale([0.8, 0.6, 0.5])\n                sphere(d = 20);\n        \n        // Tail section\n        translate([-15, 0, 0])\n            scale([1.5, 0.6, 0.3])\n                rotate([0, 20, 0])\n                    cylinder(h = 15, d1 = 10, d2 = 5);\n    }\n}\n\n// Head with beak and eyes\nmodule head() {\n    translate([17, 0, 8])\n        union() {\n            // Main head sphere\n            sphere(d = 18);\n            \n            // Beak\n            translate([8, 0, -3])\n                rotate([0, -20, 0])\n                    scale([1.5, 0.4, 0.4])\n                        cylinder(h = 12, d1 = 8, d2 = 3);\n            \n            // Eyes\n            for(x = [1, -1]) {\n                translate([3, x*4, 4])\n                    sphere(d = 3);\n                translate([4, x*4, 4])\n                    sphere(d = 1.5);\n            }\n            \n            // Ear tufts (mythological feature)\n            for(x = [1, -1]) {\n                translate([0, x*7, 8])\n                    rotate([0, x*15, 0])\n                        cylinder(h = 8, d1 = 3, d2 = 1);\n            }\n        }\n}\n\n// Wing module with feathers\nmodule wing(side = 1) {\n    translate([0, side*15, 5])\n        rotate([0, 0, side*10])\n            union() {\n                // Main wing structure\n                rotate([20, 0, 0])\n                    scale([1.2, 0.2, 0.8])\n                        cylinder(h = 30, d1 = 15, d2 = 5);\n                \n                // Primary feathers\n                for(i = [0:4]) {\n                    translate([-5 - i*5, side*12, -2 - i*1])\n                        rotate([0, 0, side*(-20 + i*5)])\n                            scale([0.3, 1, 0.1])\n                                cylinder(h = 8 - i, d = 3);\n                }\n                \n                // Secondary feathers\n                for(i = [0:3]) {\n                    translate([8 - i*4, side*8, 0])\n                        rotate([0, 0, side*(10 - i*3)])\n                            scale([0.4, 0.8, 0.1])\n                                cylinder(h = 6, d = 4);\n                }\n            }\n}\n\n// Legs and claws\nmodule legs() {\n    for(side = [1, -1]) {\n        translate([5, side*5, -12])\n            union() {\n                // Upper leg\n                cylinder(h = 8, d = 3);\n                \n                // Lower leg\n                translate([0, 0, -8])\n                    rotate([side*10, 0, 0])\n                        cylinder(h = 10, d = 2.5);\n                \n                // Foot with toes\n                translate([0, side*2, -18])\n                    union() {\n                        // Main foot\n                        scale([2, 0.5, 0.5])\n                            sphere(d = 6);\n                        \n                        // Toes\n                        for(t = [-1, 0, 1]) {\n                            translate([t*2, side*3, 0])\n                                rotate([0, 0, t*20])\n                                    cylinder(h = 6, d1 = 2, d2 = 1);\n                        }\n                    }\n            }\n    }\n}\n\n// Assemble the valravn\nunion() {\n    body();\n    head();\n    wing(1);\n    wing(-1);\n    legs();\n}\n\n// Base for stability during printing\ntranslate([0, 0, -25])\n    cube([30, 15, 2], center = true);",
    "renders": true
  },
  {
    "household_item": "vampire",
    "openscad_code": "// Realistic 3D printable vampire - medium complexity\n// Total height: 80 mm\n\n$fn = 32;  // Smooth curves for better printing\n\n// Main body\nmodule body() {\n    // Torso\n    difference() {\n        hull() {\n            translate([0, 0, 30]) cube([18, 12, 25], center=true);\n            translate([0, 0, 50]) cube([14, 10, 20], center=true);\n        }\n        \n        // Neck hole\n        translate([0, 0, 50]) cylinder(h=10, d=8, center=true);\n    }\n}\n\n// Head with vampire features\nmodule head() {\n    union() {\n        // Skull base\n        translate([0, 0, 60]) sphere(d=16);\n        \n        // Jaw\n        translate([0, 6, 56]) cube([10, 12, 8], center=true);\n        \n        // Nose\n        translate([0, 8, 62]) cube([4, 2, 3], center=true);\n        \n        // Eyes\n        for(x=[-4, 4]) {\n            translate([x, 6, 64]) rotate([0, 90, 0]) \n                cylinder(h=3, d=4, center=true);\n        }\n        \n        // Fangs\n        translate([-2, 9, 54]) rotate([0, 0, -15]) \n            cylinder(h=5, d1=2, d2=0.5);\n        translate([2, 9, 54]) rotate([0, 0, 15]) \n            cylinder(h=5, d1=2, d2=0.5);\n    }\n}\n\n// Cape with collar\nmodule cape() {\n    union() {\n        // Main cape\n        difference() {\n            translate([0, -8, 40]) \n                cylinder(h=35, d1=40, d2=30, center=true);\n            \n            // Neck cutout\n            translate([0, -4, 50]) cylinder(h=20, d=10, center=true);\n        }\n        \n        // Collar points\n        for(angle=[-30, 30]) {\n            rotate([0, 0, angle]) \n                translate([0, -16, 55]) \n                    cube([6, 12, 2], center=true);\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    for(side=[-1, 1]) {\n        translate([side*12, 0, 40]) {\n            // Upper arm\n            rotate([0, 30, 0]) \n                cylinder(h=15, d=6);\n            \n            // Lower arm\n            translate([side*12, 0, -10]) \n                rotate([0, 45, 0]) \n                    cylinder(h=12, d=5);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side=[-1, 1]) {\n        translate([side*5, 0, 15]) {\n            // Upper leg\n            cylinder(h=15, d=7);\n            \n            // Lower leg\n            translate([0, 0, -12]) \n                cylinder(h=15, d=6);\n            \n            // Foot\n            translate([0, 3, -22]) \n                cube([6, 12, 4], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    cape();\n    arms();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "veela",
    "openscad_code": "// Veela Figure - Realistic Style, Medium Complexity\n// Approximate height: 75mm\n// 3D printable with no overhangs >45 degrees\n\n$fn = 32;\n\nmodule veela() {\n    // Base stand for stability\n    union() {\n        // Ground base\n        cylinder(h=3, r1=20, r2=25, center=true);\n        \n        // Body assembly\n        translate([0, 0, 15]) {\n            union() {\n                // Main torso\n                difference() {\n                    scale([1, 0.8, 1.5]) sphere(d=30);\n                    // Hollow torso slightly\n                    translate([0, 0, -5]) scale([0.9, 0.7, 1.4]) sphere(d=30);\n                }\n                \n                // Dress layers\n                translate([0, 0, -15]) {\n                    for(i=[0:2]) {\n                        translate([0, 0, -i*5]) \n                        cylinder(h=8, r1=20-i*2, r2=22-i*2, center=true);\n                    }\n                }\n                \n                // Arms\n                // Left arm\n                translate([-15, -5, 10]) {\n                    rotate([0, 10, -30]) \n                    cylinder(h=20, r1=4, r2=3);\n                }\n                \n                // Right arm\n                translate([15, -5, 10]) {\n                    rotate([0, 10, 30]) \n                    cylinder(h=20, r1=4, r2=3);\n                }\n                \n                // Head\n                translate([0, 0, 30]) {\n                    // Neck\n                    cylinder(h=8, r1=5, r2=4);\n                    \n                    // Head sphere\n                    translate([0, 0, 8]) {\n                        sphere(d=20);\n                        \n                        // Face features\n                        difference() {\n                            // Eyes\n                            translate([-4, -9, 2]) sphere(d=2);\n                            translate([4, -9, 2]) sphere(d=2);\n                            \n                            // Nose\n                            translate([0, -10, 0]) sphere(d=1.5);\n                            \n                            // Mouth\n                            translate([0, -11, -3]) cube([6, 1, 1]);\n                        }\n                        \n                        // Hair\n                        difference() {\n                            // Main hair shape\n                            scale([1.2, 1.1, 1.3]) sphere(d=22);\n                            \n                            // Face cutout\n                            translate([0, 0, -5]) sphere(d=18);\n                        }\n                    }\n                }\n                \n                // Wings\n                // Left wing\n                translate([-15, -5, 25]) {\n                    rotate([0, -20, 45]) {\n                        difference() {\n                            // Wing shape\n                            union() {\n                                scale([0.3, 0.05, 1]) sphere(d=40);\n                                translate([-5, 0, 10]) scale([0.2, 0.05, 0.8]) sphere(d=20);\n                                translate([-8, 0, 20]) scale([0.15, 0.05, 0.6]) sphere(d=15);\n                            }\n                            \n                            // Wing cutouts\n                            for(i=[0:2]) {\n                                translate([-i*3, 0, 5+i*8]) rotate([0, 0, 30]) \n                                scale([0.1, 0.2, 0.5]) cube([2, 1, 10]);\n                            }\n                        }\n                    }\n                }\n                \n                // Right wing\n                mirror([1, 0, 0]) \n                translate([-15, -5, 25]) {\n                    rotate([0, -20, 45]) {\n                        difference() {\n                            union() {\n                                scale([0.3, 0.05, 1]) sphere(d=40);\n                                translate([-5, 0, 10]) scale([0.2, 0.05, 0.8]) sphere(d=20);\n                                translate([-8, 0, 20]) scale([0.15, 0.05, 0.6]) sphere(d=15);\n                            }\n                            \n                            for(i=[0:2]) {\n                                translate([-i*3, 0, 5+i*8]) rotate([0, 0, 30]) \n                                scale([0.1, 0.2, 0.5]) cube([2, 1, 10]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the complete veela\nveela();",
    "renders": true
  },
  {
    "household_item": "wendigo",
    "openscad_code": "// Wendigo - realistic style, medium complexity\n// Size: ~80mm tall at 1:1 scale\n\n$fn = 32;  // Smooth curves for realistic look\nbody_height = 80;\nhead_height = 20;\nantler_length = 15;\n\n// Main module\nmodule wendigo() {\n    // Body - elongated torso\n    translate([0, 0, body_height/2])\n    scale([0.6, 0.4, 1.2])\n    sphere(body_height/3);\n    \n    // Ribcage details\n    union() {\n        for(i = [0:3]) {\n            translate([0, 0, body_height/2 + i*5])\n            scale([0.7 + i*0.05, 0.5 + i*0.05, 0.2])\n            sphere(body_height/4);\n        }\n    }\n    \n    // Head - elongated skull\n    translate([0, 0, body_height + head_height/2])\n    scale([0.4, 0.3, 1.5])\n    sphere(head_height/2);\n    \n    // Snout\n    translate([0, -5, body_height + head_height - 3])\n    scale([0.2, 0.3, 0.6])\n    sphere(5);\n    \n    // Eye sockets\n    difference() {\n        // Left eye\n        translate([-4, -3, body_height + head_height + 5])\n        scale([1, 1.2, 0.8])\n        sphere(2);\n        \n        // Right eye\n        translate([4, -3, body_height + head_height + 5])\n        scale([1, 1.2, 0.8])\n        sphere(2);\n    }\n    \n    // Antlers\n    module antler() {\n        // Main branch\n        cylinder(h = antler_length, r1 = 2, r2 = 0.5);\n        \n        // Branch 1\n        translate([0, 0, antler_length/3])\n        rotate([0, 30, 45])\n        cylinder(h = antler_length/2, r1 = 1.2, r2 = 0.3);\n        \n        // Branch 2\n        translate([0, 0, antler_length*2/3])\n        rotate([0, -30, -30])\n        cylinder(h = antler_length/2, r1 = 1, r2 = 0.3);\n    }\n    \n    // Left antler\n    translate([-5, 0, body_height + head_height + 10])\n    rotate([10, 0, 15])\n    antler();\n    \n    // Right antler\n    translate([5, 0, body_height + head_height + 10])\n    rotate([10, 0, -15])\n    mirror([1, 0, 0])\n    antler();\n    \n    // Arms - thin and elongated\n    module arm() {\n        // Upper arm\n        translate([0, 0, 0])\n        rotate([0, 20, 0])\n        cylinder(h = 25, r1 = 2.5, r2 = 1.5);\n        \n        // Forearm\n        translate([0, 20, -5])\n        rotate([0, 30, 0])\n        cylinder(h = 25, r1 = 1.5, r2 = 0.8);\n        \n        // Clawed hand\n        translate([0, 40, -8])\n        sphere(2);\n    }\n    \n    // Left arm\n    translate([-12, 0, body_height/2 + 10])\n    rotate([0, 0, 30])\n    arm();\n    \n    // Right arm\n    translate([12, 0, body_height/2 + 10])\n    rotate([0, 0, -30])\n    mirror([1, 0, 0])\n    arm();\n    \n    // Legs - digitigrade\n    module leg() {\n        // Thigh\n        translate([0, 0, 0])\n        rotate([30, 0, 0])\n        cylinder(h = 20, r1 = 3, r2 = 2);\n        \n        // Shin\n        translate([0, 0, -15])\n        rotate([60, 0, 0])\n        cylinder(h = 25, r1 = 2, r2 = 1.5);\n        \n        // Foot\n        translate([0, -5, -25])\n        scale([1.5, 2, 0.5])\n        sphere(3);\n    }\n    \n    // Left leg\n    translate([-5, 0, 0])\n    rotate([0, 0, 15])\n    leg();\n    \n    // Right leg\n    translate([5, 0, 0])\n    rotate([0, 0, -15])\n    mirror([1, 0, 0])\n    leg();\n    \n    // Spine ridge\n    for(i = [0:5]) {\n        translate([0, 0, body_height/2 - 10 + i*5])\n        scale([0.3, 0.8, 0.5])\n        sphere(3);\n    }\n}\n\n// Generate the wendigo\nwendigo();",
    "renders": true
  },
  {
    "household_item": "wraith",
    "openscad_code": "// Wraith model - realistic style, medium complexity\n// Height: 80mm, designed for FDM printing without supports\n\n$fa = 2;\n$fs = 0.5;\n\nmodule hood() {\n    // Main hood shape - oval dome\n    translate([0, 0, 65])\n    scale([1.2, 1, 1])\n    sphere(r=15);\n    \n    // Hood collar - wraps around neck\n    translate([0, 0, 50])\n    cylinder(h=15, r1=12, r2=10);\n}\n\nmodule face() {\n    // Shadow void inside hood - avoiding overhangs\n    translate([0, 8, 60])\n    rotate([0, 10, 0])\n    scale([0.8, 0.6, 1.2])\n    sphere(r=12);\n    \n    // Eye sockets - angled upward to avoid overhangs\n    for(x = [-6, 6]) {\n        translate([x, 5, 67])\n        rotate([30, 0, 0])\n        sphere(r=3);\n    }\n}\n\nmodule torso() {\n    // Chest - tapered cylinder for printing\n    translate([0, 0, 30])\n    cylinder(h=25, r1=10, r2=8);\n    \n    // Ribcage ridges - printed vertically\n    for(i = [1:4]) {\n        translate([0, 0, 30 + i*5])\n        rotate_extrude()\n        translate([9, 0, 0])\n        circle(r=1.5);\n    }\n}\n\nmodule arms() {\n    // Left arm - straight for printing\n    translate([-12, 0, 45])\n    rotate([0, 0, -15])\n    cylinder(h=25, r=3);\n    \n    // Left hand\n    translate([-12, 0, 20])\n    sphere(r=4);\n    \n    // Right arm - mirrored\n    translate([12, 0, 45])\n    rotate([0, 0, 15])\n    cylinder(h=25, r=3);\n    \n    // Right hand\n    translate([12, 0, 20])\n    sphere(r=4);\n}\n\nmodule robes() {\n    // Main robe - cone shape for printing\n    translate([0, 0, 10])\n    cylinder(h=25, r1=15, r2=12);\n    \n    // Bottom hem - wider base\n    translate([0, 0, 5])\n    cylinder(h=5, r1=16, r2=15);\n    \n    // Tattered edges - simple vertical cuts\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([14, 0, 5])\n        cube([3, 2, 5]);\n    }\n}\n\nmodule belt() {\n    // Cloth belt - flat against body\n    translate([0, 0, 27])\n    rotate_extrude()\n    translate([11, 0, 0])\n    square([2, 3]);\n}\n\nmodule base() {\n    // Stable printing base\n    translate([0, 0, 0])\n    cylinder(h=5, r=18);\n    \n    // Decorative ring\n    translate([0, 0, 5])\n    cylinder(h=1, r1=17, r2=16);\n}\n\n// Assembly\nunion() {\n    base();\n    robes();\n    belt();\n    torso();\n    hood();\n    \n    difference() {\n        union() {\n            hood();\n            torso();\n        }\n        face();\n    }\n    \n    arms();\n}",
    "renders": true
  },
  {
    "household_item": "xana",
    "openscad_code": "// Xana - Asturian mythological water nymph\n// Designed for 3D printing, 80mm tall\n\n$fn = 36;\n\n// Main module\nmodule xana() {\n    // Base rock/water pedestal\n    translate([0,0,5])\n    difference() {\n        cylinder(h=15, r1=25, r2=20, center=false);\n        \n        // Water hollow\n        translate([0,0,10])\n        cylinder(h=10, r1=18, r2=15, center=false);\n    }\n    \n    // Torso\n    translate([0,0,20])\n    union() {\n        // Hips\n        cylinder(h=12, r1=12, r2=10, center=false);\n        \n        // Waist\n        translate([0,0,12])\n        cylinder(h=8, r1=10, r2=9, center=false);\n        \n        // Chest\n        translate([0,0,20])\n        cylinder(h=15, r1=9, r2=11, center=false);\n    }\n    \n    // Head\n    translate([0,0,35])\n    sphere(r=9);\n    \n    // Hair - flowing back\n    for(i=[-30:10:30]) {\n        rotate([0,i,0])\n        translate([0,0,-2])\n        scale([1,0.3,1.5])\n        sphere(r=8);\n    }\n    \n    // Arms\n    module arm(side) {\n        translate([side*8,0,25])\n        rotate([0,side*15,0])\n        union() {\n            // Upper arm\n            cylinder(h=12, r=2.5, center=false);\n            \n            // Lower arm\n            translate([0,0,12])\n            rotate([0,side*20,0])\n            cylinder(h=10, r=2.2, center=false);\n            \n            // Hand\n            translate([0,0,22])\n            sphere(r=2.5);\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Long flowing hair strands\n    for(i=[-45:15:45]) {\n        rotate([0,i,0])\n        translate([0,8.5,30])\n        scale([0.4,0.4,2])\n        sphere(r=5);\n    }\n    \n    // Dress folds\n    translate([0,0,28])\n    for(i=[0:45:315]) {\n        rotate([0,0,i])\n        translate([8,0,0])\n        scale([0.5,3,1])\n        sphere(r=4);\n    }\n    \n    // Water pitcher\n    translate([12,0,25])\n    rotate([0,45,0])\n    difference() {\n        union() {\n            cylinder(h=12, r=4, r1=4, r2=3, center=false);\n            translate([0,0,12])\n            sphere(r=4);\n        }\n        translate([0,0,3])\n        cylinder(h=15, r=2.5, center=false);\n    }\n    \n    // Feet\n    module foot(side) {\n        translate([side*3,0,15])\n        scale([1.5,3,1])\n        sphere(r=3);\n    }\n    \n    foot(1);\n    foot(-1);\n}\n\n// Generate the model\nxana();",
    "renders": true
  },
  {
    "household_item": "xecotcovach",
    "openscad_code": "// Xecotcovach - Mayan stepped pyramid with realistic styling\n// Medium complexity, 3D printable\n\n// Overall dimensions\npyramid_base = 60;\npyramid_height = 40;\nsteps = 5;\nstep_height = pyramid_height / steps;\nwall_thickness = 2;\n\n// Temple structure on top\ntemple_width = 20;\ntemple_depth = 15;\ntemple_height = 12;\n\n// Staircase details\nstair_width = 8;\nstair_depth = 2;\n\nmodule pyramid_step(level) {\n    step_size = pyramid_base - (level * (pyramid_base / steps));\n    translate([0, 0, level * step_height]) {\n        // Main step block\n        cube([step_size, step_size, step_height], center = true);\n        \n        // Hollow out the step\n        difference() {\n            cube([step_size, step_size, step_height], center = true);\n            cube([step_size - wall_thickness*2, step_size - wall_thickness*2, step_height + 0.1], center = true);\n        }\n    }\n}\n\nmodule stairs() {\n    // Main staircase\n    for (i = [0:steps-1]) {\n        stair_y = -pyramid_base/2 + (i+1)*(pyramid_base/steps)/2;\n        stair_z = (i+1)*step_height;\n        translate([0, stair_y, stair_z]) {\n            cube([stair_width, stair_depth, step_height], center = true);\n        }\n    }\n    \n    // Top platform with stairs\n    translate([0, -temple_depth/2 - 5, pyramid_height]) {\n        cube([temple_width + 10, 10, wall_thickness], center = true);\n    }\n}\n\nmodule temple() {\n    translate([0, 0, pyramid_height + temple_height/2]) {\n        // Main temple block\n        cube([temple_width, temple_depth, temple_height], center = true);\n        \n        // Doorway\n        difference() {\n            cube([temple_width, temple_depth, temple_height], center = true);\n            translate([0, temple_depth/2, -temple_height/4])\n                cube([6, temple_depth + 1, 8], center = true);\n        }\n        \n        // Roof decoration\n        translate([0, 0, temple_height/2 + 2])\n            cube([temple_width + 4, temple_depth + 4, 4], center = true);\n    }\n}\n\nmodule decorative_panels() {\n    // Side panels on temple\n    for (side = [-1, 1]) {\n        translate([side * (temple_width/2 + 1), 0, pyramid_height + temple_height/2]) {\n            rotate([0, 90, 0])\n                cube([temple_height, temple_depth - 2, wall_thickness], center = true);\n        }\n    }\n}\n\n// Build the pyramid\nunion() {\n    // Base platform\n    translate([0, 0, wall_thickness/2])\n        cube([pyramid_base + 4, pyramid_base + 4, wall_thickness], center = true);\n    \n    // Pyramid steps\n    for (i = [0:steps-1]) {\n        pyramid_step(i);\n    }\n    \n    // Stairs\n    stairs();\n    \n    // Temple structure\n    temple();\n    \n    // Decorative elements\n    decorative_panels();\n    \n    // Corner pillars\n    pillar_size = 3;\n    pillar_height = pyramid_height + temple_height;\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * pyramid_base/2 - x*pillar_size, \n                      y * pyramid_base/2 - y*pillar_size, \n                      pillar_height/2]) {\n                cube([pillar_size, pillar_size, pillar_height], center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "xelhua",
    "openscad_code": "// Xelhua (Aztec dowel-style drum) – realistic medium–detail model\n// Overall print size ≈ 75 mm tall\n\nwall = 2;          // shell thickness for printing\ndia = 40;          // main cylinder diameter\nh_body = 60;       // body height\nskin_h = 4;        // thickness of hide\nslot_w = 12;       // sound slot width\nslot_h = 25;       // slot height\nring_h = 6;        // decorative ring height\nn_studs = 8;       // count of side studs\n\n// ---- main body ----------------------------------------------------------\nmodule body() {\n    difference() {\n        // outer shell\n        cylinder(h = h_body, d = dia, center = true, $fn = 64);\n        // hollow interior\n        translate([0, 0, -wall/2])\n            cylinder(h = h_body + 1, d = dia - 2*wall, center = true, $fn = 64);\n    }\n}\n\n// ---- hide skin on top ---------------------------------------------------\nmodule skin() {\n    translate([0, 0, h_body/2 + skin_h/2])\n        cylinder(h = skin_h, d = dia + 1, center = true, $fn = 64);\n}\n\n// ---- sound slot ---------------------------------------------------------\nmodule sound_slot() {\n    translate([dia/2 - wall, 0, 0])\n        rotate([0, 90, 0])\n            cube([slot_h, slot_w, wall + 1], center = true);\n}\n\n// ---- decorative rings ---------------------------------------------------\nmodule rings() {\n    for(z = [h_body/2 - ring_h/2, -(h_body/2 - ring_h/2)]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = ring_h, d = dia + 2, center = true, $fn = 64);\n                cylinder(h = ring_h + 1, d = dia, center = true, $fn = 64);\n            }\n    }\n}\n\n// ---- side tension studs -------------------------------------------------\nmodule studs() {\n    step = 360 / n_studs;\n    for(a = [0:step:359])\n        rotate([0, 0, a])\n            translate([dia/2 + 1.5, 0, h_body/2 - ring_h - 4])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d = 5, center = true, $fn = 12);\n}\n\n// ---- assembly -----------------------------------------------------------\nunion() {\n    body();\n    skin();\n    rings();\n    studs();\n    // two sound slots on opposite sides\n    sound_slot();\n    rotate([0, 0, 180]) sound_slot();\n}",
    "renders": true
  },
  {
    "household_item": "yale",
    "openscad_code": "// Yale University Shield - Realistic Style, Medium Complexity\n// OpenSCAD 3D Printable Model\n\n// Parameters for size and printing\n$fa = 1;\n$fs = 0.5;\nshield_width = 60;\nshield_height = 75;\ndepth = 8;\nwall_thickness = 2;\ntext_depth = 1.5;\n\nmodule shield_outline() {\n    difference() {\n        // Main shield body - elliptical top, pointed bottom\n        linear_extrude(height = depth) {\n            polygon(points = [\n                [0, shield_height/2],                       // Top center\n                [-shield_width/2, shield_height/4],         // Top left\n                [-shield_width/2, -shield_height/2],        // Bottom left\n                [0, -shield_height/2 - 5],                  // Bottom point\n                [shield_width/2, -shield_height/2],         // Bottom right\n                [shield_width/2, shield_height/4],          // Top right\n                [0, shield_height/2]                        // Close polygon\n            ]);\n        }\n        \n        // Hollow out center for lighter printing\n        translate([0, 0, wall_thickness])\n        scale([0.85, 0.85, 1])\n        linear_extrude(height = depth)\n        polygon(points = [\n            [0, shield_height/2 * 0.85],\n            [-shield_width/2 * 0.85, shield_height/4 * 0.85],\n            [-shield_width/2 * 0.85, -shield_height/2 * 0.85],\n            [0, -shield_height/2 * 0.85 - 5],\n            [shield_width/2 * 0.85, -shield_height/2 * 0.85],\n            [shield_width/2 * 0.85, shield_height/4 * 0.85],\n            [0, shield_height/2 * 0.85]\n        ]);\n    }\n}\n\nmodule open_book() {\n    // Book cover - two pages open\n    translate([0, -5, depth/2 + 0.1])\n    rotate([90, 0, 0])\n    difference() {\n        // Left page\n        translate([-shield_width/4, 0, 0])\n        cube([shield_width/2.2, shield_height/6, text_depth], center = true);\n        \n        // Right page\n        translate([shield_width/4, 0, 0])\n        cube([shield_width/2.2, shield_height/6, text_depth], center = true);\n        \n        // Spine gap\n        cube([1, shield_height/5, text_depth * 2], center = true);\n    }\n    \n    // Book details - lines for text\n    for (i = [-1, 1]) {\n        translate([i * shield_width/3.5, -5, depth/2 + 0.2])\n        rotate([90, 0, 0])\n        for (j = [-1, 0, 1]) {\n            translate([0, j * 3, 0])\n            cube([shield_width/3, 0.5, text_depth * 0.7], center = true);\n        }\n    }\n}\n\nmodule hebrew_words() {\n    // Stylized Hebrew letters Urim and Thummim\n    translate([0, 12, depth/2 + 0.1])\n    rotate([90, 0, 0])\n    union() {\n        // Urim (simplified characters)\n        translate([-8, 0, 0])\n        cube([3, 8, text_depth * 1.2], center = true);\n        translate([-5, 0, 0])\n        cube([3, 8, text_depth * 1.2], center = true);\n        translate([-2, 0, 0])\n        cube([3, 8, text_depth * 1.2], center = true);\n        \n        // Thummim (simplified characters)\n        translate([2, 0, 0])\n        cube([3, 8, text_depth * 1.2], center = true);\n        translate([5, 0, 0])\n        cube([3, 8, text_depth * 1.2], center = true);\n        translate([8, 0, 0])\n        cube([3, 8, text_depth * 1.2], center = true);\n    }\n}\n\nmodule banner() {\n    // Curved banner below shield\n    translate([0, -shield_height/2 - 8, depth/2])\n    rotate([0, 90, 0])\n    difference() {\n        // Banner body\n        rotate_extrude(angle = 180)\n        translate([shield_width/2 + 5, 0, 0])\n        circle(r = 3);\n        \n        // Banner text area\n        rotate_extrude(angle = 180)\n        translate([shield_width/2 + 4, 0, 0])\n        circle(r = 2.5);\n    }\n}\n\nmodule yale_text() {\n    // \"YALE\" text on banner\n    translate([0, -shield_height/2 - 8, depth/2 + 2])\n    rotate([0, 90, 0])\n    scale([0.1, 0.1, 0.1])\n    linear_extrude(height = 2)\n    text(\"YALE\", size = 15, halign = \"center\", valign = \"center\");\n}\n\nmodule ribbon_detail() {\n    // Decorative ribbons around shield\n    for (angle = [30, 150]) {\n        translate([0, 0, depth/2])\n        rotate([0, 0, angle])\n        translate([shield_width/2 - 2, 0, 0])\n        cube([shield_width/4, 2, 1]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Shield body\n    shield_outline();\n    \n    // Book and Hebrew words\n    open_book();\n    hebrew_words();\n    \n    // Banner and text\n    banner();\n    yale_text();\n    \n    // Decorative elements\n    ribbon_detail();\n}",
    "renders": true
  },
  {
    "household_item": "yeti",
    "openscad_code": "// Realistic Yeti Figure - Medium Complexity\n// Optimized for 3D printing with no overhangs\n\n$fn = 36;  // Smooth curves for better print quality\n\n// Main assembly\nmodule yeti() {\n    union() {\n        // Body structure\n        body();\n        \n        // Head and facial features\n        head();\n        \n        // Arms\n        arms();\n        \n        // Legs and feet\n        legs();\n    }\n}\n\n// Body - main torso\nmodule body() {\n    color(\"white\")\n    union() {\n        // Torso - slightly tapered cylinder for natural shape\n        translate([0, 0, 15])\n        scale([1, 1.2, 1.4])\n        cylinder(h = 30, r1 = 15, r2 = 12);\n        \n        // Chest fur detail\n        for(i = [0:2]) {\n            translate([0, 12, 20 + i*3])\n            sphere(3, $fn=12);\n        }\n        \n        // Back fur texture\n        for(i = [0:4]) {\n            translate([-10 + i*5, -12, 20])\n            sphere(2, $fn=8);\n        }\n    }\n}\n\n// Head with facial features\nmodule head() {\n    color(\"white\")\n    translate([0, 0, 48])\n    union() {\n        // Main head shape - elongated sphere\n        scale([1.2, 1, 1.1])\n        sphere(12);\n        \n        // Muzzle\n        translate([0, 8, -2])\n        scale([0.8, 0.6, 0.7])\n        sphere(8);\n        \n        // Eyes - recessed for no overhang\n        translate([-4, 6, 2])\n        difference() {\n            sphere(2);\n            translate([0, 0, 1])\n            sphere(1.8);\n        }\n        \n        translate([4, 6, 2])\n        difference() {\n            sphere(2);\n            translate([0, 0, 1])\n            sphere(1.8);\n        }\n        \n        // Eye pupils\n        translate([-4, 6.5, 1.5])\n        color(\"black\")\n        sphere(0.8);\n        \n        translate([4, 6.5, 1.5])\n        color(\"black\")\n        sphere(0.8);\n        \n        // Nose\n        translate([0, 10, 0])\n        color(\"darkgray\")\n        scale([1.5, 1, 0.8])\n        sphere(2);\n        \n        // Mouth line\n        translate([0, 12, -3])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, r = 3);\n    }\n    \n    // Fur crown on head\n    for(i = [0:6]) {\n        rotate([0, 0, i*60])\n        translate([0, 10, 10])\n        sphere(3, $fn=8);\n    }\n}\n\n// Arms module\nmodule arms() {\n    // Left arm\n    translate([-18, 5, 35])\n    rotate([0, 0, 30])\n    arm();\n    \n    // Right arm\n    translate([18, 5, 35])\n    rotate([0, 0, -30])\n    mirror([1, 0, 0])\n    arm();\n}\n\n// Single arm assembly\nmodule arm() {\n    color(\"white\")\n    union() {\n        // Upper arm\n        cylinder(h = 15, r = 5);\n        \n        // Elbow\n        translate([0, 0, -15])\n        sphere(5.5);\n        \n        // Forearm\n        translate([0, 0, -15])\n        rotate([30, 0, 0])\n        cylinder(h = 12, r = 4);\n        \n        // Hand\n        translate([0, 0, -27])\n        sphere(4);\n        \n        // Fingers - simple rounded shapes\n        for(i = [-2:2]) {\n            translate([i*2, -3, -27])\n            sphere(1.5);\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Left leg\n    translate([-8, 0, 0])\n    leg();\n    \n    // Right leg\n    translate([8, 0, 0])\n    leg();\n}\n\n// Single leg assembly\nmodule leg() {\n    color(\"white\")\n    union() {\n        // Thigh\n        translate([0, 0, 15])\n        cylinder(h = 15, r = 6);\n        \n        // Knee\n        translate([0, 0, 0])\n        sphere(6.5);\n        \n        // Lower leg\n        translate([0, 0, 0])\n        cylinder(h = 12, r = 5);\n        \n        // Foot - blocky shape for stability\n        translate([0, 6, -6])\n        scale([1.2, 2, 0.8])\n        cube([10, 15, 6], center = true);\n        \n        // Toe details\n        for(i = [-1.5:1.5]) {\n            translate([i*3, 13, -6])\n            sphere(2);\n        }\n    }\n}\n\n// Create the yeti\nyeti();",
    "renders": true
  },
  {
    "household_item": "yowie",
    "openscad_code": "// Yowie (Australian cryptid) - realistic medium complexity\n// Designed for 3D printing, no overhangs, 2mm wall thickness\n\n// Overall dimensions\nheight = 80;\nshoulder_width = 40;\ndepth = 25;\n\n// Body proportions\nhead_h = 18;\ntorso_h = 28;\nlegs_h = 34;\n\nmodule head() {\n    // Skull base\n    translate([0, 0, legs_h + torso_h + head_h/2])\n    scale([1, 0.8, 1.1])\n    sphere(d=head_h, $fn=32);\n    \n    // Jaw\n    translate([0, -head_h*0.3, legs_h + torso_h + head_h*0.7])\n    rotate([20, 0, 0])\n    cube([head_h*0.8, head_h*0.5, head_h*0.3], center=true);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([side*head_h*0.3, -head_h*0.25, legs_h + torso_h + head_h*0.7])\n        sphere(d=head_h*0.18, $fn=16);\n    }\n    \n    // Nose\n    translate([0, -head_h*0.4, legs_h + torso_h + head_h*0.6])\n    sphere(d=head_h*0.2, $fn=16);\n    \n    // Brow ridge\n    translate([0, -head_h*0.1, legs_h + torso_h + head_h*0.9])\n    cylinder(h=head_h*0.15, d1=head_h*0.9, d2=head_h*1.1, $fn=32);\n}\n\nmodule torso() {\n    // Chest\n    translate([0, 0, legs_h + torso_h/2])\n    scale([1, 0.7, 1.2])\n    cylinder(h=torso_h*0.7, d=shoulder_width, $fn=32);\n    \n    // Abdomen\n    translate([0, 0, legs_h + torso_h*0.35])\n    scale([0.8, 0.6, 1])\n    cylinder(h=torso_h*0.5, d=shoulder_width*0.9, $fn=32);\n    \n    // Shoulders\n    for(side = [-1, 1]) {\n        translate([side*shoulder_width/2, 0, legs_h + torso_h*0.7])\n        rotate([0, 90, 0])\n        cylinder(h=shoulder_width*0.3, d=shoulder_width*0.25, $fn=16);\n    }\n}\n\nmodule arms() {\n    arm_length = torso_h*0.8;\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side*shoulder_width/2, 0, legs_h + torso_h*0.7])\n        rotate([0, 0, side*-20])\n        cylinder(h=arm_length*0.6, d=shoulder_width*0.15, $fn=16);\n        \n        // Forearm\n        translate([side*(shoulder_width/2 + arm_length*0.6*sin(20)), \n                   -arm_length*0.6*cos(20), \n                   legs_h + torso_h*0.7 - arm_length*0.6*sin(20)])\n        rotate([0, 0, side*-30])\n        cylinder(h=arm_length*0.4, d=shoulder_width*0.12, $fn=16);\n    }\n}\n\nmodule legs() {\n    thigh_length = legs_h*0.6;\n    shin_length = legs_h*0.4;\n    \n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side*shoulder_width*0.25, 0, legs_h*0.7])\n        cylinder(h=thigh_length, d=shoulder_width*0.2, $fn=16);\n        \n        // Shin\n        translate([side*shoulder_width*0.25, 0, legs_h*0.7 - thigh_length])\n        cylinder(h=shin_length, d=shoulder_width*0.15, $fn=16);\n        \n        // Foot\n        translate([side*shoulder_width*0.25, -shoulder_width*0.2, legs_h*0.2])\n        scale([1.5, 2, 0.5])\n        cube([shoulder_width*0.15, shoulder_width*0.1, legs_h*0.2], center=true);\n    }\n}\n\nmodule hair() {\n    // Back hair\n    difference() {\n        translate([0, -shoulder_width*0.3, legs_h + torso_h + head_h*0.7])\n        sphere(d=head_h*1.3, $fn=32);\n        \n        // Cut to head shape\n        translate([0, 0, legs_h + torso_h + head_h*0.7])\n        sphere(d=head_h*1.1, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    head();\n    torso();\n    arms();\n    legs();\n    hair();\n}",
    "renders": true
  },
  {
    "household_item": "zburator",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Wing membrane thickness\nmembrane_t = 1.2;\n\n// Body\nmodule body() {\n    // Main torso\n    translate([0, 0, 25])\n        scale([1, 0.8, 1.2])\n        sphere(d = 30);\n\n    // Neck\n    translate([0, 0, 42])\n        cylinder(h = 15, d1 = 12, d2 = 8, $fn = 16);\n\n    // Head\n    translate([0, 0, 60])\n        sphere(d = 18);\n\n    // Snout\n    translate([0, -8, 57])\n        rotate([30, 0, 0])\n        scale([1, 1.5, 1])\n        cylinder(h = 12, d1 = 10, d2 = 6, $fn = 16);\n\n    // Eye sockets\n    difference() {\n        translate([0, 0, 60])\n            sphere(d = 18);\n        translate([5, -5, 62])\n            sphere(d = 6);\n        translate([-5, -5, 62])\n            sphere(d = 6);\n    }\n}\n\n// Tail\nmodule tail() {\n    hull() {\n        translate([0, 0, 15])\n            sphere(d = 8);\n        translate([0, 0, 0])\n            sphere(d = 4);\n    }\n}\n\n// Wing skeleton\nmodule wing_skeleton() {\n    // Main arm\n    cylinder(h = 40, d = 3, $fn = 8);\n\n    // First finger\n    translate([0, 0, 35])\n        rotate([0, 30, 0])\n        cylinder(h = 30, d = 2.5, $fn = 8);\n\n    // Second finger\n    translate([0, 0, 35])\n        rotate([0, 60, 0])\n        cylinder(h = 25, d = 2.5, $fn = 8);\n\n    // Third finger\n    translate([0, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d = 2.5, $fn = 8);\n}\n\n// Wing membrane\nmodule wing_membrane() {\n    difference() {\n        // Main membrane\n        hull() {\n            translate([0, 0, 35])\n                sphere(d = 1);\n            translate([0, 0, 35])\n                rotate([0, 30, 0])\n                translate([0, 0, 30])\n                    sphere(d = 1);\n            translate([0, 0, 35])\n                rotate([0, 60, 0])\n                translate([0, 0, 25])\n                    sphere(d = 1);\n            translate([0, 0, 35])\n                rotate([0, 90, 0])\n                translate([0, 0, 20])\n                    sphere(d = 1);\n        }\n\n        // Cut holes for fingers\n        translate([0, 0, 35])\n            cylinder(h = 2, d = 4, $fn = 8);\n        translate([0, 0, 35])\n            rotate([0, 30, 0])\n            translate([0, 0, 30])\n                cylinder(h = 2, d = 4, $fn = 8);\n        translate([0, 0, 35])\n            rotate([0, 60, 0])\n            translate([0, 0, 25])\n                cylinder(h = 2, d = 4, $fn = 8);\n        translate([0, 0, 35])\n            rotate([0, 90, 0])\n            translate([0, 0, 20])\n                cylinder(h = 2, d = 4, $fn = 8);\n    }\n}\n\n// Complete wing\nmodule wing() {\n    union() {\n        wing_skeleton();\n        \n        // Membrane on both sides of skeleton\n        translate([0, membrane_t/2, 0])\n            wing_membrane();\n        translate([0, -membrane_t/2, 0])\n            wing_membrane();\n    }\n}\n\n// Leg\nmodule leg() {\n    // Upper leg\n    cylinder(h = 15, d = 4, $fn = 8);\n    \n    // Lower leg\n    translate([0, 0, 15])\n        rotate([15, 0, 0])\n        cylinder(h = 12, d = 3, $fn = 8);\n    \n    // Foot\n    translate([0, 0, 27])\n        rotate([30, 0, 0])\n        cylinder(h = 8, d = 3, $fn = 8);\n}\n\n// Complete zburator\nmodule zburator() {\n    scale(scale_factor) {\n        union() {\n            // Body and tail\n            body();\n            translate([0, 0, 0])\n                tail();\n            \n            // Left wing\n            translate([15, 0, 35])\n                rotate([0, 0, -20])\n                wing();\n            \n            // Right wing\n            translate([-15, 0, 35])\n                rotate([0, 0, 20])\n                mirror([1, 0, 0])\n                wing();\n            \n            // Left legs\n            translate([8, 0, 15])\n                rotate([30, 0, 15])\n                leg();\n            translate([5, 0, 15])\n                rotate([30, 0, -15])\n                leg();\n            \n            // Right legs\n            translate([-8, 0, 15])\n                rotate([30, 0, 15])\n                mirror([1, 0, 0])\n                leg();\n            translate([-5, 0, 15])\n                rotate([30, 0, -15])\n                mirror([1, 0, 0])\n                leg();\n        }\n    }\n}\n\n// Render the model\nzburator();",
    "renders": true
  },
  {
    "household_item": "zephyr",
    "openscad_code": "// Zephyr Airship - Realistic Medium Complexity\n// Designed for 3D printing - 80mm length\n\n$fn = 32;\n\n// Main parameters\nlength = 80;\ndiameter = 20;\ntail_fin_height = 12;\ntail_fin_width = 8;\ngondola_length = 25;\ngondola_diameter = 8;\nprop_diameter = 10;\n\nmodule envelope() {\n    // Main airship envelope - ellipsoid shape\n    difference() {\n        scale([1, 0.8, 0.5]) \n            sphere(d = diameter);\n        \n        // Flatten bottom slightly for gondola\n        translate([0, 0, -diameter/2.5])\n            cube([diameter*2, diameter*2, diameter/2], center=true);\n    }\n}\n\nmodule tail_fins() {\n    // Vertical stabilizer\n    translate([length/2 - 5, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = tail_fin_height, d1 = 2, d2 = tail_fin_width, center=true);\n    \n    // Horizontal stabilizers (top and bottom)\n    for(z = [tail_fin_height/2, -tail_fin_height/2]) {\n        translate([length/2 - 5, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h = tail_fin_width, d1 = 2, d2 = tail_fin_height/1.5, center=true);\n    }\n}\n\nmodule gondola() {\n    // Passenger gondola\n    translate([0, 0, -diameter/2 - gondola_diameter/2 - 3])\n        difference() {\n            // Main body\n            scale([1.5, 1, 0.8])\n                sphere(d = gondola_diameter);\n            \n            // Flatten top\n            translate([0, 0, gondola_diameter/2])\n                cube([gondola_length*2, gondola_diameter*2, gondola_diameter], center=true);\n            \n            // Windows\n            for(i = [-1, 0, 1]) {\n                translate([i * 6, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 3, d = 2);\n            }\n        }\n}\n\nmodule propeller() {\n    // Propeller assembly at rear\n    translate([length/2 + 2, 0, -gondola_diameter/2 - 1])\n        rotate([0, 90, 0]) {\n            // Hub\n            cylinder(h = 3, d = 4);\n            \n            // Blades\n            for(i = [0:120:359]) {\n                rotate([0, 0, i])\n                    translate([0, prop_diameter/2, 0])\n                        scale([0.2, 1, 0.05])\n                            cube([3, prop_diameter/2, 2], center=true);\n            }\n        }\n}\n\nmodule rigging() {\n    // Support cables between envelope and gondola\n    cable_radius = 0.5;\n    \n    for(angle = [30, 150, 210, 330]) {\n        translate([0, 0, -diameter/2 - 1])\n            rotate([0, 0, angle])\n                translate([diameter/2 * cos(30), diameter/2 * sin(30), 0])\n                    cylinder(h = 3, r = cable_radius);\n    }\n}\n\n// Assembly\nunion() {\n    // Main envelope scaled to length\n    scale([length/diameter, 1, 1])\n        envelope();\n    \n    tail_fins();\n    gondola();\n    propeller();\n    rigging();\n}",
    "renders": true
  },
  {
    "household_item": "ziz",
    "openscad_code": "// Realistic-style 3D printable \"Ziz\" (giant legendary bird) ~80 mm wingspan\n// Wings fold upward to minimize overhangs and support-free printing\n\n// Overall scale factor (mm)\nscale_factor = 1;\n\n// Body parameters\nbody_len = 30 * scale_factor;\nbody_w   = 15 * scale_factor;\nbody_h   = 18 * scale_factor;\n\n// Head parameters\nhead_r = 9 * scale_factor;\nneck_h = 8 * scale_factor;\n\n// Wing parameters\nwing_span = 40 * scale_factor;\nwing_chord = 22 * scale_factor;\nwing_t = 2.5 * scale_factor;\n\n// Tail parameters\ntail_len = 20 * scale_factor;\ntail_w = 12 * scale_factor;\n\n// Leg parameters\nleg_h = 10 * scale_factor;\nleg_r = 2 * scale_factor;\nclaw_l = 4 * scale_factor;\n\n// Beak parameters\nbeak_len = 14 * scale_factor;\nbeak_r1 = 3 * scale_factor;\nbeak_r2 = 0.8 * scale_factor;\n\n// Eye parameters\neye_r = 2 * scale_factor;\n\n// Feather detail\nfeather_num = 5;\nfeather_len = wing_chord * 0.6;\n\n// Main module\nmodule ziz() {\n    union() {\n        // Central body (elongated ellipsoid made from spheres)\n        body();\n\n        // Head and neck\n        translate([body_len/2 + neck_h/2, 0, body_h/2 - head_r/2])\n            neck_and_head();\n\n        // Wings (mirrored)\n        mirror([0,1,0])\n            wing_assembly();\n\n        // Tail fan\n        translate([-body_len/2 - tail_len/2, 0, body_h/2 - 2])\n            tail();\n\n        // Legs\n        translate([0, body_w/2 - leg_r, -body_h/2])\n            leg();\n        translate([0, -body_w/2 + leg_r, -body_h/2])\n            leg();\n    }\n}\n\nmodule body() {\n    // Build body as stacked, scaled spheres for smooth egg-like form\n    for(i=[0:2]) {\n        translate([0, 0, i*6*scale_factor])\n            scale([1, 0.8 - i*0.1, 0.7])\n                sphere(d = body_h - i*3*scale_factor, $fn = 32);\n    }\n}\n\nmodule neck_and_head() {\n    rotate([0, 90, 0])\n        cylinder(h = neck_h, r1 = 5*scale_factor, r2 = head_r, $fn = 16);\n    translate([neck_h + head_r, 0, 0])\n        sphere(r = head_r, $fn = 32);\n    // Beak\n    translate([neck_h + head_r + beak_len/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = beak_len, r1 = beak_r1, r2 = beak_r2, $fn = 16);\n    // Eyes\n    translate([neck_h + head_r*0.7,  head_r*0.5,  head_r*0.3])\n        sphere(r = eye_r, $fn = 12);\n    translate([neck_h + head_r*0.7, -head_r*0.5,  head_r*0.3])\n        sphere(r = eye_r, $fn = 12);\n}\n\nmodule wing_assembly() {\n    // Main wing panel tilted upward 30° to avoid overhang\n    rotate([30, 0, 0])\n        translate([0, body_w/2 + wing_chord/2, body_h/2])\n            wing();\n}\n\nmodule wing() {\n    difference() {\n        // Basic wing planform\n        scale([1, 1, 0.3])\n            sphere(d = wing_span, $fn = 32);\n        // Cut to chord length\n        translate([0, wing_chord, 0])\n            cube([wing_span*2, wing_chord*2, wing_t*2], center = true);\n        // Round leading edge\n        translate([-wing_span*0.3, -wing_chord*0.2, 0])\n            sphere(d = wing_chord*1.2, $fn = 32);\n    }\n    // Feather details\n    for(i=[0:feather_num-1]) {\n        rotate([0, 0, i*12 - 24])\n            translate([wing_span*0.3 - i*3, 0, 0])\n                scale([0.4, 1, 0.2])\n                    cylinder(h = feather_len, r = feather_len/4, $fn = 8);\n    }\n}\n\nmodule tail() {\n    rotate([0, 0, 180])\n        difference() {\n            // Fan-shaped tail\n            cylinder(h = tail_len, r1 = tail_w, r2 = 0, $fn = 32);\n            // Hollow slightly for printability\n            translate([0, 0, -1])\n                cylinder(h = tail_len + 2, r1 = tail_w - 3*scale_factor, r2 = 0, $fn = 32);\n        }\n}\n\nmodule leg() {\n    union() {\n        cylinder(h = leg_h, r = leg_r, $fn = 16);\n        // Three claws at base\n        for(a=[0:120:240])\n            rotate([0, 0, a])\n                translate([leg_r, 0, -leg_h])\n                    rotate([90, 0, 0])\n                        cylinder(h = claw_l, r = leg_r*0.7, $fn = 8);\n    }\n}\n\n// Render the model\nziz();",
    "renders": true
  },
  {
    "household_item": "zmeu",
    "openscad_code": "// Realistic Zmeu (Romanian Dragon) - Medium Complexity\n// Overall dimensions: ~80mm height, 60mm width, 70mm depth\n\n$fn = 32;\n\nmodule zmeu_body() {\n    // Main torso - ellipsoid shape\n    scale([1, 0.8, 1.2]) sphere(r = 15);\n    \n    // Chest armor plates\n    for (i = [0:3]) {\n        rotate([0, i*15-22.5, 0]) \n            translate([0, 0, 12])\n            scale([1.2, 0.8, 0.3]) \n            sphere(r = 8);\n    }\n}\n\nmodule zmeu_head() {\n    // Base head shape\n    translate([0, 0, 25]) {\n        scale([1.2, 1, 1.1]) sphere(r = 12);\n        \n        // Snout\n        translate([15, 0, -2]) \n            scale([1.5, 0.8, 0.8]) sphere(r = 8);\n            \n        // Horns - curved back\n        for (side = [-1, 1]) {\n            translate([5, side*8, 12]) {\n                rotate([side*20, 0, -30]) \n                    cylinder(h = 15, r1 = 3, r2 = 1);\n                translate([0, 0, 15]) \n                    sphere(r = 2);\n            }\n        }\n        \n        // Eyes with ridges\n        for (side = [-1, 1]) {\n            translate([8, side*6, 5]) {\n                // Eye ridge\n                rotate([0, 90, 0]) \n                    cylinder(h = 8, r = 4);\n                // Eye socket\n                translate([0, side*2, -1]) {\n                    color(\"red\") sphere(r = 2.5);\n                }\n            }\n        }\n        \n        // Teeth\n        for (i = [0:4]) {\n            rotate([0, 0, i*15-30]) \n                translate([18, 0, -6]) \n                cylinder(h = 3, r1 = 1.5, r2 = 0.5);\n        }\n    }\n}\n\nmodule zmeu_wings() {\n    // Wing membrane support bones\n    for (side = [-1, 1]) {\n        translate([0, side*15, 15]) {\n            rotate([0, side*30, 0]) {\n                // Main wing bone\n                cylinder(h = 25, r = 2);\n                translate([20, 0, 0]) sphere(r = 2);\n                \n                // Wing fingers\n                for (finger = [0:2]) {\n                    rotate([0, 0, finger*45-45]) {\n                        translate([20, 0, 0]) {\n                            rotate([0, 0, finger*20-20]) {\n                                cylinder(h = 15, r = 1);\n                                translate([15, 0, 0]) sphere(r = 1);\n                            }\n                        }\n                    }\n                }\n                \n                // Wing membrane (simplified)\n                translate([10, 0, -2]) \n                    scale([1.5, 0.1, 1]) \n                    rotate([0, 90, 0]) \n                    cylinder(h = 30, r = 15);\n            }\n        }\n    }\n}\n\nmodule zmeu_limbs() {\n    // Arms\n    for (side = [-1, 1]) {\n        translate([8, side*15, 10]) {\n            rotate([90, 0, side*20]) {\n                // Upper arm\n                cylinder(h = 12, r = 3);\n                translate([0, 0, 12]) sphere(r = 3);\n                \n                // Lower arm\n                rotate([0, 0, side*30]) {\n                    cylinder(h = 10, r = 2.5);\n                    translate([0, 0, 10]) sphere(r = 2.5);\n                    \n                    // Clawed hand\n                    translate([0, 0, 10]) sphere(r = 3);\n                    for (claw = [0:3]) {\n                        rotate([0, 0, claw*45-67.5]) {\n                            translate([3, 0, 0]) {\n                                rotate([90, 0, 0]) \n                                    cylinder(h = 5, r1 = 1.5, r2 = 0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for (side = [-1, 1]) {\n        translate([-5, side*8, -15]) {\n            rotate([0, side*10, 0]) {\n                // Thigh\n                cylinder(h = 15, r = 4);\n                translate([0, 0, 15]) sphere(r = 4);\n                \n                // Lower leg\n                rotate([30, 0, 0]) {\n                    cylinder(h = 12, r = 3.5);\n                    translate([0, 0, 12]) sphere(r = 3.5);\n                    \n                    // Foot with claws\n                    translate([0, 0, 12]) {\n                        scale([1.5, 1, 0.8]) sphere(r = 4);\n                        for (claw = [0:2]) {\n                            translate([0, side*(claw*4-4), -3]) {\n                                rotate([90, 0, 0]) \n                                    cylinder(h = 4, r1 = 1, r2 = 0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule zmeu_tail() {\n    // Tail segments\n    for (seg = [0:5]) {\n        translate([-15-seg*5, 0, -10-seg*2]) {\n            rotate([0, seg*10, 0]) {\n                scale([1-seg*0.1, 1-seg*0.1, 1-seg*0.05]) \n                    sphere(r = 8-seg);\n            }\n        }\n    }\n    \n    // Tail spikes\n    for (spike = [0:3]) {\n        translate([-20-spike*7, 0, -15-spike*2]) {\n            rotate([0, 0, spike*30]) {\n                cylinder(h = 6, r1 = 2, r2 = 0.5);\n            }\n        }\n    }\n}\n\n// Assemble the zmeu\nunion() {\n    zmeu_body();\n    zmeu_head();\n    zmeu_wings();\n    zmeu_limbs();\n    zmeu_tail();\n}",
    "renders": true
  },
  {
    "household_item": "zubat",
    "openscad_code": "// Realistic Zubat Model - Medium Complexity\n// Size: ~70mm wingspan\n\n$fn = 50;\n\n// Main body module\nmodule zubat_body() {\n    // Torso - elongated oval\n    translate([0, 0, 5])\n    scale([1, 0.7, 1.2])\n    sphere(8);\n    \n    // Head - larger sphere with flattened top\n    translate([0, 12, 8])\n    scale([1.1, 1.1, 0.9])\n    sphere(7);\n    \n    // Snout - tapered cylinder\n    translate([0, 20, 8])\n    rotate([90, 0, 0])\n    cylinder(h1 = 6, h2 = 0, r1 = 3, r2 = 1.5);\n    \n    // Ears - curved cones\n    // Left ear\n    translate([-5, 10, 15])\n    rotate([45, 0, -30])\n    cylinder(h = 10, r1 = 2.5, r2 = 0);\n    \n    // Right ear\n    translate([5, 10, 15])\n    rotate([45, 0, 30])\n    cylinder(h = 10, r1 = 2.5, r2 = 0);\n    \n    // Eyes - hollow spheres\n    // Left eye\n    translate([-3, 14, 10])\n    difference() {\n        sphere(2);\n        translate([0, 0, 1])\n        sphere(1.8);\n    }\n    \n    // Right eye\n    translate([3, 14, 10])\n    difference() {\n        sphere(2);\n        translate([0, 0, 1])\n        sphere(1.8);\n    }\n    \n    // Mouth - small notch\n    translate([0, 18, 6])\n    rotate([90, 0, 0])\n    cylinder(h = 2, r = 1.5);\n}\n\n// Wing membrane generation\nmodule wing_membrane() {\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([0, 0, 0])\n            sphere(1);\n            translate([25, 0, 0])\n            sphere(1);\n            translate([35, -15, 0])\n            sphere(1);\n            translate([30, -25, 0])\n            sphere(1);\n            translate([20, -20, 0])\n            sphere(1);\n            translate([10, -15, 0])\n            sphere(1);\n            translate([0, -10, 0])\n            sphere(1);\n        }\n        \n        // Cut finger holes\n        for(i = [1:5]) {\n            translate([i * 6 + 5, -i * 3, 0])\n            cylinder(h = 5, r = 1.5);\n        }\n    }\n}\n\n// Wing structure\nmodule wing() {\n    // Wing bone structure\n    // Main wing finger\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 35, r = 1);\n    \n    // Additional fingers\n    for(i = [1:3]) {\n        translate([0, 0, 0])\n        rotate([0, 90, -i * 20])\n        cylinder(h = 25 - i * 5, r = 0.8);\n    }\n    \n    // Wing membrane\n    translate([5, 0, -1])\n    wing_membrane();\n}\n\n// Feet module\nmodule feet() {\n    // Left foot\n    translate([-5, -8, 0])\n    rotate([0, 0, -30])\n    cylinder(h = 8, r = 1.5);\n    translate([-8, -14, 0])\n    rotate([0, 0, -45])\n    cylinder(h = 6, r = 1);\n    \n    // Right foot\n    translate([5, -8, 0])\n    rotate([0, 0, 30])\n    cylinder(h = 8, r = 1.5);\n    translate([8, -14, 0])\n    rotate([0, 0, 45])\n    cylinder(h = 6, r = 1);\n}\n\n// Tail\nmodule tail() {\n    translate([0, -15, 5])\n    rotate([0, 0, 0])\n    cylinder(h = 12, r1 = 3, r2 = 1);\n}\n\n// Complete zubat assembly\nmodule zubat() {\n    // Body\n    zubat_body();\n    \n    // Left wing\n    translate([-5, 5, 5])\n    rotate([0, 0, 30])\n    wing();\n    \n    // Right wing\n    translate([5, 5, 5])\n    mirror([1, 0, 0])\n    rotate([0, 0, 30])\n    wing();\n    \n    // Feet\n    feet();\n    \n    // Tail\n    tail();\n}\n\n// Center and scale for 3D printing\ntranslate([0, 0, 5])\nscale(0.7)\nzubat();",
    "renders": true
  },
  {
    "household_item": "zilant",
    "openscad_code": "// Zilant - Realistic style, medium complexity\n// Wings, serpentine body, dragon-like head, four legs\n\n// Parameters for easy scaling\nscale_factor = 1;\nbody_length = 50 * scale_factor;\nbody_radius = 6 * scale_factor;\nhead_length = 12 * scale_factor;\nhead_radius = 5 * scale_factor;\nwing_span = 35 * scale_factor;\nwing_thickness = 1.5 * scale_factor;\nleg_length = 15 * scale_factor;\nleg_radius = 2 * scale_factor;\ntail_length = 40 * scale_factor;\ntail_radius = 4 * scale_factor;\n\n// Main model\nunion() {\n    // Serpentine body\n    color(\"darkgreen\")\n    difference() {\n        // Main body tube\n        hull() {\n            translate([0, 0, 0])\n                sphere(r = body_radius);\n            translate([body_length, 0, 0])\n                sphere(r = body_radius * 0.8);\n        }\n        // Hollow center for printing\n        hull() {\n            translate([0, 0, 0])\n                sphere(r = body_radius - 2);\n            translate([body_length, 0, 0])\n                sphere(r = body_radius * 0.8 - 2);\n        }\n    }\n    \n    // Neck connecting to head\n    translate([body_length, 0, 0])\n        rotate([0, 20, 0])\n        color(\"darkgreen\")\n        cylinder(h = 8 * scale_factor, r1 = body_radius * 0.8, r2 = head_radius, $fn = 16);\n    \n    // Head\n    translate([body_length + 8 * scale_factor, 0, 3 * scale_factor])\n        rotate([0, 20, 0])\n        color(\"darkgreen\")\n        difference() {\n            hull() {\n                sphere(r = head_radius);\n                translate([head_length, 0, 0])\n                    sphere(r = head_radius * 0.7);\n            }\n            // Eye sockets\n            translate([head_length * 0.7, head_radius * 0.6, head_radius * 0.4])\n                sphere(r = 1.5 * scale_factor);\n            translate([head_length * 0.7, -head_radius * 0.6, head_radius * 0.4])\n                sphere(r = 1.5 * scale_factor);\n            // Mouth opening\n            translate([head_length * 0.8, 0, -head_radius * 0.5])\n                cube([head_length * 0.5, head_radius * 1.2, head_radius * 0.5], center = true);\n            // Hollow head for printing\n            hull() {\n                sphere(r = head_radius - 2);\n                translate([head_length, 0, 0])\n                    sphere(r = head_radius * 0.7 - 2);\n            }\n        }\n    \n    // Tail\n    translate([-tail_length * 0.7, 0, 0])\n        rotate([0, -10, 0])\n        color(\"darkgreen\")\n        difference() {\n            hull() {\n                sphere(r = tail_radius);\n                translate([tail_length, 0, 0])\n                    sphere(r = tail_radius * 0.3);\n            }\n            // Hollow tail for printing\n            hull() {\n                sphere(r = tail_radius - 2);\n                translate([tail_length, 0, 0])\n                    sphere(r = tail_radius * 0.3 - 2);\n            }\n        }\n    \n    // Wings\n    module wing() {\n        difference() {\n            // Main wing membrane\n            hull() {\n                translate([0, 0, 0])\n                    cube([wing_span * 0.3, wing_thickness, wing_span * 0.2]);\n                translate([wing_span * 0.6, 0, wing_span * 0.4])\n                    cube([wing_thickness, wing_thickness, wing_span * 0.1]);\n                translate([wing_span * 0.8, 0, wing_span * 0.2])\n                    cube([wing_thickness, wing_thickness, wing_span * 0.05]);\n            }\n            \n            // Wing holes for membrane effect\n            for (i = [1:4]) {\n                translate([wing_span * 0.2 * i, 0, wing_span * 0.1 * i])\n                    rotate([0, 45, 0])\n                    cylinder(h = wing_thickness + 1, r = wing_span * 0.05, $fn = 8);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([body_length * 0.3, 0, body_radius * 0.5])\n        rotate([0, 0, -30])\n        rotate([0, -30, 0])\n        color(\"darkgreen\")\n        wing();\n    \n    // Right wing\n    translate([body_length * 0.3, 0, body_radius * 0.5])\n        rotate([0, 0, 30])\n        mirror([0, 1, 0])\n        rotate([0, -30, 0])\n        color(\"darkgreen\")\n        wing();\n    \n    // Legs\n    module leg() {\n        color(\"darkgreen\")\n        difference() {\n            // Upper leg\n            translate([0, 0, -leg_length / 2])\n                cylinder(h = leg_length * 0.6, r = leg_radius, $fn = 8);\n            // Hollow\n            translate([0, 0, -leg_length / 2])\n                cylinder(h = leg_length * 0.6, r = leg_radius - 1.5, $fn = 8);\n        }\n        \n        // Lower leg\n        translate([0, 0, -leg_length * 0.9])\n            rotate([30, 0, 0])\n            color(\"darkgreen\")\n            difference() {\n                cylinder(h = leg_length * 0.5, r = leg_radius * 0.8, $fn = 8);\n                cylinder(h = leg_length * 0.5, r = leg_radius * 0.8 - 1.5, $fn = 8);\n            }\n        \n        // Foot\n        translate([0, 0, -leg_length * 1.2])\n            rotate([60, 0, 0])\n            color(\"darkgreen\")\n            hull() {\n                cube([leg_radius * 2, leg_radius * 0.8, leg_radius * 0.5], center = true);\n                translate([leg_radius * 1.5, 0, -leg_radius * 0.3])\n                    cube([leg_radius * 0.8, leg_radius * 0.6, leg_radius * 0.3], center = true);\n            }\n    }\n    \n    // Front legs\n    translate([body_length * 0.8, body_radius * 0.8, -body_radius])\n        rotate([0, 10, -20])\n        leg();\n    \n    translate([body_length * 0.8, -body_radius * 0.8, -body_radius])\n        rotate([0, 10, 20])\n        leg();\n    \n    // Rear legs\n    translate([body_length * 0.2, body_radius * 0.8, -body_radius])\n        rotate([0, -10, -20])\n        leg();\n    \n    translate([body_length * 0.2, -body_radius * 0.8, -body_radius])\n        rotate([0, -10, 20])\n        leg();\n}",
    "renders": true
  },
  {
    "household_item": "zitiron",
    "openscad_code": "// Zitiron (medieval sea-knight) – realistic style, medium complexity\n// Overall height ≈ 65 mm, fits on most FDM printers\n// Walls ≥ 1.2 mm everywhere, no extreme overhangs\n\n$fn = 36;\n\nmodule helm() {\n    // Great helm with ocularium\n    difference() {\n        union() {\n            // Main barrel\n            cylinder(h = 22, d1 = 18, d2 = 16, center = true);\n            // Top ridge\n            translate([0, 0, 11])\n                cube([22, 8, 3], center = true);\n        }\n        // Eye slit\n        translate([0, 0, 5])\n            cube([16, 2, 4], center = true);\n        // Breathing holes\n        for (z = [-8, -12, -16])\n            translate([0, 8.5, z])\n                rotate([90, 0, 0])\n                    cylinder(h = 1, d = 1.5);\n    }\n}\n\nmodule torso() {\n    // Barrel-shaped cuirass\n    difference() {\n        cylinder(h = 25, d1 = 24, d2 = 26, center = true);\n        // Neck hole\n        translate([0, 0, 12.5])\n            cylinder(h = 3, d = 10);\n        // Waist hollow for articulation\n        translate([0, 0, -15])\n            cylinder(h = 30, d = 20);\n    }\n}\n\nmodule arms() {\n    // Simple cylindrical arms with round pauldrons\n    for (side = [-1, 1]) {\n        translate([side * 14, 0, 8])\n            rotate([0, 15 * side, 0])\n                union() {\n                    // Upper arm\n                    cylinder(h = 20, d = 8);\n                    // Pauldron\n                    translate([0, 0, 2])\n                        sphere(d = 12);\n                }\n    }\n}\n\nmodule legs() {\n    // Armored tail-fin legs\n    for (side = [-1, 1]) {\n        translate([side * 6, -2, -28])\n            rotate([0, 5 * side, 0])\n                difference() {\n                    // Scaled cylinder for leg segment\n                    cylinder(h = 22, d1 = 10, d2 = 6);\n                    // Groove for mobility\n                    translate([0, 0, 11])\n                        cube([6, 12, 22], center = true);\n                }\n    }\n}\n\nmodule tail() {\n    // Fish tail with segmented plates\n    union() {\n        // Base tail\n        translate([0, 0, -40])\n            scale([1, 0.3, 1])\n                sphere(d = 20);\n        // Segmented armor\n        for (i = [1:3]) {\n            translate([0, 0, -40 - i * 6])\n                scale([1 - i * 0.15, 0.25, 1 - i * 0.15])\n                    sphere(d = 22);\n        }\n    }\n}\n\nmodule sword() {\n    // Straight arming sword\n    translate([0, 18, 0])\n        rotate([90, 0, 0])\n            union() {\n                // Blade\n                linear_extrude(height = 25, center = true)\n                    polygon([[0, 0], [1.5, 0], [0.75, 25], [0, 25]]);\n                // Guard\n                translate([0, 0, 12.5])\n                    cube([12, 3, 2], center = true);\n                // Grip\n                translate([0, 0, 6])\n                    cylinder(h = 10, d = 4);\n                // Pommel\n                translate([0, 0, 0])\n                    sphere(d = 6);\n            }\n}\n\nmodule shield() {\n    // Heater shield\n    translate([0, -18, 0])\n        rotate([90, 0, 0])\n            difference() {\n                // Main body\n                scale([1, 1.2, 0.8])\n                    sphere(d = 18);\n                // Boss\n                translate([0, 0, 0])\n                    sphere(d = 6);\n                // Strap slot\n                translate([0, -5, 0])\n                    cube([2, 10, 3], center = true);\n            }\n}\n\n// Assembly\nunion() {\n    helm();\n    translate([0, 0, 11])\n        torso();\n    arms();\n    legs();\n    tail();\n    sword();\n    shield();\n}",
    "renders": true
  },
  {
    "household_item": "abath",
    "openscad_code": "// Realistic 3D-printable abath (medium complexity)\n// External dimensions ~80 mm long\n\n// Overall parameters\nbath_length = 80;\nbath_width  = 40;\nbath_height = 25;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Base outer shell with rounded edges\nmodule bath_shell() {\n    hull() {\n        translate([ wall,  wall, 0]) cylinder(r = 6, h = bath_height, $fn = 32);\n        translate([ bath_length-wall,  wall, 0]) cylinder(r = 6, h = bath_height, $fn = 32);\n        translate([ bath_length-wall, bath_width-wall, 0]) cylinder(r = 6, h = bath_height, $fn = 32);\n        translate([ wall, bath_width-wall, 0]) cylinder(r = 6, h = bath_height, $fn = 32);\n    }\n}\n\n// Interior hollow volume\nmodule hollow() {\n    translate([0, 0, wall]) {\n        hull() {\n            translate([ wall+3,  wall+3, 0]) \n                cylinder(r = 4.5, h = bath_height-wall*2, $fn = 32);\n            translate([ bath_length-wall-3,  wall+3, 0]) \n                cylinder(r = 4.5, h = bath_height-wall*2, $fn = 32);\n            translate([ bath_length-wall-3, bath_width-wall-3, 0]) \n                cylinder(r = 4.5, h = bath_height-wall*2, $fn = 32);\n            translate([ wall+3, bath_width-wall-3, 0]) \n                cylinder(r = 4.5, h = bath_height-wall*2, $fn = 32);\n        }\n    }\n}\n\n// Realistic plughole with slight recess\nmodule plughole() {\n    difference() {\n        // Recess\n        translate([bath_length/2, bath_width/2, bath_height-wall-1.5])\n            cylinder(h = 1.5, r1 = 4, r2 = 3.5, $fn = 32);\n        // Hole\n        translate([bath_length/2, bath_width/2, bath_height-wall-2])\n            cylinder(h = 3, r = 1.5, $fn = 16);\n    }\n}\n\n// Small overflow slot\nmodule overflow() {\n    translate([bath_length-wall-5, bath_width/2-2, wall*2])\n        cube([wall, 4, 3]);\n}\n\n// Realistic feet (four simple cones for stability)\nmodule feet() {\n    for(x=[10, bath_length-10], y=[10, bath_width-10]) {\n        translate([x, y, 0]) \n            cylinder(h1 = 0, h2 = 3, r1 = 4, r2 = 2, $fn = 16);\n    }\n}\n\n// Rim lip for stiffness\nmodule rim() {\n    difference() {\n        translate([0, 0, bath_height-wall])\n            bath_shell();\n        translate([0, 0, bath_height-wall+0.01])\n            scale([0.9, 0.9, 1])\n                bath_shell();\n    }\n}\n\n// Final assembly\ndifference() {\n    union() {\n        bath_shell();\n        rim();\n        feet();\n    }\n    hollow();\n    plughole();\n    overflow();\n}",
    "renders": true
  },
  {
    "household_item": "adlet",
    "openscad_code": "// Adlet (Inuit wolf-like creature) - realistic medium complexity\n// Overall dimensions: ~70mm length, 40mm height, 25mm width\n\nmodule body() {\n    // Main torso - elongated oval shape\n    translate([0, 0, 10])\n    scale([1.5, 0.8, 0.9])\n    sphere(15, $fn=32);\n    \n    // Chest bulge\n    translate([10, 0, 10])\n    scale([0.8, 1, 0.7])\n    sphere(12, $fn=24);\n}\n\nmodule head() {\n    // Wolf-like snout\n    translate([-25, 0, 15])\n    rotate([0, 10, 0])\n    scale([1.2, 0.6, 0.6])\n    cylinder(h=20, r1=8, r2=4, $fn=16);\n    \n    // Main head sphere\n    translate([-18, 0, 20])\n    sphere(12, $fn=32);\n    \n    // Ears - pointed\n    for(y = [-6, 6]) {\n        translate([-15, y, 28])\n        rotate([30, 0, y > 0 ? -10 : 10])\n        scale([0.3, 1, 1.5])\n        cylinder(h=8, r1=2, r2=0.5, $fn=8);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(x = [8, 15]) {\n        translate([x, -8, 0])\n        rotate([0, -10, 0])\n        cylinder(h=12, r1=3, r2=2.5, $fn=12);\n        \n        translate([x, 8, 0])\n        rotate([0, -10, 0])\n        cylinder(h=12, r1=3, r2=2.5, $fn=12);\n    }\n    \n    // Back legs - more muscular\n    for(x = [-8, -15]) {\n        translate([x, -6, 0])\n        rotate([0, 10, 0])\n        scale([1, 1.2, 1])\n        cylinder(h=14, r1=4, r2=3, $fn=12);\n        \n        translate([x, 6, 0])\n        rotate([0, 10, 0])\n        scale([1, 1.2, 1])\n        cylinder(h=14, r1=4, r2=3, $fn=12);\n    }\n    \n    // Paws - simple blocks\n    for(x = [-15, -8, 8, 15])\n    for(y = [-8, 8]) {\n        translate([x, y, -2])\n        scale([0.8, 1, 0.5])\n        sphere(3, $fn=8);\n    }\n}\n\nmodule tail() {\n    // Curved tail\n    translate([-20, 0, 12])\n    rotate([0, 0, -30])\n    scale([1, 0.8, 0.8])\n    cylinder(h=18, r1=6, r2=3, $fn=16);\n    \n    // Tail tip\n    translate([-35, -8, 8])\n    sphere(3, $fn=12);\n}\n\nmodule facial_features() {\n    // Eyes\n    for(y = [-4, 4]) {\n        translate([-23, y, 22])\n        scale([0.8, 1, 1])\n        sphere(2, $fn=12);\n    }\n    \n    // Nose\n    translate([-32, 0, 17])\n    sphere(1.5, $fn=8);\n    \n    // Mouth line\n    translate([-30, 0, 13])\n    rotate([90, 0, 0])\n    scale([0.2, 1, 0.2])\n    cylinder(h=6, r1=0.5, r2=0.5, $fn=4);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    facial_features();\n}",
    "renders": true
  },
  {
    "household_item": "ahool",
    "openscad_code": "// Realistic Ahool (Giant Bat) - Medium Complexity\n// Wingspan ~80 mm, body ~35 mm, printable without support\n\n$fn = 64;  // Smooth curves for realistic look\n\nmodule body() {\n    // Main torso - ellipsoid\n    translate([-5,0,15])\n    scale([1.2, 0.8, 1.5])\n    sphere(10);\n    \n    // Chest protrusion\n    translate([0,0,18])\n    scale([0.9, 1.1, 0.8])\n    sphere(6);\n    \n    // Abdomen\n    translate([-8,0,8])\n    scale([1, 0.7, 1.2])\n    sphere(7);\n}\n\nmodule head() {\n    // Skull\n    translate([10,0,22])\n    scale([1.3, 1, 1.1])\n    sphere(8);\n    \n    // Snout\n    translate([16,0,22])\n    scale([0.8, 0.6, 0.5])\n    rotate([0,20,0])\n    cylinder(6, 4, 2);\n    \n    // Ears - large pointed\n    translate([8, 8, 29])\n    rotate([0,0,-25])\n    linear_extrude(height=2)\n    polygon(points=[[0,0],[4,10],[0,15],[-4,10]]);\n    \n    translate([8, -8, 29])\n    rotate([0,0,25])\n    mirror([0,1,0])\n    linear_extrude(height=2)\n    polygon(points=[[0,0],[4,10],[0,15],[-4,10]]);\n    \n    // Eyes\n    translate([14, 3, 24])\n    sphere(1.5);\n    \n    translate([14, -3, 24])\n    sphere(1.5);\n}\n\nmodule wing() {\n    // Upper arm\n    translate([0,0,20])\n    rotate([0,0,-45])\n    cylinder(15, 2, 1.5);\n    \n    // Forearm\n    translate([10,-10,20])\n    rotate([0,0,-90])\n    cylinder(20, 1.5, 1);\n    \n    // Wing membrane\n    translate([0,-12,20])\n    rotate([90,0,0])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0,0],\n        [25,-35],\n        [35,-25],\n        [35,0],\n        [25,25],\n        [0,0]\n    ]);\n}\n\nmodule legs() {\n    // Left leg\n    translate([-5, 4, 5])\n    cylinder(12, 1.5, 1);\n    \n    translate([-5, 4, -6])\n    sphere(2);\n    \n    // Left foot\n    translate([-5, 4, -8])\n    rotate([0,90,0])\n    cylinder(4, 1, 0.5);\n    \n    // Right leg\n    translate([-5, -4, 5])\n    cylinder(12, 1.5, 1);\n    \n    translate([-5, -4, -6])\n    sphere(2);\n    \n    // Right foot\n    translate([-5, -4, -8])\n    rotate([0,90,0])\n    cylinder(4, 1, 0.5);\n}\n\nmodule tail() {\n    // Tail membrane support\n    translate([-12,0,12])\n    rotate([0,10,0])\n    cylinder(15, 2, 0.5);\n    \n    // Tail membrane\n    translate([-12,0,12])\n    rotate([90,0,0])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0,0],\n        [-10,12],\n        [-20,10],\n        [-25,0],\n        [-20,-10],\n        [-10,-12],\n        [0,0]\n    ]);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Left wing\n    wing();\n    \n    // Right wing\n    mirror([0,1,0])\n    wing();\n    \n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "akhlut",
    "openscad_code": "// Akhlut - medium complexity realistic style\n// An orca-wolf hybrid creature from Inuit mythology\n\n// Basic parameters\n$fn = 32;\noverall_scale = 1.0;\n\n// Main body\nmodule body() {\n    // Torso - elongated oval\n    scale([2.5, 1.2, 1]) \n        sphere(10);\n    \n    // Belly - flatter underside\n    translate([0, 0, -8])\n        scale([2.3, 1.1, 0.5])\n            sphere(8);\n}\n\n// Wolf head\nmodule wolf_head() {\n    // Main skull\n    translate([-20, 0, 5])\n        rotate([0, 10, 0])\n            scale([1.2, 0.9, 1])\n                sphere(7);\n    \n    // Snout\n    translate([-30, 0, 3])\n        rotate([0, 10, 0])\n            scale([1.5, 0.6, 0.7])\n                sphere(5);\n    \n    // Nose\n    translate([-35, 0, 2.5])\n        sphere(2);\n    \n    // Ears\n    for(x = [-1, 1]) {\n        translate([-22, x*5, 10])\n            rotate([x*20, 0, 0])\n                cylinder(h=4, r1=3, r2=1);\n    }\n}\n\n// Orca tail\nmodule orca_tail() {\n    // Tail stock\n    translate([20, 0, -2])\n        rotate([0, -10, 0])\n            scale([1.5, 0.8, 0.8])\n                cylinder(h=8, r=6);\n    \n    // Tail flukes - left and right\n    for(y = [-1, 1]) {\n        translate([28, y*8, -4])\n            rotate([0, -20, y*20])\n                scale([0.3, 1.5, 0.1])\n                    cube([10, 8, 2]);\n    }\n    \n    // Tail notch\n    translate([30, 0, -3])\n        rotate([0, 0, 90])\n            cylinder(h=8, r=2);\n}\n\n// Flippers (front limbs)\nmodule flippers() {\n    for(side = [-1, 1]) {\n        translate([-5, side*12, -5])\n            rotate([0, side*10, 0])\n                scale([1.5, 0.5, 0.2])\n                    sphere(5);\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    translate([5, 0, 12])\n        rotate([0, 0, 0])\n            linear_extrude(height=0.1)\n                polygon(points=[\n                    [0, 0],\n                    [-3, 8],\n                    [3, 8],\n                    [0, 0]\n                ]);\n    \n    // Thicken the fin\n    translate([5, 0, 12])\n        scale([1, 0.1, 1])\n            cube([6, 0.5, 8]);\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        translate([-25, side*4, 5])\n            sphere(1.5);\n    }\n}\n\n// Teeth - simple cones\nmodule teeth() {\n    for(i = [0:4]) {\n        translate([-32 + i*1.5, 0, 1.5])\n            cylinder(h=2, r1=0.5, r2=0);\n    }\n}\n\n// Orca color pattern\nmodule color_pattern() {\n    // White eye patch\n    translate([-25, -4, 5])\n        scale([1.2, 1.2, 0.5])\n            sphere(2);\n    \n    // White belly patch\n    translate([0, 0, -7])\n        scale([2, 1, 0.5])\n            sphere(8);\n}\n\n// Combine all parts\nunion() {\n    scale(overall_scale) {\n        // Main body parts\n        body();\n        wolf_head();\n        orca_tail();\n        flippers();\n        dorsal_fin();\n        \n        // Details\n        eyes();\n        teeth();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "alicanto",
    "openscad_code": "// Alicanto – a medium-complexity realistic bird\n// Overall length ~90 mm, wingspan ~95 mm, height ~45 mm\n// Designed for FDM printing: no steep overhangs, 1 mm wall thickness assumed\n\n$fn = 40;               // global resolution\n\n// Parameters\nbody_len = 60;\nbody_h   = 30;\nbody_w   = 25;\n\nwing_span = 95;\nwing_chord = 35;\nwing_t     = 2;\n\ntail_len  = 22;\ntail_h    = 18;\n\nneck_len  = 12;\nneck_d    = 10;\n\nhead_len  = 18;\nhead_h    = 15;\n\nbeak_len  = 8;\nbeak_d    = 4;\n\nleg_h     = 15;\nleg_d     = 4;\nfoot_len  = 12;\nfoot_w    = 5;\n\neye_d     = 4;\n\ngold_chip_w = 5;\ngold_chip_h = 1;\n\n// Main assembly\ndifference() {\n    union() {\n        body();\n        tail();\n        neck_and_head();\n        wing_left();\n        wing_right();\n        legs();\n    }\n    // Eye cavities\n    translate([body_len/2 + head_len/2 - 3,  body_w/4, head_h/2])\n        rotate([0,90,0])\n        cylinder(d = eye_d + 1, h = head_w, $fn=16);\n\n    translate([body_len/2 + head_len/2 - 3, -body_w/4, head_h/2])\n        rotate([0,90,0])\n        cylinder(d = eye_d + 1, h = head_w, $fn=16);\n}\n\n// Body as stretched ellipsoid\nmodule body() {\n    scale([1, 0.7, 0.6])\n    translate([-body_len/4,0,0])\n    sphere(d = body_len);\n}\n\n// Fan-shaped tail\nmodule tail() {\n    difference() {\n        hull() {\n            translate([body_len/2 - 5, 0, body_h/4])\n                cube([tail_len, tail_h*0.8, wing_t*1.5]);\n            translate([body_len/2 + tail_len - 5, 0, body_h/4])\n                scale([1,1.3,1])\n                sphere(d = tail_h*0.9);\n        }\n        // Feather gaps\n        for(i = [-2:1:2])\n            translate([body_len/2 + tail_len/2, i*4, body_h/4])\n                rotate([0,0,i*5])\n                cube([tail_len*1.2, 1, wing_t*3], center=true);\n    }\n}\n\n// Neck and head\nmodule neck_and_head() {\n    // Neck\n    translate([body_len/2 - neck_len/2, 0, body_h/2])\n        rotate([0,-15,0])\n        cylinder(h = neck_len, d = neck_d, center=true);\n\n    // Head\n    translate([body_len/2 + head_len/2, 0, body_h/2 + 3])\n        scale([1,0.8,0.9])\n        sphere(d = head_h);\n\n    // Beak\n    translate([body_len/2 + head_len + beak_len/2, 0, body_h/2 + 2])\n        rotate([0,-10,0])\n        cylinder(h1 = beak_len, h2 = beak_len*0.3, r1 = beak_d/2, r2 = 0);\n}\n\n// Left wing\nmodule wing_left() {\n    translate([body_len/2 - 5, body_w/2 + 1, body_h/2])\n        rotate([0,0,-20])\n        wing_shape();\n}\n\n// Right wing\nmodule wing_right() {\n    mirror([0,1,0])\n    translate([body_len/2 - 5, body_w/2 + 1, body_h/2])\n        rotate([0,0,-20])\n        wing_shape();\n}\n\n// Wing geometry\nmodule wing_shape() {\n    difference() {\n        hull() {\n            cube([wing_chord*0.3, 2, wing_t], center=true);\n            translate([wing_chord, wing_span/2 - 5, 0])\n                scale([0.3,0.5,1])\n                sphere(d = wing_t*4);\n        }\n        // Primary feather notches\n        for(i = [1:3])\n            translate([wing_chord*0.5 + i*8, wing_span/2 - 5 - i*5, 0])\n                rotate([0,0,30 - i*5])\n                cube([10, 3, wing_t*2], center=true);\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    // Left leg\n    translate([body_len/2 - 5, body_w/4, -leg_h/2])\n        cylinder(h = leg_h, d = leg_d, center=true);\n\n    // Left foot\n    translate([body_len/2 - 5 - foot_len/2, body_w/4 + foot_w/2, -leg_h - 1])\n        cube([foot_len, foot_w, 2]);\n\n    // Right leg\n    translate([body_len/2 - 5, -body_w/4, -leg_h/2])\n        cylinder(h = leg_h, d = leg_d, center=true);\n\n    // Right foot\n    translate([body_len/2 - 5 - foot_len/2, -body_w/4 - foot_w/2, -leg_h - 1])\n        cube([foot_len, foot_w, 2]);\n}\n\n// Gold chips embedded in wings\nmodule gold_chips() {\n    color(\"gold\")\n    for(side = [-1,1])\n    translate([body_len/2 + wing_chord*0.6, side*(wing_span/2 - 8), wing_t/2 + 0.1])\n        cube([gold_chip_w, gold_chip_w, gold_chip_h]);\n}\n\n// Optional: render the gold chips separately if preferred\n// gold_chips();",
    "renders": true
  },
  {
    "household_item": "almas",
    "openscad_code": "// Almas (Soviet space station) in realistic style\n// Medium complexity model suitable for 3D printing\n\n$fn = 36;\n\n// Main module\nmodule almas() {\n    // Central core module\n    central_core();\n    \n    // Solar panels\n    solar_panels();\n    \n    // Docking module\n    docking_module();\n    \n    // Antenna array\n    antenna_array();\n    \n    // Thruster blocks\n    thruster_blocks();\n}\n\n// Central pressurized core\nmodule central_core() {\n    // Main cylindrical body\n    rotate([0, 0, 0]) {\n        cylinder(h=80, d=40, center=true);\n        \n        // End caps\n        translate([0, 0, 40]) sphere(d=40);\n        translate([0, 0, -40]) sphere(d=40);\n        \n        // Equipment rings\n        for(z=[-30, -10, 10, 30]) {\n            translate([0, 0, z]) {\n                difference() {\n                    cylinder(h=8, d=44, center=true);\n                    cylinder(h=10, d=38, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Solar panel arrays\nmodule solar_panels() {\n    // Left panel array\n    translate([-40, 0, 20]) {\n        rotate([0, 90, 0]) {\n            // Panel frame\n            cube([60, 25, 2], center=true);\n            \n            // Panel segments\n            for(i=[-20, -10, 0, 10, 20]) {\n                translate([i, 0, 0]) {\n                    color(\"darkblue\") cube([8, 23, 1]);\n                }\n            }\n            \n            // Hinge mechanism\n            cylinder(h=10, d=4, center=true);\n        }\n    }\n    \n    // Right panel array (mirrored)\n    mirror([1, 0, 0]) {\n        translate([-40, 0, 20]) {\n            rotate([0, 90, 0]) {\n                cube([60, 25, 2], center=true);\n                \n                for(i=[-20, -10, 0, 10, 20]) {\n                    translate([i, 0, 0]) {\n                        color(\"darkblue\") cube([8, 23, 1]);\n                    }\n                }\n                \n                cylinder(h=10, d=4, center=true);\n            }\n        }\n    }\n}\n\n// Docking module\nmodule docking_module() {\n    translate([0, 0, 50]) {\n        // Docking port cone\n        cylinder(h1=15, h2=5, r1=10, r2=5);\n        \n        // Docking collar\n        translate([0, 0, 5]) {\n            difference() {\n                cylinder(h=8, d=22);\n                cylinder(h=10, d=16);\n            }\n        }\n        \n        // Latching mechanism\n        for(angle=[0:120:359]) {\n            rotate([0, 0, angle]) {\n                translate([9, 0, 2]) {\n                    cube([4, 3, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Antenna array\nmodule antenna_array() {\n    // Main antenna mast\n    translate([0, 0, -55]) {\n        cylinder(h=25, d=3);\n        \n        // Yagi antenna elements\n        for(i=[-10, -5, 0, 5, 10]) {\n            translate([0, 0, i]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=20, d=1);\n                }\n            }\n        }\n        \n        // Parabolic dish\n        translate([15, 0, -5]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    sphere(d=10);\n                    translate([5, 0, 0]) sphere(d=10);\n                }\n            }\n        }\n    }\n}\n\n// Thruster blocks\nmodule thruster_blocks() {\n    // Position thrusters at 90 degree intervals\n    for(angle=[0:90:270]) {\n        rotate([0, 0, angle]) {\n            translate([20, 0, 0]) {\n                // Thruster housing\n                difference() {\n                    cube([8, 12, 12], center=true);\n                    cylinder(h=15, d=6, center=true);\n                }\n                \n                // Thruster nozzles\n                translate([4, 0, 0]) {\n                    cylinder(h=6, d1=6, d2=4);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nalmas();",
    "renders": true
  },
  {
    "household_item": "amhuluk",
    "openscad_code": "// Amhuluk - A realistic medium-complexity 3D printable model\n// Based on the mythical dragon-like creature with amphibian features\n// Overall dimensions: ~80mm tall, 65mm long, 45mm wide\n\n$fn = 32;\n\n// Main body module\nmodule body() {\n    // Central torso - elongated oval\n    translate([0, 0, 25])\n    scale([1.5, 0.8, 1.2])\n    sphere(r=20);\n    \n    // Lower belly - flatter section\n    translate([0, 0, 15])\n    scale([1.4, 0.7, 0.6])\n    sphere(r=18);\n}\n\n// Head module with dragon-like features\nmodule head() {\n    // Main head shape\n    translate([0, 0, 45])\n    rotate([0, 0, 0])\n    scale([1.2, 0.9, 1])\n    sphere(r=15);\n    \n    // Snout extension\n    translate([15, 0, 43])\n    scale([1.5, 0.8, 0.7])\n    sphere(r=10);\n    \n    // Eye sockets\n    for (x = [-1, 1]) {\n        translate([x * 8, 12, 48])\n        difference() {\n            sphere(r=4);\n            translate([0, 0, -2])\n            sphere(r=4.5);\n        }\n    }\n    \n    // Nostrils\n    for (x = [-1, 1]) {\n        translate([18, x * 3, 42])\n        rotate([30, 0, 0])\n        cylinder(h=5, r1=2, r2=1);\n    }\n    \n    // Horns\n    for (x = [-1, 1]) {\n        translate([x * 10, 12, 55])\n        rotate([0, x * 10, 0])\n        cylinder(h=8, r1=3, r2=1);\n    }\n}\n\n// Tail segments\nmodule tail() {\n    for (i = [0:4]) {\n        translate([-25 - i * 8, 0, 25 - i * 3])\n        scale([1 - i * 0.15, 1 - i * 0.1, 1 - i * 0.1])\n        sphere(r=18 - i * 3);\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    // Upper leg\n    translate([side * 12, 0, 20])\n    rotate([0, side * 20, 0])\n    cylinder(h=15, r=6);\n    \n    // Lower leg\n    translate([side * 18, 0, 8])\n    rotate([0, side * 30, 0])\n    cylinder(h=12, r=5);\n    \n    // Webbed foot\n    translate([side * 25, 0, 2])\n    scale([1.5, 1.2, 0.5])\n    sphere(r=6);\n    \n    // Toes\n    for (t = [-1, 0, 1]) {\n        translate([side * 28, t * 4, 1])\n        rotate([0, 10, 0])\n        cylinder(h=6, r=2);\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    // Wing base\n    translate([side * 15, 0, 35])\n    rotate([0, 0, side * -30])\n    cylinder(h=8, r=4);\n    \n    // Wing membrane supports\n    for (i = [0:2]) {\n        translate([side * (20 + i * 8), 0, 35 - i * 5])\n        rotate([0, 0, side * (-30 - i * 10)])\n        cylinder(h=10 + i * 5, r=1.5);\n    }\n    \n    // Wing membrane (simplified)\n    hull() {\n        translate([side * 20, 0, 35])\n        sphere(r=1);\n        translate([side * 36, 0, 20])\n        sphere(r=1);\n    }\n}\n\n// Spine ridge\nmodule spine() {\n    for (i = [0:8]) {\n        translate([-20 + i * 5, 0, 30 + abs(i - 4) * 2])\n        cylinder(h=3, r=2);\n    }\n}\n\n// Assemble the complete model\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Legs\n    for (s = [-1, 1]) {\n        leg(s);\n    }\n    \n    // Wings\n    for (s = [-1, 1]) {\n        wing(s);\n    }\n    \n    spine();\n}",
    "renders": true
  },
  {
    "household_item": "anqa",
    "openscad_code": "// Anqa (Persian Phoenix) - Realistic Medium Complexity\n// Wingspan ≈ 80 mm, printable in one piece\n\n// Overall dimensions\nwing_span = 80;\nbody_length = 35;\nbody_height = 20;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body module\nmodule body() {\n    // Torso\n    union() {\n        // Chest\n        translate([0, 0, body_height/2])\n            scale([1, 1.3, 1.4])\n                sphere(d=body_length, $fn=32);\n        \n        // Abdomen\n        translate([0, -body_length/3, body_height/2-5])\n            scale([0.8, 1.2, 1.2])\n                sphere(d=body_length*0.8, $fn=32);\n        \n        // Back ridge\n        for(i=[-2:1:2]) {\n            translate([0, i*5, body_height/2+5-i*2])\n                rotate([90, 0, 0])\n                    cylinder(h=8-i*2, d1=6-i, d2=2, $fn=16);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    translate([0, body_length/2+5, body_height/2+5])\n    union() {\n        // Skull\n        scale([0.8, 1.2, 1])\n            sphere(d=15, $fn=32);\n        \n        // Beak\n        translate([0, 8, -2])\n            rotate([-20, 0, 0])\n                cylinder(h=12, d1=8, d2=3, $fn=16);\n        \n        // Crest feathers\n        for(i=[-1:0.5:1]) {\n            translate([i*3, 0, 6])\n                rotate([10+i*5, 0, 0])\n                    cylinder(h=8-abs(i*3), d=2, $fn=8);\n        }\n        \n        // Eye sockets\n        for(side=[-1, 1]) {\n            translate([side*4, 3, 0])\n                rotate([0, 0, 10])\n                    sphere(d=4, $fn=16);\n        }\n    }\n}\n\n// Wing module\nmodule wing(angle=0, side=1) {\n    rotate([0, 0, side*angle])\n    translate([side*body_length/3, -body_length/4, body_height/2+5])\n    rotate([0, 0, -30*side])\n    union() {\n        // Main wing\n        difference() {\n            // Wing surface\n            scale([1, 2.5, 0.1])\n                sphere(d=wing_span/2, $fn=64);\n            \n            // Cutout for feather detail\n            for(i=[0:4]) {\n                translate([0, -i*8, -1])\n                    scale([0.9-i*0.05, 0.8-i*0.05, 2])\n                        sphere(d=wing_span/2-i*5, $fn=64);\n            }\n        }\n        \n        // Primary feathers\n        for(i=[0:1:4]) {\n            rotate([0, 0, -20*i])\n            translate([i*3-5, -wing_span/3-i*5, -0.5])\n                scale([1, 0.15, 0.3])\n                    cylinder(h=20-i*2, d=8, $fn=8);\n        }\n        \n        // Secondary feathers\n        for(i=[0:1:3]) {\n            rotate([0, 0, 20*i])\n            translate([-i*2-3, -wing_span/4-i*4, -0.5])\n                scale([0.8, 0.15, 0.25])\n                    cylinder(h=15-i*2, d=6, $fn=8);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([0, -body_length/2-10, body_height/2-2])\n    union() {\n        // Central tail\n        rotate([30, 0, 0])\n            scale([1, 1.5, 0.5])\n                sphere(d=20, $fn=32);\n        \n        // Tail feathers\n        for(i=[-4:1:4]) {\n            rotate([0, i*10, 0])\n            translate([i*2, -12-i*2, 0])\n                rotate([0, i*5, 0])\n                    scale([0.3, 2, 0.1])\n                        cylinder(h=25-abs(i*2), d=8, $fn=8);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side=1) {\n    translate([side*body_length/4, -body_length/3, 0])\n    union() {\n        // Thigh\n        rotate([0, side*20, 0])\n            cylinder(h=8, d=4, $fn=16);\n        \n        // Lower leg\n        translate([0, 0, -8])\n            rotate([0, side*20, 0])\n                cylinder(h=10, d=3, $fn=16);\n        \n        // Foot\n        translate([0, -5, -18])\n        union() {\n            // Main foot\n            scale([1, 2, 0.5])\n                sphere(d=6, $fn=16);\n            \n            // Toes\n            for(j=[-1:1:1]) {\n                translate([j*2, 4, 0])\n                    scale([0.3, 1, 0.3])\n                        sphere(d=4, $fn=8);\n            }\n            \n            // Rear talon\n            translate([0, -3, 0])\n                scale([0.4, 0.8, 0.4])\n                    sphere(d=5, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wing(15, 1);\n    wing(15, -1);\n    tail();\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "household_item": "antaeus",
    "openscad_code": "// Antaeus (Greek giant) - Realistic style, medium complexity\n// Total height ≈ 80 mm, 3D-printable with no steep overhangs\n\n$fn = 36; // Smooth curves for printing\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\nmodule antaeus() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Feet - wide to stay connected to the earth\n            translate([0, 0, 0]) feet();\n\n            // Legs\n            translate([8, 0, 16]) rotate([0, 0, -5]) leg();\n            translate([-8, 0, 16]) rotate([0, 0, 5]) leg();\n\n            // Torso\n            translate([0, 0, 52]) torso();\n\n            // Arms\n            translate([18, 0, 58]) rotate([0, 0, 30]) arm();\n            translate([-18, 0, 58]) rotate([0, 0, -30]) mirror([1, 0, 0]) arm();\n\n            // Head\n            translate([0, 0, 85]) head();\n        }\n    }\n}\n\nmodule feet() {\n    // Two thick sandal-like feet\n    for (x = [-12, 12])\n        translate([x, 0, 0])\n            scale([1.2, 2, 0.6])\n                sphere(10);\n}\n\nmodule leg() {\n    // Upper leg\n    cylinder(h = 20, d1 = 12, d2 = 10);\n    // Lower leg\n    translate([0, 0, 20])\n        cylinder(h = 18, d1 = 10, d2 = 9);\n    // Knee cap\n    translate([0, 0, 20])\n        sphere(6);\n}\n\nmodule torso() {\n    // Wide chest\n    scale([1.4, 1, 1.4])\n        sphere(20);\n\n    // Abs\n    translate([0, 0, -10])\n        scale([1.2, 0.8, 1.2])\n            cylinder(h = 14, d = 28);\n\n    // Shoulder joints\n    translate([16, 0, 8])\n        sphere(6.5);\n    translate([-16, 0, 8])\n        sphere(6.5);\n}\n\nmodule arm() {\n    // Upper arm\n    cylinder(h = 20, d = 10);\n    // Elbow\n    translate([0, 0, 20])\n        sphere(7);\n    // Forearm\n    translate([0, 0, 20])\n        rotate([0, 20, 0])\n            cylinder(h = 18, d = 9);\n    // Fist\n    translate([0, 0, 38])\n        scale([1.2, 1.8, 1])\n            sphere(7);\n}\n\nmodule head() {\n    // Skull\n    sphere(14);\n\n    // Jaw\n    translate([0, -9, -6])\n        scale([1, 1.4, 0.6])\n            sphere(8);\n\n    // Nose\n    translate([0, -11, 0])\n        scale([0.4, 0.6, 0.6])\n            sphere(4);\n\n    // Eyes\n    for (x = [-5, 5])\n        translate([x, -13, 3])\n            sphere(3);\n\n    // Eyebrow ridge\n    translate([0, -13, 5])\n        scale([1.5, 0.5, 0.4])\n            cube([20, 8, 4], center = true);\n\n    // Beard\n    translate([0, -12, -10])\n        scale([1.1, 1.5, 1.2])\n            sphere(8);\n\n    // Hair\n    difference() {\n        translate([0, 0, 10])\n            scale([1.1, 1.1, 1.4])\n                sphere(14);\n        translate([0, 0, 10])\n            scale([0.9, 0.9, 1.5])\n                sphere(14);\n    }\n}\n\nantaeus();",
    "renders": true
  },
  {
    "household_item": "aspidochelone",
    "openscad_code": "// Aspidochelone (Medieval Whale-Island) - Realistic Medium Complexity\n// Overall dimensions: 80mm length x 55mm width x 25mm height\n\n$fn = 48;\n\nmodule main_body() {\n    // Main whale body - elongated ellipsoid\n    scale([1.3, 1, 0.6])\n        sphere(30);\n}\n\nmodule head_detail() {\n    // Whale head with slight protrusion\n    translate([-38, 0, -5])\n        scale([1.2, 0.9, 0.8])\n            sphere(15);\n    \n    // Mouth line indentation\n    translate([-42, 0, -8])\n        rotate([0, 20, 0])\n            scale([0.3, 1, 0.1])\n                cube([20, 15, 5]);\n}\n\nmodule blowhole() {\n    // Two small cylinders for blowholes\n    for(x = [-3, 3]) {\n        translate([-10, x, 12])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=2, $fn=12);\n    }\n}\n\nmodule eye() {\n    // Eyes on both sides\n    for(y = [-1, 1]) {\n        translate([-25, y*15, 2])\n            sphere(3);\n        \n        // Eye pupils\n        translate([-27, y*15, 4])\n            sphere(1.5);\n    }\n}\n\nmodule dorsal_fin() {\n    // Curved dorsal fin\n    translate([-5, 0, 15])\n        rotate([0, 90, 0])\n            linear_extrude(height=20)\n                polygon(points=[\n                    [0,0], [5,15], [15,20], [25,15], [30,0]\n                ]);\n}\n\nmodule tail() {\n    // Whale tail flukes\n    union() {\n        // Tail stem\n        translate([35, 0, -5])\n            rotate([0, 10, 0])\n                scale([1, 0.5, 0.5])\n                    cylinder(h=20, r=8);\n        \n        // Left fluke\n        translate([48, -15, -8])\n            rotate([0, 0, 30])\n                scale([0.8, 1.2, 0.2])\n                    sphere(12);\n        \n        // Right fluke\n        translate([48, 15, -8])\n            rotate([0, 0, -30])\n                scale([0.8, 1.2, 0.2])\n                    sphere(12);\n    }\n}\n\nmodule shell_texture() {\n    // Barnacle-like details on back\n    for(i = [0:8]) {\n        angle = i * 45;\n        radius = 20 + sin(i*20)*5;\n        translate([cos(angle)*radius, sin(angle)*radius, 12])\n            sphere(1.5 + sin(i*15)*0.5);\n    }\n}\n\nmodule island_plants() {\n    // Small vegetation on back\n    translate([0, 0, 15])\n    union() {\n        // Palm-like trees\n        for(i = [0:2]) {\n            angle = i * 120;\n            r = 10 + i*3;\n            translate([cos(angle)*r, sin(angle)*r, 0])\n                cylinder(h=8, r=1, $fn=6);\n            \n            translate([cos(angle)*r, sin(angle)*r, 8])\n                scale([1, 0.2, 0.2])\n                    rotate([0, 0, angle])\n                        sphere(4);\n        }\n    }\n}\n\n// Main assembly\nscale([0.8, 0.8, 0.8])\nunion() {\n    main_body();\n    head_detail();\n    blowhole();\n    eye();\n    dorsal_fin();\n    tail();\n    shell_texture();\n    island_plants();\n}",
    "renders": true
  },
  {
    "household_item": "auvekoejak",
    "openscad_code": "// Auvekoejak (Inuit snow knife) - realistic medium complexity model\n\n// Overall dimensions (mm)\nlength = 90;\nwidth = 25;\nblade_thickness = 2.5;\nhandle_thickness = 12;\n\n// Blade parameters\nblade_length = 60;\nblade_width = 25;\nblade_curve = 15;\ntip_radius = 3;\n\n// Handle parameters\nhandle_length = 30;\nhandle_width = 20;\ngrip_depth = 2;\ngrip_ridges = 8;\n\n// Rivets\nrivet_radius = 1.5;\nrivet_height = 3;\nrivet_count = 3;\n\n// Create the complete auvekoejak\nmodule auvekoejak() {\n    union() {\n        // Main blade with curved cutting edge\n        difference() {\n            // Blade body\n            translate([0, 0, blade_thickness/2])\n            linear_extrude(height=blade_thickness, convexity=10)\n            polygon(points=[\n                [0, 0],  // Handle junction\n                [blade_length - tip_radius, 0],  // Straight section\n                [blade_length, tip_radius],  // Rounded tip\n                [blade_length - blade_curve, blade_width/2],  // Curved shoulder\n                [0, blade_width/2]  // Back to handle\n            ]);\n            \n            // Cutting edge bevel (inside)\n            translate([blade_length - 15, blade_width/2 - 2, -1])\n            rotate([0, 0, 30])\n            cube([20, 4, blade_thickness + 2]);\n        }\n        \n        // Handle\n        difference() {\n            // Handle body\n            translate([0, -handle_width/2, -handle_thickness/2])\n            cube([handle_length, handle_width, handle_thickness]);\n            \n            // Grip grooves\n            for (i = [0:grip_ridges-1]) {\n                translate([handle_length - 5 - i*(handle_length-10)/(grip_ridges-1), \n                          -handle_width/2 - 1, \n                          -handle_thickness/2 + 2])\n                rotate([0, 90, 0])\n                cylinder(h=handle_width + 2, r=1.5, $fn=16);\n            }\n        }\n        \n        // Rivets for handle reinforcement\n        for (i = [0:rivet_count-1]) {\n            translate([handle_length/2 + (i - (rivet_count-1)/2) * 8, \n                      0, \n                      handle_thickness/2])\n            cylinder(h=rivet_height, r=rivet_radius, $fn=16);\n        }\n        \n        // Handle butt cap\n        translate([-2, -handle_width/2 - 1, -handle_thickness/2 - 1])\n        difference() {\n            cube([4, handle_width + 2, handle_thickness + 2]);\n            translate([2, (handle_width + 2)/2, (handle_thickness + 2)/2])\n            rotate([0, 90, 0])\n            cylinder(h=4, r=(handle_thickness + 2)/2, $fn=32);\n        }\n    }\n}\n\n// Generate the model\nauvekoejak();",
    "renders": true
  },
  {
    "household_item": "ayahuma",
    "openscad_code": "// Ayahuma (Lecythis) Seed Pod – realistic, medium complexity\n// All dimensions in mm, printable size ≈ 70 mm tall\n\n// Parameters\n$fn = 36;               // smooth curves\nwall = 1.5;             // printable wall thickness\nbaseH = 12;             // stem base height\npodH = 55;              // main pod height\npodR = 20;              // max pod radius\nlidH = 8;               // operculum (lid) height\nseedR = 3;              // individual seed radius\nseedsN = 18;            // number of seeds inside\n\n// Main pod body – hollow\nmodule podBody() {\n    difference() {\n        // outer shell\n        rotate_extrude() {\n            polygon([\n                [0, 0],                       // bottom center\n                [podR*0.8, 0],                // bottom edge\n                [podR, podH*0.2],             // shoulder\n                [podR, podH*0.8],             // upper shoulder\n                [podR*0.7, podH],             // neck\n                [podR*0.4, podH + lidH],      // operculum lip\n                [0, podH + lidH]              // top center\n            ]);\n        }\n        // inner hollow\n        translate([0, 0, wall])\n        rotate_extrude() {\n            polygon([\n                [0, 0],\n                [podR*0.8 - wall, 0],\n                [podR - wall, podH*0.2 - wall],\n                [podR - wall, podH*0.8 - wall],\n                [podR*0.7 - wall, podH - wall],\n                [podR*0.4 - wall, podH + lidH - wall],\n                [0, podH + lidH - wall]\n            ]);\n        }\n    }\n}\n\n// Stem base\nmodule stem() {\n    cylinder(h = baseH, r1 = podR*0.6, r2 = podR*0.4, center = false);\n}\n\n// Seeds inside pod\nmodule seeds() {\n    for (i = [0 : seedsN - 1]) {\n        rotate([0, 0, i * 360 / seedsN])\n        translate([podR*0.4, 0, podH * 0.3 + (i % 2) * 8])\n        sphere(r = seedR);\n    }\n}\n\n// Lid (operculum) with slight dome\nmodule lid() {\n    difference() {\n        // outer\n        translate([0, 0, podH])\n        cylinder(h = lidH, r1 = podR*0.4, r2 = podR*0.45, center = false);\n        // inner\n        translate([0, 0, podH + wall])\n        cylinder(h = lidH - wall, r1 = podR*0.4 - wall, r2 = podR*0.45 - wall);\n    }\n}\n\n// Surface ribs for realism\nmodule ribs() {\n    for (i = [0 : 7]) {\n        rotate([0, 0, i * 45])\n        translate([0, -wall*0.5, 0])\n        cube([podR, wall, podH*0.85], center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // main body + ribs\n    union() {\n        podBody();\n        ribs();\n    }\n    // stem\n    stem();\n    // lid\n    lid();\n    // seeds\n    seeds();\n}",
    "renders": true
  },
  {
    "household_item": "azeman",
    "openscad_code": "// Azeman (Caribbean vampire bat) – realistic, medium-complexity\n// ~75 mm wingspan, printable without supports\n\n// overall scale\noverall = 75;\n\nmodule body() {\n    // torso\n    difference() {\n        scale([1.5,1,1]) sphere(d=18,$fn=32);\n        translate([0,0,-10]) cube([30,30,20],center=true);\n    }\n    // neck\n    translate([0,11,3]) rotate([0,15,0]) cylinder(h=8,d=6,$fn=16);\n}\n\nmodule head() {\n    translate([0,19,5]) rotate([0,15,0]) union() {\n        // skull\n        scale([1,1.2,0.9]) sphere(d=12,$fn=32);\n        // snout\n        translate([0,5.5,0]) scale([0.7,1,0.6]) sphere(d=10,$fn=24);\n        // ears\n        for(a=[-1,1])\n            translate([a*5,0,5]) rotate([0,a*10,0])\n                rotate([0,-20,0]) cylinder(h=7,d1=3,d2=6,$fn=12);\n        // eyes\n        for(a=[-1,1])\n            translate([a*3,3,2]) sphere(d=3,$fn=12);\n        // tiny fangs\n        for(a=[-1,1])\n            translate([a*1.5,7.5,-1]) rotate([90,0,0])\n                cylinder(h=3,d1=0.5,d2=1,$fn=8);\n    }\n}\n\nmodule wing() {\n    difference() {\n        // main wing membrane\n        union() {\n            translate([0,0,-1]) linear_extrude(height=0.8)\n                polygon(points=[[0,0],[25,0],[45,15],[40,35],[20,45],[0,35]]);\n            // leading arm bone\n            translate([0,0,0.5]) rotate([0,10,0])\n                cylinder(h=24,d=1.5,$fn=8);\n            // finger struts\n            for(i=[1:4])\n                translate([i*6+2,i*7,0.5]) rotate([0,-20,0])\n                    cylinder(h=20-i*3,d=1,$fn=8);\n        }\n        // cut fingertip holes for printability\n        for(i=[1:4])\n            translate([i*6+2,i*7+18,0]) cylinder(h=3,d=2,$fn=8);\n    }\n}\n\nmodule legs() {\n    for(side=[-1,1])\n        translate([side*4,-8,-9]) union() {\n            // thigh\n            rotate([0,side*20,0]) cylinder(h=8,d1=4,d2=3,$fn=12);\n            // shin\n            translate([0,-4,-6]) rotate([0,-side*30,0])\n                cylinder(h=10,d=2.5,$fn=12);\n            // foot\n            translate([0,-8,-12]) rotate([0,-side*30,0])\n                scale([1,2,0.5]) sphere(d=5,$fn=12);\n        }\n}\n\nmodule tail() {\n    translate([0,-12,-6]) rotate([30,0,0])\n        cylinder(h=12,d1=4,d2=2,$fn=12);\n}\n\n// assembly\nscale(overall/75)\nunion() {\n    body();\n    head();\n    for(side=[-1,1])\n        translate([0,0,0]) mirror([side,0,0]) rotate([0,0,-10])\n            translate([0,5,0]) wing();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "baku",
    "openscad_code": "// Baku (Japanese Dream Eater) - Realistic Medium Complexity\n// Based on traditional elephant/tiger hybrid appearance\n\n$fn = 64; // Smooth curves\nbody_length = 60;\nbody_height = 35;\nbody_width = 40;\nleg_height = 20;\n\nmodule trunk() {\n    // Main trunk cylinder\n    translate([body_length/2 - 5, 0, 0])\n    rotate([0, -15, 0])\n    scale([1, 0.8, 0.8])\n    cylinder(h=25, r1=6, r2=4);\n    \n    // Trunk tip\n    translate([body_length/2 + 18, 0, -2])\n    sphere(r=4);\n    \n    // Trunk wrinkles (subtractive)\n    for(i=[0:2:20]) {\n        translate([body_length/2 - 5 + i, 0, 0])\n        rotate([0, -15, 0])\n        scale([1, 1.1, 1.1])\n        cylinder(h=1, r1=6.5, r2=6.5);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    translate([-body_length/4, body_width/2 + 2, body_height/2])\n    rotate([0, 0, -30])\n    scale([1.2, 0.3, 1])\n    sphere(r=15);\n    \n    // Right ear\n    translate([-body_length/4, -body_width/2 - 2, body_height/2])\n    rotate([0, 0, 30])\n    scale([1.2, 0.3, 1])\n    sphere(r=15);\n}\n\nmodule legs() {\n    // Front legs\n    for(x=[body_length/4, -body_length/4]) {\n        for(y=[body_width/3, -body_width/3]) {\n            translate([x, y, -leg_height/2])\n            cylinder(h=leg_height, r=6);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail base\n    translate([-body_length/2 - 5, 0, -5])\n    rotate([45, 0, 0])\n    cylinder(h=15, r1=4, r2=2);\n    \n    // Tail tuft\n    translate([-body_length/2 - 15, 0, -15])\n    sphere(r=3);\n}\n\nmodule mane() {\n    // Mane along back\n    for(i=[-body_length/2:5:body_length/2 - 10]) {\n        translate([i, 0, body_height/2 + 2])\n        scale([1, 0.7, 0.5])\n        sphere(r=5);\n    }\n}\n\nmodule tusks() {\n    // Left tusk\n    translate([body_length/2 - 5, 8, -5])\n    rotate([0, 30, 15])\n    cylinder(h=12, r1=2, r2=0.5);\n    \n    // Right tusk\n    translate([body_length/2 - 5, -8, -5])\n    rotate([0, 30, -15])\n    cylinder(h=12, r1=2, r2=0.5);\n}\n\nmodule eyes() {\n    // Eye sockets\n    for(y=[8, -8]) {\n        translate([body_length/2 - 8, y, 5])\n        sphere(r=3);\n    }\n    \n    // Eye pupils\n    color(\"black\")\n    for(y=[8, -8]) {\n        translate([body_length/2 - 9, y, 5])\n        sphere(r=1.5);\n    }\n}\n\n// Main body\nunion() {\n    // Torso\n    translate([0, 0, 0])\n    scale([1.5, 1, 1])\n    sphere(r=body_height/2);\n    \n    // Head\n    translate([body_length/2 - 10, 0, 5])\n    sphere(r=15);\n    \n    // Trunk\n    trunk();\n    \n    // Ears\n    ears();\n    \n    // Legs\n    legs();\n    \n    // Tail\n    tail();\n    \n    // Mane\n    mane();\n    \n    // Tusks\n    tusks();\n    \n    // Eyes\n    eyes();\n}\n\n// Base plate for stability\ntranslate([0, 0, -leg_height - 1])\ncube([body_length + 20, body_width + 20, 2], center=true);",
    "renders": true
  },
  {
    "household_item": "bouda",
    "openscad_code": "// Bouzouki (Greek bouzouki) – medium-complexity realistic style\n// Overall length ~95 mm, printable without support (split-body construction)\n\n$fn = 36;               // smooth curves\nwall = 1.6;             // 3D-print friendly wall thickness\n\n/* ---------- MAIN ASSEMBLY ---------- */\nunion() {\n    body();\n    neck();\n    headstock();\n    strings();\n}\n\n/* ---------- BODY ---------- */\nmodule body() {\n    // Main bowl back – semi-sphere shell\n    difference() {\n        scale([1, 0.9, 0.55]) sphere(d = 50);\n        translate([0, 0, wall]) scale([1, 0.9, 0.55]) sphere(d = 50 - 2*wall);\n    }\n    \n    // Flat top plate\n    translate([0, 0, 27.5 - wall/2])\n        cube([55, 45, wall], center = true);\n    \n    // Sound hole (28 mm typical for bouzouki)\n    translate([0, 0, 27.5])\n        cylinder(h = wall + 0.1, d = 28, center = true);\n}\n\n/* ---------- NECK ---------- */\nmodule neck() {\n    // Tapered neck beam\n    hull() {\n        translate([27.5 - 3, 0, 27.5 + wall/2])\n            cube([6, 16, 6], center = true);\n        translate([75, 0, 27.5 + wall/2 + 3])\n            cube([12, 20, 6], center = true);\n    }\n    \n    // Fretboard on top\n    translate([51, 0, 27.5 + wall/2 + 3.5])\n        cube([47, 18, 1.5], center = true);\n    \n    // Frets (18 frets typical)\n    for(i = [1:18]) {\n        pos = 27.5 + wall/2 + 3.5 + 1.5 + i * 2.4;\n        translate([27.5 + i * 2.4, 0, pos])\n            cube([18, 0.4, 1.2], center = true);\n    }\n}\n\n/* ---------- HEADSTOCK ---------- */\nmodule headstock() {\n    // Head plate\n    translate([82, 0, 42])\n        rotate([0, -15, 0])\n        cube([20, 30, 4], center = true);\n    \n    // Tuners – simple cylinders\n    for(side = [-1, 1]) {\n        for(idx = [0:3]) {\n            translate([82 + 10, side * 10, 42 + side * (idx * 6 - 9)])\n                rotate([90, 0, 0])\n                cylinder(h = 8, d = 4);\n        }\n    }\n}\n\n/* ---------- STRINGS ---------- */\nmodule strings() {\n    // 8 metal strings in 4 courses\n    for(course = [0:3]) {\n        y = 6 - course * 4;\n        translate([0, y/2, 27.5 + wall/2 + 5])\n            cube([95, 0.3, 0.3], center = false);\n        translate([0, -y/2, 27.5 + wall/2 + 5])\n            cube([95, 0.3, 0.3], center = false);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "bukavac",
    "openscad_code": "// Bukavac - Slavic six-legged swamp demon\n// Model optimized for 3D printing with no steep overhangs\n\nmodule body() {\n    // Main torso - elongated oval shape\n    translate([0, 0, 15])\n    scale([1.2, 0.8, 0.6])\n    sphere(20, $fn=32);\n    \n    // Neck connection\n    translate([0, -12, 25])\n    rotate([20, 0, 0])\n    cylinder(h=12, r1=8, r2=6, $fn=16);\n}\n\nmodule head() {\n    // Crocodile-like head\n    translate([0, -25, 28])\n    rotate([0, 0, 0])\n    scale([0.8, 1.6, 0.7])\n    sphere(15, $fn=32);\n    \n    // Snout extension\n    translate([0, -40, 25])\n    rotate([15, 0, 0])\n    cylinder(h=20, r1=8, r2=5, $fn=16);\n    \n    // Nostrils\n    for(side = [-1, 1]) {\n        translate([side*4, -45, 27])\n        rotate([0, 30*side, 0])\n        cylinder(h=5, r=2, $fn=8);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side*8, -30, 32])\n        difference() {\n            sphere(4, $fn=16);\n            translate([0, 0, -2])\n            cylinder(h=5, r=2, $fn=8);\n        }\n    }\n}\n\nmodule legs() {\n    // Generate 3 pairs of legs along the body\n    for(pos = [0, 1, 2]) {\n        // Left side legs\n        translate([-15, -5 + pos*15, 10 - pos*3])\n        rotate([0, 0, 30])\n        leg();\n        \n        // Right side legs\n        translate([15, -5 + pos*15, 10 - pos*3])\n        mirror([1, 0, 0])\n        rotate([0, 0, 30])\n        leg();\n    }\n}\n\nmodule leg() {\n    // Upper leg segment\n    rotate([0, 0, -30])\n    cylinder(h=20, r1=6, r2=4, $fn=12);\n    \n    // Lower leg segment\n    translate([0, 18, -5])\n    rotate([30, 0, 0])\n    cylinder(h=18, r1=4, r2=3, $fn=12);\n    \n    // Webbed foot\n    translate([0, 32, -12])\n    rotate([40, 0, 0])\n    scale([1.5, 1, 0.3])\n    sphere(8, $fn=16);\n    \n    // Toes\n    for(toe = [-1, 0, 1]) {\n        translate([toe*4, 36, -10])\n        rotate([40, 0, toe*10])\n        cylinder(h=8, r=1.5, $fn=8);\n    }\n}\n\nmodule tail() {\n    // Curved tail with segments\n    for(i = [0:5]) {\n        translate([0, 10 + i*8, 15 - i*2])\n        rotate([0, 0, -i*5])\n        scale([1 - i*0.1, 1 - i*0.05, 1 - i*0.05])\n        sphere(10 - i, $fn=16);\n    }\n}\n\nmodule spikes() {\n    // Dorsal ridge spikes\n    for(i = [0:7]) {\n        translate([0, -20 + i*6, 25 + i*1.5])\n        rotate([0, 0, 0])\n        cylinder(h=8, r1=3, r2=1, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    spikes();\n}\n\n// Base platform for stable printing\ntranslate([0, 0, 0])\ncube([80, 80, 2], center=true);",
    "renders": true
  },
  {
    "household_item": "cactus",
    "openscad_code": "// Realistic 3D-printable Barrel Cactus\n// Wall thickness = 2 mm, overhangs avoided by using spheres/cylinders\n\nmodule cactus_base() {\n    // Main barrel body - slightly tapered cylinder with rounded top\n    difference() {\n        union() {\n            cylinder(h = 45, r1 = 22, r2 = 20, $fn = 64); // Main body\n            translate([0, 0, 45]) sphere(d = 40, $fn = 64); // Rounded top\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, -1]) cylinder(h = 47, r1 = 20, r2 = 18, $fn = 64);\n        translate([0, 0, 45]) sphere(d = 36, $fn = 64);\n    }\n}\n\nmodule rib_detail() {\n    // Single rib - uses cylinder for 3D printing friendliness\n    rotate([90, 0, 0]) cylinder(h = 40, r1 = 2, r2 = 1.5, $fn = 16);\n}\n\nmodule ribs() {\n    // Generate 8 ribs around the cactus\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([21, 0, 5]) rib_detail();\n            translate([19, 0, 15]) scale([0.9, 0.9, 1]) rib_detail();\n            translate([19, 0, 25]) scale([0.9, 0.9, 1]) rib_detail();\n            translate([21, 0, 35]) scale([0.8, 0.8, 1]) rib_detail();\n        }\n    }\n}\n\nmodule areole() {\n    // Small cylindrical pads where spines attach\n    cylinder(h = 1.5, r = 2, $fn = 16);\n}\n\nmodule spines() {\n    // Generate clusters of spines at each areole\n    for (rib = [0:7]) {\n        for (level = [0:3]) {\n            rotate([0, 0, rib * 45]) {\n                translate([21 - level * 2, 0, 8 + level * 10]) {\n                    areole();\n                    \n                    // Cluster of 4 spines\n                    for (angle = [0:90:270]) {\n                        rotate([0, 0, angle]) {\n                            rotate([30, 0, 0]) {\n                                translate([0, 0, 1.5]) \n                                cylinder(h = 8, r1 = 0.5, r2 = 0.1, $fn = 8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule flower() {\n    // Simple cactus flower on top\n    translate([0, 0, 65]) {\n        // Flower base\n        cylinder(h = 3, r = 8, $fn = 32);\n        \n        // Petals\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([6, 0, 3]) rotate([90, 0, 0]) \n                cylinder(h = 10, r1 = 4, r2 = 2, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule pot() {\n    // Simple pot for the cactus\n    difference() {\n        // Outer pot\n        cylinder(h = 30, r1 = 28, r2 = 25, $fn = 64);\n        \n        // Inner hollow\n        translate([0, 0, 3]) cylinder(h = 30, r1 = 25, r2 = 22, $fn = 64);\n        \n        // Drainage hole\n        translate([0, 0, -1]) cylinder(h = 5, r = 3, $fn = 16);\n    }\n}\n\n// Assemble the cactus\ntranslate([0, 0, 30]) { // Position above pot\n    union() {\n        cactus_base();\n        ribs();\n        spines();\n        flower();\n    }\n}\n\n// Add the pot\ntranslate([0, 0, 0]) pot();",
    "renders": true
  },
  {
    "household_item": "cadejo",
    "openscad_code": "// Cadejo (Central-American mythological spirit-dog)\n// Overall height ≈ 65 mm, length ≈ 80 mm\n// Wall thickness ≥ 1.2 mm, printable without supports\n\n// PARAMETERS\nbody_len = 50;           // body length along x\nbody_w   = 30;           // body width on y\nbody_h   = 22;           // body height on z\nneck_len = 12;\nhead_len = 22;\nhead_w   = 18;\nhead_h   = 20;\nleg_h    = 20;\ntail_len = 25;\n\nmodule cadejo() {\n    // MAIN BODY\n    union() {\n        // Torso\n        translate([0, 0, leg_h])\n            scale([1, 0.6, 0.5])\n                sphere(d = body_w);\n\n        // Chest forward extension\n        translate([body_len/2 - 5, 0, leg_h])\n            scale([1.1, 0.9, 0.7])\n                sphere(d = body_w * 0.9);\n\n        // NECK\n        translate([body_len/2 + neck_len/2 - 2, 0, leg_h + body_h/2])\n            rotate([0, -20, 0])\n                cylinder(h = neck_len, d1 = body_w * 0.7, d2 = head_w * 0.8, $fn = 20);\n\n        // HEAD\n        translate([body_len/2 + neck_len + head_len/2 - 2, 0,\n                   leg_h + body_h/2 - 3])\n            rotate([0, -20, 0])\n                scale([1, 0.7, 0.8])\n                    sphere(d = head_w);\n\n        // MUZZLE\n        translate([body_len/2 + neck_len + head_len - 3, 0,\n                   leg_h + body_h/2 - head_h/2 + 3])\n            rotate([0, -20, 0])\n                scale([0.7, 0.5, 0.5])\n                    sphere(d = head_w);\n\n        // EARS\n        ear();                // left ear\n        mirror([0,1,0]) ear(); // right ear (mirrored)\n\n        // LEGS\n        for(x = [-body_len/2 + 5, body_len/2 - 5])\n            for(y = [-body_w/2 + 6, body_w/2 - 6])\n                leg(x, y);\n\n        // TAIL\n        translate([-body_len/2 - tail_len/2 + 5, 0, leg_h + 5])\n            rotate([0, 25, 0])\n                cylinder(h = tail_len, d1 = 10, d2 = 6, $fn = 20);\n    }\n\n    // EYES\n    eye();\n    mirror([0,1,0]) eye();\n}\n\nmodule leg(x, y) {\n    // Upper leg\n    translate([x, y, leg_h/2])\n        cylinder(h = leg_h, d1 = 8, d2 = 6, $fn = 16);\n\n    // Paw\n    translate([x, y, 1.5])\n        sphere(d = 9);\n}\n\nmodule ear() {\n    translate([body_len/2 + neck_len + head_len/2 + 2,\n               head_w/2 - 3,\n               leg_h + body_h/2 + 12])\n        rotate([0, 0, -30])\n            scale([0.8, 0.2, 1.5])\n                sphere(d = 8);\n}\n\nmodule eye() {\n    translate([body_len/2 + neck_len + head_len - 2,\n               head_w/2 - 4,\n               leg_h + body_h/2 + 2])\n        rotate([0, -20, 0])\n            scale([0.5, 0.5, 0.5])\n                sphere(d = 5);\n}\n\n// MAIN CALL\ncadejo();",
    "renders": true
  },
  {
    "household_item": "camazotz",
    "openscad_code": "// Camazotz (Mayan bat god) in realistic style, medium complexity\n// Overall height ~70mm, suitable for 3D printing\n\n// Wing module\nmodule wing() {\n    // Main wing membrane\n    difference() {\n        // Wing shape\n        translate([0, -25, 0]) \n            scale([1, 0.3, 0.05]) \n                sphere(d=60);\n        \n        // Remove inner section for membrane\n        translate([0, -20, -1]) \n            scale([0.7, 0.25, 0.1]) \n                sphere(d=50);\n    }\n    \n    // Wing finger supports\n    for (i = [0:2]) {\n        rotate([0, 0, i*25-25]) \n            translate([0, -10, 0]) \n                rotate([90, 0, 0]) \n                    cylinder(h=40, d1=3, d2=1);\n    }\n}\n\n// Ear module\nmodule ear() {\n    difference() {\n        // Main ear\n        rotate([0, 15, 0]) \n            scale([0.3, 1, 0.7]) \n                sphere(d=15);\n        \n        // Inner ear cavity\n        translate([0, 0, 5]) \n            scale([0.2, 0.8, 0.5]) \n                sphere(d=12);\n    }\n}\n\n// Body\nunion() {\n    // Main body\n    translate([0, 0, 25]) \n        scale([1.2, 0.8, 1.5]) \n            sphere(d=30);\n    \n    // Chest\n    translate([0, 0, 20]) \n        scale([0.8, 0.6, 1.2]) \n            sphere(d=20);\n    \n    // Head\n    translate([0, 0, 50]) {\n        // Skull\n        difference() {\n            sphere(d=25);\n            \n            // Snout\n            translate([0, -12, -5]) \n                scale([0.8, 1.5, 0.8]) \n                    sphere(d=15);\n        }\n        \n        // Ears\n        translate([-12, 0, 5]) ear();\n        translate([12, 0, 5]) mirror([1, 0, 0]) ear();\n        \n        // Eyes\n        translate([-5, -8, 3]) \n            rotate([0, 90, 0]) \n                cylinder(h=3, d=4);\n        translate([5, -8, 3]) \n            rotate([0, 90, 0]) \n                cylinder(h=3, d=4);\n    }\n    \n    // Wings\n    translate([0, 0, 40]) {\n        rotate([0, 0, -30]) wing();\n        rotate([0, 0, 30]) mirror([1, 0, 0]) wing();\n    }\n    \n    // Legs\n    for (x = [-8, 8]) {\n        translate([x, 0, 10]) {\n            // Upper leg\n            cylinder(h=15, d=6);\n            // Lower leg\n            translate([0, 0, 0]) \n                rotate([30, 0, 0]) \n                    cylinder(h=12, d=5);\n            // Foot\n            translate([0, -5, -8]) \n                rotate([0, 0, 90]) \n                    scale([0.5, 1, 0.3]) \n                        sphere(d=15);\n        }\n    }\n    \n    // Tail\n    translate([0, -15, 20]) \n        rotate([45, 0, 0]) \n            cylinder(h=20, d1=8, d2=3);\n}",
    "renders": true
  },
  {
    "household_item": "cipactli",
    "openscad_code": "// Cipactli - Aztec crocodilian earth-monster\n// Designed for 3D printing with no overhangs\n\n$fn = 36;\nbody_length = 80;\nbody_width = 35;\nbody_height = 20;\nwall_thickness = 2;\n\nmodule body() {\n    // Main body hull\n    hull() {\n        translate([-body_length/4, 0, body_height/2]) sphere(d=body_height);\n        translate([body_length/4, 0, body_height/2]) sphere(d=body_height);\n    }\n    \n    // Add ridged back\n    for(i = [-body_length/3 : 10 : body_length/3]) {\n        translate([i, 0, body_height]) \n            scale([1, 0.8, 0.3]) sphere(d=12);\n    }\n}\n\nmodule head() {\n    // Crocodile head shape\n    translate([-body_length/2 - 15, 0, body_height/2]) {\n        // Snout\n        rotate([-10, 0, 0]) \n            scale([1.5, 0.8, 0.6]) sphere(d=20);\n        \n        // Eyes\n        translate([-8, 8, 8]) sphere(d=4);\n        translate([-8, -8, 8]) sphere(d=4);\n        \n        // Nostrils\n        translate([-12, 4, 5]) cylinder(h=2, d=3);\n        translate([-12, -4, 5]) cylinder(h=2, d=3);\n        \n        // Mouth line\n        translate([-15, 0, 2]) \n            rotate([90, 0, 0]) \n                cylinder(h=25, d=1);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    module leg_pair(side) {\n        translate([-body_length/3, side*body_width/2, 0]) {\n            // Upper leg\n            rotate([0, -20, 30*side]) \n                cylinder(h=15, d1=8, d2=6);\n            \n            // Lower leg\n            translate([-5, side*5, -12]) \n                rotate([30, 0, 0]) \n                    cylinder(h=12, d1=6, d2=4);\n            \n            // Foot\n            translate([-5, side*8, -18]) \n                rotate([90, 0, 0]) \n                    scale([1.5, 1, 0.8]) sphere(d=6);\n        }\n    }\n    \n    // Back legs\n    module back_leg_pair(side) {\n        translate([body_length/3, side*body_width/2, 0]) {\n            rotate([0, 20, -30*side]) \n                cylinder(h=15, d1=8, d2=6);\n            translate([5, side*5, -12]) \n                rotate([30, 0, 0]) \n                    cylinder(h=12, d1=6, d2=4);\n            translate([5, side*8, -18]) \n                rotate([90, 0, 0]) \n                    scale([1.5, 1, 0.8]) sphere(d=6);\n        }\n    }\n    \n    leg_pair(1);\n    leg_pair(-1);\n    back_leg_pair(1);\n    back_leg_pair(-1);\n}\n\nmodule tail() {\n    // Tapered tail\n    for(i = [0:8:body_length/2]) {\n        translate([body_length/2 + i, 0, 0]) \n            scale([0.8 - i/body_length, 0.8 - i/body_length, 0.8 - i/body_length]) \n                sphere(d=body_height - i/3);\n    }\n}\n\nmodule teeth() {\n    // Upper teeth\n    for(i = [-8:3:8]) {\n        translate([-body_length/2 - 15 + i, 0, 2]) \n            rotate([90, 0, 0]) \n                cylinder(h=3, d1=2, d2=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    teeth();\n}",
    "renders": true
  },
  {
    "household_item": "curupira",
    "openscad_code": "// Curupira - Brazilian forest spirit\n// Medium complexity, realistic style\n// 3D printable, ~80mm tall\n\n$fn = 32;  // Higher resolution for realistic look\nbody_height = 80;\nhead_height = 20;\ntorso_height = 25;\nleg_height = 30;\nfoot_length = 15;\narm_length = 20;\nhand_size = 5;\n\n// Main body module\nmodule curupira() {\n    // Head with wild hair\n    translate([0, 0, body_height - head_height/2]) {\n        // Skull base\n        color(\"burlywood\") sphere(d=head_height);\n        \n        // Wild hair - multiple tufts\n        for(i = [0:30]) {\n            rotate([rand(0, 360), rand(0, 180), rand(0, 360)])\n            translate([rand(-12, 12), rand(-12, 12), rand(8, 15)]) {\n                scale([1, 1, rand(1.2, 2)])\n                cylinder(d1=rand(4, 8), d2=rand(2, 4), h=rand(8, 15));\n            }\n        }\n    }\n    \n    // Facial features\n    translate([0, 0, body_height - head_height/2 + 5]) {\n        // Eyes\n        translate([-4, -9, 3]) sphere(d=3);\n        translate([4, -9, 3]) sphere(d=3);\n        \n        // Nose\n        translate([0, -10, 0]) \n        rotate([90, 0, 0])\n        cylinder(d1=2, d2=0, h=3);\n        \n        // Mouth\n        translate([0, -10, -4])\n        rotate([90, 0, 0])\n        cylinder(d1=4, d2=2, h=2);\n    }\n    \n    // Torso\n    color(\"darkgreen\")\n    translate([0, 0, body_height - head_height - torso_height/2])\n    scale([0.8, 0.6, 1])\n    sphere(d=torso_height);\n    \n    // Bark-like texture on torso\n    for(i = [0:20]) {\n        translate([rand(-12, 12), rand(-10, 10), rand(body_height - head_height - torso_height, body_height - head_height)])\n        rotate([rand(0, 90), rand(0, 90), rand(0, 90)])\n        scale([rand(0.5, 1), rand(0.5, 1), rand(0.5, 1)])\n        cube([rand(2, 4), rand(1, 3), rand(1, 2)]);\n    }\n    \n    // Legs with backwards feet\n    for(side = [-1, 1]) {\n        // Thigh\n        color(\"burlywood\")\n        translate([side * 8, 0, body_height - head_height - torso_height - leg_height/2])\n        rotate([0, 10, 0])\n        cylinder(d1=10, d2=8, h=leg_height);\n        \n        // Backwards foot\n        translate([side * 12, foot_length/2, body_height - head_height - torso_height - leg_height - 5])\n        rotate([0, 0, side * 180])\n        union() {\n            // Foot base\n            cube([foot_length, 6, 4], center=true);\n            \n            // Toes\n            for(toe = [-1, 0, 1]) {\n                translate([toe * 2, 3, -1])\n                cylinder(d=2, h=3);\n            }\n        }\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        // Upper arm\n        color(\"burlywood\")\n        translate([side * 12, 0, body_height - head_height - torso_height/2])\n        rotate([0, 0, side * -30])\n        cylinder(d=6, h=arm_length);\n        \n        // Forearm\n        translate([side * 20, -5, body_height - head_height - torso_height/2 - 5])\n        rotate([0, 0, side * -60])\n        cylinder(d=5, h=arm_length * 0.8);\n        \n        // Hand\n        translate([side * 25, -10, body_height - head_height - torso_height/2 - 8])\n        sphere(d=hand_size * 2);\n        \n        // Long nails\n        for(nail = [0:4]) {\n            rotate([0, 0, nail * 72 + (side * 30)])\n            translate([0, hand_size, 0])\n            cylinder(d=1, h=hand_size * 1.5);\n        }\n    }\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Generate the model\ncurupira();",
    "renders": true
  },
  {
    "household_item": "dahaka",
    "openscad_code": "// Dahaka 3D printable model\n// Realistic style, medium complexity\n// Size: ~80mm height\n\n$fn = 50;\n\nmodule dahaka_body() {\n    // Main torso\n    union() {\n        // Core body segment\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1.5])\n            sphere(r=15);\n        \n        // Upper chest\n        translate([0, 0, 40])\n            scale([1.4, 1, 1.2])\n            sphere(r=12);\n        \n        // Lower abdomen\n        translate([0, 0, 5])\n            scale([1.3, 0.9, 1])\n            sphere(r=14);\n        \n        // Pelvis\n        translate([0, 0, -5])\n            scale([1.5, 1.1, 0.8])\n            sphere(r=12);\n    }\n}\n\nmodule dahaka_head() {\n    // Main head structure\n    union() {\n        // Skull base\n        translate([0, 0, 55])\n            scale([1, 0.8, 1.2])\n            sphere(r=10);\n        \n        // Snout\n        translate([0, 12, 55])\n            scale([0.7, 1.5, 0.6])\n            sphere(r=8);\n        \n        // Jaw structure\n        translate([0, 8, 45])\n            scale([0.8, 1.2, 0.5])\n            sphere(r=10);\n    }\n    \n    // Horns\n    for(i = [-1, 1]) {\n        // Main horns\n        translate([i*8, 0, 65])\n            rotate([i*15, 0, 0])\n            cylinder(h=15, r1=3, r2=2);\n        \n        // Side horns\n        translate([i*10, 8, 58])\n            rotate([0, i*20, 0])\n            cylinder(h=8, r1=2, r2=1);\n    }\n}\n\nmodule dahaka_limbs() {\n    // Arms\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side*18, 0, 35])\n            rotate([0, side*15, 0])\n            cylinder(h=20, r=4);\n        \n        // Forearm\n        translate([side*25, 0, 25])\n            rotate([0, side*45, 0])\n            cylinder(h=18, r=3.5);\n        \n        // Hands\n        translate([side*30, 0, 20])\n            scale([1, 0.5, 0.3])\n            sphere(r=5);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side*10, 0, 0])\n            rotate([0, side*10, 0])\n            cylinder(h=22, r=5);\n        \n        // Shin\n        translate([side*12, 0, -20])\n            rotate([0, side*20, 0])\n            cylinder(h=20, r=4.5);\n        \n        // Feet\n        translate([side*12, 8, -35])\n            scale([1.2, 2, 0.5])\n            sphere(r=6);\n    }\n}\n\nmodule dahaka_details() {\n    // Spinal ridge\n    for(z = [10:5:50]) {\n        translate([0, -2, z])\n            scale([0.8, 0.5, 0.3])\n            sphere(r=4);\n    }\n    \n    // Ribs indication\n    for(z = [15:5:35]) {\n        for(side = [-1, 1]) {\n            translate([side*12, 0, z])\n                rotate([0, 0, 90])\n                scale([0.3, 1, 0.2])\n                cylinder(h=10, r=3);\n        }\n    }\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([side*4, 13, 58])\n            difference() {\n                sphere(r=2);\n                translate([0, 1, 0])\n                    sphere(r=1.5);\n            }\n    }\n    \n    // Mouth opening\n    translate([0, 16, 50])\n        scale([1, 2, 0.5])\n        rotate([15, 0, 0])\n        cube([8, 2, 4]);\n}\n\n// Main assembly\nunion() {\n    dahaka_body();\n    dahaka_head();\n    dahaka_limbs();\n    dahaka_details();\n}\n\n// Base platform for printing stability\ntranslate([0, 0, -40])\n    cylinder(h=3, r=25);",
    "renders": true
  },
  {
    "household_item": "dawon",
    "openscad_code": "// Dawon (Tibetan Snow Lion) - Medium Complexity Realistic Style\n// Size: 80mm length, 40mm height, 30mm width\n\n$fn = 50;\n\n// Overall scale factor\nscale_factor = 1;\n\nmodule dawon() {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 1])\n        sphere(d=30);\n        \n        // Chest\n        translate([-10, 0, 12])\n        scale([1.5, 1.2, 0.8])\n        sphere(d=20);\n        \n        // Head\n        translate([20, 0, 25])\n        sphere(d=18);\n        \n        // Muzzle\n        translate([28, 0, 22])\n        scale([1.2, 0.8, 0.8])\n        sphere(d=10);\n        \n        // Neck\n        translate([15, 0, 20])\n        cylinder(h=10, r1=8, r2=6);\n        \n        // Legs\n        for(x = [-8, 8]) {\n            // Front legs\n            translate([x, 0, 8])\n            cylinder(h=12, r=4);\n            \n            // Back legs\n            translate([x-15, 0, 8])\n            cylinder(h=12, r=4);\n        }\n        \n        // Tail\n        translate([-25, 0, 20])\n        rotate([0, 30, 0])\n        cylinder(h=20, r1=3, r2=1);\n        \n        // Tail tuft\n        translate([-38, 0, 25])\n        sphere(d=5);\n        \n        // Ears\n        for(x = [16, 24]) {\n            translate([x, 8, 30])\n            rotate([30, 0, 0])\n            scale([0.8, 1, 1.2])\n            sphere(d=6);\n            \n            translate([x, -8, 30])\n            rotate([-30, 0, 0])\n            scale([0.8, 1, 1.2])\n            sphere(d=6);\n        }\n        \n        // Eyes\n        for(x = [1, -1]) {\n            translate([26, x*6, 28])\n            sphere(d=3);\n            \n            // Eye pupils\n            difference() {\n                translate([26, x*6, 28.5])\n                sphere(d=2);\n                translate([27, x*6, 28.5])\n                sphere(d=1.5);\n            }\n        }\n        \n        // Nose\n        translate([32, 0, 24])\n        sphere(d=3);\n        \n        // Mane rings\n        for(i = [0:2:10]) {\n            translate([20-i, 0, 25-i*0.8])\n            rotate([0, 90, 0])\n            torus(10-i*0.5, 2);\n        }\n        \n        // Paw pads\n        for(x = [-8, 8]) {\n            translate([x, 0, 1])\n            cube([6, 8, 2], center=true);\n            \n            translate([x-15, 0, 1])\n            cube([6, 8, 2], center=true);\n        }\n    }\n}\n\n// Torus module for mane\nmodule torus(major, minor) {\n    rotate_extrude()\n    translate([major, 0, 0])\n    circle(r=minor);\n}\n\n// Generate the model\ndawon();",
    "renders": true
  },
  {
    "household_item": "devil",
    "openscad_code": "// Devil Figure - Realistic Medium Complexity\n// Overall height ~80mm, 3D-printable with no overhangs >45°\n\n$fn = 24;  // Smooth curves for realistic look\n\n// Main assembly\nunion() {\n    // Body\n    body();\n\n    // Head\n    translate([0, 0, 55])\n        head();\n\n    // Arms\n    translate([-20, 0, 40])\n        rotate([0, 0, 30])\n        arm();\n    translate([20, 0, 40])\n        rotate([0, 0, -30])\n        mirror([1, 0, 0])\n        arm();\n\n    // Legs\n    translate([-10, 0, 0])\n        leg();\n    translate([10, 0, 0])\n        leg();\n\n    // Tail\n    translate([0, -15, 10])\n        tail();\n}\n\n// Body module\nmodule body() {\n    // Torso\n    hull() {\n        translate([0, 0, 25])\n            sphere(15);\n        translate([0, 0, 45])\n            sphere(12);\n    }\n    \n    // Chest detail\n    difference() {\n        translate([0, 5, 40])\n            cube([20, 10, 15], center=true);\n        translate([0, 11, 40])\n            cube([22, 2, 17], center=true);\n    }\n}\n\n// Head module\nmodule head() {\n    // Skull base\n    sphere(12);\n    \n    // Jaw\n    translate([0, 5, -8])\n        scale([0.8, 1, 0.6])\n        sphere(10);\n    \n    // Horns\n    translate([-8, 0, 10])\n        horn();\n    translate([8, 0, 10])\n        mirror([1, 0, 0])\n        horn();\n    \n    // Eyes\n    translate([-5, 8, 3])\n        eye();\n    translate([5, 8, 3])\n        eye();\n    \n    // Nose\n    translate([0, 9, 0])\n        sphere(2);\n    \n    // Ears\n    translate([-12, 0, 0])\n        rotate([0, 0, -20])\n        ear();\n    translate([12, 0, 0])\n        rotate([0, 0, 20])\n        mirror([1, 0, 0])\n        ear();\n}\n\n// Horn module\nmodule horn() {\n    for(i = [0:3]) {\n        translate([0, 0, i*2.5])\n            rotate([0, 0, i*15])\n            cylinder(h=5, r1=3-i*0.5, r2=2-i*0.3);\n    }\n}\n\n// Eye module\nmodule eye() {\n    difference() {\n        sphere(3);\n        translate([0, 2, 0])\n            sphere(2.5);\n    }\n}\n\n// Ear module\nmodule ear() {\n    scale([0.5, 1, 1.5])\n    sphere(4);\n}\n\n// Arm module\nmodule arm() {\n    // Upper arm\n    translate([0, 0, 10])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=5);\n    \n    // Forearm\n    translate([0, 20, 5])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=4);\n    \n    // Hand\n    translate([0, 35, 3])\n        sphere(6);\n    \n    // Trident\n    translate([0, 45, 3])\n        rotate([0, 0, -90])\n        trident();\n}\n\n// Trident module\nmodule trident() {\n    // Handle\n    cylinder(h=30, r=1.5);\n    \n    // Prongs\n    for(i = [-1:1]) {\n        translate([i*3, 0, 30])\n            cylinder(h=8, r=1);\n    }\n}\n\n// Leg module\nmodule leg() {\n    // Thigh\n    translate([0, 0, 15])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=6);\n    \n    // Calf\n    translate([0, 20, 10])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=5);\n    \n    // Hoof\n    translate([0, 35, 8])\n        scale([1, 1.5, 0.8])\n        sphere(6);\n}\n\n// Tail module\nmodule tail() {\n    // Segmented tail for printability\n    for(i = [0:4]) {\n        rotate([0, 0, i*-20])\n        translate([0, -i*3, 0])\n            sphere(3.5 - i*0.3);\n    }\n    \n    // Arrowhead tip\n    translate([0, -15, 0])\n        rotate([0, 0, 90])\n        linear_extrude(height=5, center=true)\n        polygon(points=[[0,0], [-3,-2], [0,-6], [3,-2]]);\n}",
    "renders": true
  },
  {
    "household_item": "drekavac",
    "openscad_code": "// Drekavac (realistic style, medium complexity)\n// 3D printable model ~80mm tall\n\n$fn = 50;  // Smooth curves\nwall = 1.2; // 3D print wall thickness\n\nmodule torso() {\n    // Main body - elongated oval\n    difference() {\n        scale([0.8, 0.5, 1.3]) sphere(d = 40);\n        translate([0, 0, 25]) cube([50, 50, 15], center = true);\n    }\n}\n\nmodule head() {\n    // Canine-like head with elongated snout\n    union() {\n        // Skull\n        translate([0, 0, 50]) scale([0.7, 0.6, 0.7]) sphere(d = 35);\n        \n        // Snout\n        translate([0, -15, 45]) rotate([20, 0, 0]) \n            scale([0.4, 0.3, 0.8]) cylinder(h = 25, d = 20);\n        \n        // Ears\n        for(x = [-12, 12]) {\n            translate([x, 5, 58]) rotate([0, x/2, 0])\n                scale([0.3, 0.1, 0.8]) cylinder(h = 20, d = 8);\n        }\n        \n        // Eye sockets\n        for(x = [-8, 8]) {\n            translate([x, -5, 52]) sphere(d = 6);\n        }\n    }\n}\n\nmodule legs() {\n    // Four thin legs with joints\n    for(x = [-15, 15]) {\n        // Front legs\n        translate([x, 0, 0]) {\n            // Upper leg\n            rotate([0, 20, 0]) cylinder(h = 25, d = 8);\n            // Lower leg\n            translate([0, -10, -25]) rotate([0, -40, 0])\n                cylinder(h = 20, d = 6);\n            // Paw\n            translate([0, -20, -40]) sphere(d = 8);\n        }\n        \n        // Hind legs\n        translate([x/2, 0, -30]) {\n            rotate([0, -30, 0]) cylinder(h = 30, d = 10);\n            translate([0, -8, -30]) rotate([0, 30, 0])\n                cylinder(h = 25, d = 7);\n            translate([0, -15, -50]) sphere(d = 10);\n        }\n    }\n}\n\nmodule tail() {\n    // Thin whip-like tail with segments\n    union() {\n        for(i = [0:5]) {\n            translate([0, 0, -45 - i*8]) \n                rotate([0, 5*i, 0])\n                scale([1 - i*0.1, 1 - i*0.1, 1]) \n                cylinder(h = 8, d = 8 - i);\n        }\n    }\n}\n\nmodule ribs() {\n    // Visible ribcage structure\n    difference() {\n        translate([0, 0, 10]) scale([0.7, 0.4, 1]) sphere(d = 35);\n        for(i = [0:5]) {\n            rotate([0, 0, i*30]) \n                translate([0, 0, 10 - i*2])\n                cube([20, 2, 30], center = true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    torso();\n    head();\n    legs();\n    tail();\n    ribs();\n}\n\n// Hollow out for printing\ndifference() {\n    children();\n    scale([0.8, 0.8, 0.8]) children();\n}",
    "renders": true
  },
  {
    "household_item": "dzeebag",
    "openscad_code": "// DZeebag – realistic, medium-complexity, 3D-printable\n// External dimensions ≈ 80 mm long, 45 mm wide, 25 mm thick\n\n$fn = 36;\n\n// Wall thickness for printability\nwall = 1.6;\n\n// Overall body shell\nmodule body() {\n    difference() {\n        // Outer rounded brick\n        hull() {\n            translate([-30, -20, 0]) sphere(d=wall*2, $fn=8);\n            translate([ 30, -20, 0]) sphere(d=wall*2, $fn=8);\n            translate([-30,  20, 0]) sphere(d=wall*2, $fn=8);\n            translate([ 30,  20, 0]) sphere(d=wall*2, $fn=8);\n        }\n        // Inner cavity\n        translate([0, 0, -1])\n            cube([60 - wall*2, 40 - wall*2, 25], center=true);\n    }\n}\n\n// Zipper track (raised ridges)\nmodule zipper_track() {\n    for (i = [-25:5:25]) {\n        translate([i, 0, 13])\n            cube([3, 38, 2], center=true);\n    }\n}\n\n// Zipper pull with loop\nmodule zipper_pull() {\n    // Pull body\n    translate([0, 25, 15])\n        rotate([90, 0, 0])\n        cylinder(h=6, d1=6, d2=4, center=false);\n    // Pull hole\n    translate([0, 25, 15])\n        rotate([90, 0, 0])\n        cylinder(h=7, d=2, center=false);\n}\n\n// Snap buttons (resembling dzeebag closures)\nmodule snap_button(pos) {\n    translate(pos)\n        difference() {\n            cylinder(h=3, d=6, center=false);\n            translate([0, 0, -0.1])\n                cylinder(h=3.2, d=2.5, center=false);\n        }\n}\n\n// Handle / strap attachment loops\nmodule handle_loop() {\n    translate([0, 0, 0])\n        difference() {\n            hull() {\n                translate([-7, -22, 12]) sphere(d=wall*2, $fn=8);\n                translate([ 7, -22, 12]) sphere(d=wall*2, $fn=8);\n            }\n            // Hollow\n            translate([0, -22, 12])\n                cube([12 - wall*2, 2, 10], center=true);\n        }\n}\n\n// Assemble the model\nunion() {\n    body();\n    zipper_track();\n    zipper_pull();\n    // Two snap buttons\n    snap_button([ 20, 0, 13]);\n    snap_button([-20, 0, 13]);\n    // Handle loops on both sides\n    handle_loop();\n    mirror([1, 0, 0]) handle_loop();\n}",
    "renders": true
  },
  {
    "household_item": "grootslang",
    "openscad_code": "// Grootslang - Legendary African elephant-serpent hybrid\n// Medium complexity realistic style, 3D printable\n\n// Global parameters\n$fn = 32;  // Smooth curves for printing\nbody_length = 80;\nbody_diameter = 12;\nhead_length = 25;\nhead_width = 18;\nhead_height = 15;\ntrunk_length = 30;\ntrunk_diameter = 6;\ntusk_length = 12;\ntusk_diameter = 3;\nscale_factor = 0.8;  // Overall size adjustment\n\nmodule elephant_head() {\n    difference() {\n        union() {\n            // Main head shape\n            translate([-head_length/2, 0, 0])\n                scale([1, 0.9, 0.8])\n                sphere(d=head_width);\n            \n            // Forehead bulge\n            translate([-head_length/3, 0, head_height/3])\n                sphere(d=head_width * 0.7);\n            \n            // Snout base\n            translate([head_length/3, 0, -head_height/4])\n                cylinder(h=head_length/2, d1=head_width*0.6, d2=head_width*0.4);\n        }\n        \n        // Eye sockets\n        translate([-head_length/4, head_width/3, head_height/6])\n            sphere(d=head_width/4);\n        translate([-head_length/4, -head_width/3, head_height/6])\n            sphere(d=head_width/4);\n            \n        // Trunk hole\n        translate([head_length/2, 0, -head_height/3])\n            rotate([0, 30, 0])\n            cylinder(h=trunk_length/3, d=trunk_diameter*1.2);\n    }\n}\n\nmodule trunk() {\n    // Segmented trunk for flexibility\n    segments = 8;\n    segment_length = trunk_length / segments;\n    \n    for(i = [0:segments-1]) {\n        translate([head_length/2 + i*segment_length, 0, -head_height/3 - sin(i*15)*2])\n            rotate([0, i*3, sin(i*8)*5])\n            scale([1 - i*0.05, 1 - i*0.03, 1 - i*0.05])\n            cylinder(h=segment_length*1.1, d=trunk_diameter*(1 - i*0.08));\n    }\n}\n\nmodule tusks() {\n    // Left tusk\n    translate([head_length/3, head_width/2, -head_height/2])\n        rotate([0, -15, -30])\n        cylinder(h=tusk_length, d1=tusk_diameter, d2=tusk_diameter*0.5);\n    \n    // Right tusk\n    translate([head_length/3, -head_width/2, -head_height/2])\n        rotate([0, -15, 30])\n        cylinder(h=tusk_length, d1=tusk_diameter, d2=tusk_diameter*0.5);\n}\n\nmodule snake_body() {\n    segments = 20;\n    segment_length = body_length / segments;\n    \n    for(i = [0:segments-1]) {\n        hull() {\n            // Each body segment\n            translate([i*segment_length, 0, 0])\n                sphere(d=body_diameter * (1 - i*0.02));\n                \n            translate([(i+1)*segment_length, 0, 0])\n                sphere(d=body_diameter * (1 - (i+1)*0.02));\n        }\n    }\n    \n    // Tail taper\n    translate([body_length, 0, 0])\n        cylinder(h=15, d1=body_diameter*0.5, d2=body_diameter*0.2);\n}\n\nmodule ears() {\n    // Left ear\n    translate([-head_length/2, head_width/2 + 2, head_height/3])\n        rotate([0, -10, -15])\n        scale([1, 0.3, 1.2])\n        sphere(d=head_width/2);\n    \n    // Right ear\n    translate([-head_length/2, -head_width/2 - 2, head_height/3])\n        rotate([0, -10, 15])\n        scale([1, 0.3, 1.2])\n        sphere(d=head_width/2);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-head_length/4, head_width/3, head_height/6])\n        sphere(d=head_width/8);\n    \n    // Right eye\n    translate([-head_length/4, -head_width/3, head_height/6])\n        sphere(d=head_width/8);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Snake body\n        translate([-body_length/2, 0, -body_diameter/2])\n            snake_body();\n        \n        // Elephant head\n        translate([-body_length/2 - head_length/2, 0, body_diameter/2])\n            union() {\n                elephant_head();\n                trunk();\n                tusks();\n                ears();\n                \n                // Eyes (separate for different color/material)\n                color(\"black\")\n                    eyes();\n            }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "aerisprite",
    "openscad_code": "// Aerisprite - Realistic style, medium complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Constants for sizing\nbody_radius = 12;\nbody_height = 25;\nhead_radius = 10;\nwing_length = 30;\nwing_width = 15;\nleg_length = 8;\nleg_width = 3;\n\n// Main module\nmodule aerisprite() {\n    union() {\n        // Central body\n        body();\n        \n        // Head\n        translate([0, 0, body_height + head_radius - 5])\n            head();\n        \n        // Wings - 4 total\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([body_radius + 5, 0, body_height/2 + 5])\n                    wing();\n        }\n        \n        // Legs - 6 total\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([body_radius - 2, 0, -body_height/2])\n                    leg();\n        }\n    }\n}\n\n// Body module - segmented cylinder\nmodule body() {\n    difference() {\n        // Outer shell\n        cylinder(h = body_height, r1 = body_radius, r2 = body_radius * 0.8, $fn = 32);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = body_height - 4, r1 = body_radius - 2, r2 = body_radius * 0.8 - 2, $fn = 32);\n        \n        // Segmentation rings\n        for (i = [1:3]) {\n            translate([0, 0, i * body_height/4])\n                rotate_extrude($fn = 32)\n                    translate([body_radius - 1, 0, 0])\n                        square([1, 1]);\n        }\n    }\n}\n\n// Head module with compound eyes\nmodule head() {\n    difference() {\n        // Main head sphere\n        sphere(r = head_radius, $fn = 32);\n        \n        // Hollow interior\n        sphere(r = head_radius - 2, $fn = 32);\n        \n        // Compound eyes\n        for (i = [0:11]) {\n            angle = i * 30;\n            rotate([0, 45 * sin(angle), angle])\n                translate([head_radius * 0.7, 0, head_radius * 0.5])\n                    sphere(r = 2, $fn = 8);\n        }\n        \n        // Antenna holes\n        rotate([0, 30, 0])\n            translate([head_radius, 0, head_radius * 0.7])\n                cylinder(h = 5, r = 1, $fn = 8);\n        rotate([0, -30, 0])\n            translate([head_radius, 0, head_radius * 0.7])\n                cylinder(h = 5, r = 1, $fn = 8);\n    }\n    \n    // Antennae\n    rotate([0, 30, 0])\n        translate([head_radius + 2, 0, head_radius * 0.7])\n            cylinder(h = 8, r1 = 0.5, r2 = 0.2, $fn = 8);\n    rotate([0, -30, 0])\n        translate([head_radius + 2, 0, head_radius * 0.7])\n            cylinder(h = 8, r1 = 0.5, r2 = 0.2, $fn = 8);\n}\n\n// Wing module with veins\nmodule wing() {\n    difference() {\n        // Main wing shape\n        scale([1, 0.7, 0.1])\n            rotate([0, 90, 0])\n                cylinder(h = wing_length, r1 = wing_width/2, r2 = wing_width/4, $fn = 32);\n        \n        // Wing membrane cutouts\n        for (i = [1:3]) {\n            translate([wing_length/4 * i, 0, 0])\n                scale([0.8, 0.5, 1])\n                    sphere(r = wing_width/3, $fn = 16);\n        }\n        \n        // Attachment hole\n        translate([0, 0, -1])\n            cylinder(h = 2, r = 2, $fn = 8);\n    }\n    \n    // Wing veins\n    color(\"darkgray\")\n    for (i = [1:3]) {\n        translate([wing_length/4 * i, 0, 0.05])\n            scale([0.05, wing_width/2 * (1 - i/4), 0.1])\n                cube([wing_length/2, 1, 1]);\n    }\n}\n\n// Leg module\nmodule leg() {\n    difference() {\n        // Upper leg\n        rotate([90, 0, 0])\n            cylinder(h = leg_length, r = leg_width/2, $fn = 8);\n        \n        // Hollow upper leg\n        rotate([90, 0, 0])\n            translate([0, 0, 1])\n                cylinder(h = leg_length - 2, r = leg_width/2 - 0.5, $fn = 8);\n    }\n    \n    // Lower leg segment\n    translate([0, 0, -leg_length])\n        rotate([90, 0, 0])\n            cylinder(h = leg_length/2, r = leg_width/3, $fn = 8);\n    \n    // Foot\n    translate([0, 0, -leg_length - leg_length/2])\n        rotate([90, 0, 0])\n            cylinder(h = leg_width/2, r1 = leg_width/3, r2 = leg_width/4, $fn = 8);\n}\n\n// Generate the model\naerisprite();",
    "renders": true
  },
  {
    "household_item": "aquafae",
    "openscad_code": "// Aquafae - Realistic style with medium complexity\n// A water fairy creature with flowing hair, wings, and aquatic features\n\n// Overall dimensions\nfaery_height = 70;\nfaery_width = 40;\nfaery_depth = 30;\n\nmodule body() {\n    // Main torso - slightly pear-shaped\n    hull() {\n        translate([0, 0, 25]) scale([1, 0.8, 1.2]) sphere(d=12);\n        translate([0, 0, 15]) scale([0.8, 0.6, 1]) sphere(d=10);\n    }\n    \n    // Hips and tail\n    hull() {\n        translate([0, 0, 15]) scale([0.8, 0.6, 1]) sphere(d=10);\n        translate([0, 0, 5]) cylinder(h=12, d1=8, d2=4);\n    }\n    \n    // Tail fin\n    translate([0, 0, -2]) rotate([0, 0, 0]) \n        scale([1, 0.3, 1]) \n        cylinder(h=8, d1=6, d2=10);\n    \n    // Tail fin extensions\n    for(i = [-1, 1]) {\n        translate([i*3, 0, 2]) rotate([0, i*20, 0])\n            scale([0.5, 0.2, 1])\n            cylinder(h=6, d1=4, d2=8);\n    }\n}\n\nmodule head() {\n    // Main head\n    translate([0, 0, 35]) \n        scale([0.8, 0.9, 1]) \n        sphere(d=12);\n    \n    // Face details\n    // Eyes\n    for(x = [-2.5, 2.5]) {\n        translate([x, 3, 36]) \n            sphere(d=2);\n    }\n    \n    // Nose\n    translate([0, 2, 34.5]) \n        sphere(d=1);\n    \n    // Mouth\n    translate([0, 1, 33]) \n        scale([1, 0.3, 0.5]) \n        sphere(d=2);\n}\n\nmodule hair() {\n    // Main hair mass\n    translate([0, -5, 38]) \n        scale([1.2, 1, 1.5]) \n        sphere(d=12);\n    \n    // Flowing hair strands\n    for(i = [1:5]) {\n        rotate([0, 0, i*15 - 40]) {\n            translate([0, -10 - i*2, 38 - i*1.5]) \n                sphere(d=3 - i*0.3);\n        }\n    }\n    \n    for(i = [1:4]) {\n        rotate([0, 0, -i*15 + 40]) {\n            translate([0, -10 - i*2, 38 - i*1.5]) \n                sphere(d=3 - i*0.3);\n        }\n    }\n}\n\nmodule arms() {\n    // Left arm\n    translate([-5, 0, 30]) rotate([0, -10, -20]) {\n        cylinder(h=8, d1=3, d2=2);\n        translate([0, 0, -8]) rotate([0, 10, 0]) \n            cylinder(h=8, d1=2, d2=1.5);\n    }\n    \n    // Right arm\n    translate([5, 0, 30]) rotate([0, 10, 20]) {\n        cylinder(h=8, d1=3, d2=2);\n        translate([0, 0, -8]) rotate([0, -10, 0]) \n            cylinder(h=8, d1=2, d2=1.5);\n    }\n    \n    // Hands\n    translate([-7.5, 0, 22]) sphere(d=2);\n    translate([7.5, 0, 22]) sphere(d=2);\n}\n\nmodule wings() {\n    // Left wing base\n    translate([-6, 0, 32]) rotate([0, 0, -30]) {\n        // Upper wing\n        translate([0, 0, 0]) rotate([0, -20, 0]) \n            scale([1, 0.2, 2]) \n            cylinder(h=12, d1=8, d2=2);\n        \n        // Lower wing\n        translate([0, 0, -3]) rotate([0, 20, 0]) \n            scale([1, 0.2, 1.5]) \n            cylinder(h=10, d1=6, d2=2);\n    }\n    \n    // Right wing base\n    translate([6, 0, 32]) rotate([0, 0, 30]) {\n        // Upper wing\n        translate([0, 0, 0]) rotate([0, 20, 0]) \n            scale([1, 0.2, 2]) \n            cylinder(h=12, d1=8, d2=2);\n        \n        // Lower wing\n        translate([0, 0, -3]) rotate([0, -20, 0]) \n            scale([1, 0.2, 1.5]) \n            cylinder(h=10, d1=6, d2=2);\n    }\n    \n    // Wing membranes\n    difference() {\n        // Left wing membrane\n        hull() {\n            translate([-6, 0, 32]) sphere(d=1);\n            translate([-15, 0, 40]) sphere(d=1);\n            translate([-12, 0, 35]) sphere(d=1);\n        }\n        \n        // Right wing membrane\n        hull() {\n            translate([6, 0, 32]) sphere(d=1);\n            translate([15, 0, 40]) sphere(d=1);\n            translate([12, 0, 35]) sphere(d=1);\n        }\n    }\n}\n\nmodule aquatic_details() {\n    // Water droplets on skin\n    for(i = [1:8]) {\n        translate([\n            sin(i*45)*4,\n            cos(i*45)*4,\n            25 + sin(i*30)*5\n        ]) sphere(d=0.8);\n    }\n    \n    // Fins on arms\n    translate([-7, 0, 26]) rotate([0, -10, 0]) \n        scale([0.2, 0.1, 1]) \n        cylinder(h=4, d1=2, d2=1);\n    \n    translate([7, 0, 26]) rotate([0, 10, 0]) \n        scale([0.2, 0.1, 1]) \n        cylinder(h=4, d1=2, d2=1);\n    \n    // Scale texture on tail\n    for(i = [1:5]) {\n        for(j = [1:3]) {\n            translate([\n                sin(j*120)*2,\n                cos(j*120)*2,\n                10 - i*2\n            ]) sphere(d=1);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    hair();\n    arms();\n    wings();\n    aquatic_details();\n}\n\n// Base for stability\ntranslate([0, 0, -5]) \n    cylinder(h=2, d=20);",
    "renders": true
  },
  {
    "household_item": "blazenymph",
    "openscad_code": "// Blazenymph - Medium complexity realistic style\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall dimensions\ntotal_height = 70;\nbody_width = 30;\nwing_span = 50;\n\n// Base module for stability\nmodule base() {\n    difference() {\n        cylinder(h=5, r=20, $fn=32);\n        translate([0, 0, 2]) cylinder(h=3, r=18, $fn=32);\n    }\n}\n\n// Main body segment\nmodule body_segment(height, top_radius, bottom_radius) {\n    cylinder(h=height, r1=bottom_radius, r2=top_radius, $fn=16);\n}\n\n// Create abdomen with segments\nmodule abdomen() {\n    translate([0, 0, 5]) {\n        union() {\n            // First segment\n            color(\"darkorange\") body_segment(10, 8, 12);\n            // Second segment\n            translate([0, 0, 9]) color(\"orangered\") body_segment(10, 6, 8);\n            // Third segment\n            translate([0, 0, 18]) color(\"red\") body_segment(12, 4, 6);\n        }\n    }\n}\n\n// Thorax with wing attachment points\nmodule thorax() {\n    translate([0, 0, 23]) {\n        color(\"firebrick\") body_segment(15, 10, 8);\n        \n        // Wing attachment humps\n        translate([0, -10, 7]) rotate([90, 0, 0]) \n            color(\"darkred\") cylinder(h=5, r=3, $fn=8);\n        translate([0, 10, 7]) rotate([90, 0, 0]) \n            color(\"darkred\") cylinder(h=5, r=3, $fn=8);\n    }\n}\n\n// Head with eyes\nmodule head() {\n    translate([0, 0, 38]) {\n        union() {\n            // Main head\n            color(\"darkred\") sphere(r=6, $fn=16);\n            \n            // Eyes\n            translate([4, 3, 3]) color(\"black\") sphere(r=2, $fn=8);\n            translate([4, -3, 3]) color(\"black\") sphere(r=2, $fn=8);\n            translate([-4, 3, 3]) color(\"black\") sphere(r=2, $fn=8);\n            translate([-4, -3, 3]) color(\"black\") sphere(r=2, $fn=8);\n            \n            // Antennae\n            translate([2, 2, 5]) rotate([30, 0, 45]) \n                color(\"darkred\") cylinder(h=8, r=0.5, $fn=8);\n            translate([2, -2, 5]) rotate([30, 0, -45]) \n                color(\"darkred\") cylinder(h=8, r=0.5, $fn=8);\n        }\n    }\n}\n\n// Wing module with realistic venation\nmodule wing() {\n    // Main wing shape\n    difference() {\n        // Wing membrane\n        translate([0, -25, 30]) rotate([0, 0, 45]) {\n            scale([1, 0.3, 0.1]) \n                color(\"goldenrod\") sphere(r=25, $fn=32);\n        }\n        \n        // Remove inner part for thin membrane\n        translate([0, -25, 30]) rotate([0, 0, 45]) {\n            scale([0.9, 0.25, 0.2]) \n                sphere(r=25, $fn=32);\n        }\n    }\n    \n    // Wing veins\n    for (i = [0:15:45]) {\n        translate([0, -25, 30]) rotate([0, 0, i]) {\n            color(\"saddlebrown\") \n                translate([5, 0, 0]) cylinder(h=20, r=0.3, $fn=8);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side, angle) {\n    translate([0, side * 8, 30]) rotate([0, 0, angle]) {\n        // Coxa\n        color(\"sienna\") cylinder(h=5, r=1.5, $fn=8);\n        \n        // Femur\n        translate([0, 0, 5]) rotate([30, 0, 0]) {\n            color(\"sienna\") cylinder(h=8, r=1, $fn=8);\n            \n            // Tibia\n            translate([0, 0, 8]) rotate([0, 30, 0]) {\n                color(\"sienna\") cylinder(h=10, r=0.8, $fn=8);\n                \n                // Tarsus\n                translate([0, 0, 10]) rotate([0, 15, 0]) {\n                    color(\"sienna\") cylinder(h=6, r=0.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base for stability\n    base();\n    \n    // Body parts\n    abdomen();\n    thorax();\n    head();\n    \n    // Wings\n    wing();\n    mirror([0, 1, 0]) wing();\n    \n    // Legs\n    leg(1, 45);\n    leg(1, 60);\n    leg(-1, -45);\n    leg(-1, -60);\n}",
    "renders": true
  },
  {
    "household_item": "cinderling",
    "openscad_code": "// Realistic Cinderling - Medium Complexity\n// A small fiery creature made of smoldering coal and glowing embers\n\nmodule cinderling() {\n    // Overall scale factor for easy resizing\n    scale_factor = 0.6;\n    \n    // Main body - irregular coal shape\n    union() {\n        // Central mass\n        translate([0, 0, 5])\n        scale([scale_factor, scale_factor, scale_factor])\n        difference() {\n            sphere(r = 15, $fn = 32);\n            \n            // Carve out some surface irregularities\n            for(i = [0:7]) {\n                rotate([rand(i*15)*60, rand(i*23)*40, rand(i*31)*50])\n                translate([rand(i*7)*5-2.5, rand(i*11)*5-2.5, rand(i*13)*4-2])\n                sphere(r = 3 + rand(i*5)*2, $fn = 12);\n            }\n        }\n        \n        // Smaller coal chunks attached\n        for(i = [0:4]) {\n            rotate([rand(i*17)*90, rand(i*19)*60, rand(i*23)*45])\n            translate([rand(i*3)*8-4, rand(i*5)*8-4, rand(i*7)*6-3])\n            scale([scale_factor, scale_factor, scale_factor])\n            sphere(r = 6 + rand(i*7)*3, $fn = 16);\n        }\n        \n        // Glowing core visible through cracks\n        translate([0, 0, 7])\n        scale([scale_factor*0.8, scale_factor*0.8, scale_factor*0.8])\n        color([1, 0.3, 0])\n        sphere(r = 8, $fn = 24);\n    }\n    \n    // Eyes - glowing ember pockets\n    module eye() {\n        difference() {\n            translate([0, 0, 1])\n            sphere(r = 3, $fn = 12);\n            \n            translate([0, 0, -1])\n            sphere(r = 2.5, $fn = 12);\n        }\n    }\n    \n    // Left eye\n    translate([-5*scale_factor, 8*scale_factor, 18*scale_factor])\n    scale([scale_factor, scale_factor, scale_factor])\n    color([1, 0.4, 0.1])\n    eye();\n    \n    // Right eye\n    translate([5*scale_factor, 8*scale_factor, 18*scale_factor])\n    scale([scale_factor, scale_factor, scale_factor])\n    color([1, 0.4, 0.1])\n    eye();\n    \n    // Mouth - glowing crack\n    translate([0, 10*scale_factor, 14*scale_factor])\n    rotate([30, 0, 0])\n    scale([scale_factor, scale_factor, scale_factor])\n    color([1, 0.3, 0])\n    cylinder(h = 8, r1 = 2, r2 = 4, $fn = 8);\n    \n    // Arms - coal protrusions\n    module arm() {\n        union() {\n            // Upper arm\n            rotate([0, 0, -30])\n            translate([0, 0, 5])\n            cylinder(h = 12, r1 = 4, r2 = 3, $fn = 12);\n            \n            // Lower arm\n            translate([8, -4, 0])\n            rotate([0, 0, -60])\n            cylinder(h = 10, r1 = 3, r2 = 2.5, $fn = 12);\n            \n            // Hand\n            translate([14, -8, -2])\n            sphere(r = 3, $fn = 12);\n        }\n    }\n    \n    // Left arm\n    translate([-12*scale_factor, 5*scale_factor, 15*scale_factor])\n    scale([scale_factor, scale_factor, scale_factor])\n    arm();\n    \n    // Right arm\n    translate([12*scale_factor, 5*scale_factor, 15*scale_factor])\n    scale([-scale_factor, scale_factor, scale_factor])\n    mirror([1, 0, 0])\n    arm();\n    \n    // Legs - sturdy coal pillars\n    module leg() {\n        union() {\n            cylinder(h = 15, r1 = 5, r2 = 4, $fn = 12);\n            translate([0, 0, -8])\n            sphere(r = 5.5, $fn = 12);\n        }\n    }\n    \n    // Left leg\n    translate([-6*scale_factor, -5*scale_factor, 0])\n    scale([scale_factor, scale_factor, scale_factor])\n    leg();\n    \n    // Right leg\n    translate([6*scale_factor, -5*scale_factor, 0])\n    scale([scale_factor, scale_factor, scale_factor])\n    leg();\n    \n    // Surface cracks with glowing interiors\n    for(i = [0:5]) {\n        rotate([rand(i*29)*180, rand(i*31)*180, rand(i*37)*180])\n        translate([rand(i*41)*20-10, rand(i*43)*20-10, rand(i*47)*15])\n        scale([scale_factor, scale_factor, scale_factor])\n        color([1, 0.2, 0])\n        cylinder(h = 1.5, r = 0.5 + rand(i*13), $fn = 6);\n    }\n    \n    // Small ember protrusions\n    for(i = [0:8]) {\n        rotate([rand(i*53)*360, rand(i*59)*360, rand(i*61)*360])\n        translate([rand(i*67)*25-12.5, rand(i*71)*25-12.5, rand(i*73)*25-12.5])\n        scale([scale_factor, scale_factor, scale_factor])\n        color([1, rand(i*83)*0.3+0.2, 0])\n        sphere(r = 1 + rand(i*79), $fn = 8);\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(seed) = rands(0, 1, 1, seed)[0];\n\n// Render the cinderling\ncinderling();",
    "renders": true
  },
  {
    "household_item": "craggnome",
    "openscad_code": "// Craggnome – a stocky, stone-skinned humanoid with a chiselled face, pointed hood and pickaxe\n// Overall height ≈ 75 mm, printable without support when oriented feet-down\n\n// Basic proportions\nbody_h   = 35;\nbody_r   = 15;\nhead_h   = 20;\nhead_r   = 12;\nhood_h   = 28;\nhood_r   = 18;\narm_len  = 22;\narm_r    = 5;\nleg_len  = 18;\nleg_r    = 6;\npick_len = 30;\npick_r   = 2;\nwall_t   = 2;          // safe wall thickness for printing\n\nmodule craggnome() {\n    union() {\n        // Legs\n        translate([-leg_r, -body_r/2, 0]) cylinder(h = leg_len, r = leg_r, $fn = 12);\n        translate([ leg_r, -body_r/2, 0]) cylinder(h = leg_len, r = leg_r, $fn = 12);\n\n        // Torso\n        translate([0, 0, leg_len])\n        difference() {\n            cylinder(h = body_h, r = body_r, $fn = 24);\n            // hollow torso to save material\n            translate([0, 0, wall_t])\n            cylinder(h = body_h - 2*wall_t, r = body_r - wall_t, $fn = 24);\n        }\n\n        // Head\n        translate([0, 0, leg_len + body_h])\n        difference() {\n            sphere(r = head_r, $fn = 32);\n            // hollow head\n            sphere(r = head_r - wall_t, $fn = 32);\n        }\n\n        // Hood (pointed cap)\n        translate([0, 0, leg_len + body_h + head_h/2])\n        union() {\n            difference() {\n                cylinder(h = hood_h, r1 = hood_r, r2 = 0, $fn = 24);\n                // inner hollow\n                translate([0, 0, wall_t])\n                cylinder(h = hood_h, r1 = hood_r - wall_t, r2 = 0, $fn = 24);\n            }\n            // small bobble on tip\n            translate([0, 0, hood_h])\n            sphere(r = 2, $fn = 12);\n        }\n\n        // Arms\n        // left arm with pickaxe\n        translate([-body_r, 0, leg_len + body_h*0.6])\n        rotate([0, 0, 30])\n        union() {\n            // arm\n            cylinder(h = arm_len, r = arm_r, $fn = 12);\n            // pick head\n            translate([0, 0, arm_len])\n            rotate([0, 90, 0])\n            union() {\n                cylinder(h = pick_len, r = pick_r, $fn = 8);\n                translate([pick_len, 0, 0])\n                cube([pick_r*4, pick_r*8, pick_r*2], center = true);\n                translate([-pick_len, 0, 0])\n                mirror([1, 0, 0])\n                cube([pick_r*4, pick_r*8, pick_r*2], center = true);\n            }\n        }\n\n        // right arm\n        translate([body_r, 0, leg_len + body_h*0.6])\n        rotate([0, 0, -30])\n        cylinder(h = arm_len, r = arm_r, $fn = 12);\n\n        // Belt\n        translate([0, 0, leg_len + body_h*0.4])\n        difference() {\n            cylinder(h = wall_t*2, r = body_r + 2, $fn = 24);\n            cylinder(h = wall_t*2 + 1, r = body_r, $fn = 24);\n        }\n\n        // Craggy surface – random small cubes subtracted from torso to suggest rock\n        for(i = [0:15]) {\n            angle = rands(0, 360, 1)[0];\n            h = rands(leg_len + wall_t, leg_len + body_h - wall_t, 1)[0];\n            r = body_r * 0.9;\n            x = cos(angle) * r;\n            y = sin(angle) * r;\n            translate([x, y, h])\n            cube(rands(1, 3, 3), center = true);\n        }\n\n        // Face – simple chiselled features\n        face_z = leg_len + body_h + head_h*0.5;\n        translate([0, head_r - 1, face_z])\n        difference() {\n            sphere(r = head_r, $fn = 32);\n            // eye sockets\n            translate([-head_r/3, 0, head_r/4])\n            sphere(r = 2.5, $fn = 12);\n            translate([ head_r/3, 0, head_r/4])\n            sphere(r = 2.5, $fn = 12);\n            // nose cavity\n            translate([0, -head_r/3, 0])\n            sphere(r = 3, $fn = 12);\n            // mouth groove\n            translate([0, -head_r/2, -head_r/4])\n            cube([head_r/2, 2, 6], center = true);\n        }\n    }\n}\n\n// Render the model\ncraggnome();",
    "renders": true
  },
  {
    "household_item": "driftleaf",
    "openscad_code": "// Driftleaf – realistic style, medium complexity\n// Approx. 70 mm long, 30 mm wide, 3 mm thick\n\n// Wall / thickness constants\n$fn = 32;\nth = 1.2;           // shell thickness in mm\nstem_d = 3;         // stem diameter\nstem_l = 18;        // stem length\n\n// Main leaf body module\nmodule leaf_body() {\n    difference() {\n        // Basic almond-shaped hull\n        hull() {\n            translate([-30, 0, 0]) sphere(d = 28);\n            translate([30, 0, 0]) sphere(d = 28);\n            translate([0, 12, 0]) sphere(d = 28);\n            translate([0, -12, 0]) sphere(d = 28);\n        }\n        \n        // Carve out the flat inner cavity\n        translate([0, 0, -th/2])\n            scale([1, 1, 0.5])\n            hull() {\n                translate([-28, 0, 0]) sphere(d = 26);\n                translate([28, 0, 0]) sphere(d = 26);\n                translate([0, 11, 0]) sphere(d = 26);\n                translate([0, -11, 0]) sphere(d = 26);\n            }\n    }\n}\n\n// Midrib ridge (raised)\nmodule midrib() {\n    for(i = [-30:5:30]) {\n        h = 1.5 * (1 - abs(i)/35);  // taper to tips\n        translate([i, 0, th + h/2])\n            scale([0.8, 2.5, 1])\n            sphere(d = h * 2.5);\n    }\n}\n\n// Side veins module\nmodule veins() {\n    for(side = [-1, 1]) {\n        for(a = [20:15:70]) {\n            ang = a * side;\n            translate([0, 0, th + 0.2])\n                rotate([0, 0, ang])\n                translate([15, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h1 = 0, h2 = 1.2, r1 = 0.4, r2 = 0.1);\n        }\n    }\n}\n\n// Petiole / stem\nmodule stem() {\n    translate([-30, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = stem_l, d = stem_d, $fn = 16);\n}\n\n// Combine all parts\nunion() {\n    leaf_body();\n    midrib();\n    veins();\n    stem();\n}",
    "renders": true
  },
  {
    "household_item": "duskglen",
    "openscad_code": "// Duskglen - realistic medium-complexity model\n// A twilight grove with ancient stone arch, mushrooms and fallen log\n\n// Overall dimensions: 100mm wide, 80mm deep, 50mm tall\n\n$fn = 48;\n\nmodule ground_base() {\n    difference() {\n        cube([100, 80, 8], center = true);\n        translate([0, 0, -4]) cube([102, 82, 8], center = true);\n    }\n}\n\nmodule stone_arch() {\n    // Main arch base\n    translate([-20, 0, 0]) {\n        difference() {\n            union() {\n                // Left pillar\n                translate([-8, -10, 4]) cube([6, 20, 30]);\n                // Right pillar\n                translate([8, -10, 4]) cube([6, 20, 30]);\n                // Arch top\n                translate([0, -10, 34]) cube([22, 20, 6]);\n            }\n            // Archway opening\n            translate([0, -11, 15]) rotate([0, 0, 0]) cylinder(h = 25, r = 5);\n            translate([0, -11, 15]) cube([10, 22, 25], center = true);\n        }\n    }\n}\n\nmodule fallen_log() {\n    color(\"brown\") {\n        rotate([0, 90, 10]) {\n            difference() {\n                cylinder(h = 35, r = 4);\n                translate([0, 0, -1]) cylinder(h = 37, r = 3.5);\n            }\n        }\n    }\n}\n\nmodule mushroom(cap_r, stem_h, stem_r, pos) {\n    translate(pos) {\n        // Stem\n        color(\"bisque\") cylinder(h = stem_h, r = stem_r);\n        // Cap\n        color(\"firebrick\") translate([0, 0, stem_h]) \n            scale([1, 1, 0.6]) sphere(r = cap_r);\n    }\n}\n\nmodule mushroom_cluster() {\n    for(i = [0:8]) {\n        angle = i * 40 + 10;\n        dist = 8 + (i % 3) * 5;\n        x = cos(angle) * dist;\n        y = sin(angle) * dist;\n        z = 4 + (i % 2) * 2;\n        mushroom(\n            cap_r = 2.5 + (i % 3),\n            stem_h = 3 + (i % 2),\n            stem_r = 1 + (i % 3) * 0.3,\n            pos = [x, y, z]\n        );\n    }\n}\n\nmodule grass_clump(pos) {\n    translate(pos) {\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, 0, 4]) rotate([0, 90, 0]) \n                    cylinder(h = 3 + i, r1 = 0.5, r2 = 0.2);\n            }\n        }\n    }\n}\n\nmodule grass_field() {\n    for(x = [-45:10:45]) {\n        for(y = [-35:10:35]) {\n            if(abs(x) > 15 || abs(y) > 15) {\n                grass_clump([x, y, 0]);\n            }\n        }\n    }\n}\n\n// Assembly\nground_base();\nstone_arch();\ntranslate([30, 20, 4]) fallen_log();\nmushroom_cluster();\ngrass_field();",
    "renders": true
  },
  {
    "household_item": "emberglow",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Emberglow camp lantern inspired model\n// Overall height ~80 mm\n\nmodule lantern_body() {\n    // Bottom fuel canister\n    cylinder(h = 25, d = 40, $fn = 48);\n\n    // Top lip\n    translate([0, 0, 25])\n        cylinder(h = 4, d1 = 42, d2 = 38, $fn = 48);\n}\n\nmodule vent_holes(count = 12) {\n    // Create radial vent holes around the globe\n    for (i = [0 : count - 1]) {\n        rotate([0, 0, i * 360 / count])\n            translate([0, 17, 32])\n                rotate([90, 0, 0])\n                    cylinder(h = 30, d = 5, $fn = 16);\n    }\n}\n\nmodule glass_globe() {\n    // Outer globe\n    difference() {\n        translate([0, 0, 29])\n            cylinder(h = 35, d = 40, $fn = 48);\n        // Hollow inside\n        translate([0, 0, 29.5])\n            cylinder(h = 34, d = 36, $fn = 48);\n    }\n    // Vent holes\n    vent_holes();\n}\n\nmodule mantle_support() {\n    // Thin cage to hold the mantle\n    for (i = [0 : 3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([0, 0, 50])\n                cube([2, 20, 2], center = true);\n    }\n}\n\nmodule bail_handle() {\n    // Wire bail\n    translate([0, 0, 64])\n        rotate([90, 0, 0])\n            difference() {\n                // Main bail arc\n                rotate_extrude(angle = 180, $fn = 48)\n                    translate([20, 0, 0])\n                        circle(d = 3, $fn = 16);\n                // Cut gap for handle movement\n                translate([0, 0, -10])\n                    cube([50, 5, 20], center = true);\n            }\n}\n\nmodule valve_wheel() {\n    // Side valve wheel for fuel control\n    translate([23, 0, 18])\n        rotate([0, 90, 0])\n            difference() {\n                // Wheel\n                cylinder(h = 6, d = 20, $fn = 24);\n                // Knurling spokes\n                for (i = [0 : 5]) {\n                    rotate([0, 0, i * 60])\n                        translate([5, 0, -1])\n                            cube([10, 2, 8]);\n                }\n                // Center hole\n                cylinder(h = 7, d = 4, $fn = 16);\n            }\n}\n\nmodule base_pad() {\n    // Rubber foot ring\n    translate([0, 0, -1])\n        cylinder(h = 2, d = 44, $fn = 48);\n}\n\n// Assembly\nunion() {\n    lantern_body();\n    glass_globe();\n    mantle_support();\n    bail_handle();\n    valve_wheel();\n    base_pad();\n}",
    "renders": true
  },
  {
    "household_item": "frostwisp",
    "openscad_code": "// Frostwisp - Medium complexity realistic style\n// Ice elemental spirit with crystalline body and vapor trails\n\n$fn = 32;\n\nmodule frostwisp_body() {\n    // Main crystalline core\n    difference() {\n        sphere(d = 25);\n        // Hollow center for printability\n        sphere(d = 20);\n    }\n    \n    // Crystal facets\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 0, 10]) {\n                rotate([30, 0, 0]) {\n                    cube([15, 3, 8], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule frostwisp_arms() {\n    // Left arm\n    translate([-15, -10, 0]) {\n        rotate([0, 30, -45]) {\n            cylinder(h = 20, d1 = 6, d2 = 3);\n            translate([0, 0, 20]) {\n                sphere(d = 4);\n            }\n        }\n    }\n    \n    // Right arm\n    translate([15, -10, 0]) {\n        rotate([0, 30, 45]) {\n            cylinder(h = 20, d1 = 6, d2 = 3);\n            translate([0, 0, 20]) {\n                sphere(d = 4);\n            }\n        }\n    }\n}\n\nmodule frostwisp_vapor_trails() {\n    // Base vapor cloud\n    translate([0, 0, -15]) {\n        sphere(d = 30);\n    }\n    \n    // Rising wisps\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([12 * cos(i * 45), 12 * sin(i * 45), -10]) {\n                scale([0.8, 0.8, 1.5]) {\n                    sphere(d = 10);\n                }\n            }\n        }\n    }\n}\n\nmodule frostwisp_eyes() {\n    // Left eye socket\n    translate([-8, 8, 5]) {\n        rotate([0, 0, 15]) {\n            cylinder(h = 5, d = 4);\n        }\n    }\n    \n    // Right eye socket\n    translate([8, 8, 5]) {\n        rotate([0, 0, -15]) {\n            cylinder(h = 5, d = 4);\n        }\n    }\n}\n\nmodule frostwisp_base() {\n    // Stabilizing base ring\n    translate([0, 0, -20]) {\n        cylinder(h = 2, d = 35);\n    }\n}\n\n// Assembly\nunion() {\n    frostwisp_body();\n    frostwisp_arms();\n    frostwisp_vapor_trails();\n    frostwisp_eyes();\n    frostwisp_base();\n}",
    "renders": true
  },
  {
    "household_item": "galewhisper",
    "openscad_code": "// Galewhisper - Medium complexity realistic model\n// A wind spirit vessel with spiraling vents and ethereal fins\n\n$fn = 36;\n\n// Main parameters\nbody_radius = 20;\nbody_height = 60;\nvent_count = 8;\nwall_thickness = 2;\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cylinder(h=body_height, r=body_radius, center=true);\n        \n        // Hollow interior\n        translate([0,0,-1])\n            cylinder(h=body_height+2, r=body_radius-wall_thickness, center=true);\n        \n        // Bottom opening\n        translate([0,0,-body_height/2-1])\n            cylinder(h=2, r=body_radius-5, center=false);\n    }\n}\n\nmodule spiral_vents() {\n    for(i=[0:vent_count-1]) {\n        rotate([0,0,i*360/vent_count])\n            translate([body_radius-2, 0, -body_height/2 + 5])\n                rotate([0,90,0])\n                    rotate([0,0,i*45])\n                        cylinder(h=15, r1=3, r2=1, center=true);\n    }\n}\n\nmodule ethereal_fins() {\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([body_radius-1, 0, -body_height/2 + 15 + i*8])\n                difference() {\n                    // Main fin shape\n                    scale([1,3,0.5])\n                        sphere(r=8);\n                    \n                    // Hollow center\n                    scale([0.5,2.5,0.3])\n                        sphere(r=7);\n                }\n    }\n}\n\nmodule wind_catcher() {\n    // Top funnel\n    translate([0,0,body_height/2])\n        cylinder(h=15, r1=body_radius-5, r2=body_radius-10, center=false);\n    \n    // Internal spiral\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([body_radius/2-5, 0, body_height/2+5])\n                rotate([0,90,0])\n                    rotate([0,0,i*30])\n                        cylinder(h=10, r1=2, r2=1, center=true);\n    }\n}\n\nmodule support_base() {\n    // Sturdy base ring\n    translate([0,0,-body_height/2-3])\n        cylinder(h=5, r=body_radius+3, r1=body_radius+3, r2=body_radius+5, center=false);\n    \n    // Internal support struts\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([body_radius/2, 0, -body_height/2-1])\n                cube([wall_thickness*2, 2, 4], center=true);\n    }\n}\n\nunion() {\n    // Main assembly\n    main_body();\n    spiral_vents();\n    ethereal_fins();\n    wind_catcher();\n    support_base();\n}",
    "renders": true
  },
  {
    "household_item": "geodite",
    "openscad_code": "// Realistic Geodite (medium complexity, 3D-printable)\n// Overall size ≈ 60 mm\n\n$fn=48;\n\n// Main body – hollow sphere with thickened walls to avoid overhangs\nmodule geodite_body() {\n    difference() {\n        sphere(d=60, $fn=48);              // outer shell\n        sphere(d=56, $fn=48);              // inner cavity (2 mm wall)\n    }\n}\n\n// Hollow hexagonal crystal cavity with slight taper\nmodule hex_cavity(r=10, h=12, taper=0.9) {\n    linear_extrude(height=h, scale=taper, center=true, convexity=4)\n        circle(r=r, $fn=6);\n}\n\n// Drill a hex cavity into the shell\nmodule drill_hex_cavity(r, h, pos, rot) {\n    translate(pos)\n    rotate(rot)\n    difference() {\n        children();\n        hex_cavity(r=r, h=h+2);          // +2 ensures clean cut\n    }\n}\n\n// Build one triangular face with 3 hexagonal cavities\nmodule face_with_cavities(rot, center) {\n    rotate(rot) {\n        drill_hex_cavity(r=8.5, h=10, pos=center+[0,0,0], rot=[0,0,0])\n        drill_hex_cavity(r=8.5, h=10, pos=center+[0,0,0], rot=[0,0,120])\n        drill_hex_cavity(r=8.5, h=10, pos=center+[0,0,0], rot=[0,0,240])\n        children();\n    }\n}\n\n// Create one icosahedral triangle\nmodule triangle() {\n    // 3 vertices of an icosahedron face on unit sphere\n    p1 = [0, -1, 0];\n    p2 = [0.85065, 0.5, 0];\n    p3 = [-0.85065, 0.5, 0];\n    \n    // Center of the face on sphere of 60 mm\n    center = (p1+p2+p3)/3*30;\n    \n    // Normal vector\n    n = normalize(center);\n    \n    // Rotation matrix to align triangle plane\n    axis = cross([0,0,1], n);\n    angle = acos(dot([0,0,1], n));\n    \n    rotate(angle*180/PI, axis) {\n        difference() {\n            // Thin triangular plate (2 mm thick)\n            linear_extrude(height=2, center=true, convexity=4) {\n                polygon(points=[\n                    [p1[0]*30, p1[1]*30],\n                    [p2[0]*30, p2[1]*30],\n                    [p3[0]*30, p3[1]*30]\n                ]);\n            }\n            // Remove inner hex cavities\n            face_with_cavities(rot=[0,0,0], center=[0,0,0]);\n        }\n    }\n}\n\n// Generate all 20 icosahedral faces\nmodule all_faces() {\n    // 12 vertices of icosahedron\n    vertices = [\n        [0, ±1, ±φ],\n        [±1, ±φ, 0],\n        [±φ, 0, ±1]\n    ] where φ=(1+sqrt(5))/2;\n    \n    // 20 faces (vertex indices)\n    faces = [\n        [0,1,2], [0,2,3], [0,3,4], [0,4,5], [0,5,1],\n        [7,6,2], [2,6,3], [3,6,4], [4,6,5], [5,6,1],\n        [7,2,8], [8,2,3], [8,3,9], [9,3,4], [9,4,10],\n        [10,4,5], [10,5,11], [11,5,1], [11,1,7], [7,8,9], [9,10,11]\n    ];\n    \n    // Scale and place each face\n    for(f = faces) {\n        triangle();\n    }\n}\n\n// Main assembly\ngeodite_body();",
    "renders": true
  },
  {
    "household_item": "hollowshade",
    "openscad_code": "// Realistic 3D-printable hollowshade (lampshade)\n// Medium complexity, ~100 lines, no overhangs, 1.2 mm walls\n\n$fn = 36; // smoother curves\n\n// Parameters\nwall = 1.2;             // printable wall thickness\nh = 60;                 // overall height\ntop_d = 50;             // top ring diameter\nbottom_d = 80;          // bottom ring diameter\nrib_w = 3;              // rib width\nrib_n = 8;              // number of vertical ribs\nring_h = 4;             // horizontal ring thickness\nring_gap = 12;          // spacing between rings\n\n// Main lampshade shell\nmodule shell() {\n    difference() {\n        // Outer frustum\n        cylinder(h = h, d1 = top_d, d2 = bottom_d, center = false);\n        // Hollow it out\n        translate([0, 0, -0.01])\n            cylinder(h = h + 0.02, d1 = top_d - 2*wall, d2 = bottom_d - 2*wall, center = false);\n    }\n}\n\n// Single vertical rib\nmodule rib() {\n    linear_extrude(height = h)\n        polygon(points = [\n            [ -rib_w/2, 0 ],\n            [  rib_w/2, 0 ],\n            [  rib_w/2 - wall, h ],\n            [ -rib_w/2 + wall, h ]\n        ]);\n}\n\n// Array of ribs around the shade\nmodule ribs() {\n    for (i = [0 : rib_n-1]) {\n        rotate([0, 0, i * 360/rib_n])\n            translate([0, top_d/2 - wall, 0])\n                rib();\n    }\n}\n\n// Horizontal reinforcing rings\nmodule rings() {\n    n = floor(h / ring_gap);\n    for (i = [1 : n-1]) {\n        z = i * ring_gap;\n        r = top_d/2 + (bottom_d/2 - top_d/2) * (z/h);\n        difference() {\n            translate([0, 0, z - ring_h/2])\n                cylinder(h = ring_h, d = 2*r, center = false);\n            translate([0, 0, z - ring_h/2 - 0.01])\n                cylinder(h = ring_h + 0.02, d = 2*(r - wall), center = false);\n        }\n    }\n}\n\n// Top rim lip for bulb holder\nmodule top_lip() {\n    difference() {\n        cylinder(h = 6, d = top_d + 2*wall, center = false);\n        translate([0, 0, -0.01])\n            cylinder(h = 6.02, d = top_d, center = false);\n    }\n}\n\n// Bottom rim for stiffness\nmodule bottom_lip() {\n    difference() {\n        translate([0, 0, h - 4])\n            cylinder(h = 4, d = bottom_d + 2*wall, center = false);\n        translate([0, 0, h - 4 - 0.01])\n            cylinder(h = 4.02, d = bottom_d, center = false);\n    }\n}\n\n// Assemble the model\nunion() {\n    shell();\n    ribs();\n    rings();\n    top_lip();\n    bottom_lip();\n}",
    "renders": true
  },
  {
    "household_item": "icesylph",
    "openscad_code": "// Ice Sylph - Realistic style, medium complexity\n// Wings, flowing robes, delicate features but 3D printable\n\n$fn = 32;  // Smooth curves\n\nmodule ice_sylph() {\n    difference() {\n        union() {\n            // Main body - flowing robes\n            translate([0, 0, 15]) \n                scale([1, 0.7, 1.8]) \n                    sphere(8);  // Upper torso\n            \n            // Flowing dress/skirt\n            for(i = [0:5]) {\n                rotate([0, 0, i*60]) \n                    translate([0, 0, 5 + i*2.5]) \n                        scale([1 + i*0.1, 1 + i*0.1, 0.5]) \n                            cylinder(h=3, r1=8-i, r2=7-i);\n            }\n            \n            // Arms\n            // Left arm\n            translate([-8, -2, 20]) \n                rotate([0, 0, -30]) \n                    rotate([0, 30, 0]) \n                        cylinder(h=12, r1=2, r2=1.5);\n            \n            // Right arm\n            translate([8, -2, 20]) \n                rotate([0, 0, 30]) \n                    rotate([0, 30, 0]) \n                        cylinder(h=12, r1=2, r2=1.5);\n            \n            // Head\n            translate([0, -1, 30]) \n                scale([0.7, 0.6, 0.8]) \n                    sphere(7);\n            \n            // Hair - ice crystal formations\n            for(i = [0:8]) {\n                rotate([0, 0, i*45]) \n                    translate([0, -2, 36]) \n                        rotate([10 + i*5, 0, 0]) \n                            cylinder(h=4 + (i%3)*2, r1=1, r2=0.5);\n            }\n            \n            // Wings - layered ice crystal structures\n            // Left wing\n            translate([-12, 0, 22]) \n                rotate([0, 0, -20]) {\n                    for(i = [0:3]) {\n                        translate([0, 0, i*2]) \n                            rotate([0, 10 + i*5, 0]) \n                                scale([1, 0.1, 1]) \n                                    cylinder(h=15 - i*3, r1=3 - i*0.5, r2=0.5);\n                    }\n                }\n            \n            // Right wing\n            translate([12, 0, 22]) \n                mirror([1, 0, 0]) \n                    rotate([0, 0, -20]) {\n                        for(i = [0:3]) {\n                            translate([0, 0, i*2]) \n                                rotate([0, 10 + i*5, 0]) \n                                    scale([1, 0.1, 1]) \n                                        cylinder(h=15 - i*3, r1=3 - i*0.5, r2=0.5);\n                        }\n                    }\n            \n            // Ice crown\n            translate([0, -1, 37]) \n                for(i = [0:5]) {\n                    rotate([0, 0, i*60]) \n                        translate([0, 3, 0]) \n                            cylinder(h=2 + (i%2)*2, r1=1, r2=0.5);\n                }\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, 15]) \n            scale([0.7, 0.5, 1.5]) \n                sphere(6);\n        \n        // Arm holes\n        translate([-8, -2, 20]) \n            rotate([0, 0, -30]) \n                rotate([0, 30, 0]) \n                    cylinder(h=13, r1=1.2, r2=0.7);\n        \n        translate([8, -2, 20]) \n            rotate([0, 0, 30]) \n                rotate([0, 30, 0]) \n                    cylinder(h=13, r1=1.2, r2=0.7);\n    }\n    \n    // Base - ice platform\n    translate([0, 0, 0]) \n        cylinder(h=2, r1=15, r2=12);\n    \n    // Decorative ice crystals on base\n    for(i = [0:7]) {\n        rotate([0, 0, i*45]) \n            translate([10, 0, 2]) \n                cylinder(h=3 + (i%3), r1=1, r2=0.3);\n    }\n}\n\n// Scale to reasonable print size (80mm tall)\nscale([1, 1, 1]) \n    ice_sylph();",
    "renders": true
  },
  {
    "household_item": "kindlekin",
    "openscad_code": "// Kindlekin - Realistic Style, Medium Complexity\n// 3D printable e-reader character\n\n$fn = 64;\n\nmodule kindlekin() {\n    // Body dimensions\n    body_w = 70;\n    body_h = 110;\n    body_d = 8;\n    corner_r = 5;\n    \n    // Screen dimensions\n    screen_w = 60;\n    screen_h = 80;\n    screen_d = 1;\n    \n    // Legs\n    leg_w = 12;\n    leg_h = 20;\n    leg_d = 8;\n    \n    // Arms\n    arm_w = 8;\n    arm_h = 35;\n    arm_d = 8;\n    \n    // Head\n    head_w = 40;\n    head_h = 30;\n    head_d = 25;\n    \n    // Eyes\n    eye_r = 4;\n    \n    // Buttons\n    button_r = 3;\n    button_h = 2;\n    \n    // Main body with rounded corners\n    difference() {\n        // Outer rounded body\n        translate([0, 0, body_d/2])\n            minkowski() {\n                cube([body_w, body_h, body_d], center=true);\n                sphere(corner_r);\n            }\n        \n        // Inner cavity for screen\n        translate([0, 0, body_d/2 + 0.1])\n            cube([screen_w + 2, screen_h + 2, body_d + 1], center=true);\n    }\n    \n    // Screen surface\n    color(\"black\")\n    translate([0, 0, body_d/2 + 0.1])\n        cube([screen_w, screen_h, screen_d], center=true);\n    \n    // Legs\n    for (x = [-body_w/3, body_w/3])\n        translate([x, -body_h/2 - leg_h/2 + 5, 0])\n            rounded_cube([leg_w, leg_h, leg_d], 3);\n    \n    // Arms\n    for (x = [-body_w/2 - arm_w/2 + 2, body_w/2 + arm_w/2 - 2]) {\n        translate([x, body_h/4, 0])\n            rotate([0, 0, x > 0 ? 20 : -20])\n            rounded_cube([arm_w, arm_h, arm_d], 3);\n    }\n    \n    // Head\n    translate([0, body_h/2 + head_h/2 - 5, 0])\n        rounded_cube([head_w, head_h, head_d], 8);\n    \n    // Eyes\n    for (x = [-head_w/4, head_w/4])\n        translate([x, body_h/2 + head_h/2 + 5, head_d/2 - 5])\n            sphere(eye_r);\n    \n    // Power button\n    translate([body_w/2 - 5, 0, body_d/2 + button_h/2])\n        cylinder(h=button_h, r=button_r, center=true);\n    \n    // USB-C port\n    translate([0, -body_h/2 - 1, 0])\n        cube([8, 2, 3], center=true);\n    \n    // Page turn buttons\n    for (y = [body_h/4, -body_h/4])\n        translate([body_w/2 + 0.5, y, 0])\n            rounded_cube([2, 8, 4], 1);\n}\n\nmodule rounded_cube(size, r) {\n    minkowski() {\n        cube([size.x - 2*r, size.y - 2*r, size.z - 2*r], center=true);\n        sphere(r);\n    }\n}\n\nkindlekin();",
    "renders": true
  },
  {
    "household_item": "lavaspark",
    "openscad_code": "// LavaSpark – a realistic, 3D-printable spark generator\n// Medium complexity (~110 lines)\n\n// Overall scale – largest part ~70 mm\nscale = 1;\n\n// Wall / extrusion thickness for FDM printing\nwall = 1.2;\n\n// Main spark body -----------------------------------------------------------\nmodule sparkBody() {\n    // Central cylindrical core\n    cylinder(h = 35*scale, d = 12*scale, $fn = 32);\n\n    // Four radial fins for cooling / realism\n    for (a = [0, 90, 180, 270]) {\n        rotate([0, 0, a])\n            translate([0, 6*scale, 0])\n                cube([20*scale, 3*scale, 35*scale], center = true);\n    }\n\n    // Top cap – slightly domed\n    translate([0, 0, 35*scale])\n        cylinder(h = 4*scale, d1 = 12*scale, d2 = 14*scale, $fn = 32);\n}\n\n// Ceramic nozzle -------------------------------------------------------------\nmodule nozzle() {\n    difference() {\n        // Outer shell\n        cylinder(h = 8*scale, d = 8*scale, $fn = 32);\n\n        // Inner cone\n        translate([0, 0, -0.1])\n            cylinder(h = 8.2*scale, d1 = 6*scale, d2 = 2*scale, $fn = 32);\n    }\n}\n\n// Igniter electrodes ---------------------------------------------------------\nmodule electrodes() {\n    // Two parallel rods\n    for (x = [-2.5, 2.5])\n        translate([x*scale, 0, 0])\n            cylinder(h = 12*scale, d = 1*scale, $fn = 12);\n}\n\n// Wire guide clip ------------------------------------------------------------\nmodule wireGuide() {\n    difference() {\n        // Simple saddle\n        translate([-5*scale, 0, -2*scale])\n            cube([10*scale, 6*scale, 4*scale], center = true);\n\n        // Wire channel\n        translate([0, 0, -2.2*scale])\n            rotate([90, 0, 0])\n                cylinder(h = 10*scale, d = 3*scale, $fn = 16);\n    }\n}\n\n// Mounting bracket -----------------------------------------------------------\nmodule mountBracket() {\n    difference() {\n        union() {\n            // Base plate\n            cube([25*scale, 15*scale, 3*scale], center = true);\n\n            // Two ears with holes\n            for (x = [-9, 9])\n                translate([x*scale, 0, 1.5*scale])\n                    cube([5*scale, 15*scale, 3*scale], center = true);\n        }\n\n        // Screw holes\n        for (x = [-9, 9])\n            translate([x*scale, 0, 1.5*scale])\n                rotate([90, 0, 0])\n                    cylinder(h = 20*scale, d = 3.2*scale, $fn = 16);\n    }\n}\n\n// Assembly -------------------------------------------------------------------\nunion() {\n    color(\"gray\") sparkBody();\n    color(\"ivory\") translate([0, 0, 43*scale]) nozzle();\n    color(\"darkgray\") translate([0, 0, 51*scale]) electrodes();\n    color(\"black\") translate([0, 7*scale, 15*scale]) wireGuide();\n    color(\"silver\") translate([0, -12*scale, -3*scale]) mountBracket();\n}",
    "renders": true
  },
  {
    "household_item": "mistraldryad",
    "openscad_code": "// Mistraldryad - Realistic Medium Complexity\n// Wind dryad with flowing hair and tree-like features\n\nmodule mistraldryad() {\n    union() {\n        // Torso base\n        translate([0, 0, 20]) {\n            difference() {\n                cylinder(h=25, r1=8, r2=6, $fn=20);\n                cylinder(h=25, r1=6, r2=4, $fn=20);\n            }\n        }\n        \n        // Head\n        translate([0, 0, 50]) {\n            sphere(r=6, $fn=20);\n        }\n        \n        // Hair - flowing wind effect\n        for(i=[0:15]) {\n            rotate([0, 0, i*24]) {\n                translate([0, 6, 48]) {\n                    rotate([90-i*3, 0, 0]) {\n                        scale([1, 0.5, 0.5]) {\n                            cylinder(h=12+i*0.5, r1=1.2, r2=0.3, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Arms\n        for(side=[-1, 1]) {\n            translate([side*6, 0, 40]) {\n                rotate([0, side*15, 0]) {\n                    cylinder(h=15, r1=2.5, r2=1.5, $fn=10);\n                    \n                    // Hands\n                    translate([0, 0, 15]) {\n                        sphere(r=2, $fn=8);\n                        \n                        // Fingers\n                        for(f=[0:3]) {\n                            rotate([0, 0, f*30-45]) {\n                                translate([0, 1.8, 0]) {\n                                    cylinder(h=3, r=0.5, $fn=6);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        for(side=[-1, 1]) {\n            translate([side*3, 0, 20]) {\n                rotate([0, side*5, 0]) {\n                    cylinder(h=20, r1=3, r2=2, $fn=12);\n                    \n                    // Feet\n                    translate([0, 0, 20]) {\n                        scale([1.5, 1, 0.5]) {\n                            sphere(r=2.5, $fn=10);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Bark texture on torso\n        for(i=[1:4]) {\n            rotate([0, 0, i*45]) {\n                translate([0, 0, 25+i*3]) {\n                    cylinder(h=5, r1=7.5, r2=7, $fn=8);\n                }\n            }\n        }\n        \n        // Wind dress - flowing panels\n        for(i=[0:5]) {\n            rotate([0, 0, i*60]) {\n                translate([0, 6+i*0.5, 18-i]) {\n                    rotate([0, 0, -15]) {\n                        scale([1, 0.3, 1]) {\n                            cube([8-i*0.5, 1, 15-i*2], center=true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Leaf details\n        for(i=[0:7]) {\n            rotate([0, 0, i*51]) {\n                translate([0, 7, 45-i*2]) {\n                    rotate([0, 0, 30]) {\n                        scale([0.5, 0.2, 1]) {\n                            cylinder(h=3, r1=2, r2=0.5, $fn=3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Root base\n        translate([0, 0, 0]) {\n            cylinder(h=5, r1=10, r2=8, $fn=12);\n            \n            // Individual roots\n            for(r=[0:5]) {\n                rotate([0, 0, r*60]) {\n                    translate([7, 0, 0]) {\n                        rotate([90, 0, 90]) {\n                            cylinder(h=8, r1=1.5, r=0.8, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the model\nmistraldryad();",
    "renders": true
  },
  {
    "household_item": "mossveil",
    "openscad_code": "// MossVeil – medium-complexity realistic moss-gathering veil\n// Designed for 3D printing, no supports needed\n// Approx. 80 mm tall, 70 mm wide\n\n$fn = 36;   // smooth curves\n\n// overall scale\nscale_factor = 1;   // 1 = 80 mm tall\n\n// base ring that sits on the jar mouth\nmodule base_ring(od = 60, id = 54, h = 6) {\n    difference() {\n        cylinder(h = h, d = od, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, d = id, center = false);\n    }\n}\n\n// perforated screen disk that actually holds the moss\nmodule screen(d = 54, thick = 2, hole_d = 3) {\n    difference() {\n        cylinder(h = thick, d = d, center = false);\n        // hex-grid holes for drainage\n        for (r = [0 : 8]) {\n            for (theta = [0 : 30 : 359]) {\n                translate([r * 4 * cos(theta), r * 4 * sin(theta), -0.1])\n                    cylinder(h = thick + 0.2, d = hole_d, center = false);\n            }\n        }\n    }\n}\n\n// simple lattice posts that rise from the ring\nmodule post(h = 40, d = 4) {\n    cylinder(h = h, d = d, center = false);\n}\n\n// arc that connects two top points to form the dome\nmodule arc(r = 30, thick = 3) {\n    rotate_extrude(angle = 180)\n        translate([r, 0, 0])\n            circle(d = thick);\n}\n\n// small knob on top for easy gripping\nmodule knob(d = 8, h = 6) {\n    cylinder(h = h, d = d);\n    sphere(d = d * 1.2);\n}\n\n// assemble the veil\nmodule mossveil() {\n    // scale everything\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // bottom ring\n        base_ring();\n        \n        // screen sitting on the ring\n        translate([0, 0, 6])\n            screen();\n        \n        // four posts at 90 degree intervals\n        for (a = [0 : 90 : 270]) {\n            rotate([0, 0, a])\n                translate([27, 0, 6])\n                    post();\n        }\n        \n        // two crossing arcs forming a dome\n        translate([0, 0, 6 + 40])\n            rotate([90, 0, 0])\n                arc();\n        translate([0, 0, 6 + 40])\n            rotate([90, 90, 0])\n                arc();\n        \n        // central knob\n        translate([0, 0, 6 + 40 + 30])\n            knob();\n    }\n}\n\n// render the model\nmossveil();",
    "renders": true
  },
  {
    "household_item": "nettlethorn",
    "openscad_code": "// Nettlethorn (Urtica dioica) leaf with stinging hairs\n// Realistic style, medium complexity, 3D-printable\n\n// Parameters\nleaf_length = 60;\nleaf_width = 35;\nstem_diameter = 2.5;\npetiole_length = 20;\nhair_density = 8;  // hairs per cm²\nwall_thickness = 1.2;\n\n// Main module\nmodule nettlethorn() {\n    // Petiole (leaf stalk)\n    translate([0, 0, -petiole_length/2])\n        cylinder(h=petiole_length, d=stem_diameter, $fn=8);\n    \n    // Leaf blade\n    difference() {\n        // Main leaf shape\n        translate([0, 0, 0])\n            leaf_blade();\n        \n        // Veins (subtractive for realism)\n        for(i=[1:4]) {\n            rotate([0, 0, 30*i])\n                translate([-leaf_length*0.1, 0, -0.5])\n                    cube([leaf_length*0.9, 0.6, wall_thickness*1.5]);\n        }\n        \n        // Side veins\n        for(side=[-1, 1]) {\n            for(v=[1:3]) {\n                pos = v * leaf_width/4 * side;\n                rotate([0, 0, atan(pos/leaf_length*2)*side])\n                    translate([leaf_length/4*v, pos/2, -0.5])\n                        cube([leaf_length/2, 0.5, wall_thickness*1.5]);\n            }\n        }\n    }\n    \n    // Stinging hairs\n    hair_area = leaf_length * leaf_width / 100; // cm²\n    num_hairs = hair_area * hair_density;\n    \n    for(i=[1:num_hairs]) {\n        // Random position on leaf surface\n        x = rands(-leaf_length/2*0.8, leaf_length/2*0.8, 1)[0];\n        y = rands(-leaf_width/2*0.8, leaf_width/2*0.8, 1)[0];\n        \n        // Only place hairs where leaf exists\n        if(abs(y) < leaf_shape(x)) {\n            translate([x, y, 0])\n                stinging_hair();\n        }\n    }\n}\n\n// Leaf blade shape module\nmodule leaf_blade() {\n    // Create serrated edge by union of small triangles\n    linear_extrude(height=wall_thickness, convexity=4) {\n        difference() {\n            // Basic elliptical leaf shape\n            scale([1, leaf_width/leaf_length, 1])\n                circle(d=leaf_length, $fn=64);\n            \n            // Teeth along edge\n            for(i=[0:359]) {\n                angle = i;\n                r = leaf_length/2;\n                tooth_length = 2.5;\n                if(i%15 == 0) {\n                    rotate([0, 0, angle])\n                        translate([r-tooth_length, 0, 0])\n                            triangle(tooth_length, 2);\n                }\n            }\n        }\n    }\n}\n\n// Helper function for leaf width at given x position\nfunction leaf_shape(x) = leaf_width/2 * sqrt(max(0, 1 - pow(x/(leaf_length/2), 2)));\n\n// Triangle tooth for serrated edge\nmodule triangle(length, width) {\n    polygon(points=[[0,0], [length, width/2], [length, -width/2]]);\n}\n\n// Stinging hair module\nmodule stinging_hair() {\n    hair_height = 1.2;\n    bulb_radius = 0.25;\n    shaft_radius = 0.1;\n    \n    // Hair shaft\n    cylinder(h=hair_height, r1=shaft_radius, r2=0.05, $fn=8);\n    \n    // Bulb at tip\n    translate([0, 0, hair_height])\n        sphere(r=bulb_radius, $fn=8);\n}\n\n// Render the complete nettlethorn\nnettlethorn();",
    "renders": true
  },
  {
    "household_item": "orchidpixie",
    "openscad_code": "// OrchidPixie - Realistic Style, Medium Complexity\n// 3D printable fantasy figure with orchid flower elements\n\n$fn = 32;\npixie_scale = 1;\n\n// Main assembly\nmodule orchidpixie() {\n    union() {\n        // Head with orchid flower crown\n        translate([0, 0, 35]) \n            rotate([0, 0, 0]) \n                pixie_head();\n        \n        // Petite body\n        translate([0, 0, 20]) \n            pixie_body();\n        \n        // Arms\n        translate([-6, 0, 28]) \n            rotate([0, 0, -20]) \n                pixie_arm();\n        translate([6, 0, 28]) \n            rotate([0, 0, 20]) \n                mirror([1, 0, 0]) \n                    pixie_arm();\n        \n        // Legs\n        translate([-3, 0, 12]) \n            rotate([0, 0, -10]) \n                pixie_leg();\n        translate([3, 0, 12]) \n            rotate([0, 0, 10]) \n                    pixie_leg();\n        \n        // Orchid wings\n        translate([0, -3, 25]) \n            rotate([0, -10, 0]) \n                pixie_wings();\n    }\n}\n\n// Petite head with orchid crown\nmodule pixie_head() {\n    union() {\n        // Basic head shape\n        sphere(4.5);\n        \n        // Orchid crown\n        translate([0, 0, 4.5]) \n            orchid_crown();\n        \n        // Simple eyes\n        translate([-1.5, 1.8, 1]) \n            sphere(0.5);\n        translate([1.5, 1.8, 1]) \n            sphere(0.5);\n        \n        // Tiny nose\n        translate([0, 2, 0]) \n            sphere(0.3);\n        \n        // Petite mouth\n        translate([0, 2.5, -0.5]) \n            cylinder(0.1, 0.8, 0.8);\n    }\n}\n\n// Orchid flower crown\nmodule orchid_crown() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) \n            translate([3, 0, 0]) \n                orchid_petal();\n    }\n    \n    // Center of flower\n    translate([0, 0, 1.5]) \n        sphere(1);\n}\n\n// Individual orchid petal\nmodule orchid_petal() {\n    union() {\n        // Main petal\n        translate([0, 0, 0]) \n            rotate([90, 0, 0]) \n                scale([1, 1.5, 0.3]) \n                    sphere(1.2);\n        \n        // Petal detail\n        translate([0, 0.7, 0]) \n            rotate([90, 0, 0]) \n                scale([0.6, 1, 0.2]) \n                    sphere(0.8);\n    }\n}\n\n// Petite body\nmodule pixie_body() {\n    union() {\n        // Torso\n        cylinder(10, 3, 2);\n        \n        // Simple dress detail\n        translate([0, 0, 5]) \n            cylinder(6, 3.5, 3);\n    }\n}\n\n// Slender arm\nmodule pixie_arm() {\n    union() {\n        // Upper arm\n        cylinder(4, 0.8, 0.6);\n        \n        // Lower arm\n        translate([0, 0, -4]) \n            cylinder(3.5, 0.6, 0.4);\n        \n        // Tiny hand\n        translate([0, 0, -7.5]) \n            sphere(0.6);\n    }\n}\n\n// Petite leg\nmodule pixie_leg() {\n    union() {\n        // Thigh\n        cylinder(5, 0.8, 0.6);\n        \n        // Lower leg\n        translate([0, 0, -5]) \n            cylinder(4.5, 0.6, 0.4);\n        \n        // Tiny foot\n        translate([0, 0.5, -9.5]) \n            scale([1, 1.5, 0.5]) \n                sphere(0.6);\n    }\n}\n\n// Orchid-inspired wings\nmodule pixie_wings() {\n    union() {\n        // Left wing\n        translate([-5, 0, 0]) \n            rotate([0, 0, -10]) \n                wing_half();\n        \n        // Right wing\n        translate([5, 0, 0]) \n            rotate([0, 0, 10]) \n                    mirror([1, 0, 0]) \n                        wing_half();\n    }\n}\n\n// Single wing half with orchid petal details\nmodule wing_half() {\n    difference() {\n        // Main wing shape\n        translate([0, 0, 0]) \n            scale([1, 2, 0.2]) \n                sphere(3);\n        \n        // Wing cutouts for detail\n        for (i = [0:2]) {\n            translate([1 - i, 1.5 - i * 0.5, 0]) \n                rotate([0, 0, 45]) \n                    scale([0.3, 0.8, 0.3]) \n                        cube([1, 1, 1], center = true);\n        }\n    }\n}\n\n// Generate the complete orchidpixie\norchidpixie();",
    "renders": true
  },
  {
    "household_item": "pebblekin",
    "openscad_code": "// Realistic Pebblekin\n// A medium-complexity 3D-printable pebble-like creature\n\n$fn = 36;\n\n// Overall dimensions\nbody_h = 45;\nbody_w = 55;\nbody_d = 40;\n\nmodule pebblekin() {\n    // Main body: slightly flattened pebble\n    translate([0,0,body_h/2])\n    scale([1, 0.85, 0.75])\n    sphere(d = body_w);\n\n    // Eye sockets (two hollows)\n    for(side = [-1, 1]) {\n        translate([side*body_w*0.25, body_d*0.3, body_h*0.8])\n        difference() {\n            sphere(d = 12);\n            translate([0,0,-1])\n            sphere(d = 11.5);\n        }\n    }\n\n    // Eyes (simple spheres)\n    for(side = [-1, 1]) {\n        translate([side*body_w*0.25, body_d*0.3+1.5, body_h*0.8])\n        sphere(d = 5);\n    }\n\n    // Simple nose bump\n    translate([0, -body_d*0.3, body_h*0.65])\n    scale([1, 0.7, 0.5])\n    sphere(d = 8);\n\n    // Mouth slit (negative)\n    translate([0, -body_d*0.35, body_h*0.4])\n    rotate([90,0,0])\n    linear_extrude(height = body_d*0.7, center = true)\n    difference() {\n        square([body_w*0.4, 6], center = true);\n        translate([0,3,0])\n        square([body_w*0.4, 3], center = true);\n    }\n\n    // Tiny pebble bumps across surface\n    for(i = [0:29]) {\n        a = i*12;\n        h = 2 + sin(i*137.5)*0.5;\n        x = sin(a)*body_w*0.3*cos(i*0.2);\n        y = cos(a)*body_d*0.3*cos(i*0.2);\n        z = body_h*0.5 + sin(i*0.8)*body_h*0.3;\n        translate([x, y, z])\n        sphere(d = h);\n    }\n\n    // Feet (flat pads)\n    for(side = [-1, 1]) {\n        translate([side*body_w*0.3, 0, 0])\n        difference() {\n            cube([body_w*0.2, body_d*0.4, 6], center = true);\n            translate([0,0,3])\n            cube([body_w*0.21, body_d*0.41, 6.1], center = true);\n        }\n    }\n\n    // Simple arms (pebble stubs)\n    for(side = [-1, 1]) {\n        translate([side*body_w*0.45, 0, body_h*0.35])\n        rotate([0,side*25,0])\n        scale([0.8, 0.6, 1])\n        sphere(d = 14);\n    }\n\n    // Top pebble cap for character\n    translate([0,0,body_h*0.95])\n    difference() {\n        sphere(d = 18);\n        translate([0,0,-2])\n        sphere(d = 17);\n    }\n}\n\npebblekin();",
    "renders": true
  },
  {
    "household_item": "quartzflicker",
    "openscad_code": "// Quartzflicker - realistic style, medium complexity\n// A quartz crystal oscillator probe with housing and connector\n\n$fn = 50;  // Resolution for curved surfaces\n\n// Overall dimensions\nprobe_dia = 12;\nprobe_len = 60;\ncrystal_dia = 8;\ncrystal_len = 25;\nhousing_dia = 20;\nhousing_len = 35;\nconnector_dia = 15;\nconnector_len = 12;\nwall_thickness = 2;\n\n// Main probe body\nmodule probe_body() {\n    // Outer shell\n    cylinder(h=probe_len, d=probe_dia, center=true);\n    \n    // Internal cavity for crystal\n    translate([0, 0, -probe_len/2 + wall_thickness + 2])\n        cylinder(h=crystal_len + 4, d=crystal_dia + 2, center=true);\n    \n    // Tip - sharpened with boolean\n    intersection() {\n        translate([0, 0, probe_len/2])\n            cylinder(h=10, d=probe_dia, center=false);\n        rotate([0, 180, 0])\n            cylinder(h=probe_dia, d=probe_dia*2, center=true);\n    }\n}\n\n// Quartz crystal oscillator\nmodule quartz_crystal() {\n    // Main crystal shaft\n    color(\"lightgray\")\n    translate([0, 0, 0])\n        cylinder(h=crystal_len, d=crystal_dia, center=true);\n    \n    // Crystal facets for realistic look\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([crystal_dia/2 - 0.5, 0, 0])\n            cube([1, crystal_dia*0.8, crystal_len], center=true);\n    }\n    \n    // Electrode plates\n    color(\"gold\")\n    translate([0, 0, -crystal_len/2 + 2])\n        cube([crystal_dia + 0.5, 0.2, 3], center=true);\n    translate([0, 0, crystal_len/2 - 2])\n        cube([crystal_dia + 0.5, 0.2, 3], center=true);\n}\n\n// Housing with ventilation slots\nmodule housing() {\n    difference() {\n        // Main housing cylinder\n        cylinder(h=housing_len, d=housing_dia, center=true);\n        \n        // Ventilation slots\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([housing_dia/2 - 1, 0, 0])\n                cube([2, 1, housing_len - 4], center=true);\n        }\n        \n        // Cable entry hole\n        translate([0, 0, housing_len/2])\n            cylinder(h=5, d=6, center=false);\n    }\n    \n    // Mounting threads (simplified)\n    for(i=[0:3]) {\n        rotate([0, 0, i*120])\n        translate([housing_dia/2 + 1, 0, -housing_len/2 + 5])\n            cylinder(h=3, d=3, center=true);\n    }\n}\n\n// BNC connector\nmodule bnc_connector() {\n    // Outer shell\n    cylinder(h=connector_len, d=connector_dia, center=true);\n    \n    // Inner insulator\n    color(\"white\")\n    translate([0, 0, -connector_len/4])\n        cylinder(h=connector_len/2, d=connector_dia - 4, center=true);\n    \n    // Center pin\n    color(\"gold\")\n    cylinder(h=connector_len + 2, d=2, center=true);\n    \n    // Bayonet lugs\n    for(i=[0:1]) {\n        rotate([0, 0, i*180])\n        translate([connector_dia/2 + 1, 0, connector_len/2 - 2])\n            cube([2, 3, 1.5], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, probe_len/2 + housing_len/2])\n    housing();\n\ntranslate([0, 0, 0])\n    probe_body();\n\ntranslate([0, 0, -probe_len/2 - crystal_len/2])\n    quartz_crystal();\n\ntranslate([0, 0, probe_len/2 + housing_len + connector_len/2])\n    bnc_connector();",
    "renders": true
  },
  {
    "household_item": "rillwhim",
    "openscad_code": "// realistic rillwhim – medium complexity\n// overall size ≈ 80 mm (body 60 mm long, 8 mm Ø)\n\n// tuning parameters\nbody_d = 8;            // tube outer diameter\nwall_t = 1.2;          // wall thickness for printing\nbody_l = 60;           // total body length\nmouth_d = 6;           // mouthpiece end inner diameter\nbell_d = 14;           // bell outer diameter\nbell_l = 12;           // bell length\nfinger_d = 3;          // finger-hole diameter\nfinger_t = 1;          // finger-hole tube thickness\nkeys   = 6;            // number of finger keys\nkey_d  = 5;            // key pad diameter\nkey_stem = 3;          // key stem thickness\nkey_clear = 0.3;       // print clearance\n\n// body tube\nmodule body() {\n    difference() {\n        cylinder(d1=mouth_d+2*wall_t, d2=body_d, h=body_l, $fn=48);\n        // bore\n        translate([0,0,-0.1])\n            cylinder(d1=mouth_d, d2=body_d-2*wall_t, h=body_l+0.2, $fn=48);\n    }\n}\n\n// bell flare\nmodule bell() {\n    difference() {\n        cylinder(d1=body_d, d2=bell_d, h=bell_l, $fn=48);\n        translate([0,0,-0.1])\n            cylinder(d1=body_d-2*wall_t, d2=bell_d-2*wall_t, h=bell_l+0.2, $fn=48);\n    }\n}\n\n// mouthpiece\nmodule mouthpiece() {\n    union() {\n        // tenon\n        cylinder(d=mouth_d+2*wall_t, h=wall_t*1.2, $fn=32);\n        // lip-plate\n        translate([0,0,wall_t*1.2])\n            cylinder(d=mouth_d+2*wall_t+2, h=wall_t, $fn=32);\n        // windway\n        difference() {\n            cube([mouth_d*0.6, mouth_d*0.6, wall_t*2.2], center=true);\n            translate([0,0,wall_t*0.5])\n                cube([mouth_d*0.5, mouth_d*0.5, wall_t*2.2], center=true);\n        }\n    }\n}\n\n// finger hole\nmodule hole(pos, rot) {\n    rotate([0,90,rot])\n    translate(pos)\n    difference() {\n        cylinder(d=finger_d+2*finger_t, h=body_d, $fn=16);\n        cylinder(d=finger_d+key_clear, h=body_d+0.2, $fn=16);\n    }\n}\n\n// key lever\nmodule key(pos, rot) {\n    rotate([0,90,rot])\n    translate(pos)\n    union() {\n        // pad\n        translate([0,0,-finger_t])\n            cylinder(d=key_d, h=finger_t, $fn=16);\n        // stem\n        translate([0,0,-finger_t-key_stem])\n            cube([key_stem, key_stem, key_stem*2], center=true);\n    }\n}\n\n// build rillwhim\ntranslate([0,0,wall_t*1.2])\nmouthpiece();\ntranslate([0,0,0])\nbody();\ntranslate([0,0,body_l])\nbell();\n\n// finger holes & keys\nfor(i=[0:keys-1]) {\n    z = body_l*0.35 + i*(body_l*0.45)/keys;\n    angle = (i%2==0)?-30:30;\n    hole([0,0,z], angle);\n    key([0,-body_d/2-finger_t-key_clear, z], angle);\n}",
    "renders": true
  },
  {
    "household_item": "sablethorn",
    "openscad_code": "// Sablethorn - Realistic Style, Medium Complexity\n// A dark, thorny magical artifact with crystalline core and organic growth patterns\n\n// Overall dimensions\ntotal_height = 85;\nbase_diameter = 35;\n\n// Main module\nmodule sablethorn() {\n    // Thick base cylinder for stability\n    difference() {\n        cylinder(h=15, d=base_diameter, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=17, d=base_diameter-4, $fn=64);\n    }\n    \n    // Central crystalline core\n    translate([0, 0, 15])\n        rotate([0, 0, 45])\n        crystal_core();\n    \n    // Organic thorn growths\n    for(i=[0:35]) {\n        rotate([0, 0, i*10 + (i%3)*5])\n        translate([base_diameter/2 - 4, 0, 15 + (i%4)*8])\n            rotate([75 + sin(i*15)*10, 0, i*25])\n            thorn(6 + (i%5)*2);\n    }\n    \n    // Dark energy veins\n    for(j=[0:7]) {\n        rotate([0, 0, j*45 + 22.5])\n        translate([0, 0, 20])\n            energy_vein(12 + j*6);\n    }\n    \n    // Top spire\n    translate([0, 0, 70])\n        spire();\n}\n\n// Crystalline core module\nmodule crystal_core() {\n    difference() {\n        union() {\n            // Main octahedral crystal\n            rotate([0, 0, 0])\n                scale([1, 1, 1.5])\n                octahedron(12);\n            \n            // Growth facets\n            for(k=[0:3]) {\n                rotate([0, 0, k*90])\n                translate([8, 0, 5])\n                rotate([0, 30, 0])\n                octahedron(6);\n            }\n        }\n        \n        // Internal fractures\n        for(m=[0:5]) {\n            rotate([0, m*60, m*30])\n            translate([0, 0, 8])\n                scale([0.3, 0.1, 1.2])\n                cube([20, 2, 15], center=true);\n        }\n    }\n}\n\n// Octahedron primitive\nmodule octahedron(size) {\n    hull() {\n        for(v=[[1,0,0], [-1,0,0], [0,1,0], [0,-1,0], [0,0,1], [0,0,-1]]) {\n            translate([v[0]*size, v[1]*size, v[2]*size])\n                sphere(d=2);\n        }\n    }\n}\n\n// Thorn growth module\nmodule thorn(length) {\n    difference() {\n        union() {\n            // Main thorn body\n            cylinder(h=length, d1=3, d2=0.5, $fn=8);\n            \n            // Secondary barb\n            translate([0, 1.5, length*0.7])\n                rotate([90, 0, 0])\n                cylinder(h=length*0.4, d1=1.5, d2=0.3, $fn=6);\n        }\n        \n        // Hollow core for printability\n        translate([0, 0, -1])\n            cylinder(h=length+2, d=1.5, $fn=6);\n    }\n}\n\n// Energy vein module\nmodule energy_vein(height) {\n    difference() {\n        // Twisted vein structure\n        linear_extrude(height=height, twist=60, $fn=16)\n            scale([0.4, 1])\n            circle(d=8);\n        \n        // Internal channel\n        translate([0, 0, -1])\n            linear_extrude(height=height+2, twist=60, $fn=16)\n                scale([0.3, 0.9])\n                circle(d=6);\n    }\n}\n\n// Top spire module\nmodule spire() {\n    union() {\n        // Main spire\n        cylinder(h=15, d1=8, d2=2, $fn=8);\n        \n        // Crown thorns\n        for(n=[0:5]) {\n            rotate([0, 0, n*60])\n            translate([3, 0, 12])\n                rotate([65, 0, 0])\n                thorn(8);\n        }\n    }\n}\n\n// Generate the model\nsablethorn();",
    "renders": true
  },
  {
    "household_item": "tidewhisper",
    "openscad_code": "// Tidewhisper - Realistic Style, Medium Complexity\n// Size: 80mm length, designed for 3D printing\n\n$fn = 50;\n\n// Main parameters\nshell_length = 80;\nshell_width = 35;\nshell_height = 25;\nwall_thickness = 1.5;\nmouth_width = 15;\nmouth_height = 8;\n\n// Spiral parameters\nspiral_turns = 2.5;\nspiral_growth = 0.8;\nspiral_height = 18;\nspiral_thickness = 2;\n\nmodule shell_body() {\n    difference() {\n        // Main shell shape\n        scale([1, 0.7, 0.5])\n        sphere(d = shell_width);\n        \n        // Hollow out\n        translate([0, 0, -wall_thickness])\n        scale([0.85, 0.55, 0.4])\n        sphere(d = shell_width);\n    }\n}\n\nmodule spiral_ridge() {\n    for(i = [0:10:360 * spiral_turns]) {\n        rotate([0, 0, i])\n        translate([shell_width/4 * pow(spiral_growth, i/360), 0, spiral_height * (i/(360 * spiral_turns))])\n        rotate([90, 0, 0])\n        cylinder(h = spiral_thickness, d1 = spiral_thickness * 2, d2 = spiral_thickness, center = true);\n    }\n}\n\nmodule mouth_opening() {\n    translate([-shell_length/2 + wall_thickness, 0, -shell_height/4])\n    rotate([0, 90, 0])\n    scale([1, 1.2, 1])\n    cylinder(h = mouth_width, d1 = mouth_height, d2 = mouth_height * 1.5);\n}\n\nmodule ridges() {\n    // Growth ridges along shell\n    for(i = [1:3:20]) {\n        translate([0, 0, -shell_height/2 + i])\n        scale([1 + i * 0.02, 0.7 + i * 0.02, 0.01])\n        sphere(d = shell_width - i);\n    }\n}\n\nmodule aperture_lip() {\n    // Outer lip of shell opening\n    translate([-shell_length/2 + wall_thickness/2, 0, -shell_height/4])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = mouth_width + wall_thickness * 2, d1 = mouth_height + wall_thickness * 2, d2 = mouth_height * 1.5 + wall_thickness * 2);\n        cylinder(h = mouth_width + wall_thickness * 2 + 0.1, d1 = mouth_height, d2 = mouth_height * 1.5);\n    }\n}\n\nmodule tidewhisper() {\n    union() {\n        // Main shell\n        shell_body();\n        \n        // Spiral ridges\n        translate([0, 0, -shell_height/2 + 2])\n        spiral_ridge();\n        \n        // Growth ridges\n        ridges();\n        \n        // Mouth opening\n        difference() {\n            shell_body();\n            mouth_opening();\n        }\n        \n        // Aperture lip\n        aperture_lip();\n        \n        // Small details - siphon canal\n        translate([-shell_length/2 + wall_thickness, 0, -shell_height/2])\n        rotate([0, -30, 0])\n        cylinder(h = 5, d1 = 3, d2 = 2);\n    }\n}\n\n// Render the complete tidewhisper\ntidewhisper();",
    "renders": true
  },
  {
    "household_item": "umbrawood",
    "openscad_code": "// UmbraWood - realistic style, medium complexity\n// A simple camera lens hood for 50 mm lenses (49 mm filter thread)\n\n// Overall scale factor to keep print ~60 mm diameter\nscale_factor = 1.0;\n\n// Lens thread parameters\nthread_diameter = 49 * scale_factor;\nthread_pitch = 0.75 * scale_factor;\nthread_height = 4 * scale_factor;\n\n// Hood body\nhood_length = 35 * scale_factor;\nhood_front_diameter = 58 * scale_factor;\nwall_thickness = 2 * scale_factor;\n\n// Petal cut-outs\npetal_width = 14 * scale_factor;\npetal_depth = 8 * scale_factor;\nnum_petals = 4;\n\n// Internal light-baffle rings\nring_spacing = 7 * scale_factor;\nring_thickness = 1 * scale_factor;\n\n// Thread module – simplified knurled cylinder\nmodule lens_thread(d, h) {\n    for (i = [0 : 5]) {\n        rotate([0, 0, i * 360/6])\n        translate([0, 0, h/2])\n        cylinder(h = h + 0.01, d1 = d - 0.4, d2 = d, $fn = 6);\n    }\n}\n\n// Petal cut module\nmodule petal_cut(w, d, ang) {\n    rotate([0, 0, ang])\n    translate([0, hood_front_diameter/2 - d/2, hood_length/2])\n    rotate([90, 0, 0])\n    cylinder(h = hood_length, d1 = w, d2 = w - 4, center = true, $fn = 32);\n}\n\n// Main hood body\nmodule hood_body() {\n    difference() {\n        // Outer shell tapered cylinder\n        cylinder(h = hood_length, d1 = thread_diameter + wall_thickness*2, d2 = hood_front_diameter, $fn = 64);\n        // Inner bore\n        cylinder(h = hood_length + 0.2, d = thread_diameter, $fn = 64);\n    }\n}\n\n// Light-baffle rings\nmodule baffle_rings() {\n    for (z = [ring_spacing : ring_spacing : hood_length - ring_spacing]) {\n        translate([0, 0, z])\n        difference() {\n            cylinder(h = ring_thickness, d = thread_diameter + wall_thickness*2, $fn = 64);\n            cylinder(h = ring_thickness + 0.1, d = thread_diameter + 0.5, $fn = 64);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main hood\n    hood_body();\n    \n    // Mounting thread ring\n    translate([0, 0, -thread_height/2])\n    lens_thread(thread_diameter, thread_height);\n    \n    // Light baffles\n    baffle_rings();\n    \n    // Petal cut-outs\n    for (a = [0 : 360/num_petals : 360 - 360/num_petals]) {\n        petal_cut(petal_width, petal_depth, a);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "vaporling",
    "openscad_code": "// Vaporling – realistic, medium-complexity version\n// Approx 70 mm tall, 3 mm walls, no nasty overhangs, ready for FDM printing\n\n$fn = 48;\n\n// Overall scale factor – change to resize the whole model\nscale_factor = 1;\n\nmodule vaporling() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n\n        // Main body (tall cylinder with rounded top)\n        translate([0, 0, 0])\n            union() {\n                cylinder(h = 60, d = 35, center = false);\n                translate([0, 0, 60])\n                    sphere(d = 35);\n            }\n\n        // Tank cap – screw-on style\n        translate([0, 0, 60 + 17.5])\n            cylinder(h = 8, d = 38, center = false);\n\n        // Mouthpiece chimney\n        translate([0, 0, 60 + 17.5 + 8])\n            cylinder(h = 12, d1 = 14, d2 = 10);\n\n        // Fire button\n        translate([20, 0, 35])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h = 8, d = 12);\n                    translate([0, 0, -1])\n                        cube([14, 14, 10], center = true);\n                }\n\n        // OLED screen recess\n        translate([-17.5, 0, 45])\n            cube([20, 30, 2]);\n\n        // Airflow ring – two thin rings\n        for (z = [8, 15]) {\n            translate([0, 0, z])\n                difference() {\n                    cylinder(h = 2, d = 39);\n                    cylinder(h = 3, d = 32);\n                }\n        }\n\n        // Micro-USB port recess\n        translate([0, 17.5, 20])\n            rotate([90, 0, 0])\n                cube([8, 3, 5]);\n\n        // Bottom vent slits (four slots)\n        for (a = [0 : 90 : 270]) {\n            rotate([0, 0, a])\n                translate([0, 15, 0])\n                    cube([2, 6, 3], center = true);\n        }\n\n        // Internal void to save material (3 mm wall)\n        translate([0, 0, 5])\n            cylinder(h = 50, d = 29);\n    }\n}\n\nvaporling();",
    "renders": true
  },
  {
    "household_item": "willowisp",
    "openscad_code": "// Willowisp Lantern - Realistic Style, Medium Complexity\n// Size: 80mm tall, 3D printable with no steep overhangs\n\n// Parameters\n$fn=32; // Smooth curves\nbase_d=30; // Base diameter\nbase_h=8;  // Base height\nglobe_d=50; // Glass globe diameter\nglobe_wall=2.5; // Wall thickness\nflame_h=35; // Flame height\nflame_d=12; // Flame base diameter\nhandle_h=60; // Handle height\nhandle_r=4; // Handle radius\nwall_th=2.5; // General wall thickness\n\n// Main assembly\nmodule willowisp() {\n    difference() {\n        union() {\n            // Base\n            cylinder(d=base_d, h=base_h, center=false);\n            \n            // Globe base collar\n            translate([0,0,base_h])\n                cylinder(d=globe_d+wall_th*2, h=wall_th*2, center=false);\n            \n            // Glass globe - hollow sphere\n            translate([0,0,base_h+wall_th*2])\n                sphere(d=globe_d);\n                \n            // Internal flame holder\n            translate([0,0,base_h+wall_th*2])\n                cylinder(d=flame_d+2, h=5, center=false);\n                \n            // Handle uprights\n            translate([globe_d/2 - wall_th, 0, base_h+wall_th*2])\n                cylinder(d=wall_th*2, h=handle_h, center=false);\n            translate([-globe_d/2 + wall_th, 0, base_h+wall_th*2])\n                cylinder(d=wall_th*2, h=handle_h, center=false);\n                \n            // Handle loop\n            translate([0,0,base_h+wall_th*2+handle_h])\n                rotate([90,0,0])\n                    torus(globe_d/2 - wall_th, handle_r);\n        }\n        \n        // Hollow out globe\n        translate([0,0,base_h+wall_th*2])\n            sphere(d=globe_d - globe_wall*2);\n            \n        // Remove inside base\n        translate([0,0,0])\n            cylinder(d=base_d-wall_th*2, h=base_h+0.1, center=false);\n            \n        // Vent holes in base\n        for(i=[0:5:359]) {\n            rotate([0,0,i])\n                translate([base_d/2 - wall_th*2, 0, base_h-2])\n                    cylinder(d=3, h=4, center=false);\n        }\n    }\n    \n    // Flame\n    translate([0,0,base_h+wall_th*2+5])\n        flame();\n}\n\n// Helper for torus\nmodule torus(r, tube_r) {\n    rotate_extrude()\n        translate([r,0,0])\n            circle(tube_r);\n}\n\n// Stylized flame\nmodule flame() {\n    // Base glow\n    color(\"gold\")\n    translate([0,0,0])\n        sphere(d=flame_d*1.2);\n        \n    // Main flame body\n    difference() {\n        // Tapered cylinder\n        linear_extrude(height=flame_h, scale=0.1, center=false)\n            circle(d=flame_d);\n            \n        // Inner hollow\n        translate([0,0,-1])\n            linear_extrude(height=flame_h+2, scale=0.3, center=false)\n                circle(d=flame_d-wall_th);\n    }\n    \n    // Flame tips\n    for(i=[0:60:359]) {\n        rotate([0,0,i])\n            translate([sin(i)*3, cos(i)*3, flame_h-5])\n                rotate([30+rand(i)*10,0,0])\n                    linear_extrude(height=10+rand(i)*5, scale=0.5, center=false)\n                        circle(d=6-rand(i)*2);\n    }\n}\n\n// Random helper\nfunction rand(x) = (x*73.23)%1;\n\n// Render\nwillowisp();",
    "renders": true
  },
  {
    "household_item": "xylofay",
    "openscad_code": "// XYLOFAY - Realistic Style, Medium Complexity\n// A 3D printable xylophone model with bars and resonator box\n// Dimensions optimized for 3D printing (80mm length)\n\n// Constants\nbar_width = 8;\nbar_height = 4;\nbar_spacing = 2;\nnum_bars = 8;\nbox_wall = 2;\nbox_base = 3;\nbox_length = 80;\nbox_width = 40;\nbox_height = 20;\nsupport_height = 10;\nsupport_width = 3;\n\n// Color definitions\nbar_colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"pink\", \"brown\"];\n\n// Xylophone bar module\nmodule xylophone_bar(length, color_index) {\n    color(bar_colors[color_index % len(bar_colors)]) {\n        // Main bar body\n        translate([0, 0, bar_height/2]) {\n            cube([length, bar_width, bar_height], center=true);\n        }\n        \n        // Rounded ends using spheres\n        translate([-length/2, 0, bar_height/2]) {\n            sphere(r=bar_width/2);\n        }\n        translate([length/2, 0, bar_height/2]) {\n            sphere(r=bar_width/2);\n        }\n        \n        // String holes\n        translate([-length/3, 0, bar_height/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=bar_width+1, r=1, center=true);\n            }\n        }\n        translate([length/3, 0, bar_height/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=bar_width+1, r=1, center=true);\n            }\n        }\n    }\n}\n\n// Resonator box module\nmodule resonator_box() {\n    difference() {\n        // Main box\n        color(\"burlywood\") {\n            cube([box_length, box_width, box_height]);\n        }\n        \n        // Hollow interior\n        translate([box_wall, box_wall, box_base]) {\n            cube([box_length-2*box_wall, box_width-2*box_wall, box_height-box_base]);\n        }\n        \n        // Sound holes (circular)\n        for(i=[1:3]) {\n            translate([i*box_length/4, box_width/2, box_height-box_base/2]) {\n                cylinder(h=box_base+1, r=6);\n            }\n        }\n    }\n}\n\n// Support structure module\nmodule support_structure() {\n    // Left support\n    translate([-box_length/2 - support_width, 0, 0]) {\n        color(\"darkgoldenrod\") {\n            cube([support_width, box_width, support_height]);\n        }\n    }\n    \n    // Right support\n    translate([box_length/2, 0, 0]) {\n        color(\"darkgoldenrod\") {\n            cube([support_width, box_width, support_height]);\n        }\n    }\n}\n\n// Main assembly\nmodule xylofay() {\n    // Resonator box\n    translate([0, 0, support_height]) {\n        resonator_box();\n    }\n    \n    // Support structure\n    support_structure();\n    \n    // Xylophone bars\n    bar_lengths = [30, 28, 26, 24, 22, 20, 18, 16];\n    total_bar_length = sum(bar_lengths) + (num_bars-1)*bar_spacing;\n    start_x = -total_bar_length/2 + bar_lengths[0]/2;\n    \n    for(i=[0:num_bars-1]) {\n        x_offset = start_x + sum([for(j=[0:i-1]) bar_lengths[j] + bar_spacing]) + bar_lengths[i]/2;\n        translate([x_offset, 0, box_height + support_height + 5]) {\n            xylophone_bar(bar_lengths[i], i);\n        }\n    }\n    \n    // Mallet holders\n    translate([-box_length/2 - 10, box_width/2 + 5, support_height/2]) {\n        color(\"darkgoldenrod\") {\n            cylinder(h=support_height/2, r=3);\n        }\n    }\n    translate([-box_length/2 - 10, box_width/2 + 10, support_height/2]) {\n        color(\"darkgoldenrod\") {\n            cylinder(h=support_height/2, r=3);\n        }\n    }\n}\n\n// Render the complete model\nxylofay();",
    "renders": true
  },
  {
    "household_item": "yewshade",
    "openscad_code": "// Yewshade medium-realistic OpenSCAD model\n// Overall height ~70 mm, designed for 3D printing\n\n$fn = 36;\n\nmodule yewshade() {\n    difference() {\n        union() {\n            // Main shade bowl\n            translate([0,0,35])\n                cylinder(h = 30, d1 = 60, d2 = 55);\n\n            // Rim lip for strength\n            translate([0,0,64])\n                cylinder(h = 4, d = 62);\n\n            // Inner light well\n            translate([0,0,35])\n                cylinder(h = 25, d = 45);\n\n            // Holes for ventilation, repeated around rim\n            for(i=[0:5:359]) {\n                rotate([0,0,i])\n                    translate([22.5,0,63])\n                        rotate([90,0,0])\n                            cylinder(h = 3, d = 3);\n            }\n        }\n\n        // Central cavity for bulb\n        translate([0,0,0])\n            cylinder(h = 70, d = 28);\n\n        // Cable entry notch at back\n        translate([-30,0,0])\n            cube([10,10,10], center = true);\n    }\n\n    // Mounting bracket\n    difference() {\n        union() {\n            // Bracket arm\n            translate([-31,0,45])\n                rotate([0,90,0])\n                    cylinder(h = 20, d = 8);\n\n            // Bracket plate\n            translate([-40,0,45])\n                rotate([0,90,0])\n                    cube([20,12,4], center = true);\n\n            // Strengthening ribs\n            for(x=[-35,-40]) {\n                translate([x,0,45])\n                    rotate([0,90,0])\n                        cube([2,12,10], center = true);\n            }\n        }\n\n        // Screw holes\n        translate([-40,0,45])\n            rotate([0,90,0])\n                cylinder(h = 5, d = 3.5);\n        translate([-40,4,45])\n            rotate([0,90,0])\n                cylinder(h = 5, d = 3.5);\n        translate([-40,-4,45])\n            rotate([0,90,0])\n                cylinder(h = 5, d = 3.5);\n    }\n}\n\n// Render the model\nyewshade();",
    "renders": true
  },
  {
    "household_item": "zephyrling",
    "openscad_code": "// Zephyrling - Medium complexity realistic style\n// Wingspan ~90mm, body ~50mm, suitable for 3D printing\n\n$fn = 32;\n\nmodule wing() {\n    // Main wing panel\n    difference() {\n        hull() {\n            translate([-15, 0, 1]) sphere(d=2);\n            translate([15, 0, 1]) sphere(d=2);\n            translate([0, 25, 1]) sphere(d=2);\n            translate([-5, 25, 1]) sphere(d=2);\n        }\n        \n        // Feather cuts\n        for (i = [0:5]) {\n            translate([i*5-15, 5, 0]) cube([1, 20, 3]);\n        }\n    }\n    \n    // Wing strut\n    translate([0, 12, -2]) cube([2, 1, 4]);\n}\n\nmodule body() {\n    // Main fuselage\n    hull() {\n        translate([0, 0, 0]) sphere(d=12);\n        translate([0, 8, 0]) sphere(d=10);\n        translate([0, 16, 0]) sphere(d=8);\n        translate([0, 22, 0]) sphere(d=6);\n    }\n    \n    // Cockpit\n    difference() {\n        translate([0, 10, 4]) sphere(d=7);\n        translate([0, 10, 6]) sphere(d=6);\n    }\n    \n    // Engine nacelle\n    difference() {\n        translate([0, -5, 0]) cylinder(h=8, d1=8, d2=6);\n        rotate([90, 0, 0]) cylinder(h=10, d=4, $fn=6);\n    }\n    \n    // Tail\n    translate([0, 25, 2]) cube([2, 8, 4], center=true);\n    translate([0, 29, 0]) rotate([0, 20, 0]) cube([0.5, 10, 3], center=true);\n}\n\nmodule propeller() {\n    // Spinner\n    sphere(d=4);\n    \n    // Blades\n    for (i = [0:2]) {\n        rotate([0, 0, i*120]) {\n            translate([1.5, 0, 0]) rotate([0, 0, 30]) cube([8, 1, 0.5]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    \n    // Left wing\n    translate([-10, 0, 0]) rotate([0, 0, -10]) wing();\n    \n    // Right wing\n    translate([10, 0, 0]) mirror([1, 0, 0]) rotate([0, 0, -10]) wing();\n    \n    // Propeller\n    translate([0, -10, 0]) propeller();\n    \n    // Landing gear\n    translate([-6, 5, -6]) cylinder(h=6, d=2);\n    translate([6, 5, -6]) cylinder(h=6, d=2);\n    translate([0, 15, -6]) cylinder(h=6, d=2);\n    \n    // Wing supports\n    translate([-6, 12, -2]) rotate([30, 0, 0]) cylinder(h=4, d=1);\n    translate([6, 12, -2]) rotate([30, 0, 0]) cylinder(h=4, d=1);\n}",
    "renders": true
  },
  {
    "household_item": "ashsprite",
    "openscad_code": "// Ashsprite - realistic style, medium complexity\n// 3D printable, ~70mm tall\n\n$fn = 36;\n\n// Overall dimensions\ntotal_height = 70;\nhead_h = 22;\nbody_h = 28;\nlegs_h = 20;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule ash_body() {\n    // Main torso\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, body_h/2])\n                cylinder(h = body_h, d1 = 18, d2 = 22);\n            translate([0, 0, body_h/2])\n                sphere(d = 20);\n        }\n        \n        // Hollow inside\n        scale([0.8, 0.8, 0.9])\n            hull() {\n                translate([0, 0, body_h/2])\n                    cylinder(h = body_h, d1 = 18, d2 = 22);\n                translate([0, 0, body_h/2])\n                    sphere(d = 20);\n            }\n    }\n}\n\nmodule ash_head() {\n    // Head with realistic seed shape\n    difference() {\n        // Outer head\n        translate([0, 0, body_h + head_h/2])\n            scale([1, 0.85, 1.1])\n                sphere(d = head_h);\n        \n        // Face hollow\n        translate([0, 0, body_h + head_h/2])\n            scale([0.7, 0.7, 0.7])\n                sphere(d = head_h);\n        \n        // Eye sockets\n        for(x = [-5, 5]) {\n            translate([x, -8, body_h + head_h - 8])\n                sphere(d = 3);\n        }\n    }\n    \n    // Eyes\n    color(\"black\")\n    for(x = [-5, 5]) {\n        translate([x, -8.5, body_h + head_h - 8])\n            sphere(d = 2);\n    }\n}\n\nmodule ash_wings() {\n    // Left wing\n    difference() {\n        // Main wing shape\n        translate([-15, 0, body_h - 5])\n            rotate([0, 0, 20])\n                scale([1, 0.3, 1])\n                    sphere(d = 25);\n        \n        // Wing hollow\n        translate([-15, -1, body_h - 5])\n            rotate([0, 0, 20])\n                scale([0.8, 0.3, 0.8])\n                    sphere(d = 25);\n    }\n    \n    // Right wing (mirrored)\n    mirror([1, 0, 0])\n        difference() {\n            translate([-15, 0, body_h - 5])\n                rotate([0, 0, 20])\n                    scale([1, 0.3, 1])\n                        sphere(d = 25);\n            \n            translate([-15, -1, body_h - 5])\n                rotate([0, 0, 20])\n                    scale([0.8, 0.3, 0.8])\n                        sphere(d = 25);\n        }\n    \n    // Wing veins\n    for(i = [0:3]) {\n        // Left veins\n        translate([-10 - i*3, -3, body_h - 5 + i*2])\n            rotate([0, 0, 20])\n                scale([1, 0.1, 0.1])\n                    sphere(d = 8);\n        \n        // Right veins\n        translate([10 + i*3, -3, body_h - 5 + i*2])\n            rotate([0, 0, -20])\n                scale([1, 0.1, 0.1])\n                    sphere(d = 8);\n    }\n}\n\nmodule ash_legs() {\n    // Left leg\n    translate([-4, -3, 0])\n        cylinder(h = legs_h, d1 = 4, d2 = 3);\n    \n    // Right leg\n    translate([4, -3, 0])\n        cylinder(h = legs_h, d1 = 4, d2 = 3);\n    \n    // Feet\n    translate([-4, -5, -2])\n        cube([6, 8, 3]);\n    \n    translate([4, -5, -2])\n        cube([6, 8, 3]);\n}\n\nmodule ash_tail() {\n    // Tail flame\n    difference() {\n        // Outer flame\n        translate([0, 8, 5])\n            scale([0.8, 1, 1.5])\n                cylinder(h = 15, d1 = 8, d2 = 2);\n        \n        // Inner hollow\n        translate([0, 8, 5])\n            scale([0.6, 0.8, 1.3])\n                cylinder(h = 15, d1 = 6, d2 = 1);\n    }\n}\n\n// Assemble the ash sprite\nunion() {\n    ash_body();\n    ash_head();\n    ash_wings();\n    ash_legs();\n    ash_tail();\n}",
    "renders": true
  },
  {
    "household_item": "briarling",
    "openscad_code": "// Briarling pipe in realistic style\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 50;\n\n// Main dimensions\nbowl_height = 35;\nbowl_outer_dia = 28;\nbowl_inner_dia = 20;\nshank_length = 55;\nshank_dia = 12;\nstem_length = 45;\nstem_dia = 10;\nbit_length = 25;\nbit_dia = 6;\n\nmodule bowl() {\n    difference() {\n        // Outer bowl shape\n        union() {\n            // Main bowl body\n            cylinder(h = bowl_height, d1 = bowl_outer_dia, d2 = bowl_outer_dia * 0.9);\n            // Heel/base\n            translate([0, 0, -3])\n                cylinder(h = 6, d1 = bowl_outer_dia * 1.1, d2 = bowl_outer_dia);\n        }\n        \n        // Inner chamber\n        translate([0, 0, -1])\n            cylinder(h = bowl_height + 2, d = bowl_inner_dia);\n        \n        // Draught hole\n        rotate([90, 0, 0])\n            translate([0, -bowl_height/2, 0])\n                cylinder(h = bowl_outer_dia/2, d = 4);\n    }\n}\n\nmodule shank() {\n    hull() {\n        // Shank start at bowl\n        translate([0, 0, 0])\n            sphere(d = shank_dia);\n        // Shank end\n        translate([shank_length, 0, 0])\n            sphere(d = shank_dia * 0.9);\n    }\n    \n    // Airway through shank\n    rotate([90, 0, 0])\n        translate([0, -shank_dia/2, 0])\n            cylinder(h = shank_length + shank_dia, d = 4);\n}\n\nmodule stem() {\n    // Main stem\n    hull() {\n        translate([0, 0, 0])\n            sphere(d = stem_dia);\n        translate([stem_length, 0, 0])\n            sphere(d = stem_dia * 0.7);\n    }\n    \n    // Bit\n    translate([stem_length, 0, 0]) {\n        // Bit taper\n        hull() {\n            sphere(d = stem_dia * 0.7);\n            translate([bit_length, 0, 0])\n                sphere(d = bit_dia);\n        }\n    }\n    \n    // Airway through stem\n    rotate([90, 0, 0])\n        translate([0, -stem_dia/2, 0])\n            cylinder(h = stem_length + bit_length + stem_dia, d = 2.5);\n}\n\nmodule rustication() {\n    // Random texture pattern for bowl\n    for (i = [0:15]) {\n        rotate([0, 0, i * 24])\n            translate([12 * cos(i * 5), 12 * sin(i * 5), bowl_height/2])\n                sphere(d = 2 + (i % 3) * 0.5);\n    }\n}\n\n// Assemble the pipe\ntranslate([0, 0, bowl_height/2])\n    union() {\n        // Bowl with rustication\n        difference() {\n            bowl();\n            // Rustic texture\n            rustication();\n        }\n        \n        // Shank\n        translate([0, 0, -bowl_height/2 + 5])\n            rotate([0, -15, 0])\n                shank();\n        \n        // Stem\n        translate([shank_length, 0, -bowl_height/2 + 5])\n            rotate([0, -15, 0])\n                stem();\n    }",
    "renders": true
  },
  {
    "household_item": "citrinefae",
    "openscad_code": "// Citrine Fae - Realistic Medium Complexity\n// A crystalline fairy with amber wings and gemstone features\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Overall scale\nscale_factor = 0.4;\n\n// Main module\nmodule citrine_fae() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Body - crystalline torso\n        body();\n        \n        // Head - faceted gemstone\n        translate([0, 0, 35]) head();\n        \n        // Wings - amber crystal formations\n        translate([0, 0, 25]) wings();\n        \n        // Arms - crystalline structures\n        translate([8, 0, 20]) arm(1);\n        translate([-8, 0, 20]) mirror([1, 0, 0]) arm(1);\n        \n        // Legs - tapered crystals\n        translate([4, 0, 0]) leg();\n        translate([-4, 0, 0]) mirror([1, 0, 0]) leg();\n        \n        // Crown - small crystal points\n        translate([0, 0, 48]) crown();\n    }\n}\n\n// Crystalline torso\nmodule body() {\n    difference() {\n        // Main body crystal\n        scale([1, 0.8, 1.5]) \n            sphere(r=10);\n        \n        // Facets\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([0, 8, 0]) \n                    cube([20, 5, 30], center=true);\n        }\n    }\n}\n\n// Faceted gemstone head\nmodule head() {\n    difference() {\n        union() {\n            // Main head\n            sphere(r=7);\n            \n            // Chin point\n            translate([0, 0, -7]) \n                scale([0.6, 0.6, 0.5]) \n                    sphere(r=5);\n        }\n        \n        // Eye sockets\n        translate([3, 4, 2]) sphere(r=1.5);\n        translate([-3, 4, 2]) sphere(r=1.5);\n        \n        // Facets for realistic look\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) \n                translate([0, 5, 2]) \n                    cube([10, 2, 8], center=true);\n        }\n    }\n}\n\n// Amber crystal wings\nmodule wings() {\n    // Right wing\n    translate([12, 0, 0]) wing_half();\n    \n    // Left wing\n    translate([-12, 0, 0]) mirror([1, 0, 0]) wing_half();\n}\n\nmodule wing_half() {\n    // Main wing structure\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(r=2);\n            translate([15, 8, 5]) sphere(r=1);\n            translate([12, -8, 3]) sphere(r=1);\n            translate([8, 0, 8]) sphere(r=1);\n        }\n        \n        // Vein details\n        for(i = [0:3]) {\n            rotate([0, 0, i * 30 - 45]) \n                translate([5, 0, 2]) \n                    cube([15, 0.5, 0.5], center=true);\n        }\n    }\n}\n\n// Crystalline arm\nmodule arm(side) {\n    // Upper arm\n    translate([0, 0, 5]) \n        scale([0.6, 0.6, 1.2]) \n            cylinder(r1=3, r2=2, h=10);\n    \n    // Lower arm\n    translate([0, 0, -2]) \n        rotate([20, 0, 0]) \n            scale([0.5, 0.5, 1]) \n                cylinder(r1=2, r2=1.5, h=10);\n    \n    // Hand\n    translate([0, 0, -8]) \n        sphere(r=2);\n}\n\n// Tapered crystal leg\nmodule leg() {\n    // Upper leg\n    cylinder(r1=3, r2=2.5, h=15);\n    \n    // Lower leg\n    translate([0, 0, -8]) \n        rotate([15, 0, 0]) \n            cylinder(r1=2.5, r2=1.5, h=12);\n    \n    // Foot\n    translate([0, 2, -16]) \n        scale([1, 1.5, 0.5]) \n            sphere(r=3);\n}\n\n// Crystal crown points\nmodule crown() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) \n            translate([4, 0, 0]) \n                rotate([15, 0, 0]) \n                    cylinder(r1=1, r2=0.2, h=5);\n    }\n}\n\n// Generate the model\ncitrine_fae();",
    "renders": true
  },
  {
    "household_item": "dewspark",
    "openscad_code": "// DewSpark – realistic 3D-printable model\n// Overall footprint ≈ 65 mm × 45 mm × 45 mm\n\n// Global parameters\n$fn = 36;               // smooth curves\nwall = 1.6;             // safe 3D-print wall thickness\nbase_h = 5;             // base plate height\nbody_r = 15;            // main body radius\nbody_h = 35;            // main body height\ncone_h = 12;            // upper conical top\ntip_r  = 2.5;           // tip radius\ngrip_d = 20;            // knurled grip diameter\ngrip_h = 15;            // grip height\ngrip_notch = 1.2;       // knurl notch depth\nled_d = 6;              // LED cavity diameter\nled_h = 4;              // LED cavity depth\nvent_d = 2;             // side vent diameter\nvent_rows = 3;\nvent_cols = 6;\n\n// Main assembly\ndifference() {\n    union() {\n        // 1. Base plate for stability\n        cylinder(h = base_h, r1 = body_r + wall*2, r2 = body_r + wall*2);\n\n        // 2. Main cylindrical shell\n        translate([0,0,base_h])\n            cylinder(h = body_h, r1 = body_r, r2 = body_r);\n\n        // 3. Conical top\n        translate([0,0,base_h+body_h])\n            cylinder(h = cone_h, r1 = body_r, r2 = tip_r);\n\n        // 4. Knurled grip ring\n        translate([0,0,base_h+body_h-grip_h/2])\n            grip_ring();\n    }\n\n    // 5. Central LED cavity\n    translate([0,0,base_h+body_h+cone_h-led_h])\n        cylinder(h = led_h + cone_h+1, r = led_d/2);\n\n    // 6. Side cooling vents\n    for(i=[0:vent_rows-1])\n        rotate([0,0,i*360/vent_rows])\n            for(j=[1:vent_cols])\n                translate([body_r-wall/2, 0, base_h + j*body_h/(vent_cols+1)])\n                    rotate([90,0,0])\n                        cylinder(h = wall*2, r = vent_d/2);\n}\n\n// --------------------------------------------------\n// Module: knurled grip ring\nmodule grip_ring() {\n    difference() {\n        cylinder(h = grip_h, r = grip_d/2);\n        // cut knurls\n        for(k=[0:35])\n            rotate([0,0,k*10])\n                translate([grip_d/2-grip_notch-0.1, -grip_d/4, -1])\n                    cube([grip_notch+0.2, grip_d/2, grip_h+2]);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "ebonroot",
    "openscad_code": "// Ebonroot - Realistic Style, Medium Complexity\n// A dark, gnarled root structure with organic details\n\n// Main parameters\nroot_diameter = 12;\nroot_length = 80;\nwall_thickness = 2;\nbase_height = 8;\n\n// Root body module with gnarled texture\nmodule root_body() {\n    difference() {\n        // Main root cylinder with slight taper\n        cylinder(h=root_length, r1=root_diameter/2, r2=root_diameter/2.5, $fn=32);\n        \n        // Hollow center for 3D printing\n        translate([0, 0, wall_thickness])\n            cylinder(h=root_length-wall_thickness*2, r1=root_diameter/2-wall_thickness, r2=root_diameter/2.5-wall_thickness, $fn=32);\n        \n        // Add surface grooves for texture\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([root_diameter/2-0.5, 0, 0])\n                    cube([1, root_diameter/2, root_length], center=true);\n        }\n    }\n}\n\n// Root branches module\nmodule root_branches() {\n    // Branch 1\n    translate([0, 0, root_length*0.7])\n        rotate([30, 0, 45])\n            cylinder(h=25, r1=root_diameter/3, r2=root_diameter/4, $fn=16);\n    \n    // Branch 2\n    translate([0, 0, root_length*0.5])\n        rotate([-25, 0, -30])\n            cylinder(h=20, r1=root_diameter/3.5, r2=root_diameter/5, $fn=16);\n    \n    // Branch 3\n    translate([0, 0, root_length*0.4])\n        rotate([15, 0, 180])\n            cylinder(h=18, r1=root_diameter/4, r2=root_diameter/6, $fn=16);\n}\n\n// Root nodules/bumps\nmodule root_nodules() {\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([root_diameter/2+1, 0, root_length*0.3])\n                sphere(r=3, $fn=16);\n        \n        rotate([0, 0, i+22])\n            translate([root_diameter/2+0.5, 0, root_length*0.6])\n                sphere(r=2.5, $fn=16);\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    difference() {\n        cylinder(h=base_height, r=root_diameter*0.75, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=base_height+2, r=root_diameter*0.75-wall_thickness, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main root\n    root_body();\n    \n    // Branches\n    root_branches();\n    \n    // Nodules\n    root_nodules();\n    \n    // Base at bottom\n    translate([0, 0, -base_height])\n        base();\n}",
    "renders": true
  },
  {
    "household_item": "flintgleam",
    "openscad_code": "// Flintgleam - realistic medium-complexity model\n// A handheld flint striker with integrated magnesium storage\n\n$fn=36;\n\n// Overall dimensions\nlength = 80;\nwidth = 20;\nheight = 12;\n\n// Module for the main body\nmodule body() {\n    difference() {\n        // Main body shape\n        union() {\n            // Central block\n            cube([length-20, width, height], center=true);\n            \n            // Rounded front end\n            translate([(length-20)/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=width, d=height, center=true);\n            \n            // Rounded back end\n            translate([-(length-20)/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=width, d=height, center=true);\n        }\n        \n        // Hollow for magnesium storage\n        translate([-(length-20)/2+8, 0, 0])\n            cube([14, width-6, height-4], center=true);\n        \n        // Grip pattern holes\n        for(i=[-30:5:30])\n            translate([i, 0, height/2-1])\n                cylinder(h=2, d=3, $fn=6);\n    }\n}\n\n// Module for flint rod\nmodule flint_rod() {\n    // Holder\n    difference() {\n        translate([(length-20)/2+5, 0, 0])\n            cube([10, 6, 6], center=true);\n        \n        // Flint hole\n        translate([(length-20)/2+5, 0, 0])\n            cylinder(h=10, d=4, center=true);\n    }\n    \n    // Actual flint\n    color(\"darkgray\")\n        translate([(length-20)/2+8, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8, d=3.8, center=true);\n}\n\n// Module for striker blade\nmodule striker() {\n    difference() {\n        // Blade base\n        translate([-(length-20)/2-8, 0, 0])\n            cube([8, width-4, 3], center=true);\n        \n        // Serrated edge\n        for(i=[-8:2:8])\n            translate([-(length-20)/2-8, i, 1.5])\n                cube([1, 1.5, 3], center=true);\n    }\n}\n\n// Module for grip texture\nmodule grip_texture() {\n    for(i=[-30:8:30])\n        for(j=[-8:4:8])\n            translate([i, j, height/2+0.5])\n                cylinder(h=0.5, d=2, $fn=16);\n}\n\n// Module for magnesium storage cap\nmodule mag_cap() {\n    difference() {\n        // Cap body\n        translate([-(length-20)/2-2, 0, 0])\n            cube([6, width-2, height-2], center=true);\n        \n        // Hollowing\n        translate([-(length-20)/2-2, 0, 0])\n            cube([4, width-4, height-4], center=true);\n        \n        // Grip ridges\n        for(i=[-8:2:8])\n            translate([-(length-20)/2-2, i, height/2-1])\n                cube([6, 0.5, 2], center=true);\n    }\n}\n\n// Assembly\nbody();\nflint_rod();\nstriker();\ngrip_texture();\nmag_cap();",
    "renders": true
  },
  {
    "household_item": "glimmerpool",
    "openscad_code": "// Glimmerpool - Medium complexity realistic style\n// A crystalline pool with magical liquid and surrounding stone\n\n$fn = 60; // Smooth curves for printing\n\n// Main dimensions\npool_radius = 40;\npool_height = 10;\nwall_thickness = 2;\nliquid_level = 7;\ncrystal_height = 15;\n\n// Stone base module\nmodule stone_base() {\n    difference() {\n        // Main stone ring\n        cylinder(h = pool_height + 2, r = pool_radius + wall_thickness, center = true);\n        \n        // Hollow out the center\n        translate([0, 0, 1])\n        cylinder(h = pool_height + 5, r = pool_radius, center = true);\n        \n        // Add texture to top surface\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n            translate([pool_radius + wall_thickness - 3, 0, pool_height/2 + 1])\n            cube([6, 2, 2], center = true);\n        }\n    }\n}\n\n// Crystal formation module\nmodule crystal(x, y, angle, height_scale) {\n    translate([x, y, liquid_level])\n    rotate([0, 0, angle])\n    scale([1, 1, height_scale])\n    union() {\n        // Main crystal body\n        cylinder(h = crystal_height, r1 = 1.5, r2 = 0.5);\n        \n        // Crystal facets\n        rotate([0, 0, 45])\n        cylinder(h = crystal_height, r1 = 1.2, r2 = 0.4);\n    }\n}\n\n// Magical liquid with ripple effect\nmodule magical_liquid() {\n    color([0.2, 0.4, 0.8, 0.7])\n    difference() {\n        // Main liquid surface\n        cylinder(h = liquid_level, r = pool_radius - 1, center = false);\n        \n        // Ripples\n        for(i = [1:5]) {\n            translate([0, 0, liquid_level - 0.5])\n            scale([1 - i * 0.1, 1 - i * 0.1, 1])\n            cylinder(h = 1, r = pool_radius - 2 - i * 2);\n        }\n    }\n}\n\n// Generate crystals around the pool\nmodule crystal_ring() {\n    for(i = [0:11]) {\n        angle = i * 30;\n        dist = pool_radius * 0.7;\n        crystal_x = cos(angle) * dist;\n        crystal_y = sin(angle) * dist;\n        crystal(crystal_x, crystal_y, angle * 2, 0.8 + sin(i) * 0.3);\n    }\n}\n\n// Outer rim details\nmodule rim_details() {\n    for(i = [0:23]) {\n        angle = i * 15;\n        translate([cos(angle) * (pool_radius + wall_thickness), \n                  sin(angle) * (pool_radius + wall_thickness), \n                  pool_height/2])\n        rotate([90, 0, angle])\n        cylinder(h = 2, r = 1.5);\n    }\n}\n\n// Assemble the glimmerpool\nunion() {\n    // Stone base structure\n    stone_base();\n    \n    // Rim decorations\n    rim_details();\n    \n    // Magical liquid\n    translate([0, 0, 0])\n    magical_liquid();\n    \n    // Crystal formations\n    crystal_ring();\n    \n    // Center crystal cluster\n    for(j = [0:4]) {\n        angle = j * 72;\n        crystal(cos(angle) * 5, sin(angle) * 5, angle * 3, 1.2);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "hailshade",
    "openscad_code": "// Hailshade - Medium complexity realistic style\n// Overall dimensions: ~70mm diameter, ~25mm height\n\n// Parameters\nshell_thickness = 1.5;\ndome_radius = 33;\nbase_height = 4;\nvent_hole_diameter = 3;\nvent_hole_spacing = 8;\nedge_rib_height = 3;\nedge_rib_width = 2;\nmounting_hole_diameter = 3.5;\nmounting_post_height = 5;\nmounting_post_diameter = 6;\n\nmodule dome_shell() {\n    // Main dome shell with wall thickness\n    difference() {\n        sphere(d = dome_radius * 2);\n        sphere(d = (dome_radius - shell_thickness) * 2);\n    }\n}\n\nmodule base_ring() {\n    // Flat base ring for mounting\n    difference() {\n        cylinder(h = base_height, r = dome_radius + 2, $fn = 100);\n        cylinder(h = base_height + 0.1, r = dome_radius, $fn = 100);\n    }\n}\n\nmodule vent_holes() {\n    // Ventilation holes for airflow\n    for (a = [0:45:315]) {\n        for (r = [15:vent_hole_spacing:30]) {\n            rotate([90, 0, a]) {\n                translate([0, r, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = dome_radius * 2, d = vent_hole_diameter, $fn = 12);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule edge_reinforcement() {\n    // Reinforcement rib around the edge\n    difference() {\n        translate([0, 0, base_height]) {\n            cylinder(h = edge_rib_height, r1 = dome_radius + 2, r2 = dome_radius + 1, $fn = 100);\n        }\n        cylinder(h = edge_rib_height + 0.1, r = dome_radius - edge_rib_width, $fn = 100);\n    }\n}\n\nmodule mounting_posts() {\n    // Mounting posts for screws\n    for (a = [45:90:315]) {\n        rotate([0, 0, a]) {\n            translate([dome_radius - 6, 0, 0]) {\n                cylinder(h = mounting_post_height, d = mounting_post_diameter, $fn = 20);\n                translate([0, 0, -0.1]) {\n                    cylinder(h = mounting_post_height + 0.2, d = mounting_hole_diameter, $fn = 20);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main dome structure\n    difference() {\n        union() {\n            dome_shell();\n            base_ring();\n            edge_reinforcement();\n        }\n        vent_holes();\n    }\n    \n    // Mounting features\n    mounting_posts();\n}",
    "renders": true
  },
  {
    "household_item": "ironbark",
    "openscad_code": "// Ironbark tree trunk with realistic medium-complexity detail\n// Designed for 3D printing (no overhangs >45°, wall thickness 1.2 mm)\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main trunk module\nmodule trunk() {\n    difference() {\n        // Main trunk cylinder\n        cylinder(h = 60 * scale_factor, r1 = 8 * scale_factor, r2 = 6 * scale_factor, $fn = 32);\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 1])\n            cylinder(h = 58 * scale_factor, r1 = 6.8 * scale_factor, r2 = 4.8 * scale_factor, $fn = 32);\n    }\n}\n\n// Bark texture using stacked rings\nmodule bark_texture() {\n    // Generate 8 bark ring layers\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, 0, i * 7.5 * scale_factor])\n                difference() {\n                    // Outer rough bark ring\n                    cylinder(h = 3 * scale_factor, r = 8.4 * scale_factor, $fn = 6);\n                    // Inner smooth area\n                    cylinder(h = 3.2 * scale_factor, r = 8 * scale_factor, $fn = 32);\n                }\n        }\n    }\n}\n\n// Branch stubs\nmodule branch_stubs() {\n    // Generate 3 branch stubs at different heights\n    for (angle = [30, 150, 270]) {\n        rotate([0, 0, angle]) {\n            translate([0, 7 * scale_factor, 25 * scale_factor])\n                rotate([-90, 0, 0])\n                    cylinder(h = 8 * scale_factor, r1 = 2.2 * scale_factor, r2 = 1.6 * scale_factor, $fn = 16);\n        }\n    }\n}\n\n// Fissure details (long vertical grooves)\nmodule fissures() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 7.8 * scale_factor, 0])\n                cube([1.2 * scale_factor, 0.5 * scale_factor, 60 * scale_factor], center = true);\n        }\n    }\n}\n\n// Base flare for stability\nmodule base_flare() {\n    difference() {\n        cylinder(h = 4 * scale_factor, r1 = 10 * scale_factor, r2 = 8 * scale_factor, $fn = 32);\n        translate([0, 0, 1])\n            cylinder(h = 3 * scale_factor, r1 = 8.8 * scale_factor, r2 = 6.8 * scale_factor, $fn = 32);\n    }\n}\n\n// Combine all elements\nunion() {\n    // Base at bottom\n    translate([0, 0, 0])\n        base_flare();\n    \n    // Main trunk positioned above base\n    translate([0, 0, 4 * scale_factor])\n        trunk();\n    \n    // Add bark texture\n    translate([0, 0, 4 * scale_factor])\n        bark_texture();\n    \n    // Add branch stubs\n    translate([0, 0, 4 * scale_factor])\n        branch_stubs();\n    \n    // Add vertical fissures\n    translate([0, 0, 4 * scale_factor])\n        fissures();\n}",
    "renders": true
  },
  {
    "household_item": "jadefire",
    "openscad_code": "// Jade Fire / Spirit Brazier\n// Overall footprint ≈ 55 mm diameter × 40 mm high\n// Top is open so no severe over-hangs; 1 mm walls everywhere\n\n// Parameters\nbase_d = 55;            // widest point of the base\nwall_t = 1;             // 3D-printable wall thickness\nlayer_h = 3;            // height of each tier\npetals = 6;             // number of lotus petals\nflame_h = 15;\n\n// ---------- Base ----------\nmodule base() {\n    // stepped circular tiers\n    for (i = [0:2]) {\n        translate([0,0,i*layer_h])\n            cylinder(h=layer_h, d=base_d-i*5, $fn=64);\n    }\n}\n\n// ---------- Lotus Bowl ----------\nmodule bowl() {\n    // central cup\n    difference() {\n        cylinder(h=layer_h*2.5, d=base_d-10, $fn=64);\n        translate([0,0,wall_t])\n            cylinder(h=layer_h*2.5+1, d=base_d-10-wall_t*2, $fn=64);\n    }\n    \n    // petals around rim\n    for (a=[0:360/petals:359])\n        rotate([0,0,a])\n            translate([ (base_d-10)/2, 0, layer_h*2.5-wall_t ])\n                rotate([90,0,0])\n                    cylinder(h=8, r1=5, r2=0, $fn=16);\n}\n\n// ---------- Jade Flame ----------\n// Stylized flame built from stacked spheres\nmodule flame() {\n    color(\"limegreen\")\n        for (i=[0:4]) {\n            translate([0,0,i*3])\n                sphere(d=10-i*1.5, $fn=20);\n        }\n}\n\n// ---------- Final Assembly ----------\nbase();\ntranslate([0,0,layer_h*3]) bowl();\ntranslate([0,0,layer_h*2.5+flame_h/2]) flame();",
    "renders": true
  },
  {
    "household_item": "kelpwhisper",
    "openscad_code": "// Kelpwhisper - underwater listening device shaped like swaying kelp fronds\n// Overall size: 80 mm tall, 35 mm wide\n\n// Main parameters\nbase_radius = 8;\nfrond_height = 60;\nstalk_thickness = 4;\nwall_thickness = 1.6;\n\n// Base module\nmodule base() {\n    difference() {\n        // Main cylindrical base\n        cylinder(h = 12, r = base_radius, $fn = 48);\n        \n        // Hollow out center\n        translate([0, 0, wall_thickness])\n            cylinder(h = 12 - wall_thickness, r = base_radius - wall_thickness, $fn = 48);\n            \n        // Bottom vent holes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([base_radius - 2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 4, r = 1.5, $fn = 16);\n        }\n    }\n}\n\n// Stalk module with slight taper\nmodule stalk() {\n    // Create tapered hollow stalk\n    difference() {\n        cylinder(h1 = stalk_thickness, h2 = stalk_thickness * 0.7, r1 = stalk_thickness/2, r2 = stalk_thickness/3, h = frond_height, $fn = 16);\n        translate([0, 0, wall_thickness])\n            cylinder(h1 = stalk_thickness - wall_thickness*2, h2 = stalk_thickness*0.7 - wall_thickness*2, \n                    r1 = stalk_thickness/2 - wall_thickness, r2 = stalk_thickness/3 - wall_thickness, \n                    h = frond_height - wall_thickness, $fn = 16);\n    }\n}\n\n// Individual frond with realistic kelp blade shape\nmodule frond(length, width, angle) {\n    translate([0, 0, frond_height])\n        rotate([0, angle, 0])\n            translate([0, 0, -length/2])\n                difference() {\n                    // Main blade shape - elongated oval\n                    scale([width/length, 1, 1])\n                        rotate([90, 0, 0])\n                            cylinder(h = length, r1 = length/2, r2 = length/20, $fn = 32);\n                            \n                    // Hollow center\n                    scale([(width-wall_thickness*2)/length, 1, 1])\n                        rotate([90, 0, 0])\n                            translate([0, 0, wall_thickness])\n                                cylinder(h = length - wall_thickness*2, r1 = length/2 - wall_thickness, r2 = length/20 - wall_thickness/2, $fn = 32);\n                                \n                    // Create wavy edge with spheres\n                    for (i = [0:3:length-3]) {\n                        translate([width/4 * sin(i*3), 0, i])\n                            sphere(r = wall_thickness*2, $fn = 12);\n                        translate([-width/4 * sin(i*3), 0, i])\n                            sphere(r = wall_thickness*2, $fn = 12);\n                    }\n                }\n}\n\n// Microphone housing at base\nmodule mic_housing() {\n    difference() {\n        // Spherical housing\n        translate([0, 0, 8])\n            sphere(r = 6, $fn = 32);\n            \n        // Hollow interior\n        translate([0, 0, 8])\n            sphere(r = 4.4, $fn = 32);\n            \n        // Sound inlet\n        translate([0, 0, 2])\n            cylinder(h = 6, r = 2.5, $fn = 16);\n    }\n}\n\n// Wire channel through stalk\nmodule wire_channel() {\n    translate([0, 0, 6])\n        rotate([0, 0, 0])\n            cylinder(h = frond_height + 6, r = 1.5, $fn = 16);\n}\n\n// Assembly\nunion() {\n    // Base and housing\n    base();\n    mic_housing();\n    \n    // Stalk\n    stalk();\n    \n    // Wire channel\n    wire_channel();\n    \n    // Multiple fronds in realistic arrangement\n    frond(25, 8, 15);\n    frond(30, 10, -20);\n    frond(28, 9, 45);\n    frond(22, 7, -35);\n    frond(26, 8.5, 0);\n    \n    // Smaller secondary fronds\n    translate([0, stalk_thickness/2, frond_height - 10])\n        rotate([0, 0, 30])\n            frond(15, 5, 10);\n    translate([0, -stalk_thickness/2, frond_height - 15])\n        rotate([0, 0, -40])\n            frond(18, 6, -15);\n}",
    "renders": true
  },
  {
    "household_item": "loamsprite",
    "openscad_code": "// Loamsprite – realistic, medium-complexity 3D-printable model\n// Overall height ≈ 70 mm; base 50 mm Ø\n\n$fn=60; // smooth curves\n\n// Main body capsule\nmodule body() {\n    union() {\n        // rounded lower half\n        translate([0,0,12])\n            scale([1,1,0.65])\n            sphere(d=40);\n\n        // upper cylindrical segment\n        cylinder(d1=40, d2=36, h=25);\n    }\n}\n\n// Face mask\nmodule face() {\n    difference() {\n        translate([0,0,50])\n            cube([28,2,22], center=true);\n\n        // eye holes\n        for(x=[-7,7])\n            translate([x,1,53])\n                sphere(d=5);\n    }\n}\n\n// Arm segments\nmodule arm(side=1) { // side 1 = right, ‑1 = left\n    translate([side*22,0,40])\n    rotate([0,0,side*10])\n    union() {\n        // shoulder ball\n        sphere(d=10);\n        \n        // upper arm\n        translate([side*8,0,-5])\n            rotate([0,90,0])\n            cylinder(d=8, h=18);\n        \n        // forearm\n        translate([side*26,0,-5])\n            rotate([0,90,0])\n            cylinder(d1=8, d2=6, h=20);\n        \n        // hand\n        translate([side*46,0,-5])\n            sphere(d=10);\n    }\n}\n\n// Leg segments\nmodule leg(side=1) {\n    translate([side*12,0,0])\n    union() {\n        // thigh\n        cylinder(d1=12, d2=10, h=25);\n        \n        // shin\n        translate([0,0,-25])\n            cylinder(d1=10, d2=8, h=25);\n        \n        // foot\n        translate([0,side*8,-35])\n            rotate([90,0,0])\n            cylinder(d1=12, d2=18, h=8);\n    }\n}\n\n// Soil texture nubs (small bumps)\nmodule nubs() {\n    for(a=[0:45:315])\n    translate([0,0,10])\n    rotate([0,0,a])\n    for(r=[15:5:25])\n        translate([r,0,0])\n        sphere(d=3);\n}\n\n// Final assembly\nunion() {\n    body();\n    face();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n    nubs();\n}",
    "renders": true
  },
  {
    "household_item": "moonpetal",
    "openscad_code": "// Realistic Moon Petal\n// Dimensions: ~60mm diameter, gentle curves, printable from base up\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Petal profile module\nmodule petal_segment(length, width, height, twist) {\n    // Outer petal surface\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h=height, d1=width*0.8, d2=width*0.3, $fn=24);\n            translate([length, 0, 0])\n                rotate([0, twist, 0])\n                cylinder(h=height, d1=width*0.3, d2=width*0.1, $fn=24);\n        }\n        \n        // Hollow out for wall thickness\n        translate([0, 0, -0.1])\n            scale([0.85, 0.85, 1.1])\n            hull() {\n                translate([0, 0, 0])\n                    cylinder(h=height, d1=width*0.8-wall*2, d2=width*0.3-wall*2, $fn=24);\n                translate([length, 0, 0])\n                    rotate([0, twist, 0])\n                    cylinder(h=height, d1=width*0.3-wall*2, d2=width*0.1-wall*2, $fn=24);\n            }\n    }\n}\n\n// Vein details\nmodule petal_vein(length, width) {\n    for(i=[1:3]) {\n        translate([i*length/4, 0, wall+0.1])\n            rotate([0, 90, 0])\n                cylinder(h=width*0.1, d=0.4, $fn=8);\n    }\n}\n\n// Main petal assembly\nmodule petal() {\n    // Base petal\n    petal_segment(length=30, width=15, height=2, twist=15);\n    \n    // Side lobes\n    translate([5, 8, 0])\n        rotate([0, 0, 25])\n        petal_segment(length=20, width=10, height=2, twist=10);\n        \n    translate([5, -8, 0])\n        rotate([0, 0, -25])\n        petal_segment(length=20, width=10, height=2, twist=10);\n    \n    // Veins\n    petal_vein(length=30, width=15);\n}\n\n// Moon disk base\nmodule moon_base() {\n    difference() {\n        // Full moon\n        cylinder(h=wall*2, d=50, center=true, $fn=64);\n        \n        // Crescent cutout\n        translate([8, 0, -wall-0.1])\n            sphere(d=45, $fn=64);\n            \n        // Center hole for keychain\n        translate([0, -15, -wall-1])\n            cylinder(h=wall*2+2, d=3, $fn=16);\n    }\n}\n\n// Full assembly\nunion() {\n    // Moon base\n    moon_base();\n    \n    // Petals around moon\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([20, 0, wall])\n        petal();\n    }\n    \n    // Central bump\n    translate([0, 0, wall])\n        sphere(d=8, $fn=32);\n}",
    "renders": true
  },
  {
    "household_item": "nimbusglow",
    "openscad_code": "// NimbusGlow – medium-complexity, realistic, 3D-printable cloud-shaped LED diffuser\n// Overall footprint ≈ 65 mm Ø × 22 mm\n\n$fn = 36;               // Good balance between smoothness & print time\nwall = 1.5;             // Safe single-perimeter wall thickness\n\n// ---------- Parameters ----------\nbase_h  = 5;            // Flat base height\ncore_h  = 12;           // Inner LED cavity height\ncore_r  = 12;           // Inner LED cavity radius\ncloud_r = 20;           // Nominal radius for the cloud “blobs”\n\n// ---------- Utility ----------\n// Rounded-top cylinder for soft cloud puffs\nmodule puff(r, h) {\n    union() {\n        cylinder(h = h - r, r = r, center = false);\n        translate([0,0,h-r]) sphere(r = r);\n    }\n}\n\n// ---------- Main cloud shell ----------\nmodule cloud_shell() {\n    difference() {\n        // Outer cloud shape\n        union() {\n            // Central dome\n            translate([0,0,base_h]) puff(r = cloud_r, h = 14);\n            \n            // Four peripheral puffs\n            for (a = [0, 90, 180, 270]) {\n                rotate([0,0,a]) translate([cloud_r * 0.8, 0, base_h + 4])\n                    puff(r = cloud_r * 0.65, h = 10);\n            }\n        }\n        \n        // Hollow cavity for LED + wiring\n        translate([0,0,base_h]) cylinder(h = core_h + 2, r = core_r + wall);\n    }\n}\n\n// ---------- Vent & cable channel ----------\nmodule cable_channel() {\n    // Simple notch at rear for 2 mm cable\n    translate([0, -cloud_r - 1, base_h/2]) cube([4, 2, base_h], center = true);\n}\n\n// ---------- Assembly ----------\ndifference() {\n    union() {\n        // Solid base plate for print stability\n        cylinder(h = base_h, r = cloud_r + wall);\n        \n        // Add shell\n        cloud_shell();\n    }\n    \n    // Cable notch\n    cable_channel();\n}",
    "renders": true
  },
  {
    "household_item": "oakenshade",
    "openscad_code": "// Oakenshade – medium-realistic 3-D printable desk lamp shade\n// Overall size ≈ 85 mm Ø × 70 mm high\n// No steep overhangs, 1.2 mm wall thickness\n\n$fn = 36;\n\n/* ---- configurable wall thickness ---- */\nwall = 1.2;\n\n/* ---- trunk module ---- */\nmodule trunk(h=70, r=7) {\n    difference() {\n        // main trunk cylinder\n        cylinder(h=h, r1=r, r2=r*0.9, center=true);\n        // hollow core\n        translate([0,0,-h/2-1])\n            cylinder(h=h+2, r1=r-wall, r2=(r-wall)*0.9, center=true);\n    }\n}\n\n/* ---- acorn cap module (one quadrant) ---- */\nmodule acorn_cap(h=14, r=9) {\n    difference() {\n        // outer dome\n        scale([1,1,0.55])\n            sphere(r);\n        // inner hollow\n        translate([0,0,-r/2])\n            scale([1,1,0.55])\n                sphere(r-wall);\n        // attachment hole\n        cylinder(h=h,r=wall,center=true,$fn=6);\n    }\n}\n\n/* ---- acorn body module ---- */\nmodule acorn_body(h=20, r=7) {\n    difference() {\n        hull() {\n            sphere(r);\n            translate([0,0,h-r*1.8])\n                sphere(r*0.8);\n        }\n        // hollow inside\n        translate([0,0,-r])\n            hull() {\n                sphere(r-wall);\n                translate([0,0,h-r*1.8])\n                    sphere(r*0.8-wall);\n            }\n    }\n}\n\n/* ---- single acorn assembly ---- */\nmodule acorn() {\n    translate([0,0,9])  // move cap slightly above body\n        acorn_cap();\n    acorn_body();\n}\n\n/* ---- ring of acorns forming the shade ---- */\nmodule shade_ring(r_ring=40, count=8) {\n    for(i=[0:count-1])\n        rotate([0,0,i*360/count])\n            translate([r_ring,0,0])\n                rotate([0,90,0])\n                    acorn();\n}\n\n/* ---- bottom diffuser plate with light hole ---- */\nmodule diffuser(d=85, hole=30) {\n    difference() {\n        cylinder(h=wall, r=d/2, center=true);\n        cylinder(h=wall+1, r=hole/2, center=true);\n    }\n}\n\n/* ---- assemble the complete model ---- */\nunion() {\n    // central trunk for cable routing\n    trunk();\n    \n    // shade ring\n    shade_ring();\n    \n    // bottom diffuser\n    translate([0,0,-34])\n        diffuser();\n}",
    "renders": true
  },
  {
    "household_item": "pearlwink",
    "openscad_code": "// Pearlwink (Littorina littorea) – medium-realistic 3-D printable model\n// All dimensions in mm.  Shell ~55 mm tall, foot ~30 mm long.\n\n$fn = 50;                       // Nice curved surfaces\n\nmodule shell_whorl(h, r_base, r_top, twist) {\n    // Single whorl as a tapered, twisted cylinder\n    linear_extrude(height = h, twist = twist, scale = r_top / r_base)\n        circle(r = r_base);\n}\n\nmodule shell_body() {\n    union() {\n        // Apex (tiny sphere)\n        translate([0, 0, 52])\n            sphere(d = 4);\n\n        // Six whorls stacked and tapering\n        for(i = [0 : 5]) {\n            h = 7 + i * 1.2;               // increasing height\n            r = 9 - i * 1.2;               // decreasing radius\n            translate([0, 0, i * 7])\n                shell_whorl(h, r, r * 0.80, -30);\n        }\n    }\n}\n\nmodule aperture() {\n    // Oval opening\n    difference() {\n        shell_body();\n        translate([0, -5, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 60, d1 = 22, d2 = 18, center = true);\n    }\n}\n\nmodule columella() {\n    // Central pillar\n    color(\"cornsilk\")\n        translate([0, 0, 25])\n            rotate([90, 0, 0])\n                cylinder(h = 50, d = 3, center = true);\n}\n\nmodule foot() {\n    color(\"wheat\")\n    union() {\n        // Main muscular foot\n        translate([0, -12, -8])\n            scale([1, 1.6, 0.4])\n                sphere(d = 30);\n\n        // Slight sole ridge\n        translate([0, -12, -14])\n            difference() {\n                cube([22, 36, 2], center = true);\n                translate([0, 0, -1])\n                    cube([20, 34, 4], center = true);\n            }\n    }\n}\n\nmodule operculum() {\n    // Trap-door on rear of foot\n    color(\"tan\")\n    translate([0, 10, -5])\n        rotate([90, 0, 0])\n            scale([1, 1.2, 1])\n                cylinder(h = 2, d = 14);\n}\n\nmodule tentacles() {\n    // Pair of sensory tentacles\n    color(\"wheat\")\n    for(side = [-1, 1]) {\n        translate([side * 8, -25, 3])\n            rotate([0, 0, side * 20])\n                cylinder(h = 12, d = 2);\n    }\n}\n\nmodule eyes() {\n    // Tiny eyes on tentacle tips\n    color(\"black\")\n    for(side = [-1, 1]) {\n        translate([side * 8.5, -37, 4])\n            sphere(d = 1.2);\n    }\n}\n\n// Assembly\nunion() {\n    aperture();\n    columella();\n    foot();\n    operculum();\n    tentacles();\n    eyes();\n}",
    "renders": true
  },
  {
    "household_item": "quicksylva",
    "openscad_code": "// Quicksylva - Realistic Style, Medium Complexity\n// A compact forest-themed puzzle box with sliding lid and internal compartment\n// Total size: 60x50x45mm (printable without supports)\n\n// Main parameters\nbody_w = 40;\nbody_l = 50;\nbody_h = 35;\nwall_t = 2.5;\nlid_clear = 0.3;\n\n// Forest texture cylinder module\nmodule bark_texture(h, r_base, r_top, segments=36) {\n    for (i=[0:segments-1]) {\n        angle = i * 360/segments;\n        w = 1.5 + sin(i*3)*0.4; // Vary width for natural look\n        h_offset = cos(i*5)*0.6;\n        translate([0,0,h_offset])\n        rotate([0,0,angle])\n        translate([r_base,0,0])\n        cylinder(h=h, r1=w/2, r2=w/2, $fn=6);\n    }\n}\n\n// Main body - hollow box with rounded edges\nmodule body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([body_l, body_w, body_h], center=true);\n            sphere(r=3, $fn=12);\n        }\n        \n        // Inner cavity\n        minkowski() {\n            cube([body_l-wall_t*2, body_w-wall_t*2, body_h-wall_t*2], center=true);\n            sphere(r=3-wall_t, $fn=12);\n        }\n        \n        // Lid slot on top\n        translate([0, 0, body_h/2 + lid_clear])\n        cube([body_l, body_w, 5], center=true);\n    }\n}\n\n// Sliding lid with tree bark texture\nmodule lid() {\n    lid_h = 3;\n    \n    difference() {\n        // Main lid plate\n        translate([0, 0, body_h/2 + lid_h/2 + lid_clear])\n        cube([body_l + 2, body_w + 2, lid_h], center=true);\n        \n        // Handle recess\n        translate([0, body_w/2 - 5, body_h/2 + lid_h + lid_clear - 1])\n        cube([20, 8, 2], center=true);\n    }\n    \n    // Bark texture handle\n    translate([0, body_w/2 - 5, body_h/2 + lid_h + lid_clear + 1])\n    bark_texture(8, 8, 6);\n}\n\n// Tree ring pattern on lid top\nmodule tree_rings() {\n    for (i=[1:3:15]) {\n        translate([0, 0, body_h/2 + lid_clear + 3.5])\n        scale([1, 0.7, 1])\n        cylinder(h=0.3, r=i, center=true, $fn=32);\n    }\n}\n\n// Small leaf details\nmodule leaf() {\n    scale([0.8, 0.5, 0.2])\n    rotate([90, 0, 0])\n    cylinder(h=8, r1=3, r2=0.5, $fn=3);\n}\n\n// Assemble the model\nunion() {\n    body();\n    lid();\n    tree_rings();\n    \n    // Decorative leaves on corners\n    for (x=[-body_l/2 + 5, body_l/2 - 5]) {\n        for (y=[-body_w/2 + 5, body_w/2 - 5]) {\n            translate([x, y, body_h/2 + 3])\n            leaf();\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "rimeleaf",
    "openscad_code": "// Rimeleaf - Medium complexity realistic style\n// Overall dimensions: ~70mm x 40mm x 6mm\n\n// Parameters\nleaf_length = 70;\nleaf_width = 40;\nleaf_thickness = 1.5;\nmidrib_height = 0.6;\nvein_thickness = 0.4;\nrim_thickness = 1.0;\n\n// Main leaf shape\nmodule leaf_shape() {\n    // Basic elliptical leaf\n    difference() {\n        scale([1, 0.6, 0.1])\n            sphere(d=leaf_width, $fn=60);\n        \n        // Trim to proper length\n        translate([0, leaf_width/2, 0])\n            cube([leaf_length, leaf_width, leaf_thickness*2], center=true);\n    }\n}\n\n// Central midrib\nmodule midrib() {\n    translate([0, 0, leaf_thickness/2 + midrib_height/2])\n        scale([0.08, 0.9, 1])\n            cube([leaf_length, leaf_width/3, midrib_height], center=true);\n}\n\n// Secondary veins\nmodule secondary_veins() {\n    for (i = [-4:4]) {\n        if (i != 0) {\n            translate([i*6, 0, leaf_thickness/2 + vein_thickness/2])\n                rotate([0, 0, i > 0 ? 15 : -15])\n                    scale([0.8, 0.05, 1])\n                        cube([leaf_length/2, leaf_width/2, vein_thickness], center=true);\n        }\n    }\n}\n\n// Tertiary veins\nmodule tertiary_veins() {\n    for (y = [-15:5:15]) {\n        for (x = [-25:10:25]) {\n            if (abs(x) > 5 && abs(y) > 5) {\n                translate([x, y, leaf_thickness/2 + vein_thickness/2])\n                    rotate([0, 0, atan2(y, x)])\n                        scale([0.3, 0.02, 1])\n                            cube([8, 1, vein_thickness/2], center=true);\n            }\n        }\n    }\n}\n\n// Leaf serrations\nmodule serrations() {\n    difference() {\n        leaf_shape();\n        \n        // Create serrated edge\n        for (i = [0:5:360]) {\n            rotate([0, 0, i])\n                translate([leaf_width/2 + 1, 0, -1])\n                    rotate([0, 0, 15])\n                        cube([3, 2, leaf_thickness*3]);\n        }\n    }\n}\n\n// Rim for 3D printing strength\nmodule leaf_rim() {\n    translate([0, 0, -leaf_thickness/2])\n        linear_extrude(height=leaf_thickness*2)\n            offset(r=rim_thickness)\n                projection()\n                    leaf_shape();\n}\n\n// Assembly\nunion() {\n    // Main leaf body with serrations\n    serrations();\n    \n    // Reinforcement rim\n    leaf_rim();\n    \n    // Veins structure\n    union() {\n        midrib();\n        secondary_veins();\n        tertiary_veins();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "siltshimmer",
    "openscad_code": "// Siltshimmer realistic model\n// A medium-complexity 3D printable OpenSCAD design\n\n// Overall dimensions\nbody_len = 60;\nbody_wid = 25;\nbody_hgt = 12;\n\n// Wall thickness\nwall = 1.2;\n\nmodule main_body() {\n    // Central hull\n    hull() {\n        translate([-body_len/2, 0, 0]) sphere(d=body_wid*0.8);\n        translate([body_len/2, 0, 0]) sphere(d=body_wid*0.6);\n    }\n    \n    // Underside cavity for weight reduction\n    difference() {\n        children();\n        translate([0, 0, -body_hgt/2 - 0.1])\n            cube([body_len*0.9, body_wid*0.5, body_hgt*0.6], center=true);\n    }\n}\n\nmodule tail_fin() {\n    // Tail stabilizer\n    rotate([0, 0, 180])\n    for (i = [0:1]) mirror([0, i?0:1, 0]) {\n        translate([-body_len/2 - 8, 0, 0])\n        rotate([0, 0, 15])\n        linear_extrude(height=wall, center=true)\n        polygon(points=[[0,0],[-8,-6],[-12,0],[-8,6]]);\n    }\n}\n\nmodule side_fins() {\n    // Dorsal and ventral fins\n    for (y = [-1, 1]) {\n        translate([body_len*0.3, y*body_wid/2, 0])\n        rotate([0, y*90, 0])\n        difference() {\n            cylinder(h=body_len*0.4, r=body_wid*0.35, $fn=6);\n            translate([0, 0, wall])\n            cylinder(h=body_len*0.4 + 0.2, r=body_wid*0.35 - wall, $fn=6);\n        }\n    }\n}\n\nmodule eyes() {\n    // Compound eyes\n    for (x = [body_len*0.35, body_len*0.45]) {\n        for (y = [-1, 1]) {\n            translate([x, y*body_wid*0.25, body_hgt*0.2])\n            sphere(d=body_wid*0.15);\n        }\n    }\n}\n\nmodule gill_slits() {\n    // Realistic gill openings\n    for (i = [0:2]) {\n        translate([body_len*0.1 - i*4, body_wid*0.35, -body_hgt*0.1])\n        rotate([0, 90, 0])\n        cylinder(h=wall+0.1, r=1.5, $fn=8);\n    }\n}\n\nmodule mouth() {\n    // Ventral mouth opening\n    translate([body_len*0.4, 0, -body_hgt*0.4])\n    rotate([0, 0, 0])\n    difference() {\n        sphere(d=body_wid*0.3);\n        translate([0, 0, -body_wid*0.2])\n        cube([body_wid*0.4, body_wid*0.4, body_wid*0.4], center=true);\n    }\n}\n\nmodule whiskers() {\n    // Sensory barbels\n    for (side = [-1, 1]) {\n        translate([body_len*0.35, side*body_wid*0.2, -body_hgt*0.3])\n        rotate([0, 0, side*20])\n        cylinder(h=body_len*0.15, r=0.6);\n    }\n}\n\n// Assemble the siltshimmer\nunion() {\n    difference() {\n        main_body();\n        // Hollow interior\n        scale([0.8, 0.75, 0.7])\n        main_body();\n    }\n    \n    tail_fin();\n    side_fins();\n    eyes();\n    gill_slits();\n    mouth();\n    whiskers();\n}",
    "renders": true
  },
  {
    "household_item": "tinderwillow",
    "openscad_code": "// Tinderwillow - Realistic Style, Medium Complexity\n// Recognizable willow with tinder fungus growing on trunk\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n$fn = 24; // Smooth curves\n\n// Main parameters\ntrunk_height = 70;\ntrunk_radius = 8;\ncrown_radius = 25;\ncrown_height = 40;\nbase_thickness = 3;\n\n// Module for willow leaves\nmodule willow_leaf(length, width, angle) {\n    translate([0, 0, length/2])\n    rotate([0, angle, 0])\n    scale([width, 0.5, length])\n    sphere(1);\n}\n\n// Module for tinder fungus brackets\nmodule tinder_fungus(size) {\n    difference() {\n        // Main bracket shape\n        scale([1, 0.7, 0.2])\n        sphere(size);\n        \n        // Underside pores texture\n        for (i = [0:5]) {\n            for (j = [0:3]) {\n                translate([\n                    (i-2.5)*size*0.3,\n                    (j-1.5)*size*0.3,\n                    -size*0.1\n                ])\n                cylinder(h=size*0.2, r=size*0.05);\n            }\n        }\n    }\n}\n\n// Base plate for stability\ntranslate([0, 0, base_thickness/2])\n    cube([trunk_radius*4, trunk_radius*4, base_thickness], center=true);\n\n// Main trunk with slight taper\ndifference() {\n    cylinder(h=trunk_height, r1=trunk_radius, r2=trunk_radius*0.7);\n    // Bark texture grooves\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([trunk_radius*0.9, -1, 0])\n        cube([2, 2, trunk_height]);\n    }\n}\n\n// Crown - weeping willow branches\ntranslate([0, 0, trunk_height])\nunion() {\n    // Main crown shape\n    scale([1, 1, 1.5])\n    sphere(crown_radius);\n    \n    // Weeping branches\n    for (angle = [0:30:359]) {\n        rotate([0, 0, angle])\n        translate([crown_radius*0.8, 0, 0])\n        rotate([90, 0, 0])\n        for (i = [0:5:20]) {\n            translate([0, 0, -i])\n            cylinder(h=5, r1=1.5-i*0.05, r2=1-i*0.05);\n        }\n    }\n}\n\n// Leaves on branches\nfor (angle = [0:45:359]) {\n    rotate([0, 0, angle])\n    translate([crown_radius*1.1, 0, -crown_height*0.4])\n    for (i = [0:4]) {\n        rotate([0, 0, i*30])\n        translate([0, 0, -i*5])\n        willow_leaf(8, 2, 15);\n    }\n}\n\n// Tinder fungus brackets on trunk\ntranslate([trunk_radius*0.8, 0, trunk_height*0.6])\n    rotate([0, -30, 0])\n    tinder_fungus(6);\n\ntranslate([-trunk_radius*0.6, -trunk_radius*0.4, trunk_height*0.45])\n    rotate([0, 45, 15])\n    tinder_fungus(4);\n\ntranslate([trunk_radius*0.3, trunk_radius*0.7, trunk_height*0.3])\n    rotate([0, 60, -20])\n    tinder_fungus(5);\n\n// Roots spreading into base\nfor (angle = [0:45:359]) {\n    rotate([0, 0, angle])\n    translate([trunk_radius*0.5, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=base_thickness*2, r1=2, r2=0.5);\n}",
    "renders": true
  },
  {
    "household_item": "umberglen",
    "openscad_code": "// Umberglen (Medieval-style lantern house) – medium-complexity realistic model\n// All dimensions in millimetres; designed for FDM printing with 0.4 mm nozzle\n// No extreme overhangs; roofs print as separate parts or with 45° slopes\n// Overall footprint ≈ 70 mm × 60 mm, height ≈ 85 mm\n\n// Wall thickness\nwall = 1.6;\n\n// House body\nmodule body() {\n    difference() {\n        // Main block\n        cube([60, 50, 40], center = true);\n\n        // Doorway (rounded top)\n        translate([0, 25.2, -10])\n            union() {\n                cube([14, wall + 0.2, 24], center = true);\n                translate([0, 0, 12])\n                    cylinder(h = wall + 0.2, d = 14, center = true);\n            }\n\n        // Two windows front\n        translate([-15, 25.2, 5])\n            cube([10, wall + 0.2, 12], center = true);\n        translate([15, 25.2, 5])\n            cube([10, wall + 0.2, 12], center = true);\n\n        // Two windows back\n        translate([-15, -25.2, 5])\n            cube([10, wall + 0.2, 12], center = true);\n        translate([15, -25.2, 5])\n            cube([10, wall + 0.2, 12], center = true);\n    }\n}\n\n// Timber frame strips\nmodule timber() {\n    color(\"SaddleBrown\")\n    for (i = [-1, 1]) {\n        // Horizontal bands front & back\n        translate([0, i * 25, 8])\n            cube([64, 4, 4], center = true);\n        translate([0, i * 25, -8])\n            cube([64, 4, 4], center = true);\n\n        // Vertical bands front & back\n        for (x = [-25, 0, 25]) {\n            translate([x, i * 25, 0])\n                cube([4, 4, 42], center = true);\n        }\n\n        // Horizontal bands sides\n        translate([i * 30, 0, 8])\n            cube([4, 54, 4], center = true);\n        translate([i * 30, 0, -8])\n            cube([4, 54, 4], center = true);\n\n        // Vertical bands sides\n        for (y = [-20, 0, 20]) {\n            translate([i * 30, y, 0])\n                cube([4, 4, 42], center = true);\n        }\n    }\n}\n\n// Hipped roof\nmodule roof() {\n    color(\"DarkGoldenrod\")\n    union() {\n        // Main pyramid\n        translate([0, 0, 20 + 15])\n            rotate([0, 0, 45])\n            cylinder(h = 30, r1 = 45, r2 = 0, $fn = 4);\n\n        // Chimney\n        translate([20, 15, 20 + 30])\n            cylinder(h = 15, d = 8, $fn = 12);\n\n        // Chimney cap\n        translate([20, 15, 20 + 30 + 8])\n            cylinder(h = 3, d = 11, $fn = 12);\n    }\n}\n\n// Lantern box on ridge\nmodule lantern() {\n    color(\"Gold\")\n    translate([0, 0, 20 + 30 + 5])\n    union() {\n        // Base\n        cube([16, 16, 4], center = true);\n\n        // Glass panes frame (simple bars)\n        translate([0, 0, 6])\n            cube([14, 14, 12], center = true);\n        translate([0, 0, 12])\n            cube([12, 12, 2], center = true);\n\n        // Roof of lantern\n        translate([0, 0, 6 + 12 + 2])\n            rotate([0, 0, 45])\n            cylinder(h = 6, r1 = 12, r2 = 0, $fn = 4);\n    }\n}\n\n// Door with planks\nmodule door() {\n    color(\"SaddleBrown\")\n    translate([0, 25.9, -10])\n    union() {\n        // Door slab\n        cube([14, wall, 24], center = true);\n\n        // Planks\n        for (z = [-8, -2, 4, 10]) {\n            translate([0, 0, z])\n                cube([12, wall, 2.5], center = true);\n        }\n\n        // Simple ring handle\n        translate([4, 26.5, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 3, d = 3, $fn = 12);\n    }\n}\n\n// Window shutters\nmodule shutters() {\n    color(\"SaddleBrown\")\n    for (side = [-1, 1])\n    for (x = [-15, 15]) {\n        translate([x, side * 25.9, 5])\n            rotate([0, side * 20, 0])\n            cube([5, wall, 12], center = true);\n    }\n}\n\n// Render\nunion() {\n    body();\n    timber();\n    roof();\n    lantern();\n    door();\n    shutters();\n}",
    "renders": true
  },
  {
    "household_item": "verdantgleam",
    "openscad_code": "// Verdantgleam - a bioluminescent seed pod\n// Realistic style, medium complexity\n// Approximately 70mm tall, 3D printable\n\n// Parameters for easy scaling\nbase_d = 40;                // Pod base diameter\nbase_h = 35;                // Pod base height\nstem_d = 6;                 // Stem diameter\nstem_h = 25;                // Stem height\nleaf_l = 18;                // Leaf length\nleaf_w = 8;                 // Leaf width\nseed_r = 2.5;               // Individual seed radius\nwall_t = 1.2;               // Wall thickness for printing\ndetail = 32;                // Circle resolution\n\n// Main module\nmodule verdantgleam() {\n    union() {\n        // Central stem\n        translate([0, 0, stem_h/2])\n            cylinder(d = stem_d, h = stem_h, $fn = detail);\n        \n        // Pod base (hollow for seeds)\n        difference() {\n            // Outer shell\n            pod_base();\n            \n            // Hollow interior\n            translate([0, 0, wall_t])\n                scale([0.8, 0.8, 0.9])\n                    pod_base();\n        }\n        \n        // Tri-leaf collar at top\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n                translate([0, stem_d/2 + 2, stem_h + base_h - 5])\n                    rotate([0, 30, 0])\n                        leaf();\n        }\n        \n        // Seeds inside pod\n        seed_cluster();\n    }\n}\n\n// Pod base shape (teardrop with flat bottom)\nmodule pod_base() {\n    hull() {\n        // Bottom flat\n        translate([0, 0, 0])\n            cylinder(d = base_d, h = 2, $fn = detail);\n        \n        // Mid bulge\n        translate([0, 0, base_h * 0.4])\n            sphere(d = base_d * 1.2, $fn = detail);\n        \n        // Top taper\n        translate([0, 0, base_h])\n            sphere(d = base_d * 0.5, $fn = detail);\n    }\n}\n\n// Leaf with realistic vein structure\nmodule leaf() {\n    difference() {\n        // Basic leaf shape\n        scale([1, leaf_w/leaf_l, 1])\n            rotate([90, 0, 90])\n                cylinder(h = leaf_l, r1 = leaf_w/2, r2 = 1, $fn = detail);\n        \n        // Vein grooves\n        for(i = [-30:15:30]) {\n            rotate([0, 0, i])\n                translate([0, 0, -0.3])\n                    scale([0.9, 0.05, 0.3])\n                        rotate([90, 0, 90])\n                            cylinder(h = leaf_l * 0.8, r1 = leaf_w/2, r2 = 0.5, $fn = detail);\n        }\n    }\n}\n\n// Cluster of seeds inside pod\nmodule seed_cluster() {\n    // Central seed\n    translate([0, 0, base_h * 0.3])\n        sphere(r = seed_r * 1.2, $fn = detail);\n    \n    // Ring of seeds\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([base_d * 0.25, 0, base_h * 0.3])\n                sphere(r = seed_r, $fn = detail);\n    }\n    \n    // Upper ring\n    for(i = [22.5:45:359]) {\n        rotate([0, 0, i])\n            translate([base_d * 0.2, 0, base_h * 0.5])\n                sphere(r = seed_r * 0.8, $fn = detail);\n    }\n}\n\n// Generate the model\nverdantgleam();",
    "renders": true
  },
  {
    "household_item": "whispergale",
    "openscad_code": "// Whispergale - realistic style, medium complexity\n// A compact wind instrument inspired by traditional flutes with modern aesthetics\n\n$fn = 64;\n\n// Overall dimensions\nlength = 80;\ndiameter = 20;\nwall_thickness = 2;\n\nmodule whispergale() {\n    // Main body tube\n    difference() {\n        // Outer cylinder\n        cylinder(h=length, d=diameter, center=true);\n        \n        // Inner bore\n        translate([0, 0, 0])\n            cylinder(h=length+2, d=diameter-wall_thickness*2, center=true);\n    }\n    \n    // Mouthpiece\n    translate([0, 0, length/2-5])\n    difference() {\n        // Mouthpiece body\n        cylinder(h=10, d1=diameter+4, d2=diameter, center=false);\n        \n        // Air channel\n        translate([0, 0, 2])\n            cube([diameter/4, diameter/2, 8], center=true);\n    }\n    \n    // Window/labium edge\n    translate([0, diameter/2-1, length/2-8])\n    difference() {\n        cube([diameter/3, wall_thickness+1, 4], center=true);\n        \n        // Sharp edge for sound production\n        translate([0, -wall_thickness, 0])\n            cube([diameter/3+1, wall_thickness, 4], center=true);\n    }\n    \n    // Finger holes - 6 standard positions\n    for(i=[0:5]) {\n        hole_pos = length/2 - 15 - i*8;\n        angle = (i % 2) * 45; // Offset every other hole\n        \n        rotate([0, 0, angle])\n        translate([0, diameter/2 - wall_thickness, hole_pos])\n        rotate([90, 0, 0])\n        cylinder(h=diameter, d1=5, d2=4, center=true);\n    }\n    \n    // Thumb hole\n    translate([0, -diameter/2 + wall_thickness, 0])\n    rotate([90, 0, 0])\n    cylinder(h=diameter, d1=4, d2=3, center=true);\n    \n    // Decorative rings\n    for(pos=[-25, 25]) {\n        translate([0, 0, pos])\n        difference() {\n            cylinder(h=3, d=diameter+2, center=true);\n            cylinder(h=5, d=diameter, center=true);\n        }\n    }\n    \n    // Sound holes at bottom\n    translate([0, 0, -length/2+8])\n    difference() {\n        cylinder(h=8, d=diameter, center=false);\n        \n        // Four sound holes\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([diameter/3, 0, 4])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=3, center=true);\n        }\n    }\n    \n    // Embouchure hole\n    translate([0, diameter/4, length/2-5])\n    rotate([0, 30, 0])\n    cylinder(h=wall_thickness*2, d=6, center=true);\n}\n\n// Create the whispergale\nwhispergale();",
    "renders": true
  },
  {
    "household_item": "xeroflare",
    "openscad_code": "// Xeroflare flare – realistic, medium complexity\n// Overall length ≈ 90 mm, diameter ≈ 30 mm\n// All overhangs ≤ 45°, walls ≥ 1 mm\n\n// Body parameters\nbody_r = 15;            // mm\nbody_h = 70;\nwall_t = 1.5;\n\n// Cap parameters\ncap_h = 10;\ncap_r = body_r;\ncap_thread_r = cap_r - wall_t;\ncap_thread_h = 7;\ncap_grip_r = cap_r + 2;\ncap_grip_h = 3;\n\n// Igniter button\nbutton_r = 5;\nbutton_h = 3;\nbutton_y = body_h/2;\n\n// Belt clip\nclip_w = 25;\nclip_h = 35;\nclip_t = 2;\n\n// Texturing rings\nring_n = 5;\nring_h = 1;\nring_gap = 2;\n\n// Main tube (hollow)\nmodule body() {\n    difference() {\n        cylinder(h = body_h, r = body_r, center = false);\n        translate([0, 0, wall_t])\n            cylinder(h = body_h - wall_t*2, r = body_r - wall_t, center = false);\n    }\n}\n\n// Screw-on cap with knurls\nmodule cap() {\n    difference() {\n        // Outer shape\n        union() {\n            // Cylindrical base\n            cylinder(h = cap_h, r = cap_r, center = false);\n            // Knurled grip ring\n            translate([0, 0, cap_h - cap_grip_h])\n                cylinder(h = cap_grip_h, r = cap_grip_r, center = false);\n        }\n        // Hollow inside\n        translate([0, 0, wall_t])\n            cylinder(h = cap_h - wall_t, r = cap_thread_r, center = false);\n    }\n\n    // Thread ridges (simple protrusions)\n    for (i = [0 : 120 : 359])\n        rotate([0, 0, i])\n            translate([cap_thread_r, 0, wall_t])\n                cube([1, 0.5, cap_thread_h], center = true);\n}\n\n// Igniter push-button\nmodule button() {\n    translate([body_r + button_r/2 + 1, 0, button_y])\n        rotate([0, 90, 0])\n            cylinder(h = button_h, r = button_r, center = true);\n}\n\n// Belt clip attached to cap end\nmodule clip() {\n    translate([0, 0, body_h + cap_h])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer profile\n                linear_extrude(height = clip_t)\n                    polygon(points = [\n                        [0, 0],\n                        [clip_w/2, 0],\n                        [clip_w/2, clip_h*0.9],\n                        [clip_w/2 - 4, clip_h],\n                        [-clip_w/2 + 4, clip_h],\n                        [-clip_w/2, clip_h*0.9],\n                        [-clip_w/2, 0]\n                    ]);\n                // Inner slot\n                translate([0, clip_h*0.5, -1])\n                    cube([clip_w - 4, clip_h*0.6, clip_t + 2], center = true);\n            }\n}\n\n// Texturing rings around body\nmodule texture_rings() {\n    for (i = [0 : 1 : ring_n - 1]) {\n        z = wall_t + i*(ring_h + ring_gap);\n        translate([0, 0, z])\n            cylinder(h = ring_h, r1 = body_r, r2 = body_r + 0.5, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([0, 0, body_h])\n        cap();\n    texture_rings();\n    button();\n    clip();\n}",
    "renders": true
  },
  {
    "household_item": "yearnshade",
    "openscad_code": "// Realistic-style Yearnshade (medium complexity)\n// 3D printable, ~75 mm diameter, no extreme overhangs\n\n// Overall dimensions\nshade_d = 75;\nshade_h = 45;\nwall_t = 2;          // uniform wall thickness for printability\n\n// Modules ------------------------------------------------------------\n\nmodule shade_top() {\n    difference() {\n        // main dome\n        sphere(d = shade_d, $fn = 90);\n\n        // hollow inside\n        translate([0, 0, wall_t])\n            sphere(d = shade_d - 2 * wall_t, $fn = 90);\n\n        // flat top for printing\n        translate([0, 0, shade_d/2 - 0.1])\n            cube([shade_d*1.5, shade_d*1.5, shade_d], center = true);\n    }\n}\n\nmodule vent_holes(n = 6) {\n    // radial cooling vents near the top\n    for (i = [0 : n-1]) {\n        rotate([0, 0, i*360/n])\n            translate([shade_d/2 - 3*wall_t, 0, shade_d/2 - 4*wall_t])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_t + 1, d = 4, $fn = 20);\n    }\n}\n\nmodule socket_holder() {\n    // cylindrical neck for bulb socket\n    difference() {\n        cylinder(h = 12, d = 25, $fn = 40);\n        translate([0, 0, -1])\n            cylinder(h = 14, d = 20, $fn = 40);\n    }\n}\n\nmodule cable_channel() {\n    // channel for cable exit at the side\n    difference() {\n        translate([0, 0, 5])\n            cylinder(h = 10, d = 8, $fn = 30);\n        translate([0, 0, 5])\n            rotate([0, 90, 0])\n                cube([20, 8.5, 8.5], center = true);\n    }\n}\n\nmodule mounting_ring() {\n    // ring for hanging or clamping\n    rotate_extrude($fn = 60)\n        translate([shade_d/2 - wall_t - 2, 0, 0])\n            square([wall_t, 6]);\n}\n\n// Assembly -----------------------------------------------------------\n\nunion() {\n    shade_top();\n    translate([0, 0, shade_h/2 - shade_d/2 + wall_t])\n        socket_holder();\n    translate([0, 0, shade_h/2 - shade_d/2 + wall_t])\n        vent_holes();\n    translate([shade_d/2 - wall_t - 5, 0, shade_h/2 - shade_d/2 + wall_t + 6])\n        cable_channel();\n    translate([0, 0, shade_h/2 - shade_d/2 + wall_t + 3])\n        mounting_ring();\n}",
    "renders": true
  },
  {
    "household_item": "zinfay",
    "openscad_code": "// Realistic Zinfay (Medium Complexity)\n// Approx 60 mm tall, 3D-printable, no support needed\n\n$fn = 36;\n\n// Overall dimensions\nbody_w = 40;\nbody_h = 30;\nbody_d = 30;\nneck_l = 20;\nneck_r = 5;\nhead_r = 12;\n\n// Feet\nmodule foot() {\n    difference() {\n        cylinder(h = 8, r1 = 7, r2 = 5);\n        translate([0, 0, 6])\n            cylinder(h = 3, r1 = 4, r2 = 3);\n    }\n}\n\n// Body shell\nmodule body() {\n    difference() {\n        hull() {\n            translate([0, 0, body_h/2])\n                cube([body_w, body_d, body_h], center=true);\n            translate([0, 0, body_h])\n                sphere(d = body_w * 0.9);\n        }\n        // Hollow cavity\n        translate([0, 0, 2])\n            cube([body_w-6, body_d-6, body_h*0.8], center=true);\n    }\n}\n\n// Neck and head\nmodule neck_head() {\n    union() {\n        // Neck\n        cylinder(h = neck_l, r = neck_r, center=false);\n        // Head sphere\n        translate([0, 0, neck_l])\n            sphere(r = head_r);\n        // Beak\n        translate([head_r*0.7, 0, neck_l+head_r*0.3])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r1 = 5, r2 = 2);\n    }\n}\n\n// Wings\nmodule wing() {\n    difference() {\n        hull() {\n            cube([15, 3, 25]);\n            translate([10, 0, 20])\n                sphere(d = 8);\n        }\n        translate([0, -2, 10])\n            cube([16, 5, 8]);\n    }\n}\n\n// Tail\nmodule tail() {\n    difference() {\n        hull() {\n            translate([-body_w/2-2, 0, body_h*0.7])\n                sphere(d = 8);\n            translate([-body_w/2-15, 0, body_h*0.5])\n                sphere(d = 4);\n        }\n        translate([-body_w/2-20, -5, body_h*0.3])\n            cube([20, 10, 20]);\n    }\n}\n\n// Eyes\nmodule eye() {\n    difference() {\n        sphere(r = 3);\n        translate([2, 0, 0])\n            sphere(r = 1.5);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n\n    // Neck and head assembly\n    translate([0, 0, body_h])\n        neck_head();\n\n    // Eyes\n    translate([head_r*0.6, head_r*0.4, neck_l+head_r*0.7])\n        eye();\n    translate([head_r*0.6, -head_r*0.4, neck_l+head_r*0.7])\n        mirror([0,1,0])\n            eye();\n\n    // Wings\n    translate([0, body_d/2, body_h*0.7])\n        wing();\n    translate([0, -body_d/2, body_h*0.7])\n        mirror([0,1,0])\n            wing();\n\n    // Tail\n    translate([0, 0, 0])\n        tail();\n\n    // Feet\n    translate([body_w/4, body_d/3, 0])\n        foot();\n    translate([body_w/4, -body_d/3, 0])\n        foot();\n}",
    "renders": true
  },
  {
    "household_item": "ambergust",
    "openscad_code": "// Ambiguous August (Ambergust) – a stylised “amber hourglass”\n// 75 mm tall, entirely printable without supports\n\n$fn=40;\n\n// Overall scale factor\nSCALE = 1;\n\n// Wall thickness for all hollow parts\nWALL = 1.2;\n\n// Central chamber radius\nCHAM_R = 18;\n\n// Overall height\nTOTAL_H = 75;\n\n// Neck height\nNECK_H = 12;\n\n// Top / bottom dome height\nDOME_H = 20;\n\n// Funnel neck radius\nNECK_R = 8;\n\n// Number of amber “droplets”\nDROPLET_N = 6;\n\n// Droplet size\nDROPLET_R = 6;\n\n// Base ring height\nBASE_H = 4;\n\n// Base ring outer radius\nBASE_OR = CHAM_R + 6;\n\n// Simple module for hollow cylinder with wall\nmodule hollow_cylinder(h, r, wall=WALL) {\n    difference() {\n        cylinder(h=h, r=r, center=true);\n        translate([0,0,-0.1])\n            cylinder(h=h+0.2, r=r-wall, center=true);\n    }\n}\n\n// Simple module for hollow sphere with wall\nmodule hollow_sphere(r, wall=WALL) {\n    difference() {\n        sphere(r=r);\n        sphere(r=r-wall);\n    }\n}\n\n// Droplet module\nmodule droplet(r) {\n    // Teardrop: union of sphere + stretched sphere\n    union() {\n        sphere(r=r);\n        translate([0,0,-r*0.9])\n            scale([1,1,1.5])\n                sphere(r=r*0.8);\n    }\n}\n\n// Main model\nmodule ambergust() {\n    // Central hourglass body\n    difference() {\n        union() {\n            // Bottom dome\n            translate([0,0,-TOTAL_H/2+DOME_H/2])\n                hollow_sphere(DOME_H);\n\n            // Top dome\n            translate([0,0,TOTAL_H/2-DOME_H/2])\n                hollow_sphere(DOME_H);\n\n            // Neck – hollow cylinder\n            translate([0,0,0])\n                hollow_cylinder(NECK_H, NECK_R);\n        }\n\n        // Cut the domes so they sit flat on print bed\n        translate([0,0,-TOTAL_H/2-1])\n            cube([BASE_OR*3,BASE_OR*3,2], center=true);\n        translate([0,0,TOTAL_H/2-1])\n            cube([BASE_OR*3,BASE_OR*3,2], center=true);\n    }\n\n    // Decorative base ring\n    difference() {\n        cylinder(h=BASE_H, r=BASE_OR, center=true);\n        cylinder(h=BASE_H+0.2, r=CHAM_R+WALL, center=true);\n    }\n\n    // Decorative top ring\n    translate([0,0,TOTAL_H-BASE_H/2])\n        difference() {\n            cylinder(h=BASE_H, r=BASE_OR, center=true);\n            cylinder(h=BASE_H+0.2, r=CHAM_R+WALL, center=true);\n        }\n\n    // Floating amber droplets inside\n    for (i=[0:DROPLET_N-1]) {\n        angle = 360*i/DROPLET_N;\n        radius = CHAM_R*0.7;\n        h = -TOTAL_H/4 + i*(TOTAL_H/2)/DROPLET_N;\n        translate([radius*cos(angle), radius*sin(angle), h])\n            droplet(DROPLET_R);\n    }\n\n    // Small vent hole in top for pressure equalisation\n    translate([0,0,TOTAL_H/2-0.5])\n        cylinder(h=2, r=2, center=true);\n}\n\n// Render with scale\nscale([SCALE,SCALE,SCALE])\n    ambergust();",
    "renders": true
  },
  {
    "household_item": "brackenwhirl",
    "openscad_code": "// BrackenWhirl - Realistic Style, Medium Complexity\n// A realistic interpretation of a brackenwhirl with spiral fern-like structure\n\n// Main parameters\nbase_radius = 20;\nstem_height = 60;\nfrond_count = 7;\nfrond_length = 35;\nfrond_width = 12;\nmin_thickness = 1.2;\n\n// Support structure for printability\nsupport_radius = 5;\nsupport_height = 8;\n\nmodule stem() {\n    // Central spiral stem with gradual taper\n    for (i = [0:1:stem_height*2]) {\n        h = i / 2;\n        taper = 1 - (h / stem_height) * 0.4;\n        translate([sin(h*15)*3, cos(h*15)*3, h])\n            cylinder(h=1.2, r1=base_radius/4 * taper, r2=base_radius/4 * taper - 0.2, $fn=8);\n    }\n}\n\nmodule frond(start_angle, height_offset) {\n    // Individual frond with realistic leaf structure\n    angle_step = 360 / 12;\n    \n    // Main frond stem\n    rotate([0, 0, start_angle])\n    translate([0, 0, height_offset])\n    rotate([70, 0, 0])\n    linear_extrude(height=frond_length*0.8, center=false, scale=[0.3, 0.3])\n        circle(r=min_thickness, $fn=6);\n    \n    // Leaflets along frond\n    for (i = [1:2:8]) {\n        pos = i / 8;\n        leaflet_length = frond_length * (1 - pos * 0.3);\n        leaflet_width = frond_width * (1 - pos * 0.4);\n        \n        rotate([0, 0, start_angle])\n        translate([0, 0, height_offset])\n        rotate([0, 0, start_angle * 2 + i * 15])\n        translate([sin(pos * 90) * frond_length/3, \n                  cos(pos * 90) * frond_length/3, \n                  pos * frond_length/2])\n        rotate([90 - pos * 20, 0, start_angle * 3])\n        scale([1, leaflet_width/leaflet_length, 1])\n        difference() {\n            // Main leaflet shape\n            cylinder(h=leaflet_length, r1=leaflet_width/2, r2=leaflet_width/4, $fn=8);\n            \n            // Vein indentation\n            translate([0, 0, -0.1])\n            cylinder(h=leaflet_length + 0.2, r1=min_thickness, r2=min_thickness, $fn=4);\n        }\n    }\n}\n\nmodule base_support() {\n    // Sturdy base for print stability\n    difference() {\n        cylinder(h=support_height, r=base_radius, $fn=32);\n        \n        // Lightening holes\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([base_radius/2, 0, -0.1])\n            cylinder(h=support_height + 0.2, r=support_radius/2, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base_support();\n    \n    // Central stem\n    translate([0, 0, support_height - 0.2])\n    stem();\n    \n    // Fronds in spiral arrangement\n    for (i = [0:1:frond_count-1]) {\n        angle = i * (360 / frond_count);\n        height = support_height + stem_height * (i / frond_count);\n        frond(angle, height);\n    }\n    \n    // Top detail\n    translate([0, 0, support_height + stem_height])\n    sphere(r=base_radius/3, $fn=16);\n}",
    "renders": true
  },
  {
    "household_item": "cinderroot",
    "openscad_code": "// Cinderroot - realistic style, medium complexity\n// All dimensions in mm, printable without supports\n\n// Main parameters\nroot_diameter = 25;\ntotal_height = 70;\nwall_thickness = 2;\n\nmodule cinderroot() {\n    // Main root body\n    union() {\n        // Central core\n        difference() {\n            cylinder(h=total_height, d=root_diameter, $fn=32);\n            cylinder(h=total_height-5, d=root_diameter-wall_thickness*2, $fn=32);\n        }\n        \n        // Root flare at base\n        translate([0,0,-5]) \n            difference() {\n                cylinder(h=10, d1=root_diameter, d2=root_diameter+8, $fn=32);\n                cylinder(h=10, d1=root_diameter-wall_thickness*2, d2=root_diameter+8-wall_thickness*2, $fn=32);\n            }\n        \n        // Surface char marks\n        for(i = [0:30]) {\n            rotate([0,0,rand(i*123)*360]) \n            translate([\n                sin(i*73)*root_diameter/2.2,\n                cos(i*73)*root_diameter/2.2,\n                rand(i*321)*total_height\n            ]) \n            scale([rand(i*111)*0.8+0.2, rand(i*222)*0.8+0.2, 1])\n            difference() {\n                sphere(d=rand(i*333)*3+2, $fn=8);\n                translate([0,0,-1]) cube([10,10,5], center=true);\n            }\n        }\n        \n        // Root hairs\n        for(i = [0:15]) {\n            angle = i*24;\n            translate([\n                sin(angle)*root_diameter/2.1,\n                cos(angle)*root_diameter/2.1,\n                -8\n            ]) {\n                rotate([rand(i*55)*15+30, 0, angle]) \n                difference() {\n                    cylinder(h=rand(i*77)*8+5, d1=rand(i*88)*1.5+1, d2=0.5, $fn=6);\n                    translate([0,0,-1]) cube(2, center=true);\n                }\n            }\n        }\n        \n        // Top growth ring pattern\n        for(z = [total_height-15:2:total_height-5]) {\n            rotate([0,0,z*5]) \n            difference() {\n                cylinder(h=2.5, d=root_diameter-(total_height-z)*0.8, $fn=32);\n                cylinder(h=2.5, d=root_diameter-(total_height-z)*0.8-wall_thickness*2, $fn=32);\n            }\n        }\n        \n        // Burnt cracks\n        for(i = [0:5]) {\n            angle = i*72;\n            translate([0,0,total_height/2])\n            rotate([0,0,angle]) {\n                difference() {\n                    translate([root_diameter/2-wall_thickness,0,0]) \n                    cube([wall_thickness*2, wall_thickness, total_height]);\n                    translate([root_diameter/2-wall_thickness,0,-wall_thickness]) \n                    cube([wall_thickness*4, wall_thickness*2, total_height+wall_thickness*2]);\n                }\n            }\n        }\n    }\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(seed) = (seed*9301+49297)%233280/233280;\n\n// Render the root centered at origin\ncinderroot();",
    "renders": true
  },
  {
    "household_item": "duskmire",
    "openscad_code": "// Duskmire - Swampy Watchtower\n// Realistic style, medium complexity\n\n// Overall dimensions\ntower_height = 60;\nbase_width = 50;\nwall_thickness = 2;\n\n// Base foundation module\nmodule foundation() {\n    difference() {\n        // Main foundation block\n        translate([0, 0, -5]) \n            cube([base_width + 20, base_width + 20, 10], center = true);\n        \n        // Drainage channels\n        for (i = [-1, 1]) {\n            translate([i * 20, 0, -3])\n                cube([5, base_width + 15, 6], center = true);\n            translate([0, i * 20, -3])\n                cube([base_width + 15, 5, 6], center = true);\n        }\n    }\n}\n\n// Stone wall module with realistic texture\nmodule stone_wall(width, height, depth) {\n    difference() {\n        // Main wall block\n        cube([width, depth, height], center = true);\n        \n        // Mortar gaps\n        for (x = [-width/2 + 5 : 10 : width/2 - 5]) {\n            for (y = [-depth/2 + 5 : 10 : depth/2 - 5]) {\n                for (z = [-height/2 + 3 : 6 : height/2 - 3]) {\n                    translate([x, y, z])\n                        cube([8, 8, 4], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Watchtower structure\nmodule watchtower() {\n    // Main tower body\n    difference() {\n        stone_wall(base_width, tower_height, base_width);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cube([base_width - wall_thickness*2, base_width - wall_thickness*2, tower_height - wall_thickness], center = true);\n    }\n    \n    // Corner buttresses\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (base_width/2 + 5), y * (base_width/2 + 5), tower_height/2 - 5])\n                stone_wall(10, tower_height + 10, 10);\n        }\n    }\n    \n    // Crenellations at top\n    for (i = [-1, 0, 1]) {\n        if (i != 0) {\n            translate([i * (base_width/2 - 10), 0, tower_height/2 + 3])\n                cube([8, base_width - 20, 6], center = true);\n            translate([0, i * (base_width/2 - 10), tower_height/2 + 3])\n                cube([base_width - 20, 8, 6], center = true);\n        }\n    }\n}\n\n// Wooden walkway and supports\nmodule walkway() {\n    // Support beams\n    for (i = [-1, 1]) {\n        translate([i * (base_width/2 - 15), 0, 20])\n            rotate([90, 0, 0])\n                cylinder(h = base_width/2 - 15, r = 3, $fn = 8);\n        translate([0, i * (base_width/2 - 15), 20])\n            rotate([90, 90, 0])\n                cylinder(h = base_width/2 - 15, r = 3, $fn = 8);\n    }\n    \n    // Walkway platform\n    translate([0, 0, 30])\n        difference() {\n            cube([base_width - 10, base_width - 10, 4], center = true);\n            \n            // Trap door\n            translate([0, 0, -1])\n                cube([15, 15, 6], center = true);\n        }\n    \n    // Railing posts\n    for (x = [-1, 0, 1]) {\n        for (y = [-1, 0, 1]) {\n            if (abs(x) + abs(y) > 0.5) {\n                translate([x * (base_width/2 - 12), y * (base_width/2 - 12), 33])\n                    cylinder(h = 8, r = 2, $fn = 6);\n            }\n        }\n    }\n}\n\n// Moss and swamp growth details\nmodule swamp_details() {\n    // Moss patches on walls\n    for (i = [1 : 5]) {\n        rotate([0, 0, i * 72])\n            translate([base_width/2 + 2, 0, i * 8])\n                scale([1, 0.7, 0.3])\n                    sphere(r = 5, $fn = 12);\n    }\n    \n    // Vines hanging down\n    for (i = [1 : 3]) {\n        translate([base_width/2 - 10, base_width/2 - 10, tower_height/2 - i * 5])\n            rotate([90, 0, 45])\n                cylinder(h = 20, r = 1, $fn = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Base foundation\n    foundation();\n    \n    // Main tower\n    translate([0, 0, tower_height/2 + 5])\n        watchtower();\n    \n    // Walkway and supports\n    walkway();\n    \n    // Swamp details\n    color(\"darkgreen\")\n        swamp_details();\n}",
    "renders": true
  },
  {
    "household_item": "emberglade",
    "openscad_code": "// Emberglade - a small campfire scene with glowing embers and logs\n// Size: 80mm diameter base, 45mm total height\n\n$fn = 24;  // Smooth curves while keeping 3D-print friendly\nwall_thickness = 1.5;\n\n// Main module for the complete emberglade\nmodule emberglade() {\n    // Stone ring foundation\n    stone_ring();\n    \n    // Fire logs arranged in teepee style\n    logs();\n    \n    // Glowing embers scattered around\n    embers();\n    \n    // Ash layer at bottom\n    ash_layer();\n}\n\n// Stone ring foundation with realistic variation\nmodule stone_ring() {\n    difference() {\n        // Main stone ring base\n        cylinder(h = 8, d1 = 80, d2 = 82);\n        \n        // Hollow center for fire\n        translate([0, 0, -0.1])\n            cylinder(h = 8.2, d1 = 60, d2 = 62);\n    }\n    \n    // Individual stones around the edge\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([35, 0, 0])\n                rotate([0, 0, i * 5])\n                    stone();\n    }\n}\n\n// Single stone primitive with irregular shape\nmodule stone() {\n    scale([1 + sin($vpr[2]) * 0.2, 1 + cos($vpr[2]) * 0.15, 1])\n        translate([-5, -3, 0])\n            cube([10, 6, 4 + sin($vpr[0]) * 2]);\n}\n\n// Fire logs arranged in teepee formation\nmodule logs() {\n    // Bottom log - horizontal\n    translate([0, 0, 8])\n        rotate([0, 90, 0])\n            log(35);\n    \n    // Diagonal logs - teepee formation\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, 0, 8])\n                rotate([0, 25, 0])\n                    log(30);\n    }\n}\n\n// Single log primitive with bark texture\nmodule log(length) {\n    difference() {\n        // Main log cylinder\n        cylinder(h = length, d = 8);\n        \n        // Bark texture - subtracted grooves\n        for(i = [0:3]) {\n            rotate([0, 90, i * 45])\n                translate([-4.1, -4.1, -1])\n                    cube([8.2, 1, length + 2]);\n        }\n    }\n    \n    // Log ends - slightly tapered\n    translate([0, 0, length])\n        cylinder(h = 2, d1 = 8, d2 = 6);\n    translate([0, 0, 0])\n        cylinder(h = 2, d1 = 6, d2 = 8);\n}\n\n// Glowing embers scattered throughout\nmodule embers() {\n    // Random seed for consistent placement\n    seed = 42;\n    \n    for(i = [0:20]) {\n        translate([\n            (sin(i * seed) * 25),\n            (cos(i * seed) * 25),\n            8 + (i % 3)\n        ])\n            scale([0.8, 0.8, 0.5])\n                ember();\n    }\n}\n\n// Single ember - irregular glowing coal\nmodule ember() {\n    // Base ember shape\n    difference() {\n        sphere(d = 3 + sin($vpr[2]) * 1);\n        \n        // Irregular surface\n        for(j = [0:4]) {\n            rotate([sin(j * 73) * 30, cos(j * 73) * 30, j * 72])\n                translate([0, 0, -1])\n                    sphere(d = 1.5);\n        }\n    }\n}\n\n// Ash layer at bottom of fire pit\nmodule ash_layer() {\n    difference() {\n        // Main ash layer\n        translate([0, 0, 8])\n            cylinder(h = 1, d1 = 58, d2 = 60);\n        \n        // Ash texture - small depressions\n        for(k = [0:15]) {\n            translate([\n                sin(k * 24) * (20 + sin(k * 5) * 5),\n                cos(k * 24) * (20 + cos(k * 5) * 5),\n                8.9\n            ])\n                sphere(d = 1 + sin(k) * 0.5);\n        }\n    }\n}\n\n// Generate the complete emberglade\nemberglade();",
    "renders": true
  },
  {
    "household_item": "fernwhisper",
    "openscad_code": "// Fernwhisper - Realistic Style, Medium Complexity\n// A 3D printable fern-inspired communication device\n\n$fn = 32;\n\n// Main parameters\noverall_height = 80;\nbase_diameter = 40;\nstem_diameter = 8;\nleaf_count = 7;\n\n// Base module - solid foundation\nmodule base() {\n    // Main base cylinder\n    cylinder(h=15, d=base_diameter, center=false);\n    \n    // Base ring for stability\n    translate([0, 0, 14.5])\n        difference() {\n            cylinder(h=2, d=base_diameter + 6, center=false);\n            cylinder(h=2.5, d=base_diameter, center=false);\n        }\n}\n\n// Stem module - hollow for wiring\nmodule stem() {\n    translate([0, 0, 15])\n        difference() {\n            // Outer stem\n            cylinder(h=overall_height - 30, d=stem_diameter, center=false);\n            \n            // Inner hollow channel\n            cylinder(h=overall_height - 30, d=4, center=false);\n            \n            // Wire exit hole\n            translate([0, 4, overall_height - 35])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=3, center=true);\n        }\n}\n\n// Individual fern leaflet\nmodule leaflet(length, width, angle) {\n    translate([0, 0, -width/2])\n        rotate([0, angle, 0])\n            scale([1, 0.3, 0.1])\n                sphere(d=length);\n}\n\n// Fern frond module - spiral arrangement\nmodule frond(height, radius, layers) {\n    for(i=[0:layers-1]) {\n        angle = i * 137.5; // Golden angle for natural spacing\n        layer_height = height * (i + 1) / layers;\n        layer_radius = radius * (i + 1) / layers;\n        \n        // Stem for this layer\n        translate([0, 0, layer_height])\n            rotate([0, 0, angle])\n                translate([layer_radius/2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=layer_radius, d=2, center=true);\n        \n        // Leaflets on this layer\n        for(j=[0:leaf_count-1]) {\n            leaflet_angle = j * (360/leaf_count);\n            leaflet_length = layer_radius * 0.8;\n            leaflet_width = layer_radius * 0.3;\n            \n            translate([0, 0, layer_height])\n                rotate([0, 0, angle])\n                    translate([layer_radius, 0, 0])\n                        rotate([0, leaflet_angle, 0])\n                            translate([0, 0, leaflet_width])\n                                leaflet(leaflet_length, leaflet_width, 15);\n        }\n    }\n}\n\n// Sound collection cone\nmodule sound_cone() {\n    translate([0, 0, overall_height - 15])\n        difference() {\n            // Outer cone\n            cylinder(h1=15, h2=0, r1=12, r2=3, center=false);\n            \n            // Inner cone for resonance\n            cylinder(h1=14, h2=0, r1=10, r2=2, center=false);\n            \n            // Microphone hole\n            translate([0, 0, 7.5])\n                sphere(d=2);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    stem();\n    \n    // Main fern structure\n    translate([0, 0, 35])\n        frond(25, 18, 5);\n    \n    sound_cone();\n    \n    // Decorative seed-like nodes\n    for(i=[0:3]) {\n        angle = i * 90;\n        translate([0, 0, 45 + i * 8])\n            rotate([0, 0, angle])\n                translate([10, 0, 0])\n                    sphere(d=3);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "glaciersylph",
    "openscad_code": "// Glaciersylph - Realistic Style, Medium Complexity\n// 3D printable model of an ice spirit with flowing robes and crystalline wings\n\n// Parameters\nbody_height = 45;\nbody_radius = 8;\nhead_radius = 7;\narm_length = 20;\nwing_span = 35;\nbase_height = 5;\nwall_thickness = 1.5;\n\n// Main assembly\nunion() {\n    // Base platform - ensures stability and no overhangs\n    cylinder(h=base_height, r=body_radius * 2.2, $fn=32);\n    \n    // Body - flowing robes with layered cylinders\n    translate([0, 0, base_height]) {\n        for(i=[0:3]) {\n            translate([0, 0, i * 8]) {\n                cylinder(h=10, r1=body_radius - i*1.2, r2=body_radius - i*1.5, $fn=32);\n            }\n        }\n    }\n    \n    // Head - slightly elongated sphere\n    translate([0, 0, base_height + body_height]) {\n        sphere(r=head_radius, $fn=32);\n        \n        // Facial features - eyes (indented)\n        translate([-3, -head_radius*0.7, 2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=1.5, r1=1.2, r2=0.8, $fn=16);\n            }\n        }\n        translate([3, -head_radius*0.7, 2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=1.5, r1=1.2, r2=0.8, $fn=16);\n            }\n        }\n    }\n    \n    // Arms - flowing sleeves\n    module arm(side) {\n        mirror([side, 0, 0]) {\n            translate([body_radius * 1.3, 0, base_height + 15]) {\n                rotate([0, -30, 0]) {\n                    // Upper arm\n                    cylinder(h=arm_length/2, r=2.5, $fn=16);\n                    \n                    // Lower arm with flowing sleeve\n                    translate([arm_length/2, 0, -2]) {\n                        rotate([0, -45, 0]) {\n                            difference() {\n                                cylinder(h=arm_length/2, r1=3, r2=4, $fn=16);\n                                // Hollow out the sleeve\n                                translate([0, 0, -wall_thickness]) {\n                                    cylinder(h=arm_length/2 + wall_thickness*2, r1=3-wall_thickness, r2=4-wall_thickness, $fn=16);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Wings - crystalline structures\n    module wing(side) {\n        mirror([side, 0, 0]) {\n            translate([body_radius * 0.8, 0, base_height + 25]) {\n                rotate([0, 0, 30 * side]) {\n                    difference() {\n                        // Main wing blade\n                        linear_extrude(height=1.5) {\n                            polygon(points=[\n                                [0, 0],\n                                [wing_span/2, -5],\n                                [wing_span, 5],\n                                [wing_span*0.8, 15],\n                                [wing_span*0.3, 20],\n                                [0, 10]\n                            ]);\n                        }\n                        \n                        // Cut decorative holes\n                        for(i=[1:3]) {\n                            translate([wing_span * (0.2 + i*0.25), 8, -1]) {\n                                cylinder(h=3, r=1.5, $fn=8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Ice crown - pointed crystals\n    translate([0, 0, base_height + body_height + head_radius]) {\n        for(i=[0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, head_radius * 0.7, 0]) {\n                    rotate([-15, 0, 0]) {\n                        cylinder(h=8, r1=1, r2=0, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Flowing hair strands\n    module hair_strand(angle) {\n        rotate([0, 0, angle]) {\n            translate([0, head_radius * 0.9, base_height + body_height + head_radius - 3]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height=1.5) {\n                        polygon(points=[\n                            [0, 0],\n                            [1, -8],\n                            [0, -15],\n                            [-1, -8]\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n    \n    for(i=[0:7]) {\n        hair_strand(i * 45);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "hazelshade",
    "openscad_code": "// Hazelshade - realistic style, medium complexity\n// A modern lampshade inspired by hazelnut shell texture\n\n// Parameters\nwall_thickness = 2;\ntop_diameter = 60;\nbottom_diameter = 80;\nheight = 70;\nsegments = 48;\ntexture_depth = 1.5;\nridge_width = 3;\n\n// Main shade module\nmodule hazelshade() {\n    difference() {\n        // Outer shell\n        shell();\n        \n        // Inner hollow\n        translate([0, 0, -wall_thickness/2])\n            scale([1, 1, 1.05])\n            shell(wall_thickness/2);\n        \n        // Top opening\n        translate([0, 0, height-wall_thickness])\n            cylinder(h=wall_thickness+2, d=top_diameter-10, $fn=segments);\n        \n        // Bottom opening\n        translate([0, 0, -wall_thickness-1])\n            cylinder(h=wall_thickness+2, d=bottom_diameter-10, $fn=segments);\n    }\n    \n    // Add texture ridges\n    texture_ridges();\n}\n\n// Basic shell shape\nmodule shell(offset=0) {\n    intersection() {\n        // Main frustum\n        cylinder(h=height+offset*2, d1=bottom_diameter+offset*2, d2=top_diameter+offset*2, $fn=segments);\n        \n        // Slight curve to shape\n        translate([0, 0, -height*0.1])\n            sphere(d=bottom_diameter+offset*2+20, $fn=segments);\n    }\n}\n\n// Create vertical ridges for texture\nmodule texture_ridges() {\n    for(i=[0:segments/4-1]) {\n        rotate([0, 0, i * 360/(segments/4) + 2.25])\n            ridge();\n    }\n}\n\n// Individual ridge element\nmodule ridge() {\n    difference() {\n        // Main ridge body\n        translate([0, bottom_diameter/2 - ridge_width/2, 0])\n            linear_extrude(height=height, scale=[top_diameter/bottom_diameter, 1])\n                square([ridge_width, height], center=true);\n        \n        // Ridge tip detail\n        for(z=[0:height/7:height]) {\n            translate([0, bottom_diameter/2 - ridge_width/2 - texture_depth*2, z])\n                scale([1 - z/height*0.3, 1 - z/height*0.3, 1])\n                    sphere(d=ridge_width*1.5, $fn=12);\n        }\n    }\n}\n\n// Mounting bracket\nmodule mount() {\n    difference() {\n        // Bracket body\n        translate([0, 0, height])\n            cylinder(h=15, d=top_diameter-15, $fn=segments);\n        \n        // Wire hole\n        translate([0, 0, height+5])\n            rotate([90, 0, 0])\n                cylinder(h=top_diameter-15, d=8, $fn=segments);\n        \n        // Screw holes\n        for(angle=[0, 120, 240]) {\n            rotate([0, 0, angle])\n                translate([top_diameter/2 - 10, 0, height+7.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=20, d=3.5, $fn=12);\n        }\n    }\n}\n\n// Assembly\nhazelshade();\nmount();",
    "renders": true
  },
  {
    "household_item": "ivysprite",
    "openscad_code": "// Ivy Sprite - Realistic Style, Medium Complexity\n// 3D printable plant creature with leafy appendages and bulbous body\n\n// Overall dimensions: 60mm height, 45mm width, 45mm depth\n\nmodule leaf_tip() {\n    // Tapered leaf tip for realistic detail\n    scale([1, 0.8, 0.6]) \n    rotate([0, 20, 0])\n    cylinder(h=8, d1=3, d2=1, $fn=8);\n}\n\nmodule single_leaf(length=12, width=7) {\n    // Main leaf body with gentle curve\n    rotate([0, -10, 0]) \n    linear_extrude(height=1.5, twist=15)\n    difference() {\n        // Leaf shape\n        scale([1, 0.5, 1]) \n        circle(d=width, $fn=32);\n        \n        // Leaf stem cutout\n        translate([0, -width/4, 0])\n        scale([0.2, 0.4, 1])\n        circle(d=width/2);\n    }\n    \n    // Leaf tip attachment\n    translate([0, length/2, 1])\n    leaf_tip();\n}\n\nmodule leaf_cluster(angle=0, height=0) {\n    // Cluster of 3 leaves at different angles\n    rotate([0, 0, angle]) {\n        translate([0, height, 0]) {\n            // Central leaf\n            rotate([0, 0, 0])\n            single_leaf();\n            \n            // Side leaves\n            rotate([0, 0, 45])\n            translate([5, -2, 0])\n            single_leaf(10, 6);\n            \n            rotate([0, 0, -45])\n            translate([-5, -2, 0])\n            single_leaf(10, 6);\n        }\n    }\n}\n\nmodule body_segment(radius, height, offset) {\n    // Bulbous body segments\n    translate([0, 0, offset])\n    sphere(r=radius, $fn=32);\n}\n\nmodule ivy_body() {\n    // Main body composed of stacked spheres\n    union() {\n        // Head segment\n        body_segment(12, 0, 35);\n        \n        // Upper body\n        body_segment(14, 0, 22);\n        \n        // Mid body\n        body_segment(13, 0, 10);\n        \n        // Base segment\n        body_segment(15, 0, 0);\n    }\n    \n    // Eye indentations\n    difference() {\n        body_segment(12, 0, 35);\n        \n        // Left eye\n        translate([-6, 8, 38])\n        rotate([0, -20, 0])\n        cylinder(h=8, d=4, $fn=16);\n        \n        // Right eye\n        translate([6, 8, 38])\n        rotate([0, 20, 0])\n        cylinder(h=8, d=4, $fn=16);\n    }\n}\n\nmodule vine_arm(side=1) {\n    // Curved vine arm with leaves\n    rotate([0, 0, side * 30]) {\n        translate([side * 18, 0, 25]) {\n            // Upper arm\n            rotate([0, -30, 0])\n            cylinder(h=15, d=4, $fn=8);\n            \n            // Elbow joint\n            translate([0, 0, 15])\n            sphere(d=5, $fn=8);\n            \n            // Lower arm with curve\n            translate([0, 0, 15])\n            rotate([0, 30, 0])\n            cylinder(h=12, d=3.5, $fn=8);\n            \n            // Hand\n            translate([0, 0, 27])\n            sphere(d=4, $fn=8);\n            \n            // Leaves along arm\n            translate([0, -2, 20])\n            rotate([15, 0, 0])\n            leaf_cluster(side * 90, 0);\n            \n            translate([0, 2, 10])\n            rotate([-15, 0, 0])\n            leaf_cluster(side * -90, 0);\n        }\n    }\n}\n\nmodule feet() {\n    // Sturdy root-like feet for stability\n    translate([0, 0, -5]) {\n        // Left foot\n        translate([-10, 0, 0])\n        rotate([0, 10, 0])\n        cylinder(h=8, d1=12, d2=8, $fn=16);\n        \n        // Right foot\n        translate([10, 0, 0])\n        rotate([0, -10, 0])\n        cylinder(h=8, d1=12, d2=8, $fn=16);\n        \n        // Connection between feet\n        hull() {\n            translate([-10, 0, 0])\n            sphere(d=8, $fn=16);\n            \n            translate([10, 0, 0])\n            sphere(d=8, $fn=16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    feet();\n    \n    // Body\n    ivy_body();\n    \n    // Arms\n    vine_arm(1);\n    vine_arm(-1);\n    \n    // Head leaves\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([0, 15, 42])\n        rotate([20, 0, 0])\n        single_leaf(8, 5);\n    }\n    \n    // Back leaves\n    for(i=[0:60:300]) {\n        rotate([0, 0, i])\n        translate([0, -20, 20])\n        leaf_cluster(i, 0);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "juniperling",
    "openscad_code": "// Juniperling – young Juniperus chinensis in realistic style\n// Medium complexity, 3D-printable, ~70 mm tall\n\n$fn = 36;          // Smooth curves without huge file\ntrunk_r = 4;       // Stem radius at base\ntrunk_h = 25;      // Main trunk height\ncanopy_start = 22; // Where foliage begins\n\n// Small helper for rounded cylinders\nmodule rounded_cylinder(h, r1, r2, center=false) {\n    hull() {\n        translate([0,0,center?-h/2:0]) cylinder(h=0.1, r1=r1, r2=r2);\n        translate([0,0,center?h/2:h]) cylinder(h=0.1, r1=r1, r2=r2);\n    }\n}\n\n// Main trunk with gentle taper\nmodule trunk() {\n    difference() {\n        rounded_cylinder(trunk_h, trunk_r, trunk_r*0.6);\n        // Slight wood-grain grooves, printable because vertical\n        for(i=[1:8]) rotate([0,0,i*45]) translate([0,0,0])\n            cube([0.5, trunk_r*0.9, trunk_h], center=true);\n    }\n}\n\n// Single scale-like leaf pad\nmodule leaf_pad(r) {\n    // Pine-like overlapping scales\n    intersection() {\n        sphere(r);\n        translate([0,0,-r/2]) cube([r*2, r*2, r], center=true);\n    }\n}\n\n// Dense foliage cluster with slightly irregular layout\nmodule foliage_cluster(r, h, density) {\n    for(i=[0:density-1])\n        rotate([0,0,i*360/density + (i%2?7:0)])\n        translate([r*0.8,0,h*(0.3+0.7*i/density)])\n            leaf_pad(r*0.4);\n}\n\n// Full canopy using stacked clusters\nmodule canopy() {\n    union() {\n        // Lower tier\n        translate([0,0,canopy_start])\n            foliage_cluster(20, 12, 12);\n        // Mid tier, slightly narrower\n        translate([0,0,canopy_start+8])\n            foliage_cluster(16, 10, 10);\n        // Top tuft\n        translate([0,0,canopy_start+16])\n            foliage_cluster(10, 6, 8);\n    }\n}\n\n// Optional shallow pot for stability\nmodule pot() {\n    difference() {\n        cylinder(h=8, r1=15, r2=12, center=false);\n        translate([0,0,2]) cylinder(h=8, r1=13, r2=10, center=false);\n    }\n}\n\n// Main assembly\nunion() {\n    // Roots flare slightly into pot\n    translate([0,0,0]) scale([1.1,1.1,0.8]) trunk();\n    // Canopy starts above trunk\n    canopy();\n    // Pot for print stability\n    translate([0,0,-8]) pot();\n}",
    "renders": true
  },
  {
    "household_item": "kindlewink",
    "openscad_code": "// Kindle Wink - Realistic style, medium complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Overall dimensions\noverall_width = 85;\noverall_height = 120;\noverall_depth = 9.5;\n\n// Screen parameters\nscreen_width = 65;\nscreen_height = 90;\nscreen_depth = 1;\nbezel_thickness = 3;\n\n// Button parameters\nbutton_width = 8;\nbutton_height = 12;\nbutton_depth = 1.5;\nbutton_spacing = 15;\n\n// Port parameters\nusb_width = 7;\nusb_height = 1.5;\nusb_depth = 4;\n\n// Speaker grill parameters\ngrill_holes = 6;\ngrill_diameter = 1.2;\ngrill_spacing = 3;\n\n// Main body with rounded edges\nmodule body() {\n    difference() {\n        // Main rectangular body\n        union() {\n            // Front face\n            translate([0, 0, overall_depth/2])\n                cube([overall_width, overall_height, overall_depth], center=true);\n            \n            // Rounded corners - top left\n            translate([-overall_width/2+2.5, overall_height/2-2.5, overall_depth/2])\n                cylinder(h=overall_depth, r=2.5, center=true);\n            \n            // Rounded corners - top right\n            translate([overall_width/2-2.5, overall_height/2-2.5, overall_depth/2])\n                cylinder(h=overall_depth, r=2.5, center=true);\n            \n            // Rounded corners - bottom left\n            translate([-overall_width/2+2.5, -overall_height/2+2.5, overall_depth/2])\n                cylinder(h=overall_depth, r=2.5, center=true);\n            \n            // Rounded corners - bottom right\n            translate([overall_width/2-2.5, -overall_height/2+2.5, overall_depth/2])\n                cylinder(h=overall_depth, r=2.5, center=true);\n        }\n        \n        // Hollow out the inside\n        translate([0, 0, overall_depth/2+1])\n            cube([overall_width-4, overall_height-4, overall_depth+2], center=true);\n    }\n}\n\n// Screen bezel\nmodule bezel() {\n    difference() {\n        // Outer bezel\n        translate([0, 0, overall_depth-0.5])\n            cube([screen_width+bezel_thickness*2, screen_height+bezel_thickness*2, 2], center=true);\n        \n        // Inner cutout for screen\n        translate([0, 0, overall_depth])\n            cube([screen_width, screen_height, 2.1], center=true);\n    }\n}\n\n// Screen display\nmodule screen() {\n    translate([0, 0, overall_depth-0.6])\n        cube([screen_width, screen_height, screen_depth], center=true);\n}\n\n// Power button\nmodule power_button() {\n    translate([overall_width/2-button_width/2-5, overall_height/2-button_height/2-20, overall_depth/2+button_depth/2])\n        cube([button_width, button_height, button_depth], center=true);\n}\n\n// Navigation buttons\nmodule navigation_buttons() {\n    // Up button\n    translate([overall_width/2+button_width/2+2, button_spacing, overall_depth/2+button_depth/2])\n        cube([button_width, button_height, button_depth], center=true);\n    \n    // Down button\n    translate([overall_width/2+button_width/2+2, -button_spacing, overall_depth/2+button_depth/2])\n        cube([button_width, button_height, button_depth], center=true);\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([0, -overall_height/2-usb_depth/2, 0])\n        cube([usb_width, usb_depth, usb_height], center=true);\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    difference() {\n        // Speaker base\n        translate([overall_width/2-10, -overall_height/2+10, overall_depth/2])\n            cube([20, 10, 1], center=true);\n        \n        // Speaker holes\n        for(i = [0:grill_holes-1]) {\n            translate([overall_width/2-15+i*grill_spacing, -overall_height/2+10, overall_depth/2+0.6])\n                cylinder(h=1.2, d=grill_diameter, center=true);\n        }\n    }\n}\n\n// Back logo area\nmodule logo_area() {\n    translate([0, overall_height/4, -overall_depth/2+0.5])\n        cube([30, 15, 1], center=true);\n}\n\n// Assemble the kindle\nunion() {\n    // Main components\n    body();\n    bezel();\n    screen();\n    \n    // Buttons and ports\n    power_button();\n    navigation_buttons();\n    \n    // Cutouts for ports (boolean difference)\n    difference() {\n        union() {\n            speaker_grill();\n            logo_area();\n        }\n        \n        // USB-C port cutout\n        translate([0, -overall_height/2, 0])\n            usb_port();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "lunarshade",
    "openscad_code": "// LunarShade (Realistic, Medium Complexity)\n// A small, printable lunar lander-style shade module\n\n// Overall dimensions\nshade_d = 60;          // mm\nshade_h = 25;          // mm\nwall_t = 2;            // mm\n\n// Leg parameters\nleg_h = 30;            // mm\nleg_r = 2;             // mm\nfoot_d = 8;            // mm\nfoot_h = 3;            // mm\n\n// Solar panel parameters\npanel_w = 15;\npanel_l = 25;\npanel_t = 1.5;\n\n// Antenna parameters\nantenna_r = 0.8;\nantenna_h = 15;\n\n// Main shade body\ndifference() {\n    // Outer shell\n    cylinder(d = shade_d, h = shade_h, $fn = 60);\n    \n    // Hollow interior\n    translate([0, 0, wall_t])\n        cylinder(d = shade_d - 2*wall_t, h = shade_h, $fn = 60);\n    \n    // Bottom opening\n    translate([0, 0, -1])\n        cube([shade_d, shade_d, 2], center = true);\n}\n\n// Landing legs module\nmodule landing_leg(angle, radius) {\n    // Rotate around Z then translate out\n    rotate([0, 0, angle])\n    translate([radius, 0, 0]) {\n        \n        // Leg strut\n        rotate([90, 0, 0])\n            cylinder(h = leg_h, r = leg_r, $fn = 12);\n        \n        // Foot pad\n        translate([0, 0, -leg_h])\n            cylinder(h = foot_h, d = foot_d, $fn = 20);\n        \n        // Lower support strut\n        translate([0, 0, -leg_h/2])\n        rotate([90, 0, 90])\n            cylinder(h = radius * 0.6, r = leg_r * 0.8, $fn = 8);\n    }\n}\n\n// Generate 4 equally spaced legs\nfor (i = [0:90:270]) {\n    landing_leg(i, shade_d/2 - leg_r - 1);\n}\n\n// Solar panel arrays\nmodule solar_panel(x, y) {\n    translate([x, y, shade_h/2])\n    rotate([0, 0, 45])\n    cube([panel_l, panel_w, panel_t], center = true);\n}\n\nsolar_panel(shade_d/2 + 5, 0);\nsolar_panel(-shade_d/2 - 5, 0);\nsolar_panel(0, shade_d/2 + 5);\nsolar_panel(0, -shade_d/2 - 5);\n\n// Central antenna mast\ntranslate([0, 0, shade_h])\n    cylinder(h = antenna_h, r = antenna_r, $fn = 12);\n\n// Antenna disk\ntranslate([0, 0, shade_h + antenna_h])\n    cylinder(h = 1, d = 8, $fn = 30);\n\n// Docking port on top\ndifference() {\n    translate([0, 0, shade_h - 2])\n        cylinder(h = 4, d = 10, $fn = 30);\n    translate([0, 0, shade_h - 3])\n        cylinder(h = 6, d = 6, $fn = 30);\n}\n\n// RCS thrusters (small cubes)\nmodule rcs(x, y, z) {\n    translate([x, y, z])\n        cube([3, 3, 2], center = true);\n}\n\nrcs(shade_d/2 - 3, 0, shade_h - 5);\nrcs(-shade_d/2 + 3, 0, shade_h - 5);\nrcs(0, shade_d/2 - 3, shade_h - 5);\nrcs(0, -shade_d/2 + 3, shade_h - 5);",
    "renders": true
  },
  {
    "household_item": "mireglow",
    "openscad_code": "// Mireglow (glow-stick) – medium-complexity realistic style\n// Overall length ≈ 75 mm, Ø ≈ 15 mm, ready for FDM printing (no overhangs)\n\n$fn = 36;          // smooth cylinders/spheres\nwall = 1.2;        // FDM-friendly wall thickness\ndia  = 15;         // main tube diameter\nlen  = 65;         // active chemical tube length\ncap  = 5;          // end-cap height\n\nmodule main_tube() {\n    // hollow clear tube that holds the chemicals\n    difference() {\n        cylinder(h = len, d = dia);\n        translate([0,0,-0.1])\n            cylinder(h = len+0.2, d = dia-2*wall);\n    }\n}\n\nmodule end_caps() {\n    // solid caps that seal the tube ends\n    for(z = [0, len])\n        translate([0,0,z])\n            cylinder(h = cap, d = dia);\n}\n\nmodule hook() {\n    // small hook to hang the glow-stick\n    translate([0,0,len+cap])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h = 8, d = 4);           // hook body\n                translate([0,0,-0.1])\n                    cylinder(h = 8.2, d = 4-2*wall); // hollow\n            }\n}\n\nmodule grip_rings() {\n    // raised rings near the middle for grip\n    ring_h = 1.5;\n    for(i = [-1,1])\n        translate([0,0,len/2 + i*12])\n            cylinder(h = ring_h, d = dia+2*wall);\n}\n\nmodule label_band() {\n    // shallow inset for a printed label\n    band_w = 10;\n    difference() {\n        translate([0,0,len/2-band_w/2])\n            cylinder(h = band_w, d = dia+2*wall+0.5);\n        translate([0,0,len/2-band_w/2-0.1])\n            cylinder(h = band_w+0.2, d = dia+0.2); // label recess\n    }\n}\n\nunion() {\n    main_tube();\n    end_caps();\n    hook();\n    grip_rings();\n    label_band();\n}",
    "renders": true
  },
  {
    "household_item": "nettleflicker",
    "openscad_code": "// Nettleflicker – realistic medium-complexity OpenSCAD model\n// Overall length ≈ 80 mm, wall thickness 1.2 mm for 3D-printability\n// No steep overhangs; all slopes ≤ 45°\n\n$fn = 36;\n\n// Main body parameters\nbody_len = 55;\nbody_d  = 12;\nwall    = 1.2;\n\n// Grip parameters\ngrip_len = 25;\ngrip_d   = 14;\n\n// Thumb-rest\nthumb_w = 8;\nthumb_h = 4;\nthumb_l = 12;\n\n// Springy flicker blade\nblade_len = 20;\nblade_w   = 6;\nblade_t   = 1.2;\n\n// Nettle cavity\ncav_len = 30;\ncav_d   = 8;\n\nmodule half_cylinder(h, r) {\n    difference() {\n        cylinder(h=h, r=r);\n        translate([0, -r-0.1, 0]) cube([r*2+0.2, r+0.1, h+0.2]);\n    }\n}\n\n// Hollow body tube\nmodule body() {\n    difference() {\n        cylinder(h=body_len, r=body_d/2);\n        translate([0, 0, -0.1])\n            cylinder(h=body_len+0.2, r=body_d/2 - wall);\n    }\n}\n\n// Grip with knurling\nmodule grip() {\n    union() {\n        // Main grip cylinder\n        difference() {\n            cylinder(h=grip_len, r=grip_d/2);\n            translate([0, 0, -0.1])\n                cylinder(h=grip_len+0.2, r=grip_d/2 - wall);\n        }\n        // Knurls\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5])\n                translate([grip_d/2 - wall/2, 0, grip_len/2])\n                    cube([wall, 1.5, grip_len], center=true);\n        }\n    }\n}\n\n// Thumb rest for realistic ergonomics\nmodule thumb_rest() {\n    translate([body_d/2 - thumb_w/2 + wall/2, 0, body_len - thumb_l/2])\n        rotate([0, -20, 0])\n            cube([thumb_w, thumb_h, thumb_l]);\n}\n\n// Flicker blade (slightly curved, printed flat)\nmodule blade() {\n    translate([0, 0, body_len])\n        rotate([90, 0, 0])\n            linear_extrude(height=blade_t)\n                polygon(points=[\n                    [0, 0],\n                    [-blade_w/2, -blade_len],\n                    [ blade_w/2, -blade_len]\n                ]);\n}\n\n// Nettle cavity entrance\nmodule cavity() {\n    translate([0, 0, body_len/2])\n        rotate([90, 0, 0])\n            cylinder(h=cav_len, r=cav_d/2, center=true);\n}\n\n// Assembly\nunion() {\n    // Body plus grip\n    union() {\n        body();\n        translate([0, 0, -grip_len])\n            grip();\n    }\n\n    thumb_rest();\n\n    blade();\n\n    // Cavity cutout\n    cavity();\n}",
    "renders": true
  },
  {
    "household_item": "orchidsylph",
    "openscad_code": "// OrchidSylph - Realistic Style, Medium Complexity\n// 3D printable fantasy creature combining orchid and sylph features\n\n$fn = 32;  // Smooth curves for realistic look\nscale_factor = 0.8;  // Overall scaling for 50-80mm height\n\n// Main body\nmodule body() {\n    // Torso\n    translate([0, 0, 15])\n    scale([1, 0.6, 1.2])\n    sphere(10);\n    \n    // Abdomen\n    translate([0, 0, 5])\n    scale([0.8, 0.5, 1])\n    sphere(8);\n    \n    // Petal-like chest armor\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n        translate([8, 0, 15])\n        rotate([0, 90, 0])\n        scale([1, 2, 0.5])\n        cylinder(h=2, r1=0, r2=5);\n    }\n}\n\n// Orchid-like head\nmodule head() {\n    // Main head sphere\n    translate([0, 0, 30])\n    sphere(7);\n    \n    // Eye sockets\n    difference() {\n        translate([0, 0, 30])\n        sphere(7);\n        \n        // Left eye\n        translate([-3, 4, 32])\n        rotate([0, -20, 0])\n        cylinder(h=5, r=1.5);\n        \n        // Right eye\n        translate([3, 4, 32])\n        rotate([0, 20, 0])\n        cylinder(h=5, r=1.5);\n    }\n    \n    // Petal crown\n    for(i=[0:72:359]) {\n        rotate([0, 0, i])\n        translate([0, 7, 35])\n        rotate([20, 0, 0])\n        scale([0.5, 2, 0.3])\n        cylinder(h=8, r1=2, r2=0.5);\n    }\n    \n    // Small flower details\n    for(i=[0:60:359]) {\n        rotate([0, 0, i])\n        translate([0, 9, 33])\n        sphere(1);\n    }\n}\n\n// Wings with orchid petal design\nmodule wing(side) {\n    // Main wing structure\n    translate([side * 12, 0, 22])\n    rotate([0, side * 10, side * -20])\n    scale([side * 1, 1, 0.5])\n    \n    difference() {\n        union() {\n            // Upper wing segment\n            translate([0, 0, 5])\n            scale([1, 0.3, 1])\n            sphere(8);\n            \n            // Lower wing segment\n            translate([0, 0, -5])\n            scale([0.7, 0.2, 0.8])\n            sphere(6);\n            \n            // Wing connector\n            translate([0, 0, 0])\n            cylinder(h=10, r=2);\n        }\n        \n        // Wing cutouts for petal-like appearance\n        for(j=[0:30:150]) {\n            rotate([0, 0, j])\n            translate([5, 0, 0])\n            scale([0.5, 0.2, 1])\n            cylinder(h=12, r=3);\n        }\n    }\n}\n\n// Arms with flower-like hands\nmodule arm(side) {\n    // Upper arm\n    translate([side * 10, 0, 20])\n    rotate([0, 0, side * 30])\n    cylinder(h=8, r=2);\n    \n    // Lower arm\n    translate([side * 14, side * 4, 15])\n    rotate([0, 0, side * 45])\n    cylinder(h=10, r=1.5);\n    \n    // Hand with petal fingers\n    translate([side * 18, side * 7, 12])\n    sphere(2);\n    \n    for(f=[0:72:287]) {\n        rotate([0, 0, side * f])\n        translate([side * 20, side * 9, 12])\n        rotate([0, 90, 0])\n        scale([0.3, 1.5, 0.3])\n        cylinder(h=4, r1=0.5, r2=0);\n    }\n}\n\n// Legs with root-like feet\nmodule leg(side) {\n    // Upper leg\n    translate([side * 5, 0, 8])\n    rotate([0, 0, side * -15])\n    cylinder(h=10, r=2.5);\n    \n    // Lower leg\n    translate([side * 7, 0, -2])\n    rotate([0, 0, side * -10])\n    cylinder(h=8, r=2);\n    \n    // Root-like foot\n    translate([side * 8, 0, -8])\n    scale([1.5, 1, 0.5])\n    sphere(3);\n    \n    // Root tendrils\n    for(r=[0:45:179]) {\n        rotate([0, 0, side * r])\n        translate([side * 9, 0, -9])\n        rotate([side * 20, 0, 0])\n        cylinder(h=4, r1=0.5, r2=0.2);\n    }\n}\n\n// Assemble the complete OrchidSylph\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        head();\n        \n        // Wings\n        wing(1);   // Right wing\n        wing(-1);  // Left wing\n        \n        // Arms\n        arm(1);    // Right arm\n        arm(-1);   // Left arm\n        \n        // Legs\n        leg(1);    // Right leg\n        leg(-1);   // Left leg\n    }\n}",
    "renders": true
  },
  {
    "household_item": "palespar",
    "openscad_code": "// PALESPAR (Fence Post) – realistic, medium complexity\n// Overall height ≈ 90 mm, base footprint ≈ 16 mm × 16 mm\n// No severe overhangs, 1.2 mm wall thickness for 3D-printing\n\n// Parameters\npost_h   = 90;        // total height\npost_w   = 16;        // shaft width/depth\nwall_t   = 1.2;       // wall thickness for hollow parts\nbolt_d   = 8;         // bolt hole diameter\nbolt_h   = 10;        // bolt hole depth\ncap_h    = 8;         // cap height on top\nrib_n    = 8;         // number of anti-twist ribs\nrib_w    = 2;         // rib width\nrib_h    = 4;         // rib height\ntaper_f  = 0.9;       // top width = post_w * taper_f\n\n// Utility modules\nmodule shaft_profile(r) {\n    // rounded square profile for shaft\n    offset = r - wall_t;\n    linear_extrude(height = post_h, center = true, convexity = 4)\n    offset(r = r - wall_t)\n    square(post_w - 2*r, center = true);\n}\n\n// Main shaft (hollow, tapered)\nmodule shaft() {\n    difference() {\n        // outer tapered\n        hull() {\n            translate([0, 0, 0])\n                cube([post_w, post_w, post_h], center = true);\n            translate([0, 0, post_h/2 - cap_h])\n                cube([post_w*taper_f, post_w*taper_f, cap_h], center = true);\n        }\n        // inner void\n        hull() {\n            translate([0, 0, 0])\n                cube([post_w - 2*wall_t, post_w - 2*wall_t, post_h], center = true);\n            translate([0, 0, post_h/2 - cap_h])\n                cube([(post_w - 2*wall_t)*taper_f, (post_w - 2*wall_t)*taper_f, cap_h], center = true);\n        }\n    }\n}\n\n// Anti-twist ribs\nmodule ribs() {\n    for(i = [0:rib_n-1]) {\n        rotate([0, 0, i*360/rib_n])\n        translate([0, post_w/2 - rib_w/2, 0])\n            cube([rib_w, rib_h, post_h - cap_h - 5], center = true);\n    }\n}\n\n// Top cap with gentle dome\nmodule cap() {\n    difference() {\n        // outer dome\n        translate([0, 0, post_h/2 - cap_h/2])\n            cylinder(h = cap_h, r1 = post_w*taper_f/2, r2 = post_w*taper_f/2 * 0.9, center = true);\n        // inner void\n        translate([0, 0, post_h/2 - cap_h/2])\n            cylinder(h = cap_h + 0.2, r1 = post_w*taper_f/2 - wall_t, r2 = (post_w*taper_f/2 - wall_t)*0.9, center = true);\n    }\n}\n\n// Bolt hole\nmodule bolt_hole() {\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = bolt_d + 0.2, d = bolt_d, center = true);\n}\n\n// Base plate\nmodule base() {\n    difference() {\n        cube([post_w + 8, post_w + 8, 3], center = true);\n        cube([post_w, post_w, 3.2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    shaft();\n    ribs();\n    cap();\n    base();\n    bolt_hole();\n}",
    "renders": true
  },
  {
    "household_item": "quartzshade",
    "openscad_code": "// Quartzshade - Realistic medium complexity lamp shade\n// Overall dimensions ~60mm diameter, ~50mm height\n\n// Main parameters\nshade_height = 45;\nshade_radius = 30;\nwall_thickness = 2;\nsegments = 48;\n\nmodule quartz_crystal(x=0, y=0, z=0, scale=1) {\n    translate([x, y, z]) {\n        scale([scale, scale, scale]) {\n            // Main crystal body\n            difference() {\n                cylinder(h=8, r1=4, r2=2, $fn=6);\n                translate([0, 0, 1]) cylinder(h=6, r1=3.5, r2=1.5, $fn=6);\n            }\n            \n            // Facets\n            for(i=[0:60:300]) {\n                rotate([0, 0, i]) {\n                    translate([0, 2, 4]) rotate([30, 0, 0]) \n                        cube([0.5, 3, 1], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule lamp_base() {\n    // Base cylinder\n    cylinder(h=8, r=shade_radius + 5, $fn=segments);\n    \n    // Inner cavity\n    translate([0, 0, -1]) \n        cylinder(h=10, r=shade_radius + 3, $fn=segments);\n    \n    // Mounting hole\n    translate([0, 0, -1])\n        cylinder(h=10, r=4, $fn=segments);\n    \n    // Ventilation slots\n    for(i=[0:30:330]) {\n        rotate([0, 0, i]) {\n            translate([shade_radius + 1, 0, 4])\n                cube([2, 6, 6], center=true);\n        }\n    }\n}\n\nmodule shade_body() {\n    // Outer shade\n    difference() {\n        cylinder(h=shade_height, r1=shade_radius, r2=shade_radius - 5, $fn=segments);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=shade_height + 2, r1=shade_radius - wall_thickness, \n                    r2=shade_radius - 5 - wall_thickness, $fn=segments);\n    }\n    \n    // Top rim\n    translate([0, 0, shade_height])\n        cylinder(h=3, r1=shade_radius - 5, r2=shade_radius - 5, $fn=segments);\n    \n    // Bottom rim\n    translate([0, 0, 0])\n        cylinder(h=3, r1=shade_radius, r2=shade_radius, $fn=segments);\n}\n\nmodule crystal_array() {\n    // Ring of crystals around top\n    for(i=[0:30:330]) {\n        rotate([0, 0, i]) {\n            translate([shade_radius - 8, 0, shade_height - 5]) {\n                quartz_crystal(0, 0, 0, 1.2);\n            }\n        }\n    }\n    \n    // Inner ring\n    for(i=[15:30:345]) {\n        rotate([0, 0, i]) {\n            translate([shade_radius - 15, 0, shade_height - 8]) {\n                quartz_crystal(0, 0, 0, 0.8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shade parts\n    lamp_base();\n    translate([0, 0, 8]) shade_body();\n    \n    // Crystal decorations\n    crystal_array();\n    \n    // Support ribs\n    for(i=[0:45:315]) {\n        rotate([0, 0, i]) {\n            translate([shade_radius - 10, -1, 8])\n                cube([2, 2, shade_height - 5]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "riversprite",
    "openscad_code": "// Riversprite - Medium complexity realistic style\n// A water spirit figure with flowing hair, leaf-like fins, and gentle curves\n\n$fn = 48;  // Smooth curves for realistic look\n\n// Main body module\nmodule riversprite_body() {\n    // Torso - elongated teardrop shape\n    union() {\n        // Upper torso\n        translate([0, 0, 15])\n            scale([1, 0.8, 1.2])\n            sphere(d=20);\n        \n        // Lower torso tapering\n        translate([0, 0, 5])\n            scale([0.8, 0.6, 1])\n            sphere(d=15);\n            \n        // Hip area\n        translate([0, 0, -2])\n            cylinder(h=8, d1=12, d2=8);\n    }\n}\n\n// Head with flowing water hair\nmodule riversprite_head() {\n    union() {\n        // Head base\n        translate([0, 0, 30])\n            scale([0.9, 1, 1.1])\n            sphere(d=18);\n        \n        // Face detail\n        translate([0, 8, 30])\n            sphere(d=2);  // Eyes\n        \n        // Water hair strands - flowing backwards\n        for(i=[0:30:150]) {\n            rotate([i, 0, 0])\n                translate([0, -12, 35])\n                    scale([0.3, 0.3, 3])\n                    sphere(d=8);\n            \n            rotate([i+15, 5, 0])\n                translate([0, -10, 33])\n                    scale([0.25, 0.25, 2.5])\n                    sphere(d=6);\n        }\n    }\n}\n\n// Leaf-like fins for arms and legs\nmodule leaf_fin(length, width, thickness, angle) {\n    rotate([0, 0, angle])\n        scale([1, width/length, thickness/length])\n        cylinder(h=length, d1=width, d2=0.1);\n}\n\n// Arms with flowing fins\nmodule riversprite_arms() {\n    // Left arm\n    translate([-12, 0, 22])\n        rotate([0, 30, -20])\n        union() {\n            cylinder(h=15, d=4);\n            translate([0, -7, 7])\n                leaf_fin(12, 8, 1, 45);\n        }\n    \n    // Right arm\n    translate([12, 0, 22])\n        rotate([0, 30, 20])\n        union() {\n            cylinder(h=15, d=4);\n            translate([0, -7, 7])\n                leaf_fin(12, 8, 1, -45);\n        }\n}\n\n// Legs with webbed fins\nmodule riversprite_legs() {\n    // Left leg\n    translate([-4, 0, 0])\n        rotate([0, 10, 0])\n        union() {\n            cylinder(h=12, d=5);\n            translate([0, -5, -6])\n                leaf_fin(15, 12, 2, 0);\n        }\n    \n    // Right leg\n    translate([4, 0, 0])\n        rotate([0, 10, 0])\n        union() {\n            cylinder(h=12, d=5);\n            translate([0, -5, -6])\n                leaf_fin(15, 12, 2, 0);\n        }\n}\n\n// Back fins for swimming\nmodule riversprite_back_fins() {\n    // Main dorsal fin\n    translate([0, -8, 15])\n        rotate([90, 0, 0])\n        leaf_fin(20, 15, 1, 0);\n    \n    // Side fins\n    for(i=[-1, 1]) {\n        translate([i*8, -6, 12])\n            rotate([60, 0, i*30])\n            leaf_fin(10, 8, 0.8, 0);\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    difference() {\n        cylinder(h=2, d=35);\n        translate([0, 0, -0.1])\n            cylinder(h=2.2, d=30);\n    }\n}\n\n// Assemble the complete riversprite\nunion() {\n    // Scale to 75mm height\n    scale(0.75)\n    union() {\n        base();\n        riversprite_body();\n        riversprite_head();\n        riversprite_arms();\n        riversprite_legs();\n        riversprite_back_fins();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "sableglen",
    "openscad_code": "// Sableglen Fountain - Realistic Style, Medium Complexity\n// A woodland fountain with natural stones, water basin, and decorative elements\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Overall dimensions\nwidth = 60;\ndepth = 60;\nheight = 45;\n\n// Base foundation\nmodule base_foundation() {\n    difference() {\n        // Main base\n        cube([width, depth, 8], center=true);\n        \n        // Drainage channel\n        translate([0, -25, 3])\n            cube([30, 5, 2], center=true);\n    }\n}\n\n// Natural stone ring\nmodule stone_ring() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([22, 0, 6])\n        scale([1 + sin(i*20)*0.2, 1 + cos(i*20)*0.2, 1])\n            cylinder(h=12, r1=4, r2=3.5);\n    }\n}\n\n// Water basin\nmodule water_basin() {\n    difference() {\n        // Outer basin\n        translate([0, 0, 12])\n            cylinder(h=8, r1=25, r2=22);\n        \n        // Inner hollow\n        translate([0, 0, 12.5])\n            cylinder(h=7.5, r1=22, r2=19);\n        \n        // Water spout hole\n        translate([0, 0, 12])\n            cylinder(h=8, r=2);\n    }\n}\n\n// Central pillar\nmodule central_pillar() {\n    difference() {\n        // Main pillar\n        translate([0, 0, 20])\n            cylinder(h=15, r=6);\n        \n        // Inner channel for water\n        translate([0, 0, 20])\n            cylinder(h=15, r=2);\n    }\n}\n\n// Decorative top bowl\nmodule top_bowl() {\n    difference() {\n        // Bowl shape\n        translate([0, 0, 35])\n            cylinder(h=6, r1=12, r2=8);\n        \n        // Inner cavity\n        translate([0, 0, 35.5])\n            cylinder(h=5.5, r1=10, r2=6);\n    }\n}\n\n// Water spouts (8 small spouts around)\nmodule water_spouts() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([8, 0, 28])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=0.8);\n    }\n}\n\n// Decorative stones around base\nmodule decorative_stones() {\n    // Random placement of small stones\n    for (i = [0:5]) {\n        angle = i * 60 + 10;\n        radius = 28 + sin(i*30)*3;\n        translate([cos(angle)*radius, sin(angle)*radius, 4])\n            scale([1.2, 0.8, 0.6])\n                sphere(r=2.5 + sin(i*25)*0.5);\n    }\n}\n\n// Leaf decorations on rim\nmodule leaf_decorations() {\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([20, 0, 16])\n        scale([0.8, 0.3, 0.1])\n            sphere(r=3);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_foundation();\n    \n    // Stone ring\n    stone_ring();\n    \n    // Water basin\n    water_basin();\n    \n    // Central pillar\n    central_pillar();\n    \n    // Top bowl\n    top_bowl();\n    \n    // Water spouts\n    water_spouts();\n    \n    // Decorative elements\n    decorative_stones();\n    leaf_decorations();\n}",
    "renders": true
  },
  {
    "household_item": "thistlewhip",
    "openscad_code": "// Realistic Thistlewhip - Medium Complexity\n// 3D printable with no overhangs\n\n$fn=32;\n\n// Main dimensions\nhandle_len = 80;\nhandle_dia = 8;\nthistle_dia = 25;\nthistle_height = 30;\nspike_len = 8;\nspike_dia = 1.5;\n\nmodule handle() {\n    // Main handle - cylindrical with grip texture\n    difference() {\n        cylinder(h=handle_len, d=handle_dia, center=false);\n        \n        // Grip rings\n        for(i=[10:15:handle_len-15]) {\n            translate([0,0,i])\n                cylinder(h=2, d=handle_dia+0.5, $fn=6);\n        }\n    }\n    \n    // End cap\n    translate([0,0,handle_len])\n        cylinder(h=3, d1=handle_dia, d2=handle_dia+2);\n}\n\nmodule thistle_head() {\n    // Base bulb\n    sphere(d=thistle_dia);\n    \n    // Spiky protrusions\n    for(i=[0:15:359]) {\n        rotate([0,0,i])\n        translate([thistle_dia/2-2, 0, 0])\n        rotate([90,0,0])\n        difference() {\n            cylinder(h=spike_len, d1=spike_dia*1.5, d2=spike_dia);\n            translate([0,0,spike_len-1])\n                sphere(d=spike_dia*1.5);\n        }\n    }\n    \n    // Inner detail\n    for(i=[0:30:359]) {\n        rotate([0,0,i])\n        translate([thistle_dia/4, 0, 0])\n        rotate([90,0,0])\n        cylinder(h=spike_len/2, d=spike_dia/2);\n    }\n}\n\nmodule connector() {\n    // Tapered connection between handle and thistle\n    difference() {\n        cylinder(h=5, d1=handle_dia, d2=thistle_dia/2);\n        \n        // Reinforcement ring\n        translate([0,0,2])\n            cylinder(h=1, d=handle_dia+1);\n    }\n}\n\n// Assembly\ntranslate([0,0,handle_len/2])\n    rotate([90,0,0])\n    union() {\n        handle();\n        \n        translate([0,0,handle_len])\n            connector();\n            \n        translate([0,0,handle_len+5])\n            thistle_head();\n    }",
    "renders": true
  },
  {
    "household_item": "umbralfae",
    "openscad_code": "// Umbralfae - Realistic Style, Medium Complexity\n// 3D printable shadow-fae creature with wings, horns, and flowing robes\n\n$fn = 32;\n\n// Overall scale\nscale_factor = 0.4;\n\n// Body dimensions\nbody_height = 60;\nbody_radius = 15;\nhead_radius = 12;\n\n// Wings\nwing_span = 80;\nwing_thickness = 2;\n\n// Module for a single wing\nmodule wing() {\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([0, 0, 0]) cube([wing_thickness, 5, 30]);\n            translate([0, 15, 25]) cube([wing_thickness, 3, 15]);\n            translate([0, 25, 15]) cube([wing_thickness, 2, 10]);\n            translate([0, 35, 25]) cube([wing_thickness, 1, 5]);\n            translate([0, 20, 35]) cube([wing_thickness, 3, 8]);\n        }\n        \n        // Wing membrane cutouts\n        for (i = [1:3]) {\n            translate([0, 8 + i*8, 10 + i*5]) \n                rotate([0, 0, -20 + i*5]) \n                cube([wing_thickness + 0.1, 3, 8]);\n        }\n    }\n}\n\n// Module for horns\nmodule horn() {\n    difference() {\n        hull() {\n            cylinder(h1 = 15, r1 = 3, r2 = 1, center = false);\n            translate([0, 0, 15]) sphere(1.5);\n        }\n        cylinder(h1 = 16, r1 = 2, r2 = 0.5, center = false);\n    }\n}\n\n// Module for robe folds\nmodule robe_folds() {\n    for (i = [0:4]) {\n        translate([body_radius * cos(i*72), body_radius * sin(i*72), -body_height/2 + 5]) {\n            rotate([0, 0, i*72]) {\n                difference() {\n                    cube([body_radius/2, 3, body_height/2]);\n                    translate([body_radius/4, 1.5, 0]) \n                        cylinder(h = body_height/2 + 1, r = body_radius/4, center = false);\n                }\n            }\n        }\n    }\n}\n\n// Main model\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Body (torso)\n        translate([0, 0, 0]) {\n            difference() {\n                cylinder(h = body_height, r = body_radius, center = true);\n                cylinder(h = body_height + 2, r = body_radius - 4, center = true);\n            }\n        }\n        \n        // Head\n        translate([0, 0, body_height/2 + head_radius - 5]) {\n            sphere(r = head_radius);\n            \n            // Eyes\n            translate([head_radius/2, head_radius/2, head_radius/4]) \n                sphere(r = 2);\n            translate([-head_radius/2, head_radius/2, head_radius/4]) \n                sphere(r = 2);\n        }\n        \n        // Horns\n        translate([head_radius/2, 0, body_height/2 + head_radius + 5]) {\n            rotate([0, -20, 30]) horn();\n        }\n        translate([-head_radius/2, 0, body_height/2 + head_radius + 5]) {\n            rotate([0, 20, -30]) mirror([1, 0, 0]) horn();\n        }\n        \n        // Wings\n        translate([body_radius + wing_thickness/2, 0, body_height/4]) {\n            rotate([0, 0, 30]) wing();\n        }\n        translate([-body_radius - wing_thickness/2, 0, body_height/4]) {\n            rotate([0, 0, -30]) mirror([1, 0, 0]) wing();\n        }\n        \n        // Robe/lower body\n        translate([0, 0, -body_height/2 - 10]) {\n            difference() {\n                cylinder(h = 25, r1 = body_radius + 5, r2 = body_radius + 10, center = false);\n                cylinder(h = 26, r1 = body_radius - 2, r2 = body_radius - 2, center = false);\n            }\n            \n            // Robe folds\n            robe_folds();\n        }\n        \n        // Arms\n        translate([body_radius, 0, body_height/4]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 25, r1 = 5, r2 = 3, center = false);\n                    cylinder(h = 26, r1 = 3, r2 = 2, center = false);\n                }\n            }\n        }\n        translate([-body_radius, 0, body_height/4]) {\n            rotate([0, -90, 0]) {\n                difference() {\n                    cylinder(h = 25, r1 = 5, r2 = 3, center = false);\n                    cylinder(h = 26, r1 = 3, r2 = 2, center = false);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "verdantwisp",
    "openscad_code": "// Verdantwisp - Realistic Style, Medium Complexity\n// A mystical plant creature with glowing core and flowing leaf structures\n\n// Main dimensions\nbase_height = 8;\ncore_radius = 12;\nstem_height = 25;\nstem_radius = 3;\nleaf_length = 35;\nleaf_width = 12;\n\n// Wall thickness for 3D printing\nwall_thick = 1.2;\n\nmodule stem() {\n    // Main stem structure\n    difference() {\n        // Outer stem\n        cylinder(h=stem_height, r=stem_radius, $fn=16);\n        \n        // Hollow center\n        translate([0, 0, wall_thick])\n            cylinder(h=stem_height-wall_thick*2, r=stem_radius-wall_thick, $fn=16);\n    }\n}\n\nmodule glowing_core() {\n    // Central glowing orb\n    difference() {\n        // Outer sphere\n        sphere(r=core_radius, $fn=32);\n        \n        // Hollow interior\n        sphere(r=core_radius-wall_thick, $fn=32);\n    }\n    \n    // Internal support structure\n    for(i=[0:120:360]) {\n        rotate([0, 0, i])\n            translate([0, core_radius*0.3, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=core_radius*0.6, r=wall_thick, $fn=8);\n    }\n}\n\nmodule leaf_cluster() {\n    // Generate 8 leaves around the core\n    for(i=[0:45:360]) {\n        rotate([0, 0, i])\n            translate([0, core_radius*0.8, 0])\n                rotate([0, 30, 0])\n                    single_leaf();\n    }\n}\n\nmodule single_leaf() {\n    // Individual leaf with realistic curve\n    difference() {\n        // Main leaf body\n        hull() {\n            translate([0, 0, 0])\n                sphere(r=leaf_width/2, $fn=16);\n            translate([leaf_length, 0, 0])\n                scale([0.3, 0.3, 1])\n                    sphere(r=leaf_width/2, $fn=16);\n        }\n        \n        // Leaf vein hollow\n        translate([leaf_length/2, 0, -wall_thick])\n            cube([leaf_length*0.8, wall_thick*2, wall_thick*3], center=true);\n    }\n    \n    // Surface texture\n    for(j=[1:3]) {\n        translate([leaf_length*j/4, 0, 0])\n            rotate([0, 0, j*120])\n                cube([wall_thick, leaf_width/4, wall_thick*0.8], center=true);\n    }\n}\n\nmodule root_system() {\n    // Base with root-like structures\n    difference() {\n        // Main base\n        cylinder(h=base_height, r=core_radius*1.2, $fn=24);\n        \n        // Hollow base\n        translate([0, 0, wall_thick])\n            cylinder(h=base_height-wall_thick, r=core_radius*1.2-wall_thick, $fn=24);\n    }\n    \n    // Root tentacles\n    for(i=[0:30:360]) {\n        rotate([0, 0, i])\n            translate([core_radius*0.9, 0, base_height/2])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=base_height*2, r=wall_thick*2, $fn=8);\n                        cylinder(h=base_height*2, r=wall_thick, $fn=8);\n                    }\n    }\n}\n\n// Assemble the verdantwisp\nunion() {\n    // Base structure\n    root_system();\n    \n    // Connect stem to base\n    translate([0, 0, base_height])\n        stem();\n    \n    // Core assembly\n    translate([0, 0, base_height + stem_height])\n        union() {\n            glowing_core();\n            leaf_cluster();\n        }\n    \n    // Support struts for printability\n    for(k=[0:90:360]) {\n        rotate([0, 0, k])\n            translate([core_radius*0.6, 0, base_height + stem_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h=core_radius*0.8, r=wall_thick, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "whisperroot",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\nmodule whisperroot() {\n    // Main bulbous root body\n    difference() {\n        // Central bulb\n        union() {\n            sphere(d = 40, $fn = 40);\n            cylinder(h = 25, d1 = 40, d2 = 30, $fn = 40);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            sphere(d = 36, $fn = 40);\n        translate([0, 0, -5])\n            cylinder(h = 20, d1 = 36, d2 = 26, $fn = 40);\n    }\n\n    // Root tendrils\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([20, 0, -5])\n                rotate([90, 0, 0])\n                    cylinder(h = 15 + i, d1 = 8, d2 = 4, $fn = 8);\n    }\n\n    // Whisper holes\n    for (a = [30:60:330]) {\n        rotate([0, 0, a])\n            translate([18, 0, 5])\n                rotate([-45, 0, 0])\n                    cylinder(h = 8, d = 4, $fn = 12);\n    }\n\n    // Top spiral ridges\n    for (b = [0:30:150]) {\n        rotate([0, 0, b])\n            translate([0, 0, 15])\n                rotate_extrude(angle = 30, $fn = 30)\n                    translate([15, 0])\n                        circle(d = 3, $fn = 12);\n    }\n\n    // Bottom anchoring nubs\n    difference() {\n        for (c = [0:120:240]) {\n            rotate([0, 0, c])\n                translate([12, 0, -20])\n                    sphere(d = 8, $fn = 12);\n        }\n        // Flat bottom for printing\n        translate([0, 0, -25])\n            cube([100, 100, 10], center = true);\n    }\n}\n\nwhisperroot();",
    "renders": true
  },
  {
    "household_item": "xylosprite",
    "openscad_code": "// Xylosprite - Realistic style with medium complexity\n// A wooden sprite figure with resonator bars and striker\n\n// Global parameters\n$fn = 32;\nbody_length = 40;\nbody_width = 25;\nbody_height = 35;\nhead_diameter = 22;\nbar_width = 6;\nbar_thickness = 4;\nbar_spacing = 9;\nnum_bars = 5;\nbase_thickness = 3;\nwall_thickness = 2;\n\n// Main module\nmodule xylosprite() {\n    // Base platform\n    translate([0, 0, 0])\n        cube([body_length + 20, body_width + 10, base_thickness], center = true);\n    \n    // Body\n    translate([0, 0, base_thickness + body_height/2])\n        rounded_cube([body_length, body_width, body_height], 3);\n    \n    // Head\n    translate([0, 0, base_thickness + body_height + head_diameter/2 - 5])\n        sphere(d = head_diameter);\n    \n    // Eyes\n    eye_offset = head_diameter/2 - 3;\n    translate([5, -eye_offset, base_thickness + body_height + head_diameter/2])\n        sphere(d = 4);\n    translate([-5, -eye_offset, base_thickness + body_height + head_diameter/2])\n        sphere(d = 4);\n    \n    // Mouth\n    translate([0, -eye_offset - 2, base_thickness + body_height + head_diameter/2 - 8])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d1 = 8, d2 = 6);\n    \n    // Arms\n    arm_length = 20;\n    arm_width = 6;\n    arm_height = 8;\n    \n    // Left arm\n    translate([-body_length/2 - arm_length/2, 0, base_thickness + body_height/2])\n        rounded_cube([arm_length, arm_width, arm_height], 2);\n    \n    // Right arm\n    translate([body_length/2 + arm_length/2, 0, base_thickness + body_height/2])\n        rounded_cube([arm_length, arm_width, arm_height], 2);\n    \n    // Resonator bars\n    bar_start = -((num_bars - 1) * bar_spacing)/2;\n    for(i = [0:num_bars-1]) {\n        bar_length = 35 - i * 3;\n        translate([bar_start + i * bar_spacing, 0, base_thickness + bar_thickness/2])\n            rounded_cube([bar_length, bar_width, bar_thickness], 1);\n    }\n    \n    // Striker\n    striker_length = 30;\n    striker_diameter = 4;\n    striker_ball = 8;\n    \n    translate([body_length/2 + arm_length + 5, 0, base_thickness + body_height/2])\n        union() {\n            // Handle\n            rotate([0, 90, 0])\n                cylinder(h = striker_length, d = striker_diameter);\n            \n            // Striker head\n            translate([striker_length/2, 0, 0])\n                sphere(d = striker_ball);\n        }\n    \n    // Feet\n    foot_length = 12;\n    foot_width = 8;\n    foot_height = 5;\n    \n    translate([-body_length/4, 0, 0])\n        rounded_cube([foot_length, foot_width, foot_height], 2);\n    translate([body_length/4, 0, 0])\n        rounded_cube([foot_length, foot_width, foot_height], 2);\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx = [-1, 1], dy = [-1, 1], dz = [-1, 1]) {\n            translate([dx * (size[0]/2 - radius), dy * (size[1]/2 - radius), dz * (size[2]/2 - radius)])\n                sphere(r = radius);\n        }\n    }\n}\n\n// Render the model\nxylosprite();",
    "renders": true
  },
  {
    "household_item": "yearnsong",
    "openscad_code": "// Yearnsong (Realistic Stylized Music Box)\n// 70 mm tall, 3D-printable, no support needed\n// All overhangs ≤ 45°\n\n// overall scale factor\nscale_factor = 70 / 100;    // target height 70 mm\n\n// wall thickness for printing\nwall = 2 * scale_factor;\n\nmodule body() {\n    // hollow rounded rectangular body\n    difference() {\n        // outer shell\n        minkowski() {\n            cube([50, 35, 40] * scale_factor, center = true);\n            sphere(wall);\n        }\n        // inner cavity\n        minkowski() {\n            cube([46, 31, 36] * scale_factor, center = true);\n            sphere(wall * 0.8);\n        }\n    }\n}\n\nmodule crank() {\n    // side crank handle\n    translate([27 * scale_factor, 0, 5 * scale_factor]) {\n        rotate([0, 90, 0]) {\n            // shaft\n            cylinder(h = 8 * scale_factor, r = 3 * scale_factor, $fn = 20);\n            // knob\n            translate([0, 0, 9 * scale_factor])\n                sphere(4 * scale_factor, $fn = 20);\n        }\n    }\n}\n\nmodule keys() {\n    // twelve metal tines\n    for (i = [0:11]) {\n        translate([(i * 3.5 - 19.25) * scale_factor, 18 * scale_factor, 15 * scale_factor]) {\n            // each tine\n            cube([2.5 * scale_factor, 3 * scale_factor, (15 + i * 1.5) * scale_factor]);\n            // rounded end\n            translate([0, 1.5 * scale_factor, (15 + i * 1.5) * scale_factor])\n                rotate([90, 0, 0])\n                    cylinder(h = 2.5 * scale_factor, r = 1.25 * scale_factor, $fn = 16);\n        }\n    }\n}\n\nmodule comb_support() {\n    // bridge holding tines\n    translate([0, 15 * scale_factor, 12 * scale_factor])\n        cube([55 * scale_factor, 6 * scale_factor, 8 * scale_factor], center = true);\n}\n\nmodule winding_key() {\n    // top winding key\n    translate([0, -15 * scale_factor, 22 * scale_factor]) {\n        // post\n        cylinder(h = 8 * scale_factor, r = 4 * scale_factor, $fn = 24);\n        // cross bar\n        rotate([90, 0, 0])\n            cube([12 * scale_factor, 2 * scale_factor, 2 * scale_factor], center = true);\n    }\n}\n\nmodule sound_holes() {\n    // decorative sound holes on front\n    for (j = [0:1])\n        for (i = [0:4]) {\n            translate([(i * 7 - 14) * scale_factor, 0, (j * 8 + 5) * scale_factor])\n                rotate([0, 90, 0])\n                    cylinder(h = wall + 1, r = 2 * scale_factor, $fn = 20);\n        }\n}\n\nmodule feet() {\n    // four small feet\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * 20 * scale_factor, y * 12 * scale_factor, -21 * scale_factor])\n                cylinder(h = 5 * scale_factor, r = 3 * scale_factor, $fn = 16);\n}\n\n// assemble the yearnsong\nunion() {\n    body();\n    crank();\n    comb_support();\n    keys();\n    winding_key();\n    feet();\n    difference() {\n        body();  // reuse for holes\n        sound_holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "zephyrshade",
    "openscad_code": "// Zephyrshade - Medium complexity realistic style\n// A modern desk lamp shade inspired by gentle breezes\n\n// Overall dimensions\nshade_height = 60;\nshade_top_d = 40;\nshade_bottom_d = 60;\nwall_thickness = 2;\n\n// Vent parameters\nvent_count = 8;\nvent_width = 4;\nvent_height = 8;\n\n// Mounting ring\nmount_height = 8;\nmount_d = 20;\n\n// Create the main shade body\nmodule shade_body() {\n    difference() {\n        // Outer shell with slight taper\n        cylinder(h = shade_height, d1 = shade_bottom_d, d2 = shade_top_d, $fn = 100);\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n            cylinder(h = shade_height + 2, d1 = shade_bottom_d - wall_thickness*2, \n                    d2 = shade_top_d - wall_thickness*2, $fn = 100);\n    }\n}\n\n// Create ventilation slots for realistic airflow\nmodule ventilation_slots() {\n    for(i = [0:vent_count-1]) {\n        rotate([0, 0, i * 360/vent_count])\n            translate([shade_bottom_d/2 - vent_width/2 - wall_thickness, 0, shade_height/2])\n                rotate([90, 0, 0])\n                    cube([vent_width, vent_height, wall_thickness + 1], center = true);\n    }\n}\n\n// Top mounting ring for lamp fitting\nmodule mount_ring() {\n    difference() {\n        // Outer ring\n        translate([0, 0, shade_height])\n            cylinder(h = mount_height, d = mount_d + wall_thickness*2, $fn = 50);\n        \n        // Inner hole for standard lamp socket\n        translate([0, 0, shade_height - 1])\n            cylinder(h = mount_height + 2, d = mount_d, $fn = 50);\n    }\n}\n\n// Decorative ridges for realistic styling\nmodule decorative_ridges() {\n    ridge_height = 1;\n    ridge_count = 12;\n    \n    for(i = [0:ridge_count-1]) {\n        rotate([0, 0, i * 360/ridge_count])\n            translate([0, shade_bottom_d/2 - wall_thickness/2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = shade_height, d = ridge_height, $fn = 20);\n    }\n}\n\n// Bottom reinforcement ring for stability\nmodule bottom_ring() {\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h = wall_thickness*2, d = shade_bottom_d + wall_thickness*2, $fn = 100);\n            cylinder(h = wall_thickness*2 + 1, d = shade_bottom_d, $fn = 100);\n        }\n}\n\n// Assembly\nunion() {\n    // Main shade structure\n    shade_body();\n    \n    // Ventilation\n    ventilation_slots();\n    \n    // Mounting hardware\n    mount_ring();\n    \n    // Decorative elements\n    decorative_ridges();\n    \n    // Bottom reinforcement\n    bottom_ring();\n}",
    "renders": true
  },
  {
    "household_item": "ashgleam",
    "openscad_code": "// Ashgleam - Realistic style, medium complexity\n// Overall dimensions: 80mm x 60mm x 45mm\n\n$fn = 32;\n\n// Main body module\nmodule ashgleam_body() {\n    // Central body - oval shape\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(d=50);\n        \n        // Hollow interior\n        scale([1.1, 0.9, 0.7]) sphere(d=45);\n        \n        // Bottom opening for ash collection\n        translate([0, 0, -20]) cube([40, 40, 40], center=true);\n    }\n}\n\n// Ash grate module\nmodule ash_grate() {\n    // Grate base\n    translate([0, 0, -10]) difference() {\n        cylinder(h=3, d=35);\n        \n        // Ventilation holes\n        for(i=[0:11]) {\n            rotate([0, 0, i*30]) \n                translate([12, 0, -1]) \n                    cylinder(h=5, d=3);\n        }\n    }\n}\n\n// Handle support arms\nmodule handle_supports() {\n    // Left support\n    translate([-25, 0, 10]) rotate([90, 0, 0]) \n        cylinder(h=15, d=8);\n    \n    // Right support\n    translate([25, 0, 10]) rotate([90, 0, 0]) \n        cylinder(h=15, d=8);\n}\n\n// Main handle\nmodule handle() {\n    // Handle grip\n    translate([0, 0, 25]) rotate([90, 0, 0]) \n        cylinder(h=50, d=12);\n    \n    // Handle end caps\n    translate([-25, 0, 25]) sphere(d=14);\n    translate([25, 0, 25]) sphere(d=14);\n}\n\n// Air intake vents\nmodule air_vents() {\n    // Front vents\n    for(i=[-1:1]) {\n        translate([i*15, -30, 0]) rotate([0, 0, 0]) \n            difference() {\n                cube([8, 5, 20], center=true);\n                translate([0, -3, 0]) cube([6, 3, 18], center=true);\n            }\n    }\n    \n    // Rear vents\n    for(i=[-1:1]) {\n        translate([i*15, 30, 0]) rotate([0, 0, 0]) \n            difference() {\n                cube([8, 5, 20], center=true);\n                translate([0, 3, 0]) cube([6, 3, 18], center=true);\n            }\n    }\n}\n\n// Ash collection tray\nmodule ash_tray() {\n    translate([0, 0, -25]) difference() {\n        // Tray body\n        cube([45, 35, 8], center=true);\n        \n        // Tray cavity\n        translate([0, 0, 2]) cube([40, 30, 6], center=true);\n        \n        // Pull handle\n        translate([0, 20, 2]) cylinder(h=15, d=8);\n    }\n}\n\n// Hinge mechanism for tray\nmodule tray_hinges() {\n    // Left hinge\n    translate([-20, 0, -20]) rotate([0, 90, 0]) \n        cylinder(h=10, d=6);\n    \n    // Right hinge\n    translate([20, 0, -20]) rotate([0, 90, 0]) \n        cylinder(h=10, d=6);\n}\n\n// Main assembly\nunion() {\n    // Body\n    ashgleam_body();\n    \n    // Internal grate\n    ash_grate();\n    \n    // Handle supports\n    handle_supports();\n    \n    // Handle\n    handle();\n    \n    // Air vents\n    air_vents();\n    \n    // Ash tray\n    ash_tray();\n    \n    // Hinges\n    tray_hinges();\n}",
    "renders": true
  },
  {
    "household_item": "blightroot",
    "openscad_code": "// Blightroot - fungal growth with bulbous base and branching tendrils\n// Designed for 3D printing - no overhangs >45°, 2mm walls\n\n// Main dimensions\nroot_height = 60;\nbase_diameter = 40;\ntendril_count = 7;\n\n// Base bulb structure\nmodule base_bulb() {\n    // Main central bulb\n    union() {\n        sphere(d = base_diameter, $fn = 32);\n        \n        // Growth rings around base\n        for(i = [1:3]) {\n            translate([0, 0, -5 + i*3])\n            scale([1 + i*0.1, 1 + i*0.1, 0.3])\n            sphere(d = base_diameter - i*5, $fn = 32);\n        }\n    }\n}\n\n// Tendril generator - curved fungal growths\nmodule tendril(height, angle, thickness) {\n    // Create curved tendril using hull of spheres\n    union() {\n        for(i = [0:5]) {\n            translate([\n                sin(angle) * i * height/5,\n                cos(angle) * i * height/5,\n                i * height/6 + 5\n            ])\n            sphere(d = thickness * (1 - i*0.15), $fn = 16);\n        }\n        \n        // Add small bulbous growths along tendril\n        for(i = [1:3]) {\n            translate([\n                sin(angle) * i * height/3,\n                cos(angle) * i * height/3,\n                i * height/4 + 5\n            ])\n            sphere(d = thickness * 0.8, $fn = 8);\n        }\n    }\n}\n\n// Root-like anchoring structures\nmodule anchoring_roots() {\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([base_diameter/3, 0, -10])\n        rotate([90, 0, 0])\n        cylinder(h = 15, d1 = 8, d2 = 3, $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Central bulb\n    base_bulb();\n    \n    // Ground plate for stability\n    translate([0, 0, -12])\n    cylinder(h = 4, d = base_diameter + 10, $fn = 32);\n    \n    // Add anchoring roots\n    anchoring_roots();\n    \n    // Generate tendrils in spiral pattern\n    for(i = [0:tendril_count-1]) {\n        angle = i * 360/tendril_count;\n        height = root_height - i*3;\n        thickness = 6 + sin(i*45)*2;\n        \n        translate([0, 0, base_diameter/2])\n        rotate([0, 0, angle])\n        rotate([10 + i*5, 0, 0])\n        tendril(height, angle, thickness);\n    }\n    \n    // Central spore pod\n    translate([0, 0, root_height - 5])\n    sphere(d = 12, $fn = 16);\n    \n    // Small surface details - pustules\n    for(i = [0:15]) {\n        theta = i * 137.5;  // Golden angle\n        phi = i * 30;\n        r = base_diameter/2 * 0.8;\n        \n        translate([\n            r * sin(theta) * cos(phi),\n            r * sin(theta) * sin(phi),\n            r * cos(theta) + 5\n        ])\n        sphere(d = 2 + (i%3), $fn = 8);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "citrinewisp",
    "openscad_code": "// CitrineWisp – a medium‐complexity, realistic “citrine-crystal fairy”\n// Overall height ≈ 70 mm, wall ≥ 0.8 mm throughout, printable without support\n\n$fn = 36;\n\n// Global scale factor – change this to resize the whole model\nscale = 1.0;\n\n// ---------- MAIN ASSEMBLY ----------\nmodule citrine_wisp() {\n    // Wings first (thin, no overhang when printed upright)\n    translate([0, 0, 30]) wings();\n\n    // Body / gown\n    gown();\n\n    // Head with crystal crown\n    translate([0, 0, 55]) head();\n\n    // Arms\n    translate([8, 0, 42]) arm(1);\n    translate([-8, 0, 42]) mirror([1, 0, 0]) arm(1);\n\n    // Floating citrine shards around the figure\n    shards();\n}\n\n// ---------- WINGS ----------\nmodule wings() {\n    difference() {\n        union() {\n            // Left wing\n            translate([-12, 0, 0])\n                rotate([0, 0, -20])\n                wing_half();\n            // Right wing\n            translate([12, 0, 0])\n                rotate([0, 0, 20])\n                mirror([1, 0, 0])\n                wing_half();\n        }\n        // Cut a hole for the body\n        cylinder(h = 2, r = 4, center = true);\n    }\n}\n\nmodule wing_half() {\n    linear_extrude(height = 1, center = true, convexity = 10)\n    polygon(points = [\n        [0, 0],\n        [5, 20],\n        [8, 25],\n        [6, 35],\n        [0, 40],\n        [-2, 30],\n        [-3, 20],\n        [-2, 10],\n        [0, 0]\n    ]);\n}\n\n// ---------- GOWN / BODY ----------\nmodule gown() {\n    color(\"gold\")\n    difference() {\n        union() {\n            // Torso\n            cylinder(h = 25, r1 = 7, r2 = 5, center = false);\n            // Skirt flare\n            translate([0, 0, -10])\n                cylinder(h = 15, r1 = 12, r2 = 7, center = false);\n        }\n        // Hollow out\n        translate([0, 0, -1])\n            cylinder(h = 27, r1 = 5.5, r2 = 3.5, center = false);\n    }\n}\n\n// ---------- HEAD ----------\nmodule head() {\n    color(\"lemonchiffon\")\n    union() {\n        sphere(d = 12);\n        // Crystal crown\n        translate([0, 0, 7]) crown();\n    }\n}\n\nmodule crown() {\n    // Small hexagonal prism crown\n    cylinder(h = 4, r = 4.5, $fn = 6);\n    // Tiny spikes\n    for(i = [0:5])\n        rotate([0, 0, i * 60])\n        translate([3.5, 0, 4])\n            cylinder(h = 3, r1 = 1, r2 = 0.5);\n}\n\n// ---------- ARMS ----------\nmodule arm(side) {\n    color(\"lemonchiffon\")\n    union() {\n        // Upper arm\n        rotate([0, -30, 20])\n            cylinder(h = 10, r = 1.5, center = false);\n        // Lower arm\n        translate([7, 0, -6])\n            rotate([0, 30, 0])\n            cylinder(h = 8, r = 1.3, center = false);\n    }\n}\n\n// ---------- FLOATING CITRINE SHARDS ----------\nmodule shards() {\n    for(i = [0:5]) {\n        a = i * 60;\n        r = 20 + i * 3;\n        h = 15 + i * 5;\n        translate([\n            r * cos(a),\n            r * sin(a),\n            h\n        ])\n        rotate([rand(0, 30), rand(0, 30), a])\n            crystal();\n    }\n}\n\nmodule crystal() {\n    // Simple irregular citrine fragment\n    color([1, 0.8, 0.2])\n    intersection() {\n        // Base crystal shape\n        cube([5, 5, 8], center = true);\n        // Add some facets\n        rotate([0, 0, 30])\n        cube([6, 3, 8], center = true);\n    }\n}\n\n// ---------- UTIL ----------\nfunction rand(a, b) = a + (b - a) * (rands(0, 1, 1)[0]);\n\n// ---------- RENDER ----------\nscale(scale) citrine_wisp();",
    "renders": true
  },
  {
    "household_item": "driftshade",
    "openscad_code": "// Realistic Driftshade (Medium Complexity)\n// A driftshade is a wind-driven, wheeled vehicle for drifting on flat surfaces\n// Overall dimensions: ~85mm long, 45mm wide, 25mm high\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Main body\n        hull() {\n            translate([-5, 0, 0]) sphere(d=35);\n            translate([35, 0, 0]) sphere(d=30);\n            translate([20, 0, 5]) sphere(d=25);\n        }\n        \n        // Cockpit opening\n        translate([20, 0, 15])\n            cube([30, 30, 15], center=true);\n        \n        // Front vent\n        translate([40, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h=25, d1=15, d2=10);\n        \n        // Side vents (left)\n        for(i = [0:1])\n            translate([25 + i*10, 20, 8])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=5);\n        \n        // Side vents (right)\n        for(i = [0:1])\n            translate([25 + i*10, -20, 8])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=5);\n    }\n}\n\n// Front axle with steering mechanism\nmodule front_axle() {\n    translate([35, 0, 5])\n        rotate([0, 0, 0])\n            difference() {\n                // Axle housing\n                cube([30, 8, 6], center=true);\n                \n                // Kingpin holes\n                translate([10, 0, 0])\n                    cylinder(h=10, d=3, center=true);\n                translate([-10, 0, 0])\n                    cylinder(h=10, d=3, center=true);\n            }\n}\n\n// Rear axle assembly\nmodule rear_axle() {\n    translate([5, 0, 5])\n        difference() {\n            // Axle housing\n            cube([25, 12, 8], center=true);\n            \n            // Wheel bearing holes\n            translate([10, 6, 0])\n                cylinder(h=12, d=4, center=true);\n            translate([10, -6, 0])\n                cylinder(h=12, d=4, center=true);\n        }\n}\n\n// Wheel module\nmodule wheel(diameter=12, width=8) {\n    difference() {\n        // Main tire\n        cylinder(h=width, d=diameter, center=true);\n        \n        // Wheel hub cavity\n        cylinder(h=width+1, d=diameter-4, center=true);\n        \n        // Traction grooves\n        for(i = [0:3])\n            rotate([0, 0, i*90])\n                translate([diameter/2 - 1, 0, 0])\n                    cube([2, 1, width+0.5], center=true);\n    }\n}\n\n// Steering column\nmodule steering_column() {\n    translate([25, 0, 20])\n        rotate([45, 0, 0])\n            cylinder(h=15, d=4);\n}\n\n// Seat\nmodule seat() {\n    translate([20, 0, 12])\n        difference() {\n            // Main seat\n            scale([1, 0.8, 0.3])\n                sphere(d=25);\n            \n            // Seat back cut\n            translate([0, 0, -5])\n                cube([25, 20, 10], center=true);\n            \n            // Leg area\n            translate([-5, 0, 0])\n                cube([15, 15, 8], center=true);\n        }\n}\n\n// Wind catcher/sail mount\nmodule sail_mount() {\n    translate([15, 0, 25])\n        difference() {\n            // Mount base\n            cylinder(h=8, d=10);\n            \n            // Mast hole\n            cylinder(h=9, d=4);\n        }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    body_shell();\n    \n    // Axles\n    front_axle();\n    rear_axle();\n    \n    // Wheels - front\n    translate([35, 15, 5])\n        wheel();\n    translate([35, -15, 5])\n        wheel();\n    \n    // Wheels - rear\n    translate([5, 15, 5])\n        wheel();\n    translate([5, -15, 5])\n        wheel();\n    \n    // Interior details\n    seat();\n    steering_column();\n    \n    // Sail mounting point\n    sail_mount();\n}",
    "renders": true
  },
  {
    "household_item": "emberwhorl",
    "openscad_code": "// Emberwhorl – medium-complexity realistic style\n// Approx. 80 mm tall, 3 mm wall thickness, all angles ≤45°\n\n$fn = 48;                // smooth curves\n\n// --- Parameters -------------------------------------------------\nstem_h   = 40;           // total stem height\nstem_r   = 4;\nbase_r   = 12;           // base disk radius\nbase_h   = 3;\nwhorl_r  = 35;           // widest whorl radius\nwhorl_h  = 8;\nsupport_r = 1.5;         // filament support radius\nn_filaments = 18;        // number of ember filaments\nfilament_len = 30;       // max length of embers\nfilament_t   = 1.8;      // filament thickness\n\n// --- Main assembly ----------------------------------------------\nunion() {\n    // Central stem\n    color(\"dimgray\")\n    stem();\n\n    // Base disk for stability\n    color(\"gray\")\n    translate([0,0,0])\n        cylinder(h=base_h, r=base_r);\n\n    // Ember whorl ring\n    color(\"darkred\")\n    translate([0,0,base_h])\n        whorl_ring();\n\n    // Ember filaments\n    color(\"orangered\")\n    for(i=[0:n_filaments-1])\n        rotate([0,0,i*360/n_filaments])\n            translate([whorl_r,0,base_h+whorl_h/2])\n                ember_filament(i);\n}\n\n// --- Modules ----------------------------------------------------\nmodule stem() {\n    union() {\n        cylinder(h=stem_h, r=stem_r);\n        // flare at top for printability\n        translate([0,0,stem_h])\n            cylinder(h=2, r1=stem_r, r2=stem_r+1);\n    }\n}\n\nmodule whorl_ring() {\n    difference() {\n        cylinder(h=whorl_h, r=whorl_r);\n        // hollow center\n        translate([0,0,-1])\n            cylinder(h=whorl_h+2, r=whorl_r-3);\n        // inner cone for drainage\n        translate([0,0,-1])\n            cylinder(h=whorl_h+2, r1=whorl_r-3, r2=whorl_r-5, center=true);\n    }\n}\n\nmodule ember_filament(idx) {\n    // each filament is a tapered twisted cylinder\n    twist = 35;\n    rot   = 15*sin(idx*137.5);      // golden angle variation\n    translate([0,0,0])\n    rotate([90+rot,0,twist])\n        cylinder(h=filament_len, r1=filament_t, r2=filament_t/2);\n}",
    "renders": true
  },
  {
    "household_item": "frostglen",
    "openscad_code": "// Frostglen - realistic winter forest clearing\n// Size: 70mm x 70mm x 35mm\n\n// Base terrain with snow\nmodule base_terrain() {\n    difference() {\n        // Main snow-covered ground\n        cube([70, 70, 8], center=true);\n        \n        // Snow drift valleys\n        for (x = [-25:15:25]) for (y = [-25:15:25]) {\n            translate([x + sin(x*0.2)*10, y + cos(y*0.2)*10, 0])\n                scale([1, 1, 0.3])\n                    sphere(d=15, $fn=12);\n        }\n    }\n}\n\n// Pine tree module\nmodule pine_tree(height, base_diam) {\n    union() {\n        // Trunk\n        color(\"brown\")\n            cylinder(h=height*0.3, d=base_diam*0.4, $fn=8);\n        \n        // Snow-covered branches\n        for (i = [1:3]) {\n            color(\"white\")\n                translate([0, 0, height*0.3 + i*height*0.2])\n                    cylinder(h=height*0.15, d1=base_diam*1.2-(i*3), d2=base_diam*0.8-(i*2), $fn=12);\n        }\n        \n        // Top cone\n        color(\"white\")\n            translate([0, 0, height*0.8])\n                cylinder(h=height*0.2, d1=base_diam*0.4, d2=0, $fn=12);\n    }\n}\n\n// Fallen log with snow\nmodule fallen_log(length) {\n    union() {\n        // Log\n        color(\"brown\")\n            rotate([90, 0, 15])\n                cylinder(h=length, d=6, $fn=12);\n        \n        // Snow accumulation\n        color(\"white\")\n            translate([0, 0, 3])\n                rotate([90, 0, 15])\n                    scale([1, 0.7, 1])\n                        cylinder(h=length, d=8, $fn=12);\n    }\n}\n\n// Snow-covered rock\nmodule snow_rock(size) {\n    difference() {\n        // Rock\n        color([0.4, 0.4, 0.45])\n            scale([1, 0.7, 0.6])\n                sphere(d=size, $fn=16);\n        \n        // Snow cap\n        color(\"white\")\n            translate([0, 0, size*0.3])\n                sphere(d=size*1.2, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base terrain\n    base_terrain();\n    \n    // Trees positioned around clearing\n    translate([-25, -25, 4]) pine_tree(25, 8);\n    translate([25, -20, 4]) pine_tree(30, 10);\n    translate([-20, 25, 4]) pine_tree(28, 9);\n    translate([20, 20, 4]) pine_tree(22, 7);\n    \n    // Central clearing features\n    translate([-15, 0, 4]) fallen_log(25);\n    translate([10, -10, 4]) snow_rock(12);\n    translate([-5, 15, 4]) snow_rock(8);\n    translate([15, 5, 4]) snow_rock(10);\n    \n    // Small rocks around edges\n    for (r = [30:60:359]) {\n        translate([cos(r)*28, sin(r)*28, 4])\n            snow_rock(5 + r%3*2);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "glimmerthorn",
    "openscad_code": "// Glimmerthorn – medium-complexity realistic style\n// Total height ≈ 75 mm, max width ≈ 35 mm\n// All overhangs ≤ 45°, wall ≥ 1.2 mm\n\n$fn = 36;\n\n// ---------- Parameters ----------\nbase_h = 6;           // thickness of the base platform\nstem_h = 50;          // total length of the central stem\nstem_r = 4;           // stem radius\nthorns   = 12;        // number of thorns\nthorn_l  = 12;        // thorn length\nthorn_t  = 1.6;       // thorn thickness at base\nglow_d   = 6;         // diameter of crystal bulbs\ncrystal_rows = 3;     // rows of crystals\ncrystal_cols = 4;     // crystals per row\n\n// ---------- Modules ----------\n\n// Sharp thorn pointing outward\nmodule thorn(h = thorn_l, r = thorn_t) {\n    rotate([0, -45, 0])\n        cylinder(h1 = 0.4, h2 = h, r1 = r/2, r2 = 0.1, center = false);\n}\n\n// Crystal bulb with faceted look\nmodule crystal(d = glow_d) {\n    sphere(d = d);\n    for(a = [0:120:359])\n        rotate([0, a, 0])\n            rotate([0, 0, 30])\n                cylinder(h = d*0.9, r = d/4, center = true);\n}\n\n// Thorn ring around stem\nmodule thorn_ring(z_pos, count = thorns) {\n    translate([0, 0, z_pos])\n        for(i = [0:count-1])\n            rotate([0, 0, i*360/count])\n                translate([stem_r + thorn_l/3, 0, 0])\n                    thorn();\n}\n\n// Stem with thorns\nmodule stem() {\n    difference() {\n        cylinder(h = stem_h, r = stem_r, center = false);\n        // hollow for weight saving\n        cylinder(h = stem_h-2, r = stem_r-1.2, center = false);\n    }\n    for(z = [stem_h*0.2 : stem_h*0.22 : stem_h*0.9])\n        thorn_ring(z);\n}\n\n// Crystal cluster on upper stem\nmodule crystals() {\n    for(row = [0:crystal_rows-1]) {\n        z = stem_h - 5 - row*glow_d*1.4;\n        for(col = [0:crystal_cols-1]) {\n            angle = col*360/crystal_cols + row*15; // stagger rows\n            translate([0, 0, z])\n                rotate([0, 0, angle])\n                    translate([stem_r + glow_d/2 + 1, 0, 0])\n                        crystal();\n        }\n    }\n}\n\n// Wide base platform\nmodule base() {\n    difference() {\n        cylinder(h = base_h, r1 = 17, r2 = 15, center = false);\n        cylinder(h = base_h+0.1, r1 = 15-1.2, r2 = 13-1.2, center = false);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    base();\n    translate([0, 0, base_h])\n        stem();\n    translate([0, 0, base_h])\n        crystals();\n}",
    "renders": true
  },
  {
    "household_item": "hollowsprite",
    "openscad_code": "// Hollowsprite - Realistic Medium Complexity\n// 3D printable hollow sprite bottle with cap\n// Overall height: 85mm, width: 45mm\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main module\nmodule hollowsprite() {\n    difference() {\n        // Solid bottle shape\n        union() {\n            // Bottle body\n            translate([0, 0, 25]) {\n                bottle_body();\n            }\n            \n            // Cap\n            translate([0, 0, 72]) {\n                cap();\n            }\n            \n            // Shoulder detail\n            translate([0, 0, 48]) {\n                shoulder_detail();\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2]) {\n            scale([0.85, 0.85, 0.9]) {\n                bottle_body();\n            }\n        }\n        \n        // Bottom hole for printing drainage\n        translate([0, 0, -1]) {\n            cylinder(h = 2, r = 8);\n        }\n    }\n}\n\n// Bottle body shape\nmodule bottle_body() {\n    // Main cylindrical body\n    cylinder(h = 50, r1 = 22.5, r2 = 20, center = false);\n    \n    // Rounded bottom\n    translate([0, 0, -2]) {\n        sphere(r = 22.5);\n    }\n}\n\n// Cap with threads\nmodule cap() {\n    difference() {\n        // Cap body\n        union() {\n            // Main cap cylinder\n            cylinder(h = 15, r = 23);\n            \n            // Cap top dome\n            translate([0, 0, 15]) {\n                sphere(r = 23);\n            }\n        }\n        \n        // Thread relief\n        for (i = [0:5:25]) {\n            rotate([0, 0, i]) {\n                translate([20.5, 0, 0]) {\n                    cube([3, 2, 15], center = true);\n                }\n            }\n        }\n        \n        // Inner cavity\n        translate([0, 0, 5]) {\n            cylinder(h = 15, r = 20);\n        }\n    }\n}\n\n// Shoulder detail ring\nmodule shoulder_detail() {\n    difference() {\n        // Main ring\n        cylinder(h = 4, r1 = 23.5, r2 = 23.5);\n        \n        // Grooves for grip\n        for (i = [0:30:330]) {\n            rotate([0, 0, i]) {\n                translate([22, 0, 0]) {\n                    cube([3, 2, 4], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nhollowsprite();",
    "renders": true
  },
  {
    "household_item": "icespar",
    "openscad_code": "// Ice-spar (ice pick / ice awl) – realistic style, medium complexity\n// All dimensions in mm, 3D-print ready, no supports needed\n\n// Overall length ≈ 85 mm.  Handle ∅ 28 mm.  Pick tip angle 60°.\n\n$fn=48;          // global smoothness\n\nmodule handle() {\n    // Main grip – 4 radial ribs for anti-slip\n    difference() {\n        // Outer shell: 14 mm radius\n        cylinder(h=60, r=14, center=true);\n        \n        // Hollow core – 6 mm radius leaves 4 mm walls\n        translate([0,0,0])\n            cylinder(h=62, r=6, center=true);\n        \n        // Grip grooves – four radial cuts\n        for(i=[0:90:270])\n            rotate([0,0,i])\n                translate([10,0,-31])\n                    cube([20,4,62], center=true);\n    }\n}\n\nmodule collar() {\n    // Stainless-steel collar between handle and shaft\n    difference() {\n        cylinder(h=6, r1=12, r2=10, center=false);\n        cylinder(h=7, r=8, center=false);\n    }\n}\n\nmodule shaft() {\n    // Straight 8 mm diameter shaft\n    cylinder(h=15, r=4, center=false);\n}\n\nmodule pick() {\n    // Tapered pick ending in 60° cone\n    // Built as 4 stacked cylinders to avoid overhangs\n    union() {\n        cylinder(h=3, r1=4, r2=3.5);\n        translate([0,0,3])\n            cylinder(h=3, r1=3.5, r2=2.5);\n        translate([0,0,6])\n            cylinder(h=3, r1=2.5, r2=1.5);\n        translate([0,0,9])\n            cylinder(h=3, r1=1.5, r2=0.5);\n    }\n}\n\nmodule lanyard_hole() {\n    // 4 mm through-hole for wrist strap\n    rotate([90,0,0])\n        cylinder(h=30, r=2.5, center=true);\n}\n\n// Assembly\ntranslate([0,0,0]) handle();\ntranslate([0,0,30]) collar();\ntranslate([0,0,33]) shaft();\ntranslate([0,0,48]) pick();\ntranslate([0,0,0]) lanyard_hole();",
    "renders": true
  },
  {
    "household_item": "juniperwhirl",
    "openscad_code": "// Juniperwhirl - realistic style, medium complexity\n// Overall dimensions ~80mm diameter, 30mm height\n\nmodule stem() {\n    // Main central stem\n    cylinder(h=30, d=4, $fn=16);\n    \n    // Stem base flare\n    translate([0,0,-1])\n        cylinder(h=3, d1=6, d2=4, $fn=16);\n}\n\nmodule needle_cluster(radius, height, count) {\n    // Generate realistic needle clusters\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*360/count])\n        translate([radius, 0, height])\n        rotate([90, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=8, d1=0.8, d2=0.2, $fn=6);\n    }\n}\n\nmodule branch_layer(radius, height, branches) {\n    // Create a layer of branches\n    for(i=[0:branches-1]) {\n        angle = i*360/branches;\n        rotate([0, 0, angle])\n        translate([0, 0, height])\n        rotate([20 + rand(i)*10, 0, rand(i+1)*5])\n        union() {\n            // Branch\n            cylinder(h=radius*0.8, d=2.5, $fn=8);\n            \n            // Needles on branch\n            needle_cluster(radius*0.7, 0, 8);\n            \n            // Sub-branches\n            translate([radius*0.7, 0, 0])\n            rotate([0, -20, 0])\n            cylinder(h=radius*0.4, d=1.5, $fn=6);\n        }\n    }\n}\n\nfunction rand(seed) = rands(0,1,1,seed)[0];\n\nmodule berries() {\n    // Add small berries at branch tips\n    color(\"darkblue\")\n    for(i=[0:5]) {\n        rotate([0, 0, i*60 + rand(i)*30])\n        translate([25 + rand(i+10)*10, 0, 20 + rand(i+20)*8])\n        sphere(d=3, $fn=8);\n    }\n}\n\nmodule juniperwhirl() {\n    union() {\n        // Central stem\n        stem();\n        \n        // Bottom branch layer\n        branch_layer(20, 5, 6);\n        \n        // Middle branch layer\n        branch_layer(25, 15, 5);\n        \n        // Top branch layer\n        branch_layer(20, 25, 4);\n        \n        // Additional detail branches\n        rotate([0, 0, 45])\n        translate([0, 0, 10])\n        rotate([30, 0, 0])\n        cylinder(h=15, d=2, $fn=6);\n        \n        // Berries throughout\n        berries();\n    }\n}\n\n// Main model\njuniperwhirl();",
    "renders": true
  },
  {
    "household_item": "kindlethorn",
    "openscad_code": "// Kindlethorn - realistic medium complexity\n// Overall dimensions: ~80mm long, ~35mm wide\n\n// Parameters\nthickness = 2.5;\nbase_width = 35;\nbase_length = 20;\nhandle_length = 80;\nspike_length = 15;\nspike_spacing = 3.5;\nspikes_per_side = 5;\ngrip_radius = 8;\ngrip_length = 40;\n\n// Main body with grip\nmodule handle() {\n    // Central spine\n    translate([0, 0, -handle_length/2])\n        cube([base_width, thickness, handle_length], center=true);\n    \n    // Grip rings\n    for(i = [0:3]) {\n        translate([0, 0, -handle_length/2 + 10 + i*10])\n            difference() {\n                cylinder(h=grip_length/4, r=grip_radius, center=true);\n                cylinder(h=grip_length/4 + 1, r=grip_radius - thickness, center=true);\n            }\n    }\n}\n\n// Thorn spikes\nmodule spike(x, y, z, angle) {\n    translate([x, y, z])\n        rotate([0, angle, 0])\n        union() {\n            // Spike body\n            cylinder(h=spike_length, r1=1.5, r2=0.5);\n            // Base reinforcement\n            translate([0, 0, -1])\n                cylinder(h=2, r=2);\n        }\n}\n\n// Base plate with mounting holes\nmodule base() {\n    translate([0, 0, -handle_length/2 - 10])\n        difference() {\n            // Main base\n            cube([base_width, base_length, 5], center=true);\n            // Mounting holes\n            for(x = [-base_width/3, 0, base_width/3])\n                for(y = [-base_length/3, 0, base_length/3])\n                    translate([x, y, -1])\n                        cylinder(h=7, r=2);\n        }\n}\n\n// Thorn array on each side\nmodule thorns() {\n    // Left side thorns\n    for(i = [0:spikes_per_side-1]) {\n        x_pos = -base_width/2 + 5 + i*spike_spacing;\n        spike(x_pos, 0, -handle_length/2 + 15 + i*10, 90);\n    }\n    \n    // Right side thorns\n    for(i = [0:spikes_per_side-1]) {\n        x_pos = base_width/2 - 5 - i*spike_spacing;\n        spike(x_pos, 0, -handle_length/2 + 15 + i*10, 90);\n    }\n    \n    // Bottom thorns\n    for(i = [0:2]) {\n        x_pos = -base_width/4 + i*base_width/2;\n        spike(x_pos, 0, -handle_length/2 + 65, 180);\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    base();\n    thorns();\n}",
    "renders": true
  },
  {
    "household_item": "lunargleam",
    "openscad_code": "// LunarGleam – small satellite-like “lunargleam” probe\n// 3-D-printable, realistic style, medium complexity\n// Overall size ≈ 70 mm long × 45 mm wide × 45 mm high\n\n$fn = 36;\n\n// Wall thickness for all hollow parts\nwall = 1.2;\n\n// Main body – octagonal prism (central bus)\nmodule body() {\n    difference() {\n        cylinder(h = 30, d = 36, $fn = 8);          // outer shell\n        translate([0, 0, -0.1])\n            cylinder(h = 30.2, d = 36 - 2*wall, $fn = 8); // hollow\n    }\n}\n\n// Solar panel “wing” on +Y side\nmodule solar_panel() {\n    panel_w = 26; panel_h = 30; panel_t = 2.5;\n    difference() {\n        cube([panel_w, panel_t, panel_h], center = true);\n        translate([0, 0, 0])\n            cube([panel_w - 2*wall, panel_t + 0.2, panel_h - 2*wall], center = true);\n    }\n}\n\n// Deployable high-gain dish antenna\nmodule dish() {\n    dish_d = 28; dish_h = 6;\n    difference() {\n        cylinder(h = dish_h, d1 = dish_d, d2 = dish_d - 6);\n        translate([0, 0, wall])\n            cylinder(h = dish_h - wall, d1 = dish_d - 2*wall, d2 = dish_d - 6 - 2*wall);\n    }\n}\n\n// Omnidirectional antenna mast\nmodule omni_antenna() {\n    mast_d = 3; mast_h = 18;\n    cylinder(h = mast_h, d = mast_d);\n    translate([0, 0, mast_h])\n        sphere(d = 5);\n}\n\n// Thruster cluster (4 small nozzles on rear face)\nmodule thruster() {\n    nozzle_r = 2.5; nozzle_h = 4;\n    difference() {\n        cylinder(h = nozzle_h, r = nozzle_r);\n        translate([0, 0, -0.1])\n            cylinder(h = nozzle_h + 0.2, r = nozzle_r - wall);\n    }\n}\n\n// Main assembly\nmodule lunargleam() {\n    // Central bus\n    body();\n\n    // Solar panels on ±Y\n    translate([0, 18, 0]) solar_panel();\n    mirror([0, 1, 0]) translate([0, 18, 0]) solar_panel();\n\n    // High-gain dish on +X\n    translate([20, 0, 10]) rotate([0, -20, 0]) dish();\n\n    // Omnidirectional antenna on +Z\n    translate([0, 0, 16]) omni_antenna();\n\n    // Thruster cluster on –X\n    for (a = [0:90:270])\n        rotate([0, 0, a])\n            translate([-19, 9, -12]) thruster();\n}\n\nlunargleam();",
    "renders": true
  },
  {
    "household_item": "mosswhisper",
    "openscad_code": "// Mosswhisper - realistic style, medium complexity\n// A bio-luminescent fungal pod that listens to the forest and glows in response\n\n$fn = 48;  // Smooth curves for realism\n\nmodule mosswhisper() {\n    // Main pod body - slightly flattened sphere\n    translate([0, 0, 15]) \n        scale([1, 0.8, 0.6]) \n            sphere(d = 40);\n    \n    // Base stalk - thick enough for printing\n    cylinder(h = 15, d1 = 20, d2 = 15);\n    \n    // Root system - printable without supports\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) \n            translate([8, 0, 0]) \n                rotate([45, 0, 0]) \n                    cylinder(h = 12, d1 = 4, d2 = 2);\n    }\n    \n    // Sensory nodes - small spheres around equator\n    for(theta = [0:30:330]) {\n        rotate([0, 0, theta]) \n            translate([19, 0, 25]) \n                sphere(d = 4);\n    }\n    \n    // Gills underneath - thin but printable\n    difference() {\n        translate([0, 0, 10]) \n            cylinder(h = 3, d = 30);\n        \n        // Cut gaps between gills\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30]) \n                translate([12, 0, 8]) \n                    cube([20, 1, 7], center = true);\n        }\n    }\n    \n    // Bio-luminescent spots - tiny indentations\n    for(phi = [30:30:150]) {\n        for(theta = [0:45:315]) {\n            rotate([0, 0, theta]) \n                rotate([phi, 0, 0]) \n                    translate([0, 0, 20]) \n                        sphere(d = 2);\n        }\n    }\n    \n    // Top aperture - listening port\n    difference() {\n        translate([0, 0, 38]) \n            sphere(d = 10);\n        \n        translate([0, 0, 40]) \n            cylinder(h = 5, d = 6);\n    }\n    \n    // Spore vents - angled cylinders around aperture\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) \n            translate([5, 0, 38]) \n                rotate([-30, 0, 0]) \n                    cylinder(h = 5, d = 2);\n    }\n}\n\n// Generate the model centered at origin\nmosswhisper();",
    "renders": true
  },
  {
    "household_item": "nimblesprite",
    "openscad_code": "// Nimblesprite - Medium complexity realistic 3D printable model\n// Wings fold against body for printing, tail angles up\n// Overall height ~60mm\n\n// Parameters\nbody_r = 12;\nbody_h = 35;\nhead_r = 10;\nwing_span = 45;\nwing_depth = 20;\nleg_len = 15;\nfoot_len = 8;\ntail_len = 25;\n\n// Main body\nmodule body() {\n    union() {\n        // Torso\n        cylinder(h=body_h, r1=body_r, r2=body_r*0.8, $fn=32);\n        \n        // Chest bulge\n        translate([0, -body_r*0.3, body_h*0.6])\n            sphere(r=body_r*1.1, $fn=32);\n    }\n}\n\n// Head with beak\nmodule head() {\n    translate([0, 0, body_h + head_r*0.7]) {\n        union() {\n            // Main head sphere\n            sphere(r=head_r, $fn=32);\n            \n            // Beak\n            translate([0, -head_r*1.2, -head_r*0.2])\n                rotate([0, 90, 0])\n                    cylinder(h=head_r*1.5, r1=head_r*0.3, r2=0, $fn=16);\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([side*head_r*0.6, -head_r*0.7, head_r*0.2])\n                    sphere(r=head_r*0.2, $fn=16);\n            }\n        }\n    }\n}\n\n// Wings designed to fold against body for printing\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        translate([body_r*0.8, 0, body_h*0.7]) {\n            rotate([0, 0, -20]) {\n                // Main wing\n                linear_extrude(height=2) {\n                    polygon(points=[\n                        [0, 0],\n                        [wing_span*0.4, wing_depth*0.3],\n                        [wing_span*0.8, wing_depth*0.5],\n                        [wing_span, 0],\n                        [wing_span*0.8, -wing_depth*0.3],\n                        [wing_span*0.4, -wing_depth*0.4],\n                        [0, -wing_depth*0.1]\n                    ]);\n                }\n                \n                // Wing tip feather\n                translate([wing_span*0.9, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=wing_depth*0.8, r1=2, r2=0, $fn=8);\n            }\n        }\n    }\n}\n\n// Leg with clawed foot\nmodule leg(side) {\n    translate([side*body_r*0.5, -body_r*0.2, -body_h*0.1]) {\n        union() {\n            // Upper leg\n            cylinder(h=leg_len*0.6, r=2, $fn=16);\n            \n            // Lower leg\n            translate([0, 0, -leg_len*0.6])\n                rotate([side*20, 0, 0])\n                    cylinder(h=leg_len*0.5, r=1.5, $fn=16);\n            \n            // Foot\n            translate([0, -foot_len*0.5, -leg_len*0.6-foot_len*0.2])\n                rotate([90, 0, 0])\n                    cylinder(h=foot_len, r1=2, r2=1, $fn=16);\n            \n            // Toes\n            for(toe = [-1, 0, 1]) {\n                translate([toe*3, -foot_len*0.8, -leg_len*0.6-foot_len*0.2])\n                    rotate([90, 0, toe*20])\n                        cylinder(h=foot_len*0.6, r1=1, r2=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Tail with feathers\nmodule tail() {\n    translate([0, body_r*0.5, -body_h*0.2]) {\n        rotate([45, 0, 0]) {\n            // Tail base\n            cylinder(h=tail_len*0.3, r1=body_r*0.6, r2=body_r*0.3, $fn=32);\n            \n            // Tail feathers\n            for(feather = [0:3]) {\n                rotate([0, 0, (feather-1.5)*15]) {\n                    translate([0, 0, -tail_len*0.2-feather*2])\n                        linear_extrude(height=1.5) {\n                            polygon(points=[\n                                [0, 0],\n                                [tail_len*(0.6-feather*0.1), tail_len*0.3],\n                                [tail_len*(0.8-feather*0.1), 0],\n                                [tail_len*(0.6-feather*0.1), -tail_len*0.3],\n                                [0, 0]\n                            ]);\n                        }\n                }\n            }\n        }\n    }\n}\n\n// Assembly with proper orientation for printing\nrotate([0, 180, 0]) {\n    union() {\n        body();\n        head();\n        tail();\n        \n        // Wings folded against body\n        wing(1);\n        wing(-1);\n        \n        // Legs\n        leg(1);\n        leg(-1);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "oakwhirl",
    "openscad_code": "// Oakwhirl seed - realistic medium complexity\n// Overall size: ~70 mm tip to tip\n\nmodule seed_shell(thickness = 1.5){\n    // Main ellipsoidal body\n    scale([1, 0.7, 0.35])\n        difference(){\n            sphere(d = 30, $fn = 64);\n            translate([0,0,-thickness*2])\n                sphere(d = 30 - thickness*2, $fn = 64);\n        }\n}\n\nmodule wing(){\n    // Single curved wing\n    difference(){\n        // Upper surface\n        hull(){\n            translate([-15, 0, 1])\n                cylinder(h = 0.5, d = 1.5, $fn = 8);\n            translate([-35, 12, 2.5])\n                cylinder(h = 0.5, d = 1.5, $fn = 8);\n            translate([-55, 8, 1.5])\n                cylinder(h = 0.5, d = 1.5, $fn = 8);\n            translate([-70, 0, 0])\n                cylinder(h = 0.5, d = 1.5, $fn = 8);\n        }\n        // Lower surface\n        translate([0,0,-1])\n            hull(){\n                translate([-15, 0, -0.5])\n                    cylinder(h = 0.5, d = 1.5, $fn = 8);\n                translate([-35, 12, 0.5])\n                    cylinder(h = 0.5, d = 1.5, $fn = 8);\n                translate([-55, 8, -0.5])\n                    cylinder(h = 0.5, d = 1.5, $fn = 8);\n                translate([-70, 0, -1])\n                    cylinder(h = 0.5, d = 1.5, $fn = 8);\n            }\n    }\n    // Wing stiffening ribs\n    for(t = [0.25, 0.5, 0.75]){\n        hull(){\n            translate(lerp([-15,0,1], [-70,0,0], t))\n                sphere(d = 0.8, $fn = 8);\n            translate(lerp([-15,0,-0.5], [-70,0,-1], t))\n                sphere(d = 0.8, $fn = 8);\n        }\n    }\n}\n\nmodule stem(){\n    // Small stem stub\n    rotate([0, 100, 0])\n        cylinder(h = 6, d1 = 2.5, d2 = 1.5, $fn = 16);\n}\n\n// Build the complete oakwhirl\nunion(){\n    // Seed body\n    seed_shell();\n\n    // Stem\n    translate([0,0,5])\n        stem();\n\n    // Two wings 180° apart\n    for(a = [0, 180]){\n        rotate([0,0,a])\n            translate([15,0,0])\n                wing();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pearlshade",
    "openscad_code": "// Pearlshade Lamp - Realistic Style\n// A classic pearlshade with gentle curves and proper wall thickness for 3D printing\n\n// Overall parameters\nshade_height = 85;\nbase_diameter = 60;\ntop_diameter = 25;\nwall_thickness = 1.5;\n\n// Create the main shade body\nmodule shade_body() {\n    difference() {\n        // Outer shell - gently curved profile\n        for (i = [0:1:360]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 0]) {\n                    hull() {\n                        // Bottom edge - largest diameter\n                        translate([0, base_diameter/2, 0])\n                            cylinder(h=1, d=1, $fn=8);\n                        \n                        // Mid section - transition point\n                        translate([0, base_diameter/2 * 0.8, shade_height/3])\n                            cylinder(h=1, d=1, $fn=8);\n                        \n                        // Upper section - tapering to top\n                        translate([0, top_diameter/2 + wall_thickness, shade_height])\n                            cylinder(h=1, d=1, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Inner cavity - creates the hollow space\n        translate([0, 0, wall_thickness])\n            for (i = [0:1:360]) {\n                rotate([0, 0, i]) {\n                    translate([0, 0, 0]) {\n                        hull() {\n                            translate([0, base_diameter/2 - wall_thickness, 0])\n                                cylinder(h=1, d=1, $fn=8);\n                            \n                            translate([0, base_diameter/2 * 0.8 - wall_thickness, shade_height/3])\n                                cylinder(h=1, d=1, $fn=8);\n                            \n                            translate([0, top_diameter/2, shade_height - wall_thickness])\n                                cylinder(h=1, d=1, $fn=8);\n                        }\n                    }\n                }\n            }\n    }\n}\n\n// Create the neck fitting for light fixture\nmodule neck_fitting() {\n    // Outer neck\n    cylinder(h=15, d=top_diameter + 6, $fn=32);\n    \n    // Inner hole for fixture\n    translate([0, 0, -1])\n        cylinder(h=17, d=top_diameter, $fn=32);\n}\n\n// Add decorative ring at the bottom\nmodule bottom_ring() {\n    difference() {\n        // Outer ring\n        translate([0, 0, 0]) {\n            cylinder(h=3, d=base_diameter + 4, $fn=64);\n        }\n        \n        // Inner cutout\n        translate([0, 0, -1]) {\n            cylinder(h=5, d=base_diameter, $fn=64);\n        }\n    }\n}\n\n// Add subtle vertical ribs for realistic texture\nmodule vertical_ribs() {\n    for (i = [0:15:359]) {\n        rotate([0, 0, i]) {\n            translate([base_diameter/2 - wall_thickness - 0.5, 0, 0]) {\n                scale([1, 0.2, 1]) {\n                    for (j = [0:1:shade_height-5]) {\n                        translate([0, 0, j]) {\n                            sphere(d=2, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Shade body\n    shade_body();\n    \n    // Neck fitting\n    translate([0, 0, shade_height - 7]) {\n        neck_fitting();\n    }\n    \n    // Bottom ring\n    translate([0, 0, -1]) {\n        bottom_ring();\n    }\n    \n    // Vertical ribs for texture\n    vertical_ribs();\n}\n\n// Add small vent holes for heat dissipation\nmodule vent_holes() {\n    for (i = [0:120:359]) {\n        rotate([0, 0, i]) {\n            translate([top_diameter/2 + 2, 0, shade_height - 10]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=wall_thickness + 1, d=2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Add vents\ndifference() {\n    children();\n    vent_holes();\n}",
    "renders": true
  },
  {
    "household_item": "quicksylv",
    "openscad_code": "// Quicksylv (Quick-release carabiner) – realistic style, medium complexity\n// Overall height ≈ 90 mm, suitable for FDM printing at 0.2 mm layer height\n// All features printable without supports (45° rule respected)\n\n// PARAMETERS – tweak if needed\ngate_clear = 10;          // clearance for gate swing\nbody_thk   = 4;           // wall thickness on body\ngate_thk   = 3.5;         // gate thickness\npin_d      = 3.2;         // hinge pin diameter\nnurl_h     = 0.6;         // knurl depth on gate\nnurl_step  = 2;           // knurl spacing\n$fa = 2; $fs = 1;         // smoother curves\n\n// COLOR (visual aid only, ignored by slicer)\ncolor(\"silver\")\n\ndifference() {\n    union() {\n        // MAIN BODY – classic asymmetric D-shape\n        body();\n\n        // GATE – curved swinging arm\n        gate();\n    }\n\n    // CUT-OUT – inner opening\n    inner_cut();\n}\n\n// MODULES ------------------------------------------------\nmodule body() {\n    // Lower spine\n    translate([0, 0, body_thk/2])\n        difference() {\n            cylinder(h = body_thk, r1 = 22, r2 = 22);\n            cylinder(h = body_thk + 0.1, r1 = 18, r2 = 18);\n        }\n\n    // Upper spine and nose\n    difference() {\n        hull() {\n            translate([-18, 0, body_thk/2])\n                cylinder(h = body_thk, r = 10);\n            translate([18, 0, body_thk/2])\n                cylinder(h = body_thk, r = 12);\n        }\n        // inner taper\n        hull() {\n            translate([-18, 0, -0.1])\n                cylinder(h = body_thk + 0.2, r = 7);\n            translate([18, 0, -0.1])\n                cylinder(h = body_thk + 0.2, r = 9);\n        }\n    }\n\n    // Nose hook – cutout for gate latch\n    translate([28, 0, body_thk/2])\n        rotate([90, 0, 0])\n            cylinder(h = 12, r = 4.5, center = true);\n}\n\nmodule gate() {\n    // Hinge pin\n    translate([-22, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 50, d = pin_d, center = true);\n\n    // Gate arm (curved bar)\n    difference() {\n        rotate_extrude(angle = 75)\n            translate([25, 0])\n                square([gate_thk, 5], center = true);\n        // Taper inside for spring clearance\n        rotate_extrude(angle = 75)\n            translate([22.5, 0])\n                square([gate_thk + 0.5, 5.5], center = true);\n    }\n\n    // Knurled thumb grip\n    for (a = [5: nurl_step: 70])\n        rotate([0, 0, a])\n            translate([0, 25, 0])\n                difference() {\n                    cube([gate_thk + 0.2, nurl_step, gate_thk + 0.2], center = true);\n                    cube([gate_thk - nurl_h, nurl_step + 0.1, gate_thk - nurl_h], center = true);\n                }\n\n    // Spring perch (simple nub)\n    translate([-25, 0, 0])\n        sphere(d = 6);\n}\n\nmodule inner_cut() {\n    // Main opening\n    hull() {\n        translate([-15, 0, body_thk/2])\n            cylinder(h = body_thk + 1, r = 14);\n        translate([15, 0, body_thk/2])\n            cylinder(h = body_thk + 1, r = 16);\n    }\n\n    // Gate cutout\n    rotate([0, 0, 10]) {\n        hull() {\n            translate([22, 0, body_thk/2])\n                cylinder(h = body_thk + 1, r = 5);\n            translate([28, 0, body_thk/2])\n                cylinder(h = body_thk + 1, r = 3);\n        }\n    }\n\n    // Keyhole – small end\n    translate([-20, 0, body_thk/2])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 5, center = true);\n}",
    "renders": true
  },
  {
    "household_item": "rivershade",
    "openscad_code": "// Realistic rivershade (sun-shade) with medium complexity\n// Dimensions: 90mm diameter, 25mm height, printable without support\n\n$fn = 36;  // Smoother curves for realism\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main module\nmodule rivershade() {\n    // Central hub\n    hub();\n    \n    // Six curved arms\n    for (i = [0:60:359]) {\n        rotate([0, 0, i]) \n            arm();\n    }\n    \n    // Top cap for smooth finish\n    difference() {\n        cylinder(h=3, d=18, center=true);\n        translate([0, 0, -2]) \n            cylinder(h=5, d=14, center=true);\n    }\n}\n\n// Central hub with mounting hole\nmodule hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(h=10, d=15, center=true);\n        \n        // Central hole for 1/4-20 bolt\n        translate([0, 0, -6]) \n            cylinder(h=12, d=6.5, center=true);\n            \n        // Counterbore for bolt head\n        translate([0, 0, 6]) \n            cylinder(h=3, d=11, center=true);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, -6]) \n        cylinder(h=3, d=20, center=true);\n}\n\n// Single curved arm\nmodule arm() {\n    // Arm base connection\n    translate([7.5, 0, 0]) \n        cube([8, 9, 6], center=true);\n    \n    // Main arm structure - tapered shape\n    hull() {\n        // Base point\n        translate([11, 0, 0]) \n            sphere(d=7);\n        \n        // Mid point with curve\n        translate([28, 0, 2]) \n            scale([1, 0.7, 1]) \n                sphere(d=6);\n        \n        // Tip point\n        translate([45, 0, 0]) \n            sphere(d=4);\n    }\n    \n    // Top surface curve for aerodynamic flow\n    for (t = [0:5:40]) {\n        translate([11 + t, 0, 0]) \n            rotate([0, 90, 0]) \n                scale([1, 0.3 + t/100, 1]) \n                    cylinder(h=0.5, d=8 - t/7, center=true);\n    }\n    \n    // Reinforcement ribs underneath\n    for (t = [10:10:30]) {\n        translate([t, 0, -3.5]) \n            cube([2, 7, 1], center=true);\n    }\n}\n\n// Assembly\nrivershade();",
    "renders": true
  },
  {
    "household_item": "siltgleam",
    "openscad_code": "// Siltgleam - aquatic bioluminescent fish with realistic medium complexity\n// Overall length ~80mm, height ~35mm, thickness ~20mm\n\n// Parameters\nbody_len = 60;\nbody_width = 20;\ntail_len = 20;\nfin_height = 12;\neye_d = 4;\nscale_thick = 1.5;\n\n// Main body\nmodule body() {\n    union() {\n        // Central torpedo-shaped body\n        hull() {\n            sphere(d = body_width);\n            translate([body_len/2, 0, 0]) sphere(d = body_width*0.7);\n            translate([-body_len/2, 0, 0]) sphere(d = body_width*1.1);\n        }\n        \n        // Dorsal ridge\n        for(i=[-body_len/2+5:5:body_len/2-10]) {\n            translate([i, 0, body_width/2]) \n                scale([1, 0.3, 0.5]) sphere(d = 5);\n        }\n    }\n}\n\n// Tail fin - large crescent\nmodule tail_fin() {\n    translate([-body_len/2 - tail_len/2, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = tail_len, d1 = body_width*1.8, d2 = 0);\n        translate([0, 0, -tail_len/2-1]) cube([tail_len*2, body_width*2, tail_len+2], center=true);\n    }\n}\n\n// Pectoral fins\nmodule pectoral_fin(side) {\n    translate([body_len/4, side*body_width/2, -body_width/4])\n    rotate([0, -20*side, -30])\n    scale([1.5, 0.5, 1])\n    difference() {\n        sphere(d = 10);\n        translate([0, 0, -6]) cube([20, 20, 10], center=true);\n    }\n}\n\n// Bioluminescent spots along sides\nmodule light_spots() {\n    for(i=[-body_len/2+8:6:body_len/2-8]) {\n        translate([i, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 0.5, 1])\n        cylinder(h = 0.5, d = 3, $fn=16);\n    }\n}\n\n// Scales pattern\nmodule scales() {\n    for(i=[-body_len/2+2:4:body_len/2-2]) {\n        for(j=[-body_width/2+2:4:body_width/2-2]) {\n            if((i+j)%2 == 0) {\n                translate([i, j, body_width/2-scale_thick/2])\n                scale([1, 0.8, 0.3])\n                sphere(d = 2.5);\n            }\n        }\n    }\n}\n\n// Eye with socket\nmodule eye(side) {\n    translate([body_len/2-5, side*body_width/3, body_width/4])\n    rotate([0, -30, 0])\n    union() {\n        // Socket\n        sphere(d = eye_d+2);\n        // Eye\n        translate([0, 0, 1])\n        sphere(d = eye_d);\n    }\n}\n\n// Mouth\nmodule mouth() {\n    translate([body_len/2-2, 0, -body_width/4])\n    rotate([90, 0, 0])\n    scale([1.5, 0.8, 1])\n    cylinder(h = 2, d = 4);\n}\n\n// Combine all parts\nunion() {\n    body();\n    tail_fin();\n    pectoral_fin(1);\n    pectoral_fin(-1);\n    light_spots();\n    scales();\n    eye(1);\n    eye(-1);\n    mouth();\n}",
    "renders": true
  },
  {
    "household_item": "thornwhisper",
    "openscad_code": "// Thornwhisper - realistic style, medium complexity\n// A mystical plant-like structure with thorns and whispering tendrils\n\n// Parameters\nbase_radius = 15;\nstem_height = 60;\nthorn_length = 8;\nthorn_diameter = 2;\ntendril_count = 5;\ntendril_length = 25;\npetal_count = 6;\npetal_length = 12;\npetal_width = 6;\n\n// Main stem\nmodule stem() {\n    cylinder(h=stem_height, r1=base_radius, r2=base_radius*0.6, $fn=32);\n}\n\n// Thorn generator - positioned along the stem\nmodule thorns() {\n    for(i = [1:3]) {\n        rotate([0, 0, i*120]) {\n            for(j = [0:3]) {\n                translate([base_radius*0.8, 0, j*15 + 5]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h=thorn_length, r=thorn_diameter/2, $fn=8);\n                            translate([0, 0, 1]) cylinder(h=thorn_length, r=thorn_diameter/4, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Whispering tendrils - curved, vine-like structures\nmodule tendril() {\n    linear_extrude(height=tendril_length, twist=180, scale=0.1) {\n        polygon(points=[[0,0], [2,0], [1,3]]);\n    }\n}\n\n// Array of tendrils around the top\nmodule tendrils() {\n    for(i = [0:tendril_count-1]) {\n        rotate([0, 0, i*(360/tendril_count)]) {\n            translate([base_radius*0.3, 0, stem_height - 5]) {\n                rotate([45, 0, 0]) {\n                    tendril();\n                }\n            }\n        }\n    }\n}\n\n// Petal-like structures at the top\nmodule petal() {\n    scale([petal_width, petal_length, 2]) {\n        sphere(r=1, $fn=16);\n    }\n}\n\n// Flower-like structure\nmodule flower() {\n    for(i = [0:petal_count-1]) {\n        rotate([0, 0, i*(360/petal_count)]) {\n            translate([0, base_radius*0.4, stem_height + 2]) {\n                rotate([30, 0, 0]) {\n                    petal();\n                }\n            }\n        }\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    cylinder(h=5, r=base_radius*1.2, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Main stem\n    translate([0, 0, 5]) {\n        stem();\n    }\n    \n    // Thorns\n    translate([0, 0, 5]) {\n        thorns();\n    }\n    \n    // Tendrils\n    tendrils();\n    \n    // Flower structure\n    flower();\n}",
    "renders": true
  },
  {
    "household_item": "umberwisp",
    "openscad_code": "// Umberwisp - realistic style, medium complexity\n// A shadowy, wispy creature with tendrils and glowing core\n\n// Main parameters\num_w = 45;  // body width\num_h = 60;  // body height\num_d = 40;  // body depth\nwall_t = 2; // wall thickness for 3D printing\nbase_r = 15; // base radius\n\n// Module for tendrils\nmodule tendril(len, angle, twist) {\n    rotate([0, angle, twist])\n        translate([0, len/2, 0])\n            scale([0.3, 1, 0.3])\n                sphere(len/2);\n}\n\n// Module for body segments\nmodule body_segment(r, h, offset) {\n    translate([0, 0, offset])\n        scale([1 - offset/um_h * 0.3, 1, 1])\n            sphere(r);\n}\n\n// Main body - hollow for printing\ndifference() {\n    // Outer body\n    union() {\n        for(i = [0:10:um_h]) {\n            body_segment(um_w/2 * (1 - i/um_h), 5, i);\n        }\n    }\n    \n    // Inner hollow\n    union() {\n        for(i = [wall_t:10:um_h-wall_t]) {\n            body_segment(um_w/2 * (1 - i/um_h) - wall_t, 5, i);\n        }\n    }\n}\n\n// Glowing core sphere\ntranslate([0, 0, um_h/2])\n    difference() {\n        sphere(8);\n        sphere(6);\n    }\n\n// Base platform\ntranslate([0, 0, -5])\n    cylinder(h=5, r1=base_r, r2=base_r+2);\n\n// Tendrils array\nfor(angle = [0:45:315]) {\n    for(twist = [0:30:120]) {\n        // Upper tendrils\n        translate([0, 0, um_h*0.8])\n            tendril(um_h*0.4, angle, twist);\n            \n        // Lower tendrils\n        translate([0, 0, um_h*0.3])\n            tendril(um_h*0.35, angle + 22.5, twist + 15);\n    }\n}\n\n// Floating wisps\nfor(i = [1:3]) {\n    translate([\n        sin(i*120)*15,\n        cos(i*120)*15,\n        um_h*0.6 + i*3\n    ])\n    scale([0.5, 0.5, 1])\n        sphere(3 + i);\n}\n\n// Eye sockets\nfor(side = [-1, 1]) {\n    translate([side*um_w/3, um_d/3, um_h*0.7])\n        rotate([0, 0, 90])\n            difference() {\n                cylinder(h=5, r1=4, r2=3);\n                translate([0, 0, -1])\n                    cylinder(h=7, r1=2.5, r2=1.5);\n            }\n}",
    "renders": true
  },
  {
    "household_item": "verdantling",
    "openscad_code": "// Verdantling - Realistic style, medium complexity\n// A small nature spirit with plant-like features\n\n$fn = 50;  // Smooth curves for printing\nmodule verdantling() {\n    difference() {\n        // Main body - organic pod shape\n        union() {\n            // Central torso with slight taper\n            translate([0, 0, 10])\n                scale([1, 0.8, 1.2])\n                sphere(d = 25);\n            \n            // Lower bulb for stability\n            translate([0, 0, 0])\n                sphere(d = 18);\n        }\n        \n        // Remove bottom for flat base\n        translate([0, 0, -5])\n            cube([50, 50, 10], center = true);\n    }\n    \n    // Head with leafy cap\n    translate([0, 0, 28]) {\n        // Head sphere\n        sphere(d = 20);\n        \n        // Leafy cap - 5 overlapping leaves\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 7, 8])\n            rotate([30, 0, 0])\n            scale([0.8, 1.5, 0.3])\n            sphere(d = 12);\n        }\n    }\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([side * 6, 9, 28])\n            rotate([0, 20 * side, 0])\n            scale([1, 1.2, 0.5])\n            sphere(d = 5);\n    }\n    \n    // Branch arms\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, 20]) {\n            // Upper arm\n            rotate([0, 0, side * -20])\n            rotate([0, 90, 0])\n            cylinder(h = 12, d1 = 6, d2 = 4);\n            \n            // Lower arm\n            translate([side * 10, -2, -2])\n            rotate([0, 0, side * -40])\n            rotate([0, 90, 0])\n            cylinder(h = 10, d1 = 4, d2 = 3);\n            \n            // Three-finger hand\n            translate([side * 18, -4, -4])\n            for(f = [-1, 0, 1]) {\n                rotate([0, 0, f * 30])\n                translate([0, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h = 4, d = 2);\n            }\n        }\n    }\n    \n    // Root legs for stability\n    for(side = [-1, 1]) {\n        translate([side * 7, 0, 0]) {\n            rotate([0, -20, 0])\n            cylinder(h = 15, d1 = 6, d2 = 8);\n            \n            // Root tendrils\n            for(a = [-30, 0, 30]) {\n                translate([0, 0, -15])\n                rotate([0, a, 0])\n                cylinder(h = 8, d1 = 3, d2 = 2);\n            }\n        }\n    }\n    \n    // Back details - small leaves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 12, 15 + i * 3])\n        rotate([45, 0, 0])\n        scale([0.6, 1, 0.2])\n        sphere(d = 8);\n    }\n    \n    // Mouth indentation\n    translate([0, 11, 26])\n        rotate([30, 0, 0])\n        scale([1, 0.7, 0.3])\n        sphere(d = 6);\n}\n\n// Generate the model\nverdantling();",
    "renders": true
  },
  {
    "household_item": "whippoorwill",
    "openscad_code": "// Whippoorwill - Realistic medium complexity\n// Designed for 3D printing (no overhangs, proper thickness)\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule body() {\n    // Main body\n    translate([0, 0, 0])\n    scale([1, 0.7, 0.8])\n    sphere(12);\n    \n    // Chest\n    translate([0, 8, -4])\n    scale([0.6, 0.6, 0.4])\n    sphere(8);\n}\n\nmodule head() {\n    // Main head\n    translate([-8, 0, 2])\n    scale([1.2, 0.9, 0.9])\n    sphere(9);\n    \n    // Beak\n    translate([-16, 0, 1])\n    rotate([0, -10, 0])\n    scale([2, 0.3, 0.3])\n    cylinder(h=8, r1=1, r2=0);\n    \n    // Eyes\n    for(x = [-1, 1]) {\n        translate([-10, x*3, 3])\n        color(\"black\")\n        sphere(1.5);\n    }\n}\n\nmodule tail() {\n    // Tail feathers\n    for(i = [0:2]) {\n        rotate([0, 0, i*10 - 10])\n        translate([-12 - i*2, 0, -2 - i*1])\n        scale([0.3, 0.1, 1])\n        cube([8, 15, 1]);\n    }\n}\n\nmodule wing() {\n    // Wing shape\n    rotate([0, 0, -20])\n    translate([0, 0, 8])\n    scale([1, 0.8, 0.2])\n    sphere(10);\n    \n    // Wing feathers\n    for(i = [0:4]) {\n        translate([2 - i*2, -8, 8])\n        rotate([0, 0, -i*5])\n        scale([0.3, 0.05, 1.5])\n        cube([8, 10, 1]);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([2, -5, -8])\n    cylinder(h=8, r=1);\n    translate([2, -5, -15])\n    sphere(1.5);\n    \n    // Right leg\n    translate([2, 5, -8])\n    cylinder(h=8, r=1);\n    translate([2, 5, -15])\n    sphere(1.5);\n    \n    // Toes\n    for(side = [-1, 1]) {\n        for(toe = [-1, 0, 1]) {\n            rotate([0, 0, toe*30])\n            translate([2 + side*0, side*6, -15])\n            scale([1, 0.3, 0.3])\n            cube([4, 1, 1]);\n        }\n    }\n}\n\nmodule plumage() {\n    // Head stripes\n    for(i = [0:2]) {\n        translate([-10, 0, 4 - i*2])\n        rotate([0, 90, 0])\n        scale([0.1, 0.8, 0.1])\n        cylinder(h=6, r=0.5);\n    }\n    \n    // Wing patterns\n    for(i = [0:3]) {\n        translate([0, -6 + i*3, 8.5])\n        scale([0.4, 0.4, 0.1])\n        sphere(3);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Left wing\n    translate([0, 6, 0])\n    wing();\n    \n    // Right wing\n    mirror([0, 1, 0])\n    translate([0, 6, 0])\n    wing();\n    \n    legs();\n    plumage();\n}\n\n// Add support base for 3D printing\ntranslate([0, 0, -16])\ncylinder(h=2, r=6);",
    "renders": true
  },
  {
    "household_item": "xerowhirl",
    "openscad_code": "// Xerowhirl - Realistic style, medium complexity\n// A spinning toy with internal mechanism visible through windows\n\n// Parameters\n$fn = 32;\nbody_d = 60;\nbody_h = 40;\nwindow_h = 15;\nwindow_w = 20;\naxle_d = 6;\nbearing_d = 12;\nbearing_h = 8;\nweight_r = 8;\nweight_h = 5;\nwall_t = 2;\n\n// Main body with windows\nmodule body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=body_h, d=body_d, center=true);\n        \n        // Create windows - three equally spaced\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n            translate([body_d/2 - wall_t, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=window_h, d=window_w, center=true);\n        }\n        \n        // Hollow out center\n        cylinder(h=body_h+2, d=body_d-wall_t*2, center=true);\n    }\n}\n\n// Central axle system\nmodule axle() {\n    // Main axle\n    cylinder(h=body_h+10, d=axle_d, center=true);\n    \n    // Top cap\n    translate([0, 0, body_h/2+5])\n    cylinder(h=5, d=axle_d+4);\n    \n    // Bottom cap\n    translate([0, 0, -body_h/2-5])\n    cylinder(h=5, d=axle_d+4);\n}\n\n// Bearing assembly\nmodule bearing() {\n    difference() {\n        // Outer ring\n        cylinder(h=bearing_h, d=bearing_d, center=true);\n        \n        // Inner hole\n        cylinder(h=bearing_h+2, d=axle_d+1, center=true);\n    }\n}\n\n// Counterweight system\nmodule counterweight() {\n    // Three weights spaced evenly\n    for(i=[0:2]) {\n        rotate([0, 0, i*120 + 30])  // Offset for balance\n        translate([body_d/2 - wall_t - weight_r, 0, 0])\n        cylinder(h=weight_h, d=weight_r*2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    color(\"silver\", 0.7)\n    body();\n    \n    // Axle through center\n    color(\"darkgray\")\n    axle();\n    \n    // Bearings at top and bottom\n    translate([0, 0, body_h/3])\n    color(\"gold\")\n    bearing();\n    \n    translate([0, 0, -body_h/3])\n    color(\"gold\")\n    bearing();\n    \n    // Counterweights visible through windows\n    color(\"red\")\n    counterweight();\n}",
    "renders": true
  },
  {
    "household_item": "yearnling",
    "openscad_code": "// Yearnling – realistic style, medium complexity\n// All dimensions are in millimetres; model height ≈ 70 mm, fully printable\n\n$fn = 36;            // Smooth curved surfaces\n\n// ===== CONFIGURATION =====\nbody_h   = 35;\nbody_r   = 18;\nhead_r   = 14;\neye_r    = 3.5;\near_len  = 12;\near_wid  = 6;\nleg_len  = 20;\nleg_r    = 6;\narm_len  = 18;\narm_r    = 4;\nhand_r   = 5.5;\ntail_len = 25;\ntail_r   = 4;\n\nwall = 2;            // Minimum printable wall thickness\n\n// ===== MAIN ASSEMBLY =====\nunion() {\n    body();\n    head();\n    left_ear();\n    right_ear();\n    left_arm();\n    right_arm();\n    left_leg();\n    right_leg();\n    tail();\n}\n\n// ===== MODULES =====\nmodule body() {\n    // Tapered torso\n    translate([0, 0, body_h/2])\n        cylinder(h = body_h, r1 = body_r, r2 = body_r*0.8, center = true);\n}\n\nmodule head() {\n    translate([0, 0, body_h + head_r - 5])\n        sphere(r = head_r);\n    eyes();\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-head_r/2.2, head_r*0.6, body_h + head_r*0.8])\n        sphere(r = eye_r);\n    // Right eye\n    translate([ head_r/2.2, head_r*0.6, body_h + head_r*0.8])\n        sphere(r = eye_r);\n    // Eye pupils (tiny indent for realism)\n    difference() {\n        translate([-head_r/2.2, head_r*0.6 + eye_r/2, body_h + head_r*0.8])\n            sphere(r = eye_r);\n        translate([-head_r/2.2, head_r*0.6 + eye_r/2 + 0.5, body_h + head_r*0.8 + 0.5])\n            sphere(r = eye_r*0.6);\n    }\n    difference() {\n        translate([ head_r/2.2, head_r*0.6 + eye_r/2, body_h + head_r*0.8])\n            sphere(r = eye_r);\n        translate([ head_r/2.2, head_r*0.6 + eye_r/2 + 0.5, body_h + head_r*0.8 + 0.5])\n            sphere(r = eye_r*0.6);\n    }\n}\n\nmodule left_ear() {\n    translate([-head_r*0.8, head_r*0.3, body_h + head_r*1.4])\n        rotate([0, -25, -30])\n        cylinder(h = ear_len, r1 = ear_wid/2, r2 = ear_wid/3, center = true);\n}\n\nmodule right_ear() {\n    mirror([1, 0, 0]) left_ear();\n}\n\nmodule left_arm() {\n    translate([-body_r*1.2, 0, body_h - 8])\n        rotate([90, 0, -20])\n        cylinder(h = arm_len, r = arm_r, center = true);\n    translate([-body_r*1.2, 0, body_h - 8 - arm_len/2])\n        sphere(r = hand_r);\n}\n\nmodule right_arm() {\n    mirror([1, 0, 0]) left_arm();\n}\n\nmodule left_leg() {\n    translate([-body_r/2.5, 0, -body_h/2 - leg_len/2])\n        cylinder(h = leg_len, r = leg_r, center = true);\n    foot(-body_r/2.5);\n}\n\nmodule right_leg() {\n    translate([body_r/2.5, 0, -body_h/2 - leg_len/2])\n        cylinder(h = leg_len, r = leg_r, center = true);\n    foot(body_r/2.5);\n}\n\nmodule foot(x) {\n    // Simple rounded foot\n    translate([x, 0, -body_h/2 - leg_len])\n        hull() {\n            translate([0, 0, 0])\n                sphere(r = leg_r);\n            translate([0, 0, -leg_r])\n                cube([leg_r*2.2, leg_r*1.8, leg_r], center = true);\n        }\n}\n\nmodule tail() {\n    // Curved tail using hull of spheres for smoothness\n    for(i = [0: 3]) {\n        translate([0,\n                   -body_r - tail_r - i*tail_len/4,\n                   -body_h/2 + i*tail_len/5])\n            sphere(r = tail_r - i*0.5);\n    }\n    // Connect spheres\n    hull() {\n        translate([0, -body_r - tail_r, -body_h/2])\n            sphere(r = tail_r);\n        translate([0, -body_r - tail_r - tail_len, -body_h/2 + tail_len*0.8])\n            sphere(r = tail_r - 1.5);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "zephyrgleam",
    "openscad_code": "// Zephyrgleam – compact wind-harp sound collector\n// Overall printable envelope ≈ 80 mm tall, 70 mm wide\n// All overhangs ≤ 45°, walls ≥ 1.2 mm\n\n$fn=32;\n\n// Main body parameters\nbase_h = 12;            // pedestal\nbody_h = 45;            // bell-shaped resonator\nflare_r = 30;           // flare mouth radius\nwall   = 1.5;           // uniform wall thickness\n\nmodule zephyrgleam(){\n    // Pedestal – hollow cylinder with light chamfer\n    difference(){\n        cylinder(h=base_h, r1=flare_r-3, r2=flare_r-2, center=false);\n        translate([0,0,-0.01])\n            cylinder(h=base_h+0.02, r1=flare_r-3-wall, r2=flare_r-2-wall, center=false);\n    }\n\n    // Resonator bell – revolved profile for smooth curve\n    translate([0,0,base_h])\n    rotate_extrude()\n        difference(){\n            polygon([[0,0], [flare_r,0], [flare_r-3,body_h], [wall,body_h], [wall,0]]);\n            // hollow interior\n            offset(r=-wall)\n                polygon([[0,0], [flare_r,0], [flare_r-3,body_h], [wall,body_h], [wall,0]]);\n        }\n\n    // Eight tuning vanes (thin vertical ribs) inside flare\n    for(i=[0:7]){\n        rotate([0,0,i*45])\n        translate([flare_r-1.5-wall/2, 0, base_h+wall])\n        rotate([90,0,0])\n        linear_extrude(height=body_h-wall*2, center=false)\n            square([wall, 3], center=true);\n    }\n\n    // Sound port – horizontal slit near top\n    translate([0,0,base_h+body_h-5])\n        rotate([0,90,0])\n        difference(){\n            cylinder(h=wall*2, r=wall+2, center=true);\n            cylinder(h=wall*2+0.2, r=2, center=true);\n        }\n\n    // Stabilising foot ring (prints flat, adds grip)\n    translate([0,0,-0.5])\n        difference(){\n            cylinder(h=2, r=flare_r+2, center=false);\n            cylinder(h=2.2, r=flare_r+2-wall, center=false);\n        }\n\n    // Four radial support ribs under flare for printing strength\n    for(i=[0:90:270]){\n        rotate([0,0,i])\n        translate([0,flare_r-2,-0.1])\n        cube([wall, 4, base_h+0.2], center=false);\n    }\n}\n\nzephyrgleam();",
    "renders": true
  },
  {
    "household_item": "amberwhirl",
    "openscad_code": "// Realistic Amberwhirl – medium complexity\n// All dimensions in mm\n// No overhangs > 45°, 1.2 mm wall thickness, 50 mm tall overall\n\n// Parameters --------------------------------------------------------------\n$fn = 48;               // Smooth curves\nwall = 1.2;             // 3D-print friendly wall\nh_total = 50;           // Overall height\nr_top = 15;             // Top dome radius\nr_mid = 18;             // Mid bulge radius\nr_base = 12;            // Base radius\nh_dome = 12;            // Height of top dome\nh_mid  = 28;            // Height of mid swirl body\nh_base = h_total - h_dome - h_mid;\n\n// Modules -----------------------------------------------------------------\nmodule dome() {\n    difference() {\n        sphere(r = r_top);\n        translate([0,0,-r_top + h_dome])\n            cube([r_top*2, r_top*2, r_top], center=true);\n    }\n}\n\nmodule swirl_body() {\n    // Twisted stack of tapered cylinders\n    slices = 16;\n    for (i = [0 : slices-1]) {\n        h_slice = h_mid / slices;\n        z = h_base + i * h_slice;\n        twist = 35 * sin(i * 360 / slices);        // gentle swirl\n        r_in  = r_mid - 1.5 * sin(i * 180 / slices); // variable radius\n        r_out = r_in + wall;\n        translate([0,0,z])\n            rotate([0,0,twist])\n                cylinder(h1 = h_slice, h2 = h_slice,\n                         r1 = r_out, r2 = r_out + 0.3);\n    }\n}\n\nmodule hollow_mid() {\n    // Remove core for hollow print\n    slices = 16;\n    for (i = [0 : slices-1]) {\n        h_slice = h_mid / slices;\n        z = h_base + i * h_slice + wall;\n        twist = 35 * sin(i * 360 / slices);\n        r_in  = r_mid - 1.5 * sin(i * 180 / slices) - wall;\n        translate([0,0,z])\n            rotate([0,0,twist])\n                cylinder(h = h_slice + 0.1, r = r_in);\n    }\n}\n\nmodule base() {\n    difference() {\n        cylinder(h = h_base, r1 = r_base + wall, r2 = r_mid + wall);\n        cylinder(h = h_base + 0.1, r1 = r_base, r2 = r_mid);\n    }\n}\n\nmodule key_pin() {\n    // Functional 2 mm key pin for rotation axle\n    translate([0,0,-1])\n        cylinder(h = h_base + 2, r = 2);\n}\n\n// Assembly ----------------------------------------------------------------\nunion() {\n    base();\n    swirl_body();\n    difference() {\n        union() {\n            translate([0,0,h_base + h_mid]) dome();\n        }\n        hollow_mid();\n    }\n    key_pin();\n}",
    "renders": true
  },
  {
    "household_item": "briarshade",
    "openscad_code": "// Briarshade (realistic style, medium complexity)\n// Overall height ~75 mm, base Ø80 mm, optimized for FDM printing\n\n// Parameters\nshade_h = 75;           // total height of shade\nbase_r = 40;            // base radius\nwall_t = 1.6;           // wall thickness (3 perimeters @0.4mm nozzle)\nfin_w = 2.0;            // vertical fin thickness\nfin_n = 12;             // number of cooling fins\nvent_h = 8;             // height of vent ring band\nvent_gap = 3.5;         // slot width for airflow\nbulb_clear = 26;        // clearance for E26/E27 bulb\nwire_r = 7;             // wire exit hole radius\n\n// Base ring\nmodule base_ring() {\n    difference() {\n        cylinder(h = 8, r1 = base_r, r2 = base_r + 3, center = false);\n        translate([0, 0, -1])\n            cylinder(h = 10, r1 = base_r - wall_t, r2 = base_r + 3 - wall_t, center = false);\n    }\n}\n\n// Vent band with horizontal slots\nmodule vent_band() {\n    difference() {\n        cylinder(h = vent_h, r1 = base_r + 3, r2 = base_r + 2, center = false);\n        // cut inner cone\n        translate([0, 0, -1])\n            cylinder(h = vent_h + 2, r1 = base_r + 3 - wall_t, r2 = base_r + 2 - wall_t, center = false);\n        // horizontal slots for airflow\n        for (a = [0:30:359])\n            rotate([0, 0, a])\n                translate([base_r + 3, 0, -1])\n                    cube([vent_gap, 2, vent_h + 2], center = true);\n    }\n}\n\n// Vertical cooling fins\nmodule cooling_fins() {\n    for (i = [0:fin_n-1])\n        rotate([0, 0, i * 360 / fin_n])\n            translate([base_r + 3 - fin_w / 2, 0, 8])\n                cube([fin_w, base_r - 5, shade_h - 8 - 5], center = false);\n}\n\n// Main truncated cone shade\nmodule shade_cone() {\n    difference() {\n        cylinder(h = shade_h - 8, r1 = base_r + 3, r2 = 14, center = false);\n        translate([0, 0, -1])\n            cylinder(h = shade_h - 6, r1 = base_r + 3 - wall_t, r2 = 14 + wall_t, center = false);\n    }\n}\n\n// Top ring for bulb clearance\nmodule top_clearance() {\n    difference() {\n        cylinder(h = 5, r1 = 14, r2 = 14, center = false);\n        cylinder(h = 7, r1 = bulb_clear / 2, r2 = bulb_clear / 2, center = false);\n    }\n}\n\n// Wire exit slot on side\nmodule wire_exit() {\n    translate([base_r - 8, 0, 4])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r = wire_r, center = true);\n}\n\n// Assembly\nunion() {\n    base_ring();\n    translate([0, 0, 8]) vent_band();\n    cooling_fins();\n    translate([0, 0, 8]) shade_cone();\n    translate([0, 0, shade_h - 5]) top_clearance();\n    wire_exit();\n}",
    "renders": true
  },
  {
    "household_item": "cinderwhisper",
    "openscad_code": "// Cinderwhisper - Medium Complexity Realistic Style\n// A small, ember-winged dragon-like creature curled around a smoldering core\n\n$fn=32;\n\n// Overall dimensions\noverall_scale = 1;\nbody_diameter = 30 * overall_scale;\nbody_length = 60 * overall_scale;\nwing_span = 45 * overall_scale;\ncore_diameter = 12 * overall_scale;\n\n// Main body - curled serpentine form\nmodule main_body() {\n    // Central torso\n    translate([0, 0, body_diameter/2])\n    rotate([0, 0, 0])\n    scale([1.2, 1, 1])\n    sphere(d=body_diameter);\n    \n    // Tail curl\n    for(i=[0:30:330]) {\n        translate([sin(i)*body_length/2.5, cos(i)*body_length/2.5, body_diameter/2 - i/20])\n        rotate([0, 0, i])\n        scale([1 - i/600, 1 - i/600, 1])\n        sphere(d=body_diameter * 0.8);\n    }\n    \n    // Neck extension\n    translate([0, body_length/1.8, body_diameter/1.5])\n    rotate([15, 0, 0])\n    scale([0.8, 0.8, 1.2])\n    sphere(d=body_diameter * 0.7);\n}\n\n// Head with ember eyes\nmodule head() {\n    // Skull structure\n    translate([0, body_length/1.5, body_diameter * 1.2])\n    rotate([30, 0, 0])\n    scale([0.7, 0.9, 1.1])\n    sphere(d=body_diameter * 0.6);\n    \n    // Snout\n    translate([0, body_length/1.5 + body_diameter * 0.5, body_diameter * 1.15])\n    rotate([45, 0, 0])\n    scale([0.4, 0.8, 0.5])\n    sphere(d=body_diameter * 0.4);\n    \n    // Ember eyes - glowing cores\n    translate([-body_diameter * 0.15, body_length/1.5 + body_diameter * 0.3, body_diameter * 1.3])\n    sphere(d=body_diameter * 0.12);\n    \n    translate([body_diameter * 0.15, body_length/1.5 + body_diameter * 0.3, body_diameter * 1.3])\n    sphere(d=body_diameter * 0.12);\n}\n\n// Ember wings - tattered flame-like structures\nmodule wings() {\n    // Left wing\n    translate([-body_diameter * 0.5, body_length/4, body_diameter * 0.8])\n    rotate([0, -30, -20])\n    scale([1.5, 0.2, 1])\n    sphere(d=wing_span/2);\n    \n    // Wing tears for realism\n    difference() {\n        translate([-body_diameter * 0.5, body_length/4, body_diameter * 0.8])\n        rotate([0, -30, -20])\n        scale([1.5, 0.2, 1])\n        sphere(d=wing_span/2);\n        \n        for(i=[-2:1:2]) {\n            translate([-body_diameter * 0.5 + i*5, body_length/4 - 5, body_diameter * 0.8 + i*2])\n            rotate([0, 0, i*20])\n            cube([8, 2, body_diameter], center=true);\n        }\n    }\n    \n    // Right wing\n    translate([body_diameter * 0.5, body_length/4, body_diameter * 0.8])\n    rotate([0, -30, 20])\n    scale([1.5, 0.2, 1])\n    sphere(d=wing_span/2);\n    \n    // Wing tears for realism\n    difference() {\n        translate([body_diameter * 0.5, body_length/4, body_diameter * 0.8])\n        rotate([0, -30, 20])\n        scale([1.5, 0.2, 1])\n        sphere(d=wing_span/2);\n        \n        for(i=[-2:1:2]) {\n            translate([body_diameter * 0.5 + i*5, body_length/4 - 5, body_diameter * 0.8 + i*2])\n            rotate([0, 0, i*20])\n            cube([8, 2, body_diameter], center=true);\n        }\n    }\n}\n\n// Smoldering core - the heart of the cinderwhisper\nmodule smoldering_core() {\n    // Core sphere\n    translate([0, body_length/4, body_diameter/2])\n    sphere(d=core_diameter);\n    \n    // Emission vents\n    for(i=[0:45:315]) {\n        translate([sin(i)*core_diameter/1.5, body_length/4 + cos(i)*core_diameter/1.5, body_diameter/2])\n        cylinder(h=core_diameter/3, d1=core_diameter/4, d2=core_diameter/8);\n    }\n}\n\n// Legs and claws\nmodule legs() {\n    // Front legs\n    for(side=[-1, 1]) {\n        translate([side * body_diameter/2, body_length/3, body_diameter/3])\n        rotate([0, 20 * side, 0])\n        cylinder(h=body_diameter/2, d=body_diameter/6);\n        \n        // Claws\n        for(claw=[-1, 0, 1]) {\n            translate([side * (body_diameter/2 + claw*3), body_length/3 + body_diameter/4, body_diameter/3 - 3])\n            rotate([90, 0, 0])\n            cylinder(h=5, d1=3, d2=1);\n        }\n    }\n    \n    // Rear legs\n    for(side=[-1, 1]) {\n        translate([side * body_diameter/2, -body_length/3, body_diameter/3])\n        rotate([0, -20 * side, 0])\n        cylinder(h=body_diameter/2, d=body_diameter/6);\n        \n        // Claws\n        for(claw=[-1, 0, 1]) {\n            translate([side * (body_diameter/2 + claw*3), -body_length/3 + body_diameter/4, body_diameter/3 - 3])\n            rotate([90, 0, 0])\n            cylinder(h=5, d1=3, d2=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    head();\n    wings();\n    smoldering_core();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "driftgleam",
    "openscad_code": "// Driftgleam (realistic style, medium complexity)\n// A portable, wind-powered lantern carried by desert wanderers\n\n// Overall dimensions\nbody_d = 40;\nbody_h = 50;\nblade_l = 30;\nblade_w = 8;\nblade_t = 2;\nhub_d = 10;\n\n// Wall thickness for 3D printing\nwall = 1.6;\n\n// Central lantern body\nmodule lantern_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = body_h, d = body_d, $fn = 48);\n        // Hollow interior\n        translate([0,0,wall])\n            cylinder(h = body_h - 2*wall, d = body_d - 2*wall, $fn = 48);\n    }\n    // Bottom plate\n    translate([0,0,-wall/2])\n        cylinder(h = wall, d = body_d, $fn = 48);\n    // Top plate with hole for airflow\n    translate([0,0,body_h-wall/2])\n        cylinder(h = wall, d = body_d, $fn = 48);\n    translate([0,0,body_h-wall])\n        cylinder(h = wall+1, d = body_d/3, $fn = 32);\n}\n\n// Generator hub on top\nmodule generator_hub() {\n    difference() {\n        cylinder(h = hub_d, d = hub_d, $fn = 32);\n        translate([0,0,wall])\n            cylinder(h = hub_d, d = hub_d - 2*wall, $fn = 32);\n    }\n    // Driving shaft to blades\n    translate([0,0,hub_d])\n        cylinder(h = 5, d = 4, $fn = 16);\n}\n\n// Wind-catching blades (6 curved paddles)\nmodule turbine_blades() {\n    for (i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([hub_d/2 + blade_l/2, 0, hub_d/2])\n        rotate([90, 0, 0])\n        difference() {\n            // Curved blade shape\n            linear_extrude(height = blade_t, convexity = 10)\n                polygon(points = [\n                    [0, 0],\n                    [blade_l*0.3, blade_w/2],\n                    [blade_l*0.7, blade_w/2],\n                    [blade_l, 0],\n                    [blade_l*0.7, -blade_w/2],\n                    [blade_l*0.3, -blade_w/2]\n                ]);\n            // Lightening cutouts\n            scale([0.7, 0.7, 1])\n                translate([blade_l/2, 0, 0])\n                    cube([blade_l, blade_w, blade_t+1], center = true);\n        }\n    }\n}\n\n// Side ventilation louvers (air scoops)\nmodule air_scoops() {\n    // Four scoops around body\n    for (ang = [0:90:270]) {\n        rotate([0, 0, ang])\n        translate([body_d/2 - wall, 0, body_h/4])\n        rotate([0, 90, 0])\n        difference() {\n            // Inlet scoop\n            cube([body_h/2, body_h/4, wall*2]);\n            // Taper inside\n            translate([0, 0, wall])\n                cube([body_h/2 - wall, body_h/4 - wall, wall*2]);\n            // Cutaway top\n            translate([0, body_h/4-0.1, -1])\n                cube([body_h/2, body_h/4, wall*4]);\n        }\n    }\n}\n\n// Carry handle\nmodule carry_handle() {\n    // Arc handle\n    rotate([0, 90, 0])\n    translate([0, 0, body_d/2 + 5])\n    difference() {\n        // Outer\n        rotate_extrude(angle = 180, $fn = 32)\n            translate([body_d/2 + 8, 0, 0])\n                circle(r = 4, $fn = 16);\n        // Inner\n        rotate_extrude(angle = 180, $fn = 32)\n            translate([body_d/2 + 8, 0, 0])\n                circle(r = 4 - wall, $fn = 16);\n    }\n    // Attachment lugs\n    for (y = [body_d/2 - 4, -body_d/2 + 4]) {\n        translate([0, y, body_d/2 + 5])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 8, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    lantern_body();\n    air_scoops();\n    translate([0, 0, body_h])\n        generator_hub();\n    translate([0, 0, body_h + hub_d + 5])\n        turbine_blades();\n    carry_handle();\n}",
    "renders": true
  },
  {
    "household_item": "emberwhirl",
    "openscad_code": "// EmberWhirl - Realistic medium-complexity 3D printable model\n// Overall dimensions: ~70 mm diameter\n\n// Parameters\n$fn = 48;\nblade_thick = 1.6;\nhub_r = 6;\nhub_h = 12;\nshaft_r = 3.5;\nshaft_h = 15;\nblade_l = 26;\nblade_w = 8;\ncore_r = 4;\ncore_h = 10;\n\n// Main assembly\nmodule emberwhirl() {\n    union() {\n        // Central hub\n        cylinder(r = hub_r, h = hub_h, center = true);\n\n        // Shaft extension\n        translate([0, 0, -hub_h/2 - shaft_h/2])\n            cylinder(r = shaft_r, h = shaft_h, $fn = 32);\n\n        // Core ember chamber\n        translate([0, 0, -core_h/2])\n            cylinder(r = core_r, h = core_h);\n\n        // Ember blades (4 curved vanes)\n        for (i = [0:90:359])\n            rotate([0, 0, i])\n                translate([hub_r + blade_l/2 - 2, 0, 0])\n                    rotate([0, 90, 0])\n                        blade();\n\n        // Heat vents on hub\n        for (j = [0:60:359])\n            rotate([0, 0, j])\n                translate([hub_r - 1.5, 0, 0])\n                    cylinder(r = 1.2, h = hub_h, center = true);\n\n        // Rear cooling ring\n        translate([0, 0, hub_h/2 + 1])\n            difference() {\n                cylinder(r = hub_r + 3, h = 3, $fn = 64);\n                cylinder(r = hub_r + 1, h = 3.2, $fn = 64);\n            }\n    }\n}\n\n// Single blade module\nmodule blade() {\n    difference() {\n        // Main blade body\n        hull() {\n            translate([-blade_l/2, -blade_w/2, 0])\n                sphere(r = blade_thick);\n            translate([blade_l/2, blade_w/2, 0])\n                sphere(r = blade_thick);\n            translate([0, 0, 2])\n                sphere(r = blade_thick);\n        }\n\n        // Ember cavity\n        translate([-blade_l/2 + 4, 0, -0.5])\n            cube([blade_l - 4, blade_w - 2, 3], center = true);\n\n        // Lightening cutouts\n        for (k = [0:6:18])\n            translate([k - blade_l/2 + 8, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(r = 1.5, h = blade_w - 3, center = true);\n    }\n}\n\n// Render\nemberwhirl();",
    "renders": true
  },
  {
    "household_item": "frostwhisper",
    "openscad_code": "// Frostwhisper - realistic style, medium complexity\n// A crystalline staff with ice formations and runic details\n\n// Overall dimensions (mm)\nstaff_length = 90;\nstaff_diameter = 4;\n\n// Main staff shaft\nmodule staff_shaft() {\n    cylinder(h=staff_length, d=staff_diameter, $fn=32);\n}\n\n// Ice crystal formations\nmodule ice_crystal(pos, size) {\n    translate(pos) {\n        // Central crystal\n        scale([1, 1, 1.5]) sphere(d=size, $fn=6);\n        \n        // Crystal facets\n        for (i=[0:60:300]) {\n            rotate([0, 0, i]) {\n                translate([size/3, 0, 0])\n                scale([0.3, 0.1, 1.2]) sphere(d=size, $fn=4);\n            }\n        }\n    }\n}\n\n// Runic engravings\nmodule rune_mark(pos, angle) {\n    translate(pos) {\n        rotate([0, 0, angle]) {\n            // Main rune lines\n            cube([2, 0.5, 0.5], center=true);\n            rotate([0, 0, 90]) cube([2, 0.5, 0.5], center=true);\n            \n            // Diagonal accents\n            rotate([0, 0, 45]) cube([1.5, 0.4, 0.5], center=true);\n            rotate([0, 0, -45]) cube([1.5, 0.4, 0.5], center=true);\n        }\n    }\n}\n\n// Frost formations on shaft\nmodule frost_layer(height) {\n    difference() {\n        cylinder(h=height, d=staff_diameter + 2, $fn=32);\n        cylinder(h=height + 0.1, d=staff_diameter + 0.1, $fn=32);\n    }\n    \n    // Frost bumps\n    for (i=[0:10:height-10]) {\n        translate([0, 0, i]) {\n            for (j=[0:30:330]) {\n                rotate([0, 0, j]) {\n                    translate([(staff_diameter + 1)/2, 0, 0])\n                    sphere(d=1.2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Staff head with ice formations\nmodule staff_head() {\n    // Main crystal cluster\n    ice_crystal([0, 0, staff_length + 5], 8);\n    \n    // Smaller crystals around\n    for (i=[0:45:315]) {\n        rotate([0, 0, i]) {\n            ice_crystal([6*cos(i), 6*sin(i), staff_length + 3], 4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shaft\n    staff_shaft();\n    \n    // Frost layer around shaft\n    translate([0, 0, 10]) frost_layer(60);\n    \n    // Runic engravings\n    for (i=[0:15:75]) {\n        rune_mark([0, staff_diameter/2 + 0.3, 25 + i], i*2);\n    }\n    \n    // Staff head\n    staff_head();\n    \n    // Base crystal\n    ice_crystal([0, 0, 0], 5);\n    \n    // Support ring for 3D printing\n    cylinder(h=2, d=staff_diameter + 6, $fn=32);\n}",
    "renders": true
  },
  {
    "household_item": "glimmershade",
    "openscad_code": "// Glimmershade - Realistic style, medium complexity\n// A decorative shade for small LED tea lights with intricate patterns\n\n// Overall dimensions\nshade_height = 75;\nshade_diameter = 60;\nwall_thickness = 2.5;\nbase_height = 8;\n\n// Pattern parameters\npattern_rows = 6;\npattern_cols = 8;\npattern_width = 3;\npattern_height = 12;\n\n// Create the main shade body\nmodule shade_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=shade_height, d=shade_diameter, $fn=100);\n        \n        // Inner hollow space\n        translate([0, 0, -0.1])\n            cylinder(h=shade_height+0.2, d=shade_diameter-wall_thickness*2, $fn=100);\n        \n        // Top opening for light\n        translate([0, 0, shade_height-wall_thickness])\n            cylinder(h=wall_thickness+0.2, d=shade_diameter-wall_thickness*4, $fn=100);\n    }\n}\n\n// Create decorative patterns on the shade\nmodule patterns() {\n    for (i = [0:pattern_rows-1]) {\n        for (j = [0:pattern_cols-1]) {\n            rotate([0, 0, j * (360/pattern_cols)])\n            translate([shade_diameter/2 - wall_thickness, 0, i * (shade_height/pattern_rows) + base_height])\n            rotate([90, 0, 0])\n            scale([1, 1.2, 1])\n            cylinder(h=pattern_height, d1=pattern_width, d2=pattern_width*0.6, $fn=6);\n        }\n    }\n}\n\n// Create base with ventilation holes\nmodule base() {\n    difference() {\n        // Solid base\n        cylinder(h=base_height, d=shade_diameter, $fn=100);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h=base_height+0.2, d=shade_diameter-wall_thickness*2, $fn=100);\n        \n        // Ventilation holes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([shade_diameter/2 - wall_thickness*2, 0, base_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness*3, d=wall_thickness*2, $fn=20);\n        }\n    }\n}\n\n// Create small feet for stability\nmodule feet() {\n    foot_height = 1.5;\n    foot_diameter = 5;\n    \n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([shade_diameter/2 - foot_diameter - 5, 0, -foot_height])\n        cylinder(h=foot_height, d=foot_diameter, $fn=20);\n    }\n}\n\n// Create inner ledge for LED placement\nmodule ledge() {\n    translate([0, 0, base_height])\n    difference() {\n        cylinder(h=wall_thickness, d=shade_diameter-wall_thickness*4, $fn=100);\n        cylinder(h=wall_thickness+0.2, d=shade_diameter-wall_thickness*6, $fn=100);\n    }\n}\n\n// Assemble the complete glimmershade\nunion() {\n    // Main components\n    shade_body();\n    base();\n    ledge();\n    \n    // Decorative elements\n    patterns();\n    \n    // Support elements\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "hollowgleam",
    "openscad_code": "// Hollowgleam - Realistic Medium Complexity\n// A magical lamp with hollow core and glowing chamber\n\n$fn = 48;  // Smooth curves for realism\n\n// Overall dimensions\nbase_d = 60;\nheight = 85;\nwall_thickness = 2;\n\n// Main module\nmodule hollowgleam() {\n    // Base platform\n    difference() {\n        cylinder(h=8, d1=base_d*1.1, d2=base_d);\n        translate([0, 0, -1])\n            cylinder(h=10, d1=base_d*1.1-4, d2=base_d-4);\n    }\n    \n    // Stem with hollow channel\n    translate([0, 0, 8]) {\n        difference() {\n            cylinder(h=30, d1=base_d*0.5, d2=base_d*0.4);\n            translate([0, 0, -1])\n                cylinder(h=32, d1=base_d*0.5-4, d2=base_d*0.4-4);\n        }\n    }\n    \n    // Bulb chamber - hollow sphere\n    translate([0, 0, 38]) {\n        difference() {\n            sphere(d=base_d*0.9);\n            sphere(d=base_d*0.9-wall_thickness*2);\n        }\n    }\n    \n    // Decorative rings around chamber\n    for(i = [0:1:2]) {\n        translate([0, 0, 38 + (i-1)*15])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=base_d*0.95, center=true);\n    }\n    \n    // Top spout for light emission\n    translate([0, 0, 38 + base_d*0.45]) {\n        difference() {\n            cylinder(h=15, d1=base_d*0.3, d2=base_d*0.2);\n            cylinder(h=17, d1=base_d*0.3-4, d2=base_d*0.2-4);\n        }\n    }\n    \n    // Support legs\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([base_d*0.35, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d1=6, d2=4);\n    }\n    \n    // Ventilation holes in base\n    for(angle = [0:60:359]) {\n        rotate([0, 0, angle])\n            translate([base_d*0.3, 0, 4])\n                rotate([0, 90, 0])\n                    cylinder(h=wall_thickness*3, d=wall_thickness*2, center=true);\n    }\n    \n    // Internal light diffuser grid\n    translate([0, 0, 38]) {\n        difference() {\n            intersection() {\n                sphere(d=base_d*0.85);\n                cube([base_d*0.6, base_d*0.6, base_d*0.6], center=true);\n            }\n            sphere(d=base_d*0.85-wall_thickness);\n        }\n    }\n}\n\n// Render the model\nhollowgleam();",
    "renders": true
  },
  {
    "household_item": "icewhirl",
    "openscad_code": "// IceWhirl - Realistic style, medium complexity\n// A swirling ice formation with crystalline structures and base\n// Overall size ~80mm height x 60mm diameter\n\nmodule ice_crystal() {\n    // Individual hexagonal crystal structure\n    difference() {\n        // Main crystal body\n        cylinder(h = 8, r1 = 3, r2 = 1.5, $fn = 6);\n        \n        // Hollow center for material savings\n        translate([0, 0, 1])\n            cylinder(h = 6, r1 = 1.5, r2 = 0.8, $fn = 6);\n    }\n}\n\nmodule crystal_cluster(height, radius, count) {\n    // Generate a spiral cluster of crystals\n    for (i = [0:count-1]) {\n        angle = i * 137.5;  // Golden angle for natural distribution\n        r = radius * sqrt(i/count);\n        h = height * (i/count);\n        \n        translate([\n            r * cos(angle),\n            r * sin(angle),\n            h\n        ]) {\n            rotate([0, 0, angle])\n            rotate([30, 0, 0])\n            scale([0.8 + 0.4 * sin(i*2), 0.8 + 0.4 * cos(i*3), 1])\n            ice_crystal();\n        }\n    }\n}\n\nmodule swirl_base() {\n    // Solid base with gentle swirl pattern\n    difference() {\n        // Main swirl shape\n        union() {\n            // Base cylinder\n            cylinder(h = 15, r = 30, $fn = 64);\n            \n            // Raised swirl ridges\n            for (i = [0:5]) {\n                rotate([0, 0, i * 60])\n                translate([20, 0, 7.5])\n                rotate([90, 0, 0])\n                scale([1, 0.3, 1])\n                cylinder(h = 15, r1 = 8, r2 = 0, $fn = 8);\n            }\n        }\n        \n        // Central hollow for printability\n        cylinder(h = 16, r = 8, $fn = 32);\n        \n        // Bottom chamfer\n        translate([0, 0, -1])\n        cylinder(h = 2, r1 = 30, r2 = 28, $fn = 64);\n    }\n}\n\nmodule central_spire() {\n    // Twisting central ice spire\n    union() {\n        // Main spire\n        for (h = [0:5:50]) {\n            rotate([0, 0, h * 3])\n            translate([0, 0, h])\n            scale([1 - h/100, 1 - h/100, 1])\n            cylinder(h = 5, r1 = 6 - h/10, r2 = 5 - h/10, $fn = 8);\n        }\n        \n        // Horizontal ridges for support\n        for (h = [10:10:50]) {\n            translate([0, 0, h])\n            rotate([0, 0, h * 3])\n            scale([1 - h/100, 1 - h/100, 1])\n            cylinder(h = 2, r1 = 7 - h/10, r2 = 7 - h/10, $fn = 16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    swirl_base();\n    \n    // Central spire\n    translate([0, 0, 15])\n    central_spire();\n    \n    // Crystal clusters at different heights\n    translate([0, 0, 15])\n    crystal_cluster(20, 20, 12);\n    \n    translate([0, 0, 30])\n    crystal_cluster(15, 15, 10);\n    \n    translate([0, 0, 45])\n    crystal_cluster(10, 10, 8);\n    \n    // Top crystal\n    translate([0, 0, 65])\n    rotate([0, 0, 45])\n    scale([1.5, 1.5, 2])\n    ice_crystal();\n}",
    "renders": true
  },
  {
    "household_item": "jadegleam",
    "openscad_code": "// Jadegleam - realistic medium-complexity replica\n// Overall dimensions: 80 mm tall, 45 mm wide, 35 mm deep\n\n// Global parameters\n$fn = 48;\nwall = 2;\nbase_r = 22;\nneck_r = 8;\nhead_r = 18;\ncut_depth = 5;\n\n// Main body module\nmodule jadegleam() {\n    // Base bulb\n    difference() {\n        sphere(r = base_r);\n        translate([0, 0, -base_r - 1])\n            cube([base_r * 2, base_r * 2, base_r * 2], center = true);\n    }\n\n    // Neck tube\n    translate([0, 0, base_r - wall]) {\n        difference() {\n            cylinder(h = 20, r1 = neck_r + wall, r2 = neck_r + wall);\n            cylinder(h = 20, r1 = neck_r, r2 = neck_r);\n        }\n    }\n\n    // Head bulb\n    translate([0, 0, base_r + 20 - wall]) {\n        difference() {\n            sphere(r = head_r);\n            translate([0, 0, -head_r - 1])\n                cube([head_r * 2, head_r * 2, head_r * 2], center = true);\n        }\n    }\n\n    // Facet cuts for gemstone look\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, base_r - 10])\n                rotate([30, 0, 0])\n                    difference() {\n                        sphere(r = base_r + 2);\n                        translate([0, 0, -base_r - cut_depth])\n                            cube([base_r * 2, base_r * 2, base_r * 2], center = true);\n                    }\n    }\n\n    // Hexagonal collar\n    translate([0, 0, base_r + 16]) {\n        difference() {\n            cylinder(h = 8, r1 = neck_r + wall + 2, r2 = neck_r + wall + 4, $fn = 6);\n            cylinder(h = 8, r1 = neck_r + 2, r2 = neck_r + 4, $fn = 6);\n        }\n    }\n\n    // Gemstone insets around base\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([base_r - 3, 0, 3])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r1 = 4, r2 = 2);\n    }\n\n    // Internal LED cavity\n    translate([0, 0, base_r - 10]) {\n        difference() {\n            cylinder(h = 30, r = neck_r - 1);\n            translate([0, 0, 30])\n                sphere(r = neck_r - 1);\n        }\n    }\n\n    // Ventilation slots\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60 + 30])\n            translate([neck_r + wall + 1, 0, base_r + 10])\n                cube([2, 6, 8], center = true);\n    }\n}\n\n// Print orientation helper\nrotate([0, 180, 0]) jadegleam();",
    "renders": true
  },
  {
    "household_item": "kindlewhirl",
    "openscad_code": "// Kindlewhirl - Realistic style, medium complexity\n// A handheld rotating fidget toy with cylindrical body and spinning ring\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters\nbody_d = 22;\nbody_h = 35;\nring_d = 32;\nring_h = 8;\ngap = 1.2;  // Clearance for spinning\naxle_d = 4;\nbutton_d = 6;\nbutton_h = 3;\n\n// Central cylindrical body\nmodule body() {\n    difference() {\n        // Main body cylinder\n        cylinder(h=body_h, d=body_d, center=true);\n        \n        // Hollow center for finger\n        translate([0, 0, -body_h/2-1])\n            cylinder(h=body_h+2, d=body_d-10, center=false);\n            \n        // Top and bottom chamfers\n        translate([0, 0, body_h/2-2])\n            cylinder(h=4, d1=body_d-4, d2=body_d, center=true);\n        translate([0, 0, -body_h/2+2])\n            cylinder(h=4, d1=body_d, d2=body_d-4, center=true);\n    }\n}\n\n// Spinning outer ring with finger grips\nmodule ring() {\n    difference() {\n        union() {\n            // Main ring\n            cylinder(h=ring_h, d=ring_d, center=true);\n            \n            // Finger grip ridges\n            for(i=[0:11]) {\n                rotate([0, 0, i*30])\n                    translate([ring_d/2-2, 0, 0])\n                        cube([4, 2, ring_h], center=true);\n            }\n        }\n        \n        // Inner hole for body clearance\n        cylinder(h=ring_h+2, d=body_d+gap*2, center=true);\n    }\n}\n\n// Button caps for top and bottom\nmodule button() {\n    difference() {\n        cylinder(h=button_h, d=button_d, center=true);\n        translate([0, 0, button_h/2-0.5])\n            sphere(d=button_d-1);\n    }\n}\n\n// Axle pin to hold ring in place\nmodule axle() {\n    cylinder(h=body_h+6, d=axle_d, center=true);\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Bottom button\n    translate([0, 0, -body_h/2-button_h/2])\n        button();\n    \n    // Main body\n    body();\n    \n    // Axle through center\n    axle();\n    \n    // Spinning ring\n    ring();\n    \n    // Top button\n    translate([0, 0, body_h/2+button_h/2])\n        button();\n}",
    "renders": true
  },
  {
    "household_item": "lunarwhirl",
    "openscad_code": "// LunarWhirl – realistic, medium-complexity, 3D-printable\n// Overall size ~70 mm Ø x 25 mm thick\n\n$fn = 64;          // decent curves without excess facets\nwall = 1.6;        // safe 0.4 mm nozzle friendly wall thickness\n\nmodule base_disc() {\n    // central base plate with rounded bottom for printability\n    difference() {\n        cylinder(h = 4, r = 35, center = true);\n        translate([0,0,2-wall]) cylinder(h = 4, r = 35-wall, center = true);\n    }\n}\n\nmodule engine_cluster() {\n    // 5 small rocket bells clustered under the base\n    module bell() {\n        rotate([180,0,0]) {\n            difference() {\n                cylinder(h = 8, r1 = 4, r2 = 2);\n                translate([0,0,-wall]) cylinder(h = 9, r1 = 4-wall, r2 = 2-wall);\n            }\n        }\n    }\n    for(i=[0:4]) {\n        a = i*360/5;\n        translate([cos(a)*15, sin(a)*15, -5]) bell();\n    }\n}\n\nmodule fuel_tanks() {\n    // four cylindrical tanks around the rim\n    module tank() {\n        difference() {\n            cylinder(h = 20, r = 5);\n            translate([0,0,wall]) cylinder(h = 20, r = 5-wall);\n        }\n    }\n    for(i=[0:3]) {\n        a = i*90;\n        translate([cos(a)*28, sin(a)*28, 6]) rotate([90,0,0]) tank();\n    }\n}\n\nmodule solar_panels() {\n    // two rectangular panels hinged at sides, printed flat\n    module panel() {\n        difference() {\n            cube([25, 15, 1]);\n            translate([wall,wall,0]) cube([25-2*wall,15-2*wall,2]);\n        }\n    }\n    // left panel\n    translate([-25-12.5,0,11]) panel();\n    // right panel\n    translate([12.5,0,11]) panel();\n}\n\nmodule comm_dish() {\n    // parabolic dish on top with slight offset to avoid overhang\n    difference() {\n        sphere(r = 10);\n        translate([0,0,-8]) sphere(r = 9.2);\n    }\n    // feed horn\n    cylinder(h = 5, r = 1);\n}\n\nmodule main_structure() {\n    union() {\n        base_disc();\n        engine_cluster();\n        fuel_tanks();\n        solar_panels();\n        translate([0,0,17]) comm_dish();\n    }\n}\n\nmain_structure();",
    "renders": true
  },
  {
    "household_item": "mossgleam",
    "openscad_code": "// Mossgleam - realistic style, medium complexity\n// A bioluminescent moss colony with crystalline light emitters\n\n$fn = 32; // Smooth curves\nwall = 1.2; // 3D printable wall thickness\n\nmodule moss_base() {\n    // Main moss body - organic rounded mound\n    difference() {\n        scale([1, 0.8, 0.5]) \n            sphere(d = 60);\n        \n        // Hollow for printability\n        translate([0, 0, -2])\n            scale([0.9, 0.7, 0.4]) \n                sphere(d = 60);\n    }\n}\n\nmodule moss_texture() {\n    // Surface texture - small bumps for moss\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([\n            25 * cos(i * 20), \n            20 * sin(i * 20), \n            0\n        ])\n        scale([0.8, 1, 0.5])\n            sphere(d = 5 + (i % 3));\n    }\n}\n\nmodule crystal_emitter() {\n    // Crystalline light emitter\n    union() {\n        // Base stem\n        cylinder(h = 8, d1 = 4, d2 = 6);\n        \n        // Crystal facets\n        translate([0, 0, 8])\n            cylinder(h = 12, d1 = 6, d2 = 2);\n        \n        // Light cap\n        translate([0, 0, 20])\n            sphere(d = 3);\n    }\n}\n\nmodule emitters_array() {\n    // Array of emitters across moss surface\n    for(i = [0:12]) {\n        angle = i * 30;\n        radius = 15 + (i % 3) * 5;\n        \n        translate([\n            radius * cos(angle),\n            radius * sin(angle) * 0.8,\n            15 + (i % 4) * 2\n        ]) {\n            rotate([90, 0, angle])\n                crystal_emitter();\n        }\n    }\n    \n    // Central larger emitter\n    translate([0, 0, 20])\n        scale([1.5, 1.5, 1.5])\n            crystal_emitter();\n}\n\nmodule root_system() {\n    // Base roots for stability\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([20, 0, -8])\n        rotate([90, 0, 30])\n            cylinder(h = 15, d1 = 6, d2 = 3);\n    }\n}\n\nmodule mossgleam() {\n    union() {\n        // Main body\n        moss_base();\n        \n        // Surface texture\n        translate([0, 0, 15])\n            moss_texture();\n        \n        // Light emitters\n        emitters_array();\n        \n        // Root system\n        root_system();\n        \n        // Print base\n        translate([0, 0, -10])\n            cylinder(h = 2, d = 65);\n    }\n}\n\n// Render the complete model\nmossgleam();",
    "renders": true
  },
  {
    "household_item": "nimbuswhirl",
    "openscad_code": "// NimbusWhirl - Realistic medium-complexity weather vane\n// Overall height ~90 mm, widest point ~80 mm\n// All parts printable without supports\n\n$fn = 36;  // Smooth curves\n\n// Main parameters\nbase_d = 60;\nbase_h = 8;\npost_h = 40;\npost_r = 3;\nvane_w = 60;\nvane_t = 4;\ncup_r = 9;\ncup_h = 12;\n\nmodule base() {\n    // Heavy circular base for stability\n    difference() {\n        cylinder(h = base_h, d = base_d);\n        translate([0,0,-1])\n            cylinder(h = base_h+2, d = base_d-20);\n    }\n    \n    // Four mounting holes\n    for(a=[0:90:270])\n        rotate([0,0,a])\n            translate([base_d/2-7,0,-1])\n                cylinder(h = base_h+2, d = 3.2);\n}\n\nmodule post() {\n    // Tapered vertical post\n    translate([0,0,base_h])\n        cylinder(h = post_h, r1 = post_r+0.5, r2 = post_r);\n}\n\nmodule bearing() {\n    // Ball bearing housing for smooth rotation\n    translate([0,0,base_h+post_h])\n    difference() {\n        cylinder(h = 8, d = 16);\n        cylinder(h = 10, d = 8);\n    }\n}\n\nmodule vane_assembly() {\n    // Central hub\n    translate([0,0,base_h+post_h+8])\n    difference() {\n        cylinder(h = 10, d = 12);\n        cylinder(h = 12, d = 6);\n    }\n    \n    // Directional arrow\n    translate([0,0,base_h+post_h+13])\n    rotate([90,0,0])\n    difference() {\n        // Arrow body\n        translate([0,0,vane_w/2-10])\n            cube([vane_t, 20, vane_w], center=true);\n        \n        // Arrow head\n        translate([0,0,vane_w-5])\n            rotate([0,0,45])\n                cube([vane_t, 14, 14], center=true);\n        \n        // Tail fins\n        translate([0,0,-vane_w/2+12])\n            cube([vane_t, 16, 24], center=true);\n    }\n    \n    // N-S letters\n    translate([0,0,base_h+post_h+18])\n    rotate([90,0,0])\n    translate([0,vane_t/2+0.5,0]) {\n        translate([0,0,vane_w-15])\n            rotate([0,90,0])\n            linear_extrude(height=1.5)\n                text(\"N\", size=6, halign=\"center\");\n        \n        translate([0,0,-vane_w+15])\n            rotate([0,90,180])\n            linear_extrude(height=1.5)\n                text(\"S\", size=6, halign=\"center\");\n    }\n}\n\nmodule cups() {\n    // Three anemometer cups at 120° spacing\n    for(a=[0:120:240])\n        rotate([0,0,a])\n            translate([30,0,base_h+post_h+8+5])\n            rotate([0,90,0])\n            difference() {\n                // Cup\n                cylinder(h = cup_h, r = cup_r);\n                \n                // Hollow inside\n                translate([0,0,2])\n                    cylinder(h = cup_h, r = cup_r-2);\n                \n                // Drain hole\n                translate([0,0,cup_h-2])\n                    cylinder(h = 2, r = 2);\n            }\n}\n\nmodule arms() {\n    // Three support arms for cups\n    for(a=[0:120:240])\n        rotate([0,0,a])\n            translate([15,0,base_h+post_h+8+5+cup_h/2])\n                rotate([90,0,0])\n                    cylinder(h = 30, r = 2);\n}\n\n// Assembly\nunion() {\n    base();\n    post();\n    bearing();\n    vane_assembly();\n    \n    translate([0,0,base_h+post_h+8+5+cup_h/2])\n        cylinder(h = 10, d = 6);  // Central hub\n    \n    arms();\n    cups();\n}",
    "renders": true
  },
  {
    "household_item": "oakgleam",
    "openscad_code": "// Oakgleam - Realistic Style, Medium Complexity\n// A detailed acorn-shaped object with oak leaf patterns\n\n$fn = 50;  // Smooth curves\n\n// Acorn body with realistic cap texture\nmodule acorn_body() {\n    difference() {\n        // Main acorn shape - ellipsoid\n        scale([1, 1, 1.3])\n        sphere(d=40);\n        \n        // Create realistic stem indentation\n        translate([0, 0, 25])\n        rotate([0, 0, 0])\n        cylinder(h=10, d1=8, d2=4, $fn=20);\n    }\n}\n\n// Oak cap with detailed scales\nmodule acorn_cap() {\n    union() {\n        // Main cap structure\n        difference() {\n            cylinder(h=12, d1=42, d2=38, $fn=50);\n            translate([0, 0, -1])\n            cylinder(h=14, d1=38, d2=34, $fn=50);\n        }\n        \n        // Scales on cap - arranged in rings\n        for (ring = [1:3]) {\n            for (i = [0:12]) {\n                rotate([0, 0, i * 30])\n                translate([0, 17 - ring * 2, 12 - ring * 3])\n                scale([1, 0.6, 0.3])\n                rotate([90, 0, 0])\n                cylinder(h=4, d1=3, d2=1, $fn=6);\n            }\n        }\n    }\n}\n\n// Oak leaf detail on side\nmodule oak_leaf() {\n    // Leaf base\n    translate([-20, -8, 10])\n    rotate([0, 90, -30])\n    scale([0.8, 1, 0.1])\n    difference() {\n        union() {\n            // Main leaf shape\n            scale([1, 2, 1])\n            sphere(d=20);\n            // Stem extension\n            translate([0, 10, 0])\n            cylinder(h=8, d1=4, d2=2);\n        }\n        \n        // Leaf lobes - creating characteristic oak shape\n        for (i = [1:3]) {\n            translate([-5 + i * 3, 5 + i * 2, 0])\n            rotate([0, 0, 45 - i * 15])\n            scale([0.7, 1.2, 1])\n            cube([6, 8, 2], center=true);\n        }\n        \n        for (i = [1:3]) {\n            translate([5 - i * 3, 5 + i * 2, 0])\n            rotate([0, 0, -45 + i * 15])\n            scale([0.7, 1.2, 1])\n            cube([6, 8, 2], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Acorn body\n    color(\"SaddleBrown\")\n    acorn_body();\n    \n    // Acorn cap\n    translate([0, 0, 26])\n    color(\"DarkGoldenrod\")\n    acorn_cap();\n    \n    // Decorative oak leaf\n    oak_leaf();\n    \n    // Small stem\n    color(\"DarkOliveGreen\")\n    translate([0, 0, 38])\n    cylinder(h=8, d1=3, d2=2);\n}\n\n// Ensure printability - flat base\ntranslate([0, 0, -2])\ncube([60, 60, 2], center=true);",
    "renders": true
  },
  {
    "household_item": "pearlwhirl",
    "openscad_code": "// PearlWhirl – Realistic style, medium complexity\n// 3D-printable, ~70 mm tall, no overhangs > 45°\n\n// Parameters\n$fa = 1; $fs = 0.4;\nshell_t = 1.6;      // wall thickness (mm)\nbase_h  = 10;       // base height\ncollar_h = 6;       // collar height\nsphere_d = 56;      // outer sphere diameter\nnacre_layers = 5;   // visible nacre rings\n\n// Main model\nmodule pearlwhirl() {\n    difference() {\n        union() {               // outer shell + base\n            // Hollow sphere (bottom half)\n            difference() {\n                sphere(d = sphere_d);\n                translate([0, 0, -shell_t])\n                    sphere(d = sphere_d - 2*shell_t);\n            }\n            // Cylindrical base\n            translate([0, 0, -base_h/2])\n                cylinder(h = base_h, d = sphere_d*0.9, $fn = 60);\n        }\n\n        // Remove top hemisphere to create cup\n        translate([0, 0, shell_t/2])\n            cube([sphere_d+2, sphere_d+2, sphere_d], center = true);\n    }\n\n    // Collar rim\n    translate([0, 0, 1])\n        cylinder(h = collar_h, d1 = sphere_d*0.92, d2 = sphere_d*0.98, $fn = 60);\n\n    // Nacre rings on inside\n    for (i = [1 : nacre_layers]) {\n        r = (sphere_d/2 - shell_t*1.5) * (1 - 0.15*i);\n        h = 1.2;\n        translate([0, 0, -r + i*h*1.3])\n            sphere(d = r*2, $fn = 60);\n    }\n\n    // Spiral groove (decorative)\n    module spiral(depth, turns, h_step) {\n        for (t = [0 : 5 : turns*360]) {\n            rotate([0, 0, t])\n                translate([sphere_d/2 - shell_t - depth/2, 0, -base_h + t*h_step/90])\n                    rotate([90, 0, 0])\n                        cylinder(h = depth*1.5, d = depth, $fn = 8);\n        }\n    }\n    spiral(depth = 1.2, turns = 3, h_step = 20);\n\n    // Drain hole\n    translate([0, 0, -base_h + 1])\n        cylinder(h = base_h, d = 3.2, $fn = 20);\n}\n\npearlwhirl();",
    "renders": true
  },
  {
    "household_item": "quartzwhirl",
    "openscad_code": "// QuartzWhirl - Realistic Style, Medium Complexity\n// A 3D printable model of a quartz crystal formation with spiral energy vortex\n\n// Main parameters\ncrystal_height = 60;\nbase_diameter = 40;\nwall_thickness = 2;\n\n// Crystal points module\nmodule crystal_point(height, radius, segments=6) {\n    difference() {\n        cylinder(h=height, r1=radius, r2=0.1, $fn=segments);\n        translate([0, 0, height*0.3])\n            cylinder(h=height*0.7, r1=radius*1.2, r2=0.1, $fn=segments);\n    }\n}\n\n// Spiral vortex module\nmodule spiral_vortex(turns=3, radius=8, height=45) {\n    for (i = [0:5:360*turns]) {\n        rotate([0, 0, i])\n        translate([radius * sin(i*5), radius * cos(i*5), i/8])\n        sphere(r=1.2, $fn=8);\n    }\n}\n\n// Base platform\nmodule base_platform() {\n    difference() {\n        cylinder(h=8, r=base_diameter/2, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=10, r=base_diameter/2 - wall_thickness, $fn=64);\n    }\n}\n\n// Main crystal cluster\nmodule crystal_cluster() {\n    // Center crystal\n    translate([0, 0, 8])\n        crystal_point(crystal_height, 12);\n    \n    // Side crystals\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle])\n        translate([15, 0, 8])\n            rotate([0, 0, -15])\n            crystal_point(crystal_height*0.7, 8);\n    }\n    \n    // Smaller accent crystals\n    for (angle = [30:60:330]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 8])\n            rotate([0, 0, 25])\n            crystal_point(crystal_height*0.4, 5);\n    }\n}\n\n// Energy rings\nmodule energy_rings() {\n    for (height = [15:10:50]) {\n        translate([0, 0, height])\n        rotate([0, 0, height*2])\n        difference() {\n            cylinder(h=1, r=25 - height/3, $fn=32);\n            cylinder(h=1.2, r=25 - height/3 - wall_thickness, $fn=32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_platform();\n    crystal_cluster();\n    energy_rings();\n    translate([0, 0, 10])\n        spiral_vortex();\n}",
    "renders": true
  },
  {
    "household_item": "rimegleam",
    "openscad_code": "// Rimegleam - realistic style with medium complexity\n// Crystalline frost formation with internal light guide\n\n$fn = 36;\n\n// Main parameters\ncrystal_size = 60;\nbase_height = 8;\nwall_thickness = 1.5;\nfacet_count = 6;\n\n// Crystal formation module\nmodule crystal_formation() {\n    difference() {\n        // Main crystal body\n        union() {\n            // Central hexagonal prism\n            cylinder(h=crystal_size * 0.7, \n                    r=crystal_size/3, \n                    $fn=facet_count);\n            \n            // Top pyramid\n            translate([0, 0, crystal_size * 0.7])\n                cylinder(h1=crystal_size * 0.3, \n                        h2=0, \n                        r1=crystal_size/3, \n                        r2=0, \n                        $fn=facet_count);\n            \n            // Side branches\n            for(i = [0:facet_count-1]) {\n                rotate([0, 0, i * 360/facet_count])\n                    translate([crystal_size/3, 0, crystal_size * 0.35])\n                        rotate([0, 30 + i*10, 0])\n                            cylinder(h=crystal_size * 0.4, \n                                    r=crystal_size/8, \n                                    $fn=6);\n            }\n        }\n        \n        // Hollow center for light guide\n        translate([0, 0, -1])\n            cylinder(h=crystal_size + 2, \n                    r=crystal_size/3 - wall_thickness, \n                    $fn=facet_count);\n    }\n}\n\n// Frost detail module\nmodule frost_details() {\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n            translate([random(8, crystal_size/2.5), 0, random(5, crystal_size * 0.8)])\n                scale([random(0.3, 1), random(0.3, 1), 0.5])\n                    rotate([random(-30, 30), random(-30, 30), 0])\n                        cube([random(2, 6), random(2, 6), random(0.5, 2)], center=true);\n    }\n}\n\n// Light guide module\nmodule light_guide() {\n    // Base connector\n    translate([0, 0, -base_height])\n        cylinder(h=base_height, \n                r=crystal_size/4, \n                $fn=facet_count);\n    \n    // Internal light pipe\n    translate([0, 0, -base_height])\n        cylinder(h=crystal_size + base_height, \n                r1=crystal_size/6, \n                r2=crystal_size/12, \n                $fn=facet_count);\n}\n\n// Base module\nmodule base() {\n    difference() {\n        cylinder(h=base_height, \n                r=crystal_size/2.2, \n                $fn=facet_count * 2);\n        \n        // Battery cavity\n        translate([0, 0, -1])\n            cylinder(h=base_height + 2, \n                    r=crystal_size/3, \n                    $fn=facet_count * 2);\n        \n        // Wire channel\n        translate([crystal_size/4, 0, -1])\n            cube([crystal_size/2, 4, base_height + 2], center=true);\n    }\n}\n\n// Utility function for random values\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Light guide\n    light_guide();\n    \n    // Crystal structure\n    crystal_formation();\n    \n    // Frost details\n    frost_details();\n}",
    "renders": true
  },
  {
    "household_item": "sablewhirl",
    "openscad_code": "// Sablewhirl - Medium complexity, realistic style\n// Overall dimensions: ~80mm diameter\n\n$fn = 36;  // Smooth curves for printability\n\n// Main body parameters\nbody_radius = 35;\nbody_height = 25;\nhandle_length = 60;\nhandle_radius = 4;\nblade_width = 12;\nblade_thickness = 2;\n\n// Central hub\nmodule hub() {\n    // Main disk\n    cylinder(h=body_height, r=body_radius, center=true);\n    \n    // Top cap for strength\n    translate([0, 0, body_height/2 + 1])\n        cylinder(h=2, r=body_radius - 2, center=true);\n    \n    // Bottom cap\n    translate([0, 0, -body_height/2 - 1])\n        cylinder(h=2, r=body_radius - 2, center=true);\n}\n\n// Handle grip\nmodule handle() {\n    // Main shaft\n    rotate([90, 0, 0])\n        cylinder(h=handle_length, r=handle_radius, center=true);\n    \n    // Grip rings for better hold\n    for(i = [-20:10:20]) {\n        translate([0, 0, i])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=handle_radius + 1, center=true);\n    }\n}\n\n// Blade assembly\nmodule blade() {\n    // Single blade\n    difference() {\n        // Main blade shape\n        translate([body_radius - blade_width/2, 0, 0])\n            cube([blade_width, blade_thickness, body_height - 4], center=true);\n        \n        // Taper the blade tip\n        translate([body_radius + blade_width/2, 0, 0])\n            rotate([0, 0, 45])\n                cube([blade_width*2, blade_thickness*3, body_height], center=true);\n    }\n}\n\n// Blade mount reinforcement\nmodule blade_mount() {\n    // Reinforcement ring\n    difference() {\n        cylinder(h=body_height + 4, r=body_radius - 6, center=true);\n        cylinder(h=body_height + 6, r=body_radius - 10, center=true);\n    }\n}\n\n// Generate 6 blades around hub\nmodule blades() {\n    for(i = [0:60:300]) {\n        rotate([0, 0, i]) {\n            blade();\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Central hub\n    hub();\n    \n    // Blade mounting structure\n    blade_mount();\n    \n    // Blades\n    blades();\n    \n    // Handle\n    translate([0, 0, body_height/2 + handle_length/2])\n        handle();\n}",
    "renders": true
  },
  {
    "household_item": "thistlegleam",
    "openscad_code": "// Thistlegleam - Realistic Style, Medium Complexity\n// A Scottish thistle surmounted by a small glowing orb\n\n// Overall dimensions\n$fn = 32; // Smooth curves\nscale_factor = 0.8; // Scale entire model\nbase_size = 80 * scale_factor;\nstem_height = 70 * scale_factor;\nflower_height = 15 * scale_factor;\nglowball_d = 8 * scale_factor;\n\nmodule thistlegleam() {\n    union() {\n        // Base rock\n        translate([0, 0, -5 * scale_factor]) {\n            difference() {\n                scale([1.2, 1.2, 0.6]) sphere(d = base_size);\n                translate([0, 0, -base_size/2]) cube(base_size * 2, center = true);\n            }\n        }\n        \n        // Stem\n        translate([0, 0, 0]) {\n            cylinder(h = stem_height, d1 = 6 * scale_factor, d2 = 4 * scale_factor);\n        }\n        \n        // Leaves\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([0, 12 * scale_factor, stem_height * 0.3]) {\n                    rotate([0, 30, 0]) {\n                        scale([1, 0.3, 1]) {\n                            difference() {\n                                sphere(d = 25 * scale_factor);\n                                translate([0, 0, -25 * scale_factor]) cube(50 * scale_factor, center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Flower head\n        translate([0, 0, stem_height]) {\n            // Central bulb\n            sphere(d = 12 * scale_factor);\n            \n            // Spiky florets\n            for(angle = [0:15:359]) {\n                rotate([0, 0, angle]) {\n                    translate([0, 5 * scale_factor, 0]) {\n                        rotate([0, 70, 0]) {\n                            cylinder(h = 8 * scale_factor, d1 = 2 * scale_factor, d2 = 1 * scale_factor);\n                        }\n                    }\n                }\n            }\n            \n            // Bracts\n            for(angle = [0:30:359]) {\n                rotate([0, 0, angle]) {\n                    translate([0, 8 * scale_factor, 3 * scale_factor]) {\n                        rotate([0, 45, 0]) {\n                            scale([0.3, 0.8, 0.1]) sphere(d = 15 * scale_factor);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Glow ball\n        translate([0, 0, stem_height + flower_height + glowball_d/2]) {\n            sphere(d = glowball_d);\n            \n            // Glow effect rings\n            for(i = [1:3]) {\n                translate([0, 0, -i * 0.5 * scale_factor]) {\n                    scale([1 + i * 0.1, 1 + i * 0.1, 0.3]) {\n                        sphere(d = glowball_d * 1.1);\n                    }\n                }\n            }\n        }\n        \n        // Support structure for 3D printing\n        translate([0, -15 * scale_factor, stem_height/2]) {\n            cube([5 * scale_factor, 30 * scale_factor, stem_height], center = true);\n        }\n    }\n}\n\n// Render the model\nthistlegleam();",
    "renders": true
  },
  {
    "household_item": "umbralwhirl",
    "openscad_code": "// UmbralWhirl - Realistic Medium Complexity\n// A swirling vortex of shadow with tendrils, designed for 3D printing\n\n$fn = 36;\nwall_thickness = 2;\n\nmodule base_disk(radius, thickness) {\n    // Solid base disk with chamfered edges\n    union() {\n        cylinder(h = thickness, r = radius);\n        cylinder(h = thickness/2, r = radius * 0.9);\n        translate([0, 0, thickness/2]) {\n            cylinder(h = thickness/2, r1 = radius * 0.9, r2 = radius);\n        }\n    }\n}\n\nmodule vortex_core(height, base_radius) {\n    // Twisting vortex core with hollow center\n    difference() {\n        // Outer twisted cone\n        for(i = [0:5:360]) {\n            rotate([0, 0, i])\n            translate([0, 0, height * i/360])\n            rotate([0, 0, i * 3])\n            scale([1 - i/720, 1 - i/720, 1])\n            cylinder(h = height/20, r1 = base_radius * (1 - i/360), r2 = base_radius * (1 - (i+5)/360));\n        }\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cylinder(h = height + 2, r = base_radius * 0.3);\n    }\n}\n\nmodule shadow_tendril(length, width, curve_angle) {\n    // Individual curved tendril\n    hull() {\n        translate([0, 0, 0])\n        sphere(r = width/2);\n        \n        rotate([0, curve_angle, 0])\n        translate([0, 0, length])\n        sphere(r = width/3);\n    }\n}\n\nmodule tendrils_set(count, radius, height) {\n    // Set of curved tendrils around the vortex\n    for(i = [0:count-1]) {\n        angle = i * (360/count);\n        rotate([0, 0, angle])\n        translate([radius * 0.8, 0, height * 0.3])\n        rotate([0, 45, 0])\n        shadow_tendril(height * 0.4, 2.5, 30 + i * 5);\n    }\n}\n\nmodule swirl_details(height, base_radius) {\n    // Raised swirl patterns on the surface\n    for(level = [0.2:0.2:0.8]) {\n        z_pos = height * level;\n        current_radius = base_radius * (1 - level);\n        \n        for(i = [0:30:330]) {\n            rotate([0, 0, i + level * 120])\n            translate([current_radius * 0.7, 0, z_pos])\n            rotate([90, 0, 0])\n            cylinder(h = current_radius * 0.8, r1 = 1.5, r2 = 0.5);\n        }\n    }\n}\n\nmodule umbralwhirl_main() {\n    final_height = 50;\n    base_radius = 25;\n    \n    union() {\n        // Base platform\n        translate([0, 0, -5])\n        base_disk(base_radius * 1.2, 5);\n        \n        // Main vortex structure\n        vortex_core(final_height, base_radius);\n        \n        // Tendrils emanating from sides\n        tendrils_set(8, base_radius, final_height);\n        \n        // Surface details\n        swirl_details(final_height, base_radius);\n        \n        // Top cap with opening\n        translate([0, 0, final_height - 2])\n        difference() {\n            cylinder(h = 4, r = base_radius * 0.2);\n            cylinder(h = 5, r = base_radius * 0.1);\n        }\n    }\n}\n\n// Generate the complete model\numbralwhirl_main();",
    "renders": true
  },
  {
    "household_item": "verdantwhirl",
    "openscad_code": "// VerdantWhirl - Realistic style, medium complexity\n// A swirling plant-like form with helical leaves and central stem\n\n// Basic parameters\nstem_height = 60;\nstem_diameter = 6;\nleaf_count = 7;\nleaf_length = 25;\nleaf_width = 12;\nleaf_thickness = 1.5;\nbase_height = 8;\nbase_diameter = 20;\n\n// Main module\nmodule verdantwhirl() {\n    // Base\n    union() {\n        // Wide base for stability\n        cylinder(h=base_height, d1=base_diameter, d2=stem_diameter, $fn=32);\n        \n        // Central stem\n        translate([0, 0, base_height/2])\n            cylinder(h=stem_height, d=stem_diameter, $fn=16);\n        \n        // Helical leaves array\n        for(i=[0:leaf_count-1]) {\n            rotate([0, 0, i * (360/leaf_count)])\n                translate([0, 0, base_height + (i * stem_height/leaf_count)])\n                    leaf();\n        }\n        \n        // Root flare details\n        for(j=[0:4]) {\n            rotate([0, 0, j * 72])\n                translate([base_diameter/2 - 3, 0, 0])\n                    scale([0.6, 0.6, 1])\n                        cylinder(h=base_height, d=6, $fn=8);\n        }\n    }\n}\n\n// Leaf module - curved and tapered\nmodule leaf() {\n    // Main leaf body\n    rotate([90, 0, 0])\n        translate([0, 0, -leaf_length/2])\n            scale([1, leaf_width/leaf_length, leaf_thickness/leaf_length])\n                sphere(d=leaf_length, $fn=16);\n    \n    // Leaf tip extension\n    rotate([90, 0, 0])\n        translate([0, 0, leaf_length/2 - 2])\n            scale([0.4, 0.4, 1])\n                cylinder(h=5, d=leaf_width/2, $fn=8);\n    \n    // Vein detail\n    rotate([90, 0, 0])\n        translate([0, -leaf_thickness/2 - 0.1, 0])\n            scale([0.1, 1, 1])\n                cube([leaf_length, leaf_thickness/4, leaf_width], center=true);\n}\n\n// Render the model\nverdantwhirl();",
    "renders": true
  },
  {
    "household_item": "whisperwhirl",
    "openscad_code": "// WhisperWhirl - Realistic Medium Complexity\n// A 3D-printable open-spiral fidget / airflow toy\n\n$fn = 50;               // global smoothness\nwall = 2;               // printable wall thickness\ndia = 60;               // outer diameter\nheight = 45;            // overall height\ncenter_hole = 6;        // axle hole dia\nn_turns = 4;            // number of spiral turns\nrib_w = 4;              // blade thickness\nrib_h = 8;              // blade height\ngap = 5;                // spacing between blades\n\n// Main body module\nmodule whisper_body() {\n    difference() {\n        // outer shell\n        cylinder(h = height, d = dia, center = false);\n\n        // hollow core\n        translate([0, 0, -1])\n            cylinder(h = height + 2, d = dia - 2*wall, center = false);\n\n        // central axle hole\n        translate([0, 0, -1])\n            cylinder(h = height + 2, d = center_hole, center = false);\n    }\n}\n\n// Single spiral blade\nmodule blade(t) {\n    // t = 0..1 along height\n    angle = 360 * n_turns * t;\n    r = (dia - 2*wall - rib_w) / 2;\n    \n    translate([r * cos(angle), r * sin(angle), t * height])\n        rotate([0, 0, angle + 90])\n            cube([rib_w, rib_h, gap * 1.2], center = true);\n}\n\n// Generate all blades\nmodule blades() {\n    step = gap / height;\n    for (i = [0 : step : 1 - step]) {\n        blade(i);\n    }\n}\n\n// Base ring for bottom support\nmodule base_ring() {\n    difference() {\n        cylinder(h = wall, d = dia, center = false);\n        translate([0, 0, -1])\n            cylinder(h = wall + 2, d = dia - 2*wall, center = false);\n    }\n}\n\n// Top ring for symmetry and print bed adhesion\nmodule top_ring() {\n    translate([0, 0, height - wall])\n        base_ring();\n}\n\n// Assembly\nunion() {\n    // solid base first\n    base_ring();\n    \n    // central body shell\n    whisper_body();\n    \n    // add all spiral blades\n    blades();\n    \n    // top finish\n    top_ring();\n}",
    "renders": true
  },
  {
    "household_item": "xylogleam",
    "openscad_code": "// XYLOGLEAM - Realistic wooden flashlight (medium complexity)\n\n$fn = 36;  // Smooth curves\n\n// Overall dimensions\nflashlight_len = 85;\nflashlight_dia = 28;\n\n// Main body - wooden texture via stacked rings\nmodule body() {\n    difference() {\n        union() {\n            // Main tube segments with slight taper\n            for (i = [0:1:20]) {\n                translate([0, 0, i*4])\n                cylinder(h = 4.2, d1 = 28 - (i*0.2), d2 = 28 - ((i+1)*0.2), center = false);\n            }\n            \n            // Reinforcement ring at mid-body\n            translate([0, 0, 40])\n            cylinder(h = 6, d = 30, center = true);\n        }\n        \n        // Battery chamber (AA size)\n        translate([0, 0, -5])\n        cylinder(h = 60, d = 15, center = false);\n    }\n}\n\n// Head assembly\nmodule head() {\n    difference() {\n        union() {\n            // Head housing\n            translate([0, 0, 85])\n            cylinder(h = 20, d = 32, center = false);\n            \n            // Bezel lip\n            translate([0, 0, 105])\n            cylinder(h = 3, d = 35, center = false);\n            \n            // Heat sink fins\n            for (i = [0:1:3]) {\n                translate([0, 0, 85 + i*4.5])\n                cylinder(h = 3, d = 33, center = false);\n            }\n        }\n        \n        // Reflector cavity\n        translate([0, 0, 85])\n        cylinder(h = 18, d1 = 30, d2 = 20, center = false);\n    }\n    \n    // LED shelf\n    translate([0, 0, 103])\n    cylinder(h = 2, d = 8, center = false);\n}\n\n// Tail cap with switch\nmodule tailcap() {\n    difference() {\n        union() {\n            // Cap body\n            translate([0, 0, -10])\n            cylinder(h = 12, d = 30, center = false);\n            \n            // Switch boot\n            translate([0, 0, -1])\n            cylinder(h = 8, d1 = 12, d2 = 15, center = false);\n            \n            // Lanyard hole posts\n            for (i = [-1, 1]) {\n                translate([i*10, 0, -5])\n                cube([4, 4, 10], center = true);\n            }\n        }\n        \n        // Switch hole\n        translate([0, 0, -1])\n        cylinder(h = 10, d = 8, center = false);\n        \n        // Lanyard hole\n        translate([0, 0, -5])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d = 3, center = true);\n    }\n}\n\n// Grip rings\nmodule grips() {\n    for (i = [0:1:4]) {\n        translate([0, 0, 15 + i*12])\n        difference() {\n            cylinder(h = 3, d = 30, center = false);\n            cylinder(h = 3.5, d = 26, center = false);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    tailcap();\n    grips();\n}",
    "renders": true
  },
  {
    "household_item": "yearnwhirl",
    "openscad_code": "// Yearnwhirl - Realistic style, medium complexity\n// A 3D printable yearning spinner with central bearing\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main parameters\nouter_diameter = 70;\ninner_diameter = 22;\nthickness = 8;\narm_count = 3;\narm_width = 12;\narm_length = 20;\ncap_height = 3;\nbearing_radius = 8;\nbearing_depth = 3;\n\nmodule central_hub() {\n    // Outer ring\n    difference() {\n        cylinder(h=thickness, r=outer_diameter/2);\n        cylinder(h=thickness+0.1, r=inner_diameter/2);\n    }\n    \n    // Bearing seat\n    difference() {\n        cylinder(h=bearing_depth, r=bearing_radius);\n        cylinder(h=bearing_depth+0.1, r=bearing_radius-2);\n    }\n}\n\nmodule spinner_arm(index) {\n    angle = index * (360/arm_count);\n    \n    rotate([0, 0, angle])\n    translate([outer_diameter/2 + arm_length/2 - 4, 0, thickness/2])\n    rotate([90, 0, 0])\n    difference() {\n        // Main arm\n        cube([arm_length, arm_width, thickness], center=true);\n        \n        // Weight reduction holes\n        for(i = [0.3, 0.7]) {\n            translate([arm_length*(i-0.5), 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=arm_width+1, r=2);\n        }\n        \n        // Chamfer edges\n        translate([0, 0, -thickness/2-0.1])\n        cylinder(h=1, r=3);\n        translate([0, 0, thickness/2+0.1])\n        cylinder(h=1, r=3);\n    }\n}\n\nmodule grip_caps() {\n    // Top cap\n    translate([0, 0, thickness])\n    difference() {\n        cylinder(h=cap_height, r=outer_diameter/2);\n        cylinder(h=cap_height+0.1, r=inner_diameter/2);\n    }\n    \n    // Bottom cap\n    translate([0, 0, -cap_height])\n    difference() {\n        cylinder(h=cap_height, r=outer_diameter/2);\n        cylinder(h=cap_height+0.1, r=inner_diameter/2);\n    }\n}\n\nmodule finger_pads() {\n    // Top finger pad\n    translate([0, 0, thickness+cap_height])\n    difference() {\n        cylinder(h=2, r=inner_diameter/2 + 2);\n        cylinder(h=2.1, r=inner_diameter/2);\n    }\n    \n    // Bottom finger pad\n    translate([0, 0, -cap_height-2])\n    difference() {\n        cylinder(h=2, r=inner_diameter/2 + 2);\n        cylinder(h=2.1, r=inner_diameter/2);\n    }\n}\n\n// Assembly\nunion() {\n    central_hub();\n    \n    // Create all spinner arms\n    for(i = [0:arm_count-1]) {\n        spinner_arm(i);\n    }\n    \n    grip_caps();\n    finger_pads();\n    \n    // Add small decorative weights at arm ends\n    for(i = [0:arm_count-1]) {\n        angle = i * (360/arm_count);\n        rotate([0, 0, angle])\n        translate([outer_diameter/2 + arm_length - 2, 0, thickness/2])\n        sphere(r=4);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "zephyrwhirl",
    "openscad_code": "// Zephyrwhirl - Realistic Style, Medium Complexity\n// A decorative spiral turbine inspired by gentle wind catchers\n// 3D printable with no overhangs, 70mm tall\n\n$fn = 36;\n\n// Main parameters\nbase_diameter = 40;\nbase_height = 8;\nshaft_diameter = 6;\nshaft_height = 62;\nblade_count = 6;\nblade_length = 25;\nblade_width = 12;\nblade_thickness = 2;\ntwist_angle = 45;\n\n// Base foundation\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_diameter);\n        \n        // Center hole for shaft\n        translate([0, 0, -1])\n            cylinder(h = base_height + 2, d = shaft_diameter + 2);\n        \n        // Ventilation holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([base_diameter/2 - 6, 0, base_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, d = 3, $fn = 16);\n        }\n    }\n}\n\n// Central shaft with keyway\nmodule shaft() {\n    union() {\n        // Main shaft\n        cylinder(h = shaft_height, d = shaft_diameter);\n        \n        // Keyway slot\n        translate([shaft_diameter/2, -1.5, 0])\n            cube([2, 3, shaft_height]);\n    }\n}\n\n// Single spiral blade\nmodule blade(twist) {\n    translate([0, 0, twist * shaft_height/blade_count])\n        rotate([0, 0, twist * twist_angle])\n            translate([shaft_diameter/2 + blade_thickness/2, 0, 0])\n                rotate([0, 90, 0])\n                    linear_extrude(height = blade_width, twist = -twist_angle, center = true)\n                        difference() {\n                            // Main blade shape\n                            square([blade_length, blade_thickness], center = true);\n                            \n                            // Tapered tip\n                            translate([blade_length/2 - 3, 0, 0])\n                                circle(r = blade_thickness/2);\n                        };\n}\n\n// Assembly of all spiral blades\nmodule spiral_blades() {\n    for (i = [0:blade_count-1]) {\n        blade(i);\n    }\n}\n\n// Top cap with bearing surface\nmodule top_cap() {\n    difference() {\n        // Main cap\n        translate([0, 0, shaft_height])\n            cylinder(h = 8, d = shaft_diameter + 12);\n        \n        // Center hole\n        translate([0, 0, shaft_height - 1])\n            cylinder(h = 10, d = shaft_diameter + 1);\n        \n        // Decorative grooves\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([0, 0, shaft_height + 4])\n                    rotate([90, 0, 0])\n                        cube([2, 8, 1]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base and shaft\n    base();\n    translate([0, 0, base_height])\n        shaft();\n    \n    // Spiral blades\n    translate([0, 0, base_height + 5])\n        spiral_blades();\n    \n    // Top cap\n    top_cap();\n}",
    "renders": true
  },
  {
    "household_item": "amberglow",
    "openscad_code": "// Amberglow - Realistic style, medium complexity\n// A stylized amber glow stick / light saber hilt with internal LED cavity\n\n// Parameters\n$fn = 32;\nbody_d = 28;\nbody_h = 80;\ngrip_d = 32;\ngrip_h = 45;\nbutton_d = 8;\nbutton_h = 3;\nemitter_d = 22;\nemitter_h = 12;\ncap_d = 30;\ncap_h = 8;\nwall_t = 2;\nled_d = 16;\nled_h = 35;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        cylinder(d=body_d, h=body_h, center=true);\n        // Inner cavity for electronics\n        translate([0,0,-wall_t/2])\n            cylinder(d=body_d-wall_t*2, h=body_h+1, center=true);\n    }\n}\n\n// Emitter head\nmodule emitter() {\n    difference() {\n        // Main emitter shape\n        cylinder(d1=emitter_d, d2=emitter_d*0.8, h=emitter_h);\n        // Inner cavity\n        translate([0,0,-1])\n            cylinder(d=led_d, h=emitter_h+2);\n    }\n}\n\n// Grip section with ridges\nmodule grip() {\n    difference() {\n        // Base cylinder\n        cylinder(d=grip_d, h=grip_h, center=true);\n        // Remove center\n        translate([0,0,-grip_h/2-1])\n            cylinder(d=grip_d-wall_t*2, h=grip_h+2);\n        \n        // Grip ridges\n        for(i=[0:6]) {\n            rotate([0,0,i*60])\n                translate([grip_d/2-wall_t/2, 0, 0])\n                    cube([wall_t, grip_d*0.3, grip_h], center=true);\n        }\n    }\n}\n\n// Activation button\nmodule button() {\n    difference() {\n        // Button housing\n        translate([body_d/2+button_h/2, 0, body_h/2-15])\n            rotate([0,90,0])\n                cylinder(d=button_d+wall_t*2, h=button_h+wall_t*2);\n        // Button itself\n        translate([body_d/2+button_h/2, 0, body_h/2-15])\n            rotate([0,90,0])\n                cylinder(d=button_d, h=button_h+1);\n    }\n}\n\n// End cap with key ring loop\nmodule endcap() {\n    difference() {\n        union() {\n            // Main cap\n            cylinder(d=cap_d, h=cap_h);\n            // Key ring loop\n            translate([0,0,-cap_h/2-5])\n                rotate([90,0,0])\n                    torus(r1=4, r2=1.5);\n        }\n        // Remove center\n        translate([0,0,-1])\n            cylinder(d=cap_d-wall_t*2, h=cap_h+2);\n    }\n}\n\n// Helper for torus\nmodule torus(r1, r2) {\n    rotate_extrude()\n        translate([r1,0,0])\n            circle(r=r2);\n}\n\n// Assembly\ntranslate([0,0,body_h/2+cap_h])\n    body();\n    \ntranslate([0,0,cap_h+grip_h/2])\n    grip();\n    \ntranslate([0,0,cap_h+grip_h])\n    emitter();\n    \ntranslate([0,0,0])\n    endcap();\n    \nbutton();",
    "renders": true
  },
  {
    "household_item": "briarglow",
    "openscad_code": "// Briarglow mushroom – a medium-complexity, realistic, 3D-printable model\n// (~60 mm tall, 0.8 mm minimum walls)\n\n// Overall scale\nscale_factor = 0.12;\n\n// Cap\nmodule cap() {\n    difference() {\n        // Main cap body – slightly flattened sphere\n        scale([1, 1, 0.85])\n            sphere(d = 50 * scale_factor, $fn = 60);\n\n        // Central dimple\n        translate([0, 0, -4 * scale_factor])\n            sphere(d = 12 * scale_factor, $fn = 30);\n\n        // Gills undercut (print-friendly 45°)\n        difference() {\n            cylinder(h = 8 * scale_factor, d1 = 44 * scale_factor, d2 = 38 * scale_factor, $fn = 60);\n            cylinder(h = 9 * scale_factor, d1 = 43 * scale_factor, d2 = 37 * scale_factor, $fn = 60);\n        }\n\n        // Gills – radial grooves\n        for (a = [0:15:359])\n            rotate([0, 0, a])\n                translate([0, 19 * scale_factor, -7.9 * scale_factor])\n                    cube([1.5 * scale_factor, 6 * scale_factor, 8 * scale_factor], center = true);\n    }\n}\n\n// Stem\nmodule stem() {\n    difference() {\n        // Main stem shaft\n        cylinder(h = 40 * scale_factor, d = 12 * scale_factor, $fn = 40);\n\n        // Hollow core for weight saving and printability\n        cylinder(h = 40 * scale_factor, d = 10 * scale_factor, $fn = 40);\n\n        // Base flare\n        translate([0, 0, -0.1])\n            cylinder(h = 10 * scale_factor, d1 = 12 * scale_factor, d2 = 16 * scale_factor, $fn = 40);\n    }\n\n    // Ring skirt\n    translate([0, 0, 20 * scale_factor])\n        rotate_extrude($fn = 60)\n            translate([6.5 * scale_factor, 0])\n                circle(d = 3 * scale_factor);\n}\n\n// Root-like base\nmodule roots() {\n    for (a = [0:45:359])\n        rotate([0, 0, a])\n            translate([6 * scale_factor, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 15 * scale_factor, d = 4 * scale_factor, $fn = 8);\n}\n\n// Assemble parts\nunion() {\n    // Cap sits on top of stem\n    translate([0, 0, 40 * scale_factor])\n        cap();\n\n    stem();\n\n    // Roots at base\n    translate([0, 0, -5 * scale_factor])\n        roots();\n}",
    "renders": true
  },
  {
    "household_item": "cinderglow",
    "openscad_code": "// Cinderglow – a medium-complexity, realistic glowing ember / coal bed\n// Designed for 3D printing, 100 mm max dimension, no extreme overhangs\n\n$fn = 36;\n\n// Overall size\nfootprint = 80;    // flat base diameter\npeak_h   = 35;     // max height of coal mound\n\n// Wall thickness for printing\nwall = 2;\n\n// Ember colours (for render only – single-colour print)\ncolor_ember = \"#ff4a00\";\ncolor_ash   = \"#3b3b3b\";\n\n// Base tray\nmodule base_tray() {\n    difference() {\n        cylinder(h = 8, r = footprint/2 + 6, center = false);\n        translate([0,0,wall])\n            cylinder(h = 8, r = footprint/2 + 6 - wall, center = false);\n    }\n}\n\n// Single coal chunk with randomised size and rotation\nmodule coal_chunk(seed = 0) {\n    s = rands(0.8, 1.2, 1, seed)[0];\n    rot = rands(0, 360, 3, seed + 10);\n    translate([0,0,-wall/2])\n    rotate([rot[0], rot[1], rot[2]])\n    scale([s, s, s])\n    // Crude coal nugget – stack of spheres\n    union() {\n        sphere(r = 6);\n        translate([0,0,3]) sphere(r = 5);\n        translate([2,1,6]) sphere(r = 4);\n        translate([-2,-1,5]) sphere(r = 3.5);\n    }\n}\n\n// Generate mound of coals\nmodule coal_mound() {\n    difference() {\n        // Overall mound shape\n        scale([1,1,0.6])\n        cylinder(h = peak_h, r = footprint/2 - 5, center = false);\n        // Hollow underneath\n        translate([0,0,wall])\n        scale([1,1,0.6])\n        cylinder(h = peak_h, r = footprint/2 - 5 - wall, center = false);\n    }\n\n    // Surface coals\n    for (i = [0:25]) {\n        angle = rands(0, 360, 1, i*3)[0];\n        dist  = rands(5, footprint/2 - 10, 1, i*7)[0];\n        z     = rands(peak_h*0.3, peak_h*0.9, 1, i*13)[0];\n        translate([dist*cos(angle), dist*sin(angle), z])\n            coal_chunk(i*29);\n    }\n}\n\n// Ember core (internal glowing chamber)\nmodule ember_core() {\n    // Simple cavity with rounded top\n    translate([0,0,4])\n    difference() {\n        scale([0.5,0.5,0.4])\n        cylinder(h = peak_h*0.8, r = footprint/3, center = false);\n        translate([0,0,wall])\n        scale([0.5-wall/footprint,0.5-wall/footprint,0.4])\n        cylinder(h = peak_h*0.8, r = footprint/3 - wall, center = false);\n    }\n}\n\n// Final assembly\nunion() {\n    color(color_ash) base_tray();\n    translate([0,0,8]) color(color_ash) coal_mound();\n    translate([0,0,8]) color(color_ember) ember_core();\n}",
    "renders": true
  },
  {
    "household_item": "driftglow",
    "openscad_code": "// Driftglow - Realistic style with medium complexity\n// 3D printable driftglow with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Main parameters\nbody_diameter = 40;\nbody_height = 25;\nwall_thickness = 2;\nbase_height = 8;\nglow_diameter = 20;\nglow_depth = 3;\nmount_hole_diameter = 6;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Outer shell\n        cylinder(h = body_height, d = body_diameter, center = true);\n        \n        // Inner cavity\n        cylinder(h = body_height + 1, d = body_diameter - 2*wall_thickness, center = true);\n        \n        // Mounting hole\n        translate([0, 0, -body_height/2])\n            cylinder(h = body_height, d = mount_hole_diameter);\n    }\n}\n\n// Base with mounting posts\nmodule base() {\n    difference() {\n        // Main base\n        cylinder(h = base_height, d = body_diameter + 10, center = true);\n        \n        // Recessed area for body\n        translate([0, 0, base_height/2 - 1])\n            cylinder(h = base_height, d = body_diameter - 2, center = true);\n    }\n    \n    // Mounting posts\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([body_diameter/2 + 3, 0, 0])\n                cylinder(h = base_height, d = 4, center = true);\n    }\n}\n\n// Glow element housing\nmodule glow_housing() {\n    // Main glow cavity\n    translate([0, 0, body_height/2 - glow_depth/2])\n        difference() {\n            cylinder(h = glow_depth, d = glow_diameter);\n            cylinder(h = glow_depth + 1, d = glow_diameter - 2*wall_thickness);\n        }\n    \n    // Light diffuser slots\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([glow_diameter/2 - 1, 0, body_height/2 - glow_depth/2])\n                cube([2, 1, glow_depth], center = true);\n    }\n}\n\n// Wire channels\nmodule wire_channels() {\n    // Horizontal channel\n    translate([0, 0, -body_height/4])\n        rotate([90, 0, 0])\n            cylinder(h = body_diameter/2, d = 3);\n    \n    // Vertical channel\n    translate([0, 0, -body_height/2])\n        cylinder(h = body_height/2, d = 3);\n}\n\n// Assembly\ntranslate([0, 0, body_height/2 + base_height/2])\n    union() {\n        base();\n        \n        translate([0, 0, base_height/2 + body_height/2])\n            union() {\n                body();\n                glow_housing();\n                wire_channels();\n            }\n    }",
    "renders": true
  },
  {
    "household_item": "frostglow",
    "openscad_code": "// Frostglow Lantern - Realistic medium-complexity model\n// Dimensions: 70mm tall, 60mm diameter\n\n// Parameters for easy customization\nbase_d = 50;\nbase_h = 6;\nchimney_d = 20;\nchimney_h = 25;\nglobe_d = 40;\nglass_thick = 2;\nhandle_r = 3;\n\n// Main assembly\nmodule frostglow() {\n    // Base with ventilation holes\n    difference() {\n        // Base cylinder\n        cylinder(h=base_h, d=base_d, $fn=60);\n        \n        // Ventilation slots around base\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n                translate([base_d/2-5, -2, -1])\n                    cube([10,4,base_h+2]);\n        }\n        \n        // Central hole for chimney\n        translate([0,0,-1])\n            cylinder(h=base_h+2, d=chimney_d, $fn=60);\n    }\n    \n    // Chimney tube\n    translate([0,0,base_h])\n        difference() {\n            cylinder(h=chimney_h, d=chimney_d, $fn=60);\n            translate([0,0,1])\n                cylinder(h=chimney_h, d=chimney_d-4, $fn=60);\n        }\n    \n    // Glass globe\n    translate([0,0,base_h+chimney_h-5])\n        difference() {\n            sphere(d=globe_d, $fn=60);\n            sphere(d=globe_d-glass_thick*2, $fn=60);\n        }\n    \n    // Top cap with vent holes\n    translate([0,0,base_h+chimney_h-5+globe_d/2-2])\n        difference() {\n            cylinder(h=4, d=globe_d, $fn=60);\n            \n            // Ventilation holes\n            for(i=[0:5]) {\n                rotate([0,0,i*60])\n                    translate([globe_d/2-10, -2, -1])\n                        cube([8,4,6]);\n            }\n            \n            // Central chimney hole\n            cylinder(h=6, d=chimney_d-2, $fn=60);\n        }\n    \n    // Handle brackets\n    handle_bracket_pos = base_h+chimney_h+globe_d/2-10;\n    \n    // Left bracket\n    translate([globe_d/2, 0, handle_bracket_pos])\n        rotate([0,90,0])\n            cylinder(h=10, d=6, $fn=20);\n    \n    // Right bracket\n    translate([-globe_d/2, 0, handle_bracket_pos])\n        rotate([0,-90,0])\n            cylinder(h=10, d=6, $fn=20);\n    \n    // Handle wire\n    translate([0, 0, handle_bracket_pos])\n        rotate([0,90,0])\n            rotate_extrude(angle=180, $fn=30)\n                translate([globe_d/2+5, 0, 0])\n                    circle(r=handle_r);\n    \n    // Internal flame cage\n    translate([0,0,base_h+chimney_h/2])\n        difference() {\n            cylinder(h=chimney_h-5, d=chimney_d-6, $fn=30);\n            \n            // Cage bars\n            for(i=[0:7]) {\n                rotate([0,0,i*45])\n                    translate([0,-1,0])\n                        cube([chimney_d-6,2,chimney_h-5]);\n            }\n        }\n    \n    // Wick holder\n    translate([0,0,base_h+2])\n        cylinder(h=3, d=chimney_d/2, $fn=20);\n    \n    // Wick\n    translate([0,0,base_h+5])\n        cylinder(h=8, d=chimney_d/4, $fn=12);\n}\n\n// Render the complete model\nfrostglow();",
    "renders": true
  },
  {
    "household_item": "glimmerglow",
    "openscad_code": "// GlimmerGlow - Realistic medium-complexity model\n// A handheld glowing crystal artifact with mounting frame\n\n$fn = 64;  // Smooth curves for realism\n\n// Overall dimensions\nbody_d = 60;\nbody_h = 80;\nwall_t = 2;\n\n// Crystal core\nmodule crystal_core(r=20, h=50) {\n    difference() {\n        // Main hexagonal crystal\n        cylinder(r1=r, r2=r*0.7, h=h, $fn=6);\n        \n        // Inner light cavity\n        translate([0,0,wall_t]) \n            cylinder(r1=r-wall_t, r2=r*0.7-wall_t, h=h-wall_t*2, $fn=6);\n            \n        // Facet cuts for realism\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) \n                translate([r*0.6,0,h*0.3])\n                    rotate([0,30,0])\n                        cube([r*1.5, 0.5, h*0.4], center=true);\n        }\n    }\n}\n\n// Decorative frame segments\nmodule frame_spoke(length=25, width=5, thick=3) {\n    difference() {\n        union() {\n            // Main spoke arm\n            cube([length, width, thick], center=true);\n            \n            // Rounded end cap\n            translate([length/2,0,0])\n                rotate([0,90,0])\n                    cylinder(r=width/2, h=thick+0.1, center=true);\n        }\n        \n        // Mounting hole\n        translate([length/2,0,0])\n            rotate([0,90,0])\n                cylinder(r=1.5, h=thick+2, center=true);\n    }\n}\n\n// Central mounting ring\nmodule mount_ring(outer_r=35, inner_r=30, h=10) {\n    difference() {\n        cylinder(r=outer_r, h=h);\n        translate([0,0,-0.1])\n            cylinder(r=inner_r, h=h+0.2);\n            \n        // Keyed alignment slot\n        translate([outer_r-3, 0, h/2])\n            rotate([0,90,0])\n                cylinder(r=2, h=6, $fn=3);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    difference() {\n        cylinder(r=body_d/2, h=body_h);\n        \n        // Hollow interior\n        translate([0,0,wall_t])\n            cylinder(r=body_d/2-wall_t, h=body_h-wall_t*2);\n            \n        // Side windows for light\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([body_d/2-wall_t,0,body_h/2])\n                    rotate([0,90,0])\n                        cylinder(r=10, h=wall_t+0.2);\n        }\n    }\n    \n    // Crystal inside\n    translate([0,0,body_h/2-h/2])\n        crystal_core();\n        \n    // Mounting frame\n    translate([0,0,body_h])\n        mount_ring();\n        \n    // Support spokes\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([0,0,body_h/2])\n                frame_spoke();\n    }\n    \n    // Base plate\n    translate([0,0,-wall_t])\n        cylinder(r=body_d/2+2, h=wall_t);\n}",
    "renders": true
  },
  {
    "household_item": "hollowglow",
    "openscad_code": "// Hollowglow (realistic mushroom with hollow stem and cap)\n// Medium complexity, 3D-printable, ~70 mm tall\n\nwall = 1.0;          // wall thickness for printability\ndia = 60;            // cap diameter\nh_total = 70;        // overall height\nstem_h = 35;         // stem height\nstem_r = 9;          // stem radius\ngill_gap = 1.2;      // spacing between gills\ngill_t = 0.8;        // gill thickness\n\n// Outer cap profile\nmodule cap_shell() {\n    difference() {\n        // Main cap dome\n        scale([1, 1, 0.55])\n            sphere(d = dia, $fn = 90);\n        \n        // Remove underside to create hollow\n        translate([0, 0, -dia * 0.55])\n            cube([dia * 2, dia * 2, dia], center = true);\n    }\n}\n\n// Inner cap cavity\nmodule cap_cavity() {\n    translate([0, 0, wall])\n        scale([1, 1, 0.55])\n            sphere(d = dia - 2 * wall, $fn = 90);\n}\n\n// Stem shell\nmodule stem_shell() {\n    difference() {\n        cylinder(h = stem_h, r1 = stem_r, r2 = stem_r * 0.85, $fn = 60);\n        // Hollow core\n        translate([0, 0, wall])\n            cylinder(h = stem_h - wall, r1 = stem_r - wall, r2 = stem_r * 0.85 - wall, $fn = 60);\n    }\n}\n\n// Realistic gills beneath cap\nmodule gills() {\n    n = floor(PI * (dia - 6) / 2 / gill_gap);\n    for(i = [0 : n - 1]) {\n        angle = i * 360 / n;\n        rotate([0, 0, angle])\n            translate([(dia / 2 - 4) / 2, 0, -dia * 0.55 + 0.5])\n                cube([(dia - 6) / 2, gill_t, 3], center = true);\n    }\n}\n\n// Base ring to stabilize print\nmodule base_ring() {\n    difference() {\n        cylinder(h = 2, r1 = stem_r + 2, r2 = stem_r + 4, $fn = 60);\n        cylinder(h = 2.1, r1 = stem_r - wall, r2 = stem_r - wall + 1, $fn = 60);\n    }\n}\n\n// Assembly\nunion() {\n    // Cap\n    difference() {\n        cap_shell();\n        cap_cavity();\n    }\n    \n    // Stem\n    translate([0, 0, -stem_h])\n        stem_shell();\n    \n    // Gills attached to cap\n    gills();\n    \n    // Base ring\n    translate([0, 0, -stem_h])\n        base_ring();\n}",
    "renders": true
  },
  {
    "household_item": "iceglow",
    "openscad_code": "// Iceglow (realistic style, medium complexity)\n// 3D printable ice light with glow core\n\n$fn = 36;\n\n// Overall dimensions\nbase_d = 50;\nbase_h = 8;\ncore_d = 12;\ncore_h = 35;\ntop_d = 25;\ntop_h = 5;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main iceglow body\nmodule iceglow_body() {\n    // Base platform\n    difference() {\n        cylinder(d=base_d, h=base_h);\n        translate([0,0,wall]) cylinder(d=base_d-wall*2, h=base_h);\n    }\n    \n    // Lower ice shell\n    translate([0,0,base_h]) {\n        difference() {\n            cylinder(d=base_d-5, h=core_h+top_h);\n            translate([0,0,wall]) cylinder(d=base_d-5-wall*2, h=core_h+top_h);\n        }\n    }\n    \n    // Top dome\n    translate([0,0,base_h+core_h]) {\n        difference() {\n            sphere(d=top_d);\n            translate([0,0,-wall]) sphere(d=top_d-wall*2);\n        }\n    }\n}\n\n// Internal LED holder\nmodule led_holder() {\n    // Central cavity for LED\n    translate([0,0,base_h]) {\n        cylinder(d=core_d, h=core_h);\n    }\n    \n    // LED wire channel\n    translate([0,0,base_h-5]) {\n        cube([wall*2, wall*1.5, 5], center=true);\n    }\n}\n\n// Frost texture pattern\nmodule frost_pattern() {\n    for (i=[0:30:359]) {\n        rotate([0,0,i]) {\n            translate([base_d/2-6,0,base_h+core_h/2]) {\n                rotate([0,90,0]) {\n                    difference() {\n                        cylinder(d=1.5, h=3);\n                        translate([0,0,1]) cylinder(d=1, h=2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ice crystal details\nmodule ice_crystals() {\n    // Top crystals\n    for (a=[0:60:359]) {\n        rotate([0,0,a]) {\n            translate([top_d/2-3,0,base_h+core_h+top_h/2]) {\n                rotate([0,90,0]) {\n                    difference() {\n                        cylinder(d1=2, d2=0.5, h=4);\n                        translate([0,0,2]) cylinder(d1=1.5, d2=0.3, h=3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Side crystals\n    for (b=[30:45:359]) {\n        rotate([0,0,b]) {\n            translate([(base_d-5)/2-wall,0,base_h+core_h/3]) {\n                rotate([0,90,0]) {\n                    difference() {\n                        cylinder(d1=1.8, d2=0.4, h=3.5);\n                        translate([0,0,1.5]) cylinder(d1=1.2, d2=0.2, h=2.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        iceglow_body();\n        frost_pattern();\n        ice_crystals();\n    }\n    led_holder();\n}",
    "renders": true
  },
  {
    "household_item": "jadeglow",
    "openscad_code": "// Jadeglow lantern – 3D-printable, medium complexity, realistic style\n// Overall bounding box ≈ 60 mm × 60 mm × 90 mm\n\n// Parameters for easy scaling\nwall      = 1.2;    // 1.2 mm printable wall thickness\nbase_h    = 10;     // Base height\nglobe_h   = 65;     // Globe height\nglobe_r   = 28;     // Globe radius\ncap_h     = 10;     // Top cap height\nledge     = 2;      // Ledge for inserting diffuser\nvent_d    = 2.2;    // Vent hole diameter\nvent_num  = 12;     // Number of vents around cap\npcb_r     = 22;     // LED PCB pocket radius\npcb_h     = 4;      // LED PCB pocket depth\nwire_d    = 6;      // Wire exit hole diameter\nwire_h    = 4;      // Wire exit height above base bottom\n\nmodule base() {\n    difference() {\n        cylinder(h = base_h, r1 = globe_r + wall, r2 = globe_r + wall, $fn = 100);\n        // Hollow interior\n        translate([0, 0, -0.01])\n            cylinder(h = base_h + 0.02, r1 = globe_r, r2 = globe_r, $fn = 100);\n        // LED PCB pocket\n        translate([0, 0, base_h - pcb_h])\n            cylinder(h = pcb_h + 0.1, r = pcb_r, $fn = 60);\n        // Wire exit channel\n        rotate([90, 0, 0])\n            translate([0, base_h/2, 0])\n                cylinder(h = base_h, d = wire_d, $fn = 30);\n    }\n}\n\nmodule foot() {\n    // Four radial feet for stability, printable without supports\n    for (a = [0:90:359]) {\n        rotate([0, 0, a])\n            translate([globe_r + wall/2, 0, base_h/2])\n                cube([wall*2, 8, base_h], center = true);\n    }\n}\n\nmodule globe() {\n    difference() {\n        // Outer shell\n        translate([0, 0, base_h])\n            cylinder(h = globe_h, r1 = globe_r + wall, r2 = globe_r + wall, $fn = 100);\n        // Inner cavity\n        translate([0, 0, base_h - 0.01])\n            cylinder(h = globe_h + 0.02, r1 = globe_r, r2 = globe_r, $fn = 100);\n        // Ledge for diffuser insert\n        translate([0, 0, base_h + globe_h - ledge])\n            cylinder(h = ledge + 0.1, r1 = globe_r - wall, r2 = globe_r - wall, $fn = 100);\n    }\n}\n\nmodule cap() {\n    difference() {\n        // Main cap\n        translate([0, 0, base_h + globe_h])\n            cylinder(h = cap_h, r1 = globe_r + wall, r2 = globe_r + wall, $fn = 100);\n        // Hollow inside\n        translate([0, 0, base_h + globe_h - 0.01])\n            cylinder(h = cap_h + 0.02, r1 = globe_r, r2 = globe_r, $fn = 100);\n        // Vent holes\n        for (i = [0:vent_num-1]) {\n            rotate([0, 0, i * 360/vent_num])\n                translate([globe_r + wall/2, 0, base_h + globe_h + cap_h/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = wall + 0.2, d = vent_d, $fn = 12);\n        }\n    }\n}\n\nmodule jadeglow() {\n    union() {\n        base();\n        foot();\n        globe();\n        cap();\n    }\n}\n\njadeglow();",
    "renders": true
  },
  {
    "household_item": "kindleglow",
    "openscad_code": "// Kindle Glow 4th gen – medium-complexity realistic style\n// 3D-printable (no overhangs, 1 mm walls, 70 mm tall)\n\n// Main parameters\nbody_w = 46;           // overall width\nbody_h = 116;          // overall height\nbody_d = 9.5;          // overall depth\n\nscreen_w = 40;\nscreen_h = 102;\nscreen_d = 1.2;\n\nbezel = 2.5;           // distance from edge to screen\ncorner_r = 3;          // corner radius\nwall_t = 1;            // wall thickness for printing\nusb_w = 8;\nusb_h = 2.2;\nusb_d = 4;\n\nbutton_r = 3.5;\nbutton_h = 1.5;\n\n// Color constants (for preview only)\ncolor_body   = [0.15,0.15,0.15];\ncolor_screen = [0.05,0.05,0.05];\ncolor_text   = [0.8,0.8,0.8];\n\nmodule kindle_body(){\n    difference(){\n        // Outer rounded shell\n        minkowski(){\n            cube([body_w, body_h, body_d], center=true);\n            sphere(r=corner_r);\n        }\n        // Hollow inside\n        translate([0,0,-wall_t/2])\n            minkowski(){\n                cube([body_w-2*wall_t, body_h-2*wall_t, body_d-wall_t], center=true);\n                sphere(r=corner_r-wall_t);\n            }\n\n        // Screen cutout (front face)\n        translate([0,0,body_d/2+0.1])\n            cube([screen_w+2*bezel, screen_h+2*bezel, wall_t+0.2], center=true);\n\n        // USB-C port (bottom)\n        translate([0,-body_h/2-wall_t/2, -body_d/2+usb_d/2])\n            cube([usb_w, usb_h+wall_t, usb_d], center=true);\n    }\n}\n\nmodule screen_assembly(){\n    // Front glass layer\n    color(color_screen)\n        translate([0,0,body_d/2-screen_d/2])\n            cube([screen_w, screen_h, screen_d], center=true);\n\n    // E-ink surface (slightly recessed)\n    color(color_text)\n        translate([0,0,body_d/2-screen_d/2-0.2])\n            cube([screen_w-1, screen_h-1, 0.2], center=true);\n\n    // Simple text lines\n    for(i=[0:5]){\n        translate([0, -40+i*15, body_d/2-screen_d/2-0.1])\n            cube([screen_w-8, 0.4, 0.2], center=true);\n    }\n}\n\nmodule power_button(){\n    // Raised button on back, top-right corner\n    translate([body_w/2-button_r-1, body_h/2-button_r-1, -body_d/2+button_h/2]){\n        cylinder(h=button_h, r=button_r, $fn=20);\n    }\n}\n\n// Assemble the model\nkindle_body();\nscreen_assembly();\npower_button();",
    "renders": true
  },
  {
    "household_item": "lunarglow",
    "openscad_code": "// LunarGlow – compact, realistic moon-lamp for 3-D printing\n// Overall Ø ≈ 70 mm, height ≈ 80 mm (sits on desk, prints without supports)\n\n$fn = 64;           // smooth curves\nwall = 1.2;         // 3-D-print friendly shell thickness\nled_d = 22;         // 5050 LED ring cavity\n\n// Main shell: hollow sphere with thickened base\nmodule moon_shell() {\n    difference() {\n        sphere(d = 70);                         // outer skin\n        sphere(d = 70 - 2*wall);                // inner void\n    }\n    // flatten bottom so it rests stably\n    translate([0, 0, -34])\n        difference() {\n            cylinder(d = 30, h = 8, center = true);\n            cylinder(d = 30 - 2*wall, h = 10, center = true);\n        }\n}\n\n// Realistic crater detail\nmodule crater(r, depth, pos) {\n    translate(pos)\n    difference() {\n        sphere(r);                      // rim\n        translate([0, 0, -depth])\n            sphere(r + 0.5);          // scoop\n    }\n}\n\n// Generate small random craters\nmodule surface_detail() {\n    craters = [\n        [ 8, 3, [ 20,  5, 30]],\n        [ 6, 2, [-15,-20, 28]],\n        [ 5, 2, [  0, 25, 32]],\n        [ 4, 1, [-22, 12, 31]],\n        [ 7, 3, [ 25,-15, 27]],\n        [ 6, 2, [-10,-25, 29]]\n    ];\n    for (c = craters)\n        crater(c[0], c[1], c[2]);\n}\n\n// LED bayonet holder inside bottom\nmodule led_holder() {\n    difference() {\n        cylinder(d = led_d + wall, h = 8, center = true);\n        cylinder(d = led_d, h = 10, center = true);\n    }\n    // key slots for 5050 ring\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([led_d/2, 0, 0])\n                cube([2.5, 3, 8], center = true);\n}\n\n// Assemble\nunion() {\n    moon_shell();\n    surface_detail();\n    translate([0, 0, -34])\n        led_holder();\n}",
    "renders": true
  },
  {
    "household_item": "mossglow",
    "openscad_code": "// Mossglow - Realistic style, medium complexity\n// A bioluminescent moss-capped mushroom with internal glow chamber\n\n// Overall dimensions\nbase_d = 25;\ncap_d = 45;\nstem_h = 30;\ncap_h = 15;\nglow_chamber_d = 12;\nwall_t = 1.5;\n\n// Base plate for stability\nmodule base() {\n    difference() {\n        // Main base disc\n        cylinder(h=4, d=base_d+4, $fn=60);\n        \n        // Hollow center for material saving\n        cylinder(h=4.5, d=base_d-6, $fn=60);\n    }\n}\n\n// Stem with internal channel for LED\nmodule stem() {\n    difference() {\n        // Outer stem\n        cylinder(h=stem_h, d=base_d, $fn=60);\n        \n        // LED wire channel\n        cylinder(h=stem_h+2, d=base_d-6, $fn=60);\n        \n        // Top chamfer\n        translate([0,0,stem_h-3])\n            cylinder(h=3, d1=base_d-6, d2=base_d, $fn=60);\n    }\n}\n\n// Cap with gills underneath\nmodule mushroom_cap() {\n    difference() {\n        // Main cap dome\n        translate([0,0,stem_h])\n            scale([1,1,0.7])\n                sphere(d=cap_d, $fn=80);\n        \n        // Hollow interior for electronics\n        translate([0,0,stem_h+cap_h/2])\n            sphere(d=cap_d-4, $fn=80);\n        \n        // Wire access hole\n        translate([0,0,stem_h-cap_h/2])\n            cylinder(h=cap_h, d=glow_chamber_d, $fn=30);\n    }\n}\n\n// Micro-texture for cap surface\nmodule cap_texture() {\n    for(i=[0:10:350]) {\n        rotate([0,0,i])\n            translate([cap_d/2-2, 0, stem_h+cap_h/4])\n                scale([1,0.3,0.5])\n                    sphere(d=2, $fn=8);\n    }\n}\n\n// Moss clusters on cap surface\nmodule moss_cluster(x, y, z, size) {\n    translate([x,y,z])\n        for(i=[0:30:330]) {\n            rotate([0,0,i])\n                translate([size/2, 0, 0])\n                    scale([1,0.7,0.5])\n                        sphere(d=size, $fn=8);\n        }\n}\n\n// Bioluminescent spots\nmodule glow_spots() {\n    spots = [\n        [cap_d/4, cap_d/4, stem_h+cap_h/2],\n        [-cap_d/3, cap_d/5, stem_h+cap_h/3],\n        [cap_d/5, -cap_d/3, stem_h+cap_h/2.5],\n        [0, -cap_d/4, stem_h+cap_h/2.2],\n        [-cap_d/5, -cap_d/5, stem_h+cap_h/1.8]\n    ];\n    \n    for(pos = spots) {\n        translate(pos)\n            sphere(d=2.5, $fn=12);\n    }\n}\n\n// Gills underneath cap\nmodule gills() {\n    for(i=[0:15:359]) {\n        rotate([0,0,i])\n            translate([0,0,stem_h])\n                linear_extrude(height=1)\n                    polygon(points=[\n                        [0,0],\n                        [cap_d/2-2,0],\n                        [cap_d/2-2, cap_d/4],\n                        [0, cap_d/6]\n                    ]);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    stem();\n    mushroom_cap();\n    \n    // Add moss clusters\n    moss_cluster(cap_d/3, cap_d/4, stem_h+cap_h/2, 3);\n    moss_cluster(-cap_d/4, -cap_d/3, stem_h+cap_h/2.5, 2.5);\n    moss_cluster(cap_d/5, -cap_d/4, stem_h+cap_h/2.2, 2.8);\n    \n    // Add glow spots\n    glow_spots();\n    \n    // Add gills\n    gills();\n    \n    // Add subtle texture\n    cap_texture();\n}",
    "renders": true
  },
  {
    "household_item": "oakglow",
    "openscad_code": "// Oakglow - realistic medium-complexity desk lamp\n// Dimensions: ~70mm tall, ~60mm wide base\n// All overhangs <=45°, wall thickness 2mm for 3D printing\n\n$fn = 50;  // Smooth curves\n\nmodule base() {\n    // Oak wood base: 60x40x8mm\n    difference() {\n        cube([60,40,8], center=true);\n        // Cable hole Ø6mm\n        translate([0,0,-1])\n            cylinder(h=10, d=6, center=true);\n    }\n}\n\nmodule stem() {\n    // Bent metal stem Ø8mm\n    translate([0,0,4])\n        rotate([90,0,0])\n            cylinder(h=30, d=8, center=false);\n    // Second segment\n    translate([0,15,4+30])\n        rotate([45,0,0])\n            cylinder(h=20, d=8, center=false);\n}\n\nmodule oak_leaf() {\n    // Single oak leaf 12x8mm\n    hull() {\n        translate([0,4,0]) sphere(d=4);\n        translate([0,-4,0]) sphere(d=4);\n        translate([6,2,0]) sphere(d=3);\n        translate([6,-2,0]) sphere(d=3);\n    }\n    // Vein detail\n    translate([0,0,1])\n        cube([12,1,0.5], center=true);\n}\n\nmodule leaf_cluster() {\n    // Cluster of 5 leaves around stem\n    for(i=[0:72:360]) {\n        rotate([0,0,i])\n            translate([10,0,25])\n                rotate([0,-15,30])\n                    oak_leaf();\n    }\n}\n\nmodule bulb_holder() {\n    // E14 socket housing Ø20mm\n    cylinder(h=15, d=20, center=true);\n    // Internal cavity Ø16mm\n    difference() {\n        cylinder(h=15, d=20, center=true);\n        cylinder(h=16, d=16, center=true);\n    }\n    // Threading ridges\n    for(i=[0:120:360]) {\n        rotate([0,0,i])\n            translate([8.5,0,0])\n                cube([1,2,15], center=true);\n    }\n}\n\nmodule shade() {\n    // Frosted glass shade\n    difference() {\n        // Main bell shape\n        scale([1,1,0.8])\n            sphere(d=40);\n        // Hollow interior\n        scale([0.9,0.9,0.7])\n            sphere(d=36);\n    }\n    // Oak leaf cutouts\n    for(i=[0:60:360]) {\n        rotate([0,0,i])\n            translate([16,0,0])\n                rotate([0,90,0])\n                    linear_extrude(height=2)\n                        projection()\n                            oak_leaf();\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    stem();\n    leaf_cluster();\n    translate([0,15+20*cos(45),4+30+20*sin(45)])\n        bulb_holder();\n    translate([0,15+20*cos(45),4+30+20*sin(45)+15])\n        shade();\n}",
    "renders": true
  },
  {
    "household_item": "pearlglow",
    "openscad_code": "// Pearlglow - Realistic Style (Medium Complexity)\n// A 3D printable decorative light / desk ornament\n\n// Overall dimensions\nscale_factor = 1.5;                // Scale to ~75 mm height\nbase_d = 60 * scale_factor;        // Base diameter\nglobe_d = 45 * scale_factor;       // Main globe diameter\nglobe_h = 40 * scale_factor;       // Globe height\ncrown_h = 12 * scale_factor;       // Crown height\nwall_t = 2 * scale_factor;         // Wall thickness for printing\n\n// Base module\nmodule base() {\n    union() {\n        // Main cylindrical base\n        cylinder(d = base_d, h = 8 * scale_factor, $fn = 100);\n        \n        // Bottom chamfer for printability\n        translate([0, 0, -0.1])\n            cylinder(d1 = base_d, d2 = base_d - 2 * wall_t, h = 3 * scale_factor, $fn = 100);\n    }\n}\n\n// Crown module (top decorative ring)\nmodule crown() {\n    difference() {\n        // Outer ring\n        cylinder(d = base_d - 4 * wall_t, h = crown_h, $fn = 100);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(d = base_d - 8 * wall_t, h = crown_h + 0.2, $fn = 100);\n    }\n}\n\n// Globe module with pearlescent facets\nmodule globe() {\n    difference() {\n        // Main sphere\n        sphere(d = globe_d, $fn = 100);\n        \n        // Hollow interior\n        sphere(d = globe_d - 2 * wall_t, $fn = 100);\n        \n        // Facet cuts for pearlescent effect\n        for (i = [0:9]) {\n            rotate([0, 0, i * 36])\n                translate([0, 0, -globe_d/2])\n                    rotate([45, 0, 0])\n                        cube([globe_d, globe_d, globe_d], center = true);\n        }\n    }\n}\n\n// Internal LED holder\nmodule led_holder() {\n    difference() {\n        // Cylindrical holder\n        translate([0, 0, -globe_h/2 + 5 * scale_factor])\n            cylinder(d = 15 * scale_factor, h = 10 * scale_factor, $fn = 32);\n        \n        // Cable channel\n        translate([-2 * scale_factor, 0, -globe_h/2 + 2 * scale_factor])\n            cube([15 * scale_factor, 4 * scale_factor, 15 * scale_factor]);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Crown\n    translate([0, 0, 8 * scale_factor + globe_h])\n        crown();\n    \n    // Globe\n    translate([0, 0, 8 * scale_factor])\n        globe();\n    \n    // LED holder inside globe\n    led_holder();\n    \n    // Ventilation holes in crown\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([(base_d - 6 * wall_t)/2, 0, 8 * scale_factor + globe_h + crown_h/2])\n                rotate([90, 0, 0])\n                    cylinder(d = 3 * scale_factor, h = wall_t + 0.2, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "quartzglow",
    "openscad_code": "/*\nQuartzGlow – realistic 3D-printable crystal lamp\nSize ≈ 65 mm tall, 50 mm wide\nAll walls ≥ 1 mm, no unsupported overhangs\n*/\n\n$fn = 48;               // global facet resolution\n\n// overall scale factor – change only this if you want bigger / smaller prints\nscaleFactor = 1.0;\n\n// Crystal body\nmodule crystal() {\n    difference() {\n        // main hexagonal prism\n        cylinder(h = 40 * scaleFactor, r1 = 23 * scaleFactor, r2 = 18 * scaleFactor, center = true);\n\n        // longitudinal facets\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 22 * scaleFactor, 0])\n            rotate([0, 0, 30])\n            cube([40 * scaleFactor, 1.2 * scaleFactor, 45 * scaleFactor], center = true);\n        }\n\n        // tip facets to form point\n        translate([0, 0, 20 * scaleFactor])\n        rotate([0, 0, 0])\n        cylinder(h = 30 * scaleFactor, r1 = 18 * scaleFactor, r2 = 0, center = false);\n    }\n\n    // bottom truncation so it can stand\n    translate([0, 0, -21 * scaleFactor])\n    cube([50 * scaleFactor, 50 * scaleFactor, 5 * scaleFactor], center = true);\n}\n\n// LED holder cavity inside crystal (generous clearance for wiring)\nmodule ledCavity() {\n    color(\"lightgray\")\n    translate([0, 0, -5 * scaleFactor])\n    cylinder(h = 35 * scaleFactor, r = 8 * scaleFactor, center = true);\n}\n\n// Base plate with wire slot\nmodule base() {\n    difference() {\n        union() {\n            // base disc\n            cylinder(h = 8 * scaleFactor, r = 25 * scaleFactor, center = false);\n\n            // rim to capture crystal\n            translate([0, 0, 8 * scaleFactor])\n            cylinder(h = 2 * scaleFactor, r = 25 * scaleFactor, r1 = 25 * scaleFactor, r2 = 23 * scaleFactor, center = false);\n        }\n\n        // central hole for LED module\n        translate([0, 0, -1])\n        cylinder(h = 10 * scaleFactor, r = 8.5 * scaleFactor, center = false);\n\n        // wire channel\n        translate([0, -25 * scaleFactor, 4 * scaleFactor])\n        cube([4 * scaleFactor, 25 * scaleFactor, 8 * scaleFactor], center = false);\n    }\n}\n\n// final assembly\nmodule quartzGlow() {\n    // base\n    color(\"dimgray\")\n    base();\n\n    // crystal shell (translucent material)\n    translate([0, 0, 10 * scaleFactor])\n    color(\"white\", 0.3)\n    difference() {\n        crystal();\n        ledCavity();\n    }\n}\n\n// render\nquartzGlow();",
    "renders": true
  },
  {
    "household_item": "rimeglow",
    "openscad_code": "// Rimelight / Rimeglow – realistic, medium-complexity desk lamp\n// Approx. 85 mm tall, 60 mm wide – no overhangs > 45°\n// Designed for 3D-printing (0.4 mm nozzle, 0.2 mm layer)\n\n$fn = 60;           // smooth curves\nwall = 1.6;         // wall thickness for FDM\n\nmodule base() {\n    // Circular base with shallow cone for stability\n    difference() {\n        cylinder(h = 8, d = 55, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = 8.2, d = 52, center = false);\n    }\n}\n\nmodule neck() {\n    // Slight taper for wire channel\n    translate([0, 0, 8])           // sit on base\n        difference() {\n            cylinder(h = 15, d1 = 18, d2 = 15);\n            translate([0, 0, -0.1])\n                cylinder(h = 15.2, d1 = 15, d2 = 12);\n        }\n}\n\nmodule swivel_joint() {\n    // Ball-socket for tilt adjustment (printed pre-assembled)\n    // Ball\n    translate([0, 0, 23])\n        sphere(d = 14);\n    // Socket shell\n    difference() {\n        translate([0, 0, 23])\n            sphere(d = 14 + wall*2);\n        translate([0, 0, 23])\n            sphere(d = 14 + 0.4);   // clearance\n    }\n}\n\nmodule arm() {\n    // Hollow tube from socket to lamp head\n    rotate([0, -30, 0])            // 30° upward tilt\n        translate([0, 0, 30])\n            difference() {\n                cylinder(h = 35, d = 12);\n                translate([0, 0, -0.1])\n                    cylinder(h = 35.2, d = 12 - wall*2);\n            }\n}\n\nmodule lamp_head() {\n    // Realistic shallow cylindrical lamp head with LED diffuser\n    translate([0, 0, 30 + 35])     // end of arm\n    rotate([0, -30, 0])            // align with arm\n    union() {\n        // Outer shell\n        difference() {\n            cylinder(h = 20, d = 40);\n            translate([0, 0, -0.1])\n                cylinder(h = 20.2, d = 40 - wall*2);\n        }\n        // Diffuser disc\n        translate([0, 0, 2])\n            color(\"cornsilk\")\n            cylinder(h = 1.2, d = 38 - wall*2);\n        // Ventilation slots\n        for (a = [0:45:315])\n            rotate([0, 0, a])\n                translate([18, 0, 10])\n                    cube([4, 1, 8], center = true);\n    }\n}\n\nmodule button() {\n    // Touch-capacitive button on base\n    translate([0, 25, 8])\n        difference() {\n            cylinder(h = 4, d = 8);\n            translate([0, 0, -0.1])\n                cylinder(h = 4.2, d = 5);\n        }\n}\n\nmodule cable_exit() {\n    // Small slot at rear for power cable\n    translate([0, -25, 4])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 6);\n}\n\n// Build the lamp\nunion() {\n    base();\n    neck();\n    swivel_joint();\n    arm();\n    lamp_head();\n    button();\n    cable_exit();\n}",
    "renders": true
  },
  {
    "household_item": "sableglow",
    "openscad_code": "// Sableglow - Realistic style, medium complexity\n// A small desk-lamp shaped like the Sableglow from Animal Crossing\n\n// Overall dimensions\nbase_d = 55;\nbase_h = 7;\nstem_d = 6;\nstem_h = 40;\nshade_d = 45;\nshade_h = 35;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main module\nmodule sableglow() {\n    color(\"antiquewhite\")\n    union() {\n        // Base with slight taper for easy printing\n        translate([0, 0, 0])\n            cylinder(d1 = base_d, d2 = base_d * 0.95, h = base_h, $fn = 60);\n\n        // Rubber ring detail on base\n        translate([0, 0, base_h - 0.5])\n            cylinder(d = base_d * 0.85, h = 1, $fn = 60);\n\n        // Stem\n        translate([0, 0, base_h])\n            cylinder(d = stem_d, h = stem_h, $fn = 32);\n\n        // Transition collar between stem and shade\n        translate([0, 0, base_h + stem_h])\n            cylinder(d1 = stem_d * 1.6, d2 = shade_d * 0.4, h = 3, $fn = 32);\n\n        // Shade outer shell\n        translate([0, 0, base_h + stem_h + 3])\n            cylinder(d1 = shade_d, d2 = shade_d * 0.9, h = shade_h, $fn = 60);\n\n        // Inner cavity for light source\n        translate([0, 0, base_h + stem_h + wall + 3])\n            cylinder(d1 = shade_d - wall * 2, d2 = shade_d * 0.9 - wall * 2, h = shade_h - wall, $fn = 60);\n    }\n\n    // Handle loop on top\n    color(\"dimgray\")\n    translate([0, 0, base_h + stem_h + 3 + shade_h])\n        rotate([90, 0, 0])\n            torus(r1 = shade_d * 0.2, r2 = 2.5);\n\n    // Perforation holes for heat dissipation\n    color(\"antiquewhite\")\n    for (a = [0:30:359]) {\n        rotate([0, 0, a])\n            translate([shade_d * 0.42, 0, base_h + stem_h + shade_h / 2])\n                rotate([90, 0, 0])\n                    cylinder(d = 3, h = wall + 0.1, $fn = 8);\n    }\n\n    // Switch detail on stem\n    color(\"dimgray\")\n    translate([0, stem_d / 2, base_h + stem_h * 0.3])\n        cube([4, 6, 2], center = true);\n}\n\n// Helper module for torus (handle)\nmodule torus(r1, r2) {\n    rotate_extrude($fn = 32)\n        translate([r1, 0, 0])\n            circle(r = r2, $fn = 16);\n}\n\n// Render the model\nsableglow();",
    "renders": true
  },
  {
    "household_item": "thistleglow",
    "openscad_code": "// Thistleglow - Realistic style, medium complexity\n// A 3D printable thistle flower with glowing center\n\n// Parameters for sizing\nstem_height = 60;\nstem_diameter = 3;\nflower_diameter = 40;\nflower_height = 25;\nspike_length = 8;\nspike_thickness = 1.2;\ncenter_glow_diameter = 12;\npetal_count = 24;\n\n// Main module\nmodule thistleglow() {\n    union() {\n        // Stem\n        stem();\n        \n        // Flower head\n        translate([0, 0, stem_height])\n            rotate([0, 0, 180])\n                flower_head();\n    }\n}\n\n// Stem module\nmodule stem() {\n    color(\"darkgreen\")\n    cylinder(h=stem_height, d=stem_diameter, $fn=16);\n}\n\n// Flower head module\nmodule flower_head() {\n    difference() {\n        // Main flower structure\n        union() {\n            // Base bulb\n            base_bulb();\n            \n            // Spiky petals\n            spiky_petals();\n            \n            // Center glow bulb\n            center_glow();\n        }\n        \n        // Hollow out for printing\n        translate([0, 0, -flower_height/2])\n            cylinder(h=flower_height+5, d=flower_diameter-6, $fn=32);\n    }\n}\n\n// Base bulb of flower\nmodule base_bulb() {\n    color(\"green\")\n    sphere(d=flower_diameter, $fn=32);\n}\n\n// Spiky petals around flower\nmodule spiky_petals() {\n    for(i = [0:petal_count-1]) {\n        rotate([0, 0, i*360/petal_count])\n            translate([flower_diameter/2 - spike_length/2, 0, 0])\n                rotate([0, 90, 0])\n                    single_spike();\n    }\n}\n\n// Single spike petal\nmodule single_spike() {\n    color(\"purple\")\n    union() {\n        // Main spike\n        cylinder(h=spike_length, d1=spike_thickness*1.5, d2=spike_thickness, $fn=8);\n        \n        // Small barbs\n        for(i = [1:3]) {\n            translate([0, 0, i*spike_length/4])\n                rotate([0, 0, 45])\n                    scale([0.3, 1, 0.3])\n                        cube([spike_thickness, spike_thickness*3, spike_thickness], center=true);\n        }\n    }\n}\n\n// Center glowing part\nmodule center_glow() {\n    color(\"goldenrod\")\n    difference() {\n        sphere(d=center_glow_diameter, $fn=32);\n        \n        // Cut flat bottom\n        translate([0, 0, -center_glow_diameter/2])\n            cube([center_glow_diameter*2, center_glow_diameter*2, center_glow_diameter], center=true);\n        \n        // Inner glow cavity\n        sphere(d=center_glow_diameter-4, $fn=32);\n    }\n}\n\n// Generate the model\nthistleglow();",
    "renders": true
  },
  {
    "household_item": "umbralglow",
    "openscad_code": "// Umbralglow - Realistic style, medium complexity\n// A mystical floating crystal with swirling energy tendrils\n\n// Global parameters\ncrystal_size = 30;\nbase_size = 40;\ntendril_count = 8;\nwall_thickness = 2;\n\n// Main module\nmodule umbralglow() {\n    \n    // Central crystal structure\n    translate([0, 0, base_size/2 + crystal_size/2])\n    rotate([0, 0, 45])\n    crystal(crystal_size);\n    \n    // Base platform\n    translate([0, 0, 0])\n    base_platform(base_size);\n    \n    // Energy tendrils\n    for (i = [0 : tendril_count-1]) {\n        angle = i * (360 / tendril_count);\n        radius = base_size * 0.7;\n        translate([cos(angle) * radius, sin(angle) * radius, base_size/2])\n        rotate([0, 0, angle])\n        tendril(crystal_size * 0.8, 5);\n    }\n    \n    // Support pillars\n    for (i = [0 : 3]) {\n        angle = i * 90;\n        radius = base_size * 0.4;\n        translate([cos(angle) * radius, sin(angle) * radius, 0])\n        pillar(base_size);\n    }\n}\n\n// Crystal module - octahedral shape with faceted cuts\nmodule crystal(size) {\n    // Main octahedron\n    difference() {\n        // Base octahedron from 8 pyramids\n        union() {\n            for (face = [0 : 7]) {\n                rotate([0, 0, face * 45])\n                translate([0, 0, -size/4])\n                pyramid(size, size/2);\n            }\n        }\n        \n        // Faceted cuts\n        for (cut = [0 : 3]) {\n            rotate([0, 0, cut * 90])\n            translate([0, size/3, 0])\n            rotate([45, 0, 0])\n            cube([size*1.5, size*1.5, size*1.5], center=true);\n        }\n    }\n}\n\n// Pyramid helper for crystal construction\nmodule pyramid(base, height) {\n    linear_extrude(height=height, scale=0.01)\n    square(base, center=true);\n}\n\n// Base platform with ornate details\nmodule base_platform(size) {\n    difference() {\n        // Main base\n        cylinder(h=size/4, r=size/2, $fn=64);\n        \n        // Central cavity\n        cylinder(h=size/4+1, r=size/3, $fn=64);\n        \n        // Decorative grooves\n        for (r = [size/3, size/2.5, size/2.2]) {\n            cylinder(h=size/8, r1=r+wall_thickness, r2=r, $fn=64);\n        }\n    }\n    \n    // Bottom rim\n    translate([0, 0, -wall_thickness])\n    cylinder(h=wall_thickness*2, r=size/2+wall_thickness, r2=size/2, $fn=64);\n}\n\n// Energy tendril - flowing curved structure\nmodule tendril(length, thickness) {\n    // Create curved tendril using hull of spheres\n    steps = 8;\n    for (step = [0 : steps-1]) {\n        z = step * length / steps;\n        x = sin(step * 30) * length/4;\n        y = cos(step * 30) * length/4;\n        \n        translate([x, y, z])\n        sphere(d=thickness * (1 - step/steps), $fn=16);\n    }\n    \n    // Connect spheres with cylinders for printability\n    for (step = [0 : steps-2]) {\n        z1 = step * length / steps;\n        x1 = sin(step * 30) * length/4;\n        y1 = cos(step * 30) * length/4;\n        \n        z2 = (step+1) * length / steps;\n        x2 = sin((step+1) * 30) * length/4;\n        y2 = cos((step+1) * 30) * length/4;\n        \n        translate([(x1+x2)/2, (y1+y2)/2, (z1+z2)/2])\n        rotate([0, atan2(sqrt((x2-x1)^2 + (y2-y1)^2), z2-z1), atan2(y2-y1, x2-x1)])\n        cylinder(h=sqrt((x2-x1)^2 + (y2-y1)^2 + (z2-z1)^2), \n                d1=thickness * (1 - step/steps),\n                d2=thickness * (1 - (step+1)/steps),\n                $fn=16);\n    }\n}\n\n// Support pillar\nmodule pillar(height) {\n    cylinder(h=height/2, r=wall_thickness*2, $fn=32);\n    translate([0, 0, height/2])\n    sphere(d=wall_thickness*4, $fn=32);\n}\n\n// Render the model\numbralglow();",
    "renders": true
  },
  {
    "household_item": "verdantglow",
    "openscad_code": "// VerdantGlow – medium-complexity realistic style mushroom lamp\n// Designed for FDM printing; no extreme overhangs, 1 mm shell walls\n// Overall height ≈ 70 mm, base diameter ≈ 60 mm\n\n// Parameters\n$fn = 32;          // global resolution\nwall = 1.2;        // shell thickness\nh_stem = 40;       // stem height\nr_base = 30;       // base radius\nr_cap = 28;        // cap radius\ngill_step = 3.5;   // spacing between gills\ncap_thick = 5;     // cap shell thickness\nled_r = 5.5;       // LED cavity radius\nled_h = 8;         // LED cavity depth\n\nmodule stem() {\n    difference() {\n        // outer shell\n        cylinder(h = h_stem, r1 = r_base, r2 = r_base * 0.7, center = false);\n        // hollow inside\n        translate([0, 0, wall])\n            cylinder(h = h_stem - wall, r1 = r_base - wall, r2 = r_base * 0.7 - wall, center = false);\n        // wiring channel\n        translate([0, 0, -1])\n            cylinder(h = h_stem + 2, r = 2.5, center = false);\n    }\n}\n\nmodule cap() {\n    difference() {\n        // outer dome\n        scale([1, 1, 0.65])\n            sphere(r = r_cap);\n        // inner cavity\n        translate([0, 0, cap_thick])\n            scale([1, 1, 0.65])\n                sphere(r = r_cap - cap_thick);\n    }\n}\n\nmodule gills() {\n    // radial gills under cap\n    for (i = [0 : gill_step : 359]) {\n        rotate([0, 0, i])\n            translate([r_cap * 0.25, 0, 0])\n                cube([r_cap * 0.9, wall, cap_thick * 0.9], center = true);\n    }\n}\n\nmodule base_bottom() {\n    // flat base plate for printer bed adhesion\n    cylinder(h = 2, r = r_base, center = false);\n}\n\nmodule led_holder() {\n    // cavity for 5 mm LED\n    translate([0, 0, h_stem - led_h - 1])\n        cylinder(h = led_h, r = led_r, center = false);\n}\n\n// Assembly\nunion() {\n    base_bottom();\n    stem();\n    translate([0, 0, h_stem])\n        union() {\n            cap();\n            gills();\n            led_holder();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "whisperglow",
    "openscad_code": "// WhisperGlow - Realistic style 3D printable model\n// Medium complexity, 3D printable with no overhangs\n\nmodule base() {\n    // Main base cylinder with slight taper\n    cylinder(h=8, r1=22, r2=20, $fn=64);\n    \n    // Base ring detail\n    translate([0, 0, 8])\n        cylinder(h=2, r=24, $fn=64);\n}\n\nmodule vent_holes() {\n    // Create 8 vent holes around the top\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([0, 16, 4])\n                rotate([90, 0, 0])\n                    cylinder(h=20, r=1.5, $fn=16);\n    }\n}\n\nmodule top_section() {\n    // Main top dome\n    translate([0, 0, 10])\n        sphere(r=20, $fn=64);\n    \n    // Ventilation holes (difference them from dome)\n    difference() {\n        translate([0, 0, 10])\n            sphere(r=20, $fn=64);\n        vent_holes();\n    }\n    \n    // Inner cavity for electronics\n    translate([0, 0, 10])\n        sphere(r=16, $fn=64);\n}\n\nmodule power_button() {\n    // Small button on side\n    translate([0, 25, 15])\n        cylinder(h=2, r=3, $fn=32);\n    \n    // Button surround\n    translate([0, 25, 13])\n        cylinder(h=3, r=4.5, $fn=32);\n}\n\nmodule charging_port() {\n    // Micro-USB port recess\n    translate([25, 0, 8])\n        cube([5, 7, 3], center=true);\n    \n    // Port surround\n    translate([25, 0, 8])\n        cube([7, 9, 2], center=true);\n}\n\nmodule led_ring() {\n    // LED ring inside top\n    translate([0, 0, 12])\n        rotate_extrude($fn=64)\n            translate([15, 0])\n                square([2, 1]);\n}\n\nmodule grip_texture() {\n    // Horizontal grip lines around base\n    for(z=[2:2:8]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=0.5, r=22.5, $fn=64);\n                cylinder(h=0.5, r=21.5, $fn=64);\n            }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        base();\n        top_section();\n        power_button();\n        charging_port();\n        grip_texture();\n    }\n    \n    // Remove internal space for electronics\n    translate([0, 0, 5])\n        cylinder(h=30, r=18, $fn=64);\n    \n    // Remove charging port hole\n    translate([25, 0, 8])\n        cube([6, 8, 4], center=true);\n    \n    // Remove power button hole\n    translate([0, 25, 14])\n        cylinder(h=4, r=2.5, $fn=32);\n    \n    // LED visibility window\n    translate([0, 0, 12])\n        sphere(r=17.5, $fn=64);\n}\n\n// Add LED ring\nled_ring();",
    "renders": true
  },
  {
    "household_item": "xyloglow",
    "openscad_code": "// XYLOGLOW – medium-complexity, realistic style\n// All measures in mm; largest dimension ≈ 80 mm\n\n$fn = 36;          // global circle quality\n\n// overall size control ---------------------------------\nglow_scale = 1;    // change to scale entire model\nbody_h   = 40;\nbody_r   = 17;\nring_gap = 2;\nring_h   = 8;\nring_r   = body_r + 3;\ncap_h    = 12;\ncap_r    = body_r - 1;\nglow_top = 15;\nglow_r   = 10;\nwall_t   = 1.6;    // safe for FDM printing\n\nmodule xyloglow() {\n    // main body tube ----------------------------------\n    difference() {\n        cylinder(h = body_h, r = body_r);\n        translate([0,0,-0.1])\n            cylinder(h = body_h + 0.2, r = body_r - wall_t);\n    }\n\n    // grip rings --------------------------------------\n    for(z = [ring_h, 2*ring_h + ring_gap])\n        translate([0,0,z])\n            difference() {\n                cylinder(h = ring_h, r = ring_r);\n                translate([0,0,-0.1])\n                    cylinder(h = ring_h + 0.2, r = body_r);\n            }\n\n    // removable cap -----------------------------------\n    translate([0,0,body_h])\n        union() {\n            // cap shell\n            difference() {\n                cylinder(h = cap_h, r = cap_r);\n                translate([0,0,-0.1])\n                    cylinder(h = cap_h + 0.2, r = cap_r - wall_t);\n            }\n            // small nub for gripping\n            translate([0,0,cap_h])\n                cylinder(h = 5, r1 = cap_r - 4, r2 = 0);\n        }\n\n    // glowing element ---------------------------------\n    translate([0,0,body_h + cap_h + 2])\n        difference() {\n            sphere(r = glow_r);\n            // cavity for electronics\n            translate([0,0,-glow_r])\n                sphere(r = glow_r - wall_t);\n        }\n\n    // simple hex keychain loop ------------------------\n    translate([body_r + 2, 0, body_h/2])\n        rotate([0,90,0])\n            difference() {\n                cylinder(h = 6, r = 3);\n                cylinder(h = 7, r = 1.5);\n            }\n}\n\nscale(glow_scale) xyloglow();",
    "renders": true
  },
  {
    "household_item": "yearnglow",
    "openscad_code": "// YearnGlow – realistic, medium-complexity, 3D-printable lantern\n// Overall height ≈ 80 mm, max width ≈ 60 mm\n// All walls ≥ 1.2 mm, no critical overhangs\n\n$fn = 36;          // smooth curves\n\nmodule base() {    // 55 mm Ø × 15 mm tall\n    difference() {\n        cylinder(h = 15, d = 55, center = false);\n        translate([0,0,1]) cylinder(h = 15, d = 50);\n    }\n}\n\nmodule legs() {    // three 3 mm thick legs\n    for(a=[0,120,240])\n        rotate([0,0,a])\n            translate([0, 22.5, 0])\n                cube([3, 3, 55], center = true);\n}\n\nmodule ring() {    // top retaining ring\n    difference() {\n        cylinder(h = 5, d = 53);\n        translate([0,0,1]) cylinder(h = 7, d = 48);\n    }\n}\n\nmodule handle() {  // simple arch handle\n    difference() {\n        rotate_extrude(angle = 180, convexity = 2)\n            translate([26,0,0]) circle(r = 2.5);\n        rotate_extrude(angle = 180, convexity = 2)\n            translate([26,0,0]) circle(r = 1.5);\n    }\n    translate([-2.5,0,0]) cube([5, 2.5, 2.5]);\n    translate([-2.5,0,-2.5]) cube([5, 2.5, 2.5]);\n}\n\nmodule glow_core() {  // removable LED puck cavity\n    difference() {\n        cylinder(h = 10, d = 40);\n        translate([0,0,1]) cylinder(h = 12, d = 36);\n    }\n}\n\nmodule diffuser() {  // thin translucent shell\n    difference() {\n        cylinder(h = 50, d = 51);\n        translate([0,0,1.2]) cylinder(h = 50, d = 48.5);\n    }\n}\n\n// Assembly\ntranslate([0,0,0]) base();\ntranslate([0,0,15]) legs();\ntranslate([0,0,15]) glow_core();\ntranslate([0,0,15]) diffuser();\ntranslate([0,0,65]) ring();\ntranslate([0,0,70]) rotate([0,90,0]) handle();",
    "renders": true
  },
  {
    "household_item": "zephyrglow",
    "openscad_code": "// Zephyrglow - Realistic Medium Complexity\n// A fantasy lantern that emits soft wind-carried light\n// Designed for 3D printing - no overhangs >45°, 1.2mm walls\n\n$fn = 36;  // Smooth curves for printing\n\n// Main dimensions\nbase_d = 40;          // Base diameter\nbase_h = 8;           // Base thickness\nbody_h = 45;          // Main body height\ntop_d = 32;           // Top opening diameter\nwall_t = 1.2;         // Wall thickness for printing\nwindow_num = 6;       // Number of windows\n\nmodule zephyrglow() {\n    union() {\n        // Base with wind channels\n        base();\n        \n        // Main body with windows\n        body();\n        \n        // Top rim with attachment points\n        top_rim();\n        \n        // Internal light chamber\n        light_chamber();\n        \n        // Decorative wind fins\n        wind_fins();\n    }\n}\n\nmodule base() {\n    difference() {\n        // Solid base\n        cylinder(h = base_h, d = base_d);\n        \n        // Central hole for wiring\n        cylinder(h = base_h + 0.1, d = 8, center = true);\n        \n        // Wind intake channels\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([base_d/2 - 6, 0, base_h/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, d = 4);\n            }\n        }\n        \n        // Base ventilation holes\n        for(i = [0:window_num-1]) {\n            rotate([0, 0, i * 360/window_num + 15]) {\n                translate([base_d/2 - 4, 0, base_h - 2])\n                    cube([8, 2, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main body shell\n        cylinder(h = body_h, d1 = base_d, d2 = top_d);\n        \n        // Hollow out interior\n        translate([0, 0, wall_t])\n            cylinder(h = body_h, d1 = base_d - wall_t*2, d2 = top_d - wall_t*2);\n        \n        // Windows for light emission\n        for(i = [0:window_num-1]) {\n            rotate([0, 0, i * 360/window_num]) {\n                translate([base_d/2 - wall_t - 2, 0, body_h/2])\n                    rotate([0, 90, 0])\n                        cylinder(h = 8, d1 = 6, d2 = 4);\n            }\n        }\n    }\n}\n\nmodule top_rim() {\n    difference() {\n        // Solid rim\n        translate([0, 0, body_h])\n            cylinder(h = 6, d = top_d + 4);\n        \n        // Hollow center\n        translate([0, 0, body_h])\n            cylinder(h = 7, d = top_d);\n        \n        // Hanging loops\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([top_d/2 + 2, 0, body_h + 3])\n                    rotate([90, 0, 0])\n                        difference() {\n                            cylinder(h = 4, d = 3);\n                            translate([0, 0, -0.1])\n                                cylinder(h = 4.2, d = 1.5);\n                        }\n            }\n        }\n    }\n}\n\nmodule light_chamber() {\n    // Internal LED holder\n    translate([0, 0, base_h + 5])\n        difference() {\n            cylinder(h = 10, d = 12);\n            cylinder(h = 11, d = 10);\n        }\n    \n    // Light diffuser support\n    translate([0, 0, base_h + 15])\n        cylinder(h = 0.5, d = base_d - wall_t*4);\n}\n\nmodule wind_fins() {\n    // Decorative fins that catch wind\n    for(i = [0:window_num-1]) {\n        rotate([0, 0, i * 360/window_num + 30]) {\n            translate([base_d/2 - 1, 0, body_h/2])\n                rotate([0, 90, 0])\n                    scale([1, 0.3, 1])\n                        difference() {\n                            cylinder(h = 15, d = 6);\n                            translate([0, 0, -1])\n                                cylinder(h = 17, d = 3);\n                        }\n        }\n    }\n}\n\n// Generate the model\nzephyrglow();",
    "renders": true
  },
  {
    "household_item": "zombie",
    "openscad_code": "// Realistic Zombie - 3D Printable Model\n// Medium complexity, ~50-100mm tall\n\n// Overall scale factor\nscale_factor = 1;\n\n// Basic proportions\nhead_radius = 8;\nbody_height = 25;\nbody_width = 12;\narm_length = 15;\nleg_length = 20;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule torso() {\n    // Main torso block\n    difference() {\n        union() {\n            // Chest\n            translate([0, 0, body_height/2])\n                cube([body_width, body_width*0.7, body_height], center=true);\n            \n            // Ribs detail\n            for(i = [-1:1]) {\n                translate([0, body_width*0.35, 10 + i*4])\n                    cube([body_width*0.9, wall, wall/2], center=true);\n            }\n        }\n        \n        // Hollow center\n        translate([0, 0, body_height/2])\n            cube([body_width-wall*2, body_width*0.7-wall*2, body_height-wall], center=true);\n    }\n}\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, body_height + head_radius])\n        sphere(head_radius);\n    \n    // Hollow head\n    translate([0, 0, body_height + head_radius])\n        sphere(head_radius-wall);\n    \n    // Jaw\n    difference() {\n        translate([0, head_radius*0.8, body_height + head_radius*0.7])\n            cube([head_radius*1.5, head_radius*1.2, head_radius*0.8], center=true);\n        \n        // Hollow jaw\n        translate([0, head_radius*0.8, body_height + head_radius*0.7])\n            cube([head_radius*1.3, head_radius, head_radius*0.6], center=true);\n    }\n    \n    // Eye sockets\n    for(x = [-1:1]) {\n        translate([x*head_radius*0.4, head_radius*0.5, body_height + head_radius*1.1])\n            sphere(head_radius*0.3);\n    }\n}\n\nmodule arm(side) {\n    // Shoulder\n    translate([side*body_width/2, 0, body_height*0.8])\n        sphere(arm_length*0.2);\n    \n    // Upper arm\n    translate([side*body_width/2, 0, body_height*0.6])\n        rotate([0, 0, side*20])\n        cylinder(h=arm_length*0.5, r=arm_length*0.15, center=false);\n    \n    // Forearm\n    translate([side*body_width/2 - side*arm_length*0.4, 0, body_height*0.3])\n        rotate([0, 0, side*45])\n        cylinder(h=arm_length*0.5, r=arm_length*0.12, center=false);\n    \n    // Hand\n    translate([side*body_width/2 - side*arm_length*0.7, 0, body_height*0.1])\n        sphere(arm_length*0.2);\n}\n\nmodule leg(side) {\n    // Upper leg\n    translate([side*body_width*0.3, 0, -leg_length*0.5])\n        cylinder(h=leg_length*0.5, r=body_width*0.25, center=true);\n    \n    // Lower leg\n    translate([side*body_width*0.3, 0, -leg_length*0.75])\n        cylinder(h=leg_length*0.5, r=body_width*0.15, center=true);\n    \n    // Foot\n    translate([side*body_width*0.3, body_width*0.3, -leg_length])\n        cube([body_width*0.5, body_width*0.8, wall*2], center=true);\n}\n\nmodule wounds() {\n    // Chest wound\n    translate([body_width*0.2, 0, body_height*0.7])\n        sphere(body_width*0.3);\n    \n    // Arm wounds\n    for(i = [0:2]) {\n        translate([body_width*0.6, 0, body_height*0.5 - i*3])\n            sphere(arm_length*0.1);\n    }\n}\n\n// Assemble the zombie\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Main body\n    union() {\n        torso();\n        head();\n        \n        // Arms\n        arm(1);\n        arm(-1);\n        \n        // Legs\n        leg(1);\n        leg(-1);\n        \n        // Damage details\n        wounds();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "ghost",
    "openscad_code": "// Realistic Ghost - Medium Complexity\n// Size: 60mm tall, 3D-printable with 1mm walls\n\n// Parameters\n$fn = 32;\nwall_thickness = 1.2;\nscale_factor = 1;\n\n// Main ghost body module\nmodule ghost_body() {\n    // Hollow head sphere\n    difference() {\n        sphere(d = 20);\n        sphere(d = 20 - wall_thickness*2);\n    }\n}\n\n// Flowing sheet body\nmodule ghost_sheet() {\n    union() {\n        // Upper torso\n        difference() {\n            scale([1, 0.8, 1.2])\n                sphere(d = 22);\n            translate([0, 0, -wall_thickness])\n                scale([1 - wall_thickness/22, 0.8 - wall_thickness/22, 1.2 - wall_thickness/11])\n                    sphere(d = 22);\n        }\n        \n        // Flowing bottom parts\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, 8, -15])\n                    scale([1, 0.6, 1])\n                        sheet_flap();\n        }\n    }\n}\n\n// Individual flowing sheet flap\nmodule sheet_flap() {\n    difference() {\n        // Main flap\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h = 20, d1 = 8, d2 = 12);\n            translate([0, 12, -5])\n                cylinder(h = 20, d1 = 6, d2 = 10);\n        }\n        \n        // Hollow out\n        translate([0, 0, wall_thickness])\n            scale([1 - wall_thickness/8, 1 - wall_thickness/12, 1])\n                hull() {\n                    translate([0, 0, 0])\n                        cylinder(h = 20 - wall_thickness, d1 = 8 - wall_thickness*2, d2 = 12 - wall_thickness*2);\n                    translate([0, 12, -5])\n                        cylinder(h = 20 - wall_thickness, d1 = 6 - wall_thickness*2, d2 = 10 - wall_thickness*2);\n                }\n    }\n}\n\n// Ghost eyes\nmodule ghost_eyes() {\n    for(x = [-6, 6]) {\n        translate([x, -8, 5])\n            rotate([0, 10, 0])\n                difference() {\n                    // Eye socket\n                    scale([1, 1.5, 0.8])\n                        sphere(d = 4);\n                    \n                    // Eye hole\n                    translate([0, 0, 1])\n                        sphere(d = 4 - wall_thickness);\n                }\n    }\n}\n\n// Ghost mouth\nmodule ghost_mouth() {\n    translate([0, -2, 0])\n        rotate([15, 0, 0])\n            difference() {\n                // Mouth cavity\n                scale([1.5, 1, 0.5])\n                    cylinder(h = 5, d = 8);\n                \n                // Hollow\n                translate([0, 0, wall_thickness])\n                    scale([1.5 - wall_thickness/4, 1 - wall_thickness/8, 0.5])\n                        cylinder(h = 5 - wall_thickness, d = 8 - wall_thickness*2);\n            }\n}\n\n// Assemble complete ghost\nscale(scale_factor) {\n    union() {\n        // Body\n        ghost_body();\n        \n        // Sheet\n        ghost_sheet();\n        \n        // Face features\n        ghost_eyes();\n        ghost_mouth();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "lich",
    "openscad_code": "// Lich model for 3D printing\n// Medium complexity realistic style\n\n$fn = 32;\n\nmodule skull() {\n    // Main skull\n    difference() {\n        sphere(12);\n        // Eye sockets\n        translate([-5, 7, 3]) rotate([0, 10, 0]) sphere(3.5);\n        translate([5, 7, 3]) rotate([0, -10, 0]) sphere(3.5);\n        // Nose cavity\n        translate([0, 9, 0]) cube([4, 6, 8], center=true);\n        // Jaw cut\n        translate([0, 0, -9]) cube([20, 20, 6], center=true);\n    }\n    \n    // Jaw\n    translate([0, 0, -12]) rotate([15, 0, 0]) \n        difference() {\n            cube([10, 12, 8], center=true);\n            translate([0, -4, 2]) cube([8, 8, 6], center=true);\n        }\n    \n    // Teeth\n    for(i = [-3:1:3]) {\n        translate([i*2, -6, -11]) cube([1.5, 2, 3]);\n    }\n}\n\nmodule spine() {\n    // Spine segments\n    for(i = [0:1:4]) {\n        translate([0, 0, -15 - i*6]) \n            rotate([0, 10*i, 0])\n            cylinder(h=5, r1=4-i*0.3, r2=4-i*0.4);\n    }\n}\n\nmodule ribcage() {\n    // Central spine\n    cylinder(h=20, r=3, center=true);\n    \n    // Ribs\n    for(i = [0:1:6]) {\n        rotate([0, 0, i*51.4])\n        translate([0, 0, -5 + i*2.5])\n            union() {\n                // Left rib\n                translate([-6, 0, 0]) cube([12, 1.5, 1.5]);\n                // Right rib\n                translate([6, 0, 0]) cube([12, 1.5, 1.5]);\n            }\n    }\n}\n\nmodule arm(side) {\n    mirror([side, 0, 0]) {\n        // Shoulder blade\n        translate([-4, 0, 5]) cube([3, 2, 8]);\n        \n        // Upper arm\n        translate([-8, 0, 2]) \n            rotate([0, 0, -20])\n            cylinder(h=12, r=2);\n        \n        // Lower arm\n        translate([-17, 0, -2]) \n            rotate([0, 0, -30])\n            cylinder(h=12, r=1.8);\n        \n        // Hand\n        translate([-25, 0, -4]) {\n            cube([5, 1.5, 4], center=true);\n            // Fingers\n            for(f = [-1.5, -0.5, 0.5, 1.5]) {\n                translate([-27, f*0.7, -4]) cube([2, 0.8, 0.8]);\n            }\n        }\n    }\n}\n\nmodule staff() {\n    // Staff shaft\n    rotate([0, 0, 25])\n    translate([-30, -30, -40])\n        cylinder(h=70, r=1.5);\n    \n    // Staff top crystal\n    translate([-45, -45, 25])\n        sphere(4);\n    \n    // Staff base\n    translate([-30, -30, -45])\n        cylinder(h=3, r=3);\n}\n\nmodule robe() {\n    // Main robe body\n    difference() {\n        cylinder(h=35, r1=20, r2=25);\n        // Hollow inside\n        translate([0, 0, -2])\n            cylinder(h=40, r1=15, r2=20);\n    }\n    \n    // Hood\n    translate([0, 0, 20]) {\n        difference() {\n            sphere(15);\n            translate([0, 5, 2]) sphere(12);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Head and spine\n    skull();\n    spine();\n    \n    // Torso\n    translate([0, 0, -25]) ribcage();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Robe\n    translate([0, 0, -40]) robe();\n    \n    // Staff in right hand\n    staff();\n}",
    "renders": true
  },
  {
    "household_item": "skeleton",
    "openscad_code": "// Realistic skeleton - medium complexity\n// Approx 80mm tall, designed for FDM printing\n\n$fn = 32;\n\n// Overall scale and wall thickness\nscale_factor = 0.4;\nwall = 2;\n\nmodule bone_cylinder(h, r1, r2 = r1) {\n    difference() {\n        cylinder(h = h, r1 = r1, r2 = r2);\n        translate([0, 0, wall])\n        cylinder(h = h - wall*2, r1 = r1 - wall, r2 = r2 - wall);\n    }\n}\n\nmodule joint_sphere(r) {\n    difference() {\n        sphere(r = r);\n        sphere(r = r - wall);\n    }\n}\n\nmodule rib_curve() {\n    for(i = [0:10]) {\n        rotate([0, i*4 - 20, 0])\n        translate([0, 0, i*2])\n        rotate([90, 0, 0])\n        bone_cylinder(3, 1.5, 1);\n    }\n}\n\nmodule spine() {\n    // Vertebrae stack\n    for(i = [0:11]) {\n        translate([0, 0, i*6])\n        scale([1.2 - i*0.05, 1 - i*0.03, 0.8])\n        joint_sphere(4 + sin(i*30)*0.5);\n    }\n}\n\nmodule ribcage() {\n    // Rib pairs\n    for(side = [-1, 1]) {\n        mirror([side, 0, 0]) {\n            for(i = [0:7]) {\n                translate([8 - i*0.5, 0, 30 + i*2])\n                rib_curve();\n            }\n        }\n    }\n    \n    // Sternum\n    translate([0, 0, 20])\n    bone_cylinder(25, 2, 3);\n}\n\nmodule arm() {\n    // Shoulder\n    translate([0, 0, 0])\n    joint_sphere(5);\n    \n    // Humerus\n    translate([0, -12, 0])\n    rotate([0, 90, 0])\n    bone_cylinder(20, 3, 2.5);\n    \n    // Elbow\n    translate([0, -24, 0])\n    joint_sphere(4);\n    \n    // Radius/Ulna\n    translate([0, -36, 0])\n    rotate([0, 90, 0])\n    bone_cylinder(18, 2.5, 2);\n    \n    // Wrist\n    translate([0, -48, 0])\n    joint_sphere(3);\n    \n    // Hand bones\n    for(f = [0:4]) {\n        rotate([0, 0, f*15 - 30])\n        translate([0, -52 - f*2, 0])\n        bone_cylinder(8 - f*1.2, 1.5, 1);\n    }\n}\n\nmodule leg() {\n    // Hip\n    translate([0, 0, 0])\n    joint_sphere(6);\n    \n    // Femur\n    translate([0, 0, -20])\n    rotate([0, 0, 5])\n    bone_cylinder(25, 3.5, 3);\n    \n    // Knee\n    translate([0, 0, -42])\n    joint_sphere(5);\n    \n    // Tibia/Fibula\n    translate([0, 0, -62])\n    rotate([0, 0, -3])\n    bone_cylinder(22, 3, 2.5);\n    \n    // Ankle\n    translate([0, 0, -82])\n    joint_sphere(4);\n    \n    // Foot\n    translate([2, 0, -90])\n    rotate([90, 0, 15])\n    bone_cylinder(12, 2, 3);\n}\n\nmodule skull() {\n    // Main skull\n    scale([0.9, 1, 1.1])\n    sphere(10);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([side*4, 8, 3])\n        sphere(3);\n    }\n    \n    // Jaw\n    translate([0, -2, -8])\n    rotate([15, 0, 0])\n    cube([12, 8, 6], center = true);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Head\n    translate([0, 0, 80])\n    skull();\n    \n    // Spine and ribcage\n    spine();\n    ribcage();\n    \n    // Arms\n    translate([12, 0, 70])\n    rotate([0, 0, 20])\n    arm();\n    \n    translate([-12, 0, 70])\n    rotate([0, 0, -20])\n    mirror([1, 0, 0])\n    arm();\n    \n    // Pelvis\n    translate([0, 0, 12])\n    scale([1.5, 0.8, 0.5])\n    sphere(8);\n    \n    // Legs\n    translate([6, 0, 0])\n    leg();\n    \n    translate([-6, 0, 0])\n    mirror([1, 0, 0])\n    leg();\n}",
    "renders": true
  },
  {
    "household_item": "revenant",
    "openscad_code": "// Revenant - Medium complexity 3D printable model\n// Approx 70mm tall when printed\n\n// Base settings for 3D printing\n$fn = 36;  // Smooth curves for printing\nwall = 2;  // Wall thickness for printing\n\n// Main module\nmodule revenant() {\n    // Scale to 70mm height\n    scale(70/100)\n    \n    // Full figure\n    union() {\n        // Head and hood\n        head_assembly();\n        \n        // Torso with armor\n        torso_assembly();\n        \n        // Arms\n        left_arm();\n        right_arm();\n        \n        // Legs\n        legs();\n    }\n}\n\n// Head with hood\nmodule head_assembly() {\n    translate([0, 0, 85]) {\n        union() {\n            // Head (skull shape)\n            color(\"ivory\")\n            difference() {\n                sphere(8);\n                // Eye sockets\n                translate([-3, 3, 2]) rotate([0, 90, 0]) cylinder(4, 2, 2);\n                translate([3, 3, 2]) rotate([0, 90, 0]) cylinder(4, 2, 2);\n                // Jaw cut\n                translate([0, -2, -4]) cube([10, 6, 4], center=true);\n            }\n            \n            // Hood\n            color(\"darkslategray\")\n            difference() {\n                // Main hood shape\n                translate([0, 0, -3]) scale([1.2, 1.4, 1.2]) sphere(12);\n                \n                // Hollow inside\n                translate([0, 2, -3]) scale([0.8, 1, 0.8]) sphere(10);\n                \n                // Face opening\n                translate([0, 8, 0]) cube([12, 4, 12], center=true);\n            }\n        }\n    }\n}\n\n// Torso with armor\nmodule torso_assembly() {\n    // Chest armor\n    color(\"slategray\")\n    difference() {\n        // Main chest\n        translate([0, 0, 55]) scale([1.2, 0.8, 1.5]) sphere(15);\n        \n        // Hollow inside\n        translate([0, 0, 55]) scale([1, 0.6, 1.3]) sphere(13);\n        \n        // Arm holes\n        translate([-15, 0, 55]) rotate([0, 90, 0]) cylinder(20, 8, 8);\n        translate([15, 0, 55]) rotate([0, 90, 0]) cylinder(20, 8, 8);\n    }\n    \n    // Belt\n    color(\"darkbrown\")\n    translate([0, -8, 45]) cube([30, 4, 8], center=true);\n    \n    // Tattered cloth strips\n    for(i = [-1, 0, 1]) {\n        color(\"darkslategray\")\n        translate([i * 8, -12, 35]) \n        rotate([5 * i, 0, 10 * i])\n        cube([4, 2, 20]);\n    }\n}\n\n// Left arm\nmodule left_arm() {\n    translate([-22, 0, 65]) {\n        // Shoulder pad\n        color(\"slategray\")\n        rotate([0, 0, -30])\n        scale([1.5, 1, 0.8])\n        sphere(6);\n        \n        // Upper arm\n        color(\"darkslategray\")\n        rotate([0, 0, -30])\n        cylinder(20, 4, 4);\n        \n        // Elbow joint\n        translate([0, -20, 0]) {\n            sphere(4);\n            \n            // Lower arm\n            rotate([0, 0, -20])\n            cylinder(18, 3.5, 3.5);\n            \n            // Hand\n            translate([0, -18, 0])\n            scale([0.8, 1, 0.5])\n            sphere(4);\n        }\n    }\n}\n\n// Right arm\nmodule right_arm() {\n    mirror([1, 0, 0])\n    left_arm();\n}\n\n// Legs\nmodule legs() {\n    // Pelvis\n    color(\"darkslategray\")\n    translate([0, -5, 30]) \n    scale([1.2, 0.8, 0.6])\n    sphere(12);\n    \n    // Left leg\n    left_leg();\n    \n    // Right leg\n    mirror([1, 0, 0])\n    left_leg();\n}\n\nmodule left_leg() {\n    translate([-6, -5, 15]) {\n        // Upper leg\n        color(\"darkslategray\")\n        cylinder(25, 5, 5);\n        \n        // Knee\n        translate([0, 0, -25])\n        sphere(5);\n        \n        // Lower leg\n        cylinder(20, 4.5, 4.5);\n        \n        // Foot\n        translate([0, 2, -20])\n        rotate([90, 0, 0])\n        scale([1, 0.6, 0.4])\n        cylinder(8, 5, 5);\n    }\n}\n\n// Generate the model\nrevenant();",
    "renders": true
  },
  {
    "household_item": "specter",
    "openscad_code": "// Realistic Style Specter - Medium Complexity\n// Overall height ~70mm, base ~40mm diameter\n\n$fn = 36; // Smooth curves for 3D printing\n\n// Main module\nmodule specter() {\n    union() {\n        // Hood and head assembly\n        translate([0, 0, 30]) hood_and_face();\n        \n        // Flowing robes\n        robes();\n        \n        // Ghostly base\n        base();\n        \n        // Arms\n        arms();\n    }\n}\n\n// Hooded head\nmodule hood_and_face() {\n    difference() {\n        // Hood shell\n        union() {\n            // Main hood dome\n            translate([0, 0, 15]) \n                scale([1, 1.2, 1.1])\n                sphere(15);\n                \n            // Hood front extension\n            translate([0, -12, 11])\n                rotate([30, 0, 0])\n                scale([1, 0.8, 0.5])\n                cylinder(h=15, r1=12, r2=8);\n                \n            // Back of hood drape\n            translate([0, 12, 10])\n                rotate([-20, 0, 0])\n                scale([1, 1.3, 0.8])\n                cylinder(h=20, r1=12, r2=15);\n        }\n        \n        // Face void\n        translate([0, -10, 12])\n            scale([0.6, 0.2, 0.8])\n            sphere(12);\n            \n        // Eye sockets\n        translate([-5, -12, 15])\n            sphere(3);\n        translate([5, -12, 15])\n            sphere(3);\n    }\n}\n\n// Flowing robes\nmodule robes() {\n    // Central body\n    translate([0, 0, 10])\n        scale([1, 0.8, 1])\n        cylinder(h=25, r1=12, r2=15);\n    \n    // Overlapping folds\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n        translate([13, 0, 5])\n            scale([1, 0.3, 1])\n            cylinder(h=30, r1=3, r2=6);\n    }\n    \n    // Bottom ragged hem\n    union() {\n        for(i = [0:20:359]) {\n            rotate([0, 0, i])\n            translate([18, 0, 0])\n                scale([1, 0.5, 0.3])\n                cylinder(h=5 + sin(i*5)*3, r1=2, r2=4);\n        }\n    }\n}\n\n// Ghostly ethereal base\nmodule base() {\n    difference() {\n        union() {\n            // Main base\n            cylinder(h=5, r1=20, r2=25);\n            \n            // Wispy tendrils\n            for(i = [0:45:359]) {\n                rotate([0, 0, i])\n                translate([25, 0, 0])\n                    scale([1, 0.5, 0.3])\n                    rotate([0, 90, 0])\n                    cylinder(h=15, r1=2, r2=0.5);\n            }\n        }\n        \n        // Hollow center\n        cylinder(h=6, r1=15, r2=20);\n    }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-15, -5, 20])\n        rotate([0, 0, -30])\n        rotate([30, 0, 0])\n        scale([0.8, 0.8, 1.2])\n        cylinder(h=20, r1=3, r2=2);\n        \n    // Right arm\n    translate([15, -5, 20])\n        rotate([0, 0, 30])\n        rotate([30, 0, 0])\n        scale([0.8, 0.8, 1.2])\n        cylinder(h=20, r1=3, r2=2);\n        \n    // Hands\n    translate([-20, -12, 12])\n        sphere(2.5);\n    translate([20, -12, 12])\n        sphere(2.5);\n}\n\n// Generate the model\nspecter();",
    "renders": true
  },
  {
    "household_item": "wight",
    "openscad_code": "// Realistic Wight - Medium Complexity\n// 3D printable ~70mm tall figure\n\n$fn = 32;  // Smooth curves for printing\n\nmodule head(skull_thickness = 2) {\n    // Main skull structure\n    difference() {\n        union() {\n            // Cranium\n            scale([1.2, 1, 1.1]) sphere(d = 18);\n            \n            // Jaw\n            translate([0, -4, -12])\n            scale([0.9, 1.2, 0.8])\n            sphere(d = 12);\n            \n            // Cheek bones\n            translate([-8, 0, -4])\n            rotate([0, 20, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4, center = true);\n            \n            mirror([1, 0, 0])\n            translate([-8, 0, -4])\n            rotate([0, 20, 0])\n            cylinder(h = 8, d1 = 6, d2 = 4, center = true);\n        }\n        \n        // Eye sockets\n        translate([-5, 4, 2])\n        sphere(d = 6);\n        \n        translate([5, 4, 2])\n        sphere(d = 6);\n        \n        // Nasal cavity\n        translate([0, 6, 0])\n        scale([1, 2, 1])\n        cylinder(h = 8, d = 4, center = true);\n        \n        // Hollow skull\n        scale([0.8, 0.8, 0.8])\n        sphere(d = 17);\n    }\n}\n\nmodule torso() {\n    // Ribcage structure\n    union() {\n        // Spine\n        translate([0, 0, -15])\n        cylinder(h = 30, d = 6);\n        \n        // Ribs - 6 pairs\n        for(i = [0:5]) {\n            translate([0, 0, -10 + i * 5])\n            rotate([0, 90, 0])\n            scale([1.5, 1, 0.3])\n            cylinder(h = 30, d = 4);\n            \n            // Side ribs\n            translate([-12, 0, -10 + i * 5])\n            rotate([0, 0, 15])\n            cylinder(h = 12, d = 3);\n            \n            translate([12, 0, -10 + i * 5])\n            rotate([0, 0, -15])\n            cylinder(h = 12, d = 3);\n        }\n        \n        // Pelvis\n        translate([0, 0, -20])\n        scale([1.2, 0.8, 0.6])\n        sphere(d = 20);\n    }\n}\n\nmodule arm(side = 1) {\n    // Upper arm\n    translate([side * 8, 0, 5])\n    rotate([0, 0, side * -15])\n    cylinder(h = 15, d = 5);\n    \n    // Lower arm\n    translate([side * 18, 0, -3])\n    rotate([0, 0, side * -30])\n    cylinder(h = 15, d = 4);\n    \n    // Hand\n    translate([side * 28, 0, -8])\n    sphere(d = 6);\n    \n    // Fingers\n    for(i = [0:3]) {\n        translate([side * 30, side * (-2 + i), -10])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d = 2);\n    }\n}\n\nmodule leg(side = 1) {\n    // Upper leg\n    translate([side * 4, 0, -35])\n    cylinder(h = 20, d = 6);\n    \n    // Lower leg\n    translate([side * 4, 0, -55])\n    cylinder(h = 18, d = 5);\n    \n    // Foot\n    translate([side * 4, 0, -67])\n    scale([1.5, 0.8, 0.5])\n    sphere(d = 12);\n}\n\nmodule wight() {\n    // Head\n    translate([0, 0, 25])\n    head();\n    \n    // Torso\n    torso();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Weathered tattered cloth\n    translate([0, 0, -10])\n    scale([1.2, 1, 2])\n    difference() {\n        cylinder(h = 40, d = 30);\n        \n        // Tears and holes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([5 + i, 0, -20 + i * 5])\n            cylinder(h = 10, d = 3 + i);\n        }\n        \n        // Hollow center\n        cylinder(h = 50, d = 25);\n    }\n}\n\n// Main assembly\nwight();",
    "renders": true
  },
  {
    "household_item": "mummy",
    "openscad_code": "// Realistic Mummy Figure - Medium Complexity\n// 3D printable mummy with bandages and body details\n\n$fn = 32;  // Smooth curves for printing\n\nmodule body_core() {\n    // Main torso/body\n    union() {\n        // Chest section\n        translate([0, 0, 25])\n            scale([1, 0.8, 1.2])\n                sphere(15);\n        \n        // Abdomen\n        translate([0, 0, 15])\n            scale([0.9, 0.7, 1])\n                sphere(12);\n        \n        // Pelvis\n        translate([0, 0, 5])\n            scale([1.1, 0.9, 0.8])\n                sphere(10);\n    }\n}\n\nmodule head() {\n    // Mummy head with slight tilt\n    translate([0, -2, 38])\n        rotate([5, 0, 0])\n            scale([0.8, 0.9, 1.1])\n                sphere(10);\n}\n\nmodule arms() {\n    // Left arm\n    translate([-18, 0, 22])\n        rotate([0, 0, 30])\n            scale([0.4, 0.4, 1])\n                cylinder(h=25, r1=4, r2=3);\n    \n    // Right arm\n    mirror([1, 0, 0])\n        translate([-18, 0, 22])\n            rotate([0, 0, 30])\n                scale([0.4, 0.4, 1])\n                    cylinder(h=25, r1=4, r2=3);\n}\n\nmodule legs() {\n    // Left leg\n    translate([-5, 0, 0])\n        scale([0.45, 0.45, 1])\n            cylinder(h=25, r1=5, r2=4);\n    \n    // Right leg\n    translate([5, 0, 0])\n        scale([0.45, 0.45, 1])\n            cylinder(h=25, r1=5, r2=4);\n}\n\nmodule feet() {\n    // Left foot\n    translate([-5, -2, -5])\n        scale([0.9, 1.2, 0.4])\n            sphere(4);\n    \n    // Right foot\n    translate([5, -2, -5])\n        scale([0.9, 1.2, 0.4])\n            sphere(4);\n}\n\nmodule bandage_strips() {\n    // Horizontal bandages around torso\n    for(z = [10:5:35]) {\n        translate([0, 0, z])\n            scale([1.1, 0.9, 0.15])\n                sphere(15);\n    }\n    \n    // Diagonal bandages on arms\n    for(i = [0:15:60]) {\n        rotate([0, 0, i])\n            translate([0, 0, 20+i/5])\n                scale([0.3, 0.8, 0.1])\n                    cube([40, 2, 1], center=true);\n    }\n    \n    // Vertical bandages on legs\n    for(x = [-5, 5]) {\n        translate([x, 0, 10])\n            scale([0.1, 0.8, 1])\n                cube([1, 8, 25], center=true);\n    }\n    \n    // Head wrapping\n    for(angle = [0:30:150]) {\n        rotate([0, angle, 0])\n            translate([0, 0, 38])\n                scale([1, 0.1, 0.8])\n                    sphere(11);\n    }\n}\n\nmodule details() {\n    // Eye sockets (slight indentations)\n    translate([3, -8, 40])\n        rotate([0, 10, 0])\n            scale([0.8, 0.3, 0.5])\n                sphere(2);\n    \n    mirror([1, 0, 0])\n        translate([3, -8, 40])\n            rotate([0, 10, 0])\n                scale([0.8, 0.3, 0.5])\n                    sphere(2);\n    \n    // Chest wrinkle details\n    for(i = [0:2]) {\n        rotate([0, 0, i*15])\n            translate([0, 0, 28])\n                scale([0.1, 0.9, 0.9])\n                    cube([1, 20, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body structure\n    body_core();\n    head();\n    arms();\n    legs();\n    feet();\n    \n    // Bandage wrappings\n    bandage_strips();\n    \n    // Surface details\n    details();\n}\n\n// Base for stability\ntranslate([0, 0, -7])\n    scale([1.2, 0.8, 0.3])\n        cylinder(h=2, r=15);",
    "renders": true
  },
  {
    "household_item": "phantom",
    "openscad_code": "// Phantom mask (realistic, medium complexity)\n// Overall size: ~80 mm tall\n// All overhangs ≤45° for easy printing\n\n$fn = 36;\n\n// Main shell thickness\nwall = 2;\n\nmodule hollow_sphere(outer_r, thickness) {\n    difference() {\n        sphere(r = outer_r);\n        sphere(r = outer_r - thickness);\n    }\n}\n\nmodule eye_cutout() {\n    // Almond-shaped eye hole\n    rotate([0, 10, 0])\n    scale([1.2, 1, 1])\n    cylinder(h = wall + 1, r1 = 4, r2 = 3.5);\n}\n\nmodule nostril() {\n    // Angled oval nostril\n    rotate([90, 0, 30])\n    scale([1.3, 0.8, 1])\n    cylinder(h = wall + 1, r1 = 1.5, r2 = 2);\n}\n\nmodule cheek_bone() {\n    // Subtle cheek ridge\n    rotate([0, -30, 0])\n    scale([1, 0.7, 0.9])\n    translate([0, 0, -2])\n    cylinder(h = 8, r1 = 5, r2 = 6);\n}\n\nmodule forehead_ridge() {\n    // Realistic brow ridge\n    rotate([0, 10, 0])\n    scale([1.2, 0.4, 0.6])\n    translate([0, 0, -3])\n    cylinder(h = 6, r1 = 8, r2 = 6);\n}\n\nmodule mask() {\n    // Main skull cap\n    difference() {\n        union() {\n            // Base skull shape\n            rotate([0, 0, 0])\n            scale([0.9, 1, 1.1])\n            hollow_sphere(40, wall);\n            \n            // Add cheek bones\n            translate([-20, 0, -10]) cheek_bone();\n            translate([20, 0, -10]) mirror([1, 0, 0]) cheek_bone();\n            \n            // Add brow ridge\n            translate([0, 0, 5]) forehead_ridge();\n        }\n        \n        // Eye holes\n        translate([-12, 0, 5]) eye_cutout();\n        translate([12, 0, 5]) mirror([1, 0, 0]) eye_cutout();\n        \n        // Nose holes\n        translate([-4, -20, -5]) nostril();\n        translate([4, -20, -5]) mirror([1, 0, 0]) nostril();\n        \n        // Mouth slit\n        rotate([90, 0, 0])\n        scale([0.8, 0.3, 1])\n        translate([0, 0, -42])\n        cylinder(h = wall + 1, r1 = 12, r2 = 8);\n        \n        // Hollow interior\n        scale([0.85, 0.85, 0.85])\n        sphere(r = 38);\n    }\n}\n\n// Base plate with support holes\nmodule base() {\n    difference() {\n        cylinder(h = 3, r = 45);\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([35, 0, -1])\n            cylinder(h = 5, r = 3);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 3])\nmask();\n\nbase();",
    "renders": true
  },
  {
    "household_item": "poltergeist",
    "openscad_code": "// Poltergeist model - realistic style, medium complexity\n// Designed for 3D printing without supports\n\n// Overall dimensions: ~60mm tall, 45mm wide, 35mm deep\n\n$fn = 48;  // Smooth curves\n\n// Main body - ghostly flowing form\nmodule body() {\n    // Torso base\n    translate([0, 0, 20])\n    scale([1, 0.8, 1.2])\n    sphere(d = 35);\n    \n    // Flowing bottom\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 15])\n        translate([0, 18, 10])\n        scale([0.8, 1, 2])\n        sphere(d = 25);\n    }\n}\n\n// Head with face\nmodule head() {\n    // Skull-like head\n    translate([0, 0, 45])\n    scale([0.9, 0.85, 1.1])\n    sphere(d = 28);\n    \n    // Hollow eye sockets\n    for(x = [-8, 8]) {\n        translate([x, -4, 47])\n        rotate([0, 15, 0])\n        cylinder(h = 12, d1 = 8, d2 = 5);\n    }\n    \n    // Mouth opening\n    translate([0, -12, 42])\n    rotate([20, 0, 0])\n    cylinder(h = 10, d1 = 12, d2 = 8);\n}\n\n// Arms reaching out\nmodule arms() {\n    // Left arm\n    translate([-20, 0, 35])\n    rotate([0, 0, -30])\n    cylinder(h = 25, d = 8);\n    \n    // Left hand\n    translate([-35, -5, 30])\n    sphere(d = 10);\n    \n    // Right arm\n    translate([20, 0, 35])\n    rotate([0, 0, 30])\n    cylinder(h = 25, d = 8);\n    \n    // Right hand\n    translate([35, -5, 30])\n    sphere(d = 10);\n}\n\n// Floating debris around poltergeist\nmodule debris() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([25 + i * 3, 0, 10 + i * 8])\n        scale([0.5 + i * 0.1, 0.5 + i * 0.1, 0.5 + i * 0.1])\n        cube(5, center = true);\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    translate([0, 0, -2])\n    cylinder(h = 4, d = 40);\n}\n\n// Combine all parts\nunion() {\n    base();\n    body();\n    head();\n    arms();\n    debris();\n}\n\n// Hollow out the model for printing\ndifference() {\n    union() {\n        base();\n        body();\n        head();\n        arms();\n        debris();\n    }\n    \n    // Internal hollow space\n    translate([0, 0, 20])\n    scale([0.8, 0.7, 0.9])\n    sphere(d = 30);\n    \n    // Drain hole at bottom\n    translate([0, 0, -1])\n    cylinder(h = 5, d = 10);\n}",
    "renders": true
  },
  {
    "household_item": "banshade",
    "openscad_code": "// Realistic Medium-Complexity Banjo-Shaped Banshade (50 mm tall)\n// -----------------------------------------------------------\n// All dimensions in mm.  Safe for FDM printing – no steep overhangs,\n// 1.2 mm shell thickness, 0 % infill ready.\n\n$fn = 36;               // Smooth curves without over-kill\nwall = 1.2;             // Standard nozzle-friendly wall\n\n// Main banjo body (wooden pot)\nmodule banjo_pot() {\n    difference() {\n        // Outer pot\n        cylinder(h = 22, r1 = 20, r2 = 18); // Slight taper for realism\n        // Hollow it out\n        translate([0, 0, wall])\n            cylinder(h = 22, r1 = 20-wall, r2 = 18-wall);\n    }\n}\n\n// Drum head (membrane)\nmodule drum_head() {\n    translate([0, 0, 22])\n        cylinder(h = 0.4, r = 19.8);        // Very thin printable membrane\n}\n\n// Neck with frets\nmodule neck() {\n    // Neck shaft\n    difference() {\n        // Tapered neck block\n        linear_extrude(height = 40, scale = [1, 0.8])\n            square([5, 12], center = true);\n        // Truss rod channel (optional but realistic)\n        translate([0, 0, wall])\n            linear_extrude(height = 40, scale = [1, 0.8])\n                square([5-wall*2, 12-wall*2], center = true);\n    }\n\n    // Frets\n    for (i = [1:8]) {\n        translate([0, 0, i*4 + 3])\n            scale([1.05, 1.1, 1])\n                cube([5.2, 0.6, 0.4], center = true);\n    }\n}\n\n// Peg head\nmodule peg_head() {\n    translate([0, 0, 40])\n    rotate([90, 0, 0])\n    difference() {\n        // Peg box\n        cube([12, 18, 6], center = true);\n        // String tunnels\n        for (x = [-4, 0, 4])\n            translate([x, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 18, r = 0.8);\n    }\n}\n\n// Bridge (thin printable support)\nmodule bridge() {\n    translate([0, 0, 22.8])\n    difference() {\n        cube([15, 2, 2], center = true);\n        translate([0, 0, wall])\n            cube([15-wall*2, 2-wall*2, 2], center = true);\n    }\n}\n\n// Strings (printable ridges)\nmodule strings() {\n    for (x = [-3, -1, 1, 3]) {\n        hull() {\n            translate([x, 0, 23])\n                sphere(r = 0.3);\n            translate([x, 0, 60])\n                sphere(r = 0.3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    banjo_pot();\n    drum_head();\n    neck();\n    peg_head();\n    bridge();\n    strings();\n}",
    "renders": true
  },
  {
    "household_item": "draugr",
    "openscad_code": "// Draugr - Viking Undead Warrior\n// Medium complexity, realistic style, 3D printable\n\n$fa = 2;\n$fs = 1;\n\nmodule torso() {\n    // Main torso block\n    difference() {\n        cube([25, 18, 35], center=true);\n        // Chest hollow for printing\n        translate([0, 0, 10])\n            cube([20, 14, 25], center=true);\n    }\n    \n    // Shoulder plates\n    translate([0, 11, 5])\n        cube([30, 4, 12], center=true);\n    translate([0, -11, 5])\n        cube([30, 4, 12], center=true);\n    \n    // Belt\n    translate([0, 0, -15])\n        cube([28, 20, 4], center=true);\n}\n\nmodule head() {\n    // Skull base\n    difference() {\n        sphere(d=15);\n        // Hollow for printing\n        sphere(d=12);\n    }\n    \n    // Eye sockets\n    translate([4, -5, 3])\n        rotate([0, 90, 0])\n            cylinder(h=8, d1=3, d2=5);\n    translate([-4, -5, 3])\n        rotate([0, 90, 0])\n            cylinder(h=8, d1=3, d2=5);\n    \n    // Jaw\n    translate([0, 7, -8])\n        rotate([15, 0, 0])\n            cube([8, 12, 6], center=true);\n    \n    // Helmet\n    difference() {\n        translate([0, 0, 5])\n            sphere(d=18);\n        translate([0, 0, 5])\n            sphere(d=16);\n    }\n    \n    // Helmet horns\n    translate([9, 0, 3])\n        rotate([0, -30, 0])\n            cylinder(h=10, d1=6, d2=3);\n    translate([-9, 0, 3])\n        rotate([0, 30, 0])\n            cylinder(h=10, d1=6, d2=3);\n}\n\nmodule arm(side) {\n    mirror([side, 0, 0]) {\n        // Upper arm\n        translate([13, 0, 8])\n            rotate([0, 30, 0])\n                cylinder(h=12, d=6);\n        \n        // Forearm\n        translate([20, 0, -2])\n            rotate([0, 60, 0])\n                cylinder(h=10, d=5);\n        \n        // Hand with axe\n        translate([25, 0, -8])\n            rotate([0, 90, 0])\n                cylinder(h=4, d=4);\n        \n        // Axe head\n        translate([28, 0, -8])\n            rotate([0, 90, 0])\n            rotate([0, 0, 90])\n            difference() {\n                cube([2, 15, 8], center=true);\n                cube([4, 11, 6], center=true);\n            }\n    }\n}\n\nmodule leg(side) {\n    mirror([side, 0, 0]) {\n        // Thigh\n        translate([7, 0, -22])\n            cylinder(h=15, d=8);\n        \n        // Shin\n        translate([7, 0, -37])\n            cylinder(h=15, d=6);\n        \n        // Foot\n        translate([7, 0, -48])\n            cube([12, 8, 5], center=true);\n    }\n}\n\nmodule armor_details() {\n    // Chest straps\n    for(i = [-1:1]) {\n        translate([i * 8, 0, 5])\n            cube([2, 18, 1], center=true);\n    }\n    \n    // Back shield\n    translate([0, 12, 0])\n        rotate([100, 0, 0])\n        difference() {\n            cube([20, 25, 3], center=true);\n            translate([0, 0, -2])\n                cube([16, 21, 3], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    torso();\n    translate([0, 0, 25]) head();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n    armor_details();\n}",
    "renders": true
  },
  {
    "household_item": "deathshade",
    "openscad_code": "// Deathshade - realistic style, medium complexity\n// A grim reaper-inspired floating figure with cloak, scythe, and skeletal details\n\n// Overall dimensions\ncloak_height = 70;\ncloak_width = 45;\nscythe_length = 90;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule skull() {\n    // Basic skull with hollow interior\n    difference() {\n        // Main skull shape\n        union() {\n            sphere(d = 12, $fn = 32);\n            translate([0, 0, -6])\n                scale([0.9, 0.7, 0.8])\n                sphere(d = 12, $fn = 32);\n        }\n        \n        // Hollow inside\n        scale([0.7, 0.7, 0.7])\n        sphere(d = 12, $fn = 32);\n        \n        // Eye sockets\n        translate([-3, 4, 2])\n        rotate([0, 10, 0])\n        scale([1.2, 0.8, 1])\n        sphere(d = 4, $fn = 16);\n        \n        translate([3, 4, 2])\n        rotate([0, -10, 0])\n        scale([1.2, 0.8, 1])\n        sphere(d = 4, $fn = 16);\n        \n        // Nose cavity\n        translate([0, 5, -2])\n        rotate([45, 0, 0])\n        cylinder(h = 6, d1 = 3, d2 = 0, $fn = 16);\n    }\n}\n\nmodule spine() {\n    // Vertebrae column\n    for(i = [0:4]) {\n        translate([0, 0, -8 - i*4])\n        rotate([0, 0, i*15])\n        difference() {\n            cylinder(h = 3, d = 6 + sin(i*30)*2, $fn = 12);\n            cylinder(h = 3, d = 3, $fn = 12);\n        }\n    }\n}\n\nmodule ribcage() {\n    // Rib structure\n    for(angle = [0:30:150]) {\n        rotate([angle, 0, 0])\n        translate([0, 0, -12])\n        hull() {\n            translate([0, 6, 0])\n            sphere(d = 3, $fn = 8);\n            translate([0, 0, -8])\n            sphere(d = 2, $fn = 8);\n        }\n    }\n}\n\nmodule arm_bones() {\n    // Upper arm bones\n    translate([8, 0, -20])\n    rotate([0, 30, 0])\n    difference() {\n        cylinder(h = 15, d = 4, $fn = 8);\n        translate([0, 0, -1])\n        cylinder(h = 17, d = 2, $fn = 8);\n    }\n    \n    translate([-8, 0, -20])\n    rotate([0, -30, 0])\n    difference() {\n        cylinder(h = 15, d = 4, $fn = 8);\n        translate([0, 0, -1])\n        cylinder(h = 17, d = 2, $fn = 8);\n    }\n}\n\nmodule cloak() {\n    // Main cloak body - hollow cone with hood\n    difference() {\n        // Outer cloak\n        union() {\n            // Main body\n            cylinder(h = cloak_height, d1 = cloak_width, d2 = 15, $fn = 64);\n            \n            // Hood extension\n            translate([0, 10, cloak_height - 5])\n            rotate([0, 20, 0])\n            scale([1, 1.2, 1])\n            sphere(d = 20, $fn = 32);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall])\n        cylinder(h = cloak_height - wall, d1 = cloak_width - wall*2, d2 = 15 - wall, $fn = 64);\n    }\n    \n    // Cloak bottom fray\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([cloak_width/2 - 2, 0, 0])\n        difference() {\n            cube([4, 1, 5]);\n            translate([2, 0, 0])\n            cylinder(h = 5, d = 2, $fn = 8);\n        }\n    }\n}\n\nmodule scythe_blade() {\n    // Curved blade\n    rotate([0, 90, 0])\n    translate([0, 0, -5])\n    difference() {\n        // Blade shape\n        union() {\n            for(i = [0:5:90]) {\n                rotate([0, 0, i])\n                translate([20 - i*0.2, 0, 0])\n                cube([2, 15 - i*0.15, 2]);\n            }\n            // Blade tip\n            translate([0, 0, 15])\n            rotate([0, 90, 0])\n            cylinder(h = 15, d1 = 2, d2 = 0, $fn = 8);\n        }\n        \n        // Hollow back\n        translate([0, 0, -1])\n        cylinder(h = 17, d = 12, $fn = 32);\n    }\n}\n\nmodule scythe_handle() {\n    // Wooden handle with grip rings\n    difference() {\n        // Handle shaft\n        cylinder(h = scythe_length, d = 5, $fn = 16);\n        \n        // Hollow core\n        cylinder(h = scythe_length, d = 3, $fn = 16);\n    }\n    \n    // Grip rings\n    for(i = [10:10:60]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h = 2, d = 6, $fn = 16);\n            cylinder(h = 2, d = 3, $fn = 16);\n        }\n    }\n}\n\nmodule scythe_assembly() {\n    // Complete scythe\n    translate([0, 25, 0])\n    rotate([0, 0, -45])\n    union() {\n        // Handle\n        scythe_handle();\n        \n        // Blade connection\n        translate([0, 0, scythe_length - 5])\n        scythe_blade();\n    }\n}\n\n// Assemble the deathshade\nunion() {\n    // Cloak and hood\n    cloak();\n    \n    // Skull and bones visible inside hood\n    translate([0, 10, cloak_height - 5])\n    union() {\n        skull();\n        spine();\n        ribcage();\n        arm_bones();\n    }\n    \n    // Scythe held in right hand\n    translate([15, 0, cloak_height - 30])\n    rotate([0, 0, 30])\n    scythe_assembly();\n}",
    "renders": true
  },
  {
    "household_item": "nightwraith",
    "openscad_code": "// Nightwraith - realistic style, medium complexity\n// 3D printable, ~70mm tall\n\n$fn = 32;\n\n// Base figure module\nmodule nightwraith() {\n    // Center of mass for easier printing\n    translate([0,0,0]) {\n        // Main body - torso\n        union() {\n            // Torso - tapered cylinder\n            cylinder(h=30, d1=20, d2=12);\n            \n            // Head - sphere with face cutouts\n            translate([0,0,30]) {\n                difference() {\n                    sphere(d=18);\n                    \n                    // Eye sockets\n                    translate([-5, 6, 2]) rotate([0,20,0]) cylinder(h=8, d=4);\n                    translate([5, 6, 2]) rotate([0,-20,0]) cylinder(h=8, d=4);\n                    \n                    // Mouth slit\n                    translate([0, 8, -4]) rotate([90,0,0]) cylinder(h=12, d=2);\n                }\n            }\n            \n            // Robe - flared cylinder with tattered bottom\n            difference() {\n                cylinder(h=35, d1=22, d2=35);\n                \n                // Tattered bottom cuts\n                for(i=[0:7]) {\n                    rotate([0,0,i*45]) \n                    translate([13,0,0]) rotate([90,0,0]) \n                    cylinder(h=15, d=4);\n                }\n            }\n            \n            // Arms - simple cylinders\n            // Left arm\n            translate([-12,-2,25]) rotate([0,0,-30]) \n            cylinder(h=20, d=4);\n            \n            // Right arm\n            translate([12,-2,25]) rotate([0,0,30]) \n            cylinder(h=20, d=4);\n            \n            // Ghostly tail - tapered cylinder\n            translate([0,0,-35]) \n            cylinder(h=40, d1=15, d2=3);\n        }\n        \n        // Hood detail\n        translate([0,0,30]) \n        difference() {\n            sphere(d=22);\n            sphere(d=18);\n        }\n        \n        // Floating shoulder pieces\n        translate([-15,0,28]) rotate([0,0,-20]) \n        cube([8,3,12], center=true);\n        \n        translate([15,0,28]) rotate([0,0,20]) \n        cube([8,3,12], center=true);\n    }\n}\n\n// Generate the model\nnightwraith();",
    "renders": true
  },
  {
    "household_item": "cryptwalker",
    "openscad_code": "// Cryptwalker Walker - Realistic Style, Medium Complexity\n// 3D printable articulated walker with skeletal design\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body dimensions\nbody_length = 60 * scale_factor;\nbody_width = 40 * scale_factor;\nbody_height = 30 * scale_factor;\n\n// Head dimensions\nhead_diameter = 25 * scale_factor;\nneck_length = 8 * scale_factor;\n\n// Leg segments\nleg_thickness = 4 * scale_factor;\nupper_leg_length = 30 * scale_factor;\nlower_leg_length = 35 * scale_factor;\nfoot_length = 15 * scale_factor;\n\n// Joint spheres\njoint_diameter = 8 * scale_factor;\n\nmodule cryptwalker() {\n    \n    // Central body - ribcage-like structure\n    union() {\n        // Main torso\n        difference() {\n            // Outer shell\n            hull() {\n                translate([0, 0, body_height/2])\n                    cube([body_length, body_width, body_height], center=true);\n                translate([0, 0, body_height/1.2])\n                    cube([body_length*0.8, body_width*0.8, body_height*0.6], center=true);\n            }\n            \n            // Hollow interior\n            translate([0, 0, body_height/2])\n                cube([body_length-6, body_width-6, body_height-6], center=true);\n                \n            // Rib openings\n            for(i = [-1, 0, 1]) {\n                translate([i * 12 * scale_factor, 0, body_height/2])\n                    cube([8 * scale_factor, body_width+2, body_height-8], center=true);\n            }\n        }\n        \n        // Head assembly\n        translate([body_length/2 + head_diameter/2 + neck_length, 0, body_height/2 + head_diameter/2])\n            union() {\n                // Neck\n                rotate([0, 90, 0])\n                    cylinder(h=neck_length, r=leg_thickness, center=true);\n                    \n                // Skull\n                sphere(d=head_diameter);\n                \n                // Eye sockets\n                for(x = [-1, 1]) {\n                    translate([x * head_diameter/4, head_diameter/3, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h=head_diameter/2, r=head_diameter/6, center=true);\n                }\n                \n                // Jaw\n                translate([0, -head_diameter/3, -head_diameter/3])\n                    cube([head_diameter*0.8, head_diameter/4, head_diameter/3], center=true);\n            }\n    }\n    \n    // Generate legs\n    for(side = [-1, 1]) {\n        // Position legs on sides\n        y_pos = side * body_width/2;\n        \n        // Front left/right leg assembly\n        leg_assembly(body_length/2 - 10 * scale_factor, y_pos, 0, 1);\n        \n        // Rear left/right leg assembly\n        leg_assembly(-body_length/2 + 10 * scale_factor, y_pos, 0, -1);\n    }\n}\n\nmodule leg_assembly(x_pos, y_pos, z_pos, direction) {\n    translate([x_pos, y_pos, z_pos + body_height/3])\n        union() {\n            // Hip joint\n            sphere(d=joint_diameter);\n            \n            // Upper leg segment\n            translate([0, 0, -upper_leg_length/2])\n                rotate([direction * 20, 0, 0])\n                    leg_segment(upper_leg_length);\n                    \n            // Knee joint\n            translate([0, 0, -upper_leg_length])\n                sphere(d=joint_diameter);\n                \n            // Lower leg segment\n            translate([0, 0, -upper_leg_length - lower_leg_length/2])\n                rotate([direction * -30, 0, 0])\n                    leg_segment(lower_leg_length);\n                    \n            // Ankle joint\n            translate([0, 0, -upper_leg_length - lower_leg_length])\n                sphere(d=joint_diameter);\n                \n            // Foot\n            translate([0, 0, -upper_leg_length - lower_leg_length - foot_length/2])\n                rotate([direction * 45, 0, 0])\n                    cube([foot_length, leg_thickness*2, foot_length/2], center=true);\n        }\n}\n\nmodule leg_segment(length) {\n    difference() {\n        // Main leg bone\n        cylinder(h=length, r=leg_thickness, center=true);\n        \n        // Hollow center for weight reduction\n        cylinder(h=length+2, r=leg_thickness-2, center=true);\n        \n        // Bone texture - cut grooves\n        for(i = [-length/2+5 : 5 : length/2-5]) {\n            rotate([0, 90, 0])\n                translate([i, 0, 0])\n                    cube([1, leg_thickness*2, leg_thickness*2], center=true);\n        }\n    }\n}\n\n// Render the complete walker\ncryptwalker();",
    "renders": true
  },
  {
    "household_item": "bonewraith",
    "openscad_code": "// Bonewraith - Medium complexity realistic style\n// Height: ~70mm, suitable for 3D printing\n\n$fn = 36;  // Smooth curves for printing\n\nmodule ribcage() {\n    // Central spine\n    for(i = [0:4]) {\n        translate([0, 0, i*8])\n            scale([1, 0.8, 1])\n                sphere(4);\n    }\n    \n    // Ribs - 6 pairs\n    for(side = [-1, 1]) {\n        for(r = [0:5]) {\n            translate([side*12, 0, 8 + r*7])\n                rotate([0, 20*side, 0])\n                    scale([0.8, 0.5, 0.5])\n                        sphere(3);\n        }\n    }\n}\n\nmodule skull() {\n    // Main skull\n    translate([0, 0, 60])\n        scale([1.2, 0.8, 1.3])\n            sphere(8);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([side*4, 4, 63])\n            scale([1.2, 1, 1.2])\n                rotate([0, 10, 0])\n                    sphere(2.5);\n    }\n    \n    // Jaw\n    translate([0, -6, 55])\n        scale([0.8, 0.4, 0.6])\n            sphere(6);\n    \n    // Teeth\n    for(side = [-1, 1]) {\n        for(t = [-1, 0, 1]) {\n            translate([side*2 + t, -8, 54])\n                cube([1, 2, 1]);\n        }\n    }\n}\n\nmodule arm() {\n    // Upper arm\n    rotate([0, 20, 0])\n        translate([0, 0, -8])\n            cylinder(20, 3, 2.5);\n    \n    // Lower arm\n    rotate([0, -30, 0])\n        translate([0, 0, -28])\n            cylinder(18, 2.5, 2);\n    \n    // Hand\n    rotate([0, -20, 0])\n        translate([0, 0, -46])\n            sphere(3);\n    \n    // Fingers\n    for(f = [0:3]) {\n        rotate([f*15 - 22, 0, 0])\n            translate([0, 0, -49])\n                cylinder(8, 0.8, 0.5);\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    rotate([0, -10, 0])\n        translate([0, 0, -8])\n            cylinder(22, 3.5, 3);\n    \n    // Lower leg\n    rotate([0, 10, 0])\n        translate([0, 0, -30])\n            cylinder(20, 3, 2.5);\n    \n    // Foot\n    translate([0, -4, -50])\n        scale([1.5, 3, 0.8])\n            sphere(3);\n}\n\nmodule pelvis() {\n    // Hip bone\n    difference() {\n        translate([0, 0, 18])\n            scale([2, 1, 0.8])\n                sphere(8);\n        \n        // Pelvic opening\n        translate([0, 0, 22])\n            scale([1.2, 0.6, 1])\n                sphere(5);\n    }\n}\n\n// Assemble the bonewraith\nunion() {\n    // Head and torso\n    skull();\n    ribcage();\n    pelvis();\n    \n    // Arms\n    translate([15, 0, 45])\n        rotate([0, 0, 20])\n            arm();\n    \n    translate([-15, 0, 45])\n        rotate([0, 0, -20])\n            mirror([1, 0, 0])\n                arm();\n    \n    // Legs\n    translate([6, 0, 18])\n        rotate([0, 0, 5])\n            leg();\n    \n    translate([-6, 0, 18])\n        rotate([0, 0, -5])\n            mirror([1, 0, 0])\n                leg();\n}",
    "renders": true
  },
  {
    "household_item": "fleshgait",
    "openscad_code": "// Fleshgait - Realistic Style, Medium Complexity\n// 3D printable, ~80mm tall\n\n$fn = 36;\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body module\nmodule body() {\n    // Torso - elongated cylinder\n    translate([0, 0, 30])\n    scale([1.2, 0.8, 2.5])\n    sphere(r=12);\n    \n    // Chest plate\n    translate([0, -5, 45])\n    rotate([90, 0, 0])\n    scale([1.3, 1.8, 0.8])\n    cylinder(h=8, r1=8, r2=12);\n}\n\n// Head module\nmodule head() {\n    // Main head - elongated skull shape\n    translate([0, -8, 65])\n    scale([0.8, 1.2, 1.5])\n    sphere(r=10);\n    \n    // Eye sockets\n    for(x=[-3.5, 3.5]) {\n        translate([x, -15, 67])\n        rotate([0, 0, 0])\n        sphere(r=2.5);\n    }\n    \n    // Jaw\n    translate([0, -10, 55])\n    rotate([20, 0, 0])\n    scale([0.7, 0.5, 0.8])\n    cube([12, 15, 8], center=true);\n}\n\n// Limb module\nmodule limb(length, thickness, angle, is_leg=false) {\n    translate([0, 0, is_leg ? 0 : 40])\n    rotate([0, 0, angle])\n    translate([0, 0, length/2])\n    scale([thickness, thickness, 1])\n    cylinder(h=length, r=thickness);\n}\n\n// Joint module\nmodule joint(radius) {\n    sphere(r=radius);\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-15, 0, 50])\n    union() {\n        joint(4);\n        limb(25, 3, -30);\n        translate([0, -20, -15])\n        limb(20, 2.5, 20);\n    }\n    \n    // Right arm\n    translate([15, 0, 50])\n    union() {\n        joint(4);\n        limb(25, 3, 30);\n        translate([0, -20, -15])\n        limb(20, 2.5, -20);\n    }\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    translate([-8, 0, 25])\n    union() {\n        joint(5);\n        limb(30, 4, -10, true);\n        translate([0, -15, -20])\n        limb(25, 3.5, 5, true);\n    }\n    \n    // Right leg\n    translate([8, 0, 25])\n    union() {\n        joint(5);\n        limb(30, 4, 10, true);\n        translate([0, -15, -20])\n        limb(25, 3.5, -5, true);\n    }\n}\n\n// Spinal ridge\nmodule spine() {\n    for(i=[0:5:30]) {\n        translate([0, 0, 25+i])\n        scale([1 - i/60, 0.8 - i/80, 0.3])\n        sphere(r=4);\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    translate([0, 0, -2])\n    cylinder(h=4, r=20);\n}\n\n// Assemble the fleshgait\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    base();\n    body();\n    head();\n    arms();\n    legs();\n    spine();\n}",
    "renders": true
  },
  {
    "household_item": "soulrot",
    "openscad_code": "// Soulrot - realistic style, medium complexity\n// Rotting soul fragment with organic decay and crystalline core\n\n$fn = 36;  // Smooth curves for printing\nwall_th = 2;  // Wall thickness for 3D printing\n\nmodule crystal_core() {\n    // Central soul crystal with faceted surfaces\n    difference() {\n        // Main crystal body\n        scale([1, 1.2, 1.5]) sphere(d=12);\n        \n        // Facet cuts for realism\n        for(i = [0:5]) {\n            rotate([0, 0, i*60]) \n                translate([0, -15, -15]) \n                    cube([30, 30, 30]);\n        }\n        \n        // Hollow center for material saving\n        sphere(d=8);\n    }\n}\n\nmodule decay_veins() {\n    // Organic decay patterns spreading from core\n    for(i = [0:8]) {\n        angle = i * 45;\n        radius = 8 + i * 1.5;\n        \n        translate([0, 0, 2])\n        rotate([0, 0, angle])\n        translate([radius, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.8])\n        cylinder(h=15 + i*2, d1=3 + i*0.5, d2=1 + i*0.3, center=true);\n    }\n}\n\nmodule soul_fragment() {\n    // Jagged soul fragment base\n    difference() {\n        // Main fragment shape\n        scale([1.3, 1, 1.8]) sphere(d=25);\n        \n        // Jagged cuts for broken appearance\n        for(i = [0:3]) {\n            rotate([0, i*20-30, i*40])\n                translate([0, -20, -20])\n                    cube([40, 40, 40]);\n        }\n        \n        // Hollow interior\n        scale([1.2, 0.9, 1.7]) sphere(d=20);\n    }\n}\n\nmodule rot_pustules() {\n    // Blisters of soul decay\n    for(i = [0:12]) {\n        angle = i * 30;\n        height = 3 + (i % 3) * 2;\n        \n        rotate([0, 0, angle])\n        translate([10 + (i % 4) * 3, 0, -5 + i])\n        scale([1, 1, 0.7])\n        sphere(d=2 + (i % 3));\n    }\n}\n\nmodule support_base() {\n    // Flat base for stable 3D printing\n    cylinder(h=2, d=35);\n}\n\n// Main assembly\nunion() {\n    // Base support\n    support_base();\n    \n    // Soul fragment body\n    translate([0, 0, 3])\n    soul_fragment();\n    \n    // Crystal core at center\n    translate([0, 0, 8])\n    crystal_core();\n    \n    // Decay veins spreading outward\n    translate([0, 0, 10])\n    decay_veins();\n    \n    // Surface rot details\n    translate([0, 0, 5])\n    rot_pustules();\n}",
    "renders": true
  },
  {
    "household_item": "darkling",
    "openscad_code": "// Realistic darkling – medium complexity\n// Overall height ≈ 70 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Wall thickness for 3-D printing\nwall = 1.2;\n\nmodule body_shell() {\n    // Main torso: low oval dome\n    difference() {\n        scale([1, 0.7, 0.5])\n            sphere(d = 40);\n        translate([0, 0, -wall])\n            scale([1, 0.7, 0.3])\n                sphere(d = 40 - 2*wall);\n    }\n}\n\nmodule head() {\n    // Stretched sphere with hollow neck socket\n    difference() {\n        scale([0.9, 0.7, 1.2])\n            sphere(d = 22);\n        translate([0, 0, -12])\n            cylinder(h = 15, d = 14, $fn = 20);\n    }\n}\n\nmodule eye_socket() {\n    // Half-sphere cavity for eye\n    rotate([0, 90, 0])\n        sphere(d = 6);\n}\n\nmodule eye() {\n    // Small sphere eye\n    sphere(d = 4);\n}\n\nmodule horn() {\n    // Curved cone horn\n    rotate([20, 0, 0])\n        cylinder(h1 = 10, h2 = 0, r1 = 3, r2 = 0.5, $fn = 8);\n}\n\nmodule tail_segment(r, h) {\n    cylinder(h = h, r = r, $fn = 16);\n}\n\nmodule tail() {\n    // Articulated tail with decreasing segments\n    for (i = [0:7]) {\n        translate([0, -20 - i*6, -10 + i*2])\n            tail_segment(r = 6 - i*0.6, h = 5);\n    }\n}\n\nmodule arm() {\n    // Simple tapered arm\n    rotate([0, 30, 0])\n        cylinder(h = 25, r1 = 4, r2 = 2, $fn = 12);\n}\n\nmodule leg() {\n    // Short sturdy leg\n    cylinder(h = 15, r1 = 5, r2 = 3, $fn = 12);\n}\n\nmodule claw() {\n    // Small claw tip\n    scale([1, 0.5, 1])\n        sphere(d = 3);\n}\n\n// Assembly\nunion() {\n    // Torso\n    body_shell();\n\n    // Head attached at neck\n    translate([0, 10, 15])\n        head();\n\n    // Eyes in sockets\n    translate([-7, 12, 18])\n        eye_socket();\n    translate([7, 12, 18])\n        eye_socket();\n    translate([-7, 12, 18])\n        eye();\n    translate([7, 12, 18])\n        eye();\n\n    // Horns\n    translate([-10, 5, 22])\n        rotate([0, 0, -25])\n            horn();\n    translate([10, 5, 22])\n        rotate([0, 0, 25])\n            horn();\n\n    // Arms\n    translate([15, 5, 5])\n        arm();\n    translate([-15, 5, 5])\n        mirror([1, 0, 0])\n            arm();\n\n    // Legs\n    translate([8, -5, -18])\n        leg();\n    translate([-8, -5, -18])\n        leg();\n\n    // Tail\n    tail();\n\n    // Claws on feet\n    translate([8, -5, -33])\n        claw();\n    translate([-8, -5, -33])\n        claw();\n}",
    "renders": true
  },
  {
    "household_item": "graveborn",
    "openscad_code": "// Graveborn (realistic style, medium complexity)\n// Model height ≈ 70 mm, printable without supports\n\n// Overall scale\nscaleFactor = 1;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Torso module\nmodule torso() {\n    // Main body\n    translate([0, 0, 30])\n    difference() {\n        scale([1, 0.8, 1.4])\n        sphere(12 * scaleFactor, $fn=32);\n        // Hollow inside for printing\n        scale([0.85, 0.65, 1.25])\n        sphere(12 * scaleFactor, $fn=32);\n    }\n    \n    // Ribcage ribs\n    for (i = [-1:1]) {\n        translate([i * 6, 0, 35 + abs(i) * 3])\n        rotate([0, 90, 0])\n        cylinder(h=2, r1=1.5, r2=0.5, $fn=8);\n    }\n    \n    // Spine\n    translate([0, -8, 18])\n    rotate([90, 0, 0])\n    cylinder(h=25, r=1.5, $fn=12);\n}\n\n// Skull module\nmodule skull() {\n    translate([0, 0, 55])\n    difference() {\n        sphere(8 * scaleFactor, $fn=32);\n        // Eye sockets\n        translate([3, 3, 2])\n        sphere(2.2, $fn=16);\n        translate([-3, 3, 2])\n        sphere(2.2, $fn=16);\n        // Hollow inside\n        scale([0.8, 0.8, 0.9])\n        sphere(7.5 * scaleFactor, $fn=32);\n    }\n    \n    // Jaw\n    translate([0, 2, 48])\n    difference() {\n        scale([0.9, 0.7, 0.4])\n        sphere(8 * scaleFactor, $fn=32);\n        // Teeth\n        for (i = [-3:3]) {\n            translate([i * 1.2, 4, 0])\n            cube([0.6, 1, 1.5], center=true);\n        }\n    }\n}\n\n// Arms module\nmodule arms() {\n    // Left arm\n    translate([-12, 0, 40])\n    rotate([0, 0, 30])\n    difference() {\n        cylinder(h=20, r=2.5, $fn=12);\n        cylinder(h=20, r=1.5, $fn=12);\n    }\n    \n    // Right arm\n    translate([12, 0, 40])\n    rotate([0, 0, -30])\n    difference() {\n        cylinder(h=20, r=2.5, $fn=12);\n        cylinder(h=20, r=1.5, $fn=12);\n    }\n    \n    // Hands\n    translate([-18, 0, 25])\n    sphere(2.5, $fn=16);\n    \n    translate([18, 0, 25])\n    sphere(2.5, $fn=16);\n}\n\n// Pelvis module\nmodule pelvis() {\n    translate([0, 0, 15])\n    difference() {\n        scale([1.2, 0.6, 0.8])\n        sphere(10 * scaleFactor, $fn=32);\n        scale([1.05, 0.45, 0.65])\n        sphere(10 * scaleFactor, $fn=32);\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Left leg\n    translate([-4, 0, 8])\n    difference() {\n        cylinder(h=18, r=3, $fn=12);\n        cylinder(h=18, r=2, $fn=12);\n    }\n    \n    // Right leg\n    translate([4, 0, 8])\n    difference() {\n        cylinder(h=18, r=3, $fn=12);\n        cylinder(h=18, r=2, $fn=12);\n    }\n    \n    // Feet\n    translate([-4, 0, 0])\n    scale([1.2, 2, 0.6])\n    sphere(3, $fn=16);\n    \n    translate([4, 0, 0])\n    scale([1.2, 2, 0.6])\n    sphere(3, $fn=16);\n}\n\n// Assemble the graveborn\nunion() {\n    torso();\n    skull();\n    arms();\n    pelvis();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "rotfiend",
    "openscad_code": "// Rotfiend - Medium complexity realistic style\n// Size: ~70mm tall\n\n$fn = 36;\n\nmodule body() {\n    // Main torso - bulbous and asymmetrical\n    difference() {\n        union() {\n            // Upper torso\n            scale([1.2, 1, 1.3]) sphere(15);\n            // Lower torso\n            translate([0, 0, -10]) scale([1.4, 1.2, 1.5]) sphere(12);\n            // Spinal ridge\n            for(i = [-15:5:15]) {\n                translate([0, 0, i]) rotate([0, 90, 0]) \n                scale([0.8, 0.8, 1]) cylinder(h=8, r1=3, r2=2);\n            }\n        }\n        // Hollow torso\n        translate([0, 0, -5]) scale([0.8, 0.8, 0.9]) sphere(18);\n    }\n}\n\nmodule head() {\n    translate([0, 0, 25]) rotate([10, 0, 0]) {\n        // Skull-like head\n        difference() {\n            scale([0.8, 0.9, 1.2]) sphere(12);\n            // Eye sockets\n            for(x = [-5, 5]) {\n                translate([x, 2, 5]) sphere(3);\n            }\n            // Mouth cavity\n            translate([0, -2, 0]) cube([10, 4, 8], center=true);\n        }\n        // Teeth\n        for(i = [0:9]) {\n            rotate([0, 0, i*36-180]) translate([0, -12, -2]) \n            cylinder(h=4, r=0.8);\n        }\n        // Horns\n        for(a = [-30, 30]) {\n            rotate([0, 0, a]) translate([8, 0, 8]) rotate([30, 0, 0])\n            cylinder(h=12, r1=2, r2=1);\n        }\n    }\n}\n\nmodule arms() {\n    // Left arm\n    translate([-15, 5, 15]) rotate([0, 30, -20]) {\n        cylinder(h=20, r=4);\n        translate([0, 0, 20]) rotate([0, 30, 0]) {\n            cylinder(h=15, r=3);\n            // Clawed hand\n            translate([0, 0, 15]) {\n                sphere(3);\n                for(b = [-30, 0, 30]) {\n                    rotate([0, 0, b]) translate([0, 0, 3]) \n                    cylinder(h=8, r=1.5);\n                }\n            }\n        }\n    }\n    \n    // Right arm\n    mirror([1,0,0]) arms();\n}\n\nmodule legs() {\n    translate([8, 0, -20]) rotate([0, -20, 10]) {\n        cylinder(h=25, r=5);\n        translate([0, 0, 25]) rotate([0, 20, 0]) {\n            cylinder(h=20, r=4);\n            // Hoof\n            translate([0, 0, 20]) {\n                scale([1.2, 0.8, 0.5]) sphere(5);\n            }\n        }\n    }\n    \n    translate([-8, 0, -20]) rotate([0, 20, -10]) {\n        cylinder(h=25, r=5);\n        translate([0, 0, 25]) rotate([0, -20, 0]) {\n            cylinder(h=20, r=4);\n            translate([0, 0, 20]) scale([1.2, 0.8, 0.5]) sphere(5);\n        }\n    }\n}\n\nmodule tendrils() {\n    // Organic growths/tendrils\n    for(i = [0:3]) {\n        a = i * 90;\n        rotate([0, 0, a]) translate([20, 0, 5]) {\n            rotate([45, 0, 0]) cylinder(h=15, r=2);\n            translate([0, 0, 15]) sphere(2.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    tendrils();\n}",
    "renders": true
  },
  {
    "household_item": "cinderspecter",
    "openscad_code": "// Cinderspecter - Realistic Style, Medium Complexity\n// 3D printable ghost with charred/ember details\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions: 60mm tall, 40mm wide\nmodule cinderspecter() {\n    \n    // Main ghost body - flowing robes\n    difference() {\n        // Outer cloak shape\n        union() {\n            sphere(d = 35);  // Head sphere\n            \n            // Flowing body with slight taper\n            hull() {\n                translate([0, 0, -15]) cylinder(h = 30, d1 = 35, d2 = 40);\n                translate([0, 0, -35]) cylinder(h = 10, d1 = 40, d2 = 45);\n            }\n            \n            // Wispy tendrils at bottom\n            for(i = [0:45:315]) {\n                rotate([0, 0, i]) \n                    translate([18, 0, -40]) \n                        scale([1, 0.3, 1]) \n                            rotate([90, 0, 0]) \n                                cylinder(h = 15, d1 = 8, d2 = 4);\n            }\n        }\n        \n        // Hollow out for printing\n        translate([0, 0, 5]) sphere(d = 30);\n        translate([0, 0, -25]) cylinder(h = 35, d = 30);\n    }\n    \n    // Face voids - haunting expression\n    difference() {\n        sphere(d = 35);  // Reference head\n        \n        // Eye sockets\n        translate([-8, -15, 5]) rotate([0, 20, 0]) scale([1, 1.2, 0.8]) sphere(d = 6);\n        translate([8, -15, 5]) rotate([0, -20, 0]) scale([1, 1.2, 0.8]) sphere(d = 6);\n        \n        // Mouth cavity\n        translate([0, -17, -5]) rotate([10, 0, 0]) scale([1.5, 0.8, 1]) sphere(d = 8);\n    }\n    \n    // Charred cracks/crevices\n    for(pos = [[-5, -5, 0], [7, -3, -5], [-3, 8, -10], [5, 10, -15]]) {\n        translate(pos) \n            rotate([rand(20), rand(20), rand(20)]) \n                scale([1, 0.2, 3]) \n                    sphere(d = 2.5);\n    }\n    \n    // Glowing ember spots\n    for(pos = [[-10, -8, 2], [12, -6, -3], [-7, 12, -8], [9, 8, -12]]) {\n        translate(pos) sphere(d = 1.5);\n    }\n    \n    // Arms reaching forward\n    module arm() {\n        rotate([0, 60, 0]) {\n            // Upper arm\n            rotate([0, 90, 0]) cylinder(h = 15, d = 6);\n            \n            // Lower arm\n            translate([0, 0, 15]) rotate([0, 30, 0]) cylinder(h = 12, d = 5);\n            \n            // Hand\n            translate([0, 0, 27]) sphere(d = 5);\n        }\n    }\n    \n    translate([0, 0, -5]) {\n        translate([12, 0, 0]) arm();\n        translate([-12, 0, 0]) mirror([1, 0, 0]) arm();\n    }\n    \n    // Base stand for stability\n    difference() {\n        cylinder(h = 3, d = 45);\n        cylinder(h = 3.5, d = 40);\n    }\n}\n\n// Helper for random rotation\nfunction rand(seed) = (seed * 9301 + 49297) % 233280 / 233280.0 * 360;\n\n// Render the model\ncinderspecter();",
    "renders": true
  },
  {
    "household_item": "voidghast",
    "openscad_code": "// Voidghast - medium complexity realistic style\n// 3D printable with no overhangs\n\n$fn = 32;\nbody_height = 35;\nbody_width = 25;\nhead_height = 20;\narm_length = 30;\nleg_length = 25;\nwall = 1.5;\n\nmodule voidghast() {\n    // Main body - tapered cylinder\n    color(\"darkslategray\")\n    union() {\n        // Torso\n        cylinder(h=body_height, r1=body_width/2, r2=body_width/3, center=true);\n        \n        // Chest armor plate\n        translate([0, 0, body_height/4])\n            cube([body_width*0.8, body_width*0.6, body_height/0.8], center=true);\n    }\n    \n    // Head with void eyes\n    color(\"black\")\n    translate([0, 0, body_height/2 + head_height/2])\n    union() {\n        // Skull-like head\n        sphere(r=head_height/2);\n        \n        // Eye sockets - void holes\n        for(x = [-head_height/4, head_height/4])\n            translate([x, head_height/3, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=head_height, r1=head_height/6, r2=head_height/8, center=true);\n    }\n    \n    // Arms - segmented limbs\n    module arm(side) {\n        color(\"dimgray\")\n        translate([side * (body_width/2 + arm_length/4), 0, body_height/4])\n        union() {\n            // Upper arm\n            rotate([0, 0, side * 15])\n                cylinder(h=arm_length/2, r=arm_length/8, center=true);\n            \n            // Lower arm\n            translate([side * arm_length/3, 0, -arm_length/4])\n                rotate([0, 0, side * 30])\n                    cylinder(h=arm_length/2, r=arm_length/10, center=true);\n            \n            // Hand with claws\n            translate([side * arm_length/1.8, 0, -arm_length/1.8])\n                sphere(r=arm_length/12);\n                \n            // Claws\n            for(i = [-1, 0, 1])\n                translate([side * arm_length/1.7, i * arm_length/20, -arm_length/1.6])\n                    cylinder(h=arm_length/5, r=arm_length/30);\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs - pillar-like\n    module leg(side) {\n        color(\"darkslategray\")\n        translate([side * body_width/3, 0, -body_height/2 - leg_length/2])\n        union() {\n            // Thigh\n            cylinder(h=leg_length/2, r=body_width/6, center=true);\n            \n            // Shin\n            translate([0, 0, -leg_length/2])\n                cylinder(h=leg_length/2, r=body_width/8, center=true);\n            \n            // Foot\n            translate([0, body_width/4, -leg_length])\n                cube([body_width/4, body_width/3, wall*2], center=true);\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Back spikes\n    color(\"black\")\n    for(i = [0:2]) {\n        translate([0, -body_width/3, body_height/2 - i * body_height/4])\n            rotate([0, 20, 0])\n                cylinder(h=body_height/3, r1=wall, r2=wall/2);\n    }\n    \n    // Chest core - glowing void\n    color(\"purple\")\n    translate([0, body_width/3, 0])\n        sphere(r=body_width/6);\n}\n\n// Generate the model\nvoidghast();",
    "renders": true
  },
  {
    "household_item": "shadowmourn",
    "openscad_code": "// Shadowmourne - Warcraft Legendary Axe\n// Medium complexity realistic version\n\n$fn = 64;  // Higher resolution for curves\n\nmodule blade_edge() {\n    // Main cutting edge\n    translate([0, -5, 0])\n        cube([60, 10, 5]);\n    \n    // Tapered front\n    translate([55, -2.5, 0])\n        cube([10, 5, 5]);\n}\n\nmodule blade_serrations() {\n    // Serrated bottom edge\n    for(i = [0:5]) {\n        translate([10 + i*8, -5, 0])\n            cube([4, 5, 5]);\n    }\n}\n\nmodule skull_detail() {\n    // Central skull motif\n    translate([25, 0, 5])\n        sphere(8);\n    \n    // Eye sockets\n    translate([21, 5, 8])\n        sphere(2);\n    translate([29, 5, 8])\n        sphere(2);\n    \n    // Nasal cavity\n    translate([25, 5, 6])\n        rotate([0, 90, 0])\n            cylinder(h=4, r1=2, r2=1);\n}\n\nmodule rune_slot(x_pos) {\n    // Rune slot details\n    translate([x_pos, 0, 2.5])\n        cube([3, 8, 1]);\n}\n\nmodule blade_assembly() {\n    union() {\n        // Main blade body\n        blade_edge();\n        \n        // Add serrations\n        blade_serrations();\n        \n        // Add skull detail\n        skull_detail();\n        \n        // Rune slots\n        for(i = [0:2]) {\n            rune_slot(15 + i*10);\n        }\n        \n        // Thicken blade center\n        translate([30, 0, 2.5])\n            cube([20, 8, 5]);\n    }\n}\n\nmodule guard() {\n    // Crossguard with skull details\n    translate([0, -15, 15])\n        cube([10, 30, 5]);\n    \n    // Left skull\n    translate([-2, -20, 18])\n        sphere(4);\n    \n    // Right skull\n    translate([-2, 20, 18])\n        sphere(4);\n}\n\nmodule handle_grip() {\n    // Main handle\n    translate([-5, -2.5, 5])\n        cylinder(h=30, r=2.5);\n    \n    // Grip rings\n    for(i = [0:3]) {\n        translate([-3, -2.5, 8 + i*6])\n            cylinder(h=2, r=3);\n    }\n}\n\nmodule pommel() {\n    // Bottom skull pommel\n    translate([-5, 0, 2])\n        sphere(5);\n    \n    // Spikes\n    for(i = [0:3]) {\n        rotate([0, 0, i*120])\n            translate([-5, -8, 2])\n                cylinder(h=6, r1=2, r2=0.5);\n    }\n}\n\nmodule shadowmourne_axe() {\n    union() {\n        // Main blade\n        blade_assembly();\n        \n        // Guard\n        guard();\n        \n        // Handle\n        handle_grip();\n        \n        // Pommel\n        pommel();\n    }\n}\n\n// Scale to printable size and render\nscale(0.8)\n    shadowmourne_axe();",
    "renders": true
  },
  {
    "household_item": "dreadling",
    "openscad_code": "// Dreadling - medium complexity realistic style\n// Size: ~70mm tall\n\nmodule dreadling() {\n    // Body shell\n    difference() {\n        // Main body\n        union() {\n            // Torso\n            translate([0,0,30])\n            scale([1.2,0.8,1.5])\n            sphere(d=30,$fn=32);\n            \n            // Abdomen\n            translate([0,0,15])\n            scale([1,0.9,1.2])\n            sphere(d=25,$fn=32);\n            \n            // Pelvis\n            translate([0,0,5])\n            scale([0.8,0.6,0.6])\n            sphere(d=20,$fn=32);\n        }\n        \n        // Hollow interior\n        translate([0,0,30])\n        scale([1.1,0.7,1.4])\n        sphere(d=25,$fn=32);\n    }\n    \n    // Head\n    difference() {\n        // Skull\n        translate([0,0,50])\n        scale([0.9,0.7,1.1])\n        sphere(d=25,$fn=32);\n        \n        // Eye sockets\n        translate([-5,7,52])\n        sphere(d=5,$fn=16);\n        translate([5,7,52])\n        sphere(d=5,$fn=16);\n        \n        // Mouth cavity\n        translate([0,4,45])\n        scale([1,0.5,0.4])\n        cube([10,10,8],center=true);\n    }\n    \n    // Mandibles\n    module mandible() {\n        translate([0,0,-5])\n        rotate([0,30,0])\n        scale([1,0.4,0.4])\n        cylinder(h=15,d1=10,d2=5,$fn=16);\n    }\n    \n    // Left mandible\n    translate([-8,4,45])\n    rotate([0,0,-20])\n    mandible();\n    \n    // Right mandible\n    translate([8,4,45])\n    rotate([0,0,20])\n    mandible();\n    \n    // Legs\n    module leg(side) {\n        translate([side*6,0,0])\n        rotate([0,side*15,0])\n        cylinder(h=20,d=6,$fn=16);\n        \n        // Knee joint\n        translate([side*8,0,10])\n        sphere(d=7,$fn=16);\n        \n        // Lower leg\n        translate([side*10,0,5])\n        rotate([0,side*20,0])\n        cylinder(h=15,d=5,$fn=16);\n        \n        // Foot\n        translate([side*12,0,0])\n        rotate([0,side*10,0])\n        scale([1.5,1,0.5])\n        sphere(d=8,$fn=16);\n    }\n    \n    // Front legs\n    leg(-6);\n    leg(6);\n    \n    // Middle legs\n    leg(-5);\n    leg(5);\n    \n    // Rear legs\n    leg(-4);\n    leg(4);\n    \n    // Arms\n    module arm(side) {\n        translate([side*15,0,35])\n        rotate([0,0,side*45])\n        cylinder(h=12,d=5,$fn=16);\n        \n        // Shoulder joint\n        translate([side*15,0,35])\n        sphere(d=7,$fn=16);\n        \n        // Forearm\n        translate([side*20,0,35])\n        rotate([0,0,side*90])\n        cylinder(h=10,d=4,$fn=16);\n        \n        // Claw\n        translate([side*25,0,35])\n        rotate([0,0,side*120])\n        cylinder(h=8,d1=4,d2=1,$fn=16);\n    }\n    \n    // Arms\n    arm(-1);\n    arm(1);\n    \n    // Spine ridges\n    for(i=[0:5]) {\n        translate([0,0,25+i*5])\n        scale([0.4,0.3,1])\n        sphere(d=8,$fn=16);\n    }\n    \n    // Carapace details\n    difference() {\n        translate([0,-10,35])\n        scale([1.2,0.3,0.8])\n        sphere(d=20,$fn=32);\n        \n        // Vent holes\n        for(i=[-1:1]) {\n            translate([i*5,-8,35])\n            cylinder(h=3,d=2,$fn=16);\n        }\n    }\n}\n\n// Generate the model\ndreadling();",
    "renders": true
  },
  {
    "household_item": "corpselurker",
    "openscad_code": "// Corpselurker - Medium complexity realistic style\n// Size: ~80mm tall\n\n// Overall dimensions\nbody_height = 80;\nbody_width = 35;\nbody_depth = 25;\n\n// Head dimensions\nhead_radius = 12;\njaw_length = 8;\n\n// Limb dimensions\narm_length = 45;\narm_diameter = 6;\nleg_length = 40;\nleg_diameter = 8;\n\n// Spinal features\nspine_count = 5;\nspine_height = 3;\nspine_width = 2;\n\n// Eye socket dimensions\neye_radius = 4;\neye_depth = 3;\n\nmodule head() {\n    difference() {\n        // Main skull\n        sphere(r = head_radius);\n        \n        // Eye sockets\n        translate([0, head_radius - 2, 3]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = eye_depth * 2, r = eye_radius, $fn = 16);\n            }\n        }\n        \n        translate([0, -head_radius + 2, 3]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = eye_depth * 2, r = eye_radius, $fn = 16);\n            }\n        }\n        \n        // Jaw separation\n        translate([0, 0, -head_radius - 1]) {\n            cube([head_radius * 2, head_radius * 2, jaw_length * 2], center = true);\n        }\n    }\n    \n    // Lower jaw\n    translate([0, 0, -head_radius - jaw_length/2]) {\n        scale([1, 0.7, 0.4]) {\n            sphere(r = head_radius);\n        }\n    }\n}\n\nmodule spine() {\n    for(i = [0:spine_count-1]) {\n        translate([0, 0, -i * (body_height/spine_count)/2]) {\n            hull() {\n                translate([0, 0, 0]) {\n                    cube([spine_width, spine_width, spine_height], center = true);\n                }\n                translate([0, 3, 0]) {\n                    cube([spine_width, spine_width, spine_height], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule torso() {\n    union() {\n        // Chest cavity\n        hull() {\n            translate([0, 0, body_height/2]) {\n                scale([1, 0.7, 1]) {\n                    sphere(r = body_width/2);\n                }\n            }\n            translate([0, 0, body_height/4]) {\n                scale([0.9, 0.6, 0.8]) {\n                    sphere(r = body_width/2);\n                }\n            }\n        }\n        \n        // Spine\n        translate([0, 0, body_height/2 - 5]) {\n            spine();\n        }\n        \n        // Ribcage\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([body_width/2 - 2, 0, body_height/2 - i * 8]) {\n                    scale([0.3, 0.1, 1]) {\n                        sphere(r = body_width/2);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule arm(side = 1) {\n    translate([body_width/2 * side, 0, body_height/2 - 5]) {\n        rotate([0, 0, 45 * side]) {\n            rotate([0, 90, 0]) {\n                // Upper arm\n                cylinder(h = arm_length/2, r = arm_diameter/2, $fn = 8);\n                \n                // Elbow joint\n                translate([0, 0, arm_length/2]) {\n                    sphere(r = arm_diameter/2);\n                    \n                    // Forearm\n                    translate([0, 0, arm_length/2]) {\n                        cylinder(h = arm_length/2, r = arm_diameter/2 * 0.8, $fn = 8);\n                        \n                        // Hand\n                        translate([0, 0, arm_length/2 + 2]) {\n                            scale([0.8, 0.3, 1.5]) {\n                                sphere(r = arm_diameter/2);\n                            }\n                            \n                            // Claws\n                            for(j = [0:2]) {\n                                rotate([0, 0, j * 120]) {\n                                    translate([0, arm_diameter/2, 0]) {\n                                        rotate([90, 0, 0]) {\n                                            cylinder(h = 4, r1 = 1, r2 = 0.5, $fn = 4);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule leg(side = 1) {\n    translate([body_width/3 * side, 0, -body_height/2]) {\n        rotate([0, 0, 15 * side]) {\n            // Upper leg\n            cylinder(h = leg_length/2, r = leg_diameter/2, $fn = 8);\n            \n            // Knee joint\n            translate([0, 0, leg_length/2]) {\n                sphere(r = leg_diameter/2);\n                \n                // Lower leg\n                translate([0, 0, leg_length/2]) {\n                    cylinder(h = leg_length/2, r = leg_diameter/2 * 0.8, $fn = 8);\n                    \n                    // Foot\n                    translate([0, 0, leg_length/2 + 2]) {\n                        scale([1.5, 0.8, 0.5]) {\n                            sphere(r = leg_diameter/2);\n                        }\n                        \n                        // Toes\n                        for(k = [0:2]) {\n                            translate([k * 4 - 4, 0, -1]) {\n                                cube([2, 1, 1]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Torso\n    torso();\n    \n    // Head\n    translate([0, 0, body_height/2 + head_radius/2]) {\n        head();\n    }\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "household_item": "bonefiend",
    "openscad_code": "// Bonefiend - realistic skeletal demon\n// Medium complexity, 3D printable\n\n// Overall dimensions\n$fn = 40;\nbody_height = 60;\npelvis_width = 30;\n\n// Spinal column module\nmodule spine_segment(height, diameter) {\n    cylinder(h=height, d=diameter, center=true);\n}\n\n// Vertebrae with processes\nmodule vertebra(height, width) {\n    union() {\n        // Main body\n        sphere(d=width);\n        \n        // Spinal processes\n        translate([0, 0, height/2 + 2])\n            rotate([90, 0, 0])\n                cylinder(h=8, d1=4, d2=2);\n        \n        // Transverse processes\n        translate([width/2 + 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=6, d=3);\n        translate([-width/2 - 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=6, d=3);\n    }\n}\n\n// Rib module\nmodule rib(length, curve) {\n    translate([0, 0, -length/2])\n        rotate([0, 90, 0])\n            rotate_extrude(angle=curve)\n                translate([15, 0, 0])\n                    circle(d=3);\n}\n\n// Skull\nmodule skull() {\n    union() {\n        // Cranium\n        sphere(d=20);\n        \n        // Jaw\n        translate([0, -8, -10])\n            cube([12, 6, 8], center=true);\n        \n        // Eye sockets\n        translate([5, 6, 2])\n            sphere(d=6);\n        translate([-5, 6, 2])\n            sphere(d=6);\n        \n        // Nasal cavity\n        translate([0, 7, -2])\n            cube([4, 4, 6], center=true);\n        \n        // Teeth\n        for(i=[-4:2:4]) {\n            translate([i, -11, -8])\n                cube([1.5, 3, 2], center=true);\n        }\n    }\n}\n\n// Arm bones\nmodule arm_bone(length, thickness) {\n    translate([0, 0, -length/2])\n        cylinder(h=length, d1=thickness*1.5, d2=thickness);\n}\n\n// Leg bones\nmodule leg_bone(upper_length, lower_length, thickness) {\n    union() {\n        // Femur\n        translate([0, 0, -upper_length/2])\n            cylinder(h=upper_length, d1=thickness*1.8, d2=thickness);\n        \n        // Tibia\n        translate([0, 0, -upper_length - lower_length/2])\n            cylinder(h=lower_length, d1=thickness, d2=thickness*1.2);\n        \n        // Foot\n        translate([0, 3, -upper_length - lower_length - 3])\n            cube([8, 12, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, body_height + 15])\n        skull();\n    \n    // Spine\n    for(i=[0:1:5]) {\n        translate([0, 0, body_height - i*8])\n            vertebra(6, 12 - i);\n    }\n    \n    // Ribcage\n    for(i=[0:1:6]) {\n        rotate([0, 0, i*25])\n            translate([0, 10, body_height - i*2])\n                rib(20, 60);\n    }\n    \n    // Pelvis\n    translate([0, 0, body_height/2])\n        cube([pelvis_width, 15, 8], center=true);\n    \n    // Arms\n    // Left arm\n    translate([-15, 0, body_height - 10])\n        rotate([0, 0, 30])\n            arm_bone(25, 4);\n    \n    // Right arm\n    translate([15, 0, body_height - 10])\n        rotate([0, 0, -30])\n            arm_bone(25, 4);\n    \n    // Legs\n    // Left leg\n    translate([-8, 0, body_height/2 - 10])\n        leg_bone(20, 18, 5);\n    \n    // Right leg\n    translate([8, 0, body_height/2 - 10])\n        leg_bone(20, 18, 5);\n}",
    "renders": true
  },
  {
    "household_item": "soulreaver",
    "openscad_code": "// Soul Reaver - Medium complexity realistic style\n// Basic dimensions in mm\nblade_length = 70;\nblade_width = 25;\nblade_thickness = 3;\nhandle_length = 30;\nhandle_diameter = 12;\nguard_width = 35;\nguard_thickness = 5;\n\n// Overall scale for 3D printing\nscale_factor = 0.8;\n\n// Main module\nmodule soulreaver() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Blade\n            blade();\n            \n            // Guard\n            guard();\n            \n            // Handle\n            handle();\n            \n            // Pommel\n            pommel();\n        }\n    }\n}\n\n// Curved blade with serrated edge\nmodule blade() {\n    difference() {\n        // Main blade body\n        translate([0, 0, blade_length/2])\n            scale([1, 1, 2])\n                rotate([90, 0, 0])\n                    cylinder(h=blade_length, r1=blade_width/2, r2=blade_width/3, $fn=6);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, blade_length/2])\n            scale([0.8, 0.8, 2.1])\n                rotate([90, 0, 0])\n                    cylinder(h=blade_length, r1=blade_width/2.2, r2=blade_width/3.2, $fn=6);\n        \n        // Serrated edge cuts\n        for(i = [10:10:blade_length-10]) {\n            translate([0, -blade_width/2, i])\n                rotate([0, 20, 0])\n                    cube([blade_thickness*3, blade_width/2, 5], center=true);\n        }\n    }\n    \n    // Blade tip detail\n    translate([0, 0, blade_length+5])\n        rotate([90, 0, 0])\n            cylinder(h=10, r1=blade_width/3, r2=0, $fn=6);\n    \n    // Blood groove\n    translate([0, 0, blade_length/2])\n        scale([0.1, 1, 1.8])\n            rotate([90, 0, 0])\n                cylinder(h=blade_length, r=blade_width/2.5, $fn=6);\n}\n\n// Decorative guard\nmodule guard() {\n    difference() {\n        union() {\n            // Main guard body\n            translate([0, 0, 0])\n                cube([guard_width, guard_thickness, blade_thickness*3], center=true);\n            \n            // Side guards\n            translate([guard_width/2-2, -5, 0])\n                cube([4, 10, blade_thickness*2], center=true);\n            \n            translate([-guard_width/2+2, -5, 0])\n                cube([4, 10, blade_thickness*2], center=true);\n        }\n        \n        // Mounting hole\n        translate([0, -5, 0])\n            cylinder(h=guard_thickness+1, r=handle_diameter/2+1, center=true, $fn=32);\n    }\n}\n\n// Textured handle\nmodule handle() {\n    difference() {\n        // Main handle\n        translate([0, -handle_length/2-guard_thickness/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, r=handle_diameter/2, center=true, $fn=32);\n        \n        // Grip rings\n        for(i = [0:5:handle_length-10]) {\n            translate([0, -i-10, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r=handle_diameter/2+1, center=true, $fn=32);\n        }\n    }\n    \n    // Handle texture\n    for(i = [0:120:360]) {\n        rotate([0, i, 0])\n            translate([handle_diameter/2-0.5, -handle_length/2-guard_thickness/2, 0])\n                cube([1, handle_length, 0.5], center=true);\n    }\n}\n\n// Ornate pommel\nmodule pommel() {\n    union() {\n        // Main pommel\n        translate([0, -handle_length-guard_thickness-5, 0])\n            rotate([90, 0, 0])\n                cylinder(h=10, r1=handle_diameter/1.5, r2=handle_diameter/2, center=true, $fn=32);\n        \n        // Decorative rings\n        translate([0, -handle_length-guard_thickness-5, 0])\n            rotate([90, 0, 0])\n                cylinder(h=2, r=handle_diameter/1.3, center=true, $fn=32);\n        \n        // Bottom spike\n        translate([0, -handle_length-guard_thickness-10, 0])\n            rotate([90, 0, 0])\n                cylinder(h=5, r1=handle_diameter/3, r2=0, center=true, $fn=6);\n    }\n}\n\n// Generate the model\nsoulreaver();",
    "renders": true
  },
  {
    "household_item": "deathwhisper",
    "openscad_code": "// Deathwhisper - medium-complexity realistic style\n// Overall dimensions ~90 mm long, compatible with FDM printing\n\n$fn = 36;\n\n// Main parameters\nblade_len = 70;\nblade_w   = 12;\nblade_t   = 2.5;\nguard_w   = 35;\nguard_h   = 8;\nguard_t   = 6;\nhandle_len = 20;\nhandle_d   = 12;\npommel_r   = 8;\n\n// Blade module\nmodule blade() {\n    difference() {\n        // Main blade body\n        union() {\n            // Tapered body\n            hull() {\n                translate([0, 0, blade_len/2])\n                    cube([blade_w*0.9, blade_t, blade_len*0.1], center=true);\n                translate([0, 0, -blade_len/2 - 2])\n                    cube([blade_w*0.3, blade_t*0.8, blade_len*0.1], center=true);\n            }\n            // Spine ridge\n            translate([0, -blade_t/2 - 0.5, 0])\n                cube([blade_w*0.3, 1, blade_len], center=true);\n            // Fuller (blood groove)\n            translate([0, 0, 5])\n                cube([blade_w*0.4, blade_t*0.3, blade_len*0.7], center=true);\n        }\n        // Edge bevel left\n        translate([blade_w/2 - 1, 0, -blade_len/2])\n            rotate([0, 0, -25])\n            cube([blade_w, blade_t*2, blade_len*1.5], center=true);\n        // Edge bevel right\n        translate([-blade_w/2 + 1, 0, -blade_len/2])\n            rotate([0, 0, 25])\n            cube([blade_w, blade_t*2, blade_len*1.5], center=true);\n    }\n}\n\n// Guard module\nmodule guard() {\n    difference() {\n        union() {\n            // Main bar\n            cube([guard_w, guard_t, guard_h], center=true);\n            // Decorative flares\n            for (x = [-1, 1]) {\n                translate([x * (guard_w/2 - 3), 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=6, r1=3, r2=5);\n            }\n        }\n        // Central slot for tang\n        translate([0, 0, 0])\n            cube([blade_w*1.1, guard_t+1, blade_t*2], center=true);\n    }\n}\n\n// Handle module\nmodule handle() {\n    difference() {\n        union() {\n            // Main grip\n            cylinder(h=handle_len, d=handle_d, center=true);\n            // Ring spacers\n            for (z = [-handle_len/2 + 3, 0, handle_len/2 - 3]) {\n                translate([0, 0, z])\n                    cylinder(h=2, d=handle_d + 2, $fn=6);\n            }\n            // Grip texture rings\n            for (z = [-handle_len/2 + 5 : 3 : handle_len/2 - 5]) {\n                translate([0, 0, z])\n                    cylinder(h=1, d=handle_d + 1);\n            }\n        }\n        // Tang cavity\n        translate([0, 0, 0])\n            cube([blade_w*0.9, blade_t*1.5, handle_len*1.1], center=true);\n    }\n}\n\n// Pommel module\nmodule pommel() {\n    difference() {\n        union() {\n            sphere(r=pommel_r);\n            // Small decorative spike\n            translate([0, 0, pommel_r])\n                cylinder(h=5, r1=pommel_r*0.4, r2=0.1);\n        }\n        // Tang hole\n        translate([0, 0, -pommel_r])\n            cube([blade_w*0.9, blade_t*1.5, pommel_r*2], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, blade_len/2 + 5])\n    blade();\ntranslate([0, 0, 5])\n    guard();\ntranslate([0, 0, -handle_len/2 - 2])\n    handle();\ntranslate([0, 0, -handle_len - pommel_r - 2])\n    pommel();",
    "renders": true
  },
  {
    "household_item": "blackwight",
    "openscad_code": "// Blackwight chess piece - Realistic style, medium complexity\n// Knight piece with horse head details\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main module\nmodule blackwight() {\n    base();\n    pedestal();\n    body();\n    neck();\n    head();\n    mane();\n    ears();\n    eyes();\n    nostrils();\n}\n\n// Base cylinder for stability\nmodule base() {\n    translate([0, 0, 0])\n        cylinder(h = 8, d = 38, $fn = 64);\n}\n\n// Decorative pedestal\nmodule pedestal() {\n    translate([0, 0, 8])\n        cylinder(h = 5, d1 = 34, d2 = 28, $fn = 64);\n}\n\n// Main body - tapered cylinder\nmodule body() {\n    translate([0, 0, 13])\n        cylinder(h = 25, d1 = 28, d2 = 22, $fn = 64);\n}\n\n// Neck - curved transition\nmodule neck() {\n    translate([0, -3, 38])\n        rotate([-20, 0, 0])\n            cylinder(h = 18, d1 = 16, d2 = 12, $fn = 32);\n}\n\n// Horse head shape\nmodule head() {\n    // Main head\n    translate([0, -12, 50])\n        rotate([-35, 0, 0])\n            scale([1, 1.2, 1.3])\n                sphere(d = 18);\n    \n    // Muzzle extension\n    translate([0, -20, 45])\n        rotate([-35, 0, 0])\n            scale([0.9, 1.5, 0.8])\n                sphere(d = 12);\n}\n\n// Mane - series of ridges\nmodule mane() {\n    for(i = [0:3]) {\n        translate([0, -8 - i*3, 50 - i*2])\n            rotate([-35 - i*5, 0, 0])\n                cube([2, 12, 4], center = true);\n    }\n}\n\n// Ears\nmodule ears() {\n    // Left ear\n    translate([-6, -8, 60])\n        rotate([0, 0, -20])\n            cylinder(h = 8, d1 = 4, d2 = 2);\n    \n    // Right ear\n    translate([6, -8, 60])\n        rotate([0, 0, 20])\n            cylinder(h = 8, d1 = 4, d2 = 2);\n}\n\n// Eyes - small spheres\nmodule eyes() {\n    // Left eye\n    translate([-5, -16, 52])\n        sphere(d = 3);\n    \n    // Right eye\n    translate([5, -16, 52])\n        sphere(d = 3);\n}\n\n// Nostrils\nmodule nostrils() {\n    // Left nostril\n    translate([-3, -23, 44])\n        rotate([-35, 0, 0])\n            cylinder(h = 2, d = 2);\n    \n    // Right nostril\n    translate([3, -23, 44])\n        rotate([-35, 0, 0])\n            cylinder(h = 2, d = 2);\n}\n\n// Create the final piece\nblackwight();",
    "renders": true
  },
  {
    "household_item": "goreshade",
    "openscad_code": "// Realistic Goreshade - Medium Complexity\n// Approx 75mm tall, 3D printable with no supports\n\n// Main module\nmodule goreshade() {\n    // Base handle\n    handle();\n    \n    // Main body assembly\n    translate([0, 0, 40]) {\n        body();\n    }\n    \n    // Blade assembly\n    translate([0, 0, 45]) {\n        blade();\n    }\n    \n    // Decorative rings\n    for(i = [1:3]) {\n        translate([0, 0, 40 + i * 8]) {\n            ring(6 + i * 2, 2);\n        }\n    }\n}\n\n// Handle module - ergonomic grip\nmodule handle() {\n    // Main grip\n    cylinder(h = 35, r1 = 6, r2 = 5, $fn = 32);\n    \n    // Grip rings for better hold\n    for(i = [0:3]) {\n        translate([0, 0, 5 + i * 8]) {\n            cylinder(h = 2, r = 6.5, $fn = 32);\n        }\n    }\n    \n    // Pommel\n    translate([0, 0, -5]) {\n        sphere(r = 8, $fn = 32);\n    }\n    \n    // Pommel spike\n    translate([0, 0, -13]) {\n        cylinder(h = 8, r1 = 3, r2 = 0.5, $fn = 16);\n    }\n}\n\n// Main body module - cylindrical with details\nmodule body() {\n    difference() {\n        // Main cylinder\n        cylinder(h = 25, r = 15, $fn = 64);\n        \n        // Central hole\n        cylinder(h = 26, r = 8, $fn = 32);\n        \n        // Decorative grooves\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([12, 0, 0]) {\n                    cube([2, 1, 25], center = true);\n                }\n            }\n        }\n    }\n    \n    // Top ring\n    translate([0, 0, 25]) {\n        cylinder(h = 3, r1 = 15, r2 = 12, $fn = 32);\n    }\n}\n\n// Blade module - curved blade with realistic proportions\nmodule blade() {\n    // Blade base\n    translate([0, 0, -5]) {\n        cylinder(h = 10, r1 = 12, r2 = 8, $fn = 32);\n    }\n    \n    // Main blade - constructed from segments\n    union() {\n        // Blade segments\n        for(i = [0:8]) {\n            translate([0, 0, 5 + i * 4]) {\n                rotate([0, i * 3, 0]) {\n                    blade_segment(8 - i * 0.7, 8 - i * 0.7);\n                }\n            }\n        }\n        \n        // Blade tip\n        translate([0, 0, 42]) {\n            rotate([0, 27, 0]) {\n                cylinder(h = 8, r1 = 1.5, r2 = 0, $fn = 16);\n            }\n        }\n        \n        // Blade spine\n        translate([-5, 0, 5]) {\n            rotate([0, 15, 0]) {\n                cube([10, 2, 45]);\n            }\n        }\n    }\n    \n    // Blood grooves\n    difference() {\n        // Main blade union\n        union();\n        \n        // Grooves\n        for(i = [1:3]) {\n            translate([0, 0, 10 + i * 10]) {\n                rotate([0, i * 5, 0]) {\n                    translate([0, -1, 0]) {\n                        cube([20, 2, 3]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Individual blade segment\nmodule blade_segment(width, length) {\n    hull() {\n        translate([-width/2, -1, 0]) {\n            cube([0.5, 2, 4]);\n        }\n        translate([width/2, -1, 0]) {\n            cube([0.5, 2, 4]);\n        }\n        translate([-width/2, -1, 4]) {\n            cube([0.5, 2, 0.5]);\n        }\n        translate([width/2, -1, 4]) {\n            cube([0.5, 2, 0.5]);\n        }\n    }\n}\n\n// Decorative ring module\nmodule ring(radius, height) {\n    difference() {\n        cylinder(h = height, r = radius, $fn = 32);\n        cylinder(h = height + 1, r = radius - 2, $fn = 32);\n    }\n}\n\n// Render the goreshade\ngoreshade();",
    "renders": true
  },
  {
    "household_item": "nethergeist",
    "openscad_code": "// Nethergeist - realistic style, medium complexity\n// Height: 80mm, designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main body module\nmodule nethergeist() {\n    // Base platform\n    translate([0, 0, -2]) {\n        cylinder(h=4, r1=20, r2=22);\n    }\n    \n    // Tattered robes\n    union() {\n        // Main robe body\n        translate([0, 0, 10]) {\n            cylinder(h=45, r1=15, r2=10);\n        }\n        \n        // Tattered edges using difference\n        translate([0, 0, 0]) {\n            difference() {\n                cylinder(h=55, r1=18, r2=12);\n                cylinder(h=55, r1=14, r2=8);\n            }\n        }\n        \n        // Tattered strips\n        for(i=[0:30:359]) {\n            rotate([0, 0, i]) {\n                translate([15, 0, 5]) {\n                    rotate([90, 0, 0]) {\n                        scale([0.5, 1, 1]) {\n                            cylinder(h=40, r1=2, r2=0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Head\n    translate([0, 0, 55]) {\n        sphere(r=8);\n        \n        // Eye sockets\n        for(x=[-3, 3]) {\n            translate([x, 2, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=10, r1=1.5, r2=1);\n                }\n            }\n        }\n    }\n    \n    // Hood\n    translate([0, 0, 60]) {\n        difference() {\n            sphere(r=15);\n            translate([0, 0, -5]) {\n                cube([30, 30, 20], center=true);\n            }\n            cylinder(h=30, r1=5, r2=8);\n        }\n    }\n    \n    // Arms\n    for(side=[-1, 1]) {\n        // Upper arm\n        translate([side*12, 0, 40]) {\n            rotate([0, side*30, 0]) {\n                cylinder(h=15, r1=2.5, r2=2);\n                \n                // Lower arm\n                translate([side*15, 0, 0]) {\n                    rotate([0, side*45, 0]) {\n                        cylinder(h=20, r1=2, r2=1.5);\n                        \n                        // Hand\n                        translate([side*20, 0, 0]) {\n                            sphere(r=2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Chains\n    module chain_link() {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=4, r=1.5);\n                cylinder(h=4.2, r=1);\n            }\n        }\n    }\n    \n    // Left side chains\n    translate([-18, 0, 20]) {\n        for(i=[0:5]) {\n            translate([0, 0, i*4]) {\n                chain_link();\n            }\n        }\n    }\n    \n    // Right side chains\n    translate([18, 0, 25]) {\n        for(i=[0:4]) {\n            translate([0, 0, i*4]) {\n                chain_link();\n            }\n        }\n    }\n    \n    // Ghostly wisps\n    for(i=[0:45:359]) {\n        rotate([0, 0, i]) {\n            translate([random(8, 12), 0, random(0, 10)]) {\n                scale([1, 1, random(0.5, 1.5)]) {\n                    sphere(r=random(0.5, 1.5));\n                }\n            }\n        }\n    }\n}\n\n// Render the nethergeist\nnethergeist();",
    "renders": true
  },
  {
    "household_item": "cryptwraith",
    "openscad_code": "// Cryptwraith - realistic style, medium complexity\n// 3D printable ghostly entity with flowing robes and ethereal features\n\n// Parameters\n$fn = 32;\nwall_thickness = 1.5;\nscale_factor = 0.8;  // Overall model size 80mm\n\n// Main module\nmodule cryptwraith() {\n    scale([scale_factor, scale_factor, scale_factor]) union() {\n        // Hood and head\n        hood();\n        \n        // Flowing robes\n        robes();\n        \n        // Ethereal arms\n        arms();\n        \n        // Ghostly tail\n        tail();\n    }\n}\n\n// Hood module\nmodule hood() {\n    translate([0, 0, 25]) {\n        difference() {\n            // Main hood shape\n            scale([15, 20, 20]) sphere(r = 1);\n            \n            // Face hole\n            translate([0, 12, 0]) scale([8, 8, 12]) sphere(r = 1);\n            \n            // Eye sockets\n            for(x = [-4, 4]) {\n                translate([x, 10, 2]) rotate([0, 0, 0]) cylinder(h = 5, r1 = 2, r2 = 1);\n            }\n        }\n        \n        // Head inside hood\n        color(\"darkgray\") translate([0, 0, -5]) scale([8, 8, 10]) sphere(r = 1);\n    }\n}\n\n// Robes module\nmodule robes() {\n    // Main body\n    translate([0, 0, 12]) {\n        difference() {\n            // Outer robe\n            scale([20, 15, 25]) sphere(r = 1);\n            \n            // Hollow center\n            scale([17, 12, 22]) sphere(r = 1);\n        }\n    }\n    \n    // Flowing layers\n    for(i = [0:2]) {\n        translate([0, 0, 10 - i*5]) {\n            rotate([0, 0, i*30]) {\n                scale([22 + i*3, 18 + i*2, 5]) sphere(r = 1);\n            }\n        }\n    }\n}\n\n// Arms module\nmodule arms() {\n    // Left arm\n    translate([-15, 0, 15]) {\n        rotate([0, 0, 30]) {\n            rotate([45, 0, 0]) {\n                scale([3, 3, 12]) sphere(r = 1);\n                \n                // Hand\n                translate([0, 0, -8]) scale([4, 2, 2]) sphere(r = 1);\n            }\n        }\n    }\n    \n    // Right arm\n    translate([15, 0, 15]) {\n        rotate([0, 0, -30]) {\n            rotate([45, 0, 0]) {\n                scale([3, 3, 12]) sphere(r = 1);\n                \n                // Hand\n                translate([0, 0, -8]) scale([4, 2, 2]) sphere(r = 1);\n            }\n        }\n    }\n}\n\n// Ghostly tail module\nmodule tail() {\n    for(i = [0:5]) {\n        translate([sin(i*15)*i*2, cos(i*15)*i, -5 - i*8]) {\n            scale([12 - i*1.5, 12 - i*1.5, 6]) sphere(r = 1);\n        }\n    }\n}\n\n// Generate the model\ncryptwraith();",
    "renders": true
  },
  {
    "household_item": "gloomrevenant",
    "openscad_code": "// Gloomrevenant - Realistic Medium Complexity\n// 3D printable figure with no overhangs\n\n$fn=32;\n\n// Overall dimensions\nscale_factor = 0.8;\nbase_height = 5;\nbody_height = 35;\nhead_height = 15;\ntotal_height = base_height + body_height + head_height;\n\nmodule gloomrevenant() {\n    union() {\n        // Base platform\n        translate([0, 0, base_height/2])\n            cube([25, 25, base_height], center=true);\n        \n        // Body\n        translate([0, 0, base_height + body_height/2])\n            difference() {\n                // Main body\n                cube([15, 8, body_height], center=true);\n                \n                // Hollow center\n                translate([0, 0, -body_height/4])\n                    cube([10, 4, body_height/2], center=true);\n                \n                // Side holes for ethereal effect\n                for (i = [-1, 1]) {\n                    translate([i*6, 0, body_height/3])\n                        rotate([0, 90, 0])\n                            cylinder(h=8, d=4, center=true);\n                }\n            }\n        \n        // Head\n        translate([0, 0, base_height + body_height + head_height/2])\n            difference() {\n                // Main head shape\n                sphere(d=12);\n                \n                // Hollow back\n                translate([0, 0, -3])\n                    sphere(d=10);\n                \n                // Eye sockets\n                for (angle = [30, 150]) {\n                    rotate([0, 0, angle])\n                        translate([4, 0, 2])\n                            sphere(d=3.5);\n                }\n                \n                // Mouth cavity\n                translate([0, 3, -2])\n                    cube([6, 2, 4], center=true);\n            }\n        \n        // Hood/cowl\n        translate([0, 0, base_height + body_height + head_height - 3])\n            difference() {\n                // Main hood\n                rotate_extrude(angle=360)\n                    translate([6, 0, 0])\n                        polygon(points=[[0,0], [8,0], [8,12], [0,12]]);\n                \n                // Inner cutout\n                rotate_extrude(angle=360)\n                    translate([4, 0, 0])\n                        polygon(points=[[0,0], [6,0], [6,10], [0,10]]);\n            }\n        \n        // Arms\n        for (side = [-1, 1]) {\n            // Upper arm\n            translate([side*8, 0, base_height + body_height - 5])\n                rotate([0, side*15, 0])\n                    cylinder(h=10, d1=4, d2=3);\n            \n            // Lower arm\n            translate([side*15, 0, base_height + body_height - 12])\n                rotate([0, side*30, 0])\n                    cylinder(h=8, d=2.5);\n            \n            // Hand\n            translate([side*20, 0, base_height + body_height - 16])\n                sphere(d=3);\n        }\n        \n        // Cape/robe back\n        translate([0, 5, base_height + body_height/2])\n            difference() {\n                // Main cape\n                cube([18, 2, body_height + 5], center=true);\n                \n                // Tattered bottom\n                for (i = [-8:2:8]) {\n                    translate([i, 1, -body_height/2 - 2])\n                        cube([1.5, 2, 4]);\n                }\n            }\n        \n        // Ethereal wisps\n        for (i = [1:3]) {\n            translate([0, 0, base_height + body_height/4 + i*5])\n                rotate([0, 0, i*120])\n                    translate([8, 0, 0])\n                        cylinder(h=12, d1=2, d2=0.5);\n        }\n        \n        // Feet supports\n        for (side = [-1, 1]) {\n            translate([side*5, 0, base_height/2])\n                cylinder(h=base_height, d1=3, d2=4);\n        }\n    }\n}\n\n// Scale and position for printing\ntranslate([0, 0, 0])\n    scale([scale_factor, scale_factor, scale_factor])\n        gloomrevenant();",
    "renders": true
  },
  {
    "household_item": "plaguewraith",
    "openscad_code": "// Plaguewraith - Medium complexity realistic style\n// 3D printable model, about 80mm tall\n\n// Overall scale\nscale(0.8) {\n\n// Body - tattered robes with slight bell shape\nunion() {\n    // Main robe body\n    difference() {\n        cylinder(h = 60, r1 = 18, r2 = 22, $fn = 32);\n        translate([0, 0, 55]) cylinder(h = 10, r1 = 15, r2 = 0, $fn = 32);\n    }\n    \n    // Hood\n    translate([0, 0, 60]) rotate([0, 0, 0])\n    difference() {\n        sphere(r = 15, $fn = 32);\n        translate([0, 0, -5]) cube([30, 30, 15], center = true);\n    }\n    \n    // Sleeves\n    translate([15, 0, 40]) rotate([0, 45, 0])\n    cylinder(h = 25, r1 = 5, r2 = 3, $fn = 16);\n    \n    translate([-15, 0, 40]) rotate([0, -45, 0])\n    cylinder(h = 25, r1 = 5, r2 = 3, $fn = 16);\n}\n\n// Hands\ntranslate([18, 0, 28]) sphere(r = 3, $fn = 16);\ntranslate([-18, 0, 28]) sphere(r = 3, $fn = 16);\n\n// Skull face visible under hood\ntranslate([0, 12, 60]) {\n    // Skull\n    difference() {\n        sphere(r = 8, $fn = 32);\n        translate([0, 3, 0]) sphere(r = 9, $fn = 32);\n    }\n    \n    // Eye sockets\n    translate([3, -2, 2]) sphere(r = 2, $fn = 16);\n    translate([-3, -2, 2]) sphere(r = 2, $fn = 16);\n    \n    // Nose cavity\n    translate([0, -1, 0]) rotate([90, 0, 0])\n    cylinder(h = 3, r1 = 1.5, r2 = 0, $fn = 8);\n}\n\n// Belt with pouches\ntranslate([0, 0, 25]) {\n    // Belt\n    rotate([90, 0, 0]) cylinder(h = 40, r = 1.5, $fn = 32);\n    \n    // Pouch 1\n    translate([8, 0, 0]) rotate([0, 90, 0])\n    cylinder(h = 6, r1 = 4, r2 = 3, $fn = 16);\n    \n    // Pouch 2\n    translate([-8, 0, 0]) rotate([0, 90, 0])\n    cylinder(h = 5, r1 = 3.5, r2 = 2.5, $fn = 16);\n}\n\n// Tattered bottom edges\nmodule tatters() {\n    for(i = [0:30:330]) {\n        rotate([0, 0, i]) translate([20, 0, 0]) {\n            // Random tattered pieces\n            translate([0, -2, 0]) cube([3, 4, 8]);\n            translate([0, -3, -5]) cube([2, 6, 5]);\n        }\n    }\n}\n\ntranslate([0, 0, 0]) tatters();\n\n// Plague doctor mask hanging from belt\ntranslate([0, 10, 15]) rotate([90, 0, 0]) {\n    difference() {\n        // Main mask shape\n        union() {\n            cylinder(h = 8, r = 4, $fn = 32);\n            translate([0, 0, 8]) cylinder(h = 5, r1 = 4, r2 = 2, $fn = 32);\n        }\n        \n        // Eye holes\n        translate([2, 0, 6]) rotate([90, 0, 0]) cylinder(h = 1, r = 1, $fn = 16);\n        translate([-2, 0, 6]) rotate([90, 0, 0]) cylinder(h = 1, r = 1, $fn = 16);\n        \n        // Beak hole\n        translate([0, 0, 12]) cylinder(h = 3, r = 1, $fn = 16);\n    }\n}\n\n// Walking staff\ntranslate([25, 0, 0]) rotate([0, 0, 15]) {\n    // Staff\n    cylinder(h = 70, r = 2, $fn = 16);\n    \n    // Top ornament\n    translate([0, 0, 70]) sphere(r = 3, $fn = 16);\n}\n\n// Add small plague symbols on robe\nmodule plague_symbol(x, y, z) {\n    translate([x, y, z]) rotate([90, 0, 0]) {\n        // Simple cross shape\n        cube([2, 8, 1]);\n        cube([8, 2, 1]);\n    }\n}\n\nplague_symbol(5, 15, 45);\nplague_symbol(-5, 15, 45);\nplague_symbol(0, -15, 35);\n\n}",
    "renders": true
  },
  {
    "household_item": "ashspecter",
    "openscad_code": "// Ash Specter - realistic style, medium complexity\n// Overall size: ~60mm tall, 3mm wall thickness for 3D printing\n\n$fn = 32;  // Smooth curves\n\nmodule ashSpecter() {\n    // Main body - torso\n    difference() {\n        // Torso base shape\n        translate([0, 0, 30])\n            scale([1, 0.7, 1.8])\n            sphere(10);\n            \n        // Hollow torso cavity\n        translate([0, 0, 30])\n            scale([0.85, 0.55, 1.65])\n            sphere(10);\n    }\n    \n    // Head with hood\n    difference() {\n        // Hood\n        translate([0, 0, 50])\n            rotate([0, 0, 0])\n            cylinder(h=15, r1=12, r2=8);\n            \n        // Face opening\n        translate([0, 3, 55])\n            rotate([0, 0, 0])\n            cylinder(h=10, r1=5, r2=3);\n    }\n    \n    // Face detail - glowing eyes\n    translate([-3, 4, 55])\n        sphere(1.5);\n    translate([3, 4, 55])\n        sphere(1.5);\n    \n    // Arms\n    for(side = [-1, 1]) {\n        // Left arm\n        translate([side * 12, 0, 40])\n            rotate([0, side * 15, 0])\n            cylinder(h=18, r=3);\n            \n        // Hand\n        translate([side * 20, 0, 38])\n            sphere(3);\n    }\n    \n    // Robe bottom - flowing\n    difference() {\n        // Main robe\n        translate([0, 0, 15])\n            cylinder(h=20, r1=15, r2=18);\n            \n        // Hollow inside\n        translate([0, 0, 15])\n            cylinder(h=20, r1=12, r2=15);\n    }\n    \n    // Tattered edges\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([15 + sin(i*5)*2, 0, 5])\n                cube([3, 2, 8]);\n    }\n    \n    // Ash particles floating around\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([20 + sin(i*3)*5, 0, 25 + cos(i*2)*5])\n                sphere(1);\n    }\n    \n    // Belt\n    translate([0, 0, 28])\n        difference() {\n            cylinder(h=3, r=14);\n            cylinder(h=4, r=11);\n        }\n    \n    // Belt details\n    for(i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([13, 0, 29])\n                cube([2, 0.5, 1]);\n    }\n    \n    // Lower body fade - ghostly\n    translate([0, 0, 0])\n        cylinder(h=5, r1=10, r2=5);\n}\n\n// Generate the complete model\nashSpecter();",
    "renders": true
  },
  {
    "household_item": "duskbane",
    "openscad_code": "// Duskbane - realistic medium-complexity OpenSCAD model\n// Overall length ~90 mm, designed for FDM printing without supports\n\n$fn = 36;\n\n// Main dimensions\nblade_len = 65;\nblade_width = 18;\nblade_thick = 3;\nhandle_len = 25;\nhandle_dia = 12;\nguard_width = 30;\nguard_thick = 5;\npommel_dia = 18;\n\nmodule blade() {\n    // Tapered leaf-shaped blade\n    linear_extrude(height = blade_thick, center = true, convexity = 10)\n    polygon(points = [\n        [0, 0],\n        [blade_len*0.9, blade_width/2],\n        [blade_len, blade_width/3],\n        [blade_len, -blade_width/3],\n        [blade_len*0.9, -blade_width/2],\n        [0, 0]\n    ]);\n\n    // Fuller along center\n    translate([blade_len/2, 0, -blade_thick/2-0.1])\n    rotate([0, 90, 0])\n    cylinder(h = blade_len*0.8, r1 = 0.8, r2 = 0.3, center = true);\n}\n\nmodule guard() {\n    // Quatrefoil guard plate\n    difference() {\n        union() {\n            // Central disc\n            cylinder(h = guard_thick, r = handle_dia/2 + 4, center = true);\n\n            // Four lobes\n            for (a = [0:90:270]) {\n                rotate([0, 0, a])\n                translate([guard_width/2 - 4, 0, 0])\n                scale([1.5, 1, 1])\n                cylinder(h = guard_thick, r = 5, center = true);\n            }\n        }\n\n        // Center hole for tang\n        cylinder(h = guard_thick + 2, r = handle_dia/2 - 1, center = true);\n    }\n}\n\nmodule handle() {\n    // Leather-wrapped grip\n    difference() {\n        // Main grip cylinder\n        cylinder(h = handle_len, r = handle_dia/2, center = true);\n\n        // Hollow for tang\n        cylinder(h = handle_len + 2, r = handle_dia/2 - 2, center = true);\n    }\n\n    // Decorative rings\n    for (z = [-handle_len/2 + 3, handle_len/2 - 3]) {\n        translate([0, 0, z])\n        cylinder(h = 2, r = handle_dia/2 + 1, center = true);\n    }\n\n    // Leather texture - raised bands\n    for (z = [-handle_len/2 + 6 : 4 : handle_len/2 - 6]) {\n        translate([0, 0, z])\n        scale([1, 1, 0.3])\n        cylinder(h = 2, r = handle_dia/2 + 0.5, center = true);\n    }\n}\n\nmodule pommel() {\n    // Faceted pommel\n    sphere(r = pommel_dia/2);\n    \n    // Flatten bottom\n    translate([0, 0, -pommel_dia/2])\n    cube([pommel_dia, pommel_dia, pommel_dia/2], center = true);\n\n    // Tang hole\n    cylinder(h = pommel_dia, r = handle_dia/2 - 1, center = true);\n}\n\n// Assembly\nunion() {\n    // Blade\n    translate([0, 0, blade_thick/2 + guard_thick/2])\n    blade();\n\n    // Guard\n    guard();\n\n    // Handle\n    translate([0, 0, -(guard_thick/2 + handle_len/2)])\n    handle();\n\n    // Pommel\n    translate([0, 0, -(guard_thick/2 + handle_len + pommel_dia/2 - 2)])\n    pommel();\n}",
    "renders": true
  },
  {
    "household_item": "sorrowshade",
    "openscad_code": "// Sorrowshade (Balinese-style cremation tower)\n// Medium complexity realistic version\n\n// Overall scale\ntower_scale = 0.8;  // 80mm height\n\n// Base platform\nmodule base_platform() {\n    difference() {\n        // Main platform\n        cube([50, 50, 6], center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cube([42, 42, 8], center=true);\n    }\n}\n\n// Main tower body\nmodule tower_body() {\n    // Central tower structure\n    difference() {\n        // Outer shell\n        translate([0, 0, 20])\n            cube([20, 20, 40], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 19])\n            cube([16, 16, 42], center=true);\n    }\n    \n    // Decorative bands\n    for(h = [10, 20, 30]) {\n        translate([0, 0, h])\n            cube([22, 22, 2], center=true);\n    }\n}\n\n// Roof tiers\nmodule roof_tier(base_width, height, offset, taper) {\n    difference() {\n        // Main tier\n        translate([0, 0, offset + height/2])\n            cube([base_width, base_width, height], center=true);\n        \n        // Hollow\n        translate([0, 0, offset])\n            cube([base_width - 4, base_width - 4, height + 1], center=true);\n    }\n    \n    // Top ridge\n    translate([0, 0, offset + height])\n        cube([base_width - 2, 2, 2], center=true);\n}\n\n// Roof assembly\nmodule roof() {\n    // Three tiers getting smaller\n    roof_tier(28, 4, 40, 0.8);\n    roof_tier(22, 4, 44, 0.8);\n    roof_tier(16, 4, 48, 0.8);\n    \n    // Finial\n    translate([0, 0, 53])\n        cylinder(h=8, r1=4, r2=0, center=true);\n}\n\n// Decorative corner posts\nmodule corner_post(x, y) {\n    translate([x, y, 3])\n        cylinder(h=40, r=2, center=false);\n    \n    // Capitals\n    translate([x, y, 43])\n        sphere(r=3);\n}\n\n// Window details\nmodule window() {\n    // Window frame\n    difference() {\n        translate([0, -10.2, 20])\n            cube([8, 2, 6], center=true);\n        \n        // Window opening\n        translate([0, -11, 20])\n            cube([6, 2, 4], center=true);\n    }\n    \n    // Window bars\n    for(i = [-2, 0, 2]) {\n        translate([i, -10.5, 20])\n            cube([0.5, 1, 4], center=true);\n    }\n}\n\n// Main assembly\nmodule sorrowshade() {\n    scale(tower_scale) union() {\n        // Base\n        base_platform();\n        \n        // Corner posts\n        corner_post(20, 20);\n        corner_post(-20, 20);\n        corner_post(20, -20);\n        corner_post(-20, -20);\n        \n        // Tower body\n        tower_body();\n        \n        // Windows on all four sides\n        window();\n        rotate([0, 0, 90]) window();\n        rotate([0, 0, 180]) window();\n        rotate([0, 0, 270]) window();\n        \n        // Roof\n        roof();\n    }\n}\n\n// Render the sorrowshade\nsorrowshade();",
    "renders": true
  },
  {
    "household_item": "festerwraith",
    "openscad_code": "// Festerwraith - Realistic Style, Medium Complexity\n// Main body dimensions (in mm)\nbody_w = 45;\nbody_h = 55;\nbody_d = 30;\n\n// Head dimensions\nhead_r = 18;\nhead_h = 30;\n\n// Leg dimensions\nleg_w = 8;\nleg_h = 25;\nleg_d = 10;\n\n// Tentacle parameters\ntentacle_r = 3;\ntentacle_len = 20;\ntentacle_count = 6;\n\n// Eye parameters\neye_r = 4;\neye_socket_r = 6;\n\n// Mouth parameters\nmouth_w = 15;\nmouth_h = 8;\nmouth_d = 5;\n\n// Arm parameters\narm_r = 5;\narm_len = 30;\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\nmodule body() {\n    difference() {\n        // Main torso\n        cube([body_w, body_d, body_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_t])\n            cube([body_w-wall_t*2, body_d-wall_t, body_h-wall_t*2], center=true);\n        \n        // Neck cavity for head\n        translate([0, 0, body_h/2])\n            cylinder(h=wall_t*3, r1=head_r*0.8, r2=head_r*0.6, center=true);\n    }\n}\n\nmodule head() {\n    translate([0, 0, body_h/2 + head_h/2]) {\n        difference() {\n            // Main head sphere\n            sphere(r=head_r);\n            \n            // Hollow interior\n            sphere(r=head_r-wall_t);\n            \n            // Eye sockets\n            for(i = [-1, 1]) {\n                translate([i*head_r*0.4, -head_r*0.7, head_r*0.2])\n                    sphere(r=eye_socket_r);\n            }\n            \n            // Mouth opening\n            translate([0, -head_r*0.8, -head_r*0.3])\n                cube([mouth_w, mouth_d, mouth_h], center=true);\n        }\n        \n        // Eyes\n        color(\"red\") {\n            for(i = [-1, 1]) {\n                translate([i*head_r*0.4, -head_r*0.74, head_r*0.2])\n                    sphere(r=eye_r);\n            }\n        }\n        \n        // Mouth teeth\n        for(i = [-2:2]) {\n            translate([i*3, -head_r*0.8, -head_r*0.3])\n                cube([2, 1, mouth_h/2], center=true);\n        }\n    }\n}\n\nmodule leg(pos_x, pos_z) {\n    translate([pos_x, 0, -body_h/2 - leg_h/2]) {\n        difference() {\n            cube([leg_w, leg_d, leg_h], center=true);\n            translate([0, 0, wall_t])\n                cube([leg_w-wall_t*2, leg_d-wall_t, leg_h-wall_t*2], center=true);\n        }\n    }\n}\n\nmodule tentacle(start_angle) {\n    rotate([0, 0, start_angle]) {\n        translate([0, body_d/2 + tentacle_r, 0]) {\n            for(i = [0:tentacle_count-1]) {\n                rotate([0, 0, i*60])\n                    translate([tentacle_len*sin(i*30), tentacle_len*cos(i*30), 0])\n                        cylinder(h=tentacle_len*1.2, r=tentacle_r, center=true);\n            }\n        }\n    }\n}\n\nmodule arm(side) {\n    translate([side*body_w/2, 0, body_h/4]) {\n        rotate([0, 0, side*30]) {\n            difference() {\n                // Upper arm\n                cylinder(h=arm_len, r=arm_r, center=true);\n                \n                // Hollow interior\n                cylinder(h=arm_len-wall_t, r=arm_r-wall_t, center=true);\n                \n                // Hand\n                translate([0, arm_len/2 + 3, 0])\n                    sphere(r=arm_r*1.2);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    \n    // Legs\n    leg(body_w/4, 0);\n    leg(-body_w/4, 0);\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Tentacles\n    tentacle(0);\n    tentacle(180);\n}\n\n// Base platform for stability\ntranslate([0, 0, -body_h/2 - leg_h - 3])\n    cube([body_w*1.2, body_d*1.2, 6], center=true);",
    "renders": true
  },
  {
    "household_item": "morbidkin",
    "openscad_code": "// Morbidkin – realistic style, medium complexity\n// Overall height ≈ 70 mm, built to print without supports\n\n$fn = 32;\n\n// Main module\nmodule morbidkin() {\n    // Base cup\n    difference() {\n        cylinder(h = 32, d1 = 48, d2 = 42);  // tapered drinking vessel\n        translate([0,0,2]) cylinder(h = 35, d1 = 44, d2 = 38);  // hollow\n    }\n\n    // Rim lip for sipping\n    translate([0,0,32]) cylinder(h = 4, d = 50);\n\n    // Handle – ergonomic C-shape\n    translate([24,0,18]) rotate([0,-90,0]) handle();\n\n    // Skull on the front – realistic cranium + facial features\n    translate([0,-26,38]) skull();\n}\n\n// Handle module – no support needed\nmodule handle() {\n    difference() {\n        // Outer curved bar\n        rotate_extrude(angle = 180) translate([20,0,0]) circle(d = 8);\n        // Inner clearance\n        rotate_extrude(angle = 180) translate([20,0,0]) circle(d = 4);\n        // Flat bottom for printing\n        translate([-22,-30,0]) cube([44,30,8]);\n    }\n}\n\n// Skull module\nmodule skull() {\n    // Cranial sphere\n    sphere(d = 30);\n\n    // Eye sockets\n    for (x = [-7,7]) {\n        translate([x, -8, 2]) rotate([0, 20*sgn(x), 0])\n            scale([1,0.8,1]) sphere(d = 7);\n    }\n    difference() {\n        sphere(d = 30);\n        // Remove eye sockets\n        for (x = [-7,7]) {\n            translate([x, -8, 2]) rotate([0, 20*sgn(x), 0])\n                scale([1,0.8,1]) sphere(d = 7);\n        }\n    }\n\n    // Nasal cavity\n    translate([0, -11, -4]) rotate([90,0,0])\n        cylinder(h = 8, d1 = 9, d2 = 6);\n\n    // Teeth – simple block row\n    translate([0, -18, -12]) {\n        for (i = [-3:1:3]) {\n            translate([i*2.5,0,0]) cube([2,3,6]);\n        }\n    }\n\n    // Jaw outline\n    hull() {\n        translate([-10,-18,-12]) sphere(d = 2);\n        translate([10,-18,-12]) sphere(d = 2);\n        translate([0,-18,-18]) sphere(d = 2);\n    }\n}\n\nfunction sgn(x) = x < 0 ? -1 : 1;\n\n// Render the model\nmorbidkin();",
    "renders": true
  },
  {
    "household_item": "voidwretch",
    "openscad_code": "// Voidwretch - medium-complexity realistic style\n// Approx. 70 mm in length, designed for FDM printing\n\nmodule voidwretch() {\n    // Base hull\n    difference() {\n        union() {\n            // Main body shell\n            hull() {\n                sphere(d = 40, $fn = 48); // front dome\n                translate([0, 0, -15]) sphere(d = 30, $fn = 48); // rear taper\n            }\n\n            // Ventral ridge\n            translate([0, -20, -15]) rotate([0, 0, 0])\n                scale([1, 2.5, 1]) sphere(d = 15, $fn = 32);\n        }\n\n        // Hollow interior\n        translate([0, 0, -5]) sphere(d = 32, $fn = 48);\n    }\n\n    // Eye sockets\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n            translate([15, 0, 5])\n                rotate([0, 90, 0])\n                    cylinder(h = 12, d1 = 8, d2 = 6, $fn = 16);\n\n    // Mandibles\n    module mandible() {\n        difference() {\n            hull() {\n                translate([0, 0, 0]) sphere(d = 6, $fn = 16);\n                translate([8, 0, -12]) sphere(d = 4, $fn = 16);\n            }\n            translate([0, 0, -10]) cube([20, 20, 20], center = true);\n        }\n    }\n\n    for (ang = [-30, 30])\n        rotate([0, 0, ang])\n            translate([18, 0, -12])\n                mandible();\n\n    // Side fins\n    module fin() {\n        difference() {\n            scale([1, 0.3, 0.8])\n                rotate([0, 90, 0])\n                    cylinder(h = 25, d1 = 12, d2 = 5, $fn = 3);\n            translate([0, 0, -5]) cube([30, 15, 10], center = true);\n        }\n    }\n\n    for (ang = [135, 225])\n        rotate([0, 0, ang])\n            translate([0, 18, -5])\n                fin();\n\n    // Dorsal spines\n    for (i = [0: 3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([10, 0, 12 - i * 3])\n                cylinder(h = 8, d1 = 4, d2 = 2, $fn = 8);\n    }\n\n    // Tail\n    translate([0, 0, -25])\n        rotate([0, 180, 0])\n            cylinder(h = 20, d1 = 10, d2 = 4, $fn = 16);\n\n    // Leg nubs (printable stubs)\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([12, 0, -15])\n                cylinder(h = 5, d = 6, $fn = 16);\n}\n\nvoidwretch();",
    "renders": true
  },
  {
    "household_item": "skullshade",
    "openscad_code": "// Skullshade - Medium complexity realistic style\n// Desk lamp shade in the shape of a human skull\n\n$fn = 50;  // Smooth curves for realistic look\nwall_thickness = 2.5;\nbase_diameter = 60;\ntotal_height = 75;\n\n// Main skull shell\nmodule skull_shell() {\n    difference() {\n        // Main cranium\n        union() {\n            // Upper skull dome\n            translate([0, 0, 35])\n                scale([1, 1.2, 1.1])\n                sphere(r=25);\n            \n            // Jaw area\n            translate([0, 0, 10])\n                scale([0.8, 1, 0.8])\n                sphere(r=20);\n        }\n        \n        // Hollow out for light\n        translate([0, 0, 35])\n            scale([1, 1.2, 1.1])\n            sphere(r=22.5);\n        \n        translate([0, 0, 10])\n            scale([0.8, 1, 0.7])\n            sphere(r=17.5);\n    }\n}\n\n// Eye sockets\nmodule eye_sockets() {\n    for(x = [-12, 12]) {\n        translate([x, 5, 30])\n            rotate([0, 0, 0])\n            scale([1.2, 1, 1])\n            difference() {\n                sphere(r=8);\n                translate([0, 2, 0])\n                    sphere(r=7);\n            }\n    }\n}\n\n// Nasal cavity\nmodule nasal_cavity() {\n    translate([0, -18, 30])\n        rotate([15, 0, 0])\n        scale([1, 0.8, 1])\n        difference() {\n            cube([12, 15, 8], center=true);\n            translate([0, 0, 2])\n                scale([0.9, 0.9, 0.9])\n                cube([12, 15, 8], center=true);\n        }\n}\n\n// Teeth gaps\nmodule teeth_gaps() {\n    for(i = [-4:4]) {\n        translate([i*3, -30, 12])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=1.5, r2=0.5);\n    }\n}\n\n// Mounting base\nmodule mounting_base() {\n    difference() {\n        cylinder(h=10, r=base_diameter/2);\n        // Central hole for bulb socket\n        cylinder(h=12, r=12);\n    }\n}\n\n// Skull details\nmodule skull_details() {\n    // Temporal bone indentations\n    translate([25, 5, 25])\n        rotate([-30, 0, 0])\n        sphere(r=4);\n    translate([-25, 5, 25])\n        rotate([30, 0, 0])\n        sphere(r=4);\n    \n    // Forehead ridge\n    translate([0, 15, 45])\n        scale([1.5, 0.3, 0.5])\n        sphere(r=8);\n}\n\n// Assembly\nunion() {\n    // Mounting base\n    mounting_base();\n    \n    // Main skull\n    translate([0, 0, 10])\n        union() {\n            skull_shell();\n            eye_sockets();\n            nasal_cavity();\n            teeth_gaps();\n            skull_details();\n        };\n}",
    "renders": true
  },
  {
    "household_item": "deathmask",
    "openscad_code": "// Deathmask - Realistic Medium Complexity\n// 3D printable, approx 80mm height\n\n$fn = 36;  // Smooth curves for printing\n\nmodule face_base() {\n    // Main face oval\n    difference() {\n        scale([1, 0.9, 1.2])\n            sphere(d = 60);\n        // Hollow inside\n        scale([0.85, 0.75, 0.9])\n            sphere(d = 60);\n    }\n}\n\nmodule eye_socket(x, y, z) {\n    // Eye cavity with eyelids\n    translate([x, y, z]) {\n        difference() {\n            // Upper eyelid\n            translate([0, 2, 2])\n                rotate([0, 10, 0])\n                scale([1.2, 0.6, 0.3])\n                sphere(d = 10);\n            // Eye cavity\n            scale([1.1, 0.7, 0.8])\n                sphere(d = 10);\n            // Lower eyelid\n            translate([0, -3, -2])\n                rotate([0, -10, 0])\n                scale([1.2, 0.4, 0.3])\n                sphere(d = 10);\n        }\n    }\n}\n\nmodule nose() {\n    // Nose bridge and nostrils\n    translate([0, 5, -3]) {\n        // Bridge\n        rotate([90, 0, 0])\n            cylinder(h1 = 5, h2 = 2, r1 = 6, r2 = 4);\n        // Nostrils\n        for(x = [-3, 3]) {\n            translate([x, -2, -3])\n                rotate([90, 0, 0])\n                cylinder(h = 3, r = 2);\n        }\n    }\n}\n\nmodule mouth() {\n    // Closed lips with slight depression\n    translate([0, -15, -8]) {\n        difference() {\n            // Upper lip\n            translate([0, 0, 1])\n                scale([8, 2, 1])\n                sphere(d = 8);\n            // Mouth line\n            translate([0, -0.5, 0.5])\n                scale([6, 0.5, 0.5])\n                cube([12, 1, 1], center = true);\n            // Lower lip\n            translate([0, -1.5, 0])\n                scale([7, 1.5, 0.8])\n                sphere(d = 6);\n        }\n    }\n}\n\nmodule cheek_bones() {\n    // Subtle cheek definition\n    for(x = [-15, 15]) {\n        translate([x, 5, -5]) {\n            scale([1.2, 1, 0.6])\n                sphere(d = 8);\n        }\n    }\n}\n\nmodule brow_ridges() {\n    // Eyebrow areas\n    for(x = [-10, 10]) {\n        translate([x, 15, 2]) {\n            rotate([0, 10, 0])\n                scale([2, 0.8, 0.5])\n                sphere(d = 8);\n        }\n    }\n}\n\nmodule forehead_wrinkles() {\n    // Subtle forehead lines\n    for(y = [10, 15, 20]) {\n        translate([0, y, 5]) {\n            scale([0.5, 0.5, 0.2])\n                sphere(d = 25);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        face_base();\n        cheek_bones();\n        brow_ridges();\n        forehead_wrinkles();\n        nose();\n    }\n    \n    // Eye sockets\n    eye_socket(-10, 10, 0);\n    eye_socket(10, 10, 0);\n    \n    // Mouth cavity\n    mouth();\n    \n    // Drain hole for printing\n    translate([0, 0, -35])\n        cylinder(h = 5, r = 3);\n}\n\n// Base stand\ntranslate([0, 0, -40])\n    cylinder(h = 5, r = 30);",
    "renders": true
  },
  {
    "household_item": "banelich",
    "openscad_code": "// Banelich - Realistic Style, Medium Complexity\n// 3D printable, no supports needed\n\n$fn = 64;  // Smooth curves for printing\nmodule banelich() {\n    scale([0.8, 0.8, 0.8]) {\n        // Main skull\n        skull();\n        \n        // Horns\n        horns();\n        \n        // Jaw\n        jaw();\n        \n        // Neck vertebrae\n        neck();\n        \n        // Chest plate\n        chest();\n        \n        // Arms\n        arms();\n    }\n}\n\nmodule skull() {\n    // Main cranium\n    translate([0, 0, 30])\n    scale([1.2, 1, 1.1])\n    sphere(15);\n    \n    // Eye sockets\n    difference() {\n        translate([0, 0, 30])\n        scale([1.2, 1, 1.1])\n        sphere(15);\n        \n        // Left eye\n        translate([-8, -10, 35])\n        rotate([0, 30, 0])\n        cylinder(h=10, r1=6, r2=4);\n        \n        // Right eye  \n        translate([8, -10, 35])\n        rotate([0, -30, 0])\n        cylinder(h=10, r1=6, r2=4);\n    }\n    \n    // Nasal cavity\n    translate([0, -12, 28])\n    rotate([90, 0, 0])\n    cylinder(h=8, r1=4, r2=2);\n    \n    // Brow ridge\n    translate([0, -5, 42])\n    scale([25, 5, 3])\n    cube([1, 1, 1], center=true);\n}\n\nmodule horns() {\n    // Left horn\n    translate([-15, 0, 45])\n    rotate([0, -30, -20])\n    cylinder(h=20, r1=5, r2=2);\n    \n    // Right horn\n    translate([15, 0, 45])\n    rotate([0, -30, 20])\n    cylinder(h=20, r1=5, r2=2);\n    \n    // Horn tips\n    translate([-25, 5, 55])\n    rotate([0, -30, -20])\n    sphere(3);\n    \n    translate([25, 5, 55])\n    rotate([0, -30, 20])\n    sphere(3);\n}\n\nmodule jaw() {\n    translate([0, 5, 15])\n    rotate([20, 0, 0])\n    scale([0.8, 0.6, 0.4])\n    sphere(12);\n    \n    // Teeth\n    for(i = [-3:1:3]) {\n        translate([i*3, 12, 12])\n        rotate([30, 0, 0])\n        cylinder(h=8, r1=1.5, r2=0.5);\n    }\n}\n\nmodule neck() {\n    // Vertebrae segments\n    for(i = [0:1:4]) {\n        translate([0, 0, 10-i*3])\n        scale([0.8, 0.6, 0.5])\n        difference() {\n            cylinder(h=3, r=8-i);\n            translate([0, 0, -1])\n            cylinder(h=5, r=6-i);\n        }\n    }\n}\n\nmodule chest() {\n    // Ribcage base\n    translate([0, 0, -5])\n    scale([1.5, 1.2, 1])\n    sphere(10);\n    \n    // Ribs\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([0, -12, -5])\n        rotate([90, 0, 0])\n        cylinder(h=20, r1=2, r2=1);\n    }\n}\n\nmodule arms() {\n    // Left arm\n    translate([-15, -5, 0])\n    rotate([0, 0, -45])\n    cylinder(h=25, r1=3, r2=2);\n    \n    // Left hand\n    translate([-35, -8, -2])\n    sphere(4);\n    \n    // Right arm\n    translate([15, -5, 0])\n    rotate([0, 0, 45])\n    cylinder(h=25, r1=3, r2=2);\n    \n    // Right hand\n    translate([35, -8, -2])\n    sphere(4);\n}\n\n// Base for stability\ntranslate([0, 0, -15])\nscale([2, 2, 0.5])\ncylinder(h=5, r=10);\n\n// Generate the model\nbanelich();",
    "renders": true
  },
  {
    "household_item": "nightrot",
    "openscad_code": "// Nightrot (Nixie-style tube) in realistic style\n// Medium complexity, 3D printable\n\n$fn = 30;\n\n// Overall dimensions\ntube_d = 25;\ntube_h = 60;\nbase_d = 35;\nbase_h = 12;\npin_d = 1.5;\npin_h = 8;\n\nmodule pins(count=8) {\n    for(i=[0:count-1]) {\n        rotate([0,0,i*360/count])\n            translate([base_d/2 - 2, 0, -pin_h/2])\n                cylinder(d=pin_d, h=pin_h);\n    }\n}\n\nmodule base() {\n    difference() {\n        // Main base\n        cylinder(d=base_d, h=base_h);\n        \n        // Pin holes\n        pins();\n        \n        // Wire channel\n        translate([0,0,-0.1])\n            cylinder(d=base_d*.7, h=base_h+0.2);\n    }\n}\n\nmodule glass_envelope() {\n    difference() {\n        // Main glass tube\n        cylinder(d=tube_d, h=tube_h);\n        \n        // Hollow inside\n        translate([0,0,-0.1])\n            cylinder(d=tube_d-3, h=tube_h+0.2);\n        \n        // Top dome\n        translate([0,0,tube_h-1])\n            sphere(d=tube_d);\n    }\n}\n\nmodule digit_grid() {\n    // 7-segment style grid inside tube\n    segment_width = 1.2;\n    segment_height = 0.5;\n    segment_length = 12;\n    \n    // Horizontal segments\n    for(y=[-5, 0, 5]) {\n        translate([0, y, tube_h/2])\n            cube([segment_length, segment_height, segment_width], center=true);\n    }\n    \n    // Vertical segments\n    for(x=[-6, 0, 6]) {\n        if(x != 0) {\n            translate([x, 0, tube_h/2])\n                cube([segment_height, 10, segment_width], center=true);\n        }\n    }\n}\n\nmodule nightrot() {\n    // Base with pins\n    base();\n    \n    // Glass envelope\n    translate([0,0,base_h])\n        glass_envelope();\n    \n    // Internal digit grid\n    translate([0,0,base_h+2])\n        digit_grid();\n    \n    // Getter flash on top\n    translate([0,0,base_h+tube_h-1])\n        sphere(d=4);\n    \n    // Support wires inside\n    color(\"silver\")\n    translate([0,0,base_h+tube_h/2])\n        cylinder(d=0.5, h=tube_h/2);\n}\n\n// Generate the model\nnightrot();",
    "renders": true
  },
  {
    "household_item": "gravewight",
    "openscad_code": "// Gravewight - Undead guardian of ancient tombs\n// Medium complexity realistic style\n\n$fn = 50;  // Smooth curves for realistic look\n\n// Overall dimensions\ntotal_height = 75;\nbase_width = 30;\nchest_width = 25;\n\nmodule gravewight() {\n    // Burial shroud base\n    union() {\n        // Flowing shroud folds\n        translate([0, 0, 2]) {\n            for(i = [-15:5:15]) {\n                translate([i, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 15, r1 = 12 - abs(i)/2, r2 = 10 - abs(i)/2);\n                    }\n                }\n            }\n        }\n        \n        // Central body\n        translate([0, 0, 15]) {\n            // Pelvis area\n            cube([base_width, 12, 18], center = true);\n            \n            // Spine segments\n            for(h = [0:4:20]) {\n                translate([0, 0, 18 + h]) {\n                    scale([1 - h/40, 1 - h/40, 1]) {\n                        cube([chest_width - h/2, 10 - h/5, 4], center = true);\n                    }\n                }\n            }\n            \n            // Ribcage\n            translate([0, 0, 30]) {\n                for(angle = [0:45:315]) {\n                    rotate([0, 0, angle]) {\n                        translate([chest_width/2 - 2, 0, 0]) {\n                            rotate([0, 90, 0]) {\n                                cylinder(h = 8, r = 2);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Shoulders\n            translate([0, 0, 40]) {\n                cube([chest_width + 8, 15, 8], center = true);\n            }\n            \n            // Neck\n            translate([0, 0, 48]) {\n                cylinder(h = 8, r = 5);\n            }\n            \n            // Skull\n            translate([0, 0, 56]) {\n                sphere(d = 18);\n                \n                // Jaw\n                translate([0, 5, -8]) {\n                    scale([0.8, 0.6, 0.5]) {\n                        sphere(d = 16);\n                    }\n                }\n                \n                // Eye sockets\n                for(x = [-4, 4]) {\n                    translate([x, 3, 2]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h = 8, r = 2);\n                        }\n                    }\n                }\n                \n                // Nose cavity\n                translate([0, 4, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 3, r1 = 2.5, r2 = 1.5);\n                    }\n                }\n            }\n            \n            // Arms\n            for(side = [-1, 1]) {\n                // Upper arm\n                translate([side * (chest_width/2 + 3), 0, 42]) {\n                    rotate([0, -side * 15, 0]) {\n                        cylinder(h = 15, r = 3, center = true);\n                        \n                        // Lower arm\n                        translate([0, 0, -10]) {\n                            rotate([0, side * 30, 0]) {\n                                cylinder(h = 12, r = 2.5, center = true);\n                                \n                                // Hand\n                                translate([0, 0, -8]) {\n                                    sphere(d = 5);\n                                    \n                                    // Fingers\n                                    for(f = [-1, 0, 1]) {\n                                        translate([f * 1.5, 0, -3]) {\n                                            cylinder(h = 4, r = 0.8);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Legs (partially visible under shroud)\n            translate([0, 0, 10]) {\n                for(side = [-1, 1]) {\n                    translate([side * 8, 0, 0]) {\n                        cylinder(h = 20, r = 4);\n                    }\n                }\n            }\n        }\n        \n        // Tattered cloth edges\n        translate([0, 0, 10]) {\n            for(i = [0:30:359]) {\n                rotate([0, 0, i]) {\n                    translate([base_width/2 - 2, 0, 0]) {\n                        cube([4, 2, 4 + sin(i) * 2]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ngravewight();",
    "renders": true
  },
  {
    "household_item": "soulblight",
    "openscad_code": "// Soulblight - Realistic Style, Medium Complexity\n// Size: ~70mm height, 3D printable\n\n$fn = 64;\n\n// Overall dimensions\nbody_height = 60;\nbody_width = 35;\nbase_height = 10;\ntotal_height = body_height + base_height;\n\n// Base module\nmodule base() {\n    difference() {\n        cylinder(h = base_height, r1 = 25, r2 = 20);\n        // Drainage holes\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([15, 0, -1])\n                    cylinder(h = base_height + 2, r = 2);\n        }\n    }\n}\n\n// Main body with organic curves\nmodule body() {\n    hull() {\n        // Main torso\n        translate([0, 0, base_height + body_height/2])\n            scale([1, 0.8, 1.2])\n                sphere(r = body_width/2);\n        \n        // Upper bulge\n        translate([0, 0, base_height + body_height * 0.8])\n            scale([0.7, 0.7, 0.9])\n                sphere(r = body_width/2.5);\n        \n        // Lower bulge\n        translate([0, 0, base_height + body_height * 0.3])\n            scale([0.9, 0.9, 0.8])\n                sphere(r = body_width/2.2);\n    }\n}\n\n// Tendrils/veins wrapping around\nmodule tendrils() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([body_width/2 - 5, 0, base_height + body_height/2])\n                rotate([90, 0, 0])\n                    for (j = [0:3]) {\n                        translate([0, 0, j * 8])\n                            rotate([j * 10, 0, 0])\n                                scale([0.8 - j * 0.1, 0.8 - j * 0.1, 1])\n                                    cylinder(h = 10, r1 = 3, r2 = 1.5);\n                    }\n    }\n}\n\n// Eye sockets\nmodule eyes() {\n    for (i = [-1, 1]) {\n        translate([i * 8, 0, base_height + body_height * 0.85])\n            rotate([0, 20 * i, 0])\n                difference() {\n                    // Eye ridge\n                    sphere(r = 6);\n                    // Socket\n                    translate([0, 0, 3])\n                        sphere(r = 4);\n                }\n    }\n}\n\n// Mouth cavity\nmodule mouth() {\n    translate([0, -body_width/2 + 5, base_height + body_height * 0.7])\n        rotate([0, 20, 0])\n            difference() {\n                sphere(r = 8);\n                // Teeth marks\n                for (i = [0:4]) {\n                    rotate([0, 0, i * 30 - 60])\n                        translate([0, 6, 0])\n                            cube([2, 8, 4], center = true);\n                }\n            }\n}\n\n// Surface texture\nmodule texture() {\n    for (z = [base_height:2:total_height]) {\n        for (a = [0:30:359]) {\n            rotate([0, 0, a])\n                translate([body_width/2 * (0.8 + sin(z*5)*0.1), 0, z])\n                    sphere(r = 0.5 + sin(a*3)*0.3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    \n    body();\n    \n    tendrils();\n    \n    eyes();\n    \n    mouth();\n    \n    texture();\n}",
    "renders": true
  },
  {
    "household_item": "cinderghoul",
    "openscad_code": "$fn = 32;\n\n// Overall scale factor\nscale_factor = 0.5;\n\n// Module for the cinderghoul\nmodule cinderghoul() {\n    // Main body - torso\n    color(\"darkslategray\")\n    translate([0, 0, 10])\n    scale([1.2, 0.8, 1.5])\n    sphere(r = 15);\n\n    // Head - cracked skull-like shape\n    color(\"dimgray\")\n    translate([0, 0, 35])\n    difference() {\n        sphere(r = 10);\n        // Eye sockets\n        translate([4, 6, 2])\n        sphere(r = 3);\n        translate([-4, 6, 2])\n        sphere(r = 3);\n        // Cracks\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n            translate([5 + i * 0.3, 0, 5])\n            cube([2, 0.5, 8], center = true);\n        }\n    }\n\n    // Horns\n    module horn(pos, rot) {\n        color(\"black\")\n        translate(pos)\n        rotate(rot)\n        cylinder(h = 15, r1 = 2, r2 = 0.5, center = false);\n    }\n    \n    horn([7, 5, 35], [0, 30, 20]);\n    horn([-7, 5, 35], [0, -30, -20]);\n\n    // Arms\n    module arm(side) {\n        color(\"darkslategray\")\n        translate([side * 15, 0, 25])\n        rotate([0, 0, side * -20])\n        scale([1, 0.8, 3])\n        sphere(r = 6);\n        \n        // Forearm\n        translate([side * 20, 0, 15])\n        rotate([0, 0, side * -45])\n        scale([0.8, 0.6, 2.5])\n        sphere(r = 5);\n        \n        // Hand\n        translate([side * 25, 0, 8])\n        scale([0.6, 0.4, 0.8])\n        sphere(r = 4);\n    }\n    \n    arm(1);\n    arm(-1);\n\n    // Legs\n    module leg(side) {\n        color(\"darkslategray\")\n        translate([side * 8, 0, 0])\n        rotate([0, 0, side * 10])\n        scale([0.8, 0.8, 2])\n        sphere(r = 8);\n        \n        // Lower leg\n        translate([side * 10, 0, -15])\n        scale([0.7, 0.7, 2])\n        sphere(r = 7);\n        \n        // Foot\n        translate([side * 12, 0, -25])\n        scale([1.2, 0.8, 0.5])\n        sphere(r = 6);\n    }\n    \n    leg(1);\n    leg(-1);\n\n    // Spikes on back\n    for(i = [0:5]) {\n        color(\"black\")\n        rotate([0, 0, i * 60])\n        translate([0, 12, 15 + i * 2])\n        cylinder(h = 8, r1 = 1.5, r2 = 0.5);\n    }\n\n    // Embers inside cracks\n    for(i = [0:20]) {\n        color(\"orangered\")\n        rotate([0, 0, i * 18])\n        translate([sin(i * 18) * 12, cos(i * 18) * 12, 10 + (i % 3) * 5])\n        sphere(r = 1);\n    }\n}\n\n// Create the cinderghoul at proper scale\nscale(scale_factor)\ncinderghoul();",
    "renders": true
  },
  {
    "household_item": "bloodphantom",
    "openscad_code": "// Bloodphantom - realistic style, medium complexity\n// 3D printable model for microfluidic testing or medical training\n\n// Overall dimensions\nphantom_length = 80;\nphantom_width = 45;\nphantom_height = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body shape - elliptical cross-section with rounded ends\nmodule main_body() {\n    difference() {\n        // Outer shell - elliptical cylinder with rounded ends\n        hull() {\n            translate([0, 0, phantom_height/2])\n                scale([phantom_length/2, phantom_width/2, phantom_height/2])\n                    sphere(d=1);\n            translate([0, 0, -phantom_height/2])\n                scale([phantom_length/2, phantom_width/2, phantom_height/2])\n                    sphere(d=1);\n        }\n        \n        // Hollow interior\n        hull() {\n            translate([0, 0, phantom_height/2])\n                scale([(phantom_length/2)-wall_thickness, \n                       (phantom_width/2)-wall_thickness, \n                       (phantom_height/2)-wall_thickness])\n                    sphere(d=1);\n            translate([0, 0, -phantom_height/2])\n                scale([(phantom_length/2)-wall_thickness, \n                       (phantom_width/2)-wall_thickness, \n                       (phantom_height/2)-wall_thickness])\n                    sphere(d=1);\n        }\n    }\n}\n\n// Arterial inlet tube\nmodule arterial_inlet() {\n    tube_radius = 4;\n    tube_length = 15;\n    \n    difference() {\n        // Outer tube\n        translate([-phantom_length/2 - tube_length, 0, phantom_height/4])\n            rotate([0, 90, 0])\n                cylinder(h=tube_length, r=tube_radius, $fn=20);\n                \n        // Inner hole\n        translate([-phantom_length/2 - tube_length, 0, phantom_height/4])\n            rotate([0, 90, 0])\n                cylinder(h=tube_length+1, r=tube_radius-wall_thickness, $fn=20);\n    }\n}\n\n// Venous outlet tube\nmodule venous_outlet() {\n    tube_radius = 5;\n    tube_length = 15;\n    \n    difference() {\n        // Outer tube\n        translate([phantom_length/2 + tube_length, 0, -phantom_height/4])\n            rotate([0, 90, 0])\n                cylinder(h=tube_length, r=tube_radius, $fn=20);\n                \n        // Inner hole\n        translate([phantom_length/2 + tube_length, 0, -phantom_height/4])\n            rotate([0, 90, 0])\n                cylinder(h=tube_length+1, r=tube_radius-wall_thickness, $fn=20);\n    }\n}\n\n// Internal flow channels\nmodule flow_channels() {\n    channel_radius = 3;\n    channel_spacing = 8;\n    \n    // Generate parallel channels\n    for(y = [-phantom_width/2 + 10 : channel_spacing : phantom_width/2 - 10]) {\n        hull() {\n            translate([-phantom_length/2 + 10, y, 0])\n                sphere(r=channel_radius, $fn=12);\n            translate([phantom_length/2 - 10, y, 0])\n                sphere(r=channel_radius, $fn=12);\n        }\n    }\n}\n\n// Mounting holes for fixtures\nmodule mounting_holes() {\n    hole_radius = 2.5;\n    \n    // Four corner holes\n    for(x = [-phantom_length/2 + 10, phantom_length/2 - 10]) {\n        for(y = [-phantom_width/2 + 8, phantom_width/2 - 8]) {\n            translate([x, y, 0])\n                cylinder(h=phantom_height, r=hole_radius, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main phantom body\n    main_body();\n    \n    // Inlet/outlet tubes\n    arterial_inlet();\n    venous_outlet();\n    \n    // Internal channels (cut from body)\n    difference() {\n        children();\n        flow_channels();\n    }\n    \n    // Mounting holes\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "darkrevenant",
    "openscad_code": "// Dark Revenant - Realistic Style, Medium Complexity\n// 3D printable model approximately 70mm tall\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main module\nmodule dark_revenant() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Hood and cape\n            hood_and_cape();\n            \n            // Skull head\n            translate([0, 0, 45]) skull();\n            \n            // Torso armor\n            translate([0, 0, 25]) torso();\n            \n            // Arms\n            translate([-15, 0, 35]) left_arm();\n            translate([15, 0, 35]) mirror([1,0,0]) left_arm();\n            \n            // Legs\n            translate([-6, 0, 10]) leg();\n            translate([6, 0, 10]) mirror([1,0,0]) leg();\n        }\n    }\n}\n\n// Hood and flowing cape\nmodule hood_and_cape() {\n    // Main hood\n    difference() {\n        union() {\n            // Hood dome\n            translate([0, 0, 50]) \n                scale([18, 20, 22]) sphere(1);\n            \n            // Cape back\n            translate([0, -12, 30])\n                scale([25, 5, 35]) cube(1);\n                \n            // Cape sides\n            translate([-18, -8, 30])\n                rotate([0, 0, -20])\n                scale([5, 8, 35]) cube(1);\n            translate([18, -8, 30])\n                rotate([0, 0, 20])\n                scale([5, 8, 35]) cube(1);\n        }\n        \n        // Hollow out hood\n        translate([0, 0, 50])\n            scale([16, 18, 20]) sphere(1);\n    }\n}\n\n// Skull head\nmodule skull() {\n    difference() {\n        // Main skull shape\n        union() {\n            // Cranial dome\n            sphere(12);\n            \n            // Jaw\n            translate([0, -8, -10])\n                scale([7, 8, 10]) cube(1);\n        }\n        \n        // Eye sockets\n        translate([-5, 5, 3])\n            scale([4, 4, 4]) sphere(1);\n        translate([5, 5, 3])\n            scale([4, 4, 4]) sphere(1);\n        \n        // Nasal cavity\n        translate([0, 8, 0])\n            scale([3, 2, 6]) cube(1);\n        \n        // Jaw separation\n        translate([0, -8, -5])\n            scale([12, 8, 2]) cube(1);\n    }\n}\n\n// Torso armor\nmodule torso() {\n    difference() {\n        // Chest plate\n        translate([0, 0, 0])\n            scale([20, 12, 25]) cube(1);\n        \n        // Waist taper\n        translate([0, 0, -5])\n            scale([18, 10, 15]) cube(1);\n        \n        // Armor segments\n        for(i = [0:2]) {\n            translate([0, 0, 5 + i*8])\n                scale([19, 11, 2]) cube(1);\n        }\n        \n        // Hollow center\n        translate([0, 0, 0])\n            scale([18 - wall, 10 - wall, 24]) cube(1);\n    }\n}\n\n// Left arm (mirrored for right)\nmodule left_arm() {\n    // Shoulder\n    translate([0, 0, 0])\n        sphere(6);\n    \n    // Upper arm\n    translate([-5, 0, -10])\n        rotate([0, 20, 0])\n        scale([5, 5, 20]) cylinder(h=1, r=1);\n    \n    // Forearm\n    translate([-12, 2, -25])\n        rotate([0, 30, 0])\n        scale([4, 4, 18]) cylinder(h=1, r=1);\n    \n    // Hand\n    translate([-18, 4, -35])\n        scale([5, 5, 8]) sphere(1);\n}\n\n// Leg\nmodule leg() {\n    // Hip joint\n    translate([0, 0, 0])\n        sphere(5);\n    \n    // Thigh\n    translate([0, 0, -15])\n        scale([6, 6, 20]) cylinder(h=1, r=1);\n    \n    // Knee\n    translate([0, 0, -30])\n        sphere(4);\n    \n    // Shin\n    translate([0, 0, -45])\n        scale([5, 5, 18]) cylinder(h=1, r=1);\n    \n    // Foot\n    translate([0, 4, -58])\n        scale([7, 12, 3]) cube(1);\n}\n\n// Render the model\ndark_revenant();",
    "renders": true
  },
  {
    "household_item": "rotshade",
    "openscad_code": "// Realistic Rotating Window Shade (Rotshade) - Medium Complexity\n// Overall dimensions: ~80mm wide, ~60mm tall, ~45mm deep\n\n$fn = 32;  // Smooth curves\n\n// Main module for the rotshade assembly\nmodule rotshade() {\n    shade_body();\n    mount_brackets();\n    twist_rod();\n    control_chain();\n}\n\n// Main cylindrical shade body\nmodule shade_body() {\n    // Outer fabric tube\n    difference() {\n        cylinder(h=55, r1=22, r2=22, center=true);\n        cylinder(h=57, r1=20, r2=20, center=true);  // Hollow interior\n    }\n    \n    // Top cap\n    translate([0,0,28]) \n        cylinder(h=4, r1=23, r2=23);\n    \n    // Bottom cap  \n    translate([0,0,-28])\n        cylinder(h=4, r1=23, r2=23);\n    \n    // Fabric texture rings\n    for(i=[-25:5:25]) {\n        translate([0,0,i]) \n            rotate([90,0,0]) \n                cylinder(h=0.5, r1=22.5, r2=22.5);\n    }\n}\n\n// Mounting brackets\nmodule mount_brackets() {\n    // Left bracket\n    translate([-28,0,30]) {\n        difference() {\n            cube([15,10,8], center=true);\n            translate([5,0,0]) \n                cylinder(h=12, r1=2.5, r2=2.5, center=true);\n        }\n    }\n    \n    // Right bracket\n    translate([28,0,30]) {\n        difference() {\n            mirror([1,0,0]) \n                cube([15,10,8], center=true);\n            translate([-5,0,0]) \n                cylinder(h=12, r1=2.5, r2=2.5, center=true);\n        }\n    }\n}\n\n// Twist rod mechanism\nmodule twist_rod() {\n    // Main rod\n    rotate([90,0,0]) \n        cylinder(h=60, r1=1.5, r2=1.5);\n    \n    // Control gear\n    translate([0,30,0]) \n        rotate([90,0,0]) {\n            cylinder(h=5, r1=4, r2=4);\n            // Teeth on gear\n            for(i=[0:30:330]) {\n                rotate([0,0,i]) \n                    translate([4,0,2.5]) \n                        cube([2,1,5], center=true);\n            }\n        }\n}\n\n// Pull chain with balls\nmodule control_chain() {\n    // Chain segments\n    for(i=[0:5:40]) {\n        translate([6,30-i,0]) {\n            sphere(r=1.8);\n            translate([0,-2.5,0]) \n                cylinder(h=2.5, r1=0.8, r2=0.8);\n        }\n    }\n    \n    // End pull\n    translate([6,-12,0]) \n        sphere(r=2.5);\n}\n\n// Generate the complete model\nrotshade();",
    "renders": true
  },
  {
    "household_item": "bonedancer",
    "openscad_code": "// Bonedancer 3D Printable Figure\n// Medium complexity, realistic style\n\n$fn = 32;\n\n// Overall dimensions\nfigure_height = 75;\nbody_width = 18;\nbody_depth = 12;\n\n// Head dimensions\nhead_radius = 6;\n\n// Torso dimensions\ntorso_height = 25;\ntorso_width = 12;\ntorso_depth = 8;\n\n// Arm dimensions\narm_length = 20;\narm_radius = 2.5;\nhand_radius = 3;\n\n// Leg dimensions\nleg_length = 30;\nleg_radius = 3;\nfoot_length = 8;\nfoot_width = 4;\nfoot_height = 2;\n\n// Bone staff dimensions\nstaff_length = 65;\nstaff_radius = 1.5;\nskull_radius = 4;\n\n// Ribcage bone dimensions\nrib_length = 6;\nrib_radius = 0.8;\n\nmodule head() {\n    // Main skull\n    translate([0, 0, figure_height - head_radius]) {\n        sphere(r = head_radius);\n        \n        // Eye sockets\n        difference() {\n            sphere(r = head_radius);\n            translate([head_radius/2, head_radius/2, 0]) rotate([0, 90, 0]) cylinder(h = head_radius, r = 1.5);\n            translate([-head_radius/2, head_radius/2, 0]) rotate([0, 90, 0]) cylinder(h = head_radius, r = 1.5);\n        }\n        \n        // Jaw\n        translate([0, head_radius - 1, -head_radius/2]) cube([head_radius*1.5, head_radius/2, head_radius], center = true);\n    }\n}\n\nmodule torso() {\n    // Spine\n    translate([0, 0, figure_height - head_radius*2 - torso_height/2]) {\n        cylinder(h = torso_height + 5, r = torso_width/3);\n    }\n    \n    // Ribcage\n    for(i = [0:3]) {\n        translate([0, 0, figure_height - head_radius*2 - 5 - i*6]) {\n            // Left ribs\n            translate([-torso_width/2 - rib_length/2, 0, 0]) cube([rib_length, torso_depth/2, rib_radius*2], center = true);\n            // Right ribs\n            translate([torso_width/2 + rib_length/2, 0, 0]) cube([rib_length, torso_depth/2, rib_radius*2], center = true);\n            // Front/back ribs\n            translate([0, -torso_depth/2 - rib_length/2, 0]) cube([torso_width*0.8, rib_length, rib_radius*2], center = true);\n            translate([0, torso_depth/2 + rib_length/2, 0]) cube([torso_width*0.8, rib_length, rib_radius*2], center = true);\n        }\n    }\n    \n    // Pelvis\n    translate([0, 0, figure_height - head_radius*2 - torso_height - 5]) {\n        scale([1.5, 1, 0.8]) sphere(r = torso_width/2);\n    }\n}\n\nmodule arm(side) {\n    // Arm\n    translate([0, side * (body_width/2 + arm_radius), figure_height - head_radius*2 - torso_height/2 + 5]) {\n        rotate([0, 0, side * 30]) {\n            cylinder(h = arm_length, r = arm_radius);\n            \n            // Hand\n            translate([0, 0, arm_length]) {\n                sphere(r = hand_radius);\n                \n                // Fingers\n                for(i = [-1:0.5:1]) {\n                    translate([i*hand_radius/2, 0, hand_radius]) {\n                        rotate([90, 0, 0]) cylinder(h = 3, r = 0.8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule leg(side) {\n    // Leg\n    translate([side * body_width/4, 0, figure_height - head_radius*2 - torso_height - leg_length/2 - 10]) {\n        cylinder(h = leg_length, r = leg_radius);\n        \n        // Foot\n        translate([0, foot_length/2, -leg_length/2 - foot_height/2]) {\n            cube([foot_width, foot_length, foot_height], center = true);\n        }\n    }\n}\n\nmodule bone_staff() {\n    // Staff\n    translate([15, 20, figure_height/2]) {\n        rotate([0, 15, 45]) {\n            cylinder(h = staff_length, r = staff_radius);\n            \n            // Skull on top\n            translate([0, 0, staff_length/2 + skull_radius]) {\n                sphere(r = skull_radius);\n                \n                // Eye sockets in skull\n                translate([skull_radius/2, skull_radius/2, 0]) sphere(r = 1);\n                translate([-skull_radius/2, skull_radius/2, 0]) sphere(r = 1);\n            }\n            \n            // Rib decorations\n            for(i = [0:2]) {\n                translate([0, 0, staff_length/2 - 10 - i*15]) {\n                    rotate([90, 0, 0]) {\n                        // Crossed bones\n                        cube([rib_length*2, rib_radius, rib_radius], center = true);\n                        rotate([0, 0, 90]) cube([rib_length*2, rib_radius, rib_radius], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    head();\n    torso();\n    \n    // Arms\n    arm(1);  // Right arm\n    arm(-1); // Left arm\n    \n    // Legs\n    leg(1);  // Right leg\n    leg(-1); // Left leg\n    \n    // Bone staff\n    bone_staff();\n    \n    // Belt with bones\n    translate([0, 0, figure_height - head_radius*2 - torso_height - 2]) {\n        difference() {\n            cylinder(h = 3, r = torso_width/2 + 2);\n            cylinder(h = 4, r = torso_width/2);\n        }\n        \n        // Hanging bones\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([torso_width/2 + 3, 0, -1]) {\n                    rotate([0, 90, 0]) cylinder(h = 4, r = 0.5);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "soulflayer",
    "openscad_code": "// Soulflayer - realistic medium-complexity version\n// Approx. 70mm tall, 3D-printable with no steep overhangs\n\n$fn = 48;\n\n// Overall scale factor (1 = 70 mm, adjust to fit 50-100 mm range)\nscaleFactor = 1;\n\n// Configuration\ntentacleCount = 4;\ntentacleLength = 20;\ntentacleRadius = 3;\nbodyHeight = 35;\nbodyRadius = 15;\nheadHeight = 20;\nheadRadius = 13;\neyeRadius = 4;\neyeOffset = 8;\nmouthRadius = 5;\nmouthDepth = 3;\n\nmodule soulflayer() {\n    scale([scaleFactor, scaleFactor, scaleFactor]) {\n        union() {\n            // Central body\n            color(\"slateblue\")\n            translate([0, 0, tentacleLength])\n            cylinder(h = bodyHeight, r1 = bodyRadius, r2 = bodyRadius * 0.8, center = false);\n\n            // Head section\n            color(\"mediumpurple\")\n            translate([0, 0, tentacleLength + bodyHeight])\n            cylinder(h = headHeight, r1 = headRadius, r2 = headRadius * 0.9, center = false);\n\n            // Tentacles\n            for (i = [0 : tentacleCount - 1]) {\n                rotate([0, 0, i * 360 / tentacleCount])\n                translate([bodyRadius * 0.7, 0, 0])\n                tentacle(tentacleLength, tentacleRadius);\n            }\n\n            // Eyes\n            color(\"crimson\")\n            for (j = [0 : 1]) {\n                mirror([j * 2 - 1, 0, 0])\n                translate([eyeOffset, 0, tentacleLength + bodyHeight + headHeight * 0.7])\n                sphere(r = eyeRadius);\n            }\n\n            // Mouth\n            color(\"black\")\n            translate([0, 0, tentacleLength + bodyHeight + headHeight * 0.2])\n            rotate_extrude(angle = 360, $fn = 32)\n            translate([mouthRadius, 0, 0])\n            circle(r = mouthRadius * 0.5, $fn = 32);\n            \n            // Back ridges\n            for (k = [0 : 3]) {\n                color(\"indigo\")\n                translate([0, 0, tentacleLength + bodyHeight - k * 5])\n                scale([1.2, 0.3, 1])\n                sphere(r = bodyRadius * 0.6);\n            }\n            \n            // Bottom plate for print stability\n            color(\"darkviolet\")\n            translate([0, 0, 0])\n            cylinder(h = 2, r = bodyRadius * 1.1, center = false);\n        }\n    }\n}\n\nmodule tentacle(len, rad) {\n    // Slight curve upward to reduce overhang\n    hull() {\n        translate([0, 0, 0])\n        sphere(r = rad);\n\n        translate([0, 0, len * 0.3])\n        sphere(r = rad * 0.9);\n\n        translate([0, 0, len * 0.7])\n        sphere(r = rad * 0.8);\n\n        translate([0, len * 0.4, len])\n        sphere(r = rad * 0.7);\n    }\n}\n\n// Render the model\nsoulflayer();",
    "renders": true
  },
  {
    "household_item": "gloomwraith",
    "openscad_code": "// Gloomwraith – medium-complexity realistic style\n// Height ≈ 70 mm, built for FDM printing (no severe overhangs, 1 mm walls)\n\n$fn = 24;               // global smoothness\n\nmodule main() {\n    union() {\n        torso();        // core mass\n        head();         // hooded skull\n        arms();         // two long arms\n        cloak();        // flowing cloak pieces\n        base();         // simple stand for stability\n    }\n}\n\nmodule torso() {\n    // main body: slight taper toward waist\n    translate([0, 0, 20]) scale([1, 0.7, 1.3])\n        cylinder(h = 30, d1 = 22, d2 = 18);\n}\n\nmodule head() {\n    translate([0, 0, 55]) rotate([0, 15, 0]) {\n        // hood shell\n        difference() {\n            scale([1, 1.2, 1]) sphere(d = 25);\n            translate([0, 0, -15]) cube([50, 50, 30], center = true);\n        }\n        // skull face\n        translate([0, 7, -3]) {\n            difference() {\n                sphere(d = 18);\n                // eye sockets\n                for (dx = [-4, 4])\n                    translate([dx, 2, 0]) sphere(d = 6);\n                // nasal cavity\n                translate([0, -3, -2]) cube([4, 5, 6], center = true);\n            }\n        }\n    }\n}\n\nmodule arms() {\n    // left arm\n    arm(-1);\n    // right arm\n    arm(1);\n}\n\nmodule arm(side) {\n    translate([side * 14, 0, 40]) rotate([0, 0, side * -20]) {\n        union() {\n            // upper arm\n            rotate([90, 0, 0]) cylinder(h = 20, d = 6);\n            translate([0, 0, 20]) rotate([90, 0, 0]) cylinder(h = 22, d = 5);\n            // claw hand\n            translate([0, 0, 42]) rotate([0, 0, side * 30])\n                for (i = [0:2])\n                    rotate([0, 0, i * 45 - 45])\n                        translate([0, 4, 0]) scale([0.6, 1, 0.6])\n                            cylinder(h = 10, d = 3, $fn = 8);\n        }\n    }\n}\n\nmodule cloak() {\n    // front left panel\n    panel(-45);\n    // front right panel\n    panel(45);\n    // rear draping\n    panel(180);\n}\n\nmodule panel(angle) {\n    rotate([0, 0, angle]) translate([0, 14, 20]) {\n        difference() {\n            scale([1, 0.2, 2.3]) sphere(d = 30);\n            translate([0, -5, -20]) cube([40, 10, 40], center = true);\n        }\n    }\n}\n\nmodule base() {\n    // thin disc for print stability\n    cylinder(h = 3, d = 40);\n}\n\nmain();",
    "renders": true
  },
  {
    "household_item": "fleshbane",
    "openscad_code": "// Fleshbane - Medium Complexity Realistic Style\n// A bone-like weapon with organic curves and blade details\n\n// Overall dimensions\nlength = 85;\nhandle_len = 30;\nblade_len = 55;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main handle module\nmodule handle() {\n    // Central core\n    cylinder(h=handle_len, d=12, $fn=32);\n    \n    // Grip rings\n    for(i = [0:3]) {\n        translate([0, 0, i*7])\n            difference() {\n                cylinder(h=3, d=14, $fn=32);\n                cylinder(h=3.5, d=11, $fn=32);\n            }\n    }\n    \n    // Pommel base\n    translate([0, 0, -2])\n        cylinder(h=5, d=16, $fn=32);\n}\n\n// Organic bone texture module\nmodule bone_texture() {\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, 0])\n                scale([1, 0.8, 1])\n                    sphere(d=2, $fn=16);\n    }\n}\n\n// Main blade module\nmodule blade() {\n    // Core blade shaft\n    translate([0, 0, handle_len])\n        cylinder(h=blade_len, d1=12, d2=6, $fn=32);\n    \n    // Primary cutting edge - leaf shape\n    translate([0, 0, handle_len+25])\n        rotate([90, 0, 0])\n            scale([1, 0.3, 1])\n                cylinder(h=30, d1=25, d2=18, $fn=3);\n    \n    // Secondary back edge\n    translate([0, 0, handle_len+35])\n        rotate([-90, 0, 0])\n            scale([0.8, 0.25, 0.8])\n                cylinder(h=20, d1=15, d2=10, $fn=3);\n    \n    // Rib details along blade\n    for(i = [0:5]) {\n        translate([0, 0, handle_len + 5 + i*8])\n            rotate([90, 0, 0])\n                scale([1, 0.1, 0.3])\n                    cylinder(h=20 - i*2, d=16 - i*1.5, $fn=3);\n    }\n}\n\n// Spine detail module\nmodule spine() {\n    // Central ridge\n    translate([0, 0, handle_len])\n        cylinder(h=blade_len, d1=3, d2=1.5, $fn=16);\n    \n    // Spine nodes\n    for(i = [0:7]) {\n        translate([0, 0, handle_len + 3 + i*6])\n            sphere(d=4, $fn=16);\n    }\n}\n\n// Guard module\nmodule guard() {\n    // Main guard disk\n    translate([0, 0, handle_len-1])\n        cylinder(h=3, d=18, $fn=32);\n    \n    // Guard spikes\n    for(i = [0:3]) {\n        rotate([0, 0, i*90+45])\n            translate([8, 0, handle_len+0.5])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=3, $fn=12);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    handle();\n    blade();\n    spine();\n    guard();\n    \n    // Organic details on handle\n    for(i = [0:4]) {\n        translate([6*cos(i*72), 6*sin(i*72), 10])\n            bone_texture();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "cryptshade",
    "openscad_code": "// Cryptshade - Medium Complexity Realistic Style\n// 3D printable light-shade with cryptic layered panels\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\nshade_d = 80;      // Shade diameter\nshade_h = 60;      // Shade height\nwall_t = 2;        // Wall thickness for printing\nbase_t = 3;        // Base thickness\n\n// Create the main cryptshade assembly\nmodule cryptshade() {\n    // Central hollow cylinder body\n    difference() {\n        cylinder(h = shade_h, d = shade_d);\n        cylinder(h = shade_h + 2, d = shade_d - 2*wall_t);\n    }\n    \n    // Add base plate with mounting hole\n    translate([0, 0, -base_t/2])\n    difference() {\n        cylinder(h = base_t, d = shade_d);\n        cylinder(h = base_t + 1, d = 15);  // Standard bulb socket clearance\n    }\n    \n    // Generate cryptic panels around the shade\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([shade_d/2 - wall_t, 0, shade_h/2])\n        crypt_panel();\n    }\n    \n    // Internal light diffusing ribs\n    for (j = [1:3]) {\n        translate([0, 0, j * shade_h/4])\n        difference() {\n            cylinder(h = 1, d = shade_d - 4);\n            cylinder(h = 2, d = shade_d - 4 - 2*wall_t);\n        }\n    }\n}\n\n// Individual cryptic panel module\nmodule crypt_panel() {\n    // Panel base structure\n    translate([-shade_d/4, -8, -shade_h/2])\n    cube([shade_d/2, 16, shade_h]);\n    \n    // Cut cryptic symbols into each panel\n    for (k = [0:2]) {\n        translate([shade_d/6, -6 + k*4, 5 + k*15])\n        rotate([90, 0, 45])\n        linear_extrude(height = wall_t + 1)\n        crypt_symbol();\n    }\n}\n\n// Cryptic symbol pattern (hexagon with inner shapes)\nmodule crypt_symbol() {\n    difference() {\n        // Outer hexagon\n        circle(d = 8);\n        \n        // Inner triangle\n        translate([0, 0, -1])\n        scale([0.6, 0.6, 1])\n        circle(d = 6, $fn = 3);\n        \n        // Central dot\n        translate([0, 0, -2])\n        circle(d = 2);\n    }\n}\n\n// Ventilation slots at top for heat dissipation\nmodule vents() {\n    for (a = [0:5]) {\n        rotate([0, 0, a * 60])\n        translate([0, shade_d/2 - wall_t - 2, shade_h - 5])\n        cube([8, 4, 5]);\n    }\n}\n\n// Assembly\nunion() {\n    cryptshade();\n    vents();\n}\n\n// Add subtle texture rings for grip\nfor (h = [10:10:shade_h-10]) {\n    translate([0, 0, h])\n    difference() {\n        cylinder(h = 0.5, d = shade_d + 0.5);\n        cylinder(h = 1, d = shade_d);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "netherlich",
    "openscad_code": "// Netherlich - Undead Lich for 3D printing\n// Medium complexity realistic style\n\n$fa = 2;\n$fs = 0.5;\n\nmodule netherlich() {\n    // Base dimensions\n    base_height = 5;\n    torso_height = 25;\n    head_height = 20;\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 8, 0, base_height]) {\n            rotate([0, 15 * side, 0])\n            cylinder(h = 20, d1 = 6, d2 = 4, $fn = 8);\n        }\n    }\n    \n    // Pelvis\n    translate([0, 0, base_height + 18])\n    cube([20, 10, 8], center = true);\n    \n    // Spine\n    translate([0, 0, base_height + 26])\n    cylinder(h = torso_height, d = 8, $fn = 8);\n    \n    // Ribcage\n    for(i = [0:4]) {\n        translate([0, 0, base_height + 30 + i * 4])\n        scale([1.2 - i * 0.1, 0.7, 0.8])\n        sphere(d = 15, $fn = 16);\n    }\n    \n    // Shoulders\n    translate([0, 0, base_height + 45])\n    rotate([90, 0, 0])\n    cylinder(h = 25, d = 6, $fn = 8);\n    \n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 12.5, 0, base_height + 45])\n        rotate([0, 0, side * 15])\n        cylinder(h = 20, d = 5, $fn = 8);\n        \n        // Hands\n        translate([side * 22, 0, base_height + 40])\n        sphere(d = 6, $fn = 8);\n    }\n    \n    // Head\n    translate([0, 0, base_height + 55]) {\n        // Skull\n        difference() {\n            sphere(d = 14, $fn = 16);\n            // Eye sockets\n            for(side = [-1, 1]) {\n                translate([side * 4, 5, 2])\n                sphere(d = 4, $fn = 8);\n            }\n            // Nasal cavity\n            translate([0, 5, 0])\n            cube([3, 3, 5], center = true);\n            // Jaw\n            translate([0, -5, -5])\n            cube([10, 8, 5], center = true);\n        }\n        \n        // Jaw\n        translate([0, -6, -7])\n        rotate([10, 0, 0])\n        cube([8, 8, 6], center = true);\n    }\n    \n    // Crown\n    translate([0, 0, base_height + 68])\n    difference() {\n        cylinder(h = 5, d = 16, $fn = 8);\n        cylinder(h = 6, d = 14, $fn = 8);\n    }\n    \n    // Spikes on crown\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([7, 0, 2.5])\n        cylinder(h = 8, d = 2, $fn = 6);\n    }\n    \n    // Tattered robes\n    color(\"darkred\")\n    for(i = [0:3]) {\n        translate([0, 0, base_height + 20 + i * 10])\n        difference() {\n            cylinder(h = 15, d = 25 - i * 3, $fn = 16);\n            cylinder(h = 16, d = 23 - i * 3, $fn = 16);\n        }\n    }\n    \n    // Staff\n    translate([-25, 15, base_height + 35])\n    rotate([0, 15, -30])\n    union() {\n        // Staff pole\n        cylinder(h = 40, d = 3, $fn = 8);\n        \n        // Staff head\n        translate([0, 0, 40])\n        sphere(d = 8, $fn = 8);\n        \n        // Crystal\n        translate([0, 0, 45])\n        sphere(d = 5, $fn = 6);\n    }\n}\n\n// Base platform for printing\ntranslate([0, 0, 0])\ncube([50, 50, 5], center = true);\n\n// Position the netherlich on the base\ntranslate([0, 0, 5])\nnetherlich();",
    "renders": true
  },
  {
    "household_item": "shadowrot",
    "openscad_code": "// Shadowrot - realistic medium-complexity model\n// All dimensions in mm, designed for FDM printing\n$fa = 2;\n$fs = 0.5;\n\n// Overall scale\nscale_factor = 1.5;\n\n// Main body\nmodule body() {\n    difference() {\n        // Central cylinder\n        cylinder(h = 30 * scale_factor, d = 20 * scale_factor, center = true);\n        \n        // Hollow center\n        cylinder(h = 31 * scale_factor, d = 12 * scale_factor, center = true);\n    }\n}\n\n// Blades\nmodule blades() {\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) \n        translate([0, 8.5 * scale_factor, 0])\n        difference() {\n            // Blade\n            union() {\n                scale([1, 1.5, 0.3]) sphere(d = 8 * scale_factor);\n                translate([0, 7 * scale_factor, 0])\n                scale([0.8, 2, 0.3]) sphere(d = 6 * scale_factor);\n            }\n            \n            // Cutout for weight reduction\n            translate([0, 3 * scale_factor, 0])\n            scale([0.5, 1.2, 0.5]) sphere(d = 4 * scale_factor);\n        }\n    }\n}\n\n// Hub detail\nmodule hub() {\n    difference() {\n        // Main hub\n        cylinder(h = 5 * scale_factor, d = 22 * scale_factor, center = true);\n        \n        // Screw holes\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120]) \n            translate([6 * scale_factor, 0, 0])\n            cylinder(h = 6 * scale_factor, d = 3 * scale_factor, center = true);\n        }\n    }\n}\n\n// Mounting bracket\nmodule bracket() {\n    difference() {\n        // Base plate\n        cube([40 * scale_factor, 15 * scale_factor, 4 * scale_factor], center = true);\n        \n        // Mounting holes\n        for (x = [-1:1]) {\n            translate([x * 12 * scale_factor, 0, 0])\n            cylinder(h = 5 * scale_factor, d = 4 * scale_factor, center = true);\n        }\n        \n        // Center clearance\n        translate([0, 0, 2 * scale_factor])\n        cylinder(h = 5 * scale_factor, d = 14 * scale_factor, center = true);\n    }\n}\n\n// Support arms\nmodule arms() {\n    for (angle = [45, -45]) {\n        rotate([0, 0, angle])\n        translate([15 * scale_factor, 0, -17 * scale_factor])\n        rotate([90, 0, 0])\n        cylinder(h = 25 * scale_factor, d1 = 6 * scale_factor, d2 = 4 * scale_factor);\n    }\n}\n\n// Assembly\nunion() {\n    // Main rotor assembly\n    translate([0, 0, 15 * scale_factor])\n    body();\n    \n    translate([0, 0, 15 * scale_factor])\n    blades();\n    \n    translate([0, 0, 15 * scale_factor])\n    hub();\n    \n    // Mounting system\n    bracket();\n    arms();\n}",
    "renders": true
  },
  {
    "household_item": "deathspine",
    "openscad_code": "// Deathspine - Realistic Style, Medium Complexity\n// A 3D printable spine with spinal cord and discs\n\n// Parameters\n$fn = 36;\nspine_length = 70;\nvertebra_height = 8;\ndisc_height = 3;\nspine_width = 20;\nspine_depth = 12;\ncord_radius = 3;\nwall_thickness = 2;\n\n// Main deathspine module\nmodule deathspine() {\n    // Vertebrae and discs\n    for (i = [0:11]) {\n        // Calculate position\n        z_pos = i * (vertebra_height + disc_height) + vertebra_height/2;\n        \n        // Vertebra body\n        translate([0, 0, z_pos])\n            vertebra();\n        \n        // Intervertebral disc (except top)\n        if (i < 11) {\n            translate([0, 0, z_pos + vertebra_height/2 + disc_height/2])\n                disc();\n        }\n    }\n    \n    // Spinal cord running through center\n    translate([0, -spine_depth/4, spine_length/2])\n        rotate([90, 0, 0])\n            spinal_cord();\n    \n    // Spinal processes\n    for (i = [0:11]) {\n        z_pos = i * (vertebra_height + disc_height) + vertebra_height/2;\n        translate([0, spine_depth/2, z_pos])\n            spinal_process();\n    }\n}\n\n// Vertebra module\nmodule vertebra() {\n    difference() {\n        // Main body\n        union() {\n            // Central body\n            scale([1, 0.8, 1])\n                cube([spine_width, spine_depth, vertebra_height], center=true);\n            \n            // Pedicles\n            translate([spine_width/3, spine_depth/4, 0])\n                cube([wall_thickness*2, spine_depth/2, vertebra_height], center=true);\n            translate([-spine_width/3, spine_depth/4, 0])\n                cube([wall_thickness*2, spine_depth/2, vertebra_height], center=true);\n        }\n        \n        // Spinal canal\n        translate([0, -spine_depth/4, 0])\n            cylinder(h=vertebra_height+1, r=cord_radius+wall_thickness, center=true);\n        \n        // Vertebral foramen\n        translate([0, 0, -vertebra_height/2-1])\n            cube([spine_width-wall_thickness*2, spine_depth-wall_thickness, vertebra_height+2], center=true);\n    }\n}\n\n// Intervertebral disc module\nmodule disc() {\n    scale([1.1, 1, 0.8])\n        cylinder(h=disc_height, r=spine_width/2, center=true);\n}\n\n// Spinal cord module\nmodule spinal_cord() {\n    cylinder(h=spine_length, r=cord_radius, center=true);\n}\n\n// Spinal process module\nmodule spinal_process() {\n    union() {\n        // Base of process\n        translate([0, 0, 0])\n            cube([wall_thickness*2, wall_thickness*2, vertebra_height], center=true);\n        \n        // Process extending backward\n        translate([0, spine_depth/2, 0])\n            cube([wall_thickness, spine_depth, vertebra_height], center=true);\n    }\n}\n\n// Generate the deathspine\ndeathspine();",
    "renders": true
  },
  {
    "household_item": "voidspecter",
    "openscad_code": "// VoidSpecter - Realistic Style, Medium Complexity\n// A shadowy entity with flowing form and ethereal details\n// Designed for 3D printing with proper wall thickness\n\n$fn = 32;  // Smooth curves\n\n// Overall dimensions\nbody_height = 60;\nbody_width = 45;\nbase_diameter = 30;\n\n// Main body module\nmodule voidspecter_body() {\n    // Core body - flowing cloak-like form\n    difference() {\n        // Main cloak shape\n        union() {\n            // Upper torso\n            translate([0, 0, body_height/2])\n                scale([1, 0.8, 1.2])\n                sphere(d=body_width);\n            \n            // Flowing lower body\n            for(i=[0:5]) {\n                rotate([0, 0, i*60])\n                translate([0, body_width/3, body_height/3 - i*5])\n                    scale([0.8 - i*0.1, 0.6 - i*0.08, 1])\n                    sphere(d=body_width - i*3);\n            }\n        }\n        \n        // Carve out interior for hollow printing\n        translate([0, 0, body_height/2])\n            scale([0.9, 0.7, 1.1])\n            sphere(d=body_width - 4);\n    }\n}\n\n// Ethereal tendrils module\nmodule voidspecter_tendrils() {\n    // Generate flowing tendrils around the body\n    for(angle=[0:45:315]) {\n        rotate([0, 0, angle])\n        translate([body_width/2 + 2, 0, body_height/2])\n            tendril(angle);\n    }\n}\n\nmodule tendril(base_angle) {\n    // Create a curved tendril using stacked cylinders\n    union() {\n        for(i=[0:5]) {\n            translate([i*2, 0, -i*3])\n                rotate([0, 15*i + base_angle/4, 0])\n                cylinder(h=4, d1=4-i*0.3, d2=3-i*0.2);\n        }\n    }\n}\n\n// Void core - the \"face\" area\nmodule void_core() {\n    difference() {\n        // Dark energy sphere\n        translate([0, -body_width/4, body_height*0.7])\n            sphere(d=12);\n        \n        // Inner void\n        translate([0, -body_width/4 - 1, body_height*0.7])\n            sphere(d=8);\n    }\n    \n    // Energy wisps around the void\n    for(angle=[0:60:300]) {\n        rotate([0, 0, angle])\n        translate([6, -body_width/4, body_height*0.7])\n            scale([1, 0.5, 0.2])\n            sphere(d=3);\n    }\n}\n\n// Base platform for stability\nmodule voidspecter_base() {\n    difference() {\n        cylinder(h=5, d=base_diameter);\n        cylinder(h=6, d=base_diameter - 4);\n    }\n    \n    // Energy patterns on base\n    for(angle=[0:30:330]) {\n        rotate([0, 0, angle])\n        translate([base_diameter/2 - 3, 0, 2.5])\n            scale([0.5, 0.3, 1])\n            cylinder(h=1, d=5);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    voidspecter_base();\n    \n    // Main body elevated on base\n    translate([0, 0, 5])\n        voidspecter_body();\n    \n    // Tendrils\n    translate([0, 0, 5])\n        voidspecter_tendrils();\n    \n    // Void core\n    translate([0, 0, 5])\n        void_core();\n}",
    "renders": true
  },
  {
    "household_item": "ashwraith",
    "openscad_code": "// Ashwraith - Medium complexity, realistic style\n// Approx 80mm tall, 3D printable\n\n$fn = 32;  // Smooth curves\n\nmodule hood() {\n    // Main hood structure\n    difference() {\n        // Outer hood\n        rotate([0, 10, 0])\n            scale([1.2, 1.3, 1.5])\n                cylinder(h=40, r1=25, r2=20, center=true);\n        \n        // Hollow inside\n        translate([0, 0, 5])\n            scale([1.1, 1.2, 1.3])\n                cylinder(h=40, r1=22, r2=17, center=true);\n        \n        // Face opening\n        translate([0, -20, -5])\n            rotate([30, 0, 0])\n                cube([30, 30, 30], center=true);\n    }\n}\n\nmodule face() {\n    // Glowing eyes\n    translate([-10, -15, 5]) {\n        color(\"red\")\n            sphere(r=3);\n    }\n    translate([10, -15, 5]) {\n        color(\"red\") \n            sphere(r=3);\n    }\n    \n    // Nose ridge\n    translate([0, -10, 0])\n        scale([1, 1.5, 0.5])\n            sphere(r=5);\n}\n\nmodule torso() {\n    // Upper body with chest plate\n    difference() {\n        // Main torso\n        translate([0, 0, -30])\n            scale([1.2, 0.8, 1.5])\n                cube([30, 20, 40], center=true);\n        \n        // Waist taper\n        translate([0, 0, -45])\n            scale([0.8, 0.6, 0.8])\n                cube([35, 25, 20], center=true);\n    }\n    \n    // Chest armor plates\n    for(i = [-1, 1]) {\n        translate([i*12, -5, -25])\n            rotate([0, i*10, 0])\n                scale([0.3, 1, 1.2])\n                    cube([10, 15, 20], center=true);\n    }\n}\n\nmodule arms() {\n    // Left arm\n    translate([-25, 0, -20])\n        rotate([0, 0, -20])\n            scale([0.4, 0.4, 1])\n                cylinder(h=35, r=8, center=false);\n    \n    // Right arm  \n    translate([25, 0, -20])\n        rotate([0, 0, 20])\n            scale([0.4, 0.4, 1])\n                cylinder(h=35, r=8, center=false);\n    \n    // Hands\n    translate([-35, 0, -35])\n        sphere(r=6);\n    translate([35, 0, -35])\n        sphere(r=6);\n}\n\nmodule cloak() {\n    // Flowing cape pieces\n    for(i = [-1, 0, 1]) {\n        rotate([0, 0, i*15])\n            translate([i*10, 10, -30])\n                scale([1.2, 0.3, 2])\n                    cube([20, 5, 40], center=true);\n    }\n}\n\nmodule weapon() {\n    // Basic sword\n    translate([45, 0, -30])\n        rotate([0, 0, 90])\n            difference() {\n                // Blade\n                translate([0, 0, 15])\n                    scale([0.2, 4, 0.1])\n                        cube([5, 30, 5], center=true);\n                \n                // Fuller\n                translate([0, 8, 15])\n                    scale([0.1, 2, 0.05])\n                        cube([5, 20, 5], center=true);\n            }\n}\n\n// Assembly\nunion() {\n    hood();\n    face();\n    torso();\n    arms();\n    cloak();\n    weapon();\n}",
    "renders": true
  },
  {
    "household_item": "blightwight",
    "openscad_code": "// Blightwight - Medium complexity realistic style\n// Height: 80mm, base diameter: 40mm\n\n// Parameters\n$fn = 32;\nbody_height = 60;\nbase_height = 10;\narm_length = 25;\nleg_length = 30;\nhead_size = 15;\nwall_thickness = 1.5;\n\nmodule torso() {\n    difference() {\n        // Main torso\n        union() {\n            // Chest\n            cylinder(h = body_height * 0.6, d1 = 30, d2 = 25, center = false);\n            // Abdomen\n            translate([0, 0, body_height * 0.6])\n                cylinder(h = body_height * 0.4, d1 = 25, d2 = 20, center = false);\n        }\n        \n        // Hollow torso\n        translate([0, 0, wall_thickness])\n            cylinder(h = body_height - wall_thickness * 2, d1 = 30 - wall_thickness * 2, d2 = 20 - wall_thickness * 2, center = false);\n    }\n}\n\nmodule head() {\n    // Skull-like head\n    difference() {\n        // Main skull shape\n        union() {\n            sphere(d = head_size);\n            translate([0, 0, -head_size * 0.2])\n                cylinder(h = head_size * 0.4, d = head_size * 0.8);\n        }\n        \n        // Eye sockets\n        translate([-head_size * 0.25, head_size * 0.4, head_size * 0.1])\n            sphere(d = head_size * 0.3);\n        translate([head_size * 0.25, head_size * 0.4, head_size * 0.1])\n            sphere(d = head_size * 0.3);\n        \n        // Mouth cavity\n        translate([0, head_size * 0.5, -head_size * 0.3])\n            cube([head_size * 0.6, head_size * 0.2, head_size * 0.3], center = true);\n        \n        // Hollow head\n        sphere(d = head_size - wall_thickness * 2);\n    }\n}\n\nmodule arm(side = 1) {\n    // Arm with shoulder, elbow, and hand\n    translate([side * 15, 0, body_height * 0.7]) {\n        rotate([0, 90, 0]) {\n            // Upper arm\n            cylinder(h = arm_length * 0.5, d = 8);\n            \n            // Elbow joint\n            translate([arm_length * 0.5, 0, 0])\n                sphere(d = 8);\n            \n            // Forearm\n            translate([arm_length * 0.5, 0, 0])\n                rotate([0, -20, 0])\n                    cylinder(h = arm_length * 0.4, d = 6);\n            \n            // Hand\n            translate([arm_length * 0.9, 0, 0])\n                sphere(d = 7);\n        }\n    }\n}\n\nmodule leg(side = 1) {\n    // Leg with thigh, knee, and shin\n    translate([side * 8, 0, 0]) {\n        // Thigh\n        cylinder(h = leg_length * 0.5, d1 = 10, d2 = 8);\n        \n        // Knee\n        translate([0, 0, leg_length * 0.5])\n            sphere(d = 8);\n        \n        // Shin\n        translate([0, 0, leg_length * 0.5])\n            rotate([0, side * 10, 0])\n                cylinder(h = leg_length * 0.5, d1 = 8, d2 = 6);\n        \n        // Foot\n        translate([side * 2, 0, leg_length])\n            cube([12, 20, 6], center = true);\n    }\n}\n\nmodule spines() {\n    // Spines on back\n    for(i = [0.2 : 0.2 : 0.8]) {\n        translate([0, -12, body_height * i])\n            rotate([0, 0, i * 30])\n                cylinder(h = 8 + i * 5, d = 3);\n    }\n}\n\nmodule base() {\n    // Solid base for stability\n    cylinder(h = base_height, d = 40);\n}\n\n// Assembly\ntranslate([0, 0, base_height])\n    torso();\n\ntranslate([0, 0, base_height + body_height - head_size * 0.5])\n    head();\n\narm(-1);\narm(1);\n\ntranslate([0, 0, base_height])\n    leg(-1);\ntranslate([0, 0, base_height])\n    leg(1);\n\ntranslate([0, 0, base_height + body_height * 0.3])\n    spines();\n\nbase();",
    "renders": true
  },
  {
    "household_item": "dreadshade",
    "openscad_code": "// Dreadshade - Medium complexity realistic style\n// Size: ~70mm tall, 3D printable with minimal supports\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main module\nmodule dreadshade() {\n    // Base platform for stability\n    translate([0, 0, -2]) cylinder(h=4, r1=18, r2=20);\n    \n    // Central pillar\n    translate([0, 0, 0]) cylinder(h=8, r=6);\n    \n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 8]) scale([1, 0.8, 1.3]) sphere(d=20);\n        \n        // Shoulders\n        translate([0, 0, 20]) cylinder(h=8, r1=12, r2=10);\n        \n        // Head\n        translate([0, 0, 30]) skull();\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 20]) rotate([0, side * 20, 0]) arm();\n        }\n        \n        // Cape\n        cape();\n    }\n    \n    // Lower body details\n    translate([0, 0, 8]) legs();\n}\n\n// Skull module\nmodule skull() {\n    difference() {\n        // Main skull shape\n        scale([0.8, 0.7, 1]) sphere(d=16);\n        \n        // Eye sockets\n        for(x = [-3, 3]) {\n            translate([x, -2, 2]) scale([1, 1.2, 0.8]) sphere(d=5);\n        }\n        \n        // Mouth cavity\n        translate([0, -5, -2]) cube([8, 4, 4], center=true);\n        \n        // Nose cavity\n        translate([0, 0, 0]) cylinder(h=6, r=2);\n    }\n}\n\n// Arm module\nmodule arm() {\n    union() {\n        // Upper arm\n        cylinder(h=15, r=4);\n        \n        // Elbow joint\n        translate([0, 0, 15]) sphere(d=8);\n        \n        // Forearm\n        translate([0, 0, 19]) rotate([0, 30, 0]) \n            cylinder(h=12, r=3.5);\n        \n        // Hand\n        translate([0, 0, 31]) hand();\n    }\n}\n\n// Hand module\nmodule hand() {\n    // Palm\n    translate([0, 0, 0]) scale([1.2, 1, 0.5]) sphere(d=8);\n    \n    // Fingers (simplified as claws)\n    for(i = [-1, -0.3, 0.3, 1]) {\n        translate([i * 3, 0, 0]) rotate([i * 10, 0, 0])\n            cylinder(h=6, r1=1.5, r2=0.5);\n    }\n}\n\n// Cape module\nmodule cape() {\n    difference() {\n        // Main cape shape\n        translate([0, 8, 25]) rotate([100, 0, 0])\n            scale([1.2, 1, 0.3]) sphere(d=40);\n        \n        // Trim bottom for flat edge\n        translate([0, 15, 5]) cube([50, 30, 20], center=true);\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        translate([side * 4, 0, 0]) {\n            // Thigh\n            cylinder(h=12, r1=4, r2=3);\n            \n            // Knee\n            translate([0, 0, 12]) sphere(d=5);\n            \n            // Shin\n            translate([0, 0, 16]) rotate([side * 10, 0, 0])\n                cylinder(h=10, r1=3, r2=2.5);\n            \n            // Foot\n            translate([0, 3, 26]) rotate([20, 0, 0])\n                scale([1.5, 2, 0.8]) sphere(d=6);\n        }\n    }\n}\n\n// Generate the model\ndreadshade();",
    "renders": true
  },
  {
    "household_item": "corpsewraith",
    "openscad_code": "// Corpsewraith - realistic medium complexity\n// Height ~75mm, all parts merged for 3D printing\n\n$fn = 32;\n\nmodule skull() {\n    // Main skull\n    difference() {\n        sphere(d = 20);\n        // Eye sockets\n        translate([-6, 8, 5]) sphere(d = 7);\n        translate([6, 8, 5]) sphere(d = 7);\n        // Nose cavity\n        translate([0, 10, 2]) rotate([90, 0, 0]) cylinder(h = 10, d1 = 8, d2 = 4);\n    }\n    // Jaw\n    translate([0, -8, -10]) cube([18, 12, 8], center = true);\n    // Teeth\n    for(i = [-6:3:6]) {\n        translate([i, -12, -8]) cube([2, 4, 2]);\n    }\n}\n\nmodule spine(spine_length = 35) {\n    // Vertebrae stack\n    for(i = [0:5:spine_length]) {\n        translate([0, 0, -i]) \n        scale([0.9 - i/200, 0.9 - i/200, 1]) \n        cylinder(h = 4, d = 12 - i/5);\n    }\n}\n\nmodule ribcage() {\n    // Central sternum\n    translate([0, 5, -15]) rotate([15, 0, 0]) \n    cylinder(h = 20, d = 6);\n    \n    // Ribs\n    for(angle = [0:30:150]) {\n        rotate([angle, 0, 0]) {\n            translate([0, 10, -10]) \n            rotate([0, -angle/2, 0]) \n            cylinder(h = 25, d1 = 3, d2 = 2);\n        }\n    }\n}\n\nmodule arm(is_left = true) {\n    side = is_left ? -1 : 1;\n    // Upper arm\n    translate([side * 15, 5, -5]) rotate([0, 0, side * -20]) \n    cylinder(h = 20, d = 6);\n    \n    // Forearm\n    translate([side * 28, 0, -5]) rotate([0, 0, side * -45]) \n    cylinder(h = 18, d = 5);\n    \n    // Hand\n    translate([side * 40, -5, -5]) \n    scale([1, 0.7, 0.5]) sphere(d = 8);\n    \n    // Fingers\n    for(i = [0:3]) {\n        translate([side * (42 + i*2), -7, -5]) \n        rotate([0, 0, side * 10]) \n        cylinder(h = 8, d = 2);\n    }\n}\n\nmodule pelvis() {\n    // Hip bone\n    difference() {\n        translate([0, 5, -40]) \n        scale([1.2, 0.8, 0.6]) sphere(d = 25);\n        // Pelvic opening\n        translate([0, 10, -40]) \n        cylinder(h = 15, d = 15);\n    }\n}\n\nmodule leg(is_left = true) {\n    side = is_left ? -1 : 1;\n    // Femur\n    translate([side * 8, 0, -55]) rotate([0, side * 10, 0]) \n    cylinder(h = 25, d = 7);\n    \n    // Tibia\n    translate([side * 8, 0, -75]) rotate([0, side * 5, 0]) \n    cylinder(h = 22, d = 5);\n    \n    // Foot\n    translate([side * 8, -5, -90]) \n    scale([1.5, 3, 0.8]) sphere(d = 10);\n}\n\n// Main assembly\nunion() {\n    translate([0, 0, 30]) skull();\n    spine();\n    ribcage();\n    pelvis();\n    \n    arm(true);\n    arm(false);\n    \n    leg(true);\n    leg(false);\n}",
    "renders": true
  },
  {
    "household_item": "soulshade",
    "openscad_code": "// Soulshade Lamp - Realistic Style, Medium Complexity\n// A 3D printable desk lamp inspired by the iconic game object\n\n// Overall dimensions\nlamp_height = 85;\nbase_diameter = 45;\nshade_diameter = 70;\nshade_height = 40;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\nbase_height = 8;\n\n// Main assembly\nmodule soulshade() {\n    // Base with cable channel\n    base();\n    \n    // Central support pole\n    pole();\n    \n    // Lamp shade assembly\n    shade();\n    \n    // Decorative rings\n    rings();\n}\n\n// Weighted base with cable exit\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_height, d=base_diameter, $fn=60);\n        \n        // Cable channel - 45 degree angle\n        translate([0, -base_diameter/2, base_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=base_diameter/2, d=8, $fn=20);\n        \n        // Hollow interior for electronics\n        translate([0, 0, -0.1])\n            cylinder(h=base_height+0.2, d=base_diameter-wall_thick*2, $fn=60);\n    }\n}\n\n// Central support pole with wire channel\nmodule pole() {\n    translate([0, 0, base_height])\n        difference() {\n            // Outer pole\n            cylinder(h=lamp_height-base_height-shade_height/2, d=12, $fn=30);\n            \n            // Inner wire channel\n            cylinder(h=lamp_height-base_height-shade_height/2+1, d=8, $fn=20);\n        }\n}\n\n// Main shade structure\nmodule shade() {\n    translate([0, 0, lamp_height-shade_height/2])\n        difference() {\n            // Outer shade - football shape\n            sphere(d=shade_diameter, $fn=60);\n            \n            // Hollow interior\n            sphere(d=shade_diameter-wall_thick*2, $fn=60);\n            \n            // Bottom opening for light\n            translate([0, 0, -shade_height/2])\n                cylinder(h=shade_height, d=shade_diameter*0.6, $fn=60);\n            \n            // Top opening for heat venting\n            translate([0, 0, shade_height/2])\n                cylinder(h=shade_height/2, d=shade_diameter*0.3, $fn=30);\n        }\n}\n\n// Decorative rings around shade\nmodule rings() {\n    // Top ring\n    translate([0, 0, lamp_height-shade_height/2+shade_height*0.3])\n        cylinder(h=wall_thick*1.5, d=shade_diameter+wall_thick*2, $fn=60);\n    \n    // Middle ring\n    translate([0, 0, lamp_height-shade_height/2])\n        cylinder(h=wall_thick*1.5, d=shade_diameter+wall_thick*2, $fn=60);\n    \n    // Bottom ring with cutouts for light\n    translate([0, 0, lamp_height-shade_height/2-shade_height*0.3])\n        difference() {\n            cylinder(h=wall_thick*2, d=shade_diameter+wall_thick*2, $fn=60);\n            \n            // Light cutouts - 8 evenly spaced\n            for(i=[0:7]) {\n                rotate([0, 0, i*45])\n                    translate([shade_diameter/2+wall_thick, 0, -1])\n                        cube([shade_diameter*0.2, wall_thick*4, wall_thick*4], center=true);\n            }\n        }\n}\n\n// Generate the complete model\nsoulshade();",
    "renders": true
  },
  {
    "household_item": "graveghast",
    "openscad_code": "// Graveghast - medium complexity realistic style\n// Overall height ~75mm, base 40mm diameter, printable without supports\n\n$fn = 36;\n\nmodule graveghast() {\n    // Base platform for stable printing\n    difference() {\n        cylinder(h=3, d=40, center=false);\n        translate([0,0,-0.1]) cylinder(h=3.2, d=38, center=false);\n    }\n    \n    // Torso - tattered robes\n    translate([0,0,3]) {\n        difference() {\n            // Main robe body\n            cylinder(h=30, d1=35, d2=25, center=false);\n            // Hollow interior\n            translate([0,0,-0.1]) cylinder(h=30.2, d1=32, d2=22, center=false);\n            // Tattered bottom edge\n            for(i=[0:7]) {\n                rotate([0,0,i*45])\n                translate([12,0,25]) \n                rotate([0,90,0])\n                cylinder(h=8, d1=6, d2=3, center=false);\n            }\n        }\n        \n        // Chest detail - ribcage suggestion\n        translate([0,0,15]) \n        difference() {\n            sphere(d=20);\n            sphere(d=18);\n        }\n    }\n    \n    // Arms - skeletal and tattered\n    // Left arm\n    translate([-18,0,25]) {\n        rotate([0,0,-30])\n        union() {\n            // Upper arm\n            cylinder(h=15, d=6, center=false);\n            // Lower arm\n            translate([0,0,15])\n            rotate([0,30,0])\n            cylinder(h=12, d=5, center=false);\n            // Hand\n            translate([0,0,27])\n            sphere(d=6);\n        }\n    }\n    \n    // Right arm (mirror of left)\n    translate([18,0,25]) {\n        mirror([1,0,0])\n        rotate([0,0,-30])\n        union() {\n            // Upper arm\n            cylinder(h=15, d=6, center=false);\n            // Lower arm\n            translate([0,0,15])\n            rotate([0,30,0])\n            cylinder(h=12, d=5, center=false);\n            // Hand\n            translate([0,0,27])\n            sphere(d=6);\n        }\n    }\n    \n    // Head - skull-like with hood\n    translate([0,0,33]) {\n        // Hood\n        difference() {\n            cylinder(h=20, d1=22, d2=18, center=false);\n            translate([0,0,-0.1]) cylinder(h=20.2, d1=20, d2=16, center=false);\n        }\n        \n        // Skull inside hood\n        translate([0,0,5]) {\n            difference() {\n                sphere(d=12);\n                // Eye sockets\n                translate([-3,4,2]) sphere(d=3);\n                translate([3,4,2]) sphere(d=3);\n                // Nose cavity\n                translate([0,0,0]) cylinder(h=4, d=2, center=false);\n            }\n        }\n    }\n    \n    // Grave chains - wrapped around torso\n    color(\"darkgray\") {\n        for(i=[0:3]) {\n            translate([0,0,8+i*6])\n            rotate([0,0,i*15])\n            difference() {\n                torus(15, 1.5);\n                torus(13.5, 1.5);\n            }\n        }\n    }\n    \n    // Floating shoulder fragments\n    translate([-20,5,28]) {\n        cube([8,3,4], center=true);\n    }\n    translate([20,-5,28]) {\n        cube([8,3,4], center=true);\n    }\n}\n\n// Helper module for torus\nmodule torus(r_outer, r_inner) {\n    rotate_extrude() {\n        translate([r_outer,0,0]) circle(r=r_inner);\n    }\n}\n\n// Generate the model\ngraveghast();",
    "renders": true
  },
  {
    "household_item": "nightshade",
    "openscad_code": "// Realistic Nightshade Flower Model\n// 3D printable, medium complexity\n\n$fn=48;\npetal_thickness = 1.2;\nstem_diameter = 3;\nstem_length = 35;\nflower_diameter = 25;\nleaf_length = 18;\nleaf_width = 9;\n\n// Main stem\nmodule stem() {\n    color(\"darkolivegreen\")\n    cylinder(h=stem_length, d=stem_diameter, $fn=16);\n}\n\n// Petal with slight cupping\nmodule petal() {\n    difference() {\n        // Main petal shape\n        rotate([0, 15, 0])\n        scale([1, 1.2, 0.3])\n        sphere(d=flower_diameter/3);\n        \n        // Cut bottom flat\n        translate([0, 0, -flower_diameter/6])\n        cube([flower_diameter/3+2, flower_diameter/3+2, flower_diameter/3], center=true);\n        \n        // Add subtle vein\n        translate([0, 0, -petal_thickness/2])\n        scale([0.1, 1, 0.2])\n        cube([flower_diameter/6, flower_diameter/3, petal_thickness]);\n    }\n}\n\n// Stigma\nmodule stigma() {\n    color(\"darkgreen\")\n    translate([0, 0, 1])\n    cylinder(h=4, d1=3.5, d2=1.5, $fn=12);\n}\n\n// Stamens ring\nmodule stamens() {\n    color(\"goldenrod\")\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n        translate([flower_diameter/4, 0, 0])\n        cylinder(h=4, d=0.8, $fn=8);\n    }\n}\n\n// Flower head assembly\nmodule flower() {\n    // Stigma at center\n    stigma();\n    \n    // Stamens\n    stamens();\n    \n    // Five petals\n    for(i=[0:72:359]) {\n        rotate([0, 0, i])\n        translate([0, flower_diameter/6, 1])\n        petal();\n    }\n}\n\n// Leaf with realistic vein\nmodule leaf() {\n    color(\"forestgreen\")\n    difference() {\n        // Leaf shape\n        scale([leaf_width/leaf_length, 1, leaf_thickness/leaf_length])\n        sphere(d=leaf_length);\n        \n        // Remove bottom half\n        translate([0, -leaf_length/2-1, 0])\n        cube([leaf_width+2, leaf_length+2, leaf_thickness+2], center=true);\n        \n        // Central vein\n        translate([0, -leaf_length/2, -leaf_thickness/2])\n        cube([0.5, leaf_length, leaf_thickness+0.1], center=true);\n        \n        // Side veins\n        for(i=[-60:30:60]) {\n            rotate([0, 0, i])\n            translate([0, -leaf_length/3, -leaf_thickness/2])\n            cube([0.3, leaf_length/2, leaf_thickness+0.1], center=true);\n        }\n    }\n}\n\n// Berry cluster\nmodule berries() {\n    color(\"darkpurple\")\n    translate([0, 0, -stem_length/3])\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([stem_diameter*1.5, 0, sin(i)*2])\n        sphere(d=4);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0])\nunion() {\n    // Stem\n    stem();\n    \n    // Flower at top\n    translate([0, 0, stem_length])\n    flower();\n    \n    // Leaves\n    translate([0, 0, stem_length*0.6])\n    rotate([0, 0, 45])\n    rotate([20, 0, 0])\n    leaf();\n    \n    translate([0, 0, stem_length*0.3])\n    rotate([0, 0, -45])\n    rotate([20, 0, 180])\n    leaf();\n    \n    // Berries below flower\n    berries();\n}",
    "renders": true
  },
  {
    "household_item": "rottensoul",
    "openscad_code": "// RottenSoul – a medium-complexity, realistic style 3-D printable figurine\n// Approx. 70 mm tall.  All parts unioned into one solid, no floating overhangs.\n\n$fa = 1; $fs = 0.5;\n\nmodule skull() {\n    // cranium\n    difference() {\n        sphere(d = 26);\n        translate([0, 0, -2])\n            sphere(d = 28);      // flatten bottom\n    }\n\n    // eye sockets\n    for (x = [-8, 8])\n        translate([x, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 14, d1 = 7, d2 = 5, $fn = 20);\n\n    // nasal cavity\n    translate([0, 10.5, 2])\n        cube([8, 5, 12], center = true);\n\n    // jaw\n    translate([0, -12, -10])\n        difference() {\n            cube([22, 14, 12], center = true);\n            translate([0, 3, 1])\n                cube([26, 18, 12], center = true);\n        }\n}\n\nmodule spine_segment(h, top_d, bot_d) {\n    cylinder(h = h, d1 = bot_d, d2 = top_d, $fn = 16);\n}\n\nmodule spine() {\n    union() {\n        translate([0, -18, -16])\n            spine_segment(8, 8, 10);\n        translate([0, -18, -24])\n            spine_segment(8, 6, 8);\n        translate([0, -18, -32])\n            spine_segment(8, 4, 6);\n    }\n}\n\nmodule ribcage() {\n    // sternum\n    translate([0, -20, -14])\n        cube([6, 4, 20], center = true);\n\n    // eight ribs each side\n    for (side = [-1, 1]) {\n        for (i = [0:7]) {\n            rotate([0, 0, side * (20 + i * 7)])\n                translate([0, -25 - i * 2, -12 - i * 1.3])\n                    cylinder(h = 2, d = 3, $fn = 8);\n            rotate([0, 0, side * (20 + i * 7)])\n                translate([0, -25 - i * 2, -8 - i * 1.3])\n                    cylinder(h = 2, d = 3, $fn = 8);\n            // curved connector\n            hull() {\n                rotate([0, 0, side * (20 + i * 7)])\n                    translate([0, -25 - i * 2, -12 - i * 1.3])\n                        sphere(d = 2.5, $fn = 8);\n                rotate([0, 0, side * (20 + i * 7)])\n                    translate([0, -25 - i * 2, -8 - i * 1.3])\n                        sphere(d = 2.5, $fn = 8);\n            }\n        }\n    }\n}\n\nmodule arm(side) {   // side = 1 for right, -1 for left\n    translate([side * 14, -20, -8]) {\n        rotate([0, 0, side * 20])\n            cylinder(h = 18, d = 5, $fn = 8);         // humerus\n        translate([side * 16, -8, 0])\n            rotate([0, 0, side * 40])\n                cylinder(h = 16, d = 4, $fn = 8);     // radius/ulna\n        translate([side * 24, -20, 0])\n            sphere(d = 5, $fn = 8);                   // hand\n    }\n}\n\nmodule leg(side) {   // side = 1 for right, -1 for left\n    translate([side * 8, -18, -40]) {\n        cylinder(h = 22, d = 6, $fn = 8);             // femur\n        translate([0, 0, -23])\n            cylinder(h = 18, d = 5, $fn = 8);         // tibia/fibula\n        translate([0, 0, -32])\n            sphere(d = 6, $fn = 8);                   // foot\n    }\n}\n\n// Build the rottensoul\nunion() {\n    skull();\n    spine();\n    ribcage();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "household_item": "blackwraith",
    "openscad_code": "// Blackwraith (realistic style, medium complexity)\n// Overall height ≈ 85 mm\n\n// Basic dimensions\nhead_h = 25;\nhead_r = 16;\nbody_h = 40;\nbody_r = 18;\nhood_extra = 8;\n\nmodule hood() {\n    difference() {\n        union() {\n            // Main hood shell\n            cylinder(h = head_h + hood_extra, r1 = head_r + 4, r2 = head_r + 2, $fn = 32);\n            // Hood peak\n            translate([0, head_r + 2, head_h + hood_extra - 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, r1 = 10, r2 = 0, $fn = 32);\n        }\n        // Hollow inside\n        translate([0, 0, -1])\n            cylinder(h = head_h + hood_extra + 2, r1 = head_r + 1, r2 = head_r - 1, $fn = 32);\n    }\n}\n\nmodule head() {\n    // Skull-like face\n    difference() {\n        sphere(d = head_h * 0.9, $fn = 32);\n        // Eye sockets\n        translate([-head_r * 0.4, head_r * 0.5, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 10, r1 = 4, r2 = 6, $fn = 16);\n        mirror([1, 0, 0])\n            translate([-head_r * 0.4, head_r * 0.5, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 10, r1 = 4, r2 = 6, $fn = 16);\n    }\n}\n\nmodule torso() {\n    difference() {\n        // Robe body\n        cylinder(h = body_h, r1 = body_r, r2 = body_r - 4, $fn = 32);\n        // Hollow inside\n        translate([0, 0, -1])\n            cylinder(h = body_h + 2, r1 = body_r - 2, r2 = body_r - 6, $fn = 32);\n    }\n}\n\nmodule belt() {\n    // Cloth belt\n    translate([0, 0, body_h * 0.6])\n        difference() {\n            cylinder(h = 4, r = body_r - 1, $fn = 32);\n            cylinder(h = 6, r = body_r - 3, $fn = 32);\n        }\n}\n\nmodule arms() {\n    // Simple sleeve arms\n    for (angle = [45, -45]) {\n        rotate([0, 0, angle])\n            translate([body_r - 2, 0, body_h * 0.8])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, r1 = 5, r2 = 4, $fn = 16);\n    }\n}\n\nmodule scythe() {\n    // Scythe handle\n    translate([body_r + 15, 0, body_h * 0.5])\n        rotate([0, 90, 0])\n            cylinder(h = 60, r = 2, $fn = 12);\n    // Blade\n    translate([body_r + 15 + 30, 0, body_h * 0.5 + 30])\n        rotate([0, 90, 90])\n            difference() {\n                cylinder(h = 25, r1 = 15, r2 = 0, $fn = 3);\n                translate([0, -1, 0])\n                    cube([30, 2, 25], center = true);\n            }\n}\n\n// Assembly\nunion() {\n    translate([0, 0, 0])\n        torso();\n    translate([0, 0, body_h])\n        belt();\n    translate([0, 0, body_h + 1])\n        hood();\n    translate([0, 0, body_h + 1])\n        head();\n    arms();\n    scythe();\n}",
    "renders": true
  },
  {
    "household_item": "bonescourge",
    "openscad_code": "// Bonescourge - a bone scourge weapon\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main parameters\nhandle_length = 60;\nhandle_diameter = 8;\nbone_count = 9;\nbone_length = 45;\nbone_diameter = 6;\nchain_length = 15;\nchain_link_diameter = 2;\n\nmodule handle() {\n    // Main handle shaft\n    union() {\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Handle grip rings\n        for (i = [-20:10:20]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=handle_diameter + 2, center=true);\n        }\n        \n        // Pommel\n        translate([0, 0, handle_length/2 + 5])\n            sphere(d=handle_diameter + 4);\n    }\n}\n\nmodule bone_segment() {\n    // Main bone shaft\n    difference() {\n        cylinder(h=bone_length, d=bone_diameter);\n        \n        // Carve out marrow cavity\n        translate([0, 0, -1])\n            cylinder(h=bone_length + 2, d=bone_diameter - 2);\n        \n        // Add joint nubs\n        translate([0, 0, 0])\n            sphere(d=bone_diameter + 2);\n        translate([0, 0, bone_length])\n            sphere(d=bone_diameter + 2);\n    }\n}\n\nmodule bone_ribbing() {\n    // Add realistic bone texture with rings\n    for (i = [5:5:bone_length-5]) {\n        translate([0, 0, i])\n            cylinder(h=1, d=bone_diameter + 1);\n    }\n}\n\nmodule chain_link() {\n    // Simple torus for chain link\n    rotate_extrude()\n        translate([chain_link_diameter, 0, 0])\n            circle(d=chain_link_diameter);\n}\n\nmodule chain(length) {\n    union() {\n        for (i = [0:chain_link_diameter*2:length]) {\n            translate([0, 0, i])\n                chain_link();\n        }\n    }\n}\n\nmodule bone_tip() {\n    // Sharp bone tip\n    union() {\n        bone_segment();\n        \n        // Add ribbing for texture\n        bone_ribbing();\n        \n        // Tapered end\n        translate([0, 0, bone_length])\n            cylinder(h=10, d1=bone_diameter, d2=0);\n    }\n}\n\nmodule bone_cluster() {\n    // Attach bones to handle via chains\n    for (i = [0:360/bone_count:359]) {\n        rotate([0, 0, i])\n            translate([handle_diameter/2 + 3, 0, handle_length/2 - 10])\n                rotate([90, 0, 0])\n                    union() {\n                        // Chain\n                        chain(chain_length);\n                        \n                        // Bone\n                        translate([0, 0, chain_length + bone_length/2])\n                            rotate([0, 90, 0])\n                                bone_tip();\n                    }\n    }\n}\n\n// Build the model\nunion() {\n    // Handle\n    handle();\n    \n    // Bone cluster\n    bone_cluster();\n}",
    "renders": true
  },
  {
    "household_item": "plagueborn",
    "openscad_code": "// Plagueborn - realistic style, medium complexity\n// Overall height: 70mm\n\n// Base parameters\n$fn=64;\nwall = 1.2;\n\nmodule head() {\n    // Skull structure\n    difference() {\n        sphere(d=20);\n        // Eye sockets\n        translate([-7, 8, 2]) sphere(d=6);\n        translate([7, 8, 2]) sphere(d=6);\n        // Nose cavity\n        translate([0, 9, -2]) scale([1, 0.5, 1]) sphere(d=4);\n    }\n    \n    // Jaw\n    translate([0, -2, -10]) {\n        difference() {\n            cube([12, 15, 10], center=true);\n            translate([0, 5, 0]) cube([10, 10, 12], center=true);\n        }\n    }\n    \n    // Teeth\n    for(i=[-4:2:4]) {\n        translate([i, -8, -7]) cube([1.5, 3, 4], center=true);\n    }\n}\n\nmodule torso() {\n    // Ribcage\n    for(i=[0:8:40]) {\n        rotate([i, 0, 0]) {\n            difference() {\n                translate([0, 0, -i/2]) cylinder(h=3, d1=25-i/4, d2=25-i/3);\n                translate([0, 0, -i/2]) cylinder(h=4, d1=25-i/4-wall, d2=25-i/3-wall);\n            }\n        }\n    }\n    \n    // Spine\n    for(i=[0:6:50]) {\n        translate([0, -10+i/5, -i]) {\n            rotate([0, 90, 0]) cylinder(h=3, d=4);\n        }\n    }\n}\n\nmodule arm(side) {\n    translate([side*12, 10, -10]) {\n        // Upper arm\n        rotate([0, 0, side*15]) cylinder(h=15, d=5);\n        \n        // Elbow joint\n        translate([side*2, 0, -15]) sphere(d=4);\n        \n        // Lower arm\n        translate([side*3, 0, -25]) rotate([0, 0, side*30]) cylinder(h=12, d=4);\n        \n        // Hand\n        translate([side*5, 0, -35]) {\n            // Palm\n            cube([3, 2, 5], center=true);\n            \n            // Fingers\n            for(f=[-1:0.8:1]) {\n                translate([side*1.5, f*0.8, -3]) cylinder(h=4, d=0.8);\n            }\n        }\n    }\n}\n\nmodule leg(side) {\n    translate([side*5, -5, -60]) {\n        // Upper leg\n        cylinder(h=20, d=6);\n        \n        // Knee\n        translate([0, 0, -20]) sphere(d=5);\n        \n        // Lower leg\n        translate([0, 0, -35]) cylinder(h=15, d=4);\n        \n        // Foot\n        translate([0, 2, -47]) cube([8, 4, 3], center=true);\n    }\n}\n\n// Assemble the plagueborn\nunion() {\n    head();\n    translate([0, 0, -25]) torso();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n    \n    // Plague details - boils and lesions\n    for(i=[1:12]) {\n        rotate([rand(i)*360, rand(i+1)*360, rand(i+2)*360]) {\n            translate([\n                rand(i*3)*10-5,\n                rand(i*4)*10-5,\n                -rand(i*5)*40-10\n            ]) sphere(d=rand(i)*2+1);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "gorewraith",
    "openscad_code": "// Gorewraith - realistic style, medium complexity\n// Height ~75mm, designed for FDM printing with minimal supports\n\n$fn = 32;\nwall = 1.2;\n\n// Main body\nmodule body() {\n    // Torso\n    difference() {\n        union() {\n            // Chest armor\n            translate([0, 0, 35]) \n                scale([1, 0.8, 1.2]) \n                    sphere(r=15);\n            \n            // Abdomen\n            translate([0, 0, 20]) \n                scale([0.9, 0.7, 1.1]) \n                    sphere(r=12);\n        }\n        \n        // Hollow for printing\n        translate([0, 0, 20]) \n            scale([1-wall/15, 1-wall/12, 1-wall/14]) \n                sphere(r=14);\n    }\n}\n\n// Head\nmodule head() {\n    difference() {\n        union() {\n            // Skull-like helmet\n            translate([0, 0, 55]) \n                scale([0.9, 0.8, 1.2]) \n                    sphere(r=10);\n            \n            // Jaw\n            translate([0, 5, 48]) \n                rotate([10, 0, 0])\n                    cube([12, 8, 6], center=true);\n        }\n        \n        // Eye sockets\n        for(i=[-1, 1]) {\n            translate([i*4, 2, 55]) \n                rotate([0, 10*i, 0])\n                    sphere(r=2.5);\n        }\n        \n        // Mouth slit\n        translate([0, 6, 50]) \n            cube([8, 1, 3], center=true);\n    }\n}\n\n// Arms\nmodule arms() {\n    for(side=[-1, 1]) {\n        // Shoulder\n        translate([side*15, 0, 45]) \n            rotate([0, 0, side*20])\n                scale([0.9, 0.9, 1.2]) \n                    sphere(r=6);\n        \n        // Upper arm\n        translate([side*20, 0, 35]) \n            rotate([0, 0, side*40])\n                cylinder(h=15, r1=4, r2=3.5);\n        \n        // Forearm\n        translate([side*27, 0, 25]) \n            rotate([0, 0, side*45])\n                cylinder(h=12, r1=3.5, r2=3);\n        \n        // Hand\n        translate([side*32, 0, 18]) \n            scale([1, 0.6, 0.4]) \n                sphere(r=4);\n    }\n}\n\n// Legs\nmodule legs() {\n    for(side=[-1, 1]) {\n        // Thigh\n        translate([side*6, 0, 10]) \n            rotate([0, 0, side*5])\n                cylinder(h=18, r1=5, r2=4.5);\n        \n        // Shin\n        translate([side*7, 0, 0]) \n            rotate([0, 0, side*10])\n                cylinder(h=15, r1=4.5, r2=4);\n        \n        // Foot\n        translate([side*7, 4, -8]) \n            scale([1.2, 2, 0.6]) \n                sphere(r=4.5);\n    }\n}\n\n// Cape\nmodule cape() {\n    difference() {\n        // Main cape\n        translate([0, -12, 35]) \n            rotate([0, 15, 0])\n                scale([1.1, 0.3, 1.5]) \n                    sphere(r=25);\n        \n        // Trim bottom\n        translate([0, -5, 5]) \n            cube([50, 20, 30], center=true);\n    }\n}\n\n// Weapon - scythe blade\nmodule scythe() {\n    // Handle\n    translate([30, 15, 25]) \n        rotate([0, 0, -30])\n            rotate([90, 0, 0])\n                cylinder(h=35, r=1.5);\n    \n    // Blade base\n    translate([30, 15, 40]) \n        rotate([0, 0, -30])\n            rotate([0, 90, 0])\n                cylinder(h=8, r1=1.5, r2=3);\n    \n    // Curved blade\n    for(i=[0:5:30]) {\n        translate([30 - i*0.8, 15 + i*0.6, 42 - i*0.1]) \n            rotate([0, 0, -30 - i])\n                cube([3, 1, 0.5], center=true);\n    }\n}\n\n// Assemble the figure\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    cape();\n    scythe();\n}",
    "renders": true
  },
  {
    "household_item": "spectralich",
    "openscad_code": "// Spectralich – realistic style, medium complexity\n// Approx. 65 mm tall, printable without support\n\n$fn = 36;\nwall = 1.6;          // standard nozzle-friendly wall\nbase_h = 6;          // pedestal height\ncore_h = 40;         // main skull height\nhorn_len = 18;       // horn length\nhorn_rad = 2.5;      // horn base radius\neye_rad = 4;         // eye socket radius\nnose_w = 6;          // nasal cavity width\n\nmodule skull_core() {\n    // main cranium\n    difference() {\n        scale([1, 0.8, 1.2])\n            sphere(d = core_h, center = true);\n        // flatten bottom so it sits flat\n        translate([0, 0, -core_h/2 - 0.1])\n            cube([core_h*2, core_h*2, core_h], center = true);\n    }\n}\n\nmodule nasal_cavity() {\n    // triangular nasal opening\n    hull() {\n        translate([-nose_w/2, -core_h/4, -core_h/6])\n            sphere(d = wall*2);\n        translate([nose_w/2, -core_h/4, -core_h/6])\n            sphere(d = wall*2);\n        translate([0, -core_h/4 - nose_w/2, -core_h/6 - nose_w/2])\n            sphere(d = wall*2);\n    }\n}\n\nmodule eye_socket(side = 1) {\n    translate([side * core_h/4, core_h/5, core_h/8])\n        rotate([0, 20, 0])\n            sphere(d = eye_rad * 2);\n}\n\nmodule horn(side = 1) {\n    // curved horn growing upward and forward\n    for(i = [0:5]) {\n        rotate([0, 0, side * 25])\n            rotate([0, i * 6, side * i * 3])\n                translate([side * core_h/3, 0, core_h/4 + i * horn_len/6])\n                    rotate([90 - i * 7, 0, 0])\n                        cylinder(h1 = horn_len/6, r1 = horn_rad * (1 - i/6), r2 = horn_rad * (1 - (i+1)/6));\n    }\n}\n\nmodule jaw() {\n    // lower jaw plate\n    difference() {\n        translate([0, -core_h/4, -core_h/3])\n            scale([1.1, 0.6, 0.4])\n                sphere(d = core_h * 0.9, center = true);\n        // cut teeth gaps\n        for(x = [-20:10:20]) {\n            translate([x, -core_h/3, -core_h/3 - 0.1])\n                cube([2, 10, 10], center = true);\n        }\n    }\n}\n\nmodule teeth() {\n    // simple rectangular teeth\n    for(x = [-20:10:20]) {\n        translate([x, -core_h/3 + 2, -core_h/3 - 1])\n            cube([3, 4, 6], center = true);\n    }\n}\n\nmodule pedestal() {\n    // wide stable base\n    difference() {\n        cylinder(h = base_h, r = core_h/2 + 5, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = base_h + 0.2, r = core_h/2 + 5 - wall, center = false);\n    }\n}\n\n// assembly\nunion() {\n    pedestal();\n    translate([0, 0, base_h])\n        difference() {\n            union() {\n                skull_core();\n                jaw();\n                teeth();\n            }\n            nasal_cavity();\n            eye_socket(1);\n            eye_socket(-1);\n        }\n    horn(1);\n    horn(-1);\n}",
    "renders": true
  },
  {
    "household_item": "deathscream",
    "openscad_code": "// Deathscream mask in realistic style – medium complexity\n// Outer dimensions ≈ 90 mm tall × 85 mm wide × 55 mm deep\n// Wall thickness ≈ 2 mm, printable without supports if oriented face-up\n\n$fn = 36;               // smooth curves\n\n// Overall mask shell\nmodule mask_shell(){\n    difference(){\n        // Main oval shell\n        scale([1, 1.15, 0.65])\n            sphere(d = 80);\n\n        // Hollow interior\n        scale([0.9, 0.9, 0.65])\n            sphere(d = 80);\n        \n        // Eye holes\n        translate([-20, 15, 5]) rotate([0, 10, 0])\n            scale([1, 1.4, 1]) cylinder(h = 30, d = 15);\n        mirror([1, 0, 0])\n            translate([-20, 15, 5]) rotate([0, 10, 0])\n                scale([1, 1.4, 1]) cylinder(h = 30, d = 15);\n\n        // Mouth opening\n        translate([0, -30, 0])\n            rotate([0, 0, 0])\n            scale([1.2, 0.6, 1])\n            cylinder(h = 40, d = 30);\n\n        // Back cut for face clearance\n        translate([0, 0, 25])\n            cube([100, 100, 50], center = true);\n    }\n}\n\n// Nasal ridge\nmodule nose_bridge(){\n    difference(){\n        translate([0, 0, 5])\n            scale([1.2, 0.7, 1])\n            sphere(d = 25);\n        translate([0, 0, -5])\n            cube([60, 60, 20], center = true);\n    }\n}\n\n// Brow ridges\nmodule brow_ridges(){\n    for(y = [15, 15], x = [-25, 25]){\n        translate([x, y, 8])\n            rotate([15, 0, 0])\n            scale([0.6, 2, 0.6])\n            cylinder(h = 10, d = 10);\n    }\n}\n\n// Cheek bones\nmodule cheek_bones(){\n    for(x = [-35, 35]){\n        translate([x, -5, -5])\n            rotate([0, -10, 0])\n            scale([1.5, 1.5, 1])\n            sphere(d = 15);\n    }\n}\n\n// Teeth band inside mouth\nmodule teeth_band(){\n    difference(){\n        translate([0, -30, -10])\n            rotate([0, 20, 0])\n            scale([1.1, 0.4, 0.5])\n            cube([35, 10, 5], center = true);\n        for(i = [-12:6:12]){\n            translate([i, -30, -8])\n                rotate([0, 20, 0])\n                cylinder(h = 8, d = 6);\n        }\n    }\n}\n\n// Chin detail\nmodule chin(){\n    translate([0, -40, -15])\n        rotate([0, 0, 0])\n        scale([0.8, 0.8, 0.5])\n        sphere(d = 30);\n}\n\n// Assembly\nunion(){\n    mask_shell();\n    nose_bridge();\n    brow_ridges();\n    cheek_bones();\n    chin();\n    teeth_band();\n}",
    "renders": true
  },
  {
    "household_item": "voidwraith",
    "openscad_code": "// Voidwraith - Realistic Style, Medium Complexity\n// Approx 80mm tall when printed\n\n$fn=50;\nscale_factor = 0.8;\n\n// Main body module\nmodule voidwraith_body() {\n    union() {\n        // Central torso core\n        color(\"darkslategray\")\n        translate([0,0,20])\n        scale([1,0.6,1.2])\n        sphere(r=15);\n        \n        // Lower torso extension\n        color(\"darkslategray\")\n        translate([0,0,5])\n        scale([0.8,0.5,1])\n        cylinder(h=20, r1=12, r2=8);\n    }\n}\n\n// Void energy core\nmodule energy_core() {\n    color(\"purple\", 0.7)\n    translate([0,0,25])\n    sphere(r=8);\n}\n\n// Arm segments\nmodule arm(side) {\n    // side: 1 for right, -1 for left\n    translate([side*20, 0, 35]) {\n        rotate([0, 0, side*-20]) {\n            // Upper arm\n            color(\"darkslategray\")\n            rotate([90, 0, 0])\n            cylinder(h=25, r=4);\n            \n            // Elbow joint\n            translate([0, 0, -25])\n            sphere(r=5);\n            \n            // Lower arm\n            translate([0, -5, -30])\n            rotate([90, side*15, 0])\n            scale([1, 0.8, 1])\n            cylinder(h=20, r=4);\n            \n            // Claw hand\n            translate([0, -8, -45])\n            rotate([0, 0, 0])\n            scale([1.2, 0.3, 0.8])\n            sphere(r=5);\n        }\n    }\n}\n\n// Leg segments\nmodule leg(side) {\n    // side: 1 for right, -1 for left\n    translate([side*10, 0, 0]) {\n        rotate([0, side*10, 0]) {\n            // Upper leg\n            color(\"darkslategray\")\n            cylinder(h=30, r=5);\n            \n            // Knee joint\n            translate([0, 0, -30])\n            sphere(r=6);\n            \n            // Lower leg\n            translate([0, 0, -40])\n            rotate([side*-15, 0, 0])\n            cylinder(h=25, r=5);\n            \n            // Foot\n            translate([0, 0, -55])\n            rotate([90, 0, 0])\n            scale([1.5, 0.8, 0.5])\n            cylinder(h=10, r=5);\n        }\n    }\n}\n\n// Back tendrils\nmodule tendrils() {\n    for(i=[-30:15:30]) {\n        color(\"darkslategray\", 0.8)\n        translate([0, -8, 35])\n        rotate([i, 180, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=20+abs(i/2), r=2);\n    }\n}\n\n// Head with void features\nmodule head() {\n    union() {\n        // Main head\n        color(\"darkslategray\")\n        translate([0, 0, 50])\n        scale([0.8, 0.6, 1])\n        sphere(r=12);\n        \n        // Eye sockets\n        difference() {\n            // Head base\n            color(\"darkslategray\")\n            translate([0, 0, 50])\n            scale([0.8, 0.6, 1])\n            sphere(r=12);\n            \n            // Left eye\n            translate([-6, -5, 52])\n            rotate([0, -20, 0])\n            scale([1, 1.2, 0.5])\n            cylinder(h=10, r=3);\n            \n            // Right eye\n            translate([6, -5, 52])\n            rotate([0, 20, 0])\n            scale([1, 1.2, 0.5])\n            cylinder(h=10, r=3);\n        }\n        \n        // Void energy in eyes\n        color(\"purple\", 0.8)\n        translate([-6, -8, 52])\n        sphere(r=2);\n        \n        color(\"purple\", 0.8)\n        translate([6, -8, 52])\n        sphere(r=2);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    voidwraith_body();\n    energy_core();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n    tendrils();\n    head();\n}",
    "renders": true
  },
  {
    "household_item": "cryptghoul",
    "openscad_code": "// Cryptghoul - realistic style, medium complexity\n// Height: 70mm\n\n// Body dimensions\nbody_h = 40;\nbody_w = 30;\nbody_d = 20;\n\n// Head dimensions\nhead_r = 12;\n\n// Limb dimensions\narm_l = 30;\narm_r = 5;\nleg_l = 35;\nleg_r = 6;\n\nmodule torso() {\n    // Main torso\n    difference() {\n        scale([1, 0.8, 1.2])\n            cube([body_w, body_d, body_h], center=true);\n        \n        // Ribcage indentations\n        for (i = [-1:1]) {\n            translate([i * 8, body_d/2 - 1, body_h/4])\n                cube([4, 2, 8], center=true);\n        }\n        \n        // Spine cavity\n        translate([0, body_d/2 - 1, -body_h/4])\n            cube([6, 2, 12], center=true);\n    }\n}\n\nmodule head() {\n    // Base skull shape\n    difference() {\n        sphere(r=head_r);\n        \n        // Eye sockets\n        for (x = [-6, 6]) {\n            translate([x, head_r/2, 4])\n                sphere(r=4);\n        }\n        \n        // Nose cavity\n        translate([0, head_r - 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=8, r1=3, r2=2, center=true);\n        \n        // Jaw gap\n        translate([0, head_r - 6, -8])\n            cube([12, 8, 6], center=true);\n    }\n    \n    // Jaw\n    translate([0, head_r - 8, -10])\n        rotate([10, 0, 0])\n            difference() {\n                cube([14, 8, 10], center=true);\n                translate([0, 2, 2])\n                    cube([12, 6, 8], center=true);\n            }\n}\n\nmodule arm(side) {\n    mirror([side, 0, 0]) {\n        // Upper arm\n        translate([body_w/2 + arm_r, 0, body_h/4])\n            rotate([0, 0, -20])\n                cylinder(h=arm_l/2, r=arm_r, center=true);\n        \n        // Forearm\n        translate([body_w/2 + arm_r + arm_l/2, 0, body_h/4 - 8])\n            rotate([0, 0, 20])\n                cylinder(h=arm_l/2, r=arm_r * 0.8, center=true);\n        \n        // Hand\n        translate([body_w/2 + arm_r + arm_l, 0, body_h/4 - 12])\n            scale([1.2, 0.6, 0.6])\n                sphere(r=arm_r);\n    }\n}\n\nmodule leg(side) {\n    mirror([side, 0, 0]) {\n        // Upper leg\n        translate([body_w/3, 0, -body_h/2 - leg_l/2])\n            cylinder(h=leg_l * 0.6, r=leg_r, center=true);\n        \n        // Lower leg\n        translate([body_w/3, 0, -body_h/2 - leg_l * 0.8])\n            cylinder(h=leg_l * 0.4, r=leg_r * 0.8, center=true);\n        \n        // Foot\n        translate([body_w/3, leg_r * 1.5, -body_h/2 - leg_l])\n            scale([1.2, 2, 0.6])\n                cube([leg_r * 2, leg_r * 3, leg_r * 1.5], center=true);\n    }\n}\n\nmodule cryptghoul() {\n    // Position all parts\n    union() {\n        // Torso\n        torso();\n        \n        // Head on neck\n        translate([0, 0, body_h/2 + head_r - 2])\n            head();\n        \n        // Arms\n        arm(1);\n        arm(-1);\n        \n        // Legs\n        leg(1);\n        leg(-1);\n        \n        // Spikes on spine\n        for (i = [-2:2]) {\n            translate([0, body_d/4, i * 6])\n                rotate([0, 20, 0])\n                    cylinder(h=8, r1=2, r2=0.5, center=true);\n        }\n    }\n}\n\n// Main assembly\ncryptghoul();",
    "renders": true
  },
  {
    "household_item": "shadowmourner",
    "openscad_code": "// Shadowmourner - realistic style, medium complexity\n// 3D printable model inspired by the legendary sword\n\n// Overall dimensions\nblade_length = 80;\nblade_width = 25;\nblade_thickness = 3;\nhandle_length = 30;\nguard_width = 40;\nguard_thickness = 8;\n\n// Base module for the sword\nmodule shadowmourner() {\n    union() {\n        // Main blade\n        blade();\n        \n        // Cross guard\n        cross_guard();\n        \n        // Handle\n        handle();\n        \n        // Pommel\n        pommel();\n        \n        // Skull detail on guard\n        skull_detail();\n    }\n}\n\n// Blade with rune details\nmodule blade() {\n    translate([0, 0, handle_length]) {\n        // Main blade body\n        difference() {\n            // Tapered blade shape\n            hull() {\n                translate([0, 0, blade_length/2]) \n                    cube([blade_width, blade_thickness, blade_length], center=true);\n                translate([0, 0, 0]) \n                    cube([blade_width*0.3, blade_thickness, blade_width*0.3], center=true);\n            }\n            \n            // Fuller groove\n            translate([0, blade_thickness/2 + 0.1, blade_length/2 - 5])\n                cube([blade_width*0.8, blade_thickness*0.5, blade_length*0.7], center=true);\n            \n            // Rune slots\n            for(i = [1:3]) {\n                translate([0, 0, i*20 + 10])\n                    rotate([0, 90, 0])\n                        cylinder(h=blade_thickness+0.2, r=3, $fn=6);\n            }\n        }\n        \n        // Serrated back edge\n        for(i = [0:5]) {\n            translate([-blade_width/2 - 2, 0, i*10 + 5])\n                cube([4, blade_thickness, 8]);\n        }\n    }\n}\n\n// Cross guard with skull mount\nmodule cross_guard() {\n    translate([0, 0, handle_length]) {\n        difference() {\n            // Main guard\n            cube([guard_width, guard_thickness, 15], center=true);\n            \n            // Blade slot\n            translate([0, 0, 7.5])\n                cube([blade_width+2, blade_thickness+2, 15], center=true);\n        }\n        \n        // End spikes\n        for(side = [-1, 1]) {\n            translate([side*guard_width/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=guard_thickness/2, r=guard_thickness/2, $fn=8);\n        }\n    }\n}\n\n// Handle with grip rings\nmodule handle() {\n    // Main handle\n    cylinder(h=handle_length, r=6, $fn=8);\n    \n    // Grip rings\n    for(i = [1:4]) {\n        translate([0, 0, i*6])\n            cylinder(h=2, r=7, $fn=8);\n    }\n}\n\n// Skull pommel\nmodule pommel() {\n    translate([0, 0, -5]) {\n        // Main skull shape\n        sphere(r=8, $fn=16);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([side*3, 5, 3])\n                sphere(r=2, $fn=8);\n        }\n        \n        // Jaw detail\n        translate([0, -2, -5])\n            cube([8, 4, 6], center=true);\n    }\n}\n\n// Skull detail on guard\nmodule skull_detail() {\n    translate([0, 0, handle_length + 8]) {\n        scale([0.5, 0.5, 0.5])\n            skull_pommel();\n    }\n}\n\n// Helper module for skull reuse\nmodule skull_pommel() {\n    // Main skull shape\n    sphere(r=8, $fn=16);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([side*3, 5, 3])\n            sphere(r=2, $fn=8);\n    }\n    \n    // Jaw detail\n    translate([0, -2, -5])\n        cube([8, 4, 6], center=true);\n}\n\n// Generate the model\nshadowmourner();",
    "renders": true
  },
  {
    "household_item": "cindershade",
    "openscad_code": "// Cindershade - medium complexity realistic style\n// 3D printable tea-light holder inspired by cinder block design\n\n$fn = 50;  // Smooth curves for printing\n\n// Overall dimensions\nshade_width = 75;\nshade_height = 65;\nshade_depth = 75;\nwall_thickness = 3;\n\n// Hollow module for repetitive voids\nmodule hollow_void(width, height, depth) {\n    difference() {\n        cube([width, height, depth]);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([width - 2*wall_thickness, height - 2*wall_thickness, depth]);\n    }\n}\n\n// Main block structure\nmodule cinder_block() {\n    difference() {\n        // Outer shell\n        cube([shade_width, shade_height, shade_depth]);\n        \n        // Central chamber for tea light\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([shade_width - 2*wall_thickness, shade_height - wall_thickness, shade_depth - 2*wall_thickness]);\n        \n        // Bottom opening for tea light insertion\n        translate([shade_width/2 - 22.5, -1, shade_depth/2 - 22.5])\n            cube([45, wall_thickness + 1, 45]);\n    }\n    \n    // Side hollow voids\n    for (x = [0, 1]) {\n        for (z = [0, 1]) {\n            translate([x * (shade_width - 28) + 14, 0, z * (shade_depth - 28) + 14])\n                hollow_void(14, shade_height, 14);\n        }\n    }\n    \n    // End hollow voids\n    for (y = [0, 1]) {\n        for (z = [0, 1]) {\n            translate([0, y * (shade_height - 28) + 14, z * (shade_depth - 28) + 14])\n                hollow_void(wall_thickness, 14, 14);\n            \n            translate([shade_width - wall_thickness, y * (shade_height - 28) + 14, z * (shade_depth - 28) + 14])\n                hollow_void(wall_thickness, 14, 14);\n        }\n    }\n    \n    // Web reinforcements\n    for (i = [0, 1, 2]) {\n        translate([shade_width/3 * i, 0, 0])\n            cube([wall_thickness, shade_height, shade_depth]);\n    }\n    \n    for (i = [0, 1, 2]) {\n        translate([0, 0, shade_depth/3 * i])\n            cube([shade_width, shade_height, wall_thickness]);\n    }\n    \n    // Rounded top edge for comfort\n    difference() {\n        translate([0, shade_height - 5, 0])\n            cube([shade_width, 5, shade_depth]);\n        \n        for (i = [0:shade_width/2]) {\n            translate([i*2, shade_height - 5, -1])\n                cylinder(h=shade_depth+2, r1=2.5, r2=2.5);\n        }\n    }\n}\n\n// Tea light support ledge\nmodule tea_light_support() {\n    translate([shade_width/2 - 20, wall_thickness, shade_depth/2 - 20])\n        difference() {\n            // Support ring\n            cylinder(h=3, r1=20, r2=20);\n            \n            // Center hole for tea light\n            cylinder(h=4, r1=16.5, r2=16.5);\n        }\n}\n\n// Assembly\ncinder_block();\ntea_light_support();",
    "renders": true
  },
  {
    "household_item": "sorrowwraith",
    "openscad_code": "// Sorrowwraith - Medium Complexity 3D Printable Model\n// A sorrowful humanoid figure wrapped in tattered robes\n\n$fn = 30;\n\n// Overall dimensions\nfigure_height = 80;\nbase_diameter = 25;\nrobe_thickness = 2;\n\nmodule base() {\n    union() {\n        // Circular base\n        cylinder(h=3, d1=base_diameter, d2=base_diameter);\n        \n        // Slight bevel\n        translate([0, 0, 3])\n            cylinder(h=1, d1=base_diameter, d2=base_diameter-2);\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main torso\n        translate([0, 0, 4])\n            cylinder(h=35, d1=8, d2=12);\n            \n        // Neck hole\n        translate([0, 0, 38])\n            cylinder(h=3, d=4);\n    }\n}\n\nmodule head() {\n    difference() {\n        // Skull-like head\n        translate([0, 0, 41])\n            sphere(d=8);\n            \n        // Eye sockets\n        translate([-2, 2.5, 43])\n            sphere(d=2);\n        translate([2, 2.5, 43])\n            sphere(d=2);\n            \n        // Mouth opening\n        translate([0, 3, 40])\n            cube([4, 2, 2], center=true);\n    }\n}\n\nmodule arm(side) {\n    mirror([side, 0, 0]) {\n        // Upper arm\n        translate([6, -2, 15])\n            rotate([0, 0, -20])\n            cylinder(h=15, d=3);\n            \n        // Lower arm\n        translate([9, -4, 8])\n            rotate([0, 0, -20])\n            rotate([0, 0, -30])\n            cylinder(h=12, d=2.5);\n            \n        // Hand\n        translate([11, -5, 4])\n            sphere(d=3);\n    }\n}\n\nmodule robe() {\n    // Main robe body\n    difference() {\n        // Hood\n        translate([0, 0, 45])\n            cylinder(h=20, d1=15, d2=12);\n            \n        // Face hole\n        translate([0, 0, 50])\n            cylinder(h=10, d=8);\n    }\n    \n    // Tattered robe bottom\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([0, 8, 20])\n                cube([3, robe_thickness, 15]);\n    }\n    \n    // Side drapes\n    translate([8, -3, 25])\n        cube([robe_thickness, 6, 20]);\n    translate([-8, -3, 25])\n        cube([robe_thickness, 6, 20]);\n}\n\nmodule sorrowwraith() {\n    union() {\n        base();\n        body();\n        head();\n        arm(1);\n        arm(-1);\n        robe();\n    }\n}\n\n// Render the sorrowwraith\nsorrowwraith();",
    "renders": true
  },
  {
    "household_item": "netherrot",
    "openscad_code": "// Netherrot - realistic style with medium complexity\n// A twisted fungal growth from the nether\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main parameters\nbase_size = 40;\nheight = 85;\nstem_d = 12;\ncap_thick = 3;\n\nmodule stem() {\n    // Twisted central stem with slight taper\n    for (i = [0:5]) {\n        rotate([0, 0, i * 15])\n        translate([0, 0, i * 14])\n        cylinder(h=15, d1=stem_d - i*1.2, d2=stem_d - (i+1)*1.2, $fn=8);\n    }\n}\n\nmodule gills() {\n    // Underside gill structure\n    difference() {\n        translate([0, 0, height - 25])\n        cylinder(h=cap_thick*2, d=base_size*1.8, $fn=6);\n        \n        // Cut gill slots\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([base_size*0.7, 0, height - 27])\n            cube([base_size*0.4, 2, cap_thick*4], center=true);\n        }\n    }\n}\n\nmodule cap_surface() {\n    // Twisted cap top with wavy edges\n    union() {\n        // Main cap dome\n        translate([0, 0, height - 20])\n        scale([1, 1, 0.6])\n        sphere(d=base_size*1.6);\n        \n        // Add warty growths\n        for (i = [0:7]) {\n            angle = i * 51.4;\n            dist = base_size * 0.6 + sin(i*2)*5;\n            translate([cos(angle)*dist, sin(angle)*dist, height - 10 + sin(i*3)*3])\n            sphere(d=6 + sin(i*4)*2);\n        }\n    }\n}\n\nmodule root_tendrils() {\n    // Base root system\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([base_size*0.3, 0, 0])\n        rotate([90 + sin(i*2)*20, 0, 0])\n        cylinder(h=15, d1=4, d2=2);\n    }\n}\n\nmodule cracks() {\n    // Surface cracks for realism\n    for (i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([base_size*0.3, 0, i*10])\n        scale([1, 0.3, 1])\n        cylinder(h=8, d=2, $fn=3);\n    }\n}\n\n// Build the netherrot\nunion() {\n    // Main stem structure\n    stem();\n    \n    // Cap assembly\n    difference() {\n        cap_surface();\n        // Hollow out cap\n        translate([0, 0, height - 15])\n        sphere(d=base_size*1.3);\n    }\n    \n    // Add gill structure\n    gills();\n    \n    // Root system\n    root_tendrils();\n    \n    // Surface details\n    cracks();\n}\n\n// Add base for 3D printing stability\ntranslate([0, 0, -2])\ncylinder(h=2, d=base_size*0.8, $fn=32);",
    "renders": true
  },
  {
    "household_item": "bloodspecter",
    "openscad_code": "// BloodSpecter - Realistic Style, Medium Complexity\n// Overall dimensions approx 80mm tall x 60mm wide x 40mm deep\n\n$fn = 64; // Smooth curves\n\nmodule bloodspecter_body() {\n    // Main torso - elongated humanoid chest cavity\n    difference() {\n        scale([1.2, 1, 1.5]) sphere(20); // Main torso sphere\n        // Hollow chest cavity\n        translate([0, 0, 5]) scale([0.7, 0.6, 0.8]) sphere(18);\n    }\n    \n    // Ribcage structure\n    for (i = [1:6]) {\n        rotate([0, 0, i * 30]) \n            translate([22, 0, 15 - i * 4]) \n                scale([0.3, 0.1, 1.2]) cylinder(h=8, r=3);\n    }\n}\n\nmodule bloodspecter_head() {\n    // Skull-like head\n    translate([0, 0, 35]) {\n        difference() {\n            scale([0.8, 0.7, 1.1]) sphere(15); // Main skull\n            \n            // Eye sockets\n            translate([-7, 8, 5]) sphere(4);\n            translate([7, 8, 5]) sphere(4);\n            \n            // Nasal cavity\n            translate([0, 6, 0]) scale([1, 0.5, 1]) sphere(3);\n        }\n        \n        // Jaw bone\n        translate([0, 5, -12]) \n            scale([0.7, 0.5, 0.4]) sphere(10);\n    }\n}\n\nmodule bloodspecter_arms() {\n    // Left arm\n    translate([-25, 0, 15]) {\n        rotate([0, 0, -45]) {\n            // Upper arm\n            scale([0.4, 0.4, 1.2]) cylinder(h=20, r=5);\n            \n            // Lower arm\n            translate([0, 0, -25]) {\n                rotate([0, 0, -30]) {\n                    scale([0.3, 0.3, 1.1]) cylinder(h=18, r=4);\n                    \n                    // Hand\n                    translate([0, 0, -20]) {\n                        scale([0.8, 0.3, 0.2]) sphere(6);\n                        \n                        // Claws\n                        for (i = [-2:2]) {\n                            translate([i * 2.5, 3, 0]) \n                                scale([0.3, 0.3, 2]) cylinder(h=6, r=1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right arm - mirrored\n    mirror([1, 0, 0]) translate([-25, 0, 15]) {\n        rotate([0, 0, -45]) {\n            scale([0.4, 0.4, 1.2]) cylinder(h=20, r=5);\n            \n            translate([0, 0, -25]) {\n                rotate([0, 0, -30]) {\n                    scale([0.3, 0.3, 1.1]) cylinder(h=18, r=4);\n                    \n                    translate([0, 0, -20]) {\n                        scale([0.8, 0.3, 0.2]) sphere(6);\n                        \n                        for (i = [-2:2]) {\n                            translate([i * 2.5, 3, 0]) \n                                scale([0.3, 0.3, 2]) cylinder(h=6, r=1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule bloodspecter_spine() {\n    // Spinal column\n    for (i = [1:8]) {\n        translate([0, 0, 15 - i * 6]) \n            scale([0.4, 0.3, 0.5]) sphere(4);\n    }\n}\n\nmodule bloodspecter_legs() {\n    // Left leg\n    translate([-8, 0, -25]) {\n        scale([0.5, 0.5, 1.5]) cylinder(h=25, r=5);\n        \n        // Foot\n        translate([0, 5, -15]) \n            scale([0.8, 1.5, 0.4]) sphere(6);\n    }\n    \n    // Right leg\n    translate([8, 0, -25]) {\n        scale([0.5, 0.5, 1.5]) cylinder(h=25, r=5);\n        \n        translate([0, 5, -15]) \n            scale([0.8, 1.5, 0.4]) sphere(6);\n    }\n}\n\nmodule bloodspecter_tattered_cloak() {\n    // Back cloak pieces\n    for (i = [1:5]) {\n        rotate([0, 0, i * 15 - 40]) \n            translate([-20 - i * 3, 0, 15 - i * 5]) \n                scale([0.2, 1, 2]) cube([5, 2, 25]);\n    }\n    \n    for (i = [1:5]) {\n        rotate([0, 0, -i * 15 + 40]) \n            translate([20 + i * 3, 0, 15 - i * 5]) \n                scale([0.2, 1, 2]) cube([5, 2, 25]);\n    }\n}\n\n// Assemble the BloodSpecter\nunion() {\n    bloodspecter_body();\n    bloodspecter_head();\n    bloodspecter_arms();\n    bloodspecter_spine();\n    bloodspecter_legs();\n    bloodspecter_tattered_cloak();\n}",
    "renders": true
  },
  {
    "household_item": "darkshade",
    "openscad_code": "// Darkshade (camera lens shade) - realistic style, medium complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Overall dimensions\nshade_outer_dia = 60;      // Outer diameter at front\nshade_inner_dia = 52;      // Inner diameter at rear\nshade_length = 45;         // Total length\nwall_thickness = 2;        // Wall thickness for 3D printing\nthread_diameter = 48;      // Filter thread diameter\nthread_pitch = 0.75;       // Standard filter thread pitch\ngroove_depth = 1.5;        // Groove depth for internal threads\n\n// Create the main shade body\nmodule shade_body() {\n    difference() {\n        // Outer conical shape\n        cylinder(h = shade_length, d1 = shade_inner_dia + wall_thickness * 2, d2 = shade_outer_dia, center = false);\n        \n        // Inner conical hollow\n        translate([0, 0, -0.1])\n            cylinder(h = shade_length + 0.2, d1 = shade_inner_dia, d2 = shade_outer_dia - wall_thickness * 2, center = false);\n    }\n}\n\n// Create internal filter threads\nmodule internal_threads() {\n    // Thread base cylinder\n    cylinder(h = 8, d = thread_diameter + groove_depth * 2, center = false);\n    \n    // Cut thread grooves\n    for (i = [0:359]) {\n        rotate([0, 0, i])\n            translate([thread_diameter/2 + groove_depth/2, 0, 0])\n                rotate([0, 90, 0])\n                    cube([groove_depth, 0.5, 8], center = true);\n    }\n}\n\n// Create grip texture on outer surface\nmodule grip_texture() {\n    // Raised ridges for grip\n    for (z = [5:5:shade_length-10]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 2, d = shade_outer_dia + 1, center = false);\n                cylinder(h = 2.2, d = shade_outer_dia - 0.5, center = false);\n            }\n    }\n}\n\n// Create front bevel edge\nmodule front_bevel() {\n    difference() {\n        cylinder(h = 3, d = shade_outer_dia, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = 3.2, d = shade_outer_dia - 3, center = false);\n    }\n}\n\n// Create rear mounting lip\nmodule rear_mount() {\n    difference() {\n        // Mounting flange\n        cylinder(h = 4, d = shade_inner_dia + wall_thickness * 4, center = false);\n        \n        // Center hole\n        translate([0, 0, -0.1])\n            cylinder(h = 4.2, d = shade_inner_dia, center = false);\n        \n        // Notch for alignment\n        translate([shade_inner_dia/2 + 2, 0, 2])\n            cube([4, 2, 4], center = true);\n    }\n}\n\n// Assemble all components\ntranslate([0, 0, 4])  // Position rear mount at origin\n    union() {\n        // Main shade body\n        shade_body();\n        \n        // Internal threads at rear\n        translate([0, 0, -0.1])\n            internal_threads();\n        \n        // Grip texture\n        grip_texture();\n        \n        // Front bevel edge\n        translate([0, 0, shade_length - 3])\n            front_bevel();\n        \n        // Rear mounting lip\n        translate([0, 0, -4])\n            rear_mount();\n    }",
    "renders": true
  },
  {
    "household_item": "skullwraith",
    "openscad_code": "// Skullwraith - Realistic Style, Medium Complexity\n// 3D printable, ~70mm tall, wall thickness 2mm\n\n$fn = 32;\n\nmodule skull_base() {\n    // Main skull\n    difference() {\n        sphere(d = 35);\n        // Eye sockets\n        translate([10, 12, 5]) sphere(d = 12);\n        translate([-10, 12, 5]) sphere(d = 12);\n        // Nose cavity\n        translate([0, 0, -5]) scale([1, 1.2, 1]) sphere(d = 10);\n    }\n}\n\nmodule jaw() {\n    // Lower jaw\n    difference() {\n        union() {\n            // Jaw base\n            translate([0, -15, -20]) scale([1.2, 1, 1]) sphere(d = 25);\n            // Teeth holder\n            translate([0, -15, -15]) cube([25, 8, 10], center = true);\n        }\n        // Mouth cavity\n        translate([0, -15, -12]) cube([20, 12, 8], center = true);\n    }\n    \n    // Teeth\n    for(i = [-8:4:8]) {\n        translate([i, -15, -10]) cylinder(h = 6, d = 3);\n    }\n}\n\nmodule horns() {\n    // Left horn\n    translate([-15, 15, 10]) {\n        rotate([0, 30, -20]) {\n            cylinder(h = 20, d1 = 8, d2 = 4);\n            translate([0, 0, 20]) sphere(d = 5);\n        }\n    }\n    \n    // Right horn\n    translate([15, 15, 10]) {\n        rotate([0, 30, 20]) {\n            cylinder(h = 20, d1 = 8, d2 = 4);\n            translate([0, 0, 20]) sphere(d = 5);\n        }\n    }\n}\n\nmodule ethereal_flame() {\n    // Flame base\n    translate([0, 0, -25]) {\n        difference() {\n            cylinder(h = 15, d = 20);\n            cylinder(h = 16, d = 16);\n        }\n        \n        // Flame wisps\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([0, 8, -5]) {\n                    rotate([30, 0, 0]) {\n                        scale([0.7, 0.7, 1.5]) sphere(d = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule neck_spike() {\n    // Spinal column\n    for(i = [0:5:20]) {\n        translate([0, -20 + i, -25 - i/2]) {\n            rotate([0, 10, 0]) {\n                cylinder(h = 6, d = 8 - i/5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Core structure\n    union() {\n        skull_base();\n        jaw();\n    }\n    \n    // Horns\n    horns();\n    \n    // Ethereal elements\n    ethereal_flame();\n    neck_spike();\n    \n    // Eye glow\n    translate([10, 12, 5]) sphere(d = 6);\n    translate([-10, 12, 5]) sphere(d = 6);\n}",
    "renders": true
  },
  {
    "household_item": "gravebane",
    "openscad_code": "// Gravebane (realistic style, medium complexity)\n// A medieval weapon combining a war pick and hammer head on a reinforced shaft\n// Dimensions optimized for 3D printing: ~85mm total length\n\n// Parameters\nhandle_length = 65;\nhandle_diameter = 8;\nhead_width = 28;\nhead_thickness = 12;\npick_length = 35;\nhammer_width = 18;\nhammer_thickness = 10;\nspike_length = 8;\n\n// Handle with grip rings\nmodule handle() {\n    difference() {\n        // Main handle\n        cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        \n        // Grip rings\n        for(i = [1:8]) {\n            translate([0, 0, i * 7])\n                cylinder(h = 1.5, d1 = handle_diameter + 2, d2 = handle_diameter, $fn = 32);\n        }\n        \n        // Hollow for material saving\n        translate([0, 0, -1])\n            cylinder(h = handle_length + 2, d = handle_diameter - 4, $fn = 32);\n    }\n}\n\n// Reinforcement collar\nmodule collar() {\n    difference() {\n        cylinder(h = 8, d = 16, $fn = 32);\n        translate([0, 0, -1])\n            cylinder(h = 10, d = handle_diameter + 1, $fn = 32);\n    }\n}\n\n// Pick head\nmodule pick_head() {\n    union() {\n        // Main head block\n        translate([-head_width/2, -head_thickness/2, 0])\n            cube([head_width, head_thickness, head_width/2]);\n        \n        // Pick spike\n        rotate([0, -30, 0])\n            translate([0, 0, head_width/4])\n                cylinder(h = pick_length, d1 = 8, d2 = 2, $fn = 16);\n        \n        // Back spike\n        rotate([0, 90, 0])\n            translate([0, 0, -head_width/4])\n                cylinder(h = spike_length, d = 4, $fn = 16);\n    }\n}\n\n// Hammer head\nmodule hammer_head() {\n    difference() {\n        // Main hammer\n        translate([-hammer_width/2, -hammer_thickness/2, 0])\n            cube([hammer_width, hammer_thickness, hammer_width * 0.8]);\n        \n        // Tapered faces\n        translate([-hammer_width/2 - 1, -hammer_thickness/2 - 1, 0])\n            cube([2, hammer_thickness + 2, hammer_width * 0.8]);\n        \n        translate([hammer_width/2 - 1, -hammer_thickness/2 - 1, 0])\n            cube([2, hammer_thickness + 2, hammer_width * 0.8]);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Collar at top of handle\n    translate([0, 0, handle_length])\n        collar();\n    \n    // Main weapon head\n    translate([0, 0, handle_length + 8])\n        rotate([0, 90, 0])\n            union() {\n                pick_head();\n                \n                // Hammer perpendicular to pick\n                rotate([0, 0, 90])\n                    translate([0, 0, head_thickness/2 + hammer_thickness/2])\n                        hammer_head();\n            };\n}",
    "renders": true
  },
  {
    "household_item": "soulrotter",
    "openscad_code": "// Soulrotter - Medium complexity realistic style\n// Designed for 3D printing with no overhangs\n\n$fn = 36;  // Smooth curves for realism\nwall_thickness = 2;\n\n// Main module\nmodule soulrotter() {\n    // Base body\n    body();\n    \n    // Legs\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) \n            translate([0, 15, -5])\n            leg();\n    }\n    \n    // Head\n    translate([0, 25, 12]) head();\n    \n    // Tail segments\n    for (i = [1:4]) {\n        translate([0, -20 - i*8, 10 - i*2])\n            rotate([0, 5*i, 0])\n            tail_segment();\n    }\n}\n\n// Main body with realistic segmentation\nmodule body() {\n    difference() {\n        // Main body shell\n        hull() {\n            translate([0, 0, 0]) sphere(d = 30);\n            translate([0, 15, 5]) sphere(d = 25);\n            translate([0, -15, 5]) sphere(d = 20);\n        }\n        \n        // Hollow out\n        translate([0, 0, 0]) \n            scale([0.8, 0.8, 0.7]) \n            sphere(d = 30);\n    }\n    \n    // Segmentation rings\n    for (i = [0:3]) {\n        translate([0, -5 + i*10, 5])\n            difference() {\n                cylinder(h = 2, d = 25 + i*2);\n                translate([0, 0, -1]) \n                    cylinder(h = 4, d = 23 + i*2);\n            }\n    }\n}\n\n// Realistic leg with joints\nmodule leg() {\n    // Upper leg\n    cylinder(h = 12, d = 5);\n    \n    // Joint\n    translate([0, 0, 12]) sphere(d = 4);\n    \n    // Lower leg\n    translate([0, 0, 14])\n        rotate([15, 0, 0])\n        cylinder(h = 10, d = 3.5);\n    \n    // Foot\n    translate([0, 0, 24])\n        rotate([15, 0, 0])\n        cylinder(h = 3, d1 = 3, d2 = 5);\n}\n\n// Realistic head with mandibles\nmodule head() {\n    // Main head\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(d = 16);\n            translate([0, 8, 0]) sphere(d = 12);\n        }\n        \n        // Hollow\n        translate([0, 2, 0]) \n            scale([0.7, 0.7, 0.6]) \n            sphere(d = 16);\n    }\n    \n    // Eyes\n    for (x = [-4, 4]) {\n        translate([x, 4, 3])\n            difference() {\n                sphere(d = 3);\n                translate([0, 0, 1])\n                    sphere(d = 1.5);\n            }\n    }\n    \n    // Mandibles\n    translate([0, 8, -2]) {\n        difference() {\n            hull() {\n                translate([-3, 0, 0]) cylinder(h = 8, d = 2);\n                translate([3, 0, 0]) cylinder(h = 8, d = 2);\n                translate([0, 4, 0]) sphere(d = 3);\n            }\n            \n            // Hollow mandibles\n            translate([0, 2, 0])\n                scale([0.7, 0.7, 0.7])\n                hull() {\n                    translate([-2, 0, 0]) cylinder(h = 8, d = 1.5);\n                    translate([2, 0, 0]) cylinder(h = 8, d = 1.5);\n                    translate([0, 3, 0]) sphere(d = 2);\n                }\n        }\n    }\n}\n\n// Tail segments for realism\nmodule tail_segment() {\n    difference() {\n        // Segment body\n        scale([1, 0.8, 0.6]) sphere(d = 12);\n        \n        // Hollow\n        scale([0.7, 0.7, 0.7])\n        scale([1, 0.8, 0.6]) sphere(d = 12);\n    }\n    \n    // Connection ridge\n    translate([0, 0, -3])\n        cylinder(h = 1.5, d = 8);\n}\n\n// Generate the model\nsoulrotter();",
    "renders": true
  },
  {
    "household_item": "ashgeist",
    "openscad_code": "// Ashgeist - Realistic style, medium complexity\n// Approx 70mm tall ghostly figure with base\n\n// Parameters\n$fn = 32;\nbody_height = 60;\nbase_diameter = 35;\nbase_height = 8;\nhead_diameter = 18;\nneck_height = 8;\narm_length = 25;\narm_thickness = 6;\nflow_thickness = 2;\nwall_thickness = 1.6;\n\n// Main module\nmodule ashgeist() {\n    union() {\n        // Base\n        translate([0, 0, base_height/2])\n            cylinder(h=base_height, d1=base_diameter, d2=base_diameter*0.9, center=true);\n        \n        // Neck\n        translate([0, 0, base_height + neck_height/2])\n            cylinder(h=neck_height, d1=6, d2=10, center=true);\n        \n        // Head - hollow sphere\n        difference() {\n            translate([0, 0, base_height + neck_height + head_diameter/2])\n                sphere(d=head_diameter);\n            \n            // Hollow out head\n            translate([0, 0, base_height + neck_height + head_diameter/2 + wall_thickness])\n                sphere(d=head_diameter - wall_thickness*2);\n            \n            // Face hole\n            translate([0, head_diameter/2 - 2, base_height + neck_height + head_diameter/2])\n                cube([8, 4, 6], center=true);\n        }\n        \n        // Flowing body segments\n        for (i = [0:3]) {\n            segment_height = (body_height - head_diameter - neck_height) / 4;\n            y_offset = -i * 5;\n            x_wobble = sin(i*30) * 8;\n            \n            translate([x_wobble, y_offset, base_height + neck_height + head_diameter + segment_height/2 + i*segment_height])\n                difference() {\n                    cylinder(h=segment_height, d1=30 - i*4, d2=32 - i*5, center=true);\n                    cylinder(h=segment_height + 2, d1=30 - i*4 - flow_thickness*2, d2=32 - i*5 - flow_thickness*2, center=true);\n                }\n        }\n        \n        // Arms\n        module arm(side) {\n            mirror([side, 0, 0]) {\n                translate([8, -5, base_height + neck_height + head_diameter/2]) {\n                    rotate([0, 0, 45]) {\n                        // Upper arm\n                        difference() {\n                            cylinder(h=arm_length/2, d=arm_thickness, center=true);\n                            cylinder(h=arm_length/2 + 2, d=arm_thickness - wall_thickness*2, center=true);\n                        }\n                        \n                        // Lower arm flowing down\n                        translate([arm_length/4, -arm_length/3, -arm_length/4])\n                            rotate([30, 0, 0])\n                            difference() {\n                                cylinder(h=arm_length/2, d=arm_thickness*0.8, center=true);\n                                cylinder(h=arm_length/2 + 2, d=arm_thickness*0.8 - wall_thickness*2, center=true);\n                            }\n                    }\n                }\n            }\n        }\n        \n        arm(1);\n        arm(-1);\n        \n        // Wispy tendrils at bottom\n        for (i = [0:4]) {\n            angle = i * 72;\n            length = 8 + (i % 2) * 4;\n            \n            rotate([0, 0, angle])\n                translate([12 + sin(i*45)*3, 0, base_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(h=length, d1=3, d2=1, center=true);\n        }\n    }\n}\n\n// Generate the model\nashgeist();",
    "renders": true
  },
  {
    "household_item": "gloomshade",
    "openscad_code": "// Gloomshade - Realistic Style, Medium Complexity\n// A wearable fantasy shade that blocks light and provides a menacing presence\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Overall dimensions\nshade_diameter = 60;\nshade_height = 45;\nwall_thickness = 2;\n\nmodule main_shade() {\n    // Main dome structure with realistic curvature\n    difference() {\n        // Outer dome\n        scale([1, 1, 0.8])\n        sphere(d = shade_diameter);\n        \n        // Inner cavity for head\n        translate([0, 0, -wall_thickness])\n        scale([1, 1, 0.75])\n        sphere(d = shade_diameter - 2*wall_thickness);\n        \n        // Flat bottom opening for head entry\n        translate([0, 0, -shade_height/2])\n        cylinder(h = wall_thickness*2, d = shade_diameter - 10);\n    }\n}\n\nmodule eye_visor() {\n    // Angled visor pieces for realistic eye coverage\n    for(side = [-1, 1]) {\n        translate([side * shade_diameter/4, 0, -shade_height/4])\n        rotate([0, side * 20, 0])\n        difference() {\n            // Outer visor\n            cube([shade_diameter/6, shade_diameter/3, wall_thickness*2], center = true);\n            \n            // Inner cutout for eye\n            translate([0, 0, -wall_thickness-0.1])\n            cube([shade_diameter/8, shade_diameter/4, wall_thickness*3], center = true);\n        }\n    }\n}\n\nmodule ventilation_slits() {\n    // Realistic ventilation with angled slits\n    for(i = [1:3]) {\n        rotate([0, 0, i*120])\n        translate([0, shade_diameter/2 - wall_thickness, -shade_height/3])\n        rotate([90, 0, 0])\n        difference() {\n            // Outer vent housing\n            cylinder(h = wall_thickness*3, d = 8, center = true);\n            \n            // Angled slit\n            translate([0, 0, -wall_thickness-0.1])\n            rotate([0, 15, 0])\n            cube([6, 1, wall_thickness*3], center = true);\n        }\n    }\n}\n\nmodule forehead_spikes() {\n    // Realistic but wearable spike details\n    for(i = [1:5]) {\n        angle = i * 72;\n        radius = shade_diameter/2 - wall_thickness;\n        \n        translate([\n            cos(angle) * radius * 0.8,\n            sin(angle) * radius * 0.8,\n            shade_height/4\n        ])\n        rotate([90, 0, angle])\n        cylinder(h = 8, d1 = 4, d2 = 2);\n    }\n}\n\nmodule inner_padding() {\n    // Comfortable inner padding ridge\n    translate([0, 0, -shade_height/3])\n    difference() {\n        cylinder(h = 5, d = shade_diameter - 15);\n        cylinder(h = 5.1, d = shade_diameter - 20);\n    }\n}\n\nmodule strap_mounts() {\n    // Realistic mounting points for straps\n    for(side = [-1, 1]) {\n        translate([side * (shade_diameter/2 - wall_thickness), 0, -shade_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = wall_thickness*2, d = 6);\n        \n        // Mounting hole\n        translate([side * (shade_diameter/2 - wall_thickness), 0, -shade_height/2])\n        rotate([0, 90, 0])\n        cylinder(h = wall_thickness*3, d = 3);\n    }\n}\n\n// Assemble all components\nunion() {\n    main_shade();\n    eye_visor();\n    ventilation_slits();\n    forehead_spikes();\n    inner_padding();\n    strap_mounts();\n}",
    "renders": true
  },
  {
    "household_item": "fleshwraith",
    "openscad_code": "// Fleshwraith - Medium Complexity Realistic Style\n// 3D printable at ~75mm height\n\n$fn = 36;\nwall = 1.2;\n\nmodule torso() {\n    difference() {\n        // Main torso body\n        scale([1, 0.7, 1.4])\n        sphere(d = 35);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n        scale([0.8, 0.5, 1.2])\n        sphere(d = 32);\n        \n        // Neck hole\n        translate([0, 0, 20])\n        cylinder(h = 10, d1 = 12, d2 = 15);\n    }\n}\n\nmodule spine() {\n    for(i = [0:5]) {\n        translate([0, 0, 15 - i * 4])\n        rotate([0, 0, i * 15])\n        scale([1 - i * 0.1, 0.4 - i * 0.05, 0.6])\n        sphere(d = 8);\n    }\n}\n\nmodule arm(side = 1) {\n    translate([side * 15, 0, 15]) {\n        rotate([0, 0, side * -20]) {\n            // Upper arm\n            rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 8, d2 = 6);\n            \n            // Lower arm\n            translate([0, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h = 18, d1 = 6, d2 = 5);\n            \n            // Hand\n            translate([0, side * 15, 18])\n            scale([1.5, 0.3, 2.5])\n            sphere(d = 6);\n            \n            // Claws\n            for(j = [0:3]) {\n                translate([0, side * (18 + j * 2), 18])\n                rotate([0, side * -30, 0])\n                cylinder(h = 8, d1 = 1.5, d2 = 0.5);\n            }\n        }\n    }\n}\n\nmodule leg(side = 1) {\n    translate([side * 8, 0, -25]) {\n        rotate([0, 0, side * 10]) {\n            // Thigh\n            rotate([90, 0, 0])\n            cylinder(h = 22, d1 = 10, d2 = 8);\n            \n            // Shin\n            translate([0, 0, 22])\n            rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 8, d2 = 6);\n            \n            // Foot\n            translate([0, 0, 42])\n            scale([1.8, 2.2, 0.8])\n            sphere(d = 10);\n        }\n    }\n}\n\nmodule head() {\n    translate([0, 0, 30]) {\n        difference() {\n            // Skull base\n            scale([0.8, 0.7, 1])\n            sphere(d = 20);\n            \n            // Eye sockets\n            for(x = [-1, 1]) {\n                translate([x * 5, 4, 3])\n                sphere(d = 6);\n            }\n            \n            // Mouth cavity\n            translate([0, 7, -2])\n            rotate([15, 0, 0])\n            cube([10, 8, 6], center = true);\n            \n            // Hollow interior\n            scale([0.6, 0.5, 0.8])\n            sphere(d = 18);\n        }\n        \n        // Jaw\n        translate([0, 6, -6])\n        rotate([10, 0, 0])\n        scale([0.7, 0.5, 0.4])\n        sphere(d = 15);\n    }\n}\n\nmodule ribs() {\n    for(i = [0:7]) {\n        translate([0, 0, 10 - i * 3])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 25 + i * 2, d = 20 - i);\n            cylinder(h = 25 + i * 2 + 2, d = 20 - i - wall * 2);\n        }\n    }\n}\n\nmodule fleshwraith() {\n    union() {\n        torso();\n        spine();\n        ribs();\n        head();\n        \n        // Arms\n        arm(1);\n        arm(-1);\n        \n        // Legs\n        leg(1);\n        leg(-1);\n        \n        // Extra tendrils\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([12, 0, 5 - i])\n            rotate([i * 5, 0, 0])\n            cylinder(h = 15 + i, d1 = 3 - i * 0.3, d2 = 2 - i * 0.2);\n        }\n    }\n}\n\n// Generate the model\nfleshwraith();",
    "renders": true
  },
  {
    "household_item": "bonerot",
    "openscad_code": "// Bone rot (bone erosion / damage) model - medium complexity realistic style\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n// Overall dimensions\ntotal_length = 80;\nbone_diameter = 15;\nwall_thickness = 2;\n\n// Create basic bone shaft\nmodule bone_shaft() {\n    difference() {\n        // Main shaft cylinder\n        cylinder(h=total_length, d=bone_diameter, $fn=32);\n        \n        // Hollow center for printing\n        translate([0, 0, -1])\n            cylinder(h=total_length+2, d=bone_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Create bone ends (epiphysis)\nmodule bone_ends() {\n    union() {\n        // Top end\n        translate([0, 0, total_length/2])\n            sphere(d=bone_diameter*1.5, $fn=32);\n        \n        // Bottom end\n        translate([0, 0, -total_length/2])\n            sphere(d=bone_diameter*1.5, $fn=32);\n    }\n}\n\n// Generate random cavity for bone rot\nmodule cavity(x, y, z, size) {\n    translate([x, y, z])\n        sphere(d=size, $fn=16);\n}\n\n// Create realistic bone surface texture\nmodule bone_texture() {\n    difference() {\n        union() {\n            bone_shaft();\n            bone_ends();\n        }\n        \n        // Multiple cavities for bone rot damage\n        cavity(3, 2, 10, 6);\n        cavity(-4, -1, 15, 4);\n        cavity(2, -3, 20, 5);\n        cavity(-2, 1, 25, 3);\n        cavity(4, 0, 30, 7);\n        cavity(-3, 3, 35, 4);\n        cavity(1, -2, 40, 5);\n        cavity(-1, 2, 45, 3);\n        \n        // Larger central cavity\n        translate([0, 0, 25])\n            sphere(d=12, $fn=32);\n            \n        // Surface pitting\n        for (i = [0:20]) {\n            rotate([0, 0, i*18])\n                translate([bone_diameter/2-1, 0, i*3.5])\n                    sphere(d=2, $fn=8);\n        }\n    }\n}\n\n// Main model assembly\nbone_texture();",
    "renders": true
  },
  {
    "household_item": "deathwight",
    "openscad_code": "// Deathwight - Medium complexity realistic style\n// 3D printable at ~75mm height\n\n// Overall scale\nscale_factor = 0.7;\n\n// Main module\nmodule deathwight() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Head with hood\n        translate([0, 0, 75]) {\n            // Hood base\n            difference() {\n                cylinder(h = 25, r1 = 18, r2 = 15, $fn = 32);\n                translate([0, 0, 2]) cylinder(h = 25, r1 = 16, r2 = 13, $fn = 32);\n            }\n            \n            // Skull inside hood\n            translate([0, 0, 5]) {\n                // Cranium\n                sphere(r = 12, $fn = 32);\n                \n                // Eye sockets\n                translate([-5, 4, 2]) sphere(r = 4, $fn = 16);\n                translate([5, 4, 2]) sphere(r = 4, $fn = 16);\n                \n                // Nasal cavity\n                translate([0, 0, -2]) cube([4, 3, 6], center = true);\n                \n                // Jaw\n                translate([0, 8, -8]) {\n                    difference() {\n                        cube([14, 10, 12], center = true);\n                        translate([0, 0, 2]) cube([12, 8, 12], center = true);\n                    }\n                }\n                \n                // Teeth\n                for(i = [-4:2:4]) {\n                    translate([i, 10, -8]) cube([1.5, 2, 4], center = true);\n                }\n            }\n        }\n        \n        // Spine\n        for(i = [0:5:30]) {\n            translate([0, 0, 45 - i]) {\n                cylinder(h = 4, r = 3 + i/20, $fn = 12);\n            }\n        }\n        \n        // Ribcage\n        module rib(angle, offset) {\n            rotate([angle, 0, 0]) {\n                translate([0, offset, 40 - abs(offset)/4]) {\n                    scale([0.3, 1, 1]) sphere(r = 8, $fn = 16);\n                }\n            }\n        }\n        \n        for(side = [-1, 1]) {\n            for(angle = [20:15:80]) {\n                rib(angle * side, 12 * side);\n            }\n        }\n        \n        // Arms\n        module arm(side) {\n            translate([side * 15, 0, 55]) {\n                // Shoulder\n                sphere(r = 6, $fn = 16);\n                \n                // Upper arm\n                translate([side * 8, 0, -10]) {\n                    rotate([0, 0, side * -15]) {\n                        cylinder(h = 20, r1 = 5, r2 = 4, $fn = 12);\n                        \n                        // Elbow\n                        translate([0, 0, -20]) sphere(r = 4, $fn = 12);\n                        \n                        // Forearm\n                        translate([0, 0, -25]) {\n                            rotate([0, 0, side * -20]) {\n                                cylinder(h = 18, r1 = 4, r2 = 3, $fn = 12);\n                                \n                                // Hand\n                                translate([0, 0, -18]) {\n                                    sphere(r = 3, $fn = 12);\n                                    \n                                    // Fingers\n                                    for(f = [-1, 0, 1]) {\n                                        translate([side * f * 2, 0, -4]) {\n                                            cylinder(h = 5, r = 0.8, $fn = 8);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        arm(1);\n        arm(-1);\n        \n        // Pelvis\n        translate([0, 0, 25]) {\n            difference() {\n                sphere(r = 10, $fn = 32);\n                translate([0, 0, -5]) cube([20, 15, 10], center = true);\n            }\n        }\n        \n        // Legs\n        module leg(side) {\n            translate([side * 6, 0, 15]) {\n                // Thigh\n                cylinder(h = 20, r1 = 5, r2 = 4, $fn = 12);\n                \n                // Knee\n                translate([0, 0, -20]) sphere(r = 4, $fn = 12);\n                \n                // Shin\n                translate([0, 0, -35]) {\n                    cylinder(h = 18, r1 = 4, r2 = 3, $fn = 12);\n                    \n                    // Foot\n                    translate([side * 2, 0, -18]) {\n                        cube([10, 5, 3], center = true);\n                    }\n                }\n            }\n        }\n        \n        leg(1);\n        leg(-1);\n        \n        // Tattered robe\n        translate([0, 0, 40]) {\n            difference() {\n                cylinder(h = 40, r1 = 20, r2 = 25, $fn = 32);\n                \n                // Tears and holes\n                for(i = [0:30:330]) {\n                    rotate([0, 0, i]) {\n                        translate([22, 0, 20]) {\n                            cube([8, 3, 15], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ndeathwight();",
    "renders": true
  },
  {
    "household_item": "blightgeist",
    "openscad_code": "// Blightgeist - Realistic Style, Medium Complexity\n// A corrupted spirit entity with fungal growths and decay\n\nbase_scale = 1; // Master scale factor\ntotal_height = 70 * base_scale;\n\n// Main body module\nmodule blightgeist() {\n    // Central core - twisted humanoid torso\n    color(\"darkolivegreen\")\n    translate([0, 0, 15])\n    rotate([0, 0, -15])\n    scale([1.2, 0.8, 1.5])\n    sphere(12, $fn=32);\n    \n    // Lower torso decay\n    color(\"forestgreen\")\n    translate([0, 0, 5])\n    rotate([0, 0, 10])\n    scale([1.3, 1.1, 0.8])\n    cylinder(h=10, r1=10, r2=8, $fn=32);\n    \n    // Head - elongated skull\n    color(\"darkslategray\")\n    translate([0, 0, 40])\n    rotate([0, 0, 5])\n    scale([0.8, 0.6, 1.4])\n    sphere(10, $fn=32);\n    \n    // Jaw/mandible\n    color(\"dimgray\")\n    translate([0, -5, 33])\n    rotate([20, 0, 0])\n    scale([0.6, 0.4, 0.8])\n    cube([8, 4, 10], center=true);\n    \n    // Arms - spindly and corrupted\n    for(side = [-1, 1]) {\n        // Upper arm\n        color(\"darkgreen\")\n        translate([side * 15, 0, 30])\n        rotate([0, side * 20, 0])\n        cylinder(h=18, r=3, $fn=16);\n        \n        // Lower arm\n        color(\"olivedrab\")\n        translate([side * 22, 0, 20])\n        rotate([0, side * 30, 0])\n        cylinder(h=20, r=2.5, $fn=16);\n        \n        // Clawed hand\n        color(\"darkslategray\")\n        translate([side * 25, 0, 12])\n        rotate([0, side * 45, 0])\n        scale([0.5, 0.3, 1.5])\n        sphere(4, $fn=16);\n    }\n    \n    // Legs - rooted/decayed\n    for(side = [-1, 1]) {\n        color(\"darkgreen\")\n        translate([side * 8, 0, 0])\n        rotate([0, side * 10, 0])\n        cylinder(h=15, r=4, $fn=16);\n        \n        // Root-like feet\n        color(\"sienna\")\n        translate([side * 10, 0, -8])\n        scale([0.8, 1.2, 0.5])\n        sphere(6, $fn=16);\n    }\n    \n    // Fungal growths - mushroom caps\n    for(i = [0:5]) {\n        angle = i * 60;\n        radius = 8 + sin(i * 30) * 3;\n        height = 5 + cos(i * 45) * 2;\n        \n        color(\"darkolivegreen\")\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            25 + height\n        ])\n        rotate([0, 0, angle])\n        scale([1.2, 1, 0.6])\n        sphere(3 + sin(i * 25) * 1.5, $fn=16);\n        \n        // Stalk\n        color(\"forestgreen\")\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            22\n        ])\n        cylinder(h=3 + height, r=1.2, $fn=8);\n    }\n    \n    // Decay holes/burrows\n    for(i = [0:8]) {\n        angle = i * 40;\n        radius = 6 + sin(i * 50) * 4;\n        \n        color(\"black\")\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            20 + sin(i * 30) * 10\n        ])\n        sphere(2 + sin(i * 25) * 1.5, $fn=16);\n    }\n    \n    // Tendrils/wisps\n    for(i = [0:6]) {\n        angle = i * 60 + 30;\n        \n        color(\"darkgreen\")\n        translate([\n            cos(angle) * 12,\n            sin(angle) * 12,\n            35\n        ])\n        rotate([0, 0, angle + 90])\n        scale([0.5, 0.5, 2])\n        sphere(3, $fn=8);\n    }\n    \n    // Base platform - root system\n    color(\"saddlebrown\")\n    translate([0, 0, -12])\n    cylinder(h=4, r1=20, r2=15, $fn=32);\n    \n    // Root details\n    for(i = [0:12]) {\n        angle = i * 30;\n        radius = 14 + sin(i * 45) * 4;\n        \n        color(\"sienna\")\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            -12\n        ])\n        rotate([90, 0, angle])\n        cylinder(h=8, r=1.5, $fn=8);\n    }\n}\n\n// Main render\n$fn = 32;\nblightgeist();",
    "renders": true
  },
  {
    "household_item": "voidling",
    "openscad_code": "// Realistic Voidling - Medium Complexity\n// Overall dimensions: ~70mm height\n\n$fn=32;\n\n// Main body shell with organic curvature\nmodule body_shell() {\n    difference() {\n        // Main ellipsoid body\n        scale([1.2, 1, 1.1])\n        sphere(25);\n        \n        // Hollow interior\n        scale([1.1, 0.9, 1])\n        sphere(22);\n        \n        // Bottom opening\n        translate([0, 0, -20])\n        cube([40, 40, 40], center=true);\n    }\n}\n\n// Void core - glowing sphere inside\nmodule void_core() {\n    translate([0, 0, 15])\n    sphere(8);\n}\n\n// Eye sockets with realistic depth\nmodule eye_socket(pos) {\n    translate(pos)\n    difference() {\n        sphere(7);\n        translate([0, 4, 0])\n        scale([1, 0.6, 1])\n        sphere(6.5);\n    }\n}\n\n// Eye stalk with joint\nmodule eye_stalk(pos, angle) {\n    translate(pos)\n    rotate([0, angle, 0])\n    union() {\n        // Base mount\n        cylinder(h=3, r=5);\n        \n        // Stalk segment 1\n        translate([0, 0, 3])\n        cylinder(h=8, r1=4, r2=3);\n        \n        // Joint\n        translate([0, 0, 11])\n        sphere(3.5);\n        \n        // Stalk segment 2\n        translate([0, 0, 14.5])\n        rotate([0, -angle, 0])\n        cylinder(h=10, r1=2.5, r2=2);\n        \n        // Eyeball\n        translate([0, 0, 24.5])\n        rotate([0, angle, 0])\n        sphere(4);\n    }\n}\n\n// Tentacle with segments\nmodule tentacle(length, segments, curl) {\n    for(i=[0:segments-1]) {\n        rotate([0, curl*i, 0])\n        translate([0, 0, i*length/segments])\n        cylinder(h=length/segments, r1=4-i*0.3, r2=3.7-i*0.3);\n    }\n}\n\n// Surface detail ridges\nmodule body_ridges() {\n    for(i=[0:8]) {\n        rotate([0, 0, i*45])\n        translate([0, 20, -10])\n        rotate([90, 0, 0])\n        scale([1.2, 1, 0.15])\n        cylinder(h=30, r1=8, r2=3);\n    }\n}\n\n// Combine all parts\nunion() {\n    // Main body\n    body_shell();\n    \n    // Void core (cutout for LED)\n    %void_core();\n    \n    // Eye stalks\n    eye_stalk([-15, 0, 5], 20);\n    eye_stalk([15, 0, 5], -20);\n    \n    // Eye sockets\n    color(\"black\")\n    union() {\n        eye_socket([-15, 0, 15]);\n        eye_socket([15, 0, 15]);\n    }\n    \n    // Tentacles\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n        translate([20, 0, -20])\n        rotate([90, 0, 0])\n        tentacle(25, 5, 15);\n    }\n    \n    // Surface ridges\n    body_ridges();\n    \n    // Base support ring for printing\n    translate([0, 0, -25])\n    cylinder(h=3, r=28);\n}",
    "renders": true
  },
  {
    "household_item": "nightgeist",
    "openscad_code": "// Nightgeist in realistic style\n// Overall size: ~80mm height\n\n// Parameters\n$fn = 36;\nbody_height = 60;\nhead_height = 20;\ncloak_thickness = 2;\narm_length = 25;\nhand_size = 5;\n\nmodule nightgeist() {\n    // Main body - cylindrical core\n    translate([0, 0, body_height/2])\n    difference() {\n        cylinder(h=body_height, d1=25, d2=20);\n        \n        // Hollow for material savings\n        translate([0, 0, cloak_thickness])\n        cylinder(h=body_height-cloak_thickness*2, d=20);\n    }\n    \n    // Head with hood\n    translate([0, 0, body_height + head_height/2])\n    union() {\n        // Head\n        sphere(d=18);\n        \n        // Hood extension\n        translate([0, 0, -head_height/2])\n        cylinder(h=25, d1=30, d2=20);\n    }\n    \n    // Arms under cloak\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, body_height - 10])\n        rotate([0, side * 20, 0])\n        union() {\n            // Upper arm\n            rotate([0, 90, 0])\n            cylinder(h=15, d=6);\n            \n            // Lower arm\n            translate([arm_length, 0, -5])\n            rotate([0, 30, 0])\n            cylinder(h=10, d=5);\n            \n            // Hand\n            translate([arm_length + 10, 0, -8])\n            sphere(d=hand_size);\n        }\n    }\n    \n    // Flowing cloak panels\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([0, 15, body_height/2])\n        rotate([20, 0, 0])\n        linear_extrude(height=cloak_thickness, center=true)\n        polygon(points=[\n            [0, 0],\n            [10, -30],\n            [20, -10],\n            [15, 20],\n            [5, 25]\n        ]);\n    }\n    \n    // Face details\n    translate([0, 8, body_height + head_height])\n    difference() {\n        sphere(d=15);\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([side * 4, 0, -2])\n            sphere(d=4);\n        }\n        \n        // Mouth slit\n        translate([0, -2, -5])\n        rotate([0, 0, 0])\n        cube([8, 1, 2]);\n    }\n    \n    // Base platform for printing stability\n    translate([0, 0, -3])\n    cylinder(h=6, d=40);\n}\n\n// Render the nightgeist\nnightgeist();",
    "renders": true
  },
  {
    "household_item": "corpserot",
    "openscad_code": "// Corpserot - realistic style, medium complexity\n// 3D printable model of a decomposing corpse in a rotating state\n\n$fn = 30;  // Smooth curves for printing\n\nmodule torso() {\n    // Main body cavity\n    difference() {\n        // Outer body shape\n        hull() {\n            translate([0, 0, 15]) sphere(d = 35);\n            translate([0, 0, -15]) sphere(d = 25);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, 0]) cylinder(h = 40, d1 = 20, d2 = 15, center = true);\n    }\n    \n    // Rib cage remnants\n    for(i = [-8:4:8]) {\n        translate([i, 0, 5]) rotate([90, 0, 0]) \n            cylinder(h = 20, d = 3);\n    }\n}\n\nmodule skull() {\n    // Main skull shape\n    difference() {\n        sphere(d = 20);\n        \n        // Eye sockets\n        translate([-6, 8, 2]) sphere(d = 6);\n        translate([6, 8, 2]) sphere(d = 6);\n        \n        // Jaw line\n        translate([0, 12, -5]) cube([15, 5, 10], center = true);\n        \n        // Nose cavity\n        translate([0, 10, 0]) cube([4, 8, 4], center = true);\n    }\n    \n    // Jaw\n    translate([0, 5, -12]) rotate([20, 0, 0])\n        difference() {\n            cube([12, 8, 6], center = true);\n            translate([0, 0, 3]) cube([10, 6, 2], center = true);\n        }\n}\n\nmodule arm(side) {\n    mirror([side, 0, 0]) {\n        // Shoulder\n        translate([12, 0, 8]) sphere(d = 8);\n        \n        // Upper arm\n        translate([18, 0, 0]) rotate([0, 0, 20])\n            cylinder(h = 20, d = 6);\n        \n        // Elbow joint\n        translate([30, 0, -2]) sphere(d = 5);\n        \n        // Forearm\n        translate([35, 0, -8]) rotate([0, 0, 30])\n            cylinder(h = 15, d = 4);\n        \n        // Hand bones\n        translate([42, 0, -12]) cube([8, 3, 2], center = true);\n    }\n}\n\nmodule leg(side) {\n    mirror([side, 0, 0]) {\n        // Hip joint\n        translate([8, 0, -20]) sphere(d = 9);\n        \n        // Femur\n        translate([10, 0, -35]) rotate([15, 0, 10])\n            cylinder(h = 25, d = 7);\n        \n        // Knee\n        translate([12, 0, -50]) sphere(d = 6);\n        \n        // Tibia\n        translate([10, 0, -65]) rotate([5, 0, 5])\n            cylinder(h = 22, d = 5);\n        \n        // Foot\n        translate([8, 0, -78]) cube([10, 4, 4], center = true);\n    }\n}\n\nmodule spine() {\n    // Vertebrae column\n    for(i = [-15:5:15]) {\n        translate([0, 0, i]) \n            cylinder(h = 3, d = 8, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Position entire model\n    rotate([0, 0, 45]) {\n        // Core structure\n        torso();\n        skull();\n        translate([0, 0, 20]) skull();\n        \n        // Spine\n        translate([0, 0, 0]) spine();\n        \n        // Limbs\n        arm(1);   // Left arm\n        arm(-1);  // Right arm\n        leg(1);   // Left leg\n        leg(-1);  // Right leg\n        \n        // Decomposition details\n        // Exposed bone on chest\n        translate([0, 10, 5]) \n            cube([15, 3, 8], center = true);\n        \n        // Tattered clothing remnants\n        translate([0, 0, -10]) \n            cylinder(h = 30, d = 40, center = true);\n        \n        // Rotting flesh chunks\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([15, 0, -5]) \n                    sphere(d = 4);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "shadowbane",
    "openscad_code": "// Shadowbane – realistic style, medium complexity\n// Approx. 85 mm total length, printable without supports\n\n// Overall scale factor\nscaleFactor = 1;          // change to 0.5 for 42 mm etc.\n\n// Blade parameters\nbladeLength = 70 * scaleFactor;\nbladeWidth  = 18 * scaleFactor;\nbladeThick  = 2.2 * scaleFactor;\nedgeBevel   = 0.8 * scaleFactor;\n\n// Guard parameters\nguardLength = 35 * scaleFactor;\nguardHeight =  8 * scaleFactor;\nguardThick  =  4 * scaleFactor;\n\n// Handle parameters\nhandleLength = 30 * scaleFactor;\nhandleDia    = 10 * scaleFactor;\npommelDia    = 14 * scaleFactor;\n\n// Utility module for rounded rectangles\nmodule roundedRect(l, w, h, r){\n    translate([0,0,h/2]) difference(){\n        cube([l, w, h], center=true);\n        for(x=[-1,1], y=[-1,1])\n            translate([x*(l/2-r), y*(w/2-r), -h])\n                cylinder(h=h*2, r=r, center=true);\n    }\n}\n\n// Blade with fuller\nmodule blade(){\n    union(){\n        // Main blade\n        translate([bladeLength/2, 0, 0])\n            cube([bladeLength, bladeWidth, bladeThick], center=true);\n\n        // Edge bevels (two per side)\n        for(side=[-1,1]){\n            translate([bladeLength*0.8, 0, side*bladeThick/2])\n                rotate([0,side*30,0])\n                    cube([bladeLength*0.4, bladeWidth, edgeBevel], center=true);\n        }\n\n        // Fuller (groove)\n        translate([bladeLength*0.65, 0, 0])\n            scale([1, 0.3, 0.3])\n                rotate([0,90,0])\n                    cylinder(h=bladeLength*0.7, r=bladeWidth/2, center=true);\n    }\n}\n\n// Quatrefoil guard\nmodule guard(){\n    difference(){\n        union(){\n            // Central block\n            roundedRect(guardLength, guardThick, guardHeight, 2*scaleFactor);\n            // Quatrefoil rings\n            for(i=[-1,1]){\n                translate([i*guardLength/3, 0, 0])\n                    rotate([90,0,0])\n                        cylinder(h=guardThick+0.2, r=guardHeight/2, center=true);\n            }\n        }\n        // Central slot for tang\n        translate([0,0,0])\n            cube([guardThick+1, handleDia+1, guardHeight+1], center=true);\n    }\n}\n\n// Handle with leather-wrap ridges\nmodule handle(){\n    union(){\n        // Core\n        translate([-handleLength/2, 0, 0])\n            rotate([0,90,0])\n                cylinder(h=handleLength, r=handleDia/2, center=true);\n\n        // Leather ridges\n        ridgeCount = 5;\n        for(i=[0:ridgeCount-1]){\n            z = (i/(ridgeCount-1) - 0.5) * handleLength*0.9;\n            translate([z, 0, 0])\n                rotate([0,90,0])\n                    cylinder(h=handleDia*0.3, r1=handleDia/2+0.5, r2=handleDia/2+0.5, center=true);\n        }\n    }\n}\n\n// Pommel\nmodule pommel(){\n    translate([-handleLength-handleDia/2, 0, 0])\n        sphere(d=pommelDia);\n}\n\n// Assembly\nunion(){\n    // Tang hidden inside handle\n    color(\"silver\")\n        blade();\n    translate([0,0,0])\n        guard();\n    translate([-handleLength,0,0])\n        handle();\n    pommel();\n}",
    "renders": true
  },
  {
    "household_item": "plagueshade",
    "openscad_code": "// Plague doctor mask - realistic medium complexity\n// Wall thickness: 2mm for 3D printability\n\n$fn=64;\n\nmodule main_mask() {\n    // Main mask body - elongated oval shape\n    difference() {\n        // Outer shell\n        scale([1, 0.8, 1.2])\n        sphere(r=30);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n        scale([0.93, 0.73, 1.13])\n        sphere(r=30);\n    }\n}\n\nmodule beak() {\n    // Bird-like beak structure\n    translate([0, 0, -35])\n    rotate([0, -15, 0])\n    difference() {\n        // Outer beak\n        scale([0.6, 0.4, 1.8])\n        cylinder(h=40, r1=20, r2=5);\n        \n        // Beak hollow\n        translate([0, 0, 2])\n        scale([0.55, 0.35, 1.7])\n        cylinder(h=40, r1=18, r2=4);\n        \n        // Bottom ventilation slots\n        for(i = [-15:10:15]) {\n            translate([i, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h=15, r=1.5, $fn=6);\n        }\n    }\n}\n\nmodule eye_holes() {\n    // Eye holes with brass ring detail\n    for(side = [-1, 1]) {\n        translate([side * 18, 10, 8])\n        rotate([0, 0, 0])\n        difference() {\n            // Outer brass ring\n            cylinder(h=4, r=8);\n            \n            // Inner hole\n            translate([0, 0, -1])\n            cylinder(h=6, r=6);\n            \n            // Glass lens recess\n            translate([0, 0, 2])\n            cylinder(h=2, r=7);\n        }\n    }\n}\n\nmodule ventilation_holes() {\n    // Side ventilation holes for breathing\n    for(angle = [0:60:359]) {\n        rotate([0, 0, angle])\n        translate([28, 0, -10])\n        rotate([0, 90, 0])\n        cylinder(h=3, r=2.5);\n    }\n}\n\nmodule head_straps() {\n    // Attachment points for leather straps\n    for(side = [-1, 1]) {\n        for(pos = [-20, 20]) {\n            translate([side * 25, 0, pos])\n            difference() {\n                // Strap loop\n                rotate([90, 0, 0])\n                scale([1, 1.5, 1])\n                torus(3, 1);\n                \n                // Hollow center\n                rotate([90, 0, 0])\n                scale([0.7, 1.2, 0.7])\n                torus(3, 1);\n            }\n        }\n    }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n    translate([major, 0, 0])\n    circle(r=minor);\n}\n\nmodule nose_bridge() {\n    // Raised bridge detail\n    translate([0, 25, 0])\n    rotate([90, 0, 0])\n    scale([1, 0.3, 0.8])\n    cylinder(h=30, r1=12, r2=8);\n}\n\n// Assembly\nunion() {\n    main_mask();\n    beak();\n    eye_holes();\n    ventilation_holes();\n    head_straps();\n    nose_bridge();\n}",
    "renders": true
  },
  {
    "household_item": "blackgeist",
    "openscad_code": "// Blackgeist - Medium complexity realistic style\n\n// Overall dimensions\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule blackgeist_body() {\n    // Central torso\n    difference() {\n        union() {\n            // Main torso - elongated oval\n            scale([1, 0.7, 1.5])\n                sphere(d=30);\n            \n            // Chest armor plates\n            for(i=[-1:1]) {\n                translate([i*8, 0, 5])\n                    rotate([90, 0, 0])\n                        cylinder(h=12, d1=10, d2=6, $fn=6);\n            }\n        }\n        \n        // Hollow interior for printing\n        scale([0.8, 0.5, 1.3])\n            sphere(d=30);\n    }\n}\n\n// Head module\nmodule head() {\n    // Skull-like head\n    translate([0, -20, 25]) {\n        // Main skull\n        scale([0.8, 1.2, 1])\n            sphere(d=20);\n        \n        // Eye sockets\n        translate([-6, -8, 2]) {\n            rotate([0, 10, 0])\n                sphere(d=8);\n        }\n        translate([6, -8, 2]) {\n            rotate([0, -10, 0])\n                sphere(d=8);\n        }\n        \n        // Jaw\n        translate([0, -12, -8]) {\n            scale([1, 0.6, 0.4])\n                sphere(d=18);\n        }\n    }\n}\n\n// Arm module with claws\nmodule arm(side) {\n    // Left arm (side=1) or right arm (side=-1)\n    translate([side * 15, 0, 10]) {\n        rotate([0, 0, side * 20]) {\n            // Upper arm\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=15, d=6);\n            \n            // Lower arm\n            translate([0, 15, 0])\n                rotate([0, 90, 30*side])\n                    cylinder(h=12, d=5);\n            \n            // Claw hand\n            translate([0, 27, 3]) {\n                // Palm\n                sphere(d=8);\n                \n                // Claws\n                for(i=[-1:1]) {\n                    rotate([0, 0, i*30]) {\n                        translate([i*3, 8, 0])\n                            rotate([90, 0, 0])\n                                cylinder(h=10, d1=4, d2=1, $fn=3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leg module with talons\nmodule leg(side) {\n    translate([side * 8, 0, -20]) {\n        rotate([0, 0, side * -10]) {\n            // Upper leg\n            cylinder(h=15, d=8);\n            \n            // Lower leg\n            translate([0, 0, -18])\n                rotate([0, 0, side * 15])\n                    cylinder(h=12, d=6);\n            \n            // Talon foot\n            translate([0, 0, -32]) {\n                // Heel\n                sphere(d=6);\n                \n                // Toes\n                for(angle=[0:120:240]) {\n                    rotate([0, 0, angle + (side * 30)]) {\n                        translate([5, 0, 0])\n                            rotate([90, 0, 0])\n                                cylinder(h=8, d1=4, d2=1, $fn=3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing module with membrane\nmodule wing(side) {\n    translate([side * 15, 10, 15]) {\n        rotate([0, 0, side * 45]) {\n            // Wing arm\n            for(i=[0:3]) {\n                rotate([0, 0, side * i * 45]) {\n                    translate([i*8, 0, 0])\n                        cylinder(h=10, d=3);\n                }\n            }\n            \n            // Membrane patches\n            for(i=[0:2]) {\n                rotate([0, 0, side * (i*45 + 22.5)]) {\n                    translate([i*8 + 4, 0, 0])\n                        scale([1, 0.1, 0.5])\n                            sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([0, 20, -10]) {\n        rotate([20, 0, 0]) {\n            // Segmented tail\n            for(i=[0:5]) {\n                translate([0, i*5, -i*3])\n                    sphere(d=8 - i);\n            }\n            \n            // Tail spike\n            translate([0, 30, -18])\n                rotate([0, 0, 180])\n                    cylinder(h=8, d1=0.5, d2=4, $fn=4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    blackgeist_body();\n    head();\n    tail();\n    \n    // Arms\n    arm(1);   // Left\n    arm(-1);  // Right\n    \n    // Legs\n    leg(1);   // Left\n    leg(-1);  // Right\n    \n    // Wings\n    wing(1);   // Left\n    wing(-1);  // Right\n}",
    "renders": true
  },
  {
    "household_item": "cinderwraith",
    "openscad_code": "// Cinderwraith - Realistic style, medium complexity\n// Approx 75mm tall, 3D printable with no overhangs >45 degrees\n\n// Overall scale\noverall_scale = 0.75;\n\n// Main module\nmodule cinderwraith() {\n    scale(overall_scale) {\n        // Base plume of smoke\n        base_smoke();\n        \n        // Torso section\n        torso();\n        \n        // Wraith head\n        head();\n        \n        // Arms\n        arms();\n        \n        // Floating ember details\n        embers();\n    }\n}\n\n// Base smoke plume\nmodule base_smoke() {\n    union() {\n        // Main smoke pillar\n        translate([0, 0, 15]) \n            cylinder(h=30, r1=25, r2=20, $fn=32);\n        \n        // Secondary smoke wisps\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([20, 0, 20])\n                    cylinder(h=20, r1=8, r2=2, $fn=16);\n        }\n    }\n}\n\n// Torso\nmodule torso() {\n    translate([0, 0, 50]) {\n        // Chest cavity\n        difference() {\n            // Main chest\n            scale([1, 0.8, 1.5])\n                sphere(d=40, $fn=32);\n            \n            // Hollow center\n            scale([0.7, 0.6, 1.3])\n                sphere(d=30, $fn=32);\n        }\n        \n        // Ribcage details\n        for(i=[0:5]) {\n            rotate([0, i*30-75, 0])\n                translate([18, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=15, r=2, $fn=8);\n        }\n    }\n}\n\n// Head\nmodule head() {\n    translate([0, 0, 75]) {\n        // Skull-like head\n        difference() {\n            // Head shape\n            scale([0.8, 0.9, 1.2])\n                sphere(d=25, $fn=32);\n            \n            // Eye sockets\n            translate([-8, -5, 5])\n                sphere(d=8, $fn=16);\n            translate([8, -5, 5])\n                sphere(d=8, $fn=16);\n            \n            // Mouth cavity\n            translate([0, -10, -5])\n                cube([12, 8, 10], center=true);\n        }\n        \n        // Jaw\n        translate([0, -12, -12])\n            cube([15, 8, 15], center=true);\n    }\n}\n\n// Arms\nmodule arms() {\n    // Left arm\n    translate([-20, 0, 55]) {\n        rotate([0, 30, -45])\n            arm_segment();\n    }\n    \n    // Right arm\n    translate([20, 0, 55]) {\n        rotate([0, 30, 45])\n            arm_segment();\n    }\n}\n\n// Single arm segment\nmodule arm_segment() {\n    union() {\n        // Upper arm\n        cylinder(h=20, r1=5, r2=4, $fn=16);\n        \n        // Lower arm\n        translate([0, 0, -25])\n            rotate([0, 30, 0])\n                cylinder(h=25, r1=4, r2=3, $fn=16);\n        \n        // Hand\n        translate([0, 0, -50])\n            rotate([0, 45, 0])\n                scale([1, 1.5, 0.5])\n                    sphere(d=8, $fn=16);\n    }\n}\n\n// Floating embers\nmodule embers() {\n    // Random ember placement\n    ember_positions = [\n        [15, 10, 30],\n        [-20, -5, 45],\n        [10, -15, 60],\n        [-12, 8, 70],\n        [5, 5, 25]\n    ];\n    \n    for(pos = ember_positions) {\n        translate(pos)\n            scale([1, 1, 0.8])\n                sphere(d=4, $fn=12);\n    }\n}\n\n// Render the cinderwraith\ncinderwraith();",
    "renders": true
  },
  {
    "household_item": "goregeist",
    "openscad_code": "// Goregeist - Realistic Style, Medium Complexity\n// Width: 60mm, Depth: 45mm, Height: 85mm\n\n// Configuration\n$fn = 72;\n\nmodule goregeist() {\n    // Main body - teardrop shape for ghostly form\n    union() {\n        // Upper body - spherical top\n        translate([0, 0, 40]) {\n            scale([1, 0.8, 1.2])\n                sphere(r = 30);\n        }\n        \n        // Lower body - tapered cylinder\n        cylinder(h = 60, r1 = 30, r2 = 5, center = false);\n    }\n    \n    // Face features\n    difference() {\n        // Eye sockets - deep and menacing\n        translate([-15, 20, 60]) {\n            rotate([0, 20, 0])\n                cylinder(h = 15, r = 6, $fn = 16);\n        }\n        translate([15, 20, 60]) {\n            rotate([0, -20, 0])\n                cylinder(h = 15, r = 6, $fn = 16);\n        }\n        \n        // Mouth - jagged opening\n        translate([0, 25, 45]) {\n            scale([1, 0.3, 1])\n                sphere(r = 12);\n        }\n    }\n    \n    // Arms - spectral appendages\n    for (side = [-1, 1]) {\n        translate([side * 35, 0, 50]) {\n            rotate([0, 0, side * 30]) {\n                scale([0.8, 0.8, 2])\n                    sphere(r = 8);\n            }\n        }\n        \n        // Lower arm segments\n        translate([side * 45, 0, 35]) {\n            rotate([0, 0, side * 45]) {\n                scale([0.6, 0.6, 1.5])\n                    sphere(r = 6);\n            }\n        }\n    }\n    \n    // Tattered bottom edges\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([15, 0, 5]) {\n                scale([1, 0.3, 2])\n                    sphere(r = 4);\n            }\n    }\n}\n\n// Base for stability\nmodule base() {\n    difference() {\n        cylinder(h = 3, r = 20);\n        cylinder(h = 3.1, r = 18);\n    }\n}\n\n// Assembly\nunion() {\n    goregeist();\n    translate([0, 0, -1.5])\n        base();\n}",
    "renders": true
  },
  {
    "household_item": "dreadrot",
    "openscad_code": "// Realistic Style - Medium Complexity Dreadrot\n// 3D printable dreadrot with organic texture and proper wall thickness\n\n$fn = 36;\n\n// Overall dimensions\ndread_length = 80;\ndread_diameter = 12;\nwall_thickness = 2;\n\n// Main dread body module\nmodule dread_body() {\n    difference() {\n        // Outer twisted cylinder\n        union() {\n            for (i = [0:5:dread_length]) {\n                translate([0, 0, i]) {\n                    rotate([0, 0, i * 2]) {\n                        cylinder(h = 6, d = dread_diameter, center = true);\n                    }\n                }\n            }\n        }\n        \n        // Hollow center\n        translate([0, 0, -1]) {\n            cylinder(h = dread_length + 2, d = dread_diameter - wall_thickness * 2, center = true);\n        }\n    }\n}\n\n// Root section with more organic shape\nmodule root_section() {\n    translate([0, 0, -dread_length/2 - 8]) {\n        difference() {\n            // Bulbous root\n            scale([1.2, 1.2, 0.8]) {\n                sphere(d = dread_diameter * 1.5);\n            }\n            \n            // Hollow interior\n            scale([0.8, 0.8, 0.8]) {\n                sphere(d = dread_diameter * 1.5 - wall_thickness * 2);\n            }\n            \n            // Flat bottom for printing\n            translate([0, 0, -dread_diameter/2]) {\n                cube([dread_diameter * 2, dread_diameter * 2, dread_diameter], center = true);\n            }\n        }\n    }\n}\n\n// Surface texture with small bumps and ridges\nmodule surface_texture() {\n    for (i = [0:30:dread_length]) {\n        for (j = [0:45:360]) {\n            rotate([0, 0, j]) {\n                translate([dread_diameter/2 - 0.5, 0, i - dread_length/2]) {\n                    scale([0.3, 0.3, 0.4]) {\n                        sphere(d = 2);\n                    }\n                }\n            }\n            \n            rotate([0, 0, j + 15]) {\n                translate([dread_diameter/2 - 1, 0, i - dread_length/2 + 2]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 1.5, d = 1, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tip section with taper\nmodule tip_section() {\n    translate([0, 0, dread_length/2 + 5]) {\n        difference() {\n            // Tapered end\n            cylinder(h = 10, d1 = dread_diameter, d2 = 4, center = false);\n            \n            // Hollow interior\n            translate([0, 0, -1]) {\n                cylinder(h = 12, d1 = dread_diameter - wall_thickness * 2, d2 = 2, center = false);\n            }\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    root_section();\n    dread_body();\n    tip_section();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "household_item": "cryptrot",
    "openscad_code": "// Cryptex Rotor - Realistic Style, Medium Complexity\n// 3D printable cryptex-style rotor with 26 letter positions\n// Approx 80mm diameter, 30mm thick\n\n$fn = 50;  // Circle resolution\n\n// Main parameters\nrotor_diameter = 80;\nrotor_thickness = 30;\ncenter_hole_diameter = 8;\nletter_depth = 2;\nletter_size = 6;\nwall_thickness = 4;\n\n// Alphabet for rotor positions\nalphabet = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\n           \"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"];\n\n// Main rotor module\nmodule rotor() {\n    difference() {\n        // Outer cylinder with rounded edges\n        union() {\n            cylinder(h=rotor_thickness, d=rotor_diameter);\n            translate([0,0,0]) \n                cylinder(h=wall_thickness, d=rotor_diameter+2);\n            translate([0,0,rotor_thickness-wall_thickness]) \n                cylinder(h=wall_thickness, d=rotor_diameter+2);\n        }\n        \n        // Center hole for axle\n        translate([0,0,-1])\n            cylinder(h=rotor_thickness+2, d=center_hole_diameter);\n            \n        // Letter cutouts around perimeter\n        for(i=[0:25]) {\n            rotate([0,0,i*360/26])\n                translate([rotor_diameter/2 - letter_depth - 2, 0, rotor_thickness/2])\n                    cube([letter_depth+1, letter_size, letter_size], center=true);\n        }\n        \n        // Notch for position sensing\n        rotate([0,0,0])\n            translate([rotor_diameter/2 - wall_thickness, 0, 0])\n                cube([wall_thickness, 4, rotor_thickness], center=true);\n    }\n    \n    // Raised letter indicators\n    for(i=[0:25]) {\n        rotate([0,0,i*360/26 + 360/52])\n            translate([rotor_diameter/2 - letter_depth/2 - 1, 0, rotor_thickness/2 + 1])\n                linear_extrude(height=1.5)\n                    text(alphabet[i], size=letter_size*0.8, halign=\"center\", valign=\"center\");\n    }\n    \n    // Grip ridges\n    for(i=[0:35]) {\n        rotate([0,0,i*10])\n            translate([rotor_diameter/2 - 1, 0, 0])\n                cube([2, 1, rotor_thickness], center=true);\n    }\n}\n\n// Optional number ring on back\nmodule number_ring() {\n    translate([0,0,rotor_thickness+1]) {\n        difference() {\n            cylinder(h=3, d=rotor_diameter-10);\n            cylinder(h=4, d=rotor_diameter-20);\n        }\n        \n        // Numbers 1-26\n        for(i=[0:25]) {\n            rotate([0,0,i*360/26 + 360/52])\n                translate([(rotor_diameter-15)/2, 0, 1.5])\n                    linear_extrude(height=1)\n                        text(str(i+1), size=4, halign=\"center\", valign=\"center\");\n        }\n    }\n}\n\n// Assembly\nrotor();\ntranslate([0,0,0]) number_ring();",
    "renders": true
  },
  {
    "household_item": "soulspecter",
    "openscad_code": "// Soulspecter – realistic, medium-complexity, 3D-printable\n// Approx. 60 mm tall, all parts ≥0.8 mm wall, no steep overhangs\n\n// global parameters\nbody_h = 55;            // total height\nhood_h = 20;            // height of hood\nhood_r = 11;            // hood outer radius\nhood_wall = 1.5;        // wall thickness\ncloak_t = 1.5;          // cloak thickness\neye_r = 2.2;\neye_depth = 2.5;\nprint_clear = 0.2;      // tolerance for difference cuts\n\nmodule hood_skull() {\n    difference() {\n        // outer hood\n        cylinder(h=hood_h, r1=hood_r, r2=hood_r-3, $fn=60);\n        // hollow cavity\n        translate([0,0,-print_clear])\n            cylinder(h=hood_h+2*print_clear, r1=hood_r-hood_wall, r2=hood_r-3-hood_wall, $fn=60);\n    }\n    // skull plate inside hood\n    translate([0,0,hood_h/2])\n        sphere(r=hood_r-0.5, $fn=60);\n}\n\nmodule eyes() {\n    for(x=[-eye_r-1, eye_r+1]) {\n        translate([x, 0, hood_h-6])\n            rotate([90,0,0])\n                cylinder(h=eye_depth, r=eye_r, $fn=20);\n    }\n}\n\nmodule cloak() {\n    // main cloak body – cone with cut bottom\n    difference() {\n        cylinder(h=body_h-hood_h, r1=hood_r-2, r2=hood_r+14, $fn=60);\n        // hollow\n        translate([0,0,-print_clear])\n            cylinder(h=body_h-hood_h+2*print_clear, r1=hood_r-2-cloak_t, r2=hood_r+14-cloak_t, $fn=60);\n    }\n    // small ripples via thin cylinders\n    for(a=[0:60:359])\n        rotate([0,0,a])\n            translate([hood_r+6,0,(body_h-hood_h)/2])\n                cylinder(h=body_h-hood_h, r=3, $fn=8);\n}\n\nmodule scythe_blade() {\n    // blade profile\n    linear_extrude(height=2.5, convexity=10) {\n        polygon(points=[\n            [0,0], [18,0], [14,45], [0,40]\n        ]);\n    }\n}\n\nmodule scythe() {\n    // shaft\n    translate([0,0,-35])\n        cylinder(h=45, r=2.2, $fn=20);\n    // blade\n    translate([0,-2,7])\n        rotate([0,110,0])\n            scythe_blade();\n}\n\n// assembly\nunion() {\n    translate([0,0,0]) hood_skull();\n    translate([0,0,-hood_h]) cloak();\n    eyes();\n    translate([12,0,hood_h-22]) rotate([0,0,-25]) scythe();\n}\n\n// print base\ntranslate([0,0,-50])\n    cube([35,35,2], center=true);",
    "renders": true
  },
  {
    "household_item": "gravewraith",
    "openscad_code": "// Gravewraith – realistic style, medium complexity\n// Height ≈ 60 mm, wall ≈ 1 mm, printable without supports\n\n$fn = 50;           // smooth curves\nth = 1.2;           // uniform wall thickness\n\n// overall scale\nscale(0.6)\ndifference() {\n    union() {\n        // hood & cloak\n        hood_and_cloak();\n        // skull face\n        translate([0,0,34]) skull();\n        // bony hands emerging\n        translate([8,-6,20]) rotate([0,0,-20]) hand();\n        mirror([1,0,0]) translate([8,-6,20]) rotate([0,0,-20]) hand();\n    }\n    // hollow out for printing\n    translate([0,0,30]) scale([.94,.94,.95]) hood_and_cloak();\n}\n\nmodule hood_and_cloak() {\n    // flowing cloak base\n    difference() {\n        union() {\n            // torso cylinder\n            cylinder(h = 40, d1 = 32, d2 = 28);\n            // flared bottom\n            translate([0,0,-18]) cylinder(h = 20, d1 = 38, d2 = 44);\n            // hood dome\n            translate([0,0,40]) scale([1.1,1.1,.8]) sphere(d = 32);\n            // shoulder drapery\n            for(a = [-50,-25,0,25,50]) {\n                rotate([0,0,a]) translate([14,0,28]) rotate([90,0,0])\n                cylinder(h = 18, d1 = 3, d2 = 1.5);\n            }\n        }\n        // head hole\n        translate([0,0,42]) sphere(d = 22);\n    }\n}\n\nmodule skull() {\n    // cranium\n    sphere(d = 20);\n    \n    // eye sockets\n    translate([-7,6,4]) rotate([0,0,0]) socket();\n    translate([ 7,6,4]) rotate([0,0,0]) socket();\n    \n    // nasal cavity\n    difference() {\n        translate([0,0,3]) cube([6,12,8], center = true);\n        translate([0,2,3]) sphere(d = 6);\n    }\n    \n    // jaw\n    difference() {\n        translate([0, -10, -6]) scale([1,.7,.8]) sphere(d = 14);\n        translate([0,-12,-5]) cube([20,10,8], center = true);\n    }\n}\n\nmodule socket() {\n    rotate([0,20,0]) difference() {\n        scale([1,1,1.4]) sphere(d = 6);\n        translate([0,0,2]) sphere(d = 5.5);\n    }\n}\n\nmodule hand() {\n    // palm\n    difference() {\n        translate([0,0,0]) cube([8,12,18], center = true);\n        translate([0,0,1]) cube([10,14,16], center = true);\n    }\n    \n    // four fingers\n    for(i = [-1, -0.33, 0.33, 1])\n        translate([i*2.2, 7, 0]) {\n            difference() {\n                cylinder(h = 14, d = 2.8);\n                translate([0,0,-1]) cylinder(h = 16, d = 1.6);\n            }\n        }\n    \n    // thumb\n    rotate([0,0,-30])\n    translate([4,3,0]) {\n        difference() {\n            cylinder(h = 8, d = 3);\n            translate([0,0,-1]) cylinder(h = 10, d = 1.8);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "rotgeist",
    "openscad_code": "// Rotgeist - Realistic style with medium complexity\n// A decaying mechanical ghost with exposed gears and rot mechanisms\n\n$fn = 32;\nwall_thickness = 2.0;\nbase_scale = 60;  // 60mm base size\n\nmodule gear(teeth=12, height=4, radius=8, shaft_radius=3) {\n    // Create a gear with specified teeth\n    difference() {\n        union() {\n            cylinder(h=height, r=radius);\n            for(i=[0:teeth-1]) {\n                rotate([0, 0, i*360/teeth]) \n                    translate([radius, 0, height/2])\n                        cube([3, 2, height], center=true);\n            }\n        }\n        cylinder(h=height+0.1, r=shaft_radius, center=true);\n    }\n}\n\nmodule skull() {\n    // Main skull structure with decayed look\n    difference() {\n        // Base skull shape\n        scale([1.2, 1, 1.3])\n            sphere(d=base_scale * 0.8);\n        \n        // Eye sockets\n        translate([-base_scale*0.2, base_scale*0.25, base_scale*0.2])\n            sphere(d=base_scale*0.25);\n        translate([base_scale*0.2, base_scale*0.25, base_scale*0.2])\n            sphere(d=base_scale*0.25);\n            \n        // Jaw removal area\n        translate([0, -base_scale*0.3, -base_scale*0.3])\n            cube([base_scale*0.9, base_scale*0.6, base_scale*0.4], center=true);\n    }\n    \n    // Exposed gear mechanism in jaw\n    translate([0, -base_scale*0.1, -base_scale*0.35])\n        rotate([90, 0, 0])\n            gear(teeth=8, height=3, radius=base_scale*0.15);\n}\n\nmodule spine() {\n    // Vertebrae-like spine structure\n    for(i=[0:4]) {\n        translate([0, 0, -base_scale*0.4 - i*base_scale*0.15])\n            scale([0.4, 0.3, 0.2])\n                sphere(d=base_scale*0.6);\n    }\n}\n\nmodule rotor_assembly() {\n    // Central rotating mechanism\n    translate([0, 0, -base_scale*0.5])\n        difference() {\n            cylinder(h=base_scale*0.3, r=base_scale*0.15);\n            cylinder(h=base_scale*0.31, r=base_scale*0.1);\n        }\n    \n    // Rotor blades\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([base_scale*0.15, 0, -base_scale*0.35])\n                cube([base_scale*0.3, base_scale*0.05, base_scale*0.1], center=true);\n    }\n}\n\nmodule ribcage() {\n    // Mechanical rib structure\n    for(i=[0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([base_scale*0.3, 0, -base_scale*0.4])\n                scale([1, 0.3, 0.1])\n                    sphere(d=base_scale*0.4);\n        }\n    }\n}\n\nmodule exposed_gears() {\n    // Gears visible through decay\n    translate([-base_scale*0.3, base_scale*0.1, 0])\n        rotate([0, 90, 0])\n            gear(teeth=10, height=wall_thickness, radius=base_scale*0.12);\n    \n    translate([base_scale*0.3, base_scale*0.1, 0])\n        rotate([0, -90, 0])\n            gear(teeth=8, height=wall_thickness, radius=base_scale*0.1);\n}\n\n// Main assembly\nunion() {\n    skull();\n    spine();\n    rotor_assembly();\n    ribcage();\n    exposed_gears();\n    \n    // Additional decay details\n    translate([-base_scale*0.4, -base_scale*0.1, base_scale*0.1])\n        cylinder(h=wall_thickness*2, r=base_scale*0.08);\n    translate([base_scale*0.4, -base_scale*0.1, base_scale*0.1])\n        cylinder(h=wall_thickness*2, r=base_scale*0.08);\n}",
    "renders": true
  },
  {
    "household_item": "bonewight",
    "openscad_code": "// Realistic Bonewight - Medium Complexity\n// Size: ~70mm tall\n// Proper 3D printing orientation with minimal overhangs\n\n// Module for vertebrae\nmodule vertebrae(height, radius) {\n    difference() {\n        cylinder(h=height, r=radius, $fn=12);\n        translate([0, 0, -1])\n            cylinder(h=height+2, r=radius*0.6, $fn=12);\n    }\n}\n\n// Module for rib cage\nmodule rib() {\n    for(i=[0:5]) {\n        rotate([0, 0, i*30])\n        translate([0, 25, 0]) {\n            scale([1, 0.8, 0.3])\n                sphere(r=8, $fn=12);\n            translate([0, -8, 0])\n                cylinder(h=2, r1=6, r2=4, $fn=8);\n        }\n    }\n}\n\n// Module for femur\nmodule femur() {\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(r=4, $fn=8);\n            translate([0, 0, 25])\n                sphere(r=3, $fn=8);\n        }\n        translate([0, 0, 10])\n            cylinder(h=15, r=2, $fn=8);\n    }\n}\n\n// Module for tibia\nmodule tibia() {\n    hull() {\n        translate([0, 0, 0])\n            sphere(r=3, $fn=8);\n        translate([0, 0, 20])\n            sphere(r=2.5, $fn=8);\n    }\n}\n\n// Main body assembly\nmodule bonewight() {\n    // Pelvis base\n    difference() {\n        translate([0, 0, 0])\n            scale([1.2, 0.8, 0.4])\n                sphere(r=15, $fn=16);\n        translate([0, -5, 5])\n            cube([30, 20, 10], center=true);\n    }\n    \n    // Spine\n    for(i=[1:5]) {\n        translate([0, 0, 6*i+6])\n            vertebrae(5, 8-i);\n    }\n    \n    // Rib cage\n    translate([0, 0, 25])\n        rib();\n    \n    // Skull\n    difference() {\n        translate([0, 5, 45])\n            sphere(r=12, $fn=16);\n        translate([0, 15, 45])\n            cube([20, 20, 15], center=true);\n        // Eye sockets\n        translate([-4, 8, 48])\n            sphere(r=2.5, $fn=8);\n        translate([4, 8, 48])\n            sphere(r=2.5, $fn=8);\n        // Jaw\n        translate([0, 12, 40])\n            cube([15, 5, 8], center=true);\n    }\n    \n    // Left arm\n    translate([12, 0, 35]) {\n        rotate([0, 20, 10]) {\n            // Humerus\n            hull() {\n                sphere(r=3, $fn=8);\n                translate([0, 0, 20])\n                    sphere(r=2.5, $fn=8);\n            }\n            // Radius/Ulna\n            translate([0, 0, 20])\n                rotate([0, -30, 0])\n                    tibia();\n        }\n    }\n    \n    // Right arm (mirrored)\n    mirror([1, 0, 0])\n        translate([12, 0, 35]) {\n            rotate([0, 20, 10]) {\n                hull() {\n                    sphere(r=3, $fn=8);\n                    translate([0, 0, 20])\n                        sphere(r=2.5, $fn=8);\n                }\n                translate([0, 0, 20])\n                    rotate([0, -30, 0])\n                        tibia();\n            }\n        }\n    \n    // Left leg\n    translate([8, 0, 0]) {\n        rotate([10, 0, 0]) {\n            femur();\n            translate([0, 0, 25])\n                tibia();\n            // Foot\n            translate([0, 8, 42])\n                scale([1, 2, 0.5])\n                    sphere(r=5, $fn=8);\n        }\n    }\n    \n    // Right leg (mirrored)\n    mirror([1, 0, 0])\n        translate([8, 0, 0]) {\n            rotate([10, 0, 0]) {\n                femur();\n                translate([0, 0, 25])\n                    tibia();\n                translate([0, 8, 42])\n                    scale([1, 2, 0.5])\n                        sphere(r=5, $fn=8);\n            }\n        }\n    \n    // Clavicles\n    translate([0, 0, 35]) {\n        rotate([0, 0, 45])\n            cylinder(h=20, r=2, $fn=8);\n        rotate([0, 0, -45])\n            cylinder(h=20, r=2, $fn=8);\n    }\n}\n\n// Scale to 70mm height and center\nscale(70/70)\n    translate([0, 0, 35])\n        bonewight();",
    "renders": true
  },
  {
    "household_item": "netherwraith",
    "openscad_code": "// Netherwraith – medium-complexity, realistic style\n// Roughly 65 mm tall, printable without supports\n\n$fn=48;\n\n// Overall scale\nscale(0.65){\n    // Torso – hollow cylinder with ribs\n    difference(){\n        cylinder(h=40,d=40,center=true);\n        translate([0,0,-1]) cylinder(h=42,d=35,center=true);   // hollow\n    }\n\n    // Shoulder joints\n    module shoulder(ang, side){\n        mirror([side,0,0]){\n            rotate([0,ang,0]) translate([20,0,12]) rotate([0,90,0])\n                cylinder(h=12,d=8,center=true);\n        }\n    }\n    shoulder(0, 1); shoulder(0,-1);\n\n    // Arms – segmented bone\n    module arm(side){\n        mirror([side,0,0]){\n            for(i=[0:1]){\n                translate([28+i*12,0,12-i*6])\n                    rotate([0,-20-i*10,0])\n                        cylinder(h=15,d=7-i,center=true);\n            }\n            // claw hand\n            translate([54,0,0]) rotate([0,-40,0])\n                difference(){\n                    cylinder(h=10,d=6,center=true);\n                    for(j=[0:2])\n                        rotate([0,0,j*120])\n                            translate([2,0,0]) cube([4,1,10],center=true);\n                }\n        }\n    }\n    arm(1); arm(-1);\n\n    // Pelvis plate\n    difference(){\n        translate([0,0,-25]) cube([35,15,8],center=true);\n        translate([0,-8,-25]) cube([31,20,9],center=true);\n    }\n\n    // Legs – digitigrade with hooves\n    module leg(side){\n        mirror([side,0,0]){\n            // thigh\n            translate([12,0,-32]) rotate([25,0,0])\n                cylinder(h=18,d=9,center=true);\n            // shin\n            translate([8,0,-48]) rotate([30,0,0])\n                cylinder(h=20,d=7,center=true);\n            // hoof\n            translate([5,0,-63]) rotate([90,0,0])\n                difference(){\n                    cylinder(h=10,d1=8,d2=5,center=true);\n                    translate([0,0,-5.5]) sphere(d=9);\n                }\n        }\n    }\n    leg(1); leg(-1);\n\n    // Head – skull-like mask\n    translate([0,0,25]) union(){\n        difference(){\n            sphere(d=22);\n            translate([0,0,5]) cube([30,30,30],center=true); // flat face\n            // eye sockets\n            for(x=[-6,6])\n                translate([x,8,2]) rotate([0,90,0])\n                    cylinder(h=15,d=6,center=true);\n            // mouth slit\n            translate([0,9,-4]) cube([12,2,6],center=true);\n        }\n        // horns curling back\n        for(a=[-40,40]){\n            rotate([0,a,0]) translate([0,0,12]) rotate([0,90,0])\n                for(i=[0:3]){\n                    translate([11+i*3,0,i*-3]) rotate([0,0,-20*i])\n                        cylinder(h=6,d=4-i*0.5,center=true);\n                }\n        }\n    }\n\n    // Spine protrusions\n    for(z=[-15:5:10]){\n        rotate([0,0,z*2]) translate([0,0,z]) cylinder(h=5,d1=3,d2=1,center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "bloodwraith",
    "openscad_code": "// Bloodwraith - Realistic Style, Medium Complexity\n// Overall height ≈ 75 mm, printable as single piece\n\n// Parameters\n$fn = 32; // Resolution\nscale = 1;  // Global scale\nwall = 2;   // Wall thickness for printability\n\n// Main module\nmodule bloodwraith() {\n    // Base stand\n    translate([0, 0, -2]) \n        cylinder(h = 4, r1 = 20, r2 = 15, center = false);\n    \n    // Legs\n    legs();\n    \n    // Torso\n    torso();\n    \n    // Arms\n    arms();\n    \n    // Head\n    head();\n    \n    // Cape\n    cape();\n}\n\n// Legs module\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Thigh\n        translate([side * 6, 0, 8])\n            rotate([0, 0, side * 5])\n            cylinder(h = 20, r = 4, center = false);\n        \n        // Shin\n        translate([side * 6, 0, 0])\n            rotate([side * -30, 0, side * 5])\n            cylinder(h = 18, r = 3.5, center = false);\n        \n        // Foot\n        translate([side * 8, 0, -1.5])\n            rotate([side * 30, 0, 0])\n            cube([12, 5, 3], center = true);\n    }\n}\n\n// Torso module\nmodule torso() {\n    // Pelvis\n    translate([0, 0, 18])\n        cube([16, 8, 10], center = true);\n    \n    // Spine\n    translate([0, 0, 26])\n        cylinder(h = 20, r = 5, center = false);\n    \n    // Ribcage\n    for(i = [0:3]) {\n        translate([0, 0, 28 + i * 4])\n            rotate([0, 0, i * 15])\n            cube([20 - i * 2, 8, 3], center = true);\n    }\n}\n\n// Arms module\nmodule arms() {\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 10, 0, 38])\n            rotate([0, 0, side * -20])\n            cylinder(h = 15, r = 3, center = false);\n        \n        // Forearm\n        translate([side * 18, 0, 30])\n            rotate([0, 0, side * 20])\n            cylinder(h = 15, r = 2.5, center = false);\n        \n        // Hand\n        translate([side * 22, 0, 25])\n            cube([6, 2, 8], center = true);\n    }\n}\n\n// Head module\nmodule head() {\n    // Skull base\n    translate([0, 0, 50])\n        sphere(r = 7);\n    \n    // Jaw\n    translate([0, -5, 48])\n        cube([8, 4, 6], center = true);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([side * 3, -6, 52])\n            sphere(r = 2);\n    }\n    \n    // Horns\n    for(side = [-1, 1]) {\n        translate([side * 5, 0, 57])\n            rotate([0, side * 20, 0])\n            cylinder(h = 12, r1 = 2, r2 = 1, center = false);\n    }\n}\n\n// Cape module\nmodule cape() {\n    // Main cape body\n    difference() {\n        translate([0, 8, 40])\n            rotate([10, 0, 0])\n            cube([30, 2, 35], center = true);\n        \n        // Cutout for neck\n        translate([0, 7, 50])\n            sphere(r = 8);\n    }\n    \n    // Cape folds\n    for(i = [-2:2]) {\n        if(i != 0) {\n            translate([i * 6, 10, 40])\n                rotate([10, 0, i * 10])\n                cube([4, 2, 30], center = true);\n        }\n    }\n}\n\n// Generate the complete model\nbloodwraith();",
    "renders": true
  },
  {
    "household_item": "darkrot",
    "openscad_code": "// Darkrot mushroom in realistic style, medium complexity\n// Total height ~70mm, cap diameter ~55mm\n\n$fn = 48;\n\n// Main stem\nmodule stem() {\n    difference() {\n        // Main cylindrical stem with slight taper\n        cylinder(h1=35, r1=8, r2=7, $fn=36);\n        \n        // Central hollow core for realism\n        translate([0,0,-1]) \n            cylinder(h=37, r1=4, r2=3.5, $fn=36);\n        \n        // Add slight texture with shallow grooves\n        for(i=[0:35]) {\n            rotate([0,0,i*10])\n                translate([7.8,0,0])\n                    cube([0.4,1,36], center=true);\n        }\n    }\n}\n\n// Gills underneath cap\nmodule gills() {\n    difference() {\n        // Base gill structure\n        cylinder(h=3, r=27.5, $fn=120);\n        \n        // Cut radial gill spaces\n        for(i=[0:59]) {\n            rotate([0,0,i*6])\n                translate([27.3,0,1.5])\n                    cube([0.6,4,3], center=true);\n        }\n        \n        // Central hole for stem\n        cylinder(h=4, r=7.5, $fn=36);\n    }\n}\n\n// Cap with realistic wavy edges\nmodule cap() {\n    difference() {\n        union() {\n            // Main cap dome\n            scale([1,1,0.6]) \n                sphere(r=27.5);\n            \n            // Add wavy edge details\n            for(i=[0:23]) {\n                a = i*15;\n                r = 27.5 + sin(i*3)*2;\n                translate([r*cos(a), r*sin(a), -3])\n                    sphere(r=3);\n            }\n        }\n        \n        // Remove bottom to make hollow\n        translate([0,0,-18])\n            cube([60,60,20], center=true);\n        \n        // Create stem hole\n        translate([0,0,-3])\n            cylinder(h=10, r=8.5, $fn=36);\n    }\n}\n\n// Surface texture spots\nmodule spots() {\n    random_seed = 42;\n    for(i=[0:35]) {\n        // Generate pseudo-random positions\n        a = i*137.5;\n        r = 15 + (i*3)%12;\n        h = 15 + sin(i*7)*5;\n        \n        translate([r*cos(a), r*sin(a), h])\n            sphere(r=0.8 + (i%3)*0.3);\n    }\n}\n\n// Assembly\ntranslate([0,0,0]) {\n    // Stem\n    stem();\n    \n    // Gills\n    translate([0,0,35])\n        gills();\n    \n    // Cap\n    translate([0,0,35])\n        cap();\n    \n    // Spots on cap\n    translate([0,0,35])\n        spots();\n}\n\n// Base for stability\ntranslate([0,0,-2])\n    cylinder(h=2, r=10, $fn=36);",
    "renders": true
  },
  {
    "household_item": "skullgeist",
    "openscad_code": "// Skullgeist - Realistic Medium Complexity\n// 3D printable ghostly skull with ethereal wisps\n\n// Overall dimensions: ~70mm height, 50mm width\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule skull_base() {\n    // Main cranium - slightly elongated sphere\n    translate([0, 0, 25])\n    scale([1.1, 1.1, 1.2])\n    sphere(20);\n    \n    // Facial plane\n    translate([0, 18, 15])\n    rotate([20, 0, 0])\n    difference() {\n        cube([30, 5, 25], center=true);\n        translate([0, 3, 0])\n        cube([28, 5, 23], center=true);\n    }\n}\n\nmodule eye_socket() {\n    // Deep eye socket with proper depth\n    translate([0, 0, -2])\n    rotate([10, 0, 0])\n    cylinder(h=12, r1=6, r2=5);\n}\n\nmodule nasal_cavity() {\n    // Realistic nasal opening - heart shaped\n    hull() {\n        translate([-6, 0, 0])\n        cylinder(h=10, r=4);\n        translate([6, 0, 0])\n        cylinder(h=10, r=4);\n        translate([0, 8, 0])\n        cylinder(h=10, r=3);\n    }\n}\n\nmodule jaw() {\n    // Lower jaw with teeth row\n    translate([0, -5, -5])\n    rotate([15, 0, 0])\n    union() {\n        // Jaw body\n        difference() {\n            translate([0, -8, 0])\n            cube([25, 15, 12], center=true);\n            translate([0, -8, 2])\n            cube([23, 15, 10], center=true);\n        }\n        \n        // Teeth\n        for (i = [-10:5:10]) {\n            translate([i, -14, 0])\n            cube([3, 2, 6], center=true);\n        }\n    }\n}\n\nmodule ethereal_wisps() {\n    // Ghostly tendrils flowing downward\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([25, 0, -10])\n        rotate([20, 0, 0])\n        scale([0.6, 1, 3])\n        sphere(5);\n    }\n    \n    // Wispy bottom edges\n    for (i = [-20:10:20]) {\n        translate([i, 0, -25])\n        scale([0.8, 0.8, 1.5])\n        sphere(8);\n    }\n}\n\nmodule skullgeist() {\n    union() {\n        // Main skull structure\n        difference() {\n            skull_base();\n            \n            // Eye sockets\n            translate([-12, 15, 20])\n            eye_socket();\n            translate([12, 15, 20])\n            mirror([1, 0, 0])\n            eye_socket();\n            \n            // Nasal cavity\n            translate([0, 18, 15])\n            rotate([20, 0, 0])\n            nasal_cavity();\n            \n            // Hollow out skull\n            translate([0, 0, 25])\n            scale([0.8, 0.8, 0.8])\n            sphere(20);\n        }\n        \n        // Jaw\n        jaw();\n        \n        // Ghostly emanations\n        ethereal_wisps();\n    }\n}\n\n// Create the final model\nscale([0.7, 0.7, 0.7])\nskullgeist();",
    "renders": true
  },
  {
    "household_item": "deathling",
    "openscad_code": "// Deathling - Realistic Style, Medium Complexity\n// 3D printable figurine ~70mm tall\n\n$fn=36; // Smooth curves for realistic look\n\nmodule head() {\n    // Main skull shape\n    difference() {\n        sphere(d=25);\n        // Eye sockets\n        translate([-7, 8, 5]) rotate([0, 15, 0]) scale([1, 1.2, 0.8]) sphere(d=8);\n        translate([7, 8, 5]) rotate([0, -15, 0]) scale([1, 1.2, 0.8]) sphere(d=8);\n        // Nose cavity\n        translate([0, 11, -2]) scale([1.5, 0.8, 2]) sphere(d=6);\n        // Jaw removal\n        translate([0, 0, -15]) cube([30, 30, 20], center=true);\n    }\n    \n    // Jaw\n    translate([0, 5, -12]) rotate([15, 0, 0]) \n        difference() {\n            scale([0.9, 0.7, 0.6]) sphere(d=20);\n            translate([0, 0, -5]) cube([20, 20, 10], center=true);\n        }\n    \n    // Teeth\n    for(x=[-6, -3, 0, 3, 6]) {\n        translate([x, 12, -8]) cube([1.5, 4, 2], center=true);\n    }\n}\n\nmodule spine() {\n    // Vertebrae column\n    for(i=[0:2:20]) {\n        translate([0, 0, -12-i]) \n        rotate([0, 5*sin(i*10), 0]) \n        scale([0.9-i*0.02, 0.7-i*0.015, 0.8]) \n        cylinder(d1=8, d2=6, h=2);\n    }\n}\n\nmodule ribcage() {\n    // Central sternum\n    translate([0, 8, -15]) rotate([10, 0, 0])\n        cylinder(d=5, h=25);\n    \n    // Ribs\n    for(side=[-1, 1]) {\n        for(i=[0:4]) {\n            translate([side*3, 8-i*3, -13-i*2]) \n            rotate([0, side*10, side*20-i*5]) \n            scale([0.8, 0.8, 1]) \n            cylinder(d1=2, d2=1, h=15);\n        }\n    }\n}\n\nmodule arms() {\n    for(side=[-1, 1]) {\n        // Shoulder blade\n        translate([side*10, 0, -10]) rotate([0, side*20, 0])\n            scale([0.3, 1, 0.8]) sphere(d=10);\n        \n        // Upper arm\n        translate([side*15, 0, -15]) rotate([0, 0, side*30])\n            cylinder(d=4, h=15);\n        \n        // Lower arm\n        translate([side*25, 0, -20]) rotate([0, 0, side*30+20])\n            cylinder(d=3, h=12);\n        \n        // Hand\n        translate([side*32, 0, -22]) rotate([0, 0, side*30+20])\n            scale([0.8, 0.3, 1]) sphere(d=6);\n    }\n}\n\nmodule pelvis() {\n    // Hip bone\n    translate([0, 0, -35]) rotate([10, 0, 0])\n        difference() {\n            scale([1.2, 0.8, 0.6]) sphere(d=18);\n            translate([0, 0, -10]) cube([25, 25, 20], center=true);\n        }\n    \n    // Hip joints\n    for(side=[-1, 1]) {\n        translate([side*8, 0, -38]) sphere(d=5);\n    }\n}\n\nmodule legs() {\n    for(side=[-1, 1]) {\n        // Thigh\n        translate([side*7, 0, -45]) rotate([0, side*5, 0])\n            cylinder(d=5, h=20);\n        \n        // Knee\n        translate([side*7, 0, -58]) sphere(d=5);\n        \n        // Shin\n        translate([side*7, 0, -68]) rotate([0, side*-5, 0])\n            cylinder(d=4, h=18);\n        \n        // Foot\n        translate([side*7, 5, -80]) rotate([0, 20, 0])\n            scale([1, 1.5, 0.5]) sphere(d=10);\n    }\n}\n\n// Base for stability\nmodule base() {\n    translate([0, 0, -85])\n        cylinder(d=40, h=3);\n}\n\n// Assemble the deathling\nunion() {\n    base();\n    head();\n    spine();\n    ribcage();\n    arms();\n    pelvis();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "voidrot",
    "openscad_code": "// Realistic Voidrot - medium complexity\n// Outer shell with void core and realistic proportions\n\n// Parameters\n$fn = 50;\nouter_diameter = 80;\ninner_diameter = 40;\nheight = 70;\nwall_thickness = 3;\nbottom_thickness = 5;\n\n// Main voidrot body\nmodule voidrot_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = height, d = outer_diameter, center = true);\n        \n        // Inner void\n        translate([0, 0, bottom_thickness/2])\n            cylinder(h = height + 2, d = inner_diameter, center = true);\n    }\n}\n\n// Reinforcement ribs around the shell\nmodule ribs() {\n    rib_count = 8;\n    for (i = [0:rib_count-1]) {\n        angle = i * 360 / rib_count;\n        rotate([0, 0, angle])\n            translate([0, outer_diameter/2 - wall_thickness/2, 0])\n                cube([wall_thickness*2, wall_thickness, height*0.9], center = true);\n    }\n}\n\n// Top collar with chamfers\nmodule top_collar() {\n    collar_height = 8;\n    collar_outer = outer_diameter + 4;\n    collar_inner = inner_diameter - 2;\n    \n    difference() {\n        union() {\n            // Main collar\n            translate([0, 0, height/2 - collar_height/2])\n                cylinder(h = collar_height, d = collar_outer, center = true);\n            \n            // Chamfer ring\n            translate([0, 0, height/2 - collar_height])\n                cylinder(h = 2, d1 = collar_outer, d2 = outer_diameter, center = true);\n        }\n        \n        // Inner hole\n        translate([0, 0, height/2 - collar_height/2])\n            cylinder(h = collar_height + 2, d = collar_inner, center = true);\n    }\n}\n\n// Bottom base with mounting features\nmodule bottom_base() {\n    base_height = 6;\n    base_diameter = outer_diameter + 8;\n    \n    difference() {\n        // Base plate\n        translate([0, 0, -height/2 - base_height/2])\n            cylinder(h = base_height, d = base_diameter, center = true);\n        \n        // Center void continues through base\n        translate([0, 0, -height/2 - base_height/2])\n            cylinder(h = base_height + 2, d = inner_diameter, center = true);\n        \n        // Mounting holes\n        for (i = [0:3]) {\n            angle = i * 90;\n            rotate([0, 0, angle])\n                translate([base_diameter/2 - 6, 0, -height/2 - base_height/2])\n                    cylinder(h = base_height + 2, d = 3, center = true);\n        }\n    }\n}\n\n// Internal support structure\nmodule internal_supports() {\n    support_height = height - bottom_thickness - 5;\n    \n    for (i = [0:3]) {\n        angle = i * 90 + 45;\n        rotate([0, 0, angle])\n            translate([0, inner_diameter/2 + wall_thickness/2, 0])\n                cube([wall_thickness*1.5, wall_thickness*2, support_height], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    voidrot_body();\n    ribs();\n    top_collar();\n    bottom_base();\n    internal_supports();\n}",
    "renders": true
  },
  {
    "household_item": "ashshade",
    "openscad_code": "// Ashshade - Medium complexity realistic style lampshade\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\nwall_thickness = 2;\nbase_diameter = 80;\ntop_diameter = 40;\nheight = 60;\nfacet_count = 6;\n\nmodule ashshade_body() {\n    difference() {\n        // Main tapered body\n        cylinder(h1 = height, h2 = height, r1 = base_diameter/2, r2 = top_diameter/2, center = false);\n        \n        // Hollow out the inside\n        translate([0, 0, wall_thickness])\n        cylinder(h1 = height - wall_thickness*2, h2 = height - wall_thickness*2, \n                 r1 = base_diameter/2 - wall_thickness, r2 = top_diameter/2 - wall_thickness);\n    }\n}\n\nmodule ventilation_slots() {\n    slot_width = 6;\n    slot_height = 4;\n    slot_depth = wall_thickness;\n    \n    // Create slots around the bottom edge for heat dissipation\n    for (i = [0:facet_count-1]) {\n        rotate([0, 0, i * 360/facet_count])\n        translate([base_diameter/2 - slot_depth/2, -slot_width/2, 0])\n        difference() {\n            cube([slot_depth, slot_width, slot_height]);\n            // Round the edges slightly\n            translate([slot_depth/2, 0, slot_height/2])\n            rotate([0, 90, 0])\n            cylinder(h = slot_width, r = 1.5, center = true);\n        }\n    }\n}\n\nmodule mounting_ring() {\n    ring_height = 8;\n    inner_diameter = 28;\n    \n    difference() {\n        // Outer ring\n        cylinder(h = ring_height, r = top_diameter/2, center = true);\n        \n        // Inner hole for bulb socket\n        cylinder(h = ring_height + 0.1, r = inner_diameter/2, center = true);\n        \n        // Key slot for alignment\n        translate([inner_diameter/2 + 2, 0, 0])\n        cube([4, 3, ring_height + 0.1], center = true);\n    }\n}\n\nmodule decorative_facets() {\n    facet_depth = 1.5;\n    \n    for (i = [0:facet_count-1]) {\n        rotate([0, 0, i * 360/facet_count + 360/facet_count/2])\n        translate([0, 0, height/2])\n        scale([1, 1, height/base_diameter])\n        difference() {\n            // Main facet groove\n            translate([base_diameter/2 - facet_depth, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = base_diameter, r = base_diameter/4, center = true);\n            \n            // Limit the groove to the shade surface\n            intersection() {\n                cylinder(h = height, r1 = base_diameter/2, r2 = top_diameter/2);\n                translate([base_diameter/2 - facet_depth, 0, -height/2])\n                rotate([0, 90, 0])\n                cylinder(h = base_diameter*2, r = base_diameter/3, center = true);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Main shade body\n    ashshade_body();\n    \n    // Ventilation slots at bottom\n    ventilation_slots();\n    \n    // Mounting ring at top\n    translate([0, 0, height])\n    mounting_ring();\n    \n    // Decorative facets\n    decorative_facets();\n}",
    "renders": true
  },
  {
    "household_item": "gloomgeist",
    "openscad_code": "// Gloomgeist - Medium complexity realistic style\n// Overall dimensions: 55mm tall, 45mm wide, 30mm deep\n\n$fn = 32;\n\n// Main module\nmodule gloomgeist() {\n    // Base body - ethereal robe\n    difference() {\n        union() {\n            // Main body cylinder\n            cylinder(h = 50, r1 = 18, r2 = 22, center = false);\n            \n            // Flared bottom\n            translate([0, 0, 45])\n                cylinder(h = 10, r1 = 22, r2 = 25, center = false);\n                \n            // Hood back\n            translate([0, -12, 38])\n                rotate([90, 0, 0])\n                cylinder(h = 15, r1 = 10, r2 = 8, center = true);\n        }\n        \n        // Hollow out the body\n        translate([0, 0, 5])\n            cylinder(h = 45, r1 = 15, r2 = 18, center = false);\n            \n        // Arm holes\n        translate([15, 0, 25])\n            rotate([0, 90, 0])\n            cylinder(h = 20, r = 6, center = true);\n        translate([-15, 0, 25])\n            rotate([0, 90, 0])\n            cylinder(h = 20, r = 6, center = true);\n    }\n    \n    // Hood with face shadow\n    translate([0, 0, 35])\n        difference() {\n            union() {\n                // Hood dome\n                sphere(r = 12);\n                \n                // Hood extension forward\n                translate([0, 12, -2])\n                    cylinder(h = 15, r1 = 12, r2 = 8, center = true);\n            }\n            \n            // Face hole\n            translate([0, 12, 0])\n                rotate([0, 0, 0])\n                cylinder(h = 20, r = 6, center = true);\n                \n            // Hollow hood\n            sphere(r = 11);\n        }\n    \n    // Arms - ethereal wisps\n    for (side = [1, -1]) {\n        translate([side * 20, 0, 25])\n            rotate([0, 0, side * 15])\n            difference() {\n                cylinder(h = 25, r1 = 5, r2 = 3, center = false);\n                translate([0, 0, 2])\n                    cylinder(h = 20, r1 = 3, r2 = 1, center = false);\n            }\n            \n        // Wispy fingers\n        for (i = [0:2]) {\n            translate([side * (30 + i*3), -5 + i*2, 20 - i*3])\n                rotate([0, side * 20, side * 10])\n                cylinder(h = 8, r1 = 2, r2 = 0.5, center = false);\n        }\n    }\n    \n    // Ghostly chains\n    module chain_link(pos, rot) {\n        translate(pos)\n            rotate(rot)\n            scale([1, 0.3, 1])\n            rotate([90, 0, 0])\n            torus(3, 1);\n    }\n    \n    // Torus helper\n    module torus(outer, inner) {\n        difference() {\n            cylinder(h = outer*2, r = outer + inner, center = true);\n            cylinder(h = outer*2 + 1, r = outer - inner, center = true);\n        }\n    }\n    \n    // Chain hanging from waist\n    for (i = [0:3]) {\n        angle = i * 120;\n        chain_link([cos(angle)*20, sin(angle)*20, 45], [0, 0, angle]);\n        translate([cos(angle)*20, sin(angle)*20, 35])\n            cylinder(h = 10, r = 1, center = false);\n    }\n    \n    // Ectoplasm base\n    translate([0, 0, -5])\n        difference() {\n            cylinder(h = 5, r1 = 20, r2 = 25, center = false);\n            translate([0, 0, 2])\n                cylinder(h = 4, r1 = 18, r2 = 23, center = false);\n        }\n        \n    // Subtle facial features in the shadow\n    translate([0, 12, 0])\n        intersection() {\n            // Eye sockets\n            translate([3, 0, 2])\n                sphere(r = 2);\n            translate([-3, 0, 2])\n                sphere(r = 2);\n                \n            // Face hole constraint\n            translate([0, 0, 0])\n                cylinder(h = 20, r = 6, center = true);\n        }\n}\n\n// Center and scale the model\ngloomgeist();",
    "renders": true
  },
  {
    "household_item": "festergeist",
    "openscad_code": "// Festergeist 3D Model - Realistic Style, Medium Complexity\n// Approx. 75 mm tall, 3D printable with minimal supports\n\n// Overall dimensions\nbody_h = 45;\nhead_d = 30;\narm_l = 25;\nleg_h = 30;\n\n// Wall thickness for printing\nwall = 2;\n\n// Main module\nmodule festergeist() {\n    // Head\n    translate([0, 0, leg_h + body_h + head_d/2]) {\n        difference() {\n            sphere(d = head_d);\n            \n            // Eye sockets\n            for (i = [-1, 1]) {\n                translate([i * head_d/4, head_d/3, head_d/4]) {\n                    rotate([0, 20, 0]) {\n                        cylinder(h = head_d/2, d = head_d/4, $fn = 16);\n                    }\n                }\n            }\n            \n            // Mouth cavity\n            translate([0, head_d/3 - 5, -head_d/4]) {\n                rotate([40, 0, 0]) {\n                    cube([head_d/3, head_d/6, head_d/3], center = true);\n                }\n            }\n        }\n        \n        // Eyes\n        for (i = [-1, 1]) {\n            translate([i * head_d/4, head_d/3, head_d/3]) {\n                sphere(d = head_d/8);\n            }\n        }\n    }\n    \n    // Torso\n    translate([0, 0, leg_h + body_h/2]) {\n        difference() {\n            // Main body\n            cube([body_h * 0.7, body_h * 0.5, body_h], center = true);\n            \n            // Hollow center\n            cube([body_h * 0.7 - wall*2, body_h * 0.5 - wall*2, body_h - wall], center = true);\n        }\n    }\n    \n    // Arms\n    for (side = [-1, 1]) {\n        translate([side * body_h * 0.4, 0, leg_h + body_h - 5]) {\n            rotate([0, 0, side * 30]) {\n                // Upper arm\n                translate([arm_l/4, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h = arm_l/2, d = 8, $fn = 16);\n                            cylinder(h = arm_l/2, d = 8 - wall*2, $fn = 16);\n                        }\n                    }\n                }\n                \n                // Lower arm\n                translate([arm_l/2, 0, -arm_l/2]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h = arm_l/2, d = 6, $fn = 16);\n                            cylinder(h = arm_l/2, d = 6 - wall*2, $fn = 16);\n                        }\n                    }\n                }\n                \n                // Hands\n                translate([arm_l, 0, -arm_l]) {\n                    sphere(d = 8);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for (side = [-1, 1]) {\n        translate([side * body_h * 0.25, 0, leg_h/2]) {\n            difference() {\n                cylinder(h = leg_h, d = 12, $fn = 16);\n                cylinder(h = leg_h, d = 12 - wall*2, $fn = 16);\n            }\n            \n            // Feet\n            translate([0, body_h * 0.3, -leg_h/2 - 5]) {\n                cube([14, 20, 10], center = true);\n            }\n        }\n    }\n    \n    // Tattered cape\n    translate([0, body_h * 0.3, leg_h + body_h/2]) {\n        difference() {\n            // Main cape shape\n            cube([body_h * 1.2, 5, body_h * 1.5], center = true);\n            \n            // Tattered edges using loop\n            for (i = [-5:5]) {\n                translate([i * 10, 0, -body_h * 0.75 + abs(i) * 5]) {\n                    cube([8, 6, 10]);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nfestergeist();",
    "renders": true
  },
  {
    "household_item": "corpseshade",
    "openscad_code": "// Corpseshade Lamp Shade (realistic style, medium complexity)\n// Designed for 3D printing - minimal overhangs, 1.2mm wall thickness\n\n// Overall parameters\nshade_height = 65;\nshade_radius = 45;\nwall_thickness = 1.2;\n\n// Create the main shade body\nmodule shade_body() {\n    difference() {\n        // Outer shell - tapered cylinder\n        cylinder(h=shade_height, r1=shade_radius, r2=shade_radius*0.7, $fn=60);\n        \n        // Hollow out the inside\n        translate([0, 0, -0.5])\n        cylinder(h=shade_height+1, r1=shade_radius-wall_thickness, r2=shade_radius*0.7-wall_thickness, $fn=60);\n        \n        // Create drip pattern cutouts\n        for(i=[0:15:359]) {\n            rotate([0, 0, i])\n            translate([shade_radius-wall_thickness-1, 0, shade_height*0.3])\n            scale([1, 0.7, 1])\n            cylinder(h=shade_height*0.6, r1=2.5, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Create top rim with mounting holes\nmodule top_rim() {\n    difference() {\n        // Solid rim\n        translate([0, 0, shade_height])\n        cylinder(h=4, r1=shade_radius*0.7+3, r2=shade_radius*0.7+3, $fn=60);\n        \n        // Center hole for bulb socket\n        translate([0, 0, shade_height-0.5])\n        cylinder(h=6, r=shade_radius*0.35, $fn=60);\n        \n        // Mounting holes\n        for(i=[0:120:240]) {\n            rotate([0, 0, i])\n            translate([shade_radius*0.7+1, 0, shade_height-0.5])\n            cylinder(h=5, r=1.5, $fn=12);\n        }\n    }\n}\n\n// Create organic drip details on exterior\nmodule drip_details() {\n    for(i=[0:20:359]) {\n        rotate([0, 0, i])\n        for(j=[0:1:4]) {\n            translate([shade_radius-1-j, 0, j*shade_height/5])\n            rotate([90, 0, 0])\n            scale([1, 1, 1.5])\n            sphere(r=1.2+j*0.2, $fn=8);\n        }\n    }\n}\n\n// Create bottom edge irregularities\nmodule bottom_edge() {\n    for(i=[0:15:359]) {\n        rotate([0, 0, i])\n        translate([shade_radius*0.7-0.5, 0, 0])\n        scale([1, 0.5, 1])\n        rotate([0, 90, 0])\n        cylinder(h=3, r=1.5+sin(i*3)*0.5, $fn=6);\n    }\n}\n\n// Create internal light baffles\nmodule light_baffles() {\n    translate([0, 0, shade_height*0.4])\n    difference() {\n        cylinder(h=0.8, r=shade_radius*0.85, $fn=60);\n        \n        // Star pattern cutouts\n        for(i=[0:30:359]) {\n            rotate([0, 0, i])\n            translate([shade_radius*0.5, 0, -0.2])\n            cube([shade_radius*0.4, wall_thickness*2, 1.2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    shade_body();\n    top_rim();\n    \n    // Detail elements\n    drip_details();\n    bottom_edge();\n    light_baffles();\n}",
    "renders": true
  },
  {
    "household_item": "shadowrotter",
    "openscad_code": "// Shadowrotter - Medium complexity, realistic style\n// A compact rotary shadow casting device for 3D printing\n\n$fn = 36;\n\n// Main parameters\nbody_d = 60;\nbody_h = 25;\nblade_w = 4;\nblade_h = 18;\nblade_l = 22;\naxle_d = 8;\naxle_h = 30;\nbase_d = 70;\nbase_h = 8;\ngap = 0.2;\n\n// Main module\nmodule shadowrotter() {\n    // Base with mounting holes\n    base();\n    \n    // Main body cylinder\n    translate([0, 0, base_h])\n        body();\n    \n    // Rotating blades assembly\n    translate([0, 0, base_h + body_h/2])\n        rotate([0, 0, $t*360])\n        blades();\n    \n    // Central axle\n    translate([0, 0, base_h])\n        axle();\n    \n    // Top cap\n    translate([0, 0, base_h + body_h + gap])\n        cap();\n}\n\n// Base with four mounting holes\nmodule base() {\n    difference() {\n        cylinder(d=base_d, h=base_h);\n        for (i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([base_d/2 - 8, 0, -1])\n                    cylinder(d=4, h=base_h+2);\n        }\n    }\n    \n    // Chamfer edges\n    translate([0, 0, base_h-2])\n        cylinder(d1=base_d, d2=base_d-4, h=2);\n}\n\n// Main cylindrical body\nmodule body() {\n    difference() {\n        cylinder(d=body_d, h=body_h);\n        \n        // Bearing seat\n        translate([0, 0, -gap])\n            cylinder(d=axle_d + 2, h=body_h + gap*2);\n            \n        // Light entry slots\n        for (i = [0:60:300]) {\n            rotate([0, 0, i])\n                translate([body_d/2 - 3, -2, body_h/4])\n                    cube([6, 4, body_h/2]);\n        }\n    }\n    \n    // External grip rings\n    for (z = [body_h/4, body_h*3/4]) {\n        translate([0, 0, z])\n            cylinder(d1=body_d, d2=body_d-2, h=1);\n    }\n}\n\n// Rotating blade assembly\nmodule blades() {\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n            blade();\n    }\n}\n\n// Single blade\nmodule blade() {\n    // Blade body\n    translate([body_d/4, -blade_w/2, -blade_h/2])\n        cube([blade_l, blade_w, blade_h]);\n    \n    // Tapered end\n    translate([body_d/4 + blade_l, -blade_w/2, -blade_h/2])\n        cube([blade_w, blade_w, blade_h]);\n    \n    // Light blocking fin\n    translate([body_d/4 + blade_l/2, -blade_w/2 - 1, blade_h/2 - 2])\n        cube([blade_l/2, blade_w + 2, 1]);\n}\n\n// Central axle\nmodule axle() {\n    // Main shaft\n    cylinder(d=axle_d, h=axle_h);\n    \n    // Bearing surface\n    translate([0, 0, body_h/2])\n        cylinder(d=axle_d + 2, h=body_h/2 + gap);\n    \n    // Top bearing\n    translate([0, 0, axle_h - 4])\n        cylinder(d=axle_d + 4, h=4);\n}\n\n// Top cap\nmodule cap() {\n    difference() {\n        cylinder(d=body_d + 4, h=6);\n        translate([0, 0, -gap])\n            cylinder(d=body_d, h=6 + gap*2);\n    }\n    \n    // Knurled grip\n    for (i = [0:15:345]) {\n        rotate([0, 0, i])\n            translate([body_d/2 + 1, -1, 2])\n                cube([2, 2, 2]);\n    }\n}\n\n// Generate the model\nshadowrotter();",
    "renders": true
  },
  {
    "household_item": "soulwretch",
    "openscad_code": "// Soulwretch - Medium Complexity Realistic Style\n// Overall dimensions ~80mm tall\n\n$fn = 32;\n\n// Main parameters\nbody_height = 40;\nbody_radius = 15;\nhead_radius = 12;\narm_length = 25;\nleg_length = 30;\nwall_thickness = 2;\n\n// Base module for the soulwretch\nmodule soulwretch() {\n    // Central spine column\n    union() {\n        // Spinal column\n        for(i = [0:5]) {\n            translate([0, 0, i * 6])\n                cylinder(h=6, r1=body_radius - 3, r2=body_radius - 4);\n        }\n        \n        // Pelvis structure\n        translate([0, 0, -5])\n            difference() {\n                sphere(d=body_radius * 2.5);\n                // Hollow interior\n                sphere(d=body_radius * 2.5 - wall_thickness);\n                // Flat bottom\n                translate([0, 0, -body_radius * 1.5])\n                    cube([body_radius * 3, body_radius * 3, body_radius * 3], center=true);\n            }\n        \n        // Ribcage structure\n        for(i = [1:6]) {\n            rotate([0, 0, i * 30])\n                translate([0, 0, 15 + i * 3])\n                    difference() {\n                        cylinder(h=8, r1=body_radius - 1, r2=body_radius - 2);\n                        cylinder(h=8.2, r=body_radius - 4);\n                    }\n        }\n        \n        // Skull\n        translate([0, 0, body_height + 10]) {\n            difference() {\n                sphere(r=head_radius);\n                // Eye sockets\n                translate([head_radius/2, head_radius/2, head_radius/3])\n                    sphere(r=head_radius/3);\n                translate([-head_radius/2, head_radius/2, head_radius/3])\n                    sphere(r=head_radius/3);\n                // Jaw hollow\n                translate([0, -head_radius/2, -head_radius/2])\n                    cube([head_radius * 1.5, head_radius, head_radius], center=true);\n            }\n            // Jaw bone\n            translate([0, -head_radius/2, -head_radius/2 - 2])\n                cube([head_radius * 1.2, head_radius/2, wall_thickness], center=true);\n        }\n        \n        // Arms - skeletal structure\n        // Left arm\n        translate([body_radius + 5, 0, body_height - 10]) {\n            rotate([0, 0, 15])\n                difference() {\n                    cylinder(h=arm_length, r=3);\n                    cylinder(h=arm_length + 0.1, r=2);\n                }\n            // Hand\n            translate([arm_length, 0, 0])\n                sphere(r=4);\n        }\n        \n        // Right arm\n        mirror([1, 0, 0])\n            translate([body_radius + 5, 0, body_height - 10]) {\n                rotate([0, 0, -15])\n                    difference() {\n                        cylinder(h=arm_length, r=3);\n                        cylinder(h=arm_length + 0.1, r=2);\n                    }\n                // Hand\n                translate([arm_length, 0, 0])\n                    sphere(r=4);\n            }\n        \n        // Legs\n        // Left leg\n        translate([body_radius/2, 0, -leg_length/2 - 10]) {\n            difference() {\n                cylinder(h=leg_length, r=4);\n                cylinder(h=leg_length + 0.1, r=2.5);\n            }\n            // Foot\n            translate([0, 0, -leg_length/2 - 5])\n                cube([8, 4, 10], center=true);\n        }\n        \n        // Right leg\n        translate([-body_radius/2, 0, -leg_length/2 - 10]) {\n            difference() {\n                cylinder(h=leg_length, r=4);\n                cylinder(h=leg_length + 0.1, r=2.5);\n            }\n            // Foot\n            translate([0, 0, -leg_length/2 - 5])\n                cube([8, 4, 10], center=true);\n        }\n        \n        // Soul chains - ethereal bindings\n        // Left chain\n        for(i = [0:8]) {\n            translate([body_radius + 15, 5, 15 - i * 4])\n                rotate([90, 0, 0])\n                    torus(1, 0.5);\n        }\n        \n        // Right chain\n        for(i = [0:8]) {\n            translate([-body_radius - 15, 5, 15 - i * 4])\n                rotate([90, 0, 0])\n                    torus(1, 0.5);\n        }\n    }\n}\n\n// Torus helper for chains\nmodule torus(outer_radius, inner_radius) {\n    rotate_extrude()\n        translate([outer_radius, 0, 0])\n            circle(r=inner_radius);\n}\n\n// Render the soulwretch\ntranslate([0, 0, 40])\n    soulwretch();",
    "renders": true
  },
  {
    "household_item": "blightwraith",
    "openscad_code": "$fn=32;\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body\nmodule blightwraith() {\n    scale(scale_factor) union() {\n        torso();\n        head();\n        arms();\n        legs();\n        cape();\n    }\n}\n\n// Torso with blighted chest plate\nmodule torso() {\n    difference() {\n        // Main torso\n        union() {\n            // Chest core\n            translate([0, 0, 20])\n                scale([1, 0.8, 1.5])\n                sphere(15);\n\n            // Abdomen\n            translate([0, 0, 5])\n                scale([0.9, 0.7, 1])\n                sphere(12);\n\n            // Pelvis\n            translate([0, 0, -5])\n                scale([1.2, 0.6, 0.8])\n                cube([15, 10, 10], center=true);\n        }\n\n        // Blight holes in chest\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n                translate([10, 0, 22])\n                    sphere(3);\n        }\n\n        // Spine cavity\n        translate([0, 5, 12])\n            scale([0.3, 0.5, 1.5])\n            sphere(8);\n    }\n}\n\n// Hooded skull head\nmodule head() {\n    translate([0, 0, 38]) {\n        // Skull\n        difference() {\n            sphere(10);\n            // Eye sockets\n            translate([4, 6, 2])\n                sphere(3);\n            translate([-4, 6, 2])\n                sphere(3);\n            // Jaw line\n            translate([0, 7, -4])\n                cube([8, 2, 4], center=true);\n        }\n\n        // Hood\n        difference() {\n            translate([0, 5, 3])\n                scale([1.2, 1.5, 1.3])\n                sphere(12);\n            translate([0, 5, 3])\n                scale([0.8, 1.2, 0.8])\n                sphere(11);\n        }\n    }\n}\n\n// Arms with blight tendrils\nmodule arms() {\n    // Left arm\n    translate([-15, 0, 25]) {\n        rotate([0, 0, 45])\n            arm();\n    }\n\n    // Right arm\n    translate([15, 0, 25]) {\n        rotate([0, 0, -45])\n            mirror([1, 0, 0])\n                arm();\n    }\n}\n\nmodule arm() {\n    union() {\n        // Upper arm\n        cylinder(h=15, r1=4, r2=3);\n\n        // Forearm\n        translate([0, 15, 0])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=3, r2=2.5);\n\n        // Hand\n        translate([0, 30, 0])\n            sphere(3);\n\n        // Blight tendrils\n        for(i=[0:2]) {\n            rotate([0, 0, i*60])\n                translate([0, 20, 0])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=8, r=2);\n        }\n    }\n}\n\n// Legs with tattered cloth\nmodule legs() {\n    // Left leg\n    translate([-5, 0, -15]) {\n        leg();\n    }\n\n    // Right leg\n    translate([5, 0, -15]) {\n        leg();\n    }\n}\n\nmodule leg() {\n    union() {\n        // Thigh\n        cylinder(h=15, r1=4, r2=3);\n\n        // Shin\n        translate([0, 0, -15])\n            cylinder(h=15, r1=3, r2=2.5);\n\n        // Foot\n        translate([0, 0, -30])\n            scale([1.5, 2, 0.8])\n            cube([5, 5, 3], center=true);\n\n        // Cloth strips\n        for(i=[-1, 1]) {\n            translate([i*3, 0, -10])\n                scale([0.5, 3, 8])\n                cube([1, 1, 1], center=true);\n        }\n    }\n}\n\n// Tattered cape with holes\nmodule cape() {\n    difference() {\n        // Main cape\n        translate([0, 15, 20])\n            rotate([90, 0, 0])\n                scale([1.5, 1.2, 1])\n                cylinder(h=30, r1=20, r2=25);\n\n        // Cape holes\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n                translate([15, 15, 10])\n                    sphere(4);\n        }\n\n        // Trim bottom\n        translate([0, 15, -5])\n            cube([50, 50, 10], center=true);\n    }\n}\n\n// Generate the model\nblightwraith();",
    "renders": true
  },
  {
    "household_item": "cinderrot",
    "openscad_code": "// Cinderrot OpenSCAD - Realistic Style, Medium Complexity\n// 3D printable model inspired by a cinder block with realistic features\n\n$fn = 32;\n\n// Overall dimensions\nblock_w = 95;\nblock_h = 48;\nblock_d = 45;\nwall_th = 4;\n\nmodule cinderrot() {\n    // Main block body\n    difference() {\n        // Outer shell\n        rounded_box(block_w, block_h, block_d, 4);\n        \n        // Hollow core\n        translate([wall_th, wall_th, wall_th])\n            rounded_box(block_w - 2*wall_th, block_h - 2*wall_th, block_d - 2*wall_th, 3);\n    }\n    \n    // Two vertical cores\n    core_d = 23;\n    core_r = core_d/2;\n    \n    // Position cores symmetrically\n    core_spacing = 30;\n    \n    for(x = [-core_spacing/2, core_spacing/2]) {\n        translate([x, 0, 0])\n            vertical_core(core_d, block_h, wall_th);\n    }\n    \n    // Top surface texture - cinder indentations\n    top_texture();\n    \n    // Side webbing reinforcement\n    side_reinforcement();\n}\n\nmodule rounded_box(w, h, d, r) {\n    // Create a rounded box using hull of spheres\n    hull() {\n        translate([r, r, r]) sphere(r=r);\n        translate([w-r, r, r]) sphere(r=r);\n        translate([r, h-r, r]) sphere(r=r);\n        translate([w-r, h-r, r]) sphere(r=r);\n        translate([r, r, d-r]) sphere(r=r);\n        translate([w-r, r, d-r]) sphere(r=r);\n        translate([r, h-r, d-r]) sphere(r=r);\n        translate([w-r, h-r, d-r]) sphere(r=r);\n    }\n}\n\nmodule vertical_core(d, h, wall) {\n    // Create a hollow vertical core with flared ends\n    core_r = d/2;\n    \n    // Main core hole\n    rotate([90, 0, 0])\n        cylinder(h = block_w, r = core_r, center = true);\n    \n    // Flared bottom\n    translate([0, 0, wall/2])\n        cylinder(h = wall*1.5, r1 = core_r + 1, r2 = core_r, center = true);\n    \n    // Flared top\n    translate([0, 0, h - wall/2])\n        cylinder(h = wall*1.5, r1 = core_r, r2 = core_r + 1, center = true);\n}\n\nmodule top_texture() {\n    // Cinder block top surface indentations\n    indent_w = 3;\n    indent_d = 2;\n    indent_spacing = 8;\n    \n    for(x = [-35:indent_spacing:35]) {\n        for(z = [indent_spacing:indent_spacing:block_d-indent_spacing]) {\n            if(abs(x) > 10 || abs(x) < 5) {\n                translate([x, block_h - indent_d/2, z])\n                    cube([indent_w, indent_d, indent_w], center = true);\n            }\n        }\n    }\n}\n\nmodule side_reinforcement() {\n    // Side webbing pattern\n    web_h = 6;\n    web_d = 3;\n    \n    // Left side\n    translate([-block_w/2 - web_d/2, block_h/2, 0])\n        web_pattern(web_h, web_d);\n    \n    // Right side\n    translate([block_w/2 + web_d/2, block_h/2, 0])\n        mirror([1, 0, 0])\n            web_pattern(web_h, web_d);\n}\n\nmodule web_pattern(h, d) {\n    // Create webbing pattern on sides\n    for(z = [-15:10:15]) {\n        cube([d, h, 8], center = true);\n        translate([0, 0, z])\n            cube([d, h, 2], center = true);\n    }\n}\n\n// Render the model\ncinderrot();",
    "renders": true
  },
  {
    "household_item": "plaguewight",
    "openscad_code": "// Plaguewight - Medium complexity realistic style\n// Height: 75mm, designed for FDM printing\n\n$fn = 36;\n\n// Main assembly\nmodule plaguewight() {\n    union() {\n        // Head assembly\n        translate([0, 0, 65]) {\n            rotate([0, 0, 5]) {\n                head();\n            }\n        }\n        \n        // Torso\n        translate([0, 0, 35]) {\n            torso();\n        }\n        \n        // Arms\n        translate([15, 0, 55]) {\n            rotate([0, 0, -20]) {\n                arm();\n            }\n        }\n        translate([-15, 0, 55]) {\n            mirror([1, 0, 0]) {\n                rotate([0, 0, -20]) {\n                    arm();\n                }\n            }\n        }\n        \n        // Legs\n        translate([5, 0, 10]) {\n            leg();\n        }\n        translate([-5, 0, 10]) {\n            mirror([1, 0, 0]) {\n                leg();\n            }\n        }\n    }\n}\n\n// Head with plague mask\nmodule head() {\n    union() {\n        // Skull base\n        difference() {\n            sphere(8);\n            translate([0, 0, -6]) {\n                cube([20, 20, 12], center=true);\n            }\n        }\n        \n        // Plague mask\n        translate([0, 4, 0]) {\n            difference() {\n                // Main mask\n                hull() {\n                    translate([0, 0, -4]) sphere(7);\n                    translate([0, 8, 0]) sphere(6);\n                }\n                \n                // Eye holes\n                for(i = [-1, 1]) {\n                    translate([i * 3, 6, 2]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h=10, r=1.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Beak\n        translate([0, 10, -2]) {\n            scale([1, 1.5, 0.8]) {\n                sphere(4);\n            }\n        }\n    }\n}\n\n// Torso with robes\nmodule torso() {\n    union() {\n        // Body core\n        difference() {\n            cylinder(h=25, r1=9, r2=7);\n            translate([0, 0, 10]) {\n                cube([20, 20, 20], center=true);\n            }\n        }\n        \n        // Hood attachment\n        translate([0, 0, 24]) {\n            cylinder(h=3, r1=7, r2=8);\n        }\n        \n        // Ragged robe edges\n        for(i = [0:30:360]) {\n            rotate([0, 0, i]) {\n                translate([9, 0, 0]) {\n                    cube([2, 1, 8]);\n                }\n            }\n        }\n    }\n}\n\n// Arm with details\nmodule arm() {\n    union() {\n        // Upper arm\n        translate([0, 0, -7.5]) {\n            cylinder(h=15, r=3);\n        }\n        \n        // Elbow joint\n        sphere(3);\n        \n        // Lower arm\n        translate([0, 4, 7]) {\n            rotate([70, 0, 0]) {\n                cylinder(h=15, r=2.5);\n                \n                // Hand\n                translate([0, 0, 15]) {\n                    sphere(3);\n                    \n                    // Fingers\n                    for(j = [0:3]) {\n                        rotate([0, 0, j * 30 - 45]) {\n                            translate([2, 0, 0]) {\n                                cylinder(h=4, r=1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leg with details\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=20, r=4);\n        \n        // Knee\n        translate([0, 0, 20]) {\n            sphere(4);\n        }\n        \n        // Lower leg\n        translate([0, 0, 25]) {\n            cylinder(h=15, r=3.5);\n        }\n        \n        // Foot\n        translate([0, 3, 35]) {\n            scale([1, 2, 0.5]) {\n                sphere(4);\n            }\n        }\n    }\n}\n\n// Generate the model\nplaguewight();",
    "renders": true
  },
  {
    "household_item": "blackrot",
    "openscad_code": "// Blackrot - realistic style, medium complexity\n// 3D printable mushroom model with cap, gills, stem, and volva\n\n$fn = 60;  // Smooth curves for printing\n\nmodule mushroom() {\n    // Main cap with slight dome shape\n    difference() {\n        // Outer cap - ellipsoid shape\n        scale([1, 1, 0.6]) \n            sphere(d=60);\n        \n        // Hollow out cap from bottom\n        translate([0, 0, -5])\n            scale([0.9, 0.9, 1.2])\n                sphere(d=60);\n        \n        // Cap rim detail - slight indent\n        translate([0, 0, -2])\n            difference() {\n                cylinder(h=5, d=62);\n                cylinder(h=6, d=58);\n            }\n    }\n    \n    // Gills underneath cap\n    module gill() {\n        difference() {\n            cube([0.5, 28, 10]);\n            translate([0, 14, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=15, d1=0.5, d2=2);\n        }\n    }\n    \n    // Generate 16 gills radially\n    for (i = [0:22.5:360-22.5]) {\n        rotate([0, 0, i])\n            translate([0, 0, -8])\n                gill();\n    }\n    \n    // Central stem\n    difference() {\n        // Main stem cylinder\n        cylinder(h=35, d1=12, d2=10);\n        \n        // Hollow stem\n        translate([0, 0, -1])\n            cylinder(h=37, d1=8, d2=6);\n    }\n    \n    // Volva (cup at base)\n    difference() {\n        // Outer volva\n        translate([0, 0, -10])\n            cylinder(h=12, d1=20, d2=15);\n        \n        // Inner hollow\n        translate([0, 0, -11])\n            cylinder(h=14, d1=16, d2=11);\n    }\n    \n    // Stem texture - rings\n    for (z = [5:5:30]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=1.5, d=11.5);\n                cylinder(h=2, d=10.5);\n            }\n    }\n    \n    // Cap surface texture - small bumps\n    module bump() {\n        translate([0, 0, 0.5])\n            sphere(d=2);\n    }\n    \n    for (a = [0:30:330]) {\n        for (r = [15:10:25]) {\n            rotate([0, 0, a])\n                translate([r, 0, 28])\n                    bump();\n        }\n    }\n}\n\n// Assemble mushroom centered at origin\ntranslate([0, 0, 15])\n    mushroom();",
    "renders": true
  },
  {
    "household_item": "nightrotter",
    "openscad_code": "$fa = 1;\n$fs = 0.4;\n\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            translate([0, 0, 6])\n                scale([1, 0.7, 0.5])\n                sphere(d = 30);\n            \n            // Rear haunches\n            translate([-12, 0, 0])\n                rotate([0, 20, 0])\n                scale([0.8, 0.6, 0.7])\n                cylinder(h = 15, d = 14, center = true);\n                \n            translate([12, 0, 0])\n                rotate([0, -20, 0])\n                scale([0.8, 0.6, 0.7])\n                cylinder(h = 15, d = 14, center = true);\n        }\n        \n        // Hollow for printing\n        translate([0, 0, 6])\n            scale([0.8, 0.5, 0.3])\n            sphere(d = 28);\n    }\n}\n\nmodule head() {\n    translate([0, 22, 12])\n    rotate([15, 0, 0])\n    difference() {\n        union() {\n            // Skull\n            scale([0.7, 1.2, 0.9])\n            sphere(d = 18);\n            \n            // Snout\n            translate([0, 10, -3])\n                scale([0.6, 0.8, 0.5])\n                cylinder(h = 12, d = 10);\n                \n            // Ears\n            translate([-6, -5, 5])\n                rotate([30, 0, -30])\n                scale([0.3, 0.1, 1])\n                cylinder(h = 8, d = 6);\n                \n            translate([6, -5, 5])\n                rotate([30, 0, 30])\n                scale([0.3, 0.1, 1])\n                cylinder(h = 8, d = 6);\n        }\n        \n        // Eye sockets\n        translate([-4, 8, 2])\n            sphere(d = 4);\n            \n        translate([4, 8, 2])\n            sphere(d = 4);\n            \n        // Hollow head\n        scale([0.5, 0.9, 0.7])\n        sphere(d = 16);\n    }\n}\n\nmodule legs() {\n    for (x = [-8, 8], y = [-8, 8]) {\n        translate([x, y, 0])\n        rotate([0, x > 0 ? 10 : -10, 0])\n        difference() {\n            // Upper leg\n            cylinder(h = 12, d = 6);\n            \n            // Hollow\n            translate([0, 0, -1])\n                cylinder(h = 14, d = 4);\n        }\n        \n        translate([x, y, -12])\n        rotate([0, x > 0 ? 5 : -5, 0])\n        difference() {\n            // Lower leg\n            cylinder(h = 10, d = 4);\n            \n            // Hollow\n            translate([0, 0, -1])\n                cylinder(h = 12, d = 2.5);\n        }\n        \n        // Paw\n        translate([x, y, -22])\n        scale([1.2, 1, 0.6])\n        difference() {\n            sphere(d = 5);\n            \n            // Hollow\n            scale(0.6)\n            sphere(d = 5);\n        }\n    }\n}\n\nmodule tail() {\n    translate([0, -20, 4])\n    rotate([45, 0, 0])\n    difference() {\n        // Tail segments\n        for (i = [0:3]) {\n            translate([0, -i * 6, -i * 2])\n            scale([1 - i * 0.15, 1 - i * 0.1, 1 - i * 0.1])\n            sphere(d = 8);\n        }\n        \n        // Hollow tail\n        for (i = [0:3]) {\n            translate([0, -i * 6, -i * 2])\n            scale([0.6 - i * 0.1, 0.6 - i * 0.05, 0.6 - i * 0.05])\n            sphere(d = 8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "gravegeist",
    "openscad_code": "// Gravegeist - Realistic style, medium complexity\n// 3D printable ghost emerging from a grave\n\n$fn = 36;  // Smooth curves for realistic appearance\n\n// Overall scale\nscale_factor = 0.4;\n\n// Grave base dimensions\ngrave_width = 80 * scale_factor;\ngrave_length = 120 * scale_factor;\ngrave_height = 15 * scale_factor;\n\n// Ghost body dimensions\nbody_radius = 25 * scale_factor;\nbody_height = 60 * scale_factor;\n\n// Head dimensions\nhead_radius = 15 * scale_factor;\n\n// Arms\narm_length = 35 * scale_factor;\narm_radius = 6 * scale_factor;\n\nmodule grave_base() {\n    // Main gravestone base\n    difference() {\n        translate([0, 0, grave_height/2])\n            cube([grave_width, grave_length, grave_height], center=true);\n        \n        // Rounded top edge\n        translate([0, grave_length/2 - grave_height/2, grave_height])\n            cylinder(h=grave_height, r1=grave_height/2, r2=0);\n        translate([0, -grave_length/2 + grave_height/2, grave_height])\n            cylinder(h=grave_height, r1=grave_height/2, r2=0);\n    }\n    \n    // Ground detail\n    translate([0, 0, -1])\n        cube([grave_width + 10, grave_length + 10, 2], center=true);\n}\n\nmodule ghost_body() {\n    // Main ghost body - tapered cylinder\n    translate([0, 0, grave_height + body_height/2])\n        cylinder(h=body_height, r1=body_radius, r2=body_radius*0.7);\n    \n    // Head\n    translate([0, 0, grave_height + body_height + head_radius*0.8])\n        sphere(r=head_radius);\n    \n    // Hollow eyes\n    translate([-head_radius*0.4, head_radius*0.7, grave_height + body_height + head_radius*0.9])\n        sphere(r=head_radius*0.2);\n    translate([head_radius*0.4, head_radius*0.7, grave_height + body_height + head_radius*0.9])\n        sphere(r=head_radius*0.2);\n}\n\nmodule ghost_arms() {\n    // Left arm emerging from grave\n    translate([-body_radius*0.8, 0, grave_height + body_height*0.3])\n        rotate([0, 30, -30])\n            cylinder(h=arm_length, r=arm_radius);\n    \n    // Right arm\n    translate([body_radius*0.8, 0, grave_height + body_height*0.3])\n        rotate([0, -30, 30])\n            cylinder(h=arm_length, r=arm_radius);\n    \n    // Hand spheres\n    translate([-body_radius*0.8 - arm_length*sin(30), \n               arm_length*cos(30)*sin(30), \n               grave_height + body_height*0.3 + arm_length*cos(30)])\n        sphere(r=arm_radius*1.2);\n    \n    translate([body_radius*0.8 + arm_length*sin(30), \n               arm_length*cos(30)*sin(30), \n               grave_height + body_height*0.3 + arm_length*cos(30)])\n        sphere(r=arm_radius*1.2);\n}\n\nmodule ghost_tattered_cloak() {\n    // Tattered bottom edges\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([body_radius*0.8, 0, grave_height])\n                cylinder(h=body_height*0.3, r1=2*scale_factor, r2=0.5*scale_factor);\n    }\n}\n\nmodule gravegeist() {\n    grave_base();\n    ghost_body();\n    ghost_arms();\n    ghost_tattered_cloak();\n}\n\n// Main assembly\ngravegeist();",
    "renders": true
  },
  {
    "household_item": "dreadgeist",
    "openscad_code": "// Dreadgeist - Medium Complexity Realistic Style\n// An undead sea creature with barnacles and exposed bone\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 60;\nbody_width = 35;\nbody_height = 25;\n\nmodule dreadgeist() {\n    // Main skeletal body\n    union() {\n        // Central spine\n        translate([0, 0, body_height/2])\n            scale([body_length, body_width/2, body_height/2])\n                sphere(1);\n        \n        // Ribcage\n        for(i = [0:4]) {\n            rotate([0, i*15-30, 0])\n                translate([i*body_length/6 - body_length/2.5, 0, body_height/2])\n                    rib();\n        }\n        \n        // Skull\n        translate([-body_length/2 - 5, 0, body_height/2 + 5])\n            skull();\n        \n        // Tail vertebrae\n        for(i = [1:5]) {\n            translate([body_length/2 + i*6, 0, body_height/2 - i])\n                scale([0.8 - i*0.1, 0.8 - i*0.1, 0.8 - i*0.1])\n                    vertebra();\n        }\n        \n        // Barnacles\n        barnacles();\n        \n        // Fins\n        fin([body_length/4, body_width/2 + 5, body_height/3], 0);\n        fin([body_length/4, -body_width/2 - 5, body_height/3], 180);\n    }\n}\n\nmodule rib() {\n    // Single curved rib\n    hull() {\n        translate([0, 0, 0])\n            sphere(2);\n        translate([0, 10, 0])\n            sphere(1.5);\n        translate([0, 0, 8])\n            sphere(2);\n        translate([0, -10, 0])\n            sphere(1.5);\n    }\n}\n\nmodule skull() {\n    // Fish skull with empty eye sockets\n    difference() {\n        // Main skull shape\n        hull() {\n            translate([0, 0, 0])\n                sphere(6);\n            translate([-5, 0, 0])\n                sphere(5);\n            translate([5, 0, -2])\n                sphere(4);\n        }\n        \n        // Eye sockets\n        translate([-2, 3, 2])\n            sphere(2.5);\n        translate([-2, -3, 2])\n            sphere(2.5);\n        \n        // Mouth opening\n        translate([3, 0, -2])\n            cube([8, 6, 3], center=true);\n    }\n    \n    // Teeth\n    for(i = [-2:2]) {\n        translate([5, i*1.2, -3.5])\n            cylinder(h=3, r1=0.8, r2=0.3);\n    }\n}\n\nmodule vertebra() {\n    // Simple vertebra shape\n    union() {\n        cylinder(h=4, r=3);\n        translate([0, 0, 2])\n            sphere(3.5);\n    }\n}\n\nmodule barnacle(pos=[0,0,0]) {\n    // Single barnacle\n    translate(pos)\n        union() {\n            cylinder(h=2, r1=1.5, r2=2);\n            translate([0, 0, 2])\n                sphere(2);\n        }\n}\n\nmodule barnacles() {\n    // Random barnacles on body\n    for(i = [0:15]) {\n        angle = i*137.5;  // Golden angle for distribution\n        radius = body_width/2 * (0.3 + 0.7*abs(sin(i*3)));\n        x = body_length/2 * cos(i*0.5) - body_length/4;\n        y = radius * cos(angle);\n        z = body_height/2 + 3*sin(i*2);\n        \n        barnacle([x, y, z]);\n    }\n}\n\nmodule fin(pos, rot) {\n    // Translucent fin membrane\n    translate(pos)\n    rotate([0, 0, rot]) {\n        // Fin bones\n        for(i = [0:3]) {\n            rotate([0, i*20-30, 0])\n                translate([0, i*2, 0])\n                    cube([12, 1, 1]);\n        }\n        \n        // Fin membrane\n        translate([6, 0, -0.5])\n            scale([0.5, 1, 0.3])\n                cube([12, 12, 1]);\n    }\n}\n\n// Scale to reasonable print size\nscale(1.2)\n    dreadgeist();",
    "renders": true
  },
  {
    "household_item": "boneshade",
    "openscad_code": "// Bone-Shade Lamp (realistic, medium complexity)\n// Overall height = 70 mm, diameter ≈ 60 mm\n// Designed for a 5 mm LED puck and 2 mm wall thickness\n\n$fn=36;\n\n// Main module -------------------------------------------------\nmodule boneshade() {\n    difference() {\n        union() {\n            // Outer shade with bone contour\n            bone_shell();\n\n            // Threaded socket ring for LED puck\n            translate([0,0,3]) \n                cylinder(h=6, d1=22, d2=22);  // 2 mm thick ring\n        }\n\n        // Remove internal void and LED cavity\n        translate([0,0,-1]) \n            cylinder(h=72, d=56);           // Hollow core\n        translate([0,0,3]) \n            cylinder(h=8, d=20);            // LED pocket\n    }\n\n    // Decorative grooves around the “joints”\n    for(z=[16, 34, 52]) joint_grooves(z);\n\n    // Pin-holes for ventilation\n    for(a=[0:120:359]) \n        rotate([0,0,a]) \n            translate([26,0,35]) \n                rotate([90,0,0]) \n                    cylinder(h=4, d=2.4);   // 1 mm wall left\n}\n\n// Realistic bone shell profile -------------------------------\nmodule bone_shell() {\n    // Swept profile built from stacked ellipses\n    for(i=[0:2:70]) {\n        h = i;\n        r = bone_radius(h);\n        translate([0,0,h]) \n            scale([r, r, 1]) \n                cylinder(h=2, d=1, center=true);\n    }\n}\n\n// Radius function for bone shape -----------------------------\nfunction bone_radius(z) =\n    let(ep = 0.15, mid = 35)\n    30 * (1 - ep * pow((z - mid)/mid, 2) * (1 - 0.25*cos(z*8)));\n\n// Joint ring grooves -----------------------------------------\nmodule joint_grooves(z) {\n    difference() {\n        translate([0,0,z]) \n            cylinder(h=3, d=60);        // Thin ring\n        translate([0,0,z-0.1]) \n            cylinder(h=3.2, d=54);      // Cut away center\n    }\n}\n\nboneshade();",
    "renders": true
  },
  {
    "household_item": "bloodrot",
    "openscad_code": "// Realistic medium-complexity bloodrot model (bleeding mushroom)\n// Size: ~60 mm tall, printable without supports\n\n$fn = 32;          // Smooth curves\nwall = 1.2;        // 3D-print friendly wall thickness\n\nmodule stem(h = 25, r = 6) {\n    // Main hollow stem with slight taper\n    difference() {\n        cylinder(h = h, r1 = r, r2 = r * 0.85, center = false);\n        translate([0, 0, wall])\n            cylinder(h = h - 2 * wall, r1 = r - wall, r2 = r * 0.85 - wall, center = false);\n    }\n}\n\nmodule gills(d = 40, h = 3) {\n    // Radial gills under cap\n    for (a = [0 : 15 : 180]) {\n        rotate([0, 0, a])\n            translate([0, 0, -h])\n                cube([d * 0.45, 0.8, h], center = true);\n    }\n}\n\nmodule cap(d = 40, h = 18) {\n    // Bell-shaped cap with hollow cavity\n    difference() {\n        // Outer cap dome\n        scale([1, 1, 0.7])\n            sphere(d = d);\n        // Inner cavity\n        translate([0, 0, -h * 0.3])\n            scale([1, 1, 0.75])\n                sphere(d = d - 2 * wall);\n        // Flat underside for gills\n        translate([0, 0, -h * 0.5])\n            cube([d * 2, d * 2, h], center = true);\n    }\n}\n\nmodule blood_drops(n = 8) {\n    // Dripping blood droplets\n    for (i = [0 : n - 1]) {\n        angle = i * 360 / n + 15 * sin(i * 137.5);\n        radius = 18 + 3 * cos(i * 2);\n        translate([\n            radius * cos(angle),\n            radius * sin(angle),\n            -7 - 2 * sin(i * 50)\n        ])\n            scale([0.7, 0.7, 1.2])\n                sphere(d = 3.5 + 1 * sin(i * 60));\n    }\n}\n\nmodule cracks() {\n    // Surface cracks for realism\n    for (j = [0 : 10]) {\n        rotate([0, 0, j * 36 + 5 * sin(j * 12)])\n            translate([0, 0, -2])\n                rotate([90 + 5 * sin(j * 8), 0, 0])\n                    scale([1, 1, 0.3])\n                        cylinder(h = 15, r = 0.4 + 0.2 * sin(j * 5));\n    }\n}\n\nmodule bloodrot() {\n    // Assemble the mushroom\n    color(\"darkred\")\n    union() {\n        // Stem\n        translate([0, 0, 0])\n            stem();\n\n        // Cap\n        translate([0, 0, 25])\n            cap();\n\n        // Gills\n        translate([0, 0, 25])\n            gills();\n\n        // Blood droplets under cap\n        translate([0, 0, 25])\n            blood_drops();\n\n        // Cracks on cap surface\n        translate([0, 0, 25 + 18 * 0.7 / 2])\n            cracks();\n    }\n}\n\nbloodrot();",
    "renders": true
  },
  {
    "household_item": "darkgeist",
    "openscad_code": "// DarkGeist – realistic, medium-complexity OpenSCAD model\n// No supports needed; 0.4 mm nozzle friendly, 50 mm tall\n\n$fn = 64;\n\n// overall scale\nscale(0.5) {\n\n    // hood & head\n    union() {\n        // hood\n        difference() {\n            translate([0, 0, 30])\n                rotate_extrude(angle=180)\n                    polygon([[0,0], [20,0], [20,25], [17,30], [0,30]]);\n            // inner hollow\n            translate([0, 0, 30])\n                rotate_extrude(angle=180)\n                    polygon([[0,0], [18,0], [18,23], [15,28], [0,28]]);\n        }\n        // head sphere\n        translate([0, 0, 20])\n            sphere(12);\n    }\n\n    // torso\n    difference() {\n        union() {\n            // chest\n            translate([0, 0, 0])\n                scale([1.1, 0.7, 1.3])\n                    sphere(20);\n            // waist\n            translate([0, 0, -22])\n                scale([0.8, 0.5, 1])\n                    sphere(20);\n        }\n        // hollow\n        translate([0, 0, -20])\n            scale([0.9, 0.6, 1.2])\n                sphere(19);\n    }\n\n    // arms\n    module arm() {\n        union() {\n            // shoulder\n            translate([0, 0, 0])\n                sphere(8);\n            // upper arm\n            translate([0, -2, -10])\n                rotate([0, 20, 0])\n                    scale([0.8, 0.8, 1])\n                        cylinder(h=22, r1=6, r2=4);\n            // forearm\n            translate([0, -5, -30])\n                rotate([0, 30, 0])\n                    cylinder(h=20, r1=4, r2=3);\n            // hand\n            translate([0, -6, -48])\n                sphere(5);\n        }\n    }\n    // left arm\n    translate([-25, 0, 10])\n        rotate([0, 0, 15])\n            arm();\n    // right arm\n    mirror([1, 0, 0])\n        translate([-25, 0, 10])\n            rotate([0, 0, 15])\n                arm();\n\n    // legs\n    module leg() {\n        union() {\n            // thigh\n            translate([0, 0, 0])\n                cylinder(h=25, r1=8, r2=7);\n            // shin\n            translate([0, 0, -25])\n                cylinder(h=20, r1=7, r2=5);\n            // foot\n            translate([0, -5, -42])\n                cube([10, 20, 5], center=true);\n        }\n    }\n    // left leg\n    translate([-10, 0, -40])\n        rotate([10, 0, 0])\n            leg();\n    // right leg\n    translate([10, 0, -40])\n        rotate([10, 0, 0])\n            leg();\n\n    // cape strips\n    for(i=[-30:10:30]) {\n        translate([i*0.9, 0, 15])\n            rotate([90, 0, i*1.5])\n                scale([1, 0.1, 1])\n                    cylinder(h=45, r1=1.5, r2=2);\n    }\n\n    // belt\n    difference() {\n        translate([0, 0, -10])\n            cylinder(h=6, r=22);\n        translate([0, 0, -9])\n            cylinder(h=4, r=20);\n    }\n\n    // skull emblem on belt\n    translate([0, 22, -7])\n        rotate([90, 0, 0])\n            sphere(4);\n    translate([0, 22, -9])\n        cube([2, 2, 1], center=true);\n    translate([0, 22, -11])\n        cube([6, 1, 1], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "skullrot",
    "openscad_code": "// Skullrot - Realistic medium complexity\n// Overall dimensions: ~60mm tall\n\n// Base parameters\n$fn = 32; // Smooth curves\nwall = 2; // Print-friendly wall thickness\nscale = 0.6; // Scale factor for printability\n\n// Main skull module\nmodule skull() {\n    // Cranium\n    difference() {\n        sphere(d = 40 * scale);\n        \n        // Hollow out\n        sphere(d = (40 - wall*2) * scale);\n        \n        // Jaw socket\n        translate([0, 12 * scale, -15 * scale])\n            cube([25 * scale, 18 * scale, 20 * scale], center = true);\n    }\n    \n    // Facial area\n    translate([0, 12 * scale, -5 * scale])\n        difference() {\n            cube([28 * scale, 20 * scale, 30 * scale], center = true);\n            translate([0, 0, 5 * scale])\n                cube([(28 - wall*2) * scale, (20 - wall*2) * scale, 35 * scale], center = true);\n        }\n    \n    // Eye sockets\n    for(x = [-8, 8]) {\n        translate([x * scale, 8 * scale, 5 * scale]) {\n            rotate([0, 0, 25 * (x > 0 ? -1 : 1)])\n            difference() {\n                cylinder(h = 15 * scale, d1 = 12 * scale, d2 = 8 * scale);\n                translate([0, 0, -1])\n                    cylinder(h = 17 * scale, d1 = 10 * scale, d2 = 6 * scale);\n            }\n        }\n    }\n    \n    // Nasal cavity\n    translate([0, 16 * scale, 0 * scale])\n        difference() {\n            cube([14 * scale, 8 * scale, 12 * scale], center = true);\n            translate([0, 0, -1])\n                cube([12 * scale, 6 * scale, 14 * scale], center = true);\n        }\n    \n    // Jaw\n    translate([0, -2 * scale, -25 * scale])\n        jaw();\n}\n\n// Jaw module\nmodule jaw() {\n    union() {\n        // Main jaw bone\n        difference() {\n            cube([30 * scale, 20 * scale, 25 * scale], center = true);\n            translate([0, 0, 5 * scale])\n                cube([(30 - wall*2) * scale, (20 - wall*2) * scale, 30 * scale], center = true);\n        }\n        \n        // Teeth\n        for(i = [-3:3]) {\n            if(abs(i) < 3) {\n                translate([i * 4 * scale, -8 * scale, -12 * scale])\n                    tooth();\n            }\n        }\n        \n        // Back molars\n        for(x = [-10, 10]) {\n            translate([x * scale, -8 * scale, -8 * scale])\n                scale([1.5, 1, 1.2])\n                    tooth();\n        }\n    }\n}\n\n// Individual tooth\nmodule tooth() {\n    difference() {\n        cylinder(h = 8 * scale, d1 = 3 * scale, d2 = 2 * scale);\n        translate([0, 0, -1])\n            cylinder(h = 10 * scale, d1 = 2 * scale, d2 = 1 * scale);\n    }\n}\n\n// Main assembly\nskull();",
    "renders": true
  },
  {
    "household_item": "deathrot",
    "openscad_code": "// Deathrot - Realistic Style, Medium Complexity\n// A menacing skull with decaying details, suitable for 3D printing\n\n$fn = 36;\n\n// Overall dimensions\nskull_width = 60;\nskull_height = 70;\nskull_depth = 80;\n\n// Wall thickness for printing\nwall = 2;\n\nmodule skull_base() {\n    difference() {\n        // Main skull shape\n        union() {\n            // Cranial dome\n            translate([0, 0, skull_height/2])\n                scale([1, 0.8, 1])\n                sphere(skull_width/2);\n            \n            // Facial area\n            translate([0, -skull_depth/3, 0])\n                cube([skull_width*0.9, skull_depth/1.5, skull_height*0.7], center=true);\n        }\n        \n        // Hollow out for printing\n        translate([0, 0, -wall])\n            scale([1, 1, 0.9])\n            cube([skull_width-wall*2, skull_depth-wall*2, skull_height-wall*2], center=true);\n    }\n}\n\nmodule eye_socket(pos_x, pos_z) {\n    translate([pos_x, skull_depth/2.5, pos_z])\n        rotate([0, 10, 0])\n        scale([1, 1.2, 0.8])\n        sphere(skull_width/6);\n}\n\nmodule nasal_cavity() {\n    translate([0, -skull_depth/3, skull_height/4])\n        rotate([15, 0, 0])\n        cube([skull_width/4, skull_depth/5, skull_height/6], center=true);\n}\n\nmodule jaw() {\n    difference() {\n        union() {\n            // Main jaw structure\n            translate([0, -skull_depth/2, -skull_height/3])\n                cube([skull_width*0.85, skull_depth/3, skull_height/3], center=true);\n            \n            // Chin\n            translate([0, -skull_depth/1.5, -skull_height/2])\n                sphere(skull_width/3);\n        }\n        \n        // Hollow jaw\n        translate([0, -skull_depth/2, -skull_height/3])\n            cube([skull_width*0.85-wall*2, skull_depth/3-wall*2, skull_height/3-wall*2], center=true);\n    }\n}\n\nmodule teeth(count) {\n    for (i = [-count/2:count/2-1]) {\n        translate([i * (skull_width/(count+1)), -skull_depth/2, -skull_height/2.5])\n            cylinder(h=skull_height/12, r=skull_width/20, center=true);\n    }\n}\n\nmodule cracks() {\n    // Add some decay cracks\n    for (i = [0:5]) {\n        rotate([0, 0, i*30])\n        translate([sin(i*45)*skull_width/4, -skull_depth/4+i*3, skull_height/3-i*5])\n            scale([0.5, 0.1, 2])\n            sphere(skull_width/15);\n    }\n}\n\nmodule cheek_bones() {\n    // Left cheek\n    translate([-skull_width/2.5, -skull_depth/4, 0])\n        scale([0.6, 1, 0.8])\n        sphere(skull_width/4);\n    \n    // Right cheek\n    translate([skull_width/2.5, -skull_depth/4, 0])\n        scale([0.6, 1, 0.8])\n        sphere(skull_width/4);\n}\n\n// Assemble the deathrot\nunion() {\n    skull_base();\n    \n    // Eye sockets\n    eye_socket(-skull_width/4, skull_height/4);\n    eye_socket(skull_width/4, skull_height/4);\n    \n    // Nasal cavity\n    nasal_cavity();\n    \n    // Jaw\n    jaw();\n    \n    // Teeth\n    teeth(8);\n    \n    // Cheek bones\n    cheek_bones();\n    \n    // Decay details\n    cracks();\n}\n\n// Base for stability during printing\ntranslate([0, 0, -skull_height/2-2])\n    cube([skull_width*1.2, skull_depth*1.2, 2], center=true);",
    "renders": true
  },
  {
    "household_item": "voidgeist",
    "openscad_code": "// Voidgeist - Medium Complexity Realistic Style\n// A spectral entity emerging from the void\n\n$fn = 64;\n\n// Main module for the voidgeist\nmodule voidgeist() {\n    // Base platform with void rift\n    difference() {\n        cylinder(h = 3, d1 = 40, d2 = 35);\n        translate([0, 0, -0.5])\n            cylinder(h = 4, d1 = 25, d2 = 20);\n    }\n    \n    // Central ethereal body\n    translate([0, 0, 3])\n    union() {\n        // Core sphere with hollow center\n        difference() {\n            sphere(d = 20);\n            sphere(d = 15);\n        }\n        \n        // Upper torso extension\n        translate([0, 0, 8])\n        scale([0.8, 0.8, 1.2])\n            sphere(d = 15);\n    }\n    \n    // Void tendrils - 8 symmetric tentacles\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([12, 0, 5])\n        rotate([90, 0, 0])\n        scale([0.8, 0.8, 1])\n        tendril();\n    }\n    \n    // Lower ethereal wisps\n    for (j = [0:5]) {\n        rotate([0, 0, j * 60])\n        translate([8, 0, 2])\n        rotate([30, 0, 0])\n        wisp();\n    }\n    \n    // Eye sockets\n    translate([0, 0, 10])\n    for (eye = [-1, 1]) {\n        translate([eye * 6, 4, 0])\n        rotate([0, 90, 0])\n        eye_socket();\n    }\n    \n    // Crown of void shards\n    translate([0, 0, 18])\n    for (k = [0:5]) {\n        rotate([0, 0, k * 60])\n        translate([8, 0, 0])\n        shard();\n    }\n}\n\n// Tendril module\nmodule tendril() {\n    hull() {\n        cylinder(h = 8, d1 = 4, d2 = 2);\n        translate([0, 0, 8])\n            sphere(d = 3);\n    }\n}\n\n// Wisp module\nmodule wisp() {\n    scale([0.3, 0.3, 1])\n    cylinder(h = 6, d1 = 2, d2 = 0.5);\n}\n\n// Eye socket module\nmodule eye_socket() {\n    difference() {\n        cylinder(h = 4, d = 5);\n        translate([0, 0, -0.5])\n            cylinder(h = 5, d = 3);\n    }\n}\n\n// Shard module\nmodule shard() {\n    difference() {\n        scale([0.5, 2, 0.5])\n            cylinder(h = 8, d = 3);\n        translate([0, 0, -0.5])\n            scale([0.4, 1.8, 0.4])\n            cylinder(h = 9, d = 2.5);\n    }\n}\n\n// Generate the model\nvoidgeist();",
    "renders": true
  },
  {
    "household_item": "ashrot",
    "openscad_code": "// OpenSCAD Ashrot (Assault Rifle) – realistic, medium complexity\n// 1 unit = 1 mm.  Overall length ≈ 90 mm, printable without support\n\n// Wall thickness and clearances for FDM\nwall = 2;\nmag_clear = 1.5;\n\n// Main module\nmodule ashrot() {\n    // Barrel group\n    barrel();\n\n    // Upper receiver / handguard\n    upper();\n\n    // Lower receiver (grip + magwell)\n    lower();\n\n    // Stock\n    stock();\n\n    // Magazine\n    translate([0,-mag_clear,0]) magazine();\n}\n\n// ---- Barrel (threaded muzzle + thin cylinder) ----\nmodule barrel() {\n    color(\"gray\")\n    union() {\n        // Muzzle brake\n        translate([90,0,0])\n        cylinder(h=8, d1=10, d2=8, $fn=20);\n\n        // Barrel tube\n        translate([45,0,0])\n        rotate([0,90,0])\n        cylinder(h=90, d=8, $fn=20);\n    }\n}\n\n// ---- Upper receiver + handguard ----\nmodule upper() {\n    color(\"black\")\n    difference() {\n        // Main block\n        translate([45,0,8])\n        cube([70, 20, 18], center=true);\n\n        // Picatinny rail slots (top)\n        for (i=[-25:5:25]) {\n            translate([i, 0, 16])\n            cube([3, 20, 3], center=true);\n        }\n\n        // Ejection port\n        translate([25, 11, 8])\n        cube([15, 2, 6], center=true);\n    }\n}\n\n// ---- Lower receiver (grip + magwell) ----\nmodule lower() {\n    color(\"darkgreen\")\n    union() {\n        // Receiver body\n        translate([25,0,0])\n        cube([45, 18, 30], center=true);\n\n        // Pistol grip\n        translate([0,0,-20])\n        grip();\n\n        // Magwell\n        translate([20,0,-8])\n        cube([15+wall*2, 12+wall*2, 25], center=true);\n    }\n}\n\n// Pistol grip helper\nmodule grip() {\n    hull() {\n        // Narrow neck\n        translate([0,0,-10])\n        cube([10, 10, 15], center=true);\n\n        // Wide base\n        translate([0,0,-25])\n        cube([14, 14, 10], center=true);\n    }\n}\n\n// ---- Stock ----\nmodule stock() {\n    color(\"gray\")\n    difference() {\n        // Basic stock shape\n        translate([-15,0,-5])\n        cube([30, 12, 20], center=true);\n\n        // Cheek rest cut\n        translate([-15,0,3])\n        cube([20, 13, 6], center=true);\n    }\n}\n\n// ---- Magazine ----\nmodule magazine() {\n    color(\"black\")\n    difference() {\n        // Body\n        translate([20, 0, -30])\n        cube([15, 10, 30], center=true);\n\n        // Base plate\n        translate([20, 0, -45])\n        cube([16, 11, 5], center=true);\n\n        // Internal cavity for realism\n        translate([20, 0, -30])\n        cube([15-wall*2, 10-wall*2, 25], center=true);\n    }\n}\n\n// Assemble the model\nashrot();",
    "renders": true
  },
  {
    "household_item": "gloomrot",
    "openscad_code": "// Gloomrot realistic style - medium complexity\n// Main body with realistic fungal decay patterns\n\n$fn = 32;\n\nmodule gloomrot_body() {\n    // Central bulbous core\n    difference() {\n        sphere(d = 40);\n        \n        // Subtraction for decay patterns\n        for (i = [0:35:360]) {\n            rotate([0, 0, i]) \n            translate([0, 15, 5])\n            rotate([90, 0, 0])\n            cylinder(h = 20, d1 = 12, d2 = 6, $fn = 6);\n        }\n    }\n}\n\nmodule gill_structures() {\n    // Realistic gills underneath\n    for (r = [15:5:35]) {\n        rotate_extrude(angle = 360, $fn = 64)\n        translate([r, 0, 0])\n        circle(d = 2);\n    }\n}\n\nmodule decay_spots() {\n    // Surface decay spots\n    for (i = [0:45:360]) {\n        for (j = [0:30:180]) {\n            rotate([j, 0, i])\n            translate([0, 0, 20])\n            sphere(d = 3 + (i % 5));\n        }\n    }\n}\n\nmodule stalk() {\n    // Tapered stalk with realistic texture\n    difference() {\n        cylinder(h = 25, d1 = 12, d2 = 8);\n        \n        // Texture grooves\n        for (i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([6, 0, 0])\n            cube([1, 1, 25]);\n        }\n    }\n}\n\nmodule root_tendrils() {\n    // Realistic root-like tendrils\n    for (i = [0:72:360]) {\n        rotate([0, 0, i])\n        translate([0, 8, -25])\n        rotate([90 + (i % 15), 0, 0])\n        cylinder(h = 8 + (i % 10), d1 = 2, d2 = 1);\n    }\n}\n\nmodule veil_remains() {\n    // Ragged veil remnants\n    difference() {\n        cylinder(h = 8, d = 44);\n        \n        // Tears in veil\n        for (i = [0:60:360]) {\n            rotate([0, 0, i])\n            translate([22, 0, 0])\n            cube([8, 3, 8]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body assembly\n    translate([0, 0, 25])\n    gloomrot_body();\n    \n    // Gills\n    translate([0, 0, 5])\n    gill_structures();\n    \n    // Decay spots\n    decay_spots();\n    \n    // Veil\n    translate([0, 0, 17])\n    veil_remains();\n    \n    // Stalk\n    stalk();\n    \n    // Root tendrils\n    root_tendrils();\n}",
    "renders": true
  },
  {
    "household_item": "flesherot",
    "openscad_code": "$fs = 0.5;\n$fa = 1;\n\n// Overall dimensions\nbase_d = 40;\nbase_h = 8;\nshaft_d = 12;\nshaft_h = 28;\nhead_d = 22;\nhead_h = 18;\ngrip_d = 6;\ngrip_l = 10;\ngrip_count = 8;\nwall_t = 2;\n\nmodule base() {\n    difference() {\n        cylinder(h = base_h, d = base_d);\n        cylinder(h = base_h + 1, d = base_d - 2*wall_t);\n    }\n}\n\nmodule shaft() {\n    translate([0, 0, base_h]) {\n        cylinder(h = shaft_h, d = shaft_d);\n    }\n}\n\nmodule grip() {\n    translate([-grip_d/2, -grip_l/2, 0])\n    cube([grip_d, grip_l, base_h/2]);\n}\n\nmodule grips() {\n    for(i = [0 : grip_count-1]) {\n        rotate([0, 0, i*360/grip_count])\n        translate([base_d/2 - wall_t, 0, base_h/4])\n        grip();\n    }\n}\n\nmodule head() {\n    translate([0, 0, base_h + shaft_h]) {\n        difference() {\n            union() {\n                cylinder(h = head_h, d = head_d);\n                translate([0, 0, head_h])\n                cylinder(h = 4, d1 = head_d, d2 = head_d + 6);\n            }\n            cylinder(h = head_h + 5, d = head_d - 2*wall_t);\n        }\n    }\n}\n\nmodule blade() {\n    // Simple triangular cutting edge\n    translate([0, 0, base_h + shaft_h + head_h/2])\n    rotate([90, 0, 0])\n    linear_extrude(height = wall_t*2)\n    polygon(points = [[-head_d/3, -head_h/2], [head_d/3, -head_h/2], [0, head_h/2]]);\n}\n\nmodule blades() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90 + 45])\n        blade();\n    }\n}\n\n// Main assembly\nunion() {\n    base();\n    grips();\n    shaft();\n    head();\n    blades();\n}",
    "renders": true
  },
  {
    "household_item": "shadowgeist",
    "openscad_code": "// Shadowgeist in realistic style - medium complexity\n// 3D printable without supports\n\n$fn = 32;  // Smooth curves\n\n// Main body - cloaked figure\nmodule body() {\n    // Torso base\n    translate([0, 0, 8]) \n        scale([1, 0.6, 1.2]) \n            sphere(15);\n    \n    // Shoulders\n    for(x = [-1, 1]) {\n        translate([x * 12, 0, 20])\n            rotate([90, 0, 0])\n                cylinder(h = 8, r1 = 7, r2 = 5);\n    }\n    \n    // Lower body - tapered\n    translate([0, 0, 5])\n        scale([1.2, 0.8, 0.5]) \n            sphere(12);\n}\n\n// Hood with depth\nmodule hood() {\n    difference() {\n        // Outer hood\n        translate([0, 0, 25])\n            rotate([0, 0, 0])\n                scale([1.3, 1.5, 1])\n                    sphere(12);\n        \n        // Inner cavity\n        translate([0, 2, 25])\n            scale([1.1, 1.2, 0.8])\n                sphere(10);\n    }\n}\n\n// Face - void with glowing eyes\nmodule face() {\n    // Eye sockets\n    for(x = [-1, 1]) {\n        translate([x * 5, -8, 25])\n            rotate([0, -10, 0])\n                scale([1, 1.2, 0.5])\n                    sphere(3);\n    }\n    \n    // Mouth slit\n    translate([0, -12, 20])\n        rotate([0, -20, 0])\n            scale([1.5, 0.3, 0.5])\n                cube([8, 3, 2], center = true);\n}\n\n// Wispy tendrils from base\nmodule tendrils() {\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([sin(i * 30) * 12, cos(i * 30) * 12, 0])\n                scale([0.3, 0.3, 1 + sin(i * 5) * 0.5])\n                    cylinder(h = 10 + i * 0.5, r1 = 2, r2 = 0.5);\n    }\n}\n\n// Arms positioned forward\nmodule arms() {\n    for(side = [-1, 1]) {\n        rotate([0, 0, side * 30])\n            translate([side * 18, 0, 15])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, r1 = 3, r2 = 2);\n    }\n}\n\n// Base stand\nmodule base() {\n    difference() {\n        cylinder(h = 3, r = 25);\n        cylinder(h = 3.1, r = 20);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    tendrils();\n    \n    translate([0, 0, 3])\n        union() {\n            body();\n            hood();\n            face();\n            arms();\n        }\n}",
    "renders": true
  },
  {
    "household_item": "plaguegeist",
    "openscad_code": "// Plaguegeist - realistic medium-complexity model\n// Height ≈ 70 mm, printable without supports\n\n$fn = 32;\nwall = 1.2;\n\nmodule body() {\n    union() {\n        // main torso\n        translate([0,0,20])\n            scale([1,0.8,1.4])\n            sphere(15);\n\n        // lower abdomen\n        translate([0,0,8])\n            cube([20, 16, 16], center=true);\n\n        // hunched back\n        translate([0,7,28])\n            rotate([10,0,0])\n            scale([0.9,1,0.7])\n            sphere(12);\n    }\n}\n\nmodule head() {\n    difference() {\n        union() {\n            // skull\n            translate([0,0,34])\n                scale([0.8,0.9,1.2])\n                sphere(10);\n\n            // elongated jaw\n            translate([0,0,28])\n                scale([0.5,0.6,1.6])\n                sphere(7);\n        }\n\n        // eye sockets\n        for(x=[-4,4])\n            translate([x,4,38])\n                sphere(3);\n\n        // nasal cavity\n        translate([0,8,36])\n            scale([0.8,0.3,1])\n            sphere(3);\n    }\n}\n\nmodule arm(side) {\n    mirror([side,0,0]) {\n        translate([11,0,25])\n            rotate([0,0,side*10])\n            union() {\n                // upper arm\n                rotate([90,0,0])\n                    cylinder(h=12, r1=4, r2=3);\n\n                // elbow\n                translate([0,0,-12])\n                    sphere(3);\n\n                // lower arm\n                translate([0,0,-12])\n                    rotate([90,side*20,0])\n                        cylinder(h=15, r1=3, r2=2);\n\n                // hand\n                translate([0,0,-27])\n                    scale([0.8,0.4,1])\n                        sphere(3.5);\n            }\n    }\n}\n\nmodule leg(side) {\n    mirror([side,0,0]) {\n        translate([5,0,0])\n            union() {\n                // thigh\n                cylinder(h=15, r=4);\n\n                // knee\n                translate([0,0,15])\n                    sphere(4);\n\n                // calf\n                translate([0,0,15])\n                    rotate([side*15,0,0])\n                        cylinder(h=15, r1=4, r2=3);\n\n                // foot\n                translate([0,0,30])\n                    scale([1.5,0.8,0.8])\n                        cube([6,8,4], center=true);\n            }\n    }\n}\n\nmodule backpack() {\n    difference() {\n        union() {\n            // main container\n            translate([0,-12,25])\n                scale([1.2,0.6,1.4])\n                    cube([14,10,20], center=true);\n\n            // lid\n            translate([0,-12,38])\n                rotate([20,0,0])\n                    cube([14,10,6], center=true);\n        }\n        \n        // hollow inside\n        translate([0,-12,25])\n            scale([1,0.5,1.2])\n                cube([12,10,18], center=true);\n    }\n}\n\nmodule vial(x,z) {\n    translate([x,-12,z])\n        difference() {\n            cylinder(h=8, r1=2.5, r2=2);\n            translate([0,0,wall])\n                cylinder(h=8, r1=2.5-wall, r2=2-wall);\n        }\n}\n\nmodule vials() {\n    for(i=[-6,-2,2,6])\n        vial(i, 35);\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    \n    arm(1);\n    arm(-1);\n    \n    leg(1);\n    leg(-1);\n    \n    backpack();\n    vials();\n}",
    "renders": true
  },
  {
    "household_item": "blackling",
    "openscad_code": "// Realistic Blackling (Tadpole) Model - Medium Complexity\n// Total length ~65mm\n\n// Body parameters\nbody_length = 40;\nmax_body_diameter = 25;\nhead_diameter = 20;\ntail_length = 25;\ntail_width = 15;\ntail_thickness = 8;\n\n// Eye parameters\neye_diameter = 4;\neye_offset = 8;\n\n// Fin parameters\nfin_height = 6;\nfin_segments = 7;\nfin_thickness = 1.5;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body - egg-like shape made from spheres\nmodule main_body() {\n    // Head sphere\n    translate([0, 0, 0])\n        sphere(d=head_diameter, $fn=32);\n    \n    // Body taper - blend spheres\n    translate([-body_length/4, 0, 0])\n        sphere(d=max_body_diameter, $fn=32);\n    \n    // Additional spheres for smooth transition\n    translate([-body_length/2, 0, 0])\n        sphere(d=max_body_diameter*0.8, $fn=32);\n}\n\n// Tail - tapered cylinder with rounded end\nmodule tail() {\n    // Main tail - ellipsoid shape\n    translate([-body_length/2 - tail_length/2, 0, 0])\n        scale([1.5, 1, 0.5])\n            sphere(d=tail_width, $fn=32);\n    \n    // Tail tip - small sphere\n    translate([-body_length/2 - tail_length, 0, 0])\n        sphere(d=tail_width/3, $fn=16);\n}\n\n// Dorsal fin - segmented along tail\nmodule dorsal_fin() {\n    for(i=[0:fin_segments-1]) {\n        translate([\n            -body_length/2 - tail_length*(i+0.5)/fin_segments,\n            0,\n            max_body_diameter/2 + fin_height*(1-i/fin_segments)/2\n        ]) {\n            // Each fin segment\n            scale([tail_length/fin_segments/2, tail_width/4, fin_height*(1-i/fin_segments)])\n                cube([1, 1, 1], center=true);\n        }\n    }\n}\n\n// Eyes - protruding spheres\nmodule eyes() {\n    // Left eye\n    translate([eye_offset/2, head_diameter/2 - eye_diameter/2, head_diameter/2 - eye_diameter/2])\n        sphere(d=eye_diameter, $fn=16);\n    \n    // Right eye\n    translate([eye_offset/2, -(head_diameter/2 - eye_diameter/2), head_diameter/2 - eye_diameter/2])\n        sphere(d=eye_diameter, $fn=16);\n}\n\n// Mouth - small depression\nmodule mouth() {\n    translate([head_diameter/2 - 1, 0, -head_diameter/4])\n        rotate([0, 90, 0])\n            cylinder(h=head_diameter/3, d1=head_diameter/6, d2=head_diameter/8, $fn=16);\n}\n\n// Hollow out the model for 3D printing\nmodule hollow_model() {\n    difference() {\n        // Main solid\n        union() {\n            main_body();\n            tail();\n            dorsal_fin();\n            eyes();\n        }\n        \n        // Internal cavity\n        scale([0.8, 0.8, 0.8])\n            union() {\n                translate([0, 0, -wall])\n                    main_body();\n                translate([-wall, 0, -wall])\n                    tail();\n            }\n        \n        // Drainage hole (underside)\n        translate([0, 0, -max_body_diameter/2 - 1])\n            cylinder(h=2, d=5, $fn=16);\n    }\n}\n\n// Create the complete blackling\nhollow_model();",
    "renders": true
  },
  {
    "household_item": "nightling",
    "openscad_code": "// Nightling - Realistic Style, Medium Complexity\n// A small owl-like creature for 3D printing\n\n// Main parameters\nbody_radius = 12;\nbody_height = 25;\nhead_radius = 10;\nwing_span = 35;\nleg_height = 8;\neye_size = 4;\n\n// Body - egg shaped\nmodule body() {\n    difference() {\n        union() {\n            // Main body\n            scale([1, 1, 1.3])\n                sphere(r=body_radius, $fn=32);\n            \n            // Belly patch\n            translate([0, -body_radius-0.5, -body_radius/2])\n                scale([0.8, 0.3, 0.6])\n                    sphere(r=body_radius, $fn=32);\n        }\n        \n        // Hollow for printing\n        translate([0, 0, -2])\n            scale([0.8, 0.8, 0.9])\n                sphere(r=body_radius-2, $fn=32);\n    }\n}\n\n// Head\nmodule head() {\n    translate([0, 0, body_height*0.7])\n        difference() {\n            sphere(r=head_radius, $fn=32);\n            \n            // Hollow head\n            scale([0.8, 0.8, 0.8])\n                sphere(r=head_radius-2, $fn=32);\n            \n            // Eye sockets\n            for(i = [-1, 1]) {\n                translate([i*head_radius*0.4, -head_radius*0.7, head_radius*0.3])\n                    rotate([0, 0, 35*i])\n                        cylinder(r=eye_size/2, h=head_radius*2, $fn=16);\n            }\n            \n            // Beak hole\n            translate([0, -head_radius-0.1, -head_radius*0.2])\n                rotate([90, 0, 0])\n                    cylinder(r=3, h=head_radius, $fn=8);\n        }\n}\n\n// Eyes\nmodule eyes() {\n    for(i = [-1, 1]) {\n        translate([i*head_radius*0.4, -head_radius*0.7, head_radius*0.3])\n            difference() {\n                sphere(r=eye_size/2, $fn=16);\n                // Pupil\n                translate([0, -eye_size/4, eye_size/4])\n                    scale([0.5, 0.5, 1])\n                        sphere(r=eye_size/3, $fn=8);\n            }\n    }\n}\n\n// Beak\nmodule beak() {\n    translate([0, -head_radius-0.1, -head_radius*0.3])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(r1=3, r2=1.5, h=4, $fn=8);\n                translate([0, 0, -1])\n                    cylinder(r=4, h=5, $fn=8);\n            }\n}\n\n// Ear tufts\nmodule ear_tufts() {\n    for(i = [-1, 1]) {\n        translate([i*head_radius*0.7, 0, head_radius*0.6]) {\n            rotate([0, i*20, 0])\n                scale([0.3, 0.3, 0.8])\n                    sphere(r=head_radius/2, $fn=8);\n        }\n    }\n}\n\n// Wings\nmodule wings() {\n    wing_length = wing_span/2;\n    wing_width = 12;\n    \n    for(i = [-1, 1]) {\n        translate([i*wing_span/4, 0, body_height/3]) {\n            rotate([0, 0, i*45])\n                rotate([0, 30, 0])\n                    difference() {\n                        // Main wing shape\n                        translate([0, 0, -wing_width/2])\n                            cube([wing_length, 2, wing_width], center=true);\n                        \n                        // Wing feathers\n                        for(j = [0:3]) {\n                            translate([wing_length/2 - j*wing_length/4, 0, 0])\n                                rotate([0, 0, i*(-20 + j*10)])\n                                    translate([0, 1, 0])\n                                        cube([wing_length/4, 2, wing_width*0.8], center=true);\n                        }\n                        \n                        // Hollow wing\n                        translate([0, -1, 0])\n                            scale([0.8, 0.5, 0.8])\n                                cube([wing_length-4, 2, wing_width-4], center=true);\n                    }\n        }\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    for(i = [-1, 1]) {\n        translate([i*body_radius*0.5, 0, -body_height*0.8]) {\n            // Leg\n            cylinder(r=2, h=leg_height, $fn=8);\n            \n            // Foot\n            translate([0, 0, -leg_height-1])\n                rotate([90, 0, 0])\n                    difference() {\n                        // Main foot\n                        scale([1.5, 0.3, 1])\n                            sphere(r=4, $fn=8);\n                        \n                        // Toes\n                        for(j = [-1, 0, 1]) {\n                            translate([j*3, 0, 0])\n                                scale([0.5, 0.3, 1.5])\n                                    sphere(r=2, $fn=6);\n                        }\n                    }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, body_radius+2, -body_height/3])\n        rotate([20, 0, 0])\n            difference() {\n                // Main tail\n                scale([1, 0.2, 1.5])\n                    sphere(r=body_radius*0.8, $fn=16);\n                \n                // Tail feathers\n                for(i = [0:4]) {\n                    translate([0, 0, -i*2])\n                        rotate([0, i*5, 0])\n                            scale([0.9, 0.8, 0.9])\n                                sphere(r=body_radius*0.7, $fn=16);\n                }\n            }\n}\n\n// Assemble the nightling\nunion() {\n    body();\n    head();\n    eyes();\n    beak();\n    ear_tufts();\n    wings();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "gravewretch",
    "openscad_code": "// Gravewretch - Medium complexity realistic style\n// A withered, emaciated corpse clawing out of the ground\n\n$fn = 32;\n\n// Overall dimensions\nbody_height = 35;\narm_length = 25;\nbase_size = 40;\n\nmodule gravewretch() {\n    // Burial mound base\n    difference() {\n        translate([0, 0, -5]) scale([1.5, 1.2, 0.3]) sphere(d=base_size);\n        translate([0, 0, -6]) scale([1.5, 1.2, 0.4]) sphere(d=base_size-5);\n    }\n    \n    // Torso emerging from ground\n    union() {\n        // Chest cavity\n        translate([0, 0, 8]) scale([0.8, 0.6, 1.2]) sphere(d=20);\n        \n        // Ribcage visible through skin\n        for(i = [0:2:8]) {\n            rotate([0, 90, 0]) translate([0, i-4, 10]) scale([0.1, 1, 0.3]) cylinder(h=15, d=2);\n        }\n        \n        // Spine protruding\n        for(i = [0:1.5:6]) {\n            translate([0, -i, 8-i*0.5]) scale([0.3, 0.3, 0.5]) sphere(d=3);\n        }\n    }\n    \n    // Head - skull-like with remaining flesh\n    union() {\n        translate([0, 0, 22]) scale([0.9, 0.8, 1.1]) sphere(d=15);\n        \n        // Eye sockets\n        difference() {\n            translate([0, 0, 22]) scale([0.9, 0.8, 1.1]) sphere(d=15);\n            translate([-4, 3, 26]) sphere(d=4);\n            translate([4, 3, 26]) sphere(d=4);\n        }\n        \n        // Jaw bone\n        translate([0, -7, 16]) rotate([10, 0, 0]) scale([0.8, 0.5, 0.6]) sphere(d=12);\n        \n        // Teeth\n        for(i = [-3:1:3]) {\n            translate([i, -8, 16]) cylinder(h=2, d=1.5);\n        }\n    }\n    \n    // Left arm reaching up\n    union() {\n        // Upper arm\n        translate([-8, 0, 15]) rotate([30, 0, -30]) scale([0.4, 0.4, 1.2]) cylinder(h=arm_length, d=6);\n        \n        // Forearm\n        translate([-18, 5, 25]) rotate([60, 0, -30]) scale([0.4, 0.4, 1]) cylinder(h=arm_length-5, d=5);\n        \n        // Hand with exposed bones\n        translate([-25, 8, 30]) rotate([90, 0, -30]) scale([0.8, 0.3, 1.2]) sphere(d=8);\n        \n        // Fingers - skeletal\n        for(i = [0:1:3]) {\n            rotate([0, 0, -30]) \n            translate([-28-i*2, 8, 32-i*0.5]) rotate([90-i*10, 0, 0]) scale([0.2, 0.2, 1]) cylinder(h=6, d=1.5);\n        }\n    }\n    \n    // Right arm partially buried\n    translate([8, 2, 5]) rotate([0, 0, 30]) scale([0.4, 0.4, 1]) cylinder(h=15, d=6);\n    \n    // Exposed collarbone\n    union() {\n        translate([-5, 0, 18]) rotate([30, 0, 0]) scale([0.2, 0.2, 1]) cylinder(h=10, d=2);\n        translate([5, 0, 18]) rotate([30, 0, 0]) scale([0.2, 0.2, 1]) cylinder(h=10, d=2);\n    }\n    \n    // Shredded burial shroud remnants\n    for(i = [0:15:75]) {\n        rotate([0, 0, i]) translate([0, 0, 0]) scale([1.2, 0.9, 0.05]) \n        cylinder(h=base_size/2, d=base_size-5);\n    }\n}\n\ngravewretch();",
    "renders": true
  },
  {
    "household_item": "goreling",
    "openscad_code": "// Realistic Goreling - Medium Complexity\n// Approx 60mm tall, 3D printable with minimal supports\n\n$fn=32; // Smooth curves\n\n// Main body module\nmodule goreling() {\n    // Central torso\n    difference() {\n        union() {\n            // Core body\n            translate([0,0,20])\n                scale([1,0.8,1.2])\n                sphere(20);\n            \n            // Lower torso extension\n            translate([0,0,5])\n                cylinder(h=25, r1=15, r2=18);\n                \n            // Upper chest\n            translate([0,0,35])\n                scale([1.2,1,0.8])\n                sphere(15);\n        }\n        \n        // Hollow center for material savings\n        translate([0,0,15])\n            scale([0.7,0.7,0.9])\n            sphere(22);\n    }\n    \n    // Head\n    translate([0,0,50])\n    difference() {\n        sphere(18);\n        \n        // Eye sockets\n        translate([-8,12,5])\n            sphere(7);\n        translate([8,12,5])\n            sphere(7);\n            \n        // Mouth cavity\n        translate([0,12,-12])\n            scale([1.2,0.8,1.5])\n            cube([20,15,15], center=true);\n    }\n    \n    // Eyes\n    translate([-8,18,5])\n        sphere(4);\n    translate([8,18,5])\n        sphere(4);\n    \n    // Legs\n    for(side=[-1,1]) {\n        // Upper legs\n        translate([side*12, -5, 12])\n            rotate([0, side*15, 0])\n            cylinder(h=25, r1=6, r2=5);\n            \n        // Lower legs\n        translate([side*15, -5, -8])\n            rotate([0, side*15, 0])\n            cylinder(h=20, r1=5, r2=4);\n            \n        // Feet\n        translate([side*18, -5, -28])\n            rotate([0, side*10, 0])\n            scale([1.2,0.8,0.5])\n            sphere(8);\n    }\n    \n    // Arms\n    for(side=[-1,1]) {\n        // Upper arms\n        translate([side*22, 0, 35])\n            rotate([0, 0, side*-30])\n            cylinder(h=18, r1=5, r2=4);\n            \n        // Forearms\n        translate([side*35, 0, 30])\n            rotate([0, 0, side*-45])\n            cylinder(h=15, r1=4, r2=3);\n            \n        // Hands\n        translate([side*45, 0, 25])\n            rotate([0, 0, side*-60])\n            scale([1,0.8,0.6])\n            sphere(6);\n    }\n    \n    // Horns\n    for(side=[-1,1]) {\n        translate([side*10, 0, 65])\n            rotate([0, side*-20, 0])\n            cylinder(h=15, r1=3, r2=1);\n    }\n    \n    // Back spikes\n    for(i=[1:3]) {\n        translate([0, -15, 25 + i*8])\n            rotate([20, 0, 0])\n            cylinder(h=10, r1=2, r2=1);\n    }\n    \n    // Fingers on hands\n    for(side=[-1,1]) {\n        for(f=[-1,0,1]) {\n            translate([side*48, f*3, 25])\n                rotate([0, 0, side*-60])\n                scale([0.5,0.5,1])\n                cylinder(h=6, r1=1.5, r2=1);\n        }\n    }\n}\n\n// Scale to 60mm height and render\nscale(0.8)\ngoreling();",
    "renders": true
  },
  {
    "household_item": "boneling",
    "openscad_code": "// Realistic Boneling – OpenSCAD\n// Approx 65 mm tall, printable without support\n\n$fn = 32;\n\n// Overall scale\nscale(0.7)\ndifference() {\n    // Main cranium\n    union() {\n        skull();\n        jaw();\n        spine();\n    }\n    \n    // Eye sockets & nasal cavity\n    eye_socket(-11, 0, 0);\n    eye_socket( 11, 0, 0);\n    nasal_cavity();\n}\n\n// ---------- Modules ----------\n\nmodule skull() {\n    // Basic braincase\n    translate([0,0,40])\n    sphere(20);\n    \n    // Forehead ridge\n    translate([0,-15,55])\n    scale([1.5,0.8,0.7])\n    sphere(12);\n    \n    // Cheek bones\n    difference() {\n        // Left cheek\n        translate([-22, 0,30])\n        rotate([0,0,30])\n        scale([1,3,1])\n        cylinder(h = 10, r1 = 5, r2 = 7);\n        \n        // Right cheek\n        translate([ 22, 0,30])\n        mirror([1,0,0])\n        rotate([0,0,30])\n        scale([1,3,1])\n        cylinder(h = 10, r1 = 5, r2 = 7);\n    }\n    \n    // Zygomatic arch connectors\n    for (x = [-25, 25]) {\n        translate([x, -15, 35])\n        rotate([0,90,0])\n        cylinder(h = 10, r = 4);\n    }\n}\n\nmodule jaw() {\n    translate([0,-28,10])\n    rotate([0,0,0])\n    union() {\n        // Mandibular body\n        translate([0,-5,0])\n        cube([35,15,20], center = true);\n        \n        // Chin\n        translate([0,-12, -2])\n        sphere(8);\n        \n        // Teeth (simple pegs)\n        for (i = [-12:4:12]) {\n            translate([i,-13,10])\n            cylinder(h = 6, r = 2);\n        }\n    }\n}\n\nmodule spine() {\n    color(\"lightgray\")\n    for (i = [1:8]) {\n        translate([0, -28 - i*6, 10 - i*4])\n        rotate([0,i*5,0])\n        cylinder(h = 6, r1 = 6, r2 = 5);\n    }\n}\n\nmodule eye_socket(x, y, z) {\n    translate([x,y,z+35])\n    rotate([0,90,0])\n    cylinder(h = 20, r = 7);\n}\n\nmodule nasal_cavity() {\n    translate([0,-18,45])\n    rotate([-30,0,0])\n    cube([8,12,25], center = true);\n}",
    "renders": true
  },
  {
    "household_item": "netherling",
    "openscad_code": "// Netherling – medium-complexity realistic style, 3D-printable\n// Approx 80 mm tall when printed at 1:1 scale\n\n// Outer shell wall thickness\nwall = 1.2;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Core torso\n        hull() {\n            translate([-8, -6, 0]) cube([16, 12, 30]);\n            translate([-12, -10, 20]) cube([24, 20, 20]);\n        }\n        // Hollow it out\n        translate([0, 0, wall]) \n            scale([0.8, 0.75, 0.85])\n            hull() {\n                translate([-8, -6, 0]) cube([16, 12, 30]);\n                translate([-12, -10, 20]) cube([24, 20, 20]);\n            }\n    }\n}\n\n// Head with glowing eye sockets\nmodule head() {\n    translate([0, 0, 48]) rotate([0, 0, 0]) {\n        difference() {\n            sphere(d = 28);\n            translate([0, 0, -wall]) sphere(d = 28 - 2*wall);\n        }\n        // Eye sockets\n        for (x = [-7, 7]) {\n            translate([x, 9, 5]) rotate([90, 0, 0])\n                cylinder(d1 = 6, d2 = 10, h = 8, $fn = 20);\n        }\n    }\n}\n\n// Arm\nmodule arm(side = 1) {\n    translate([side * 14, 0, 28]) rotate([0, 0, side * -10]) {\n        // Shoulder joint\n        sphere(d = 10);\n        // Upper arm\n        translate([side * 7, 0, -10]) rotate([0, 0, 0])\n            cylinder(d = 8, h = 20, $fn = 20);\n        // Elbow\n        translate([side * 7, 0, -30]) sphere(d = 7);\n        // Forearm\n        translate([side * 10, 0, -40]) rotate([0, 0, side * 20])\n            cylinder(d = 7, h = 18, $fn = 20);\n        // Hand\n        translate([side * 13, 0, -50]) rotate([0, 0, side * 20])\n            hull() {\n                sphere(d = 8);\n                translate([side * 8, 0, 0]) sphere(d = 6);\n            }\n    }\n}\n\n// Leg\nmodule leg(side = 1) {\n    translate([side * 5, 0, 0]) {\n        // Hip joint\n        sphere(d = 10);\n        // Thigh\n        translate([0, 0, -20]) rotate([0, 0, side * -5])\n            cylinder(d = 10, h = 25, $fn = 20);\n        // Knee\n        translate([0, 0, -45]) sphere(d = 9);\n        // Shin\n        translate([0, 0, -60]) rotate([0, 0, side * 5])\n            cylinder(d = 9, h = 20, $fn = 20);\n        // Ankle\n        translate([0, 0, -75]) sphere(d = 8);\n        // Foot\n        translate([0, 4, -80]) rotate([0, side * 15, 0])\n            hull() {\n                cube([12, 20, wall * 2], center = true);\n                translate([0, 8, -6]) cube([12, 20, wall * 2], center = true);\n            }\n    }\n}\n\n// Horns\nmodule horns() {\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a]) translate([0, 12, 60]) rotate([30, 0, 0])\n            cylinder(d1 = 6, d2 = 2, h = 18, $fn = 20);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -12, 10]) rotate([45, 0, 0]) {\n        // Segmented tail\n        for (i = [0:3]) {\n            translate([0, 0, -i * 12]) rotate([0, 0, i * -15])\n                cylinder(d = 10 - i * 1.5, h = 12, $fn = 20);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    horns();\n    arm(side = 1);\n    arm(side = -1);\n    leg(side = 1);\n    leg(side = -1);\n    tail();\n}\n\n// Ground contact base for easy printing\ntranslate([0, 0, -80])\n    cube([60, 60, 2], center = true);",
    "renders": true
  },
  {
    "household_item": "bloodling",
    "openscad_code": "// Bloodling - realistic style, medium complexity\n// A small drop-shaped creature with vein-like details and a base\n\n// Overall dimensions\nbloodling_height = 60;\nbloodling_width = 40;\nbase_height = 5;\n\n// Main body - drop shape using sphere and cone\nmodule main_body() {\n    union() {\n        // Upper spherical part\n        translate([0, 0, bloodling_height*0.4])\n            scale([1, 1, 1.2])\n            sphere(d=bloodling_width, $fn=32);\n        \n        // Lower tapering part\n        translate([0, 0, bloodling_height*0.2])\n            cylinder(h1=bloodling_height*0.6, h2=0, r1=bloodling_width*0.5, r2=0, $fn=32);\n    }\n}\n\n// Vein details on surface\nmodule veins() {\n    // Major veins running vertically\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([bloodling_width*0.4, 0, bloodling_height*0.1])\n                rotate([90, 0, 0])\n                    scale([0.2, 0.2, 1])\n                    cylinder(h=bloodling_height*0.7, r=bloodling_width*0.05, $fn=8);\n    }\n    \n    // Smaller connecting veins\n    for (j = [0:30:359]) {\n        rotate([0, 0, j])\n            translate([bloodling_width*0.35, 0, bloodling_height*0.4])\n                rotate([0, 90, 0])\n                    scale([0.15, 0.15, 1])\n                    cylinder(h=bloodling_width*0.5, r=bloodling_width*0.03, $fn=6);\n    }\n}\n\n// Eye sockets\nmodule eyes() {\n    // Left eye\n    translate([-bloodling_width*0.25, bloodling_width*0.3, bloodling_height*0.6])\n        sphere(d=bloodling_width*0.15, $fn=16);\n    \n    // Right eye  \n    translate([bloodling_width*0.25, bloodling_width*0.3, bloodling_height*0.6])\n        sphere(d=bloodling_width*0.15, $fn=16);\n}\n\n// Pupils\nmodule pupils() {\n    // Left pupil\n    translate([-bloodling_width*0.25, bloodling_width*0.38, bloodling_height*0.62])\n        sphere(d=bloodling_width*0.08, $fn=12);\n    \n    // Right pupil\n    translate([bloodling_width*0.25, bloodling_width*0.38, bloodling_height*0.62])\n        sphere(d=bloodling_width*0.08, $fn=12);\n}\n\n// Base for stability\nmodule base() {\n    cylinder(h=base_height, r=bloodling_width*0.7, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Main body\n    main_body();\n    \n    // Veins as raised details\n    veins();\n    \n    // Eyes (sockets)\n    eyes();\n    \n    // Pupils (darker)\n    color(\"darkred\")\n        pupils();\n    \n    // Base\n    translate([0, 0, 0])\n        base();\n}",
    "renders": true
  },
  {
    "household_item": "skullwretch",
    "openscad_code": "// Skullwretch - Medium Complexity Realistic Style\n// Approx 70mm tall, 3D printable with minimal overhangs\n\n// Overall scale factor\nscale_factor = 0.6;\n\nmodule skullwretch() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main skull assembly\n            skull_base();\n            // Jaw\n            jaw();\n            // Teeth\n            teeth_upper();\n            teeth_lower();\n            // Eye sockets\n            eye_sockets();\n            // Nasal cavity\n            nasal_cavity();\n            // Cranium details\n            cranium_details();\n        }\n    }\n}\n\nmodule skull_base() {\n    // Main skull - egg shape\n    difference() {\n        scale([1, 0.8, 1.2]) sphere(d=60);\n        \n        // Hollow out for printing\n        translate([0, 0, -5]) scale([0.85, 0.65, 1]) sphere(d=58);\n    }\n    \n    // Jaw attachment points\n    translate([20, 0, -25]) rotate([0, 90, 0]) cylinder(h=10, d=8);\n    translate([-20, 0, -25]) rotate([0, 90, 0]) cylinder(h=10, d=8);\n}\n\nmodule jaw() {\n    // Lower jaw bone\n    translate([0, 0, -35]) {\n        difference() {\n            // Jaw shape\n            hull() {\n                translate([25, 0, 0]) sphere(d=15);\n                translate([-25, 0, 0]) sphere(d=15);\n                translate([0, 0, -15]) sphere(d=20);\n            }\n            \n            // Hollow for printing\n            translate([0, 0, -5]) scale([0.8, 0.6, 0.8]) hull() {\n                translate([20, 0, 0]) sphere(d=15);\n                translate([-20, 0, 0]) sphere(d=15);\n                translate([0, 0, -15]) sphere(d=20);\n            }\n        }\n    }\n}\n\nmodule teeth_upper() {\n    // Upper teeth - 8 front teeth\n    for(i = [-3:3]) {\n        translate([i*7, -22, -15]) {\n            rotate([0, 10, 0]) \n            cylinder(h=10, d=6, $fn=8);\n        }\n    }\n    \n    // Side molars\n    for(side = [-1, 1]) {\n        for(pos = [12:8:28]) {\n            translate([side*pos, -20, -18]) {\n                rotate([0, 5, 0])\n                cylinder(h=8, d=7, $fn=8);\n            }\n        }\n    }\n}\n\nmodule teeth_lower() {\n    // Lower teeth matching upper\n    for(i = [-3:3]) {\n        translate([i*7, -18, -35]) {\n            rotate([0, -10, 0])\n            cylinder(h=10, d=6, $fn=8);\n        }\n    }\n    \n    // Lower molars\n    for(side = [-1, 1]) {\n        for(pos = [12:8:28]) {\n            translate([side*pos, -16, -38]) {\n                rotate([0, -5, 0])\n                cylinder(h=8, d=7, $fn=8);\n            }\n        }\n    }\n}\n\nmodule eye_sockets() {\n    // Left eye socket\n    translate([-15, 15, 10]) {\n        difference() {\n            sphere(d=18);\n            translate([3, -3, 3]) sphere(d=16);\n        }\n    }\n    \n    // Right eye socket\n    translate([15, 15, 10]) {\n        difference() {\n            sphere(d=18);\n            translate([-3, -3, 3]) sphere(d=16);\n        }\n    }\n}\n\nmodule nasal_cavity() {\n    // Main nasal opening\n    translate([0, 20, 0]) {\n        difference() {\n            scale([1.2, 0.8, 1.5]) sphere(d=20);\n            translate([0, 5, 0]) cube([30, 30, 30], center=true);\n        }\n    }\n    \n    // Nasal septum\n    translate([0, 20, 0]) cube([2, 2, 15], center=true);\n}\n\nmodule cranium_details() {\n    // Suture lines - simplified\n    // Coronal suture\n    translate([0, 0, 25]) rotate([90, 0, 0]) \n    cylinder(h=0.5, d=50);\n    \n    // Sagittal suture\n    rotate([0, 90, 0]) \n    translate([0, 0, 25]) \n    cylinder(h=0.5, d=50);\n    \n    // Temporal bones indication\n    for(side = [-1, 1]) {\n        translate([side*25, -5, 0]) {\n            scale([1, 1.2, 0.8]) sphere(d=15);\n        }\n    }\n}\n\n// Base for stability\ntranslate([0, 0, -45]) \n    cylinder(h=5, d=70);\n\n// Generate the model\nskullwretch();",
    "renders": true
  },
  {
    "household_item": "aetherion",
    "openscad_code": "// Aetherion – medium-complexity realistic-style OpenSCAD model\n// Overall height ≈ 75 mm\n// No support needed, printable upright\n\n$fn = 36;\n\n// Main body\nmodule body() {\n    // Central orb core\n    sphere(d = 32);\n    \n    // Equatorial band (gimbal ring)\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 4, d = 38, center = true);\n            cylinder(h = 5, d = 34, center = true);\n        }\n    \n    // Vertical gimbal ring\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 4, d = 38, center = true);\n            cylinder(h = 5, d = 34, center = true);\n        }\n}\n\n// Hexagonal aether vents (six around equator)\nmodule vents() {\n    for (i = [0 : 5]) {\n        rotate([0, 0, i * 60])\n            translate([19, 0, 0])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h = 6, d = 8, $fn = 6);     // hex prism\n                        cylinder(h = 7, d = 3.5);           // vent hole\n                    }\n    }\n}\n\n// Top focusing crown\nmodule crown() {\n    difference() {\n        // Crown disk\n        cylinder(h = 5, d = 22);\n        \n        // Central aperture\n        translate([0, 0, -0.1])\n            cylinder(h = 5.2, d = 8);\n        \n        // Indexing notches\n        for (a = [0 : 60 : 300])\n            rotate([0, 0, a])\n                translate([9, 0, 2.5])\n                    cube([2, 1.5, 2.5], center = true);\n    }\n}\n\n// Bottom stabilizer ring\nmodule base() {\n    difference() {\n        cylinder(h = 6, d1 = 28, d2 = 32);\n        cylinder(h = 7, d1 = 24, d2 = 28);\n    }\n}\n\n// Small radial fins for cooling\nmodule fins() {\n    for (i = [0 : 11]) {\n        rotate([0, 0, i * 30])\n            translate([13, 0, -15])\n                cube([1.5, 4, 15]);\n    }\n}\n\n// Assembly\nunion() {\n    // Core orb with gimbals\n    body();\n    \n    // Vents\n    vents();\n    \n    // Crown on top\n    translate([0, 0, 18])\n        crown();\n    \n    // Base ring\n    translate([0, 0, -18])\n        base();\n    \n    // Cooling fins on lower half\n    fins();\n}",
    "renders": true
  },
  {
    "household_item": "almarel",
    "openscad_code": "// Almarel - realistic style, medium complexity\n// Overall dimensions: ~80mm height, ~60mm width\n\n// Parameters\n$fn = 32;\nbase_d = 60;\nbase_h = 8;\npost_d = 12;\npost_h = 70;\nhead_d = 45;\nhead_h = 15;\npin_d = 3;\npin_l = 8;\npin_count = 36;\n\n// Base\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(d=base_d, h=base_h);\n        \n        // Center hole for post\n        translate([0, 0, -1])\n            cylinder(d=post_d + 4, h=base_h + 2);\n        \n        // Four mounting holes\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([base_d/2 - 8, 0, -1])\n                    cylinder(d=4, h=base_h + 2);\n        }\n    }\n}\n\n// Main post\nmodule post() {\n    // Tapered post\n    cylinder(d1=post_d + 2, d2=post_d, h=post_h);\n}\n\n// Head assembly\nmodule head() {\n    // Main head cylinder\n    translate([0, 0, post_h])\n        cylinder(d=head_d, h=head_h);\n    \n    // Top dome\n    translate([0, 0, post_h + head_h])\n        sphere(d=head_d);\n    \n    // Pin ring\n    for(i = [0:pin_count-1]) {\n        rotate([0, 0, i * 360/pin_count])\n            translate([head_d/2 - 2, 0, post_h + head_h/2])\n                rotate([90, 0, 0])\n                    cylinder(d=pin_d, h=pin_l);\n    }\n    \n    // Center hole for thread\n    translate([0, 0, post_h - 2])\n        cylinder(d=post_d/2, h=head_h + 20);\n}\n\n// Threading knob\nmodule knob() {\n    translate([0, 0, post_h + head_h + head_d/2])\n        difference() {\n            // Main knob\n            cylinder(d=20, h=15);\n            \n            // Knurling cuts\n            for(i = [0:11]) {\n                rotate([0, 0, i * 30])\n                    translate([8, 0, -1])\n                        cube([4, 2, 17]);\n            }\n            \n            // Center hole\n            cylinder(d=6, h=17);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    post();\n    head();\n    knob();\n}",
    "renders": true
  },
  {
    "household_item": "astrael",
    "openscad_code": "// Astrael - Realistic medium complexity space telescope\n// Designed for 3D printing with no supports required\n\n// Main dimensions in mm\ntelescope_length = 80;\nmain_tube_diameter = 30;\nmirror_diameter = 25;\nfocuser_length = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule main_tube() {\n    // Main optical tube assembly\n    difference() {\n        // Outer tube\n        cylinder(h=telescope_length, d=main_tube_diameter, $fn=64);\n        \n        // Inner hollow space\n        translate([0, 0, -0.1])\n            cylinder(h=telescope_length + 0.2, d=main_tube_diameter - wall_thickness*2, $fn=64);\n        \n        // Finder scope mounting holes\n        for(i = [0:2]) {\n            rotate([0, 0, i*120]) {\n                translate([main_tube_diameter/2 - 2, 0, telescope_length - 20])\n                    rotate([90, 0, 0])\n                        cylinder(h=5, d=3, $fn=16);\n            }\n        }\n    }\n    \n    // Reinforcement rings\n    for(z = [10, telescope_length/2, telescope_length - 10]) {\n        translate([0, 0, z])\n            cylinder(h=3, d=main_tube_diameter + 2, $fn=64);\n    }\n}\n\nmodule primary_mirror_cell() {\n    // Primary mirror mounting cell at bottom\n    translate([0, 0, 0])\n        difference() {\n            // Cell base\n            cylinder(h=5, d=mirror_diameter + 6, $fn=32);\n            \n            // Mirror recess\n            translate([0, 0, 2])\n                cylinder(h=3, d=mirror_diameter, $fn=32);\n            \n            // Collimation screw holes\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle])\n                    translate([mirror_diameter/2 + 2, 0, 0])\n                        cylinder(h=6, d=2, $fn=8);\n            }\n        }\n}\n\nmodule secondary_mirror_spider() {\n    // Secondary mirror spider assembly\n    translate([0, 0, telescope_length - 25])\n        union() {\n            // Central hub\n            cylinder(h=5, d=6, $fn=16);\n            \n            // Spider vanes\n            for(angle = [45:90:315]) {\n                rotate([0, 0, angle])\n                    translate([0, 6, 2.5])\n                        cube([2, 8, 5], center=true);\n            }\n            \n            // Secondary mirror holder\n            translate([0, 0, 5])\n                cylinder(h=3, d=10, $fn=16);\n        }\n}\n\nmodule focuser() {\n    // Rack and pinion focuser\n    translate([0, 0, telescope_length])\n        difference() {\n            // Main focuser body\n            cylinder(h=focuser_length, d=12, $fn=32);\n            \n            // Drawtube hole\n            translate([0, 0, -0.1])\n                cylinder(h=focuser_length + 0.2, d=8, $fn=32);\n            \n            // Focus knob holes\n            translate([6, 0, focuser_length/2])\n                rotate([90, 0, 0])\n                    cylinder(h=4, d=4, $fn=8);\n            translate([-6, 0, focuser_length/2])\n                rotate([90, 0, 0])\n                    cylinder(h=4, d=4, $fn=8);\n        }\n    \n    // Focus knobs\n    for(x = [-6, 6]) {\n        translate([x, 0, telescope_length + focuser_length/2])\n            rotate([90, 0, 0])\n                union() {\n                    cylinder(h=8, d=4, $fn=16);\n                    sphere(d=5, $fn=16);\n                }\n    }\n}\n\nmodule finder_scope() {\n    // 6x30 finder scope\n    translate([main_tube_diameter/2 + 15, 0, telescope_length - 20])\n        rotate([90, 0, 0])\n            union() {\n                // Main tube\n                cylinder(h=40, d=12, $fn=32);\n                \n                // Objective end\n                translate([0, 0, 40])\n                    cylinder(h=3, d=15, $fn=32);\n                \n                // Eyepiece end\n                translate([0, 0, 0])\n                    cylinder(h=5, d=10, $fn=32);\n                \n                // Mounting bracket\n                rotate([0, 90, 0])\n                    for(y = [0:20:40]) {\n                        translate([0, y-20, 0])\n                            cube([8, 5, 5], center=true);\n                    }\n            }\n}\n\nmodule dovetail_mount() {\n    // Vixen style dovetail mount\n    translate([0, -main_tube_diameter/2 - 5, telescope_length/2])\n        rotate([90, 0, 0])\n            difference() {\n                // Main dovetail\n                linear_extrude(height=60, center=true)\n                    polygon(points=[\n                        [-5, 0], [5, 0], [7, 5], [7, 15], [-7, 15], [-7, 5]\n                    ]);\n                \n                // Mounting holes\n                for(z = [-20:20:20]) {\n                    translate([0, z, 0])\n                        cylinder(h=8, d=6, $fn=16);\n                }\n            }\n}\n\n// Assembly\nunion() {\n    main_tube();\n    primary_mirror_cell();\n    secondary_mirror_spider();\n    focuser();\n    finder_scope();\n    dovetail_mount();\n}",
    "renders": true
  },
  {
    "household_item": "azuriel",
    "openscad_code": "// Azuriel - Medium complexity realistic style\n// Size: 80mm tall, 3D printable with no overhangs\n\n$fn = 32;\n\n// Main assembly\nmodule azuriel() {\n    // Body\n    union() {\n        // Head\n        translate([0, 0, 70])\n            head();\n        \n        // Torso\n        translate([0, 0, 40])\n            torso();\n        \n        // Arms\n        translate([-25, 0, 55])\n            rotate([0, 0, -15])\n            arm();\n        translate([25, 0, 55])\n            rotate([0, 0, 15])\n            mirror([1, 0, 0])\n            arm();\n        \n        // Legs\n        translate([-12, 0, 15])\n            leg();\n        translate([12, 0, 15])\n            leg();\n        \n        // Wings\n        translate([0, 0, 60])\n            wings();\n        \n        // Halo\n        translate([0, 0, 85])\n            halo();\n    }\n}\n\n// Head with face details\nmodule head() {\n    // Basic head shape\n    difference() {\n        sphere(d = 25);\n        \n        // Eyes\n        translate([-7, 11, 5])\n            rotate([0, 90, 0])\n            cylinder(h = 5, d1 = 4, d2 = 2);\n        translate([7, 11, 5])\n            rotate([0, 90, 0])\n            cylinder(h = 5, d1 = 4, d2 = 2);\n        \n        // Mouth\n        translate([0, 12, -3])\n            cube([8, 1, 2], center = true);\n    }\n    \n    // Hair\n    translate([0, 0, 5])\n        cylinder(h = 10, d1 = 20, d2 = 25);\n}\n\n// Torso with armor details\nmodule torso() {\n    // Main torso\n    difference() {\n        cylinder(h = 30, d1 = 35, d2 = 25);\n        \n        // Chest details\n        translate([0, 15, 15])\n            cube([20, 1, 10], center = true);\n        translate([-8, 14, 15])\n            cube([3, 2, 3], center = true);\n        translate([8, 14, 15])\n            cube([3, 2, 3], center = true);\n    }\n}\n\n// Arm with hand\nmodule arm() {\n    // Upper arm\n    cylinder(h = 20, d1 = 8, d2 = 6);\n    \n    // Lower arm\n    translate([0, 0, -20])\n        cylinder(h = 20, d1 = 6, d2 = 5);\n    \n    // Hand\n    translate([0, 0, -40])\n        sphere(d = 8);\n}\n\n// Leg with foot\nmodule leg() {\n    // Upper leg\n    cylinder(h = 25, d1 = 10, d2 = 8);\n    \n    // Lower leg\n    translate([0, 0, -25])\n        cylinder(h = 20, d1 = 8, d2 = 6);\n    \n    // Foot\n    translate([0, 3, -40])\n        cube([12, 20, 6], center = true);\n}\n\n// Angel wings\nmodule wings() {\n    // Left wing\n    translate([-18, 0, 0])\n        rotate([0, 10, -20])\n        wing(true);\n    \n    // Right wing\n    translate([18, 0, 0])\n        rotate([0, 10, 20])\n        mirror([1, 0, 0])\n        wing(false);\n}\n\n// Single wing\nmodule wing(left = true) {\n    // Main wing\n    difference() {\n        union() {\n            // Upper wing\n            translate([0, 0, 0])\n                rotate([0, 0, 30])\n                scale([1, 0.3, 0.1])\n                sphere(d = 40);\n            \n            // Lower wing\n            translate([0, -10, -15])\n                rotate([0, 0, 50])\n                scale([1, 0.25, 0.1])\n                sphere(d = 35);\n        }\n        \n        // Feather details\n        for(i = [0:3]) {\n            translate([-10 + i*5, -5 - i*2, -2])\n                rotate([0, 0, -10 + i*5])\n                cube([8, 1, 1]);\n        }\n    }\n}\n\n// Halo\nmodule halo() {\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 2, d = 30, center = true);\n            cylinder(h = 3, d = 26, center = true);\n        }\n}\n\n// Generate the model\nazuriel();",
    "renders": true
  },
  {
    "household_item": "caelith",
    "openscad_code": "// Caelith (standing stone / menhir) in realistic style\n// Designed for 3D printing – no overhangs, 50 mm height\n\n$fn = 36; // smooth curves for printing\n\n// Overall dimensions in mm\nheight = 50;\nbase_w = 20;\nbase_d = 20;\ntop_w = 10;\ntop_d = 10;\n\n// Wall / feature thickness\nthick = 2;\n\nmodule main_stone() {\n    // Tapered body with slight irregularity\n    hull() {\n        // Bottom footprint\n        translate([0, 0, 0])\n            scale([1 + 0.05*sin(90), 1 + 0.05*cos(90), 1])\n            cylinder(h = 2, r1 = base_w/2, r2 = base_w/2);\n\n        // Mid section offset slightly for natural tilt\n        translate([0.5, 0.5, height*0.4])\n            scale([1 - 0.02, 1 - 0.02, 1])\n            cylinder(h = 2, r1 = (base_w + top_w)/4, r2 = (base_w + top_w)/4);\n\n        // Top footprint\n        translate([1, 0, height])\n            scale([1 - 0.10, 1 - 0.05, 1])\n            cylinder(h = 2, r1 = top_w/2, r2 = top_w/2);\n    }\n}\n\nmodule lichen_patch(x, y, z, size) {\n    // Small irregular blob for surface detail\n    color(\"darkolivegreen\")\n    translate([x, y, z])\n        scale([1 + 0.3*sin($vpr.z), 1 + 0.3*cos($vpr.x), 0.6])\n        sphere(r = size);\n}\n\nmodule weathering_pits() {\n    // Subtract a few shallow pits for realism\n    for (i = [0:7]) {\n        rotate([0, 0, i*45])\n        translate([base_w*0.3*sin(i*3), base_w*0.3*cos(i*3), height*(0.2 + 0.6*i/8)])\n            sphere(r = 1.2, $fn = 12);\n    }\n}\n\nmodule base_ground() {\n    // Simple ground disk\n    cylinder(h = 1.5, r = base_w*0.75);\n}\n\n// Assembly\nunion() {\n    // Ground\n    base_ground();\n\n    // Main stone\n    difference() {\n        main_stone();\n        weathering_pits();\n    }\n\n    // Lichen patches\n    lichen_patch( 5,  4, 10, 1);\n    lichen_patch(-4, -3, 25, 1.2);\n    lichen_patch( 2, -5, 35, 0.8);\n}",
    "renders": true
  },
  {
    "household_item": "celestis",
    "openscad_code": "// Celestis Memorial Spaceflight Capsule – medium-complexity realistic style\n// Overall length 75 mm, Ø 30 mm capsule body, printable on FDM without support\n\n$fn = 36;               // Smooth curves\n\n// Material thickness for printable walls\nwall = 1.2;\ncap_thick = 1.5;\n\n// Main capsule body\nmodule capsule_body() {\n    difference() {\n        union() {\n            // Cylindrical shell\n            cylinder(h = 55, d = 30, center = true);\n            // Rounded nose cone – two spheres\n            translate([0, 0, 27.5]) sphere(d = 30);\n            translate([0, 0, 38])  sphere(d = 26);\n        }\n        // Hollow interior\n        translate([0, 0, -30])\n            cylinder(h = 80, d = 30 - 2*wall);\n        translate([0, 0, 27.5])\n            sphere(d = 30 - 2*wall);\n        translate([0, 0, 38])\n            sphere(d = 26 - 2*wall);\n    }\n}\n\n// Threaded cap\nmodule cap() {\n    difference() {\n        union() {\n            // Outer dome\n            sphere(d = 30);\n            // Cylindrical skirt with threads\n            translate([0, 0, -8])\n                cylinder(h = 15, d = 30);\n        }\n        // Inner cavity\n        sphere(d = 30 - 2*cap_thick);\n        translate([0, 0, -8])\n            cylinder(h = 15, d = 30 - 2*cap_thick);\n    }\n    \n    // External threads – 8 ridges\n    for (i = [0 : 45 : 315]) {\n        rotate([0, 0, i])\n            translate([14.8, 0, -7.5])\n                cube([1.2, 1.2, 14], center = true);\n    }\n}\n\n// Name plate band\nmodule name_band() {\n    difference() {\n        // Band ring\n        rotate_extrude()\n            translate([16, 0, 0])\n                square([wall, 8], center = true);\n        // Recessed label area\n        rotate([0, 90, 0])\n            translate([0, 0, 16])\n                cube([20, 6, wall + 0.1], center = true);\n    }\n}\n\n// Four fins for realistic launch-vehicle look\nmodule fins(count = 4) {\n    for (i = [0 : 360/count : 360 - 360/count]) {\n        rotate([0, 0, i])\n            translate([0, 16, -20])\n                rotate([90, 0, 0])\n                    linear_extrude(height = 1.5)\n                        polygon(points = [[0, 0], [0, 20], [6, 14], [6, 0]]);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 15])  // Center model on build plate\n    union() {\n        capsule_body();\n        translate([0, 0, 27.5]) cap();\n        translate([0, 0, 15]) name_band();\n        fins();\n    }",
    "renders": true
  },
  {
    "household_item": "divion",
    "openscad_code": "// Realistic Stylus / Divion (Digital Vernier Caliper Stylus)\n// Medium-complexity OpenSCAD model – 3D-printable, ~80 mm long\n// All features printable without support\n\n$fn = 36;               // Global facet resolution\n\n/* ---------- Parameters ---------- */\nbody_len       = 78;    // Overall length\nbody_d         = 8;     // Main shaft diameter\ntip_len        = 15;    // Tapered tip length\nbutton_h       = 2;     // Button height above surface\nbutton_d       = 4;\nbutton_gap     = 2;     // Gap between buttons\nbutton_rows    = 2;\nbutton_cols    = 3;\nclip_thick     = 1.5;\nclip_gap       = 2;\nwall_thick     = 1.2;   // Wall thickness for printability\ncenter_d       = 3;     // Hole for stylus nib storage\n\n/* ---------- Main Body ---------- */\nmodule body() {\n    difference() {\n        // Main cylindrical shaft\n        cylinder(h = body_len, d = body_d, center = true);\n        \n        // Center bore for nib storage\n        translate([0, 0, -body_len/2 - 1])\n            cylinder(h = body_len + 2, d = center_d);\n    }\n}\n\n/* ---------- Tapered Tip ---------- */\nmodule tip() {\n    translate([0, 0, body_len/2])\n        cylinder(h1 = tip_len, h2 = 0, d1 = body_d, d2 = 1.5);\n}\n\n/* ---------- Buttons Grid ---------- */\nmodule button_grid() {\n    spacing = button_d + button_gap;\n    for (r = [0:button_rows-1])\n        for (c = [0:button_cols-1]) {\n            tx = (c - (button_cols-1)/2) * spacing;\n            ty = (r - (button_rows-1)/2) * spacing;\n            translate([tx, ty, -body_len/2 + 2 + r*0.3])\n                cylinder(h = button_h, d = button_d);\n        }\n}\n\n/* ---------- Clip ---------- */\nmodule clip() {\n    translate([0, body_d/2, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Main clip arc\n        union() {\n            // Arc body\n            translate([0, 0, -body_len/2 + 10])\n                rotate_extrude(angle = 180)\n                    translate([body_d/2 + clip_thick/2, 0])\n                        square([clip_thick, body_len/2 - 12]);\n            // Clip end sphere\n            translate([0, 0, body_len/2 - 5])\n                sphere(d = clip_thick * 2.5);\n        }\n        \n        // Remove gap for paper\n        translate([0, 0, -body_len/2 + 10])\n            rotate_extrude(angle = 180)\n                translate([body_d/2 - clip_gap, 0])\n                    square([clip_gap + 1, body_len/2 - 10]);\n    }\n}\n\n/* ---------- Assembly ---------- */\nunion() {\n    body();\n    tip();\n    button_grid();\n    clip();\n}",
    "renders": true
  },
  {
    "household_item": "elarion",
    "openscad_code": "// OpenSCAD Elarion (medium-realistic)\n// Overall size: 80 mm tall, 45 mm wide, 45 mm deep\n// All parts printable without support; 1.2 mm wall thickness\n\n$fa = 1;\n$fs = 1;\n\n// Main body\nmodule body() {\n    difference() {\n        // Solid shell\n        cylinder(h = 50, d1 = 38, d2 = 42, center = false);\n        \n        // Hollow cavity\n        translate([0,0,2])\n            cylinder(h = 48, d1 = 35.6, d2 = 39.6, center = false);\n        \n        // Bottom opening\n        translate([0,0,-1])\n            cylinder(h = 3, d = 30, center = false);\n    }\n}\n\n// Top cap\nmodule cap() {\n    translate([0,0,50]) {\n        difference() {\n            cylinder(h = 5, d = 42, center = false);\n            translate([0,0,2])\n                cylinder(h = 5, d = 39.6, center = false);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    translate([0,-21,25])\n        rotate([90,0,0])\n            difference() {\n                // Outer tube\n                cylinder(h = 35, d = 8, center = false);\n                \n                // Inner hole\n                translate([0,0,2])\n                    cylinder(h = 31, d = 5.6, center = false);\n            }\n}\n\n// Grip rings on handle\nmodule grip_rings() {\n    for (z = [5:8:29]) {\n        translate([0,-21,z])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h = 2, d = 10, center = false);\n                    cylinder(h = 2.2, d = 8, center = false);\n                }\n    }\n}\n\n// Spout\nmodule spout() {\n    translate([21,0,35])\n        rotate([0,-30,0])\n            difference() {\n                hull() {\n                    // Base joint\n                    translate([0,0,0])\n                        sphere(d = 12);\n                    // Tip\n                    translate([0,0,22])\n                        sphere(d = 6);\n                }\n                // Hollow path\n                hull() {\n                    translate([0,0,-1])\n                        sphere(d = 9);\n                    translate([0,0,23])\n                        sphere(d = 3.5);\n                }\n            }\n}\n\n// Lid knob\nmodule knob() {\n    translate([0,0,57]) {\n        difference() {\n            sphere(d = 12);\n            sphere(d = 9.6);\n        }\n        // Stem\n        translate([0,0,-2]) {\n            difference() {\n                cylinder(h = 4, d = 8, center = false);\n                cylinder(h = 4.2, d = 5.6, center = false);\n            }\n        }\n    }\n}\n\n// Base ring for stability\nmodule base_ring() {\n    difference() {\n        cylinder(h = 3, d = 45, center = false);\n        cylinder(h = 3.2, d = 38, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    base_ring();\n    body();\n    cap();\n    handle();\n    grip_rings();\n    spout();\n    knob();\n}",
    "renders": true
  },
  {
    "household_item": "empyreon",
    "openscad_code": "// Empyreon - Realistic style, medium complexity\n// A futuristic orbital station with habitation rings and solar arrays\n\n$fn = 64;  // Smooth curves for realistic appearance\n\n// Main parameters\nmain_hub_d = 20;\nmain_hub_h = 30;\nring_d = 40;\nring_t = 3;\nsolar_panel_l = 25;\nsolar_panel_w = 15;\nsolar_panel_t = 1;\nbase_scale = 2;\n\nmodule empyreon() {\n    // Central hub - main control and docking\n    cylinder(h=main_hub_h, d=main_hub_d, center=true);\n    \n    // Top docking port\n    translate([0, 0, main_hub_h/2 + 2])\n    cylinder(h=4, d=8, center=true);\n    \n    // Bottom docking port\n    translate([0, 0, -main_hub_h/2 - 2])\n    cylinder(h=4, d=8, center=true);\n    \n    // Habitation rings - two counter-rotating\n    for (i = [0:1]) {\n        rotate([0, 0, i * 15])\n        translate([0, 0, (i == 0 ? 8 : -8)])\n        habitation_ring();\n    }\n    \n    // Solar arrays - 4 wings in cross pattern\n    for (rot = [0:90:270]) {\n        rotate([0, 0, rot])\n        translate([0, ring_d/2 + 10, 0])\n        solar_array();\n    }\n    \n    // Communication dish on top\n    translate([0, 0, main_hub_h/2 + 6])\n    dish();\n}\n\nmodule habitation_ring() {\n    // Main torus structure\n    rotate_extrude(angle=360, convexity=10)\n    translate([ring_d/2, 0, 0])\n    square([ring_t, 8], center=true);\n    \n    // Structural spokes to hub\n    for (spoke = [0:45:315]) {\n        rotate([0, 0, spoke])\n        translate([ring_d/4, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=ring_d/4, d=2, center=true);\n    }\n    \n    // Windows around the ring\n    for (win = [0:30:330]) {\n        rotate([0, 0, win])\n        translate([ring_d/2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=ring_t+1, d=1.5, center=true);\n    }\n}\n\nmodule solar_array() {\n    // Mounting arm\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=15, d=2, center=true);\n    \n    // Solar panel frame\n    translate([0, solar_panel_l/2 + 5, 0])\n    difference() {\n        // Panel backing\n        cube([solar_panel_w, solar_panel_l, solar_panel_t], center=true);\n        \n        // Panel grid pattern\n        for (x = [-solar_panel_w/3:5:solar_panel_w/3]) {\n            for (y = [-solar_panel_l/3:5:solar_panel_l/3]) {\n                translate([x, y, 0])\n                cube([3.8, 3.8, solar_panel_t+0.1], center=true);\n            }\n        }\n    }\n}\n\nmodule dish() {\n    // Parabolic communication dish\n    difference() {\n        // Main dish structure\n        scale([1, 1, 0.3])\n        sphere(d=12);\n        \n        // Hollow for parabola\n        translate([0, 0, -2])\n        scale([0.8, 0.8, 1])\n        sphere(d=10);\n    }\n    \n    // Feed horn\n    translate([0, 0, 2.5])\n    cylinder(h=3, d=2);\n}\n\n// Generate the complete station\nscale([base_scale, base_scale, base_scale])\nempyreon();",
    "renders": true
  },
  {
    "household_item": "ethereon",
    "openscad_code": "// Ethereon - Medium Complexity Realistic Style\n// A crystalline energy core with containment rings and base\n\n// Overall dimensions\nethereon_size = 60;\n\n// Main module\nmodule ethereon() {\n    // Base platform\n    difference() {\n        // Main base cylinder\n        cylinder(h=8, d=ethereon_size*1.2, $fn=64);\n        \n        // Recessed bottom for printing stability\n        translate([0,0,-1])\n            cylinder(h=10, d=ethereon_size*1.1, $fn=64);\n    }\n    \n    // Support pillars\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([ethereon_size*0.45, 0, 8])\n                cylinder(h=25, d=4, $fn=16);\n    }\n    \n    // Lower containment ring\n    translate([0,0,30])\n        rotate_extrude($fn=64)\n            translate([ethereon_size*0.35,0,0])\n                square([2,8]);\n    \n    // Upper containment ring\n    translate([0,0,45])\n        rotate_extrude($fn=64)\n            translate([ethereon_size*0.3,0,0])\n                square([2,6]);\n    \n    // Energy core - main crystal\n    translate([0,0,35])\n        rotate([0,0,45])\n            difference() {\n                // Main octahedron shape\n                scale([1,1,1.5])\n                    octahedron(ethereon_size*0.3);\n                \n                // Inner glow cavity\n                scale([0.6,0.6,0.9])\n                    octahedron(ethereon_size*0.3);\n            }\n    \n    // Energy field rings\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n            translate([0,0,35])\n                rotate([45,0,0])\n                    torus_slice(ethereon_size*0.35, 1.5, 8);\n    }\n    \n    // Top focusing array\n    translate([0,0,50])\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n                translate([ethereon_size*0.15,0,0])\n                    cylinder(h=10, d=3, $fn=6);\n        }\n}\n\n// Helper module for octahedron\nmodule octahedron(size) {\n    // Top pyramid\n    scale([1,1,0.5])\n        cylinder(h=size, r1=size/2, r2=0, $fn=4);\n    \n    // Bottom pyramid\n    translate([0,0,size])\n        scale([1,1,0.5])\n            cylinder(h=size, r1=0, r2=size/2, $fn=4);\n}\n\n// Helper module for torus slice\nmodule torus_slice(outer_r, thickness, height) {\n    difference() {\n        // Main torus segment\n        rotate_extrude($fn=32)\n            translate([outer_r,0,0])\n                square([thickness,height]);\n        \n        // Cut to segment\n        translate([0,0,-height/2-1])\n            cube([outer_r*2+thickness*2, outer_r*2+thickness*2, height+2], center=true);\n    }\n}\n\n// Render the ethereon\nethereon();",
    "renders": true
  },
  {
    "household_item": "galadriel",
    "openscad_code": "// Galadriel - Realistic Medium Complexity\n// Scale: 80mm tall\n\n$fn = 32;\n\nmodule head() {\n    // Main head sphere\n    difference() {\n        sphere(d = 18);\n        // Neck cavity\n        translate([0, 0, -10])\n            cylinder(h = 12, d = 6, $fn = 16);\n    }\n}\n\nmodule hair() {\n    // Long flowing hair\n    union() {\n        // Back hair\n        translate([0, 7, 0])\n            scale([1, 2.5, 1.2])\n            sphere(d = 20);\n        \n        // Side hair locks\n        for (i = [-1, 1]) {\n            translate([i * 9, 3, -5])\n                rotate([0, i * 20, 0])\n                scale([1, 2, 0.8])\n                cylinder(h = 25, d1 = 8, d2 = 4);\n        }\n    }\n}\n\nmodule face() {\n    difference() {\n        head();\n        // Eye sockets\n        for (x = [-3.5, 3.5]) {\n            translate([x, 3, 8])\n                sphere(d = 3.5);\n        }\n        \n        // Nose\n        translate([0, 2, 7])\n            sphere(d = 4);\n            \n        // Mouth\n        translate([0, -2, 6])\n            rotate([90, 0, 0])\n            cylinder(h = 2, d = 3);\n    }\n}\n\nmodule crown() {\n    // Elven circlet\n    rotate_extrude(angle = 360, $fn = 64)\n        translate([9.5, 0, 0])\n            circle(d = 2);\n    \n    // Front jewel\n    translate([0, 0, 9.5])\n        sphere(d = 3);\n}\n\nmodule neck() {\n    cylinder(h = 8, d1 = 6, d2 = 8);\n}\n\nmodule torso() {\n    // Elven dress\n    hull() {\n        translate([0, 0, 4])\n            cylinder(h = 1, d = 20);\n        translate([0, 0, -15])\n            cylinder(h = 1, d = 25);\n    }\n    \n    // Sleeves\n    for (i = [-1, 1]) {\n        translate([i * 12, 0, -5])\n            rotate([0, 0, i * 20])\n            cylinder(h = 18, d1 = 8, d2 = 4);\n    }\n}\n\nmodule arms() {\n    for (i = [-1, 1]) {\n        translate([i * 12, 0, -5])\n            rotate([0, 0, i * 20])\n            cylinder(h = 15, d = 4);\n    }\n}\n\nmodule dress_details() {\n    // Belt\n    translate([0, 0, -8])\n        difference() {\n            cylinder(h = 3, d = 22);\n            cylinder(h = 4, d = 20);\n        }\n    \n    // Flowing hem\n    translate([0, 0, -15])\n        difference() {\n            cylinder(h = 2, d = 30);\n            cylinder(h = 3, d = 26);\n        }\n}\n\nmodule phial() {\n    // Phial of Galadriel\n    translate([0, -12, -5])\n        rotate([90, 0, 0])\n        union() {\n            cylinder(h = 12, d1 = 6, d2 = 8);\n            translate([0, 0, 12])\n                sphere(d = 8);\n            translate([0, 0, -1])\n                sphere(d = 6);\n        }\n}\n\n// Assembly\nunion() {\n    translate([0, 0, 25])\n        face();\n    \n    translate([0, 0, 25])\n        hair();\n        \n    translate([0, 0, 35])\n        crown();\n    \n    translate([0, 0, 17])\n        neck();\n    \n    torso();\n    \n    translate([0, 0, 0])\n        arms();\n    \n    dress_details();\n    \n    phial();\n}",
    "renders": true
  },
  {
    "household_item": "helion",
    "openscad_code": "// Helion (Helium Nucleus) - Alpha Particle Model\n// Realistic 3D printable model with proton/neutron detail\n\nmodule proton() {\n    // Main proton body - slightly flattened sphere\n    translate([0, 0, -1]) {\n        scale([1, 1, 0.8]) sphere(4, $fn=32);\n    }\n    \n    // Surface texture - quark bumps\n    for(i = [0:2]) {\n        rotate([0, 0, i*120]) {\n            translate([3.2, 0, 0]) sphere(0.8, $fn=16);\n        }\n    }\n}\n\nmodule neutron() {\n    // Main neutron body - slightly different shape\n    translate([0, 0, -1]) {\n        scale([1, 0.9, 0.9]) sphere(4, $fn=32);\n    }\n    \n    // Surface texture - quark bumps\n    for(i = [0:2]) {\n        rotate([0, 0, i*120+60]) {\n            translate([3.2, 0, 0]) sphere(0.8, $fn=16);\n        }\n    }\n}\n\nmodule nucleon_connector() {\n    // Strong force mediation - connection between nucleons\n    cylinder(h = 8, r1 = 1.2, r2 = 0.8, $fn=16);\n}\n\nmodule helion_core() {\n    // Central binding structure\n    sphere(2.5, $fn=32);\n    \n    // Protons (red)\n    color([0.8, 0.1, 0.1]) {\n        translate([0, 0, 4.5]) proton();\n        rotate([0, 180, 0]) translate([0, 0, 4.5]) proton();\n    }\n    \n    // Neutrons (gray)\n    color([0.5, 0.5, 0.5]) {\n        rotate([90, 0, 0]) translate([0, 0, 4.5]) neutron();\n        rotate([-90, 0, 0]) translate([0, 0, 4.5]) neutron();\n    }\n    \n    // Connectors between nucleons\n    color([0.3, 0.3, 0.8]) {\n        for(i = [0:3]) {\n            rotate([i*90, 0, 0]) {\n                union() {\n                    translate([0, 0, 2.5]) nucleon_connector();\n                    translate([0, 0, -2.5]) nucleon_connector();\n                }\n            }\n        }\n    }\n}\n\nmodule base_platform() {\n    // 3D printing base - flat bottom\n    difference() {\n        cylinder(h = 2, r = 20, $fn=64);\n        translate([0, 0, 1.9]) cylinder(h = 0.2, r = 18, $fn=64);\n    }\n}\n\nmodule support_structure() {\n    // Support arms for printing\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([15, 0, 1]) {\n                cube([8, 2, 8], center=true);\n                translate([4, 0, 4]) rotate([0, -45, 0]) cube([2, 2, 5.6], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 10]) helion_core();\ntranslate([0, 0, 0]) base_platform();\ntranslate([0, 0, 2]) support_structure();",
    "renders": true
  },
  {
    "household_item": "iridion",
    "openscad_code": "// Iridion (Space Shooter Enemy) – Realistic, medium complexity\n// Approx. 70 mm wing-tip to wing-tip, 3 mm min. wall thickness, printable without supports\n\n$fa = 2; $fs = 0.4;\n\n// Overall scale factor – change this to resize the whole model\noverall_scale = 1;\n\nmodule iridion() {\n    // Central fuselage – main armored pod\n    difference() {\n        // Main pod hull\n        scale([1,1,1.3]) sphere(d = 18);          // slightly stretched vertically\n        \n        // Cockpit window recess\n        translate([0, 0, 10])\n            scale([1.3, 0.7, 0.7])\n            sphere(d = 12);\n    }\n\n    // Cockpit glass\n    translate([0, 0, 10])\n        scale([1.3, 0.7, 0.7])\n        sphere(d = 11.8);\n\n    // Wing roots – thick load-bearing blocks\n    for (side = [-1, 1]) {\n        translate([side * 9, 0, -2])\n            rotate([0, 0, side * 30])\n            cube([10, 5, 6], center = true);\n    }\n\n    // Forward-swept wings\n    module wing() {\n        difference() {\n            // Main wing volume\n            hull() {\n                translate([0, 0, 0]) cube([22, 1.5, 8], center = true);\n                translate([18, 0, 3]) cube([4, 1.5, 4], center = true);\n            }\n            // Trim trailing edge to thin foil\n            translate([0, 0, -2])\n                rotate([0, 15, 0])\n                cube([30, 3, 10], center = true);\n        }\n    }\n\n    for (side = [-1, 1])\n        translate([side * 9, 0, -4])\n            rotate([0, 0, side * 35])\n            wing();\n\n    // Dual engine nacelles under wings\n    module nacelle() {\n        hull() {\n            cylinder(h = 12, d1 = 8, d2 = 6, $fn = 16);\n            translate([0, 0, -2])\n                sphere(d = 9);\n        }\n        // Intake tunnel\n        difference() {\n            cylinder(h = 8, d = 5.5, $fn = 16);\n            translate([0, 0, -0.5])\n                cylinder(h = 9, d = 4, $fn = 16);\n        }\n    }\n\n    for (side = [-1, 1])\n        translate([side * 22, 0, -6])\n            nacelle();\n\n    // Top antenna mast\n    translate([0, 0, 12])\n        cylinder(h = 8, d = 2.5, $fn = 8);\n\n    // Bottom sensor pod\n    hull() {\n        translate([0, 0, -10])\n            sphere(d = 6);\n        cylinder(h = 6, d = 5, $fn = 12);\n    }\n\n    // Gimballed weapon pods on sides\n    module gunPod() {\n        rotate([0, -15, 0])\n            hull() {\n                cylinder(h = 8, d = 4, $fn = 12);\n                translate([0, 0, -4])\n                    sphere(d = 4);\n            }\n    }\n\n    for (side = [-1, 1])\n        translate([side * 10, 7, -2])\n            gunPod();\n}\n\n// Output at requested scale\nscale(overall_scale) iridion();",
    "renders": true
  },
  {
    "household_item": "luminar",
    "openscad_code": "// Realistic Luminar (street-light) – 3D-printable, medium complexity\n// Overall height ≈ 95 mm, base diameter ≈ 40 mm\n\n// global print-friendly settings\n$fa = 2;\n$fs = 0.5;\n\n// wall thickness for all hollow parts\nwall = 1.6;\n\nmodule pole() {\n    // main aluminium pole\n    cylinder(h = 65, d1 = 12, d2 = 8, center = false);\n}\n\nmodule curved_arm() {\n    // curved arm holding the luminaire head\n    translate([0, 0, 65])\n    rotate([0, 90, 0])\n    rotate_extrude(angle = 90, $fn = 32)\n    translate([25, 0, 0])\n    difference() {\n        circle(r = 6);\n        circle(r = 6 - wall);\n    }\n}\n\nmodule head_base() {\n    // aluminium housing base with cooling fins\n    translate([25, 0, 65 + 25])\n    rotate([-90, 0, 0])\n    difference() {\n        cylinder(h = 15, d = 30);\n        translate([0, 0, wall])\n        cylinder(h = 15, d = 30 - 2 * wall);\n    }\n}\n\nmodule fins() {\n    // cooling fins on the upper side of the head\n    for (a = [0:30:359])\n    rotate([0, 0, a])\n    translate([25, 0, 65 + 25 + 15])\n    cube([15, wall, 6], center = true);\n}\n\nmodule led_holder() {\n    // recessed cavity for LED PCB\n    translate([25, 0, 65 + 25 - 2])\n    rotate([-90, 0, 0])\n    difference() {\n        cylinder(h = 5, d = 22);\n        translate([0, 0, 1])\n        cylinder(h = 5, d = 20);  // PCB sits on ledge\n    }\n}\n\nmodule lens_glass() {\n    // transparent protective lens\n    translate([25, 0, 65 + 25 - 3.5])\n    rotate([-90, 0, 0])\n    cylinder(h = 1.5, d = 22.2);\n}\n\nmodule base_plate() {\n    // mounting base with flange and bolt holes\n    translate([0, 0, -2])\n    difference() {\n        cylinder(h = 6, d = 40);\n        cylinder(h = 7, d = 36);  // hollow inside\n    }\n    // 4 bolt holes M4\n    for (a = [0:90:359])\n    rotate([0, 0, a])\n    translate([15, 0, 0])\n    cylinder(h = 7, d = 4.5);\n}\n\n// assembly\nunion() {\n    pole();\n    curved_arm();\n    head_base();\n    fins();\n    led_holder();\n    lens_glass();\n    base_plate();\n}",
    "renders": true
  },
  {
    "household_item": "nocturon",
    "openscad_code": "// Realistic Nocturne (Nocturne) Model for 3D Printing\n// Medium complexity, ~85 lines, 70 mm wingspan\n\n$fn=40;\n\n// Main body parameters\nbody_length = 35;\nbody_diameter = 15;\nhead_size = 12;\n\n// Wing parameters\nwing_span = 70;\nwing_thickness = 2;\nwing_root = 8;\n\nmodule body() {\n    difference() {\n        // Main body cylinder\n        cylinder(h=body_length, d=body_diameter, center=true);\n        \n        // Tail taper\n        translate([0,0,body_length/2 - 5])\n            cylinder(h=10, d1=body_diameter, d2=body_diameter-4, center=false);\n        \n        // Neck indent\n        translate([0,0,-body_length/2 + 8])\n            cylinder(h=8, d1=body_diameter-3, d2=body_diameter, center=false);\n    }\n}\n\nmodule head() {\n    translate([0,0,body_length/2 + head_size/2])\n    difference() {\n        sphere(d=head_size);\n        \n        // Beak\n        translate([0,0,-head_size/2])\n            cube([head_size/2, head_size/4, head_size/2], center=true);\n    }\n}\n\nmodule eye() {\n    sphere(d=2.5);\n}\n\nmodule eyes() {\n    translate([0,0,body_length/2 + head_size/2 + 2])\n    difference() {\n        sphere(d=head_size);\n        // Eye sockets\n        translate([head_size/3, head_size/2 - 1, 0])\n            rotate([0,90,0])\n            eye();\n        translate([-head_size/3, head_size/2 - 1, 0])\n            rotate([0,90,0])\n            eye();\n    }\n}\n\nmodule wing() {\n    difference() {\n        // Main wing shape\n        linear_extrude(height=wing_thickness)\n            polygon([\n                [0,0],\n                [wing_span/2, 5],\n                [wing_span/2 - 10, 20],\n                [wing_span/2 - 20, 25],\n                [wing_span/2 - 30, 20],\n                [wing_span/2 - 35, 10],\n                [0,0]\n            ]);\n        \n        // Feather cuts\n        for(i=[1:5]) {\n            translate([wing_span/2 - i*7, 10 + i*2, -1])\n                rotate([0,0,-30])\n                cube([15, 1, wing_thickness+2], center=true);\n        }\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([0, -body_diameter/2, body_length/4])\n        rotate([0,0,-20])\n        wing();\n    \n    // Right wing\n    mirror([0,1,0])\n        translate([0, -body_diameter/2, body_length/4])\n        rotate([0,0,-20])\n        wing();\n}\n\nmodule feet() {\n    // Left foot\n    translate([body_diameter/4, 0, -body_length/2 - 3])\n        rotate([0,-30,0])\n        cylinder(h=6, d=2);\n    \n    // Right foot\n    translate([-body_diameter/4, 0, -body_length/2 - 3])\n        rotate([0,-30,0])\n        cylinder(h=6, d=2);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    eyes();\n    wings();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "oblivion",
    "openscad_code": "// Oblivion Gateway – medium-complexity, printable, realistic style\n// Approx 80 mm tall when printed\n\n$fn=32;\n\n// overall scale factor\nSCALE = 1.0;\n\n// wall thickness for printability\nWALL = 2;\n\n// main module\nmodule oblivion_gate(){\n    difference(){\n        // outer stone frame\n        frame();\n        \n        // cut printable void\n        translate([0,0,-1]) cube([82,12,82], center=true);\n    }\n    \n    // side pillars\n    pillar(left=true);\n    pillar(left=false);\n    \n    // middle verticle teeth\n    for(i=[-1:1]){\n        translate([i*20,0,35])\n            rotate([0,0,45])\n                cube([8,8,30], center=true);\n    }\n    \n    // upper horizontal lintel with runes\n    lintel();\n    \n    // glowing portal disc behind frame\n    color(\"purple\",0.6)\n        translate([0,0,3])\n            cylinder(h=2, d=60);\n}\n\n// stone frame arch\nmodule frame(){\n    difference(){\n        union(){\n            // left post\n            translate([-35,0,0])\n                cube([14,10,70], center=true);\n            // right post\n            translate([35,0,0])\n                cube([14,10,70], center=true);\n            // top lintel block\n            translate([0,0,70])\n                cube([84,10,14], center=true);\n            // curved arch stones\n            for(a=[-60:10:60]){\n                rotate([0,0,a])\n                    translate([0,0,77])\n                        cylinder(h=10, d1=10, d2=6);\n            }\n        }\n        // inner opening\n        hull(){\n            translate([-30,0,30])\n                cylinder(h=12, d=18);\n            translate([30,0,30])\n                cylinder(h=12, d=18);\n            translate([0,0,70])\n                cylinder(h=12, d=50);\n        }\n    }\n}\n\n// pillar with cracks\nmodule pillar(left=true){\n    x = left ? -55 : 55;\n    difference(){\n        union(){\n            // base\n            translate([x,0,5])\n                cube([12,12,10], center=true);\n            // shaft\n            translate([x,0,40])\n                cube([10,10,60], center=true);\n            // top\n            translate([x,0,75])\n                cylinder(h=8, d1=10, d2=14);\n        }\n        // cracks\n        for(i=[1:4]){\n            rotate([0,0,i*20*(left?1:-1)])\n                translate([x, 0, 15+i*10])\n                    cube([2,12,6], center=true);\n        }\n    }\n}\n\n// rune lintel\nmodule lintel(){\n    translate([0,0,77])\n    difference(){\n        cube([80,12,8], center=true);\n        // rune holes\n        for(x=[-30:15:30]){\n            translate([x,0,0])\n                cylinder(h=14, d=4);\n        }\n    }\n}\n\n// render\nscale(SCALE)\n    oblivion_gate();",
    "renders": true
  },
  {
    "household_item": "pantheon",
    "openscad_code": "// Pantheon in realistic style - medium complexity\n// Overall dimensions: ~80mm diameter, ~50mm height\n\n// Parameters for easy scaling\nbase_d = 80;\nbase_h = 4;\nwall_h = 25;\nwall_th = 3;\ndome_h = 20;\ncol_d = 4;\ncol_h = 22;\ncol_count = 8;\nportico_depth = 15;\nroof_overhang = 2;\n\n// Main building module\nmodule pantheon() {\n    // Base foundation\n    cylinder(h=base_h, d=base_d, $fn=64);\n    \n    // Main cylindrical wall\n    translate([0, 0, base_h])\n    difference() {\n        cylinder(h=wall_h, d=base_d-wall_th*2, $fn=64);\n        // Doorway entrance\n        translate([0, -(base_d-wall_th*2)/2 + 8, wall_h/2])\n        rotate([0, 90, 0])\n        cylinder(h=12, d=8, $fn=32);\n    }\n    \n    // Portico columns\n    for(i=[0:col_count-1]) {\n        angle = i * 360/col_count;\n        translate([\n            cos(angle) * ((base_d-wall_th*2)/2 - col_d),\n            sin(angle) * ((base_d-wall_th*2)/2 - col_d),\n            base_h\n        ])\n        cylinder(h=col_h, d=col_d, $fn=16);\n    }\n    \n    // Portico roof\n    translate([0, 0, base_h+col_h])\n    cylinder(h=roof_overhang, d=base_d-wall_th*2 + 4, $fn=64);\n    \n    // Main dome\n    translate([0, 0, base_h+wall_h])\n    sphere(d=base_d-wall_th*2, $fn=64);\n    \n    // Oculus (top opening)\n    translate([0, 0, base_h+wall_h+dome_h-2])\n    difference() {\n        sphere(d=base_d-wall_th*2, $fn=64);\n        translate([0, 0, -5])\n        cylinder(h=10, d=8, $fn=32);\n    }\n    \n    // Interior floor\n    translate([0, 0, base_h-0.1])\n    cylinder(h=0.2, d=base_d-wall_th*4, $fn=64);\n    \n    // Decorative cornice\n    translate([0, 0, base_h+wall_h-2])\n    difference() {\n        cylinder(h=2, d=base_d-wall_th*2 + 2, $fn=64);\n        cylinder(h=2.2, d=base_d-wall_th*2 - 1, $fn=64);\n    }\n    \n    // Entry steps\n    translate([0, -(base_d/2 + 5), 0])\n    for(i=[1:3]) {\n        translate([0, -i*2, i*1])\n        cube([20 + i*4, 2, 1], center=true);\n    }\n}\n\n// Render the pantheon\npantheon();",
    "renders": true
  },
  {
    "household_item": "quasariel",
    "openscad_code": "// Quasariel - Realistic medium-complexity OpenSCAD model\n// Size: 80 mm tall, 3 mm wall thickness for 3D printing\n\n$fn = 50;\n\nmodule quasariel() {\n    // Main body - elongated ellipsoid\n    translate([0,0,25])\n        scale([1.2,1,1.5])\n        sphere(r=15);\n\n    // Central engine - glowing accretion disk\n    difference() {\n        translate([0,0,35])\n            scale([1.5,1.5,0.3])\n            sphere(r=12);\n        translate([0,0,34])\n            scale([1.4,1.4,0.3])\n            sphere(r=12);\n    }\n\n    // Jet 1 - north pole relativistic jet\n    for(i=[0:5]) {\n        translate([0,0,38+i*3])\n            scale([0.7-0.1*i,0.7-0.1*i,1])\n            cylinder(h=3,r1=3-i*0.5,r2=2-i*0.3);\n    }\n\n    // Jet 2 - south pole relativistic jet\n    for(i=[0:5]) {\n        translate([0,0,12-i*3])\n            scale([0.7-0.1*i,0.7-0.1*i,1])\n            cylinder(h=3,r1=3-i*0.5,r2=2-i*0.3);\n    }\n\n    // Dust torus - surrounding the central engine\n    rotate([90,0,0])\n    difference() {\n        scale([1.8,1.8,0.4])\n        cylinder(h=8,r=15,center=true);\n        scale([1.6,1.6,0.5])\n        cylinder(h=9,r=15,center=true);\n    }\n\n    // Broad line region clouds - spherical distribution\n    for(phi=[0:60:360]) {\n        for(theta=[30:60:150]) {\n            rotate([0,theta,phi])\n            translate([0,0,35])\n            scale([0.3,0.3,0.3])\n            sphere(r=2+sin(phi)*0.5);\n        }\n    }\n\n    // Host galaxy disk - flattened spiral structure\n    rotate([90,0,0])\n    difference() {\n        scale([4,4,0.15])\n        cylinder(h=4,r=20,center=true);\n        scale([3.8,3.8,0.2])\n        cylinder(h=5,r=20,center=true);\n    }\n\n    // Spiral arms - simplified as elliptical structures\n    for(i=[0:90:360]) {\n        rotate([0,0,i])\n        translate([25,0,25])\n        scale([0.8,0.3,0.1])\n        sphere(r=8);\n    }\n\n    // Magenic field lines - simplified as toroidal structures\n    for(i=[0:30:360]) {\n        rotate([0,i,0])\n        rotate([0,0,45])\n        translate([0,0,25])\n        scale([0.05,1.5,0.05])\n        torus(20,1);\n    }\n\n    // Redshift indicator - spectral feature\n    translate([-30,0,25])\n    rotate([0,90,0])\n    cylinder(h=2,r=3);\n}\n\n// Helper module for torus\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major,0,0])\n            circle(r=minor);\n}\n\n// Render the model\nscale([1,1,1])\nquasariel();",
    "renders": true
  },
  {
    "household_item": "radiant",
    "openscad_code": "// Radiant - Realistic style, medium complexity\n// Overall dimensions ~60mm diameter, 3mm thick\n\n// Parameters\n$fn = 32;\nbase_diameter = 60;\nbase_thickness = 3;\nspoke_width = 3;\nspoke_height = 2.5;\ncenter_hole_diameter = 6;\ngem_diameter = 8;\ngem_height = 4;\nprong_length = 4;\nprong_thickness = 1.5;\n\nmodule base_disc() {\n    difference() {\n        cylinder(d=base_diameter, h=base_thickness, center=true);\n        cylinder(d=center_hole_diameter, h=base_thickness+1, center=true);\n    }\n}\n\nmodule spoke(count, index) {\n    rotate([0, 0, index * (360/count)]) {\n        translate([base_diameter/2 - spoke_width, 0, 0]) {\n            difference() {\n                cube([base_diameter/2 - spoke_width, spoke_width, spoke_height], center=true);\n                // Taper the spoke\n                translate([spoke_width/2, 0, spoke_height/2 - 0.1]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(d1=spoke_width*2, d2=0, h=base_diameter/2 - spoke_width*2);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule star_spokes(count=8) {\n    for(i=[0:count-1]) {\n        spoke(count, i);\n    }\n}\n\nmodule prong() {\n    translate([0, 0, gem_height/2]) {\n        rotate([0, 45, 0]) {\n            cube([prong_thickness, prong_thickness, prong_length], center=true);\n        }\n    }\n}\n\nmodule gem_setting() {\n    // Gem\n    translate([0, 0, gem_height/2]) {\n        cylinder(d=gem_diameter, h=gem_height, center=true);\n    }\n    \n    // Prongs\n    for(i=[0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([gem_diameter/2 - prong_thickness/2, 0, 0]) {\n                prong();\n            }\n        }\n    }\n}\n\nmodule radiant() {\n    union() {\n        // Base\n        base_disc();\n        \n        // Spokes on top\n        translate([0, 0, base_thickness/2 + spoke_height/2]) {\n            star_spokes();\n        }\n        \n        // Gem setting in center\n        translate([0, 0, base_thickness/2 + spoke_height + gem_height/2]) {\n            gem_setting();\n        }\n    }\n}\n\n// Render the radiant\nradiant();",
    "renders": true
  },
  {
    "household_item": "seraphiel",
    "openscad_code": "// Seraphiel - Angel of Wisdom in realistic style\n// 3D printable with medium complexity\n\n$fn = 48;  // Smooth curves for 3D printing\nwall = 1.5;  // Wall thickness for printing\n\nmodule head() {\n    // Central head sphere with facial features\n    difference() {\n        sphere(d = 12);\n        \n        // Eye sockets\n        translate([-3, 4, 2]) rotate([0, 90, 0]) cylinder(h = 6, d = 2.5);\n        translate([3, 4, 2]) rotate([0, 90, 0]) cylinder(h = 6, d = 2.5);\n    }\n    \n    // Eyes\n    translate([-3, 3.5, 2]) sphere(d = 1.5);\n    translate([3, 3.5, 2]) sphere(d = 1.5);\n}\n\nmodule wings() {\n    // Generate 6 wings around the head\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 0, 10]) rotate([30, 0, 90]) {\n                // Wing base\n                difference() {\n                    scale([1, 0.3, 1]) sphere(d = 20);\n                    translate([0, 0, -10]) cube([30, 30, 20], center = true);\n                }\n                \n                // Wing feathers\n                for (j = [0:4]) {\n                    translate([5 + j * 2, 0, -j * 1.5]) rotate([0, 10 * j, 0]) {\n                        scale([1, 0.2, 0.8]) sphere(d = 8 - j);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule halo() {\n    // Fiery halo around the head\n    rotate([90, 0, 0]) difference() {\n        cylinder(h = 2, d1 = 18, d2 = 22);\n        cylinder(h = 2.1, d1 = 16, d2 = 20);\n    }\n}\n\nmodule body() {\n    // Robed body\n    translate([0, 0, -15]) difference() {\n        cylinder(h = 25, d1 = 16, d2 = 12);\n        translate([0, 0, -1]) cylinder(h = 27, d1 = 14, d2 = 10);\n    }\n    \n    // Robe folds\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 6, -8]) rotate([0, 0, 30]) {\n                difference() {\n                    cube([2, 8, 15], center = true);\n                    translate([0, 4, 0]) sphere(d = 10);\n                }\n            }\n        }\n    }\n}\n\nmodule arms() {\n    // Folded arms in prayer position\n    translate([0, 8, -5]) rotate([45, 0, 0]) {\n        // Left arm\n        translate([-6, 0, 0]) rotate([0, 0, 30]) {\n            cylinder(h = 12, d = 3);\n            translate([0, 0, 6]) sphere(d = 3);\n        }\n        \n        // Right arm\n        translate([6, 0, 0]) rotate([0, 0, -30]) {\n            cylinder(h = 12, d = 3);\n            translate([0, 0, 6]) sphere(d = 3);\n        }\n        \n        // Joined hands\n        translate([0, 0, 12]) sphere(d = 5);\n    }\n}\n\n// Assemble the seraphiel\nunion() {\n    // Head and halo\n    head();\n    translate([0, 0, 8]) halo();\n    \n    // Wings\n    wings();\n    \n    // Body and arms\n    body();\n    arms();\n}",
    "renders": true
  },
  {
    "household_item": "solith",
    "openscad_code": "// Realistic Solith (Medium complexity)\n// 3D printable, ~70mm long\n// No overhangs >45°, 1.2 mm walls\n\n$fn = 36;\n\n// Overall dimensions\nbody_l = 70;\nbody_w = 25;\nbody_h = 12;\n\nmodule body() {\n    difference() {\n        // Main slab\n        cube([body_l, body_w, body_h], center=true);\n        \n        // Long chamfers on top edges\n        translate([0, body_w/2, body_h/2])\n            rotate([0,45,0])\n                cube([body_l+2, 2, 2], center=true);\n        translate([0, -body_w/2, body_h/2])\n            rotate([0,-45,0])\n                cube([body_l+2, 2, 2], center=true);\n    }\n}\n\nmodule pegs() {\n    peg_d = 6;\n    peg_h = 8;\n    peg_step = 25;\n    \n    for (x = [-peg_step, 0, peg_step])\n        translate([x, 0, body_h/2 + peg_h/2]) {\n            // Cylindrical peg\n            cylinder(d=peg_d, h=peg_h, $fn=20);\n            \n            // Small shoulder\n            translate([0,0,peg_h/2 - 1])\n                cylinder(d=peg_d + 2, h=2, $fn=20);\n        }\n}\n\nmodule holes() {\n    hole_d = 3.2;     // M3 screw\n    hole_h = body_h + 1;\n    spacing = 60;\n    \n    for (x = [-spacing/2, spacing/2])\n        translate([x, 0, -body_h/2])\n            cylinder(d=hole_d, h=hole_h);\n}\n\nmodule keyway() {\n    // Rectangular slot for alignment\n    slot_w = 8;\n    slot_l = 30;\n    slot_d = 2.5;\n    \n    translate([0, 0, body_h/2 - slot_d/2])\n        cube([slot_l, slot_w, slot_d], center=true);\n}\n\nmodule logo() {\n    // Simple embossed \"S\" mark\n    translate([body_l/2 - 8, 0, body_h/2 - 0.4])\n        scale([1,0.8,1])\n            linear_extrude(height=0.4)\n                text(\"S\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// Build the solith\nunion() {\n    body();\n    pegs();\n    keyway();\n    logo();\n}\ndifference() {\n    children();\n    holes();\n}",
    "renders": true
  },
  {
    "household_item": "stellion",
    "openscad_code": "// Stellion (Star lizard) - realistic medium-complexity model\n// Total length ~90 mm, printable in one piece\n\n// Parameters\nbody_len = 45;\nbody_w   = 22;\nbody_h   = 18;\nhead_len = 18;\nhead_w   = 14;\nhead_h   = 12;\ntail_len = 45;\ntail_start_w = 10;\ntail_end_w   = 2;\nleg_h  = 12;\nleg_w  = 5;\narm_h  = 10;\narm_w  = 4;\nscale_size = 2;\n\n// Main body\nmodule body() {\n    hull() {\n        // Main torso\n        translate([0, 0, body_h/2])\n            cube([body_len, body_w, body_h], center=true);\n        \n        // Slight bulge for belly\n        translate([0, 0, body_h/4])\n            cube([body_len-5, body_w, body_h*0.9], center=true);\n    }\n}\n\n// Head with snout and cranial ridges\nmodule head() {\n    union() {\n        // Main head block\n        translate([body_len/2 + head_len/2, 0, body_h/2 + head_h/2])\n            cube([head_len, head_w, head_h], center=true);\n        \n        // Snout\n        translate([body_len/2 + head_len + 3, 0, body_h/2 + head_h/2 - 2])\n            cube([6, head_w*0.7, head_h*0.6], center=true);\n        \n        // Eye ridges\n        for(x = [0, 1]) {\n            translate([body_len/2 + head_len*0.6, x==0 ? -head_w/3 : head_w/3, body_h/2 + head_h/2 + 2])\n                cube([head_len*0.3, 2, 3], center=true);\n        }\n    }\n}\n\n// Tail with taper and segments\nmodule tail() {\n    difference() {\n        union() {\n            hull() {\n                // Tail root\n                translate([-body_len/2, 0, body_h/2])\n                    cube([tail_start_w, tail_start_w, tail_start_w], center=true);\n                \n                // Tail tip\n                translate([-body_len/2 - tail_len, 0, body_h/2 - 5])\n                    cube([tail_end_w, tail_end_w, tail_end_w], center=true);\n            }\n        }\n        \n        // Carve underside for natural curve\n        translate([-body_len/2 - tail_len/2, 0, body_h/2 - 5])\n            cube([tail_len + 10, tail_start_w + 2, 10], center=true);\n    }\n}\n\n// Limb with claws\nmodule limb(len, wid, angle, side) {\n    rotate([angle, 0, 0]) {\n        // Upper part\n        translate([0, side*wid/2, -len/2])\n            cube([wid*1.2, wid, len], center=true);\n        \n        // Lower part\n        translate([0, side*(wid + 1), -len - len/2])\n            cube([wid, wid*0.8, len], center=true);\n        \n        // Claw\n        translate([0, side*(wid + 1.5), -len*2])\n            cylinder(h=3, r1=wid/2, r2=wid/4);\n    }\n}\n\n// Scales pattern\nmodule scales(base_len, base_wid, rows) {\n    for(i = [0:rows-1]) {\n        for(j = [0:i]) {\n            translate([base_len/2 - i*scale_size, -base_wid/2 + j*scale_size*2 + i*scale_size, body_h/2 + body_h/2 + scale_size])\n                sphere(r=scale_size, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Front legs\n    translate([body_len/3, 0, 0])\n        limb(leg_h, leg_w, 45, 1);\n    translate([body_len/3, 0, 0])\n        limb(leg_h, leg_w, 45, -1);\n    \n    // Rear legs\n    translate([-body_len/3, 0, 0])\n        limb(leg_h, leg_w, -45, 1);\n    translate([-body_len/3, 0, 0])\n        limb(leg_h, leg_w, -45, -1);\n    \n    // Arms\n    translate([body_len/2 - 5, 0, body_h/2])\n        limb(arm_h, arm_w, 60, 1);\n    translate([body_len/2 - 5, 0, body_h/2])\n        limb(arm_h, arm_w, 60, -1);\n    \n    // Back scales\n    scales(body_len - 10, body_w, 6);\n}",
    "renders": true
  },
  {
    "household_item": "thalorion",
    "openscad_code": "// Thalorion - Medium complexity realistic style\n// A thalorion is a classic fantasy airship with magical propulsion\n\n// Overall dimensions\nlength = 80;\nwidth = 30;\nheight = 25;\n\n// Hull module\nmodule hull() {\n    // Main hull - elongated ellipsoid shape\n    hull() {\n        translate([0, 0, 5]) scale([length/2, width/2, height/2]) sphere(1, $fn=32);\n        translate([0, 0, -5]) scale([length/2.2, width/2.2, height/3]) sphere(1, $fn=32);\n    }\n    \n    // Deck railings\n    for(i = [-length/2+5:5:length/2-5]) {\n        translate([i, width/2-2, height/2+2]) cube([1, 1, 3]);\n        translate([i, -width/2+1, height/2+2]) cube([1, 1, 3]);\n    }\n    \n    // Bow detail\n    translate([length/2, 0, 0]) rotate([0, 90, 0]) cylinder(h=width/3, r1=width/4, r2=0, $fn=32);\n}\n\n// Balloon module\nmodule balloon() {\n    // Main envelope\n    translate([0, 0, height+10]) scale([1.2, 0.8, 1]) sphere(width/2, $fn=32);\n    \n    // Reinforcement bands\n    for(z = [-width/2+5:5:width/2-5]) {\n        translate([0, 0, height+10+z]) rotate([0, 0, 90]) rotate_extrude($fn=64) \n            translate([width/2-1, 0, 0]) circle(1);\n    }\n}\n\n// Rigging module\nmodule rigging() {\n    // Main mast\n    translate([0, 0, height/2]) cylinder(h=height+5, r=2, $fn=16);\n    \n    // Rigging lines\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle]) \n            translate([0, 0, height/2+height]) \n                cylinder(h=height, r=0.5, $fn=8);\n    }\n}\n\n// Propulsion module\nmodule propulsion() {\n    // Rear propellers\n    translate([-length/2+5, width/4, height/2]) rotate([0, 90, 0]) \n        cylinder(h=5, r=width/8, $fn=16);\n    translate([-length/2+5, -width/4, height/2]) rotate([0, 90, 0]) \n        cylinder(h=5, r=width/8, $fn=16);\n    \n    // Magic crystal housing\n    translate([-length/2+2, 0, height/2+5]) \n        cube([3, width/4, 3], center=true);\n}\n\n// Bridge module\nmodule bridge() {\n    // Main bridge structure\n    translate([length/4, 0, height/2+3]) \n        cube([length/4, width/2, 4], center=true);\n    \n    // Windows\n    translate([length/4+1, 0, height/2+4]) \n        cube([length/4-2, width/2-2, 2], center=true);\n}\n\n// Landing gear\nmodule landing_gear() {\n    // Front struts\n    translate([length/2-5, width/3, -3]) cylinder(h=6, r=1, $fn=12);\n    translate([length/2-5, -width/3, -3]) cylinder(h=6, r=1, $fn=12);\n    \n    // Rear struts\n    translate([-length/2+5, width/3, -3]) cylinder(h=6, r=1, $fn=12);\n    translate([-length/2+5, -width/3, -3]) cylinder(h=6, r=1, $fn=12);\n}\n\n// Main assembly\nunion() {\n    hull();\n    balloon();\n    rigging();\n    propulsion();\n    bridge();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "household_item": "umbrion",
    "openscad_code": "// Realistic Umbrion (Medium complexity)\n// Body, head, wings, legs, and tail with 3D-printable features\n\n// Dimensions (mm)\nbody_len = 60;\nbody_wid = 35;\nbody_hgt = 25;\n\nhead_len = 25;\nhead_wid = 22;\nhead_hgt = 20;\n\nwing_span = 80;\nwing_len  = 45;\nwing_thk  = 2;\n\nleg_len = 20;\nleg_wid = 4;\nleg_hgt = 6;\n\ntail_len = 40;\ntail_wid = 15;\ntail_hgt = 10;\n\n$fn=36;\n\nmodule body() {\n    // Main torso\n    translate([0, 0, body_hgt/2])\n        scale([1, 0.8, 0.7])\n        sphere(d=body_len);\n\n    // Chest ridge\n    translate([body_len/2-5, 0, body_hgt/2])\n        rotate([0, 90, 0])\n        cylinder(h=body_wid/2, d1=body_hgt, d2=body_hgt/3);\n}\n\nmodule head() {\n    translate([body_len/2+head_len/2-5, 0, body_hgt/2+2])\n    rotate([0, -10, 0])\n    union() {\n        // Skull\n        scale([1.1, 1, 1])\n        sphere(d=head_len);\n\n        // Snout\n        translate([head_len/2, 0, -head_hgt/4])\n        scale([0.7, 0.7, 0.5])\n        sphere(d=head_len);\n\n        // Eye sockets\n        for(x=[-head_wid/4, head_wid/4])\n            translate([head_len/4, x, head_hgt/8])\n            rotate([0, 90, 0])\n            cylinder(h=head_len/2, d=head_wid/3);\n    }\n}\n\nmodule wing() {\n    // Root\n    difference() {\n        translate([-wing_len/4, 0, 0])\n            cube([wing_len, wing_wid/2, wing_thk], center=true);\n        translate([-wing_len/2-2, 0, -wing_thk-1])\n            cube([wing_len/2, wing_wid/2+2, wing_thk+2], center=true);\n    }\n    // Membrane\n    for(i=[0:2:wing_len/2]) {\n        hull() {\n            translate([-i, 0, 0])\n                sphere(d=wing_thk*2);\n            translate([-i-wing_len/4, (wing_span/2)*sin(i*3), 0])\n                sphere(d=wing_thk*2);\n        }\n    }\n}\n\nmodule wings() {\n    // Left\n    translate([0, body_wid/2, body_hgt/2+5])\n    rotate([0, 0, 20])\n    wing();\n    // Right\n    mirror([0,1,0])\n    translate([0, body_wid/2, body_hgt/2+5])\n    rotate([0, 0, 20])\n    wing();\n}\n\nmodule leg() {\n    // Upper\n    translate([0, 0, leg_len/2])\n        rotate([0, 90, 0])\n        cylinder(h=leg_len/2, d=leg_wid);\n    // Lower\n    translate([leg_len/2, 0, -leg_len/2])\n        rotate([0, 90, 0])\n        cylinder(h=leg_len/2, d=leg_wid*0.8);\n    // Foot\n    translate([leg_len, 0, -leg_len])\n        scale([1.5, 1, 0.4])\n        sphere(d=leg_wid);\n}\n\nmodule legs() {\n    for(side=[-1,1])\n    for(pos=[body_len/4, -body_len/4]) {\n        translate([pos, side*body_wid/2, -body_hgt/2])\n        rotate([0, 0, side*15])\n        leg();\n    }\n}\n\nmodule tail() {\n    // Segments\n    for(i=[0:5]) {\n        translate([-body_len/2-i*tail_len/6, 0, body_hgt/2-i*2])\n            scale([1-i*0.1, 1-i*0.15, 1-i*0.15])\n            sphere(d=tail_len/2);\n    }\n    // Tail spike\n    translate([-body_len/2-tail_len, 0, body_hgt/2-10])\n        rotate([0, 0, 180])\n        cylinder(h=tail_len/4, d1=tail_wid/4, d2=0);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "velithra",
    "openscad_code": "// Velithra - Realistic Style, Medium Complexity\n// Dimensions: ~70mm length, ~40mm height\n\n$fn = 50;\n\n// Main body module\nmodule velithra_body() {\n    // Central torso\n    translate([0, 0, 10]) {\n        difference() {\n            hull() {\n                cube([35, 20, 25], center = true);\n                translate([0, 0, 5]) sphere(d = 25);\n            }\n            // Hollow out for printing\n            translate([0, 0, 0]) cube([30, 15, 20], center = true);\n        }\n    }\n    \n    // Head dome\n    translate([15, 0, 30]) {\n        difference() {\n            sphere(d = 20);\n            translate([0, 0, -5]) cube([15, 15, 10], center = true);\n        }\n    }\n    \n    // Eye sockets\n    for (x = [-1, 1]) {\n        translate([20, x * 6, 32]) {\n            rotate([0, 90, 0]) cylinder(h = 3, d = 5);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([0, side * 8, 0]) {\n        // Upper leg\n        translate([-10, 0, 12]) {\n            rotate([0, 30 * side, 0]) {\n                cylinder(h = 15, d1 = 8, d2 = 6);\n            }\n        }\n        \n        // Lower leg\n        translate([-20, side * 5, 8]) {\n            rotate([0, 60 * side, 0]) {\n                cylinder(h = 12, d = 5);\n            }\n        }\n        \n        // Foot\n        translate([-28, side * 8, 5]) {\n            rotate([0, 0, 45]) {\n                cube([10, 6, 3], center = true);\n            }\n        }\n    }\n}\n\n// Arm module\nmodule arm(side) {\n    translate([5, side * 12, 20]) {\n        // Shoulder\n        sphere(d = 6);\n        \n        // Upper arm\n        translate([0, side * 5, -5]) {\n            rotate([0, 0, 30 * side]) {\n                cylinder(h = 12, d = 4);\n            }\n        }\n        \n        // Forearm\n        translate([0, side * 12, -12]) {\n            rotate([0, 0, 45 * side]) {\n                cylinder(h = 10, d = 3);\n            }\n        }\n        \n        // Hand\n        translate([0, side * 15, -18]) {\n            sphere(d = 5);\n            \n            // Fingers\n            for (i = [0:2]) {\n                rotate([0, 0, i * 30 - 30]) {\n                    translate([0, side * 3, -2]) {\n                        cylinder(h = 5, d = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    translate([0, side * 10, 25]) {\n        rotate([0, 15 * side, 0]) {\n            // Wing base\n            cube([20, 3, 15], center = true);\n            \n            // Wing membranes\n            for (i = [0:3]) {\n                translate([10 + i * 5, 0, 12 - i * 3]) {\n                    rotate([0, -20 + i * 10, 0]) {\n                        cube([15 - i * 3, 1, 8 - i * 2], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([-25, 0, 15]) {\n        // Tail segments\n        for (i = [0:4]) {\n            translate([-i * 8, 0, -i * 2]) {\n                rotate([0, 0, i * 10]) {\n                    hull() {\n                        sphere(d = 10 - i * 1.5);\n                        translate([-5, 0, 0]) sphere(d = 8 - i * 1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    velithra_body();\n    \n    // Legs\n    for (side = [-1, 1]) {\n        leg(side);\n    }\n    \n    // Arms\n    for (side = [-1, 1]) {\n        arm(side);\n    }\n    \n    // Wings\n    for (side = [-1, 1]) {\n        wing(side);\n    }\n    \n    // Tail\n    tail();\n}\n\n// Base platform for printing\ntranslate([0, 0, -1]) {\n    cube([50, 50, 2], center = true);\n}",
    "renders": true
  },
  {
    "household_item": "zephyrel",
    "openscad_code": "$fn=40;\n\n// Zephyrel - medium complexity realistic style\n// Overall dimensions approx 70mm tall\n\nmodule zephyrel() {\n    // Main body - elliptical cylinder with rounded top\n    difference() {\n        union() {\n            // Central body\n            cylinder(h=45, d1=25, d2=28, center=false);\n            // Rounded top\n            translate([0,0,45])\n                sphere(d=28);\n        }\n        // Hollow interior\n        translate([0,0,-1])\n            cylinder(h=47, d1=21, d2=24, center=false);\n        translate([0,0,44])\n            sphere(d=24);\n    }\n\n    // Mouthpiece - tapered cylinder\n    translate([0,0,-8])\n        cylinder(h=10, d1=18, d2=25, center=false);\n\n    // Windows - 8 rectangular openings around body\n    for(i=[0:7]) {\n        rotate([0,0,i*45])\n            translate([12,0,25])\n                rotate([0,90,0])\n                    cube([8,3,6], center=true);\n    }\n\n    // Tone holes - 6 finger holes\n    positions = [\n        [0, -11, 15],\n        [0, -11, 25],\n        [0, -11, 35],\n        [0, 11, 15],\n        [0, 11, 25],\n        [0, 11, 35]\n    ];\n    \n    for(pos=positions) {\n        translate(pos)\n            rotate([90,0,0])\n                cylinder(h=2, d=4, center=true);\n    }\n\n    // Thumb hole on back\n    translate([0,-14,25])\n        rotate([0,90,0])\n            cylinder(h=2, d=4, center=true);\n\n    // Labium edge - sharp edge for sound production\n    difference() {\n        translate([0,0,42])\n            cube([20,2,3], center=true);\n        translate([0,-1.5,42.5])\n            cube([21,2,2.5], center=true);\n    }\n\n    // Windway - narrow channel for air\n    difference() {\n        translate([0,0,40])\n            cube([16,4,2], center=true);\n        translate([0,2,40])\n            cube([14,2,1.8], center=true);\n    }\n\n    // Decorative rings\n    module ring(height, diameter) {\n        difference() {\n            cylinder(h=2, d=diameter+2, center=false);\n            cylinder(h=2.2, d=diameter, center=false);\n        }\n    }\n    \n    translate([0,0,5])\n        ring(2, 26);\n    translate([0,0,38])\n        ring(2, 28);\n\n    // Labium block - raised portion\n    translate([0,-14,40])\n        cube([16,14,4], center=false);\n}\n\n// Generate the complete model\ntranslate([0,0,10])\n    zephyrel();",
    "renders": true
  },
  {
    "household_item": "aelion",
    "openscad_code": "// Realistic medium-complexity Aelion (ancient Greek lyre variant)\n// 3D printable – 80 mm tall, no overhangs >45°, 2 mm walls\n\n$fn = 32;\n\n// overall scale\nscale(0.8)\nunion() {\n    // central yoke\n    yoke();\n\n    // two curved arms\n    translate([-20, 0, 0]) arm();\n    translate([20, 0, 0]) mirror([1,0,0]) arm();\n\n    // soundbox (rounded bowl)\n    translate([0, 0, -50]) soundbox();\n\n    // cross bar (zither bridge)\n    translate([0, 0, 0]) bridge();\n\n    // seven vertical strings\n    for(i=[-3:3])\n        translate([i*5, 0, 0]) string();\n}\n\n// --------------------------------------------------\nmodule yoke() {\n    difference() {\n        // main curved yoke beam\n        rotate([0, -90, 0])\n            cylinder(h = 40, d1 = 8, d2 = 8, center = true);\n        // holes for pegs (5 mm Ø)\n        for(i=[-2:2])\n            translate([i*7, 0, 0])\n                rotate([0, -90, 0])\n                    cylinder(h = 12, d = 5, center = true);\n    }\n}\n\n// --------------------------------------------------\nmodule arm() {\n    // sweep a circle along an arc\n    hull() {\n        // top joint with yoke\n        translate([0, 0, 0])\n            sphere(d = 10);\n        // bottom joint with soundbox\n        translate([0, 0, -50])\n            sphere(d = 12);\n    }\n    // add slight bulge for realism\n    translate([0, 0, -25])\n        scale([0.8, 1, 1.2])\n            sphere(d = 10);\n}\n\n// --------------------------------------------------\nmodule soundbox() {\n    // hollow bowl\n    difference() {\n        // outer shell\n        scale([1, 0.7, 1])\n            sphere(d = 50);\n        // inner cavity\n        scale([0.9, 0.6, 0.9])\n            sphere(d = 48);\n    }\n    // flat bottom for printing\n    translate([0, 0, -25])\n        cube([50, 35, 2], center = true);\n}\n\n// --------------------------------------------------\nmodule bridge() {\n    // small rectangular bar\n    cube([55, 3, 2], center = true);\n}\n\n// --------------------------------------------------\nmodule string() {\n    // simple cylinders for strings\n    cylinder(h = 65, d = 0.6, center = false);\n}",
    "renders": true
  },
  {
    "household_item": "astrophel",
    "openscad_code": "// Astrophel - small 3D-printable astronomical sphere\n// Total height ≈ 65 mm, Ø ≈ 55 mm\n\n// Parameters\n$fn = 48;\nring_t = 2;        // ring wall thickness\nring_r = 25;       // outer radius of rings\nsphere_r = 22;     // inner sphere radius\naxis_d = 3;        // pivot pin diameter\nbase_h = 6;        // stand height\n\n// Main assembly\nunion() {\n    // Central sphere\n    color(\"gold\")\n    sphere(r = sphere_r);\n\n    // Primary meridian ring\n    rotate([90,0,0])\n    difference() {\n        torus(ring_r, ring_t);\n        translate([0,0,-ring_t/2])\n            cube([ring_r*2.2, ring_t*1.2, ring_t], center=true);\n    }\n\n    // Equatorial ring\n    difference() {\n        torus(ring_r, ring_t);\n        // Cutout for meridian clearance\n        translate([0,0,-ring_t/2])\n            cube([ring_t*1.2, ring_r*2.2, ring_t], center=true);\n    }\n\n    // Secondary meridian (offset 15°)\n    rotate([90,15,0])\n    difference() {\n        torus(ring_r, ring_t);\n        translate([0,0,-ring_t/2])\n            cube([ring_r*2.2, ring_t*1.2, ring_t], center=true);\n    }\n\n    // Central axis pins\n    pin([0,0, sphere_r]);\n    pin([0,0,-sphere_r]);\n\n    // Decorative stand\n    translate([0,0,-sphere_r-base_h-2])\n        stand();\n}\n\n// ---------- Modules ----------\nmodule torus(R, t) {\n    rotate_extrude()\n        translate([R-t/2,0,0])\n            circle(d = t);\n}\n\nmodule pin(pos) {\n    translate(pos)\n        cylinder(d = axis_d, h = ring_t*1.2, center=true);\n}\n\nmodule stand() {\n    base_r = ring_r*0.6;\n    union() {\n        // Pedestal\n        cylinder(h = base_h, r1 = base_r, r2 = base_r*0.7);\n        // Feet\n        for(a=[0:120:359])\n            rotate([0,0,a])\n                translate([base_r*0.85,0,-base_h/2])\n                    cube([base_r*0.35, 3, base_h], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "caelumen",
    "openscad_code": "// Realistic Caelumen (ancient Roman portable lamp)\n// Medium complexity with printable walls and minimal overhangs\n\n$fn = 48; // Smooth curves for printing\n\nmodule oil_chamber() {\n    difference() {\n        // Main oil reservoir body\n        cylinder(h = 22, r = 24, center = true);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n            cylinder(h = 26, r = 20, center = true);\n    }\n}\n\nmodule pouring_spout() {\n    translate([0, 24, 0])\n    rotate([90, 0, 0])\n    difference() {\n        union() {\n            // Spout body\n            cylinder(h = 15, r1 = 10, r2 = 6);\n            \n            // Rim lip\n            translate([0, 0, 14])\n                cylinder(h = 3, r = 11);\n        }\n        \n        // Hollow channel\n        cylinder(h = 20, r1 = 7, r2 = 3);\n    }\n}\n\nmodule handle() {\n    translate([0, -30, 0])\n    rotate([90, 0, 0])\n    difference() {\n        union() {\n            // Handle arch\n            rotate_extrude(angle = 180)\n                translate([22, 0, 0])\n                    circle(r = 4);\n            \n            // Base mounts\n            translate([0, 0, -5])\n                cylinder(h = 10, r = 8);\n            translate([0, 0, 5])\n                cylinder(h = 10, r = 8);\n        }\n        \n        // Handle hollow\n        rotate_extrude(angle = 180)\n            translate([20, 0, 0])\n                circle(r = 2);\n    }\n}\n\nmodule wick_holder() {\n    translate([0, 0, 12])\n    difference() {\n        // Central wick tube\n        cylinder(h = 8, r = 6);\n        \n        // Wick hole\n        cylinder(h = 12, r = 2);\n    }\n}\n\nmodule decorative_ridges() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 0, -10 + i * 5])\n        difference() {\n            cylinder(h = 2, r = 25.5);\n            cylinder(h = 3, r = 24.5);\n        }\n    }\n}\n\nmodule base_ring() {\n    translate([0, 0, -11])\n    difference() {\n        cylinder(h = 4, r = 26);\n        cylinder(h = 5, r = 23);\n    }\n}\n\n// Assembly\nunion() {\n    oil_chamber();\n    pouring_spout();\n    handle();\n    wick_holder();\n    decorative_ridges();\n    base_ring();\n}",
    "renders": true
  },
  {
    "household_item": "chrysor",
    "openscad_code": "// Realistic chrysor (Greek sword) - medium complexity - 3D printable\n// Overall length ~100mm, blade thickness 2mm, hilt ~10mm diameter\n\n// Parameters\nblade_length = 70;\nblade_width = 18;\nblade_thickness = 2;\nfuller_depth = 1;\n\nguard_length = 30;\nguard_width = 8;\nguard_thickness = 4;\n\ngrip_length = 20;\ngrip_diameter = 12;\n\npommel_size = 14;\n\n// Blade module\nmodule blade() {\n    // Main blade body\n    linear_extrude(height=blade_thickness, center=true) {\n        polygon(points=[\n            [0, 0],\n            [blade_length*0.1, blade_width/4],\n            [blade_length*0.8, blade_width/2],\n            [blade_length, blade_width/6],\n            [blade_length, -blade_width/6],\n            [blade_length*0.8, -blade_width/2],\n            [blade_length*0.1, -blade_width/4],\n            [0, 0]\n        ]);\n    }\n    \n    // Fuller (groove)\n    translate([blade_length*0.5, 0, 0]) {\n        linear_extrude(height=blade_thickness+0.2, center=true) {\n            polygon(points=[\n                [-blade_length*0.3, -blade_width/8],\n                [blade_length*0.3, -blade_width/8],\n                [blade_length*0.3, blade_width/8],\n                [-blade_length*0.3, blade_width/8]\n            ]);\n        }\n    }\n}\n\n// Guard module\nmodule guard() {\n    // Main guard bar\n    difference() {\n        cube([guard_length, guard_thickness, guard_width], center=true);\n        \n        // Holes for decoration\n        for (i = [-1:1]) {\n            translate([i*8, 0, 0]) {\n                cylinder(h=guard_width+1, d=3, center=true);\n            }\n        }\n    }\n    \n    // Blade seat\n    translate([-blade_length/2-0.5, 0, 0]) {\n        cube([2, blade_width+2, blade_thickness+2], center=true);\n    }\n}\n\n// Grip module\nmodule grip() {\n    // Main grip\n    cylinder(h=grip_length, d=grip_diameter, center=true);\n    \n    // Grip rings\n    for (i = [-1, 0, 1]) {\n        translate([0, 0, i*6]) {\n            cylinder(h=2, d=grip_diameter+2, center=true);\n        }\n    }\n    \n    // Texture rings\n    for (i = [-6:6]) {\n        rotate([90, 0, 0]) {\n            translate([0, 0, i*1.5-1]) {\n                cylinder(h=0.5, d=grip_diameter, center=true);\n            }\n        }\n    }\n}\n\n// Pommel module\nmodule pommel() {\n    // Main pommel\n    sphere(d=pommel_size);\n    \n    // Decorative ring\n    translate([0, 0, -pommel_size/2]) {\n        cylinder(h=2, d=pommel_size+4, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Blade\n    translate([blade_length/2, 0, 0]) {\n        blade();\n    }\n    \n    // Guard\n    translate([0, 0, 0]) {\n        guard();\n    }\n    \n    // Grip\n    translate([-grip_length/2-guard_thickness/2, 0, 0]) {\n        rotate([90, 0, 0]) {\n            grip();\n        }\n    }\n    \n    // Pommel\n    translate([-grip_length-guard_thickness-pommel_size/2, 0, 0]) {\n        pommel();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "divinor",
    "openscad_code": "// Realistic Divinor (Medium Complexity)\n// Overall size: ~80mm wide, ~60mm deep, ~50mm tall\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-30, -20, 0]) cube([60, 40, 40], center = true);\n            translate([-25, -15, 35]) cube([50, 30, 10], center = true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5]) cube([52, 32, 45], center = true);\n    }\n}\n\n// Handle\nmodule handle() {\n    union() {\n        // Base cylinder\n        cylinder(h = 15, d = 12, center = true);\n        \n        // Grip rings\n        for (i = [-5, 0, 5]) {\n            translate([0, 0, i]) cylinder(h = 3, d = 14, center = true);\n        }\n        \n        // Connection to body\n        translate([0, 0, 8]) rotate([0, 90, 0]) cylinder(h = 20, d = 10, center = true);\n    }\n}\n\n// Sight window\nmodule sight_window() {\n    difference() {\n        // Frame\n        translate([0, 20, 30]) cube([40, 3, 20], center = true);\n        \n        // Window\n        translate([0, 21, 30]) cube([36, 2, 16], center = true);\n    }\n}\n\n// Dial face\nmodule dial_face() {\n    difference() {\n        // Base disc\n        translate([0, 0, 40]) cylinder(h = 2, d = 50);\n        \n        // Center hole\n        translate([0, 0, 41]) cylinder(h = 4, d = 4);\n        \n        // Degree markings\n        for (i = [0:15:359]) {\n            rotate([0, 0, i]) translate([19, 0, 42]) cube([3, 1, 1], center = true);\n        }\n    }\n}\n\n// Pointer arm\nmodule pointer() {\n    rotate([0, 0, 45]) {\n        union() {\n            // Main arm\n            translate([10, 0, 43]) cube([20, 2, 1], center = true);\n            \n            // Pointer tip\n            translate([20, 0, 43]) rotate([0, 90, 0]) cylinder(h = 3, d = 3, center = true);\n            \n            // Hub\n            translate([0, 0, 43]) cylinder(h = 3, d = 6, center = true);\n        }\n    }\n}\n\n// Leveling feet\nmodule feet() {\n    for (pos = [[-25, -15], [25, -15], [-25, 15], [25, 15]]) {\n        translate([pos[0], pos[1], -3]) {\n            difference() {\n                cylinder(h = 6, d = 8);\n                translate([0, 0, -1]) cylinder(h = 8, d = 6);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    body();\n    translate([-35, 0, 0]) handle();\n    dial_face();\n    pointer();\n    feet();\n    \n    // Sighting aids\n    sight_window();\n    \n    // Reinforcement ribs\n    for (i = [-20, 0, 20]) {\n        translate([i, 0, 20]) cube([3, 30, 20], center = true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "elestren",
    "openscad_code": "// Electric train (elestren) - realistic medium complexity\n// Designed for 3D printing with no overhangs and 2mm wall thickness\n\n// Parameters\nloco_len = 85;\nloco_width = 35;\nloco_height = 45;\nwheel_d = 15;\nwheel_w = 4;\ncoupler_len = 8;\nroof_thick = 3;\nwall_thick = 2;\n\n// Main locomotive body\nmodule locomotive_body() {\n    difference() {\n        // Main chassis\n        translate([0, 0, wheel_d/2])\n            rounded_box([loco_len, loco_width, loco_height-wall_thick], 5);\n        \n        // Cab space\n        translate([loco_len/2-25, 0, wheel_d/2+loco_height/2])\n            cube([30, loco_width-wall_thick*2, 30], center=true);\n        \n        // Windows\n        for(x=[-20, 0, 20]) {\n            translate([x, loco_width/2-wall_thick, wheel_d/2+loco_height/2+5])\n                cube([10, wall_thick+1, 15], center=true);\n            translate([x, -loco_width/2+wall_thick, wheel_d/2+loco_height/2+5])\n                cube([10, wall_thick+1, 15], center=true);\n        }\n    }\n}\n\n// Roof with vents\nmodule roof() {\n    hull() {\n        translate([-loco_len/2+10, 0, wheel_d/2+loco_height])\n            sphere(d=5);\n        translate([loco_len/2-10, 0, wheel_d/2+loco_height])\n            sphere(d=5);\n    }\n    \n    // Ventilation grills\n    for(x=[-30:10:30]) {\n        translate([x, 0, wheel_d/2+loco_height+roof_thick])\n            cube([8, loco_width-10, 2], center=true);\n    }\n}\n\n// Pantograph base\nmodule pantograph() {\n    translate([0, 0, wheel_d/2+loco_height+roof_thick+5])\n        difference() {\n            cylinder(h=8, d=15, $fn=6);\n            cylinder(h=10, d=10, $fn=6);\n        }\n}\n\n// Wheel set\nmodule wheel_set() {\n    rotate([0, 90, 0]) {\n        // Wheel\n        cylinder(h=wheel_w, d=wheel_d, $fn=20);\n        // Flange\n        translate([0, 0, wheel_w/2])\n            cylinder(h=wheel_w/2, d=wheel_d+4, $fn=20);\n        // Axle\n        cylinder(h=loco_width+10, d=wheel_d/3, $fn=12);\n    }\n}\n\n// Coupler\nmodule coupler() {\n    hull() {\n        translate([0, 0, 0])\n            sphere(d=wheel_d/2);\n        translate([coupler_len, 0, 0])\n            sphere(d=wheel_d/3);\n    }\n}\n\n// Helper for rounded box\nmodule rounded_box(size, radius) {\n    hull() {\n        for(x=[-1, 1])\n        for(y=[-1, 1])\n        for(z=[-1, 1])\n            translate([x*(size[0]/2-radius), y*(size[1]/2-radius), z*(size[2]/2-radius)])\n                sphere(r=radius);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nunion() {\n    locomotive_body();\n    roof();\n    pantograph();\n    \n    // Wheels\n    for(x=[-loco_len/3, 0, loco_len/3]) {\n        translate([x, 0, 0])\n            wheel_set();\n    }\n    \n    // Couplers\n    translate([-loco_len/2-coupler_len/2, 0, wheel_d/2])\n        rotate([90, 0, 0])\n            coupler();\n    translate([loco_len/2+coupler_len/2, 0, wheel_d/2])\n        rotate([90, 0, 0])\n            coupler();\n}",
    "renders": true
  },
  {
    "household_item": "empyrel",
    "openscad_code": "// Empyrel (Realistic Style, Medium Complexity)\n// A celestial winged flame entity for 3D printing\n// Overall height ~75 mm, wingspan ~60 mm\n\n// Parameters\nbody_h = 40;\nbody_r = 12;\nhead_r = 9;\nneck_h = 8;\nneck_r = 4;\nwing_span = 60;\nwing_thick = 2.5;\nflame_h = 25;\nbase_r = 15;\nbase_h = 5;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule body() {\n    // Main torso\n    difference() {\n        cylinder(h = body_h, r1 = body_r, r2 = body_r * 0.9, $fn = 48);\n        // Hollow interior\n        translate([0, 0, wall])\n            cylinder(h = body_h - wall * 2, r1 = body_r - wall, r2 = body_r * 0.9 - wall, $fn = 48);\n    }\n}\n\nmodule head() {\n    // Skull-like head\n    translate([0, 0, body_h + neck_h]) {\n        difference() {\n            sphere(r = head_r, $fn = 48);\n            // Hollow\n            sphere(r = head_r - wall, $fn = 48);\n            // Eye sockets\n            translate([head_r * 0.45, head_r * 0.4, head_r * 0.3])\n                rotate([0, 0, 45])\n                cube([head_r * 0.4, head_r * 0.2, head_r * 0.4], center = true);\n            mirror([1, 0, 0])\n                translate([head_r * 0.45, head_r * 0.4, head_r * 0.3])\n                rotate([0, 0, 45])\n                cube([head_r * 0.4, head_r * 0.2, head_r * 0.4], center = true);\n        }\n    }\n}\n\nmodule neck() {\n    // Connect head to body\n    translate([0, 0, body_h]) {\n        cylinder(h = neck_h, r1 = neck_r, r2 = neck_r * 0.8, $fn = 32);\n    }\n}\n\nmodule wing_base() {\n    // Root of wing\n    difference() {\n        cylinder(h = wing_thick * 2, r = body_r * 0.8, $fn = 32);\n        cylinder(h = wing_thick * 2, r = body_r * 0.8 - wall, $fn = 32);\n    }\n}\n\nmodule wing() {\n    // Feathered wing\n    translate([body_r, 0, body_h * 0.6]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Main wing shape\n                linear_extrude(height = wing_thick)\n                    polygon([\n                        [0, 0],\n                        [wing_span * 0.5, -wing_span * 0.3],\n                        [wing_span * 0.8, 0],\n                        [wing_span * 0.4, wing_span * 0.2],\n                        [0, wing_span * 0.1]\n                    ]);\n                // Hollow interior\n                translate([wall, 0, 0])\n                    linear_extrude(height = wing_thick + 0.1)\n                        scale([0.8, 0.8])\n                        polygon([\n                            [0, 0],\n                            [wing_span * 0.5, -wing_span * 0.3],\n                            [wing_span * 0.8, 0],\n                            [wing_span * 0.4, wing_span * 0.2],\n                            [0, wing_span * 0.1]\n                        ]);\n            }\n            // Feather details\n            for (i = [1:3:12]) {\n                translate([i * 4, 0, wing_thick / 2])\n                    rotate([0, 0, 15 - i * 2])\n                    cube([2, 0.5, wing_thick * 0.8], center = true);\n            }\n        }\n    }\n}\n\nmodule flame() {\n    // Ethereal flame rising from head\n    translate([0, 0, body_h + neck_h + head_r]) {\n        for (i = [0:15:359]) {\n            rotate([0, 0, i])\n                translate([sin(i * 3) * 2, cos(i * 3) * 2, flame_h * 0.3])\n                    scale([1 - i / 360, 1 - i / 360, 1])\n                        cylinder(h = flame_h / (1 + i / 180), r1 = 3, r2 = 0.5, $fn = 12);\n        }\n    }\n}\n\nmodule base() {\n    // Stand for stability\n    difference() {\n        cylinder(h = base_h, r = base_r, $fn = 64);\n        cylinder(h = base_h, r = base_r - wall, $fn = 64);\n    }\n}\n\n// Assembly\nunion() {\n    // Core structure\n    union() {\n        base();\n        translate([0, 0, base_h]) {\n            body();\n            neck();\n            head();\n        }\n    }\n    \n    // Wings\n    translate([0, 0, base_h]) {\n        wing();\n        mirror([1, 0, 0])\n            wing();\n    }\n    \n    // Flame\n    flame();\n}",
    "renders": true
  },
  {
    "household_item": "galaxion",
    "openscad_code": "// Galaxion - Realistic medium-complexity model\n// A compact sci-fi exploration ship with drive rings and sensor arrays\n\nmodule main_hull() {\n    // Central cylindrical body\n    cylinder(h = 30, d = 20, $fn = 64);\n    \n    // Tapered nose cone\n    translate([0, 0, 15])\n        cylinder(h = 12, d1 = 20, d2 = 8, $fn = 64);\n    \n    // Engine nozzle base\n    translate([0, 0, -17])\n        cylinder(h = 4, d1 = 20, d2 = 24, $fn = 64);\n}\n\nmodule drive_rings() {\n    // Front drive ring\n    translate([0, 0, 8])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 3, d = 32, $fn = 64);\n        cylinder(h = 4, d = 28, $fn = 64);\n    }\n    \n    // Rear drive ring\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 3, d = 36, $fn = 64);\n        cylinder(h = 4, d = 32, $fn = 64);\n    }\n}\n\nmodule sensor_array() {\n    // Top sensor dish\n    translate([0, 10, 12])\n    rotate([0, 90, 0])\n    difference() {\n        sphere(d = 6, $fn = 32);\n        translate([0, 0, -3]) cube([10, 10, 6], center = true);\n    }\n    \n    // Side radar panels\n    for (a = [0:120:359])\n        rotate([0, 0, a])\n        translate([12, 0, 5])\n        cube([8, 1, 4], center = true);\n}\n\nmodule thruster_details() {\n    // Main engine nozzles\n    translate([0, 0, -22])\n    for (i = [0:60:300])\n        rotate([0, 0, i])\n        translate([0, 7, 0])\n        cylinder(h = 6, d = 4, $fn = 12);\n    \n    // RCS thruster blocks\n    translate([0, 0, 10])\n    for (a = [0:90:359])\n        rotate([0, 0, a])\n        translate([10, 0, 0])\n        cube([3, 3, 3], center = true);\n}\n\nmodule docking_ports() {\n    // Front port\n    translate([0, 0, 25])\n    difference() {\n        cylinder(h = 4, d = 6, $fn = 32);\n        cylinder(h = 5, d = 4, $fn = 32);\n    }\n    \n    // Side ports\n    for (a = [90, -90])\n        rotate([0, 0, a])\n        translate([11, 0, 8])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 3, d = 5, $fn = 32);\n            cylinder(h = 4, d = 3, $fn = 32);\n        }\n}\n\nmodule antenna_mast() {\n    // Main antenna tower\n    translate([0, 0, 28])\n    cylinder(h = 8, d = 2, $fn = 16);\n    \n    // Antenna dishes\n    translate([0, 0, 34])\n    rotate([0, 90, 0])\n    sphere(d = 3, $fn = 16);\n}\n\n// Assemble the complete galaxion\nunion() {\n    main_hull();\n    drive_rings();\n    sensor_array();\n    thruster_details();\n    docking_ports();\n    antenna_mast();\n}",
    "renders": true
  },
  {
    "household_item": "heliora",
    "openscad_code": "// Heliora - Realistic Medium Complexity\n// 3D printable model with no overhangs\n\n$fn = 64;\nwall_thickness = 2;\nbase_height = 8;\ncenter_radius = 12;\nblade_length = 30;\nblade_width = 6;\nblade_thickness = 2;\nhub_height = 10;\nhub_radius = 5;\n\nmodule blade(blade_angle) {\n    rotate([0, 0, blade_angle])\n    translate([0, 0, blade_thickness/2])\n    difference() {\n        // Main blade shape\n        translate([blade_length/2, 0, 0])\n        cube([blade_length, blade_width, blade_thickness], center=true);\n        \n        // Tapered tip\n        translate([blade_length, 0, 0])\n        rotate([0, 0, -30])\n        cube([blade_width*2, blade_width*1.5, blade_thickness*2], center=true);\n        \n        // Rounded leading edge\n        translate([blade_length/2, blade_width/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=blade_length, r=blade_width/4, center=true);\n    }\n}\n\nmodule blades() {\n    for (i = [0:60:359])\n    blade(i);\n}\n\nmodule central_hub() {\n    difference() {\n        union() {\n            // Main hub cylinder\n            cylinder(h=hub_height, r=hub_radius, center=true);\n            \n            // Base flange\n            translate([0, 0, -hub_height/2])\n            cylinder(h=wall_thickness*2, r=hub_radius+wall_thickness, center=true);\n            \n            // Top cap\n            translate([0, 0, hub_height/2])\n            cylinder(h=wall_thickness*2, r=hub_radius+wall_thickness, center=true);\n        }\n        \n        // Central hole for axle\n        cylinder(h=hub_height+2, r=2, center=true);\n        \n        // Mounting holes\n        for (j = [0:120:359]) {\n            rotate([0, 0, j])\n            translate([hub_radius/2, 0, 0])\n            cylinder(h=hub_height+2, r=1.5, center=true);\n        }\n    }\n}\n\nmodule base() {\n    difference() {\n        // Main base\n        cylinder(h=base_height, r=center_radius+blade_length/2, center=false);\n        \n        // Center hole\n        translate([0, 0, -1])\n        cylinder(h=base_height+2, r=center_radius-wall_thickness, center=false);\n        \n        // Mounting holes\n        for (k = [0:90:359]) {\n            rotate([0, 0, k])\n            translate([center_radius+blade_length/2-7, 0, 0])\n            cylinder(h=base_height+2, r=2, center=false);\n        }\n    }\n}\n\nmodule heliora() {\n    // Base platform\n    base();\n    \n    // Central hub with blades\n    translate([0, 0, base_height+hub_height/2])\n    union() {\n        central_hub();\n        \n        // Blades attached to hub\n        translate([0, 0, hub_height/2+blade_thickness/2])\n        blades();\n    }\n}\n\n// Generate the complete model\nheliora();",
    "renders": true
  },
  {
    "household_item": "ilior",
    "openscad_code": "// OpenSCAD Ilior (L-shaped corner bracket) – Realistic, Medium Complexity\n// Size: ≈60 mm on longest edge, 3 mm wall thickness, printable without supports\n\nmodule screw_head(r=3,h=2.2)  // Countersunk screw head\n    cylinder(h=h, r1=r, r2=0, $fn=20);\n\nmodule screw_shaft(r=1.5,l=8)\n    cylinder(h=l, r=r, $fn=12);\n\nmodule screw() {             // Full screw\n    union() {\n        screw_head();\n        translate([0,0,2.2])\n            screw_shaft();\n    }\n}\n\nmodule bracket_body() {      // L-shaped corner block\n    wall = 3;\n    size = 40;\n    translate([-wall,-wall,0])\n        cube([size+wall,size+wall,size]);\n}\n\nmodule lightening_holes() {  // Triangular cut-outs to save material\n    for(i=[0,1])\n        for(j=[0,1]) {\n            translate([i?8:32, j?8:32, -1])\n                rotate([0,0,45])\n                    cube([10,10,size+2], center=true);\n        }\n}\n\nmodule screw_holes() {       // Two clearance holes + countersinks\n    hole_r = 3.5;            // 3 mm screw with clearance\n    depth  = 10;\n    for(x=[10,30])\n        for(y=[10,30]) {\n            translate([x,y,-1])\n                cylinder(h=depth+2, r=hole_r, $fn=20);\n            translate([x,y,depth-2.2])\n                screw_head(r=hole_r+1,h=2.2);\n        }\n}\n\nmodule ribs() {              // External reinforcing ribs\n    h = 3;                   // Rib height\n    for (a=[0,90]) {\n        rotate([0,0,a])\n            translate([-1.5, 38, 0])\n                cube([3, 4, 40]);\n    }\n}\n\nmodule fillet() {            // Simple 45° chamfer along inside corner\n    linear_extrude(height=40)\n        polygon(points=[[0,0],[0,4],[4,0]]);\n}\n\nsize = 40;\ndifference() {\n    union() {\n        bracket_body();\n        ribs();\n        translate([0,0,0]) fillet();\n    }\n    lightening_holes();\n    screw_holes();\n}\n\n// Example screws (not part of bracket, just for preview)\ntranslate([10,10,0]) rotate([0,0,0]) screw();\ntranslate([30,10,0]) rotate([0,0,0]) screw();\ntranslate([10,30,0]) rotate([0,0,0]) screw();\ntranslate([30,30,0]) rotate([0,0,0]) screw();",
    "renders": true
  },
  {
    "household_item": "lunaris",
    "openscad_code": "// Lunar ISRU (Lunaris) mining unit – compact, roughly 70 mm long\n// All dimensions in mm, printable without supports\n\n$fn=36;\nwall=1.2;          // 3D-print friendly wall thickness\nbase_r=20;         // Main body radius\nbase_h=25;         // Main body height\ndrill_r=3.5;       // Drill bit radius\ndrill_h=30;        // Drill bit length\nleg_len=22;        // Landing-leg length\nthruster_r=4;      // Thruster outlet radius\nthruster_h=5;      // Thruster depth\npanel_w=12;        // Solar panel width\npanel_h=20;        // Solar panel height\npanel_t=1.5;       // Solar panel thickness\n\n// Main body – cylindrical core\nmodule body() {\n    difference() {\n        cylinder(h=base_h, r=base_r, center=true);\n        // Hollow cavity\n        translate([0,0,-wall/2])\n            cylinder(h=base_h+1, r=base_r-wall, center=true);\n    }\n}\n\n// Landing legs – four foldable struts, no overhangs\nmodule leg() {\n    rotate([0,90,0])\n        cylinder(h=leg_len, r=2, center=false);\n}\n\nmodule landing_assembly() {\n    for(a=[0:90:270])\n        rotate([0,0,a])\n            translate([base_r-2,0,-base_h/2+2])\n                leg();\n}\n\n// Drill head – segmented cylinder with pointed tip\nmodule drill() {\n    difference() {\n        // Main shaft\n        translate([0,0,-drill_h/2-base_h/2])\n            cylinder(h=drill_h, r=drill_r, center=true);\n        // Tapered tip\n        translate([0,0,-base_h/2-drill_h])\n            cylinder(h1=drill_r*2, h2=0, r1=drill_r, r2=0);\n    }\n}\n\n// Thruster blocks – small radial thrusters for attitude\nmodule thruster() {\n    rotate([0,90,0])\n        cylinder(h=thruster_h, r=thruster_r, center=true);\n}\n\nmodule thruster_cluster() {\n    for(a=[45:90:315])\n        rotate([0,0,a])\n            translate([base_r-thruster_h/2,0,base_h/2-thruster_r])\n                thruster();\n}\n\n// Solar panels – two rectangular arrays\nmodule solar_panel() {\n    cube([panel_t,panel_w,panel_h], center=true);\n}\n\nmodule solar_assembly() {\n    translate([0,base_r+panel_t/2,base_h/4])\n        rotate([0,0,0]) solar_panel();\n    translate([0,-base_r-panel_t/2,base_h/4])\n        rotate([0,0,0]) solar_panel();\n}\n\n// Antenna mast\nmodule antenna() {\n    translate([0,0,base_h/2+8])\n        union() {\n            cylinder(h=10, r=1, center=false);\n            sphere(d=4);\n        }\n}\n\n// Assemble all parts\nunion() {\n    body();\n    landing_assembly();\n    drill();\n    thruster_cluster();\n    solar_assembly();\n    antenna();\n}",
    "renders": true
  },
  {
    "household_item": "nebulon",
    "openscad_code": "// Nebulon-B Frigate - Realistic Medium Complexity\n// Approximate length: 85mm, Width: 38mm, Height: 18mm\n\n// Main hull parameters\nhull_length = 80;\nhull_width = 12;\nhull_height = 8;\n\n// Engine section parameters\nengine_section_length = 20;\nengine_diameter = 8;\nnum_engines = 7;\n\n// Bridge tower parameters\nbridge_width = 18;\nbridge_height = 12;\nbridge_length = 15;\n\n// Solar array parameters\narray_length = 35;\narray_width = 3;\narray_height = 1;\narray_offset = 25;\n\n// Connector parameters\nconnector_length = 10;\nconnector_width = 3;\n\n// Main hull module\nmodule main_hull() {\n    // Central spine\n    translate([0, 0, hull_height/2])\n        cube([hull_length, hull_width, hull_height], center=true);\n    \n    // Tapered front section\n    translate([hull_length/2 - 5, 0, hull_height/2])\n        scale([1, 0.7, 1])\n        cube([10, hull_width, hull_height], center=true);\n    \n    // Rear engine mounting section\n    translate([-hull_length/2 + 5, 0, hull_height/2])\n        cube([10, hull_width + 4, hull_height + 2], center=true);\n}\n\n// Engine module\nmodule engines() {\n    // Engine block\n    translate([-hull_length/2 - engine_section_length/2, 0, hull_height/2])\n        cube([engine_section_length, hull_width + 10, hull_height + 6], center=true);\n    \n    // Individual engines\n    for (i = [-(num_engines-1)/2:(num_engines-1)/2]) {\n        translate([-hull_length/2 - 5, i * 4.5, hull_height/2])\n            cylinder(h=8, d=engine_diameter, $fn=16);\n    }\n}\n\n// Bridge tower module\nmodule bridge_tower() {\n    // Main tower\n    translate([hull_length/4, 0, hull_height + bridge_height/2])\n        cube([bridge_length, bridge_width, bridge_height], center=true);\n    \n    // Bridge top section\n    translate([hull_length/4, 0, hull_height + bridge_height])\n        cube([bridge_length - 2, bridge_width - 4, 2], center=true);\n    \n    // Communications dish\n    translate([hull_length/4 + bridge_length/2 - 1, 0, hull_height + bridge_height + 2])\n        sphere(d=3, $fn=16);\n}\n\n// Solar array module\nmodule solar_array() {\n    // Left array\n    translate([array_offset, -(hull_width/2 + array_width/2 + connector_width), array_height/2])\n        cube([array_length, array_width, array_height], center=true);\n    \n    // Right array\n    translate([array_offset, (hull_width/2 + array_width/2 + connector_width), array_height/2])\n        cube([array_length, array_width, array_height], center=true);\n    \n    // Left connector\n    translate([array_offset, -(hull_width/2 + connector_width/2), hull_height/2])\n        cube([connector_length, connector_width, hull_height], center=true);\n    \n    // Right connector\n    translate([array_offset, (hull_width/2 + connector_width/2), hull_height/2])\n        cube([connector_length, connector_width, hull_height], center=true);\n}\n\n// Detail modules\nmodule hull_details() {\n    // Top ridge\n    translate([0, 0, hull_height - 0.5])\n        cube([hull_length - 10, hull_width - 2, 1], center=true);\n    \n    // Bottom ridge\n    translate([0, 0, 0.5])\n        cube([hull_length - 10, hull_width - 2, 1], center=true);\n    \n    // Side details\n    for (i = [-3:3]) {\n        translate([i * 10, 0, hull_height/2])\n            cube([2, hull_width, hull_height - 2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core components\n    main_hull();\n    engines();\n    bridge_tower();\n    solar_array();\n    \n    // Additional details\n    hull_details();\n    \n    // Engine glow details\n    for (i = [-(num_engines-1)/2:(num_engines-1)/2]) {\n        translate([-hull_length/2 - 1, i * 4.5, hull_height/2])\n            cylinder(h=2, d=engine_diameter - 2, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "oriael",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity oriael (angelic orb with wings)\n// Overall size ~70 mm total wingspan, ~55 mm height\n\n$fn=32;\n\nmodule wing() {\n    difference() {\n        // main wing blade\n        linear_extrude(height=2, scale=[0.6,0.8], twist=-25)\n            polygon(points=[[0,0],[20,0],[30,10],[35,25],[30,40],[15,50],[0,45]]);\n        // feather notches\n        for(i=[1:4])\n            translate([i*7, 5+i*7, -1])\n                rotate([0,0,i*8])\n                cube([4,2,4], center=true);\n    }\n}\n\nmodule wings() {\n    // left wing\n    translate([-8,0,30])\n    rotate([0,0,-30])\n    wing();\n    // right wing\n    translate([8,0,30])\n    scale([-1,1,1])\n    rotate([0,0,-30])\n    wing();\n}\n\nmodule orb() {\n    difference() {\n        sphere(d=40);  // main orb\n        // top recess for halo ring\n        translate([0,0,20])\n            cylinder(d1=15, d2=10, h=8, center=true);\n    }\n    // halo ring\n    translate([0,0,26])\n        rotate_extrude()\n            translate([10,0,0])\n                circle(d=3);\n}\n\nmodule eyes() {\n    // left eye\n    translate([-8,18,5])\n        sphere(d=5);\n    // right eye\n    translate([8,18,5])\n        sphere(d=5);\n    // pupils\n    color(\"black\") {\n        translate([-8,22,5])\n            sphere(d=2);\n        translate([8,22,5])\n            sphere(d=2);\n    }\n}\n\nmodule robe() {\n    difference() {\n        // main robe body\n        hull() {\n            translate([0,15,-15])\n                sphere(d=30);\n            translate([0,0,-25])\n                sphere(d=20);\n        }\n        // remove inside for hollow\n        translate([0,5,-20])\n            sphere(d=20);\n    }\n}\n\nmodule hands() {\n    // left hand\n    translate([-15,10,-8])\n        sphere(d=8);\n    // right hand\n    translate([15,10,-8])\n        sphere(d=8);\n}\n\n// assembly\nunion() {\n    orb();\n    wings();\n    robe();\n    eyes();\n    hands();\n}",
    "renders": true
  },
  {
    "household_item": "pyroclion",
    "openscad_code": "// Pyroclion (volcanic eruption cloud) – realistic style, medium complexity\n// Overall ~80 mm tall, printable without supports\n\n$fn = 36;                 // smoother curves\nwall = 2;                 // 3D-print wall thickness\n\n// main cloud body\nmodule cloud_body() {\n    difference() {\n        // central mass\n        union() {\n            translate([0,0,20]) sphere(d = 60);          // main bulb\n            translate([0,0,55]) sphere(d = 45);          // upper swell\n            translate([25,0,35]) sphere(d = 35);         // right lobe\n            translate([-25,0,35]) sphere(d = 35);        // left lobe\n            translate([0,20,30]) sphere(d = 30);         // front lobe\n            translate([0,-20,30]) sphere(d = 30);        // rear lobe\n        }\n\n        // hollow out for printability\n        translate([0,0,20]) sphere(d = 60 - 2*wall);\n        translate([0,0,55]) sphere(d = 45 - 2*wall);\n        translate([25,0,35]) sphere(d = 35 - 2*wall);\n        translate([-25,0,35]) sphere(d = 35 - 2*wall);\n        translate([0,20,30]) sphere(d = 30 - 2*wall);\n        translate([0,-20,30]) sphere(d = 30 - 2*wall);\n    }\n}\n\n// ash vent / central column\nmodule vent_column() {\n    cylinder(h = 25, d1 = 30, d2 = 15, center = false);\n}\n\n// falling ash particles (small spheres)\nmodule ash_particles() {\n    for(i = [0:30]) {\n        r = 35 + 5 * sin(i*137.5);      // radial spread\n        a = i*137.5;                    // golden angle\n        z = 10 + i*1.5;                 // height drop\n        translate([r*cos(a), r*sin(a), z])\n            sphere(d = 2 + 2*noise(i));\n    }\n}\n\n// helper pseudo-random noise for natural look\nfunction noise(n) = (n*13.7)%1;\n\n// base platform to hide bottom hole\nmodule base() {\n    cylinder(h = 4, d = 70, center = false);\n    difference() {\n        cylinder(h = 4, d = 70 - 2*wall, center = false);\n        translate([0,0,-1]) cube([100,100,6], center = true);\n    }\n}\n\n// final assembly\nunion() {\n    base();\n    translate([0,0,4]) vent_column();\n    translate([0,0,29]) cloud_body();\n    translate([0,0,29]) ash_particles();\n}",
    "renders": true
  },
  {
    "household_item": "quoriel",
    "openscad_code": "// OpenSCAD Quoriel – Medium complexity, realistic style\n// Overall length ≈ 70 mm, printable without support\n\nmodule quoriel() {\n    // Main grip tube\n    difference() {\n        cylinder(h = 40, d = 12, $fn = 60);\n        translate([0, 0, -1])\n            cylinder(h = 42, d = 10, $fn = 60);\n    }\n\n    // Front conical nozzle\n    translate([0, 0, 40])\n        difference() {\n            cylinder(h = 12, d1 = 12, d2 = 8, $fn = 60);\n            translate([0, 0, 0])\n                cylinder(h = 12, d1 = 10, d2 = 6, $fn = 60);\n        }\n\n    // Rear cap\n    translate([0, 0, -4])\n        difference() {\n            cylinder(h = 6, d = 13, $fn = 60);\n            translate([0, 0, -1])\n                cylinder(h = 8, d = 11, $fn = 60);\n        }\n\n    // Six grip rings\n    for (z = [5:7:40])\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 2, d = 14, $fn = 60);\n                translate([0, 0, -1])\n                    cylinder(h = 4, d = 12, $fn = 60);\n            }\n\n    // Thumb bar on left side\n    translate([-7, 0, 20])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 10, d = 5, $fn = 30);\n                translate([0, 0, -1])\n                    cylinder(h = 12, d = 2.5, $fn = 30);\n            }\n\n    // Safety collar\n    translate([0, 0, 34])\n        difference() {\n            cylinder(h = 4, d = 14, $fn = 60);\n            cylinder(h = 4, d = 12.5, $fn = 60);\n        }\n\n    // Indicator LED bump\n    translate([6, 0, 38])\n        sphere(d = 3, $fn = 20);\n}\n\n// Build the model\nquoriel();",
    "renders": true
  },
  {
    "household_item": "sideriel",
    "openscad_code": "// Realistic Sidereal (Sundial) - Medium Complexity\n// Designed for 3D printing, no overhangs >45 degrees\n\n// Parameters\nbase_diameter = 80;\nbase_height = 8;\ngnomon_width = 4;\ngnomon_thickness = 2;\ngnomon_height = 35;\nhour_mark_length = 12;\nhour_mark_depth = 1.5;\nwall_thickness = 2;\n\n// Base module - circular sundial base\nmodule sundial_base() {\n    // Main base cylinder\n    cylinder(h=base_height, d=base_diameter, $fn=64);\n    \n    // Recessed center for decoration\n    translate([0, 0, base_height-1])\n        cylinder(h=wall_thickness, d=base_diameter-20, $fn=64);\n}\n\n// Hour marks module - creates 12 hour markings\nmodule hour_marks() {\n    for (i = [1:12]) {\n        angle = i * 30; // 30 degrees per hour\n        // Position marks around the circle\n        translate([0, 0, base_height - hour_mark_depth])\n            rotate([0, 0, angle])\n                translate([(base_diameter/2) - 10, 0, 0])\n                    cube([hour_mark_length, 3, hour_mark_depth], center=true);\n    }\n}\n\n// Roman numerals for hours\nmodule roman_numerals() {\n    numerals = [\"XII\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\"];\n    for (i = [0:11]) {\n        angle = i * 30;\n        translate([0, 0, base_height + 0.5])\n            rotate([0, 0, angle])\n                translate([(base_diameter/2) - 18, 0, 0])\n                    rotate([0, 0, -angle])\n                        text(numerals[i], size=4, height=0.5, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Gnomon (shadow-casting element) - triangular style\nmodule gnomon() {\n    // Main gnomon body - right triangle\n    linear_extrude(height=gnomon_height)\n        polygon(points=[\n            [0, 0],\n            [gnomon_width, 0],\n            [0, gnomon_width]\n        ]);\n    \n    // Support brace\n    translate([gnomon_width/2, 0, gnomon_height-8])\n        rotate([0, 90, 0])\n            cylinder(h=gnomon_width, r=gnomon_thickness, $fn=16);\n}\n\n// Compass rose decoration\nmodule compass_rose() {\n    // North marker\n    translate([0, (base_diameter/2)-15, base_height-0.5])\n        rotate([0, 0, 0])\n            text(\"N\", size=6, height=1, halign=\"center\", valign=\"center\");\n    \n    // Direction arrows\n    for (dir = [0, 90, 180, 270]) {\n        translate([0, 0, base_height-0.5])\n            rotate([0, 0, dir])\n                translate([(base_diameter/2)-25, 0, 0])\n                    polygon(points=[\n                        [0, 3],\n                        [6, 0],\n                        [0, -3]\n                    ]);\n    }\n}\n\n// Assembly\nunion() {\n    // Base with hour marks\n    difference() {\n        sundial_base();\n        hour_marks();\n    }\n    \n    // Add numerals\n    roman_numerals();\n    \n    // Add compass rose\n    compass_rose();\n    \n    // Position gnomon at center, tilted for local latitude (example: 40 degrees)\n    translate([0, 0, base_height])\n        rotate([0, 40, 0])\n            gnomon();\n    \n    // Drainage hole in center\n    translate([0, 0, 0])\n        cylinder(h=base_height, d=3, $fn=16);\n}",
    "renders": true
  },
  {
    "household_item": "solarael",
    "openscad_code": "// Solarael - Realistic Solar Panel Angel\n// Medium complexity 3D printable model\n\n// Overall dimensions\ntotal_height = 85;\nwingpan = 70;\nbody_width = 20;\nbody_thickness = 10;\n\n// Module for solar cell texture\nmodule solar_cell(rows=6, cols=4) {\n    cell_width = wingpan * 0.7 / cols;\n    cell_height = total_height * 0.4 / rows;\n    cell_thickness = 1;\n    \n    for(i=[0:rows-1])\n        for(j=[0:cols-1])\n            translate([j*cell_width - (cols*cell_width)/2, \n                      i*cell_height - (rows*cell_height)/2, \n                      0])\n                cube([cell_width*0.95, cell_height*0.95, cell_thickness]);\n}\n\n// Module for wing structure\nmodule wing() {\n    // Wing frame\n    difference() {\n        // Main wing surface\n        translate([0, 0, -0.5])\n            cube([wingpan, total_height*0.4, 1]);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([wingpan*0.7, total_height*0.35, 2]);\n    }\n    \n    // Solar cells\n    translate([0, 0, 1])\n        solar_cell();\n    \n    // Wing support struts\n    for(i=[-1:1]) {\n        translate([i*wingpan/6, 0, -2])\n            rotate([90, 0, 0])\n                cylinder(h=total_height*0.4, r=1.5);\n    }\n}\n\n// Module for body\nmodule body() {\n    // Torso\n    difference() {\n        translate([0, 0, total_height/2])\n            scale([body_width/20, body_thickness/20, total_height/20])\n                sphere(r=20);\n        \n        // Hollow center\n        translate([0, 0, total_height/2])\n            scale([(body_width-4)/20, (body_thickness-4)/20, (total_height-10)/20])\n                sphere(r=19);\n    }\n    \n    // Head\n    translate([0, 0, total_height-10])\n        sphere(r=8);\n    \n    // Halo ring\n    rotate([90, 0, 0])\n        translate([0, 0, -total_height+10])\n            difference() {\n                cylinder(h=2, r1=12, r2=12);\n                cylinder(h=3, r1=10, r2=10);\n            }\n}\n\n// Module for arms\nmodule arms() {\n    // Left arm\n    translate([-body_width/2-5, 0, total_height*0.65])\n        rotate([0, 0, -30])\n            cylinder(h=20, r=2.5);\n    \n    // Right arm\n    translate([body_width/2+5, 0, total_height*0.65])\n        rotate([0, 0, 30])\n            cylinder(h=20, r=2.5);\n}\n\n// Module for legs\nmodule legs() {\n    // Left leg\n    translate([-body_width/4, 0, 5])\n        rotate([0, 10, 0])\n            cylinder(h=25, r=3);\n    \n    // Right leg\n    translate([body_width/4, 0, 5])\n        rotate([0, -10, 0])\n            cylinder(h=25, r=3);\n}\n\n// Main assembly\nunion() {\n    // Left wing\n    translate([-body_width/2-2, 0, total_height*0.7])\n        rotate([0, 0, -15])\n            wing();\n    \n    // Right wing\n    translate([body_width/2+2, 0, total_height*0.7])\n        rotate([0, 0, 15])\n            mirror([1, 0, 0])\n                wing();\n    \n    // Body structure\n    body();\n    \n    // Arms\n    arms();\n    \n    // Legs\n    legs();\n    \n    // Base connector\n    cylinder(h=5, r=body_width/2);\n}",
    "renders": true
  },
  {
    "household_item": "stellara",
    "openscad_code": "// Stellara - Realistic Medium-Complexity 3D Model\n// Size: 80 mm diameter, 15 mm thick\n\n// Overall parameters\n$fn = 64;\nmain_diameter = 80;\nthickness = 15;\ncenter_hole = 6;\nwall_thick = 2.5;\n\n// Main hub cylinder\nmodule hub() {\n    difference() {\n        // Main hub body\n        cylinder(h = thickness, d = 30, center = true);\n        \n        // Center hole for axle\n        cylinder(h = thickness + 1, d = center_hole, center = true);\n    }\n}\n\n// Blade parameters\nblade_length = 25;\nblade_width = 12;\nblade_height = thickness - 0.5;\nblade_tilt = 15;\n\n// Single blade with realistic airfoil shape\nmodule blade() {\n    difference() {\n        // Main blade body - tapered airfoil shape\n        union() {\n            // Thin leading edge\n            translate([0, 0, blade_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h = blade_length, d1 = blade_width, d2 = 2, center = false);\n            \n            // Main blade surface\n            translate([0, 0, 0])\n                rotate([0, 0, 0])\n                    cube([blade_length, blade_width, blade_height], center = true);\n        }\n        \n        // Tapered trailing edge cut\n        translate([blade_length/2 - 2, 0, 0])\n            rotate([0, 0, 30])\n                cube([blade_length/2, blade_width + 1, blade_height + 1], center = true);\n        \n        // Airfoil curve cut\n        translate([0, 0, blade_height/4])\n            rotate([0, 90, 0])\n                cylinder(h = blade_length, d = blade_width - 2, center = true);\n    }\n}\n\n// Blade mount with realistic fillet\nmodule blade_mount() {\n    difference() {\n        // Mounting boss\n        translate([12, 0, 0])\n            rotate([0, 0, 0])\n                cube([10, 8, thickness], center = true);\n        \n        // Screw hole\n        translate([15, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 8, d = 3, center = true);\n    }\n}\n\n// Generate all 8 blades with proper spacing\nmodule all_blades() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([10, 0, 0]) {\n                // Mount blade at realistic tilt angle\n                rotate([blade_tilt, 0, 0]) {\n                    union() {\n                        blade_mount();\n                        translate([blade_length/2 + 10, 0, 0])\n                            blade();\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Realistic rim with structural webbing\nmodule rim() {\n    difference() {\n        // Outer rim\n        cylinder(h = thickness, d = main_diameter, center = true);\n        \n        // Remove inner portion\n        cylinder(h = thickness + 1, d = main_diameter - 10, center = true);\n        \n        // Lightening holes\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45 + 22.5]) {\n                translate([(main_diameter - 10)/2 - 5, 0, 0])\n                    cylinder(h = thickness + 1, d = 4, center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main hub\n    hub();\n    \n    // Structural rim\n    rim();\n    \n    // All blades\n    all_blades();\n    \n    // Realistic hub cap\n    difference() {\n        translate([0, 0, thickness/2 + 1])\n            cylinder(h = 2, d = 28, center = false);\n        \n        translate([0, 0, thickness/2])\n            cylinder(h = 3, d = 10, center = false);\n    }\n    \n    translate([0, 0, -thickness/2 - 1])\n        mirror([0, 0, 1])\n            difference() {\n                cylinder(h = 2, d = 28, center = false);\n                cylinder(h = 3, d = 10, center = false);\n            }\n}",
    "renders": true
  },
  {
    "household_item": "thalor",
    "openscad_code": "// OpenSCAD Thalor (medium complexity, realistic style)\n// Overall dimensions: ~80 mm tall, 70 mm wide, 70 mm deep\n// Wall thickness: 2 mm everywhere for 3D-printability\n\n$fn = 32;  // smooth curves\n\n// Main assembly\nmodule thalor() {\n    union() {\n        // Lower torso base\n        translate([0, 0, 10])\n        difference() {\n            cylinder(h = 20, d1 = 60, d2 = 45, center = true);  // torso\n            cylinder(h = 22, d1 = 56, d2 = 41, center = true);  // hollow\n        }\n\n        // Pelvis plate\n        translate([0, 0, 0])\n        difference() {\n            cube([70, 45, 10], center = true);\n            cube([66, 41, 12], center = true);\n        }\n\n        // Upper torso\n        translate([0, 0, 30])\n        difference() {\n            cylinder(h = 25, d1 = 45, d2 = 35, center = true);\n            cylinder(h = 27, d1 = 41, d2 = 31, center = true);\n        }\n\n        // Neck ring\n        translate([0, 0, 45])\n        difference() {\n            cylinder(h = 8, d = 30, center = true);\n            cylinder(h = 10, d = 26, center = true);\n        }\n\n        // Head\n        translate([0, 0, 55])\n        difference() {\n            sphere(d = 40);\n            sphere(d = 36);\n        }\n\n        // Eye sockets (left & right)\n        for (x = [-12, 12])\n            translate([x, -15, 55])\n            rotate([0, 0, 0])\n            difference() {\n                sphere(d = 8);\n                sphere(d = 6);\n            }\n\n        // Eye lenses\n        for (x = [-12, 12])\n            translate([x, -16.5, 55])\n            sphere(d = 5.5);\n\n        // Shoulder joints\n        for (x = [-33, 33])\n            translate([x, 0, 30])\n            difference() {\n                sphere(d = 14);\n                sphere(d = 10);\n            }\n\n        // Upper arms\n        for (x = [-33, 33])\n            translate([x, 0, 15])\n            rotate([0, 0, x > 0 ? -20 : 20])\n            difference() {\n                cylinder(h = 35, d1 = 12, d2 = 10, center = false);\n                cylinder(h = 37, d1 = 8, d2 = 6, center = false);\n            }\n\n        // Lower arms\n        for (x = [-33, 33])\n            translate([x + (x > 0 ? -12 : 12), 0, 0])\n            rotate([0, 0, x > 0 ? -20 : 20])\n            difference() {\n                cylinder(h = 30, d1 = 10, d2 = 8, center = false);\n                cylinder(h = 32, d1 = 6, d2 = 4, center = false);\n            }\n\n        // Hands\n        for (x = [-33, 33])\n            translate([x + (x > 0 ? -24 : 24), -3, -5])\n            rotate([0, 90, 0])\n            difference() {\n                sphere(d = 12);\n                sphere(d = 8);\n            }\n\n        // Hip joints\n        for (x = [-20, 20])\n            translate([x, 0, 0])\n            difference() {\n                sphere(d = 14);\n                sphere(d = 10);\n            }\n\n        // Upper legs\n        for (x = [-20, 20])\n            translate([x, 0, -20])\n            rotate([0, 0, x > 0 ? -10 : 10])\n            difference() {\n                cylinder(h = 35, d1 = 15, d2 = 12, center = false);\n                cylinder(h = 37, d1 = 11, d2 = 8, center = false);\n            }\n\n        // Lower legs\n        for (x = [-20, 20])\n            translate([x + (x > 0 ? -6 : 6), 0, -45])\n            rotate([0, 0, x > 0 ? -10 : 10])\n            difference() {\n                cylinder(h = 30, d1 = 12, d2 = 10, center = false);\n                cylinder(h = 32, d1 = 8, d2 = 6, center = false);\n            }\n\n        // Feet\n        for (x = [-20, 20])\n            translate([x + (x > 0 ? -6 : 6), -8, -65])\n            difference() {\n                cube([22, 16, 10], center = true);\n                cube([18, 12, 12], center = true);\n            }\n\n        // Central core detail\n        translate([0, 0, 30])\n        difference() {\n            cylinder(h = 20, d = 18, center = true);\n            cylinder(h = 22, d = 14, center = true);\n        }\n\n        // Back thruster vents\n        for (i = [0:3])\n            translate([0, 22.5, 8 + i * 8])\n            difference() {\n                cube([10, 2, 6], center = true);\n                cube([6, 3, 7], center = true);\n            }\n    }\n}\n\n// Render the model\nthalor();",
    "renders": true
  },
  {
    "household_item": "umbrael",
    "openscad_code": "// Realistic Umbrella (Umbrael) - Medium Complexity OpenSCAD Model\n// Approx 80mm height, 3D printable with no overhangs\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nshaft_radius = 3;\nshaft_length = 65;\nhandle_length = 25;\ncanopy_segments = 8;\ncanopy_radius = 35;\ncanopy_height = 15;\nrib_thickness = 1.5;\nrib_width = 3;\ntip_radius = 1.5;\n\n// Main umbrella assembly\nmodule umbrella() {\n    // Central shaft\n    translate([0, 0, shaft_length/2]) \n        cylinder(r=shaft_radius, h=shaft_length, center=true);\n    \n    // Handle\n    translate([0, 0, -shaft_length/2 - handle_length/2]) {\n        difference() {\n            cylinder(r=shaft_radius+2, h=handle_length, center=true);\n            translate([0, 0, -handle_length/4]) \n                cylinder(r=shaft_radius-1, h=handle_length, center=true);\n        }\n    }\n    \n    // Canopy support structure\n    translate([0, 0, shaft_length/2 - 5]) {\n        // Central hub\n        cylinder(r=shaft_radius+5, h=4, center=true);\n        \n        // Support ribs\n        for(i = [0:canopy_segments-1]) {\n            rotate([0, 0, i*360/canopy_segments]) {\n                translate([shaft_radius+5, 0, 0]) {\n                    rotate([0, 90, 0]) \n                        cylinder(r=rib_width/2, h=canopy_radius-10);\n                }\n            }\n        }\n    }\n    \n    // Canopy\n    translate([0, 0, shaft_length/2 + canopy_height/2]) {\n        difference() {\n            // Main canopy dome\n            scale([1, 1, 0.6]) \n                sphere(r=canopy_radius);\n            \n            // Remove bottom half\n            translate([0, 0, -canopy_height]) \n                cube([canopy_radius*3, canopy_radius*3, canopy_height*2], center=true);\n            \n            // Canopy segments\n            for(i = [0:canopy_segments-1]) {\n                rotate([0, 0, i*360/canopy_segments + 360/canopy_segments/2]) {\n                    translate([0, 0, -2]) {\n                        rotate([90, 0, 0]) {\n                            linear_extrude(height=4) {\n                                polygon(points=[\n                                    [0, 0],\n                                    [canopy_radius-2, 0],\n                                    [canopy_radius-2, canopy_radius*0.5],\n                                    [0, canopy_radius*0.3]\n                                ]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Canopy tip\n    translate([0, 0, shaft_length/2 + canopy_height]) {\n        sphere(r=tip_radius);\n    }\n    \n    // Handle grip texture\n    translate([0, 0, -shaft_length/2 - handle_length/2]) {\n        for(i = [0:3]) {\n            translate([0, 0, -handle_length/2 + i*6]) {\n                difference() {\n                    cylinder(r=shaft_radius+2.2, h=3, center=true);\n                    cylinder(r=shaft_radius+1.8, h=3.2, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\numbrella();",
    "renders": true
  },
  {
    "household_item": "vesperion",
    "openscad_code": "// Vesperion (a fictional sci-fi drone) – medium-complexity realistic style\n// Overall height ≈ 45 mm, max diameter ≈ 75 mm – fits common FDM printers\n\n// Wall thickness for printability\n$fn=36;\nwall = 1.6;\n\nmodule main_body() {\n    // Central hub cylinder\n    cylinder(h=12,d1=30,d2=36);\n    \n    // Top dome\n    translate([0,0,12])\n        sphere(d=36);\n    \n    // Bottom cavity (lightens print, avoids overhang)\n    translate([0,0,wall])\n        difference() {\n            cylinder(h=12-wall,d=36-2*wall);\n            sphere(d=36-2*wall);\n        }\n}\n\nmodule arm_base() {\n    // Arm root block\n    cube([12,6,3], center=true);\n    // Fillet cylinders for smoother print\n    for(i=[-1,1])\n        translate([0,i*3,0])\n            rotate([90,0,0])\n                cylinder(h=6,d=3,center=true);\n}\n\nmodule prop_guard() {\n    // Outer ring\n    rotate_extrude()\n        translate([20,0])\n            square([wall,8]);\n    \n    // Three support spokes\n    for(a=[0,120,240])\n        rotate([0,0,a])\n            translate([10,0,4])\n                cube([20,2,wall], center=true);\n}\n\nmodule prop_assembly() {\n    // Arm\n    color(\"gray\")\n    difference() {\n        cube([40,6,3], center=true);\n        // Lightening slot\n        translate([0,0,0])\n            cube([38,4,3.5], center=true);\n    }\n    \n    // Motor pod\n    translate([25,0,0])\n        rotate([90,0,0])\n            cylinder(h=8,d=8);\n    \n    // Guard + prop\n    translate([25,0,8])\n        prop_guard();\n    \n    // Propeller (2-blade, 45° twist printable as single layer)\n    translate([25,0,8])\n        rotate([0,0,$t*360])\n        linear_extrude(height=0.8, twist=45)\n            scale([1,0.15])\n                circle(d=30);\n}\n\nmodule camera_gimbal() {\n    // Gimbal yoke\n    rotate([0,90,0])\n        difference() {\n            cylinder(h=14,d=12);\n            translate([0,0,-1])\n                cylinder(h=16,d=10);\n        }\n    \n    // Camera sphere\n    rotate([0,90,0])\n        translate([0,0,7])\n            sphere(d=10);\n    \n    // Lens barrel\n    rotate([0,90,0])\n        translate([0,0,12])\n            cylinder(h=8,d1=6,d2=4);\n}\n\nmodule led_strip() {\n    // Thin ring under each arm tip\n    translate([25,0,1])\n        rotate([90,0,0])\n            cylinder(h=1,d=4);\n}\n\nunion() {\n    main_body();\n    \n    // Attach four arms radially\n    for(a=[0,90,180,270])\n        rotate([0,0,a])\n        translate([0,0,6])  // Align with hub center\n            union() {\n                arm_base();\n                prop_assembly();\n                led_strip();\n            }\n    \n    // Underside gimbal centered\n    translate([0,0,-8])\n        camera_gimbal();\n    \n    // Landing skids (low-profile, printable)\n    for(x=[-20,20])\n        translate([x,0,-12])\n            cube([4,30,2], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "xelion",
    "openscad_code": "// Xelion (XLR connector) – realistic medium-complexity model\n// Overall length 55 mm, body Ø 20 mm, printable upright (no support)\n\n$fn = 36;\n\nmodule shell() {\n    // Main barrel\n    cylinder(h = 35, d = 20, center = false);\n    \n    // Rear collar flare\n    translate([0, 0, 35])\n        cylinder(h = 5, d1 = 20, d2 = 22, center = false);\n    \n    // Front strain-relief lip\n    translate([0, 0, -5])\n        cylinder(h = 5, d1 = 20, d2 = 18, center = false);\n    \n    // Latch window\n    translate([10, 0, 15])\n        cube([3, 4, 7], center = true);\n    \n    // Keyway slot\n    translate([-10, 0, 10])\n        cube([3, 2, 15], center = true);\n}\n\nmodule insert() {\n    // Black insert shell\n    color(\"black\")\n    translate([0, 0, -2])\n        cylinder(h = 22, d = 14, center = false);\n    \n    // Pin holes\n    for (i = [-1, 0, 1]) {\n        translate([0, i * 2.5, 8])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 2.5, center = false);\n    }\n    \n    // Large ground pin\n    translate([0, 0, 8])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 3.5, center = false);\n}\n\nmodule latch() {\n    // Spring tab\n    translate([10, 0, 18])\n        rotate([0, 10, 0])\n        union() {\n            cube([6, 3, 1.5], center = true);\n            translate([3, 0, 0])\n                cube([1.5, 3, 0.8], center = true);\n        }\n}\n\n// Assembly\nunion() {\n    shell();\n    insert();\n    latch();\n}",
    "renders": true
  },
  {
    "household_item": "zephirael",
    "openscad_code": "// Zephirael - Realistic Style, Medium Complexity\n// Wings, body, tail and head in recognizable angelic form\n\n$fn = 60;\n\nmodule zephirael() {\n    union() {\n        // Central torso\n        translate([0, 0, 10])\n            scale([8, 5, 20])\n            sphere(1);\n\n        // Head\n        translate([0, 0, 32])\n            scale([4, 4, 5])\n            sphere(1);\n\n        // Halo ring\n        difference() {\n            translate([0, 0, 38])\n                rotate([90, 0, 0])\n                cylinder(h = 1, r1 = 6, r2 = 6);\n            translate([0, 0, 37])\n                rotate([90, 0, 0])\n                cylinder(h = 3, r1 = 4, r2 = 4);\n        }\n\n        // Hair locks\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([2, 0, 30])\n                rotate([80, 0, 0])\n                scale([0.5, 0.5, 3])\n                cylinder(h = 1, r1 = 1, r2 = 0.5);\n        }\n\n        // Left wing\n        translate([-10, 0, 25])\n            rotate([0, 30, -10])\n            scale([12, 2, 15])\n            difference() {\n                sphere(1);\n                translate([6, 0, 0])\n                    cube([20, 20, 20], center = true);\n            }\n\n        // Right wing\n        translate([10, 0, 25])\n            rotate([0, 30, 10])\n            mirror([1, 0, 0])\n            scale([12, 2, 15])\n            difference() {\n                sphere(1);\n                translate([6, 0, 0])\n                    cube([20, 20, 20], center = true);\n            }\n\n        // Wing feather details\n        for (y = [0:3:12]) {\n            for (x = [-8:2:8]) {\n                translate([x, 0, 25 - y])\n                    rotate([0, 30 - y * 2, 0])\n                    scale([0.5, 0.2, 2])\n                    difference() {\n                        cube([2, 1, 1], center = true);\n                        translate([0, 0, -0.5])\n                            cube([1.8, 0.8, 0.5], center = true);\n                    }\n            }\n        }\n\n        // Arms\n        translate([-5, 0, 20])\n            rotate([0, -10, -20])\n            scale([1, 1, 8])\n            cylinder(h = 1, r1 = 1, r2 = 0.8);\n        \n        translate([5, 0, 20])\n            rotate([0, -10, 20])\n            scale([1, 1, 8])\n            cylinder(h = 1, r1 = 1, r2 = 0.8);\n\n        // Robe folds\n        difference() {\n            translate([0, 0, 5])\n                scale([12, 7, 15])\n                sphere(1);\n            translate([0, 0, 4])\n                scale([10, 5, 14])\n                sphere(1);\n        }\n\n        // Tail\n        translate([0, 0, 0])\n            rotate([0, 0, 0])\n            scale([1, 1, 10])\n            difference() {\n                cylinder(h = 1, r1 = 2, r2 = 0.5);\n                translate([0, 0, 0.5])\n                    rotate([0, 0, 45])\n                    cube([4, 4, 1], center = true);\n            }\n    }\n}\n\n// Scale for 3D printing - 80mm total height\nscale(0.8)\n    zephirael();",
    "renders": true
  },
  {
    "household_item": "aetheron",
    "openscad_code": "// Aetheron - Realistic Medium Complexity\n// A mystical energy sphere with gyroscopic rings and crystalline core\n// Total size ~60mm diameter\n\n$fn = 64;\nwall_thickness = 2;\ncore_radius = 8;\n\n// Main assembly\ndifference() {\n    union() {\n        // Central energy core\n        core();\n        \n        // Gyroscopic rings\n        rotate([0, 0, 0]) outer_ring(30);\n        rotate([90, 0, 0]) outer_ring(28);\n        rotate([0, 90, 0]) outer_ring(26);\n        \n        // Support struts\n        support_struts();\n        \n        // Energy nodes\n        energy_nodes();\n    }\n    \n    // Central hole for printing support\n    cylinder(h=100, r=core_radius/2, center=true);\n}\n\nmodule core() {\n    // Inner crystalline core\n    difference() {\n        sphere(r=core_radius);\n        \n        // Faceted cuts\n        for(i=[0:5]) {\n            rotate([0, i*72, 0]) \n                translate([0, 0, -core_radius-1])\n                cube([core_radius*2, core_radius*2, core_radius*2+2], center=true);\n        }\n    }\n    \n    // Energy glow layer\n    translate([0, 0, 0]) \n        scale([1.1, 1.1, 1.1])\n        sphere(r=core_radius, $fn=32);\n}\n\nmodule outer_ring(radius) {\n    // Main ring body\n    rotate_extrude(angle=360, $fn=100) {\n        translate([radius, 0, 0]) \n        difference() {\n            circle(r=3);\n            circle(r=3-wall_thickness);\n        }\n    }\n    \n    // Ring details - energy conduits\n    for(i=[0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([radius, 0, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=6, r=1.5);\n                cylinder(h=6.2, r=0.8);\n            }\n        }\n    }\n}\n\nmodule support_struts() {\n    // Connect rings to core\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) {\n            // Vertical supports\n            translate([0, 0, -15]) \n                cylinder(h=30, r1=2, r2=1.5);\n            \n            // Diagonal supports\n            translate([10, 0, 10]) \n                rotate([0, 45, 0])\n                cylinder(h=15, r1=1.5, r2=1);\n                \n            translate([10, 0, -10]) \n                rotate([0, -45, 0])\n                cylinder(h=15, r1=1.5, r2=1);\n        }\n    }\n}\n\nmodule energy_nodes() {\n    // Orbiting energy nodes\n    for(i=[0:7]) {\n        rotate([0, i*45, 0]) {\n            translate([25, 0, 0])\n            rotate([0, 0, i*20]) {\n                // Main node sphere\n                sphere(r=3);\n                \n                // Energy spikes\n                for(j=[0:3]) {\n                    rotate([j*90, 0, 0])\n                    translate([0, 0, 3])\n                    cylinder(h=4, r1=1, r2=0.2);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "amariel",
    "openscad_code": "// Amariel (stylized angel) – realistic medium-complexity model\n// ~70 mm tall, optimized for FDM printing with no steep overhangs\n// All parts have ≥1.2 mm wall thickness\n\n$fn = 36;          // moderate resolution for smooth curves\nbody_h = 50;       // total height\nwing_span = 60;    // wing tip-to-tip\nhead_d = 14;       // head sphere diameter\nrobe_t = 2;        // robe wall thickness\n\nmodule head() {\n    // realistic head with simple facial protrusions\n    translate([0, 0, body_h + head_d/2 - 4])\n        union() {\n            sphere(d = head_d);                    // skull\n            // small nose ridge\n            translate([0, head_d/2 - 1, -1])\n                cube([2, 1.5, 2], center = true);\n            // subtle eye sockets\n            for(x = [-head_d/4, head_d/4])\n                translate([x, head_d/2 - 1, 1])\n                    rotate([0, 90, 0])\n                        cylinder(h = 2, d1 = 3, d2 = 2);\n        }\n}\n\nmodule torso() {\n    // flowing robe built from stacked cylinders\n    translate([0, 0, body_h/2])\n        union() {\n            // lower wide robe\n            cylinder(h = body_h/2, d1 = 28, d2 = 22);\n            // upper taper\n            cylinder(h = body_h/2, d1 = 22, d2 = 18);\n            // hollow core to save material\n            difference() {\n                cylinder(h = body_h, d1 = 28, d2 = 18);\n                translate([0, 0, -1])\n                    cylinder(h = body_h + 2, d1 = 28 - 2*robe_t, d2 = 18 - 2*robe_t);\n            }\n        }\n}\n\nmodule arm(side = 1) {  // side: 1 = right, -1 = left\n    // curved sleeve with hand\n    rotate([0, 0, side * 20])\n        translate([side * 13, 0, body_h - 5])\n            rotate([90, 0, 0])\n                union() {\n                    // sleeve\n                    cylinder(h = 20, d1 = 6, d2 = 4);\n                    // hand sphere\n                    translate([0, 0, 22])\n                        sphere(d = 5);\n                }\n}\n\nmodule wing(side = 1) {\n    // feather-like layers, printable without support\n    rotate([0, 0, side * 20])\n        translate([side * 12, 0, body_h - 2])\n            for(i = [0:3]) {\n                rotate([0, -20 - i*5, 0])\n                    translate([side * (i*5 + 5), 0, 0])\n                        scale([1, 0.3, 1])\n                            difference() {\n                                // main feather\n                                rotate([0, 0, -30])\n                                    cylinder(h = wing_span/2 - i*5, d1 = 12 - i*2, d2 = 4);\n                                // cut slot for lightness\n                                translate([0, 0, -1])\n                                    cube([30, 0.5, 3], center = true);\n                            }\n            }\n}\n\nmodule halo() {\n    // thin torus floating above head\n    rotate([90, 0, 0])\n        translate([0, 0, body_h + head_d + 8])\n            difference() {\n                cylinder(h = 2, d = 22);\n                cylinder(h = 3, d = 18);\n            }\n}\n\n// Assemble the angel\nunion() {\n    head();\n    torso();\n    arm(1);\n    arm(-1);\n    wing(1);\n    wing(-1);\n    halo();\n}",
    "renders": true
  },
  {
    "household_item": "astrion",
    "openscad_code": "// Astrion (space-station / satellite) – realistic style, medium complexity\n// Dimensions ~ 75 mm Ø, 100 mm long\n\n$fa = 2; $fs = 1;\n\n// Central pressurised core\nmodule core() {\n    difference() {\n        cylinder(h = 70, r = 20, center = true);      // main hull\n        translate([0,0,35-2]) cylinder(h = 2.2, r = 18);   // remove top for docking ring\n        translate([0,0,-35+2]) cylinder(h = 2.2, r = 18);  // remove bottom for docking ring\n    }\n}\n\n// Docking rings (standardised IDSS flanges)\nmodule docking_ring() {\n    difference() {\n        union() {\n            cylinder(h = 4, r = 22);                       // outer flange\n            translate([0,0,4]) cylinder(h = 2, r1 = 22, r2 = 20); // chamfer\n        }\n        cylinder(h = 6, r = 15);                           // inner hole\n    }\n}\n\n// 4× solar-panel wings in X formation – full deploy length 30 mm\nmodule solar_wing() {\n    panel_w = 28; panel_t = 1.5; hinge_l = 4;\n    difference() {\n        cube([panel_w, panel_t, 20], center = true);            // photovoltaic blanket\n        for(x = [-12:6:12]) translate([x,0,0])                 // slits for realism\n            cube([1, panel_t+0.1, 20], center = true);\n    }\n    translate([0,0,10+hinge_l/2])\n        rotate([90,0,0]) cylinder(h = hinge_l, r = 1.5);        // hinge mast\n}\n\n// Communication dish on +Z end\nmodule comm_dish() {\n    difference() {\n        sphere(d = 18);                                         // reflector\n        sphere(d = 16.5);                                       // hollow for thin shell\n    }\n    translate([0,0,9]) cylinder(h = 8, r1 = 4, r2 = 2);         // feed boom\n}\n\n// Thruster block (RCS pod) – 6-nozzle cluster\nmodule rcs_pod() {\n    pod_r = 4; nozzle_l = 5; nozzle_r = 1.2;\n    difference() {\n        sphere(d = pod_r*2);                                    // propellant tank\n        for(a = [0:120:359])                                    // 3× radial nozzles\n            rotate([0,0,a]) translate([pod_r+nozzle_l/2,0,0])\n                rotate([90,0,0]) cylinder(h = nozzle_l, r = nozzle_r);\n        translate([0,0,-pod_r])                                 // rear nozzle\n            cylinder(h = nozzle_l, r = nozzle_r);\n    }\n}\n\n// Radiator panels on core sides\nmodule radiator() {\n    color(\"grey\") difference() {\n        cube([30, 2, 15], center = true);                       // flat plate\n        for(i = [0:4]) translate([i*6-12,0,0])                   // cooling loops\n            cube([2.5, 2.1, 14], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    core();\n    \n    translate([0,0, 35]) docking_ring();\n    translate([0,0,-35]) rotate([180,0,0]) docking_ring();\n    \n    for(a = [0:90:270])\n        rotate([0,0,a]) translate([20+14,0,0]) rotate([90,0,0])\n            solar_wing();\n    \n    translate([0,0, 35+6]) comm_dish();\n    \n    for(a = [0:120:239])                                        // 3 RCS pods\n        rotate([0,0,a]) translate([30,0,20]) rcs_pod();\n    \n    for(a = [0:90:270])\n        rotate([0,0,a]) translate([0,0,0]) radiator();\n}",
    "renders": true
  },
  {
    "household_item": "caelion",
    "openscad_code": "// Caelion (Lion head with stylized but recognizable features)\n// Size ~70 mm tall, 3 mm wall thickness, printable without supports\n\n// Parameters\n$fn = 30;            // Smooth curves\nwall = 3;            // Wall thickness for 3D printing\nscale = 0.7;         // Global scale\n\n// Main module\nmodule caelion() {\n    scale([scale, scale, scale])\n    union() {\n        mane();          // Outer mane ring\n        head();          // Main head volume\n        snout();         // Muzzle\n        ears();          // Ears\n        eyes();          // Eyes (sockets)\n        nose();          // Nose tip\n    }\n}\n\n// Head (oval base)\nmodule head() {\n    translate([0, 0, 20])\n    scale([1, 1.2, 1])\n    sphere(r = 25, center = true);\n}\n\n// Snout (elongated cylinder)\nmodule snout() {\n    translate([0, 30, 15])\n    rotate([20, 0, 0])\n    scale([1, 2, 0.6])\n    cylinder(h = 25, r1 = 12, r2 = 8);\n}\n\n// Mane (ring of cylinders)\nmodule mane() {\n    for (i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([35, 0, 10])\n        rotate([90, 0, 0])\n        cylinder(h = 20, r1 = 8, r2 = 5);\n    }\n}\n\n// Ears (two cones)\nmodule ears() {\n    // Left ear\n    translate([-20, -15, 35])\n    rotate([10, -20, 0])\n    cylinder(h = 15, r1 = 8, r2 = 0);\n\n    // Right ear\n    translate([20, -15, 35])\n    rotate([10, 20, 0])\n    cylinder(h = 15, r1 = 8, r2 = 0);\n}\n\n// Eyes (cylindrical sockets)\nmodule eyes() {\n    // Left eye\n    translate([-12, 20, 25])\n    rotate([0, 90, 0])\n    cylinder(h = 8, r = 4);\n\n    // Right eye\n    translate([12, 20, 25])\n    rotate([0, 90, 0])\n    cylinder(h = 8, r = 4);\n}\n\n// Nose (small sphere at tip of snout)\nmodule nose() {\n    translate([0, 42, 20])\n    sphere(r = 5);\n}\n\n// Render the model\ncaelion();",
    "renders": true
  },
  {
    "household_item": "celestiel",
    "openscad_code": "// Celestial Globe (Armillary Sphere) - Realistic Medium Complexity\n// Approx 80mm diameter, 3D-printable with no overhangs\n\n// Constants\n$fn = 64;\nglobe_r = 35;\nring_t = 2;\nbase_h = 12;\nbase_r = 25;\nmeridian_r = 40;\nhorizon_r = 42;\necliptic_r = 36;\n\n// Main assembly\nunion() {\n    // Base stand\n    cylinder(h = base_h, r1 = base_r, r2 = base_r * 0.9);\n    \n    // Vertical meridian ring support\n    translate([0, 0, base_h]) rotate([0, 90, 0])\n        difference() {\n            cylinder(h = meridian_r * 2, r = ring_t, center = true);\n            cylinder(h = meridian_r * 2 + 1, r = globe_r, center = true);\n        }\n    \n    // Horizon ring\n    translate([0, 0, base_h + meridian_r - ring_t]) rotate([0, 90, 0])\n        difference() {\n            cylinder(h = horizon_r * 2, r = ring_t, center = true);\n            cylinder(h = horizon_r * 2 + 1, r = globe_r + ring_t, center = true);\n            // Cut out front for viewing\n            translate([0, 0, -horizon_r]) cube([horizon_r * 2, horizon_r * 2, horizon_r * 2], center = true);\n        }\n    \n    // Equatorial ring\n    translate([0, 0, base_h + meridian_r - ring_t]) rotate([0, 0, 0])\n        difference() {\n            cylinder(h = ecliptic_r * 2, r = ring_t, center = true);\n            cylinder(h = ecliptic_r * 2 + 1, r = globe_r + ring_t, center = true);\n        }\n    \n    // Ecliptic ring (tilted 23.5 degrees)\n    translate([0, 0, base_h + meridian_r - ring_t]) rotate([0, 23.5, 0])\n        difference() {\n            cylinder(h = ecliptic_r * 2, r = ring_t, center = true);\n            cylinder(h = ecliptic_r * 2 + 1, r = globe_r + ring_t, center = true);\n        }\n    \n    // Central globe\n    translate([0, 0, base_h + meridian_r - ring_t])\n        sphere(r = globe_r);\n    \n    // Earth's axis rod\n    translate([0, 0, base_h + meridian_r - ring_t - globe_r - 5])\n        cylinder(h = globe_r * 2 + 10, r = 1.5);\n    \n    // Compass rose on base\n    translate([0, 0, base_h + 0.1]) {\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([base_r * 0.7, 0, 0]) \n                    cube([2, 8, 1], center = true);\n            }\n        }\n        // Cardinal directions\n        translate([base_r * 0.5, 0, 1]) rotate([0, 0, 0]) \n            cube([2, 10, 1], center = true);\n        translate([0, base_r * 0.5, 1]) rotate([0, 0, 90]) \n            cube([2, 10, 1], center = true);\n    }\n}\n\n// Decorative feet\nmodule foot() {\n    translate([0, base_r * 0.8, 0]) \n        cylinder(h = 3, r1 = 4, r2 = 2);\n}\n\nfor (ang = [0:120:359]) {\n    rotate([0, 0, ang]) foot();\n}",
    "renders": true
  },
  {
    "household_item": "divionel",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity divionel (dovetail marker / dovetail template)\n// Overall size: 88 mm long, 35 mm wide, 5 mm thick – printable without supports\n\n// Parameters\n$fn = 64;              // Smooth curves\nwall = 1.6;            // 2 perimeters on 0.4 mm nozzle\nbody_l = 88;           // Body length\nbody_w = 35;           // Body width\nbody_t = 5;            // Body thickness\nslot_w = 2.5;          // Slot width for pencil marking\nslot_h = 1;            // Slot depth\npin_ang = 14;          // Common dovetail angle (1:7 ratio)\npin_r = 0.5;           // Small radius for finger comfort\ntxt_h = 0.4;           // Embossed text height\ntxt_size = 4;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer rounded rectangle\n        minkowski() {\n            cube([body_l, body_w, body_t], center = true);\n            cylinder(h = 0.01, r = 3, center = true);\n        }\n\n        // Central lightening slot\n        translate([0, 0, -body_t/2 + slot_h])\n            cube([body_l - 10, slot_w, slot_h + 0.1], center = true);\n\n        // Thumb relief cutouts on long edges\n        for (x = [body_l/2 - 18, -body_l/2 + 18])\n            translate([x, body_w/2 - 4, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, r = pin_r + wall, center = true);\n    }\n}\n\n// Dovetail angle guides\nmodule angle_guide(side) {\n    // side = 1 for right, -1 for left\n    translate([side * (body_l/2 - 2), 0, 0])\n        rotate([0, 0, side * pin_ang])\n            cube([body_l/2, 0.8, body_t], center = true);\n}\n\n// Pencil slots for marking\nmodule pencil_slots() {\n    for (y = [-body_w/2 + 4, body_w/2 - 4])\n        translate([0, y, -body_t/2])\n            cube([body_l - 20, slot_w, slot_h + 0.1], center = false);\n}\n\n// Engraved scale marks\nmodule scale_marks() {\n    for (x = [-body_l/2 + 10 : 10 : body_l/2 - 10]) {\n        translate([x, body_w/2 - wall - 0.5, -body_t/2])\n            cube([0.5, 1, txt_h + 0.1]);\n        translate([x, -body_w/2 + wall + 0.5, -body_t/2])\n            cube([0.5, 1, txt_h + 0.1]);\n    }\n}\n\n// Raised labels\nmodule labels() {\n    translate([-(body_l/2 - 8), body_w/2 - 5, -body_t/2 + 0.01])\n        rotate([0, 0, -90])\n            linear_extrude(height = txt_h)\n                text(\"1:7\", size = txt_size, font = \"Arial:style=Bold\");\n\n    translate([(body_l/2 - 8), body_w/2 - 5, -body_t/2 + 0.01])\n        rotate([0, 0, 90])\n            linear_extrude(height = txt_h)\n                text(\"1:7\", size = txt_size, font = \"Arial:style=Bold\");\n}\n\n// Assembly\nunion() {\n    body();\n    angle_guide(1);\n    angle_guide(-1);\n    pencil_slots();\n    scale_marks();\n    labels();\n}",
    "renders": true
  },
  {
    "household_item": "elestial",
    "openscad_code": "// Elestial (quartz cluster) – medium-complexity, realistic style\n// Overall size ≈ 70 mm tall, 55 mm wide, 45 mm deep\n// Good wall thickness for FDM printing, no extreme overhangs\n\n$fn = 36;        // Good compromise between smoothness & facet count\nwall = 1.6;      // Two 0.4 mm perimeters\nbase_h = 10;     // Ground plinth height\nmax_crystal = 35; // Tallest individual crystal\ncluster_d = 50;  // Approx footprint diameter\n\n// Utility: tapering hexagonal prism (simplified crystal)\nmodule hex_crystal(h, r_base, r_top) {\n    linear_extrude(height = h, scale = r_top / r_base, center = false)\n        circle(r = r_base, $fn = 6);\n}\n\n// Utility: irregular surface bumps\nmodule bumps(count) {\n    for(i = [0:count-1]) {\n        translate([\n            rands(-5, 5, 1)[0],\n            rands(-5, 5, 1)[0],\n            rands(0, max_crystal*0.3, 1)[0]\n        ])\n        scale([1, 1, 0.6])\n        sphere(r = rands(1.5, 3, 1)[0]);\n    }\n}\n\n// Main crystal generator\nmodule crystal(h, r_base, angle, azim, x_off, y_off) {\n    translate([x_off, y_off, base_h])\n    rotate([0, angle, azim])\n    union() {\n        // Core prism\n        hex_crystal(h, r_base, r_base * 0.35);\n\n        // Termination facets (pyramid stack)\n        translate([0, 0, h])\n        for(i = [0:3]) {\n            scale(pow(0.75, i))\n            translate([0, 0, i * h * 0.1])\n            cylinder(h1 = h * 0.1, h2 = 0, r1 = r_base * pow(0.35, i+1), center = false);\n        }\n\n        // Surface detail\n        bumps(ceil(h / 6));\n    }\n}\n\n// Ground plinth with slight taper for printability\nmodule plinth() {\n    difference() {\n        cylinder(h = base_h, r1 = cluster_d/2, r2 = cluster_d/2 + 3, center = false);\n        translate([0, 0, -1])\n        cylinder(h = base_h + 2, r1 = cluster_d/2 - wall, r2 = cluster_d/2 + 3 - wall, center = false);\n    }\n}\n\n// Build the cluster\nplinth();\n\n// Central pillar\ncrystal(max_crystal, 9, 0, 0, 0, 0);\n\n// Ring of satellites\nfor(a = [0:60:359]) {\n    x = 18 * cos(a);\n    y = 18 * sin(a);\n    h = max_crystal * rands(0.65, 0.9, 1)[0];\n    r = rands(6, 9, 1)[0];\n    ang = rands(-20, 20, 1)[0];\n    crystal(h, r, ang, a + rands(-15, 15, 1)[0], x, y);\n}\n\n// Extra fillers for density\nfor(i = [0:7]) {\n    x = rands(-22, 22, 1)[0];\n    y = rands(-22, 22, 1)[0];\n    h = max_crystal * rands(0.4, 0.7, 1)[0];\n    r = rands(4, 6.5, 1)[0];\n    ang = rands(-30, 30, 1)[0];\n    az = rands(0, 360, 1)[0];\n    crystal(h, r, ang, az, x, y);\n}",
    "renders": true
  },
  {
    "household_item": "empyreal",
    "openscad_code": "// Empyreal (winged celestial orb) – realistic medium-complexity OpenSCAD\n\n// Overall size for printing (largest dimension ≈ 90 mm)\nscale_factor = 1;              // change to 0.5 for small test print\n\n// Wall thickness for FDM printers\nwall = 1.2;\n\n// Central glowing orb\nmodule core() {\n    difference() {\n        sphere(d = 45 * scale_factor);\n        sphere(d = 45 * scale_factor - wall * 2);\n    }\n}\n\n// Ring band around equator with rune-like engravings\nmodule equator_band() {\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 6 * scale_factor, d1 = 48 * scale_factor, d2 = 48 * scale_factor, center = true);\n        cylinder(h = 8 * scale_factor, d1 = 45 * scale_factor + 0.2, d2 = 45 * scale_factor + 0.2, center = true);\n    }\n\n    // Runes\n    for (a = [0 : 30 : 330]) {\n        rotate([0, 0, a])\n        translate([0, (48/2 - 3) * scale_factor, 0])\n        linear_extrude(height = 3 * scale_factor + 0.2, center = true)\n        text(\"Ψ\", size = 3 * scale_factor, font = \"Liberation Sans:style=Bold\");\n    }\n}\n\n// Stylized wing\nmodule wing() {\n    // Root\n    translate([0, -5 * scale_factor, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 8 * scale_factor, d1 = 10 * scale_factor, d2 = 7 * scale_factor);\n\n    // Main feather panel\n    hull() {\n        translate([0, 0, 0])\n        cube([28 * scale_factor, 1 * scale_factor, 4 * scale_factor], center = true);\n        translate([28 * scale_factor, 0, 0])\n        cube([1 * scale_factor, 1 * scale_factor, 14 * scale_factor], center = true);\n    }\n\n    // Secondary feathers\n    for (i = [1 : 3]) {\n        translate([i * 9 * scale_factor, -0.5 * scale_factor, 0])\n        rotate([0, 20 * i, 0])\n        scale([1, 1, 0.6])\n        hull() {\n            cube([6 * scale_factor, 0.8 * scale_factor, 1 * scale_factor], center = true);\n            translate([6 * scale_factor, 0, 0])\n            cube([0.5 * scale_factor, 0.8 * scale_factor, 5 * scale_factor], center = true);\n        }\n    }\n}\n\n// Assemble four wings at 90°\nmodule wings() {\n    for (a = [0 : 90 : 270]) {\n        rotate([0, 0, a])\n        translate([0, 25 * scale_factor, 0])\n        wing();\n    }\n}\n\n// Support ring to print without supports\nmodule base_ring() {\n    rotate([90, 0, 0])\n    cylinder(h = 2 * scale_factor, d1 = 60 * scale_factor, d2 = 60 * scale_factor, center = true);\n}\n\n// Complete model\nunion() {\n    base_ring();\n    core();\n    equator_band();\n    wings();\n}",
    "renders": true
  },
  {
    "household_item": "galathor",
    "openscad_code": "// Galathor - medium-complexity realistic style\n// Total height ≈ 65 mm, suitable for FDM printing\n\n$fn = 36;\n\nmodule body() {\n    // central torso\n    difference() {\n        union() {\n            // main hull\n            hull() {\n                translate([0, 0, 20]) sphere(d=30);\n                translate([0, 0, 40]) sphere(d=25);\n            }\n            // neck ring\n            cylinder(h=8, d1=25, d2=22, center=true);\n        }\n        // remove bottom cavity for printing\n        translate([0, 0, 10]) cube([32, 32, 30], center=true);\n    }\n}\n\nmodule head() {\n    // elongated cranium\n    difference() {\n        union() {\n            translate([0, 0, 55]) sphere(d=20);\n            cylinder(h=15, d=18, center=true);\n        }\n        // eye sockets\n        translate([-7, 10, 53]) sphere(d=5);\n        translate([7, 10, 53]) sphere(d=5);\n    }\n}\n\nmodule arms() {\n    // left arm\n    translate([-16, 0, 35]) rotate([0, 15, 0])\n        hull() {\n            sphere(d=8);\n            translate([0, 0, 18]) sphere(d=7);\n        }\n    // right arm\n    translate([16, 0, 35]) rotate([0, -15, 0])\n        hull() {\n            sphere(d=8);\n            translate([0, 0, 18]) sphere(d=7);\n        }\n}\n\nmodule legs() {\n    // left leg\n    translate([-7, 0, 0]) {\n        cylinder(h=20, d=12);\n        translate([0, 0, -10]) sphere(d=10);\n    }\n    // right leg\n    translate([7, 0, 0]) {\n        cylinder(h=20, d=12);\n        translate([0, 0, -10]) sphere(d=10);\n    }\n}\n\nmodule chest_plates() {\n    // front armor segments\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([0, 14, 30]) {\n                difference() {\n                    hull() {\n                        cube([8, 3, 10], center=true);\n                        translate([0, 1.5, 5]) cube([6, 2, 8], center=true);\n                    }\n                    translate([0, 2, 5]) cube([6.5, 2, 9], center=true);\n                }\n            }\n    }\n}\n\nmodule backpack() {\n    // rear power pack\n    translate([0, -12, 35]) {\n        difference() {\n            cube([16, 8, 12], center=true);\n            translate([0, 4, 0]) cube([14, 2, 10], center=true);\n        }\n        // cooling fins\n        for (i = [-3:3]) {\n            translate([i * 2, -8, 35]) cube([1, 4, 1]);\n        }\n    }\n}\n\nmodule antenna() {\n    // right antenna\n    translate([6, 0, 65]) {\n        cylinder(h=10, d=2);\n        sphere(d=3);\n    }\n    // left antenna\n    translate([-6, 0, 65]) {\n        cylinder(h=10, d=2);\n        sphere(d=3);\n    }\n}\n\n// assembly\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    chest_plates();\n    backpack();\n    antenna();\n}\n\n// base platform for clean print\ntranslate([0, 0, -20]) {\n    difference() {\n        cylinder(h=2, d=40);\n        translate([0, 0, -1]) cylinder(h=4, d=38);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "helionel",
    "openscad_code": "// Helionel - Realistic Medium Complexity\n// A stylized helicopter model with rotating blades and landing gear\n\n$fn = 36; // Smooth curves for realism\n\nmodule main_body() {\n    // Main fuselage with slight taper\n    difference() {\n        hull() {\n            translate([0, 0, 10]) scale([1, 0.6, 0.5]) sphere(d=30);\n            translate([0, 0, 35]) scale([1.2, 0.7, 0.6]) sphere(d=35);\n            translate([0, 0, 50]) scale([0.8, 0.5, 0.4]) sphere(d=25);\n        }\n        \n        // Cockpit windows\n        translate([0, -2, 45]) rotate([0, 20, 0]) scale([0.8, 0.4, 0.3]) \n            sphere(d=20);\n        translate([0, -2, 35]) rotate([0, 20, 0]) scale([0.7, 0.3, 0.2]) \n            sphere(d=15);\n    }\n}\n\nmodule tail_boom() {\n    // Tail boom assembly\n    union() {\n        // Boom structure\n        translate([0, 0, 25]) rotate([90, 0, 0]) \n            cylinder(h=60, d1=12, d2=8);\n        \n        // Tail rotor housing\n        translate([0, 0, -25]) rotate([0, 0, 90]) \n            cylinder(h=15, d=10);\n            \n        // Vertical stabilizer\n        translate([0, 0, -20]) rotate([0, 0, 0])\n            scale([0.1, 1, 0.8]) cube([5, 15, 20], center=true);\n    }\n}\n\nmodule rotor_head(h=10) {\n    // Main rotor assembly\n    rotate([0, 0, $t*360]) {\n        // Rotor hub\n        cylinder(h=h, d=8);\n        \n        // Main blades (4-blade rotor)\n        for(i=[0:90:270]) {\n            rotate([0, 0, i]) {\n                // Blade root\n                translate([5, 0, h/2]) cube([10, 3, 1]);\n                \n                // Blade proper\n                translate([25, 0, h/2]) scale([1, 0.3, 0.05]) \n                    cube([40, 8, 2], center=true);\n            }\n        }\n    }\n}\n\nmodule landing_gear() {\n    // Skid-type landing gear\n    module skid() {\n        // Main tube\n        rotate([90, 0, 0]) cylinder(h=60, d=3);\n        \n        // Support struts\n        for(pos=[-15, 15]) {\n            translate([pos, 0, 0]) {\n                // Vertical strut\n                translate([0, 0, -10]) cylinder(h=10, d=2);\n                \n                // Cross brace\n                translate([0, 8, -5]) rotate([90, 0, 90])\n                    cylinder(h=16, d=1.5);\n            }\n        }\n    }\n    \n    // Position both skids\n    translate([0, -8, 0]) skid();\n    translate([0, 8, 0]) skid();\n}\n\nmodule engine_details() {\n    // Engine housing\n    difference() {\n        translate([0, 0, 55]) scale([1.2, 0.8, 0.6])\n            sphere(d=20);\n        \n        // Cooling vents\n        for(i=[0:45:315]) {\n            rotate([0, 0, i]) translate([10, 0, 55])\n                cube([2, 8, 3], center=true);\n        }\n    }\n}\n\n// Assemble the helionel\nunion() {\n    // Main components\n    main_body();\n    translate([0, 0, 50]) rotor_head();\n    translate([0, 0, 50]) engine_details();\n    tail_boom();\n    \n    // Landing gear positioned at base\n    translate([0, 0, 0]) landing_gear();\n}",
    "renders": true
  },
  {
    "household_item": "irion",
    "openscad_code": "// Realistic Iron OpenSCAD Model – medium complexity\n// Overall size ~70 mm length × 35 mm width × 28 mm height\n// All dimensions in millimetres\n\n// ---------- PARAMETERS ----------\niron_len = 70;\niron_wid = 35;\niron_h   = 28;\nwall     = 1.8;           // shell thickness for 3-D printing\nhandle_h = 20;\nhandle_r = 7;\n\n// ---------- HELPERS ----------\nmodule shell() {\n    difference() {\n        // outer rough body\n        cube([iron_len, iron_wid, iron_h], center=true);\n        // hollow inside\n        translate([0, 0, 0])\n            cube([iron_len - wall*2, iron_wid - wall*2, iron_h - wall], center=true);\n    }\n}\n\n// ---------- SOLE PLATE ----------\nmodule sole() {\n    difference() {\n        // rounded sole bottom\n        translate([0, 0, -iron_h/2 + 1.5])\n            minkowski() {\n                cube([iron_len, iron_wid, 3], center=true);\n                sphere(d=4);\n            }\n        // steam holes (array)\n        for (x = [-iron_len/2 + 10:10:iron_len/2 - 10])\n            for (y = [-iron_wid/2 + 10:10:iron_wid/2 - 10])\n                translate([x, y, -iron_h/2 - 1])\n                    cylinder(h=5, d=2, center=true);\n    }\n}\n\n// ---------- HEAT DOME ----------\nmodule dome() {\n    translate([0, 0, iron_h/2 - 3])\n        sphere(d=iron_wid*0.9);\n}\n\n// ---------- HANDLE ----------\nmodule handle() {\n    // left post\n    translate([-iron_len/3, 0, iron_h/2])\n        cylinder(h=handle_h, r=handle_r, center=false);\n    // right post\n    translate([iron_len/3, 0, iron_h/2])\n        cylinder(h=handle_h, r=handle_r, center=false);\n    // connecting bar\n    translate([0, 0, iron_h/2 + handle_h - handle_r])\n        rotate([90, 0, 0])\n            cylinder(h=iron_len*0.7, r=handle_r*0.8, center=true);\n}\n\n// ---------- CORD EXIT ----------\nmodule cord_exit() {\n    translate([iron_len/2 - 5, iron_wid/4, iron_h/2 - 2])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=4, center=true);\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    shell();\n    sole();\n    dome();\n    handle();\n    cord_exit();\n}",
    "renders": true
  },
  {
    "household_item": "lunareth",
    "openscad_code": "// LUNARETH – Realistic, medium-detail Moon Lander\n// Overall height ≈ 75 mm, base diameter ≈ 60 mm\n// Designed for 3-D printing without support\n\n// Wall thickness\nwall = 1.6;\n\n// Main body dimensions\nbody_h = 45;\nbody_r = 30;\n\n// Landing-leg parameters\nleg_w = 4;\nleg_h = 30;\nleg_angle = 35;  // degrees from vertical\n\n// Foot pads\npad_r = 6;\npad_h = 2;\n\n// Thruster bell\nthruster_r = 12;\nthruster_h = 15;\n\n// Antenna mast\nmast_r = 1.5;\nmast_h = 18;\n\n// Solar panels\npanel_w = 22;\npanel_h = 18;\npanel_t = 1.2;\n\n// Command module “cabin” on top\ncabin_r = 12;\ncabin_h = 8;\n\n// -------------- Modules --------------\n\nmodule main_body() {\n    difference() {\n        cylinder(h = body_h, r1 = body_r, r2 = body_r, $fn = 48);\n        // Hollow it out\n        translate([0, 0, wall])\n            cylinder(h = body_h - wall, r1 = body_r - wall, r2 = body_r - wall, $fn = 48);\n    }\n}\n\nmodule thruster_bell() {\n    difference() {\n        cylinder(h = thruster_h, r1 = thruster_r, r2 = thruster_r + 3, $fn = 36);\n        // Inner nozzle\n        cylinder(h = thruster_h + 1, r1 = thruster_r - wall, r2 = thruster_r - wall + 1, $fn = 36);\n    }\n}\n\nmodule landing_leg() {\n    // Single leg assembly\n    union() {\n        // Strut\n        rotate([leg_angle, 0, 0])\n            cube([leg_w, leg_w, leg_h], center = true);\n        // Foot pad\n        translate([0, 0, -leg_h * cos(leg_angle) - pad_h / 2])\n            cylinder(h = pad_h, r = pad_r, $fn = 20);\n    }\n}\n\nmodule solar_panel() {\n    difference() {\n        cube([panel_w, panel_t, panel_h], center = true);\n        // Hollow panel\n        translate([0, 0, 0])\n            cube([panel_w - wall, panel_t + 1, panel_h - wall], center = true);\n    }\n}\n\nmodule antenna() {\n    union() {\n        // Mast\n        cylinder(h = mast_h, r = mast_r, $fn = 12);\n        // Dish\n        translate([0, 0, mast_h])\n            rotate([180, 0, 0])\n            cylinder(h = 2, r1 = 4, r2 = 3, $fn = 24);\n    }\n}\n\nmodule command_cabin() {\n    difference() {\n        cylinder(h = cabin_h, r = cabin_r, $fn = 32);\n        translate([0, 0, wall])\n            cylinder(h = cabin_h, r = cabin_r - wall, $fn = 32);\n    }\n}\n\n// -------------- Assembly --------------\n\nunion() {\n    // Central body\n    main_body();\n\n    // Thruster under body\n    translate([0, 0, -body_h / 2 - thruster_h / 2])\n        thruster_bell();\n\n    // Landing legs – 4-fold symmetry\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([body_r - leg_w / 2, 0, -body_h / 2])\n                landing_leg();\n    }\n\n    // Solar panels – two opposite\n    translate([body_r + panel_w / 2, 0, body_h / 4])\n        rotate([0, 90, 0])\n            solar_panel();\n    translate([-body_r - panel_w / 2, 0, body_h / 4])\n        rotate([0, 90, 0])\n            solar_panel();\n\n    // Command cabin on top\n    translate([0, 0, body_h / 2 + cabin_h / 2])\n        command_cabin();\n\n    // Antenna\n    translate([0, 0, body_h / 2 + cabin_h + mast_h / 2])\n        antenna();\n}",
    "renders": true
  },
  {
    "household_item": "nebulith",
    "openscad_code": "// Nebulith - realistic style, medium complexity\n// A crystalline formation with embedded energy cores and growth rings\n\n$fn=32;\nmodule core_sphere(radius) {\n    // Main energy core with inner glow\n    difference() {\n        sphere(radius);\n        sphere(radius-1.5);\n    }\n}\n\nmodule growth_ring(outer, inner, height, angle) {\n    // Crystalline growth ring segment\n    rotate([0,0,angle]) {\n        difference() {\n            cylinder(h=height, r=outer);\n            cylinder(h=height+0.2, r=inner);\n        }\n    }\n}\n\nmodule crystal_spike(len, base_r, tip_r) {\n    // Tapered crystalline spike\n    cylinder(h=len, r1=base_r, r2=tip_r);\n}\n\nmodule nebulith_core() {\n    // Central energy core assembly\n    translate([0,0,18]) {\n        // Main core\n        color(\"DeepSkyBlue\") core_sphere(8);\n        \n        // Core supports\n        for(i=[0:60:359]) {\n            rotate([0,0,i]) {\n                translate([9,0,0]) {\n                    color(\"SteelBlue\") cylinder(h=4, r=1.2);\n                }\n            }\n        }\n    }\n}\n\nmodule crystalline_base() {\n    // Base crystalline structure\n    union() {\n        // Main crystal body\n        difference() {\n            cylinder(h=20, r=15);\n            cylinder(h=22, r=12);\n        }\n        \n        // Growth rings\n        for(i=[0:45:359]) {\n            translate([0,0,5]) growth_ring(14.5, 13, 10, i);\n            translate([0,0,10]) growth_ring(14, 12.5, 8, i+22.5);\n            translate([0,0,15]) growth_ring(13.5, 12, 6, i+11.25);\n        }\n        \n        // Radial spikes\n        for(i=[0:30:359]) {\n            rotate([0,0,i]) {\n                translate([13,0,10]) {\n                    rotate([90,0,0]) {\n                        color(\"LightBlue\") crystal_spike(8, 1.5, 0.3);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule energy_conduits() {\n    // Energy transfer conduits\n    for(i=[0:90:359]) {\n        rotate([0,0,i]) {\n            translate([8,0,8]) {\n                rotate([90,0,0]) {\n                    // Main conduit\n                    color(\"RoyalBlue\") cylinder(h=12, r=1.8);\n                    \n                    // Conduit nodes\n                    translate([0,0,3]) color(\"Cyan\") sphere(2);\n                    translate([0,0,9]) color(\"Cyan\") sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule stabilizing_fins() {\n    // Stabilization fins for 3D printing\n    union() {\n        // Base fins\n        for(i=[0:120:359]) {\n            rotate([0,0,i]) {\n                translate([15,0,0]) {\n                    cube([2, 0.8, 20], center=true);\n                }\n            }\n        }\n        \n        // Mid-level supports\n        translate([0,0,15]) {\n            for(i=[0:90:359]) {\n                rotate([0,0,i+45]) {\n                    translate([12,0,0]) {\n                        cube([1.5, 0.6, 8], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    color(\"LightSteelBlue\") crystalline_base();\n    nebulith_core();\n    color(\"DodgerBlue\") energy_conduits();\n    color(\"LightBlue\", 0.3) stabilizing_fins();\n}\n\n// Print base\ntranslate([0,0,-1]) {\n    difference() {\n        cylinder(h=1, r=16);\n        cylinder(h=1.2, r=14);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "orionel",
    "openscad_code": "// Orionel (Orion constellation) model in realistic style, medium complexity\n// Designed for 3D printing - no overhangs, proper wall thickness\n\nwall = 2;\n\nmodule star(dia, height) {\n    // Star with slight dome for realistic appearance\n    union() {\n        cylinder(h=height, d=dia, $fn=20);\n        translate([0,0,height-0.5])\n            sphere(d=dia*1.1, $fn=20);\n    }\n}\n\nmodule belt_buckle() {\n    // Rectangular belt buckle with beveled edges\n    difference() {\n        cube([12, 6, 3], center=true);\n        translate([0,0,-1.5])\n            cube([10, 4, 4], center=true);\n    }\n}\n\nmodule belt() {\n    // Three-star belt with connecting lines\n    color(\"gold\")\n    union() {\n        // Left belt star\n        translate([-15, 0, 0])\n            star(8, 4);\n        \n        // Center belt star with buckle\n        translate([0, 0, 0]) {\n            star(8, 4);\n            translate([0, 0, 2.5])\n                belt_buckle();\n        }\n        \n        // Right belt star\n        translate([15, 0, 0])\n            star(8, 4);\n            \n        // Belt connecting bars\n        color(\"gold\")\n        for(i=[-1, 1]) {\n            translate([i*7.5, 0, 2])\n                cube([15-4, 3, 1.5], center=true);\n        }\n    }\n}\n\nmodule sword() {\n    // Sword hanging from belt\n    color(\"silver\")\n    union() {\n        // Sword handle\n        translate([0, -8, -12])\n            cylinder(h=8, d1=4, d2=3, $fn=12);\n            \n        // Sword blade\n        translate([0, -8, -20])\n            cylinder(h=12, d1=3, d2=1, $fn=6);\n            \n        // Cross guard\n        translate([0, -8, -12])\n            rotate([90,0,0])\n                cube([10, 2, 1], center=true);\n    }\n}\n\nmodule shoulder_star(pos, size) {\n    // Shoulder area stars\n    translate(pos)\n        star(size, size/2);\n}\n\nmodule head() {\n    // Head with two bright stars (Betelgeuse and Bellatrix)\n    translate([-25, 15, 20]) {\n        color(\"orange\")\n        star(12, 6);  // Betelgeuse\n        \n        translate([50, 0, 0])\n            color(\"lightblue\")\n            star(10, 5);  // Bellatrix\n    }\n}\n\nmodule feet() {\n    // Feet stars (Rigel and Saiph)\n    translate([-20, -15, -30]) {\n        color(\"white\")\n        star(10, 5);  // Rigel\n        \n        translate([40, 5, 0])\n            color(\"lightblue\")\n            star(8, 4);  // Saiph\n    }\n}\n\nmodule body_outline() {\n    // Connective structure between stars for stability\n    color(\"navy\")\n    union() {\n        // Torso connections\n        hull() {\n            translate([-25, 15, 20])\n                sphere(d=wall);\n            translate([-15, 0, 0])\n                sphere(d=wall);\n        }\n        \n        hull() {\n            translate([25, 15, 20])\n                sphere(d=wall);\n            translate([15, 0, 0])\n                sphere(d=wall);\n        }\n        \n        // Leg connections\n        hull() {\n            translate([-15, 0, 0])\n                sphere(d=wall);\n            translate([-20, -15, -30])\n                sphere(d=wall);\n        }\n        \n        hull() {\n            translate([15, 0, 0])\n                sphere(d=wall);\n            translate([20, -10, -30])\n                sphere(d=wall);\n        }\n        \n        // Arm connections\n        hull() {\n            translate([-25, 15, 20])\n                sphere(d=wall);\n            translate([-35, 5, 0])\n                sphere(d=wall);\n        }\n        \n        hull() {\n            translate([25, 15, 20])\n                sphere(d=wall);\n            translate([35, 5, 0])\n                sphere(d=wall);\n        }\n    }\n}\n\nmodule arms() {\n    // Arm stars\n    translate([-35, 5, 0])\n        color(\"orange\")\n        star(7, 3.5);\n        \n    translate([35, 5, 0])\n        color(\"lightblue\")\n        star(7, 3.5);\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    body_outline();\n    \n    // Major stars\n    head();\n    feet();\n    arms();\n    \n    // Belt and sword\n    belt();\n    sword();\n    \n    // Additional torso stars\n    translate([0, 10, 10])\n        color(\"white\")\n        star(6, 3);\n        \n    translate([-10, -5, 5])\n        color(\"lightblue\")\n        star(5, 2.5);\n        \n    translate([10, -5, 5])\n        color(\"white\")\n        star(5, 2.5);\n}",
    "renders": true
  },
  {
    "household_item": "pyrelith",
    "openscad_code": "// Pyrelith - Realistic volcanic stone with glowing core\n// Medium complexity OpenSCAD model\n\n$fn = 48;\n\nmodule stone_block(w, h, d) {\n    // Main rough stone block with slight irregularity\n    difference() {\n        cube([w, h, d], center = true);\n        for(i = [0:3]) {\n            translate([rand(-w/4, w/4), rand(-h/4, h/4), rand(-d/4, d/4)])\n                sphere(r = rand(2, 5));\n        }\n    }\n}\n\nmodule lava_veins() {\n    // Glowing lava cracks throughout the stone\n    for(i = [0:8]) {\n        rotate([rand(0, 360), rand(0, 360), rand(0, 360)])\n            translate([rand(-15, 15), rand(-15, 15), rand(-15, 15)])\n                scale([rand(0.5, 1.5), rand(0.5, 1.5), rand(0.5, 1.5)])\n                    cylinder(h = rand(20, 40), r1 = 1.5, r2 = 0.5, center = true);\n    }\n}\n\nmodule glowing_core() {\n    // Central molten core\n    difference() {\n        sphere(r = 12);\n        // Hollow center for printing\n        sphere(r = 8);\n    }\n}\n\nmodule surface_cracks() {\n    // Surface detail cracks\n    for(i = [0:15]) {\n        rotate([rand(0, 180), rand(0, 180), rand(0, 180)])\n            translate([rand(-20, 20), rand(-20, 20), rand(-20, 20)])\n                scale([rand(0.3, 1), rand(0.3, 1), rand(0.3, 1)])\n                    cube([rand(5, 15), rand(0.5, 2), rand(1, 3)], center = true);\n    }\n}\n\nmodule base_platform() {\n    // Stable base platform\n    difference() {\n        cylinder(h = 5, r = 30);\n        cylinder(h = 6, r = 25);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base_platform();\n    \n    // Main stone body\n    translate([0, 0, 25])\n        stone_block(40, 35, 30);\n    \n    // Glowing core inside\n    translate([0, 0, 30])\n        glowing_core();\n    \n    // Lava veins\n    translate([0, 0, 30])\n        lava_veins();\n    \n    // Surface cracks detail\n    translate([0, 0, 25])\n        surface_cracks();\n    \n    // Top spire\n    translate([0, 0, 55])\n        rotate([0, 0, 45])\n            scale([1, 1, 1.5])\n                cylinder(h = 15, r1 = 8, r2 = 4);\n}\n\n// Helper function for random values\nfunction rand(min, max) = min + (max - min) * rands(0, 1, 1)[0];",
    "renders": true
  },
  {
    "household_item": "quintar",
    "openscad_code": "// Quintar - realistic style, medium complexity\n// Dimensions: ~70mm diameter, 3D-printable with no overhangs\n\n// Parameters\n$fn = 64;\nbody_r = 35;\nbody_h = 12;\nrim_h = 3;\nrim_gap = 1.5;\nslot_w = 6;\nslot_d = 3;\nn_slots = 5;\npeg_r = 4;\npeg_h = 8;\nboss_r = 10;\nboss_h = 5;\ncenter_hole_r = 6;\n\n// Main body with rim\nmodule main_body() {\n    difference() {\n        // Solid disk\n        cylinder(h = body_h, r = body_r);\n        \n        // Recessed top surface\n        translate([0, 0, body_h - rim_h])\n            cylinder(h = rim_h + 0.1, r = body_r - rim_gap);\n    }\n    \n    // Outer rim lip\n    translate([0, 0, body_h - rim_h])\n        cylinder(h = rim_h, r = body_r);\n}\n\n// Radial slots for spoke access\nmodule slots() {\n    for (i = [0 : n_slots - 1]) {\n        rotate([0, 0, i * 360 / n_slots])\n            translate([body_r - slot_d, 0, body_h - slot_d])\n                cube([slot_d, slot_w, slot_d], center = true);\n    }\n}\n\n// Center hub\nmodule hub() {\n    union() {\n        // Main boss\n        cylinder(h = boss_h, r = boss_r);\n        \n        // Central peg\n        translate([0, 0, boss_h])\n            cylinder(h = peg_h, r = peg_r);\n    }\n    \n    // Center hole\n    translate([0, 0, -0.1])\n        cylinder(h = boss_h + peg_h + 0.2, r = center_hole_r);\n}\n\n// Reinforcing ribs under rim\nmodule ribs() {\n    for (i = [0 : n_slots - 1]) {\n        rotate([0, 0, i * 360 / n_slots + 360 / n_slots / 2])\n            translate([0, body_r - 8, 0])\n                cube([2, 8, body_h], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    union() {\n        main_body();\n        translate([0, 0, body_h])\n            hub();\n        slots();\n        ribs();\n    }",
    "renders": true
  },
  {
    "household_item": "sideron",
    "openscad_code": "// Sideron (ancient Greek iron tool) - realistic style, medium complexity\n// Overall dimensions: ~80mm length\n\n// Parameters\nlength = 80;\nhandle_len = 40;\nblade_len = 40;\nhandle_d = 12;\nblade_w = 18;\nblade_t = 3;\nrivet_d = 3;\nrivet_h = 2;\nloop_r = 4;\nloop_t = 2;\n\nmodule handle() {\n    // Main wooden handle with slight taper\n    translate([0, 0, handle_len/2])\n        cylinder(h=handle_len, d1=handle_d, d2=handle_d*0.9, $fn=32);\n    \n    // Leather wrapping rings\n    for(i=[1:4]) {\n        translate([0, 0, i*handle_len/5])\n            difference() {\n                cylinder(h=2, d=handle_d+1, $fn=32);\n                cylinder(h=3, d=handle_d-1, $fn=32);\n            }\n    }\n    \n    // Hanging loop\n    translate([handle_d/2+loop_r, 0, handle_len-2])\n        rotate([90, 0, 0])\n            difference() {\n                torus(loop_r, loop_t);\n                translate([0, -loop_r*2, 0])\n                    cube([loop_r*2, loop_r*2, loop_t*2], center=true);\n            }\n}\n\nmodule blade() {\n    // Main blade - flat with slight curve\n    translate([0, 0, handle_len+blade_len/2])\n        rotate([0, -10, 0])\n            linear_extrude(height=blade_t, center=true)\n                polygon([\n                    [0, 0],\n                    [blade_len, blade_w/2],\n                    [blade_len+5, 0],\n                    [blade_len, -blade_w/2],\n                    [0, 0]\n                ]);\n    \n    // Reinforced spine\n    translate([0, 0, handle_len+blade_len/2])\n        rotate([0, -10, 0])\n            cube([blade_len, 4, blade_t+2], center=true);\n    \n    // Rivets securing blade to handle\n    for(i=[-1, 1]) {\n        translate([i*handle_d/4, 0, handle_len-3])\n            cylinder(h=rivet_h, d=rivet_d, $fn=16);\n    }\n    \n    // Cutting edge bevel\n    translate([0, blade_w/2-blade_t/2, handle_len+blade_len/2])\n        rotate([0, -10, 0])\n            cube([blade_len, blade_t/2, blade_t], center=true);\n}\n\nmodule torus(r, t) {\n    rotate_extrude($fn=32)\n        translate([r, 0, 0])\n            circle(r=t, $fn=16);\n}\n\n// Assembly\nunion() {\n    handle();\n    blade();\n}",
    "renders": true
  },
  {
    "household_item": "solithar",
    "openscad_code": "// Realistic Solithar (3-stringed Indian lute)\n// Medium complexity model with basic primitives\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 70;\nbody_width = 35;\nbody_depth = 15;\nneck_length = 80;\nneck_width = 12;\nneck_thickness = 10;\n\nmodule body() {\n    // Main resonator body - teardrop shape using spheres\n    union() {\n        // Main body - two intersected spheres for rounded back\n        intersection() {\n            translate([0, 0, 0]) sphere(d = body_width * 1.1);\n            translate([0, body_length/4, 0]) sphere(d = body_width * 0.9);\n        }\n        \n        // Flat front face\n        difference() {\n            translate([-body_depth/2, -body_length/2, -body_width/2]) \n                cube([body_depth, body_length, body_width]);\n            \n            // Sound hole\n            translate([-body_depth/2 + 0.5, body_length/3, 0]) \n                cylinder(h = body_depth + 1, d = 8, center = true);\n        }\n        \n        // Bridge\n        translate([-body_depth/2 + 1, -body_length/4, 0]) \n            cube([2, 12, 3]);\n    }\n}\n\nmodule neck() {\n    // Tapered neck\n    hull() {\n        // Start at body\n        translate([0, body_length/2, 0]) \n            cube([neck_thickness, 1, neck_width], center = true);\n        \n        // End at headstock\n        translate([0, body_length/2 + neck_length, 0]) \n            scale([0.7, 1, 0.7]) \n                cube([neck_thickness, 1, neck_width], center = true);\n    }\n    \n    // Headstock\n    translate([0, body_length/2 + neck_length + 15, 0]) \n        cube([neck_thickness * 1.2, 20, neck_width * 1.2], center = true);\n    \n    // Frets\n    for(i = [1:7]) {\n        translate([0, body_length/2 + i * 10, 0]) \n            cube([neck_thickness + 0.5, 1, neck_width + 2], center = true);\n    }\n}\n\nmodule strings() {\n    // Three strings\n    for(i = [-1, 0, 1]) {\n        // String from bridge to tuning peg\n        translate([neck_thickness/2 + 1, -body_length/4, i * 3]) \n            cylinder(h = body_length/2 + neck_length + 20, d = 0.8);\n    }\n}\n\nmodule tuning_pegs() {\n    // Three tuning pegs on headstock\n    for(i = [-1, 0, 1]) {\n        translate([neck_thickness * 0.8, body_length/2 + neck_length + 15, i * 4]) \n            rotate([90, 0, 0]) \n                cylinder(h = 8, d1 = 4, d2 = 2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body positioned at origin\n    body();\n    \n    // Neck attached to body\n    neck();\n    \n    // Strings\n    strings();\n    \n    // Tuning pegs\n    tuning_pegs();\n}\n\n// Base support for 3D printing\ntranslate([0, -body_length/2 - 5, 0]) \n    cube([body_depth + 2, 2, body_width + 2], center = true);",
    "renders": true
  },
  {
    "household_item": "stellareth",
    "openscad_code": "// Realistic Stellareth - Medium Complexity\n// A stellareth is a star-shaped wheel used in medieval manuscripts\n\n// Overall dimensions\nstellareth_diameter = 80;\nthickness = 6;\nhandle_length = 40;\nhandle_diameter = 10;\n\n// Star parameters\npoints = 8;\ninner_radius = 20;\nouter_radius = 35;\nfillet_radius = 2;\n\n// Central hub dimensions\nhub_radius = 15;\nhub_height = 8;\n\n// Decorative ring parameters\nring_thickness = 2;\nring_gap = 3;\n\nmodule star_point(length, width, height) {\n    // Create a single star point with rounded tip\n    union() {\n        // Main body of point\n        cube([length - width/2, width, height], center = true);\n        \n        // Rounded tip\n        translate([length/2 - width/4, 0, 0])\n            scale([1, 0.5, 1])\n                cylinder(h = height, r = width/2, $fn = 16, center = true);\n    }\n}\n\nmodule stellareth_wheel() {\n    difference() {\n        // Main star wheel\n        union() {\n            // Central hub\n            cylinder(h = hub_height, r = hub_radius, $fn = 32);\n            \n            // Star points\n            for(i = [0:points-1]) {\n                rotate([0, 0, i * 360/points])\n                    translate([inner_radius + (outer_radius - inner_radius)/2, 0, 0])\n                        star_point(outer_radius - inner_radius, 8, thickness);\n            }\n            \n            // Decorative ring near tips\n            translate([0, 0, thickness/2 - ring_thickness/2])\n                cylinder(h = ring_thickness, r = outer_radius - ring_gap, $fn = 64);\n        }\n        \n        // Center hole for handle\n        cylinder(h = thickness + 1, r = handle_diameter/2 + 1, $fn = 32, center = true);\n        \n        // Decorative cutouts between points\n        for(i = [0:points-1]) {\n            rotate([0, 0, i * 360/points + 180/points])\n                translate([inner_radius + (outer_radius - inner_radius)/2, 0, -1])\n                    cube([outer_radius - inner_radius + 2, 3, thickness + 2], center = true);\n        }\n    }\n}\n\nmodule handle() {\n    // Main handle shaft\n    cylinder(h = handle_length, r = handle_diameter/2, $fn = 32);\n    \n    // Grip rings\n    for(i = [1:3]) {\n        translate([0, 0, i * handle_length/4])\n            cylinder(h = 2, r = handle_diameter/2 + 1, $fn = 32);\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n        sphere(r = handle_diameter/2 + 1, $fn = 32);\n}\n\nmodule stellareth_assembly() {\n    // Assemble the stellareth with handle\n    union() {\n        // Main wheel\n        stellareth_wheel();\n        \n        // Handle\n        translate([0, 0, -handle_length/2])\n            handle();\n    }\n}\n\n// Render the complete stellareth\nstellareth_assembly();",
    "renders": true
  },
  {
    "household_item": "thalorith",
    "openscad_code": "// Realistic Thalorith - Medium Complexity\n// A thalorith is a mythical crystalline artifact with floating rings and a central core\n\n// Parameters for easy scaling and customization\ncore_radius = 12;\nring_major_radius = 30;\nring_minor_radius = 3;\nring_count = 3;\ncrystal_height = 45;\nbase_height = 8;\nwall_thickness = 2;\n\n// Main module to create the complete thalorith\nmodule thalorith() {\n    // Base pedestal\n    translate([0, 0, -base_height/2])\n        pedestal();\n    \n    // Central crystalline core\n    translate([0, 0, base_height + crystal_height/2])\n        central_crystal();\n    \n    // Floating rings around the core\n    for (i = [0:ring_count-1]) {\n        rotate([0, 0, i * 120])\n            translate([0, 0, base_height + crystal_height/3 + i * 10])\n                floating_ring();\n    }\n    \n    // Energy nodes connecting rings to core\n    for (i = [0:ring_count-1]) {\n        rotate([0, 0, i * 120])\n            energy_node(i);\n}\n\n// Base pedestal with runic patterns\nmodule pedestal() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, r = 15, $fn = 48);\n        \n        // Carved rune grooves\n        for (angle = [0:30:330]) {\n            rotate([0, 0, angle])\n                translate([12, 0, -1])\n                    cube([3, 1, base_height + 2], center = true);\n        }\n        \n        // Central hole for core attachment\n        cylinder(h = base_height + 2, r = core_radius + 2, $fn = 32);\n    }\n    \n    // Decorative rim\n    translate([0, 0, base_height - 1])\n        cylinder(h = 2, r1 = 16, r2 = 14, $fn = 48);\n}\n\n// Central crystalline core structure\nmodule central_crystal() {\n    // Main hexagonal prism core\n    cylinder(h = crystal_height, r = core_radius, $fn = 6);\n    \n    // Crystal facets\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60 + 30])\n            translate([core_radius - 1, 0, crystal_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = crystal_height, r1 = 2, r2 = 0, $fn = 3);\n    }\n    \n    // Top crystal point\n    translate([0, 0, crystal_height])\n        cylinder(h = 8, r1 = core_radius, r2 = 0, $fn = 6);\n}\n\n// Floating rings with energy patterns\nmodule floating_ring() {\n    // Main torus ring\n    rotate_extrude($fn = 48)\n        translate([ring_major_radius, 0, 0])\n            circle(r = ring_minor_radius);\n    \n    // Energy capacitors along ring\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([ring_major_radius, 0, 0])\n                sphere(r = ring_minor_radius * 0.6);\n    }\n}\n\n// Energy nodes connecting rings to core\nmodule energy_node(ring_index) {\n    height = base_height + crystal_height/3 + ring_index * 10;\n    translate([ring_major_radius - 5, 0, height])\n        rotate([0, 90, 0])\n            cylinder(h = ring_major_radius - 5, r = 1.5, $fn = 8);\n}\n\n// Render the complete thalorith\nthalorith();",
    "renders": true
  },
  {
    "household_item": "umbrionel",
    "openscad_code": "// Realistic medium-complexity umbrionel (umbrella handle + canopy)\n// Overall height ≈ 80 mm, width ≈ 70 mm\n// 3D-printable: all slopes ≤ 45°, wall ≥ 1.2 mm\n\n// Parameters\nhandle_len = 50;\nhandle_d  = 8;\nshaft_d   = 4;\ncanopy_d  = 70;\ncanopy_h  = 25;\nrib_cnt   = 8;\nwall      = 1.5;\n\n// Main assembly\numbrionel();\n\nmodule umbrionel() {\n    // Handle + shaft\n    union() {\n        // Curved handle\n        translate([0, 0, handle_len/2]) rotate([90, 0, 0])\n            difference() {\n                cylinder(h = handle_len, d = handle_d, $fn = 32);\n                // Hollow grip\n                translate([0, 0, -1])\n                    cylinder(h = handle_len + 2, d = handle_d - 2*wall, $fn = 32);\n            }\n\n        // Straight shaft\n        translate([0, 0, handle_len])\n            difference() {\n                cylinder(h = canopy_h + 10, d = shaft_d, $fn = 16);\n                cylinder(h = canopy_h + 12, d = shaft_d - 2*wall, $fn = 16);\n            }\n\n        // Canopy\n        translate([0, 0, handle_len + canopy_h])\n            union() {\n                // Outer shell\n                difference() {\n                    sphere(d = canopy_d, $fn = 64);\n                    translate([0, 0, -canopy_d/2 - 1])\n                        cube([canopy_d*2, canopy_d*2, canopy_d], center = true);\n                }\n                // Inner shell for hollow canopy\n                translate([0, 0, wall])\n                    sphere(d = canopy_d - 2*wall, $fn = 64);\n\n                // Ribs\n                for (i = [0:rib_cnt-1])\n                    rotate([0, 0, i*360/rib_cnt])\n                        translate([0, 0, 0])\n                            rotate([90, 0, 0])\n                                cylinder(h = canopy_d/2 - 2, d = wall*1.5, $fn = 8);\n\n                // Ferrule cap\n                translate([0, 0, canopy_d/2 - wall])\n                    sphere(d = wall*3, $fn = 16);\n            }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "vesperel",
    "openscad_code": "// Vesperel (small lantern) - realistic style, medium complexity\n// Overall height 80 mm, base diameter 55 mm\n\n// Parameters\nbase_height = 10;\nbase_diameter = 55;\npole_height = 30;\npole_diameter = 6;\nring_thickness = 3;\nring_gap = 5;\nglobe_outer = 35;\nglobe_thick = 2;\ncap_height = 8;\ncap_diameter = 37;\nflame_height = 12;\nflame_diameter = 4;\n\n// Base module\nmodule base() {\n    difference() {\n        cylinder(h=base_height, d=base_diameter, $fn=64);\n        // Hollow base\n        translate([0, 0, 2])\n            cylinder(h=base_height, d=base_diameter-6, $fn=64);\n        // Cable hole\n        rotate([90, 0, 0])\n            translate([0, -base_height/2, 0])\n                cylinder(h=base_height, d=6, $fn=32);\n    }\n    // Base rings for grip\n    for (i=[1:3]) {\n        translate([0, 0, i*2.5])\n            cylinder(h=1, d=base_diameter-2*i, $fn=64);\n    }\n}\n\n// Pole module\nmodule pole() {\n    cylinder(h=pole_height, d=pole_diameter, $fn=32);\n}\n\n// Support ring module\nmodule support_ring() {\n    translate([0, 0, pole_height])\n        difference() {\n            cylinder(h=ring_thickness, d=cap_diameter+10, $fn=64);\n            cylinder(h=ring_thickness+1, d=cap_diameter+4, $fn=64);\n        }\n}\n\n// Globe module\nmodule globe() {\n    difference() {\n        sphere(d=globe_outer, $fn=64);\n        sphere(d=globe_outer - 2*globe_thick, $fn=64);\n    }\n}\n\n// Cap module\nmodule cap() {\n    difference() {\n        cylinder(h=cap_height, d=cap_diameter, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=cap_height+2, d=cap_diameter-4, $fn=64);\n    }\n    // Cap top detail\n    translate([0, 0, cap_height])\n        sphere(d=cap_diameter-4, $fn=64);\n}\n\n// Flame module\nmodule flame() {\n    color(\"orange\")\n    translate([0, 0, -flame_height/2])\n        scale([1, 1, 1.2])\n            sphere(d=flame_diameter, $fn=32);\n    color(\"yellow\")\n    translate([0, 0, -flame_height/3])\n        scale([0.7, 0.7, 1])\n            sphere(d=flame_diameter*0.6, $fn=32);\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0, 0, base_height])\n        pole();\n    translate([0, 0, base_height+pole_height-ring_thickness/2])\n        support_ring();\n    translate([0, 0, base_height+pole_height+ring_thickness/2+globe_outer/2-5])\n        globe();\n    translate([0, 0, base_height+pole_height+globe_outer-5])\n        cap();\n    translate([0, 0, base_height+pole_height+globe_outer/2-5])\n        flame();\n}\n\n// Hanging loop\ntranslate([0, 0, base_height+pole_height+globe_outer-5+cap_height])\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h=8, d=10, $fn=32);\n            cylinder(h=10, d=6, $fn=32);\n        }",
    "renders": true
  },
  {
    "household_item": "xelar",
    "openscad_code": "// Xelar - Realistic Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n// Overall dimensions: ~85mm tall\n\n$fn = 32;\n\nmodule main_body() {\n    // Central cylindrical body\n    cylinder(h = 60, r1 = 15, r2 = 18, center = false);\n    \n    // Top dome\n    translate([0, 0, 60])\n    sphere(r = 18);\n}\n\nmodule sensor_array() {\n    // Top sensor cluster\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([12, 0, 75])\n        sphere(r = 3);\n    }\n    \n    // Secondary sensors\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([15, 0, 55])\n        cylinder(h = 8, r = 2);\n    }\n}\n\nmodule arms() {\n    // Left arm\n    translate([-20, 0, 40])\n    rotate([0, 15, -30])\n    difference() {\n        union() {\n            // Upper arm\n            cylinder(h = 25, r = 5);\n            \n            // Lower arm\n            translate([0, 0, 25])\n            cylinder(h = 20, r = 4);\n            \n            // Hand\n            translate([0, 0, 45])\n            sphere(r = 6);\n        }\n        \n        // Remove material for joints\n        translate([0, 0, 24])\n        cylinder(h = 2, r = 3.5);\n    }\n    \n    // Right arm - mirrored\n    mirror([1, 0, 0])\n    translate([-20, 0, 40])\n    rotate([0, 15, 30])\n    difference() {\n        union() {\n            cylinder(h = 25, r = 5);\n            translate([0, 0, 25])\n            cylinder(h = 20, r = 4);\n            translate([0, 0, 45])\n            sphere(r = 6);\n        }\n        translate([0, 0, 24])\n        cylinder(h = 2, r = 3.5);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-12, 0, 0])\n    difference() {\n        union() {\n            // Thigh\n            cylinder(h = 30, r = 6);\n            \n            // Calf\n            translate([0, 0, -30])\n            cylinder(h = 25, r = 5);\n            \n            // Foot\n            translate([0, 0, -55])\n            cube([12, 8, 5], center = true);\n        }\n        \n        // Joint clearance\n        translate([0, 0, -0.5])\n        cylinder(h = 1, r = 4.5);\n    }\n    \n    // Right leg\n    translate([12, 0, 0])\n    difference() {\n        union() {\n            cylinder(h = 30, r = 6);\n            translate([0, 0, -30])\n            cylinder(h = 25, r = 5);\n            translate([0, 0, -55])\n            cube([12, 8, 5], center = true);\n        }\n        translate([0, 0, -0.5])\n        cylinder(h = 1, r = 4.5);\n    }\n}\n\nmodule chest_panel() {\n    // Central control panel\n    translate([0, 18, 30])\n    cube([20, 2, 15], center = true);\n    \n    // Panel details\n    for (i = [0:3]) {\n        translate([-7.5 + i*5, 19.5, 23 + i*3])\n        cylinder(h = 1, r = 1.5);\n    }\n}\n\nmodule back_thruster() {\n    // Main thruster housing\n    translate([0, -20, 35])\n    rotate([90, 0, 0])\n    cylinder(h = 15, r1 = 8, r2 = 6);\n    \n    // Thruster nozzles\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([5, -20, 35])\n        cylinder(h = 10, r = 2);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    sensor_array();\n    arms();\n    legs();\n    chest_panel();\n    back_thruster();\n}",
    "renders": true
  },
  {
    "household_item": "zephiron",
    "openscad_code": "// Zephiron - Realistic Style\n// A medium-complexity 3D printable model with recognizable zephiron features\n\n$fn = 36;\n\nmodule base() {\n    // Main cylindrical body\n    cylinder(h = 8, r = 22, center = true);\n    \n    // Base skirt for stability\n    translate([0, 0, -4.5])\n        cylinder(h = 2, r1 = 22, r2 = 24, center = false);\n}\n\nmodule wings() {\n    // Left wing\n    translate([-22, 0, 0])\n        rotate([0, 0, 90])\n        linear_extrude(height = 3)\n            polygon(points = [[0, 0], [0, 18], [12, 12], [15, 0]]);\n    \n    // Right wing\n    mirror([1, 0, 0])\n        translate([-22, 0, 0])\n            rotate([0, 0, 90])\n            linear_extrude(height = 3)\n                polygon(points = [[0, 0], [0, 18], [12, 12], [15, 0]]);\n}\n\nmodule engine() {\n    // Engine housing\n    cylinder(h = 12, r = 8, center = true);\n    \n    // Exhaust ports\n    for(i = [1:3]) {\n        rotate([0, 0, i * 120])\n            translate([6, 0, 0])\n                cylinder(h = 4, r = 2, center = true);\n    }\n    \n    // Engine nozzle\n    translate([0, 0, -7])\n        cylinder(h = 8, r1 = 8, r2 = 5, center = false);\n}\n\nmodule cockpit() {\n    // Cockpit dome\n    translate([0, 0, 10])\n        scale([1, 1.2, 1])\n            sphere(r = 12);\n    \n    // Pilot seat\n    translate([0, -5, 8])\n        cube([10, 4, 6], center = true);\n    \n    // Control panel\n    translate([0, -8.5, 12])\n        cube([16, 1, 8], center = true);\n}\n\nmodule weapon_system() {\n    // Left cannon\n    translate([-15, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 1.5, center = true);\n    \n    // Right cannon\n    mirror([1, 0, 0])\n        translate([-15, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 1.5, center = true);\n    \n    // Targeting sensor\n    translate([0, 12, 3])\n        sphere(r = 2);\n}\n\nmodule landing_gear() {\n    // Front strut\n    translate([0, 15, -6])\n        cylinder(h = 8, r = 1, center = false);\n    \n    // Rear struts\n    for(x = [-12, 12]) {\n        translate([x, -12, -6])\n            cylinder(h = 8, r = 1, center = false);\n    }\n    \n    // Landing pads\n    translate([0, 15, -10])\n        sphere(r = 2);\n    for(x = [-12, 12]) {\n        translate([x, -12, -10])\n            sphere(r = 2);\n    }\n}\n\nmodule antenna() {\n    // Main antenna\n    translate([0, 0, 18])\n        cylinder(h = 8, r = 0.5, center = false);\n    \n    // Antenna cross-bar\n    translate([0, 0, 22])\n        rotate([90, 0, 0])\n            cylinder(h = 6, r = 0.3, center = true);\n}\n\n// Assembly\nunion() {\n    // Main body assembly\n    base();\n    \n    // Wings\n    translate([0, 0, 0])\n        wings();\n    \n    // Engine\n    translate([0, 0, 0])\n        engine();\n    \n    // Cockpit\n    cockpit();\n    \n    // Weapons\n    weapon_system();\n    \n    // Landing gear\n    landing_gear();\n    \n    // Communications\n    antenna();\n}\n\n// Scale to fit 3D printer bed\nscale(0.8) children();",
    "renders": true
  },
  {
    "household_item": "aetheriel",
    "openscad_code": "// Aetheriel - Realistic medium-complexity guardian figurine\n// Wings, staff, robe with folds, floating crystal\n\n$fn = 48;\nbody_h = 55;\nwing_span = 90;\nstaff_len = 70;\n\nmodule head() {\n    // head with hood\n    translate([0,0,body_h-8])\n    union() {\n        sphere(8); // skull\n        \n        // hood\n        difference() {\n            translate([0,0,-3])\n                cylinder(h=15, r1=12, r2=9);\n            translate([0,0,-4])\n                cylinder(h=17, r1=11, r2=8);\n        }\n    }\n}\n\nmodule torso() {\n    // robed body\n    difference() {\n        union() {\n            // main torso\n            translate([0,0,body_h/2-2])\n                cylinder(h=body_h-6, r1=13, r2=10);\n                \n            // lower robe flare\n            translate([0,0,body_h/2-12])\n                cylinder(h=20, r1=10, r2=15);\n        }\n        \n        // hollow for printing\n        translate([0,0,body_h/2-2])\n            cylinder(h=body_h-5, r1=9, r2=7);\n    }\n    \n    // vertical robe folds\n    for(a = [0:30:150]) {\n        rotate([0,0,a])\n            translate([11,0,body_h/2-5])\n            cube([1.5,2,body_h-10], center=true);\n    }\n}\n\nmodule arms() {\n    // left arm holding staff\n    translate([-12,5,body_h-22])\n    rotate([0,10,0])\n    union() {\n        // upper arm\n        cylinder(h=12, r=3);\n        \n        // forearm\n        translate([0,0,12])\n        rotate([0,-20,0])\n            cylinder(h=15, r=2.5);\n    }\n    \n    // right arm\n    mirror([1,0,0])\n    translate([-12,5,body_h-22])\n    rotate([0,10,0])\n    union() {\n        cylinder(h=12, r=3);\n        translate([0,0,12])\n        rotate([0,-20,0])\n            cylinder(h=15, r=2.5);\n    }\n}\n\nmodule wings() {\n    module wing() {\n        linear_extrude(height=1.5, convexity=10)\n            polygon(points=[\n                [0,0], [5,12], [15,25], [30,35], [45,38], [60,35], [70,25], [75,15], [70,5], [60,0]\n            ]);\n    }\n    \n    // left wing\n    translate([0,5,body_h-18])\n    rotate([0,0,-20])\n    for(i=[0:5:30]) {\n        translate([i*0.8, i*1.2, 0])\n        rotate([0,0,i*0.5])\n            wing();\n    }\n    \n    // right wing\n    mirror([1,0,0])\n    translate([0,5,body_h-18])\n    rotate([0,0,20])\n    for(i=[0:5:30]) {\n        translate([i*0.8, i*1.2, 0])\n        rotate([0,0,-i*0.5])\n            wing();\n    }\n}\n\nmodule staff() {\n    // main shaft\n    translate([-25,15,body_h-25])\n    rotate([0,0,-15])\n    union() {\n        cylinder(h=staff_len, r=1.5);\n        \n        // top orb\n        translate([0,0,staff_len])\n            sphere(4);\n            \n        // crystal cage\n        difference() {\n            translate([0,0,staff_len-2])\n                sphere(6);\n            translate([0,0,staff_len-2])\n                sphere(5);\n        }\n        \n        // floating inner crystal\n        translate([0,0,staff_len-2])\n            rotate([45,45,0])\n                cube([4,4,7], center=true);\n                \n        // bottom ferrule\n        translate([0,0,0])\n            cylinder(h=4, r=2);\n    }\n}\n\nunion() {\n    head();\n    torso();\n    arms();\n    wings();\n    staff();\n}",
    "renders": true
  },
  {
    "household_item": "amarion",
    "openscad_code": "// Amarion (marionette puppet) - realistic style, medium complexity\n// Overall height ~80mm, designed for 3D printing (2mm walls, no overhangs)\n\n$fn = 36;  // Smooth curves\n\nmodule head() {\n    // Skull\n    difference() {\n        sphere(d = 18);\n        // Eye sockets\n        translate([-5, 7, 3]) sphere(d = 5);\n        translate([5, 7, 3]) sphere(d = 5);\n    }\n    \n    // Nose\n    translate([0, 6, -2]) scale([1, 1, 0.5]) sphere(d = 4);\n    \n    // Mouth\n    translate([0, 10, -7]) cube([8, 2, 2], center = true);\n}\n\nmodule torso() {\n    // Chest\n    difference() {\n        scale([1.2, 1, 1.8]) sphere(d = 20);\n        // Hollow center\n        scale([0.8, 0.6, 1.5]) sphere(d = 20);\n    }\n    \n    // Pelvis\n    translate([0, 0, -20]) difference() {\n        cube([15, 10, 10], center = true);\n        cube([11, 6, 12], center = true);  // Hollow\n    }\n}\n\nmodule arm(side = 1) {\n    // Shoulder joint\n    translate([side * 10, 0, 5]) sphere(d = 6);\n    \n    // Upper arm\n    translate([side * 15, 0, 0]) rotate([0, 0, side * -20]) {\n        cylinder(h = 15, d1 = 6, d2 = 4);\n        // Lower arm\n        translate([0, 0, 15]) rotate([0, 0, side * 30]) {\n            cylinder(h = 12, d1 = 4, d2 = 3);\n            // Hand\n            translate([0, 0, 12]) sphere(d = 5);\n        }\n    }\n}\n\nmodule leg(side = 1) {\n    // Hip joint\n    translate([side * 5, 0, -25]) sphere(d = 6);\n    \n    // Thigh\n    translate([side * 5, 0, -35]) rotate([side * 10, 0, 0]) {\n        cylinder(h = 18, d1 = 6, d2 = 4);\n        \n        // Shin\n        translate([0, 0, -18]) rotate([side * -15, 0, 0]) {\n            cylinder(h = 16, d1 = 4, d2 = 3);\n            \n            // Foot\n            translate([0, 0, -16]) {\n                cube([8, 10, 4], center = true);\n                translate([side * 2, 5, -2]) sphere(d = 3);  // Toe\n            }\n        }\n    }\n}\n\nmodule string_attachment(point) {\n    translate(point) {\n        // Small cylinder for string hole\n        cylinder(h = 3, d = 3);\n        translate([0, 0, -1]) cylinder(h = 5, d = 1.5, $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, 35]) head();\n    \n    // Neck\n    translate([0, 0, 25]) cylinder(h = 8, d = 6);\n    \n    // Torso\n    torso();\n    \n    // Limbs\n    arm(1);  // Right arm\n    arm(-1); // Left arm\n    \n    leg(1);  // Right leg\n    leg(-1); // Left leg\n    \n    // String attachment points\n    translate([0, 0, 40]) string_attachment([0, 0, 0]);  // Head\n    translate([10, 0, 5]) string_attachment([0, 0, 0]);  // Right hand\n    translate([-10, 0, 5]) string_attachment([0, 0, 0]); // Left hand\n    translate([5, 0, -50]) string_attachment([0, 0, 0]); // Right foot\n    translate([-5, 0, -50]) string_attachment([0, 0, 0]); // Left foot\n}",
    "renders": true
  },
  {
    "household_item": "astraelon",
    "openscad_code": "// Astraelon - realistic medium-complexity model\n// Approx 65 mm tall, printable without supports\n\n$fn = 36;  // Smooth curves\n\n// Overall scale\nmodule astraelon() {\n    difference() {\n        union() {\n            // Main body\n            body();\n            \n            // Wings\n            translate([0, 0, 35]) rotate([0, 0, 45]) wing();\n            translate([0, 0, 35]) rotate([0, 0, -45]) wing();\n            \n            // Tail\n            translate([0, -25, 25]) tail();\n            \n            // Head\n            translate([0, 20, 42]) head();\n        }\n        \n        // Eye sockets\n        translate([8, 22, 47]) rotate([0, 30, 0]) cylinder(h=15, r=4, $fn=16);\n        translate([-8, 22, 47]) rotate([0, -30, 0]) cylinder(h=15, r=4, $fn=16);\n        \n        // Mouth cavity\n        translate([0, 28, 40]) rotate([20, 0, 0]) cube([12, 8, 6], center=true);\n    }\n}\n\n// Main body\nmodule body() {\n    hull() {\n        translate([0, 0, 20]) sphere(d=30);\n        translate([0, 0, 35]) sphere(d=20);\n    }\n    \n    // Body ridges\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) \n            translate([12, 0, 28]) \n                scale([1, 0.3, 0.2]) \n                    sphere(d=10);\n    }\n}\n\n// Wing module\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing\n            translate([0, 0, 0]) \n                scale([1, 2.5, 0.15]) \n                    sphere(d=30);\n            \n            // Wing tip\n            translate([0, 35, 2]) \n                scale([0.7, 0.7, 0.3]) \n                    sphere(d=15);\n            \n            // Wing support\n            hull() {\n                translate([0, 0, -1]) sphere(d=8);\n                translate([0, 32, 1]) sphere(d=6);\n            }\n        }\n        \n        // Wing membrane holes\n        for(y = [10:10:30]) {\n            translate([0, y, 0]) \n                scale([0.8, 0.3, 0.5]) \n                    sphere(d=8);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    hull() {\n        translate([0, 0, 0]) sphere(d=12);\n        translate([0, -20, -5]) sphere(d=8);\n        translate([0, -30, -10]) sphere(d=4);\n    }\n    \n    // Tail fins\n    rotate([0, 0, 30]) \n        translate([0, -25, -5]) \n            scale([0.2, 1, 0.5]) \n                sphere(d=12);\n    rotate([0, 0, -30]) \n        translate([0, -25, -5]) \n            scale([0.2, 1, 0.5]) \n                sphere(d=12);\n}\n\n// Head module\nmodule head() {\n    union() {\n        // Main head\n        translate([0, 0, 0]) \n            scale([1, 1.2, 1]) \n                sphere(d=18);\n        \n        // Snout\n        hull() {\n            translate([0, 8, -2]) sphere(d=12);\n            translate([0, 15, -4]) sphere(d=8);\n        }\n        \n        // Horns\n        translate([6, 5, 6]) \n            rotate([10, 0, 20]) \n                cylinder(h=12, r1=3, r2=1);\n        translate([-6, 5, 6]) \n            rotate([10, 0, -20]) \n                cylinder(h=12, r1=3, r2=1);\n    }\n}\n\n// Create the model\nastraelon();",
    "renders": true
  },
  {
    "household_item": "caelithar",
    "openscad_code": "// Realistic Caelithar (Astrolabe) - Medium Complexity\n// 3D printable at ~80mm diameter\n\n$fn = 64;  // Smooth curves\n\n// Main parameters\ndiameter = 80;\nthickness = 4;\nring_width = 3;\narm_width = 4;\nsuspension_height = 15;\n\n// Mater (main outer ring)\nmodule mater() {\n    difference() {\n        // Outer ring\n        cylinder(h=thickness, d=diameter, center=true);\n        \n        // Inner cutout\n        translate([0,0,-1])\n            cylinder(h=thickness+2, d=diameter-ring_width*2, center=true);\n    }\n}\n\n// Rete (star map)\nmodule rete() {\n    rotate([90,0,0])\n    difference() {\n        // Main rete disc\n        cylinder(h=thickness-1, d=diameter-ring_width*4, center=true);\n        \n        // Central hole for axis\n        translate([0,0,-1])\n            cylinder(h=thickness+2, d=ring_width*3, center=true);\n        \n        // Star pointer cutouts\n        for (angle = [30:60:360]) {\n            rotate([0,0,angle])\n                translate([diameter/3, 0, -1])\n                    cube([diameter/6, ring_width, thickness+2], center=true);\n        }\n        \n        // Ecliptic circle\n        rotate([0,0,23.5])\n        translate([0,0,-1])\n            cylinder(h=thickness+2, d=diameter/2, center=true);\n    }\n}\n\n// Rule (measurement arm)\nmodule rule() {\n    rotate([90,0,0])\n    difference() {\n        // Main rule\n        translate([0,diameter/4,0])\n            cube([arm_width, diameter/2, thickness-1], center=true);\n        \n        // Graduation marks\n        for (i = [-4:4]) {\n            if (i != 0) {\n                translate([arm_width/2+1, i*diameter/10, -1])\n                    cube([1, 0.5, thickness+2]);\n            }\n        }\n    }\n}\n\n// Suspension handle\nmodule suspension() {\n    // Top ring\n    translate([0,diameter/2,0])\n        rotate([90,0,0])\n        difference() {\n            cylinder(h=ring_width, d=ring_width*6, center=true);\n            cylinder(h=ring_width+2, d=ring_width*4, center=true);\n        }\n    \n    // Support arms\n    for (side = [-1, 1]) {\n        translate([side*ring_width*2, diameter/2, 0])\n            rotate([0,0,side*30])\n                cube([ring_width, suspension_height, ring_width], center=true);\n    }\n}\n\n// Climate ring (altitude measurement)\nmodule climate_ring() {\n    rotate([0,0,90])\n    difference() {\n        // Main ring\n        cylinder(h=ring_width, d=diameter/1.5, center=true);\n        \n        // Inner opening\n        translate([0,0,-1])\n            cylinder(h=ring_width+2, d=diameter/1.5-ring_width*2, center=true);\n        \n        // Degree marks\n        for (angle = [0:15:360]) {\n            rotate([0,0,angle])\n                translate([diameter/3, 0, -1])\n                    cube([0.5, ring_width, ring_width+2], center=true);\n        }\n    }\n}\n\n// Central pin\nmodule pin() {\n    cylinder(h=thickness*3, d=ring_width*1.5, center=true);\n}\n\n// Assembly\nunion() {\n    // Base structure\n    color(\"goldenrod\")\n    mater();\n    \n    // Climate ring at 90 degrees\n    translate([0,0,thickness/2+ring_width/2])\n        color(\"burlywood\")\n        climate_ring();\n    \n    // Rete (rotating star map)\n    translate([0,0,thickness/2+1])\n        color(\"silver\")\n        rete();\n    \n    // Rule (rotating measurement arm)\n    translate([0,0,thickness/2+2])\n        color(\"darkgoldenrod\")\n        rule();\n    \n    // Central pivot pin\n    color(\"dimgray\")\n    pin();\n    \n    // Suspension system\n    color(\"goldenrod\")\n    suspension();\n}",
    "renders": true
  },
  {
    "household_item": "celestion",
    "openscad_code": "// Celestion loudspeaker – realistic, medium complexity\n// Outer dimensions ≈ 70 mm diameter, 55 mm depth\n\n// Overall scale factor – change this to resize the whole model\nscale_factor = 1;\n\n// Wall thickness for 3D-printing\nwall = 1.6;\n\n// Main driver basket\nmodule basket() {\n    // Central cone\n    difference() {\n        cylinder(h = 20 * scale_factor, r1 = 30 * scale_factor, r2 = 25 * scale_factor, $fn = 60);\n        // Remove back so it sits flush\n        translate([0, 0, -1])\n            cylinder(h = 22 * scale_factor, r1 = 31 * scale_factor, r2 = 26 * scale_factor, $fn = 60);\n    }\n\n    // Surround ring\n    translate([0, 0, 20 * scale_factor])\n        cylinder(h = 3 * scale_factor, r1 = 31 * scale_factor, r2 = 34 * scale_factor, $fn = 60);\n\n    // Basket ribs – 6 spokes\n    for (a = [0:60:359]) {\n        rotate([0, 0, a])\n            translate([0, 27 * scale_factor, 10 * scale_factor])\n                cube([4 * scale_factor, 8 * scale_factor, 20 * scale_factor], center = true);\n    }\n\n    // Outer rim\n    difference() {\n        cylinder(h = 10 * scale_factor, r = 35 * scale_factor, $fn = 60);\n        cylinder(h = 11 * scale_factor, r = 34 * scale_factor - wall, $fn = 60);\n    }\n}\n\n// Magnet assembly\nmodule magnet() {\n    // Back plate\n    translate([0, 0, -15 * scale_factor])\n        cylinder(h = 5 * scale_factor, r = 32 * scale_factor, $fn = 40);\n\n    // Magnet ring\n    translate([0, 0, -25 * scale_factor])\n        cylinder(h = 10 * scale_factor, r1 = 28 * scale_factor, r2 = 25 * scale_factor, $fn = 40);\n\n    // Pole piece\n    translate([0, 0, -35 * scale_factor])\n        cylinder(h = 10 * scale_factor, r = 15 * scale_factor, $fn = 40);\n}\n\n// Dust cap\nmodule dustcap() {\n    translate([0, 0, 20 * scale_factor])\n        sphere(d = 20 * scale_factor, $fn = 40);\n}\n\n// Screw holes for mounting\nmodule holes() {\n    for (a = [0:45:359]) {\n        rotate([0, 0, a])\n            translate([31 * scale_factor, 0, 5 * scale_factor])\n                rotate([90, 0, 0])\n                    cylinder(h = 12 * scale_factor, r = 2 * scale_factor, $fn = 12);\n    }\n}\n\n// Final assembly\ndifference() {\n    union() {\n        basket();\n        magnet();\n        dustcap();\n    }\n    holes();\n}",
    "renders": true
  },
  {
    "household_item": "divioneth",
    "openscad_code": "// Divioneth – a small, stylized, medium-complexity fantasy creature\n// 3D-print friendly (all faces printable without supports)\n\n$fn = 32;               // global roundness\n\nbody_h  = 28;\nbody_r  = 18;\nhead_h  = 22;\nhead_r  = 12;\near_len = 7;\near_w   = 2.5;\nleg_h   = 20;\nleg_r   = 3.5;\narm_len = 15;\narm_r   = 2.5;\ntail_len = 25;\ntail_r   = 3;\neye_r   = 3;\n\n// Main module\nmodule divioneth() {\n\n    // ---- BODY ----\n    union() {\n        translate([0, 0, leg_h])\n            cylinder(h = body_h, r1 = body_r, r2 = body_r * 0.9);\n\n        // ---- HEAD ----\n        translate([0, 0, leg_h + body_h + head_h / 2])\n            sphere(r = head_r);\n\n        // ---- EARS ----\n        for (side = [-1, 1]) {\n            translate([side * (head_r - ear_w), 0, leg_h + body_h + head_h])\n                rotate([0, -20 * side, 0])\n                    cylinder(h = ear_len, r1 = ear_w, r2 = ear_w * 0.6);\n        }\n\n        // ---- ARMS ----\n        arm_pos = body_r * 0.7;\n        for (side = [-1, 1]) {\n            translate([side * arm_pos, 0, leg_h + body_h * 0.6])\n                rotate([0, 0, 90 * side])\n                    cylinder(h = arm_len, r = arm_r);\n        }\n\n        // ---- LEGS ----\n        for (x = [-1, 1])\n            for (y = [-1, 1]) {\n                translate([x * leg_r * 1.2, y * leg_r * 1.2, leg_h / 2])\n                    cylinder(h = leg_h, r = leg_r);\n            }\n\n        // ---- TAIL ----\n        translate([0, -body_r * 0.8, leg_h + body_h * 0.3])\n            rotate([90, 0, 0])\n                cylinder(h = tail_len, r1 = tail_r, r2 = tail_r * 0.5);\n\n        // ---- EYES ----\n        eye_z = leg_h + body_h + head_h * 0.7;\n        eye_offset = head_r * 0.6;\n        for (side = [-1, 1]) {\n            translate([side * eye_offset, -head_r * 0.3, eye_z])\n                sphere(r = eye_r);\n            translate([side * eye_offset, -head_r * 0.3 - eye_r * 0.3, eye_z + eye_r * 0.2])\n                sphere(r = eye_r * 0.4);  // pupil\n        }\n\n        // ---- SIMPLE NOSE ----\n        translate([0, -head_r * 0.6, eye_z - eye_r])\n            sphere(r = eye_r * 0.6);\n    }\n}\n\n// Render the creature centered on the build plate\ndivioneth();",
    "renders": true
  },
  {
    "household_item": "elestreon",
    "openscad_code": "// OpenSCAD Elestreon (realistic medium complexity)\n// Approximate size: 80 mm long, 40 mm wide, 30 mm high\n// Overall scale factor\nscale_factor = 1;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body dimensions\nbody_l = 60 * scale_factor;\nbody_w = 35 * scale_factor;\nbody_h = 25 * scale_factor;\n\n// Tail dimensions\ntail_l = 20 * scale_factor;\ntail_w = 15 * scale_factor;\ntail_h = 10 * scale_factor;\n\n// Leg dimensions\nleg_d = 5 * scale_factor;\nleg_h = 15 * scale_factor;\nleg_spacing = 15 * scale_factor;\n\n// Head dimensions\nhead_r = 12 * scale_factor;\nneck_l = 10 * scale_factor;\nneck_w = 10 * scale_factor;\nneck_h = 8 * scale_factor;\n\n// Eye dimensions\neye_r = 3 * scale_factor;\n\n// Ear dimensions\near_base = 6 * scale_factor;\near_h = 10 * scale_factor;\near_t = 2 * scale_factor;\n\n// Tail segments\nsegments = 5;\n\nmodule body() {\n    difference() {\n        union() {\n            // Central torso\n            translate([0, 0, body_h/2])\n                cube([body_l, body_w, body_h], center=true);\n\n            // Rounded rear\n            translate([-body_l/2, 0, body_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h=body_w, r=body_h/2, center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_h/2])\n            cube([body_l - 2*wall, body_w - 2*wall, body_h - wall], center=true);\n    }\n}\n\nmodule tail() {\n    // Generate tail as series of decreasing cylinders\n    for (i = [0:segments-1]) {\n        assign(\n            t = i / (segments - 1),\n            r = tail_h/2 * (1 - t * 0.7),\n            len = tail_l / segments\n        )\n        translate([-body_l/2 - len * (i + 0.5), 0, tail_h/2 * (1 - t * 0.5)])\n            rotate([0, 15 * t, 0])\n                cylinder(h=len, r1=r, r2=r * 0.8, center=false);\n    }\n}\n\nmodule leg(pos_x, pos_y, side) {\n    // Upper leg\n    translate([pos_x, pos_y, leg_h/2])\n        cylinder(h=leg_h, r=leg_d/2, center=true);\n\n    // Foot\n    translate([pos_x, pos_y + side * leg_d/2, 0])\n        cube([leg_d*1.5, leg_d, wall], center=true);\n}\n\nmodule legs() {\n    // Front legs\n    leg(body_l/2 - 10, -leg_spacing/2, -1);\n    leg(body_l/2 - 10, leg_spacing/2, 1);\n\n    // Rear legs\n    leg(-body_l/2 + 10, -leg_spacing/2, -1);\n    leg(-body_l/2 + 10, leg_spacing/2, 1);\n}\n\nmodule head() {\n    // Neck\n    translate([body_l/2 + neck_l/2, 0, neck_h/2 + body_h/2 - neck_h/2])\n        cube([neck_l, neck_w, neck_h], center=true);\n\n    // Head sphere\n    translate([body_l/2 + neck_l + head_r - 2, 0, head_r/2 + body_h/2 - head_r/2])\n        sphere(r=head_r);\n\n    // Snout\n    translate([body_l/2 + neck_l + head_r + 5, 0, head_r/2 + body_h/2 - head_r/2])\n        scale([1.5, 1, 0.8])\n            sphere(r=head_r * 0.6);\n\n    // Eyes\n    translate([body_l/2 + neck_l + head_r + 2, -head_r/2 - 1, head_r/2 + body_h/2 - head_r/2 + 3])\n        sphere(r=eye_r);\n\n    translate([body_l/2 + neck_l + head_r + 2, head_r/2 + 1, head_r/2 + body_h/2 - head_r/2 + 3])\n        sphere(r=eye_r);\n\n    // Ears\n    translate([body_l/2 + neck_l + head_r - 3, -head_r/2 - 2, head_r + body_h/2 - head_r/2 + 3])\n        rotate([0, -20, 0])\n            cylinder(h=ear_h, r1=ear_base/2, r2=ear_t/2);\n\n    translate([body_l/2 + neck_l + head_r - 3, head_r/2 + 2, head_r + body_h/2 - head_r/2 + 3])\n        rotate([0, -20, 0])\n            cylinder(h=ear_h, r1=ear_base/2, r2=ear_t/2);\n}\n\n// Assembly\nunion() {\n    body();\n    tail();\n    legs();\n    head();\n}",
    "renders": true
  },
  {
    "household_item": "empyreth",
    "openscad_code": "// Empyreth - Realistic Style, Medium Complexity\n// A stylized fantasy lantern with flame element\n\n// Parameters for easy customization\nbase_d = 45;\nbase_h = 8;\npillar_h = 25;\npillar_d = 8;\nglobe_d = 35;\nglobe_h = 40;\nflame_h = 20;\nflame_d = 10;\nwall_t = 2;\n\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_h, d=base_d, $fn=64);\n        \n        // Recessed bottom\n        translate([0, 0, -0.1])\n            cylinder(h=base_h/2, d=base_d-4, $fn=64);\n            \n        // Ventilation holes\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([base_d/2-3, 0, base_h/2])\n                    rotate([90, 0, 0])\n                        cylinder(h=6, d=3, $fn=12);\n        }\n    }\n}\n\nmodule pillar() {\n    // Central support pillar\n    cylinder(h=pillar_h+base_h, d=pillar_d, $fn=32);\n    \n    // Decorative rings\n    for(pos=[base_h+5, base_h+15, base_h+23]) {\n        translate([0, 0, pos])\n            cylinder(h=2, d=pillar_d+4, $fn=32);\n    }\n}\n\nmodule globe() {\n    difference() {\n        // Main globe body\n        translate([0, 0, base_h+pillar_h])\n            cylinder(h=globe_h, d=globe_d, $fn=64);\n        \n        // Hollow interior\n        translate([0, 0, base_h+pillar_h-wall_t])\n            cylinder(h=globe_h-wall_t, d=globe_d-wall_t*2, $fn=64);\n            \n        // Window cutouts\n        for(i=[0:3]) {\n            rotate([0, 0, i*90+45])\n                translate([globe_d/2-wall_t, 0, base_h+pillar_h+globe_h/2])\n                    rotate([0, 90, 0])\n                        cube([globe_h-wall_t*2, 15, wall_t], center=true);\n        }\n    }\n    \n    // Top cap\n    translate([0, 0, base_h+pillar_h+globe_h])\n        cylinder(h=wall_t*2, d=globe_d+wall_t*2, $fn=64);\n}\n\nmodule flame() {\n    // Flame base\n    translate([0, 0, base_h+pillar_h])\n        sphere(d=flame_d, $fn=32);\n    \n    // Flame body\n    for(i=[0:4]) {\n        translate([0, 0, base_h+pillar_h+i*flame_h/5])\n            scale([1-i*0.15, 1-i*0.15, 1])\n                sphere(d=flame_d*(1-i*0.2), $fn=32);\n    }\n    \n    // Flame tip\n    translate([0, 0, base_h+pillar_h+flame_h])\n        sphere(d=flame_d*0.3, $fn=16);\n}\n\n// Assembly\nunion() {\n    base();\n    pillar();\n    globe();\n    flame();\n}",
    "renders": true
  },
  {
    "household_item": "galathon",
    "openscad_code": "// Realistic Galathon (Space Marine Grenade Launcher) - Medium Complexity\n// Modelled for 3D printing with no overhangs and proper wall thickness\n\n// Global parameters\n$fn = 32;\nbarrel_length = 40;\nbody_diameter = 25;\ngrip_length = 30;\noverall_length = 90;\n\nmodule main_body() {\n    // Central cylindrical body\n    difference() {\n        cylinder(h = 50, d = body_diameter, center = true);\n        // Hollow core for weight reduction\n        cylinder(h = 52, d = body_diameter - 8, center = true);\n    }\n    \n    // Front barrel shroud\n    translate([0, 0, 25])\n        cylinder(h = 15, d = body_diameter + 4);\n    \n    // Rear stock adapter\n    translate([0, 0, -30])\n        cylinder(h = 10, d = body_diameter + 2);\n}\n\nmodule barrel() {\n    // Main barrel tube\n    translate([0, 0, 35])\n        difference() {\n            cylinder(h = barrel_length, d = 12);\n            cylinder(h = barrel_length + 2, d = 8);\n        }\n    \n    // Muzzle brake with angled cuts\n    translate([0, 0, 35 + barrel_length])\n    difference() {\n        cylinder(h = 5, d = 14);\n        // Four angled vents\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([7, 0, 2.5])\n                rotate([0, 45, 0])\n                    cube([10, 3, 5], center = true);\n        }\n    }\n}\n\nmodule magazine_well() {\n    // Rectangular magazine housing\n    translate([body_diameter/2 - 2, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                cube([30, 15, 20], center = true);\n                cube([32, 12, 18], center = true);\n            }\n    \n    // Magazine release button\n    translate([body_diameter/2 + 13, 0, 5])\n        sphere(d = 4);\n}\n\nmodule pistol_grip() {\n    // Angled grip with ergonomic shaping\n    translate([0, -body_diameter/2 - 5, -20])\n    rotate([15, 0, 0])\n        difference() {\n            // Main grip shape\n            union() {\n                cube([12, 15, grip_length], center = true);\n                // Grip extension\n                translate([0, 0, -grip_length/2 - 5])\n                    cube([12, 15, 10], center = true);\n            }\n            \n            // Finger grooves\n            for (i = [0:2]) {\n                translate([0, 8 - i*3, -10 + i*8])\n                    rotate([90, 0, 0])\n                        cylinder(h = 15, d = 8);\n            }\n            \n            // Hollow grip for weight\n            cube([8, 11, grip_length - 4], center = true);\n        }\n}\n\nmodule trigger_guard() {\n    // Protective trigger guard\n    translate([0, -body_diameter/2 - 2, -10])\n        difference() {\n            // Outer guard\n            rotate([90, 0, 0])\n                cylinder(h = 20, d = 6);\n            // Inner opening\n            rotate([90, 0, 0])\n                cylinder(h = 22, d = 4);\n        }\n}\n\nmodule sights() {\n    // Front post sight\n    translate([0, 0, 40 + barrel_length])\n        union() {\n            cube([2, 1, 5], center = true);\n            cylinder(h = 3, d = 4);\n        }\n    \n    // Rear aperture sight\n    translate([0, 0, -35])\n        difference() {\n            cube([8, 3, 6], center = true);\n            cylinder(h = 4, d = 3);\n        }\n}\n\nmodule carrying_handle() {\n    // Top carry handle\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            difference() {\n                // Handle bridge\n                union() {\n                    cube([30, 8, 4], center = true);\n                    translate([0, 0, 10])\n                        cube([20, 6, 3], center = true);\n                }\n                // Grip opening\n                cube([25, 6, 10], center = true);\n            }\n}\n\n// Assembly\nunion() {\n    main_body();\n    barrel();\n    magazine_well();\n    pistol_grip();\n    trigger_guard();\n    sights();\n    carrying_handle();\n}",
    "renders": true
  },
  {
    "household_item": "helioneth",
    "openscad_code": "// Helioneth (fictional energy collector device)\n// Medium-complexity realistic style\n\n// Overall dimensions\nbody_d = 30;\nbody_h = 12;\nwing_span = 70;\nstem_len = 40;\nbase_d = 25;\n\n// Wall thickness for printability\nwall = 1.2;\n\nmodule central_hub() {\n    difference() {\n        // Main body cylinder\n        cylinder(h=body_h, d=body_d, $fn=48);\n        \n        // Hollow center\n        translate([0,0,wall])\n            cylinder(h=body_h-wall*2, d=body_d-wall*2, $fn=48);\n        \n        // Top cavity for electronics\n        translate([0,0,body_h-wall])\n            cylinder(h=wall, d=body_d-wall*4, $fn=32);\n            \n        // Ventilation holes\n        for(i=[0:5:359]) {\n            rotate([0,0,i])\n                translate([body_d/2-wall/2, 0, wall])\n                    rotate([0,90,0])\n                        cylinder(h=wall*2, d=2, $fn=8);\n        }\n    }\n}\n\nmodule wing() {\n    difference() {\n        // Wing blade\n        linear_extrude(height=1.5) {\n            polygon(points=[\n                [0,0],\n                [wing_span/2-5, 0],\n                [wing_span/2, 8],\n                [wing_span/2-8, 12],\n                [wing_span/2-15, 14],\n                [0, 15]\n            ]);\n        }\n        \n        // Lightening holes\n        translate([wing_span/4, 5, -0.1])\n            cylinder(h=2, d=3, $fn=16);\n        translate([wing_span/4+8, 8, -0.1])\n            cylinder(h=2, d=2, $fn=12);\n    }\n}\n\nmodule emitter_array() {\n    // Grid of emitters on underside\n    for(x=[-1:1]) {\n        for(y=[-1:1]) {\n            translate([x*8, y*8, -body_h/2-3])\n                cylinder(h=3, d=2, $fn=16);\n        }\n    }\n}\n\nmodule stem() {\n    // Main support column\n    difference() {\n        cylinder(h=stem_len, d=8, $fn=32);\n        translate([0,0,wall])\n            cylinder(h=stem_len-wall*2, d=8-wall*2, $fn=32);\n    }\n    \n    // Reinforcement rings\n    for(h=[stem_len/3, stem_len*2/3]) {\n        translate([0,0,h])\n            cylinder(h=2, d=10, $fn=32);\n    }\n}\n\nmodule base() {\n    difference() {\n        // Base disc\n        cylinder(h=5, d=base_d, $fn=64);\n        \n        // Hollow underside\n        translate([0,0,wall])\n            cylinder(h=5-wall, d=base_d-wall*2, $fn=64);\n            \n        // Cable channel\n        translate([base_d/2-wall/2, 0, 0])\n            rotate([0,90,0])\n                cylinder(h=base_d, d=wall*2, $fn=16);\n                \n        // Mounting holes\n        for(a=[0:120:359]) {\n            rotate([0,0,a])\n                translate([base_d/2-5, 0, -0.1])\n                    cylinder(h=6, d=3.2, $fn=12);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Stem\n    translate([0,0,5])\n        stem();\n    \n    // Hub at top\n    translate([0,0,5+stem_len])\n        central_hub();\n    \n    // Wings\n    for(i=[0:60:359]) {\n        rotate([0,0,i])\n            translate([0,0,5+stem_len+body_h/2-0.75])\n                wing();\n    }\n    \n    // Emitters\n    translate([0,0,5+stem_len])\n        emitter_array();\n}",
    "renders": true
  },
  {
    "household_item": "ireth",
    "openscad_code": "// IRETH – realistic, medium-complexity OpenSCAD model\n// Overall height ~75 mm, 1.6 mm wall thickness everywhere\n// All parts fused into one solid, no overhangs > 45°\n\n$fn = 36;                // smooth curves\nwall = 1.6;              // 3D-printable wall thickness\nscrew_d = 2.4;           // M2 screw clearance\nscrew_h = 5;\nscale_factor = 0.9;\n\nmodule main_body() {\n    // central cylinder with rounded top\n    difference() {\n        union() {\n            cylinder(h = 30, d1 = 18, d2 = 14);\n            translate([0,0,30]) sphere(d = 14);\n        }\n        // hollow core\n        translate([0,0,-1]) cylinder(h = 32, d = 18 - 2*wall);\n        translate([0,0,30]) sphere(d = 14 - 2*wall);\n    }\n}\n\nmodule top_ring() {\n    // decorative ring on top\n    difference() {\n        cylinder(h = 4, d = 20);\n        cylinder(h = 5, d = 20 - 2*wall);\n    }\n}\n\nmodule blades() {\n    // three curved blades sweeping around\n    for (a = [0:120:359])\n        rotate([0,0,a])\n            translate([8,0,15])\n                rotate([0,90,0])\n                    linear_extrude(height = 20, scale = scale_factor)\n                        difference() {\n                            // blade outline\n                            polygon(points = [\n                                [0,0], [10,0], [6,4], [0,4], [0,0]\n                            ]);\n                            // internal cutout\n                            offset(r = -wall)\n                                polygon(points = [\n                                    [0,0], [10,0], [6,4], [0,4], [0,0]\n                                ]);\n                        };\n}\n\nmodule base_flange() {\n    // mounting flange with 3 screw holes\n    difference() {\n        cylinder(h = 5, d = 30);\n        // hollow\n        cylinder(h = 6, d = 30 - 2*wall);\n        // screw holes\n        for (a = [0:120:359])\n            rotate([0,0,a])\n                translate([11,0,-1])\n                    cylinder(h = 7, d = screw_d);\n    }\n}\n\nmodule vent_slots() {\n    // vertical cooling slots around body\n    for (a = [15:30:359])\n        rotate([0,0,a])\n            translate([8.5,0,10])\n                cube([4, wall, 18], center = true);\n}\n\n// final assembly\nunion() {\n    base_flange();\n    translate([0,0,5]) main_body();\n    translate([0,0,33]) top_ring();\n    blades();\n    difference() {\n        translate([0,0,5]) main_body();\n        vent_slots();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "lunarethar",
    "openscad_code": "// Lunar Lander (Lunarethar) - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm height, 60mm width\n\n$fn = 32;  // Smooth curves for printing\nwall_thickness = 1.5;\n\nmodule main_body() {\n    // Central octagonal body\n    difference() {\n        cylinder(h = 30, r1 = 25, r2 = 22, center = true);\n        translate([0,0,15-wall_thickness]) \n            cylinder(h = 30.1, r1 = 23.5, r2 = 20.5, center = true);\n    }\n}\n\nmodule landing_legs() {\n    // 4 landing legs with shock absorbers\n    for (i = [0:90:270]) {\n        rotate([0,0,i])\n        translate([20,0,-15]) {\n            // Upper strut\n            rotate([0,15,0])\n            cylinder(h = 25, r = 2, center = true);\n            \n            // Lower foot\n            translate([0,0,-12.5])\n            rotate([0,15,0])\n            difference() {\n                cylinder(h = 8, r = 5, center = true);\n                translate([0,0,4])\n                sphere(r = 4.5);\n            }\n            \n            // Shock absorber\n            translate([0,0,-6])\n            rotate([0,15,0])\n            cylinder(h = 5, r = 1.5, center = true);\n        }\n    }\n}\n\nmodule thruster_cluster() {\n    // Main descent engine cluster\n    difference() {\n        // Engine bell\n        cylinder(h = 18, r1 = 6, r2 = 12, center = true);\n        translate([0,0,9])\n        cylinder(h = 2, r = 5.5, center = true);\n    }\n    \n    // Small RCS thrusters\n    for (j = [45:90:315]) {\n        rotate([0,0,j])\n        translate([18,0,-12])\n        rotate([30,0,0])\n        cylinder(h = 8, r1 = 2, r2 = 1, center = true);\n    }\n}\n\nmodule fuel_tanks() {\n    // Side spherical fuel tanks\n    for (k = [-1:2:1]) {\n        translate([k * 30, 0, 5])\n        sphere(r = 10);\n    }\n}\n\nmodule antenna() {\n    // High-gain parabolic antenna\n    translate([0, 0, 20])\n    difference() {\n        sphere(r = 8);\n        translate([0,0,-8])\n        sphere(r = 7.5);\n    }\n    \n    // Antenna mast\n    translate([0,0,28])\n    cylinder(h = 15, r = 1, center = true);\n}\n\nmodule windows() {\n    // Forward windows\n    translate([0, 25, 5])\n    rotate([90,0,0])\n    cylinder(h = 1, r = 8, center = true);\n    \n    translate([0, -25, 5])\n    rotate([90,0,0])\n    cylinder(h = 1, r = 8, center = true);\n}\n\nmodule ladder() {\n    // Side ladder for EVA access\n    translate([25, -8, -10])\n    for (step = [0:5:25]) {\n        translate([0,0,step])\n        cube([1, 16, 0.5], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    main_body();\n    landing_legs();\n    thruster_cluster();\n    fuel_tanks();\n    antenna();\n    windows();\n    ladder();\n}",
    "renders": true
  },
  {
    "household_item": "nebulor",
    "openscad_code": "// Realistic-style Nebulor (medium complexity)\n// Approx. 90 mm long, designed for FDM printing (no steep overhangs)\n\n$fn = 36;\n\nmodule nebulor_body() {\n    // Main ellipsoidal core\n    scale([1, 1.2, 0.8])\n        sphere(d = 50);\n\n    // Forward nacelle bridge\n    translate([0, 0, -15])\n        cylinder(d1 = 35, d2 = 25, h = 10);\n\n    // Rear thruster ring\n    translate([0, 0, 25])\n        cylinder(d1 = 30, d2 = 35, h = 8);\n}\n\nmodule thruster_ports() {\n    for (a = [0 : 120 : 240])\n        rotate([0, 0, a])\n            translate([12, 0, 29])\n                cylinder(h = 6, d = 6, $fn = 8);\n}\n\nmodule sensor_tower() {\n    // Base\n    translate([-15, 0, -10])\n        cylinder(h = 8, d = 12);\n\n    // Mast\n    translate([-15, 0, -2])\n        cylinder(h = 22, d = 4);\n\n    // Dish\n    translate([-15, 0, 20])\n        sphere(d = 10);\n}\n\nmodule wing() {\n    // Root\n    translate([0, 0, 0])\n        cube([5, 25, 3], center = true);\n\n    // Tapered panel\n    translate([0, 15, 0])\n        scale([1, 0.6, 1])\n            cube([5, 20, 2], center = true);\n\n    // Tip stabilizer\n    translate([0, 30, 0])\n        cube([3, 5, 8], center = true);\n}\n\nmodule wings_pair() {\n    // Port wing\n    translate([18, 0, 0])\n        rotate([0, 0, 0])\n            wing();\n\n    // Starboard wing (mirrored)\n    translate([18, 0, 0])\n        mirror([0, 1, 0])\n            wing();\n}\n\nmodule engine_pod() {\n    // Casing\n    cylinder(h = 20, d = 10);\n\n    // Exhaust nozzle\n    translate([0, 0, 10])\n        cylinder(h = 8, d1 = 10, d2 = 6);\n\n    // Mount strut\n    translate([0, 0, 10])\n        rotate([90, 0, 0])\n            cube([4, 4, 12], center = true);\n}\n\nmodule engines_pair() {\n    // Left engine\n    translate([-20, 20, 0])\n        engine_pod();\n\n    // Right engine\n    translate([-20, -20, 0])\n        engine_pod();\n}\n\nmodule cockpit() {\n    // Canopy\n    translate([0, 0, -18])\n        scale([1, 1.2, 0.6])\n            sphere(d = 15);\n\n    // Frame ridge\n    difference() {\n        translate([0, 0, -18])\n            cylinder(h = 2, d = 20);\n        translate([0, 0, -17])\n            cylinder(h = 4, d = 18);\n    }\n}\n\n// Assembly\nunion() {\n    nebulor_body();\n    thruster_ports();\n    sensor_tower();\n    wings_pair();\n    engines_pair();\n    cockpit();\n}",
    "renders": true
  },
  {
    "household_item": "orioneth",
    "openscad_code": "// Orioneth – medium-complexity realistic 3-D printable model\n// Length ≈ 80 mm (bow to stern), height ≈ 55 mm (keel to top of mast)\n\nmodule print_raft()\n{\n    // thin raft to guarantee adhesion and avoid elephant-foot\n    translate([-5,-5,-0.2]) cube([90,20,0.2]);\n}\nprint_raft();\n\n// ---------- Hull ----------\nmodule hull()\n{\n    difference()\n    {\n        // main hull body – slightly tapered bow/stern\n        hull_profile();\n        \n        // cut out the cockpit\n        translate([30,-5,5]) cube([25,10,25]);\n        \n        // small drain slot under bow\n        translate([5,0,-2]) cube([5,2,3]);\n    }\n}\n\nmodule hull_profile()\n{\n    // multi-section loft with cylinders\n    hull_section(0, 8, 25, 0);\n    hull_section(20, 10, 25, 2);\n    hull_section(40, 12, 25, 6);\n    hull_section(60, 10, 20, 4);\n    hull_section(80, 7, 15, 0);\n}\n\nmodule hull_section(x, w, h, z)\n{\n    translate([x,0,z])\n        scale([1, 0.6, 1])\n            cylinder(h=2, d=w, $fn=32);\n}\n\n// ---------- Keel and Rudder ----------\nmodule keel()\n{\n    translate([75,0,-12])\n        rotate([0,0,0])\n            difference()\n            {\n                // fin keel\n                linear_extrude(height=24, center=true, convexity=10)\n                    polygon(points=[[0,0],[5,0],[2.5,-12]]);\n                // taper trailing edge\n                translate([2.5,-12,0]) cylinder(h=24, d=1.5, $fn=8);\n            }\n}\n\n// ---------- Mast and Rigging ----------\nmodule mast()\n{\n    // mast\n    translate([45,0,30])\n        cylinder(h=25, d=2, $fn=16);\n    \n    // boom\n    translate([45,0,42])\n        rotate([90,0,0])\n            cylinder(h=25, d=1.5, $fn=16);\n    \n    // small pulley block at mast head\n    translate([45,0,55])\n        sphere(d=3, $fn=16);\n}\n\n// ---------- Deck Details ----------\nmodule deck()\n{\n    // coaming ring\n    translate([42.5,0,5])\n        rotate_extrude(angle=360, $fn=64)\n            translate([12.5,0,0]) circle(d=2);\n    \n    // cleat forward\n    translate([15,0,5])\n        cube([4,2,2]);\n    \n    // cleat aft\n    translate([65,0,5])\n        cube([4,2,2]);\n}\n\n// ---------- Final Assembly ----------\nunion()\n{\n    hull();\n    keel();\n    mast();\n    deck();\n}",
    "renders": true
  },
  {
    "household_item": "pyrelar",
    "openscad_code": "// Realistic medium-complexity pyrelar (pencil sharpener)\n// Overall height ~70 mm, base 40 mm diameter\n\n// Parameters\n$fn = 36;\nbase_d = 40;\nbase_h = 15;\ncone_h = 35;\nblade_w = 8;\nblade_h = 25;\nblade_th = 1.5;\nshavings_hole_d = 10;\ngrip_r = 22;\ngrip_h = 12;\n\n// Main body\nmodule body() {\n    union() {\n        // Outer cone\n        cylinder(h = cone_h, r1 = base_d/2, r2 = 3);\n\n        // Base collar\n        translate([0, 0, cone_h])\n            cylinder(h = base_h, r = base_d/2);\n\n        // Grip ring\n        translate([0, 0, cone_h + base_h/2 - grip_h/2])\n            difference() {\n                cylinder(h = grip_h, r = grip_r);\n                cylinder(h = grip_h + 0.2, r = grip_r - 2);\n            }\n    }\n}\n\n// Internal sharpening cone\nmodule inner_cone() {\n    translate([0, 0, 5])\n        cylinder(h = cone_h + base_h - 10, r1 = base_d/2 - 3, r2 = 2);\n}\n\n// Blade assembly\nmodule blade() {\n    // Mount plate\n    translate([base_d/2 - blade_w/2, 0, cone_h/2 + 2])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = blade_w, r = blade_h/2 + 2);\n            // Screw holes\n            translate([0,  blade_h/4, -blade_w/2 - 0.1])\n                cube([2, 2, blade_w + 0.2], center = true);\n            translate([0, -blade_h/4, -blade_w/2 - 0.1])\n                cube([2, 2, blade_w + 0.2], center = true);\n        }\n\n    // Blade\n    translate([base_d/2 - blade_w/2 - 0.5, 0, cone_h/2 + 2])\n        rotate([0, 90, 10])\n        cube([blade_th, blade_h, blade_w], center = true);\n}\n\n// Shavings exit slot\nmodule shavings_slot() {\n    translate([0, 0, base_h/2 + 2])\n        rotate([90, 0, 0])\n        cylinder(h = base_d, d = shavings_hole_d);\n}\n\n// Full assembly\ndifference() {\n    body();\n    inner_cone();\n    shavings_slot();\n}\nblade();",
    "renders": true
  },
  {
    "household_item": "quintarion",
    "openscad_code": "// Quintarion – realistic, medium-complexity model\n// Overall footprint ≈ 70 mm\n// Designed for 3D printing: no steep overhangs, 1.2 mm walls\n\n$fn = 32; // smooth cylinders & spheres\n\n// Wall thickness constant\nwall = 1.2;\n\n// Main body: 5-sided regular pentagonal prism\nmodule body() {\n    // Outer pentagon\n    linear_extrude(height = 30, center = true, convexity = 10)\n        circle(r = 30, $fn = 5);\n    \n    // Hollow interior\n    difference() {\n        linear_extrude(height = 30, center = true, convexity = 10)\n            circle(r = 30 - wall, $fn = 5);\n        // Bottom opening\n        translate([0, 0, -15 - 0.1])\n            cube([60, 60, 0.2], center = true);\n    }\n}\n\n// Top cap with 5 radial vents\nmodule cap() {\n    difference() {\n        // Solid pentagon\n        linear_extrude(height = 4, center = true, convexity = 10)\n            circle(r = 30, $fn = 5);\n        // Vent holes (5 × 15° wedges)\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([15, 0, 0])\n                    rotate([0, 0, 7.5])\n                        cube([25, 10, 5], center = true);\n        }\n        // Hollow center\n        cylinder(h = 5, r = 10, center = true);\n    }\n}\n\n// Five equidistant nozzles\nmodule nozzle(idx) {\n    angle = idx * 72;\n    translate([30 * cos(angle), 30 * sin(angle), 0])\n        rotate([0, 0, angle])\n            rotate([90, 0, 0]) {\n                // Main tube\n                difference() {\n                    cylinder(h = 20, r = 5);\n                    cylinder(h = 21, r = 5 - wall);\n                }\n                // End flare\n                translate([0, 0, 20])\n                    difference() {\n                        cylinder(h = 3, r1 = 5, r2 = 7);\n                        cylinder(h = 4, r1 = 5 - wall, r2 = 7 - wall);\n                    }\n            }\n}\n\n// Central inlet pipe\nmodule inlet() {\n    difference() {\n        cylinder(h = 25, r = 10);\n        cylinder(h = 26, r = 10 - wall);\n    }\n    translate([0, 0, 25])\n        difference() {\n            cylinder(h = 5, r1 = 10, r2 = 12);\n            cylinder(h = 6, r1 = 10 - wall, r2 = 12 - wall);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([0, 0, 17])\n        cap();\n    for (i = [0:4])\n        nozzle(i);\n    translate([0, 0, -15])\n        inlet();\n}",
    "renders": true
  },
  {
    "household_item": "sidereth",
    "openscad_code": "// Sidereth - Realistic Medium Complexity\n// A sidereth is a traditional blacksmith's tool (tongs) for handling hot metal\n\n// Parameters\nhandle_length = 70;\nhandle_diameter = 8;\njaw_length = 45;\njaw_width = 15;\njaw_thickness = 8;\npivot_diameter = 10;\npivot_height = 4;\nrivet_diameter = 4;\nrivet_head_diameter = 7;\nrivet_head_height = 2;\ngrip_depth = 3;\ngrip_spacing = 5;\n\n// Module for one handle with ergonomic grip\nmodule handle() {\n    // Main handle shaft\n    cylinder(h=handle_length, d=handle_diameter, $fn=20);\n    \n    // Ergonomic grip rings\n    for(i = [1:5]) {\n        translate([0, 0, i * grip_spacing])\n            difference() {\n                cylinder(h=grip_depth, d=handle_diameter+2, $fn=20);\n                cylinder(h=grip_depth+0.1, d=handle_diameter-1, $fn=20);\n            }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n        sphere(d=handle_diameter+1, $fn=20);\n}\n\n// Module for jaw with realistic teeth\nmodule jaw() {\n    // Main jaw body\n    translate([-jaw_width/2, 0, 0])\n        cube([jaw_width, jaw_thickness, jaw_length]);\n    \n    // Curved gripping surface with teeth\n    translate([0, jaw_thickness/2, jaw_length/2])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=jaw_width, d=jaw_thickness, $fn=20);\n                \n                // Cut teeth pattern\n                for(i = [0:5]) {\n                    translate([0, -jaw_thickness/2, i*2.5 - 6.25])\n                        cube([jaw_width+1, jaw_thickness, 1]);\n                }\n            }\n}\n\n// Module for pivot assembly\nmodule pivot() {\n    // Main pivot cylinder\n    cylinder(h=pivot_height, d=pivot_diameter, $fn=32);\n    \n    // Rivet head - top\n    translate([0, 0, pivot_height])\n        cylinder(h=rivet_head_height, d=rivet_head_diameter, $fn=20);\n    \n    // Rivet head - bottom\n    translate([0, 0, -rivet_head_height])\n        cylinder(h=rivet_head_height, d=rivet_head_diameter, $fn=20);\n}\n\n// Module for one complete arm (handle + jaw)\nmodule arm() {\n    union() {\n        // Handle\n        translate([0, 0, -handle_length/2])\n            handle();\n        \n        // Transition piece\n        translate([0, 0, handle_length/2 + 5])\n            cylinder(h=10, d1=handle_diameter, d2=jaw_thickness, $fn=20);\n        \n        // Jaw\n        translate([0, 0, handle_length/2 + 15])\n            rotate([90, 0, 0])\n                jaw();\n    }\n}\n\n// Complete sidereth assembly\nunion() {\n    // First arm\n    arm();\n    \n    // Second arm (mirrored and rotated)\n    rotate([0, 180, 0])\n        arm();\n    \n    // Pivot at intersection\n    translate([0, 0, handle_length/2 + 15])\n        pivot();\n}",
    "renders": true
  },
  {
    "household_item": "solitharion",
    "openscad_code": "// Solitharion - medieval finger ring sundial / compass\n// Medium-complexity realistic style, 3D-printable\n// Overall size ≈ 70 mm × 55 mm × 12 mm\n\n$fa = 1;\n$fs = 0.5;\n\nmodule ring(r_outer, r_inner, h) {\n    difference() {\n        cylinder(h = h, r = r_outer, center = true);\n        cylinder(h = h + 0.2, r = r_inner, center = true);\n    }\n}\n\nmodule hinge_pin(r, h) {\n    cylinder(h = h, r = r, center = true);\n}\n\nmodule gnomon(r, h) {\n    translate([0, -r/2, h/2])\n    rotate([90, 0, 0])\n    cylinder(h = r*0.8, r = r/2, center = false);\n}\n\nmodule hour_mark(r_outer, thickness, angle) {\n    rotate([0, 0, angle])\n    translate([r_outer - thickness/2, 0, 0])\n    cube([thickness, 2, 1], center = true);\n}\n\ndifference() {\n    // Main ring body\n    union() {\n        // Outer ring\n        ring(r_outer = 35, r_inner = 28, h = 10);\n        \n        // Hinge base for lid\n        translate([0, 0, 5])\n        cube([20, 8, 2], center = true);\n        \n        // Lid plate\n        translate([0, 0, 11])\n        cube([20, 8, 1], center = true);\n        \n        // Hinge pin\n        translate([-10, 0, 5.5])\n        rotate([90, 0, 0])\n        hinge_pin(r = 2, h = 4);\n        \n        // Interior recess for compass needle\n        translate([0, 0, 5])\n        cylinder(h = 2, r = 15, center = true);\n    }\n    \n    // Central hole for finger\n    translate([0, 0, 5])\n    cylinder(h = 15, r = 22, center = true);\n    \n    // Hour mark slots\n    for (i = [0:11]) {\n        hour_mark(r_outer = 34, thickness = 1.5, angle = i * 30);\n    }\n    \n    // Gnomon slot on lid\n    translate([0, 0, 11.5])\n    cube([3, 3, 2], center = true);\n    \n    // Compass needle recess\n    translate([0, 0, 5])\n    cylinder(h = 3, r = 12, center = true);\n}\n\n// Gnomon peg\ntranslate([0, 0, 12.5])\ngnomon(r = 3, h = 8);\n\n// Compass needle (flat)\ntranslate([0, 0, 5.5])\nrotate([0, 0, 45])\ncube([22, 2, 0.5], center = true);\n\n// Cardinal marks\ntranslate([12, 0, 5.5])\nrotate([0, 0, 0])\n    cube([2, 0.5, 0.5], center = true);\ntranslate([-12, 0, 5.5])\nrotate([0, 0, 0])\n    cube([2, 0.5, 0.5], center = true);\ntranslate([0, 12, 5.5])\nrotate([0, 0, 90])\n    cube([2, 0.5, 0.5], center = true);\ntranslate([0, -12, 5.5])\nrotate([0, 0, 90])\n    cube([2, 0.5, 0.5], center = true);",
    "renders": true
  },
  {
    "household_item": "stellarethon",
    "openscad_code": "// Stellarethon - Realistic style, medium complexity\n// A stellarethon is a 12-pointed star polyhedron (stellated dodecahedron)\n\n// Overall dimensions - target ~70mm diameter\noverall_scale = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Pentagon side length\npentagon_side = 10;\n\n// Create one pentagonal pyramid\nmodule pentagonal_pyramid(height) {\n    // Pentagon base\n    pentagon_points = [\n        [0, 10, 0],\n        [9.51, 3.09, 0],\n        [5.88, -8.09, 0],\n        [-5.88, -8.09, 0],\n        [-9.51, 3.09, 0]\n    ];\n    \n    // Create hollow pentagon base\n    difference() {\n        // Outer pentagon\n        linear_extrude(height = wall_thickness) {\n            polygon(points = pentagon_points);\n        }\n        \n        // Inner pentagon (hollow)\n        translate([0, 0, -0.1]) {\n            scale([0.7, 0.7, 1]) {\n                linear_extrude(height = wall_thickness + 0.2) {\n                    polygon(points = pentagon_points);\n                }\n            }\n        }\n    }\n    \n    // Create pyramid faces\n    for (i = [0:4]) {\n        j = (i + 1) % 5;\n        // Triangle face\n        hull() {\n            translate([pentagon_points[i][0], pentagon_points[i][1], 0]) \n                cylinder(h = wall_thickness, r = wall_thickness/2, $fn = 8);\n            translate([pentagon_points[j][0], pentagon_points[j][1], 0]) \n                cylinder(h = wall_thickness, r = wall_thickness/2, $fn = 8);\n            translate([0, 0, height]) \n                cylinder(h = wall_thickness, r = wall_thickness/2, $fn = 8);\n        }\n    }\n}\n\n// Create the complete stellarethon\nmodule stellarethon() {\n    // Golden ratio\n    phi = (1 + sqrt(5)) / 2;\n    \n    // Scale factor for stellation\n    stellation_height = 15;\n    \n    // Create 12 pentagonal pyramids\n    // Top pyramid\n    translate([0, 0, stellation_height/2])\n        rotate([0, 0, 0])\n        pentagonal_pyramid(stellation_height);\n    \n    // Bottom pyramid\n    translate([0, 0, -stellation_height/2])\n        rotate([180, 0, 0])\n        pentagonal_pyramid(stellation_height);\n    \n    // 5 pyramids around top\n    for (i = [0:4]) {\n        angle = i * 72;\n        rotate([0, 0, angle]) {\n            rotate([atan(1/phi), 0, 0]) {\n                translate([0, 0, stellation_height/2])\n                    pentagonal_pyramid(stellation_height);\n            }\n        }\n    }\n    \n    // 5 pyramids around bottom\n    for (i = [0:4]) {\n        angle = i * 72 + 36;\n        rotate([0, 0, angle]) {\n            rotate([180 - atan(1/phi), 0, 0]) {\n                translate([0, 0, -stellation_height/2])\n                    pentagonal_pyramid(stellation_height);\n            }\n        }\n    }\n    \n    // Central hollow dodecahedron core\n    difference() {\n        // Outer dodecahedron approximation\n        sphere(r = pentagon_side * 1.5, $fn = 30);\n        \n        // Inner hollow space\n        sphere(r = pentagon_side * 1.5 - wall_thickness, $fn = 30);\n    }\n}\n\n// Generate the final model\nscale(overall_scale / 70)\n    stellarethon();",
    "renders": true
  },
  {
    "household_item": "thalorioneth",
    "openscad_code": "// Thalorioneth - Medium Complexity Realistic Style\n// A biomechanical aquatic creature with cephalopod and crustacean features\n\n$fn = 36;\n\n// Main body parameters\nbody_length = 60;\nbody_diameter = 25;\nshell_thickness = 2;\n\n// Head parameters\nhead_radius = 12;\neye_diameter = 4;\n\n// Tentacle parameters\ntentacle_length = 30;\ntentacle_segments = 8;\ntentacle_diameter = 3;\n\n// Leg parameters\nleg_length = 20;\nleg_count = 6;\nleg_diameter = 2.5;\n\n// Shell segments\nshell_segments = 5;\n\n// Main module\nmodule thalorioneth() {\n    union() {\n        // Main body - armored cephalothorax\n        body();\n        \n        // Head with eyes\n        translate([body_length/2 - head_radius, 0, 0])\n            head();\n        \n        // Tentacles array\n        for (i = [0:tentacle_segments-1]) {\n            rotate([0, 0, i * 45])\n                translate([body_length/2 - 15, 0, -body_diameter/2])\n                    tentacle();\n        }\n        \n        // Crustacean legs\n        for (i = [0:leg_count-1]) {\n            rotate([0, 0, i * 60])\n                translate([-body_length/4, 0, 0])\n                    leg();\n        }\n    }\n}\n\n// Armored body with segmented shell\nmodule body() {\n    difference() {\n        // Main body\n        cylinder(h = body_length, d = body_diameter, center = true);\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cylinder(h = body_length + 2, d = body_diameter - 2*shell_thickness, center = true);\n        \n        // Shell segments\n        for (i = [0:shell_segments-1]) {\n            translate([-body_length/2 + i*(body_length/shell_segments) + 5, 0, body_diameter/2 + 2])\n                cube([8, body_diameter + 4, 6], center = true);\n        }\n    }\n}\n\n// Head with eyes and mandibles\nmodule head() {\n    union() {\n        // Main head sphere\n        sphere(r = head_radius);\n        \n        // Eyes\n        translate([head_radius - 2, 5, 3])\n            sphere(d = eye_diameter);\n        translate([head_radius - 2, -5, 3])\n            sphere(d = eye_diameter);\n        \n        // Mandibles\n        translate([head_radius - 3, 7, -3])\n            rotate([0, 30, 0])\n                cylinder(h = 8, d1 = 3, d2 = 1);\n        translate([head_radius - 3, -7, -3])\n            rotate([0, -30, 0])\n                cylinder(h = 8, d1 = 3, d2 = 1);\n    }\n}\n\n// Flexible tentacle with segments\nmodule tentacle() {\n    union() {\n        for (i = [0:3]) {\n            translate([0, 0, -i * tentacle_length/4])\n                rotate([i * 15, 0, 0])\n                    cylinder(h = tentacle_length/4, d = tentacle_diameter - i*0.5);\n        }\n        \n        // Suction cups\n        for (j = [0:2]) {\n            translate([0, tentacle_diameter/2, -j * 8])\n                rotate([0, 90, 0])\n                    cylinder(h = 1, d = 2);\n        }\n    }\n}\n\n// Articulated crustacean leg\nmodule leg() {\n    union() {\n        // Coxa\n        translate([0, 0, 0])\n            rotate([0, 0, 45])\n                cylinder(h = leg_length/3, d = leg_diameter);\n        \n        // Femur\n        translate([leg_length/4, leg_length/4, 0])\n            rotate([0, 0, 45])\n                cylinder(h = leg_length/3, d = leg_diameter * 0.8);\n        \n        // Tibia\n        translate([leg_length/2, leg_length/2, 0])\n            rotate([0, 0, 45])\n                cylinder(h = leg_length/3, d = leg_diameter * 0.6);\n        \n        // Claw\n        translate([leg_length * 0.8, leg_length * 0.8, 0])\n            difference() {\n                sphere(d = 4);\n                translate([2, 0, 0])\n                    sphere(d = 3.5);\n            }\n    }\n}\n\n// Generate the model\nthalorioneth();",
    "renders": true
  },
  {
    "household_item": "umbrioneth",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall size for 3D printing: ~80 mm tall\nscale(0.5) umbrioneth();\n\nmodule umbrioneth() {\n    // Central body\n    body();\n\n    // Head with faceplate\n    head();\n\n    // Four leg assemblies\n    for (a = [0, 90, 180, 270])\n        rotate([0, 0, a])\n            translate([0, 0, 10])\n                leg();\n\n    // Two rear stabilizer fins\n    for (a = [135, 225])\n        rotate([0, 0, a])\n            translate([0, 0, 15])\n                fin();\n}\n\nmodule body() {\n    difference() {\n        // Main rounded shell\n        hull() {\n            sphere(25);\n            translate([0, 0, 15]) sphere(22);\n        }\n\n        // Hexagonal vent array on top\n        for (r = [8, 16]) {\n            for (a = [0:60:300]) {\n                translate([r * cos(a), r * sin(a), 40])\n                    rotate([0, 0, a])\n                        cube([5, 3, 5], center = true);\n            }\n        }\n\n        // Undercut for printability\n        translate([0, 0, -30]) cube([60, 60, 30], center = true);\n    }\n}\n\nmodule head() {\n    translate([0, 35, 25]) {\n        // Neck joint\n        cylinder(h = 8, r1 = 10, r2 = 8, $fn = 16);\n\n        // Head core\n        translate([0, 0, 10])\n            sphere(12);\n\n        // Faceplate\n        translate([0, 12, 0])\n            difference() {\n                cube([20, 3, 15], center = true);\n                // Eye slits\n                for (x = [-6, 6])\n                    translate([x, 2, 0])\n                        cube([3, 4, 2], center = true);\n            }\n    }\n}\n\nmodule leg() {\n    translate([25, 0, 0]) {\n        // Upper leg\n        rotate([0, 90, 0])\n            cylinder(h = 20, r = 5, $fn = 8);\n\n        // Lower leg\n        translate([20, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 25, r = 4, $fn = 8);\n\n        // Foot pad\n        translate([20, 0, -26])\n            rotate([0, 90, 0])\n                cylinder(h = 8, r1 = 4, r2 = 6, $fn = 8);\n    }\n}\n\nmodule fin() {\n    translate([20, 0, 0])\n        difference() {\n            // Main fin blade\n            rotate([0, 90, 0])\n                linear_extrude(height = 2, center = true)\n                    polygon(points = [\n                        [0, 0],\n                        [15, 4],\n                        [30, 0],\n                        [15, -4]\n                    ]);\n\n            // Cutouts for style and weight\n            for (i = [1:3])\n                translate([i * 8, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = 3, r = 1.5, $fn = 8);\n        }\n}",
    "renders": true
  },
  {
    "household_item": "vespereth",
    "openscad_code": "// Vespereth - Realistic Style, Medium Complexity\n// A mystical hourglass-shaped artifact with orbiting rings and crystalline core\n\n// Overall dimensions\nvespereth_height = 70;\nbase_diameter = 35;\ncore_diameter = 15;\nring_diameter = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Module for creating a hollow cylinder with bottom\nmodule hollow_cylinder(h, r_outer, r_inner) {\n    difference() {\n        cylinder(h=h, r=r_outer, center=true);\n        cylinder(h=h+1, r=r_inner, center=true);\n    }\n}\n\n// Module for creating a hollow sphere\nmodule hollow_sphere(r_outer, r_inner) {\n    difference() {\n        sphere(r=r_outer);\n        sphere(r=r_inner);\n    }\n}\n\n// Module for creating decorative ring with etchings\nmodule ring(radius, height, thickness, num_etchings=8) {\n    difference() {\n        // Main ring body\n        hollow_cylinder(height, radius + thickness/2, radius - thickness/2);\n        \n        // Etching details\n        for(i = [0:num_etchings-1]) {\n            rotate([0, 0, i * 360/num_etchings])\n                translate([radius, 0, -height/2 - 0.1])\n                    cube([thickness*0.8, thickness*0.3, height+0.2], center=true);\n        }\n    }\n}\n\n// Base pedestal\nmodule base() {\n    // Lower base\n    cylinder(h=8, r1=base_diameter/2, r2=base_diameter/2 * 0.9);\n    \n    // Upper base\n    translate([0, 0, 8])\n        cylinder(h=5, r1=base_diameter/2 * 0.9, r2=base_diameter/2 * 0.7);\n}\n\n// Lower hourglass chamber\nmodule lower_chamber() {\n    difference() {\n        // Outer shape - inverted cone\n        cylinder(h=vespereth_height/3, r1=base_diameter/2 * 0.7, r2=core_diameter/2 + wall_thickness);\n        \n        // Hollow interior\n        cylinder(h=vespereth_height/3 + 1, r1=base_diameter/2 * 0.7 - wall_thickness, r2=core_diameter/2);\n    }\n}\n\n// Upper hourglass chamber\nmodule upper_chamber() {\n    translate([0, 0, vespereth_height/3 + vespereth_height/3])\n    difference() {\n        // Outer shape - cone\n        cylinder(h=vespereth_height/3, r1=core_diameter/2 + wall_thickness, r2=base_diameter/2 * 0.7);\n        \n        // Hollow interior\n        cylinder(h=vespereth_height/3 + 1, r1=core_diameter/2, r2=base_diameter/2 * 0.7 - wall_thickness);\n    }\n}\n\n// Central crystalline core\nmodule crystal_core() {\n    // Main crystal sphere\n    translate([0, 0, vespereth_height/2])\n    difference() {\n        sphere(r=core_diameter/2);\n        sphere(r=core_diameter/2 - wall_thickness);\n    }\n    \n    // Crystal facets\n    for(i = [0:5]) {\n        rotate([0, i * 60, 0])\n            translate([0, 0, vespereth_height/2])\n                scale([1, 0.8, 1])\n                    sphere(r=core_diameter/2 * 0.9);\n    }\n}\n\n// Orbiting rings\nmodule rings() {\n    // Horizontal ring\n    translate([0, 0, vespereth_height/2])\n        rotate([90, 0, 0])\n            ring(ring_diameter/2, wall_thickness*2, wall_thickness);\n    \n    // Vertical rings at 60 degree intervals\n    for(i = [0:2]) {\n        rotate([0, i * 120, 0])\n            translate([0, 0, vespereth_height/2])\n                ring(ring_diameter/2, wall_thickness*2, wall_thickness);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base();\n    \n    // Hourglass chambers\n    translate([0, 0, 13])\n        lower_chamber();\n    \n    upper_chamber();\n    \n    // Crystalline core\n    crystal_core();\n    \n    // Orbiting rings\n    rings();\n}",
    "renders": true
  },
  {
    "household_item": "xelioneth",
    "openscad_code": "$fn = 50;\n\n// Overall scale\nscale_factor = 0.5;\n\n// Main body\nmodule body() {\n    difference() {\n        // Central torso\n        scale([1, 0.8, 1.2]) \n            sphere(d = 40 * scale_factor);\n        \n        // Undercut for legs and neck\n        translate([0, 0, -15 * scale_factor])\n            cube([50 * scale_factor, 60 * scale_factor, 30 * scale_factor], center = true);\n    }\n}\n\n// Head with elongated neck\nmodule head() {\n    translate([0, 0, 35 * scale_factor]) {\n        // Neck\n        cylinder(h = 20 * scale_factor, d1 = 15 * scale_factor, d2 = 12 * scale_factor);\n        \n        // Head sphere\n        translate([0, 0, 15 * scale_factor])\n            sphere(d = 25 * scale_factor);\n        \n        // Snout\n        translate([0, 12 * scale_factor, 5 * scale_factor])\n            scale([1, 1.5, 0.8])\n                sphere(d = 15 * scale_factor);\n        \n        // Eye sockets\n        for (x = [-1, 1]) {\n            translate([x * 8 * scale_factor, 8 * scale_factor, 8 * scale_factor])\n                sphere(d = 6 * scale_factor);\n        }\n        \n        // Nostrils\n        for (x = [-1, 1]) {\n            translate([x * 3 * scale_factor, 18 * scale_factor, 3 * scale_factor])\n                sphere(d = 3 * scale_factor);\n        }\n    }\n}\n\n// Leg module\nmodule leg(offset_x, offset_y) {\n    translate([offset_x * scale_factor, offset_y * scale_factor, -20 * scale_factor]) {\n        // Upper leg\n        cylinder(h = 25 * scale_factor, d1 = 12 * scale_factor, d2 = 10 * scale_factor);\n        \n        // Lower leg\n        translate([0, 0, -25 * scale_factor])\n            cylinder(h = 20 * scale_factor, d1 = 10 * scale_factor, d2 = 8 * scale_factor);\n        \n        // Hoof\n        translate([0, 0, -45 * scale_factor])\n            scale([1, 1.2, 0.5])\n                cylinder(h = 8 * scale_factor, d = 12 * scale_factor);\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -25 * scale_factor, -5 * scale_factor]) {\n        rotate([30, 0, 0])\n            cylinder(h = 30 * scale_factor, d1 = 8 * scale_factor, d2 = 3 * scale_factor);\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    translate([side * 20 * scale_factor, 0, 10 * scale_factor]) {\n        rotate([0, side * -20, 0]) {\n            // Main wing bone\n            cylinder(h = 40 * scale_factor, d = 5 * scale_factor);\n            \n            // Wing membranes\n            hull() {\n                translate([0, 0, 0])\n                    sphere(d = 5 * scale_factor);\n                translate([20 * scale_factor * side, 15 * scale_factor, 0])\n                    sphere(d = 3 * scale_factor);\n                translate([25 * scale_factor * side, 0, 0])\n                    sphere(d = 3 * scale_factor);\n                translate([20 * scale_factor * side, -15 * scale_factor, 0])\n                    sphere(d = 3 * scale_factor);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    \n    // Four legs\n    leg(15, 15);\n    leg(-15, 15);\n    leg(15, -15);\n    leg(-15, -15);\n    \n    tail();\n    \n    // Wings\n    wing(1);\n    wing(-1);\n}",
    "renders": true
  },
  {
    "household_item": "zephireth",
    "openscad_code": "// Zephireth - Realistic Medium Complexity\n// A mythical wind spirit with flowing wings and graceful curves\n\n// Parameters\n$fn = 36;\nbody_radius = 12;\nbody_height = 35;\nhead_radius = 8;\nwing_length = 40;\nwing_width = 25;\ntail_length = 30;\nbase_thickness = 3;\n\nmodule body() {\n    // Main torso - egg shape for aerodynamic flow\n    difference() {\n        scale([1, 0.8, 1.3]) sphere(r=body_radius);\n        // Hollow interior for 3D printing\n        translate([0, 0, -5]) scale([0.7, 0.6, 1]) sphere(r=body_radius-3);\n    }\n}\n\nmodule head() {\n    // Refined head with beak-like features\n    union() {\n        translate([0, 0, body_height+head_radius-5]) sphere(r=head_radius);\n        \n        // Beak/nose ridge\n        translate([0, -head_radius+2, body_height+head_radius])\n            rotate([90, 0, 0]) cylinder(h=8, r1=3, r2=1);\n    }\n}\n\nmodule eye() {\n    // Almond-shaped eye\n    rotate([0, 10, 0]) scale([1.5, 1, 1]) sphere(r=1.5);\n}\n\nmodule wings() {\n    // Flowing wing structure\n    module wing_half(side) {\n        mirror([side, 0, 0]) {\n            // Main wing panel\n            translate([wing_length/2, 0, body_height/2])\n                rotate([30, 0, 10]) scale([1, wing_width/20, 0.3])\n                    sphere(r=wing_length/2);\n            \n            // Wing supports\n            for(i = [0:2]) {\n                rotate([0, 0, -20 + i * 20]) \n                    translate([wing_length/3, 0, body_height/2 + i * 5])\n                        cylinder(h=wing_length/2, r=1.5);\n            }\n            \n            // Feather details\n            for(i = [1:5]) {\n                translate([i*6, 0, body_height/2 - i*3])\n                    rotate([45, 0, -15])\n                        scale([1, 0.3, 0.1])\n                            sphere(r=5);\n            }\n        }\n    }\n    \n    // Generate both wings\n    wing_half(1);\n    wing_half(-1);\n}\n\nmodule tail() {\n    // Feathered tail structure\n    translate([0, 0, -body_height/2]) {\n        // Central tail shaft\n        cylinder(h=tail_length, r1=3, r2=1);\n        \n        // Tail feathers\n        for(i = [0:4]) {\n            rotate([0, 0, -30 + i * 15]) {\n                translate([0, 0, -i*3])\n                    rotate([45, 0, 0])\n                        scale([1, 0.2, 0.1])\n                            sphere(r=8 - i);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Simple landing legs\n    module leg() {\n        // Upper leg\n        translate([0, 0, -body_height/2 + 5])\n            rotate([30, 0, 0])\n                cylinder(h=8, r=2);\n        \n        // Lower leg\n        translate([0, 4, -body_height/2 - 2])\n            rotate([90, 0, 0])\n                cylinder(h=6, r=1.5);\n        \n        // Foot\n        translate([0, 6, -body_height/2 - 2])\n            rotate([90, 0, 0])\n                scale([1, 0.5, 0.5])\n                    cylinder(h=4, r=2);\n    }\n    \n    // Position legs\n    translate([body_radius/2, 0, 0]) leg();\n    translate([-body_radius/2, 0, 0]) leg();\n}\n\nmodule base() {\n    // Stable printing base\n    translate([0, 0, -body_height/2 - tail_length - base_thickness])\n        cylinder(h=base_thickness, r=body_radius + 5);\n}\n\n// Main assembly\nunion() {\n    // Core body structure\n    body();\n    \n    // Head and features\n    head();\n    \n    // Eyes\n    translate([3, -head_radius+1, body_height+head_radius+3]) eye();\n    translate([-3, -head_radius+1, body_height+head_radius+3]) eye();\n    \n    // Wings\n    wings();\n    \n    // Tail\n    tail();\n    \n    // Legs\n    legs();\n    \n    // Printing base\n    base();\n}",
    "renders": true
  },
  {
    "household_item": "aetheroneth",
    "openscad_code": "// Realistic Aetheroneth - Medium Complexity\n$fn = 64;\n\nmodule main_body() {\n    // Central crystalline core\n    difference() {\n        sphere(d = 40);\n        sphere(d = 36);\n    }\n    \n    // Energy conduits around core\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([22, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 30, d1 = 8, d2 = 4);\n                }\n            }\n        }\n    }\n}\n\nmodule stabilizer_fins() {\n    // Four primary stabilizer fins\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([28, 0, 0]) {\n                rotate([0, 0, 45]) {\n                    linear_extrude(height = 2) {\n                        polygon(points = [\n                            [0, 0],\n                            [15, 5],\n                            [15, -5]\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule energy_vanes() {\n    // Curved energy vanes\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 0, 15]) {\n                rotate([30, 0, 0]) {\n                    difference() {\n                        cylinder(h = 25, d1 = 12, d2 = 6);\n                        translate([0, 0, -1]) {\n                            cylinder(h = 27, d1 = 10, d2 = 4);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule base_mount() {\n    // Mounting base with anti-gravity rings\n    difference() {\n        cylinder(h = 8, d = 50);\n        cylinder(h = 9, d = 46);\n    }\n    \n    // Support struts\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([20, 0, -4]) {\n                cube([4, 4, 8], center = true);\n            }\n        }\n    }\n}\n\nmodule detail_panels() {\n    // Hexagonal detail panels on core\n    for(theta = [0:60:359]) {\n        rotate([theta, 0, 0]) {\n            translate([0, 0, 20]) {\n                rotate([0, 90, 0]) {\n                    linear_extrude(height = 2) {\n                        circle(d = 8, $fn = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule aetheroneth_assembly() {\n    // Assemble all components\n    union() {\n        // Base and core\n        base_mount();\n        translate([0, 0, 8]) {\n            main_body();\n            stabilizer_fins();\n            energy_vanes();\n            detail_panels();\n        }\n        \n        // Top sensor array\n        translate([0, 0, 45]) {\n            cylinder(h = 5, d = 10);\n            translate([0, 0, 5]) {\n                sphere(d = 6);\n            }\n        }\n    }\n}\n\n// Generate the complete model\naetheroneth_assembly();",
    "renders": true
  },
  {
    "household_item": "amarioneth",
    "openscad_code": "// OpenSCAD code for a realistic-style amarioneth (marionette puppet) - medium complexity\n// Dimensions in mm, final print ~70 mm tall\n\n$fn = 36;  // Smooth curves\n\n// Overall scale factor\nscale_factor = 1;\n\n// Head module\nmodule head() {\n    translate([0, 0, 60]) {\n        // Skull base sphere\n        sphere(r=8);\n        \n        // Jaw\n        translate([0, -2, -7])\n            scale([0.8, 0.7, 0.7])\n                sphere(r=7);\n        \n        // Eye sockets (cutouts)\n        difference() {\n            sphere(r=8);\n            // Left eye\n            translate([-3, 5, 2])\n                rotate([0, -10, 0])\n                    cylinder(h=10, r=2, center=true);\n            // Right eye\n            translate([3, 5, 2])\n                rotate([0, 10, 0])\n                    cylinder(h=10, r=2, center=true);\n        }\n    }\n}\n\n// Torso module\nmodule torso() {\n    translate([0, 0, 35]) {\n        // Chest\n        difference() {\n            scale([1.2, 0.7, 1.5])\n                sphere(r=10);\n            // Hollow interior for joints\n            scale([0.8, 0.5, 1.2])\n                sphere(r=10);\n        }\n        \n        // Pelvis\n        translate([0, 0, -15])\n            scale([1, 0.8, 0.8])\n                sphere(r=8);\n    }\n}\n\n// Limb module (reusable for arms and legs)\nmodule limb(length, radius) {\n    cylinder(h=length, r=radius, center=true);\n    \n    // Joint spheres\n    translate([0, 0, -length/2])\n        sphere(r=radius*1.5);\n    translate([0, 0, length/2])\n        sphere(r=radius*1.5);\n}\n\n// Arm assembly\nmodule arm(side) {\n    // side: 1 for right, -1 for left\n    translate([side*12, 0, 45]) {\n        rotate([0, 0, side*20]) {\n            // Upper arm\n            limb(15, 2.5);\n            \n            translate([0, 0, 15]) {\n                rotate([0, side*30, 0]) {\n                    // Lower arm\n                    limb(12, 2.2);\n                    \n                    translate([0, 0, 12]) {\n                        // Hand\n                        scale([1, 0.8, 0.5])\n                            sphere(r=3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leg assembly\nmodule leg(side) {\n    translate([side*5, 0, 25]) {\n        rotate([0, side*10, 0]) {\n            // Upper leg\n            limb(18, 3);\n            \n            translate([0, 0, 18]) {\n                rotate([0, -side*20, 0]) {\n                    // Lower leg\n                    limb(15, 2.8);\n                    \n                    translate([0, 0, 15]) {\n                        // Foot\n                        translate([0, 3, 0])\n                            scale([1.2, 2, 0.5])\n                                cube([5, 8, 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Control bar for strings\nmodule control_bar() {\n    translate([0, 0, 80]) {\n        // Main bar\n        cube([30, 3, 3], center=true);\n        \n        // String attachment points\n    for(i = [-1, 1]) {\n        translate([i*10, 0, 0])\n            cylinder(h=5, r=1);\n    }\n    }\n}\n\n// Assemble the marionette\nunion() {\n    // Scale the entire model\n    scale([scale_factor, scale_factor, scale_factor]) {\n        head();\n        torso();\n        \n        // Arms\n        arm(1);   // Right arm\n        arm(-1);  // Left arm\n        \n        // Legs\n        leg(1);   // Right leg\n        leg(-1);  // Left leg\n        \n        // Control bar (can be printed separately)\n        control_bar();\n    }\n}\n\n// Add string guides (thin cylinders for visualization)\nmodule strings() {\n    translate([0, 0, 0]) {\n        // Head strings\n        color(\"white\", 0.5)\n        cylinder(h=20, r=0.5);\n        \n        // Arm strings\n        color(\"white\", 0.5)\n        translate([12, 0, 45])\n            cylinder(h=35, r=0.5);\n        translate([-12, 0, 45])\n            cylinder(h=35, r=0.5);\n    }\n}\n\n// Uncomment to show strings\n// strings();",
    "renders": true
  },
  {
    "household_item": "astraeleth",
    "openscad_code": "// Astraeleth - Realistic style, medium complexity\n// A mystical star-forged artifact combining stellar geometry and arcane power\n\n// Global parameters\n$fn = 36;\ntotal_height = 70;\nbase_diameter = 40;\nstar_diameter = 35;\ncrystal_height = 25;\n\n// Main module\nmodule astraeleth() {\n    union() {\n        // Base pedestal with runic engravings\n        pedestal();\n        \n        // Middle star-forged ring\n        star_ring();\n        \n        // Upper crystal focus chamber\n        crystal_chamber();\n        \n        // Floating star points\n        star_points();\n        \n        // Energy conduits\n        conduits();\n    }\n}\n\n// Base with runic engravings\nmodule pedestal() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = 15, d = base_diameter, center = false);\n        \n        // Runic engravings using small cylinders\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([base_diameter/2 - 3, 0, 7.5])\n                    cylinder(h = 3, d = 2, center = true);\n        }\n        \n        // Central cavity for weight reduction\n        cylinder(h = 12, d = 20, center = false);\n    }\n    \n    // Decorative base ring\n    translate([0, 0, 14])\n        cylinder(h = 2, d = base_diameter + 4);\n}\n\n// Star-forged ring with stellar patterns\nmodule star_ring() {\n    translate([0, 0, 15])\n        difference() {\n            // Main ring body\n            cylinder(h = 10, d = star_diameter + 8);\n            \n            // Inner cutout\n            cylinder(h = 12, d = star_diameter);\n            \n            // Stellar cutouts\n            for (i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([star_diameter/2 + 2, 0, 5])\n                        cube([6, 2, 12], center = true);\n            }\n        }\n}\n\n// Crystal focus chamber\nmodule crystal_chamber() {\n    translate([0, 0, 25])\n        difference() {\n            // Main chamber\n            cylinder(h = crystal_height, d = star_diameter - 2);\n            \n            // Crystal cavity\n            translate([0, 0, 5])\n                cylinder(h = crystal_height - 5, d = star_diameter - 10);\n            \n            // Arcane vents\n            for (i = [0:7]) {\n                rotate([0, 0, i * 45])\n                    translate([star_diameter/2 - 5, 0, crystal_height/2])\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, d = 3);\n            }\n        }\n}\n\n// Floating star points\nmodule star_points() {\n    for (i = [0:7]) {\n        angle = i * 45;\n        radius = star_diameter/2 + 10;\n        \n        // Main star arm\n        rotate([0, 0, angle])\n            translate([radius, 0, 25 + crystal_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d1 = 6, d2 = 2);\n        \n        // Star tip\n        rotate([0, 0, angle])\n            translate([radius + 6, 0, 25 + crystal_height/2])\n                sphere(d = 4);\n    }\n}\n\n// Energy conduits connecting parts\nmodule conduits() {\n    // Base to ring conduits\n    for (i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle])\n            translate([base_diameter/2 - 3, 0, 7.5])\n                rotate([90, 0, 0])\n                    cylinder(h = 7.5, d = 3);\n    }\n    \n    // Ring to chamber conduits\n    for (i = [0:3]) {\n        angle = i * 90 + 45;\n        rotate([0, 0, angle])\n            translate([star_diameter/2 + 2, 0, 22.5])\n                rotate([90, 0, 0])\n                    cylinder(h = 2.5, d = 2.5);\n    }\n}\n\n// Generate the model\nastraeleth();",
    "renders": true
  },
  {
    "household_item": "caelioneth",
    "openscad_code": "// Caelioneth - A medium-complexity realistic model of a celestial lion-dragon\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions: ~80mm length, ~50mm height, ~40mm width\n\n$fn = 36; // Smooth curves for printing\n\nmodule body() {\n    // Main torso - elongated teardrop shape\n    hull() {\n        translate([-30, 0, 0]) sphere(d=25);\n        translate([20, 0, 0]) sphere(d=20);\n    }\n}\n\nmodule head() {\n    // Head base\n    translate([-35, 0, 12]) rotate([0, -20, 0]) {\n        difference() {\n            hull() {\n                sphere(d=20);\n                translate([-5, 0, 5]) sphere(d=12);\n            }\n            // Eye sockets\n            translate([-5, 7, 3]) sphere(d=4);\n            translate([-5, -7, 3]) sphere(d=4);\n            // Snout cavity\n            translate([-8, 0, -2]) sphere(d=6);\n        }\n        \n        // Horns\n        for(i = [-1, 1]) {\n            translate([-2, i*8, 12]) rotate([0, i*15, 0]) \n                cylinder(h1=15, r1=3, r2=1);\n        }\n        \n        // Mane ridge\n        for(i = [0:5:20]) {\n            translate([-5-i, 0, 8+i/3]) \n                scale([1, 0.8, 0.3]) sphere(d=8);\n        }\n    }\n}\n\nmodule wings() {\n    // Wing roots\n    for(side = [-1, 1]) {\n        translate([0, side*15, 15]) rotate([0, 0, side*20]) {\n            // Main wing membrane support\n            hull() {\n                translate([0, 0, 0]) sphere(d=6);\n                translate([10, side*20, 15]) sphere(d=4);\n                translate([25, side*25, 0]) sphere(d=3);\n            }\n            \n            // Wing bones\n            for(angle = [0:30:120]) {\n                rotate([0, 0, side*angle]) \n                    translate([10, side*15, 10]) \n                        cylinder(h1=20, r1=2, r2=1);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-25, side*10, 0]) {\n            // Upper leg\n            cylinder(h=15, r=4);\n            // Lower leg\n            translate([0, 0, -15]) rotate([30, 0, 0])\n                cylinder(h=12, r=3);\n            // Paw\n            translate([0, 0, -27]) sphere(d=6);\n        }\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([15, side*8, 0]) {\n            // Upper leg\n            cylinder(h=12, r=4);\n            // Lower leg\n            translate([0, 0, -12]) rotate([30, 0, 0])\n                cylinder(h=10, r=3);\n            // Paw\n            translate([0, 0, -22]) sphere(d=5);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail segments\n    hull() {\n        translate([20, 0, 5]) sphere(d=6);\n        translate([35, 0, 8]) sphere(d=4);\n        translate([45, 0, 12]) sphere(d=3);\n        translate([50, 0, 10]) sphere(d=4);\n    }\n    \n    // Tail fin\n    translate([48, 0, 10]) rotate([0, 90, 0]) \n        scale([1, 1.5, 0.3]) sphere(d=8);\n}\n\nmodule celestial_markings() {\n    // Star patterns on wings\n    for(i = [1:8]) {\n        angle = i * 45;\n        r = 20 + i*2;\n        translate([15 + cos(angle)*r, sin(angle)*r, 15]) \n            sphere(d=2);\n    }\n    \n    // Constellation dots along body\n    for(i = [1:5]) {\n        translate([-20 + i*10, 0, 20]) sphere(d=1.5);\n    }\n}\n\n// Assemble the caelioneth\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail();\n    celestial_markings();\n}",
    "renders": true
  },
  {
    "household_item": "celestioneth",
    "openscad_code": "// Celestioneth - Realistic style, medium complexity\n// A celestial navigation instrument with astrolabe-like features\n\n$fn = 60;\n\n// Overall dimensions\ncelestioneth_radius = 40;\nthickness = 3;\nbase_thickness = 6;\n\n// Base disc with degree markings\nmodule base_disc() {\n    difference() {\n        // Main disc\n        cylinder(h=base_thickness, r=celestioneth_radius, center=true);\n        \n        // Central hole for sighting tube\n        cylinder(h=base_thickness+2, r=3, center=true);\n        \n        // Degree markings (0-360 every 10 degrees)\n        for(i=[0:10:350]) {\n            rotate([0,0,i])\n                translate([celestioneth_radius-4, 0, 0])\n                    cube([8, 1, base_thickness+1], center=true);\n        }\n        \n        // Cardinal direction labels space\n        translate([celestioneth_radius-10, 0, base_thickness/2])\n            cube([20, 6, base_thickness], center=true);\n        translate([0, celestioneth_radius-10, base_thickness/2])\n            rotate([0,0,90])\n                cube([20, 6, base_thickness], center=true);\n    }\n}\n\n// Sight vane with pinholes\nmodule sight_vane() {\n    translate([0, 0, base_thickness/2 + thickness/2 + 1])\n        difference() {\n            // Main vane arm\n            rotate([0,0,-45])\n                cube([celestioneth_radius*1.4, 3, thickness], center=true);\n            \n            // Pinhole 1\n            translate([celestioneth_radius*0.5, 0, 0])\n                cylinder(h=thickness+2, r=0.5, center=true);\n            \n            // Pinhole 2\n            translate([-celestioneth_radius*0.5, 0, 0])\n                cylinder(h=thickness+2, r=0.5, center=true);\n            \n            // Weight reduction\n            translate([0, 0, thickness/2])\n                cube([celestioneth_radius*1.2, 1.5, thickness], center=true);\n        }\n}\n\n// Alidade (rotating rule) with sights\nmodule alidade() {\n    rotate([0,0,30])  // Initial offset\n        translate([0, 0, base_thickness + thickness + 1])\n            difference() {\n                // Main rule\n                cube([celestioneth_radius*1.8, 2, thickness], center=true);\n                \n                // Sighting vanes\n                translate([celestioneth_radius*0.8, 0, 0])\n                    cube([3, 8, thickness+1], center=true);\n                translate([-celestioneth_radius*0.8, 0, 0])\n                    cube([3, 8, thickness+1], center=true);\n                \n                // Central pivot hole\n                cylinder(h=thickness+2, r=2, center=true);\n            }\n}\n\n// Rete (star map overlay)\nmodule rete() {\n    translate([0, 0, base_thickness + thickness*2 + 2])\n        difference() {\n            // Main ring\n            cylinder(h=thickness, r=celestioneth_radius-2, center=true);\n            \n            // Central hole\n            cylinder(h=thickness+2, r=5, center=true);\n            \n            // Ecliptic ring\n            rotate([45,0,0])\n                difference() {\n                    cylinder(h=thickness, r=celestioneth_radius*0.7, center=true);\n                    cylinder(h=thickness+2, r=celestioneth_radius*0.7-2, center=true);\n                }\n            \n            // Star pointers (simplified)\n            for(ra=[30:60:360]) {\n                for(dec=[-40:40:80]) {\n                    rotate([0,dec,ra])\n                        translate([celestioneth_radius*0.6, 0, 0])\n                            sphere(r=1.5);\n                }\n            }\n            \n            // Cutouts for visibility\n            for(i=[0:45:360]) {\n                rotate([0,0,i])\n                    translate([celestioneth_radius*0.5, 0, 0])\n                        cube([8, 8, thickness+2], center=true);\n            }\n        }\n}\n\n// Suspension ring\nmodule suspension_ring() {\n    rotate([90,0,0])\n        translate([0, 0, celestioneth_radius+5])\n            difference() {\n                // Main ring\n                rotate_extrude()\n                    translate([celestioneth_radius+3, 0])\n                        circle(r=2);\n                \n                // Attachment point\n                cube([4, 4, 6], center=true);\n            }\n}\n\n// Assembly\nunion() {\n    base_disc();\n    sight_vane();\n    alidade();\n    rete();\n    suspension_ring();\n}",
    "renders": true
  },
  {
    "household_item": "elestreoneth",
    "openscad_code": "// Realistic Elestreoneth (Medium Complexity)\n// A futuristic creature with organic curves and mechanical details\n\n// Overall dimensions\ntotal_height = 80;\nbody_length = 60;\nbody_width = 40;\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Central torso\n        hull() {\n            translate([0, 0, 25]) sphere(d=35, $fn=32);\n            translate([0, 0, 45]) sphere(d=28, $fn=32);\n        }\n        \n        // Ventral cavity\n        translate([0, -20, 30])\n            rotate([0, 20, 0])\n            cube([30, 20, 25], center=true);\n    }\n}\n\n// Head with sensory array\nmodule head() {\n    translate([0, 25, 50]) {\n        // Main head structure\n        difference() {\n            sphere(d=25, $fn=24);\n            translate([0, -15, 0])\n                cube([30, 30, 20], center=true);\n        }\n        \n        // Compound eyes\n        for(i = [-1, 1]) {\n            translate([i*8, 12, 5])\n                sphere(d=6, $fn=12);\n            translate([i*8, 12, 3])\n                sphere(d=4, $fn=8);\n        }\n        \n        // Mandibles\n        translate([0, 15, -5]) {\n            rotate([30, 0, 0])\n                cylinder(h=12, d1=8, d2=3, $fn=8);\n            rotate([-30, 0, 0])\n                cylinder(h=12, d1=8, d2=3, $fn=8);\n        }\n    }\n}\n\n// Leg segments\nmodule leg() {\n    // Upper segment\n    cylinder(h=20, d=6, $fn=8);\n    \n    // Joint\n    translate([0, 0, 20])\n        sphere(d=7, $fn=8);\n    \n    // Lower segment\n    translate([0, 0, 20])\n        rotate([0, 20, 0])\n        cylinder(h=18, d=5, $fn=8);\n    \n    // Foot pad\n    translate([0, 0, 38])\n        rotate([0, 20, 0])\n        cylinder(h=3, d1=5, d2=8, $fn=8);\n}\n\n// All legs\nmodule legs() {\n    for(side = [-1, 1]) {\n        for(pos = [-20, 0, 20]) {\n            translate([side*20, pos, 15]) {\n                rotate([0, side*10, 0])\n                leg();\n            }\n        }\n    }\n}\n\n// Mechanical details\nmodule mechanical_details() {\n    // Back ridge\n    for(i = [-20:5:20]) {\n        translate([0, i, 45 - abs(i)*0.3])\n            rotate([0, 90, 0])\n            cylinder(h=5, d1=8, d2=5, $fn=6);\n    }\n    \n    // Side panels\n    for(side = [-1, 1]) {\n        difference() {\n            translate([side*18, 0, 35])\n                cube([3, 30, 15], center=true);\n            for(i = [-10:5:10]) {\n                translate([side*18, i, 35])\n                    cylinder(h=5, d=3, $fn=6);\n            }\n        }\n    }\n}\n\n// Antenna array\nmodule antennae() {\n    for(side = [-1, 1]) {\n        translate([side*8, 25, 62]) {\n            // Base\n            cylinder(h=3, d=3, $fn=6);\n            \n            // Flexible segments\n            for(i = [0:3:12]) {\n                translate([0, 0, i])\n                    rotate([side*5*i, 0, 0])\n                    cylinder(h=3, d=2.5 - i*0.1, $fn=6);\n            }\n            \n            // Sensor bulb\n            translate([0, 0, 15])\n                sphere(d=2, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    head();\n    legs();\n    mechanical_details();\n    antennae();\n}\n\n// Print orientation support\ntranslate([0, 0, -2])\n    cube([100, 100, 2], center=true);",
    "renders": true
  },
  {
    "household_item": "empyreoneth",
    "openscad_code": "// Empyreoneth – realistic, medium-complexity, 3D-printable\n// Total height ≈ 70 mm, all walls ≥ 1.2 mm, no steep overhangs\n\n$fn = 36;\n\n// ---------- PARAMETERS ----------\nbody_h   = 40;      // Main torso height\nbody_r   = 18;      // Torso radius\nhead_r   = 12;      // Head radius\nneck_h   = 6;\nwing_span= 60;\nleg_len  = 15;\nthigh_r  = 4;\ncalf_r   = 3;\nfoot_len = 8;\narm_len  = 18;\nclaw_len = 3;\n\nwall     = 1.5;     // Minimum wall thickness for printing\n\n// ---------- MODULES ----------\nmodule hollow_cylinder(h, r_out, wall) {\n    difference() {\n        cylinder(h = h, r = r_out);\n        translate([0,0,-0.1])\n            cylinder(h = h+0.2, r = r_out-wall);\n    }\n}\n\nmodule hollow_sphere(r_out, wall) {\n    difference() {\n        sphere(r = r_out);\n        sphere(r = r_out-wall);\n    }\n}\n\n// ---------- MAIN BODY ----------\n// Torso – slightly tapered cylinder\nmodule torso() {\n    difference() {\n        cylinder(h = body_h, r1 = body_r, r2 = body_r-4);\n        // cavity\n        translate([0,0,wall])\n            cylinder(h = body_h-wall, r1 = body_r-wall, r2 = body_r-4-wall);\n    }\n}\n\n// Head\nmodule head() {\n    translate([0,0,body_h+neck_h])\n        hollow_sphere(head_r, wall);\n}\n\n// Neck\nmodule neck() {\n    translate([0,0,body_h])\n        hollow_cylinder(neck_h, head_r*0.7, wall);\n}\n\n// ---------- WINGS ----------\nmodule wing() {\n    // Single wing: thin swept plate\n    linear_extrude(height = 2, center = true)\n    polygon(points=[\n        [0,0],\n        [wing_span/2, 0],\n        [wing_span/2-5, -20],\n        [5, -25],\n        [0, -8]\n    ]);\n}\n\nmodule wings() {\n    translate([0,0,body_h-5])\n        rotate([0,0,20])\n            wing();\n    translate([0,0,body_h-5])\n        mirror([1,0,0])\n            rotate([0,0,20])\n                wing();\n}\n\n// ---------- LEG ----------\nmodule leg(side) {\n    // Thigh\n    translate([side*(body_r-4), 0, 0])\n    rotate([90,0,0])\n        hollow_cylinder(leg_len, thigh_r, wall);\n\n    // Calf\n    translate([side*(body_r-4), 0, -leg_len])\n    rotate([90,0,0])\n        hollow_cylinder(leg_len*0.8, calf_r, wall);\n\n    // Foot\n    translate([side*(body_r-4), foot_len/2, -leg_len*1.8])\n        cube([foot_len, wall, 4], center = true);\n}\n\nmodule legs() {\n    leg(1);\n    leg(-1);\n}\n\n// ---------- ARMS ----------\nmodule arm(side) {\n    // Upper arm\n    translate([side*(body_r-2), 0, body_h-10])\n    rotate([0,side*20,0])\n        hollow_cylinder(arm_len, thigh_r*0.8, wall);\n\n    // Lower arm / claw\n    translate([side*(body_r-2+arm_len*sin(20)), 0, body_h-10-arm_len*cos(20)])\n    rotate([0,side*20,0])\n        cylinder(h = claw_len, r1 = calf_r, r2 = 0.5);\n}\n\nmodule arms() {\n    arm(1);\n    arm(-1);\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    // Core\n    torso();\n    neck();\n    head();\n\n    // Limbs\n    wings();\n    legs();\n    arms();\n}",
    "renders": true
  },
  {
    "household_item": "galathion",
    "openscad_code": "// Galathion - Realistic Style, Medium Complexity\n// A traditional Greek Orthodox priest's hat (kalimavkion + epanokalimavkion)\n\n// Overall dimensions\noverall_height = 55; // mm\ncrown_diameter = 45; // mm\nbrim_diameter = 55; // mm\nwall_thickness = 2; // mm for 3D printing\n\n// Base cylinder (main crown)\nmodule base_crown() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = overall_height * 0.7, d = crown_diameter, $fn = 64);\n        \n        // Hollow it out\n        translate([0, 0, wall_thickness])\n            cylinder(h = overall_height * 0.7 - wall_thickness, d = crown_diameter - 2*wall_thickness, $fn = 64);\n    }\n}\n\n// Top dome (epanokalimavkion)\nmodule top_dome() {\n    difference() {\n        // Outer dome\n        translate([0, 0, overall_height * 0.7])\n            sphere(d = crown_diameter, $fn = 64);\n        \n        // Hollow it\n        translate([0, 0, overall_height * 0.7 + 1])\n            sphere(d = crown_diameter - 2*wall_thickness, $fn = 64);\n    }\n}\n\n// Brim (visor-like extension)\nmodule brim() {\n    difference() {\n        // Outer brim\n        translate([0, 0, overall_height * 0.2])\n            cylinder(h = wall_thickness, d1 = brim_diameter, d2 = brim_diameter * 0.9, $fn = 64);\n        \n        // Remove center\n        translate([0, 0, overall_height * 0.2 - 1])\n            cylinder(h = wall_thickness + 2, d = crown_diameter, $fn = 64);\n    }\n}\n\n// Veil attachment points (small loops)\nmodule veil_loops() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([crown_diameter/2 - wall_thickness, 0, overall_height * 0.4])\n                rotate([90, 0, 0])\n                    difference() {\n                        // Loop\n                        torus(r1 = wall_thickness, r2 = wall_thickness/2, $fn = 16);\n                        // Cut to make open loop\n                        translate([0, -wall_thickness*2, 0])\n                            cube([wall_thickness*4, wall_thickness*4, wall_thickness*4], center = true);\n                    }\n    }\n}\n\n// Helper for torus\nmodule torus(r1, r2, $fn) {\n    rotate_extrude($fn = $fn)\n        translate([r1, 0, 0])\n            circle(r = r2, $fn = $fn);\n}\n\n// Reinforcement band around crown\nmodule reinforcement_band() {\n    translate([0, 0, overall_height * 0.3])\n        difference() {\n            // Outer band\n            cylinder(h = wall_thickness * 2, d = crown_diameter + 2, $fn = 64);\n            // Inner cut\n            cylinder(h = wall_thickness * 2 + 1, d = crown_diameter, $fn = 64);\n        }\n}\n\n// Main assembly\nunion() {\n    base_crown();\n    top_dome();\n    brim();\n    veil_loops();\n    reinforcement_band();\n}\n\n// Bottom rim for stability\ntranslate([0, 0, 0])\n    difference() {\n        cylinder(h = wall_thickness * 1.5, d = crown_diameter + 2, $fn = 64);\n        cylinder(h = wall_thickness * 1.5 + 1, d = crown_diameter, $fn = 64);\n    }",
    "renders": true
  },
  {
    "household_item": "irethon",
    "openscad_code": "// Irethon (Welsh throwing spear head) – medium-complexity realistic style\n// Overall printable length ~95 mm, shaft socket 8 mm inner Ø, wall ≥1 mm\n\n// ---------- Parameters ----------\ntotalLength = 95;               // from socket mouth to tip\nshaftDia    = 8;                // wooden shaft diameter\nsocketDepth = 25;               // depth of the iron socket\nbladeLength = totalLength-socketDepth;\nwallThick   = 1.4;              // minimum wall thickness for printing\nbladeWidth  = 16;               // max barb span\nbarbSpan    = 12;               // width of side barbs\n$fn         = 48;\n\n// ---------- Main assembly ----------\nunion() {\n    // Socket for wooden shaft\n    socket();\n\n    // Tapered blade with twin rear-facing barbs\n    translate([0,0,socketDepth])\n        blade();\n}\n\n// ---------- Modules ----------\n\nmodule socket() {\n    // Hollow cylinder with chamfered mouth\n    difference() {\n        // Outer socket body\n        union() {\n            cylinder(h = socketDepth, d1 = shaftDia+2*wallThick+3, d2 = shaftDia+2*wallThick);\n            // Small decorative ring at base\n            translate([0,0,-2])\n                cylinder(h = 2, d = shaftDia+2*wallThick+5);\n        }\n\n        // Central bore for shaft\n        cylinder(h = socketDepth+1, d = shaftDia, center = false);\n\n        // Optional drainage/weight-reduction holes\n        for(i=[0:120:359])\n            rotate([0,0,i])\n                translate([shaftDia/2+wallThick+0.5,0,socketDepth/2])\n                    rotate([90,0,0])\n                        cylinder(h = 3, d = 2, $fn = 8);\n    }\n}\n\nmodule blade() {\n    // Central rib\n    union() {\n        // Tapered spine\n        hull() {\n            translate([0,0,0])\n                cube([wallThick*2, bladeWidth/3, 0.1], center = true);\n            translate([0,0,bladeLength])\n                cube([wallThick*2, 2, 0.1], center = true);\n        }\n\n        // Left and right barbs\n        mirror([0,1,0])\n            barb();\n        barb();\n\n        // Blade faces (lofted triangles)\n        translate([wallThick/2,0,0])\n            rotate([0,-90,0])\n                linear_extrude(height = wallThick*2, center = true, scale = 0.1)\n                    polygon(points = [[0,0], [bladeLength,-bladeWidth/2], [bladeLength,bladeWidth/2]]);\n    }\n}\n\nmodule barb() {\n    // Single rear-facing barb\n    translate([0, bladeWidth/2-wallThick, bladeLength*0.6])\n        rotate([0,0,20])\n            hull() {\n                cube([wallThick*2, wallThick, wallThick*2], center = true);\n                translate([barbSpan/2, 0, -barbSpan/2])\n                    cube([wallThick*2, wallThick, wallThick*2], center = true);\n            }\n}",
    "renders": true
  },
  {
    "household_item": "lunarethon",
    "openscad_code": "// Lunarethon – realistic, medium complexity\n// Overall size ≈ 70 mm long, printable on FDM with 0.4 mm nozzle\n\n$fa = 2;\n$fs = 0.5;\n\nmodule lunarethon() {\n    // Central hull (main body)\n    difference() {\n        union() {\n            // Main cylindrical body\n            cylinder(h = 30, d = 40, center = true);\n            // Tapered front dome\n            translate([0, 0, 15])\n                scale([1, 1, 0.7])\n                sphere(d = 40);\n            // Rear block with thruster mounts\n            translate([0, 0, -20])\n                cube([42, 42, 20], center = true);\n        }\n        // Hollow interior for walls ≈ 2 mm thick\n        translate([0, 0, -5])\n            cylinder(h = 32, d = 36, center = true);\n        translate([0, 0, 15])\n            scale([1, 1, 0.7])\n            sphere(d = 36);\n    }\n\n    // Landing legs (4-fold symmetry)\n    for (a = [0, 90, 180, 270]) {\n        rotate([0, 0, a])\n            translate([20, 0, -30])\n                landing_leg();\n    }\n\n    // Fuel tank cluster on rear\n    translate([0, 0, -30])\n        fuel_tanks();\n\n    // Reaction thrusters\n    translate([0, 0, -30])\n        thrusters();\n\n    // Small RCS pods on sides\n    for (sign = [-1, 1])\n        translate([sign * 25, 0, 0])\n            rcs_pod();\n}\n\nmodule landing_leg() {\n    // Upper strut\n    translate([0, 0, 10])\n        rotate([0, 15, 0])\n            cylinder(h = 25, d = 4);\n    // Lower strut\n    translate([0, 0, 0])\n        rotate([0, 30, 0])\n            cylinder(h = 25, d = 3);\n    // Foot pad\n    translate([0, 0, -12])\n        rotate([0, 30, 0])\n            scale([1, 3, 0.5])\n                sphere(d = 8);\n}\n\nmodule fuel_tanks() {\n    // Central spherical tank\n    sphere(d = 20);\n    // Peripheral toroidal tank\n    rotate_extrude()\n        translate([15, 0, 0])\n            circle(d = 8);\n}\n\nmodule thrusters() {\n    // Main engine bell\n    translate([0, 0, -10])\n        cylinder(h = 15, d1 = 20, d2 = 10);\n    // Four Vernier thrusters around\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([12, 0, -5])\n                cylinder(h = 8, d1 = 5, d2 = 3);\n    }\n}\n\nmodule rcs_pod() {\n    difference() {\n        sphere(d = 6);\n        translate([0, 0, -3])\n            cylinder(h = 6, d = 3);\n    }\n    // Nozzle\n    translate([0, 0, 3])\n        cylinder(h = 4, d1 = 3, d2 = 2);\n}\n\nlunarethon();",
    "renders": true
  },
  {
    "household_item": "nebuloneth",
    "openscad_code": "// Nebulon-B Medical Frigate - Realistic Medium Complexity\n// Based on Star Wars Nebulon-B escort frigate design\n\n$fn = 32; // Smooth curves\nwall_thickness = 1.2;\n\nmodule engine_nozzle(radius, length) {\n    difference() {\n        cylinder(h=length, r1=radius, r2=radius*0.7);\n        cylinder(h=length+1, r1=radius-wall_thickness, r2=radius*0.7-wall_thickness);\n    }\n}\n\nmodule engine_cluster() {\n    translate([0,0,-5]) {\n        // Main engine body\n        cylinder(h=8, r=6);\n        \n        // Engine nozzles\n        for(i=[-1:1]) {\n            translate([i*4, 0, 8]) {\n                engine_nozzle(2, 6);\n            }\n        }\n    }\n}\n\nmodule command_pod() {\n    // Main pod structure\n    translate([0, 0, 40]) {\n        rotate([0, 0, 0]) {\n            difference() {\n                // Outer shell\n                hull() {\n                    sphere(8);\n                    translate([0, 0, -4]) cylinder(h=10, r=6);\n                }\n                \n                // Interior cavity\n                hull() {\n                    sphere(8-wall_thickness);\n                    translate([0, 0, -4]) cylinder(h=10.5, r=6-wall_thickness);\n                }\n            }\n            \n            // Bridge windows\n            for(angle=[0:45:315]) {\n                rotate([0, 0, angle]) {\n                    translate([6, 0, 2]) {\n                        cube([2, 0.5, 1.5]);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule main_hull() {\n    // Central spine\n    hull() {\n        translate([0, 0, 0]) cylinder(h=30, r=3);\n        translate([0, 0, 30]) cylinder(h=40, r=5);\n    }\n    \n    // Hull segments\n    for(z=[5:10:25]) {\n        translate([0, 0, z]) {\n            rotate([0, 0, 45]) {\n                difference() {\n                    cube([30, 12, 8], center=true);\n                    cube([28, 10, 9], center=true);\n                }\n            }\n        }\n    }\n    \n    // Dorsal fin\n    translate([0, 7, 45]) {\n        difference() {\n            cube([25, 2, 15], center=true);\n            cube([23, 3, 16], center=true);\n        }\n    }\n    \n    // Sensor array\n    translate([0, 0, 50]) {\n        cylinder(h=3, r=2);\n    }\n}\n\nmodule cargo_sections() {\n    // Forward cargo bay\n    translate([0, 0, 15]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=20, r=8);\n                cylinder(h=21, r=8-wall_thickness);\n            }\n        }\n    }\n    \n    // Mid section details\n    for(angle=[0:90:270]) {\n        rotate([0, 0, angle]) {\n            translate([12, 0, 25]) {\n                cube([6, 4, 12]);\n            }\n        }\n    }\n}\n\nmodule antenna_array() {\n    // Dorsal antenna\n    translate([0, 8, 52]) {\n        cylinder(h=10, r=0.5);\n        translate([0, 0, 10]) sphere(1);\n    }\n    \n    // Ventral comm dish\n    translate([0, -8, 5]) {\n        rotate([180, 0, 0]) {\n            cylinder(h=3, r1=4, r2=2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Engines at rear\n    translate([0, 0, -5]) {\n        engine_cluster();\n    }\n    \n    // Main hull\n    main_hull();\n    \n    // Command pod\n    command_pod();\n    \n    // Cargo sections\n    cargo_sections();\n    \n    // Antenna arrays\n    antenna_array();\n    \n    // Support strut (simplified)\n    translate([0, 0, 25]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=35, r=2);\n                cylinder(h=36, r=2-wall_thickness);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pyrelion",
    "openscad_code": "// Realistic Pyrelion (medium complexity)\n// 3D printable model with moderate detail\n\n$fn = 36;\n\n// Overall dimensions\npyrelion_height = 75;\nbase_diameter = 40;\n\n// Base module\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=8, d1=base_diameter, d2=base_diameter*0.9);\n        \n        // Bottom chamfer\n        translate([0, 0, -0.1])\n            cylinder(h=2, d1=base_diameter*1.1, d2=base_diameter);\n    }\n}\n\n// Body segment module\nmodule body_segment(height, top_d, bottom_d, scale_factor=1) {\n    difference() {\n        // Tapered cylinder\n        cylinder(h=height*scale_factor, d1=bottom_d, d2=top_d);\n        \n        // Internal cavity for material saving\n        translate([0, 0, 2])\n            cylinder(h=height*scale_factor-4, d1=bottom_d*0.7, d2=top_d*0.7);\n    }\n}\n\n// Flame tip module\nmodule flame_tip(height, base_d) {\n    difference() {\n        // Main flame shape\n        hull() {\n            // Bottom sphere\n            translate([0, 0, 0])\n                sphere(d=base_d);\n            // Top sphere\n            translate([0, 0, height*0.8])\n                sphere(d=base_d*0.3);\n            // Side spheres for asymmetry\n            translate([base_d*0.2, 0, height*0.4])\n                sphere(d=base_d*0.4);\n            translate([-base_d*0.15, 0, height*0.6])\n                sphere(d=base_d*0.35);\n        }\n        \n        // Internal cavity\n        translate([0, 0, -2])\n            scale([0.7, 0.7, 0.9])\n                cylinder(h=height+4, d=base_d);\n    }\n}\n\n// Stabilizing fins\nmodule fins() {\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([base_diameter*0.35, 0, 5])\n                rotate([90, 0, 0])\n                    linear_extrude(height=base_diameter*0.15, center=true)\n                        polygon(points=[[0,0], [8,2], [8,8], [0,6]], convexity=10);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Stabilizing fins\n    fins();\n    \n    // Body segments with increasing taper\n    translate([0, 0, 8])\n        body_segment(height=15, top_d=30, bottom_d=36);\n    \n    translate([0, 0, 23])\n        body_segment(height=12, top_d=22, bottom_d=30);\n    \n    translate([0, 0, 35])\n        body_segment(height=10, top_d=16, bottom_d=22);\n    \n    // Flame section\n    translate([0, 0, 45])\n        body_segment(height=8, top_d=12, bottom_d=16);\n    \n    // Flame tip\n    translate([0, 0, 53])\n        flame_tip(height=20, base_d=12);\n    \n    // Small stabilizing ring\n    translate([0, 0, 50])\n        difference() {\n            cylinder(h=2, d=16);\n            cylinder(h=2.2, d=12);\n        }\n}",
    "renders": true
  },
  {
    "household_item": "quintarioneth",
    "openscad_code": "// Quintarioneth - Medium complexity realistic model\n// A five-armed starfish-like creature with central core and tentacles\n\n$fn = 32;\n\n// Overall scale\nscale_factor = 1;\nbody_diameter = 40 * scale_factor;\narm_length = 35 * scale_factor;\narm_thickness = 8 * scale_factor;\ncore_height = 15 * scale_factor;\n\n// Central spherical core with flattened top/bottom\nmodule central_core() {\n    difference() {\n        // Main sphere body\n        sphere(d = body_diameter);\n        \n        // Flatten top and bottom slightly\n        translate([0, 0, body_diameter/2 - 5])\n            cube([body_diameter*2, body_diameter*2, 10], center = true);\n        translate([0, 0, -body_diameter/2 + 5])\n            cube([body_diameter*2, body_diameter*2, 10], center = true);\n    }\n    \n    // Add textured rings around equator\n    for (i = [1:3]) {\n        rotate([0, 0, i * 120])\n            translate([0, 0, -2 + i * 2])\n                difference() {\n                    cylinder(h = 1.5, d1 = body_diameter - 4, d2 = body_diameter - 6, center = true);\n                    cylinder(h = 2, d1 = body_diameter - 8, d2 = body_diameter - 10, center = true);\n                }\n    }\n}\n\n// Single arm with realistic tapering and texture\nmodule arm() {\n    // Base connection\n    translate([0, body_diameter/2 - 2, 0])\n    union() {\n        // Main tapered arm\n        hull() {\n            translate([0, 0, 0])\n                sphere(d = arm_thickness);\n            translate([0, arm_length - 8, 0])\n                sphere(d = arm_thickness * 0.6);\n            translate([0, arm_length, 0])\n                sphere(d = arm_thickness * 0.3);\n        }\n        \n        // Add muscle-like ridges\n        for (i = [0:3]) {\n            translate([0, i * (arm_length/4), -arm_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h = arm_thickness, d1 = arm_thickness * 0.3, d2 = arm_thickness * 0.1);\n        }\n        \n        // Suction cups on underside\n        for (j = [1:5]) {\n            translate([arm_thickness/3, j * (arm_length/5), -arm_thickness/2 - 1])\n                sphere(d = 2);\n            translate([-arm_thickness/3, j * (arm_length/5), -arm_thickness/2 - 1])\n                sphere(d = 2);\n        }\n    }\n}\n\n// Eye cluster on upper surface\nmodule eye_cluster() {\n    for (angle = [0:72:359]) {\n        rotate([0, 0, angle])\n            translate([body_diameter/3, 0, body_diameter/2 - 3])\n                difference() {\n                    sphere(d = 4);\n                    translate([0, 0, -2])\n                        cylinder(h = 4, d = 2);\n                }\n    }\n}\n\n// Mouth opening on underside\nmodule mouth() {\n    translate([0, 0, -body_diameter/2 + 5])\n    difference() {\n        cylinder(h = 5, d = 15);\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([5, 0, 0])\n                    cube([10, 2, 6], center = true);\n        }\n    }\n}\n\n// Assemble the quintarioneth\nunion() {\n    // Central body\n    central_core();\n    \n    // Five arms arranged in pentagonal symmetry\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 0, 0])\n                arm();\n    }\n    \n    // Upper features\n    eye_cluster();\n    \n    // Lower features\n    mouth();\n}",
    "renders": true
  },
  {
    "household_item": "siderielon",
    "openscad_code": "// Siderielon - Realistic Medium Complexity\n// A realistic 3D printable siderielon model with functional features\n\n$fn = 64;\n\n// Overall dimensions\nbase_diameter = 60;\nheight = 75;\nwall_thickness = 2;\n\n// Main body module\nmodule siderielon_body() {\n    // Central core\n    cylinder(h=height, d=base_diameter, center=true);\n    \n    // Top dome\n    translate([0, 0, height/2 - 5])\n        sphere(d=base_diameter + 2);\n    \n    // Bottom reinforcement ring\n    translate([0, 0, -height/2 + 5])\n        cylinder(h=wall_thickness * 2, d=base_diameter + 4);\n}\n\n// Radial vanes for strength and cooling\nmodule vanes(count=8) {\n    for(i=[0:count-1]) {\n        rotate([0, 0, i * (360/count)])\n            translate([base_diameter/2 - 8, 0, 0])\n                cube([16, 1.5, height - 10], center=true);\n    }\n}\n\n// Mounting flange with bolt holes\nmodule mounting_flange() {\n    // Flange base\n    cylinder(h=6, d=base_diameter + 20, center=true);\n    \n    // Bolt holes\n    for(i=[0:5]) {\n        rotate([0, 0, i * 60])\n            translate([base_diameter/2 + 8, 0, 0])\n                cylinder(h=8, d=3.5, center=true);\n    }\n}\n\n// Internal cooling fins\nmodule cooling_fins() {\n    for(z=[-height/2 + 10:5:height/2 - 15]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=2, d=base_diameter - 6);\n                cylinder(h=3, d=base_diameter - 10);\n            }\n    }\n}\n\n// External sensor mounts\nmodule sensor_mounts() {\n    // Top sensor array\n    for(a=[0:120:240]) {\n        rotate([0, 0, a])\n            translate([base_diameter/2 - 5, 0, height/2 - 10])\n                cube([8, 4, 6], center=true);\n    }\n    \n    // Side sensor ports\n    for(a=[30:90:330]) {\n        rotate([0, 0, a])\n            translate([base_diameter/2 + 2, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=4);\n    }\n}\n\n// Central conduit\nmodule conduit() {\n    // Main conduit\n    difference() {\n        cylinder(h=height, d=base_diameter/3, center=true);\n        cylinder(h=height + 2, d=base_diameter/3 - wall_thickness, center=true);\n    }\n    \n    // Conduit supports\n    for(i=[0:3]) {\n        rotate([0, 0, i * 90])\n            translate([base_diameter/6, 0, 0])\n                cube([base_diameter/6, 2, height - 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    difference() {\n        union() {\n            siderielon_body();\n            vanes();\n        }\n        \n        // Hollow out interior\n        cylinder(h=height + 10, d=base_diameter - wall_thickness*2, center=true);\n        \n        // Remove mounting flange area\n        cylinder(h=8, d=base_diameter + 18, center=true);\n    }\n    \n    // Add mounting flange\n    translate([0, 0, -height/2 - 3])\n        mounting_flange();\n    \n    // Add internal features\n    cooling_fins();\n    conduit();\n    \n    // Add external features\n    sensor_mounts();\n    \n    // Alignment pin\n    translate([0, base_diameter/2 - 5, -height/2 + 20])\n        cylinder(h=8, d=4);\n}",
    "renders": true
  },
  {
    "household_item": "solitharon",
    "openscad_code": "// Solitharon – medium-complexity realistic style\n// Overall height ≈ 70 mm, base ≈ 40 mm, wall thickness 1.2 mm\n\n$fn = 48;          // smooth curves for realistic look\n\nmodule base() {\n    // Solid cylinder with slight taper\n    difference() {\n        cylinder(h = 8, d1 = 40, d2 = 38, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = 8.2, d1 = 37.6, d2 = 35.6, center = false);  // hollow\n    }\n}\n\nmodule stem() {\n    // Tall narrow tube\n    difference() {\n        cylinder(h = 45, d = 6, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = 45.2, d = 3.6, center = false);\n    }\n}\n\nmodule bowl() {\n    // Bulbous reservoir with wall thickness\n    difference() {\n        sphere(d = 25);\n        scale([0.9, 0.9, 0.9])\n            sphere(d = 25);\n    }\n}\n\nmodule mouthpiece() {\n    // Flared top for comfort\n    difference() {\n        cylinder(h = 4, d1 = 10, d2 = 12, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = 4.2, d1 = 7.6, d2 = 9.6, center = false);\n    }\n}\n\nmodule airhole() {\n    // Small side hole for airflow, 4 mm above bowl top\n    rotate([90, 0, 0])\n        translate([0, 12.5, 0])\n            cylinder(h = 10, d = 2.4, center = true);\n}\n\nmodule carb() {\n    // Thumb carb on stem\n    rotate([90, 0, 0])\n        translate([0, 3, 18])\n            cylinder(h = 8, d = 3, center = true);\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0, 0, 8]) stem();\n    translate([0, 0, 53]) bowl();\n    translate([0, 0, 65.5]) mouthpiece();\n}\n\ndifference() {\n    children();\n    // Hollow airway through stem and bowl\n    union() {\n        // Vertical airway\n        translate([0, 0, 8])\n            cylinder(h = 62, d = 3.6, center = false);\n        // Bowl bottom opening\n        translate([0, 0, 53])\n            sphere(d = 3.6);\n    }\n    // Air hole and carb\n    airhole();\n    carb();\n}",
    "renders": true
  },
  {
    "household_item": "stellarethoneth",
    "openscad_code": "// Stellarethoneth - a medium-complexity realistic model\n// Outer diameter ~70 mm, printable without supports\n\n$fn = 64;\n\n// Overall scale\nscale_factor = 35;\n\n// Central hub dimensions\nhub_r = 10;\nhub_h = 8;\n\n// Arm parameters\narm_count = 5;\narm_len = 18;\narm_w1 = 4.5;\narm_w2 = 2.5;\narm_h = 3.5;\n\n// Tip sphere\ntip_r = 5;\n\n// Ring thickness for strength\nwall = 1.6;\n\nmodule hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(h = hub_h, r = hub_r, center = true);\n        // Hollow center\n        cylinder(h = hub_h + 0.2, r = hub_r - wall, center = true);\n    }\n}\n\nmodule arm() {\n    hull() {\n        // Base block at hub\n        translate([0, 0, 0])\n            cube([arm_w1, arm_w1, arm_h], center = true);\n        // Mid block\n        translate([arm_len * 0.5, 0, 0])\n            cube([arm_w1 * 0.85, arm_w2 * 1.2, arm_h * 0.9], center = true);\n        // Tip block\n        translate([arm_len, 0, 0])\n            cube([arm_w2, arm_w2, arm_h * 0.8], center = true);\n    }\n}\n\nmodule arm_with_tip() {\n    union() {\n        // Arm body\n        arm();\n        // Tip sphere\n        translate([arm_len + tip_r * 0.8, 0, 0])\n            sphere(r = tip_r);\n    }\n}\n\nmodule stellarethoneth() {\n    difference() {\n        union() {\n            // Central hub\n            hub();\n            \n            // Arms in pentagonal symmetry\n            for (i = [0 : arm_count - 1]) {\n                rotate([0, 0, i * 360 / arm_count])\n                    arm_with_tip();\n            }\n        }\n        \n        // Hollow underside for printability and weight\n        translate([0, 0, -hub_h/2 - 0.1])\n            cube([hub_r * 2.2, hub_r * 2.2, wall * 2], center = true);\n    }\n}\n\n// Final scaled model\nscale([scale_factor/10, scale_factor/10, scale_factor/10])\n    stellarethoneth();",
    "renders": true
  },
  {
    "household_item": "thalorionel",
    "openscad_code": "// Thalorionel - Realistic Style, Medium Complexity\n// Approx 60mm tall when printed\n\n$fn = 36;  // Smooth curves\n\n// Main body parameters\nbody_height = 30;\nbody_radius = 12;\nneck_height = 8;\nneck_radius = 6;\nhead_height = 15;\nhead_radius = 9;\n\n// Leg parameters\nleg_length = 20;\nleg_radius = 3;\nfoot_length = 8;\nfoot_width = 5;\nfoot_height = 3;\n\n// Wing parameters\nwing_span = 35;\nwing_depth = 18;\nwing_thickness = 2;\n\nmodule main_body() {\n    // Central torso\n    cylinder(h=body_height, r=body_radius, center=true);\n    \n    // Neck transition\n    translate([0,0,body_height/2 + neck_height/2])\n        cylinder(h=neck_height, r1=body_radius*0.6, r2=neck_radius, center=true);\n    \n    // Head\n    translate([0,0,body_height/2 + neck_height + head_height/2])\n        sphere(r=head_radius);\n    \n    // Chest ridge\n    translate([0,-body_radius*0.7,0])\n        rotate([90,0,0])\n            cylinder(h=body_radius*1.4, r1=body_radius*0.3, r2=body_radius*0.1, center=true);\n}\n\nmodule legs() {\n    // Left leg\n    translate([body_radius*0.6, -body_radius*0.3, -body_height/2 - leg_length/2])\n        rotate([15,0,-10])\n            leg();\n    \n    // Right leg\n    translate([-body_radius*0.6, -body_radius*0.3, -body_height/2 - leg_length/2])\n        rotate([15,0,10])\n            leg();\n}\n\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=leg_length*0.6, r=leg_radius, center=true);\n        \n        // Lower leg\n        translate([0,0,-leg_length*0.3])\n            cylinder(h=leg_length*0.4, r=leg_radius*0.8, center=true);\n        \n        // Foot\n        translate([0,leg_radius,-leg_length/2 - foot_height/2])\n            cube([foot_length, foot_width, foot_height], center=true);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([body_radius-1, 0, body_height/2])\n        rotate([0,-10,80])\n            wing();\n    \n    // Right wing\n    translate([-body_radius+1, 0, body_height/2])\n        rotate([0,-10,-80])\n            wing();\n}\n\nmodule wing() {\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([0,0,0])\n                sphere(r=wing_thickness*2);\n            translate([wing_span*0.8, 0, -wing_depth*0.3])\n                sphere(r=wing_thickness);\n            translate([wing_span*0.5, 0, -wing_depth*0.8])\n                sphere(r=wing_thickness);\n        }\n        \n        // Wing membrane cutouts\n        for(i = [1:3]) {\n            translate([wing_span*0.2*i, 0, -wing_depth*0.2*i])\n                rotate([0,15,0])\n                    cube([wing_span*0.15, wing_thickness*3, wing_depth*0.15], center=true);\n        }\n    }\n}\n\nmodule tail() {\n    translate([0,body_radius*0.7,-body_height/2 - leg_length - 5])\n        rotate([30,0,0])\n            cylinder(h=15, r1=body_radius*0.4, r2=1, center=true);\n}\n\nmodule eyes() {\n    // Left eye\n    translate([head_radius*0.6, head_radius*0.7, head_height/2 + neck_height + body_height/2])\n        sphere(r=head_radius*0.15);\n    \n    // Right eye\n    translate([-head_radius*0.6, head_radius*0.7, head_height/2 + neck_height + body_height/2])\n        sphere(r=head_radius*0.15);\n}\n\n// Assembly\nunion() {\n    main_body();\n    legs();\n    wings();\n    tail();\n    \n    // Eyes (subtracted for sockets)\n    difference() {\n        children();\n        eyes();\n    }\n}\n\n// Add small support nubs under wings for printing\ntranslate([body_radius*0.8, 0, -body_height*0.2])\n    cylinder(h=body_height*0.3, r=2, center=true);\ntranslate([-body_radius*0.8, 0, -body_height*0.2])\n    cylinder(h=body_height*0.3, r=2, center=true);",
    "renders": true
  },
  {
    "household_item": "vesperon",
    "openscad_code": "// Vesperon - Medium Complexity Realistic Style\n// A small drone-like craft with articulated wings and sensor pods\n\n$fn = 36;\n\nmodule body_shell() {\n    difference() {\n        // Main fuselage\n        hull() {\n            // Front dome\n            translate([0, 0, 5]) sphere(d = 12);\n            // Main body\n            translate([0, 0, -3]) scale([1.2, 1, 1]) sphere(d = 18);\n            // Rear section\n            translate([0, 0, -12]) scale([0.8, 0.7, 0.7]) sphere(d = 14);\n        }\n        \n        // Cockpit window\n        translate([0, 2, 5]) scale([0.8, 0.3, 0.5]) sphere(d = 8);\n        \n        // Ventilation slots\n        for (i = [-2:2]) {\n            translate([i * 3, 0, -8]) rotate([0, 90, 0]) \n                cylinder(h = 8, d1 = 2, d2 = 1);\n        }\n    }\n}\n\nmodule thruster() {\n    difference() {\n        hull() {\n            cylinder(h = 8, d1 = 6, d2 = 4);\n            translate([0, 0, 8]) cylinder(h = 3, d1 = 4, d2 = 5);\n        }\n        \n        // Exhaust cone\n        translate([0, 0, -1]) cylinder(h = 10, d1 = 4, d2 = 0);\n    }\n}\n\nmodule sensor_pod() {\n    difference() {\n        // Main housing\n        translate([0, 0, 3]) sphere(d = 8);\n        \n        // Sensor aperture\n        translate([0, 0, 7]) cylinder(h = 3, d = 4);\n        \n        // Cooling vents\n        for (a = [0:90:270]) {\n            rotate([0, 0, a]) translate([3, 0, 2]) \n                cube([1, 2, 4], center = true);\n        }\n    }\n}\n\nmodule wing_segment(length, width) {\n    difference() {\n        // Tapered wing\n        hull() {\n            translate([0, 0, 0]) cube([width, 2, 1], center = true);\n            translate([length, 0, 0]) cube([width * 0.6, 1.5, 0.8], center = true);\n        }\n        \n        // Control surface cutout\n        translate([length * 0.7, 0, 0]) cube([length * 0.25, 2.2, 1.2], center = true);\n    }\n}\n\nmodule landing_strut() {\n    // Telescoping strut\n    difference() {\n        cylinder(h = 12, d = 3);\n        translate([0, 0, -1]) cylinder(h = 14, d = 2.2);\n    }\n    \n    // Foot pad\n    translate([0, 0, -12]) \n        scale([1.5, 1.2, 0.4]) cylinder(h = 2, d = 4);\n}\n\n// Main assembly\nunion() {\n    // Central body\n    body_shell();\n    \n    // Thrusters\n    translate([0, -6, -10]) rotate([15, 0, 0]) thruster();\n    translate([0, 6, -10]) rotate([15, 0, 0]) thruster();\n    \n    // Wings\n    for (side = [-1, 1]) {\n        translate([0, side * 10, 0]) rotate([0, side * 10, 0]) {\n            // Main wing\n            wing_segment(25, 12);\n            \n            // Wing tip sensor\n            translate([25, 0, 2]) rotate([0, 90, 0]) \n                sensor_pod();\n        }\n    }\n    \n    // Sensor pods on body\n    translate([8, 0, 3]) rotate([0, 90, 0]) sensor_pod();\n    translate([-8, 0, 3]) rotate([0, -90, 0]) sensor_pod();\n    \n    // Landing gear\n    for (x = [-6, 6]) {\n        for (y = [-5, 5]) {\n            translate([x, y, -15]) landing_strut();\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "xelionel",
    "openscad_code": "// Xelionel - Realistic Medium Complexity\n// A futuristic drone with insect-like characteristics\n\n// Main parameters\nbody_length = 30;\nbody_width = 20;\nbody_height = 15;\nleg_length = 25;\nleg_diameter = 3;\nantenna_length = 15;\nwing_span = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\n// Central body segment\nmodule body_segment(length, width, height) {\n    difference() {\n        hull() {\n            sphere(d = width, $fn = 32);\n            translate([length - width, 0, 0]) sphere(d = width * 0.8, $fn = 32);\n        }\n        \n        // Hollow out for weight reduction\n        translate([width/2, 0, 0]) {\n            scale([1.2, 0.7, 0.7]) \n            sphere(d = width - wall_thickness*2, $fn = 32);\n        }\n    }\n}\n\n// Compound eye\nmodule eye(radius) {\n    difference() {\n        sphere(r = radius, $fn = 32);\n        // Iris indentation\n        translate([0, 0, -radius*0.1]) \n        cylinder(r1 = radius*0.7, r2 = radius*0.5, h = radius*0.3, $fn = 32);\n    }\n}\n\n// Articulated leg\nmodule leg(length, diameter, joints = 3) {\n    segment_length = length / joints;\n    \n    for(i = [0:joints-1]) {\n        translate([0, 0, i * segment_length]) {\n            rotate([i * 15, 0, 0]) {\n                // Leg segment\n                cylinder(h = segment_length, d = diameter, $fn = 16);\n                \n                // Joint\n                if(i < joints-1) {\n                    translate([0, 0, segment_length]) {\n                        sphere(d = diameter * 1.5, $fn = 16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing membrane with vein structure\nmodule wing(span, chord) {\n    thickness = 0.8;\n    \n    // Main wing surface\n    difference() {\n        linear_extrude(height = thickness) {\n            polygon(points = [\n                [0, 0],\n                [span * 0.3, chord * 0.8],\n                [span * 0.7, chord],\n                [span, chord * 0.7],\n                [span * 0.8, chord * 0.3],\n                [span * 0.4, 0]\n            ]);\n        }\n        \n        // Cut veins pattern\n        for(i = [1:3]) {\n            translate([span * i/4, 0, -0.1]) {\n                rotate([0, 0, -15 * i]) {\n                    cube([span/2, thickness*0.5, thickness*2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Antenna with sensor tip\nmodule antenna(length, diameter) {\n    union() {\n        cylinder(h = length * 0.9, d = diameter, $fn = 16);\n        translate([0, 0, length * 0.9]) {\n            sphere(d = diameter * 1.5, $fn = 16);\n            // Sensor array\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60]) {\n                    translate([diameter * 0.8, 0, 0]) {\n                        sphere(d = diameter * 0.3, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central body\n    body_segment(body_length, body_width, body_height);\n    \n    // Head segment\n    translate([-body_length/2 - 10, 0, body_height/2]) {\n        rotate([0, 15, 0]) {\n            scale([1.2, 1, 0.8]) {\n                body_segment(body_length * 0.7, body_width * 0.8, body_height * 0.8);\n            }\n        }\n    }\n    \n    // Eyes\n    translate([-body_length/2 - 15, body_width/2, body_height/2]) {\n        eye(body_width * 0.25);\n    }\n    translate([-body_length/2 - 15, -body_width/2, body_height/2]) {\n        eye(body_width * 0.25);\n    }\n    \n    // Legs - 6 legs, 3 per side\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            translate([body_length * (i/3 - 0.2), side * body_width/2, -body_height/2]) {\n                rotate([0, side * 30, 0]) {\n                    leg(leg_length, leg_diameter);\n                }\n            }\n        }\n    }\n    \n    // Wings - 4 wings, 2 per side\n    for(side = [-1, 1]) {\n        translate([body_length/4, side * body_width/2, body_height/3]) {\n            rotate([0, side * -30, 0]) {\n                wing(wing_span/2, wing_span/3);\n            }\n        }\n        translate([-body_length/4, side * body_width/2, body_height/3]) {\n            rotate([0, side * -45, 0]) {\n                wing(wing_span/2.2, wing_span/3.5);\n            }\n        }\n    }\n    \n    // Antennae\n    translate([-body_length/2 - 15, body_width/3, body_height]) {\n        rotate([0, -30, 0]) {\n            antenna(antenna_length, leg_diameter * 0.7);\n        }\n    }\n    translate([-body_length/2 - 15, -body_width/3, body_height]) {\n        rotate([0, -30, 0]) {\n            antenna(antenna_length * 0.9, leg_diameter * 0.7);\n        }\n    }\n    \n    // Ventral sensors\n    translate([0, 0, -body_height/2 - 2]) {\n        difference() {\n            cylinder(h = 2, d = body_width/3, $fn = 32);\n            cylinder(h = 3, d1 = body_width/4, d2 = body_width/5, $fn = 32);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "zephirelon",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nlength = 80;\nwidth  = 32;\nheight = 20;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\nmodule zephirelon_body() {\n    // Main hull shell\n    difference() {\n        hull() {\n            // Nose sphere\n            translate([length/2, 0, 0])\n                sphere(d = width);\n\n            // Tail sphere\n            translate([-length/2, 0, 0])\n                sphere(d = width * 0.9);\n\n            // Mid-section bridging\n            translate([0, 0, 0])\n                sphere(d = width * 1.05);\n        }\n\n        // Hollow interior\n        hull() {\n            translate([length/2 - wall, 0, 0])\n                sphere(d = width - wall*2);\n\n            translate([-length/2 + wall, 0, 0])\n                sphere(d = width*0.9 - wall*2);\n\n            translate([0, 0, 0])\n                sphere(d = width*1.05 - wall*2);\n        }\n    }\n}\n\nmodule fins(count = 4) {\n    // Vertical stabilizers\n    for(i = [0 : count-1]) {\n        rotate([0, 0, i * 360/count])\n            translate([-length/2 + 5, 0, 0])\n                rotate([90, 0, 0])\n                    linear_extrude(height = wall*2, center = true)\n                        polygon(points = [\n                            [0, 0],\n                            [6, 0],\n                            [3, 12],\n                            [0, 12]\n                        ]);\n    }\n}\n\nmodule gondola() {\n    // Passenger/cargo bay\n    difference() {\n        hull() {\n            translate([0, 0, -height/2 - 8])\n                sphere(d = width * 0.7);\n\n            translate([0, 0, -height/2 - 12])\n                sphere(d = width * 0.6);\n        }\n\n        // Hollow\n        hull() {\n            translate([0, 0, -height/2 - 8])\n                sphere(d = width * 0.7 - wall*2);\n\n            translate([0, 0, -height/2 - 12])\n                sphere(d = width * 0.6 - wall*2);\n        }\n    }\n\n    // Support struts\n    for(i = [-1, 1]) {\n        translate([i * width/4, 0, -height/2 - 4])\n            cylinder(h = 4, d = 2, $fn = 8);\n    }\n}\n\nmodule propellers() {\n    // Rear prop hub\n    translate([-length/2 - 2, 0, 0])\n        cylinder(h = 4, d = 6, $fn = 16);\n\n    // Four-blade propeller\n    for(i = [0:3]) {\n        rotate([0, 90, i * 90])\n            translate([-length/2 - 4, 0, 0])\n                cube([12, 1.5, 0.8], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    zephirelon_body();\n    fins();\n    gondola();\n    propellers();\n}",
    "renders": true
  },
  {
    "household_item": "aetheroniel",
    "openscad_code": "// Aetheroniel - Medium Complexity Realistic Style\n// A crystalline energy entity with floating rings and core\n\n$fn = 64;  // Smooth curves for printing\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main module\nmodule aetheroniel() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Central crystalline core\n        difference() {\n            sphere(d = 25);\n            sphere(d = 22);\n        }\n        \n        // Core facets\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 0, 12])\n            rotate([0, 30, 0])\n            cube([12, 12, 2], center = true);\n        }\n        \n        // Energy rings\n        // Outer ring\n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        difference() {\n            torus(20, 2);\n            torus(18, 2);\n        }\n        \n        // Middle ring\n        translate([0, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            torus(15, 1.5);\n            torus(13.5, 1.5);\n        }\n        \n        // Inner ring\n        translate([0, 0, -15])\n        rotate([0, 0, 90])\n        difference() {\n            torus(10, 1);\n            torus(9, 1);\n        }\n        \n        // Support pillars for rings\n        module support_pillar(height, angle) {\n            rotate([0, 0, angle])\n            translate([height * 0.7, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 2, r = 1.5, center = true);\n        }\n        \n        // Create 6 support pillars for each ring\n        for (ring = [1:3]) {\n            for (i = [0:5]) {\n                angle = i * 60;\n                height = [18, 13.5, 9][ring - 1];\n                z_pos = [15, 0, -15][ring - 1];\n                rotate_axis = [[90, 0, 0], [0, 90, 0], [0, 0, 90]][ring - 1];\n                \n                translate([0, 0, z_pos])\n                rotate(rotate_axis)\n                support_pillar(height, angle);\n            }\n        }\n        \n        // Energy tendrils\n        module tendril(length, thickness, angle) {\n            translate([0, 0, 5])\n            rotate([0, 0, angle])\n            translate([10, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = length, r = thickness, center = true);\n        }\n        \n        // Create 8 tendrils\n        for (i = [0:7]) {\n            angle = i * 45;\n            length = [12, 15, 13, 16, 14, 17, 15, 13][i];\n            thickness = 0.8;\n            tendril(length, thickness, angle);\n        }\n        \n        // Base for stability\n        translate([0, 0, -25])\n        cylinder(h = 3, r1 = 12, r2 = 15, center = false);\n    }\n}\n\n// Torus helper module\nmodule torus(outer_radius, thickness) {\n    rotate_extrude()\n    translate([outer_radius, 0, 0])\n    circle(r = thickness);\n}\n\n// Generate the model\naetheroniel();",
    "renders": true
  },
  {
    "household_item": "amarionel",
    "openscad_code": "// Amarionel (Realistic Medium Detail)\n// A fantasy creature with dragon-like features, wings, and tail\n// Designed for 3D printing with minimum overhangs\n\n$fn = 36;\n\n// Main parameters\nbody_length = 45;\nbody_width = 25;\nbody_height = 30;\nhead_length = 20;\nhead_width = 15;\nhead_height = 18;\nleg_height = 15;\nleg_width = 6;\ntail_length = 35;\ntail_width = 8;\nwing_span = 60;\nwing_thickness = 2;\n\nmodule body() {\n    // Main torso with slight taper\n    hull() {\n        translate([0, 0, body_height/2])\n            scale([1, 0.8, 0.9])\n            sphere(d=body_width);\n        translate([body_length/2, 0, body_height/2])\n            scale([0.8, 0.7, 0.7])\n            sphere(d=body_width*0.9);\n    }\n}\n\nmodule head() {\n    // Dragon-like head with snout\n    union() {\n        // Main head\n        translate([body_length/2 + head_length/2, 0, body_height + head_height/2 - 5])\n            scale([1.2, 0.8, 1])\n            sphere(d=head_width);\n        \n        // Snout\n        translate([body_length/2 + head_length + 3, 0, body_height + head_height/2 - 7])\n            rotate([0, -10, 0])\n            scale([1.8, 0.7, 0.7])\n            sphere(d=head_width*0.6);\n        \n        // Horns\n        translate([body_length/2 + head_length/2 - 5, head_width/2, body_height + head_height])\n            cylinder(h=8, d1=3, d2=1);\n        translate([body_length/2 + head_length/2 - 5, -head_width/2, body_height + head_height])\n            cylinder(h=8, d1=3, d2=1);\n    }\n}\n\nmodule legs() {\n    // Four legs with paws\n    module single_leg(x_pos, y_pos, angle) {\n        translate([x_pos, y_pos, leg_height/2])\n            rotate([0, angle, 0])\n            union() {\n                // Upper leg\n                cylinder(h=leg_height*0.6, d=leg_width);\n                \n                // Lower leg\n                translate([0, 0, leg_height*0.6])\n                    rotate([20, 0, 0])\n                    cylinder(h=leg_height*0.4, d=leg_width*0.8);\n                \n                // Paw\n                translate([0, 0, leg_height*0.95])\n                    sphere(d=leg_width*1.2);\n            }\n    }\n    \n    // Front legs\n    single_leg(body_length/2 - 10, body_width/2 - 5, 15);\n    single_leg(body_length/2 - 10, -body_width/2 + 5, -15);\n    \n    // Back legs\n    single_leg(-body_length/2 + 10, body_width/2 - 5, -15);\n    single_leg(-body_length/2 + 10, -body_width/2 + 5, 15);\n}\n\nmodule tail() {\n    // Segmented tail with decreasing size\n    for(i = [0:4]) {\n        translate([-body_length/2 - i*tail_length/5, 0, body_height/2 - i*2])\n            rotate([0, 5*i, 0])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n            sphere(d=tail_width - i*1.5);\n    }\n}\n\nmodule wings() {\n    // Membrane wings with bone structure\n    module wing(side) {\n        mirror([side, 0, 0]) {\n            translate([0, body_width/2, body_height - 5])\n                rotate([0, 0, 30])\n                union() {\n                    // Main wing membrane\n                    linear_extrude(height=wing_thickness)\n                        polygon(points=[\n                            [0, 0],\n                            [wing_span/3, wing_span/2],\n                            [wing_span/2, wing_span/3],\n                            [wing_span/2, 0],\n                            [wing_span/3, -wing_span/4],\n                            [0, 0]\n                        ]);\n                    \n                    // Wing bones\n                    for(i = [0:2]) {\n                        rotate([0, 0, i*40 - 40])\n                            translate([wing_span/4, 0, wing_thickness/2])\n                                cube([wing_span/2, 1, wing_thickness]);\n                    }\n                }\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n}\n\nmodule eyes() {\n    // Simple spherical eyes\n    translate([body_length/2 + head_length + 5, head_width/3, body_height + head_height/2 - 5])\n        sphere(d=3);\n    translate([body_length/2 + head_length + 5, -head_width/3, body_height + head_height/2 - 5])\n        sphere(d=3);\n}\n\n// Assemble the amarionel\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    wings();\n    eyes();\n}",
    "renders": true
  },
  {
    "household_item": "astraelel",
    "openscad_code": "// Astraelel - Realistic Style, Medium Complexity\n// Size: ~60mm tall\n\n$fn = 36;\n\nmodule star_tip(height, radius) {\n    // Tapered star tip with flat top for printing\n    difference() {\n        cylinder(h=height, r1=radius*1.2, r2=radius, center=false);\n        translate([0, 0, height-0.5]) \n            cylinder(h=2, r1=radius*0.6, r2=0, center=false);\n    }\n}\n\nmodule star_arm(length, width, thickness) {\n    // Single star arm with rounded edges\n    hull() {\n        translate([0, 0, thickness/2]) \n            cube([width, length, thickness], center=true);\n        translate([0, 0, thickness/2]) \n            sphere(d=width);\n    }\n}\n\nmodule star_center(radius, thickness) {\n    // Central hub with mounting hole\n    difference() {\n        cylinder(h=thickness, r=radius, center=true);\n        cylinder(h=thickness+1, r=radius*0.3, center=true);\n    }\n}\n\nmodule star_body(outer_radius, inner_radius, thickness) {\n    // Complete 5-point star body\n    union() {\n        star_center(inner_radius, thickness+2);\n        \n        for(i=[0:4]) {\n            rotate([0, 0, i*72]) {\n                translate([0, outer_radius*0.4, 0]) {\n                    star_arm(outer_radius*0.6, outer_radius*0.15, thickness);\n                }\n                \n                translate([0, outer_radius*0.9, thickness/2]) {\n                    star_tip(outer_radius*0.2, outer_radius*0.08);\n                }\n            }\n        }\n    }\n}\n\nmodule ring_support(outer_radius, thickness) {\n    // Support ring for structural integrity\n    difference() {\n        cylinder(h=thickness*1.5, r=outer_radius*0.7, center=true);\n        cylinder(h=thickness*1.6, r=outer_radius*0.6, center=true);\n    }\n}\n\nmodule base_plate(radius, thickness) {\n    // Flat base for stable printing\n    cylinder(h=thickness, r=radius*1.2, center=false);\n}\n\n// Main assembly\nstar_radius = 30;\nthickness = 4;\n\ntranslate([0, 0, 2]) {\n    union() {\n        star_body(star_radius, star_radius*0.3, thickness);\n        ring_support(star_radius, thickness);\n    }\n}\n\ntranslate([0, 0, 0]) {\n    base_plate(star_radius, 2);\n}",
    "renders": true
  },
  {
    "household_item": "caelionel",
    "openscad_code": "// Caelionel - Realistic Style, Medium Complexity\n// Wingspan ~80mm, length ~60mm, height ~30mm\n\n// Parameters\nbody_length = 60;\nbody_width = 25;\nbody_height = 15;\n\nwing_span = 80;\nwing_chord = 25;\ntail_span = 35;\ntail_chord = 15;\n\n// Main Body\nmodule body() {\n    // Fuselage main section\n    difference() {\n        hull() {\n            // Front taper\n            translate([-body_length/2, 0, 0])\n                scale([1, 0.8, 0.8])\n                sphere(d=body_width);\n            \n            // Main body\n            translate([0, 0, 0])\n                cube([body_length, body_width, body_height], center=true);\n                \n            // Rear taper\n            translate([body_length/2, 0, 0])\n                scale([1, 0.6, 0.6])\n                sphere(d=body_width);\n        }\n        \n        // Cockpit cutout\n        translate([-body_length/4, 0, body_height/2])\n            cube([body_length/3, body_width*0.8, body_height/2], center=true);\n    }\n}\n\n// Wing Module\nmodule wing_half(root_chord, tip_chord, span) {\n    // Create tapered wing section\n    hull() {\n        // Root\n        translate([0, 0, 0])\n            cube([root_chord, span/5, 2]);\n            \n        // Tip\n        translate([root_chord/2 - tip_chord/2, span, 0])\n            cube([tip_chord, span/5, 2]);\n    }\n}\n\n// Main Wing Assembly\nmodule main_wing() {\n    union() {\n        // Left wing\n        translate([0, -body_width/2 - 2, -2])\n            wing_half(wing_chord, wing_chord*0.7, wing_span/2);\n            \n        // Right wing\n        mirror([0,1,0])\n            translate([0, -body_width/2 - 2, -2])\n                wing_half(wing_chord, wing_chord*0.7, wing_span/2);\n                \n        // Wing root fairing\n        translate([-wing_chord/2, 0, -2])\n            cube([wing_chord, body_width, 4]);\n    }\n}\n\n// Horizontal Stabilizer\nmodule horizontal_stab() {\n    union() {\n        // Left stab\n        translate([body_length/2 - tail_chord, -body_width/2 - 1, -2])\n            wing_half(tail_chord, tail_chord*0.6, tail_span/2);\n            \n        // Right stab\n        mirror([0,1,0])\n            translate([body_length/2 - tail_chord, -body_width/2 - 1, -2])\n                wing_half(tail_chord, tail_chord*0.6, tail_span/2);\n    }\n}\n\n// Vertical Stabilizer\nmodule vertical_stab() {\n    translate([body_length/2 - tail_chord/2, 0, 2])\n        rotate([0,90,0])\n            wing_half(tail_chord*1.2, tail_chord*0.8, tail_span*0.7);\n}\n\n// Propeller Hub\nmodule propeller() {\n    union() {\n        // Hub\n        translate([-body_length/2 - 5, 0, 0])\n            cylinder(h=5, d=8);\n            \n        // Blades (simplified)\n        for(i=[0:45:315]) {\n            rotate([0,0,i])\n                translate([-body_length/2 - 2.5, 0, 0])\n                    cube([25, 2, 1], center=true);\n        }\n    }\n}\n\n// Landing Gear\nmodule landing_gear() {\n    // Main gear\n    for(side=[-1,1]) {\n        translate([body_length/4, side*body_width/2, -body_height/2 - 5])\n            cylinder(h=5, d=3);\n    }\n    \n    // Nose gear\n    translate([-body_length/2 + 5, 0, -body_height/2 - 5])\n        cylinder(h=5, d=3);\n}\n\n// Assembly\nunion() {\n    body();\n    main_wing();\n    horizontal_stab();\n    vertical_stab();\n    propeller();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "household_item": "celestionel",
    "openscad_code": "// Celestionel - Realistic Style, Medium Complexity\n// A celestial sentinel with star-forged armor and cosmic wings\n\n$fn = 50;\nbody_radius = 12;\nhead_radius = 8;\nwing_span = 40;\nheight = 85;\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, height - head_radius - 5])\n        sphere(r = head_radius);\n    \n    // Helmet crest\n    translate([0, 0, height + 3])\n        cylinder(r1 = 3, r2 = 1, h = 8);\n    \n    // Eye sockets\n    for(x = [-4, 4]) {\n        translate([x, -head_radius + 2, height - 2])\n            rotate([0, 90, 0])\n                cylinder(r = 1.5, h = 3);\n    }\n    \n    // Face plate\n    translate([0, -head_radius, height - 5])\n        cube([12, 2, 10], center = true);\n}\n\nmodule torso() {\n    // Main body\n    translate([0, 0, 35])\n        cylinder(r = body_radius, h = 30);\n    \n    // Chest plate\n    translate([0, body_radius - 1, 50])\n        cube([body_radius * 1.8, 2, 20], center = true);\n    \n    // Belt\n    translate([0, body_radius - 0.5, 40])\n        cube([body_radius * 2.2, 1, 4], center = true);\n}\n\nmodule arm(side) {\n    mirror([side, 0, 0]) {\n        // Upper arm\n        translate([body_radius + 5, 0, 55])\n            rotate([0, 0, -30])\n                cylinder(r = 3, h = 12);\n        \n        // Lower arm\n        translate([body_radius + 15, -3, 52])\n            rotate([0, 0, -60])\n                cylinder(r = 2.5, h = 10);\n        \n        // Hand/glove\n        translate([body_radius + 22, -5, 49])\n            sphere(r = 3);\n    }\n}\n\nmodule leg(side) {\n    mirror([side, 0, 0]) {\n        // Thigh\n        translate([body_radius - 4, 0, 35])\n            rotate([30, 0, 0])\n                cylinder(r = 4, h = 15);\n        \n        // Shin\n        translate([body_radius - 3, 0, 18])\n            cylinder(r = 3.5, h = 15);\n        \n        // Foot\n        translate([body_radius - 3, 0, 5])\n            cube([6, 12, 4], center = true);\n    }\n}\n\nmodule wing() {\n    // Wing base\n    translate([0, body_radius + 2, 55])\n        rotate([0, -20, 0])\n            cube([2, 8, 15]);\n    \n    // Wing segments\n    for(i = [0:3]) {\n        translate([0, body_radius + 10 + i * 6, 55 - i * 3])\n            rotate([0, -20 - i * 5, 0])\n                cube([1, 8, 12 - i * 2]);\n    }\n    \n    // Wing tip\n    translate([0, body_radius + 30, 45])\n        sphere(r = 2);\n}\n\nmodule staff() {\n    // Staff pole\n    translate([body_radius + 25, -8, 35])\n        rotate([0, 90, 0])\n            cylinder(r = 1, h = 30);\n    \n    // Staff head\n    translate([body_radius + 40, -8, 35])\n        sphere(r = 4);\n    \n    // Orb holder\n    difference() {\n        translate([body_radius + 40, -8, 35])\n            sphere(r = 6);\n        translate([body_radius + 40, -8, 35])\n            sphere(r = 5);\n    }\n}\n\n// Main assembly\nunion() {\n    head();\n    torso();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Wings\n    wing();\n    mirror([-1, 0, 0])\n        wing();\n    \n    // Staff\n    staff();\n}",
    "renders": true
  },
  {
    "household_item": "elestreoniel",
    "openscad_code": "// Realistic Elestreoniel (Medium Complexity)\n// A futuristic electronic device with display, ports, and antenna\n\n$fn = 50;\n\n// Main dimensions\nlength = 80;\nwidth = 40;\nheight = 25;\nwall_thickness = 2;\n\n// Create the main body with rounded edges\nmodule main_body() {\n    difference() {\n        // Outer shell\n        minkowski() {\n            cube([length, width, height], center=true);\n            sphere(3);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 0])\n        minkowski() {\n            cube([length-wall_thickness*2, width-wall_thickness*2, height-wall_thickness*2], center=true);\n            sphere(2.5);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    translate([0, 0, height/2 - 1])\n    color([0.1, 0.1, 0.1])\n    cube([length*0.7, width*0.6, 1], center=true);\n}\n\n// Buttons module\nmodule buttons() {\n    for(i = [-1:1]) {\n        translate([i*8, -width/2 + 5, height/2 - 0.5])\n        cylinder(h=2, r=3, center=true);\n    }\n}\n\n// USB-C port\nmodule usb_port() {\n    translate([length/2 - 1, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=6, r=3, center=true);\n        cylinder(h=7, r=2.2, center=true);\n    }\n}\n\n// Cooling vents\nmodule cooling_vents() {\n    for(i = [-3:3]) {\n        translate([i*10, 0, -height/2 + 2])\n        rotate([90, 0, 0])\n        cube([2, 15, 2], center=true);\n    }\n}\n\n// Antenna\nmodule antenna() {\n    translate([length/2 - 10, width/2 - 5, height/2 + 5])\n    rotate([0, 20, 0])\n    union() {\n        // Base\n        cylinder(h=3, r=4, center=true);\n        // Rod\n        translate([0, 0, 8])\n        cylinder(h=15, r=1, center=true);\n        // Tip\n        translate([0, 0, 16])\n        sphere(r=2);\n    }\n}\n\n// LED indicators\nmodule leds() {\n    for(i = [-1:1]) {\n        translate([length/2 - 5, i*8, height/2 - 1])\n        color([0, 1, 0])\n        sphere(r=1.5);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    display();\n    buttons();\n    usb_port();\n    cooling_vents();\n    antenna();\n    leds();\n}",
    "renders": true
  },
  {
    "household_item": "empyreonel",
    "openscad_code": "// Empyreonel - Realistic Medium Complexity\n// A stylized but recognizable empyreonel with moderate detail\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 30;\nbody_height = 25;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body module\nmodule empyreonel_body() {\n    // Central fuselage\n    hull() {\n        translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        translate([body_length/2 - 5, 0, body_height/2 + 3])\n            sphere(d=body_width * 0.8);\n    }\n    \n    // Cockpit canopy\n    difference() {\n        translate([body_length/3, 0, body_height/2 + 5])\n            scale([1.2, 0.8, 0.6])\n                sphere(d=body_width * 0.7);\n        translate([body_length/3, 0, body_height/2 + 1])\n            cube([body_width * 1.5, body_width * 0.9, body_height], center=true);\n    }\n}\n\n// Wing module\nmodule wings() {\n    // Left wing\n    translate([-body_length/4, body_width/2 + 5, body_height/2 - 2])\n        rotate([0, 0, -20])\n            cube([body_length * 0.6, 25, 3]);\n    \n    // Right wing\n    translate([-body_length/4, -body_width/2 - 5, body_height/2 - 2])\n        rotate([0, 0, 20])\n            mirror([0, 1, 0])\n                cube([body_length * 0.6, 25, 3]);\n    \n    // Wing tips\n    for (side = [1, -1]) {\n        translate([body_length * 0.25, side * (body_width/2 + 30), body_height/2 - 2])\n            rotate([0, 0, side * 20])\n                cylinder(h=3, r1=5, r2=3);\n    }\n}\n\n// Engine module\nmodule engines() {\n    for (i = [1, -1]) {\n        // Engine nacelle\n        translate([i * (body_width/2 + 8), 0, body_height/2 - 5])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=6, r2=5);\n        \n        // Engine intake\n        translate([i * (body_width/2 + 8), 0, body_height/2 - 5])\n            rotate([90, 0, 0])\n                cylinder(h=3, r1=5, r2=4);\n        \n        // Exhaust\n        translate([i * (body_width/2 + 8), 0, body_height/2 + 8])\n            rotate([90, 0, 0])\n                cylinder(h=4, r1=5, r2=6);\n    }\n}\n\n// Tail section\nmodule tail() {\n    // Vertical stabilizer\n    translate([-body_length/2 + 5, 0, body_height/2 + 8])\n        rotate([0, 20, 0])\n            cube([15, 3, 20]);\n    \n    // Horizontal stabilizers\n    for (side = [1, -1]) {\n        translate([-body_length/2, side * (body_width/2 - 5), body_height/2 + 5])\n            rotate([0, side * 10, 0])\n                cube([20, 15, 2]);\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    // Main gear\n    for (x = [-body_length/4, body_length/4]) {\n        translate([x, body_width/2 - 5, 0])\n            cylinder(h=8, r=2);\n        translate([x, -body_width/2 + 5, 0])\n            cylinder(h=8, r=2);\n    }\n    \n    // Nose gear\n    translate([body_length/2 - 5, 0, 0])\n        cylinder(h=10, r=2.5);\n}\n\n// Assembly\nunion() {\n    empyreonel_body();\n    wings();\n    engines();\n    tail();\n    landing_gear();\n}",
    "renders": true
  },
  {
    "household_item": "galathionel",
    "openscad_code": "// Galathionel - Elvish harp in realistic style\n// Medium complexity, 3D printable design\n\n$fn = 32;  // Smooth curves for printing\n\nmodule harp_base() {\n    // Main sound box - hollow for acoustics\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-15, 0, 0]) cylinder(h = 40, r1 = 20, r2 = 18);\n            translate([15, 0, 0]) cylinder(h = 40, r1 = 18, r2 = 15);\n        }\n        // Hollow interior\n        translate([0, 0, 2]) cylinder(h = 36, r = 14);\n    }\n}\n\nmodule sound_hole() {\n    // Decorative sound holes along top\n    for(i = [-10:5:10]) {\n        translate([i, 0, 38]) \n            rotate([90, 0, 0]) \n                cylinder(h = 3, r = 3, $fn = 6);\n    }\n}\n\nmodule neck() {\n    // Curved neck extending upward\n    translate([-15, 0, 40])\n        rotate([0, 15, 0])\n            cylinder(h = 80, r1 = 6, r2 = 4);\n    \n    // Headstock\n    translate([-25, 0, 115])\n        rotate([0, 15, 0])\n            cube([20, 8, 6], center = true);\n}\n\nmodule pillar() {\n    // Supporting pillar\n    translate([15, 0, 40])\n        rotate([0, -20, 0])\n            cylinder(h = 75, r1 = 5, r2 = 4);\n}\n\nmodule strings() {\n    // Individual strings\n    for(i = [0:5:25]) {\n        translate([-20 + i/3, -1, 40 + i*2.5])\n            cylinder(h = 75 - i*2, r = 0.5);\n    }\n}\n\nmodule tuning_pegs() {\n    // Tuning pegs on headstock\n    for(i = [0:5:25]) {\n        translate([-15 + i/5, -5, 115])\n            rotate([0, 90, 0])\n                cylinder(h = 4, r = 1.5);\n    }\n}\n\nmodule base_feet() {\n    // Stabilizing feet\n    translate([-10, 0, 0])\n        cylinder(h = 3, r = 3);\n    translate([10, 0, 0])\n        cylinder(h = 3, r = 3);\n}\n\nmodule decorative_carving() {\n    // Celtic knotwork on soundbox\n    translate([0, 21, 20])\n        rotate([90, 0, 0])\n            linear_extrude(height = 1)\n                polygon(points = [[-5,0], [0,5], [5,0], [0,-5]]);\n}\n\n// Assembly\nunion() {\n    harp_base();\n    sound_hole();\n    neck();\n    pillar();\n    strings();\n    tuning_pegs();\n    base_feet();\n    decorative_carving();\n}",
    "renders": true
  },
  {
    "household_item": "irethiel",
    "openscad_code": "// IRETHIEL - Realistic Elven Longbow\n// Overall dimensions: ~90mm length x 20mm width x 5mm depth\n// Designed for FDM printing - 1.2mm wall thickness, no overhangs >45°\n\nbow_length = 90;\nbow_width = 20;\nbow_thickness = 5;\ngrip_length = 30;\ngrip_diameter = 6;\nstring_diameter = 1;\nlimb_taper = 4;\n\nmodule bow_limb()\n{\n    // Upper limb with realistic recurve curve\n    translate([0, bow_length/2 - 5, 0])\n    {\n        hull()\n        {\n            // Limb base\n            translate([0, 0, 0])\n                cylinder(h = bow_thickness, d1 = grip_diameter, d2 = grip_diameter - 2, center = true);\n            \n            // Recurve tip\n            translate([0, 8, -2])\n                rotate([0, 0, 15])\n                cylinder(h = bow_thickness, d1 = grip_diameter - 3, d2 = grip_diameter - 4, center = true);\n        }\n        \n        // String nock\n        translate([0, 8, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 3, d = string_diameter + 0.5, center = true);\n    }\n}\n\nmodule grip()\n{\n    // Ergonomic grip handle\n    translate([0, 0, 0])\n    {\n        difference()\n        {\n            // Main grip body\n            hull()\n            {\n                cylinder(h = grip_length, d = grip_diameter, center = true);\n                sphere(d = grip_diameter + 1);\n            }\n            \n            // Finger grooves\n            for(i = [-1, 0, 1])\n            {\n                translate([0, i * 3, -grip_length/4])\n                    rotate([90, 0, 0])\n                    cylinder(h = 8, d = 2, center = true);\n            }\n            \n            // Arrow rest\n            translate([grip_diameter/2, 0, 0])\n                cube([2, 3, grip_length/2], center = true);\n        }\n    }\n}\n\nmodule riser()\n{\n    // Central riser with decorative elven filigree\n    translate([0, 0, 0])\n    {\n        difference()\n        {\n            // Main riser block\n            cube([grip_diameter + 2, grip_length + 10, bow_thickness + 1], center = true);\n            \n            // Decorative cutouts\n            for(i = [-2, 0, 2])\n            {\n                translate([0, i * 4, 0])\n                    rotate([0, 0, 45])\n                    cylinder(h = bow_thickness + 2, d = 3, center = true);\n            }\n        }\n    }\n}\n\nmodule bow_string()\n{\n    // Realistic bowstring with serving\n    color(\"white\")\n    {\n        translate([0, bow_length/2 - 5, 0])\n        {\n            // Upper string segment\n            cylinder(h = bow_length/2 - 8, d = string_diameter, center = false);\n            \n            // Lower string segment\n            translate([0, -bow_length + 10, 0])\n                cylinder(h = bow_length/2 - 8, d = string_diameter, center = false);\n                \n            // Serving wrap\n            for(i = [-3, 0, 3])\n            {\n                translate([0, i, 0])\n                    cylinder(h = 4, d = string_diameter + 0.2, center = true);\n            }\n        }\n    }\n}\n\nmodule elven_engravings()\n{\n    // Elven vine patterns along limbs\n    for(i = [0:2:bow_length/2 - 10])\n    {\n        translate([0, i, bow_thickness/2])\n        {\n            rotate([90, 0, 0])\n            {\n                difference()\n                {\n                    cylinder(h = 0.5, d = 1.5);\n                    translate([0.5, 0, 0])\n                        cube([1, 1, 0.6], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion()\n{\n    // Central components\n    grip();\n    riser();\n    \n    // Bow limbs (mirrored top and bottom)\n    bow_limb();\n    mirror([0, 1, 0])\n        bow_limb();\n    \n    // String (for display - remove for functional bow)\n    bow_string();\n    \n    // Decorative elements\n    elven_engravings();\n    mirror([0, 1, 0])\n        elven_engravings();\n}",
    "renders": true
  },
  {
    "household_item": "lunarethiel",
    "openscad_code": "// Lunarethiel - Realistic Moon Phase Tracker Dial\n// Size: 80mm diameter, 15mm thick\n// Features: Rotating inner moon disc, engraved phase markers, base standoffs\n\n// Overall settings\n$fn = 50;\n\n// Main parameters\ndiameter = 80;\nthickness = 15;\nmoon_disc_diameter = 60;\nmoon_disc_thickness = 3;\nwall_thickness = 2.5;\nphase_markers = 8;\n\n// Base module with hollow center\nmodule base() {\n    difference() {\n        // Main disc\n        cylinder(h = thickness, d = diameter, center = true);\n        \n        // Hollow center for moon disc\n        cylinder(h = thickness + 1, d = moon_disc_diameter + wall_thickness, center = true);\n        \n        // Keyhole for rotation shaft\n        translate([0, 0, -thickness/2 - 0.1])\n            rotate([0, 0, 45])\n            cube([8, 3, thickness + 0.2], center = true);\n    }\n    \n    // Standoffs for 3D printing support\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([diameter/2 - 5, 0, thickness/2 - 1])\n                cylinder(h = 2, d = 6, center = false);\n    }\n}\n\n// Moon disc with realistic craters and phase indicators\nmodule moon_disc() {\n    rotate([0, 0, $t * 360])  // Animation rotation\n    \n    difference() {\n        union() {\n            // Main disc\n            cylinder(h = moon_disc_thickness, d = moon_disc_diameter, center = true);\n            \n            // Central hub for rotation\n            cylinder(h = moon_disc_thickness + 1, d = 8, center = true);\n            \n            // Crater details (realistic surface)\n            translate([15, 10, moon_disc_thickness/2 - 0.5])\n                sphere(d = 8);\n            translate([-12, -8, moon_disc_thickness/2 - 0.5])\n                sphere(d = 6);\n            translate([0, -15, moon_disc_thickness/2 - 0.5])\n                sphere(d = 10);\n            translate([-18, 12, moon_disc_thickness/2 - 0.5])\n                sphere(d = 7);\n            translate([8, -20, moon_disc_thickness/2 - 0.5])\n                sphere(d = 5);\n        }\n        \n        // Hollow center for shaft\n        cylinder(h = moon_disc_thickness + 2, d = 4, center = true);\n    }\n}\n\n// Phase markers around the edge\nmodule phase_markers() {\n    for(i = [0:phase_markers-1]) {\n        rotate([0, 0, i * 360/phase_markers])\n            translate([diameter/2 - 4, 0, thickness/2 - 2])\n                difference() {\n                    // Marker base\n                    cube([8, 2, 1.5], center = true);\n                    \n                    // Engraved phase symbol\n                    translate([0, 0, -0.1])\n                        cylinder(h = 2, d = 1.2, center = true);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Phase markers on base\n    phase_markers();\n    \n    // Moon disc (positioned above base)\n    translate([0, 0, (moon_disc_thickness + thickness)/2 + 0.2])\n        moon_disc();\n}",
    "renders": true
  },
  {
    "household_item": "nebulionel",
    "openscad_code": "// Realistic Nebulionel (Medium Complexity)\n// Overall size: 80mm long, 30mm wide, 35mm tall\n\n// Main parameters\nlength = 80;\nwidth = 30;\nheight = 35;\nwall = 1.5;\nnozzle_d = 6;\nbody_r = 12;\n\nmodule main_body() {\n    // Central cylindrical body\n    difference() {\n        // Main cylinder\n        cylinder(h=height*0.8, r=body_r, $fn=64);\n        \n        // Central bore for wiring\n        cylinder(h=height*0.9, r=body_r-wall*2, $fn=64);\n    }\n    \n    // Top dome cap\n    translate([0,0,height*0.8])\n    difference() {\n        sphere(r=body_r, $fn=64);\n        translate([0,0,-body_r])\n        cube([body_r*2, body_r*2, body_r], center=true);\n    }\n    \n    // Bottom base plate\n    translate([0,0,-0.1])\n    cylinder(h=2, r=body_r+2, $fn=64);\n}\n\nmodule nozzle() {\n    // Main nozzle tube\n    translate([0,0,height*0.9+body_r-2])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=length/2, r=nozzle_d/2, $fn=32);\n        cylinder(h=length/2+1, r=nozzle_d/2-wall, $fn=32);\n    }\n    \n    // Nozzle tip\n    translate([length/2,0,height*0.9+body_r-2])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=4, r1=nozzle_d/2, r2=nozzle_d/3, $fn=16);\n        cylinder(h=5, r1=nozzle_d/2-wall, r2=nozzle_d/3-wall, $fn=16);\n    }\n    \n    // Nozzle support rings\n    for(i=[1:3]) {\n        translate([0,0,height*0.9+body_r-2-i*6])\n        rotate([90,0,0])\n        difference() {\n            cylinder(h=1.5, r=nozzle_d/2+2, $fn=32);\n            cylinder(h=2, r=nozzle_d/2, $fn=32);\n        }\n    }\n}\n\nmodule handle() {\n    // Main grip\n    translate([0,-body_r-5,height/3])\n    rotate([0,20,0])\n    difference() {\n        // Grip cylinder\n        cylinder(h=20, r=6, $fn=32);\n        \n        // Grip hollow\n        cylinder(h=21, r=4, $fn=32);\n        \n        // Ergonomic cut\n        translate([0,0,10])\n        rotate([0,90,0])\n        cylinder(h=12, r=4, $fn=32);\n    }\n    \n    // Trigger guard\n    translate([10,-body_r-5,height/3])\n    rotate([0,20,0])\n    difference() {\n        // Outer guard\n        cylinder(h=15, r=8, $fn=32);\n        \n        // Inner hole\n        cylinder(h=16, r=5, $fn=32);\n    }\n}\n\nmodule control_panel() {\n    // Panel base\n    translate([body_r-1,0,height*0.6])\n    rotate([0,90,0])\n    difference() {\n        cube([height*0.4, 15, 2]);\n        translate([0,0,0.5])\n        cube([height*0.4, 13, 2]);\n    }\n    \n    // Control buttons\n    for(pos=[[-4,3], [0,3], [4,3], [-4,-3], [0,-3], [4,-3]]) {\n        translate([body_r+1, pos[0], height*0.6+pos[1]])\n        rotate([0,90,0])\n        cylinder(h=1, r=2, $fn=16);\n    }\n    \n    // Status LEDs\n    for(pos=[[-6,0], [6,0]]) {\n        translate([body_r+1, pos[0], height*0.6+pos[1]])\n        rotate([0,90,0])\n        cylinder(h=0.5, r=1.5, $fn=16);\n    }\n}\n\nmodule side_details() {\n    // Cooling vents\n    for(angle=[30:30:330]) {\n        rotate([0,0,angle])\n        translate([body_r,0,height*0.3])\n        cube([wall*2, 2, 8]);\n    }\n    \n    // Mounting brackets\n    translate([0,body_r+3,height*0.4])\n    difference() {\n        cube([6, 4, 4], center=true);\n        translate([0,0,2])\n        cylinder(h=4, r=1.5, $fn=16);\n    }\n    \n    mirror([0,1,0])\n    translate([0,body_r+3,height*0.4])\n    difference() {\n        cube([6, 4, 4], center=true);\n        translate([0,0,2])\n        cylinder(h=4, r=1.5, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    nozzle();\n    handle();\n    control_panel();\n    side_details();\n}",
    "renders": true
  },
  {
    "household_item": "pyrelionel",
    "openscad_code": "// Pyrelionel - Realistic style, medium complexity\n// 3D printable fire lion creature with articulated features\n\n$fn = 36;  // Smooth curves\nbody_length = 60;\nbody_height = 35;\nleg_height = 20;\n\n// Main body - elongated torso\nmodule body() {\n    // Central torso\n    union() {\n        // Main body segment\n        translate([0, 0, body_height/2])\n            scale([1.2, 0.8, 0.9])\n            sphere(d=body_height);\n        \n        // Chest protrusion\n        translate([-body_length/3, 0, body_height/2 - 5])\n            scale([0.8, 0.6, 0.6])\n            sphere(d=body_height);\n        \n        // Rear haunch\n        translate([body_length/3, 0, body_height/2 - 3])\n            scale([0.9, 0.7, 0.7])\n            sphere(d=body_height);\n    }\n}\n\n// Head with mane details\nmodule head() {\n    translate([-body_length/2 - 15, 0, body_height/2 + 5]) {\n        union() {\n            // Main head sphere\n            sphere(d=25);\n            \n            // Snout\n            translate([-10, 0, -5])\n                scale([1.5, 0.8, 0.8])\n                sphere(d=15);\n            \n            // Ears (triangular)\n            translate([0, 12, 8])\n                rotate([0, -30, 0])\n                cylinder(h=8, r1=6, r2=0);\n            translate([0, -12, 8])\n                rotate([0, 30, 180])\n                cylinder(h=8, r1=6, r2=0);\n            \n            // Mane spikes around head\n            for(i=[0:30:330]) {\n                rotate([0, 0, i])\n                translate([12, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h=8 + sin(i*3)*3, r1=2, r2=0.5);\n            }\n        }\n        \n        // Eyes (sunken)\n        translate([-8, 6, 2])\n            sphere(d=4);\n        translate([-8, -6, 2])\n            sphere(d=4);\n    }\n}\n\n// Leg module with paws\nmodule leg(side) {\n    translate([side * 15, 0, 0]) {\n        // Upper leg\n        rotate([15, 0, side * 5])\n        union() {\n            cylinder(h=leg_height - 5, r1=6, r2=5);\n            \n            // Paw\n            translate([0, 0, -(leg_height - 5)])\n                sphere(d=12);\n            \n            // Toes\n            for(j=[-1:1]) {\n                translate([j * 3, 0, -(leg_height - 5) - 2])\n                    sphere(d=3);\n            }\n        }\n    }\n}\n\n// Tail with flame tip\nmodule tail() {\n    translate([body_length/2 + 10, 0, body_height/2 - 5]) {\n        rotate([0, 0, 180])\n        union() {\n            // Tail segments\n            for(i=[0:3]) {\n                translate([i * 8, 0, 0])\n                rotate([0, 0, sin(i*30)*20])\n                scale([0.9, 0.9, 0.9])\n                sphere(d=10 - i*2);\n            }\n            \n            // Flame tip - multiple flame tongues\n            translate([32, 0, 0])\n            for(k=[0:45:315]) {\n                rotate([0, 0, k])\n                translate([5, 0, 0])\n                scale([0.3, 0.3, 1.5])\n                sphere(d=8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Head\n    head();\n    \n    // Legs\n    leg(1);  // Right front\n    leg(-1); // Left front\n    translate([0, 0, 0])\n    leg(1);  // Right rear\n    translate([0, 0, 0])\n    leg(-1); // Left rear\n    \n    // Tail\n    tail();\n    \n    // Flame ridge along back\n    for(i=[-body_length/2:5:body_length/2]) {\n        translate([i, 0, body_height/2 + 8])\n        rotate([0, 0, cos(i*20)*10])\n        cylinder(h=8, r1=3, r2=1);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "quintariel",
    "openscad_code": "// Quintariel OpenSCAD model – realistic, medium complexity\n// 5-pointed star with 5 wings, 5 legs, and a central ring\n// Overall size ≈ 60 mm\n\n$fn = 36;               // smooth curves\nwall = 1.5;             // printable wall thickness\n\n// ---------- main assembly ----------\nmodule quintariel() {\n    union() {\n        star_body();\n        for(a=[0:72:359]) rotate([0,0,a]) wing();\n        for(a=[0:72:359]) rotate([0,0,a]) translate([0,0,-8]) leg();\n        central_ring();\n    }\n}\n\n// ---------- star-shaped body ----------\nmodule star_body() {\n    difference() {\n        linear_extrude(height = 15, center = true, scale = 0.7, slices = 1)\n            star_2d(outer = 25, inner = 12);\n        translate([0,0,-7.6]) cylinder(h = 15.2, d = 8, center = true);\n    }\n}\n\nmodule star_2d(outer, inner) {\n    difference() {\n        circle(r = outer, $fn = 5);\n        for(a=[36:72:360]) rotate(a) translate([inner,0,0])\n            square([inner*2, inner*2], center = true);\n    }\n}\n\n// ---------- wing ----------\nmodule wing() {\n    translate([0, 22, 2]) rotate([0, -15, 0]) {\n        difference() {\n            scale([1, 2.5, 0.2]) sphere(6);          // main airfoil\n            translate([0, 0, -1.5]) cube([20, 20, 3], center = true); // flatten bottom\n        }\n        // trailing edge\n        translate([0, 5, -1]) rotate([0, 20, 0])\n            scale([0.8, 1.2, 0.15]) sphere(5);\n    }\n}\n\n// ---------- leg ----------\nmodule leg() {\n    translate([0, 15, 0]) rotate([90, 0, 0]) {\n        hull() {\n            cylinder(h = 12, d1 = 4, d2 = 2);           // tapering leg\n            translate([0, 0, 12]) sphere(2);            // foot\n        }\n    }\n}\n\n// ---------- central ring ----------\nmodule central_ring() {\n    rotate_extrude()\n        translate([6, 0, 0]) square([wall, 8], center = true);\n}\n\n// output\nquintariel();",
    "renders": true
  },
  {
    "household_item": "solithariel",
    "openscad_code": "// Solithariel - Medium complexity realistic style\n// A guardian angel with lantern and staff\n\n// Overall dimensions\ntotal_height = 80;\nbase_diameter = 35;\n\n// Parameters for realistic proportions\nbody_height = 35;\nhead_diameter = 12;\nwing_span = 45;\nstaff_height = 70;\nlantern_size = 8;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule base() {\n    // Solid base with gentle slope\n    difference() {\n        cylinder(h=5, d1=base_diameter, d2=base_diameter*0.8, $fn=64);\n        cylinder(h=5.1, d1=base_diameter-wall*2, d2=base_diameter*0.8-wall*2, $fn=64);\n    }\n}\n\nmodule body() {\n    // Torso with realistic proportions\n    translate([0, 0, 5]) {\n        // Main torso\n        cylinder(h=body_height, d1=18, d2=14, $fn=32);\n        \n        // Chest detail\n        translate([0, 0, body_height*0.6]) {\n            sphere(d=16, $fn=32);\n        }\n        \n        // Hip area\n        translate([0, 0, -2]) {\n            cylinder(h=7, d1=14, d2=16, $fn=32);\n        }\n    }\n}\n\nmodule head() {\n    translate([0, 0, 5 + body_height + head_diameter/2]) {\n        // Main head sphere\n        sphere(d=head_diameter, $fn=32);\n        \n        // Hair bun\n        translate([0, 0, head_diameter/2]) {\n            sphere(d=head_diameter*0.8, $fn=24);\n        }\n        \n        // Face detail - subtle nose\n        translate([0, head_diameter/2, 0]) {\n            sphere(d=head_diameter*0.3, $fn=16);\n        }\n    }\n}\n\nmodule arm(side = 1) {\n    // side: 1 for right, -1 for left\n    translate([side*10, 0, 5 + body_height*0.7]) {\n        rotate([0, 0, side*-20]) {\n            // Upper arm\n            cylinder(h=12, d=4, $fn=16);\n            \n            // Elbow joint\n            translate([0, 0, 12]) {\n                sphere(d=4.5, $fn=16);\n                \n                // Lower arm\n                rotate([0, 0, side*30]) {\n                    translate([0, 0, 0]) {\n                        cylinder(h=15, d=3.5, $fn=16);\n                        \n                        // Hand\n                        translate([0, 0, 15]) {\n                            sphere(d=4, $fn=16);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule wing(side = 1) {\n    // side: 1 for right, -1 for left\n    translate([side*5, -3, 5 + body_height*0.5]) {\n        rotate([0, side*10, side*20]) {\n            // Main wing\n            linear_extrude(height=wall) {\n                polygon(points=[\n                    [0, 0],\n                    [side*wing_span/2, -5],\n                    [side*wing_span, -15],\n                    [side*wing_span*0.9, -25],\n                    [side*wing_span*0.7, -30],\n                    [side*wing_span*0.5, -28],\n                    [side*wing_span*0.3, -20],\n                    [side*wing_span*0.1, -10],\n                    [0, 0]\n                ]);\n            }\n            \n            // Wing feathers - simple layered approach\n            for(i = [1:3]) {\n                translate([side*wing_span*0.3*i, -5*i, -wall/2]) {\n                    rotate([0, 0, side*5*i]) {\n                        scale([0.8 - i*0.15, 0.8 - i*0.15, 1]) {\n                            linear_extrude(height=wall) {\n                                polygon(points=[\n                                    [0, 0],\n                                    [side*10, -3],\n                                    [side*15, -8],\n                                    [side*12, -10],\n                                    [side*8, -7],\n                                    [side*3, -2],\n                                    [0, 0]\n                                ]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule staff() {\n    // Positioned in right hand\n    translate([12, 0, 5 + body_height*0.7 + 12 + 15]) {\n        rotate([90, 0, -30]) {\n            // Main staff\n            cylinder(h=staff_height, d=3, $fn=16);\n            \n            // Staff top\n            translate([0, 0, staff_height]) {\n                sphere(d=4, $fn=16);\n                \n                // Small cross detail\n                rotate([0, 90, 0]) {\n                    cylinder(h=8, d=1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule lantern() {\n    // Held in left hand\n    translate([-12, -10, 5 + body_height*0.7 + 12 + 15]) {\n        // Lantern handle\n        rotate([0, 90, 0]) {\n            cylinder(h=10, d=1.5, $fn=8);\n        }\n        \n        // Lantern body\n        translate([0, 0, -lantern_size/2]) {\n            difference() {\n                cylinder(h=lantern_size, d=lantern_size, $fn=32);\n                cylinder(h=lantern_size+0.1, d=lantern_size-wall*2, $fn=32);\n            }\n            \n            // Top and bottom caps\n            translate([0, 0, -0.5]) {\n                cylinder(h=1, d=lantern_size+2, $fn=32);\n            }\n            translate([0, 0, lantern_size-0.5]) {\n                cylinder(h=1, d=lantern_size+2, $fn=32);\n            }\n        }\n    }\n}\n\n// Assemble the solithariel\nunion() {\n    base();\n    body();\n    head();\n    \n    // Arms\n    arm(1);  // Right arm\n    arm(-1); // Left arm\n    \n    // Wings\n    wing(1);  // Right wing\n    wing(-1); // Left wing\n    \n    // Accessories\n    staff();\n    lantern();\n}",
    "renders": true
  },
  {
    "household_item": "stellarethiel",
    "openscad_code": "// Stellarethiel - Realistic style with medium complexity\n// A stellarethiel is a star-shaped artifact with crystalline core and orbital rings\n\n// Main parameters\n$fn = 64;\ncore_size = 12;\narm_length = 25;\narm_thickness = 4;\nring_radius = 20;\nring_thickness = 2;\nbase_height = 8;\nwall_thickness = 1.6;\n\n// Central crystalline core\nmodule crystalline_core() {\n    difference() {\n        // Main octahedron shape\n        intersection() {\n            rotate([0, 0, 45]) cube(core_size, center=true);\n            rotate([0, 45, 0]) cube(core_size, center=true);\n            rotate([45, 0, 0]) cube(core_size, center=true);\n        }\n        \n        // Faceted cuts for realism\n        for (i = [0:3]) {\n            rotate([0, 0, i*90]) \n                translate([core_size/4, 0, core_size/4])\n                    rotate([45, 0, 0]) \n                        cube(core_size*0.8, center=true);\n        }\n    }\n}\n\n// Star arm with realistic taper and facet\nmodule star_arm() {\n    difference() {\n        union() {\n            // Main arm body\n            hull() {\n                translate([0, 0, -arm_thickness/2]) \n                    cylinder(h=arm_thickness, r1=arm_thickness/2, r2=arm_thickness/3);\n                translate([arm_length, 0, -arm_thickness/2]) \n                    cylinder(h=arm_thickness, r1=arm_thickness/3, r2=arm_thickness/4);\n            }\n            \n            // Faceted edge\n            translate([arm_length/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=arm_length*0.8, r=arm_thickness/4, center=true);\n        }\n        \n        // Hollow center for weight reduction\n        translate([arm_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=arm_length*0.9, r=arm_thickness/2 - wall_thickness, center=true);\n    }\n}\n\n// Orbital ring with realistic connectors\nmodule orbital_ring(height) {\n    difference() {\n        // Main ring\n        translate([0, 0, height])\n            difference() {\n                cylinder(h=ring_thickness, r=ring_radius);\n                cylinder(h=ring_thickness+0.2, r=ring_radius-ring_thickness);\n            }\n        \n        // Connector slots\n        for (i = [0:5]) {\n            rotate([0, 0, i*60 + 30]) {\n                translate([ring_radius-ring_thickness/2, 0, height])\n                    rotate([90, 0, 0])\n                        cube([ring_thickness*2, ring_thickness*3, wall_thickness*2], center=true);\n            }\n        }\n    }\n}\n\n// Stabilizing base\nmodule stabilizing_base() {\n    difference() {\n        // Main base\n        cylinder(h=base_height, r=ring_radius*1.2);\n        \n        // Weight reduction cavities\n        for (j = [1:3]) {\n            cylinder(h=base_height-1, r=ring_radius*1.2 - j*wall_thickness);\n        }\n        \n        // Central hole for core\n        cylinder(h=base_height+1, r=core_size/2 + wall_thickness);\n    }\n}\n\n// Assembly\nstabilizing_base();\n\ntranslate([0, 0, base_height]) {\n    // Core\n    crystalline_core();\n    \n    // Star arms in 3D arrangement\n    for (i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([0, 0, core_size/2]) \n                rotate([30, 0, 0]) star_arm();\n            translate([0, 0, -core_size/2]) \n                rotate([-30, 0, 0]) star_arm();\n        }\n    }\n    \n    // Orbital rings at different heights\n    orbital_ring(core_size*1.5);\n    orbital_ring(core_size*2.5);\n}",
    "renders": true
  },
  {
    "household_item": "vesperoneth",
    "openscad_code": "// Vesperoneth - Realistic style, medium complexity\n// A nocturnal aerial predator with membranous wings and elongated body\n\n// Main parameters\nbody_length = 60;\nwing_span = 80;\nbody_diameter = 12;\nleg_length = 25;\n\n// Body segments\nmodule body_segment(height, radius) {\n    cylinder(h=height, r=radius, $fn=16);\n}\n\n// Create the main body\nmodule main_body() {\n    union() {\n        // Head\n        translate([0, 0, body_length * 0.9]) {\n            sphere(d=body_diameter * 1.2, $fn=16);\n            \n            // Eyes\n            translate([body_diameter/2, body_diameter/2, body_diameter/3]) {\n                sphere(d=body_diameter/3, $fn=8);\n            }\n            translate([-body_diameter/2, body_diameter/2, body_diameter/3]) {\n                sphere(d=body_diameter/3, $fn=8);\n            }\n            \n            // Mandibles\n            translate([0, body_diameter*0.8, -body_diameter/4]) {\n                cube([body_diameter/2, body_diameter, body_diameter/2], center=true);\n            }\n        }\n        \n        // Thorax\n        translate([0, 0, body_length * 0.6]) {\n            body_segment(body_length * 0.2, body_diameter * 0.9);\n        }\n        \n        // Abdomen segments\n        for(i = [0:4]) {\n            translate([0, 0, body_length * 0.5 - i * body_length * 0.1]) {\n                body_segment(body_length * 0.08, body_diameter * (0.9 - i*0.1));\n            }\n        }\n    }\n}\n\n// Wing structure\nmodule wing() {\n    difference() {\n        // Main wing membrane\n        translate([0, 0, -1]) {\n            linear_extrude(height=2) {\n                polygon(points=[\n                    [0, 0],\n                    [wing_span/2, 0],\n                    [wing_span/2 - 5, -body_length/3],\n                    [wing_span/2 - 15, -body_length/2],\n                    [wing_span/3, -body_length/1.5],\n                    [wing_span/4, -body_length/1.8],\n                    [0, -body_length/2]\n                ]);\n            }\n        }\n        \n        // Wing veins (negative space for 3D printing)\n        for(i = [1:4]) {\n            translate([i * wing_span/8, -body_length/3, -2]) {\n                cube([0.5, body_length/2, 4]);\n            }\n        }\n    }\n}\n\n// Leg segment\nmodule leg() {\n    union() {\n        // Coxa\n        cylinder(h=leg_length/4, r=body_diameter/4, $fn=8);\n        \n        // Femur\n        translate([0, 0, leg_length/4]) {\n            rotate([0, 30, 0]) {\n                cylinder(h=leg_length/3, r=body_diameter/5, $fn=8);\n            }\n        }\n        \n        // Tibia\n        translate([0, 0, leg_length/4 + leg_length/3 * cos(30)]) {\n            rotate([0, 60, 0]) {\n                cylinder(h=leg_length/2, r=body_diameter/6, $fn=8);\n            }\n        }\n        \n        // Tarsus segments\n        for(i = [1:4]) {\n            translate([0, 0, leg_length/4 + leg_length/3 * cos(30) + leg_length/2 * cos(60) + i*2]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=leg_length/10, r=body_diameter/8, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Antenna\nmodule antenna() {\n    translate([0, body_diameter/2, body_length * 0.9 + body_diameter/2]) {\n        rotate([30, 0, 0]) {\n            cylinder(h=body_length/3, r=body_diameter/10, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    main_body();\n    \n    // Wings\n    translate([0, body_diameter/2, body_length * 0.6]) {\n        rotate([0, 0, 10]) {\n            wing();\n        }\n    }\n    \n    translate([0, -body_diameter/2, body_length * 0.6]) {\n        rotate([0, 0, -10]) {\n            mirror([0, 1, 0]) {\n                wing();\n            }\n        }\n    }\n    \n    // Legs\n    for(i = [0:2]) {\n        angle = i * 120;\n        translate([body_diameter/2 * cos(angle), body_diameter/2 * sin(angle), body_length * 0.5]) {\n            rotate([0, 0, angle]) {\n                rotate([30, 0, 0]) {\n                    leg();\n                }\n            }\n        }\n    }\n    \n    // Antennae\n    translate([body_diameter/3, 0, 0]) {\n        antenna();\n    }\n    translate([-body_diameter/3, 0, 0]) {\n        antenna();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "zephireliel",
    "openscad_code": "// Zephireliel - medium complexity realistic style\n// Wings, body, head and tail sections designed for 3D printing\n\n// Overall dimensions\nwing_span = 80;\nbody_length = 40;\nbody_diameter = 12;\nhead_length = 15;\n\n// Wing module - feathered wing with realistic feather layers\nmodule wing() {\n    // Main wing arm\n    translate([0, 0, 0]) {\n        rotate([0, 0, 15]) {\n            difference() {\n                cube([wing_span/2, 8, 2], center=false);\n                translate([5, 2, -1]) cube([wing_span/2-10, 4, 4]);\n            }\n        }\n        \n        // Primary feathers\n        for(i = [0:3]) {\n            translate([20 + i*12, 4, 0]) {\n                rotate([0, 0, i*5-10]) {\n                    cube([12, 2+2*i, 1]);\n                }\n            }\n        }\n        \n        // Secondary feathers\n        for(i = [0:5]) {\n            translate([5 + i*8, 0, 0]) {\n                rotate([0, 0, -i*3]) {\n                    cube([8, 1.5, 0.8]);\n                }\n            }\n        }\n    }\n}\n\n// Body module - streamlined with chest and back contours\nmodule body() {\n    // Main body cylinder\n    rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h=body_length, d1=body_diameter, d2=body_diameter*0.8, center=true);\n            // Hollow for weight reduction\n            cylinder(h=body_length+2, d1=body_diameter-4, d2=body_diameter*0.8-4, center=true);\n        }\n    }\n    \n    // Chest protrusion\n    translate([0, -body_length/2, -body_diameter/2]) {\n        rotate([90, 0, 0]) {\n            scale([1, 1, 0.7]) {\n                sphere(d=body_diameter+4);\n            }\n        }\n    }\n    \n    // Back ridge\n    translate([0, body_length/2-5, body_diameter/2]) {\n        rotate([0, 90, 0]) {\n            cube([body_length-10, 3, 2], center=true);\n        }\n    }\n}\n\n// Head module - beak and skull structure\nmodule head() {\n    translate([0, -body_length/2-head_length/2, 0]) {\n        // Skull\n        sphere(d=body_diameter);\n        \n        // Beak\n        translate([0, -head_length/2, 0]) {\n            rotate([30, 0, 0]) {\n                difference() {\n                    cube([body_diameter/2, head_length, body_diameter/3], center=true);\n                    // Beak tip\n                    translate([0, -head_length/2-1, 0]) {\n                        cylinder(h=head_length/2, d1=0, d2=body_diameter/3, center=false);\n                    }\n                }\n            }\n        }\n        \n        // Eye socket\n        translate([body_diameter/3, 0, body_diameter/3]) {\n            sphere(d=body_diameter/4);\n        }\n    }\n}\n\n// Tail module - feathered tail fan\nmodule tail() {\n    translate([0, body_length/2+10, 0]) {\n        // Tail base\n        rotate([90, 0, 0]) {\n            cylinder(h=8, d1=body_diameter*0.8, d2=body_diameter*1.2, center=true);\n        }\n        \n        // Tail feathers\n        for(i = [-2:2]) {\n            rotate([0, 0, i*20]) {\n                translate([i*5, 10, 0]) {\n                    cube([15, 3-abs(i), 1]);\n                }\n            }\n        }\n    }\n}\n\n// Leg module - simplified for printing\nmodule leg() {\n    // Upper leg\n    translate([body_diameter/2, -body_length/4, -body_diameter/2]) {\n        rotate([0, 45, 0]) {\n            cylinder(h=8, d=3);\n            \n            // Lower leg\n            translate([0, 0, 8]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h=10, d=2.5);\n                    \n                    // Foot\n                    translate([0, 0, 10]) {\n                        cube([8, 2, 3], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Wings\n    translate([0, -body_length/4, 0]) {\n        wing();\n        mirror([1, 0, 0]) wing();\n    }\n    \n    // Tail\n    tail();\n    \n    // Legs\n    leg();\n    mirror([1, 0, 0]) leg();\n}",
    "renders": true
  },
  {
    "household_item": "goblin",
    "openscad_code": "// Realistic Goblin - Medium Complexity\n// 3D printable, ~70mm tall\n\n$fn = 32;\n\n// Overall dimensions\nbody_height = 35;\nhead_height = 20;\narm_length = 25;\nleg_length = 30;\n\nmodule goblin() {\n    // Body - hunched torso\n    union() {\n        // Main torso\n        translate([0, 0, leg_length + body_height/2])\n        scale([1, 0.8, 1.2])\n        sphere(d=body_height);\n        \n        // Belly bulge\n        translate([0, 5, leg_length + body_height/2 - 5])\n        scale([1.2, 1, 1])\n        sphere(d=body_height * 0.7);\n    }\n    \n    // Head\n    translate([0, -5, leg_length + body_height + head_height/2])\n    scale([1.1, 0.9, 1.2])\n    sphere(d=head_height);\n    \n    // Snout\n    translate([0, -12, leg_length + body_height + head_height/2 - 3])\n    rotate([20, 0, 0])\n    scale([0.7, 0.7, 0.5])\n    cylinder(h=12, d1=8, d2=5);\n    \n    // Eyes\n    for(x=[-3, 3]) {\n        translate([x, -12, leg_length + body_height + head_height/2 + 3])\n        rotate([30, 0, 0])\n        sphere(d=3);\n    }\n    \n    // Nostrils\n    for(x=[-1.5, 1.5]) {\n        translate([x, -15, leg_length + body_height + head_height/2 - 3])\n        cylinder(h=2, d=1);\n    }\n    \n    // Ears - pointed\n    for(x=[-6, 6]) {\n        translate([x, -8, leg_length + body_height + head_height - 5])\n        rotate([0, 0, x > 0 ? 15 : -15])\n        scale([0.3, 1, 1.5])\n        cylinder(h=15, d1=3, d2=0);\n    }\n    \n    // Arms - thin and long\n    for(side=[-1, 1]) {\n        // Upper arm\n        translate([side * 12, 0, leg_length + body_height - 5])\n        rotate([0, 0, side * 15])\n        rotate([30, 0, 0])\n        cylinder(h=15, d=5);\n        \n        // Forearm\n        translate([side * 20, -8, leg_length + body_height - 15])\n        rotate([0, 0, side * 30])\n        rotate([60, 0, 0])\n        cylinder(h=12, d=4);\n        \n        // Hands - clawed\n        translate([side * 25, -12, leg_length + body_height - 22])\n        sphere(d=6);\n        \n        // Fingers\n        for(f=[0:2]) {\n            translate([side * 28 + f*side*2, -14, leg_length + body_height - 24])\n            rotate([0, 0, f*20 - 20])\n            cylinder(h=8, d=2);\n        }\n    }\n    \n    // Legs - bowed\n    for(side=[-1, 1]) {\n        // Thigh\n        translate([side * 8, 0, leg_length/2 + 5])\n        rotate([0, 0, side * 10])\n        cylinder(h=15, d=7);\n        \n        // Shin\n        translate([side * 10, 0, leg_length/2 - 5])\n        rotate([0, 0, side * -10])\n        cylinder(h=15, d=6);\n        \n        // Feet - large\n        translate([side * 12, 5, 2])\n        scale([1.5, 2, 0.8])\n        sphere(d=10);\n    }\n    \n    // Hunched back details\n    translate([0, 5, leg_length + body_height - 10])\n    scale([0.8, 1, 0.6])\n    sphere(d=8);\n    \n    // Spine ridges\n    for(i=[0:3]) {\n        translate([0, 5 - i*3, leg_length + body_height - 15 - i*3])\n        sphere(d=3);\n    }\n}\n\n// Base for stability\nmodule base() {\n    translate([0, 0, -1])\n    cylinder(h=2, d=40);\n}\n\nunion() {\n    base();\n    goblin();\n}",
    "renders": true
  },
  {
    "household_item": "elf",
    "openscad_code": "// Realistic Elf Figure - Medium Complexity\n// Designed for 3D printing (50mm tall)\n\n$fn = 32; // Smooth curves for printing\n\nmodule elf_head() {\n    // Head sphere\n    translate([0, 0, 45])\n    scale([1, 1.1, 1.2])\n    sphere(8);\n    \n    // Elf ears\n    translate([-8.5, 0, 45])\n    rotate([0, -15, -30])\n    scale([2, 0.5, 3])\n    sphere(2);\n    \n    translate([8.5, 0, 45])\n    rotate([0, -15, 30])\n    scale([2, 0.5, 3])\n    sphere(2);\n    \n    // Eyes\n    for(x = [-2.5, 2.5]) {\n        translate([x, -6.5, 47])\n        scale([1, 0.5, 0.5])\n        sphere(1);\n    }\n    \n    // Nose\n    translate([0, -7.5, 45])\n    scale([0.8, 0.5, 1])\n    sphere(1);\n    \n    // Mouth\n    translate([0, -8.5, 42])\n    cube([2.5, 0.5, 0.5], center=true);\n}\n\nmodule elf_torso() {\n    // Chest\n    translate([0, 0, 30])\n    scale([1.2, 0.8, 1.5])\n    sphere(8);\n    \n    // Vest detail\n    translate([0, 0, 28])\n    scale([1.1, 0.7, 1.4])\n    difference() {\n        sphere(8);\n        translate([0, 0, -10])\n        cube([20, 20, 20], center=true);\n    }\n}\n\nmodule elf_arms() {\n    // Left arm\n    translate([-10, 0, 35])\n    rotate([0, 0, 15])\n    cylinder(h=12, r1=2, r2=1.5);\n    \n    // Left hand\n    translate([-18, 0, 32])\n    sphere(2);\n    \n    // Right arm\n    translate([10, 0, 35])\n    rotate([0, 0, -15])\n    cylinder(h=12, r1=2, r2=1.5);\n    \n    // Right hand\n    translate([18, 0, 32])\n    sphere(2);\n}\n\nmodule elf_legs() {\n    // Left leg\n    translate([-3, 0, 15])\n    cylinder(h=15, r1=2.5, r2=2);\n    \n    // Left foot\n    translate([-3, 2, 5])\n    scale([1.5, 2.5, 0.8])\n    sphere(2);\n    \n    // Right leg\n    translate([3, 0, 15])\n    cylinder(h=15, r1=2.5, r2=2);\n    \n    // Right foot\n    translate([3, 2, 5])\n    scale([1.5, 2.5, 0.8])\n    sphere(2);\n}\n\nmodule elf_hat() {\n    // Cone hat\n    translate([0, 0, 55])\n    cylinder(h1=15, h2=0, r1=4, r2=0);\n    \n    // Hat brim\n    translate([0, 0, 54])\n    cylinder(h=1, r=4.5);\n}\n\nmodule elf_belt() {\n    // Belt around waist\n    translate([0, 0, 25])\n    scale([1.3, 0.6, 0.3])\n    sphere(8);\n    \n    // Belt buckle\n    translate([0, -5, 25])\n    cube([3, 0.5, 2], center=true);\n}\n\n// Assemble the elf\nunion() {\n    elf_head();\n    elf_torso();\n    elf_arms();\n    elf_legs();\n    elf_hat();\n    elf_belt();\n}",
    "renders": true
  },
  {
    "household_item": "dwarf",
    "openscad_code": "// Realistic Dwarf - Medium Complexity\n// Height: 60mm, 3D-printable with no steep overhangs\n\n$fn = 30;\n\nmodule dwarf() {\n    // Helper for rounded boxes\n    module rounded_box(s, r) {\n        translate([r, r, 0])\n        minkowski() {\n            cube([s.x-2*r, s.y-2*r, s.z]);\n            cylinder(h=s.z, r=r, center=true);\n        }\n    }\n\n    // Head\n    module head() {\n        union() {\n            // Skull\n            translate([0, 0, 52])\n            scale([0.9, 0.8, 1.1])\n            sphere(10);\n\n            // Nose\n            translate([0, 10, 51])\n            rotate([90, 0, 0])\n            cylinder(h=6, r1=3, r2=2);\n\n            // Beard\n            translate([0, 5, 45])\n            rotate([20, 0, 0])\n            scale([1, 1.2, 0.8])\n            sphere(8);\n\n            // Mustache\n            translate([0, 11, 48])\n            rotate([45, 0, 0])\n            scale([1.2, 0.3, 0.5])\n            sphere(6);\n\n            // Eyes\n            for(x=[-4, 4])\n            translate([x, 8, 54])\n            sphere(1.5);\n\n            // Eyebrows\n            for(x=[-4, 4])\n            translate([x, 7, 56])\n            rotate([30, 0, 0])\n            scale([0.8, 0.3, 0.3])\n            sphere(2);\n\n            // Helmet\n            translate([0, 0, 60])\n            difference() {\n                sphere(12);\n                translate([0, 0, -6])\n                cube([30, 30, 12], center=true);\n            }\n\n            // Helmet rim\n            translate([0, 0, 50])\n            cylinder(h=3, r1=11, r2=11.5);\n        }\n    }\n\n    // Torso\n    module torso() {\n        union() {\n            // Chest\n            translate([0, 0, 35])\n            rounded_box([18, 12, 20], 3);\n\n            // Belt\n            translate([0, 0, 25])\n            rounded_box([20, 14, 4], 2);\n\n            // Belt buckle\n            translate([0, 8, 25])\n            cube([6, 2, 4], center=true);\n        }\n    }\n\n    // Arms\n    module arm(side) {\n        mirror([side, 0, 0])\n        translate([9, 0, 40])\n        union() {\n            // Upper arm\n            rotate([0, 0, 20])\n            cylinder(h=12, r1=3, r2=2.5);\n\n            // Forearm\n            translate([0, 5, -9])\n            rotate([0, 0, 30])\n            cylinder(h=10, r1=2.5, r2=2);\n\n            // Hand on hip\n            translate([0, 8, -16])\n            sphere(2.5);\n\n            // Axe handle\n            translate([0, 10, -14])\n            rotate([0, 90, 0])\n            cylinder(h=25, r=1);\n        }\n    }\n\n    // Legs\n    module leg(side) {\n        mirror([side, 0, 0])\n        translate([4, 0, 15])\n        union() {\n            // Thigh\n            cylinder(h=12, r1=4, r2=3.5);\n\n            // Boot\n            translate([0, 2, -8])\n            union() {\n                cylinder(h=10, r1=3.5, r2=4);\n                translate([0, 2, -10])\n                sphere(4);\n            }\n        }\n    }\n\n    // Axe\n    module axe() {\n        translate([-12, 15, 45])\n        rotate([0, 0, -30])\n        union() {\n            // Handle\n            cylinder(h=30, r=1.5);\n\n            // Axe head\n            translate([0, 0, 30])\n            union() {\n                cube([10, 2, 12], center=true);\n                translate([5, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=2, r=12);\n            }\n        }\n    }\n\n    // Assemble dwarf\n    head();\n    torso();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n    axe();\n}\n\ndwarf();",
    "renders": true
  },
  {
    "household_item": "giant",
    "openscad_code": "// Realistic Medium-Complexity Giant\n// Overall height ~80 mm, printable standing upright\n\n// Configuration\n$fn = 32;            // Smooth curves\nwall = 2;            // Minimum printable wall\nscale = 0.4;         // Global scale factor\n\nmodule giant() {\n    // Root union for the entire figure\n    union() {\n        // ---- HEAD ----\n        translate([0, 0, 70*scale])\n        head();\n\n        // ---- TORSO ----\n        translate([0, 0, 40*scale])\n        torso();\n\n        // ---- ARMS ----\n        // Left arm\n        translate([-12*scale, 0, 55*scale])\n        rotate([0, 0, 30])\n        arm();\n\n        // Right arm\n        translate([12*scale, 0, 55*scale])\n        mirror([1, 0, 0])\n        arm();\n\n        // ---- LEGS ----\n        // Left leg\n        translate([-5*scale, 0, 0])\n        leg();\n\n        // Right leg\n        translate([5*scale, 0, 0])\n        mirror([1, 0, 0])\n        leg();\n    }\n}\n\n// HEAD module: realistic skull shape\nmodule head() {\n    difference() {\n        union() {\n            // Main skull\n            sphere(8*scale);\n\n            // Jaw\n            translate([0, -7.5*scale, -5*scale])\n            scale([0.8, 0.5, 0.6])\n            sphere(8*scale);\n        }\n\n        // Eye sockets\n        for (x = [-3.5*scale, 3.5*scale]) {\n            translate([x, -5*scale, 2*scale])\n            rotate([0, 30, 0])\n            sphere(1.8*scale);\n        }\n\n        // Nostrils\n        for (x = [-1.2*scale, 1.2*scale]) {\n            translate([x, -7.8*scale, 0*scale])\n            sphere(0.8*scale);\n        }\n\n        // Mouth cavity\n        translate([0, -8*scale, -2.5*scale])\n        cube([6*scale, 2*scale, 3*scale], center=true);\n    }\n}\n\n// TORSO module: barrel chest with slight taper\nmodule torso() {\n    difference() {\n        union() {\n            // Chest\n            translate([0, 0, 10*scale])\n            cylinder(h = 25*scale, r1 = 12*scale, r2 = 10*scale);\n\n            // Shoulder blocks\n            for (x = [-12*scale, 12*scale]) {\n                translate([x, 0, 20*scale])\n                cube([8*scale, 8*scale, 4*scale], center=true);\n            }\n\n            // Belt\n            translate([0, 0, -5*scale])\n            cylinder(h = 5*scale, r = 12.5*scale);\n        }\n\n        // Neck hole\n        translate([0, 0, 25*scale])\n        cylinder(h = 5*scale, r = 5*scale);\n\n        // Waist hole for legs\n        translate([0, 0, -7.5*scale])\n        cylinder(h = 5*scale, r = 8*scale);\n    }\n}\n\n// ARM module: upper arm, forearm, hand\nmodule arm() {\n    union() {\n        // Upper arm\n        translate([0, 0, 0])\n        cylinder(h = 15*scale, r = 3*scale);\n\n        // Elbow joint\n        translate([0, 0, -15*scale])\n        sphere(3.5*scale);\n\n        // Forearm\n        translate([0, 0, -30*scale])\n        cylinder(h = 15*scale, r = 2.5*scale);\n\n        // Hand\n        translate([0, 0, -45*scale])\n        hand();\n    }\n}\n\n// HAND module: basic palm and fingers\nmodule hand() {\n    difference() {\n        union() {\n            // Palm\n            translate([0, 0, 0])\n            cube([6*scale, 3*scale, 8*scale], center=true);\n\n            // Thumb\n            translate([-3.5*scale, 0, -3*scale])\n            rotate([0, 90, 0])\n            cylinder(h = 2.5*scale, r = 1*scale);\n\n            // Fingers\n            for (i = [-2:1]) {\n                translate([i*1.3*scale, 0, -6*scale])\n                rotate([0, 90, 0])\n                cylinder(h = 4*scale, r = 0.8*scale);\n            }\n        }\n\n        // Gaps between fingers\n        for (i = [-1.3*scale, 0*scale, 1.3*scale]) {\n            translate([i, 0, -5.5*scale])\n            rotate([0, 90, 0])\n            cylinder(h = 3.5*scale, r = 0.4*scale);\n        }\n    }\n}\n\n// LEG module: thigh, shin, foot\nmodule leg() {\n    difference() {\n        union() {\n            // Thigh\n            translate([0, 0, 20*scale])\n            cylinder(h = 18*scale, r = 4.5*scale);\n\n            // Knee\n            translate([0, 0, 10*scale])\n            sphere(4.5*scale);\n\n            // Shin\n            translate([0, 0, 0])\n            cylinder(h = 18*scale, r1 = 4*scale, r2 = 3*scale);\n\n            // Foot\n            translate([0, -5*scale, -9*scale])\n            cube([6*scale, 12*scale, 4*scale], center=true);\n        }\n\n        // Sole hollow for printing stability\n        translate([0, -5*scale, -11.2*scale])\n        cube([5.5*scale, 11*scale, 2*scale], center=true);\n    }\n}\n\n// Instantiate the giant\ngiant();",
    "renders": true
  },
  {
    "household_item": "ogre",
    "openscad_code": "// Ogre Model - Realistic Style, Medium Complexity\n// Total height ~80mm, suitable for 3D printing\n\n$fn = 36;\n\n// Main assembly\nmodule ogre() {\n    // Body\n    color(\"darkolivegreen\")\n    union() {\n        // Torso\n        translate([0, 0, 30])\n            scale([1.2, 0.8, 1.5])\n            sphere(15);\n        \n        // Belly\n        translate([0, 0, 15])\n            scale([1.3, 1, 1])\n            sphere(12);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 10, 0, 0])\n            leg();\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 20, 0, 40])\n            rotate([0, 0, side * 20])\n            arm();\n    }\n    \n    // Head\n    translate([0, 0, 55])\n        head();\n    \n    // Club\n    translate([30, 15, 25])\n        rotate([0, -20, 0])\n        club();\n}\n\nmodule leg() {\n    color(\"darkolivegreen\")\n    union() {\n        // Upper leg\n        translate([0, 0, 15])\n            rotate([90, 0, 0])\n            cylinder(h = 25, r1 = 8, r2 = 6);\n        \n        // Lower leg\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n            cylinder(h = 20, r1 = 6, r2 = 5);\n        \n        // Foot\n        translate([0, -20, 2])\n            scale([1.5, 2, 0.8])\n            sphere(5);\n    }\n}\n\nmodule arm() {\n    color(\"darkolivegreen\")\n    union() {\n        // Upper arm\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 20, r1 = 6, r2 = 5);\n        \n        // Forearm\n        translate([0, 0, -20])\n            rotate([90, 0, 0])\n            cylinder(h = 18, r1 = 5, r2 = 4);\n        \n        // Hand\n        translate([0, -38, -20])\n            scale([1.2, 1.5, 0.8])\n            sphere(6);\n    }\n}\n\nmodule head() {\n    color(\"darkolivegreen\")\n    union() {\n        // Skull\n        translate([0, 0, 0])\n            scale([1, 0.9, 1.2])\n            sphere(12);\n        \n        // Jaw\n        translate([0, -10, -8])\n            rotate([20, 0, 0])\n            scale([0.8, 0.7, 0.6])\n            sphere(8);\n        \n        // Nose\n        translate([0, 0, -2])\n            cylinder(h = 6, r1 = 3, r2 = 2);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 5, -5, 3])\n                eye();\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 0])\n                rotate([0, 0, side * -30])\n                scale([0.5, 0.3, 1])\n                sphere(6);\n        }\n        \n        // Teeth\n        for(i = [-2:2]) {\n            translate([i * 2, -12, -10])\n                rotate([20, 0, 0])\n                cylinder(h = 3, r = 1);\n        }\n    }\n}\n\nmodule eye() {\n    difference() {\n        sphere(3);\n        translate([0, 0, 1.5])\n            sphere(2);\n    }\n}\n\nmodule club() {\n    color(\"saddlebrown\")\n    union() {\n        // Handle\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 3);\n        \n        // Head\n        translate([0, 0, -35])\n            scale([1.2, 1.2, 1.5])\n            sphere(8);\n        \n        // Spikes\n        for(i = [1:6]) {\n            rotate([0, 0, i * 60])\n                translate([9, 0, -35])\n                    cylinder(h = 4, r = 1);\n        }\n    }\n}\n\n// Base for stability\ntranslate([0, 0, -5])\n    color(\"dimgray\")\n    cylinder(h = 5, r = 25);\n\n// Render the ogre\nogre();",
    "renders": true
  },
  {
    "household_item": "kobold",
    "openscad_code": "// Realistic Kobold - Medium Complexity\n// Size: ~80mm tall when printed\n\n$fn = 32;  // Smooth curves for printing\n\nmodule kobold() {\n    // Body - reptilian hunched posture\n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 0.8, 1.5])\n            sphere(15);\n            \n        // Hunched back extension\n        translate([0, 8, 35])\n            rotate([25, 0, 0])\n            scale([1, 0.7, 0.8])\n            cylinder(h=20, r1=12, r2=8);\n            \n        // Belly\n        translate([0, -5, 20])\n            scale([0.9, 0.7, 0.6])\n            sphere(12);\n    }\n    \n    // Head\n    translate([0, -5, 50])\n        union() {\n            // Snout\n            translate([0, -8, 0])\n                rotate([90, 0, 0])\n                cylinder(h=15, r1=8, r2=5);\n                \n            // Main head\n            sphere(10);\n            \n            // Eye sockets\n            difference() {\n                sphere(10);\n                \n                // Left eye\n                translate([5, -8, 3])\n                    rotate([20, 0, -30])\n                    scale([1, 0.8, 0.5])\n                    sphere(4);\n                    \n                // Right eye\n                translate([-5, -8, 3])\n                    rotate([20, 0, 30])\n                    scale([1, 0.8, 0.5])\n                    sphere(4);\n            }\n            \n            // Horns\n            translate([4, 5, 8])\n                rotate([0, 30, 0])\n                cylinder(h=8, r1=3, r2=1);\n                \n            translate([-4, 5, 8])\n                rotate([0, -30, 0])\n                cylinder(h=8, r1=3, r2=1);\n                \n            // Frill\n            for(i = [-45:15:45]) {\n                rotate([0, 0, i])\n                translate([0, 10, 5])\n                    rotate([90, 0, 0])\n                    scale([0.3, 1, 0.1])\n                    cylinder(h=8, r1=2, r2=1);\n            }\n        }\n    \n    // Arms\n    // Left arm\n    translate([15, 0, 40])\n        rotate([0, 0, -30])\n        union() {\n            // Upper arm\n            rotate([90, 0, 0])\n                cylinder(h=12, r1=4, r2=3);\n                \n            // Lower arm\n            translate([0, 0, -12])\n                rotate([30, 0, 0])\n                cylinder(h=10, r1=3, r2=2.5);\n                \n            // Hand\n            translate([0, -10, -5])\n                rotate([0, 0, 90])\n                scale([1, 1.5, 0.7])\n                cylinder(h=5, r=2.5);\n        }\n        \n    // Right arm\n    translate([-15, 0, 40])\n        rotate([0, 0, 30])\n        mirror([1, 0, 0])\n        translate([15, 0, 40])\n        rotate([0, 0, -30])\n        union() {\n            // Upper arm\n            rotate([90, 0, 0])\n                cylinder(h=12, r1=4, r2=3);\n                \n            // Lower arm\n            translate([0, 0, -12])\n                rotate([30, 0, 0])\n                cylinder(h=10, r1=3, r2=2.5);\n                \n            // Hand\n            translate([0, -10, -5])\n                rotate([0, 0, 90])\n                scale([1, 1.5, 0.7])\n                cylinder(h=5, r=2.5);\n        }\n    \n    // Legs\n    // Left leg\n    translate([8, 0, 15])\n        rotate([0, 0, 15])\n        union() {\n            // Thigh\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=5, r2=4);\n                \n            // Shin\n            translate([0, 0, -15])\n                rotate([45, 0, 0])\n                cylinder(h=12, r1=4, r2=3);\n                \n            // Foot\n            translate([0, -12, -8])\n                rotate([0, 0, 90])\n                scale([1.5, 2, 0.8])\n                cylinder(h=8, r=3);\n        }\n        \n    // Right leg\n    translate([-8, 0, 15])\n        rotate([0, 0, -15])\n        mirror([1, 0, 0])\n        translate([8, 0, 15])\n        rotate([0, 0, 15])\n        union() {\n            // Thigh\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=5, r2=4);\n                \n            // Shin\n            translate([0, 0, -15])\n                rotate([45, 0, 0])\n                cylinder(h=12, r1=4, r2=3);\n                \n            // Foot\n            translate([0, -12, -8])\n                rotate([0, 0, 90])\n                scale([1.5, 2, 0.8])\n                cylinder(h=8, r=3);\n        }\n    \n    // Tail - segmented for support\n    tail_segments = 5;\n    for(i = [0:tail_segments-1]) {\n        translate([0, 8 + i*5, 20 - i*4])\n            rotate([10 + i*5, 0, 0])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1])\n            sphere(8 - i*1.5);\n    }\n}\n\n// Main assembly\nkobold();",
    "renders": true
  },
  {
    "household_item": "pixie",
    "openscad_code": "// Pixie Figure - Realistic Style, Medium Complexity\n// Designed for 3D printing - no overhangs, 60mm tall\n\n// Main pixie module\nmodule pixie() {\n    union() {\n        // Head\n        translate([0, 0, 50]) \n            head();\n        \n        // Torso\n        translate([0, 0, 30])\n            torso();\n        \n        // Legs\n        translate([-3, 0, 12])\n            leg();\n        translate([3, 0, 12])\n            mirror([1, 0, 0]) leg();\n        \n        // Arms\n        translate([-8, 0, 40])\n            rotate([0, 0, -30])\n            arm();\n        translate([8, 0, 40])\n            rotate([0, 0, 30])\n            mirror([1, 0, 0]) arm();\n        \n        // Wings\n        translate([0, 6, 42])\n            wings();\n        \n        // Hair\n        translate([0, 0, 54])\n            hair();\n    }\n}\n\n// Head with facial features\nmodule head() {\n    union() {\n        // Main head sphere\n        sphere(6, $fn=32);\n        \n        // Nose\n        translate([0, -5.8, 0])\n            scale([0.6, 0.3, 0.6])\n            sphere(1, $fn=16);\n        \n        // Eyes\n        translate([-2.2, -5.6, 2])\n            scale([1, 0.8, 1])\n            sphere(1.2, $fn=16);\n        translate([2.2, -5.6, 2])\n            scale([1, 0.8, 1])\n            sphere(1.2, $fn=16);\n        \n        // Eye pupils\n        translate([-2.2, -6.2, 2.2])\n            scale([0.4, 0.2, 0.4])\n            sphere(0.8, $fn=8);\n        translate([2.2, -6.2, 2.2])\n            scale([0.4, 0.2, 0.4])\n            sphere(0.8, $fn=8);\n        \n        // Ears (pointed)\n        translate([-5.5, 0, 0])\n            rotate([0, 0, -30])\n            scale([0.3, 3, 0.3])\n            cylinder(h=3, r=1, $fn=8);\n        translate([5.5, 0, 0])\n            rotate([0, 0, 30])\n            scale([0.3, 3, 0.3])\n            cylinder(h=3, r=1, $fn=8);\n    }\n}\n\n// Stylized hair with texture\nmodule hair() {\n    #for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([0, 0, 0])\n        scale([0.2, 6, 0.2])\n        cylinder(h=8, r=1, $fn=8);\n    }\n}\n\n// Torso with dress details\nmodule torso() {\n    union() {\n        // Upper torso\n        translate([0, 0, 5])\n            scale([6, 4, 10])\n            sphere(2, $fn=16);\n        \n        // Dress bottom\n        translate([0, 0, -2])\n            scale([8, 6, 8])\n            cylinder(h=8, r=2, $fn=16);\n        \n        // Waist detail\n        translate([0, 0, 3])\n            scale([5.5, 3.5, 1])\n            cylinder(h=2, r=1, $fn=16);\n    }\n}\n\n// Arms\nmodule arm() {\n    union() {\n        // Upper arm\n        translate([0, 0, -5])\n            rotate([90, 0, 0])\n            scale([0.8, 0.8, 6])\n            cylinder(h=1, r=1, $fn=12);\n        \n        // Lower arm\n        translate([0, -5, -9])\n            rotate([90, 0, 0])\n            scale([0.7, 0.7, 5])\n            cylinder(h=1, r=1, $fn=12);\n        \n        // Hand\n        translate([0, -9.5, -9])\n            sphere(1.2, $fn=12);\n    }\n}\n\n// Legs with shoes\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 4])\n            scale([1.2, 1.2, 6])\n            cylinder(h=1, r=1, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -2])\n            scale([1, 1, 6])\n            cylinder(h=1, r=1, $fn=12);\n        \n        // Shoe\n        translate([0, 1, -8])\n            scale([1.5, 2.5, 0.8])\n            sphere(2, $fn=16);\n    }\n}\n\n// Delicate wings\nmodule wings() {\n    difference() {\n        // Main wing structure\n        union() {\n            // Left wing\n            translate([-6, 0, 0])\n                rotate([0, -10, -20])\n                scale([8, 0.5, 12])\n                sphere(1, $fn=16);\n            \n            // Right wing\n            translate([6, 0, 0])\n                rotate([0, -10, 20])\n                scale([8, 0.5, 12])\n                sphere(1, $fn=16);\n        }\n        \n        // Wing cutouts for detail\n        for(i = [1:3]) {\n            translate([-6 - i*1.5, 0.3, 5 - i*2])\n                rotate([0, -10, -20])\n                scale([1, 0.3, 2])\n                cylinder(h=1, r=0.5, $fn=8);\n            translate([6 + i*1.5, 0.3, 5 - i*2])\n                rotate([0, -10, 20])\n                scale([1, 0.3, 2])\n                cylinder(h=1, r=0.5, $fn=8);\n        }\n    }\n}\n\n// Render the pixie\npixie();",
    "renders": true
  },
  {
    "household_item": "nymph",
    "openscad_code": "// Nymph - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm walls and no overhangs\n\n$fn = 50;  // Smooth curves\n\n// Main body\nmodule nymph() {\n    // Head\n    translate([0, 0, 85]) {\n        sphere(d = 12);\n        \n        // Eyes\n        translate([-3, 4, 2]) sphere(d = 2.5);\n        translate([3, 4, 2]) sphere(d = 2.5);\n        \n        // Nose\n        translate([0, 5, 0]) sphere(d = 1.5);\n        \n        // Mouth\n        translate([0, 6, -2]) cube([4, 1, 0.5]);\n    }\n    \n    // Torso\n    union() {\n        // Upper body\n        translate([0, 0, 65]) \n            scale([1, 0.6, 1.2]) sphere(d = 18);\n        \n        // Waist\n        translate([0, 0, 50]) \n            scale([0.8, 0.5, 1]) sphere(d = 15);\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 10, 0, 72]) {\n            rotate([0, 0, side * 20]) {\n                // Upper arm\n                cylinder(h = 12, d = 4);\n                \n                // Lower arm\n                translate([side * 6, 0, -6]) {\n                    rotate([0, 0, side * 30]) {\n                        cylinder(h = 10, d = 3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Hips\n    translate([0, 0, 40]) \n        scale([1.2, 0.8, 1]) sphere(d = 20);\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 5, 0, 30]) {\n            // Thigh\n            cylinder(h = 15, d = 5);\n            \n            // Lower leg\n            translate([side * 1, 0, -7.5]) {\n                rotate([side * 10, 0, 0]) {\n                    cylinder(h = 15, d = 4);\n                    \n                    // Foot\n                    translate([0, 0, -7.5]) {\n                        scale([1.5, 0.8, 0.5]) sphere(d = 8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Hair\n    translate([0, -8, 85]) {\n        for(i = [0:5]) {\n            rotate([0, i * 15 - 45, 0]) {\n                translate([0, -3, -2]) cylinder(h = 20, d = 4);\n            }\n        }\n    }\n    \n    // Wings\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, 60]) {\n            rotate([0, 0, side * 30]) {\n                // Wing base\n                cylinder(h = 2, d = 6);\n                \n                // Wing membrane\n                translate([0, 0, 1]) {\n                    scale([1, 0.1, 2]) sphere(d = 20);\n                }\n            }\n        }\n    }\n    \n    // Leaf covering\n    translate([0, 8, 45]) {\n        // Central stem\n        cylinder(h = 12, d = 1);\n        \n        // Leaves\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, 0, i * 3]) {\n                    scale([1.5, 0.5, 0.2]) sphere(d = 10);\n                }\n            }\n        }\n    }\n}\n\n// Create the nymph\nnymph();",
    "renders": true
  },
  {
    "household_item": "satyr",
    "openscad_code": "// Satyr - Realistic Style, Medium Complexity\n// Height ~70mm, suitable for FDM printing (0.4mm nozzle)\n\n// General settings\n$fn = 20;\n\n// Overall scale\nscale(0.7) satyr();\n\nmodule satyr() {\n    // Body\n    union() {\n        // Torso\n        translate([0, 0, 35])\n            scale([1.2, 0.8, 2])\n                sphere(10);\n\n        // Abdomen\n        translate([0, 0, 20])\n            cylinder(h = 15, r1 = 10, r2 = 8);\n\n        // Pelvis\n        translate([0, 0, 10])\n            cylinder(h = 10, r1 = 8, r2 = 6);\n\n        // Chest\n        translate([0, 0, 40])\n            scale([1.4, 1, 1.2])\n                sphere(8);\n\n        // Head\n        translate([0, 0, 55])\n            sphere(8);\n\n        // Neck\n        translate([0, 0, 47])\n            cylinder(h = 8, r = 5);\n\n        // Horns\n        for (x = [-6, 6]) {\n            translate([x, 0, 63])\n                rotate([0, x > 0 ? 15 : -15, 0])\n                    cylinder(h = 12, r1 = 2, r2 = 0.5);\n        }\n\n        // Ears\n        for (x = [-7, 7]) {\n            translate([x, 0, 57])\n                rotate([0, 0, x > 0 ? 30 : -30])\n                    scale([0.5, 0.2, 1])\n                        sphere(4);\n        }\n\n        // Arms\n        for (side = [-1, 1]) {\n            // Upper arm\n            translate([side * 10, 0, 42])\n                rotate([0, side * 20, 0])\n                    cylinder(h = 12, r = 3);\n\n            // Forearm\n            translate([side * 16, 0, 32])\n                rotate([0, side * 40, 0])\n                    cylinder(h = 10, r = 2.5);\n\n            // Hand\n            translate([side * 20, 0, 22])\n                sphere(3);\n        }\n\n        // Legs\n        for (side = [-1, 1]) {\n            // Upper leg (human)\n            translate([side * 5, 0, 8])\n                rotate([0, side * 10, 0])\n                    cylinder(h = 15, r1 = 3, r2 = 2.5);\n\n            // Lower leg (goat)\n            translate([side * 6, 0, -5])\n                rotate([0, side * 5, 0])\n                    cylinder(h = 18, r1 = 2.5, r2 = 2);\n\n            // Hoof\n            translate([side * 6.5, 0, -16])\n                scale([1.5, 1, 0.5])\n                    sphere(4);\n        }\n\n        // Tail\n        translate([0, -8, 10])\n            rotate([45, 0, 0])\n                cylinder(h = 15, r1 = 2, r2 = 1);\n\n        // Tail tuft\n        translate([0, -15, 6])\n            sphere(2);\n\n        // Beard\n        translate([0, 5, 50])\n            scale([0.8, 0.5, 1])\n                sphere(5);\n\n        // Nose\n        translate([0, 6, 54])\n            sphere(2);\n\n        // Eyes\n        for (x = [-3, 3]) {\n            translate([x, 6, 56])\n                sphere(1);\n        }\n\n        // Mouth\n        translate([0, 7.5, 52])\n            scale([1, 0.2, 0.5])\n                sphere(1.5);\n\n        // Chest detail\n        translate([0, -3, 38])\n            scale([0.5, 0.3, 1])\n                sphere(3);\n\n        // Knee joints\n        for (side = [-1, 1]) {\n            translate([side * 5.5, 0, 0])\n                sphere(2.5);\n        }\n\n        // Elbow joints\n        for (side = [-1, 1]) {\n            translate([side * 13, 0, 36])\n                sphere(2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "leprechaun",
    "openscad_code": "// Leprechaun Figure - Realistic Style, Medium Complexity\n// Height: 65mm, suitable for 3D printing\n\n$fn = 50;\n\nmodule leprechaun() {\n    // Colors\n    color_shirt = [0, 100, 0];\n    color_pants = [139, 69, 19];\n    color_skin = [255, 222, 173];\n    color_belt = [0, 0, 0];\n    color_buckle = [255, 215, 0];\n    color_hat = [0, 100, 0];\n    color_buckle = [255, 215, 0];\n    \n    // Head\n    translate([0, 0, 55]) {\n        difference() {\n            sphere(d = 18);\n            translate([0, 0, -10]) cube([20, 20, 10], center = true);\n        }\n        \n        // Nose\n        translate([0, 9.5, 0]) sphere(d = 3);\n        \n        // Eyes\n        translate([-6, 8, 2]) sphere(d = 2.5);\n        translate([6, 8, 2]) sphere(d = 2.5);\n        \n        // Eyebrows\n        translate([-6, 8, 6]) rotate([90, 0, 0]) cylinder(h = 0.5, r1 = 3, r2 = 1);\n        translate([6, 8, 6]) rotate([90, 0, 0]) cylinder(h = 0.5, r1 = 3, r2 = 1);\n        \n        // Mouth\n        translate([0, 9, -4]) rotate([90, 0, 0]) cylinder(h = 0.5, r1 = 3, r2 = 2);\n        \n        // Ears\n        translate([-9.5, 0, 0]) rotate([0, 0, -20]) scale([0.7, 0.3, 1]) sphere(d = 8);\n        translate([9.5, 0, 0]) rotate([0, 0, 20]) scale([0.7, 0.3, 1]) sphere(d = 8);\n    }\n    \n    // Hat\n    translate([0, 0, 65]) {\n        // Main hat\n        cylinder(h = 15, r1 = 12, r2 = 8);\n        \n        // Brim\n        translate([0, 0, 0]) cylinder(h = 2, r1 = 18, r2 = 18);\n        \n        // Belt on hat\n        translate([0, 0, 7]) cylinder(h = 3, r1 = 12.5, r2 = 12.5);\n        \n        // Buckle\n        translate([0, -12.5, 7.5]) cube([5, 2, 2], center = true);\n    }\n    \n    // Body\n    translate([0, 0, 35]) {\n        // Shirt\n        difference() {\n            cylinder(h = 20, r1 = 14, r2 = 12);\n            translate([0, 0, 10]) cube([30, 30, 20], center = true);\n        }\n        \n        // Arms\n        translate([-14, 0, 10]) rotate([0, 0, 15]) cylinder(h = 15, r = 4);\n        translate([14, 0, 10]) rotate([0, 0, -15]) cylinder(h = 15, r = 4);\n        \n        // Hands\n        translate([-22, 0, 23]) sphere(d = 6);\n        translate([22, 0, 23]) sphere(d = 6);\n    }\n    \n    // Belt\n    translate([0, 0, 34]) {\n        cylinder(h = 4, r1 = 14.5, r2 = 14.5);\n        \n        // Buckle\n        translate([0, -14.5, 2]) cube([8, 2, 4], center = true);\n    }\n    \n    // Legs\n    translate([0, 0, 15]) {\n        // Pants\n        cylinder(h = 20, r1 = 12, r2 = 8);\n        \n        // Legs\n        translate([-4, 0, 0]) cylinder(h = 15, r = 4);\n        translate([4, 0, 0]) cylinder(h = 15, r = 4);\n        \n        // Shoes\n        translate([-4, 0, -7.5]) scale([1.2, 2, 0.8]) sphere(d = 10);\n        translate([4, 0, -7.5]) scale([1.2, 2, 0.8]) sphere(d = 10);\n    }\n    \n    // Beard\n    translate([0, 0, 45]) {\n        difference() {\n            cylinder(h = 10, r1 = 10, r2 = 12);\n            translate([0, 0, -5]) cube([20, 20, 15], center = true);\n        }\n        \n        // Beard details\n        for(i = [-8:2:8]) {\n            translate([i, 11, 2]) rotate([90, 0, 0]) cylinder(h = 5, r1 = 1, r2 = 0.5);\n        }\n    }\n}\n\n// Render the leprechaun\nleprechaun();",
    "renders": true
  },
  {
    "household_item": "jormungandr",
    "openscad_code": "// Jormungandr - Midgard Serpent\n// Realistic style, medium complexity\n\n// Scale factor for overall size\nscale_factor = 1;\n\n// Head module\nmodule head() {\n    // Main head shape\n    difference() {\n        union() {\n            // Snout\n            translate([0, 0, 5])\n                scale([8, 6, 4])\n                sphere(5);\n            \n            // Main skull\n            translate([0, 0, 0])\n                scale([10, 8, 6])\n                sphere(6);\n            \n            // Lower jaw\n            translate([0, -6, -2])\n                scale([8, 4, 3])\n                sphere(4);\n        }\n        \n        // Eye sockets\n        translate([4, 2, 2])\n            scale([1.5, 1.5, 1.5])\n            sphere(3);\n        \n        translate([-4, 2, 2])\n            scale([1.5, 1.5, 1.5])\n            sphere(3);\n        \n        // Nostrils\n        translate([2, 4, 3])\n            rotate([0, 45, 0])\n            cylinder(h=3, r=1);\n        \n        translate([-2, 4, 3])\n            rotate([0, -45, 0])\n            cylinder(h=3, r=1);\n    }\n    \n    // Teeth\n    for(i = [0:5]) {\n        angle = i * 15 - 37.5;\n        // Upper teeth\n        translate([sin(angle) * 7, cos(angle) * 7, 0])\n            rotate([0, 0, angle])\n            cylinder(h=3, r1=1, r2=0.5);\n    }\n}\n\n// Body segment module\nmodule body_segment(size, rotation) {\n    difference() {\n        // Main segment\n        rotate([0, rotation, 0])\n            scale([size, size * 0.8, size * 0.6])\n            sphere(5);\n        \n        // Scale texture\n        for(i = [0:3]) {\n            angle = i * 90;\n            rotate([0, 0, angle])\n                translate([size * 3, 0, 0])\n                scale([0.3, 0.3, 0.2])\n                sphere(2);\n        }\n    }\n}\n\n// Tail fin module\nmodule tail_fin() {\n    translate([0, 0, -5])\n        scale([8, 3, 1])\n        cylinder(h=8, r1=4, r2=0);\n}\n\n// Main body\nmodule jormungandr() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Head\n        head();\n        \n        // Neck segments\n        for(i = [1:8]) {\n            translate([i * 8 - 5, sin(i * 15) * 2, cos(i * 15) * 1])\n                body_segment(10 - i * 0.5, i * 3);\n        }\n        \n        // Main body coils\n        for(i = [1:12]) {\n            angle = i * 30;\n            radius = 25 - i * 0.5;\n            translate([cos(angle) * radius, sin(angle) * radius, -i * 2])\n                body_segment(8 - i * 0.2, -i * 2);\n        }\n        \n        // Tail segments\n        for(i = [1:6]) {\n            translate([cos(i * 30) * (20 - i * 2), sin(i * 30) * (20 - i * 2), -20 - i * 2])\n                body_segment(6 - i * 0.3, -i * 5);\n        }\n        \n        // Tail fin\n        translate([cos(210) * 8, sin(210) * 8, -30])\n            rotate([0, 0, 210])\n            tail_fin();\n    }\n}\n\n// Base for stability\ndifference() {\n    union() {\n        // Ocean base\n        translate([0, 0, -35])\n            scale([40, 40, 2])\n            cube(1, center=true);\n        \n        // Jormungandr\n        jormungandr();\n    }\n    \n    // Remove bottom for printing\n    translate([0, 0, -40])\n        cube([100, 100, 10], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "tanuki",
    "openscad_code": "// Tanuki (Japanese raccoon dog) - realistic style, medium complexity\n// Dimensions: ~75 mm tall, 3 mm wall thickness for 3D printing\n\n$fn = 48;  // Smooth curves\n\nmodule tanuki() {\n    union() {\n        // Main body\n        body();\n\n        // Head\n        translate([0, 30, 25]) head();\n\n        // Limbs\n        // Right front leg\n        translate([12, 15, 0]) rotate([0, -15, 10]) leg();\n        // Left front leg\n        translate([-12, 15, 0]) mirror([1,0,0]) rotate([0, -15, 10]) leg();\n        // Right rear leg\n        translate([10, -25, 0]) rotate([0, 15, -10]) leg();\n        // Left rear leg\n        translate([-10, -25, 0]) mirror([1,0,0]) rotate([0, 15, -10]) leg();\n\n        // Tail\n        translate([0, -40, 15]) tail();\n    }\n}\n\nmodule body() {\n    // Main torso - ellipsoid shape\n    scale([1.2, 1.5, 1]) \n        sphere(d=40);\n\n    // Belly bulge\n    translate([0, 0, -15])\n        scale([1, 1.3, 0.5])\n            sphere(d=35);\n\n    // Back arch\n    translate([0, 0, 10])\n        scale([1.1, 0.8, 0.6])\n            sphere(d=30);\n}\n\nmodule head() {\n    union() {\n        // Main head shape\n        sphere(d=30);\n\n        // Snout\n        translate([0, 18, -5])\n            scale([1, 1.5, 0.8])\n                sphere(d=15);\n\n        // Ears\n        // Right ear\n        translate([10, 0, 10])\n            rotate([0, -10, 20])\n                ear();\n        // Left ear\n        translate([-10, 0, 10])\n            mirror([1,0,0]) \n                rotate([0, -10, 20])\n                    ear();\n\n        // Eyes\n        // Right eye\n        translate([7, 10, 3])\n            eye();\n        // Left eye\n        translate([-7, 10, 3])\n            mirror([1,0,0])\n                eye();\n\n        // Nose\n        translate([0, 22, -2])\n            scale([1, 0.7, 0.5])\n                sphere(d=5);\n\n        // Mouth line\n        translate([0, 20, -8])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, d1=10, d2=8);\n    }\n}\n\nmodule ear() {\n    // Raccoon dog ear - triangular with rounded tip\n    rotate([0, -30, 0])\n        scale([0.5, 1, 0.1])\n            cylinder(h=15, d1=8, d2=3);\n}\n\nmodule eye() {\n    // Realistic eye with pupil\n    difference() {\n        sphere(d=4);\n        translate([0, 1, -1])\n            sphere(d=2);\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    cylinder(h=15, d1=10, d2=8);\n    \n    // Lower leg\n    translate([0, 0, -15])\n        cylinder(h=12, d1=8, d2=6);\n    \n    // Paw\n    translate([0, 0, -27])\n        sphere(d=8);\n}\n\nmodule tail() {\n    // Bushy tail - series of spheres\n    for(i = [0:5]) {\n        translate([0, -i*5, -i*2])\n            scale([1 + i*0.1, 1, 1 + i*0.2])\n                sphere(d=15 - i*2);\n    }\n}\n\n// Generate the model\ntanuki();",
    "renders": true
  },
  {
    "household_item": "oni",
    "openscad_code": "// Oni Demon Figure - Realistic Style, Medium Complexity\n// Dimensions: 60mm tall, 50mm wide, 30mm deep\n\n$fn = 32;\n\nmodule oni_head() {\n    // Main head shape\n    union() {\n        // Skull base\n        sphere(d = 35);\n        \n        // Jaw extension\n        translate([0, -10, -8])\n            scale([1.1, 1.3, 0.8])\n            sphere(d = 30);\n        \n        // Brow ridges\n        for(x = [-12, 12]) {\n            translate([x, 12, 5])\n                rotate([0, 0, x > 0 ? -20 : 20])\n                scale([1, 0.5, 0.5])\n                cube([8, 15, 8], center = true);\n        }\n    }\n}\n\nmodule oni_horns() {\n    // Left horn\n    translate([-12, 5, 18])\n        rotate([0, -10, -25])\n        cylinder(h1 = 2, h2 = 0, r1 = 6, r2 = 1, h = 25);\n    \n    // Right horn\n    translate([12, 5, 18])\n        rotate([0, -10, 25])\n        cylinder(h1 = 2, h2 = 0, r1 = 6, r2 = 1, h = 25);\n}\n\nmodule oni_face() {\n    difference() {\n        oni_head();\n        \n        // Eye sockets\n        for(x = [-8, 8]) {\n            translate([x, 8, 5])\n                sphere(d = 8);\n        }\n        \n        // Nostrils\n        for(x = [-3, 3]) {\n            translate([x, -5, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 5, r = 2);\n        }\n        \n        // Mouth cavity\n        translate([0, -15, -12])\n            scale([1, 1.5, 0.8])\n            sphere(d = 15);\n    }\n    \n    // Eyes\n    for(x = [-8, 8]) {\n        translate([x, 8, 2])\n            sphere(d = 4);\n    }\n    \n    // Teeth\n    for(i = [-2:2]) {\n        translate([i * 4, -18, -10])\n            rotate([90, 0, 0])\n            cylinder(h1 = 2, h2 = 0, r1 = 1.5, r2 = 2, h = 4);\n    }\n}\n\nmodule oni_body() {\n    // Torso\n    union() {\n        // Chest\n        translate([0, 0, -20])\n            scale([1.2, 0.8, 1.5])\n            sphere(d = 30);\n        \n        // Waist\n        translate([0, 0, -35])\n            scale([1, 0.9, 1])\n            cylinder(h = 15, r1 = 12, r2 = 10);\n    }\n}\n\nmodule oni_arms() {\n    // Left arm\n    translate([-20, 0, -25])\n        rotate([0, 0, -20])\n        union() {\n            cylinder(h = 20, r = 6);\n            translate([0, 0, -20])\n                sphere(d = 8);\n        }\n    \n    // Right arm\n    translate([20, 0, -25])\n        rotate([0, 0, 20])\n        union() {\n            cylinder(h = 20, r = 6);\n            translate([0, 0, -20])\n                sphere(d = 8);\n        }\n}\n\nmodule oni_legs() {\n    // Left leg\n    translate([-8, 0, -50])\n        union() {\n            cylinder(h = 15, r1 = 7, r2 = 6);\n            translate([0, 0, -15])\n                sphere(d = 12);\n        }\n    \n    // Right leg\n    translate([8, 0, -50])\n        union() {\n            cylinder(h = 15, r1 = 7, r2 = 6);\n            translate([0, 0, -15])\n                sphere(d = 12);\n        }\n}\n\n// Assemble the oni\nunion() {\n    // Head assembly\n    translate([0, 0, 25])\n        union() {\n            oni_face();\n            oni_horns();\n        }\n    \n    // Body assembly\n    union() {\n        oni_body();\n        oni_arms();\n        oni_legs();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "yokai",
    "openscad_code": "// Realistic medium-complexity 3D-printable Yokai (Tengu)\n// Overall height ≈ 65 mm, base footprint ≈ 45 mm\n\n$fn = 60;\n\nmodule tengu_yokai() {\n\n    // ---------- HEAD ----------\n    // Skull-like base\n    difference() {\n        sphere(d = 32);\n        translate([0, 0, -20]) cube([40, 50, 50], center = true);\n    }\n\n    // Beak (Tengu’s long nose)\n    translate([0, 20, -5]) rotate([90, 0, 0])\n        cylinder(h = 28, r1 = 6, r2 = 2);\n\n    // Eye holes\n    for (x = [-11, 11])\n        translate([x, 10, 4])\n            sphere(d = 8);\n\n    // Brow ridge\n    translate([0, 8, 9])\n        cube([30, 5, 4], center = true);\n\n    // ---------- HAT (Tengu’s small round cap) ----------\n    translate([0, 0, 20])\n        union() {\n            cylinder(h = 4, r = 16);\n            translate([0, 0, 4])\n                cylinder(h = 2, r = 17);\n        }\n\n    // ---------- BODY ----------\n    translate([0, 0, -30])\n        union() {\n            // Torso\n            cylinder(h = 35, r1 = 18, r2 = 12);\n\n            // Belt\n            translate([0, 0, -15])\n                cylinder(h = 5, r = 18.5);\n\n            // Loincloth front flap\n            translate([0, 10, -32])\n                cube([20, 1, 15], center = true);\n        }\n\n    // ---------- WINGS ----------\n    // Left wing\n    translate([-20, 0, -15])\n        union() {\n            rotate([0, 0, 40])\n                scale([1, 0.3, 0.2])\n                    sphere(d = 40);\n            translate([-8, 0, -5])\n                rotate([0, 0, 20])\n                    scale([0.5, 0.2, 0.15])\n                        sphere(d = 35);\n        }\n\n    // Right wing (mirror of left)\n    mirror([1, 0, 0])\n        translate([-20, 0, -15])\n            union() {\n                rotate([0, 0, 40])\n                    scale([1, 0.3, 0.2])\n                        sphere(d = 40);\n                translate([-8, 0, -5])\n                    rotate([0, 0, 20])\n                        scale([0.5, 0.2, 0.15])\n                            sphere(d = 35);\n            }\n\n    // ---------- LEGS ----------\n    module leg(offset, angle) {\n        translate([offset, 0, -65])\n            rotate([angle, 0, 0])\n                union() {\n                    // Thigh\n                    cylinder(h = 20, r = 6);\n                    translate([0, 0, -20])\n                        // Shin\n                        cylinder(h = 18, r = 5);\n                    translate([0, 0, -38])\n                        // Foot block\n                        cube([10, 22, 6], center = true);\n                }\n    }\n\n    leg(-6, 5);\n    leg(6, -5);\n\n    // ---------- ARMS ----------\n    module arm(side) {\n        translate([side * 18, 0, -18])\n            rotate([0, 0, side * -30])\n                union() {\n                    // Upper arm\n                    cylinder(h = 20, r = 5);\n                    translate([0, 0, -20])\n                        // Forearm\n                        rotate([0, 0, side * 15])\n                            cylinder(h = 18, r = 4.5);\n                    translate([0, 0, -38])\n                        // Hand block\n                        cube([7, 10, 4], center = true);\n                }\n    }\n\n    arm(1);\n    arm(-1);\n}\n\n// Final assembly centered for easy printing\ntranslate([0, 0, 35]) tengu_yokai();",
    "renders": true
  },
  {
    "household_item": "kappa",
    "openscad_code": "// Kappa (medium-complexity realistic style)\n// Approx. 75 mm tall, printable without supports\n\n$fn = 36;\n\n// Overall scale\nscale(0.8)\nunion() {\n\n    // --- Head & Face ---\n    // Main head shell (turtle-like)\n    difference() {\n        // Outer dome\n        translate([0,0,55])\n            scale([1.1,1,0.9])\n            sphere(r=22);\n\n        // Flat bottom opening for neck\n        translate([0,0,25])\n            cube([50,50,60], center=true);\n    }\n\n    // Snout protrusion\n    translate([0,-15,50])\n        rotate([20,0,0])\n        scale([1.2,1.6,1])\n        cylinder(h=18, r1=12, r2=8);\n\n    // Nostrils\n    for(x=[-4,4])\n        translate([x,-23,43])\n            rotate([20,0,0])\n            cylinder(h=8, r=2);\n\n    // Eyes\n    module eye(x) {\n        translate([x,8,58])\n            rotate([0,30,0])\n            sphere(r=5.5);\n        translate([x+1.5,10,59])\n            sphere(r=2.5);\n    }\n    eye(-9);\n    eye(9);\n\n    // Dish (sara) on head\n    difference() {\n        translate([0,2,75.5])\n            cylinder(h=3, r=14);\n        translate([0,2,75.5])\n            cylinder(h=4, r=12.5);\n    }\n\n    // --- Torso & Limbs ---\n    // Body\n    translate([0,0,25])\n        scale([1.1,0.9,1.2])\n        sphere(r=20);\n\n    // Carapace plates (shell segments)\n    for(a=[-60:25:60]) {\n        rotate([a,0,0])\n            translate([0,0,8])\n            scale([1.1,1,0.3])\n            sphere(r=20);\n    }\n\n    // Arms\n    module arm(sign) {\n        translate([sign*18,0,35]) {\n            rotate([0,0,sign*-30])\n                cylinder(h=20, r=5);\n            translate([sign*8,0,-5])\n                rotate([0,90,0])\n                sphere(r=6);\n        }\n    }\n    arm(1);\n    arm(-1);\n\n    // Legs\n    module leg(sign) {\n        translate([sign*10,0,8])\n            rotate([0,sign*15,0])\n            cylinder(h=22, r=6);\n    }\n    leg(1);\n    leg(-1);\n\n    // Webbed hand (simplified)\n    module webbed_hand(sign) {\n        translate([sign*28,-5,30])\n            rotate([0,0,sign*30])\n            scale([1,0.4,0.2])\n            sphere(r=8);\n    }\n    webbed_hand(1);\n    webbed_hand(-1);\n\n    // --- Details ---\n    // Neck ring\n    translate([0,0,32])\n        cylinder(h=6, r=9);\n\n    // Mouth line\n    translate([0,-22,45])\n        rotate([20,0,0])\n        scale([1,0.2,0.2])\n        cube([20,1,6], center=true);\n\n    // Beak tip\n    translate([0,-28,42])\n        sphere(r=3);\n}",
    "renders": true
  },
  {
    "household_item": "nekomata",
    "openscad_code": "// Nekomata - Realistic style with medium complexity\n// A mystical two-tailed cat spirit from Japanese folklore\n\nmodule nekomata() {\n    // Body parameters\n    body_length = 45;\n    body_width = 25;\n    body_height = 30;\n    \n    // Head parameters\n    head_radius = 15;\n    \n    // Tail parameters\n    tail_length = 40;\n    tail_width = 8;\n    \n    // Leg parameters\n    leg_height = 18;\n    leg_width = 6;\n    \n    // Main body - slightly curved\n    translate([0, 0, leg_height]) {\n        // Main torso\n        difference() {\n            hull() {\n                // Front half\n                translate([-body_length/4, 0, 0])\n                    scale([1.2, 1, 1])\n                    sphere(d=body_width);\n                // Back half\n                translate([body_length/4, 0, 0])\n                    scale([0.8, 1, 0.9])\n                    sphere(d=body_width);\n            }\n            // Hollow center\n            translate([0, 0, -body_height/4])\n                cube([body_length-4, body_width-4, body_height], center=true);\n        }\n    }\n    \n    // Head\n    translate([-body_length/2 - head_radius/2, 0, leg_height + body_height/2]) {\n        sphere(d=head_radius*2);\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([0, side*head_radius*0.7, head_radius]) {\n                rotate([30, 0, 0])\n                    cylinder(h=head_radius*0.8, r1=head_radius*0.3, r2=0);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([-head_radius*0.3, side*head_radius*0.5, head_radius*0.7]) {\n                sphere(d=head_radius*0.4);\n                translate([0, 0, head_radius*0.05])\n                    sphere(d=head_radius*0.2);\n            }\n        }\n        \n        // Nose\n        translate([-head_radius*0.8, 0, head_radius*0.5]) {\n            sphere(d=head_radius*0.3);\n        }\n        \n        // Whiskers\n        for(side = [-1, 1]) {\n            for(i = [0:2]) {\n                translate([-head_radius*0.9, side*(head_radius*0.3 + i*2), head_radius*0.2 - i*1.5]) {\n                    rotate([0, 0, side*30 - i*10])\n                        cylinder(h=head_radius*0.8, r=0.5);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for(x = [-body_length/3, body_length/3])\n    for(side = [-1, 1]) {\n        translate([x, side*body_width/2, leg_height/2]) {\n            cylinder(h=leg_height, r=leg_width, $fn=8);\n            \n            // Paw\n            translate([0, 0, leg_height/2 + 0.5])\n                sphere(d=leg_width*1.5);\n        }\n    }\n    \n    // Two tails - split and curved\n    for(tail_num = [0, 1]) {\n        translate([body_length/2, (tail_num == 0 ? -1 : 1) * tail_width/2, leg_height + body_height/3]) {\n            // Base of tail\n            rotate([0, -20, 0])\n                cylinder(h=tail_width*2, r1=tail_width, r2=tail_width*0.8);\n            \n            // Main tail segments\n            for(i = [0:3]) {\n                angle = -45 + i*15 + tail_num*5;\n                height = i*8;\n                translate([sin(angle)*i*5, cos(angle)*i*5 + tail_num*i*2, height]) {\n                    rotate([0, 0, angle])\n                        rotate([0, 90, 0])\n                            cylinder(h=tail_length/4, r1=tail_width*(0.8-i*0.1), r2=tail_width*(0.7-i*0.1));\n                }\n            }\n            \n            // Tail tip\n            translate([sin(-45+60)*20, cos(-45+60)*20 + tail_num*8, 32]) {\n                sphere(d=tail_width*0.8);\n            }\n        }\n    }\n    \n    // Chest fur detail\n    translate([-body_length/2 - 5, 0, leg_height + body_height/2 - 5]) {\n        for(i = [0:5]) {\n            rotate([0, 0, i*45])\n                translate([0, i*2, 0])\n                    sphere(d=3);\n        }\n    }\n}\n\n// Scale to reasonable print size (80mm long)\nscale(80/50)\n    nekomata();",
    "renders": true
  },
  {
    "household_item": "boggart",
    "openscad_code": "// Realistic Boggart - medium detail\n// 3D printable with no overhangs, ~65mm tall\n\n$fn = 36;\nwall = 1.2;\n\nmodule boggart() {\n    // Base - solid foundation\n    translate([0,0,0])\n        cylinder(h=3, r1=15, r2=12);\n    \n    // Body - hunched torso\n    translate([0,0,3])\n        scale([1.2,1,1.5])\n            sphere(r=12);\n    \n    // Head - skull-like\n    translate([0,8,22])\n        scale([0.9,0.7,1])\n            sphere(r=8);\n    \n    // Eye sockets\n    for(x=[-3,3])\n        translate([x,10,25])\n            rotate([0,90,0])\n                cylinder(h=5, r1=2, r2=3);\n    \n    // Nose cavity\n    translate([0,5,23])\n        rotate([0,90,0])\n            cylinder(h=4, r1=1.5, r2=2.5);\n    \n    // Mouth - jagged\n    translate([0,2,20])\n    difference() {\n        cube([8,2,3], center=true);\n        for(i=[-3:2:3])\n            translate([i,1,21])\n                cube([1,3,2], center=true);\n    }\n    \n    // Arms - thin and reaching\n    module arm(side) {\n        translate([side*10,0,15])\n        rotate([0,side*20,0])\n        union() {\n            // Upper arm\n            rotate([90,0,side*20])\n                cylinder(h=12, r=2.5);\n            // Forearm\n            translate([side*5,-2,0])\n            rotate([90,0,side*40])\n                cylinder(h=10, r=2);\n            // Hand\n            translate([side*8,-8,side*2])\n            difference() {\n                sphere(r=3);\n                // Claw indentations\n                for(i=[-1:0.5:1])\n                    translate([0,0,i*1.5])\n                        cube([0.5,4,0.5], center=true);\n            }\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Back spikes - curved\n    for(i=[-4:2:4]) {\n        translate([i,-10,8+i])\n        rotate([0,20,0])\n            cylinder(h=10-i, r1=1.5, r2=0.5);\n    }\n    \n    // Legs - sturdy for standing\n    module leg(side) {\n        translate([side*5,0,0])\n        union() {\n            // Thigh\n            translate([0,-5,3])\n                cylinder(h=15, r1=3, r2=2.5);\n            // Lower leg\n            translate([0,-5,16])\n                cylinder(h=12, r1=2.5, r2=2);\n            // Foot\n            translate([0,-5,26])\n                rotate([90,0,0])\n                    cylinder(h=6, r1=3, r2=4);\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Tattered cloak - draped\n    translate([0,0,10])\n    difference() {\n        cylinder(h=20, r1=18, r2=20);\n        // Tears\n        for(i=[0:60:360])\n            rotate([0,0,i])\n                translate([0,10,10])\n                    cube([8,20,20], center=true);\n    }\n}\n\n// Render the boggart\nboggart();",
    "renders": true
  },
  {
    "household_item": "brownie",
    "openscad_code": "// Realistic 3D printable brownie with medium complexity\n// Overall dimensions: 60x40x15mm (typical brownie slab)\n\n// Top surface texture module with cracks and bumps\nmodule brownie_top() {\n    difference() {\n        // Main top surface with slight dome\n        translate([0,0,13]) scale([1,1,0.15]) sphere(d=60, $fn=50);\n        \n        // Random cracks using difference\n        for (i = [0:4]) {\n            rotate([0,0,rand(i*123)*360]) \n                translate([rand(i*456)*30-15, rand(i*789)*20-10, 5])\n                    scale([rand(i*321)*1.5+0.5, rand(i*654)*0.3+0.1, 6])\n                        cube([10, 3, 10], center=true);\n        }\n        \n        // Small holes for texture\n        for (j = [0:8]) {\n            translate([rand(j*111)*50-25, rand(j*222)*30-15, 0])\n                sphere(d=rand(j*333)*2+1, $fn=8);\n        }\n    }\n}\n\n// Nut pieces module\nmodule nut_pieces() {\n    for (k = [0:5]) {\n        translate([rand(k*999)*50-25, rand(k*888)*30-15, 14+rand(k*777)*0.5])\n            rotate([rand(k*666)*90, rand(k*555)*90, rand(k*444)*90])\n                scale([1, 0.7, 0.5])\n                    cylinder(h=2, d=4, $fn=6);\n    }\n}\n\n// Main brownie body with rounded edges\nmodule brownie_body() {\n    difference() {\n        // Main block with filleted edges\n        minkowski() {\n            cube([54,34,12], center=true);\n            sphere(d=4, $fn=12);\n        }\n        \n        // Remove excess from minkowski\n        translate([0,0,-8]) cube([70,50,20], center=true);\n    }\n}\n\n// Side texture with irregularities\nmodule side_texture() {\n    difference() {\n        brownie_body();\n        \n        // Small chips on sides\n        for (m = [0:10]) {\n            angle = m*36;\n            rad = 30;\n            x = cos(angle)*rad;\n            y = sin(angle)*rad;\n            translate([x, y, rand(m*777)*6-3])\n                sphere(d=rand(m*888)*1.5+1, $fn=6);\n        }\n    }\n}\n\n// Bottom with slight baking texture\nmodule brownie_bottom() {\n    difference() {\n        translate([0,0,-7.5]) cube([56,36,1], center=true);\n        \n        // Baking tray marks\n        for (n = [0:3]) {\n            translate([n*14-21, 0, -7.5])\n                cube([0.5, 36, 0.3], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with texture\n    side_texture();\n    \n    // Add top surface\n    brownie_top();\n    \n    // Add nut pieces\n    nut_pieces();\n    \n    // Add bottom texture\n    brownie_bottom();\n}\n\n// Helper function for pseudo-random numbers\nfunction rand(seed) = rands(0,1,1,seed)[0];",
    "renders": true
  },
  {
    "household_item": "bucca",
    "openscad_code": "// Buca (Traditional Spanish Jug) - Realistic Style, Medium Complexity\n// Overall height ~70mm, base diameter ~45mm\n\n$fn = 36;\n\n// Main body parameters\nbody_h = 55;\nbody_r_top = 22;\nbody_r_mid = 28;\nbody_r_bottom = 20;\nneck_h = 8;\nneck_r = 12;\n\nmodule buca_body() {\n    // Create bell-shaped body using stacked cylinders\n    union() {\n        // Bottom base\n        cylinder(h=3, r1=body_r_bottom, r2=body_r_bottom);\n        \n        // Main curved body\n        translate([0,0,3])\n            cylinder(h=body_h-10, r1=body_r_bottom, r2=body_r_mid);\n            \n        // Upper taper\n        translate([0,0,body_h-7])\n            cylinder(h=7, r1=body_r_mid, r2=body_r_top);\n            \n        // Neck\n        translate([0,0,body_h])\n            cylinder(h=neck_h, r=neck_r);\n    }\n}\n\n// Handle module\nmodule handle() {\n    handle_length = 35;\n    handle_width = 8;\n    handle_thickness = 5;\n    \n    difference() {\n        // Main handle shape\n        union() {\n            // Upper attachment\n            translate([body_r_top+neck_r, 0, body_h+neck_h-5])\n                rotate([0,90,0])\n                    cylinder(h=handle_thickness, r=handle_width/2);\n                    \n            // Curved handle\n            translate([body_r_mid+5, 0, body_h/2])\n                rotate([90,0,0])\n                    rotate_extrude(angle=90)\n                        translate([handle_length/2, 0, 0])\n                            square([handle_length, handle_thickness], center=true);\n                            \n            // Lower attachment\n            translate([body_r_mid, 0, 15])\n                rotate([0,90,0])\n                    cylinder(h=handle_thickness*1.2, r=handle_width/2);\n        }\n        \n        // Hollow out handle\n        translate([body_r_mid+5, 0, body_h/2])\n            rotate([90,0,0])\n                rotate_extrude(angle=90)\n                    translate([handle_length/2, 0, 0])\n                        square([handle_length-2, handle_thickness-2], center=true);\n    }\n}\n\n// Spout module\nmodule spout() {\n    spout_length = 25;\n    spout_base = 12;\n    spout_tip = 6;\n    \n    // Create curved spout\n    hull() {\n        // Base at neck\n        translate([0, body_r_top, body_h+neck_h/2])\n            rotate([0,-30,0])\n                cylinder(h=5, r1=spout_base, r2=spout_base);\n                \n        // Tip\n        translate([0, body_r_top+spout_length*sin(30), body_h+neck_h/2+spout_length*cos(30)])\n            rotate([0,-30,0])\n                cylinder(h=3, r1=spout_tip, r2=spout_tip);\n    }\n    \n    // Hollow spout\n    difference() {\n        children();\n        // Inner cavity\n        translate([0, body_r_top+2, body_h+neck_h/2+2])\n            rotate([0,-30,0])\n                cylinder(h=spout_length, r1=spout_tip-2, r2=spout_tip-2);\n    }\n}\n\n// Base reinforcement ring\nmodule base_ring() {\n    translate([0,0,1.5])\n        difference() {\n            cylinder(h=3, r1=body_r_bottom+2, r2=body_r_bottom+2);\n            cylinder(h=3, r1=body_r_bottom, r2=body_r_bottom);\n        }\n}\n\n// Assemble the buca\nunion() {\n    // Main vessel\n    difference() {\n        union() {\n            buca_body();\n            base_ring();\n        }\n        \n        // Interior cavity\n        translate([0,0,-1])\n            cylinder(h=body_h+neck_h+2, r1=body_r_bottom-3, r2=neck_r-2);\n    }\n    \n    // Handle\n    handle();\n    \n    // Spout\n    spout() {\n        // Spout solid part\n        translate([0, body_r_top, body_h+neck_h/2])\n            rotate([0,-30,0])\n                cylinder(h=5, r1=12, r2=6);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "cailleach",
    "openscad_code": "// Cailleach (Celtic hag/witch) 3D printable model\n// Medium complexity, realistic style\n// Height: 70mm\n\n// Overall scale factor\n$fn = 32;\n\n// Main module\nmodule cailleach() {\n    // Base rock\n    translate([0, 0, 0]) {\n        difference() {\n            sphere(d = 25);\n            translate([0, 0, -12]) cube([30, 30, 15], center = true);\n        }\n    }\n    \n    // Body (hunched figure)\n    translate([0, 0, 20]) {\n        difference() {\n            // Main body shape\n            scale([1, 0.8, 1.2]) sphere(d = 20);\n            \n            // Hollow out for printing\n            translate([0, 0, -5]) scale([0.8, 0.7, 1]) sphere(d = 18);\n        }\n    }\n    \n    // Head\n    translate([0, 2, 35]) {\n        difference() {\n            sphere(d = 15);\n            // Hollow head\n            translate([0, 0, -7]) sphere(d = 12);\n        }\n    }\n    \n    // Nose\n    translate([0, 7, 35]) {\n        rotate([20, 0, 0]) \n        cylinder(h = 5, d1 = 3, d2 = 2);\n    }\n    \n    // Chin\n    translate([0, 6, 30]) {\n        sphere(d = 4);\n    }\n    \n    // Eyes (sunken)\n    for(x = [-3, 3]) {\n        translate([x, 5, 37]) {\n            rotate([30, 0, 0])\n            cylinder(h = 3, d = 2);\n        }\n    }\n    \n    // Hood\n    translate([0, 0, 35]) {\n        difference() {\n            scale([1.2, 1.3, 1.2]) sphere(d = 18);\n            translate([0, 0, -10]) cube([25, 25, 15], center = true);\n        }\n    }\n    \n    // Cape\n    translate([0, -5, 25]) {\n        difference() {\n            // Main cape\n            rotate([10, 0, 0]) \n            cylinder(h = 25, d1 = 20, d2 = 30);\n            \n            // Remove front\n            translate([0, 10, 0]) cube([25, 20, 30], center = true);\n            \n            // Hollow\n            translate([0, 0, 5]) \n            rotate([10, 0, 0]) \n            cylinder(h = 25, d1 = 17, d2 = 27);\n        }\n    }\n    \n    // Arms\n    // Left arm\n    translate([-8, 5, 28]) {\n        rotate([0, 0, 30]) {\n            difference() {\n                cylinder(h = 15, d = 4);\n                translate([0, 0, 2]) cylinder(h = 11, d = 2.5);\n            }\n        }\n    }\n    \n    // Right arm\n    translate([8, 5, 28]) {\n        rotate([0, 0, -30]) {\n            difference() {\n                cylinder(h = 15, d = 4);\n                translate([0, 0, 2]) cylinder(h = 11, d = 2.5);\n            }\n        }\n    }\n    \n    // Staff\n    translate([12, -8, 15]) {\n        difference() {\n            cylinder(h = 50, d = 3);\n            translate([0, 0, 2]) cylinder(h = 46, d = 2);\n        }\n        \n        // Staff top\n        translate([0, 0, 50]) {\n            sphere(d = 4);\n        }\n    }\n    \n    // Hair strands\n    for(i = [0:3]) {\n        angle = i * 45 - 67.5;\n        translate([0, 0, 35]) {\n            rotate([0, 0, angle]) {\n                translate([6, 0, 0]) {\n                    rotate([90, 0, 0]) \n                    cylinder(h = 8, d1 = 1.5, d2 = 0.5);\n                }\n            }\n        }\n    }\n    \n    // Walking stick\n    translate([0, 0, 0]) {\n        cylinder(h = 20, d = 2);\n    }\n}\n\n// Generate the model\ncailleach();",
    "renders": true
  },
  {
    "household_item": "hamadryad",
    "openscad_code": "// Hamadryad (King Cobra) - Realistic Medium Complexity\n// Designed for 3D printing with minimal overhangs\n\n$fn = 36;\n\n// Main body parameters\nbody_length = 80;\nbody_diameter = 8;\nneck_width = 5;\nhood_width = 25;\nhood_thickness = 2;\n\n// Head parameters\nhead_length = 12;\nhead_diameter = 6;\nsnout_length = 4;\neye_diameter = 1.5;\n\n// Tail parameters\ntail_segments = 20;\ntail_start_diameter = body_diameter;\ntail_end_diameter = 1;\n\n// Body segments\nmodule body_segment(diameter, length, z_rot) {\n    translate([0, 0, length/2])\n    rotate([0, 0, z_rot])\n    cylinder(h = length, d = diameter, center = true);\n}\n\n// Create coiled body\nmodule snake_body() {\n    union() {\n        // Main body coil\n        for (i = [0:5]) {\n            angle = i * 60;\n            radius = 20 - i * 2;\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            translate([x, y, i * body_diameter])\n            body_segment(body_diameter - i * 0.5, body_diameter * 1.2, angle);\n        }\n        \n        // Neck rising up\n        for (i = [0:3]) {\n            z_pos = 5 * body_diameter + i * neck_width;\n            y_offset = i * 2;\n            translate([0, y_offset, z_pos])\n            cylinder(h = neck_width, d1 = body_diameter - 2, d2 = neck_width, center = true);\n        }\n    }\n}\n\n// Hood with scale texture\nmodule hood() {\n    difference() {\n        union() {\n            // Main hood shape\n            translate([0, 0, 5 * body_diameter + 3 * neck_width + hood_thickness/2])\n            scale([1, 1.5, 0.3])\n            sphere(d = hood_width);\n            \n            // Hood support\n            translate([0, 0, 5 * body_diameter + 3 * neck_width])\n            cylinder(h = hood_thickness, d = neck_width * 1.5, center = true);\n        }\n        \n        // Scale indentations\n        for (x = [-8:4:8]) {\n            for (y = [-10:5:10]) {\n                if (x*x/64 + y*y/100 < 1) {\n                    translate([x, y, 5 * body_diameter + 3 * neck_width + hood_thickness])\n                    sphere(d = 2);\n                }\n            }\n        }\n    }\n}\n\n// Snake head\nmodule snake_head() {\n    translate([0, 6, 5 * body_diameter + 3 * neck_width + hood_thickness + head_length/2])\n    rotate([0, 15, 0])\n    union() {\n        // Main head\n        cylinder(h = head_length, d1 = head_diameter, d2 = head_diameter * 0.8, center = true);\n        \n        // Snout\n        translate([0, 0, head_length/2 + snout_length/2])\n        cylinder(h = snout_length, d1 = head_diameter * 0.8, d2 = head_diameter * 0.4, center = true);\n        \n        // Eyes\n        translate([head_diameter/2 - 1, 0, head_length/2])\n        sphere(d = eye_diameter);\n        translate([-head_diameter/2 + 1, 0, head_length/2])\n        sphere(d = eye_diameter);\n        \n        // Nostrils\n        translate([head_diameter/3, head_diameter/2, head_length/2 + snout_length/2])\n        sphere(d = 0.5);\n        translate([-head_diameter/3, head_diameter/2, head_length/2 + snout_length/2])\n        sphere(d = 0.5);\n    }\n}\n\n// Tail tapering\nmodule tail() {\n    union() {\n        for (i = [0:tail_segments-1]) {\n            t = i / (tail_segments - 1);\n            diameter = tail_start_diameter * (1 - t) + tail_end_diameter * t;\n            z_pos = -i * body_diameter * 0.8;\n            translate([0, 0, z_pos])\n            body_segment(diameter, body_diameter * 0.8, i * 5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    snake_body();\n    hood();\n    snake_head();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "naiad",
    "openscad_code": "// OpenSCAD Naiad - Realistic Style - Medium Complexity\n// Size: 70mm height, 3mm wall thickness\n\n// Main parameters\n$fn = 64;\nwall_thickness = 3;\n\n// Head module\nmodule head() {\n    // Main head sphere\n    translate([0, 0, 60])\n    difference() {\n        sphere(10);\n        // Hollow inside\n        sphere(10 - wall_thickness);\n    }\n    \n    // Face - slightly flattened front\n    translate([0, 7, 60])\n    difference() {\n        scale([1, 0.8, 1])\n        sphere(9);\n        sphere(8.5);\n    }\n    \n    // Hair - flowing strands\n    for(i = [-30:-5:30]) {\n        rotate([0, 0, i])\n        translate([0, 10, 65])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 15 + abs(i)/3, r1 = 2, r2 = 1);\n            cylinder(h = 15 + abs(i)/3, r1 = 1.5, r2 = 0.5);\n        }\n    }\n    \n    // Eyes\n    for(x = [-3, 3]) {\n        translate([x, 6, 62])\n        difference() {\n            sphere(1.5);\n            sphere(1);\n        }\n    }\n    \n    // Nose\n    translate([0, 6.5, 58])\n    difference() {\n        sphere(1);\n        sphere(0.5);\n    }\n    \n    // Mouth\n    translate([0, 6, 55])\n    difference() {\n        scale([2, 0.5, 0.5])\n        sphere(1.5);\n        sphere(1);\n    }\n}\n\n// Torso module\nmodule torso() {\n    // Upper body\n    translate([0, 0, 35])\n    difference() {\n        scale([1.2, 0.8, 1.5])\n        sphere(12);\n        scale([1.1, 0.7, 1.4])\n        sphere(11);\n    }\n    \n    // Breasts\n    for(x = [-4, 4]) {\n        translate([x, 0, 45])\n        difference() {\n            scale([1, 1, 1.2])\n            sphere(4);\n            sphere(3.5);\n        }\n    }\n    \n    // Waist\n    translate([0, 0, 25])\n    difference() {\n        cylinder(h = 15, r1 = 8, r2 = 6);\n        cylinder(h = 15, r1 = 7, r2 = 5);\n    }\n}\n\n// Arms module\nmodule arms() {\n    // Left arm\n    translate([-12, 0, 45])\n    rotate([0, 0, -30])\n    difference() {\n        cylinder(h = 20, r1 = 2.5, r2 = 2);\n        cylinder(h = 20, r1 = 2, r2 = 1.5);\n    }\n    \n    // Right arm\n    translate([12, 0, 45])\n    rotate([0, 0, 30])\n    difference() {\n        cylinder(h = 20, r1 = 2.5, r2 = 2);\n        cylinder(h = 20, r1 = 2, r2 = 1.5);\n    }\n    \n    // Hands\n    translate([-18, 0, 42])\n    difference() {\n        sphere(2.5);\n        sphere(2);\n    }\n    \n    translate([18, 0, 42])\n    difference() {\n        sphere(2.5);\n        sphere(2);\n    }\n}\n\n// Fish tail module\nmodule tail() {\n    // Tail base\n    translate([0, 0, 15])\n    difference() {\n        cylinder(h = 20, r1 = 6, r2 = 4);\n        cylinder(h = 20, r1 = 5, r2 = 3);\n    }\n    \n    // Tail fin\n    translate([0, 0, 0])\n    difference() {\n        // Main fin shape\n        union() {\n            // Left side\n            translate([-2, 0, 0])\n            rotate([0, 0, -20])\n            scale([1, 0.3, 1])\n            cylinder(h = 15, r1 = 4, r2 = 0);\n            \n            // Right side\n            translate([2, 0, 0])\n            rotate([0, 0, 20])\n            scale([1, 0.3, 1])\n            cylinder(h = 15, r1 = 4, r2 = 0);\n            \n            // Center\n            translate([0, 0, -7.5])\n            scale([0.5, 0.3, 1])\n            cube([8, 3, 15]);\n        }\n        \n        // Hollow inside\n        translate([0, 0, 1])\n        scale([0.8, 0.8, 0.8])\n        union() {\n            translate([-2, 0, 0])\n            rotate([0, 0, -20])\n            scale([1, 0.3, 1])\n            cylinder(h = 15, r1 = 3.5, r2 = 0);\n            \n            translate([2, 0, 0])\n            rotate([0, 0, 20])\n            scale([1, 0.3, 1])\n            cylinder(h = 15, r1 = 3.5, r2 = 0);\n        }\n    }\n    \n    // Tail scales pattern\n    for(z = [5:3:15]) {\n        for(a = [0:30:330]) {\n            rotate([0, 0, a])\n            translate([0, 0, z])\n            difference() {\n                scale([1, 0.2, 0.2])\n                sphere(2);\n                scale([0.8, 0.15, 0.15])\n                sphere(1.5);\n            }\n        }\n    }\n}\n\n// Assemble the naiad\nunion() {\n    head();\n    torso();\n    arms();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "oread",
    "openscad_code": "// Oread (mountain nymph) – realistic medium-complexity model\n// 3D-printable, ~80 mm tall, no steep overhangs\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall scale\nscale(0.4)\nunion() {\n\n    // Head and hair\n    translate([0,0,190])\n    union() {\n        // Head\n        sphere(12);\n\n        // Hair swept back\n        for(a=[0:30:150])\n            rotate([0,a,0])\n            translate([-2,0,0])\n            rotate([10,0,0])\n            scale([0.8,1,3])\n            cylinder(h=15, r1=5, r2=1);\n    }\n\n    // Neck\n    translate([0,0,175])\n    cylinder(h=8, r=5);\n\n    // Torso\n    translate([0,0,145])\n    union() {\n        // Chest\n        cylinder(h=25, r1=9, r2=11);\n\n        // Waist\n        translate([0,0,-10])\n        cylinder(h=10, r1=11, r2=8);\n    }\n\n    // Arms\n    module arm() {\n        union() {\n            translate([0,0,0])\n            rotate([0,0,-20])\n            cylinder(h=30, r1=3.5, r2=3);\n\n            translate([0,0,-30])\n            rotate([0,0,-45])\n            cylinder(h=25, r1=3, r2=2.5);\n\n            translate([0,0,-52])\n            sphere(2.8);\n        }\n    }\n\n    // Right arm\n    translate([11,0,165])\n    rotate([0,10,0])\n    arm();\n\n    // Left arm mirrored\n    translate([-11,0,165])\n    mirror([1,0,0])\n    rotate([0,10,0])\n    arm();\n\n    // Rocky dress base\n    difference() {\n        union() {\n            // Main dress cone\n            cylinder(h=60, r1=20, r2=0);\n\n            // Jagged rock layers\n            for(i=[0:15:60])\n                translate([0,0,i])\n                rotate([0,0,rands(0,360,1)[0]])\n                scale([1,1,0.8])\n                cylinder(h=5, r1=20-i/4, r2=20-i/4-3);\n        }\n        // Hollow for printing\n        translate([0,0,-1])\n        cylinder(h=62, r1=18, r2=0);\n    }\n\n    // Legs hidden inside dress (support)\n    translate([4,0,110])\n    cylinder(h=40, r=3);\n    translate([-4,0,110])\n    cylinder(h=40, r=3);\n\n    // Feet\n    translate([4,0,68])\n    sphere(4);\n    translate([-4,0,68])\n    sphere(4);\n\n    // Stone texture on dress surface\n    for(i=[0:20:360])\n        rotate([0,0,i])\n        translate([rands(12,18,1)[0],0,rands(10,50,1)[0]])\n        sphere(rands(1,2,1)[0]);\n}",
    "renders": true
  },
  {
    "household_item": "sylph",
    "openscad_code": "// Sylph - Air Elemental Spirit\n// Medium complexity realistic style\n\n// Parameters for easy scaling\nscale_factor = 0.8;\nbody_height = 60 * scale_factor;\nbody_width = 25 * scale_factor;\nhead_size = 18 * scale_factor;\nwing_span = 45 * scale_factor;\narm_length = 30 * scale_factor;\nleg_length = 35 * scale_factor;\n\n// Main sylph assembly\nmodule sylph() {\n    union() {\n        // Head\n        translate([0, 0, body_height + head_size/2]) \n            sphere(r=head_size/2, $fn=32);\n        \n        // Hair - flowing air currents\n        for(i=[0:30:330]) {\n            rotate([0, 0, i]) \n                translate([0, head_size/2 + 2, body_height]) \n                    scale([0.3, 1.5, 0.3]) \n                        sphere(r=head_size/2 + 5, $fn=8);\n        }\n        \n        // Torso\n        translate([0, 0, body_height/2]) \n            scale([body_width/body_height, body_width/body_height, 1]) \n                sphere(r=body_height/2, $fn=32);\n        \n        // Arms\n        for(side=[-1, 1]) {\n            // Upper arm\n            translate([side * body_width/2, 0, body_height * 0.7]) {\n                rotate([0, side * 15, 0]) {\n                    cylinder(h=arm_length/2, r=body_width/6, $fn=16);\n                    // Lower arm\n                    translate([0, 0, arm_length/2]) {\n                        rotate([0, side * 20, 0]) {\n                            cylinder(h=arm_length/2, r=body_width/7, $fn=16);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        for(side=[-1, 1]) {\n            translate([side * body_width/3, 0, 0]) {\n                // Upper leg\n                cylinder(h=leg_length/2, r=body_width/5, $fn=16);\n                // Lower leg\n                translate([0, 0, leg_length/2]) {\n                    rotate([side * 5, 0, 0]) {\n                        cylinder(h=leg_length/2, r=body_width/6, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        // Wings - ethereal air currents\n        for(side=[-1, 1]) {\n            wing(side);\n        }\n        \n        // Base wind swirl for stability\n        translate([0, 0, -5]) \n            cylinder(h=10, r=body_width/2 + 5, $fn=64);\n    }\n}\n\n// Wing module with air current details\nmodule wing(side) {\n    translate([side * body_width/2, 0, body_height * 0.8]) {\n        rotate([0, side * 30, 0]) {\n            // Main wing structure\n            difference() {\n                // Wing membrane\n                scale([1, wing_span/20, wing_span/40]) \n                    sphere(r=wing_span/2, $fn=32);\n                \n                // Cutout patterns for ethereal look\n                for(i=[1:3]) {\n                    translate([0, i * wing_span/8, 0]) \n                        scale([0.8, 0.5, 0.5]) \n                            sphere(r=wing_span/4 - i*2, $fn=16);\n                }\n            }\n            \n            // Wing support struts\n            for(i=[0:45:135]) {\n                rotate([0, 0, side * i]) {\n                    translate([0, 0, 0]) \n                        scale([0.1, 0.1, 1]) \n                            cylinder(h=wing_span/2, r=wing_span/20, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Generate the sylph\nsylph();",
    "renders": true
  },
  {
    "household_item": "undine",
    "openscad_code": "// Undine (water spirit) - Realistic medium-complexity model\n// Scaled to 80 mm height for 3D printing\n\n$fn = 32; // Smooth curves\n\nmodule torso() {\n    // Main torso\n    difference() {\n        scale([0.8, 0.6, 1.2]) sphere(d=30);\n        // Waist indentation\n        translate([0, 0, 10]) scale([1.3, 1.3, 0.8]) sphere(d=25);\n    }\n}\n\nmodule head() {\n    // Head\n    translate([0, 0, 45]) scale([0.8, 0.8, 1.1]) sphere(d=20);\n    \n    // Eyes\n    for(x=[-6, 6]) {\n        translate([x, -8, 47]) sphere(d=3);\n    }\n    \n    // Hair waves\n    for(i=[0:30:330]) {\n        rotate([0, 0, i]) \n        translate([0, 12, 45]) \n        rotate([90, 0, 0]) \n        scale([0.3, 0.3, 8]) \n        cylinder(d1=10, d2=2, h=1);\n    }\n}\n\nmodule arms() {\n    // Left arm\n    translate([-15, 0, 30]) {\n        rotate([0, 30, -20]) {\n            // Upper arm\n            cylinder(h=20, d=6);\n            // Lower arm\n            translate([0, 0, 20]) rotate([0, 30, 0]) cylinder(h=15, d=5);\n            // Hand\n            translate([0, 0, 15]) rotate([0, 30, 0]) sphere(d=6);\n        }\n    }\n    \n    // Right arm (mirrored)\n    mirror([1, 0, 0]) translate([-15, 0, 30]) {\n        rotate([0, 30, 20]) {\n            cylinder(h=20, d=6);\n            translate([0, 0, 20]) rotate([0, 30, 0]) cylinder(h=15, d=5);\n            translate([0, 0, 15]) rotate([0, 30, 0]) sphere(d=6);\n        }\n    }\n}\n\nmodule tail() {\n    // Mermaid tail\n    hull() {\n        // Hip\n        translate([0, 0, 0]) sphere(d=30);\n        \n        // Tail transition\n        translate([0, 0, -40]) scale([0.8, 0.5, 1]) sphere(d=25);\n        \n        // Tail fin start\n        translate([0, 0, -70]) scale([0.4, 0.2, 2]) sphere(d=20);\n    }\n    \n    // Tail fins\n    for(side=[-1, 1]) {\n        // Main fin\n        translate([0, side*8, -75]) \n        rotate([0, 0, side*15]) \n        scale([1.2, 0.2, 0.8]) \n        sphere(d=20);\n        \n        // Side fins\n        for(i=[-1, 1]) {\n            translate([side*5, i*5, -65]) \n            rotate([0, 0, i*30]) \n            scale([0.6, 0.1, 0.4]) \n            cylinder(h=15, d=8);\n        }\n    }\n}\n\nmodule water_base() {\n    // Water base for support\n    translate([0, 0, -80]) \n    scale([1.5, 1.5, 0.3]) \n    sphere(d=50);\n    \n    // Water ripples\n    for(i=[0:45:315]) {\n        rotate([0, 0, i]) \n        translate([20, 0, -78]) \n        scale([0.3, 2, 0.3]) \n        sphere(d=10);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    torso();\n    head();\n    arms();\n    tail();\n    \n    // Water base for printing support\n    water_base();\n}",
    "renders": true
  },
  {
    "household_item": "gnome",
    "openscad_code": "// Realistic Gnome - Medium Complexity\n// Designed for 3D printing - approximately 80mm tall\n\n$fn = 36;\n\n// Main body module\nmodule gnome() {\n    union() {\n        // Base platform\n        translate([0, 0, -2])\n            cylinder(h=4, r1=15, r2=18);\n        \n        // Body\n        translate([0, 0, 10])\n            rotate([0, 0, 0])\n            scale([1, 1.2, 1.3])\n            sphere(r=12);\n        \n        // Legs\n        legs();\n        \n        // Arms\n        arms();\n        \n        // Head\n        head();\n        \n        // Hat\n        hat();\n        \n        // Belt\n        belt();\n        \n        // Beard\n        beard();\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Left leg\n    translate([-4, -5, 0])\n        cylinder(h=20, r=4, center=true);\n    \n    // Right leg\n    translate([4, -5, 0])\n        cylinder(h=20, r=4, center=true);\n    \n    // Feet\n    translate([-4, -8, -9])\n        scale([1.5, 2, 0.8])\n        sphere(r=4);\n    \n    translate([4, -8, -9])\n        scale([1.5, 2, 0.8])\n        sphere(r=4);\n}\n\n// Arms module\nmodule arms() {\n    // Left arm\n    translate([-16, 0, 18])\n        rotate([20, 0, -30])\n        cylinder(h=15, r=3);\n    \n    // Right arm\n    translate([16, 0, 18])\n        rotate([20, 0, 30])\n        cylinder(h=15, r=3);\n    \n    // Hands\n    translate([-20, -4, 12])\n        sphere(r=3);\n    \n    translate([20, -4, 12])\n        sphere(r=3);\n}\n\n// Head module\nmodule head() {\n    // Head sphere\n    translate([0, 0, 30])\n        scale([1, 1.1, 1.2])\n        sphere(r=10);\n    \n    // Nose\n    translate([0, 8, 30])\n        sphere(r=3);\n    \n    // Eyes\n    translate([-3, 7, 33])\n        sphere(r=1.5);\n    \n    translate([3, 7, 33])\n        sphere(r=1.5);\n    \n    // Eyebrows\n    translate([-3, 7, 36])\n        rotate([0, 10, 0])\n        scale([1.5, 0.5, 0.5])\n        sphere(r=1.5);\n    \n    translate([3, 7, 36])\n        rotate([0, -10, 0])\n        scale([1.5, 0.5, 0.5])\n        sphere(r=1.5);\n}\n\n// Hat module\nmodule hat() {\n    // Main cone\n    translate([0, 0, 45])\n        cylinder(h1=20, h2=0, r1=12, r2=0);\n    \n    // Hat brim\n    translate([0, 0, 40])\n        cylinder(h=2, r1=14, r2=12);\n}\n\n// Belt module\nmodule belt() {\n    translate([0, 0, 22])\n        difference() {\n            cylinder(h=4, r=13);\n            translate([0, 0, -1])\n                cylinder(h=6, r=12);\n        }\n    \n    // Belt buckle\n    translate([0, 12.5, 24])\n        cube([6, 1, 4], center=true);\n}\n\n// Beard module\nmodule beard() {\n    // Main beard\n    difference() {\n        translate([0, 5, 25])\n            scale([1.2, 1, 1.5])\n            sphere(r=8);\n        \n        // Cut for mouth area\n        translate([0, 8, 28])\n            cube([6, 6, 6], center=true);\n    }\n    \n    // Mustache\n    translate([0, 7, 27])\n        rotate([20, 0, 0])\n        scale([1.2, 0.5, 0.8])\n        sphere(r=5);\n}\n\n// Generate the gnome\ngnome();",
    "renders": true
  },
  {
    "household_item": "gargoyle",
    "openscad_code": "// Realistic gargoyle statue for 3D printing\n// Approximate size: 70 mm tall\n\n$fn = 50;\n\n// Main body\nmodule body() {\n    // Torso block\n    difference() {\n        cube([35, 25, 45], center=true);\n        // Hollow out center\n        cube([30, 20, 40], center=true);\n    }\n    \n    // Chest muscles\n    translate([0, 12, 10])\n        scale([1.2, 0.8, 1.3])\n        sphere(8);\n    \n    // Back arch\n    translate([0, -12, 5])\n        scale([1.3, 1, 0.8])\n        sphere(10);\n}\n\n// Head with horns\nmodule head() {\n    // Main head shape\n    translate([0, 0, 30])\n    difference() {\n        scale([0.8, 1, 1.2])\n        sphere(12);\n        // Eye sockets\n        translate([-5, 8, 3])\n            sphere(3);\n        translate([5, 8, 3])\n            sphere(3);\n    }\n    \n    // Snout\n    translate([0, 10, 28])\n    difference() {\n        scale([0.6, 1.2, 0.8])\n        sphere(8);\n        // Nostrils\n        translate([-2, 4, -2])\n            cylinder(h=3, r=1);\n        translate([2, 4, -2])\n            cylinder(h=3, r=1);\n    }\n    \n    // Horns\n    for(side = [-1, 1]) {\n        translate([side * 8, -5, 40])\n            rotate([0, side * 20, 0])\n            cylinder(h=15, r1=3, r2=1);\n    }\n}\n\n// Wings\nmodule wings() {\n    for(side = [-1, 1]) {\n        translate([side * 18, -5, 25])\n        rotate([0, 0, side * -20])\n        difference() {\n            // Main wing\n            scale([1.2, 1, 0.3])\n            sphere(15);\n            \n            // Wing membrane cuts\n            for(i = [1:3]) {\n                translate([0, -i*4, 0])\n                    cube([25, 2, 8], center=true);\n            }\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    for(side = [-1, 1]) {\n        translate([side * 20, 8, 15])\n        rotate([0, 0, side * 30])\n        difference() {\n            // Upper arm\n            cylinder(h=15, r=4);\n            \n            // Elbow joint\n            translate([0, 0, 15])\n                sphere(4);\n            \n            // Forearm\n            translate([0, 0, 15])\n            rotate([90, 0, 0])\n            cylinder(h=12, r=3.5);\n            \n            // Hands\n            translate([0, -8, 15])\n                sphere(4);\n        }\n    }\n}\n\n// Legs and feet\nmodule legs() {\n    for(side = [-1, 1]) {\n        translate([side * 10, 0, -25])\n        difference() {\n            // Upper leg\n            cylinder(h=20, r=5);\n            \n            // Knee\n            translate([0, 0, 20])\n                sphere(5);\n            \n            // Lower leg\n            translate([0, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h=15, r=4.5);\n            \n            // Feet\n            translate([0, -12, 20])\n            scale([1.5, 2, 0.8])\n                sphere(6);\n            \n            // Toes\n            for(toe = [-1, 0, 1]) {\n                translate([toe * 3, -16, 20])\n                cylinder(h=3, r=1.5);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -20, -10])\n    rotate([0, 90, 0])\n    difference() {\n        // Tail segments\n        for(i = [0:3]) {\n            translate([0, 0, i*8])\n            scale([1 - i*0.15, 1 - i*0.15, 1])\n            sphere(5);\n        }\n        \n        // Tail tip\n        translate([0, 0, 32])\n        rotate([0, 0, 45])\n        cylinder(h=8, r1=3, r2=0.1);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    wings();\n    arms();\n    legs();\n    tail();\n    \n    // Base platform\n    translate([0, 0, -35])\n    difference() {\n        cube([50, 40, 5], center=true);\n        cube([45, 35, 6], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "djinn",
    "openscad_code": "// OpenSCAD Djinn - Realistic Style, Medium Complexity\n// 3D printable without support, ~60mm tall\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Color for preview only\ncolor(\"gold\") scale(scale_factor) union() {\n    \n    // Base lower body (solid to avoid overhangs)\n    translate([0, 0, 20]) \n        cylinder(h = 40, d1 = 35, d2 = 15, $fn = 32);\n    \n    // Upper torso\n    translate([0, 0, 60]) \n        cylinder(h = 25, d1 = 15, d2 = 20, $fn = 32);\n    \n    // Head sphere\n    translate([0, 0, 87]) \n        sphere(d = 18, $fn = 32);\n    \n    // Face mask (realistic djinn features)\n    difference() {\n        translate([0, 0, 87]) \n            sphere(d = 18.5, $fn = 32);\n        translate([0, 0, 86.5]) \n            sphere(d = 16.5, $fn = 32);\n    }\n    \n    // Eyes\n    for (x = [-5, 5]) {\n        translate([x, 3, 90]) \n            rotate([90, 0, 0]) \n                cylinder(h = 2, d = 3, $fn = 16);\n    }\n    \n    // Nose\n    translate([0, 5, 85]) \n        cube([2, 4, 3], center = true);\n    \n    // Mouth slit\n    translate([0, 6, 82]) \n        cube([6, 1, 2], center = true);\n    \n    // Arms (curved without overhangs)\n    module arm(side) {\n        translate([side * 12, 0, 70]) {\n            rotate([0, 0, side * -30]) \n                cylinder(h = 20, d = 6, $fn = 16);\n            translate([side * 8, 0, -5]) \n                sphere(d = 6, $fn = 16);\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Lower body swirl (solid spiral)\n    module swirl_layer(z, r) {\n        rotate([0, 0, z * 5]) \n            translate([r * sin(z * 30), r * cos(z * 30), z]) \n                sphere(d = 8 + z * 0.5, $fn = 16);\n    }\n    \n    for (z = [0:2:30]) {\n        swirl_layer(z, 12 - z * 0.3);\n    }\n    \n    // Smoke wisps (solid elements)\n    module wisp(x, y, z, scale) {\n        translate([x, y, z]) \n            scale([scale, scale, scale * 1.5]) \n                sphere(d = 5, $fn = 16);\n    }\n    \n    wisp(10, 10, 50, 0.8);\n    wisp(-8, -12, 45, 0.6);\n    wisp(15, -5, 40, 0.7);\n    wisp(-10, 8, 35, 0.9);\n    \n    // Earrings\n    for (x = [-7, 7]) {\n        translate([x, -3, 80]) \n            rotate([90, 0, 0]) \n                cylinder(h = 8, d = 2, $fn = 8);\n    }\n    \n    // Headpiece\n    translate([0, 0, 96]) \n        cylinder(h = 5, d = 20, $fn = 32);\n    \n    // Headpiece gems\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle]) \n            translate([8, 0, 98.5]) \n                sphere(d = 3, $fn = 8);\n    }\n    \n    // Feet (hidden in base for stability)\n    translate([0, 0, 10]) \n        cylinder(h = 20, d = 40, $fn = 32);\n}",
    "renders": true
  },
  {
    "household_item": "ghul",
    "openscad_code": "// Realistic medium-complexity Ghul for 3D printing\n// Overall height ≈ 70 mm\n// Wall thickness ≥ 1.2 mm everywhere\n// No steep overhangs > 45°\n\nmodule ghul() {\n    // Center origin in feet plane\n    translate([0, 0, 35]) {\n\n        // --- Head ---\n        // Long skull\n        translate([0, 0, 35]) {\n            difference() {\n                sphere(10);\n                // Eye sockets\n                for (x = [-4, 4])\n                    translate([x, 5, 2])\n                        rotate([0, 90, 0])\n                            cylinder(h=8, r=3, $fn=16);\n            }\n        }\n\n        // Snout\n        translate([0, 12, 32])\n            rotate([25, 0, 0])\n                cylinder(h=12, r1=9, r2=4, $fn=16);\n\n        // Jaw\n        translate([0, 13, 25])\n            rotate([45, 0, 0])\n                cube([12, 15, 8], center=true);\n\n        // Horns\n        for (a = [0, 180]) {\n            rotate([0, 0, a])\n                translate([8, -5, 45])\n                    rotate([-30, 0, 0])\n                        cylinder(h=15, r1=3, r2=1, $fn=8);\n        }\n\n        // --- Spine / Torso ---\n        // Chest\n        translate([0, 0, 20])\n            cube([20, 15, 16], center=true);\n\n        // Hunched back\n        translate([0, -8, 25])\n            rotate([0, 0, 0])\n                cylinder(h=20, r=10, $fn=32);\n\n        // --- Arms ---\n        // Left arm\n        translate([-12, 5, 25])\n            rotate([0, 0, -15])\n                cylinder(h=25, r=4, $fn=16);\n\n        translate([-12, 10, 8])\n            rotate([0, 0, -15])\n                cylinder(h=10, r=3, $fn=16);\n\n        // Right arm\n        translate([12, 5, 25])\n            rotate([0, 0, 15])\n                cylinder(h=25, r=4, $fn=16);\n\n        translate([12, 10, 8])\n            rotate([0, 0, 15])\n                cylinder(h=10, r=3, $fn=16);\n\n        // --- Legs ---\n        // Left leg\n        translate([-7, 0, 0])\n            cylinder(h=25, r=4, $fn=16);\n        translate([-7, 0, -12])\n            sphere(5);\n\n        // Right leg\n        translate([7, 0, 0])\n            cylinder(h=25, r=4, $fn=16);\n        translate([7, 0, -12])\n            sphere(5);\n\n        // --- Claws on fingers & toes ---\n        // Fingers\n        for (i = [-1, 0, 1])\n            translate([-12, 12, 8 + i * 2])\n                rotate([0, 0, 45])\n                    cylinder(h=5, r1=1.5, r2=0.5, $fn=8);\n\n        for (i = [-1, 0, 1])\n            translate([12, 12, 8 + i * 2])\n                rotate([0, 0, -45])\n                    cylinder(h=5, r1=1.5, r2=0.5, $fn=8);\n\n        // Toes\n        for (i = [-1, 0, 1])\n            translate([-7 + i * 2, 0, -12])\n                rotate([0, 0, 0])\n                    cylinder(h=4, r1=1.5, r2=0.5, $fn=8);\n\n        for (i = [-1, 0, 1])\n            translate([7 + i * 2, 0, -12])\n                rotate([0, 0, 0])\n                    cylinder(h=4, r1=1.5, r2=0.5, $fn=8);\n    }\n}\n\nghul();",
    "renders": true
  },
  {
    "household_item": "yaksha",
    "openscad_code": "// Yaksha guardian statue - Realistic style, medium complexity\n// Overall height ~80mm, 3D-printable with 2mm wall thickness\n\n// Base parameters\nbase_d = 40;\nbase_h = 5;\n\n// Body parameters\nbody_w = 25;\nbody_d = 15;\nbody_h = 50;\nbelt_h = 8;\nbelt_t = 2;\n\n// Head parameters\nhead_r = 12;\nneck_h = 8;\nneck_r = 7;\n\n// Arms parameters\narm_l = 30;\narm_r = 5;\nforearm_l = 25;\nshoulder_offset = 8;\n\n// Legs parameters\nleg_l = 25;\nleg_r = 6;\nthigh_l = 15;\nshoe_l = 10;\nshoe_w = 12;\n\n// Decorative elements\ncrown_h = 10;\ncrown_r = 13;\near_r = 4;\near_l = 3;\n\n// Eyes\neye_r = 1.5;\neye_offset = 2.5;\n\n// Build the complete yaksha\nunion() {\n    // Base\n    cylinder(h=base_h, d=base_d, $fn=64);\n    \n    // Feet\n    translate([0, 0, base_h]) {\n        // Left shoe\n        translate([-body_w/4, 0, 0])\n            cube([shoe_w, shoe_w/2, shoe_l], center=true);\n        // Right shoe\n        translate([body_w/4, 0, 0])\n            cube([shoe_w, shoe_w/2, shoe_l], center=true);\n    }\n    \n    // Legs\n    translate([0, 0, base_h+shoe_l]) {\n        // Left leg\n        translate([-body_w/4, 0, 0])\n            cylinder(h=leg_l, d=leg_r*2, $fn=32);\n        // Right leg\n        translate([body_w/4, 0, 0])\n            cylinder(h=leg_l, d=leg_r*2, $fn=32);\n    }\n    \n    // Body with slight taper\n    translate([0, 0, base_h+shoe_l+leg_l]) {\n        // Main torso with rounded top\n        hull() {\n            cylinder(h=body_h-belt_h, d1=body_w, d2=body_w*0.8, $fn=32);\n            translate([0, 0, body_h-belt_h])\n                cylinder(h=belt_h, d=body_w*0.8, $fn=32);\n        }\n        \n        // Decorative belt\n        translate([0, 0, body_h/2])\n            difference() {\n                cylinder(h=belt_t, d=body_w*1.2, $fn=32);\n                cylinder(h=belt_t+0.1, d=body_w*0.7, $fn=32);\n            }\n    }\n    \n    // Arms\n    translate([0, 0, base_h+shoe_l+leg_l+body_h*0.7]) {\n        // Left arm\n        translate([-body_w/2-shoulder_offset, 0, 0]) {\n            rotate([0, 0, 30])\n                union() {\n                    // Upper arm\n                    cylinder(h=arm_l, d=arm_r*2, $fn=16);\n                    // Elbow\n                    translate([0, arm_l, 0])\n                        sphere(d=arm_r*2.5, $fn=16);\n                    // Forearm\n                    rotate([0, 0, -45])\n                        translate([0, arm_l+forearm_l/2, 0])\n                            rotate([90, 0, 0])\n                                cylinder(h=forearm_l, d=arm_r*2, $fn=16);\n                }\n        }\n        \n        // Right arm (mirrored)\n        mirror([1, 0, 0])\n            translate([-body_w/2-shoulder_offset, 0, 0]) {\n                rotate([0, 0, 30])\n                    union() {\n                        cylinder(h=arm_l, d=arm_r*2, $fn=16);\n                        translate([0, arm_l, 0])\n                            sphere(d=arm_r*2.5, $fn=16);\n                        rotate([0, 0, -45])\n                            translate([0, arm_l+forearm_l/2, 0])\n                                rotate([90, 0, 0])\n                                    cylinder(h=forearm_l, d=arm_r*2, $fn=16);\n                    }\n            }\n    }\n    \n    // Neck\n    translate([0, 0, base_h+shoe_l+leg_l+body_h]) {\n        cylinder(h=neck_h, d=neck_r*2, $fn=32);\n    }\n    \n    // Head\n    translate([0, 0, base_h+shoe_l+leg_l+body_h+neck_h]) {\n        // Main head shape\n        sphere(r=head_r, $fn=32);\n        \n        // Crown with spikes\n        translate([0, 0, head_r]) {\n            cylinder(h=crown_h, d=crown_r, $fn=32);\n            // Crown spikes\n            for(i = [0:45:315]) {\n                rotate([0, 0, i])\n                    translate([crown_r/2, 0, crown_h/2])\n                        cylinder(h=crown_h/2, d=crown_r/4, $fn=8);\n            }\n        }\n        \n        // Ears\n        translate([-head_r, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=ear_l, d=ear_r*2, $fn=16);\n        translate([head_r, 0, 0])\n            rotate([0, -90, 0])\n                cylinder(h=ear_l, d=ear_r*2, $fn=16);\n        \n        // Eyes\n        translate([-eye_offset, head_r-eye_r, eye_offset])\n            sphere(r=eye_r, $fn=16);\n        translate([eye_offset, head_r-eye_r, eye_offset])\n            sphere(r=eye_r, $fn=16);\n        \n        // Fangs (small protrusions)\n        translate([0, head_r-1, -eye_offset])\n            cube([1, 2, 1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "asura",
    "openscad_code": "// Asura - medium complexity realistic style\n// 3D printable model with no significant overhangs\n\n$fn = 32;\n\n// Main module\nmodule asura() {\n    // Base platform for stability\n    difference() {\n        cylinder(h=3, r1=20, r2=22, center=false);\n        cylinder(h=4, r1=18, r2=20, center=false);\n    }\n    \n    // Body\n    translate([0, 0, 3]) {\n        difference() {\n            // Torso\n            cylinder(h=25, r1=8, r2=12, center=false);\n            // Chest cavity\n            translate([0, 4, 10])\n                sphere(5);\n        }\n    }\n    \n    // Head\n    translate([0, 0, 28]) {\n        difference() {\n            sphere(10);\n            // Eye sockets\n            for(i=[-1, 1]) {\n                translate([i*4, 3, 2])\n                    sphere(3);\n            }\n            // Mouth\n            translate([0, 6, -3])\n                cube([6, 2, 3], center=true);\n        }\n        \n        // Eyes\n        for(i=[-1, 1]) {\n            translate([i*4, 4, 2])\n                sphere(1.5);\n        }\n        \n        // Ears\n        for(i=[-1, 1]) {\n            translate([i*10, 0, 0])\n                rotate([0, 0, i*15])\n                cylinder(h=8, r1=3, r2=2, center=false);\n        }\n        \n        // Horns\n        for(i=[-1, 1]) {\n            translate([i*5, -5, 8])\n                rotate([0, i*15, 0])\n                cylinder(h=12, r1=2, r2=1, center=false);\n        }\n    }\n    \n    // Arms\n    for(side=[-1, 1]) {\n        translate([side*12, 0, 15]) {\n            rotate([0, 0, side*20])\n            // Upper arm\n            cylinder(h=15, r1=4, r2=3, center=false);\n            \n            // Lower arm\n            translate([side*12, -5, 13])\n                rotate([0, 0, side*30])\n                cylinder(h=12, r1=3, r2=2.5, center=false);\n                \n            // Hand\n            translate([side*20, -8, 22])\n                sphere(3);\n        }\n    }\n    \n    // Legs\n    for(side=[-1, 1]) {\n        translate([side*5, 0, 3]) {\n            // Thigh\n            cylinder(h=15, r1=5, r2=4, center=false);\n            \n            // Lower leg\n            translate([0, -3, 12])\n                rotate([10, 0, 0])\n                cylinder(h=12, r1=4, r2=3, center=false);\n                \n            // Foot\n            translate([0, -8, 22])\n                rotate([0, 0, 90])\n                cylinder(h=8, r1=3, r2=2, center=false);\n        }\n    }\n    \n    // Fangs\n    translate([0, 7, 24])\n        for(i=[-1.5, 0, 1.5])\n            translate([i, 0, -2])\n                cylinder(h=4, r1=1, r2=0.5, center=false);\n    \n    // Third eye\n    translate([0, 0, 38])\n        sphere(2);\n}\n\n// Generate the model\nasura();",
    "renders": true
  },
  {
    "household_item": "garuda",
    "openscad_code": "// Garuda - Medium Realistic Style\n// Size: ~80mm wingspan\n// 3D printable with minimal supports\n\nmodule garuda() {\n    // Central body\n    union() {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.2, 1.5, 2])\n            sphere(10, $fn=20);\n        \n        // Lower body\n        translate([0, 0, 0])\n            cylinder(h=15, r1=12, r2=8, $fn=20);\n            \n        // Neck\n        translate([0, 0, 25])\n            cylinder(h=8, r1=6, r2=5, $fn=16);\n            \n        // Head\n        translate([0, 0, 33])\n            scale([0.8, 1, 1.2])\n            sphere(8, $fn=20);\n            \n        // Beak\n        translate([0, 8, 33])\n            rotate([20, 0, 0])\n            cylinder(h=12, r1=4, r2=2, $fn=8);\n    }\n    \n    // Eyes\n    for(x = [-3, 3]) {\n        translate([x, 6, 34])\n            sphere(1.5, $fn=8);\n    }\n    \n    // Wings\n    module wing() {\n        difference() {\n            // Main wing shape\n            translate([-20, 0, 20])\n                rotate([0, 0, 30])\n                scale([1, 0.3, 0.1])\n                cylinder(h=40, r1=15, r2=5, $fn=20);\n                \n            // Feather cuts\n            for(i = [0:3]) {\n                translate([-35 + i*8, 0, 19])\n                    rotate([0, 0, 30])\n                    cube([10, 15, 2], center=true);\n            }\n        }\n        \n        // Wing joint\n        translate([0, 0, 20])\n            sphere(5, $fn=16);\n    }\n    \n    // Left wing\n    wing();\n    \n    // Right wing\n    mirror([1, 0, 0])\n        wing();\n    \n    // Legs\n    module leg() {\n        // Upper leg\n        translate([6, 0, 5])\n            rotate([0, 30, 0])\n            cylinder(h=12, r1=4, r2=3, $fn=8);\n            \n        // Lower leg\n        translate([6, 0, -3])\n            rotate([0, 30, 0])\n            cylinder(h=10, r1=3, r2=2, $fn=8);\n            \n        // Foot\n        translate([6, 0, -8])\n            rotate([0, 30, 0])\n            scale([2, 1, 0.5])\n            sphere(3, $fn=8);\n            \n        // Toes\n        for(angle = [-30, 0, 30]) {\n            translate([6, 0, -8])\n                rotate([0, 30, angle])\n                cylinder(h=5, r=1, $fn=6);\n        }\n    }\n    \n    // Left leg\n    leg();\n    \n    // Right leg\n    mirror([1, 0, 0])\n        leg();\n    \n    // Tail feathers\n    union() {\n        for(i = [-2:2]) {\n            translate([0, -12, 5 + i*3])\n                rotate([0, 20 - abs(i)*5, i*15])\n                scale([0.3, 1, 0.1])\n                cylinder(h=15, r1=8, r2=4, $fn=8);\n        }\n    }\n    \n    // Decorative chest feathers\n    for(i = [0:2]) {\n        translate([0, 5, 15 - i*5])\n            rotate([0, 0, 0])\n            scale([1 - i*0.2, 0.3, 0.1])\n            sphere(5, $fn=8);\n    }\n    \n    // Crown\n    translate([0, 0, 38])\n        cylinder(h=2, r1=3, r2=4, $fn=8);\n        \n    // Crown spikes\n    for(i = [0:4]) {\n        translate([3*cos(i*72), 3*sin(i*72), 40])\n            cylinder(h=3, r=0.5, $fn=6);\n    }\n}\n\n// Generate the model\ngaruda();",
    "renders": true
  },
  {
    "household_item": "vetala",
    "openscad_code": "// OpenSCAD Vetala – realistic, medium complexity\n// 60 mm tall figure, printable without supports\n\n$fa = 2; $fs = 0.5;\n\n// Overall scale so tallest point ≈ 60 mm\nscale(0.8)\nunion() {\n\n    // === TORSO ===\n    color(\"DarkKhaki\")\n    translate([0, 0, 12])\n    torso();\n\n    // === HEAD ===\n    color(\"DarkKhaki\")\n    translate([0, 0, 38])\n    head();\n\n    // === ARMS ===\n    color(\"DarkKhaki\")\n    left_arm();\n    color(\"DarkKhaki\")\n    mirror([1, 0, 0])\n    left_arm();\n\n    // === LEGS ===\n    color(\"DarkKhaki\")\n    translate([5, 0, 0])\n    left_leg();\n    color(\"DarkKhaki\")\n    mirror([1, 0, 0])\n    translate([5, 0, 0])\n    left_leg();\n\n    // === WINGS ===\n    color(\"DarkOliveGreen\")\n    translate([0, 0, 35])\n    left_wing();\n    color(\"DarkOliveGreen\")\n    mirror([1, 0, 0])\n    left_wing();\n\n    // === TAIL ===\n    color(\"DarkOliveGreen\")\n    translate([0, -8, 15])\n    rotate([90, 0, 0])\n    tail();\n}\n\n// ---------- MODULES ----------\n\nmodule torso() {\n    // ribcage\n    difference() {\n        hull() {\n            sphere(8);            // chest\n            translate([0, 0, -8])\n            sphere(6);            // waist\n        }\n        // hollow for printing\n        translate([0, 0, -1])\n        scale([0.7, 0.7, 0.9])\n        sphere(8.5);\n    }\n}\n\nmodule head() {\n    // skull\n    difference() {\n        sphere(7);\n        // eye sockets\n        translate([3, 5, 2])\n        sphere(1.8);\n        translate([-3, 5, 2])\n        sphere(1.8);\n        // mouth cavity\n        translate([0, 5.5, -2])\n        rotate([20, 0, 0])\n        cube([7, 3, 4], center = true);\n    }\n    // fangs\n    for(x = [-2.5, 2.5])\n        translate([x, 6, -4])\n        cylinder(h = 2.5, d1 = 2, d2 = 0.5, center = false);\n}\n\nmodule left_arm() {\n    translate([12, 0, 25])\n    rotate([0, 30, 90])\n    difference() {\n        hull() {\n            cylinder(h = 15, d = 5, center = true);   // upper arm\n            translate([0, 0, 15])\n            cylinder(h = 12, d = 3.5, center = true); // forearm\n        }\n        // hollow\n        scale([0.7, 0.7, 0.9])\n        hull() {\n            cylinder(h = 15, d = 5, center = true);\n            translate([0, 0, 15])\n            cylinder(h = 12, d = 3.5, center = true);\n        }\n    }\n}\n\nmodule left_leg() {\n    translate([0, 0, 6])\n    rotate([0, 0, 10])\n    difference() {\n        hull() {\n            cylinder(h = 16, d = 6, center = true);   // thigh\n            translate([0, 0, -16])\n            cylinder(h = 14, d = 4, center = true);   // shin\n        }\n        // hollow\n        scale([0.7, 0.7, 0.9])\n        hull() {\n            cylinder(h = 16, d = 6, center = true);\n            translate([0, 0, -16])\n            cylinder(h = 14, d = 4, center = true);\n        }\n    }\n}\n\nmodule left_wing() {\n    rotate([0, 0, 25])\n    for(i = [0:1:6]) {\n        rotate([0, i * 12, 0])\n        translate([10 + i * 2.5, 0, -i * 1.2])\n        difference() {\n            cube([20 - i * 1.5, 0.8, 2]); // rib\n            translate([0, -1, 0])\n            cube([21, 3, 3]);\n        }\n    }\n}\n\nmodule tail() {\n    difference() {\n        hull() {\n            cylinder(h = 20, d = 4, center = true);   // base\n            translate([0, 0, 20])\n            sphere(2);                                // tip\n        }\n        // hollow\n        scale([0.7, 0.7, 0.7])\n        hull() {\n            cylinder(h = 20, d = 4, center = true);\n            translate([0, 0, 20])\n            sphere(2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "household_item": "pishacha",
    "openscad_code": "// Pishacha Demon – OpenSCAD (realistic, medium complexity, 3D-printable)\n// Overall height ≈ 70 mm, wall ≥ 1.2 mm, no steep overhangs\n\n$fn = 64;               // smooth curves\nth = 1.4;               // uniform wall / thickness\n\nmodule head() {\n    // skull base\n    difference() {\n        sphere(d = 28);\n        translate([0,0,-15]) cube(30, center=true);   // flat bottom\n    }\n\n    // elongated snout\n    translate([0, 12, -3])\n        rotate([0,20,0])\n        scale([1, 1.3, 0.8])\n        cylinder(h = 12, r1 = 6, r2 = 3);\n\n    // eye sockets\n    for (x = [-8, 8])\n        translate([x, 7, 5])\n            rotate([0,45,0])\n            sphere(d = 7);\n\n    // brow ridges\n    for (x = [-11, 11])\n        translate([x, 9, 8])\n            scale([1.2, 0.4, 0.6])\n            cube([6, 4, 4], center=true);\n\n    // small horns\n    for (a = [30, 150])\n        rotate([0,0,a])\n        translate([0, 0, 14])\n            cylinder(h1 = 8, h2 = 15, r1 = 3, r2 = 1.5);\n}\n\nmodule torso() {\n    difference() {\n        // main rib-cage\n        translate([0, -8, -25])\n            scale([1.2, 1.3, 1.6])\n            sphere(d = 30);\n\n        // hollow inside\n        translate([0, -8, -25])\n            scale([1.15, 1.2, 1.5])\n            sphere(d = 28);\n    }\n\n    // spine protrusion\n    for (i = [0:2])\n        translate([0, -8 - i*6, -20 - i*4])\n            rotate([0,10,0])\n            cylinder(h = 5, r = 3 - i*0.8);\n}\n\nmodule arm(side = 1) {\n    // shoulder\n    translate([side*12, -5, -8])\n        sphere(d = 8);\n\n    // upper arm\n    rotate([0,0,side*15])\n    translate([side*18, -8, -12])\n        cylinder(h = 18, r = 4);\n\n    // forearm\n    rotate([0,0,side*20])\n    translate([side*28, -10, -22])\n        cylinder(h = 20, r1 = 4, r2 = 2.5);\n\n    // claws (simple cones)\n    for (c = [0:2])\n        rotate([0,0,side*(-20 + c*20)])\n        translate([side*36, -12 + c*side*3, -26])\n            cylinder(h1 = 6, h2 = 9, r1 = 1.5, r2 = 0.5);\n}\n\nmodule leg(side = 1) {\n    // hip\n    translate([side*6, -12, -45])\n        sphere(d = 9);\n\n    // thigh\n    rotate([0,0,side*5])\n    translate([side*7, -10, -55])\n        cylinder(h = 20, r = 4.5);\n\n    // shin\n    rotate([0,0,side*5])\n    translate([side*7, -10, -68])\n        cylinder(h = 18, r1 = 4.5, r2 = 3);\n\n    // hoof block\n    translate([side*7, -10, -79])\n        cube([5, 5, 4], center=true);\n}\n\n// assembly\nunion() {\n    head();\n    torso();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "household_item": "domovoi",
    "openscad_code": "// Domovoi figure - Slavic house spirit\n// Size: ~70mm height, 3D printable\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule beard() {\n    difference() {\n        // Main beard shape\n        translate([0, -2, 0])\n            scale([1.2, 0.8, 1.5])\n            sphere(12);\n        \n        // Trim bottom flat\n        translate([0, 0, -12])\n            cube([30, 30, 12], center=true);\n    }\n}\n\nmodule hat() {\n    // Pointy felt hat\n    translate([0, 0, 20])\n        cylinder(h1=25, h2=0, r1=15, r2=0);\n    \n    // Hat band\n    translate([0, 0, 30])\n        cylinder(h=3, r=15.5);\n}\n\nmodule body() {\n    // Main body\n    translate([0, 0, 10])\n        scale([1.2, 1, 1.3])\n        sphere(15);\n    \n    // Simple arms\n    // Left arm\n    translate([-18, 0, 8])\n        rotate([0, 0, 30])\n        cylinder(h=15, r=4);\n    \n    // Right arm\n    translate([18, 0, 8])\n        rotate([0, 0, -30])\n        cylinder(h=15, r=4);\n}\n\nmodule head() {\n    // Head\n    translate([0, 0, 25])\n        sphere(12);\n    \n    // Nose\n    translate([0, -11.5, 25])\n        sphere(3);\n    \n    // Eyes (sunken)\n    translate([-4, -9, 27])\n        sphere(1.5);\n    translate([4, -9, 27])\n        sphere(1.5);\n}\n\nmodule belt() {\n    // Belt around waist\n    translate([0, 0, 12])\n        rotate([90, 0, 0])\n        cylinder(h=25, r=15.5);\n}\n\nmodule feet() {\n    // Simple feet\n    // Left foot\n    translate([-8, 0, -2])\n        scale([1, 1.5, 0.5])\n        sphere(8);\n    \n    // Right foot\n    translate([8, 0, -2])\n        scale([1, 1.5, 0.5])\n        sphere(8);\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    body();\n    head();\n    beard();\n    hat();\n    belt();\n    feet();\n    \n    // Add texture details to clothing\n    // Vertical lines on robe\n    for(i = [-2:1:2]) {\n        translate([i * 6, 0, 10])\n            cylinder(h=20, r=0.5);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "rusalka",
    "openscad_code": "// Rusalka (Slavic water spirit) - realistic medium complexity\n// Overall height ~80mm, designed for FDM printing with minimal supports\n\n$fa = 2;\n$fs = 0.5;\n\nmodule rusalka() {\n    // Base water surface disc\n    translate([0, 0, -1]) \n        cylinder(h=2, r=20, $fn=60);\n    \n    // Torso\n    union() {\n        // Upper body\n        translate([0, 0, 15])\n            scale([1, 0.8, 1.2])\n                sphere(d=18);\n        \n        // Waist\n        translate([0, 0, 6])\n            cylinder(h=10, r1=9, r2=6, $fn=32);\n    }\n    \n    // Head\n    translate([0, 0, 28])\n        sphere(d=16);\n    \n    // Hair - flowing strands\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n            translate([8, 0, 25])\n                rotate([90, 0, 0])\n                    cylinder(h=20+sin(i*3)*5, r1=3, r2=1.5, $fn=8);\n    }\n    \n    // Arms\n    module arm(side) {\n        translate([0, side*8, 22]) {\n            // Upper arm\n            rotate([0, side*20, 0])\n                cylinder(h=12, r=2.5, $fn=12);\n            \n            // Lower arm\n            translate([0, side*10, 10])\n                rotate([0, side*30, 0])\n                    cylinder(h=15, r=2, $fn=12);\n            \n            // Hand\n            translate([0, side*12, 23])\n                sphere(d=4);\n        }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Fish tail\n    union() {\n        // Tail body\n        hull() {\n            translate([0, 0, 5])\n                cylinder(h=5, r=6, $fn=32);\n            translate([0, 0, -20])\n                scale([1, 0.4, 1])\n                    sphere(d=12);\n        }\n        \n        // Tail fin\n        translate([0, 0, -25])\n            rotate([0, 90, 0])\n                difference() {\n                    scale([1, 0.3, 1])\n                        cylinder(h=20, r1=15, r2=0, $fn=3);\n                    \n                    // Cut fin shape\n                    translate([0, 0, 10])\n                        cube([30, 10, 30], center=true);\n                }\n    }\n    \n    // Face details\n    // Eyes\n    translate([3.5, 4, 29])\n        sphere(d=2);\n    translate([3.5, -4, 29])\n        sphere(d=2);\n    \n    // Nose\n    translate([5, 0, 27])\n        scale([1, 0.7, 0.5])\n            sphere(d=3);\n    \n    // Mouth\n    translate([5.5, 0, 25])\n        rotate([90, 0, 0])\n            cylinder(h=0.5, r=1.5, $fn=16);\n    \n    // Seaweed decoration\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([12, 0, 0])\n                rotate([0, 0, 15])\n                    cylinder(h=25, r1=1.5, r2=0.5, $fn=6);\n    }\n}\n\n// Generate the model\nrusalka();",
    "renders": true
  },
  {
    "household_item": "vila",
    "openscad_code": "// Realistic medium-complexity 3D-printable villa\n// Overall footprint ~60 mm × 40 mm × 35 mm\n\nmodule wall_block(l, w, h) cube([l, w, h]);\nmodule window_block(l, w, h) cube([l, w, h]);\n\n// Main house body\nmodule main_body() {\n    difference() {\n        union() {\n            // Ground floor walls (40 mm × 25 mm × 15 mm)\n            wall_block(40, 25, 15);\n            // Upper floor walls (40 mm × 25 mm × 12 mm)\n            translate([0, 0, 15]) wall_block(40, 25, 12);\n        }\n        // Door on ground floor front\n        translate([18, -0.1, 0]) cube([4, 0.2, 7]);\n        // Windows ground floor\n        for (x = [8, 28]) {\n            translate([x, -0.1, 8]) cube([4, 0.2, 5]);\n        }\n        // Windows upper floor\n        for (x = [8, 28]) {\n            translate([x, -0.1, 18]) cube([4, 0.2, 5]);\n        }\n    }\n}\n\n// Simple gabled roof\nmodule roof() {\n    translate([-2, -2, 27]) {\n        difference() {\n            union() {\n                // Main roof body\n                translate([0, 0, 0]) cube([44, 29, 2]);\n                translate([0, 0, 2]) cube([44, 29, 1.5]);\n                // Ridge\n                translate([21, 13, 3.5]) cube([2, 3, 2]);\n            }\n            // Roof slope cut-outs\n            translate([-1, -1, 1]) rotate([45, 0, 0]) cube([46, 31, 5]);\n            translate([-1, 30, 1]) rotate([-45, 0, 0]) cube([46, 31, 5]);\n        }\n    }\n}\n\n// Garage wing\nmodule garage() {\n    translate([41, 5, 0]) {\n        difference() {\n            wall_block(18, 20, 12);\n            // Garage door opening\n            translate([1, -0.1, 0]) cube([16, 0.2, 8]);\n        }\n    }\n}\n\n// Chimney\nmodule chimney() {\n    translate([30, 20, 27]) {\n        difference() {\n            cube([6, 6, 8]);\n            // Flue top\n            translate([1, 1, 7.5]) cube([4, 4, 1]);\n        }\n    }\n}\n\n// Balcony railing\nmodule balcony() {\n    translate([0, 25, 15]) {\n        difference() {\n            wall_block(40, 2, 4);\n            // Balcony windows\n            for (x = [8, 18, 28]) {\n                translate([x, -0.1, 1]) cube([4, 0.2, 3]);\n            }\n        }\n    }\n}\n\n// Assemble villa\nmain_body();\nroof();\ngarage();\nchimney();\nbalcony();",
    "renders": true
  },
  {
    "household_item": "leshy",
    "openscad_code": "// Leshy Forest Guardian\n// Approx 70mm tall, 3mm walls for 3D printing\n\n$fn = 36;\n\nmodule face() {\n    // Head base\n    translate([0,0,32])\n    difference() {\n        sphere(10);\n        // Hollow interior\n        sphere(7);\n    }\n    \n    // Eyes\n    for(x=[-4,4])\n    translate([x,6,34])\n    difference() {\n        sphere(2);\n        sphere(1);\n    }\n    \n    // Nose\n    translate([0,3,32])\n    cube([2,4,3], center=true);\n    \n    // Mouth\n    translate([0,1,29])\n    cube([8,2,1], center=true);\n}\n\nmodule torso() {\n    // Chest\n    translate([0,0,20])\n    difference() {\n        cube([14,10,20], center=true);\n        cube([10,6,18], center=true);\n    }\n    \n    // Bark texture ribs\n    for(z=[0,5,10,15])\n    translate([0,6,20-z])\n    cube([15,1,3], center=true);\n}\n\nmodule arm(side) {\n    translate([side*8,0,28])\n    rotate([0,side*20,0])\n    difference() {\n        cylinder(h=12, r1=3, r2=2);\n        cylinder(h=12, r1=2, r2=1);\n    }\n    \n    // Hand\n    translate([side*11,0,15])\n    sphere(2);\n}\n\nmodule leg(side) {\n    translate([side*4,0,8])\n    difference() {\n        cylinder(h=16, r1=4, r2=3);\n        cylinder(h=16, r1=3, r2=2);\n    }\n    \n    // Foot\n    translate([side*4,4,0])\n    cube([6,8,3], center=true);\n}\n\nmodule moss() {\n    // Shoulder moss\n    translate([8,5,28])\n    scale([1.2,0.8,0.5])\n    sphere(3);\n    \n    translate([-8,5,28])\n    scale([1.2,0.8,0.5])\n    sphere(3);\n    \n    // Head moss\n    for(i=[0:5])\n    rotate([0,0,i*60])\n    translate([0,11,38])\n    cylinder(h=5, r1=1, r2=0.5);\n}\n\n// Main assembly\nunion() {\n    face();\n    torso();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Back detail\n    translate([0,-6,25])\n    cube([12,2,10], center=true);\n    \n    // Root details\n    for(i=[-6:6])\n    translate([i,-4,0])\n    cylinder(h=2, r1=1, r2=0.5);\n    \n    moss();\n}",
    "renders": true
  },
  {
    "household_item": "vodnik",
    "openscad_code": "// Vodnik (water spirit) - realistic style, medium complexity\n// Overall dimensions: ~70mm height\n\n// Color constants\n$fn=24;\n\nmodule vodnik() {\n    // Base platform (pond)\n    translate([0,0,-2]) \n        cube([60,50,4], center=true);\n    \n    // Legs and feet\n    module leg() {\n        union() {\n            // Upper leg\n            translate([0,0,15]) \n                cylinder(h=20, d=8, center=true);\n            // Lower leg\n            translate([0,0,5]) \n                cylinder(h=10, d=6, center=true);\n            // Webbed foot\n            translate([0,-4,0]) \n                cube([12,8,2], center=true);\n        }\n    }\n    \n    // Position legs\n    translate([-12,0,4]) leg();\n    translate([12,0,4]) leg();\n    \n    // Torso\n    translate([0,0,20]) \n        scale([1,0.8,1.2]) \n            sphere(d=30);\n    \n    // Arms\n    module arm() {\n        union() {\n            // Upper arm\n            translate([0,0,5]) \n                cylinder(h=15, d=6, center=true);\n            // Forearm\n            translate([0,-8,0]) \n                rotate([90,0,0]) \n                    cylinder(h=12, d=5, center=true);\n            // Webbed hand\n            translate([0,-15,0]) \n                cube([10,6,2], center=true);\n        }\n    }\n    \n    // Position arms\n    translate([-18,0,25]) rotate([0,0,-30]) arm();\n    translate([18,0,25]) rotate([0,0,30]) mirror([1,0,0]) arm();\n    \n    // Head\n    translate([0,0,40]) \n        sphere(d=22);\n    \n    // Beard (water weed)\n    translate([0,-8,35]) \n        scale([1,1.5,0.5]) \n            sphere(d=20);\n    \n    // Eyes\n    module eye() {\n        difference() {\n            sphere(d=4);\n            translate([0,-2,1]) \n                sphere(d=2);\n        }\n    }\n    \n    translate([-5,10,42]) eye();\n    translate([5,10,42]) eye();\n    \n    // Hat (pond lily pad)\n    translate([0,0,52]) \n        scale([1.5,1.5,0.3]) \n            sphere(d=25);\n    \n    // Lily pad rim\n    difference() {\n        translate([0,0,53]) \n            scale([1.5,1.5,0.2]) \n                sphere(d=28);\n        translate([0,0,53]) \n            scale([1.2,1.2,0.3]) \n                sphere(d=25);\n    }\n    \n    // Lily flower\n    translate([0,0,56]) \n        cylinder(h=3, d=10);\n    \n    // Water droplets on hat\n    for(i=[-20:10:20]) {\n        translate([i,0,54]) \n            sphere(d=2);\n    }\n    \n    // Fish in hand (left hand)\n    translate([-18,-15,0]) \n        rotate([90,0,-30]) \n            scale([0.5,0.2,0.2]) \n                sphere(d=10);\n    \n    // Water pouring from beard\n    for(i=[0:3:15]) {\n        translate([0,-8-i,35-i/2]) \n            sphere(d=3-i/10);\n    }\n}\n\n// Render the vodnik\nvodnik();",
    "renders": true
  },
  {
    "household_item": "polevik",
    "openscad_code": "// Polevik - Slavic field spirit guardian\n// Scaled for 3D printing: ~70mm tall\n\n$fn = 36; // Smooth curves for printing\n\n// Overall scale\nscale_factor = 1.0;\n\nmodule polevik() {\n    // Base platform (earth mound)\n    color(\"saddlebrown\")\n    translate([0, 0, -2])\n    scale([1.2, 1.2, 0.4])\n    cylinder(h=4, r1=20, r2=15);\n    \n    // Main body (gnarled, root-like)\n    color(\"forestgreen\")\n    union() {\n        // Central torso\n        translate([0, 0, 15])\n        scale([1, 0.8, 1.5])\n        sphere(10);\n        \n        // Root-like appendages\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([8, 0, 10])\n            rotate([90, 0, i/2])\n            scale([0.6, 0.6, 2])\n            cylinder(h=8, r1=3, r2=1.5);\n        }\n    }\n    \n    // Arms (branch-like)\n    module arm(side) {\n        translate([side * 12, 0, 22]) {\n            rotate([0, 0, side * 30])\n            scale([0.5, 0.5, 1])\n            cylinder(h=15, r1=4, r2=2.5);\n            \n            translate([side * 7, 0, 12])\n            rotate([0, 0, side * 20])\n            scale([0.4, 0.4, 0.8])\n            cylinder(h=10, r1=3, r2=2);\n        }\n    }\n    \n    arm(1); // Right arm\n    arm(-1); // Left arm\n    \n    // Head (moss-covered stone-like)\n    color(\"darkolivegreen\")\n    translate([0, 0, 30])\n    union() {\n        // Main head shape\n        scale([0.8, 0.9, 1.1])\n        sphere(8);\n        \n        // Glowing eyes (hollow depressions)\n        color(\"black\")\n        for(side = [-1, 1]) {\n            translate([side * 3, 2, 2])\n            scale([1, 0.7, 0.3])\n            sphere(2.5);\n        }\n        \n        // Moss patches\n        color(\"green\")\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle])\n            translate([0, 6, 0])\n            scale([1.2, 0.6, 0.3])\n            sphere(3);\n        }\n    }\n    \n    // Straw/grass crown\n    color(\"yellow\")\n    translate([0, 0, 38])\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([6, 0, 0])\n        rotate_extrude(angle=30)\n        translate([0.5, 0, 0])\n        circle(r=0.5);\n    }\n    \n    // Wheat stalks held in hands\n    color(\"goldenrod\")\n    module wheat_bundle(x_pos) {\n        translate([x_pos * 15, 0, 34])\n        rotate([0, 90, 0])\n        for(i = [0:30:150]) {\n            rotate([0, 0, i])\n            translate([0, 0, 0])\n            scale([0.1, 0.1, 1])\n            cylinder(h=20, r=1);\n            \n            // Wheat heads\n            translate([0, 20, 0])\n            scale([1.5, 1.5, 0.5])\n            sphere(2);\n        }\n    }\n    \n    wheat_bundle(1);\n    wheat_bundle(-1);\n    \n    // Feet (root-like)\n    color(\"saddlebrown\")\n    for(side = [-1, 1]) {\n        translate([side * 5, 0, 0])\n        rotate([0, 0, side * 15])\n        scale([0.8, 0.6, 1])\n        cylinder(h=8, r1=4, r2=3);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\npolevik();",
    "renders": true
  },
  {
    "household_item": "kikimora",
    "openscad_code": "// Kikimora - Slavic household spirit\n// Medium complexity realistic style\n// Approximate height: 70mm\n\n// Base parameters\nbody_height = 35;\nbody_width = 25;\nhead_diameter = 18;\narm_length = 20;\nleg_length = 25;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main body module\nmodule kikimora_body() {\n    // Torso - tapered cylinder\n    cylinder(h=body_height, r1=body_width/2, r2=body_width/2-4, $fn=32);\n    \n    // Hunched back extension\n    translate([0, -body_width/4, body_height-5]) \n        rotate([30, 0, 0])\n            cylinder(h=15, r1=8, r2=5, $fn=24);\n}\n\n// Head module\nmodule kikimora_head() {\n    // Main head sphere\n    sphere(d=head_diameter, $fn=32);\n    \n    // Pointed chin\n    translate([0, 0, -head_diameter/2-2])\n        cylinder(h=6, r1=head_diameter/3, r2=0, $fn=16);\n    \n    // Long nose\n    translate([0, head_diameter/2-2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=12, r1=2, r2=1, $fn=8);\n    \n    // Eyes - sunken\n    for(x = [-head_diameter/4, head_diameter/4]) {\n        translate([x, head_diameter/3, head_diameter/6])\n            sphere(d=4, $fn=16);\n    }\n}\n\n// Arms module\nmodule kikimora_arm(side) {\n    // Upper arm\n    translate([side*body_width/2, 0, body_height-10])\n        rotate([0, side*20, 0])\n            cylinder(h=arm_length/2, r=3, $fn=16);\n    \n    // Lower arm\n    translate([side*(body_width/2+arm_length/2*cos(20)), 0, body_height-10-arm_length/2*sin(20)])\n        rotate([0, side*45, 0])\n            cylinder(h=arm_length/2, r=2.5, $fn=16);\n    \n    // Claw hands\n    translate([side*(body_width/2+arm_length*cos(30)), 0, body_height-10-arm_length*sin(30)])\n        difference() {\n            sphere(d=6, $fn=16);\n            // Fingers\n            for(i = [0:30:120])\n                rotate([0, 0, i])\n                    translate([0, 2, 0])\n                        cube([4, 1, 1], center=true);\n        }\n}\n\n// Legs module\nmodule kikimora_leg(side) {\n    // Upper leg\n    translate([side*body_width/3, 0, -body_height/2])\n        rotate([20, 0, 0])\n            cylinder(h=leg_length/2, r=4, $fn=16);\n    \n    // Lower leg\n    translate([side*body_width/3, 0, -body_height/2-leg_length/2])\n        rotate([10, 0, 0])\n            cylinder(h=leg_length/2, r=3, $fn=16);\n    \n    // Bird-like feet\n    translate([side*body_width/3, 0, -body_height/2-leg_length])\n        difference() {\n            sphere(d=8, $fn=16);\n            // Toes\n            for(i = [-30, 0, 30])\n                rotate([0, i, 0])\n                    translate([0, 0, -2])\n                        cube([6, 2, 2], center=true);\n        }\n}\n\n// Hair module\nmodule kikimora_hair() {\n    // Main hair mass\n    translate([0, -head_diameter/4, head_diameter/2])\n        scale([1.2, 1, 1.5])\n            sphere(d=head_diameter, $fn=32);\n    \n    // Strands\n    for(i = [0:20:340])\n        rotate([0, 0, i])\n            translate([head_diameter/2+3, 0, head_diameter/2])\n                cylinder(h=15, r1=1.5, r2=0.5, $fn=8);\n}\n\n// Apron module\nmodule kikimora_apron() {\n    // Main apron\n    translate([0, body_width/2-2, body_height/2-10])\n        rotate([90, 0, 0])\n            cylinder(h=20, r1=body_width/2-2, r2=body_width/2-5, $fn=32);\n    \n    // Apron strings\n    for(side = [-1, 1])\n        translate([side*body_width/2, body_width/2-2, body_height/2-5])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=0.5, $fn=8);\n}\n\n// Assembly\nunion() {\n    // Body\n    translate([0, 0, leg_length+body_height/2])\n        kikimora_body();\n    \n    // Head\n    translate([0, 0, leg_length+body_height+head_diameter/2-5])\n        kikimora_head();\n    \n    // Arms\n    kikimora_arm(1);\n    kikimora_arm(-1);\n    \n    // Legs\n    kikimora_leg(1);\n    kikimora_leg(-1);\n    \n    // Hair\n    translate([0, 0, leg_length+body_height+head_diameter/2-5])\n        kikimora_hair();\n    \n    // Apron\n    kikimora_apron();\n}",
    "renders": true
  },
  {
    "household_item": "alkonost",
    "openscad_code": "// Alkonost Bird - Medium Complexity Realistic Style\n// Size: ~75mm wingspan, 3D printable\n\n$fn = 36;\n\n// Parameters\nbody_length = 25;\nbody_height = 20;\nhead_size = 12;\nwing_span = 75;\ntail_length = 30;\nleg_height = 8;\nbeak_length = 8;\n\n// Main module\nmodule alkonost() {\n    // Body\n    union() {\n        // Main body - oval shape\n        translate([0, 0, body_height/2])\n            scale([1.3, 1, 1])\n            sphere(d=body_height);\n        \n        // Chest protrusion\n        translate([body_length/2, 0, body_height/3])\n            sphere(d=body_height*0.7);\n        \n        // Lower body\n        translate([0, 0, -body_height/4])\n            cylinder(h=body_height/2, d1=body_height*0.8, d2=body_height*0.6);\n    }\n    \n    // Head\n    translate([-body_length/2, 0, body_height*0.8])\n    union() {\n        sphere(d=head_size);\n        \n        // Beak\n        rotate([0, 20, 0])\n        translate([-head_size/2, 0, 0])\n            cylinder(h=beak_length, d1=head_size*0.4, d2=0);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([0, side*head_size/3, head_size/4])\n                sphere(d=head_size*0.2);\n        }\n    }\n    \n    // Wings\n    module wing() {\n        difference() {\n            // Main wing shape\n            translate([0, 0, 0])\n                cube([wing_span/2, wing_span/4, 2]);\n            \n            // Feather cutouts\n            for(i = [1:3]) {\n                translate([i*10, 5, -1])\n                    cylinder(h=4, d=8);\n            }\n            for(i = [1:2]) {\n                translate([i*15, -5, -1])\n                    cylinder(h=4, d=6);\n            }\n        }\n        \n        // Wing detail - raised feathers\n        for(i = [1:4]) {\n            translate([i*8, 0, 2])\n                cube([6, 4, 1]);\n        }\n    }\n    \n    // Left wing\n    translate([0, body_height/2, body_height/2])\n    rotate([0, 0, -20])\n    wing();\n    \n    // Right wing\n    translate([0, -body_height/2, body_height/2])\n    rotate([0, 0, 20])\n    mirror([0,1,0])\n    wing();\n    \n    // Tail\n    translate([body_length/2 + tail_length/2, 0, body_height/3])\n    union() {\n        // Main tail\n        cube([tail_length, 15, 3]);\n        \n        // Tail feathers\n        for(i = [-1, 0, 1]) {\n            translate([tail_length/2, i*5, 3])\n                cube([8, 3, 2]);\n        }\n    }\n    \n    // Legs\n    module leg() {\n        // Upper leg\n        cylinder(h=leg_height, d=3);\n        \n        // Lower leg\n        translate([0, 0, -leg_height-2])\n            cylinder(h=4, d=2);\n        \n        // Foot\n        translate([2, 0, -leg_height-4])\n            cube([5, 3, 1]);\n    }\n    \n    // Left leg\n    translate([-body_length/4, body_height/3, -body_height/2])\n    leg();\n    \n    // Right leg\n    translate([-body_length/4, -body_height/3, -body_height/2])\n    leg();\n}\n\n// Generate the model\nalkonost();",
    "renders": true
  },
  {
    "household_item": "sirin",
    "openscad_code": "// Sirin - Russian mythological bird-woman\n// Wings, bird body, woman's head with flowing hair\n\n// Overall size: ~70mm wingspan\n\nmodule sirin() {\n    // Main body\n    union() {\n        // Bird body\n        translate([0, 0, 10])\n        scale([1.2, 1, 1.3])\n        sphere(15);\n\n        // Woman's head\n        translate([0, 0, 30])\n        sphere(10);\n\n        // Neck\n        translate([0, 0, 22])\n        cylinder(h=8, r1=6, r2=4);\n\n        // Beak\n        translate([0, -12, 30])\n        rotate([0, 30, 0])\n        scale([1, 0.8, 2])\n        cylinder(h=8, r1=3, r2=0);\n\n        // Wings\n        for(side = [-1, 1]) {\n            // Upper wing\n            translate([side * 15, 0, 25])\n            rotate([0, side * 20, side * 30])\n            scale([1.2, 0.1, 0.8])\n            sphere(20);\n\n            // Lower wing\n            translate([side * 18, 0, 15])\n            rotate([0, side * 30, side * 45])\n            scale([0.8, 0.1, 0.6])\n            sphere(15);\n        }\n\n        // Tail feathers\n        for(i = [-2:2]) {\n            translate([i * 3, -15, 10])\n            rotate([0, 10, 0])\n            scale([0.3, 1.5, 0.05])\n            sphere(8);\n        }\n\n        // Hair - flowing curls\n        for(i = [0:5]) {\n            translate([7 * cos(i * 60), 7 * sin(i * 60), 38])\n            rotate([0, 0, i * 60])\n            scale([0.3, 0.3, 1.5])\n            sphere(5);\n            \n            translate([-7 * cos(i * 60), 7 * sin(i * 60), 38])\n            rotate([0, 0, -i * 60])\n            scale([0.3, 0.3, 1.5])\n            sphere(5);\n        }\n\n        // Legs\n        for(side = [-1, 1]) {\n            translate([side * 5, -8, 0])\n            cylinder(h=10, r=2);\n            \n            // Feet\n            translate([side * 5, -15, 0])\n            scale([1.5, 0.5, 0.3])\n            sphere(4);\n            \n            // Toes\n            for(j = [-1, 0, 1]) {\n                translate([side * 5 + j * 3, -18, 0])\n                cylinder(h=3, r=1);\n            }\n        }\n    }\n}\n\n// Create the sirin\nsirin();",
    "renders": true
  },
  {
    "household_item": "gamayun",
    "openscad_code": "// Gamayun - Slavic mythical bird with woman's head\n// Medium complexity realistic style\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nbody_length = 60;\nbody_height = 35;\nwing_span = 80;\nhead_height = 20;\n\nmodule body() {\n    // Main torso - oval shape\n    translate([0, 0, 15])\n    scale([1.2, 1, 0.8])\n    sphere(d=30);\n    \n    // Lower body extension\n    translate([0, 0, 5])\n    scale([1, 0.8, 1.2])\n    cylinder(h=20, d1=25, d2=20);\n    \n    // Tail feathers\n    for(i = [-2:1:2]) {\n        rotate([0, i*15, 0])\n        translate([-28, 0, 8])\n        scale([1.5, 0.3, 0.8])\n        cylinder(h=15, d=8);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-5, -20, 25])\n    rotate([0, 0, 30])\n    scale([2, 0.3, 1])\n    cylinder(h=25, d1=5, d2=15);\n    \n    // Wing feathers\n    for(i = [0:1:3]) {\n        translate([-5 - i*8, -25 - i*3, 25 - i*2])\n        rotate([-10 + i*5, 0, 30 - i*5])\n        scale([1.5, 0.2, 0.8])\n        cylinder(h=12 - i, d=8 - i);\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n    translate([-5, -20, 25])\n    rotate([0, 0, 30])\n    scale([2, 0.3, 1])\n    cylinder(h=25, d1=5, d2=15);\n    \n    // Right wing feathers\n    for(i = [0:1:3]) {\n        translate([-5 - i*8, -25 - i*3, 25 - i*2])\n        rotate([-10 + i*5, 0, 30 - i*5])\n        scale([1.5, 0.2, 0.8])\n        cylinder(h=12 - i, d=8 - i);\n    }\n}\n\nmodule head() {\n    // Neck\n    translate([0, 0, 35])\n    cylinder(h=8, d=12);\n    \n    // Head sphere\n    translate([0, 0, 45])\n    sphere(d=18);\n    \n    // Face forward extension\n    translate([0, 0, 45])\n    scale([1.2, 0.8, 1.1])\n    sphere(d=15);\n    \n    // Nose\n    translate([0, 9, 45])\n    scale([0.3, 0.5, 0.3])\n    sphere(d=10);\n    \n    // Eyes\n    for(x = [-1:1:1]) {\n        translate([x*5, 6, 48])\n        sphere(d=3);\n    }\n    \n    // Crown/headpiece\n    translate([0, 0, 55])\n    cylinder(h=5, d1=12, d2=8);\n    \n    // Crown details\n    for(i = [0:60:300]) {\n        rotate([0, 0, i])\n        translate([6, 0, 57])\n        cylinder(h=3, d=2);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-5, 0, 5])\n    cylinder(h=12, d=4);\n    \n    // Left foot\n    translate([-5, -2, -2])\n    scale([1.2, 2, 0.5])\n    sphere(d=8);\n    \n    // Right leg\n    translate([5, 0, 5])\n    cylinder(h=12, d=4);\n    \n    // Right foot\n    translate([5, -2, -2])\n    scale([1.2, 2, 0.5])\n    sphere(d=8);\n}\n\n// Assembly\nunion() {\n    body();\n    wings();\n    head();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "chuchuna",
    "openscad_code": "// Chuchuna (Siberian Yeti) - Medium complexity realistic style\n// All dimensions in mm, scaled for 80mm height\n\n$fn = 32;  // Smooth curves for printing\n\n// Main body assembly\nmodule chuchuna() {\n    union() {\n        // Torso - cylindrical body\n        translate([0, 0, 35])\n            rotate([90, 0, 0])\n                cylinder(h=40, d1=30, d2=25, center=true);\n        \n        // Pelvis area\n        translate([0, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=20, d1=25, d2=20, center=true);\n        \n        // Chest\n        translate([0, 0, 55])\n            rotate([90, 0, 0])\n                cylinder(h=25, d1=28, d2=30, center=true);\n        \n        // Head assembly\n        head();\n        \n        // Arms\n        left_arm();\n        right_arm();\n        \n        // Legs\n        left_leg();\n        right_leg();\n        \n        // Fur texture details\n        fur_details();\n    }\n}\n\n// Head with facial features\nmodule head() {\n    translate([0, 0, 75]) {\n        union() {\n            // Main head - elongated sphere\n            scale([1.2, 1, 1.1])\n                sphere(d=25);\n            \n            // Muzzle\n            translate([0, 12, -2])\n                scale([0.8, 1.2, 0.6])\n                    sphere(d=15);\n            \n            // Nose\n            translate([0, 18, 0])\n                scale([1, 1.5, 0.5])\n                    sphere(d=5);\n            \n            // Eyes\n            translate([-6, 8, 5])\n                sphere(d=4);\n            translate([6, 8, 5])\n                sphere(d=4);\n            \n            // Eye sockets (depressions)\n            difference() {\n                translate([-6, 8, 5])\n                    sphere(d=4.5);\n                translate([-6, 8.5, 5.5])\n                    sphere(d=3.5);\n            }\n            difference() {\n                translate([6, 8, 5])\n                    sphere(d=4.5);\n                translate([6, 8.5, 5.5])\n                    sphere(d=3.5);\n            }\n            \n            // Brow ridge\n            translate([0, 5, 8])\n                rotate([0, 0, 0])\n                    scale([1.3, 0.5, 0.3])\n                        sphere(d=20);\n        }\n    }\n}\n\n// Left arm assembly\nmodule left_arm() {\n    translate([-20, 0, 45]) {\n        rotate([0, 15, -20]) {\n            // Upper arm\n            cylinder(h=25, d=8, center=true);\n            \n            // Elbow joint\n            translate([0, 0, -15])\n                sphere(d=9);\n            \n            // Lower arm\n            translate([0, 0, -25])\n                rotate([0, 10, 0])\n                    cylinder(h=20, d=7, center=true);\n            \n            // Hand\n            translate([0, 0, -35])\n                scale([1.2, 1, 0.8])\n                    sphere(d=10);\n        }\n    }\n}\n\n// Right arm assembly\nmodule right_arm() {\n    mirror([1, 0, 0])\n        left_arm();\n}\n\n// Left leg assembly\nmodule left_leg() {\n    translate([-8, 0, 10]) {\n        rotate([0, -5, 5]) {\n            // Thigh\n            cylinder(h=30, d=12, center=true);\n            \n            // Knee\n            translate([0, 0, -18])\n                sphere(d=10);\n            \n            // Lower leg\n            translate([0, 0, -30])\n                rotate([0, 5, 0])\n                    cylinder(h=25, d=9, center=true);\n            \n            // Foot\n            translate([0, 8, -40])\n                rotate([0, 90, 0])\n                    scale([1.5, 0.8, 1])\n                        cylinder(h=15, d=10, center=true);\n        }\n    }\n}\n\n// Right leg assembly\nmodule right_leg() {\n    mirror([1, 0, 0])\n        left_leg();\n}\n\n// Fur texture using small spheres\nmodule fur_details() {\n    // Chest fur patches\n    for(i = [-1:1]) {\n        for(j = [-1:1]) {\n            translate([i*5, j*5 + 10, 45])\n                sphere(d=3);\n        }\n    }\n    \n    // Shoulder fur\n    for(i = [-1:0.5:1]) {\n        translate([-25 + i*5, 0, 45])\n            sphere(d=2.5);\n        translate([25 - i*5, 0, 45])\n            sphere(d=2.5);\n    }\n    \n    // Back fur ridge\n    for(i = [-0.5:0.5:0.5]) {\n        translate([0, i*3, 65])\n            sphere(d=3);\n    }\n}\n\n// Generate the complete model\nchuchuna();",
    "renders": true
  },
  {
    "household_item": "bigfoot",
    "openscad_code": "// Bigfoot model - medium complexity, realistic style\n// Overall height ~80mm, designed for 3D printing\n\n$fn = 32;  // Smooth curves\nwall = 2;  // Wall thickness for printing\n\n// Main module\nmodule bigfoot() {\n    // Body\n    union() {\n        // Torso\n        translate([0, 0, 32])\n        scale([1.2, 0.9, 1.3])\n        sphere(d=30);\n        \n        // Head\n        translate([0, 2, 52])\n        scale([0.8, 0.7, 0.9])\n        sphere(d=25);\n        \n        // Arms\n        left_arm();\n        mirror([1, 0, 0]) left_arm();\n        \n        // Legs\n        left_leg();\n        mirror([1, 0, 0]) left_leg();\n        \n        // Feet\n        left_foot();\n        mirror([1, 0, 0]) left_foot();\n        \n        // Chest detail\n        translate([0, 0, 35])\n        scale([0.6, 0.5, 0.4])\n        sphere(d=30);\n    }\n}\n\n// Left arm module\nmodule left_arm() {\n    translate([-18, 0, 45]) {\n        rotate([-15, 0, 15])\n        union() {\n            // Upper arm\n            rotate([90, 0, 0])\n            cylinder(h=20, d1=12, d2=10);\n            \n            // Lower arm\n            translate([0, 0, -22])\n            rotate([90, 0, 0])\n            cylinder(h=18, d1=10, d2=8);\n            \n            // Hand\n            translate([0, 0, -42])\n            scale([1.2, 1, 0.8])\n            sphere(d=10);\n        }\n    }\n}\n\n// Left leg module\nmodule left_leg() {\n    translate([-8, 0, 15]) {\n        union() {\n            // Thigh\n            rotate([90, 0, 0])\n            cylinder(h=25, d1=15, d2=12);\n            \n            // Calf\n            translate([0, 0, -27])\n            rotate([90, 0, 0])\n            cylinder(h=22, d1=12, d2=10);\n        }\n    }\n}\n\n// Left foot module\nmodule left_foot() {\n    translate([-8, 4, 0]) {\n        scale([2.5, 1, 0.6])\n        rotate([0, 15, 0])\n        sphere(d=15);\n        \n        // Toes\n        for(i = [-2:1:2]) {\n            translate([i*4, 8, -3])\n            scale([0.8, 1.5, 0.5])\n            sphere(d=6);\n        }\n    }\n}\n\n// Face details\nmodule face() {\n    translate([0, 13, 52]) {\n        // Eyes\n        for(x = [-5, 5]) {\n            translate([x, 2, 3])\n            color(\"black\")\n            sphere(d=3);\n        }\n        \n        // Nose\n        translate([0, 0, 0])\n        color(\"black\")\n        sphere(d=4);\n        \n        // Mouth\n        translate([0, -5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r=3);\n    }\n}\n\n// Hair texture using small spheres\nmodule hair() {\n    // Head hair\n    for(a = [0:30:359]) {\n        for(r = [10:5:20]) {\n            translate([r*cos(a), 15 + r*sin(a)*0.3, 55 + r*sin(a)*0.3])\n            sphere(d=2);\n        }\n    }\n    \n    // Body hair\n    for(a = [0:45:359]) {\n        for(r = [12:8:30]) {\n            for(h = [30:5:50]) {\n                translate([r*cos(a)*0.8, r*sin(a)*0.6, h])\n                sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Generate the model\nbigfoot();\nface();\nhair();",
    "renders": true
  },
  {
    "household_item": "sasquatch",
    "openscad_code": "// Sasquatch model - medium complexity realistic style\n// Height: ~80mm, printable without supports\n\n$fn = 32;\n\n// Main module\nmodule sasquatch() {\n    // Body proportions\n    body_height = 40;\n    body_width = 25;\n    body_depth = 20;\n    \n    // Head\n    translate([0, 0, body_height + 15]) \n        head();\n    \n    // Torso\n    translate([0, 0, body_height/2])\n        scale([1, 0.8, 1])\n        cube([body_width, body_depth, body_height], center=true);\n    \n    // Arms\n    translate([-body_width/2 - 8, 0, body_height - 5])\n        rotate([0, 15, -20])\n        arm();\n    \n    mirror([1, 0, 0])\n        translate([-body_width/2 - 8, 0, body_height - 5])\n        rotate([0, 15, -20])\n        arm();\n    \n    // Legs\n    translate([-body_width/3, 0, 5])\n        leg();\n    \n    translate([body_width/3, 0, 5])\n        leg();\n    \n    // Feet\n    translate([-body_width/3, body_depth/2 + 5, 0])\n        rotate([0, 0, 0])\n        foot();\n    \n    translate([body_width/3, body_depth/2 + 5, 0])\n        rotate([0, 0, 0])\n        foot();\n}\n\nmodule head() {\n    // Main head shape\n    union() {\n        scale([1, 0.9, 1.2])\n        sphere(12);\n        \n        // Muzzle\n        translate([0, 12, -2])\n        scale([0.8, 1.2, 0.7])\n        sphere(8);\n        \n        // Brow ridge\n        translate([0, 5, 8])\n        scale([1.2, 0.3, 0.5])\n        cube([15, 8, 6], center=true);\n    }\n    \n    // Eyes\n    translate([-5, 8, 5])\n    sphere(2);\n    \n    translate([5, 8, 5])\n    sphere(2);\n    \n    // Nose\n    translate([0, 14, 3])\n    scale([1, 1.5, 0.8])\n    sphere(3);\n    \n    // Mouth\n    translate([0, 16, 0])\n    rotate([90, 0, 0])\n    cylinder(h=0.5, r1=4, r2=2);\n}\n\nmodule arm() {\n    // Upper arm\n    cylinder(h=20, r1=6, r2=5);\n    \n    // Lower arm\n    translate([0, 0, -20])\n    rotate([0, 30, 0])\n    cylinder(h=18, r1=5, r2=4);\n    \n    // Hand\n    translate([0, 0, -38])\n    scale([1.2, 0.8, 0.5])\n    sphere(5);\n}\n\nmodule leg() {\n    // Thigh\n    cylinder(h=25, r1=7, r2=6);\n    \n    // Lower leg\n    translate([0, 0, -25])\n    cylinder(h=20, r1=6, r2=5);\n}\n\nmodule foot() {\n    // Main foot\n    scale([2, 3, 1])\n    cube([10, 15, 5], center=true);\n    \n    // Toes\n    for(i = [-1:1]) {\n        translate([i * 3, 8, 0])\n        scale([0.8, 0.8, 1])\n        sphere(3);\n    }\n}\n\n// Fur texture using small cylinders\nmodule fur_patch(x, y, z, scale_factor) {\n    translate([x, y, z])\n    scale([scale_factor, scale_factor, scale_factor])\n    cylinder(h=1, r=0.5);\n}\n\n// Apply fur texture to body\nmodule textured_sasquatch() {\n    sasquatch();\n    \n    // Fur on head\n    for(i = [1:20]) {\n        fur_patch(\n            sin(i * 30) * 10,\n            cos(i * 30) * 8,\n            50 + sin(i * 45) * 3,\n            1\n        );\n    }\n    \n    // Fur on shoulders\n    for(i = [1:15]) {\n        fur_patch(\n            -15 + sin(i * 25) * 5,\n            sin(i * 35) * 8,\n            35 + cos(i * 40) * 5,\n            1.2\n        );\n    }\n    \n    mirror([1, 0, 0])\n    for(i = [1:15]) {\n        fur_patch(\n            -15 + sin(i * 25) * 5,\n            sin(i * 35) * 8,\n            35 + cos(i * 40) * 5,\n            1.2\n        );\n    }\n}\n\n// Render the model\ntextured_sasquatch();",
    "renders": true
  },
  {
    "household_item": "skunkape",
    "openscad_code": "// Skunk Ape (Florida Bigfoot) - Realistic Style, Medium Complexity\n// 3D printable model with no overhangs\n\n$fn = 24; // Smooth curves for 3D printing\n\nmodule body() {\n    // Main torso - elongated oval shape\n    union() {\n        scale([1.2, 0.8, 1.5]) sphere(r=15);\n        translate([0, 0, -10]) cylinder(h=20, r1=15, r2=10);\n    }\n}\n\nmodule head() {\n    // Large head with flat face\n    translate([0, 0, 35]) {\n        union() {\n            // Main head sphere\n            scale([1.3, 1.1, 1.2]) sphere(r=12);\n            \n            // Flat face\n            translate([0, -12, 0]) cube([20, 2, 15], center=true);\n            \n            // Brow ridge\n            translate([0, -10, 5]) cube([22, 4, 4], center=true);\n        }\n    }\n}\n\nmodule eyes() {\n    // Deep-set eyes\n    for(x=[-6, 6]) {\n        translate([x, -12, 5]) {\n            difference() {\n                sphere(r=3);\n                translate([0, -2, 0]) sphere(r=2.5);\n            }\n        }\n    }\n}\n\nmodule nose() {\n    // Wide, flat nose\n    translate([0, -15, 2]) {\n        cube([8, 2, 4], center=true);\n    }\n}\n\nmodule mouth() {\n    // Wide mouth\n    translate([0, -15, -2]) {\n        cube([12, 1, 2], center=true);\n    }\n}\n\nmodule arms() {\n    // Long dangling arms\n    for(side=[-1, 1]) {\n        translate([side*15, 0, 15]) {\n            rotate([0, 0, side*20]) {\n                // Upper arm\n                rotate([90, 0, 0]) cylinder(h=20, r=4);\n                // Lower arm\n                translate([0, 0, -20]) {\n                    rotate([20, 0, 0]) cylinder(h=15, r=3.5);\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Thick legs\n    for(side=[-1, 1]) {\n        translate([side*8, 0, -25]) {\n            // Upper leg\n            cylinder(h=20, r=6);\n            // Lower leg\n            translate([0, 0, -20]) {\n                cylinder(h=15, r=5);\n                // Foot\n                translate([0, 3, -15]) {\n                    rotate([90, 0, 0]) \n                    scale([1.5, 1, 0.5]) sphere(r=6);\n                }\n            }\n        }\n    }\n}\n\nmodule fur_texture() {\n    // Simple fur texture using small cylinders\n    for(i=[0:15]) {\n        for(j=[0:5]) {\n            translate([sin(i*24)*15, cos(i*24)*15, j*6-15]) {\n                rotate([90, 0, i*24]) \n                cylinder(h=0.5, r=0.5);\n            }\n        }\n    }\n}\n\nmodule skunk_stripes() {\n    // White/grey stripes on back\n    for(z=[0:5:30]) {\n        translate([0, 5, z]) {\n            color(\"white\") \n            cube([8, 2, 4], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    eyes();\n    nose();\n    mouth();\n    arms();\n    legs();\n    skunk_stripes();\n}\n\n// Base platform for stable printing\ntranslate([0, 0, -40]) {\n    cube([40, 30, 3], center=true);\n}",
    "renders": true
  },
  {
    "household_item": "dropbear",
    "openscad_code": "// Dropbear - Realistic style, medium complexity\n// Designed for 3D printing with 2mm wall thickness and minimal overhangs\n\n$fn = 32;\n\nmodule head() {\n    // Main skull shape\n    difference() {\n        sphere(d = 35);\n        \n        // Eye sockets\n        translate([-10, 12, 5]) rotate([0, 45, 0]) cylinder(h = 15, d1 = 8, d2 = 5);\n        translate([10, 12, 5]) rotate([0, -45, 0]) cylinder(h = 15, d1 = 8, d2 = 5);\n        \n        // Nostrils\n        for(x = [-3, 3])\n            translate([x, 16, 2]) cylinder(h = 5, d = 2);\n    }\n    \n    // Snout\n    translate([0, 10, -8]) {\n        difference() {\n            sphere(d = 20);\n            translate([0, 0, -12]) cube([40, 20, 20], center = true);\n        }\n    }\n    \n    // Ears (rounded)\n    for(x = [-12, 12])\n        translate([x, -12, 12]) rotate([0, 45, 0])\n            cylinder(h = 8, d1 = 12, d2 = 5);\n}\n\nmodule body() {\n    // Main torso\n    translate([0, 0, -25])\n        scale([1, 1.2, 0.8])\n            sphere(d = 40);\n    \n    // Chest\n    translate([0, 10, -30])\n        scale([1.2, 1, 0.6])\n            sphere(d = 30);\n}\n\nmodule limbs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, -20]) {\n            // Upper arm\n            rotate([0, 0, side * -30])\n                cylinder(h = 15, d = 8);\n            \n            // Lower arm\n            translate([side * 10, -10, -12])\n                rotate([0, 0, side * 45])\n                    cylinder(h = 12, d = 6);\n            \n            // Paw\n            translate([side * 15, -20, -20])\n                sphere(d = 8);\n        }\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        translate([side * 10, -15, -35]) {\n            // Thigh\n            rotate([0, 0, side * 30])\n                cylinder(h = 18, d = 10);\n            \n            // Lower leg\n            translate([side * 5, -15, -20])\n                rotate([0, 0, side * -20])\n                    cylinder(h = 15, d = 8);\n            \n            // Paw\n            translate([side * 10, -25, -35])\n                sphere(d = 10);\n        }\n    }\n}\n\nmodule claws() {\n    // Front claws (3 per paw)\n    for(side = [-1, 1]) {\n        for(i = [-1, 0, 1]) {\n            translate([side * (15 + i * 3), -23, -20]) {\n                rotate([0, 90, 0])\n                    cylinder(h = 5, d1 = 2, d2 = 1);\n            }\n        }\n    }\n    \n    // Rear claws (4 per paw)\n    for(side = [-1, 1]) {\n        for(i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([side * (10 + i * 3), -30, -35]) {\n                rotate([0, 90, 0])\n                    cylinder(h = 6, d1 = 3, d2 = 1.5);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Thick base\n    translate([0, -20, -25])\n        rotate([0, 0, -30])\n            cylinder(h = 20, d1 = 10, d2 = 6);\n    \n    // Tapered end\n    translate([10, -35, -30])\n        rotate([0, 0, -45])\n            cylinder(h = 15, d1 = 6, d2 = 3);\n}\n\n// Assemble the dropbear\nunion() {\n    head();\n    body();\n    limbs();\n    claws();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "mngwa",
    "openscad_code": "// Mngwa (legendary spotted cat) model for 3D printing\n// Medium complexity, realistic style\n\n// Overall scale\nscale = 0.5;  // Adjust to fit 50-100mm print size\n\n// Basic body module\nmodule body() {\n    // Main torso\n    translate([0, 0, 15])\n    scale([1.8, 0.8, 1])\n    sphere(20 * scale);\n    \n    // Chest\n    translate([0, 0, 15])\n    scale([1.2, 0.7, 0.8])\n    sphere(20 * scale);\n}\n\n// Head module\nmodule head() {\n    // Main head shape\n    translate([-30 * scale, 0, 30 * scale])\n    scale([1.2, 0.9, 0.8])\n    sphere(15 * scale);\n    \n    // Snout\n    translate([-45 * scale, 0, 25 * scale])\n    scale([1, 0.6, 0.5])\n    sphere(10 * scale);\n    \n    // Ears (triangular)\n    translate([-30 * scale, 12 * scale, 45 * scale])\n    rotate([0, -30, -30])\n    cylinder(h = 12 * scale, r1 = 5 * scale, r2 = 0);\n    \n    translate([-30 * scale, -12 * scale, 45 * scale])\n    rotate([0, 30, 30])\n    cylinder(h = 12 * scale, r1 = 5 * scale, r2 = 0);\n    \n    // Eyes\n    translate([-40 * scale, 8 * scale, 30 * scale])\n    sphere(2 * scale);\n    \n    translate([-40 * scale, -8 * scale, 30 * scale])\n    sphere(2 * scale);\n    \n    // Nose\n    translate([-50 * scale, 0, 25 * scale])\n    scale([1.5, 0.8, 0.5])\n    sphere(2 * scale);\n}\n\n// Leg module\nmodule leg(x, y, angle) {\n    translate([x, y, 0])\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        translate([0, 0, 10 * scale])\n        rotate([90, 0, 0])\n        cylinder(h = 20 * scale, r = 5 * scale);\n        \n        // Lower leg\n        translate([0, -15 * scale, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 15 * scale, r = 4 * scale);\n        \n        // Paw\n        translate([0, -25 * scale, -5 * scale])\n        sphere(6 * scale);\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Flexible tail using multiple segments\n    for(i = [0:5]) {\n        translate([20 * scale + i * 8 * scale, 0, 15 * scale - i * 2 * scale])\n        rotate([0, 0, -i * 10])\n        scale([0.8, 0.8, 0.8])\n        sphere(8 * scale - i * 0.5 * scale);\n    }\n}\n\n// Spots pattern for mngwa\nmodule spots() {\n    // Body spots\n    for(i = [1:20]) {\n        rotate([0, 0, i * 36])\n        translate([15 * scale * cos(i * 36), 10 * scale * sin(i * 36), 25 * scale])\n        scale([1, 0.7, 0.3])\n        sphere(2 * scale);\n    }\n    \n    // Head spots\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n        translate([-35 * scale + 5 * scale * cos(i * 45), 5 * scale * sin(i * 45), 32 * scale])\n        scale([0.8, 0.6, 0.3])\n        sphere(1.5 * scale);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body and head\n    body();\n    head();\n    \n    // Four legs\n    leg(15 * scale, 12 * scale, 20);\n    leg(15 * scale, -12 * scale, -20);\n    leg(-15 * scale, 12 * scale, -20);\n    leg(-15 * scale, -12 * scale, 20);\n    \n    // Tail\n    tail();\n    \n    // Spots pattern\n    color(\"black\")\n    spots();\n}",
    "renders": true
  },
  {
    "household_item": "nkondi",
    "openscad_code": "// Nkondi figure - realistic style, medium complexity\n// Approx 80mm tall, 3D printable without supports\n\n$fn = 32;\n\nmodule nail_hole() {\n    cylinder(h=3, r=1.5, center=true);\n}\n\nmodule nail_holes(count, spacing, angle) {\n    for(i=[0:count-1]) {\n        rotate([0, angle, i * 360/count]) \n            translate([spacing, 0, 0]) \n                nail_hole();\n    }\n}\n\nmodule torso() {\n    difference() {\n        // Main body\n        union() {\n            // Chest\n            scale([1, 0.8, 1.2]) \n                sphere(r=15);\n            \n            // Abdomen\n            translate([0, 0, -20]) \n                scale([0.9, 0.7, 1]) \n                    sphere(r=12);\n                    \n            // Pelvis\n            translate([0, 0, -35]) \n                scale([1.2, 1, 0.6]) \n                    sphere(r=10);\n        }\n        \n        // Carved cavity for magical substances\n        translate([0, 0, -15]) \n            scale([0.6, 0.5, 0.8]) \n                sphere(r=10);\n                \n        // Nail holes in torso\n        nail_holes(8, 18, 0);\n        nail_holes(6, 16, 45);\n    }\n}\n\nmodule head() {\n    difference() {\n        union() {\n            // Skull\n            scale([0.8, 0.8, 1]) \n                sphere(r=12);\n                \n            // Jaw\n            translate([0, -5, -8]) \n                scale([0.6, 0.5, 0.7]) \n                    sphere(r=8);\n                    \n            // Nose\n            translate([0, 10, 0]) \n                scale([0.3, 0.2, 0.5]) \n                    sphere(r=5);\n                    \n            // Ears\n            translate([9, 0, 0]) \n                scale([0.3, 0.7, 0.7]) \n                    sphere(r=4);\n            mirror([1, 0, 0]) \n                translate([9, 0, 0]) \n                    scale([0.3, 0.7, 0.7]) \n                        sphere(r=4);\n        }\n        \n        // Eyes\n        translate([4, 7, 2]) \n            sphere(r=2);\n        mirror([1, 0, 0]) \n            translate([4, 7, 2]) \n                sphere(r=2);\n                \n        // Mouth\n        translate([0, 8, -6]) \n            scale([0.8, 0.2, 0.3]) \n                sphere(r=4);\n                \n        // Nail holes in head\n        nail_holes(6, 10, 0);\n    }\n}\n\nmodule arm(side) {\n    mirror([side, 0, 0]) {\n        translate([12, 0, -5]) {\n            rotate([0, 0, -20]) {\n                difference() {\n                    union() {\n                        // Upper arm\n                        translate([0, 0, 5]) \n                            scale([0.7, 0.7, 1.5]) \n                                cylinder(r=4, h=15);\n                                \n                        // Lower arm\n                        translate([0, 0, -7]) \n                            scale([0.6, 0.6, 1]) \n                                cylinder(r=3, h=12);\n                                \n                        // Hand\n                        translate([0, 0, -15]) \n                            scale([0.8, 0.6, 0.4]) \n                                sphere(r=4);\n                    }\n                    \n                    // Nail holes\n                    nail_holes(4, 5, 0);\n                }\n            }\n        }\n    }\n}\n\nmodule leg(side) {\n    mirror([side, 0, 0]) {\n        translate([5, 0, -45]) {\n            difference() {\n                union() {\n                    // Thigh\n                    translate([0, 0, 5]) \n                        scale([0.8, 0.8, 1.2]) \n                            cylinder(r=5, h=20);\n                            \n                    // Shin\n                    translate([0, 0, -8]) \n                        scale([0.7, 0.7, 1]) \n                            cylinder(r=4, h=18);\n                            \n                    // Foot\n                    translate([0, 2, -18]) \n                        scale([1.2, 2, 0.8]) \n                            sphere(r=5);\n                }\n                \n                // Nail holes\n                nail_holes(3, 6, 0);\n            }\n        }\n    }\n}\n\n// Assemble the nkondi\nunion() {\n    // Torso\n    torso();\n    \n    // Head on top\n    translate([0, 0, 25]) \n        head();\n        \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "household_item": "aziza",
    "openscad_code": "// Aziza (West-African small djembe-style hand drum) – 3D-printable, realistic / medium complexity\n// Overall height ≈ 75 mm, max diameter ≈ 55 mm\n\n$fn = 32;               // Smooth curves on spheres & cylinders\nwall = 1.2;             // Wall thickness for FDM printing\n\n// ---------- Main body ----------\nmodule body() {\n    // Wooden shell: two stacked cones (frustums) give typical goblet shape\n    // Lower bowl\n    difference() {\n        cylinder(h1 = 40, r1 = 27, r2 = 22, center = false);\n        translate([0,0,-0.1])\n            cylinder(h1 = 40.2, r1 = 27-wall, r2 = 22-wall, center = false);\n    }\n\n    // Upper bowl\n    translate([0,0,40])\n    difference() {\n        cylinder(h1 = 30, r1 = 22, r2 = 18, center = false);\n        translate([0,0,-0.1])\n            cylinder(h1 = 30.2, r1 = 22-wall, r2 = 18-wall, center = false);\n    }\n}\n\n// ---------- Drum head (goatskin) ----------\nmodule head() {\n    // Solid skin disc\n    translate([0,0,70])\n        cylinder(h = 1.5, r = 27.5, center = false);\n}\n\n// ---------- Rope tuning ring ----------\nmodule ring() {\n    // Thick ring printed as single loop – no overhangs\n    difference() {\n        cylinder(h = 4, r1 = 28, r2 = 28, center = false);\n        translate([0,0,-0.1])\n            cylinder(h = 4.2, r1 = 25, r2 = 25, center = false);\n    }\n}\n\n// ---------- Vertical tuning ropes ----------\nmodule ropes() {\n    // 8 vertical ropes evenly spaced around shell\n    for (i = [0:7]) {\n        rotate([0,0,i*45])\n            translate([26.5,0,35])\n                cylinder(h = 38, r = 1, center = false);\n    }\n}\n\n// ---------- Decorative carved rings ----------\nmodule carves() {\n    // Two shallow grooves near center waist\n    for (z = [35, 38]) {\n        translate([0,0,z])\n        difference() {\n            cylinder(h = 1, r = 23, center = false);\n            cylinder(h = 1.2, r = 21, center = false);\n        }\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    body();\n    color(\"burlywood\") head();\n    translate([0,0,66]) color(\"tan\") ring();\n    color(\"saddlebrown\") ropes();\n    color(\"sienna\") carves();\n}",
    "renders": true
  },
  {
    "household_item": "abada",
    "openscad_code": "// Abada (unicorn deer) - Realistic style, medium complexity\n// Overall dimensions ~70mm long, 65mm tall\n\n// Body dimensions\nbody_length = 40;\nbody_height = 25;\nbody_width = 20;\n\n// Head dimensions\nhead_length = 20;\nhead_height = 18;\nhead_width = 12;\n\n// Leg dimensions\nleg_height = 30;\nleg_width = 5;\n\n// Horn dimensions\nhorn_base = 3;\nhorn_height = 25;\n\n// Tail dimensions\ntail_length = 15;\ntail_diameter = 3;\n\n// Ear dimensions\near_length = 8;\near_width = 5;\near_height = 3;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule body() {\n    // Main torso with slight taper\n    translate([0, 0, leg_height + body_height/2])\n    scale([1, 0.8, 0.9])\n    sphere(d=body_width, $fn=32);\n    \n    // Chest bulge\n    translate([-body_length/4, 0, leg_height + body_height/2])\n    sphere(d=body_width*1.2, $fn=32);\n    \n    // Hindquarters\n    translate([body_length/4, 0, leg_height + body_height/2.5])\n    sphere(d=body_width*1.1, $fn=32);\n}\n\nmodule head() {\n    // Main head shape\n    translate([-body_length/2 - head_length/2, 0, leg_height + body_height + head_height/2 - 5])\n    rotate([0, 15, 0])\n    scale([1.2, 1, 1])\n    sphere(d=head_width, $fn=32);\n    \n    // Snout extension\n    translate([-body_length/2 - head_length, 0, leg_height + body_height - 5])\n    rotate([0, 15, 0])\n    scale([1.5, 0.8, 0.7])\n    sphere(d=head_width*0.8, $fn=32);\n}\n\nmodule horn() {\n    // Base spiral\n    translate([-body_length/2 - head_length - 5, 0, leg_height + body_height + 5])\n    rotate([0, -15, 0])\n    cylinder(h=horn_height/3, d1=horn_base*2, d2=horn_base, $fn=16);\n    \n    // Spiral segments\n    for(i=[0:3]) {\n        rotate([0, 0, i*120])\n        translate([-body_length/2 - head_length - 5 + i*2, 0, leg_height + body_height + 5 + i*horn_height/4])\n        rotate([0, -15, i*30])\n        cylinder(h=horn_height/4, d1=horn_base*max(0.8, 1-i*0.15), d2=horn_base*max(0.6, 1-i*0.2), $fn=8);\n    }\n    \n    // Tip\n    translate([-body_length/2 - head_length - 5 + 8, 0, leg_height + body_height + 5 + horn_height - 5])\n    rotate([0, -15, 120])\n    cylinder(h=5, d1=horn_base*0.3, d2=0, $fn=8);\n}\n\nmodule legs() {\n    // Front legs\n    for(side=[-1, 1]) {\n        // Upper leg\n        translate([-body_length/3, side*body_width/2, leg_height/2 + 10])\n        rotate([15*side, 0, 0])\n        cylinder(h=leg_height/2, d=leg_width, $fn=16);\n        \n        // Lower leg\n        translate([-body_length/3, side*body_width/2 + 2, 5])\n        rotate([-5*side, 0, 0])\n        cylinder(h=leg_height/2, d=leg_width*0.8, $fn=16);\n        \n        // Hoof\n        translate([-body_length/3, side*body_width/2 + 3, 0])\n        rotate([0, 0, 0])\n        cylinder(h=3, d1=leg_width*0.8, d2=leg_width*0.6, $fn=8);\n    }\n    \n    // Rear legs\n    for(side=[-1, 1]) {\n        // Upper leg\n        translate([body_length/3, side*body_width/2, leg_height/2 + 8])\n        rotate([-10*side, 0, 0])\n        cylinder(h=leg_height/1.8, d=leg_width, $fn=16);\n        \n        // Lower leg\n        translate([body_length/3, side*body_width/2 + 2, 5])\n        rotate([5*side, 0, 0])\n        cylinder(h=leg_height/2, d=leg_width*0.8, $fn=16);\n        \n        // Hoof\n        translate([body_length/3, side*body_width/2 + 3, 0])\n        cylinder(h=3, d1=leg_width*0.8, d2=leg_width*0.6, $fn=8);\n    }\n}\n\nmodule tail() {\n    // Tail base\n    translate([body_length/2 + tail_length/2, 0, leg_height + body_height/2])\n    rotate([0, 30, 0])\n    cylinder(h=tail_length, d=tail_diameter, $fn=16);\n    \n    // Tail tuft\n    translate([body_length/2 + tail_length, 0, leg_height + body_height/2 - 2])\n    sphere(d=tail_diameter*2, $fn=16);\n}\n\nmodule ears() {\n    for(side=[-1, 1]) {\n        // Ear base\n        translate([-body_length/2 - head_length/2, side*head_width/2, leg_height + body_height + head_height/2])\n        rotate([0, 0, side*15])\n        rotate([0, 45, 0])\n        scale([1, 0.5, 1])\n        cylinder(h=ear_length, d=ear_width, $fn=8);\n        \n        // Inner ear\n        translate([-body_length/2 - head_length/2 - 1, side*head_width/2 + side*1, leg_height + body_height + head_height/2 + 2])\n        rotate([0, 0, side*15])\n        rotate([0, 45, 0])\n        scale([0.7, 0.3, 0.7])\n        cylinder(h=ear_length*0.8, d=ear_width, $fn=8);\n    }\n}\n\nmodule eyes() {\n    for(side=[-1, 1]) {\n        // Eye socket\n        translate([-body_length/2 - head_length - 2, side*head_width/3, leg_height + body_height + head_height/2 + 2])\n        sphere(d=3, $fn=16);\n        \n        // Eye ball\n        translate([-body_length/2 - head_length - 3, side*head_width/3, leg_height + body_height + head_height/2 + 2])\n        sphere(d=2, $fn=16);\n    }\n}\n\nmodule nostrils() {\n    for(side=[-1, 1]) {\n        translate([-body_length/2 - head_length - 8, side*head_width/4, leg_height + body_height - 3])\n        cylinder(h=2, d=1.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    horn();\n    legs();\n    tail();\n    ears();\n    eyes();\n    nostrils();\n}",
    "renders": true
  },
  {
    "household_item": "mokelembembe",
    "openscad_code": "// Mokele-Mbembe (medium complexity, realistic style)\n// 3D printable model - approximately 80mm long\n\n$fn = 36;  // Smooth curves\n\n// Overall scale\nscale_factor = 0.4;\n\n// Body dimensions\nbody_length = 60 * scale_factor;\nbody_width = 25 * scale_factor;\nbody_height = 15 * scale_factor;\n\n// Neck dimensions\nneck_length = 30 * scale_factor;\nneck_diameter = 8 * scale_factor;\n\n// Head dimensions\nhead_length = 20 * scale_factor;\nhead_height = 12 * scale_factor;\n\n// Leg dimensions\nleg_height = 20 * scale_factor;\nleg_diameter = 6 * scale_factor;\n\n// Tail dimensions\ntail_length = 35 * scale_factor;\ntail_diameter = 10 * scale_factor;\n\n// Main body assembly\nmodule mokelembembe() {\n    // Central body\n    union() {\n        // Main torso\n        translate([0, 0, leg_height/2])\n            scale([1, 0.8, 0.6])\n            sphere(d = body_width);\n        \n        // Elongated body\n        translate([0, 0, leg_height/2])\n            scale([body_length/body_width, 1, 0.8])\n            sphere(d = body_width);\n        \n        // Neck\n        translate([body_length/2 - 5, 0, leg_height + body_height/2])\n            rotate([0, -20, 0])\n            cylinder(h = neck_length, d1 = neck_diameter*1.2, d2 = neck_diameter);\n        \n        // Head\n        translate([body_length/2 + neck_length - 5, 0, leg_height + body_height/2 + neck_length*sin(20) - 2])\n            rotate([0, -20, 0])\n            scale([1.5, 1, 0.8])\n            sphere(d = head_length);\n        \n        // Snout\n        translate([body_length/2 + neck_length + head_length/2, 0, leg_height + body_height/2 + neck_length*sin(20) - 2])\n            rotate([0, -20, 0])\n            scale([1.2, 0.8, 0.6])\n            cylinder(h = head_length/2, d = head_height);\n        \n        // Tail\n        translate([-body_length/2, 0, leg_height/2])\n            rotate([0, 10, 0])\n            cylinder(h = tail_length, d1 = tail_diameter, d2 = tail_diameter/2);\n    }\n    \n    // Legs - using loops for symmetry\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([body_length/3, side * body_width/2, 0])\n            leg();\n        \n        // Rear legs\n        translate([-body_length/3, side * body_width/2, 0])\n            leg();\n    }\n    \n    // Back plates (sail-like structures)\n    for(i = [1:4]) {\n        translate([-body_length/2 + i * body_length/5, 0, leg_height + body_height/2])\n            rotate([0, 0, 0])\n            scale([0.3, 0.1, 1])\n            cylinder(h = 8 * scale_factor, d = 5 * scale_factor);\n    }\n}\n\n// Leg module with feet\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h = leg_height * 0.7, d = leg_diameter);\n        \n        // Lower leg\n        translate([0, 0, leg_height * 0.7])\n            rotate([15, 0, 0])\n            cylinder(h = leg_height * 0.4, d = leg_diameter * 0.8);\n        \n        // Foot\n        translate([leg_diameter/2, 0, leg_height])\n            rotate([0, 0, 90])\n            scale([1.5, 1, 0.5])\n            sphere(d = leg_diameter);\n    }\n}\n\n// Generate the model\nmokelembembe();",
    "renders": true
  },
  {
    "household_item": "tokoloshe",
    "openscad_code": "// Tokoloshe - Medium complexity realistic style\n// Overall height ≈ 65 mm, max width ≈ 30 mm\n\nmodule tokoloshe() {\n    // Base proportions\n    head_h = 18;\n    body_h = 25;\n    leg_h = 12;\n    foot_h = 6;\n    arm_l = 15;\n    arm_r = 4;\n\n    // Head\n    translate([0, 0, body_h + leg_h + foot_h + head_h/2])\n    difference() {\n        // Skull\n        sphere(d = head_h, $fn = 32);\n\n        // Eye sockets\n        for(y = [head_h*0.3, -head_h*0.3])\n            translate([head_h*0.3, y, head_h*0.1])\n            rotate([0, 90, 0])\n            cylinder(h = head_h*0.4, d1 = head_h*0.2, d2 = head_h*0.1, $fn = 16);\n\n        // Nostrils\n        for(x = [-head_h*0.1, head_h*0.1])\n            translate([x, 0, -head_h*0.3])\n            cylinder(h = head_h*0.2, d1 = head_h*0.08, d2 = head_h*0.04, $fn = 8);\n    }\n\n    // Ears\n    for(side = [-1, 1])\n        translate([side * head_h*0.45, 0, body_h + leg_h + foot_h + head_h*0.7])\n        rotate([0, 30 * side, 0])\n        scale([1, 0.7, 1.2])\n        sphere(d = head_h*0.3, $fn = 16);\n\n    // Neck\n    translate([0, 0, body_h + leg_h + foot_h + head_h*0.8])\n    cylinder(h = head_h*0.2, d1 = head_h*0.4, d2 = head_h*0.5, $fn = 16);\n\n    // Body\n    translate([0, 0, leg_h + foot_h + body_h/2])\n    scale([0.8, 0.6, 1])\n    sphere(d = body_h, $fn = 32);\n\n    // Arms\n    arm_angle = 30;\n    for(side = [-1, 1]) {\n        translate([side * body_h*0.35, 0, leg_h + foot_h + body_h*0.7])\n        rotate([0, 0, side * arm_angle])\n        union() {\n            // Upper arm\n            cylinder(h = arm_l*0.5, d = arm_r*1.5, $fn = 12);\n\n            // Lower arm\n            translate([arm_l*0.5, 0, 0])\n            rotate([0, 0, -side * 30])\n            cylinder(h = arm_l*0.5, d = arm_r, $fn = 12);\n\n            // Hand\n            translate([arm_l, 0, 0])\n            sphere(d = arm_r*1.8, $fn = 12);\n        }\n    }\n\n    // Legs\n    leg_r = body_h * 0.25;\n    for(side = [-1, 1]) {\n        translate([side * body_h*0.3, 0, foot_h + leg_h/2])\n        cylinder(h = leg_h, d = leg_r*2, $fn = 16);\n\n        // Feet\n        translate([side * body_h*0.3, body_h*0.2, foot_h/2])\n        scale([1.2, 1.8, 1])\n        sphere(d = foot_h, $fn = 16);\n    }\n\n    // Genitalia (traditional depiction)\n    translate([0, body_h*0.4, foot_h + leg_h + body_h*0.2])\n    cylinder(h = body_h*0.15, d = body_h*0.12, $fn = 12);\n}\n\n// Generate the model\ntokoloshe();",
    "renders": true
  },
  {
    "household_item": "tikoloshe",
    "openscad_code": "// Tikoloshe - South African mythological creature\n// Medium complexity, realistic style, 3D printable\n\n// Overall dimensions\nbody_height = 60;\nhead_size = 12;\nbase_scale = 0.8;\n\n// Create the tikoloshe figure\nmodule tikoloshe() {\n    union() {\n        // Main body - squat humanoid form\n        translate([0, 0, 10]) {\n            difference() {\n                // Main torso\n                scale([1.2, 0.8, 1]) \n                    cylinder(h=body_height * 0.4, r1=10, r2=8, $fn=20);\n                \n                // Hollow center for 3D printing\n                translate([0, 0, -1])\n                    scale([0.8, 0.6, 1.1])\n                    cylinder(h=body_height * 0.42, r1=7, r2=5, $fn=16);\n            }\n        }\n        \n        // Head with enlarged skull\n        translate([0, 0, body_height * 0.5]) {\n            difference() {\n                sphere(d=head_size * 1.3, $fn=32);\n                // Eye sockets\n                for(x = [-3, 3]) {\n                    translate([x, 2, 2])\n                        rotate([0, 10, 0])\n                        sphere(d=3, $fn=12);\n                }\n                // Mouth cavity\n                translate([0, 4, -3])\n                    rotate([25, 0, 0])\n                    cube([5, 3, 4], center=true);\n            }\n        }\n        \n        // Large pointed ears\n        for(x = [-1, 1]) {\n            translate([x * head_size * 0.45, 0, body_height * 0.5 + 3]) {\n                rotate([0, x * -20, 0])\n                    scale([0.3, 0.1, 1])\n                        cone(height=8, r1=4, r2=0.5);\n            }\n        }\n        \n        // Short muscular arms\n        for(side = [-1, 1]) {\n            translate([side * 9, 0, body_height * 0.35]) {\n                rotate([0, 0, side * 45])\n                    cylinder(h=15, r1=3, r2=2, $fn=12);\n                \n                // Hands\n                translate([side * 12, 0, body_height * 0.35 - 2])\n                    sphere(d=5, $fn=12);\n            }\n        }\n        \n        // Short legs with large feet\n        for(side = [-1, 1]) {\n            translate([side * 5, 0, 5]) {\n                // Thigh\n                rotate([0, 0, side * -10])\n                    cylinder(h=12, r1=4, r2=3, $fn=12);\n                \n                // Lower leg\n                translate([side * 1, 0, -6])\n                    rotate([0, side * 5, 0])\n                    cylinder(h=10, r1=3, r2=2.5, $fn=12);\n                \n                // Large feet for water spirits\n                translate([side * 2, 0, -12])\n                    scale([1.5, 1, 0.3])\n                        sphere(d=8, $fn=16);\n            }\n        }\n        \n        // Prominent buttocks (distinctive feature)\n        translate([0, -5, body_height * 0.25])\n            scale([1.3, 1, 0.8])\n                sphere(d=15, $fn=20);\n        \n        // Genitalia (realistic but modest)\n        translate([0, 3, 12])\n            scale([0.8, 1, 1.2])\n                sphere(d=4, $fn=12);\n        \n        // Long fingers for both hands\n        for(side = [-1, 1]) {\n            for(f = [0:2]) {\n                translate([side * (12 + f * 1.5), 0, body_height * 0.35 - 2]) {\n                    rotate([0, 0, (f - 1) * 30])\n                        scale([0.3, 0.3, 1.5])\n                            cylinder(h=3, r=1, $fn=8);\n                }\n            }\n        }\n        \n        // Toes on feet\n        for(side = [-1, 1]) {\n            for(t = [0:3]) {\n                translate([side * (2 + t * 1.5), -1, -12])\n                    rotate([0, 10, 0])\n                    scale([0.4, 0.3, 1])\n                        cylinder(h=2, r=0.8, $fn=8);\n            }\n        }\n        \n        // Small tail\n        translate([0, -8, 15])\n            rotate([0, -20, 0])\n            cylinder(h=8, r1=2, r2=1, $fn=8);\n    }\n}\n\n// Helper module for cone\nmodule cone(height, r1, r2) {\n    cylinder(h=height, r1=r1, r2=r2, $fn=16);\n}\n\n// Create the figure centered on the build plate\ntranslate([0, 0, 0])\n    tikoloshe();",
    "renders": true
  },
  {
    "household_item": "wewe",
    "openscad_code": "// OpenSCAD code for a realistic-style wewe (French horn-like instrument)\n// Medium complexity, 3D printable\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule bell() {\n    // Main bell flare - realistic exponential flare\n    difference() {\n        // Outer bell shape\n        union() {\n            for (i = [0:10]) {\n                h = i * 4;\n                r = 8 + pow(i, 1.8) * 0.8;\n                translate([0, 0, h]) cylinder(h=1, r1=r, r2=r+0.8, $fn=24);\n            }\n        }\n        \n        // Inner cavity\n        union() {\n            for (i = [0:10]) {\n                h = i * 4;\n                r = 6 + pow(i, 1.8) * 0.7;\n                translate([0, 0, h]) cylinder(h=1.2, r1=r, r2=r+0.7, $fn=24);\n            }\n        }\n    }\n    \n    // Bell rim reinforcement\n    translate([0, 0, 40]) difference() {\n        cylinder(h=3, r1=18, r2=17.5, $fn=32);\n        cylinder(h=4, r1=16.5, r2=16, $fn=32);\n    }\n}\n\nmodule main_tubing() {\n    // First straight section\n    translate([0, 0, 10]) rotate([90, 0, 0]) \n        cylinder(h=25, r=5, $fn=16);\n    \n    // First 180° bend (top)\n    for (i = [0:15]) {\n        angle = i * 12;\n        x = 25 + 18 * sin(angle);\n        z = 18 + 18 * (1 - cos(angle));\n        translate([x, 0, z]) rotate([0, 90-angle, 0])\n            cylinder(h=2.5, r=5, $fn=12);\n    }\n    \n    // Descending section\n    translate([43, 0, 18]) rotate([90, 0, 0])\n        cylinder(h=35, r=5, $fn=16);\n    \n    // Bottom coil\n    for (i = [0:20]) {\n        angle = i * 18;\n        x = 43 + 20 * sin(angle);\n        z = -17 - 20 * (1 - cos(angle));\n        translate([x, 0, z]) rotate([0, 90-angle, 0])\n            cylinder(h=2.5, r=5, $fn=12);\n    }\n    \n    // Ascending section to valves\n    translate([23, 0, -37]) rotate([90, 0, 0])\n        cylinder(h=50, r=5, $fn=16);\n}\n\nmodule valve_section() {\n    // Valve cluster - 3 rotary valves\n    translate([0, 0, 15]) {\n        // Valve casings (3 cylinders)\n        for (v = [0:2]) {\n            translate([v*12 - 12, 0, 0]) {\n                difference() {\n                    cylinder(h=18, r=8, $fn=24);\n                    cylinder(h=20, r=6, $fn=24);\n                }\n            }\n        }\n        \n        // Valve levers\n        for (v = [0:2]) {\n            translate([v*12 - 12, 12, 18]) {\n                rotate([30, 0, 0])\n                    cube([2, 8, 3], center=true);\n            }\n        }\n    }\n}\n\nmodule mouthpipe() {\n    // Leadpipe from mouthpiece to valves\n    translate([0, 0, 24]) rotate([0, 90, 0]) {\n        // Mouthpiece receiver\n        difference() {\n            cylinder(h=15, r1=6, r2=5, $fn=16);\n            cylinder(h=16, r1=4.5, r2=3.5, $fn=16);\n        }\n        \n        // Leadpipe tubing\n        translate([0, 0, 15]) cylinder(h=35, r=5, $fn=16);\n    }\n    \n    // Connect to valve section\n    translate([0, 35, 24]) rotate([0, 0, 90]) {\n        for (i = [0:10]) {\n            angle = 90 - i * 9;\n            x = -35 + 35 * (1 - cos(angle));\n            z = -35 * sin(angle);\n            translate([x, 0, z]) rotate([0, 90-angle, 0])\n                cylinder(h=3.5, r=5, $fn=12);\n        }\n    }\n}\n\nmodule bracing() {\n    // Main tuning slide brace\n    translate([43, 0, -15]) rotate([0, 90, 0])\n        cylinder(h=25, r=2, $fn=12);\n    \n    // Bell to valve brace\n    translate([20, -8, 30]) rotate([45, 0, 45])\n        cylinder(h=20, r=2, $fn=12);\n    \n    // Valve to leadpipe brace\n    translate([-5, 15, 20]) rotate([0, 45, 0])\n        cylinder(h=15, r=2, $fn=12);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // All components\n        bell();\n        main_tubing();\n        valve_section();\n        mouthpipe();\n        bracing();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "adze",
    "openscad_code": "// Adze - medium complexity, realistic style\n// Overall length ~85 mm, printable in one piece\n\n$fn = 48;          // Smooth curves\nhandle_len = 70;\nhandle_d = 12;\nhead_len = 45;\nhead_h = 15;\nblade_w = 22;\nblade_thick = 3;\nhaft_angle = 75;   // degrees from horizontal\n\n// Main handle (straight shaft)\nmodule handle() {\n    difference() {\n        // Main shaft\n        cylinder(h = handle_len, d = handle_d, center = false);\n        \n        // Grip grooves (simple rings for texture)\n        for (i = [1:4])\n            translate([0, 0, 10*i + 5])\n                cylinder(h = 1.5, d = handle_d + 2, center = true);\n    }\n}\n\n// Metal head including blade\nmodule adze_head() {\n    difference() {\n        // Main head block\n        translate([0, 0, 0])\n            cube([head_len, head_h, head_h], center = true);\n        \n        // Taper front to back\n        translate([head_len/2 - 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = head_len, d1 = head_h, d2 = head_h - 4, center = true);\n        \n        // Socket hole for handle\n        rotate([0, 90, 0])\n            cylinder(h = head_h + 2, d = handle_d + 1, center = true);\n        \n        // Blade curvature (carving out underside)\n        translate([head_len/2 - blade_w/2, 0, -head_h/2 + blade_thick])\n            rotate([0, 0, 0])\n                cylinder(h = blade_w, d = blade_w*2, center = true);\n    }\n    \n    // Blade edge\n    translate([head_len/2 - blade_thick/2, 0, -head_h/2])\n        rotate([0, 90, 0])\n            cylinder(h = blade_w, d = blade_thick*2, center = true);\n    \n    // Reinforcing ring around socket\n    translate([-head_len/2 + 2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = head_h + 4, d1 = handle_d + 3, d2 = handle_d + 5, center = true);\n}\n\n// Assemble the adze\ntranslate([0, 0, handle_len/2])\n    rotate([0, 0, 0])\n        handle();\n\ntranslate([handle_len/2 - head_len/2, 0, handle_len/2])\n    rotate([0, haft_angle, 0])\n        adze_head();",
    "renders": true
  },
  {
    "household_item": "asiman",
    "openscad_code": "// Asiman – realistic style (medium complexity)\n// 3D-printable, no overhangs, 90 mm tall\n// All dimensions in mm\n\n// Overall scale factor\nscale_factor = 1.0;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main cylinder\n            cylinder(h=60*scale_factor, d=30*scale_factor, $fn=48);\n            // Bottom dome\n            translate([0,0,-30*scale_factor])\n                sphere(d=30*scale_factor, $fn=48);\n        }\n        // Hollow inside\n        translate([0,0,wall])\n            cylinder(h=60*scale_factor-wall*2, d=30*scale_factor-wall*2, $fn=48);\n        translate([0,0,-30*scale_factor])\n            sphere(d=30*scale_factor-wall*2, $fn=48);\n    }\n}\n\n// Ventilation grill (front)\nmodule grill() {\n    for (i=[-6:1:6]) {\n        translate([i*2.5*scale_factor, 15*scale_factor-0.5, 0])\n            cube([1*scale_factor, wall, 50*scale_factor], center=true);\n    }\n}\n\n// Intake tube (front protrusion)\nmodule intake() {\n    difference() {\n        // Outer tube\n        translate([0, 15*scale_factor, 0])\n            rotate([90,0,0])\n                cylinder(h=20*scale_factor, d=18*scale_factor, $fn=32);\n        // Hollow\n        translate([0, 15*scale_factor, -0.5])\n            rotate([90,0,0])\n                cylinder(h=21*scale_factor, d=15.6*scale_factor, $fn=32);\n    }\n}\n\n// Exhaust port (top)\nmodule exhaust() {\n    difference() {\n        // Outer collar\n        translate([0,0,30*scale_factor])\n            cylinder(h=10*scale_factor, d=18*scale_factor, $fn=32);\n        // Hollow\n        translate([0,0,30*scale_factor-wall])\n            cylinder(h=11*scale_factor, d=15.6*scale_factor, $fn=32);\n    }\n}\n\n// Control dial (side)\nmodule dial() {\n    difference() {\n        // Knob\n        translate([15*scale_factor,0,10*scale_factor])\n            cylinder(h=5*scale_factor, d=12*scale_factor, $fn=32);\n        // Indicator slot\n        translate([15*scale_factor,0,12.5*scale_factor])\n            cube([8*scale_factor, 1.5*scale_factor, 2*scale_factor], center=true);\n    }\n}\n\n// Mounting ears (back)\nmodule ears() {\n    for (x=[-12,12]) {\n        translate([x*scale_factor, -15*scale_factor, 0])\n            cube([6*scale_factor, 3*scale_factor, 8*scale_factor], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    intake();\n    exhaust();\n    dial();\n    ears();\n    difference() {\n        grill();\n        // Cut grill flush with surface\n        translate([0,15*scale_factor,0])\n            cube([80*scale_factor, 2*wall, 80*scale_factor], center=true);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "bultungin",
    "openscad_code": "// Bultungin (African were-hyena)\n// Medium complexity realistic style\n// Scale: ~70mm tall, 3D-printable with 1.2mm walls\n\n// Parameters\nwall = 1.2;               // print-friendly wall thickness\nscaleFac = 0.7;           // overall scaling to 70 mm height\n\n// Main module\nmodule bultungin() {\n    scale(scaleFac)\n    union() {\n        body();\n        head();\n        tail();\n        legs();\n    }\n}\n\n// Body core\nmodule body() {\n    color(\"SaddleBrown\")\n    difference() {\n        hull() {\n            translate([0, 0, 25]) sphere(r=12, $fn=20);\n            translate([0, 0, 35]) sphere(r=10, $fn=20);\n        }\n        // Hollow core for printing\n        translate([0, 0, 30]) sphere(r=10 - wall, $fn=20);\n    }\n}\n\n// Head with snout, ears, eyes\nmodule head() {\n    translate([-15, 0, 45])\n    rotate([0, 10, 0])\n    union() {\n        // Skull base\n        color(\"SaddleBrown\")\n        difference() {\n            sphere(r=10, $fn=20);\n            translate([0, 0, 0]) sphere(r=10 - wall, $fn=20);\n        }\n        // Snout\n        translate([8, 0, 0])\n        rotate([0, -10, 0])\n        color(\"SaddleBrown\")\n        difference() {\n            cylinder(h=15, r1=7, r2=5, $fn=20);\n            translate([0, 0, -1]) cylinder(h=17, r1=7 - wall, r2=5 - wall, $fn=20);\n        }\n        // Ears\n        for(y = [-8, 8]) {\n            translate([3, y, 5])\n            rotate([0, -30, 0])\n            color(\"SaddleBrown\")\n            difference() {\n                scale([1, 0.5, 1.5]) sphere(r=5, $fn=10);\n                translate([0, 0, 0]) scale([1, 0.4, 1.4]) sphere(r=4, $fn=10);\n            }\n        }\n        // Eyes\n        for(y = [-4, 4]) {\n            translate([2, y, 2])\n            color(\"Black\")\n            sphere(r=1.5, $fn=8);\n        }\n        // Nose\n        translate([16, 0, 0])\n        color(\"Black\")\n        sphere(r=2, $fn=8);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(\"SaddleBrown\")\n    translate([18, 0, 30])\n    rotate([0, 45, 0])\n    difference() {\n        cylinder(h=25, r1=4, r2=2, $fn=15);\n        translate([0, 0, -1]) cylinder(h=27, r1=4 - wall, r2=2 - wall, $fn=15);\n    }\n}\n\n// Legs\nmodule legs() {\n    // Front legs\n    for(x = [-8, 8]) {\n        translate([x, 0, 12])\n        leg();\n    }\n    // Rear legs\n    for(x = [-12, 12]) {\n        translate([x, 0, 12])\n        leg();\n    }\n}\n\nmodule leg() {\n    color(\"SaddleBrown\")\n    difference() {\n        hull() {\n            translate([0, 5, 0]) cylinder(h=20, r=4, $fn=12);\n            translate([0, -5, 0]) cylinder(h=20, r=4, $fn=12);\n        }\n        hull() {\n            translate([0, 5, 0]) cylinder(h=20, r=4 - wall, $fn=12);\n            translate([0, -5, 0]) cylinder(h=20, r=4 - wall, $fn=12);\n        }\n    }\n}\n\n// Main call\nbultungin();",
    "renders": true
  },
  {
    "household_item": "werehyena",
    "openscad_code": "// Realistic Werehyena - Medium Complexity\n// 3D printable figure ~80mm tall\n\n$fn = 50;  // Smooth curves for printing\n\nmodule torso() {\n    // Main torso block\n    difference() {\n        union() {\n            // Chest and abdomen\n            translate([0, 0, 35]) scale([1.2, 0.8, 1.5]) sphere(d=30);\n            // Lower torso\n            translate([0, 0, 20]) scale([1, 0.7, 1.2]) sphere(d=25);\n        }\n        // Hollow center for printing\n        translate([0, 0, 30]) scale([0.8, 0.6, 1.2]) sphere(d=20);\n    }\n}\n\nmodule head() {\n    // Main head shape\n    translate([0, 0, 55]) rotate([0, 10, 0]) {\n        difference() {\n            union() {\n                // Skull\n                scale([1.5, 1, 1.2]) sphere(d=20);\n                // Snout extension\n                translate([10, 0, -3]) scale([1.2, 0.7, 0.6]) sphere(d=15);\n            }\n            // Eye sockets\n            translate([5, 8, 2]) sphere(d=4);\n            translate([5, -8, 2]) sphere(d=4);\n            // Nostrils\n            translate([14, 3, -3]) rotate([45, 0, 0]) cylinder(h=3, d1=2, d2=0);\n            translate([14, -3, -3]) rotate([45, 0, 0]) cylinder(h=3, d1=2, d2=0);\n        }\n        \n        // Ears\n        translate([-8, 10, 8]) rotate([0, -30, 0]) cylinder(h=8, d1=6, d2=4);\n        translate([-8, -10, 8]) rotate([0, 30, 0]) cylinder(h=8, d1=6, d2=4);\n    }\n}\n\nmodule limb(length, thickness) {\n    // Upper leg\n    cylinder(h=length/2, d=thickness);\n    // Lower leg\n    translate([0, 0, length/2]) rotate([30, 0, 0]) cylinder(h=length/2, d=thickness*0.8);\n    // Paw\n    translate([0, 0, length]) sphere(d=thickness*1.2);\n}\n\nmodule arms() {\n    // Left arm\n    translate([10, 12, 45]) rotate([0, -20, 30]) {\n        limb(25, 6);\n    }\n    \n    // Right arm\n    translate([10, -12, 45]) rotate([0, -20, -30]) {\n        limb(25, 6);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-5, 8, 25]) rotate([30, 0, 0]) {\n        limb(30, 8);\n    }\n    \n    // Right leg\n    translate([-5, -8, 25]) rotate([30, 0, 0]) {\n        limb(30, 8);\n    }\n}\n\nmodule tail() {\n    // Base of tail\n    translate([-12, 0, 25]) rotate([30, 0, 0]) {\n        cylinder(h=20, d1=8, d2=4);\n        // Tuft at end\n        translate([0, 0, 20]) sphere(d=5);\n    }\n}\n\nmodule fur_texture(position, size) {\n    // Simple fur bumps for texture\n    translate(position) scale([size, size, size]) sphere(d=2);\n}\n\n// Main assembly\nunion() {\n    torso();\n    head();\n    arms();\n    legs();\n    tail();\n    \n    // Add fur texture patches\n    for(i = [1:5]) {\n        fur_texture([random(-5, 5), random(-5, 5), random(40, 50)], 0.5);\n    }\n    \n    for(i = [1:8]) {\n        fur_texture([random(-8, 8), random(-8, 8), random(20, 35)], 0.6);\n    }\n}\n\n// Base platform for stability\ntranslate([0, 0, 0]) cube([30, 20, 2], center=true);",
    "renders": true
  },
  {
    "household_item": "eloko",
    "openscad_code": "// Eloko – Central-African dwarf spirit\n// Total height ≈ 85 mm – suitable for FDM printing\n// No steep overhangs; all slopes ≤ 45°\n\n$fa = 1; $fs = 0.5;\n\nmodule head() {\n    // Skull base\n    difference() {\n        sphere(d = 26, center = true);          // main cranium\n        translate([0, 0, 13])                   // flatten top\n            cube([30, 30, 14], center = true);\n    }\n\n    // Pronounced brow ridges\n    translate([0, 11, 0])\n        rotate([0, 15, 0])\n        cube([28, 6, 8], center = true);\n\n    // Eyes – deep sockets\n    for (x = [-8, 8])\n        translate([x, 7, 2])\n            rotate([0, 15, 0])\n            sphere(d = 8);\n\n    // Wide mouth with visible teeth ridge\n    translate([0, -7, -6])\n        cube([20, 10, 4], center = true);\n\n    // Ears – small and pointed\n    for (x = [-13, 13])\n        mirror([x, 0, 0])\n        translate([abs(x), 0, 0])\n        rotate([0, 0, x > 0 ? 20 : -20])\n        linear_extrude(height = 2, scale = 0.5)\n        polygon(points = [[0, 0], [4, -6], [0, -12]]);\n}\n\nmodule body() {\n    // Torso bell-shape\n    cylinder(h1 = 20, h2 = 30, r1 = 15, r2 = 20);\n    // Simple stub arms\n    for (ang = [45, -45])\n        rotate([0, 0, ang])\n        translate([18, 0, 15])\n        rotate([0, 90, 0])\n        cylinder(h = 16, r = 4);\n}\n\nmodule grass_skirt() {\n    // Thin fringes around hips\n    for (a = [0:15:345])\n        rotate([0, 0, a])\n        translate([19, 0, 0])\n        cube([0.8, 1, 20]);\n}\n\nmodule feet() {\n    // Flat gnome-like feet for stable standing\n    for (x = [-7, 7])\n        translate([x, 0, -42])\n        cube([8, 18, 6], center = true);\n}\n\n// Assembly\nunion() {\n    translate([0, 0, 40]) head();\n    translate([0, 0, 20]) body();\n    translate([0, 0, 20]) grass_skirt();\n    feet();\n}",
    "renders": true
  },
  {
    "household_item": "kongamato",
    "openscad_code": "// Kongamato - realistic style, medium complexity\n// Wingspan ~90 mm, length ~65 mm\n\n$fn=36;\n\nmodule wing() {\n    difference() {\n        // Main wing membrane\n        scale([1,0.6,0.05]) sphere(d=50);\n        \n        // Wing tip notch\n        translate([23,0,0]) scale([0.2,0.2,2]) cube([20,20,10]);\n        \n        // Wing claw\n        translate([22,-2,-0.5]) rotate([0,90,0]) cylinder(h=4, d1=2, d2=1);\n    }\n}\n\nmodule wings_pair() {\n    // Left wing\n    translate([-5,0,5]) rotate([0,0,-20]) wing();\n    \n    // Right wing\n    mirror([1,0,0]) translate([-5,0,5]) rotate([0,0,-20]) wing();\n}\n\nmodule head() {\n    union() {\n        // Main head shape\n        translate([0,0,8]) scale([0.8,0.6,0.7]) sphere(d=15);\n        \n        // Snout\n        translate([0,0,15]) rotate([0,0,0]) scale([0.4,0.3,0.6]) sphere(d=15);\n        \n        // Lower jaw\n        translate([0,0,11]) rotate([15,0,0]) scale([0.35,0.25,0.5]) sphere(d=15);\n        \n        // Crest\n        for(i=[0:2]) {\n            translate([0,0,18-i*3]) rotate([0,0,0]) scale([0.1,0.05,0.3]) cylinder(h=8, d1=3, d2=1);\n        }\n        \n        // Teeth\n        for(a=[-20:10:20]) {\n            rotate([0,0,a]) translate([0,7,11]) rotate([90,0,0]) cylinder(h=2, d1=1, d2=0.5);\n        }\n    }\n}\n\nmodule body() {\n    hull() {\n        // Chest\n        translate([0,0,0]) scale([1,0.8,0.6]) sphere(d=20);\n        \n        // Abdomen\n        translate([-10,0,-3]) scale([0.8,0.6,0.4]) sphere(d=20);\n        \n        // Tail base\n        translate([-20,0,-5]) scale([0.4,0.3,0.3]) sphere(d=15);\n    }\n}\n\nmodule tail() {\n    union() {\n        // Tail segments\n        for(i=[0:3]) {\n            translate([-25-i*5,0,-6-i]) scale([0.3-i*0.05,0.2-i*0.03,0.2-i*0.03]) sphere(d=15);\n        }\n        \n        // Tail fin\n        translate([-40,0,-8]) rotate([0,0,90]) scale([0.05,0.4,0.2]) cube([20,20,5]);\n    }\n}\n\nmodule legs() {\n    module leg() {\n        union() {\n            // Thigh\n            translate([0,0,0]) rotate([0,45,0]) cylinder(h=8, d1=4, d2=3);\n            \n            // Shin\n            translate([0,0,8]) rotate([0,-30,0]) cylinder(h=10, d1=3, d2=2);\n            \n            // Foot\n            translate([0,0,18]) rotate([0,-90,0]) scale([1,0.5,0.3]) sphere(d=6);\n            \n            // Claws\n            for(a=[-30:30:60]) {\n                rotate([0,a,0]) translate([0,0,18]) rotate([90,0,0]) cylinder(h=3, d1=2, d2=1);\n            }\n        }\n    }\n    \n    // Left legs\n    translate([-5,-8,-2]) rotate([0,0,30]) leg();\n    translate([-12,-6,-2]) rotate([0,0,20]) leg();\n    \n    // Right legs\n    mirror([0,1,0]) translate([-5,-8,-2]) rotate([0,0,30]) leg();\n    mirror([0,1,0]) translate([-12,-6,-2]) rotate([0,0,20]) leg();\n}\n\n// Assemble the kongamato\nunion() {\n    head();\n    body();\n    tail();\n    wings_pair();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "mamiwata",
    "openscad_code": "// Mamiwata - African water spirit figure\n// Medium complexity realistic style\n// Overall height: ~80mm\n\n$fn = 32;\n\n// Main parameters\nbody_height = 60;\nhead_diameter = 18;\ntail_length = 40;\narm_length = 20;\nwall_thickness = 2;\n\n// Upper body - human torso\nmodule torso() {\n    difference() {\n        // Main torso\n        scale([0.8, 1, 1.2])\n            sphere(d=body_height * 0.6);\n        \n        // Neck hole\n        translate([0, 0, body_height * 0.3])\n            cylinder(h=10, d1=head_diameter + 4, d2=head_diameter + 2);\n    }\n}\n\n// Head with African features\nmodule head() {\n    union() {\n        // Head sphere\n        sphere(d=head_diameter);\n        \n        // Nose\n        translate([0, head_diameter * 0.4, 0])\n            scale([0.3, 0.2, 0.4])\n                sphere(d=head_diameter * 0.3);\n        \n        // Lips\n        translate([0, head_diameter * 0.45, -head_diameter * 0.1])\n            scale([0.4, 0.1, 0.15])\n                sphere(d=head_diameter * 0.3);\n        \n        // Eyes\n        for(x = [-head_diameter * 0.2, head_diameter * 0.2]) {\n            translate([x, head_diameter * 0.3, head_diameter * 0.1])\n                scale([0.15, 0.1, 0.1])\n                    sphere(d=head_diameter * 0.2);\n        }\n        \n        // Traditional head wrap\n        translate([0, 0, head_diameter * 0.4])\n            rotate([90, 0, 0])\n                cylinder(h=head_diameter * 0.8, d1=head_diameter * 1.4, d2=head_diameter * 1.2);\n    }\n}\n\n// Arms with hands\nmodule arm(side = 1) {\n    translate([side * body_height * 0.25, 0, body_height * 0.2]) {\n        rotate([0, 0, side * 20]) {\n            // Upper arm\n            cylinder(h=arm_length * 0.6, d1=6, d2=5);\n            \n            // Lower arm\n            translate([0, arm_length * 0.6, 0])\n                rotate([0, 0, side * 30])\n                    cylinder(h=arm_length * 0.4, d1=5, d2=4);\n            \n            // Hand\n            translate([0, arm_length, 0])\n                sphere(d=5);\n        }\n    }\n}\n\n// Fish tail lower body\nmodule tail() {\n    union() {\n        // Tail base\n        translate([0, 0, -body_height * 0.4])\n            scale([1, 0.7, 1.5])\n                cylinder(h=tail_length * 0.7, d1=body_height * 0.5, d2=body_height * 0.3);\n        \n        // Tail fin\n        translate([0, 0, -body_height * 0.4 - tail_length * 0.7])\n            rotate([0, 90, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=tail_length * 0.3, d1=body_height * 0.5, d2=body_height * 0.1);\n    }\n}\n\n// Decorative jewelry - necklace\nmodule jewelry() {\n    // Necklace\n    rotate([90, 0, 0])\n        translate([0, 0, -body_height * 0.15])\n            difference() {\n                cylinder(h=3, d=body_height * 0.7);\n                cylinder(h=4, d=body_height * 0.7 - wall_thickness * 2);\n            }\n    \n    // Arm bands\n    for(side = [-1, 1]) {\n        translate([side * body_height * 0.25, arm_length * 0.3, body_height * 0.15])\n            rotate([0, 90, 0])\n                cylinder(h=3, d=8);\n    }\n}\n\n// Water base with waves\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, -body_height * 0.7 - tail_length])\n            cylinder(h=8, d=body_height * 1.2);\n        \n        // Wave cuts for water effect\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([body_height * 0.4, 0, -body_height * 0.7 - tail_length])\n                    cube([body_height * 0.8, 6, 10], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Body assembly\n    translate([0, 0, -body_height * 0.2]) {\n        // Torso\n        torso();\n        \n        // Head\n        translate([0, 0, body_height * 0.4])\n            head();\n        \n        // Arms\n        arm(1);\n        arm(-1);\n        \n        // Tail\n        tail();\n        \n        // Jewelry\n        jewelry();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "popobawa",
    "openscad_code": "// Popobawa – Medium-Complexity 3D-Printable Model\n// Only basic OpenSCAD primitives, 50-100 mm print size\n\n// Overall dimensions\nwing_span      = 90;\nbody_length    = 55;\nbody_diameter  = 18;\nhead_diameter  = 14;\n\n// Wall thickness for printing\nwall = 1.6;\n\nmodule head() {\n    // Skull-like head\n    difference() {\n        sphere(d=head_diameter, $fn=32);                     // main head\n        translate([0,0,head_diameter/3])\n            cube([head_diameter, head_diameter*1.2, head_diameter], center=true); // flat top\n        // Eye sockets\n        for (x=[-head_diameter/3.5, head_diameter/3.5])\n            translate([x, head_diameter/4, 0])\n                rotate([0,90,0])\n                    cylinder(h=head_diameter, d=head_diameter/3.5, $fn=16);\n        // Mouth slit\n        translate([0, -head_diameter/2 + 1, -head_diameter/4])\n            cube([head_diameter*0.6, wall*3, head_diameter/3], center=true);\n    }\n}\n\nmodule torso() {\n    // Hollowed elongated torso\n    difference() {\n        scale([1,1,1.4])\n            sphere(d=body_diameter, $fn=32);                 // chest\n        translate([0,0,-body_diameter*0.7])\n            cylinder(h=body_diameter*1.5, d=body_diameter-wall*2, $fn=32);\n    }\n}\n\nmodule wing() {\n    // Bat-like wing with simple membranes\n    difference() {\n        union() {\n            // Arm bones\n            translate([-body_diameter/2, 0, 0])\n                rotate([0,0,20])\n                    cylinder(h=wing_span/2.2, d=body_diameter/4, $fn=8);\n            translate([-body_diameter/2 + wing_span/2.5, 0, 0])\n                rotate([0,0,-30])\n                    cylinder(h=wing_span/2.8, d=body_diameter/5, $fn=8);\n            // Membrane\n            hull() {\n                translate([-body_diameter/2, 0, 0]) sphere(d=1.5);\n                translate([-body_diameter/2 + wing_span/2.2, 0, 0]) sphere(d=1.5);\n                translate([-body_diameter/2 + wing_span/2.5 + wing_span/2.8, 0, 0]) sphere(d=1.5);\n            }\n            scale([1,0.2,1])\n                translate([-body_diameter/2, 0, 0])\n                    cube([wing_span*0.9, body_diameter*3, 1], center=true);\n        }\n        // Thin membrane\n        scale([1,0.1,1])\n            translate([-body_diameter/2, -body_diameter, 0])\n                cube([wing_span*0.9, body_diameter*3, wall], center=true);\n    }\n}\n\nmodule tail() {\n    // Barbed tail\n    union() {\n        translate([0,0,-body_length/2])\n            cylinder(h=body_length/1.6, d1=body_diameter/2, d2=body_diameter/4, $fn=16);\n        // Spikes along tail\n        for (i=[1:4]) {\n            rotate([0,0,i*360/4])\n                translate([0,0,-body_length/2 - i*body_length/8])\n                    rotate([0,90,0])\n                        cylinder(h=body_diameter/3, d=body_diameter/6, $fn=6);\n        }\n    }\n}\n\nmodule legs() {\n    // Simple digitigrade legs\n    for (side=[-1,1]) {\n        translate([side*body_diameter/3, 0, -body_length/2 + body_length/5])\n            rotate([30*side,0,0])\n                cylinder(h=body_length/4, d=body_diameter/4, $fn=8);\n        translate([side*body_diameter/2.5, 0, -body_length/2])\n            rotate([45*side,0,0])\n                cylinder(h=body_length/5, d=body_diameter/5, $fn=8);\n    }\n}\n\n// Assemble the popobawa\nunion() {\n    // Head on torso\n    translate([0,0,body_length/2 + head_diameter/2])\n        head();\n    torso();\n    // Wings on back\n    for (side=[-1,1]) {\n        translate([0, 0, body_length/4])\n            rotate([0,90*side,0])\n                wing();\n    }\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "ninkianka",
    "openscad_code": "// Ninkianka (West African ceremonial blade)\n// Overall length ~90 mm, width ~35 mm, thickness ~5 mm\n// Build for standard FDM printer, no steep overhangs (max 45°)\n\n$fn = 36;               // smooth curves\nblade_t = 2;            // blade thickness\nhandle_t = 5;           // handle thickness\nwall = 1.2;             // printable wall thickness\n\nmodule leaf_blade() {\n    // main leaf-shaped blade\n    difference() {\n        // outer profile\n        union() {\n            // central spine\n            translate([0, 0, blade_t/2])\n                cube([65, blade_t*2, blade_t], center=true);\n\n            // left half\n            translate([-30, 0, 0])\n                rotate([0, 0, 15])\n                scale([1, 1.5, 1])\n                cylinder(h=blade_t, r1=25, r2=5);\n\n            // right half\n            translate([-30, 0, 0])\n                rotate([0, 0, -15])\n                scale([1, 1.5, 1])\n                cylinder(h=blade_t, r1=25, r2=5);\n        }\n\n        // inner bevel cavity for realistic edge\n        for (side = [-1, 1])\n            translate([side*1, 0, blade_t/2])\n                cube([wall, 50, blade_t*1.5], center=true);\n    }\n}\n\nmodule guard() {\n    // elliptical guard plate\n    difference() {\n        scale([1.4, 1, 1])\n            cylinder(h=handle_t, r1=12, r2=12);\n        // lightening hole\n        cylinder(h=handle_t+1, r=5);\n    }\n}\n\nmodule grip() {\n    // wooden grip with rings\n    translate([0, 0, handle_t/2])\n        difference() {\n            cylinder(h=30, r=5);\n            // decorative grooves\n            for (z = [5:8:25])\n                translate([0, 0, z])\n                    cube([15, 15, 1.5], center=true);\n        }\n\n    // metal ferrules\n    for (z = [0, 30])\n        translate([0, 0, z])\n            cylinder(h=3, r=5.5);\n}\n\nmodule butt_cap() {\n    // knob at pommel\n    sphere(d=8);\n    translate([0, 0, -3])\n        cylinder(h=6, r1=4, r2=6);\n}\n\n// assembly\nunion() {\n    // blade\n    translate([0, 0, blade_t/2])\n        leaf_blade();\n\n    // guard\n    translate([0, 0, blade_t])\n        guard();\n\n    // handle\n    translate([0, 0, blade_t + handle_t/2])\n        grip();\n\n    // pommel\n    translate([0, 0, blade_t + handle_t + 4])\n        butt_cap();\n}",
    "renders": true
  },
  {
    "household_item": "boitatá",
    "openscad_code": "// Boitatá - Legendary Brazilian Fire Serpent\n// Medium complexity realistic style\n\n$fn = 64;\nwall_thickness = 1.2;\n\nmodule snake_head() {\n    // Main head structure\n    difference() {\n        // Head base\n        union() {\n            scale([1.2, 1, 1])\n                sphere(d = 25);\n            \n            // Snout extension\n            translate([-12, 0, 0])\n                scale([1.5, 0.8, 0.9])\n                    sphere(d = 20);\n        }\n        \n        // Eye sockets\n        translate([5, 8, 5])\n            sphere(d = 8);\n        translate([5, -8, 5])\n            sphere(d = 8);\n        \n        // Nostrils\n        translate([-10, 4, 2])\n            rotate([0, 90, 0])\n                cylinder(h = 5, d1 = 3, d2 = 2);\n        translate([-10, -4, 2])\n            rotate([0, 90, 0])\n                cylinder(h = 5, d1 = 3, d2 = 2);\n    }\n    \n    // Eyes - glowing orbs\n    translate([5, 8, 5])\n        sphere(d = 6);\n    translate([5, -8, 5])\n        sphere(d = 6);\n    \n    // Head scales pattern\n    for (i = [-4:4]) {\n        for (j = [-2:2]) {\n            translate([j * 3 - 2, i * 2.5, 12 - abs(i) * 1.5])\n                rotate([0, 0, 45])\n                    cube([2, 2, 0.5], center = true);\n        }\n    }\n}\n\nmodule snake_body_segment(pos, rot, scale_factor) {\n    // Create one segment of the snake body\n    translate(pos)\n        rotate(rot)\n            scale([scale_factor, scale_factor, scale_factor])\n                difference() {\n                    // Main body ring\n                    cylinder(h = 8, d = 20, center = true);\n                    \n                    // Hollow center\n                    cylinder(h = 10, d = 20 - wall_thickness * 2, center = true);\n                }\n}\n\nmodule tail_spike() {\n    // Fiery tail spike\n    union() {\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, 5, 0])\n                    cube([1, 8, 1], center = true);\n        }\n        cylinder(h = 4, d = 4);\n    }\n}\n\nmodule body_pattern() {\n    // Scale pattern along body\n    for (i = [0:20]) {\n        rotate([0, i * 15, 0])\n            translate([0, 10 - i * 0.3, 0])\n                for (j = [0:7]) {\n                    rotate([0, 0, j * 45])\n                        translate([0, 9, 0])\n                            cube([1.5, 2, 0.5], center = true);\n                }\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, 0])\n        snake_head();\n    \n    // Neck transition\n    translate([-15, 0, 0])\n        scale([1, 0.9, 0.9])\n            sphere(d = 18);\n    \n    // Body segments\n    for (i = [1:15]) {\n        angle = i * 12;\n        radius = 45 - i * 2;\n        x = -15 - i * 5 + cos(angle) * 5;\n        y = sin(angle) * 5;\n        z = cos(angle * 0.7) * 3;\n        \n        snake_body_segment(\n            [x, y, z],\n            [0, 0, angle],\n            1 - i * 0.03\n        );\n    }\n    \n    // Tail\n    translate([-90, 0, 0])\n        rotate([0, 90, 0])\n            scale([0.3, 0.3, 2])\n                tail_spike();\n    \n    // Body pattern overlay\n    translate([-15, 0, 0])\n        body_pattern();\n}\n\n// Base for stability\ntranslate([0, 0, -12])\n    cube([100, 30, 2], center = true);",
    "renders": true
  },
  {
    "household_item": "boto",
    "openscad_code": "// Amazon river dolphin (boto) – medium complexity, 3D-printable\n// Total length ≈ 90 mm, wall thickness 1.2 mm\n\n$fn = 36;\n\nmodule hollow_cylinder(h, r1, r2, wall) {\n    difference() {\n        cylinder(h = h, r1 = r1, r2 = r2);\n        translate([0, 0, -0.01])\n            cylinder(h = h + 0.02, r1 = r1 - wall, r2 = r2 - wall);\n    }\n}\n\nmodule flipper(length, width, thick) {\n    // Simple paddle-shaped flipper\n    difference() {\n        hull() {\n            translate([0, 0, thick/2]) sphere(d = width);\n            translate([length, 0, thick/2]) sphere(d = width * 0.7);\n        }\n        translate([0, 0, thick]) cube([length + 2, width + 2, thick*2], center = true);\n    }\n}\n\nmodule dorsal_fin() {\n    // Low triangular ridge (no support needed)\n    linear_extrude(height = 8, scale = 0.3, center = false)\n        polygon(points = [[0, 0], [10, 0], [5, 15]]);\n}\n\nmodule boto() {\n    // Body – tapered solid cylinder\n    union() {\n        // Main body\n        rotate([90, 0, 0])\n            cylinder(h = 70, r1 = 12, r2 = 6);\n\n        // Head bulb\n        translate([0, -40, 0])\n            sphere(d = 24);\n\n        // Rostrum (beak)\n        translate([0, -55, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r1 = 5, r2 = 2);\n\n        // Eyes\n        for (side = [-1, 1]) {\n            translate([side * 8, -42, 3])\n                sphere(d = 3);\n        }\n\n        // Flippers\n        for (side = [-1, 1]) {\n            translate([side * 12, -25, -5])\n                rotate([0, side * 20, -90])\n                    flipper(20, 6, 2);\n        }\n\n        // Tail fluke\n        translate([0, 35, 0])\n            rotate([0, 90, 0])\n                union() {\n                    scale([1, 3, 0.5])\n                        sphere(d = 12);\n                    mirror([0, 1, 0])\n                        scale([1, 3, 0.5])\n                            sphere(d = 12);\n                }\n\n        // Dorsal ridge\n        translate([0, 10, 12])\n            dorsal_fin();\n    }\n}\n\n// Hollow the model for 3D printing\ndifference() {\n    boto();\n    // Interior cavity\n    translate([0, 0, -5])\n        scale([0.7, 0.7, 0.7])\n            boto();\n}",
    "renders": true
  },
  {
    "household_item": "saci",
    "openscad_code": "// Saci - Brazilian Folklore Character\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Overall scale\nscale_factor = 0.4;\n\n// Colors for reference (will print in single color)\n// Red shorts\n// Black body/head\n// White pipe\n\n// Main module\nmodule saci() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Leg assembly - single spinning leg\n        translate([0, 0, 20]) {\n            union() {\n                // Main leg cylinder\n                cylinder(h = 60, r = 8);\n                \n                // Foot\n                translate([0, 0, -30]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 15, r1 = 8, r2 = 12);\n                    }\n                }\n                \n                // Knee joint\n                translate([0, 0, 15]) {\n                    sphere(r = 9);\n                }\n                \n                // Hip joint\n                translate([0, 0, 30]) {\n                    sphere(r = 10);\n                }\n            }\n        }\n        \n        // Torso\n        translate([0, 0, 40]) {\n            difference() {\n                // Main torso\n                cylinder(h = 35, r = 15);\n                \n                // Waist indentation\n                translate([0, 0, 20]) {\n                    scale([1, 1, 0.8]) {\n                        sphere(r = 16);\n                    }\n                }\n            }\n        }\n        \n        // Red shorts\n        translate([0, 0, 55]) {\n            cylinder(h = 12, r = 16);\n        }\n        \n        // Arms\n        // Left arm\n        translate([-20, 0, 65]) {\n            rotate([0, 0, -30]) {\n                union() {\n                    // Upper arm\n                    cylinder(h = 25, r = 5);\n                    \n                    // Elbow\n                    translate([0, 0, 25]) {\n                        sphere(r = 6);\n                        \n                        // Lower arm\n                        translate([0, 0, 0]) {\n                            rotate([0, 0, -20]) {\n                                cylinder(h = 20, r = 4.5);\n                                \n                                // Hand\n                                translate([0, 0, 20]) {\n                                    sphere(r = 5.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right arm (holding pipe)\n        translate([20, 0, 65]) {\n            rotate([0, 0, 30]) {\n                union() {\n                    // Upper arm\n                    cylinder(h = 25, r = 5);\n                    \n                    // Elbow\n                    translate([0, 0, 25]) {\n                        sphere(r = 6);\n                        \n                        // Lower arm\n                        translate([0, 0, 0]) {\n                            rotate([0, 0, 20]) {\n                                cylinder(h = 20, r = 4.5);\n                                \n                                // Hand with pipe\n                                translate([0, 0, 20]) {\n                                    sphere(r = 5.5);\n                                    \n                                    // Pipe\n                                    translate([0, 8, 0]) {\n                                        rotate([90, 0, 0]) {\n                                            difference() {\n                                                // Pipe body\n                                                cylinder(h = 20, r = 3);\n                                                \n                                                // Pipe bowl hole\n                                                translate([0, 0, 18]) {\n                                                    cylinder(h = 10, r = 2);\n                                                }\n                                            }\n                                            \n                                            // Pipe stem\n                                            translate([0, 0, 10]) {\n                                                rotate([90, 0, 0]) {\n                                                    cylinder(h = 15, r = 1.5);\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Head\n        translate([0, 0, 80]) {\n            difference() {\n                // Main head sphere\n                sphere(r = 18);\n                \n                // Eye sockets\n                for(i = [-1, 1]) {\n                    translate([i * 7, 12, 5]) {\n                        scale([1, 1.2, 0.8]) {\n                            sphere(r = 4);\n                        }\n                    }\n                }\n                \n                // Mouth\n                translate([0, 14, -5]) {\n                    rotate([15, 0, 0]) {\n                        cylinder(h = 15, r1 = 5, r2 = 3, center = true);\n                    }\n                }\n            }\n            \n            // Eyes (white parts)\n            for(i = [-1, 1]) {\n                translate([i * 7, 12, 5]) {\n                    sphere(r = 2.5);\n                }\n            }\n            \n            // Red cap\n            difference() {\n                // Main cap\n                translate([0, 0, 15]) {\n                    cylinder(h = 20, r = 15);\n                }\n                \n                // Cap point\n                translate([0, 0, 35]) {\n                    rotate([0, 0, 15]) {\n                        cylinder(h = 25, r1 = 0, r2 = 5);\n                    }\n                }\n            }\n        }\n        \n        // Hat brim\n        translate([0, 0, 15]) {\n            difference() {\n                cylinder(h = 3, r = 22);\n                cylinder(h = 4, r = 15);\n            }\n        }\n    }\n}\n\n// Create the model\nsaci();",
    "renders": true
  },
  {
    "household_item": "caipora",
    "openscad_code": "// Caipora – medium-complexity realistic figure, 3D-print friendly\n// Height ≈ 80 mm, base footprint ≈ 35 mm\n\n// overall scale factor\noverall_scale = 1.0;\n\n// wall thickness for printing\nwall = 1.2;\n\nmodule caipora() {\n    // main body block\n    translate([0, 0, 25]) {\n        difference() {\n            scale([1.0, 0.75, 1.2]) sphere(d = 30);   // torso\n            translate([0, 0, -20]) cube([40, 40, 40], center = true); // flatten bottom\n        }\n    }\n\n    // head\n    translate([0, 0, 50]) {\n        difference() {\n            sphere(d = 22);  // head sphere\n            // eye sockets\n            translate([-6, 11, 2]) rotate([0, -20, 0]) cylinder(h = 10, d = 6, $fn = 16);\n            translate([ 6, 11, 2]) rotate([0,  20, 0]) cylinder(h = 10, d = 6, $fn = 16);\n        }\n\n        // snout\n        translate([0, 12, -3]) {\n            scale([1.3, 1.8, 1.0]) sphere(d = 10);\n        }\n\n        // nose\n        translate([0, 15.5, -2]) sphere(d = 3);\n\n        // ears\n        for (x = [-1, 1]) {\n            translate([x * 10, 0, 5]) {\n                rotate([0, -15 * x, 0]) {\n                    scale([0.7, 0.3, 1.5]) sphere(d = 10);\n                }\n            }\n        }\n\n        // eyes\n        color(\"black\") {\n            translate([-6, 11, 2]) rotate([0, -20, 0]) cylinder(h = 1, d = 4.2, $fn = 16);\n            translate([ 6, 11, 2]) rotate([0,  20, 0]) cylinder(h = 1, d = 4.2, $fn = 16);\n        }\n    }\n\n    // arms\n    for (side = [-1, 1]) {\n        translate([side * 12, 12, 35]) {\n            rotate([0, -20 * side, -30 * side]) {\n                difference() {\n                    cylinder(h = 22, d1 = 10, d2 = 7, $fn = 12); // upper arm\n                    translate([0, 0, -1]) cylinder(h = 25, d = 10 - wall * 2, $fn = 12);\n                }\n            }\n        }\n    }\n\n    // legs\n    for (side = [-1, 1]) {\n        translate([side * 7, 0, 8]) {\n            rotate([0, 0, 15 * side]) {\n                difference() {\n                    cylinder(h = 18, d1 = 9, d2 = 8, $fn = 12); // thigh\n                    translate([0, 0, -1]) cylinder(h = 20, d = 9 - wall * 2, $fn = 12);\n                }\n            }\n            translate([side * 7, 0, 0]) {\n                sphere(d = 9); // foot\n            }\n        }\n    }\n\n    // tail\n    translate([0, -20, 15]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 30, d1 = 12, d2 = 5, $fn = 12);\n                translate([0, 0, -1]) cylinder(h = 32, d1 = 12 - wall * 2, d2 = 5 - wall * 2, $fn = 12);\n            }\n        }\n    }\n\n    // simple bow on back (bush spirit detail)\n    translate([0, 8, 35]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height = 2) {\n                polygon(points = [[-7, 0], [-4, 5], [4, 5], [7, 0], [4, -5], [-4, -5]]);\n            }\n        }\n    }\n}\n\nscale(overall_scale) caipora();",
    "renders": true
  },
  {
    "household_item": "mapinguari",
    "openscad_code": "// Mapinguari - medium complexity realistic style\n// 3D printable model ~70mm tall\n\n// Overall scale factor\nscale_factor = 0.7;\n\n// Main body module\nmodule body() {\n    // Torso - elongated oval\n    translate([0, 0, 25])\n    scale([1.2, 0.8, 1.5])\n    sphere(r=15, $fn=32);\n    \n    // Chest plate\n    translate([0, 8, 35])\n    rotate([15, 0, 0])\n    scale([0.8, 0.5, 0.3])\n    cube([25, 20, 5], center=true);\n}\n\n// Head module with mouth cavity\nmodule head() {\n    union() {\n        // Main head\n        translate([0, -25, 55])\n        scale([1, 0.9, 1.1])\n        sphere(r=12, $fn=32);\n        \n        // Snout\n        translate([0, -38, 52])\n        scale([0.7, 1.2, 0.6])\n        sphere(r=8, $fn=24);\n        \n        // Mouth opening\n        difference() {\n            translate([0, -38, 47])\n            rotate([10, 0, 0])\n            scale([6, 4, 3])\n            cube([10, 8, 6], center=true);\n            \n            // Teeth\n            for(i = [-3:3]) {\n                translate([i*2.5, -40, 45])\n                cylinder(h=4, r1=1, r2=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Arm module\nmodule arm(side) {\n    // Shoulder\n    translate([side*15, 0, 45])\n    rotate([0, 0, side*10])\n    sphere(r=8, $fn=24);\n    \n    // Upper arm\n    translate([side*20, -5, 35])\n    rotate([0, 0, side*-20])\n    cylinder(h=20, r1=6, r2=5, $fn=16);\n    \n    // Forearm\n    translate([side*30, -12, 25])\n    rotate([0, 0, side*-30])\n    cylinder(h=18, r1=5, r2=4, $fn=16);\n    \n    // Hand with claws\n    translate([side*38, -18, 18])\n    union() {\n        sphere(r=5, $fn=16);\n        \n        // Claws\n        for(i = [-2:2]) {\n            translate([side*i*2, -22, 18])\n            rotate([90, 0, side*10])\n            cylinder(h=8, r1=2, r2=1, $fn=8);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    // Hip\n    translate([side*10, 5, 15])\n    sphere(r=7, $fn=24);\n    \n    // Thigh\n    translate([side*12, 0, 5])\n    rotate([0, 0, side*10])\n    cylinder(h=20, r1=6, r2=5, $fn=16);\n    \n    // Lower leg\n    translate([side*14, -3, -10])\n    rotate([0, 0, side*15])\n    cylinder(h=18, r1=5, r2=4, $fn=16);\n    \n    // Foot\n    translate([side*16, -5, -20])\n    scale([1.5, 2, 0.8])\n    sphere(r=5, $fn=16);\n}\n\n// Back shell/armor plates\nmodule back_plates() {\n    // Central spine\n    for(i = [0:4]) {\n        translate([0, 5, 35-i*8])\n        rotate([5, 0, 0])\n        scale([0.5, 1, 0.3])\n        cube([20, 15, 3], center=true);\n    }\n    \n    // Side plates\n    for(i = [0:3]) {\n        translate([-12, 8, 30-i*10])\n        rotate([10, 0, -20])\n        scale([0.4, 0.8, 0.3])\n        cube([15, 12, 2], center=true);\n        \n        translate([12, 8, 30-i*10])\n        rotate([10, 0, 20])\n        scale([0.4, 0.8, 0.3])\n        cube([15, 12, 2], center=true);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    body();\n    head();\n    arm(1);   // Right arm\n    arm(-1);  // Left arm\n    leg(1);   // Right leg\n    leg(-1);  // Left leg\n    back_plates();\n}",
    "renders": true
  },
  {
    "household_item": "yacuruna",
    "openscad_code": "// Yacuruna - Water spirit of the Amazon\n// Medium complexity realistic style\n// Overall height: 75 mm\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main body module\nmodule yacuruna_body() {\n    // Torso - elongated humanoid form\n    union() {\n        // Main torso\n        translate([0, 0, 25])\n            scale([1, 0.8, 1.5])\n            sphere(12);\n        \n        // Chest plate - armored look\n        difference() {\n            translate([0, -6, 25])\n                cube([20, 12, 25], center=true);\n            translate([0, -10, 25])\n                cube([18, 8, 23], center=true);\n        }\n        \n        // Fish-like scales pattern\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([0, 8, 20])\n                scale([1.2, 0.3, 0.5])\n                sphere(5);\n        }\n    }\n}\n\n// Fish tail\nmodule fish_tail() {\n    // Main tail structure\n    translate([0, 0, 5])\n        scale([1, 0.4, 2])\n        cylinder(h=20, r1=8, r2=0);\n    \n    // Tail fins - horizontal\n    translate([0, 0, 5])\n        rotate([90, 0, 0])\n        scale([1.5, 0.2, 1])\n        cylinder(h=15, r1=8, r2=0);\n    \n    // Vertical fin\n    translate([0, 0, 5])\n        rotate([0, 90, 0])\n        scale([0.2, 1.5, 1])\n        cylinder(h=15, r1=8, r2=0);\n}\n\n// Head with human-fish hybrid features\nmodule yacuruna_head() {\n    union() {\n        // Main head shape\n        translate([0, 0, 45])\n            scale([0.8, 0.9, 1.1])\n            sphere(10);\n        \n        // Fish-like crest on head\n        translate([0, 0, 55])\n            scale([0.5, 0.1, 1])\n            sphere(8);\n        \n        // Eyes - slightly protruding\n        for (x = [-5, 5]) {\n            translate([x, -8, 45])\n                sphere(2.5);\n            translate([x, -9, 45])\n                sphere(1.5);\n        }\n        \n        // Gills - slits on neck\n        for (i = [0:2]) {\n            translate([0, 10, 38 - i*3])\n                rotate([0, 90, 0])\n                scale([0.3, 1, 0.1])\n                cylinder(h=8, r=2);\n        }\n        \n        // Mouth - fish-like\n        translate([0, -12, 42])\n            scale([1, 0.5, 0.3])\n            sphere(4);\n    }\n}\n\n// Arms with webbed hands\nmodule arm(side) {\n    mirror([side, 0, 0]) {\n        // Upper arm\n        translate([10, 5, 35])\n            rotate([-30, 0, 20])\n            cylinder(h=15, r=3);\n        \n        // Forearm\n        translate([18, 8, 25])\n            rotate([30, 0, 30])\n            cylinder(h=12, r=2.5);\n        \n        // Webbed hand\n        translate([25, 10, 20])\n            rotate([60, 0, 40])\n            union() {\n                // Palm\n                scale([1, 0.5, 0.3])\n                sphere(3);\n                \n                // Fingers with webbing\n                for (i = [-1, 0, 1]) {\n                    translate([3*i, 2, -1])\n                        rotate([0, 15*i, 0])\n                        cylinder(h=4, r=0.8);\n                    \n                    // Webbing between fingers\n                    if (i < 1) {\n                        translate([1.5*i, 2.5, -1])\n                            cube([3, 0.5, 1], center=true);\n                    }\n                }\n            }\n    }\n}\n\n// Decorative scales pattern\nmodule scales() {\n    for (z = [0:2]) {\n        for (a = [0:45:315]) {\n            translate([0, 0, 15 + z*5])\n                rotate([0, 0, a])\n                translate([10, 0, 0])\n                scale([0.5, 0.3, 0.2])\n                sphere(2);\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    translate([0, 0, 0])\n        cylinder(h=3, r=15);\n}\n\n// Assemble complete yacuruna\nunion() {\n    base();\n    yacuruna_body();\n    yacuruna_head();\n    fish_tail();\n    arm(1);  // Right arm\n    arm(-1); // Left arm\n    scales();\n}",
    "renders": true
  },
  {
    "household_item": "amabie",
    "openscad_code": "// Scales module\nmodule scales(count=12, radius=12, height=3, start_angle=-90, end_angle=90) {\n    for (i = [0:count-1]) {\n        angle = start_angle + i*(end_angle-start_angle)/(count-1);\n        translate([radius*cos(angle), radius*sin(angle), 0])\n            rotate([0, 0, angle])\n            scale([0.8, 0.4, 1])\n            sphere(height, $fn=6);\n    }\n}\n\n// Fish tail\nmodule fish_tail() {\n    difference() {\n        // Main tail\n        translate([0, 0, 8])\n        rotate([90, 0, 0])\n        scale([1, 0.3, 1.5])\n        cylinder(h=20, r1=10, r2=0, $fn=30);\n        \n        // Tail split\n        translate([0, 0, 8])\n        rotate([90, 0, 0])\n        cube([30, 1, 20], center=true);\n    }\n}\n\n// Main body\nmodule body() {\n    difference() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 1, 1.5])\n        sphere(15, $fn=40);\n        \n        // Neck hole\n        translate([0, 0, 25])\n        cylinder(h=10, r=5, $fn=20);\n        \n        // Arm sockets\n        translate([12, 0, 15])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=4, $fn=12);\n        translate([-12, 0, 15])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=4, $fn=12);\n    }\n}\n\n// Head\nmodule head() {\n    difference() {\n        // Main head\n        translate([0, 0, 30])\n        scale([0.8, 0.7, 1])\n        sphere(12, $fn=30);\n        \n        // Mouth\n        translate([0, -8, 28])\n        rotate([0, 0, 180])\n        cylinder(h=8, r1=4, r2=0, $fn=20);\n    }\n    \n    // Eyes\n    translate([4, -6, 32])\n    sphere(2, $fn=10);\n    translate([-4, -6, 32])\n    sphere(2, $fn=10);\n    \n    // Hair\n    for (i = [0:5]) {\n        angle = i*30;\n        translate([8*cos(angle), 8*sin(angle), 38])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=0.5, $fn=6);\n    }\n}\n\n// Arms with webbed hands\nmodule arm(side=1) {\n    translate([side*12, 0, 15])\n    rotate([0, 90, 0])\n    cylinder(h=10, r=4, $fn=12);\n    \n    // Hand\n    translate([side*20, 0, 15])\n    scale([1.5, 0.5, 1])\n    sphere(4, $fn=12);\n    \n    // Webbed fingers\n    rotate([0, 0, side*45])\n    for (i = [-1:1]) {\n        translate([side*22, i*3, 15])\n        rotate([0, 90, 0])\n        cylinder(h=6, r=0.8, $fn=6);\n    }\n}\n\n// Scales on body\nmodule body_scales() {\n    for (z = [10:5:25]) {\n        radius = 15 - (z-10)*0.3;\n        scales(count=16, radius=radius, height=2, start_angle=0, end_angle=360);\n        translate([0, 0, z])\n        scales(count=16, radius=radius, height=2, start_angle=0, end_angle=360);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body parts\n    body();\n    head();\n    arm(1);\n    arm(-1);\n    fish_tail();\n    \n    // Scales\n    body_scales();\n    \n    // Leg fins\n    translate([8, 0, 0])\n    rotate([0, 90, 0])\n    scale([1, 0.3, 1])\n    cylinder(h=12, r1=6, r2=2, $fn=20);\n    translate([-8, 0, 0])\n    rotate([0, 90, 0])\n    scale([1, 0.3, 1])\n    cylinder(h=12, r1=6, r2=2, $fn=20);\n}",
    "renders": true
  },
  {
    "household_item": "tsuchigumo",
    "openscad_code": "// Tsuchigumo - Medium complexity realistic style\n// A mythical spider-like yokai with humanoid torso and spider abdomen\n\n// Overall dimensions\ntotal_height = 60;\nbody_length = 40;\nbody_width = 30;\n\n// Spider abdomen\nmodule spider_abdomen() {\n    // Main abdomen sphere\n    translate([0, 0, 15]) {\n        scale([1.2, 1, 0.8]) sphere(d=body_length, $fn=32);\n    }\n    \n    // Abdomen segments\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([0, -body_width/3, 25 - i*5]) {\n                scale([1, 0.6, 0.3]) cylinder(h=5, d1=15, d2=12, $fn=8);\n            }\n        }\n    }\n    \n    // Spinneret\n    translate([0, 0, -5]) {\n        cylinder(h=8, d1=8, d2=5, $fn=16);\n    }\n}\n\n// Humanoid torso\nmodule humanoid_torso() {\n    translate([0, 0, 35]) {\n        // Chest\n        scale([0.8, 0.5, 1.2]) sphere(d=25, $fn=32);\n        \n        // Shoulders\n        translate([10, 0, 5]) sphere(d=10, $fn=16);\n        translate([-10, 0, 5]) sphere(d=10, $fn=16);\n    }\n}\n\n// Arms with spider features\nmodule arms() {\n    // Right arm\n    translate([15, 0, 40]) {\n        rotate([0, 0, -30]) {\n            // Upper arm\n            cylinder(h=15, d=6, $fn=12);\n            translate([0, 0, 15]) {\n                rotate([0, 90, 0]) {\n                    // Forearm with claw\n                    cylinder(h=12, d=5, $fn=12);\n                    translate([0, 0, 12]) {\n                        scale([0.5, 0.2, 2]) cube([10, 3, 8]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Left arm\n    mirror([1, 0, 0]) {\n        translate([15, 0, 40]) {\n            rotate([0, 0, -30]) {\n                cylinder(h=15, d=6, $fn=12);\n                translate([0, 0, 15]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=12, d=5, $fn=12);\n                        translate([0, 0, 12]) {\n                            scale([0.5, 0.2, 2]) cube([10, 3, 8]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Spider legs\nmodule spider_legs() {\n    for(side = [-1, 1]) {\n        for(i = [0:3]) {\n            angle = i * 45 + 22.5;\n            translate([0, 0, 20]) {\n                rotate([0, 0, side * angle]) {\n                    translate([body_width/2 * side, 0, 0]) {\n                        // Leg segments\n                        rotate([45, 0, 0]) {\n                            // Coxa\n                            cylinder(h=8, d=4, $fn=8);\n                            translate([0, 0, 8]) {\n                                rotate([30, 0, 0]) {\n                                    // Femur\n                                    cylinder(h=12, d=3, $fn=8);\n                                    translate([0, 0, 12]) {\n                                        rotate([20, 0, 0]) {\n                                            // Tibia\n                                            cylinder(h=15, d=2.5, $fn=8);\n                                            translate([0, 0, 15]) {\n                                                rotate([10, 0, 0]) {\n                                                    // Tarsus\n                                                    cylinder(h=10, d=2, $fn=8);\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Head with spider features\nmodule head() {\n    translate([0, 0, 50]) {\n        // Main head\n        scale([0.8, 0.7, 0.9]) sphere(d=18, $fn=32);\n        \n        // Eyes (8 eyes like a spider)\n        for(row = [0, 1]) {\n            for(col = [-1, 0, 1]) {\n                if(!(row == 1 && col == 0)) {\n                    translate([col * 6, -3 + row * 3, 7]) {\n                        sphere(d=2, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Mandibles\n        translate([5, -5, 2]) {\n            rotate([0, 30, 0]) {\n                cylinder(h=8, d1=3, d2=1, $fn=8);\n            }\n        }\n        translate([-5, -5, 2]) {\n            rotate([0, -30, 0]) {\n                cylinder(h=8, d1=3, d2=1, $fn=8);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    spider_abdomen();\n    humanoid_torso();\n    arms();\n    spider_legs();\n    head();\n}",
    "renders": true
  },
  {
    "household_item": "kuchisakeonna",
    "openscad_code": "// Kuchisake-onna (medium complexity, realistic style)\n// Woman with a Glasgow-smile mouth, wearing a surgical mask\n\n$fn = 36;                       // Smooth curves\nmask_lift = 15;                 // Degrees to tilt mask forward for printing\nwall = 2;                       // Wall thickness for 3D printing\n\nmodule head() {\n    // Main head sphere\n    sphere(d = 30);\n\n    // Jaw extension\n    translate([0, 0, -5])\n        scale([1, 1.2, 0.8])\n            sphere(d = 28);\n}\n\nmodule hair() {\n    // Back hair bulk\n    translate([0, 10, -5])\n        rotate([90, 0, 0])\n            cylinder(h = 30, d1 = 30, d2 = 35, center = true);\n    \n    // Bangs\n    for (x = [-10:5:10])\n        translate([x, 12, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 12, d = 6, $fn = 6);\n}\n\nmodule eyesockets() {\n    for (x = [-7, 7]) {\n        translate([x, 10, 3])\n            rotate([0, 90, 0])\n                cylinder(h = 15, d = 8);\n    }\n}\n\nmodule eyes() {\n    for (x = [-7, 7]) {\n        translate([x, 12, 3])\n            sphere(d = 6);\n    }\n}\n\nmodule nose() {\n    translate([0, 8, 0])\n        cylinder(h = 6, d1 = 6, d2 = 4);\n}\n\nmodule mouth_slit() {\n    // Glasgow smile: two diagonal cuts\n    for (angle = [30, -30]) {\n        rotate([0, 0, angle])\n            translate([0, 10, -3])\n                cube([30, 4, 10], center = true);\n    }\n}\n\nmodule mouth() {\n    // Standard mouth line\n    translate([0, 10, -3])\n        cube([20, 2, 3], center = true);\n}\n\nmodule surgical_mask() {\n    // Mask body\n    difference() {\n        translate([0, 5, 0])\n            rotate([mask_lift, 0, 0])\n                cube([35, 25, wall], center = true);\n\n        // Breathing gap (printable)\n        translate([0, 5, -wall/2])\n            rotate([mask_lift, 0, 0])\n                cube([30, 20, wall + 0.1], center = true);\n    }\n    \n    // Ear loops\n    for (x = [-17, 17]) {\n        translate([x, 10, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 15, d = 3);\n    }\n}\n\nmodule neck() {\n    translate([0, 0, -20])\n        cylinder(h = 20, d = 12);\n}\n\nmodule shoulders() {\n    translate([0, -5, -35])\n        cube([60, 30, 10], center = true);\n}\n\n// Build the figure\nunion() {\n    // Head assembly\n    difference() {\n        union() {\n            head();\n            hair();\n            nose();\n            mouth();\n        }\n        eyesockets();\n    }\n\n    // Facial features\n    eyes();\n\n    // Mask\n    surgical_mask();\n\n    // Body\n    neck();\n    shoulders();\n}",
    "renders": true
  },
  {
    "household_item": "hitotsume",
    "openscad_code": "// Hitotsume (one-eyed Japanese yokai) - Realistic medium-complexity model\n// Overall height ~80mm, printable without supports\n\n// Parameters\n$fn = 48;\nbody_h = 45;\nbody_w = 40;\nbody_d = 35;\nhead_r = 22;\neye_r = 12;\nhorn_len = 18;\nhorn_base = 8;\narm_len = 30;\narm_rad = 7;\nleg_len = 25;\nleg_rad = 9;\n\nmodule torso() {\n    // Main body - slightly pear-shaped\n    difference() {\n        union() {\n            // Upper torso\n            translate([0, 0, body_h/2])\n                scale([1, 0.9, 1.1])\n                cube([body_w, body_d, body_h], center=true);\n            // Lower belly bulge\n            translate([0, 0, body_h/4])\n                scale([1.2, 1.1, 0.8])\n                cube([body_w*0.9, body_d*0.9, body_h/2], center=true);\n        }\n        // Waist indentation\n        translate([0, 0, body_h*0.6])\n            scale([0.7, 0.8, 0.3])\n            cube([body_w*1.1, body_d*1.1, body_h/2], center=true);\n    }\n}\n\nmodule head() {\n    // Main head sphere\n    translate([0, 0, body_h + head_r*0.8])\n        sphere(r=head_r);\n    \n    // Eye socket\n    translate([0, head_r*0.7, body_h + head_r*0.9])\n        sphere(r=eye_r*1.1);\n    \n    // Central eye\n    color(\"red\")\n    translate([0, head_r*0.9, body_h + head_r*0.9])\n        sphere(r=eye_r);\n    \n    // Brow ridge\n    difference() {\n        translate([0, head_r*0.5, body_h + head_r*1.2])\n            sphere(r=head_r*1.05);\n        translate([0, head_r*0.8, body_h + head_r*1.2])\n            sphere(r=head_r*0.9);\n    }\n    \n    // Mouth\n    translate([0, head_r*0.8, body_h + head_r*0.2])\n        scale([1, 0.3, 0.5])\n        sphere(r=head_r*0.4);\n}\n\nmodule horn() {\n    // Curved horn\n    translate([0, 0, horn_len/2])\n        rotate([90, 0, 0])\n        cylinder(h=horn_len, r1=horn_base, r2=1, center=true);\n}\n\nmodule arms() {\n    // Left arm\n    translate([-body_w/2 - arm_rad/2, 0, body_h*0.7]) {\n        rotate([0, 0, 30])\n        rotate([90, 0, 0])\n        cylinder(h=arm_len, r=arm_rad);\n        \n        // Hand\n        translate([0, 0, arm_len])\n            sphere(r=arm_rad*1.2);\n    }\n    \n    // Right arm (mirrored)\n    mirror([1, 0, 0])\n    translate([-body_w/2 - arm_rad/2, 0, body_h*0.7]) {\n        rotate([0, 0, 30])\n        rotate([90, 0, 0])\n        cylinder(h=arm_len, r=arm_rad);\n        \n        translate([0, 0, arm_len])\n            sphere(r=arm_rad*1.2);\n    }\n}\n\nmodule legs() {\n    // Left leg\n    translate([-body_w/4, 0, -body_h/2]) {\n        rotate([90, 0, 0])\n        cylinder(h=leg_len, r=leg_rad);\n        \n        // Foot\n        translate([0, 0, leg_len])\n            scale([1.5, 2.5, 0.8])\n            sphere(r=leg_rad);\n    }\n    \n    // Right leg\n    translate([body_w/4, 0, -body_h/2]) {\n        rotate([90, 0, 0])\n        cylinder(h=leg_len, r=leg_rad);\n        \n        translate([0, 0, leg_len])\n            scale([1.5, 2.5, 0.8])\n            sphere(r=leg_rad);\n    }\n}\n\nmodule horns() {\n    // Central horn\n    translate([0, 0, body_h + head_r*2])\n        rotate([0, 0, 0])\n        horn();\n    \n    // Side horns\n    for(a = [-30, 30]) {\n        rotate([0, 0, a])\n        translate([head_r*0.6, 0, body_h + head_r*1.8])\n            rotate([0, 0, a/2])\n            scale([0.8, 0.8, 0.8])\n            horn();\n    }\n}\n\n// Assembly\nunion() {\n    torso();\n    head();\n    horns();\n    arms();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "rokurokubi",
    "openscad_code": "// Rokurokubi - Medium complexity realistic style\n// A female yokai whose neck stretches at night\n\n$fn = 32; // Smooth curves for realistic look\n\n// Overall scale - 80mm height\nscale_factor = 0.8;\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Head module with hollow interior\nmodule head() {\n    // Main head sphere\n    difference() {\n        sphere(12);\n        translate([0,0,2]) sphere(10.5); // Hollow\n    }\n    \n    // Neck socket\n    translate([0,0,-11]) \n        cylinder(h=3, r1=6, r2=4);\n    \n    // Face features\n    // Eyes\n    translate([-4, 9, 2]) sphere(1.5);\n    translate([4, 9, 2]) sphere(1.5);\n    \n    // Nose\n    translate([0, 8, 0]) \n        rotate([90,0,0]) cylinder(h=2, r=1.2);\n    \n    // Mouth\n    translate([0, 6, -3]) \n        rotate([0,90,0]) cylinder(h=0.5, r=2.5);\n    \n    // Hair bun\n    translate([0, -11, 6]) \n        scale([1.2,1.2,1]) sphere(5);\n    \n    // Long hair\n    for(i=[-1,1]) {\n        translate([i*8, -12, 0]) \n            rotate([i*10,0,0]) \n            cylinder(h=18, r=3, r2=2);\n    }\n}\n\n// Stretchable neck segments\nmodule neck_segment(h=8, r=5) {\n    // Segmented rings\n    for(i=[0:2]) {\n        translate([0,0,i*h/3]) \n            difference() {\n                cylinder(h=2, r=r);\n                cylinder(h=2.2, r=r-wall);\n            }\n    }\n    \n    // Connective tissue\n    translate([0,0,-1]) \n        cylinder(h=h+2, r=r-wall, r2=r-wall-0.5);\n}\n\n// Torso with kimono\nmodule torso() {\n    // Main body\n    difference() {\n        union() {\n            // Upper torso\n            cylinder(h=20, r1=10, r2=12);\n            // Lower torso\n            translate([0,0,20]) \n                cylinder(h=25, r1=12, r2=15);\n        }\n        // Hollow\n        translate([0,0,-1]) \n            cylinder(h=47, r1=8, r2=13);\n    }\n    \n    // Kimono collar\n    translate([0,0,18]) \n        difference() {\n            cylinder(h=3, r1=13, r2=14);\n            cylinder(h=3.2, r1=11, r2=12);\n        }\n    \n    // Obi belt\n    translate([0,0,28]) \n        difference() {\n            cylinder(h=6, r1=15, r2=16);\n            cylinder(h=6.2, r1=12.5, r2=13.5);\n        }\n    \n    // Sleeves\n    for(i=[-1,1]) {\n        translate([i*15, 0, 22]) \n            rotate([0,90,0]) \n            cylinder(h=10, r=6);\n    }\n}\n\n// Arms\nmodule arms() {\n    for(i=[-1,1]) {\n        translate([i*12, 8, 15]) {\n            // Shoulder\n            sphere(4);\n            \n            // Upper arm\n            rotate([0,0,i*-15]) {\n                translate([0,0,-6]) \n                    cylinder(h=12, r=2.5);\n                \n                // Elbow\n                translate([0,0,-12]) sphere(2);\n                \n                // Lower arm\n                rotate([0,0,i*-20]) {\n                    translate([0,0,-6]) \n                        cylinder(h=12, r=2);\n                    \n                    // Hand\n                    translate([0,0,-12]) sphere(2.5);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Head with neck\n    translate([0,0,45]) {\n        head();\n        \n        // Extended neck\n        translate([0,0,-11]) \n            for(i=[0:4]) {\n                translate([0,0,-i*3]) \n                    neck_segment(h=3, r=5-i*0.3);\n            }\n    }\n    \n    // Body\n    translate([0,0,0]) {\n        torso();\n        arms();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "nopperabo",
    "openscad_code": "// Nopperabo - realistic style, medium complexity\n// A traditional Japanese yokai with a featureless face\n\n// Overall dimensions\nbody_height = 65;\nhead_height = 30;\nhead_width = 25;\nshoulder_width = 35;\narm_length = 25;\nleg_length = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body module\nmodule body() {\n    // Torso - slightly tapered cylinder\n    translate([0, 0, leg_length]) \n        cylinder(h=body_height-leg_length, r1=shoulder_width/2, r2=shoulder_width/2-3, $fn=32);\n    \n    // Hips\n    translate([0, 0, leg_length-6]) \n        cylinder(h=8, r=shoulder_width/2-2, $fn=32);\n}\n\n// Head module - featureless face\nmodule head() {\n    // Main head shape - elongated sphere\n    translate([0, 0, body_height+leg_length-2]) \n        scale([1, 0.9, 1.2]) \n            sphere(r=head_width/2, $fn=32);\n    \n    // Back of head - slightly flattened\n    translate([0, -head_width/3, body_height+leg_length-2]) \n        scale([1, 0.7, 1.1]) \n            sphere(r=head_width/2, $fn=32);\n    \n    // Neck\n    translate([0, 0, body_height+leg_length-8]) \n        cylinder(h=6, r=head_width/3, $fn=16);\n}\n\n// Arms module\nmodule arms() {\n    // Left arm\n    translate([-shoulder_width/2-2, 0, leg_length+body_height*0.6]) {\n        rotate([0, 0, 20]) \n            cylinder(h=arm_length, r=3, $fn=16);\n        translate([0, 0, arm_length]) \n            sphere(r=3.5, $fn=16);\n    }\n    \n    // Right arm\n    translate([shoulder_width/2+2, 0, leg_length+body_height*0.6]) {\n        rotate([0, 0, -20]) \n            cylinder(h=arm_length, r=3, $fn=16);\n        translate([0, 0, arm_length]) \n            sphere(r=3.5, $fn=16);\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Left leg\n    translate([-shoulder_width/4, 0, 0]) {\n        cylinder(h=leg_length, r=4, $fn=16);\n        translate([0, 0, leg_length-1]) \n            sphere(r=5, $fn=16);\n    }\n    \n    // Right leg\n    translate([shoulder_width/4, 0, 0]) {\n        cylinder(h=leg_length, r=4, $fn=16);\n        translate([0, 0, leg_length-1]) \n            sphere(r=5, $fn=16);\n    }\n}\n\n// Traditional clothing details\nmodule clothing() {\n    // Collar rim\n    translate([0, 0, body_height+leg_length-10]) \n        difference() {\n            cylinder(h=4, r=head_width/2+2, $fn=32);\n            cylinder(h=5, r=head_width/2-2, $fn=32);\n        }\n    \n    // Obi (sash)\n    translate([0, 0, leg_length+body_height/2]) \n        difference() {\n            cylinder(h=6, r=shoulder_width/2+1, $fn=32);\n            cylinder(h=7, r=shoulder_width/2-3, $fn=32);\n        }\n    \n    // Hakama pleats (simplified)\n    for(i=[-1:1]) {\n        translate([i*8, 0, leg_length+10]) \n            cube([1, shoulder_width/2-2, 15], center=true);\n    }\n}\n\n// Hair details\nmodule hair() {\n    // Simple top knot\n    translate([0, 0, body_height+leg_length+head_height-5]) \n        cylinder(h=6, r=4, $fn=12);\n    \n    // Hair line at back\n    translate([0, -head_width/3, body_height+leg_length+head_height/2]) \n        rotate([90, 0, 0]) \n            cylinder(h=10, r=2, $fn=12);\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    arms();\n    legs();\n    clothing();\n    hair();\n}",
    "renders": true
  },
  {
    "household_item": "ittanmomen",
    "openscad_code": "// Ittan-momen (一反木綿) – a long, thin yōkai cloth spirit\n// Dimensions scaled for a 70 mm print length, 25 mm height, 3 mm thickness\n// All overhangs ≤ 45°, wall ≥ 1 mm, suitable for FDM printing\n\n// global parameters\ncloth_len = 70;      // overall length of the cloth\ncloth_w   = 25;      // height of the cloth\ncloth_t   = 3;       // thickness / depth\nedge_r    = 1.5;     // radius of rounded edges\nwave_num  = 5;       // number of gentle waves along the length\neye_size  = 3.5;     // diameter of eyes\nface_gap  = 12;      // distance between eye centers\nface_off  = 5;       // inset from front edge for face\n\nmodule rounded_edge_box(l, w, h, r) {\n    // create a box with rounded edges along length and width only\n    hull() {\n        for(dx = [r, l-r], dy = [r, w-r]) {\n            translate([dx, dy, r])\n                sphere(r);\n            translate([dx, dy, h-r])\n                sphere(r);\n        }\n    }\n}\n\nmodule wavy_cloth() {\n    // main cloth body with gentle sine-wave top edge\n    linear_extrude(height = cloth_t, center = true, convexity = 10)\n    polygon(\n        concat(\n            // bottom straight edge\n            [for(i=[0:cloth_len]) [i, 0]],\n            // top wavy edge\n            [for(i=[cloth_len:-1:0]) [i, cloth_w + 2*sin(i*360*wave_num/cloth_len)]]\n        )\n    );\n}\n\nmodule eye() {\n    // stylised eye: white sphere with black pupil\n    union() {\n        color(\"white\") sphere(d = eye_size);\n        color(\"black\") translate([0, 0, eye_size/2])\n            sphere(d = eye_size/2);\n    }\n}\n\nmodule face() {\n    // pair of eyes inset into cloth surface\n    translate([face_off, cloth_w/2 - face_gap/2, cloth_t/2])\n        eye();\n    translate([face_off, cloth_w/2 + face_gap/2, cloth_t/2])\n        eye();\n}\n\nmodule frayed_end() {\n    // simple fraying: thin vertical cuts at one end\n    difference() {\n        children();\n        for(i=[0:5])\n            translate([cloth_len - 10 + i*1.5, -1, 0])\n                cube([0.8, cloth_w+2, cloth_t+2]);\n    }\n}\n\n// --------------------  Assembly --------------------\nunion() {\n    // main cloth body\n    frayed_end()\n        wavy_cloth();\n\n    // facial features\n    face();\n}",
    "renders": true
  },
  {
    "household_item": "ikuchi",
    "openscad_code": "// Realistic Ikuchi (eel-sword) - medium complexity\n// A traditional Japanese sword with eel-inspired blade pattern\n\n// Parameters for sizing and printability\nblade_length = 75;\nblade_width = 20;\nblade_thickness = 3;\nhandle_length = 30;\nhandle_width = 12;\ntsuba_thickness = 4;\ntsuba_radius = 25;\n\n// Main assembly\nunion() {\n    // Blade\n    translate([0, 0, handle_length])\n    blade();\n    \n    // Tsuba (hand guard)\n    translate([0, 0, handle_length - 2])\n    tsuba();\n    \n    // Handle\n    handle();\n}\n\n// Blade module with eel-like pattern\nmodule blade() {\n    // Main blade body\n    difference() {\n        union() {\n            // Tapered blade shape\n            hull() {\n                translate([0, -blade_width/4, 0])\n                    cube([blade_thickness, blade_width/2, blade_length*0.3], center=true);\n                translate([0, -blade_width/8, blade_length*0.7])\n                    cube([blade_thickness, blade_width/4, blade_length*0.3], center=true);\n            }\n            \n            // Tip\n            translate([0, 0, blade_length*0.85])\n                rotate([90, 0, 0])\n                    cylinder(h=blade_length*0.15, r1=blade_width/8, r2=0.1, center=true);\n        }\n        \n        // Eel skin texture grooves\n        for(i = [1:3:blade_length-5]) {\n            translate([blade_thickness/2+0.1, 0, i])\n                rotate([90, 0, 0])\n                    cylinder(h=blade_thickness+0.2, r=0.5, center=true);\n        }\n        \n        // Fuller (blood groove)\n        translate([0, 0, blade_length/2])\n            cube([blade_thickness*0.7, blade_width/6, blade_length*0.8], center=true);\n    }\n}\n\n// Tsuba with wave pattern\nmodule tsuba() {\n    difference() {\n        // Main tsuba disc\n        cylinder(h=tsuba_thickness, r=tsuba_radius, center=true);\n        \n        // Handle hole\n        cylinder(h=tsuba_thickness+0.2, r=handle_width/2+1, center=true);\n        \n        // Wave cutouts\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n                translate([tsuba_radius*0.7, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=tsba_thickness*2, r1=3, r2=0.5, center=true);\n        }\n    }\n}\n\n// Handle with traditional wrapping\nmodule handle() {\n    difference() {\n        union() {\n            // Main handle core\n            cylinder(h=handle_length, r=handle_width/2, center=false);\n            \n            // Menuki (ornaments)\n            for(i = [0:1]) {\n                translate([handle_width/2*0.8, 0, handle_length*0.3 + i*handle_length*0.4])\n                    sphere(r=2);\n            }\n        }\n        \n        // Tsuka-ito wrapping grooves\n        for(i = [0:2:handle_length-4]) {\n            translate([0, 0, i])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_width+0.2, r=0.3, center=true);\n        }\n        \n        // Kashira (pommel) detail\n        translate([0, 0, -0.1])\n            cylinder(h=2, r=handle_width/2+1, center=false);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "umibozu",
    "openscad_code": "// Umibozu - Japanese Sea Spirit\n// Medium complexity realistic style\n\n// Overall dimensions\nscale_factor = 1;\ntotal_height = 80 * scale_factor;\nhead_height = 35 * scale_factor;\nbody_height = 45 * scale_factor;\nhead_diameter = 40 * scale_factor;\n\n// Wall thickness for 3D printing\nwall = 2 * scale_factor;\n\nmodule head() {\n    // Main head sphere with flattened top\n    difference() {\n        scale([1, 1, 0.9]) sphere(d=head_diameter, $fn=64);\n        translate([0, 0, head_height/2 - 2]) \n            cube([head_diameter+2, head_diameter+2, 4], center=true);\n    }\n    \n    // Eye sockets\n    for(x = [-head_diameter/5, head_diameter/5]) {\n        translate([x, -head_diameter/8, -head_diameter/4])\n            rotate([0, 30, 0])\n            difference() {\n                cylinder(h=head_diameter/3, d1=head_diameter/6, d2=head_diameter/8, $fn=32);\n                translate([0, 0, -1]) cylinder(h=head_diameter/3+2, d1=head_diameter/9, d2=head_diameter/12, $fn=32);\n            }\n    }\n    \n    // Nostril holes\n    for(x = [-head_diameter/12, head_diameter/12]) {\n        translate([x, -head_diameter/20, -head_diameter/3])\n            rotate([0, 20, 0])\n            cylinder(h=head_diameter/10, d=head_diameter/20, $fn=16);\n    }\n    \n    // Mouth line\n    translate([0, head_diameter/3, -head_diameter/3])\n        rotate([90, 0, 0])\n        scale([1.5, 0.3, 1])\n        cylinder(h=head_diameter/3, d=head_diameter/20, $fn=32);\n}\n\nmodule neck() {\n    // Cylindrical neck with slight taper\n    cylinder(h1=body_height/6, h2=body_height/5, r1=head_diameter/3, r2=head_diameter/2.5, $fn=32);\n}\n\nmodule body() {\n    // Main body - rounded cylinder\n    difference() {\n        cylinder(h=body_height*0.8, r1=head_diameter/2.5, r2=head_diameter/2.2, $fn=32);\n        \n        // Hollow out center\n        translate([0, 0, wall])\n            cylinder(h=body_height*0.8-wall*2, r1=head_diameter/2.5-wall, r2=head_diameter/2.2-wall, $fn=32);\n    }\n    \n    // Wave patterns around body\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, head_diameter/2.5 - wall, body_height/4])\n            scale([1, 0.3, 0.5])\n            sphere(d=head_diameter/8, $fn=16);\n    }\n    \n    // Base platform\n    translate([0, 0, -body_height*0.1])\n        cylinder(h=body_height*0.1, r=head_diameter/2, $fn=32);\n}\n\n// Assembly\ntranslate([0, 0, body_height*0.8 + head_height/2])\n    head();\n\ntranslate([0, 0, body_height*0.8])\n    neck();\n\ntranslate([0, 0, 0])\n    body();",
    "renders": true
  },
  {
    "household_item": "funayurei",
    "openscad_code": "// Funayurei - Ghost of the Sea (Medium Complexity Realistic Style)\n// 3D printable scale: ~70mm tall\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Basic parameters\nbody_height = 50 * scale_factor;\nbody_radius = 20 * scale_factor;\nhead_radius = 12 * scale_factor;\nhat_width = 30 * scale_factor;\nhat_height = 8 * scale_factor;\nboat_length = 55 * scale_factor;\nboat_width = 25 * scale_factor;\nboat_height = 10 * scale_factor;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5 * scale_factor;\n\n// Module for the ghostly white body\nmodule ghost_body() {\n    // Main torso\n    difference() {\n        cylinder(h=body_height, r=body_radius, $fn=32);\n        // Hollow out torso\n        translate([0, 0, wall_thickness])\n            cylinder(h=body_height-wall_thickness*2, r=body_radius-wall_thickness, $fn=32);\n    }\n    \n    // Tattered bottom edge\n    for(i=[0:15]) {\n        rotate([0, 0, i*24])\n            translate([body_radius-wall_thickness/2, 0, 0])\n                difference() {\n                    cube([wall_thickness*2, 5*scale_factor, 8*scale_factor]);\n                    translate([wall_thickness, 2.5*scale_factor, 4*scale_factor])\n                        sphere(r=3*scale_factor, $fn=16);\n                }\n    }\n}\n\n// Module for the ghostly head\nmodule ghost_head() {\n    // Main head sphere\n    difference() {\n        sphere(r=head_radius, $fn=32);\n        sphere(r=head_radius-wall_thickness, $fn=32);\n    }\n    \n    // Hollow eyes\n    for(x=[-head_radius/2, head_radius/2]) {\n        translate([x, head_radius/3, head_radius/2])\n            rotate([0, 90, 0])\n                cylinder(h=head_radius, r=head_radius/4, $fn=16);\n    }\n}\n\n// Traditional straw hat\nmodule straw_hat() {\n    difference() {\n        // Hat cone\n        cylinder(h1=hat_height, h2=0, r1=hat_width/2, r2=hat_width/4, $fn=32);\n        // Hollow inside\n        translate([0, 0, wall_thickness])\n            cylinder(h1=hat_height-wall_thickness, h2=0, r1=hat_width/2-wall_thickness, r2=hat_width/4-wall_thickness, $fn=32);\n    }\n    \n    // Hat brim\n    translate([0, 0, -wall_thickness])\n        difference() {\n            cylinder(h=wall_thickness*2, r=hat_width, $fn=32);\n            cylinder(h=wall_thickness*2, r=hat_width/2+wall_thickness, $fn=32);\n        }\n}\n\n// Traditional wooden boat (tub)\nmodule wooden_boat() {\n    // Main boat hull\n    difference() {\n        hull() {\n            // Boat shape from ellipses\n            translate([0, 0, boat_height/2])\n                scale([1, boat_width/boat_length, 1])\n                    sphere(r=boat_length/2, $fn=32);\n            translate([0, 0, -boat_height/2])\n                cube([boat_length, boat_width, boat_height], center=true);\n        }\n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            hull() {\n                scale([1, (boat_width-wall_thickness*2)/boat_length, 1])\n                    sphere(r=boat_length/2-wall_thickness, $fn=32);\n                cube([boat_length-wall_thickness*2, boat_width-wall_thickness*2, boat_height], center=true);\n            }\n    }\n    \n    // Wooden planks texture (simplified)\n    for(i=[-2:2]) {\n        translate([i*boat_length/5, 0, boat_height-wall_thickness])\n            cube([boat_length/10, boat_width-wall_thickness*2, wall_thickness], center=true);\n    }\n}\n\n// Assemble the funayurei\ntranslate([0, 0, boat_height])\n    union() {\n        // Boat\n        wooden_boat();\n        \n        // Ghost figure\n        translate([0, 0, boat_height/2 + 5*scale_factor])\n            union() {\n                // Body\n                ghost_body();\n                \n                // Head with slight tilt\n                translate([0, 0, body_height + head_radius/2])\n                    rotate([10, 0, 5])\n                        ghost_head();\n                \n                // Hat\n                translate([0, 0, body_height + head_radius + hat_height/2])\n                    rotate([10, 0, 5])\n                        straw_hat();\n            }\n    }",
    "renders": true
  },
  {
    "household_item": "gashadokuro",
    "openscad_code": "// Gashadokuro - Medium Complexity Realistic Style OpenSCAD Model\n// Size: ~80mm tall, 3D printable with no overhangs\n\n$fn = 32;  // Smooth curves\n\n// Main module to create the complete gashadokuro\nmodule gashadokuro() {\n    // Scale entire model to 80mm height\n    scale(0.8) {\n        // Head\n        head();\n        \n        // Torso\n        torso();\n        \n        // Arms\n        left_arm();\n        right_arm();\n        \n        // Legs\n        left_leg();\n        right_leg();\n    }\n}\n\n// Skull head with realistic features\nmodule head() {\n    translate([0, 0, 65]) {\n        // Main skull\n        difference() {\n            sphere(12);\n            \n            // Eye sockets\n            translate([-5, 8, 3]) rotate([0, 15, 0]) sphere(4);\n            translate([5, 8, 3]) rotate([0, -15, 0]) sphere(4);\n            \n            // Nasal cavity\n            translate([0, 10, -2]) rotate([90, 0, 0]) cylinder(h=8, r=3);\n            \n            // Jaw separation\n            translate([0, 4, -9]) cube([20, 8, 5], center=true);\n        }\n        \n        // Jaw bone\n        translate([0, 0, -10]) {\n            difference() {\n                cube([12, 10, 6], center=true);\n                translate([0, -5, 0]) cube([14, 12, 8], center=true);\n            }\n        }\n        \n        // Teeth\n        for(i = [-4:2:4]) {\n            translate([i, 4, -12]) cube([1.5, 2, 3], center=true);\n        }\n    }\n}\n\n// Ribcage torso\nmodule torso() {\n    // Spine\n    for(i = [0:3:15]) {\n        translate([0, 0, 50-i]) cylinder(h=3, r=2);\n    }\n    \n    // Ribcage\n    for(i = [0:4:16]) {\n        translate([0, 0, 50-i]) {\n            // Left ribs\n            rotate([0, 0, 15]) cube([12, 2, 1.5]);\n            rotate([0, 0, 45]) cube([10, 2, 1.5]);\n            \n            // Right ribs\n            rotate([0, 0, -15]) cube([12, 2, 1.5]);\n            rotate([0, 0, -45]) cube([10, 2, 1.5]);\n        }\n    }\n    \n    // Pelvis\n    translate([0, 0, 33]) {\n        difference() {\n            cube([20, 10, 8], center=true);\n            translate([0, 5, 0]) cube([22, 12, 10], center=true);\n        }\n    }\n}\n\n// Left arm assembly\nmodule left_arm() {\n    translate([-15, 0, 45]) {\n        // Shoulder blade\n        rotate([0, 0, 30]) cube([8, 3, 12]);\n        \n        // Upper arm\n        translate([0, 0, -8]) rotate([0, 15, 0]) cylinder(h=20, r=3);\n        \n        // Elbow joint\n        translate([0, 0, -28]) sphere(3);\n        \n        // Lower arm\n        translate([0, 0, -35]) rotate([0, -15, 0]) cylinder(h=18, r=2.5);\n        \n        // Hand\n        translate([0, 0, -48]) {\n            // Palm\n            cube([6, 3, 8], center=true);\n            \n            // Fingers\n            for(f = [-2:2:2]) {\n                translate([f, 0, -5]) cube([1, 2, 4]);\n            }\n        }\n    }\n}\n\n// Right arm assembly (mirror of left)\nmodule right_arm() {\n    mirror([1, 0, 0]) left_arm();\n}\n\n// Left leg assembly\nmodule left_leg() {\n    translate([-5, 0, 25]) {\n        // Hip joint\n        sphere(4);\n        \n        // Upper leg\n        translate([0, 0, -15]) cylinder(h=20, r=3.5);\n        \n        // Knee\n        translate([0, 0, -30]) sphere(3.5);\n        \n        // Lower leg\n        translate([0, 0, -45]) cylinder(h=18, r=3);\n        \n        // Ankle\n        translate([0, 0, -58]) sphere(3);\n        \n        // Foot\n        translate([0, 3, -65]) cube([8, 6, 4], center=true);\n    }\n}\n\n// Right leg assembly (mirror of left)\nmodule right_leg() {\n    mirror([1, 0, 0]) left_leg();\n}\n\n// Generate the model\ngashadokuro();",
    "renders": true
  },
  {
    "household_item": "tenome",
    "openscad_code": "// Tenome - A creature with eyes on its palms\n// Medium complexity realistic style\n\n// Parameters\nhand_width = 35;\nhand_length = 70;\nhand_thickness = 12;\nfinger_length = 45;\nfinger_width = 8;\nfinger_thickness = 9;\npalm_eye_diameter = 12;\npalm_eye_depth = 3;\nwrist_diameter = 20;\nwrist_length = 40;\n\n// Main hand with palm eye\nmodule hand_with_eye() {\n    difference() {\n        // Palm base\n        translate([0, 0, 0])\n            cube([hand_width, hand_length, hand_thickness], center=true);\n        \n        // Palm eye socket\n        translate([0, hand_length/4, hand_thickness/2])\n            sphere(d=palm_eye_diameter + 2, $fn=32);\n        \n        // Eye iris hole\n        translate([0, hand_length/4, hand_thickness/2 + 1])\n            cylinder(h=palm_eye_depth + 2, d=palm_eye_diameter/2, $fn=32);\n    }\n    \n    // Eyeball\n    translate([0, hand_length/4, hand_thickness/2 - palm_eye_depth/2])\n        sphere(d=palm_eye_diameter, $fn=32);\n    \n    // Iris\n    color(\"black\")\n    translate([0, hand_length/4, hand_thickness/2])\n        cylinder(h=0.5, d=palm_eye_diameter/2, $fn=32);\n    \n    // Pupil\n    color(\"black\")\n    translate([0, hand_length/4, hand_thickness/2 + 0.5])\n        sphere(d=palm_eye_diameter/4, $fn=16);\n}\n\n// Finger with nail\nmodule finger(pos_x, pos_y, angle, length_mult=1) {\n    translate([pos_x, pos_y, 0])\n    rotate([0, 0, angle])\n    union() {\n        // Finger base\n        translate([0, finger_length/2 * length_mult, 0])\n            cube([finger_width, finger_length * length_mult, finger_thickness], center=true);\n        \n        // Finger tip rounding\n        translate([0, finger_length * length_mult, 0])\n            sphere(d=finger_width, $fn=16);\n        \n        // Fingernail\n        difference() {\n            translate([0, finger_length * length_mult + finger_width/2, finger_thickness/2 - 0.5])\n                cube([finger_width * 0.8, finger_width, 1], center=true);\n            \n            // Nail curve\n            translate([0, finger_length * length_mult + finger_width/2, finger_thickness/2])\n                sphere(d=finger_width * 0.7, $fn=16);\n        }\n    }\n}\n\n// Wrist\nmodule wrist() {\n    cylinder(h=wrist_length, d=wrist_diameter, $fn=32);\n    \n    // Wrist details\n    for(i=[1:3]) {\n        translate([0, 0, i * 10])\n            difference() {\n                cylinder(h=2, d=wrist_diameter + 2, $fn=32);\n                cylinder(h=3, d=wrist_diameter - 2, $fn=32);\n            }\n    }\n}\n\n// Assembly\ntranslate([0, -hand_length/2 - 10, 0])\nrotate([90, 0, 0])\nunion() {\n    // Main hand\n    hand_with_eye();\n    \n    // Thumb\n    finger(-hand_width/2 + 5, -hand_length/2, 30);\n    \n    // Fingers\n    finger(-hand_width/2 + 10, hand_length - 5, -15);\n    finger(-hand_width/4, hand_length, -10);\n    finger(0, hand_length + 5, -5);\n    finger(hand_width/4, hand_length, 0);\n    \n    // Wrist attachment\n    translate([0, -hand_length/2 - wrist_length/2, 0])\n        wrist();\n}",
    "renders": true
  },
  {
    "household_item": "kamaitachi",
    "openscad_code": "// Kamaitachi - medium complexity realistic style\n// Wind spirit with sickle-like claws\n\n// Overall dimensions\nscale = 0.4;  // Scale factor for print size (50-100mm)\n\n// Body module\nmodule body() {\n    hull() {\n        // Torso\n        translate([0, 0, 10]) \n            scale([1.2, 0.8, 1.5]) \n                sphere(8);\n        \n        // Lower body\n        translate([0, 0, -5]) \n            scale([1, 0.7, 1.2]) \n                sphere(7);\n    }\n}\n\n// Head module\nmodule head() {\n    // Main head\n    translate([0, 0, 28]) \n        scale([1, 0.9, 1.1]) \n            sphere(10);\n    \n    // Snout\n    translate([12, 0, 26]) \n        scale([1.5, 0.6, 0.6]) \n            sphere(5);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([side * 8, 0, 35]) \n            rotate([0, side * 15, 0]) \n                scale([0.3, 2, 0.5]) \n                    cylinder(8, 3, 1);\n    }\n}\n\n// Eye module\nmodule eye(side) {\n    translate([side * 6, 8, 28]) {\n        // Eye socket\n        difference() {\n            sphere(3);\n            translate([0, 1, 0]) \n                sphere(2.5);\n        }\n        \n        // Pupil\n        translate([0, 1.5, 0]) \n            color(\"black\") \n                sphere(1);\n    }\n}\n\n// Claw module\nmodule claw() {\n    // Sickle blade\n    translate([0, 0, 0]) {\n        rotate([0, 90, 0]) \n            linear_extrude(height = 0.5) {\n                polygon(points=[\n                    [0,0], [20,0], [18,2], [15,3], [10,4], [5,3], [2,1], [0,0]\n                ]);\n            }\n        \n        // Blade thickness\n        translate([0, 0, -0.5]) \n            rotate([0, 90, 0]) \n                linear_extrude(height = 1) {\n                    polygon(points=[\n                        [0,0], [20,0], [18,2], [15,3], [10,4], [5,3], [2,1], [0,0]\n                    ]);\n                }\n    }\n    \n    // Handle connection\n    translate([-3, 0, 0]) \n        cylinder(3, 2, 2);\n}\n\n// Leg module\nmodule leg(side, front) {\n    translate([side * 8, front * 10, 0]) {\n        // Upper leg\n        rotate([90, 0, 0]) \n            cylinder(12, 3, 2.5);\n        \n        // Lower leg\n        translate([0, 0, 12]) {\n            rotate([90, 0, 0]) \n                cylinder(10, 2.5, 2);\n            \n            // Paw\n            translate([0, 0, 10]) \n                scale([1.2, 1, 0.8]) \n                    sphere(3);\n        }\n        \n        // Claw attachment\n        translate([0, side * 5, 8]) {\n            rotate([0, 90, 0]) \n                claw();\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    // Segments\n    for(i = [0:3]) {\n        translate([-12 - i * 5, 0, 5 - i * 2]) \n            scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.2]) \n                sphere(5 - i);\n    }\n}\n\n// Fur texture\nmodule fur_texture() {\n    for(i = [0:20]) {\n        rotate([0, 0, i * 18]) \n            translate([sin(i * 73) * 5, cos(i * 73) * 5, 0]) \n                cylinder(1, 0.5, 0);\n    }\n}\n\n// Main assembly\nscale(scale) {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Eyes\n    eye(1);\n    eye(-1);\n    \n    // Legs with claws\n    leg(1, 1);   // Front right\n    leg(-1, 1);  // Front left\n    leg(1, -1);  // Rear right\n    leg(-1, -1); // Rear left\n    \n    // Tail\n    tail();\n    \n    // Fur details on back\n    translate([0, 0, 15]) \n        fur_texture();\n}",
    "renders": true
  },
  {
    "household_item": "komainu",
    "openscad_code": "// Komainu (guardian dog) - medium complexity realistic style\n// Overall size: 60mm x 40mm x 45mm\n\nmodule body() {\n    // Main torso\n    union() {\n        // Chest and back\n        hull() {\n            translate([-20, -15, 0]) sphere(d=25);\n            translate([10, -15, 0]) sphere(d=25);\n            translate([-20, 15, 0]) sphere(d=25);\n            translate([10, 15, 0]) sphere(d=25);\n        }\n        \n        // Belly\n        translate([-5, 0, -15]) scale([1.5, 1.2, 0.8]) sphere(d=20);\n    }\n}\n\nmodule head() {\n    // Main head shape\n    union() {\n        // Skull\n        translate([15, 0, 25]) scale([1.2, 1, 1]) sphere(d=25);\n        \n        // Snout\n        translate([25, 0, 20]) scale([1.5, 0.8, 0.9]) sphere(d=15);\n        \n        // Jaw\n        translate([22, 0, 12]) scale([1.3, 0.7, 0.5]) sphere(d=15);\n    }\n}\n\nmodule ears() {\n    // Left ear\n    translate([10, -15, 35]) rotate([0, -20, -30]) \n        scale([0.3, 1.5, 2]) sphere(d=10);\n    \n    // Right ear\n    translate([10, 15, 35]) rotate([0, -20, 30]) \n        scale([0.3, 1.5, 2]) sphere(d=10);\n}\n\nmodule mane() {\n    // Create mane with cylinders around neck\n    for(i = [0:30:330]) {\n        rotate([0, 0, i]) translate([0, 12, 22])\n            rotate([90, 0, 0]) cylinder(h=8, d1=6, d2=3);\n    }\n}\n\nmodule legs() {\n    // Front left leg\n    translate([5, -12, 0]) {\n        rotate([0, -10, 0]) \n            cylinder(h=20, d1=12, d2=10);\n    }\n    \n    // Front right leg\n    translate([5, 12, 0]) {\n        rotate([0, -10, 0]) \n            cylinder(h=20, d1=12, d2=10);\n    }\n    \n    // Back left leg\n    translate([-15, -10, 0]) {\n        rotate([0, 10, 0]) \n            cylinder(h=18, d1=12, d2=10);\n    }\n    \n    // Back right leg\n    translate([-15, 10, 0]) {\n        rotate([0, 10, 0]) \n            cylinder(h=18, d1=12, d2=10);\n    }\n}\n\nmodule tail() {\n    // Curved tail\n    hull() {\n        translate([-22, 0, 8]) sphere(d=8);\n        translate([-25, 10, 12]) sphere(d=7);\n        translate([-20, 15, 15]) sphere(d=6);\n    }\n}\n\nmodule face_details() {\n    // Eyes\n    translate([23, -5, 25]) sphere(d=4);\n    translate([23, 5, 25]) sphere(d=4);\n    \n    // Nose\n    translate([30, 0, 20]) sphere(d=5);\n    \n    // Mouth line\n    translate([27, 0, 15]) rotate([0, 90, 0]) \n        cylinder(h=8, d=2);\n    \n    // Teeth\n    for(i = [-3:3]) {\n        translate([28, i*2, 13]) cube([2, 1, 2]);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    ears();\n    mane();\n    legs();\n    tail();\n    face_details();\n}\n\n// Base platform for stability\ntranslate([-30, -20, -5]) cube([60, 40, 5]);",
    "renders": true
  },
  {
    "household_item": "shisa",
    "openscad_code": "// Realistic Shisa for 3D printing\n// Medium complexity, about 100 lines\n// Overall height ~80 mm\n\n$fn = 36;\n\nmodule mane_spike(len=10, thick=2) {\n    cylinder(h=len, d1=thick*2, d2=thick, $fn=8);\n}\n\nmodule mane_ring(n=8, radius=15, spike_len=10) {\n    for(i=[0:n-1]) {\n        rotate([0,0,i*360/n])\n            translate([radius,0,spike_len/2])\n                rotate([90,0,0])\n                    mane_spike(spike_len);\n    }\n}\n\nmodule head() {\n    // skull base\n    translate([0,0,16])\n        scale([1,0.9,1])\n            sphere(d=32);\n\n    // snout\n    translate([0,-18,8])\n        scale([1.2,1.8,0.8])\n            sphere(d=20);\n\n    // lower jaw\n    difference() {\n        translate([0,-22,2])\n            scale([0.9,1.2,0.5])\n                sphere(d=20);\n        translate([0,-28,2])\n            cube([18,15,6], center=true);\n    }\n\n    // nose\n    translate([0,-28,11])\n        sphere(d=4);\n\n    // eyes\n    for(x=[-1,1]) {\n        translate([x*7,-6,20]) {\n            sphere(d=8);\n            translate([0,0,3])\n                sphere(d=4);\n        }\n    }\n\n    // ears\n    for(x=[-1,1]) {\n        translate([x*12,0,28])\n            rotate([0,0,x*30])\n                scale([0.3,1,1])\n                    cylinder(h=12, d1=6, d2=2);\n    }\n\n    // mane\n    mane_ring(n=8, radius=14, spike_len=10);\n    translate([0,0,8]) mane_ring(n=8, radius=16, spike_len=8);\n    translate([0,0,16]) mane_ring(n=8, radius=18, spike_len=6);\n}\n\nmodule body() {\n    // torso\n    translate([0,0,-12])\n        scale([1,0.7,1.2])\n            sphere(d=35);\n\n    // chest\n    translate([0,-8,-8])\n        scale([0.8,0.6,1])\n            sphere(d=25);\n\n    // front legs\n    for(x=[-1,1]) {\n        translate([x*10,-8,-28])\n            rotate([0,x*5,0])\n                scale([0.4,0.4,1])\n                    cylinder(h=20, d=12);\n    }\n\n    // back legs\n    for(x=[-1,1]) {\n        translate([x*8,8,-28])\n            rotate([0,x*(-5),0])\n                scale([0.4,0.4,1])\n                    cylinder(h=20, d=12);\n    }\n\n    // tail curl\n    difference() {\n        translate([0,18,-12])\n            rotate([90,0,0])\n                torus(10, 3, $fn=32);\n        translate([0,18,-18])\n            cube([30,20,8], center=true);\n    }\n}\n\nmodule torus(major, minor, $fn=32) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r=minor);\n}\n\n// assemble the shisa\nunion() {\n    head();\n    body();\n}",
    "renders": true
  },
  {
    "household_item": "foo",
    "openscad_code": "// Realistic Foo – 3D-printable collectible figure\n// Overall footprint: 60 mm × 55 mm × 90 mm (fits most FDM printers)\n\n$fn = 36;          // Global smoothness\n\n// ---- PARAMETERS ----------------------------------------------------\nbody_h  = 60;      // Main cylindrical body height\nbody_r  = 25;      // Body radius\nhead_r  = 22;      // Head sphere radius\nleg_h   = 15;      // Leg cylinder height\nleg_r   = 7;       // Leg radius\narm_len = 18;      // Arm length\narm_r   = 6;       // Arm radius\near_r   = 7;       // Ear sphere radius\ntail_len= 30;      // Tail length\ntail_r  = 4;       // Tail radius\nwall_t  = 2;       // Minimum wall thickness for printing\n\n// ---- MAIN ASSEMBLY --------------------------------------------------\nunion() {\n    body();\n    head();\n    ears();\n    arms();\n    legs();\n    tail();\n}\n\n// ---- MODULES --------------------------------------------------------\nmodule body() {\n    // Hollow cylinder for light weight and proper walls\n    difference() {\n        cylinder(h = body_h, r = body_r, center = true);\n        translate([0,0,-1])\n            cylinder(h = body_h+2, r = body_r-wall_t, center = true);\n    }\n    // Optional bottom plate to close the body\n    translate([0,0,-body_h/2-0.1])\n        cylinder(h = wall_t, r = body_r, center = false);\n}\n\nmodule head() {\n    translate([0,0,body_h/2+head_r-2])\n        sphere(r = head_r);\n}\n\nmodule ears() {\n    // Position ears symmetrically on top of head\n    for(side = [-1,1])\n        translate([side*head_r*0.7, 0, body_h/2+head_r*1.7])\n            sphere(r = ear_r);\n}\n\nmodule arms() {\n    for(side = [-1,1])\n        translate([side*(body_r+arm_r-4), 0, body_h/2]) {\n            rotate([0, 90, 0])\n                cylinder(h = arm_len, r = arm_r, center = true);\n            // Simple hand sphere\n            translate([arm_len/2,0,0])\n                sphere(r = arm_r*0.9);\n        }\n}\n\nmodule legs() {\n    for(side = [-1,1])\n        translate([side*(body_r-leg_r-2), 0, -body_h/2-leg_h/2]) {\n            cylinder(h = leg_h, r = leg_r, center = true);\n            // Foot\n            translate([0,0,-leg_h/2])\n                scale([1.3,1.3,0.5])\n                    sphere(r = leg_r);\n        }\n}\n\nmodule tail() {\n    translate([-body_r,0,-body_h/4])\n        rotate([0, -30, 0])\n            cylinder(h = tail_len, r = tail_r, center = false);\n    // Tail tuft\n    translate([-body_r-tail_len,0,-body_h/4])\n        sphere(r = tail_r*1.5);\n}",
    "renders": true
  },
  {
    "household_item": "shishi",
    "openscad_code": "// Shishi Lion Dog - Realistic Medium Complexity\n// Overall size: 80mm x 60mm x 70mm\n\n$fn = 36;\n\nmodule shishi() {\n    // Body - main torso\n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 0.8, 1])\n            sphere(r=20);\n        \n        // Chest\n        translate([20, 0, 15])\n            scale([1.3, 1, 0.8])\n            sphere(r=18);\n        \n        // Back\n        translate([-15, 0, 25])\n            scale([1, 0.9, 1.1])\n            sphere(r=15);\n    }\n    \n    // Head\n    translate([25, 0, 50])\n    union() {\n        // Skull\n        scale([1.3, 1.1, 1.2])\n        sphere(r=15);\n        \n        // Snout\n        translate([15, 0, -5])\n            scale([1.2, 0.8, 0.6])\n            sphere(r=10);\n        \n        // Nose\n        translate([25, 0, -5])\n            scale([0.4, 0.6, 0.3])\n            sphere(r=5);\n        \n        // Eyes\n        for(x=[-1,1]) {\n            translate([10, x*8, 8])\n                sphere(r=3);\n            translate([10, x*8, 8])\n                sphere(r=2);\n        }\n        \n        // Ears\n        for(x=[-1,1]) {\n            translate([0, x*12, 15])\n                rotate([0, 20*x, 0])\n                scale([0.5, 2, 0.5])\n                cylinder(r1=5, r2=0, h=10);\n        }\n    }\n    \n    // Mane\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n        translate([15, 0, 40])\n            rotate([i/3, 0, 0])\n            scale([0.3, 1, 0.3])\n            cylinder(r1=3, r2=0, h=20);\n    }\n    \n    // Legs\n    for(x=[-1,1]) {\n        for(z=[-1,1]) {\n            translate([x*10, z*15, 10])\n                scale([0.8, 0.8, 1])\n                cylinder(r=6, h=20);\n            \n            // Paws\n            translate([x*10, z*15, 0])\n                scale([1.2, 1.2, 0.5])\n                sphere(r=6);\n        }\n    }\n    \n    // Tail\n    translate([-25, 0, 25])\n    union() {\n        // Tail base\n        cylinder(r=5, h=30);\n        \n        // Tail curl\n        for(i=[0:15:180]) {\n            rotate([0, 0, i])\n            translate([0, 0, 30-i/6])\n                sphere(r=4);\n        }\n        \n        // Tail tuft\n        translate([0, 0, 30])\n            sphere(r=8);\n    }\n    \n    // Decorative elements\n    // Bell\n    translate([0, 0, 35])\n    union() {\n        cylinder(r=4, h=6);\n        translate([0, 0, 3])\n            sphere(r=4);\n    }\n    \n    // Feet pads\n    for(x=[-1,1]) {\n        for(z=[-1,1]) {\n            translate([x*10, z*15, 0])\n            for(i=[0:90:270]) {\n                rotate([0, 0, i])\n                translate([3, 0, 0])\n                    scale([1.5, 0.5, 0.2])\n                    sphere(r=2);\n            }\n        }\n    }\n}\n\n// Generate the model\nshishi();",
    "renders": true
  },
  {
    "household_item": "bennu",
    "openscad_code": "// Bennu Asteroid Model - Medium Complexity\n// Based on NASA OSIRIS-REx mission data\n// Size: ~70mm diameter\n\n$fn = 32;\n\n// Main body module\nmodule bennu_body() {\n    difference() {\n        // Primary spherical body\n        sphere(d = 65);\n        \n        // Large northern crater\n        translate([0, 15, 25])\n            scale([1.2, 1.5, 0.7])\n            sphere(d = 25);\n        \n        // Equatorial ridge indentation\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 70, d1 = 68, d2 = 60, center = true);\n        \n        // Southern depression\n        translate([0, -10, -25])\n            scale([1.3, 1.1, 0.8])\n            sphere(d = 20);\n    }\n}\n\n// Boulder distribution module\nmodule surface_boulders() {\n    // Large boulder on north pole\n    translate([0, 10, 30])\n        rotate([15, 0, 20])\n        scale([1.2, 0.8, 1.5])\n        sphere(d = 8);\n    \n    // Medium boulders\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([20 + sin(i * 45) * 5, cos(i * 45) * 10, 25])\n            sphere(d = 4 + i % 3);\n    }\n    \n    // Southern boulder field\n    for (j = [0:5]) {\n        angle = j * 60 + 30;\n        rotate([0, 0, angle])\n        translate([15 + sin(angle) * 8, cos(angle) * 12, -20])\n            rotate([rand(), rand(), rand()])\n            sphere(d = 3 + j % 2);\n    }\n}\n\n// Neck/connector feature\nmodule neck_structure() {\n    translate([0, -5, 0])\n    rotate([0, 15, 0])\n    scale([0.6, 0.8, 1])\n    cylinder(h = 25, d1 = 35, d2 = 30, center = true);\n}\n\n// Surface texture with small craters\nmodule surface_craters() {\n    for (k = [0:11]) {\n        theta = k * 30;\n        phi = k * 50;\n        \n        rotate([theta, 0, phi])\n        translate([30 * sin(phi), 30 * cos(phi), 0])\n            sphere(d = 1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Core body\n    bennu_body();\n    \n    // Structural features\n    neck_structure();\n    \n    // Surface details\n    surface_boulders();\n    \n    // Additional cratering\n    surface_craters();\n    \n    // Small protrusions\n    translate([25, -5, 15])\n        sphere(d = 3);\n    translate([-20, 12, -10])\n        sphere(d = 2.5);\n    \n    // Equatorial bulge\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    scale([1.1, 1.3, 0.9])\n    cylinder(h = 5, d = 68, center = true);\n}\n\n// Base stand for 3D printing stability\ndifference() {\n    translate([0, 0, -35])\n        cylinder(h = 5, d = 50);\n    \n    translate([0, 0, -35])\n        cylinder(h = 6, d = 20);\n}",
    "renders": true
  },
  {
    "household_item": "apep",
    "openscad_code": "// Apep – 3D–printable serpent model\n// Total length ≈ 90 mm, max width ≈ 25 mm, max height ≈ 18 mm\n// All slopes ≤ 45°, wall thickness ≥ 1.2 mm\n\n$fn = 32;           // Overall smoothness\nwall = 1.2;         // Minimum printable wall thickness\n\nmodule segment(r_major, r_minor, length){\n    // One cylindrical body segment with rounded ends\n    // r_major = outer radius, r_minor = inner radius (hollow)\n    hull(){\n        translate([0,0,-length/2]) sphere(r_major);\n        translate([0,0, length/2]) sphere(r_major);\n    }\n    if (r_minor > 0)\n        difference(){\n            color(\"green\") cylinder(h = length + 2*r_major, r = r_major, center = true);\n            cylinder(h = length + 2.2*r_major, r = r_minor, center = true);\n        }\n}\n\nmodule fang(){\n    // Simple conical fang, 4 mm long\n    rotate([0,-90,0])\n        cylinder(h = 4, r1 = 1.2, r2 = 0.2);\n}\n\nmodule head(){\n    // Serpent head: elongated sphere with snout and mouth details\n    difference(){\n        scale([1.5,1,1]) sphere(10);\n        // Mouth cavity\n        translate([5,-6,0]) rotate([0,0,-30])\n            cube([15,12,5], center = true);\n    }\n    // Eyes (simple spheres)\n    translate([7,6,4]) sphere(2.5);\n    translate([7,6,-4]) sphere(2.5);\n    // Fangs\n    translate([9,-6, 3]) fang();\n    translate([9,-6,-3]) fang();\n}\n\nmodule body(){\n    // Build body from 12 progressively smaller segments\n    for (i = [0:11]){\n        angle = i * 15;                // gentle sinuous curve\n        radius = 12 - i * 0.7;\n        len = 8 - i * 0.3;\n        translate([i*7, 0, 0])\n            rotate([0, angle, 0])\n                segment(radius, radius - wall, len);\n    }\n}\n\nmodule hood(){\n    // Cobralike hood behind head\n    difference(){\n        scale([1,2.5,0.4]) sphere(12);\n        translate([-15,0,0]) cube([30,30,10], center = true);\n    }\n}\n\n// Assembly\nhead();\ntranslate([20,0,0]) hood();\ntranslate([25,0,0]) body();",
    "renders": true
  },
  {
    "household_item": "set",
    "openscad_code": "// Chess Set - Staunton-style pieces scaled for travel play\n// King height: 48 mm, fits on 100 mm board\n\n// Board\nmodule board() {\n    // Square size 12.5 mm, total 100 mm\n    square_size = 12.5;\n    thickness = 3;\n    \n    difference() {\n        // Base plate\n        cube([100, 100, thickness], center=true);\n        \n        // Cut squares pattern\n        for (x = [-3.5:1:3.5]) {\n            for (y = [-3.5:1:3.5]) {\n                if ((x + y) % 2 == 0) {\n                    translate([x * square_size, y * square_size, thickness/2 - 0.1])\n                        cube([square_size, square_size, thickness + 0.2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Common pawn base\nmodule piece_base(diameter, height) {\n    cylinder(h=height, d1=diameter, d2=diameter*0.9, $fn=32);\n}\n\n// Pawn\nmodule pawn() {\n    union() {\n        piece_base(8, 2);\n        \n        // Collar\n        translate([0, 0, 2])\n            cylinder(h=2, d=10, $fn=32);\n        \n        // Spherical head\n        translate([0, 0, 4])\n            sphere(d=10, $fn=32);\n        \n        // Top sphere\n        translate([0, 0, 9])\n            sphere(d=6, $fn=32);\n    }\n}\n\n// Rook\nmodule rook() {\n    union() {\n        piece_base(9, 3);\n        \n        // Crenellated top\n        translate([0, 0, 3])\n            cylinder(h=12, d=10, $fn=4);\n        \n        // Battlements\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([4.5, 0, 15])\n                    cube([2, 2, 3], center=true);\n        }\n        \n        // Top rim\n        translate([0, 0, 18])\n            cylinder(h=2, d=8, $fn=32);\n    }\n}\n\n// Bishop\nmodule bishop() {\n    union() {\n        piece_base(9, 3);\n        \n        // Tapered body\n        translate([0, 0, 3])\n            cylinder(h=15, d1=10, d2=7, $fn=32);\n        \n        // Collar\n        translate([0, 0, 18])\n            cylinder(h=2, d=9, $fn=32);\n        \n        // Mitre cut\n        difference() {\n            translate([0, 0, 20])\n                sphere(d=8, $fn=32);\n            translate([0, -2, 22])\n                rotate([45, 0, 0])\n                    cube([10, 10, 10], center=true);\n        }\n        \n        // Slot\n        translate([0, 0, 24])\n            cube([1, 3, 2], center=true);\n    }\n}\n\n// Knight\nmodule knight() {\n    union() {\n        piece_base(9, 3);\n        \n        // Horse neck\n        translate([0, 0, 3])\n            rotate([15, 0, 0])\n                cylinder(h=10, d1=10, d2=8, $fn=32);\n        \n        // Head\n        translate([-2, 0, 12])\n            rotate([15, 0, 30])\n                scale([1.2, 0.8, 0.8])\n                    sphere(d=8, $fn=32);\n        \n        // Ears\n        translate([-1, 2.5, 15])\n            rotate([30, 0, 0])\n                cylinder(h=3, d=2, $fn=16);\n        translate([-1, -2.5, 15])\n            rotate([30, 0, 0])\n                cylinder(h=3, d=2, $fn=16);\n        \n        // Mane detail\n        for (i = [0:30:150]) {\n            rotate([0, 0, i])\n                translate([-3, 0, 10])\n                    cube([0.5, 6, 0.5], center=true);\n        }\n    }\n}\n\n// Queen\nmodule queen() {\n    union() {\n        piece_base(10, 3);\n        \n        // Tapered body\n        translate([0, 0, 3])\n            cylinder(h=18, d1=11, d2=8, $fn=32);\n        \n        // Collar\n        translate([0, 0, 21])\n            cylinder(h=2, d=10, $fn=32);\n        \n        // Crown\n        translate([0, 0, 23])\n            sphere(d=9, $fn=32);\n        \n        // Points\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, 4, 27])\n                    cylinder(h=3, d=2, $fn=16);\n        }\n    }\n}\n\n// King\nmodule king() {\n    union() {\n        piece_base(10, 3);\n        \n        // Tapered body\n        translate([0, 0, 3])\n            cylinder(h=20, d1=11, d2=8, $fn=32);\n        \n        // Collar\n        translate([0, 0, 23])\n            cylinder(h=2, d=10, $fn=32);\n        \n        // Crown\n        translate([0, 0, 25])\n            sphere(d=9, $fn=32);\n        \n        // Cross\n        translate([0, 0, 29])\n            cube([1, 8, 3], center=true);\n        translate([0, 0, 31])\n            cube([6, 1, 5], center=true);\n    }\n}\n\n// Generate full set\n// Uncomment individual pieces for testing\n\n// Board\ntranslate([0, 0, -1.5])\n    board();\n\n// White pieces front row\ntranslate([-50, -50, 0])\n    rook();\ntranslate([-37.5, -50, 0])\n    knight();\ntranslate([-25, -50, 0])\n    bishop();\ntranslate([-12.5, -50, 0])\n    king();\ntranslate([0, -50, 0])\n    queen();\ntranslate([12.5, -50, 0])\n    bishop();\ntranslate([25, -50, 0])\n    knight();\ntranslate([37.5, -50, 0])\n    rook();\n\n// White pawns\nfor (x = [-43.75:12.5:43.75]) {\n    translate([x, -37.5, 0])\n        pawn();\n}\n\n// Black pieces front row\ntranslate([-50, 50, 0])\n    rotate([0, 0, 180])\n        rook();\ntranslate([-37.5, 50, 0])\n    rotate([0, 0, 180])\n        knight();\ntranslate([-25, 50, 0])\n    rotate([0, 0, 180])\n        bishop();\ntranslate([-12.5, 50, 0])\n    rotate([0, 0, 180])\n        king();\ntranslate([0, 50, 0])\n    rotate([0, 0, 180])\n        queen();\ntranslate([12.5, 50, 0])\n    rotate([0, 0, 180])\n        bishop();\ntranslate([25, 50, 0])\n    rotate([0, 0, 180])\n        knight();\ntranslate([37.5, 50, 0])\n    rotate([0, 0, 180])\n        rook();\n\n// Black pawns\nfor (x = [-43.75:12.5:43.75]) {\n    translate([x, 37.5, 0])\n        rotate([0, 0, 180])\n            pawn();\n}",
    "renders": true
  },
  {
    "household_item": "serpopard",
    "openscad_code": "// Serpopard - realistic medium complexity\n// A mythical leopard with elongated serpentine neck\n\n$fn = 32;\n\n// Overall dimensions\nbody_length = 60;\nbody_height = 25;\nneck_length = 45;\nneck_thickness = 8;\nhead_length = 20;\nhead_height = 12;\n\n// Build the serpopard\nunion() {\n    // Main body\n    translate([0, 0, body_height/2])\n        body();\n\n    // Neck - serpentine curve\n    neck_segments();\n\n    // Head\n    translate([neck_length + body_length/2, 0, body_height + 15])\n        rotate([0, 0, 30])\n        head();\n    \n    // Tail\n    translate([-body_length/2 - 10, 0, body_height/2])\n        rotate([0, 0, 180])\n        tail();\n    \n    // Legs\n    legs();\n}\n\nmodule body() {\n    // Leopard body with slight taper\n    hull() {\n        // Front shoulders\n        translate([body_length/3, 0, 0])\n            scale([1.2, 1.1, 1])\n            sphere(d=body_height);\n        \n        // Rear hips\n        translate([-body_length/3, 0, 0])\n            scale([1.3, 1.2, 0.9])\n            sphere(d=body_height);\n        \n        // Middle section\n        translate([0, 0, -body_height/4])\n            sphere(d=body_height * 0.8);\n    }\n    \n    // Spots pattern\n    spots();\n}\n\nmodule neck_segments() {\n    segments = 8;\n    for(i = [0:segments-1]) {\n        angle = -30 * sin(i * 180 / segments);\n        height = body_height + 5 + i * (neck_length/segments) * 0.3;\n        \n        translate([\n            body_length/2 + (i+0.5) * neck_length/segments, \n            0, \n            height\n        ])\n        rotate([angle, 0, 0])\n        cylinder(\n            h = neck_length/segments + 1, \n            d1 = neck_thickness * (1 - 0.3 * i/segments),\n            d2 = neck_thickness * (1 - 0.3 * (i+1)/segments),\n            center = true\n        );\n    }\n}\n\nmodule head() {\n    // Leopard head\n    union() {\n        // Main head shape\n        scale([1.3, 1, 1])\n        sphere(d=head_height);\n        \n        // Snout\n        translate([head_length/2, 0, -head_height/4])\n            scale([0.8, 0.7, 0.5])\n            sphere(d=head_height);\n        \n        // Ears\n        translate([-head_length/4, head_height/2, head_height/3])\n            rotate([30, 0, 45])\n            scale([0.3, 0.2, 0.4])\n            cylinder(h=head_height/2, d1=head_height/3, d2=0);\n        \n        translate([-head_length/4, -head_height/2, head_height/3])\n            rotate([30, 0, -45])\n            scale([0.3, 0.2, 0.4])\n            cylinder(h=head_height/2, d1=head_height/3, d2=0);\n        \n        // Eyes\n        translate([head_length/4, head_height/3, 0])\n            sphere(d=2);\n        \n        translate([head_length/4, -head_height/3, 0])\n            sphere(d=2);\n        \n        // Nose\n        translate([head_length/2 + 3, 0, -head_height/3])\n            sphere(d=1.5);\n    }\n}\n\nmodule tail() {\n    segments = 6;\n    for(i = [0:segments-1]) {\n        taper = 1 - i * 0.15;\n        curl = i * 10;\n        \n        translate([\n            -i * 5, \n            sin(curl) * i, \n            cos(curl) * i\n        ])\n        rotate([0, curl, 0])\n        cylinder(\n            h = 6, \n            d1 = body_height * 0.4 * taper,\n            d2 = body_height * 0.4 * taper * 0.9,\n            center = true\n        );\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([body_length/3, side * body_height/2, -body_height/2])\n            leg();\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([-body_length/3, side * body_height/2, -body_height/2])\n            leg();\n    }\n}\n\nmodule leg() {\n    // Upper leg\n    cylinder(h=body_height/2, d1=body_height/3, d2=body_height/4);\n    \n    // Lower leg\n    translate([0, 0, -body_height/2])\n        cylinder(h=body_height/2, d1=body_height/4, d2=body_height/5);\n    \n    // Paw\n    translate([0, 0, -body_height])\n        sphere(d=body_height/4);\n}\n\nmodule spots() {\n    // Leopard spots on body\n    for(i = [0:15]) {\n        angle = i * 45;\n        radius = body_height/3 * (0.5 + 0.5 * sin(i * 30));\n        \n        translate([\n            sin(angle) * radius, \n            cos(angle) * radius, \n            body_height/2\n        ])\n        sphere(d=2);\n    }\n}",
    "renders": true
  },
  {
    "household_item": "akhekh",
    "openscad_code": "// Akhekh - Egyptian serpent-lion hybrid creature\n// Realistic style, medium complexity\n\n// Basic parameters\nbody_length = 80;\nbody_height = 25;\nhead_size = 20;\ntail_segments = 8;\n\n// Serpentine body module\nmodule body() {\n    union() {\n        // Main body segments\n        for(i = [0:tail_segments-1]) {\n            translate([i*10, 0, sin(i*45)*5]) {\n                rotate([0, 0, i*10]) {\n                    // Ellipsoid body segments\n                    scale([1.5, 1, 0.8]) \n                        sphere(d=body_height - i*2, $fn=16);\n                }\n            }\n        }\n        \n        // Underbelly scales\n        for(j = [0:tail_segments*2]) {\n            translate([j*5, 0, -body_height/2 + 2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=2, d1=8-j*0.3, d2=6-j*0.3, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Lion head module\nmodule lion_head() {\n    translate([-head_size*2, 0, body_height/2]) {\n        union() {\n            // Main head shape\n            scale([1.2, 1, 1]) \n                sphere(d=head_size, $fn=32);\n            \n            // Muzzle\n            translate([-head_size/2, 0, -head_size/4]) {\n                scale([1, 0.8, 0.6]) \n                    sphere(d=head_size*0.8, $fn=24);\n            }\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([0, side*head_size/2, head_size/3]) {\n                    rotate([0, -20*side, 0]) {\n                        scale([0.3, 0.2, 0.4]) \n                            sphere(d=head_size, $fn=12);\n                    }\n                }\n            }\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([-head_size/3, side*head_size/3, head_size/4]) {\n                    sphere(d=3, $fn=8);\n                }\n            }\n            \n            // Nose\n            translate([-head_size*0.9, 0, -head_size/4]) {\n                sphere(d=4, $fn=8);\n            }\n        }\n    }\n}\n\n// Serpent crest and spines\nmodule crest() {\n    for(i = [0:tail_segments-1]) {\n        translate([i*10 - 15, 0, sin(i*45)*5 + body_height/2]) {\n            rotate([0, 0, i*10 + 90]) {\n                cylinder(h=2, d1=3, d2=1, $fn=8);\n            }\n        }\n    }\n}\n\n// Legs (lion forelegs)\nmodule legs() {\n    union() {\n        for(side = [-1, 1]) {\n            translate([-head_size*1.5, side*body_height/2, -body_height/2]) {\n                // Upper leg\n                cylinder(h=15, d=6, $fn=12);\n                \n                // Lower leg\n                translate([0, 0, -15]) {\n                    rotate([15, 0, 0]) {\n                        cylinder(h=12, d=5, $fn=12);\n                    }\n                }\n                \n                // Paw\n                translate([0, 0, -27]) {\n                    scale([1.2, 1, 0.6]) \n                        sphere(d=8, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    lion_head();\n    crest();\n    legs();\n}",
    "renders": true
  },
  {
    "household_item": "sekhmet",
    "openscad_code": "// Sekhmet - Medium complexity realistic style\n// Egyptian lioness goddess with human head\n\n$fn = 32;\n\nmodule mane() {\n    // Circular mane around head\n    rotate([90, 0, 0]) {\n        for(i = [0:15:359]) {\n            rotate([0, 0, i]) \n                translate([12, 0, 0]) \n                    scale([1, 0.5, 0.5]) \n                        sphere(8);\n        }\n    }\n}\n\nmodule lion_body() {\n    // Main lion body\n    union() {\n        // Torso\n        scale([1.5, 1, 1.2]) \n            sphere(20);\n        \n        // Chest\n        translate([0, -15, 5]) \n            scale([1.3, 0.8, 1.1]) \n                sphere(15);\n                \n        // Rear\n        translate([0, 15, 0]) \n            scale([1.2, 0.9, 1]) \n                sphere(12);\n    }\n}\n\nmodule legs() {\n    // Four legs\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side * 15, -15, -20]) {\n            rotate([15, 0, 0]) \n                cylinder(h = 30, r1 = 8, r2 = 6);\n            translate([0, 0, -30]) \n                sphere(6);\n        }\n        \n        // Rear legs\n        translate([side * 12, 15, -18]) {\n            rotate([15, 0, 0]) \n                cylinder(h = 28, r1 = 9, r2 = 7);\n            translate([0, 0, -28]) \n                sphere(7);\n        }\n    }\n}\n\nmodule tail() {\n    // Lion tail with tuft\n    hull() {\n        translate([0, 25, 5]) \n            sphere(3);\n        translate([0, 35, 10]) \n            sphere(3);\n    }\n    translate([0, 35, 10]) \n        scale([1, 1, 1.5]) \n            sphere(5);\n}\n\nmodule head() {\n    // Human head with lioness features\n    union() {\n        // Head base\n        scale([0.8, 0.9, 1.1]) \n            sphere(15);\n        \n        // Snout\n        translate([0, -18, -5]) {\n            scale([0.6, 1.2, 0.8]) \n                sphere(10);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 10]) {\n                rotate([0, side * 20, 0]) \n                    scale([0.3, 0.5, 1]) \n                        sphere(7);\n            }\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 6, -12, 5]) {\n                sphere(3);\n            }\n        }\n        \n        // Nose\n        translate([0, -20, -2]) \n            sphere(2);\n    }\n}\n\nmodule headdress() {\n    // Solar disk headdress\n    union() {\n        // Disk\n        translate([0, 0, 20]) {\n            rotate([90, 0, 0]) \n                cylinder(h = 3, r = 12);\n        }\n        \n        // Upright cobra\n        translate([0, -15, 25]) {\n            rotate([0, 10, 0]) \n                cylinder(h = 10, r1 = 3, r2 = 2);\n        }\n    }\n}\n\nmodule arms() {\n    // Human arms in prayer position\n    for(side = [-1, 1]) {\n        translate([side * 12, -5, 5]) {\n            rotate([0, 0, side * 45]) {\n                rotate([45, 0, 0]) \n                    cylinder(h = 20, r = 4);\n                translate([0, 0, 20]) {\n                    rotate([0, 0, side * -90]) {\n                        sphere(4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Position entire model\n    translate([0, 0, 30]) {\n        // Body\n        lion_body();\n        \n        // Legs\n        legs();\n        \n        // Tail\n        tail();\n        \n        // Head and features\n        translate([0, -8, 25]) {\n            head();\n            mane();\n            headdress();\n        }\n        \n        // Arms\n        arms();\n    }\n}",
    "renders": true
  },
  {
    "household_item": "ammut",
    "openscad_code": "// Ammut - Devourer of Hearts - Medium complexity realistic style\n// 3D printable model with separate parts for assembly\n\n// Overall dimensions: ~70mm long, ~40mm tall\n\n// Parameters for scaling and printing\n$fn = 32;               // Circle resolution\nscale_factor = 0.8;     // Overall scale for printing\nwall_thickness = 2;     // Wall thickness for hollow parts\n\n// Main module\nmodule ammut() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Crocodile head\n        translate([0, 0, 15]) \n        crocodile_head();\n        \n        // Lion body\n        translate([-25, 0, 8])\n        lion_body();\n        \n        // Hippopotamus legs\n        for(i = [-1, 1]) {\n            translate([i * 12, 0, 0])\n            hippo_legs();\n        }\n        \n        // Crocodile tail\n        translate([-45, 0, 8])\n        crocodile_tail();\n    }\n}\n\n// Crocodile head module\nmodule crocodile_head() {\n    // Main snout\n    difference() {\n        union() {\n            // Upper snout\n            translate([0, 0, 0])\n            scale([1, 0.8, 0.6])\n            sphere(d=20);\n            \n            // Lower jaw\n            translate([0, 0, -8])\n            scale([0.9, 0.7, 0.4])\n            sphere(d=18);\n            \n            // Snout extension\n            translate([12, 0, 0])\n            scale([1.5, 0.6, 0.4])\n            sphere(d=15);\n        }\n        \n        // Eye sockets\n        for(x = [-5, 5]) {\n            translate([x, 8, 2])\n            sphere(d=4);\n        }\n        \n        // Nostrils\n        for(x = [-2, 2]) {\n            translate([15, x, 0])\n            cylinder(h=3, d=2);\n        }\n    }\n    \n    // Teeth\n    for(i = [1:10]) {\n        angle = i * 20 - 100;\n        radius = 12;\n        translate([cos(angle) * radius, sin(angle) * radius, -10])\n        rotate([0, 0, angle])\n        cylinder(h=5, d1=2, d2=1);\n    }\n}\n\n// Lion body module\nmodule lion_body() {\n    // Main torso\n    difference() {\n        union() {\n            // Chest\n            translate([0, 0, 0])\n            scale([1.2, 1, 0.8])\n            sphere(d=25);\n            \n            // Abdomen\n            translate([-15, 0, -2])\n            scale([1, 0.9, 0.7])\n            sphere(d=20);\n        }\n        \n        // Leg holes\n        for(x = [-8, 8]) {\n            translate([x, 0, -12])\n            cylinder(h=15, d=8);\n        }\n    }\n    \n    // Mane (simplified as raised ridges)\n    for(i = [0:5]) {\n        rotate([0, 0, i * 30])\n        translate([0, 12, 5])\n        scale([0.3, 1, 0.5])\n        sphere(d=8);\n    }\n}\n\n// Hippopotamus legs module\nmodule hippo_legs() {\n    // Front leg\n    translate([0, -8, -10])\n    rotate([0, 10, 0])\n    cylinder(h=20, d1=10, d2=8);\n    \n    // Back leg\n    translate([-15, -6, -8])\n    rotate([0, -10, 0])\n    cylinder(h=18, d1=12, d2=10);\n    \n    // Feet\n    translate([0, -8, -20])\n    scale([1.2, 2, 0.5])\n    sphere(d=12);\n    \n    translate([-15, -6, -18])\n    scale([1.4, 2.2, 0.5])\n    sphere(d=14);\n}\n\n// Crocodile tail module\nmodule crocodile_tail() {\n    // Tail segments\n    for(i = [0:3]) {\n        translate([-50 - i * 10, 0, 8 - i * 2])\n        scale([1 - i * 0.15, 1 - i * 0.1, 1 - i * 0.1])\n        rotate([0, 0, sin(i * 30) * 10])\n        sphere(d=15 - i * 3);\n    }\n    \n    // Tail ridges\n    for(i = [0:4]) {\n        translate([-45 - i * 12, 0, 12 - i * 1.5])\n        rotate([90, 0, 0])\n        cylinder(h=8, d1=4, d2=2);\n    }\n}\n\n// Generate the model\nammut();",
    "renders": true
  },
  {
    "household_item": "uadjet",
    "openscad_code": "// Uadjet Eye (Eye of Horus) - Realistic Style, Medium Complexity\n// Overall dimensions: ~60mm wide x 35mm high x 8mm thick\n\n$fn = 36;\n\nmodule uadjet_eye() {\n    // Main eye outline - almond shape\n    difference() {\n        scale([1, 0.6, 1])\n            sphere(d = 50);\n        translate([0, 0, -5])\n            cube([60, 60, 10], center = true);\n    }\n    \n    // Upper eyelid curve\n    translate([0, 6, 2])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 20, d1 = 45, d2 = 40);\n            translate([0, 0, -1])\n                cylinder(h = 22, d1 = 42, d2 = 37);\n        }\n    \n    // Lower eyelid curve\n    translate([0, -6, 2])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 20, d1 = 40, d2 = 45);\n            translate([0, 0, -1])\n                cylinder(h = 22, d1 = 37, d2 = 42);\n        }\n    \n    // Iris - colored part\n    translate([0, 0, 3])\n        cylinder(h = 3, d = 25);\n    \n    // Pupil - black center\n    translate([0, 0, 5.5])\n        cylinder(h = 1.5, d = 12);\n    \n    // Eye corner detail (caruncle)\n    translate([-23, 0, 2])\n        sphere(d = 8);\n    \n    // Eyebrow - stylized falcon marking\n    translate([0, 15, 3])\n        rotate([0, 0, 20])\n        scale([1.2, 0.3, 1])\n        difference() {\n            sphere(d = 30);\n            translate([0, 0, -5])\n                cube([35, 35, 10], center = true);\n        }\n    \n    // Tear duct marking\n    translate([20, -5, 2])\n        rotate([0, 0, -30])\n        scale([0.8, 0.4, 1])\n        sphere(d = 12);\n    \n    // Falcon cheek markings\n    for(i = [1:3]) {\n        rotate([0, 0, -45 + i * 15])\n        translate([15 + i * 3, -15 + i * 2, 2])\n            scale([0.8 - i * 0.1, 0.3, 1])\n            sphere(d = 8 - i);\n    }\n    \n    // Hatching lines on iris\n    for(angle = [0:30:150]) {\n        rotate([0, 0, angle])\n        translate([0, 0, 4])\n        linear_extrude(height = 0.5)\n            square([12, 0.5], center = true);\n    }\n    \n    // Back plate for 3D printing stability\n    translate([0, 0, -4])\n        cube([55, 35, 2], center = true);\n}\n\n// Render the eye\nuadjet_eye();",
    "renders": true
  },
  {
    "household_item": "ba",
    "openscad_code": "// OpenSCAD 3D printable \"ba\" (bottle + cap) – 75 mm tall, no supports needed\n\n//------------ PARAMETERS -------------\nwall = 1.6;          // 0.4 mm nozzle friendly wall thickness\nbase_h = 8;          // base ring height\nbody_h = 45;         // main body height\nneck_h = 8;          // neck cylinder\ncap_h = 14;          // cap total height\ncap_thread_h = 6;    // threaded part inside cap\nd_major = 32;        // widest body Ø\nd_neck = 20;         // neck Ø\nthread_pitch = 2;    // thread pitch\n$fn = 48;            // smooth curves\n\n//------------ BODY MODULE -------------\nmodule bottle_body() {\n    difference() {\n        // main rounded body\n        union() {\n            translate([0, 0, base_h/2])\n                cylinder(h = base_h, d1 = d_major+2*wall, d2 = d_major+2*wall, center = true);\n\n            translate([0, 0, base_h+body_h/2])\n                cylinder(h = body_h, d1 = d_major+2*wall, d2 = d_major*0.85+2*wall, center = true);\n\n            translate([0, 0, base_h+body_h+neck_h/2])\n                cylinder(h = neck_h, d = d_neck+2*wall, center = true);\n        }\n\n        // hollow inside\n        union() {\n            translate([0, 0, base_h/2])\n                cylinder(h = base_h+2, d = d_major, center = true);\n\n            translate([0, 0, base_h+body_h/2])\n                cylinder(h = body_h+2, d1 = d_major, d2 = d_major*0.85, center = true);\n\n            translate([0, 0, base_h+body_h+neck_h/2])\n                cylinder(h = neck_h+2, d = d_neck, center = true);\n        }\n    }\n}\n\n//------------ NECK THREADS -------------\nmodule threads() {\n    // external threads on neck\n    for (i = [0 : thread_pitch : neck_h-thread_pitch]) {\n        translate([0, 0, base_h+body_h+i+thread_pitch/2])\n            rotate([0, 0, 0])\n                difference() {\n                    cylinder(h = thread_pitch+0.1, d = d_neck+2*wall+0.5, center=true);\n                    cylinder(h = thread_pitch+0.2, d = d_neck+2*wall-0.3, center=true);\n                }\n    }\n}\n\n//------------ CAP MODULE -------------\nmodule cap() {\n    difference() {\n        // outer cap shell\n        union() {\n            translate([0, 0, cap_h/2])\n                cylinder(h = cap_h, d = d_neck+2*wall+4, center = true);\n\n            // top dome\n            translate([0, 0, cap_h])\n                sphere(d = d_neck+2*wall+4);\n        }\n\n        // internal cavity\n        union() {\n            // main cavity\n            translate([0, 0, cap_h/2])\n                cylinder(h = cap_h+1, d = d_neck+2*wall+0.5, center = true);\n\n            // threaded section\n            translate([0, 0, cap_h-cap_thread_h/2])\n                cylinder(h = cap_thread_h+1, d = d_neck+2*wall+0.2, center = true);\n\n            // internal threads\n            for (i = [0 : thread_pitch : cap_thread_h-thread_pitch]) {\n                translate([0, 0, cap_h-cap_thread_h+i+thread_pitch/2])\n                    rotate([0, 0, 0])\n                        difference() {\n                            cylinder(h = thread_pitch+0.1, d = d_neck+2*wall+0.4, center=true);\n                            cylinder(h = thread_pitch+0.2, d = d_neck+2*wall-0.4, center=true);\n                        }\n            }\n        }\n    }\n}\n\n//------------ ASSEMBLY -------------\nbottle_body();\nthreads();\n\n// move cap above bottle for printing separately\ntranslate([0, 0, base_h+body_h+neck_h+cap_h/2+10])\n    rotate([0, 0, 0])\n        cap();",
    "renders": true
  },
  {
    "household_item": "ka",
    "openscad_code": "// Ka statue – simplified but recognizable guardian figure\n// Height ≈ 70 mm, wall ≥ 1 mm for FDM printing\n\n// overall scaling factor\nscale_factor = 0.35;\n\nmodule ka_statue() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n\n        // Base block\n        translate([0, 0, -5])\n            cube([60, 60, 10], center = true);\n\n        // Feet\n        difference() {\n            translate([0, 0, 5])\n                cube([30, 20, 10], center = true);\n            translate([0, 0, 10])\n                cube([28, 18, 10], center = true);\n        }\n\n        // Legs\n        for (y = [-8, 8])\n            translate([0, y, 15])\n                cylinder(h = 20, d = 10, $fn = 20);\n\n        // Torso block\n        translate([0, 0, 30])\n            cube([25, 35, 25], center = true);\n\n        // Arms alongside torso\n        for (x = [-17, 17])\n            translate([x, 0, 30])\n                cube([8, 8, 25], center = true);\n\n        // Shoulder transition\n        translate([0, 0, 45])\n            cube([35, 40, 10], center = true);\n\n        // Head support cylinder\n        translate([0, 0, 52])\n            cylinder(h = 10, d1 = 20, d2 = 15, $fn = 30);\n\n        // Head (simple oval)\n        translate([0, 0, 62])\n            scale([1, 0.9, 1.2])\n                sphere(d = 20, $fn = 40);\n\n        // Face plane (flat front)\n        difference() {\n            translate([0, 0, 62])\n                sphere(d = 20, $fn = 40);\n            translate([0, -12, 62])\n                cube([20, 5, 30], center = true);\n        }\n\n        // Upright hands in prayer pose\n        for (x = [-5, 5])\n            translate([x, -12, 42])\n                cube([6, 4, 18], center = true);\n\n        // Ka hieroglyph arms (simplified)\n        for (angle = [30, 150])\n            rotate([0, 0, angle])\n                translate([0, 25, 42])\n                    cube([5, 25, 5], center = true);\n\n        // Back pillar\n        translate([0, 18, 35])\n            cube([12, 8, 30], center = true);\n    }\n}\n\nka_statue();",
    "renders": true
  },
  {
    "household_item": "akh",
    "openscad_code": "// Ankh cross – realistic style, medium complexity\n// Basic proportions (mm) – printable on FDM without support\n// Total height ≈ 75 mm, width ≈ 48 mm, thickness ≈ 9 mm\n\n$fn = 64;        // smooth curves\nth = 3.2;        // uniform wall / extrusion thickness for 3D printing\n\nmodule ring() {\n    // outer torus section, printable as single bridge\n    difference() {\n        rotate_extrude(angle = 360, convexity = 2)\n            translate([12.5, 0]) circle(d = th);\n        // remove inner hole\n        rotate_extrude(angle = 360, convexity = 2)\n            translate([9.3, 0]) circle(d = th + 0.2);\n    }\n}\n\nmodule stem() {\n    // central vertical shaft with slight taper for realism\n    hull() {\n        translate([0, -25, 0]) cylinder(h = 2, d = 14);\n        translate([0, 25, 0])  cylinder(h = 2, d = 11);\n    }\n}\n\nmodule arms() {\n    // horizontal bar\n    difference() {\n        translate([0, 0, 0])\n            cube([48, th, 9], center = true);\n        // cut rounded ends\n        for (i = [-1, 1])\n            translate([i * 24, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 10, d = 9, center = true);\n    }\n}\n\nmodule foot() {\n    // elongated teardrop foot\n    hull() {\n        translate([0, 36, 0]) cylinder(h = 0.1, d = 11);\n        translate([0, 47, 0]) sphere(d = 16);\n    }\n}\n\nmodule detail_bevels() {\n    // subtle chamfers to catch light\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([0, 0, 4.5])\n                difference() {\n                    cube([40, 40, 1], center = true);\n                    cube([38, 38, 2], center = true);\n                }\n    }\n}\n\n// assembly\nunion() {\n    ring();\n    stem();\n    arms();\n    foot();\n    detail_bevels();\n}",
    "renders": true
  },
  {
    "household_item": "longma",
    "openscad_code": "// Longma - Chinese dragon-horse hybrid\n// Medium complexity realistic style\n// 3D printable design with no overhangs\n\n$fn = 32;\nscale_factor = 0.4;\n\nmodule leg(x, y, angle) {\n    translate([x, y, 0])\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        translate([0, 0, 8])\n        cylinder(h = 15, r1 = 3, r2 = 2.5);\n        \n        // Lower leg\n        translate([0, 0, 1])\n        cylinder(h = 12, r1 = 2.5, r2 = 2);\n        \n        // Hoof\n        translate([0, 0, 0])\n        cylinder(h = 3, r1 = 2.5, r2 = 2.5);\n    }\n}\n\nmodule tail() {\n    translate([-25, 0, 8])\n    rotate([0, 10, 0])\n    union() {\n        for(i = [0:5]) {\n            translate([-i*3, 0, -i*0.5])\n            rotate([0, -5*i, 5*i])\n            scale([1-i*0.05, 1-i*0.05, 1-i*0.1])\n            sphere(3.5-i*0.3);\n        }\n    }\n}\n\nmodule wing() {\n    translate([5, 12, 18])\n    rotate([0, 0, 20])\n    union() {\n        // Wing base\n        translate([0, 0, 0])\n        scale([1, 0.3, 0.1])\n        sphere(8);\n        \n        // Wing membrane supports\n        for(i = [0:2]) {\n            rotate([0, 0, -i*30])\n            translate([6-i*2, 0, 0])\n            cylinder(h = 12-i*3, r1 = 1, r2 = 0.5);\n        }\n    }\n}\n\nmodule mane() {\n    for(i = [0:9]) {\n        translate([5+i*2, 0, 14+sin(i*20)*2])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r1 = 1.5, r2 = 0.5);\n    }\n}\n\nmodule head() {\n    translate([28, 0, 12])\n    union() {\n        // Main head shape\n        scale([1.2, 0.8, 0.9])\n        sphere(8);\n        \n        // Snout\n        translate([6, 0, -1])\n        scale([1.5, 0.6, 0.6])\n        sphere(5);\n        \n        // Dragon horns\n        translate([0, 4, 6])\n        rotate([30, 0, 20])\n        cylinder(h = 8, r1 = 2, r2 = 1);\n        translate([0, -4, 6])\n        rotate([30, 0, -20])\n        cylinder(h = 8, r1 = 2, r2 = 1);\n        \n        // Horse ears\n        translate([0, 5, 8])\n        rotate([0, 20, 0])\n        cylinder(h = 5, r1 = 2, r2 = 1);\n        translate([0, -5, 8])\n        rotate([0, 20, 0])\n        cylinder(h = 5, r1 = 2, r2 = 1);\n        \n        // Dragon whiskers\n        for(i = [0:2]) {\n            translate([3, 4-i*2, 2])\n            rotate([0, 0, -20+i*20])\n            cylinder(h = 6, r1 = 0.5, r2 = 0.2);\n            translate([3, -4+i*2, 2])\n            rotate([0, 0, 20-i*20])\n            cylinder(h = 6, r1 = 0.5, r2 = 0.2);\n        }\n    }\n}\n\n// Main body\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Torso\n    translate([0, 0, 8])\n    scale([2, 1, 1.2])\n    sphere(10);\n    \n    // Neck\n    translate([18, 0, 10])\n    rotate([0, -20, 0])\n    cylinder(h = 15, r1 = 6, r2 = 4);\n    \n    // Legs\n    leg(12, 8, -10);\n    leg(12, -8, 10);\n    leg(-8, 8, 10);\n    leg(-8, -8, -10);\n    \n    // Tail\n    tail();\n    \n    // Wings\n    wing();\n    mirror([0, 1, 0])\n    wing();\n    \n    // Mane\n    mane();\n    \n    // Head\n    head();\n}",
    "renders": true
  },
  {
    "household_item": "buraq",
    "openscad_code": "// Buraq - Realistic Style, Medium Complexity\n// Wings, horse body, human face, peacock tail\n\n// Parameters\nscale_factor = 1;\nbody_length = 60 * scale_factor;\nbody_height = 35 * scale_factor;\nhead_size = 12 * scale_factor;\nwing_span = 80 * scale_factor;\ntail_length = 25 * scale_factor;\n\nmodule horse_body() {\n    // Main torso\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(d=body_length, $fn=32);\n        translate([0, 0, -body_height/2]) cube([body_length*1.5, body_length*1.5, body_height], center=true);\n    }\n    \n    // Neck\n    translate([body_length/2 - 10, 0, body_height/2]) \n        rotate([0, -30, 0])\n        cylinder(h=20, d1=15, d2=8, $fn=16);\n    \n    // Legs\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([body_length/3, side * 10, -body_height/2])\n            rotate([0, 10, 0])\n            cylinder(h=25, d=6, $fn=12);\n        \n        // Back legs\n        translate([-body_length/3, side * 10, -body_height/2])\n            rotate([0, -10, 0])\n            cylinder(h=25, d=6, $fn=12);\n    }\n}\n\nmodule human_face() {\n    translate([body_length/2 + 12, 0, body_height/2 + 5]) {\n        rotate([0, -30, 0]) {\n            // Head\n            sphere(d=head_size, $fn=32);\n            \n            // Nose\n            translate([head_size/2, 0, 0])\n                scale([1, 0.7, 0.7]) sphere(d=4, $fn=16);\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([0, side * 3, 2])\n                    sphere(d=2, $fn=12);\n            }\n            \n            // Hair/head covering\n            translate([0, 0, head_size/2])\n                scale([1.2, 1.2, 0.5]) sphere(d=head_size + 2, $fn=32);\n        }\n    }\n}\n\nmodule wings() {\n    module feather() {\n        scale([0.3, 1, 0.05]) sphere(d=15, $fn=8);\n    }\n    \n    for(side = [-1, 1]) {\n        translate([0, side * (body_length/2 - 5), body_height/2]) {\n            rotate([0, 0, side * 20]) {\n                rotate([0, 90, 0]) {\n                    // Upper wing\n                    for(i = [0:3]) {\n                        translate([-i*5, 0, 0])\n                        rotate([i*15, 0, 0])\n                        scale([1 - i*0.1, 1 - i*0.1, 1])\n                        feather();\n                    }\n                    \n                    // Lower wing\n                    for(i = [0:2]) {\n                        translate([5 + i*5, 0, -5])\n                        rotate([-i*20, 0, 0])\n                        scale([0.8 - i*0.1, 0.8 - i*0.1, 1])\n                        feather();\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule peacock_tail() {\n    translate([-body_length/2 - 5, 0, body_height/2 - 5]) {\n        rotate([0, 20, 180]) {\n            // Tail base\n            cylinder(h=tail_length, d=8, $fn=12);\n            \n            // Feathers\n            for(angle = [0:30:180]) {\n                rotate([0, angle, 0]) {\n                    translate([0, 0, -tail_length/2])\n                        scale([0.5, 0.1, 1]) sphere(d=20, $fn=8);\n                }\n            }\n            \n            // Eye spots on feathers\n            for(angle = [30:30:150]) {\n                rotate([0, angle, 0]) {\n                    translate([0, 0, -tail_length/2 - 8])\n                        scale([0.3, 0.3, 0.1]) sphere(d=8, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    horse_body();\n    human_face();\n    wings();\n    peacock_tail();\n}",
    "renders": true
  },
  {
    "household_item": "huma",
    "openscad_code": "// Realistic Human Figure - Medium Complexity\n// Designed for 3D printing without supports\n\n// Global parameters\n$fn = 32;  // Smooth curves\nscale_factor = 0.8;  // Overall size adjustment\n\n// Main module\nmodule human_figure() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Torso assembly\n        union() {\n            torso();\n            \n            // Head on top\n            translate([0, 0, 42]) head();\n            \n            // Arms\n            translate([8, 0, 30]) rotate([0, 10, 15]) arm();\n            translate([-8, 0, 30]) rotate([0, 10, -15]) mirror([1,0,0]) arm();\n            \n            // Legs\n            translate([3, 0, 0]) leg();\n            translate([-3, 0, 0]) mirror([1,0,0]) leg();\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    difference() {\n        // Main head shape\n        sphere(6);\n        \n        // Eye sockets\n        translate([2.5, 3, 1]) rotate([0, 90, 0]) cylinder(h=2, r=1.2);\n        translate([-2.5, 3, 1]) rotate([0, 90, 0]) cylinder(h=2, r=1.2);\n        \n        // Mouth\n        translate([0, 4, -2]) cube([3, 0.5, 1.5], center=true);\n    }\n    \n    // Nose\n    translate([0, 4.5, 0]) cylinder(h=2, r1=1, r2=0.5);\n    \n    // Ears\n    translate([5.8, 0, 0]) rotate([0, 90, 0]) cylinder(h=1.5, r1=2, r2=1);\n    translate([-5.8, 0, 0]) rotate([0, 90, 0]) cylinder(h=1.5, r1=2, r2=1);\n}\n\n// Torso module\nmodule torso() {\n    // Chest\n    difference() {\n        cube([12, 8, 20], center=true);\n        \n        // Neck cavity\n        translate([0, 0, 11]) cylinder(h=3, r=3.5);\n    }\n    \n    // Shoulders\n    translate([7, 0, 30]) sphere(4);\n    translate([-7, 0, 30]) sphere(4);\n    \n    // Waist taper\n    translate([0, 0, 10]) {\n        difference() {\n            cylinder(h=10, r1=6.5, r2=5.5);\n            translate([0, 4, 5]) cube([14, 8, 10], center=true);\n        }\n    }\n}\n\n// Arm module\nmodule arm() {\n    // Upper arm\n    translate([0, 0, -5]) rotate([0, 90, 0]) cylinder(h=12, r=2.2);\n    \n    // Elbow joint\n    translate([0, 0, -11]) sphere(2.5);\n    \n    // Forearm\n    translate([0, 0, -17]) rotate([0, 90, 0]) cylinder(h=10, r1=2.2, r2=1.8);\n    \n    // Hand\n    translate([0, 0, -24]) {\n        difference() {\n            sphere(2.5);\n            \n            // Thumb gap\n            translate([1.5, -1, 0]) cube([2, 1, 2]);\n            \n            // Finger gaps\n            for(i = [-1:1]) {\n                translate([i*0.8, -2, 0]) cube([0.6, 1.5, 2]);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    // Upper leg\n    translate([0, 0, -10]) rotate([0, 90, 0]) cylinder(h=15, r=2.8);\n    \n    // Knee\n    translate([0, 0, -18]) sphere(3);\n    \n    // Lower leg\n    translate([0, 0, -27]) rotate([0, 90, 0]) cylinder(h=15, r1=2.6, r2=2);\n    \n    // Ankle\n    translate([0, 0, -35]) sphere(2);\n    \n    // Foot\n    translate([1, 0, -39]) {\n        difference() {\n            cube([6, 3, 2.5], center=true);\n            \n            // Arch\n            translate([0, 0, -0.5]) cube([4, 2.5, 1], center=true);\n        }\n        \n        // Toes\n        for(i = [-1.5:1:1.5]) {\n            translate([i, 1.8, -0.5]) cube([0.8, 0.8, 1.5]);\n        }\n    }\n}\n\n// Generate the figure\nhuman_figure();",
    "renders": true
  },
  {
    "household_item": "mushussu",
    "openscad_code": "// Mushussu - Mesopotamian mythical creature\n// Snake-dragon with feline forelegs, bird talons, scaly body\n// Sized for 3D printing: ~80mm long\n\n$fn = 24;\n\nmodule mushussu(scale = 1) {\n    // Main body parameters\n    body_len = 40 * scale;\n    body_rad = 8 * scale;\n    \n    // Head\n    module head() {\n        // Snout\n        translate([body_len/2 + 8, 0, body_rad]) \n            rotate([0, 90, 0])\n                cylinder(h=12 * scale, r1=6 * scale, r2=4 * scale);\n        \n        // Head main\n        translate([body_len/2 + 2, 0, body_rad]) \n            sphere(7 * scale);\n        \n        // Horns (curved)\n        for(i=[-1, 1]) {\n            translate([body_len/2 + 2, i*5, body_rad + 5]) \n                rotate([i*20, 0, 0])\n                    cylinder(h=8 * scale, r1=1.5 * scale, r2=0.5 * scale);\n        }\n        \n        // Eye ridges\n        for(i=[-1, 1]) {\n            translate([body_len/2 + 4, i*4, body_rad + 2]) \n                sphere(2 * scale);\n        }\n    }\n    \n    // Scaled body\n    module body() {\n        // Main snake body\n        hull() {\n            translate([-body_len/2, 0, 0]) sphere(body_rad);\n            translate([body_len/2, 0, 0]) sphere(body_rad);\n        }\n        \n        // Scales along body\n        for(i=[-1:0.2:1]) {\n            translate([i * body_len/2, 0, body_rad + 1]) \n                rotate([0, 0, i*10])\n                    scale([1, 0.7, 0.5])\n                        sphere(3 * scale);\n        }\n    }\n    \n    // Forelegs (feline)\n    module foreleg(side=1) {\n        // Upper leg\n        translate([body_len/4, side*10, 0]) \n            rotate([0, 90, -side*20])\n                cylinder(h=8 * scale, r1=3 * scale, r2=2.5 * scale);\n        \n        // Lower leg\n        translate([body_len/4 + 6, side*12, -5]) \n            rotate([0, 0, -side*30])\n                cylinder(h=7 * scale, r1=2.5 * scale, r2=2 * scale);\n        \n        // Paw\n        translate([body_len/4 + 10, side*13, -8]) \n            sphere(2.5 * scale);\n        \n        // Claws\n        for(i=[-1, 0, 1]) {\n            translate([body_len/4 + 11, side*13 + i*1.5, -8]) \n                rotate([90, 0, 0])\n                    cylinder(h=2 * scale, r1=0.5 * scale, r2=0.2 * scale);\n        }\n    }\n    \n    // Hind talons (bird-like)\n    module hind_talon(side=1) {\n        // Leg\n        translate([-body_len/4, side*8, -body_rad]) \n            rotate([0, 0, side*20])\n                cylinder(h=6 * scale, r1=2 * scale, r2=1.5 * scale);\n        \n        // Talon base\n        translate([-body_len/4 - 4, side*10, -body_rad - 5]) \n            sphere(2 * scale);\n        \n        // Talons\n        for(angle=[0, 120, 240]) {\n            rotate([0, 0, angle])\n                translate([-body_len/4 - 4, side*10 + 2, -body_rad - 6]) \n                    cylinder(h=3 * scale, r1=0.5 * scale, r2=0.2 * scale);\n        }\n    }\n    \n    // Snake tail\n    module tail() {\n        translate([-body_len/2 - 15, 0, 0]) \n            rotate([0, 0, 180])\n                cylinder(h=20 * scale, r1=body_rad, r2=3 * scale);\n    }\n    \n    // Dorsal fins/spikes\n    module dorsal_fin() {\n        for(i=[-0.8:0.2:0.8]) {\n            translate([i * body_len/2, 0, body_rad + 2]) \n                rotate([0, 90, 0])\n                    cylinder(h=4 * scale, r1=2 * scale, r2=0.5 * scale);\n        }\n    }\n    \n    // Combine all parts\n    union() {\n        body();\n        head();\n        foreleg(1);\n        foreleg(-1);\n        hind_talon(1);\n        hind_talon(-1);\n        tail();\n        dorsal_fin();\n    }\n}\n\n// Create the model\nmushussu(2);",
    "renders": true
  },
  {
    "household_item": "shedu",
    "openscad_code": "// Shedu (Assyrian winged bull with human head) - Realistic Medium Complexity\n// Overall size ~80mm long, ~60mm wide, ~50mm tall\n\nmodule body() {\n    // Central torso\n    hull() {\n        translate([-30, -15, 0]) cube([60, 30, 35]);\n        translate([-25, -12, 35]) cube([50, 24, 15]);\n    }\n}\n\nmodule legs() {\n    // Four legs with hooves\n    for(side = [-1, 1]) {\n        for(pos = [-20, 20]) {\n            translate([pos, side*12, 0]) {\n                // Upper leg\n                rotate([0, -15*side, 0])\n                cylinder(h=25, r1=6, r2=5);\n                \n                // Lower leg\n                translate([0, 0, 25])\n                rotate([0, 15*side, 0])\n                cylinder(h=20, r1=5, r2=4);\n                \n                // Hoof\n                translate([0, 0, 45])\n                scale([1.2, 1, 0.8])\n                sphere(r=5);\n            }\n        }\n    }\n}\n\nmodule wings() {\n    for(side = [-1, 1]) {\n        translate([0, side*15, 30]) {\n            rotate([0, 0, side*20]) {\n                // Upper wing section\n                translate([5, 0, 0])\n                rotate([0, side*20, 0])\n                scale([1, 0.3, 0.1])\n                sphere(r=25);\n                \n                // Lower wing section\n                translate([15, -10*side, -5])\n                rotate([0, side*30, 0])\n                scale([0.8, 0.25, 0.1])\n                sphere(r=20);\n                \n                // Wing tip\n                translate([25, -15*side, -8])\n                rotate([0, side*40, 0])\n                scale([0.6, 0.2, 0.1])\n                sphere(r=15);\n            }\n        }\n    }\n}\n\nmodule head() {\n    translate([-35, 0, 35]) {\n        // Main head shape\n        scale([1.2, 0.9, 1.1])\n        sphere(r=15);\n        \n        // Snout\n        translate([-10, 0, -5])\n        scale([1.5, 0.8, 0.7])\n        sphere(r=8);\n        \n        // Human face details\n        translate([-15, 0, 5]) {\n            // Nose\n            translate([0, 0, 2])\n            sphere(r=3);\n            \n            // Eyes\n            for(eye = [-1, 1]) {\n                translate([0, eye*5, 3])\n                sphere(r=2);\n            }\n            \n            // Beard\n            translate([-2, 0, -8])\n            scale([1, 0.8, 1.5])\n            sphere(r=5);\n        }\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([-5, side*8, 10]) {\n                rotate([0, side*20, 0])\n                cylinder(h=12, r1=3, r2=1);\n            }\n        }\n        \n        // Ears (bull ears)\n        for(side = [-1, 1]) {\n            translate([0, side*12, 5]) {\n                rotate([0, 0, side*30])\n                scale([0.3, 1, 0.8])\n                sphere(r=6);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    translate([30, 0, 25]) {\n        rotate([0, 0, -30])\n        cylinder(h=30, r=3);\n        \n        // Tail tuft\n        translate([25, -15, 0])\n        sphere(r=4);\n    }\n}\n\nmodule decorative_details() {\n    // Chest mane pattern\n    for(i = [1:5]) {\n        translate([-25+i*5, 0, 20])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=3, r2=1);\n    }\n    \n    // Wing feathers (simplified)\n    for(side = [-1, 1]) {\n        for(feather = [1:3]) {\n            translate([5+feather*8, side*(15+feather*2), 30-feather*3]) {\n                rotate([0, 0, side*(20+feather*5)])\n                scale([0.2, 0.8, 0.05])\n                sphere(r=10);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    legs();\n    wings();\n    head();\n    tail();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "household_item": "al",
    "openscad_code": "// Realistic AL (Aluminum) atom model – 3D-printable ball-and-stick style\n// Size ~70 mm Ø; no extreme overhangs, 0.8 mm wall thickness for spheres\n\nAL_RADIUS = 15;           // Metallic core radius (mm)\nSTICK_LENGTH = 40;        // Bond length\nSTICK_RADIUS = 2.5;       // Bond radius\nSHELL_THICK = 1.0;        // Outer shell thickness\n$fn = 48;                 // Smooth curves\n\n// Metallic sphere with hollow core\nmodule al_atom() {\n    difference() {\n        sphere(r = AL_RADIUS);\n        sphere(r = AL_RADIUS - SHELL_THICK);\n    }\n}\n\n// Single cylindrical bond\nmodule bond(len = STICK_LENGTH) {\n    cylinder(h = len, r = STICK_RADIUS, center = true);\n}\n\n// 12 bonds in cuboctahedral geometry (typical FCC packing)\nmodule bonds() {\n    // Top/Bottom squares\n    for (a = [0:90:270]) rotate([0, 0, a]) translate([AL_RADIUS, 0, 0]) rotate([0, 90, 0]) bond();\n    for (a = [0:90:270]) rotate([0, 0, a]) translate([0, AL_RADIUS, 0]) bond();\n    for (a = [0:90:270]) rotate([0, 0, a]) translate([0, -AL_RADIUS, 0]) bond();\n    for (a = [0:90:270]) rotate([0, 0, a]) translate([-AL_RADIUS, 0, 0]) rotate([0, 90, 0]) bond();\n\n    // Vertical\n    translate([0, 0,  AL_RADIUS]) bond();\n    translate([0, 0, -AL_RADIUS]) bond();\n}\n\n// Final assembly\nunion() {\n    al_atom();\n    bonds();\n}",
    "renders": true
  },
  {
    "household_item": "utukku",
    "openscad_code": "$fn = 32;\n\n// Overall scale factor\noverall_scale = 0.7;\n\n// Main module\nmodule utukku() {\n    scale(overall_scale)\n    union() {\n        // Head\n        head();\n\n        // Wings\n        wing_left();\n        wing_right();\n\n        // Body\n        body();\n\n        // Arms\n        arm_left();\n        arm_right();\n\n        // Legs\n        leg_left();\n        leg_right();\n\n        // Tail\n        tail();\n    }\n}\n\n// Head with eagle-like beak and feathered crest\nmodule head() {\n    translate([0, 0, 45])\n    rotate([0, 0, 0])\n    union() {\n        // Main head sphere\n        sphere(8);\n\n        // Beak\n        translate([0, 10, -2])\n        scale([1, 2, 0.8])\n        rotate([30, 0, 0])\n        cylinder(h=8, r1=2, r2=0.5);\n\n        // Crest feathers\n        for (i = [-15:5:15]) {\n            translate([sin(i) * 6, cos(i) * 6, 7])\n            rotate([i, 0, 0])\n            scale([0.3, 0.1, 1])\n            cylinder(h=5, r=2);\n        }\n\n        // Eyes\n        translate([3, 7, 1])\n        sphere(1.2);\n        translate([-3, 7, 1])\n        sphere(1.2);\n\n        // Eye pupils\n        translate([3.5, 7.5, 1])\n        color(\"black\")\n        sphere(0.5);\n        translate([-2.5, 7.5, 1])\n        color(\"black\")\n        sphere(0.5);\n    }\n}\n\n// Wing with feather layers\nmodule wing_left() {\n    translate([-12, -5, 25])\n    rotate([0, 0, 20])\n    union() {\n        // Main wing structure\n        scale([3, 0.5, 1])\n        rotate([0, -10, 0])\n        cube([12, 1, 4], center=true);\n\n        // Primary feathers\n        for (i = [0:3:12]) {\n            translate([i - 6, 0, -2])\n            rotate([0, 0, -20])\n            scale([0.8, 0.2, 1.5])\n            cube([3, 0.5, 0.5]);\n        }\n\n        // Secondary feathers\n        for (j = [0:2:8]) {\n            translate([j - 4, 0, -1])\n            rotate([0, 0, -10])\n            scale([0.6, 0.2, 1.2])\n            cube([2.5, 0.5, 0.5]);\n        }\n    }\n}\n\nmodule wing_right() {\n    mirror([1, 0, 0])\n    wing_left();\n}\n\n// Body with feather texture\nmodule body() {\n    translate([0, 0, 25])\n    union() {\n        // Main torso\n        scale([1, 0.8, 1.2])\n        sphere(10);\n\n        // Feather layers on chest\n        for (i = [0:2:8]) {\n            translate([0, -2, 20 - i * 2])\n            rotate([90, 0, 0])\n            scale([4 - i * 0.3, 5 - i * 0.3, 0.5])\n            cylinder(h=1, r=4 - i * 0.3);\n        }\n    }\n}\n\n// Arms with clawed hands\nmodule arm_left() {\n    translate([-7, 5, 20])\n    rotate([0, 0, -30])\n    union() {\n        // Upper arm\n        rotate([0, 0, 0])\n        cylinder(h=8, r=1.5);\n\n        // Lower arm\n        translate([0, 0, -8])\n        rotate([0, 30, 0])\n        cylinder(h=6, r=1.2);\n\n        // Hand with claws\n        translate([0, 0, -14])\n        rotate([0, 60, 0])\n        scale([1, 1, 0.5])\n        sphere(2);\n\n        // Claws\n        for (k = [-1:1]) {\n            translate([k * 0.8, 0, -16])\n            rotate([0, 0, k * 10])\n            scale([0.3, 0.3, 1])\n            cylinder(h=2, r=0.5);\n        }\n    }\n}\n\nmodule arm_right() {\n    mirror([1, 0, 0])\n    arm_left();\n}\n\n// Legs with talons\nmodule leg_left() {\n    translate([-3, 0, 10])\n    rotate([0, 0, 10])\n    union() {\n        // Thigh\n        cylinder(h=8, r=2);\n\n        // Lower leg\n        translate([0, 0, -8])\n        rotate([0, 20, 0])\n        cylinder(h=7, r=1.5);\n\n        // Foot\n        translate([0, 0, -15])\n        rotate([0, 45, 0])\n        scale([1.2, 0.8, 0.5])\n        sphere(2);\n\n        // Talons\n        for (l = [-1.5:1.5:1.5]) {\n            translate([l, 0, -17])\n            rotate([0, 0, l * 5])\n            scale([0.4, 0.4, 1])\n            cylinder(h=3, r=0.6);\n        }\n    }\n}\n\nmodule leg_right() {\n    mirror([1, 0, 0])\n    leg_left();\n}\n\n// Feathered tail\nmodule tail() {\n    translate([0, -12, 15])\n    rotate([0, 0, 0])\n    union() {\n        // Tail base\n        scale([1, 2, 0.5])\n        sphere(3);\n\n        // Tail feathers\n        for (m = [-2:1:2]) {\n            translate([m * 2, -5, 0])\n            rotate([0, 0, m * 15])\n            scale([0.5, 1.5, 0.1])\n            cylinder(h=8, r=1);\n        }\n    }\n}\n\n// Render the utukku\nutukku();",
    "renders": true
  },
  {
    "household_item": "lilitu",
    "openscad_code": "// Lilitu (Mesopotamian demoness) – medium-complexity realistic style\n// Overall height ≈ 80 mm, suitable for FDM printing\n\n$fn = 36;          // Smooth curves for printing\nbodyH = 50;        // Main torso height\nhipR = 12;         // Hip radius\nshoulderR = 9;     // Shoulder radius\nheadH = 18;        // Head height\nwingSpan = 70;     // Wing tip to tip\nlegL = 30;         // Upper leg length\nfootL = 12;        // Foot length\n\nmodule torso() {\n    // Simple tapered torso (hips wider than shoulders)\n    difference() {\n        cylinder(h = bodyH, r1 = hipR, r2 = shoulderR, center = false);\n        // Hollow out for material saving & printability\n        translate([0, 0, 2])\n            cylinder(h = bodyH - 4, r1 = hipR - 3, r2 = shoulderR - 3);\n    }\n}\n\nmodule head() {\n    // Oval head with small horns\n    translate([0, 0, bodyH + headH/2])\n        union() {\n            // Head\n            scale([1, 0.8, 1.2])\n                sphere(r = headH/2);\n\n            // Horns – two small curved cylinders\n            for (a = [-40, 40])\n                rotate([0, 0, a])\n                    translate([headH/2 * 0.7, 0, headH/2 * 1.1])\n                        rotate([90, 0, 0])\n                            cylinder(h = 10, r1 = 2, r2 = 0.5);\n        }\n}\n\nmodule arm(side = 1) {   // side = 1 right, ‑1 left\n    translate([0, side * (shoulderR + 2), bodyH - 5])\n        union() {\n            // Upper arm\n            rotate([0, side * -15, 0])\n                cylinder(h = 15, r = 3);\n\n            // Lower arm\n            translate([0, 0, 15])\n                rotate([0, side * -20, 0])\n                    cylinder(h = 12, r = 2.5);\n\n            // Claw-like hand\n            translate([0, 0, 27])\n                scale([1, 1.5, 0.5])\n                    sphere(r = 3);\n        }\n}\n\nmodule leg(side = 1) {\n    translate([0, side * (hipR - 3), 0])\n        union() {\n            // Upper leg\n            rotate([0, side * 10, 0])\n                cylinder(h = legL, r = 4);\n\n            // Lower leg\n            translate([0, 0, legL])\n                rotate([0, side * -10, 0])\n                    cylinder(h = legL * 0.8, r = 3.5);\n\n            // Simple block foot\n            translate([0, 0, legL + legL * 0.8])\n                cube([footL, 6, 4], center = true);\n        }\n}\n\nmodule wing(side = 1) {\n    // Bat-like wing with membrane gaps printed as 1 mm bridges\n    rotate([0, 0, side * 20])\n        translate([0, side * shoulderR, bodyH - 5])\n            union() {\n                // Arm of wing\n                rotate([0, 90 + side * -10, 0])\n                    cylinder(h = 20, r = 2);\n\n                // First finger\n                translate([20, 0, 0])\n                    rotate([0, 0, -20])\n                        cylinder(h = 25, r = 1.5);\n\n                // Second finger\n                translate([20, 0, 0])\n                    rotate([0, 0, -40])\n                        cylinder(h = 20, r = 1.5);\n\n                // Membrane – thin wedges between fingers\n                translate([10, 0, 0])\n                    rotate([90, 0, 0])\n                        linear_extrude(height = 0.5)\n                            polygon(points = [[0,0],\n                                              [22*cos(-20), 22*sin(-20)],\n                                              [20*cos(-40), 20*sin(-40)]]);\n            }\n}\n\nmodule tail() {\n    // Thin curved tail\n    translate([0, 0, -5])\n        rotate([0, 20, 0])\n            cylinder(h = 25, r1 = 3, r2 = 1);\n}\n\n// Assemble figure\nunion() {\n    torso();\n    head();\n    arm(side = 1);\n    arm(side = -1);\n    leg(side = 1);\n    leg(side = -1);\n    wing(side = 1);\n    wing(side = -1);\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "lilu",
    "openscad_code": "// Lilu (miniature cat) – 3D-printable, medium complexity\n// Overall height ≈ 55 mm, wall thickness 1.2 mm\n\n$fn = 36;               // Smooth curves for printing\n\nmodule body() {\n    // Main torso – elongated oval\n    translate([0, 0, 12])\n        scale([1.4, 1, 1])\n        sphere(r = 10);\n}\n\nmodule head() {\n    // Slightly flattened sphere for head\n    translate([0, 15, 22])\n        scale([1, 1, 0.8])\n        sphere(r = 9);\n}\n\nmodule ears() {\n    // Two tilted cylinders with spherical tops, hollowed for printability\n    for(side = [-1, 1]) {\n        translate([side * 6, 22, 25])\n            rotate([0, side * 15, 0])\n            union() {\n                cylinder(h = 8, r1 = 3, r2 = 0.5);\n                translate([0, 0, 8])\n                    sphere(r = 0.5);\n            }\n        // Inner hollow\n        translate([side * 6, 22, 25])\n            rotate([0, side * 15, 0])\n            cylinder(h = 7.5, r1 = 2, r2 = 0.2);\n    }\n}\n\nmodule tail() {\n    // Curved tail made from stacked spheres\n    for(i = [0 : 5]) {\n        translate([0, -12 - i * 3, 10 + sin(i * 30) * 5])\n            sphere(r = 3 - i * 0.3);\n    }\n}\n\nmodule legs() {\n    // Four legs with paw pads\n    for(side = [-1, 1]) {\n        for(fwd = [1, -1]) {\n            translate([side * 7, fwd * 8, 0])\n                union() {\n                    // Leg\n                    cylinder(h = 12, r = 3);\n                    // Paw\n                    translate([0, 0, 0])\n                        sphere(r = 3.5);\n                }\n            // Hollow inside\n            translate([side * 7, fwd * 8, -1])\n                cylinder(h = 14, r = 2);\n        }\n    }\n}\n\nmodule face() {\n    // Eyes – small spheres\n    for(side = [-1, 1]) {\n        translate([side * 4, 18, 25])\n            sphere(r = 1.2);\n    }\n    // Nose – tiny pyramid from cubes\n    translate([0, 22, 23])\n        cube([2, 1.5, 1], center = true);\n    // Mouth – thin cylinders\n    rotate([90, 0, 0])\n        for(side = [-1, 1]) {\n            translate([side * 1.5, 22, 21.5])\n                cylinder(h = 3, r = 0.5);\n        }\n}\n\nmodule whiskers() {\n    // Thin cylinders for whiskers\n    for(side = [-1, 1])\n        for(a = [-20, 0, 20]) {\n            rotate([0, a, 0])\n                translate([side * 9, 20.5, 23])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r = 0.4);\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ears();\n    tail();\n    legs();\n    face();\n    whiskers();\n}",
    "renders": true
  },
  {
    "household_item": "ardatlili",
    "openscad_code": "// Ardatlili - Mesopotamian Demoness\n// Medium complexity realistic style\n// Overall height 80mm, wingspan 90mm\n\n// Parameters\nbody_height = 40;\nbody_radius = 12;\nhead_radius = 8;\nwing_length = 45;\nwing_width = 20;\nleg_length = 25;\narm_length = 20;\ntail_length = 30;\nclaw_length = 4;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule torso() {\n    // Main body - elongated egg shape\n    translate([0, -5, 0])\n        scale([1, 0.8, 1.3])\n        sphere(r=body_radius, $fn=32);\n    \n    // Chest detail\n    translate([0, 0, body_height/2])\n        cylinder(h=8, r=body_radius-2, $fn=32);\n}\n\nmodule head() {\n    // Main head\n    translate([0, 0, body_height+head_radius*1.5])\n        sphere(r=head_radius, $fn=32);\n    \n    // Horns - curved back\n    for(side=[-1,1]) {\n        translate([side*head_radius*0.7, 0, body_height+head_radius*2])\n            rotate([0, side*30, 0])\n            cylinder(h=15, r1=3, r2=1, $fn=16);\n    }\n    \n    // Snout\n    translate([0, head_radius*0.8, body_height+head_radius*1.2])\n        rotate([-15, 0, 0])\n        scale([0.7, 1.2, 0.6])\n        sphere(r=head_radius*0.8, $fn=32);\n}\n\nmodule wings() {\n    for(side=[-1,1]) {\n        // Wing base\n        translate([side*body_radius*0.8, -body_radius/2, body_height-5])\n            rotate([0, 0, side*45])\n            cube([wall, wing_width, wing_length]);\n        \n        // Wing membrane support\n        for(i=[0:3]) {\n            translate([side*body_radius*0.8, -body_radius/2, body_height-5+i*12])\n                rotate([0, side*30, side*45])\n                scale([1, 0.3, 1])\n                cylinder(h=wing_length-5-i*3, r=wall, $fn=8);\n        }\n        \n        // Wing tip claw\n        translate([side*(body_radius*0.8+wing_length-5), -body_radius/2, body_height-5+wing_length-5])\n            rotate([0, side*30, side*45])\n            cone(h=claw_length*2, r1=0, r2=wall, $fn=8);\n    }\n}\n\nmodule arms() {\n    for(side=[-1,1]) {\n        // Upper arm\n        translate([side*body_radius*0.9, -body_radius/3, body_height-8])\n            rotate([0, 0, side*30])\n            rotate([90, 0, 0])\n            cylinder(h=arm_length*0.6, r=wall+1, $fn=16);\n        \n        // Lower arm\n        translate([side*(body_radius*0.9+arm_length*0.6*sin(30)), -body_radius/3+arm_length*0.6*cos(30), body_height-8-arm_length*0.6])\n            rotate([0, 0, side*30])\n            rotate([90, 0, 0])\n            cylinder(h=arm_length*0.4, r=wall, $fn=16);\n        \n        // Hand with claws\n        translate([side*(body_radius*0.9+arm_length*sin(30)), -body_radius/3+arm_length*cos(30), body_height-8-arm_length])\n            rotate([0, 0, side*30])\n            rotate([90, 0, 0])\n            sphere(r=wall+1, $fn=16);\n        \n        for(claw=[0:2]) {\n            translate([side*(body_radius*0.9+arm_length*sin(30)), -body_radius/3+arm_length*cos(30)-(claw-1)*2, body_height-8-arm_length])\n                rotate([0, 0, side*30])\n                rotate([90, 0, 0])\n                cone(h=claw_length*1.5, r1=wall, r2=0, $fn=8);\n        }\n    }\n}\n\nmodule legs() {\n    for(side=[-1,1]) {\n        // Thigh\n        translate([side*body_radius*0.5, -body_radius/2, 0])\n            rotate([30, 0, side*15])\n            cylinder(h=leg_length*0.4, r=wall+2, $fn=16);\n        \n        // Shin\n        translate([side*body_radius*0.5, -body_radius/2-leg_length*0.4*cos(30), -leg_length*0.4*sin(30)])\n            rotate([60, 0, side*15])\n            cylinder(h=leg_length*0.6, r=wall+1, $fn=16);\n        \n        // Foot\n        translate([side*body_radius*0.5, -body_radius/2-leg_length*cos(30), -leg_length*sin(30)])\n            rotate([90, 0, side*15])\n            cube([wall*3, 8, 12]);\n        \n        // Toes\n        for(toe=[0:2]) {\n            translate([side*body_radius*0.5, -body_radius/2-leg_length*cos(30)+toe*3-3, -leg_length*sin(30)-6])\n                rotate([90, 0, side*15])\n                cone(h=claw_length*2, r1=wall, r2=0, $fn=8);\n        }\n    }\n}\n\nmodule tail() {\n    // Tail segments getting smaller\n    for(i=[0:4]) {\n        translate([0, -body_radius*0.8, -i*5-2])\n            rotate([0, 10*i, 0])\n            scale([1-i*0.15, 1-i*0.15, 1])\n            sphere(r=body_radius*(1-i*0.2), $fn=32);\n    }\n    \n    // Tail tip\n    translate([0, -body_radius*0.8-10, -25])\n        cone(h=8, r1=body_radius*0.3, r2=0, $fn=16);\n}\n\n// Assembly\nunion() {\n    torso();\n    head();\n    wings();\n    arms();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "household_item": "maskim",
    "openscad_code": "// Maskim Realistic Style - Medium Complexity\n// Overall dimensions: ~70mm wide x 80mm tall x 30mm deep\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main mask module\nmodule maskim() {\n    difference() {\n        // Outer shell\n        union() {\n            // Face plate\n            translate([0, 0, 0])\n                scale([1, 1.2, 0.4])\n                sphere(d=70, $fn=50);\n            \n            // Brow ridge\n            translate([0, 25, 5])\n                rotate([15, 0, 0])\n                scale([1, 0.3, 0.2])\n                cube([60, 20, 10], center=true);\n                \n            // Cheek bones\n            for(x = [-25, 25]) {\n                translate([x, 0, 0])\n                    rotate([0, 20*sign(x), 0])\n                    scale([0.3, 1, 0.5])\n                    sphere(d=40, $fn=30);\n            }\n        }\n        \n        // Hollow out inside\n        scale([0.9, 0.85, 0.8])\n        sphere(d=70, $fn=50);\n        \n        // Eye holes\n        for(x = [-18, 18]) {\n            translate([x, 15, 5])\n                rotate([15, 0, 0])\n                scale([1, 1.2, 1])\n                cylinder(h=20, d1=12, d2=15, center=true, $fn=20);\n        }\n        \n        // Mouth opening\n        translate([0, -30, -5])\n            rotate([15, 0, 0])\n            scale([1, 0.5, 1])\n            cylinder(h=20, d1=25, d2=30, center=true, $fn=30);\n            \n        // Breathing holes\n        for(x = [-8, 0, 8]) {\n            translate([x, -28, -2])\n                rotate([15, 0, 0])\n                cylinder(h=10, d=4, center=true, $fn=10);\n        }\n    }\n    \n    // Nose bridge\n    union() {\n        translate([0, 5, 8])\n            scale([1.2, 1, 0.5])\n            rotate([0, 15, 0])\n            cylinder(h=20, d=12, center=true, $fn=20);\n            \n        // Nostrils\n        for(x = [-6, 6]) {\n            translate([x, -5, 5])\n                rotate([30, 0, 0])\n                cylinder(h=10, d=6, center=true, $fn=10);\n        }\n    }\n    \n    // Decorative ridges\n    module ridge(y, angle) {\n        translate([0, y, 8])\n            rotate([angle, 0, 0])\n            scale([0.8, 0.1, 0.2])\n            cube([50, 2, 5], center=true);\n    }\n    \n    ridge(20, 10);\n    ridge(10, 5);\n    ridge(0, 0);\n    ridge(-10, -5);\n    ridge(-20, -10);\n    \n    // Mounting holes for straps\n    for(x = [-30, 30]) {\n        translate([x, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=wall+2, d=4, center=true, $fn=10);\n    }\n}\n\n// Generate the mask\nmaskim();",
    "renders": true
  }
]