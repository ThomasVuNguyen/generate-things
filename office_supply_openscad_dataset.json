[
  {
    "office_supply": "stapler",
    "openscad_code": "// Stapler - office furniture item\n// Realistic style, medium complexity\n\n$fn = 50;\n\nmodule base() {\n    // Main body base\n    difference() {\n        union() {\n            // Base block\n            translate([0, 0, 5])\n                cube([100, 25, 10], center = true);\n            \n            // Front curved nose\n            translate([40, 0, 5])\n                scale([1, 0.8, 0.8])\n                sphere(12.5);\n            \n            // Back handle support\n            translate([-45, 0, 8])\n                cube([10, 20, 16], center = true);\n        }\n        \n        // Paper slot channel\n        translate([0, 0, -2])\n            cube([90, 26, 4], center = true);\n        \n        // Mounting holes\n        for(x = [-30, 0, 30])\n            translate([x, 0, 5])\n                cylinder(h = 11, r = 2, center = true);\n    }\n}\n\nmodule top_arm() {\n    // Hinged top arm\n    translate([-48, 0, 18])\n        rotate([0, -12, 0])\n        union() {\n            // Main arm\n            translate([20, 0, 5])\n                cube([70, 22, 8], center = true);\n            \n            // Handle grip\n            translate([-15, 0, 5])\n                cube([20, 18, 6], center = true);\n            \n            // End cap\n            translate([55, 0, 5])\n                cylinder(h = 22, r = 11, center = true);\n        }\n}\n\nmodule spring_mechanism() {\n    // Coil spring representation\n    color(\"silver\")\n    translate([0, 12.5, 15])\n        for(i = [0:5])\n            rotate([0, 90, i * 60])\n                cylinder(h = 2, r1 = 6, r2 = 6, center = true);\n}\n\nmodule hinge_pin() {\n    // Hinge assembly\n    translate([-50, 0, 10])\n        cylinder(h = 25, r = 2.5, center = true);\n}\n\nmodule rubber_feet() {\n    // Anti-slip feet\n    for(x = [-35, 35])\n    for(y = [-8, 8]) {\n        translate([x, y, 0])\n            cylinder(h = 2, r = 4);\n    }\n}\n\nmodule magazine() {\n    // Staple magazine channel\n    difference() {\n        translate([0, 0, 14])\n            cube([80, 22, 4], center = true);\n        \n        // Staple channel\n        translate([0, 0, 14])\n            cube([78, 20, 2], center = true);\n    }\n}\n\nmodule anvil() {\n    // Metal striking plate\n    translate([35, 0, 11])\n        cube([20, 24, 1], center = true);\n}\n\n// Assembly\nunion() {\n    base();\n    top_arm();\n    hinge_pin();\n    magazine();\n    anvil();\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "paperclip",
    "openscad_code": "// Paperclip Chair - Realistic Style\n// Dimensions: ~120mm height, scaled for desk use\n\n// Parameters\nclip_thickness = 2;           // Wall thickness for 3D printing\nclip_width = 45;              // Width of paperclip arms\nclip_height = 120;            // Overall chair height\nseat_radius = 25;             // Radius of seat curve\nback_angle = 15;              // Backrest tilt angle\nleg_length = 50;              // Front leg length\nback_leg_length = 55;         // Back leg length (longer for stability)\n\n// Helper module for rounded edges\nmodule rounded_edge(length, radius) {\n    translate([0, 0, radius])\n    difference() {\n        cube([length, clip_thickness, 2*radius], center=true);\n        translate([0, 0, radius])\n        sphere(r=radius);\n        translate([0, 0, -radius])\n        sphere(r=radius);\n    }\n}\n\n// Chair seat (paperclip central loop)\nmodule chair_seat() {\n    // Main seat loop\n    translate([0, 0, leg_length + seat_radius])\n    rotate([90, 0, 0])\n    difference() {\n        // Outer loop\n        torus(r1=seat_radius, r2=clip_thickness/2);\n        \n        // Inner hollow\n        torus(r1=seat_radius - clip_thickness, r2=clip_thickness/2 - 1);\n    }\n    \n    // Seat surface\n    translate([0, 0, leg_length + clip_thickness])\n    rotate([90, 0, 0])\n    cylinder(h=clip_thickness, r=seat_radius - clip_thickness/2, center=true);\n}\n\n// Front legs (paperclip front arms)\nmodule front_legs() {\n    // Left leg\n    translate([-seat_radius + clip_thickness, 0, leg_length/2])\n    rotate([0, 90, 0])\n    cylinder(h=clip_width/2, r=clip_thickness/2, center=true);\n    \n    // Right leg\n    translate([seat_radius - clip_thickness, 0, leg_length/2])\n    rotate([0, 90, 0])\n    cylinder(h=clip_width/2, r=clip_thickness/2, center=true);\n    \n    // Front crossbar\n    translate([0, -clip_width/4, leg_length - clip_thickness])\n    rotate([90, 0, 0])\n    cylinder(h=clip_width/2, r=clip_thickness/2, center=true);\n}\n\n// Backrest and back legs (paperclip back arms)\nmodule backrest() {\n    // Back legs\n    // Left back leg\n    translate([-seat_radius + clip_thickness, 0, leg_length + seat_radius - back_leg_length/2])\n    rotate([back_angle, 0, 0])\n    cylinder(h=back_leg_length, r=clip_thickness/2, center=true);\n    \n    // Right back leg\n    translate([seat_radius - clip_thickness, 0, leg_length + seat_radius - back_leg_length/2])\n    rotate([back_angle, 0, 0])\n    cylinder(h=back_leg_length, r=clip_thickness/2, center=true);\n    \n    // Backrest frame\n    translate([0, 0, leg_length + seat_radius + (back_leg_length - seat_radius)*cos(back_angle)])\n    rotate([back_angle, 0, 0])\n    difference() {\n        // Outer backrest\n        torus(r1=seat_radius - clip_thickness, r2=clip_thickness/2);\n        \n        // Inner backrest\n        torus(r1=seat_radius - 2*clip_thickness, r2=clip_thickness/2 - 1);\n    }\n    \n    // Backrest support bars\n    for(i = [-1:1]) {\n        translate([i * (seat_radius - 2*clip_thickness), 0, \n                  leg_length + seat_radius + (back_leg_length - seat_radius)*cos(back_angle)])\n        rotate([back_angle, 0, 0])\n        cylinder(h=clip_thickness*2, r=clip_thickness/2, center=true);\n    }\n}\n\n// Armrests (paperclip side loops)\nmodule armrests() {\n    // Left armrest\n    translate([-seat_radius - clip_thickness/2, 0, leg_length + seat_radius/2])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer curve\n        torus(r1=seat_radius/2, r2=clip_thickness/2);\n        \n        // Inner curve\n        torus(r1=seat_radius/2 - clip_thickness, r2=clip_thickness/2 - 1);\n    }\n    \n    // Right armrest\n    translate([seat_radius + clip_thickness/2, 0, leg_length + seat_radius/2])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer curve\n        torus(r1=seat_radius/2, r2=clip_thickness/2);\n        \n        // Inner curve\n        torus(r1=seat_radius/2 - clip_thickness, r2=clip_thickness/2 - 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main chair components\n    chair_seat();\n    front_legs();\n    backrest();\n    armrests();\n    \n    // Additional support bars\n    // Front to back support\n    translate([0, clip_width/4, leg_length + clip_thickness])\n    rotate([0, 90, 0])\n    cylinder(h=clip_width/2, r=clip_thickness/2, center=true);\n    \n    // Side supports\n    translate([-seat_radius/2, 0, leg_length + seat_radius/2])\n    rotate([0, 0, 90])\n    cylinder(h=clip_width/4, r=clip_thickness/2, center=true);\n    \n    translate([seat_radius/2, 0, leg_length + seat_radius/2])\n    rotate([0, 0, 90])\n    cylinder(h=clip_width/4, r=clip_thickness/2, center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "binder",
    "openscad_code": "// Office Binder Furniture - Medium Complexity\n// Realistic style 3-ring binder with spine label and functional details\n\n// Overall dimensions\nbinder_width = 100;\nbinder_height = 120;\nbinder_thickness = 35;\nwall_thickness = 2;\n\n// Ring mechanism details\nring_diameter = 15;\nring_spacing = 30;\nring_offset = 8;\n\n// Create the main binder body\nmodule binder_body() {\n    difference() {\n        // Main cover\n        cube([binder_width, binder_thickness, binder_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([binder_width-2*wall_thickness, \n                  binder_thickness-wall_thickness, \n                  binder_height-2*wall_thickness], center=false);\n    }\n}\n\n// Create the spine with rounded edges\nmodule spine() {\n    translate([0, binder_thickness, 0])\n        difference() {\n            // Rounded spine\n            hull() {\n                cube([binder_width, 15, binder_height]);\n                translate([0, 5, 0])\n                    cube([binder_width, 5, binder_height]);\n            }\n            \n            // Label recess\n            translate([10, 1, binder_height/2 - 20])\n                cube([binder_width - 20, 3, 40]);\n        }\n}\n\n// Ring mechanism\nmodule ring_mechanism() {\n    // Base plate\n    translate([10, wall_thickness, 20])\n        cube([binder_width - 20, 5, 80]);\n    \n    // Three rings\n    for(i = [0:2]) {\n        translate([binder_width/2 + (i-1)*ring_spacing, \n                  wall_thickness + 5, \n                  60]) {\n            // Ring base\n            cube([ring_diameter, 3, ring_diameter]);\n            \n            // Ring post\n            rotate([0, 90, 0])\n                cylinder(h=ring_diameter, r=ring_diameter/2, $fn=20);\n            \n            // Ring half-circle\n            translate([ring_diameter/2, 0, 0])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h=ring_diameter, r=ring_diameter/2, $fn=20);\n                        translate([0, 0, -ring_diameter/2])\n                            cube([ring_diameter, ring_diameter, ring_diameter], center=true);\n                    }\n        }\n    }\n}\n\n// Binder latch mechanism\nmodule latch() {\n    // Latch arm\n    translate([binder_width - 15, binder_thickness - 3, binder_height - 30])\n        cube([10, 3, 20]);\n    \n    // Latch hook\n    translate([binder_width - 10, binder_thickness - 3, binder_height - 25])\n        cube([5, 3, 10]);\n}\n\n// Hinge detail\nmodule hinges() {\n    for(i = [1:2]) {\n        translate([i*(binder_width/3), 0, 5])\n            cylinder(h=wall_thickness*2, r=3, $fn=12);\n    }\n}\n\n// Corner reinforcements\nmodule corners() {\n    for(x = [0, binder_width - 10]) {\n        for(z = [0, binder_height - 10]) {\n            translate([x, 0, z])\n                cube([10, wall_thickness*2, 10]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    binder_body();\n    spine();\n    ring_mechanism();\n    latch();\n    hinges();\n    corners();\n}",
    "renders": true
  },
  {
    "office_supply": "folder",
    "openscad_code": "// OpenSCAD – 3D-printable realistic folder furniture\n// Overall size: 120 mm (W) × 80 mm (H) × 25 mm (D)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body outer shell\nmodule folder_body() {\n    // Front/back covers\n    difference() {\n        cube([120, 80, wall], center = false);           // full cover\n        translate([wall, wall, -1])\n            cube([120 - 2*wall, 80 - 2*wall, wall + 2]); // inner cutout\n    }\n}\n\n// Spine connecting front and back covers\nmodule spine() {\n    translate([wall, 0, wall])\n    cube([wall, 80, 25 - 2*wall]);\n}\n\n// Paper stack inside\nmodule paper_stack() {\n    color(\"white\")\n    for (i = [0:1:8]) {\n        translate([wall + 1, wall + 1, wall + 1 + i*1.5])\n            cube([118 - 2*wall - 2, 78 - 2*wall - 2, 1.2]);\n    }\n}\n\n// Metal clip mechanism\nmodule clip_bar() {\n    // Bar\n    color(\"silver\")\n    translate([wall*2, 5, 25/2])\n        rotate([90, 0, 0])\n            cylinder(h = 110, r = 1.5, $fn = 12);\n\n    // Rings (3 rings)\n    for (ring = [0:2]) {\n        translate([wall*2 + ring*40, 5, 25/2])\n            rotate([90, 0, 0])\n                cylinder(h = 8, r = 6, $fn = 20);\n    }\n}\n\n// Label holder on front\nmodule label_holder() {\n    color(\"slategray\")\n    translate([60 - 20, 70, 1])\n    difference() {\n        cube([40, 8, 1]);\n        translate([2, 2, -1])\n            cube([40 - 4, 8 - 4, 3]);\n    }\n}\n\n// Small handle notch on spine\nmodule handle_notch() {\n    translate([wall/2, 40 - 8, 20])\n    rotate([0, 90, 0])\n        cylinder(h = 16, r1 = 4, r2 = 4, $fn = 20);\n}\n\n// Assembly\nunion() {\n    // Left cover\n    folder_body();\n    \n    // Right cover (mirrored)\n    translate([0, 0, 25])\n    mirror([0, 0, 1])\n        folder_body();\n    \n    // Spine\n    spine();\n    \n    // Internal paper\n    paper_stack();\n    \n    // Clip mechanism on right cover\n    translate([0, 0, 25])\n    clip_bar();\n    \n    // Label holder on left cover\n    label_holder();\n    \n    // Handle notch\n    handle_notch();\n}",
    "renders": true
  },
  {
    "office_supply": "file_folder",
    "openscad_code": "// File folder furniture - realistic style\n// Dimensions: 120mm x 40mm x 150mm (width x depth x height)\n\nwall_thickness = 2;\nfolder_width = 120;\nfolder_depth = 40;\nfolder_height = 150;\ntab_height = 25;\n\nmodule folder_body() {\n    // Main folder body\n    difference() {\n        // Outer shell\n        cube([folder_width, folder_depth, folder_height], center = false);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([folder_width - 2*wall_thickness, \n                  folder_depth - wall_thickness, \n                  folder_height - wall_thickness], center = false);\n    }\n}\n\nmodule folder_tab() {\n    // Top tab with curved front\n    translate([folder_width/2 - 25, 0, folder_height])\n        rotate([0, 90, 0])\n            cylinder(h = 50, r1 = 12.5, r2 = 12.5, center = true);\n    \n    // Tab support\n    translate([folder_width - 50, 0, folder_height + 12.5])\n        cube([50, folder_depth, 25], center = false);\n}\n\nmodule spine_label() {\n    // Recessed label area on spine\n    translate([folder_width - 15, 2, folder_height/2])\n        cube([10, 2, 60], center = false);\n}\n\nmodule base_reinforcement() {\n    // Base support ribs\n    for(i = [10:20:folder_width-20]) {\n        translate([i, 2, wall_thickness])\n            cube([wall_thickness*2, folder_depth-4, 5], center = false);\n    }\n}\n\nmodule corner_rounding() {\n    // Front bottom corners\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n            cylinder(h = wall_thickness, r = 5, center = false);\n    \n    translate([folder_width, 0, 0])\n        rotate([0, 0, 0])\n            cylinder(h = wall_thickness, r = 5, center = false);\n}\n\nmodule document_stop() {\n    // Small lip to prevent papers from sliding out\n    translate([0, folder_depth - wall_thickness - 1, 10])\n        cube([folder_width, wall_thickness, 5], center = false);\n}\n\n// Assembly\nunion() {\n    folder_body();\n    \n    folder_tab();\n    \n    spine_label();\n    \n    base_reinforcement();\n    \n    document_stop();\n    \n    // Add corner fillets for better printability\n    difference() {\n        union() {\n            // Main body with rounded edges\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([folder_width - 2*wall_thickness, \n                      folder_depth - 2*wall_thickness, \n                      folder_height - 2*wall_thickness], center = false);\n            \n            // Front edge rounding\n            for(i = [0:1:folder_width]) {\n                translate([i, 0, 0])\n                    sphere(r = wall_thickness, $fn = 8);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "paper_clip",
    "openscad_code": "// Paper Clip Chair - Realistic Medium Complexity\n// Office furniture styled as a giant paper clip\n\n$fn = 30;\nwall_thickness = 2;\n\n// Main dimensions\nchair_width = 60;\nchair_depth = 55;\nchair_height = 80;\nseat_height = 45;\n\n// Paper clip wire dimensions\nwire_diameter = 8;\ninner_radius = 15;\n\nmodule paper_clip_loop(radius, thickness) {\n    // Create a single loop of paper clip\n    rotate_extrude(angle = 180, convexity = 10) {\n        translate([radius, 0, 0]) {\n            circle(d = thickness);\n        }\n    }\n}\n\nmodule wire_segment(length) {\n    // Straight wire segment\n    rotate([90, 0, 0]) {\n        cylinder(h = length, d = wire_diameter, center = true);\n    }\n}\n\nmodule chair_frame() {\n    // Main paper clip structure forming chair frame\n    \n    // Back left upright - outer loop\n    translate([-chair_width/2 + wire_diameter, 0, chair_height/2]) {\n        paper_clip_loop(inner_radius, wire_diameter);\n    }\n    \n    // Back right upright - outer loop\n    translate([chair_width/2 - wire_diameter, 0, chair_height/2]) {\n        rotate([0, 0, 180]) {\n            paper_clip_loop(inner_radius, wire_diameter);\n        }\n    }\n    \n    // Front left leg\n    translate([-chair_width/2 + wire_diameter, chair_depth - wire_diameter, seat_height/2]) {\n        wire_segment(seat_height);\n    }\n    \n    // Front right leg\n    translate([chair_width/2 - wire_diameter, chair_depth - wire_diameter, seat_height/2]) {\n        wire_segment(seat_height);\n    }\n    \n    // Back cross support\n    translate([0, -wire_diameter/2, chair_height - inner_radius]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = chair_width - wire_diameter*2, d = wire_diameter, center = true);\n        }\n    }\n    \n    // Seat frame - front to back\n    for(x = [-chair_width/2 + wire_diameter*2, 0, chair_width/2 - wire_diameter*2]) {\n        translate([x, chair_depth/2 - wire_diameter/2, seat_height]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = chair_depth - wire_diameter, d = wire_diameter);\n            }\n        }\n    }\n}\n\nmodule seat_surface() {\n    // Mesh seat surface\n    seat_width = chair_width - wire_diameter*4;\n    seat_depth = chair_depth - wire_diameter*2;\n    \n    difference() {\n        // Base seat\n        translate([0, chair_depth/2, seat_height - wire_diameter/2]) {\n            cube([seat_width, seat_depth, wire_diameter], center = true);\n        }\n        \n        // Ventilation holes\n        for(x = [-seat_width/2 + 5 : 10 : seat_width/2 - 5]) {\n            for(y = [-seat_depth/2 + 5 : 10 : seat_depth/2 - 5]) {\n                translate([x, y, seat_height - wire_diameter/2]) {\n                    cylinder(h = wire_diameter + 1, d = 3, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule back_support() {\n    // Curved backrest following paper clip form\n    back_height = chair_height - seat_height - 10;\n    \n    // Main backrest frame\n    translate([0, -wire_diameter, seat_height + back_height/2]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = chair_width - wire_diameter*2, d = wire_diameter, center = true);\n        }\n    }\n    \n    // Vertical supports\n    for(x = [-chair_width/2 + wire_diameter*2 : 15 : chair_width/2 - wire_diameter*2]) {\n        translate([x, -wire_diameter, seat_height + back_height/2]) {\n            wire_segment(back_height);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_surface();\n    back_support();\n    \n    // Armrests - paper clip extensions\n    translate([-chair_width/2 - inner_radius, chair_depth/2, seat_height + 10]) {\n        rotate([0, 90, 0]) {\n            paper_clip_loop(inner_radius/2, wire_diameter);\n        }\n    }\n    \n    translate([chair_width/2 + inner_radius, chair_depth/2, seat_height + 10]) {\n        rotate([0, 90, 180]) {\n            paper_clip_loop(inner_radius/2, wire_diameter);\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "push_pin",
    "openscad_code": "// Push Pin Furniture - Office Supply Organizer\n// Realistic style, medium complexity\n\n// Main parameters\npin_height = 80;\npin_diameter = 12;\nhead_diameter = 24;\nhead_height = 8;\nbase_diameter = 100;\nbase_height = 15;\nwall_thickness = 2;\n\n// Pin module\nmodule push_pin() {\n    union() {\n        // Sharp tip\n        translate([0, 0, 0])\n            cylinder(h=10, r1=pin_diameter/2, r2=0.5, $fn=32);\n        \n        // Main shaft\n        translate([0, 0, 10])\n            cylinder(h=pin_height-10-head_height, r=pin_diameter/2, $fn=32);\n        \n        // Head base\n        translate([0, 0, pin_height-head_height])\n            cylinder(h=head_height, r=head_diameter/2, $fn=64);\n        \n        // Head dome\n        translate([0, 0, pin_height])\n            sphere(r=head_diameter/2, $fn=64);\n    }\n}\n\n// Base module with pin holes\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_height, r=base_diameter/2, $fn=128);\n        \n        // Create pin storage holes\n        for(i = [0:11]) {\n            angle = i * 30;\n            radius = base_diameter/2 - 15;\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            // Pin holes\n            translate([x, y, 2])\n                cylinder(h=base_height-2, r=pin_diameter/2+1, $fn=32);\n        }\n        \n        // Center hole for larger items\n        translate([0, 0, 2])\n            cylinder(h=base_height-2, r=20, $fn=64);\n        \n        // Rounded bottom edge\n        translate([0, 0, -1])\n            cylinder(h=base_height+2, r=base_diameter/2-2, r1=base_diameter/2-2, r2=base_diameter/2-5, $fn=128);\n    }\n    \n    // Add grip rings\n    for(z = [3:3:base_height-3]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=1, r=base_diameter/2, $fn=128);\n                cylinder(h=1, r=base_diameter/2-3, $fn=128);\n            }\n    }\n}\n\n// Decorative elements\nmodule details() {\n    // Top rim\n    translate([0, 0, base_height])\n        difference() {\n            cylinder(h=3, r=base_diameter/2+2, $fn=128);\n            cylinder(h=3, r=base_diameter/2, $fn=128);\n        }\n    \n    // Brand label area\n    translate([base_diameter/2-8, 0, base_height/2])\n        rotate([0, 90, 0])\n            linear_extrude(height=15, center=true)\n                text(\"PUSH PINS\", size=4, font=\"Arial:style=Bold\");\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Details\n    details();\n    \n    // Sample pins (comment out for printing empty holder)\n    // for(i = [0:3]) {\n    //     angle = i * 90;\n    //     radius = base_diameter/2 - 15;\n    //     x = cos(angle) * radius;\n    //     y = sin(angle) * radius;\n    //     \n    //     translate([x, y, base_height]) {\n    //         rotate([0, 0, 0]) {\n    //             push_pin();\n    //         }\n    //     }\n    // }\n}",
    "renders": true
  },
  {
    "office_supply": "thumbtack",
    "openscad_code": "// Thumbtack Chair – a life-size office-supply-inspired piece of furniture\n// Overall scale ≈ 110 mm tall, wide enough to sit\n\n// ---------- PARAMETERS ----------\npinD      = 10;        // diameter of metal pin\nheadD     = 80;        // chair seat diameter\nheadH     = 12;        // seat thickness\nlegH      = 90;        // leg length (total height − headH)\nwall      = 2;         // 3D-print wall thickness\n$fn       = 64;        // smooth curves\n\n// ---------- MODULES ----------\n\n// Pin shaft – hollow cylinder to save material and avoid thick sections\nmodule pinShaft(h) {\n    difference() {\n        cylinder(h = h, d = pinD, center = false);\n        translate([0, 0, wall])\n            cylinder(h = h - wall, d = pinD - 2*wall, center = false);\n    }\n}\n\n// Tapered metal point – cone with small flat tip for safety\nmodule pinTip() {\n    translate([0, 0, -legH + pinD/5])\n        cylinder(h = pinD/2, d1 = pinD, d2 = 0, center = false);\n}\n\n// Chair seat – disc with gentle ergonomic scoop\nmodule chairSeat() {\n    difference() {\n        // main disc\n        cylinder(h = headH, d = headD, center = false);\n\n        // ergonomic dip in center\n        translate([0, 0, headH - 3])\n            cylinder(h = 5, d = headD * 0.6, center = false);\n\n        // central hole for pin shaft\n        translate([0, 0, -1])\n            cylinder(h = headH + 2, d = pinD + 0.5, center = false);\n    }\n}\n\n// Reinforcement ribs under seat for structural strength\nmodule ribs() {\n    for (a = [0:45:135]) {\n        rotate([0, 0, a])\n            translate([headD/4, -wall/2, 0])\n                cube([headD/2, wall, headH/2]);\n    }\n}\n\n// ---------- MAIN MODEL ----------\nunion() {\n    // Chair seat (thumbtack head)\n    chairSeat();\n\n    // Ribs underneath\n    translate([0, 0, 0])\n        ribs();\n\n    // Pin shaft (chair leg)\n    translate([0, 0, headH])\n        pinShaft(legH);\n\n    // Safety tip\n    pinTip();\n}",
    "renders": true
  },
  {
    "office_supply": "rubber_band",
    "openscad_code": "// Rubber Band Organizer - Realistic Office Furniture Style\n// Medium complexity design with proper proportions and 3D printability\n\n// Global parameters\nwall_thickness = 2;\nband_width = 6;\nband_thickness = 1.5;\n\n// Base dimensions\nbase_length = 120;\nbase_width = 80;\nbase_height = 15;\n\n// Post dimensions\npost_diameter = 8;\npost_height = 60;\npost_spacing = 25;\n\n// Rubber band module for realistic appearance\nmodule rubber_band(outer_diameter, thickness, width) {\n    difference() {\n        // Main torus shape\n        rotate_extrude(angle = 360, $fn = 50) {\n            translate([outer_diameter/2 - thickness/2, 0, 0])\n                circle(r = thickness/2, $fn = 20);\n        }\n        \n        // Create flat band profile\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([outer_diameter/2 - thickness, -width/2, -width/2])\n                    cube([thickness, width, width * 2]);\n        }\n    }\n}\n\n// Base platform with rounded edges\nmodule base_platform() {\n    difference() {\n        // Main base\n        minkowski() {\n            cube([base_length, base_width, base_height - wall_thickness]);\n            cylinder(r = wall_thickness, h = 0.1, $fn = 20);\n        }\n        \n        // Lightening holes\n        for(x = [-40:40:40]) {\n            for(y = [-25:50:50]) {\n                translate([x + base_length/2, y + base_width/2, -1])\n                    cylinder(h = base_height + 2, r = 8, $fn = 20);\n            }\n        }\n    }\n}\n\n// Support post with ergonomic top\nmodule support_post(x_pos, y_pos) {\n    union() {\n        // Main post\n        translate([x_pos, y_pos, base_height])\n            cylinder(h = post_height, d = post_diameter, $fn = 20);\n        \n        // Rounded top\n        translate([x_pos, y_pos, base_height + post_height])\n            sphere(d = post_diameter + 2, $fn = 20);\n        \n        // Grip ring\n        translate([x_pos, y_pos, base_height + post_height * 0.7])\n            cylinder(h = 6, d = post_diameter + 4, $fn = 20);\n    }\n}\n\n// Rubber band storage on posts\nmodule stored_bands() {\n    band_sizes = [\n        [25, 1.5, 6],  // Small bands\n        [35, 1.5, 6],  // Medium bands\n        [45, 1.5, 6]   // Large bands\n    ];\n    \n    for(i = [0:2]) {\n        for(j = [0:1]) {\n            translate([\n                -25 + i * post_spacing + base_length/2,\n                -12.5 + j * 25 + base_width/2,\n                base_height + post_height * 0.3\n            ]) {\n                rotate([90, 0, 0])\n                    rubber_band(\n                        band_sizes[i][0],\n                        band_sizes[i][1],\n                        band_sizes[i][2]\n                    );\n            }\n        }\n    }\n}\n\n// Label area\nmodule label_area() {\n    translate([base_length/2, -5, base_height - 1]) {\n        difference() {\n            cube([40, 10, 2]);\n            translate([2, 2, -1])\n                cube([36, 6, 4]);\n        }\n    }\n}\n\n// Anti-slip feet\nmodule feet() {\n    foot_positions = [\n        [15, 15], [15, base_width - 15],\n        [base_length - 15, 15], [base_length - 15, base_width - 15]\n    ];\n    \n    for(pos = foot_positions) {\n        translate([pos[0], pos[1], -2]) {\n            difference() {\n                cylinder(h = 4, d = 8, $fn = 20);\n                cylinder(h = 5, d = 4, $fn = 20);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base_platform();\n    \n    // Support posts\n    support_post(base_length * 0.25, base_width * 0.25);\n    support_post(base_length * 0.75, base_width * 0.25);\n    support_post(base_length * 0.25, base_width * 0.75);\n    support_post(base_length * 0.75, base_width * 0.75);\n    \n    // Central support\n    support_post(base_length/2, base_width/2);\n    \n    // Stored rubber bands\n    stored_bands();\n    \n    // Label\n    label_area();\n    \n    // Feet\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "tape_dispenser",
    "openscad_code": "// Office Tape Dispenser - Realistic Furniture Style\n// Overall dimensions: 120mm x 60mm x 40mm\n\n$fn = 32;\n\n// Main body base\nmodule base() {\n    difference() {\n        // Main platform\n        translate([0, 0, 5])\n            cube([120, 60, 10], center=true);\n        \n        // Tape slot cutout\n        translate([0, 0, 0])\n            cube([24, 55, 20], center=true);\n        \n        // Weight reduction cavities\n        for(x = [-40, 0, 40]) {\n            translate([x, -20, 5])\n                cube([20, 15, 8], center=true);\n            translate([x, 20, 5])\n                cube([20, 15, 8], center=true);\n        }\n    }\n}\n\n// Tape spindle\nmodule spindle() {\n    // Central core\n    cylinder(h=25, r=4);\n    \n    // Top cap\n    translate([0, 0, 25])\n        cylinder(h=3, r=6);\n    \n    // Base flange\n    translate([0, 0, 0])\n        cylinder(h=2, r=6);\n}\n\n// Cutting blade assembly\nmodule blade() {\n    difference() {\n        // Blade holder\n        translate([55, 0, 15])\n            cube([15, 58, 8], center=true);\n        \n        // Serrated blade teeth\n        for(i = [-25:5:25]) {\n            translate([62, i, 19])\n                rotate([0, 45, 0])\n                    cube([2, 3, 1], center=true);\n        }\n    }\n}\n\n// Side supports\nmodule side_support() {\n    difference() {\n        // Left support\n        translate([-55, -30, 20])\n            cube([10, 10, 30], center=true);\n        \n        // Right support\n        translate([-55, 30, 20])\n            cube([10, 10, 30], center=true);\n    }\n}\n\n// Non-slip pads\nmodule pads() {\n    for(x = [-40, 40]) {\n        for(y = [-20, 20]) {\n            translate([x, y, 0])\n                cylinder(h=1, r=4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    base();\n    \n    // Side structural supports\n    side_support();\n    \n    // Tape spindle positioned in center\n    translate([0, 0, 12])\n        spindle();\n    \n    // Cutting blade\n    blade();\n    \n    // Non-slip pads on bottom\n    pads();\n}",
    "renders": true
  },
  {
    "office_supply": "desk_organizer",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Desk organizer overall size\nbase_w = 120;\nbase_d = 80;\nbase_h = 15;\n\n// Wall thickness\nwall = 2;\n\n// Compartments\ncomp_x = [10, 35, 65, 95];\ncomp_w = [20, 25, 25, 20];\ncomp_d = [60, 60, 60, 60];\ncomp_h = 50;\n\n// Pen holder\npen_r = 15;\npen_x = 100;\npen_y = 15;\n\n// Phone stand slot\nslot_w = 12;\nslot_h = 10;\nslot_d = 15;\nslot_x = 60;\nslot_y = 75;\n\n// Base with rounded edges\nmodule base() {\n    difference() {\n        // Main base block\n        cube([base_w, base_d, base_h], center=false);\n        \n        // Rounded bottom edges\n        translate([wall, wall, -1])\n            cube([base_w-2*wall, base_d-2*wall, wall+1]);\n        translate([wall, wall, -1])\n            cylinder(h=wall+1, r=wall, $fn=20);\n        translate([base_w-wall, wall, -1])\n            rotate([0,0,90])\n                cylinder(h=wall+1, r=wall, $fn=20);\n        translate([wall, base_d-wall, -1])\n            rotate([0,0,-90])\n                cylinder(h=wall+1, r=wall, $fn=20);\n        translate([base_w-wall, base_d-wall, -1])\n            rotate([0,0,180])\n                cylinder(h=wall+1, r=wall, $fn=20);\n    }\n}\n\n// Side wall generator\nmodule side_wall(len, ht) {\n    difference() {\n        cube([len, wall, ht]);\n        translate([0, 0, ht-2])\n            cube([len, wall, 2]);\n    }\n}\n\n// Back wall generator\nmodule back_wall(len, ht) {\n    difference() {\n        cube([wall, len, ht]);\n        translate([0, 0, ht-2])\n            cube([wall, len, 2]);\n    }\n}\n\n// Compartment walls\nmodule compartment_walls() {\n    // Left side wall\n    translate([0, 0, base_h])\n        side_wall(base_w, comp_h);\n    \n    // Right side wall\n    translate([0, base_d-wall, base_h])\n        side_wall(base_w, comp_h);\n    \n    // Back wall\n    translate([0, wall, base_h])\n        back_wall(base_d-2*wall, comp_h);\n    \n    // Internal dividers\n    for(i = [0:len(comp_x)-2]) {\n        x = comp_x[i] + comp_w[i];\n        translate([x, wall, base_h])\n            back_wall(base_d-wall-2, comp_h);\n    }\n}\n\n// Pen holder cylinder\nmodule pen_holder() {\n    difference() {\n        translate([pen_x, pen_y, base_h])\n            cylinder(h=comp_h, r=pen_r+wall, $fn=32);\n        translate([pen_x, pen_y, base_h+2])\n            cylinder(h=comp_h-2, r=pen_r, $fn=32);\n    }\n}\n\n// Phone stand slot\nmodule phone_stand() {\n    translate([slot_x, slot_y, base_h+comp_h-slot_h])\n        cube([slot_w, slot_d, slot_h]);\n}\n\n// Main assembly\nunion() {\n    base();\n    compartment_walls();\n    pen_holder();\n    phone_stand();\n    \n    // Front edge rounding\n    translate([wall, wall, base_h])\n        cube([base_w-2*wall, wall, comp_h]);\n    \n    // Top lip for structure\n    translate([0, 0, base_h+comp_h-wall])\n        cube([base_w, base_d, wall]);\n}",
    "renders": true
  },
  {
    "office_supply": "pencil",
    "openscad_code": "// Pencil Chair - Realistic style, medium complexity\n// A chair shaped like a giant pencil, designed for 3D printing\n\n// Overall dimensions (mm)\nchair_height = 120;\nseat_height = 45;\nseat_diameter = 40;\npencil_diameter = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule pencil_chair() {\n    // Main pencil body (backrest)\n    translate([0, 0, seat_height]) {\n        // Pencil shaft\n        difference() {\n            cylinder(h=chair_height-seat_height, d=pencil_diameter, $fn=32);\n            // Hollow interior for material saving\n            cylinder(h=chair_height-seat_height-5, d=pencil_diameter-wall_thickness*2, $fn=32);\n        }\n        \n        // Pencil tip (seat back)\n        translate([0, 0, chair_height-seat_height]) {\n            cylinder(h=pencil_diameter/2, d1=pencil_diameter, d2=5, $fn=32);\n        }\n        \n        // Pencil ferrule (metal band)\n        translate([0, 0, (chair_height-seat_height)*0.85]) {\n            color([0.7, 0.7, 0.7]) {\n                cylinder(h=8, d=pencil_diameter+2, $fn=32);\n            }\n        }\n        \n        // Eraser\n        translate([0, 0, (chair_height-seat_height)*0.85+8]) {\n            color([0.9, 0.5, 0.5]) {\n                cylinder(h=10, d=pencil_diameter+2, $fn=32);\n            }\n        }\n    }\n    \n    // Seat platform\n    translate([0, 0, seat_height/2]) {\n        difference() {\n            cylinder(h=seat_height, d=seat_diameter+10, $fn=32);\n            // Hollow interior\n            cylinder(h=seat_height-wall_thickness, d=seat_diameter+10-wall_thickness*2, $fn=32);\n        }\n        \n        // Seat cushion detail\n        translate([0, 0, seat_height-wall_thickness]) {\n            color([0.2, 0.2, 0.2]) {\n                cylinder(h=wall_thickness*2, d=seat_diameter, $fn=32);\n            }\n        }\n    }\n    \n    // Legs (4 pencil legs)\n    leg_positions = [\n        [seat_diameter/2-5, seat_diameter/2-5],\n        [-seat_diameter/2+5, seat_diameter/2-5],\n        [seat_diameter/2-5, -seat_diameter/2+5],\n        [-seat_diameter/2+5, -seat_diameter/2+5]\n    ];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], 0]) {\n            // Pencil leg shaft\n            difference() {\n                cylinder(h=seat_height-wall_thickness*2, d=8, $fn=12);\n                cylinder(h=seat_height-wall_thickness*3, d=8-wall_thickness*2, $fn=12);\n            }\n            \n            // Pencil tip at bottom\n            translate([0, 0, seat_height-wall_thickness*2]) {\n                color([0.6, 0.4, 0.2]) {\n                    cylinder(h=8, d1=8, d2=2, $fn=12);\n                }\n            }\n            \n            // Lead tip\n            translate([0, 0, seat_height-wall_thickness*2+8]) {\n                color([0.1, 0.1, 0.1]) {\n                    sphere(d=2, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Structural supports between legs\n    support_height = seat_height/2;\n    for (i = [0:3]) {\n        start = leg_positions[i];\n        end = leg_positions[(i+1)%4];\n        \n        // Calculate support position\n        mid_x = (start[0] + end[0]) / 2;\n        mid_y = (start[1] + end[1]) / 2;\n        angle = atan2(end[1] - start[1], end[0] - start[0]);\n        \n        translate([mid_x, mid_y, support_height]) {\n            rotate([0, 0, angle]) {\n                // Support beam\n                difference() {\n                    cube([sqrt(pow(end[0]-start[0], 2) + pow(end[1]-start[1], 2)) - 10, 4, 8]);\n                    cube([sqrt(pow(end[0]-start[0], 2) + pow(end[1]-start[1], 2)) - 10 - wall_thickness*2, \n                          4-wall_thickness*2, 8-wall_thickness*2]);\n                }\n            }\n        }\n    }\n    \n    // Hexagonal pencil texture on main body\n    hex_size = 3;\n    for (i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([0, 0, 0]) {\n                // Hexagonal ridges\n                for (h = [seat_height+10:5:chair_height-10]) {\n                    color([0.7, 0.5, 0.3]) {\n                        translate([pencil_diameter/2-1, 0, h]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h=2, d=hex_size, $fn=6);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the chair\npencil_chair();",
    "renders": true
  },
  {
    "office_supply": "pen",
    "openscad_code": "// Pen Holder Desk Furniture\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nbase_diameter = 80;\nbase_height = 8;\nholder_height = 100;\npen_hole_diameter = 12;\npen_hole_depth = 85;\nsupport_rings = 3;\n\n// Base module with chamfered edge\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_diameter, center = false);\n        \n        // Chamfer bottom edge\n        translate([0, 0, -0.1])\n            cylinder(h = base_height + 0.2, d1 = base_diameter - 4, d2 = base_diameter - 8, center = false);\n        \n        // Recess bottom for weight reduction\n        translate([0, 0, 0.5])\n            cylinder(h = base_height - 1, d = base_diameter - wall_thickness*2, center = false);\n    }\n}\n\n// Support ring structure\nmodule support_ring(height, diameter) {\n    difference() {\n        cylinder(h = wall_thickness, d = diameter, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = wall_thickness + 0.2, d = diameter - wall_thickness*2, center = false);\n    }\n}\n\n// Main holder body with tapered design\nmodule holder_body() {\n    difference() {\n        // Tapered cylinder\n        cylinder(h = holder_height, d1 = base_diameter - 10, d2 = base_diameter - 20, center = false);\n        \n        // Hollow interior\n        translate([0, 0, -0.1])\n            cylinder(h = holder_height + 0.2, d1 = base_diameter - 10 - wall_thickness*2, \n                    d2 = base_diameter - 20 - wall_thickness*2, center = false);\n    }\n}\n\n// Pen holes with countersink\nmodule pen_hole() {\n    difference() {\n        // Main hole\n        cylinder(h = pen_hole_depth, d = pen_hole_diameter, center = false);\n        \n        // Countersink top\n        translate([0, 0, -0.1])\n            cylinder(h = 3, d1 = pen_hole_diameter + 4, d2 = pen_hole_diameter, center = false);\n    }\n}\n\n// Ventilation slots for air flow\nmodule vent_slot(height) {\n    difference() {\n        cube([base_diameter - 30, wall_thickness + 1, height], center = true);\n        cube([base_diameter - 34, wall_thickness - 1, height - 2], center = true);\n    }\n}\n\n// Anti-slip pads base\nmodule grip_pads() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([(base_diameter/2 - 5), 0, -0.1])\n                cylinder(h = 1, d = 8, center = false);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Holder body\n    translate([0, 0, base_height])\n        holder_body();\n    \n    // Support rings\n    for(i = [1:support_rings]) {\n        translate([0, 0, base_height + (holder_height/(support_rings+1))*i])\n            support_ring(wall_thickness, base_diameter - 15 - i*3);\n    }\n    \n    // Pen holes array (5 holes in pentagon pattern)\n    for(i = [0:4]) {\n        angle = i * 72;\n        radius = 25;\n        translate([cos(angle)*radius, sin(angle)*radius, base_height + holder_height - pen_hole_depth - 2])\n            pen_hole();\n    }\n    \n    // Center pen hole\n    translate([0, 0, base_height + holder_height - pen_hole_depth - 2])\n        pen_hole();\n    \n    // Ventilation slots\n    translate([0, 0, base_height + holder_height/2])\n        rotate([0, 0, 45])\n            vent_slot(holder_height/2 - 10);\n    \n    translate([0, 0, base_height + holder_height/2])\n        rotate([0, 0, -45])\n            vent_slot(holder_height/2 - 10);\n    \n    // Grip pads on bottom\n    grip_pads();\n    \n    // Logo area recess\n    translate([0, (base_diameter - 10)/2 - 5, base_height/2])\n        cube([20, 0.5, 4], center = true);\n}",
    "renders": true
  },
  {
    "office_supply": "marker",
    "openscad_code": "// Marker Furniture - Realistic Office Supply Holder\n// Medium complexity with functional design\n\n$fn = 50;\n\n// Main dimensions (in mm)\nmarker_length = 120;\nmarker_diameter = 18;\nbase_height = 25;\nwall_thickness = 2;\n\nmodule marker_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = marker_length, d = marker_diameter, center = false);\n        // Hollow center for ink storage\n        translate([0, 0, wall_thickness])\n            cylinder(h = marker_length - wall_thickness*2, d = marker_diameter - wall_thickness*2, center = false);\n    }\n    \n    // Tapered tip\n    translate([0, 0, marker_length])\n        cylinder(h = 15, d1 = marker_diameter, d2 = marker_diameter - 4, center = false);\n}\n\nmodule cap() {\n    // Cap body\n    difference() {\n        cylinder(h = 25, d = marker_diameter + 1, center = false);\n        translate([0, 0, wall_thickness])\n            cylinder(h = 25 - wall_thickness, d = marker_diameter - wall_thickness, center = false);\n    }\n    \n    // Clip detail\n    translate([marker_diameter/2 - 1, 0, 15])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 15, d = 3, center = false);\n                translate([0, 0, wall_thickness])\n                    cylinder(h = 15 - wall_thickness, d = 3 - wall_thickness*2, center = false);\n            }\n}\n\nmodule base_stand() {\n    // Main base platform\n    difference() {\n        cube([80, 40, base_height], center = true);\n        translate([0, 0, wall_thickness])\n            cube([80 - wall_thickness*2, 40 - wall_thickness*2, base_height], center = true);\n    }\n    \n    // Marker slots - 5 positions\n    for(i = [0:4]) {\n        translate([-30 + i*15, 0, base_height/2])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = base_height, d = marker_diameter + 1, center = true);\n                    translate([0, 0, -wall_thickness])\n                        cylinder(h = base_height + wall_thickness*2, d = marker_diameter - 1, center = true);\n                }\n    }\n    \n    // Support ribs\n    for(i = [0:4]) {\n        translate([-30 + i*15, 15, base_height/2 - 5])\n            cube([wall_thickness*2, 10, base_height - 10], center = true);\n        translate([-30 + i*15, -15, base_height/2 - 5])\n            cube([wall_thickness*2, 10, base_height - 10], center = true);\n    }\n}\n\nmodule grip_texture() {\n    // Hexagonal grip pattern\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([marker_diameter/2 - 1, 0, 25 + i*5])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 3, center = true);\n    }\n}\n\nmodule complete_marker() {\n    // Main marker assembly\n    marker_body();\n    \n    // Add grip texture\n    grip_texture();\n    \n    // Cap positioned on top\n    translate([0, 0, marker_length + 15])\n        cap();\n}\n\n// Assembly\ntranslate([0, 0, base_height/2])\n    base_stand();\n\n// Markers in holder\nfor(i = [0:4]) {\n    translate([-30 + i*15, 0, base_height + marker_length/2])\n        rotate([0, 0, 0])\n            complete_marker();\n}",
    "renders": true
  },
  {
    "office_supply": "highlighter",
    "openscad_code": "// Highlighter Desk Chair (realistic office style)\n// Overall dimensions: 100mm length, 60mm width, 90mm height\n\n// Base thickness for 3D printing\nwall = 2;\n\n// Main highlighter body (seat)\nmodule highlighter_body() {\n    // Main barrel shape\n    translate([0, 0, 30]) \n        rotate([90, 0, 0])\n        cylinder(h=80, d1=48, d2=52, $fn=32);\n    \n    // Cap (backrest)\n    translate([0, 0, 75])\n        rotate([90, 0, 0])\n        cylinder(h=20, d1=52, d2=48, $fn=32);\n    \n    // Tip (front edge)\n    translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h=10, d1=45, d2=48, $fn=32);\n}\n\n// Chair legs (4 legs)\nmodule chair_legs() {\n    for(i = [0, 90, 180, 270]) {\n        rotate([0, 0, i])\n        translate([20, 0, 0])\n        cylinder(h=30, d=6, $fn=12);\n    }\n}\n\n// Armrest supports\nmodule armrests() {\n    // Left arm\n    translate([-25, 0, 45])\n    rotate([0, 15, 0])\n    cube([2, 25, 20]);\n    \n    // Right arm\n    translate([25, 0, 45])\n    rotate([0, -15, 0])\n    cube([2, 25, 20]);\n}\n\n// Lumbar support (text grip area)\nmodule lumbar_support() {\n    // Central support\n    translate([0, -25, 40])\n    rotate([90, 0, 0])\n    cylinder(h=30, d=8, $fn=20);\n    \n    // Horizontal support bars\n    for(y = [35:5:55]) {\n        translate([0, -25, y])\n        cube([30, 2, 2]);\n    }\n}\n\n// Wheel base (5-star base)\nmodule wheel_base() {\n    // Center hub\n    translate([0, 0, 0])\n    cylinder(h=8, d=12, $fn=20);\n    \n    // Star legs\n    for(angle = [0:72:360]) {\n        rotate([0, 0, angle])\n        translate([8, 0, 0])\n        cube([20, 4, 6]);\n    }\n}\n\n// Gas cylinder (height adjustment)\nmodule gas_cylinder() {\n    translate([0, 0, 6])\n    cylinder(h=15, d=8, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Chair assembly\n    union() {\n        highlighter_body();\n        chair_legs();\n        armrests();\n        lumbar_support();\n    }\n    \n    // Base assembly\n    translate([0, 0, 0])\n    union() {\n        wheel_base();\n        gas_cylinder();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "eraser",
    "openscad_code": "// Eraser Furniture - Realistic Office Chair Design\n// Inspired by a large pink eraser transformed into an office chair\n\n// Parameters\n$fn = 50;\nseat_width = 80;\nseat_depth = 75;\nseat_thickness = 12;\nback_height = 90;\narmrest_height = 65;\nleg_height = 45;\nleg_diameter = 8;\nwall_thickness = 2;\n\n// Eraser texture pattern module\nmodule eraser_texture(size, depth) {\n    for (i = [0:3]) {\n        for (j = [0:3]) {\n            translate([i * (size/4) - size/2 + size/8, \n                      j * (size/4) - size/2 + size/8, \n                      0])\n                cube([size/4 - 1, size/4 - 1, depth], center = true);\n        }\n    }\n}\n\n// Main seat - eraser body\nmodule eraser_seat() {\n    difference() {\n        // Main seat block\n        cube([seat_width, seat_depth, seat_thickness], center = true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -wall_thickness/2])\n            cube([seat_width - 2*wall_thickness, \n                  seat_depth - 2*wall_thickness, \n                  seat_thickness], center = true);\n        \n        // Eraser texture on top\n        translate([0, 0, seat_thickness/2 + 0.1])\n            eraser_texture(seat_width * 0.8, 0.5);\n    }\n}\n\n// Chair back - taller eraser piece\nmodule chair_back() {\n    difference() {\n        // Main back support\n        translate([0, -seat_depth/2 + 5, back_height/2 + seat_thickness/2])\n            cube([seat_width * 0.8, seat_thickness * 0.8, back_height], center = true);\n        \n        // Hollow center\n        translate([0, -seat_depth/2 + 5, back_height/2 + seat_thickness/2])\n            cube([seat_width * 0.8 - 2*wall_thickness, \n                  seat_thickness * 0.8 - 2*wall_thickness, \n                  back_height], center = true);\n        \n        // Lumbar support curve\n        translate([0, -seat_depth/2 + 5 - seat_thickness/2, \n                  seat_thickness/2 + 25])\n            rotate([0, 10, 0])\n            cube([seat_width * 0.8 + 2, seat_thickness * 0.8, 30], center = true);\n    }\n}\n\n// Armrest - eraser blocks\nmodule armrest(side) {\n    translate([side * (seat_width/2 - 5), 0, armrest_height])\n        difference() {\n            cube([10, seat_depth * 0.7, 8], center = true);\n            translate([0, 0, 2])\n                cube([6, seat_depth * 0.7 - 2*wall_thickness, 4], center = true);\n        }\n}\n\n// Chair legs - cylindrical supports\nmodule chair_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, leg_height/2])\n        difference() {\n            cylinder(h = leg_height, d = leg_diameter, center = true);\n            cylinder(h = leg_height, d = leg_diameter - 2*wall_thickness, center = true);\n        }\n}\n\n// Base support structure\nmodule base_support() {\n    translate([0, 0, leg_height - 2])\n        difference() {\n            cube([seat_width + 20, seat_depth + 20, 4], center = true);\n            cube([seat_width + 20 - 2*wall_thickness, \n                  seat_depth + 20 - 2*wall_thickness, \n                  4], center = true);\n        }\n}\n\n// Assembly\nunion() {\n    // Seat\n    eraser_seat();\n    \n    // Back\n    chair_back();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs with base\n    base_support();\n    chair_leg(seat_width/2 - 15, seat_depth/2 - 15);\n    chair_leg(-seat_width/2 + 15, seat_depth/2 - 15);\n    chair_leg(seat_width/2 - 15, -seat_depth/2 + 15);\n    chair_leg(-seat_width/2 + 15, -seat_depth/2 + 15);\n    \n    // Optional: Eraser shavings detail at base\n    translate([seat_width/2 - 10, seat_depth/2 - 5, leg_height - 1])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d1 = 5, d2 = 3);\n}",
    "renders": true
  },
  {
    "office_supply": "sharpener",
    "openscad_code": "// Sharpener furniture item - realistic desk sharpener\n// Overall dimensions: 80 x 60 x 80 mm\n\n// Parameters\nbody_width = 60;\nbody_depth = 40;\nbody_height = 60;\nwall_thickness = 2;\nblade_angle = 30;\n\n// Main body with ergonomic curves\nmodule sharpener_body() {\n    difference() {\n        // Main body shape\n        union() {\n            // Base block\n            translate([0, 0, body_height/2])\n                cube([body_width, body_depth, body_height], center=true);\n            \n            // Curved top\n            translate([0, 0, body_height - 5])\n                scale([1, 0.8, 0.4])\n                    sphere(d=body_width);\n        }\n        \n        // Internal cavity\n        translate([0, 0, 5])\n            cube([body_width - wall_thickness*2, body_depth - wall_thickness*2, body_height - 10], center=true);\n        \n        // Pencil entry holes\n        for(i = [-1, 1]) {\n            translate([i * 15, -body_depth/2 - 1, 40])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d1=8, d2=12);\n        }\n        \n        // Shavings exit\n        translate([0, 0, 15])\n            cube([body_width - 20, body_depth + 2, 25], center=true);\n    }\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    // Blade support\n    difference() {\n        translate([0, 0, 35])\n            rotate([0, blade_angle, 0])\n                cube([30, 2, 20], center=true);\n        \n        // Blade screw holes\n        for(pos = [-10, 10]) {\n            translate([pos, 0, 35])\n                rotate([0, blade_angle, 0])\n                    cylinder(h=5, d=3, center=true);\n        }\n    }\n    \n    // Actual blade\n    translate([0, -1, 35])\n        rotate([0, blade_angle, 0])\n            cube([28, 0.5, 18], center=true);\n}\n\n// Base with non-slip pads\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, wall_thickness/2])\n            cube([body_width + 10, body_depth + 10, wall_thickness], center=true);\n        \n        // Non-slip pad recesses\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * 25, y * 15, -0.5])\n                    cube([10, 8, 2]);\n            }\n        }\n    }\n    \n    // Non-slip pads\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * 25, y * 15, 0])\n                cube([10, 8, 1]);\n        }\n    }\n}\n\n// Shavings drawer\nmodule shavings_drawer() {\n    difference() {\n        // Drawer body\n        translate([0, 0, 7.5])\n            cube([body_width - 20, body_depth - wall_thickness*2, 15], center=true);\n        \n        // Handle recess\n        translate([0, (body_depth - wall_thickness*2)/2 + 1, 7.5])\n            cube([20, 3, 5], center=true);\n    }\n    \n    // Drawer handle\n    translate([0, (body_depth - wall_thickness*2)/2 + 3, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=5, center=true);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Main body\n    translate([0, 0, wall_thickness])\n        sharpener_body();\n    \n    // Blade assembly\n    blade_assembly();\n    \n    // Shavings drawer\n    shavings_drawer();\n}",
    "renders": true
  },
  {
    "office_supply": "ruler",
    "openscad_code": "// Furniture-style Standing Ruler Shelf (Medium Complexity)\n// Dimensions: 150mm wide x 40mm deep x 80mm tall\n// Wall thickness: 2mm throughout for 3D printing\n\n// Overall dimensions\nwidth = 150;\ndepth = 40;\nheight = 80;\nwall = 2;\n\n// Ruler markings parameters\nmark_height = 3;\nmm_mark_width = 1;\ncm_mark_width = 2;\nmark_spacing = 1;\n\n// Shelf positions\nshelf_positions = [30, 50, 65];\nshelf_thickness = 3;\n\n// Create the ruler body with furniture characteristics\nmodule ruler_body() {\n    // Main body - hollow with 2mm walls\n    difference() {\n        // Outer shape - slightly rounded edges\n        minkowski() {\n            cube([width, depth, height], center=false);\n            sphere(r=1, $fn=8);\n        }\n        \n        // Inner hollow space\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-wall], center=false);\n    }\n}\n\n// Create ruler markings on front face\nmodule ruler_markings() {\n    // Millimeter markings (every 5mm)\n    for(i = [0:5:width-5]) {\n        mark_width = (i % 50 == 0) ? cm_mark_width : mm_mark_width;\n        \n        translate([i + wall, wall/2, 0])\n            cube([mark_width, wall, mark_height]);\n    }\n    \n    // Centimeter numbers (every 10mm)\n    for(i = [0:10:width-10]) {\n        // Create number placeholders as blocks\n        translate([i + wall - 2, wall/2, mark_height + 1])\n            cube([4, wall, 4]);\n    }\n}\n\n// Create support legs with furniture-style feet\nmodule support_leg(x_pos) {\n    // Main leg\n    translate([x_pos, 0, 0])\n        cube([4, depth, height]);\n    \n    // Furniture-style foot at bottom\n    translate([x_pos - 2, -2, -2])\n        cube([8, depth + 4, 4]);\n}\n\n// Create shelves with proper joints\nmodule shelf(y_pos) {\n    // Main shelf\n    translate([wall, wall, y_pos])\n        cube([width-2*wall, depth-2*wall, shelf_thickness]);\n    \n    // Support brackets underneath\n    for(x = [10:30:width-20]) {\n        translate([x, wall, y_pos - 5])\n            cube([3, 5, 5]);\n    }\n}\n\n// Create back support brace\nmodule back_brace() {\n    translate([wall, depth-wall, 0])\n        cube([width-2*wall, wall, height]);\n}\n\n// Assembly\nunion() {\n    // Main ruler body\n    ruler_body();\n    \n    // Ruler markings on front\n    ruler_markings();\n    \n    // Support legs\n    support_leg(5);\n    support_leg(width - 9);\n    \n    // Middle support leg\n    support_leg(width/2 - 2);\n    \n    // Shelves\n    for(pos = shelf_positions) {\n        shelf(pos);\n    }\n    \n    // Back brace for stability\n    back_brace();\n    \n    // Add small furniture-style details - corner brackets\n    translate([5, 5, 20])\n        cube([3, 3, 10]);\n    translate([width-8, 5, 20])\n        cube([3, 3, 10]);\n    translate([5, depth-8, 20])\n        cube([3, 3, 10]);\n    translate([width-8, depth-8, 20])\n        cube([3, 3, 10]);\n}",
    "renders": true
  },
  {
    "office_supply": "protractor",
    "openscad_code": "// Protractor Desk Shelf (furniture item)\n// Combines a functional protractor with a small desktop shelf for office supplies\n\n$fn = 32;\n\n// Overall dimensions\nprotractor_radius = 100;\nprotractor_thickness = 4;\nbase_thickness = 8;\nwall_height = 15;\nwall_thickness = 2;\n\nmodule protractor_base() {\n    // Main semicircular base\n    difference() {\n        // Solid semicircle\n        intersection() {\n            cylinder(h=protractor_thickness, r=protractor_radius, center=true);\n            translate([0, -protractor_radius, 0]) \n                cube([protractor_radius*2, protractor_radius, protractor_thickness], center=true);\n        }\n        \n        // Inner hollow space\n        cylinder(h=protractor_thickness+1, r=protractor_radius-15, center=true);\n    }\n}\n\nmodule degree_marks() {\n    // Degree markings (0-180 degrees)\n    for(i = [0:10:180]) {\n        rotate([0, 0, i-90]) {\n            translate([protractor_radius-10, 0, protractor_thickness/2])\n                cube([10, 0.8, 1.2]);\n            // Numbers every 30 degrees\n            if(i % 30 == 0) {\n                translate([protractor_radius-16, 0, protractor_thickness/2+0.6])\n                    rotate([0, 0, -i+90])\n                        cube([6, 0.5, 0.8]);\n            }\n        }\n    }\n}\n\nmodule furniture_support() {\n    // Structural support legs\n    translate([-protractor_radius+15, -protractor_radius+5, -base_thickness/2]) {\n        difference() {\n            cube([30, 10, base_thickness], center=false);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([30-wall_thickness*2, 10-wall_thickness*2, base_thickness], center=false);\n        }\n    }\n    \n    translate([protractor_radius-45, -protractor_radius+5, -base_thickness/2]) {\n        difference() {\n            cube([30, 10, base_thickness], center=false);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([30-wall_thickness*2, 10-wall_thickness*2, base_thickness], center=false);\n        }\n    }\n}\n\nmodule shelf_walls() {\n    // Back wall\n    translate([0, -protractor_radius+5, wall_height/2]) {\n        difference() {\n            cube([protractor_radius*2-20, wall_thickness, wall_height], center=true);\n            translate([0, 0, -wall_height/2+wall_thickness])\n                cube([protractor_radius*2-20-wall_thickness*2, wall_thickness+1, wall_height-wall_thickness], center=true);\n        }\n    }\n    \n    // Side walls\n    translate([-protractor_radius+10, 0, wall_height/2]) {\n        difference() {\n            rotate([0, 0, 90])\n                cube([protractor_radius*2-40, wall_thickness, wall_height], center=true);\n            translate([0, 0, -wall_height/2+wall_thickness])\n                rotate([0, 0, 90])\n                    cube([protractor_radius*2-40-wall_thickness*2, wall_thickness+1, wall_height-wall_thickness], center=true);\n        }\n    }\n    \n    translate([protractor_radius-10, 0, wall_height/2]) {\n        difference() {\n            rotate([0, 0, 90])\n                cube([protractor_radius*2-40, wall_thickness, wall_height], center=true);\n            translate([0, 0, -wall_height/2+wall_thickness])\n                rotate([0, 0, 90])\n                    cube([protractor_radius*2-40-wall_thickness*2, wall_thickness+1, wall_height-wall_thickness], center=true);\n        }\n    }\n}\n\nmodule storage_compartments() {\n    // Pen/pencil dividers\n    for(x = [-40:20:40]) {\n        translate([x, -protractor_radius/2, wall_height/3]) {\n            difference() {\n                cube([wall_thickness*2, protractor_radius-20, wall_height/1.5], center=true);\n                translate([0, 0, -wall_height/3+wall_thickness])\n                    cube([wall_thickness*2-1, protractor_radius-20-wall_thickness*2, wall_height/1.5-wall_thickness], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    translate([0, 0, base_thickness/2])\n        protractor_base();\n    \n    // Furniture elements\n    translate([0, 0, base_thickness])\n        shelf_walls();\n    \n    translate([0, 0, base_thickness])\n        storage_compartments();\n    \n    // Support structure\n    furniture_support();\n    \n    // Degree markings\n    translate([0, 0, base_thickness+0.1])\n        degree_marks();\n    \n    // Center pivot hole\n    translate([0, 0, -base_thickness/2])\n        cylinder(h=base_thickness+protractor_thickness+1, r=2.5, center=false);\n}",
    "renders": true
  },
  {
    "office_supply": "compass",
    "openscad_code": "// Office Desk Compass Furniture Item\n// Medium complexity realistic compass with furniture-style details\n\n$fn = 50;\nwall_thickness = 2;\ncompass_diameter = 80;\ncompass_height = 12;\n\n// Main compass base with furniture-style beveled edge\nmodule compass_base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=compass_height, d=compass_diameter, center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=compass_height+2, d=compass_diameter-wall_thickness*2, center=true);\n        \n        // Bottom recess for stability\n        translate([0, 0, compass_height/2 - wall_thickness])\n            cylinder(h=wall_thickness*2, d=compass_diameter-wall_thickness*4, center=true);\n    }\n    \n    // Furniture-style beveled edge detail\n    translate([0, 0, compass_height/2 - 1])\n        cylinder(h=2, d1=compass_diameter, d2=compass_diameter-wall_thickness);\n}\n\n// Directional indicators with furniture-style joints\nmodule direction_indicator(length, width, angle) {\n    rotate([0, 0, angle])\n    translate([0, length/2 + compass_diameter/4, 0])\n    union() {\n        // Main indicator arm\n        cube([width, length, wall_thickness], center=true);\n        \n        // Furniture-style joint connection\n        translate([0, -length/2, 0])\n        union() {\n            cylinder(h=wall_thickness*1.5, d=width*2, center=true);\n            // Decorative rivet detail\n            translate([0, 0, wall_thickness/2])\n                cylinder(h=wall_thickness, d=width*0.8, center=true);\n        }\n    }\n}\n\n// Compass needle with furniture-style pivot\nmodule compass_needle() {\n    needle_length = compass_diameter * 0.35;\n    needle_width = 4;\n    \n    // Central pivot post (furniture joint style)\n    translate([0, 0, compass_height/2 + wall_thickness])\n        cylinder(h=wall_thickness*3, d=wall_thickness*2, center=true);\n    \n    // Needle assembly\n    translate([0, 0, compass_height/2 + wall_thickness*2.5])\n    union() {\n        // Red north end\n        color(\"red\")\n        translate([0, needle_length/4, 0])\n            cube([needle_width, needle_length/2, wall_thickness], center=true);\n        \n        // Black south end\n        color(\"black\")\n        translate([0, -needle_length/4, 0])\n            cube([needle_width, needle_length/2, wall_thickness], center=true);\n        \n        // Central hub\n        cylinder(h=wall_thickness*1.5, d=needle_width*2, center=true);\n    }\n}\n\n// Cardinal direction labels with furniture-style plaques\nmodule direction_label(text, angle, radius) {\n    rotate([0, 0, angle])\n    translate([0, radius, compass_height/2 - wall_thickness/2])\n    union() {\n        // Plaque base\n        cube([wall_thickness*4, wall_thickness*2, wall_thickness], center=true);\n        \n        // Raised letter detail\n        translate([0, 0, wall_thickness/2 + 0.1])\n            linear_extrude(height=0.5)\n            text(text, size=wall_thickness*1.5, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Decorative furniture-style feet\nmodule support_feet() {\n    foot_diameter = wall_thickness * 3;\n    foot_height = wall_thickness * 2;\n    \n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([compass_diameter/2 - foot_diameter, 0, -compass_height/2 - foot_height/2])\n            cylinder(h=foot_height, d=foot_diameter);\n    }\n}\n\n// Assembly\nunion() {\n    // Main compass body\n    compass_base();\n    \n    // Cardinal direction indicators\n    direction_indicator(compass_diameter*0.15, wall_thickness, 0);\n    direction_indicator(compass_diameter*0.15, wall_thickness, 90);\n    direction_indicator(compass_diameter*0.15, wall_thickness, 180);\n    direction_indicator(compass_diameter*0.15, wall_thickness, 270);\n    \n    // Direction labels\n    direction_label(\"N\", 0, compass_diameter/2 - wall_thickness*3);\n    direction_label(\"E\", 90, compass_diameter/2 - wall_thickness*3);\n    direction_label(\"S\", 180, compass_diameter/2 - wall_thickness*3);\n    direction_label(\"W\", 270, compass_diameter/2 - wall_thickness*3);\n    \n    // Compass needle\n    rotate([0, 0, 45])  // Rotated for display\n        compass_needle();\n    \n    // Support feet\n    support_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "calculator",
    "openscad_code": "// Calculator Furniture - Desk Calculator Model\n// Overall dimensions: 120mm x 80mm x 15mm (realistic desktop calculator size)\n\n// Wall thickness: 2mm for 3D printing\n$fn = 32;\n\n// Main body module\nmodule calculator_body() {\n    // Base shell - hollow box with 2mm walls\n    difference() {\n        // Outer shell\n        cube([120, 80, 15], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cube([116, 76, 13], center = true);\n    }\n}\n\n// Display screen module\nmodule display_screen() {\n    // Screen frame\n    translate([0, 25, 7.5])\n        difference() {\n            cube([70, 20, 2], center = true);\n            translate([0, 0, -1])\n                cube([66, 16, 2], center = true);\n        }\n    \n    // Display glass\n    translate([0, 25, 8.6])\n        color([0.2, 0.2, 0.2])\n            cube([64, 14, 0.5], center = true);\n}\n\n// Button module with realistic spacing\nmodule button(x, y, label_size) {\n    translate([x, y, 7.5]) {\n        // Button base\n        cylinder(h = 2, r = 6, center = true);\n        \n        // Button top\n        translate([0, 0, 1])\n            cylinder(h = 1, r = 5.5, center = true);\n        \n        // Button label area (slightly recessed)\n        translate([0, 0, 2])\n            cylinder(h = 0.3, r = 4.5, center = true);\n    }\n}\n\n// Button grid arrangement\nmodule button_grid() {\n    // Number buttons 0-9\n    for (i = [0:9]) {\n        x = (i % 3 - 1) * 16 - 30;\n        y = (floor(i / 3) - 2) * 14 - 10;\n        if (i > 0) button(x, y, 8);\n    }\n    \n    // Zero button (larger)\n    translate([-30, -24, 7.5]) {\n        cube([32, 12, 2], center = true);\n        translate([0, 0, 1])\n            cube([30, 10, 1], center = true);\n    }\n    \n    // Operation buttons\n    button(30, -10, 6);     // +\n    button(30, -24, 6);     // -\n    button(46, -10, 6);     // *\n    button(46, -24, 6);     // /\n    button(46, 2, 6);       // =\n    \n    // Special function buttons\n    button(-46, -10, 5);    // C\n    button(-46, 2, 5);      // CE\n    button(-46, 14, 5);     // %\n    button(-30, 2, 5);      // .\n    button(-14, 2, 5);      // +/-\n}\n\n// Anti-slip feet\nmodule feet() {\n    for (x = [-45, 45]) {\n        for (y = [-30, 30]) {\n            translate([x, y, -7.5])\n                cylinder(h = 2, r = 3);\n        }\n    }\n}\n\n// Ventilation slots for realistic detail\nmodule ventilation_slots() {\n    for (i = [-2:2]) {\n        translate([i * 20, 0, -0.5])\n            cube([2, 76, 1]);\n    }\n}\n\n// Battery compartment door\nmodule battery_door() {\n    translate([0, -35, -7.5]) {\n        difference() {\n            cube([40, 15, 1]);\n            translate([2, 2, -1])\n                cube([36, 11, 2]);\n        }\n    }\n}\n\n// Assemble the calculator\nunion() {\n    calculator_body();\n    display_screen();\n    button_grid();\n    \n    // Add furniture-specific structural elements\n    feet();\n    \n    // Add realistic details\n    translate([0, 0, -7.5])\n        ventilation_slots();\n    \n    translate([0, 0, -7.5])\n        battery_door();\n}\n\n// Add subtle rounding to edges for realism\nmodule rounded_edges() {\n    minkowski() {\n        children();\n        sphere(0.5);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "calculator_desk",
    "openscad_code": "// Calculator Desk - Realistic Style, Medium Complexity\n// Dimensions: 100mm (W) x 60mm (D) x 40mm (H)\n\n$fn = 32;\n\n// Main desk body\nmodule desk_body() {\n    // Desktop surface with rounded edges\n    difference() {\n        translate([0, 0, 38]) cube([100, 60, 4], center=true);\n        translate([0, 0, 39]) cube([96, 56, 4], center=true);\n    }\n    \n    // Main structure\n    cube([100, 60, 38], center=true);\n}\n\n// Calculator recess\nmodule calculator_recess() {\n    translate([0, 15, 20])\n    cube([80, 25, 18], center=true);\n}\n\n// Pen storage compartment\nmodule pen_storage() {\n    translate([-35, -20, 20])\n    cube([25, 15, 18], center=true);\n}\n\n// Keyboard tray\nmodule keyboard_tray() {\n    translate([0, -25, 10])\n    cube([90, 8, 2], center=true);\n}\n\n// Support legs\nmodule legs() {\n    for(x = [-45, 45])\n    for(y = [-25, 25]) {\n        translate([x, y, 19])\n        cylinder(h=38, r=3);\n    }\n}\n\n// Cable management hole\nmodule cable_hole() {\n    translate([40, 0, 35])\n    rotate([90, 0, 0])\n    cylinder(h=5, r=4);\n}\n\n// Storage drawer\nmodule drawer() {\n    // Drawer face\n    translate([0, 25, 25])\n    cube([50, 2, 10], center=true);\n    \n    // Drawer handle\n    translate([0, 26, 25])\n    cube([20, 1, 2], center=true);\n}\n\n// Document slot\nmodule document_slot() {\n    translate([0, -25, 35])\n    cube([70, 1, 5], center=true);\n}\n\n// Assembly\nunion() {\n    desk_body();\n    legs();\n    \n    difference() {\n        union() {\n            keyboard_tray();\n            drawer();\n            document_slot();\n        }\n        \n        // Remove calculator recess\n        calculator_recess();\n        \n        // Remove pen storage\n        pen_storage();\n        \n        // Add cable management\n        cable_hole();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "calendar",
    "openscad_code": "// Realistic Desk Calendar Furniture Item - Medium Complexity\n// Overall dimensions: 100mm x 80mm x 40mm\n\n$fn = 50;\nwall_thickness = 2;\nbase_depth = 80;\nbase_width = 100;\nbase_height = 8;\n\n// Main calendar base\nmodule calendar_base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Cable management slot at back\n        translate([0, base_depth/2 - 10, base_height/2])\n            cube([60, 20, base_height + 0.1], center=true);\n    }\n}\n\n// Calendar support frame\nmodule calendar_frame() {\n    // Left vertical support\n    translate([-base_width/2 + 10, 0, 25])\n        cube([wall_thickness*4, base_depth - 20, 30]);\n    \n    // Right vertical support\n    translate([base_width/2 - 10, 0, 25])\n        cube([wall_thickness*4, base_depth - 20, 30]);\n    \n    // Top horizontal support\n    translate([0, 0, 40])\n        cube([base_width - 16, wall_thickness*4, wall_thickness*4]);\n}\n\n// Month display panels\nmodule month_panel(month_num) {\n    panel_width = 20;\n    panel_height = 15;\n    panel_depth = 2;\n    \n    translate([-base_width/2 + 12 + (month_num-1)*(panel_width + 2), base_depth/2 - 25, 30])\n        cube([panel_width, panel_height, panel_depth]);\n}\n\n// Date flip cards\nmodule date_cards() {\n    card_width = 8;\n    card_height = 12;\n    card_thickness = 1;\n    \n    // Tens digit (0-3)\n    for(i = [0:3]) {\n        translate([-15 + i*card_width, -base_depth/2 + 20, 20])\n            cube([card_width - 1, card_height, card_thickness]);\n    }\n    \n    // Ones digit (0-9)\n    for(i = [0:9]) {\n        translate([0 + i*card_width, -base_depth/2 + 20, 20])\n            cube([card_width - 1, card_height, card_thickness]);\n    }\n}\n\n// Pen holder integrated into base\nmodule pen_holder() {\n    translate([base_width/2 - 25, base_depth/2 - 25, 0]) {\n        difference() {\n            // Outer cylinder\n            cylinder(h=20, r=15);\n            // Inner hole\n            cylinder(h=21, r=12);\n            // Flat back\n            translate([0, -15, 0])\n                cube([30, 15, 21], center=true);\n        }\n    }\n}\n\n// Anti-slip feet\nmodule feet() {\n    foot_radius = 3;\n    foot_height = 1;\n    \n    positions = [\n        [-base_width/2 + 10, -base_depth/2 + 10],\n        [base_width/2 - 10, -base_depth/2 + 10],\n        [-base_width/2 + 10, base_depth/2 - 10],\n        [base_width/2 - 10, base_depth/2 - 10]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], -foot_height/2])\n            cylinder(h=foot_height, r=foot_radius);\n    }\n}\n\n// Assembly\nunion() {\n    calendar_base();\n    calendar_frame();\n    \n    // All 12 month panels\n    for(m = [1:12]) {\n        month_panel(m);\n    }\n    \n    date_cards();\n    pen_holder();\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "clipboard",
    "openscad_code": "// Clipboard Furniture - Medium Complexity\n// Dimensions in mm, 3D-printable with 2mm walls\n\nclipboard_width = 100;\nclipboard_height = 140;\nclipboard_thickness = 6;\n\nclip_width = 35;\nclip_height = 35;\nclip_depth = 18;\nclip_thickness = 2;\n\nhandle_diameter = 10;\nhandle_height = 8;\nhandle_offset = 8;\n\n// Main clipboard body\nmodule clipboard_body() {\n    difference() {\n        // Main board\n        cube([clipboard_width, clipboard_height, clipboard_thickness], center=false);\n        \n        // Rounded corners\n        translate([2, 2, -1])\n            cube([clipboard_width-4, clipboard_height-4, clipboard_thickness+2], center=false);\n        translate([2, 2, -1])\n            cylinder(h=clipboard_thickness+2, r=2, $fn=20);\n        translate([clipboard_width-2, 2, -1])\n            cylinder(h=clipboard_thickness+2, r=2, $fn=20);\n        translate([2, clipboard_height-2, -1])\n            cylinder(h=clipboard_thickness+2, r=2, $fn=20);\n        translate([clipboard_width-2, clipboard_height-2, -1])\n            cylinder(h=clipboard_thickness+2, r=2, $fn=20);\n    }\n}\n\n// Metal clip mechanism\nmodule clipboard_clip() {\n    // Base plate\n    translate([0, clipboard_height-clip_height, clipboard_thickness])\n    difference() {\n        cube([clip_width, clip_height, clip_thickness]);\n        \n        // Screw holes\n        for(x = [8, clip_width-8])\n            for(y = [8, clip_height-8])\n                translate([x, y, -1])\n                    cylinder(h=clip_thickness+2, r=1.5, $fn=16);\n    }\n    \n    // Clip arm\n    translate([-5, clipboard_height-5, clipboard_thickness+clip_thickness])\n    difference() {\n        union() {\n            // Main arm\n            cube([clip_width+10, 5, clip_depth]);\n            \n            // Curved top\n            translate([clip_width+5, 2.5, clip_depth])\n                rotate([90, 0, 0])\n                    cylinder(h=5, r=clip_depth, $fn=20);\n        }\n        \n        // Grip ridges\n        for(i = [1:3])\n            translate([5+i*8, -1, 2])\n                cube([1, 7, clip_depth-2]);\n    }\n    \n    // Spring support\n    translate([clip_width/2, clipboard_height-clip_height-2, clipboard_thickness])\n    cylinder(h=8, r=2, $fn=16);\n}\n\n// Hanging hole\nmodule hanging_hole() {\n    translate([clipboard_width/2, 12, clipboard_thickness/2])\n    rotate([0, 90, 0])\n    cylinder(h=clipboard_thickness+2, r=4, $fn=20);\n}\n\n// Handle grip for carrying\nmodule handle_grip() {\n    translate([clipboard_width-handle_offset, handle_offset, clipboard_thickness])\n    difference() {\n        cylinder(h=handle_height, r=handle_diameter/2, $fn=20);\n        translate([0, 0, -1])\n            cylinder(h=handle_height+2, r=handle_diameter/2-2, $fn=20);\n    }\n}\n\n// Paper guide rails\nmodule paper_guides() {\n    // Left guide\n    translate([2, 20, 0])\n    cube([2, clipboard_height-40, clipboard_thickness]);\n    \n    // Right guide\n    translate([clipboard_width-4, 20, 0])\n    cube([2, clipboard_height-40, clipboard_thickness]);\n    \n    // Bottom guide\n    translate([2, 20, 0])\n    cube([clipboard_width-4, 2, clipboard_thickness]);\n}\n\n// Assembly\nunion() {\n    clipboard_body();\n    clipboard_clip();\n    hanging_hole();\n    handle_grip();\n    paper_guides();\n}",
    "renders": true
  },
  {
    "office_supply": "notepad",
    "openscad_code": "// Notepad furniture item - realistic office style with medium complexity\n// Dimensions: 120mm x 90mm x 15mm overall\n\n// Module for rounded rectangle base\nmodule rounded_base(w, d, h, r) {\n    difference() {\n        cube([w, d, h], center=true);\n        translate([w/2-r, d/2-r, -h/2-0.1]) cylinder(r=r, h=h+0.2, $fn=20);\n        translate([r-w/2, d/2-r, -h/2-0.1]) cylinder(r=r, h=h+0.2, $fn=20);\n        translate([w/2-r, r-d/2, -h/2-0.1]) cylinder(r=r, h=h+0.2, $fn=20);\n        translate([r-w/2, r-d/2, -h/2-0.1]) cylinder(r=r, h=h+0.2, $fn=20);\n    }\n}\n\n// Module for paper sheets\nmodule paper_sheets(count) {\n    for(i=[0:count-1]) {\n        translate([0, 0, -7.5 + i*0.3]) \n            cube([116, 86, 0.2], center=true);\n    }\n}\n\n// Module for spiral binding rings\nmodule spiral_rings() {\n    for(i=[-45:15:45]) {\n        translate([0, 40, i]) \n            rotate([0, 90, 0]) \n                cylinder(h=3, r=1.5, $fn=12);\n    }\n}\n\n// Module for back cover\nmodule back_cover() {\n    difference() {\n        rounded_base(120, 90, 2, 5);\n        // Spine cutout\n        translate([0, 41, -2]) \n            cube([116, 8, 4], center=true);\n    }\n}\n\n// Module for front cover\nmodule front_cover() {\n    difference() {\n        rounded_base(120, 90, 2, 5);\n        // Spine cutout\n        translate([0, 41, -2]) \n            cube([116, 8, 4], center=true);\n    }\n}\n\n// Module for spine\nmodule spine() {\n    translate([0, 41, 0]) \n        cube([116, 6, 15], center=true);\n}\n\n// Module for structural reinforcement ribs\nmodule ribs() {\n    for(x=[-40:20:40]) {\n        translate([x, 0, -6.5]) \n            cube([2, 80, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Back cover\n    color([0.1, 0.1, 0.1])\n    back_cover();\n    \n    // Spine\n    color([0.15, 0.15, 0.15])\n    spine();\n    \n    // Front cover\n    translate([0, 0, 13])\n        color([0.1, 0.1, 0.1])\n        front_cover();\n    \n    // Paper sheets\n    color([0.95, 0.95, 0.9])\n    paper_sheets(20);\n    \n    // Spiral binding rings\n    color([0.7, 0.7, 0.7])\n    spiral_rings();\n    \n    // Reinforcement ribs on back cover\n    color([0.05, 0.05, 0.05])\n    ribs();\n    \n    // Notepad label\n    translate([0, -30, 13.5])\n        color([0.9, 0.9, 0.9])\n        cube([60, 20, 0.3], center=true);\n}",
    "renders": true
  }
]