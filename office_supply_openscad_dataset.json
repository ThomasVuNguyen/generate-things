[
  {
    "office_supply": "stapler",
    "openscad_code": "// Stapler - office furniture item\n// Realistic style, medium complexity\n\n$fn = 50;\n\nmodule base() {\n    // Main body base\n    difference() {\n        union() {\n            // Base block\n            translate([0, 0, 5])\n                cube([100, 25, 10], center = true);\n            \n            // Front curved nose\n            translate([40, 0, 5])\n                scale([1, 0.8, 0.8])\n                sphere(12.5);\n            \n            // Back handle support\n            translate([-45, 0, 8])\n                cube([10, 20, 16], center = true);\n        }\n        \n        // Paper slot channel\n        translate([0, 0, -2])\n            cube([90, 26, 4], center = true);\n        \n        // Mounting holes\n        for(x = [-30, 0, 30])\n            translate([x, 0, 5])\n                cylinder(h = 11, r = 2, center = true);\n    }\n}\n\nmodule top_arm() {\n    // Hinged top arm\n    translate([-48, 0, 18])\n        rotate([0, -12, 0])\n        union() {\n            // Main arm\n            translate([20, 0, 5])\n                cube([70, 22, 8], center = true);\n            \n            // Handle grip\n            translate([-15, 0, 5])\n                cube([20, 18, 6], center = true);\n            \n            // End cap\n            translate([55, 0, 5])\n                cylinder(h = 22, r = 11, center = true);\n        }\n}\n\nmodule spring_mechanism() {\n    // Coil spring representation\n    color(\"silver\")\n    translate([0, 12.5, 15])\n        for(i = [0:5])\n            rotate([0, 90, i * 60])\n                cylinder(h = 2, r1 = 6, r2 = 6, center = true);\n}\n\nmodule hinge_pin() {\n    // Hinge assembly\n    translate([-50, 0, 10])\n        cylinder(h = 25, r = 2.5, center = true);\n}\n\nmodule rubber_feet() {\n    // Anti-slip feet\n    for(x = [-35, 35])\n    for(y = [-8, 8]) {\n        translate([x, y, 0])\n            cylinder(h = 2, r = 4);\n    }\n}\n\nmodule magazine() {\n    // Staple magazine channel\n    difference() {\n        translate([0, 0, 14])\n            cube([80, 22, 4], center = true);\n        \n        // Staple channel\n        translate([0, 0, 14])\n            cube([78, 20, 2], center = true);\n    }\n}\n\nmodule anvil() {\n    // Metal striking plate\n    translate([35, 0, 11])\n        cube([20, 24, 1], center = true);\n}\n\n// Assembly\nunion() {\n    base();\n    top_arm();\n    hinge_pin();\n    magazine();\n    anvil();\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "paperclip",
    "openscad_code": "// Paperclip Chair - Realistic Style\n// Dimensions: ~120mm height, scaled for desk use\n\n// Parameters\nclip_thickness = 2;           // Wall thickness for 3D printing\nclip_width = 45;              // Width of paperclip arms\nclip_height = 120;            // Overall chair height\nseat_radius = 25;             // Radius of seat curve\nback_angle = 15;              // Backrest tilt angle\nleg_length = 50;              // Front leg length\nback_leg_length = 55;         // Back leg length (longer for stability)\n\n// Helper module for rounded edges\nmodule rounded_edge(length, radius) {\n    translate([0, 0, radius])\n    difference() {\n        cube([length, clip_thickness, 2*radius], center=true);\n        translate([0, 0, radius])\n        sphere(r=radius);\n        translate([0, 0, -radius])\n        sphere(r=radius);\n    }\n}\n\n// Chair seat (paperclip central loop)\nmodule chair_seat() {\n    // Main seat loop\n    translate([0, 0, leg_length + seat_radius])\n    rotate([90, 0, 0])\n    difference() {\n        // Outer loop\n        torus(r1=seat_radius, r2=clip_thickness/2);\n        \n        // Inner hollow\n        torus(r1=seat_radius - clip_thickness, r2=clip_thickness/2 - 1);\n    }\n    \n    // Seat surface\n    translate([0, 0, leg_length + clip_thickness])\n    rotate([90, 0, 0])\n    cylinder(h=clip_thickness, r=seat_radius - clip_thickness/2, center=true);\n}\n\n// Front legs (paperclip front arms)\nmodule front_legs() {\n    // Left leg\n    translate([-seat_radius + clip_thickness, 0, leg_length/2])\n    rotate([0, 90, 0])\n    cylinder(h=clip_width/2, r=clip_thickness/2, center=true);\n    \n    // Right leg\n    translate([seat_radius - clip_thickness, 0, leg_length/2])\n    rotate([0, 90, 0])\n    cylinder(h=clip_width/2, r=clip_thickness/2, center=true);\n    \n    // Front crossbar\n    translate([0, -clip_width/4, leg_length - clip_thickness])\n    rotate([90, 0, 0])\n    cylinder(h=clip_width/2, r=clip_thickness/2, center=true);\n}\n\n// Backrest and back legs (paperclip back arms)\nmodule backrest() {\n    // Back legs\n    // Left back leg\n    translate([-seat_radius + clip_thickness, 0, leg_length + seat_radius - back_leg_length/2])\n    rotate([back_angle, 0, 0])\n    cylinder(h=back_leg_length, r=clip_thickness/2, center=true);\n    \n    // Right back leg\n    translate([seat_radius - clip_thickness, 0, leg_length + seat_radius - back_leg_length/2])\n    rotate([back_angle, 0, 0])\n    cylinder(h=back_leg_length, r=clip_thickness/2, center=true);\n    \n    // Backrest frame\n    translate([0, 0, leg_length + seat_radius + (back_leg_length - seat_radius)*cos(back_angle)])\n    rotate([back_angle, 0, 0])\n    difference() {\n        // Outer backrest\n        torus(r1=seat_radius - clip_thickness, r2=clip_thickness/2);\n        \n        // Inner backrest\n        torus(r1=seat_radius - 2*clip_thickness, r2=clip_thickness/2 - 1);\n    }\n    \n    // Backrest support bars\n    for(i = [-1:1]) {\n        translate([i * (seat_radius - 2*clip_thickness), 0, \n                  leg_length + seat_radius + (back_leg_length - seat_radius)*cos(back_angle)])\n        rotate([back_angle, 0, 0])\n        cylinder(h=clip_thickness*2, r=clip_thickness/2, center=true);\n    }\n}\n\n// Armrests (paperclip side loops)\nmodule armrests() {\n    // Left armrest\n    translate([-seat_radius - clip_thickness/2, 0, leg_length + seat_radius/2])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer curve\n        torus(r1=seat_radius/2, r2=clip_thickness/2);\n        \n        // Inner curve\n        torus(r1=seat_radius/2 - clip_thickness, r2=clip_thickness/2 - 1);\n    }\n    \n    // Right armrest\n    translate([seat_radius + clip_thickness/2, 0, leg_length + seat_radius/2])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer curve\n        torus(r1=seat_radius/2, r2=clip_thickness/2);\n        \n        // Inner curve\n        torus(r1=seat_radius/2 - clip_thickness, r2=clip_thickness/2 - 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main chair components\n    chair_seat();\n    front_legs();\n    backrest();\n    armrests();\n    \n    // Additional support bars\n    // Front to back support\n    translate([0, clip_width/4, leg_length + clip_thickness])\n    rotate([0, 90, 0])\n    cylinder(h=clip_width/2, r=clip_thickness/2, center=true);\n    \n    // Side supports\n    translate([-seat_radius/2, 0, leg_length + seat_radius/2])\n    rotate([0, 0, 90])\n    cylinder(h=clip_width/4, r=clip_thickness/2, center=true);\n    \n    translate([seat_radius/2, 0, leg_length + seat_radius/2])\n    rotate([0, 0, 90])\n    cylinder(h=clip_width/4, r=clip_thickness/2, center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "binder",
    "openscad_code": "// Office Binder Furniture - Medium Complexity\n// Realistic style 3-ring binder with spine label and functional details\n\n// Overall dimensions\nbinder_width = 100;\nbinder_height = 120;\nbinder_thickness = 35;\nwall_thickness = 2;\n\n// Ring mechanism details\nring_diameter = 15;\nring_spacing = 30;\nring_offset = 8;\n\n// Create the main binder body\nmodule binder_body() {\n    difference() {\n        // Main cover\n        cube([binder_width, binder_thickness, binder_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([binder_width-2*wall_thickness, \n                  binder_thickness-wall_thickness, \n                  binder_height-2*wall_thickness], center=false);\n    }\n}\n\n// Create the spine with rounded edges\nmodule spine() {\n    translate([0, binder_thickness, 0])\n        difference() {\n            // Rounded spine\n            hull() {\n                cube([binder_width, 15, binder_height]);\n                translate([0, 5, 0])\n                    cube([binder_width, 5, binder_height]);\n            }\n            \n            // Label recess\n            translate([10, 1, binder_height/2 - 20])\n                cube([binder_width - 20, 3, 40]);\n        }\n}\n\n// Ring mechanism\nmodule ring_mechanism() {\n    // Base plate\n    translate([10, wall_thickness, 20])\n        cube([binder_width - 20, 5, 80]);\n    \n    // Three rings\n    for(i = [0:2]) {\n        translate([binder_width/2 + (i-1)*ring_spacing, \n                  wall_thickness + 5, \n                  60]) {\n            // Ring base\n            cube([ring_diameter, 3, ring_diameter]);\n            \n            // Ring post\n            rotate([0, 90, 0])\n                cylinder(h=ring_diameter, r=ring_diameter/2, $fn=20);\n            \n            // Ring half-circle\n            translate([ring_diameter/2, 0, 0])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h=ring_diameter, r=ring_diameter/2, $fn=20);\n                        translate([0, 0, -ring_diameter/2])\n                            cube([ring_diameter, ring_diameter, ring_diameter], center=true);\n                    }\n        }\n    }\n}\n\n// Binder latch mechanism\nmodule latch() {\n    // Latch arm\n    translate([binder_width - 15, binder_thickness - 3, binder_height - 30])\n        cube([10, 3, 20]);\n    \n    // Latch hook\n    translate([binder_width - 10, binder_thickness - 3, binder_height - 25])\n        cube([5, 3, 10]);\n}\n\n// Hinge detail\nmodule hinges() {\n    for(i = [1:2]) {\n        translate([i*(binder_width/3), 0, 5])\n            cylinder(h=wall_thickness*2, r=3, $fn=12);\n    }\n}\n\n// Corner reinforcements\nmodule corners() {\n    for(x = [0, binder_width - 10]) {\n        for(z = [0, binder_height - 10]) {\n            translate([x, 0, z])\n                cube([10, wall_thickness*2, 10]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    binder_body();\n    spine();\n    ring_mechanism();\n    latch();\n    hinges();\n    corners();\n}",
    "renders": true
  },
  {
    "office_supply": "folder",
    "openscad_code": "// OpenSCAD – 3D-printable realistic folder furniture\n// Overall size: 120 mm (W) × 80 mm (H) × 25 mm (D)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body outer shell\nmodule folder_body() {\n    // Front/back covers\n    difference() {\n        cube([120, 80, wall], center = false);           // full cover\n        translate([wall, wall, -1])\n            cube([120 - 2*wall, 80 - 2*wall, wall + 2]); // inner cutout\n    }\n}\n\n// Spine connecting front and back covers\nmodule spine() {\n    translate([wall, 0, wall])\n    cube([wall, 80, 25 - 2*wall]);\n}\n\n// Paper stack inside\nmodule paper_stack() {\n    color(\"white\")\n    for (i = [0:1:8]) {\n        translate([wall + 1, wall + 1, wall + 1 + i*1.5])\n            cube([118 - 2*wall - 2, 78 - 2*wall - 2, 1.2]);\n    }\n}\n\n// Metal clip mechanism\nmodule clip_bar() {\n    // Bar\n    color(\"silver\")\n    translate([wall*2, 5, 25/2])\n        rotate([90, 0, 0])\n            cylinder(h = 110, r = 1.5, $fn = 12);\n\n    // Rings (3 rings)\n    for (ring = [0:2]) {\n        translate([wall*2 + ring*40, 5, 25/2])\n            rotate([90, 0, 0])\n                cylinder(h = 8, r = 6, $fn = 20);\n    }\n}\n\n// Label holder on front\nmodule label_holder() {\n    color(\"slategray\")\n    translate([60 - 20, 70, 1])\n    difference() {\n        cube([40, 8, 1]);\n        translate([2, 2, -1])\n            cube([40 - 4, 8 - 4, 3]);\n    }\n}\n\n// Small handle notch on spine\nmodule handle_notch() {\n    translate([wall/2, 40 - 8, 20])\n    rotate([0, 90, 0])\n        cylinder(h = 16, r1 = 4, r2 = 4, $fn = 20);\n}\n\n// Assembly\nunion() {\n    // Left cover\n    folder_body();\n    \n    // Right cover (mirrored)\n    translate([0, 0, 25])\n    mirror([0, 0, 1])\n        folder_body();\n    \n    // Spine\n    spine();\n    \n    // Internal paper\n    paper_stack();\n    \n    // Clip mechanism on right cover\n    translate([0, 0, 25])\n    clip_bar();\n    \n    // Label holder on left cover\n    label_holder();\n    \n    // Handle notch\n    handle_notch();\n}",
    "renders": true
  },
  {
    "office_supply": "file_folder",
    "openscad_code": "// File folder furniture - realistic style\n// Dimensions: 120mm x 40mm x 150mm (width x depth x height)\n\nwall_thickness = 2;\nfolder_width = 120;\nfolder_depth = 40;\nfolder_height = 150;\ntab_height = 25;\n\nmodule folder_body() {\n    // Main folder body\n    difference() {\n        // Outer shell\n        cube([folder_width, folder_depth, folder_height], center = false);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([folder_width - 2*wall_thickness, \n                  folder_depth - wall_thickness, \n                  folder_height - wall_thickness], center = false);\n    }\n}\n\nmodule folder_tab() {\n    // Top tab with curved front\n    translate([folder_width/2 - 25, 0, folder_height])\n        rotate([0, 90, 0])\n            cylinder(h = 50, r1 = 12.5, r2 = 12.5, center = true);\n    \n    // Tab support\n    translate([folder_width - 50, 0, folder_height + 12.5])\n        cube([50, folder_depth, 25], center = false);\n}\n\nmodule spine_label() {\n    // Recessed label area on spine\n    translate([folder_width - 15, 2, folder_height/2])\n        cube([10, 2, 60], center = false);\n}\n\nmodule base_reinforcement() {\n    // Base support ribs\n    for(i = [10:20:folder_width-20]) {\n        translate([i, 2, wall_thickness])\n            cube([wall_thickness*2, folder_depth-4, 5], center = false);\n    }\n}\n\nmodule corner_rounding() {\n    // Front bottom corners\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n            cylinder(h = wall_thickness, r = 5, center = false);\n    \n    translate([folder_width, 0, 0])\n        rotate([0, 0, 0])\n            cylinder(h = wall_thickness, r = 5, center = false);\n}\n\nmodule document_stop() {\n    // Small lip to prevent papers from sliding out\n    translate([0, folder_depth - wall_thickness - 1, 10])\n        cube([folder_width, wall_thickness, 5], center = false);\n}\n\n// Assembly\nunion() {\n    folder_body();\n    \n    folder_tab();\n    \n    spine_label();\n    \n    base_reinforcement();\n    \n    document_stop();\n    \n    // Add corner fillets for better printability\n    difference() {\n        union() {\n            // Main body with rounded edges\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([folder_width - 2*wall_thickness, \n                      folder_depth - 2*wall_thickness, \n                      folder_height - 2*wall_thickness], center = false);\n            \n            // Front edge rounding\n            for(i = [0:1:folder_width]) {\n                translate([i, 0, 0])\n                    sphere(r = wall_thickness, $fn = 8);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "paper_clip",
    "openscad_code": "// Paper Clip Chair - Realistic Medium Complexity\n// Office furniture styled as a giant paper clip\n\n$fn = 30;\nwall_thickness = 2;\n\n// Main dimensions\nchair_width = 60;\nchair_depth = 55;\nchair_height = 80;\nseat_height = 45;\n\n// Paper clip wire dimensions\nwire_diameter = 8;\ninner_radius = 15;\n\nmodule paper_clip_loop(radius, thickness) {\n    // Create a single loop of paper clip\n    rotate_extrude(angle = 180, convexity = 10) {\n        translate([radius, 0, 0]) {\n            circle(d = thickness);\n        }\n    }\n}\n\nmodule wire_segment(length) {\n    // Straight wire segment\n    rotate([90, 0, 0]) {\n        cylinder(h = length, d = wire_diameter, center = true);\n    }\n}\n\nmodule chair_frame() {\n    // Main paper clip structure forming chair frame\n    \n    // Back left upright - outer loop\n    translate([-chair_width/2 + wire_diameter, 0, chair_height/2]) {\n        paper_clip_loop(inner_radius, wire_diameter);\n    }\n    \n    // Back right upright - outer loop\n    translate([chair_width/2 - wire_diameter, 0, chair_height/2]) {\n        rotate([0, 0, 180]) {\n            paper_clip_loop(inner_radius, wire_diameter);\n        }\n    }\n    \n    // Front left leg\n    translate([-chair_width/2 + wire_diameter, chair_depth - wire_diameter, seat_height/2]) {\n        wire_segment(seat_height);\n    }\n    \n    // Front right leg\n    translate([chair_width/2 - wire_diameter, chair_depth - wire_diameter, seat_height/2]) {\n        wire_segment(seat_height);\n    }\n    \n    // Back cross support\n    translate([0, -wire_diameter/2, chair_height - inner_radius]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = chair_width - wire_diameter*2, d = wire_diameter, center = true);\n        }\n    }\n    \n    // Seat frame - front to back\n    for(x = [-chair_width/2 + wire_diameter*2, 0, chair_width/2 - wire_diameter*2]) {\n        translate([x, chair_depth/2 - wire_diameter/2, seat_height]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = chair_depth - wire_diameter, d = wire_diameter);\n            }\n        }\n    }\n}\n\nmodule seat_surface() {\n    // Mesh seat surface\n    seat_width = chair_width - wire_diameter*4;\n    seat_depth = chair_depth - wire_diameter*2;\n    \n    difference() {\n        // Base seat\n        translate([0, chair_depth/2, seat_height - wire_diameter/2]) {\n            cube([seat_width, seat_depth, wire_diameter], center = true);\n        }\n        \n        // Ventilation holes\n        for(x = [-seat_width/2 + 5 : 10 : seat_width/2 - 5]) {\n            for(y = [-seat_depth/2 + 5 : 10 : seat_depth/2 - 5]) {\n                translate([x, y, seat_height - wire_diameter/2]) {\n                    cylinder(h = wire_diameter + 1, d = 3, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule back_support() {\n    // Curved backrest following paper clip form\n    back_height = chair_height - seat_height - 10;\n    \n    // Main backrest frame\n    translate([0, -wire_diameter, seat_height + back_height/2]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = chair_width - wire_diameter*2, d = wire_diameter, center = true);\n        }\n    }\n    \n    // Vertical supports\n    for(x = [-chair_width/2 + wire_diameter*2 : 15 : chair_width/2 - wire_diameter*2]) {\n        translate([x, -wire_diameter, seat_height + back_height/2]) {\n            wire_segment(back_height);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_surface();\n    back_support();\n    \n    // Armrests - paper clip extensions\n    translate([-chair_width/2 - inner_radius, chair_depth/2, seat_height + 10]) {\n        rotate([0, 90, 0]) {\n            paper_clip_loop(inner_radius/2, wire_diameter);\n        }\n    }\n    \n    translate([chair_width/2 + inner_radius, chair_depth/2, seat_height + 10]) {\n        rotate([0, 90, 180]) {\n            paper_clip_loop(inner_radius/2, wire_diameter);\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "push_pin",
    "openscad_code": "// Push Pin Furniture - Office Supply Organizer\n// Realistic style, medium complexity\n\n// Main parameters\npin_height = 80;\npin_diameter = 12;\nhead_diameter = 24;\nhead_height = 8;\nbase_diameter = 100;\nbase_height = 15;\nwall_thickness = 2;\n\n// Pin module\nmodule push_pin() {\n    union() {\n        // Sharp tip\n        translate([0, 0, 0])\n            cylinder(h=10, r1=pin_diameter/2, r2=0.5, $fn=32);\n        \n        // Main shaft\n        translate([0, 0, 10])\n            cylinder(h=pin_height-10-head_height, r=pin_diameter/2, $fn=32);\n        \n        // Head base\n        translate([0, 0, pin_height-head_height])\n            cylinder(h=head_height, r=head_diameter/2, $fn=64);\n        \n        // Head dome\n        translate([0, 0, pin_height])\n            sphere(r=head_diameter/2, $fn=64);\n    }\n}\n\n// Base module with pin holes\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_height, r=base_diameter/2, $fn=128);\n        \n        // Create pin storage holes\n        for(i = [0:11]) {\n            angle = i * 30;\n            radius = base_diameter/2 - 15;\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            // Pin holes\n            translate([x, y, 2])\n                cylinder(h=base_height-2, r=pin_diameter/2+1, $fn=32);\n        }\n        \n        // Center hole for larger items\n        translate([0, 0, 2])\n            cylinder(h=base_height-2, r=20, $fn=64);\n        \n        // Rounded bottom edge\n        translate([0, 0, -1])\n            cylinder(h=base_height+2, r=base_diameter/2-2, r1=base_diameter/2-2, r2=base_diameter/2-5, $fn=128);\n    }\n    \n    // Add grip rings\n    for(z = [3:3:base_height-3]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=1, r=base_diameter/2, $fn=128);\n                cylinder(h=1, r=base_diameter/2-3, $fn=128);\n            }\n    }\n}\n\n// Decorative elements\nmodule details() {\n    // Top rim\n    translate([0, 0, base_height])\n        difference() {\n            cylinder(h=3, r=base_diameter/2+2, $fn=128);\n            cylinder(h=3, r=base_diameter/2, $fn=128);\n        }\n    \n    // Brand label area\n    translate([base_diameter/2-8, 0, base_height/2])\n        rotate([0, 90, 0])\n            linear_extrude(height=15, center=true)\n                text(\"PUSH PINS\", size=4, font=\"Arial:style=Bold\");\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Details\n    details();\n    \n    // Sample pins (comment out for printing empty holder)\n    // for(i = [0:3]) {\n    //     angle = i * 90;\n    //     radius = base_diameter/2 - 15;\n    //     x = cos(angle) * radius;\n    //     y = sin(angle) * radius;\n    //     \n    //     translate([x, y, base_height]) {\n    //         rotate([0, 0, 0]) {\n    //             push_pin();\n    //         }\n    //     }\n    // }\n}",
    "renders": true
  },
  {
    "office_supply": "thumbtack",
    "openscad_code": "// Thumbtack Chair – a life-size office-supply-inspired piece of furniture\n// Overall scale ≈ 110 mm tall, wide enough to sit\n\n// ---------- PARAMETERS ----------\npinD      = 10;        // diameter of metal pin\nheadD     = 80;        // chair seat diameter\nheadH     = 12;        // seat thickness\nlegH      = 90;        // leg length (total height − headH)\nwall      = 2;         // 3D-print wall thickness\n$fn       = 64;        // smooth curves\n\n// ---------- MODULES ----------\n\n// Pin shaft – hollow cylinder to save material and avoid thick sections\nmodule pinShaft(h) {\n    difference() {\n        cylinder(h = h, d = pinD, center = false);\n        translate([0, 0, wall])\n            cylinder(h = h - wall, d = pinD - 2*wall, center = false);\n    }\n}\n\n// Tapered metal point – cone with small flat tip for safety\nmodule pinTip() {\n    translate([0, 0, -legH + pinD/5])\n        cylinder(h = pinD/2, d1 = pinD, d2 = 0, center = false);\n}\n\n// Chair seat – disc with gentle ergonomic scoop\nmodule chairSeat() {\n    difference() {\n        // main disc\n        cylinder(h = headH, d = headD, center = false);\n\n        // ergonomic dip in center\n        translate([0, 0, headH - 3])\n            cylinder(h = 5, d = headD * 0.6, center = false);\n\n        // central hole for pin shaft\n        translate([0, 0, -1])\n            cylinder(h = headH + 2, d = pinD + 0.5, center = false);\n    }\n}\n\n// Reinforcement ribs under seat for structural strength\nmodule ribs() {\n    for (a = [0:45:135]) {\n        rotate([0, 0, a])\n            translate([headD/4, -wall/2, 0])\n                cube([headD/2, wall, headH/2]);\n    }\n}\n\n// ---------- MAIN MODEL ----------\nunion() {\n    // Chair seat (thumbtack head)\n    chairSeat();\n\n    // Ribs underneath\n    translate([0, 0, 0])\n        ribs();\n\n    // Pin shaft (chair leg)\n    translate([0, 0, headH])\n        pinShaft(legH);\n\n    // Safety tip\n    pinTip();\n}",
    "renders": true
  },
  {
    "office_supply": "rubber_band",
    "openscad_code": "// Rubber Band Organizer - Realistic Office Furniture Style\n// Medium complexity design with proper proportions and 3D printability\n\n// Global parameters\nwall_thickness = 2;\nband_width = 6;\nband_thickness = 1.5;\n\n// Base dimensions\nbase_length = 120;\nbase_width = 80;\nbase_height = 15;\n\n// Post dimensions\npost_diameter = 8;\npost_height = 60;\npost_spacing = 25;\n\n// Rubber band module for realistic appearance\nmodule rubber_band(outer_diameter, thickness, width) {\n    difference() {\n        // Main torus shape\n        rotate_extrude(angle = 360, $fn = 50) {\n            translate([outer_diameter/2 - thickness/2, 0, 0])\n                circle(r = thickness/2, $fn = 20);\n        }\n        \n        // Create flat band profile\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([outer_diameter/2 - thickness, -width/2, -width/2])\n                    cube([thickness, width, width * 2]);\n        }\n    }\n}\n\n// Base platform with rounded edges\nmodule base_platform() {\n    difference() {\n        // Main base\n        minkowski() {\n            cube([base_length, base_width, base_height - wall_thickness]);\n            cylinder(r = wall_thickness, h = 0.1, $fn = 20);\n        }\n        \n        // Lightening holes\n        for(x = [-40:40:40]) {\n            for(y = [-25:50:50]) {\n                translate([x + base_length/2, y + base_width/2, -1])\n                    cylinder(h = base_height + 2, r = 8, $fn = 20);\n            }\n        }\n    }\n}\n\n// Support post with ergonomic top\nmodule support_post(x_pos, y_pos) {\n    union() {\n        // Main post\n        translate([x_pos, y_pos, base_height])\n            cylinder(h = post_height, d = post_diameter, $fn = 20);\n        \n        // Rounded top\n        translate([x_pos, y_pos, base_height + post_height])\n            sphere(d = post_diameter + 2, $fn = 20);\n        \n        // Grip ring\n        translate([x_pos, y_pos, base_height + post_height * 0.7])\n            cylinder(h = 6, d = post_diameter + 4, $fn = 20);\n    }\n}\n\n// Rubber band storage on posts\nmodule stored_bands() {\n    band_sizes = [\n        [25, 1.5, 6],  // Small bands\n        [35, 1.5, 6],  // Medium bands\n        [45, 1.5, 6]   // Large bands\n    ];\n    \n    for(i = [0:2]) {\n        for(j = [0:1]) {\n            translate([\n                -25 + i * post_spacing + base_length/2,\n                -12.5 + j * 25 + base_width/2,\n                base_height + post_height * 0.3\n            ]) {\n                rotate([90, 0, 0])\n                    rubber_band(\n                        band_sizes[i][0],\n                        band_sizes[i][1],\n                        band_sizes[i][2]\n                    );\n            }\n        }\n    }\n}\n\n// Label area\nmodule label_area() {\n    translate([base_length/2, -5, base_height - 1]) {\n        difference() {\n            cube([40, 10, 2]);\n            translate([2, 2, -1])\n                cube([36, 6, 4]);\n        }\n    }\n}\n\n// Anti-slip feet\nmodule feet() {\n    foot_positions = [\n        [15, 15], [15, base_width - 15],\n        [base_length - 15, 15], [base_length - 15, base_width - 15]\n    ];\n    \n    for(pos = foot_positions) {\n        translate([pos[0], pos[1], -2]) {\n            difference() {\n                cylinder(h = 4, d = 8, $fn = 20);\n                cylinder(h = 5, d = 4, $fn = 20);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base_platform();\n    \n    // Support posts\n    support_post(base_length * 0.25, base_width * 0.25);\n    support_post(base_length * 0.75, base_width * 0.25);\n    support_post(base_length * 0.25, base_width * 0.75);\n    support_post(base_length * 0.75, base_width * 0.75);\n    \n    // Central support\n    support_post(base_length/2, base_width/2);\n    \n    // Stored rubber bands\n    stored_bands();\n    \n    // Label\n    label_area();\n    \n    // Feet\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "tape_dispenser",
    "openscad_code": "// Office Tape Dispenser - Realistic Furniture Style\n// Overall dimensions: 120mm x 60mm x 40mm\n\n$fn = 32;\n\n// Main body base\nmodule base() {\n    difference() {\n        // Main platform\n        translate([0, 0, 5])\n            cube([120, 60, 10], center=true);\n        \n        // Tape slot cutout\n        translate([0, 0, 0])\n            cube([24, 55, 20], center=true);\n        \n        // Weight reduction cavities\n        for(x = [-40, 0, 40]) {\n            translate([x, -20, 5])\n                cube([20, 15, 8], center=true);\n            translate([x, 20, 5])\n                cube([20, 15, 8], center=true);\n        }\n    }\n}\n\n// Tape spindle\nmodule spindle() {\n    // Central core\n    cylinder(h=25, r=4);\n    \n    // Top cap\n    translate([0, 0, 25])\n        cylinder(h=3, r=6);\n    \n    // Base flange\n    translate([0, 0, 0])\n        cylinder(h=2, r=6);\n}\n\n// Cutting blade assembly\nmodule blade() {\n    difference() {\n        // Blade holder\n        translate([55, 0, 15])\n            cube([15, 58, 8], center=true);\n        \n        // Serrated blade teeth\n        for(i = [-25:5:25]) {\n            translate([62, i, 19])\n                rotate([0, 45, 0])\n                    cube([2, 3, 1], center=true);\n        }\n    }\n}\n\n// Side supports\nmodule side_support() {\n    difference() {\n        // Left support\n        translate([-55, -30, 20])\n            cube([10, 10, 30], center=true);\n        \n        // Right support\n        translate([-55, 30, 20])\n            cube([10, 10, 30], center=true);\n    }\n}\n\n// Non-slip pads\nmodule pads() {\n    for(x = [-40, 40]) {\n        for(y = [-20, 20]) {\n            translate([x, y, 0])\n                cylinder(h=1, r=4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    base();\n    \n    // Side structural supports\n    side_support();\n    \n    // Tape spindle positioned in center\n    translate([0, 0, 12])\n        spindle();\n    \n    // Cutting blade\n    blade();\n    \n    // Non-slip pads on bottom\n    pads();\n}",
    "renders": true
  },
  {
    "office_supply": "desk_organizer",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Desk organizer overall size\nbase_w = 120;\nbase_d = 80;\nbase_h = 15;\n\n// Wall thickness\nwall = 2;\n\n// Compartments\ncomp_x = [10, 35, 65, 95];\ncomp_w = [20, 25, 25, 20];\ncomp_d = [60, 60, 60, 60];\ncomp_h = 50;\n\n// Pen holder\npen_r = 15;\npen_x = 100;\npen_y = 15;\n\n// Phone stand slot\nslot_w = 12;\nslot_h = 10;\nslot_d = 15;\nslot_x = 60;\nslot_y = 75;\n\n// Base with rounded edges\nmodule base() {\n    difference() {\n        // Main base block\n        cube([base_w, base_d, base_h], center=false);\n        \n        // Rounded bottom edges\n        translate([wall, wall, -1])\n            cube([base_w-2*wall, base_d-2*wall, wall+1]);\n        translate([wall, wall, -1])\n            cylinder(h=wall+1, r=wall, $fn=20);\n        translate([base_w-wall, wall, -1])\n            rotate([0,0,90])\n                cylinder(h=wall+1, r=wall, $fn=20);\n        translate([wall, base_d-wall, -1])\n            rotate([0,0,-90])\n                cylinder(h=wall+1, r=wall, $fn=20);\n        translate([base_w-wall, base_d-wall, -1])\n            rotate([0,0,180])\n                cylinder(h=wall+1, r=wall, $fn=20);\n    }\n}\n\n// Side wall generator\nmodule side_wall(len, ht) {\n    difference() {\n        cube([len, wall, ht]);\n        translate([0, 0, ht-2])\n            cube([len, wall, 2]);\n    }\n}\n\n// Back wall generator\nmodule back_wall(len, ht) {\n    difference() {\n        cube([wall, len, ht]);\n        translate([0, 0, ht-2])\n            cube([wall, len, 2]);\n    }\n}\n\n// Compartment walls\nmodule compartment_walls() {\n    // Left side wall\n    translate([0, 0, base_h])\n        side_wall(base_w, comp_h);\n    \n    // Right side wall\n    translate([0, base_d-wall, base_h])\n        side_wall(base_w, comp_h);\n    \n    // Back wall\n    translate([0, wall, base_h])\n        back_wall(base_d-2*wall, comp_h);\n    \n    // Internal dividers\n    for(i = [0:len(comp_x)-2]) {\n        x = comp_x[i] + comp_w[i];\n        translate([x, wall, base_h])\n            back_wall(base_d-wall-2, comp_h);\n    }\n}\n\n// Pen holder cylinder\nmodule pen_holder() {\n    difference() {\n        translate([pen_x, pen_y, base_h])\n            cylinder(h=comp_h, r=pen_r+wall, $fn=32);\n        translate([pen_x, pen_y, base_h+2])\n            cylinder(h=comp_h-2, r=pen_r, $fn=32);\n    }\n}\n\n// Phone stand slot\nmodule phone_stand() {\n    translate([slot_x, slot_y, base_h+comp_h-slot_h])\n        cube([slot_w, slot_d, slot_h]);\n}\n\n// Main assembly\nunion() {\n    base();\n    compartment_walls();\n    pen_holder();\n    phone_stand();\n    \n    // Front edge rounding\n    translate([wall, wall, base_h])\n        cube([base_w-2*wall, wall, comp_h]);\n    \n    // Top lip for structure\n    translate([0, 0, base_h+comp_h-wall])\n        cube([base_w, base_d, wall]);\n}",
    "renders": true
  },
  {
    "office_supply": "pencil",
    "openscad_code": "// Pencil Chair - Realistic style, medium complexity\n// A chair shaped like a giant pencil, designed for 3D printing\n\n// Overall dimensions (mm)\nchair_height = 120;\nseat_height = 45;\nseat_diameter = 40;\npencil_diameter = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule pencil_chair() {\n    // Main pencil body (backrest)\n    translate([0, 0, seat_height]) {\n        // Pencil shaft\n        difference() {\n            cylinder(h=chair_height-seat_height, d=pencil_diameter, $fn=32);\n            // Hollow interior for material saving\n            cylinder(h=chair_height-seat_height-5, d=pencil_diameter-wall_thickness*2, $fn=32);\n        }\n        \n        // Pencil tip (seat back)\n        translate([0, 0, chair_height-seat_height]) {\n            cylinder(h=pencil_diameter/2, d1=pencil_diameter, d2=5, $fn=32);\n        }\n        \n        // Pencil ferrule (metal band)\n        translate([0, 0, (chair_height-seat_height)*0.85]) {\n            color([0.7, 0.7, 0.7]) {\n                cylinder(h=8, d=pencil_diameter+2, $fn=32);\n            }\n        }\n        \n        // Eraser\n        translate([0, 0, (chair_height-seat_height)*0.85+8]) {\n            color([0.9, 0.5, 0.5]) {\n                cylinder(h=10, d=pencil_diameter+2, $fn=32);\n            }\n        }\n    }\n    \n    // Seat platform\n    translate([0, 0, seat_height/2]) {\n        difference() {\n            cylinder(h=seat_height, d=seat_diameter+10, $fn=32);\n            // Hollow interior\n            cylinder(h=seat_height-wall_thickness, d=seat_diameter+10-wall_thickness*2, $fn=32);\n        }\n        \n        // Seat cushion detail\n        translate([0, 0, seat_height-wall_thickness]) {\n            color([0.2, 0.2, 0.2]) {\n                cylinder(h=wall_thickness*2, d=seat_diameter, $fn=32);\n            }\n        }\n    }\n    \n    // Legs (4 pencil legs)\n    leg_positions = [\n        [seat_diameter/2-5, seat_diameter/2-5],\n        [-seat_diameter/2+5, seat_diameter/2-5],\n        [seat_diameter/2-5, -seat_diameter/2+5],\n        [-seat_diameter/2+5, -seat_diameter/2+5]\n    ];\n    \n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], 0]) {\n            // Pencil leg shaft\n            difference() {\n                cylinder(h=seat_height-wall_thickness*2, d=8, $fn=12);\n                cylinder(h=seat_height-wall_thickness*3, d=8-wall_thickness*2, $fn=12);\n            }\n            \n            // Pencil tip at bottom\n            translate([0, 0, seat_height-wall_thickness*2]) {\n                color([0.6, 0.4, 0.2]) {\n                    cylinder(h=8, d1=8, d2=2, $fn=12);\n                }\n            }\n            \n            // Lead tip\n            translate([0, 0, seat_height-wall_thickness*2+8]) {\n                color([0.1, 0.1, 0.1]) {\n                    sphere(d=2, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Structural supports between legs\n    support_height = seat_height/2;\n    for (i = [0:3]) {\n        start = leg_positions[i];\n        end = leg_positions[(i+1)%4];\n        \n        // Calculate support position\n        mid_x = (start[0] + end[0]) / 2;\n        mid_y = (start[1] + end[1]) / 2;\n        angle = atan2(end[1] - start[1], end[0] - start[0]);\n        \n        translate([mid_x, mid_y, support_height]) {\n            rotate([0, 0, angle]) {\n                // Support beam\n                difference() {\n                    cube([sqrt(pow(end[0]-start[0], 2) + pow(end[1]-start[1], 2)) - 10, 4, 8]);\n                    cube([sqrt(pow(end[0]-start[0], 2) + pow(end[1]-start[1], 2)) - 10 - wall_thickness*2, \n                          4-wall_thickness*2, 8-wall_thickness*2]);\n                }\n            }\n        }\n    }\n    \n    // Hexagonal pencil texture on main body\n    hex_size = 3;\n    for (i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([0, 0, 0]) {\n                // Hexagonal ridges\n                for (h = [seat_height+10:5:chair_height-10]) {\n                    color([0.7, 0.5, 0.3]) {\n                        translate([pencil_diameter/2-1, 0, h]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h=2, d=hex_size, $fn=6);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the chair\npencil_chair();",
    "renders": true
  },
  {
    "office_supply": "pen",
    "openscad_code": "// Pen Holder Desk Furniture\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nbase_diameter = 80;\nbase_height = 8;\nholder_height = 100;\npen_hole_diameter = 12;\npen_hole_depth = 85;\nsupport_rings = 3;\n\n// Base module with chamfered edge\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_diameter, center = false);\n        \n        // Chamfer bottom edge\n        translate([0, 0, -0.1])\n            cylinder(h = base_height + 0.2, d1 = base_diameter - 4, d2 = base_diameter - 8, center = false);\n        \n        // Recess bottom for weight reduction\n        translate([0, 0, 0.5])\n            cylinder(h = base_height - 1, d = base_diameter - wall_thickness*2, center = false);\n    }\n}\n\n// Support ring structure\nmodule support_ring(height, diameter) {\n    difference() {\n        cylinder(h = wall_thickness, d = diameter, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = wall_thickness + 0.2, d = diameter - wall_thickness*2, center = false);\n    }\n}\n\n// Main holder body with tapered design\nmodule holder_body() {\n    difference() {\n        // Tapered cylinder\n        cylinder(h = holder_height, d1 = base_diameter - 10, d2 = base_diameter - 20, center = false);\n        \n        // Hollow interior\n        translate([0, 0, -0.1])\n            cylinder(h = holder_height + 0.2, d1 = base_diameter - 10 - wall_thickness*2, \n                    d2 = base_diameter - 20 - wall_thickness*2, center = false);\n    }\n}\n\n// Pen holes with countersink\nmodule pen_hole() {\n    difference() {\n        // Main hole\n        cylinder(h = pen_hole_depth, d = pen_hole_diameter, center = false);\n        \n        // Countersink top\n        translate([0, 0, -0.1])\n            cylinder(h = 3, d1 = pen_hole_diameter + 4, d2 = pen_hole_diameter, center = false);\n    }\n}\n\n// Ventilation slots for air flow\nmodule vent_slot(height) {\n    difference() {\n        cube([base_diameter - 30, wall_thickness + 1, height], center = true);\n        cube([base_diameter - 34, wall_thickness - 1, height - 2], center = true);\n    }\n}\n\n// Anti-slip pads base\nmodule grip_pads() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([(base_diameter/2 - 5), 0, -0.1])\n                cylinder(h = 1, d = 8, center = false);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Holder body\n    translate([0, 0, base_height])\n        holder_body();\n    \n    // Support rings\n    for(i = [1:support_rings]) {\n        translate([0, 0, base_height + (holder_height/(support_rings+1))*i])\n            support_ring(wall_thickness, base_diameter - 15 - i*3);\n    }\n    \n    // Pen holes array (5 holes in pentagon pattern)\n    for(i = [0:4]) {\n        angle = i * 72;\n        radius = 25;\n        translate([cos(angle)*radius, sin(angle)*radius, base_height + holder_height - pen_hole_depth - 2])\n            pen_hole();\n    }\n    \n    // Center pen hole\n    translate([0, 0, base_height + holder_height - pen_hole_depth - 2])\n        pen_hole();\n    \n    // Ventilation slots\n    translate([0, 0, base_height + holder_height/2])\n        rotate([0, 0, 45])\n            vent_slot(holder_height/2 - 10);\n    \n    translate([0, 0, base_height + holder_height/2])\n        rotate([0, 0, -45])\n            vent_slot(holder_height/2 - 10);\n    \n    // Grip pads on bottom\n    grip_pads();\n    \n    // Logo area recess\n    translate([0, (base_diameter - 10)/2 - 5, base_height/2])\n        cube([20, 0.5, 4], center = true);\n}",
    "renders": true
  },
  {
    "office_supply": "marker",
    "openscad_code": "// Marker Furniture - Realistic Office Supply Holder\n// Medium complexity with functional design\n\n$fn = 50;\n\n// Main dimensions (in mm)\nmarker_length = 120;\nmarker_diameter = 18;\nbase_height = 25;\nwall_thickness = 2;\n\nmodule marker_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = marker_length, d = marker_diameter, center = false);\n        // Hollow center for ink storage\n        translate([0, 0, wall_thickness])\n            cylinder(h = marker_length - wall_thickness*2, d = marker_diameter - wall_thickness*2, center = false);\n    }\n    \n    // Tapered tip\n    translate([0, 0, marker_length])\n        cylinder(h = 15, d1 = marker_diameter, d2 = marker_diameter - 4, center = false);\n}\n\nmodule cap() {\n    // Cap body\n    difference() {\n        cylinder(h = 25, d = marker_diameter + 1, center = false);\n        translate([0, 0, wall_thickness])\n            cylinder(h = 25 - wall_thickness, d = marker_diameter - wall_thickness, center = false);\n    }\n    \n    // Clip detail\n    translate([marker_diameter/2 - 1, 0, 15])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 15, d = 3, center = false);\n                translate([0, 0, wall_thickness])\n                    cylinder(h = 15 - wall_thickness, d = 3 - wall_thickness*2, center = false);\n            }\n}\n\nmodule base_stand() {\n    // Main base platform\n    difference() {\n        cube([80, 40, base_height], center = true);\n        translate([0, 0, wall_thickness])\n            cube([80 - wall_thickness*2, 40 - wall_thickness*2, base_height], center = true);\n    }\n    \n    // Marker slots - 5 positions\n    for(i = [0:4]) {\n        translate([-30 + i*15, 0, base_height/2])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = base_height, d = marker_diameter + 1, center = true);\n                    translate([0, 0, -wall_thickness])\n                        cylinder(h = base_height + wall_thickness*2, d = marker_diameter - 1, center = true);\n                }\n    }\n    \n    // Support ribs\n    for(i = [0:4]) {\n        translate([-30 + i*15, 15, base_height/2 - 5])\n            cube([wall_thickness*2, 10, base_height - 10], center = true);\n        translate([-30 + i*15, -15, base_height/2 - 5])\n            cube([wall_thickness*2, 10, base_height - 10], center = true);\n    }\n}\n\nmodule grip_texture() {\n    // Hexagonal grip pattern\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([marker_diameter/2 - 1, 0, 25 + i*5])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 3, center = true);\n    }\n}\n\nmodule complete_marker() {\n    // Main marker assembly\n    marker_body();\n    \n    // Add grip texture\n    grip_texture();\n    \n    // Cap positioned on top\n    translate([0, 0, marker_length + 15])\n        cap();\n}\n\n// Assembly\ntranslate([0, 0, base_height/2])\n    base_stand();\n\n// Markers in holder\nfor(i = [0:4]) {\n    translate([-30 + i*15, 0, base_height + marker_length/2])\n        rotate([0, 0, 0])\n            complete_marker();\n}",
    "renders": true
  },
  {
    "office_supply": "highlighter",
    "openscad_code": "// Highlighter Desk Chair (realistic office style)\n// Overall dimensions: 100mm length, 60mm width, 90mm height\n\n// Base thickness for 3D printing\nwall = 2;\n\n// Main highlighter body (seat)\nmodule highlighter_body() {\n    // Main barrel shape\n    translate([0, 0, 30]) \n        rotate([90, 0, 0])\n        cylinder(h=80, d1=48, d2=52, $fn=32);\n    \n    // Cap (backrest)\n    translate([0, 0, 75])\n        rotate([90, 0, 0])\n        cylinder(h=20, d1=52, d2=48, $fn=32);\n    \n    // Tip (front edge)\n    translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h=10, d1=45, d2=48, $fn=32);\n}\n\n// Chair legs (4 legs)\nmodule chair_legs() {\n    for(i = [0, 90, 180, 270]) {\n        rotate([0, 0, i])\n        translate([20, 0, 0])\n        cylinder(h=30, d=6, $fn=12);\n    }\n}\n\n// Armrest supports\nmodule armrests() {\n    // Left arm\n    translate([-25, 0, 45])\n    rotate([0, 15, 0])\n    cube([2, 25, 20]);\n    \n    // Right arm\n    translate([25, 0, 45])\n    rotate([0, -15, 0])\n    cube([2, 25, 20]);\n}\n\n// Lumbar support (text grip area)\nmodule lumbar_support() {\n    // Central support\n    translate([0, -25, 40])\n    rotate([90, 0, 0])\n    cylinder(h=30, d=8, $fn=20);\n    \n    // Horizontal support bars\n    for(y = [35:5:55]) {\n        translate([0, -25, y])\n        cube([30, 2, 2]);\n    }\n}\n\n// Wheel base (5-star base)\nmodule wheel_base() {\n    // Center hub\n    translate([0, 0, 0])\n    cylinder(h=8, d=12, $fn=20);\n    \n    // Star legs\n    for(angle = [0:72:360]) {\n        rotate([0, 0, angle])\n        translate([8, 0, 0])\n        cube([20, 4, 6]);\n    }\n}\n\n// Gas cylinder (height adjustment)\nmodule gas_cylinder() {\n    translate([0, 0, 6])\n    cylinder(h=15, d=8, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Chair assembly\n    union() {\n        highlighter_body();\n        chair_legs();\n        armrests();\n        lumbar_support();\n    }\n    \n    // Base assembly\n    translate([0, 0, 0])\n    union() {\n        wheel_base();\n        gas_cylinder();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "eraser",
    "openscad_code": "// Eraser Furniture - Realistic Office Chair Design\n// Inspired by a large pink eraser transformed into an office chair\n\n// Parameters\n$fn = 50;\nseat_width = 80;\nseat_depth = 75;\nseat_thickness = 12;\nback_height = 90;\narmrest_height = 65;\nleg_height = 45;\nleg_diameter = 8;\nwall_thickness = 2;\n\n// Eraser texture pattern module\nmodule eraser_texture(size, depth) {\n    for (i = [0:3]) {\n        for (j = [0:3]) {\n            translate([i * (size/4) - size/2 + size/8, \n                      j * (size/4) - size/2 + size/8, \n                      0])\n                cube([size/4 - 1, size/4 - 1, depth], center = true);\n        }\n    }\n}\n\n// Main seat - eraser body\nmodule eraser_seat() {\n    difference() {\n        // Main seat block\n        cube([seat_width, seat_depth, seat_thickness], center = true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -wall_thickness/2])\n            cube([seat_width - 2*wall_thickness, \n                  seat_depth - 2*wall_thickness, \n                  seat_thickness], center = true);\n        \n        // Eraser texture on top\n        translate([0, 0, seat_thickness/2 + 0.1])\n            eraser_texture(seat_width * 0.8, 0.5);\n    }\n}\n\n// Chair back - taller eraser piece\nmodule chair_back() {\n    difference() {\n        // Main back support\n        translate([0, -seat_depth/2 + 5, back_height/2 + seat_thickness/2])\n            cube([seat_width * 0.8, seat_thickness * 0.8, back_height], center = true);\n        \n        // Hollow center\n        translate([0, -seat_depth/2 + 5, back_height/2 + seat_thickness/2])\n            cube([seat_width * 0.8 - 2*wall_thickness, \n                  seat_thickness * 0.8 - 2*wall_thickness, \n                  back_height], center = true);\n        \n        // Lumbar support curve\n        translate([0, -seat_depth/2 + 5 - seat_thickness/2, \n                  seat_thickness/2 + 25])\n            rotate([0, 10, 0])\n            cube([seat_width * 0.8 + 2, seat_thickness * 0.8, 30], center = true);\n    }\n}\n\n// Armrest - eraser blocks\nmodule armrest(side) {\n    translate([side * (seat_width/2 - 5), 0, armrest_height])\n        difference() {\n            cube([10, seat_depth * 0.7, 8], center = true);\n            translate([0, 0, 2])\n                cube([6, seat_depth * 0.7 - 2*wall_thickness, 4], center = true);\n        }\n}\n\n// Chair legs - cylindrical supports\nmodule chair_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, leg_height/2])\n        difference() {\n            cylinder(h = leg_height, d = leg_diameter, center = true);\n            cylinder(h = leg_height, d = leg_diameter - 2*wall_thickness, center = true);\n        }\n}\n\n// Base support structure\nmodule base_support() {\n    translate([0, 0, leg_height - 2])\n        difference() {\n            cube([seat_width + 20, seat_depth + 20, 4], center = true);\n            cube([seat_width + 20 - 2*wall_thickness, \n                  seat_depth + 20 - 2*wall_thickness, \n                  4], center = true);\n        }\n}\n\n// Assembly\nunion() {\n    // Seat\n    eraser_seat();\n    \n    // Back\n    chair_back();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs with base\n    base_support();\n    chair_leg(seat_width/2 - 15, seat_depth/2 - 15);\n    chair_leg(-seat_width/2 + 15, seat_depth/2 - 15);\n    chair_leg(seat_width/2 - 15, -seat_depth/2 + 15);\n    chair_leg(-seat_width/2 + 15, -seat_depth/2 + 15);\n    \n    // Optional: Eraser shavings detail at base\n    translate([seat_width/2 - 10, seat_depth/2 - 5, leg_height - 1])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d1 = 5, d2 = 3);\n}",
    "renders": true
  },
  {
    "office_supply": "sharpener",
    "openscad_code": "// Sharpener furniture item - realistic desk sharpener\n// Overall dimensions: 80 x 60 x 80 mm\n\n// Parameters\nbody_width = 60;\nbody_depth = 40;\nbody_height = 60;\nwall_thickness = 2;\nblade_angle = 30;\n\n// Main body with ergonomic curves\nmodule sharpener_body() {\n    difference() {\n        // Main body shape\n        union() {\n            // Base block\n            translate([0, 0, body_height/2])\n                cube([body_width, body_depth, body_height], center=true);\n            \n            // Curved top\n            translate([0, 0, body_height - 5])\n                scale([1, 0.8, 0.4])\n                    sphere(d=body_width);\n        }\n        \n        // Internal cavity\n        translate([0, 0, 5])\n            cube([body_width - wall_thickness*2, body_depth - wall_thickness*2, body_height - 10], center=true);\n        \n        // Pencil entry holes\n        for(i = [-1, 1]) {\n            translate([i * 15, -body_depth/2 - 1, 40])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d1=8, d2=12);\n        }\n        \n        // Shavings exit\n        translate([0, 0, 15])\n            cube([body_width - 20, body_depth + 2, 25], center=true);\n    }\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    // Blade support\n    difference() {\n        translate([0, 0, 35])\n            rotate([0, blade_angle, 0])\n                cube([30, 2, 20], center=true);\n        \n        // Blade screw holes\n        for(pos = [-10, 10]) {\n            translate([pos, 0, 35])\n                rotate([0, blade_angle, 0])\n                    cylinder(h=5, d=3, center=true);\n        }\n    }\n    \n    // Actual blade\n    translate([0, -1, 35])\n        rotate([0, blade_angle, 0])\n            cube([28, 0.5, 18], center=true);\n}\n\n// Base with non-slip pads\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, wall_thickness/2])\n            cube([body_width + 10, body_depth + 10, wall_thickness], center=true);\n        \n        // Non-slip pad recesses\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * 25, y * 15, -0.5])\n                    cube([10, 8, 2]);\n            }\n        }\n    }\n    \n    // Non-slip pads\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * 25, y * 15, 0])\n                cube([10, 8, 1]);\n        }\n    }\n}\n\n// Shavings drawer\nmodule shavings_drawer() {\n    difference() {\n        // Drawer body\n        translate([0, 0, 7.5])\n            cube([body_width - 20, body_depth - wall_thickness*2, 15], center=true);\n        \n        // Handle recess\n        translate([0, (body_depth - wall_thickness*2)/2 + 1, 7.5])\n            cube([20, 3, 5], center=true);\n    }\n    \n    // Drawer handle\n    translate([0, (body_depth - wall_thickness*2)/2 + 3, 7.5])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=5, center=true);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Main body\n    translate([0, 0, wall_thickness])\n        sharpener_body();\n    \n    // Blade assembly\n    blade_assembly();\n    \n    // Shavings drawer\n    shavings_drawer();\n}",
    "renders": true
  },
  {
    "office_supply": "ruler",
    "openscad_code": "// Furniture-style Standing Ruler Shelf (Medium Complexity)\n// Dimensions: 150mm wide x 40mm deep x 80mm tall\n// Wall thickness: 2mm throughout for 3D printing\n\n// Overall dimensions\nwidth = 150;\ndepth = 40;\nheight = 80;\nwall = 2;\n\n// Ruler markings parameters\nmark_height = 3;\nmm_mark_width = 1;\ncm_mark_width = 2;\nmark_spacing = 1;\n\n// Shelf positions\nshelf_positions = [30, 50, 65];\nshelf_thickness = 3;\n\n// Create the ruler body with furniture characteristics\nmodule ruler_body() {\n    // Main body - hollow with 2mm walls\n    difference() {\n        // Outer shape - slightly rounded edges\n        minkowski() {\n            cube([width, depth, height], center=false);\n            sphere(r=1, $fn=8);\n        }\n        \n        // Inner hollow space\n        translate([wall, wall, wall])\n            cube([width-2*wall, depth-2*wall, height-wall], center=false);\n    }\n}\n\n// Create ruler markings on front face\nmodule ruler_markings() {\n    // Millimeter markings (every 5mm)\n    for(i = [0:5:width-5]) {\n        mark_width = (i % 50 == 0) ? cm_mark_width : mm_mark_width;\n        \n        translate([i + wall, wall/2, 0])\n            cube([mark_width, wall, mark_height]);\n    }\n    \n    // Centimeter numbers (every 10mm)\n    for(i = [0:10:width-10]) {\n        // Create number placeholders as blocks\n        translate([i + wall - 2, wall/2, mark_height + 1])\n            cube([4, wall, 4]);\n    }\n}\n\n// Create support legs with furniture-style feet\nmodule support_leg(x_pos) {\n    // Main leg\n    translate([x_pos, 0, 0])\n        cube([4, depth, height]);\n    \n    // Furniture-style foot at bottom\n    translate([x_pos - 2, -2, -2])\n        cube([8, depth + 4, 4]);\n}\n\n// Create shelves with proper joints\nmodule shelf(y_pos) {\n    // Main shelf\n    translate([wall, wall, y_pos])\n        cube([width-2*wall, depth-2*wall, shelf_thickness]);\n    \n    // Support brackets underneath\n    for(x = [10:30:width-20]) {\n        translate([x, wall, y_pos - 5])\n            cube([3, 5, 5]);\n    }\n}\n\n// Create back support brace\nmodule back_brace() {\n    translate([wall, depth-wall, 0])\n        cube([width-2*wall, wall, height]);\n}\n\n// Assembly\nunion() {\n    // Main ruler body\n    ruler_body();\n    \n    // Ruler markings on front\n    ruler_markings();\n    \n    // Support legs\n    support_leg(5);\n    support_leg(width - 9);\n    \n    // Middle support leg\n    support_leg(width/2 - 2);\n    \n    // Shelves\n    for(pos = shelf_positions) {\n        shelf(pos);\n    }\n    \n    // Back brace for stability\n    back_brace();\n    \n    // Add small furniture-style details - corner brackets\n    translate([5, 5, 20])\n        cube([3, 3, 10]);\n    translate([width-8, 5, 20])\n        cube([3, 3, 10]);\n    translate([5, depth-8, 20])\n        cube([3, 3, 10]);\n    translate([width-8, depth-8, 20])\n        cube([3, 3, 10]);\n}",
    "renders": true
  },
  {
    "office_supply": "protractor",
    "openscad_code": "// Protractor Desk Shelf (furniture item)\n// Combines a functional protractor with a small desktop shelf for office supplies\n\n$fn = 32;\n\n// Overall dimensions\nprotractor_radius = 100;\nprotractor_thickness = 4;\nbase_thickness = 8;\nwall_height = 15;\nwall_thickness = 2;\n\nmodule protractor_base() {\n    // Main semicircular base\n    difference() {\n        // Solid semicircle\n        intersection() {\n            cylinder(h=protractor_thickness, r=protractor_radius, center=true);\n            translate([0, -protractor_radius, 0]) \n                cube([protractor_radius*2, protractor_radius, protractor_thickness], center=true);\n        }\n        \n        // Inner hollow space\n        cylinder(h=protractor_thickness+1, r=protractor_radius-15, center=true);\n    }\n}\n\nmodule degree_marks() {\n    // Degree markings (0-180 degrees)\n    for(i = [0:10:180]) {\n        rotate([0, 0, i-90]) {\n            translate([protractor_radius-10, 0, protractor_thickness/2])\n                cube([10, 0.8, 1.2]);\n            // Numbers every 30 degrees\n            if(i % 30 == 0) {\n                translate([protractor_radius-16, 0, protractor_thickness/2+0.6])\n                    rotate([0, 0, -i+90])\n                        cube([6, 0.5, 0.8]);\n            }\n        }\n    }\n}\n\nmodule furniture_support() {\n    // Structural support legs\n    translate([-protractor_radius+15, -protractor_radius+5, -base_thickness/2]) {\n        difference() {\n            cube([30, 10, base_thickness], center=false);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([30-wall_thickness*2, 10-wall_thickness*2, base_thickness], center=false);\n        }\n    }\n    \n    translate([protractor_radius-45, -protractor_radius+5, -base_thickness/2]) {\n        difference() {\n            cube([30, 10, base_thickness], center=false);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([30-wall_thickness*2, 10-wall_thickness*2, base_thickness], center=false);\n        }\n    }\n}\n\nmodule shelf_walls() {\n    // Back wall\n    translate([0, -protractor_radius+5, wall_height/2]) {\n        difference() {\n            cube([protractor_radius*2-20, wall_thickness, wall_height], center=true);\n            translate([0, 0, -wall_height/2+wall_thickness])\n                cube([protractor_radius*2-20-wall_thickness*2, wall_thickness+1, wall_height-wall_thickness], center=true);\n        }\n    }\n    \n    // Side walls\n    translate([-protractor_radius+10, 0, wall_height/2]) {\n        difference() {\n            rotate([0, 0, 90])\n                cube([protractor_radius*2-40, wall_thickness, wall_height], center=true);\n            translate([0, 0, -wall_height/2+wall_thickness])\n                rotate([0, 0, 90])\n                    cube([protractor_radius*2-40-wall_thickness*2, wall_thickness+1, wall_height-wall_thickness], center=true);\n        }\n    }\n    \n    translate([protractor_radius-10, 0, wall_height/2]) {\n        difference() {\n            rotate([0, 0, 90])\n                cube([protractor_radius*2-40, wall_thickness, wall_height], center=true);\n            translate([0, 0, -wall_height/2+wall_thickness])\n                rotate([0, 0, 90])\n                    cube([protractor_radius*2-40-wall_thickness*2, wall_thickness+1, wall_height-wall_thickness], center=true);\n        }\n    }\n}\n\nmodule storage_compartments() {\n    // Pen/pencil dividers\n    for(x = [-40:20:40]) {\n        translate([x, -protractor_radius/2, wall_height/3]) {\n            difference() {\n                cube([wall_thickness*2, protractor_radius-20, wall_height/1.5], center=true);\n                translate([0, 0, -wall_height/3+wall_thickness])\n                    cube([wall_thickness*2-1, protractor_radius-20-wall_thickness*2, wall_height/1.5-wall_thickness], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    translate([0, 0, base_thickness/2])\n        protractor_base();\n    \n    // Furniture elements\n    translate([0, 0, base_thickness])\n        shelf_walls();\n    \n    translate([0, 0, base_thickness])\n        storage_compartments();\n    \n    // Support structure\n    furniture_support();\n    \n    // Degree markings\n    translate([0, 0, base_thickness+0.1])\n        degree_marks();\n    \n    // Center pivot hole\n    translate([0, 0, -base_thickness/2])\n        cylinder(h=base_thickness+protractor_thickness+1, r=2.5, center=false);\n}",
    "renders": true
  },
  {
    "office_supply": "compass",
    "openscad_code": "// Office Desk Compass Furniture Item\n// Medium complexity realistic compass with furniture-style details\n\n$fn = 50;\nwall_thickness = 2;\ncompass_diameter = 80;\ncompass_height = 12;\n\n// Main compass base with furniture-style beveled edge\nmodule compass_base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=compass_height, d=compass_diameter, center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=compass_height+2, d=compass_diameter-wall_thickness*2, center=true);\n        \n        // Bottom recess for stability\n        translate([0, 0, compass_height/2 - wall_thickness])\n            cylinder(h=wall_thickness*2, d=compass_diameter-wall_thickness*4, center=true);\n    }\n    \n    // Furniture-style beveled edge detail\n    translate([0, 0, compass_height/2 - 1])\n        cylinder(h=2, d1=compass_diameter, d2=compass_diameter-wall_thickness);\n}\n\n// Directional indicators with furniture-style joints\nmodule direction_indicator(length, width, angle) {\n    rotate([0, 0, angle])\n    translate([0, length/2 + compass_diameter/4, 0])\n    union() {\n        // Main indicator arm\n        cube([width, length, wall_thickness], center=true);\n        \n        // Furniture-style joint connection\n        translate([0, -length/2, 0])\n        union() {\n            cylinder(h=wall_thickness*1.5, d=width*2, center=true);\n            // Decorative rivet detail\n            translate([0, 0, wall_thickness/2])\n                cylinder(h=wall_thickness, d=width*0.8, center=true);\n        }\n    }\n}\n\n// Compass needle with furniture-style pivot\nmodule compass_needle() {\n    needle_length = compass_diameter * 0.35;\n    needle_width = 4;\n    \n    // Central pivot post (furniture joint style)\n    translate([0, 0, compass_height/2 + wall_thickness])\n        cylinder(h=wall_thickness*3, d=wall_thickness*2, center=true);\n    \n    // Needle assembly\n    translate([0, 0, compass_height/2 + wall_thickness*2.5])\n    union() {\n        // Red north end\n        color(\"red\")\n        translate([0, needle_length/4, 0])\n            cube([needle_width, needle_length/2, wall_thickness], center=true);\n        \n        // Black south end\n        color(\"black\")\n        translate([0, -needle_length/4, 0])\n            cube([needle_width, needle_length/2, wall_thickness], center=true);\n        \n        // Central hub\n        cylinder(h=wall_thickness*1.5, d=needle_width*2, center=true);\n    }\n}\n\n// Cardinal direction labels with furniture-style plaques\nmodule direction_label(text, angle, radius) {\n    rotate([0, 0, angle])\n    translate([0, radius, compass_height/2 - wall_thickness/2])\n    union() {\n        // Plaque base\n        cube([wall_thickness*4, wall_thickness*2, wall_thickness], center=true);\n        \n        // Raised letter detail\n        translate([0, 0, wall_thickness/2 + 0.1])\n            linear_extrude(height=0.5)\n            text(text, size=wall_thickness*1.5, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Decorative furniture-style feet\nmodule support_feet() {\n    foot_diameter = wall_thickness * 3;\n    foot_height = wall_thickness * 2;\n    \n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([compass_diameter/2 - foot_diameter, 0, -compass_height/2 - foot_height/2])\n            cylinder(h=foot_height, d=foot_diameter);\n    }\n}\n\n// Assembly\nunion() {\n    // Main compass body\n    compass_base();\n    \n    // Cardinal direction indicators\n    direction_indicator(compass_diameter*0.15, wall_thickness, 0);\n    direction_indicator(compass_diameter*0.15, wall_thickness, 90);\n    direction_indicator(compass_diameter*0.15, wall_thickness, 180);\n    direction_indicator(compass_diameter*0.15, wall_thickness, 270);\n    \n    // Direction labels\n    direction_label(\"N\", 0, compass_diameter/2 - wall_thickness*3);\n    direction_label(\"E\", 90, compass_diameter/2 - wall_thickness*3);\n    direction_label(\"S\", 180, compass_diameter/2 - wall_thickness*3);\n    direction_label(\"W\", 270, compass_diameter/2 - wall_thickness*3);\n    \n    // Compass needle\n    rotate([0, 0, 45])  // Rotated for display\n        compass_needle();\n    \n    // Support feet\n    support_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "calculator",
    "openscad_code": "// Calculator Furniture - Desk Calculator Model\n// Overall dimensions: 120mm x 80mm x 15mm (realistic desktop calculator size)\n\n// Wall thickness: 2mm for 3D printing\n$fn = 32;\n\n// Main body module\nmodule calculator_body() {\n    // Base shell - hollow box with 2mm walls\n    difference() {\n        // Outer shell\n        cube([120, 80, 15], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cube([116, 76, 13], center = true);\n    }\n}\n\n// Display screen module\nmodule display_screen() {\n    // Screen frame\n    translate([0, 25, 7.5])\n        difference() {\n            cube([70, 20, 2], center = true);\n            translate([0, 0, -1])\n                cube([66, 16, 2], center = true);\n        }\n    \n    // Display glass\n    translate([0, 25, 8.6])\n        color([0.2, 0.2, 0.2])\n            cube([64, 14, 0.5], center = true);\n}\n\n// Button module with realistic spacing\nmodule button(x, y, label_size) {\n    translate([x, y, 7.5]) {\n        // Button base\n        cylinder(h = 2, r = 6, center = true);\n        \n        // Button top\n        translate([0, 0, 1])\n            cylinder(h = 1, r = 5.5, center = true);\n        \n        // Button label area (slightly recessed)\n        translate([0, 0, 2])\n            cylinder(h = 0.3, r = 4.5, center = true);\n    }\n}\n\n// Button grid arrangement\nmodule button_grid() {\n    // Number buttons 0-9\n    for (i = [0:9]) {\n        x = (i % 3 - 1) * 16 - 30;\n        y = (floor(i / 3) - 2) * 14 - 10;\n        if (i > 0) button(x, y, 8);\n    }\n    \n    // Zero button (larger)\n    translate([-30, -24, 7.5]) {\n        cube([32, 12, 2], center = true);\n        translate([0, 0, 1])\n            cube([30, 10, 1], center = true);\n    }\n    \n    // Operation buttons\n    button(30, -10, 6);     // +\n    button(30, -24, 6);     // -\n    button(46, -10, 6);     // *\n    button(46, -24, 6);     // /\n    button(46, 2, 6);       // =\n    \n    // Special function buttons\n    button(-46, -10, 5);    // C\n    button(-46, 2, 5);      // CE\n    button(-46, 14, 5);     // %\n    button(-30, 2, 5);      // .\n    button(-14, 2, 5);      // +/-\n}\n\n// Anti-slip feet\nmodule feet() {\n    for (x = [-45, 45]) {\n        for (y = [-30, 30]) {\n            translate([x, y, -7.5])\n                cylinder(h = 2, r = 3);\n        }\n    }\n}\n\n// Ventilation slots for realistic detail\nmodule ventilation_slots() {\n    for (i = [-2:2]) {\n        translate([i * 20, 0, -0.5])\n            cube([2, 76, 1]);\n    }\n}\n\n// Battery compartment door\nmodule battery_door() {\n    translate([0, -35, -7.5]) {\n        difference() {\n            cube([40, 15, 1]);\n            translate([2, 2, -1])\n                cube([36, 11, 2]);\n        }\n    }\n}\n\n// Assemble the calculator\nunion() {\n    calculator_body();\n    display_screen();\n    button_grid();\n    \n    // Add furniture-specific structural elements\n    feet();\n    \n    // Add realistic details\n    translate([0, 0, -7.5])\n        ventilation_slots();\n    \n    translate([0, 0, -7.5])\n        battery_door();\n}\n\n// Add subtle rounding to edges for realism\nmodule rounded_edges() {\n    minkowski() {\n        children();\n        sphere(0.5);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "calculator_desk",
    "openscad_code": "// Calculator Desk - Realistic Style, Medium Complexity\n// Dimensions: 100mm (W) x 60mm (D) x 40mm (H)\n\n$fn = 32;\n\n// Main desk body\nmodule desk_body() {\n    // Desktop surface with rounded edges\n    difference() {\n        translate([0, 0, 38]) cube([100, 60, 4], center=true);\n        translate([0, 0, 39]) cube([96, 56, 4], center=true);\n    }\n    \n    // Main structure\n    cube([100, 60, 38], center=true);\n}\n\n// Calculator recess\nmodule calculator_recess() {\n    translate([0, 15, 20])\n    cube([80, 25, 18], center=true);\n}\n\n// Pen storage compartment\nmodule pen_storage() {\n    translate([-35, -20, 20])\n    cube([25, 15, 18], center=true);\n}\n\n// Keyboard tray\nmodule keyboard_tray() {\n    translate([0, -25, 10])\n    cube([90, 8, 2], center=true);\n}\n\n// Support legs\nmodule legs() {\n    for(x = [-45, 45])\n    for(y = [-25, 25]) {\n        translate([x, y, 19])\n        cylinder(h=38, r=3);\n    }\n}\n\n// Cable management hole\nmodule cable_hole() {\n    translate([40, 0, 35])\n    rotate([90, 0, 0])\n    cylinder(h=5, r=4);\n}\n\n// Storage drawer\nmodule drawer() {\n    // Drawer face\n    translate([0, 25, 25])\n    cube([50, 2, 10], center=true);\n    \n    // Drawer handle\n    translate([0, 26, 25])\n    cube([20, 1, 2], center=true);\n}\n\n// Document slot\nmodule document_slot() {\n    translate([0, -25, 35])\n    cube([70, 1, 5], center=true);\n}\n\n// Assembly\nunion() {\n    desk_body();\n    legs();\n    \n    difference() {\n        union() {\n            keyboard_tray();\n            drawer();\n            document_slot();\n        }\n        \n        // Remove calculator recess\n        calculator_recess();\n        \n        // Remove pen storage\n        pen_storage();\n        \n        // Add cable management\n        cable_hole();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "calendar",
    "openscad_code": "// Realistic Desk Calendar Furniture Item - Medium Complexity\n// Overall dimensions: 100mm x 80mm x 40mm\n\n$fn = 50;\nwall_thickness = 2;\nbase_depth = 80;\nbase_width = 100;\nbase_height = 8;\n\n// Main calendar base\nmodule calendar_base() {\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Cable management slot at back\n        translate([0, base_depth/2 - 10, base_height/2])\n            cube([60, 20, base_height + 0.1], center=true);\n    }\n}\n\n// Calendar support frame\nmodule calendar_frame() {\n    // Left vertical support\n    translate([-base_width/2 + 10, 0, 25])\n        cube([wall_thickness*4, base_depth - 20, 30]);\n    \n    // Right vertical support\n    translate([base_width/2 - 10, 0, 25])\n        cube([wall_thickness*4, base_depth - 20, 30]);\n    \n    // Top horizontal support\n    translate([0, 0, 40])\n        cube([base_width - 16, wall_thickness*4, wall_thickness*4]);\n}\n\n// Month display panels\nmodule month_panel(month_num) {\n    panel_width = 20;\n    panel_height = 15;\n    panel_depth = 2;\n    \n    translate([-base_width/2 + 12 + (month_num-1)*(panel_width + 2), base_depth/2 - 25, 30])\n        cube([panel_width, panel_height, panel_depth]);\n}\n\n// Date flip cards\nmodule date_cards() {\n    card_width = 8;\n    card_height = 12;\n    card_thickness = 1;\n    \n    // Tens digit (0-3)\n    for(i = [0:3]) {\n        translate([-15 + i*card_width, -base_depth/2 + 20, 20])\n            cube([card_width - 1, card_height, card_thickness]);\n    }\n    \n    // Ones digit (0-9)\n    for(i = [0:9]) {\n        translate([0 + i*card_width, -base_depth/2 + 20, 20])\n            cube([card_width - 1, card_height, card_thickness]);\n    }\n}\n\n// Pen holder integrated into base\nmodule pen_holder() {\n    translate([base_width/2 - 25, base_depth/2 - 25, 0]) {\n        difference() {\n            // Outer cylinder\n            cylinder(h=20, r=15);\n            // Inner hole\n            cylinder(h=21, r=12);\n            // Flat back\n            translate([0, -15, 0])\n                cube([30, 15, 21], center=true);\n        }\n    }\n}\n\n// Anti-slip feet\nmodule feet() {\n    foot_radius = 3;\n    foot_height = 1;\n    \n    positions = [\n        [-base_width/2 + 10, -base_depth/2 + 10],\n        [base_width/2 - 10, -base_depth/2 + 10],\n        [-base_width/2 + 10, base_depth/2 - 10],\n        [base_width/2 - 10, base_depth/2 - 10]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], -foot_height/2])\n            cylinder(h=foot_height, r=foot_radius);\n    }\n}\n\n// Assembly\nunion() {\n    calendar_base();\n    calendar_frame();\n    \n    // All 12 month panels\n    for(m = [1:12]) {\n        month_panel(m);\n    }\n    \n    date_cards();\n    pen_holder();\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "clipboard",
    "openscad_code": "// Clipboard Furniture - Medium Complexity\n// Dimensions in mm, 3D-printable with 2mm walls\n\nclipboard_width = 100;\nclipboard_height = 140;\nclipboard_thickness = 6;\n\nclip_width = 35;\nclip_height = 35;\nclip_depth = 18;\nclip_thickness = 2;\n\nhandle_diameter = 10;\nhandle_height = 8;\nhandle_offset = 8;\n\n// Main clipboard body\nmodule clipboard_body() {\n    difference() {\n        // Main board\n        cube([clipboard_width, clipboard_height, clipboard_thickness], center=false);\n        \n        // Rounded corners\n        translate([2, 2, -1])\n            cube([clipboard_width-4, clipboard_height-4, clipboard_thickness+2], center=false);\n        translate([2, 2, -1])\n            cylinder(h=clipboard_thickness+2, r=2, $fn=20);\n        translate([clipboard_width-2, 2, -1])\n            cylinder(h=clipboard_thickness+2, r=2, $fn=20);\n        translate([2, clipboard_height-2, -1])\n            cylinder(h=clipboard_thickness+2, r=2, $fn=20);\n        translate([clipboard_width-2, clipboard_height-2, -1])\n            cylinder(h=clipboard_thickness+2, r=2, $fn=20);\n    }\n}\n\n// Metal clip mechanism\nmodule clipboard_clip() {\n    // Base plate\n    translate([0, clipboard_height-clip_height, clipboard_thickness])\n    difference() {\n        cube([clip_width, clip_height, clip_thickness]);\n        \n        // Screw holes\n        for(x = [8, clip_width-8])\n            for(y = [8, clip_height-8])\n                translate([x, y, -1])\n                    cylinder(h=clip_thickness+2, r=1.5, $fn=16);\n    }\n    \n    // Clip arm\n    translate([-5, clipboard_height-5, clipboard_thickness+clip_thickness])\n    difference() {\n        union() {\n            // Main arm\n            cube([clip_width+10, 5, clip_depth]);\n            \n            // Curved top\n            translate([clip_width+5, 2.5, clip_depth])\n                rotate([90, 0, 0])\n                    cylinder(h=5, r=clip_depth, $fn=20);\n        }\n        \n        // Grip ridges\n        for(i = [1:3])\n            translate([5+i*8, -1, 2])\n                cube([1, 7, clip_depth-2]);\n    }\n    \n    // Spring support\n    translate([clip_width/2, clipboard_height-clip_height-2, clipboard_thickness])\n    cylinder(h=8, r=2, $fn=16);\n}\n\n// Hanging hole\nmodule hanging_hole() {\n    translate([clipboard_width/2, 12, clipboard_thickness/2])\n    rotate([0, 90, 0])\n    cylinder(h=clipboard_thickness+2, r=4, $fn=20);\n}\n\n// Handle grip for carrying\nmodule handle_grip() {\n    translate([clipboard_width-handle_offset, handle_offset, clipboard_thickness])\n    difference() {\n        cylinder(h=handle_height, r=handle_diameter/2, $fn=20);\n        translate([0, 0, -1])\n            cylinder(h=handle_height+2, r=handle_diameter/2-2, $fn=20);\n    }\n}\n\n// Paper guide rails\nmodule paper_guides() {\n    // Left guide\n    translate([2, 20, 0])\n    cube([2, clipboard_height-40, clipboard_thickness]);\n    \n    // Right guide\n    translate([clipboard_width-4, 20, 0])\n    cube([2, clipboard_height-40, clipboard_thickness]);\n    \n    // Bottom guide\n    translate([2, 20, 0])\n    cube([clipboard_width-4, 2, clipboard_thickness]);\n}\n\n// Assembly\nunion() {\n    clipboard_body();\n    clipboard_clip();\n    hanging_hole();\n    handle_grip();\n    paper_guides();\n}",
    "renders": true
  },
  {
    "office_supply": "notepad",
    "openscad_code": "// Notepad furniture item - realistic office style with medium complexity\n// Dimensions: 120mm x 90mm x 15mm overall\n\n// Module for rounded rectangle base\nmodule rounded_base(w, d, h, r) {\n    difference() {\n        cube([w, d, h], center=true);\n        translate([w/2-r, d/2-r, -h/2-0.1]) cylinder(r=r, h=h+0.2, $fn=20);\n        translate([r-w/2, d/2-r, -h/2-0.1]) cylinder(r=r, h=h+0.2, $fn=20);\n        translate([w/2-r, r-d/2, -h/2-0.1]) cylinder(r=r, h=h+0.2, $fn=20);\n        translate([r-w/2, r-d/2, -h/2-0.1]) cylinder(r=r, h=h+0.2, $fn=20);\n    }\n}\n\n// Module for paper sheets\nmodule paper_sheets(count) {\n    for(i=[0:count-1]) {\n        translate([0, 0, -7.5 + i*0.3]) \n            cube([116, 86, 0.2], center=true);\n    }\n}\n\n// Module for spiral binding rings\nmodule spiral_rings() {\n    for(i=[-45:15:45]) {\n        translate([0, 40, i]) \n            rotate([0, 90, 0]) \n                cylinder(h=3, r=1.5, $fn=12);\n    }\n}\n\n// Module for back cover\nmodule back_cover() {\n    difference() {\n        rounded_base(120, 90, 2, 5);\n        // Spine cutout\n        translate([0, 41, -2]) \n            cube([116, 8, 4], center=true);\n    }\n}\n\n// Module for front cover\nmodule front_cover() {\n    difference() {\n        rounded_base(120, 90, 2, 5);\n        // Spine cutout\n        translate([0, 41, -2]) \n            cube([116, 8, 4], center=true);\n    }\n}\n\n// Module for spine\nmodule spine() {\n    translate([0, 41, 0]) \n        cube([116, 6, 15], center=true);\n}\n\n// Module for structural reinforcement ribs\nmodule ribs() {\n    for(x=[-40:20:40]) {\n        translate([x, 0, -6.5]) \n            cube([2, 80, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Back cover\n    color([0.1, 0.1, 0.1])\n    back_cover();\n    \n    // Spine\n    color([0.15, 0.15, 0.15])\n    spine();\n    \n    // Front cover\n    translate([0, 0, 13])\n        color([0.1, 0.1, 0.1])\n        front_cover();\n    \n    // Paper sheets\n    color([0.95, 0.95, 0.9])\n    paper_sheets(20);\n    \n    // Spiral binding rings\n    color([0.7, 0.7, 0.7])\n    spiral_rings();\n    \n    // Reinforcement ribs on back cover\n    color([0.05, 0.05, 0.05])\n    ribs();\n    \n    // Notepad label\n    translate([0, -30, 13.5])\n        color([0.9, 0.9, 0.9])\n        cube([60, 20, 0.3], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "post_it",
    "openscad_code": "// Post-it Note Dispenser Furniture (Medium Complexity Realistic Style)\n// Dimensions: 90mm x 90mm x 60mm\n\n// Base parameters\nbase_width = 90;\nbase_depth = 90;\nbase_height = 8;\nwall_thickness = 2;\n\n// Note stack parameters\nnote_width = 76;\nnote_depth = 76;\nnote_thickness = 0.1;\nnote_count = 50;\n\n// Dispenser opening\nopening_height = 15;\nopening_width = 78;\n\n// Corner radius for realistic look\ncorner_radius = 5;\n\n// Main base with rounded corners\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (i = [0,1]) {\n            for (j = [0,1]) {\n                for (k = [0,1]) {\n                    translate([\n                        radius * (i*2-1) + size.x/2 * (i*2-1),\n                        radius * (j*2-1) + size.y/2 * (j*2-1),\n                        radius * (k*2-1) + size.z/2 * (k*2-1)\n                    ]) sphere(r=radius);\n                }\n            }\n        }\n    }\n}\n\n// Base structure\nmodule base_structure() {\n    difference() {\n        // Main base\n        rounded_cube([base_width, base_depth, base_height], corner_radius);\n        \n        // Hollow out inside\n        translate([0, 0, -wall_thickness/2])\n            rounded_cube([base_width-wall_thickness*2, base_depth-wall_thickness*2, base_height+wall_thickness], corner_radius-1);\n        \n        // Front opening for note access\n        translate([0, base_depth/2 - wall_thickness, base_height/2])\n            cube([opening_width, wall_thickness*2, opening_height], center=true);\n    }\n}\n\n// Weight chamber for stability\nmodule weight_chamber() {\n    difference() {\n        translate([0, 0, base_height/2 + 2])\n            cube([base_width - 20, base_depth - 20, 4], center=true);\n        \n        // Hollow space for weights\n        translate([0, 0, base_height/2 + 2])\n            cube([base_width - 24, base_depth - 24, 4.1], center=true);\n    }\n}\n\n// Note stack\nmodule note_stack() {\n    for (i = [0:note_count-1]) {\n        translate([0, 0, base_height + i*note_thickness])\n            color([1, 1, 0.8, 0.8])\n                cube([note_width, note_depth, note_thickness], center=true);\n    }\n}\n\n// Dispenser lip with grip texture\nmodule dispenser_lip() {\n    difference() {\n        // Main lip\n        translate([0, -base_depth/2 + 8, base_height + 2])\n            rounded_cube([base_width - 10, 16, 4], 3);\n        \n        // Grip pattern\n        for (i = [-3:3]) {\n            translate([i*10, -base_depth/2 + 8, base_height + 6])\n                cube([2, 12, 2], center=true);\n        }\n    }\n}\n\n// Side support ribs for structure\nmodule support_ribs() {\n    for (side = [-1, 1]) {\n        translate([side * (base_width/2 - 5), 0, base_height/2 + 10])\n            cube([wall_thickness*2, base_depth - 20, 20], center=true);\n    }\n}\n\n// Anti-slip pads\nmodule anti_slip_pads() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * 35, y * 35, 0])\n                cylinder(h=1, r=5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    base_structure();\n    weight_chamber();\n    support_ribs();\n    \n    // Functional elements\n    dispenser_lip();\n    anti_slip_pads();\n    \n    // Note stack (visible portion)\n    translate([0, 0, -note_count*note_thickness/2])\n        note_stack();\n    \n    // Top cover hinge detail\n    translate([0, base_depth/2 - 20, base_height + 18])\n        rotate([90, 0, 0])\n            cylinder(h=base_width - 20, r=2, center=true);\n    \n    // Cover stop\n    translate([0, -base_depth/2 + 25, base_height + 25])\n        cube([base_width - 30, 2, 10], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "sticky_note",
    "openscad_code": "// Sticky Note Holder - Realistic Office Furniture\n// Medium complexity 3D printable design\n\n$fn = 50;\n\n// Overall dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 25;\n\n// Note dimensions\nnote_width = 76;\nnote_depth = 76;\nnote_height = 2;\nnote_stack = 50;\n\n// Pen holder dimensions\npen_diameter = 12;\npen_holder_diameter = 16;\npen_holder_height = 40;\n\n// Support structure\nsupport_thickness = 3;\nback_support_height = 35;\n\nmodule base_structure() {\n    // Main base with rounded edges\n    difference() {\n        // Base body\n        minkowski() {\n            cube([base_width, base_depth, base_height], center = true);\n            sphere(2);\n        }\n        \n        // Recess for notes\n        translate([0, 5, base_height/2])\n            cube([note_width + 4, note_depth - 10, 3], center = true);\n        \n        // Weight reduction holes\n        for (x = [-25, 0, 25]) {\n            for (y = [-15, 0, 15]) {\n                translate([x, y, -base_height/2 + 5])\n                    cylinder(h = 10, d = 8);\n            }\n        }\n    }\n}\n\nmodule back_support() {\n    // Back support structure\n    union() {\n        // Main support\n        translate([0, base_depth/2 - 2, 0])\n            cube([base_width - 6, support_thickness, back_support_height], center = true);\n        \n        // Angled support\n        translate([0, base_depth/2 - 12, back_support_height/2 - 5])\n            rotate([0, 15, 0])\n            cube([base_width - 6, 20, support_thickness], center = true);\n    }\n}\n\nmodule note_stack() {\n    // Stack of sticky notes\n    for (i = [0:note_stack-1]) {\n        translate([0, 0, base_height + i * 0.4]) {\n            color(\"yellow\", 0.9)\n            cube([note_width, note_depth, note_height], center = true);\n        }\n    }\n    \n    // Top note slightly offset\n    translate([2, 2, base_height + note_stack * 0.4 + note_height/2])\n    rotate([0, 0, 5])\n    color(\"yellow\", 0.9)\n    cube([note_width, note_depth, note_height], center = true);\n}\n\nmodule pen_holder() {\n    // Pen holder on right side\n    difference() {\n        // Holder body\n        translate([base_width/2 - 10, 0, 0])\n            cylinder(h = pen_holder_height, d = pen_holder_diameter + 4, center = true);\n        \n        // Pen slot\n        translate([base_width/2 - 10, 0, 0])\n            cylinder(h = pen_holder_height + 2, d = pen_holder_diameter, center = true);\n    }\n    \n    // Pen inside\n    translate([base_width/2 - 10, 0, pen_holder_height/2 - 5])\n    rotate([0, 90, 0])\n    color(\"blue\")\n    cylinder(h = 35, d = pen_diameter);\n}\n\nmodule grip_texture() {\n    // Anti-slip texture on base bottom\n    translate([0, 0, -base_height/2 + 0.5])\n    for (x = [-35:10:35]) {\n        for (y = [-25:10:25]) {\n            translate([x, y, 0])\n                sphere(1.5);\n        }\n    }\n}\n\nmodule decorative_details() {\n    // Brand label\n    translate([0, 0, base_height/2 + 1])\n    cube([30, 8, 0.5], center = true);\n    \n    // Corner reinforcements\n    for (x = [-base_width/2 + 5, base_width/2 - 5]) {\n        for (y = [-base_depth/2 + 5, base_depth/2 - 5]) {\n            translate([x, y, -base_height/2 + 5])\n                cylinder(h = 10, d = 6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_structure();\n    back_support();\n    pen_holder();\n    grip_texture();\n    decorative_details();\n}\n\nnote_stack();",
    "renders": true
  },
  {
    "office_supply": "hole_punch",
    "openscad_code": "// Hole Punch Office Furniture - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm x 60mm x 50mm\n\n$fn = 50;  // Smooth curves\n\n// Main body module\nmodule hole_punch_body() {\n    // Base structure - slightly tapered\n    difference() {\n        union() {\n            // Main chassis\n            translate([0, 0, 10])\n                cube([110, 55, 35], center=true);\n            \n            // Top cover with rounded edges\n            translate([0, 0, 35])\n                minkowski() {\n                    cube([108, 53, 3], center=true);\n                    sphere(2);\n                }\n        }\n        \n        // Paper slot cavity\n        translate([0, 0, 15])\n            cube([105, 50, 12], center=true);\n    }\n}\n\n// Lever arm module\nmodule lever_arm() {\n    // Pivot base\n    translate([-45, 0, 42])\n        rotate([90, 0, 0])\n            cylinder(h=8, r1=6, r2=8, center=true);\n    \n    // Lever handle\n    translate([-10, 0, 42])\n        rotate([0, -10, 0])\n            cube([70, 12, 6], center=true);\n    \n    // Grip pad\n    translate([25, 0, 42])\n        cube([15, 14, 3], center=true);\n    \n    // Pivot rod\n    translate([-45, 0, 42])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=2, center=true);\n}\n\n// Punch mechanism module\nmodule punch_mechanism() {\n    // Punch cylinders (2-hole standard)\n    for(x = [-30, 30]) {\n        // Upper punch guides\n        translate([x, 0, 35])\n            cylinder(h=8, r=4, center=true);\n        \n        // Lower punch dies\n        translate([x, 0, 8])\n            cylinder(h=5, r=4.5, center=true);\n        \n        // Paper guide holes\n        translate([x, 0, 5])\n            cylinder(h=10, r=3, center=true);\n    }\n}\n\n// Base pad module\nmodule rubber_base() {\n    difference() {\n        // Main rubber pad\n        translate([0, 0, 2])\n            cube([105, 55, 4], center=true);\n        \n        // Grip pattern\n        for(x = [-40:20:40]) {\n            for(y = [-20:10:20]) {\n                translate([x, y, 4])\n                    cylinder(h=2, r=3, center=true);\n            }\n        }\n    }\n}\n\n// Paper guide module\nmodule paper_guide() {\n    // Front guide lip\n    translate([0, 27, 20])\n        cube([100, 3, 15], center=true);\n    \n    // Rear guide lip\n    translate([0, -27, 20])\n        cube([100, 3, 15], center=true);\n    \n    // Measurement marks\n    for(i = [0:10:100]) {\n        translate([i-50, 30, 20])\n            cube([0.5, 5, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    hole_punch_body();\n    lever_arm();\n    punch_mechanism();\n    \n    // Furniture details\n    rubber_base();\n    paper_guide();\n    \n    // Structural reinforcements\n    translate([0, 0, 20])\n        difference() {\n            cube([112, 57, 2], center=true);\n            cube([106, 51, 3], center=true);\n        }\n    \n    // Brand label area\n    translate([40, 0, 38])\n        cube([20, 8, 1], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "paper_shredder",
    "openscad_code": "// Paper Shredder - Medium Complexity Realistic Style\n// Dimensions: 120x80x100mm (LxWxH)\n\n// Main body module\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([120, 80, 100], center=false);\n        \n        // Top cavity for shredding mechanism\n        translate([10, 10, 80])\n            cube([100, 60, 15], center=false);\n    }\n}\n\n// Control panel module\nmodule control_panel() {\n    translate([10, 85, 85])\n        cube([100, 10, 10], center=false);\n}\n\n// Power button\nmodule power_button() {\n    translate([60, 87, 92])\n        cylinder(h=3, d=8, $fn=20);\n}\n\n// LED indicator\nmodule led() {\n    color(\"red\")\n    translate([90, 87, 92])\n        sphere(d=6, $fn=20);\n}\n\n// Paper slot\nmodule paper_slot() {\n    difference() {\n        // Slot frame\n        translate([10, 0, 90])\n            cube([100, 10, 12], center=false);\n        \n        // Actual slot\n        translate([20, 0, 93])\n            cube([80, 11, 2], center=false);\n    }\n}\n\n// Handle for drawer\nmodule handle() {\n    translate([55, 0, 45])\n        cylinder(h=30, d=4, center=true);\n}\n\n// Drawer module\nmodule drawer() {\n    difference() {\n        // Drawer body\n        translate([10, 10, 10])\n            cube([100, 60, 60], center=false);\n        \n        // Inner cavity\n        translate([15, 15, 15])\n            cube([90, 50, 50], center=false);\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [1:5]) {\n        translate([20 + (i-1)*20, 79, 50])\n            cube([10, 2, 20], center=false);\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(x = [15, 105]) {\n        for(y = [15, 65]) {\n            translate([x, y, -2])\n                cylinder(h=4, d=8, $fn=20);\n        }\n    }\n}\n\n// Side ribs for structural support\nmodule side_ribs() {\n    // Left side ribs\n    for(i = [1:3]) {\n        translate([0, 20 + (i-1)*20, 20])\n            cube([2, 10, 60], center=false);\n    }\n    \n    // Right side ribs\n    for(i = [1:3]) {\n        translate([118, 20 + (i-1)*20, 20])\n            cube([2, 10, 60], center=false);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    control_panel();\n    power_button();\n    led();\n    paper_slot();\n    drawer();\n    handle();\n    vents();\n    feet();\n    side_ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "envelope",
    "openscad_code": "// Envelope Tray - Realistic office furniture item\n// A desktop organizer designed to hold standard envelopes\n\n// Global parameters for proper scaling\nenvelope_width = 110;\nenvelope_height = 220;\nwall_thickness = 2;\nslot_clearance = 3;\n\n// Main tray body\nmodule tray_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Base plate\n            cube([envelope_width + 20, envelope_height + 20, wall_thickness], center=false);\n            \n            // Front wall\n            translate([0, 0, 0])\n            cube([envelope_width + 20, wall_thickness, 30], center=false);\n            \n            // Back wall\n            translate([0, envelope_height + 20 - wall_thickness, 0])\n            cube([envelope_width + 20, wall_thickness, 30], center=false);\n            \n            // Left wall\n            translate([0, 0, 0])\n            cube([wall_thickness, envelope_height + 20, 30], center=false);\n            \n            // Right wall\n            translate([envelope_width + 20 - wall_thickness, 0, 0])\n            cube([wall_thickness, envelope_height + 20, 30], center=false);\n            \n            // Rounded corners for realistic look\n            translate([wall_thickness, wall_thickness, 30])\n            cylinder(h=wall_thickness, r=wall_thickness*2, $fn=20);\n            translate([envelope_width + 20 - wall_thickness*3, wall_thickness, 30])\n            cylinder(h=wall_thickness, r=wall_thickness*2, $fn=20);\n            translate([wall_thickness, envelope_height + 20 - wall_thickness*3, 30])\n            cylinder(h=wall_thickness, r=wall_thickness*2, $fn=20);\n            translate([envelope_width + 20 - wall_thickness*3, envelope_height + 20 - wall_thickness*3, 30])\n            cylinder(h=wall_thickness, r=wall_thickness*2, $fn=20);\n        }\n        \n        // Inner cavity for envelopes\n        translate([wall_thickness + slot_clearance, wall_thickness + slot_clearance, -1])\n        cube([envelope_width + slot_clearance*2, envelope_height, 32]);\n        \n        // Finger notch for easy access\n        translate([(envelope_width + 20)/2 - 15, envelope_height + 20 - 10, 10])\n        cube([30, wall_thickness + 10, 20]);\n    }\n}\n\n// Support feet for stability\nmodule support_feet() {\n    foot_size = 8;\n    foot_height = 3;\n    \n    // Four corner feet\n    for(x = [foot_size/2, envelope_width + 20 - foot_size*1.5]) {\n        for(y = [foot_size/2, envelope_height + 20 - foot_size*1.5]) {\n            translate([x, y, -foot_height])\n            cylinder(h=foot_height, r=foot_size/2, $fn=20);\n        }\n    }\n}\n\n// Label holder detail\nmodule label_holder() {\n    label_width = 60;\n    label_height = 15;\n    \n    translate([(envelope_width + 20)/2 - label_width/2, wall_thickness/2, 25])\n    difference() {\n        // Holder frame\n        cube([label_width, wall_thickness + 2, label_height]);\n        \n        // Slot for label\n        translate([wall_thickness, wall_thickness/2, wall_thickness])\n        cube([label_width - wall_thickness*2, wall_thickness, label_height - wall_thickness*2]);\n    }\n}\n\n// Stack alignment pins\nmodule stack_pins() {\n    pin_radius = 3;\n    pin_height = 4;\n    \n    // Bottom pin holes\n    for(x = [20, envelope_width + 20 - 20]) {\n        for(y = [20, envelope_height + 20 - 20]) {\n            translate([x, y, -1])\n            cylinder(h=pin_height + 1, r=pin_radius + 1, $fn=16);\n        }\n    }\n    \n    // Top pins for stacking\n    translate([0, 0, 30])\n    for(x = [20, envelope_width + 20 - 20]) {\n        for(y = [20, envelope_height + 20 - 20]) {\n            translate([x, y, 0])\n            cylinder(h=pin_height, r=pin_radius, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    tray_body();\n    support_feet();\n    label_holder();\n    stack_pins();\n}",
    "renders": true
  },
  {
    "office_supply": "letter_tray",
    "openscad_code": "// Letter tray - realistic style, medium complexity\n// Dimensions: 170mm x 120mm x 85mm overall\n\n// Wall thickness constant\nwall = 2;\n\n// Main tray body\nmodule tray_body() {\n    difference() {\n        // Exterior shell\n        union() {\n            // Base\n            translate([0, 0, 2]) cube([170, 120, 2], center = true);\n            // Front wall\n            translate([0, 59, 44]) cube([166, 2, 84], center = true);\n            // Back wall\n            translate([0, -59, 44]) cube([166, 2, 84], center = true);\n            // Left wall\n            translate([-84, 0, 44]) cube([2, 116, 84], center = true);\n            // Right wall\n            translate([84, 0, 44]) cube([2, 116, 84], center = true);\n        }\n        \n        // Interior cavity\n        translate([0, 0, 0]) cube([166-wall*2, 116-wall*2, 84], center = true);\n    }\n}\n\n// Slotted front for visibility\nmodule front_slots() {\n    for(i = [-40:20:40]) {\n        difference() {\n            translate([i, 59.5, 60]) cube([18, 1, 48], center = true);\n            translate([i, 60, 60]) rotate([0, 90, 0]) \n                cylinder(h=20, r=8, $fn=20, center = true);\n        }\n    }\n}\n\n// Reinforcement ribs inside\nmodule support_ribs() {\n    for(y = [-30:30:30]) {\n        translate([0, y, 42]) cube([166-wall*2, 1, 82], center = true);\n    }\n}\n\n// Base with feet\nmodule base_with_feet() {\n    difference() {\n        // Base plate\n        translate([0, 0, 1]) cube([170, 120, 2], center = true);\n        \n        // Recessed areas for feet\n        for(x = [-70, 70])\n        for(y = [-45, 45]) {\n            translate([x, y, 0]) cube([14, 14, 2], center = true);\n        }\n    }\n    \n    // Actual feet\n    for(x = [-70, 70])\n    for(y = [-45, 45]) {\n        translate([x, y, -3]) \n            cylinder(h=4, r=6, $fn=16, center = false);\n    }\n}\n\n// Paper guides (small ridges)\nmodule paper_guides() {\n    for(x = [-60:40:60]) {\n        translate([x, 0, 3]) cube([2, 114, 1], center = true);\n    }\n}\n\n// Label holder on front\nmodule label_holder() {\n    translate([0, 60.5, 75]) {\n        difference() {\n            cube([50, 1, 12], center = true);\n            translate([0, 0.5, 2]) cube([46, 1, 8], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_with_feet();\n    tray_body();\n    front_slots();\n    support_ribs();\n    paper_guides();\n    label_holder();\n}",
    "renders": true
  },
  {
    "office_supply": "cable_manager",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Cable Manager Parameters\nwall_thickness = 2;\nbase_width = 100;\nbase_depth = 80;\nbase_height = 6;\ncompartment_width = 30;\ncompartment_depth = 60;\ncompartment_height = 35;\nnum_compartments = 3;\nslot_width = 3;\nslot_height = 16;\nslot_spacing = 8;\nback_hole_d = 6;\nback_hole_spacing = 15;\n\nmodule main_base() {\n    difference() {\n        // Solid base plate\n        cube([base_width, base_depth, base_height], center=false);\n        \n        // Chamfer bottom edges\n        translate([wall_thickness, wall_thickness, 0])\n            cube([base_width-2*wall_thickness, base_depth-2*wall_thickness, wall_thickness], center=false);\n    }\n}\n\nmodule compartment_wall(x) {\n    translate([x, 0, 0]) {\n        difference() {\n            // Wall block\n            cube([wall_thickness, base_depth, compartment_height], center=false);\n            \n            // Cable slots\n            for (i = [0:floor((base_depth-slot_width)/slot_spacing)]) {\n                translate([0, slot_spacing*i + 5, compartment_height-slot_height])\n                    cube([wall_thickness, slot_width, slot_height], center=false);\n            }\n        }\n    }\n}\n\nmodule compartment_unit(offset_x) {\n    // Side walls\n    compartment_wall(offset_x);\n    compartment_wall(offset_x + compartment_width);\n    \n    // Back wall\n    translate([offset_x, 0, 0]) {\n        difference() {\n            cube([compartment_width, wall_thickness, compartment_height], center=false);\n            \n            // Back holes for zip-ties\n            for (i = [0:floor((compartment_width-back_hole_d)/back_hole_spacing)]) {\n                translate([back_hole_spacing*i + 10, -wall_thickness/2, compartment_height/2])\n                    rotate([0, 90, 0])\n                        cylinder(h=wall_thickness+1, d=back_hole_d, $fn=20);\n            }\n        }\n    }\n    \n    // Front lip\n    translate([offset_x, base_depth-wall_thickness, compartment_height-compartment_height/4])\n        cube([compartment_width, wall_thickness, compartment_height/4], center=false);\n}\n\nmodule cable_routing_hooks() {\n    // Hooks on back edge for longer cables\n    for (i = [0:2]) {\n        translate([10 + i*30, -2, base_height+compartment_height-8]) {\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=8, d1=6, d2=3, $fn=20);\n                    translate([0, 0, -1])\n                        cylinder(h=10, d=2, $fn=20);\n                }\n        }\n    }\n}\n\n// Build the cable manager\nunion() {\n    main_base();\n    \n    // Compartments\n    for (c = [0:num_compartments-1]) {\n        compartment_unit(c*(compartment_width+wall_thickness) + wall_thickness);\n    }\n    \n    // Cover top edges\n    translate([0, 0, compartment_height]) {\n        difference() {\n            cube([base_width, base_depth, wall_thickness], center=false);\n            translate([wall_thickness, wall_thickness, 0])\n                cube([base_width-2*wall_thickness, base_depth-2*wall_thickness, wall_thickness], center=false);\n        }\n    }\n    \n    cable_routing_hooks();\n}",
    "renders": true
  },
  {
    "office_supply": "desk_lamp",
    "openscad_code": "// Desk Lamp - Realistic Style, Medium Complexity\n// Dimensions: ~110mm tall, 3D printable with 2mm walls\n\n// Parameters\n$fn = 32; // Smooth curves\nwall = 2; // Wall thickness for 3D printing\n\n// Main module\nmodule desk_lamp() {\n    // Base - weighted round base\n    base();\n    \n    // Vertical post\n    post();\n    \n    // Adjustable arm joints\n    joint1();\n    joint2();\n    \n    // Lamp head with shade\n    head();\n    \n    // Switch detail\n    switch();\n    \n    // Power cord\n    cord();\n}\n\n// Weighted base\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=8, r1=35, r2=32, center=false);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 2])\n            cylinder(h=6, r1=30, r2=27, center=false);\n        \n        // Cable hole\n        rotate([90, 0, 0])\n            translate([0, 0, -35])\n            cylinder(h=10, r=3, center=true);\n    }\n}\n\n// Vertical post\nmodule post() {\n    translate([0, 0, 8]) {\n        difference() {\n            cylinder(h=60, r=6, center=false);\n            cylinder(h=58, r=4, center=false);\n        }\n    }\n}\n\n// First joint - allows rotation\nmodule joint1() {\n    translate([0, 0, 68]) {\n        difference() {\n            sphere(r=8);\n            sphere(r=6);\n        }\n        \n        // Joint connection point\n        rotate([90, 0, 0])\n            cylinder(h=16, r=4, center=true);\n    }\n}\n\n// Second joint and arm\nmodule joint2() {\n    translate([0, 0, 76]) {\n        // First arm segment\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=35, r=5, center=true);\n                cylinder(h=33, r=3, center=true);\n            }\n        \n        // Second joint\n        translate([0, 0, 35]) {\n            difference() {\n                sphere(r=6);\n                sphere(r=4);\n            }\n            \n            // Second arm segment\n            rotate([45, 0, 0])\n                difference() {\n                    cylinder(h=30, r=4, center=true);\n                    cylinder(h=28, r=2, center=true);\n                }\n        }\n    }\n}\n\n// Lamp head with shade\nmodule head() {\n    translate([0, 0, 35+30*cos(45)]) {\n        rotate([45, 0, 0]) {\n            // Shade holder\n            cylinder(h=8, r=8, center=true);\n            \n            // Lamp shade - conical\n            translate([0, 0, 15])\n                difference() {\n                    cylinder(h1=0, h2=25, r1=20, r2=30, center=true);\n                    cylinder(h1=0, h2=24, r1=18, r2=28, center=true);\n                }\n            \n            // LED panel detail\n            translate([0, 0, 25])\n                cube([30, 30, 2], center=true);\n        }\n    }\n}\n\n// On/off switch detail\nmodule switch() {\n    translate([0, 0, 73]) {\n        difference() {\n            cube([6, 10, 4], center=true);\n            cube([4, 8, 2], center=true);\n        }\n    }\n}\n\n// Power cord\nmodule cord() {\n    // From base\n    translate([30, 0, 4])\n        rotate([0, 90, 90])\n            cylinder(h=40, r=3, center=true);\n    \n    // Natural bend\n    for(i=[0:5:35]) {\n        translate([30+i, -i/3, 4])\n            sphere(r=2.5);\n    }\n}\n\n// Generate the lamp\ndesk_lamp();",
    "renders": true
  },
  {
    "office_supply": "pen_holder",
    "openscad_code": "// Pen holder with realistic office furniture characteristics\n// Overall dimensions: 80x60x100mm\n\n$fn = 32;\n\nmodule pen_holder() {\n    // Main body - hollow rectangular box with rounded edges\n    difference() {\n        // Outer shell\n        union() {\n            // Base\n            translate([0, 0, 5])\n                cube([80, 60, 90], center = true);\n            \n            // Rounded top edge\n            translate([0, 0, 50])\n                cylinder(h = 5, r1 = 40, r2 = 40, center = true);\n            \n            // Front lip detail\n            translate([0, -25, 45])\n                cube([76, 10, 5], center = true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 10])\n            cube([76, 56, 85], center = true);\n        \n        // Pen slots - 6 compartments\n        for(i = [0:5]) {\n            translate([-30 + i*12, 0, 10])\n                cube([10, 54, 85], center = true);\n        }\n    }\n    \n    // Structural reinforcements - corner posts\n    module corner_post(x, y) {\n        translate([x, y, 0])\n            cylinder(h = 10, r = 3, center = false);\n    }\n    \n    corner_post(35, 25);\n    corner_post(-35, 25);\n    corner_post(35, -25);\n    corner_post(-35, -25);\n    \n    // Base frame\n    difference() {\n        // Outer frame\n        translate([0, 0, 2.5])\n            cube([84, 64, 5], center = true);\n        \n        // Inner cutout\n        translate([0, 0, 2.5])\n            cube([78, 58, 6], center = true);\n    }\n    \n    // Anti-slip pads\n    module pad(x, y) {\n        translate([x, y, 0])\n            cylinder(h = 1, r = 4, center = false);\n    }\n    \n    pad(30, 20);\n    pad(-30, 20);\n    pad(30, -20);\n    pad(-30, -20);\n    \n    // Label holder on front\n    translate([0, -29, 30])\n        difference() {\n            cube([40, 2, 15], center = true);\n            translate([0, 0, 0])\n                cube([38, 3, 13], center = true);\n        }\n    \n    // Ergonomic finger grips on sides\n    module grip(x) {\n        translate([x, 0, 25])\n            difference() {\n                cylinder(h = 30, r = 3, center = true);\n                translate([0, 0, 15])\n                    cube([6, 20, 30], center = true);\n            }\n    }\n    \n    grip(41);\n    grip(-41);\n}\n\npen_holder();",
    "renders": true
  },
  {
    "office_supply": "desk_pad",
    "openscad_code": "// Desk Pad with integrated pen tray, wrist rest, and cable routing\n// Overall size: 140 x 220 x 12 mm\n\n$fn = 50;  // Smooth curves for printing\n\nmodule desk_pad() {\n    // Main writing surface\n    difference() {\n        // Base slab\n        translate([0, 0, 2])\n            cube([140, 220, 2], center = true);\n        \n        // Tapered edges (top chamfer)\n        for (i = [-1, 1]) {\n            translate([i * 68, 0, 3])\n                rotate([0, 90, 0])\n                    cylinder(h = 136, r1 = 2, r2 = 0, center = true);\n            translate([0, i * 108, 3])\n                rotate([90, 0, 0])\n                    cylinder(h = 216, r1 = 2, r2 = 0, center = true);\n        }\n    }\n    \n    // Raised wrist rest\n    translate([0, 75, 4])\n        difference() {\n            // Main rest block\n            cube([130, 60, 8], center = true);\n            \n            // Ergonomic curve on top\n            translate([0, 75, 7])\n                cube([130, 5, 8], center = true);\n            translate([0, 75, 7])\n                rotate([90, 0, 0])\n                    cylinder(h = 130, r = 4, center = true);\n        }\n    \n    // Pen tray groove\n    translate([0, -75, 3.5])\n        difference() {\n            // Outer tray block\n            cube([120, 15, 3], center = true);\n            \n            // Groove cutout\n            translate([0, -75, 3.5])\n                cube([110, 10, 4], center = true);\n        }\n    \n    // Cable routing slot (for keyboard cable)\n    translate([-60, 0, 0])\n        difference() {\n            // Raised cable guide\n            cube([10, 220, 4], center = true);\n            \n            // Routing channel\n            translate([-60, 0, 2])\n                cube([6, 220, 5], center = true);\n        }\n    \n    // Anti-slip pads (four corners)\n    for (x = [-55, 55])\n        for (y = [-95, 95])\n            translate([x, y, 1])\n                cylinder(h = 1, r = 5);\n    \n    // Document stop lip at front\n    translate([0, -105, 2.5])\n        cube([120, 2, 3], center = true);\n}\n\n// Render the complete desk pad\ndesk_pad();",
    "renders": true
  },
  {
    "office_supply": "mousepad",
    "openscad_code": "// Realistic Mousepad Furniture Item - Medium Complexity\n// Dimensions: 120mm x 80mm x 3mm (standard mousepad size)\n\n// Main mousepad base with rounded corners\nmodule mousepad_base() {\n    difference() {\n        // Main base shape\n        translate([0, 0, 1.5])\n            minkowski() {\n                cube([116, 76, 1], center=true);\n                cylinder(r=2, h=1, center=true);\n            }\n        \n        // Create rounded edges by subtracting inner cube\n        translate([0, 0, 1])\n            cube([112, 72, 3], center=true);\n    }\n}\n\n// Non-slip rubber bottom texture\nmodule rubber_texture() {\n    for(x = [-50:10:50]) {\n        for(y = [-30:10:30]) {\n            translate([x, y, 0.1])\n                cylinder(r=1, h=0.2, $fn=8);\n        }\n    }\n}\n\n// Fabric surface with subtle texture\nmodule fabric_surface() {\n    difference() {\n        translate([0, 0, 2.9])\n            cube([118, 78, 0.2], center=true);\n        \n        // Fabric weave pattern\n        for(i = [-55:2.5:55]) {\n            translate([i, 0, 2.8])\n                cube([0.5, 76, 0.1], center=true);\n        }\n        for(j = [-35:2.5:35]) {\n            translate([0, j, 2.8])\n                cube([116, 0.5, 0.1], center=true);\n        }\n    }\n}\n\n// Stitched edge detail\nmodule stitched_edge() {\n    // Left and right stitched edges\n    for(side = [-1, 1]) {\n        for(i = [-35:5:35]) {\n            translate([side * 58, i, 1.5])\n                sphere(r=0.3, $fn=6);\n        }\n    }\n    \n    // Front and back stitched edges\n    for(end = [-1, 1]) {\n        for(j = [-55:5:55]) {\n            translate([j, end * 38, 1.5])\n                sphere(r=0.3, $fn=6);\n        }\n    }\n}\n\n// Brand label area\nmodule brand_label() {\n    translate([40, 25, 3])\n        cube([20, 10, 0.1], center=true);\n    \n    // Label border\n    translate([40, 25, 3.1])\n        cube([22, 12, 0.05], center=true);\n}\n\n// Cable management channel (small groove)\nmodule cable_channel() {\n    translate([-40, 0, 2.5])\n        cube([30, 3, 0.5], center=true);\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    mousepad_base();\n    \n    // Bottom rubber layer\n    translate([0, 0, 0])\n        cube([120, 80, 0.5], center=true);\n    \n    // Rubber texture on bottom\n    rubber_texture();\n    \n    // Fabric surface\n    fabric_surface();\n    \n    // Stitched edge decoration\n    stitched_edge();\n    \n    // Brand label area\n    brand_label();\n    \n    // Cable management channel\n    cable_channel();\n}",
    "renders": true
  },
  {
    "office_supply": "keyboard_tray",
    "openscad_code": "// Keyboard tray with sliding rails and ergonomic features\n// Overall dimensions: 130mm wide x 70mm deep x 15mm thick\n\n$fn = 32;\n\n// Main tray body\nmodule tray_body() {\n    difference() {\n        // Main tray platform\n        translate([0, 0, 8])\n            cube([130, 70, 4], center=true);\n        \n        // Ergonomic wrist rest cutout\n        translate([0, 25, 8.5])\n            cube([120, 20, 5], center=true);\n        \n        // Cable routing slot\n        translate([0, -30, 8.5])\n            cube([100, 8, 5], center=true);\n    }\n}\n\n// Tray sides with rail mounts\nmodule tray_sides() {\n    // Left side\n    translate([-63, 0, 0])\n        cube([4, 70, 15], center=true);\n    \n    // Right side\n    translate([63, 0, 0])\n        cube([4, 70, 15], center=true);\n}\n\n// Sliding rail system\nmodule sliding_rails() {\n    // Top rail mounts\n    for(side = [-1, 1]) {\n        translate([side * 75, 0, 13])\n            cube([20, 10, 4], center=true);\n    }\n    \n    // Rail guides\n    for(side = [-1, 1]) {\n        translate([side * 85, 0, 7.5])\n            cube([4, 60, 15], center=true);\n    }\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    for(side = [-1, 1]) {\n        // Front bracket\n        translate([side * 85, -25, 10])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=3, center=true);\n        \n        // Rear bracket\n        translate([side * 85, 25, 10])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=3, center=true);\n    }\n}\n\n// Mouse pad area\nmodule mouse_pad_area() {\n    translate([45, 0, 8.5])\n        cube([35, 50, 1], center=true);\n}\n\n// Structural ribs for strength\nmodule structural_ribs() {\n    for(x = [-40, -20, 0, 20, 40]) {\n        translate([x, 0, 2])\n            cube([2, 65, 12], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    tray_body();\n    tray_sides();\n    mouse_pad_area();\n    \n    // Add structural elements\n    translate([0, 0, 0])\n        structural_ribs();\n    \n    // Rail system\n    sliding_rails();\n    mounting_brackets();\n    \n    // Non-slip pads\n    translate([-40, -25, 6])\n        cylinder(h=1, r=5);\n    translate([-40, 25, 6])\n        cylinder(h=1, r=5);\n    translate([40, -25, 6])\n        cylinder(h=1, r=5);\n    translate([40, 25, 6])\n        cylinder(h=1, r=5);\n}",
    "renders": true
  },
  {
    "office_supply": "monitor_stand",
    "openscad_code": "// Monitor Stand - Realistic Style, Medium Complexity\n// Overall dimensions: 180mm x 120mm x 100mm\n\n// Base parameters\nstand_width = 180;\nstand_depth = 120;\nstand_height = 100;\nwall_thickness = 2;\n\n// Leg parameters\nleg_width = 20;\nleg_height = 80;\nleg_depth = 20;\n\n// Shelf parameters\nshelf_thickness = 4;\nshelf_width = stand_width - 20;\nshelf_depth = stand_depth - 20;\n\n// Cable management hole parameters\nhole_diameter = 25;\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        // Main base\n        translate([0, 0, wall_thickness/2])\n            cube([stand_width, stand_depth, wall_thickness], center=true);\n        \n        // Cable management hole\n        translate([(stand_width/2 - 30), 0, -1])\n            cylinder(h=wall_thickness+2, d=hole_diameter, center=true);\n    }\n}\n\n// Individual leg with rounded corners\nmodule leg() {\n    difference() {\n        // Main leg body\n        cube([leg_width, leg_depth, leg_height], center=true);\n        \n        // Front chamfer\n        translate([0, leg_depth/2 - 2, leg_height/2 - 10])\n            rotate([45, 0, 0])\n                cube([leg_width + 1, 5, 15], center=true);\n    }\n}\n\n// Shelf with rounded edges\nmodule shelf() {\n    difference() {\n        // Main shelf\n        cube([shelf_width, shelf_depth, shelf_thickness], center=true);\n        \n        // Front edge rounding (simulated with chamfer)\n        translate([0, shelf_depth/2 - 1, -shelf_thickness/2 + 1])\n            rotate([45, 0, 0])\n                cube([shelf_width + 1, 2, 2], center=true);\n        \n        // Back edge rounding\n        translate([0, -shelf_depth/2 + 1, -shelf_thickness/2 + 1])\n            rotate([-45, 0, 0])\n                cube([shelf_width + 1, 2, 2], center=true);\n    }\n}\n\n// Support ribs for structure\nmodule support_rib() {\n    translate([0, 0, leg_height/2])\n        cube([leg_width - 4, leg_depth - 4, leg_height/2], center=true);\n}\n\n// Assembly\nunion() {\n    // Base plate\n    translate([0, 0, 0])\n        base_plate();\n    \n    // Front legs\n    translate([stand_width/2 - leg_width/2 - 10, stand_depth/2 - leg_depth/2 - 5, leg_height/2 + wall_thickness])\n        union() {\n            leg();\n            support_rib();\n        }\n    \n    translate([-stand_width/2 + leg_width/2 + 10, stand_depth/2 - leg_depth/2 - 5, leg_height/2 + wall_thickness])\n        union() {\n            leg();\n            support_rib();\n        }\n    \n    // Back legs\n    translate([stand_width/2 - leg_width/2 - 10, -stand_depth/2 + leg_depth/2 + 5, leg_height/2 + wall_thickness])\n        union() {\n            leg();\n            support_rib();\n        }\n    \n    translate([-stand_width/2 + leg_width/2 + 10, -stand_depth/2 + leg_depth/2 + 5, leg_height/2 + wall_thickness])\n        union() {\n            leg();\n            support_rib();\n        }\n    \n    // Top shelf\n    translate([0, 0, stand_height - shelf_thickness/2])\n        shelf();\n    \n    // Middle shelf\n    translate([0, 0, wall_thickness + leg_height/2 + shelf_thickness/2])\n        shelf();\n}",
    "renders": true
  },
  {
    "office_supply": "file_cabinet",
    "openscad_code": "// File Cabinet - Realistic Style, Medium Complexity\n// Dimensions: 40mm W x 60mm H x 80mm D (fits on most printers)\n\n$fn=32;\n\nmodule file_cabinet() {\n    // Main body shell - 2mm walls\n    difference() {\n        // Outer shell\n        cube([40, 80, 60], center=true);\n        \n        // Hollow interior - 2mm wall thickness\n        translate([0, 0, 2])\n            cube([36, 76, 56], center=true);\n    }\n    \n    // Top surface detail\n    translate([0, 0, 30])\n        cube([42, 82, 2], center=true);\n    \n    // Base frame\n    translate([0, 0, -31])\n        cube([44, 84, 4], center=true);\n    \n    // Drawer fronts - 3 drawers\n    for(i = [0:2]) {\n        drawer_front(i);\n    }\n    \n    // Drawer handles\n    for(i = [0:2]) {\n        drawer_handle(i);\n    }\n    \n    // Side panel details\n    side_panels();\n    \n    // Back panel\n    back_panel();\n}\n\nmodule drawer_front(index) {\n    // Position drawers vertically with 2mm spacing\n    translate([0, 0, -20 + index * 20]) {\n        // Main drawer front\n        difference() {\n            cube([40, 2, 18]);\n            \n            // Label holder recess\n            translate([0, 1.5, 5])\n                cube([30, 1, 6]);\n        }\n        \n        // Small gap between drawers\n        translate([0, 1, -1])\n            cube([40, 1, 1]);\n    }\n}\n\nmodule drawer_handle(index) {\n    // Handle position on drawer front\n    translate([0, 2, -20 + index * 20]) {\n        // Handle base\n        cube([20, 2, 2]);\n        \n        // Handle grip\n        translate([0, 2, 0])\n            cylinder(h=2, r=1, center=true);\n    }\n}\n\nmodule side_panels() {\n    // Left side indent pattern\n    for(y = [-30:15:30]) {\n        translate([-21, y, 0])\n            cube([2, 10, 2]);\n    }\n    \n    // Right side indent pattern\n    for(y = [-30:15:30]) {\n        translate([21, y, 0])\n            cube([2, 10, 2]);\n    }\n}\n\nmodule back_panel() {\n    // Back panel with ventilation holes\n    translate([0, 41, 0])\n        cube([40, 2, 60]);\n    \n    // Ventilation holes\n    for(h = [-20:10:20]) {\n        translate([0, 42, h])\n            cylinder(h=3, r=2);\n    }\n}\n\n// Main assembly\nfile_cabinet();",
    "renders": true
  },
  {
    "office_supply": "drawer",
    "openscad_code": "// Realistic 3D printable drawer unit\n// Medium complexity - ~100 lines\n// Overall dimensions: 100mm x 70mm x 90mm\n\n$fn = 32;\n\n// Main drawer body\nmodule drawer_body() {\n    difference() {\n        // Main carcass\n        translate([0, 0, 45]) cube([100, 70, 90], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 47]) cube([96, 66, 88], center=true);\n    }\n}\n\n// Drawer front with handle\nmodule drawer_front() {\n    // Front panel\n    difference() {\n        translate([0, 35, 45]) cube([94, 4, 84], center=true);\n        \n        // Handle cutout\n        translate([0, 37, 45]) cube([60, 2, 20], center=true);\n    }\n    \n    // Handle grip\n    translate([0, 38, 45]) cylinder(h=2, r=10);\n    translate([25, 38, 45]) cylinder(h=2, r=2);\n    translate([-25, 38, 45]) cylinder(h=2, r=2);\n}\n\n// Drawer sides with runners\nmodule drawer_sides() {\n    // Left side with runner\n    translate([-47, 0, 45]) difference() {\n        cube([2, 66, 84], center=true);\n        translate([-46, 0, 45]) cube([1, 64, 82], center=true);\n    }\n    \n    // Right side with runner\n    translate([47, 0, 45]) difference() {\n        cube([2, 66, 84], center=true);\n        translate([46, 0, 45]) cube([1, 64, 82], center=true);\n    }\n}\n\n// Bottom panel\nmodule drawer_bottom() {\n    translate([0, 0, 4]) cube([92, 62, 2], center=true);\n}\n\n// Back panel with ventilation slots\nmodule drawer_back() {\n    difference() {\n        translate([0, -35, 45]) cube([94, 4, 84], center=true);\n        \n        // Ventilation slots\n        for(i = [-30:10:30]) {\n            translate([i, -36, 45]) cube([6, 2, 60], center=true);\n        }\n    }\n}\n\n// Drawer assembly\nmodule drawer() {\n    union() {\n        drawer_body();\n        drawer_front();\n        drawer_sides();\n        drawer_bottom();\n        drawer_back();\n    }\n}\n\n// Base frame with legs\nmodule base_frame() {\n    // Left leg\n    translate([-45, -30, 4]) cube([6, 6, 8], center=true);\n    \n    // Right leg\n    translate([45, -30, 4]) cube([6, 6, 8], center=true);\n    \n    // Front left leg\n    translate([-45, 30, 4]) cube([6, 6, 8], center=true);\n    \n    // Front right leg\n    translate([45, 30, 4]) cube([6, 6, 8], center=true);\n    \n    // Front support beam\n    translate([0, 30, 8]) cube([94, 4, 2], center=true);\n    \n    // Back support beam\n    translate([0, -30, 8]) cube([94, 4, 2], center=true);\n}\n\n// Final assembly\nunion() {\n    drawer();\n    base_frame();\n}",
    "renders": true
  },
  {
    "office_supply": "document_holder",
    "openscad_code": "// Document Holder - Realistic Office Supply\n// Medium complexity with functional design\n\n// Global parameters\n$fn = 32;\n\n// Main dimensions\nbase_width = 120;\nbase_depth = 80;\nbase_height = 8;\nback_height = 90;\nback_angle = 15;\nwall_thickness = 2;\nslot_depth = 30;\n\nmodule document_holder() {\n    // Base platform\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Front chamfer\n        translate([0, base_depth/2 - wall_thickness, base_height - wall_thickness])\n            rotate([45, 0, 0])\n                cube([base_width, 10, 10], center=true);\n    }\n    \n    // Back support\n    translate([0, -base_depth/2 + wall_thickness, base_height + back_height/2])\n        rotate([back_angle, 0, 0])\n            difference() {\n                // Main support\n                cube([base_width - 20, wall_thickness, back_height], center=true);\n                \n                // Document slot\n                translate([0, 0, -back_height/2 + slot_depth/2 + 10])\n                    cube([base_width - 30, wall_thickness + 2, slot_depth], center=true);\n            }\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([side * (base_width/2 - wall_thickness - 5), 0, base_height + back_height/2])\n            rotate([back_angle, 0, 0])\n                difference() {\n                    // Triangular support\n                    union() {\n                        cube([wall_thickness, 10, back_height - 20], center=true);\n                        translate([0, 5 - wall_thickness/2, -back_height/2 + 10])\n                            rotate([0, 0, 45])\n                                cube([wall_thickness*2, 10, 15], center=true);\n                    }\n                    \n                    // Lightening holes\n                    for(hole_z = [20, 40, 60]) {\n                        translate([0, 0, -back_height/2 + hole_z])\n                            cylinder(h=wall_thickness + 2, r=3, center=true);\n                    }\n                }\n    }\n    \n    // Document ledge\n    translate([0, base_depth/2 - 15, base_height + 5])\n        difference() {\n            cube([base_width - 40, 10, 10], center=true);\n            // Grip texture\n            for(i = [-4:4]) {\n                translate([i * 8, 0, 0])\n                    cube([2, 12, 8], center=true);\n            }\n        }\n    \n    // Anti-slip pads\n    for(x = [-40, 0, 40]) {\n        for(y = [-25, 25]) {\n            translate([x, y, base_height - 1])\n                cylinder(h=2, r=4);\n        }\n    }\n    \n    // Cable management slot (optional pen holder)\n    translate([base_width/2 - 15, 0, base_height/2 + 5])\n        difference() {\n            cube([10, 20, 15], center=true);\n            translate([0, 0, -5])\n                cylinder(h=20, r=4);\n        }\n}\n\n// Render the document holder\ndocument_holder();",
    "renders": true
  },
  {
    "office_supply": "business_card_holder",
    "openscad_code": "// Business Card Holder - Realistic Office Furniture Style\n// Medium complexity with proper proportions and structural details\n\n$fn = 50;\n\n// Main dimensions\nholder_length = 100;\nholder_width = 65;\nholder_height = 45;\nwall_thickness = 2;\n\n// Card slot dimensions\ncard_slot_width = 92;\ncard_slot_depth = 58;\ncard_slot_height = 35;\ncard_thickness = 0.4;\n\n// Base and support details\nbase_height = 8;\nsupport_angle = 30;\n\n// Decorative elements\nhandle_width = 40;\nhandle_height = 5;\nhandle_offset = 10;\ncorner_radius = 3;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [radius, size.x - radius])\n            for (y = [radius, size.y - radius])\n                for (z = [radius, size.z - radius])\n                    translate([x, y, z])\n                        sphere(r = radius);\n    }\n}\n\nmodule main_body() {\n    difference() {\n        // Outer shell with rounded edges\n        rounded_cube([holder_length, holder_width, holder_height], corner_radius);\n        \n        // Card slot cavity\n        translate([(holder_length - card_slot_width)/2, \n                   (holder_width - card_slot_depth)/2, \n                   0])\n            cube([card_slot_width, card_slot_depth, card_slot_height]);\n            \n        // Front opening for card removal\n        translate([(holder_length - card_slot_width)/2, \n                   holder_width - wall_thickness, \n                   wall_thickness])\n            cube([card_slot_width, wall_thickness + 1, card_slot_height - wall_thickness*2]);\n    }\n}\n\nmodule base_support() {\n    // Front base\n    translate([wall_thickness, wall_thickness, 0])\n        cube([holder_length - wall_thickness*2, holder_width - wall_thickness*2, base_height]);\n    \n    // Rear support wedge\n    difference() {\n        translate([wall_thickness, wall_thickness, 0])\n            cube([holder_length - wall_thickness*2, holder_width - wall_thickness*2, holder_height/3]);\n        \n        // Angled cut for stability\n        translate([holder_length/2, holder_width/2, holder_height/3])\n            rotate([support_angle, 0, 0])\n                translate([-holder_length, -holder_width, 0])\n                    cube([holder_length*2, holder_width*2, holder_height]);\n    }\n}\n\nmodule decorative_handle() {\n    // Handle base\n    translate([holder_length/2 - handle_width/2, \n               wall_thickness, \n               holder_height - handle_offset - handle_height])\n        rounded_cube([handle_width, wall_thickness*2, handle_height], corner_radius/2);\n    \n    // Handle grip\n    translate([holder_length/2 - handle_width/2 + wall_thickness, \n               wall_thickness/2, \n               holder_height - handle_offset - handle_height/2])\n        cylinder(h = handle_height + wall_thickness, r = wall_thickness);\n    \n    translate([holder_length/2 + handle_width/2 - wall_thickness, \n               wall_thickness/2, \n               holder_height - handle_offset - handle_height/2])\n        cylinder(h = handle_height + wall_thickness, r = wall_thickness);\n}\n\nmodule card_guide_ribs() {\n    // Internal ribs for card alignment\n    for (i = [1:3]) {\n        translate([(holder_length - card_slot_width)/2 + i * card_slot_width/4, \n                   (holder_width - card_slot_depth)/2 + wall_thickness, \n                   wall_thickness])\n            cube([wall_thickness, card_slot_depth - wall_thickness*2, card_slot_height - wall_thickness*2]);\n    }\n}\n\nmodule anti_slip_feet() {\n    // Rubber feet positions\n    foot_size = 8;\n    foot_height = 1.5;\n    \n    for (x = [holder_length/4, holder_length*3/4])\n        for (y = [holder_width/4, holder_width*3/4]) {\n            translate([x - foot_size/2, y - foot_size/2, -foot_height])\n                rounded_cube([foot_size, foot_size, foot_height], foot_size/2);\n        }\n}\n\n// Assemble the complete business card holder\nunion() {\n    base_support();\n    main_body();\n    decorative_handle();\n    card_guide_ribs();\n    anti_slip_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "mug_rack",
    "openscad_code": "// Mug Rack - Realistic Style, Medium Complexity\n// Holds 4 standard coffee mugs, designed for 3D printing\n\n// Global parameters\nwall_thickness = 2;\nmug_diameter = 80;\nmug_height = 90;\nrack_width = 180;\nrack_depth = 100;\nrack_height = 120;\nhook_depth = 30;\nhook_height = 20;\n\n// Base structure\nmodule base() {\n    // Main base plate\n    difference() {\n        cube([rack_width, rack_depth, wall_thickness], center=true);\n        // Rounded edges for aesthetics\n        translate([0, 0, -wall_thickness/2])\n        for(x = [-rack_width/2 + 10, rack_width/2 - 10])\n            for(y = [-rack_depth/2 + 10, rack_depth/2 - 10])\n                translate([x, y, wall_thickness])\n                cylinder(h=wall_thickness*2, r=10, $fn=16);\n    }\n}\n\n// Back panel with support ribs\nmodule back_panel() {\n    // Main back panel\n    translate([0, rack_depth/2 - wall_thickness/2, rack_height/2 - wall_thickness/2])\n    cube([rack_width, wall_thickness, rack_height], center=true);\n    \n    // Vertical support ribs\n    for(x = [-rack_width/3, 0, rack_width/3]) {\n        translate([x, rack_depth/2 - wall_thickness/2, rack_height/2 - wall_thickness/2])\n        cube([wall_thickness*2, wall_thickness, rack_height], center=true);\n    }\n    \n    // Horizontal support rib\n    translate([0, rack_depth/2 - wall_thickness/2, rack_height/4])\n    cube([rack_width, wall_thickness, wall_thickness*2], center=true);\n}\n\n// Individual mug hook\nmodule mug_hook() {\n    difference() {\n        // Hook arm\n        translate([0, -hook_depth/2, 0])\n        cube([wall_thickness*3, hook_depth, wall_thickness*4], center=true);\n        \n        // Hook curve\n        translate([0, -hook_depth + wall_thickness, -hook_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=hook_depth - wall_thickness*2, r=wall_thickness*1.5, $fn=16);\n        \n        // Hook opening\n        translate([0, -hook_depth + wall_thickness*3, -hook_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=hook_depth - wall_thickness*4, r=wall_thickness*0.8, $fn=16);\n    }\n    \n    // Reinforcement gusset\n    translate([0, -hook_depth/4, -hook_height/2 - wall_thickness*2])\n    rotate([0, 45, 0])\n    cube([wall_thickness*3, hook_depth/2, wall_thickness], center=true);\n}\n\n// Hook assembly\nmodule hook_assembly() {\n    for(i = [-1.5, -0.5, 0.5, 1.5]) {\n        translate([i * (rack_width/4), 0, rack_height/2 - wall_thickness*3])\n        mug_hook();\n    }\n}\n\n// Side supports\nmodule side_supports() {\n    for(side = [-1, 1]) {\n        translate([side * (rack_width/2 - wall_thickness/2), 0, rack_height/2 - wall_thickness/2])\n        cube([wall_thickness, rack_depth, rack_height], center=true);\n        \n        // Side support gussets\n        for(z = [rack_height/4, rack_height*3/4]) {\n            translate([side * (rack_width/2 - wall_thickness), 0, z])\n            rotate([0, 0, side * 45])\n            cube([wall_thickness*2, rack_depth/1.5, wall_thickness], center=true);\n        }\n    }\n}\n\n// Anti-slip pads\nmodule anti_slip_pads() {\n    for(x = [-rack_width/3, rack_width/3])\n        for(y = [-rack_depth/3, rack_depth/3]) {\n            translate([x, y, -wall_thickness/2 - 1])\n            cylinder(h=2, r=5, $fn=16);\n        }\n}\n\n// Main assembly\nunion() {\n    base();\n    back_panel();\n    side_supports();\n    hook_assembly();\n    anti_slip_pads();\n}",
    "renders": true
  },
  {
    "office_supply": "desk_mat",
    "openscad_code": "// Desk Mat with ergonomic wrist rest and cable management\n// Dimensions: 300mm x 200mm x 5mm (mat) + 25mm (wrist rest)\n\n// Main parameters\nmat_width = 300;\nmat_depth = 200;\nmat_thickness = 2;\nwrist_rest_height = 25;\nwrist_rest_width = 80;\ncable_diameter = 6;\ncorner_radius = 15;\n\nmodule rounded_cube(size, radius, center = false) {\n    // Create a cube with rounded edges\n    translate(center ? [0, 0, 0] : [size[0]/2, size[1]/2, size[2]/2]) {\n        difference() {\n            union() {\n                // Central block\n                cube([size[0] - 2*radius, size[1] - 2*radius, size[2]], center = true);\n                \n                // Cylinders for rounded edges\n                for(x = [-1, 1])\n                    for(y = [-1, 1])\n                        translate([x * (size[0]/2 - radius), y * (size[1]/2 - radius), 0])\n                            cylinder(r = radius, h = size[2], center = true);\n                \n                // Edge bars\n                translate([0, (size[1]/2 - radius), 0])\n                    cube([size[0] - 2*radius, 2*radius, size[2]], center = true);\n                translate([(size[0]/2 - radius), 0, 0])\n                    cube([2*radius, size[1] - 2*radius, size[2]], center = true);\n            }\n            \n            // Cut corners for perfect rounding\n            for(x = [-1, 1])\n                for(y = [-1, 1])\n                    translate([x * (size[0]/2 - radius - 0.1), y * (size[1]/2 - radius - 0.1), 0])\n                        cylinder(r = radius + 0.1, h = size[2] + 0.2, center = true);\n        }\n    }\n}\n\nmodule cable_channel(diameter, length) {\n    // Create a half-cylinder cable channel\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(r = diameter/2 + 1, h = length, center = true);\n            translate([0, -diameter/2 - 1, 0])\n                cube([diameter + 2, diameter + 2, length], center = true);\n        }\n}\n\nmodule texture_pattern() {\n    // Add subtle surface texture for mouse tracking\n    for(x = [0:10:mat_width-20])\n        for(y = [0:10:mat_depth-20])\n            translate([x + 10, y + 10, mat_thickness])\n                cube([8, 8, 0.2], center = true);\n}\n\n// Main desk mat body\ndifference() {\n    rounded_cube([mat_width, mat_depth, mat_thickness], corner_radius);\n    \n    // Cable management channels\n    translate([mat_width/2 - 20, -mat_depth/2, mat_thickness/2])\n        cable_channel(cable_diameter, 40);\n    translate([mat_width/2 - 20, mat_depth/2, mat_thickness/2])\n        cable_channel(cable_diameter, 40);\n}\n\n// Wrist rest with ergonomic slope\ntranslate([-mat_width/2 + wrist_rest_width/2, 0, 0]) {\n    difference() {\n        union() {\n            // Base of wrist rest\n            rounded_cube([wrist_rest_width, mat_depth, wrist_rest_height], 10);\n            \n            // Tapered top for ergonomics\n            translate([0, 0, wrist_rest_height/2 - 2]) {\n                scale([1, 1, 0.5]) {\n                    rounded_cube([wrist_rest_width, mat_depth, wrist_rest_height], 10);\n                }\n            }\n        }\n        \n        // Hollow interior for material saving\n        translate([0, 0, 2])\n            rounded_cube([wrist_rest_width - 4, mat_depth - 4, wrist_rest_height - 2], 8);\n    }\n}\n\n// Surface texture on mat area\ntranslate([0, 0, 0]) {\n    texture_pattern();\n}\n\n// Anti-slip pads\nmodule anti_slip_pad(x, y) {\n    translate([x, y, -0.5])\n        cylinder(r = 8, h = 1);\n}\n\nfor(x = [-120, 120])\n    for(y = [-80, 80])\n        anti_slip_pad(x, y);",
    "renders": true
  },
  {
    "office_supply": "foot_rest",
    "openscad_code": "// Foot Rest - Medium complexity realistic style\n// Dimensions: 100mm x 60mm x 40mm overall\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\ntop_thickness = 3;\nbase_height = 8;\nleg_height = 25;\ntop_width = 100;\ntop_depth = 60;\ntop_height = 40;\nleg_width = 8;\nleg_depth = 8;\nfoot_pad_height = 3;\n\n// Main assembly\nmodule foot_rest() {\n    // Top cushion with rounded edges\n    union() {\n        // Main cushion\n        translate([0, 0, leg_height + foot_pad_height + top_thickness/2])\n            rounded_cushion(top_width, top_depth, top_thickness, 5);\n        \n        // Support frame\n        translate([0, 0, leg_height + foot_pad_height])\n            frame_support();\n        \n        // Four legs\n        legs();\n        \n        // Foot pads\n        foot_pads();\n        \n        // Surface texture pattern\n        surface_pattern();\n    }\n}\n\n// Rounded cushion top\nmodule rounded_cushion(width, depth, height, radius) {\n    difference() {\n        // Main rounded block\n        minkowski() {\n            cube([width - 2*radius, depth - 2*radius, height - radius], center = true);\n            sphere(r = radius);\n        }\n        \n        // Hollow center\n        translate([0, 0, -height/2])\n            cube([width - 2*wall_thickness, depth - 2*wall_thickness, height + 2], center = true);\n    }\n}\n\n// Support frame structure\nmodule frame_support() {\n    difference() {\n        // Outer frame\n        cube([top_width - 4, top_depth - 4, 2], center = true);\n        \n        // Inner cutout for weight reduction\n        cube([top_width - 12, top_depth - 12, 4], center = true);\n    }\n    \n    // Reinforcement ribs\n    for(i = [-1, 1]) {\n        translate([i * (top_width - 20)/2, 0, 0])\n            cube([4, top_depth - 12, 2], center = true);\n    }\n}\n\n// Four legs with tapered design\nmodule legs() {\n    positions = [[-top_width/2 + leg_width/2, -top_depth/2 + leg_depth/2],\n                 [top_width/2 - leg_width/2, -top_depth/2 + leg_depth/2],\n                 [-top_width/2 + leg_width/2, top_depth/2 - leg_depth/2],\n                 [top_width/2 - leg_width/2, top_depth/2 - leg_depth/2]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], leg_height/2 + foot_pad_height])\n            tapered_leg();\n    }\n}\n\n// Single tapered leg\nmodule tapered_leg() {\n    difference() {\n        // Outer tapered shape\n        cylinder(h1 = leg_width, h2 = leg_width - 2, h = leg_height, center = true);\n        \n        // Hollow center for material saving\n        cylinder(h1 = leg_width - 2*wall_thickness, \n                h2 = leg_width - 2 - 2*wall_thickness, \n                h = leg_height + 2, center = true);\n    }\n}\n\n// Anti-slip foot pads\nmodule foot_pads() {\n    positions = [[-top_width/2 + leg_width/2, -top_depth/2 + leg_depth/2],\n                 [top_width/2 - leg_width/2, -top_depth/2 + leg_depth/2],\n                 [-top_width/2 + leg_width/2, top_depth/2 - leg_depth/2],\n                 [top_width/2 - leg_width/2, top_depth/2 - leg_depth/2]];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], foot_pad_height/2])\n            cylinder(h = foot_pad_height, r = leg_width/2 + 2, center = true);\n    }\n}\n\n// Surface texture pattern\nmodule surface_pattern() {\n    pattern_spacing = 10;\n    offset = pattern_spacing/2;\n    \n    for(x = [-top_width/2 + offset:pattern_spacing:top_width/2 - offset]) {\n        for(y = [-top_depth/2 + offset:pattern_spacing:top_depth/2 - offset]) {\n            translate([x, y, leg_height + foot_pad_height + top_thickness + 0.1])\n                rotate([90, 0, 0])\n                    cylinder(h = 0.5, r = 2, $fn = 6);\n        }\n    }\n}\n\n// Render the foot rest\nfoot_rest();",
    "renders": true
  },
  {
    "office_supply": "desk_tidy",
    "openscad_code": "// Desk Tidy - Medium complexity realistic style\n// Overall dimensions: 120mm x 80mm x 85mm\n\n$fn = 50;\n\nmodule main_body() {\n    difference() {\n        // Main body shell with rounded edges\n        hull() {\n            translate([2, 2, 0]) cube([116, 76, 82]);\n            translate([6, 6, 0]) cube([108, 68, 82]);\n            translate([2, 2, 78]) cube([116, 76, 4]);\n            translate([6, 6, 78]) cube([108, 68, 4]);\n        }\n        \n        // Hollow out interior\n        translate([6, 6, 2]) cube([108, 68, 78]);\n    }\n}\n\nmodule pen_compartment() {\n    // Left compartment for pens\n    difference() {\n        translate([10, 10, 0]) cube([35, 60, 80]);\n        translate([12, 12, 2]) cube([31, 56, 78]);\n    }\n}\n\nmodule large_compartment() {\n    // Right compartment for larger items\n    difference() {\n        translate([50, 10, 0]) cube([55, 60, 80]);\n        translate([52, 12, 2]) cube([51, 56, 78]);\n    }\n}\n\nmodule phone_slot() {\n    // Angled slot for phone/tablet at back\n    rotate([0, 15, 0]) {\n        translate([15, -5, 70]) {\n            difference() {\n                cube([85, 70, 12]);\n                translate([2, 2, 2]) cube([81, 66, 10]);\n            }\n        }\n    }\n}\n\nmodule pen_holes() {\n    // Small holes for individual pens\n    for(x = [15, 25, 35]) {\n        translate([x, 25, 0]) {\n            cylinder(h=80, d=8);\n        }\n    }\n}\n\nmodule cable_cutout() {\n    // Cutout for charging cable\n    translate([60, 75, 10]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=2, d=15);\n        }\n    }\n}\n\nmodule base_feet() {\n    // Rubber feet positions\n    for(pos = [[5, 5], [115, 5], [5, 75], [115, 75]]) {\n        translate([pos[0], pos[1], -2]) {\n            cylinder(h=2, d=6);\n        }\n    }\n}\n\nmodule dividers() {\n    // Internal dividers for organization\n    // Vertical divider between compartments\n    translate([48, 10, 0]) {\n        difference() {\n            cube([2, 60, 80]);\n            translate([0, 0, 0]) cube([2, 60, 2]);\n            translate([0, 0, 78]) cube([2, 60, 2]);\n        }\n    }\n    \n    // Horizontal dividers in right compartment\n    for(y = [25, 40]) {\n        translate([52, y, 0]) {\n            difference() {\n                cube([51, 2, 80]);\n                translate([0, 0, 0]) cube([51, 2, 2]);\n                translate([0, 0, 78]) cube([51, 2, 2]);\n            }\n        }\n    }\n}\n\nmodule label_rib() {\n    // Small raised rib for labels\n    translate([20, 72, 75]) {\n        cube([80, 2, 3]);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    base_feet();\n    dividers();\n    label_rib();\n}\n\ndifference() {\n    union() {\n        pen_compartment();\n        large_compartment();\n    }\n    pen_holes();\n}\n\nphone_slot();\ncable_cutout();",
    "renders": true
  },
  {
    "office_supply": "organizer_bin",
    "openscad_code": "// Organizer bin for office supplies – 3D-printable, medium realistic style\n// Overall footprint: 100 mm × 70 mm × 70 mm\n\n$fn = 36;\n\n// Wall thickness\nwall = 2;\n\n// Main outer body\nmodule body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 35]) cube([100, 70, 70], center = true);\n        // Hollow inside\n        translate([0, 0, 35 + wall]) cube([100 - 2*wall, 70 - 2*wall, 70], center = true);\n    }\n}\n\n// Front angled cut-out for easy access\nmodule front_notch() {\n    difference() {\n        children();\n        translate([0, -35, 25]) rotate([30, 0, 0]) cube([200, 200, 200], center = true);\n    }\n}\n\n// Removable divider slot 1\nmodule divider_slot() {\n    translate([25, 0, 35]) cube([wall, 70 - 2*wall, 70 - 2*wall], center = true);\n}\n\n// Removable divider slot 2\nmodule divider_slot2() {\n    translate([-25, 0, 35]) cube([wall, 70 - 2*wall, 70 - 2*wall], center = true);\n}\n\n// Label holder on front lip\nmodule label_holder() {\n    difference() {\n        // Holder base\n        translate([0, -33, 63]) cube([40, 4, 8], center = true);\n        // Slot for paper label\n        translate([0, -34.5, 63]) cube([38, 2, 6], center = true);\n    }\n}\n\n// Reinforcing ribs on back\nmodule back_ribs() {\n    for (y = [-20, 0, 20]) {\n        translate([0, y, 35]) cube([wall, 10, 70], center = true);\n    }\n}\n\n// Floor drainage/ventilation holes\nmodule vent_holes() {\n    for (x = [-35, -15, 5, 25, 45]) {\n        for (y = [-25, -10, 5, 20]) {\n            translate([x, y, 1]) cylinder(h = 2, r = 1.5, center = true);\n        }\n    }\n}\n\n// Assembly\nfront_notch() union() {\n    body();\n    divider_slot();\n    divider_slot2();\n    label_holder();\n    back_ribs();\n    vent_holes();\n}",
    "renders": true
  },
  {
    "office_supply": "storage_box",
    "openscad_code": "// Realistic 3D-printable medium-complexity office storage box\n// External dimensions: 120 x 80 x 60 mm\n// Wall thickness: 2 mm\n\n$fs = 0.5;\n$fa = 2;\n\nmodule storage_box() {\n    difference() {\n        // Main outer shell\n        cube([120, 80, 60], center = false);\n\n        // Hollow out inside\n        translate([2, 2, 2])\n            cube([116, 76, 58], center = false);\n    }\n\n    // Bottom strengthening ribs\n    for (x = [10:20:110]) {\n        translate([x, 2, 0])\n            cube([2, 76, 3]);\n    }\n\n    // Side strengthening ribs\n    for (y = [10:20:70]) {\n        translate([2, y, 0])\n            cube([116, 2, 3]);\n    }\n\n    // Front label slot\n    translate([10, 78, 30])\n        cube([100, 2, 20]);\n\n    // Rounded top edges\n    difference() {\n        union() {\n            translate([0, 0, 58])\n                cube([120, 80, 4]);\n\n            // Edge rounding\n            for (i = [0:1]) {\n                mirror([i, 0, 0]) {\n                    translate([0, 0, 58])\n                        cylinder(h = 4, r = 2, $fn = 20);\n                    translate([0, 80, 58])\n                        cylinder(h = 4, r = 2, $fn = 20);\n                }\n                mirror([0, i, 0]) {\n                    translate([0, 0, 58])\n                        cylinder(h = 4, r = 2, $fn = 20);\n                    translate([120, 0, 58])\n                        cylinder(h = 4, r = 2, $fn = 20);\n                }\n            }\n        }\n\n        // Remove inner part for rounding\n        translate([2, 2, 58])\n            cube([116, 76, 5]);\n    }\n\n    // Handle cutouts on sides\n    for (side = [0, 1]) {\n        mirror([side, 0, 0]) {\n            translate([60 * side, 30, 25])\n                rotate([0, 90, 0])\n                    cylinder(h = 3, r = 10, center = true, $fn = 30);\n            translate([60 * side, 30, 25])\n                rotate([0, 90, 0])\n                    cube([20, 20, 3], center = true);\n        }\n    }\n\n    // Internal dividers\n    translate([40, 2, 2])\n        cube([2, 76, 56]);\n    translate([80, 2, 2])\n        cube([2, 76, 56]);\n\n    // Stackable feet\n    translate([10, 10, -2])\n        cylinder(h = 4, r = 3, $fn = 20);\n    translate([110, 10, -2])\n        cylinder(h = 4, r = 3, $fn = 20);\n    translate([10, 70, -2])\n        cylinder(h = 4, r = 3, $fn = 20);\n    translate([110, 70, -2])\n        cylinder(h = 4, r = 3, $fn = 20);\n\n    // Corresponding recesses on top for stacking\n    translate([10, 10, 60])\n        cylinder(h = 2, r = 3.2, $fn = 20);\n    translate([110, 10, 60])\n        cylinder(h = 2, r = 3.2, $fn = 20);\n    translate([10, 70, 60])\n        cylinder(h = 2, r = 3.2, $fn = 20);\n    translate([110, 70, 60])\n        cylinder(h = 2, r = 3.2, $fn = 20);\n}\n\nstorage_box();",
    "renders": true
  },
  {
    "office_supply": "index_card",
    "openscad_code": "// OpenSCAD Index Card Holder / Desktop Organizer\n// Realistic style, medium complexity\n// Prints without supports, 2 mm wall thickness\n\n$fn = 36;           // Smoother curves\nwall = 2;           // 2 mm walls for printing\nslot_w = 3;         // 3 mm card slot\nslot_d = 80;        // depth for index cards\nslot_h = 100;       // height for cards\nbase_h = 15;        // base thickness\nfoot_h = 4;         // rubber-foot recess depth\nfoot_r = 5;         // foot radius\n\n// Overall size\nlength = 110;\ndepth  = 85;\nheight = slot_h + base_h;\n\n// Base with chamfered edges\nmodule base() {\n    difference() {\n        // Main block\n        hull() {\n            translate([wall, wall, 0]) cube([length - 2*wall, depth - 2*wall, base_h]);\n            translate([0, 0, foot_h]) cube([length, depth, base_h - foot_h]);\n        }\n        // Chamfers\n        for (x = [wall, length - wall])\n        for (y = [wall, depth - wall])\n            translate([x, y, base_h - wall])\n                rotate([45,0,0]) cube([wall*sqrt(2), wall*sqrt(2), wall]);\n    }\n}\n\n// Card slot cavity\nmodule card_cavity() {\n    translate([wall, wall, base_h])\n        cube([slot_w, slot_d, slot_h]);\n}\n\n// Front label recess\nmodule label_recess() {\n    translate([wall + 1, wall + 1, base_h + slot_h - 10])\n        cube([slot_w - 2, 40, 8]);\n}\n\n// Rubber foot recesses (4 corners)\nmodule foot_recesses() {\n    for (px = [foot_r, length - foot_r])\n    for (py = [foot_r, depth - foot_r])\n        translate([px, py, 0])\n            cylinder(h = foot_h + 0.2, r = foot_r, $fn = 24);\n}\n\n// Decorative ribs on sides\nmodule side_ribs() {\n    rib_w = 2;\n    rib_gap = 6;\n    ribs = floor((depth - 2*wall) / (rib_w + rib_gap));\n    for (i = [0:ribs-1]) {\n        y = wall + i*(rib_w + rib_gap) + rib_gap/2;\n        translate([0, y, base_h])\n            cube([wall, rib_w, slot_h*0.6]);\n        translate([length - wall, y, base_h])\n            cube([wall, rib_w, slot_h*0.6]);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        base();\n        // Side walls\n        translate([0, 0, base_h]) cube([wall, depth, slot_h]);\n        translate([length - wall, 0, base_h]) cube([wall, depth, slot_h]);\n        // Back wall\n        translate([0, 0, base_h]) cube([length, wall, slot_h]);\n        // Ribs\n        side_ribs();\n    }\n    // Remove cavities\n    card_cavity();\n    label_recess();\n    foot_recesses();\n}",
    "renders": true
  },
  {
    "office_supply": "index_divider",
    "openscad_code": "// Index Divider for Office Organization\n// Medium complexity, realistic style\n// Overall dimensions: 100mm wide x 120mm tall x 25mm deep\n\n// Main divider panel\nmodule divider_panel() {\n    // Base panel with rounded edges\n    difference() {\n        // Main body\n        union() {\n            // Front face\n            translate([2, 0, 2]) cube([96, 2, 116]);\n            // Top edge radius\n            translate([2, 0, 118]) rotate([0, 90, 0]) cylinder(h=96, r=2, $fn=20);\n            // Bottom edge radius\n            translate([2, 0, 2]) rotate([0, 90, 0]) cylinder(h=96, r=2, $fn=20);\n            // Side edges\n            translate([2, 0, 2]) cube([2, 2, 116]);\n            translate([96, 0, 2]) cube([2, 2, 116]);\n        }\n        \n        // Holes for binder rings (standard 3-ring spacing)\n        for(x = [25, 50, 75]) {\n            translate([x, -1, 95]) rotate([90, 0, 0]) cylinder(h=4, r=3, $fn=20);\n            translate([x, -1, 30]) rotate([90, 0, 0]) cylinder(h=4, r=3, $fn=20);\n        }\n    }\n}\n\n// Tab for labeling\nmodule label_tab() {\n    // Positioned on right side for visibility\n    translate([85, 0, 105]) {\n        // Main tab body\n        difference() {\n            union() {\n                // Tab base\n                cube([15, 2, 12]);\n                // Rounded top\n                translate([7.5, 0, 12]) rotate([90, 0, 0]) cylinder(h=15, r=6, $fn=20);\n            }\n            // Recessed label area\n            translate([1, -0.5, 1]) cube([13, 1, 10]);\n        }\n    }\n}\n\n// Reinforcement ribs for stability\nmodule support_ribs() {\n    // Vertical rib in center\n    translate([48, -1, 60]) cube([4, 4, 56]);\n    \n    // Horizontal rib at bottom\n    translate([10, -1, 10]) cube([80, 4, 4]);\n    \n    // Diagonal supports\n    translate([20, 0, 20]) rotate([0, 0, 45]) cube([3, 2, 25]);\n    translate([75, 0, 20]) rotate([0, 0, -45]) cube([3, 2, 25]);\n}\n\n// Finger grip for easy handling\nmodule finger_grip() {\n    // Elliptical grip area on left side\n    translate([12, 0, 60]) {\n        difference() {\n            // Outer grip shape\n            scale([1, 1, 1.5]) sphere(r=8, $fn=30);\n            // Inner finger space\n            translate([0, 2, 0]) scale([0.7, 1, 1.2]) sphere(r=8, $fn=30);\n        }\n    }\n}\n\n// Bottom support feet\nmodule support_feet() {\n    // Two feet for stability when standing\n    translate([15, -2, 2]) {\n        cube([10, 4, 5]);\n        translate([5, 0, 0]) rotate([0, 90, 0]) cylinder(h=10, r=2.5, $fn=20);\n    }\n    \n    translate([75, -2, 2]) {\n        cube([10, 4, 5]);\n        translate([5, 0, 0]) rotate([0, 90, 0]) cylinder(h=10, r=2.5, $fn=20);\n    }\n}\n\n// Edge reinforcement band\nmodule edge_band() {\n    // Thin band around perimeter for durability\n    translate([1, 1, 1]) {\n        // Top band\n        cube([98, 1, 2]);\n        translate([0, 0, 114]) cube([98, 1, 2]);\n        \n        // Side bands\n        translate([0, 1, 0]) cube([2, 1, 116]);\n        translate([96, 1, 0]) cube([2, 1, 116]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    divider_panel();\n    label_tab();\n    \n    // Structural elements\n    support_ribs();\n    finger_grip();\n    support_feet();\n    edge_band();\n}",
    "renders": true
  },
  {
    "office_supply": "label_maker",
    "openscad_code": "// Label Maker Furniture Item - Realistic Style\n// Overall dimensions: 110mm x 75mm x 40mm\n\n$fn = 32;\n\n// Main body module\nmodule label_maker_body() {\n    // Main chassis - hollow with 2mm walls\n    difference() {\n        // Outer shell\n        cube([110, 75, 40], center = true);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        cube([106, 71, 36], center = true);\n    }\n}\n\n// Handle module\nmodule handle() {\n    // Handle base\n    translate([0, -42, 15])\n    rotate([90, 0, 0])\n    cylinder(h = 20, r1 = 8, r2 = 6);\n    \n    // Handle grip\n    translate([0, -62, 15])\n    rotate([90, 0, 0])\n    cylinder(h = 25, r = 5);\n}\n\n// Tape cartridge module\nmodule tape_cartridge() {\n    // Cartridge housing\n    translate([-45, 20, 0])\n    cube([30, 35, 20], center = true);\n    \n    // Cartridge hole\n    translate([-45, 20, -1])\n    cube([26, 31, 22], center = true);\n    \n    // Cartridge spindle\n    translate([-45, 20, 0])\n    cylinder(h = 22, r = 8, center = true);\n}\n\n// Cutting blade housing\nmodule cutter() {\n    // Blade guard\n    translate([50, 0, 5])\n    cube([15, 40, 10], center = true);\n    \n    // Blade slot\n    translate([57, 0, 5])\n    cube([2, 35, 8], center = true);\n}\n\n// Keyboard buttons module\nmodule keyboard() {\n    for (x = [-30:10:30]) {\n        for (y = [-15:10:15]) {\n            translate([x, y, 21])\n            cube([8, 8, 2], center = true);\n        }\n    }\n}\n\n// Display window\nmodule display() {\n    translate([0, 0, 21])\n    cube([40, 15, 1], center = true);\n    \n    // LCD screen recess\n    translate([0, 0, 21.5])\n    cube([38, 13, 0.5], center = true);\n}\n\n// Label exit slot\nmodule exit_slot() {\n    translate([55, 0, -15])\n    cube([5, 30, 3], center = true);\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    // Side ribs\n    for (z = [-15:10:15]) {\n        translate([0, 37, z])\n        cube([106, 2, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body structure\n    label_maker_body();\n    \n    // Functional elements\n    handle();\n    tape_cartridge();\n    cutter();\n    keyboard();\n    display();\n    exit_slot();\n    ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "stamp",
    "openscad_code": "// Office Desk Stamp Furniture\n// Realistic stamp with office desk proportions and details\n\n// Parameters\nstamp_width = 60;\nstamp_depth = 35;\nstamp_height = 45;\nhandle_diameter = 12;\nhandle_height = 20;\nwall_thickness = 2;\n\n// Main stamp body\nmodule stamp_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main block\n            cube([stamp_width, stamp_depth, stamp_height], center=true);\n            \n            // Rounded edges\n            translate([stamp_width/2-wall_thickness, stamp_depth/2-wall_thickness, stamp_height/2-wall_thickness])\n                sphere(r=wall_thickness, $fn=20);\n            translate([-stamp_width/2+wall_thickness, stamp_depth/2-wall_thickness, stamp_height/2-wall_thickness])\n                sphere(r=wall_thickness, $fn=20);\n            translate([stamp_width/2-wall_thickness, -stamp_depth/2+wall_thickness, stamp_height/2-wall_thickness])\n                sphere(r=wall_thickness, $fn=20);\n            translate([-stamp_width/2+wall_thickness, -stamp_depth/2+wall_thickness, stamp_height/2-wall_thickness])\n                sphere(r=wall_thickness, $fn=20);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            cube([stamp_width-wall_thickness*2, stamp_depth-wall_thickness*2, stamp_height-wall_thickness], center=true);\n    }\n}\n\n// Handle assembly\nmodule stamp_handle() {\n    // Grip\n    cylinder(h=handle_height, d=handle_diameter, center=true, $fn=32);\n    \n    // Connection to body\n    translate([0, 0, stamp_height/2 + handle_height/2])\n        cylinder(h=wall_thickness*2, d=handle_diameter*1.2, center=true, $fn=32);\n}\n\n// Office desk stamp pad surface\nmodule stamp_pad() {\n    translate([0, 0, -stamp_height/2 - 1])\n        cube([stamp_width-8, stamp_depth-8, 2], center=true);\n}\n\n// Structural support ribs\nmodule support_ribs() {\n    // Side ribs\n    for(x = [-stamp_width/4, stamp_width/4]) {\n        translate([x, 0, 0])\n            cube([wall_thickness, stamp_depth-wall_thickness*2, stamp_height-wall_thickness*2], center=true);\n    }\n    \n    // Front/back ribs\n    for(y = [-stamp_depth/4, stamp_depth/4]) {\n        translate([0, y, 0])\n            cube([stamp_width-wall_thickness*2, wall_thickness, stamp_height-wall_thickness*2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    stamp_body();\n    translate([0, 0, stamp_height/2 + handle_height/2])\n        stamp_handle();\n    support_ribs();\n    stamp_pad();\n}\n\n// Base plate for stability\ndifference() {\n    // Wide base\n    translate([0, 0, -stamp_height/2 - 3])\n        cube([stamp_width+10, stamp_depth+10, 3], center=true);\n    \n    // Recessed center\n    translate([0, 0, -stamp_height/2 - 2.5])\n        cube([stamp_width-2, stamp_depth-2, 3], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "date_stamp",
    "openscad_code": "// OpenSCAD Date Stamp Furniture Item\n// Realistic style, medium complexity office supply\n\n$fn = 50;\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 45;\nbase_height = 15;\n\nhandle_length = 70;\nhandle_diameter = 12;\nhandle_gap = 8;\n\nstamp_body_width = 75;\nstamp_body_depth = 40;\nstamp_body_height = 25;\n\ndate_band_width = 68;\ndate_band_diameter = 6;\ndate_band_height = 8;\nband_count = 8;\n\n// Base module with rounded edges\nmodule stamp_base() {\n    difference() {\n        // Main base\n        minkowski() {\n            cube([base_width, base_depth, base_height], center=true);\n            sphere(2);\n        }\n        \n        // Grip grooves on sides\n        translate([0, -base_depth/2 - 0.5, 0]) {\n            for (i = [-20:10:20]) {\n                rotate([90, 0, 0])\n                    cylinder(h=base_depth + 1, d=3, center=true);\n            }\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule stamp_handle() {\n    // Main handle bar\n    translate([0, 0, base_height/2 + handle_gap + handle_diameter/2]) {\n        rotate([90, 0, 0]) {\n            // Handle shaft\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n            \n            // Ergonomic grips\n            for (i = [-25:10:25]) {\n                translate([i, 0, 0]) {\n                    difference() {\n                        sphere(handle_diameter/2 + 1);\n                        cube([10, handle_diameter + 2, handle_diameter + 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Support brackets\n    for (x = [-handle_length/2 + 10, handle_length/2 - 10]) {\n        translate([x, 0, base_height/2 + handle_gap/2]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=handle_gap, d=handle_diameter + 4, center=true);\n                    cylinder(h=handle_gap + 1, d=handle_diameter, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Date band assembly\nmodule date_bands() {\n    translate([0, 0, -stamp_body_height/2 - 2]) {\n        // Band axle supports\n        for (x = [-date_band_width/2 - 3, date_band_width/2 + 3]) {\n            translate([x, 0, 0]) {\n                cube([2, date_band_depth + 6, date_band_height + 4], center=true);\n            }\n        }\n        \n        // Date bands\n        for (i = [0:band_count-1]) {\n            translate([-date_band_width/2 + 8.5 + i * (date_band_width/band_count), 0, 0]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=date_band_height, d=date_band_diameter + 1, center=true);\n                        // Number faces (simplified)\n                        for (j = [0:5]) {\n                            rotate([0, 0, j * 60])\n                                translate([date_band_diameter/2 - 0.5, 0, -date_band_height/2])\n                                    cube([1, 0.5, date_band_height]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Stamp body with structural ribs\nmodule stamp_body() {\n    difference() {\n        // Main body\n        cube([stamp_body_width, stamp_body_depth, stamp_body_height], center=true);\n        \n        // Internal structure - weight reduction\n        translate([0, 0, 0])\n            cube([stamp_body_width - 4, stamp_body_depth - 4, stamp_body_height - 2], center=true);\n        \n        // Rib structure\n        for (i = [-1:1]) {\n            translate([i * 20, 0, 0])\n                cube([2, stamp_body_depth - 4, stamp_body_height - 2], center=true);\n            translate([0, i * 15, 0])\n                cube([stamp_body_width - 4, 2, stamp_body_height - 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    stamp_base();\n    \n    translate([0, 0, base_height/2 + stamp_body_height/2]) {\n        stamp_body();\n    }\n    \n    stamp_handle();\n    \n    date_bands();\n}",
    "renders": true
  },
  {
    "office_supply": "rubber_stamp",
    "openscad_code": "// Rubber stamp furniture piece - medium complexity realistic style\n// Overall dimensions: 60mm x 25mm x 80mm (L x W x H)\n\n$fn = 32;\nwall_thickness = 2;\nbase_width = 25;\nbase_length = 60;\nbase_height = 15;\nhandle_diameter = 15;\nhandle_height = 50;\nstamp_thickness = 5;\n\nmodule main_body() {\n    // Main rectangular base with rounded edges\n    difference() {\n        // Outer shell with rounded top edges\n        minkowski() {\n            cube([base_length, base_width, base_height]);\n            cylinder(r=3, h=0.1);\n        }\n        \n        // Hollow interior for weight reduction\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([base_length-2*wall_thickness, base_width-2*wall_thickness, base_height-wall_thickness]);\n        \n        // Indentation for text plate\n        translate([base_length*0.1, base_width*0.1, 0])\n            cube([base_length*0.8, base_width*0.8, stamp_thickness+1]);\n    }\n}\n\nmodule handle() {\n    // Ergonomic handle with grip texture\n    translate([base_length/2, base_width/2, base_height]) {\n        // Main handle shaft\n        cylinder(h=handle_height, d=handle_diameter);\n        \n        // Grip rings for better handling\n        for(i = [1:3]) {\n            translate([0, 0, i*handle_height/4])\n                difference() {\n                    cylinder(h=3, d=handle_diameter+2);\n                    cylinder(h=4, d=handle_diameter);\n                }\n        }\n        \n        // Top cap\n        translate([0, 0, handle_height])\n            sphere(d=handle_diameter+4);\n    }\n}\n\nmodule mounting_brackets() {\n    // Side brackets for structural reinforcement\n    for(side = [-1, 1]) {\n        translate([side * (base_length/2 - 5), 0, base_height/2]) {\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=10, d=8);\n                    cylinder(h=11, d=4);\n                }\n        }\n    }\n}\n\nmodule label_area() {\n    // Flat surface for identification label\n    translate([base_length/2 - 15, -base_width/2 - 2, base_height - 8]) {\n        cube([30, 4, 8]);\n    }\n}\n\nmodule text_pattern() {\n    // Raised pattern for the stamp surface\n    translate([base_length/2, base_width/2, 0]) {\n        for(x = [-20:5:20]) {\n            for(y = [-8:4:8]) {\n                translate([x, y, 0])\n                    cube([3, 2, stamp_thickness]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    handle();\n    mounting_brackets();\n    label_area();\n    text_pattern();\n}",
    "renders": true
  },
  {
    "office_supply": "seal",
    "openscad_code": "// Seal Desk Organizer - Medium Complexity Realistic Style\n// External dimensions: 120mm x 80mm x 90mm\n\n// Global parameters\nwall_thickness = 2;\nbody_length = 120;\nbody_width = 80;\nbody_height = 90;\n\n// Main seal body (hollow for storage)\nmodule seal_body() {\n    difference() {\n        // Outer rounded body\n        union() {\n            // Main rounded box\n            translate([0, 0, body_height/2])\n                minkowski() {\n                    cube([body_length, body_width, body_height], center=true);\n                    sphere(10);\n                }\n            \n            // Tail extension\n            translate([-body_length/2 - 25, 0, 30])\n                rotate([0, 0, 30])\n                scale([1.5, 0.8, 1])\n                cylinder(h=40, r1=15, r2=8, center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_height/2])\n            minkowski() {\n                cube([body_length - wall_thickness*2, body_width - wall_thickness*2, body_height - wall_thickness*2], center=true);\n                sphere(8);\n            }\n        \n        // Front opening\n        translate([0, 0, -5])\n            cube([body_length - 40, body_width - 20, body_height/2 + 10], center=true);\n    }\n}\n\n// Seal head with compartments\nmodule seal_head() {\n    translate([body_length/2 + 25, 0, 50]) {\n        // Head shape\n        difference() {\n            union() {\n                // Main head sphere\n                sphere(30);\n                \n                // Snout\n                translate([25, 0, -10])\n                    scale([1.5, 0.8, 0.8])\n                    sphere(20);\n            }\n            \n            // Eye sockets (left and right)\n            for(x = [-15, 15]) {\n                translate([5, x, 5])\n                    sphere(8);\n            }\n            \n            // Nose hole\n            translate([35, 0, -5])\n                sphere(7);\n        }\n        \n        // Pen holder compartment (left side)\n        translate([-10, -20, -20]) {\n            difference() {\n                cylinder(h=50, r=12);\n                translate([0, 0, wall_thickness])\n                    cylinder(h=50, r=10);\n            }\n        }\n        \n        // Paper clip holder (right side)\n        translate([-10, 20, -20]) {\n            difference() {\n                cube([25, 25, 30], center=true);\n                cube([21, 21, 28], center=true);\n            }\n        }\n    }\n}\n\n// Flippers as support legs\nmodule flippers() {\n    // Front flippers (legs)\n    for(side = [-1, 1]) {\n        translate([body_length/2 - 20, side * (body_width/2 + 10), 20]) {\n            rotate([0, side * 20, 45])\n                scale([1.2, 0.5, 0.3])\n                cylinder(h=30, r=12);\n        }\n    }\n    \n    // Rear flippers (support)\n    for(side = [-1, 1]) {\n        translate([-body_length/2 + 20, side * (body_width/2 - 15), 15]) {\n            rotate([0, 0, side * 30])\n                scale([0.8, 1.2, 0.3])\n                cylinder(h=25, r=10);\n        }\n    }\n}\n\n// Whiskers as pen dividers\nmodule whiskers() {\n    translate([body_length/2 + 45, 0, 45]) {\n        for(i = [-2:2]) {\n            rotate([0, 90, i * 15])\n                cylinder(h=15, r=1.5);\n        }\n    }\n}\n\n// Base support structure\nmodule base_support() {\n    translate([0, 0, -5]) {\n        difference() {\n            // Base plate\n            cube([body_length + 40, body_width + 20, wall_thickness*2], center=true);\n            \n            // Cable management holes\n            for(pos = [[-body_length/2, 0], [body_length/2, 0]]) {\n                translate(pos)\n                    cylinder(h=10, r=8);\n            }\n        }\n    }\n}\n\n// Assembly\nseal_body();\nseal_head();\nflippers();\nwhiskers();\nbase_support();",
    "renders": true
  },
  {
    "office_supply": "scissors",
    "openscad_code": "// Scissors furniture item - office desk scissors\n// Overall dimensions: 120mm long x 60mm wide x 10mm thick\n\n$fn = 32;\n\n// Main parameters\nblade_length = 100;\nblade_width = 25;\nhandle_diameter = 30;\nhandle_thickness = 8;\npivot_radius = 4;\nwall_thickness = 2;\n\n// Central pivot module\nmodule pivot() {\n    difference() {\n        // Main pivot cylinder\n        cylinder(h=wall_thickness*2, r=pivot_radius, center=true);\n        \n        // Screw hole\n        cylinder(h=wall_thickness*2.5, r=pivot_radius-1, center=true);\n    }\n}\n\n// Blade module with cutting edge\nmodule blade(length, width) {\n    linear_extrude(height=wall_thickness) {\n        polygon([\n            [0, 0],\n            [length*0.9, width/4],\n            [length, width/10],\n            [length, -width/10],\n            [length*0.9, -width/4],\n            [0, 0]\n        ]);\n    }\n}\n\n// Handle grip module with finger holes\nmodule handle(diameter, thickness) {\n    difference() {\n        // Main handle oval\n        scale([1.2, 1, 1])\n            cylinder(h=thickness, r=diameter/2, center=true);\n        \n        // Finger hole\n        cylinder(h=thickness+1, r=diameter/3, center=true);\n        \n        // Ergonomic grip cutouts\n        translate([diameter/4, 0, -thickness/2-0.1])\n            cube([diameter/2, diameter/6, thickness+0.2], center=true);\n    }\n}\n\n// Left scissor half\nmodule left_half() {\n    union() {\n        // Handle\n        translate([0, -handle_diameter/2-5, 0])\n            rotate([0, 0, 15])\n                handle(handle_diameter, handle_thickness);\n        \n        // Blade\n        translate([0, 0, -wall_thickness/2])\n            blade(blade_length, blade_width);\n        \n        // Reinforcement rib\n        translate([-blade_length*0.3, 0, wall_thickness/2])\n            cube([blade_length*0.6, wall_thickness*2, wall_thickness]);\n    }\n}\n\n// Right scissor half (mirrored)\nmodule right_half() {\n    mirror([0, 1, 0])\n        left_half();\n}\n\n// Assembly\nunion() {\n    // Left half\n    left_half();\n    \n    // Right half\n    right_half();\n    \n    // Central pivot\n    pivot();\n}",
    "renders": true
  },
  {
    "office_supply": "letter_opener",
    "openscad_code": "// Letter Opener - Office Furniture Style\n// Realistic medium-complexity design with furniture characteristics\n\n// Overall dimensions\nlength = 120;\nwidth = 25;\nthickness = 3;\nhandle_length = 45;\nblade_length = 75;\n\n// Furniture-style handle with panel details\nmodule handle() {\n    // Main handle body\n    difference() {\n        // Handle frame\n        union() {\n            // Main grip\n            cube([handle_length, width, thickness], center=true);\n            \n            // Furniture-style end caps\n            translate([handle_length/2 - 5, 0, 0])\n                cube([10, width + 2, thickness + 1], center=true);\n            translate([-handle_length/2 + 5, 0, 0])\n                cube([10, width + 2, thickness + 1], center=true);\n        }\n        \n        // Ergonomic finger grooves\n        for (i = [-1, 0, 1]) {\n            translate([i * 12, 0, 0])\n                cylinder(h=thickness + 2, r=5, $fn=20, center=true);\n        }\n    }\n    \n    // Furniture panel details\n    for (i = [-1, 0, 1]) {\n        translate([i * 12, 0, thickness/2 + 0.1])\n            cube([8, width - 8, 0.5], center=true);\n    }\n}\n\n// Blade with furniture-style reinforcement\nmodule blade() {\n    // Main blade\n    linear_extrude(height=thickness, center=true)\n        polygon([\n            [handle_length/2, -width/2],\n            [handle_length/2 + blade_length, -2],\n            [handle_length/2 + blade_length, 2],\n            [handle_length/2, width/2]\n        ]);\n    \n    // Structural rib (furniture-style)\n    translate([handle_length/2 + blade_length/2, 0, 0])\n        cube([blade_length - 10, 3, thickness + 1], center=true);\n    \n    // Edge reinforcement\n    translate([handle_length/2 + blade_length - 5, 0, 0])\n        cylinder(h=thickness + 1, r=4, $fn=8, center=true);\n}\n\n// Furniture joint detail\nmodule joint_detail() {\n    // Transition piece between handle and blade\n    difference() {\n        // Main joint block\n        translate([handle_length/2 - 2.5, 0, 0])\n            cube([5, width + 4, thickness + 2], center=true);\n        \n        // Decorative cutouts\n        translate([handle_length/2 - 2.5, 0, 0])\n            cylinder(h=thickness + 3, r=8, $fn=6, center=true);\n    }\n    \n    // Small furniture screws\n    for (y = [-8, 8]) {\n        translate([handle_length/2 - 2.5, y, 0])\n            cylinder(h=thickness + 2, r=1.5, $fn=8, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle assembly\n    handle();\n    \n    // Joint details\n    joint_detail();\n    \n    // Blade assembly\n    blade();\n    \n    // Furniture-style branding plate\n    translate([-handle_length/2 + 5, 0, thickness/2 + 0.1])\n        cube([15, 6, 0.5], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "bookend",
    "openscad_code": "// Realistic Bookend Furniture - Medium Complexity\n// Office-style L-shaped bookend with structural elements\n\n$fn = 30;\n\n// Main parameters\nbase_width = 120;\nbase_depth = 80;\nbase_height = 15;\nvertical_height = 150;\nvertical_thickness = 20;\nsupport_angle = 45;\n\n// Material thickness\nwall_thickness = 2;\n\nmodule base_plate() {\n    // Main base with rounded edges\n    difference() {\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Hollow out bottom for material saving\n        translate([0, 0, base_height/2 - wall_thickness])\n            cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_height], center=true);\n    }\n}\n\nmodule vertical_back() {\n    // Main vertical support\n    difference() {\n        translate([0, (base_depth - vertical_thickness)/2, base_height + vertical_height/2])\n            cube([base_width, vertical_thickness, vertical_height], center=true);\n        \n        // Hollow center\n        translate([0, (base_depth - vertical_thickness)/2, base_height + vertical_height/2])\n            cube([base_width - 2*wall_thickness, vertical_thickness - wall_thickness, vertical_height - 2*wall_thickness], center=true);\n    }\n}\n\nmodule support_brace() {\n    // Triangular support brace\n    brace_height = 40;\n    brace_width = 60;\n    \n    rotate([0, -support_angle, 0])\n    translate([0, base_depth/2 - 10, base_height/2])\n    difference() {\n        cube([brace_width, wall_thickness*3, brace_height], center=true);\n        \n        // Hollow brace\n        rotate([0, support_angle, 0])\n        translate([0, 0, -wall_thickness])\n        cube([brace_width - 2*wall_thickness, wall_thickness, brace_height - wall_thickness], center=true);\n    }\n}\n\nmodule rubber_feet() {\n    // Anti-slip feet\n    foot_diameter = 8;\n    foot_height = 2;\n    \n    for(x = [-base_width/2 + 15, base_width/2 - 15]) {\n        for(y = [-base_depth/2 + 15, base_depth/2 - 15]) {\n            translate([x, y, foot_height/2])\n                cylinder(h=foot_height, d=foot_diameter, $fn=16);\n        }\n    }\n}\n\nmodule label_holder() {\n    // Metal label holder detail\n    holder_width = 60;\n    holder_height = 12;\n    holder_depth = 3;\n    \n    translate([0, base_depth/2 - 5, base_height + vertical_height/2])\n    difference() {\n        cube([holder_width, holder_depth, holder_height], center=true);\n        \n        // Label recess\n        translate([0, holder_depth/2 - 0.5, 0])\n        cube([holder_width - 4, 1, holder_height - 4], center=true);\n    }\n}\n\nmodule rounded_edges() {\n    // Add rounded corners to vertical edge\n    corner_radius = 5;\n    \n    translate([base_width/2 - corner_radius, base_depth/2 - corner_radius, base_height + vertical_height/2])\n    rotate([0, 45, 0])\n    cylinder(h=corner_radius*2, r=corner_radius, center=true);\n}\n\n// Assembly\nunion() {\n    base_plate();\n    vertical_back();\n    \n    // Multiple support braces\n    translate([base_width/4, 0, 0]) support_brace();\n    translate([-base_width/4, 0, 0]) support_brace();\n    \n    rubber_feet();\n    label_holder();\n    \n    // Add edge rounding\n    rounded_edges();\n    mirror([1, 0, 0]) rounded_edges();\n}",
    "renders": true
  },
  {
    "office_supply": "ball",
    "openscad_code": "// Ball Chair - Realistic Office Seating Element\n// Overall diameter: 120mm, printable in one piece\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main ball body - hollow sphere with wall thickness\nmodule ball_shell() {\n    difference() {\n        sphere(d = 120);                    // Outer sphere\n        \n        // Inner sphere creating hollow structure\n        translate([0, 0, 0])\n            sphere(d = 116);                // 2mm wall thickness\n        \n        // Flat base cut for stability\n        translate([0, 0, -60])\n            cube([120, 120, 60], center = true);\n        \n        // Entry opening - ergonomic 400mm wide\n        rotate([0, 90, 0])\n            cylinder(h = 120, d = 40, center = true);\n    }\n}\n\n// Reinforcement ring around entry hole\nmodule entry_reinforcement() {\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 10, d = 50);           // Outer ring\n        cylinder(h = 11, d = 40);           // Inner cut\n    }\n}\n\n// Ventilation holes - 4x small circles\nmodule ventilation_holes() {\n    for(i = [0:3]) {\n        rotate([0, 90 * i, 0])\n        translate([0, 50, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 3, d = 8);\n    }\n}\n\n// Internal seating platform\nmodule seat_platform() {\n    translate([0, 0, -25])\n    difference() {\n        // Main seat disc\n        cylinder(h = 8, d = 50);\n        \n        // Weight reduction holes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([15, 0, 0])\n                cylinder(h = 9, d = 6);\n        }\n        \n        // Central support hole\n        cylinder(h = 9, d = 10);\n    }\n}\n\n// Support column for seat\nmodule seat_support() {\n    translate([0, 0, -45])\n    cylinder(h = 20, d1 = 12, d2 = 8);      // Tapered for strength\n}\n\n// Base mounting plate\nmodule base_plate() {\n    translate([0, 0, -60])\n    difference() {\n        cylinder(h = 4, d = 80);            // Wide base for stability\n        \n        // Screw holes for optional mounting\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45])\n            translate([25, 0, 0])\n                cylinder(h = 5, d = 4);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    ball_shell();\n    \n    // Reinforcements\n    translate([0, 0, 0])\n        entry_reinforcement();\n    \n    // Functional elements\n    ventilation_holes();\n    seat_platform();\n    seat_support();\n    base_plate();\n}",
    "renders": true
  },
  {
    "office_supply": "football",
    "openscad_code": "// Football-shaped chair with realistic proportions and 3D-printable design\n// Overall dimensions: 120mm diameter football, 80mm seat height\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule football_shell() {\n    // Main football body - hollow sphere with 2mm wall thickness\n    difference() {\n        sphere(d = 120);  // Outer sphere\n        \n        // Hollow interior\n        sphere(d = 116);\n        \n        // Hexagonal panel cutouts on top half for seating surface\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([0, 0, 55]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 10, d = 25, $fn = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Ergonomic seat cushion matching football curvature\n    difference() {\n        // Main cushion - slightly flattened sphere\n        scale([1, 1, 0.6])\n        sphere(d = 110);\n        \n        // Remove bottom for sitting surface\n        translate([0, 0, -35])\n        cube([200, 200, 100], center = true);\n    }\n}\n\nmodule support_base() {\n    // Stable support structure with four legs\n    union() {\n        // Central hub\n        cylinder(h = 15, d = 30);\n        \n        // Four support legs at 45-degree angles\n        for (angle = [45, 135, 225, 315]) {\n            rotate([0, 0, angle]) {\n                translate([20, 0, -30]) {\n                    // Tapered leg design for stability\n                    cylinder(h1 = 30, h2 = 30, r1 = 8, r2 = 12);\n                }\n            }\n        }\n        \n        // Reinforcement ring connecting legs\n        translate([0, 0, -25])\n        cylinder(h = 5, d = 60);\n    }\n}\n\nmodule football_texture() {\n    // Realistic pentagon pattern on football surface\n    color(\"white\") {\n        // Main pentagon panels\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                rotate([90, 0, 0]) {\n                    translate([0, 0, 60]) {\n                        // Pentagonal panels with slight inset\n                        linear_extrude(height = 0.5) {\n                            polygon(points = [\n                                [0, 25], [24, 8], [15, -20], [-15, -20], [-24, 8]\n                            ]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hexagon panels between pentagons\n        for (i = [0:19]) {\n            rotate([0, 0, i * 18]) {\n                rotate([75, 0, 0]) {\n                    translate([0, 0, 60]) {\n                        linear_extrude(height = 0.5) {\n                            polygon(points = [\n                                [0, 15], [13, 8], [13, -8], [0, -15], [-13, -8], [-13, 8]\n                            ]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule assembly() {\n    // Complete football chair assembly\n    union() {\n        // Football body as chair back/seat\n        football_shell();\n        \n        // Add seat cushion inside football\n        translate([0, 0, 20])\n        seat_cushion();\n        \n        // Support base underneath\n        translate([0, 0, -70])\n        support_base();\n        \n        // Surface texture details\n        football_texture();\n    }\n}\n\n// Render the complete model\nassembly();",
    "renders": true
  },
  {
    "office_supply": "baseball",
    "openscad_code": "// Baseball-shaped desk organizer\n// Realistic style, medium complexity\n\n$fn = 48;\n\n// Overall dimensions\nbase_diameter = 80;\nbase_height = 60;\nwall_thickness = 2;\n\n// Module for baseball stitching pattern\nmodule stitching_pattern() {\n    // Create stitching lines\n    for (i = [0:179]) {\n        rotate([0, 0, i * 2])\n        translate([0, 0, -base_height/2 + 2])\n        rotate([90, 0, 0])\n        cylinder(h = base_diameter - 10, r = 0.5, $fn = 8);\n    }\n}\n\n// Module for baseball seam\nmodule baseball_seam() {\n    // Main seam curve\n    rotate_extrude(angle = 360, $fn = 100)\n    translate([base_diameter/2 - 2, 0])\n    circle(r = 1, $fn = 16);\n}\n\n// Main baseball body\nmodule baseball_body() {\n    difference() {\n        // Outer sphere\n        sphere(d = base_diameter);\n        \n        // Hollow interior\n        sphere(d = base_diameter - wall_thickness * 2);\n        \n        // Cut bottom flat for stability\n        translate([0, 0, -base_diameter/2 + 10])\n        cube([base_diameter, base_diameter, base_diameter], center = true);\n    }\n}\n\n// Pen holder section\nmodule pen_holder() {\n    // Main holder cylinder\n    translate([0, 0, -base_height/2 + 30])\n    difference() {\n        cylinder(h = 25, r = 15, $fn = 32);\n        cylinder(h = 25, r = 13, $fn = 32);\n    }\n    \n    // Secondary holder for smaller items\n    translate([25, 0, -base_height/2 + 30])\n    difference() {\n        cylinder(h = 20, r = 8, $fn = 24);\n        cylinder(h = 20, r = 6, $fn = 24);\n    }\n    \n    // Paper clip tray\n    translate([-25, 0, -base_height/2 + 35])\n    difference() {\n        cube([20, 15, 8], center = true);\n        cube([18, 13, 8], center = true);\n    }\n}\n\n// Baseball stitching detail\nmodule stitching_detail() {\n    // Red stitching pattern\n    color(\"red\") {\n        // Main seam stitching\n        for (angle = [0:15:359]) {\n            rotate([0, 0, angle])\n            translate([base_diameter/2 - 2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 2, r = 0.8, $fn = 8);\n        }\n        \n        // Secondary seam\n        rotate([0, 90, 0]) {\n            for (angle = [0:15:359]) {\n                rotate([0, angle, 0])\n                translate([base_diameter/2 - 2, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h = 2, r = 0.8, $fn = 8);\n            }\n        }\n    }\n}\n\n// Base support ring\nmodule base_support() {\n    difference() {\n        cylinder(h = 5, r = base_diameter/2 + 5, $fn = 64);\n        cylinder(h = 5, r = base_diameter/2, $fn = 64);\n    }\n}\n\n// Assembly\nunion() {\n    // Main baseball body\n    baseball_body();\n    \n    // Furniture elements\n    pen_holder();\n    \n    // Base for stability\n    translate([0, 0, -base_diameter/2 + 10])\n    base_support();\n    \n    // Decorative stitching\n    stitching_detail();\n}",
    "renders": true
  },
  {
    "office_supply": "basketball",
    "openscad_code": "// Basketball-Stool (realistic style, medium complexity)\n// A small stool shaped like a basketball with functional legs and structural details\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Overall dimensions (basketball diameter 120mm)\nball_d = 120;\nwall_t = 2.5;  // 3D printable wall thickness\n\n// Leg parameters\nleg_d = 15;\nleg_h = 80;\nleg_angle = 15;\n\n// Ventilation holes pattern\nhole_d = 6;\nholes_per_line = 5;\n\n// Module for a single stool leg\nmodule stool_leg() {\n    // Main leg cylinder\n    cylinder(h=leg_h, d=leg_d, center=false);\n    \n    // Foot pad for stability\n    translate([0,0,-2])\n        cylinder(h=5, d=leg_d+4, center=false);\n    \n    // Reinforcement ring at top\n    translate([0,0,leg_h-5])\n        cylinder(h=5, d=leg_d+6, center=false);\n}\n\n// Module for basketball surface pattern (realistic seams)\nmodule basketball_seams() {\n    // Main vertical seam\n    rotate([0,90,0])\n        cube([ball_d, wall_t*1.5, wall_t*1.5], center=true);\n    \n    // Horizontal seam\n    rotate([90,0,0])\n        cube([ball_d, wall_t*1.5, wall_t*1.5], center=true);\n    \n    // Additional curved seams for realistic look\n    for(i=[-1,1]) {\n        rotate([0,i*45,0])\n            translate([0,0,ball_d/4])\n                rotate([0,90,0])\n                    cylinder(h=ball_d/2, d=wall_t*1.5, center=true);\n    }\n}\n\n// Module for hollow basketball shell\nmodule basketball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d=ball_d);\n        \n        // Inner hollow space\n        sphere(d=ball_d - 2*wall_t);\n        \n        // Bottom cut flat for stability\n        translate([0,0,-ball_d/2+wall_t])\n            cube([ball_d+1, ball_d+1, ball_d/2], center=true);\n    }\n}\n\n// Module for ventilation holes (functional and decorative)\nmodule ventilation_holes() {\n    for(i=[-holes_per_line:holes_per_line]) {\n        for(j=[-holes_per_line:holes_per_line]) {\n            if(abs(i) + abs(j) < holes_per_line) {\n                translate([i*hole_d*1.5, j*hole_d*1.5, 0])\n                    rotate([0,0,45])\n                        cylinder(h=wall_t+1, d=hole_d, center=true, $fn=6);\n            }\n        }\n    }\n}\n\n// Assembly\nmodule basketball_stool() {\n    // Main basketball seat\n    difference() {\n        basketball_shell();\n        \n        // Ventilation holes on top\n        translate([0,0,ball_d/2-wall_t/2])\n            ventilation_holes();\n        \n        // Mounting holes for legs (recessed)\n        for(i=[0:120:359]) {\n            rotate([0,0,i])\n                translate([(ball_d/2-wall_t-5)*cos(leg_angle), 0, -ball_d/2+5])\n                    rotate([90+leg_angle,0,0])\n                        cylinder(h=15, d=leg_d+4, center=false);\n        }\n    }\n    \n    // Basketball seam details\n    color(\"black\")\n        basketball_seams();\n    \n    // Four stool legs\n    for(i=[0:90:359]) {\n        rotate([0,0,i])\n            translate([(ball_d/2-5)*cos(leg_angle), 0, -ball_d/2+5])\n                rotate([leg_angle,0,0])\n                    stool_leg();\n    }\n    \n    // Center support ring\n    translate([0,0,-leg_h/2])\n        rotate_extrude()\n            translate([(leg_d/2+10)*cos(leg_angle), 0, 0])\n                square([wall_t, leg_h/2]);\n}\n\n// Render the stool\nbasketball_stool();",
    "renders": true
  },
  {
    "office_supply": "soccerball",
    "openscad_code": "// Soccer Ball Office Chair\n// Realistic style, medium complexity, 3D printable\n\n// Configuration\n$fn = 32;\nball_diameter = 100;\nwall_thickness = 2;\nleg_height = 60;\nleg_diameter = 8;\n\n// Soccer ball panels\nmodule hexagon(size, thickness) {\n    linear_extrude(height = thickness)\n        for(i = [0:5])\n            rotate([0,0,i*60])\n                translate([size,0,0])\n                    cube([size, size/cos(30), wall_thickness], center = true);\n}\n\nmodule pentagon(size, thickness) {\n    linear_extrude(height = thickness)\n        for(i = [0:4])\n            rotate([0,0,i*72])\n                translate([size,0,0])\n                    cube([size, size*0.85, wall_thickness], center = true);\n}\n\n// Soccer ball surface\nmodule soccer_ball_surface() {\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Hexagonal panels\n        translate([0,0,ball_diameter/2 - 2])\n            rotate([0,90,0])\n                hexagon(ball_diameter/12, wall_thickness);\n        \n        translate([0,0,-ball_diameter/2 + 2])\n            rotate([0,-90,0])\n                hexagon(ball_diameter/12, wall_thickness);\n        \n        // Pentagon panels\n        for(i = [0:5]) {\n            rotate([0,0,i*72])\n                translate([0, ball_diameter/2 - 2, 0])\n                    rotate([90,0,0])\n                        pentagon(ball_diameter/12, wall_thickness);\n        }\n        \n        // Internal hollow\n        sphere(d = ball_diameter - wall_thickness*2);\n    }\n}\n\n// Chair legs with wheels\nmodule chair_leg() {\n    difference() {\n        cylinder(h = leg_height, d = leg_diameter);\n        cylinder(h = leg_height - 10, d = leg_diameter - wall_thickness);\n    }\n    \n    // Wheel\n    translate([0,0,-leg_height-5])\n        rotate([90,0,0])\n            cylinder(h = 10, d = 15);\n}\n\n// Chair base\nmodule chair_base() {\n    // Central hub\n    difference() {\n        cylinder(h = 20, d = 30);\n        cylinder(h = 20, d = 30 - wall_thickness*2);\n    }\n    \n    // Legs\n    for(i = [0:4]) {\n        rotate([0,0,i*72])\n            translate([15,0,10])\n                chair_leg();\n    }\n}\n\n// Seat support structure\nmodule seat_support() {\n    // Main support shaft\n    difference() {\n        cylinder(h = 40, d = 25);\n        cylinder(h = 40, d = 25 - wall_thickness*2);\n    }\n    \n    // Connection plate\n    translate([0,0,40])\n        difference() {\n            cylinder(h = 10, d = 35);\n            cylinder(h = 10, d = 35 - wall_thickness*2);\n        }\n}\n\n// Assembly\ntranslate([0,0,leg_height+40])\n    soccer_ball_surface();\n\ntranslate([0,0,leg_height])\n    seat_support();\n\nchair_base();",
    "renders": true
  },
  {
    "office_supply": "tennisball",
    "openscad_code": "// Tennisball Desk Pen Holder\n// Realistic style, medium complexity\n// Size: 80mm diameter, 60mm height\n// Wall thickness: 2mm\n\n// Parameters\nball_d = 80;\nball_r = ball_d/2;\nwall = 2;\nheight = 60;\nseam_width = 3;\nseam_depth = 1.5;\nfuzz_size = 1.5;\nfuzz_density = 72;\nhole_r = 12;\nhole_spacing = 25;\nbase_thickness = 4;\n\n// Main module\nmodule tennisball_holder() {\n    difference() {\n        // Outer shell\n        tennisball_shell();\n        \n        // Hollow interior\n        translate([0, 0, base_thickness])\n            sphere(r = ball_r - wall);\n        \n        // Pen holes\n        for(i = [0:1:2]) {\n            angle = i * 120;\n            x = cos(angle) * hole_spacing;\n            y = sin(angle) * hole_spacing;\n            translate([x, y, -1])\n                cylinder(h = height + 2, r = hole_r, $fn = 32);\n        }\n        \n        // Center hole\n        translate([0, 0, -1])\n            cylinder(h = height + 2, r = hole_r * 0.8, $fn = 32);\n    }\n    \n    // Base plate\n    translate([0, 0, 0])\n        cylinder(h = base_thickness, r = ball_r, $fn = 64);\n}\n\n// Tennis ball shell with seams and texture\nmodule tennisball_shell() {\n    difference() {\n        union() {\n            // Main sphere\n            sphere(r = ball_r, $fn = 64);\n            \n            // Fuzzy texture dots\n            for(i = [0:fuzz_density - 1]) {\n                theta = i * 360 / fuzz_density;\n                phi = 30 + (i % 3) * 30;\n                x = ball_r * cos(theta) * sin(phi);\n                y = ball_r * sin(theta) * sin(phi);\n                z = ball_r * cos(phi);\n                translate([x, y, z])\n                    sphere(r = fuzz_size);\n            }\n        }\n        \n        // Seams\n        tennisball_seam(0);\n        tennisball_seam(90);\n    }\n}\n\n// Create curved seam grooves\nmodule tennisball_seam(rotation) {\n    rotate([rotation, 0, 0])\n        for(z = [-ball_r:seam_width:ball_r]) {\n            h = sqrt(max(0, ball_r*ball_r - z*z));\n            if(h > 0) {\n                translate([0, 0, z])\n                    rotate([90, 0, 0])\n                        cylinder(h = seam_width*2, r1 = h, r2 = h - seam_depth, $fn = 32);\n            }\n        }\n}\n\n// Generate the model\ntennisball_holder();",
    "renders": true
  },
  {
    "office_supply": "volleyball",
    "openscad_code": "// Volleyball Desk Lamp\n// Realistic medium-complexity furniture item\n\n$fn = 32;\nwall_thickness = 2;\nbase_diameter = 80;\nheight = 120;\n\nmodule volleyball_lines() {\n    // Main panel seams - 3 great circles\n    rotate([0, 0, 0]) \n        cylinder(h=base_diameter+4, r=base_diameter/2+1, center=true);\n    rotate([90, 0, 0]) \n        cylinder(h=base_diameter+4, r=base_diameter/2+1, center=true);\n    rotate([0, 90, 0]) \n        cylinder(h=base_diameter+4, r=base_diameter/2+1, center=true);\n}\n\nmodule volleyball_shell() {\n    difference() {\n        // Main ball\n        sphere(d=base_diameter);\n        \n        // Hollow interior\n        sphere(d=base_diameter-wall_thickness*2);\n        \n        // Cut in half for lamp shade\n        translate([0, 0, -base_diameter/4])\n            cube([base_diameter*2, base_diameter*2, base_diameter/2], center=true);\n    }\n}\n\nmodule lamp_base() {\n    // Weighted base cylinder\n    cylinder(h=15, d=base_diameter*1.2, center=false);\n    \n    // Base ring detail\n    translate([0, 0, 15])\n        cylinder(h=3, d=base_diameter*1.2+4);\n    \n    // LED housing\n    translate([0, 0, 18])\n        cylinder(h=8, d=20);\n}\n\nmodule support_arm() {\n    // Curved support\n    translate([0, 0, 26])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer tube\n                cylinder(h=60, r1=6, r2=4);\n                // Inner tube (hollow)\n                translate([0, 0, wall_thickness])\n                    cylinder(h=60-wall_thickness*2, r1=6-wall_thickness, r2=4-wall_thickness);\n            }\n    \n    // Ball joint connector\n    translate([0, 0, 86])\n        sphere(d=12);\n}\n\nmodule joint_mechanism() {\n    // Universal joint housing\n    translate([0, 0, 86])\n        difference() {\n            sphere(d=12);\n            // Socket for ball\n            sphere(d=10);\n        }\n    \n    // Adjustment screw\n    translate([0, 0, 93])\n        cylinder(h=8, d=6);\n}\n\n// Assembly\nunion() {\n    // Lamp base and arm\n    lamp_base();\n    support_arm();\n    joint_mechanism();\n    \n    // Volleyball lamp shade\n    translate([0, 0, 86])\n        rotate([0, -30, 0])\n        union() {\n            volleyball_shell();\n            \n            // Panel line details\n            difference() {\n                volleyball_lines();\n                sphere(d=base_diameter-wall_thickness);\n            }\n        }\n}\n\n// Cable hole\ntranslate([0, -base_diameter*0.6/2, 10])\n    rotate([90, 0, 0])\n        cylinder(h=20, d=8);",
    "renders": true
  },
  {
    "office_supply": "golfball",
    "openscad_code": "// Golf Ball Office Desk Ornament with Stand\n// Realistic style, medium complexity\n\n// Parameters\nball_diameter = 40;                // Golf ball size\ndimple_radius = 2.5;               // Dimple size\ndimple_depth = 1.2;                // Dimple depth\nbase_width = 60;                   // Stand base width\nbase_height = 8;                   // Stand thickness\nstand_height = 30;                 // Stand height\npost_radius = 4;                   // Support post radius\nwall_thickness = 2;                // 3D printing wall thickness\n\n// Golf Ball Module\nmodule golf_ball() {\n    difference() {\n        // Main sphere\n        sphere(d = ball_diameter, $fn = 100);\n        \n        // Dimples - icosahedron layout for realistic pattern\n        for (theta = [0:72:360]) {\n            for (phi = [26.565:52.62:180-26.565]) {\n                // Top hemisphere dimples\n                rotate([0, phi, theta]) \n                    translate([0, 0, ball_diameter/2 - dimple_depth]) \n                        sphere(d = dimple_radius*2, $fn = 16);\n                \n                // Bottom hemisphere dimples (offset)\n                rotate([0, 180-phi, theta+36]) \n                    translate([0, 0, ball_diameter/2 - dimple_depth]) \n                        sphere(d = dimple_radius*2, $fn = 16);\n            }\n        }\n        \n        // Additional dimples at poles\n        for (angle = [0:60:360]) {\n            rotate([0, 0, angle]) \n                translate([0, 0, ball_diameter/2 - dimple_depth]) \n                    sphere(d = dimple_radius*2, $fn = 16);\n        }\n    }\n}\n\n// Stand Base Module\nmodule stand_base() {\n    difference() {\n        // Main base\n        cube([base_width, base_width, base_height], center = true);\n        \n        // Rounded edges\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x*(base_width/2 - 5), y*(base_width/2 - 5), 0])\n                    cylinder(h = base_height + 1, r = 5, center = true, $fn = 32);\n            }\n        }\n        \n        // Chamfer bottom edges\n        translate([0, 0, -base_height/2 - 0.1])\n            cube([base_width + 2, base_width + 2, 2], center = true);\n    }\n}\n\n// Support Post Module\nmodule support_post() {\n    // Main post\n    cylinder(h = stand_height, r = post_radius, $fn = 32);\n    \n    // Strengthening ring\n    translate([0, 0, stand_height/2])\n        cylinder(h = 6, r = post_radius + wall_thickness, $fn = 32);\n}\n\n// Ball Holder Module\nmodule ball_holder() {\n    difference() {\n        // Main holder ring\n        rotate_extrude(angle = 360, $fn = 100) \n            translate([ball_diameter/2 + wall_thickness, 0, 0]) \n                square([wall_thickness, 8]);\n        \n        // Interior cavity\n        rotate_extrude(angle = 360, $fn = 100) \n            translate([ball_diameter/2, -0.1, 0]) \n                square([wall_thickness + 0.2, 8.2]);\n    }\n}\n\n// Assembly\n// Stand base at origin\nstand_base();\n\n// Support post\ntranslate([0, 0, base_height/2 + stand_height/2])\n    support_post();\n\n// Ball holder on top of post\ntranslate([0, 0, base_height + stand_height - 2])\n    ball_holder();\n\n// Golf ball on holder\ntranslate([0, 0, base_height + stand_height + 4])\n    golf_ball();",
    "renders": true
  },
  {
    "office_supply": "bowlingball",
    "openscad_code": "// Bowling Ball Paperweight / Bookend\n// Realistic style, medium complexity\n// Overall dimensions: 70mm diameter bowling ball on 100x60x20mm base\n\n// Parameters\nball_diameter = 60;\nbase_width = 100;\nbase_depth = 60;\nbase_height = 20;\nwall_thickness = 2;\npin_count = 3;\npin_diameter = 4;\n\n// Render with standard resolution\n$fn = 50;\n\n// Main module\nmodule bowling_ball_paperweight() {\n    // Base with rounded edges\n    difference() {\n        // Main base block\n        union() {\n            // Base bottom\n            translate([0, 0, base_height/2])\n                rounded_cube([base_width, base_depth, base_height], 5);\n            \n            // Front lip for book support\n            translate([0, base_depth/2 - wall_thickness/2, base_height + 5])\n                rounded_cube([base_width - 20, wall_thickness, 10], 2);\n        }\n        \n        // Hollow out base\n        translate([0, 0, base_height/2 + wall_thickness])\n            rounded_cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_height - wall_thickness], 3);\n    }\n    \n    // Bowling ball\n    translate([0, 0, base_height + ball_diameter/2])\n        bowling_ball();\n    \n    // Finger holes\n    translate([0, 0, base_height + ball_diameter/2])\n        finger_holes();\n    \n    // Support pins\n    translate([0, 0, base_height])\n        support_pins();\n}\n\n// Bowling ball with finger holes\nmodule bowling_ball() {\n    difference() {\n        // Main ball\n        sphere(d = ball_diameter);\n        \n        // Finger holes (three holes as standard bowling ball)\n        hole_positions = [\n            [0, -10, ball_diameter/2 - 15],\n            [-8, 5, ball_diameter/2 - 15],\n            [8, 5, ball_diameter/2 - 15]\n        ];\n        \n        for (pos = hole_positions) {\n            translate(pos)\n                rotate([0, 90, 0])\n                    cylinder(h = 20, d = 8, $fn = 16);\n        }\n    }\n}\n\n// Finger holes module for cleaner structure\nmodule finger_holes() {\n    hole_positions = [\n        [0, -10, ball_diameter/2 - 15],\n        [-8, 5, ball_diameter/2 - 15],\n        [8, 5, ball_diameter/2 - 15]\n    ];\n    \n    for (pos = hole_positions) {\n        translate(pos)\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 8, $fn = 16);\n    }\n}\n\n// Support pins between ball and base\nmodule support_pins() {\n    for (i = [0:pin_count-1]) {\n        angle = i * 120;\n        translate([\n            cos(angle) * 15,\n            sin(angle) * 15,\n            0\n        ])\n            cylinder(h = ball_diameter/2 - 5, d = pin_diameter, $fn = 16);\n    }\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    x = size[0];\n    y = size[1];\n    z = size[2];\n    \n    hull() {\n        // Corner spheres\n        for (i = [-1, 1])\n            for (j = [-1, 1])\n                for (k = [-1, 1])\n                    translate([i*(x/2 - radius), j*(y/2 - radius), k*(z/2 - radius)])\n                        sphere(r = radius);\n    }\n}\n\n// Render the model\nbowling_ball_paperweight();",
    "renders": true
  },
  {
    "office_supply": "rugbyball",
    "openscad_code": "// Rugbyball Desk Organizer\n// Dimensions: 120mm long, 60mm wide, 60mm tall\n// Features: Pen holder, paperclip tray, note slot, base stand\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main rugbyball body\nmodule rugbyball_body() {\n    difference() {\n        // Main ellipsoid shape\n        scale([1, 0.5, 0.5])\n            sphere(60);\n        \n        // Hollow interior with 2mm walls\n        scale([1, 0.45, 0.45])\n            sphere(58);\n        \n        // Flat bottom for stability\n        translate([0, 0, -30])\n            cube([120, 60, 30], center=true);\n    }\n}\n\n// Grip pattern panels\nmodule grip_panels() {\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([0, 0, 25])\n                scale([1, 0.3, 0.1])\n                    sphere(10);\n    }\n}\n\n// Pen holder compartment (vertical cylinder)\nmodule pen_holder() {\n    difference() {\n        // Outer cylinder\n        translate([30, 0, 0])\n            cylinder(h=45, r=12);\n        \n        // Inner hole\n        translate([30, 0, -1])\n            cylinder(h=47, r=10);\n    }\n}\n\n// Paperclip tray (small box)\nmodule paperclip_tray() {\n    difference() {\n        // Tray base\n        translate([-40, 0, 10])\n            cube([25, 20, 15]);\n        \n        // Inner cavity\n        translate([-38, 0, 12])\n            cube([21, 16, 13]);\n    }\n}\n\n// Note/card slot\nmodule note_slot() {\n    // Slot opening\n    translate([0, 0, 35])\n        cube([80, 3, 25]);\n    \n    // Slot depth\n    translate([0, 0, 22])\n        cube([76, 2.5, 26]);\n}\n\n// Support base for stability\nmodule support_base() {\n    difference() {\n        // Base platform\n        translate([0, 0, -35])\n            cube([130, 70, 5]);\n        \n        // Recess for rugbyball\n        translate([0, 0, -35])\n            scale([1, 0.5, 0.2])\n                sphere(65);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    rugbyball_body();\n    \n    // Grip details\n    grip_panels();\n    \n    // Furniture features\n    pen_holder();\n    paperclip_tray();\n    note_slot();\n    \n    // Support structure\n    support_base();\n}",
    "renders": true
  },
  {
    "office_supply": "handball",
    "openscad_code": "// Handball Office Chair\n// Realistic style, medium complexity\n// Size: ~120mm tall, suitable for 3D printing\n\n// Chair parameters\nchair_height = 120;\nseat_height = 60;\nseat_width = 50;\nseat_depth = 45;\nbackrest_height = 60;\nleg_diameter = 8;\narmrest_height = 20;\n\n// Handball parameters\nball_diameter = 35;\npanel_width = 12;\npanel_depth = 2;\n\n// Main module\nmodule handball_chair() {\n    // Chair seat with handball embedded\n    difference() {\n        // Seat base\n        cube([seat_width, seat_depth, 5], center=true);\n        \n        // Handball cavity\n        translate([0, 0, 2.5])\n        sphere(d=ball_diameter + 2);\n    }\n    \n    // Handball on seat\n    translate([0, 0, 5])\n    handball(ball_diameter);\n    \n    // Backrest\n    translate([0, -seat_depth/2 + 2.5, backrest_height/2 + 5])\n    cube([seat_width, 5, backrest_height], center=true);\n    \n    // Backrest support bars\n    for(x = [-seat_width/3, 0, seat_width/3]) {\n        translate([x, -seat_depth/2 + 2.5, backrest_height/4 + 5])\n        cube([3, 5, backrest_height/2], center=true);\n    }\n    \n    // Chair legs\n    leg_positions = [\n        [-seat_width/2 + 5, seat_depth/2 - 5],\n        [seat_width/2 - 5, seat_depth/2 - 5],\n        [-seat_width/2 + 5, -seat_depth/2 + 5],\n        [seat_width/2 - 5, -seat_depth/2 + 5]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -seat_height/2 + 2.5])\n        cylinder(h=seat_height - 5, d=leg_diameter, center=true);\n    }\n    \n    // Leg support bars\n    for(i = [0,1]) {\n        // Front-back bars\n        translate([leg_positions[i][0], 0, -seat_height/2 + 15])\n        cube([leg_diameter, seat_depth - 10, leg_diameter], center=true);\n        \n        // Side bars\n        translate([0, leg_positions[i*2][1], -seat_height/2 + 25])\n        cube([seat_width - 10, leg_diameter, leg_diameter], center=true);\n    }\n    \n    // Armrests\n    armrest_offset = seat_width/2 + 5;\n    translate([armrest_offset, 0, seat_height/2 + armrest_height/2])\n    cube([5, seat_depth - 10, armrest_height], center=true);\n    \n    translate([-armrest_offset, 0, seat_height/2 + armrest_height/2])\n    cube([5, seat_depth - 10, armrest_height], center=true);\n    \n    // Armrest supports\n    for(side = [-1, 1]) {\n        translate([side * armrest_offset, seat_depth/2 - 10, seat_height/2 + 5])\n        cube([5, 5, 15], center=true);\n        \n        translate([side * armrest_offset, -seat_depth/2 + 10, seat_height/2 + 5])\n        cube([5, 5, 15], center=true);\n    }\n}\n\n// Handball module with panel details\nmodule handball(diameter) {\n    // Main ball\n    sphere(d=diameter);\n    \n    // Panel lines - simplified as grooves\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle])\n        translate([diameter/2 - panel_depth - 1, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=diameter, d=1, center=true);\n    }\n    \n    // Horizontal panel lines\n    for(angle = [-45, 45]) {\n        rotate([0, angle, 0])\n        translate([0, 0, diameter/2 - panel_depth - 1])\n        rotate([90, 0, 0])\n        cylinder(h=diameter, d=1, center=true);\n    }\n}\n\n// Render the chair\nhandball_chair();",
    "renders": true
  },
  {
    "office_supply": "cricketball",
    "openscad_code": "// Cricket Ball Office Chair\n// Realistic style, medium complexity\n// Approx 120mm tall, 3D printable with 2mm walls\n\n// Main Parameters\nball_diameter = 80;\nseat_height = 100;\nwall_thickness = 2;\n\n// Cricket Ball Seam Module\nmodule cricket_seam() {\n    // Main seam line around circumference\n    rotate([0, 90, 0])\n    difference() {\n        sphere(d = ball_diameter + 0.5);\n        sphere(d = ball_diameter - 0.5);\n    }\n    \n    // Six rows of stitches\n    for(i = [0:5]) {\n        rotate([0, 90, i * 60])\n        translate([0, 0, ball_diameter/2 - 1])\n        linear_extrude(height = 2)\n        circle(d = 3, $fn = 6);\n    }\n}\n\n// Ball Seat Module\nmodule ball_seat() {\n    difference() {\n        // Main ball shape\n        sphere(d = ball_diameter, $fn = 50);\n        \n        // Flatten bottom for stability\n        translate([0, 0, -ball_diameter/2])\n        cube([ball_diameter*1.2, ball_diameter*1.2, ball_diameter], center = true);\n    }\n    \n    // Cricket ball seam detail\n    cricket_seam();\n}\n\n// Chair Base Module\nmodule chair_base() {\n    // Central support pole\n    cylinder(h = seat_height - ball_diameter/2, d = 12, center = false);\n    \n    // Five star base legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 15, 0])\n        cube([30, 8, wall_thickness*2], center = true);\n    }\n    \n    // Wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([27, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d = 10, center = true);\n    }\n}\n\n// Backrest Support\nmodule backrest_support() {\n    // Vertical posts\n    translate([ball_diameter/3, 0, 0])\n    cylinder(h = 50, d = 6, center = false);\n    \n    translate([-ball_diameter/3, 0, 0])\n    cylinder(h = 50, d = 6, center = false);\n    \n    // Horizontal support bar\n    translate([0, 0, 45])\n    rotate([90, 0, 0])\n    cylinder(h = ball_diameter/1.5, d = 6, center = true);\n}\n\n// Assembly\ntranslate([0, 0, seat_height - ball_diameter/2])\nball_seat();\n\ntranslate([0, 0, 0])\nchair_base();\n\ntranslate([0, 0, ball_diameter/2])\nbackrest_support();",
    "renders": true
  },
  {
    "office_supply": "lacrosseball",
    "openscad_code": "// Lacrosse Ball Office Chair\n// Realistic style, medium complexity\n// Dimensions: ~120mm height, ~100mm width\n\n// Chair base module\nmodule chair_base() {\n    // Central pole\n    cylinder(h=50, r=3, $fn=20);\n    \n    // Support arms with proper joints\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 18, 0])\n        union() {\n            // Support arm\n            cube([2, 25, 2], center=true);\n            // Wheel mount joint\n            translate([0, 12.5, 0])\n            cylinder(h=3, r=3, $fn=8);\n        }\n    }\n}\n\n// Wheel assemblies with realistic proportions\nmodule wheel_assemblies() {\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 30, -25])\n        rotate([90, 0, 0])\n        difference() {\n            // Wheel mount\n            cylinder(h=8, r=4, $fn=12);\n            // Axle hole\n            cylinder(h=10, r=1.5, $fn=8);\n        }\n        // Actual wheel\n        translate([0, 30, -30])\n        rotate([90, 0, 0])\n        cylinder(h=6, r=6, $fn=20);\n    }\n}\n\n// Lacrosse ball seat with realistic dimples\nmodule lacrosse_ball_seat() {\n    // Main ball body (60mm diameter)\n    sphere(r=30, $fn=50);\n    \n    // Realistic dimple pattern\n    for (lat = [15:30:165]) {\n        for (lon = [0:30:360]) {\n            rotate([0, lat, lon])\n            translate([0, 0, 28])\n            sphere(r=4, $fn=8);\n        }\n    }\n}\n\n// Ergonomic backrest structure\nmodule backrest_support() {\n    // Main post\n    translate([0, 0, 35])\n    cylinder(h=45, r=3, $fn=20);\n    \n    // Curved backrest frame\n    translate([0, -20, 65])\n    rotate([0, 15, 0])\n    difference() {\n        // Outer frame\n        cylinder(h=40, r=20, $fn=20);\n        // Inner cutout\n        cylinder(h=42, r=17, $fn=20);\n    }\n    \n    // Horizontal support bars\n    for (h = [50, 60, 70]) {\n        translate([0, -20, h])\n        rotate([0, 15, 0])\n        cube([40, 2, 2], center=true);\n    }\n}\n\n// Seat mounting bracket\nmodule seat_mount() {\n    difference() {\n        // Main bracket\n        translate([0, 0, 25])\n        cylinder(h=10, r=15, $fn=20);\n        // Mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([10, 0, 25])\n            cylinder(h=12, r=2, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure with wheels\n    chair_base();\n    wheel_assemblies();\n    \n    // Seat mounting system\n    seat_mount();\n    \n    // Lacrosse ball seat\n    translate([0, 0, 40])\n    lacrosse_ball_seat();\n    \n    // Backrest structure\n    backrest_support();\n}",
    "renders": true
  },
  {
    "office_supply": "hockeyball",
    "openscad_code": "// Hockeyball Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm height, 80mm diameter base\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main chair module\nmodule hockeyball_chair() {\n    // Chair base - hollow cylinder for stability\n    difference() {\n        cylinder(h=15, d=80, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=13, d=76, $fn=64);\n    }\n    \n    // Central support pole - hollow tube\n    translate([0, 0, 15])\n    difference() {\n        cylinder(h=50, d=20, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=46, d=16, $fn=32);\n    }\n    \n    // Hockey ball seat - main sphere\n    translate([0, 0, 65])\n    difference() {\n        sphere(d=70, $fn=64);\n        // Hollow interior\n        translate([0, 0, -35])\n            sphere(d=66, $fn=64);\n    }\n    \n    // Seat opening - flattened top for sitting\n    translate([0, 0, 95])\n    difference() {\n        cylinder(h=10, d=50, $fn=48);\n        translate([0, 0, 2])\n            cylinder(h=8, d=46, $fn=48);\n    }\n    \n    // Hockey ball seam lines - decorative grooves\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, 35, 65])\n        rotate([90, 0, 0])\n        cylinder(h=1, d=1.5, $fn=16);\n    }\n    \n    // Back support - curved\n    translate([0, -30, 75])\n    difference() {\n        rotate([0, 10, 0])\n        scale([1, 1, 0.8])\n        sphere(d=40, $fn=32);\n        translate([0, 5, 0])\n        rotate([0, 10, 0])\n        scale([0.9, 0.9, 0.7])\n        sphere(d=40, $fn=32);\n    }\n    \n    // Armrest supports - left\n    translate([-35, 0, 75])\n    difference() {\n        rotate([0, 0, -30])\n        cube([15, 2, 20], center=true);\n        translate([0, 0, 10])\n        cube([12, 1.5, 16], center=true);\n    }\n    \n    // Armrest supports - right\n    translate([35, 0, 75])\n    mirror([1, 0, 0])\n    difference() {\n        rotate([0, 0, -30])\n        cube([15, 2, 20], center=true);\n        translate([0, 0, 10])\n        cube([12, 1.5, 16], center=true);\n    }\n    \n    // Armrest pads\n    translate([-45, 0, 85])\n    scale([1, 0.7, 0.3])\n    sphere(d=20, $fn=24);\n    \n    translate([45, 0, 85])\n    scale([1, 0.7, 0.3])\n    sphere(d=20, $fn=24);\n    \n    // Base reinforcement ribs\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([30, 0, 7.5])\n        cube([25, 3, 13], center=true);\n    }\n    \n    // Height adjustment lever\n    translate([12, 0, 35])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=15, d=6, $fn=16);\n        translate([0, 0, 1])\n        cylinder(h=13, d=4, $fn=16);\n    }\n    \n    // Lever handle\n    translate([12, 15, 35])\n    sphere(d=8, $fn=16);\n}\n\n// Assembly\nhockeyball_chair();",
    "renders": true
  },
  {
    "office_supply": "squashball",
    "openscad_code": "// Squashball-Inspired Ergonomic Desk Lamp Base\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\nball_diameter = 80;\nbase_height = 20;\nwall_thickness = 2;\n\n// Squash ball texture pattern\nbumps_per_row = 8;\nbumps_per_col = 6;\nbump_radius = 2.5;\nbump_height = 1.5;\n\n// Lamp post dimensions\npost_diameter = 12;\npost_height = 100;\n\n// Cable management slot\nslot_width = 8;\nslot_depth = 5;\n\n// Base mounting holes\nmount_hole_diameter = 4;\nmount_hole_depth = 8;\n\nmodule squash_ball_texture() {\n    difference() {\n        sphere(d = ball_diameter);\n        \n        // Create dimples using difference with spheres\n        for (i = [0 : bumps_per_row - 1]) {\n            for (j = [0 : bumps_per_col - 1]) {\n                rotate([0, j * 180 / bumps_per_col, i * 360 / bumps_per_row])\n                translate([0, 0, ball_diameter / 2 - bump_height])\n                sphere(d = bump_radius * 2);\n            }\n        }\n    }\n}\n\nmodule hollow_ball() {\n    difference() {\n        squash_ball_texture();\n        \n        // Hollow out the ball\n        sphere(d = ball_diameter - wall_thickness * 2);\n    }\n}\n\nmodule base_with_mounting() {\n    difference() {\n        // Solid base\n        cylinder(h = base_height, d1 = ball_diameter + 10, d2 = ball_diameter + 20, $fn = 64);\n        \n        // Recess for ball\n        translate([0, 0, base_height - wall_thickness])\n        sphere(d = ball_diameter + 2);\n        \n        // Cable management slot\n        translate([0, -((ball_diameter + 20) / 2 - slot_width / 2), base_height / 2])\n        rotate([90, 0, 0])\n        cube([slot_width, base_height, slot_depth], center = true);\n        \n        // Mounting holes\n        for (angle = [0 : 120 : 240]) {\n            rotate([0, 0, angle])\n            translate([(ball_diameter + 10) / 2 - 15, 0, -1])\n            cylinder(h = mount_hole_depth + 2, d = mount_hole_diameter, $fn = 16);\n        }\n    }\n}\n\nmodule lamp_post() {\n    union() {\n        // Main post\n        cylinder(h = post_height, d = post_diameter, $fn = 32);\n        \n        // Reinforcement ring\n        translate([0, 0, post_height / 3])\n        cylinder(h = wall_thickness * 2, d1 = post_diameter + 8, d2 = post_diameter, $fn = 32);\n        \n        // Top thread adapter\n        translate([0, 0, post_height])\n        cylinder(h = 15, d = 10, $fn = 32);\n    }\n}\n\nmodule squashball_lamp_base() {\n    union() {\n        // Assemble base\n        base_with_mounting();\n        \n        // Position hollow ball\n        translate([0, 0, base_height + ball_diameter / 2 - wall_thickness])\n        hollow_ball();\n        \n        // Add lamp post\n        translate([0, 0, base_height + ball_diameter])\n        lamp_post();\n    }\n}\n\n// Render the complete model\nsquashball_lamp_base();",
    "renders": true
  },
  {
    "office_supply": "racquetball",
    "openscad_code": "// Racquetball Office Supply Organizer (Medium Complexity)\n// A realistic 3D printable desk organizer shaped like a racquetball\n\n// Overall dimensions: 120mm diameter, 80mm height\n\n$fn = 50;  // Smooth curves for printing\n\n// Main racquetball body\nmodule racquetball_body() {\n    difference() {\n        // Main sphere\n        sphere(d = 120);\n        \n        // Flat bottom for stability\n        translate([0, 0, -60])\n            cube([120, 120, 60], center = true);\n        \n        // Hollow interior\n        sphere(d = 116);\n    }\n}\n\n// Racquetball seam pattern\nmodule ball_seams() {\n    // Vertical seam\n    rotate([0, 90, 0])\n        cylinder(h = 122, d = 2, center = true);\n    \n    // Horizontal seam\n    rotate([90, 0, 0])\n        cylinder(h = 122, d = 2, center = true);\n    \n    // Additional curved seams\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, -30, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 60, d = 2);\n    }\n}\n\n// Pen holder cavity\nmodule pen_holder() {\n    difference() {\n        // Main cavity\n        translate([0, 0, 20])\n            cylinder(h = 40, d = 25);\n        \n        // Rounded bottom\n        translate([0, 0, 20])\n            sphere(d = 25);\n    }\n}\n\n// Paper clip tray\nmodule paper_clip_tray() {\n    difference() {\n        // Main tray\n        translate([-40, 0, 10])\n            cube([30, 50, 20], center = true);\n        \n        // Rounded edges\n        translate([-40, 0, 20])\n            sphere(d = 30);\n        \n        // Interior space\n        translate([-40, 0, 15])\n            cube([26, 46, 15], center = true);\n    }\n}\n\n// Post-it note holder\nmodule sticky_note_holder() {\n    // Base platform\n    translate([40, 0, 10])\n        cube([50, 40, 2], center = true);\n    \n    // Back support\n    translate([40, 0, 25])\n        cube([50, 40, 30], center = true);\n    \n    // Front lip\n    translate([40, 0, 9])\n        cube([48, 38, 2], center = true);\n}\n\n// USB drive slots\nmodule usb_slots() {\n    for (pos = [[-20, 35], [20, 35], [-20, -35], [20, -35]]) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h = 15, d = 8);\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    for (pos = [[-50, -50], [50, -50], [-50, 50], [50, 50]]) {\n        translate([pos[0], pos[1], -60])\n            cylinder(h = 3, d = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    racquetball_body();\n    \n    // Surface details\n    translate([0, 0, 0])\n        ball_seams();\n    \n    // Functional elements\n    pen_holder();\n    paper_clip_tray();\n    sticky_note_holder();\n    \n    // USB storage slots\n    difference() {\n        translate([0, 0, -10])\n            usb_slots();\n    }\n    \n    // Base feet\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "paddleball",
    "openscad_code": "// Paddleball Office Organizer\n// Combines a desk-top paddleball toy with storage compartments\n\n$fn = 50;\n\n// Overall dimensions\npaddle_length = 120;\npaddle_width = 45;\npaddle_thickness = 4;\nball_radius = 12;\nelastic_length = 80;\nelastic_radius = 1.5;\n\n// Furniture features\npen_holder_diameter = 12;\npen_holder_height = 40;\nstorage_depth = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule paddle_handle() {\n    // Main paddle handle with ergonomic grip\n    difference() {\n        // Handle body\n        translate([-paddle_length/2 + 15, 0, 0])\n            cube([paddle_length - 30, paddle_width, paddle_thickness], center=true);\n        \n        // Grip indentations\n        for(i = [-2:2]) {\n            translate([-paddle_length/2 + 25 + i*15, 0, paddle_thickness/2 - 0.5])\n                rotate([90, 0, 0])\n                    cylinder(h=15, r1=3, r2=3);\n        }\n    }\n}\n\nmodule paddle_head() {\n    // Paddle head with rounded edges\n    difference() {\n        // Main head\n        translate([paddle_length/2 - 25, 0, 0])\n            cube([50, paddle_width + 10, paddle_thickness + 2], center=true);\n        \n        // Rounded edges\n        translate([paddle_length/2 - 25, paddle_width/2 + 5, 0])\n            rotate([0, 0, 90])\n                cube([paddle_thickness + 2, 10, paddle_thickness + 2], center=true);\n        translate([paddle_length/2 - 25, -paddle_width/2 - 5, 0])\n            rotate([0, 0, 90])\n                cube([paddle_thickness + 2, 10, paddle_thickness + 2], center=true);\n    }\n}\n\nmodule ball() {\n    // Main ball with string attachment point\n    sphere(ball_radius);\n    \n    // Attachment hole\n    translate([0, 0, ball_radius])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=elastic_radius + 0.5);\n}\n\nmodule elastic_string() {\n    // Elastic string connecting ball to paddle\n    translate([paddle_length/2 - 25, 0, paddle_thickness/2 + 1])\n        rotate([90, 0, 0])\n            cylinder(h=elastic_length, r=elastic_radius);\n}\n\nmodule pen_holders() {\n    // Two pen holders on the handle sides\n    for(side = [-1, 1]) {\n        translate([-paddle_length/3, side * (paddle_width/2 + pen_holder_diameter/2 + 5), 0])\n            difference() {\n                // Holder cylinder\n                cylinder(h=pen_holder_height, r=pen_holder_diameter/2);\n                \n                // Hollow center\n                translate([0, 0, -1])\n                    cylinder(h=pen_holder_height + 2, r=pen_holder_diameter/2 - wall_thickness);\n            }\n    }\n}\n\nmodule storage_tray() {\n    // Small storage tray behind paddle head\n    difference() {\n        // Main tray\n        translate([paddle_length/2 + 10, 0, paddle_thickness/2 + storage_depth/2])\n            cube([40, paddle_width + 20, storage_depth], center=true);\n        \n        // Hollowed center\n        translate([paddle_length/2 + 10, 0, paddle_thickness/2 + storage_depth/2])\n            cube([40 - 2*wall_thickness, paddle_width + 20 - 2*wall_thickness, storage_depth + 1], center=true);\n    }\n}\n\nmodule support_base() {\n    // Base support for stability\n    translate([0, 0, -paddle_thickness/2 - 2])\n        cube([paddle_length + 20, paddle_width + 30, 4], center=true);\n}\n\n// Main assembly\nunion() {\n    // Base support\n    support_base();\n    \n    // Paddle assembly\n    union() {\n        paddle_handle();\n        paddle_head();\n    }\n    \n    // Furniture features\n    pen_holders();\n    storage_tray();\n    \n    // Ball on elastic (positioned for display)\n    translate([paddle_length/2 - 25, 0, paddle_thickness/2 + elastic_length + ball_radius + 1])\n        ball();\n    \n    // Elastic string\n    elastic_string();\n}",
    "renders": true
  },
  {
    "office_supply": "wiffleball",
    "openscad_code": "// Wiffleball Chair - Medium Complexity Office Furniture\n// Realistic style with 2mm wall thickness for 3D printing\n\n// Main parameters\nball_diameter = 80;\nwall_thickness = 2;\nhole_diameter = 12;\n\n// Chair dimensions\nseat_height = 45;\nback_height = 35;\nleg_length = 40;\n\n// Create the main wiffleball chair body\nmodule wiffleball_chair() {\n    // Outer shell of wiffleball\n    difference() {\n        sphere(d=ball_diameter);\n        \n        // Remove center to create hollow shell\n        sphere(d=ball_diameter - wall_thickness*2);\n        \n        // Add characteristic wiffleball holes on top half\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([30, 0, ball_diameter/2 - wall_thickness])\n                    rotate([90, 0, 0])\n                        cylinder(h=wall_thickness+1, d=hole_diameter, $fn=20);\n        }\n        \n        // Additional holes on curved surface\n        for(i=[0:3]) {\n            rotate([i*30+15, 0, 0])\n                for(j=[0:7]) {\n                    rotate([0, 0, j*45])\n                        translate([30, 0, 0])\n                            rotate([0, 90, 0])\n                                cylinder(h=wall_thickness+1, d=hole_diameter, $fn=20);\n                }\n        }\n    }\n    \n    // Create seat by cutting bottom flat\n    translate([0, 0, -ball_diameter/2 - 1])\n        cube([ball_diameter+2, ball_diameter+2, 2], center=true);\n    \n    // Add structural support ring for chair base\n    translate([0, 0, -ball_diameter/2 + wall_thickness])\n        cylinder(h=wall_thickness*2, d=ball_diameter - wall_thickness, $fn=50);\n}\n\n// Chair legs module\nmodule chair_legs() {\n    leg_positions = [[-25, -25], [25, -25], [-25, 25], [25, 25]];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -ball_diameter/2 - leg_length/2 - 1])\n            cylinder(h=leg_length, d=8, $fn=20);\n        \n        // Leg joints\n        translate([pos[0], pos[1], -ball_diameter/2 - 1])\n            cylinder(h=wall_thickness*3, d=12, $fn=20);\n    }\n    \n    // Cross support between legs\n    translate([0, -25, -ball_diameter/2 - leg_length/2 - 1])\n        cube([50, 8, 4], center=true);\n    translate([-25, 0, -ball_diameter/2 - leg_length/2 - 1])\n        cube([8, 50, 4], center=true);\n}\n\n// Backrest support structure\nmodule backrest() {\n    // Backrest posts\n    translate([-20, -20, ball_diameter/2 - back_height/2 - 5])\n        cylinder(h=back_height, d=8, $fn=20);\n    translate([20, -20, ball_diameter/2 - back_height/2 - 5])\n        cylinder(h=back_height, d=8, $fn=20);\n    \n    // Backrest frame\n    translate([0, -25, ball_diameter/2 - 5])\n        cube([50, wall_thickness*4, back_height], center=true);\n    \n    // Horizontal backrest supports\n    for(i=[1:3]) {\n        translate([0, -25, ball_diameter/2 - 5 - i*8])\n            cube([46, wall_thickness*3, wall_thickness*2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    wiffleball_chair();\n    chair_legs();\n    backrest();\n}",
    "renders": true
  },
  {
    "office_supply": "kickball",
    "openscad_code": "// Kickball-inspired office footrest with realistic proportions\n// Overall dimensions: 300mm x 150mm x 200mm (width x depth x height)\n\n$fn = 32;\n\n// Main kickball body as the footrest\nmodule kickball_body() {\n    // Main ball shape - slightly flattened sphere\n    scale([1.0, 0.8, 0.7])\n    sphere(d = 180);\n}\n\n// Realistic ball seams\nmodule ball_seams() {\n    // Main seam - circumferential\n    rotate([0, 90, 0])\n    cylinder(h = 182, d = 5, center = true);\n    \n    // Additional seams at 45 degrees\n    rotate([0, 45, 0])\n    cylinder(h = 182, d = 5, center = true);\n    \n    rotate([0, 135, 0])\n    cylinder(h = 182, d = 5, center = true);\n}\n\n// Footrest base frame\nmodule metal_frame() {\n    // Front crossbar\n    translate([0, -75, 20])\n    cylinder(h = 300, d = 25);\n    \n    // Rear crossbar\n    translate([0, 75, 20])\n    cylinder(h = 300, d = 25);\n    \n    // Left side bar\n    translate([-150, 0, 20])\n    rotate([90, 0, 0])\n    cylinder(h = 150, d = 25);\n    \n    // Right side bar\n    translate([150, 0, 20])\n    rotate([90, 0, 0])\n    cylinder(h = 150, d = 25);\n    \n    // Leg posts\n    for(x = [-120, 120])\n    for(y = [-60, 60]) {\n        translate([x, y, 10])\n        cylinder(h = 20, d = 30);\n    }\n}\n\n// Support ribs underneath\nmodule support_ribs() {\n    // Front rib\n    translate([0, -50, 10])\n    rotate([90, 0, 0])\n    cylinder(h = 100, d = 15);\n    \n    // Rear rib\n    translate([0, 50, 10])\n    rotate([90, 0, 0])\n    cylinder(h = 100, d = 15);\n    \n    // Central support plate\n    translate([0, 0, 5])\n    cube([200, 100, 10], center = true);\n}\n\n// Anti-slip pads\nmodule anti_slip_pads() {\n    for(x = [-120, 120])\n    for(y = [-60, 60]) {\n        translate([x, y, 0])\n        cylinder(h = 5, d = 40);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base frame structure\n    metal_frame();\n    \n    // Support structure\n    support_ribs();\n    \n    // Anti-slip pads\n    color(\"black\")\n    anti_slip_pads();\n    \n    // Main footrest ball\n    translate([0, 0, 120])\n    difference() {\n        color(\"white\")\n        kickball_body();\n        \n        // Hollow out for weight reduction\n        scale([0.9, 0.7, 0.6])\n        sphere(d = 180);\n        \n        // Add seams\n        color(\"red\")\n        ball_seams();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "dodgeball",
    "openscad_code": "// Dodgeball-Inspired Rolling Stool\n// A small, spherical rolling stool with integrated storage for dodgeballs\n\n// Parameters\nball_diameter = 65;  // Standard dodgeball size\nwall_thickness = 2;\nseat_height = 450;\nleg_length = 350;\nwheel_diameter = 50;\nstorage_capacity = 3;\n\n// Main module\nmodule dodgeball_stool() {\n    // Central support column\n    color(\"silver\") \n    cylinder(h=leg_length, d=30, center=false);\n    \n    // Base with wheels\n    translate([0, 0, leg_length])\n    base_assembly();\n    \n    // Seat assembly\n    translate([0, 0, leg_length + 50])\n    seat_assembly();\n    \n    // Storage compartment for dodgeballs\n    translate([0, 0, leg_length/2])\n    storage_compartment();\n}\n\n// Base with 5 wheels for stability\nmodule base_assembly() {\n    difference() {\n        // Central hub\n        cylinder(h=50, d=80, center=false);\n        \n        // Countersink for bolt\n        translate([0, 0, -1])\n        cylinder(h=20, d=15, center=false);\n    }\n    \n    // Wheel arms\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([40, 0, 25])\n        rotate([90, 0, 0])\n        wheel();\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    // Wheel mount\n    color(\"darkgray\")\n    translate([0, 0, 0])\n    cylinder(h=20, d=10, center=true);\n    \n    // Wheel\n    color(\"black\")\n    translate([0, 15, 0])\n    cylinder(h=10, d=wheel_diameter, center=true);\n}\n\n// Seat assembly with dodgeball cushion\nmodule seat_assembly() {\n    // Seat base\n    color(\"darkgray\")\n    difference() {\n        cylinder(h=20, d=150, center=false);\n        \n        // Bolt hole\n        translate([0, 0, -1])\n        cylinder(h=22, d=8, center=false);\n    }\n    \n    // Dodgeball seat cushion\n    translate([0, 0, 20])\n    difference() {\n        // Main ball\n        color(\"red\")\n        sphere(d=ball_diameter);\n        \n        // Flatten bottom for stability\n        translate([0, 0, -ball_diameter/2 - 1])\n        cube([ball_diameter*1.2, ball_diameter*1.2, ball_diameter], center=true);\n        \n        // Grip texture\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([0, -ball_diameter/2 + 5, 0])\n            rotate([90, 0, 0])\n            color(\"darkred\")\n            cylinder(h=ball_diameter, d=3, center=true);\n        }\n    }\n}\n\n// Storage compartment for extra dodgeballs\nmodule storage_compartment() {\n    // Outer cylinder\n    difference() {\n        cylinder(h=200, d=220, center=true);\n        \n        // Hollow center\n        cylinder(h=202, d=216, center=true);\n        \n        // Access hole\n        rotate([0, 90, 0])\n        translate([0, 0, 110])\n        cylinder(h=100, d=80, center=true);\n    }\n    \n    // Ball dividers\n    for(i = [0:storage_capacity-1]) {\n        rotate([0, 0, i * (360/storage_capacity)])\n        translate([0, 0, 0])\n        cube([wall_thickness, 216/2 - 5, 200], center=true);\n    }\n}\n\n// Generate the model\ndodgeball_stool();",
    "renders": true
  },
  {
    "office_supply": "softball",
    "openscad_code": "// Softball Desk Lamp Base\n// Realistic style, medium complexity\n\n$fn=64;\n\n// Overall dimensions\nball_diameter = 100;\nwall_thickness = 2;\n\nmodule softball() {\n    // Main ball body\n    difference() {\n        sphere(d=ball_diameter);\n        \n        // Hollow interior for 3D printing material saving\n        translate([0,0,0])\n            sphere(d=ball_diameter-wall_thickness*2);\n    }\n    \n    // Seams\n    for(i=[0:5]) {\n        rotate([0,90,i*60]) \n            translate([0,0,-ball_diameter/2])\n                cube([ball_diameter*0.08, wall_thickness, ball_diameter], center=true);\n    }\n    \n    // Stitching holes pattern\n    for(i=[0:11]) {\n        rotate([0,0,i*30]) {\n            translate([ball_diameter/2-1, 0, 0])\n                rotate([0,90,0])\n                    cylinder(h=wall_thickness*2, r=1, center=true);\n        }\n    }\n}\n\nmodule lamp_base() {\n    // Base platform\n    translate([0,0,-ball_diameter/2-5])\n        cylinder(h=10, r=ball_diameter/0.7, center=true);\n    \n    // Support ring\n    translate([0,0,-ball_diameter/2-10])\n        cylinder(h=5, r1=ball_diameter/0.7, r2=ball_diameter/0.9, center=true);\n    \n    // Cable channel\n    translate([ball_diameter/2-5, 0, -ball_diameter/2-10])\n        rotate([90,0,0])\n            cylinder(h=20, r=3, center=true);\n}\n\nmodule lamp_mount() {\n    // Mounting tube for bulb socket\n    translate([0,0,ball_diameter/2])\n        cylinder(h=20, r=10, wall_thickness, center=false);\n    \n    // Threaded insert guides\n    for(i=[0:2]) {\n        rotate([0,0,i*120]) {\n            translate([7,0,ball_diameter/2+10])\n                cylinder(h=5, r=2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    softball();\n    lamp_base();\n    lamp_mount();\n}",
    "renders": true
  },
  {
    "office_supply": "fastpitch",
    "openscad_code": "// Fastpitch Office Chair – OpenSCAD\n// Realistic, medium complexity, 3D-printable (no overhangs)\n// Overall height ≈ 110 mm (backrest), seat 60 mm above base\n\n$fn=30;\n\n// Parameters\nseat_w = 48;\nseat_d = 50;\nseat_t = 4;\nback_h = 50;\nback_w = seat_w;\nback_t = 3;\n\narmrest_h = 25;\narmrest_w = 8;\narmrest_d = seat_d;\n\npost_r = 5;\npost_h = 35;\n\nbase_r = 45;\nbase_t = 6;\ncaster_r = 6;\n\n// Central assembly\nmodule chair() {\n    // Seat pan\n    translate([0, 0, seat_t/2])\n        cube([seat_w, seat_d, seat_t], center=true);\n\n    // Backrest\n    translate([0, -seat_d/2 + back_t/2, seat_t + back_h/2])\n        cube([back_w, back_t, back_h], center=true);\n\n    // Armrests – printed upright, no overhang\n    translate([seat_w/2 + armrest_w/2, 0, seat_t + armrest_h/2])\n        cube([armrest_w, armrest_d, armrest_h], center=true);\n    mirror([1,0,0])\n        translate([seat_w/2 + armrest_w/2, 0, seat_t + armrest_h/2])\n            cube([armrest_w, armrest_d, armrest_h], center=true);\n\n    // Height-adjustment post\n    translate([0, 0, seat_t + post_h/2])\n        cylinder(r=post_r, h=post_h);\n\n    // 5-star base\n    translate([0, 0, 0])\n        cylinder(r=base_r, h=base_t);\n\n    // Casters (simple spheres for printability)\n    for(a=[0:72:360-1]) {\n        rotate([0,0,a])\n            translate([base_r - caster_r, 0, base_t - caster_r/2])\n                sphere(r=caster_r);\n    }\n}\n\nchair();",
    "renders": true
  },
  {
    "office_supply": "slowpitch",
    "openscad_code": "// Slowpitch Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~100mm height, 80mm width, 75mm depth\n\n// Chair parameters\nseat_width = 60;\nseat_depth = 50;\nseat_thickness = 3;\nback_height = 45;\narmrest_height = 15;\nbase_diameter = 50;\npole_height = 40;\nwheel_radius = 8;\n\n// Main seat\nmodule seat() {\n    // Seat cushion with slight curvature\n    union() {\n        difference() {\n            // Main seat block\n            translate([0, 0, seat_thickness/2])\n                cube([seat_width, seat_depth, seat_thickness], center=true);\n            \n            // Ergonomic contour - front edge rounded\n            translate([0, seat_depth/2 - 5, seat_thickness/2])\n                cylinder(h=seat_thickness+1, r1=seat_width/2, r2=seat_width/2, center=true);\n        }\n        \n        // Seat edge piping detail\n        color(\"darkgray\")\n        translate([0, 0, seat_thickness-0.5])\n            cube([seat_width+2, seat_depth+2, 1], center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main back panel\n    difference() {\n        translate([0, -seat_depth/2 + 5, seat_thickness + back_height/2])\n            cube([seat_width, 8, back_height], center=true);\n        \n        // Lumbar curve\n        translate([0, -seat_depth/2 + 1, seat_thickness + back_height/2])\n            sphere(r=back_height/2, center=true);\n    }\n    \n    // Headrest support\n    translate([0, -seat_depth/2 + 5, seat_thickness + back_height + 5])\n        cylinder(h=10, r=5, center=true);\n    \n    // Headrest\n    translate([0, -seat_depth/2 + 5, seat_thickness + back_height + 15])\n        cube([30, 10, 8], center=true);\n}\n\n// Armrests\nmodule armrest(side) {\n    // Armrest post\n    translate([side * (seat_width/2 - 5), 0, seat_thickness + armrest_height/2])\n        cylinder(h=armrest_height, r=2, center=true);\n    \n    // Armrest pad\n    translate([side * (seat_width/2 - 5), seat_depth/4, seat_thickness + armrest_height + 2])\n        cube([20, 8, 3], center=true);\n}\n\n// Gas lift pole and base\nmodule base_assembly() {\n    // Central pole\n    cylinder(h=pole_height, r=4, center=false);\n    \n    // Base star\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([base_diameter/4, 0, 0])\n                cube([base_diameter/2, 8, 2], center=true);\n    }\n    \n    // Wheels\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([base_diameter/2, 0, -wheel_radius])\n                sphere(r=wheel_radius);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests (left and right)\n    armrest(1);\n    armrest(-1);\n    \n    // Base\n    translate([0, 0, 0])\n        base_assembly();\n}",
    "renders": true
  },
  {
    "office_supply": "teeball",
    "openscad_code": "// Teeball furniture item - realistic office desk accessory\n// Medium complexity with functional design elements\n\n// Overall dimensions (mm)\nteeball_height = 80;\nteeball_base_dia = 50;\nteeball_ball_dia = 35;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base module\nmodule base() {\n    // Main base cylinder\n    cylinder(h=8, d=teeball_base_dia, $fn=64);\n    \n    // Base rim detail\n    translate([0, 0, 8])\n    cylinder(h=3, d=teeball_base_dia + 2, $fn=64);\n    \n    // Central support tube\n    translate([0, 0, 11])\n    cylinder(h=teeball_height - 11 - 15, d=8, $fn=32);\n}\n\n// Ball holder tee\nmodule tee_holder() {\n    // Main tee post\n    translate([0, 0, teeball_height - 15])\n    cylinder(h=15, d1=6, d2=4, $fn=32);\n    \n    // Ball cup\n    translate([0, 0, teeball_height])\n    difference() {\n        sphere(d=teeball_ball_dia + 4, $fn=64);\n        translate([0, 0, -teeball_ball_dia/2])\n        cube([teeball_ball_dia + 10, teeball_ball_dia + 10, teeball_ball_dia], center=true);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([teeball_base_dia/4, -wall_thickness/2, 11])\n        cube([teeball_base_dia/2, wall_thickness, teeball_height - 26]);\n    }\n}\n\n// Base stability feet\nmodule feet() {\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([teeball_base_dia/2 - 5, -5, 0])\n        cube([10, 10, 3]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    difference() {\n        union() {\n            base();\n            tee_holder();\n            ribs();\n        }\n        \n        // Hollow out base for material saving\n        translate([0, 0, 3])\n        cylinder(h=5, d=teeball_base_dia - 2*wall_thickness, $fn=64);\n        translate([0, 0, 8])\n        cylinder(h=teeball_height - 8, d=4, $fn=32);\n    }\n    \n    // Add feet\n    feet();\n    \n    // Add ergonomic grip ring\n    translate([0, 0, teeball_height/2])\n    difference() {\n        cylinder(h=5, d=12, $fn=32);\n        cylinder(h=5.5, d=8, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "medicineball",
    "openscad_code": "// Medicine Ball Office Stool\n// A compact, 3D-printable medicine ball stool for office use\n// Combines a medicine ball cushion with a sturdy base\n// Overall height ~100mm, suitable for micro-desk or footrest\n\n// Parameters\nball_d = 60;            // Medicine ball diameter\nball_wall = 2;          // Wall thickness for hollow ball\nbase_d = 70;            // Base diameter\nbase_h = 15;            // Base height\nleg_w = 8;              // Leg width\nleg_h = 25;             // Leg height\ngrip_d = 8;             // Grip hole diameter\ngrip_depth = 3;         // Grip indentation depth\n\n// Colors\ncolor_ball = \"dimgray\";\ncolor_base = \"darkslategray\";\n\nmodule medicine_ball() {\n    // Hollow medicine ball with grip texture\n    difference() {\n        // Outer sphere\n        sphere(d=ball_d, $fn=64);\n        \n        // Hollow interior\n        sphere(d=ball_d - 2*ball_wall, $fn=64);\n        \n        // Grip indentations - 8 around equator\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n            translate([0, ball_d/2 - grip_depth, 0])\n            rotate([90, 0, 0])\n            cylinder(d=grip_d, h=grip_depth*2, $fn=32);\n        }\n    }\n}\n\nmodule base_structure() {\n    // Central column\n    cylinder(d=base_d - 20, h=base_h + leg_h, $fn=32);\n    \n    // Triangular legs for stability\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, (base_d - leg_w)/2, 0])\n        cube([leg_w, leg_w, leg_h + base_h], center=true);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, leg_h])\n    cylinder(d=base_d, h=base_h, $fn=32);\n}\n\nmodule assembly() {\n    // Base structure\n    color(color_base)\n    base_structure();\n    \n    // Medicine ball cushion on top\n    color(color_ball)\n    translate([0, 0, leg_h + base_h + ball_wall])\n    medicine_ball();\n    \n    // Anti-slip ring\n    color(\"black\")\n    translate([0, 0, leg_h + base_h])\n    cylinder(d=ball_d - 5, h=2, $fn=64);\n}\n\n// Render the complete stool\nassembly();",
    "renders": true
  },
  {
    "office_supply": "exerciseball",
    "openscad_code": "// Exercise ball office chair base\n// Medium complexity, realistic style\n\n$fn = 50;  // Smooth curves\n\n// Parameters\nball_diameter = 40;\nbase_height = 15;\nleg_length = 20;\ncaster_diameter = 6;\ncaster_offset = 8;\n\n// Main ball\nmodule exercise_ball() {\n    union() {\n        // Main sphere\n        color(\"red\")\n        sphere(d = ball_diameter);\n        \n        // Valve detail\n        translate([0, 0, ball_diameter/2 - 1])\n        rotate([90, 0, 0])\n        cylinder(h = 3, d1 = 4, d2 = 2);\n    }\n}\n\n// Star-shaped base legs\nmodule base_leg(offset, length, thickness = 3) {\n    translate([0, 0, thickness/2])\n    linear_extrude(thickness)\n    polygon([\n        [0, 0],\n        [-2, offset],\n        [-1, offset + length],\n        [1, offset + length],\n        [2, offset],\n        [0, 0]\n    ]);\n}\n\n// Caster wheel assembly\nmodule caster_wheel() {\n    union() {\n        // Caster mount\n        cylinder(h = 3, d = 5);\n        \n        // Caster fork\n        translate([0, 0, 3])\n        difference() {\n            cube([5, 2, 4], center = true);\n            cube([4.5, 1.5, 4], center = true);\n        }\n        \n        // Wheel\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 2.5, d = caster_diameter, center = true);\n        \n        // Axle\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 3, d = 1, center = true);\n    }\n}\n\n// Complete base assembly\nmodule chair_base() {\n    difference() {\n        union() {\n            // Center hub\n            cylinder(h = base_height, d = 8);\n            \n            // Five legs\n            for (i = [0:4]) {\n                rotate([0, 0, i * 72]) {\n                    base_leg(4, leg_length, 4);\n                }\n            }\n            \n            // Caster mounts\n            for (i = [0:4]) {\n                rotate([0, 0, i * 72])\n                translate([0, caster_offset, 0])\n                caster_wheel();\n            }\n            \n            // Column support\n            translate([0, 0, base_height])\n            cylinder(h = 8, d = 6);\n            \n            // Ball support ring\n            translate([0, 0, base_height + 8])\n            difference() {\n                cylinder(h = 4, d = ball_diameter + 4);\n                cylinder(h = 5, d = ball_diameter - 2);\n            }\n        }\n        \n        // Remove center hole for column\n        translate([0, 0, -1])\n        cylinder(h = base_height + 10, d = 3.5);\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_height + 8 + 4 + ball_diameter/2])\nexercise_ball();\n\ntranslate([0, 0, 0])\nchair_base();",
    "renders": true
  },
  {
    "office_supply": "stabilityball",
    "openscad_code": "// Stability Ball Office Chair\n// Realistic style, medium complexity\n\n$fn = 50;\nwall_thickness = 2;\nball_diameter = 80;\nbase_width = 100;\nbase_depth = 100;\nbase_height = 15;\nbackrest_height = 60;\nbackrest_width = 60;\ncaster_diameter = 10;\ncaster_height = 8;\n\nmodule stability_ball(d=80) {\n    // Main ball with slight flattening at bottom\n    difference() {\n        sphere(d=d);\n        translate([0, 0, -d/2 + 2])\n            cube([d, d, 4], center=true);\n    }\n}\n\nmodule caster_wheel() {\n    // Single caster wheel assembly\n    union() {\n        // Wheel\n        rotate([90, 0, 0])\n            cylinder(d=caster_diameter, h=caster_height, center=true);\n        \n        // Axle\n        rotate([90, 0, 0])\n            cylinder(d=3, h=caster_diameter + 2, center=true);\n        \n        // Caster mount\n        translate([0, 0, caster_height/2 + 2])\n            cylinder(d=8, h=4);\n    }\n}\n\nmodule five_star_base() {\n    // Central hub\n    cylinder(h=15, d1=20, d2=15);\n    \n    // Five arms with casters\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            // Arm\n            translate([15, 0, 7.5])\n                rotate([90, 0, 0])\n                    cylinder(h=35, d1=8, d2=6);\n            \n            // Caster at end of arm\n            translate([45, 0, 0])\n                caster_wheel();\n        }\n    }\n}\n\nmodule backrest_support() {\n    // Main post\n    cylinder(h=backrest_height, d=8);\n    \n    // Adjustment mechanism\n    translate([0, 0, backrest_height - 15])\n        cube([12, 6, 15], center=true);\n    \n    // Backrest frame\n    translate([0, 0, backrest_height])\n        rotate([15, 0, 0])\n            cube([backrest_width, 6, 25], center=true);\n}\n\nmodule backrest_pad() {\n    // Curved backrest pad\n    difference() {\n        // Main pad\n        translate([0, -3, 0])\n            scale([1, 0.8, 1])\n                sphere(d=backrest_width);\n        \n        // Cut front flat\n        translate([0, 0, 0])\n            cube([backrest_width + 10, 20, backrest_width], center=true);\n        \n        // Cut bottom flat\n        translate([0, 0, -backrest_width/2])\n            cube([backrest_width + 10, 20, backrest_width], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Five-star base with casters\n    translate([0, 0, 0])\n        five_star_base();\n    \n    // Central column\n    translate([0, 0, 15])\n        cylinder(h=50, d=10);\n    \n    // Ball support ring\n    translate([0, 0, 65])\n        difference() {\n            cylinder(h=wall_thickness, d=ball_diameter + 4);\n            cylinder(h=wall_thickness + 1, d=ball_diameter);\n        }\n    \n    // Stability ball\n    translate([0, 0, 70])\n        stability_ball(ball_diameter);\n    \n    // Backrest assembly\n    translate([0, -ball_diameter/2 - 20, 65])\n        backrest_support();\n    \n    translate([0, -ball_diameter/2 - 26, 125])\n        backrest_pad();\n}",
    "renders": true
  },
  {
    "office_supply": "foamroller",
    "openscad_code": "// Foamroller Office Furniture\n// Realistic style, medium complexity\n\nmodule foamroller_roller() {\n    // Main roller body with hollow core for light weight\n    difference() {\n        cylinder(h=80, d=40, $fn=60);\n        translate([0, 0, 2])\n            cylinder(h=76, d=36, $fn=60);\n    }\n}\n\nmodule textured_surface() {\n    // Realistic foam texture pattern\n    for(i=[0:15]) {\n        rotate([0, 0, i*24])\n        translate([0, 19.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=2, d=1.5, $fn=8);\n    }\n    \n    for(i=[0:15]) {\n        rotate([0, 0, i*24+12])\n        translate([0, 19.5, 40])\n        rotate([90, 0, 0])\n        cylinder(h=2, d=1.5, $fn=8);\n    }\n}\n\nmodule end_caps() {\n    // Left end cap with handle\n    difference() {\n        union() {\n            translate([-1, 0, 0])\n            cylinder(h=4, d=44, $fn=60);\n            \n            // Ergonomic handle\n            rotate([0, 90, 0])\n            translate([-2, 0, -2])\n            cylinder(h=40, d=8, $fn=20);\n        }\n        \n        // Handle hollow\n        rotate([0, 90, 0])\n        translate([0, 0, -2])\n        cylinder(h=44, d=4, $fn=20);\n        \n        // Center hole\n        translate([-3, 0, 0])\n        cylinder(h=8, d=36, $fn=60);\n    }\n    \n    // Right end cap\n    translate([0, 0, 80])\n    mirror([0, 0, 1])\n    difference() {\n        translate([-1, 0, 0])\n        cylinder(h=4, d=44, $fn=60);\n        \n        translate([-3, 0, 0])\n        cylinder(h=8, d=36, $fn=60);\n    }\n}\n\nmodule support_base() {\n    // Office furniture base platform\n    difference() {\n        // Main base\n        translate([0, -30, -5])\n        cube([50, 60, 5], center=true);\n        \n        // Center relief for roller\n        translate([0, 0, -5])\n        cylinder(h=6, d=42, $fn=60);\n    }\n    \n    // Support ribs for structure\n    for(i=[-1:1]) {\n        translate([i*15, -30, -2.5])\n        cube([8, 60, 5], center=true);\n    }\n}\n\nmodule anti_slip_pads() {\n    // Rubber pads for stability\n    for(pos=[[-20, -25, -7.5], [20, -25, -7.5], [-20, 25, -7.5], [20, 25, -7.5]]) {\n        translate(pos)\n        cylinder(h=1, d=6, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Main foam roller with texture\n    union() {\n        foamroller_roller();\n        textured_surface();\n    }\n    \n    // End caps with handles\n    end_caps();\n    \n    // Office furniture base\n    support_base();\n    anti_slip_pads();\n}",
    "renders": true
  },
  {
    "office_supply": "jumpball",
    "openscad_code": "// Jumpball furniture - office seating with integrated storage\n// Dimensions: 300mm diameter, 400mm height\n\n$fn = 32;\n\n// Main parameters\nball_diameter = 300;\nseat_height = 400;\nwall_thickness = 2;\n\nmodule jumpball_base() {\n    // Main ball structure - hollow sphere\n    difference() {\n        sphere(d = ball_diameter);\n        sphere(d = ball_diameter - wall_thickness * 2);\n    }\n}\n\nmodule seat_platform() {\n    // Ergonomic seat top with slight curvature\n    translate([0, 0, ball_diameter/2]) {\n        difference() {\n            // Main seat disk\n            cylinder(h = 20, d = 250, center = true);\n            \n            // Center hole for ventilation\n            cylinder(h = 25, d = 30, center = true);\n        }\n        \n        // Reinforcement ribs\n        for (i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 70, 0]) {\n                    cube([20, 10, 4], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule support_base() {\n    // Weighted base for stability\n    translate([0, 0, -ball_diameter/2 - 10]) {\n        cylinder(h = 20, d1 = 200, d2 = 150, center = false);\n    }\n    \n    // Anti-slip ring\n    translate([0, 0, -ball_diameter/2 - 15]) {\n        difference() {\n            cylinder(h = 5, d = 200);\n            cylinder(h = 6, d = 180);\n        }\n    }\n}\n\nmodule storage_compartment() {\n    // Side storage pocket with hinged lid\n    translate([0, ball_diameter/2 - 5, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Main compartment\n                translate([0, 0, -20]) {\n                    cylinder(h = 40, d = 80);\n                }\n                \n                // Inner cavity\n                cylinder(h = 40, d = 76);\n            }\n            \n            // Hinge detail\n            translate([0, 0, 20]) {\n                cylinder(h = 30, d = 3);\n            }\n        }\n    }\n}\n\nmodule air_valve() {\n    // Ball inflation valve detail\n    translate([ball_diameter/2 - 10, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 15, d = 8);\n                cylinder(h = 16, d = 4);\n            }\n        }\n    }\n}\n\nmodule ergonomic_grooves() {\n    // Seating surface grooves for comfort\n    for (angle = [45:90:315]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, ball_diameter/2 + 10]) {\n                translate([0, 30, 0]) {\n                    cube([5, 60, 2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    jumpball_base();\n    seat_platform();\n    support_base();\n    storage_compartment();\n    air_valve();\n    ergonomic_grooves();\n}",
    "renders": true
  },
  {
    "office_supply": "practiceball",
    "openscad_code": "// Practice Ball Office Chair - medium complexity realistic style\n// Overall dimensions: 300x300x400mm (fits within 3D printer build volume)\n\n// Parameters\nball_d = 200;\nball_wall = 2;\nbase_d = 250;\nbase_h = 15;\nstem_d = 40;\nstem_h = 180;\ncastor_d = 25;\ncastor_h = 20;\n\n// Main ball - hollow sphere with ergonomic seating depression\nmodule ball() {\n    difference() {\n        // Main hollow sphere\n        difference() {\n            sphere(d=ball_d);\n            sphere(d=ball_d - ball_wall*2);\n        }\n        \n        // Ergonomic seating depression (egg-shaped for comfort)\n        rotate([15, 0, 0])\n        scale([1, 1, 0.6])\n        translate([0, 0, ball_d/4])\n        sphere(d=ball_d/1.5);\n        \n        // Air valve hole\n        translate([0, -ball_d/2 + 5, 0])\n        rotate([0, 90, 0])\n        cylinder(h=10, d=8, $fn=16);\n    }\n}\n\n// Pneumatic stem and base\nmodule stem_assembly() {\n    // Stem cylinder\n    cylinder(h=stem_h, d=stem_d, $fn=32);\n    \n    // Height adjustment button\n    translate([stem_d/2 + 2, 0, stem_h - 15])\n    cube([4, 8, 15]);\n    \n    // Base plate\n    translate([0, 0, -base_h])\n    cylinder(h=base_h, d=base_d, $fn=64);\n    \n    // Reinforcement ribs\n    for(i = [0:5:359]) {\n        rotate([0, 0, i])\n        translate([base_d/2 - 15, -5, -base_h])\n        cube([15, 10, base_h]);\n    }\n}\n\n// Castor wheel assembly\nmodule castor() {\n    // Wheel body\n    difference() {\n        cylinder(h=castor_h, d=castor_d, $fn=16);\n        cylinder(h=castor_h+2, d=castor_d-4, $fn=16);\n    }\n    \n    // Axle pin\n    translate([0, 0, castor_h/2])\n    rotate([90, 0, 0])\n    cylinder(h=castor_d, d=2, $fn=8);\n    \n    // Swivel mount\n    translate([0, 0, castor_h])\n    cylinder(h=15, d=10, $fn=16);\n}\n\n// Generate 5 castors around base\nmodule castor_array() {\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n        translate([base_d/2 - 30, 0, -base_h - castor_h/2])\n        castor();\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball chair\n    color(\"darkred\")\n    translate([0, 0, stem_h + ball_d/2 - 30])\n    ball();\n    \n    // Stem and base\n    color(\"silver\")\n    stem_assembly();\n    \n    // Castors\n    color(\"black\")\n    castor_array();\n}\n\n// Optional: Add texture rings for grip\nmodule grip_rings() {\n    for(z = [0:20:ball_d-40]) {\n        color(\"red\")\n        translate([0, 0, stem_h + z])\n        difference() {\n            sphere(d=ball_d + 0.5);\n            sphere(d=ball_d - 1);\n        }\n    }\n}\n\n// Uncomment to add grip rings:\n// translate([0, 0, 0])\n// grip_rings();",
    "renders": true
  },
  {
    "office_supply": "trainingball",
    "openscad_code": "// Training Ball Office Chair - Realistic Style (Medium Complexity)\n// Overall dimensions: ~120mm diameter ball, 100mm seat height\n// 3D printable with 2mm walls, no overhangs >45 degrees\n\nball_radius = 30;\nbase_height = 40;\nleg_height = 20;\nseat_thickness = 8;\n\n// Main stability base - conical frustum with hollow center\nmodule stability_base() {\n    difference() {\n        // Outer cone shape\n        cylinder(h=base_height, r1=45, r2=35, $fn=32);\n        \n        // Hollow center for ball clearance\n        translate([0, 0, -1])\n            cylinder(h=base_height+2, r1=ball_radius+5, r2=ball_radius+2, $fn=32);\n        \n        // Weight reduction holes (6 evenly spaced)\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([25, 0, base_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(h=30, r=3, $fn=16);\n        }\n    }\n}\n\n// Support legs connecting base to seat ring\nmodule support_legs() {\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            // Main leg strut\n            translate([28, 0, leg_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=leg_height, r=4, $fn=12);\n            \n            // Reinforcement gusset\n            translate([22, 0, leg_height/2])\n                rotate([90, 0, 45])\n                    cube([20, 2, 2]);\n        }\n    }\n}\n\n// Seat ring with ergonomic contour\nmodule seat_ring() {\n    difference() {\n        // Main ring structure\n        cylinder(h=seat_thickness, r1=35, r2=32, $fn=64);\n        \n        // Center hole for ball\n        cylinder(h=seat_thickness+1, r=ball_radius-2, $fn=64);\n        \n        // Comfort bevel on top\n        translate([0, 0, seat_thickness-2])\n            cylinder(h=2, r1=34, r2=32, $fn=64);\n    }\n    \n    // Handle cutouts for lifting\n    for(i=[0:1]) {\n        rotate([0, 0, i*180]) {\n            translate([0, 30, seat_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=30, r=8, $fn=32);\n            translate([0, 30, seat_thickness/2])\n                cube([15, 30, 16], center=true);\n        }\n    }\n}\n\n// Training ball with pump valve detail\nmodule training_ball() {\n    difference() {\n        // Main ball sphere\n        sphere(r=ball_radius, $fn=64);\n        \n        // Valve stem indent\n        translate([0, 0, ball_radius-2])\n            rotate([0, 0, 0])\n                cylinder(h=5, r=3, $fn=12);\n    }\n    \n    // Surface texture rings\n    for(lat=[-60:30:60]) {\n        rotate([0, lat, 0])\n            rotate_extrude(angle=360, $fn=64)\n                translate([ball_radius, 0, 0])\n                    circle(r=0.5);\n    }\n    for(lon=[0:30:330]) {\n        rotate([0, 0, lon])\n            rotate_extrude(angle=360, $fn=64)\n                translate([ball_radius, 0, 0])\n                    rotate([90, 0, 0])\n                        circle(r=0.5);\n    }\n}\n\n// Anti-slip grip texture on seat\nmodule grip_texture() {\n    for(i=[0:15]) {\n        rotate([0, 0, i*24]) {\n            for(j=[0:2]) {\n                translate([28-j*6, 0, seat_thickness-1])\n                    cylinder(h=0.5, r=2-j*0.3, $fn=8);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    stability_base();\n\ntranslate([0, 0, base_height])\n    support_legs();\n\ntranslate([0, 0, base_height+leg_height])\n    seat_ring();\n\ntranslate([0, 0, base_height+leg_height+seat_thickness-2])\n    grip_texture();\n\ntranslate([0, 0, base_height+leg_height+seat_thickness/2])\n    training_ball();",
    "renders": true
  },
  {
    "office_supply": "matchball",
    "openscad_code": "// Matchball Office Stool - Realistic Style\n// A functional stool shaped like a classic football/soccer matchball\n\n// Main parameters\nball_diameter = 120;\nleg_height = 200;\nseat_thickness = 15;\nwall_thickness = 2.5;\n\nmodule matchball_stool() {\n    // Seat - top half of ball with ergonomic indentation\n    difference() {\n        // Main ball shape (top half)\n        intersection() {\n            sphere(d=ball_diameter);\n            translate([0, 0, -ball_diameter/2]) \n                cube([ball_diameter, ball_diameter, ball_diameter], center=true);\n        }\n        \n        // Cutout for seating comfort\n        translate([0, 0, ball_diameter/2 - seat_thickness])\n            sphere(d=ball_diameter * 0.85);\n    }\n    \n    // Hollow out the ball for weight reduction\n    difference() {\n        translate([0, 0, ball_diameter/2 - seat_thickness])\n            sphere(d=ball_diameter);\n        translate([0, 0, ball_diameter/2 - seat_thickness - wall_thickness])\n            sphere(d=ball_diameter - 2*wall_thickness);\n    }\n    \n    // Structural reinforcement ring\n    translate([0, 0, ball_diameter/2 - seat_thickness])\n        cylinder(h=seat_thickness, d1=ball_diameter - 2*wall_thickness, d2=ball_diameter - wall_thickness);\n}\n\nmodule pentagon_pattern() {\n    // Create pentagon shapes for classic ball pattern\n    pentagon_size = ball_diameter * 0.18;\n    \n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([pentagon_size * 0.65, 0, ball_diameter/2 - seat_thickness + 0.1])\n        linear_extrude(height=2)\n            polygon(points=[\n                [0, -pentagon_size/2],\n                [pentagon_size * 0.95, -pentagon_size * 0.31],\n                [pentagon_size * 0.59, pentagon_size * 0.81],\n                [-pentagon_size * 0.59, pentagon_size * 0.81],\n                [-pentagon_size * 0.95, -pentagon_size * 0.31]\n            ]);\n    }\n}\n\nmodule legs() {\n    // Four legs with cross-bracing\n    leg_width = 15;\n    brace_width = 8;\n    \n    // Leg positions in 90-degree intervals\n    leg_positions = [\n        [35, 35],\n        [-35, 35],\n        [-35, -35],\n        [35, -35]\n    ];\n    \n    // Main legs\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=leg_height, d=leg_width);\n    }\n    \n    // Lower cross-bracing ring\n    translate([0, 0, leg_height * 0.3])\n        cylinder(h=brace_width, d=90);\n    \n    // Upper cross-bracing ring\n    translate([0, 0, leg_height * 0.7])\n        cylinder(h=brace_width, d=100);\n    \n    // Feet for stability\n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -5])\n            cylinder(h=10, d1=leg_width * 1.5, d2=leg_width * 1.2);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat/ball\n    matchball_stool();\n    \n    // Decorative pentagon pattern\n    pentagon_pattern();\n    \n    // Leg assembly\n    translate([0, 0, -leg_height])\n        legs();\n}",
    "renders": true
  },
  {
    "office_supply": "gameball",
    "openscad_code": "// Gameball Furniture - Office Chair with Gameball Base\n// Realistic style, medium complexity\n// Dimensions: 120mm height, 100mm base diameter\n\n// Overall dimensions\nbase_diameter = 100;\nseat_diameter = 80;\nbackrest_width = 75;\nbackrest_height = 45;\narmrest_height = 25;\ntotal_height = 120;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Gameball base module - 5 wheels on ball bearings\nmodule gameball_base() {\n    difference() {\n        // Main ball sphere\n        sphere(d=base_diameter, $fn=64);\n        \n        // Hollow interior for weight reduction\n        sphere(d=base_diameter - wall_thickness*2, $fn=64);\n    }\n    \n    // Add wheel mounting points\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, base_diameter/2 - 10, -base_diameter/2 + 15]) {\n                cylinder(h=20, d1=8, d2=6, $fn=12);\n            }\n        }\n    }\n    \n    // Central support post connection\n    translate([0, 0, base_diameter/2 - 5]) {\n        difference() {\n            cylinder(h=20, d=25, $fn=24);\n            cylinder(h=20, d=21, $fn=24);\n        }\n    }\n}\n\n// Pneumatic height adjustment cylinder\nmodule height_adjustment() {\n    // Outer cylinder\n    difference() {\n        cylinder(h=total_height - base_diameter/2 - 30, d=20, $fn=24);\n        cylinder(h=total_height - base_diameter/2 - 30, d=16, $fn=24);\n    }\n    \n    // Control lever\n    translate([10, 0, 20]) {\n        difference() {\n            cube([15, 5, 3]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([15 - wall_thickness*2, 5 - wall_thickness*2, 3]);\n        }\n    }\n}\n\n// Seat module with ergonomic shape\nmodule seat() {\n    // Main seat cushion\n    difference() {\n        hull() {\n            translate([0, 0, 5]) \n                cylinder(h=10, d=seat_diameter, $fn=32);\n            translate([0, 0, 0]) \n                cylinder(h=10, d=seat_diameter*0.9, $fn=32);\n        }\n        \n        // Hollow underside\n        translate([0, 0, -1])\n            cylinder(h=12, d=seat_diameter - wall_thickness*2, $fn=32);\n    }\n    \n    // Mounting plate\n    translate([0, 0, 15]) {\n        difference() {\n            cylinder(h=8, d=30, $fn=24);\n            cylinder(h=8, d=26, $fn=24);\n        }\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        hull() {\n            translate([0, -backrest_width/2, 0])\n                cube([backrest_height, backrest_width, 8]);\n            translate([0, -backrest_width/2 + 10, 8])\n                cube([backrest_height - 10, backrest_width - 20, 6]);\n        }\n        \n        // Hollow back\n        translate([wall_thickness, -backrest_width/2 + 10, wall_thickness])\n            cube([backrest_height - wall_thickness*2, backrest_width - 20, 6]);\n    }\n    \n    // Lumbar support curve\n    difference() {\n        translate([backrest_height/2, 0, 8]) {\n            sphere(d=backrest_width*0.7, $fn=32);\n        }\n        translate([backrest_height/2 + 10, 0, 8]) {\n            sphere(d=backrest_width*0.7 - wall_thickness*2, $fn=32);\n        }\n    }\n}\n\n// Armrest with adjustment mechanism\nmodule armrest(side) {\n    translate([0, side * (seat_diameter/2 + 5), 0]) {\n        // Vertical support\n        difference() {\n            cylinder(h=armrest_height, d=12, $fn=16);\n            cylinder(h=armrest_height, d=8, $fn=16);\n        }\n        \n        // Horizontal arm pad\n        translate([0, 0, armrest_height]) {\n            difference() {\n                cube([25, 8, 4], center=true);\n                cube([25 - wall_thickness*2, 8 - wall_thickness*2, 4 - wall_thickness], center=true);\n            }\n        }\n        \n        // Adjustment button\n        translate([8, side * 4, armrest_height/2]) {\n            difference() {\n                sphere(d=6, $fn=16);\n                sphere(d=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Assemble the chair\ntranslate([0, 0, 0]) {\n    // Gameball base\n    gameball_base();\n    \n    // Height adjustment\n    translate([0, 0, base_diameter/2 + 10]) {\n        height_adjustment();\n    }\n    \n    // Seat\n    translate([0, 0, total_height - 35]) {\n        rotate([0, 10, 0]) {\n            seat();\n        }\n    }\n    \n    // Backrest\n    translate([-(backrest_height/2 - 10), 0, total_height - 30]) {\n        rotate([10, 0, 0]) {\n            backrest();\n        }\n    }\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "leatherball",
    "openscad_code": "// Leatherball Office Chair - Realistic Style\nmodule leatherball_chair() {\n    // Main ball diameter\n    ball_d = 100;\n    wall_thickness = 2;\n    \n    // Base support structure\n    module base_support() {\n        // Central cylinder\n        cylinder(h=20, r=20, $fn=32);\n        \n        // Stabilizing legs\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([15, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=25, r=4, $fn=16);\n        }\n        \n        // Bottom plate\n        translate([0, 0, -2])\n        cylinder(h=4, r=30, $fn=32);\n    }\n    \n    // Leather ball segments\n    module ball_segments() {\n        difference() {\n            // Main ball\n            sphere(r=ball_d/2, $fn=64);\n            \n            // Remove interior for hollow ball\n            sphere(r=(ball_d/2)-wall_thickness, $fn=64);\n            \n            // Seat opening\n            translate([0, 0, ball_d/4])\n            cylinder(h=ball_d/2, r=ball_d/3, $fn=32);\n        }\n    }\n    \n    // Leather texture panels\n    module leather_panels() {\n        // Vertical seams\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n            translate([0, 0, -ball_d/4])\n            cube([wall_thickness, ball_d/2, ball_d/2], center=true);\n        }\n        \n        // Horizontal seam\n        rotate([90, 0, 0])\n        cylinder(h=wall_thickness, r=ball_d/2-1, $fn=64);\n    }\n    \n    // Backrest support\n    module backrest() {\n        // Curved backrest frame\n        translate([0, -ball_d/3, ball_d/4])\n        rotate([20, 0, 0])\n        difference() {\n            cylinder(h=30, r=5, $fn=16);\n            cylinder(h=30, r=3, $fn=16);\n        }\n        \n        // Top support bar\n        translate([0, -ball_d/3, ball_d/2+15])\n        rotate([90, 0, 0])\n        cylinder(h=ball_d/2, r=3, $fn=16);\n    }\n    \n    // Assembly\n    translate([0, 0, 20])\n    union() {\n        // Base\n        base_support();\n        \n        // Ball structure\n        translate([0, 0, 20])\n        union() {\n            ball_segments();\n            leather_panels();\n        }\n        \n        // Backrest\n        translate([0, 0, 20])\n        backrest();\n        \n        // Seat cushion detail\n        translate([0, 0, ball_d/4])\n        cylinder(h=5, r=ball_d/3-2, $fn=32);\n    }\n}\n\n// Render the chair\nleatherball_chair();",
    "renders": true
  },
  {
    "office_supply": "syntheticball",
    "openscad_code": "// Syntheticball office chair (realistic style, medium complexity)\n// Overall height: 110 mm, seat diameter: 80 mm, base diameter: 100 mm\n\n// Global parameters\n$fa = 2;\n$fs = 0.5;\n\n// Chair components\nmodule chair() {\n    // Central support column\n    difference() {\n        cylinder(h = 70, d = 20, center = false);\n        translate([0, 0, 5]) cylinder(h = 60, d = 16, center = false);\n    }\n\n    // Seat sphere\n    translate([0, 0, 70]) {\n        difference() {\n            sphere(d = 80);\n            translate([0, 0, -40]) cube([100, 100, 40], center = true);\n        }\n        // Seat cushion ring\n        translate([0, 0, -30]) cylinder(h = 5, d = 70);\n    }\n\n    // Five-star base legs\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 0, 0]) {\n                difference() {\n                    translate([20, 0, -5]) cube([40, 10, 10], center = true);\n                    translate([20, 0, -5]) cube([36, 6, 12], center = true);\n                }\n                // Caster wheels\n                translate([40, 0, -10]) {\n                    sphere(d = 12);\n                    translate([0, 0, -6]) cylinder(h = 6, d = 8);\n                }\n            }\n        }\n    }\n\n    // Central base hub\n    difference() {\n        cylinder(h = 10, d = 30);\n        translate([0, 0, 5]) cylinder(h = 10, d = 26);\n    }\n\n    // Backrest support\n    translate([0, -30, 75]) {\n        difference() {\n            rotate([90, 0, 0]) cylinder(h = 40, d = 12);\n            translate([0, 0, 5]) rotate([90, 0, 0]) cylinder(h = 30, d = 8);\n        }\n    }\n\n    // Backrest sphere\n    translate([0, -50, 105]) {\n        difference() {\n            sphere(d = 60);\n            translate([0, 30, 0]) cube([100, 100, 100], center = true);\n        }\n    }\n\n    // Armrest supports\n    for (side = [-1, 1]) {\n        translate([side * 35, 0, 85]) {\n            difference() {\n                rotate([0, side * 15, 0]) cube([6, 6, 30], center = true);\n                translate([0, 0, 5]) cube([4, 4, 25], center = true);\n            }\n            // Armrest pads\n            translate([0, 0, 30]) {\n                difference() {\n                    cube([30, 10, 4], center = true);\n                    translate([0, 0, 2]) cube([26, 6, 6], center = true);\n                }\n            }\n        }\n    }\n\n    // Height adjustment lever\n    translate([20, 0, 50]) {\n        difference() {\n            rotate([0, 90, 0]) cylinder(h = 25, d = 8);\n            translate([5, 0, 0]) rotate([0, 90, 0]) cylinder(h = 15, d = 4);\n        }\n    }\n}\n\n// Assemble chair\nchair();",
    "renders": true
  },
  {
    "office_supply": "rubberball",
    "openscad_code": "// Rubberball Desk Organizer (Medium Complexity, Realistic Style)\n// A functional desk organizer shaped like a rubberball, 120mm diameter\n\n// Parameters\nball_diameter = 120;\nwall_thickness = 2;\nsegment_count = 6;\nbase_height = 15;\npen_hole_diameter = 12;\npen_hole_depth = 80;\n\n// Rubberball main structure\nmodule rubberball_base() {\n    // Main ball body\n    difference() {\n        sphere(d = ball_diameter, $fn = 60);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - wall_thickness * 2, $fn = 60);\n        \n        // Flat base for stability\n        translate([0, 0, -ball_diameter/2 + base_height])\n            cube([ball_diameter + 2, ball_diameter + 2, ball_diameter], center = true);\n    }\n}\n\n// Rubber grip texture segments\nmodule grip_segments() {\n    for (i = [0:segment_count - 1]) {\n        rotate([0, 0, i * (360/segment_count)])\n            translate([0, 0, -wall_thickness])\n            difference() {\n                // Raised segment\n                translate([0, ball_diameter/2 - wall_thickness, 0])\n                    scale([1, 0.3, 1])\n                    sphere(d = wall_thickness * 4, $fn = 20);\n                \n                // Tapered ends\n                translate([0, ball_diameter/2 - wall_thickness * 2, wall_thickness * 1.5])\n                    scale([1, 0.2, 0.5])\n                    sphere(d = wall_thickness * 3, $fn = 10);\n                \n                translate([0, ball_diameter/2 - wall_thickness * 2, -wall_thickness * 1.5])\n                    scale([1, 0.2, 0.5])\n                    sphere(d = wall_thickness * 3, $fn = 10);\n            }\n    }\n}\n\n// Air valve detail\nmodule air_valve() {\n    translate([ball_diameter/2 - wall_thickness, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Valve stem\n        cylinder(h = wall_thickness * 3, d1 = wall_thickness, d2 = wall_thickness * 1.5, $fn = 16);\n        \n        // Valve hole\n        cylinder(h = wall_thickness * 3.5, d = wall_thickness * 0.5, $fn = 16);\n    }\n}\n\n// Pen holder holes\nmodule pen_holes() {\n    // Central pen hole\n    translate([0, 0, ball_diameter/2 - base_height - pen_hole_depth/2])\n        rotate([0, 0, 0])\n        cylinder(h = pen_hole_depth, d = pen_hole_diameter, $fn = 32);\n    \n    // Additional pen holes in circular pattern\n    for (i = [1:5]) {\n        angle = i * 60;\n        radius = ball_diameter * 0.25;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            ball_diameter/2 - base_height - pen_hole_depth/2\n        ])\n        rotate([0, 0, 0])\n        cylinder(h = pen_hole_depth, d = pen_hole_diameter * 0.8, $fn = 32);\n    }\n}\n\n// Structural support ribs inside\nmodule support_ribs() {\n    rib_height = ball_diameter * 0.6;\n    rib_width = wall_thickness;\n    \n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, -rib_width/2, -ball_diameter/2 + base_height])\n            cube([ball_diameter * 0.3, rib_width, rib_height], center = true);\n    }\n}\n\n// Base with non-slip feet\nmodule base_feet() {\n    foot_diameter = wall_thickness * 4;\n    foot_height = wall_thickness;\n    \n    for (i = [0:3]) {\n        angle = i * 90 + 45;\n        radius = ball_diameter * 0.35;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            -ball_diameter/2 + base_height - foot_height/2\n        ])\n        cylinder(h = foot_height, d = foot_diameter, $fn = 16);\n    }\n}\n\n// Assemble the complete rubberball desk organizer\nunion() {\n    // Main structure\n    rubberball_base();\n    \n    // Surface details\n    grip_segments();\n    \n    // Functional elements\n    air_valve();\n    \n    // Internal features\n    difference() {\n        // Empty container\n        translate([0, 0, 0])\n            cube([0.01, 0.01, 0.01], center = true);\n        \n        // Pen holders\n        pen_holes();\n        \n        // Support structure\n        support_ribs();\n    }\n    \n    // Base details\n    base_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "plasticball",
    "openscad_code": "// Plasticball Office Chair - Realistic Medium Complexity\n// Dimensions: ~120mm height, ~100mm width, ergonomic proportions\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main parameters\nseat_diameter = 60;\nbackrest_height = 45;\nbase_height = 35;\ncaster_radius = 8;\npole_radius = 6;\narmrest_width = 15;\n\n// Seat module with ergonomic cushion shape\nmodule seat() {\n    // Main seat base\n    translate([0, 0, base_height + 5])\n    difference() {\n        // Cushioned top\n        scale([1, 1.2, 0.5])\n        sphere(d = seat_diameter);\n        \n        // Hollow underside for weight reduction\n        translate([0, 0, -5])\n        scale([0.8, 0.8, 1])\n        sphere(d = seat_diameter - 10);\n    }\n    \n    // Seat edge ring for structure\n    translate([0, 0, base_height + 5])\n    difference() {\n        cylinder(h = 5, d = seat_diameter + 4);\n        cylinder(h = 6, d = seat_diameter);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main backrest\n    translate([0, -seat_diameter/2 + 5, base_height + 5 + seat_diameter/4])\n    rotate([15, 0, 0])\n    difference() {\n        // Curved backrest\n        scale([0.9, 0.6, 1.2])\n        sphere(d = seat_diameter + 20);\n        \n        // Cut bottom for seat clearance\n        translate([0, 0, -seat_diameter/2])\n        cube([200, 200, 100], center = true);\n        \n        // Hollow back for weight reduction\n        translate([0, 5, 0])\n        scale([0.85, 0.5, 1.1])\n        sphere(d = seat_diameter + 10);\n    }\n    \n    // Lumbar support ridge\n    translate([0, -seat_diameter/2 + 10, base_height + 5])\n    rotate([15, 0, 0])\n    scale([0.7, 0.3, 0.1])\n    sphere(d = seat_diameter);\n}\n\n// Adjustable height pole\nmodule pole() {\n    // Outer pole\n    cylinder(h = base_height + 20, d = pole_radius * 2);\n    \n    // Inner pole (telescoping)\n    translate([0, 0, base_height])\n    cylinder(h = 25, d = pole_radius * 1.6);\n    \n    // Adjustment mechanism ring\n    translate([0, 0, base_height + 5])\n    cylinder(h = 8, d = pole_radius * 3);\n}\n\n// 5-star base with casters\nmodule base() {\n    // Central hub\n    cylinder(h = 10, d = pole_radius * 4);\n    \n    // 5 base arms\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 0, 0])\n        base_arm();\n    }\n}\n\n// Single base arm with caster\nmodule base_arm() {\n    // Arm\n    translate([25, 0, 5])\n    rotate([0, 90, 0])\n    cylinder(h = 50, d = 8);\n    \n    // Caster housing\n    translate([50, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 12, d = 12);\n    \n    // Caster wheel\n    translate([50, 0, -caster_radius])\n    rotate([0, 0, 90])\n    cylinder(h = 8, d = caster_radius * 2);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([seat_diameter/2 - 5, 0, base_height + seat_diameter/2])\n    armrest();\n    \n    // Right armrest\n    translate([-seat_diameter/2 + 5, 0, base_height + seat_diameter/2])\n    rotate([0, 0, 180])\n    armrest();\n}\n\nmodule armrest() {\n    // Post\n    translate([0, 0, 0])\n    cylinder(h = 20, d = 8);\n    \n    // Rest pad\n    translate([0, -10, 20])\n    rotate([0, 15, 0])\n    scale([1, 2, 0.5])\n    sphere(d = armrest_width);\n}\n\n// Assembly\nunion() {\n    // Structural components\n    base();\n    pole();\n    \n    // Seating components\n    seat();\n    backrest();\n    \n    // Optional armrests\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "inflatableball",
    "openscad_code": "// Inflatable Ball Chair - Mid-Complexity Realistic Style\n// Overall size: 120 mm diameter ball on 60 mm base\n\n$fn = 36;\n\nmodule ball_shell() {\n    // Main inflatable sphere with 2 mm wall thickness\n    difference() {\n        sphere(d = 120);\n        sphere(d = 116);\n    }\n}\n\nmodule valve_stem() {\n    // Realistic air valve on rear side\n    translate([0, -58, 0]) {\n        rotate([90, 0, 0]) {\n            // Valve base\n            cylinder(h = 8, d1 = 12, d2 = 10);\n            // Valve cap\n            translate([0, 0, 8]) {\n                cylinder(h = 5, d = 10);\n            }\n        }\n    }\n}\n\nmodule seating_dimple() {\n    // Ergonomic seating depression on top\n    translate([0, 0, 30]) {\n        rotate_extrude() {\n            translate([0, 0]) {\n                polygon(points=[\n                    [0, 0],\n                    [20, -5],\n                    [35, -15],\n                    [40, -25],\n                    [35, -35],\n                    [20, -40],\n                    [0, -42]\n                ]);\n            }\n        }\n    }\n}\n\nmodule base_ring() {\n    // Structural base ring for stability\n    difference() {\n        cylinder(h = 15, d = 60);\n        cylinder(h = 18, d = 54);\n    }\n}\n\nmodule support_struts() {\n    // 4 support struts connecting ball to base\n    for(i = [0:90:360]) {\n        rotate([0, 0, i]) {\n            translate([25, 0, -52.5]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 6, d = 4);\n                }\n            }\n        }\n    }\n}\n\nmodule texture_lines() {\n    // Subtle seam lines for realistic inflatable appearance\n    for(i = [0:45:180]) {\n        rotate([0, i, 0]) {\n            difference() {\n                sphere(d = 119);\n                sphere(d = 117);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball structure\n    ball_shell();\n    \n    // Add valve detail\n    valve_stem();\n    \n    // Add seating depression\n    difference() {\n        ball_shell();\n        seating_dimple();\n    }\n    \n    // Add base structure\n    translate([0, 0, -67.5]) {\n        base_ring();\n    }\n    \n    // Add support struts\n    support_struts();\n    \n    // Add surface texture\n    texture_lines();\n}",
    "renders": true
  },
  {
    "office_supply": "pump",
    "openscad_code": "// Realistic Pump Furniture - Medium Complexity\n// Dimensions: 100mm height, 60mm depth, 80mm width\n// Wall thickness: 2mm for 3D printing\n\n// Main pump body\nmodule pump_body() {\n    // Main cylinder body\n    difference() {\n        cylinder(h=70, r=25, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=66, r=23, $fn=32);\n    }\n    \n    // Base plate for stability\n    translate([0, 0, -5])\n        difference() {\n            cylinder(h=5, r=30, $fn=32);\n            translate([0, 0, 3])\n                cylinder(h=2, r=28, $fn=32);\n        }\n}\n\n// Handle assembly\nmodule pump_handle() {\n    // Vertical support rod\n    translate([30, 0, 35])\n        rotate([90, 0, 0])\n            cylinder(h=40, r=3, $fn=16);\n    \n    // Handle grip\n    translate([30, 0, 75])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=30, r=6, $fn=16);\n                translate([0, -3, 0])\n                    rotate([0, 90, 0])\n                        cube([6, 30, 12], center=true);\n            }\n    \n    // Connection joint\n    translate([25, 0, 35])\n        sphere(r=4, $fn=16);\n}\n\n// Pressure chamber\nmodule pressure_chamber() {\n    // Horizontal cylinder\n    translate([0, 0, 20])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=35, r=15, $fn=32);\n                translate([0, 0, 2])\n                    cylinder(h=31, r=13, $fn=32);\n            }\n    \n    // Front nozzle\n    translate([0, 30, 20])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=15, r1=12, r2=8, $fn=16);\n                translate([0, 0, 2])\n                    cylinder(h=11, r1=10, r2=6, $fn=16);\n            }\n}\n\n// Support brackets\nmodule support_brackets() {\n    // Left bracket\n    translate([-20, 0, 30])\n        difference() {\n            cube([8, 15, 40]);\n            translate([2, 2, 2])\n                cube([4, 11, 36]);\n        }\n    \n    // Right bracket\n    translate([20, 0, 30])\n        difference() {\n            cube([8, 15, 40]);\n            translate([2, 2, 2])\n                cube([4, 11, 36]);\n        }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(i=[-1, 1]) {\n        translate([i*15, 0, -2])\n            cylinder(h=10, r=2, $fn=16);\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    for(a=[0:90:270]) {\n        rotate([0, 0, a])\n            translate([20, 20, -5])\n                difference() {\n                    cylinder(h=5, r=4, $fn=16);\n                    translate([0, 0, 2])\n                        cylinder(h=3, r=2, $fn=16);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    pump_body();\n    pump_handle();\n    pressure_chamber();\n    support_brackets();\n    feet();\n}\n\n// Remove mounting holes\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "office_supply": "needle",
    "openscad_code": "// Needle Furniture - Realistic Style\n// OpenSCAD parameters for 3D printing compatibility\n\n// Overall dimensions\nneedle_length = 120;\nneedle_diameter = 8;\nbase_length = 30;\nbase_width = 25;\nbase_height = 15;\npin_length = 15;\npin_diameter = 2;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule needle_body() {\n    difference() {\n        // Main needle body - slight taper for realistic appearance\n        cylinder(h=needle_length, d1=needle_diameter, d2=needle_diameter*0.8, $fn=32);\n        \n        // Hollow core for material reduction\n        translate([0, 0, wall_thickness])\n            cylinder(h=needle_length-wall_thickness*2, d=needle_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\nmodule needle_eye() {\n    // Eye hole with reinforced edges\n    translate([0, -needle_diameter/2, needle_length*0.8])\n        rotate([90, 0, 0])\n            difference() {\n                // Eye opening\n                cylinder(h=needle_diameter*1.2, d=needle_diameter*0.8, $fn=32);\n                \n                // Inner hole\n                cylinder(h=needle_diameter*1.3, d=needle_diameter*0.4, $fn=32);\n            }\n}\n\nmodule base_structure() {\n    // Weighted base for stability\n    difference() {\n        // Main base block\n        cube([base_width, base_length, base_height], center=true);\n        \n        // Cavity for weight reduction\n        translate([0, 0, wall_thickness])\n            cube([base_width-wall_thickness*2, base_length-wall_thickness*2, base_height-wall_thickness], center=true);\n    }\n}\n\nmodule mounting_pins() {\n    // Mounting pins for needle attachment\n    for(x=[-base_width/4, base_width/4]) {\n        for(y=[-base_length/4, base_length/4]) {\n            translate([x, y, -base_height/2-pin_length/2])\n                cylinder(h=pin_length, d=pin_diameter, $fn=16);\n        }\n    }\n}\n\nmodule needle_point() {\n    // Sharp point with realistic taper\n    translate([0, 0, needle_length])\n        cylinder(h=needle_diameter*1.5, d1=needle_diameter*0.8, d2=0.1, $fn=32);\n}\n\nmodule support_braces() {\n    // Structural braces between base and needle\n    difference() {\n        // Main brace\n        translate([0, 0, (base_height+needle_length)/2])\n            cube([wall_thickness*3, base_length*0.6, needle_length-base_height], center=true);\n        \n        // Lightening holes\n        for(i=[-1, 1]) {\n            translate([0, i*base_length/4, (base_height+needle_length)/2])\n                cube([wall_thickness*2.5, 5, needle_length-base_height-10], center=true);\n        }\n    }\n}\n\nmodule ergonomic_grip() {\n    // Textured grip area\n    translate([0, needle_diameter/2, needle_length*0.3])\n        rotate([90, 0, 0])\n            for(i=[0:5]) {\n                rotate([0, 0, i*60])\n                    translate([0, 0, 0])\n                        cube([wall_thickness*1.5, 3, needle_diameter*0.8], center=true);\n            }\n}\n\n// Main assembly\nunion() {\n    // Base assembly\n    translate([0, 0, 0])\n        base_structure();\n    \n    translate([0, 0, 0])\n        mounting_pins();\n    \n    // Needle assembly\n    translate([0, 0, base_height/2])\n        union() {\n            needle_body();\n            needle_eye();\n            needle_point();\n            ergonomic_grip();\n        }\n    \n    // Structural support\n    translate([0, 0, base_height/2])\n        support_braces();\n}",
    "renders": true
  },
  {
    "office_supply": "gauge",
    "openscad_code": "// Gauge Office Clock - Realistic Medium Complexity\n// A functional wall-mounted gauge-style clock with furniture-grade details\n\n$fn = 50;\n\n// Main dimensions\nbody_diameter = 80;\nbody_thickness = 12;\nframe_thickness = 4;\nmounting_plate_size = 30;\nmounting_plate_thickness = 3;\n\n// Create the main clock body with realistic proportions\nmodule clock_body() {\n    // Outer frame with rounded edges\n    difference() {\n        // Main circular body\n        cylinder(h = body_thickness, d = body_diameter, center = true);\n        \n        // Recessed center face\n        translate([0, 0, body_thickness/2 - 1])\n            cylinder(h = 2, d = body_diameter - 2*frame_thickness, center = false);\n    }\n    \n    // Beveled edge detail\n    translate([0, 0, body_thickness/2])\n        cylinder(h = 2, d1 = body_diameter, d2 = body_diameter - 2, center = false);\n    \n    translate([0, 0, -body_thickness/2])\n        cylinder(h = 2, d1 = body_diameter - 2, d2 = body_diameter, center = false);\n}\n\n// Create gauge face with realistic details\nmodule gauge_face() {\n    // Face plate\n    translate([0, 0, body_thickness/2 - 0.5])\n        cylinder(h = 1, d = body_diameter - 2*frame_thickness - 4, center = false);\n    \n    // Center hub\n    translate([0, 0, body_thickness/2])\n        cylinder(h = 2, d = 8, center = false);\n    \n    // Hour markers (12 positions)\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([body_diameter/2 - frame_thickness - 8, 0, body_thickness/2])\n                cube([12, 2, 0.5], center = true);\n    }\n    \n    // Minute markers (subtle ticks between hours)\n    for (i = [0:59]) {\n        if (i % 5 != 0) {\n            rotate([0, 0, i * 6])\n                translate([body_diameter/2 - frame_thickness - 6, 0, body_thickness/2])\n                    cube([6, 1, 0.5], center = true);\n        }\n    }\n}\n\n// Create hour hand with furniture-style proportions\nmodule hour_hand() {\n    translate([0, 0, body_thickness/2 + 1])\n        rotate([0, 0, 30]) // Set to 1 o'clock\n        union() {\n            // Hand body\n            cube([body_diameter/4, 4, 2], center = true);\n            \n            // Tapered tip\n            translate([body_diameter/4 - 2, 0, 0])\n                cube([4, 2, 2], center = true);\n            \n            // Center pivot detail\n            cylinder(h = 3, d = 6, center = true);\n        }\n}\n\n// Create minute hand (longer and thinner)\nmodule minute_hand() {\n    translate([0, 0, body_thickness/2 + 2])\n        rotate([0, 0, 180]) // Set to 30 minutes\n        union() {\n            // Hand body\n            cube([body_diameter/3, 2, 1.5], center = true);\n            \n            // Tapered tip\n            translate([body_diameter/3 - 2, 0, 0])\n                cube([4, 1.5, 1.5], center = true);\n            \n            // Center pivot\n            cylinder(h = 2, d = 4, center = true);\n        }\n}\n\n// Create mounting bracket (furniture-grade wall mount)\nmodule mounting_bracket() {\n    // Main mounting plate\n    translate([0, 0, -body_thickness/2 - mounting_plate_thickness/2])\n        cube([mounting_plate_size, mounting_plate_size, mounting_plate_thickness], center = true);\n    \n    // Reinforcement ribs\n    for (angle = [0:90:270]) {\n        rotate([0, 0, angle])\n            translate([mounting_plate_size/4, 0, -body_thickness/2 - mounting_plate_thickness/2])\n                cube([mounting_plate_size/2, 3, mounting_plate_thickness], center = true);\n    }\n    \n    // Keyhole mounting slots\n    translate([0, mounting_plate_size/4, -body_thickness/2 - mounting_plate_thickness + 0.5])\n        cylinder(h = 1, d = 6, center = false);\n    translate([0, mounting_plate_size/4, -body_thickness/2 - mounting_plate_thickness + 0.5])\n        cube([8, 3, 1], center = true);\n    \n    translate([0, -mounting_plate_size/4, -body_thickness/2 - mounting_plate_thickness + 0.5])\n        cylinder(h = 1, d = 6, center = false);\n    translate([0, -mounting_plate_size/4, -body_thickness/2 - mounting_plate_thickness + 0.5])\n        cube([8, 3, 1], center = true);\n}\n\n// Create glass lens protector\nmodule glass_lens() {\n    translate([0, 0, body_thickness/2 + 2])\n        cylinder(h = 2, d = body_diameter - 2*frame_thickness - 2, center = false);\n    \n    // Beveled edge\n    translate([0, 0, body_thickness/2 + 2])\n        cylinder(h = 1, d1 = body_diameter - 2*frame_thickness, d2 = body_diameter - 2*frame_thickness - 2, center = false);\n}\n\n// Assembly\nunion() {\n    clock_body();\n    gauge_face();\n    hour_hand();\n    minute_hand();\n    mounting_bracket();\n    glass_lens();\n}",
    "renders": true
  },
  {
    "office_supply": "net",
    "openscad_code": "// Office mesh-back visitor chair (net style)\n// Overall footprint ≈ 70 mm wide × 70 mm deep × 110 mm tall\n$fn = 24;\n\n// ---------- Parameters ----------\nwall = 2;                // 3D-print friendly wall thickness\nseat_h = 12;             // seat cushion thickness\nback_h = 60;             // backrest height above seat\nleg_h = 45;              // gas-lift exposed height\nbase_r = 28;             // 5-star base radius\ncaster_r = 4;            // caster wheel radius\nmesh_bar = 2;            // back mesh bar thickness\nmesh_gap = 4;            // gap between mesh bars\n\n// ---------- Module: caster wheel ----------\nmodule caster() {\n    difference() {\n        sphere(r = caster_r);\n        translate([0, 0, -caster_r])\n            cube([caster_r*2, caster_r*2, caster_r], center = true);\n    }\n}\n\n// ---------- Module: 5-star base ----------\nmodule five_star_base() {\n    difference() {\n        cylinder(h = 5, r1 = base_r, r2 = base_r);\n        cylinder(h = 6, r1 = base_r - wall, r2 = base_r - wall); // hollow\n    }\n    // spokes\n    for (a = [0:72:359]) {\n        rotate([0, 0, a])\n            translate([base_r - 5, 0, 2.5])\n                cube([10, wall*2.5, 5], center = true);\n    }\n    // casters\n    for (a = [0:72:359]) {\n        rotate([0, 0, a])\n            translate([base_r, 0, -caster_r])\n                caster();\n    }\n}\n\n// ---------- Module: gas lift column ----------\nmodule gas_lift() {\n    difference() {\n        cylinder(h = leg_h + 10, r = 6);\n        cylinder(h = leg_h + 11, r = 4); // hollow\n    }\n}\n\n// ---------- Module: mesh backrest ----------\nmodule mesh_back() {\n    difference() {\n        // outer shell\n        translate([0, 0, back_h/2])\n            cube([55, wall, back_h], center = true);\n        // inner cut\n        translate([0, 0, back_h/2])\n            cube([55 - wall*2, wall + 0.1, back_h - wall*2], center = true);\n    }\n    horizontal bars\n    for (i = [wall:mesh_bar + mesh_gap:back_h - wall*2]) {\n        translate([0, 0, i + wall])\n            cube([55 - wall*2, mesh_bar, mesh_bar], center = true);\n    }\n}\n\n// ---------- Module: seat shell ----------\nmodule seat() {\n    difference() {\n        translate([0, 0, seat_h/2])\n            cube([60, 55, seat_h], center = true);\n        // underside cavity\n        translate([0, 0, seat_h/2])\n            cube([60 - wall*2, 55 - wall*2, seat_h - wall + 0.1], center = true);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    // base + legs + lift\n    five_star_base();\n    translate([0, 0, 5])\n        gas_lift();\n\n    // seat\n    translate([0, 0, 5 + leg_h])\n        seat();\n\n    // backrest frame uprights\n    difference() {\n        translate([27.5 - wall/2, 0, 5 + leg_h + seat_h + back_h/2])\n            cube([wall, 8, back_h], center = true);\n        translate([27.5 - wall/2, 0, 5 + leg_h + seat_h + back_h/2])\n            cube([wall + 0.1, 8 - wall*2, back_h - wall*2], center = true);\n    }\n    mirror([1, 0, 0])\n        difference() {\n            translate([27.5 - wall/2, 0, 5 + leg_h + seat_h + back_h/2])\n                cube([wall, 8, back_h], center = true);\n            translate([27.5 - wall/2, 0, 5 + leg_h + seat_h + back_h/2])\n                cube([wall + 0.1, 8 - wall*2, back_h - wall*2], center = true);\n        }\n\n    // mesh panel between uprights\n    translate([0, 4, 5 + leg_h + seat_h])\n        mesh_back();\n\n    // top cross-bar\n    translate([0, 6, 5 + leg_h + seat_h + back_h])\n        cube([55, 4, wall], center = true);\n}",
    "renders": true
  },
  {
    "office_supply": "hoop",
    "openscad_code": "// Hoop Office Chair Backrest Attachment\n// A realistic hoop-style lumbar support that clamps to most chair backs\n// Overall size: 120mm wide x 100mm tall x 50mm deep\n// Wall thickness: 2mm throughout for 3D printing\n\nmodule hoop_frame() {\n    // Main structural hoop - elliptical for ergonomic lumbar support\n    difference() {\n        // Outer frame\n        rotate([90, 0, 0])\n            cylinder(h=120, d1=100, d2=100, $fn=32);\n        \n        // Remove center for hollow frame\n        rotate([90, 0, 0])\n            cylinder(h=124, d1=96, d2=96, $fn=32);\n    }\n}\n\nmodule support_spokes(count=6) {\n    // Radial spokes for structural integrity\n    for(i=[0:count-1]) {\n        rotate([0, 0, i * (360/count)])\n            translate([48, 0, 0])\n                cube([2, 2, 120], center=true);\n    }\n}\n\nmodule clamp_assembly() {\n    // Left clamp arm\n    translate([-50, 0, -20])\n        difference() {\n            // Main clamp body\n            cube([8, 20, 40]);\n            \n            // Screw hole\n            translate([4, 10, 20])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=4);\n        }\n    \n    // Right clamp arm\n    translate([50, 0, -20])\n        difference() {\n            cube([8, 20, 40]);\n            translate([4, 10, 20])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=4);\n        }\n    \n    // Clamp pads with ergonomic curve\n    translate([-50, 20, 0])\n        scale([1, 0.3, 1])\n            sphere(d=20, $fn=32);\n    translate([50, 20, 0])\n        scale([1, 0.3, 1])\n            sphere(d=20, $fn=32);\n}\n\nmodule mesh_surface() {\n    // Flexible mesh backing for comfort\n    difference() {\n        // Mesh backing plate\n        translate([0, 5, 0])\n            scale([0.9, 0.1, 0.9])\n                sphere(d=100, $fn=32);\n        \n        // Hexagonal perforations for breathability\n        for(x=[-40:15:40]) {\n            for(y=[-40:15:40]) {\n                translate([x, 6, y])\n                    cylinder(h=3, d=8, $fn=6);\n            }\n        }\n    }\n}\n\nmodule reinforcement_rings() {\n    // Inner and outer reinforcement rings\n    translate([0, 0, 60])\n        difference() {\n            cylinder(h=2, d1=104, d2=104, $fn=32);\n            cylinder(h=3, d1=100, d2=100, $fn=32);\n        }\n    \n    translate([0, 0, -60])\n        difference() {\n            cylinder(h=2, d1=104, d2=104, $fn=32);\n            cylinder(h=3, d1=100, d2=100, $fn=32);\n        }\n}\n\n// Assembly\nunion() {\n    hoop_frame();\n    support_spokes();\n    clamp_assembly();\n    mesh_surface();\n    reinforcement_rings();\n}",
    "renders": true
  },
  {
    "office_supply": "backboard",
    "openscad_code": "// Backboard Furniture - Medium Complexity Office Supply\n// Realistic style, 3D printable, 2mm walls, no overhangs\n\n// Overall dimensions\noverall_width = 120;\noverall_height = 80;\noverall_depth = 15;\n\n// Wall thickness\nwall = 2;\n\n// Main backboard frame\nmodule backboard_frame() {\n    difference() {\n        // Outer frame\n        cube([overall_width, overall_height, overall_depth]);\n        \n        // Hollow center\n        translate([wall, wall, wall])\n        cube([overall_width-2*wall, overall_height-2*wall, overall_depth]);\n    }\n}\n\n// Mounting rail with keyholes\nmodule mounting_rail() {\n    // Top mounting rail\n    translate([10, overall_height-wall, wall])\n    cube([overall_width-20, wall, overall_depth-wall]);\n    \n    // Keyhole slots for wall mounting\n    for (x = [30, 60, 90]) {\n        translate([x, overall_height-wall-1, overall_depth-wall/2])\n        cylinder(h=wall+1, r1=3, r2=3, $fn=16);\n        \n        translate([x-2, overall_height-wall-1, overall_depth-wall/2])\n        cube([4, wall+1, 2]);\n    }\n}\n\n// Document ledge\nmodule document_ledge() {\n    // Main ledge\n    translate([wall, wall, 0])\n    cube([overall_width-2*wall, 8, 5]);\n    \n    // Ledge support triangles\n    for (x = [20:40:overall_width-40]) {\n        translate([x, wall, 0])\n        rotate([90, 0, 0])\n        linear_extrude(height=2)\n        polygon(points=[[0,0],[8,0],[0,5]]);\n    }\n}\n\n// Pen tray\nmodule pen_tray() {\n    // Tray base\n    translate([10, 15, 0])\n    cube([40, 10, 8]);\n    \n    // Tray hollow\n    translate([12, 17, 2])\n    cube([36, 6, 6]);\n    \n    // Pen dividers\n    for (i = [1:3]) {\n        translate([10+i*10, 17, 2])\n        cube([1, 6, 6]);\n    }\n}\n\n// Business card holder\nmodule card_holder() {\n    // Card slot\n    translate([overall_width-50, 15, 0])\n    cube([35, 10, 8]);\n    \n    // Card slot hollow\n    translate([overall_width-48, 17, 2])\n    cube([31, 6, 4]);\n}\n\n// Magnetic strip backing\nmodule magnetic_strip() {\n    // Strip base\n    translate([wall, overall_height-25, overall_depth-wall])\n    cube([overall_width-2*wall, 15, wall]);\n    \n    // Recess for magnet\n    translate([wall+2, overall_height-23, overall_depth-wall])\n    cube([overall_width-2*wall-4, 11, wall-1]);\n}\n\n// Cable management hooks\nmodule cable_hooks() {\n    for (y = [30:30:overall_height-40]) {\n        // Hook base\n        translate([0, y, overall_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=wall, r=3, $fn=16);\n        \n        // Hook arm\n        translate([0, y, overall_depth/2])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=wall, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    backboard_frame();\n    mounting_rail();\n    document_ledge();\n    pen_tray();\n    card_holder();\n    magnetic_strip();\n    cable_hooks();\n}",
    "renders": true
  },
  {
    "office_supply": "rim",
    "openscad_code": "// Realistic rim furniture item - office chair rim/caster ring\n// Medium complexity with proper proportions and furniture details\n\n// Main parameters\nrim_outer_diameter = 120;  // 120mm outer diameter\nrim_inner_diameter = 90;   // 90mm inner diameter\nrim_thickness = 8;         // 8mm thickness\nwall_thickness = 2;        // 2mm for 3D printing\ncaster_count = 5;          // 5 casters typical for office chair\ncaster_hole_diameter = 12; // 12mm caster mounting holes\nmounting_plate_size = 25;  // 25mm central mounting plate\n\n// Main rim structure\nmodule chair_rim() {\n    // Outer rim ring\n    difference() {\n        cylinder(h=rim_thickness, d=rim_outer_diameter, $fn=100);\n        cylinder(h=rim_thickness+0.1, d=rim_inner_diameter, $fn=100);\n    }\n    \n    // Reinforcement ribs between inner and outer\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n        translate([(rim_inner_diameter+rim_outer_diameter)/4, 0, 0])\n        cube([rim_outer_diameter/2-rim_inner_diameter/2-wall_thickness, wall_thickness, rim_thickness], center=true);\n    }\n}\n\n// Caster mounting brackets\nmodule caster_bracket() {\n    // Main bracket body\n    translate([0, rim_outer_diameter/2, rim_thickness/2])\n    rotate([90, 0, 0])\n    difference() {\n        // Bracket base\n        cylinder(h=15, d1=20, d2=16, $fn=6);\n        \n        // Mounting hole\n        cylinder(h=16, d=caster_hole_diameter, $fn=20);\n    }\n    \n    // Bracket support gusset\n    translate([0, rim_outer_diameter/2-7.5, rim_thickness/4])\n    rotate([90, 0, 0])\n    cube([10, 15, wall_thickness*2], center=true);\n}\n\n// Central mounting hub\nmodule mounting_hub() {\n    // Main hub cylinder\n    cylinder(h=rim_thickness+4, d=mounting_plate_size, $fn=50);\n    \n    // Hub top detail\n    translate([0, 0, rim_thickness+2])\n    cylinder(h=4, d=mounting_plate_size-4, $fn=50);\n    \n    // Mounting holes\n    for(a=[0:90:359]) {\n        rotate([0, 0, a])\n        translate([mounting_plate_size/2-5, 0, 0])\n        rotate([0, 0, 0])\n        cylinder(h=rim_thickness+8, d=4, $fn=10);\n    }\n}\n\n// Assembly\nunion() {\n    // Main rim\n    chair_rim();\n    \n    // Caster brackets around rim\n    for(i=[0:360/caster_count:359]) {\n        rotate([0, 0, i])\n        caster_bracket();\n    }\n    \n    // Central mounting hub\n    translate([0, 0, -2])\n    mounting_hub();\n    \n    // Rim edge detail - slight chamfer\n    translate([0, 0, -0.5])\n    cylinder(h=1, d1=rim_outer_diameter+1, d2=rim_outer_diameter-1, $fn=100);\n    \n    translate([0, 0, rim_thickness-0.5])\n    cylinder(h=1, d1=rim_outer_diameter-1, d2=rim_outer_diameter+1, $fn=100);\n}",
    "renders": true
  },
  {
    "office_supply": "baseplate",
    "openscad_code": "// Office Monitor Baseplate - realistic style, 3D printable\n// Overall dimensions: 120 x 200 x 15 mm\n\n// Parameters\nplate_thickness = 15;\nplate_width = 120;\nplate_depth = 200;\nwall_thickness = 2;\nvent_hole_diameter = 8;\nvent_hole_spacing = 15;\nmount_post_diameter = 25;\nmount_post_height = 8;\nmount_hole_diameter = 5;\ncable_slot_width = 12;\ncable_slot_depth = 6;\nrubber_feet_diameter = 8;\nrubber_feet_height = 2;\n\nmodule main_plate(){\n    difference(){\n        // Main body\n        cube([plate_width, plate_depth, plate_thickness], center=true);\n        \n        // Central cavity for weight reduction\n        translate([0, 0, 0])\n            cube([plate_width-2*wall_thickness, plate_depth-2*wall_thickness, plate_thickness-wall_thickness], center=true);\n    }\n}\n\nmodule ventilation_holes(){\n    for(x = [-plate_width/2+vent_hole_spacing : vent_hole_spacing : plate_width/2-vent_hole_spacing]){\n        for(y = [-plate_depth/2+vent_hole_spacing : vent_hole_spacing : plate_depth/2-vent_hole_spacing]){\n            // Skip center area for mount post\n            if(abs(x) > 30 || abs(y) > 30){\n                translate([x, y, 0])\n                    cylinder(d=vent_hole_diameter, h=plate_thickness, center=true);\n            }\n        }\n    }\n}\n\nmodule monitor_mount(){\n    union(){\n        // Mount post\n        translate([0, 0, plate_thickness/2-mount_post_height/2])\n            cylinder(d=mount_post_diameter, h=mount_post_height, center=true);\n        \n        // Mount hole\n        translate([0, 0, plate_thickness/2+mount_post_height/2])\n            cylinder(d=mount_hole_diameter, h=mount_post_height, center=true);\n    }\n}\n\nmodule cable_management(){\n    // Front cable slot\n    translate([0, plate_depth/2-cable_slot_depth/2, 0])\n    difference(){\n        cube([cable_slot_width, cable_slot_depth, plate_thickness], center=true);\n        translate([0, 0, plate_thickness/2-wall_thickness/2])\n            cube([cable_slot_width-wall_thickness, cable_slot_depth, plate_thickness-wall_thickness], center=true);\n    }\n    \n    // Rear cable slot (mirrored)\n    translate([0, -(plate_depth/2-cable_slot_depth/2), 0])\n    difference(){\n        cube([cable_slot_width, cable_slot_depth, plate_thickness], center=true);\n        translate([0, 0, plate_thickness/2-wall_thickness/2])\n            cube([cable_slot_width-wall_thickness, cable_slot_depth, plate_thickness-wall_thickness], center=true);\n    }\n}\n\nmodule rubber_feet(){\n    foot_positions = [\n        [-plate_width/2+15, -plate_depth/2+15],\n        [plate_width/2-15, -plate_depth/2+15],\n        [-plate_width/2+15, plate_depth/2-15],\n        [plate_width/2-15, plate_depth/2-15]\n    ];\n    \n    for(pos = foot_positions){\n        translate([pos[0], pos[1], -plate_thickness/2-rubber_feet_height/2])\n            cylinder(d=rubber_feet_diameter, h=rubber_feet_height, center=true);\n    }\n}\n\nmodule structural_ridges(){\n    // Longitudinal ridges\n    for(x = [-plate_width/2+30 : 30 : plate_width/2-30]){\n        translate([x, 0, -plate_thickness/2+wall_thickness/2])\n            cube([wall_thickness, plate_depth-40, wall_thickness], center=true);\n    }\n    \n    // Transverse ridges\n    for(y = [-plate_depth/2+40 : 40 : plate_depth/2-40]){\n        translate([0, y, -plate_thickness/2+wall_thickness/2])\n            cube([plate_width-40, wall_thickness, wall_thickness], center=true);\n    }\n}\n\n// Assembly\nunion(){\n    main_plate();\n    translate([0, 0, 0])\n        ventilation_holes();\n    monitor_mount();\n    cable_management();\n    rubber_feet();\n    structural_ridges();\n}",
    "renders": true
  },
  {
    "office_supply": "pitchersplate",
    "openscad_code": "// Pitcher's Plate - Office Desk Accessory\n// Realistic style with medium complexity\n// Dimensions: 120mm x 90mm x 15mm overall\n\n$fn = 32;\n\n// Main plate body with rounded edges\nmodule plate_base() {\n    difference() {\n        // Main body with filleted edges\n        minkowski() {\n            cube([116, 86, 11]);\n            cylinder(r=2, h=0.1);\n        }\n        \n        // Hollow center\n        translate([2, 2, 2])\n            cube([112, 82, 10]);\n    }\n}\n\n// Raised rim around edges\nmodule edge_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 11])\n            cube([120, 90, 4]);\n        \n        // Inner cutout\n        translate([2, 2, 11])\n            cube([116, 86, 4]);\n    }\n}\n\n// Pen/pencil grooves with 3 slots\nmodule pen_grooves() {\n    for(i = [0:1:2]) {\n        translate([10 + i*35, 60, 10])\n            rotate([0, 90, 0])\n                cylinder(h=80, r=4, $fn=16);\n    }\n}\n\n// Business card slot\nmodule card_slot() {\n    translate([85, 10, 10])\n        cube([25, 50, 2]);\n}\n\n// Phone stand support\nmodule phone_stand() {\n    difference() {\n        // Main support\n        translate([10, 10, 10])\n            cube([30, 40, 20]);\n        \n        // Phone slot (angled)\n        translate([12, 15, 25])\n            rotate([15, 0, 0])\n                cube([26, 30, 10]);\n    }\n}\n\n// Rubber feet positions\nmodule rubber_feet() {\n    for(x = [10, 110]) {\n        for(y = [10, 80]) {\n            translate([x, y, 0])\n                cylinder(h=2, r=3, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    plate_base();\n    edge_rim();\n    \n    difference() {\n        pen_grooves();\n        // Cut grooves into surface\n        translate([0, 0, 11])\n            cube([120, 90, 3]);\n    }\n    \n    card_slot();\n    phone_stand();\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "homeplate",
    "openscad_code": "// Homeplate Desk Organizer - Realistic Style\n// Medium complexity office furniture for pens, clips, phone\n\n$fn = 32;\n\n// Main dimensions (mm)\nplate_width = 120;\nplate_height = 90;\nplate_thickness = 8;\nwall_thickness = 2;\n\n// Calculate homeplate shape points\nmodule homeplate_outline() {\n    polygon([\n        [0, 0],                    // Bottom left\n        [plate_width, 0],          // Bottom right\n        [plate_width, plate_height - plate_width/2],  // Right side\n        [plate_width/2, plate_height],  // Top point\n        [0, plate_height - plate_width/2]   // Left side\n    ]);\n}\n\n// Main base with slight chamfer\nmodule base_plate() {\n    difference() {\n        // Main plate body\n        linear_extrude(height = plate_thickness, convexity = 10)\n            offset(r = 2)\n                homeplate_outline();\n        \n        // Top chamfer\n        translate([0, 0, plate_thickness - 1])\n            linear_extrude(height = 1, convexity = 10)\n                offset(r = -1)\n                    scale([0.98, 0.98])\n                        homeplate_outline();\n    }\n}\n\n// Raised edges for containment\nmodule containment_edges() {\n    height = 15;\n    \n    // Back wall\n    translate([wall_thickness, plate_height - plate_width/2 - wall_thickness, plate_thickness])\n        cube([plate_width - 2*wall_thickness, wall_thickness, height]);\n    \n    // Left wall\n    translate([0, wall_thickness, plate_thickness])\n        rotate([0, 0, atan((plate_height - plate_width/2)/(plate_width/2))])\n        cube([sqrt(pow(plate_width/2, 2) + pow(plate_height - plate_width/2, 2)) - wall_thickness, wall_thickness, height]);\n    \n    // Right wall (mirrored)\n    translate([plate_width, wall_thickness, plate_thickness])\n        rotate([0, 0, 180 - atan((plate_height - plate_width/2)/(plate_width/2))])\n        cube([sqrt(pow(plate_width/2, 2) + pow(plate_height - plate_width/2, 2)) - wall_thickness, wall_thickness, height]);\n}\n\n// Pen holder compartment\nmodule pen_holder() {\n    holder_width = 25;\n    holder_depth = 80;\n    \n    // Main holder\n    difference() {\n        translate([plate_width - holder_width - 5, 5, plate_thickness])\n            cube([holder_width, holder_depth, 60]);\n        \n        // Hollow out\n        translate([plate_width - holder_width - 4, 6, plate_thickness + 2])\n            cube([holder_width - 2*wall_thickness, holder_depth - 2*wall_thickness, 58]);\n        \n        // Rounded bottom\n        translate([plate_width - holder_width/2 - 5, holder_depth/2 + 5, plate_thickness - 1])\n            rotate([90, 0, 0])\n            cylinder(h = holder_width - 2*wall_thickness, r = (holder_width - 2*wall_thickness)/2);\n    }\n    \n    // Divider\n    translate([plate_width - holder_width/2 - 5 - 0.5, 5, plate_thickness + 2])\n        cube([wall_thickness, holder_depth - 10, 56]);\n}\n\n// Phone stand slot\nmodule phone_stand() {\n    slot_width = 12;\n    slot_depth = 8;\n    angle = 15;\n    \n    translate([plate_width/2 - 30, 10, plate_thickness])\n    difference() {\n        // Angled support\n        rotate([0, -angle, 0])\n        translate([0, 0, 0])\n        cube([slot_width*2, slot_depth*4, 25]);\n        \n        // Slot\n        translate([-slot_width, -1, 5])\n        cube([slot_width*2 + 2, slot_depth + 2, 20]);\n    }\n}\n\n// Small parts tray with compartments\nmodule small_parts_tray() {\n    tray_width = 40;\n    tray_depth = 30;\n    \n    difference() {\n        translate([5, plate_height - plate_width/2 - tray_depth - 5, plate_thickness])\n            cube([tray_width, tray_depth, 10]);\n        \n        // Hollow\n        translate([7, plate_height - plate_width/2 - tray_depth - 3, plate_thickness + 2])\n            cube([tray_width - 4, tray_depth - 4, 8]);\n        \n        // Dividers\n        for(i = [1:2]) {\n            translate([5 + i*tray_width/3, plate_height - plate_width/2 - tray_depth - 5, plate_thickness + 2])\n                cube([wall_thickness, tray_depth, 8]);\n        }\n    }\n}\n\n// Rubber feet positions\nmodule rubber_feet() {\n    foot_diameter = 6;\n    foot_height = 2;\n    \n    positions = [\n        [10, 10],\n        [plate_width - 10, 10],\n        [plate_width - 10, plate_height - 20],\n        [10, plate_height - 20]\n    ];\n    \n    for(pos = positions) {\n        translate([pos[0], pos[1], -foot_height])\n            cylinder(h = foot_height, d = foot_diameter);\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    containment_edges();\n    pen_holder();\n    phone_stand();\n    small_parts_tray();\n    rubber_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "pitchingrubber",
    "openscad_code": "// Pitching Rubber Furniture - Office Supply Organizer\n// Realistic style, medium complexity, 3D printable\n\n$fn = 50;\n\n// Main dimensions (scaled for desk use)\nrubber_length = 120;\nrubber_width = 60;\nrubber_height = 25;\nwall_thickness = 2;\n\n// Base rubber block module\nmodule rubber_base() {\n    difference() {\n        // Main rubber block\n        cube([rubber_length, rubber_width, rubber_height], center = true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, -wall_thickness/2])\n            cube([rubber_length - 2*wall_thickness, \n                  rubber_width - 2*wall_thickness, \n                  rubber_height + 1], center = true);\n    }\n}\n\n// Top surface texture - grip pattern\nmodule grip_pattern() {\n    pattern_width = 3;\n    pattern_depth = 1;\n    spacing = 8;\n    \n    for (x = [-rubber_length/2 + spacing : spacing : rubber_length/2 - spacing]) {\n        translate([x, 0, rubber_height/2 - pattern_depth/2])\n            cube([pattern_width, rubber_width - 10, pattern_depth], center = true);\n    }\n}\n\n// Side mounting holes for attachment\nmodule mounting_holes() {\n    hole_diameter = 6;\n    hole_depth = wall_thickness + 2;\n    \n    // Left side holes\n    for (y = [-rubber_width/4, rubber_width/4]) {\n        translate([-rubber_length/2 - 1, y, 0])\n            rotate([0, 90, 0])\n                cylinder(h = hole_depth, d = hole_diameter, center = true);\n    }\n    \n    // Right side holes\n    for (y = [-rubber_width/4, rubber_width/4]) {\n        translate([rubber_length/2 + 1, y, 0])\n            rotate([0, 90, 0])\n                cylinder(h = hole_depth, d = hole_diameter, center = true);\n    }\n}\n\n// Front edge chamfer for ergonomic use\nmodule front_chamfer() {\n    translate([-rubber_length/2, 0, -rubber_height/2])\n        cube([10, rubber_width, rubber_height/2], center = false);\n    \n    translate([-rubber_length/2 + 10, 0, -rubber_height/2 + 5])\n        rotate([0, 0, -45])\n            cube([15, rubber_width + 2, 15], center = false);\n}\n\n// Pen/pencil holder slots on top\nmodule pen_slots() {\n    slot_width = 12;\n    slot_depth = 8;\n    slot_spacing = 15;\n    \n    for (x = [-rubber_length/2 + 20 : slot_spacing : rubber_length/2 - 20]) {\n        translate([x, rubber_width/4, rubber_height/2 - slot_depth/2])\n            cube([slot_width, slot_width, slot_depth], center = true);\n    }\n}\n\n// Reinforcement ribs inside hollow section\nmodule reinforcement_ribs() {\n    rib_thickness = 2;\n    rib_height = rubber_height - 2*wall_thickness;\n    \n    // Longitudinal ribs\n    for (x = [-rubber_length/2 + 20 : 20 : rubber_length/2 - 20]) {\n        translate([x, 0, 0])\n            cube([rib_thickness, rubber_width - 2*wall_thickness, rib_height], center = true);\n    }\n    \n    // Transverse ribs\n    for (y = [-rubber_width/2 + 15 : 15 : rubber_width/2 - 15]) {\n        translate([0, y, 0])\n            cube([rubber_length - 2*wall_thickness, rib_thickness, rib_height], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main rubber base\n    rubber_base();\n    \n    // Internal reinforcement\n    %reinforcement_ribs();\n    \n    // External features\n    grip_pattern();\n    front_chamfer();\n    \n    // Functional elements\n    pen_slots();\n    \n    // Mounting system\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "office_supply": "batterscircle",
    "openscad_code": "// Batterscircle (Battery Storage Circle) - Office Desk Organizer\n// Realistic style, medium complexity\n// Overall dimensions: 120mm diameter, 80mm height\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main base cylinder\nmodule base() {\n    difference() {\n        cylinder(h=10, r=60, $fn=100);  // Base disk\n        \n        // Hollow out center\n        translate([0, 0, -1])\n            cylinder(h=12, r=58, $fn=100);\n    }\n}\n\n// Battery slots - designed for AA batteries\nmodule battery_slot(pos_x, pos_y, angle) {\n    translate([pos_x, pos_y, 10]) {\n        rotate([0, 0, angle]) {\n            // Outer wall\n            difference() {\n                cylinder(h=65, r=8.5, $fn=32);\n                translate([0, 0, -1])\n                    cylinder(h=67, r=6.5, $fn=32);\n            }\n            \n            // Bottom support ring\n            translate([0, 0, 0])\n                cylinder(h=3, r=7.5, $fn=32);\n                \n            // Top rim for strength\n            translate([0, 0, 62])\n                cylinder(h=3, r=8.5, $fn=32);\n        }\n    }\n}\n\n// Central support column\nmodule central_column() {\n    difference() {\n        cylinder(h=75, r=15, $fn=64);  // Main column\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=77, r=13, $fn=64);\n            \n        // Cable routing hole\n        translate([0, 75, 0])\n            rotate([90, 0, 0])\n                cylinder(h=30, r=5, $fn=32);\n    }\n}\n\n// Structural ribs between slots\nmodule rib(start_angle, end_angle) {\n    rotate([0, 0, start_angle]) {\n        translate([45, 0, 10]) {\n            rotate([0, 0, (end_angle - start_angle)/2]) {\n                difference() {\n                    cube([20, 3, 65]);\n                    translate([1, -1, -1])\n                        cube([18, 5, 67]);\n                }\n            }\n        }\n    }\n}\n\n// Rubber feet\nmodule foot(pos_x, pos_y) {\n    translate([pos_x, pos_y, 0]) {\n        cylinder(h=3, r=4, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Central support\n    central_column();\n    \n    // Generate 8 battery slots in circle\n    for(i = [0:7]) {\n        angle = i * 45;\n        x = 45 * cos(angle);\n        y = 45 * sin(angle);\n        battery_slot(x, y, angle);\n    }\n    \n    // Structural ribs\n    for(i = [0:7]) {\n        start = i * 45 + 22.5;\n        end = (i + 1) * 45 + 22.5;\n        rib(start, end);\n    }\n    \n    // Rubber feet\n    for(i = [0:3]) {\n        angle = i * 90 + 45;\n        x = 50 * cos(angle);\n        y = 50 * sin(angle);\n        foot(x, y);\n    }\n    \n    // Label holder\n    translate([0, -55, 70]) {\n        difference() {\n            cube([30, 2, 8]);\n            translate([1, -1, 1])\n                cube([28, 4, 6]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "ondeckcircle",
    "openscad_code": "// OnDeckCircle office furniture - realistic style, medium complexity\n// Represents a circular side table with magazine storage\n// Overall height 75mm, diameter 100mm\n\n$fn=32; // Smooth curves for printing\n\n// Main tabletop - circular with slight edge lip\nmodule tabletop() {\n    difference() {\n        // Main top surface\n        cylinder(h=5, d=100);\n        \n        // Recessed center area\n        translate([0,0,3])\n            cylinder(h=3, d=90);\n        \n        // Edge chamfer\n        translate([0,0,-0.1])\n            cylinder(h=5.2, d1=100, d2=96);\n    }\n}\n\n// Central support column - hollow for weight reduction\nmodule support() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=60, d=40);\n        \n        // Inner hollow\n        translate([0,0,2])\n            cylinder(h=56, d=36);\n        \n        // Base flare\n        translate([0,0,-0.1])\n            cylinder(h=10, d1=50, d2=40);\n    }\n}\n\n// Magazine storage ring - suspended between legs\nmodule magazine_ring() {\n    difference() {\n        // Outer ring\n        translate([0,0,15])\n            cylinder(h=25, d=90);\n        \n        // Inner cutout\n        translate([0,0,15.2])\n            cylinder(h=25.4, d=80);\n        \n        // Access cutouts - three openings\n        for(i=[0:120:240]) {\n            rotate([0,0,i])\n                translate([35,0,15])\n                    cube([30,20,25], center=true);\n        }\n    }\n}\n\n// Base plate for stability\nmodule base() {\n    difference() {\n        // Main base\n        cylinder(h=5, d=120);\n        \n        // Recessed bottom\n        translate([0,0,0.2])\n            cylinder(h=5, d=110);\n        \n        // Grip ring\n        translate([0,0,1])\n            cylinder(h=3, d1=120, d2=118);\n    }\n}\n\n// Support legs - three curved legs for stability\nmodule legs() {\n    for(i=[0:120:240]) {\n        rotate([0,0,i])\n            translate([0,-15,5]) {\n                // Main leg\n                rotate([0,90,0])\n                    cylinder(h=30, d=8);\n                \n                // Leg brace\n                translate([15,0,30])\n                    rotate([45,0,0])\n                        cylinder(h=20, d=6);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Support structure\n    translate([0,0,5])\n        support();\n    \n    // Legs for additional support\n    legs();\n    \n    // Magazine storage\n    magazine_ring();\n    \n    // Tabletop\n    translate([0,0,65])\n        tabletop();\n}\n\n// Detail - center cap\ntranslate([0,0,70])\n    cylinder(h=2, d=20);",
    "renders": true
  },
  {
    "office_supply": "battingtee",
    "openscad_code": "// Batting Tee Furniture Item - Realistic Style\n// Overall dimensions: ~120mm height, 70mm base diameter\n\n// Base module with furniture-style weighted bottom\nmodule base() {\n    // Main weighted base - furniture style with rounded edges\n    difference() {\n        // Outer cylinder base\n        cylinder(h=20, d=70, $fn=60);\n        \n        // Recessed bottom for weight distribution\n        translate([0, 0, -1])\n            cylinder(h=5, d=60, $fn=60);\n        \n        // Center hole for upright post\n        translate([0, 0, -1])\n            cylinder(h=22, d=12, $fn=30);\n    }\n    \n    // Decorative ring detail around base\n    translate([0, 0, 18])\n        difference() {\n            cylinder(h=4, d=76, $fn=60);\n            cylinder(h=5, d=70, $fn=60);\n        }\n    \n    // Four stabilizing feet\n    for(i=[0:90:359]) {\n        rotate([0, 0, i])\n            translate([28, 0, 0])\n                cube([12, 8, 3], center=true);\n    }\n}\n\n// Adjustable height post with furniture-style collar\nmodule post() {\n    // Main post tube\n    difference() {\n        cylinder(h=85, d=12, $fn=30);\n        translate([0, 0, -1])\n            cylinder(h=87, d=8, $fn=30);\n    }\n    \n    // Height adjustment collar with grip texture\n    translate([0, 0, 40])\n        difference() {\n            cylinder(h=15, d=18, $fn=30);\n            cylinder(h=16, d=12.5, $fn=30);\n        }\n    \n    // Grip knurling pattern\n    for(i=[0:15:359]) {\n        rotate([0, 0, i])\n            translate([7.5, 0, 40])\n                cube([1.5, 2, 15], center=true);\n    }\n}\n\n// Ball holder with furniture-style joint\nmodule ball_holder() {\n    // Main cone holder with realistic proportions\n    difference() {\n        // Outer cone shape\n        cylinder(h1=25, h2=0, r1=15, r2=1, $fn=40);\n        \n        // Hollow center for ball positioning\n        translate([0, 0, -1])\n            cylinder(h1=27, h2=0, r1=12, r2=0.5, $fn=30);\n    }\n    \n    // Reinforcement ring at base\n    translate([0, 0, 0])\n        cylinder(h=3, d=32, $fn=40);\n    \n    // Connection joint to post\n    translate([0, 0, -8])\n        difference() {\n            cylinder(h=10, d=10, $fn=25);\n            translate([0, 0, -1])\n                cylinder(h=12, d=8, $fn=25);\n        }\n}\n\n// Assembly\nunion() {\n    // Weighted base\n    base();\n    \n    // Post assembly\n    translate([0, 0, 20])\n        post();\n    \n    // Ball holder on top\n    translate([0, 0, 105])\n        ball_holder();\n}",
    "renders": true
  },
  {
    "office_supply": "glove",
    "openscad_code": "// Glove-shaped ergonomic desk organizer\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main parameters\nwall_thickness = 2;\nglove_scale = 1.2;\noverall_width = 80;\noverall_height = 60;\noverall_depth = 40;\n\nmodule glove_body() {\n    // Palm base\n    translate([0, 0, 0]) \n        scale([1, 0.8, 0.6]) \n            sphere(d=overall_width * glove_scale);\n    \n    // Thumb\n    translate([-overall_width/3, -overall_depth/4, overall_height/4]) \n        rotate([0, 15, -30]) \n            scale([0.4, 1.2, 0.8]) \n                cylinder(h=overall_depth/2, d=overall_width/3.5);\n    \n    // Index finger\n    translate([overall_width/6, overall_depth/3, overall_height/2]) \n        rotate([0, 0, 10]) \n            scale([0.25, 1, 1]) \n                cylinder(h=overall_height/1.5, d=overall_width/6);\n    \n    // Middle finger\n    translate([overall_width/3, overall_depth/3.5, overall_height/2]) \n        rotate([0, 0, 5]) \n            scale([0.25, 1.1, 1]) \n                cylinder(h=overall_height/1.6, d=overall_width/6);\n    \n    // Ring finger\n    translate([overall_width/2, overall_depth/4, overall_height/2]) \n        rotate([0, 0, -5]) \n            scale([0.25, 1, 0.9]) \n                cylinder(h=overall_height/1.7, d=overall_width/6);\n    \n    // Pinky finger\n    translate([overall_width/1.6, overall_depth/5, overall_height/2.2]) \n        rotate([0, 0, -15]) \n            scale([0.2, 0.9, 0.8]) \n                cylinder(h=overall_height/1.8, d=overall_width/7);\n}\n\nmodule hollow_interior() {\n    // Main cavity\n    translate([0, 0, wall_thickness]) \n        scale([0.8, 0.6, 0.5]) \n            sphere(d=overall_width * glove_scale - wall_thickness * 2);\n    \n    // Thumb cavity\n    translate([-overall_width/3, -overall_depth/4, overall_height/4 + wall_thickness]) \n        rotate([0, 15, -30]) \n            scale([0.3, 1, 0.7]) \n                cylinder(h=overall_depth/2 - wall_thickness, d=overall_width/4);\n    \n    // Finger cavities\n    for(i = [0:3]) {\n        translate([overall_width/6 + i*overall_width/8, overall_depth/3.5, overall_height/2 + wall_thickness]) \n            rotate([0, 0, 10 - i*8]) \n                scale([0.2, 0.9, 0.9]) \n                    cylinder(h=overall_height/1.6 - wall_thickness, d=overall_width/8);\n    }\n}\n\nmodule structural_base() {\n    // Bottom reinforcement ring\n    translate([0, 0, 0]) \n        difference() {\n            cylinder(h=wall_thickness*2, d=overall_width * 1.1);\n            cylinder(h=wall_thickness*2 + 1, d=overall_width * 0.9);\n        }\n    \n    // Support ribs\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle]) \n            translate([overall_width/3, 0, wall_thickness]) \n                cube([wall_thickness*2, overall_width/6, overall_height/4]);\n    }\n}\n\nmodule pen_holders() {\n    // Ergonomic pen slots along fingers\n    translate([overall_width/6, overall_depth/3 + 5, overall_height/1.5]) \n        rotate([90, 0, 0]) \n            cylinder(h=10, d=8, $fn=6);\n    \n    translate([overall_width/3, overall_depth/3.5 + 5, overall_height/1.6]) \n        rotate([90, 0, 0]) \n            cylinder(h=10, d=8, $fn=6);\n    \n    translate([overall_width/2, overall_depth/4 + 5, overall_height/1.7]) \n        rotate([90, 0, 0]) \n            cylinder(h=10, d=8, $fn=6);\n}\n\nmodule grip_texture() {\n    // Raised dots for grip\n    for(y = [-overall_depth/2:5:overall_depth/2]) {\n        for(x = [-overall_width/2:5:overall_width/2]) {\n            if(norm([x, y]) < overall_width/2.2) {\n                translate([x, y, overall_height/2]) \n                    sphere(d=2);\n            }\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        glove_body();\n        structural_base();\n        pen_holders();\n    }\n    \n    hollow_interior();\n}\n\n// Add grip texture on top\ntranslate([0, 0, wall_thickness]) \n    grip_texture();",
    "renders": true
  },
  {
    "office_supply": "mitt",
    "openscad_code": "// Mitt Furniture - Office Storage Mitt\n// A mitt-shaped wall-mounted organizer with furniture characteristics\n\n// Overall dimensions\nlength = 120;\nwidth = 70;\nheight = 80;\nwall_thickness = 2;\n\n// Main mitt body\nmodule mitt_body() {\n    // Palm base\n    translate([0, 0, wall_thickness]) \n        cube([length, width, height - wall_thickness * 2], center = true);\n    \n    // Thumb section\n    translate([length/2 - 15, width/2 + 15, wall_thickness]) \n        cube([30, 25, height - wall_thickness * 2], center = true);\n    \n    // Rounded top edge\n    translate([0, 0, height/2 + wall_thickness/2])\n        cube([length + 20, width + 20, wall_thickness], center = true);\n}\n\n// Finger dividers\nmodule fingers() {\n    for (i = [-2:2]) {\n        translate([i * 20 - 10, -width/4, wall_thickness])\n            cube([wall_thickness * 2, width/2, height - wall_thickness * 2]);\n    }\n}\n\n// Mounting bracket structure\nmodule mounting_bracket() {\n    // Back plate\n    translate([0, 0, 0]) \n        cube([length + 20, wall_thickness, height], center = true);\n    \n    // Support ribs\n    for (i = [-1:1]) {\n        translate([i * 30, wall_thickness/2, 0])\n            cube([wall_thickness * 3, 5, height - 10], center = true);\n    }\n}\n\n// Holes for wall mounting\nmodule mounting_holes() {\n    // Top holes\n    for (i = [-1:1]) {\n        translate([i * 25, 0, height/2 - 10])\n            rotate([90, 0, 0])\n                cylinder(h = wall_thickness + 2, r = 2.5, center = true);\n    }\n    \n    // Bottom holes\n    for (i = [-1:1]) {\n        translate([i * 25, 0, -height/2 + 10])\n            rotate([90, 0, 0])\n                cylinder(h = wall_thickness + 2, r = 2.5, center = true);\n    }\n}\n\n// Ergonomic front lip\nmodule front_lip() {\n    translate([0, width/2 - wall_thickness, height/2 - 10])\n        cube([length - 20, wall_thickness * 2, 20], center = true);\n}\n\n// Assembly\nunion() {\n    // Main body structure\n    difference() {\n        union() {\n            mitt_body();\n            mounting_bracket();\n            fingers();\n            front_lip();\n        }\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness])\n            cube([length - wall_thickness * 2, width - wall_thickness * 2, height - wall_thickness * 2], center = true);\n        \n        // Mounting holes\n        mounting_holes();\n    }\n    \n    // Reinforcement corners\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * length/2, y * width/2, 0])\n                cylinder(h = wall_thickness * 2, r = 5, center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "cleats",
    "openscad_code": "// Cleats furniture item - realistic style, medium complexity\n// 3D printable office furniture cleat for cable management\n// Overall dimensions: 120mm x 40mm x 30mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main base plate with mounting holes\nmodule base_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, wall/2])\n            cube([120, 40, wall], center=true);\n        \n        // Mounting holes - 4 holes for M4 screws\n        for(x = [-45, 45])\n            for(y = [-15, 15])\n                translate([x, y, 0])\n                    cylinder(h=wall+1, r=2.2, center=true, $fn=20);\n    }\n}\n\n// Cable routing channel\nmodule cable_channel() {\n    difference() {\n        // Main channel body\n        translate([-10, 0, wall + 15])\n            cube([100, 30, 30], center=true);\n        \n        // Internal cable space\n        translate([-10, 0, wall + 15])\n            cube([94, 24, 26], center=true);\n        \n        // Entry slot on top\n        translate([-10, 0, wall + 30])\n            cube([90, 10, wall], center=true);\n    }\n}\n\n// Support ribs for strength\nmodule support_ribs() {\n    for(x = [-30, 0, 30]) {\n        translate([x, 0, wall/2 + 15])\n            cube([wall, 38, 30], center=true);\n    }\n}\n\n// Cable retention tabs\nmodule retention_tabs() {\n    // Left tab\n    translate([-55, 0, wall + 15])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=12, r=4, center=true, $fn=20);\n                translate([0, 0, -6])\n                    cube([20, 8, 12], center=true);\n            }\n    \n    // Right tab\n    translate([55, 0, wall + 15])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=12, r=4, center=true, $fn=20);\n                translate([0, 0, -6])\n                    cube([20, 8, 12], center=true);\n            }\n}\n\n// Chamfered edges for comfort\nmodule chamfers() {\n    // Front edge chamfer\n    translate([0, 19, wall + 15])\n        rotate([90, 0, 0])\n            cylinder(h=120, r1=2, r2=0, center=false, $fn=20);\n    \n    // Back edge chamfer\n    translate([0, -19, wall + 15])\n        rotate([-90, 0, 0])\n            cylinder(h=120, r1=2, r2=0, center=false, $fn=20);\n}\n\n// Assembly\nunion() {\n    base_plate();\n    cable_channel();\n    support_ribs();\n    retention_tabs();\n    chamfers();\n}",
    "renders": true
  },
  {
    "office_supply": "spikes",
    "openscad_code": "// Spikes Desk Organizer - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 80mm x 45mm\n\n// Base parameters\nbase_width = 120;\nbase_depth = 80;\nbase_thickness = 4;\nwall_thickness = 2;\n\n// Spike parameters\nspike_height = 35;\nspike_diameter = 10;\nspike_spacing = 20;\nspike_taper = 0.3;\n\n// Pen holes\npen_hole_diameter = 8;\npen_hole_depth = 30;\npen_hole_count = 3;\n\n// Paper slot\npaper_slot_width = 110;\npaper_slot_depth = 3;\npaper_slot_height = 20;\n\n// Main base module\nmodule base_platform() {\n    difference() {\n        // Solid base\n        cube([base_width, base_depth, base_thickness], center=false);\n        \n        // Rounded corners\n        translate([wall_thickness, wall_thickness, -1])\n            cube([base_width-wall_thickness*2, base_depth-wall_thickness*2, base_thickness+2]);\n        translate([wall_thickness+5, wall_thickness+5, -1])\n            cube([base_width-wall_thickness*2-10, base_depth-wall_thickness*2-10, base_thickness+2]);\n    }\n}\n\n// Spike module with realistic taper\nmodule spike(x, y) {\n    translate([x, y, base_thickness]) {\n        // Main spike body\n        cylinder(h=spike_height, d1=spike_diameter, d2=spike_diameter*spike_taper, $fn=16);\n        \n        // Reinforcement ring at base\n        translate([0, 0, 0])\n            cylinder(h=2, d=spike_diameter+2, $fn=16);\n    }\n}\n\n// Pen holder section\nmodule pen_holder() {\n    translate([base_width-30, 10, 0]) {\n        difference() {\n            // Holder block\n            cube([25, 60, base_thickness+pen_hole_depth]);\n            \n            // Pen holes\n            for(i = [0:pen_hole_count-1]) {\n                translate([12.5, 10 + i*20, base_thickness+2])\n                    rotate([90, 0, 0])\n                    cylinder(h=pen_hole_depth, d=pen_hole_diameter, $fn=32);\n            }\n            \n            // Rounded top edges\n            translate([0, 0, base_thickness+pen_hole_depth-2])\n                cube([25, 60, 2]);\n        }\n    }\n}\n\n// Paper slot module\nmodule paper_slot() {\n    translate([(base_width-paper_slot_width)/2, base_depth-15, base_thickness]) {\n        difference() {\n            // Slot body\n            cube([paper_slot_width, 10, paper_slot_height]);\n            \n            // Slot opening\n            translate([5, 5, 5])\n                cube([paper_slot_width-10, paper_slot_depth, paper_slot_height-10]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base platform\n    base_platform();\n    \n    // Spikes grid (realistic spacing for office use)\n    for(x = [20:spike_spacing:base_width-20]) {\n        for(y = [20:spike_spacing:base_depth-20]) {\n            if(!(x > base_width-40 && y < 70))  // Avoid pen holder area\n                spike(x, y);\n        }\n    }\n    \n    // Pen holder\n    pen_holder();\n    \n    // Paper slot\n    paper_slot();\n    \n    // Support ribs underneath\n    translate([base_width/2, -1, -3])\n        cube([base_width-10, base_thickness+2, 3]);\n    translate([-1, base_depth/2, -3])\n        cube([base_thickness+2, base_depth-10, 3]);\n}",
    "renders": true
  },
  {
    "office_supply": "shin",
    "openscad_code": "// Shin furniture - Office desk leg support (realistic style)\n// Overall height 120mm, width 60mm, depth 50mm\n\n$fn = 30;  // Smooth curves for printing\n\nmodule leg_post(radius, height) {\n    // Main vertical post with slight taper\n    cylinder(h = height, r1 = radius, r2 = radius * 0.9);\n}\n\nmodule foot_base() {\n    // Wide foot for stability\n    difference() {\n        translate([0, 0, 1]) {\n            cylinder(h = 8, r = 25);\n        }\n        \n        // Cavity for weight reduction\n        translate([0, 0, 2]) {\n            cylinder(h = 6, r = 20);\n        }\n    }\n    \n    // Rubber pad details\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([15, 0, 0.5]) {\n                cube([8, 6, 1]);\n            }\n        }\n    }\n}\n\nmodule support_brace() {\n    // Diagonal brace for structural support\n    rotate([0, 0, 30]) {\n        translate([-10, -15, 20]) {\n            cube([40, 4, 3]);\n        }\n    }\n    \n    // Second brace perpendicular\n    rotate([0, 0, -30]) {\n        translate([-10, 11, 50]) {\n            cube([40, 4, 3]);\n        }\n    }\n}\n\nmodule joint_connector() {\n    // Connection joint at top\n    difference() {\n        translate([0, 0, 120]) {\n            cylinder(h = 15, r = 30);\n        }\n        \n        // Mounting holes\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([20, 0, 7.5]) {\n                    cylinder(h = 15, r = 3);\n                }\n            }\n        }\n    }\n    \n    // Flange detail\n    translate([0, 0, 115]) {\n        cylinder(h = 5, r = 35);\n    }\n}\n\nmodule cable_management() {\n    // Cable management hook\n    translate([15, 0, 80]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 20, r = 6);\n                translate([0, 0, -1]) {\n                    cylinder(h = 22, r = 4);\n                }\n            }\n        }\n    }\n}\n\nmodule height_adjust_holes() {\n    // Height adjustment holes every 20mm\n    for(h = [30:20:100]) {\n        translate([0, 30, h]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 60, r = 3);\n            }\n        }\n    }\n}\n\nmodule surface_texture() {\n    // Realistic surface texture - small grooves\n    for(h = [5:10:115]) {\n        translate([0, 0, h]) {\n            cylinder(h = 0.5, r = 28);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base foot\n    foot_base();\n    \n    // Main leg post\n    translate([0, 0, 8]) {\n        leg_post(radius = 28, height = 112);\n    }\n    \n    // Joint at top\n    joint_connector();\n    \n    // Structural braces\n    support_brace();\n    \n    // Cable management\n    cable_management();\n    \n    // Height adjustment system\n    height_adjust_holes();\n    \n    // Surface details\n    surface_texture();\n}",
    "renders": true
  },
  {
    "office_supply": "guard",
    "openscad_code": "// Guard (chair with back support and armrests)\n// Overall footprint: ~100mm x ~110mm x ~120mm (W x D x H)\n\n// Parameters\nleg_th = 2.5;\nseat_th = 3;\nback_th = 2.5;\narm_th = 2.5;\npost_r = 3;\nscale_factor = 1;\n\n// Chair module\nmodule chair() {\n    // Seat\n    translate([0, 0, 40])\n        cube([100, 100, seat_th], center = true);\n\n    // Backrest frame\n    difference() {\n        translate([-45, 25, 80])\n            cube([90, back_th, 80], center = true);\n        translate([-45, 25, 80])\n            cube([80, back_th + 0.1, 70], center = true);\n    }\n\n    // Backrest slats (vertical)\n    for (x = [-30:15:30]) {\n        translate([x, 25, 80])\n            cube([8, back_th, 70], center = true);\n    }\n\n    // Legs\n    leg_pos = [[-40, -40], [40, -40], [-40, 40], [40, 40]];\n    for (pos = leg_pos) {\n        translate([pos.x, pos.y, 20])\n            cylinder(h = 40, r = leg_th, $fn = 20);\n    }\n\n    // Armrest supports\n    arm_support = [[-45, -10], [45, -10]];\n    for (pos = arm_support) {\n        translate([pos.x, pos.y, 60])\n            cylinder(h = 20, r = post_r, $fn = 20);\n    }\n\n    // Armrests\n    armrest = [[-45, -10, 70], [45, -10, 70]];\n    for (pos = armrest) {\n        translate([pos.x, pos.y, pos.z])\n            rotate([90, 0, 0])\n                cylinder(h = 60, r = arm_th, $fn = 20);\n    }\n\n    // Horizontal stretchers\n    stretch_y = [[-40, -40, 10], [40, -40, 10]];\n    for (pos = stretch_y) {\n        translate([pos.x, pos.y, pos.z])\n            rotate([90, 0, 90])\n                cylinder(h = 80, r = leg_th, $fn = 20);\n    }\n\n    stretch_x = [[-40, -40, 10], [-40, 40, 10]];\n    for (pos = stretch_x) {\n        translate([pos.x, pos.y, pos.z])\n            rotate([90, 0, 0])\n                cylinder(h = 80, r = leg_th, $fn = 20);\n    }\n}\n\n// Scale and render\nscale([scale_factor, scale_factor, scale_factor])\n    chair();",
    "renders": true
  },
  {
    "office_supply": "helmet",
    "openscad_code": "// Helmet Furniture Item - Realistic Style\n// Office desk helmet organizer for pens, phone, and small items\n\n// Dimensions in mm\nhelmet_width = 80;\nhelmet_depth = 90;\nhelmet_height = 100;\nwall_thickness = 2;\n\nmodule helmet_base() {\n    // Main helmet shell\n    difference() {\n        // Outer shell\n        union() {\n            // Top dome\n            translate([0, 0, helmet_height - 30])\n                scale([1, 1.1, 0.8])\n                sphere(d=helmet_width);\n            \n            // Lower cylinder\n            cylinder(h=helmet_height - 30, d=helmet_width, $fn=64);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=helmet_height + 2, d=helmet_width - 2*wall_thickness, $fn=64);\n        \n        // Face opening\n        translate([0, helmet_depth/2 - 20, helmet_height/2])\n            rotate([0, 20, 0])\n            cube([helmet_width/2, 50, 40], center=true);\n    }\n}\n\nmodule visor() {\n    // Flip-up visor\n    translate([0, -helmet_width/2 + 10, helmet_height - 30])\n        rotate([60, 0, 0])\n        difference() {\n            // Visor body\n            scale([1.1, 0.3, 0.1])\n                sphere(d=helmet_width);\n            \n            // Cutout for visibility\n            scale([0.8, 1, 1])\n                sphere(d=helmet_width - 10);\n        }\n}\n\nmodule ventilation_holes() {\n    // Ventilation slots on top\n    for(i = [-30:20:30]) {\n        for(j = [-20:20:20]) {\n            translate([i, j, helmet_height - 25])\n                rotate([0, 90, 0])\n                cylinder(h=10, d=3);\n        }\n    }\n}\n\nmodule chin_strap_mounts() {\n    // Left mount\n    translate([-helmet_width/2 + 5, 0, helmet_height/2 - 20])\n        cube([wall_thickness*2, 8, 15]);\n    \n    // Right mount\n    translate([helmet_width/2 - 5, 0, helmet_height/2 - 20])\n        cube([wall_thickness*2, 8, 15]);\n}\n\nmodule internal_divider() {\n    // Divider for organizing compartments\n    translate([0, -10, 20])\n        cube([helmet_width - 2*wall_thickness - 10, wall_thickness, helmet_height/2]);\n    \n    // Pen holder holes\n    for(i = [-20:10:20]) {\n        translate([i, -8, 40])\n            cylinder(h=30, d=8);\n    }\n}\n\nmodule phone_stand() {\n    // Front slot for phone\n    translate([0, helmet_depth/2 - 25, 15])\n        cube([helmet_width/2, wall_thickness*3, 25]);\n    \n    // Phone back support\n    translate([0, helmet_depth/2 - 35, 35])\n        cube([helmet_width/2 - 10, 5, 15]);\n}\n\n// Assembly\nunion() {\n    helmet_base();\n    visor();\n    ventilation_holes();\n    chin_strap_mounts();\n    internal_divider();\n    phone_stand();\n}",
    "renders": true
  },
  {
    "office_supply": "mask",
    "openscad_code": "// Office Mask Furniture - Wall-Mounted Decorative Mask with Storage\n// Realistic style, medium complexity\n// Overall dimensions: 120mm wide x 80mm deep x 150mm tall\n\n// Parameters for wall thickness and printability\nwall = 2;\ndetail = 0.5;\n\n// Main mask body\nmodule mask_body() {\n    // Central face structure\n    difference() {\n        // Main face shell\n        scale([1, 0.9, 1.2])\n        sphere(d=100, $fn=50);\n        \n        // Hollow out back\n        translate([0, 0, -wall])\n        scale([0.85, 0.75, 1.05])\n        sphere(d=100, $fn=50);\n        \n        // Eye openings\n        translate([-25, 15, 20])\n        rotate([0, 15, 0])\n        scale([1, 0.7, 0.5])\n        cylinder(h=30, d1=15, d2=12, $fn=20);\n        \n        translate([25, 15, 20])\n        rotate([0, 15, 0])\n        scale([1, 0.7, 0.5])\n        cylinder(h=30, d1=15, d2=12, $fn=20);\n        \n        // Mouth opening\n        translate([0, -20, -25])\n        rotate([0, -10, 0])\n        scale([1.2, 0.8, 0.3])\n        cylinder(h=30, d1=30, d2=25, $fn=25);\n        \n        // Nose relief\n        translate([0, 5, 0])\n        rotate([0, 10, 0])\n        scale([0.8, 0.6, 0.8])\n        cylinder(h=15, d1=20, d2=15, $fn=20);\n    }\n}\n\n// Eyebrow ridges for structure\nmodule eyebrows() {\n    // Left eyebrow\n    translate([-30, 25, 25])\n    rotate([0, 15, -15])\n    scale([1, 0.5, 0.3])\n    cube([25, 8, 5], center=true);\n    \n    // Right eyebrow\n    translate([30, 25, 25])\n    rotate([0, 15, 15])\n    scale([1, 0.5, 0.3])\n    cube([25, 8, 5], center=true);\n}\n\n// Cheek bones for furniture joints\nmodule cheek_bones() {\n    // Left cheek storage compartment\n    difference() {\n        translate([-40, 0, -10])\n        rotate([0, 0, -20])\n        cube([20, 15, 30], center=true);\n        \n        // Hollow for storage\n        translate([-40, 0, -10])\n        rotate([0, 0, -20])\n        cube([16, 11, 26], center=true);\n    }\n    \n    // Right cheek storage compartment\n    difference() {\n        translate([40, 0, -10])\n        rotate([0, 0, 20])\n        cube([20, 15, 30], center=true);\n        \n        // Hollow for storage\n        translate([40, 0, -10])\n        rotate([0, 0, 20])\n        cube([16, 11, 26], center=true);\n    }\n}\n\n// Structural mounting frame\nmodule mounting_frame() {\n    // Top mounting bracket\n    difference() {\n        translate([0, -45, 30])\n        cube([80, wall, 40], center=true);\n        \n        // Screw holes\n        for(i = [-1:1]) {\n            translate([i * 25, -45, 30])\n            cylinder(h=wall+1, d=4, center=true, $fn=16);\n        }\n    }\n    \n    // Side support struts\n    for(x = [-35, 35]) {\n        translate([x, -40, -20])\n        rotate([0, 15, 0])\n        cube([wall, 15, 40], center=true);\n    }\n}\n\n// Decorative elements - geometric pattern\nmodule geometric_pattern() {\n    // Forehead pattern\n    for(i = [-2:2]) {\n        for(j = [-1:1]) {\n            if(abs(i) + abs(j) <= 2) {\n                translate([i * 12, j * 8, 40])\n                rotate([0, 0, 45])\n                cube([5, 5, wall], center=true);\n            }\n        }\n    }\n    \n    // Chin details\n    for(i = [-1:1]) {\n        translate([i * 15, -35, -35])\n        cylinder(h=wall, d=8, center=true, $fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Main mask structure\n    mask_body();\n    \n    // Structural elements\n    eyebrows();\n    cheek_bones();\n    \n    // Furniture mounting system\n    mounting_frame();\n    \n    // Decorative details\n    geometric_pattern();\n}",
    "renders": true
  },
  {
    "office_supply": "chest",
    "openscad_code": "// Realistic Medium-Complexity Storage Chest\n// External dimensions: 110 x 70 x 55 mm (L x W x H)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body outside\nmodule chest_body() {\n    difference() {\n        // Outer shell\n        cube([110, 70, 55], center = true);\n        // Hollow inside\n        translate([0, 0, wall])\n            cube([110 - 2*wall, 70 - 2*wall, 55 - wall], center = true);\n    }\n}\n\n// Top lid\nmodule lid() {\n    difference() {\n        // Lid top shell\n        translate([0, 0, 55/2 + 4])\n            cube([110, 70, 8], center = true);\n        // Inner recess\n        translate([0, 0, 55/2 + 4 + wall])\n            cube([110 - 2*wall, 70 - 2*wall, 8 - wall], center = true);\n    }\n    // Lid lip that overlaps body\n    difference() {\n        translate([0, 0, 55/2 + 4 - wall/2])\n            cube([110 - 2, 70 - 2, wall], center = true);\n        translate([0, 0, 55/2 + 4 - wall/2])\n            cube([110 - 2*wall - 2, 70 - 2*wall - 2, wall + 1], center = true);\n    }\n}\n\n// Hinge pins\nmodule hinges() {\n    for (x = [-45 + 10, 45 - 10]) {\n        // Left hinge\n        translate([x, -70/2 + 5, 55/2])\n            cylinder(h = 10, d = 4, $fn = 20);\n        // Right hinge\n        translate([x, 70/2 - 5, 55/2])\n            cylinder(h = 10, d = 4, $fn = 20);\n    }\n}\n\n// Front clasp\nmodule clasp() {\n    // Base plate\n    translate([0, 70/2 - 3, 0])\n        cube([20, 6, 8], center = true);\n    // Hook loop\n    difference() {\n        translate([0, 70/2 + 3, 0])\n            cube([12, 6, 8], center = true);\n        translate([0, 70/2 + 5, 0])\n            cube([8, 2, 6], center = true);\n    }\n}\n\n// Decorative corner reinforcements\nmodule corners() {\n    for (x = [-1, 1])\n    for (y = [-1, 1])\n    translate([x * (110/2 - 8), y * (70/2 - 8), -55/2 + 8])\n        difference() {\n            cube([16, 16, 16], center = true);\n            translate([0, 0, -1])\n                cube([12, 12, 18], center = true);\n        }\n}\n\n// Side handles (cutouts)\nmodule handles() {\n    for (y = [-1, 1]) {\n        translate([0, y * (70/2 - 2), 0])\n            difference() {\n                cube([110, 4, 55], center = true);\n                translate([0, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 40, d = 20, center = true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    chest_body();\n    lid();\n    hinges();\n    clasp();\n    corners();\n    handles();\n}",
    "renders": true
  },
  {
    "office_supply": "protector",
    "openscad_code": "// Office Desk Cable Management Protector\n// A realistic cable management box that sits on a desk to protect and organize cables\n// Overall size: 120mm x 80mm x 60mm\n\n$fn = 50;\n\n// Main dimensions\nbox_length = 120;\nbox_width = 80;\nbox_height = 60;\nwall_thickness = 2;\n\nmodule rounded_box(l, w, h, r) {\n    // Create a box with rounded edges for realistic appearance\n    offset = r - r/sqrt(2);\n    hull() {\n        for (i = [[0, 0, 0], [l, 0, 0], [l, w, 0], [0, w, 0],\n                 [0, 0, h], [l, 0, h], [l, w, h], [0, w, h]]) {\n            translate([i[0], i[1], i[2]]) {\n                sphere(r=r);\n            }\n        }\n    }\n}\n\nmodule cable_protector() {\n    // Main body\n    difference() {\n        rounded_box(box_length, box_width, box_height, 5);\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, wall_thickness]) {\n            rounded_box(box_length - 2*wall_thickness, \n                       box_width - 2*wall_thickness, \n                       box_height - wall_thickness, 3);\n        }\n    }\n    \n    // Cable entry slots (rounded for smooth cable protection)\n    module cable_slot(x_pos, y_pos, angle) {\n        translate([x_pos, y_pos, box_height/2]) {\n            rotate([0, 0, angle]) {\n                difference() {\n                    cylinder(h=wall_thickness + 1, r=15, center=true);\n                    translate([0, 0, -wall_thickness/2 - 0.5]) {\n                        cylinder(h=wall_thickness + 2, r=12, center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Three cable entry points\n    cable_slot(10, box_width/2, 0);\n    cable_slot(box_length - 10, box_width/2, 0);\n    cable_slot(box_length/2, 10, 90);\n    \n    // Ventilation holes for heat dissipation\n    module vent_hole(x_pos, y_pos) {\n        translate([x_pos, y_pos, box_height - wall_thickness]) {\n            cylinder(h=wall_thickness, r=3);\n        }\n    }\n    \n    // Grid of ventilation holes\n    for (x = [20:25:box_length-20]) {\n        for (y = [20:25:box_width-20]) {\n            vent_hole(x, y);\n        }\n    }\n    \n    // Rubber feet (anti-slip)\n    module rubber_foot(x_pos, y_pos) {\n        translate([x_pos, y_pos, 0]) {\n            cylinder(h=3, r=5);\n            translate([0, 0, 3]) {\n                sphere(r=5);\n            }\n        }\n    }\n    \n    // Four rubber feet at corners\n    rubber_foot(15, 15);\n    rubber_foot(box_length - 15, 15);\n    rubber_foot(15, box_width - 15);\n    rubber_foot(box_length - 15, box_width - 15);\n    \n    // Cable management dividers inside\n    module divider(x_pos) {\n        translate([x_pos, wall_thickness, wall_thickness]) {\n            cube([wall_thickness, box_width - 2*wall_thickness, box_height - 2*wall_thickness - 5]);\n        }\n    }\n    \n    // Two internal dividers for cable organization\n    divider(box_length/3);\n    divider(2*box_length/3);\n    \n    // Label holder on front\n    translate([box_length/2 - 15, box_width, box_height/2]) {\n        rotate([0, 45, 0]) {\n            difference() {\n                cube([30, 2, 10]);\n                translate([2, -0.5, 2]) {\n                    cube([26, 3, 6]);\n                }\n            }\n        }\n    }\n}\n\n// Generate the protector\ncable_protector();",
    "renders": true
  },
  {
    "office_supply": "cup",
    "openscad_code": "// Office Cup - A realistic desk organizer cup with furniture-style details\n// Overall dimensions: 80mm diameter x 100mm height\n\n$fn = 64;  // Smooth curves for realistic appearance\n\n// Main cup body - slightly tapered for furniture aesthetics\nmodule cup_body() {\n    difference() {\n        // Outer shell with gentle taper\n        cylinder(h1 = 95, h2 = 100, r1 = 40, r2 = 38);\n        \n        // Inner cavity - 2mm wall thickness\n        translate([0, 0, -1])\n            cylinder(h = 102, r = 36);\n    }\n}\n\n// Reinforced base - furniture-style support structure\nmodule reinforced_base() {\n    union() {\n        // Main base ring\n        difference() {\n            cylinder(h = 8, r = 42);\n            cylinder(h = 9, r = 38);\n        }\n        \n        // Support ribs - furniture structural elements\n        for (i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([-2, 38, 0])\n                    cube([4, 5, 8]);\n            }\n        }\n    }\n}\n\n// Ergonomic grip ring - mid-height for comfortable handling\nmodule grip_ring() {\n    translate([0, 0, 45])\n    difference() {\n        cylinder(h = 10, r = 41);\n        cylinder(h = 11, r = 39);\n    }\n}\n\n// Top rim reinforcement - prevents warping during printing\nmodule top_rim() {\n    translate([0, 0, 95])\n    difference() {\n        cylinder(h = 5, r = 39);\n        cylinder(h = 6, r = 36.5);\n    }\n}\n\n// Drainage channels - furniture-style integrated detail\nmodule drainage_grooves() {\n    for (i = [0:60:300]) {\n        rotate([0, 0, i]) {\n            translate([0, 30, 0])\n                cube([2, 8, 2]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main cup structure\n    cup_body();\n    \n    // Base reinforcement\n    reinforced_base();\n    \n    // Grip ring for ergonomic handling\n    grip_ring();\n    \n    // Top rim for durability\n    top_rim();\n    \n    // Drainage grooves in base\n    translate([0, 0, 0])\n        drainage_grooves();\n}",
    "renders": true
  },
  {
    "office_supply": "strap",
    "openscad_code": "// Office chair strap - realistic style with medium complexity\n// Dimensions: 120mm x 25mm x 8mm overall\n\n// Parameters\nstrap_width = 25;\nstrap_thickness = 2.5;\nstrap_length = 120;\nbuckle_width = 30;\nbuckle_thickness = 3;\ntooth_height = 1.5;\ntooth_spacing = 3;\nhole_diameter = 4;\nhole_spacing = 8;\n\n// Main strap body\nmodule strap_body() {\n    // Base strap\n    difference() {\n        union() {\n            // Main strap\n            translate([0, 0, strap_thickness/2])\n                cube([strap_length, strap_width, strap_thickness], center=true);\n            \n            // Reinforced end\n            translate([strap_length/2 - 10, 0, strap_thickness/2])\n                cube([20, strap_width + 4, strap_thickness], center=true);\n            \n            // Buckle mount\n            translate([-strap_length/2 + 15, 0, strap_thickness/2 + buckle_thickness/2])\n                cube([30, buckle_width, buckle_thickness], center=true);\n        }\n        \n        // Adjustment holes\n        for(i = [0:7]) {\n            translate([strap_length/2 - 20 - i*hole_spacing, 0, strap_thickness])\n                cylinder(h=strap_thickness+1, d=hole_diameter, center=true, $fn=16);\n        }\n        \n        // Buckle slot\n        translate([-strap_length/2 + 15, 0, strap_thickness/2 + buckle_thickness/2])\n            cube([25, 20, buckle_thickness+1], center=true);\n    }\n}\n\n// Buckle assembly\nmodule buckle() {\n    // Main buckle frame\n    difference() {\n        // Outer frame\n        translate([-strap_length/2 + 15, 0, strap_thickness + buckle_thickness/2])\n            cube([30, buckle_width, buckle_thickness], center=true);\n        \n        // Center bar\n        translate([-strap_length/2 + 15, 0, strap_thickness + buckle_thickness/2])\n            cube([8, buckle_width - 8, buckle_thickness+1], center=true);\n    }\n    \n    // Buckle teeth\n    for(i = [-1:1]) {\n        translate([-strap_length/2 + 15, i*tooth_spacing, strap_thickness + buckle_thickness + tooth_height/2])\n            cube([2, 1, tooth_height], center=true);\n    }\n}\n\n// Rivets for reinforcement\nmodule rivets() {\n    // End rivets\n    for(pos = [[strap_length/2 - 5, strap_width/2 - 3], [strap_length/2 - 5, -strap_width/2 + 3]]) {\n        translate([pos[0], pos[1], strap_thickness + 1])\n            cylinder(h=2, d=4, $fn=8);\n    }\n    \n    // Buckle rivets\n    for(pos = [[-strap_length/2 + 10, buckle_width/2 - 5], [-strap_length/2 + 10, -buckle_width/2 + 5]]) {\n        translate([pos[0], pos[1], strap_thickness + 1])\n            cylinder(h=2, d=4, $fn=8);\n    }\n}\n\n// Texture pattern for grip\nmodule grip_texture() {\n    for(x = [-strap_length/2 + 10:5:strap_length/2 - 20]) {\n        for(y = [-strap_width/2 + 3:3:strap_width/2 - 3]) {\n            translate([x, y, strap_thickness + 0.3])\n                cube([2, 0.5, 0.3], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    strap_body();\n    buckle();\n    rivets();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "office_supply": "visor",
    "openscad_code": "// Office desk visor - realistic medium complexity\n// Overall size: 120mm wide, 70mm deep, 45mm tall\n\n// Parameters\nwall = 2;\nvisor_width = 120;\nvisor_depth = 70;\nvisor_height = 45;\nbase_thickness = 4;\ncurve_radius = 5;\n\n// Main visor hood\nmodule visor_hood() {\n    difference() {\n        hull() {\n            // Front curved edge\n            translate([visor_width/2 - curve_radius, 0, visor_height - curve_radius])\n                sphere(r = curve_radius);\n            translate([curve_radius, 0, visor_height - curve_radius])\n                sphere(r = curve_radius);\n            // Back straight edge\n            translate([visor_width/2 - curve_radius, visor_depth, visor_height - curve_radius])\n                sphere(r = curve_radius);\n            translate([curve_radius, visor_depth, visor_height - curve_radius])\n                sphere(r = curve_radius);\n        }\n        \n        // Inner cavity\n        translate([wall, wall, wall + base_thickness])\n            cube([visor_width - 2*wall, visor_depth - 2*wall, visor_height - wall - base_thickness]);\n        \n        // Viewing slot\n        translate([visor_width/2 - 30, wall, base_thickness + wall])\n            cube([60, 2, 20]);\n    }\n}\n\n// Support base\nmodule support_base() {\n    union() {\n        // Main base platform\n        translate([0, 0, 0])\n            cube([visor_width, visor_depth, base_thickness]);\n        \n        // Front lip\n        translate([0, -2, 0])\n            cube([visor_width, 2, 8]);\n        \n        // Side supports\n        for(side = [0, 1]) {\n            translate([side * (visor_width - 8), 0, 0])\n                cube([8, visor_depth, 12]);\n        }\n    }\n}\n\n// Document ledge\nmodule document_ledge() {\n    translate([10, visor_depth - 10, base_thickness])\n        cube([visor_width - 20, 10, 4]);\n}\n\n// Anti-slip pads\nmodule anti_slip_pads() {\n    for(x = [15, visor_width/2, visor_width - 15])\n        for(y = [15, visor_depth - 15])\n            translate([x - 3, y - 3, -1])\n                cylinder(h = 1, r = 3);\n}\n\n// Cable management slot\nmodule cable_slot() {\n    translate([visor_width/2 - 5, visor_depth, base_thickness])\n        cube([10, 2, 8]);\n}\n\n// Assembly\nunion() {\n    support_base();\n    visor_hood();\n    document_ledge();\n    anti_slip_pads();\n    cable_slot();\n}",
    "renders": true
  },
  {
    "office_supply": "cap",
    "openscad_code": "// Realistic Office Cap Furniture (Medium Complexity)\n// A modern office cap with ergonomic adjustment mechanism and ventilation\n\ncap_diameter = 58;          // Head circumference (mm)\nbrim_width = 85;            // Brim width\nbrim_thickness = 2.5;       // Brim thickness\ncrown_height = 45;          // Crown height\nwall_thickness = 2;         // 3D printable wall thickness\nvent_holes = 6;             // Number of ventilation holes\nadjustment_slots = 4;       // Adjustment mechanism slots\n\nmodule main_crown() {\n    difference() {\n        // Outer crown shell\n        cylinder(h = crown_height, d = cap_diameter, $fn = 64);\n        \n        // Inner cavity for head\n        translate([0, 0, -1])\n            cylinder(h = crown_height + 2, d = cap_diameter - 2*wall_thickness, $fn = 64);\n        \n        // Bottom opening\n        translate([0, 0, -1])\n            cube([cap_diameter + 2, cap_diameter + 2, 2], center = true);\n    }\n}\n\nmodule brim() {\n    difference() {\n        // Main brim\n        union() {\n            // Front brim\n            translate([0, (brim_width - cap_diameter)/2, 0])\n                cube([brim_width, brim_width, brim_thickness], center = true);\n            \n            // Connection to crown\n            cylinder(h = brim_thickness, d = cap_diameter, $fn = 64);\n        }\n        \n        // Rounded brim edges\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([brim_width/2 - 5, 0, 0])\n                    sphere(d = 10, $fn = 16);\n        }\n    }\n}\n\nmodule ventilation_system() {\n    // Ventilation holes around crown\n    for(i = [1:vent_holes]) {\n        rotate([0, 0, i * 360/vent_holes])\n            translate([cap_diameter/2 - wall_thickness - 3, 0, crown_height * 0.6])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_thickness + 1, d = 3, $fn = 16);\n    }\n    \n    // Top vent button\n    translate([0, 0, crown_height])\n        union() {\n            cylinder(h = 4, d = 8, $fn = 32);\n            translate([0, 0, 4])\n                sphere(d = 8, $fn = 32);\n        }\n}\n\nmodule adjustment_mechanism() {\n    // Back adjustment strap\n    translate([0, -cap_diameter/2 + 5, crown_height/2])\n        difference() {\n            // Main strap body\n            cube([cap_diameter/2, 8, crown_height - 10], center = true);\n            \n            // Adjustment slots\n            for(i = [0:adjustment_slots-1]) {\n                translate([0, 0, -crown_height/2 + 5 + i * 8])\n                    cube([cap_diameter/2 - 6, 10, 2], center = true);\n            }\n        }\n    \n    // Small adjustment buckle\n    translate([cap_diameter/4, -cap_diameter/2 + 5, crown_height/2])\n        union() {\n            for(i = [-1, 1]) {\n                translate([0, i * 3, 0])\n                    cube([2, 2, crown_height - 10], center = true);\n            }\n        }\n}\n\nmodule structural_reinforcements() {\n    // Internal ribs for strength\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([cap_diameter/4, 0, crown_height/2])\n                cube([cap_diameter/2, wall_thickness, crown_height - 4], center = true);\n    }\n    \n    // Brim reinforcement ring\n    translate([0, 0, brim_thickness/2])\n        difference() {\n            cylinder(h = brim_thickness, d = cap_diameter + 4, $fn = 64);\n            cylinder(h = brim_thickness + 1, d = cap_diameter, $fn = 64);\n        }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_crown();\n    translate([0, 0, 0])\n        brim();\n    \n    // Functional elements\n    ventilation_system();\n    adjustment_mechanism();\n    \n    // Structural reinforcements (internal)\n    %structural_reinforcements();\n}",
    "renders": true
  },
  {
    "office_supply": "visorcap",
    "openscad_code": "// VisorCap Furniture Item - Office Desk Organizer\n// A cap-style desk organizer with a visor-like front lip for holding pens and small items\n// Overall dimensions: 120mm wide x 80mm deep x 45mm tall\n\n// Basic parameters\nwall_thickness = 2;\nouter_width = 120;\nouter_depth = 80;\nouter_height = 45;\ninner_width = outer_width - 2*wall_thickness;\ninner_depth = outer_depth - 2*wall_thickness;\ninner_height = outer_height - wall_thickness;\n\n// Main body with hollow interior\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([outer_width, outer_depth, outer_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([inner_width, inner_depth, inner_height], center=false);\n    }\n}\n\n// Visor lip at front for pen storage\nmodule visor_lip() {\n    translate([0, outer_depth - wall_thickness, 0])\n    difference() {\n        // Main visor shape\n        cube([outer_width, 15, 15], center=false);\n        \n        // Rounded front edge\n        translate([wall_thickness, 15, 15])\n            rotate([90, 0, 0])\n                cylinder(h=outer_width-2*wall_thickness, r=15, center=true);\n    }\n}\n\n// Support ribs for structural integrity\nmodule support_ribs() {\n    rib_spacing = 30;\n    rib_width = 2;\n    rib_height = inner_height;\n    \n    for(x = [rib_spacing : rib_spacing : outer_width - rib_spacing]) {\n        translate([x, wall_thickness, wall_thickness])\n            cube([rib_width, inner_depth, rib_height], center=false);\n    }\n}\n\n// Ventilation slots for 3D printing and drainage\nmodule ventilation_slots() {\n    slot_width = 3;\n    slot_spacing = 10;\n    \n    for(y = [slot_spacing : slot_spacing : outer_depth - slot_spacing]) {\n        translate([wall_thickness, y, 2])\n            cube([inner_width, slot_width, 2], center=false);\n    }\n}\n\n// Anti-slip feet\nmodule feet() {\n    foot_diameter = 8;\n    foot_height = 3;\n    \n    foot_positions = [\n        [15, 15],\n        [outer_width - 15, 15],\n        [15, outer_depth - 15],\n        [outer_width - 15, outer_depth - 15]\n    ];\n    \n    for(pos = foot_positions) {\n        translate([pos[0], pos[1], -foot_height])\n            cylinder(h=foot_height, d=foot_diameter, center=false);\n    }\n}\n\n// Assembly\nmain_body();\nvisor_lip();\nsupport_ribs();\nventilation_slots();\nfeet();",
    "renders": true
  },
  {
    "office_supply": "headband",
    "openscad_code": "// Headband Office Furniture - Ergonomic Headphone Stand\n// Realistic medium-complexity design with structural frame and base\n\n// Overall dimensions\nheadband_width = 120;\nheadband_height = 80;\nheadband_thickness = 2;\n\n// Base dimensions\nbase_width = 150;\nbase_depth = 100;\nbase_height = 8;\n\n// Support frame dimensions\npost_height = 60;\npost_width = 8;\npost_depth = 8;\n\n// Ergonomic pad details\npad_width = 80;\npad_thickness = 4;\n\n// Screw hole details\nscrew_radius = 3;\n\nmodule headband_arc() {\n    // Main curved headband structure\n    difference() {\n        // Outer arc\n        translate([0, 0, post_height + 20])\n            rotate([90, 0, 0])\n                cylinder(h=headband_width, r=headband_height/2, $fn=100);\n        \n        // Inner arc for hollow structure\n        translate([0, 0, post_height + 20])\n            rotate([90, 0, 0])\n                cylinder(h=headband_width + 2, r=headband_height/2 - headband_thickness, $fn=100);\n        \n        // End caps\n        translate([-headband_width/2 - 1, 0, post_height + 20])\n            rotate([0, 90, 0])\n                cylinder(h=headband_height, r=headband_thickness, $fn=50);\n        \n        translate([headband_width/2 + 1, 0, post_height + 20])\n            rotate([0, 90, 0])\n                cylinder(h=headband_height, r=headband_thickness, $fn=50);\n    }\n}\n\nmodule ergonomic_pad() {\n    // Centered ergonomic pad on headband\n    translate([0, headband_height/2 - pad_thickness/2, post_height + 20])\n        cube([pad_width, pad_thickness, headband_thickness + 2], center=true);\n}\n\nmodule support_posts() {\n    // Two vertical support posts\n    for(x = [-headband_width/4, headband_width/4]) {\n        translate([x, -post_depth/2, 0])\n            cube([post_width, post_depth, post_height]);\n    }\n}\n\nmodule base_platform() {\n    // Main base with chamfered edges\n    difference() {\n        // Base body\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Chamfer edges\n        translate([0, 0, base_height - 1])\n            cube([base_width - 4, base_depth - 4, base_height], center=true);\n        \n        // Cable management hole\n        translate([0, base_depth/2 - 10, base_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=base_width/3, r=5, $fn=30);\n    }\n    \n    // Non-slip pads\n    for(x = [-base_width/3, base_width/3]) {\n        for(y = [-base_depth/3, base_depth/3]) {\n            translate([x, y, 1])\n                cube([20, 20, 1], center=true);\n        }\n    }\n}\n\nmodule reinforcement_braces() {\n    // Diagonal braces for stability\n    translate([-headband_width/4 - post_width/2, -post_depth/2, 0])\n        rotate([0, -45, 0])\n            cube([post_height*1.5, post_width, headband_thickness]);\n    \n    translate([headband_width/4 + post_width/2, -post_depth/2, 0])\n        rotate([0, -45, 0])\n            cube([post_height*1.5, post_width, headband_thickness]);\n}\n\n// Assembly\nunion() {\n    // Base foundation\n    base_platform();\n    \n    // Support structure\n    support_posts();\n    \n    // Reinforcement\n    reinforcement_braces();\n    \n    // Headband\n    headband_arc();\n    \n    // Comfort pad\n    ergonomic_pad();\n}",
    "renders": true
  },
  {
    "office_supply": "wristband",
    "openscad_code": "// Wristband Furniture - Ergonomic Office Wrist Rest\n// Realistic style, medium complexity\n// Overall dimensions: 120 x 70 x 25mm\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Base dimensions\nbase_length = 120;\nbase_width = 70;\nbase_height = 25;\n\n// Cushion dimensions\ncushion_width = 60;\ncushion_height = 15;\n\n// Ventilation details\nvent_diameter = 4;\nvent_spacing = 10;\n\n// Grip texture details\ngrip_width = 1.5;\ngrip_depth = 0.5;\ngrip_spacing = 5;\n\n// Main base structure\nmodule wrist_rest_base() {\n    // Outer shell\n    difference() {\n        // Main base block\n        cube([base_length, base_width, base_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([base_length-wall_thickness*2, base_width-wall_thickness*2, base_height-wall_thickness], center=true);\n    }\n}\n\n// Ergonomic cushion top\nmodule ergonomic_cushion() {\n    // Create curved top surface\n    linear_extrude(height=cushion_height, center=true, convexity=10)\n    offset(r=5)\n    square([base_length-20, cushion_width], center=true);\n    \n    // Add soft edge rounding\n    translate([0, 0, cushion_height/2])\n    cylinder(h=2, r1=base_length/2-10, r2=base_length/2-5, center=true);\n}\n\n// Ventilation holes for cooling\nmodule ventilation_system() {\n    for(i = [-base_length/2+20 : vent_spacing : base_length/2-20]) {\n        for(j = [-base_width/2+10 : vent_spacing : base_width/2-10]) {\n            translate([i, j, base_height/2-wall_thickness/2])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness*2, d=vent_diameter, center=true);\n        }\n    }\n}\n\n// Anti-slip grip texture\nmodule grip_texture() {\n    for(i = [-base_length/2+10 : grip_spacing : base_length/2-10]) {\n        translate([i, base_width/2-wall_thickness, -base_height/2+wall_thickness])\n        cube([grip_width, wall_thickness, grip_depth]);\n    }\n    \n    for(i = [-base_length/2+10 : grip_spacing : base_length/2-10]) {\n        translate([i, -base_width/2, -base_height/2+wall_thickness])\n        cube([grip_width, wall_thickness, grip_depth]);\n    }\n}\n\n// Cable management groove\nmodule cable_channel() {\n    translate([0, -base_width/2+wall_thickness, -base_height/2+base_height/4])\n    cube([base_length-40, wall_thickness, base_height/2], center=true);\n}\n\n// Assembly\nunion() {\n    // Main base\n    wrist_rest_base();\n    \n    // Ergonomic top cushion\n    translate([0, 0, base_height/2+cushion_height/2-2])\n    ergonomic_cushion();\n    \n    // Ventilation system\n    ventilation_system();\n    \n    // Grip texture on bottom\n    grip_texture();\n    \n    // Cable management\n    cable_channel();\n}",
    "renders": true
  },
  {
    "office_supply": "sweatband",
    "openscad_code": "// Sweatband Furniture - OpenSCAD\n// A wrist-mounted sweatband with office furniture characteristics\n// Features structural frame, upholstered pad, and ergonomic support\n\n// Main dimensions (mm)\nband_width = 25;\nband_height = 8;\nband_length = 80;\nframe_thickness = 2;\npad_thickness = 4;\n\n// Module for curved frame structure\nmodule frame_base() {\n    difference() {\n        // Main curved frame\n        union() {\n            // Outer frame arc\n            translate([0, -band_width/2, 0])\n                rotate([90, 0, 0])\n                    linear_extrude(height=band_width)\n                        offset(r=2)\n                            arc(0, 180, band_length/2 + frame_thickness, 0.1);\n            \n            // Side supports\n            translate([band_length/2 - 5, 0, band_height/2])\n                cube([10, band_width, frame_thickness], center=true);\n            translate([-band_length/2 + 5, 0, band_height/2])\n                cube([10, band_width, frame_thickness], center=true);\n        }\n        \n        // Inner cutout for wrist space\n        translate([0, -band_width/2, -1])\n            rotate([90, 0, 0])\n                linear_extrude(height=band_width + 2)\n                    offset(r=1)\n                        arc(0, 180, band_length/2, 0.1);\n    }\n}\n\n// Module for upholstered pad with quilting\nmodule upholstered_pad() {\n    // Base foam layer\n    color(\"beige\")\n    translate([0, 0, frame_thickness/2 + pad_thickness/2])\n        difference() {\n            // Main pad\n            cube([band_length - 10, band_width - 6, pad_thickness], center=true);\n            \n            // Quilting pattern - small holes\n            for (i = [-3:3]) {\n                for (j = [-1:1]) {\n                    translate([i * 12, j * 10, 0])\n                        cylinder(h=pad_thickness+2, r=1, $fn=8);\n                }\n            }\n        }\n    \n    // Top fabric layer detail\n    color(\"gray\")\n    translate([0, 0, frame_thickness/2 + pad_thickness])\n        cube([band_length - 8, band_width - 4, 0.5], center=true);\n}\n\n// Module for structural ribs underneath\nmodule support_ribs() {\n    color(\"darkgray\")\n    for (i = [-2:2]) {\n        translate([i * 15, 0, frame_thickness/2])\n            cube([4, band_width - 4, frame_thickness], center=true);\n    }\n}\n\n// Module for adjustment mechanism\nmodule adjustment_clamp() {\n    // Clamp base\n    translate([band_length/2 + 5, 0, band_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=band_width/4, $fn=16);\n    \n    // Clamp lever\n    translate([band_length/2 + 5, 0, band_height/2 + 5])\n        rotate([90, 0, 0])\n            cube([2, 8, 4], center=true);\n}\n\n// Main assembly\nunion() {\n    // Frame structure\n    frame_base();\n    \n    // Upholstered pad\n    upholstered_pad();\n    \n    // Support ribs\n    support_ribs();\n    \n    // Adjustment mechanism\n    adjustment_clamp();\n    \n    // Ergonomic wrist rest extension\n    translate([-band_length/2 - 5, 0, frame_thickness/2])\n        rotate([0, 15, 0])\n            cube([10, band_width - 4, frame_thickness*2], center=false);\n}",
    "renders": true
  },
  {
    "office_supply": "jersey",
    "openscad_code": "// Jersey Office Chair Module\n// Realistic office chair design with jersey-style fabric backrest\n// Overall dimensions: 120mm height x 100mm width x 100mm depth\n\nmodule chair_base() {\n    // 5-star base with casters\n    for (i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 35, 0])\n        union() {\n            // Base arm\n            cube([8, 30, 5], center=true);\n            // Caster wheel\n            translate([0, 15, -5])\n            sphere(d=8);\n        }\n    }\n    // Center post\n    cylinder(h=15, d=20);\n}\n\nmodule gas_cylinder() {\n    // Adjustable height cylinder\n    cylinder(h=40, d1=12, d2=8);\n}\n\nmodule seat() {\n    // Main seat cushion\n    difference() {\n        // Seat base\n        translate([0, 0, 5])\n        cube([100, 100, 10], center=true);\n        // Contoured top surface\n        translate([0, 0, 12])\n        cube([90, 90, 8], center=true);\n    }\n    \n    // Seat edge detail\n    translate([0, 0, 0])\n    cube([102, 102, 2], center=true);\n}\n\nmodule jersey_backrest() {\n    // Jersey fabric backrest with mesh pattern\n    difference() {\n        // Main backrest frame\n        translate([0, 0, 30])\n        cube([90, 80, 4], center=true);\n        \n        // Jersey mesh holes pattern\n        for (x = [-35:10:35]) {\n            for (y = [-25:10:25]) {\n                translate([x, y, 32])\n                cylinder(h=5, d=4);\n            }\n        }\n    }\n    \n    // Side supports\n    for (x = [-45, 45]) {\n        translate([x, 0, 30])\n        cube([4, 80, 60], center=true);\n    }\n    \n    // Top handle\n    translate([0, 0, 60])\n    cube([70, 4, 10], center=true);\n}\n\nmodule armrest(side) {\n    // Adjustable armrest\n    translate([side*45, 0, 25]) {\n        // Post\n        cylinder(h=20, d=6);\n        \n        // Arm pad\n        translate([0, 0, 25])\n        rotate([15, 0, 0])\n        cube([30, 8, 4], center=true);\n    }\n}\n\nmodule lumbar_support() {\n    // Adjustable lumbar support\n    translate([0, -20, 25])\n    difference() {\n        // Cushion\n        cube([60, 20, 15], center=true);\n        \n        // Adjustment mechanism\n        translate([0, 0, 8])\n        cube([50, 10, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base assembly\n    chair_base();\n    \n    // Height adjustment\n    translate([0, 0, 15])\n    gas_cylinder();\n    \n    // Seat assembly\n    translate([0, 0, 55])\n    seat();\n    \n    // Backrest\n    translate([0, -40, 0])\n    jersey_backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Lumbar support\n    lumbar_support();\n}",
    "renders": true
  },
  {
    "office_supply": "uniform",
    "openscad_code": "// OpenSCAD Uniform Office Chair (realistic style, medium complexity)\n// Overall height ≈ 120 mm, seat 50×50 mm – suitable for desk scenes or miniatures\n\n$fa = 2; $fs = 0.5;\n\n// Adjustable parameters\nseat_w = 50;      // seat width\nseat_d = 50;      // seat depth\nseat_h = 5;       // seat thickness\nback_h = 70;      // backrest height above seat\narm_h = 15;       // armrest height above seat\nleg_len = 45;     // gas-lift cylinder length\nbase_r = 25;      // 5-star base radius\ncaster_r = 4;     // caster wheel radius\nwall = 2;         // uniform wall thickness for printability\n\nmodule seat() {\n    // Cushioned seat shell\n    difference() {\n        translate([0, 0, seat_h/2])\n            cube([seat_w, seat_d, seat_h], center=true);\n        translate([0, 0, seat_h/2 + wall])\n            cube([seat_w - wall*2, seat_d - wall*2, seat_h], center=true);\n    }\n    // Rounded front edge\n    translate([0, seat_d/2 - wall, seat_h/2])\n        cylinder(h=seat_h, r=wall, $fn=20);\n}\n\nmodule backrest() {\n    // Contoured back with lumbar curve\n    difference() {\n        union() {\n            // Main back panel\n            translate([0, 0, seat_h + back_h/2])\n                cube([seat_w*0.9, seat_d*0.6, back_h], center=true);\n            // Headrest bump\n            translate([0, -seat_d*0.25, seat_h + back_h - 8])\n                cube([seat_w*0.7, seat_d*0.5, 10], center=true);\n        }\n        // Hollow back\n        translate([0, 0, seat_h + back_h/2 + wall])\n            cube([seat_w*0.9 - wall*2, seat_d*0.6 - wall*2, back_h], center=true);\n    }\n}\n\nmodule armrest() {\n    // Simple ergonomic arm\n    translate([seat_w/2 + wall, 0, seat_h + arm_h/2])\n        cube([wall*2, seat_d*0.8, arm_h], center=true);\n    mirror([1, 0, 0]) children();\n}\n\nmodule gaslift() {\n    // Pneumatic cylinder\n    cylinder(h=leg_len, r=wall*2, $fn=20);\n    // Piston rod\n    translate([0, 0, leg_len])\n        cylinder(h=5, r=wall, $fn=20);\n}\n\nmodule starbase() {\n    // 5-star base with casters\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, base_r*0.5, 0])\n                cube([wall*2, base_r, wall*2], center=true);\n    }\n    // Center hub\n    cylinder(h=wall*2, r=wall*3, $fn=20);\n    // Casters\n    for(i=[0:4]) {\n        rotate([0, 0, i*72 + 36])\n            translate([base_r, 0, -caster_r])\n                sphere(r=caster_r, $fn=10);\n    }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    armrest();\n\n    translate([0, 0, seat_h/2])\n        gaslift();\n\n    translate([0, 0, seat_h/2 - leg_len - wall])\n        starbase();\n}",
    "renders": true
  },
  {
    "office_supply": "shorts",
    "openscad_code": "// Shorts-style office drawer unit\n// Realistic style with medium complexity\n// Overall size: 120mm W x 60mm D x 90mm H\n\n$fn = 32;\n\n// Body module\nmodule body() {\n    // Main carcass\n    difference() {\n        // Outer shell\n        cube([120, 60, 90], center=true);\n        \n        // Hollow interior\n        translate([0, 2, 5])\n            cube([114, 54, 78], center=true);\n    }\n}\n\n// Drawer module\nmodule drawer(height, y_pos) {\n    // Drawer front\n    difference() {\n        // Front panel\n        translate([0, 30, y_pos])\n            cube([118, 4, height-2], center=true);\n        \n        // Handle cutout\n        translate([0, 32, y_pos])\n            cube([40, 2, 10], center=true);\n    }\n    \n    // Handle bar\n    translate([0, 32.5, y_pos])\n        cube([36, 1, 6], center=true);\n    \n    // Drawer box\n    difference() {\n        // Outer box\n        translate([0, 12, y_pos])\n            cube([110, 30, height-4], center=true);\n        \n        // Inner cavity\n        translate([0, 8, y_pos])\n            cube([104, 30, height-8], center=true);\n    }\n    \n    // Drawer runners\n    for(side = [-1, 1]) {\n        translate([side * 54, 30, y_pos])\n            cube([4, 2, height-4], center=true);\n    }\n}\n\n// Base frame\nmodule base() {\n    // Front and back rails\n    for(x = [-55, 55]) {\n        translate([x, 0, -47])\n            cube([8, 60, 6], center=true);\n    }\n    \n    // Side rails\n    for(y = [-27, 27]) {\n        translate([0, y, -47])\n            cube([120, 8, 6], center=true);\n    }\n    \n    // Feet\n    for(x = [-52, 52])\n    for(y = [-22, 22]) {\n        translate([x, y, -51])\n            cylinder(h=4, r=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    \n    // Three drawers\n    drawer(height=26, y_pos=27);\n    drawer(height=26, y_pos=0);\n    drawer(height=26, y_pos=-27);\n}",
    "renders": true
  },
  {
    "office_supply": "socks",
    "openscad_code": "// Socks Storage Ottoman\n// A medium-complexity 3D printable ottoman that resembles a rolled-up sock\n// Dimensions: 120mm x 80mm x 120mm\n\n// Parameters\nsock_radius = 40;\nsock_length = 120;\nwall_thickness = 2;\ncuff_height = 25;\nleg_height = 15;\nleg_diameter = 8;\n\nmodule sock_body() {\n    // Main sock body - elongated torus shape\n    difference() {\n        // Outer shape\n        hull() {\n            // Toe end\n            translate([sock_length/2 - sock_radius, 0, sock_radius])\n                sphere(r = sock_radius);\n            // Cuff end\n            translate([-sock_length/2 + sock_radius, 0, sock_radius])\n                sphere(r = sock_radius);\n        }\n        \n        // Hollow interior\n        hull() {\n            translate([sock_length/2 - sock_radius - wall_thickness, 0, sock_radius])\n                sphere(r = sock_radius - wall_thickness);\n            translate([-sock_length/2 + sock_radius + wall_thickness, 0, sock_radius])\n                sphere(r = sock_radius - wall_thickness);\n        }\n    }\n}\n\nmodule cuff_detail() {\n    // Ribbed cuff at top\n    for(i = [0:4]) {\n        translate([-sock_length/2 + i*5, 0, sock_radius*2 - cuff_height + i*2])\n            rotate([90, 0, 0])\n                cylinder(h = 5, r1 = sock_radius - wall_thickness + 2, r2 = sock_radius - wall_thickness + 1, $fn = 32);\n    }\n}\n\nmodule heel_bump() {\n    // Realistic heel bump\n    translate([sock_length/4, 0, sock_radius/2])\n        scale([1.2, 0.8, 0.6])\n            sphere(r = sock_radius/2);\n}\n\nmodule toe_seam() {\n    // Toe seam detail\n    for(angle = [0:30:150]) {\n        rotate([0, angle, 0])\n            translate([sock_length/2 - sock_radius/2, 0, sock_radius/2])\n                rotate([90, 0, 0])\n                    cylinder(h = sock_radius, r = 1.5, $fn = 8);\n    }\n}\n\nmodule support_legs() {\n    // Four support legs for furniture stability\n    positions = [[-30, -30], [30, -30], [30, 30], [-30, 30]];\n    for(pos = positions) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h = leg_height, r = leg_diameter/2, $fn = 16);\n    }\n}\n\nmodule storage_hollow() {\n    // Storage compartment inside sock\n    translate([0, 0, leg_height + wall_thickness])\n        cube([sock_length - 20, sock_radius*2 - 20, sock_radius*2 - cuff_height - wall_thickness*2], center = true);\n}\n\n// Main assembly\nunion() {\n    // Sock body\n    union() {\n        sock_body();\n        cuff_detail();\n        heel_bump();\n        toe_seam();\n    }\n    \n    // Furniture elements\n    support_legs();\n}\n\n// Create storage hollow\ndifference() {\n    // Previous union\n    children();\n    \n    // Cut storage space\n    storage_hollow();\n}",
    "renders": true
  },
  {
    "office_supply": "shinguards",
    "openscad_code": "// Shin Guards Furniture Item - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm long, 70mm wide, 45mm high\n\n// Main shin guard shell\nmodule shin_guard_shell() {\n    difference() {\n        // Outer shell with ergonomic curve\n        translate([0, 0, 10]) \n        scale([1, 0.8, 0.6])\n        sphere(d=70, $fn=50);\n        \n        // Inner cavity for leg\n        translate([0, 0, 15])\n        scale([0.85, 0.65, 0.5])\n        sphere(d=60, $fn=50);\n        \n        // Cut bottom flat\n        translate([-40, -40, -5])\n        cube([80, 80, 10]);\n    }\n}\n\n// Ventilation holes pattern\nmodule ventilation_holes() {\n    for (i = [-2:2]) {\n        for (j = [-1:1]) {\n            if (abs(i) + abs(j) <= 2) {\n                translate([i*12, j*12, 0])\n                rotate([0, 90, 0])\n                cylinder(h=5, d=4, $fn=20);\n            }\n        }\n    }\n}\n\n// Cushion padding structure\nmodule padding() {\n    difference() {\n        // Main cushion\n        translate([0, 0, 25])\n        scale([0.9, 0.7, 0.3])\n        sphere(d=65, $fn=40);\n        \n        // Ventilation grooves\n        for (i = [-3:3]) {\n            translate([i*8, 0, 20])\n            rotate([0, 90, 0])\n            cylinder(h=30, d=2, $fn=20);\n        }\n    }\n}\n\n// Strap attachment points\nmodule strap_mounts() {\n    // Top mount\n    translate([0, 25, 35])\n    cylinder(h=8, d=6, $fn=20);\n    \n    // Bottom mount\n    translate([0, 25, 15])\n    cylinder(h=8, d=6, $fn=20);\n    \n    // Side mounts\n    translate([25, 0, 25])\n    rotate([90, 0, 0])\n    cylinder(h=8, d=6, $fn=20);\n    \n    translate([-25, 0, 25])\n    rotate([90, 0, 0])\n    cylinder(h=8, d=6, $fn=20);\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    // Vertical rib 1\n    translate([15, 0, 22])\n    rotate([0, 25, 0])\n    cube([2, 60, 35]);\n    \n    // Vertical rib 2\n    translate([-15, 0, 22])\n    rotate([0, -25, 0])\n    cube([2, 60, 35]);\n    \n    // Horizontal rib\n    translate([0, 0, 30])\n    rotate([25, 0, 0])\n    cube([60, 2, 30]);\n}\n\n// Edge protection strip\nmodule edge_protection() {\n    hull() {\n        translate([0, 25, 5])\n        sphere(d=4, $fn=20);\n        translate([0, 25, 35])\n        sphere(d=4, $fn=20);\n    }\n    \n    hull() {\n        translate([0, -25, 5])\n        sphere(d=4, $fn=20);\n        translate([0, -25, 35])\n        sphere(d=4, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    // Main shell with 2mm wall thickness\n    shin_guard_shell();\n    \n    // Add ventilation holes\n    ventilation_holes();\n    \n    // Add cushioning\n    padding();\n    \n    // Add strap mounts\n    strap_mounts();\n    \n    // Add structural ribs\n    ribs();\n    \n    // Add edge protection\n    edge_protection();\n}",
    "renders": true
  },
  {
    "office_supply": "pads",
    "openscad_code": "// Realistic Office Mouse Pad with Wrist Rest\n// Medium complexity - recognizable, functional design\n\n$fn = 50;\n\n// Overall dimensions\npad_width = 200;\npad_depth = 230;\npad_thickness = 3;\nbase_height = 8;\nwrist_rest_height = 15;\nwrist_rest_width = 180;\nwrist_rest_depth = 60;\n\n// Create the main mouse pad surface\nmodule mouse_pad_surface() {\n    // Base pad\n    color(\"darkslategray\")\n    difference() {\n        cube([pad_width, pad_depth, pad_thickness]);\n        \n        // Rounded corners - remove excess material\n        for (x = [0, pad_width]) {\n            for (y = [0, pad_depth]) {\n                translate([x, y, pad_thickness-1])\n                    cylinder(h=pad_thickness+2, r=5, $fn=16);\n            }\n        }\n    }\n}\n\n// Create textured surface pattern for mouse tracking\nmodule textured_surface() {\n    pattern_spacing = 5;\n    dot_height = 0.2;\n    dot_radius = 0.8;\n    \n    color(\"gray\")\n    for (x = [10:pattern_spacing:pad_width-10]) {\n        for (y = [10:pattern_spacing:pad_depth-70]) {\n            translate([x, y, pad_thickness])\n                cylinder(h=dot_height, r=dot_radius, $fn=8);\n        }\n    }\n}\n\n// Create the base with rubber grip pattern\nmodule rubber_base() {\n    color(\"black\")\n    difference() {\n        // Main base\n        translate([0, 0, -base_height])\n            cube([pad_width, pad_depth, base_height]);\n        \n        // Grip pattern on bottom\n        for (x = [5:10:pad_width-5]) {\n            for (y = [5:10:pad_depth-5]) {\n                translate([x, y, -base_height])\n                    cylinder(h=base_height+1, r=2, $fn=8);\n            }\n        }\n    }\n}\n\n// Create ergonomic wrist rest\nmodule wrist_rest() {\n    // Main rest body\n    color(\"darkslateblue\")\n    translate([(pad_width-wrist_rest_width)/2, pad_depth-wrist_rest_depth-5, 0])\n        difference() {\n            // Base shape with rounded edges\n            minkowski() {\n                cube([wrist_rest_width, wrist_rest_depth, wrist_rest_height]);\n                sphere(r=5);\n            }\n            \n            // Top curve for wrist comfort\n            translate([wrist_rest_width/2, wrist_rest_depth/2, wrist_rest_height+5])\n                scale([1, 0.8, 0.6])\n                    sphere(r=wrist_rest_width/2);\n            \n            // Remove bottom half for flat base\n            translate([0, 0, -1])\n                cube([wrist_rest_width*2, wrist_rest_depth*2, wrist_rest_height/2]);\n        }\n    \n    // Soft surface layer\n    color(\"royalblue\")\n    translate([(pad_width-wrist_rest_width)/2, pad_depth-wrist_rest_depth-5, wrist_rest_height-2])\n        difference() {\n            cube([wrist_rest_width, wrist_rest_depth, 2]);\n            \n            // Rounded top surface\n            translate([wrist_rest_width/2, wrist_rest_depth/2, 2])\n                scale([1, 0.8, 0.3])\n                    sphere(r=wrist_rest_width/2);\n        }\n}\n\n// Create side grips\nmodule side_grips() {\n    grip_width = 5;\n    grip_depth = 20;\n    \n    color(\"black\")\n    for (side = [0, 1]) {\n        translate([side ? pad_width-grip_width : 0, (pad_depth-grip_depth)/2, 0])\n            cube([grip_width, grip_depth, pad_thickness+base_height]);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    rubber_base();\n    \n    // Main components\n    mouse_pad_surface();\n    textured_surface();\n    wrist_rest();\n    \n    // Functional details\n    side_grips();\n}",
    "renders": true
  },
  {
    "office_supply": "shoulderpads",
    "openscad_code": "// Shoulderpads Furniture Item - Realistic Office Chair Style\n// Medium complexity with structural details and ergonomic features\n\n$fn = 32;\nwall_thickness = 2;\npad_width = 60;\npad_height = 45;\npad_depth = 25;\n\nmodule shoulder_pad_base() {\n    // Main curved pad structure\n    difference() {\n        // Outer curved shell\n        union() {\n            for (i = [0:5]) {\n                translate([0, i * 7 - 15, 0])\n                scale([1, 0.3, 0.8])\n                sphere(d = pad_width + 4);\n            }\n        }\n        \n        // Inner cavity\n        translate([0, 0, -5])\n        scale([0.85, 0.9, 0.7])\n        sphere(d = pad_width);\n    }\n}\n\nmodule support_structure() {\n    // Central support beam\n    translate([-wall_thickness/2, -20, -10])\n    cube([wall_thickness, 40, 20]);\n    \n    // Side supports\n    for (x = [-20, 20]) {\n        translate([x - wall_thickness/2, -15, -10])\n        cube([wall_thickness, 30, 20]);\n    }\n    \n    // Base plate for mounting\n    translate([-30, -25, -12])\n    cube([60, 50, wall_thickness]);\n}\n\nmodule ergonomic_details() {\n    // Grooves for ventilation\n    for (y = [-10:10:10]) {\n        translate([0, y, pad_height/2])\n        rotate([90, 0, 0])\n        cylinder(h = pad_width, d = 2, $fn = 6);\n    }\n    \n    // Edge protection strips\n    translate([0, 0, pad_height/2 + 2])\n    difference() {\n        cylinder(h = wall_thickness, d = pad_width + 8);\n        cylinder(h = wall_thickness + 1, d = pad_width + 4);\n    }\n}\n\nmodule mounting_holes() {\n    // Mounting holes pattern\n    for (x = [-20, 0, 20]) {\n        for (y = [-15, 0, 15]) {\n            translate([x, y, -12])\n            cylinder(h = wall_thickness + 2, d = 4);\n        }\n    }\n}\n\nmodule furniture_joints() {\n    // Connection points for chair armrest\n    translate([0, -25, -10])\n    difference() {\n        cube([40, wall_thickness * 3, 15]);\n        translate([5, -1, 5])\n        cube([30, wall_thickness + 2, 8]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main pad\n    shoulder_pad_base();\n    \n    // Structural support\n    support_structure();\n    \n    // Ergonomic features\n    ergonomic_details();\n    \n    // Mounting system\n    furniture_joints();\n    \n    // Remove mounting holes\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "elbowpads",
    "openscad_code": "// Elbow Pad for Office Chair Armrest\n// Realistic style, medium complexity\n// Overall dimensions: 120mm x 70mm x 40mm (L x W x H)\n\n$fn = 50;\n\n// Main parameters\nlength = 120;\nwidth = 70;\nheight = 40;\nwall_thickness = 2;\npadding_thickness = 10;\n\nmodule elbow_pad() {\n    // Main cushion body with ergonomic contour\n    difference() {\n        // Outer rounded shape\n        minkowski() {\n            cube([length-20, width-20, height-10], center=true);\n            sphere(10);\n        }\n        \n        // Hollow interior for armrest space\n        translate([0, 0, -5])\n        minkowski() {\n            cube([length-24, width-24, height-20], center=true);\n            sphere(8);\n        }\n    }\n    \n    // Top ergonomic surface with gentle curve\n    translate([0, 0, height/2-5])\n    scale([1, 1, 0.3])\n    sphere([length/2-5, width/2-5, padding_thickness]);\n    \n    // Front lip for arm support\n    translate([length/2-15, 0, -height/2+5])\n    rotate([0, 30, 0])\n    cube([20, width-10, 15], center=true);\n    \n    // Side support wings\n    for(side = [-1, 1]) {\n        translate([0, side*(width/2-10), -height/2+15])\n        cube([length-40, 20, 30], center=true);\n    }\n    \n    // Mounting holes for furniture attachment\n    for(x = [-40, 40]) {\n        for(y = [-20, 20]) {\n            translate([x, y, -height/2+5])\n            rotate([180, 0, 0])\n            cylinder(h=15, r1=3, r2=3);\n        }\n    }\n    \n    // Reinforcement ribs underneath\n    for(pos = [0, 30, -30]) {\n        translate([pos, 0, -height/2+8])\n        rotate([90, 0, 0])\n        cylinder(h=width-20, r1=2, r2=2);\n    }\n    \n    // Decorative seam line around edge\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([length/2-12, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=width/2-2, r2=width/2-2);\n    }\n    \n    // Ventilation holes on sides\n    for(side = [-1, 1]) {\n        for(z = [0:10:20]) {\n            translate([length/2-20, side*(width/2-5), z-height/2+15])\n            rotate([0, 90, 0])\n            cylinder(h=wall_thickness, r1=3, r2=3);\n        }\n    }\n}\n\n// Render the elbow pad\nelbow_pad();",
    "renders": true
  },
  {
    "office_supply": "kneepads",
    "openscad_code": "// Realistic style kneepads for furniture use\n// Medium complexity with ergonomic design\n// Size: ~120mm length, ~80mm width, ~50mm thickness\n// Wall thickness: 2mm for 3D printing\n\n// Main parameters\npad_length = 120;\npad_width = 80;\npad_thickness = 25;\ncushion_thickness = 12;\nwall_thickness = 2;\n\n// Strap dimensions\nstrap_width = 25;\nstrap_thickness = 3;\nstrap_length = 150;\n\n// Ergonomic curvature\ncurve_radius = 40;\n\n// Main padding module\nmodule main_pad() {\n    difference() {\n        // Outer shell with ergonomic curve\n        hull() {\n            translate([-pad_length/2, -pad_width/2, 0])\n                cylinder(r=10, h=pad_thickness, $fn=20);\n            translate([pad_length/2, -pad_width/2, 0])\n                cylinder(r=10, h=pad_thickness, $fn=20);\n            translate([-pad_length/2, pad_width/2, 0])\n                cylinder(r=10, h=pad_thickness, $fn=20);\n            translate([pad_length/2, pad_width/2, 0])\n                cylinder(r=10, h=pad_thickness, $fn=20);\n        }\n        \n        // Inner cavity for weight reduction\n        translate([0, 0, wall_thickness])\n            scale([0.85, 0.85, 0.9])\n            hull() {\n                translate([-pad_length/2, -pad_width/2, 0])\n                    cylinder(r=8, h=pad_thickness-wall_thickness, $fn=20);\n                translate([pad_length/2, -pad_width/2, 0])\n                    cylinder(r=8, h=pad_thickness-wall_thickness, $fn=20);\n                translate([-pad_length/2, pad_width/2, 0])\n                    cylinder(r=8, h=pad_thickness-wall_thickness, $fn=20);\n                translate([pad_length/2, pad_width/2, 0])\n                    cylinder(r=8, h=pad_thickness-wall_thickness, $fn=20);\n            }\n    }\n}\n\n// Cushion layer with grid pattern for breathability\nmodule cushion_layer() {\n    difference() {\n        // Main cushion\n        translate([0, 0, pad_thickness])\n            scale([1, 1, 0.5])\n            main_pad();\n        \n        // Ventilation holes\n        for(x = [-40:20:40]) {\n            for(y = [-30:20:30]) {\n                translate([x, y, pad_thickness + cushion_thickness - 2])\n                    cylinder(r=3, h=cushion_thickness, $fn=16);\n            }\n        }\n    }\n}\n\n// Strap attachment points\nmodule strap_mounts() {\n    // Front mount pair\n    for(side = [-1, 1]) {\n        translate([pad_length/2 - 15, side * (pad_width/2 + 5), 10])\n            rotate([90, 0, 0])\n                cylinder(r=5, h=10, $fn=20);\n    }\n    \n    // Rear mount pair\n    for(side = [-1, 1]) {\n        translate([-pad_length/2 + 15, side * (pad_width/2 + 5), 10])\n            rotate([90, 0, 0])\n                cylinder(r=5, h=10, $fn=20);\n    }\n}\n\n// Adjustable straps\nmodule straps() {\n    // Left strap\n    translate([pad_length/2 - 15, pad_width/2 + 5, 15])\n        rotate([0, 90, 0])\n            cube([strap_length, strap_thickness, strap_width]);\n    \n    // Right strap\n    translate([pad_length/2 - 15, -pad_width/2 - 5, 15])\n        rotate([0, 90, 0])\n            cube([strap_length, strap_thickness, strap_width]);\n    \n    // Rear straps\n    translate([-pad_length/2 + 15, pad_width/2 + 5, 15])\n        rotate([0, 90, 180])\n            cube([strap_length, strap_thickness, strap_width]);\n    \n    translate([-pad_length/2 + 15, -pad_width/2 - 5, 15])\n        rotate([0, 90, 180])\n            cube([strap_length, strap_thickness, strap_width]);\n}\n\n// Reinforcement ribs for structure\nmodule reinforcement_ribs() {\n    // Longitudinal ribs\n    for(x = [-30:30:30]) {\n        translate([x, 0, pad_thickness/2])\n            cube([2, pad_width - 10, pad_thickness - 4]);\n    }\n    \n    // Transverse ribs\n    for(y = [-25:25:25]) {\n        translate([0, y, pad_thickness/2])\n            cube([pad_length - 10, 2, pad_thickness - 4]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_pad();\n    cushion_layer();\n    strap_mounts();\n    \n    // Additional details\n    reinforcement_ribs();\n    \n    // Straps (comment out for separate printing)\n    %straps();\n}",
    "renders": true
  },
  {
    "office_supply": "goalposts",
    "openscad_code": "// Goalposts Furniture Item - Office Desk Organizer\n// Represents a miniature goalposts structure for organizing pens and small office supplies\n// Overall dimensions: 80mm wide x 40mm deep x 60mm tall\n\n$fn = 32;\n\n// Main parameters\npost_width = 3;\npost_height = 60;\ncrossbar_width = 80;\ncrossbar_thickness = 4;\nbase_depth = 40;\nbase_thickness = 3;\nwall_thickness = 2;\n\n// Base platform with rounded edges\nmodule base_platform() {\n    difference() {\n        // Main base shape\n        translate([0, 0, base_thickness/2])\n            cube([crossbar_width + 10, base_depth, base_thickness], center=true);\n        \n        // Rounded corners cutouts\n        for(x = [-crossbar_width/2 - 5, crossbar_width/2 + 5])\n            for(y = [-base_depth/2, base_depth/2])\n                translate([x, y, base_thickness/2])\n                    cylinder(h=base_thickness+1, r=5, center=true);\n    }\n}\n\n// Vertical post with reinforcement\nmodule vertical_post(x_pos) {\n    // Main post\n    translate([x_pos, 0, post_height/2 + base_thickness])\n        cube([post_width, post_width, post_height], center=true);\n    \n    // Reinforcement gusset\n    translate([x_pos, base_depth/4 - 5, base_thickness + post_height/4])\n        rotate([0, 45, 0])\n        cube([post_width*1.5, wall_thickness, post_height/2], center=true);\n}\n\n// Crossbar with net attachment points\nmodule crossbar() {\n    // Main crossbar\n    translate([0, 0, post_height + base_thickness + crossbar_thickness/2])\n        cube([crossbar_width, crossbar_thickness, crossbar_thickness], center=true);\n    \n    // Net attachment rings\n    for(i = [-3:3]) {\n        translate([i * 10, 0, post_height + base_thickness + crossbar_thickness + 1])\n            cylinder(h=2, r=1.5, center=true);\n    }\n}\n\n// Pen holder attachment\nmodule pen_holder() {\n    // Left side pen cup\n    translate([-crossbar_width/2 - 15, 0, base_thickness + 15])\n        difference() {\n            cylinder(h=30, r=8);\n            translate([0, 0, wall_thickness])\n                cylinder(h=30, r=6);\n        }\n    \n    // Right side pen cup\n    translate([crossbar_width/2 + 15, 0, base_thickness + 15])\n        difference() {\n            cylinder(h=30, r=8);\n            translate([0, 0, wall_thickness])\n                cylinder(h=30, r=6);\n        }\n}\n\n// Support braces\nmodule support_braces() {\n    // Left brace\n    translate([-crossbar_width/2, -base_depth/4, base_thickness + post_height/3])\n        rotate([0, 45, 0])\n        cube([post_width*2, wall_thickness, post_height/1.5], center=true);\n    \n    // Right brace\n    translate([crossbar_width/2, -base_depth/4, base_thickness + post_height/3])\n        rotate([0, 45, 0])\n        cube([post_width*2, wall_thickness, post_height/1.5], center=true);\n}\n\n// Assembly\nunion() {\n    base_platform();\n    \n    // Vertical posts\n    vertical_post(-crossbar_width/2);\n    vertical_post(crossbar_width/2);\n    \n    crossbar();\n    support_braces();\n    pen_holder();\n    \n    // Feet pads for stability\n    for(x = [-crossbar_width/2 - 5, crossbar_width/2 + 5])\n        translate([x, 0, 0])\n            cylinder(h=wall_thickness, r=4, center=false);\n}",
    "renders": true
  },
  {
    "office_supply": "crossbar",
    "openscad_code": "// Crossbar furniture component for office shelving unit\n// Medium complexity realistic style\n\n// Overall dimensions\nbar_length = 120;\nbar_height = 20;\nbar_depth = 15;\nwall_thickness = 2;\n\n// Joint dimensions\njoint_diameter = 10;\njoint_length = 8;\njoint_gap = 4;\n\n// Mounting details\nmount_hole_diameter = 4;\nmount_hole_depth = 3;\n\n// Decorative elements\ngrip_width = 3;\ngrip_depth = 1;\n\nmodule main_bar() {\n    difference() {\n        // Main crossbar body\n        cube([bar_length, bar_depth, bar_height], center=true);\n        \n        // Lightening cutouts\n        for (i = [-1, 1]) {\n            translate([i * bar_length/4, 0, 0])\n                cube([bar_length/3 - 4, bar_depth - wall_thickness*2, bar_height - wall_thickness*2], center=true);\n        }\n        \n        // Grip pattern on top\n        for (x = [-bar_length/2 + 10 : 10 : bar_length/2 - 10]) {\n            translate([x, 0, bar_height/2 - grip_depth/2])\n                cube([grip_width, bar_depth - wall_thickness*2, grip_depth]);\n        }\n    }\n}\n\nmodule joint_end(pos) {\n    translate([pos, 0, 0]) {\n        // Main joint cylinder\n        rotate([0, 90, 0])\n            cylinder(h=joint_length, d=joint_diameter, center=true);\n        \n        // Mounting hole\n        rotate([0, 90, 0])\n            cylinder(h=mount_hole_depth + 1, d=mount_hole_diameter, center=true);\n        \n        // Joint reinforcement ring\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=joint_length + 0.5, d=joint_diameter + 4, center=true);\n                cylinder(h=joint_length + 1, d=joint_diameter, center=true);\n            }\n        }\n    }\n}\n\nmodule support_ribs() {\n    // Internal support structure\n    for (x = [-bar_length/2 + 15 : 20 : bar_length/2 - 15]) {\n        translate([x, 0, 0]) {\n            difference() {\n                cube([wall_thickness, bar_depth - wall_thickness*2, bar_height - wall_thickness*2], center=true);\n                // Lightening holes in ribs\n                cylinder(h=wall_thickness + 0.1, d=bar_depth/2, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    union() {\n        main_bar();\n        \n        // Add internal supports\n        support_ribs();\n    }\n    \n    // End joints\n    joint_end(bar_length/2 + joint_length/2);\n    joint_end(-bar_length/2 - joint_length/2);\n    \n    // Chamfers on edges\n    difference() {\n        // Main body\n        cube([bar_length, bar_depth, bar_height], center=true);\n        \n        // Chamfer cuts\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                for (z = [-1, 1]) {\n                    translate([x * (bar_length/2 - 2), y * (bar_depth/2 - 2), z * (bar_height/2 - 2)])\n                        sphere(d=4);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "uprights",
    "openscad_code": "// Upright Desk Organizer / File Holder\n// Realistic style with medium complexity\n// Overall dimensions: 120mm W x 100mm D x 135mm H\n\n$fn = 32;\n\n// Main parameters\nwall_thickness = 2;\nbase_height = 8;\ncompartment_width = 35;\ncompartment_depth = 90;\ntotal_height = 135;\nfront_angle = 15;\n\nmodule base() {\n    difference() {\n        // Main base block\n        cube([120, 100, base_height], center=false);\n        \n        // Cable management slot at back\n        translate([10, 85, 3])\n            cube([100, 10, 3]);\n    }\n}\n\nmodule left_compartment() {\n    difference() {\n        union() {\n            // Left side wall\n            translate([0, 0, 0])\n                cube([wall_thickness, compartment_depth, total_height]);\n            \n            // Bottom angled floor\n            translate([wall_thickness, 0, 0])\n                cube([compartment_width - wall_thickness, compartment_depth, base_height]);\n            \n            // Back wall\n            translate([wall_thickness, compartment_depth - wall_thickness, 0])\n                cube([compartment_width - wall_thickness, wall_thickness, total_height]);\n            \n            // Front angled support\n            translate([wall_thickness, 0, 0])\n                rotate([0, front_angle, 0])\n                cube([wall_thickness, compartment_depth, total_height * 0.9]);\n        }\n        \n        // Tapered interior space\n        translate([wall_thickness + 2, 2, 2])\n            rotate([0, front_angle, 0])\n            cube([compartment_width - 6, compartment_depth - 4, total_height - 4]);\n    }\n}\n\nmodule center_compartment() {\n    translate([40, 0, 0])\n        left_compartment();\n}\n\nmodule right_compartment() {\n    translate([80, 0, 0])\n        left_compartment();\n}\n\nmodule pen_holder_cutouts() {\n    // Cylindrical cutouts for pens/pencils\n    for(x = [5:10:30]) {\n        for(y = [5:10:25]) {\n            translate([x + 82, y + 65, base_height])\n                cylinder(h = 60, r = 4, center=false);\n        }\n    }\n}\n\nmodule structural_reinforcements() {\n    // Front bottom lip for stability\n    translate([0, -wall_thickness, 0])\n        cube([120, wall_thickness, 20]);\n    \n    // Side support ribs\n    for(pos = [0, 40, 80]) {\n        translate([pos + 18, 0, 20])\n            cube([wall_thickness, 10, 40]);\n    }\n}\n\nmodule organizer() {\n    union() {\n        base();\n        left_compartment();\n        center_compartment();\n        right_compartment();\n        \n        // Pen holder block\n        translate([80, 60, 0])\n            difference() {\n                cube([35, 35, 70]);\n                pen_holder_cutouts();\n            }\n        \n        structural_reinforcements();\n    }\n}\n\norganizer();",
    "renders": true
  },
  {
    "office_supply": "fieldposts",
    "openscad_code": "// Fieldposts (Field Post Office) furniture piece - realistic OpenSCAD model\n// Dimensions: 120mm width x 80mm depth x 100mm height\n\n// Wall thickness constant for 3D printing\nwall = 2;\n\n// Main body module\nmodule body() {\n    // Outer shell\n    difference() {\n        cube([120, 80, 100], center=true);\n        translate([0, 0, wall])\n            cube([120-wall*2, 80-wall*2, 100-wall], center=true);\n    }\n}\n\n// Mail slot opening\nmodule mail_slot() {\n    translate([0, 40-wall/2, 30])\n        rotate([0, 90, 0])\n            cylinder(h=60, d1=40, d2=35, center=true);\n}\n\n// Front door panel\nmodule door() {\n    translate([0, -40+wall/2, 0])\n        cube([110-wall*2, wall, 90-wall*2], center=true);\n}\n\n// Door handle\nmodule handle() {\n    translate([30, -40-wall, -20])\n        cylinder(h=wall*3, d=8, center=true);\n    translate([30, -40-wall, -20])\n        sphere(d=8);\n}\n\n// Top signage area\nmodule sign() {\n    translate([0, 0, 50])\n        cube([100, 70, 10], center=true);\n}\n\n// Ventilation holes pattern\nmodule vents() {\n    for(i = [-40:10:40]) {\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=80, d=4, center=true);\n    }\n}\n\n// Hinge details\nmodule hinges() {\n    for(side = [-1, 1]) {\n        translate([side*50, -40, 30])\n            cylinder(h=15, d=6, center=false);\n    }\n}\n\n// Base support frame\nmodule base() {\n    cube([130, 90, 5], center=true);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    body();\n    \n    // Remove mail slot\n    difference() {\n        body();\n        mail_slot();\n    }\n    \n    // Add door panel\n    door();\n    \n    // Add handle\n    handle();\n    \n    // Add signage\n    sign();\n    \n    // Add vents to sides\n    translate([0, 0, -40])\n        vents();\n    \n    // Add hinges\n    hinges();\n    \n    // Add base\n    translate([0, 0, -52.5])\n        base();\n}\n\n// Reinforcement ribs inside\nmodule ribs() {\n    for(pos = [-30, 0, 30]) {\n        translate([pos, 0, 0])\n            cube([wall, 80-wall*2, 95-wall*2], center=true);\n    }\n}\n\n// Internal ribs for structure\ntranslate([0, 0, 2.5])\n    ribs();",
    "renders": true
  },
  {
    "office_supply": "boundary",
    "openscad_code": "// Office room divider / boundary furniture\n// Free-standing desk-height partition with integrated storage\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\npanel_width = 120;\npanel_height = 80;\npanel_depth = 30;\nleg_height = 70;\nshelf_spacing = 25;\n\n// Main frame structure\nmodule frame() {\n    // Left vertical post\n    translate([-panel_width/2 + wall_thickness, 0, 0])\n        cube([wall_thickness*2, panel_depth, panel_height + leg_height], center=false);\n    \n    // Right vertical post\n    translate([panel_width/2 - wall_thickness*2, 0, 0])\n        cube([wall_thickness*2, panel_depth, panel_height + leg_height], center=false);\n    \n    // Bottom horizontal brace\n    translate([-panel_width/2, -panel_depth/2 + wall_thickness, 0])\n        cube([panel_width, wall_thickness*2, wall_thickness*2]);\n    \n    // Top horizontal brace\n    translate([-panel_width/2, -panel_depth/2 + wall_thickness, panel_height - wall_thickness*2])\n        cube([panel_width, wall_thickness*2, wall_thickness*2]);\n}\n\n// Central panel\nmodule panel() {\n    translate([-panel_width/2 + wall_thickness*2, 0, wall_thickness*2])\n        cube([panel_width - wall_thickness*4, panel_depth - wall_thickness*4, panel_height - wall_thickness*4]);\n}\n\n// Storage shelves\nmodule shelves() {\n    for (z = [shelf_spacing : shelf_spacing : panel_height - shelf_spacing*2]) {\n        translate([-panel_width/2 + wall_thickness*4, -panel_depth/2 + wall_thickness*3, z])\n            cube([panel_width - wall_thickness*8, panel_depth - wall_thickness*6, wall_thickness]);\n    }\n}\n\n// Legs for stability\nmodule legs() {\n    // Front left leg\n    translate([-panel_width/2 + wall_thickness*2, panel_depth/2 - wall_thickness, -leg_height])\n        rotate([90, 0, 0])\n            cylinder(h=leg_height, r=wall_thickness*2);\n    \n    // Front right leg\n    translate([panel_width/2 - wall_thickness*4, panel_depth/2 - wall_thickness, -leg_height])\n        rotate([90, 0, 0])\n            cylinder(h=leg_height, r=wall_thickness*2);\n    \n    // Back left leg\n    translate([-panel_width/2 + wall_thickness*2, -panel_depth/2 + wall_thickness, -leg_height])\n        rotate([90, 0, 0])\n            cylinder(h=leg_height, r=wall_thickness*2);\n    \n    // Back right leg\n    translate([panel_width/2 - wall_thickness*4, -panel_depth/2 + wall_thickness, -leg_height])\n        rotate([90, 0, 0])\n            cylinder(h=leg_height, r=wall_thickness*2);\n}\n\n// Cable management hole\nmodule cable_hole() {\n    translate([0, 0, panel_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=panel_depth, r=wall_thickness*3);\n}\n\n// Assembly\nunion() {\n    frame();\n    panel();\n    difference() {\n        shelves();\n        cable_hole();\n    }\n    legs();\n}",
    "renders": true
  },
  {
    "office_supply": "cones",
    "openscad_code": "// Cone-shaped Desk Organizer Set\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\ncone_height = 45;\nbase_diameter = 80;\npen_hole_diameter = 12;\nsmall_cone_height = 25;\nsmall_cone_diameter = 30;\n\n// Main base cone structure\nmodule base_cone() {\n    difference() {\n        // Outer cone shape\n        cylinder(h = cone_height, d1 = base_diameter, d2 = 20, center = false);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h = cone_height - wall_thickness, d1 = base_diameter - 2*wall_thickness, d2 = 20 - 2*wall_thickness, center = false);\n        \n        // Bottom opening for 3D printing\n        translate([0, 0, 0])\n            cylinder(h = wall_thickness, d = base_diameter - 2*wall_thickness, center = false);\n    }\n}\n\n// Small cones for organizing\nmodule small_cone(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, wall_thickness]) {\n        rotate([0, 0, angle]) {\n            difference() {\n                // Outer cone\n                cylinder(h = small_cone_height, d1 = small_cone_diameter, d2 = 8, center = false);\n                \n                // Hollow interior\n                translate([0, 0, wall_thickness])\n                    cylinder(h = small_cone_height - wall_thickness, d1 = small_cone_diameter - 2*wall_thickness, d2 = 8 - 2*wall_thickness, center = false);\n            }\n        }\n    }\n}\n\n// Pen/pencil holes\nmodule pen_hole(x_pos, y_pos) {\n    translate([x_pos, y_pos, cone_height - 15])\n        cylinder(h = 20, d = pen_hole_diameter, center = false);\n}\n\n// Reinforcement ribs\nmodule rib(angle) {\n    rotate([0, 0, angle]) {\n        translate([0, (base_diameter - wall_thickness)/2 - 5, wall_thickness])\n            cube([wall_thickness, 10, cone_height - wall_thickness], center = true);\n    }\n}\n\n// Anti-slip base ring\nmodule base_ring() {\n    translate([0, 0, 0.5])\n        difference() {\n            cylinder(h = 1.5, d = base_diameter, center = false);\n            cylinder(h = 1.5, d = base_diameter - 6, center = false);\n        }\n}\n\n// Assembly\nunion() {\n    // Main cone base\n    base_cone();\n    \n    // Base ring for stability\n    base_ring();\n    \n    // Four small cones around the base\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([base_diameter/2 - small_cone_diameter/2 - 5, 0, 0])\n                small_cone(0, 0, 0);\n    }\n    \n    // Central pen storage holes\n    for (i = [0:60:300]) {\n        rotate([0, 0, i])\n            translate([15, 0, 0])\n                pen_hole(0, 0);\n    }\n    \n    // Structural ribs\n    for (i = [0:45:315]) {\n        rib(i);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "markers",
    "openscad_code": "// Marker Holder Furniture Item\n// Realistic style, medium complexity\n\n// Overall dimensions\nholder_width = 80;\nholder_depth = 40;\nholder_height = 100;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Marker dimensions (standard marker)\nmarker_diameter = 10;\nmarker_height = 90;\n\n// Base parameters\nbase_thickness = 5;\nbase_width = holder_width;\nbase_depth = holder_depth;\n\n// Slanted top angle for easy access\ntop_angle = 30;\n\n// Number of marker slots\nslots_x = 6;\nslots_y = 2;\n\n// Slot spacing\nslot_spacing_x = (base_width - 2*wall_thickness - marker_diameter) / (slots_x - 1);\nslot_spacing_y = (base_depth - 2*wall_thickness - marker_diameter) / (slots_y - 1);\n\nmodule base() {\n    difference() {\n        // Main base block\n        cube([base_width, base_depth, base_thickness]);\n        \n        // Chamfered edges\n        translate([wall_thickness, wall_thickness, -1])\n            cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_thickness + 2]);\n    }\n}\n\nmodule back_panel() {\n    difference() {\n        // Main back panel\n        translate([0, 0, base_thickness])\n            cube([base_width, wall_thickness, holder_height - base_thickness]);\n        \n        // Top slanted cut\n        translate([0, wall_thickness, holder_height])\n            rotate([0, 0, -top_angle])\n                cube([base_width, wall_thickness*2, wall_thickness*3]);\n    }\n}\n\nmodule side_panel(side) {\n    // Left (-1) or right (1) side panel\n    translate([side * (base_width/2 - wall_thickness/2), base_depth/2, base_thickness])\n        cube([wall_thickness, base_depth/2, holder_height - base_thickness]);\n}\n\nmodule front_lip() {\n    // Curved front lip\n    difference() {\n        // Main lip\n        translate([0, base_depth - wall_thickness, base_thickness])\n            cube([base_width, wall_thickness, holder_height*0.6]);\n        \n        // Rounded top\n        for(i = [0:5]) {\n            translate([i*base_width/5, base_depth - wall_thickness - 1, base_thickness + holder_height*0.6])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*2, r=wall_thickness, $fn=20);\n        }\n    }\n}\n\nmodule marker_holes() {\n    // Create holes for markers\n    for(x = [0:slots_x-1]) {\n        for(y = [0:slots_y-1]) {\n            translate([\n                wall_thickness + marker_diameter/2 + x*slot_spacing_x,\n                wall_thickness + marker_diameter/2 + y*slot_spacing_y,\n                base_thickness + marker_height*0.1\n            ]) {\n                // Main hole\n                cylinder(h=marker_height*0.9, r=marker_diameter/2 + 0.5, $fn=32);\n                \n                // Tapered bottom\n                cylinder(h=marker_height*0.1, r1=marker_diameter/2 + 0.5, r2=marker_diameter/3, $fn=32);\n            }\n        }\n    }\n}\n\nmodule support_braces() {\n    // Interior support braces\n    for(x = [1:slots_x-2]) {\n        translate([\n            wall_thickness + x*slot_spacing_x,\n            wall_thickness/2,\n            base_thickness + 5\n        ]) {\n            cube([wall_thickness, base_depth - wall_thickness, wall_thickness]);\n        }\n    }\n}\n\nmodule label_area() {\n    // Flat label area on front\n    translate([base_width/2 - 15, base_depth - wall_thickness - 2, base_thickness + holder_height*0.7])\n        cube([30, 0.5, 10]);\n}\n\n// Main assembly\nunion() {\n    base();\n    back_panel();\n    side_panel(-1);\n    side_panel(1);\n    front_lip();\n    support_braces();\n    label_area();\n    \n    // Main body (hollow)\n    difference() {\n        // Outer shell\n        translate([0, 0, base_thickness])\n            cube([base_width, base_depth, holder_height - base_thickness]);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, base_thickness])\n            cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, holder_height - base_thickness]);\n        \n        // Marker holes\n        marker_holes();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "pylons",
    "openscad_code": "// Realistic Medium-Complexity Pylons (Cable Management Towers) for Office Desk\n// Height: 120 mm, Base: 60 mm, Wall thickness: 2 mm\n\n$fn = 50;\n\nmodule tower_body() {\n    difference() {\n        // Main tower shell\n        cylinder(h = 120, d1 = 50, d2 = 45, center = false);\n        // Hollow center\n        translate([0, 0, 2])\n            cylinder(h = 118, d1 = 46, d2 = 41, center = false);\n    }\n}\n\nmodule base_ring() {\n    difference() {\n        // Wide base ring for stability\n        cylinder(h = 8, d = 60, center = false);\n        // Remove center to create ring\n        cylinder(h = 8, d = 50, center = false);\n    }\n}\n\nmodule cable_slots() {\n    // Three evenly spaced cable slots\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([23, 0, 25])\n                cube([8, 2, 70], center = true);\n    }\n}\n\nmodule top_cap() {\n    difference() {\n        // Cap with slight dome\n        translate([0, 0, 120])\n            cylinder(h = 5, d1 = 45, d2 = 47, center = false);\n        // Hollow center for cables\n        translate([0, 0, 122])\n            cylinder(h = 5, d = 41, center = false);\n    }\n}\n\nmodule rubber_feet() {\n    // Four rubber feet pads\n    for (x = [-20, 20])\n        for (y = [-20, 20])\n            translate([x, y, 0])\n                cylinder(h = 2, d = 8, center = false);\n}\n\nmodule cable_organizer_ribs() {\n    // Internal ribs for cable separation\n    for (z = [40:40:120]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 1, d = 46, center = false);\n                cube([40, 2, 1], center = true);\n                rotate([0, 0, 120])\n                    cube([40, 2, 1], center = true);\n                rotate([0, 0, 240])\n                    cube([40, 2, 1], center = true);\n            }\n    }\n}\n\nmodule mounting_holes() {\n    // Two holes for optional desk mounting\n    translate([25, 0, 4])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 4, center = true);\n    translate([-25, 0, 4])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 4, center = true);\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    base_ring();\n    \n    // Mounting holes in base\n    mounting_holes();\n    \n    // Rubber feet\n    rubber_feet();\n    \n    // Main tower\n    tower_body();\n    \n    // Cable slots\n    cable_slots();\n    \n    // Internal organizer\n    cable_organizer_ribs();\n    \n    // Top cap\n    top_cap();\n}",
    "renders": true
  },
  {
    "office_supply": "flags",
    "openscad_code": "// Flag holder desk set – realistic style, medium complexity\n// Overall footprint ~120 x 80 mm, height ~100 mm\n// Wall thickness 2 mm for 3D printing\n\n$fn = 30;                    // smooth curves\n\n// ---------- Parameters ----------\npole_d   = 8;                // main pole diameter\nflag_w   = 45;               // flag width\nflag_h   = 30;               // flag height\nbase_w   = 120;              // base width\nbase_d   = 80;               // base depth\nbase_h   = 12;               // base height\nholder_w = 70;               // central holder block width\nholder_d = 30;               // central holder block depth\nholder_h = 20;               // central holder block height\npole_top = 100;              // pole top height\npen_r    = 4;                // pen hole radius\npen_h    = 12;               // pen hole depth\n\n// ---------- Modules ----------\nmodule base() {\n    difference() {\n        // solid base\n        cube([base_w, base_d, base_h], center=true);\n\n        // underside lightening pockets\n        for (x = [-40, 0, 40])\n            translate([x, 0, -base_h/2 + 2])\n                cube([30, 60, 4], center=true);\n    }\n}\n\nmodule pole() {\n    // main vertical pole\n    cylinder(h = pole_top, d = pole_d, center=false);\n\n    // top finial (ball)\n    translate([0, 0, pole_top])\n        sphere(d = pole_d + 2);\n}\n\nmodule flag() {\n    // flag sheet\n    translate([pole_d/2, 0, pole_top*0.7])\n        cube([flag_w, flag_h, 2]);\n\n    // grommet disks\n    for (pos = [[0, 0], [0, flag_h - 10]])\n        translate([pole_d/2 + 2, pos.y, pole_top*0.7 + pos.y/flag_h*2 + flag_h/2 - 2])\n            cylinder(h = 2, d = 6, center=false);\n}\n\nmodule holder_block() {\n    difference() {\n        // main block\n        cube([holder_w, holder_d, holder_h], center=true);\n\n        // pole hole\n        translate([0, 0, 0])\n            cylinder(h = holder_h + 2, d = pole_d + 0.5, center=true);\n\n        // pen holes\n        for (i = [-1, 1])\n            translate([i * 22, 0, -holder_h/2])\n                cylinder(h = pen_h, d = pen_r*2);\n    }\n}\n\n// ---------- Assembly ----------\nunion() {\n    // base\n    base();\n\n    // holder block on base\n    translate([0, 0, base_h/2 + holder_h/2])\n        holder_block();\n\n    // pole\n    translate([0, 0, base_h + holder_h/2])\n        pole();\n\n    // flag\n    flag();\n}",
    "renders": true
  },
  {
    "office_supply": "lines",
    "openscad_code": "// Lines bookshelf unit\n// Realistic style, medium complexity\n// Dimensions: 100mm W x 30mm D x 150mm H\n\n// Wall thickness\nwall = 2;\n\n// Main frame\nmodule frame() {\n    // Left side panel\n    translate([0, 0, 0])\n        cube([wall, 30, 150]);\n    \n    // Right side panel\n    translate([100-wall, 0, 0])\n        cube([wall, 30, 150]);\n    \n    // Top panel\n    translate([0, 0, 150-wall])\n        cube([100, 30, wall]);\n    \n    // Bottom panel\n    translate([0, 0, 0])\n        cube([100, 30, wall]);\n    \n    // Back panel\n    translate([0, 30-wall, 0])\n        cube([100, wall, 150]);\n}\n\n// Shelves with support strips\nmodule shelves() {\n    // Shelf positions\n    shelf_heights = [30, 60, 90, 120];\n    \n    for(h = shelf_heights) {\n        // Main shelf\n        translate([wall, wall, h])\n            cube([100-2*wall, 30-2*wall, wall]);\n        \n        // Front support strip\n        translate([wall, 0, h])\n            cube([100-2*wall, wall, wall]);\n        \n        // Rear support strip\n        translate([wall, 30-wall, h])\n            cube([100-2*wall, wall, wall]);\n    }\n}\n\n// Vertical dividers\nmodule dividers() {\n    // Divider positions\n    div_positions = [25, 50, 75];\n    \n    for(x = div_positions) {\n        translate([x, wall, wall])\n            cube([wall, 30-2*wall, 150-2*wall]);\n    }\n}\n\n// Base feet\nmodule feet() {\n    foot_size = 5;\n    foot_height = 3;\n    \n    // Front feet\n    translate([foot_size, foot_size/2, -foot_height])\n        cube([wall*2, foot_size, foot_height]);\n    \n    translate([100-foot_size-wall*2, foot_size/2, -foot_height])\n        cube([wall*2, foot_size, foot_height]);\n    \n    // Rear feet\n    translate([foot_size, 30-foot_size*1.5, -foot_height])\n        cube([wall*2, foot_size, foot_height]);\n    \n    translate([100-foot_size-wall*2, 30-foot_size*1.5, -foot_height])\n        cube([wall*2, foot_size, foot_height]);\n}\n\n// Assembly\nunion() {\n    frame();\n    shelves();\n    dividers();\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "chalk",
    "openscad_code": "// Chalk Holder Furniture - Office Desk Organizer\n// Realistic style, medium complexity\n// Dimensions: 100mm x 80mm x 45mm\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nbase_height = 8;\nslot_width = 12;\nslot_depth = 35;\nnum_slots = 5;\nchalk_diameter = 10;\nchalk_length = 75;\n\n// Main module\nmodule chalk_holder() {\n    // Base structure\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            cube([100, 80, base_height], center=true);\n        \n        // Rounded edges on base\n        for(x = [-48, 48]) {\n            for(y = [-38, 38]) {\n                translate([x, y, base_height])\n                    cylinder(h=base_height+1, r=2, center=false);\n            }\n        }\n    }\n    \n    // Chalk slots\n    for(i = [0:num_slots-1]) {\n        x_pos = -40 + i * 20;\n        \n        // Slot structure\n        translate([x_pos, 0, base_height + slot_depth/2])\n            difference() {\n                // Outer slot\n                cube([slot_width, 70, slot_depth], center=true);\n                \n                // Inner cavity for chalk\n                translate([0, 0, -wall_thickness])\n                    cube([chalk_diameter + 2, 66, slot_depth - wall_thickness], center=true);\n                \n                // Top chamfer\n                translate([0, 0, slot_depth/2 - 2])\n                    cube([slot_width + 1, 70.1, 5], center=true);\n            }\n        \n        // Front lip\n        translate([x_pos, 0, base_height + slot_depth - 1])\n            cube([slot_width, 70, 2], center=true);\n        \n        // Back support\n        translate([x_pos, 0, base_height + slot_depth/2 + 5])\n            difference() {\n                cube([slot_width, 70, 10], center=true);\n                translate([0, 0, -5])\n                    cube([slot_width - wall_thickness*2, 66, 10], center=true);\n            }\n    }\n    \n    // Side supports\n    difference() {\n        // Left support\n        translate([-50 - wall_thickness, 0, base_height + 25])\n            cube([wall_thickness*2, 74, 50], center=true);\n        \n        // Right support\n        translate([50 + wall_thickness, 0, base_height + 25])\n            cube([wall_thickness*2, 74, 50], center=true);\n        \n        // Cutouts for aesthetics\n        for(z = [10, 30, 45]) {\n            translate([-50 - wall_thickness, 0, base_height + z])\n                cylinder(h=wall_thickness*2 + 1, r=8, center=true);\n            translate([50 + wall_thickness, 0, base_height + z])\n                cylinder(h=wall_thickness*2 + 1, r=8, center=true);\n        }\n    }\n    \n    // Bottom reinforcements\n    for(i = [0:num_slots-1]) {\n        x_pos = -40 + i * 20;\n        translate([x_pos, 0, base_height/2])\n            cube([slot_width - 2, 60, base_height], center=true);\n    }\n    \n    // Label area\n    translate([0, -35 - wall_thickness, base_height + 5])\n        cube([90, wall_thickness*2, 20], center=true);\n}\n\n// Render the model\nchalk_holder();",
    "renders": true
  },
  {
    "office_supply": "paint",
    "openscad_code": "// Paint canister furniture item\n// Dimensions: 110mm height x 80mm diameter\n// Wall thickness: 2mm throughout\n\n$fn = 50;\n\n// Main paint canister body\nmodule canister_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=100, d=80);\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cylinder(h=98, d=76);\n    }\n}\n\n// Top rim/lip of can\nmodule can_top_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, 100])\n            cylinder(h=8, d=84);\n        \n        // Inner hollow\n        translate([0, 0, 100])\n            cylinder(h=10, d=80);\n    }\n}\n\n// Handle attachment points\nmodule handle_mounts() {\n    // Left mount\n    translate([-42, 0, 70])\n        rotate([90, 0, 0])\n            cylinder(h=5, d=8);\n    \n    // Right mount\n    translate([42, 0, 70])\n        rotate([90, 0, 0])\n            cylinder(h=5, d=8);\n}\n\n// Carrying handle\nmodule handle() {\n    // Handle grip\n    translate([-42, 0, 70])\n        rotate([0, 0, 90])\n            difference() {\n                // Handle shape\n                rotate_extrude(angle=180)\n                    translate([42, 0, 0])\n                        circle(r=4);\n                \n                // Hollow center\n                rotate_extrude(angle=180)\n                    translate([42, 0, 0])\n                        circle(r=2);\n            }\n}\n\n// Paint label band\nmodule label_band() {\n    translate([0, 0, 40])\n        difference() {\n            cylinder(h=25, d=82);\n            cylinder(h=27, d=78);\n        }\n}\n\n// Opening lid\nmodule lid() {\n    // Main lid disk\n    translate([0, 0, 108])\n        cylinder(h=2, d=76);\n    \n    // Lid rim\n    translate([0, 0, 108])\n        cylinder(h=4, d1=76, d2=78);\n    \n    // Handle on lid\n    translate([0, 0, 112])\n        cylinder(h=6, d=12);\n    translate([0, 0, 118])\n        sphere(d=12);\n}\n\n// Drip spout\nmodule spout() {\n    // Spout base\n    translate([0, 0, 108])\n        cylinder(h=8, d1=60, d2=45);\n    \n    // Spout neck\n    translate([0, 0, 116])\n        cylinder(h=12, d=45);\n    \n    // Spout opening\n    translate([0, 0, 128])\n        cylinder(h=2, d=40);\n}\n\n// Reinforcement ribs inside\nmodule ribs() {\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n            translate([37, 0, 50])\n                cube([2, 2, 50], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body parts\n    canister_body();\n    can_top_rim();\n    \n    // Handle assembly\n    handle_mounts();\n    handle();\n    \n    // Label area\n    label_band();\n    \n    // Lid components\n    lid();\n    spout();\n    \n    // Internal structure\n    ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "tape",
    "openscad_code": "// Office tape furniture item - a desk tape dispenser\n// Realistic style with medium complexity\n// Dimensions: 110mm x 60mm x 45mm (suitable for 3D printing)\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body dimensions\nbody_length = 110;\nbody_width = 60;\nbody_height = 25;\n\n// Tape roll area\ntape_diameter = 50;\ntape_width = 19;\ntape_core_diameter = 25;\n\n// Cutting blade\nblade_length = 40;\nblade_width = 8;\nblade_height = 3;\n\n// Feet dimensions\nfoot_diameter = 8;\nfoot_height = 5;\n\nmodule tape_dispenser() {\n    // Main body base\n    difference() {\n        // Solid base\n        cube([body_length, body_width, body_height], center = true);\n        \n        // Tape roll cavity\n        translate([0, 0, -body_height/2 + wall_thickness])\n            cylinder(h = body_height, d = tape_diameter + wall_thickness*2, $fn = 64);\n        \n        // Tape core holder hole\n        translate([-body_length/2 + 20, 0, -body_height/2 + wall_thickness])\n            rotate([0, 90, 0])\n                cylinder(h = body_width, d = 10, $fn = 32);\n    }\n    \n    // Top surface with slight curve\n    translate([0, 0, body_height/2])\n        scale([1, 1, 0.3])\n            sphere(d = body_width, $fn = 64);\n    \n    // Tape roll holder pin\n    translate([-body_length/2 + 20, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = body_width - wall_thickness*2, d = 8, $fn = 32);\n    \n    // Cutting blade support\n    translate([body_length/2 - 20, 0, body_height/2 - blade_height/2])\n        cube([blade_length, blade_width, blade_height], center = true);\n    \n    // Cutting blade teeth\n    for(i = [-1, 0, 1]) {\n        translate([body_length/2 - 20 + blade_length/2 - 5, i*3, body_height/2 + blade_height/2])\n            cube([2, 1, 3]);\n    }\n    \n    // Non-slip feet\n    module foot(x, y) {\n        translate([x, y, -body_height/2 - foot_height/2])\n            cylinder(h = foot_height, d = foot_diameter, $fn = 32);\n    }\n    \n    // Four feet at corners\n    foot(-body_length/2 + 15, -body_width/2 + 15);\n    foot(-body_length/2 + 15, body_width/2 - 15);\n    foot(body_length/2 - 15, -body_width/2 + 15);\n    foot(body_length/2 - 15, body_width/2 - 15);\n    \n    // Side grips\n    module grip(y_offset) {\n        for(i = [-2:2]) {\n            translate([-body_length/2 + 10 + i*15, y_offset, 0])\n                cylinder(h = body_height - wall_thickness, d = 5, $fn = 32);\n        }\n    }\n    \n    grip(-body_width/2 - 2);\n    grip(body_width/2 + 2);\n    \n    // Weight cavity (optional - fill with coins)\n    translate([body_length/2 - 35, 0, -body_height/2 + wall_thickness + 5])\n        cube([20, 30, 5]);\n}\n\n// Render the tape dispenser\ntape_dispenser();",
    "renders": true
  },
  {
    "office_supply": "whistle",
    "openscad_code": "// Office whistle furniture piece\n// Dimensions: 120mm long, 40mm wide, 50mm tall\nwall_thickness = 2;\n\nmodule whistle_body() {\n    // Main whistle chamber\n    difference() {\n        // Outer shell\n        translate([0, 0, 20])\n        scale([1, 0.7, 0.5])\n        sphere(d=40);\n        \n        // Inner chamber\n        translate([0, 0, 20])\n        scale([1, 0.65, 0.45])\n        sphere(d=36);\n    }\n}\n\nmodule mouthpiece() {\n    // Rectangular mouthpiece\n    difference() {\n        // Main mouthpiece\n        translate([-50, 0, 15])\n        rotate([0, 15, 0])\n        cube([40, 25, 15], center=true);\n        \n        // Air channel\n        translate([-50, 0, 15])\n        rotate([0, 15, 0])\n        cube([35, 20, 8], center=true);\n    }\n}\n\nmodule air_window() {\n    // Air window on top\n    difference() {\n        // Window frame\n        translate([10, 0, 35])\n        cube([15, 30, 5], center=true);\n        \n        // Window opening\n        translate([10, 0, 37])\n        cube([12, 24, 8], center=true);\n    }\n}\n\nmodule support_base() {\n    // Furniture-style base with legs\n    // Main platform\n    translate([0, 0, 0])\n    cube([110, 60, 5], center=true);\n    \n    // Support legs\n    for(x = [-40, 40]) {\n        for(y = [-20, 20]) {\n            translate([x, y, -15])\n            cylinder(h=20, d=8);\n        }\n    }\n}\n\nmodule ergonomic_grip() {\n    // Handle/grip area\n    translate([-25, 0, 30])\n    rotate([0, 90, 0])\n    cylinder(h=60, d1=25, d2=20);\n    \n    // Grip ridges\n    for(i = [-20:10:20]) {\n        translate([-25, i, 30])\n        rotate([0, 90, 0])\n        cylinder(h=50, d=23, $fn=6);\n    }\n}\n\nmodule structural_reinforcement() {\n    // Internal support ribs\n    for(i = [-15:15:15]) {\n        translate([i, 0, 20])\n        rotate([0, 90, 0])\n        cube([2, 35, 20], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    support_base();\n    \n    // Main whistle assembly\n    translate([0, 0, 10]) {\n        whistle_body();\n        mouthpiece();\n        air_window();\n        structural_reinforcement();\n    }\n    \n    // Ergonomic handle\n    ergonomic_grip();\n    \n    // Office-style details\n    // Label plate\n    translate([30, 25, 5])\n    cube([20, 10, 2], center=true);\n    \n    // Cable management notch\n    translate([50, 0, 5])\n    cube([5, 30, 3], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "scoreboard",
    "openscad_code": "// Scoreboard Furniture Module\n$fn = 50;\n\n// Dimensions in mm\nboard_width = 80;\nboard_height = 60;\nboard_thickness = 4;\n\nframe_width = 6;\nleg_height = 45;\nleg_width = 4;\nbase_width = 40;\nbase_thickness = 3;\n\n// Main board with rounded corners\nmodule scoreboard() {\n    // Frame\n    difference() {\n        // Outer frame\n        cube([board_width, board_height, board_thickness]);\n        // Inner cutout\n        translate([frame_width, frame_width, -1])\n            cube([board_width-2*frame_width, board_height-2*frame_width, board_thickness+2]);\n    }\n    \n    // Score display areas\n    for(i = [0:1]) {\n        translate([10 + i*40, board_height/2 - 10, board_thickness/2])\n            cube([20, 20, 1]);\n    }\n    \n    // Team labels\n    translate([5, 10, board_thickness/2])\n        cube([30, 8, 1]);\n    \n    translate([45, 10, board_thickness/2])\n        cube([30, 8, 1]);\n    \n    // Support structure\n    translate([board_width/2 - leg_width/2, 0, -leg_height])\n        cube([leg_width, leg_width, leg_height]);\n    \n    // Base\n    translate([board_width/2 - base_width/2, -base_width/2, -leg_height-base_thickness])\n        cube([base_width, base_width, base_thickness]);\n    \n    // Reinforcement ribs\n    for(i = [-1:1]) {\n        translate([board_width/2 + i*15, 0, -leg_height/2])\n            cube([2, 2, leg_height/2]);\n    }\n    \n    // Peg holes for score markers\n    for(i = [0:9]) {\n        translate([15 + i*5, board_height/2 - 5, board_thickness-1])\n            cylinder(h=2, d=2);\n    }\n}\n\n// Score markers\nmodule score_marker() {\n    translate([0, 0, 5])\n        cylinder(h=10, d=3);\n    translate([0, 0, 10])\n        sphere(d=4);\n}\n\n// Assembly\nscoreboard();\n\n// Example markers\ntranslate([15, board_height/2 - 5, board_thickness])\n    score_marker();\n\ntranslate([35, board_height/2 - 5, board_thickness])\n    score_marker();",
    "renders": true
  },
  {
    "office_supply": "timer",
    "openscad_code": "// Realistic Office Timer Furniture Item - Medium Complexity\n// Kitchen/Office countdown timer with stand and dial details\n\n$fn = 30;\n\n// Overall dimensions\ntimer_height = 85;\ntimer_width = 65;\ntimer_depth = 40;\nwall_thickness = 2;\n\n// Base stand\nmodule base_stand() {\n    // Main base platform\n    translate([0, 0, 2])\n    difference() {\n        cube([timer_width + 20, timer_depth + 15, 8], center=true);\n        translate([0, 0, -1])\n        cube([timer_width + 16, timer_depth + 11, 10], center=true);\n    }\n    \n    // Support ribs for structure\n    for(i = [-1, 1]) {\n        translate([i * (timer_width/2 - 5), 0, 6])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=8, r1=4, r2=6);\n            cylinder(h=9, r1=2, r2=4);\n        }\n    }\n}\n\n// Main timer body\nmodule timer_body() {\n    // Outer shell\n    difference() {\n        translate([0, 0, 15])\n        cube([timer_width, timer_depth, timer_height - 15], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 15])\n        cube([timer_width - wall_thickness*2, timer_depth - wall_thickness*2, timer_height - 10], center=true);\n    }\n    \n    // Top rounded detail\n    translate([0, 0, timer_height - 7])\n    scale([1, 0.8, 0.5])\n    sphere(d=timer_width - 10);\n}\n\n// Timer face\nmodule timer_face() {\n    // Main dial\n    translate([0, timer_depth/2 + 0.5, timer_height/2 + 5])\n    rotate([0, 0, 0])\n    difference() {\n        cylinder(h=wall_thickness*2, d=timer_width - 20);\n        cylinder(h=wall_thickness*2 + 1, d=timer_width - 30);\n    }\n    \n    // Hour markers (12 positions)\n    for(i = [0:11]) {\n        angle = i * 30;\n        translate([0, timer_depth/2 + 1, timer_height/2 + 5])\n        rotate([0, 0, angle])\n        translate([(timer_width - 25)/2, 0, 0])\n        cube([2, 1, wall_thickness*2]);\n    }\n    \n    // Center knob\n    translate([0, timer_depth/2 + 2, timer_height/2 + 5])\n    cylinder(h=5, d=8);\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Start/stop button\n    translate([timer_width/2 - 8, -timer_depth/2 - 2, timer_height/2 - 5])\n    cube([6, 4, 3], center=true);\n    \n    // Reset button\n    translate([timer_width/2 - 8, -timer_depth/2 - 2, timer_height/2 + 5])\n    cube([6, 4, 2], center=true);\n}\n\n// Display window\nmodule display_window() {\n    translate([0, timer_depth/2 - 2, timer_height/2 + 15])\n    difference() {\n        cube([timer_width - 30, 4, 12], center=true);\n        cube([timer_width - 34, 5, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base_stand();\n    timer_body();\n    timer_face();\n    control_buttons();\n    display_window();\n}",
    "renders": true
  },
  {
    "office_supply": "clock",
    "openscad_code": "// Desk Clock with Stand - OpenSCAD\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\n// Overall dimensions\nclock_diameter = 80;\nclock_thickness = 12;\nstand_width = 100;\nstand_depth = 40;\nstand_height = 35;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Clock face\nmodule clock_face() {\n    // Main body\n    difference() {\n        cylinder(h = clock_thickness, d = clock_diameter);\n        translate([0, 0, -0.1])\n            cylinder(h = clock_thickness + 0.2, d = clock_diameter - wall_thickness * 2);\n    }\n    \n    // Bezel ring\n    translate([0, 0, clock_thickness - 1])\n        cylinder(h = 2, d = clock_diameter + 2);\n}\n\n// Clock numbers\nmodule clock_numbers() {\n    for (i = [1:12]) {\n        rotate([0, 0, i * 30])\n            translate([0, clock_diameter/2 - 10, clock_thickness - 0.5])\n                cube([2, 6, 1], center = true);\n    }\n}\n\n// Clock hands\nmodule clock_hands() {\n    // Hour hand\n    color(\"black\")\n    rotate([0, 0, 45])\n        translate([0, 0, clock_thickness - 2])\n            linear_extrude(height = 2)\n                polygon(points = [[0, 0], [-1.5, 0], [-1, 15], [0, 20], [1, 15], [1.5, 0]]);\n    \n    // Minute hand\n    color(\"black\")\n    rotate([0, 0, 180])\n        translate([0, 0, clock_thickness - 1])\n            linear_extrude(height = 1)\n                polygon(points = [[0, 0], [-1, 0], [-0.5, 25], [0, 30], [0.5, 25], [1, 0]]);\n    \n    // Center cap\n    translate([0, 0, clock_thickness - 2.5])\n        cylinder(h = 3, d = 6);\n}\n\n// Clock stand base\nmodule stand_base() {\n    // Main base\n    difference() {\n        cube([stand_width, stand_depth, stand_height], center = true);\n        translate([0, 0, stand_height/2 - wall_thickness])\n            cube([stand_width - wall_thickness*2, stand_depth - wall_thickness*2, stand_height], center = true);\n    }\n    \n    // Front lip\n    translate([0, stand_depth/2 - 2, 0])\n        cube([stand_width, 4, stand_height/2]);\n    \n    // Support rib\n    translate([0, 0, 0])\n        cube([wall_thickness * 3, stand_depth, stand_height/2]);\n}\n\n// Clock mount\nmodule clock_mount() {\n    // Support arms\n    translate([-stand_width/4, 0, stand_height/2])\n        cube([wall_thickness * 4, stand_depth - 10, 15]);\n    \n    translate([stand_width/4, 0, stand_height/2])\n        cube([wall_thickness * 4, stand_depth - 10, 15]);\n    \n    // Mounting plate\n    translate([0, 0, stand_height/2 + 15])\n    difference() {\n        cube([clock_diameter + 10, 8, 5], center = true);\n        translate([0, 0, -0.1])\n            cube([clock_diameter - 4, 12, 5.2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Clock assembly\n    translate([0, 0, stand_height/2 + 20])\n    union() {\n        clock_face();\n        clock_numbers();\n        clock_hands();\n    }\n    \n    // Stand assembly\n    stand_base();\n    clock_mount();\n}",
    "renders": true
  },
  {
    "office_supply": "stopwatch",
    "openscad_code": "// Stopwatch Furniture Item - Office Desk Organizer Style\n// Realistic medium-complexity stopwatch with functional furniture elements\n\n// Overall dimensions (mm)\n$fn = 50;\nbody_diameter = 80;\nbody_thickness = 12;\nbase_height = 8;\nstand_height = 35;\nbutton_height = 5;\nbutton_diameter = 8;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body - hollow cylinder for storage\nmodule stopwatch_body() {\n    difference() {\n        // Outer body\n        cylinder(h=body_thickness, d=body_diameter);\n        \n        // Inner cavity for storage\n        translate([0, 0, -0.1])\n            cylinder(h=body_thickness+0.2, d=body_diameter-2*wall);\n    }\n}\n\n// Watch face with recessed details\nmodule watch_face() {\n    // Face plate\n    translate([0, 0, body_thickness])\n        cylinder(h=2, d=body_diameter-4);\n    \n    // Digital display area\n    translate([0, 0, body_thickness+2.1])\n        cube([30, 15, 0.5], center=true);\n    \n    // Time markers\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n            translate([body_diameter/2-6, 0, body_thickness+1])\n                cube([3, 1, 1], center=true);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Start/stop button\n    translate([body_diameter/4, body_diameter/3, body_thickness+button_height/2])\n        cylinder(h=button_height, d=button_diameter);\n    \n    // Reset button\n    translate([-body_diameter/4, body_diameter/3, body_thickness+button_height/2])\n        cylinder(h=button_height, d=button_diameter);\n    \n    // Mode button\n    translate([0, -body_diameter/3, body_thickness+button_height/2])\n        cylinder(h=button_height, d=button_diameter);\n}\n\n// Support stand with cable management\nmodule support_stand() {\n    difference() {\n        // Main stand\n        translate([0, 0, -base_height/2])\n            cube([body_diameter/2, body_diameter/3, base_height+stand_height], center=true);\n        \n        // Cable routing hole\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h=body_diameter/2, d=8);\n    }\n    \n    // Base plate for stability\n    translate([0, 0, -base_height])\n        cube([body_diameter*0.8, body_diameter*0.6, base_height], center=true);\n}\n\n// Pen holder feature\nmodule pen_holders() {\n    // Left pen slot\n    translate([-body_diameter/2-5, 0, body_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=12);\n    \n    // Right pen slot\n    translate([body_diameter/2+5, 0, body_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=12);\n}\n\n// Assembly\nunion() {\n    // Main components\n    stopwatch_body();\n    watch_face();\n    control_buttons();\n    support_stand();\n    pen_holders();\n    \n    // Additional structural ribs for stability\n    for(i=[-1, 1]) {\n        translate([i*body_diameter/4, 0, -stand_height/2])\n            cube([wall*2, body_diameter/4, stand_height]);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "doll",
    "openscad_code": "// Doll-sized office chair (overall ~1:12 scale)\n// Seat height 50 mm, total height 100 mm\n\n$fn = 32;\n\n// Overall dimensions\nchair_w = 55;     // outer width at armrests\nchair_d = 55;     // outer depth\nchair_h = 100;    // total height\nseat_h = 50;      // seat top height\n\n// Wall thickness\nwall = 2;\n\n// Central pole\npole_r = 6;\n\n// Seat cushion\nmodule seat() {\n    difference() {\n        // Main cushion block\n        cube([40, 40, 8], center = true);\n        // Gentle top rounding\n        translate([0, 0, 4])\n            scale([1, 1, 0.2])\n                sphere(d = 38);\n    }\n}\n\n// Five-star base leg\nmodule star_leg(len = 35) {\n    hull() {\n        // Caster stem\n        cylinder(h = 8, d1 = 6, d2 = 4, center = false);\n        // Transition block\n        translate([0, 0, 8])\n            cube([6, 6, 4], center = true);\n        // Main leg beam\n        translate([len/2, 0, 10])\n            cube([len, 6, 6], center = true);\n    }\n}\n\n// Backrest with lumbar curve\nmodule backrest() {\n    difference() {\n        // Main back panel\n        cube([38, 4, 40], center = true);\n        // Lumbar curve\n        translate([0, 0, -5])\n            cube([30, 4.1, 20], center = true);\n    }\n}\n\n// Armrest with support\nmodule armrest() {\n    // Horizontal rest\n    cube([4, 25, 2], center = true);\n    // Vertical post\n    translate([0, -10, -15])\n        cube([4, 4, 30], center = true);\n}\n\n// Main chair assembly\nunion() {\n    // Gas lift pole\n    translate([0, 0, seat_h/2])\n        cylinder(h = seat_h, r = pole_r);\n\n    // Five-star base\n    for (a = [0:72:359])\n        rotate([0, 0, a])\n            translate([0, 0, 0])\n                star_leg();\n\n    // Caster wheels\n    for (a = [0:72:359])\n        rotate([0, 0, a])\n            translate([32, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r = 3);\n\n    // Seat cushion\n    translate([0, 0, seat_h + 4])\n        seat();\n\n    // Backrest\n    translate([0, -18, seat_h + 20])\n        backrest();\n\n    // Left armrest\n    translate([-21, 0, seat_h + 15])\n        armrest();\n\n    // Right armrest\n    translate([21, 0, seat_h + 15])\n        mirror([1, 0, 0])\n            armrest();\n}",
    "renders": true
  },
  {
    "office_supply": "figure",
    "openscad_code": "// Office Desk Chair - Realistic Style\n// Overall dimensions: ~120mm height, 100mm width, 110mm depth\n\n// Parameters\nseat_height = 45;\nback_height = 75;\nseat_width = 50;\nseat_depth = 50;\narmrest_height = 20;\nbase_radius = 30;\ncaster_radius = 6;\nwall = 2;\n\n// Central base cylinder\nmodule chair_base() {\n    difference() {\n        cylinder(h=10, r=base_radius, $fn=60);\n        translate([0,0,1]) cylinder(h=10, r=base_radius-wall, $fn=60);\n    }\n    \n    // Star base legs\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) {\n            translate([base_radius-5,0,5]) cube([25,10,10], center=true);\n        }\n    }\n}\n\n// Caster wheels\nmodule casters() {\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) {\n            translate([base_radius+15,0,0]) {\n                difference() {\n                    sphere(r=caster_radius, $fn=20);\n                    translate([0,0,-caster_radius]) cube([caster_radius*2,caster_radius*2,caster_radius], center=true);\n                }\n                translate([0,0,-caster_radius]) cylinder(h=2, r=caster_radius/2, $fn=10);\n            }\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    difference() {\n        cylinder(h=seat_height-10, r=8, $fn=30);\n        translate([0,0,1]) cylinder(h=seat_height-12, r=6, $fn=30);\n    }\n}\n\n// Seat cushion\nmodule seat() {\n    // Main seat\n    difference() {\n        translate([0,0,seat_height]) cube([seat_width, seat_depth, 8], center=true);\n        translate([0,0,seat_height+1]) cube([seat_width-wall, seat_depth-wall, 8], center=true);\n    }\n    \n    // Rounded front edge\n    translate([0,seat_depth/2,seat_height+4]) rotate([90,0,0]) {\n        difference() {\n            cylinder(h=seat_width, r=4, center=true, $fn=30);\n            translate([0,0,-seat_width/2-1]) cube([seat_width-wall, 8, seat_width], center=true);\n        }\n    }\n}\n\n// Backrest\nmodule backrest() {\n    // Main backrest\n    difference() {\n        translate([0,seat_depth/2-5,seat_height+back_height/2]) cube([seat_width, 6, back_height], center=true);\n        translate([0,seat_depth/2-5,seat_height+back_height/2]) cube([seat_width-wall, 8, back_height-wall], center=true);\n    }\n    \n    // Lumbar support curve\n    translate([0,seat_depth/2-5,seat_height+25]) rotate([90,0,0]) {\n        difference() {\n            cylinder(h=seat_width, r=20, center=true, $fn=30);\n            translate([0,-20,0]) cube([seat_width, 20, 40], center=true);\n        }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2-5,0,seat_height+armrest_height]) {\n        difference() {\n            cube([5, seat_depth-10, 4], center=false);\n            translate([1,1,1]) cube([3, seat_depth-12, 2], center=false);\n        }\n        translate([-2, seat_depth/2-15, 4]) cube([8, 5, 15], center=false);\n    }\n    \n    // Right armrest\n    translate([seat_width/2,0,seat_height+armrest_height]) {\n        difference() {\n            cube([5, seat_depth-10, 4], center=false);\n            translate([1,1,1]) cube([3, seat_depth-12, 2], center=false);\n        }\n        translate([-2, seat_depth/2-15, 4]) cube([8, 5, 15], center=false);\n    }\n}\n\n// Assembly\nunion() {\n    chair_base();\n    casters();\n    gas_lift();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "actionfigure",
    "openscad_code": "// Action Figure Office Chair (1:12 scale)\n// Overall height: 90mm (fits 1:12 action figures)\n\n// Chair parameters\nseat_height = 40;\nseat_width = 30;\nseat_depth = 30;\nback_height = 50;\narmrest_height = 15;\nwheelbase_diameter = 45;\ngas_spring_diameter = 8;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Gas spring cylinder\nmodule gas_spring() {\n    cylinder(h=25, d=gas_spring_diameter, $fn=20);\n}\n\n// 5-star wheel base\nmodule wheel_base() {\n    difference() {\n        cylinder(h=wall*2, d=wheelbase_diameter, $fn=5);\n        cylinder(h=wall*3, d=wheelbase_diameter-wall*2, $fn=5, center=true);\n    }\n    // Five caster arms\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) {\n            translate([wheelbase_diameter/2-wall, 0, wall]) {\n                cube([20, wall*2, wall*2]);\n                // Caster wheel\n                translate([20, 0, -2]) {\n                    rotate([90,0,0]) {\n                        cylinder(h=wall*2, d=6, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Adjustable height post\nmodule support_post() {\n    difference() {\n        cylinder(h=seat_height-10, d=gas_spring_diameter+4, $fn=20);\n        translate([0,0,-1]) {\n            cylinder(h=seat_height-8, d=gas_spring_diameter, $fn=20);\n        }\n    }\n}\n\n// Seat cushion\nmodule seat() {\n    translate([0,0,seat_height]) {\n        difference() {\n            // Main cushion\n            cube([seat_width, seat_depth, wall*3], center=true);\n            // Hollow underside\n            translate([0,0,-wall*1.5]) {\n                cube([seat_width-wall*2, seat_depth-wall*2, wall*2], center=true);\n            }\n            // Rounded edges\n            translate([0,0,wall*1.5]) {\n                cylinder(h=wall*3, d=seat_width-wall*2, $fn=40);\n            }\n        }\n    }\n}\n\n// Backrest\nmodule backrest() {\n    translate([0, -seat_depth/2+5, seat_height+back_height/2]) {\n        difference() {\n            cube([seat_width, wall*3, back_height], center=true);\n            // Lumbar curve\n            translate([0,0,0]) {\n                cylinder(h=back_height-wall*4, d=seat_width-wall*4, $fn=40);\n            }\n            // Hollow back\n            translate([0,wall*2,0]) {\n                cube([seat_width-wall*4, wall*2, back_height-wall*4], center=true);\n            }\n        }\n    }\n}\n\n// Armrest assembly\nmodule armrest() {\n    translate([seat_width/2+wall, 0, seat_height+armrest_height/2]) {\n        difference() {\n            cube([wall*3, seat_depth-10, armrest_height], center=true);\n            translate([0,0,-armrest_height/2+wall]) {\n                cube([wall, seat_depth-10-wall*2, armrest_height-wall*2], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    wheel_base();\n    translate([0,0,wall*2]) {\n        support_post();\n    }\n    translate([0,0,seat_height-10]) {\n        gas_spring();\n    }\n    seat();\n    backrest();\n    armrest();\n    mirror([1,0,0]) armrest();\n}",
    "renders": true
  },
  {
    "office_supply": "robot",
    "openscad_code": "// Robot Desk Organizer - Medium Complexity\n// Overall dimensions: 100x80x120mm\n\n$fn = 32;\nwall = 2;\n\nmodule body() {\n    // Main torso with storage compartment\n    difference() {\n        // Outer shell\n        cube([60, 40, 70], center=true);\n        // Storage cavity\n        translate([0, 0, 5])\n            cube([56, 36, 65], center=true);\n    }\n}\n\nmodule head() {\n    // Robot head with pen holder\n    difference() {\n        // Head shape\n        cube([50, 35, 35], center=true);\n        // Pen storage holes\n        for(x = [-15, -5, 5, 15])\n            for(y = [-8, 8])\n                translate([x, y, -15])\n                    cylinder(h=35, r=4);\n    }\n}\n\nmodule arms() {\n    // Left arm with tray\n    translate([-35, 0, 20])\n        rotate([0, 30, 0])\n            cube([30, 20, wall], center=true);\n    \n    // Right arm with tray\n    translate([35, 0, 20])\n        rotate([0, -30, 0])\n            cube([30, 20, wall], center=true);\n    \n    // Arm joints\n    translate([-35, 0, 20])\n        sphere(r=5);\n    translate([35, 0, 20])\n        sphere(r=5);\n}\n\nmodule legs() {\n    // Left leg with storage base\n    translate([-20, -25, -55]) {\n        cube([15, 15, 40], center=true);\n        // Foot base\n        translate([0, 0, -22])\n            cube([25, 25, 8], center=true);\n    }\n    \n    // Right leg with storage base\n    translate([20, -25, -55]) {\n        cube([15, 15, 40], center=true);\n        // Foot base\n        translate([0, 0, -22])\n            cube([25, 25, 8], center=true);\n    }\n}\n\nmodule tray() {\n    // Lower storage tray\n    difference() {\n        translate([0, 25, -30])\n            cube([80, 20, 15], center=true);\n        // Remove cavity\n        translate([0, 25, -23])\n            cube([76, 16, 12], center=true);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    translate([-12, -15, 10])\n        difference() {\n            cylinder(h=wall+1, r=8);\n            cylinder(h=wall+2, r=5);\n        }\n    \n    // Right eye\n    translate([12, -15, 10])\n        difference() {\n            cylinder(h=wall+1, r=8);\n            cylinder(h=wall+2, r=5);\n        }\n}\n\nmodule antenna() {\n    // Main antenna\n    translate([0, 0, 40])\n        cylinder(h=20, r=3);\n    // Antenna ball\n    translate([0, 0, 55])\n        sphere(r=5);\n}\n\n// Assembly\nunion() {\n    // Body\n    translate([0, 0, -30])\n        body();\n    \n    // Head\n    translate([0, 0, 45])\n        head();\n    \n    // Arms\n    arms();\n    \n    // Legs\n    legs();\n    \n    // Tray\n    tray();\n    \n    // Eyes\n    eyes();\n    \n    // Antenna\n    antenna();\n}",
    "renders": true
  },
  {
    "office_supply": "stuffedanimal",
    "openscad_code": "// StuffedAnimal Chair Module: Teddy-Bear Office Chair\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 36;               // Smooth curves\nwall = 2;               // Wall thickness for printing\nscaleFactor = 1.5;      // Overall scaling for ~100 mm height\n\nmodule bearBody() {\n    // Main torso (cushion)\n    difference() {\n        hull() {\n            translate([0, 0, 20]) sphere(d = 60);\n            translate([0, 0, 5])  sphere(d = 70);\n        }\n        // Remove bottom to flatten\n        translate([0, 0, -5]) cube([80, 80, 10], center = true);\n    }\n}\n\nmodule bearHead() {\n    // Head with muzzle\n    union() {\n        translate([0, 0, 55]) sphere(d = 40);\n        translate([0, -10, 45]) scale([1, 1.2, 0.8]) sphere(d = 20); // Muzzle\n    }\n}\n\nmodule bearEars() {\n    // Left ear\n    translate([-18, 0, 70]) rotate([0, -20, 0]) scale([1, 0.7, 0.7]) sphere(d = 15);\n    // Right ear\n    translate([18, 0, 70]) rotate([0, 20, 0]) scale([1, 0.7, 0.7]) sphere(d = 15);\n}\n\nmodule bearArms() {\n    // Left armrest\n    translate([-35, 0, 35]) rotate([0, 0, 30]) cylinder(h = 30, d1 = 15, d2 = 12);\n    // Right armrest\n    translate([35, 0, 35]) rotate([0, 0, -30]) cylinder(h = 30, d1 = 15, d2 = 12);\n}\n\nmodule chairBack() {\n    // Curved backrest\n    difference() {\n        hull() {\n            translate([0, -30, 45]) sphere(d = 60);\n            translate([0, -30, 20]) sphere(d = 70);\n        }\n        // Hollow back for weight reduction\n        translate([0, -25, 30]) scale([0.8, 0.6, 0.8]) sphere(d = 60);\n    }\n}\n\nmodule chairBase() {\n    // Central support post\n    cylinder(h = 20, d = 20);\n    \n    // 5-star base legs\n    for(a = [0:72:360]) {\n        rotate([0, 0, a])\n            translate([0, 30, -5]) \n                cylinder(h = 10, d1 = 15, d2 = 10);\n    }\n}\n\nmodule chairWheels() {\n    // 5 small wheels\n    for(a = [0:72:360]) {\n        rotate([0, 0, a])\n            translate([0, 40, -10]) \n                sphere(d = 8);\n    }\n}\n\nmodule bearChair() {\n    union() {\n        // Structural chair elements\n        chairBase();\n        chairWheels();\n        \n        // Stuffed animal elements\n        bearBody();\n        chairBack();\n        bearHead();\n        bearEars();\n        bearArms();\n        \n        // Eyes (simple spheres)\n        translate([-8, -10, 58]) sphere(d = 5);\n        translate([8, -10, 58]) sphere(d = 5);\n        \n        // Nose\n        translate([0, -20, 48]) sphere(d = 4);\n    }\n}\n\n// Assemble and scale\nscale([scaleFactor, scaleFactor, scaleFactor]) \n    bearChair();",
    "renders": true
  },
  {
    "office_supply": "blaze",
    "openscad_code": "// Blaze Office Chair - Realistic Style\n// Medium complexity office chair based on the Blaze design\n// Overall dimensions: ~120mm height, ~100mm width, ~110mm depth\n\n// Configuration\nseat_height = 45;\nback_height = 75;\narmrest_height = 65;\nbase_diameter = 60;\ncaster_diameter = 8;\n\n// Main seat assembly\nmodule seat_assembly() {\n    // Seat cushion - ergonomic shape\n    difference() {\n        // Main cushion\n        translate([0, 0, seat_height])\n            scale([1, 1.2, 0.4])\n                cube([50, 45, 15], center=true);\n        \n        // Cushion edge rounding\n        translate([0, 0, seat_height + 8])\n            scale([1.1, 1.3, 0.3])\n                cube([45, 40, 15], center=true);\n    }\n    \n    // Seat pan structure\n    translate([0, 0, seat_height - 5])\n        cube([48, 43, 5], center=true);\n}\n\n// Backrest assembly with lumbar support\nmodule backrest_assembly() {\n    // Main backrest frame\n    difference() {\n        translate([0, -22, seat_height + back_height/2])\n            cube([45, 8, back_height], center=true);\n        \n        // Lumbar curve cutout\n        translate([0, -18, seat_height + 30])\n            rotate([0, 15, 0])\n                cube([40, 12, 25], center=true);\n    }\n    \n    // Backrest cushion\n    translate([0, -18, seat_height + back_height/2 + 5])\n        scale([1, 0.3, 1])\n            cube([42, 12, back_height - 10], center=true);\n    \n    // Headrest\n    translate([0, -25, seat_height + back_height + 10])\n        scale([0.7, 0.4, 0.3])\n            cube([35, 15, 20], center=true);\n}\n\n// Armrest assembly\nmodule armrest_assembly() {\n    // Left armrest\n    translate([-28, 0, armrest_height]) {\n        // Support post\n        cylinder(h=20, r=3, center=false);\n        \n        // Arm pad\n        translate([0, 0, 10])\n            rotate([0, 20, 0])\n                cube([25, 8, 3], center=true);\n    }\n    \n    // Right armrest\n    mirror([1, 0, 0])\n        armrest_assembly();\n}\n\n// 5-star base with casters\nmodule base_assembly() {\n    // Central column\n    cylinder(h=seat_height - 10, r=6, center=false);\n    \n    // Gas lift cylinder\n    translate([0, 0, seat_height - 15])\n        cylinder(h=10, r=4, center=false);\n    \n    // 5-star base legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            // Leg\n            translate([0, 0, 0])\n                cube([30, 8, 5], center=true);\n            \n            // Caster\n            translate([27, 0, -caster_diameter/2])\n                sphere(d=8);\n            \n            // Caster stem\n            translate([27, 0, 0])\n                cylinder(h=5, r=2, center=false);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main chair components\n    seat_assembly();\n    backrest_assembly();\n    armrest_assembly();\n    \n    // Base\n    translate([0, 0, 0])\n        base_assembly();\n}",
    "renders": true
  },
  {
    "office_supply": "zara",
    "openscad_code": "// Zara Office Chair - Realistic Style\n// Medium complexity office furniture with ergonomic features\n\n// Chair dimensions (mm)\nseat_width = 50;\nseat_depth = 55;\nseat_thickness = 4;\nback_height = 65;\narmrest_height = 20;\nbase_diameter = 45;\nwheel_diameter = 8;\ngas_spring_height = 35;\ngas_spring_diameter = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Seat cushion with rounded edges\nmodule seat_cushion() {\n    difference() {\n        // Main seat\n        translate([0, 0, seat_thickness/2])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Rounded front edge\n        translate([0, seat_depth/2 - 5, seat_thickness])\n            sphere(r=5, $fn=20);\n        \n        // Rounded back edge\n        translate([0, -seat_depth/2 + 5, seat_thickness])\n            sphere(r=5, $fn=20);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    union() {\n        // Main back panel\n        translate([0, -seat_depth/2 - 5, back_height/2 + seat_thickness])\n            cube([seat_width - 10, wall_thickness, back_height], center=true);\n        \n        // Lumbar support curve\n        for(i = [-20:5:20]) {\n            translate([i, -seat_depth/2 - 5, 25])\n                cylinder(h=wall_thickness, r1=3, r2=1, center=true);\n        }\n        \n        // Headrest\n        translate([0, -seat_depth/2 - 5, back_height + seat_thickness + 5])\n            cube([30, 15, 8], center=true);\n    }\n}\n\n// Armrest with adjustment mechanism\nmodule armrest(side) {\n    translate([side * (seat_width/2 + 5), 0, seat_thickness + armrest_height/2]) {\n        // Vertical support\n        cylinder(h=armrest_height, r=3, center=true);\n        \n        // Horizontal pad\n        translate([0, seat_depth/4, armrest_height/2])\n            cube([20, 40, 4], center=true);\n    }\n}\n\n// 5-star base with wheels\nmodule base() {\n    union() {\n        // Central hub\n        cylinder(h=8, r=gas_spring_diameter/2 + 5, center=true);\n        \n        // 5 spokes with wheels\n        for(i = [0:72:360]) {\n            rotate([0, 0, i]) {\n                // Spoke\n                translate([base_diameter/2 - 5, 0, 0])\n                    cube([base_diameter - 10, 4, 6], center=true);\n                \n                // Wheel\n                translate([base_diameter/2, 0, -4])\n                    rotate([90, 0, 0])\n                        cylinder(h=wheel_diameter/2, r=wheel_diameter/2, center=true);\n            }\n        }\n    }\n}\n\n// Gas spring height adjustment\nmodule gas_spring() {\n    cylinder(h=gas_spring_height, r=gas_spring_diameter/2, center=true);\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, -gas_spring_height - 4])\n        base();\n    \n    // Gas spring\n    translate([0, 0, -gas_spring_height/2])\n        gas_spring();\n    \n    // Seat\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "volt",
    "openscad_code": "// OpenSCAD code for a realistic Volt office chair (medium complexity)\n// Overall dimensions: ~120mm height, 100mm width, 110mm depth\n// Wall thickness: 2mm throughout for 3D printability\n\n$fn = 32;\n\n// Main module\nmodule volt_office_chair() {\n    // Chair base and seat assembly\n    union() {\n        // 5-star base with casters\n        base_assembly();\n        \n        // Gas lift cylinder\n        translate([0, 0, 15]) gas_lift();\n        \n        // Seat mechanism housing\n        translate([0, 0, 45]) seat_mechanism();\n        \n        // Seat cushion\n        translate([0, -8, 50]) seat_cushion();\n        \n        // Backrest\n        translate([0, -8, 65]) backrest();\n        \n        // Armrests\n        armrests();\n    }\n}\n\n// 5-star base with casters\nmodule base_assembly() {\n    union() {\n        // Central hub\n        cylinder(h=15, r1=12, r2=10);\n        \n        // 5 spokes\n        for(i=[0:4]) {\n            rotate([0, 0, i*72]) {\n                translate([0, 0, 7.5]) {\n                    // Spoke\n                    rotate([90, 0, 0]) \n                        cylinder(h=35, r1=3, r2=2);\n                    \n                    // Caster wheel\n                    translate([30, 0, -7.5]) {\n                        rotate([90, 0, 0]) \n                            cylinder(h=6, r=4);\n                        sphere(r=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=30, r=6);\n        // Inner hole\n        cylinder(h=30, r=4);\n    }\n}\n\n// Seat adjustment mechanism housing\nmodule seat_mechanism() {\n    difference() {\n        // Main housing\n        cube([45, 35, 8], center=true);\n        \n        // Control lever hole\n        translate([20, 0, 0])\n            cylinder(h=10, r=2);\n    }\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion block\n        translate([0, 0, 5])\n            cube([50, 45, 10], center=true);\n        \n        // Rounded edges using cylinders\n        translate([0, -22.5, 5])\n            rotate([90, 0, 0])\n                cylinder(h=50, r=5);\n        translate([0, 22.5, 5])\n            rotate([90, 0, 0])\n                cylinder(h=50, r=5);\n    }\n    \n    // Seat surface detail\n    translate([0, 0, 11])\n        cube([48, 43, 1], center=true);\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    union() {\n        // Main backrest frame\n        difference() {\n            // Outer frame\n            translate([0, 0, 20])\n                cube([45, 8, 40], center=true);\n            \n            // Inner cutout for mesh\n            translate([0, 0, 20])\n                cube([40, 6, 35], center=true);\n        }\n        \n        // Lumbar support curve\n        translate([0, -4, 10])\n            rotate([90, 0, 0])\n                cylinder(h=45, r1=20, r2=15);\n        \n        // Headrest\n        translate([0, -4, 45])\n            cube([30, 6, 15], center=true);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-25, 0, 60]) {\n        // Vertical support\n        cylinder(h=20, r=2);\n        \n        // Horizontal pad\n        translate([0, 8, 10])\n            cube([4, 20, 2], center=true);\n    }\n    \n    // Right armrest (mirrored)\n    translate([25, 0, 60]) {\n        mirror([1, 0, 0]) {\n            cylinder(h=20, r=2);\n            translate([0, 8, 10])\n                cube([4, 20, 2], center=true);\n        }\n    }\n}\n\n// Generate the chair\nvolt_office_chair();",
    "renders": true
  },
  {
    "office_supply": "kairo",
    "openscad_code": "// Kairo (Japanese lap warmer / foot warmer) - Furniture Item\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions (in mm)\nkairo_width = 100;\nkairo_depth = 80;\nkairo_height = 60;\nwall_thickness = 2;\n\n// Leg dimensions\nleg_height = 20;\nleg_diameter = 8;\n\n// Handle dimensions\nhandle_radius = 5;\nhandle_height = 30;\n\n// Ventilation slots\nslot_width = 3;\nslot_length = 20;\nslot_spacing = 10;\n\n// Main body - hollow box\nmodule kairo_body() {\n    difference() {\n        // Outer shell\n        cube([kairo_width, kairo_depth, kairo_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, 0])\n        cube([kairo_width-wall_thickness*2, kairo_depth-wall_thickness*2, kairo_height-wall_thickness], center=true);\n        \n        // Top opening for charcoal compartment\n        translate([0, 0, kairo_height/2 - wall_thickness/2])\n        cube([kairo_width-wall_thickness*4, kairo_depth-wall_thickness*4, wall_thickness*2], center=true);\n    }\n}\n\n// Legs - four cylindrical supports\nmodule legs() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (kairo_width/2 - leg_diameter*2), y * (kairo_depth/2 - leg_diameter*2), -leg_height/2 - kairo_height/2])\n            cylinder(h=leg_height, d=leg_diameter, center=true);\n        }\n    }\n}\n\n// Handle - curved metal handle on top\nmodule handle() {\n    translate([0, -kairo_depth/2 + 5, kairo_height/2 + handle_height/2])\n    rotate([90, 0, 0])\n    cylinder(h=kairo_depth - 10, d=handle_radius*2, center=true);\n    \n    // Handle supports\n    for (x = [-1, 1]) {\n        translate([x * (kairo_width/2 - 15), -kairo_depth/2 + 5, kairo_height/2 + 5])\n        cylinder(h=handle_height - 10, d=handle_radius*1.5, center=false);\n    }\n}\n\n// Ventilation pattern on sides\nmodule ventilation_slots() {\n    // Left and right sides\n    for (side = [-1, 1]) {\n        for (i = [-2:2]) {\n            translate([side * (kairo_width/2 - wall_thickness), i * slot_spacing, 0])\n            rotate([0, 90*side, 0])\n            cube([slot_length, slot_width, wall_thickness*2], center=true);\n        }\n    }\n    \n    // Front and back sides\n    for (side = [-1, 1]) {\n        for (i = [-1:1]) {\n            translate([i * slot_spacing, side * (kairo_depth/2 - wall_thickness), 0])\n            rotate([90*side, 0, 0])\n            cube([slot_width, slot_length, wall_thickness*2], center=true);\n        }\n    }\n}\n\n// Decorative top frame\nmodule top_frame() {\n    difference() {\n        // Outer frame\n        translate([0, 0, kairo_height/2 - wall_thickness/2])\n        cube([kairo_width, kairo_depth, wall_thickness], center=true);\n        \n        // Inner cutout\n        translate([0, 0, kairo_height/2 - wall_thickness/2])\n        cube([kairo_width-wall_thickness*4, kairo_depth-wall_thickness*4, wall_thickness+1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    kairo_body();\n    legs();\n    handle();\n    ventilation_slots();\n    top_frame();\n}",
    "renders": true
  },
  {
    "office_supply": "nix",
    "openscad_code": "// Nix Office Chair (realistic, medium complexity)\n// Overall dimensions: ~120mm tall, 100mm wide, 100mm deep\n// Wall thickness: 2mm throughout\n\n// Base module for 5-star chair base\nmodule chair_base() {\n    // Central hub\n    cylinder(h=15, r1=12, r2=8, $fn=30);\n    \n    // 5 legs with wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) \n            translate([0, 0, 0])\n            union() {\n                // Leg\n                translate([10, -2, 7.5])\n                    cube([35, 4, 2]);\n                \n                // Wheel\n                translate([45, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=6, r=4, $fn=12);\n            }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=40, r=6, $fn=30);\n        // Inner hole\n        cylinder(h=40, r=4, $fn=30);\n    }\n}\n\n// Seat mechanism\nmodule seat_mechanism() {\n    difference() {\n        cylinder(h=8, r=15, $fn=30);\n        cylinder(h=10, r=3, $fn=20);\n    }\n}\n\n// Seat cushion\nmodule seat_cushion() {\n    // Main seat\n    difference() {\n        translate([-25, -25, 0])\n            cube([50, 50, 8]);\n        translate([-23, -23, -1])\n            cube([46, 46, 10]);\n    }\n    \n    // Rounded edges\n    translate([0, 0, 4])\n        difference() {\n            cylinder(h=8, r=25, $fn=40);\n            cylinder(h=10, r=23, $fn=40);\n        }\n}\n\n// Backrest\nmodule backrest() {\n    // Main back\n    difference() {\n        translate([-20, -3, 0])\n            cube([40, 6, 60]);\n        translate([-18, -4, 2])\n            cube([36, 8, 56]);\n    }\n    \n    // Lumbar support curve\n    translate([0, 0, 20])\n        difference() {\n            cylinder(h=6, r=22, $fn=40);\n            translate([0, -25, 0])\n                cube([50, 50, 8]);\n        }\n    \n    // Headrest\n    translate([0, 0, 55])\n        difference() {\n            cylinder(h=8, r=15, $fn=30);\n            cylinder(h=10, r=13, $fn=30);\n        }\n}\n\n// Armrest support\nmodule armrest(side) {\n    // Vertical post\n    translate([0, side*20, 0])\n        cylinder(h=15, r=2, $fn=12);\n    \n    // Horizontal arm\n    translate([0, side*30, 12])\n        rotate([45, 0, side*90])\n            cube([20, 3, 3]);\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    chair_base();\n    \n    // Gas lift\n    translate([0, 0, 15])\n        gas_lift();\n    \n    // Seat mechanism\n    translate([0, 0, 55])\n        seat_mechanism();\n    \n    // Seat cushion\n    translate([0, 0, 63])\n        seat_cushion();\n    \n    // Backrest\n    translate([0, 0, 71])\n        backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "riven",
    "openscad_code": "// Riven Office Chair - Realistic Style, Medium Complexity\n// Overall size: ~120mm height, 100mm width, 100mm depth\n\n$fa = 2;\n$fs = 0.5;\n\n// Main module for the complete chair\nmodule riven_chair() {\n    \n    // Seat base - primary sitting surface\n    translate([0, 0, 70]) {\n        difference() {\n            // Main seat cushion\n            cube([70, 65, 12], center=true);\n            \n            // Rounded front edge cutout\n            translate([0, 30, 6])\n                rotate([90, 0, 0])\n                    cylinder(h=65, r=10, center=true);\n        }\n    }\n    \n    // Backrest - ergonomic curved design\n    translate([0, -25, 110]) {\n        difference() {\n            // Main backrest panel\n            cube([65, 8, 60], center=true);\n            \n            // Lumbar support curve\n            translate([0, 0, -10])\n                cube([55, 10, 15], center=true);\n        }\n    }\n    \n    // Armrests - left and right with supports\n    for(side = [-1, 1]) {\n        // Horizontal armrest top\n        translate([side * 37, 0, 85]) {\n            cube([8, 50, 4], center=true);\n        }\n        \n        // Vertical armrest support\n        translate([side * 37, 15, 77]) {\n            cube([8, 4, 20], center=true);\n        }\n    }\n    \n    // Central support column - pneumatic cylinder\n    translate([0, 0, 50]) {\n        cylinder(h=20, r=6, center=true);\n    }\n    \n    // 5-star base with wheels\n    module wheel_base() {\n        // Central hub\n        cylinder(h=8, r=15, center=true);\n        \n        // 5 legs with wheels\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                // Leg\n                translate([35, 0, -4]) {\n                    cube([70, 8, 8], center=true);\n                }\n                \n                // Wheel\n                translate([65, 0, -10]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h=8, r=4, center=true);\n                            // Wheel tread detail\n                            translate([0, 0, -2])\n                                cylinder(h=12, r=3.5, center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Base assembly\n    translate([0, 0, 35]) {\n        wheel_base();\n    }\n    \n    // Backrest support bar\n    translate([0, -25, 90]) {\n        cube([6, 4, 40], center=true);\n    }\n    \n    // Seat adjustment lever\n    translate([30, 0, 65]) {\n        rotate([0, -30, 0]) {\n            cube([15, 4, 3], center=true);\n        }\n    }\n    \n    // Headrest attachment\n    translate([0, -25, 145]) {\n        difference() {\n            cube([40, 6, 15], center=true);\n            // Headrest cushion cutout\n            translate([0, 0, 5])\n                cube([35, 4, 8], center=true);\n        }\n    }\n    \n    // Reinforcement ribs under seat\n    for(x = [-25, 0, 25]) {\n        translate([x, 0, 63]) {\n            cube([8, 55, 4], center=true);\n        }\n    }\n}\n\n// Generate the complete chair\nriven_chair();",
    "renders": true
  },
  {
    "office_supply": "juno",
    "openscad_code": "// Juno Office Chair - Realistic Medium Complexity\n// Overall dimensions: ~120mm H x 100mm W x 100mm D\n\n// Chair parameters\nseat_height = 45;\nseat_width = 80;\nseat_depth = 75;\nback_height = 75;\narmrest_height = 65;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main seat platform\nmodule seat() {\n    difference() {\n        // Main seat cushion\n        translate([0, 0, seat_height/2])\n            rounded_cube([seat_width, seat_depth, 8], 3);\n        \n        // Hollow out for material saving\n        translate([0, 0, seat_height/2 + wall])\n            rounded_cube([seat_width - wall*2, seat_depth - wall*2, 8 - wall], 2);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2 + 5, seat_height + back_height/2])\n            rounded_cube([seat_width - 20, 6, back_height], 3);\n        \n        // Lumbar curve\n        translate([0, -seat_depth/2 + 2, seat_height + back_height/2 - 10])\n            cylinder(h = 8, r1 = 30, r2 = 25, $fn = 32);\n    }\n}\n\n// Adjustable height column\nmodule gas_lift() {\n    // Outer cylinder\n    cylinder(h = 30, r = 8, $fn = 32);\n    \n    // Inner cylinder\n    translate([0, 0, 15])\n        cylinder(h = 20, r = 6, $fn = 32);\n}\n\n// 5-star base with wheels\nmodule base() {\n    // Center hub\n    cylinder(h = 15, r = 15, $fn = 32);\n    \n    // 5 arms with wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, 35, 7.5])\n                cube([8, 35, 7], center = true);\n        \n        // Wheels\n        rotate([0, 0, i*72])\n            translate([0, 70, 0])\n                wheel();\n    }\n}\n\n// Office chair wheel\nmodule wheel() {\n    rotate([90, 0, 0])\n        cylinder(h = 6, r = 8, $fn = 16);\n    \n    // Wheel fork\n    translate([0, 0, 8])\n        cube([4, 8, 6], center = true);\n}\n\n// Armrest assembly\nmodule armrest(side) {\n    // Vertical post\n    translate([side * (seat_width/2 - 10), 0, armrest_height/2])\n        cylinder(h = armrest_height - seat_height, r = 4, $fn = 16);\n    \n    // Arm pad\n    translate([side * (seat_width/2 - 5), 10, armrest_height + 2])\n        rotate([0, 15, 0])\n            cube([40, 8, 4], center = true);\n}\n\n// Rounded cube helper\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                for(z = [-1, 1]) {\n                    translate([x*(size[0]/2 - radius), \n                             y*(size[1]/2 - radius), \n                             z*(size[2]/2 - radius)])\n                        sphere(r = radius, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Gas lift post\n    translate([0, 0, 0])\n        gas_lift();\n    \n    // 5-star base\n    translate([0, 0, 0])\n        base();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "talon",
    "openscad_code": "// Talon Office Chair - Realistic Style, Medium Complexity\n// A stylized talon-shaped backrest on a functional office chair base\n\n// Chair parameters\nchair_height = 120;\nseat_height = 45;\nseat_width = 50;\nseat_depth = 45;\nbackrest_height = 75;\ntalon_thickness = 3;\nbase_radius = 25;\ncaster_radius = 8;\n\n// Main chair module\nmodule office_chair() {\n    // Chair base with 5-star caster design\n    union() {\n        // Central pole\n        cylinder(h=chair_height - caster_radius, r=base_radius/3, $fn=32);\n        \n        // Caster arms\n        for(i = [0:4]) {\n            rotate([0, 0, i*72]) \n                translate([0, base_radius*0.8, caster_radius])\n                    cube([base_radius/4, base_radius*0.7, caster_radius/2], center=true);\n        }\n        \n        // Casters\n        for(i = [0:4]) {\n            rotate([0, 0, i*72]) \n                translate([0, base_radius*1.3, caster_radius/2])\n                    sphere(r=caster_radius, $fn=16);\n        }\n    }\n    \n    // Gas lift cylinder cover\n    translate([0, 0, chair_height - caster_radius - 30])\n        cylinder(h=30, r1=base_radius/2.5, r2=base_radius/3, $fn=32);\n    \n    // Seat platform\n    translate([0, 0, seat_height])\n        cube([seat_width, seat_depth, talon_thickness*2], center=true);\n    \n    // Seat cushion with rounded edges\n    translate([0, 0, seat_height + talon_thickness])\n        minkowski() {\n            cube([seat_width - 4, seat_depth - 4, 8], center=true);\n            sphere(r=2, $fn=16);\n        }\n    \n    // Talon backrest\n    translate([0, -seat_depth/2 + 5, seat_height + 8])\n        rotate([15, 0, 0])\n            talon_backrest();\n}\n\n// Talon-shaped backrest module\nmodule talon_backrest() {\n    // Main talon curve using hull operations\n    union() {\n        // Central spine\n        translate([0, 0, backrest_height/2])\n            cube([talon_thickness*2, talon_thickness*3, backrest_height], center=true);\n        \n        // Curved talon sections\n        for(i = [0:4]) {\n            h = backrest_height * (0.8 - i*0.15);\n            w = talon_thickness * (3 - i*0.5);\n            translate([0, -i*3, h])\n                rotate([0, 0, -i*5])\n                    cube([w, talon_thickness, h], center=true);\n        }\n        \n        // Mirror for other side\n        mirror([1, 0, 0]) {\n            for(i = [0:4]) {\n                h = backrest_height * (0.8 - i*0.15);\n                w = talon_thickness * (3 - i*0.5);\n                translate([0, -i*3, h])\n                    rotate([0, 0, -i*5])\n                        cube([w, talon_thickness, h], center=true);\n            }\n        }\n        \n        // Support struts\n        for(i = [-1:1]) {\n            translate([i*15, 0, backrest_height*0.7])\n                rotate([45, 0, 0])\n                    cube([talon_thickness, talon_thickness*2, 20], center=true);\n        }\n        \n        // Ergonomic lumbar support curve\n        translate([0, -talon_thickness*2, backrest_height*0.3])\n            difference() {\n                cube([seat_width*0.8, talon_thickness*2, backrest_height*0.4], center=true);\n                translate([0, talon_thickness, 0])\n                    cube([seat_width*0.9, talon_thickness*2, backrest_height*0.3], center=true);\n            }\n    }\n}\n\n// Generate the complete chair\noffice_chair();",
    "renders": true
  },
  {
    "office_supply": "lyra",
    "openscad_code": "// Lyra Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm height, 80mm width, 90mm depth\n\n// Parameters\nchair_height = 120;\nseat_height = 60;\nseat_width = 80;\nseat_depth = 70;\nback_height = 60;\narmrest_height = 75;\nbase_diameter = 65;\ncaster_size = 6;\n\n// Central cylinder (gas lift)\nmodule gas_lift() {\n    cylinder(h=chair_height - 20, d=12, $fn=32);\n}\n\n// Five-star base with casters\nmodule base() {\n    union() {\n        // Center hub\n        cylinder(h=15, d1=20, d2=15, $fn=32);\n        \n        // Five arms with casters\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                // Arm\n                translate([0, 0, 7]) {\n                    linear_extrude(height=8) {\n                        polygon(points=[[0,0], [30, -3], [30, 3], [0,0]]);\n                    }\n                }\n                \n                // Caster wheel\n                translate([30, 0, -3]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=caster_size, d=caster_size, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Seat cushion with ergonomic contour\nmodule seat() {\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height]) {\n            cube([seat_width, seat_depth, 12], center=true);\n        }\n        \n        // Contour cutout\n        translate([0, 10, seat_height + 6]) {\n            cube([seat_width - 20, seat_depth - 20, 14], center=true);\n        }\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        union() {\n            // Main backrest\n            translate([0, -seat_depth/4, seat_height + back_height/2]) {\n                cube([seat_width - 10, 8, back_height], center=true);\n            }\n            \n            // Lumbar support bulge\n            translate([0, -seat_depth/4 + 4, seat_height + back_height/2]) {\n                scale([1, 0.3, 1.2]) {\n                    sphere(d=back_height, $fn=32);\n                }\n            }\n        }\n        \n        // Top curve\n        translate([0, -seat_depth/4, seat_height + back_height - 5]) {\n            cube([seat_width - 10, 10, 10], center=true);\n        }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for (side = [-1, 1]) {\n        translate([side * (seat_width/2 - 10), 0, armrest_height]) {\n            union() {\n                // Vertical support\n                cube([6, seat_depth/3, 15], center=true);\n                \n                // Horizontal rest\n                translate([0, seat_depth/4, 7.5]) {\n                    cube([20, 6, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    translate([0, 0, 10]) {\n        base();\n    }\n    \n    // Gas lift\n    translate([0, 0, 15]) {\n        gas_lift();\n    }\n    \n    // Seat mechanism\n    translate([0, 0, chair_height - 20]) {\n        cylinder(h=8, d=20, $fn=32);\n    }\n    \n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "orion",
    "openscad_code": "// Orion Office Chair - Medium Complexity 3D Printable Furniture\n// Dimensions: 100mm height, 70mm width, 65mm depth\n\n// Chair Parameters\nseat_height = 45;\nseat_width = 50;\nseat_depth = 40;\nback_height = 55;\nleg_height = 40;\narmrest_height = 15;\n\n// Create the complete office chair\nmodule orion_chair() {\n    // Seat cushion\n    translate([0, 0, leg_height]) {\n        difference() {\n            // Main seat block\n            cube([seat_width, seat_depth, 8], center=true);\n            \n            // Seat contour curve\n            translate([0, 0, -1])\n                cube([seat_width-6, seat_depth-4, 10], center=true);\n        }\n    }\n    \n    // Backrest\n    translate([0, -seat_depth/2 + 5, leg_height + back_height/2]) {\n        difference() {\n            // Main backrest\n            cube([seat_width - 10, 6, back_height], center=true);\n            \n            // Lumbar support curve\n            translate([0, 0, -back_height/4])\n                cube([seat_width - 16, 8, back_height/2], center=true);\n        }\n    }\n    \n    // Armrests (left and right)\n    for(side = [-1, 1]) {\n        translate([side * seat_width/2 - side * 3, 0, leg_height + armrest_height/2]) {\n            cube([6, seat_depth - 10, armrest_height], center=true);\n        }\n    }\n    \n    // Central support column\n    translate([0, 0, leg_height/2]) {\n        cylinder(h=leg_height, r=5, $fn=16);\n    }\n    \n    // 5-star base legs\n    for(angle = [0:72:359]) {\n        rotate([0, 0, angle]) {\n            translate([0, 20, leg_height/4]) {\n                cube([10, 40, 6], center=true);\n            }\n        }\n    }\n    \n    // Wheels (5 wheels)\n    for(angle = [0:72:359]) {\n        rotate([0, 0, angle]) {\n            translate([0, 36, 0]) {\n                cylinder(h=4, r=4, $fn=8);\n                sphere(r=4, $fn=8);\n            }\n        }\n    }\n    \n    // Backrest support pole\n    translate([0, -seat_depth/2 + 5, leg_height + 4]) {\n        cylinder(h=back_height - 8, r=2, $fn=12);\n    }\n    \n    // Headrest\n    translate([0, -seat_depth/2 + 5, leg_height + back_height + 4]) {\n        difference() {\n            cube([25, 6, 8], center=true);\n            translate([0, 0, -1])\n                cube([21, 8, 10], center=true);\n        }\n    }\n}\n\n// Render the chair\norion_chair();",
    "renders": true
  },
  {
    "office_supply": "koda",
    "openscad_code": "// Koda Chair - Realistic Office Chair Model\n// Overall dimensions: 100mm height x 70mm width x 75mm depth\n\n// Global parameters\nchair_height = 100;\nseat_height = 50;\nseat_width = 70;\nseat_depth = 75;\nbackrest_height = 50;\narmrest_height = 20;\nbase_diameter = 50;\nwheel_count = 5;\n\n// Main chair assembly\nmodule koda_chair() {\n    union() {\n        // Seat cushion\n        translate([0, 0, seat_height])\n            seat_cushion();\n        \n        // Backrest\n        translate([0, -seat_depth/2 + 5, seat_height + backrest_height/2])\n            backrest();\n        \n        // Armrests\n        translate([seat_width/2 - 5, 0, seat_height + armrest_height/2])\n            armrest();\n        translate([-seat_width/2 + 5, 0, seat_height + armrest_height/2])\n            mirror([1, 0, 0])\n                armrest();\n        \n        // Gas lift cylinder\n        translate([0, 0, seat_height/2])\n            gas_lift();\n        \n        // Star base\n        translate([0, 0, 0])\n            star_base();\n        \n        // Wheels\n        for(i = [0:wheel_count-1]) {\n            rotate([0, 0, i * 360/wheel_count])\n                translate([base_diameter/2, 0, 0])\n                    wheel();\n        }\n    }\n}\n\n// Seat cushion with ergonomic shape\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, 0])\n            rounded_box(seat_width, seat_depth, 8, 3);\n        \n        // Contour detail\n        translate([0, 0, 4.5])\n            rounded_box(seat_width - 10, seat_depth - 20, 3, 2);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, 0, 0])\n            rounded_box(seat_width - 10, backrest_height, 6, 2);\n        \n        // Lumbar curve\n        translate([0, 5, 0])\n            cube([seat_width - 14, backrest_height - 10, 12], center=true);\n    }\n}\n\n// Armrest with adjustment mechanism\nmodule armrest() {\n    difference() {\n        union() {\n            // Support post\n            cylinder(h=armrest_height, r=3, $fn=16);\n            \n            // Rest pad\n            translate([0, 10, armrest_height/2 + 2])\n                rounded_box(8, 25, 4, 2);\n        }\n        \n        // Adjustment holes\n        for(i = [1:3]) {\n            translate([0, 0, i * 5])\n                cylinder(h=armrest_height + 1, r=1, $fn=8);\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    union() {\n        // Outer cylinder\n        cylinder(h=seat_height - 5, r=4, $fn=32);\n        \n        // Inner piston\n        cylinder(h=seat_height - 8, r=2.5, $fn=32);\n    }\n}\n\n// Star base with legs\nmodule star_base() {\n    difference() {\n        union() {\n            // Center hub\n            cylinder(h=8, r=8, $fn=32);\n            \n            // Base legs\n            for(i = [0:wheel_count-1]) {\n                rotate([0, 0, i * 360/wheel_count])\n                    translate([base_diameter/4, 0, 4])\n                        cube([base_diameter/2, 6, 8], center=true);\n            }\n        }\n        \n        // Cable management hole\n        translate([0, 0, -1])\n            cylinder(h=10, r=3, $fn=16);\n    }\n}\n\n// Office chair wheel\nmodule wheel() {\n    translate([0, 0, 3])\n        difference() {\n            union() {\n                // Wheel body\n                rotate([90, 0, 0])\n                    cylinder(h=6, r=4, $fn=16);\n                \n                // Axle\n                rotate([90, 0, 0])\n                    cylinder(h=10, r=1.5, $fn=8);\n            }\n            \n            // Tread pattern\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45])\n                    translate([0, 0, 3])\n                        cube([8, 1, 6.2], center=true);\n            }\n        }\n}\n\n// Helper module for rounded boxes\nmodule rounded_box(w, d, h, r) {\n    translate([0, 0, 0])\n        minkowski() {\n            cube([w - 2*r, d - 2*r, h - 2*r], center=true);\n            sphere(r=r, $fn=16);\n        }\n}\n\n// Generate the chair\nkoda_chair();",
    "renders": true
  },
  {
    "office_supply": "sable",
    "openscad_code": "// Sable office chair in realistic style (medium complexity)\n// Overall dimensions: ~110mm tall, 70mm wide, 80mm deep\n\n// Parameters\nseat_width = 60;\nseat_depth = 50;\nseat_thickness = 4;\nbackrest_width = 60;\nbackrest_height = 50;\nbackrest_thickness = 4;\narmrest_height = 25;\narmrest_width = 8;\narmrest_thickness = 5;\nleg_diameter = 6;\nleg_height = 45;\nwheel_diameter = 15;\nwheel_thickness = 5;\ngas_spring_diameter = 8;\ngas_spring_height = 15;\n\n// Main chair module\nmodule chair() {\n    // Seat\n    translate([0, 0, leg_height + gas_spring_height + seat_thickness/2])\n    cube([seat_width, seat_depth, seat_thickness], center=true);\n    \n    // Backrest\n    translate([0, -seat_depth/2 - backrest_thickness/2, leg_height + gas_spring_height + seat_thickness + backrest_height/2])\n    cube([backrest_width, backrest_thickness, backrest_height], center=true);\n    \n    // Armrests - left\n    translate([-seat_width/2 - armrest_width/2, 0, leg_height + gas_spring_height + seat_thickness + armrest_height/2])\n    cube([armrest_width, armrest_thickness, armrest_height], center=true);\n    \n    // Armrests - right\n    translate([seat_width/2 + armrest_width/2, 0, leg_height + gas_spring_height + seat_thickness + armrest_height/2])\n    cube([armrest_width, armrest_thickness, armrest_height], center=true);\n    \n    // Gas spring\n    translate([0, 0, leg_height + gas_spring_height/2])\n    cylinder(h=gas_spring_height, d=gas_spring_diameter, center=true);\n    \n    // Base legs - 5 spokes with wheels\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            // Leg spoke\n            translate([0, -leg_diameter/2, leg_height/2])\n            cube([leg_diameter, 50, leg_diameter], center=true);\n            \n            // Wheel\n            translate([0, -50, leg_height - wheel_diameter/2])\n            rotate([90, 0, 0])\n            cylinder(h=wheel_thickness, d=wheel_diameter, center=true);\n        }\n    }\n    \n    // Central hub\n    translate([0, 0, leg_height/2])\n    cylinder(h=leg_diameter*2, d=leg_diameter*3, center=true);\n}\n\n// Chair back lumbar support curve\nmodule lumbar_support() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2 - backrest_thickness/2, leg_height + gas_spring_height + seat_thickness + backrest_height/3])\n        cube([backrest_width, backrest_thickness, backrest_height*2/3], center=true);\n        \n        // Curved cutout\n        translate([0, -seat_depth/2 - backrest_thickness/2 - 0.1, leg_height + gas_spring_height + seat_thickness + backrest_height/2])\n        rotate([0, 90, 0])\n        cylinder(h=backrest_width+2, d=backrest_height*0.8, center=true);\n    }\n}\n\n// Seat cushion details\nmodule seat_details() {\n    // Cushion edges\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            translate([x*seat_width/3, y*seat_depth/3, leg_height + gas_spring_height + seat_thickness + 1])\n            cylinder(h=2, d=5, center=true);\n        }\n    }\n    \n    // Ventilation holes\n    for(i=[-2:2]) {\n        for(j=[-1:1]) {\n            translate([i*10, j*10, leg_height + gas_spring_height + seat_thickness + 0.1])\n            cylinder(h=seat_thickness, d=3, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair();\n    lumbar_support();\n    seat_details();\n}",
    "renders": true
  },
  {
    "office_supply": "drax",
    "openscad_code": "// Drax Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm height, 100mm width, 100mm depth\n\n// Chair parameters\nchair_width = 100;\nchair_depth = 100;\nseat_height = 60;\nback_height = 120;\nleg_height = 60;\n\n// Basic wall thickness\nwall = 2;\n\n// Seat cushion\nmodule seat() {\n    // Main seat platform\n    translate([0, 0, leg_height])\n    cube([chair_width, chair_depth, 10], center=true);\n    \n    // Cushion top\n    translate([0, 0, leg_height+5])\n    cube([chair_width-10, chair_depth-10, 10], center=true);\n    \n    // Rounded cushion edges\n    for(x = [-1, 1]) {\n        translate([x*(chair_width-10)/2, 0, leg_height+10])\n        cylinder(h=10, r=5, center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -20, leg_height+back_height/2])\n    cube([chair_width, 10, back_height-leg_height], center=true);\n    \n    // Lumbar support curve\n    translate([0, -15, leg_height+30])\n    cube([chair_width-20, 5, 20], center=true);\n    \n    // Headrest\n    translate([0, -20, leg_height+back_height-10])\n    cube([chair_width-30, 10, 20], center=true);\n}\n\n// 5-star base with casters\nmodule base() {\n    // Central post\n    translate([0, 0, leg_height/2])\n    cylinder(h=leg_height, r=8, center=true);\n    \n    // Gas lift mechanism\n    translate([0, 0, leg_height-5])\n    cylinder(h=10, r=10, center=true);\n    \n    // 5 star legs\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 25, leg_height/2-15])\n        cube([40, 10, 5], center=true);\n        \n        // Caster wheels\n        translate([40*sin(i*72), 40*cos(i*72), 0])\n        sphere(r=5);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        // Vertical support\n        translate([side*(chair_width/2-5), 0, leg_height+15])\n        cube([wall, 15, 30], center=true);\n        \n        // Horizontal arm pad\n        translate([side*(chair_width/2-15), 15, leg_height+30])\n        cube([20, wall, 20], center=true);\n        \n        // Armrest end cap\n        translate([side*(chair_width/2-15), 25, leg_height+30])\n        cylinder(h=20, r=wall, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Base\n    base();\n    \n    // Armrests\n    armrests();\n    \n    // Seat adjustment lever\n    translate([chair_width/2-5, 0, leg_height+5])\n    cube([10, 5, 20], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "mira",
    "openscad_code": "// Mira Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm height x 100mm width x 100mm depth\n// Wall thickness: 2mm throughout for 3D printability\n\n// Base module\nmodule base() {\n    // Central column\n    cylinder(h=15, r=15, $fn=32);\n    \n    // Star base legs (5 legs)\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 12, 7.5])\n        cube([30, 8, 2], center=true);\n    }\n    \n    // Casters\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([25, 0, -3])\n        sphere(r=3, $fn=16);\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    color(\"silver\")\n    translate([0, 0, 15])\n    cylinder(h=20, r=5, $fn=32);\n}\n\n// Seat module with ergonomic contour\nmodule seat() {\n    // Main seat platform\n    translate([0, 0, 35])\n    difference() {\n        // Outer shell\n        cube([80, 80, 5], center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cube([76, 76, 7], center=true);\n    }\n    \n    // Seat cushion contour\n    translate([0, 0, 40])\n    difference() {\n        // Cushion base\n        cube([78, 78, 8], center=true);\n        \n        // Ergonomic contour cutout\n        translate([0, -10, 0])\n        cube([60, 50, 10], center=true);\n    }\n    \n    // Seat tilt mechanism\n    translate([0, 0, 34])\n    cube([20, 20, 2], center=true);\n}\n\n// Backrest module\nmodule backrest() {\n    // Lower back support\n    translate([0, -30, 55])\n    difference() {\n        // Main backrest frame\n        cube([70, 60, 5], center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cube([66, 56, 7], center=true);\n    }\n    \n    // Lumbar support curve\n    translate([0, -30, 58])\n    difference() {\n        // Curved back pad\n        cube([68, 50, 12], center=true);\n        \n        // Contour cutout\n        translate([0, 0, -2])\n        cube([64, 46, 16], center=true);\n    }\n    \n    // Headrest\n    translate([0, -30, 75])\n    difference() {\n        // Headrest frame\n        cube([50, 30, 4], center=true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cube([46, 26, 6], center=true);\n    }\n}\n\n// Armrest module\nmodule armrest() {\n    // Left armrest\n    translate([-45, 0, 45])\n    union() {\n        // Vertical support\n        cube([4, 4, 20], center=true);\n        \n        // Horizontal rest\n        translate([0, 0, 10])\n        cube([30, 4, 4], center=true);\n    }\n    \n    // Right armrest\n    translate([45, 0, 45])\n    union() {\n        // Vertical support\n        cube([4, 4, 20], center=true);\n        \n        // Horizontal rest\n        translate([0, 0, 10])\n        cube([30, 4, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base and support structure\n    base();\n    gas_lift();\n    \n    // Seating components\n    seat();\n    backrest();\n    \n    // Armrests\n    armrest();\n}",
    "renders": true
  },
  {
    "office_supply": "zephyr",
    "openscad_code": "// Zephyr Office Chair - Realistic Style\n// Overall size: 120mm height x 100mm width x 100mm depth\n\n// Seat cushion\nmodule seat() {\n    difference() {\n        // Main cushion\n        translate([0, 0, 40]) {\n            cube([100, 100, 15], center = true);\n        }\n        // Ergonomic contour\n        translate([0, 0, 52]) {\n            cube([90, 90, 5], center = true);\n        }\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        union() {\n            // Main backrest panel\n            translate([0, -45, 90]) {\n                cube([80, 10, 60], center = true);\n            }\n            // Lumbar support curve\n            translate([0, -45, 75]) {\n                cube([60, 8, 20], center = true);\n            }\n        }\n        // Ventilation holes pattern\n        for (i = [-2:2]) {\n            translate([i * 15, -45, 85]) {\n                cylinder(h = 12, r = 3, center = true);\n            }\n        }\n    }\n}\n\n// Armrest\nmodule armrest(side) {\n    translate([side * 45, 0, 65]) {\n        difference() {\n            union() {\n                // Vertical support\n                cylinder(h = 25, r = 4, center = true);\n                // Horizontal arm pad\n                translate([0, 20, 12]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 30, r = 4, center = true);\n                    }\n                }\n            }\n            // Cable management hole\n            translate([0, 20, 12]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 40, r = 2, center = true);\n                }\n            }\n        }\n    }\n}\n\n// 5-star base\nmodule base() {\n    // Central column\n    cylinder(h = 40, r = 8, center = true);\n    \n    // Star legs\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 35, 0]) {\n                cube([8, 70, 8], center = true);\n            }\n        }\n    }\n    \n    // Wheels\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 65, -8]) {\n                sphere(r = 5);\n            }\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    // Outer cylinder\n    cylinder(h = 30, r = 6, center = true);\n    \n    // Inner piston\n    translate([0, 0, 15]) {\n        cylinder(h = 20, r = 3, center = true);\n    }\n}\n\n// Assemble the chair\nunion() {\n    // Base assembly\n    translate([0, 0, 10]) {\n        base();\n    }\n    \n    // Gas lift\n    translate([0, 0, 30]) {\n        gas_lift();\n    }\n    \n    // Seat mechanism\n    translate([0, 0, 47]) {\n        cube([20, 20, 6], center = true);\n    }\n    \n    // Main components\n    seat();\n    backrest();\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "axel",
    "openscad_code": "// Office Chair Axel - Realistic Style, Medium Complexity\n// Overall size: 60mm diameter, 120mm height\n\n// Parameters\n$fn = 50;\nwheel_d = 20;\nwheel_w = 8;\naxel_d = 10;\naxel_h = 30;\ncylinder_d = 25;\ncylinder_h = 50;\ngas_spring_d = 15;\ngas_spring_h = 20;\ntop_plate_d = 40;\ntop_plate_h = 5;\nbearing_h = 8;\n\n// Wheel module with tread pattern\nmodule wheel() {\n    union() {\n        // Main wheel body\n        difference() {\n            cylinder(h=wheel_w, d=wheel_d, center=true);\n            cylinder(h=wheel_w+2, d=wheel_d-4, center=true);\n        }\n        \n        // Tread pattern\n        for (i = [0:15]) {\n            rotate([0, 0, i*24])\n                translate([wheel_d/2-2, 0, 0])\n                    cube([4, 1, wheel_w], center=true);\n        }\n        \n        // Hub\n        cylinder(h=wheel_w+1, d=6, center=true);\n    }\n}\n\n// Star base with wheels\nmodule star_base() {\n    for (i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            // Arm\n            translate([0, 0, 2])\n                cube([30, 10, 4], center=true);\n            \n            // Wheel mount\n            translate([30, 0, -wheel_d/2+2])\n                rotate([90, 0, 0])\n                    wheel();\n        }\n}\n\n// Gas spring cylinder\nmodule gas_spring() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=cylinder_h, d=cylinder_d);\n        \n        // Inner space\n        cylinder(h=cylinder_h+2, d=cylinder_d-4);\n        \n        // Top hole\n        translate([0, 0, cylinder_h-5])\n            cylinder(h=10, d=gas_spring_d);\n    }\n    \n    // Gas spring rod\n    translate([0, 0, cylinder_h])\n        cylinder(h=gas_spring_h, d=gas_spring_d);\n}\n\n// Top mounting plate\nmodule top_plate() {\n    difference() {\n        cylinder(h=top_plate_h, d=top_plate_d);\n        \n        // Mounting holes\n        for (i = [0:3]) {\n            rotate([0, 0, i*90+45])\n                translate([top_plate_d/2-10, 0, 0])\n                    cylinder(h=top_plate_h+2, d=3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Star base with wheels\n    star_base();\n    \n    // Central axel cylinder\n    translate([0, 0, 4])\n        gas_spring();\n    \n    // Bearing housing\n    translate([0, 0, cylinder_h+gas_spring_h])\n        difference() {\n            cylinder(h=bearing_h, d=top_plate_d-10);\n            cylinder(h=bearing_h+2, d=top_plate_d-16);\n        }\n    \n    // Top plate\n    translate([0, 0, cylinder_h+gas_spring_h+bearing_h])\n        top_plate();\n}",
    "renders": true
  },
  {
    "office_supply": "nova",
    "openscad_code": "// Nova Office Chair - Realistic Style\n// Overall size: ~120mm height x 100mm width x 100mm depth\n\n// Main parameters\nchair_height = 120;\nseat_height = 60;\nseat_width = 80;\nseat_depth = 80;\nbackrest_height = 60;\nleg_diameter = 8;\narmrest_height = 20;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Central star base\nmodule star_base() {\n    difference() {\n        // Main central hub\n        cylinder(h=15, d1=30, d2=25, center=false);\n        \n        // Hollow center\n        translate([0, 0, wall])\n            cylinder(h=15, d1=30-2*wall, d2=25-2*wall, center=false);\n    }\n}\n\n// Star leg with wheel\nmodule star_leg(length = 45) {\n    difference() {\n        // Main leg\n        translate([0, 0, 7.5])\n            rotate([90, 0, 0])\n                cylinder(h=length, d=leg_diameter, center=false);\n        \n        // Hollow leg\n        translate([0, 0, 7.5+wall])\n            rotate([90, 0, 0])\n                cylinder(h=length-wall, d=leg_diameter-2*wall, center=false);\n    }\n    \n    // Wheel at end\n    translate([0, length, 0])\n        sphere(d=10);\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    difference() {\n        cylinder(h=chair_height-seat_height-15, d=12, center=false);\n        translate([0, 0, wall])\n            cylinder(h=chair_height-seat_height-15-wall, d=12-2*wall, center=false);\n    }\n}\n\n// Seat cushion\nmodule seat() {\n    difference() {\n        // Main seat\n        translate([0, 0, seat_height/2])\n            cube([seat_width, seat_depth, seat_height], center=true);\n        \n        // Hollow seat\n        translate([0, 0, seat_height/2])\n            cube([seat_width-2*wall, seat_depth-2*wall, seat_height-wall], center=true);\n        \n        // Bottom opening\n        translate([0, 0, seat_height/2-seat_height/2+wall/2])\n            cube([seat_width-2*wall, seat_depth-2*wall, seat_height], center=true);\n    }\n    \n    // Seat cushion detail\n    translate([0, 0, seat_height+wall])\n        cube([seat_width-4*wall, seat_depth-4*wall, wall*1.5], center=true);\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, 0, seat_height+backrest_height/2])\n            cube([seat_width-10, seat_depth-20, backrest_height], center=true);\n        \n        // Hollow backrest\n        translate([0, 0, seat_height+backrest_height/2])\n            cube([seat_width-10-2*wall, seat_depth-20-2*wall, backrest_height-2*wall], center=true);\n        \n        // Back opening\n        translate([0, 0, seat_height+backrest_height/2-backrest_height/2+wall/2])\n            cube([seat_width-10-2*wall, seat_depth-20-2*wall, backrest_height], center=true);\n    }\n    \n    // Lumbar support curve\n    translate([0, -(seat_depth-20)/2, seat_height+backrest_height/3])\n        rotate([0, 15, 0])\n            cube([seat_width-10-2*wall, wall*2, backrest_height/2], center=true);\n}\n\n// Armrest\nmodule armrest(side) {\n    difference() {\n        // Main armrest\n        translate([side*(seat_width/2-5), 0, seat_height+armrest_height/2])\n            cube([10, seat_depth-30, armrest_height], center=true);\n        \n        // Hollow armrest\n        translate([side*(seat_width/2-5), 0, seat_height+armrest_height/2])\n            cube([10-2*wall, seat_depth-30-2*wall, armrest_height-2*wall], center=true);\n        \n        // Bottom opening\n        translate([side*(seat_width/2-5), 0, seat_height+armrest_height/2-armrest_height/2+wall/2])\n            cube([10-2*wall, seat_depth-30-2*wall, armrest_height], center=true);\n    }\n    \n    // Armrest pad\n    translate([side*(seat_width/2-5), 0, seat_height+armrest_height+wall/2])\n        cube([12, seat_depth-30+4, wall*1.5], center=true);\n}\n\n// Assembly\nunion() {\n    // Base and legs\n    star_base();\n    \n    // Five star legs\n    for (i = [0:4]) {\n        rotate([0, 0, i*72])\n            star_leg();\n    }\n    \n    // Gas lift\n    translate([0, 0, 15])\n        gas_lift();\n    \n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "kai",
    "openscad_code": "// Kai Chair – realistic office style, printable at ~120 mm seat height\n// Wall thickness 2 mm, no over-hangs > 45°, assembled from sub-modules\n\nchair_scale = 1;               // master scale – print ~120 mm tall\nwall = 2;                      // constant wall thickness\n\n// ---------- modules ----------\nmodule tube(h, r)              // printable hollow tube (no over-hang)\n    difference() {\n        cylinder(h = h, r = r);\n        translate([0,0,-.1])\n            cylinder(h = h+.2, r = r-wall);\n    }\n\nmodule rounded_seat(w, d, t) // ergonomic seat with 2 mm edge radius\n    difference() {\n        minkowski() {\n            cube([w, d, t], center = true);\n            sphere(wall);\n        }\n        translate([0,0,t/2+wall-.1])\n            cube([w-2*wall, d-2*wall, t+2], center = true);\n    }\n\nmodule backrest(w, h, t)     // slightly curved lumbar support\n    difference() {\n        hull() {\n            translate([-w/2, -t/2, 0]) cube([wall, t, h]);\n            translate([ w/2, -t/2, 0]) cube([wall, t, h]);\n            translate([-w/2,  t/2, h*.8]) cube([wall, t, wall]);\n            translate([ w/2,  t/2, h*.8]) cube([wall, t, wall]);\n        }\n        translate([0, t/2+1, -1]) cube([w+2, wall+2, h+2], center = true);\n    }\n\nmodule caster()                // office-chair caster wheel\n    rotate([90,0,0]) {\n        tube(h = 4, r = 6);    // stem\n        for(i = [0:72:359])     // 5 spokes\n            rotate([0,0,i])\n                translate([0,4,0])\n                    cube([wall, 4, 8], center = true);\n    }\n\n// ---------- main assembly ----------\nunion() {\n    // seat\n    translate([0, 0, 50*chair_scale])\n        rounded_seat(45*chair_scale, 45*chair_scale, 4*chair_scale);\n\n    // backrest\n    translate([0, -45*chair_scale/2+2, 50*chair_scale+4*chair_scale-15])\n        backrest(40*chair_scale, 55*chair_scale, 4*chair_scale);\n\n    // 5-star base\n    for(i = [0:72:359]) {\n        rotate([0,0,i])\n            translate([0, 20*chair_scale, 10*chair_scale])\n                tube(h = 20*chair_scale, r = 5*chair_scale);\n    }\n\n    // central pneumatic column\n    tube(h = 40*chair_scale, r = 7*chair_scale);\n\n    // casters\n    for(i = [0:72:359]) {\n        rotate([0,0,i])\n            translate([20*chair_scale, 0, 0])\n                caster();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "seren",
    "openscad_code": "// Seren Office Chair - Realistic Style\n// Medium complexity 3D printable model\n\n// Chair parameters\nchair_height = 100;\nseat_height = 45;\nseat_depth = 40;\nseat_width = 45;\nback_height = 55;\narmrest_height = 15;\nbase_diameter = 50;\ncaster_size = 8;\n\n// Main seat module\nmodule seat() {\n    // Seat cushion\n    translate([0, 0, seat_height])\n    difference() {\n        // Main cushion shape\n        minkowski() {\n            cube([seat_width, seat_depth, 8], center=true);\n            cylinder(h=0.1, r=3, center=true);\n        }\n        \n        // Ergonomic contour\n        translate([0, 8, -2])\n        cube([seat_width-10, seat_depth-20, 12], center=true);\n    }\n    \n    // Seat support structure\n    translate([0, 0, seat_height-3])\n    cube([seat_width+4, seat_depth+4, 6], center=true);\n}\n\n// Backrest module\nmodule backrest() {\n    translate([0, -seat_depth/2 + 5, seat_height + back_height/2])\n    difference() {\n        union() {\n            // Main backrest\n            cube([seat_width, 8, back_height], center=true);\n            \n            // Lumbar support curve\n            translate([0, 4, -back_height/4])\n            scale([1, 0.3, 0.8])\n            sphere(r=back_height/2);\n        }\n        \n        // Back contour\n        translate([0, 5, 5])\n        cube([seat_width-10, 10, back_height-15], center=true);\n    }\n}\n\n// Armrest module\nmodule armrest(side) {\n    translate([side * (seat_width/2 + 2), 0, seat_height + armrest_height/2])\n    union() {\n        // Vertical support\n        cube([4, seat_depth/3, armrest_height], center=true);\n        \n        // Horizontal arm pad\n        translate([0, seat_depth/4, armrest_height/2 - 2])\n        cube([6, seat_depth/2, 4], center=true);\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    cylinder(h=chair_height - seat_height - 20, r=5, center=false);\n    \n    // Protective cover\n    translate([0, 0, chair_height - seat_height - 30])\n    cylinder(h=15, r1=7, r2=6, center=false);\n}\n\n// 5-star base\nmodule five_star_base() {\n    // Central hub\n    cylinder(h=10, r=15, center=false);\n    \n    // 5 arms\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([base_diameter/2 - 15, 0, 5])\n            cube([base_diameter/2, 8, 6], center=true);\n        }\n    }\n}\n\n// Caster wheel module\nmodule caster() {\n    // Wheel\n    rotate([90, 0, 0])\n    cylinder(h=4, r=caster_size/2, center=true, $fn=12);\n    \n    // Fork\n    translate([0, 0, caster_size/2])\n    union() {\n        cube([caster_size/2, 2, 6], center=true);\n        translate([caster_size/2 - 2, 0, 0])\n        cube([2, 4, 6], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Support column\n    translate([0, 0, 10])\n    gas_lift();\n    \n    // Base\n    translate([0, 0, 0])\n    five_star_base();\n    \n    // Casters\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([base_diameter/2, 0, 0])\n            caster();\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "rek",
    "openscad_code": "// Rek Office Shelf Unit - Medium Complexity Realistic Style\n// Overall dimensions: 120mm W x 40mm D x 150mm H\n\n$fn = 32;\n\n// Main frame thickness\nframe_th = 2;\n\nmodule shelf_unit() {\n    // Base frame\n    difference() {\n        // Main rectangular frame\n        cube([120, 40, 150]);\n        \n        // Hollow out interior\n        translate([frame_th, frame_th, frame_th])\n            cube([120-frame_th*2, 40-frame_th*2, 150-frame_th*2]);\n    }\n    \n    // Top horizontal support bar\n    translate([0, 0, 150-frame_th])\n        cube([120, 40, frame_th]);\n    \n    // Bottom horizontal support bar\n    translate([0, 0, 0])\n        cube([120, 40, frame_th]);\n    \n    // Vertical divider supports\n    for (x = [30, 60, 90]) {\n        translate([x-frame_th/2, 0, 0])\n            cube([frame_th, 40, 150]);\n    }\n    \n    // Shelves\n    for (h = [30, 60, 90, 120]) {\n        translate([0, 0, h-frame_th/2])\n            cube([120, 40, frame_th]);\n    }\n    \n    // Back panel for stability\n    translate([0, 40-frame_th, 0])\n        cube([120, frame_th, 150]);\n    \n    // Side reinforcement triangles\n    module triangle_support(x_pos) {\n        translate([x_pos, 0, 0]) {\n            polyhedron(\n                points = [\n                    [0, 0, 0],\n                    [0, 10, 0],\n                    [0, 0, 10]\n                ],\n                faces = [\n                    [0, 1, 2]\n                ]\n            );\n        }\n    }\n    \n    // Add corner supports\n    triangle_support(0);\n    triangle_support(120-10);\n    \n    // Shelf pin holes for adjustability\n    module pin_holes(x, z) {\n        for (i = [0:3]) {\n            translate([x, 20, z + i*10])\n                rotate([90, 0, 0])\n                    cylinder(h = frame_th, r = 1.5);\n        }\n    }\n    \n    // Add pin holes on both sides\n    for (x = [5, 115]) {\n        for (z = [25, 55, 85, 115]) {\n            pin_holes(x, z);\n        }\n    }\n    \n    // Small feet at bottom\n    module foot(x, y) {\n        translate([x, y, -2])\n            cylinder(h = 4, r1 = 3, r2 = 2);\n    }\n    \n    foot(5, 5);\n    foot(115, 5);\n    foot(5, 35);\n    foot(115, 35);\n}\n\n// Render the complete unit\nshelf_unit();",
    "renders": true
  },
  {
    "office_supply": "ayla",
    "openscad_code": "// Ayla Desk Organizer – realistic style, medium complexity\n// 100 mm (W) × 70 mm (D) × 90 mm (H)\n\n$fa = 2; $fs = 0.5;\n\n// overall dimensions\nW = 100; D = 70; H = 90;\nwall = 2;\n\n// base box\nmodule base_box() {\n    difference() {\n        cube([W, D, H]);\n        // hollow inside\n        translate([wall, wall, wall])\n            cube([W-2*wall, D-2*wall, H-wall]);\n    }\n}\n\n// front drawer with handle\nmodule drawer() {\n    dw = W - 2*wall - 10;\n    dd = D - 4*wall;\n    dh = 20;\n    translate([wall+5, wall*2, wall*2]) {\n        difference() {\n            cube([dw, dd, dh]);\n            translate([wall, wall, 0])\n                cube([dw-2*wall, dd-2*wall, dh+1]);\n        }\n        // handle\n        translate([dw/2, dd+1, dh/2])\n            rotate([90,0,0])\n                cylinder(h=8, d1=12, d2=8, center=true);\n    }\n}\n\n// vertical pen holders\nmodule pen_holders() {\n    for (x=[25, 45, 65]) {\n        translate([x, D-25, H-30]) {\n            difference() {\n                cylinder(h=30, r=10);\n                translate([0,0,-1])\n                    cylinder(h=32, r=8);\n            }\n        }\n    }\n}\n\n// rear cable / phone slot\nmodule phone_slot() {\n    slot_w = 14;\n    slot_h = 12;\n    translate([W/2-7, D-wall-slot_w, H-slot_h]) {\n        cube([14, slot_w+wall, slot_h+1]);\n    }\n}\n\n// reinforcing feet\nmodule feet() {\n    for (x=[wall*3, W-wall*3], y=[wall*3, D-wall*3]) {\n        translate([x, y, 0]) {\n            cylinder(h=wall+1, r=wall+1, center=false);\n        }\n    }\n}\n\n// label recess on front\nmodule label_recess() {\n    translate([W/2-15, wall, H/2-5])\n        cube([30, wall+1, 10]);\n}\n\n// assembly\nunion() {\n    base_box();\n    drawer();\n    pen_holders();\n    phone_slot();\n    feet();\n    label_recess();\n}",
    "renders": true
  },
  {
    "office_supply": "cobalt",
    "openscad_code": "// Cobalt Blue Office Chair - Realistic Style\n// Overall dimensions: ~120mm height x 110mm width x 110mm depth\n\n// Chair color - Cobalt blue\ncolor([0.0, 0.28, 0.67]) {\n\n// Main seat assembly\nmodule seat_assembly() {\n    // Seat cushion\n    translate([0, 0, 45]) {\n        difference() {\n            cube([80, 80, 12], center=true);\n            translate([0, 0, -1]) cube([78, 78, 14], center=true);\n        }\n    }\n    \n    // Seat support structure\n    translate([0, 0, 35]) {\n        difference() {\n            cylinder(h=10, r=35, center=true, $fn=32);\n            cylinder(h=12, r=33, center=true, $fn=32);\n        }\n    }\n}\n\n// Backrest assembly\nmodule backrest_assembly() {\n    // Main backrest\n    translate([0, -35, 85]) {\n        difference() {\n            cube([75, 8, 70], center=true);\n            translate([0, 0, 5]) cube([73, 10, 66], center=true);\n        }\n    }\n    \n    // Lumbar support curve\n    translate([0, -31, 75]) {\n        difference() {\n            cube([65, 4, 20], center=true);\n            translate([0, 0, -2]) cube([63, 6, 24], center=true);\n        }\n    }\n}\n\n// Armrests\nmodule armrest(side) {\n    translate([side * 40, 0, 60]) {\n        // Vertical support\n        difference() {\n            cylinder(h=25, r=5, center=true, $fn=16);\n            cylinder(h=27, r=3, center=true, $fn=16);\n        }\n        \n        // Horizontal rest\n        translate([0, 25, 12]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=30, r=4, center=true, $fn=16);\n                    cylinder(h=32, r=2, center=true, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Base with 5-star legs and wheels\nmodule base_assembly() {\n    // Central pillar\n    translate([0, 0, 20]) {\n        difference() {\n            cylinder(h=30, r=12, center=true, $fn=32);\n            cylinder(h=32, r=10, center=true, $fn=32);\n        }\n    }\n    \n    // Gas lift cylinder\n    translate([0, 0, 35]) {\n        difference() {\n            cylinder(h=15, r=8, center=true, $fn=32);\n            cylinder(h=17, r=6, center=true, $fn=32);\n        }\n    }\n    \n    // 5-star base legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 45, 7]) {\n                difference() {\n                    cube([8, 90, 14], center=true);\n                    translate([0, 0, -1]) cube([6, 92, 16], center=true);\n                }\n            }\n            \n            // Wheels at leg ends\n            translate([0, 90, 7]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=8, r=6, center=true, $fn=16);\n                        cylinder(h=10, r=4, center=true, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    seat_assembly();\n    backrest_assembly();\n    armrest(1);\n    armrest(-1);\n    base_assembly();\n}\n\n}",
    "renders": true
  },
  {
    "office_supply": "rune",
    "openscad_code": "// Rune-shaped desk leg (single piece) with realistic structural details\n// Size: 100mm height, 50mm width, 50mm depth\n// Wall thickness: 2mm throughout\n\n// Main parameters\nheight = 100;\nwidth = 50;\ndepth = 50;\nwall = 2;\n\n// Create the rune desk leg\nmodule rune_leg() {\n    // Central vertical beam\n    difference() {\n        cube([wall, height, depth], center=true);\n        // Cable management hole\n        translate([0, height/3, 0])\n            rotate([90, 0, 0])\n                cylinder(h=wall+1, r=5, center=true);\n    }\n    \n    // Top horizontal beam (desk support)\n    translate([0, height/2, 0])\n        cube([width, wall, depth], center=true);\n    \n    // Bottom horizontal beam (floor support)\n    translate([0, -height/2, 0])\n        cube([width, wall, depth], center=true);\n    \n    // Diagonal braces\n    // Front diagonal\n    translate([width/4, 0, 0])\n        rotate([0, 0, atan(height/width/2)])\n            cube([sqrt(pow(height/2, 2) + pow(width/4, 2)), wall, depth-4], center=true);\n    \n    // Back diagonal (mirrored)\n    translate([-width/4, 0, 0])\n        rotate([0, 0, -atan(height/width/2)])\n            cube([sqrt(pow(height/2, 2) + pow(width/4, 2)), wall, depth-4], center=true);\n    \n    // Side braces\n    // Left side\n    translate([0, 0, depth/4])\n        rotate([atan(height/width/2), 0, 0])\n            cube([width-4, wall, sqrt(pow(height/2, 2) + pow(depth/4, 2))], center=true);\n    \n    // Right side\n    translate([0, 0, -depth/4])\n        rotate([-atan(height/width/2), 0, 0])\n            cube([width-4, wall, sqrt(pow(height/2, 2) + pow(depth/4, 2))], center=true);\n    \n    // Corner gussets for strength\n    for(x = [-width/2 + wall, width/2 - wall]) {\n        for(z = [-depth/2 + wall, depth/2 - wall]) {\n            translate([x, height/2 - 10, z])\n                cube([wall*2, 20, wall*2], center=true);\n            translate([x, -height/2 + 10, z])\n                cube([wall*2, 20, wall*2], center=true);\n        }\n    }\n    \n    // Mounting plates\n    // Top plate for desk attachment\n    translate([0, height/2, 0])\n        difference() {\n            cube([width-10, wall, depth-10], center=true);\n            // Screw holes\n            for(x = [-width/4, width/4]) {\n                for(z = [-depth/4, depth/4]) {\n                    translate([x, 0, z])\n                        cylinder(h=wall+1, r=2.5, center=true);\n                }\n            }\n        }\n    \n    // Bottom plate for floor attachment\n    translate([0, -height/2, 0])\n        difference() {\n            cube([width-10, wall, depth-10], center=true);\n            // Screw holes\n            for(x = [-width/4, width/4]) {\n                for(z = [-depth/4, depth/4]) {\n                    translate([x, 0, z])\n                        cylinder(h=wall+1, r=2.5, center=true);\n                }\n            }\n        }\n    \n    // Decorative rune symbols\n    translate([width/2 + wall, 0, 0])\n        rotate([0, 90, 0])\n            for(i = [0:3]) {\n                translate([0, -height/2 + 10 + i*20, 0])\n                    cube([wall, 5, 5], center=true);\n            }\n}\n\n// Render the complete rune leg\nrune_leg();",
    "renders": true
  },
  {
    "office_supply": "skye",
    "openscad_code": "// Skye Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm height, 100mm width, 110mm depth\n\n// Main seat module\nmodule seat() {\n    // Seat cushion (ergonomic curved top)\n    translate([0, 0, 45]) {\n        difference() {\n            // Main cushion block\n            cube([70, 70, 12], center=true);\n            // Ergonomic curve on top\n            translate([0, 0, 6]) {\n                scale([1, 1, 0.5]) {\n                    sphere(d=68, $fn=50);\n                }\n            }\n        }\n    }\n    \n    // Seat frame structure\n    translate([0, 0, 35]) {\n        difference() {\n            // Outer frame\n            cube([72, 72, 10], center=true);\n            // Inner cutout\n            cube([68, 68, 12], center=true);\n        }\n    }\n}\n\n// Backrest module with lumbar support\nmodule backrest() {\n    // Main backrest panel\n    translate([0, 30, 85]) {\n        cube([65, 8, 70], center=true);\n    }\n    \n    // Lumbar support curve\n    translate([0, 34, 75]) {\n        difference() {\n            cylinder(h=8, d=60, center=true, $fn=50);\n            translate([0, 0, -5]) {\n                cube([70, 20, 20], center=true);\n            }\n        }\n    }\n    \n    // Backrest frame\n    for(i = [-30, 30]) {\n        translate([i, 30, 85]) {\n            cube([4, 8, 70], center=true);\n        }\n    }\n}\n\n// Armrest module\nmodule armrest(side) {\n    translate([side * 40, 0, 60]) {\n        // Vertical support\n        cylinder(h=25, d=8, $fn=20);\n        \n        // Horizontal arm pad\n        translate([0, 15, 12]) {\n            rotate([0, 15, 0]) {\n                cube([8, 30, 4], center=true);\n            }\n        }\n    }\n}\n\n// 5-star base with casters\nmodule base() {\n    // Central column\n    translate([0, 0, 20]) {\n        cylinder(h=25, d1=15, d2=10, $fn=30);\n    }\n    \n    // Gas lift cylinder\n    translate([0, 0, 10]) {\n        cylinder(h=10, d=12, $fn=30);\n    }\n    \n    // 5-star legs\n    for(i = [0:72:360]) {\n        rotate([0, 0, i]) {\n            translate([0, 25, 0]) {\n                cube([8, 50, 6], center=true);\n            }\n        }\n    }\n    \n    // Casters\n    for(i = [0:72:360]) {\n        rotate([0, 0, i]) {\n            translate([0, 50, -4]) {\n                // Caster wheel\n                rotate([90, 0, 0]) {\n                    cylinder(h=5, d=8, $fn=16);\n                }\n                // Caster mount\n                translate([0, 0, 2]) {\n                    cube([6, 6, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Base\n    base();\n    \n    // Support column from seat to base\n    translate([0, 0, 32]) {\n        cylinder(h=13, d=10, $fn=30);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "dax",
    "openscad_code": "// DAX Office Chair – medium-complexity, realistic style, 3D-printable\n// Overall height 120 mm, seat height 65 mm, footprint ≈ 70 mm\n\n// Parameters\nleg_d   = 5;            // leg tube diameter\nwall_t  = 2;            // printable wall thickness\nseat_w  = 60; seat_d  = 60; seat_t = 5;\nback_w  = 55; back_h  = 55; back_t = 4;\narm_w   = 6; arm_h = 20;\ngas_h   = 25; gas_d = 8;\nbase_r  = 30;           // 5-star base radius\n\n// --- Seat shell (ergonomic dish)\nmodule seat_shell() {\n    difference() {\n        union() {\n            // main seat block\n            translate([0,0,seat_t/2])\n                cube([seat_w,seat_d,seat_t], center=true);\n\n            // slight front slope\n            translate([0, seat_d/2 - 5, seat_t/2 - 2])\n                rotate([7,0,0])\n                cube([seat_w, 10, seat_t+4], center=true);\n        }\n        // underside cavity for weight saving\n        translate([0,0,-1])\n            cube([seat_w-wall_t*2, seat_d-wall_t*2, seat_t+2], center=true);\n    }\n}\n\n// --- Backrest with lumbar curve\nmodule backrest() {\n    difference() {\n        union() {\n            // main plate\n            translate([0,0,back_h/2])\n                cube([back_w, back_t, back_h], center=true);\n\n            // lumbar bulge\n            translate([0, back_t/2, back_h/3])\n                cube([back_w*0.7, wall_t, back_h*0.6], center=true);\n        }\n        // hollow rear face\n        translate([0, back_t/2+1, back_h/2])\n            cube([back_w-wall_t*2, back_t, back_h-wall_t*2], center=true);\n    }\n}\n\n// --- Armrest pair (simple blocks)\nmodule armrests() {\n    for(side=[-1,1])\n        translate([side*(seat_w/2 + arm_w/2), 0, seat_t + arm_h/2])\n            cube([arm_w, arm_w, arm_h], center=true);\n}\n\n// --- 5-star base\nmodule star_base() {\n    for(a=[0:72:359])\n        rotate([0,0,a])\n            translate([0, base_r/2, leg_d/2])\n                rotate([90,0,0])\n                    cylinder(h=base_r, d=leg_d, $fn=12);\n}\n\n// --- Central gas lift column\nmodule gas_lift() {\n    translate([0,0,gas_h/2])\n        cylinder(h=gas_h, d=gas_d, $fn=20);\n}\n\n// --- Castor wheels (simple spheres)\nmodule castors() {\n    for(a=[0:72:359])\n        rotate([0,0,a])\n            translate([0, base_r, leg_d/2 + 3])\n                sphere(d=leg_d*0.8, $fn=12);\n}\n\n// --- Assembly\n// Base\nunion() {\n    star_base();\n    castors();\n}\n\n// Gas lift\ntranslate([0,0,leg_d])\n    gas_lift();\n\n// Swivel plate\ntranslate([0,0,leg_d+gas_h])\n    cylinder(h=wall_t, d=gas_d+6, $fn=20);\n\n// Seat shell\ntranslate([0,0,leg_d+gas_h+wall_t])\n    seat_shell();\n\n// Backrest upright\ntranslate([0, -seat_d/2 + back_t/2, leg_d+gas_h+wall_t+seat_t+back_h/2])\n    backrest();\n\n// Armrests\ntranslate([0,0,leg_d+gas_h+wall_t])\n    armrests();",
    "renders": true
  },
  {
    "office_supply": "luna",
    "openscad_code": "// Luna Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm height, 100mm width, 100mm depth\n\n// Chair parameters\nseat_height = 45;\nseat_width = 50;\nseat_depth = 50;\nback_height = 75;\narmrest_height = 65;\nbase_radius = 25;\ncaster_radius = 6;\ngas_spring_radius = 8;\n\n// Wall thickness\nwall = 2;\n\nmodule seat_cushion() {\n    // Main seat with rounded front\n    translate([0, 0, seat_height])\n    union() {\n        // Seat base\n        difference() {\n            cube([seat_width, seat_depth, 8], center=true);\n            translate([0, 0, wall])\n            cube([seat_width-wall*2, seat_depth-wall*2, 8], center=true);\n        }\n        // Front rounded edge\n        translate([0, seat_depth/2-4, -4])\n        rotate([90, 0, 0])\n        cylinder(h=seat_width-wall*2, r=4, center=true);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with lumbar support\n    translate([0, -seat_depth/2+5, seat_height+4+back_height/2])\n    rotate([5, 0, 0])\n    difference() {\n        // Main back panel\n        cube([seat_width-10, 6, back_height], center=true);\n        // Lumbar curve\n        translate([0, 0, -back_height/4])\n        cube([seat_width-10-wall*2, 10, back_height/2], center=true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2-2, 0, armrest_height])\n    rotate([0, 10, 0])\n    union() {\n        // Vertical support\n        cube([wall, 20, armrest_height-seat_height], center=true);\n        // Horizontal pad\n        translate([0, 10, (armrest_height-seat_height)/2])\n        cube([wall+4, 20, wall+4], center=true);\n    }\n    \n    // Right armrest (mirrored)\n    translate([seat_width/2+2, 0, armrest_height])\n    mirror([1, 0, 0])\n    rotate([0, 10, 0])\n    union() {\n        cube([wall, 20, armrest_height-seat_height], center=true);\n        translate([0, 10, (armrest_height-seat_height)/2])\n        cube([wall+4, 20, wall+4], center=true);\n    }\n}\n\nmodule gas_spring() {\n    // Central support column\n    translate([0, 0, seat_height/2])\n    cylinder(h=seat_height-4, r=gas_spring_radius, center=true);\n    \n    // Adjustment lever\n    translate([gas_spring_radius+2, 0, seat_height-8])\n    rotate([0, 90, 0])\n    cylinder(h=15, r=2);\n}\n\nmodule star_base() {\n    // 5-star base\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([base_radius/2, 0, caster_radius])\n        cube([base_radius, wall*2, wall*2], center=true);\n    }\n    \n    // Central hub\n    cylinder(h=wall*3, r=gas_spring_radius+2);\n}\n\nmodule casters() {\n    // 5 casters\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([base_radius, 0, caster_radius])\n        sphere(r=caster_radius);\n        \n        // Caster stem\n        translate([base_radius, 0, caster_radius*2])\n        cylinder(h=caster_radius*2, r=2);\n    }\n}\n\n// Assemble the chair\nunion() {\n    seat_cushion();\n    backrest();\n    armrests();\n    gas_spring();\n    translate([0, 0, 0])\n    star_base();\n    casters();\n}",
    "renders": true
  },
  {
    "office_supply": "grimm",
    "openscad_code": "// Grimm Office Chair - Realistic Style\n// Medium complexity office chair with ergonomic features\n\n$fn = 32;\nwall = 2;\n\nmodule chair_base() {\n    // Central pole\n    cylinder(h=60, r=5, center=false);\n    \n    // Star base legs\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 15, 0]) {\n                cube([30, 10, wall], center=true);\n                translate([15, 0, -7.5]) \n                    cylinder(h=15, r=5, center=false);\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat pad\n    difference() {\n        translate([0, 0, 2])\n            cube([40, 40, 8], center=true);\n        translate([0, 0, 4])\n            cube([36, 36, 10], center=true);\n    }\n    \n    // Seat surface detail\n    for(x=[-15:15:15]) {\n        for(y=[-15:15:15]) {\n            translate([x, y, 8])\n                cube([12, 12, 0.5], center=true);\n        }\n    }\n}\n\nmodule backrest() {\n    // Main back support\n    difference() {\n        translate([0, 18, 20])\n            cube([38, 6, 35], center=true);\n        translate([0, 18, 25])\n            cube([34, 10, 30], center=true);\n    }\n    \n    // Lumbar support curve\n    translate([0, 21, 15])\n        scale([1, 0.3, 0.8])\n            sphere(r=20);\n    \n    // Headrest\n    translate([0, 15, 38])\n        cube([25, 8, 12], center=true);\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-22, 0, 15]) {\n        cube([4, 25, wall], center=true);\n        translate([0, -12.5, 5])\n            cube([4, wall, 12], center=true);\n    }\n    \n    // Right armrest\n    translate([22, 0, 15]) {\n        cube([4, 25, wall], center=true);\n        translate([0, -12.5, 5])\n            cube([4, wall, 12], center=true);\n    }\n}\n\nmodule adjustment_lever() {\n    translate([20, 0, 10])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=2, center=false);\n}\n\n// Assembly\nunion() {\n    // Gas lift cylinder\n    translate([0, 0, 10]) {\n        cylinder(h=60, r=4, center=false);\n    }\n    \n    // Main chair components\n    translate([0, 0, 70]) {\n        chair_base();\n        translate([0, 0, 60])\n            seat_cushion();\n        backrest();\n        armrests();\n        adjustment_lever();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "zuri",
    "openscad_code": "// Zuri Chair - Realistic Office Chair Model\n// Medium complexity 3D printable office chair\n\n$fn = 32;\n\n// Main chair dimensions\nseat_width = 40;\nseat_depth = 40;\nseat_thickness = 3;\nback_height = 50;\narmrest_height = 20;\nbase_diameter = 45;\ncylinder_radius = 8;\ngas_spring_radius = 5;\n\n// Seat module with cushion detail\nmodule chair_seat() {\n    // Main seat platform\n    translate([0, 0, seat_thickness/2])\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n    \n    // Cushion detail - slightly rounded top\n    translate([0, 0, seat_thickness + 2])\n        scale([1, 1, 0.3])\n            sphere(d=seat_width - 4);\n    \n    // Seat support structure underneath\n    for(x = [-15, -5, 5, 15]) {\n        translate([x, 0, seat_thickness/2 - 2])\n            cube([3, seat_depth - 4, 4], center=true);\n    }\n}\n\n// Backrest module with lumbar support\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -seat_depth/2 + 5, seat_thickness + back_height/2])\n        cube([seat_width - 10, 5, back_height], center=true);\n    \n    // Curved lumbar support\n    translate([0, -seat_depth/2 + 7, seat_thickness + 15])\n        rotate([90, 0, 0])\n            cylinder(h=seat_width - 15, r1=8, r2=8, center=true);\n    \n    // Headrest\n    translate([0, -seat_depth/2 + 3, seat_thickness + back_height + 8])\n        cube([20, 15, 10], center=true);\n}\n\n// Armrest module\nmodule armrest(side) {\n    // Vertical support post\n    translate([side * (seat_width/2 - 5), 0, seat_thickness + armrest_height/2])\n        cylinder(h=armrest_height, r=2.5, center=true);\n    \n    // Horizontal armrest pad\n    translate([side * (seat_width/2 - 5), seat_depth/2 - 10, seat_thickness + armrest_height + 2])\n        cube([20, 5, 3], center=true);\n}\n\n// Gas spring cylinder\nmodule gas_spring() {\n    // Main cylinder\n    translate([0, 0, -cylinder_radius])\n        cylinder(h=30, r=gas_spring_radius, center=true);\n    \n    // Protective bellows\n    translate([0, 0, -cylinder_radius - 5])\n        cylinder(h=10, r=gas_spring_radius + 2, center=true);\n}\n\n// 5-star base with casters\nmodule base() {\n    // Central hub\n    translate([0, 0, -cylinder_radius - 15])\n        cylinder(h=8, r=10, center=true);\n    \n    // Star legs\n    for(i = [0:5]) {\n        rotate([0, 0, i * 72])\n            translate([base_diameter/2 - 10, 0, -cylinder_radius - 15])\n                cube([base_diameter/2, 8, 8], center=true);\n        \n        // Caster wheels\n        rotate([0, 0, i * 72])\n            translate([base_diameter/2 - 5, 0, -cylinder_radius - 15 - 4])\n                sphere(d=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat assembly\n    chair_seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests (left and right)\n    armrest(1);\n    armrest(-1);\n    \n    // Support structure\n    gas_spring();\n    \n    // Base\n    base();\n}",
    "renders": true
  },
  {
    "office_supply": "bolt",
    "openscad_code": "// Bolt Furniture - Office Supply Organizer\n// Inspired by industrial bolt design for desk storage\n\n// Parameters\nbolt_diameter = 30;\nbolt_height = 80;\nthread_pitch = 5;\nthread_depth = 1.5;\nwall_thickness = 2;\nhead_diameter = 50;\nhead_height = 12;\nnut_width = 25;\nnut_height = 12;\n\n// Main bolt body with threads\nmodule threaded_shaft() {\n    difference() {\n        // Main cylinder body\n        cylinder(h=bolt_height, d=bolt_diameter, $fn=32);\n        \n        // Center hole for pen storage\n        translate([0, 0, -1])\n            cylinder(h=bolt_height+2, d=bolt_diameter-wall_thickness*2, $fn=32);\n        \n        // Thread grooves - spiral pattern\n        for(i=[0:thread_pitch:bolt_height]) {\n            rotate([0, 0, i*30]) \n                translate([bolt_diameter/2 - thread_depth, 0, i])\n                cylinder(h=thread_pitch+1, d=thread_depth*2, $fn=8);\n        }\n    }\n}\n\n// Hexagonal bolt head\nmodule bolt_head() {\n    difference() {\n        // Main hex head\n        cylinder(h=head_height, d1=head_diameter, d2=head_diameter, $fn=6);\n        \n        // Top countersink\n        translate([0, 0, -1])\n            cylinder(h=head_height/2, d1=head_diameter-wall_thickness*2, d2=0, $fn=32);\n        \n        // Center alignment hole\n        translate([0, 0, -1])\n            cylinder(h=head_height+2, d=bolt_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Matching hex nut for base\nmodule hex_nut() {\n    difference() {\n        // Main nut body\n        cylinder(h=nut_height, d=nut_width*1.15, $fn=6);\n        \n        // Threaded hole\n        translate([0, 0, -1])\n            cylinder(h=nut_height+2, d=bolt_diameter, $fn=32);\n        \n        // Chamfer edges\n        translate([0, 0, -1])\n            cylinder(h=2, d1=nut_width*1.15, d2=nut_width, $fn=6);\n    }\n}\n\n// Structural support ribs\nmodule support_ribs() {\n    for(i=[0:60:359]) {\n        rotate([0, 0, i]) {\n            translate([bolt_diameter/2 - wall_thickness, 0, bolt_height/2])\n                cube([wall_thickness*2, 3, bolt_height-4]);\n        }\n    }\n}\n\n// Ergonomic grip texture\nmodule grip_texture() {\n    for(i=[0:15:bolt_height-15]) {\n        translate([0, 0, i]) {\n            for(j=[0:30:359]) {\n                rotate([0, 0, j]) {\n                    translate([bolt_diameter/2 - wall_thickness/2, 0, 0])\n                        sphere(d=wall_thickness, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shaft\n    translate([0, 0, 0])\n        threaded_shaft();\n    \n    // Bolt head\n    translate([0, 0, bolt_height])\n        bolt_head();\n    \n    // Support ribs inside\n    translate([0, 0, 0])\n        support_ribs();\n    \n    // Grip texture\n    grip_texture();\n}\n\n// Base nut\ntranslate([0, 0, -nut_height])\n    hex_nut();",
    "renders": true
  },
  {
    "office_supply": "echo",
    "openscad_code": "// Echo (Amazon Echo) Smart Speaker - Realistic Style\n// Overall dimensions: 100mm height x 90mm diameter (base) x 60mm diameter (top)\n\nmodule echo_base() {\n    // Main cylindrical body\n    cylinder(h=85, r1=45, r2=30, $fn=100);\n    \n    // Base ring for stability\n    translate([0, 0, -1])\n        difference() {\n            cylinder(h=5, r1=47, r2=47, $fn=100);\n            cylinder(h=7, r1=42, r2=42, $fn=100);\n        }\n}\n\nmodule echo_top() {\n    // Top button panel\n    translate([0, 0, 86])\n        difference() {\n            cylinder(h=8, r1=30, r2=30, $fn=100);\n            // Volume up button\n            translate([0, 12, 3])\n                cube([15, 6, 3], center=true);\n            // Volume down button  \n            translate([0, -12, 3])\n                cube([15, 6, 3], center=true);\n            // Action button\n            translate([12, 0, 3])\n                cube([6, 15, 3], center=true);\n            // Microphone mute button\n            translate([-12, 0, 3])\n                cube([6, 15, 3], center=true);\n        }\n}\n\nmodule echo_light_ring() {\n    // LED light ring around top\n    translate([0, 0, 83])\n    difference() {\n        cylinder(h=3, r1=35, r2=35, $fn=100);\n        cylinder(h=4, r1=32, r2=32, $fn=100);\n    }\n}\n\nmodule power_port() {\n    // Power connector port at back\n    translate([0, -43, 15])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=8, r=6, $fn=30);\n        cylinder(h=9, r=4, $fn=30);\n    }\n}\n\nmodule speaker_grill() {\n    // Perforated speaker grill pattern\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10]) {\n            translate([38, 0, 5]) {\n                for (j = [0:7]) {\n                    translate([0, 0, j * 10 + 5])\n                        rotate([90, 0, 0])\n                        cylinder(h=2, r=1.5, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Outer shell with wall thickness\n    difference() {\n        echo_base();\n        translate([0, 0, 5])\n            cylinder(h=75, r1=43, r2=28, $fn=100);\n    }\n    \n    // Add top section\n    echo_top();\n    \n    // Add light ring\n    echo_light_ring();\n    \n    // Add power port\n    power_port();\n    \n    // Add speaker grill\n    speaker_grill();\n}",
    "renders": true
  },
  {
    "office_supply": "faye",
    "openscad_code": "// Faye Office Chair - Realistic Style, Medium Complexity\n// Dimensions: ~120mm height, 80mm width, 90mm depth\n\n$fn = 36;  // Smooth curves for 3D printing\nwall_thickness = 2;\n\nmodule chair_base() {\n    // 5-star base with casters\n    union() {\n        // Central column\n        cylinder(h=8, r=8);\n        \n        // 5 legs\n        for (i = [0:4]) {\n            rotate([0, 0, i*72]) \n            translate([0, 0, 4])\n            cube([35, 10, 4], center=true);\n        }\n        \n        // Caster wheels\n        for (i = [0:4]) {\n            rotate([0, 0, i*72]) \n            translate([30, 0, -4])\n            sphere(r=4);\n        }\n    }\n}\n\nmodule gas_lift() {\n    // Height adjustment cylinder\n    difference() {\n        cylinder(h=35, r=5);\n        translate([0, 0, wall_thickness])\n        cylinder(h=35-wall_thickness, r=5-wall_thickness);\n    }\n}\n\nmodule tilt_mechanism() {\n    // Connection plate with tilt adjustment\n    translate([0, 0, 35])\n    cube([50, 40, 8], center=true);\n}\n\nmodule seat() {\n    // Ergonomic seat with waterfall edge\n    difference() {\n        // Main seat cushion\n        translate([0, 0, 43])\n        scale([1, 1.2, 0.3])\n        sphere(r=40);\n        \n        // Hollow bottom\n        translate([0, 0, 38])\n        scale([0.9, 1.1, 0.25])\n        sphere(r=38);\n    }\n    \n    // Seat pan support\n    translate([0, 0, 41])\n    cube([46, 44, 4], center=true);\n}\n\nmodule backrest() {\n    // Curved backrest with lumbar support\n    translate([0, -25, 85])\n    rotate([15, 0, 0])\n    difference() {\n        // Main backrest\n        scale([1, 1.1, 1.3])\n        sphere(r=35);\n        \n        // Hollow back\n        translate([0, 2, -5])\n        scale([0.85, 1, 1.1])\n        sphere(r=32);\n    }\n    \n    // Backrest support post\n    translate([0, -15, 60])\n    cube([8, 20, 40], center=true);\n}\n\nmodule armrests() {\n    // Adjustable armrests\n    for (side = [-1, 1]) {\n        translate([side*35, 0, 50])\n        union() {\n            // Vertical post\n            cube([4, 4, 25], center=true);\n            \n            // Arm pad\n            translate([0, 15, 12])\n            cube([20, 5, 4], center=true);\n        }\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_base();\n    gas_lift();\n    tilt_mechanism();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "vex",
    "openscad_code": "// VEX Office Chair - Realistic Style, Medium Complexity\n// 3D printable with 2mm wall thickness, no overhangs\n\n// Main seat module\nmodule seat() {\n    // Seat cushion - ergonomic curved shape\n    difference() {\n        // Main seat base\n        translate([0, 0, 100]) \n            scale([1, 1.2, 0.3])\n            sphere(d=120, $fn=50);\n        \n        // Remove bottom half for flat surface\n        translate([0, 0, 80])\n            cube([200, 200, 50], center=true);\n    }\n    \n    // Seat frame reinforcement\n    translate([0, 0, 95]) {\n        cylinder(h=10, d=110, $fn=32);\n    }\n}\n\n// Backrest module with lumbar support\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -65, 140]) {\n        // Curved backrest\n        difference() {\n            scale([1, 0.8, 1.2])\n            sphere(d=100, $fn=50);\n            translate([0, 30, 0])\n                cube([200, 100, 200], center=true);\n        }\n    }\n    \n    // Lumbar support curve\n    translate([0, -60, 110]) {\n        scale([0.7, 0.5, 0.3])\n        sphere(d=80, $fn=32);\n    }\n}\n\n// Armrest module - repeatable for both sides\nmodule armrest(side) {\n    translate([side * 50, 0, 120]) {\n        // Vertical support post\n        cylinder(h=80, d=15, $fn=16);\n        \n        // Horizontal arm pad\n        translate([0, 20, 40]) {\n            rotate([0, 20, 0])\n            cube([50, 15, 8], center=true);\n        }\n    }\n}\n\n// 5-star base with wheels\nmodule base() {\n    // Central post\n    cylinder(h=100, d=30, $fn=32);\n    \n    // 5-star legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 25, 0]) {\n                // Leg\n                scale([1, 15, 1])\n                cube([8, 50, 8], center=true);\n                \n                // Wheel\n                translate([0, 60, -8]) {\n                    sphere(d=12, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Height adjustment cylinder\n    translate([0, 0, 100]) {\n        cylinder(h=30, d=25, $fn=32);\n    }\n}\n\n// Gas lift mechanism\nmodule gas_lift() {\n    translate([0, 0, 130]) {\n        cylinder(h=20, d=20, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Base and support structure\n    base();\n    gas_lift();\n    \n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "jett",
    "openscad_code": "// JETT Office Chair - Realistic Medium Complexity\n// Overall dimensions: 120mm H x 80mm W x 90mm D\n\n// Seat base module\nmodule seat_base() {\n    // Main seat cushion\n    translate([0, 0, 45])\n        cube([60, 60, 8], center=true);\n    \n    // Seat edge detail\n    translate([0, 0, 39])\n        cube([62, 62, 2], center=true);\n}\n\n// Backrest module\nmodule backrest() {\n    // Main back panel\n    translate([0, -25, 85])\n        cube([55, 5, 70], center=true);\n    \n    // Lumbar support curve\n    translate([0, -22, 70])\n        cube([50, 8, 20], center=true);\n    \n    // Headrest\n    translate([0, -25, 115])\n        cube([35, 5, 20], center=true);\n}\n\n// Armrest module\nmodule armrest(side) {\n    // Horizontal support\n    translate([side * 35, 0, 65])\n        cube([4, 30, 4], center=true);\n    \n    // Vertical post\n    translate([side * 35, 10, 52])\n        cylinder(h=15, r=2, center=true);\n}\n\n// Wheel base module\nmodule wheel_base() {\n    // Central pole\n    translate([0, 0, 30])\n        cylinder(h=30, r=4, center=true);\n    \n    // Star base legs\n    for(i=[0:5]) {\n        rotate([0, 0, i * 60])\n            translate([25, 0, 5])\n                cube([40, 8, 10], center=true);\n    }\n    \n    // Wheels\n    for(i=[0:5]) {\n        rotate([0, 0, i * 60])\n            translate([45, 0, 2])\n                sphere(r=3, center=true);\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    // Outer cylinder\n    translate([0, 0, 15])\n        cylinder(h=20, r=5, center=true);\n    \n    // Inner cylinder detail\n    translate([0, 0, 15])\n        cylinder(h=20, r=3, center=true);\n}\n\n// Seat adjustment lever\nmodule adjustment_lever() {\n    translate([30, 0, 45])\n        rotate([0, 90, 0])\n            cylinder(h=20, r=2, center=true);\n}\n\n// Main assembly\nunion() {\n    // Seat components\n    seat_base();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Base\n    wheel_base();\n    \n    // Support column\n    gas_lift();\n    \n    // Controls\n    adjustment_lever();\n}",
    "renders": true
  },
  {
    "office_supply": "nyx",
    "openscad_code": "// NYX Office Chair - Realistic Style\n// Overall height: 120mm, seat height: 60mm\n\n$fn = 50;\n\n// Main modules\nmodule nyx_chair() {\n    union() {\n        seat_and_back();\n        armrests();\n        base();\n        wheels();\n        adjustment_mechanism();\n    }\n}\n\nmodule seat_and_back() {\n    // Seat cushion - ergonomic shape\n    translate([0, 0, 60])\n    scale([1, 1.1, 0.3])\n    sphere(r=30);\n\n    // Seat support structure\n    translate([0, 0, 55])\n    difference() {\n        cube([60, 55, 10], center=true);\n        translate([0, 0, 5])\n        cube([56, 51, 12], center=true);\n    }\n\n    // Backrest with lumbar support\n    translate([0, -25, 90])\n    rotate([10, 0, 0])\n    difference() {\n        scale([1, 1.5, 1])\n        sphere(r=30);\n        translate([0, 10, -5])\n        cube([50, 40, 40], center=true);\n    }\n\n    // Backrest mesh pattern\n    translate([0, -35, 85])\n    rotate([10, 0, 0])\n    for(i = [-20:10:20]) {\n        for(j = [0:8:32]) {\n            translate([i, 0, j])\n            cube([2, 2, 6]);\n        }\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-35, 5, 75])\n    union() {\n        // Support post\n        cylinder(h=15, r=4);\n        // Arm pad\n        translate([0, 0, 16])\n        rotate([0, 10, 0])\n        scale([1.2, 4, 0.5])\n        sphere(r=8);\n    }\n\n    // Right armrest\n    mirror([1, 0, 0])\n    translate([-35, 5, 75])\n    union() {\n        cylinder(h=15, r=4);\n        translate([0, 0, 16])\n        rotate([0, 10, 0])\n        scale([1.2, 4, 0.5])\n        sphere(r=8);\n    }\n}\n\nmodule base() {\n    // Gas lift cylinder\n    cylinder(h=55, r=6);\n\n    // Base star legs\n    for(angle = [0:72:360]) {\n        rotate([0, 0, angle])\n        translate([0, 25, 0])\n        union() {\n            // Leg\n            cube([8, 50, 5], center=true);\n            // Wheel mount\n            translate([0, 25, 0])\n            cylinder(h=8, r=4);\n        }\n    }\n}\n\nmodule wheels() {\n    for(angle = [0:72:360]) {\n        rotate([0, 0, angle])\n        translate([0, 50, -8])\n        rotate([90, 0, 0])\n        difference() {\n            // Wheel body\n            cylinder(h=8, r=6);\n            // Wheel hole\n            cylinder(h=10, r=3);\n        }\n    }\n}\n\nmodule adjustment_mechanism() {\n    // Height adjustment lever\n    translate([30, 0, 57])\n    rotate([0, 0, 20])\n    cube([3, 20, 3]);\n\n    // Tilt tension knob\n    translate([0, 30, 45])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=5);\n    \n    // Knob grip pattern\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([4, 0, 4])\n        cube([1, 1, 8]);\n    }\n}\n\n// Render the chair\nnyx_chair();",
    "renders": true
  },
  {
    "office_supply": "raze",
    "openscad_code": "// Realistic OpenSCAD model of an office chair (raze type) – medium complexity\n// Overall print-friendly size: ~110 mm tall, 60 mm wide, 60 mm deep\n// Wall thickness kept at 2 mm, no extreme overhangs\n\n// Parameters\nseat_w = 50;\nseat_d = 50;\nseat_t = 3;\nbackrest_h = 60;\nbackrest_w = 50;\nbackrest_t = 3;\narmrest_h = 15;\narmrest_w = 5;\narmrest_d = 40;\nbase_r = 25;\nbase_h = 8;\ncaster_r = 4;\ncaster_h = 5;\npole_r = 4;\npole_h = 40;\ngas_h = 8;\ngas_r = 5;\n\n// Central pivot\nmodule chair() {\n    union() {\n        // Gas-lift cylinder\n        translate([0, 0, base_h + caster_h])\n            cylinder(h = gas_h, r = gas_r, $fn = 32);\n\n        // Pole from base to seat\n        translate([0, 0, base_h + caster_h + gas_h])\n            cylinder(h = pole_h, r = pole_r, $fn = 32);\n\n        // Seat\n        translate([0, 0, base_h + caster_h + gas_h + pole_h])\n            cube([seat_w, seat_d, seat_t], center = true);\n\n        // Backrest\n        translate([0, -seat_d/2 + backrest_t/2, base_h + caster_h + gas_h + pole_h + seat_t/2 + backrest_h/2])\n            cube([backrest_w, backrest_t, backrest_h], center = true);\n\n        // Armrests\n        translate([seat_w/2 + armrest_w/2, 0, base_h + caster_h + gas_h + pole_h + seat_t/2 + armrest_h/2])\n            cube([armrest_w, armrest_d, armrest_h], center = true);\n        mirror([1, 0, 0])\n            translate([seat_w/2 + armrest_w/2, 0, base_h + caster_h + gas_h + pole_h + seat_t/2 + armrest_h/2])\n            cube([armrest_w, armrest_d, armrest_h], center = true);\n\n        // 5-star base\n        difference() {\n            cylinder(h = base_h, r = base_r, $fn = 32);\n            // Cut center hole\n            translate([0, 0, -1])\n                cylinder(h = base_h + 2, r = 5, $fn = 32);\n        }\n\n        // 5 Caster wheels\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n                translate([base_r - caster_r, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = caster_h, r = caster_r, $fn = 16);\n        }\n    }\n}\n\nchair();",
    "renders": true
  },
  {
    "office_supply": "kael",
    "openscad_code": "// Kael Furniture - Modern Office Chair with Ergonomic Design\n// Realistic style, medium complexity\n\nchair_width = 45;\nchair_depth = 50;\nchair_height = 90;\nseat_height = 45;\nbackrest_height = 45;\narmrest_height = 20;\n\n// Main seat base\nmodule seat_base() {\n    // Seat cushion\n    difference() {\n        translate([0, 0, seat_height]) {\n            cube([chair_width, chair_depth, 8], center=true);\n        }\n        // Rounded edges\n        translate([0, 0, seat_height + 4]) {\n            cylinder(h=8, r=chair_width/2, center=true);\n        }\n    }\n    \n    // Seat support structure\n    translate([0, 0, seat_height - 2]) {\n        cube([chair_width + 10, chair_depth + 10, 4], center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main backrest panel\n    difference() {\n        translate([0, -chair_depth/2 + 5, seat_height + backrest_height/2]) {\n            cube([chair_width - 10, 8, backrest_height], center=true);\n        }\n        // Curvature cutout\n        translate([0, -chair_depth/2 + 5, seat_height + backrest_height/2]) {\n            cylinder(h=10, r=chair_width/2 - 5, center=true);\n        }\n    }\n    \n    // Lumbar support ridge\n    translate([0, -chair_depth/2 + 1, seat_height + 15]) {\n        cube([chair_width - 20, 4, 15], center=true);\n    }\n}\n\n// Armrests\nmodule armrest(side) {\n    // Vertical support\n    translate([side * (chair_width/2 - 5), 0, seat_height + armrest_height/2]) {\n        cube([4, chair_depth - 20, armrest_height], center=true);\n    }\n    \n    // Horizontal arm pad\n    translate([side * (chair_width/2 - 5), chair_depth/4 - 10, seat_height + armrest_height + 2]) {\n        cube([6, chair_depth/2, 4], center=true);\n    }\n}\n\n// 5-star base with wheels\nmodule base() {\n    // Central column\n    cylinder(h=seat_height - 5, r=4);\n    \n    // Gas lift mechanism\n    translate([0, 0, seat_height - 7]) {\n        cylinder(h=4, r=5);\n    }\n    \n    // Star base legs\n    for(i = [0:5]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 15, 0]) {\n                cube([8, 30, 4], center=true);\n            }\n            // Caster wheels\n            translate([0, 30, -4]) {\n                sphere(r=3);\n            }\n        }\n    }\n    \n    // Central hub\n    translate([0, 0, 0]) {\n        cylinder(h=6, r=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat and backrest assembly\n    seat_base();\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Base\n    base();\n}",
    "renders": true
  },
  {
    "office_supply": "ivy",
    "openscad_code": "// Ivy plant pot with realistic trellis support - office furniture item\n// Overall dimensions: 80mm diameter, 150mm height\n\n// Parameters\npot_d = 60;           // pot outer diameter\npot_h = 40;           // pot height\nwall_t = 2;           // wall thickness\ntrellis_w = 70;       // trellis width\ntrellis_h = 110;      // trellis height\nleg_h = 10;           // pot leg height\nleaf_l = 8;           // leaf length\nleaf_w = 4;           // leaf width\n\n// Main pot with drainage base\nmodule pot() {\n    difference() {\n        // Main pot body\n        cylinder(h = pot_h, d = pot_d, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, wall_t])\n            cylinder(h = pot_h, d = pot_d - 2*wall_t, $fn = 64);\n        \n        // Drainage holes\n        for (i = [-1:1]) {\n            translate([i * 15, 0, pot_h - 2])\n                cylinder(h = 3, d = 4, $fn = 16);\n        }\n    }\n    \n    // Pot legs\n    for (angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([pot_d/2 - 5, 0, -leg_h])\n                cube([10, 10, leg_h]);\n    }\n}\n\n// Trellis support structure\nmodule trellis() {\n    // Base frame\n    difference() {\n        cube([trellis_w, wall_t, trellis_h]);\n        translate([wall_t, -1, wall_t])\n            cube([trellis_w - 2*wall_t, wall_t + 2, trellis_h - 2*wall_t]);\n    }\n    \n    // Vertical supports\n    for (x = [-trellis_w/2 + 10, 0, trellis_w/2 - 10]) {\n        translate([x, 0, 0])\n            cube([wall_t, wall_t, trellis_h]);\n    }\n    \n    // Horizontal cross bars\n    for (y = [20:20:trellis_h-20]) {\n        translate([-trellis_w/2, 0, y])\n            cube([trellis_w, wall_t, wall_t]);\n    }\n}\n\n// Ivy leaf cluster\nmodule leaf_cluster(base_x, base_y, base_z, count) {\n    for (i = [0:count-1]) {\n        angle = i * 120 / count;\n        height = i * 5;\n        \n        translate([base_x + sin(angle) * 8, \n                  base_y + cos(angle) * 8, \n                  base_z + height]) {\n            rotate([0, 0, angle])\n                scale([1, 0.6, 1])\n                    difference() {\n                        sphere(d = leaf_l, $fn = 16);\n                        translate([leaf_l/2, 0, 0])\n                            cube([leaf_l, leaf_w, leaf_w]);\n                    }\n        }\n    }\n}\n\n// Vine stems\nmodule vine_stem(start_x, start_y, start_z, segments) {\n    for (i = [0:segments-1]) {\n        angle = i * 30;\n        height = i * 8;\n        \n        translate([start_x + sin(angle) * i * 3, \n                  start_y + cos(angle) * i * 2, \n                  start_z + height]) {\n            rotate([0, 0, angle])\n                cylinder(h = 10, d1 = 2, d2 = 1.5, $fn = 8);\n            \n            // Add leaves along stem\n            if (i % 2 == 0)\n                leaf_cluster(start_x + sin(angle) * i * 3, \n                           start_y + cos(angle) * i * 2, \n                           start_z + height + 5, 3);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, leg_h]) {\n    pot();\n    \n    translate([0, -pot_d/2 - wall_t, pot_h - trellis_h + 20])\n        trellis();\n    \n    // Main vine growing up trellis\n    vine_stem(-5, -pot_d/2 - wall_t/2, pot_h, 8);\n    vine_stem(5, -pot_d/2 - wall_t/2, pot_h + 5, 6);\n    vine_stem(0, -pot_d/2 - wall_t/2, pot_h + 10, 7);\n}",
    "renders": true
  },
  {
    "office_supply": "thorne",
    "openscad_code": "$fa = 2;\n$fs = 1;\n\n// Thorne ergonomic office chair - realistic medium detail\n// Overall chair height: 100 mm, suitable for 3D printing\n\nmodule backrest() {\n    // Main backrest panel with lumbar curve\n    difference() {\n        union() {\n            // Curved backrest\n            translate([-25, -5, 30]) rotate([10, 0, 0]) \n                cube([50, 8, 50]);\n            // Lumbar support curve\n            translate([-25, -8, 45]) rotate([15, 0, 0])\n                cube([50, 5, 15]);\n        }\n        // Ventilation holes pattern\n        for (x = [-15, -5, 5, 15])\n            for (z = [40, 50, 60, 70])\n                translate([x, -5, z]) cylinder(h=12, r=3);\n    }\n}\n\nmodule seat() {\n    // Ergonomic seat cushion with waterfall edge\n    difference() {\n        union() {\n            // Main seat\n            translate([-28, -28, 25]) cube([56, 56, 6]);\n            // Front waterfall edge\n            translate([-28, 28, 25]) rotate([0, -15, 0])\n                cube([56, 10, 6]);\n        }\n        // Screw holes for mounting\n        translate([-20, -20, 25]) cylinder(h=8, r=2);\n        translate([20, -20, 25]) cylinder(h=8, r=2);\n    }\n}\n\nmodule armrest(side) {\n    // Adjustable armrest with soft pad\n    translate([side * 30, 0, 38]) {\n        // Support post\n        cylinder(h=12, r=2.5);\n        // Arm pad\n        translate([0, 15, 5]) rotate([0, 20, 0])\n            cube([8, 30, 3]);\n    }\n}\n\nmodule base() {\n    // 5-star base with casters\n    union() {\n        // Central post\n        cylinder(h=25, r=6);\n        \n        // 5 legs with casters\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                // Leg\n                translate([0, 0, 0]) rotate([0, 90, 0])\n                    cylinder(h=25, r=2.5);\n                // Caster wheel\n                translate([25, 0, 0]) sphere(r=4);\n            }\n        }\n        \n        // Height adjustment cylinder\n        cylinder(h=25, r=4);\n    }\n}\n\nmodule gas_lift() {\n    // Pneumatic cylinder\n    difference() {\n        cylinder(h=20, r=3);\n        // Inner piston visible\n        translate([0, 0, 15]) cylinder(h=7, r=2);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0]) base();\n    \n    // Gas lift\n    translate([0, 0, 25]) gas_lift();\n    \n    // Seat mechanism\n    translate([0, 0, 45]) {\n        // Tilt mechanism housing\n        cube([15, 15, 8], center=true);\n        \n        // Seat\n        seat();\n    }\n    \n    // Backrest support\n    translate([0, -28, 53]) {\n        // Support bracket\n        cube([8, 3, 20], center=true);\n        \n        // Adjustment lever\n        translate([0, -2, 8]) rotate([0, -30, 0])\n            cube([3, 15, 2]);\n    }\n    \n    // Backrest\n    translate([0, -33, 75]) backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "quinn",
    "openscad_code": "// Quinn Office Chair - Realistic Style\n// Medium complexity 3D printable office chair model\n\n// Chair parameters\nseat_width = 40;\nseat_depth = 38;\nseat_thickness = 3;\nback_height = 45;\nleg_height = 35;\narmrest_height = 18;\nwheel_radius = 5;\n\n// Central support column\nmodule central_support() {\n    // Main gas cylinder\n    cylinder(h=leg_height, r1=4, r2=3, $fn=32);\n    \n    // Cylinder base\n    translate([0, 0, -1])\n        cylinder(h=2, r=5, $fn=32);\n    \n    // Height adjustment lever\n    translate([4, 0, leg_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=10, r=1, $fn=16);\n}\n\n// 5-star wheel base\nmodule wheel_base() {\n    difference() {\n        // Central hub\n        cylinder(h=5, r=8, $fn=32);\n        \n        // Cable routing hole\n        translate([0, 0, -1])\n            cylinder(h=7, r=2, $fn=16);\n    }\n    \n    // 5 wheel arms\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([8, 0, 2.5])\n            rotate([90, 0, 0])\n            cylinder(h=20, r=2, $fn=16);\n    }\n    \n    // Wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([28, 0, wheel_radius])\n            rotate([90, 0, 0])\n            cylinder(h=4, r=wheel_radius, $fn=16);\n    }\n}\n\n// Padded seat\nmodule seat() {\n    // Main seat cushion\n    difference() {\n        translate([0, 0, seat_thickness/2])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Contour rounding\n        translate([0, 0, -seat_thickness/2 - 0.1])\n            cube([seat_width - 4, seat_depth - 4, seat_thickness + 0.2], center=true);\n    }\n    \n    // Seat pan structure\n    translate([0, 0, -seat_thickness/2 - 2])\n        cube([seat_width - 6, seat_depth - 6, 2], center=true);\n}\n\n// Ergonomic backrest\nmodule backrest() {\n    // Backrest frame\n    translate([0, -seat_depth/2 - 5, back_height/2 + seat_thickness])\n        cube([seat_width - 8, 10, back_height], center=true);\n    \n    // Lumbar support curve\n    difference() {\n        translate([0, -seat_depth/2 - 5, back_height/3 + seat_thickness])\n            cube([seat_width - 10, 8, back_height * 0.6], center=true);\n        \n        // Lumbar curve\n        translate([0, -seat_depth/2 - 1, back_height/3 + seat_thickness])\n            cube([seat_width - 12, 10, back_height * 0.5], center=true);\n    }\n    \n    // Headrest\n    translate([0, -seat_depth/2 - 3, back_height + seat_thickness + 8])\n        cube([seat_width - 15, 6, 10], center=true);\n}\n\n// Adjustable armrests\nmodule armrest(side) {\n    // Support post\n    translate([side * (seat_width/2 - 5), 0, seat_thickness + armrest_height/2])\n        cylinder(h=armrest_height, r=2, $fn=16);\n    \n    // Armrest pad\n    translate([side * (seat_width/2 - 5), seat_depth/4, seat_thickness + armrest_height + 1])\n        cube([20, 6, 2], center=true);\n}\n\n// Assembly\nunion() {\n    // Wheel base at bottom\n    translate([0, 0, 0])\n        wheel_base();\n    \n    // Central support\n    translate([0, 0, 5])\n        central_support();\n    \n    // Seat assembly\n    translate([0, 0, leg_height + 5])\n        seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "lex",
    "openscad_code": "// Lex Office Chair - Medium complexity realistic style\n// Overall size: ~120mm height, suitable for 3D printing\n\n// Chair parameters\nseat_width = 50;\nseat_depth = 45;\nseat_thickness = 4;\nback_height = 65;\nback_width = 48;\narmrest_height = 20;\nleg_height = 45;\nleg_diameter = 8;\ncaster_diameter = 12;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height + seat_thickness/2])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Hollow center\n        translate([0, 0, leg_height + seat_thickness/2 + 1])\n            cube([seat_width - wall*2, seat_depth - wall*2, seat_thickness + 2], center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2 + 5, leg_height + seat_thickness + back_height/2])\n            cube([back_width, 8, back_height], center=true);\n        \n        // Hollow back\n        translate([0, -seat_depth/2 + 5, leg_height + seat_thickness + back_height/2])\n            cube([back_width - wall*2, 10, back_height - wall*2], center=true);\n    }\n    \n    // Lumbar support curve\n    for(i = [-1, 1]) {\n        translate([i * 15, -seat_depth/2 + 5, leg_height + seat_thickness + 25])\n            rotate([90, 0, 0])\n            cylinder(h=20, r1=6, r2=3, center=true);\n    }\n}\n\n// Armrest assembly\nmodule armrest(side) {\n    translate([side * (seat_width/2 - 5), 0, leg_height + seat_thickness + armrest_height/2]) {\n        // Vertical support\n        difference() {\n            cube([wall*2, 15, armrest_height], center=true);\n            translate([0, 0, -wall])\n                cube([wall, 17, armrest_height - wall], center=true);\n        }\n        \n        // Horizontal arm pad\n        translate([side * 8, 5, armrest_height/2 - 2])\n            cube([20, 10, 4], center=true);\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=leg_height, d=leg_diameter, center=false);\n        // Inner hollow\n        cylinder(h=leg_height, d=leg_diameter - wall*2, center=false);\n    }\n}\n\n// 5-star base with casters\nmodule base() {\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n        translate([leg_diameter/2 + 20, 0, 0]) {\n            // Star arm\n            cube([40, wall*2, wall*2], center=true);\n            \n            // Caster wheel\n            translate([20, 0, -caster_diameter/2])\n                rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=caster_diameter, d=caster_diameter, center=true);\n                    sphere(d=caster_diameter - wall);\n                }\n        }\n    }\n    \n    // Center hub\n    cylinder(h=wall*2, d=leg_diameter + wall*2, center=false);\n}\n\n// Assembly\nunion() {\n    seat_cushion();\n    backrest();\n    armrest(1);\n    armrest(-1);\n    \n    translate([0, 0, leg_height/2])\n        gas_lift();\n    \n    translate([0, 0, 0])\n        base();\n}",
    "renders": true
  },
  {
    "office_supply": "sora",
    "openscad_code": "// Sora Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm height, ~90mm width, ~100mm depth\n\n// Main chair module\nmodule sora_chair() {\n    // Chair base\n    union() {\n        // Central support pole\n        translate([0, 0, 15]) \n            cylinder(h=35, d=8, $fn=20);\n        \n        // 5-star base with casters\n        base_assembly();\n        \n        // Seat assembly\n        seat_assembly();\n        \n        // Backrest assembly\n        backrest_assembly();\n        \n        // Armrests\n        armrests_assembly();\n    }\n}\n\n// 5-star base with casters\nmodule base_assembly() {\n    // Central hub\n    translate([0, 0, 0])\n        cylinder(h=15, d=20, $fn=30);\n    \n    // 5 star legs\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n            translate([15, 0, 0])\n                cube([30, 8, 15], center=true);\n        \n        // Caster wheels\n        rotate([0, 0, i*72])\n            translate([30, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=6, $fn=12);\n    }\n}\n\n// Seat assembly with cushion and mechanism\nmodule seat_assembly() {\n    // Seat cushion\n    translate([0, 0, 50])\n        difference() {\n            // Main cushion\n            cube([80, 80, 12], center=true);\n            \n            // Rounded edges\n            translate([0, 0, -6])\n                cube([76, 76, 12], center=true);\n        }\n    \n    // Seat mechanism plate\n    translate([0, 0, 38])\n        cube([70, 70, 4], center=true);\n    \n    // Adjustment lever\n    translate([35, 0, 38])\n        rotate([0, 90, 0])\n            cylinder(h=20, d=3, $fn=8);\n}\n\n// Backrest assembly with lumbar support\nmodule backrest_assembly() {\n    // Backrest post\n    translate([0, -30, 85])\n        cube([8, 60, 35], center=true);\n    \n    // Backrest frame\n    translate([0, -35, 100])\n        difference() {\n            // Outer frame\n            cube([70, 8, 50], center=true);\n            \n            // Inner cutout\n            cube([64, 12, 44], center=true);\n        }\n    \n    // Backrest mesh\n    translate([0, -31, 100])\n        for(x = [-30:15:30]) {\n            for(y = [80:8:120]) {\n                translate([x, 0, y])\n                    cube([2, 2, 6], center=true);\n            }\n        }\n}\n\n// Armrests assembly\nmodule armrests_assembly() {\n    // Left armrest\n    armrest(-35);\n    \n    // Right armrest\n    armrest(35);\n}\n\nmodule armrest(side) {\n    // Armrest support\n    translate([side, 25, 65])\n        cube([6, 30, 25], center=true);\n    \n    // Armrest pad\n    translate([side, 40, 77])\n        difference() {\n            // Main pad\n            cube([20, 6, 30], center=true);\n            \n            // Rounded top\n            translate([0, 0, 15])\n                sphere(d=20, $fn=20);\n        }\n}\n\n// Render the chair\nsora_chair();",
    "renders": true
  },
  {
    "office_supply": "korr",
    "openscad_code": "// Korr Office Chair - Realistic Medium Complexity\n// Overall size: ~120mm height, 80mm width, 80mm depth\n// Wall thickness: 2mm throughout for 3D printing\n\n// Chair parameters\nchair_height = 120;\nseat_height = 65;\nbackrest_height = 55;\nseat_width = 80;\nseat_depth = 75;\nbackrest_width = 75;\nleg_diameter = 8;\narmrest_height = 20;\ncaster_radius = 6;\n\n// Gas lift cylinder\nmodule gas_lift() {\n    // Outer cylinder\n    cylinder(h=chair_height-seat_height-caster_radius*2, r=5, $fn=32);\n    // Inner piston\n    translate([0,0,-5]) cylinder(h=10, r=3, $fn=32);\n}\n\n// 5-star base with casters\nmodule base() {\n    // Central hub\n    cylinder(h=10, r=15, $fn=32);\n    \n    // 5 spokes\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) {\n            translate([0,0,5]) {\n                // Spoke\n                cube([3, 30, 8], center=true);\n                // Caster at end\n                translate([0,30,0]) sphere(r=caster_radius, $fn=16);\n            }\n        }\n    }\n}\n\n// Seat cushion with rounded edges\nmodule seat() {\n    // Main seat block\n    translate([0,0,seat_height/2]) {\n        difference() {\n            minkowski() {\n                cube([seat_width-4, seat_depth-4, 10], center=true);\n                sphere(r=4, $fn=16);\n            }\n            // Remove bottom rounding\n            translate([0,0,-6]) cube([seat_width, seat_depth, 12], center=true);\n        }\n    }\n    \n    // Seat support plate\n    translate([0,0,seat_height-5]) \n        cylinder(h=10, r=12, $fn=32);\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    translate([0,-seat_depth/2+5,seat_height+backrest_height/2]) {\n        // Main backrest\n        difference() {\n            minkowski() {\n                cube([backrest_width-6, 8, backrest_height-6], center=true);\n                sphere(r=3, $fn=16);\n            }\n            // Remove front rounding\n            translate([0,5,0]) cube([backrest_width, 10, backrest_height], center=true);\n        }\n        \n        // Lumbar support curve\n        translate([0,-2,seat_height+backrest_height/2-15]) {\n            scale([1,0.3,1]) \n                sphere(r=20, $fn=32);\n        }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2+5,0,seat_height+armrest_height/2]) {\n        difference() {\n            union() {\n                // Vertical support\n                cube([4, 4, armrest_height], center=true);\n                // Horizontal rest\n                translate([0,10,armrest_height/2-2])\n                    cube([4, 25, 4], center=true);\n            }\n            // Rounding\n            translate([0,0,armrest_height/2-2])\n                sphere(r=2, $fn=16);\n        }\n    }\n    \n    // Right armrest (mirrored)\n    mirror([1,0,0]) \n        translate([-seat_width/2+5,0,seat_height+armrest_height/2]) {\n            difference() {\n                union() {\n                    cube([4, 4, armrest_height], center=true);\n                    translate([0,10,armrest_height/2-2])\n                        cube([4, 25, 4], center=true);\n                }\n                translate([0,0,armrest_height/2-2])\n                    sphere(r=2, $fn=16);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    // Base and gas lift\n    translate([0,0,caster_radius]) \n        base();\n    translate([0,0,caster_radius+10]) \n        gas_lift();\n    \n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "briar",
    "openscad_code": "// Briar Office Chair - Realistic Style, Medium Complexity\n\n// Chair Parameters\nchair_width = 50;\nchair_depth = 50;\nchair_height = 100;\nseat_height = 45;\nback_height = 55;\nleg_thickness = 4;\nback_support_width = 2;\narmrest_height = 15;\n\n// Main seat module\nmodule seat() {\n    // Seat cushion\n    translate([0, 0, seat_height]) {\n        difference() {\n            // Main cushion\n            cube([chair_width, chair_depth, 6], center = true);\n            // Rounded top edges\n            translate([0, 0, 3])\n                cube([chair_width - 2, chair_depth - 2, 2], center = true);\n        }\n    }\n}\n\n// Backrest module with briar wood pattern\nmodule backrest() {\n    translate([0, chair_depth/2 - 5, seat_height + back_height/2]) {\n        union() {\n            // Main back panel\n            difference() {\n                cube([chair_width - 10, 4, back_height], center = true);\n                // Briar pattern holes (decorative)\n                for(i = [-3:3]) {\n                    for(j = [-2:2]) {\n                        translate([i * 6, 0, j * 8])\n                            cylinder(h = 5, r = 2, center = true);\n                    }\n                }\n            }\n            // Back support posts\n            translate([-chair_width/2 + 5, 0, 0])\n                cube([back_support_width, 4, back_height], center = true);\n            translate([chair_width/2 - 5, 0, 0])\n                cube([back_support_width, 4, back_height], center = true);\n        }\n    }\n}\n\n// Chair legs module\nmodule legs() {\n    // Front legs\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * chair_width/2 - x * leg_thickness/2, \n                      y * chair_depth/2 - y * leg_thickness/2, \n                      seat_height/2]) {\n                cube([leg_thickness, leg_thickness, seat_height], center = true);\n            }\n        }\n    }\n    \n    // Back support bar\n    translate([0, chair_depth/2 - leg_thickness/2, seat_height/2 - 10])\n        cube([chair_width - 10, leg_thickness, 20], center = true);\n}\n\n// Armrests module\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - 2), 0, seat_height + armrest_height/2]) {\n            union() {\n                // Vertical support\n                translate([0, chair_depth/4, -armrest_height/2])\n                    cube([3, 3, armrest_height], center = true);\n                \n                // Horizontal armrest\n                translate([0, 0, armrest_height/2])\n                    cube([3, chair_depth/2, 3], center = true);\n            }\n        }\n    }\n}\n\n// Casters module (5 wheels)\nmodule casters() {\n    for(i = [0:4]) {\n        angle = i * 72;\n        radius = 25;\n        \n        // Wheel arm\n        translate([cos(angle) * radius, sin(angle) * radius, 2])\n            rotate([90, 0, angle])\n                cylinder(h = 10, r = 2, center = true);\n        \n        // Wheel\n        translate([cos(angle) * radius, sin(angle) * radius, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 3, r1 = 3, r2 = 2, center = true);\n    }\n    \n    // Center post\n    translate([0, 0, 8])\n        cylinder(h = 10, r = 5, center = true);\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    legs();\n    armrests();\n    casters();\n}",
    "renders": true
  },
  {
    "office_supply": "zane",
    "openscad_code": "// Zane Office Task Chair - Medium complexity realistic style\n// Overall dimensions: 120mm H x 80mm W x 80mm D\n\n// Main seating module\nmodule seat() {\n    // Seat cushion - 2mm thick walls\n    difference() {\n        // Main seat shape\n        translate([0, 0, 45])\n            cube([70, 70, 10], center=true);\n        \n        // Cushion detail indentation\n        translate([0, 0, 51])\n            cube([60, 60, 2], center=true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    // Main backrest panel\n    difference() {\n        translate([0, -30, 80])\n            cube([65, 5, 60], center=true);\n        \n        // Lumbar support curve\n        translate([0, -27, 80])\n            scale([0.9, 1, 0.8])\n                sphere(d=50, $fn=30);\n    }\n    \n    // Backrest posts (2mm thick)\n    for(side = [-1, 1]) {\n        translate([side * 25, -25, 50])\n            cylinder(h=35, d=6, $fn=20);\n    }\n}\n\n// Base and gas cylinder module\nmodule base() {\n    // Gas cylinder\n    translate([0, 0, 25])\n        cylinder(h=20, d=8, $fn=20);\n    \n    // 5-star base\n    for(angle = [0:72:359]) {\n        rotate([0, 0, angle])\n            translate([0, 30, 0])\n                cylinder(h=5, d1=8, d2=5);\n    }\n    \n    // Central hub\n    translate([0, 0, 2.5])\n        cylinder(h=5, d=15, $fn=30);\n}\n\n// Armrest module\nmodule armrest(side) {\n    // Vertical support\n    translate([side * 35, 0, 55])\n        cylinder(h=20, d=6, $fn=20);\n    \n    // Horizontal armrest pad\n    translate([side * 35, 10, 65])\n        cube([6, 25, 4], center=true);\n}\n\n// Wheel casters\nmodule caster(angle) {\n    rotate([0, 0, angle])\n        translate([0, 35, 0])\n            rotate([90, 0, 0])\n                cylinder(h=4, d=8, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Base assembly\n    base();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // 5 casters\n    for(angle = [0:72:359]) {\n        caster(angle);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "lyric",
    "openscad_code": "// Lyric Office Chair - Realistic style, medium complexity\n// Overall dimensions: 120mm(H) x 80mm(W) x 100mm(D)\n\n// Base cylinder for stability\nmodule base() {\n    cylinder(h=15, r=35, $fn=40); // 30mm diameter base\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    translate([0,0,15]) {\n        difference() {\n            cylinder(h=40, r=5, $fn=20); // Outer cylinder\n            cylinder(h=40, r=3, $fn=20); // Inner hollow\n        }\n    }\n}\n\n// Seat frame structure\nmodule seat_frame() {\n    translate([0,0,55]) {\n        // Main seat platform\n        difference() {\n            cube([80, 80, 8], center=true); // Seat base\n            translate([0,0,-1]) cube([76, 76, 10], center=true); // Hollow out\n        }\n        \n        // Front edge rounding\n        translate([0,38,4]) \n            rotate([90,0,0]) cylinder(h=80, r=4, $fn=20);\n        \n        // Back edge rounding\n        translate([0,-38,4]) \n            rotate([90,0,0]) cylinder(h=80, r=4, $fn=20);\n    }\n}\n\n// Backrest frame\nmodule backrest() {\n    translate([0,-35,95]) {\n        rotate([10,0,0]) {\n            // Main backrest panel\n            difference() {\n                cube([70, 10, 60], center=true); // Backrest\n                translate([0,0,-1]) cube([66, 14, 58], center=true); // Hollow\n            }\n            \n            // Top edge rounding\n            translate([0,5,30]) \n                rotate([0,90,0]) cylinder(h=70, r=5, $fn=20);\n            \n            // Support struts\n            for(i=[-25,0,25]) {\n                translate([i,0,15]) cube([4, 10, 30], center=true);\n            }\n        }\n    }\n}\n\n// Armrest supports\nmodule armrest() {\n    // Left armrest\n    translate([-40,0,65]) {\n        // Vertical support\n        cube([6, 6, 25], center=true);\n        // Horizontal armrest pad\n        translate([0,15,12]) cube([6, 30, 4], center=true);\n    }\n    \n    // Right armrest\n    translate([40,0,65]) {\n        cube([6, 6, 25], center=true);\n        translate([0,15,12]) cube([6, 30, 4], center=true);\n    }\n}\n\n// Lumbar support detail\nmodule lumbar_support() {\n    translate([0,-30,75]) {\n        rotate([10,0,0]) {\n            difference() {\n                cube([50, 8, 25], center=true); // Lumbar pad\n                translate([0,0,-1]) cube([46, 12, 23], center=true); // Curve\n            }\n            \n            // Ventilation holes\n            for(i=[-20,-10,0,10,20]) {\n                translate([i,0,5]) cylinder(h=10, r=3, $fn=16);\n            }\n        }\n    }\n}\n\n// Wheel base (5-star base)\nmodule wheel_base() {\n    translate([0,0,0]) {\n        // Center hub\n        cylinder(h=10, r=15, $fn=20);\n        \n        // 5 spokes\n        for(i=[0:72:360]) {\n            rotate([0,0,i]) {\n                translate([20,0,5]) cube([40, 8, 4], center=true);\n                // Wheel at end of spoke\n                translate([40,0,2]) rotate([90,0,0]) cylinder(h=8, r=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    wheel_base();\n    gas_lift();\n    base();\n    seat_frame();\n    backrest();\n    armrest();\n    lumbar_support();\n}",
    "renders": true
  },
  {
    "office_supply": "drake",
    "openscad_code": "// Realistic Drake Office Chair - Medium Complexity\n// 3D printable office chair with ergonomic features\n// Overall dimensions: 120mm(H) x 100mm(W) x 100mm(D)\n\n$fn = 32;\n\n// Main assembly\nmodule drake_chair() {\n    union() {\n        // Seat assembly\n        translate([0, 0, 50]) seat_assembly();\n        \n        // Backrest assembly\n        translate([0, -30, 80]) backrest_assembly();\n        \n        // Base assembly\n        translate([0, 0, 0]) base_assembly();\n        \n        // Armrests\n        translate([35, 0, 65]) armrest_assembly();\n        translate([-35, 0, 65]) mirror([1, 0, 0]) armrest_assembly();\n    }\n}\n\n// Seat cushion with ergonomic contour\nmodule seat_assembly() {\n    difference() {\n        // Main seat cushion\n        translate([0, 0, 5]) \n            scale([45, 40, 10])\n            sphere(r = 1);\n        \n        // Bottom cavity for mounting\n        translate([0, 0, 0])\n            cube([30, 30, 10], center = true);\n    }\n    \n    // Seat mounting plate\n    translate([0, 0, 0])\n        cube([35, 35, 3], center = true);\n}\n\n// Backrest with lumbar support\nmodule backrest_assembly() {\n    union() {\n        // Main backrest panel\n        translate([0, 0, 20])\n            scale([40, 8, 45])\n            sphere(r = 1);\n        \n        // Lumbar support curve\n        translate([0, 4, 15])\n            scale([35, 3, 25])\n            sphere(r = 1);\n        \n        // Headrest\n        translate([0, -5, 45])\n            scale([25, 6, 15])\n            sphere(r = 1);\n    }\n}\n\n// 5-star base with casters\nmodule base_assembly() {\n    union() {\n        // Central pneumatic cylinder\n        cylinder(h = 50, r = 5);\n        \n        // Cylinder housing\n        translate([0, 0, 25])\n            cylinder(h = 10, r1 = 8, r2 = 6);\n        \n        // 5-star base legs\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                // Leg\n                translate([30, 0, 0])\n                    scale([30, 8, 3])\n                    cube(center = true);\n                \n                // Caster wheel\n                translate([55, 0, -3])\n                    cylinder(h = 6, r = 4);\n            }\n        }\n    }\n}\n\n// Adjustable armrest assembly\nmodule armrest_assembly() {\n    union() {\n        // Vertical support post\n        translate([0, 0, -5])\n            cylinder(h = 15, r = 3);\n        \n        // Horizontal arm pad\n        translate([0, 5, 5])\n            scale([20, 5, 3])\n            cube(center = true);\n        \n        // Arm pad cushion\n        translate([0, 5, 7])\n            scale([18, 4, 2])\n            sphere(r = 1);\n    }\n}\n\n// Generate the complete chair\ndrake_chair();",
    "renders": true
  },
  {
    "office_supply": "tara",
    "openscad_code": "// Tara Chair - Medium complexity realistic office furniture\n// Overall dimensions: 80mm W x 85mm D x 110mm H\n\n$fn = 32;\n\n// Main assembly\nmodule tara_chair() {\n    union() {\n        // Seat base\n        seat_base();\n        \n        // Backrest\n        backrest();\n        \n        // Leg assembly\n        leg_assembly();\n        \n        // Armrests\n        armrests();\n    }\n}\n\n// Seat base with cushioning effect\nmodule seat_base() {\n    // Main seat platform\n    translate([0, 0, 45]) {\n        difference() {\n            // Outer shell\n            cube([70, 75, 8], center = true);\n            \n            // Hollow center for weight reduction\n            cube([66, 71, 4], center = true);\n        }\n        \n        // Cushion top layer\n        translate([0, 0, 6]) {\n            difference() {\n                // Padded top\n                cube([68, 73, 6], center = true);\n                \n                // Cushion edge rounding\n                for (x = [-32, 32]) {\n                    translate([x, 0, 0]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h = 69, d = 6, center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Curved backrest with lumbar support\nmodule backrest() {\n    // Backrest frame\n    translate([0, -32, 85]) {\n        rotate([10, 0, 0]) {\n            // Main backrest panel\n            difference() {\n                cube([65, 8, 60], center = true);\n                cube([61, 12, 56], center = true);\n            }\n            \n            // Lumbar support curve\n            translate([0, 0, -10]) {\n                scale([1, 1, 0.8]) {\n                    sphere(d = 50);\n                }\n            }\n        }\n    }\n    \n    // Backrest posts\n    for (x = [-28, 28]) {\n        translate([x, -32, 75]) {\n            cylinder(h = 30, d = 6);\n        }\n    }\n}\n\n// Leg assembly with cross-bracing\nmodule leg_assembly() {\n    // Front legs\n    for (x = [-28, 28]) {\n        translate([x, 28, 22.5]) {\n            leg();\n        }\n    }\n    \n    // Rear legs\n    for (x = [-28, 28]) {\n        translate([x, -28, 22.5]) {\n            leg();\n        }\n    }\n    \n    // Cross-bracing\n    // Front-back braces\n    for (y = [-28, 28]) {\n        translate([0, y, 15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 56, d = 4);\n            }\n        }\n    }\n    \n    // Side braces\n    for (x = [-28, 28]) {\n        translate([x, 0, 15]) {\n            rotate([0, 90, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 56, d = 4);\n                }\n            }\n        }\n    }\n}\n\n// Individual leg\nmodule leg() {\n    difference() {\n        // Main leg tube\n        cylinder(h = 45, d = 8);\n        \n        // Hollow center\n        cylinder(h = 45, d = 4);\n    }\n    \n    // Foot pad\n    translate([0, 0, -0.5]) {\n        cylinder(h = 2, d = 12);\n    }\n}\n\n// Ergonomic armrests\nmodule armrests() {\n    for (side = [-1, 1]) {\n        translate([side * 40, 0, 65]) {\n            rotate([0, 0, side * 5]) {\n                // Armrest support\n                translate([0, 0, -15]) {\n                    cylinder(h = 15, d = 6);\n                }\n                \n                // Armrest pad\n                translate([0, 0, 0]) {\n                    difference() {\n                        cube([25, 12, 4], center = true);\n                        cube([21, 8, 8], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the chair\ntara_chair();",
    "renders": true
  },
  {
    "office_supply": "kyro",
    "openscad_code": "// Kyro height-adjustable office stool\n// Realistic style, medium complexity\n\n// Global parameters\n$fn = 32;\nseat_d = 50;      // seat diameter (mm)\npost_d = 8;       // gas-lift post diameter (mm)\nbase_d = 40;      // base diameter (mm)\nmin_h = 70;       // minimum seat height (mm)\nmax_h = 100;      // maximum seat height (mm)\nwall = 2;         // wall thickness (mm)\n\n// Seat cushion\nmodule seat() {\n    difference() {\n        // Cushion body\n        cylinder(h = 8, d = seat_d, center = true);\n        // Cushion contour\n        translate([0,0,4])\n            cylinder(h = 1, d = seat_d - wall, center = true);\n    }\n    // Ergonomic contour (slight dish)\n    translate([0,0,4])\n        sphere(d = seat_d * 1.2);\n}\n\n// Height-adjustment post (gas-lift)\nmodule post() {\n    // Outer tube\n    cylinder(h = max_h - min_h, d = post_d + wall);\n    // Inner rod\n    translate([0,0, -min_h/2])\n        cylinder(h = min_h + max_h, d = post_d - wall);\n}\n\n// 5-star base with casters\nmodule base() {\n    // Central hub\n    cylinder(h = 10, d = post_d + wall*2);\n    \n    // 5 spokes with simple caster feet\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n        translate([0, base_d/2 - 5, 5])\n            difference() {\n                cube([wall*2, base_d/2 - 5, 5], center = true);\n                // Caster wheel cavity\n                translate([0, 0, -2.5])\n                    sphere(d = 8);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat on top\n    translate([0,0, max_h + 4])\n        seat();\n    \n    // Post assembly\n    translate([0,0, max_h/2])\n        post();\n    \n    // Base at bottom\n    translate([0,0,0])\n        base();\n}",
    "renders": true
  },
  {
    "office_supply": "suri",
    "openscad_code": "// SURI (Sit-Stand Rounded Island) office stool with a single central column and round foot ring\n// Target height: ~70 mm, base diameter: ~60 mm, seat diameter: ~50 mm\n// All walls ≥ 2 mm for 3D printing\n\n$fn = 36;               // smooth curves\n\n// Seat: ergonomic round cushion with slight dome\nmodule seat(d = 50, h = 8) {\n    difference() {\n        cylinder(d = d, h = h, center = false);\n        translate([0, 0, 2]) cylinder(d = d - 4, h = h, center = false);\n    }\n    translate([0, 0, h]) cylinder(d1 = d, d2 = d - 6, h = 4);  // dome\n}\n\n// Central gas-lift column (simplified fixed tube)\nmodule column(h = 48, od = 10, wall = 2) {\n    difference() {\n        cylinder(d = od, h = h, center = false);\n        translate([0, 0, wall]) cylinder(d = od - 2*wall, h = h - wall, center = false);\n    }\n}\n\n// Round foot ring for resting feet\nmodule footRing(od = 40, h = 4, wall = 2) {\n    difference() {\n        cylinder(d = od, h = h, center = false);\n        translate([0, 0, wall]) cylinder(d = od - 2*wall, h = h, center = false);\n    }\n}\n\n// Five-star base with casters\nmodule base(d = 60, h = 6) {\n    difference() {\n        cylinder(d = d, h = h, center = false);\n        translate([0, 0, 2]) cylinder(d = d - 4, h = h, center = false);\n    }\n    \n    // five spokes\n    for (a = [0:72:359]) {\n        rotate([0, 0, a])\n            translate([d/2 - 6, -3, h/2])\n                cube([12, 6, 2], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) base();\ntranslate([0, 0, 6]) column();\ntranslate([0, 0, 6 + 20]) footRing();\ntranslate([0, 0, 6 + 48]) seat();",
    "renders": true
  },
  {
    "office_supply": "voss",
    "openscad_code": "// Voss Office Chair - Realistic Medium Complexity\n// Overall dimensions: 120mm H x 70mm W x 70mm D\n\n// Main seat module\nmodule seat() {\n    difference() {\n        // Main seat cushion\n        translate([0, 0, 45])\n            scale([1, 1.2, 0.3])\n            cube([60, 50, 20], center=true);\n        \n        // Seat cushion contour\n        translate([0, 0, 55])\n            scale([0.9, 1.1, 0.2])\n            cube([60, 50, 20], center=true);\n    }\n}\n\n// Backrest module with Voss pattern\nmodule backrest() {\n    union() {\n        // Main backrest frame\n        translate([0, -25, 85])\n            cube([55, 5, 70], center=true);\n        \n        // Backrest cushion\n        translate([0, -22, 85])\n            scale([0.9, 1, 0.9])\n            cube([50, 8, 65], center=true);\n        \n        // Voss horizontal slats\n        for (i = [0:2]) {\n            translate([0, -20, 65 + i * 20])\n                cube([45, 3, 8], center=true);\n        }\n    }\n}\n\n// Armrest module\nmodule armrest(side) {\n    translate([side * 32, 0, 70]) {\n        union() {\n            // Vertical support\n            cylinder(h=25, r=3, center=true);\n            \n            // Horizontal arm pad\n            translate([0, 15, 10])\n                rotate([0, 30, 0])\n                cube([35, 8, 5], center=true);\n        }\n    }\n}\n\n// Base gas cylinder\nmodule gas_cylinder() {\n    cylinder(h=40, r1=6, r2=4, center=true);\n}\n\n// 5-star base\nmodule base() {\n    union() {\n        // Center hub\n        cylinder(h=8, r=12, center=true);\n        \n        // 5 legs with wheels\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 20, 0]) {\n                // Leg\n                cube([30, 8, 6], center=true);\n                \n                // Wheel\n                translate([25, 0, -7])\n                    sphere(r=4);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat assembly\n    color(\"gray\") seat();\n    \n    // Backrest assembly\n    color(\"darkblue\") backrest();\n    \n    // Armrests\n    color(\"black\") {\n        armrest(1);\n        armrest(-1);\n    }\n    \n    // Support column\n    color(\"silver\")\n    translate([0, 0, 25])\n        gas_cylinder();\n    \n    // Base\n    color(\"black\")\n    translate([0, 0, 4])\n        base();\n}",
    "renders": true
  },
  {
    "office_supply": "lumen",
    "openscad_code": "// Lumen Desk Lamp - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm base diameter, 320mm total height\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nbase_diameter = 120;\nbase_height = 15;\nstem_diameter = 25;\nstem_height = 200;\narm_length = 180;\narm_thickness = 12;\nshade_height = 80;\nshade_top_dia = 90;\nshade_bottom_dia = 120;\nhinge_diameter = 20;\nhinge_length = 30;\ncable_diameter = 6;\n\n// Base module with non-slip pads\nmodule base() {\n    union() {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_diameter);\n        \n        // Decorative ring groove\n        translate([0, 0, base_height - 2])\n            cylinder(h = 2, d1 = base_diameter - 20, d2 = base_diameter - 20);\n        \n        // Rubber feet (4 pieces)\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([base_diameter/2 - 10, 0, -1])\n                    cube([20, 8, 2], center = true);\n        }\n        \n        // Cable hole\n        rotate([90, 0, 0])\n            translate([base_diameter/2 - 10, 0, base_height/2])\n                cylinder(h = 20, d = cable_diameter + wall_thickness);\n    }\n}\n\n// Adjustable stem with cable channel\nmodule stem() {\n    difference() {\n        // Main stem\n        cylinder(h = stem_height, d = stem_diameter);\n        \n        // Internal cable channel\n        cylinder(h = stem_height, d = stem_diameter - 2*wall_thickness);\n        \n        // Hinge mounting hole at top\n        translate([0, 0, stem_height])\n            rotate([90, 0, 0])\n                cylinder(h = hinge_length, d = hinge_diameter);\n    }\n}\n\n// Articulated arm with cable management\nmodule arm() {\n    union() {\n        // Main arm tube\n        rotate([0, 90, 0])\n            cylinder(h = arm_length, d = arm_thickness);\n        \n        // Cable channel along arm\n        difference() {\n            rotate([0, 90, 0])\n                cylinder(h = arm_length, d = arm_thickness);\n            rotate([0, 90, 0])\n                cylinder(h = arm_length, d = arm_thickness - 2*wall_thickness);\n        }\n        \n        // Joint at stem connection\n        rotate([0, 90, 0])\n            translate([-hinge_length/2, 0, 0])\n                cylinder(h = hinge_length, d = hinge_diameter);\n    }\n}\n\n// Conical shade with ventilation and LED mount\nmodule shade() {\n    difference() {\n        // Main shade cone\n        cylinder(h = shade_height, d1 = shade_top_dia, d2 = shade_bottom_dia);\n        \n        // Inner cavity for LED\n        translate([0, 0, shade_height - 10])\n            cylinder(h = 10, d1 = shade_top_dia - 20, d2 = shade_bottom_dia - 20);\n        \n        // Ventilation slots\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([0, shade_bottom_dia/2 - 3, shade_height/2])\n                    cube([2, 6, shade_height - 10], center = true);\n        }\n        \n        // Arm mounting hole\n        rotate([0, 90, 0])\n            translate([arm_length - 15, 0, 0])\n                cylinder(h = 20, d = arm_thickness);\n    }\n}\n\n// Control knob with grip texture\nmodule control_knob() {\n    difference() {\n        // Main knob\n        cylinder(h = 15, d = 20);\n        \n        // Grip ridges\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([0, 10, 7.5])\n                    cube([15, 2, 15], center = true);\n        }\n        \n        // Indicator dot\n        translate([0, 8, 15])\n            sphere(d = 3);\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_height])\n    stem();\n    \ntranslate([0, 0, 0])\n    base();\n\ntranslate([0, 0, stem_height + hinge_length/2])\n    rotate([0, -30, 0])\n        arm();\n\ntranslate([arm_length - 15, 0, stem_height + hinge_length/2])\n    rotate([0, -30, 0])\n        shade();\n\n// Control knob on base\ntranslate([base_diameter/2 - 15, 0, base_height + 10])\n    control_knob();",
    "renders": true
  },
  {
    "office_supply": "jax",
    "openscad_code": "// Jax-style office desk organizer\n// Realistic style with medium complexity\n// Overall size: 120mm x 80mm x 110mm\n\n$fn = 32;\n\n// Main parameters\nbase_width = 120;\nbase_depth = 80;\nbase_height = 110;\nwall_thickness = 2;\npen_radius = 8;\n\n// Base module\nmodule base() {\n    // Main base platform\n    union() {\n        // Bottom platform\n        translate([0, 0, 0])\n            cube([base_width, base_depth, wall_thickness], center = true);\n        \n        // Side walls\n        translate([0, base_depth/2 - wall_thickness/2, base_height/2])\n            cube([base_width, wall_thickness, base_height], center = true);\n        translate([0, -base_depth/2 + wall_thickness/2, base_height/2])\n            cube([base_width, wall_thickness, base_height], center = true);\n        \n        // Back wall\n        translate([base_width/2 - wall_thickness/2, 0, base_height/2])\n            cube([wall_thickness, base_depth - wall_thickness*2, base_height], center = true);\n    }\n}\n\n// Pen holder section\nmodule pen_holder() {\n    // Main pen holder block\n    translate([-base_width/4, 0, wall_thickness])\n        difference() {\n            cube([base_width/2, base_depth/2, base_height/2], center = true);\n            \n            // Pen holes\n            for(i = [-1:1]) {\n                translate([i * 15, 0, base_height/4])\n                    rotate([0, 90, 0])\n                        cylinder(r = pen_radius, h = base_depth/2 + 2, center = true);\n            }\n        }\n}\n\n// Storage compartments\nmodule compartments() {\n    // Left compartment\n    translate([base_width/4, 0, wall_thickness])\n        difference() {\n            cube([base_width/2 - wall_thickness, base_depth - wall_thickness*2, base_height/3], center = true);\n            \n            // Dividers\n            for(i = [-0.5:0.5:0.5]) {\n                translate([i * (base_width/4 - wall_thickness), 0, -wall_thickness])\n                    cube([wall_thickness, base_depth - wall_thickness*4, base_height/3 + 2], center = true);\n            }\n        }\n    \n    // Right compartment - note section\n    translate([base_width/4, 0, base_height/3 + wall_thickness*2])\n        cube([base_width/2 - wall_thickness, base_depth/2, base_height/6], center = true);\n}\n\n// Card holder slot\nmodule card_slot() {\n    translate([base_width/2 - wall_thickness*3, 0, base_height*2/3])\n        difference() {\n            cube([wall_thickness*4, base_depth/3, base_height/3], center = true);\n            translate([0, 0, -wall_thickness])\n                cube([wall_thickness*4 + 2, base_depth/3 - wall_thickness*2, base_height/3 - wall_thickness], center = true);\n        }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    // Bottom ribs for structure\n    for(i = [-1:1]) {\n        translate([i * base_width/3, 0, wall_thickness/2])\n            cube([wall_thickness*2, base_depth - wall_thickness*2, wall_thickness], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    pen_holder();\n    compartments();\n    card_slot();\n    ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "fiera",
    "openscad_code": "// Fiera Desk Organizer - Office Furniture Item\n// Dimensions: 120mm x 80mm x 85mm (realistic desk organizer)\n\n// Basic dimensions\n$fn = 24;\nwall_thickness = 2;\n\n// Main body module\nmodule desk_organizer() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main compartment base\n            translate([0, 0, 40]) cube([120, 80, 40], center = true);\n            \n            // Front pen holder section\n            translate([-40, 0, 65]) cube([35, 76, 50], center = true);\n            \n            // Back tall section\n            translate([45, 0, 72.5]) cube([25, 76, 35], center = true);\n        }\n        \n        // Hollow out main compartment\n        translate([0, 0, 42]) cube([116, 76, 36], center = true);\n        \n        // Hollow out front pen holder\n        translate([-40, 0, 67.5]) cube([31, 72, 45], center = true);\n        \n        // Hollow out back section\n        translate([45, 0, 72.5]) cube([21, 72, 31], center = true);\n        \n        // Rounded interior corners\n        for (x = [-58, 58]) {\n            for (y = [-38, 38]) {\n                translate([x, y, 40]) cylinder(h = 40, r = 2, center = true);\n            }\n        }\n    }\n}\n\n// Base support feet\nmodule feet() {\n    for (x = [-50, 50]) {\n        for (y = [-30, 30]) {\n            translate([x, y, 0]) {\n                difference() {\n                    cylinder(h = 5, r = 5);\n                    translate([0, 0, -1]) cylinder(h = 7, r = 3);\n                }\n            }\n        }\n    }\n}\n\n// Pen holder dividers\nmodule dividers() {\n    for (i = [-20:20:20]) {\n        translate([-40, i, 65]) cube([31, 1.5, 45], center = true);\n    }\n}\n\n// Card holder slot\nmodule card_slot() {\n    translate([45, 0, 85]) {\n        difference() {\n            cube([25, 0.5, 10], center = true);\n            translate([0, 0, 3]) cube([23, 2, 4], center = true);\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    // Side ribs\n    for (y = [-38, 38]) {\n        translate([0, y, 60]) cube([116, wall_thickness, 20], center = true);\n    }\n    \n    // Front-back ribs\n    for (x = [-58, 58]) {\n        translate([x, 0, 60]) cube([wall_thickness, 76, 20], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    desk_organizer();\n    \n    // Base feet\n    feet();\n    \n    // Internal dividers\n    dividers();\n    \n    // Business card slot\n    card_slot();\n    \n    // Structural reinforcement\n    ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "kestrel",
    "openscad_code": "// Kestrel Desk Organizer - Realistic Style\n// Medium complexity furniture item for office use\n// Overall dimensions: 120mm x 80mm x 90mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main body module\nmodule kestrel_body() {\n    // Base platform (desk surface contact)\n    difference() {\n        cube([120, 80, 5], center=true);\n        translate([0, 0, -2.5])\n            cube([116, 76, 10], center=true);\n    }\n    \n    // Central body structure (kestral torso)\n    translate([0, 0, 5])\n    difference() {\n        hull() {\n            cube([60, 40, 40], center=true);\n            translate([0, 0, 40])\n                cube([50, 35, 30], center=true);\n        }\n        // Hollow interior\n        translate([0, 0, 5])\n            cube([56-wall*2, 36-wall*2, 65], center=true);\n    }\n    \n    // Wings (side compartments)\n    for(side = [-1, 1]) {\n        translate([side * 45, 0, 25])\n        difference() {\n            rotate([0, 15, side * 20])\n            cube([35, 20, 50], center=true);\n            translate([0, 0, -25])\n                cube([31-wall*2, 16-wall*2, 50], center=true);\n        }\n    }\n}\n\n// Head module with storage compartments\nmodule kestrel_head() {\n    translate([0, 0, 80])\n    union() {\n        // Main head structure\n        difference() {\n            hull() {\n                sphere(d=35);\n                translate([0, 0, -10])\n                    scale([0.9, 0.8, 1])\n                    sphere(d=30);\n            }\n            // Hollow interior\n            scale([0.85, 0.75, 0.9])\n                sphere(d=30);\n        }\n        \n        // Beak (small pen holder)\n        translate([17, 0, 0])\n        rotate([0, -20, 0])\n        difference() {\n            hull() {\n                cube([15, 8, 8], center=true);\n                translate([7.5, 0, 0])\n                    cube([8, 6, 6], center=true);\n            }\n            translate([0, 0, -5])\n                cube([11-wall*2, 4-wall*2, 12], center=true);\n        }\n    }\n}\n\n// Tail section (rear storage)\nmodule kestrel_tail() {\n    translate([0, -35, 25])\n    difference() {\n        hull() {\n            cube([40, 15, 40], center=true);\n            translate([0, -10, 0])\n                cube([30, 10, 30], center=true);\n        }\n        // Hollow for storage\n        translate([0, 0, -20])\n            cube([36-wall*2, 11-wall*2, 35], center=true);\n    }\n}\n\n// Feet/base stabilizers\nmodule kestrel_feet() {\n    for(x = [-30, 30])\n    for(y = [-25, 25]) {\n        translate([x, y, 2.5])\n        cylinder(h=5, d1=8, d2=10, center=true);\n    }\n}\n\n// Wing feather details (structural ribs)\nmodule wing_details() {\n    for(side = [-1, 1]) {\n        for(i = [0:4]) {\n            translate([side * (40 + i*3), 0, 20 + i*8])\n            rotate([0, 15, side * 20])\n            cube([2, 16, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    kestrel_body();\n    kestrel_head();\n    kestrel_tail();\n    kestrel_feet();\n    wing_details();\n}",
    "renders": true
  },
  {
    "office_supply": "mako",
    "openscad_code": "// Mako-inspired office chair\n// Realistic style, medium complexity\n// Overall dimensions: 120mm H x 100mm W x 110mm D\n\n// Parameters\n$fn = 32;\nseat_width = 80;\nseat_depth = 60;\nseat_thickness = 4;\nback_height = 60;\nback_width = 70;\narmrest_height = 15;\narmrest_width = 8;\nbase_diameter = 50;\nwheel_diameter = 12;\npole_height = 40;\npole_diameter = 8;\n\n// Main chair module\nmodule mako_chair() {\n    // Chair base with 5 wheels\n    translate([0, 0, 0]) chair_base();\n    \n    // Central pole\n    translate([0, 0, base_diameter/2]) \n        cylinder(h=pole_height, d=pole_diameter, center=false);\n    \n    // Seat mechanism housing\n    translate([0, 0, base_diameter/2 + pole_height]) \n        cube([seat_width + 20, seat_depth + 10, 10], center=true);\n    \n    // Seat cushion\n    translate([0, 0, base_diameter/2 + pole_height + 10]) \n        seat_cushion();\n    \n    // Backrest\n    translate([0, -seat_depth/2 + 5, base_diameter/2 + pole_height + 10 + seat_thickness/2]) \n        backrest();\n    \n    // Armrests\n    translate([seat_width/2 - 5, 0, base_diameter/2 + pole_height + 10 + seat_thickness]) \n        armrest();\n    mirror([1, 0, 0]) \n        translate([seat_width/2 - 5, 0, base_diameter/2 + pole_height + 10 + seat_thickness]) \n            armrest();\n}\n\n// Chair base with 5 wheels\nmodule chair_base() {\n    // Center hub\n    cylinder(h=15, d=base_diameter, center=false);\n    \n    // 5 spokes with wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            // Spoke\n            translate([0, base_diameter/2 - 5, 7.5]) \n                cube([10, 30, 5], center=true);\n            \n            // Wheel\n            translate([0, base_diameter/2 + 20, 0]) \n                rotate([90, 0, 0]) \n                    cylinder(h=wheel_diameter, d=wheel_diameter, center=true);\n            \n            // Wheel axle\n            translate([0, base_diameter/2 + 20, 0]) \n                rotate([90, 0, 0]) \n                    cylinder(h=15, d=wheel_diameter/3, center=true);\n        }\n    }\n}\n\n// Seat cushion with ergonomic shape\nmodule seat_cushion() {\n    // Base cushion\n    cube([seat_width, seat_depth, seat_thickness], center=true);\n    \n    // Front edge rounding\n    translate([0, seat_depth/2 - 5, -seat_thickness/2]) \n        cylinder(h=seat_width, d=10, center=true);\n    \n    // Side bolsters\n    difference() {\n        cube([seat_width + 4, seat_depth, seat_thickness + 2], center=true);\n        translate([0, 0, seat_thickness/2]) \n            cube([seat_width - 10, seat_depth - 10, seat_thickness], center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main backrest frame\n    difference() {\n        // Outer shape\n        cube([back_width, 8, back_height], center=true);\n        \n        // Cutout for mesh area\n        translate([0, 0, 5]) \n            cube([back_width - 8, 12, back_height - 20], center=true);\n    }\n    \n    // Lumbar support curve\n    translate([0, 5, -back_height/2 + 15]) \n        rotate([90, 0, 0]) \n            cylinder(h=back_width - 10, d=20, center=true);\n    \n    // Headrest\n    translate([0, 0, back_height/2 + 10]) \n        cube([back_width - 20, 8, 20], center=true);\n}\n\n// Armrest module\nmodule armrest() {\n    // Vertical support\n    cube([armrest_width, 8, armrest_height], center=false);\n    \n    // Horizontal arm pad\n    translate([-armrest_width/2, 0, armrest_height]) \n        cube([armrest_width + 20, armrest_width, 5], center=false);\n    \n    // Curved transition\n    translate([armrest_width/2, 4, armrest_height/2]) \n        rotate([0, 90, 0]) \n            cylinder(h=8, d=armrest_width, center=true);\n}\n\n// Render the chair\nmako_chair();",
    "renders": true
  },
  {
    "office_supply": "zinnia",
    "openscad_code": "// Zinnia-Inspired Side Table / Stool\n// Realistic style, medium complexity\n// Approx. 120mm diameter, 45mm height\n// 2mm wall thickness throughout\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\ntable_d = 120;\ntable_h = 45;\nwall_t = 2;\npetal_count = 16;\npetal_w = 22;\npetal_l = 35;\ncore_h = 8;\n\nmodule petal() {\n    difference() {\n        // Main petal shape\n        hull() {\n            translate([0, 0, 0]) sphere(r = 3);\n            translate([0, petal_l - 5, 0]) sphere(r = 5);\n            translate([0, petal_l, 0]) sphere(r = 2);\n        }\n        \n        // Hollow center\n        translate([0, 0, -1]) cylinder(h = petal_l + 2, r = wall_t, $fn = 16);\n        \n        // Trim sides for realistic petal shape\n        translate([petal_w/2 - 2, 0, 0]) cube([petal_w, petal_l + 10, 10], center = true);\n        translate([-petal_w/2 + 2, 0, 0]) cube([petal_w, petal_l + 10, 10], center = true);\n    }\n}\n\nmodule petals_layer() {\n    for (i = [0 : petal_count - 1]) {\n        rotate([0, 0, i * 360/petal_count]) {\n            translate([0, 0, table_h - core_h]) {\n                petal();\n            }\n        }\n    }\n}\n\nmodule table_top() {\n    difference() {\n        // Outer petal ring\n        petals_layer();\n        \n        // Central core\n        translate([0, 0, table_h - core_h - 1]) cylinder(h = core_h + 2, r = 25, $fn = 64);\n        \n        // Top surface\n        translate([0, 0, table_h - wall_t]) cylinder(h = wall_t + 1, r = table_d/2 - 5, $fn = 128);\n    }\n}\n\nmodule legs() {\n    // Three curved legs for stability\n    leg_offset = 35;\n    leg_w = 8;\n    \n    for (i = [0 : 2]) {\n        rotate([0, 0, i * 120]) {\n            translate([leg_offset, 0, 0]) {\n                // Vertical support\n                translate([0, 0, table_h/2]) cube([leg_w, wall_t, table_h], center = true);\n                \n                // Curved base\n                rotate([0, 90, 0]) {\n                    translate([0, 0, -table_h/2 + 2]) cylinder(h = leg_w, r = 6, $fn = 16);\n                }\n                \n                // Foot pad\n                translate([0, 0, 2]) cylinder(h = 4, r = 8, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule central_structure() {\n    // Hollow cylinder for strength\n    difference() {\n        cylinder(h = table_h - 5, r = 20, $fn = 64);\n        translate([0, 0, 2]) cylinder(h = table_h - 9, r = 18, $fn = 64);\n    }\n    \n    // Reinforcement ribs\n    for (i = [0 : 5]) {\n        rotate([0, 0, i * 60]) {\n            translate([10, -wall_t/2, table_h/2]) {\n                cube([10, wall_t, table_h - 10], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main tabletop with zinnia petals\n    table_top();\n    \n    // Central support structure\n    central_structure();\n    \n    // Leg assembly\n    legs();\n    \n    // Optional storage cavity\n    difference() {\n        translate([0, 0, table_h - 15]) {\n            cylinder(h = 15, r = 30, $fn = 64);\n        }\n        translate([0, 0, table_h - 14]) {\n            cylinder(h = 13, r = 28, $fn = 64);\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "reign",
    "openscad_code": "// OpenSCAD Office Chair - Realistic Reign Style\n// Overall size: ~120mm tall, 90mm wide, 100mm deep\n\n// Parameters\n$fn = 32;\nwall = 2;\n\n// Main module\nmodule chair() {\n    // Base assembly\n    union() {\n        // 5-star base with casters\n        base_assembly();\n        \n        // Gas lift cylinder\n        translate([0, 0, 20]) gas_lift();\n        \n        // Seat assembly\n        translate([0, 0, 50]) seat_assembly();\n        \n        // Backrest\n        translate([0, -35, 65]) backrest();\n        \n        // Armrests\n        armrests();\n    }\n}\n\n// 5-star base with wheels\nmodule base_assembly() {\n    // Central hub\n    cylinder(h=10, r=15);\n    \n    // 5 spokes with casters\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            // Spoke\n            translate([15, 0, 0]) cube([30, 8, 5], center=true);\n            \n            // Caster wheel\n            translate([45, 0, -7]) {\n                sphere(r=5);\n                cylinder(h=10, r=2);\n            }\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    cylinder(h=30, r1=6, r2=8);\n}\n\n// Seat cushion\nmodule seat_assembly() {\n    // Seat base\n    difference() {\n        cube([80, 70, 10], center=true);\n        translate([0, 0, 5]) cube([76, 66, 10], center=true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 8]) {\n        difference() {\n            cube([78, 68, 8], center=true);\n            translate([0, 0, 4]) cube([74, 64, 8], center=true);\n        }\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Backrest frame\n    difference() {\n        cube([70, 8, 55], center=true);\n        translate([0, 4, 0]) cube([66, 8, 51], center=true);\n    }\n    \n    // Backrest cushion\n    translate([0, 5, 0]) {\n        difference() {\n            cube([68, 4, 50], center=true);\n            translate([0, 2, 0]) cube([64, 4, 46], center=true);\n        }\n    }\n    \n    // Lumbar support curve\n    translate([0, 6, -10]) {\n        difference() {\n            cube([60, 3, 20], center=true);\n            translate([0, 2, 0]) cube([56, 3, 16], center=true);\n        }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-40, 20, 0]) armrest();\n    \n    // Right armrest\n    translate([40, 20, 0]) mirror([1, 0, 0]) armrest();\n}\n\nmodule armrest() {\n    // Vertical support\n    cylinder(h=20, r=4);\n    \n    // Horizontal pad\n    translate([0, 15, 20]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cube([8, 30, 4], center=true);\n                translate([0, 0, 2]) cube([6, 28, 4], center=true);\n            }\n        }\n    }\n}\n\n// Create the chair\nchair();",
    "renders": true
  },
  {
    "office_supply": "sol",
    "openscad_code": "// OpenSCAD code for a realistic office chair \"SOL\" – medium complexity\n// Overall size: 120 mm (H) × 100 mm (W) × 100 mm (D)\n// Wall thickness kept at 2 mm for 3D-printability\n\nchair_scale = 1;            // global scale factor\nseat_h = 12;                // seat thickness\nback_w = 100;               // backrest outer width\nback_h = 60;                // backrest height above seat\nleg_len = 70;               // gas-spring + base height\ncaster_r = 8;               // caster wheel radius\ncaster_w = 4;               // caster width\narm_w = 8;                  // armrest width\narm_len = 60;               // armrest length\n\nmodule seat() {\n    // Ergonomic seat pan with slight scoop\n    difference() {\n        // Main seat block\n        cube([100, 100, seat_h], center=true);\n        // Scoop out underside for weight reduction & comfort\n        translate([0, 0, seat_h/2 - 1])\n            cube([96, 96, 10], center=true);\n    }\n}\n\nmodule backrest() {\n    // Mesh back with lumbar support\n    difference() {\n        // Outer frame\n        hull() {\n            translate([-back_w/2, 0, 0])\n                cylinder(h=back_h, d=8, center=true);\n            translate([ back_w/2, 0, 0])\n                cylinder(h=back_h, d=8, center=true);\n            translate([-back_w/2, 0, back_h])\n                cylinder(h=8, d=back_w, center=true);\n            translate([ back_w/2, 0, back_h])\n                cylinder(h=8, d=back_w, center=true);\n        }\n        // Horizontal slots for mesh look\n        for (i=[1:4]) {\n            translate([0, 0, i*back_h/5])\n                cube([back_w+2, 20, 2], center=true);\n        }\n    }\n}\n\nmodule armrest(side) {      // side = 1 or -1\n    translate([side*(back_w/2 + arm_w/2), 0, seat_h/2 + 10]) {\n        // Post\n        cylinder(h=30, d=8, center=true);\n        // Top pad\n        translate([0, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h=arm_len, d=arm_w, center=true);\n    }\n}\n\nmodule gas_spring() {\n    // Central column\n    difference() {\n        cylinder(h=leg_len, d=12, center=true);\n        translate([0, 0, leg_len/2 - 2])\n            cylinder(h=leg_len, d=8, center=true);\n    }\n}\n\nmodule caster_wheel() {\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h=caster_w, d=caster_r*2, center=true);\n            translate([0, 0, -caster_w/2-1])\n                cube([caster_r*2, caster_r*2, caster_w+2], center=true);\n        }\n}\n\nmodule five_star_base() {\n    // Central hub\n    cylinder(h=10, d=20, center=true);\n    // Five spokes with caster at each end\n    for (a=[0:72:359])\n        rotate([0, 0, a])\n            translate([35, 0, 0])\n                union() {\n                    // Spoke\n                    rotate([0, 90, 0])\n                        cylinder(h=70, d=6, center=true);\n                    // Caster fork\n                    translate([35, 0, -leg_len/2 + 5])\n                        rotate([0, 90, 0])\n                            union() {\n                                cylinder(h=8, d=4, center=true);\n                                caster_wheel();\n                            }\n                }\n}\n\n// Assemble the chair\nscale(chair_scale) {\n    union() {\n        // Seat\n        translate([0, 0, leg_len + seat_h/2])\n            seat();\n\n        // Backrest\n        translate([0, 0, leg_len + seat_h + back_h/2])\n            backrest();\n\n        // Armrests\n        armrest(1);\n        armrest(-1);\n\n        // Central support\n        translate([0, 0, leg_len/2])\n            gas_spring();\n\n        // Five-star base\n        translate([0, 0, 0])\n            five_star_base();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "kato",
    "openscad_code": "// Kato-style modern office desk with cable management\n// Realistic proportions, 120mm wide x 60mm deep x 75mm high\n\n// Overall dimensions\ndesk_width = 120;\ndesk_depth = 60;\ndesk_height = 75;\nleg_thickness = 4;\nwall_thickness = 2;\n\n// Desktop module with rounded edges\nmodule desktop() {\n    // Main desktop slab\n    translate([0, 0, desk_height-4])\n    difference() {\n        // Main shape with rounded edges simulation\n        cube([desk_width, desk_depth, 4], center=true);\n        \n        // Cable grommet holes\n        translate([desk_width/2 - 15, 0, -1])\n        cylinder(h=5, r=5, center=true);\n        \n        translate([-desk_width/2 + 15, 0, -1])\n        cylinder(h=5, r=5, center=true);\n    }\n}\n\n// Single leg module with integrated cable channel\nmodule leg(x_pos, y_pos) {\n    // Main leg post\n    translate([x_pos, y_pos, desk_height/2 - 2])\n    cube([leg_thickness, leg_thickness, desk_height-4], center=true);\n    \n    // Cable management channel\n    translate([x_pos, y_pos + leg_thickness/2 + 1, desk_height/2 - 10])\n    cube([leg_thickness, 2, 20], center=true);\n}\n\n// Support frame module\nmodule support_frame() {\n    // Front support beam\n    translate([0, desk_depth/2 - leg_thickness/2, desk_height/2 - 10])\n    cube([desk_width - leg_thickness*2, 2, leg_thickness], center=true);\n    \n    // Back support beam\n    translate([0, -desk_depth/2 + leg_thickness/2, desk_height/2 - 10])\n    cube([desk_width - leg_thickness*2, 2, leg_thickness], center=true);\n    \n    // Side support beams\n    translate([desk_width/2 - leg_thickness/2, 0, desk_height/2 - 10])\n    cube([2, desk_depth - leg_thickness*2, leg_thickness], center=true);\n    \n    translate([-desk_width/2 + leg_thickness/2, 0, desk_height/2 - 10])\n    cube([2, desk_depth - leg_thickness*2, leg_thickness], center=true);\n}\n\n// Drawer module\nmodule drawer() {\n    // Drawer box\n    translate([0, 0, desk_height - 20])\n    difference() {\n        cube([desk_width - 30, desk_depth - 10, 12], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n        cube([desk_width - 34, desk_depth - 14, 14], center=true);\n    }\n    \n    // Drawer handle\n    translate([0, desk_depth/2 - 15, desk_height - 16])\n    cube([30, 2, 4], center=true);\n}\n\n// Main assembly\nunion() {\n    // Desktop\n    desktop();\n    \n    // Four legs\n    leg(desk_width/2 - leg_thickness/2, desk_depth/2 - leg_thickness/2);\n    leg(-desk_width/2 + leg_thickness/2, desk_depth/2 - leg_thickness/2);\n    leg(desk_width/2 - leg_thickness/2, -desk_depth/2 + leg_thickness/2);\n    leg(-desk_width/2 + leg_thickness/2, -desk_depth/2 + leg_thickness/2);\n    \n    // Support frame\n    support_frame();\n    \n    // Drawer unit\n    drawer();\n    \n    // Optional modesty panel\n    translate([0, -desk_depth/2 + 1, desk_height/2 - 15])\n    cube([desk_width - 20, 2, 30], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "elara",
    "openscad_code": "// Elara Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm height, 100mm width, 110mm depth\n\n// Chair parameters\nseat_width = 80;\nseat_depth = 70;\nseat_thickness = 4;\nback_height = 50;\nback_thickness = 3;\narmrest_height = 25;\nleg_height = 40;\nleg_diameter = 6;\n\n// Seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height + seat_thickness/2])\n            cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Rounded edges on top\n        translate([0, 0, leg_height + seat_thickness - 1])\n            cube([seat_width - 4, seat_depth - 4, 2], center=true);\n    }\n    \n    // Cushion detail lines\n    for (i = [-1, 0, 1]) {\n        translate([i * 20, 0, leg_height + seat_thickness + 0.1])\n            cube([2, seat_depth - 10, 0.5], center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main back panel\n    translate([0, -seat_depth/2 + back_thickness/2, leg_height + seat_thickness + back_height/2])\n        cube([seat_width - 20, back_thickness, back_height], center=true);\n    \n    // Lumbar support curve\n    translate([0, -seat_depth/2 + back_thickness + 2, leg_height + seat_thickness + 15])\n        cube([seat_width - 30, 2, 20], center=true);\n    \n    // Headrest\n    translate([0, -seat_depth/2 + back_thickness/2, leg_height + seat_thickness + back_height + 10])\n        cube([seat_width - 40, back_thickness, 15], center=true);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - 5, 0, leg_height + seat_thickness + armrest_height/2])\n        cube([5, 40, armrest_height], center=true);\n    \n    // Right armrest\n    translate([seat_width/2 + 5, 0, leg_height + seat_thickness + armrest_height/2])\n        cube([5, 40, armrest_height], center=true);\n    \n    // Armrest pads\n    translate([-seat_width/2 - 5, 0, leg_height + seat_thickness + armrest_height + 2])\n        cube([7, 35, 3], center=true);\n    translate([seat_width/2 + 5, 0, leg_height + seat_thickness + armrest_height + 2])\n        cube([7, 35, 3], center=true);\n}\n\n// 5-star base with casters\nmodule base() {\n    // Center post\n    cylinder(h=leg_height, d=8, center=false);\n    \n    // Star legs\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 30, leg_height/2])\n                cube([leg_diameter, 60, leg_diameter], center=true);\n    }\n    \n    // Casters\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 55, 0])\n                sphere(d=8);\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    cylinder(h=leg_height, d=6, center=false);\n    \n    // Adjustment lever\n    translate([5, -seat_depth/2 + 10, leg_height - 5])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=3, center=false);\n}\n\n// Assembly\nunion() {\n    base();\n    gas_lift();\n    seat_cushion();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "zyla",
    "openscad_code": "// Zyla ergonomic office chair - realistic style, medium complexity\n// Overall dimensions: 120mm height x 80mm width x 100mm depth\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main seat assembly\nmodule seat_assembly() {\n    // Seat cushion\n    translate([0, 0, 45])\n    rounded_cube(80, 70, 8, 3);\n    \n    // Seat support frame\n    translate([0, -30, 40])\n    difference() {\n        cube([76, 6, 10], center=true);\n        translate([0, 0, 5])\n        cube([72, 10, 10], center=true);\n    }\n}\n\n// Rounded cube helper for ergonomic shapes\nmodule rounded_cube(w, d, h, r) {\n    minkowski() {\n        cube([w-2*r, d-2*r, h-2*r], center=true);\n        sphere(r=r);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    translate([0, 0, 90])\n    difference() {\n        // Main backrest panel\n        rounded_cube(75, 65, 35, 5);\n        \n        // Lumbar curve\n        translate([0, -15, 10])\n        rounded_cube(60, 40, 15, 8);\n        \n        // Ventilation slots\n        for(i = [-20:10:20]) {\n            translate([i, 0, 0])\n            cube([4, 67, 35], center=true);\n        }\n    }\n}\n\n// 5-star base with casters\nmodule base_assembly() {\n    // Central column\n    cylinder(h=40, r=8, center=false);\n    \n    // Gas lift cylinder\n    translate([0, 0, 40])\n    cylinder(h=5, r=10, center=false);\n    \n    // 5-star legs\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n        translate([0, 25, 0])\n        leg();\n    }\n}\n\n// Single leg with caster\nmodule leg() {\n    difference() {\n        // Leg structure\n        translate([0, 15, -5])\n        cube([10, 30, 10], center=true);\n        \n        // Weight reduction\n        translate([0, 15, -2])\n        cube([6, 26, 6], center=true);\n    }\n    \n    // Caster wheel\n    translate([0, 30, -8])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=4, center=false);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-35, 0, 60])\n    difference() {\n        cube([8, 50, 25]);\n        \n        // Arm pad curve\n        translate([4, 25, 22])\n        rotate([0, 90, 0])\n        cylinder(h=50, r=8);\n    }\n    \n    // Right armrest (mirror)\n    mirror([1, 0, 0])\n    translate([-35, 0, 60])\n    difference() {\n        cube([8, 50, 25]);\n        \n        // Arm pad curve\n        translate([4, 25, 22])\n        rotate([0, 90, 0])\n        cylinder(h=50, r=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat components\n    seat_assembly();\n    \n    // Backrest\n    backrest();\n    \n    // Base\n    translate([0, 0, 0])\n    base_assembly();\n    \n    // Armrests\n    armrests();\n    \n    // Height adjustment lever\n    translate([30, -25, 40])\n    rotate([0, 90, 0])\n    cylinder(h=15, r=3);\n    \n    // Tilt mechanism housing\n    translate([0, 0, 40])\n    cylinder(h=5, r=20);\n}",
    "renders": true
  },
  {
    "office_supply": "creed",
    "openscad_code": "// Creed Office Chair - Realistic Style, Medium Complexity\n// Dimensions: ~120mm height, 100mm width, 100mm depth\n\n// Main parameters\nchair_height = 120;\nseat_height = 60;\nseat_width = 100;\nseat_depth = 100;\nback_height = 60;\nleg_diameter = 8;\nwheel_diameter = 15;\n\n// Chair base with wheels\nmodule chair_base() {\n    // Central support column\n    cylinder(h=seat_height - 10, d=20);\n    \n    // Wheel spokes\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            // Spoke\n            translate([0, 0, seat_height - 20])\n                cube([30, 5, 5], center=true);\n            \n            // Wheel\n            translate([30, 0, seat_height - 25])\n                rotate([90, 0, 0])\n                    cylinder(h=6, d=wheel_diameter, $fn=20);\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    translate([0, 0, seat_height - 10])\n        cylinder(h=10, d1=15, d2=20);\n}\n\n// Seat cushion\nmodule seat() {\n    // Main seat\n    translate([0, 0, seat_height])\n        cube([seat_width, seat_depth, 12], center=true);\n    \n    // Rounded edges\n    translate([0, 0, seat_height + 6])\n        minkowski() {\n            cube([seat_width - 10, seat_depth - 10, 2], center=true);\n            sphere(r=3, $fn=20);\n        }\n}\n\n// Backrest\nmodule backrest() {\n    // Back support post\n    translate([0, -seat_depth/2 + 10, seat_height + 6])\n        cube([6, 15, back_height], center=true);\n    \n    // Back frame\n    translate([0, -seat_depth/2 + 25, seat_height + 6 + back_height/2])\n        difference() {\n            cube([seat_width - 20, 8, back_height], center=true);\n            // Hollow center\n            translate([0, 0, 0])\n                cube([seat_width - 30, 10, back_height - 10], center=true);\n        }\n    \n    // Lumbar support curve\n    translate([0, -seat_depth/2 + 30, seat_height + 20])\n        rotate([0, -15, 0])\n            cube([seat_width - 30, 5, 25], center=true);\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 + 10, 0, seat_height + 15])\n        union() {\n            // Support post\n            cube([6, 6, 20]);\n            // Arm pad\n            translate([-5, -10, 18])\n                cube([20, 25, 4]);\n        }\n    \n    // Right armrest\n    translate([seat_width/2 - 10, 0, seat_height + 15])\n        mirror([1, 0, 0])\n            union() {\n                cube([6, 6, 20]);\n                translate([-5, -10, 18])\n                    cube([20, 25, 4]);\n            }\n}\n\n// Assembly\nunion() {\n    chair_base();\n    gas_lift();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "blitz",
    "openscad_code": "// Blitz Office Chair (realistic style, medium complexity)\n// Overall dimensions: 120mm width, 120mm depth, 140mm height\n\nmodule chair() {\n    // Seat - ergonomically curved with 2mm wall thickness\n    difference() {\n        // Main seat cushion\n        translate([0, -10, 60])\n            scale([1, 1.2, 0.4])\n                cylinder(h=20, d=100, $fn=40);\n        \n        // Hollow out bottom\n        translate([0, -10, 59])\n            scale([1, 1.2, 0.4])\n                cylinder(h=18, d=96, $fn=40);\n    }\n    \n    // Backrest - mesh pattern with frame\n    difference() {\n        // Main backrest structure\n        translate([0, -50, 100])\n            rotate([15, 0, 0])\n                cube([90, 10, 60], center=true);\n        \n        // Hollow for mesh pattern\n        translate([0, -50, 100])\n            rotate([15, 0, 0])\n                cube([86, 14, 56], center=true);\n    }\n    \n    // Mesh grid pattern\n    for(x = [-35:10:35]) {\n        for(y = [75:10:125]) {\n            translate([x, -50, y])\n                rotate([15, 0, 0])\n                    cube([4, 12, 4], center=true);\n        }\n    }\n    \n    // Backrest support pole\n    cylinder(h=60, d=12, center=true);\n    translate([0, 0, 60])\n        cylinder(h=2, d=16, center=true);\n    \n    // Gas lift cylinder\n    translate([0, 0, 30])\n        cylinder(h=30, d=30);\n    translate([0, 0, 30])\n        cylinder(h=30, d=26);\n    \n    // 5-star base\n    difference() {\n        // Central hub\n        cylinder(h=20, d=40);\n        \n        // Hollow hub\n        translate([0, 0, 2])\n            cylinder(h=16, d=36);\n    }\n    \n    // 5 castor arms\n    for(i = [0:72:360]) {\n        rotate([0, 0, i])\n            translate([0, 20, 10])\n                cube([40, 10, 6], center=true);\n        \n        // Castor wheels\n        rotate([0, 0, i])\n            translate([0, 35, 3])\n                rotate([90, 0, 0])\n                    cylinder(h=6, d=8, $fn=12);\n    }\n    \n    // Armrests\n    // Left armrest\n    translate([-45, 5, 70])\n        rotate([0, 15, 0])\n            cube([8, 40, 30]);\n    \n    // Right armrest\n    translate([45, 5, 70])\n        rotate([0, -15, 0])\n            cube([8, 40, 30]);\n    \n    // Armrest tops\n    translate([-45, 5, 85])\n        cube([12, 40, 4], center=true);\n    \n    translate([45, 5, 85])\n        cube([12, 40, 4], center=true);\n}\n\nchair();",
    "renders": true
  },
  {
    "office_supply": "vesper",
    "openscad_code": "// Vesper Office Chair - Realistic Style\n// Medium complexity 3D printable model\n\n$fn = 50;\nwall_thickness = 2;\n\nmodule chair_base() {\n    // Central pole\n    cylinder(h=30, d=8);\n    \n    // 5-star base\n    for(i=[0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 20, 0]) {\n                // Base leg\n                difference() {\n                    cube([35, 8, 3], center=true);\n                    translate([0, 0, -2]) cylinder(h=4, d=6);\n                }\n                \n                // Wheel mount\n                translate([30, 0, -4]) {\n                    cylinder(h=4, d=6);\n                    translate([2, 0, -2]) rotate([90, 0, 0]) cylinder(h=4, d=4);\n                }\n            }\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat\n    difference() {\n        translate([0, 0, 30]) {\n            scale([1, 1.2, 0.3]) sphere(d=50);\n            translate([0, 0, -5]) cube([50, 60, 10], center=true);\n        }\n        // Bottom hollow\n        translate([0, 0, 25]) scale([0.8, 1, 0.2]) sphere(d=45);\n    }\n    \n    // Seat edge detail\n    translate([0, 0, 35]) {\n        difference() {\n            cylinder(h=5, d=52);\n            cylinder(h=6, d=48);\n        }\n    }\n}\n\nmodule backrest() {\n    // Back support structure\n    translate([0, -25, 55]) {\n        rotate([15, 0, 0]) {\n            // Main backrest\n            difference() {\n                cube([45, 8, 50], center=true);\n                translate([0, 0, 5]) scale([0.9, 1.5, 0.9]) cube([40, 4, 45], center=true);\n            }\n            \n            // Lumbar support curve\n            translate([0, 0, -10]) {\n                scale([1, 0.5, 0.3]) sphere(d=40);\n            }\n            \n            // Headrest support\n            translate([0, 0, 35]) {\n                cylinder(h=15, d=6);\n                translate([0, 0, 10]) rotate([15, 0, 0]) {\n                    difference() {\n                        cube([35, 8, 20], center=true);\n                        translate([0, 0, 2]) scale([0.9, 1.2, 0.8]) cube([30, 4, 18], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([30, 0, 45]) {\n        // Support post\n        cylinder(h=15, d=6);\n        \n        // Arm pad\n        translate([0, 5, 10]) {\n            rotate([0, 10, 0]) {\n                scale([1.2, 1, 0.3]) sphere(d=20);\n                translate([0, 0, -2]) cube([25, 10, 6], center=true);\n            }\n        }\n    }\n    \n    // Right armrest (mirror)\n    mirror([1, 0, 0]) {\n        translate([30, 0, 45]) {\n            cylinder(h=15, d=6);\n            translate([0, 5, 10]) {\n                rotate([0, 10, 0]) {\n                    scale([1.2, 1, 0.3]) sphere(d=20);\n                    translate([0, 0, -2]) cube([25, 10, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Gas cylinder mechanism\nmodule gas_cylinder() {\n    translate([0, 0, 33]) {\n        difference() {\n            cylinder(h=20, d=10);\n            cylinder(h=22, d=6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_base();\n    gas_cylinder();\n    seat_cushion();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "riot",
    "openscad_code": "// Riot Shield - Realistic Office Furniture-Style Protective Barrier\n// Overall dimensions: 400mm height x 200mm width x 25mm depth\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main shield panel with ergonomic curves\nmodule shield_panel() {\n    difference() {\n        // Main curved body\n        hull() {\n            translate([-100, -200, 0]) cylinder(h=wall_thickness, r=10, $fn=32);\n            translate([100, -200, 0]) cylinder(h=wall_thickness, r=10, $fn=32);\n            translate([-100, 200, 0]) cylinder(h=wall_thickness, r=5, $fn=32);\n            translate([100, 200, 0]) cylinder(h=wall_thickness, r=5, $fn=32);\n        }\n        \n        // Viewing slot\n        translate([0, 50, -1]) cube([120, 40, wall_thickness+2]);\n        \n        // Weight reduction holes pattern\n        for(i = [-150:50:150]) {\n            for(j = [-100:50:100]) {\n                if(i != 0 || j < 25 || j > 65) {\n                    translate([i, j, -1]) cylinder(h=wall_thickness+2, r=8, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Handle assembly\nmodule handle_assembly() {\n    // Central grip handle\n    translate([0, -150, 10]) {\n        difference() {\n            // Main handle bar\n            rotate([90, 0, 0]) cylinder(h=80, r=10, $fn=32);\n            // Ergonomic grip relief\n            translate([0, 0, -1]) rotate([90, 0, 0]) cylinder(h=82, r=7, $fn=32);\n        }\n    }\n    \n    // Handle supports\n    for(x = [-30, 30]) {\n        translate([x, -150, 5]) {\n            rotate([90, 0, 0]) cylinder(h=10, r=5, $fn=16);\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    // Vertical ribs\n    for(x = [-80, 0, 80]) {\n        translate([x, 0, 0]) {\n            cube([wall_thickness, 400, 5]);\n        }\n    }\n    \n    // Horizontal ribs\n    for(y = [-150, -50, 50, 150]) {\n        translate([0, y, 0]) {\n            cube([200, wall_thickness, 5]);\n        }\n    }\n}\n\n// Edge protection strips\nmodule edge_protection() {\n    // Top edge\n    translate([0, 200, 2.5]) {\n        cube([204, wall_thickness, 5]);\n    }\n    \n    // Bottom edge\n    translate([0, -200, 2.5]) {\n        cube([204, wall_thickness, 5]);\n    }\n    \n    // Side edges\n    for(side = [-1, 1]) {\n        translate([side*102, 0, 2.5]) {\n            cube([wall_thickness, 400, 5]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shield\n    shield_panel();\n    \n    // Handle assembly\n    handle_assembly();\n    \n    // Reinforcement structure\n    reinforcement_ribs();\n    \n    // Edge protection\n    edge_protection();\n}",
    "renders": true
  },
  {
    "office_supply": "block",
    "openscad_code": "// Stackable Block Furniture - Office Storage Unit\n// Realistic style, medium complexity\n\n$fn = 30;\n\n// Overall dimensions\nwidth = 80;\ndepth = 60;\nheight = 80;\n\n// Wall thickness\nwall = 2;\n\n// Material thickness for joints\njoint = 3;\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([width - 2*wall, depth - 2*wall, height - wall], center = true);\n    }\n}\n\nmodule stacking_features() {\n    // Top stacking lip\n    translate([0, 0, height/2 - wall/2])\n        cube([width + 2*wall, depth + 2*wall, wall], center = true);\n    \n    // Bottom recess for stacking\n    translate([0, 0, -height/2 + wall])\n        cube([width + 0.5, depth + 0.5, wall], center = true);\n}\n\nmodule handle_cutouts() {\n    // Front handle cutout\n    translate([0, depth/2 - wall/2, 0])\n        cube([30, wall + 0.1, 15], center = true);\n    \n    // Back handle cutout\n    translate([0, -depth/2 + wall/2, 0])\n        cube([30, wall + 0.1, 15], center = true);\n}\n\nmodule internal_ridges() {\n    // Bottom reinforcement ridges\n    for(x = [-width/4, 0, width/4]) {\n        translate([x, 0, -height/2 + wall + 2])\n            cube([wall*2, depth - 2*wall, wall], center = true);\n    }\n    \n    // Side reinforcement ribs\n    for(z = [-height/4, 0, height/4]) {\n        translate([width/2 - wall - 1, 0, z])\n            cube([wall, depth - 2*wall, wall*2], center = true);\n        \n        translate([-width/2 + wall + 1, 0, z])\n            cube([wall, depth - 2*wall, wall*2], center = true);\n    }\n}\n\nmodule label_holder() {\n    // Front label holder slot\n    translate([0, depth/2 - wall - 2, height/4])\n        cube([40, wall, 10], center = true);\n    \n    // Label holder frame\n    difference() {\n        translate([0, depth/2 - wall/2, height/4])\n            cube([42, wall + 0.1, 12], center = true);\n        \n        translate([0, depth/2 - wall - 1, height/4])\n            cube([38, wall + 0.2, 8], center = true);\n    }\n}\n\nmodule ventilation_holes() {\n    // Side ventilation slots\n    for(z = [-height/3, 0, height/3]) {\n        translate([width/2 - wall/2, 0, z])\n            cube([wall + 0.1, 15, 3], center = true);\n        \n        translate([-width/2 + wall/2, 0, z])\n            cube([wall + 0.1, 15, 3], center = true);\n    }\n}\n\n// Assemble the storage block\nunion() {\n    main_body();\n    stacking_features();\n    internal_ridges();\n    label_holder();\n}\n\ndifference() {\n    // Final assembly\n    union();\n    handle_cutouts();\n    ventilation_holes();\n}",
    "renders": true
  },
  {
    "office_supply": "brick",
    "openscad_code": "// Modular brick furniture - stackable brick-style storage stool\n// Dimensions: 120 x 60 x 90 mm (L x W x H)\n// Wall thickness: 2 mm for 3D printing\n\nmodule stud() {\n    // Top connecting stud - LEGO-style cylinder\n    cylinder(h = 4.8, d = 8.2, $fn = 16);\n}\n\nmodule stud_hole() {\n    // Bottom recess to accept stud from brick below\n    cylinder(h = 5, d = 8.6, $fn = 16);\n}\n\nmodule hollow_box(length, width, height) {\n    // Main hollow body with consistent wall thickness\n    difference() {\n        // Outer shell\n        cube([length, width, height]);\n        \n        // Inner hollow space\n        translate([2, 2, 0])\n            cube([length-4, width-4, height-1]);\n    }\n}\n\nmodule top_surface(length, width) {\n    // Top with 8 studs arranged in 2x4 pattern\n    for (x = [1: length/4 - 1]) {\n        for (y = [1: width/4 - 1]) {\n            translate([x*20+10, y*20+10, 60]) {\n                stud();\n            }\n        }\n    }\n    \n    // Add slight chamfer to top edges\n    difference() {\n        cube([length, width, 2]);\n        translate([-1, -1, -1])\n            cube([length+2, width+2, 4]);\n    }\n}\n\nmodule bottom_surface(length, width) {\n    // Bottom with matching holes for studs\n    translate([0, 0, -0.1]) {\n        for (x = [1: length/4 - 1]) {\n            for (y = [1: width/4 - 1]) {\n                translate([x*20+10, y*20+10, 0]) {\n                    stud_hole();\n                }\n            }\n        }\n    }\n    \n    // Add reinforcement ribs inside bottom\n    translate([2, 2, 2]) {\n        for (i = [1:3]) {\n            cube([116, 2, 86]);\n            translate([0, 20, 0])\n                cube([116, 2, 86]);\n        }\n    }\n}\n\nmodule side_texture() {\n    // Add realistic brick texture - slight indentations\n    for (i = [0:5]) {\n        translate([i*20+2, 0, 20]) {\n            cube([16, 0.5, 40]);\n        }\n    }\n}\n\nmodule ventilation_holes() {\n    // Small holes for air circulation inside storage\n    translate([60, 30, 30]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 3, d = 6, $fn = 12);\n        }\n    }\n    translate([30, 30, 30]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 3, d = 6, $fn = 12);\n        }\n    }\n}\n\nmodule ergonomic_seat_top() {\n    // Slight curvature for comfortable sitting\n    translate([0, 0, 62]) {\n        difference() {\n            union() {\n                cube([120, 60, 2]);\n                translate([60, 30, 1]) {\n                    scale([120, 60, 2]) \n                        sphere(d = 0.8, $fn = 32);\n                }\n            }\n            translate([2, 2, -1])\n                cube([116, 56, 4]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    hollow_box(120, 60, 60);\n    \n    // Top surface with studs\n    translate([0, 0, 60]) {\n        top_surface(120, 60);\n    }\n    \n    // Ergonomic seat top\n    ergonomic_seat_top();\n    \n    // Bottom features\n    bottom_surface(120, 60);\n    \n    // Side textures on all four sides\n    translate([0, 0, 10]) {\n        side_texture();\n    }\n    translate([0, 59.5, 10]) {\n        rotate([0, 0, 180])\n            side_texture();\n    }\n    rotate([0, 0, 90]) {\n        translate([0, 0, 10]) {\n            scale([1, 120/60, 1])\n                side_texture();\n        }\n    }\n    rotate([0, 0, 90]) {\n        translate([0, -119.5, 10]) {\n            scale([1, 120/60, 1])\n                rotate([0, 0, 180])\n                    side_texture();\n        }\n    }\n    \n    // Ventilation\n    ventilation_holes();\n}",
    "renders": true
  },
  {
    "office_supply": "lego",
    "openscad_code": "// LEGO-style office chair with realistic proportions\n// All dimensions in mm, printable at 100 mm total height\n\n// Basic LEGO units (stud spacing = 8 mm, brick height = 9.6 mm)\nstud_spacing = 8;\nbrick_height = 9.6;\nstud_radius = 2.4;\nstud_height = 1.7;\nwall_thickness = 2;\n\n// Chair proportions\nseat_width = 10 * stud_spacing;  // 80 mm\nseat_depth = 10 * stud_spacing;  // 80 mm\nback_height = 6 * brick_height;  // 57.6 mm\narmrest_height = 4 * brick_height;  // 38.4 mm\nbase_height = 12 * brick_height;  // 115.2 mm\ncaster_radius = 6;\n\n// LEGO stud cylinder\nmodule lego_stud() {\n    cylinder(h = stud_height, r = stud_radius, $fn = 16);\n}\n\n// LEGO brick with studs on top\nmodule lego_brick(width, depth, height, studs = true) {\n    difference() {\n        // Main brick body\n        cube([width, depth, height]);\n        \n        // Hollow underside cavity\n        translate([wall_thickness, wall_thickness, -0.1])\n            cube([width - 2*wall_thickness, depth - 2*wall_thickness, height - stud_height + 0.2]);\n        \n        // Side tube holes\n        for (x = [stud_spacing : stud_spacing : width - stud_spacing]) {\n            for (y = [stud_spacing : stud_spacing : depth - stud_spacing]) {\n                translate([x, y, height - 3])\n                    cylinder(h = 3.5, r = 3.1, $fn = 16);\n            }\n        }\n    }\n    \n    // Top studs\n    if (studs) {\n        for (x = [stud_spacing/2 : stud_spacing : width - stud_spacing/2]) {\n            for (y = [stud_spacing/2 : stud_spacing : depth - stud_spacing/2]) {\n                translate([x, y, height])\n                    lego_stud();\n            }\n        }\n    }\n}\n\n// Chair seat with slight ergonomic curve\nmodule chair_seat() {\n    difference() {\n        union() {\n            // Main seat\n            lego_brick(seat_width, seat_depth, brick_height);\n            \n            // Front edge slope\n            translate([0, seat_depth, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = seat_width, r = brick_height, $fn = 3);\n        }\n        \n        // Remove back half for seating\n        translate([0, 0, brick_height - 2])\n            cube([seat_width, seat_depth/2, 2]);\n    }\n}\n\n// Chair backrest with lumbar support\nmodule chair_backrest() {\n    difference() {\n        union() {\n            // Main backrest\n            lego_brick(seat_width, brick_height*2, back_height);\n            \n            // Lumbar curve\n            translate([seat_width/2 - brick_height, -brick_height, back_height/2])\n                rotate([0, 90, 0])\n                    cylinder(h = brick_height*2, r = back_height/1.5, $fn = 20);\n        }\n        \n        // Cut lumbar curve\n        translate([seat_width/2 - brick_height*1.5, -brick_height*2, 0])\n            rotate([0, 90, 0])\n                cylinder(h = brick_height*4, r = back_height/1.3, $fn = 20);\n    }\n}\n\n// Armrest assembly\nmodule armrest(side) {\n    translate([side * (seat_width/2 - brick_height), 0, 0]) {\n        // Vertical support\n        lego_brick(brick_height*1.5, brick_height*1.5, armrest_height);\n        \n        // Horizontal rest\n        translate([-brick_height*0.25, brick_height*1.5, armrest_height - brick_height])\n            rotate([0, 30, 0])\n                lego_brick(brick_height*2, brick_height*1.5, brick_height);\n    }\n}\n\n// 5-star base with casters\nmodule chair_base() {\n    // Central pillar\n    lego_brick(brick_height*2, brick_height*2, base_height);\n    \n    // 5-star legs\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            // Main leg\n            translate([brick_height, -brick_height/2, base_height - brick_height*2])\n                lego_brick(30, brick_height, brick_height);\n            \n            // Caster wheel\n            translate([30, 0, -caster_radius])\n                sphere(r = caster_radius, $fn = 16);\n        }\n    }\n}\n\n// Assemble complete chair\ntranslate([0, 0, base_height]) {\n    // Chair base\n    chair_base();\n    \n    // Seat\n    translate([0, 0, base_height])\n        chair_seat();\n    \n    // Backrest\n    translate([0, brick_height, base_height + brick_height])\n        rotate([10, 0, 0])\n            chair_backrest();\n    \n    // Armrests\n    translate([0, -seat_depth/4, base_height + brick_height])\n        union() {\n            armrest(1);\n            armrest(-1);\n        }\n}",
    "renders": true
  },
  {
    "office_supply": "concrete",
    "openscad_code": "// Concrete Desk Organizer / Pen Holder\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\noverall_width = 80;\noverall_depth = 50;\noverall_height = 65;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base thickness\nbase_thickness = 4;\n\n// Pen compartments\ncompartments = 3;\ncompartment_width = (overall_width - (compartments + 1) * wall_thickness) / compartments;\ncompartment_depth = overall_depth - 2 * wall_thickness;\n\n// Front slot for business cards\nslot_width = 50;\nslot_height = 30;\nslot_depth = 2;\n\n// Side recess for small items\nside_recess_width = 15;\nside_recess_height = 20;\nside_recess_depth = 5;\n\n// Chamfer radius for concrete look\nchamfer = 1;\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Outer shell with chamfered edges\n        translate([0, 0, base_thickness])\n            minkowski() {\n                cube([overall_width, overall_depth, overall_height - base_thickness], center = true);\n                sphere(chamfer);\n            }\n        \n        // Remove interior\n        translate([0, 0, base_thickness + wall_thickness])\n            cube([overall_width - 2 * wall_thickness, overall_depth - 2 * wall_thickness, \n                  overall_height - base_thickness - wall_thickness], center = true);\n    }\n    \n    // Base plate\n    translate([0, 0, base_thickness / 2])\n        cube([overall_width, overall_depth, base_thickness], center = true);\n}\n\n// Pen compartments module\nmodule pen_compartments() {\n    for (i = [0 : compartments - 1]) {\n        x_pos = -overall_width / 2 + wall_thickness + compartment_width / 2 + \n                i * (compartment_width + wall_thickness);\n        \n        translate([x_pos, 0, base_thickness + (overall_height - base_thickness) / 2])\n            cube([compartment_width - 0.5, compartment_depth - 0.5, \n                  overall_height - base_thickness - wall_thickness], center = true);\n    }\n}\n\n// Business card slot\nmodule card_slot() {\n    translate([0, overall_depth / 2 - slot_depth / 2, slot_height / 2])\n        cube([slot_width, slot_depth, slot_height], center = true);\n}\n\n// Side recess\nmodule side_recess() {\n    translate([overall_width / 2 - side_recess_depth / 2, 0, \n               base_thickness + side_recess_height / 2])\n        cube([side_recess_depth, side_recess_width, side_recess_height], center = true);\n}\n\n// Concrete texture pattern\nmodule concrete_texture() {\n    for (i = [0 : 5]) {\n        for (j = [0 : 3]) {\n            x_pos = -overall_width / 2 + 5 + i * 15;\n            y_pos = -overall_depth / 2 + 5 + j * 15;\n            z_pos = overall_height / 2 + 2;\n            \n            translate([x_pos, y_pos, z_pos])\n                sphere(0.5, $fn = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    main_body();\n    \n    // Add compartments\n    pen_compartments();\n    \n    // Add card slot (cut from front)\n    difference() {\n        children();\n        card_slot();\n    }\n    \n    // Add side recess\n    difference() {\n        children();\n        side_recess();\n    }\n}\n\n// Add concrete texture details\ntranslate([0, 0, 0])\n    concrete_texture();",
    "renders": true
  },
  {
    "office_supply": "mortar",
    "openscad_code": "// OpenSCAD Mortar (office furniture / desk accessory)\n// Overall height ~100 mm, bowl Ø 80 mm, stable 2 mm wall thickness, printable without supports\n\n$fn = 48;           // global resolution\n\n// overall dimensions\nmortar_h   = 100;   // total height\nmortar_d   = 80;    // outside bowl diameter\nwall       = 2;     // printable wall thickness\nbase_d     = 90;    // base footprint for stability\ngrip_d     = 12;    // side grip diameter\ngrip_h     = 30;    // side grip height\n\n// --- modules -------------------------------------------------------------\n\n// half-bowl profile for revolution\nmodule bowl_profile() {\n    // from rim (0,0) down to center (0,-mortar_h)\n    polygon([\n        [0, 0],                     // rim\n        [mortar_d/2, 0],            // outer rim\n        [mortar_d/2 - wall, -wall], // start inner taper\n        [mortar_d/2 - wall, -(mortar_h - wall)], // inner bottom\n        [0, -(mortar_h - wall)]     // center bottom\n    ]);\n}\n\n// revolve profile into 3D bowl\nmodule mortar_bowl() {\n    rotate_extrude(angle = 360) bowl_profile();\n}\n\n// side grip rod\nmodule grip() {\n    cylinder(h = grip_h, d = grip_d);\n}\n\n// ring foot for stability\nmodule foot_ring() {\n    difference() {\n        cylinder(h = 5, d = base_d);\n        translate([0, 0, wall])\n            cylinder(h = 5, d = base_d - 2*wall);\n    }\n}\n\n// --- main assembly --------------------------------------------------------\n\nunion() {\n    // bowl\n    mortar_bowl();\n\n    // foot ring\n    translate([0, 0, -5]) foot_ring();\n\n    // two side grips at 180°\n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([mortar_d/2 + grip_d/2 - wall, 0, (mortar_h - grip_h)/2])\n                grip();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "rebar",
    "openscad_code": "// Rebar Office Stool\n// A 3D-printable rebar stool with realistic proportions and structural details\n\n// Parameters\n$fn=32;\nbar_radius = 2;  // 2mm thick rebar\nseat_diameter = 80;\nseat_thickness = 4;\nleg_height = 100;\nfootrest_height = 40;\ncross_brace_offset = 15;\n\n// Rebar module - creates a bent rebar segment\nmodule rebar_segment(start, end, bend_radius=5) {\n    length = norm(end - start);\n    direction = end - start;\n    angle = atan2(direction.y, direction.x);\n    elevation = atan2(direction.z, sqrt(direction.x^2 + direction.y^2));\n    \n    translate(start)\n    rotate([0, -elevation*180/PI, angle*180/PI])\n    cylinder(h=length, r=bar_radius, center=false);\n}\n\n// Rebar joint - wraps around intersecting bars\nmodule rebar_joint(position) {\n    translate(position)\n    sphere(r=bar_radius*1.5);\n}\n\n// Seat frame - circular rebar frame for seat support\nmodule seat_frame() {\n    // Main circular frame\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n        translate([seat_diameter/2 - bar_radius, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=seat_thickness + bar_radius*2, r=bar_radius);\n    }\n    \n    // Cross supports\n    for(angle=[0, 90]) {\n        rotate([0, 0, angle])\n        rebar_segment([0, 0, seat_thickness/2], [seat_diameter/2 - bar_radius, 0, seat_thickness/2]);\n    }\n}\n\n// Leg structure - 4-legged rebar frame\nmodule leg_structure() {\n    leg_positions = [\n        [1, 1], [-1, 1], [-1, -1], [1, -1]\n    ];\n    \n    // Vertical legs\n    for(pos = leg_positions) {\n        // Main leg\n        rebar_segment(\n            [pos[0]*(seat_diameter/2 - bar_radius), pos[1]*(seat_diameter/2 - bar_radius), seat_thickness/2],\n            [pos[0]*(seat_diameter/2 - bar_radius), pos[1]*(seat_diameter/2 - bar_radius), -leg_height + seat_thickness/2]\n        );\n        \n        // Foot pad\n        translate([pos[0]*(seat_diameter/2 - bar_radius), pos[1]*(seat_diameter/2 - bar_radius), -leg_height + seat_thickness/2])\n        cylinder(h=3, r=bar_radius*2, center=true);\n        \n        // Joints at top and bottom\n        rebar_joint([pos[0]*(seat_diameter/2 - bar_radius), pos[1]*(seat_diameter/2 - bar_radius), seat_thickness/2]);\n        rebar_joint([pos[0]*(seat_diameter/2 - bar_radius), pos[1]*(seat_diameter/2 - bar_radius), -leg_height + seat_thickness/2]);\n    }\n    \n    // Footrest ring\n    footrest_radius = seat_diameter/2 - 20;\n    for(i=[0:15:359]) {\n        rotate([0, 0, i])\n        translate([footrest_radius, 0, -footrest_height])\n        rotate([0, 90, 0])\n        cylinder(h=bar_radius*2, r=bar_radius);\n    }\n    \n    // Connect footrest to legs\n    for(pos = leg_positions) {\n        rebar_segment(\n            [pos[0]*(seat_diameter/2 - bar_radius), pos[1]*(seat_diameter/2 - bar_radius), -footrest_height],\n            [pos[0]*footrest_radius, pos[1]*footrest_radius, -footrest_height]\n        );\n    }\n    \n    // Cross braces between legs\n    brace_pairs = [[0,1], [1,2], [2,3], [3,0]];\n    for(pair = brace_pairs) {\n        p1 = leg_positions[pair[0]];\n        p2 = leg_positions[pair[1]];\n        rebar_segment(\n            [p1[0]*(seat_diameter/2 - bar_radius - cross_brace_offset), \n             p1[1]*(seat_diameter/2 - bar_radius - cross_brace_offset), \n             -leg_height/2],\n            [p2[0]*(seat_diameter/2 - bar_radius - cross_brace_offset), \n             p2[1]*(seat_diameter/2 - bar_radius - cross_brace_offset), \n             -leg_height/2]\n        );\n    }\n}\n\n// Seat surface - simple flat top\nmodule seat_surface() {\n    translate([0, 0, seat_thickness/2])\n    cylinder(h=seat_thickness, r=seat_diameter/2, center=true);\n}\n\n// Main assembly\nunion() {\n    // Seat components\n    color(\"dimgray\") seat_surface();\n    color(\"saddlebrown\") seat_frame();\n    \n    // Leg structure\n    color(\"saddlebrown\") leg_structure();\n}",
    "renders": true
  },
  {
    "office_supply": "plaster",
    "openscad_code": "// Plaster Desk Organizer - 3D printable furniture item\n// Realistic style, medium complexity\n\n$fn = 30;  // Smooth curves for printing\n\n// Main dimensions (mm)\nbase_width = 70;\nbase_depth = 50;\nbase_height = 4;\nwall_thickness = 2;\n\n// Pen holder dimensions\nholder_diameter = 25;\nholder_height = 35;\n\n// Card slot dimensions\ncard_width = 60;\ncard_height = 25;\ncard_depth = 3;\n\n// Phone stand dimensions\nphone_width = 15;\nphone_angle = 30;\n\n// Base platform\nmodule base() {\n    difference() {\n        // Main base\n        cube([base_width, base_depth, base_height]);\n        \n        // Rounded corners - remove excess\n        translate([wall_thickness, wall_thickness, -1])\n            cube([base_width-wall_thickness*2, base_depth-wall_thickness*2, base_height+2]);\n        translate([wall_thickness, wall_thickness, base_height-wall_thickness])\n            cube([base_width-wall_thickness*2, base_depth-wall_thickness*2, wall_thickness]);\n    }\n}\n\n// Pen holder with drainage holes\nmodule pen_holder() {\n    translate([base_width/2, base_depth/2 - 10, base_height]) {\n        difference() {\n            // Outer cylinder\n            cylinder(h=holder_height, d=holder_diameter);\n            \n            // Inner cavity\n            cylinder(h=holder_height-wall_thickness, d=holder_diameter-wall_thickness*2);\n            \n            // Drainage holes\n            for(i=[0:3]) {\n                rotate([0, 90, i*90])\n                    translate([holder_diameter/2-wall_thickness/2, 0, wall_thickness])\n                        cylinder(h=wall_thickness*3, d=1.5);\n            }\n        }\n    }\n}\n\n// Business card slot\nmodule card_slot() {\n    translate([5, base_depth - 20, base_height-wall_thickness]) {\n        difference() {\n            // Main slot\n            cube([card_width, card_depth, card_height+wall_thickness]);\n            \n            // Card cavity\n            translate([wall_thickness, 0, wall_thickness])\n                cube([card_width-wall_thickness*2, card_depth+1, card_height]);\n                \n            // Finger notch\n            translate([card_width/2-5, card_depth+0.5, 0])\n                cube([10, 2, card_height/2]);\n        }\n    }\n}\n\n// Phone stand with cable management\nmodule phone_stand() {\n    translate([base_width - 20, 5, base_height]) {\n        difference() {\n            // Angled support\n            rotate([0, -phone_angle, 0])\n                translate([0, 0, 0])\n                    cube([phone_width, base_depth-10, 20]);\n            \n            // Cable channel\n            translate([phone_width/2-2, -1, 5])\n                rotate([0, -phone_angle, 0])\n                    cube([4, base_depth-8, 15]);\n                    \n            // Phone rest groove\n            translate([-1, 0, 2])\n                rotate([0, -phone_angle, 0])\n                    cube([phone_width+2, 2, 3]);\n        }\n        \n        // Front lip\n        translate([-3, base_depth-15, 2])\n            cube([phone_width+6, 3, 5]);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    // Under base ribs\n    translate([base_width/2, base_depth/2, 0]) {\n        // Longitudinal\n        cube([base_width-10, wall_thickness, base_height-wall_thickness]);\n        // Transverse\n        cube([wall_thickness, base_depth-10, base_height-wall_thickness]);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    ribs();\n    pen_holder();\n    card_slot();\n    phone_stand();\n}",
    "renders": true
  },
  {
    "office_supply": "cement",
    "openscad_code": "// Cement Office Desk Organizer\n// Realistic style, medium complexity\n// Dimensions: 120mm x 80mm x 85mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([120, 80, 85]);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([120 - 2*wall, 80 - 2*wall, 85 - wall]);\n        \n        // Rounded edges on top\n        translate([wall, wall, 85 - wall])\n            cube([120 - 2*wall, 80 - 2*wall, wall]);\n        translate([wall, 80 - wall, wall])\n            cube([120 - 2*wall, wall, 85 - 2*wall]);\n        translate([120 - wall, wall, wall])\n            cube([wall, 80 - 2*wall, 85 - 2*wall]);\n    }\n}\n\n// Pen holder section\nmodule pen_holder() {\n    difference() {\n        // Main cylinder\n        translate([20, 20, 0])\n            cylinder(h = 70, r = 15);\n        \n        // Inner hollow\n        translate([20, 20, 0])\n            cylinder(h = 68, r = 13);\n    }\n}\n\n// Phone slot\nmodule phone_slot() {\n    difference() {\n        // Slot base\n        translate([50, 10, 60])\n            cube([60, 60, 25]);\n        \n        // Angled slot\n        translate([55, 15, 65])\n            rotate([0, 30, 0])\n            cube([50, 50, 20]);\n        \n        // Cable hole\n        translate([75, 70, 62])\n            rotate([90, 0, 0])\n            cylinder(h = 5, r = 5);\n    }\n}\n\n// Business card holder\nmodule card_holder() {\n    difference() {\n        // Base\n        translate([10, 50, 0])\n            cube([30, 25, 30]);\n        \n        // Card slot\n        translate([12, 52, 2])\n            cube([26, 21, 26]);\n        \n        // Finger notch\n        translate([22, 52, 28])\n            cube([6, 21, 2]);\n    }\n}\n\n// Paper clip compartment dividers\nmodule dividers() {\n    for(i = [0:1]) {\n        translate([85 + i*20, 10, 0])\n            cube([2, 60, 60]);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    // Bottom ribs\n    for(pos = [20, 60, 100]) {\n        translate([pos, 2, 0])\n            cube([2, 76, 5]);\n    }\n    \n    // Side ribs\n    for(pos = [20, 40, 60]) {\n        translate([2, pos, 0])\n            cube([116, 2, 5]);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    pen_holder();\n    phone_slot();\n    card_holder();\n    dividers();\n    ribs();\n}\n\n// Add cement texture details\nfor(i = [1:5]) {\n    translate([10 + i*20, 5 + sin(i)*3, 82])\n        sphere(r = 1);\n    translate([15 + i*18, 70 + cos(i)*2, 82])\n        sphere(r = 0.8);\n}",
    "renders": true
  },
  {
    "office_supply": "gravel",
    "openscad_code": "// Gravel office chair in realistic style\n// Overall dimensions: 120mm height, 100mm width, 100mm depth\n\n$fn = 32;\n\nmodule chair_base() {\n    // Central support column\n    cylinder(h = 80, r = 15);\n    \n    // 5-star base legs\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 15, 0])\n        cube([30, 15, 5], center = true);\n    }\n    \n    // Castor wheels\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([30, 0, -5])\n        sphere(r = 5);\n    }\n}\n\nmodule seat_pan() {\n    // Main seat platform\n    translate([0, 0, 80])\n    difference() {\n        cube([100, 100, 8], center = true);\n        \n        // Seat contour - slight depression\n        translate([0, 0, 2])\n        cube([90, 90, 8], center = true);\n    }\n    \n    // Seat cushion detail\n    translate([0, 0, 88])\n    cube([95, 95, 12], center = true);\n}\n\nmodule backrest() {\n    // Backrest frame\n    translate([0, -45, 95])\n    cube([90, 8, 60], center = true);\n    \n    // Backrest cushion\n    translate([0, -45, 125])\n    cube([85, 12, 50], center = true);\n    \n    // Lumbar support curve\n    translate([0, -40, 110])\n    difference() {\n        cube([80, 8, 30], center = true);\n        translate([0, 4, 0])\n        cube([70, 8, 20], center = true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-45, 0, 95])\n    union() {\n        // Vertical support\n        translate([0, 20, 0])\n        cube([8, 8, 30], center = true);\n        \n        // Horizontal rest\n        translate([0, 20, 15])\n        cube([8, 40, 8], center = true);\n    }\n    \n    // Right armrest\n    translate([45, 0, 95])\n    union() {\n        // Vertical support\n        translate([0, 20, 0])\n        cube([8, 8, 30], center = true);\n        \n        // Horizontal rest\n        translate([0, 20, 15])\n        cube([8, 40, 8], center = true);\n    }\n}\n\nmodule adjustment_mechanism() {\n    // Height adjustment lever\n    translate([40, 0, 82])\n    rotate([0, 90, 0])\n    cylinder(h = 20, r = 3);\n    \n    // Tilt mechanism housing\n    translate([0, 0, 80])\n    difference() {\n        cube([20, 20, 10], center = true);\n        translate([0, 0, 5])\n        cube([16, 16, 10], center = true);\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_base();\n    seat_pan();\n    backrest();\n    armrests();\n    adjustment_mechanism();\n}",
    "renders": true
  },
  {
    "office_supply": "sand",
    "openscad_code": "// Sand Office Chair\n// A realistic, 3D-printable sand-colored desk chair\n\n$fn = 30;  // Smooth curves\n\n// Overall dimensions\nchair_width = 110;\nchair_depth = 110;\nchair_height = 130;\nseat_height = 70;\nback_height = 60;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main colors\nsand_color = \"#F2E8C9\";\n\nmodule chair() {\n    color(sand_color) {\n        // Central support spine\n        union() {\n            // Seat base\n            translate([0, 0, seat_height - 10])\n            difference() {\n                cube([chair_width, chair_depth, 10], center = true);\n                translate([0, 0, wall])\n                cube([chair_width - 2*wall, chair_depth - 2*wall, 12], center = true);\n            }\n            \n            // Seat cushion\n            translate([0, 0, seat_height])\n            difference() {\n                minkowski() {\n                    cube([chair_width - 20, chair_depth - 20, 15], center = true);\n                    cylinder(h = 0.1, r = 10);\n                }\n                translate([0, 0, wall])\n                minkowski() {\n                    cube([chair_width - 20 - 2*wall, chair_depth - 20 - 2*wall, 17], center = true);\n                    cylinder(h = 0.1, r = 8);\n                }\n            }\n            \n            // Backrest frame\n            translate([0, -chair_depth/2 + 10, seat_height + back_height/2])\n            difference() {\n                cube([chair_width - 40, 10, back_height], center = true);\n                translate([0, wall, 0])\n                cube([chair_width - 40 - 2*wall, 12, back_height - 2*wall], center = true);\n            }\n            \n            // Backrest cushion\n            translate([0, -chair_depth/2 + 5, seat_height + back_height/2])\n            difference() {\n                minkowski() {\n                    cube([chair_width - 50, 15, back_height - 10], center = true);\n                    cylinder(h = 0.1, r = 8);\n                }\n                translate([0, wall, 0])\n                minkowski() {\n                    cube([chair_width - 50 - 2*wall, 17, back_height - 10 - 2*wall], center = true);\n                    cylinder(h = 0.1, r = 6);\n                }\n            }\n            \n            // Support column\n            translate([0, 0, seat_height/2 - 20])\n            difference() {\n                cylinder(h = seat_height - 20, r = 25);\n                cylinder(h = seat_height - 18, r = 23);\n            }\n            \n            // Star base\n            rotate([0, 0, 0])\n            star_base();\n        }\n    }\n}\n\nmodule star_base() {\n    // Central hub\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = 20, r = 35);\n        cylinder(h = 22, r = 33);\n    }\n    \n    // Five legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 25, 10])\n        difference() {\n            cube([20, 50, 20], center = true);\n            translate([0, wall, wall])\n            cube([20 - 2*wall, 50 - 2*wall, 20 - 2*wall], center = true);\n        }\n        \n        // Wheels\n        translate([0, 55, 10])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 15, r = 8);\n            cylinder(h = 17, r = 6);\n        }\n    }\n}\n\n// Display the chair\nchair();",
    "renders": true
  },
  {
    "office_supply": "timber",
    "openscad_code": "// Timber-Frame Office Chair (medium complexity, realistic style)\n// Designed for 3D printing, scale ~1:20\n// Overall footprint 70 x 60 mm, height 110 mm\n\n// Chair parameters\nseat_w = 50;      // seat width\nseat_d = 45;      // seat depth  \nseat_t = 3;       // seat thickness\nback_h = 60;      // backrest height above seat\nback_t = 3;       // backrest thickness\nleg_h = 45;       // leg height\nleg_t = 4;        // leg thickness (realistic timber)\nstretcher_t = 3;  // stretcher thickness\n\n// Color constants\nwood_color = \"SaddleBrown\";\n\n// Main chair module\nmodule chair() {\n    color(wood_color) {\n        union() {\n            seat();\n            backrest();\n            legs();\n            stretchers();\n            // Add dowel pins for timber look\n            dowel_pins();\n        }\n    }\n}\n\n// Seat with rounded front edge\nmodule seat() {\n    translate([0, 0, leg_h]) {\n        difference() {\n            // Main seat block\n            cube([seat_w, seat_d, seat_t], center=true);\n            \n            // Round front edge for comfort\n            translate([0, seat_d/2 + 0.1, seat_t/2])\n                rotate([90, 0, 0])\n                    cylinder(h=seat_w+2, r=seat_t, $fn=20);\n        }\n        \n        // Seat slat detailing\n        for(i = [-20:10:20]) {\n            translate([i, -seat_d/2 + 2, -seat_t/2 - 0.1])\n                cube([8, seat_d-4, 0.5]);\n        }\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    translate([0, -seat_d/2 + back_t/2, leg_h + seat_t + back_h/2]) {\n        // Main backrest panel\n        cube([seat_w-10, back_t, back_h], center=true);\n        \n        // Lumbar support curve\n        translate([0, 0, -back_h/4])\n            cube([seat_w-12, back_t+0.5, back_h/2], center=true);\n            \n        // Horizontal back slats (timber frame style)\n        for(y = [-15:10:15]) {\n            translate([0, 0, y])\n                cube([seat_w-10, back_t+0.2, 6], center=true);\n        }\n    }\n}\n\n// Four legs with tapered design\nmodule legs() {\n    // Corner positions\n    pos = [[-seat_w/2 + leg_t/2, -seat_d/2 + leg_t/2, leg_h/2],\n           [ seat_w/2 - leg_t/2, -seat_d/2 + leg_t/2, leg_h/2],\n           [-seat_w/2 + leg_t/2,  seat_d/2 - leg_t/2, leg_h/2],\n           [ seat_w/2 - leg_t/2,  seat_d/2 - leg_t/2, leg_h/2]];\n    \n    for(p = pos) {\n        translate(p) {\n            // Tapered leg\n            linear_extrude(height=leg_h, scale=[0.9, 0.9])\n                square([leg_t, leg_t], center=true);\n        }\n    }\n}\n\n// Side and back stretchers\nmodule stretchers() {\n    // Side stretchers\n    translate([0, -seat_d/2 + leg_t + 5, leg_h/2])\n        cube([seat_w - leg_t*2 - 10, leg_t, stretcher_t], center=true);\n    \n    translate([0, seat_d/2 - leg_t - 5, leg_h/2])\n        cube([seat_w - leg_t*2 - 10, leg_t, stretcher_t], center=true);\n    \n    // Back stretcher\n    translate([-seat_w/2 + leg_t + 5, 0, leg_h/3])\n        rotate([0, 0, 90])\n            cube([seat_d - leg_t*2 - 10, leg_t, stretcher_t], center=true);\n}\n\n// Decorative dowel pins at joints\nmodule dowel_pins() {\n    // Seat corner pins\n    for(x = [-seat_w/2 + 3, seat_w/2 - 3])\n    for(y = [-seat_d/2 + 3, seat_d/2 - 3]) {\n        translate([x, y, leg_h + seat_t + 1])\n            cylinder(h=2, r=1.5, $fn=8);\n    }\n}\n\n// Assembly\nchair();",
    "renders": true
  },
  {
    "office_supply": "lumber",
    "openscad_code": "// OpenSCAD Lumber Rack – medium-detail, 3D-printable office furniture\n// Overall footprint 120 × 80 × 100 mm\n\n// General settings\n$fn = 32;               // smooth curves\nwall = 2;               // printable wall thickness\n\n// Main rack body\nmodule rack_frame() {\n    // left upright\n    translate([0,0,0])\n        cube([wall, 80, 100]);\n\n    // right upright\n    translate([120-wall,0,0])\n        cube([wall, 80, 100]);\n\n    // back stretcher\n    translate([wall, 80-wall, 80])\n        cube([120-2*wall, wall, 20]);\n\n    // front bottom stretcher\n    translate([wall, 0, 0])\n        cube([120-2*wall, wall, wall]);\n\n    // front top stretcher\n    translate([wall, 0, 100-wall])\n        cube([120-2*wall, wall, wall]);\n}\n\n// Shelves (three levels)\nmodule shelf(y,h) {\n    // horizontal plank\n    translate([wall, y, h])\n        cube([120-2*wall, 80-2*wall, wall]);\n\n    // lip to keep lumber from rolling\n    difference() {\n        translate([wall, y+80-2*wall-wall, h])\n            cube([120-2*wall, wall, 8]);\n        // lightening cut-outs\n        for(i=[10:25:110])\n            translate([i, y+80-2*wall-wall+1, h+wall])\n                cube([10, wall-2, 6]);\n    }\n}\n\n// Lumber sticks (short dowels)\nmodule lumber_stick(len, dia, h) {\n    rotate([90,0,0])\n        cylinder(h=len, d=dia, center=true);\n}\n\nmodule lumber_bundle() {\n    // place 5 sticks on middle shelf\n    for(i=[1:1:5]) {\n        translate([20*i, 40, 55])\n            lumber_stick(70, 8, 0);\n    }\n}\n\n// Assemble the model\nunion() {\n    rack_frame();\n\n    shelf(5, 30);   // bottom shelf\n    shelf(5, 55);   // middle shelf\n    shelf(5, 80);   // top shelf\n\n    lumber_bundle();\n}",
    "renders": true
  },
  {
    "office_supply": "plywood",
    "openscad_code": "// Plywood Desk Organizer with Drawers\n// Medium complexity realistic style\n\n$fn = 30;\n\n// Overall dimensions\nwidth = 120;\ndepth = 80;\nheight = 65;\n\n// Plywood thickness\nply_thick = 2.2;\n\n// Drawer parameters\ndrawer_height = 20;\ndrawer_gap = 2;\nhandle_height = 8;\nhandle_width = 30;\n\nmodule plywood_sheet(w, d, h) {\n    color(\"burlywood\") \n    cube([w, d, h], center=false);\n}\n\nmodule drawer_box(pos_y, pos_z) {\n    // Drawer body\n    translate([ply_thick, pos_y, pos_z])\n    difference() {\n        plywood_sheet(width - 2*ply_thick, depth - 2*ply_thick - drawer_gap, drawer_height);\n        \n        // Hollow inside\n        translate([ply_thick, ply_thick, ply_thick])\n        cube([width - 4*ply_thick, depth - 4*ply_thick - drawer_gap, drawer_height - 2*ply_thick]);\n    }\n    \n    // Drawer front\n    translate([0, pos_y - ply_thick/2, pos_z])\n    plywood_sheet(width, ply_thick, drawer_height);\n    \n    // Handle\n    translate([width/2 - handle_width/2, pos_y - ply_thick - 1, pos_z + drawer_height/2 - handle_height/2])\n    plywood_sheet(handle_width, 10, handle_height);\n}\n\nmodule organizer_body() {\n    // Main shell\n    difference() {\n        // Outer box\n        plywood_sheet(width, depth, height);\n        \n        // Hollow inside\n        translate([ply_thick, ply_thick, ply_thick])\n        cube([width - 2*ply_thick, depth - 2*ply_thick, height - ply_thick]);\n        \n        // Drawer openings\n        for (i = [0:2]) {\n            translate([ply_thick, ply_thick, i*(drawer_height + drawer_gap) + drawer_gap])\n            cube([width - 2*ply_thick, depth - ply_thick, drawer_height]);\n        }\n    }\n    \n    // Internal dividers\n    for (i = [1:2]) {\n        translate([ply_thick, ply_thick, i*(drawer_height + drawer_gap)])\n        plywood_sheet(width - 2*ply_thick, depth - 2*ply_thick, ply_thick);\n    }\n    \n    // Back panel\n    translate([0, depth - ply_thick, 0])\n    plywood_sheet(width, ply_thick, height);\n}\n\n// Assembly\ntranslate([-width/2, -depth/2, 0]) {\n    organizer_body();\n    \n    // Drawers\n    drawer_box(ply_thick, drawer_gap);\n    drawer_box(ply_thick, 2*drawer_gap + drawer_height);\n    drawer_box(ply_thick, 3*drawer_gap + 2*drawer_height);\n}\n\n// Ergonomic front edge\ntranslate([-width/2 - 1, -depth/2 - 1, -1])\ndifference() {\n    cube([width + 2, depth + 2, 4]);\n    translate([5, -1, 0])\n    cube([width - 10, depth + 2, 5]);\n}",
    "renders": true
  },
  {
    "office_supply": "drywall",
    "openscad_code": "// Drywall Screw-in Shelf Bracket\n// Realistic medium-complexity furniture item\n// 100mm wide, 80mm tall, 60mm deep\n\n// Wall thickness constant\nwall = 2;\n\n// Main drywall panel\nmodule drywall_panel() {\n    difference() {\n        // Main board\n        translate([0, 0, 30]) \n            cube([100, 60, wall], center=true);\n        \n        // Tapered edges\n        translate([0, 30, 30])\n            cube([100, wall, 5], center=true);\n        translate([0, -30, 30])\n            cube([100, wall, 5], center=true);\n    }\n}\n\n// Paper facing texture\nmodule paper_texture() {\n    for (x = [-45:10:45]) {\n        translate([x, 0, 30.8])\n            cube([0.5, 60, 0.2], center=true);\n    }\n}\n\n// Screw holes with countersink\nmodule screw_holes() {\n    for (pos = [[-35, 20], [35, 20], [-35, -20], [35, -20]]) {\n        // Counterbore\n        translate([pos[0], pos[1], 30])\n            cylinder(h=wall+2, r=4, $fn=20);\n        // Screw hole\n        translate([pos[0], pos[1], 30])\n            cylinder(h=wall+5, r=2, $fn=12);\n    }\n}\n\n// Shelf support bracket\nmodule bracket() {\n    // Main bracket arm\n    translate([0, 35, 15])\n        cube([80, wall, 30], center=true);\n    \n    // Gusset support\n    translate([0, 40, 7.5])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=wall, $fn=8);\n    \n    // Reinforcement ribs\n    for (x = [-25, 0, 25]) {\n        translate([x, 37.5, 15])\n            cube([wall, 5, 30], center=true);\n    }\n}\n\n// Mounting plate\nmodule mounting_plate() {\n    translate([0, 0, 15])\n        cube([60, 10, 30], center=true);\n    \n    // Flanges\n    for (x = [-27, 27]) {\n        translate([x, 0, 15])\n            cube([6, 10, 30], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main drywall with texture\n    union() {\n        drywall_panel();\n        paper_texture();\n    }\n    \n    // Mounting hardware\n    difference() {\n        union() {\n            mounting_plate();\n            bracket();\n        }\n        screw_holes();\n    }\n    \n    // Chamfer edges\n    translate([0, 0, 30])\n        minkowski() {\n            cube([96, 56, 0.1], center=true);\n            cylinder(h=0.1, r=1, $fn=8);\n        }\n}",
    "renders": true
  },
  {
    "office_supply": "insulation",
    "openscad_code": "// Insulation foam panel desk organizer\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 36;\n\n// Overall dimensions\npanel_w = 100;\npanel_h = 75;\npanel_d = 50;\nwall_t = 2;\n\nmodule insulation_pattern() {\n    // Hexagonal cell pattern for insulation texture\n    hex_d = 6;\n    hex_h = 1.5;\n    rows = floor(panel_h / (hex_d * 0.866)) + 2;\n    cols = floor(panel_w / (hex_d * 1.5)) + 2;\n    \n    for (r = [0:rows]) {\n        for (c = [0:cols]) {\n            x_offset = c * hex_d * 1.5;\n            y_offset = r * hex_d * 0.866;\n            if (r % 2 == 1) x_offset += hex_d * 0.75;\n            \n            translate([x_offset - panel_w/2, y_offset - panel_h/2, 0]) {\n                cylinder(h = hex_h, r = hex_d/2, $fn = 6);\n            }\n        }\n    }\n}\n\nmodule foam_panel() {\n    difference() {\n        // Main foam block\n        cube([panel_w, panel_h, panel_d], center = true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 0])\n            cube([panel_w - wall_t*2, panel_h - wall_t*2, panel_d - wall_t], center = true);\n        \n        // Front cable management slot\n        translate([0, -panel_h/2 + wall_t, panel_d/2 - wall_t])\n            cube([panel_w/2, wall_t*2, wall_t*3], center = true);\n    }\n    \n    // Add insulation texture on front and back\n    translate([0, 0, panel_d/2 - 0.5])\n        insulation_pattern();\n    \n    translate([0, 0, -panel_d/2 + 0.5])\n        mirror([0, 0, 1])\n            insulation_pattern();\n}\n\nmodule support_frame() {\n    // Bottom frame for structural support\n    frame_w = panel_w + 4;\n    frame_h = panel_h + 4;\n    frame_d = 6;\n    \n    difference() {\n        // Outer frame\n        cube([frame_w, frame_h, frame_d], center = true);\n        \n        // Inner cutout\n        cube([frame_w - wall_t*2, frame_h - wall_t*2, frame_d + 2], center = true);\n    }\n    \n    // Corner supports\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (frame_w/2 - wall_t), y * (frame_h/2 - wall_t), 0])\n                cylinder(h = frame_d, r = wall_t);\n        }\n    }\n}\n\nmodule mounting_slots() {\n    // Keyhole mounting slots on back\n    slot_w = 4;\n    slot_h = 8;\n    slot_d = wall_t * 2;\n    \n    for (i = [-1, 0, 1]) {\n        translate([i * 30, -panel_h/2 + 10, -panel_d/2 + slot_d/2]) {\n            // Circular part\n            cylinder(h = slot_d, r = slot_w/2, center = true);\n            // Slotted part\n            translate([0, -slot_h/2 + slot_w/2, 0])\n                cube([slot_w, slot_h - slot_w/2, slot_d], center = true);\n        }\n    }\n}\n\nmodule desk_organizer() {\n    union() {\n        // Main foam panel\n        foam_panel();\n        \n        // Support frame at bottom\n        translate([0, 0, -panel_d/2 - 3])\n            support_frame();\n        \n        // Mounting hardware\n        mounting_slots();\n        \n        // Small accessory tray on top\n        tray_w = 40;\n        tray_h = 15;\n        tray_d = 20;\n        \n        translate([panel_w/2 - tray_w/2 - 5, panel_h/2 - tray_h/2 - 5, panel_d/2]) {\n            difference() {\n                cube([tray_w, tray_h, tray_d], center = true);\n                translate([0, 0, tray_d/4])\n                    cube([tray_w - wall_t*2, tray_h - wall_t*2, tray_d/2], center = true);\n            }\n        }\n    }\n}\n\n// Render the complete organizer\ndesk_organizer();",
    "renders": true
  },
  {
    "office_supply": "shingle",
    "openscad_code": "// Shingle-style small bench / footstool\n// Realistic medium-complexity 3D-printable model\n\n// Overall dimensions\n$fn = 50;\nbench_len = 120;\nbench_w = 60;\nbench_h = 100;\n\n// Wall thickness\nth = 2;\n\n// Shingle parameters\nshingle_h = 5;\nshingle_w = 12;\ngap = 3;\nrows = floor(bench_h / (shingle_h + gap));\ncols = floor(bench_len / (shingle_w + gap));\n\nmodule shingle(w = shingle_w, h = shingle_h, l = bench_w) {\n    difference() {\n        // Main shingle body\n        translate([0, 0, h/2])\n            cube([w, l, h], center = true);\n        \n        // Taper top edges for realistic look\n        translate([0, 0, h - 0.5])\n            rotate([45, 0, 0])\n                cube([w + 1, l + 1, 2], center = true);\n    }\n}\n\nmodule shingled_face(len, ht, depth) {\n    difference() {\n        union() {\n            // Back panel\n            translate([len/2, depth/2, ht/2])\n                cube([len, depth, ht], center = true);\n            \n            // Shingles\n            for (r = [0:rows-1]) {\n                for (c = [0:cols-1]) {\n                    translate([c * (shingle_w + gap), depth - th, r * (shingle_h + gap)])\n                        shingle();\n                }\n            }\n        }\n        \n        // Hollow center\n        translate([len/2, depth/2 + th/2, ht/2])\n            cube([len - 2*th, depth - th, ht - 2*th], center = true);\n    }\n}\n\nmodule legs() {\n    leg_size = 20;\n    leg_h = bench_h - 2*shingle_h;\n    \n    for (x = [leg_size, bench_len - leg_size]) {\n        for (y = [leg_size, bench_w - leg_size]) {\n            translate([x, y, leg_h/2]) {\n                difference() {\n                    cube([leg_size, leg_size, leg_h], center = true);\n                    translate([0, 0, -leg_h/2 + th])\n                        cube([leg_size - 2*th, leg_size - 2*th, leg_h], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Main model\nunion() {\n    // Shingled sides\n    translate([bench_len/2, th/2, bench_h/2])\n        rotate([0, 90, 0])\n            shingled_face(bench_h, bench_len, bench_w);\n    \n    translate([bench_len - th/2, bench_w/2, bench_h/2])\n        rotate([0, 90, 90])\n            shingled_face(bench_h, bench_w, bench_len);\n    \n    // Top seating surface with shingles\n    difference() {\n        union() {\n            translate([bench_len/2, bench_w/2, bench_h - shingle_h/2])\n                cube([bench_len, bench_w, shingle_h], center = true);\n            \n            // Top shingles running lengthwise\n            top_rows = floor(bench_w / (shingle_w + gap));\n            top_cols = floor(bench_len / (shingle_w + gap));\n            \n            for (r = [0:top_rows-1]) {\n                for (c = [0:top_cols-1]) {\n                    translate([c * (shingle_w + gap), r * (shingle_w + gap), bench_h])\n                        rotate([0, 90, 0])\n                            shingle(shingle_w, shingle_h, shingle_w);\n                }\n            }\n        }\n        \n        // Hollow top\n        translate([bench_len/2, bench_w/2, bench_h - shingle_h/2])\n            cube([bench_len - 2*th, bench_w - 2*th, shingle_h], center = true);\n    }\n    \n    // Structural legs\n    legs();\n}",
    "renders": true
  },
  {
    "office_supply": "tar",
    "openscad_code": "// Tar Furniture (Storage Stool/Ottoman)\n// Realistic style with medium complexity\n// Overall dimensions: 120mm diameter x 200mm height\n\n// Wall thickness constant for 3D printing\nwall_thickness = 2;\n\n// Main cylindrical body\nmodule stool_body() {\n    // Outer cylinder\n    difference() {\n        cylinder(h = 150, d = 120, $fn = 100);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h = 150 - wall_thickness, d = 120 - 2*wall_thickness, $fn = 100);\n    }\n}\n\n// Bottom base with feet\nmodule stool_base() {\n    // Bottom plate\n    translate([0, 0, 0])\n        cylinder(h = 10, d = 120, $fn = 100);\n    \n    // Support ribs underneath\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([40, 0, 0])\n                cube([30, wall_thickness, 10], center = true);\n    }\n    \n    // Four feet\n    for (i = [0:3]) {\n        rotate([0, 0, i*90 + 45])\n            translate([45, 0, -5])\n                cylinder(h = 10, d = 15, $fn = 20);\n    }\n}\n\n// Top lid with cushion\nmodule stool_lid() {\n    // Lid base\n    difference() {\n        cylinder(h = 50, d = 118, $fn = 100);\n        \n        // Hollow for cushion\n        translate([0, 0, 10])\n            cylinder(h = 40, d = 114, $fn = 100);\n    }\n    \n    // Cushion top\n    translate([0, 0, 40])\n        cylinder(h = 10, d = 118, $fn = 100);\n    \n    // Upholstery tufting buttons\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i*30, j*30, 50])\n                sphere(d = 5, $fn = 20);\n        }\n    }\n}\n\n// Hinge mechanism\nmodule hinge() {\n    // Left hinge\n    translate([0, 59, 150])\n        difference() {\n            cylinder(h = 20, d = 6, $fn = 20);\n            translate([0, 0, -1])\n                cube([10, 20, 22], center = true);\n        }\n    \n    // Right hinge\n    translate([0, -59, 150])\n        difference() {\n            cylinder(h = 20, d = 6, $fn = 20);\n            translate([0, 0, -1])\n                cube([10, 20, 22], center = true);\n        }\n}\n\n// Handle for lifting lid\nmodule handle() {\n    // Recessed grip\n    difference() {\n        translate([0, 0, 195])\n            cylinder(h = 5, d = 30, $fn = 50);\n        \n        translate([0, 0, 194])\n            cylinder(h = 7, d = 20, $fn = 50);\n    }\n}\n\n// Assembly\nunion() {\n    stool_body();\n    stool_base();\n    translate([0, 0, 150])\n        stool_lid();\n    hinge();\n    handle();\n}",
    "renders": true
  },
  {
    "office_supply": "asphalt",
    "openscad_code": "// Asphalt Trash Bin - Medium Complexity\n// Realistic office furniture piece for 3D printing\n// Overall dimensions: 120mm height x 100mm diameter\n\n$fn = 30;\n\nmodule trash_bin_body() {\n    // Main cylindrical body with slight taper\n    difference() {\n        cylinder(h1 = 100, h2 = 95, r1 = 50, r2 = 48);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 98, r1 = 46, r2 = 44);\n        \n        // Rim detail groove\n        translate([0, 0, 90])\n            cylinder(h = 3, r1 = 49, r2 = 47);\n    }\n}\n\nmodule base_ring() {\n    // Reinforced base ring for stability\n    difference() {\n        cylinder(h = 5, r = 52);\n        cylinder(h = 6, r = 48);\n    }\n}\n\nmodule lid_hinge() {\n    // Hinge mechanism for lid\n    translate([45, 0, 95])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 3);\n}\n\nmodule lid() {\n    // Domed lid with handle\n    difference() {\n        // Main lid shape\n        translate([0, 0, 95])\n            scale([1, 1, 0.3])\n                sphere(d = 98);\n        \n        // Handle hole\n        translate([0, 0, 110])\n            rotate([0, 90, 0])\n                cylinder(h = 30, r = 8);\n        \n        // Lid edge detail\n        translate([0, 0, 95])\n            cylinder(h = 2, r1 = 48, r2 = 46);\n    }\n    \n    // Handle grip\n    translate([0, 0, 110])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 25, r = 6);\n                cylinder(h = 26, r = 4);\n            }\n}\n\nmodule foot_pads() {\n    // Anti-slip foot pads\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([40, 0, 0])\n                cylinder(h = 3, r = 5);\n    }\n}\n\nmodule texture_lines() {\n    // Subtle vertical texture lines for asphalt appearance\n    for(i = [0:15:345]) {\n        rotate([0, 0, i])\n            translate([49, 0, 50])\n                cube([2, 1, 100], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base assembly\n    union() {\n        trash_bin_body();\n        base_ring();\n        foot_pads();\n    }\n    \n    // Lid assembly\n    union() {\n        lid();\n        lid_hinge();\n    }\n    \n    // Surface texture\n    texture_lines();\n}",
    "renders": true
  },
  {
    "office_supply": "tile",
    "openscad_code": "// Tile-style office chair module\n// Realistic style, medium complexity, 3D printable\n\nmodule office_chair_tile() {\n    // Overall dimensions\n    chair_width = 60;\n    chair_depth = 60;\n    chair_height = 20;\n    wall_thickness = 2;\n    \n    // Base plate with rounded edges\n    difference() {\n        // Main base\n        translate([0, 0, 0])\n            cube([chair_width, chair_depth, wall_thickness], center=true);\n        \n        // Rounded corners\n        translate([chair_width/2 - 5, chair_depth/2 - 5, -0.1])\n            cylinder(h=wall_thickness+0.2, r=5, $fn=20);\n        translate([-chair_width/2 + 5, chair_depth/2 - 5, -0.1])\n            cylinder(h=wall_thickness+0.2, r=5, $fn=20);\n        translate([chair_width/2 - 5, -chair_depth/2 + 5, -0.1])\n            cylinder(h=wall_thickness+0.2, r=5, $fn=20);\n        translate([-chair_width/2 + 5, -chair_depth/2 + 5, -0.1])\n            cylinder(h=wall_thickness+0.2, r=5, $fn=20);\n    }\n    \n    // Chair back support\n    difference() {\n        // Backrest\n        translate([0, chair_depth/2 - 15, chair_height/2])\n            cube([chair_width - 20, 10, chair_height], center=true);\n        \n        // Backrest hole pattern\n        for(x = [-20:10:20]) {\n            translate([x, chair_depth/2 - 15, chair_height/2])\n                cylinder(h=chair_height+1, r=2, center=true, $fn=8);\n        }\n    }\n    \n    // Seat cushion\n    difference() {\n        // Main seat\n        translate([0, -5, chair_height/2 + 2])\n            cube([chair_width - 15, 20, 4], center=true);\n        \n        // Cushion details\n        translate([0, -5, chair_height/2 + 4.1])\n            cube([chair_width - 17, 18, 0.2], center=true);\n    }\n    \n    // Armrest supports\n    for(side = [-1, 1]) {\n        // Left and right armrests\n        translate([side * (chair_width/2 - 10), 5, chair_height/2 + 2])\n            cube([wall_thickness + 2, 15, 6], center=true);\n    }\n    \n    // Central pedestal\n    difference() {\n        // Main cylinder\n        translate([0, 0, -5])\n            cylinder(h=10, r=6, center=false, $fn=20);\n        \n        // Center hole for 3D printing support\n        translate([0, 0, -4.9])\n            cylinder(h=10.2, r=2, center=false, $fn=16);\n    }\n    \n    // Star base legs\n    for(angle = [0:60:359]) {\n        rotate([0, 0, angle])\n            translate([0, 0, -5])\n                cube([wall_thickness, 25, wall_thickness], center=true);\n    }\n    \n    // Wheels\n    for(angle = [30:60:359]) {\n        rotate([0, 0, angle])\n            translate([0, 22, -7])\n                sphere(r=3, $fn=12);\n    }\n    \n    // Lumbar support detail\n    translate([0, chair_depth/2 - 20, chair_height/2 + 3])\n        cube([chair_width - 25, 2, 2], center=true);\n}\n\n// Render the chair tile\noffice_chair_tile();",
    "renders": true
  },
  {
    "office_supply": "ceramic",
    "openscad_code": "// Ceramic Office Desk Caddy\n// Dimensions: 120mm x 80mm x 95mm (L x W x H)\n// Features 3 compartments for pens, supplies, and phone\n\n$fn = 50;\nwall_thickness = 2;\n\nmodule rounded_cube(size, radius) {\n    // Creates a rounded cube for ceramic feel\n    hull() {\n        for(dx = [0, size.x - radius*2])\n            for(dy = [0, size.y - radius*2])\n                for(dz = [0, size.z - radius*2])\n                    translate([dx + radius, dy + radius, dz + radius])\n                        sphere(r=radius);\n    }\n}\n\nmodule body() {\n    // Main ceramic body with gentle curves\n    difference() {\n        // Outer shape with rounded edges\n        rounded_cube([120, 80, 95], 8);\n        \n        // Main cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([120-wall_thickness*2, 80-wall_thickness*2, 95-wall_thickness], 6);\n    }\n}\n\nmodule compartment_divider() {\n    // Central divider between compartments\n    translate([60-wall_thickness/2, 0, 0])\n        cube([wall_thickness, 80, 95-wall_thickness]);\n}\n\nmodule pen_holes() {\n    // Create 3 pen holes in left compartment\n    for(i = [0:2]) {\n        translate([15 + i*25, 20, 95-wall_thickness])\n            cylinder(h=30, r=6, $fn=32);\n    }\n}\n\nmodule phone_slot() {\n    // Phone slot in right compartment\n    translate([75, 20, 95-wall_thickness])\n        cube([35, 40, 30]);\n}\n\nmodule drainage_holes() {\n    // Small drainage holes at bottom for ceramic firing\n    for(pos = [[30, 40], [90, 40], [60, 65]]) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=wall_thickness, r=2, $fn=16);\n    }\n}\n\nmodule base_feet() {\n    // Small feet to lift caddy slightly\n    for(x = [15, 105])\n        for(y = [15, 65]) {\n            translate([x, y, 0])\n                cylinder(h=3, r=4, $fn=16);\n        }\n}\n\n// Main assembly\nunion() {\n    // Base body\n    body();\n    \n    // Internal compartments\n    compartment_divider();\n    \n    // Cut features from top\n    difference() {\n        union() {\n            // Create top surface\n            translate([0, 0, 95-wall_thickness])\n                rounded_cube([120, 80, wall_thickness], 8);\n        }\n        \n        // Pen holes\n        pen_holes();\n        \n        // Phone slot\n        phone_slot();\n    }\n    \n    // Drainage holes\n    difference() {\n        children();\n        drainage_holes();\n    }\n    \n    // Base feet\n    base_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "granite",
    "openscad_code": "// Granite Office Monitor Stand - Realistic Style, Medium Complexity\n// Overall dimensions: 120 x 240 x 90 mm\n\n// Granite texture parameters\n$fn = 50;\ngranite_color = [0.55, 0.55, 0.55]; // Dark gray granite\n\n// Main slab\nmodule granite_slab() {\n    // Base slab with chamfered edges\n    difference() {\n        // Main block\n        cube([120, 240, 20], center = true);\n        \n        // Chamfer edges\n        translate([0, 0, 10])\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x * 58, y * 118, 0])\n                rotate([0, 0, 45 * x * y])\n                cube([2.8, 2.8, 20], center = true);\n    }\n}\n\n// Front support legs with cable management\nmodule front_support() {\n    // Left leg\n    translate([-50, -100, -35]) {\n        difference() {\n            cube([15, 20, 70], center = true);\n            // Cable routing hole\n            translate([0, 0, 15])\n            cylinder(h = 20, r = 4, center = true);\n        }\n    }\n    \n    // Right leg\n    translate([50, -100, -35]) {\n        difference() {\n            cube([15, 20, 70], center = true);\n            // Cable routing hole\n            translate([0, 0, 15])\n            cylinder(h = 20, r = 4, center = true);\n        }\n    }\n    \n    // Front cross brace\n    translate([0, -100, -35])\n    cube([100, 3, 10], center = true);\n}\n\n// Rear support legs\nmodule rear_support() {\n    // Left leg\n    translate([-50, 100, -35])\n    cube([15, 20, 70], center = true);\n    \n    // Right leg\n    translate([50, 100, -35])\n    cube([15, 20, 70], center = true);\n    \n    // Rear cross brace\n    translate([0, 100, -35])\n    cube([100, 3, 10], center = true);\n}\n\n// Side supports\nmodule side_supports() {\n    // Left side\n    translate([-55, 0, -30])\n    cube([3, 200, 60], center = true);\n    \n    // Right side\n    translate([55, 0, -30])\n    cube([3, 200, 60], center = true);\n}\n\n// Granite surface texture\nmodule granite_texture() {\n    color(granite_color)\n    union() {\n        // Main slab\n        translate([0, 0, 0])\n        granite_slab();\n        \n        // Support structure\n        union() {\n            front_support();\n            rear_support();\n            side_supports();\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 45])\ngranite_texture();",
    "renders": true
  },
  {
    "office_supply": "marble",
    "openscad_code": "// Marble Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm W x 120mm D x 110mm H\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main chair module\nmodule marble_chair() {\n    // Seat base - solid marble block with ergonomic shaping\n    difference() {\n        // Main seat block\n        translate([0, 0, 50])\n            cube([100, 100, 20], center=true);\n        \n        // Gentle seat contour\n        translate([0, 0, 60])\n            sphere(d=95);\n        \n        // Front edge rounding\n        translate([0, 45, 50])\n            cylinder(h=25, d=95);\n    }\n    \n    // Backrest - curved marble support\n    difference() {\n        // Backrest block\n        translate([0, -35, 85])\n            cube([90, 15, 50], center=true);\n        \n        // Lumbar curve\n        translate([0, -35, 85])\n            sphere(d=85);\n    }\n    \n    // Chair legs - four marble cylinders\n    leg_positions = [\n        [-40, 40, 0],   // Front left\n        [40, 40, 0],    // Front right\n        [-40, -40, 0],  // Back left\n        [40, -40, 0]    // Back right\n    ];\n    \n    for(pos = leg_positions) {\n        // Main leg cylinder\n        translate(pos)\n            cylinder(h=50, d=12, center=false);\n        \n        // Leg base pad for stability\n        translate([pos[0], pos[1], 0])\n            cylinder(h=3, d=16, center=false);\n    }\n    \n    // Armrest supports - left side\n    translate([-50, 0, 65])\n        cube([8, 60, 25], center=true);\n    \n    // Armrest top - left\n    translate([-40, 0, 80])\n        cube([20, 60, 8], center=true);\n    \n    // Armrest supports - right side\n    translate([50, 0, 65])\n        cube([8, 60, 25], center=true);\n    \n    // Armrest top - right\n    translate([40, 0, 80])\n        cube([20, 60, 8], center=true);\n    \n    // Structural reinforcement bars between legs\n    // Front bar\n    translate([0, 40, 25])\n        cube([80, 6, 6], center=true);\n    \n    // Back bar\n    translate([0, -40, 25])\n        cube([80, 6, 6], center=true);\n    \n    // Side bars\n    translate([-40, 0, 25])\n        cube([6, 80, 6], center=true);\n    \n    translate([40, 0, 25])\n        cube([6, 80, 6], center=true);\n    \n    // Marble texture details - subtle grooves\n    for(i = [-2:2]) {\n        translate([i * 15, 0, 50.5])\n            cube([2, 100, 1], center=true);\n    }\n}\n\n// Create the chair\nmarble_chair();",
    "renders": true
  },
  {
    "office_supply": "slate",
    "openscad_code": "// Slate furniture item - Office desk organizer with slate aesthetic\n// Overall dimensions: 120mm x 80mm x 45mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main body with slate texture simulation\nmodule slate_body() {\n    difference() {\n        // Main rectangular block\n        cube([120, 80, 45], center=false);\n        \n        // Hollow out interior with proper wall thickness\n        translate([wall, wall, wall])\n            cube([120 - 2*wall, 80 - 2*wall, 45 - wall], center=false);\n        \n        // Rounded bottom edges for 3D printing\n        translate([wall, wall, 0])\n            cube([120 - 2*wall, 80 - 2*wall, wall], center=false);\n    }\n}\n\n// Slate texture pattern using small recesses\nmodule slate_texture() {\n    for (x = [5:10:115]) {\n        for (y = [5:10:75]) {\n            translate([x, y, 43])\n                cube([8, 8, 2], center=true);\n        }\n    }\n}\n\n// Pen holder compartment\nmodule pen_holder() {\n    difference() {\n        // Outer cylinder\n        translate([20, 20, 0])\n            cylinder(h=45, d=30, center=false);\n        \n        // Hollow interior\n        translate([20, 20, wall])\n            cylinder(h=45 - wall, d=30 - 2*wall, center=false);\n    }\n}\n\n// Phone stand slot\nmodule phone_stand() {\n    difference() {\n        // Raised platform\n        translate([70, 10, 30])\n            cube([40, 60, 15], center=false);\n        \n        // Phone slot\n        translate([75, 15, 35])\n            cube([30, 50, 10], center=false);\n        \n        // Cable management hole\n        translate([75, 15, 35])\n            cylinder(h=10, d=8, center=false);\n    }\n}\n\n// Business card holder\nmodule card_holder() {\n    difference() {\n        // Angled block\n        translate([15, 50, 10])\n            rotate([0, 10, 0])\n                cube([30, 25, 35], center=false);\n        \n        // Card slot\n        translate([20, 55, 15])\n            cube([20, 20, 25], center=false);\n    }\n}\n\n// Support feet for stability\nmodule support_feet() {\n    for (x = [10, 110]) {\n        for (y = [10, 70]) {\n            translate([x, y, -2])\n                cylinder(h=4, d=8, center=false);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main slate body\n    slate_body();\n    \n    // Apply texture by subtracting pattern\n    difference() {\n        color(\"darkslategray\")\n            slate_body();\n        slate_texture();\n    }\n    \n    // Functional elements\n    pen_holder();\n    phone_stand();\n    card_holder();\n    support_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "gypsum",
    "openscad_code": "// Gypsum Small Office Desk Organizer\n// Realistic style, medium complexity, 3D printable desk organizer\n// Approx 120mm x 80mm x 90mm\n\nwall_thickness = 2;\ngypsum_color = \"#f0f0e8\"; // Light gypsum color\n\nmodule rounded_cube(size, radius, center=false) {\n    // Create a cube with rounded edges for gypsum look\n    hull() {\n        for(x = [0, size.x-radius*2], y = [0, size.y-radius*2], z = [0, size.z-radius*2]) {\n            translate([x + radius, y + radius, z + radius])\n            sphere(r=radius, $fn=12);\n        }\n    }\n}\n\nmodule pen_holder() {\n    // Cylindrical pen holder with slight taper\n    difference() {\n        cylinder(h=60, r1=15, r2=14, $fn=32);\n        translate([0, 0, wall_thickness])\n        cylinder(h=58, r1=13, r2=12, $fn=32);\n    }\n}\n\nmodule card_slot() {\n    // Business card holder slot\n    difference() {\n        translate([0, 0, 0])\n        rounded_cube([50, 20, 15], 2);\n        translate([wall_thickness, wall_thickness, 5])\n        rounded_cube([50-wall_thickness*2, 20-wall_thickness*2, 15], 1);\n    }\n}\n\nmodule paper_clip_tray() {\n    // Shallow tray for paper clips\n    difference() {\n        rounded_cube([40, 30, 8], 3);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n        rounded_cube([40-wall_thickness*2, 30-wall_thickness*2, 6], 2);\n    }\n}\n\nmodule note_slot() {\n    // Vertical slot for sticky notes\n    difference() {\n        translate([0, 0, 0])\n        rounded_cube([5, 70, 40], 2);\n        translate([wall_thickness, wall_thickness, 5])\n        rounded_cube([5-wall_thickness*2, 70-wall_thickness*2, 35], 1);\n    }\n}\n\nmodule base_platform() {\n    // Main base platform with rounded edges\n    rounded_cube([120, 80, 8], 4);\n}\n\nmodule support_ribs() {\n    // Structural ribs underneath for strength\n    for(x = [20, 60, 100]) {\n        translate([x, 40, -2])\n        rounded_cube([4, 76, 4], 2);\n    }\n}\n\n// Main assembly\ncolor(gypsum_color) {\n    // Base structure\n    base_platform();\n    support_ribs();\n    \n    // Pen holder on left\n    translate([20, 20, 8])\n    pen_holder();\n    \n    // Business card slot behind pen holder\n    translate([50, 10, 8])\n    card_slot();\n    \n    // Paper clip tray in center\n    translate([70, 40, 8])\n    paper_clip_tray();\n    \n    // Note slot on right\n    translate([107, 5, 8])\n    note_slot();\n    \n    // Small decorative ledge\n    translate([10, 65, 8])\n    rounded_cube([100, 10, 3], 2);\n}",
    "renders": true
  },
  {
    "office_supply": "stucco",
    "openscad_code": "// Stucco-style office desk organizer with drawer\n// Realistic proportions, 3D-printable with 2 mm walls\n\n// Overall dimensions\nlength = 120;\ndepth = 80;\nheight = 100;\nwall = 2;\n\nmodule roundedCube(size, radius, center = false) {\n    // Create a cube with rounded edges\n    translate(center ? -size/2 : [0,0,0]) {\n        hull() {\n            for (x = [radius, size.x - radius])\n                for (y = [radius, size.y - radius])\n                    for (z = [radius, size.z - radius])\n                        translate([x,y,z])\n                            sphere(r = radius);\n        }\n    }\n}\n\n// Base frame\nmodule base_frame() {\n    difference() {\n        // Outer shell\n        roundedCube([length, depth, height], 4);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            roundedCube([length - 2*wall, depth - 2*wall, height - wall], 3);\n    }\n}\n\n// Drawer compartment\nmodule drawer_box() {\n    drawer_h = 30;\n    drawer_gap = 1;\n    \n    difference() {\n        // Drawer frame\n        translate([wall, wall, height - drawer_h - wall])\n            roundedCube([length - 2*wall, depth - 2*wall - drawer_gap, drawer_h], 2);\n            \n        // Drawer cavity\n        translate([wall + 3, wall + 3, height - drawer_h - wall + 2])\n            roundedCube([length - 2*wall - 6, depth - 2*wall - drawer_gap - 6, drawer_h - 4], 1);\n    }\n}\n\n// Drawer front\nmodule drawer_front() {\n    drawer_h = 30;\n    front_thick = 4;\n    \n    translate([wall - 1, wall - 1, height - drawer_h - wall - front_thick/2])\n        roundedCube([length - 2*wall + 2, depth - 2*wall + 2, front_thick], 2);\n}\n\n// Drawer handle\nmodule drawer_handle() {\n    handle_w = 40;\n    handle_h = 8;\n    handle_d = 6;\n    \n    translate([length/2, wall/2, height - 35])\n        rotate([90, 0, 0])\n            cylinder(h = handle_w, r1 = handle_h/2, r2 = handle_h/2, center = true);\n            \n    // Handle supports\n    for (x = [length/2 - handle_w/2 + 5, length/2 + handle_w/2 - 5]) {\n        translate([x, wall/2, height - 35])\n            cylinder(h = handle_d, r = handle_h/2 + 1);\n    }\n}\n\n// Pen holder dividers\nmodule pen_holders() {\n    holder_w = 25;\n    holder_d = 60;\n    holder_h = 50;\n    \n    translate([length - holder_w - wall - 5, wall + 5, wall]) {\n        difference() {\n            // Main pen holder block\n            roundedCube([holder_w, holder_d, holder_h], 2);\n            \n            // Pen slots\n            for (i = [0:3]) {\n                translate([holder_w/2, 10 + i*15, 2])\n                    cylinder(h = holder_h - 4, r = 8);\n            }\n        }\n    }\n}\n\n// Stucco texture pattern\nmodule stucco_texture() {\n    for (i = [0:5:length-5]) {\n        for (j = [0:5:depth-5]) {\n            if ((i + j) % 10 == 0) {\n                translate([i + 2.5, j + 2.5, height - 1])\n                    sphere(r = 1.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_frame();\n    drawer_box();\n    drawer_front();\n    drawer_handle();\n    pen_holders();\n    stucco_texture();\n}",
    "renders": true
  },
  {
    "office_supply": "lath",
    "openscad_code": "// Lath Office Chair - Realistic Style, Medium Complexity\n// Dimensions: 60mm W x 65mm D x 95mm H\n\n// Chair module\nmodule chair() {\n    // Seat frame\n    union() {\n        // Front seat beam\n        translate([-28, -30, 45]) cube([56, 4, 4]);\n        \n        // Back seat beam\n        translate([-28, 26, 45]) cube([56, 4, 4]);\n        \n        // Left seat beam\n        translate([-28, -30, 45]) cube([4, 60, 4]);\n        \n        // Right seat beam\n        translate([24, -30, 45]) cube([4, 60, 4]);\n        \n        // Seat slats\n        for(y = [-20:10:20]) {\n            translate([-24, y, 49]) cube([48, 2, 2]);\n        }\n    }\n    \n    // Backrest frame\n    union() {\n        // Left backrest post\n        translate([-24, 30, 70]) cube([3, 3, 25]);\n        \n        // Right backrest post\n        translate([21, 30, 70]) cube([3, 3, 25]);\n        \n        // Top backrest beam\n        translate([-24, 30, 92]) cube([48, 3, 3]);\n        \n        // Backrest slats\n        for(z = [55:10:85]) {\n            translate([-21, 30, z]) cube([42, 2, 2]);\n        }\n    }\n    \n    // Legs\n    module leg(x_pos, y_pos) {\n        union() {\n            // Main leg\n            translate([x_pos, y_pos, 0]) cube([3, 3, 45]);\n            \n            // Leg support brace\n            translate([x_pos, y_pos, 20]) cube([3, 3, 2]);\n        }\n    }\n    \n    // Four legs\n    leg(-24, -26);\n    leg(21, -26);\n    leg(-24, 26);\n    leg(21, 26);\n    \n    // Cross supports\n    // Front-back support left\n    translate([-24, -26, 25]) cube([3, 52, 2]);\n    \n    // Front-back support right\n    translate([21, -26, 25]) cube([3, 52, 2]);\n    \n    // Side support front\n    translate([-24, -26, 25]) cube([48, 2, 2]);\n    \n    // Side support back\n    translate([-24, 26, 25]) cube([48, 2, 2]);\n    \n    // Armrests\n    module armrest(x_pos) {\n        union() {\n            // Vertical support\n            translate([x_pos, -22, 45]) cube([3, 3, 15]);\n            \n            // Horizontal armrest\n            translate([x_pos, -22, 60]) cube([3, 8, 2]);\n        }\n    }\n    \n    armrest(-24);\n    armrest(21);\n    \n    // Wheels base\n    translate([0, 0, 0]) cylinder(h=5, d1=30, d2=25);\n    \n    // Wheels\n    for(a = [0:60:300]) {\n        rotate([0, 0, a]) \n        translate([12, 0, 2]) cylinder(h=3, d=8);\n    }\n}\n\n// Render the chair\nchair();",
    "renders": true
  },
  {
    "office_supply": "nail",
    "openscad_code": "// Nail furniture item - a functional nail-shaped desk organizer\n// Dimensions in mm, wall thickness 2mm for 3D printing\n\n$fn = 32;\n\n// Overall dimensions\nnail_length = 120;\nnail_head_diameter = 40;\nnail_shank_diameter = 20;\n\n// Wall thickness\nwall = 2;\n\n// Main nail body module\nmodule nail_body() {\n    // Nail head - hollow cylinder with flat top\n    difference() {\n        cylinder(h=15, d=nail_head_diameter, center=false);\n        translate([0, 0, wall])\n            cylinder(h=13, d=nail_head_diameter-wall*2, center=false);\n    }\n    \n    // Nail shank - hollow cylinder\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h=nail_length-15, d=nail_shank_diameter, center=false);\n            translate([0, 0, wall])\n                cylinder(h=nail_length-15-wall, d=nail_shank_diameter-wall*2, center=false);\n        }\n    \n    // Tapered nail tip\n    translate([0, 0, nail_length])\n        cylinder(h=10, d1=nail_shank_diameter, d2=0, center=false);\n}\n\n// Furniture-style base plate for stability\nmodule base_plate() {\n    // Circular base with 4 holes for screws\n    difference() {\n        cylinder(h=5, d=60, center=false);\n        \n        // Screw holes pattern\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([20, 0, -1])\n                    cylinder(h=7, d=3.5, center=false);\n        }\n    }\n}\n\n// Desk organizer compartments inside nail head\nmodule organizer_compartments() {\n    // Main compartment divider\n    rotate([0, 0, 45])\n        translate([0, 0, wall])\n            cube([nail_head_diameter-wall*2, wall, 15-wall], center=true);\n    \n    // Secondary divider perpendicular\n    rotate([0, 0, -45])\n        translate([0, 0, wall])\n            cube([wall, nail_head_diameter-wall*2, 15-wall], center=true);\n    \n    // Pen holder tube\n    translate([10, 10, wall])\n        cylinder(h=13, d=12, center=false);\n    translate([10, 10, wall+2])\n        cylinder(h=9, d=10, center=false);\n}\n\n// Cable management slot\nmodule cable_slot() {\n    translate([0, -nail_shank_diameter/2 + wall/2, nail_length/2])\n        rotate([90, 0, 0])\n            cube([nail_shank_diameter-wall*2, 10, wall], center=true);\n}\n\n// Assembly\nunion() {\n    // Base plate\n    base_plate();\n    \n    // Nail body on top\n    translate([0, 0, 5])\n        nail_body();\n    \n    // Organizer inside head\n    translate([0, 0, 5])\n        organizer_compartments();\n    \n    // Cable management\n    translate([0, 0, 5])\n        cable_slot();\n}",
    "renders": true
  },
  {
    "office_supply": "screw",
    "openscad_code": "// Screw-In Bookshelf Support Peg (Realistic Style, Medium Complexity)\n// Overall height 70 mm, designed for 5 mm shelf thickness\n\nmodule screw_thread(height, radius, pitch, thread_depth=1.2, turns=5) {\n    // Main threaded shaft with realistic V-shaped threads\n    for (i = [0:1:turns*16]) {\n        angle = i * 360 / 16;\n        z = i * pitch / 16;\n        translate([0,0,z]) \n            rotate([0,0,angle])\n                cube([radius*2+thread_depth*2, thread_depth, pitch/16+0.1], center=true);\n    }\n}\n\nmodule screw_head(diameter, height, drive_width, drive_depth) {\n    // Pan head with slight dome top\n    union() {\n        // Main head cylinder\n        cylinder(h=height*0.7, d=diameter, $fn=32);\n        \n        // Dome top\n        translate([0,0,height*0.7])\n            scale([1,1,0.7])\n                sphere(d=diameter, $fn=32);\n        \n        // Phillips drive recess\n        translate([0,0,height-drive_depth-1])\n            cube([drive_width, drive_width, drive_depth+1], center=true);\n        translate([0,0,height-drive_depth-1])\n            cube([drive_width, drive_width, drive_depth+1], center=true);\n    }\n}\n\nmodule collar_support(diameter, height) {\n    // Collar that sits against shelf for support\n    cylinder(h=height, d=diameter, $fn=32);\n}\n\nmodule shelf_contact_pad(diameter, thickness) {\n    // Wide pad that makes contact with shelf bottom\n    cylinder(h=thickness, d=diameter, $fn=32);\n    \n    // Reinforcement ribs underneath\n    for (i = [0:45:315]) {\n        rotate([0,0,i])\n            translate([diameter/4, 0, -0.1])\n                cube([diameter/2, 3, thickness+0.2], center=true);\n    }\n}\n\nmodule chamfer_edge(height) {\n    // 45-degree chamfer at thread tip\n    rotate_extrude(angle=360, $fn=32)\n        polygon(points=[[0,0],[2,0],[0,2]]);\n}\n\n// Main assembly\nunion() {\n    // Threaded shaft (M6 equivalent)\n    screw_thread(height=35, radius=3, pitch=2.5, turns=14);\n    \n    // Collar against shelf\n    translate([0,0,35])\n        collar_support(diameter=12, height=3);\n    \n    // Shelf contact pad\n    translate([0,0,38])\n        shelf_contact_pad(diameter=18, thickness=2);\n    \n    // Screw head\n    translate([0,0,40])\n        screw_head(diameter=14, height=8, drive_width=4, drive_depth=3);\n    \n    // Thread tip chamfer\n    translate([0,0,-0.1])\n        scale([3,3,1])\n            chamfer_edge(2);\n}\n\n// Optional: Small notch for alignment\ntranslate([0,7,42])\n    cube([1,1,6], center=true);\n\n// Print orientation support (removable)\ntranslate([0,0,-5])\n    cylinder(h=3, d=6, $fn=16);",
    "renders": true
  },
  {
    "office_supply": "washer",
    "openscad_code": "// Realistic 3D printable washer furniture model\n// Medium complexity, 85mm x 85mm x 90mm overall\n\n$fn = 50;\n\n// Main washer body\nmodule washer_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 85, r = 40);\n        \n        // Inner hollow space\n        translate([0, 0, -1])\n            cylinder(h = 87, r = 36);\n        \n        // Top loading opening\n        translate([0, 0, 82])\n            cylinder(h = 5, r = 25);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([0, 40, 65])\n        difference() {\n            // Panel base\n            cube([80, 8, 20], center = true);\n            \n            // Display recess\n            translate([0, 0, 8])\n                cube([30, 6, 8], center = true);\n            \n            // Button holes\n            for (i = [-1:1])\n                translate([i * 15, 0, -2])\n                    cylinder(h = 10, r = 3);\n        }\n}\n\n// Washer door\nmodule door() {\n    rotate([0, 0, 0])\n        translate([0, 0, 5])\n            difference() {\n                // Door frame\n                cylinder(h = 8, r = 35);\n                \n                // Window\n                translate([0, 0, -1])\n                    cylinder(h = 10, r = 30);\n                \n                // Door handle\n                translate([30, 0, 4])\n                    rotate([90, 0, 0])\n                        cylinder(h = 15, r = 3);\n            }\n}\n\n// Legs for stability\nmodule legs() {\n    for (i = [[-30, -30], [30, -30], [-30, 30], [30, 30]])\n        translate([i[0], i[1], -8])\n            cylinder(h = 10, r = 4);\n}\n\n// Back panel with connections\nmodule back_panel() {\n    translate([0, -40, 40])\n        difference() {\n            // Panel base\n            cube([75, 5, 50], center = true);\n            \n            // Water inlet\n            translate([-20, 0, 15])\n                cylinder(h = 7, r = 5);\n            \n            // Drain outlet\n            translate([20, 0, -15])\n                cylinder(h = 7, r = 6);\n        }\n}\n\n// Top surface details\nmodule top_details() {\n    // Detergent drawer\n    translate([25, 0, 86])\n        difference() {\n            cube([30, 25, 6], center = true);\n            translate([0, 0, -1])\n                cube([28, 23, 4], center = true);\n        }\n    \n    // Hinge covers\n    for (i = [-1, 1])\n        translate([i * 25, 0, 86])\n            cylinder(h = 3, r = 5);\n}\n\n// Main assembly\nunion() {\n    washer_body();\n    control_panel();\n    door();\n    legs();\n    back_panel();\n    top_details();\n}",
    "renders": true
  },
  {
    "office_supply": "rivet",
    "openscad_code": "// Rivet Chair – office-style low-back stool built from rivet heads\n// Overall size ~100 mm tall, printable in one piece\n\n// Helper module for rounded cylinders (rivet heads)\nmodule rivet_head(r, h) {\n    // flanged cylinder + shallow dome\n    union() {\n        cylinder(r = r, h = h, $fn = 32);\n        translate([0, 0, h])\n            scale([1, 1, 0.3])\n                sphere(r = r, $fn = 32);\n    }\n}\n\n// Main seat pan – a large rivet head\nmodule seat() {\n    rivet_head(r = 26, h = 6);\n}\n\n// Central support post – hollow tube for weight saving\nmodule post() {\n    difference() {\n        cylinder(r = 10, h = 65, $fn = 32);        // outer tube\n        translate([0, 0, 2])\n            cylinder(r = 8, h = 61, $fn = 32);     // inner void\n    }\n}\n\n// Four-leg base, each leg is a stretched rivet shaft\nmodule legs() {\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([22, 0, -8])\n                rotate([90, 0, 0])\n                    cylinder(r = 6, h = 40, $fn = 32); // leg\n    }\n}\n\n// Reinforcement ring between legs (realistic structural detail)\nmodule ring() {\n    difference() {\n        cylinder(r = 34, h = 4, $fn = 64);         // ring body\n        translate([0, 0, -1])\n            cylinder(r = 30, h = 6, $fn = 64);     // inner cut\n    }\n}\n\n// Optional small ribs on underside for stiffness\nmodule ribs() {\n    for (a = [45:90:315]) {\n        rotate([0, 0, a])\n            translate([0, 0, -1])\n                cube([30, 2, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat top\n    seat();\n    \n    // Post attaches under seat\n    translate([0, 0, -65])\n        post();\n    \n    // Leg assembly under post\n    translate([0, 0, -73])\n        legs();\n    \n    // Ring connects legs\n    translate([0, 0, -73])\n        ring();\n    \n    // Underside ribs\n    translate([0, 0, -75])\n        ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "stud",
    "openscad_code": "// Office Chair Stud - Realistic style with medium complexity\n// A sturdy 5-star base with casters and gas cylinder\n\n// Dimensions\nstud_diameter = 8;\nstud_height = 10;\ncaster_diameter = 15;\ncaster_width = 8;\nleg_length = 60;\nleg_width = 12;\nleg_height = 8;\ncenter_hub_diameter = 25;\ncenter_hub_height = 12;\ngas_cylinder_diameter = 12;\ngas_cylinder_height = 40;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Caster module with wheel and fork\nmodule caster() {\n    // Fork\n    difference() {\n        // Main fork body\n        translate([0, 0, caster_width/2]) \n            cube([caster_width, caster_width, caster_width], center=true);\n        \n        // Wheel cutout\n        translate([0, 0, 0]) \n            rotate([0, 90, 0]) \n            cylinder(d=caster_diameter, h=caster_width+1, center=true, $fn=20);\n    }\n    \n    // Axle pin\n    translate([0, 0, 0]) \n        rotate([0, 90, 0]) \n        cylinder(d=3, h=caster_width, center=true, $fn=8);\n    \n    // Wheel\n    translate([0, 0, -caster_width/2-1]) \n        rotate([0, 90, 0]) \n        cylinder(d=caster_diameter, h=caster_width-2, center=true, $fn=20);\n}\n\n// Leg with caster\nmodule leg() {\n    // Main leg\n    difference() {\n        // Solid leg\n        cube([leg_length, leg_width, leg_height], center=false);\n        \n        // Hollow center\n        translate([wall_thickness, wall_thickness, wall_thickness]) \n            cube([leg_length-wall_thickness*2, leg_width-wall_thickness*2, leg_height-wall_thickness*2], center=false);\n    }\n    \n    // Caster mount\n    translate([leg_length-caster_width/2, leg_width/2, -caster_width/2]) \n        caster();\n}\n\n// Center hub with gas cylinder mount\nmodule center_hub() {\n    difference() {\n        // Main hub\n        cylinder(d=center_hub_diameter, h=center_hub_height, center=true, $fn=30);\n        \n        // Hollow center\n        cylinder(d=center_hub_diameter-wall_thickness*2, h=center_hub_height+1, center=true, $fn=30);\n        \n        // Gas cylinder hole\n        cylinder(d=gas_cylinder_diameter, h=center_hub_height+2, center=true, $fn=20);\n    }\n    \n    // Reinforcement ribs\n    for (i = [0:5]) {\n        rotate([0, 0, i*60]) \n            translate([center_hub_diameter/2-leg_width/2, -leg_width/2, 0]) \n            cube([leg_width, leg_width, center_hub_height], center=true);\n    }\n}\n\n// Gas cylinder\nmodule gas_cylinder() {\n    difference() {\n        // Main cylinder\n        cylinder(d=gas_cylinder_diameter, h=gas_cylinder_height, center=false, $fn=20);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness]) \n            cylinder(d=gas_cylinder_diameter-wall_thickness*2, h=gas_cylinder_height-wall_thickness, center=false, $fn=20);\n    }\n    \n    // Top collar\n    translate([0, 0, gas_cylinder_height-5]) \n        cylinder(d=gas_cylinder_diameter+4, h=5, center=false, $fn=20);\n}\n\n// Main assembly\n// Base hub\ncenter_hub();\n\n// Five legs with casters\nfor (i = [0:4]) {\n    rotate([0, 0, i*72]) \n        translate([0, center_hub_diameter/2-leg_width/2, 0]) \n        leg();\n}\n\n// Gas cylinder mount\ntranslate([0, 0, center_hub_height/2+gas_cylinder_height/2]) \n    gas_cylinder();",
    "renders": true
  },
  {
    "office_supply": "joist",
    "openscad_code": "// Joist Furniture - Office Support Beam\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\nlength = 120;\nwidth = 20;\nheight = 30;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main joist body - hollow rectangular beam\nmodule joist_body() {\n    difference() {\n        // Outer shell\n        cube([length, width, height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall/2])\n        cube([length-2*wall, width-2*wall, height-wall], center=true);\n    }\n}\n\n// Reinforcement ribs inside the joist\nmodule internal_ribs() {\n    for (i = [-length/2+10 : 20 : length/2-10]) {\n        translate([i, 0, 0])\n        cube([wall, width-2*wall, height-wall], center=true);\n    }\n}\n\n// End caps with connector joints\nmodule end_cap(position) {\n    translate([position, 0, 0]) {\n        // Main cap\n        cube([wall*3, width, height], center=true);\n        \n        // Connector tongue (mortise and tenon style)\n        translate([position > 0 ? wall*1.5 : -wall*1.5, 0, 0])\n        cube([wall*2, width-6, height-6], center=true);\n        \n        // Screw holes\n        for (y = [-width/3, width/3]) {\n            for (z = [-height/3, height/3]) {\n                translate([position > 0 ? wall*2 : -wall*2, y, z])\n                cylinder(h=wall*4, r=1.5, center=true, $fn=16);\n            }\n        }\n    }\n}\n\n// Support brackets\nmodule support_brackets() {\n    // Top bracket\n    translate([0, 0, height/2+wall/2])\n    cube([length-20, wall*3, wall*2], center=true);\n    \n    // Bottom bracket\n    translate([0, 0, -height/2-wall/2])\n    cube([length-20, wall*3, wall*2], center=true);\n}\n\n// Cable management holes\nmodule cable_holes() {\n    for (i = [-length/2+20 : 25 : length/2-20]) {\n        translate([i, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=width+1, r=3, center=true, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structural elements\n    joist_body();\n    internal_ribs();\n    \n    // End connectors\n    end_cap(length/2+wall);\n    end_cap(-length/2-wall);\n    \n    // Mounting hardware\n    support_brackets();\n    \n    // Functional details\n    cable_holes();\n}",
    "renders": true
  },
  {
    "office_supply": "beam",
    "openscad_code": "// Realistic Office Beam Furniture - Structural Support Element\n// Dimensions: 120mm x 30mm x 30mm (suitable for 3D printing)\n\n// Wall thickness constant for 3D printing\nwall_thickness = 2;\n\n// Main beam core with hollow center\nmodule beam_core(length, width, height) {\n    difference() {\n        // Outer box\n        cube([length, width, height], center=true);\n        // Inner hollow\n        translate([0, 0, 0])\n            cube([length-wall_thickness*2, width-wall_thickness*2, height-wall_thickness*2], center=true);\n    }\n}\n\n// Reinforcement ribs inside the beam\nmodule reinforcement_ribs(length, width, height) {\n    rib_spacing = 20;\n    for(i = [-length/2+10 : rib_spacing : length/2-10]) {\n        translate([i, 0, 0])\n            cube([wall_thickness, width-wall_thickness*2, height-wall_thickness*2], center=true);\n    }\n}\n\n// Mounting plates with screw holes\nmodule mounting_plate(length, width, height, position) {\n    plate_width = 40;\n    plate_height = 6;\n    screw_hole_radius = 2.5;\n    \n    translate([position, 0, height/2+plate_height/2])\n    union() {\n        // Mounting plate base\n        cube([plate_width, width+4, plate_height], center=true);\n        \n        // Screw holes (4 corners)\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*15, y*10, 0])\n                    cylinder(h=plate_height+1, r=screw_hole_radius, center=true, $fn=20);\n            }\n        }\n        \n        // Reinforcement gussets\n        translate([0, width/2+2, -plate_height/2])\n            cube([plate_width, 2, plate_height], center=true);\n        translate([0, -width/2-2, -plate_height/2])\n            cube([plate_width, 2, plate_height], center=true);\n    }\n}\n\n// Structural webbing pattern\nmodule webbing_pattern(length, width, height) {\n    web_thickness = 1.5;\n    web_spacing = 10;\n    \n    // Diagonal webs on top\n    for(i = [-length/2 : web_spacing : length/2-5]) {\n        translate([i+5, 0, height/2-wall_thickness/2])\n            rotate([0, 45, 0])\n                cube([web_spacing*1.5, width-wall_thickness*2, web_thickness], center=true);\n    }\n    \n    // Diagonal webs on bottom\n    for(i = [-length/2 : web_spacing : length/2-5]) {\n        translate([i+5, 0, -height/2+wall_thickness/2])\n            rotate([0, -45, 0])\n                cube([web_spacing*1.5, width-wall_thickness*2, web_thickness], center=true);\n    }\n}\n\n// Assembly holes for connectors\nmodule connector_holes(length, width, height) {\n    hole_radius = 4;\n    hole_depth = 8;\n    \n    // Holes on each end for connecting beams\n    for(end = [-1, 1]) {\n        translate([end*length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=hole_depth, r=hole_radius, center=true, $fn=20);\n    }\n    \n    // Side holes for perpendicular connections\n    for(side = [-1, 1]) {\n        translate([0, side*width/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=hole_depth, r=hole_radius, center=true, $fn=20);\n    }\n}\n\n// Final assembly\nmodule beam_furniture() {\n    beam_length = 120;\n    beam_width = 30;\n    beam_height = 30;\n    \n    union() {\n        // Main structural beam\n        beam_core(beam_length, beam_width, beam_height);\n        \n        // Internal reinforcement\n        reinforcement_ribs(beam_length, beam_width, beam_height);\n        \n        // Mounting plates at both ends\n        mounting_plate(beam_length, beam_width, beam_height, beam_length/2-20);\n        mounting_plate(beam_length, beam_width, beam_height, -beam_length/2+20);\n        \n        // Structural webbing for strength\n        webbing_pattern(beam_length, beam_width, beam_height);\n    }\n    \n    // Connector holes (subtracted)\n    difference() {\n        children();\n        connector_holes(beam_length, beam_width, beam_height);\n    }\n}\n\n// Render the beam\nbeam_furniture();",
    "renders": true
  },
  {
    "office_supply": "rafter",
    "openscad_code": "// Realistic rafter-style desk organizer\n// Dimensions in mm, designed for 3D printing\n\n$fn = 32;\n\n// Overall dimensions\nlength = 120;\nwidth = 60;\nheight = 40;\nwall_thickness = 2;\n\n// Rafter beam dimensions\nbeam_width = 8;\nbeam_height = 6;\nnum_rafters = 7;\n\n// Pen holder\npen_diameter = 12;\npen_depth = 35;\n\n// Card slot\ncard_slot_width = 80;\ncard_slot_thickness = 3;\n\nmodule rafter_beam(x_pos, y_pos) {\n    // Main beam body\n    translate([x_pos, y_pos, 0])\n        cube([beam_width, width, beam_height]);\n    \n    // Support bracket\n    translate([x_pos + beam_width - wall_thickness, y_pos, 0])\n        cube([wall_thickness, width, height/3]);\n}\n\nmodule pen_holder() {\n    difference() {\n        // Outer cube\n        translate([0, 0, 0])\n            cube([25, 25, pen_depth]);\n        \n        // Inner cylindrical hole\n        translate([12.5, 12.5, 0])\n            cylinder(h = pen_depth + 1, r = pen_diameter/2 + wall_thickness);\n        \n        // Chamfer bottom edges\n        translate([wall_thickness, wall_thickness, -0.1])\n            cube([25 - 2*wall_thickness, 25 - 2*wall_thickness, wall_thickness + 0.2]);\n    }\n}\n\nmodule card_slot() {\n    difference() {\n        // Main block\n        translate([0, 0, height - 10])\n            cube([card_slot_width, card_slot_thickness, 10]);\n        \n        // Slot\n        translate([5, -0.1, height - 8])\n            cube([card_slot_width - 10, card_slot_thickness + 0.2, 8]);\n    }\n}\n\nmodule support_frame() {\n    // Front frame\n    translate([0, 0, 0])\n        cube([wall_thickness, width, height]);\n    \n    // Back frame\n    translate([length - wall_thickness, 0, 0])\n        cube([wall_thickness, width, height]);\n    \n    // Side frames\n    translate([wall_thickness, 0, 0])\n        cube([length - 2*wall_thickness, wall_thickness, height]);\n    \n    translate([wall_thickness, width - wall_thickness, 0])\n        cube([length - 2*wall_thickness, wall_thickness, height]);\n}\n\n// Base structure\nunion() {\n    // Bottom plate\n    translate([0, 0, 0])\n        cube([length, width, wall_thickness]);\n    \n    // Support frame\n    support_frame();\n    \n    // Rafter beams\n    for (i = [0 : num_rafters - 1]) {\n        rafter_beam(i * (length - beam_width) / (num_rafters - 1), 0);\n    }\n    \n    // Pen holder on right side\n    translate([length - 30, 5, wall_thickness])\n        pen_holder();\n    \n    // Business card slot\n    translate([(length - card_slot_width)/2, width - card_slot_thickness - 5, 0])\n        card_slot();\n    \n    // Reinforcement ribs\n    for (i = [1 : 3]) {\n        translate([i * length/4, wall_thickness, wall_thickness])\n            cube([wall_thickness, width - 2*wall_thickness, height/2]);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "truss",
    "openscad_code": "// Truss Table - medium complexity realistic style\n// Dimensions: 120mm x 60mm x 45mm\n\n$fn = 32;\n\n// Main table dimensions\ntable_width = 120;\ntable_depth = 60;\ntable_height = 45;\nwall_thickness = 2;\n\n// Truss member dimensions\ntruss_width = 4;\ntruss_height = 3;\n\n// Table top\nmodule table_top() {\n    difference() {\n        // Main top\n        cube([table_width, table_depth, wall_thickness]);\n        \n        // Chamfer edges\n        translate([0, 0, -0.1])\n        cube([table_width, wall_thickness, wall_thickness+0.2]);\n        translate([0, table_depth-wall_thickness, -0.1])\n        cube([table_width, wall_thickness, wall_thickness+0.2]);\n    }\n}\n\n// Truss joint\nmodule joint() {\n    difference() {\n        sphere(truss_width/2 + 1);\n        // Remove inner for wall thickness\n        sphere(truss_width/2);\n    }\n}\n\n// Truss member with joints\nmodule truss_member(length, angle) {\n    translate([0, 0, 0])\n    rotate([0, 0, angle])\n    union() {\n        // Main beam\n        cube([length, truss_width, truss_height]);\n        \n        // Joints at ends\n        translate([0, truss_width/2, truss_height/2])\n        joint();\n        translate([length, truss_width/2, truss_height/2])\n        joint();\n    }\n}\n\n// Side truss frame\nmodule side_truss(height, width) {\n    // Bottom beam\n    translate([0, 0, 0])\n    cube([width, truss_width, truss_height]);\n    \n    // Top beam\n    translate([0, 0, height])\n    cube([width, truss_width, truss_height]);\n    \n    // Vertical supports\n    translate([0, 0, 0])\n    cube([truss_width, truss_width, height]);\n    translate([width-truss_width, 0, 0])\n    cube([truss_width, truss_width, height]);\n    \n    // Diagonal bracing\n    translate([truss_width, 0, 0])\n    rotate([0, -90, 0])\n    rotate([0, 0, -atan(height/(width-2*truss_width))])\n    cube([sqrt(pow(height,2)+pow(width-2*truss_width,2)), truss_width, truss_height]);\n    \n    translate([width-truss_width, 0, height])\n    rotate([0, -90, 0])\n    rotate([0, 0, atan(height/(width-2*truss_width))])\n    cube([sqrt(pow(height,2)+pow(width-2*truss_width,2)), truss_width, truss_height]);\n}\n\n// Leg assembly\nmodule table_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, wall_thickness]) {\n        // Front truss\n        rotate([0, 90, 0])\n        side_truss(table_height-wall_thickness, table_depth-2*truss_width);\n        \n        // Side truss\n        translate([0, 0, 0])\n        side_truss(table_height-wall_thickness, table_width/2-2*truss_width);\n        \n        // Cross bracing\n        translate([truss_width, 0, table_height/2-wall_thickness])\n        rotate([90, 0, atan((table_width/2-2*truss_width)/(table_depth-2*truss_width))])\n        cube([sqrt(pow(table_width/2-2*truss_width,2)+pow(table_depth-2*truss_width,2)), truss_width, truss_height]);\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, table_height-wall_thickness])\n    table_top();\n    \n    // Four legs\n    table_leg(truss_width, truss_width);\n    table_leg(table_width/2+truss_width, truss_width);\n    table_leg(truss_width, table_depth/2+truss_width);\n    table_leg(table_width/2+truss_width, table_depth/2+truss_width);\n    \n    // Lower support frame\n    translate([truss_width, truss_width, wall_thickness])\n    cube([table_width-2*truss_width, truss_width, truss_height]);\n    translate([truss_width, table_depth-2*truss_width, wall_thickness])\n    cube([table_width-2*truss_width, truss_width, truss_height]);\n    translate([truss_width, truss_width, wall_thickness])\n    cube([truss_width, table_depth-2*truss_width, truss_height]);\n    translate([table_width-2*truss_width, truss_width, wall_thickness])\n    cube([truss_width, table_depth-2*truss_width, truss_height]);\n}",
    "renders": true
  },
  {
    "office_supply": "flashing",
    "openscad_code": "// Flashing - Office Desk Grommet Cable Management\n// A realistic 3D printable cable grommet for office desks\n// Dimensions: 80mm diameter, 25mm height\n\n$fn = 32;\n\n// Main parameters\ngrommet_diameter = 80;\ngrommet_height = 25;\nwall_thickness = 2;\nflange_thickness = 3;\nflange_extension = 5;\ncable_hole_radius = 15;\ngrip_depth = 2;\ngrip_width = 8;\n\n// Main cylindrical body\nmodule grommet_body() {\n    // Outer cylinder\n    cylinder(h = grommet_height, r = grommet_diameter/2, center = false);\n    \n    // Top flange\n    translate([0, 0, grommet_height - flange_thickness])\n        cylinder(h = flange_thickness, r = (grommet_diameter/2) + flange_extension, center = false);\n    \n    // Inner hollow - cable passage\n    translate([0, 0, -1])\n        cylinder(h = grommet_height + 2, r = (grommet_diameter/2) - wall_thickness, center = false);\n}\n\n// Cable entry port\nmodule cable_port() {\n    // Main cable hole\n    translate([0, (grommet_diameter/2) - wall_thickness - cable_hole_radius - 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h = grommet_diameter/2, r1 = cable_hole_radius, r2 = cable_hole_radius - 2, center = false);\n    \n    // Cable hole through wall\n    translate([0, (grommet_diameter/2) - wall_thickness - cable_hole_radius - 5, grommet_height/2])\n        rotate([90, 0, 0])\n            cylinder(h = wall_thickness * 2, r = cable_hole_radius, center = true);\n}\n\n// Grip ridges on top flange\nmodule grip_ridges() {\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([(grommet_diameter/2) + flange_extension - grip_width - 1, -grip_width/2, grommet_height - flange_thickness])\n                cube([grip_width, grip_width, grip_depth]);\n    }\n}\n\n// Structural ribs inside\nmodule internal_ribs() {\n    // Vertical support ribs\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([0, (grommet_diameter/2) - wall_thickness - 10, 0])\n                cube([wall_thickness, 10, grommet_height - flange_thickness], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main grommet structure\n    difference() {\n        grommet_body();\n        // Remove cable port from main body\n        cable_port();\n    }\n    \n    // Grip ridges on top\n    grip_ridges();\n    \n    // Internal structural ribs\n    internal_ribs();\n}\n\n// Optional desk surface cutout indicator (comment out for printing)\n// %translate([0, 0, -1])\n//     cylinder(h = 2, r = (grommet_diameter/2) - wall_thickness, center = false);",
    "renders": true
  },
  {
    "office_supply": "sealant",
    "openscad_code": "// Sealant Furniture - Office Supply Organizer\n// Realistic medium-complexity design\n\n$fn = 50;\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 15;\n\n// Sealant bottle dimensions\nbottle_diameter = 25;\nbottle_height = 120;\nnozzle_length = 35;\nnozzle_diameter = 5;\n\n// Furniture structure\nmodule sealant_furniture() {\n    // Base platform\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded edges\n        translate([base_width/2-5, base_depth/2-5, base_height/2])\n            cylinder(h=base_height+1, r=5, center=true);\n        translate([-base_width/2+5, base_depth/2-5, base_height/2])\n            cylinder(h=base_height+1, r=5, center=true);\n        translate([base_width/2-5, -base_depth/2+5, base_height/2])\n            cylinder(h=base_height+1, r=5, center=true);\n        translate([-base_width/2+5, -base_depth/2+5, base_height/2])\n            cylinder(h=base_height+1, r=5, center=true);\n    }\n    \n    // Bottle holder structure\n    difference() {\n        // Main holder\n        translate([0, 0, base_height+bottle_height/2])\n            cube([35, 35, bottle_height], center=true);\n        \n        // Bottle cavity\n        translate([0, 0, base_height+bottle_height/2])\n            cylinder(h=bottle_height+2, d=bottle_diameter+4, center=true);\n        \n        // Front opening for nozzle\n        translate([0, -17, base_height+bottle_height/2])\n            cube([bottle_diameter+4, 20, bottle_height], center=true);\n    }\n    \n    // Support braces\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*25, y*20, base_height/2+bottle_height/2])\n                cube([8, 8, bottle_height+base_height], center=true);\n        }\n    }\n    \n    // Accessory tray\n    difference() {\n        // Tray base\n        translate([base_width/2-20, 0, base_height+5])\n            cube([30, base_depth-10, 10], center=true);\n        \n        // Tray cavity\n        translate([base_width/2-20, 0, base_height+10])\n            cube([26, base_depth-14, 8], center=true);\n    }\n    \n    // Cable management hooks\n    for(i = [0:1:3]) {\n        translate([-base_width/2+10, -base_depth/2+15+i*10, base_height+8])\n            difference() {\n                cylinder(h=8, d=6, center=true);\n                translate([0, 0, -1])\n                    cylinder(h=10, d=3, center=true);\n            }\n    }\n    \n    // Non-slip pads\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*30, y*20, base_height-1])\n                cylinder(h=2, d=10, center=true);\n        }\n    }\n    \n    // Label holder\n    translate([base_width/2-15, base_depth/2-10, base_height+20])\n        difference() {\n            cube([20, 2, 8], center=true);\n            translate([0, 0, 0])\n                cube([18, 1.5, 6], center=true);\n        }\n}\n\n// Generate the furniture\nsealant_furniture();",
    "renders": true
  },
  {
    "office_supply": "caulk",
    "openscad_code": "// Office Caulk Tube Holder - Realistic Style\n// Dimensions based on standard 300ml caulk tube\n\n$fn = 50;\n\n// Overall dimensions\nholder_length = 100;\nholder_width = 55;\nholder_height = 70;\nwall_thickness = 2;\n\n// Tube cavity dimensions\ntube_diameter = 48;\ntube_length = 95;\n\n// Base dimensions\nbase_thickness = 8;\nbase_width = 65;\n\n// Handle dimensions\nhandle_width = 15;\nhandle_height = 40;\nhandle_thickness = 3;\n\n// Support rib dimensions\nrib_count = 3;\nrib_thickness = 2;\n\nmodule base() {\n    difference() {\n        // Main base\n        translate([-base_width/2, -base_width/2, 0])\n            cube([base_width, base_width, base_thickness]);\n        \n        // Screw holes for mounting\n        for(x = [-20, 20]) {\n            for(y = [-20, 20]) {\n                translate([x, y, -1])\n                    cylinder(h = base_thickness + 2, r = 2.5);\n            }\n        }\n    }\n}\n\nmodule tube_holder() {\n    difference() {\n        // Main body\n        translate([0, 0, base_thickness])\n            cube([holder_width, holder_length, holder_height], center = true);\n        \n        // Tube cavity\n        rotate([90, 0, 0])\n            translate([0, 0, base_thickness + holder_height/2])\n                cylinder(h = tube_length, r = tube_diameter/2 + 1);\n        \n        // Front opening\n        translate([0, -holder_length/2 - 1, base_thickness + holder_height/2])\n            cube([tube_diameter + 2, 2, tube_diameter + 2], center = true);\n        \n        // Top opening for nozzle\n        translate([0, holder_length/2 - 20, base_thickness + holder_height + 1])\n            cube([20, 40, 2], center = true);\n    }\n}\n\nmodule support_ribs() {\n    for(i = [-1:1]) {\n        translate([i * 20, 0, base_thickness + wall_thickness])\n            cube([rib_thickness, holder_length - wall_thickness*2, holder_height - wall_thickness*2]);\n    }\n}\n\nmodule handle() {\n    translate([holder_width/2 + handle_thickness/2, 0, base_thickness + holder_height - handle_height/2])\n        rotate([0, 90, 0])\n            cylinder(h = handle_width, r = handle_thickness/2);\n    \n    // Handle supports\n    translate([holder_width/2, -handle_width/2, base_thickness + holder_height - handle_height])\n        cube([handle_thickness, handle_width, handle_height/3]);\n    \n    translate([holder_width/2, -handle_width/2, base_thickness + holder_height - handle_height/3])\n        cube([handle_thickness, handle_width, handle_height/3]);\n}\n\nmodule nozzle_rest() {\n    // Small shelf for nozzle when not in use\n    translate([0, holder_length/2 + 10, base_thickness + holder_height - 10])\n        cube([20, 15, 2], center = true);\n    \n    // Support bracket\n    translate([-10, holder_length/2 + 17, base_thickness + holder_height - 5])\n        cube([2, 2, 5]);\n    \n    translate([10, holder_length/2 + 17, base_thickness + holder_height - 5])\n        cube([2, 2, 5]);\n}\n\n// Assembly\nunion() {\n    base();\n    tube_holder();\n    support_ribs();\n    handle();\n    nozzle_rest();\n    \n    // Drainage holes\n    translate([0, 0, base_thickness + 5])\n        cylinder(h = 2, r = 3);\n    \n    translate([-15, 0, base_thickness + 5])\n        cylinder(h = 2, r = 3);\n    \n    translate([15, 0, base_thickness + 5])\n        cylinder(h = 2, r = 3);\n}",
    "renders": true
  },
  {
    "office_supply": "adhesive",
    "openscad_code": "// Office Desk Tape Dispenser - Realistic Style, Medium Complexity\n// Dimensions: ~120mm x 60mm x 45mm (suitable for 3D printing)\n\n$fn = 32;  // Smooth curves\n\n// Main body parameters\nbase_width = 120;\nbase_depth = 60;\nbase_height = 8;\n\n// Tape roll cavity\ntape_diameter = 75;\ntape_width = 25;\ntape_core = 25;\n\n// Cutter assembly\ncutter_width = 45;\ncutter_height = 12;\ncutter_angle = 30;\n\n// Handle details\nhandle_width = 15;\nhandle_height = 20;\nhandle_thickness = 3;\n\n// Weight cavity for stability\nweight_cavity_width = 30;\nweight_cavity_depth = 20;\n\n// Main module for the tape dispenser\nmodule tape_dispenser() {\n    // Base structure with rounded edges\n    difference() {\n        // Main base block\n        union() {\n            // Base platform\n            translate([-base_width/2, -base_depth/2, 0])\n                cube([base_width, base_depth, base_height]);\n            \n            // Rounded front edge\n            translate([base_width/2 - base_depth/2, 0, 0])\n                cylinder(h=base_height, r=base_depth/2);\n            \n            // Cutter support block\n            translate([base_width/2 - cutter_width/2, -base_depth/2, base_height])\n                cube([cutter_width, cutter_height, base_depth]);\n        }\n        \n        // Tape roll cavity\n        translate([0, 0, -1])\n            cylinder(h=tape_width+2, r=tape_diameter/2 + 1);\n        \n        // Tape core hole\n        translate([0, 0, -1])\n            cylinder(h=tape_width+2, r=tape_core/2);\n        \n        // Weight cavity (for adding coins/metal)\n        translate([base_width/4, 0, base_height/2])\n            cube([weight_cavity_width, weight_cavity_depth, base_height/2], center=true);\n    }\n    \n    // Cutter blade assembly\n    difference() {\n        // Cutter base\n        translate([base_width/2 - cutter_width/2, -base_depth/2 - cutter_height/4, base_height])\n            cube([cutter_width, cutter_height, base_depth/2]);\n        \n        // Serrated edge detail\n        for(i=[0:5]) {\n            translate([base_width/2 - cutter_width/2 + i*8, -base_depth/2 - cutter_height/4, base_height + base_depth/2])\n                cube([1, cutter_height, 2]);\n        }\n    }\n    \n    // Angled cutter top\n    rotate([0, 0, -cutter_angle])\n        translate([base_width/2 - 5, -base_depth/2 - cutter_height, base_height + 5])\n            cube([cutter_width/2, cutter_height, base_depth/4]);\n    \n    // Handle structure\n    union() {\n        // Handle base\n        translate([-base_width/2 + 10, -handle_width/2, base_height])\n            cube([handle_width, handle_width, handle_height]);\n        \n        // Handle grip\n        translate([-base_width/2 + 10, -handle_thickness/2, base_height + handle_height - handle_thickness])\n            cube([handle_width, handle_thickness, handle_thickness]);\n    }\n    \n    // Non-slip pads (bottom)\n    translate([-base_width/3, -base_depth/3, -0.5])\n        cube([20, 15, 1]);\n    translate([base_width/3 - 20, -base_depth/3, -0.5])\n        cube([20, 15, 1]);\n    translate([-base_width/3, base_depth/3 - 15, -0.5])\n        cube([20, 15, 1]);\n    translate([base_width/3 - 20, base_depth/3 - 15, -0.5])\n        cube([20, 15, 1]);\n    \n    // Tape guide rails\n    for(side=[-1, 1]) {\n        translate([0, side * (tape_width/2 + 1), base_height - 2])\n            cube([base_width - 10, 2, 5]);\n    }\n}\n\n// Create the dispenser\ntape_dispenser();",
    "renders": true
  },
  {
    "office_supply": "epoxy",
    "openscad_code": "// Epoxy Office Desk Paperclip Holder\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main dimensions (in mm)\nbase_width = 80;\nbase_depth = 40;\nbase_height = 8;\nwall_thickness = 2;\nepoxy_fill_height = 12;\nleg_height = 12;\nleg_width = 3;\n\n// Epoxy resin color\nepoxy_color = \"SkyBlue\";\n\n// Clear epoxy simulation\nmodule epoxy_resin() {\n    color(epoxy_color, 0.6) render() difference() {\n        // Main epoxy fill\n        translate([0, 0, base_height + epoxy_fill_height/2])\n            cube([base_width - wall_thickness*2, base_depth - wall_thickness*2, epoxy_fill_height], center=true);\n        \n        // Paperclip slot\n        translate([0, 0, base_height + epoxy_fill_height + 1])\n            cube([base_width - 20, base_depth - 10, 2], center=true);\n    }\n}\n\n// Base structure with walls\nmodule base_structure() {\n    difference() {\n        // Main base block\n        cube([base_width, base_depth, base_height]);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n            cube([base_width - wall_thickness*2, base_depth - wall_thickness*2, base_height]);\n    }\n}\n\n// Support legs (4 legs)\nmodule support_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, -leg_height/2])\n        cube([leg_width, leg_width, leg_height], center=true);\n}\n\n// Wood grain texture pattern\nmodule wood_grain() {\n    for (i = [-40:5:40]) {\n        translate([i, 0, base_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=base_depth, r=0.3, center=true);\n    }\n    for (j = [-18:3:18]) {\n        translate([0, j, base_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=base_width, r=0.2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    color(\"BurlyWood\") {\n        base_structure();\n        \n        // Wood grain detail\n        wood_grain();\n    }\n    \n    // Epoxy resin fill\n    epoxy_resin();\n    \n    // Support legs at corners\n    color(\"SaddleBrown\") {\n        support_leg(-base_width/2 + leg_width/2, -base_depth/2 + leg_width/2);\n        support_leg(base_width/2 - leg_width/2, -base_depth/2 + leg_width/2);\n        support_leg(-base_width/2 + leg_width/2, base_depth/2 - leg_width/2);\n        support_leg(base_width/2 - leg_width/2, base_depth/2 - leg_width/2);\n    }\n    \n    // Reinforcement ribs inside base\n    color(\"Sienna\") {\n        translate([0, 0, wall_thickness/2])\n            cube([base_width - wall_thickness*2, 4, wall_thickness], center=true);\n        translate([0, 0, wall_thickness/2])\n            rotate([0, 0, 90])\n                cube([base_depth - wall_thickness*2, 4, wall_thickness], center=true);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "grout",
    "openscad_code": "// Office Grout Organizer (Medium Complexity, Realistic Style)\n// A desktop grout-shaped organizer with pen slots and storage compartment\n// Overall dimensions: 120mm x 80mm x 60mm\n\n$fn = 32;  // Smooth curves\n\n// Main grout body\nmodule grout_body() {\n    // Base grout shape - elongated hexagonal prism\n    hull() {\n        // Front rounded section\n        translate([-5, -40, 0]) cylinder(h=60, r=5);\n        // Rear rounded section\n        translate([-5, 40, 0]) cylinder(h=60, r=5);\n        // Front corners\n        translate([5, -30, 0]) cylinder(h=60, r=5);\n        translate([5, 30, 0]) cylinder(h=60, r=5);\n        // Rear corners\n        translate([15, -25, 0]) cylinder(h=60, r=5);\n        translate([15, 25, 0]) cylinder(h=60, r=5);\n    }\n}\n\n// Pen slots on top\nmodule pen_slots() {\n    // Create 6 pen slots across the top\n    for(i = [0:5]) {\n        translate([-25 + i*10, 0, 58]) \n            cylinder(h=5, r=4, $fn=16);\n    }\n    \n    // Cut holes for pens\n    for(i = [0:5]) {\n        translate([-25 + i*10, 0, 0])\n            cylinder(h=60, r=3.5, $fn=16);\n    }\n}\n\n// Storage compartment\nmodule storage_compartment() {\n    // Create hollow space inside\n    difference() {\n        // Main cavity\n        translate([0, 0, 10])\n            scale([0.8, 0.7, 0.7])\n            grout_body();\n        \n        // Rounded bottom for easy cleaning\n        translate([0, 0, 12])\n            scale([0.75, 0.65, 0.65])\n            cylinder(h=35, r=30, $fn=32);\n    }\n}\n\n// Base with rubber feet details\nmodule base_details() {\n    // Base rim for stability\n    difference() {\n        translate([0, 0, 0])\n            scale([1.05, 1.05, 0.1])\n            grout_body();\n        \n        translate([0, 0, 0])\n            scale([1, 1, 0.1])\n            grout_body();\n    }\n    \n    // Rubber feet indicators (4 corners)\n    for(x = [-20, 20])\n    for(y = [-30, 30]) {\n        translate([x, y, 0])\n            cylinder(h=1, r=3, $fn=16);\n    }\n}\n\n// Ergonomic grip details\nmodule grip_details() {\n    // Side grip textures\n    for(z = [15:5:50]) {\n        // Left side\n        translate([-8, -38, z])\n            cube([2, 76, 1]);\n        // Right side\n        translate([18, -38, z])\n            cube([2, 76, 1]);\n    }\n}\n\n// Label area\nmodule label_area() {\n    // Recessed label space on front\n    translate([20, 0, 45])\n        scale([0.3, 0.4, 0.1])\n        cube([20, 20, 2]);\n}\n\n// Assembly\nunion() {\n    // Main body structure\n    difference() {\n        grout_body();\n        storage_compartment();\n    }\n    \n    // Add details\n    pen_slots();\n    base_details();\n    grip_details();\n    label_area();\n}",
    "renders": true
  },
  {
    "office_supply": "mesh",
    "openscad_code": "// Mesh Office Chair - Realistic Style, Medium Complexity\n// Dimensions: 120mm height, 100mm width, 110mm depth\n\n// Chair parameters\nseat_width = 80;\nseat_depth = 70;\nseat_thickness = 3;\nback_height = 50;\narmrest_height = 25;\nleg_height = 45;\nmesh_thickness = 2;\n\n// Main seat frame with rounded edges\nmodule seat_frame() {\n    difference() {\n        // Outer frame\n        translate([0, 0, leg_height + seat_thickness/2])\n            minkowski() {\n                cube([seat_width + 10, seat_depth + 10, seat_thickness], center=true);\n                cylinder(r=3, h=0.1, center=true);\n            }\n        \n        // Inner cutout for mesh\n        translate([0, 0, leg_height + seat_thickness/2])\n            cube([seat_width - 10, seat_depth - 10, seat_thickness + 2], center=true);\n    }\n}\n\n// Mesh pattern for seat\nmodule seat_mesh() {\n    difference() {\n        // Mesh base\n        translate([0, 0, leg_height + seat_thickness/2])\n            cube([seat_width - 8, seat_depth - 8, mesh_thickness], center=true);\n        \n        // Grid pattern holes\n        for(x = [-30:10:30]) {\n            for(y = [-25:10:25]) {\n                translate([x, y, leg_height + seat_thickness/2])\n                    cylinder(h=mesh_thickness + 1, r=2, center=true, $fn=16);\n            }\n        }\n    }\n}\n\n// Backrest frame and mesh\nmodule backrest() {\n    // Frame\n    translate([0, -seat_depth/2 + 5, leg_height + seat_thickness + back_height/2])\n        difference() {\n            cube([seat_width + 6, 6, back_height], center=true);\n            translate([0, 0, 0])\n                cube([seat_width - 6, 10, back_height - 6], center=true);\n        }\n    \n    // Back mesh\n    translate([0, -seat_depth/2 + 2, leg_height + seat_thickness + back_height/2])\n        difference() {\n            cube([seat_width - 8, 2, back_height - 8], center=true);\n            for(x = [-30:8:30]) {\n                for(z = [5:8:back_height - 5]) {\n                    translate([x, 0, leg_height + seat_thickness + z])\n                        cylinder(h=4, r=1.5, center=true, $fn=8);\n                }\n            }\n        }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2 - 8, 0, leg_height + seat_thickness + armrest_height/2])\n        union() {\n            // Support post\n            cylinder(h=armrest_height, r=3, center=true, $fn=16);\n            // Arm pad\n            translate([0, 0, armrest_height/2 + 2])\n                cube([20, 8, 4], center=true);\n        }\n    \n    // Right armrest\n    translate([seat_width/2 + 8, 0, leg_height + seat_thickness + armrest_height/2])\n        union() {\n            cylinder(h=armrest_height, r=3, center=true, $fn=16);\n            translate([0, 0, armrest_height/2 + 2])\n                cube([20, 8, 4], center=true);\n        }\n}\n\n// 5-star base with wheels\nmodule base() {\n    // Center post\n    cylinder(h=leg_height, r=5, center=false, $fn=32);\n    \n    // Star legs\n    for(i = [0:72:360]) {\n        rotate([0, 0, i])\n            translate([0, 25, leg_height/2])\n                union() {\n                    // Leg\n                    cube([50, 8, 6], center=true);\n                    // Wheel\n                    translate([25, 0, -leg_height/2 + 3])\n                        sphere(r=4, $fn=16);\n                }\n    }\n}\n\n// Lumbar support detail\nmodule lumbar_support() {\n    translate([0, -seat_depth/2 + 3, leg_height + seat_thickness + back_height/3])\n        difference() {\n            cube([seat_width/2, 4, 15], center=true);\n            translate([0, 0, 0])\n                cube([seat_width/2 - 4, 6, 11], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    seat_frame();\n    seat_mesh();\n    backrest();\n    armrests();\n    lumbar_support();\n}",
    "renders": true
  },
  {
    "office_supply": "wire",
    "openscad_code": "// Wire-mesh desk organizer tray\n// 120 mm x 80 mm x 40 mm external\n// 2 mm wire diameter, 2 mm wall thickness for 3D printing\n\n$fn = 24;                // smooth cylinders\n\nmodule wire_segment(l, d=2) {\n    // creates a straight wire segment\n    rotate([90,0,0])\n        cylinder(h=l, d=d, $fn=12);\n}\n\nmodule rounded_corner(r=10, d=2) {\n    // quarter-circle corner wire\n    difference() {\n        cylinder(h=d, r=r+d/2, $fn=24);\n        translate([0,0,-1])\n            cylinder(h=d+2, r=r-d/2, $fn=24);\n    }\n}\n\nmodule mesh_grid(x_count, y_count, pitch) {\n    // woven grid of wires\n    for (i=[0:x_count-1]) {\n        translate([i*pitch, 0, 0])\n            wire_segment(y_count*pitch, 2);\n    }\n    for (j=[0:y_count-1]) {\n        translate([0, j*pitch, 0])\n            rotate([0,0,90])\n            wire_segment(x_count*pitch, 2);\n    }\n}\n\nmodule tray_side(length, height, vertical_count) {\n    // vertical wire side panel\n    for (i=[0:vertical_count-1]) {\n        translate([i*10, 0, 0])\n            wire_segment(height);\n    }\n    for (j=[0:1]) {\n        translate([0, j*(length-2), 0])\n        rotate([0,0,90])\n            wire_segment((vertical_count-1)*10 + 2);\n    }\n}\n\n// ---- main model ----\nunion() {\n    // bottom mesh\n    translate([10,10,2])\n        mesh_grid(11, 7, 10);\n\n    // front side\n    translate([10, 8, 12])\n        tray_side(100, 28, 11);\n\n    // back side\n    translate([10, 8, 12])\n        rotate([0,0,180])\n        translate([-100, 62, 0])\n            tray_side(100, 28, 11);\n\n    // left side\n    translate([8, 10, 12])\n        rotate([0,0,90])\n        translate([0, 0, 0])\n            tray_side(60, 28, 7);\n\n    // right side\n    translate([118, 10, 12])\n        rotate([0,0,-90])\n        translate([-60, 0, 0])\n            tray_side(60, 28, 7);\n\n    // top rim front\n    translate([10, 8, 38])\n        wire_segment(100);\n\n    // top rim back\n    translate([10, 70, 38])\n        wire_segment(100);\n\n    // top rim left\n    translate([8, 10, 38])\n        rotate([0,0,90])\n        wire_segment(60);\n\n    // top rim right\n    translate([118, 10, 38])\n        rotate([0,0,90])\n        wire_segment(60);\n}",
    "renders": true
  },
  {
    "office_supply": "screen",
    "openscad_code": "// Realistic Office Monitor Screen (Medium Complexity)\n// Dimensions: 120mm wide x 70mm tall x 12mm deep (monitor body)\n// With stand: 120mm x 100mm x 120mm total\n\n// Screen parameters\nscreen_width = 120;\nscreen_height = 70;\nscreen_depth = 12;\nbezel_thickness = 4;\nstand_width = 60;\nstand_depth = 35;\nstand_height = 30;\nbase_width = 100;\nbase_depth = 80;\nbase_height = 5;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main monitor body with bezel\nmodule monitor_body() {\n    // Outer shell\n    difference() {\n        cube([screen_width, screen_height, screen_depth]);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([screen_width-wall*2, screen_height-wall*2, screen_depth-wall]);\n        \n        // Screen display area\n        translate([bezel_thickness, bezel_thickness, screen_depth-wall-0.1])\n            cube([screen_width-bezel_thickness*2, screen_height-bezel_thickness*2, wall+0.2]);\n    }\n    \n    // Screen surface (slightly recessed)\n    translate([bezel_thickness, bezel_thickness, screen_depth-wall-0.5])\n        cube([screen_width-bezel_thickness*2, screen_height-bezel_thickness*2, 0.5]);\n}\n\n// Ventilation slots on back\nmodule ventilation_slots() {\n    slot_width = 40;\n    slot_height = 3;\n    slot_depth = 2;\n    slots = 5;\n    \n    for (i = [0:slots-1]) {\n        translate([screen_width/2 - slot_width/2, \n                  10 + i*(slot_height+5), \n                  screen_depth-slot_depth])\n            cube([slot_width, slot_height, slot_depth+0.1]);\n    }\n}\n\n// Stand neck connecting to monitor\nmodule stand_neck() {\n    difference() {\n        // Main neck\n        translate([screen_width/2 - stand_width/2, -stand_height, screen_depth/2 - stand_depth/2])\n            cube([stand_width, stand_height, stand_depth]);\n        \n        // Cable routing hole\n        translate([screen_width/2 - 8, -stand_height/2, screen_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h=stand_height, r1=4, r2=4, $fn=20);\n    }\n}\n\n// Monitor base with support struts\nmodule monitor_base() {\n    // Base plate\n    translate([screen_width/2 - base_width/2, -stand_height-base_height, screen_depth/2 - base_depth/2])\n        cube([base_width, base_height, base_depth]);\n    \n    // Support struts\n    strut_width = 2;\n    strut_height = 15;\n    strut_depth = 25;\n    \n    // Left strut\n    translate([screen_width/2 - stand_width/2 - 5, -stand_height+base_height, screen_depth/2 - strut_depth/2])\n        cube([strut_width, strut_height, strut_depth]);\n    \n    // Right strut\n    translate([screen_width/2 + stand_width/2 + 3, -stand_height+base_height, screen_depth/2 - strut_depth/2])\n        cube([strut_width, strut_height, strut_depth]);\n}\n\n// Control buttons on bottom bezel\nmodule control_buttons() {\n    button_width = 8;\n    button_height = 4;\n    button_depth = 2;\n    spacing = 12;\n    \n    for (i = [0:2]) {\n        translate([screen_width/2 - spacing + i*spacing, screen_height-button_height-1, screen_depth-button_depth])\n            cube([button_width, button_height, button_depth]);\n    }\n}\n\n// Ports on back\nmodule ports() {\n    port_size = 6;\n    port_depth = 3;\n    \n    // HDMI port\n    translate([screen_width-15, screen_height/2, screen_depth-port_depth])\n        cube([port_size, port_size, port_depth+0.1]);\n    \n    // Power port\n    translate([15, screen_height/2, screen_depth-port_depth])\n        cylinder(h=port_depth+0.1, r=port_size/2, $fn=20);\n}\n\n// Assembly\nunion() {\n    // Main monitor components\n    monitor_body();\n    \n    // Add details\n    translate([0, 0, 0]) {\n        ventilation_slots();\n        control_buttons();\n        ports();\n    }\n    \n    // Stand assembly\n    stand_neck();\n    monitor_base();\n}",
    "renders": true
  },
  {
    "office_supply": "glass",
    "openscad_code": "// Glass office side table with magazine shelf\n// Realistic style, medium complexity\n\n$fn = 36;\n\n// Overall dimensions\ntable_width = 100;\ntable_depth = 60;\ntable_height = 120;\n\n// Glass thickness\nglass_thickness = 2;\n\n// Frame dimensions\nframe_thickness = 3;\nleg_width = 4;\n\n// Main table top glass\nmodule table_top() {\n    translate([0, 0, table_height - glass_thickness])\n    cube([table_width, table_depth, glass_thickness], center = true);\n}\n\n// Lower magazine shelf glass\nmodule magazine_shelf() {\n    translate([0, 0, 60])\n    cube([table_width - 20, table_depth - 10, glass_thickness], center = true);\n}\n\n// Single leg with rounded corners\nmodule single_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, table_height/2 - glass_thickness])\n    difference() {\n        // Main leg\n        cube([leg_width, leg_width, table_height - 2*glass_thickness], center = true);\n        \n        // Chamfer bottom edges\n        translate([0, 0, -(table_height - 2*glass_thickness)/2 + 2])\n        cube([leg_width + 0.1, leg_width + 0.1, 4], center = true);\n    }\n}\n\n// Horizontal frame support\nmodule frame_support(z_pos) {\n    translate([0, 0, z_pos])\n    difference() {\n        // Full frame\n        cube([table_width + 2*leg_width, table_depth + 2*leg_width, frame_thickness], center = true);\n        \n        // Cutout for glass\n        cube([table_width + 0.2, table_depth + 0.2, frame_thickness + 0.2], center = true);\n    }\n}\n\n// Vertical frame corner brackets\nmodule corner_bracket(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos])\n    difference() {\n        union() {\n            // Vertical part\n            cube([leg_width + 2*frame_thickness, leg_width + 2*frame_thickness, glass_thickness + 2*frame_thickness], center = true);\n            \n            // Horizontal lip\n            translate([0, 0, glass_thickness/2 + frame_thickness/2])\n            cube([leg_width + 2*frame_thickness, leg_width + 2*frame_thickness, frame_thickness], center = true);\n        }\n        \n        // Glass clearance\n        translate([0, 0, 0])\n        cube([leg_width + 0.5, leg_width + 0.5, glass_thickness + 0.5], center = true);\n    }\n}\n\n// Magazine shelf support rails\nmodule shelf_support() {\n    // Front rail\n    translate([0, (table_depth - 10)/2 + 2, 60 - glass_thickness/2])\n    cube([table_width - 20, frame_thickness, glass_thickness + 2*frame_thickness], center = true);\n    \n    // Back rail\n    translate([0, -(table_depth - 10)/2 - 2, 60 - glass_thickness/2])\n    cube([table_width - 20, frame_thickness, glass_thickness + 2*frame_thickness], center = true);\n}\n\n// Assembly\nunion() {\n    // Glass surfaces\n    table_top();\n    magazine_shelf();\n    \n    // Frame supports\n    frame_support(table_height - glass_thickness - frame_thickness/2);\n    frame_support(60 - glass_thickness/2);\n    \n    // Legs\n    single_leg((table_width + leg_width)/2 - leg_width/2, (table_depth + leg_width)/2 - leg_width/2);\n    single_leg(-(table_width + leg_width)/2 + leg_width/2, (table_depth + leg_width)/2 - leg_width/2);\n    single_leg((table_width + leg_width)/2 - leg_width/2, -(table_depth + leg_width)/2 + leg_width/2);\n    single_leg(-(table_width + leg_width)/2 + leg_width/2, -(table_depth + leg_width)/2 + leg_width/2);\n    \n    // Corner brackets\n    translate([0, 0, table_height - glass_thickness - frame_thickness])\n    corner_bracket((table_width + leg_width)/2 - leg_width/2, (table_depth + leg_width)/2 - leg_width/2, 0);\n    corner_bracket(-(table_width + leg_width)/2 + leg_width/2, (table_depth + leg_width)/2 - leg_width/2, 0);\n    corner_bracket((table_width + leg_width)/2 - leg_width/2, -(table_depth + leg_width)/2 + leg_width/2, 0);\n    corner_bracket(-(table_width + leg_width)/2 + leg_width/2, -(table_depth + leg_width)/2 + leg_width/2, 0);\n    \n    translate([0, 0, 60 - glass_thickness/2])\n    corner_bracket((table_width - 20)/2, (table_depth - 10)/2, 0);\n    corner_bracket(-(table_width - 20)/2, (table_depth - 10)/2, 0);\n    corner_bracket((table_width - 20)/2, -(table_depth - 10)/2, 0);\n    corner_bracket(-(table_width - 20)/2, -(table_depth - 10)/2, 0);\n    \n    // Shelf support rails\n    shelf_support();\n}",
    "renders": true
  },
  {
    "office_supply": "window",
    "openscad_code": "// Window frame furniture - realistic style with medium complexity\n// Overall dimensions: 80mm x 100mm x 12mm (wall thickness 2mm)\n\n// Main parameters\nframe_width = 80;\nframe_height = 100;\nframe_depth = 12;\nwall_thick = 2;\nglass_gap = 1;\n\n// Window pane dimensions\npane_width = frame_width - 2*wall_thick - 2*glass_gap;\npane_height = frame_height - 2*wall_thick - 2*glass_gap;\n\n// Handle dimensions\nhandle_length = 25;\nhandle_diam = 6;\nhandle_offset = 15;\n\n// Hinge dimensions\nhinge_width = 8;\nhinge_height = 10;\nhinge_thick = 3;\n\n// Window frame module\nmodule window_frame() {\n    // Outer frame\n    difference() {\n        // Main frame body\n        cube([frame_width, frame_height, frame_depth], center=true);\n        \n        // Inner cutout for glass\n        translate([0, 0, -1])\n        cube([frame_width - 2*wall_thick, frame_height - 2*wall_thick, frame_depth + 2], center=true);\n    }\n    \n    // Glass pane (represent as thin cube)\n    color(\"lightblue\", 0.3)\n    translate([0, 0, frame_depth/2 - glass_gap - 0.5])\n    cube([pane_width, pane_height, 1], center=true);\n}\n\n// Window handle module\nmodule window_handle() {\n    // Handle base\n    translate([frame_width/2 - wall_thick - 5, frame_height/2 - handle_offset, frame_depth/2])\n    rotate([0, 90, 0])\n    cylinder(h=wall_thick*2, d1=handle_diam+4, d2=handle_diam+2, center=true);\n    \n    // Handle grip\n    translate([frame_width/2 - wall_thick - 5 - handle_length/2, frame_height/2 - handle_offset, frame_depth/2 + 3])\n    rotate([0, 90, 0])\n    cylinder(h=handle_length, d=handle_diam, center=true);\n}\n\n// Hinge module\nmodule hinge(pos_y) {\n    // Hinge base on frame\n    translate([-frame_width/2 - hinge_thick/2, pos_y, 0])\n    cube([hinge_thick, hinge_width, hinge_height], center=true);\n    \n    // Hinge pin (simplified)\n    translate([-frame_width/2 - hinge_thick/2, pos_y, hinge_height/2 + 1])\n    cylinder(h=hinge_width, d=2, center=true);\n    \n    // Hinge leaf on wall\n    translate([-frame_width/2 - hinge_thick - 5, pos_y, 0])\n    cube([5, hinge_width, hinge_height], center=true);\n}\n\n// Mullion (center divider)\nmodule mullion() {\n    translate([0, 0, 0])\n    cube([wall_thick, frame_height - 2*wall_thick, frame_depth], center=true);\n}\n\n// Transom (horizontal divider)\nmodule transom() {\n    translate([0, 0, 0])\n    cube([frame_width - 2*wall_thick, wall_thick, frame_depth], center=true);\n}\n\n// Weather seal detail\nmodule weather_seal() {\n    for(i = [0:1]) {\n        // Top and bottom seals\n        translate([0, frame_height/2 - wall_thick - i*(frame_height - 2*wall_thick), frame_depth/2 - 1])\n        cube([frame_width - 2*wall_thick, 1, 2], center=true);\n        \n        // Left and right seals\n        translate([frame_width/2 - wall_thick - i*(frame_width - 2*wall_thick), 0, frame_depth/2 - 1])\n        cube([1, frame_height - 2*wall_thick, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main window frame\n    window_frame();\n    \n    // Mullion for 2-pane window\n    mullion();\n    \n    // Transom for 4-pane look\n    transom();\n    \n    // Handle\n    window_handle();\n    \n    // Hinges - 2 on left side\n    for(y = [-frame_height/3, frame_height/3]) {\n        hinge(y);\n    }\n    \n    // Weather seals\n    weather_seal();\n}",
    "renders": true
  },
  {
    "office_supply": "door",
    "openscad_code": "// Realistic 3D-printable door model (medium complexity)\n// 100 mm tall, 2 mm wall thickness, no overhangs\n\n// overall dimensions\ndoor_w = 50;\ndoor_h = 100;\ndoor_t = 2;\n\n// panel inset depth\npanel_inset = 1.5;\n\n// create the full door\nmodule door() {\n    // main door slab\n    difference() {\n        // outer solid\n        cube([door_w, door_t, door_h], center=true);\n        \n        // front face panel recess\n        translate([0, door_t/2 - 0.01, 0])\n            cube([door_w - 6, panel_inset + 0.01, door_h - 6], center=true);\n        \n        // back face identical recess\n        translate([0, -door_t/2 + 0.01, 0])\n            cube([door_w - 6, panel_inset + 0.01, door_h - 6], center=true);\n    }\n    \n    // left stile\n    translate([-door_w/2 + 4, 0, 0])\n        cube([8, door_t + 0.1, door_h], center=true);\n    \n    // right stile\n    translate([door_w/2 - 4, 0, 0])\n        cube([8, door_t + 0.1, door_h], center=true);\n    \n    // top rail\n    translate([0, 0, door_h/2 - 4])\n        cube([door_w, door_t + 0.1, 8], center=true);\n    \n    // bottom rail\n    translate([0, 0, -door_h/2 + 4])\n        cube([door_w, door_t + 0.1, 8], center=true);\n    \n    // central cross rail\n    translate([0, 0, 0])\n        cube([door_w, door_t + 0.1, 8], center=true);\n    \n    // doorknob\n    translate([door_w/2 - 3, door_t/2 + 2, 0])\n        rotate([90,0,0])\n        cylinder(h=6, d1=6, d2=4, $fn=20);\n    \n    // hinges (3 along left edge)\n    for(z=[-door_h/2 + 15, 0, door_h/2 - 15])\n        translate([-door_w/2 - 2, 0, z])\n            rotate([0,90,0])\n            difference() {\n                cylinder(h=12, d=6, $fn=20);\n                translate([0,0,1]) cylinder(h=10, d=2.2, $fn=20);\n            }\n    \n    // panel moulding on front\n    color(\"brown\") {\n        // top-left rectangle\n        translate([-door_w/2 + 3, door_t/2 - 0.5, door_h/2 - 3])\n            cube([door_w/2 - 6, 1, door_h/2 - 6]);\n        \n        // top-right rectangle\n        translate([1, door_t/2 - 0.5, door_h/2 - 3])\n            cube([door_w/2 - 6, 1, door_h/2 - 6]);\n        \n        // bottom-left rectangle\n        translate([-door_w/2 + 3, door_t/2 - 0.5, -door_h/2 + 3])\n            cube([door_w/2 - 6, 1, door_h/2 - 6]);\n        \n        // bottom-right rectangle\n        translate([1, door_t/2 - 0.5, -door_h/2 + 3])\n            cube([door_w/2 - 6, 1, door_h/2 - 6]);\n    }\n    \n    // keyhole escutcheon\n    translate([door_w/2 - 6, door_t/2 + 0.5, -5])\n        rotate([90,0,0])\n        cylinder(h=1, d=8, $fn=30);\n    \n    // keyhole slot\n    translate([door_w/2 - 6, door_t/2 + 0.5, -5])\n        rotate([90,0,0])\n        linear_extrude(height=1.1)\n            union() {\n                circle(d=3, $fn=20);\n                translate([0,-2,0]) square([1.5,4], center=true);\n            }\n}\n\n// render the door\ndoor();",
    "renders": true
  },
  {
    "office_supply": "hinge",
    "openscad_code": "// Furniture hinge - medium complexity\n// Two-part cabinet hinge with mounting plates and screw holes\n\n// Parameters\nhinge_width = 20;\nhinge_length = 60;\nhinge_thickness = 3;\nbarrel_diameter = 8;\nbarrel_length = 35;\nmount_plate_width = 40;\nmount_plate_height = 25;\nmount_plate_thickness = 3;\nscrew_diameter = 4;\nscrew_depth = 8;\nclearance = 0.2;\n\n// Main hinge leaf\nmodule hinge_leaf(side=\"left\") {\n    // Base plate\n    translate([0, 0, 0])\n        cube([hinge_length, hinge_width, hinge_thickness], center=false);\n    \n    // Mounting plate\n    translate([hinge_length - mount_plate_width, -mount_plate_height/2 + hinge_width/2, 0])\n        cube([mount_plate_width, mount_plate_height, mount_plate_thickness], center=false);\n    \n    // Screw holes in mounting plate\n    for(x = [hinge_length - mount_plate_width + 5, hinge_length - 5]) {\n        for(y = [-mount_plate_height/2 + hinge_width/2 + 5, -mount_plate_height/2 + hinge_width/2 + mount_plate_height - 5]) {\n            translate([x, y, -0.5])\n                cylinder(h=mount_plate_thickness+1, d=screw_diameter, $fn=20);\n        }\n    }\n    \n    // Barrel knuckles\n    knuckle_spacing = barrel_length / 3;\n    for(i = [0:1:2]) {\n        translate([0, hinge_width/2 - barrel_diameter/2, i * knuckle_spacing])\n            rotate([90, 0, 0])\n                cylinder(h=hinge_thickness, d=barrel_diameter, $fn=20);\n    }\n    \n    // Counterbore for screws\n    translate([hinge_length - mount_plate_width + 5, -mount_plate_height/2 + hinge_width/2 + 5, -1])\n        cylinder(h=2, d=screw_diameter*1.8, $fn=20);\n    translate([hinge_length - 5, -mount_plate_height/2 + hinge_width/2 + 5, -1])\n        cylinder(h=2, d=screw_diameter*1.8, $fn=20);\n    translate([hinge_length - mount_plate_width + 5, -mount_plate_height/2 + hinge_width/2 + mount_plate_height - 5, -1])\n        cylinder(h=2, d=screw_diameter*1.8, $fn=20);\n    translate([hinge_length - 5, -mount_plate_height/2 + hinge_width/2 + mount_plate_height - 5, -1])\n        cylinder(h=2, d=screw_diameter*1.8, $fn=20);\n    \n    // Reinforcement ridges\n    translate([hinge_length - mount_plate_width - 5, hinge_width/2 - 2, 0])\n        cube([5, 4, hinge_thickness]);\n    translate([hinge_length - 15, hinge_width/2 - 2, 0])\n        cube([10, 4, hinge_thickness]);\n}\n\n// Second hinge leaf (mirrored)\nmodule hinge_leaf_2() {\n    translate([0, hinge_width + barrel_diameter + clearance, 0])\n        mirror([0, 1, 0])\n            hinge_leaf(\"right\");\n}\n\n// Central pin\nmodule hinge_pin() {\n    translate([-1, hinge_width + barrel_diameter/2, barrel_length/2])\n        rotate([90, 0, 0])\n            cylinder(h=barrel_length + 4, d=barrel_diameter - 1, $fn=20);\n}\n\n// Assembly\nunion() {\n    difference() {\n        hinge_leaf(\"left\");\n        \n        // Screw holes to subtract\n        // Left leaf holes\n        for(x = [hinge_length - mount_plate_width + 5, hinge_length - 5]) {\n            for(y = [-mount_plate_height/2 + hinge_width/2 + 5, -mount_plate_height/2 + hinge_width/2 + mount_plate_height - 5]) {\n                translate([x, y, -0.5])\n                    cylinder(h=mount_plate_thickness+1, d=screw_diameter, $fn=20);\n            }\n        }\n    }\n    \n    difference() {\n        hinge_leaf_2();\n        \n        // Right leaf holes\n        for(x = [hinge_length - mount_plate_width + 5, hinge_length - 5]) {\n            for(y = [hinge_width + barrel_diameter + clearance + mount_plate_height/2 - 5, hinge_width + barrel_diameter + clearance + mount_plate_height/2 - mount_plate_height + 5]) {\n                translate([x, y, -0.5])\n                    cylinder(h=mount_plate_thickness+1, d=screw_diameter, $fn=20);\n            }\n        }\n    }\n    \n    hinge_pin();\n}\n\n// Add slight chamfer to edges for realism\nmodule chamfer_edge() {\n    translate([hinge_length - mount_plate_width, -mount_plate_height/2 + hinge_width/2, 0])\n        rotate([0, 0, -45])\n            cube([mount_plate_thickness*1.5, mount_plate_thickness*1.5, mount_plate_thickness]);\n}",
    "renders": true
  },
  {
    "office_supply": "handle",
    "openscad_code": "// Realistic Furniture Handle with Medium Complexity\n// Dimensions: 120mm wide, 30mm deep, 35mm tall\n// Wall thickness: 2mm throughout\n// Desiged for 3D printing with no overhangs\n\n// Main parameters\nhandle_width = 120;\nhandle_depth = 30;\nhandle_height = 35;\nwall_thickness = 2;\nmount_hole_diameter = 5;\nmount_hole_spacing = 96;\n\n// Base mounting plate\nmodule base_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, 0])\n            cube([handle_width, handle_depth, wall_thickness], center=true);\n        \n        // Mounting holes (M4 screws)\n        for(i = [-1, 1]) {\n            translate([i * mount_hole_spacing/2, 0, -1])\n                cylinder(h=wall_thickness+2, r=mount_hole_diameter/2, center=true);\n        }\n        \n        // Chamfered edges for better printability\n        translate([0, handle_depth/2-1, wall_thickness/2-0.5])\n            cube([handle_width-4, 2, wall_thickness+1], center=true);\n    }\n}\n\n// Grip bar with ergonomic profile\nmodule grip_bar() {\n    // Main grip tube\n    difference() {\n        // Outer cylinder\n        translate([0, 0, handle_height])\n            rotate([90, 0, 0])\n                cylinder(h=handle_width-20, r=handle_depth/2-2, center=true);\n        \n        // Inner hollow\n        translate([0, 0, handle_height])\n            rotate([90, 0, 0])\n                cylinder(h=handle_width-20, r=handle_depth/2-2-wall_thickness, center=true);\n    }\n    \n    // End caps with rounded edges\n    for(i = [-1, 1]) {\n        translate([i * (handle_width-20)/2, 0, handle_height])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness*2, r=handle_depth/2-2, center=true);\n    }\n}\n\n// Support arms connecting grip to base\nmodule support_arms() {\n    arm_width = 10;\n    arm_height = handle_height - wall_thickness;\n    \n    for(i = [-1, 1]) {\n        // Main support\n        translate([i * mount_hole_spacing/2, 0, arm_height/2])\n            cube([arm_width, handle_depth-4, arm_height], center=true);\n        \n        // Gusset reinforcement\n        translate([i * mount_hole_spacing/2, handle_depth/4, arm_height/4])\n            rotate([0, 30, 0])\n                cube([arm_width, wall_thickness*3, arm_height/2], center=true);\n    }\n}\n\n// Finger grooves for ergonomic grip\nmodule finger_grooves() {\n    groove_depth = 1.5;\n    groove_spacing = 12;\n    \n    for(i = [-2:2]) {\n        translate([i * groove_spacing, 0, handle_height])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=handle_depth/2-2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_plate();\n    \n    // Support arms\n    support_arms();\n    \n    // Grip assembly\n    union() {\n        grip_bar();\n        // Add finger grooves to grip\n        finger_grooves();\n    }\n    \n    // Decorative end caps\n    for(i = [-1, 1]) {\n        translate([i * (handle_width-10)/2, 0, wall_thickness/2])\n            cylinder(h=wall_thickness, r=5, center=true);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "lock",
    "openscad_code": "// Realistic Furniture Lock for Office Cabinet\n// Medium complexity lock with functional elements\n\n$fn = 30;\n\n// Main dimensions\nlock_length = 80;\nlock_width = 45;\nlock_height = 15;\nwall_thickness = 2;\n\nmodule lock_body() {\n    difference() {\n        // Main body\n        cube([lock_length, lock_width, lock_height], center=true);\n        \n        // Internal cavity for mechanism\n        cube([lock_length-2*wall_thickness, lock_width-2*wall_thickness, lock_height-wall_thickness], center=true);\n        \n        // Keyhole slot\n        translate([lock_length/2-5, 0, -lock_height/2])\n            cube([10, 8, lock_height+1]);\n    }\n}\n\nmodule mounting_plate() {\n    // Back mounting plate with screw holes\n    difference() {\n        translate([0, 0, -lock_height/2-3])\n            cube([lock_length+10, lock_width+10, 3], center=true);\n        \n        // Screw holes - 4 corners\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x*(lock_length/2+3), y*(lock_width/2+3), -lock_height/2-4])\n                    cylinder(h=5, r=2.5, center=true);\n    }\n}\n\nmodule keyhole_detail() {\n    // Keyhole face plate\n    translate([lock_length/2-2.5, 0, 0])\n        rotate([90, 0, 0])\n            difference() {\n                // Outer plate\n                cylinder(h=2, r=10, center=true);\n                \n                // Key slot\n                cube([12, 2, 4], center=true);\n                \n                // Circular key hole\n                translate([5, 0, 0])\n                    cylinder(h=3, r=3, center=true);\n            }\n}\n\nmodule latch_bolt() {\n    // Main latch\n    translate([-lock_length/2-15, 0, 0])\n        cube([30, 8, 6], center=true);\n    \n    // Tapered front\n    translate([-lock_length/2-30, 0, 0])\n        rotate([0, 0, 45])\n            cube([8, 8, 6], center=true);\n    \n    // Support ribs\n    for(offset = [-3, 3])\n        translate([-lock_length/2-15, offset, 0])\n            cube([20, 2, 2], center=true);\n}\n\nmodule strike_plate() {\n    // Strike plate on door frame\n    translate([lock_length/2+5, 0, 0])\n        difference() {\n            cube([20, 12, 3], center=true);\n            \n            // Latch hole\n            translate([0, 0, -1])\n                cube([10, 8, 5], center=true);\n            \n            // Mounting holes\n            for(pos = [-6, 6])\n                translate([0, pos, -2])\n                    cylinder(h=5, r=1.5, center=true);\n        }\n}\n\nmodule ergonomic_grip() {\n    // Grip ridges on sides\n    for(i = [1:3]) {\n        translate([0, 0, -lock_height/2 + i*4])\n            difference() {\n                cube([lock_length, lock_width+2, 1], center=true);\n                cube([lock_length-4, lock_width, 1.5], center=true);\n            }\n    }\n}\n\nmodule lock_assembly() {\n    union() {\n        lock_body();\n        mounting_plate();\n        keyhole_detail();\n        latch_bolt();\n        strike_plate();\n        ergonomic_grip();\n    }\n}\n\n// Render the complete lock\nlock_assembly();",
    "renders": true
  },
  {
    "office_supply": "knob",
    "openscad_code": "// Furniture Knob - Realistic Style (Medium Complexity)\n// Overall height: 38mm, Base diameter: 26mm\n\n$fn = 36;  // Smooth curves\n\n// Main parameters\nbase_h = 8;\ngrip_h = 22;\ngrip_top_r = 15;\ngrip_bottom_r = 12;\nneck_h = 4;\nneck_r = 6;\nscrew_h = 8;\nscrew_r = 4;\n\n// Wall thickness constant\nwall = 2;\n\nmodule knob() {\n    difference() {\n        // Outer shell\n        union() {\n            // Base plate\n            cylinder(h = base_h, r1 = 13, r2 = 13, center = true);\n            \n            // Grip body\n            translate([0, 0, base_h/2 + grip_h/2])\n                cylinder(h = grip_h, r1 = grip_bottom_r, r2 = grip_top_r, center = true);\n                \n            // Neck transition\n            translate([0, 0, base_h/2 + grip_h])\n                cylinder(h = neck_h, r1 = grip_top_r, r2 = neck_r, center = true);\n                \n            // Screw boss\n            translate([0, 0, base_h/2 + grip_h + neck_h + screw_h/2])\n                cylinder(h = screw_h, r1 = neck_r, r2 = neck_r, center = true);\n        }\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n            cylinder(h = base_h + grip_h + neck_h + screw_h + 2, r = neck_r - wall, center = false);\n            \n        // Finger grip grooves\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([0, grip_bottom_r - 1, base_h/2 + grip_h/2])\n                    cube([wall + 1, 2, grip_h - 2], center = true);\n        }\n    }\n    \n    // Top surface detail ring\n    translate([0, 0, base_h/2 + grip_h + neck_h + screw_h - 1])\n        cylinder(h = 2, r1 = neck_r + 1, r2 = neck_r + 1, center = true);\n        \n    // Bottom mounting plate holes\n    for(i = [0:1]) {\n        rotate([0, 0, i * 180])\n            translate([8, 0, base_h/2 - 1])\n                cylinder(h = base_h + 2, r = 2, center = true);\n    }\n    \n    // Screw hole\n    translate([0, 0, base_h + grip_h + neck_h + screw_h])\n        cylinder(h = 12, r = screw_r, center = true);\n        \n    // Chamfers on edges\n    translate([0, 0, base_h/2 - 1])\n        cylinder(h = 2, r1 = 13 - wall, r2 = 13, center = true);\n        \n    translate([0, 0, base_h/2 + grip_h + grip_h/2])\n        cylinder(h = 2, r1 = grip_top_r, r2 = grip_top_r - wall, center = true);\n}\n\n// Create the knob centered at origin\nknob();",
    "renders": true
  },
  {
    "office_supply": "threshold",
    "openscad_code": "// Realistic Office Door Threshold\n// Dimensions in mm, printable without supports\n\n// Main parameters\nthreshold_length = 80;\nthreshold_width = 30;\nthreshold_height = 8;\nwall_thickness = 2;\nscrew_hole_diameter = 3;\n\n// Main threshold body - raised platform\nmodule threshold_base() {\n    difference() {\n        // Main body with slight taper\n        hull() {\n            translate([0, -threshold_width/2, 0])\n                cube([threshold_length, wall_thickness, threshold_height], center=false);\n            translate([0, threshold_width/2 - wall_thickness, 0])\n                cube([threshold_length, wall_thickness, threshold_height], center=false);\n            translate([wall_thickness, -threshold_width/2, 0])\n                cube([threshold_length - wall_thickness*2, threshold_width, wall_thickness], center=false);\n            translate([wall_thickness, -threshold_width/2, threshold_height - wall_thickness])\n                cube([threshold_length - wall_thickness*2, threshold_width, wall_thickness], center=false);\n        }\n        \n        // Screw holes - 4 corners\n        for(x = [wall_thickness*2, threshold_length - wall_thickness*2]) {\n            for(y = [-threshold_width/3, threshold_width/3]) {\n                translate([x, y, -1])\n                    cylinder(h = threshold_height + 2, d = screw_hole_diameter, $fn = 16);\n            }\n        }\n        \n        // Center groove for door seal\n        translate([wall_thickness, -1, threshold_height/2])\n            cube([threshold_length - wall_thickness*2, 2, threshold_height/2 + 1]);\n    }\n}\n\n// Anti-slip ridges on top surface\nmodule anti_slip_ridges() {\n    ridge_width = 1.5;\n    ridge_height = 0.5;\n    ridge_spacing = 5;\n    num_ridges = floor(threshold_length / ridge_spacing) - 1;\n    \n    for(i = [1:num_ridges]) {\n        translate([i * ridge_spacing + wall_thickness, -threshold_width/2 + wall_thickness, threshold_height - ridge_height])\n            cube([ridge_width, threshold_width - wall_thickness*2, ridge_height]);\n    }\n}\n\n// Tapered edges for smooth transition\nmodule tapered_edges() {\n    // Front edge\n    difference() {\n        translate([0, -threshold_width/2, 0])\n            cube([wall_thickness*3, threshold_width, threshold_height]);\n        translate([-1, -threshold_width/2 - 1, -1])\n            rotate([0, 45, 0])\n            cube([threshold_height*2, threshold_width + 2, threshold_height*2]);\n    }\n    \n    // Back edge\n    difference() {\n        translate([threshold_length - wall_thickness*3, -threshold_width/2, 0])\n            cube([wall_thickness*3, threshold_width, threshold_height]);\n        translate([threshold_length + 1, -threshold_width/2 - 1, -1])\n            rotate([0, -45, 0])\n            cube([threshold_height*2, threshold_width + 2, threshold_height*2]);\n    }\n}\n\n// Side support ribs for structural integrity\nmodule support_ribs() {\n    rib_height = threshold_height - wall_thickness;\n    rib_width = 1.5;\n    \n    for(pos = [threshold_length*0.25, threshold_length*0.5, threshold_length*0.75]) {\n        translate([pos, -threshold_width/2 + wall_thickness, wall_thickness])\n            cube([rib_width, threshold_width - wall_thickness*2, rib_height]);\n    }\n}\n\n// Assembly\nunion() {\n    threshold_base();\n    anti_slip_ridges();\n    tapered_edges();\n    support_ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "frame",
    "openscad_code": "// Picture-frame style desktop organizer frame\n// Overall footprint 100 x 70 mm, height 40 mm\n// Wall thickness 2 mm everywhere for reliable FDM printing\n\nmodule frame_outline() {\n    // outer shell\n    difference() {\n        cube([100, 70, 40], center = true);\n        translate([0, 0, 2])\n            cube([96, 66, 40], center = true);   // leaves 2 mm walls\n    }\n}\n\nmodule shelf_support() {\n    // small wedge to hold a removable shelf\n    translate([0, 0, -10])\n    union() {\n        cube([2, 66, 8], center = true);         // back spline\n        rotate([0, 45, 0])\n            translate([0, 0, 1.4])\n            cube([2.8, 66, 2], center = true);   // 45° brace\n    }\n}\n\nmodule pen_slot() {\n    // cylindrical cutout for pens\n    rotate([90, 0, 0])\n        cylinder(h = 100, d = 14, $fn = 32);\n}\n\nmodule phone_stand_gap() {\n    // angled slot for phone / tablet\n    rotate([-20, 0, 0])\n        cube([80, 8, 30], center = true);\n}\n\nmodule card_slot() {\n    // slim slot for business cards\n    cube([60, 2, 25], center = true);\n}\n\nmodule front_face() {\n    difference() {\n        // thin front plate with openings\n        translate([0, 32, 0]) cube([100, 4, 40], center = true);\n\n        // pen hole left\n        translate([-35, 32, 10]) pen_slot();\n\n        // pen hole right\n        translate([35, 32, 10]) pen_slot();\n\n        // phone stand\n        translate([0, 32, -5]) phone_stand_gap();\n\n        // card slot\n        translate([0, 32, 12]) card_slot();\n    }\n}\n\n// assembly\nunion() {\n    frame_outline();\n    shelf_support();\n    front_face();\n}",
    "renders": true
  },
  {
    "office_supply": "molding",
    "openscad_code": "// Office Chair Molding Base\n// Realistic style, medium complexity\n// Overall size: 110mm diameter x 25mm height\n\nmodule chair_base() {\n    // Central hub with 8mm hole for gas cylinder\n    difference() {\n        cylinder(h = 8, d = 25, $fn = 32);\n        translate([0, 0, -0.1]) cylinder(h = 8.2, d = 8.2, $fn = 32);\n    }\n    \n    // Hub collar\n    translate([0, 0, 8]) cylinder(h = 5, d1 = 25, d2 = 20, $fn = 32);\n    \n    // Five star legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) translate([0, 0, 8]) {\n            // Main leg\n            hull() {\n                translate([12.5, 0, 0]) cylinder(h = 2, d = 12, $fn = 16);\n                translate([42, 0, 0]) cylinder(h = 2, d = 8, $fn = 16);\n            }\n            \n            // Leg reinforcement rib\n            translate([27, 0, -0.5]) cube([30, 6, 3], center = true);\n            \n            // Wheel mount socket\n            difference() {\n                translate([42, 0, 0]) rotate([90, 0, 0]) cylinder(h = 10, d = 8, $fn = 16);\n                translate([42, 0, -1]) rotate([90, 0, 0]) cylinder(h = 12, d = 6, $fn = 16);\n            }\n        }\n    }\n    \n    // Decorative ring\n    translate([0, 0, 5]) difference() {\n        cylinder(h = 3, d = 28, $fn = 32);\n        cylinder(h = 3, d = 22, $fn = 32);\n    }\n    \n    // Structural ribs between legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72 + 36]) translate([0, 0, 8]) {\n            hull() {\n                translate([20, 0, 0]) cube([2, 15, 2], center = true);\n                translate([20, 0, 0]) rotate([0, 0, 72]) cube([2, 15, 2], center = true);\n            }\n        }\n    }\n}\n\n// Bottom support structures\nmodule bottom_supports() {\n    // Five support pads\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) translate([42, 0, -2]) {\n            // Support pad\n            cylinder(h = 2, d = 12, $fn = 16);\n            // Drainage hole\n            translate([0, 0, -0.1]) cylinder(h = 2.2, d = 4, $fn = 16);\n        }\n    }\n    \n    // Center support ring\n    translate([0, 0, -2]) difference() {\n        cylinder(h = 2, d = 30, $fn = 32);\n        cylinder(h = 2, d = 20, $fn = 32);\n    }\n}\n\n// Assembly\nchair_base();\nbottom_supports();",
    "renders": true
  },
  {
    "office_supply": "trim",
    "openscad_code": "// Office Chair Trim - Realistic Style with Medium Complexity\n// Overall dimensions: 80mm wide, 100mm deep, 120mm tall\n\n// Base module for creating rounded rectangles with proper wall thickness\nmodule rounded_cube(size, radius, center=false) {\n    translate([0, 0, center ? -size[2]/2 : 0])\n    hull() {\n        translate([radius, radius, 0]) cylinder(r=radius, h=size[2], $fn=16);\n        translate([size[0]-radius, radius, 0]) cylinder(r=radius, h=size[2], $fn=16);\n        translate([radius, size[1]-radius, 0]) cylinder(r=radius, h=size[2], $fn=16);\n        translate([size[0]-radius, size[1]-radius, 0]) cylinder(r=radius, h=size[2], $fn=16);\n    }\n}\n\n// Seat cushion trim ring\nmodule seat_trim() {\n    difference() {\n        // Outer ring\n        translate([0, 0, 5]) rounded_cube([80, 100, 10], 10, true);\n        \n        // Inner cutout for cushion\n        translate([0, 0, 8]) rounded_cube([74, 94, 10], 8, true);\n    }\n}\n\n// Backrest support frame\nmodule backrest_frame() {\n    // Main vertical supports\n    for(side = [-1, 1]) {\n        translate([side * 35, 0, 60]) {\n            difference() {\n                // Outer support\n                cube([4, 8, 110], center=true);\n                // Inner channel for wires\n                translate([0, 0, -20]) cube([2, 4, 90], center=true);\n            }\n        }\n    }\n    \n    // Horizontal support bars\n    for(z = [20, 40, 60, 80]) {\n        translate([0, 0, z]) {\n            difference() {\n                cube([74, 6, 4], center=true);\n                // Cable management holes\n                for(x = [-25, -15, -5, 5, 15, 25]) {\n                    translate([x, 0, 0]) cylinder(r=2, h=8, center=true, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Armrest trim brackets\nmodule armrest_brackets() {\n    for(side = [-1, 1]) {\n        translate([side * 38, 0, 45]) {\n            // Main bracket\n            difference() {\n                cube([6, 12, 30], center=true);\n                // Mounting holes\n                translate([0, -4, 10]) cylinder(r=1.5, h=8, center=true, $fn=12);\n                translate([0, 4, 10]) cylinder(r=1.5, h=8, center=true, $fn=12);\n            }\n            \n            // Support gusset\n            translate([side * 2, 0, 30]) {\n                rotate([0, 90, 0])\n                cylinder(r=3, h=10, center=true, $fn=12);\n            }\n        }\n    }\n}\n\n// Base trim ring with castor mounts\nmodule base_trim() {\n    difference() {\n        // Outer base ring\n        cylinder(r=40, h=8, $fn=32);\n        \n        // Inner cutout\n        cylinder(r=36, h=10, $fn=32);\n        \n        // Castor mounting points\n        for(angle = [0:72:359]) {\n            rotate([0, 0, angle])\n            translate([38, 0, -2])\n            cylinder(r=3, h=12, $fn=12);\n        }\n    }\n}\n\n// Gas cylinder cover trim\nmodule cylinder_cover() {\n    difference() {\n        // Main cover\n        cylinder(r=12, h=25, $fn=32);\n        \n        // Inner hole\n        cylinder(r=8, h=26, $fn=32);\n        \n        // Height adjustment slot\n        translate([8, 0, 12])\n        cube([4, 2, 20], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat trim at bottom\n    translate([0, 0, 0])\n    seat_trim();\n    \n    // Backrest frame\n    translate([0, 0, 15])\n    backrest_frame();\n    \n    // Armrest brackets\n    translate([0, 0, 15])\n    armrest_brackets();\n    \n    // Base trim ring\n    translate([0, 0, 0])\n    base_trim();\n    \n    // Gas cylinder cover\n    translate([0, 0, 8])\n    cylinder_cover();\n}",
    "renders": true
  },
  {
    "office_supply": "baseboard",
    "openscad_code": "// Realistic office baseboard (skirting board) with cable channel and mounting details\n// Overall size: 100mm long × 15mm high × 12mm deep\n// 3D-print friendly – no steep overhangs, 2mm walls throughout\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule baseboard_profile() {\n    // Main profile – 15 mm high, 12 mm deep\n    difference() {\n        // Outer rounded profile\n        hull() {\n            translate([0, 2, 0])         cube([100, 2, 2]);\n            translate([0, 13, 0])        cube([100, 2, 2]);\n            translate([0, 2, 13])        cube([100, 2, 2]);\n            translate([0, 13, 13])       cube([100, 2, 2]);\n        }\n        // Fillet top front edge\n        translate([-1, 11, 11])\n            rotate([90, 0, 0])\n                cylinder(h=2, r=2);\n    }\n}\n\nmodule cable_channel() {\n    // 6 mm Ø semi-circular channel running lengthwise\n    translate([0, 8, 6])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=100, r=3, center=false);\n                translate([0, -3, 0]) cube([100, 3, 6]);\n            }\n}\n\nmodule mounting_slots() {\n    // Two 4 mm × 2 mm horizontal slots for screws 20 mm from ends\n    for (x = [20, 80])\n        translate([x, 7, 1])\n            cube([4, 2, 10]);\n}\n\n// Assembly\nunion() {\n    difference() {\n        baseboard_profile();\n        cable_channel();\n    }\n    mounting_slots();\n}\n\n// Optional end caps (comment out if printing multiples)\ntranslate([0, 0, 0])\n    rotate([0, 90, 0])\n        cylinder(h=15, r=0.5, center=true);\ntranslate([100, 0, 0])\n    rotate([0, 90, 0])\n        cylinder(h=15, r=0.5, center=true);",
    "renders": true
  },
  {
    "office_supply": "panel",
    "openscad_code": "// Office desk cable-management panel\n// Overall footprint 120×70 mm, 18 mm thick – printable on a typical FDM bed\n// 2 mm walls everywhere, no over-angles >45°, printable without supports\n\n// Main panel body\nmodule panel_body() {\n    difference() {\n        // Outer slab\n        cube([120, 70, 18], center = true);\n        \n        // Underside cavity to save material & weight\n        translate([0, 0, -1])\n            cube([116, 66, 16], center = true);\n    }\n}\n\n// Rectangular cut-out for cable pass-through\nmodule cable_hole() {\n    translate([0, 0, 9.1])\n        cube([60, 30, 2.2], center = true);\n}\n\n// Ergonomic finger-grip recess on front edge\nmodule finger_grip() {\n    difference() {\n        translate([0, 35, 0])\n            cube([50, 4, 10], center = true);\n        \n        translate([0, 37, 0])\n            rotate([0, 10, 0])\n                cube([46, 4, 10], center = true);\n    }\n}\n\n// Snap-fit pegs that key into standard 15 mm Ø grommet holes\nmodule peg(dia = 8, h = 8) {\n    // Cylinder with 0.5 mm chamfer for easy insertion\n    union() {\n        cylinder(h = h, d = dia, $fn = 20);\n        translate([0, 0, h])\n            cylinder(h = 1, d1 = dia, d2 = dia - 1, $fn = 20);\n    }\n}\n\n// Two locating pegs at the back\nmodule peg_pair() {\n    translate([-35, -30, 9])\n        peg();\n    translate([35, -30, 9])\n        peg();\n}\n\n// Decorative faux-veneer grooves (embossed lines)\nmodule grooves() {\n    for (x = [-40, -20, 0, 20, 40]) {\n        translate([x, 0, 9])\n            cube([1.5, 66, 0.6], center = true);\n    }\n}\n\n// Assemble everything\nunion() {\n    panel_body();\n    peg_pair();\n    grooves();\n}\n\ndifference() {\n    union();\n    cable_hole();\n    finger_grip();\n}",
    "renders": true
  },
  {
    "office_supply": "siding",
    "openscad_code": "// Siding-style office desk organizer with realistic proportions\n// Features pen holder compartments, slanted siding design, and cable routing slot\n\n// Overall dimensions\nlength = 120;\nwidth = 80;\nheight = 90;\n\n// Wall thickness\nwall = 2;\n\n// Pen compartment dimensions\ncomp_width = 25;\ncomp_depth = 25;\ncomp_height = 60;\n\n// Cable routing slot\nslot_width = 15;\nslot_height = 8;\n\n// Create main body with slanted siding profile\nmodule main_body() {\n    // Base platform\n    union() {\n        // Bottom base\n        translate([0, 0, wall/2])\n            cube([length, width, wall], center=true);\n        \n        // Slanted front siding\n        difference() {\n            // Main slanted block\n            translate([0, 0, height/2])\n                cube([length, width, height], center=true);\n            \n            // Hollow interior\n            translate([0, 0, height/2 + wall])\n                cube([length - wall*2, width - wall*2, height - wall], center=true);\n            \n            // Front face slope (35 degrees)\n            translate([0, width/2 - wall, 0])\n                rotate([35, 0, 0])\n                    translate([0, -width/2, height/2])\n                        cube([length + 2, width + 2, height + 2], center=true);\n        }\n    }\n}\n\n// Pen holder compartments\nmodule pen_compartments() {\n    for(i = [-1, 0, 1]) {\n        translate([i * comp_width * 1.2, 0, (comp_height + wall)/2])\n            difference() {\n                // Outer compartment\n                cube([comp_width - wall, comp_depth - wall, comp_height], center=true);\n                \n                // Inner hollow\n                translate([0, 0, -wall/2])\n                    cube([comp_width - wall*3, comp_depth - wall*3, comp_height + 1], center=true);\n            }\n    }\n}\n\n// Cable management slot\nmodule cable_slot() {\n    translate([0, -width/2 + wall*2, height/2])\n        rotate([90, 0, 0])\n            difference() {\n                // Main cylinder for cable passage\n                cylinder(h=width/2, r=slot_width/2, center=true);\n                \n                // Cut to create slot opening\n                translate([0, 0, -width/4])\n                    cube([slot_width*2, slot_width*2, width], center=true);\n            }\n}\n\n// Reinforcement ribs for structure\nmodule ribs() {\n    for(y = [-width/3, 0, width/3]) {\n        translate([0, y, height/4])\n            cube([length - wall*4, wall, height/2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    \n    // Position compartments on top\n    translate([0, width/3, height - wall])\n        pen_compartments();\n    \n    // Add cable slot at back\n    cable_slot();\n    \n    // Add structural ribs inside\n    translate([0, 0, wall])\n        ribs();\n}\n\n// Add non-slip feet\nmodule feet() {\n    foot_d = 8;\n    foot_h = 3;\n    \n    for(x = [-length/2 + 15, length/2 - 15]) {\n        for(y = [-width/2 + 15, width/2 - 15]) {\n            translate([x, y, 0])\n                cylinder(h=foot_h, d=foot_d, center=true);\n        }\n    }\n}\n\n// Add feet to base\ntranslate([0, 0, foot_h/2])\n    feet();",
    "renders": true
  },
  {
    "office_supply": "gutter",
    "openscad_code": "// Modular gutter furniture - a desktop cable management gutter\n// Realistic style, medium complexity\n\nmodule gutter_base() {\n    // Main gutter channel - 6mm thick walls\n    difference() {\n        // Outer box 100x20x15mm\n        cube([100, 20, 15], center=true);\n        \n        // Inner channel - 96mm wide, 16mm deep, 11mm high\n        translate([0, 0, 2])\n        cube([96, 16, 11], center=true);\n    }\n}\n\nmodule mounting_tabs() {\n    // Two mounting tabs at ends\n    for(x=[-47, 47])\n    translate([x, 0, -6.5])\n    cube([6, 8, 3], center=true);\n}\n\nmodule cable_slots() {\n    // 5 evenly spaced cable slots on top\n    for(i=[-2:2]) {\n        x_pos = i * 20;\n        translate([x_pos, 0, 7.5])\n        cube([8, 2, 3], center=true);\n    }\n}\n\nmodule rubber_feet() {\n    // Four anti-slip feet\n    for(x=[-40, 40])\n    for(y=[-7, 7])\n    translate([x, y, -8.5])\n    cylinder(h=2, r=2.5, $fn=16);\n}\n\nmodule access_lip() {\n    // Front access lip for easy cable insertion\n    translate([0, 11, 0])\n    rotate([0, 30, 0])\n    cube([100, 2, 5], center=true);\n}\n\nmodule ventilation_holes() {\n    // Small ventilation holes along bottom\n    for(i=[-4:4]) {\n        x_pos = i * 10;\n        translate([x_pos, 0, -7.5])\n        cylinder(h=2, r=1.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    gutter_base();\n    mounting_tabs();\n    cable_slots();\n    rubber_feet();\n    access_lip();\n    \n    difference() {\n        ventilation_holes();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "downspout",
    "openscad_code": "// Downspout Furniture - Office Supply Organizer (Medium Complexity)\n// A realistic downspout-inspired desk organizer with multiple compartments\n\n// Overall dimensions\noverall_height = 120;\nbase_width = 80;\nbase_depth = 60;\nwall_thickness = 2;\n\n// Downspout dimensions\nspout_width = 40;\nspout_depth = 30;\nspout_height = 100;\n\n// Compartment dimensions\nlarge_compartment_width = 35;\nlarge_compartment_depth = 25;\nlarge_compartment_height = 50;\nsmall_compartment_width = 20;\nsmall_compartment_height = 30;\n\n// Base module\nmodule base() {\n    difference() {\n        // Main base block\n        translate([0, 0, overall_height/2 - 5])\n            cube([base_width, base_depth, 10], center=true);\n        \n        // Rounded corners - subtract cylinders\n        for (x = [-base_width/2 + 5, base_width/2 - 5])\n            for (y = [-base_depth/2 + 5, base_depth/2 - 5])\n                translate([x, y, overall_height - 5])\n                    cylinder(h=12, r=5, center=true);\n    }\n}\n\n// Main downspout body\nmodule downspout_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, spout_height/2 + 10])\n            cube([spout_width, spout_depth, spout_height], center=true);\n        \n        // Inner hollow space\n        translate([0, 0, spout_height/2 + 10])\n            cube([spout_width - wall_thickness*2, \n                  spout_depth - wall_thickness*2, \n                  spout_height + 2], center=true);\n    }\n}\n\n// Front compartments\nmodule front_compartments() {\n    // Large compartment\n    difference() {\n        translate([0, spout_depth/2 + large_compartment_depth/2 + 5, \n                   large_compartment_height/2 + 10])\n            cube([large_compartment_width, large_compartment_depth, \n                  large_compartment_height], center=true);\n        \n        // Hollow it out\n        translate([0, spout_depth/2 + large_compartment_depth/2 + 5, \n                   large_compartment_height/2 + 10])\n            cube([large_compartment_width - wall_thickness*2, \n                  large_compartment_depth - wall_thickness, \n                  large_compartment_height - wall_thickness], center=true);\n    }\n    \n    // Two small compartments\n    for (i = [0, 1]) {\n        x_offset = (i == 0) ? -12 : 12;\n        difference() {\n            translate([x_offset, spout_depth/2 + small_compartment_width/2 + 5, \n                       small_compartment_height/2 + 10])\n                cube([small_compartment_width, small_compartment_width, \n                      small_compartment_height], center=true);\n            \n            translate([x_offset, spout_depth/2 + small_compartment_width/2 + 5, \n                       small_compartment_height/2 + 10])\n                cube([small_compartment_width - wall_thickness*2, \n                      small_compartment_width - wall_thickness, \n                      small_compartment_height - wall_thickness], center=true);\n        }\n    }\n}\n\n// Top opening detail\nmodule top_detail() {\n    // Flared top edge\n    difference() {\n        translate([0, 0, spout_height + 12])\n            cube([spout_width + 4, spout_depth + 4, 4], center=true);\n        \n        translate([0, 0, spout_height + 10])\n            cube([spout_width - 2, spout_depth - 2, 8], center=true);\n    }\n}\n\n// Support ribs for structure\nmodule support_ribs() {\n    // Vertical ribs on sides\n    for (side = [-1, 1]) {\n        translate([side * (spout_width/2 + 1), 0, spout_height/2 + 10])\n            cube([2, spout_depth - 4, spout_height], center=true);\n    }\n    \n    // Horizontal rib near bottom\n    translate([0, 0, 25])\n        cube([spout_width + 4, 2, 2], center=true);\n}\n\n// Drainage holes (decorative)\nmodule drainage_holes() {\n    for (h = [1:3]) {\n        z_pos = 15 + h * 25;\n        translate([0, spout_depth/2 - 1, z_pos])\n            rotate([90, 0, 0])\n                cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    downspout_body();\n    front_compartments();\n    top_detail();\n    support_ribs();\n    drainage_holes();\n}",
    "renders": true
  },
  {
    "office_supply": "pipe",
    "openscad_code": "// Pipe Desk Lamp - Medium complexity realistic style\n// Overall height: 120mm, Base: 60mm diameter\n\n// Constants\n$fn = 32;\nwall = 2;\n\nmodule pipe(od, length) {\n    difference() {\n        cylinder(h=length, d=od, center=false);\n        translate([0, 0, -1])\n            cylinder(h=length+2, d=od-wall*2, center=false);\n    }\n}\n\nmodule elbow(od, angle=90) {\n    rotate([0, 0, 0])\n        difference() {\n            rotate_extrude(angle=angle, convexity=10)\n                translate([od/2, 0, 0])\n                    circle(d=od);\n            rotate_extrude(angle=angle, convexity=10)\n                translate([od/2-wall, 0, 0])\n                    circle(d=od-wall*2);\n        }\n}\n\nmodule flange(od) {\n    difference() {\n        cylinder(h=6, d=od*2.5, center=false);\n        translate([0, 0, -1])\n            cylinder(h=8, d=od*2.5-wall*2, center=false);\n    }\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n            translate([od*1.1, 0, 0])\n                cylinder(h=6.1, d=4, center=false);\n    }\n}\n\nmodule lamp_shade() {\n    difference() {\n        cylinder(h1=25, h2=20, r1=20, r2=15, center=false);\n        translate([0, 0, -1])\n            cylinder(h1=27, h2=22, r1=18, r2=13, center=false);\n    }\n}\n\nmodule bulb() {\n    color(\"yellow\")\n    translate([0, 0, 2])\n        sphere(d=10);\n}\n\n// Base assembly\ntranslate([0, 0, 0])\n    flange(12);\n\ntranslate([0, 0, 6])\n    pipe(12, 30);\n\ntranslate([0, 0, 36])\n    rotate([90, 0, 0])\n        elbow(12, 90);\n\ntranslate([0, 30, 36])\n    rotate([0, 90, 0])\n        pipe(12, 40);\n\ntranslate([0, 30, 76])\n    rotate([-90, 0, 0])\n        elbow(12, 90);\n\ntranslate([0, 0, 76])\n    pipe(12, 20);\n\ntranslate([0, 0, 96])\n    rotate([0, 0, 0])\n        difference() {\n            cylinder(h=8, d=20, center=false);\n            translate([0, 0, -1])\n                cylinder(h=10, d=16, center=false);\n        }\n\ntranslate([0, 0, 104])\n    lamp_shade();\n\ntranslate([0, 0, 104])\n    bulb();\n\n// Switch detail\ntranslate([0, 30, 36+6])\n    rotate([0, 90, 0])\n        difference() {\n            cube([8, 6, 4], center=true);\n            cube([6, 4.1, 2.1], center=true);\n        }",
    "renders": true
  },
  {
    "office_supply": "duct",
    "openscad_code": "// Duct Furniture - Cable Management Duct for Office Desk\n// Realistic style, medium complexity, 3D printable\n\n// Parameters\nwall_thickness = 2;\nduct_width = 40;\nduct_height = 30;\nduct_length = 120;\nmounting_hole_diameter = 4;\nmounting_tab_width = 8;\nslot_width = 3;\nslot_spacing = 10;\n\n// Main duct body\nmodule duct_body() {\n    difference() {\n        // Outer shell\n        cube([duct_length, duct_width, duct_height], center=false);\n        \n        // Inner hollow space\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([duct_length - 2*wall_thickness, duct_width - 2*wall_thickness, duct_height - wall_thickness], center=false);\n        \n        // Cable entry slots on top\n        for(i = [20:slot_spacing:duct_length-20]) {\n            translate([i, duct_width - wall_thickness, duct_height - wall_thickness])\n                cube([slot_width, wall_thickness, wall_thickness], center=false);\n        }\n    }\n}\n\n// Mounting tabs with screw holes\nmodule mounting_tabs() {\n    // Left tab\n    translate([-mounting_tab_width, 0, 0])\n        difference() {\n            cube([mounting_tab_width, duct_width, wall_thickness*2], center=false);\n            translate([mounting_tab_width/2, duct_width/2, wall_thickness])\n                cylinder(h=wall_thickness*2 + 1, d=mounting_hole_diameter, $fn=16);\n        }\n    \n    // Right tab\n    translate([duct_length, 0, 0])\n        difference() {\n            cube([mounting_tab_width, duct_width, wall_thickness*2], center=false);\n            translate([mounting_tab_width/2, duct_width/2, wall_thickness])\n                cylinder(h=wall_thickness*2 + 1, d=mounting_hole_diameter, $fn=16);\n        }\n}\n\n// Snap-fit cover\nmodule duct_cover() {\n    difference() {\n        // Cover plate\n        translate([0, 0, duct_height])\n            cube([duct_length, duct_width, wall_thickness], center=false);\n        \n        // Snap-fit grooves\n        for(i = [10:20:duct_length-10]) {\n            translate([i, duct_width/2 - 2, duct_height])\n                cube([2, 4, wall_thickness + 1], center=false);\n        }\n    }\n    \n    // Hinge pins\n    translate([5, duct_width/2 - 1, duct_height])\n        cylinder(h=2, d=2, $fn=16);\n    translate([duct_length - 5, duct_width/2 - 1, duct_height])\n        cylinder(h=2, d=2, $fn=16);\n}\n\n// Cable exit ports\nmodule exit_ports() {\n    // Front port\n    translate([duct_length/2 - 10, -wall_thickness, wall_thickness*2])\n        difference() {\n            cube([20, wall_thickness, duct_height - wall_thickness*3], center=false);\n            translate([10, -1, (duct_height - wall_thickness*3)/2])\n                cube([15, wall_thickness + 2, duct_height - wall_thickness*5], center=true);\n        }\n    \n    // Rear port\n    translate([duct_length/2 - 10, duct_width, wall_thickness*2])\n        difference() {\n            cube([20, wall_thickness, duct_height - wall_thickness*3], center=false);\n            translate([10, 1, (duct_height - wall_thickness*3)/2])\n                cube([15, wall_thickness + 2, duct_height - wall_thickness*5], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    duct_body();\n    mounting_tabs();\n    exit_ports();\n}\n    \n// Optional cover (comment out to print separately)\n// %duct_cover();",
    "renders": true
  },
  {
    "office_supply": "vent",
    "openscad_code": "// Office desk vent unit – 80 x 60 x 18 mm (printable, 2 mm walls)\n\nwall = 2;                     // uniform wall thickness for 3-D printing\nbody_w = 80; body_d = 60; body_h = 18;\n\nmodule frame() {\n    // outer shell with chamfered top edge\n    difference() {\n        // main box\n        cube([body_w, body_d, body_h], center=true);\n        // hollow inside\n        translate([0,0,-0.5])\n            cube([body_w-wall*2, body_d-wall*2, body_h+1], center=true);\n    }\n}\n\nmodule vent_slats() {\n    // horizontal slats, slightly angled for airflow\n    slat_w = body_d - wall*2;\n    slat_h = 1.5;\n    gap = 3;\n    n = floor((body_h - wall*2) / (slat_h + gap));\n    for(i=[0:n-1]) {\n        translate([0, 0, -body_h/2 + wall + i*(slat_h + gap) + slat_h/2])\n            rotate([0,-10,0])  // 10° tilt for realistic look\n                cube([body_w-wall*2, slat_w, slat_h], center=true);\n    }\n}\n\nmodule screw_holes() {\n    // four countersunk holes for mounting screws\n    hole_r = 1.5;\n    inset = 8;\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*(body_w/2-inset), y*(body_d/2-inset), 0])\n                cylinder(h=body_h, r=hole_r+0.2, center=true, $fn=12);\n}\n\nmodule support_feet() {\n    // four small feet for furniture stability\n    foot_r = 3; foot_h = 2;\n    for(x=[-1,1])\n        for(y=[-1,1])\n            translate([x*(body_w/2-foot_r-2), y*(body_d/2-foot_r-2), -body_h/2-foot_h/2])\n                cylinder(h=foot_h, r=foot_r, $fn=12);\n}\n\nunion() {\n    frame();\n    vent_slats();\n    support_feet();\n    difference() {\n        cube([body_w, body_d, body_h], center=true);  // dummy box for holes\n        screw_holes();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "valve",
    "openscad_code": "// Valve Furniture Item - Realistic Style, Medium Complexity\n// Dimensions: 100mm long, 60mm wide, 80mm tall\n\n$fn = 50;\nwall_thickness = 2;\n\n// Main valve body\nmodule valve_body() {\n    union() {\n        // Central cylindrical housing\n        cylinder(h = 40, r1 = 25, r2 = 25, center = true);\n        \n        // Inlet pipe on left side\n        translate([-40, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 25, r1 = 12, r2 = 12);\n        \n        // Outlet pipe on right side\n        translate([40, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 25, r1 = 12, r2 = 12);\n            \n        // Flanges for pipe connections\n        for (x = [-50, 50]) {\n            translate([x, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h = 4, r1 = 18, r2 = 18);\n        }\n    }\n}\n\n// Valve handle assembly\nmodule valve_handle() {\n    union() {\n        // Handle stem\n        translate([0, 0, 25])\n            cylinder(h = 30, r1 = 8, r2 = 8);\n            \n        // Handle wheel\n        translate([0, 0, 45])\n            cylinder(h = 8, r1 = 20, r2 = 20);\n            \n        // Handle spokes\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([15, 0, 49])\n                    cube([10, 2, 8], center = true);\n        }\n        \n        // Grip knob\n        translate([30, 0, 49])\n            rotate([90, 0, 0])\n            cylinder(h = 12, r1 = 4, r2 = 4);\n    }\n}\n\n// Mounting bracket for furniture attachment\nmodule mounting_bracket() {\n    difference() {\n        // Main bracket plate\n        translate([0, 0, -25])\n            cube([80, 50, 4], center = true);\n            \n        // Mounting holes\n        for (x = [-35, 35]) {\n            for (y = [-20, 20]) {\n                translate([x, y, -23])\n                    cylinder(h = 5, r1 = 3, r2 = 3);\n            }\n        }\n    }\n}\n\n// Control indicators\nmodule indicators() {\n    // Flow direction arrows on pipes\n    for (x = [-35, 35]) {\n        translate([x, 0, 8])\n            rotate([90, 0, x > 0 ? 180 : 0])\n            linear_extrude(height = 2) {\n                polygon(points = [[0, 0], [-5, -3], [-5, 3]]);\n            }\n    }\n    \n    // Valve position markers on body\n    translate([0, 0, 22])\n        rotate([90, 0, 0])\n        cylinder(h = 1, r1 = 28, r2 = 28);\n        \n    // Open/Closed indicators\n    translate([0, 26, 22])\n        cube([8, 2, 1], center = true);\n    translate([0, -26, 22])\n        cube([8, 2, 1], center = true);\n}\n\n// Main assembly\nunion() {\n    valve_body();\n    valve_handle();\n    mounting_bracket();\n    indicators();\n}",
    "renders": true
  },
  {
    "office_supply": "cable",
    "openscad_code": "// Cable Management Tray - Desk-mounted under-desk organizer\n// Realistic style with medium complexity\n\nmodule tray_side(length=90, height=25, thickness=2) {\n    // Side panel with cable entry slots\n    difference() {\n        // Main side panel\n        cube([thickness, height, length]);\n        \n        // Create 3 cable entry slots\n        for(i = [0:2]) {\n            translate([thickness+0.1, height-8, 15 + i*25])\n                rotate([0, 90, 0])\n                    cylinder(h=thickness+0.2, r=6, $fn=20);\n        }\n    }\n}\n\nmodule tray_bottom(width=70, length=90, thickness=2) {\n    // Base with drainage holes and mounting points\n    difference() {\n        cube([width, thickness, length]);\n        \n        // Drainage holes\n        for(x = [15:20:width-15]) {\n            for(z = [15:20:length-15]) {\n                translate([x, -0.1, z])\n                    cylinder(h=thickness+0.2, r=2, $fn=10);\n            }\n        }\n        \n        // Mounting holes (4 corners)\n        for(x = [10, width-10]) {\n            for(z = [10, length-10]) {\n                translate([x, -0.1, z])\n                    cylinder(h=thickness+0.2, r=2.5, $fn=10);\n            }\n        }\n    }\n}\n\nmodule cable_clamp(width=70, thickness=2) {\n    // Removable cable clamp bar\n    difference() {\n        // Main clamp bar\n        translate([-5, 0, 0])\n            cube([width+10, 8, 8]);\n            \n        // Cable slots\n        for(i = [0:4]) {\n            translate([10 + i*12, 4, 4])\n                rotate([90, 0, 0])\n                    cylinder(h=8, r1=3, r2=4.5, $fn=20);\n        }\n        \n        // Mounting holes\n        translate([width/2, -0.1, 4])\n            rotate([0, 90, 0])\n                cylinder(h=width+10, r=2.5, $fn=10);\n        \n        translate([width/2-20, -0.1, 4])\n            rotate([0, 90, 0])\n                cylinder(h=width+10, r=2.5, $fn=10);\n    }\n}\n\nmodule front_lip(width=70, thickness=2) {\n    // Curved front lip to prevent cables falling out\n    difference() {\n        union() {\n            // Main lip\n            translate([0, 0, 0])\n                cube([width, 12, thickness]);\n                \n            // Curved top\n            for(i = [0:width/2]) {\n                translate([i*2, 12, 0])\n                    sphere(r=2, $fn=12);\n            }\n        }\n        \n        // Cable access notches\n        for(i = [0:2]) {\n            translate([20 + i*15, -0.1, -0.1])\n                cube([10, 14, thickness+0.2]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Bottom tray\n    tray_bottom(70, 90, 2);\n    \n    // Left side\n    translate([0, 2, 0])\n        tray_side(90, 25, 2);\n    \n    // Right side\n    translate([70-2, 2, 0])\n        tray_side(90, 25, 2);\n    \n    // Back panel\n    translate([2, 2, 90-2])\n        cube([70-4, 25-2, 2]);\n    \n    // Front lip\n    translate([2, 2, 0])\n        front_lip(70-4, 2);\n    \n    // Cable clamp positioned above\n    translate([5, 30, 10])\n        rotate([0, 0, 90])\n            cable_clamp(70, 2);\n    \n    // Mounting brackets\n    for(side = [0, 1]) {\n        translate([side*70, 15, 45])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=15, r=4, $fn=20);\n                    cylinder(h=15, r=2, $fn=20);\n                }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "switch",
    "openscad_code": "// Office Switch Furniture Item - Realistic Style, Medium Complexity\n// Dimensions: 86mm x 86mm x 32mm (standard wall switch size)\n\nwall_thickness = 2;\nswitch_width = 86;\nswitch_height = 86;\nswitch_depth = 32;\nplate_thickness = 3;\ntoggle_width = 28;\ntoggle_height = 15;\ntoggle_depth = 7;\nscrew_diameter = 3.5;\nscrew_head_diameter = 7;\nscrew_head_depth = 2;\n\nmodule switch_plate() {\n    difference() {\n        // Main plate body\n        cube([switch_width, switch_height, plate_thickness], center=true);\n        \n        // Toggle opening\n        translate([0, 0, -0.1])\n        cube([toggle_width + 4, toggle_height + 4, plate_thickness + 0.2], center=true);\n        \n        // Top screw hole\n        translate([switch_width/2 - 10, switch_height/2 - 10, -0.1])\n        cylinder(h=plate_thickness + 0.2, d=screw_diameter, $fn=20);\n        \n        // Bottom screw hole\n        translate([switch_width/2 - 10, -switch_height/2 + 10, -0.1])\n        cylinder(h=plate_thickness + 0.2, d=screw_diameter, $fn=20);\n        \n        // Top screw counterbore\n        translate([switch_width/2 - 10, switch_height/2 - 10, -0.1])\n        cylinder(h=screw_head_depth + 0.2, d=screw_head_diameter, $fn=20);\n        \n        // Bottom screw counterbore\n        translate([switch_width/2 - 10, -switch_height/2 + 10, -0.1])\n        cylinder(h=screw_head_depth + 0.2, d=screw_head_diameter, $fn=20);\n    }\n}\n\nmodule switch_body() {\n    difference() {\n        // Main body\n        translate([0, 0, -(switch_depth - plate_thickness)/2])\n        cube([switch_width - 4, switch_height - 4, switch_depth - plate_thickness], center=true);\n        \n        // Internal cavity\n        translate([0, 0, -(switch_depth - plate_thickness)/2 + 2])\n        cube([switch_width - 8, switch_height - 8, switch_depth - plate_thickness - 4], center=true);\n        \n        // Wire entry holes\n        for(i = [-1, 1]) {\n            translate([0, i * (switch_height/2 - 6), -(switch_depth - plate_thickness)/2])\n            rotate([90, 0, 0])\n            cylinder(h=10, d=6, $fn=20);\n        }\n    }\n}\n\nmodule toggle_switch() {\n    // Toggle base\n    translate([0, 0, plate_thickness/2 + toggle_depth/2])\n    cube([toggle_width, toggle_height, toggle_depth], center=true);\n    \n    // Toggle lever\n    translate([0, 0, plate_thickness/2 + toggle_depth + 2])\n    cube([toggle_width - 8, toggle_height - 10, 12], center=true);\n    \n    // Toggle grip ridges\n    for(i = [-1, 0, 1]) {\n        translate([0, i * 3, plate_thickness/2 + toggle_depth + 8])\n        cube([toggle_width - 6, 0.5, 2], center=true);\n    }\n}\n\nmodule mounting_tabs() {\n    // Top tab\n    translate([0, switch_height/2 - wall_thickness, -(switch_depth - plate_thickness)/2 - 2])\n    cube([switch_width - 20, wall_thickness * 2, 4], center=true);\n    \n    // Bottom tab\n    translate([0, -switch_height/2 + wall_thickness, -(switch_depth - plate_thickness)/2 - 2])\n    cube([switch_width - 20, wall_thickness * 2, 4], center=true);\n}\n\n// Assembly\nunion() {\n    // Main switch components\n    switch_plate();\n    translate([0, 0, plate_thickness/2])\n    switch_body();\n    toggle_switch();\n    \n    // Mounting hardware\n    mounting_tabs();\n    \n    // Decorative bevel on plate edges\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([switch_width/2 - 2, switch_height/2 - 2, plate_thickness/2])\n        cylinder(h=plate_thickness, d1=4, d2=2, $fn=20);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "outlet",
    "openscad_code": "// Outlet power strip with cord wrap and cable management\n// Overall dimensions: 140mm x 70mm x 40mm\n\n// Wall thickness\nwall = 2;\n\n// Main housing\nmodule housing() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 20]) cube([140, 70, 40], center=true);\n        \n        // Inner cavity\n        translate([0, 0, 22]) cube([136, 66, 36], center=true);\n        \n        // Mounting screw holes\n        for(x=[-60, 60]) {\n            translate([x, 25, 0]) cylinder(r=3, h=40, center=true);\n            translate([x, -25, 0]) cylinder(r=3, h=40, center=true);\n        }\n    }\n}\n\n// Outlet slots\nmodule outlet_slots() {\n    // Three outlet slots\n    for(x=[-40, 0, 40]) {\n        // Top slot\n        translate([x, 15, 40]) {\n            difference() {\n                cube([22, 6, wall], center=true);\n                translate([0, 0, 0]) cube([18, 2, wall+0.1], center=true);\n            }\n        }\n        \n        // Bottom slot\n        translate([x, -15, 40]) {\n            difference() {\n                cube([22, 6, wall], center=true);\n                translate([0, 0, 0]) cube([18, 2, wall+0.1], center=true);\n            }\n        }\n        \n        // Ground hole\n        translate([x, 0, 40]) cylinder(r=2.5, h=wall+0.1, center=true);\n    }\n}\n\n// Switch\nmodule power_switch() {\n    translate([-55, 0, 40]) {\n        difference() {\n            cube([15, 25, wall+0.1], center=true);\n            translate([0, 0, 0]) cube([11, 21, wall+0.2], center=true);\n        }\n    }\n}\n\n// LED indicator\nmodule led_indicator() {\n    translate([-55, 15, 40]) {\n        cylinder(r=3, h=wall+0.1, center=true);\n    }\n}\n\n// Cord wrap posts\nmodule cord_wrap() {\n    // Two posts for wrapping excess cord\n    for(y=[-20, 20]) {\n        translate([-65, y, 20]) {\n            difference() {\n                cylinder(r=4, h=40, center=true);\n                cylinder(r=2, h=42, center=true);\n            }\n        }\n    }\n}\n\n// Cable entry strain relief\nmodule strain_relief() {\n    translate([70, 0, 20]) {\n        difference() {\n            cylinder(r=8, h=40, center=true);\n            cylinder(r=5, h=42, center=true);\n        }\n    }\n}\n\n// Ventilation slots\nmodule ventilation() {\n    // Side ventilation\n    for(z=[10, 30]) {\n        translate([0, 35, z]) {\n            rotate([90, 0, 0]) cube([130, 2, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nhousing();\noutlet_slots();\npower_switch();\nled_indicator();\ncord_wrap();\nstrain_relief();\nventilation();",
    "renders": true
  },
  {
    "office_supply": "socket",
    "openscad_code": "// Office Desk Power Socket with Surge Protection\n// Realistic style, medium complexity\n\n// Overall dimensions\nsocket_width = 120;\nsocket_depth = 60;\nsocket_height = 40;\n\n// Wall thickness\nwall_thick = 2;\n\n// Power socket module with 3 outlets\nmodule power_socket() {\n    // Main housing base\n    difference() {\n        // Outer shell\n        translate([0, 0, socket_height/2])\n            cube([socket_width, socket_depth, socket_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, socket_height/2 + wall_thick])\n            cube([socket_width - 2*wall_thick, socket_depth - 2*wall_thick, socket_height - wall_thick], center=true);\n    }\n    \n    // Mounting flanges\n    for(x = [-socket_width/2 + 15, socket_width/2 - 15]) {\n        translate([x, socket_depth/2, socket_height/2])\n            cube([20, 8, socket_height], center=true);\n    }\n    \n    // Screw holes in flanges\n    for(x = [-socket_width/2 + 15, socket_width/2 - 15]) {\n        translate([x, socket_depth/2 + 4, socket_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=2.5, center=true);\n    }\n    \n    // Power outlets (3 outlets)\n    for(pos = [-socket_width/3, 0, socket_width/3]) {\n        // Outlet face\n        translate([pos, -socket_depth/2 + wall_thick + 2, socket_height/2])\n            cube([22, wall_thick, 22], center=true);\n        \n        // Outlet holes (3 prongs)\n        // Ground pin\n        translate([pos - 6.5, -socket_depth/2 + wall_thick + 1, socket_height/2 + 7])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thick + 2, r=2.5, center=true);\n        \n        // Power pins\n        for(pin_x = [-3.5, 3.5]) {\n            translate([pos + pin_x, -socket_depth/2 + wall_thick + 1, socket_height/2 - 7])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thick + 2, r=2, center=true);\n        }\n    }\n    \n    // Power switch\n    translate([socket_width/2 - 20, socket_depth/2 - 15, socket_height/2])\n        cube([10, wall_thick + 1, 12], center=true);\n    \n    // Switch button\n    translate([socket_width/2 - 20, socket_depth/2 - 15 + wall_thick/2, socket_height/2 + 3])\n        cube([8, 3, 6], center=true);\n    \n    // LED indicator\n    translate([socket_width/2 - 20, socket_depth/2 - 25, socket_height/2 + 6])\n        sphere(r=2);\n    \n    // Cable entry\n    translate([-socket_width/2 + 10, socket_depth/2, socket_height/4])\n        rotate([0, 90, 0])\n            cylinder(h=wall_thick + 1, r=6, center=true);\n    \n    // Ventilation slots\n    for(slot_y = [-socket_depth/4, 0, socket_depth/4]) {\n        translate([0, slot_y, socket_height - wall_thick/2])\n            cube([socket_width - 20, 2, wall_thick], center=true);\n    }\n    \n    // Label area\n    translate([0, socket_depth/2 - wall_thick/2, socket_height/4])\n        cube([socket_width - 30, wall_thick, 15], center=true);\n    \n    // Rubber feet\n    for(x = [-socket_width/2 + 10, socket_width/2 - 10]) {\n        for(y = [-socket_depth/2 + 10, socket_depth/2 - 10]) {\n            translate([x, y, wall_thick/2])\n                cylinder(h=wall_thick, r=3, center=true);\n        }\n    }\n}\n\n// Render the socket\npower_socket();",
    "renders": true
  },
  {
    "office_supply": "fixture",
    "openscad_code": "// Office Desk Lamp Fixture with Articulated Arm\n// Realistic medium-complexity 3D printable model\n\n$fn = 36;\n\n// Overall dimensions\nbase_dia = 80;\nbase_height = 8;\narm_length1 = 45;\narm_length2 = 40;\njoint_size = 12;\nlamp_dia = 35;\nlamp_depth = 25;\n\n// Wall thickness\nwall = 2;\n\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_height, d=base_dia, center=false);\n        \n        // Cable hole\n        translate([0, 0, -1])\n            cylinder(h=base_height+2, d=6, center=false);\n        \n        // Mounting holes\n        for(a = [0:120:359]) {\n            rotate([0, 0, a])\n                translate([base_dia/2 - 10, 0, -1])\n                    cylinder(h=base_height+2, d=3.5, center=false);\n        }\n        \n        // Weight reduction cavity (hollow base)\n        translate([0, 0, wall])\n            cylinder(h=base_height-wall, d=base_dia-wall*2, center=false);\n    }\n}\n\nmodule joint() {\n    difference() {\n        // Main joint sphere\n        sphere(d=joint_size);\n        \n        // Hollow center\n        sphere(d=joint_size-wall*2);\n        \n        // Pin holes for arm attachment\n        rotate([0, 90, 0])\n            cylinder(h=joint_size+2, d=4, center=true);\n    }\n}\n\nmodule arm_segment(length) {\n    difference() {\n        // Main arm tube\n        translate([length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=length, d=8, center=true);\n        \n        // Hollow tube\n        translate([length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=length+2, d=8-wall*2, center=true);\n        \n        // Cable channel\n        translate([length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=length+2, d=4, center=true);\n    }\n}\n\nmodule lamp_head() {\n    difference() {\n        // Outer shell\n        translate([0, 0, lamp_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h=lamp_depth, d=lamp_dia, center=true);\n        \n        // Inner cavity\n        translate([0, 0, lamp_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h=lamp_depth+1, d=lamp_dia-wall*2, center=true);\n        \n        // LED recess\n        translate([0, 0, lamp_depth-1])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=lamp_dia-10, center=false);\n        \n        // Heat vents\n        for(a = [0:45:359]) {\n            rotate([0, 0, a])\n                translate([lamp_dia/2-2, 0, lamp_depth/2])\n                    cube([4, 1.5, lamp_depth-4], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // First joint\n    translate([0, 0, base_height])\n        joint();\n    \n    // First arm segment\n    translate([0, 0, base_height])\n        rotate([0, 0, 30])\n            arm_segment(arm_length1);\n    \n    // Second joint\n    translate([0, 0, base_height])\n        rotate([0, 0, 30])\n            translate([arm_length1, 0, 0])\n                rotate([0, 45, 0])\n                    joint();\n    \n    // Second arm segment\n    translate([0, 0, base_height])\n        rotate([0, 0, 30])\n            translate([arm_length1, 0, 0])\n                rotate([0, 45, 0])\n                    arm_segment(arm_length2);\n    \n    // Lamp head\n    translate([0, 0, base_height])\n        rotate([0, 0, 30])\n            translate([arm_length1, 0, 0])\n                rotate([0, 45, 0])\n                    translate([arm_length2, 0, 0])\n                        rotate([0, -45, 0])\n                            lamp_head();\n}",
    "renders": true
  },
  {
    "office_supply": "bracket",
    "openscad_code": "// Furniture Bracket for Shelf Support\n// Medium complexity 3D printable bracket with realistic details\n// Overall size: 100mm x 100mm x 120mm\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Main bracket body\nmodule bracket_base() {\n    // Vertical support plate\n    difference() {\n        // Main plate\n        translate([0, 0, 60])\n            cube([100, wall_thickness, 120], center=true);\n        \n        // Mounting holes - vertical plate\n        for (i = [-1, 1]) {\n            translate([i * 30, 0, 30])\n                cylinder(h=wall_thickness+1, r=3, center=true);\n            translate([i * 30, 0, 90])\n                cylinder(h=wall_thickness+1, r=3, center=true);\n        }\n    }\n    \n    // Horizontal shelf support\n    difference() {\n        // Main horizontal plate\n        translate([0, 50, 0])\n            cube([100, 100, wall_thickness], center=true);\n        \n        // Mounting holes - horizontal plate\n        for (i = [-1, 1]) {\n            translate([i * 30, 0, 0])\n                cylinder(h=wall_thickness+1, r=3, center=true);\n        }\n    }\n}\n\n// Reinforcement gusset\nmodule gusset() {\n    // Triangular support between vertical and horizontal\n    difference() {\n        // Main triangular gusset\n        polyhedron(\n            points = [\n                [-48, 1, 2],      // bottom left\n                [48, 1, 2],       // bottom right\n                [48, 1, 60],      // top right\n                [-48, 1, 60],     // top left\n                [0, 49, 2],       // front center\n                [0, 49, 60]       // front center top\n            ],\n            faces = [\n                [0,1,2,3],        // back face\n                [0,4,1],          // bottom face\n                [1,4,2],          // right face\n                [2,4,5],          // front slant\n                [3,5,0],          // left face\n                [3,2,5]           // top face\n            ]\n        );\n        \n        // Lightening holes in gusset\n        translate([0, 25, 30])\n            rotate([90, 0, 0])\n            cylinder(h=50, r=4, center=true);\n    }\n}\n\n// Edge reinforcement ribs\nmodule edge_ribs() {\n    // Left edge rib\n    translate([-48, 25, 30])\n        cube([wall_thickness, 48, 58]);\n    \n    // Right edge rib\n    translate([48, 25, 30])\n        cube([wall_thickness, 48, 58]);\n}\n\n// Corner fillets for printability\nmodule corner_fillets() {\n    // Bottom front corners\n    translate([-48, 1, 1])\n        cylinder(h=wall_thickness*2, r=2);\n    translate([48, 1, 1])\n        cylinder(h=wall_thickness*2, r=2);\n    \n    // Top rear corners\n    translate([-48, 1, 119])\n        cylinder(h=wall_thickness*2, r=2);\n    translate([48, 1, 119])\n        cylinder(h=wall_thickness*2, r=2);\n}\n\n// Assembly\nunion() {\n    // Main bracket structure\n    bracket_base();\n    \n    // Structural reinforcements\n    gusset();\n    edge_ribs();\n    \n    // Printability features\n    corner_fillets();\n}",
    "renders": true
  },
  {
    "office_supply": "plate",
    "openscad_code": "// Office Plate Furniture - Document Tray / Paper Organizer\n// Realistic style with medium complexity\n// Overall dimensions: 240 x 180 x 70mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main tray body\nmodule tray_body(width, depth, height) {\n    // Base plate\n    difference() {\n        cube([width, depth, wall], center=false);\n        \n        // Rounded corners on base\n        translate([wall, wall, -1]) cylinder(h=wall+2, r=wall, center=false);\n        translate([width-wall, wall, -1]) cylinder(h=wall+2, r=wall, center=false);\n        translate([wall, depth-wall, -1]) cylinder(h=wall+2, r=wall, center=false);\n        translate([width-wall, depth-wall, -1]) cylinder(h=wall+2, r=wall, center=false);\n    }\n    \n    // Front wall\n    translate([0, 0, wall]) cube([width, wall, height-wall]);\n    \n    // Back wall\n    translate([0, depth-wall, wall]) cube([width, wall, height-wall]);\n    \n    // Left wall\n    translate([0, 0, wall]) cube([wall, depth, height-wall]);\n    \n    // Right wall\n    translate([width-wall, 0, wall]) cube([wall, depth, height-wall]);\n}\n\n// Finger grip cutouts\nmodule finger_grips() {\n    grip_width = 20;\n    grip_depth = 10;\n    grip_height = 8;\n    \n    // Front grips\n    for(x=[60, 120, 180]) {\n        translate([x, -1, wall+height/3]) \n            cube([grip_width, grip_depth+2, grip_height], center=true);\n    }\n    \n    // Back grips\n    for(x=[60, 120, 180]) {\n        translate([x, depth+1, wall+height/3]) \n            cube([grip_width, grip_depth+2, grip_height], center=true);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    rib_width = 3;\n    rib_spacing = 30;\n    \n    // Horizontal ribs\n    for(y=[30, 60, 90, 120, 150]) {\n        translate([wall, y, wall]) \n            cube([width-2*wall, rib_width, height-2*wall]);\n    }\n    \n    // Vertical ribs\n    for(x=[60, 120, 180]) {\n        translate([x, wall, wall]) \n            cube([rib_width, depth-2*wall, height-2*wall]);\n    }\n}\n\n// Stack alignment pegs\nmodule stack_pegs() {\n    peg_r = 4;\n    peg_h = 3;\n    \n    // Bottom peg holes\n    for(x=[40, 140, 200]) {\n        for(y=[40, 140]) {\n            translate([x, y, -1]) \n                cylinder(h=wall+2, r=peg_r, center=false);\n        }\n    }\n    \n    // Top pegs\n    for(x=[40, 140, 200]) {\n        for(y=[40, 140]) {\n            translate([x, y, height]) \n                cylinder(h=peg_h, r=peg_r-0.5, center=false);\n        }\n    }\n}\n\n// Document stop lip\nmodule doc_stop() {\n    lip_height = 5;\n    \n    translate([wall, wall, height-lip_height]) \n        cube([width-2*wall, 8, lip_height]);\n}\n\n// Main assembly\nwidth = 240;\ndepth = 180;\nheight = 70;\n\nunion() {\n    difference() {\n        // Main tray structure\n        tray_body(width, depth, height);\n        \n        // Interior cavity\n        translate([wall, wall, wall]) \n            cube([width-2*wall, depth-2*wall, height-wall]);\n        \n        // Finger grips\n        finger_grips();\n        \n        // Bottom peg holes\n        stack_pegs();\n    }\n    \n    // Reinforcement structure\n    ribs();\n    \n    // Document stop\n    doc_stop();\n}",
    "renders": true
  },
  {
    "office_supply": "angle",
    "openscad_code": "// Angle bracket furniture support - realistic corner brace for desks/shelving\n// Overall size: 100x100x50mm, wall thickness 2mm throughout\n\n$fn = 32;\n\n// Main L-bracket body\nmodule bracket_body() {\n    difference() {\n        // Outer shape - L profile\n        union() {\n            // Vertical leg\n            translate([0, 0, 0])\n                cube([50, 2, 50], center=false);\n            // Horizontal leg\n            translate([0, 0, 0])\n                cube([2, 50, 50], center=false);\n            // Corner reinforcement\n            translate([0, 0, 0])\n                cube([15, 15, 50], center=false);\n        }\n        \n        // Inner cutouts for weight reduction\n        translate([4, 4, 4])\n            cube([42, 42, 42], center=false);\n    }\n}\n\n// Mounting flanges with screw holes\nmodule mounting_flange(rotation, position) {\n    rotate([0, 0, rotation])\n    translate(position)\n    difference() {\n        // Flange base\n        cube([20, 2, 8], center=false);\n        \n        // Screw hole (4mm diameter)\n        translate([10, -1, 4])\n            rotate([90, 0, 0])\n            cylinder(h=4, d=4.2, center=true);\n    }\n}\n\n// Ribs for structural reinforcement\nmodule support_rib(x, y, angle) {\n    translate([x, y, 25])\n    rotate([0, 0, angle])\n    cube([30, 2, 25], center=true);\n}\n\n// Assembly\nunion() {\n    // Main bracket\n    bracket_body();\n    \n    // Mounting flanges - 4 total\n    mounting_flange(0, [30, -1, 42]);      // Top vertical\n    mounting_flange(90, [-1, 30, 42]);     // Top horizontal\n    mounting_flange(180, [30, 51, 0]);     // Bottom vertical\n    mounting_flange(270, [51, 30, 0]);     // Bottom horizontal\n    \n    // Structural ribs\n    support_rib(25, 2, 135);\n    support_rib(2, 25, 45);\n    \n    // Decorative chamfer on top edges\n    translate([0, 0, 48])\n    cube([52, 52, 2], center=false);\n    translate([2, 2, 48])\n    cube([48, 48, 2], center=false);\n}",
    "renders": true
  },
  {
    "office_supply": "channel",
    "openscad_code": "// Channel furniture item - realistic style office desk cable management channel\n// Overall dimensions: 120mm x 40mm x 30mm\n\n$fn = 32;  // Smooth curves\n\nmodule channel_body() {\n    difference() {\n        // Main channel body - hollow rectangular profile\n        translate([0, 0, 15])\n            cube([120, 40, 30], center=true);\n        \n        // Internal cavity for cables\n        translate([0, 0, 15])\n            cube([116, 36, 28], center=true);\n    }\n}\n\nmodule mounting_tabs() {\n    // Left mounting tab\n    translate([5, -20, 15])\n        cube([10, 5, 8], center=true);\n    \n    // Right mounting tab\n    translate([115, -20, 15])\n        cube([10, 5, 8], center=true);\n    \n    // Mounting holes on tabs\n    translate([5, -20, 15])\n        cylinder(h=10, r=1.5, center=true);\n    \n    translate([115, -20, 15])\n        cylinder(h=10, r=1.5, center=true);\n}\n\nmodule cable_entry_slots() {\n    // Front entry slots for cables\n    for(i = [30:30:90]) {\n        translate([i, 20, 15])\n            cube([25, 2, 20], center=true);\n    }\n}\n\nmodule strain_relief_bars() {\n    // Curved strain relief bars at cable entries\n    for(i = [30:30:90]) {\n        // Left bar\n        translate([i-10, 20, 25])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=3, r2=3, center=true);\n        \n        // Right bar\n        translate([i+10, 20, 25])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=3, r2=3, center=true);\n    }\n}\n\nmodule textured_grip_surface() {\n    // Raised grip pattern on top surface\n    for(x = [10:10:110]) {\n        for(y = [-15:5:15]) {\n            translate([x, y, 30.5])\n                cube([8, 3, 0.5], center=true);\n        }\n    }\n}\n\nmodule support_ribs() {\n    // Internal support ribs for structural integrity\n    for(pos = [20:20:100]) {\n        translate([pos, 0, 15])\n            cube([2, 36, 28], center=true);\n    }\n}\n\nmodule rounded_edges() {\n    // Add rounded edges to make it more realistic\n    translate([0, 0, 15])\n        minkowski() {\n            cube([116, 36, 26], center=true);\n            sphere(r=1);\n        }\n}\n\n// Main assembly\nunion() {\n    // Core channel structure\n    channel_body();\n    \n    // Support ribs inside\n    support_ribs();\n    \n    // Mounting hardware\n    mounting_tabs();\n    \n    // Cable management features\n    cable_entry_slots();\n    \n    // Strain relief system\n    strain_relief_bars();\n    \n    // Usability features\n    textured_grip_surface();\n}",
    "renders": true
  },
  {
    "office_supply": "track",
    "openscad_code": "// Track for office chair - realistic style, medium complexity\n// Dimensions: 100mm width, 50mm depth, 10mm height\n\n// Parameters\n$fn = 50;\ntrack_width = 100;\ntrack_depth = 50;\ntrack_height = 10;\nrail_width = 8;\nrail_height = 6;\nmount_hole_diameter = 5;\nmount_hole_spacing = 25;\nwall_thickness = 2;\nfillet_radius = 2;\n\n// Main track base with rounded edges\nmodule track_base() {\n    // Main platform\n    difference() {\n        // Base shape with filleted edges\n        minkowski() {\n            cube([track_width - fillet_radius*2, track_depth - fillet_radius*2, track_height - fillet_radius*2]);\n            cylinder(r=fillet_radius, h=0.1);\n        }\n        \n        // Mounting holes\n        for(i = [0:3]) {\n            translate([mount_hole_spacing * (i - 1.5), 0, -1])\n                cylinder(d=mount_hole_diameter, h=track_height + 2);\n        }\n    }\n}\n\n// Rail profile for chair wheels\nmodule rail_profile() {\n    difference() {\n        // Main rail shape\n        union() {\n            // Base of rail\n            translate([0, -rail_width/2, 0])\n                cube([rail_height, rail_width, rail_height]);\n            \n            // Top guiding surface\n            translate([0, -rail_width/2 + 1, rail_height])\n                cube([rail_height, rail_width - 2, 1]);\n        }\n        \n        // Groove for wheel guide\n        translate([-1, -rail_width/4, 1])\n            cube([rail_height + 2, rail_width/2, rail_height - 1]);\n    }\n}\n\n// Left rail\nmodule left_rail() {\n    translate([rail_width, track_depth/2 - rail_width/2, 0])\n        rotate([0, 90, 0])\n            scale([track_depth - rail_width*2, 1, 1])\n                rail_profile();\n}\n\n// Right rail\nmodule right_rail() {\n    translate([track_width - rail_width*2, track_depth/2 - rail_width/2, 0])\n        rotate([0, 90, 0])\n            scale([track_depth - rail_width*2, 1, 1])\n                rail_profile();\n}\n\n// Center support beam\nmodule center_beam() {\n    translate([track_width/2 - wall_thickness/2, rail_width, 0])\n        cube([wall_thickness, track_depth - rail_width*2, track_height - 2]);\n}\n\n// End caps for clean finish\nmodule end_caps() {\n    // Front cap\n    translate([0, rail_width/2, 0])\n        cube([track_width, wall_thickness, track_height]);\n    \n    // Back cap\n    translate([0, track_depth - rail_width/2 - wall_thickness, 0])\n        cube([track_width, wall_thickness, track_height]);\n}\n\n// Assembly\nunion() {\n    track_base();\n    left_rail();\n    right_rail();\n    center_beam();\n    end_caps();\n}",
    "renders": true
  },
  {
    "office_supply": "rail",
    "openscad_code": "// Rail furniture item - Monitor Stand with Cable Management\n// Realistic style, medium complexity\n// Overall size: 120mm x 40mm x 80mm\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule rail_base() {\n    // Main base platform\n    difference() {\n        cube([120, 40, 4], center=true);\n        \n        // Cable routing slots\n        for(i = [-40, 0, 40]) {\n            translate([i, 0, -2])\n                cube([8, 38, 4], center=true);\n        }\n    }\n}\n\nmodule support_leg(x_pos) {\n    // Vertical support structure\n    translate([x_pos, 0, -38]) {\n        difference() {\n            cube([6, 36, 76]);\n            \n            // Weight reduction holes\n            for(h = [-20, -10, 0, 10, 20]) {\n                translate([3, 18, 38 + h])\n                    rotate([90, 0, 0])\n                        cylinder(h=6, r=1.5);\n            }\n            \n            // Bottom cable access\n            translate([3, 18, 2])\n                rotate([90, 0, 0])\n                    cylinder(h=6, r=6);\n        }\n        \n        // Joint reinforcement\n        translate([0, -2, 0])\n            cube([6, 4, 10]);\n        translate([0, 34, 0])\n            cube([6, 4, 10]);\n    }\n}\n\nmodule rail_top() {\n    // Top surface with anti-slip pattern\n    difference() {\n        cube([120, 40, 4], center=true);\n        \n        // Grip pattern\n        for(x = [-55:10:55]) {\n            for(y = [-15:5:15]) {\n                translate([x, y, 2])\n                    cube([8, 3, 2], center=true);\n            }\n        }\n        \n        // Front bevel for monitor tilt\n        translate([0, -25, 2])\n            cube([120, 10, 4], center=true);\n    }\n}\n\nmodule cable_hooks() {\n    // Rear cable management hooks\n    for(x = [-45:30:45]) {\n        translate([x, 22, -35]) {\n            // Hook base\n            cube([4, 8, 10]);\n            \n            // Hook curve\n            translate([2, 8, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r=4);\n            \n            // Hook tip\n            translate([2, 12, 5])\n                sphere(r=2);\n        }\n    }\n}\n\nmodule assembly() {\n    // Combine all parts\n    union() {\n        // Base platform\n        translate([0, 0, -40])\n            rail_base();\n        \n        // Support legs\n        support_leg(-50);\n        support_leg(50);\n        \n        // Top platform\n        translate([0, 0, 40])\n            rail_top();\n        \n        // Cable management\n        cable_hooks();\n        \n        // Rubber feet\n        for(x = [-55, 55]) {\n            for(y = [-18, 18]) {\n                translate([x, y, -44])\n                    cylinder(h=2, r=3);\n            }\n        }\n    }\n}\n\n// Render the complete model\nassembly();",
    "renders": true
  },
  {
    "office_supply": "post",
    "openscad_code": "// Office Post - Cable Management & Monitor Stand Support\n// Realistic style, medium complexity, 3D printable\n\n// Global dimensions (mm)\npost_height = 120;\npost_width = 25;\npost_depth = 25;\nbase_thickness = 8;\nwall_thickness = 2;\n\n// Base plate for stability\nmodule base() {\n    difference() {\n        // Main base\n        cube([post_width + 20, post_depth + 20, base_thickness], center=true);\n        // Cable routing hole\n        translate([0, 0, base_thickness/2 - 0.1])\n            cylinder(h=base_thickness + 0.2, r=6, $fn=32);\n    }\n}\n\n// Main post body with rounded edges\nmodule post_body() {\n    difference() {\n        // Main rectangular post\n        translate([0, 0, (post_height - base_thickness)/2 + base_thickness])\n            cube([post_width, post_depth, post_height - base_thickness], center=true);\n        \n        // Internal hollow for material saving\n        translate([0, 0, (post_height - base_thickness)/2 + base_thickness])\n            cube([post_width - wall_thickness*2, post_depth - wall_thickness*2, post_height - base_thickness + 0.2], center=true);\n        \n        // Cable channel on back\n        translate([0, post_depth/2 - wall_thickness, base_thickness + (post_height - base_thickness)/2 - 10])\n            cube([post_width - wall_thickness*4, wall_thickness*2, 20], center=true);\n    }\n}\n\n// Mounting bracket slots\nmodule brackets() {\n    // Top bracket slot\n    translate([0, 0, post_height - 15])\n        cube([post_width + 6, 3, 12], center=true);\n    \n    // Middle bracket slot\n    translate([0, 0, post_height/2])\n        cube([post_width + 6, 3, 12], center=true);\n}\n\n// Cable tie points\nmodule cable_ties() {\n    for(i = [1:3]) {\n        translate([0, post_depth/2 + 2, base_thickness + i * 30])\n            difference() {\n                cube([post_width + 4, 4, 2], center=true);\n                translate([0, 2, 0])\n                    cube([post_width, 4, 2.2], center=true);\n            }\n    }\n}\n\n// Structural reinforcement ribs\nmodule ribs() {\n    for(i = [-1, 1]) {\n        translate([i * (post_width/2 - wall_thickness), 0, base_thickness + (post_height - base_thickness)/2])\n            rotate([90, 0, 0])\n                cylinder(h=post_depth - wall_thickness*2, r=wall_thickness, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    post_body();\n    brackets();\n    cable_ties();\n    ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "column",
    "openscad_code": "// Office Column Furniture - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 80mm x 120mm total height\n\n// Parameters\nbase_size = 80;\ncolumn_d = 50;\ntotal_height = 120;\nwall_thickness = 2;\n\n// Main module\nmodule office_column() {\n    // Base platform with rounded corners\n    rounded_base();\n    \n    // Main column body\n    column_body();\n    \n    // Top cap with cable management\n    top_assembly();\n    \n    // Reinforcement ribs\n    support_ribs();\n    \n    // Furniture joints/connectors\n    connector_plates();\n}\n\n// Base with rounded edges\nmodule rounded_base() {\n    difference() {\n        // Main base block\n        cube([base_size, base_size, 15], center=true);\n        \n        // Rounded edges by subtracting cylinders\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*base_size/2, y*base_size/2, 0])\n                    cylinder(h=16, r=10, center=true);\n            }\n        }\n    }\n}\n\n// Main column body with hollow center\nmodule column_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=total_height-40, d=column_d, center=false);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n            cylinder(h=total_height-40-wall_thickness, d=column_d-2*wall_thickness, center=false);\n    }\n}\n\n// Top assembly with cable holes and mounting points\nmodule top_assembly() {\n    union() {\n        // Top cap\n        translate([0, 0, total_height-25])\n            cylinder(h=25, d=column_d+10, center=false);\n        \n        // Cable management hole\n        translate([0, 0, total_height-20])\n            cylinder(h=30, d=20, center=false);\n        \n        // Mounting holes for furniture attachment\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle])\n                translate([column_d/2+5, 0, total_height-12])\n                    cylinder(h=12, d=6, center=false);\n        }\n    }\n}\n\n// Structural support ribs\nmodule support_ribs() {\n    for(angle = [0:90:359]) {\n        rotate([0, 0, angle])\n            translate([column_d/2-5, -wall_thickness, 15])\n                cube([10, wall_thickness*2, total_height-40]);\n    }\n}\n\n// Connector plates for furniture integration\nmodule connector_plates() {\n    // Front plate\n    translate([0, column_d/2, total_height/2])\n        cube([40, wall_thickness, 20], center=true);\n    \n    // Side plates\n    rotate([0, 0, 90])\n        translate([0, column_d/2, total_height/2])\n            cube([40, wall_thickness, 20], center=true);\n}\n\n// Anti-slip pads\nmodule anti_slip_pads() {\n    for(x = [-25, 25]) {\n        for(y = [-25, 25]) {\n            translate([x, y, -7.5])\n                cylinder(h=2, d=10);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    office_column();\n    translate([0, 0, 7.5]) anti_slip_pads();\n}",
    "renders": true
  },
  {
    "office_supply": "base",
    "openscad_code": "// Office Monitor Stand Base\n// Realistic style with medium complexity\n\n$fn = 36;\n\n// Main dimensions\nbase_width = 120;\nbase_depth = 80;\nbase_height = 15;\nleg_height = 25;\nleg_thickness = 3;\nwall_thickness = 2;\ngrip_pad_height = 2;\n\nmodule base_top() {\n    // Main flat platform with rounded edges\n    difference() {\n        // Main platform\n        translate([0, 0, base_height/2])\n            rounded_cube([base_width, base_depth, base_height], 5);\n        \n        // Hollow center for material saving\n        translate([0, 0, base_height/2 + wall_thickness])\n            rounded_cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_height], 3);\n        \n        // Cable management hole at back\n        translate([0, -base_depth/2 + 5, base_height/2])\n            cylinder(h = base_height + 1, r = 8, center = true);\n    }\n}\n\nmodule rounded_cube(size, radius) {\n    // Helper for rounded cube\n    x = size[0]; y = size[1]; z = size[2];\n    hull() {\n        for (dx = [-1, 1], dy = [-1, 1], dz = [-1, 1]) {\n            translate([dx*(x/2 - radius), dy*(y/2 - radius), dz*(z/2 - radius)])\n                sphere(r = radius);\n        }\n    }\n}\n\nmodule support_legs() {\n    // Four support legs with feet\n    positions = [[-base_width/2 + 15, -base_depth/2 + 15],\n                 [base_width/2 - 15, -base_depth/2 + 15],\n                 [-base_width/2 + 15, base_depth/2 - 15],\n                 [base_width/2 - 15, base_depth/2 - 15]];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], 0])\n            leg_assembly();\n    }\n}\n\nmodule leg_assembly() {\n    // Single leg with foot\n    difference() {\n        // Main leg post\n        translate([0, 0, leg_height/2])\n            cylinder(h = leg_height, r = 5, center = true);\n        \n        // Hollow leg for material saving\n        translate([0, 0, leg_height/2])\n            cylinder(h = leg_height + 1, r = 3.5, center = true);\n    }\n    \n    // Foot pad for grip\n    translate([0, 0, -1])\n        cylinder(h = grip_pad_height + 1, r = 7, center = false);\n    \n    // Rib for strength\n    for (angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([2.5, 0, leg_height/2])\n                cube([5, 1, leg_height], center = true);\n    }\n}\n\nmodule support_braces() {\n    // Cross braces between legs for stability\n    brace_height = 5;\n    \n    // Front to back braces\n    for (x = [-base_width/2 + 15, base_width/2 - 15]) {\n        translate([x, 0, brace_height/2])\n            cube([leg_thickness, base_depth - 30, brace_height], center = true);\n    }\n    \n    // Side to side braces\n    for (y = [-base_depth/2 + 15, base_depth/2 - 15]) {\n        translate([0, y, brace_height/2])\n            cube([base_width - 30, leg_thickness, brace_height], center = true);\n    }\n}\n\nmodule anti_slip_pads() {\n    // Rubber grip pads on top surface\n    pad_size = 8;\n    pad_thickness = 0.5;\n    \n    positions = [[-base_width/3, -base_depth/3],\n                 [base_width/3, -base_depth/3],\n                 [-base_width/3, base_depth/3],\n                 [base_width/3, base_depth/3]];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], base_height - pad_thickness/2])\n            cube([pad_size, pad_size, pad_thickness], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    base_top();\n    support_legs();\n    support_braces();\n    anti_slip_pads();\n}",
    "renders": true
  },
  {
    "office_supply": "anchor",
    "openscad_code": "// Anchor paperweight / desk ornament\n// Overall size: 120 mm (length) × 70 mm (height) × 30 mm (thickness)\n\n$fn = 50;              // smooth curves\n\nmodule anchor_body() {\n    // central shank — 12 mm thick shaft\n    translate([0, 0, 0])\n        cube([12, 70, 30], center=true);\n\n    // stock (top cross-bar) — 50 mm wide, 10 mm thick\n    translate([0, 32, 0])\n        cube([50, 10, 30], center=true);\n\n    // crown (rounded top of stock)\n    difference() {\n        translate([0, 37, 0])\n            cube([50, 12, 30], center=true);\n        translate([0, 44, 0])\n            cylinder(h=40, r=25, center=true);\n    }\n}\n\nmodule flukes() {\n    // two symmetric flukes\n    for (side = [-1, 1]) {\n        mirror([side, 0, 0])\n            translate([0, -20, 0])\n                rotate([0, 0, 25])\n                    cube([35, 8, 30], center=true);\n    }\n}\n\nmodule arms() {\n    // arms connecting shank to flukes\n    for (side = [-1, 1]) {\n        mirror([side, 0, 0])\n            hull() {\n                translate([6, 8, 0]) sphere(4);\n                translate([25, -25, 0]) sphere(4);\n            }\n    }\n}\n\nmodule palm_rest() {\n    // ergonomic palm rest base (flat bottom with gentle curve)\n    difference() {\n        translate([0, -30, -17])\n            cube([60, 40, 4], center=true);\n        // rounding underside\n        translate([0, -30, -20])\n            cylinder(h=10, r1=30, r2=30, center=true);\n    }\n}\n\nmodule base_plate() {\n    // 2 mm thick base plate for print stability\n    translate([0, 0, -18])\n        cube([70, 80, 2], center=true);\n}\n\n// Assembly\nunion() {\n    anchor_body();\n    flukes();\n    arms();\n    palm_rest();\n    base_plate();\n}",
    "renders": true
  },
  {
    "office_supply": "tie",
    "openscad_code": "// Tie-shaped office desk organizer / hook\n// Overall size: 110 mm tall x 50 mm wide x 35 mm deep\n\n// Main parameters\ntie_height = 110;\ntie_width = 50;\ntie_thick = 35;\nwall = 2;\n\n// Base plate\nmodule base() {\n    difference() {\n        // Footprint\n        translate([0, 0, wall/2])\n            cube([tie_width + 20, 20, wall], center=true);\n        // Screw holes\n        for (x = [-tie_width/3, tie_width/3])\n            translate([x, 0, -1])\n                cylinder(h=wall+2, r=2.5, center=true, $fn=20);\n    }\n}\n\n// Vertical post\nmodule post() {\n    translate([0, 0, tie_height/2 + wall])\n        difference() {\n            cube([wall*2, 12, tie_height], center=true);\n            // Lightening cutouts\n            for (i = [1:3])\n                translate([0, 0, i * tie_height/4 - tie_height/2])\n                    cube([wall*2+1, 8, 10], center=true);\n        }\n}\n\n// Tie body\nmodule tie_body() {\n    union() {\n        // Upper triangle\n        translate([0, 0, tie_height*0.85])\n            rotate([90, 0, 0])\n                linear_extrude(height=wall)\n                    polygon(points=[\n                        [-tie_width/2, 0],\n                        [tie_width/2, 0],\n                        [0, tie_height*0.25]\n                    ]);\n        \n        // Lower triangle\n        translate([0, 0, tie_height*0.85 - tie_height*0.25 - wall])\n            rotate([90, 0, 0])\n                linear_extrude(height=wall)\n                    polygon(points=[\n                        [-tie_width/2, 0],\n                        [tie_width/2, 0],\n                        [0, -tie_height*0.45]\n                    ]);\n        \n        // Center spine\n        translate([0, 0, tie_height*0.85 - tie_height*0.25/2 - wall])\n            cube([wall, tie_height*0.25, wall], center=true);\n    }\n}\n\n// Horizontal tie rack bar\nmodule rack_bar() {\n    translate([0, 0, tie_height*0.85 - tie_height*0.25/2 - wall - 10])\n        cube([tie_width*0.9, wall, 8], center=true);\n}\n\n// Tie rack hooks\nmodule hooks() {\n    for (i = [-2:2]) {\n        translate([i * tie_width/6, 0, tie_height*0.85 - tie_height*0.25/2 - wall - 14])\n            union() {\n                cube([wall, wall, 6], center=true);\n                translate([0, 0, -3])\n                    sphere(r=wall, $fn=12);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    post();\n    tie_body();\n    rack_bar();\n    hooks();\n}",
    "renders": true
  },
  {
    "office_supply": "clip",
    "openscad_code": "// Office Binder Clip - Realistic Style\n// Medium complexity with functional spring mechanism and ergonomic handles\n\n$fn = 64;\n\n// Main dimensions (in mm)\nclip_width = 32;\nclip_height = 60;\nclip_depth = 12;\nhandle_length = 45;\nhandle_diameter = 4;\nspring_coils = 5;\nspring_wire = 1.5;\n\n// Main body - two C-shaped arms\nmodule clip_body() {\n    difference() {\n        // Outer C-shape\n        union() {\n            // Left arm\n            translate([-clip_width/2, 0, clip_depth/2])\n                cube([clip_width/2, clip_height, clip_depth], center=true);\n            \n            // Right arm\n            translate([clip_width/2, 0, clip_depth/2])\n                cube([clip_width/2, clip_height, clip_depth], center=true);\n            \n            // Bottom jaw\n            translate([0, -clip_height/2 + 3, clip_depth/2])\n                cube([clip_width, 6, clip_depth], center=true);\n        }\n        \n        // Inner clearance\n        translate([0, -5, clip_depth/2])\n            cube([clip_width - 4, clip_height - 10, clip_depth + 1], center=true);\n        \n        // Rounded edges\n        translate([-clip_width/4, clip_height/2 - 3, clip_depth/2])\n            cylinder(h=clip_depth, d=6, center=true);\n        translate([clip_width/4, clip_height/2 - 3, clip_depth/2])\n            cylinder(h=clip_depth, d=6, center=true);\n    }\n}\n\n// Wire spring mechanism\nmodule spring() {\n    // Spring wire diameter with realistic coil spacing\n    translate([0, -clip_height/2 + 8, 0])\n        rotate([90, 0, 0])\n            for(i = [0:spring_coils-1]) {\n                translate([0, 0, i * spring_wire * 2])\n                    rotate_extrude(angle=360, $fn=16)\n                        translate([spring_wire * 3, 0, 0])\n                            circle(d=spring_wire);\n            }\n}\n\n// Ergonomic handles with grip texture\nmodule handles() {\n    // Left handle\n    translate([-clip_width/2 - handle_length/2, 0, 0])\n        rotate([0, 0, -30])\n            union() {\n                // Main handle tube\n                cylinder(h=handle_length, d=handle_diameter, center=true);\n                \n                // Grip rings\n                for(i = [-handle_length/2 + 3 : 5 : handle_length/2 - 3]) {\n                    translate([i, 0, 0])\n                        scale([1.2, 1.2, 0.5])\n                            cylinder(h=2, d=handle_diameter, center=true);\n                }\n            }\n    \n    // Right handle (mirrored)\n    translate([clip_width/2 + handle_length/2, 0, 0])\n        rotate([0, 0, 30])\n            union() {\n                cylinder(h=handle_length, d=handle_diameter, center=true);\n                \n                for(i = [-handle_length/2 + 3 : 5 : handle_length/2 - 3]) {\n                    translate([i, 0, 0])\n                        scale([1.2, 1.2, 0.5])\n                            cylinder(h=2, d=handle_diameter, center=true);\n                }\n            }\n}\n\n// Handle joints (hinges)\nmodule handle_joints() {\n    // Left joint\n    translate([-clip_width/2, 0, 0])\n        union() {\n            cylinder(h=clip_depth + 2, d=handle_diameter + 2, center=true);\n            sphere(d=handle_diameter + 2);\n        }\n    \n    // Right joint\n    translate([clip_width/2, 0, 0])\n        union() {\n            cylinder(h=clip_depth + 2, d=handle_diameter + 2, center=true);\n            sphere(d=handle_diameter + 2);\n        }\n}\n\n// Jaw pads for better grip\nmodule jaw_pads() {\n    // Top pad\n    translate([0, clip_height/2 - 2, clip_depth/2])\n        cube([clip_width - 6, 2, clip_depth - 2], center=true);\n    \n    // Bottom pad\n    translate([0, -clip_height/2 + 2, clip_depth/2])\n        cube([clip_width - 6, 2, clip_depth - 2], center=true);\n}\n\n// Assembly\nunion() {\n    // Main clip structure\n    clip_body();\n    \n    // Spring mechanism\n    spring();\n    \n    // Handle joints\n    handle_joints();\n    \n    // Handles\n    handles();\n    \n    // Jaw pads\n    jaw_pads();\n}",
    "renders": true
  },
  {
    "office_supply": "clamp",
    "openscad_code": "// Office Desk Clamp - Medium complexity realistic style\n// 3D printable clamp for securing cables, signs, or small accessories to desk edges\n\n$fn = 32;\n\n// Main dimensions\nclamp_height = 60;\nclamp_width = 100;\nthroat_depth = 40;\nthickness = 3;\nhandle_length = 50;\nhandle_diameter = 12;\nscrew_diameter = 8;\npad_thickness = 4;\n\nmodule main_body() {\n    // Lower jaw - C-shaped main structure\n    difference() {\n        // Outer C shape\n        union() {\n            // Bottom plate\n            translate([0, -throat_depth/2, 0])\n                cube([clamp_width, throat_depth, thickness*2], center=true);\n            \n            // Vertical back\n            translate([0, throat_depth/2 - thickness/2, clamp_height/2])\n                cube([clamp_width, thickness, clamp_height], center=true);\n                \n            // Top plate\n            translate([0, -throat_depth/2, clamp_height - thickness])\n                cube([clamp_width, throat_depth, thickness*2], center=true);\n        }\n        \n        // Inner cutout for throat\n        translate([0, -throat_depth/2 - 1, clamp_height/2])\n            cube([clamp_width - thickness*2, throat_depth + 2, clamp_height], center=true);\n    }\n    \n    // Reinforcement ribs\n    for(x = [-clamp_width/3, clamp_width/3]) {\n        translate([x, 0, clamp_height/2])\n            cube([thickness*2, throat_depth - thickness*2, clamp_height], center=true);\n    }\n}\n\nmodule threaded_block() {\n    // Threaded insert block for screw\n    translate([0, throat_depth/2 + 15, clamp_height - 20])\n        cube([25, 20, 20], center=true);\n    \n    // Threaded hole\n    translate([0, throat_depth/2 + 15, clamp_height - 20])\n        rotate([90, 0, 0])\n            cylinder(d=screw_diameter + 1, h=25, center=true);\n}\n\nmodule screw_and_handle() {\n    // Screw shaft\n    translate([0, throat_depth/2 + 15, clamp_height - 20])\n        rotate([90, 0, 0])\n            cylinder(d=screw_diameter, h=throat_depth + 10);\n    \n    // Handle attachment\n    translate([0, throat_depth/2 + 15, clamp_height - 20])\n        rotate([90, 0, 0])\n            cylinder(d=handle_diameter, h=15);\n    \n    // Handle crossbar\n    translate([handle_length/2, throat_depth/2 + 15, clamp_height - 20])\n        rotate([0, 0, 90])\n            cylinder(d=handle_diameter - 4, h=handle_length, center=true);\n    \n    // Handle grips\n    for(pos = [-handle_length/2 + 8, handle_length/2 - 8]) {\n        translate([pos, throat_depth/2 + 15, clamp_height - 20])\n            rotate([0, 0, 90])\n                cylinder(d=handle_diameter, h=8, center=true);\n    }\n}\n\nmodule protective_pads() {\n    // Rubber pads on clamping surfaces\n    translate([0, -throat_depth/2, thickness/2 + pad_thickness/2])\n        cube([clamp_width - 10, throat_depth - 10, pad_thickness], center=true);\n    \n    translate([0, throat_depth/2 - 10, clamp_height - 20])\n        cube([25 - 4, 20 - 4, pad_thickness], center=true);\n    \n    // Add grip texture pattern\n    for(x = [-clamp_width/3:10:clamp_width/3]) {\n        for(y = [-throat_depth/3:8:throat_depth/3]) {\n            translate([x, y, pad_thickness + 0.1])\n                cylinder(d=3, h=0.5);\n        }\n    }\n}\n\nmodule mounting_features() {\n    // Cable management holes\n    translate([clamp_width/2 - 10, -throat_depth/2, clamp_height/2])\n        rotate([90, 0, 0])\n            cylinder(d=5, h=thickness*2);\n    \n    translate([-clamp_width/2 + 10, -throat_depth/2, clamp_height/2])\n        rotate([90, 0, 0])\n            cylinder(d=5, h=thickness*2);\n    \n    // Label recess\n    translate([0, thickness/2, clamp_height - 10])\n        cube([40, thickness, 5], center=true);\n}\n\n// Assembly\nunion() {\n    main_body();\n    threaded_block();\n    screw_and_handle();\n    protective_pads();\n    mounting_features();\n}",
    "renders": true
  },
  {
    "office_supply": "splice",
    "openscad_code": "// Splice Office Chair - Realistic Medium Complexity\n// 3D printable office chair with proper proportions and structural elements\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 85;\nchair_height = 110;\nseat_height = 45;\narmrest_height = 65;\n\n// Wall thickness\nwall = 2;\n\nmodule chair_base() {\n    // Central support column\n    cylinder(h=seat_height-wall, r1=15, r2=12, $fn=32);\n    \n    // 5-star base\n    for(i=[0:4]) {\n        rotate([0,0,i*72]) translate([0,0,seat_height-wall-1]) {\n            // Star leg\n            translate([20,0,0]) cube([40,wall,wall], center=true);\n            // Wheel mount\n            translate([40,0,-wall/2]) cylinder(h=wall, r=wall*1.5, $fn=16);\n            // Wheel\n            translate([40,0,-wall*2]) rotate([0,90,0]) \n                cylinder(h=wall*1.5, r=wall*1.2, $fn=8);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat\n    translate([0,0,seat_height]) \n        cube([chair_width, chair_depth, wall*4], center=true);\n    \n    // Seat contour - rounded front edge\n    difference() {\n        translate([0,chair_depth/2-wall*2,seat_height+wall*2]) \n            cube([chair_width-wall*2, wall*4, wall*4], center=true);\n        translate([0,chair_depth/2-wall*2,seat_height+wall*2]) \n            rotate([90,0,0]) cylinder(h=chair_width-wall*2, r=wall*2, $fn=32);\n    }\n}\n\nmodule backrest() {\n    // Backrest frame\n    translate([0,-chair_depth/2+wall*2,seat_height+wall*2]) {\n        // Vertical supports\n        for(x=[-chair_width/2+wall*3, chair_width/2-wall*3]) {\n            translate([x,0,chair_height/2-seat_height-wall]) \n                cube([wall, wall*2, chair_height-seat_height-wall*2], center=true);\n        }\n        \n        // Horizontal support bar\n        translate([0,0,chair_height-seat_height-wall*2]) \n            cube([chair_width-wall*6, wall*2, wall], center=true);\n            \n        // Backrest mesh\n        for(y=[-chair_depth/6:chair_depth/12:chair_depth/6]) {\n            for(z=[wall*4:wall*2:chair_height-seat_height-wall*4]) {\n                translate([y,0,z]) \n                    cylinder(h=chair_width-wall*6, r=wall/2, center=true, $fn=8);\n            }\n        }\n    }\n    \n    // Lumbar support\n    translate([0,-chair_depth/2+wall*3,seat_height+wall*6]) \n        cube([chair_width-wall*4, wall*2, wall*6], center=true);\n}\n\nmodule armrests() {\n    for(side=[-1,1]) {\n        translate([side*chair_width/2,0,armrest_height]) {\n            // Vertical support post\n            cube([wall*2, wall*2, armrest_height-seat_height], center=true);\n            \n            // Armrest pad\n            translate([0,chair_depth/4,armrest_height-seat_height]) \n                cube([wall*4, chair_depth/2, wall*3], center=true);\n                \n            // Connection to backrest\n            translate([0,-chair_depth/2+wall*3,armrest_height-seat_height]) \n                cube([wall*2, wall*2, wall], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_base();\n    seat_cushion();\n    backrest();\n    armrests();\n}\n\n// Optional: Chair tilt mechanism detail\ntranslate([0,0,seat_height-wall]) {\n    difference() {\n        cylinder(h=wall*2, r=20, $fn=32);\n        cylinder(h=wall*3, r=15, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "gusset",
    "openscad_code": "// OpenSCAD code for a realistic 3D-printable gusset bracket (furniture corner brace)\n// Overall size: ~100 x 100 x 25 mm, wall thickness 2 mm\n\n$fn = 32;\n\nmodule gusset() {\n    // Main triangular plate\n    difference() {\n        // Solid triangular plate\n        linear_extrude(height = 25)\n            polygon(points = [[0,0], [100,0], [0,100]]);\n        \n        // Lightening cut-outs (weight reduction)\n        for (i = [1:3]) {\n            translate([15*i, 15*i, -1])\n                linear_extrude(height = 27)\n                    polygon(points = [[0,0], [70-15*i,0], [0,70-15*i]]);\n        }\n        \n        // Central mounting hole\n        translate([20, 20, -1])\n            cylinder(h = 27, d = 8);\n    }\n    \n    // Perpendicular flange along bottom edge\n    difference() {\n        // Horizontal flange\n        translate([0, -2, 0])\n            cube([100, 2, 25]);\n        \n        // Screw slots\n        for (x = [15:25:85]) {\n            translate([x, -3, 12.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 5, d = 6);\n        }\n    }\n    \n    // Perpendicular flange along vertical edge\n    difference() {\n        // Vertical flange\n        translate([-2, 0, 0])\n            cube([2, 100, 25]);\n        \n        // Screw slots\n        for (y = [15:25:85]) {\n            translate([-3, y, 12.5])\n                rotate([90, 0, 0])\n                    cylinder(h = 5, d = 6);\n        }\n    }\n    \n    // Rounded corner fillets for strength\n    difference() {\n        // Corner reinforcement\n        translate([0, 0, 0])\n            cylinder(h = 25, r = 8);\n        \n        // Remove interior to maintain wall thickness\n        translate([2, 2, -1])\n            cylinder(h = 27, r = 6);\n    }\n    \n    // Rib stiffeners\n    for (i = [1:3]) {\n        translate([10*i, 10*i, 0])\n            cube([2, 100-10*i, 25]);\n    }\n    \n    for (i = [1:3]) {\n        translate([10*i, 0, 0])\n            cube([100-10*i, 2, 25]);\n    }\n    \n    // Mounting boss details\n    translate([50, 50, 0])\n        difference() {\n            cylinder(h = 25, r = 6);\n            translate([0, 0, -1])\n                cylinder(h = 27, r = 4);\n        }\n}\n\n// Generate the part\ngusset();",
    "renders": true
  },
  {
    "office_supply": "shim",
    "openscad_code": "// Realistic 3D-printable furniture shim (wedge)\n// Medium complexity – 50-150 lines\n\n// Overall dimensions (mm)\nshim_length = 100;      // Length along the slope\nshim_width  = 40;       // Width (perpendicular to slope)\nmax_thick   = 8;        // Thickest end\nmin_thick   = 2;        // Thinnest end (printer-safe)\n\n// Wall / rib thickness\nwall = 2;\n\n// Helper module for rounded edges (print-friendly)\nmodule rounded_edge(r, h) {\n    linear_extrude(height = h, center = false)\n        offset(r = r)\n            offset(r = -r)\n                square([r*2, r*2]);\n}\n\n// Main wedge body\nmodule wedge_body() {\n    difference() {\n        // Outer shell – simple sloped block\n        translate([0, 0, 0])\n            polyhedron(\n              points = [\n                [0, 0, min_thick],                    // bottom thin\n                [shim_length, 0, max_thick],          // bottom thick\n                [shim_length, shim_width, max_thick], // bottom thick\n                [0, shim_width, min_thick],           // bottom thin\n                [0, 0, 0],                            // top thin\n                [shim_length, 0, 0],                  // top thick\n                [shim_length, shim_width, 0],         // top thick\n                [0, shim_width, 0]                    // top thin\n              ],\n              faces = [\n                [0, 1, 2, 3], [4, 7, 6, 5],          // bottom / top\n                [0, 4, 5, 1], [2, 6, 7, 3],          // sides\n                [1, 5, 6, 2], [0, 3, 7, 4]           // ends\n              ]\n            );\n\n        // Hollow cavity – leave 2 mm walls\n        translate([wall, wall, wall])\n            polyhedron(\n              points = [\n                [0, 0, min_thick - wall],\n                [shim_length - wall*2, 0, max_thick - wall],\n                [shim_length - wall*2, shim_width - wall*2, max_thick - wall],\n                [0, shim_width - wall*2, min_thick - wall],\n                [0, 0, 0],\n                [shim_length - wall*2, 0, 0],\n                [shim_length - wall*2, shim_width - wall*2, 0],\n                [0, shim_width - wall*2, 0]\n              ],\n              faces = [\n                [0, 1, 2, 3], [4, 7, 6, 5],\n                [0, 4, 5, 1], [2, 6, 7, 3],\n                [1, 5, 6, 2], [0, 3, 7, 4]\n              ]\n            );\n    }\n}\n\n// Ribs for strength – printed as internal lattice\nmodule ribs() {\n    rib_count = 4;\n    rib_spacing = (shim_length - wall) / (rib_count + 1);\n    for (i = [1 : rib_count]) {\n        translate([i * rib_spacing, 0, 0])\n            rotate([0, 90, 0])\n                cube([shim_width, max_thick - min_thick, wall], center = true);\n    }\n}\n\n// Grip texture on top (shallow grooves for fingers)\nmodule grip() {\n    groove_count = 10;\n    groove_width = 1.5;\n    groove_depth = 0.5;\n    spacing = shim_length / (groove_count + 1);\n    for (i = [1 : groove_count]) {\n        translate([i * spacing, 0, max_thick - groove_depth])\n            cube([groove_width, shim_width, groove_depth], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    wedge_body();\n    ribs();\n    grip();\n}",
    "renders": true
  },
  {
    "office_supply": "wedge",
    "openscad_code": "// Wedge furniture - ergonomic laptop/keyboard stand\n// Overall dimensions: 120mm width x 80mm depth x 35mm height at back\n\n// Parameters\nwidth = 120;\ndepth = 80;\nheight = 35;\nwall = 2;\nangle = 25; // degrees\n\n// Main wedge body\nmodule wedge_body() {\n    // Create angled top surface\n    rotate([0, angle, 0]) {\n        translate([0, -depth/2, height/2]) {\n            cube([width, depth, height], center=true);\n        }\n    }\n    \n    // Remove bottom to create hollow structure\n    difference() {\n        // Outer shell\n        translate([0, 0, wall/2]) {\n            cube([width, depth, height-wall], center=true);\n        }\n        \n        // Inner hollow\n        translate([0, 0, wall]) {\n            cube([width-wall*2, depth-wall*2, height-wall*2], center=true);\n        }\n    }\n}\n\n// Front lip to prevent items sliding off\nmodule front_lip() {\n    translate([0, depth/2 - wall, height/2 - 5]) {\n        cube([width-wall*2, wall, 10], center=true);\n    }\n}\n\n// Ventilation holes pattern\nmodule ventilation_holes() {\n    for(i = [-2:2]) {\n        for(j = [-1:1]) {\n            translate([i*20, j*20, height/2]) {\n                rotate([0, angle, 0]) {\n                    cylinder(h=height, r=3, $fn=20);\n                }\n            }\n        }\n    }\n}\n\n// Non-slip rubber feet\nmodule rubber_feet() {\n    foot_positions = [\n        [-width/2 + 10, -depth/2 + 10, 0],\n        [width/2 - 10, -depth/2 + 10, 0],\n        [-width/2 + 10, depth/2 - 10, 0],\n        [width/2 - 10, depth/2 - 10, 0]\n    ];\n    \n    for(pos = foot_positions) {\n        translate(pos) {\n            cylinder(h=2, r=5, $fn=20);\n        }\n    }\n}\n\n// Cable management slot at back\nmodule cable_slot() {\n    translate([0, -depth/2 + wall/2, height/4]) {\n        cube([30, wall+0.1, height/2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    difference() {\n        union() {\n            wedge_body();\n            front_lip();\n        }\n        ventilation_holes();\n    }\n    \n    // Add rubber feet\n    rubber_feet();\n    \n    // Add cable slot\n    cable_slot();\n}",
    "renders": true
  },
  {
    "office_supply": "spacer",
    "openscad_code": "// Office Desk Leg Spacer\n// Used to level furniture on uneven floors or raise height slightly\n// Overall dimensions: 100mm diameter, 25mm total height\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main body - cylindrical base with tapered edge\nmodule base() {\n    difference() {\n        // Main cylinder with chamfered top edge\n        cylinder(h = 20, d1 = 100, d2 = 90);\n        \n        // Hollow center for weight reduction\n        cylinder(h = 18, d1 = 94, d2 = 84);\n    }\n}\n\n// Top pad - softer contact surface\nmodule top_pad() {\n    translate([0, 0, 19]) {\n        difference() {\n            // Slightly domed top\n            cylinder(h = 6, d1 = 90, d2 = 85);\n            \n            // Matching hollow\n            cylinder(h = 4, d = 84);\n        }\n    }\n}\n\n// Anti-slip texture rings on bottom\nmodule grip_rings() {\n    for(i = [1:3:10]) {\n        rotate([0, 0, 0]) {\n            translate([0, 0, 0.5]) {\n                difference() {\n                    cylinder(h = 1, d = 100 - i*6);\n                    cylinder(h = 2, d = 96 - i*6);\n                }\n            }\n        }\n    }\n}\n\n// Side grip texture - vertical ridges for easy handling\nmodule side_grip() {\n    for(angle = [0:15:345]) {\n        rotate([0, 0, angle]) {\n            translate([47, 0, 5]) {\n                cube([2, 3, 10], center = true);\n            }\n        }\n    }\n}\n\n// Height adjustment shim slots (for adding thin shims)\nmodule shim_slots() {\n    // Three slots at 120 degrees\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle]) {\n            translate([35, 0, 10]) {\n                cube([20, 2, 4], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    top_pad();\n    grip_rings();\n    side_grip();\n    shim_slots();\n}",
    "renders": true
  },
  {
    "office_supply": "gasket",
    "openscad_code": "// Gasket Furniture - Office Chair Base Gasket\n// A realistic 3D printable gasket designed to fit between office chair base and seat\n\n// Parameters\n$fn = 36;  // Circle resolution\nwall_thickness = 2;  // 3D printable wall thickness\nouter_diameter = 100;  // Overall gasket size\ninner_diameter = 45;   // Central hole for gas cylinder\nbolt_circle = 75;      // Bolt pattern diameter\nbolt_holes = 6;        // Number of mounting bolts\nbolt_diameter = 8;     // Bolt hole diameter\ngasket_height = 6;     // Overall thickness\nchamfer_height = 1;    // Top edge chamfer\n\n// Main gasket body\nmodule gasket_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = gasket_height, d = outer_diameter, center = true);\n        \n        // Central hole for gas cylinder\n        cylinder(h = gasket_height + 1, d = inner_diameter, center = true);\n        \n        // Top chamfer\n        translate([0, 0, gasket_height/2 - chamfer_height])\n            cylinder(h = chamfer_height + 1, d1 = outer_diameter - 2, d2 = outer_diameter, center = false);\n        \n        // Bottom chamfer\n        translate([0, 0, -gasket_height/2])\n            cylinder(h = chamfer_height + 1, d1 = outer_diameter, d2 = outer_diameter - 2, center = false);\n    }\n}\n\n// Bolt holes pattern\nmodule bolt_pattern() {\n    for(i = [0 : bolt_holes - 1]) {\n        rotate([0, 0, i * 360 / bolt_holes])\n            translate([bolt_circle / 2, 0, 0])\n                cylinder(h = gasket_height + 2, d = bolt_diameter, center = true);\n    }\n}\n\n// Reinforcement ribs between bolt holes\nmodule reinforcement_ribs() {\n    rib_width = 6;\n    rib_height = 3;\n    \n    for(i = [0 : bolt_holes - 1]) {\n        angle = i * 360 / bolt_holes + (180 / bolt_holes);\n        rotate([0, 0, angle])\n            translate([(bolt_circle + inner_diameter) / 4, 0, 0])\n                cube([bolt_circle - inner_diameter - 4, rib_width, rib_height], center = true);\n    }\n}\n\n// Anti-slip surface texture\nmodule surface_texture() {\n    texture_height = 0.5;\n    texture_spacing = 5;\n    \n    // Top texture\n    for(x = [-outer_diameter/2 + 5 : texture_spacing : outer_diameter/2 - 5]) {\n        for(y = [-outer_diameter/2 + 5 : texture_spacing : outer_diameter/2 - 5]) {\n            if(sqrt(x*x + y*y) > inner_diameter/2 + 3 && sqrt(x*x + y*y) < outer_diameter/2 - 3) {\n                translate([x, y, gasket_height/2 - texture_height/2])\n                    cube([2, 2, texture_height], center = true);\n            }\n        }\n    }\n    \n    // Bottom texture\n    for(x = [-outer_diameter/2 + 5 : texture_spacing * 1.5 : outer_diameter/2 - 5]) {\n        for(y = [-outer_diameter/2 + 5 : texture_spacing * 1.5 : outer_diameter/2 - 5]) {\n            if(sqrt(x*x + y*y) > inner_diameter/2 + 3 && sqrt(x*x + y*y) < outer_diameter/2 - 3) {\n                translate([x, y, -gasket_height/2 + texture_height/2])\n                    cube([1.5, 1.5, texture_height], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main gasket\n    difference() {\n        gasket_body();\n        bolt_pattern();\n    }\n    \n    // Add reinforcement ribs\n    reinforcement_ribs();\n    \n    // Add texture\n    surface_texture();\n}",
    "renders": true
  },
  {
    "office_supply": "oring",
    "openscad_code": "// O-ring furniture organizer\n// A realistic office desk organizer shaped like an O-ring with storage compartments\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n$fn = 100;\n\n// Overall dimensions (mm)\nouter_diameter = 120;\ninner_diameter = 60;\nheight = 25;\nwall_thickness = 2;\n\n// Calculate radii\nouter_radius = outer_diameter / 2;\ninner_radius = inner_diameter / 2;\ncenter_radius = (outer_radius + inner_radius) / 2;\n\n// Main O-ring body\nmodule o_ring_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = height, r = outer_radius);\n        // Inner hole\n        translate([0, 0, -1])\n            cylinder(h = height + 2, r = inner_radius);\n    }\n}\n\n// Storage compartments - 4 compartments at 90 degree intervals\nmodule storage_compartments() {\n    compartment_width = (outer_radius - inner_radius) * 0.7;\n    compartment_length = outer_radius - inner_radius - wall_thickness;\n    \n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([center_radius, 0, 0])\n        rotate([0, 0, 45])\n        cube([compartment_length, compartment_width, height - wall_thickness], center = true);\n    }\n}\n\n// Bottom support ribs for structural integrity\nmodule support_ribs() {\n    rib_thickness = 2;\n    rib_height = 3;\n    \n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, -1])\n        cube([outer_radius - inner_radius + wall_thickness, rib_thickness, rib_height], center = true);\n    }\n}\n\n// Cable management slots\nmodule cable_slots() {\n    slot_width = 8;\n    slot_height = 5;\n    \n    // 3 cable slots around the ring\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120 + 15])\n        translate([outer_radius - slot_width/2, 0, height - slot_height])\n        cube([slot_width, wall_thickness * 2, slot_height + 1]);\n    }\n}\n\n// Anti-slip feet\nmodule anti_slip_feet() {\n    foot_diameter = 8;\n    foot_height = 1.5;\n    \n    // 4 feet at corners\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([outer_radius * 0.7, 0, -foot_height])\n        cylinder(h = foot_height + 1, r = foot_diameter/2);\n    }\n}\n\n// Label holder slots\nmodule label_holders() {\n    holder_width = 20;\n    holder_depth = 1.5;\n    holder_height = 8;\n    \n    // 4 label holders for compartments\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([outer_radius - holder_width/2 - 5, 0, height - holder_height])\n        difference() {\n            cube([holder_width, wall_thickness + 0.5, holder_height]);\n            translate([2, wall_thickness + 1, 2])\n                cube([holder_width - 4, wall_thickness + 1, holder_height - 4]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    o_ring_body();\n    \n    // Add storage compartments\n    storage_compartments();\n    \n    // Add support ribs\n    support_ribs();\n    \n    // Add cable management\n    cable_slots();\n    \n    // Add anti-slip feet\n    anti_slip_feet();\n    \n    // Add label holders\n    label_holders();\n}",
    "renders": true
  },
  {
    "office_supply": "bushing",
    "openscad_code": "// Realistic Office Chair Bushing - Medium Complexity\n// Overall dimensions: 30mm diameter, 25mm height, suitable for 12mm shaft\n\n$fn = 50;\n\n// Main parameters\nbushing_outer_d = 30;\nbushing_inner_d = 12;\nbushing_height = 25;\nwall_thickness = 2;\nflange_thickness = 4;\nflange_diameter = 38;\n\n// Module for the main cylindrical body\nmodule bushing_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = bushing_height, d = bushing_outer_d, center = true);\n        \n        // Inner hole for shaft\n        translate([0, 0, -0.1])\n            cylinder(h = bushing_height + 0.2, d = bushing_inner_d, center = true);\n    }\n}\n\n// Module for the top flange with mounting holes\nmodule mounting_flange() {\n    difference() {\n        // Flange disc\n        translate([0, 0, bushing_height/2 + flange_thickness/2])\n            cylinder(h = flange_thickness, d = flange_diameter, center = true);\n        \n        // Central hole\n        translate([0, 0, bushing_height/2 - 0.1])\n            cylinder(h = flange_thickness + 0.2, d = bushing_inner_d, center = true);\n        \n        // Mounting holes (4 holes at 90 degrees)\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([flange_diameter/2 - 4, 0, bushing_height/2])\n                    cylinder(h = flange_thickness + 0.2, d = 4, center = true);\n        }\n    }\n}\n\n// Module for bottom collar\nmodule bottom_collar() {\n    difference() {\n        // Collar ring\n        translate([0, 0, -bushing_height/2 - 2])\n            cylinder(h = 4, d = bushing_outer_d + 4, center = true);\n        \n        // Inner hole\n        translate([0, 0, -bushing_height/2 - 2.1])\n            cylinder(h = 4.2, d = bushing_outer_d, center = true);\n    }\n}\n\n// Module for lubrication grooves\nmodule lubrication_grooves() {\n    // Horizontal grooves at 3 levels\n    for (z = [-8, 0, 8]) {\n        translate([0, 0, z])\n            rotate_extrude(angle = 360)\n                translate([bushing_outer_d/2 - 1, 0, 0])\n                    square([1, 1], center = true);\n    }\n    \n    // Vertical grooves (6 grooves)\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, bushing_outer_d/2 - 0.5, 0])\n                cube([1, 1, bushing_height], center = true);\n    }\n}\n\n// Module for chamfers\nmodule chamfers() {\n    // Top chamfer\n    translate([0, 0, bushing_height/2])\n        cylinder(h = 2, d1 = bushing_outer_d, d2 = bushing_outer_d - 2, center = true);\n    \n    // Bottom chamfer\n    translate([0, 0, -bushing_height/2])\n        cylinder(h = 2, d1 = bushing_outer_d - 2, d2 = bushing_outer_d, center = true);\n}\n\n// Main assembly\nunion() {\n    bushing_body();\n    mounting_flange();\n    bottom_collar();\n    chamfers();\n    \n    // Add lubrication grooves only on outer surface\n    intersection() {\n        bushing_body();\n        lubrication_grooves();\n    }\n}\n\n// Add parting line detail\ntranslate([0, 0, 0])\n    cube([bushing_outer_d + 2, 0.5, bushing_height], center = true);",
    "renders": true
  },
  {
    "office_supply": "fuel",
    "openscad_code": "// Fuel container furniture - a stackable jerry can style holder for office\n// Overall dimensions: 120mm x 60mm x 180mm tall\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule can_body() {\n    // Main can body - slightly tapered for realism\n    difference() {\n        // Outer shell\n        hull() {\n            cube([110, 50, 160], center=true);\n            translate([0, 0, 80])\n                cube([105, 45, 0], center=true);\n        }\n        \n        // Inner hollow space\n        translate([0, 0, -5])\n            cube([106, 46, 155], center=true);\n    }\n}\n\nmodule can_handle() {\n    // Handle on top\n    translate([0, 28, 80]) {\n        difference() {\n            rotate([90, 0, 0])\n                cylinder(h=35, d1=12, d2=12);\n            rotate([90, 0, 0])\n                cylinder(h=35, d1=8, d2=8);\n        }\n    }\n}\n\nmodule spout() {\n    // Pouring spout on side\n    translate([55, 0, 130]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h=25, d1=20, d2=15);\n                cylinder(h=25, d1=16, d2=11);\n            }\n        }\n        // Cap\n        translate([0, 15, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8, d=18);\n    }\n}\n\nmodule reinforcement_ribs() {\n    // Structural ribs for stacking\n    for(i=[-40, 0, 40]) {\n        translate([i, 0, 20])\n            cube([4, 52, 3]);\n        translate([i, 0, 140])\n            cube([4, 52, 3]);\n    }\n}\n\nmodule stacking_lip() {\n    // Top lip for stacking cans\n    translate([0, 0, 82]) {\n        difference() {\n            cube([112, 52, 6], center=true);\n            cube([108, 48, 7], center=true);\n        }\n    }\n}\n\nmodule base_feet() {\n    // Four feet for stability\n    for(x=[-45, 45])\n        for(y=[-20, 20])\n            translate([x, y, -83])\n                cube([8, 8, 8], center=true);\n}\n\n// Assembly\nunion() {\n    // Main can\n    can_body();\n    \n    // Functional elements\n    can_handle();\n    spout();\n    \n    // Structural elements\n    reinforcement_ribs();\n    stacking_lip();\n    base_feet();\n    \n    // Label area indentation\n    translate([0, -28, 80])\n        cube([60, 2, 40], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "tires",
    "openscad_code": "// Tire Stack Office Stool - Realistic Style, Medium Complexity\n// A stack of three tires forming a small stool with central support\n\n// General parameters\ntire_outer_d = 80;          // Outer diameter of tire (mm)\ntire_inner_d = 45;          // Inner diameter of tire (mm)\ntire_thickness = 20;        // Thickness of each tire (mm)\nnum_tires = 3;              // Number of tires in stack\nsupport_d = 20;             // Central support column diameter (mm)\nleg_h = 50;                 // Leg height from bottom tire (mm)\nwall_thickness = 2;         // Wall thickness for 3D printing\n\nmodule tire_profile() {\n    // Create the tire cross-section profile (donut shape)\n    difference() {\n        circle(d = tire_outer_d);\n        circle(d = tire_inner_d);\n    }\n}\n\nmodule single_tire() {\n    // Generate one tire using rotational extrusion\n    linear_extrude(height = tire_thickness, center = true)\n        tire_profile();\n    \n    // Add sidewall details - inner reinforcement ring\n    translate([0, 0, tire_thickness/2 + wall_thickness/2])\n        cylinder(h = wall_thickness, d1 = tire_inner_d + 10, d2 = tire_inner_d + 10, $fn = 60);\n    translate([0, 0, -tire_thickness/2 - wall_thickness/2])\n        cylinder(h = wall_thickness, d1 = tire_inner_d + 10, d2 = tire_inner_d + 10, $fn = 60);\n    \n    // Add tread pattern using small cylinders\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([tire_outer_d/2 - 3, 0, 0])\n                cylinder(h = tire_thickness - 2, d = 2, center = true);\n    }\n}\n\nmodule central_support() {\n    // Central support column through all tires\n    cylinder(h = num_tires * tire_thickness + 2, d = support_d, center = false, $fn = 60);\n    \n    // Add base plate for stability\n    translate([0, 0, -1])\n        cylinder(h = wall_thickness * 2, d = tire_outer_d * 0.8, center = false, $fn = 60);\n}\n\nmodule legs() {\n    // Three support legs for stability\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n            translate([tire_outer_d/2 * 0.7, 0, leg_h/2])\n                cube([wall_thickness * 3, wall_thickness * 3, leg_h], center = true);\n    }\n}\n\nmodule stool_top() {\n    // Top seating surface - slightly larger than tire\n    translate([0, 0, num_tires * tire_thickness + wall_thickness/2])\n        cylinder(h = wall_thickness * 2, d = tire_outer_d * 1.1, center = false, $fn = 60);\n    \n    // Add comfort grooves on top\n    for(i = [0:3]) {\n        rotate([0, 0, i * 45])\n            translate([tire_outer_d * 0.3, 0, num_tires * tire_thickness + wall_thickness * 2])\n                cube([tire_outer_d * 0.6, 2, wall_thickness * 2], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Stack of tires\n    for(i = [0:num_tires-1]) {\n        translate([0, 0, i * tire_thickness])\n            single_tire();\n    }\n    \n    // Central support structure\n    central_support();\n    \n    // Support legs\n    legs();\n    \n    // Top seating surface\n    stool_top();\n}",
    "renders": true
  },
  {
    "office_supply": "brakes",
    "openscad_code": "// Office chair brake caster (wheel lock) - realistic style, medium complexity\n// Overall size ~60mm diameter, 3D printable\n\n$fn = 32;\n\n// Main parameters\nwheel_d = 30;\nwheel_h = 12;\nbrake_base_w = 45;\nbrake_base_h = 8;\nstem_d = 11;\nstem_h = 15;\nwall_t = 2;\n\nmodule brake_assembly() {\n    // Central wheel\n    union() {\n        // Wheel tire (outer ring)\n        difference() {\n            cylinder(d=wheel_d, h=wheel_h, center=true);\n            cylinder(d=wheel_d-wall_t*2, h=wheel_h+0.1, center=true);\n        }\n        \n        // Wheel hub\n        color(\"silver\")\n        cylinder(d=wheel_d/3, h=wheel_h+0.2, center=true);\n        \n        // Spokes (5 spokes)\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n            translate([0, wheel_d/4, 0])\n            cube([3, wheel_d/2.5, wheel_h*0.8], center=true);\n        }\n    }\n    \n    // Brake housing (upper assembly)\n    translate([0, 0, wheel_h/2 + brake_base_h/2]) {\n        difference() {\n            // Main brake body\n            cube([brake_base_w, brake_base_w*0.7, brake_base_h], center=true);\n            \n            // Wheel clearance cutout\n            translate([0, 0, -brake_base_h/2])\n            cylinder(d=wheel_d+4, h=brake_base_h+0.2);\n            \n            // Stem hole\n            translate([0, -brake_base_w*0.2, 0])\n            rotate([90, 0, 0])\n            cylinder(d=stem_d, h=brake_base_w, center=true);\n        }\n        \n        // Brake pad mechanism\n        translate([0, 0, -brake_base_h/2 - 1])\n        difference() {\n            // Brake pad housing\n            cube([wheel_d*0.9, 8, 4], center=true);\n            // Spring space\n            translate([0, 0, -1])\n            cube([wheel_d*0.7, 6, 3], center=true);\n        }\n        \n        // Mounting stem\n        translate([0, -brake_base_w*0.2, brake_base_h/2 + stem_h/2])\n        cylinder(d=stem_d, h=stem_h);\n        \n        // Stem reinforcement ring\n        translate([0, -brake_base_w*0.2, brake_base_h/2])\n        cylinder(d=stem_d+4, h=2);\n        \n        // Brake lever\n        translate([brake_base_w/2 + 8, 0, 0])\n        rotate([0, 0, -30])\n        union() {\n            // Lever arm\n            cube([15, 5, 3], center=true);\n            // Lever handle\n            translate([7.5, 0, 0])\n            sphere(d=6);\n        }\n    }\n}\n\n// Generate the brake assembly\nbrake_assembly();",
    "renders": true
  },
  {
    "office_supply": "batteries",
    "openscad_code": "// Battery-shaped desk organizer with pen holder and drawer\n// Overall size: ~120mm tall, 60mm diameter\n\n// Parameters\n$fn = 32;\nbattery_d = 60;\nbattery_h = 120;\nwall_t = 2;\nnegative_clearance = 0.2;\n\n// Main battery body module\nmodule battery_body() {\n    difference() {\n        // Main cylinder\n        cylinder(h = battery_h, d = battery_d, center = true);\n        \n        // Hollow center for storage\n        translate([0, 0, -wall_t])\n            cylinder(h = battery_h - wall_t*2, d = battery_d - wall_t*2, center = true);\n        \n        // Top opening\n        translate([0, 0, battery_h/2 - wall_t])\n            cylinder(h = wall_t + 1, d = battery_d - wall_t*2);\n    }\n}\n\n// Positive terminal (button top)\nmodule positive_terminal() {\n    // Main button\n    translate([0, 0, battery_h/2 + 3])\n        cylinder(h = 6, d = 20);\n    \n    // Insulator ring\n    translate([0, 0, battery_h/2])\n        difference() {\n            cylinder(h = 2, d = battery_d);\n            cylinder(h = 2, d = battery_d - wall_t*2);\n        }\n}\n\n// Negative terminal (flat bottom with spring contact)\nmodule negative_terminal() {\n    // Base plate\n    translate([0, 0, -battery_h/2 - 2])\n        cylinder(h = 4, d = battery_d);\n    \n    // Spring contact pattern\n    for (i = [0:5:355]) {\n        rotate([0, 0, i])\n            translate([battery_d/2 - 8, 0, -battery_h/2 - 1])\n                cube([6, 2, 2]);\n    }\n}\n\n// Pen holder slot on side\nmodule pen_holder() {\n    // Cut angled slot\n    rotate([15, 0, 0])\n        translate([0, battery_d/2 - 10, battery_h/4])\n            cube([8, 20, 30], center = true);\n    \n    // Add small drawer below\n    translate([0, battery_d/2 - wall_t - 5, -battery_h/4])\n        difference() {\n            cube([20, wall_t + 10, 15], center = true);\n            translate([0, 5, 0])\n                cube([18 - negative_clearance, wall_t + 12, 13 - negative_clearance], center = true);\n        }\n    \n    // Drawer handle\n    translate([0, battery_d/2 + 2, -battery_h/4])\n        cube([4, 2, 6], center = true);\n}\n\n// Battery label details\nmodule battery_label() {\n    // Main label band\n    color(\"silver\")\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h = 25, d = battery_d + 0.5, center = true);\n            cylinder(h = 26, d = battery_d - wall_t*2, center = true);\n        }\n    \n    // Plus sign on label\n    translate([0, 0, 0])\n        cube([12, 2, 26], center = true);\n    translate([0, 0, 0])\n        cube([2, 12, 26], center = true);\n}\n\n// Assembly\nunion() {\n    battery_body();\n    positive_terminal();\n    negative_terminal();\n    pen_holder();\n    battery_label();\n}",
    "renders": true
  },
  {
    "office_supply": "filters",
    "openscad_code": "// Realistic OpenSCAD model of a desktop water filter unit  \n// Overall footprint 100 x 90 mm, height 110 mm, 2 mm wall thickness\n\n$fn = 50;\n\n// --- Main assembly ----------------------------------------------------------\nunion() {\n    base_reservoir();\n    filter_housing();\n    spout();\n    handle();\n    lid();\n}\n\n// --- Lower water reservoir --------------------------------------------------\nmodule base_reservoir() {\n    difference() {\n        // outer shell\n        translate([0, 0, 50])\n            cube([100, 90, 60], center = true);\n\n        // inner cavity\n        translate([0, 0, 50])\n            cube([96, 86, 58], center = true);\n\n        // vent hole in rear\n        translate([0, -45, 80])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 8);\n    }\n}\n\n// --- Central filter cartridge housing ---------------------------------------\nmodule filter_housing() {\n    difference() {\n        // outer cylinder\n        translate([0, 0, 35])\n            cylinder(h = 70, d = 36);\n\n        // inner bore\n        translate([0, 0, 33])\n            cylinder(h = 72, d = 32);\n\n        // top lip for lid seal\n        translate([0, 0, 70])\n            cylinder(h = 4, d = 40);\n    }\n}\n\n// --- Pour spout -------------------------------------------------------------\nmodule spout() {\n    translate([25, 0, 85])\n        rotate([0, -30, 0])\n            difference() {\n                // spout body\n                cube([40, 20, 8], center = true);\n\n                // inner channel\n                translate([0, 0, 2])\n                    cube([36, 16, 4], center = true);\n            }\n}\n\n// --- Ergonomic carrying handle ----------------------------------------------\nmodule handle() {\n    difference() {\n        // grip bar\n        translate([-50, 0, 80])\n            rotate([0, 90, 0])\n                cylinder(h = 70, d = 10);\n\n        // finger grooves\n        for (i = [-1, 0, 1])\n            translate([-50, i * 12, 80])\n                rotate([0, 90, 0])\n                    cylinder(h = 12, d = 6);\n    }\n}\n\n// --- Top lid with fill grate -----------------------------------------------\nmodule lid() {\n    difference() {\n        // lid disc\n        translate([0, 0, 106])\n            cylinder(h = 4, d = 44);\n\n        // fill grate slots\n        for (a = [0:30:150])\n            rotate([0, 0, a])\n                translate([0, 15, 108])\n                    cube([2, 30, 2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "belts",
    "openscad_code": "// Belts Furniture - OpenSCAD\n// Realistic style office belts holder with medium complexity\n\n// Parameters\n$fn=50;\nwall_thickness = 2;\nbase_width = 120;\nbase_depth = 80;\nbase_height = 8;\npost_height = 100;\npost_diameter = 12;\nholder_diameter = 25;\nholder_thickness = 3;\narm_length = 40;\narm_width = 8;\narm_thickness = 4;\nnum_holders = 4;\nholder_spacing = 20;\n\n// Base module\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded corners cut\n        for (x = [-base_width/2+wall_thickness, base_width/2-wall_thickness])\n            for (y = [-base_depth/2+wall_thickness, base_depth/2-wall_thickness])\n                translate([x, y, base_height])\n                    cylinder(r=wall_thickness, h=wall_thickness*2);\n    }\n    \n    // Rubber feet\n    foot_size = 6;\n    foot_height = 1.5;\n    for (x = [-base_width/2+15, base_width/2-15])\n        for (y = [-base_depth/2+15, base_depth/2-15])\n            translate([x, y, foot_height/2])\n                cylinder(r=foot_size/2, h=foot_height);\n}\n\n// Center post module\nmodule post() {\n    // Main post\n    cylinder(r=post_diameter/2, h=post_height);\n    \n    // Reinforcement ring at base\n    translate([0, 0, wall_thickness])\n        cylinder(r=post_diameter/2+2, h=wall_thickness*2);\n}\n\n// Belt holder module\nmodule holder() {\n    difference() {\n        // Main ring\n        cylinder(r=holder_diameter/2, h=holder_thickness);\n        \n        // Inner hole\n        cylinder(r=holder_diameter/2-5, h=holder_thickness+1);\n    }\n    \n    // Support arm\n    translate([arm_length/2, 0, 0])\n        cube([arm_length, arm_width, arm_thickness], center=true);\n    \n    // Connection to post\n    translate([-arm_length/2-1, 0, 0])\n        cube([2, arm_width+2, arm_thickness+2], center=true);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Post\n    translate([0, 0, base_height])\n        post();\n    \n    // Belt holders\n    for (i = [0:num_holders-1]) {\n        angle = i * (360/num_holders);\n        translate([0, 0, base_height+post_height-20-i*holder_spacing])\n            rotate([0, 0, angle])\n                translate([post_diameter/2+arm_length/2, 0, 0])\n                    holder();\n    }\n    \n    // Top cap\n    translate([0, 0, base_height+post_height])\n        cylinder(r=post_diameter/2+2, h=wall_thickness*2);\n    \n    // Label plate\n    translate([base_width/2-15, 0, base_height/2])\n        rotate([0, 0, 0])\n            cube([30, 20, wall_thickness], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "hoses",
    "openscad_code": "// OpenSCAD Hose Reel Furniture Item\n// Realistic style, medium complexity\n\n$fn = 36;\nwall_thickness = 2;\n\nmodule reel_hub() {\n    difference() {\n        cylinder(h=15, r1=25, r2=25);\n        cylinder(h=16, r1=20, r2=20);\n    }\n}\n\nmodule reel_side(diameter) {\n    difference() {\n        cylinder(h=5, r1=diameter/2, r2=diameter/2);\n        cylinder(h=6, r1=diameter/2-wall_thickness, r2=diameter/2-wall_thickness);\n    }\n    // Spokes for structural support\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n        translate([0,diameter/2-10,2.5])\n        cube([wall_thickness, 20, 5]);\n    }\n}\n\nmodule hose_guide() {\n    translate([25, 0, 20]) {\n        rotate([90,0,0]) {\n            difference() {\n                cylinder(h=15, r1=8, r2=8);\n                cylinder(h=16, r1=6, r2=6);\n            }\n        }\n    }\n}\n\nmodule handle() {\n    rotate([0,90,0]) {\n        translate([0,0,30]) {\n            // Handle bar\n            cylinder(h=60, r1=4, r2=4);\n            // Handle grip\n            translate([0,0,30])\n            cylinder(h=20, r1=6, r2=6);\n        }\n    }\n}\n\nmodule base_frame() {\n    // Main frame\n    translate([0,0,-5]) {\n        difference() {\n            cube([120, 60, 10]);\n            translate([wall_thickness, wall_thickness, -1])\n            cube([120-2*wall_thickness, 60-2*wall_thickness, 12]);\n        }\n    }\n    \n    // Support legs\n    for(x=[-40,40]) {\n        for(y=[-20,20]) {\n            translate([x,y,-15]) {\n                difference() {\n                    cylinder(h=10, r1=4, r2=4);\n                    cylinder(h=11, r1=2, r2=2);\n                }\n            }\n        }\n    }\n}\n\nmodule hose_coil() {\n    color(\"darkgreen\")\n    for(i=[0:5]) {\n        rotate([0,0,i*30])\n        translate([22.5,0,7.5+i*2.5])\n        rotate_extrude(angle=360, $fn=16)\n        translate([2.5,0,0])\n        circle(r=2.5);\n    }\n}\n\n// Assembly\nunion() {\n    base_frame();\n    \n    translate([0,0,10]) {\n        // Reel assembly\n        union() {\n            // Left side\n            translate([-7.5,0,0])\n            reel_side(50);\n            \n            // Hub\n            reel_hub();\n            \n            // Right side\n            translate([7.5,0,0])\n            reel_side(50);\n            \n            // Handle\n            translate([7.5,25,7.5])\n            handle();\n            \n            // Hose guide\n            hose_guide();\n        }\n        \n        // Hose\n        translate([-7.5,0,0])\n        hose_coil();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "oil",
    "openscad_code": "// Oil bottle for furniture maintenance\n// Overall dimensions: 60mm diameter, 110mm height, 2mm wall thickness\n\nmodule bottle_body() {\n    // Main cylindrical body with slight taper\n    cylinder(h1=75, h2=80, r1=28, r2=25, $fn=100);\n}\n\nmodule bottle_neck() {\n    // Narrow neck for pouring control\n    translate([0, 0, 80]) {\n        cylinder(h=25, r1=12, r2=10, $fn=50);\n    }\n}\n\nmodule bottle_cap() {\n    // Screw cap with grip ridges\n    translate([0, 0, 105]) {\n        difference() {\n            cylinder(h=8, r=12, $fn=100);\n            // Internal threads space\n            cylinder(h=8, r=10, $fn=50);\n        }\n        // Grip ridges\n        for(i=[0:9]) {\n            rotate([0, 0, i*36]) {\n                translate([11.5, -1.5, 0]) {\n                    cube([3, 3, 8]);\n                }\n            }\n        }\n    }\n}\n\nmodule bottle_base() {\n    // Reinforced base with slight indent\n    difference() {\n        cylinder(h=5, r=30, $fn=100);\n        // Indent for stability\n        translate([0, 0, 2]) {\n            cylinder(h=3, r=26, $fn=100);\n        }\n    }\n}\n\nmodule handle() {\n    // Ergonomic handle attached to side\n    translate([30, 0, 40]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Main handle tube\n                cylinder(h=50, r=6, $fn=32);\n                // Hollow center\n                cylinder(h=50, r=4, $fn=32);\n            }\n        }\n    }\n}\n\nmodule label_area() {\n    // Flattened area for label\n    translate([0, 28, 40]) {\n        cube([40, 2, 30], center=true);\n    }\n}\n\nmodule spout() {\n    // Detachable pouring spout\n    translate([0, 0, 105]) {\n        rotate([30, 0, 0]) {\n            difference() {\n                // Spout tube\n                cylinder(h=20, r=4, $fn=32);\n                // Hollow channel\n                cylinder(h=20, r=2, $fn=32);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    difference() {\n        // Outer shell\n        union() {\n            bottle_base();\n            bottle_body();\n            bottle_neck();\n            bottle_cap();\n        }\n        // Inner cavity\n        translate([0, 0, 5]) {\n            cylinder(h=70, r=23, $fn=100);\n        }\n        translate([0, 0, 80]) {\n            cylinder(h=25, r=8, $fn=50);\n        }\n    }\n    handle();\n    label_area();\n}",
    "renders": true
  },
  {
    "office_supply": "coolant",
    "openscad_code": "// Coolant Dispenser Furniture - Realistic Style, Medium Complexity\n// Office water cooler with bottle, drip tray, and base\n\n$fn = 32;\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 15;\nbody_width = 65;\nbody_depth = 50;\nbody_height = 120;\nbottle_diameter = 45;\nbottle_height = 70;\ntap_height = 100;\ndrip_tray_width = 55;\ndrip_tray_depth = 40;\ndrip_tray_height = 12;\n\nmodule base() {\n    // Main base with rounded edges\n    translate([0, 0, base_height/2])\n        difference() {\n            minkowski() {\n                cube([base_width, base_depth, base_height], center=true);\n                sphere(3);\n            }\n            // Hollow interior\n            translate([0, 0, 2])\n                cube([base_width-4, base_depth-4, base_height], center=true);\n        }\n    \n    // Rubber feet\n    for(x = [-base_width/2 + 10, base_width/2 - 10])\n        for(y = [-base_depth/2 + 10, base_depth/2 - 10])\n            translate([x, y, 0])\n                cylinder(h=2, r=5);\n}\n\nmodule body() {\n    // Main body shell\n    translate([0, 0, base_height + body_height/2])\n        difference() {\n            cube([body_width, body_depth, body_height], center=true);\n            // Interior cavity\n            translate([0, 0, 5])\n                cube([body_width-4, body_depth-4, body_height-10], center=true);\n        }\n    \n    // Front panel with controls\n    translate([0, body_depth/2 + 1, base_height + body_height - 30])\n        cube([40, 2, 25], center=true);\n    \n    // Control buttons\n    for(i = [-1, 1])\n        translate([i * 10, body_depth/2 + 2, base_height + body_height - 25])\n            cylinder(h=3, r=4);\n}\n\nmodule bottle() {\n    // Bottle neck\n    translate([0, 0, base_height + body_height + bottle_height - 10])\n        cylinder(h=15, r1=8, r2=10);\n    \n    // Main bottle body\n    translate([0, 0, base_height + body_height + bottle_height/2 + 5])\n        difference() {\n            cylinder(h=bottle_height, r=bottle_diameter/2);\n            // Interior cavity\n            cylinder(h=bottle_height-4, r=bottle_diameter/2-3);\n        }\n    \n    // Bottle cap\n    translate([0, 0, base_height + body_height + bottle_height + 7])\n        cylinder(h=8, r=10);\n}\n\nmodule tap() {\n    // Tap housing\n    translate([0, body_depth/2 - 5, base_height + tap_height])\n        union() {\n            // Main tap body\n            rotate([90, 0, 0])\n                cylinder(h=20, r=8);\n            \n            // Tap lever\n            translate([0, 15, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r=3);\n            \n            // Spout\n            translate([0, 20, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=15, r1=8, r2=5);\n        }\n}\n\nmodule drip_tray() {\n    // Drip tray base\n    translate([0, body_depth/2 - 15, base_height + 30])\n        difference() {\n            cube([drip_tray_width, drip_tray_depth, drip_tray_height], center=true);\n            // Hollow top\n            translate([0, 0, drip_tray_height/2 - 2])\n                cube([drip_tray_width-4, drip_tray_depth-4, drip_tray_height], center=true);\n        }\n    \n    // Drain holes\n    for(x = [-15, 0, 15])\n        for(y = [-10, 0, 10])\n            translate([x, body_depth/2 - 15, base_height + 30])\n                cylinder(h=3, r=2);\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    bottle();\n    tap();\n    drip_tray();\n    \n    // Side handles\n    translate([body_width/2 + 5, 0, base_height + body_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=3);\n    \n    translate([-body_width/2 - 5, 0, base_height + body_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=3);\n}",
    "renders": true
  },
  {
    "office_supply": "headlights",
    "openscad_code": "// Office Headlights Furniture - Desk Lamp Style\n// Realistic medium complexity design\n\n$fn = 50;\n\n// Main parameters\nlamp_height = 120;\nbase_radius = 45;\nshade_height = 50;\nshade_top_radius = 40;\nshade_bottom_radius = 60;\narm_length = 80;\narm_thickness = 8;\n\n// Base module\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=15, r=base_radius, center=false);\n        \n        // Cable hole\n        translate([0, 0, 7.5])\n            rotate([90, 0, 0])\n                cylinder(h=base_radius*2, r=4, center=true);\n        \n        // Mounting holes pattern\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n                translate([base_radius*0.7, 0, -1])\n                    cylinder(h=17, r=3, center=false);\n        }\n    }\n    \n    // Rubber feet\n    for(i=[0:2]) {\n        rotate([0, 0, i*120+60])\n            translate([base_radius*0.7, 0, 0])\n                cylinder(h=3, r=4, center=false);\n    }\n}\n\n// Adjustable arm module\nmodule arm() {\n    // Lower arm segment\n    translate([0, 0, 15])\n        rotate([0, 0, 0])\n            difference() {\n                cylinder(h=arm_length*0.6, r=arm_thickness/2, center=false);\n                translate([0, 0, -1])\n                    cylinder(h=arm_length*0.6+2, r=arm_thickness/2-2, center=false);\n            }\n    \n    // Joint\n    translate([0, 0, 15+arm_length*0.6])\n        sphere(r=arm_thickness/2+2);\n    \n    // Upper arm segment\n    translate([0, 0, 15+arm_length*0.6])\n        rotate([45, 0, 0])\n            difference() {\n                cylinder(h=arm_length*0.5, r=arm_thickness/2, center=false);\n                translate([0, 0, -1])\n                    cylinder(h=arm_length*0.5+2, r=arm_thickness/2-2, center=false);\n            }\n}\n\n// Lamp shade module\nmodule shade() {\n    // Main shade cone\n    translate([0, 0, 15+arm_length*0.6+arm_length*0.5*0.707])\n        rotate([45, 0, 0])\n            difference() {\n                cylinder(h1=shade_bottom_radius, h2=shade_top_radius, h=shade_height, center=false);\n                \n                // Inner cavity\n                translate([0, 0, -1])\n                    cylinder(h1=shade_bottom_radius-4, h2=shade_top_radius-4, h=shade_height+2, center=false);\n                \n                // Ventilation holes\n                for(i=[0:5]) {\n                    rotate([0, 0, i*60])\n                        translate([shade_bottom_radius*0.7, 0, shade_height*0.3])\n                            cylinder(h=5, r=3, center=false);\n                }\n            }\n    \n    // Bulb socket\n    translate([0, 0, 15+arm_length*0.6+arm_length*0.5*0.707+shade_height*0.3])\n        rotate([45, 0, 0])\n            difference() {\n                cylinder(h=10, r=shade_top_radius*0.5, center=false);\n                translate([0, 0, -1])\n                    cylinder(h=12, r=shade_top_radius*0.5-2, center=false);\n            }\n    \n    // Diffuser ring\n    translate([0, 0, 15+arm_length*0.6+arm_length*0.5*0.707])\n        rotate([45, 0, 0])\n            difference() {\n                cylinder(h=3, r=shade_bottom_radius+2, center=false);\n                translate([0, 0, -1])\n                    cylinder(h=5, r=shade_bottom_radius, center=false);\n            }\n}\n\n// Switch module\nmodule switch() {\n    translate([base_radius*0.8, 0, 10])\n        difference() {\n            cube([8, 12, 6], center=true);\n            translate([0, 0, -1])\n                cube([6, 10, 8], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    arm();\n    shade();\n    switch();\n}",
    "renders": true
  },
  {
    "office_supply": "taillights",
    "openscad_code": "// OpenSCAD Taillights Furniture – Medium Complexity Realistic Style\n// 2024-06-10\n// Overall size ~110 mm wide x 50 mm deep x 80 mm high\n// Wall thickness 2 mm – all parts printable without supports\n\n$fn = 32;\n\n// Main module\nmodule taillightsFurniture() {\n    difference() {\n        union() {\n            // Main rectangular body\n            translate([0, 0, 39])\n                roundedBox([110, 50, 40], 4);\n\n            // Two cylindrical taillight housings\n            translate([ -35, 0, 0])\n                taillightHousing();\n            translate([ 35, 0, 0])\n                taillightHousing();\n\n            // Mounting plate for furniture joint / wall\n            translate([0, 27, 39])\n                cube([110, 4, 40], center = true);\n\n            // Structural reinforcement ribs between housings\n            for (x = [-15, 0, 15])\n                translate([x, 0, 20])\n                    cube([8, 46, 2], center = true);\n        }\n\n        // Remove screw holes\n        for (y = [15, -15])\n            translate([0, y + 27, 59])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, d = 5, center = true);\n    }\n}\n\n// Helper module for rounded box\nmodule roundedBox(size, r) {\n    hull() {\n        for (dx = [-1, 1], dy = [-1, 1], dz = [-1, 1])\n            translate([dx * (size[0]/2 - r),\n                       dy * (size[1]/2 - r),\n                       dz * (size[2]/2 - r)])\n                sphere(r);\n    }\n}\n\n// Taillight housing with lens and inner reflector\nmodule taillightHousing() {\n    difference() {\n        // Outer housing shell\n        cylinder(h = 42, d = 38, center = true);\n\n        // Inner cavity for electronics\n        translate([0, 0, -2])\n            cylinder(h = 46, d = 34, center = true);\n    }\n\n    // Reflector bowl\n    difference() {\n        translate([0, 0, 10])\n            cylinder(h = 20, d = 34, center = true);\n        translate([0, 0, 22])\n            cylinder(h = 10, d = 30, center = true);\n    }\n\n    // Clear lens plate – sits proud of housing\n    translate([0, 0, 21.5])\n        cylinder(h = 2, d = 36, center = true);\n}\n\n// Render\ntaillightsFurniture();",
    "renders": true
  },
  {
    "office_supply": "mirrors",
    "openscad_code": "// Wall-mounted bathroom mirror with wooden frame and shelf\n// Overall size: ~110 mm wide x 90 mm tall x 25 mm deep\n// 3D-printable (no support, 2 mm walls)\n\n$fn = 32;               // Smooth curves\n\n// ====== Parameters ======\nmirror_w = 90;          // Mirror glass width\nmirror_h = 70;          // Mirror glass height\nmirror_t = 2;           // Mirror glass thickness\nframe_w = 4;            // Frame thickness around glass\nshelf_d = 15;           // Shelf depth\nshelf_t = 3;            // Shelf thickness\nback_t = 2;             // Rear mounting plate thickness\npeg_d = 5;              // Wall-peg diameter\npeg_h = 8;              // Wall-peg height\n\n// ====== Modules ======\n\n// Wooden frame around mirror\nmodule frame() {\n    difference() {\n        // Outer frame\n        cube([mirror_w + 2*frame_w, mirror_h + 2*frame_w, mirror_t + back_t]);\n        \n        // Cutout for glass\n        translate([frame_w, frame_w, back_t])\n            cube([mirror_w, mirror_h, mirror_t + 1]);\n    }\n}\n\n// Mirror glass pane\nmodule glass() {\n    color(\"lightblue\", 0.4)\n    translate([frame_w, frame_w, back_t])\n        cube([mirror_w, mirror_h, mirror_t]);\n}\n\n// Small shelf below mirror\nmodule shelf() {\n    translate([-frame_w, mirror_h + 2*frame_w - shelf_t, back_t - shelf_t])\n        cube([mirror_w + 2*frame_w, shelf_d, shelf_t]);\n}\n\n// Rear mounting plate (hidden)\nmodule back_plate() {\n    translate([0, 0, 0])\n        cube([mirror_w + 2*frame_w, mirror_h + 2*frame_w, back_t]);\n}\n\n// Wall pegs (simple dowels for hanging)\nmodule pegs() {\n    for (x = [mirror_w*0.25, mirror_w*0.75])\n    translate([x + frame_w, -peg_h, back_t/2])\n        rotate([90, 0, 0])\n            cylinder(d = peg_d, h = peg_h, center = true);\n}\n\n// ====== Assembly ======\nunion() {\n    frame();\n    glass();\n    shelf();\n    back_plate();\n    pegs();\n}",
    "renders": true
  },
  {
    "office_supply": "windshields",
    "openscad_code": "// Windshields office room divider / privacy screen\n// Overall size: 150mm wide x 120mm high x 40mm deep\n// 3D-printable with 2 mm walls and no severe overhangs\n\n$fn = 36;\n\n// Main dimensions\ntotal_width = 150;\ntotal_height = 120;\ntotal_depth = 40;\npanel_thickness = 2;\nleg_width = 20;\nleg_height = 100;\nleg_depth = 30;\n\n// Frame dimensions\nframe_width = 3;\nframe_top_height = 8;\nframe_bottom_height = 8;\n\n// Frosted acrylic panel dimensions\npanel_width = total_width - 2 * frame_width;\npanel_height = total_height - frame_top_height - frame_bottom_height;\n\n// Base cross-bar\nbase_bar_height = 8;\n\nmodule frame_side() {\n    difference() {\n        cube([frame_width, total_height, total_depth]);\n        translate([0, frame_top_height, panel_thickness])\n            cube([frame_width, panel_height, total_depth - 2*panel_thickness]);\n    }\n}\n\nmodule frame_top() {\n    difference() {\n        cube([total_width, frame_top_height, total_depth]);\n        translate([frame_width, 0, panel_thickness])\n            cube([panel_width, frame_top_height, total_depth - 2*panel_thickness]);\n    }\n}\n\nmodule frame_bottom() {\n    difference() {\n        cube([total_width, frame_bottom_height, total_depth]);\n        translate([frame_width, 0, panel_thickness])\n            cube([panel_width, frame_bottom_height, total_depth - 2*panel_thickness]);\n    }\n}\n\nmodule frosted_panel() {\n    difference() {\n        cube([panel_width, panel_height, panel_thickness]);\n        // Lightening holes pattern\n        for (x = [10:30:panel_width - 10])\n            for (y = [10:30:panel_height - 10])\n                translate([x, y, -1])\n                    cylinder(h = panel_thickness + 2, r = 3, $fn = 20);\n    }\n}\n\nmodule leg() {\n    difference() {\n        cube([leg_width, leg_height, leg_depth]);\n        // Cable cutout\n        translate([leg_width/2, leg_height - 15, leg_depth/2])\n            rotate([0, 90, 0])\n                cylinder(h = leg_width, r = 8, $fn = 20);\n    }\n}\n\nmodule base_bar() {\n    cube([total_width, base_bar_height, 10]);\n}\n\nmodule hinge_pin() {\n    cylinder(h = 15, r = 3, $fn = 20);\n}\n\nmodule hinge_half() {\n    difference() {\n        union() {\n            translate([0, 0, 0])\n                cube([6, 20, 6]);\n            translate([0, 0, 6])\n                cylinder(h = 8, r = 3, $fn = 20);\n        }\n        translate([0, 0, -1])\n            cylinder(h = 20, r = 2, $fn = 20);\n    }\n}\n\n// Assembly\nunion() {\n    // Left frame side\n    frame_side();\n\n    // Right frame side\n    translate([total_width - frame_width, 0, 0])\n        mirror([1, 0, 0])\n            frame_side();\n\n    // Top frame\n    translate([0, 0, 0])\n        frame_top();\n\n    // Bottom frame\n    translate([0, total_height - frame_bottom_height, 0])\n        frame_bottom();\n\n    // Frosted acrylic panel\n    translate([frame_width, frame_top_height, (total_depth - panel_thickness)/2])\n        frosted_panel();\n\n    // Left leg\n    translate([-leg_width/2, total_height - leg_height, (total_depth - leg_depth)/2])\n        leg();\n\n    // Right leg\n    translate([total_width - leg_width/2, total_height - leg_height, (total_depth - leg_depth)/2])\n        leg();\n\n    // Base bar for stability\n    translate([0, total_height - base_bar_height, (total_depth - 10)/2])\n        base_bar();\n\n    // Hinge on right side for connecting multiple panels\n    translate([total_width, total_height/2 - 10, total_depth/2])\n        rotate([90, 0, 0])\n            hinge_half();\n}",
    "renders": true
  },
  {
    "office_supply": "seats",
    "openscad_code": "// Realistic Office Chair - Medium Complexity\n// 3D printable, roughly 1:20 scale office swivel chair\n\n$fn = 24;\n\nmodule chair() {\n    // Seat base with ergonomic curve\n    difference() {\n        // Main seat cushion\n        translate([0, 0, 40])\n            scale([1, 1.2, 0.4])\n                sphere(25);\n        \n        // Hollow out bottom for weight reduction\n        translate([0, 0, 35])\n            scale([0.9, 1.1, 0.3])\n                sphere(23);\n    }\n    \n    // Seat back with lumbar support\n    difference() {\n        // Backrest\n        translate([0, -25, 65])\n            rotate([15, 0, 0])\n                scale([1, 0.3, 1.5])\n                    sphere(30);\n        \n        // Lumbar curve\n        translate([0, -35, 60])\n            rotate([15, 0, 0])\n                scale([0.7, 0.5, 1.2])\n                    sphere(25);\n    }\n    \n    // Armrest supports\n    for(side = [-1, 1]) {\n        // Left/right armrest posts\n        translate([side * 22, 5, 55])\n            cylinder(h = 20, r = 3);\n        \n        // Armrest pads\n        translate([side * 22, 5, 75])\n            rotate([0, side * 10, 0])\n                scale([1, 3, 0.5])\n                    cube([6, 15, 3], center = true);\n    }\n    \n    // Central support pole\n    cylinder(h = 40, r = 5);\n    \n    // Five-star base\n    difference() {\n        // Main hub\n        cylinder(h = 8, r = 12);\n        \n        // Central hole\n        cylinder(h = 10, r = 6);\n    }\n    \n    // Base legs (5 legs at 72 degree intervals)\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 15, 0])\n                cube([6, 30, 6], center = true);\n        \n        // Caster wheels\n        translate([0, 30, 0])\n            rotate([0, 0, i * 72])\n                sphere(3);\n    }\n    \n    // Height adjustment lever\n    translate([15, 0, 35])\n        rotate([0, 0, 30])\n            difference() {\n                // Lever handle\n                cube([2, 15, 2], center = true);\n                \n                // Mounting hole\n                cube([1.5, 4, 1.5], center = true);\n            }\n}\n\n// Assemble the chair\nchair();",
    "renders": true
  },
  {
    "office_supply": "engines",
    "openscad_code": "// Office Engine Bookshelf – a free-standing piece of furniture shaped like a V-8 engine block\n// Overall footprint ≈ 120 mm × 100 mm × 140 mm (L×W×H)\n// Wall thickness = 2 mm everywhere, all parts printable without support\n\n$fn = 36;\n\n// ---------- Parameters ----------\nblock_len = 120;\nblock_wid = 100;\nblock_hgt = 120;\nwall = 2;              // uniform wall thickness\nbore_d  = 22;          // cylinder bore diameter\nbore_h  = 30;          // cylinder bore depth\nshelf_thk = 8;         // shelf boards\nfoot_h = 10;           // height of bottom feet\n\n// ---------- Main block (hollow) ----------\nmodule block_shell() {\n    difference() {\n        // outer block\n        cube([block_len, block_wid, block_hgt], center = true);\n        // inner void\n        translate([0,0,-wall/2])\n            cube([block_len-2*wall, block_wid-2*wall, block_hgt-wall], center = true);\n    }\n}\n\n// ---------- Cylinder bores (8 in two banks) ----------\nmodule bores() {\n    // bank angle 90°\n    bank_sep = 40;\n    for (bank = [0:1])\n        for (cyl = [0:3]) {\n            y = (bank==0 ? -bank_sep/2 : bank_sep/2);\n            x = -block_len/2 + 20 + cyl*25;\n            translate([x, y, block_hgt/2 - bore_h])\n                difference() {\n                    cylinder(d=bore_d, h=bore_h);\n                    translate([0,0,-1])\n                        cylinder(d=bore_d-2*wall, h=bore_h+2);\n                }\n        }\n}\n\n// ---------- Shelves inside void ----------\nmodule shelves() {\n    shelf_w = block_wid - 2*wall - 8;\n    shelf_l = block_len - 2*wall - 8;\n    translate([0,0,-block_hgt/2 + foot_h + shelf_thk/2])\n        cube([shelf_l, shelf_w, shelf_thk], center = true);\n    translate([0,0,-block_hgt/2 + foot_h + 3*shelf_thk + 35])\n        cube([shelf_l, shelf_w, shelf_thk], center = true);\n}\n\n// ---------- Structural feet ----------\nmodule feet() {\n    foot_l = 20;\n    foot_w = 30;\n    for (x = [-1,1])\n        for (y = [-1,1])\n            translate([x*(block_len/2 - foot_l/2 - 5),\n                       y*(block_wid/2 - foot_w/2 - 5),\n                       -block_hgt/2 - foot_h/2])\n                cube([foot_l, foot_w, foot_h], center = true);\n}\n\n// ---------- Assembly ----------\nunion() {\n    block_shell();\n    bores();\n    shelves();\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "transmissions",
    "openscad_code": "// Transmission-style desk organizer / pen holder\n// Realistic style, medium complexity\n// Wall thickness: 2mm\n// Overall size: 120mm x 80mm x 90mm\n\n$fn = 32;\n\n// Main body parameters\nbody_w = 120;\nbody_d = 80;\nbody_h = 90;\nwall_t = 2;\n\n// Gear parameters\ngear_r = 15;\ngear_h = 10;\ngear_teeth = 8;\ntooth_w = 3;\ntooth_h = 2;\n\n// Drawer parameters\ndrawer_w = 35;\ndrawer_d = 70;\ndrawer_h = 25;\n\nmodule gear(r, h, teeth, tooth_w, tooth_h) {\n    difference() {\n        cylinder(r = r + tooth_h, h = h);\n        for (i = [0:teeth-1]) {\n            rotate([0, 0, i * 360/teeth])\n                translate([r + tooth_h/2, 0, -1])\n                    cube([tooth_h, tooth_w, h + 2], center = true);\n        }\n    }\n}\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([body_w, body_d, body_h], center = true);\n        \n        // Hollow inside\n        translate([0, 0, wall_t/2])\n            cube([body_w - 2*wall_t, body_d - 2*wall_t, body_h - wall_t], center = true);\n    }\n}\n\nmodule pen_holes() {\n    for (x = [-40, -20, 0, 20, 40]) {\n        for (y = [-20, 0, 20]) {\n            translate([x, y, body_h/2 - wall_t])\n                cylinder(r = 8, h = body_h - wall_t);\n        }\n    }\n}\n\nmodule gear_decorations() {\n    // Top gears\n    translate([-body_w/2 + 25, body_d/2 - 15, body_h/2 + gear_h/2])\n        rotate([90, 0, 0])\n            gear(gear_r, gear_h, gear_teeth, tooth_w, tooth_h);\n    \n    translate([body_w/2 - 25, body_d/2 - 15, body_h/2 + gear_h/2])\n        rotate([90, 0, 0])\n            gear(gear_r, gear_h, gear_teeth, tooth_w, tooth_h);\n    \n    translate([0, -body_d/2 + 15, body_h/2 + gear_h/2])\n        rotate([90, 0, 0])\n            gear(gear_r, gear_h, gear_teeth, tooth_w, tooth_h);\n}\n\nmodule drawer() {\n    difference() {\n        // Drawer box\n        translate([0, 0, -body_h/2 + drawer_h/2 + wall_t])\n            cube([drawer_w, drawer_d, drawer_h], center = true);\n        \n        // Hollow drawer\n        translate([0, 0, -body_h/2 + drawer_h/2 + wall_t])\n            cube([drawer_w - 2*wall_t, drawer_d - 2*wall_t - 5, drawer_h - wall_t], center = true);\n        \n        // Handle hole\n        translate([0, drawer_d/2 - 10, -body_h/2 + drawer_h/2 + wall_t])\n            cube([20, 10, wall_t], center = true);\n    }\n    \n    // Handle\n    translate([0, drawer_d/2 - 5, -body_h/2 + drawer_h/2 + wall_t])\n        cube([15, 5, 8], center = true);\n}\n\nmodule cable_management() {\n    // Rear cable slot\n    translate([0, body_d/2 - wall_t/2, 0])\n        cube([body_w - 40, wall_t, 20], center = true);\n    \n    // Side cable holes\n    translate([body_w/2 - wall_t/2, -20, 0])\n        rotate([0, 90, 0])\n            cylinder(r = 8, h = wall_t);\n    \n    translate([body_w/2 - wall_t/2, 20, 0])\n        rotate([0, 90, 0])\n            cylinder(r = 8, h = wall_t);\n}\n\n// Assembly\nunion() {\n    main_body();\n    \n    difference() {\n        cube([body_w, body_d, body_h], center = true);\n        pen_holes();\n    }\n    \n    gear_decorations();\n    \n    drawer();\n    \n    cable_management();\n}",
    "renders": true
  },
  {
    "office_supply": "suspension",
    "openscad_code": "// Suspension office chair - realistic style, medium complexity\n// Overall dimensions: ~100mm tall, 80mm wide, 80mm deep\n\n$fn = 32;  // Circle smoothness\n\n// Main parameters\nseat_diameter = 60;\nseat_thickness = 4;\nbackrest_width = 55;\nbackrest_height = 40;\nbackrest_thickness = 3;\ngas_spring_diameter = 8;\ngas_spring_height = 35;\nbase_diameter = 80;\nwheel_count = 5;\nwheel_diameter = 12;\nwheel_thickness = 6;\narmrest_width = 8;\narmrest_height = 25;\narmrest_length = 30;\n\nmodule chair() {\n    // Seat cushion\n    translate([0, 0, gas_spring_height + wheel_diameter/2 + 2])\n    difference() {\n        cylinder(h = seat_thickness, d = seat_diameter);\n        // Cushion detail - slight indentation\n        translate([0, 0, -0.1])\n        cylinder(h = seat_thickness + 0.2, d = seat_diameter * 0.8);\n    }\n    \n    // Backrest\n    translate([0, -seat_diameter/2 + backrest_width/2, gas_spring_height + wheel_diameter/2 + seat_thickness + backrest_height/2])\n    rotate([5, 0, 0])  // Slight recline\n    cube([backrest_thickness, backrest_width, backrest_height], center = true);\n    \n    // Armrests\n    for(side = [-1, 1]) {\n        translate([side * (seat_diameter/2 - 5), 0, gas_spring_height + wheel_diameter/2 + seat_thickness - 2])\n        union() {\n            // Vertical support\n            cube([armrest_width, armrest_width, armrest_height], center = true);\n            // Horizontal rest\n            translate([side * armrest_length/2, 0, armrest_height/2])\n            rotate([0, -20, 0])\n            cube([armrest_length, armrest_width, armrest_width], center = true);\n        }\n    }\n    \n    // Gas spring\n    translate([0, 0, gas_spring_height/2 + wheel_diameter/2])\n    cylinder(h = gas_spring_height, d = gas_spring_diameter);\n    \n    // Spring protection cover\n    translate([0, 0, wheel_diameter/2 + gas_spring_height/4])\n    cylinder(h = gas_spring_height/2, d1 = gas_spring_diameter * 1.8, d2 = gas_spring_diameter * 1.8);\n    \n    // Base hub\n    translate([0, 0, wheel_diameter/2])\n    cylinder(h = wheel_diameter/2, d = gas_spring_diameter * 2);\n    \n    // Base arms and wheels\n    for(i = [0:wheel_count-1]) {\n        angle = i * 360/wheel_count;\n        \n        // Base arm\n        translate([0, 0, wheel_diameter/4])\n        rotate([0, 0, angle])\n        translate([base_diameter/2 - 10, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = base_diameter/2 - 10, d = 6);\n        \n        // Wheel\n        translate([cos(angle) * (base_diameter/2 - 5), sin(angle) * (base_diameter/2 - 5), 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = wheel_thickness, d = wheel_diameter);\n            // Wheel hole\n            cylinder(h = wheel_thickness + 1, d = 3);\n        }\n        \n        // Wheel fork\n        translate([cos(angle) * (base_diameter/2 - 5), sin(angle) * (base_diameter/2 - 5), wheel_diameter/2])\n        rotate([0, 0, angle])\n        cube([8, 5, 5], center = true);\n    }\n}\n\nchair();",
    "renders": true
  },
  {
    "office_supply": "steering",
    "openscad_code": "// Office chair steering base module\nmodule steering_base() {\n    // Central hub\n    cylinder(h = 20, d = 25, $fn = 32);\n    \n    // Hub collar\n    translate([0, 0, 18]) \n        cylinder(h = 5, d1 = 25, d2 = 30, $fn = 32);\n}\n\n// Steering wheel rim\nmodule wheel_rim() {\n    // Main rim ring\n    rotate_extrude(angle = 360, $fn = 64)\n        translate([45, 0, 0])\n            circle(r = 5);\n}\n\n// Spoke connection\nmodule spoke(count = 5) {\n    for (i = [0 : count-1]) {\n        rotate([0, 0, i * 360/count])\n            translate([0, 0, 10])\n                rotate([90, 0, 0])\n                    cylinder(h = 35, d = 6, $fn = 16);\n    }\n}\n\n// Central mounting boss\nmodule mounting_boss() {\n    difference() {\n        // Main boss\n        cylinder(h = 15, d = 20, $fn = 32);\n        \n        // Mounting hole\n        cylinder(h = 16, d = 8, $fn = 32);\n        \n        // Keyway slot\n        translate([0, 4, -1])\n            cube([2, 8, 17]);\n    }\n}\n\n// Steering column sleeve\nfunction sleeve_segments() = 8;\nmodule column_sleeve() {\n    for (i = [0 : sleeve_segments()-1]) {\n        rotate([0, 0, i * 360/sleeve_segments()])\n            translate([12, 0, 0])\n                cylinder(h = 25, d = 4, $fn = 8);\n    }\n}\n\n// Ergonomic grip sections\nmodule grip_pads() {\n    for (angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([45, 0, -3])\n                rotate([90, 0, 0])\n                    scale([1.2, 1, 0.8])\n                        cylinder(h = 20, d = 12, $fn = 20);\n    }\n}\n\n// Main steering assembly\nmodule steering_wheel() {\n    union() {\n        // Base structure\n        steering_base();\n        \n        // Mounting boss\n        translate([0, 0, 20])\n            mounting_boss();\n        \n        // Column connection\n        translate([0, 0, 5])\n            column_sleeve();\n        \n        // Wheel structure\n        translate([0, 0, 10])\n            union() {\n                // Rim\n                wheel_rim();\n                \n                // Spokes\n                spoke();\n                \n                // Center hub\n                cylinder(h = 8, d = 18, $fn = 32);\n                \n                // Grip pads\n                grip_pads();\n            }\n    }\n}\n\n// Scale for 3D printing (120mm diameter)\nscale(1.2)\n    steering_wheel();",
    "renders": true
  },
  {
    "office_supply": "exhaust",
    "openscad_code": "// Office Exhaust Furniture - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 80mm x 60mm\n\n$fn = 32;\n\n// Main exhaust body module\nmodule exhaust_body() {\n    // Outer cylindrical housing\n    difference() {\n        cylinder(h = 50, d = 60, center = false);\n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 46, d = 56, center = false);\n    }\n}\n\n// Mounting bracket module\nmodule mounting_bracket() {\n    // Top bracket\n    translate([0, 0, 50])\n        difference() {\n            cube([80, 20, 8], center = true);\n            // Screw holes\n            for (x = [-30, 30])\n                translate([x, 0, 4])\n                    cylinder(h = 10, d = 4, center = true);\n        }\n}\n\n// Exhaust flange module\nmodule exhaust_flange() {\n    // Bottom mounting flange\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h = 8, d = 80, center = false);\n            // Bolt holes\n            for (i = [0:3])\n                rotate([0, 0, i * 90])\n                    translate([30, 0, 4])\n                        cylinder(h = 10, d = 6, center = true);\n        }\n}\n\n// Fan blade module\nmodule fan_blades() {\n    // Central hub\n    translate([0, 0, 25])\n        cylinder(h = 8, d = 20, center = true);\n    \n    // Fan blades\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([15, 0, 25])\n                cube([25, 4, 2], center = true);\n    }\n}\n\n// Protective grill module\nmodule grill() {\n    // Outer ring\n    translate([0, 0, 48])\n        cylinder(h = 4, d = 58, center = false);\n    \n    // Grill bars\n    for (i = [0:7]) {\n        rotate([0, 0, i * 22.5])\n            translate([0, 0, 50])\n                cube([56, 2, 2], center = true);\n    }\n}\n\n// Side mounting tabs\nmodule side_tabs() {\n    // Left tab\n    translate([-40, 0, 25])\n        difference() {\n            cube([15, 8, 30], center = true);\n            // Mounting hole\n            translate([-7.5, 0, 0])\n                cylinder(h = 10, d = 4, center = true);\n        }\n    \n    // Right tab\n    translate([40, 0, 25])\n        difference() {\n            cube([15, 8, 30], center = true);\n            // Mounting hole\n            translate([7.5, 0, 0])\n                cylinder(h = 10, d = 4, center = true);\n        }\n}\n\n// Assembly\nunion() {\n    exhaust_body();\n    mounting_bracket();\n    exhaust_flange();\n    fan_blades();\n    grill();\n    side_tabs();\n}",
    "renders": true
  },
  {
    "office_supply": "radiators",
    "openscad_code": "// Office Radiator Heater Unit\n// 3D printable model with realistic proportions\n// Medium complexity, ~100 lines\n\n// Main parameters\nwidth = 120;\nheight = 80;\ndepth = 40;\nwall_th = 2;\nfin_spacing = 6;\n\n// Base frame structure\nmodule base_frame() {\n    // Bottom support rails\n    translate([0, -depth/2 + 3, 0])\n        cube([width, 6, wall_th], center=true);\n    translate([0, depth/2 - 3, 0])\n        cube([width, 6, wall_th], center=true);\n    \n    // Side support posts\n    translate([-width/2 + 3, 0, 0])\n        cube([wall_th*2, depth - 12, height], center=true);\n    translate([width/2 - 3, 0, 0])\n        cube([wall_th*2, depth - 12, height], center=true);\n}\n\n// Heat fins array\nmodule heat_fins() {\n    fin_count = floor(width / fin_spacing) - 1;\n    \n    for (i = [-fin_count/2:fin_count/2]) {\n        translate([i * fin_spacing, 0, height/2 - 5])\n            cube([wall_th, depth - wall_th*2, height - 10], center=true);\n    }\n}\n\n// Top grill\nmodule top_grill() {\n    // Main grill frame\n    translate([0, 0, height - wall_th])\n        cube([width - 4, depth - 4, wall_th], center=true);\n    \n    // Grill slots\n    slot_count = 8;\n    for (i = [-slot_count/2:slot_count/2]) {\n        translate([i * 7, 0, height + 0.1])\n            cube([3, depth - 6, wall_th*2], center=true);\n    }\n}\n\n// Control valve assembly\nmodule control_valve() {\n    // Valve body\n    translate([-width/2 - 5, 0, height/2])\n        rotate([0, 90, 0])\n            cylinder(h=12, r=4, center=true);\n    \n    // Valve knob\n    translate([-width/2 - 12, 0, height/2])\n        sphere(r=3);\n    \n    // Pipe connection\n    translate([-width/2 - 2, 0, height/2 - 10])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=2.5, center=true);\n}\n\n// Side mounting brackets\nmodule mounting_brackets() {\n    // Left bracket\n    translate([-width/2 - 3, 0, height/2 - 20])\n        difference() {\n            cube([6, 8, 15], center=true);\n            translate([0, 0, 7])\n                cylinder(h=15, r=2.5, center=true);\n        }\n    \n    // Right bracket\n    translate([width/2 + 3, 0, height/2 - 20])\n        mirror([1, 0, 0])\n            difference() {\n                cube([6, 8, 15], center=true);\n                translate([0, 0, 7])\n                    cylinder(h=15, r=2.5, center=true);\n            }\n}\n\n// Main assembly\nunion() {\n    // Base frame\n    base_frame();\n    \n    // Heat dissipation fins\n    heat_fins();\n    \n    // Top grill\n    top_grill();\n    \n    // Control valve on left side\n    control_valve();\n    \n    // Mounting brackets\n    mounting_brackets();\n    \n    // Front panel detail\n    translate([0, depth/2 - wall_th/2, height/2])\n        cube([width - 8, wall_th, height - 10], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "alternators",
    "openscad_code": "// Alternator-style office desk organizer\n// Realistic medium-complexity model with 3D-printable features\n// Overall dimensions: 120mm x 80mm x 85mm\n\n$fn = 32;\n\n// Main body frame\nmodule frame_base() {\n    // Bottom platform\n    difference() {\n        cube([120, 80, 4], center=true);\n        translate([0, 0, -1])\n            cube([116, 76, 6], center=true);\n    }\n    \n    // Side walls\n    for(side = [-1, 1]) {\n        translate([0, side*37, 42.5])\n            cube([116, 6, 81], center=true);\n    }\n    \n    // Back wall\n    translate([0, 0, 42.5])\n        cube([120, 74, 3], center=true);\n}\n\n// Alternator-style rotating compartments\nmodule rotating_trays() {\n    // Central axle\n    translate([0, 0, 45])\n        cylinder(h=40, r=6, center=true);\n    \n    // Tray supports\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 25])\n                cylinder(h=40, r=2, center=true);\n    }\n    \n    // Three compartments\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([35, 0, 25])\n                compartment();\n    }\n}\n\n// Single compartment with 2mm walls\nmodule compartment() {\n    difference() {\n        // Outer shell\n        cube([50, 35, 35], center=true);\n        \n        // Inner cavity\n        translate([0, 0, 1])\n            cube([46, 31, 33], center=true);\n        \n        // Finger notch\n        translate([0, 17.5, 17.5])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=8, center=true);\n    }\n    \n    // Reinforcement ribs\n    for(x = [-20, 0, 20]) {\n        translate([x, 0, 0])\n            cube([2, 35, 35], center=true);\n    }\n}\n\n// Drawer unit\nmodule drawer_unit() {\n    // Drawer housing\n    translate([-45, 0, 10])\n        difference() {\n            cube([25, 70, 20], center=true);\n            translate([0, 0, 1])\n                cube([21, 66, 18], center=true);\n        }\n    \n    // Drawer front\n    translate([-44, 0, 10])\n        difference() {\n            cube([3, 66, 16], center=true);\n            translate([0, 0, -7])\n                cube([2, 20, 4], center=true);\n        }\n    \n    // Drawer handle\n    translate([-42.5, 0, 10])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=3, center=true);\n}\n\n// Pen/pencil holders\nmodule pen_holders() {\n    // Left holder\n    translate([45, 25, 10])\n        holder_array();\n    \n    // Right holder\n    translate([45, -25, 10])\n        holder_array();\n}\n\nmodule holder_array() {\n    for(x = [-6, 0, 6]) {\n        for(y = [-6, 0, 6]) {\n            translate([x, y, 0])\n                cylinder(h=20, r=5, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    frame_base();\n    \n    // Rotating mechanism\n    rotating_trays();\n    \n    // Storage features\n    drawer_unit();\n    pen_holders();\n    \n    // Cable management groove\n    translate([0, 0, -1.5])\n        cube([10, 74, 2], center=true);\n    \n    // Rubber feet\n    for(x = [-50, 50]) {\n        for(y = [-30, 30]) {\n            translate([x, y, -2])\n                cylinder(h=2, r=3);\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "starters",
    "openscad_code": "// Pen Holder - Realistic Office Furniture Starter\n// Medium complexity with functional details\n\n$fn = 32;\n\nmodule pen_slot(width, depth, height) {\n    // Individual pen slot with rounded edges\n    difference() {\n        // Main slot body\n        translate([-width/2, -depth/2, 0])\n            cube([width, depth, height]);\n        \n        // Inner cavity\n        translate([-width/2+2, -depth/2+2, 0])\n            cube([width-4, depth-4, height+1]);\n        \n        // Rounded bottom\n        translate([0, 0, -0.5])\n            cylinder(h=height+1, r=width/2-2, center=true);\n    }\n}\n\nmodule base_with_feet() {\n    // Main base with rounded corners and feet\n    difference() {\n        // Base body\n        minkowski() {\n            cube([80, 60, 8], center=true);\n            cylinder(h=0.1, r=4);\n        }\n        \n        // Recessed bottom\n        translate([0, 0, -2])\n            cube([76, 56, 6], center=true);\n    }\n    \n    // Four feet\n    for(x = [-30, 30])\n        for(y = [-20, 20])\n            translate([x, y, -6])\n                cylinder(h=6, r=3);\n}\n\nmodule divider_wall(length, height) {\n    // Thin dividing wall between slots\n    cube([length, 2, height], center=true);\n}\n\nmodule front_label_ridge() {\n    // Raised label area on front\n    translate([0, 31, 4])\n        cube([40, 2, 6], center=true);\n}\n\nmodule rear_pen_rest() {\n    // Higher rear section for longer pens\n    translate([0, -20, 10])\n        cube([78, 18, 20], center=true);\n    \n    // Cut slots in rear section\n    for(x = [-30, -15, 0, 15, 30])\n        translate([x, -20, 0])\n            pen_slot(10, 14, 25);\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    base_with_feet();\n    \n    // Front pen slots\n    for(x = [-30, -15, 0, 15, 30]) {\n        translate([x, 15, 8])\n            pen_slot(10, 14, 25);\n    }\n    \n    // Rear elevated section\n    rear_pen_rest();\n    \n    // Dividing walls\n    for(x = [-22.5, -7.5, 7.5, 22.5]) {\n        translate([x, 5, 20])\n            divider_wall(2, 30);\n    }\n    \n    // Front label ridge\n    front_label_ridge();\n    \n    // Side reinforcements\n    translate([40, 0, 15])\n        cube([2, 58, 20], center=true);\n    translate([-40, 0, 15])\n        cube([2, 58, 20], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "sparkplugs",
    "openscad_code": "// Sparkplugs Desk Organizer\n// Realistic style, medium complexity\n\n// Global parameters\n$fn = 36;\n\nmodule sparkplug_organizer() {\n    // Base dimensions\n    base_w = 120;\n    base_d = 80;\n    base_h = 8;\n    \n    // Spark plug body dimensions\n    plug_d = 22;\n    plug_h = 75;\n    hex_size = 18;\n    hex_h = 12;\n    \n    // Thread dimensions\n    thread_d = 14;\n    thread_h = 20;\n    \n    // Center electrode dimensions\n    electrode_d = 3;\n    electrode_h = 15;\n    \n    // Create base with rounded edges\n    difference() {\n        translate([0, 0, base_h/2])\n            minkowski() {\n                cube([base_w, base_d, base_h], center=true);\n                sphere(2);\n            }\n        \n        // Cut compartments\n        for (i = [0:2]) {\n            translate([i * 40 - 40, 0, -1])\n                cube([30, 70, base_h + 2], center=true);\n        }\n    }\n    \n    // Create spark plug storage tubes\n    for (i = [0:2]) {\n        for (j = [0:1]) {\n            x_pos = i * 40 - 40;\n            y_pos = j * 25 - 12.5;\n            \n            // Main tube body\n            translate([x_pos, y_pos, base_h + plug_h/2])\n                cylinder(d=plug_d + 4, h=plug_h);\n            \n            // Inner cavity\n            translate([x_pos, y_pos, base_h + 2])\n                cylinder(d=plug_d, h=plug_h);\n            \n            // Hexagonal section (nut)\n            translate([x_pos, y_pos, base_h + plug_h - hex_h/2])\n                cylinder(d=hex_size, h=hex_h, $fn=6);\n            \n            // Threaded section\n            translate([x_pos, y_pos, base_h + plug_h - hex_h - thread_h/2])\n                cylinder(d=thread_d + 2, h=thread_h);\n            \n            // Thread cavity\n            translate([x_pos, y_pos, base_h + plug_h - hex_h - thread_h + 2])\n                cylinder(d=thread_d, h=thread_h - 2);\n            \n            // Center electrode\n            translate([x_pos, y_pos, base_h + plug_h + electrode_h/2])\n                cylinder(d=electrode_d, h=electrode_h);\n            \n            // Side electrode\n            translate([x_pos + thread_d/2 + 1, y_pos, base_h + plug_h - hex_h - thread_h/2])\n                rotate([90, 0, 0])\n                    cylinder(d=2, h=8);\n        }\n    }\n    \n    // Add structural support ribs\n    for (i = [0:2]) {\n        x_pos = i * 40 - 40;\n        translate([x_pos, -base_d/2 + 5, base_h/2 + 37.5])\n            cube([30, 2, 75]);\n        translate([x_pos, base_d/2 - 5, base_h/2 + 37.5])\n            cube([30, 2, 75]);\n    }\n    \n    // Add rubber feet\n    foot_r = 3;\n    foot_h = 2;\n    foot_offset = 5;\n    \n    for (x = [-1:1]) {\n        for (y = [-1:1]) {\n            translate([x * (base_w/2 - foot_offset), y * (base_d/2 - foot_offset), -foot_h/2])\n                cylinder(r=foot_r, h=foot_h);\n        }\n    }\n    \n    // Add label area\n    translate([0, base_d/2 - 10, base_h + 2])\n        cube([80, 15, 0.5]);\n}\n\n// Render the organizer\nsparkplug_organizer();",
    "renders": true
  },
  {
    "office_supply": "wipers",
    "openscad_code": "// Wipers furniture - a compact office wiper holder with replaceable blade\n// Dimensions: 120mm wide x 60mm deep x 80mm tall\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main module\nmodule wipers_furniture() {\n    difference() {\n        union() {\n            // Base frame\n            base_frame();\n            \n            // Blade storage compartments\n            blade_storage();\n            \n            // Handle support structure\n            handle_support();\n            \n            // Mounting brackets\n            mounting_brackets();\n            \n            // Cable management\n            cable_management();\n        }\n        \n        // Cutouts for functionality\n        blade_slots();\n        handle_hole();\n        mounting_holes();\n    }\n}\n\n// Base frame structure\nmodule base_frame() {\n    // Main base plate\n    cube([120, 60, 4], center=true);\n    \n    // Side walls for stability\n    translate([0, 27, 38]) cube([116, 6, 76], center=true);\n    translate([0, -27, 38]) cube([116, 6, 76], center=true);\n    \n    // Front lip for blade retention\n    translate([0, 30, 2]) cube([112, 4, 8], center=true);\n}\n\n// Blade storage compartments\nmodule blade_storage() {\n    // Left compartment\n    translate([-40, 0, 42]) {\n        difference() {\n            cube([30, 54, 76], center=true);\n            // Inner cavity for blades\n            translate([0, 0, 4]) cube([26, 50, 68], center=true);\n        }\n    }\n    \n    // Right compartment\n    translate([40, 0, 42]) {\n        difference() {\n            cube([30, 54, 76], center=true);\n            translate([0, 0, 4]) cube([26, 50, 68], center=true);\n        }\n    }\n}\n\n// Handle support structure\nmodule handle_support() {\n    // Central support column\n    translate([0, 0, 40]) {\n        difference() {\n            cylinder(h=78, r=8);\n            cylinder(h=80, r=6);\n        }\n    }\n    \n    // Support arms\n    for(i=[-1, 1]) {\n        translate([i*25, 0, 60]) {\n            rotate([0, 90, 0]) cylinder(h=20, r=3);\n        }\n    }\n}\n\n// Mounting brackets for wall/desk\nmodule mounting_brackets() {\n    // Rear brackets\n    translate([0, -32, 20]) {\n        for(x=[-45, 45]) {\n            translate([x, 0, 0]) {\n                cube([12, 6, 8], center=true);\n                translate([0, -3, -2]) cube([8, 2, 4], center=true);\n            }\n        }\n    }\n    \n    // Side brackets\n    translate([58, 0, 40]) {\n        rotate([90, 0, 90]) cylinder(h=15, r=4);\n    }\n    translate([-58, 0, 40]) {\n        rotate([90, 0, 90]) cylinder(h=15, r=4);\n    }\n}\n\n// Cable management hooks\nmodule cable_management() {\n    // Top hooks\n    for(x=[-35, -15, 15, 35]) {\n        translate([x, 0, 78]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=8, r=3);\n                    translate([0, 0, -5]) cylinder(h=10, r=2);\n                }\n            }\n        }\n    }\n}\n\n// Cutouts for blade slots\nmodule blade_slots() {\n    // Top blade slots\n    for(x=[-40, 40]) {\n        translate([x, 0, 76]) {\n            cube([28, 2, 4], center=true);\n        }\n    }\n}\n\n// Handle insertion hole\nmodule handle_hole() {\n    translate([0, 0, 78]) {\n        cylinder(h=6, r=10);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    // Rear mounting holes\n    translate([0, -32, 20]) {\n        for(x=[-45, 45]) {\n            translate([x, 0, 0]) {\n                cylinder(h=10, r=2.5);\n            }\n        }\n    }\n    \n    // Side mounting holes\n    translate([58, 0, 40]) {\n        rotate([90, 0, 90]) cylinder(h=20, r=2.5);\n    }\n    translate([-58, 0, 40]) {\n        rotate([90, 0, 90]) cylinder(h=20, r=2.5);\n    }\n}\n\n// Generate the model\nwipers_furniture();",
    "renders": true
  },
  {
    "office_supply": "bumpers",
    "openscad_code": "// Office Chair Bumpers (set of 4)\n// Realistic style, medium complexity\n// Designed for 3D printing, 2 mm wall thickness\n\n$fn = 36;\n\n// Overall scale\nbumper_size = 40;   // 40 mm cube envelope per bumper\n\n// Dimensions\nwall = 2;           // wall thickness for printability\nr_outer = 18;       // outer radius of bumper ring\nr_inner = 14;       // inner radius (hollow center)\nh_total = 20;       // total height\nh_base = 8;         // height of fixing base\nh_ring = 12;        // height of bumper ring\nslot_w = 6;         // width of screw slot\nslot_h = 3;         // depth of screw slot\nslot_l = 20;        // length of screw slot\nchamfer = 1.5;      // top chamfer for aesthetics\n\n// Helper module for rounded cylinder\nmodule rounded_cylinder(r, h, r_top = r) {\n    cylinder(r1 = r, r2 = r_top, h = h, $fn = 36);\n}\n\n// Main bumper body\nmodule bumper() {\n    difference() {\n        // Outer ring and base combined\n        union() {\n            // Base cylinder with slight draft\n            translate([0, 0, 0])\n                rounded_cylinder(r_outer, h_base, r_outer - 1);\n            \n            // Upper bumper ring with chamfer\n            translate([0, 0, h_base])\n                rounded_cylinder(r_outer, h_ring, r_outer - chamfer);\n            \n            // Reinforcement ribs (4 spokes)\n            for (a = [0:90:270]) {\n                rotate([0, 0, a])\n                    translate([r_inner + wall, -wall/2, h_base])\n                        cube([r_outer - r_inner - wall, wall, h_ring]);\n            }\n        }\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(r = r_inner, h = h_total + 0.2);\n        \n        // Screw slot (horizontal)\n        translate([0, 0, h_base/2 - slot_h/2])\n            cube([slot_l, slot_w, slot_h], center = true);\n        \n        // Top edge chamfer cut\n        translate([0, 0, h_total - chamfer])\n            cylinder(r1 = r_outer - chamfer - 0.2, r2 = r_outer + 0.2, h = chamfer + 0.2);\n    }\n    \n    // Small grip ridges on outer surface\n    for (z = [h_base + 2 : 2 : h_total - 2]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(r = r_outer + 0.1, h = 0.5);\n                cylinder(r = r_outer - 0.5, h = 0.5);\n            }\n    }\n}\n\n// Create a set of 4 bumpers arranged for printing\ntranslate([-bumper_size, -bumper_size, 0]) bumper();\ntranslate([ bumper_size, -bumper_size, 0]) bumper();\ntranslate([-bumper_size,  bumper_size, 0]) bumper();\ntranslate([ bumper_size,  bumper_size, 0]) bumper();",
    "renders": true
  },
  {
    "office_supply": "fenders",
    "openscad_code": "// Fenders office chair (footrest-ring type)\n// Overall footprint ~Ø300 mm, height ~120 mm\n// Wall thickness 2 mm, printable without support\n\nmodule ring(od, id, h) {              // simple torus substitute\n    difference() {\n        cylinder(h=h, d=od, $fn=120);\n        translate([0,0,-.1])          // small gap avoids z-fight\n            cylinder(h=h+.2, d=id, $fn=120);\n    }\n}\n\nmodule spoke(count, idx) {            // single wheel spoke\n    rotate([0,0,idx*360/count]) {\n        translate([0,0,2])            // sit on build plate\n            cube([4, 30, 2], center=true);  // 2 mm wall\n    }\n}\n\nmodule caster() {                     // office-chair caster\n    union() {\n        // wheel\n        rotate([90,0,0])\n            cylinder(h=8, d1=10, d2=10, $fn=30);\n        // fork\n        translate([0,0,5])\n            cube([2, 2, 20], center=true);\n        // top pin\n        translate([0,0,20])\n            cylinder(h=10, d=6, $fn=20);\n    }\n}\n\n// Main footrest ring -------------------------------------------------\ntranslate([0,0,60])\n    ring(od=300, id=296, h=6);\n\n// Radial spokes ------------------------------------------------------\nfor(i=[0:4])\n    spoke(count=5, idx=i);\n\n// Center hub ---------------------------------------------------------\ntranslate([0,0,57])\n    cylinder(h=12, d=30, $fn=60);\n\n// Five casters -------------------------------------------------------\nfor(i=[0:4])\n    rotate([0,0,i*72])\n        translate([0,150,0])\n            caster();",
    "renders": true
  },
  {
    "office_supply": "doors",
    "openscad_code": "// Realistic 3D printable door model (medium complexity)\n// Overall size: 100mm tall x 60mm wide x 10mm deep\n// Wall thickness: 2mm for 3D printing\n\n$fa = 2;\n$fs = 0.5;\n\nmodule door_panel(width, height, thickness) {\n    // Main door panel with slight bevel\n    difference() {\n        cube([width, thickness, height]);\n        translate([2, -0.1, 2])\n            cube([width-4, thickness+0.2, height-4]);\n    }\n}\n\nmodule raised_panel(width, height, thickness) {\n    // Raised panel detail\n    translate([5, thickness-1, 5])\n        cube([width-10, 1, height-10]);\n    \n    // Beveled edges\n    translate([5, thickness-2, 5])\n        cube([width-10, 1, 2]);\n    translate([5, thickness-2, height-7])\n        cube([width-10, 1, 2]);\n    translate([5, thickness-2, 5])\n        cube([2, 1, height-10]);\n    translate([width-7, thickness-2, 5])\n        cube([2, 1, height-10]);\n}\n\nmodule door_handle() {\n    // Handle plate\n    translate([45, 5, 50])\n        rotate([90, 0, 0])\n            cylinder(h=2, r1=8, r2=8);\n    \n    // Handle grip\n    translate([45, 5, 50])\n        rotate([90, 0, 0])\n            rotate([0, 10, 0])\n                translate([0, 0, 2])\n                    cylinder(h=20, r1=3, r2=3);\n    \n    // Handle end\n    translate([45, 5, 50])\n        rotate([90, 0, 0])\n        rotate([0, 10, 0])\n            translate([0, 0, 22])\n                sphere(4);\n}\n\nmodule hinges(count) {\n    for(i = [1:count]) {\n        translate([-2, 0, i * 25])\n            rotate([90, 0, 0])\n                cylinder(h=4, r1=3, r2=3);\n        \n        // Hinge plates\n        translate([-2, -1, i * 25 - 5])\n            cube([2, 10, 10]);\n    }\n}\n\nmodule door_frame(width, height, thickness) {\n    // Left frame\n    translate([-4, -2, 0])\n        cube([4, 4, height+4]);\n    \n    // Top frame\n    translate([0, -2, height])\n        cube([width, 4, 4]);\n    \n    // Right frame\n    translate([width, -2, 0])\n        cube([4, 4, height+4]);\n    \n    // Bottom frame\n    translate([0, -2, 0])\n        cube([width, 4, 4]);\n}\n\nmodule lock_detail() {\n    // Keyhole plate\n    translate([5, 5, 50])\n        cube([8, 2, 12]);\n    \n    // Keyhole\n    translate([9, 6, 53])\n        rotate([90, 0, 0])\n            cylinder(h=2, r1=2, r2=2);\n    \n    translate([9, 6, 59])\n        rotate([90, 0, 0])\n            cylinder(h=2, r1=1, r2=1);\n    \n    // Keyhole slot\n    translate([7, 6.5, 55])\n        cube([4, 1, 4]);\n}\n\nmodule panel_lines() {\n    // Horizontal panel divider\n    translate([5, 2, 40])\n        cube([50, 1, 1]);\n    \n    // Vertical panel dividers\n    translate([30, 2, 5])\n        cube([1, 1, 70]);\n}\n\n// Main assembly\ndoor_width = 60;\ndoor_height = 100;\ndoor_thickness = 4;\n\nunion() {\n    // Door panel\n    door_panel(door_width, door_height, door_thickness);\n    \n    // Raised panel details\n    raised_panel(door_width, door_height, door_thickness);\n    \n    // Handle\n    door_handle();\n    \n    // Lock\n    lock_detail();\n    \n    // Hinges (3 hinges)\n    hinges(3);\n    \n    // Panel lines for realism\n    panel_lines();\n}\n\n// Optional frame (uncomment to print with frame)\n// translate([0, 0, 0])\n//     door_frame(door_width, door_height, door_thickness);",
    "renders": true
  },
  {
    "office_supply": "hoods",
    "openscad_code": "// Hood-style desk furniture (monitor stand with integrated storage)\n// Overall size: 120mm wide x 60mm deep x 100mm high\n\n$fn = 32;  // Smooth curves for printing\n\n// Main dimensions\nwidth = 120;\ndepth = 60;\nheight = 100;\nwall_thickness = 2;\n\n// Create hood-style monitor stand\nmodule hood_stand() {\n    // Base platform (where monitor sits)\n    translate([0, 0, height-20]) \n        cube([width, depth, 20], center=true);\n    \n    // Hood arch structure - front and back arches\n    difference() {\n        // Front arch\n        union() {\n            // Left arch support\n            translate([-width/2 + wall_thickness, 0, 0]) \n                cube([wall_thickness, depth, height], center=false);\n            \n            // Right arch support  \n            translate([width/2 - wall_thickness*2, 0, 0]) \n                cube([wall_thickness, depth, height], center=false);\n                \n            // Arch top beam\n            translate([0, 0, height-20]) \n                cube([width, wall_thickness, 20], center=true);\n        }\n        \n        // Cut arch shape\n        hull() {\n            cylinder(h=height*2, r=width/2 - wall_thickness, center=true);\n            translate([0, 0, height*2]) \n                cylinder(h=height*2, r=width/2 - wall_thickness*3, center=true);\n        }\n    }\n    \n    // Back arch (solid for stability)\n    rotate([0, 0, 180]) \n        translate([0, depth/2 - wall_thickness, 0]) {\n            difference() {\n                cube([width, wall_thickness*2, height], center=true);\n                translate([0, 0, height-10]) \n                    cube([width-20, wall_thickness*4, 20], center=true);\n            }\n        }\n}\n\n// Storage compartments under the hood\nmodule storage_compartments() {\n    // Left compartment\n    translate([-width/3, 0, 30]) {\n        difference() {\n            cube([width/3 - wall_thickness, depth - wall_thickness*4, 40], center=true);\n            // Inner cavity\n            translate([0, 0, wall_thickness]) \n                cube([width/3 - wall_thickness*3, depth - wall_thickness*6, 40 - wall_thickness*2], center=true);\n        }\n    }\n    \n    // Right compartment  \n    translate([width/3, 0, 30]) {\n        difference() {\n            cube([width/3 - wall_thickness, depth - wall_thickness*4, 40], center=true);\n            // Inner cavity\n            translate([0, 0, wall_thickness]) \n                cube([width/3 - wall_thickness*3, depth - wall_thickness*6, 40 - wall_thickness*2], center=true);\n        }\n    }\n    \n    // Cable management holes\n    for(x = [-width/2 + 20, width/2 - 20]) {\n        translate([x, depth/2 - wall_thickness, height-10]) \n            rotate([90, 0, 0]) \n                cylinder(h=wall_thickness*2, r=5, center=true);\n    }\n}\n\n// Ventilation slots in hood\nmodule ventilation_slots() {\n    for(y = [-depth/4, 0, depth/4]) {\n        translate([0, y, height-15]) \n            cube([width-40, 2, 5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    hood_stand();\n    storage_compartments();\n    ventilation_slots();\n    \n    // Anti-slip pads (bottom)\n    for(x = [-width/2 + 15, width/2 - 15]) {\n        for(y = [-depth/2 + 15, depth/2 - 15]) {\n            translate([x, y, 0]) \n                cylinder(h=2, r=5, center=false);\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "trunks",
    "openscad_code": "// Realistic Office Trunk - Medium Complexity\n// Dimensions: ~120mm x 70mm x 50mm\n\n$fn = 32;\n\n// Main trunk body\nmodule trunk_body() {\n    // Bottom base with rounded edges\n    difference() {\n        minkowski() {\n            cube([116, 66, 44], center = true);\n            sphere(3);\n        }\n        translate([0, 0, 2])\n            cube([110, 60, 44], center = true);\n    }\n}\n\n// Lid with slight curvature\nmodule trunk_lid() {\n    difference() {\n        // Curved top surface\n        hull() {\n            translate([-55, -30, 22])\n                sphere(3);\n            translate([55, -30, 22])\n                sphere(3);\n            translate([-55, 30, 22])\n                sphere(3);\n            translate([55, 30, 22])\n                sphere(3);\n            translate([0, 0, 28])\n                sphere(2);\n        }\n        \n        // Hollow inside\n        translate([0, 0, 2])\n            cube([110, 60, 20], center = true);\n    }\n}\n\n// Metal corner protectors\nmodule corner_protectors() {\n    for(x = [-54, 54])\n    for(y = [-32, 32])\n    for(z = [-20, 20]) {\n        translate([x, y, z]) {\n            difference() {\n                cube([6, 6, 6], center = true);\n                if(z == 20)\n                    translate([0, 0, -3])\n                        cube([3, 3, 6], center = true);\n            }\n        }\n    }\n}\n\n// Leather straps\nmodule straps() {\n    // Front straps with buckles\n    for(y = [-20, 20]) {\n        translate([0, y, 0]) {\n            // Main strap\n            cube([110, 4, 2], center = true);\n            // Buckle\n            translate([52, 0, 3])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r1 = 2.5, r2 = 2.5);\n        }\n    }\n}\n\n// Hinges\nmodule hinges() {\n    for(x = [-35, 35]) {\n        translate([x, 33, 22]) {\n            // Hinge base\n            cube([8, 3, 4], center = true);\n            // Pin\n            translate([0, 0, 2])\n                cylinder(h = 6, r = 1);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    translate([0, 35, 0]) {\n        // Handle base plates\n        for(x = [-20, 20]) {\n            translate([x, 0, 0])\n                cube([6, 4, 2], center = true);\n        }\n        // Handle grip\n        translate([0, 4, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 40, r = 2);\n    }\n}\n\n// Lock mechanism\nmodule lock() {\n    translate([0, -33, 0]) {\n        // Lock plate\n        cube([12, 4, 3], center = true);\n        // Keyhole\n        translate([0, 0, 2])\n            cylinder(h = 4, r = 1);\n        translate([0, 0, 3])\n            cube([0.5, 2, 2], center = true);\n    }\n}\n\n// Wood texture simulation with grooves\nmodule wood_texture() {\n    for(i = [-50:10:50]) {\n        translate([i, 0, 23])\n            cube([1, 60, 0.5], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    trunk_body();\n    \n    // Lid with hinges\n    translate([0, 0, 0])\n        trunk_lid();\n    \n    // Metal hardware\n    color([0.7, 0.7, 0.7])\n        corner_protectors();\n    \n    color([0.5, 0.3, 0.1])\n        straps();\n    \n    color([0.7, 0.7, 0.7])\n        hinges();\n    \n    color([0.7, 0.7, 0.7])\n        handle();\n    \n    color([0.6, 0.6, 0.6])\n        lock();\n    \n    // Wood grain detail\n    color([0.4, 0.25, 0.15])\n        wood_texture();\n}",
    "renders": true
  },
  {
    "office_supply": "panels",
    "openscad_code": "// Modern office storage cabinet with panel construction\n// Overall dimensions: 100mm W x 120mm H x 45mm D\n\n// Panel thickness constant\npanel_t = 2;\n\n// Main cabinet module\nmodule cabinet() {\n    // Side panels\n    difference() {\n        // Left side\n        translate([0,0,0])\n            cube([panel_t, 45, 120]);\n        \n        // Cable management holes\n        for (i = [1:3]) {\n            translate([panel_t/2, 22.5, 25*i])\n                rotate([90,0,0])\n                    cylinder(h=panel_t+1, r=3, $fn=20);\n        }\n    }\n    \n    // Right side (mirrored)\n    translate([100-panel_t,0,0])\n        cube([panel_t, 45, 120]);\n    \n    // Top panel\n    translate([0,0,120-panel_t])\n        cube([100, 45, panel_t]);\n    \n    // Bottom panel\n    translate([0,0,0])\n        cube([100, 45, panel_t]);\n    \n    // Back panel\n    translate([0,0,0])\n        cube([100, panel_t, 120]);\n    \n    // Middle shelf\n    translate([panel_t, 0, 60])\n        cube([100-2*panel_t, 45-panel_t, panel_t]);\n    \n    // Door assembly\n    door_assembly();\n}\n\n// Cabinet door with handle\nmodule door_assembly() {\n    // Main door panel\n    difference() {\n        translate([panel_t, 45-panel_t, panel_t])\n            cube([100-2*panel_t, panel_t, 118-2*panel_t]);\n        \n        // Window cutout\n        translate([50-15, 45-panel_t-1, 60-20])\n            cube([30, panel_t+2, 40]);\n        \n        // Ventilation slots\n        for (i = [0:3]) {\n            translate([10+i*20, 45-panel_t-1, 100])\n                cube([15, panel_t+2, 2]);\n        }\n    }\n    \n    // Door handle\n    translate([70, 45, 80])\n        difference() {\n            cylinder(h=12, r=4, $fn=20);\n            translate([0,0,2])\n                cylinder(h=10, r=2, $fn=20);\n        }\n    \n    // Handle base\n    translate([70, 45, 12])\n        rotate([90,0,0])\n            cylinder(h=panel_t+1, r=5, $fn=20);\n    \n    // Hinges (3 along the left edge)\n    for (i = [0:2]) {\n        translate([panel_t, 45-panel_t, 20+i*40])\n            difference() {\n                cube([6, panel_t, 12]);\n                translate([3, panel_t/2, 6])\n                    rotate([90,0,0])\n                        cylinder(h=panel_t, r=1.5, $fn=10);\n            }\n    }\n}\n\n// Leg structure\nmodule legs() {\n    // Front legs\n    for (x = [0, 100-8]) {\n        translate([x, 45-8, -8])\n            difference() {\n                cube([8, 8, 8]);\n                // Cable routing notch\n                translate([4, 8, 4])\n                    rotate([90,0,0])\n                        cylinder(h=8, r=2, $fn=10);\n            }\n    }\n    \n    // Back legs\n    for (x = [0, 100-8]) {\n        translate([x, 0, -8])\n            difference() {\n                cube([8, 8, 8]);\n                // Cable routing notch\n                translate([4, 0, 4])\n                    rotate([90,0,0])\n                        cylinder(h=8, r=2, $fn=10);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    cabinet();\n    legs();\n}",
    "renders": true
  },
  {
    "office_supply": "rims",
    "openscad_code": "// Rims Office Chair Base\n// A 5-spoke star base with wheels for an office chair\n// Designed for 3D printing - 120mm diameter, 2mm wall thickness\n\n// Global parameters\n$fn = 60;\n\n// Overall dimensions\nbase_diameter = 120;      // Overall outer diameter\nhub_diameter = 30;        // Central hub diameter\nspoke_length = 45;        // Length from hub to wheel center\nspoke_width = 18;         // Width of each spoke\nspoke_thickness = 8;      // Thickness of spokes\nwheel_diameter = 20;      // Wheel diameter\nwheel_thickness = 8;      // Wheel thickness\naxle_diameter = 4;        // Wheel axle diameter\nmount_hole_diameter = 12; // Gas cylinder mount hole\n\n// Central hub module\nmodule hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(d=hub_diameter, h=spoke_thickness+4, center=true);\n        \n        // Mounting hole\n        cylinder(d=mount_hole_diameter, h=spoke_thickness+6, center=true);\n        \n        // Chamfer bottom edge\n        translate([0, 0, -spoke_thickness/2-2])\n            cylinder(d1=hub_diameter-2, d2=hub_diameter, h=2);\n    }\n}\n\n// Single spoke module with wheel mount\nmodule spoke() {\n    // Main spoke arm\n    translate([spoke_length/2, 0, 0])\n        cube([spoke_length, spoke_width, spoke_thickness], center=true);\n    \n    // Reinforcement rib underneath\n    translate([spoke_length/2, 0, -spoke_thickness/2-1])\n        cube([spoke_length, spoke_width-4, 2], center=true);\n    \n    // Wheel axle mount\n    translate([spoke_length, 0, 0])\n        cylinder(d=8, h=spoke_thickness+4, center=true);\n    \n    // Axle hole\n    translate([spoke_length, 0, 0])\n        cylinder(d=axle_diameter, h=spoke_thickness+6, center=true);\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Main wheel\n        rotate([0, 90, 0])\n            cylinder(d=wheel_diameter, h=wheel_thickness, center=true);\n        \n        // Tire tread pattern\n        for(i = [0:30:330]) {\n            rotate([0, 90, i])\n                translate([0, 0, -wheel_thickness/2+1])\n                    cube([wheel_diameter-4, 1, wheel_thickness-2], center=true);\n        }\n        \n        // Bearing hole\n        rotate([0, 90, 0])\n            cylinder(d=axle_diameter+1, h=wheel_thickness+2, center=true);\n    }\n}\n\n// Assemble the complete base\nmodule chair_base() {\n    union() {\n        // Central hub\n        hub();\n        \n        // Five spokes in star pattern\n        for(i = [0:72:359]) {\n            rotate([0, 0, i]) {\n                spoke();\n                \n                // Wheel at end of spoke\n                translate([spoke_length, 0, 0])\n                    wheel();\n            }\n        }\n    }\n}\n\n// Render the model centered on build plate\ntranslate([0, 0, spoke_thickness/2+2])\n    chair_base();",
    "renders": true
  },
  {
    "office_supply": "hubcaps",
    "openscad_code": "// Hubcaps Office Stool - Realistic Style, Medium Complexity\n// Diameter: 120mm, Height: 45mm\n\nmodule hubcap_base() {\n    // Main circular base with slight dome\n    difference() {\n        cylinder(h=15, d=120, $fn=64);\n        translate([0,0,2])\n            cylinder(h=13, d=115, $fn=64);\n    }\n}\n\nmodule center_cap() {\n    // Central dome cap with 4 bolt holes\n    union() {\n        // Main dome\n        translate([0,0,15])\n            cylinder(h=8, d1=25, d2=20, $fn=32);\n        \n        // Bolt holes\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([10,0,15])\n                    cylinder(h=10, d=3, $fn=16);\n        }\n    }\n}\n\nmodule spokes() {\n    // 5 structural spokes\n    for(i=[0:4]) {\n        rotate([0,0,i*72])\n            union() {\n                // Main spoke body\n                translate([0,0,15])\n                    linear_extrude(height=2)\n                        polygon(points=[[0,-8],[0,8],[45,6],[45,-6]]);\n                \n                // Reinforcement rib\n                translate([22.5,0,15])\n                    cube([45,4,3], center=true);\n            }\n    }\n}\n\nmodule rim_detail() {\n    // Outer rim with grip pattern\n    difference() {\n        // Main rim\n        translate([0,0,15])\n            cylinder(h=5, d=120, $fn=64);\n        \n        // Grip grooves\n        for(i=[0:31]) {\n            rotate([0,0,i*11.25])\n                translate([58,0,15])\n                    cube([2,4,6], center=true);\n        }\n    }\n}\n\nmodule mounting_ring() {\n    // Hidden mounting ring on bottom\n    translate([0,0,0])\n        cylinder(h=3, d=100, $fn=64);\n}\n\nmodule leg_holes() {\n    // 3 leg mounting holes\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n            translate([35,0,-1])\n                cylinder(h=17, d=8, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    hubcap_base();\n    center_cap();\n    spokes();\n    rim_detail();\n    mounting_ring();\n    \n    // Remove leg holes from base\n    difference() {\n        children();\n        leg_holes();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "axles",
    "openscad_code": "// OpenSCAD realistic medium-complexity office chair with 5-spoke base and tilt mechanism\n// Overall footprint ~120 mm diameter, seat height ~55 mm\n\n// Parameters\n$fn = 36;\nseat_d = 65;\nseat_t = 4;\nback_h = 60;\nback_w = 55;\nback_t = 3;\narm_w = 4;\narm_h = 20;\npost_r = 5;\npost_h = 35;\nspoke_l = 55;\nspoke_w = 10;\nspoke_t = 6;\ncaster_r = 4;\ncaster_t = 6;\nwall = 2;\n\nmodule seat() {\n    // Padded seat shell\n    difference() {\n        union() {\n            // Cushion\n            translate([0, 0, seat_t/2])\n                scale([1, 1.1, 0.3])\n                cylinder(h = seat_t, d = seat_d);\n            // Structural pan\n            translate([0, 0, 0])\n                cylinder(h = seat_t, d = seat_d - 2);\n        }\n        // Ergonomic recess\n        translate([0, 5, seat_t/2])\n            scale([0.6, 0.7, 0.5])\n            cylinder(h = seat_t + 1, d = seat_d);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest\n    translate([0, -seat_d/2 + back_t/2, seat_t + back_h/2])\n        rotate([5, 0, 0])\n        difference() {\n            // Mesh back panel\n            union() {\n                // Main back\n                scale([1, 1.2, 1])\n                cube([back_w, back_t, back_h], center = true);\n                // Lumbar bulge\n                translate([0, back_t/2, -back_h/4])\n                    scale([0.8, 0.3, 0.4])\n                    cube([back_w, back_t, back_h/2], center = true);\n            }\n            // Ventilation slots\n            for (i = [-2:2])\n                translate([i*10, 0, 0])\n                    cube([back_w/8, back_t + 1, back_h - 10], center = true);\n        }\n}\n\nmodule armrest(side) {\n    // Height-adjustable armrest\n    x = side * (seat_d/2 + arm_w/2);\n    translate([x, 0, seat_t + arm_h/2])\n        rotate([0, side * 10, 0])\n        union() {\n            // Post\n            cylinder(h = arm_h, d = arm_w);\n            // Pad\n            translate([0, 0, arm_h/2])\n                scale([1.8, 1.2, 0.5])\n                cube([arm_w, arm_w, arm_w], center = true);\n        }\n}\n\nmodule gas_spring() {\n    // Telescoping column\n    difference() {\n        // Outer cylinder\n        cylinder(h = post_h, r = post_r);\n        // Inner shaft hole\n        translate([0, 0, -1])\n            cylinder(h = post_h + 2, r = post_r - wall);\n    }\n}\n\nmodule spoke() {\n    // Structural spoke with caster mount\n    difference() {\n        union() {\n            // Tapered beam\n            hull() {\n                translate([0, 0, 0])\n                    cube([spoke_w, spoke_t, wall], center = true);\n                translate([spoke_l - 10, 0, 0])\n                    cube([spoke_w*0.6, spoke_t, wall], center = true);\n            }\n            // Caster fork\n            translate([spoke_l, 0, -caster_t/2])\n                rotate([90, 0, 0])\n                cylinder(h = caster_t, d = caster_r*2);\n        }\n        // Weight reduction cutouts\n        for (i = [0:1])\n            translate([spoke_l/3 + i*15, 0, 0])\n                cube([spoke_w/2, spoke_t - wall, wall + 1], center = true);\n    }\n}\n\nmodule star_base() {\n    // 5-spoke caster base\n    for (a = [0:72:360-1])\n        rotate([0, 0, a])\n        translate([0, 0, 0])\n            spoke();\n}\n\n// Assembly\nunion() {\n    // Seat assembly\n    seat();\n    backrest();\n    armrest(1);\n    armrest(-1);\n\n    // Support column\n    translate([0, 0, 0])\n        gas_spring();\n\n    // Base\n    translate([0, 0, -post_h])\n        star_base();\n}",
    "renders": true
  },
  {
    "office_supply": "differentials",
    "openscad_code": "// Differential Gear Desk Organizer - Medium Complexity\n// A functional desk organizer inspired by automotive differential gears\n// Features pen/pencil holders, small item compartments, and gear details\n\n// Overall dimensions: 120mm x 80mm x 45mm\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main body module\nmodule differential_organizer() {\n    difference() {\n        // Main housing - differential casing shape\n        union() {\n            // Central cylindrical body\n            cylinder(h = 40, r = 35, center = true);\n            \n            // Side pods for compartments\n            translate([0, 25, 0]) \n                rotate([90, 0, 0])\n                    cylinder(h = 20, r1 = 15, r2 = 10);\n            translate([0, -25, 0]) \n                rotate([90, 0, 0])\n                    cylinder(h = 20, r1 = 15, r2 = 10);\n            \n            // Reinforcement ribs\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([25, 0, 0])\n                        cube([15, 3, 40], center = true);\n            }\n        }\n        \n        // Hollow out the center\n        cylinder(h = 38, r = 33 - wall_thickness, center = true);\n        \n        // Create compartments in side pods\n        translate([0, 25, 5]) \n            rotate([90, 0, 0])\n                cylinder(h = 18, r1 = 13 - wall_thickness, r2 = 8 - wall_thickness);\n        translate([0, -25, 5]) \n            rotate([90, 0, 0])\n                cylinder(h = 18, r1 = 13 - wall_thickness, r2 = 8 - wall_thickness);\n                \n        // Central pen holes\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([20, 0, 0])\n                    cylinder(h = 40, r = 4, center = true);\n        }\n    }\n}\n\n// Gear teeth detail module\nmodule gear_teeth(radius, height, teeth) {\n    for(i = [0:teeth-1]) {\n        rotate([0, 0, i * (360/teeth)])\n            translate([radius, 0, 0])\n                cube([3, 2, height], center = true);\n    }\n}\n\n// Add decorative gear ring on top\nmodule top_gear() {\n    difference() {\n        // Gear base\n        cylinder(h = 5, r = 35);\n        // Center hole\n        cylinder(h = 6, r = 20);\n        // Lightening holes\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([28, 0, 0])\n                    cylinder(h = 6, r = 3);\n        }\n    }\n    \n    // Gear teeth\n    gear_teeth(35, 5, 24);\n}\n\n// Assembly\nunion() {\n    // Main organizer body\n    differential_organizer();\n    \n    // Top gear decoration\n    translate([0, 0, 22.5])\n        top_gear();\n    \n    // Rubber feet positions\n    for(pos = [[-30, -15], [30, -15], [-30, 15], [30, 15]]) {\n        translate([pos[0], pos[1], -23])\n            cylinder(h = 3, r = 5);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "propellers",
    "openscad_code": "// Propellers Desk Organizer – realistic style, medium complexity\n// Overall footprint ~120 mm diameter, 45 mm high, wall thickness 2 mm\n\n$fn = 36;\n\nmodule wall_profile(h) {\n    difference() {\n        cylinder(h = h, r = 60, center = false);\n        cylinder(h = h + 1, r = 58, center = false);\n    }\n}\n\n// Base ring – 2 mm thick\ntranslate([0, 0, -2]) wall_profile(2);\n\n// Propeller blades – 8 identical blades\nmodule blade() {\n    difference() {\n        // Main blade body\n        translate([0, 0, 0])\n            scale([1, 0.15, 0.5])\n            cube([40, 20, 2], center = true);\n\n        // Cutout for ergonomic finger grip\n        translate([10, 0, 0])\n            scale([0.3, 1.2, 1])\n            cube([30, 5, 2.2], center = true);\n    }\n}\n\n// Create 8 blades around hub\nfor (i = [0:7]) {\n    angle = i * 45;\n    rotate([0, 0, angle])\n        translate([45, 0, 0])\n            blade();\n}\n\n// Central cylindrical hub\ncylinder(h = 12, r = 18, center = false);\ndifference() {\n    cylinder(h = 14, r = 20, center = false);\n    cylinder(h = 15, r = 18, center = false);\n}\n\n// Pen hole – 10 mm diameter\ntranslate([0, 0, 0])\n    cylinder(h = 14, r = 5, center = false);\n\n// Additional smaller tool holes around hub\nfor (j = [0:3]) {\n    a = j * 90 + 22.5;\n    rotate([0, 0, a])\n        translate([30, 0, 0])\n            cylinder(h = 14, r = 3.5, center = false);\n}\n\n// Reinforcement ribs under blades\nmodule rib() {\n    translate([0, 0, 0])\n        cube([60, 2, 8], center = true);\n}\n\nfor (k = [0:7]) {\n    angle = k * 45 + 22.5;\n    rotate([0, 0, angle])\n        translate([30, 0, 4])\n            rib();\n}\n\n// Bottom support ring for 3D printing stability\ndifference() {\n    cylinder(h = 2, r = 62, center = false);\n    cylinder(h = 3, r = 58, center = false);\n}",
    "renders": true
  },
  {
    "office_supply": "rotors",
    "openscad_code": "// Rotors office chair base - realistic style, medium complexity\n// Overall diameter ~300mm for chair base, height ~40mm\n\n// Parameters\n$fa = 2;\n$fs = 0.5;\nwheel_d = 12;\nwheel_w = 6;\narm_length = 65;\nhub_r = 25;\nhub_h = 35;\nspoke_w = 15;\nspoke_h = 8;\ntop_plate_h = 5;\nmount_r = 12;\n\n// Central hub with mounting point\nmodule hub() {\n    // Main hub cylinder\n    cylinder(h=hub_h, r=hub_r, center=true);\n    \n    // Mounting collar\n    translate([0,0,hub_h/2 - top_plate_h/2])\n        cylinder(h=top_plate_h, r=mount_r+5, center=true);\n    \n    // Mounting hole\n    translate([0,0,hub_h/2])\n        cylinder(h=top_plate_h+2, r=mount_r, center=true);\n}\n\n// Single wheel assembly\nmodule wheel_assembly() {\n    // Wheel\n    rotate([90,0,0])\n        cylinder(h=wheel_w, r=wheel_d/2, center=true);\n    \n    // Axle housing\n    translate([0,0,-wheel_d/2-5])\n        cylinder(h=10, r=wheel_w/2+2, center=true);\n    \n    // Fork arms\n    difference() {\n        // Left fork\n        translate([-wheel_w/2-2,0,-wheel_d/2-5])\n            cube([2, 8, 10]);\n        // Right fork\n        translate([wheel_w/2,0,-wheel_d/2-5])\n            cube([2, 8, 10]);\n    }\n}\n\n// Single spoke with wheel\nmodule spoke() {\n    // Main spoke arm\n    translate([0,-arm_length/2,0])\n        cube([spoke_w, arm_length, spoke_h], center=true);\n    \n    // Reinforcement rib underneath\n    translate([0,-arm_length/2,-spoke_h/2-1])\n        cube([spoke_w-4, arm_length-10, 2], center=true);\n    \n    // Wheel assembly at end\n    translate([0,-arm_length, -hub_h/2 + wheel_d/2 + 5])\n        wheel_assembly();\n}\n\n// Complete star base\nmodule star_base() {\n    union() {\n        // Central hub\n        hub();\n        \n        // Five spokes with wheels\n        for (i = [0:4]) {\n            rotate([0,0,i*72])\n                translate([0,0,0])\n                    spoke();\n        }\n    }\n}\n\n// Generate the model\nstar_base();",
    "renders": true
  },
  {
    "office_supply": "blades",
    "openscad_code": "// Blade Storage Rack - Realistic Style\n// Dimensions: 120mm x 60mm x 80mm\n\nblade_length = 50;\nblade_width = 18;\nblade_thickness = 1.5;\nrack_length = 120;\nrack_width = 60;\nrack_height = 80;\nwall_thickness = 2;\n\n// Main rack body\nmodule rack_body() {\n    difference() {\n        // Outer shell\n        cube([rack_length, rack_width, rack_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness/2])\n            cube([rack_length-wall_thickness*2, rack_width-wall_thickness*2, rack_height-wall_thickness], center=true);\n        \n        // Front access opening\n        translate([0, rack_width/2-wall_thickness, 0])\n            cube([rack_length-wall_thickness*2, wall_thickness*2, rack_height-wall_thickness*2], center=true);\n    }\n}\n\n// Blade slots\nmodule blade_slots() {\n    slot_count = 5;\n    slot_spacing = 22;\n    slot_depth = 45;\n    slot_width = 2.5;\n    \n    for(i=[0:slot_count-1]) {\n        translate([-rack_length/2 + 15 + i*slot_spacing, 0, rack_height/2 - slot_depth/2 - 5]) {\n            difference() {\n                // Slot cavity\n                cube([slot_width, rack_width-wall_thickness*2-10, slot_depth], center=true);\n                \n                // Rounded bottom\n                translate([0, 0, slot_depth/2-wall_thickness])\n                    rotate([90,0,0])\n                        cylinder(h=slot_width, r=wall_thickness, center=true);\n            }\n        }\n    }\n}\n\n// Support ribs inside\nmodule support_ribs() {\n    for(i=[0:3]) {\n        translate([0, -rack_width/2 + 15 + i*15, 0])\n            cube([rack_length-wall_thickness*2, wall_thickness, rack_height-wall_thickness*2], center=true);\n    }\n}\n\n// Base with rubber feet positions\nmodule base() {\n    difference() {\n        // Base plate\n        translate([0, 0, -rack_height/2 - wall_thickness])\n            cube([rack_length, rack_width, wall_thickness], center=true);\n        \n        // Rubber foot recesses\n        for(pos=[[-1,-1], [1,-1], [-1,1], [1,1]]) {\n            translate([pos[0]*rack_length/3, pos[1]*rack_width/3, -rack_height/2 - wall_thickness])\n                cylinder(h=wall_thickness+1, r=5, center=false);\n        }\n    }\n}\n\n// Label area\nmodule label_area() {\n    translate([0, rack_width/2 - wall_thickness, rack_height/2 - 15])\n        cube([rack_length/3, wall_thickness, 10], center=true);\n}\n\n// Handle cutout\nmodule handle() {\n    translate([0, 0, rack_height/2 - 10])\n        difference() {\n            cube([rack_length/2, 15, 15], center=true);\n            translate([0, 0, -5])\n                cube([rack_length/2 - wall_thickness*2, 11, 11], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    rack_body();\n    blade_slots();\n    support_ribs();\n    base();\n    label_area();\n    handle();\n}",
    "renders": true
  },
  {
    "office_supply": "pontoons",
    "openscad_code": "// Modular Pontoons Office Stool - Realistic Style, Medium Complexity\n// Approx. 85 mm tall, 3D-printable with 2 mm walls and no overhangs\n\n$fs = 0.5; $fa = 2;\n\nmodule hollow_cylinder(h, r, wall) {\n    difference() {\n        cylinder(h=h, r=r);\n        translate([0,0,-0.1]) cylinder(h=h+0.2, r=r-wall);\n    }\n}\n\nmodule round_leg() {\n    // Main leg tube\n    hollow_cylinder(h=65, r=7, wall=2);\n    \n    // Foot glide\n    translate([0,0,-1]) cylinder(h=4, r=8);\n    \n    // Top mounting plate\n    translate([0,0,64]) cylinder(h=3, r=9);\n}\n\nmodule five_star_base() {\n    // Central hub\n    cylinder(h=8, r=15);\n    \n    // Five spokes\n    for(i=[0:4]) rotate([0,0,i*72]) translate([0,0,4]) {\n        difference() {\n            cube([35, 12, 4], center=true);\n            translate([-15,0,2]) cube([30, 8, 4.2], center=true);\n        }\n    }\n    \n    // Casters - simple cylindrical\n    for(i=[0:4]) rotate([0,0,i*72]) translate([30,0,0]) {\n        cylinder(h=10, r=5);\n    }\n}\n\nmodule seat_shell() {\n    // Main shell - ergonomic dish\n    difference() {\n        scale([1,1.1,0.4]) sphere(r=40);\n        translate([0,0,-5]) cube([80,80,50], center=true);\n    }\n    \n    // Reinforcement ring\n    translate([0,0,-2]) cylinder(h=5, r=38);\n    \n    // Ventilation holes\n    for(i=[0:5]) rotate([0,0,i*60]) translate([25,0,-1]) {\n        cylinder(h=5, r=3);\n    }\n}\n\nmodule gas_spring() {\n    // Outer cylinder\n    cylinder(h=25, r=6);\n    \n    // Inner rod\n    translate([0,0,25]) cylinder(h=15, r=3);\n    \n    // Adjustment lever\n    translate([7,0,12]) rotate([90,0,0]) cylinder(h=12, r=2);\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0,0,0]) five_star_base();\n    \n    // Gas spring column\n    translate([0,0,8]) gas_spring();\n    \n    // Legs\n    for(i=[0:4]) rotate([0,0,i*72]) translate([30,0,8]) {\n        rotate([15,0,0]) translate([0,0,25]) round_leg();\n    }\n    \n    // Seat\n    translate([0,0,48]) rotate([0,0,0]) seat_shell();\n}",
    "renders": true
  },
  {
    "office_supply": "rudders",
    "openscad_code": "// Realistic Rudders Office Chair – OpenSCAD\n// Medium complexity, 3D-printable, ~120 mm tall\n\n$fn = 36;               // smooth curves\nwall = 2;               // uniform printable wall thickness\n\n// Overall size\nseat_w = 80;            // seat width\nseat_d = 75;            // seat depth\nseat_t = 6;             // seat thickness\nback_h = 50;            // back-rest height above seat\n\n// Five-star base\nstar_r = 120/2;         // diameter of wheel circle\nleg_len = 45;\ncaster_r = 6;\ncaster_h = 15;\n\nmodule caster() {\n    // printable caster wheel without overhangs\n    cylinder(h = caster_h, r = caster_r, center = true);\n    translate([0, 0, caster_h/2])\n        cylinder(h = wall, r = caster_r + wall, center = true);\n}\n\nmodule star_base() {\n    difference() {\n        // central hub\n        cylinder(h = 10, r = 15);\n        // hollow hub\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 15 - wall);\n        \n        // five legs\n        for (a = [0:72:359]) {\n            rotate([0, 0, a])\n                translate([0, leg_len/2, 5])\n                    cube([wall, leg_len, 10], center = true);\n        }\n    }\n    // casters at leg ends\n    for (a = [0:72:359]) {\n        rotate([0, 0, a])\n            translate([0, leg_len, -caster_h/2])\n                caster();\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    difference() {\n        cylinder(h = 55, r = 8);\n        translate([0, 0, -1])\n            cylinder(h = 57, r = 8 - wall);\n    }\n}\n\n// Seat pan\nmodule seat() {\n    difference() {\n        // main cushion block\n        translate([0, 0, seat_t/2])\n            cube([seat_w, seat_d, seat_t], center = true);\n        // recess underside\n        translate([0, 0, -1])\n            cube([seat_w - 2*wall, seat_d - 2*wall, seat_t + 2], center = true);\n    }\n}\n\n// Back-rest\nmodule back_rest() {\n    difference() {\n        // curved back plate\n        translate([0, -seat_d/2 + wall, back_h/2 + seat_t])\n            rotate([10, 0, 0])\n                cube([seat_w - 10, wall, back_h], center = true);\n        // hollow\n        translate([0, -seat_d/2 + wall - 1, back_h/2 + seat_t])\n            rotate([10, 0, 0])\n                cube([seat_w - 10 - 2*wall, wall + 2, back_h - 2*wall], center = true);\n    }\n    // lumbar support ridge\n    translate([0, -seat_d/2 + wall, seat_t + back_h/3])\n        cube([seat_w - 20, wall + 1, 6], center = true);\n}\n\n// Arm-rest module\nmodule arm() {\n    // printable L-shaped arm\n    difference() {\n        union() {\n            translate([seat_w/2 - wall/2, 0, seat_t + 15])\n                cube([wall, 15, 30]);\n            translate([seat_w/2 - wall/2 - 12, 0, seat_t + 15 + 30 - wall/2])\n                cube([15, 15, wall]);\n        }\n        translate([seat_w/2 - wall/2 + 1, 0, seat_t + 15])\n            cube([wall - 2, 13, 28]);\n    }\n}\n\n// Assembly\nstar_base();\ntranslate([0, 0, 5 + 55/2]) gas_lift();\ntranslate([0, 0, 5 + 55 + seat_t/2]) seat();\nback_rest();\narm();\nmirror([1, 0, 0]) arm();",
    "renders": true
  },
  {
    "office_supply": "compasses",
    "openscad_code": "// Parameters\nscale_factor = 2;\noverall_length = 70 * scale_factor;\noverall_width = 40 * scale_factor;\noverall_height = 10 * scale_factor;\nwall_thickness = 2;\nhandle_radius = 4 * scale_factor;\nleg_width = 3 * scale_factor;\npivot_radius = 6 * scale_factor;\nneedle_length = 6 * scale_factor;\nneedle_diameter = 1 * scale_factor;\ngrip_radius = 2 * scale_factor;\ngrip_height = 5 * scale_factor;\n\n// Main module\nmodule compasses_furniture() {\n    // Central pivot joint\n    difference() {\n        cylinder(h=wall_thickness*2, r=pivot_radius, center=true);\n        cylinder(h=wall_thickness*2+1, r=pivot_radius-wall_thickness, center=true);\n    }\n    \n    // Upper leg 1\n    translate([0, 0, 0]) {\n        rotate([0, 0, -30]) {\n            translate([pivot_radius, 0, 0]) {\n                difference() {\n                    cube([overall_length*0.5, leg_width, wall_thickness], center=true);\n                    translate([overall_length*0.25, 0, 0])\n                        cube([overall_length*0.5-leg_width, leg_width-wall_thickness, wall_thickness+1], center=true);\n                }\n            }\n        }\n    }\n    \n    // Upper leg 2\n    translate([0, 0, 0]) {\n        rotate([0, 0, 30]) {\n            translate([pivot_radius, 0, 0]) {\n                difference() {\n                    cube([overall_length*0.5, leg_width, wall_thickness], center=true);\n                    translate([overall_length*0.25, 0, 0])\n                        cube([overall_length*0.5-leg_width, leg_width-wall_thickness, wall_thickness+1], center=true);\n                }\n            }\n        }\n    }\n    \n    // Lower leg 1\n    translate([0, 0, 0]) {\n        rotate([0, 0, -30]) {\n            translate([pivot_radius + overall_length*0.5, 0, 0]) {\n                rotate([0, 0, 15]) {\n                    difference() {\n                        cube([overall_length*0.4, leg_width, wall_thickness], center=true);\n                        translate([overall_length*0.2, 0, 0])\n                            cube([overall_length*0.4-leg_width, leg_width-wall_thickness, wall_thickness+1], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Lower leg 2\n    translate([0, 0, 0]) {\n        rotate([0, 0, 30]) {\n            translate([pivot_radius + overall_length*0.5, 0, 0]) {\n                rotate([0, 0, -15]) {\n                    difference() {\n                        cube([overall_length*0.4, leg_width, wall_thickness], center=true);\n                        translate([overall_length*0.2, 0, 0])\n                            cube([overall_length*0.4-leg_width, leg_width-wall_thickness, wall_thickness+1], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Needle 1\n    translate([0, 0, 0]) {\n        rotate([0, 0, -30]) {\n            translate([pivot_radius + overall_length*0.5 + overall_length*0.4, 0, 0]) {\n                rotate([0, 0, 15]) {\n                    cylinder(h=needle_length, r=needle_diameter, center=true);\n                }\n            }\n        }\n    }\n    \n    // Needle 2\n    translate([0, 0, 0]) {\n        rotate([0, 0, 30]) {\n            translate([pivot_radius + overall_length*0.5 + overall_length*0.4, 0, 0]) {\n                rotate([0, 0, -15]) {\n                    cylinder(h=needle_length, r=needle_diameter, center=true);\n                }\n            }\n        }\n    }\n    \n    // Handle assembly\n    translate([0, 0, wall_thickness*2]) {\n        cylinder(h=overall_height*0.5, r=handle_radius, center=true);\n    }\n    \n    // Grip ring\n    for (i = [0:1:3]) {\n        rotate([0, 0, i*90]) {\n            translate([handle_radius, 0, wall_thickness*2 + overall_height*0.25]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=grip_height, r=grip_radius, center=true);\n                }\n            }\n        }\n    }\n    \n    // Reinforcement ribs\n    difference() {\n        translate([0, 0, -wall_thickness*0.5]) {\n            cube([pivot_radius*2, wall_thickness*1.5, wall_thickness*2], center=true);\n        }\n        translate([0, 0, -wall_thickness*0.5-1]) {\n            cube([pivot_radius*2-wall_thickness, wall_thickness*1.5-wall_thickness, wall_thickness*2+2], center=true);\n        }\n    }\n}\n\n// Render the model\ncompasses_furniture();",
    "renders": true
  },
  {
    "office_supply": "gps",
    "openscad_code": "// OpenSCAD Office GPS Holder/Furniture\n// A small desktop stand for a handheld GPS unit with cable management\n// Overall size: 120 x 80 x 90 mm\n// Wall thickness: 2 mm throughout\n\nmodule gps_holder() {\n    // Base platform\n    difference() {\n        cube([120, 80, 10], center=true);\n        translate([0, 0, 9]) cube([116, 76, 10], center=true);\n    }\n    \n    // Front lip to prevent GPS sliding\n    translate([0, -38, 4]) cube([110, 4, 8], center=true);\n    \n    // Rear support frame\n    difference() {\n        translate([0, 25, 45]) cube([110, 8, 90], center=true);\n        translate([0, 25, 85]) cube([106, 4, 10], center=true);\n    }\n    \n    // Side support arms\n    for(side = [-1, 1]) {\n        translate([side * 52, 10, 45]) {\n            difference() {\n                rotate([0, -15 * side, 0])\n                cube([6, 6, 90], center=true);\n                translate([0, 0, 45]) cube([2, 2, 90], center=true);\n            }\n        }\n    }\n    \n    // GPS cradle area\n    difference() {\n        translate([0, 0, 30]) cube([100, 60, 8], center=true);\n        translate([0, 0, 30]) cube([96, 56, 12], center=true);\n    }\n    \n    // Cable management slot in back\n    translate([0, 30, 25]) {\n        rotate([0, 90, 0])\n        cylinder(h=50, r=4, center=true);\n    }\n    \n    // Ventilation slots\n    for(i = [-2:1:2]) {\n        translate([i * 20, 0, 30]) {\n            cube([4, 56, 8], center=true);\n        }\n    }\n    \n    // Non-slip feet\n    for(x = [-45, 45])\n    for(y = [-30, 30]) {\n        translate([x, y, -5]) {\n            cylinder(h=2, r=3, center=true);\n        }\n    }\n    \n    // GPS screen viewing angle support\n    difference() {\n        translate([0, 10, 60]) rotate([20, 0, 0])\n        cube([90, 4, 40], center=true);\n        translate([0, 10, 80]) rotate([20, 0, 0])\n        cube([86, 4, 20], center=true);\n    }\n}\n\ngps_holder();",
    "renders": true
  },
  {
    "office_supply": "radios",
    "openscad_code": "// Realistic Office Radio Furniture\n// Medium complexity, 3D printable design\n// Overall dimensions: 120mm x 70mm x 60mm\n\n$fn = 32;\n\n// Main radio body\nmodule radio_body() {\n    // Main enclosure with rounded edges\n    difference() {\n        // Outer shell - 2mm walls\n        minkowski() {\n            cube([116, 66, 56]);\n            sphere(2);\n        }\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([112, 62, 54]);\n        \n        // Speaker grille holes - left\n        for(x = [-40:10:-20])\n            for(y = [-20:8:20])\n                translate([x, y, 57])\n                    cylinder(h=5, d=3);\n        \n        // Speaker grille holes - right\n        for(x = [20:10:40])\n            for(y = [-20:8:20])\n                translate([x, y, 57])\n                    cylinder(h=5, d=3);\n    }\n}\n\n// Control panel section\nmodule control_panel() {\n    // Panel base\n    translate([0, 0, 60])\n        cube([100, 50, 8], center=true);\n    \n    // Frequency display window\n    translate([0, 15, 69])\n        cube([60, 12, 2], center=true);\n    \n    // Volume knob\n    translate([-30, -15, 69])\n        cylinder(h=8, d=12);\n    \n    // Tuning knob\n    translate([0, -15, 69])\n        cylinder(h=8, d=12);\n    \n    // Band selector knob\n    translate([30, -15, 69])\n        cylinder(h=8, d=12);\n    \n    // Power button\n    translate([45, -15, 69])\n        cube([10, 6, 4], center=true);\n}\n\n// Antenna\nmodule antenna() {\n    // Base\n    translate([50, 30, 55])\n        cylinder(h=4, d=8);\n    \n    // Telescoping antenna segments\n    for(i = [0:2]) {\n        translate([50, 30, 59 + i*12])\n            cylinder(h=10, d=6-i);\n    }\n}\n\n// Handle\nmodule handle() {\n    // Left mount\n    translate([-45, 0, 58])\n        cube([10, 8, 12], center=true);\n    \n    // Right mount\n    translate([45, 0, 58])\n        cube([10, 8, 12], center=true);\n    \n    // Handle bar\n    translate([0, 0, 75])\n        rotate([90, 0, 0])\n            cylinder(h=90, d=6);\n}\n\n// Feet\nmodule feet() {\n    // Four rubber feet\n    positions = [[-50, -30], [50, -30], [50, 30], [-50, 30]];\n    for(pos = positions) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=3, d=8);\n    }\n}\n\n// Assembly\nunion() {\n    radio_body();\n    control_panel();\n    antenna();\n    handle();\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "sensors",
    "openscad_code": "// OpenSCAD code for a \"Sensor Shelf Unit\" – a small wall-mounted shelf that incorporates\n// three stylized sensor pods (motion, temperature, humidity) with cable management.\n// Overall size: 120 mm wide × 70 mm deep × 100 mm tall\n// Wall thickness: 2 mm everywhere for reliable 3D printing without supports.\n\n$fn = 36;\n\n// Main parameters\nshelf_w = 120;\nshelf_d = 70;\nshelf_h = 100;\nwall_t  = 2;\nscrew_r = 2.1;   // M4 screw\nscrew_h = 5;\n\n// Sensor pod parameters\npod_r = 15;\npod_h = 20;\npod_gap = 30;\n\n// Mounting plate for wall attachment\nmodule mounting_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, shelf_h/2 - wall_t/2])\n            cube([shelf_w, wall_t, shelf_h], center=true);\n        \n        // Two keyhole slots\n        for (x = [-shelf_w/4, shelf_w/4])\n            translate([x, 0, shelf_h/2 - wall_t/2 - 5])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_t+1, r1=screw_r, r2=screw_r+2, center=true);\n    }\n}\n\n// Shelf surface with rounded front edge\nmodule shelf_surface() {\n    difference() {\n        // Main shelf\n        translate([0, shelf_d/2 - wall_t/2, shelf_h - wall_t/2])\n            cube([shelf_w, shelf_d, wall_t], center=true);\n        \n        // Front edge fillet (approximated by subtracting a quarter cylinder)\n        translate([0, shelf_d - wall_t, shelf_h - wall_t])\n            rotate([0, 90, 0])\n                cylinder(h=shelf_w, r=wall_t, center=true);\n    }\n}\n\n// Sensor pod module with realistic detailing\nmodule sensor_pod(type) {\n    // Pod body (cylinder + dome)\n    difference() {\n        union() {\n            cylinder(h=pod_h - 5, r=pod_r, center=false);\n            translate([0, 0, pod_h - 5])\n                sphere(r=pod_r);\n        }\n        // Central sensor window\n        translate([0, 0, pod_h - 5])\n            cylinder(h=pod_r+1, r=type == \"motion\" ? 7 : 4, center=false);\n    }\n    \n    // Cable exit collar\n    translate([pod_r - wall_t, 0, pod_h/2])\n        rotate([0, 90, 0])\n            cylinder(h=wall_t*2, r=wall_t*1.5, center=true);\n}\n\n// Cable management trough along back edge\nmodule cable_trough() {\n    difference() {\n        // Trough body\n        translate([0, shelf_d/2 - wall_t*2, shelf_h - wall_t*2])\n            cube([shelf_w - wall_t*2, wall_t*2, wall_t], center=true);\n        \n        // Internal channel for cables\n        translate([0, shelf_d/2 - wall_t*2, shelf_h - wall_t*2])\n            cube([shelf_w - wall_t*4, wall_t*1.5, wall_t - 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    mounting_plate();\n    shelf_surface();\n    cable_trough();\n    \n    // Three sensor pods mounted along the front edge\n    for (i = [-1:1])\n        translate([i * pod_gap, shelf_d - pod_r - wall_t, shelf_h - wall_t])\n            sensor_pod(i == 0 ? \"motion\" : (i < 0 ? \"temperature\" : \"humidity\"));\n}",
    "renders": true
  },
  {
    "office_supply": "cameras",
    "openscad_code": "// Camera Furniture - 3D printable camera-shaped office desk organizer\n// Medium complexity, realistic style, ~100mm wide\n\n// Parameters\nbody_width = 100;\nbody_height = 70;\nbody_depth = 60;\nwall_thickness = 2;\npen_hole_diameter = 12;\ngrip_depth = 8;\n\n// Main body module\nmodule camera_body() {\n    difference() {\n        // Main camera body\n        union() {\n            // Front grip\n            translate([0, -body_depth/2 + grip_depth/2, 0])\n                cube([body_width, grip_depth, body_height], center=true);\n                \n            // Main housing\n            translate([0, 0, 0])\n                cube([body_width, body_depth - grip_depth, body_height], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness])\n            cube([body_width - 2*wall_thickness, body_depth - 2*wall_thickness - grip_depth, body_height - 2*wall_thickness], center=true);\n            \n        // Front opening for pens\n        translate([0, -body_depth/2 + wall_thickness, 0])\n            cube([body_width - 4*wall_thickness, wall_thickness, body_height - 8*wall_thickness], center=true);\n            \n        // Pen holes on top\n        for(x = [-30, -10, 10, 30]) {\n            translate([x, 0, body_height/2 - wall_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=body_depth - 2*wall_thickness, d=pen_hole_diameter, center=true);\n        }\n    }\n}\n\n// Lens module\nmodule lens() {\n    difference() {\n        // Outer lens barrel\n        cylinder(h=25, d=35, center=true);\n        \n        // Inner hollow\n        cylinder(h=26, d=30, center=true);\n    }\n}\n\n// Buttons and details\nmodule camera_details() {\n    union() {\n        // Shutter button\n        translate([-body_width/2 + 15, 0, body_height/2 + 5])\n            cylinder(h=8, d=10);\n            \n        // Mode dial\n        translate([body_width/2 - 15, 0, body_height/2 + 5])\n            cylinder(h=5, d=15);\n            \n        // Flash hot shoe\n        translate([0, 0, body_height/2 + 2])\n            cube([25, 8, 4], center=true);\n            \n        // Grip texture lines\n        for(i = [-3:3]) {\n            translate([i*10, -body_depth/2 + grip_depth/2, 0])\n                cube([2, grip_depth, body_height - 10], center=true);\n        }\n    }\n}\n\n// Viewfinder\nmodule viewfinder() {\n    difference() {\n        // Main viewfinder housing\n        translate([body_width/2 - 20, body_depth/4, body_height/2 - 10])\n            cube([15, 8, 20]);\n            \n        // Viewfinder opening\n        translate([body_width/2 - 18, body_depth/4, body_height/2 - 5])\n            cube([11, 6, 10]);\n    }\n}\n\n// Assembly\ncamera_body();\ntranslate([0, body_depth/2 + 10, -body_height/2 + 15])\n    rotate([90, 0, 0])\n        lens();\ncamera_details();\nviewfinder();",
    "renders": true
  },
  {
    "office_supply": "altimimeters",
    "openscad_code": "// Altimimeter Furniture - Office Desk Set\n// Realistic medium-complexity 3D printable model\n\n$fn = 32;\n\n// Overall dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 12;\n\n// Pen holder dimensions\nholder_width = 25;\nholder_height = 45;\nholder_wall = 2;\n\n// Phone stand dimensions\nstand_width = 40;\nstand_height = 35;\nstand_angle = 15;\n\n// Drawer dimensions\ndrawer_width = 35;\ndrawer_height = 8;\ndrawer_depth = 50;\n\n// Cable management hole\nhole_diameter = 8;\n\n// Main base with rounded corners\nmodule base() {\n    difference() {\n        // Main base block\n        minkowski() {\n            cube([base_width, base_depth, base_height], center=true);\n            cylinder(r=4, h=0.1, center=true);\n        }\n        \n        // Cable management hole\n        translate([0, base_depth/2 - 5, 0])\n            rotate([90, 0, 0])\n                cylinder(r=hole_diameter/2, h=base_width, center=true);\n        \n        // Weight reduction cavities\n        translate([0, 0, -base_height/2 + 2])\n            cube([base_width - 10, base_depth - 10, 4], center=true);\n    }\n}\n\n// Pen/pencil holder\nmodule pen_holder() {\n    difference() {\n        // Outer shell\n        translate([-base_width/2 + holder_width/2 + 5, 0, base_height/2 + holder_height/2])\n            minkowski() {\n                cube([holder_width, holder_width, holder_height], center=true);\n                cylinder(r=2, h=0.1, center=true);\n            }\n        \n        // Inner cavity\n        translate([-base_width/2 + holder_width/2 + 5, 0, base_height/2 + holder_wall + 2])\n            cube([holder_width - 2*holder_wall, holder_width - 2*holder_wall, holder_height - holder_wall], center=true);\n        \n        // Dividers\n        translate([-base_width/2 + holder_width/2 + 5, 0, base_height/2 + holder_height/2])\n            cube([holder_width - 2*holder_wall, 0.8, holder_height - holder_wall], center=true);\n        translate([-base_width/2 + holder_width/2 + 5, 0, base_height/2 + holder_height/2])\n            cube([0.8, holder_width - 2*holder_wall, holder_height - holder_wall], center=true);\n    }\n}\n\n// Phone/tablet stand\nmodule phone_stand() {\n    // Back support\n    translate([base_width/2 - stand_width/2 - 5, -base_depth/2 + 15, base_height/2 + stand_height/2 - 10])\n        rotate([0, -stand_angle, 0])\n            cube([stand_width, 4, stand_height], center=true);\n    \n    // Bottom lip\n    translate([base_width/2 - stand_width/2 - 5, -base_depth/2 + 15 + stand_height*sin(stand_angle) - 2, base_height/2 + 2])\n        cube([stand_width, 3, 4], center=true);\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([base_width/2 - stand_width/2 - 5 + side*stand_width/2, -base_depth/2 + 15, base_height/2 + stand_height/2 - 10])\n            rotate([0, -stand_angle, 0])\n                cube([2, 4, stand_height], center=true);\n    }\n}\n\n// Small drawer\nmodule drawer() {\n    // Drawer frame\n    difference() {\n        translate([0, base_depth/2 - drawer_depth/2 - 5, base_height/2 + drawer_height/2])\n            cube([drawer_width, drawer_depth, drawer_height], center=true);\n        \n        // Drawer cavity\n        translate([0, base_depth/2 - drawer_depth/2 + 2, base_height/2 + drawer_height/2])\n            cube([drawer_width - 4, drawer_depth - 4, drawer_height - 2], center=true);\n    }\n    \n    // Drawer front\n    translate([0, base_depth/2 - 2.5, base_height/2 + drawer_height/2])\n        cube([drawer_width, 5, drawer_height], center=true);\n    \n    // Drawer handle\n    translate([0, base_depth/2 - 5, base_height/2 + drawer_height])\n        minkowski() {\n            cube([15, 2, 4], center=true);\n            cylinder(r=1, h=0.1, center=true);\n        }\n}\n\n// Non-slip feet\nmodule feet() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(base_width/2 - 8), y*(base_depth/2 - 8), -base_height/2 - 1])\n                cylinder(r=3, h=2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    pen_holder();\n    phone_stand();\n    drawer();\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "flaps",
    "openscad_code": "// Realistic Flaps Desk Organizer with 3 flaps\n// Overall dimensions: 120 x 80 x 85 mm\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nbase_w = 120;\nbase_d = 80;\nbase_h = 10;\nflap_w = 115;\nflap_d = 25;\nflap_h = 2;\nwall_t = 2;\n\nmodule main_base() {\n    // Solid base platform\n    difference() {\n        cube([base_w, base_d, base_h], center=true);\n        // Screw recesses for mounting\n        for(x=[-base_w/2+20, base_w/2-20])\n            translate([x, 0, -base_h/2+1])\n                cylinder(h=2, r=3, center=true);\n    }\n}\n\nmodule back_wall() {\n    // Rigid back support wall\n    translate([0, -base_d/2+wall_t/2, base_h/2+wall_t/2])\n        cube([base_w-wall_t*2, wall_t, 75], center=true);\n}\n\nmodule flap_structure() {\n    // Three horizontal flaps for paper storage\n    flap_spacing = 22;  // Vertical gap\n    \n    for(i=[0,1,2]) {\n        translate([0, 0, 10 + i*flap_spacing]) {\n            // Main flap platform\n            difference() {\n                cube([flap_w, flap_d, flap_h], center=true);\n                // Finger cutouts for easy access\n                for(x=[-flap_w/2+20, 0, flap_w/2-20])\n                    translate([x, flap_d/2-2, 0])\n                        cylinder(h=flap_h+1, r=8, center=true);\n            }\n            \n            // Support ribs underneath\n            translate([0, -flap_d/2+wall_t, -flap_h/2-wall_t/2])\n                cube([flap_w-wall_t*2, wall_t, wall_t], center=true);\n                \n            // Side supports\n            translate([-flap_w/2+wall_t/2, 0, -flap_h/2-wall_t/2])\n                cube([wall_t, flap_d-wall_t, wall_t], center=true);\n            translate([flap_w/2-wall_t/2, 0, -flap_h/2-wall_t/2])\n                cube([wall_t, flap_d-wall_t, wall_t], center=true);\n        }\n    }\n}\n\nmodule front_lip() {\n    // Raised front edge to prevent items from falling\n    lip_h = 8;\n    translate([0, base_d/2-wall_t/2-8, base_h/2+lip_h/2])\n        cube([base_w-wall_t*2, wall_t, lip_h], center=true);\n}\n\nmodule side_walls() {\n    // Left and right structural walls\n    for(x=[-base_w/2+wall_t/2, base_w/2-wall_t/2]) {\n        translate([x, 0, base_h/2+75/2])\n            cube([wall_t, base_d-wall_t*2, 75], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_base();\n    back_wall();\n    side_walls();\n    flap_structure();\n    front_lip();\n}",
    "renders": true
  },
  {
    "office_supply": "spoilers",
    "openscad_code": "// Office Desk Spoiler - Modern Raised Shelf Unit\n// Dimensions: 120mm wide x 60mm deep x 80mm tall\n\n// Main shelf platform\nmodule shelf_platform(width, depth, thickness) {\n    // Top surface with rounded edges\n    difference() {\n        cube([width, depth, thickness]);\n        // Rounded front edge\n        translate([0, depth-thickness, -0.1])\n            cube([width, thickness+0.2, thickness+0.2]);\n    }\n}\n\n// Support legs with cable management cutouts\nmodule support_leg(height, width, depth) {\n    difference() {\n        // Main leg body\n        cube([width, depth, height]);\n        \n        // Cable management hole\n        translate([width/2, depth/2, height/2])\n            rotate([0, 90, 0])\n                cylinder(h=width+1, r=4, $fn=20);\n        \n        // Weight reduction cutouts\n        translate([5, 5, 10])\n            cube([width-10, depth-10, height-20]);\n    }\n}\n\n// Anti-slip feet\nmodule rubber_feet() {\n    cylinder(h=2, r=3, $fn=12);\n}\n\n// Back panel for structural support\nmodule back_panel(width, height, thickness) {\n    cube([thickness, width, height]);\n}\n\n// Front lip to prevent items sliding off\nmodule front_lip(width, thickness, height) {\n    cube([width, thickness, height]);\n}\n\n// Side brackets for extra support\nmodule side_bracket(length, height, thickness) {\n    difference() {\n        union() {\n            // Vertical support\n            cube([thickness, length/2, height]);\n            // Horizontal support\n            translate([0, 0, height-thickness])\n                cube([length, length/2, thickness]);\n        }\n        // Lightening holes\n        translate([thickness/2, length/4, height/2])\n            rotate([0, 90, 0])\n                cylinder(h=thickness+1, r=3, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Top shelf platform\n    translate([0, 0, 75])\n        shelf_platform(120, 60, 5);\n    \n    // Support legs (4 corners)\n    translate([5, 5, 0])\n        support_leg(75, 15, 15);\n    translate([100, 5, 0])\n        support_leg(75, 15, 15);\n    translate([5, 40, 0])\n        support_leg(75, 15, 15);\n    translate([100, 40, 0])\n        support_leg(75, 15, 15);\n    \n    // Back panel for stability\n    translate([115, 0, 0])\n        rotate([0, 0, 90])\n            back_panel(120, 75, 5);\n    \n    // Front lip\n    translate([0, 0, 75])\n        front_lip(120, 5, 10);\n    \n    // Side brackets (2 sides)\n    translate([0, 0, 50])\n        side_bracket(20, 20, 3);\n    translate([100, 0, 50])\n        mirror([1, 0, 0])\n            side_bracket(20, 20, 3);\n    \n    // Rubber feet (4 corners)\n    translate([8, 8, 0])\n        rubber_feet();\n    translate([103, 8, 0])\n        rubber_feet();\n    translate([8, 43, 0])\n        rubber_feet();\n    translate([103, 43, 0])\n        rubber_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "airbags",
    "openscad_code": "// Airbag-style seat cushion for office chair\n// Dimensions: 120mm x 120mm x 35mm overall\n\nmodule cushion_base() {\n    // Main airbag cushion body\n    difference() {\n        // Outer rounded cushion\n        minkowski() {\n            cube([116, 116, 30], center = true);\n            sphere(d = 8, $fn = 16);\n        }\n        \n        // Hollow interior for air chamber\n        minkowski() {\n            cube([112, 112, 28], center = true);\n            sphere(d = 4, $fn = 12);\n        }\n    }\n}\n\nmodule air_cells() {\n    // Array of air cells on top surface\n    for (i = [-2:2]) {\n        for (j = [-2:2]) {\n            if (!(abs(i) == 2 && abs(j) == 2)) {  // Skip corners for realistic pattern\n                translate([i * 20, j * 20, 17]) {\n                    // Individual air cell dome\n                    difference() {\n                        cylinder(h = 8, r1 = 9, r2 = 0, $fn = 24);\n                        cylinder(h = 8.5, r1 = 7, r2 = 0, $fn = 24);\n                    }\n                    \n                    // Small vent hole detail\n                    translate([0, 0, 4]) {\n                        cylinder(h = 2, r = 1, $fn = 12);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule valve_assembly() {\n    // Air valve on rear edge\n    translate([0, 58, 0]) {\n        // Valve base\n        cylinder(h = 6, r = 8, $fn = 20);\n        \n        // Valve stem\n        translate([0, 0, 6]) {\n            cylinder(h = 12, r = 4, $fn = 16);\n            \n            // Valve cap\n            translate([0, 0, 12]) {\n                cylinder(h = 4, r = 5.5, $fn = 20);\n            }\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Four mounting holes for attachment to chair\n    for (x = [-40:40:80]) {\n        for (y = [-40:40:80]) {\n            translate([x, y, -1]) {\n                cylinder(h = 20, r = 3, $fn = 12);\n            }\n        }\n    }\n}\n\nmodule anti_slip_base() {\n    // Bottom grip pattern\n    translate([0, 0, -18]) {\n        for (i = [-4:2:4]) {\n            for (j = [-4:2:4]) {\n                translate([i * 10, j * 10, 0]) {\n                    cylinder(h = 1.5, r = 3, $fn = 6);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        cushion_base();\n        air_cells();\n        valve_assembly();\n    }\n    \n    mounting_holes();\n}\n\nanti_slip_base();",
    "renders": true
  },
  {
    "office_supply": "harnesses",
    "openscad_code": "// Office Chair Harness (back-support belt that attaches to chair)\n// Overall dimensions: 120 x 90 x 30 mm\n\n// Wall thickness\nth = 2;\n\n// Main belt body\nmodule belt_body() {\n    // Central padded section\n    translate([-55, -40, 10])\n        cube([110, 80, 8]);\n    \n    // Tapered ends\n    translate([-57, -15, 10])\n        cube([10, 30, 8]);\n    translate([47, -15, 10])\n        cube([10, 30, 8]);\n}\n\n// Ventilation holes pattern\nmodule vent_holes() {\n    for (x = [-40:20:40]) {\n        for (y = [-25:15:25]) {\n            translate([x, y, 15])\n                cylinder(h=10, d=6, $fn=20);\n        }\n    }\n}\n\n// Adjustment buckle\nmodule buckle() {\n    // Buckle frame\n    translate([57, -10, 10])\n        cube([12, 20, 3]);\n    \n    // Buckle center bar\n    translate([63, -10, 10])\n        cube([2, 20, 3]);\n    \n    // Buckle prong\n    translate([64, 0, 13])\n        cube([1, 2, 6]);\n}\n\n// Strap holes\nmodule strap_holes() {\n    for (i = [1:5]) {\n        translate([65 - i*8, 0, 14])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=3, $fn=12);\n    }\n}\n\n// Mounting clips (for chair attachment)\nmodule mounting_clips() {\n    // Left clip\n    translate([-60, -40, 0])\n        cube([5, 10, 15]);\n    translate([-65, -40, 12])\n        cube([10, 10, 3]);\n    \n    // Right clip\n    translate([55, -40, 0])\n        cube([5, 10, 15]);\n    translate([55, -40, 12])\n        cube([10, 10, 3]);\n}\n\n// Main assembly\nunion() {\n    // Base belt\n    difference() {\n        belt_body();\n        // Ventilation holes\n        vent_holes();\n    }\n    \n    // Buckle assembly\n    buckle();\n    \n    // Strap holes\n    strap_holes();\n    \n    // Mounting clips\n    mounting_clips();\n    \n    // Reinforcement ribs\n    translate([-55, -40, 8])\n        cube([110, 80, 2]);\n    translate([-60, -15, 0])\n        cube([10, 30, 10]);\n    translate([50, -15, 0])\n        cube([10, 30, 10]);\n}",
    "renders": true
  },
  {
    "office_supply": "winches",
    "openscad_code": "// Winches Furniture Item - Realistic Style, Medium Complexity\n// Office winches system for cable management and structural support\n\n$fn = 32;  // Smooth curves for printing\n\n// Main parameters\nbase_width = 80;\nbase_depth = 60;\nbase_height = 8;\npost_height = 120;\npost_diameter = 12;\narm_length = 100;\narm_thickness = 6;\ndrum_diameter = 25;\ndrum_width = 35;\nhandle_length = 40;\nhandle_diameter = 4;\n\n// Base plate with mounting holes\nmodule base_plate() {\n    difference() {\n        // Main base\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Mounting holes - 4 corners\n        for(x = [-base_width/2 + 15, base_width/2 - 15]) {\n            for(y = [-base_depth/2 + 15, base_depth/2 - 15]) {\n                translate([x, y, -base_height/2])\n                    cylinder(h=base_height+1, d=5, center=true);\n            }\n        }\n        \n        // Center hole for post\n        translate([0, 0, -base_height/2])\n            cylinder(h=base_height+1, d=post_diameter+4, center=true);\n    }\n}\n\n// Main support post with reinforcement\nmodule support_post() {\n    union() {\n        // Main post\n        translate([0, 0, base_height/2 + post_height/2])\n            cylinder(h=post_height, d=post_diameter, center=true);\n        \n        // Reinforcement gussets\n        for(angle = [0, 90, 180, 270]) {\n            rotate([0, 0, angle])\n                translate([0, post_diameter/2 + 2, base_height + 8])\n                    cube([2, 8, 16], center=true);\n        }\n    }\n}\n\n// Winch arm assembly\nmodule winch_arm() {\n    // Main arm\n    translate([0, 0, base_height + post_height])\n        rotate([0, 90, 0])\n            cube([arm_length, arm_thickness, arm_thickness], center=true);\n    \n    // Support strut\n    translate([arm_length/2 - 10, 0, base_height + post_height - 20])\n        rotate([0, 30, 0])\n            cube([25, arm_thickness*0.8, arm_thickness*0.8], center=true);\n}\n\n// Cable drum with flanges\nmodule cable_drum() {\n    translate([arm_length/2, 0, base_height + post_height])\n        rotate([90, 0, 0])\n            union() {\n                // Left flange\n                cylinder(h=3, d=drum_diameter + 8, center=true);\n                translate([0, 0, -drum_width/2 + 1.5])\n                    cylinder(h=drum_width - 3, d=drum_diameter, center=true);\n                // Right flange\n                translate([0, 0, drum_width/2 - 1.5])\n                    cylinder(h=3, d=drum_diameter + 8, center=true);\n            }\n}\n\n// Crank handle with grip\nmodule crank_handle() {\n    translate([arm_length/2, 0, base_height + post_height])\n        rotate([90, 0, 0])\n            union() {\n                // Main crank arm\n                translate([drum_width/2 + 2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=handle_length - 8, d=handle_diameter, center=true);\n                \n                // Handle grip\n                translate([drum_width/2 + handle_length - 2, 0, 0])\n                    sphere(d=8);\n                \n                // Connection to drum\n                cylinder(h=drum_width/2 + 2, d=handle_diameter, center=true);\n            }\n}\n\n// Cable guide eyelets\nmodule cable_guides() {\n    // Front guide\n    translate([arm_length/2, 0, base_height + post_height - arm_thickness/2 - 5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, d=8, center=true);\n                cylinder(h=9, d=4, center=true);\n            }\n    \n    // Rear guide\n    translate([-arm_length/2 + 10, 0, base_height + post_height - arm_thickness/2 - 5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, d=8, center=true);\n                cylinder(h=9, d=4, center=true);\n            }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    support_post();\n    winch_arm();\n    cable_drum();\n    crank_handle();\n    cable_guides();\n}\n\n// Small details - cable anchor point\ntranslate([arm_length/2, 0, base_height + post_height - arm_thickness - 2])\n    cube([4, 2, 4], center=true);",
    "renders": true
  },
  {
    "office_supply": "anchors",
    "openscad_code": "// Anchor furniture piece - desk anchor for cable management\n// Overall dimensions: 120mm x 80mm x 60mm\n// Wall thickness: 2mm\n\n// Main parameters\nwall_thickness = 2;\ncorner_radius = 8;\nheight = 60;\nwidth = 120;\ndepth = 80;\n\n// Create rounded rectangle module\nmodule rounded_rectangle(w, d, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([w-r, r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([w-r, d-r, 0]) cylinder(h=h, r=r, $fn=20);\n        translate([r, d-r, 0]) cylinder(h=h, r=r, $fn=20);\n    }\n}\n\n// Main body\nmodule anchor_body() {\n    difference() {\n        // Outer shell\n        rounded_rectangle(width, depth, height, corner_radius);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_rectangle(width-2*wall_thickness, depth-2*wall_thickness, height-wall_thickness, corner_radius-2);\n    }\n}\n\n// Cable entry slots\nmodule cable_slots() {\n    slot_width = 15;\n    slot_depth = 3;\n    slot_spacing = 25;\n    \n    // Front slots\n    for (i = [0:3]) {\n        translate([20 + i*slot_spacing, -1, 30])\n            cube([slot_width, slot_depth+2, 20]);\n    }\n    \n    // Back slots\n    for (i = [0:3]) {\n        translate([20 + i*slot_spacing, depth-slot_depth+1, 30])\n            cube([slot_width, slot_depth+2, 20]);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    hole_diameter = 6;\n    hole_depth = 10;\n    \n    // Bottom mounting holes\n    translate([20, 15, -1])\n        cylinder(h=hole_depth+2, r=hole_diameter/2, $fn=20);\n    translate([width-20, 15, -1])\n        cylinder(h=hole_depth+2, r=hole_diameter/2, $fn=20);\n    translate([20, depth-15, -1])\n        cylinder(h=hole_depth+2, r=hole_diameter/2, $fn=20);\n    translate([width-20, depth-15, -1])\n        cylinder(h=hole_depth+2, r=hole_diameter/2, $fn=20);\n}\n\n// Feet for stability\nmodule feet() {\n    foot_diameter = 12;\n    foot_height = 5;\n    \n    translate([foot_diameter, foot_diameter, -foot_height])\n        cylinder(h=foot_height, r=foot_diameter/2, $fn=20);\n    translate([width-foot_diameter, foot_diameter, -foot_height])\n        cylinder(h=foot_height, r=foot_diameter/2, $fn=20);\n    translate([foot_diameter, depth-foot_diameter, -foot_height])\n        cylinder(h=foot_height, r=foot_diameter/2, $fn=20);\n    translate([width-foot_diameter, depth-foot_diameter, -foot_height])\n        cylinder(h=foot_height, r=foot_diameter/2, $fn=20);\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    rib_thickness = 2;\n    rib_height = height-10;\n    \n    // Side ribs\n    for (i = [1:3]) {\n        translate([i*width/4, wall_thickness, 5])\n            cube([rib_thickness, depth-2*wall_thickness, rib_height]);\n    }\n    \n    // Front-back ribs\n    for (i = [1:2]) {\n        translate([wall_thickness, i*depth/3, 5])\n            cube([width-2*wall_thickness, rib_thickness, rib_height]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    anchor_body();\n    \n    // Cable slots (remove material)\n    difference() {\n        anchor_body();\n        cable_slots();\n    }\n    \n    // Mounting holes (remove material)\n    difference() {\n        anchor_body();\n        mounting_holes();\n    }\n    \n    // Feet\n    feet();\n    \n    // Internal ribs\n    ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "paddles",
    "openscad_code": "// Realistic Office Paddles - Medium Complexity\n// A set of wooden paddles for office use, designed as functional furniture accessory\n\n$fn = 32;  // Smooth curves\nwall_thickness = 2;  // 3D printable walls\n\n// Main module\nmodule office_paddles() {\n    // Paddle 1 - Large paddle for presentations\n    translate([-60, 0, 0]) paddle_large();\n    \n    // Paddle 2 - Medium paddle for meetings\n    translate([0, 0, 0]) paddle_medium();\n    \n    // Paddle 3 - Small paddle for personal use\n    translate([60, 0, 0]) paddle_small();\n}\n\n// Large paddle module\nmodule paddle_large() {\n    // Handle\n    translate([0, 0, 0]) {\n        // Main handle shaft\n        cylinder(h=120, r=8, center=true);\n        \n        // Handle grip texture\n        for(i=[-50:10:50]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=2, r=8.5, center=true);\n                    cylinder(h=2.5, r=7.5, center=true);\n                }\n            }\n        }\n        \n        // Handle end cap\n        translate([0, 0, 60]) sphere(r=9);\n    }\n    \n    // Paddle head\n    translate([0, 0, -70]) {\n        // Main paddle blade\n        difference() {\n            scale([1, 1.5, 0.15]) sphere(r=60);\n            translate([0, 0, -5]) cube([120, 180, 10], center=true);\n        }\n        \n        // Reinforcement ring\n        translate([0, 0, -9]) {\n            difference() {\n                cylinder(h=2, r=60);\n                cylinder(h=3, r=58);\n            }\n        }\n        \n        // Joint reinforcement\n        translate([0, 0, -30]) {\n            difference() {\n                cylinder(h=40, r1=20, r2=8);\n                cylinder(h=41, r1=18, r2=6);\n            }\n        }\n    }\n}\n\n// Medium paddle module\nmodule paddle_medium() {\n    // Handle\n    translate([0, 0, 0]) {\n        cylinder(h=100, r=6, center=true);\n        \n        // Ergonomic grip\n        rotate([90, 0, 0]) {\n            translate([0, 0, -50]) {\n                difference() {\n                    cylinder(h=100, r=7);\n                    cylinder(h=101, r=5.5);\n                }\n            }\n        }\n        \n        // End cap with logo area\n        translate([0, 0, 50]) {\n            difference() {\n                sphere(r=7);\n                translate([0, 0, -5]) cube([10, 10, 10], center=true);\n            }\n        }\n    }\n    \n    // Paddle head\n    translate([0, 0, -60]) {\n        // Oval blade\n        difference() {\n            scale([1, 1.2, 0.12]) sphere(r=45);\n            translate([0, 0, -5]) cube([90, 108, 10], center=true);\n        }\n        \n        // Structural rib\n        translate([0, 0, -7]) {\n            difference() {\n                cylinder(h=4, r=45);\n                cylinder(h=5, r=43);\n            }\n        }\n    }\n}\n\n// Small paddle module\nmodule paddle_small() {\n    // Handle\n    translate([0, 0, 0]) {\n        cylinder(h=80, r=4, center=true);\n        \n        // Textured grip pattern\n        for(i=[-30:8:30]) {\n            rotate([0, 90, 0]) {\n                translate([i, 0, 0]) {\n                    cube([2, 8, 8], center=true);\n                }\n            }\n        }\n        \n        // Rounded end\n        translate([0, 0, 40]) sphere(r=5);\n    }\n    \n    // Paddle head\n    translate([0, 0, -50]) {\n        // Compact blade\n        difference() {\n            scale([1, 1.1, 0.1]) sphere(r=35);\n            translate([0, 0, -5]) cube([70, 77, 10], center=true);\n        }\n        \n        // Reinforcement web\n        translate([0, 0, -5]) {\n            difference() {\n                cylinder(h=3, r=35);\n                cylinder(h=4, r=33);\n            }\n        }\n    }\n}\n\n// Render the paddles\noffice_paddles();",
    "renders": true
  },
  {
    "office_supply": "oars",
    "openscad_code": "// Oars Furniture - Realistic Office Bookend Set\n// Modeled as a pair of crossed oars forming a bookend support\n\n// Parameters\n$fn = 32;\nhandle_length = 85;\nhandle_radius = 3;\nblade_length = 35;\nblade_width = 20;\nblade_thickness = 2.5;\ncross_support_radius = 4;\nbase_height = 8;\nbase_width = 50;\nbase_depth = 25;\n\n// Wood color simulation\ncolor_wood = [0.72, 0.52, 0.34];\n\n// Handle module with ergonomic grip\nmodule handle(length, radius) {\n    difference() {\n        // Main handle cylinder\n        translate([0, 0, length/2])\n            cylinder(h = length, r = radius, center = true);\n        \n        // Grip indentations\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n                translate([radius-1, 0, length*0.3])\n                    cube([2, radius*1.5, length*0.4], center = true);\n        }\n    }\n}\n\n// Oar blade module with realistic shaping\nmodule oar_blade(length, width, thickness) {\n    hull() {\n        // Blade base\n        translate([0, 0, -length/2])\n            cube([width, thickness, length], center = true);\n        \n        // Tapered tip\n        translate([0, 0, -length])\n            scale([0.1, 1, 0.1])\n                cube([width, thickness, length/2], center = true);\n        \n        // Reinforcement ridge\n        translate([0, 0, -length*0.7])\n            cube([width*0.3, thickness*1.5, length*0.2], center = true);\n    }\n}\n\n// Oar assembly combining handle and blade\nmodule single_oar() {\n    color(color_wood) {\n        // Handle\n        translate([0, 0, handle_length/2])\n            handle(handle_length, handle_radius);\n        \n        // Transition collar\n        translate([0, 0, handle_length])\n            cylinder(h = 5, r1 = handle_radius*1.2, r2 = handle_radius*1.5);\n        \n        // Blade\n        translate([0, 0, handle_length + blade_length/2 + 2.5])\n            oar_blade(blade_length, blade_width, blade_thickness);\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    color([0.3, 0.3, 0.3]) {\n        difference() {\n            // Main base\n            translate([0, 0, base_height/2])\n                cube([base_width, base_depth, base_height], center = true);\n            \n            // Anti-slip grooves\n            for(i = [-2:2]) {\n                translate([i*8, 0, base_height-1])\n                    cube([2, base_depth*0.8, 1], center = true);\n            }\n            \n            // Mounting holes for 3D printing\n            translate([-15, 0, base_height/2])\n                cylinder(h = base_height, r = 2);\n            translate([15, 0, base_height/2])\n                cylinder(h = base_height, r = 2);\n        }\n    }\n}\n\n// Cross support where oars intersect\nmodule cross_support() {\n    color([0.8, 0.8, 0.8]) {\n        difference() {\n            // Main support cylinder\n            cylinder(h = blade_thickness*3, r = cross_support_radius);\n            \n            // Oar slots\n            rotate([0, 90, 0])\n                cube([handle_radius*2.2, blade_thickness*4, handle_radius*2.2], center = true);\n            rotate([90, 0, 0])\n                cube([handle_radius*2.2, blade_thickness*4, handle_radius*2.2], center = true);\n            \n            // Decorative center\n            cylinder(h = blade_thickness*3.5, r = 3);\n        }\n    }\n}\n\n// Complete oars furniture assembly\nmodule oars_bookend() {\n    // Base\n    translate([0, 0, 0])\n        base();\n    \n    // First oar at 45 degrees\n    translate([0, 0, base_height + handle_radius])\n        rotate([45, 0, 0])\n            single_oar();\n    \n    // Second oar at 90 degrees to first\n    translate([0, 0, base_height + handle_radius])\n        rotate([0, 0, 90])\n            rotate([45, 0, 0])\n                single_oar();\n    \n    // Cross support at intersection\n    translate([0, 0, base_height + handle_radius + handle_length*0.7])\n        rotate([45, 0, 45])\n            cross_support();\n}\n\n// Main assembly\noars_bookend();",
    "renders": true
  },
  {
    "office_supply": "sails",
    "openscad_code": "// Sails Office Chair - Realistic Style, Medium Complexity\n// Dimensions optimized for 3D printing: 120mm height\n\n// Chair parameters\nseat_width = 80;\nseat_depth = 70;\nback_height = 50;\nleg_height = 45;\narmrest_height = 20;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, leg_height + 5])\n            cube([seat_width, seat_depth, 10], center=true);\n        \n        // Hollow interior\n        translate([0, 0, leg_height + 5])\n            cube([seat_width - wall*2, seat_depth - wall*2, 10 - wall], center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2 + 5, leg_height + 5 + back_height/2])\n            cube([seat_width - 10, 8, back_height], center=true);\n        \n        // Hollow interior\n        translate([0, -seat_depth/2 + 5, leg_height + 5 + back_height/2])\n            cube([seat_width - 10 - wall*2, 8 - wall, back_height - wall], center=true);\n        \n        // Lumbar support curve\n        translate([0, -seat_depth/2 + 9, leg_height + 5 + 15])\n            cube([seat_width - 10, 1, 25], center=true);\n    }\n}\n\n// Armrest support structure\nmodule armrest(side) {\n    translate([side * (seat_width/2 - 10), 0, leg_height + 5 + armrest_height/2]) {\n        difference() {\n            // Vertical support\n            cube([8, seat_depth/2, armrest_height], center=true);\n            // Hollow\n            cube([8 - wall, seat_depth/2 - wall, armrest_height - wall], center=true);\n        }\n        \n        // Horizontal arm pad\n        translate([0, seat_depth/4, armrest_height/2 + 3]) {\n            difference() {\n                cube([20, 8, 6], center=true);\n                cube([20 - wall, 8 - wall, 6 - wall], center=true);\n            }\n        }\n    }\n}\n\n// Chair leg with caster base\nmodule chair_leg() {\n    // Central post\n    difference() {\n        cylinder(h=leg_height, r=8, $fn=32);\n        cylinder(h=leg_height, r=8 - wall, $fn=32);\n    }\n    \n    // Star base (5 spokes)\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            // Spoke\n            translate([15, 0, leg_height/2]) {\n                difference() {\n                    cube([30, 6, 6], center=true);\n                    cube([30, 6 - wall, 6 - wall], center=true);\n                }\n            }\n            \n            // Caster wheel\n            translate([30, 0, 0]) {\n                difference() {\n                    sphere(r=6, $fn=16);\n                    sphere(r=6 - wall, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    difference() {\n        cylinder(h=15, r=5, $fn=32);\n        cylinder(h=15, r=5 - wall, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Base with casters\n    chair_leg();\n    \n    // Gas lift\n    translate([0, 0, leg_height])\n        gas_lift();\n    \n    // Seat assembly\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}",
    "renders": true
  },
  {
    "office_supply": "masts",
    "openscad_code": "// Mast-style desk organizer with pen holders, note tray, phone/tablet stand\n// Realistic proportions, 3D-printable, ~120mm tall\n\n$fn=32; // smooth curves\n\n// global dimensions\nbase_w = 80;    // footprint 80×80 mm\nbase_d = 80;\nbase_h = 6;     // thick base plate\n\nmast_d = 12;    // diameter of mast tubes\nwall_t = 2.5;   // printable wall thickness\n\nmodule mast_body(h, d, wall){\n    // hollow cylinder\n    difference(){\n        cylinder(h=h, d=d);\n        translate([0,0,wall])\n            cylinder(h=h-wall, d=d-2*wall);\n    }\n}\n\nmodule mast_taper(h, d1, d2, wall){\n    // tapered hollow cone (for realistic mast look)\n    difference(){\n        cylinder(h=h, d1=d1, d2=d2);\n        translate([0,0,wall])\n            cylinder(h=h-wall, d1=d1-2*wall, d2=d2-2*wall);\n    }\n}\n\nmodule cross_spreader(h){\n    // cross-shaped spreader between masts\n    for(a=[0,90])\n        rotate([0,0,a])\n            translate([-base_w/2+5, -wall_t/2, 0])\n                cube([base_w-10, wall_t, h]);\n}\n\nmodule base_plate(){\n    difference(){\n        cube([base_w, base_d, base_h], center=true);\n        // lightening pockets on underside\n        for(x=[-1,1])\n            for(y=[-1,1])\n                translate([x*20, y*20, -base_h/2+1])\n                    cube([12,12,2]);\n    }\n}\n\nmodule phone_slot(){\n    // angled slot for phone/tablet\n    slot_w = 12;\n    slot_d = 10;\n    slot_h = 25;\n    translate([0, base_d/2 - 15, base_h])\n        rotate([0,15,0])\n            difference(){\n                cube([slot_w, slot_d, slot_h], center=true);\n                translate([0,0,1])\n                    cube([slot_w-2*wall_t, slot_d+1, slot_h-2], center=true);\n            }\n}\n\nmodule note_tray(){\n    // shallow tray for sticky notes\n    tray_w = 60;\n    tray_d = 30;\n    tray_h = 8;\n    translate([0, -base_d/2 + 15, base_h])\n        difference(){\n            cube([tray_w, tray_d, tray_h], center=true);\n            translate([0,0,2])\n                cube([tray_w-2*wall_t, tray_d-2*wall_t, tray_h], center=true);\n        }\n}\n\n// assembly\nunion(){\n    // base\n    base_plate();\n\n    // central mast\n    translate([0,0,base_h/2])\n        mast_taper(h=60, d1=12, d2=8, wall=wall_t);\n\n    // four corner masts (pen holders)\n    for(px=[-1,1])\n        for(py=[-1,1])\n            translate([px*25, py*25, base_h/2])\n                mast_body(h=50, d=mast_d, wall=wall_t);\n\n    // cross spreader at mid height\n    translate([0,0,base_h+30])\n        cross_spreader(h=2);\n\n    // furniture details\n    phone_slot();\n    note_tray();\n\n    // subtle chamfers on mast tops\n    for(pos=[[0,0,base_h+60], [25,25,base_h+50], [-25,25,base_h+50], [25,-25,base_h+50], [-25,-25,base_h+50]]){\n        translate(pos)\n            sphere(d=2);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "keels",
    "openscad_code": "// Keels office chair - realistic medium complexity\n// Dimensions: ~120mm tall, 60mm wide, 60mm deep\n\n$fn = 32;\n\n// Main parameters\nseat_height = 45;\nback_height = 75;\narmrest_height = 65;\nbase_diameter = 50;\ncaster_wheel_diameter = 6;\n\n// Module for caster wheel assembly\nmodule caster_wheel() {\n    // Wheel\n    rotate([90, 0, 0])\n        cylinder(h=caster_wheel_diameter, d=caster_wheel_diameter, center=true);\n    \n    // Fork\n    translate([0, caster_wheel_diameter/2 + 2, 0])\n        cube([2, 6, 2], center=true);\n    \n    // Stem\n    translate([0, caster_wheel_diameter/2 + 5, 0])\n        cylinder(h=8, d=4, center=true);\n}\n\n// Module for 5-star base\nmodule five_star_base() {\n    // Center hub\n    cylinder(h=15, d=15);\n    \n    // Arms (5 arms at 72 degree intervals)\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([25, 0, 0])\n                cube([50, 8, 5], center=true);\n    }\n    \n    // Caster wheels at end of each arm\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([45, 0, -10])\n                caster_wheel();\n    }\n}\n\n// Module for seat cushion\nmodule seat_cushion() {\n    // Main seat\n    translate([0, 0, seat_height])\n        cube([50, 50, 8], center=true);\n    \n    // Cushion detail - rounded top\n    translate([0, 0, seat_height + 4])\n        scale([1, 1, 0.5])\n            sphere(d=50);\n}\n\n// Module for backrest\nmodule backrest() {\n    // Main back support\n    translate([0, -20, seat_height + back_height/2])\n        cube([45, 5, back_height], center=true);\n    \n    // Lumbar support curve\n    translate([0, -17, seat_height + 25])\n        cube([40, 2, 30], center=true);\n    \n    // Headrest\n    translate([0, -20, seat_height + back_height + 10])\n        cube([35, 5, 15], center=true);\n}\n\n// Module for armrests\nmodule armrests() {\n    // Left armrest\n    translate([-30, 0, seat_height + armrest_height/2])\n        cube([5, 40, 10], center=true);\n    \n    // Left support post\n    translate([-30, 10, seat_height - 10])\n        cube([5, 5, 20], center=true);\n    \n    // Right armrest\n    translate([30, 0, seat_height + armrest_height/2])\n        cube([5, 40, 10], center=true);\n    \n    // Right support post\n    translate([30, 10, seat_height - 10])\n        cube([5, 5, 20], center=true);\n}\n\n// Module for gas lift cylinder\nmodule gas_lift() {\n    // Outer cylinder\n    translate([0, 0, seat_height/2])\n        cylinder(h=seat_height, d=12);\n    \n    // Inner piston visible at top\n    translate([0, 0, seat_height - 5])\n        cylinder(h=10, d=8);\n}\n\n// Assembly\nunion() {\n    // Base and support structure\n    five_star_base();\n    \n    // Gas lift mechanism\n    gas_lift();\n    \n    // Seat assembly\n    seat_cushion();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "hulls",
    "openscad_code": "// Office Chair - Realistic Style with Medium Complexity\n// Dimensions: ~120mm tall, suitable for 3D printing\n\nmodule chair_base() {\n    // 5-star base with casters\n    difference() {\n        union() {\n            // Central hub\n            cylinder(h=8, d=20, $fn=30);\n            \n            // 5 arms\n            for(angle=[0:72:360]) {\n                rotate([0,0,angle]) {\n                    translate([0,12.5,0]) {\n                        cube([25,5,6], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Caster holes\n        for(angle=[0:72:360]) {\n            rotate([0,0,angle]) {\n                translate([22.5,0,-1]) {\n                    cylinder(h=10, d=4, $fn=20);\n                }\n            }\n        }\n    }\n}\n\nmodule gas_cylinder() {\n    // Height adjustment cylinder\n    cylinder(h=35, d=8, $fn=30);\n    \n    // Top cap\n    translate([0,0,35]) {\n        cylinder(h=3, d=12, $fn=30);\n    }\n}\n\nmodule seat_pan() {\n    // Main seat cushion\n    difference() {\n        translate([-30,-30,0]) {\n            cube([60,60,8]);\n        }\n        \n        // Filleting bottom edges\n        translate([-28,-28,-0.1]) {\n            cube([56,56,8.2]);\n        }\n    }\n    \n    // Seat pan structure\n    translate([-28,-28,-2]) {\n        cube([56,56,2]);\n    }\n}\n\nmodule backrest() {\n    // Mesh back panel\n    difference() {\n        translate([-28,-5,0]) {\n            cube([56,5,55]);\n        }\n        \n        // Ventilation holes pattern\n        for(y=[10:10:45]) {\n            for(x=[-20:10:20]) {\n                translate([x,y-2.5,2.5]) {\n                    cube([8,5,50]);\n                }\n            }\n        }\n    }\n    \n    // Lumbar support curve\n    translate([-30,-7,15]) {\n        cube([60,2,25]);\n    }\n}\n\nmodule armrest() {\n    // Left armrest\n    translate([-35,-32,8]) {\n        cube([5,8,25]);\n    }\n    \n    // Armrest pad\n    translate([-32.5,-32,33]) {\n        cube([10,12,3]);\n    }\n    \n    // Right armrest (mirror)\n    mirror([1,0,0]) {\n        translate([-35,-32,8]) {\n            cube([5,8,25]);\n        }\n    }\n    \n    mirror([1,0,0]) {\n        translate([-32.5,-32,33]) {\n            cube([10,12,3]);\n        }\n    }\n}\n\n// Assemble the chair\nunion() {\n    // Base assembly\n    translate([0,0,0]) {\n        chair_base();\n    }\n    \n    // Gas cylinder\n    translate([0,0,8]) {\n        gas_cylinder();\n    }\n    \n    // Seat assembly\n    translate([0,0,46]) {\n        union() {\n            seat_pan();\n            \n            // Backrest support\n            translate([0,0,8]) {\n                rotate([0,-15,0]) {\n                    backrest();\n                }\n            }\n            \n            // Armrests\n            armrest();\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "decks",
    "openscad_code": "// OpenSCAD Decks Furniture – realistic, medium complexity\n// A compact 1:24 scale wooden decks / patio table with slatted top and cross-leg frame\n\n$fn = 32;                    // smooth curves\n\n// overall dimensions (mm)\nlength = 120;\nwidth  = 75;\nheight = 65;\nwall   = 2;                  // printable wall thickness\nslatW  = 6;                  // single slat width\nslatG  = 2;                  // gap between slats\n\n// --------------------------------------------------\n// slats for the tabletop – loop along length\nmodule slattedTop() {\n    nSlats  = floor(length / (slatW + slatG));\n    off     = (length - nSlats*(slatW + slatG) + slatG)/2;\n\n    for (i=[0:nSlats-1])\n        translate([off + i*(slatW + slatG), 0, height-wall])\n            cube([slatW, width, wall]);\n}\n\n// --------------------------------------------------\n// simple rounded rail frame under top (printable if split)\nmodule topFrame() {\n    // long rails\n    translate([wall/2, wall/2, height-wall*2])\n        cube([length-wall, wall, wall]);\n    translate([wall/2, width-wall-wall/2, height-wall*2])\n        cube([length-wall, wall, wall]);\n\n    // short rails (printed on build plate, no overhang)\n    translate([wall/2, wall/2, height-wall*2])\n        cube([wall, width-wall*2, wall]);\n    translate([length-wall-wall/2, wall/2, height-wall*2])\n        cube([wall, width-wall*2, wall]);\n}\n\n// --------------------------------------------------\n// cross-leg trestle frame – symmetrical\nmodule trestleLeg() {\n    // left leg pair\n    translate([20, wall/2, wall])\n        rotate([0, -10, 0])\n            cube([wall, width-wall, height-wall*2]);\n\n    translate([20+wall, wall/2, wall])\n        rotate([0,  10, 0])\n            cube([wall, width-wall, height-wall*2]);\n\n    // right leg pair\n    translate([length-20-wall, wall/2, wall])\n        rotate([0, 10, 0])\n            cube([wall, width-wall, height-wall*2]);\n\n    translate([length-20, wall/2, wall])\n        rotate([0, -10, 0])\n            cube([wall, width-wall, height-wall*2]);\n\n    // stretcher between legs\n    translate([20+wall, wall/2, wall])\n        cube([length-40-wall*2, wall, wall]);\n}\n\n// --------------------------------------------------\n// main assembly\nunion() {\n    slattedTop();\n    topFrame();\n    trestleLeg();\n}",
    "renders": true
  },
  {
    "office_supply": "cockpits",
    "openscad_code": "// Cockpit Chair for 3D Printing\n// Realistic style, medium complexity\n// Overall dimensions: ~100mm height, 65mm width, 90mm depth\n\n// General parameters\n$fn = 32; // Smooth curves\nwall = 2; // Wall thickness for 3D printing\n\n// Main seat module\nmodule seat() {\n    // Seat cushion - ergonomic slope\n    translate([0, 0, 40]) {\n        difference() {\n            // Main cushion\n            hull() {\n                translate([-30, -30, 0]) cube([60, 60, 8]);\n                translate([-28, -28, -2]) cube([56, 56, 8]);\n            }\n            // Rounded front edge\n            translate([0, 30, 4]) rotate([90, 0, 0]) \n                cylinder(h=60, r=4, center=true);\n        }\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    translate([0, -25, 70]) {\n        // Main backrest\n        difference() {\n            hull() {\n                translate([-30, -8, -25]) cube([60, 16, 50]);\n                translate([-28, -7, -23]) cube([56, 14, 46]);\n            }\n            // Lumbar curve\n            translate([0, 0, -15]) \n                cube([40, 20, 30], center=true);\n        }\n        \n        // Headrest support\n        translate([0, 0, 25]) {\n            difference() {\n                hull() {\n                    cube([50, 12, 20], center=true);\n                    translate([0, 0, 2]) \n                        cube([46, 10, 16], center=true);\n                }\n                // Cutout for headrest\n                translate([0, 0, 10]) \n                    cube([30, 14, 10], center=true);\n            }\n        }\n    }\n}\n\n// Armrest with adjustment mechanism\nmodule armrest(side) {\n    translate([side * 32, 0, 45]) {\n        // Vertical support post\n        difference() {\n            cylinder(h=25, r=6);\n            translate([0, 0, -1]) \n                cylinder(h=27, r=4);\n        }\n        \n        // Horizontal arm pad\n        translate([0, 15, 25]) {\n            rotate([0, 10, 0]) {\n                difference() {\n                    hull() {\n                        cube([12, 30, 6], center=true);\n                        translate([0, 0, 3]) \n                            cube([10, 28, 4], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// 5-star base with casters\nmodule base() {\n    // Central column\n    difference() {\n        cylinder(h=35, r=12);\n        translate([0, 0, -1]) \n            cylinder(h=37, r=10);\n    }\n    \n    // Gas cylinder cover\n    translate([0, 0, 35]) {\n        difference() {\n            cylinder(h=10, r=15);\n            translate([0, 0, -1]) \n                cylinder(h=12, r=13);\n        }\n    }\n    \n    // Star legs\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60 + 30]) {\n            translate([0, 25, 0]) {\n                difference() {\n                    hull() {\n                        cube([10, 35, 8], center=true);\n                        translate([0, 30, 0]) \n                            cube([8, 10, 8], center=true);\n                    }\n                    // Caster wheel cutout\n                    translate([0, 30, -4]) \n                        sphere(r=4);\n                }\n            }\n        }\n    }\n}\n\n// Control panel on right armrest\nmodule control_panel() {\n    translate([32, 15, 50]) {\n        difference() {\n            cube([20, 15, 8], center=true);\n            translate([0, 0, -1]) \n                cube([16, 11, 10], center=true);\n        }\n        \n        // Buttons\n        for(i = [0:2]) {\n            translate([5 - i * 5, 0, 4.5]) \n                cylinder(h=2, r=2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    \n    translate([0, 0, 35]) {\n        union() {\n            seat();\n            backrest();\n            \n            // Armrests\n            armrest(1);  // Right\n            armrest(-1); // Left\n            \n            // Control panel on right side\n            control_panel();\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "cabins",
    "openscad_code": "// Cabin-style armchair with realistic proportions and joinery details\n// Overall print-friendly size: 60 mm width x 60 mm depth x 70 mm height\n// Wall thickness 2 mm throughout for reliable 3D printing\n\narmchair();\n\nmodule armchair() {\n    // Seat platform\n    difference() {\n        cube([36, 36, 4], center = true);          // seat block\n        translate([0, 0, 2])                       // hollow cavity\n            cube([32, 32, 4], center = true);\n    }\n\n    // Backrest frame\n    translate([0, -19, 32])\n        difference() {\n            cube([36, 4, 36], center = true);      // backrest panel\n            translate([0, 2, 0])                   // hollow cavity\n                cube([32, 4, 32], center = true);\n        }\n\n    // Left armrest assembly\n    translate([-20, 0, 20])\n        union() {\n            // vertical post\n            difference() {\n                cube([4, 4, 36], center = true);\n                translate([0, 0, 2])\n                    cube([2, 2, 36], center = true);\n            }\n            // horizontal arm pad\n            translate([0, 0, 20])\n                difference() {\n                    cube([4, 28, 4], center = true);\n                    translate([0, 0, 2])\n                        cube([2, 24, 4], center = true);\n                }\n        }\n\n    // Right armrest assembly (mirror of left)\n    mirror([1, 0, 0])\n        translate([-20, 0, 20])\n        union() {\n            difference() {\n                cube([4, 4, 36], center = true);\n                translate([0, 0, 2])\n                    cube([2, 2, 36], center = true);\n            }\n            translate([0, 0, 20])\n                difference() {\n                    cube([4, 28, 4], center = true);\n                    translate([0, 0, 2])\n                        cube([2, 24, 4], center = true);\n                }\n        }\n\n    // Front left leg\n    translate([-15, 15, -18])\n        leg();\n\n    // Front right leg\n    translate([15, 15, -18])\n        leg();\n\n    // Rear left leg\n    translate([-15, -15, -18])\n        leg();\n\n    // Rear right leg\n    translate([15, -15, -18])\n        leg();\n\n    // Back slats (5 vertical bars)\n    for (x = [-12:6:12])\n        translate([x, -19, 32])\n            difference() {\n                cylinder(h = 30, d = 3, center = true);\n                cylinder(h = 32, d = 1, center = true);\n            }\n}\n\nmodule leg() {\n    // Tapered square leg with tenon detail\n    difference() {\n        cylinder(h = 34, d1 = 6, d2 = 4);      // tapered leg post\n        cylinder(h = 36, d1 = 3, d2 = 1);      // hollow core\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "gauges",
    "openscad_code": "// Gauge Rack Furniture - Medium complexity realistic OpenSCAD model\n// A desktop rack holding multiple industrial gauges\n\n// Overall dimensions\nrack_width = 120;\nrack_depth = 60;\nrack_height = 80;\nwall_thick = 2;\n\n// Gauge dimensions\ngauge_dia = 25;\ngauge_depth = 12;\ngauge_spacing = 30;\n\n// Base with chamfered edges\nmodule base() {\n    difference() {\n        cube([rack_width, rack_depth, 10], center=true);\n        translate([0,0,5-0.01]) \n            cube([rack_wall-2*wall_thick, rack_depth-2*wall_thick, 10], center=true);\n    }\n    // Chamfer edges\n    for (x=[-1,1]) for (y=[-1,1]) \n        translate([x*rack_width/2, y*rack_depth/2, 5])\n            rotate([x*45, y*45, 0])\n                cube([wall_thick*sqrt(2), wall_thick*sqrt(2), 10], center=true);\n}\n\n// Back panel with mounting slots\nmodule back_panel() {\n    difference() {\n        cube([rack_width, wall_thick, rack_height], center=true);\n        // Mounting slots\n        for (x=[-rack_width/3, 0, rack_width/3]) {\n            translate([x, 0, rack_height/2-10])\n                cube([8, wall_thick+0.1, 15], center=true);\n        }\n    }\n}\n\n// Gauge mounting bracket\nmodule gauge_bracket(pos) {\n    translate([pos, 0, rack_height/2-10]) {\n        // Vertical support\n        cube([wall_thick*3, rack_depth/3, 20], center=true);\n        // Gauge holder\n        translate([0, 0, 10]) {\n            difference() {\n                cylinder(h=gauge_depth+wall_thick, r=gauge_dia/2+wall_thick, center=true);\n                cylinder(h=gauge_depth+wall_thick+0.1, r=gauge_dia/2, center=true);\n            }\n            // Mounting screws\n            for (angle=[0,120,240]) {\n                rotate([0,0,angle]) \n                    translate([gauge_dia/2+wall_thick/2, 0, 0])\n                        cylinder(h=gauge_depth+0.2, r=1, center=true);\n            }\n        }\n    }\n}\n\n// Gauge dial face\nmodule gauge_face(pos) {\n    translate([pos, 0, rack_height/2-10+gauge_depth/2+wall_thick/2]) {\n        // Dial face\n        color(\"white\")\n            cylinder(h=0.5, r=gauge_dia/2-2, center=true);\n        // Needle\n        rotate([0,0,rands(0,330,1)[0]])\n            translate([gauge_dia/4, 0, 0.25])\n                cube([gauge_dia/2-3, 0.5, 0.5], center=true);\n        // Center hub\n        cylinder(h=1, r=2, center=true);\n    }\n}\n\n// Side supports with reinforcement ribs\nmodule side_support() {\n    for (side=[-1,1]) {\n        translate([side*rack_width/2, 0, rack_height/2]) {\n            cube([wall_thick, rack_depth, rack_height], center=true);\n            // Reinforcement ribs\n            for (z=[-rack_height/4, 0, rack_height/4]) {\n                translate([0, rack_depth/3, z])\n                    cube([wall_thick*2, wall_thick, rack_height/6], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Frame\n    base();\n    back_panel();\n    side_support();\n    \n    // Gauge brackets and faces\n    for (i=[-1,0,1]) {\n        gauge_bracket(i*gauge_spacing);\n        gauge_face(i*gauge_spacing);\n    }\n    \n    // Top handle\n    translate([0, 0, rack_height/2+5]) {\n        difference() {\n            cylinder(h=wall_thick*2, r=rack_width/3, center=true);\n            cylinder(h=wall_thick*2+0.1, r=rack_width/3-wall_thick, center=true);\n        }\n    }\n    \n    // Front label plate\n    translate([0, rack_depth/2+wall_thick/2, rack_height/4])\n        cube([rack_width/2, wall_thick, 10], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "meters",
    "openscad_code": "// OpenSCAD file: realistic_meterstick_desktop_holder.scad\n// A desktop holder for a 1-meter ruler with integrated pen tray\n// Overall footprint ~140 mm x 60 mm x 40 mm\n\n// Parameters\nwall = 2;               // wall thickness (mm)\nh = 40;                 // overall height (mm)\nw = 60;                 // overall width (mm)\nl = 140;                // overall length (mm)\nslot_w = 8;             // ruler slot width (mm)\nslot_d = 3;             // ruler slot depth (mm)\npen_r = 6;              // pen tray radius (mm)\npen_h = 20;             // pen tray height (mm)\nfillet = 2;             // corner fillet radius (mm)\n\n// Base plate with rounded corners\nmodule base() {\n    difference() {\n        // solid base\n        minkowski() {\n            cube([l-2*wall, w-2*wall, wall], center=true);\n            cylinder(r=fillet, h=0.01, center=true);\n        }\n        // underside cavity\n        translate([0,0,-wall/2])\n            cube([l-2*wall-2*fillet, w-2*wall-2*fillet, wall+0.1], center=true);\n    }\n}\n\n// Main body (hollow block)\nmodule body() {\n    difference() {\n        // outer shell\n        minkowski() {\n            cube([l, w, h], center=true);\n            cylinder(r=fillet, h=0.01, center=true);\n        }\n        // hollow interior\n        translate([0,0,-wall])\n            cube([l-2*wall, w-2*wall, h], center=true);\n    }\n}\n\n// Ruler slot\nmodule ruler_slot() {\n    // central slot\n    translate([0,0,h/2-slot_d/2])\n        cube([l-2*wall-2*fillet, slot_w, slot_d+0.1], center=true);\n    // tapered entry\n    translate([0,0,slot_d/2+wall])\n        cube([l-2*wall-2*fillet, slot_w+4, slot_d], center=true);\n}\n\n// Pen tray hollow cylinders (2 pens)\nmodule pen_trays() {\n    for(x=[-l/4, l/4]) {\n        translate([x, w/2-pen_r-wall, 0])\n            difference() {\n                cylinder(h=pen_h, r=pen_r, center=true);\n                translate([0,0,-wall])\n                    cylinder(h=pen_h+wall, r=pen_r-wall, center=true);\n            }\n    }\n}\n\n// Side ribs for stiffness\nmodule ribs() {\n    for(y=[-w/3, w/3]) {\n        translate([0, y, 0])\n            difference() {\n                cube([l-2*wall-2*fillet, wall, h-2*wall-2*fillet], center=true);\n                translate([0,0,-wall])\n                    cube([l-2*wall-2*fillet-2*fillet, wall, h-2*wall], center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    ruler_slot();\n    pen_trays();\n    ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "chargers",
    "openscad_code": "// OpenSCAD realistic medium-complexity charger furniture\n// A small desktop charger station / organizer for phones and accessories\n\n// Overall dimensions\nwidth = 70;       // mm\ndepth = 80;       // mm\nheight = 55;      // mm\n\n// Wall thickness\nwall = 2;\n\n// Main base block\nmodule base() {\n    difference() {\n        // Outer rounded box\n        hull() {\n            translate([wall, wall, 0]) cube([width-2*wall, depth-2*wall, height]);\n            translate([wall, depth-wall, 0]) cube([width-2*wall, wall, height]);\n            translate([width-wall, wall, 0]) cube([wall, depth-2*wall, height]);\n            translate([width-wall, depth-wall, 0]) cube([wall, wall, height]);\n        }\n        // Hollow interior\n        translate([wall, wall, wall]) cube([width-2*wall, depth-2*wall, height-2*wall]);\n    }\n}\n\n// Front lip for holding devices\nmodule lip() {\n    difference() {\n        // Main lip body\n        translate([0, 0, height-wall]) cube([width, 15, wall+2]);\n        // Rounded edge\n        translate([wall, 15-wall, height-wall]) cylinder(h=wall+2, r=wall, $fn=16);\n        translate([width-wall, 15-wall, height-wall]) cylinder(h=wall+2, r=wall, $fn=16);\n    }\n}\n\n// Cable management hole at back\nmodule cable_hole() {\n    translate([width/2, depth-wall-1, height/2]) rotate([0, 90, 0]) \n        cylinder(h=wall+2, r=4, $fn=32);\n}\n\n// Slot dividers for multiple devices\nmodule dividers() {\n    for(i=[1:3]) {\n        translate([i*width/4, wall, wall]) \n            cube([wall, depth-2*wall, height-2*wall]);\n    }\n}\n\n// Rubber feet recesses\nmodule feet() {\n    for(x=[wall*2, width-wall*2]) {\n        for(y=[wall*2, depth-wall*2]) {\n            translate([x, y, -0.5]) cylinder(h=wall, r=2.5, $fn=16);\n        }\n    }\n}\n\n// Phone stand angle support\nmodule stand_support() {\n    translate([wall, 10, wall]) \n        cube([width-2*wall, wall, height-10]);\n    translate([wall, 10, wall]) \n        cube([wall, 5, height-10]);\n    translate([width-wall, 10, wall]) \n        cube([wall, 5, height-10]);\n}\n\n// Assembly\nunion() {\n    base();\n    lip();\n    cable_hole();\n    dividers();\n    stand_support();\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "inverters",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity office inverter furniture item\n// Size: ~90 mm wide, ~70 mm deep, ~100 mm tall – fits 3D-printing bed\n\n$fn = 50;               // smooth curves\nwall = 2;               // printable wall thickness\n\nmodule main_body() {\n    // outer shell\n    difference() {\n        cube([86, 66, 55], center = true);\n        translate([0, 0, 2])\n            cube([86 - 2*wall, 66 - 2*wall, 55], center = true);\n    }\n}\n\nmodule vent_slots() {\n    // rear ventilation slots\n    for (i = [-35:8:35]) {\n        translate([0, 33 - wall/2, i])\n            cube([84, wall, 6], center = true);\n    }\n}\n\nmodule front_panel() {\n    // slightly protruding front with display and ports\n    difference() {\n        translate([0, -34 - wall/2, 0])\n            cube([86, wall, 55], center = true);\n        // display recess\n        translate([-25, -34 - wall, 15])\n            cube([30, wall + 0.2, 15], center = true);\n        // two AC outlet holes\n        translate([15, -34 - wall, 0])\n            cylinder(h = wall + 0.2, r = 4.5, center = true);\n        translate([30, -34 - wall, 0])\n            cylinder(h = wall + 0.2, r = 4.5, center = true);\n    }\n}\n\nmodule carry_handles() {\n    // left handle\n    difference() {\n        translate([-43 - wall/2, 0, 25])\n            cube([wall, 40, 10], center = true);\n        translate([-43 - wall/2, 0, 25])\n            cube([wall + 0.2, 30, 6], center = true);\n    }\n    // right handle\n    difference() {\n        translate([43 + wall/2, 0, 25])\n            cube([wall, 40, 10], center = true);\n        translate([43 + wall/2, 0, 25])\n            cube([wall + 0.2, 30, 6], center = true);\n    }\n}\n\nmodule rubber_feet() {\n    // four cylindrical feet\n    for (x = [-30, 30])\n    for (y = [-20, 20])\n        translate([x, y, -27.5 - 2])\n            cylinder(h = 4, r = 5, center = true);\n}\n\nmodule switch() {\n    // top rocker switch\n    translate([0, 20, 27.5 + 1.5])\n        cube([15, 6, 3], center = true);\n}\n\nmodule led_indicator() {\n    // small cylindrical indicator on front\n    translate([-40, -34 - 1.5, 15])\n        cylinder(h = 3, r = 2, center = true);\n}\n\nunion() {\n    main_body();\n    vent_slots();\n    front_panel();\n    carry_handles();\n    rubber_feet();\n    switch();\n    led_indicator();\n}",
    "renders": true
  },
  {
    "office_supply": "converters",
    "openscad_code": "// OpenSCAD Converter Furniture – A multi-socket power strip / extension block\n// Overall footprint 120 × 60 × 35 mm, wall-thickness 2 mm, printable without supports\n\n$fn = 36;\n\n// --------------------------------------------------\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        rounded_box([120, 60, 35], 4);\n\n        // Hollow cavity (leave 2 mm walls)\n        translate([2, 2, 2])\n            rounded_box([120-4, 60-4, 35-2], 2);\n    }\n}\n\n// Generic rounded box helper\nmodule rounded_box(size, r) {\n    translate([r, r, 0])\n        minkowski() {\n            cube([size.x-2*r, size.y-2*r, size.z]);\n            cylinder(h=0.01, r=r, center=true);\n        }\n}\n\n// --------------------------------------------------\n// Socket cut-outs (UK-style rectangular face, 2 mm inset)\nsocket_width  = 13;\nsocket_height = 17;\n\nmodule socket() {\n    // Outer face recess\n    translate([0, 0, -1])\n        cube([socket_width+4, socket_height+4, 2], center=true);\n    \n    // Inner rectangular hole\n    cube([socket_width, socket_height, 5], center=true);\n}\n\n// Place 4 sockets in a row\nmodule sockets() {\n    for (x = [-40, -15, 10, 35])\n        translate([x, 0, 0])\n            rotate([0, 0, 0])\n                socket();\n}\n\n// --------------------------------------------------\n// Cable entry grommet\nmodule cable_entry() {\n    translate([-60-5, 0, -17.5])\n        rotate([90, 0, 0])\n            cylinder(h=10, r1=6, r2=8); // tapered collar\n    difference() {\n        translate([-60-5, 0, -17.5])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=5);\n        translate([-60-15, 0, -17.5])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=3);\n    }\n}\n\n// --------------------------------------------------\n// Power switch\nmodule switch() {\n    // Recess\n    translate([50, 0, 17.5])\n        cube([12, 18, 5], center=true);\n    \n    // Tactile rocker\n    translate([50, 0, 17.5+2])\n        cube([8, 14, 3], center=true);\n}\n\n// --------------------------------------------------\n// LED indicator\nmodule led() {\n    translate([50, 12, 17.5])\n        cylinder(h=2, r=3);\n}\n\n// --------------------------------------------------\n// Rubber feet (simple cylinders, print separately or built-in)\nmodule feet() {\n    for (p = [[-50, -25], [50, -25], [-50, 25], [50, 25]])\n        translate([p.x, p.y, -18.5])\n            cylinder(h=3, r=5);\n}\n\n// --------------------------------------------------\n// Assembly\nunion() {\n    body();\n    \n    // Cut sockets into top face\n    translate([0, 0, 17.5])\n        rotate([0, 180, 0])\n            sockets();\n    \n    cable_entry();\n    switch();\n    led();\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "hydraulics",
    "openscad_code": "// Office Chair with Hydraulic Lift - Realistic Style, Medium Complexity\n// Overall size: ~80mm width x ~90mm depth x ~110mm height\n\n// Basic parameters\n$fn = 32;\nwall_thickness = 2;\nseat_width = 60;\nseat_depth = 55;\nseat_thickness = 3;\nbackrest_height = 50;\nbackrest_width = 58;\nbackrest_thickness = 3;\narmrest_height = 20;\narmrest_width = 4;\nhydraulic_pole_diameter = 12;\nhydraulic_pole_height = 40;\nbase_radius = 25;\nbase_height = 8;\nwheel_diameter = 8;\nwheel_width = 4;\n\n// Main chair assembly\nmodule office_chair() {\n    // Seat cushion\n    translate([0, 0, hydraulic_pole_height + base_height + seat_thickness/2])\n    rounded_cube([seat_width, seat_depth, seat_thickness], 5);\n    \n    // Backrest\n    translate([0, -seat_depth/2 + backrest_thickness/2, hydraulic_pole_height + base_height + seat_thickness + backrest_height/2 - 10])\n    rotate([10, 0, 0])\n    rounded_cube([backrest_width, backrest_thickness, backrest_height], 3);\n    \n    // Armrests (left and right)\n    for(side = [-1, 1]) {\n        translate([side * (seat_width/2 - armrest_width/2), 0, hydraulic_pole_height + base_height + seat_thickness + armrest_height/2])\n        cube([armrest_width, seat_depth * 0.7, armrest_height], center = true);\n    }\n    \n    // Hydraulic pole (cylinder)\n    color(\"silver\")\n    translate([0, 0, base_height + hydraulic_pole_height/2])\n    cylinder(d = hydraulic_pole_diameter, h = hydraulic_pole_height, center = true);\n    \n    // Star base (5 legs with wheels)\n    color(\"darkgray\")\n    star_base();\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([size[0]/2 - radius, size[1]/2 - radius, size[2]/2 - radius])\n        sphere(r = radius);\n        translate([-size[0]/2 + radius, size[1]/2 - radius, size[2]/2 - radius])\n        sphere(r = radius);\n        translate([size[0]/2 - radius, -size[1]/2 + radius, size[2]/2 - radius])\n        sphere(r = radius);\n        translate([-size[0]/2 + radius, -size[1]/2 + radius, size[2]/2 - radius])\n        sphere(r = radius);\n        translate([size[0]/2 - radius, size[1]/2 - radius, -size[2]/2 + radius])\n        sphere(r = radius);\n        translate([-size[0]/2 + radius, size[1]/2 - radius, -size[2]/2 + radius])\n        sphere(r = radius);\n        translate([size[0]/2 - radius, -size[1]/2 + radius, -size[2]/2 + radius])\n        sphere(r = radius);\n        translate([-size[0]/2 + radius, -size[1]/2 + radius, -size[2]/2 + radius])\n        sphere(r = radius);\n    }\n}\n\n// Star base with 5 legs and wheels\nmodule star_base() {\n    // Central hub\n    cylinder(h = base_height, r1 = base_radius * 0.3, r2 = base_radius * 0.25, center = false);\n    \n    // 5 legs with wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([base_radius * 0.6, 0, base_height/2])\n        cube([base_radius * 0.8, wall_thickness * 1.5, base_height], center = true);\n        \n        // Wheel at end of each leg\n        rotate([0, 0, i * 72])\n        translate([base_radius * 1.2, 0, wheel_diameter/2])\n        rotate([90, 0, 0])\n        cylinder(d = wheel_diameter, h = wheel_width, center = true);\n    }\n}\n\n// Generate the complete chair\noffice_chair();",
    "renders": true
  },
  {
    "office_supply": "pneumatics",
    "openscad_code": "// Pneumatic Office Chair Base with Gas Cylinder\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main dimensions\nbase_diameter = 80;\nbase_height = 8;\ncaster_diameter = 10;\ncaster_height = 12;\nspoke_length = 35;\nspoke_width = 10;\nspoke_height = 5;\ncylinder_diameter = 22;\ncylinder_height = 60;\ncylinder_wall = 2;\npiston_diameter = 18;\npiston_height = 45;\nhandle_length = 25;\nhandle_diameter = 4;\n\nmodule chair_base() {\n    // Central hub\n    difference() {\n        cylinder(h=base_height, d=base_diameter, center=true);\n        cylinder(h=base_height+1, d=base_diameter-10, center=true);\n    }\n    \n    // 5 spokes with casters\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, spoke_length/2, 0])\n        union() {\n            // Spoke\n            cube([spoke_width, spoke_length, spoke_height], center=true);\n            \n            // Caster mount\n            translate([0, spoke_length/2, -caster_height/2])\n            difference() {\n                cylinder(h=caster_height, d=caster_diameter);\n                cylinder(h=caster_height+1, d=caster_diameter-4);\n            }\n            \n            // Caster wheel\n            translate([0, spoke_length/2, -caster_height-2])\n            rotate([90, 0, 0])\n            cylinder(h=caster_diameter, d=caster_height/2, center=true);\n        }\n    }\n}\n\nmodule gas_cylinder() {\n    // Outer cylinder body\n    difference() {\n        cylinder(h=cylinder_height, d=cylinder_diameter);\n        translate([0, 0, cylinder_wall])\n        cylinder(h=cylinder_height+1, d=cylinder_diameter-2*cylinder_wall);\n    }\n    \n    // Top cap\n    translate([0, 0, cylinder_height])\n    cylinder(h=3, d=cylinder_diameter+4);\n    \n    // Bottom mount\n    translate([0, 0, -3])\n    cylinder(h=3, d=20);\n    \n    // Piston rod\n    translate([0, 0, cylinder_height+3])\n    cylinder(h=piston_height, d=piston_diameter);\n    \n    // Piston rod end\n    translate([0, 0, cylinder_height+piston_height])\n    cylinder(h=5, d=piston_diameter+4);\n    \n    // Control lever\n    translate([cylinder_diameter/2, 0, cylinder_height-5])\n    rotate([90, 0, 90])\n    cylinder(h=handle_length, d=handle_diameter);\n    \n    // Lever grip\n    translate([cylinder_diameter/2, 0, cylinder_height-5])\n    rotate([90, 0, 90])\n    translate([handle_length-3, 0, 0])\n    sphere(d=handle_diameter+2);\n}\n\n// Assembly\ntranslate([0, 0, base_height/2])\nchair_base();\n\ntranslate([0, 0, base_height])\ngas_cylinder();",
    "renders": true
  },
  {
    "office_supply": "gaskets",
    "openscad_code": "// Gaskets Office Chair - Medium Complexity Realistic Style\n// Dimensions: ~120mm width x ~120mm depth x ~110mm height\n\nmodule chair_base() {\n    // Central hub\n    difference() {\n        cylinder(h=15, d=30, $fn=30);\n        translate([0, 0, 5]) cylinder(h=10, d=20, $fn=30);\n    }\n    \n    // 5-star base legs\n    for (i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 0, 7.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=50, d=8, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Wheels\n    for (i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 45, 7.5]) {\n                sphere(d=12, $fn=16);\n            }\n        }\n    }\n}\n\nmodule gas_cylinder() {\n    // Outer cylinder\n    cylinder(h=50, d=14, $fn=24);\n    \n    // Inner cylinder\n    translate([0, 0, 50]) {\n        cylinder(h=30, d=10, $fn=24);\n    }\n}\n\nmodule seat() {\n    // Main seat cushion\n    translate([0, 0, 80]) {\n        // Seat base\n        difference() {\n            cube([120, 120, 15], center=true);\n            translate([0, 0, -7.5]) cube([110, 110, 15], center=true);\n        }\n        \n        // Seat cushion top\n        translate([0, 0, 7.5]) {\n            scale([1, 1, 0.3]) {\n                difference() {\n                    cube([110, 110, 15], center=true);\n                    translate([0, 0, -7.5]) cube([100, 100, 15], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    // Backrest post\n    translate([0, 50, 95]) {\n        cube([8, 8, 70], center=true);\n    }\n    \n    // Backrest frame\n    translate([0, 50, 125]) {\n        // Frame outline\n        difference() {\n            cube([80, 8, 60], center=true);\n            translate([0, 0, 0]) cube([70, 12, 50], center=true);\n        }\n        \n        // Horizontal support bars\n        for (i = [1:2]) {\n            translate([0, 0, -20 + i*20]) {\n                cube([70, 6, 4], center=true);\n            }\n        }\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-50, 0, 95]) {\n        // Vertical support\n        cube([6, 6, 30], center=true);\n        \n        // Horizontal rest\n        translate([0, 15, 15]) {\n            cube([30, 6, 6], center=true);\n        }\n    }\n    \n    // Right armrest\n    translate([50, 0, 95]) {\n        // Vertical support\n        cube([6, 6, 30], center=true);\n        \n        // Horizontal rest\n        translate([0, 15, 15]) {\n            cube([30, 6, 6], center=true);\n        }\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_base();\n    translate([0, 0, 15]) gas_cylinder();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "seals",
    "openscad_code": "// OpenSCAD – Seals Office Chair (medium-complexity, realistic style)\n// Approx. 135 mm tall, all walls ≥2 mm, no overhangs >45°\n\n// ---------- PARAMETERS ----------\nseat_d        = 50;     // seat diameter\nseat_h        = 4;      // seat cushion thickness\nback_h        = 60;     // total back-rest height\nback_w        = 45;     // back-rest width\nback_t        = 3;      // back-rest thickness\narm_w         = 4;      // arm-rest width\narm_l         = 22;     // arm-rest length\narm_h         = 12;     // arm-rest height above seat\nbase_d        = 55;     // 5-star base diameter\ncyl_r         = 7;      // gas-lift cylinder radius\ncyl_h         = 60;     // gas-lift height\nwheel_r       = 6;      // wheel radius\nwall          = 2;      // minimal wall thickness\n\n// ---------- MODULES ----------\nmodule seatCushion() {\n    difference() {\n        cylinder(h = seat_h, d = seat_d, $fn = 50);\n        translate([0, 0, -0.1])\n            cylinder(h = seat_h + 0.2, d = seat_d - wall*2, $fn = 50);\n    }\n}\n\nmodule backRest() {\n    difference() {\n        // main back panel\n        translate([0, 0, back_h/2])\n            cube([back_w, back_t, back_h], center = true);\n        // lumbar cut-out\n        translate([0, back_t/2 + 0.1, back_h*0.35])\n            cube([back_w*0.45, back_t + 0.2, back_h*0.3], center = true);\n    }\n}\n\nmodule armRest(side) {   // side = 1 or -1\n    translate([side*(seat_d/2 - arm_w/2 - 2), 0, seat_h + arm_h/2])\n        cube([arm_w, arm_l, arm_h], center = true);\n}\n\nmodule gasLift() {\n    difference() {\n        cylinder(h = cyl_h, r = cyl_r, $fn = 30);\n        translate([0, 0, -0.1])\n            cylinder(h = cyl_h + 0.2, r = cyl_r - wall, $fn = 30);\n    }\n}\n\nmodule wheel() {\n    rotate([90, 0, 0])\n        cylinder(h = wheel_r*2, r = wheel_r/1.5, $fn = 20);\n}\n\nmodule starBase() {\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            // spoke\n            hull() {\n                translate([0, 0, -cyl_h])\n                    cylinder(h = 0.1, r = cyl_r, $fn = 20);\n                translate([base_d/2 - wheel_r, 0, -cyl_h])\n                    cylinder(h = 0.1, r = wheel_r/1.5, $fn = 20);\n            }\n            // wheel at end\n            translate([base_d/2 - wheel_r, 0, -cyl_h])\n                wheel();\n        }\n    }\n    // central hub\n    difference() {\n        cylinder(h = wall*3, r = cyl_r*1.5, $fn = 30);\n        translate([0, 0, -0.1])\n            cylinder(h = wall*3 + 0.2, r = cyl_r, $fn = 30);\n    }\n}\n\n// ---------- ASSEMBLY ----------\nunion() {\n    // Seat\n    translate([0, 0, 0])\n        seatCushion();\n\n    // Back-rest uprights (two posts)\n    translate([-seat_d/2 + wall*1.5, back_t/2, seat_h + back_h/2 - 2])\n        cube([wall*3, back_t, back_h - 4]);\n    translate([ seat_d/2 - wall*4.5, back_t/2, seat_h + back_h/2 - 2])\n        cube([wall*3, back_t, back_h - 4]);\n\n    // Back-rest panel\n    translate([0, back_t/2 + wall, seat_h + back_h - 2])\n        backRest();\n\n    // Arm-rests\n    armRest( 1);\n    armRest(-1);\n\n    // Gas-lift cylinder\n    translate([0, 0, seat_h])\n        gasLift();\n\n    // 5-star base with wheels\n    translate([0, 0, seat_h + cyl_h])\n        starBase();\n}",
    "renders": true
  },
  {
    "office_supply": "bearings",
    "openscad_code": "$fs = 0.4;\n$fa = 2;\n\n// Overall scale factor to fit 3D printer beds\nscale_factor = 1.5;\n\n// Main dimensions in mm\nbearing_dia = 60 * scale_factor;\nbearing_height = 25 * scale_factor;\nball_dia = 8 * scale_factor;\nball_count = 12;\nwall_thickness = 2 * scale_factor;\n\n// Pedestal base dimensions\npedestal_dia = 80 * scale_factor;\npedestal_height = 8 * scale_factor;\n\n// Furniture-style legs\nleg_height = 100 * scale_factor;\nleg_width = 8 * scale_factor;\n\n// Central shaft hole\nshaft_dia = 12 * scale_factor;\n\n// Create the furniture-style bearing unit\nmodule furniture_bearing() {\n    // Pedestal base with chamfered edge\n    difference() {\n        cylinder(h=pedestal_height, d=pedestal_dia, center=false);\n        translate([0, 0, -1])\n            cylinder(h=pedestal_height+2, d=pedestal_dia-4*wall_thickness, center=false);\n    }\n    \n    // Main bearing outer ring\n    translate([0, 0, pedestal_height])\n    difference() {\n        cylinder(h=bearing_height, d=bearing_dia, center=false);\n        // Inner cavity for balls\n        translate([0, 0, wall_thickness])\n            cylinder(h=bearing_height-2*wall_thickness, d=bearing_dia-2*wall_thickness, center=false);\n    }\n    \n    // Inner bearing ring\n    translate([0, 0, pedestal_height])\n    difference() {\n        cylinder(h=bearing_height, d=bearing_dia-4*wall_thickness, center=false);\n        // Central shaft hole\n        translate([0, 0, -1])\n            cylinder(h=bearing_height+2, d=shaft_dia, center=false);\n    }\n    \n    // Bearing balls in raceway\n    raceway_radius = (bearing_dia - 2*wall_thickness - ball_dia) / 2;\n    for(i = [0:ball_count-1]) {\n        rotate([0, 0, i*360/ball_count])\n        translate([raceway_radius, 0, pedestal_height + bearing_height/2])\n        sphere(d=ball_dia);\n    }\n    \n    // Furniture-style legs\n    leg_positions = [\n        [1, 0, 0],\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, -1, 0]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0]*(pedestal_dia/2 - leg_width/2), \n                   pos[1]*(pedestal_dia/2 - leg_width/2), \n                   0])\n        rotate([90, 0, atan2(pos[1], pos[0])])\n        cylinder(h=leg_height, d=leg_width, center=false);\n    }\n    \n    // Reinforcement struts between legs\n    strut_height = 5 * scale_factor;\n    for(pos = leg_positions) {\n        translate([pos[0]*(pedestal_dia/2 - leg_width), \n                   pos[1]*(pedestal_dia/2 - leg_width), \n                   leg_height - strut_height])\n        rotate([0, 0, atan2(pos[1], pos[0])])\n        cube([leg_width*1.5, pedestal_dia/2 - leg_width, strut_height]);\n    }\n    \n    // Top mounting flange\n    translate([0, 0, pedestal_height + bearing_height])\n    difference() {\n        cylinder(h=8*scale_factor, d=bearing_dia + 20*scale_factor, center=false);\n        translate([0, 0, -1])\n            cylinder(h=10*scale_factor, d=bearing_dia, center=false);\n    }\n    \n    // Mounting holes\n    hole_radius = 4 * scale_factor;\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([bearing_dia/2 + 8*scale_factor, 0, pedestal_height + bearing_height + 4*scale_factor])\n        cylinder(h=10*scale_factor, d=hole_radius, center=false);\n    }\n}\n\n// Render the furniture bearing\nfurniture_bearing();",
    "renders": true
  },
  {
    "office_supply": "pistons",
    "openscad_code": "// Piston-inspired office stool in realistic style\n// Medium complexity 3D printable model\n\n// Parameters\nseat_d = 38;           // Seat diameter\nseat_h = 6;            // Seat thickness\npiston_d = 30;         // Main piston diameter\npiston_h = 25;         // Piston height\nrod_d = 12;            // Connecting rod diameter\nbase_d = 45;           // Base diameter\nbase_h = 8;            // Base thickness\nleg_h = 80;            // Leg height\nwall_t = 2;            // Wall thickness for 3D printing\n$fn = 64;              // Circle resolution\n\n// Main assembly\nunion() {\n    // Seat cushion\n    translate([0, 0, leg_h + piston_h + seat_h/2]) {\n        difference() {\n            cylinder(d = seat_d, h = seat_h);\n            translate([0, 0, -1]) \n                cylinder(d = seat_d - wall_t*2, h = seat_h + 2);\n        }\n    }\n    \n    // Piston cylinder\n    translate([0, 0, leg_h]) {\n        difference() {\n            cylinder(d = piston_d, h = piston_h);\n            // Inner cavity\n            translate([0, 0, wall_t])\n                cylinder(d = piston_d - wall_t*2, h = piston_h - wall_t);\n        }\n        \n        // Piston rod\n        translate([0, 0, -rod_d/2]) {\n            cylinder(d = rod_d, h = piston_h + rod_d);\n        }\n    }\n    \n    // Base structure\n    translate([0, 0, base_h/2]) {\n        difference() {\n            cylinder(d = base_d, h = base_h);\n            // Base cavity\n            translate([0, 0, wall_t])\n                cylinder(d = base_d - wall_t*2, h = base_h);\n        }\n    }\n    \n    // Support legs\n    module support_leg() {\n        difference() {\n            cube([wall_t*2, wall_t*4, leg_h - base_h], center = true);\n            translate([0, 0, -(leg_h - base_h)/2 - 1])\n                cube([wall_t*2 + 2, wall_t*4 + 2, 2], center = true);\n        }\n    }\n    \n    // Three support legs\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([piston_d/2 - wall_t, 0, leg_h/2 + base_h/2])\n                support_leg();\n    }\n    \n    // Adjustment mechanism detail\n    translate([0, 0, leg_h - 5]) {\n        difference() {\n            cylinder(d = piston_d + 8, h = 10);\n            cylinder(d = piston_d + 4, h = 10);\n        }\n    }\n    \n    // Base grip ring\n    translate([0, 0, base_h - 2]) {\n        difference() {\n            cylinder(d = base_d + 4, h = 4);\n            cylinder(d = base_d + 2, h = 4);\n        }\n    }\n    \n    // Air vent details on piston\n    for(i = [0:45:359]) {\n        rotate([0, 0, i])\n            translate([piston_d/2 - 1, 0, leg_h + piston_h/2])\n                cylinder(d = 3, h = 2);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "crankshafts",
    "openscad_code": "// Crankshafts Office Furniture - Realistic Style, Medium Complexity\n// A functional desk organizer with crankshaft-inspired design elements\n\n// General parameters\nwall_thickness = 2;\nscale_factor = 0.8;\n\n// Main crankshaft structure\nmodule crankshaft_base() {\n    // Central crankshaft rod\n    rotate([90, 0, 0])\n    cylinder(h=80*scale_factor, r=4*scale_factor, $fn=20);\n    \n    // Main crank throws (offset journals)\n    translate([0, 15*scale_factor, 0])\n    rotate([90, 0, 0])\n    cylinder(h=12*scale_factor, r=8*scale_factor, $fn=20);\n    \n    translate([0, -15*scale_factor, 0])\n    rotate([90, 0, 0])\n    cylinder(h=12*scale_factor, r=8*scale_factor, $fn=20);\n    \n    // Counterweights\n    translate([0, 15*scale_factor, 0])\n    rotate([90, 0, 0])\n    scale([1, 1.5, 1])\n    cylinder(h=6*scale_factor, r=10*scale_factor, $fn=20);\n    \n    translate([0, -15*scale_factor, 0])\n    rotate([90, 0, 0])\n    scale([1, 1.5, 1])\n    cylinder(h=6*scale_factor, r=10*scale_factor, $fn=20);\n}\n\n// Pen holder section inspired by crankshaft\nmodule pen_holder() {\n    difference() {\n        // Main holder body\n        translate([0, 0, 20*scale_factor])\n        cube([50*scale_factor, 25*scale_factor, 30*scale_factor], center=true);\n        \n        // Hollow out for pens\n        translate([0, 0, 35*scale_factor])\n        cube([45*scale_factor, 20*scale_factor, 25*scale_factor], center=true);\n        \n        // Add crankshaft grooves\n        for(i = [-1, 1]) {\n            translate([i*15*scale_factor, 0, 20*scale_factor])\n            rotate([0, 90, 0])\n            cylinder(h=25*scale_factor, r=3*scale_factor, $fn=16);\n        }\n    }\n}\n\n// Desk organizer compartment\nmodule organizer_compartment() {\n    difference() {\n        // Main compartment\n        translate([25*scale_factor, 0, 10*scale_factor])\n        cube([60*scale_factor, 40*scale_factor, 20*scale_factor], center=true);\n        \n        // Hollow interior\n        translate([25*scale_factor, 0, 15*scale_factor])\n        cube([54*scale_factor, 34*scale_factor, 15*scale_factor], center=true);\n        \n        // Crankshaft detail cutouts\n        for(i = [0:2]) {\n            translate([i*15*scale_factor + 10*scale_factor, 0, 10*scale_factor])\n            rotate([0, 90, 0])\n            cylinder(h=40*scale_factor, r=4*scale_factor, $fn=16);\n        }\n    }\n}\n\n// Support legs with crankshaft styling\nmodule support_legs() {\n    for(pos = [[-20, -20], [20, -20], [20, 20], [-20, 20]]) {\n        translate([pos[0]*scale_factor, pos[1]*scale_factor, 0])\n        difference() {\n            // Main leg post\n            cylinder(h=20*scale_factor, r=3*scale_factor, $fn=12);\n            \n            // Crankshaft detail ring\n            translate([0, 0, 10*scale_factor])\n            cylinder(h=2*scale_factor, r=5*scale_factor, $fn=12);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base crankshaft structure\n    crankshaft_base();\n    \n    // Pen holder section\n    pen_holder();\n    \n    // Organizer compartment\n    organizer_compartment();\n    \n    // Support legs\n    support_legs();\n    \n    // Additional crankshaft caps\n    translate([0, 0, 40*scale_factor])\n    rotate([90, 0, 0])\n    cylinder(h=8*scale_factor, r=5*scale_factor, $fn=20);\n    \n    translate([0, 0, -40*scale_factor])\n    rotate([90, 0, 0])\n    cylinder(h=8*scale_factor, r=5*scale_factor, $fn=20);\n}",
    "renders": true
  },
  {
    "office_supply": "camshafts",
    "openscad_code": "// Camshafts Desktop Organizer - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 80mm x 35mm (L x W x H)\n\n$fn = 50;\nwall_thickness = 2;\n\n// Main module\nmodule camshafts_organizer() {\n    difference() {\n        // Main body\n        union() {\n            // Base platform\n            base();\n            \n            // Camshaft lobes as pen holders\n            cam_lobes();\n            \n            // Support structure\n            supports();\n            \n            // End caps\n            end_caps();\n        }\n        \n        // Hollow out the interior\n        interior_cavity();\n    }\n    \n    // Add decorative details\n    decorative_details();\n}\n\n// Base platform with realistic proportions\nmodule base() {\n    // Main base block\n    translate([60, 40, 17.5])\n        cube([120, 80, 35], center=true);\n    \n    // Rounded edges for realistic appearance\n    translate([60, 40, 17.5])\n        scale([1, 1, 0.8])\n            sphere(40);\n}\n\n// Camshaft lobes as functional compartments\nmodule cam_lobes() {\n    // Parameters for lobes\n    lobe_height = 25;\n    lobe_radius = 12;\n    shaft_radius = 6;\n    \n    // Generate lobes along the shaft\n    for(i = [0:6]) {\n        x_pos = 20 + i * 15;\n        \n        // Central shaft segment\n        translate([x_pos, 40, 35])\n            cylinder(h=lobe_height, r=shaft_radius, center=false);\n        \n        // Cam lobe (oval shape)\n        rotate([0, 0, i * 30])\n            translate([x_pos, 40, 35 + lobe_height/2])\n                scale([1.5, 1, 1])\n                    cylinder(h=wall_thickness, r=lobe_radius, center=true);\n        \n        // Pen hole in each lobe\n        translate([x_pos, 40, 35 + lobe_height + 2])\n            cylinder(h=20, r=4, center=false);\n    }\n}\n\n// Structural supports\nmodule supports() {\n    // Side supports\n    for(side = [-1, 1]) {\n        translate([side * 50, 40, 17.5])\n            rotate([90, 0, 0])\n                cylinder(h=30, r=wall_thickness*1.5, center=true);\n    }\n    \n    // Cross bracing\n    for(y = [20, 60]) {\n        translate([60, y, 17.5])\n            rotate([0, 90, 0])\n                cylinder(h=100, r=wall_thickness, center=true);\n    }\n}\n\n// End caps with realistic details\nmodule end_caps() {\n    for(end = [-1, 1]) {\n        // Main cap\n        translate([60 + end * 60, 40, 17.5])\n            scale([0.3, 1.2, 1])\n                sphere(40);\n        \n        // Mounting flange\n        translate([60 + end * 65, 40, 17.5])\n            cylinder(h=wall_thickness*2, r=30, center=true);\n        \n        // Bolt holes\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle])\n                translate([60 + end * 68, 40 + 20, 17.5])\n                    cylinder(h=wall_thickness*3, r=3, center=true);\n        }\n    }\n}\n\n// Hollow interior for 3D printing\nmodule interior_cavity() {\n    // Main cavity\n    translate([60, 40, 17.5])\n        cube([116, 76, 31], center=true);\n    \n    // Tapered bottom\n    translate([60, 40, 5])\n        scale([1, 1, 0.3])\n            sphere(35);\n}\n\n// Decorative and functional details\nmodule decorative_details() {\n    // Surface texture lines\n    for(x = [10:10:110]) {\n        translate([x, 40, 35])\n            cube([0.5, 80, 0.5], center=true);\n    }\n    \n    // Part number label area\n    translate([60, 75, 35.5])\n        cube([40, 10, wall_thickness], center=true);\n    \n    // Grip ridges on sides\n    for(z = [25:5:45]) {\n        translate([5, 40, z])\n            cube([wall_thickness*2, 70, 2], center=true);\n        \n        translate([115, 40, z])\n            cube([wall_thickness*2, 70, 2], center=true);\n    }\n}\n\n// Generate the model\ncamshafts_organizer();",
    "renders": true
  },
  {
    "office_supply": "manifolds",
    "openscad_code": "// Modern Office Chair with Wheels - Medium Complexity\n// Dimensions: 120mm total height, 100mm width, 100mm depth\n\n// Main seat module\nmodule seat() {\n    // Seat cushion - 2mm walls with hollow center\n    difference() {\n        // Main cushion shape\n        translate([0, 0, 35]) \n            cube([60, 60, 8], center=true);\n        \n        // Hollow center for 3D printing\n        translate([0, 0, 37]) \n            cube([56, 56, 4], center=true);\n    }\n    \n    // Seat support structure\n    translate([0, 0, 31]) \n        cube([64, 64, 4], center=true);\n}\n\n// Backrest module\nmodule backrest() {\n    // Main backrest panel\n    difference() {\n        // Curved backrest using multiple cubes\n        for(i=[0:4]) {\n            translate([0, 0, 55+i*2]) \n                cube([50, 45, 2], center=true);\n        }\n        \n        // Hollow center\n        for(i=[0:4]) {\n            translate([0, 0, 55+i*2]) \n                cube([46, 41, 2], center=true);\n        }\n    }\n    \n    // Backrest support bar\n    translate([0, -15, 55]) \n        cube([6, 30, 30], center=true);\n}\n\n// Armrest module\nmodule armrest(side) {\n    // Support post\n    translate([side*25, 0, 43]) \n        cylinder(h=15, r=3, center=true);\n    \n    // Armrest pad\n    translate([side*25, 0, 50]) \n        cube([30, 8, 4], center=true);\n    \n    // Support bracket\n    translate([side*25, -20, 43]) \n        cube([4, 20, 15], center=true);\n}\n\n// Base module with 5 wheels\nmodule base() {\n    // Central pole\n    translate([0, 0, 15]) \n        cylinder(h=30, r=5, center=true);\n    \n    // Star base legs\n    for(angle=[0:72:360]) {\n        rotate([0, 0, angle]) \n            translate([0, 25, 5]) \n                cube([10, 50, 10], center=true);\n    }\n    \n    // Wheels\n    for(angle=[0:72:360]) {\n        rotate([0, 0, angle]) \n            translate([0, 50, 2.5]) \n                sphere(r=5);\n    }\n}\n\n// Gas lift mechanism\nmodule gas_lift() {\n    // Outer cylinder\n    translate([0, 0, 25]) \n        cylinder(h=20, r=6, center=true);\n    \n    // Inner cylinder\n    translate([0, 0, 15]) \n        cylinder(h=20, r=4, center=true);\n}\n\n// Assembly\nunion() {\n    // Base components\n    base();\n    gas_lift();\n    \n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);  // Right\n    armrest(-1); // Left\n    \n    // Additional support bars\n    translate([20, 0, 35]) \n        cylinder(h=20, r=2, center=true);\n    translate([-20, 0, 35]) \n        cylinder(h=20, r=2, center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "carburetors",
    "openscad_code": "// Carburetor Desktop Organizer - Realistic Style\n// Medium complexity OpenSCAD model with furniture characteristics\n\n$fn = 32;\n\n// Main dimensions (mm)\nbody_width = 80;\nbody_depth = 60;\nbody_height = 45;\nwall_thickness = 2;\n\n// Module for main carburetor body\nmodule carb_body() {\n    difference() {\n        // Main rectangular body\n        cube([body_width, body_depth, body_height]);\n        \n        // Hollow out center\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([body_width-2*wall_thickness, body_depth-2*wall_thickness, body_height-wall_thickness]);\n        \n        // Top intake opening\n        translate([body_width/2, body_depth/2, body_height])\n            cylinder(h=wall_thickness+1, r1=15, r2=12);\n    }\n}\n\n// Module for float bowl (storage compartment)\nmodule float_bowl() {\n    translate([body_width/2, body_depth+5, 8])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=25, r=22);\n        translate([0, 0, wall_thickness])\n            cylinder(h=25, r=20);\n    }\n}\n\n// Module for mounting posts (furniture legs)\nmodule mounting_posts() {\n    for(x=[-25, 25]) {\n        for(y=[-20, 20]) {\n            translate([body_width/2 + x, body_depth/2 + y, -8])\n                cylinder(h=10, r=4);\n        }\n    }\n}\n\n// Module for throttle valve (adjustable divider)\nmodule throttle_valve() {\n    translate([body_width/2, body_depth/2, body_height/2])\n    rotate([0, 0, 45])\n    difference() {\n        cube([body_width-4*wall_thickness, 2, body_height-4*wall_thickness], center=true);\n        cylinder(h=3, r=1.5, center=true);\n    }\n}\n\n// Module for venturi tubes (pen holders)\nmodule venturi_tubes() {\n    for(i=[0:1]) {\n        translate([15 + i*50, body_depth/2, 0])\n        difference() {\n            cylinder(h=body_height, r=8);\n            translate([0, 0, wall_thickness])\n                cylinder(h=body_height, r=6);\n        }\n    }\n}\n\n// Module for linkage bracket (paper clip holder)\nmodule linkage_bracket() {\n    translate([body_width-15, body_depth-10, body_height-10])\n    difference() {\n        cube([15, 10, 10]);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([15-2*wall_thickness, 10-2*wall_thickness, 10-wall_thickness]);\n    }\n}\n\n// Module for air filter base (business card holder)\nmodule air_filter_base() {\n    translate([5, -5, body_height-5])\n    difference() {\n        cube([body_width-10, 5, 5]);\n        translate([wall_thickness, 0, wall_thickness])\n            cube([body_width-10-2*wall_thickness, 3, 5-wall_thickness]);\n    }\n}\n\n// Assembly\nunion() {\n    carb_body();\n    float_bowl();\n    mounting_posts();\n    throttle_valve();\n    venturi_tubes();\n    linkage_bracket();\n    air_filter_base();\n}",
    "renders": true
  },
  {
    "office_supply": "injectors",
    "openscad_code": "// OpenSCAD Injector-Style Office Desk Organizer\n// Realistic style, medium complexity\n// Wall thickness: 2 mm, printable without supports\n\n// Overall dimensions (mm)\noverall_w = 120;\noverall_d = 80;\noverall_h = 70;\n\n// Wall thickness\nwall = 2;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer block\n        cube([overall_w, overall_d, overall_h], center = true);\n\n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([overall_w - 2*wall, overall_d - 2*wall, overall_h - wall], center = true);\n    }\n}\n\n// Injector-style vertical dividers\nmodule dividers() {\n    // Parameters\n    n_div = 3;\n    div_w = 3;\n    spacing = (overall_w - 2*wall) / (n_div + 1);\n    \n    for (i = [1:n_div]) {\n        translate([-overall_w/2 + wall + i*spacing - div_w/2, 0, 0])\n            cube([div_w, overall_d - 2*wall, overall_h - wall]);\n    }\n}\n\n// Pen tray insert\nmodule pen_tray() {\n    tray_w = 35;\n    tray_d = overall_d - 4*wall;\n    tray_h = 25;\n    \n    translate([overall_w/2 - wall - tray_w/2, 0, overall_h/2 - tray_h/2 - wall]) {\n        difference() {\n            // Tray shell\n            cube([tray_w, tray_d, tray_h], center = true);\n            // Hollow inside\n            translate([0, 0, wall/2])\n                cube([tray_w - 2*wall, tray_d - 2*wall, tray_h - wall], center = true);\n        }\n    }\n}\n\n// Cable pass-through hole (back side)\nmodule cable_hole() {\n    hole_r = 10;\n    hole_h = 20;\n    \n    translate([0, overall_d/2, overall_h/2 - hole_h/2 - wall])\n        rotate([90, 0, 0])\n            cylinder(h = overall_d, r = hole_r, center = true);\n}\n\n// Rubber feet (small cylinders at bottom corners)\nmodule feet() {\n    foot_r = 4;\n    foot_h = 2;\n    \n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*(overall_w/2 - foot_r - 5), \n                      y*(overall_d/2 - foot_r - 5), \n                      -overall_h/2 + foot_h/2])\n                cylinder(h = foot_h, r = foot_r);\n        }\n    }\n}\n\n// Label holder rail (front top edge)\nmodule label_rail() {\n    rail_w = overall_w - 20;\n    rail_h = 5;\n    rail_d = 6;\n    \n    translate([0, overall_d/2 - rail_d/2, overall_h/2 - rail_h/2])\n        cube([rail_w, rail_d, rail_h], center = true);\n}\n\n// Assemble all parts\nunion() {\n    body();\n    dividers();\n    pen_tray();\n    feet();\n    label_rail();\n}\n\n// Remove cable hole\ndifference() {\n    children();\n    cable_hole();\n}",
    "renders": true
  },
  {
    "office_supply": "pumps",
    "openscad_code": "// Medium-complexity realistic pumps (high-heel shoe) furniture item\n// Overall height ~110 mm, printable without supports\n\n$fn = 40;               // Smooth curves\nwall = 2;               // Uniform wall thickness for FDM printing\n\nmodule sole_profile() {\n    // Basic sole outline (top view)\n    difference() {\n        hull() {\n            translate([-15, 0, 0]) circle(d = 12);\n            translate([0,  25, 0]) circle(d = 28);\n            translate([10, 48, 0]) circle(d = 22);\n            translate([18, 75, 0]) circle(d = 18);\n            translate([20, 90, 0]) circle(d = 6);\n        }\n        // Remove back tip to create heel seat\n        translate([25, 105, 0]) rotate([0,0,-20]) square([30, 20], center = true);\n    }\n}\n\nmodule sole_shape(h) {\n    // Extrude sole_profile with slight arch and taper\n    linear_extrude(height = h, scale = [0.9, 0.85], twist = 5)\n        offset(-wall/2) sole_profile();\n}\n\nmodule heel() {\n    // Stiletto heel with pin for socket\n    union() {\n        // Main heel shaft\n        translate([0, 0, 0])\n            cylinder(h = 55, d1 = 12, d2 = 6);\n        // Foot plate\n        translate([0, 0, 55])\n            cylinder(h = 4, d = 20);\n        // Pin for socket\n        translate([0, 0, 59])\n            cylinder(h = 8, d = 4.9);\n    }\n}\n\nmodule heel_socket() {\n    // Socket cavity in sole for heel pin\n    translate([0, 0, 0])\n        cylinder(h = 10, d = 5.1);\n}\n\nmodule upper_shell() {\n    // Upper part of the shoe\n    hull() {\n        // Toe box\n        translate([-12, 20, 10])\n            sphere(d = 28);\n        // Sides\n        translate([-20, 45, 15])\n            sphere(d = 20);\n        translate([20, 45, 15])\n            sphere(d = 20);\n        // Heel counter\n        translate([0, 88, 25])\n            sphere(d = 22);\n    }\n}\n\nmodule cutaway() {\n    // Remove inside volume for hollow shell\n    scale([0.85, 0.9, 0.8])\n        translate([0, 0, -5])\n            upper_shell();\n}\n\nmodule top_edge() {\n    // Decorative welt around opening\n    difference() {\n        offset(2) projection() upper_shell();\n        projection() upper_shell();\n    }\n}\n\nmodule shoe() {\n    // Assemble complete shoe\n    union() {\n        // Sole\n        sole_shape(12);\n        \n        // Upper\n        difference() {\n            // Outer shell\n            translate([0, 0, 12]) upper_shell();\n            // Inner cavity\n            translate([0, 0, 12]) cutaway();\n        }\n        \n        // Heel\n        translate([0, 85, 0]) heel();\n    }\n    \n    // Remove socket cavity\n    translate([0, 85, 0]) heel_socket();\n    \n    // Decorative welt\n    linear_extrude(height = 2)\n        translate([0, 0, 12]) top_edge();\n}\n\n// Render the shoe\nshoe();",
    "renders": true
  },
  {
    "office_supply": "compressors",
    "openscad_code": "// Office Air Compressor Furniture Item\n// Dimensions: 120 x 60 x 80 mm (realistic proportions for desktop compressor)\n\n$fn = 50;\n\n// Main parameters\nwall_thickness = 2;\nmain_width = 120;\nmain_depth = 60;\nmain_height = 80;\ntank_diameter = 30;\ntank_length = 100;\n\n// Main compressor body\nmodule compressor_body() {\n    // Base frame\n    translate([0, 0, wall_thickness]) {\n        difference() {\n            cube([main_width, main_depth, main_height - 10], center = true);\n            cube([main_width - 2*wall_thickness, main_depth - 2*wall_thickness, main_height - 10], center = true);\n        }\n    }\n    \n    // Front panel with controls\n    translate([main_width/2 - wall_thickness, 0, main_height/2]) {\n        cube([wall_thickness, main_depth - 20, main_height - 20], center = true);\n    }\n}\n\n// Air tank cylinders\nmodule air_tanks() {\n    // Left tank\n    translate([-main_width/4, 0, main_height/2 - 5]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = tank_length, d = tank_diameter, center = true);\n                cylinder(h = tank_length + 2, d = tank_diameter - 2*wall_thickness, center = true);\n            }\n        }\n    }\n    \n    // Right tank\n    translate([main_width/4, 0, main_height/2 - 5]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = tank_length, d = tank_diameter, center = true);\n                cylinder(h = tank_length + 2, d = tank_diameter - 2*wall_thickness, center = true);\n            }\n        }\n    }\n}\n\n// Pressure gauge\nmodule pressure_gauge() {\n    translate([main_width/2 - 3, -main_depth/4, main_height - 15]) {\n        cylinder(h = 8, d1 = 12, d2 = 12, center = false);\n        translate([0, 0, 8]) {\n            cylinder(h = 2, d1 = 8, d2 = 8, center = false);\n        }\n    }\n}\n\n// Control knobs\nmodule control_knobs() {\n    for(i = [0:1]) {\n        translate([main_width/2 - 3, main_depth/4 - i*10, main_height - 20]) {\n            cylinder(h = 8, d = 6, center = false);\n            translate([0, 0, 8]) {\n                cylinder(h = 4, d = 4, center = false);\n            }\n        }\n    }\n}\n\n// Air outlet valve\nmodule air_outlet() {\n    translate([main_width/2 - 3, 0, main_height/2 + 10]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 15, d = 8, center = false);\n            translate([0, 0, 15]) {\n                cylinder(h = 5, d = 10, center = false);\n            }\n        }\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    foot_positions = [\n        [-main_width/2 + 10, -main_depth/2 + 10],\n        [main_width/2 - 10, -main_depth/2 + 10],\n        [-main_width/2 + 10, main_depth/2 - 10],\n        [main_width/2 - 10, main_depth/2 - 10]\n    ];\n    \n    for(pos = foot_positions) {\n        translate([pos[0], pos[1], 0]) {\n            cylinder(h = 3, d = 8, center = false);\n        }\n    }\n}\n\n// Handle for portability\nmodule handle() {\n    translate([0, -main_depth/2 - 5, main_height - 5]) {\n        difference() {\n            cube([main_width - 20, 10, 10], center = true);\n            cube([main_width - 30, 12, 8], center = true);\n        }\n    }\n}\n\n// Cooling vents on sides\nmodule cooling_vents() {\n    for(i = [0:4]) {\n        // Left side vents\n        translate([-main_width/2, -main_depth/2 + 10 + i*8, main_height/2]) {\n            rotate([0, 90, 0]) {\n                cube([2, 30, 4], center = true);\n            }\n        }\n        \n        // Right side vents\n        translate([main_width/2, -main_depth/2 + 10 + i*8, main_height/2]) {\n            rotate([0, 90, 0]) {\n                cube([2, 30, 4], center = true);\n            }\n        }\n    }\n}\n\n// Assemble all parts\nunion() {\n    // Main components\n    compressor_body();\n    air_tanks();\n    \n    // Details and accessories\n    pressure_gauge();\n    control_knobs();\n    air_outlet();\n    handle();\n    \n    // Structural elements\n    rubber_feet();\n    \n    // Cooling features\n    cooling_vents();\n}",
    "renders": true
  },
  {
    "office_supply": "condensers",
    "openscad_code": "// Condenser microphone with desk stand – medium-complexity realistic style\n// Approx. 110 mm tall, 2 mm wall thickness, printable without support\n\nmodule mic_body() {\n    // Main cylindrical capsule housing\n    difference() {\n        cylinder(h = 50, d = 32, $fn = 48);                 // 2 mm walls\n        translate([0, 0, 2])\n            cylinder(h = 46, d = 28, $fn = 48);             // Hollow interior\n    }\n\n    // Front grille – stacked rings to simulate mesh\n    for (z = [0:2:10]) {\n        translate([0, 0, z])\n            cylinder(h = 1.2, d1 = 32, d2 = 31, $fn = 48);\n    }\n\n    // Rear vent ring\n    translate([0, 0, 40])\n        cylinder(h = 8, d = 34, $fn = 48);\n}\n\nmodule mic_mount() {\n    // Shock-mount yoke arms\n    for (ang = [0:120:240]) {\n        rotate([0, 0, ang])\n            translate([20, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, d = 4, $fn = 16);\n    }\n\n    // Central hub\n    difference() {\n        sphere(d = 18, $fn = 32);\n        sphere(d = 14, $fn = 32);\n    }\n}\n\nmodule boom_arm() {\n    // Horizontal boom tube\n    difference() {\n        translate([0, 0, -25])\n            rotate([90, 0, 0])\n                cylinder(h = 70, d = 12, $fn = 32);\n        translate([0, 0, -24])\n            rotate([90, 0, 0])\n                cylinder(h = 70, d = 8, $fn = 32);\n    }\n\n    // Hinge block\n    translate([0, 0, -25])\n        cube([14, 12, 12], center = true);\n}\n\nmodule desk_base() {\n    // Weighted circular base\n    difference() {\n        cylinder(h = 12, d = 100, $fn = 64);\n        translate([0, 0, 2])\n            cylinder(h = 10, d = 96, $fn = 64);\n    }\n\n    // Top plate\n    translate([0, 0, 11])\n        cylinder(h = 2, d = 102, $fn = 64);\n\n    // Vertical mast socket\n    translate([0, 0, 12])\n        rotate([0, 0, 0])\n            cylinder(h = 15, d = 14, $fn = 32);\n}\n\nmodule vertical_mast() {\n    difference() {\n        cylinder(h = 60, d = 14, $fn = 32);\n        translate([0, 0, 3])\n            cylinder(h = 54, d = 10, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    desk_base();\n\n    // Mast\n    translate([0, 0, 12])\n        vertical_mast();\n\n    // Boom hinged to mast top\n    translate([0, 0, 72])\n        rotate([0, 30, 0])\n            boom_arm();\n\n    // Yoke mount at boom end\n    translate([0, -25, 72])\n        rotate([0, 30, 0])\n            mic_mount();\n\n    // Microphone capsule in yoke\n    translate([0, -25, 72])\n        rotate([0, 30, 0])\n            rotate([90, 0, 0])\n                mic_body();\n}",
    "renders": true
  },
  {
    "office_supply": "evaporators",
    "openscad_code": "// Evaporative Cooler Furniture – realistic, medium complexity, 3D-printable\n// Overall size ~80 mm tall; all wall thicknesses ≥2 mm\n\n$fn = 32;\n\n// ---------- PARAMETERS ----------\nbase_w  = 75;      // footprint width\nbase_d  = 50;      // footprint depth\nbase_h  = 12;      // plinth height\nbody_h  = 45;      // main cabinet height\ntop_h   = 18;      // top water tank height\nfan_d   = 38;      // front fan grille diameter\nvent_h  = 8;       // side vent louvre height\nvent_gap= 4;       // spacing between louvres\nwall_t  = 2;       // wall thickness for printability\n\n// ---------- MAIN ASSEMBLY ----------\nmodule evaporator_cooler() {\n    union() {\n        // Base plinth\n        base();\n\n        // Main cabinet\n        translate([0, 0, base_h])\n            body();\n\n        // Top water tank\n        translate([0, 0, base_h + body_h])\n            tank();\n\n        // Front fan grille\n        translate([0, -base_d/2 + wall_t, base_h + body_h/2])\n            rotate([0, 90, 0])\n                fan_grille();\n\n        // Side vents\n        translate([-base_w/2 - 0.1, 0, base_h + body_h/2 - vent_h/2])\n            mirror([1, 0, 0])\n                side_vents();\n    }\n}\n\n// ---------- MODULES ----------\nmodule base() {\n    difference() {\n        // Solid plinth\n        cube([base_w, base_d, base_h], center = true);\n\n        // Hollow inside for weight reduction\n        translate([0, 0, wall_t])\n            cube([base_w - 2*wall_t, base_d - 2*wall_t, base_h], center = true);\n    }\n}\n\nmodule body() {\n    // Main cabinet block\n    difference() {\n        cube([base_w - 6, base_d - 4, body_h], center = true);\n        // Inner cavity\n        translate([0, 0, wall_t])\n            cube([base_w - 6 - 2*wall_t, base_d - 4 - 2*wall_t, body_h], center = true);\n    }\n}\n\nmodule tank() {\n    // Top water reservoir\n    difference() {\n        cube([base_w - 10, base_d - 8, top_h], center = true);\n        // Inner cavity\n        translate([0, 0, wall_t])\n            cube([base_w - 10 - 2*wall_t, base_d - 8 - 2*wall_t, top_h], center = true);\n\n        // Central filler hole\n        translate([0, 0, top_h/2 - wall_t/2])\n            cylinder(h = wall_t + 1, r = 6, center = true);\n    }\n    // Filler cap\n    translate([0, 0, top_h/2 + wall_t])\n        cylinder(h = 3, r = 7, center = true);\n}\n\nmodule fan_grille() {\n    // Outer ring\n    difference() {\n        cylinder(h = wall_t + 1, r = fan_d/2, center = true);\n        cylinder(h = wall_t + 2, r = fan_d/2 - wall_t, center = true);\n    }\n\n    // Radial spokes\n    for (a = [0:30:359]) {\n        rotate([0, 0, a])\n            translate([fan_d/4, 0, 0])\n                cube([fan_d/2 - wall_t, wall_t, wall_t + 1], center = true);\n    }\n}\n\nmodule side_vents() {\n    // Vent frame\n    difference() {\n        cube([wall_t + 1, base_d - 4, body_h - 4], center = true);\n        // Inner cutout\n        translate([0, 0, 0])\n            cube([wall_t + 2, base_d - 4 - 2*wall_t, body_h - 4 - 2*wall_t], center = true);\n    }\n\n    // Horizontal louvres\n    for (z = [-body_h/2 + vent_gap : vent_gap + vent_h : body_h/2 - vent_gap]) {\n        translate([0, 0, z])\n            cube([wall_t + 1, base_d - 4 - 2*wall_t, vent_h], center = true);\n    }\n}\n\n// ---------- RENDER ----------\nevaporator_cooler();",
    "renders": true
  },
  {
    "office_supply": "heaters",
    "openscad_code": "// Electric oil radiator heater (office / home furniture item)\n// Overall size: ≈ 80 x 100 x 180 mm – printable on most FDM printers\n// Wall thickness: 2 mm for all hollow / thin parts\n\n// Parameters\n$fn = 50;                       // Smooth curves\nwall = 2;                       // Uniform wall thickness\n\n// Main radiator body\nmodule body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 90])\n            cube([80, 100, 180], center = true);\n        // Hollow cavity\n        translate([0, 0, 90])\n            cube([80 - 2*wall, 100 - 2*wall, 180 - 2*wall], center = true);\n    }\n}\n\n// Vertical fins (oil-filled columns)\nmodule fins() {\n    for (x = [-30, -20, -10, 0, 10, 20, 30]) {\n        translate([x, 0, 90])\n            difference() {\n                // Each fin\n                cube([6, 96, 176], center = true);\n                // Hollow inside\n                cube([6 - 2*wall, 96 - 2*wall, 176 - 2*wall], center = true);\n            }\n    }\n}\n\n// Top control panel housing\nmodule control_box() {\n    difference() {\n        // Box\n        translate([0, -55, 175])\n            cube([60, 20, 18], center = true);\n        // Hollow\n        translate([0, -55, 175])\n            cube([60 - 2*wall, 20 - 2*wall, 18 - 2*wall], center = true);\n    }\n    // Knobs\n    for (k = [-20, 0, 20]) {\n        translate([k, -55, 175 + 9 + 3])\n            cylinder(h = 6, r = 4);\n    }\n}\n\n// Bottom base with feet\nmodule base() {\n    // Horizontal rail\n    difference() {\n        translate([0, 0, 8])\n            cube([90, 110, 16], center = true);\n        translate([0, 0, 8])\n            cube([90 - 2*wall, 110 - 2*wall, 16 - 2*wall], center = true);\n    }\n    // Four feet\n    for (p = [[-35, -45], [35, -45], [-35, 45], [35, 45]]) {\n        translate([p[0], p[1], 4])\n            difference() {\n                cylinder(h = 8, r = 8);\n                translate([0, 0, 2])\n                    cylinder(h = 8, r = 6);\n            }\n    }\n}\n\n// Power-cord grommet detail\nmodule cord_exit() {\n    translate([0, 50, 40])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 10, r1 = 8, r2 = 8);\n                cylinder(h = 12, r1 = 5, r2 = 5);\n            }\n}\n\n// Assembly\nunion() {\n    body();\n    fins();\n    control_box();\n    base();\n    cord_exit();\n}",
    "renders": true
  },
  {
    "office_supply": "defrosters",
    "openscad_code": "// Defroster Office Furniture - Realistic Style, Medium Complexity\n// A desktop file defroster unit with realistic proportions and functional details\n\nwall_thickness = 2;\n\n// Main defroster housing\nmodule defroster_body() {\n    difference() {\n        // Outer shell\n        union() {\n            translate([0, 0, 15]) cube([120, 80, 30], center=true);\n            translate([0, 0, 30]) cube([115, 75, 30], center=true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 15]) cube([116, 76, 26], center=true);\n        translate([0, 0, 30]) cube([111, 71, 26], center=true);\n    }\n}\n\n// Ventilation slots on top\nmodule vent_slots() {\n    for(x = [-40:10:40]) {\n        translate([x, 0, 45]) cube([8, 70, 2], center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([40, 0, 45]) {\n        // Panel base\n        cube([30, 40, 3], center=true);\n        \n        // Temperature dial\n        translate([0, 10, 2]) cylinder(h=4, r=6, $fn=20);\n        \n        // Power button\n        translate([0, -10, 2]) cube([8, 8, 2], center=true);\n    }\n}\n\n// Air intake grille\nmodule intake_grille() {\n    difference() {\n        translate([0, 40, 15]) cube([100, 4, 20], center=true);\n        for(x = [-45:5:45]) {\n            translate([x, 40, 15]) cube([3, 6, 20], center=true);\n        }\n    }\n}\n\n// Rubber feet\nmodule rubber_feet() {\n    positions = [[-50, -30], [50, -30], [-50, 30], [50, 30]];\n    for(pos = positions) {\n        translate([pos[0], pos[1], -2]) \n            cylinder(h=4, r=5, $fn=16);\n    }\n}\n\n// Cable grommet\nmodule cable_grommet() {\n    translate([-55, 0, 15]) {\n        cylinder(h=10, r=8, $fn=20);\n        translate([0, 0, -1]) cylinder(h=12, r=6, $fn=20);\n    }\n}\n\n// Assembly\ndefroster_body();\nvent_slots();\ncontrol_panel();\nintake_grille();\nrubber_feet();\ncable_grommet();",
    "renders": true
  },
  {
    "office_supply": "ventilators",
    "openscad_code": "// Office Ventilator Furniture (Desktop Fan)\n// Realistic style, medium complexity\n// Dimensions: ~120mm diameter, ~200mm height\n\n$fn=32;\n\n// Main module\nmodule ventilator() {\n    // Base stand\n    union() {\n        // Base cylinder\n        translate([0,0,0]) \n            cylinder(h=15, r=60);\n        \n        // Base bottom ring for stability\n        translate([0,0,-1])\n            cylinder(h=3, r=65);\n        \n        // Base top detail\n        translate([0,0,15])\n            cylinder(h=5, r=55);\n        \n        // Vertical support pole\n        translate([0,0,20])\n            cylinder(h=80, r=8);\n    }\n    \n    // Motor housing\n    translate([0,0,100])\n    difference() {\n        // Main motor cylinder\n        cylinder(h=25, r=20);\n        \n        // Ventilation holes on sides\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n            translate([15,0,10])\n                rotate([90,0,0])\n                    cylinder(h=10, r=2);\n        }\n        \n        // Rear ventilation\n        translate([0,0,0])\n            cylinder(h=5, r=15);\n    }\n    \n    // Grille front\n    translate([0,0,100])\n    difference() {\n        // Outer grille ring\n        cylinder(h=2, r=55);\n        \n        // Inner grille spokes\n        for(i=[0:11]) {\n            rotate([0,0,i*30])\n            translate([0,0,-1])\n                cube([50, 2, 4], center=true);\n        }\n        \n        // Center hub hole\n        translate([0,0,-1])\n            cylinder(h=4, r=8);\n    }\n    \n    // Rear grille\n    translate([0,0,125])\n    difference() {\n        cylinder(h=2, r=55);\n        \n        for(i=[0:11]) {\n            rotate([0,0,i*30])\n            translate([0,0,-1])\n                cube([50, 2, 4], center=true);\n        }\n        \n        translate([0,0,-1])\n            cylinder(h=4, r=8);\n    }\n    \n    // Fan blades (3 blades)\n    translate([0,0,102])\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n        translate([25,0,0])\n            rotate([0,90,0])\n                // Tapered blade design\n                difference() {\n                    hull() {\n                        translate([0,0,0]) sphere(r=8);\n                        translate([0,0,20]) sphere(r=5);\n                    }\n                    translate([0,0,-5]) cube([20,20,30], center=true);\n                }\n    }\n    \n    // Control knob\n    translate([25,0,110])\n        cylinder(h=10, r=5);\n    \n    // Power cable\n    translate([-55,0,7])\n    rotate([90,0,0])\n        cylinder(h=100, r=3);\n    \n    // Cable strain relief\n    translate([-55,0,7])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=10, r=6);\n        translate([0,0,-1]) cylinder(h=12, r=4);\n    }\n    \n    // Tilt adjustment hinge\n    translate([0,0,100])\n    union() {\n        // Left hinge\n        translate([-10,0,0])\n            rotate([90,0,0])\n                cylinder(h=20, r=4);\n        \n        // Right hinge\n        translate([10,0,0])\n            rotate([90,0,0])\n                cylinder(h=20, r=4);\n    }\n    \n    // Rubber feet (4 feet)\n    for(x=[-45,45])\n    for(y=[-45,45])\n    translate([x,y,-1])\n        cylinder(h=3, r=5);\n}\n\n// Render the ventilator\nventilator();",
    "renders": true
  },
  {
    "office_supply": "carpets",
    "openscad_code": "// Carpet Furniture Item – OpenSCAD\n// Realistic style, medium complexity\n// Overall footprint ~120 mm x 75 mm, thickness ~3 mm (printable)\n\n// Wall thickness constant\nwall = 2;\n\n// Carpet body\nmodule carpet_body() {\n    difference() {\n        // Main carpet slab\n        color(\"DarkGoldenrod\")\n        translate([0, 0, wall/2])\n            cube([120, 75, wall], center = true);\n\n        // Central oval recess for texture illusion\n        color(\"DarkGoldenrod\")\n        translate([0, 0, -wall/2 - 0.1])\n            scale([1, 0.6, 1])\n            cylinder(h = wall + 0.2, r1 = 45, r2 = 45, $fn = 60);\n    }\n}\n\n// Fringe along the long edges\nmodule fringe() {\n    for (x = [-55:5:55]) {\n        translate([x, -75/2 - 4, wall/2])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r = 0.8, $fn = 8);\n        translate([x, 75/2 + 4, wall/2])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r = 0.8, $fn = 8);\n    }\n}\n\n// Subtle stitched border pattern\nmodule border_stitch() {\n    difference() {\n        // Outer thin frame\n        color(\"BurlyWood\")\n        translate([0, 0, wall + 0.1])\n            cube([124, 79, wall/3], center = true);\n\n        // Remove inner part leaving only border\n        color(\"BurlyWood\")\n        translate([0, 0, wall - 0.1])\n            cube([116, 71, wall], center = true);\n    }\n}\n\n// Anti-slip rubber dots on underside\nmodule anti_slip_dots() {\n    for (x = [-50:10:50])\n        for (y = [-30:10:30])\n            translate([x, y, -wall/2 - 0.5])\n                cylinder(h = 0.5, r = 2, $fn = 12);\n}\n\n// Assembly\nunion() {\n    carpet_body();\n    fringe();\n    border_stitch();\n    anti_slip_dots();\n}",
    "renders": true
  },
  {
    "office_supply": "upholstery",
    "openscad_code": "// Upholstered Office Chair - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm H x 80mm W x 100mm D\n\n// Parameters\n$fn = 50;\nwall = 2;\nseat_w = 70;\nseat_d = 65;\nseat_h = 12;\nback_h = 55;\nback_w = 70;\narmrest_h = 25;\nbase_r = 35;\npole_h = 35;\n\n// Main seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, seat_h/2])\n            cube([seat_w, seat_d, seat_h], center=true);\n        \n        // Rounded top edges\n        translate([0, 0, seat_h - 1])\n            cube([seat_w - 4, seat_d - 4, 2], center=true);\n    }\n}\n\n// Backrest cushion with ergonomic curve\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_d/2 - back_h/2 + 5, seat_h + back_h/2])\n            cube([back_w, 10, back_h], center=true);\n        \n        // Lumbar support curve\n        for(i = [0:3]) {\n            translate([0, -seat_d/2 - 5, seat_h + 10 + i*10])\n                cube([back_w - 8 - i*2, 12, 8], center=true);\n        }\n    }\n}\n\n// Armrest with padding\nmodule armrest(side) {\n    translate([side*(seat_w/2 + 5), 0, seat_h + armrest_h/2]) {\n        // Armrest structure\n        cube([8, seat_d - 10, armrest_h], center=true);\n        \n        // Padded top\n        translate([0, 0, armrest_h/2 - 1])\n            cube([10, seat_d - 8, 4], center=true);\n    }\n}\n\n// Chair base with 5 star legs\nmodule base() {\n    // Central pole\n    cylinder(h = pole_h, r = 4, center=false);\n    \n    // Star base\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 0, -1])\n                cube([6, base_r, 6], center=true);\n        }\n    }\n    \n    // Wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i*72 + 36]) {\n            translate([0, base_r - 3, -3])\n                sphere(r = 4);\n        }\n    }\n}\n\n// Upholstery tufting pattern\nmodule tufting(width, depth, count) {\n    spacing_w = width / (count + 1);\n    spacing_d = depth / (count + 1);\n    \n    for(x = [1:count]) {\n        for(y = [1:count]) {\n            translate([\n                -width/2 + x * spacing_w,\n                -depth/2 + y * spacing_d,\n                0.5\n            ]) {\n                cylinder(h = 1, r = 2);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat assembly\n    color(\"darkblue\") {\n        seat_cushion();\n        translate([0, 0, 0.5])\n            tufting(seat_w - 10, seat_d - 10, 3);\n    }\n    \n    // Backrest assembly\n    color(\"darkblue\") {\n        backrest();\n        translate([0, -seat_d/2 - 5, seat_h + back_h/2])\n            tufting(back_w - 10, 5, 3);\n    }\n    \n    // Armrests\n    color(\"gray\") {\n        armrest(1);\n        armrest(-1);\n    }\n    \n    // Base assembly\n    color(\"black\") {\n        translate([0, 0, 0])\n            base();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "dashboards",
    "openscad_code": "// Dashboard furniture - medium complexity office organizer\n// Realistic style, 3D printable with 2mm walls\n\n$fn = 32;\n\n// Main parameters\nbody_width = 80;\nbody_depth = 60;\nbody_height = 100;\nwall_thickness = 2;\n\n// Create the main body structure\nmodule main_body() {\n    // Back panel\n    difference() {\n        cube([body_width, body_depth, body_height]);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([body_width-2*wall_thickness, body_depth-2*wall_thickness, body_height-2*wall_thickness]);\n    }\n}\n\n// Create angled compartments for easy access\nmodule compartments() {\n    // Bottom large compartment\n    translate([wall_thickness, wall_thickness, wall_thickness])\n        cube([body_width-2*wall_thickness, body_depth-2*wall_thickness, 40]);\n    \n    // Middle shelf\n    translate([wall_thickness, wall_thickness, 42])\n        cube([body_width-2*wall_thickness, body_depth-2*wall_thickness, wall_thickness]);\n    \n    // Top compartments with dividers\n    for(i = [0:1]) {\n        translate([wall_thickness + i*(body_width/2 - wall_thickness), wall_thickness, 44])\n            cube([(body_width-2*wall_thickness)/2 - wall_thickness/2, body_depth-2*wall_thickness, body_height-44-wall_thickness]);\n    }\n}\n\n// Phone/pen holder section\nmodule phone_holder() {\n    translate([wall_thickness, wall_thickness + 10, 44]) {\n        // Phone slot (angled)\n        rotate([15, 0, 0])\n            translate([0, 0, 0])\n                cube([body_width-2*wall_thickness, 20, 30]);\n        \n        // Pen holes\n        for(i = [0:2]) {\n            translate([5 + i*15, 25, 2]) {\n                cylinder(h = 28, d = 8);\n                translate([0, 0, -1])\n                    cylinder(h = 30, d = 6);\n            }\n        }\n    }\n}\n\n// Cable management holes\nmodule cable_holes() {\n    // Back holes for cables\n    for(pos = [20, 40, 60]) {\n        translate([pos, wall_thickness/2, 30])\n            rotate([90, 0, 0])\n                cylinder(h = wall_thickness, d = 8);\n    }\n}\n\n// Non-slip feet\nmodule feet() {\n    for(x = [10, body_width-10]) {\n        for(y = [10, body_depth-10]) {\n            translate([x, y, -3]) {\n                cylinder(h = 3, d = 8);\n                translate([0, 0, -0.5])\n                    sphere(d = 8);\n            }\n        }\n    }\n}\n\n// Front label holder\nmodule label_holder() {\n    translate([body_width/2 - 15, body_depth - wall_thickness, body_height - 15]) {\n        difference() {\n            cube([30, wall_thickness, 10]);\n            translate([2, -1, 2])\n                cube([26, wall_thickness+2, 6]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    compartments();\n    phone_holder();\n    cable_holes();\n    feet();\n    label_holder();\n}",
    "renders": true
  },
  {
    "office_supply": "pedals",
    "openscad_code": "// Office Pedals Furniture Item - Realistic Style Medium Complexity\n// Dimensions: 120mm width x 80mm depth x 25mm height\n\n// Base parameters\nbase_width = 120;\nbase_depth = 80;\nbase_height = 5;\nwall_thickness = 2;\n\n// Pedal parameters\npedal_width = 35;\npedal_depth = 70;\npedal_height = 3;\npedal_spacing = 40;\npedal_offset = 15;\n\n// Support parameters\nsupport_height = 8;\nsupport_radius = 3;\n\n// Grip parameters\ngrip_width = 30;\ngrip_height = 2;\ngrip_spacing = 5;\n\n// Base platform with rounded edges\nmodule base_platform() {\n    difference() {\n        // Main base\n        translate([base_width/2, base_depth/2, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded corners\n        for (x = [wall_thickness, base_width-wall_thickness]) {\n            for (y = [wall_thickness, base_depth-wall_thickness]) {\n                translate([x, y, base_height])\n                    cylinder(h=base_height+1, r=wall_thickness, $fn=16);\n            }\n        }\n    }\n}\n\n// Anti-slip grips on surface\nmodule anti_slip_grips() {\n    for (x = [20:15:100]) {\n        for (y = [10:12:70]) {\n            translate([x, y, base_height + grip_height/2])\n                cube([grip_width, 2, grip_height], center=true);\n        }\n    }\n}\n\n// Pedal footrest with ergonomic curve\nmodule pedal(x_pos) {\n    union() {\n        // Main pedal surface\n        translate([x_pos, base_depth/2, base_height + pedal_height/2 + support_height])\n            cube([pedal_width, pedal_depth, pedal_height], center=true);\n        \n        // Curved front edge\n        translate([x_pos, base_depth - pedal_offset, base_height + support_height])\n            cylinder(h=pedal_width, r=pedal_height, $fn=20);\n        \n        // Support structure\n        translate([x_pos - pedal_width/2 + wall_thickness, \n                  base_depth/2 - pedal_depth/2 + wall_thickness, \n                  base_height + support_height/2])\n            cube([wall_thickness*2, pedal_depth - wall_thickness*2, support_height]);\n        \n        translate([x_pos + pedal_width/2 - wall_thickness, \n                  base_depth/2 - pedal_depth/2 + wall_thickness, \n                  base_height + support_height/2])\n            cube([wall_thickness*2, pedal_depth - wall_thickness*2, support_height]);\n        \n        // Front support posts\n        translate([x_pos - pedal_width/2 + wall_thickness*2, \n                  base_depth - pedal_offset - 5, \n                  base_height + support_height/2])\n            cylinder(h=support_height, r=support_radius, $fn=12);\n        \n        translate([x_pos + pedal_width/2 - wall_thickness*2, \n                  base_depth - pedal_offset - 5, \n                  base_height + support_height/2])\n            cylinder(h=support_height, r=support_radius, $fn=12);\n    }\n}\n\n// Cable management channel\nmodule cable_channel() {\n    translate([base_width/2, 10, base_height/2])\n        cube([base_width - 20, wall_thickness*3, wall_thickness*2], center=true);\n}\n\n// Assembly\nunion() {\n    // Base platform\n    base_platform();\n    \n    // Anti-slip grips\n    anti_slip_grips();\n    \n    // Left pedal\n    pedal(base_width/2 - pedal_spacing);\n    \n    // Right pedal\n    pedal(base_width/2 + pedal_spacing);\n    \n    // Cable management\n    cable_channel();\n    \n    // Rear support bar\n    translate([base_width/2, 5, base_height + support_height/2])\n        cube([base_width - 10, wall_thickness*3, support_height], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "shifters",
    "openscad_code": "// Shifters - Stackable Office Storage Box\n// Realistic style, medium complexity\n\n// Parameters\nwidth = 80;\ndepth = 120;\nheight = 60;\nwall_thickness = 2;\nhandle_radius = 8;\nhandle_depth = 5;\nstacking_offset = 4;\ncorner_radius = 3;\n\n// Main module\nmodule shifters_box() {\n    difference() {\n        // Outer shell\n        union() {\n            // Base box with rounded edges\n            rounded_box(width, depth, height, wall_thickness, corner_radius);\n            \n            // Front handle\n            translate([0, depth/2 - handle_depth, height/2])\n                rotate([90, 0, 0])\n                    cylinder(r = handle_radius, h = handle_depth*2, $fn = 20);\n            \n            // Stacking lip on top\n            translate([0, 0, height]) {\n                cube([width + stacking_offset*2, depth + stacking_offset*2, stacking_offset], center = true);\n            }\n            \n            // Structural ribs for strength\n            for(x = [-width/4, width/4]) {\n                translate([x, 0, height/2])\n                    cube([wall_thickness*2, depth - wall_thickness*2, height - wall_thickness*2]);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n            rounded_box(width - wall_thickness*2, depth - wall_thickness*2, height - wall_thickness, wall_thickness, corner_radius - 1);\n        \n        // Handle hole\n        translate([0, depth/2 - handle_depth, height/2])\n            rotate([90, 0, 0])\n                cylinder(r = handle_radius - wall_thickness, h = handle_depth*2 + 1, $fn = 20);\n        \n        // Stacking recess on bottom\n        translate([0, 0, -stacking_offset/2])\n            cube([width + 2, depth + 2, stacking_offset], center = true);\n    }\n    \n    // Side label holder slots\n    for(side = [-1, 1]) {\n        translate([side * width/2 + side * wall_thickness/2, 0, height/2])\n            rotate([0, 90, 0])\n                cube([wall_thickness*3, 30, 1]);\n    }\n}\n\n// Helper module for rounded boxes\nmodule rounded_box(w, d, h, thickness, r) {\n    hull() {\n        for(x = [-w/2 + r, w/2 - r])\n            for(y = [-d/2 + r, d/2 - r])\n                for(z = [-h/2 + r, h/2 - r])\n                    translate([x, y, z])\n                        sphere(r = r, $fn = 8);\n    }\n}\n\n// Generate the model\nshifters_box();",
    "renders": true
  },
  {
    "office_supply": "knobs",
    "openscad_code": "// Knobs Furniture Item - Realistic Style\n$fn = 32;\n\n// Main parameters\nbase_diameter = 40;\nbase_height = 8;\ngrip_diameter = 25;\ngrip_height = 30;\nmounting_hole_diameter = 6;\nwall_thickness = 2;\n\n// Base module\nmodule knob_base() {\n    // Main cylindrical base\n    difference() {\n        cylinder(h=base_height, d=base_diameter);\n        \n        // Top chamfer\n        translate([0, 0, base_height - 2])\n            cylinder(h=2, d=base_diameter - 4);\n        \n        // Bottom chamfer\n        translate([0, 0, 0])\n            cylinder(h=2, d=base_diameter - 4);\n        \n        // Mounting hole\n        translate([0, 0, -1])\n            cylinder(h=base_height + 2, d=mounting_hole_diameter);\n    }\n    \n    // Reinforcement ribs\n    for (i = [0:60:359]) {\n        rotate([0, 0, i])\n            translate([base_diameter/2 - 8, -1.5, 0])\n                cube([8, 3, base_height]);\n    }\n}\n\n// Grip module\nmodule knob_grip() {\n    // Main grip cylinder\n    difference() {\n        cylinder(h=grip_height, d=grip_diameter);\n        \n        // Finger grooves\n        for (i = [0:72:359]) {\n            rotate([0, 0, i + 36])\n                translate([grip_diameter/2 - 3, -1.5, grip_height/4])\n                    rotate([90, 0, 0])\n                        cylinder(h=grip_height/2, d=3);\n        }\n        \n        // Top concave surface\n        translate([0, 0, grip_height - 4])\n            sphere(d=grip_diameter + 2);\n    }\n    \n    // Grip texture rings\n    for (i = [1:2:grip_height - 4]) {\n        translate([0, 0, i])\n            cylinder(h=0.5, d=grip_diameter + 0.5);\n    }\n}\n\n// Mounting plate\nmodule mounting_plate() {\n    // Washer-style plate\n    difference() {\n        cylinder(h=2, d=base_diameter + 10);\n        cylinder(h=3, d=base_diameter);\n    }\n    \n    // Screw holes\n    for (i = [0:120:359]) {\n        rotate([0, 0, i + 60])\n            translate([base_diameter/2 + 3, 0, -1])\n                cylinder(h=4, d=3.5);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0])\n    knob_base();\n    \ntranslate([0, 0, base_height])\n    knob_grip();\n    \ntranslate([0, 0, -2])\n    mounting_plate();",
    "renders": true
  },
  {
    "office_supply": "handles",
    "openscad_code": "// Furniture Handles - Realistic Style, Medium Complexity\n// Two ergonomic drawer pulls for office furniture\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions\nhandle_length = 120;\nhandle_width = 18;\nhandle_height = 35;\nwall_thickness = 2;\n\n// Screw hole specifications\nscrew_diameter = 4;\nscrew_depth = 8;\nscrew_spacing = 96;\n\n// Base plate module\nmodule base_plate() {\n    difference() {\n        // Main base plate\n        translate([0, 0, wall_thickness/2])\n            cube([handle_length, handle_width, wall_thickness], center=true);\n        \n        // Rounded edges\n        translate([handle_length/2 - wall_thickness, 0, 0])\n            cube([wall_thickness*2, handle_width, wall_thickness*2], center=true);\n        translate([-handle_length/2 + wall_thickness, 0, 0])\n            cube([wall_thickness*2, handle_width, wall_thickness*2], center=true);\n    }\n}\n\n// Handle grip module\nmodule handle_grip() {\n    difference() {\n        // Main grip body\n        translate([0, 0, handle_height/2 + wall_thickness])\n            cube([handle_length - 20, handle_width - 4, handle_height], center=true);\n        \n        // Ergonomic finger grooves\n        for(i = [-2:2]) {\n            translate([i * 15, 0, handle_height/2 + wall_thickness + 2])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_width - 4, d=6, center=true);\n        }\n        \n        // Top edge rounding\n        translate([0, 0, handle_height + wall_thickness])\n            cube([handle_length - 20, handle_width - 4, wall_thickness*2], center=true);\n    }\n}\n\n// Screw holes module\nmodule screw_holes() {\n    for(i = [-1, 1]) {\n        translate([i * screw_spacing/2, 0, -1])\n            cylinder(h=wall_thickness + 2, d=screw_diameter, center=true);\n    }\n}\n\n// Support brackets module\nmodule support_brackets() {\n    for(i = [-1, 1]) {\n        // Left bracket\n        translate([screw_spacing/2 * i, (handle_width/2) - 2, handle_height/2 + wall_thickness])\n            rotate([0, -30, 0])\n                cube([handle_height/1.5, wall_thickness*2, handle_height/1.5], center=true);\n        \n        // Right bracket\n        translate([screw_spacing/2 * i, -(handle_width/2) + 2, handle_height/2 + wall_thickness])\n            rotate([0, 30, 0])\n                cube([handle_height/1.5, wall_thickness*2, handle_height/1.5], center=true);\n    }\n}\n\n// Complete handle assembly\nmodule single_handle() {\n    union() {\n        base_plate();\n        handle_grip();\n        support_brackets();\n        \n        difference() {\n            base_plate();\n            screw_holes();\n        }\n    }\n}\n\n// Generate two handles for furniture\ntranslate([-handle_length/2 - 10, 0, 0])\n    single_handle();\n\ntranslate([handle_length/2 + 10, 0, 0])\n    mirror([1, 0, 0])\n        single_handle();",
    "renders": true
  },
  {
    "office_supply": "latches",
    "openscad_code": "// Furniture Latch - Medium Complexity Realistic Style\n// Overall dimensions: 80mm x 30mm x 20mm\n\n$fn = 50;\nwall_thickness = 2;\n\nmodule base_plate() {\n    difference() {\n        // Main base\n        cube([80, 30, 4], center=true);\n        \n        // Mounting holes\n        for(x = [-30, 30])\n            translate([x, 0, -2.1])\n                cylinder(h=4.5, r=2.5, center=true);\n    }\n}\n\nmodule latch_body() {\n    translate([0, 0, 6]) {\n        difference() {\n            // Main body\n            cube([45, 25, 12], center=true);\n            \n            // Internal cavity\n            translate([5, 0, -1])\n                cube([35, 21, 14], center=true);\n        }\n    }\n}\n\nmodule latch_hook() {\n    translate([30, 0, 13]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                // Hook arm\n                translate([0, 0, 0])\n                    cylinder(h=15, r1=6, r2=4);\n                \n                // Hook cutout\n                translate([0, -8, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, r=2.5);\n                \n                // Taper end\n                translate([0, 7.5, 0])\n                    sphere(r=4.5);\n            }\n        }\n    }\n}\n\nmodule latch_handle() {\n    translate([-30, 0, 10]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Handle grip\n                cylinder(h=20, r1=6, r2=4);\n                \n                // Finger grooves\n                for(i = [-8, 0, 8])\n                    translate([i, 0, -10.5])\n                        cylinder(h=21, r=1.5);\n            }\n        }\n    }\n}\n\nmodule mounting_tabs() {\n    // Front tabs\n    for(x = [-25, 25]) {\n        translate([x, 15, 0])\n            cube([10, 5, 4], center=true);\n    }\n    \n    // Rear tabs\n    for(x = [-25, 25]) {\n        translate([x, -15, 0])\n            cube([10, 5, 4], center=true);\n    }\n}\n\nmodule reinforcement_ribs() {\n    // Side ribs\n    for(y = [-10, 10]) {\n        translate([0, y, 10])\n            cube([42, 2, 8], center=true);\n    }\n}\n\nmodule spring_housing() {\n    translate([15, 0, 8]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=8, r=4);\n                cylinder(h=9, r=2);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    latch_body();\n    latch_hook();\n    latch_handle();\n    mounting_tabs();\n    reinforcement_ribs();\n    spring_housing();\n}",
    "renders": true
  },
  {
    "office_supply": "hinges",
    "openscad_code": "// Furniture Hinge - Medium Complexity Realistic Style\n// A two-part cabinet hinge with screw holes and realistic proportions\n\n// Global parameters\n$fn = 32;  // Smooth curves for realism\n\n// Hinge dimensions (in mm)\nhinge_width = 24;\nhinge_length = 60;\nhinge_thickness = 2.5;\nknuckle_diameter = 7;\nknuckle_length = 14;\npin_diameter = 3;\nplate_thickness = 3;\nscrew_hole_diameter = 4;\nscrew_head_diameter = 7;\nscrew_head_depth = 2;\n\n// Create complete hinge assembly\nunion() {\n    // Left hinge leaf\n    translate([0, 0, 0])\n        hinge_leaf();\n    \n    // Right hinge leaf (rotated 90 degrees)\n    translate([0, knuckle_diameter + 1, 0])\n        rotate([0, 0, 90])\n            hinge_leaf();\n    \n    // Hinge pin\n    translate([hinge_width/2 - knuckle_length/2 + 0.1, knuckle_diameter/2, plate_thickness])\n        cylinder(h=knuckle_length - 0.2, d=pin_diameter, center=true);\n}\n\n// Module for a single hinge leaf\nmodule hinge_leaf() {\n    difference() {\n        // Main leaf plate\n        cube([hinge_width, hinge_length, plate_thickness], center=false);\n        \n        // Screw holes (3 per leaf)\n        for(i = [0:2]) {\n            translate([hinge_width/2, 8 + i*22, -1])\n                cylinder(h=plate_thickness + 2, d=screw_hole_diameter, center=false);\n            \n            // Countersink for screws\n            translate([hinge_width/2, 8 + i*22, plate_thickness])\n                cylinder(h=screw_head_depth + 1, d=screw_head_diameter, center=false);\n        }\n    }\n    \n    // Knuckle cylinders\n    for(i = [0:4]) {\n        translate([hinge_width/2 - knuckle_length/2 + i*knuckle_length/4, 0, plate_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=knuckle_length/4, d=knuckle_diameter, center=true);\n    }\n    \n    // Chamfers on leaf edges\n    difference() {\n        translate([0, 0, 0])\n            cube([hinge_width, hinge_length, plate_thickness], center=false);\n            \n        // Top chamfer\n        translate([-1, -1, plate_thickness - 1])\n            cube([hinge_width + 2, hinge_length + 2, 2], center=false);\n            \n        // Side chamfers\n        translate([-1, -1, -1])\n            cube([2, hinge_length + 2, plate_thickness + 2], center=false);\n        translate([hinge_width - 1, -1, -1])\n            cube([2, hinge_length + 2, plate_thickness + 2], center=false);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "bolts",
    "openscad_code": "// Office Bolts Storage Cabinet - Realistic Style\n// Medium complexity 3D printable organizer for bolts and small hardware\n\n// Overall dimensions\ncabinet_width = 120;\ncabinet_height = 80;\ncabinet_depth = 60;\nwall_thickness = 2;\n\n// Drawer parameters\ndrawer_height = 18;\ndrawer_spacing = 4;\ndrawer_count = 3;\n\n// Handle parameters\nhandle_width = 30;\nhandle_height = 8;\nhandle_depth = 12;\n\n// Divider parameters\ndivider_thickness = 2;\ncompartments = 4;\n\n// Main cabinet body\nmodule cabinet_body() {\n    difference() {\n        // Outer shell\n        cube([cabinet_width, cabinet_depth, cabinet_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([\n                cabinet_width - 2*wall_thickness,\n                cabinet_depth - wall_thickness,\n                cabinet_height - wall_thickness\n            ]);\n    }\n}\n\n// Individual drawer\nmodule drawer(drawer_z) {\n    translate([0, 0, drawer_z]) {\n        // Drawer box\n        difference() {\n            translate([wall_thickness, wall_thickness, 0])\n                cube([\n                    cabinet_width - 2*wall_thickness,\n                    cabinet_depth - 2*wall_thickness,\n                    drawer_height\n                ]);\n                \n            // Hollow drawer interior\n            translate([wall_thickness + 2, wall_thickness + 2, 2])\n                cube([\n                    cabinet_width - 2*wall_thickness - 4,\n                    cabinet_depth - 2*wall_thickness - 4,\n                    drawer_height - 4\n                ]);\n                \n            // Front edge rounding\n            translate([wall_thickness + 2, wall_thickness + 2, drawer_height - 1])\n                cube([\n                    cabinet_width - 2*wall_thickness - 4,\n                    drawer_height - 4,\n                    1\n                ]);\n        }\n        \n        // Drawer handle\n        translate([\n            (cabinet_width - handle_width) / 2,\n            cabinet_depth - handle_depth - 1,\n            drawer_height / 2 - handle_height / 2\n        ]) {\n            // Handle base\n            cube([handle_width, handle_depth, handle_height]);\n            \n            // Handle grip space\n            difference() {\n                translate([2, -1, 2])\n                    cube([handle_width - 4, handle_depth + 2, handle_height - 4]);\n            }\n        }\n        \n        // Internal dividers for compartments\n        for (i = [1:compartments-1]) {\n            translate([\n                wall_thickness + (cabinet_width - 2*wall_thickness) * i / compartments,\n                wall_thickness,\n                2\n            ]) {\n                cube([\n                    divider_thickness,\n                    cabinet_depth - 2*wall_thickness - 4,\n                    drawer_height - 4\n                ]);\n            }\n        }\n    }\n}\n\n// Cabinet feet for stability\nmodule cabinet_feet() {\n    foot_size = 8;\n    foot_height = 5;\n    \n    for (x = [foot_size, cabinet_width - foot_size]) {\n        for (y = [foot_size, cabinet_depth - foot_size]) {\n            translate([x - foot_size/2, y - foot_size/2, -foot_height]) {\n                difference() {\n                    cube([foot_size, foot_size, foot_height]);\n                    translate([2, 2, 0])\n                        cylinder(h=foot_height, r=foot_size/2 - 2, $fn=20);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    \n    // Generate drawers\n    for (i = [0:drawer_count-1]) {\n        drawer(i * (drawer_height + drawer_spacing) + drawer_spacing);\n    }\n    \n    // Add feet\n    cabinet_feet();\n    \n    // Label holder on front\n    translate([cabinet_width/2 - 25, cabinet_depth - 1, cabinet_height - 15]) {\n        cube([50, 1, 10]);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "nuts",
    "openscad_code": "// Nut-shaped office stool with realistic proportions and 3D printable structure\n// Overall dimensions: 120mm diameter, 70mm height\n\n// Module for hexagonal nut shape\nmodule hex_nut(height, outer_radius, inner_radius) {\n    difference() {\n        // Outer hexagon shape using cylinders\n        cylinder(h=height, r=outer_radius, $fn=6);\n        \n        // Central hole for bolt\n        cylinder(h=height + 2, r=inner_radius, $fn=32);\n    }\n}\n\n// Module for rounded top edge (ergonomic seating surface)\nmodule rounded_top() {\n    difference() {\n        cylinder(h=5, r=60, $fn=6);\n        translate([0, 0, -0.1]) \n            cylinder(h=5.2, r=58, $fn=6);\n    }\n}\n\n// Module for structural ribs inside\nmodule internal_ribs() {\n    // Vertical support ribs\n    for(i=[0:60:359]) {\n        rotate([0, 0, i]) \n            translate([30, -2, 5]) \n                cube([25, 4, 60]);\n    }\n    \n    // Horizontal reinforcement ring\n    for(z=[15:15:60]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=2, r=55, $fn=6);\n                cylinder(h=2.2, r=25, $fn=32);\n            }\n    }\n}\n\n// Module for base with anti-slip features\nmodule stool_base() {\n    difference() {\n        // Main base\n        cylinder(h=5, r=60, $fn=6);\n        \n        // Recessed bottom for weight reduction\n        translate([0, 0, -0.1])\n            cylinder(h=5.2, r=55, $fn=6);\n        \n        // Anti-slip pads mounting holes\n        for(angle=[30:120:330]) {\n            rotate([0, 0, angle])\n                translate([45, 0, 0])\n                    cylinder(h=6, r=3, $fn=16);\n        }\n    }\n}\n\n// Assembly of the nut stool\nunion() {\n    // Main hexagonal body\n    hex_nut(65, 60, 30);\n    \n    // Rounded top surface\n    translate([0, 0, 65])\n        rounded_top();\n    \n    // Chamfered bottom edge\n    translate([0, 0, -5])\n        cylinder(h=5, r1=60, r2=58, $fn=6);\n    \n    // Internal structure (only visible in cutaway)\n    translate([0, 0, 5])\n        internal_ribs();\n    \n    // Base with anti-slip features\n    stool_base();\n    \n    // Bolt head detail (decorative)\n    translate([0, 0, 2])\n        rotate([180, 0, 0])\n            cylinder(h=8, r=28, $fn=6);\n    \n    // Thread detail on central hole\n    for(z=[10:5:70]) {\n        translate([0, 0, z])\n            rotate([0, 0, z*30])\n                difference() {\n                    cylinder(h=2, r=31, $fn=32);\n                    cylinder(h=2.2, r=29, $fn=32);\n                }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "washers",
    "openscad_code": "// Washers Furniture - Office Supply Organizer\n// Realistic style with medium complexity\n// Overall dimensions: 100mm x 80mm x 120mm\n\n// Wall thickness constant\nwall = 2;\n\n// Base module for washer storage compartments\nmodule washer_compartment(diameter, height, count) {\n    // Main compartment body\n    difference() {\n        // Outer cylinder\n        cylinder(h=height, d=diameter + wall*2, $fn=32);\n        \n        // Inner hollow space\n        translate([0, 0, -1])\n            cylinder(h=height+2, d=diameter, $fn=32);\n    }\n    \n    // Bottom support ring\n    translate([0, 0, 0])\n        cylinder(h=wall*2, d=diameter + wall*2, $fn=32);\n    \n    // Create multiple compartments\n    for(i = [0:count-1]) {\n        translate([0, 0, i * (height/count) + wall])\n            cylinder(h=wall, d=diameter + wall*2, $fn=32);\n    }\n}\n\n// Side support structure\nmodule side_support() {\n    // Left support\n    translate([-45, -35, 60])\n        rotate([90, 0, 0])\n            cylinder(h=70, d=8, $fn=16);\n    \n    // Right support\n    translate([45, -35, 60])\n        rotate([90, 0, 0])\n            cylinder(h=70, d=8, $fn=16);\n    \n    // Cross brace\n    translate([0, -35, 25])\n        cube([90, wall, 50]);\n}\n\n// Base platform\nmodule base_platform() {\n    // Main base\n    difference() {\n        translate([0, 0, 0])\n            cube([100, 80, wall], center=true);\n        \n        // Rounded corners\n        for(x = [-45, 45]) {\n            for(y = [-35, 35]) {\n                translate([x, y, 0])\n                    cylinder(h=wall+1, d=10, $fn=16);\n            }\n        }\n    }\n}\n\n// Top tray for larger washers\nmodule top_tray() {\n    // Tray body\n    difference() {\n        translate([0, 25, 115])\n            cube([80, 50, wall*3], center=true);\n        \n        // Recessed area\n        translate([0, 25, 115])\n            cube([70, 40, wall*2], center=true);\n    }\n    \n    // Tray edges\n    translate([0, 0, 115])\n        cube([85, wall, 10], center=true);\n    translate([0, 50, 115])\n        cube([85, wall, 10], center=true);\n    translate([-40, 25, 115])\n        cube([wall, 50, 10], center=true);\n    translate([40, 25, 115])\n        cube([wall, 50, 10], center=true);\n}\n\n// Label holders\nmodule label_holders() {\n    for(pos = [-30, 0, 30]) {\n        translate([pos, -35, 85])\n            cube([20, wall, 8], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_platform();\n    \n    // Side supports\n    side_support();\n    \n    // Washer compartments\n    translate([-30, 0, wall])\n        washer_compartment(25, 60, 4);\n    \n    translate([0, 0, wall])\n        washer_compartment(20, 60, 4);\n    \n    translate([30, 0, wall])\n        washer_compartment(15, 60, 4);\n    \n    // Top tray\n    top_tray();\n    \n    // Label holders\n    label_holders();\n    \n    // Additional structural elements\n    translate([0, -35, 95])\n        cube([90, wall, 10], center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "clamps",
    "openscad_code": "// Furniture Clamp - Medium complexity realistic office supply\n// Overall dimensions: 100mm x 40mm x 20mm\n\n// Parameters\n$fn = 32;\noverall_length = 100;\nhandle_length = 40;\njaw_width = 40;\njaw_height = 20;\nwall_thickness = 2;\nscrew_radius = 4;\nthread_pitch = 1;\n\nmodule handle() {\n    // Main handle bar\n    difference() {\n        // Handle shaft\n        translate([0, 0, jaw_height/2])\n            cylinder(h=handle_length, r=8);\n        \n        // Grip grooves\n        for (i = [5:5:handle_length-10]) {\n            translate([0, i, jaw_height/2-6])\n                rotate([90, 0, 0])\n                    cylinder(h=12, r=7, $fn=6);\n        }\n        \n        // Through hole for screw\n        translate([0, handle_length, jaw_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=screw_radius+1);\n    }\n    \n    // Handle end cap\n    translate([0, handle_length+5, jaw_height/2])\n        sphere(r=10);\n}\n\nmodule screw_assembly() {\n    // Threaded screw\n    difference() {\n        // Main screw\n        translate([0, handle_length, jaw_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=overall_length-handle_length-10, r=screw_radius);\n        \n        // Thread details\n        for (i = [0:thread_pitch:overall_length-handle_length-10]) {\n            translate([0, handle_length+i, jaw_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=thread_pitch, r=screw_radius+0.5);\n        }\n    }\n    \n    // Screw head\n    translate([0, overall_length-5, jaw_height/2])\n        cylinder(h=10, r=8, $fn=6);\n}\n\nmodule fixed_jaw() {\n    // Main jaw body\n    difference() {\n        // Jaw block\n        translate([-jaw_width/2, 0, 0])\n            cube([jaw_width, 15, jaw_height]);\n        \n        // Grip pad recess\n        translate([-jaw_width/2+2, 2, 2])\n            cube([jaw_width-4, 11, jaw_height-4]);\n        \n        // Screw clearance\n        translate([0, 7, jaw_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=screw_radius+1);\n    }\n    \n    // Grip pad\n    translate([-jaw_width/2+2.5, 2.5, 2.5])\n        cube([jaw_width-5, 10, jaw_height-5]);\n    \n    // Reinforcement ribs\n    for (x = [-jaw_width/2+5:10:jaw_width/2-5]) {\n        translate([x, 0, 0])\n            cube([wall_thickness, 15, jaw_height]);\n    }\n}\n\nmodule movable_jaw() {\n    // Moving jaw assembly\n    translate([0, 30, 0]) {\n        difference() {\n            // Jaw body\n            translate([-jaw_width/2, 0, 0])\n                cube([jaw_width, 15, jaw_height]);\n            \n            // Grip pad recess\n            translate([-jaw_width/2+2, 2, 2])\n                cube([jaw_width-4, 11, jaw_height-4]);\n            \n            // Threaded hole\n            translate([0, 7, jaw_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=15, r=screw_radius);\n            \n            // Guide slots\n            translate([-jaw_width/2-1, 7, jaw_height/2-1])\n                cube([jaw_width+2, 4, 2]);\n        }\n        \n        // Grip pad\n        translate([-jaw_width/2+2.5, 2.5, 2.5])\n            cube([jaw_width-5, 10, jaw_height-5]);\n        \n        // Guide rails\n        translate([-jaw_width/2-1, 7, jaw_height/2-1])\n            cube([wall_thickness, 4, 2]);\n        translate([jaw_width/2, 7, jaw_height/2-1])\n            cube([wall_thickness, 4, 2]);\n    }\n}\n\n// Main assembly\nunion() {\n    handle();\n    screw_assembly();\n    fixed_jaw();\n    movable_jaw();\n    \n    // Support bracket\n    translate([-jaw_width/2-5, 0, -5])\n        cube([jaw_width+10, 5, 5]);\n    \n    // Additional reinforcement\n    translate([-jaw_width/2-5, 0, jaw_height])\n        cube([jaw_width+10, 5, 5]);\n}",
    "renders": true
  },
  {
    "office_supply": "grease",
    "openscad_code": "// Grease container furniture for office use\n// Small cylindrical container with ergonomic base and lid mechanism\n\n// Global parameters\n$fn = 50;  // Smooth curves\nwall_thickness = 2;  // 3D printable wall thickness\ncontainer_height = 60;\ncontainer_diameter = 40;\n\nmodule grease_container() {\n    // Main container body\n    difference() {\n        // Outer cylinder\n        cylinder(h=container_height, d=container_diameter, center=false);\n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h=container_height-wall_thickness*2, d=container_diameter-wall_thickness*2, center=false);\n    }\n    \n    // Reinforced base ring\n    translate([0, 0, 0])\n        cylinder(h=wall_thickness*2, d=container_diameter+wall_thickness, center=false);\n    \n    // Anti-slip base ridges\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([container_diameter/2-wall_thickness, 0, wall_thickness])\n                cube([wall_thickness*2, wall_thickness*3, wall_thickness]);\n    }\n}\n\nmodule lid_mechanism() {\n    // Main lid\n    translate([0, 0, container_height])\n        difference() {\n            cylinder(h=wall_thickness*3, d=container_diameter+wall_thickness, center=false);\n            translate([0, 0, wall_thickness])\n                cylinder(h=wall_thickness*2, d=container_diameter-wall_thickness, center=false);\n        }\n    \n    // Lid grip handle\n    translate([0, 0, container_height+wall_thickness*3])\n        difference() {\n            cylinder(h=wall_thickness*2, d=container_diameter/2, center=false);\n            translate([0, 0, wall_thickness/2])\n                cylinder(h=wall_thickness*2, d=container_diameter/2-wall_thickness, center=false);\n        }\n    \n    // Grip ridges for handling\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([container_diameter/2-wall_thickness, -wall_thickness/2, container_height+wall_thickness*3])\n                cube([wall_thickness, wall_thickness, wall_thickness*2]);\n    }\n}\n\nmodule dispenser_spout() {\n    // Angled spout for controlled dispensing\n    translate([container_diameter/2-wall_thickness, 0, container_height-wall_thickness*5])\n        rotate([0, 45, 0])\n            difference() {\n                cylinder(h=15, d=wall_thickness*3, center=false);\n                translate([0, 0, wall_thickness])\n                    cylinder(h=15, d=wall_thickness, center=false);\n            }\n    \n    // Spout support structure\n    translate([container_diameter/2+wall_thickness, -wall_thickness, container_height-wall_thickness*6])\n        cube([wall_thickness, wall_thickness*2, wall_thickness*4]);\n}\n\n// Assemble complete grease container\nunion() {\n    grease_container();\n    lid_mechanism();\n    dispenser_spout();\n}",
    "renders": true
  },
  {
    "office_supply": "adhesives",
    "openscad_code": "// Office Desk Stapler in realistic style\n// Overall dimensions: 120mm x 40mm x 60mm\n\n// Main body module\nmodule stapler_body() {\n    // Top curved cover\n    translate([0, 0, 35]) {\n        difference() {\n            hull() {\n                cube([110, 35, 25], center=true);\n                translate([0, 0, -5]) cube([105, 30, 20], center=true);\n            }\n            translate([0, 0, 12]) cube([106, 36, 15], center=true);\n        }\n    }\n    \n    // Base platform\n    translate([0, 0, 15]) {\n        cube([115, 40, 30], center=true);\n    }\n    \n    // Front taper\n    translate([50, 0, 25]) {\n        rotate([0, -10, 0]) {\n            cube([20, 38, 15], center=true);\n        }\n    }\n}\n\n// Handle module\nmodule stapler_handle() {\n    // Main handle arm\n    translate([-40, 0, 55]) {\n        rotate([10, 0, 0]) {\n            difference() {\n                hull() {\n                    cube([70, 25, 8], center=true);\n                    translate([0, 0, 10]) cube([65, 22, 6], center=true);\n                }\n                translate([0, 0, -2]) cube([66, 26, 12], center=true);\n            }\n        }\n    }\n    \n    // Handle grip ridges\n    for(i = [-20:10:20]) {\n        translate([i, 0, 60]) {\n            rotate([10, 0, 0]) {\n                cube([8, 22, 1], center=true);\n            }\n        }\n    }\n}\n\n// Hinge mechanism\nmodule stapler_hinge() {\n    // Left hinge\n    translate([-52, -8, 40]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=16, r=4, $fn=16);\n        }\n    }\n    \n    // Right hinge\n    translate([-52, 8, 40]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=16, r=4, $fn=16);\n        }\n    }\n    \n    // Hinge pin\n    translate([-52, 0, 40]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=20, r=2, $fn=12);\n        }\n    }\n}\n\n// Base details\nmodule base_details() {\n    // Rubber feet\n    for(pos = [[-40, -15], [40, -15], [-40, 15], [40, 15]]) {\n        translate([pos[0], pos[1], 0]) {\n            cylinder(h=2, r=3, $fn=12);\n        }\n    }\n    \n    // Magazine slot\n    translate([0, 0, 30]) {\n        cube([80, 2, 20], center=true);\n    }\n    \n    // Anvil surface\n    translate([45, 0, 30]) {\n        cube([20, 30, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    stapler_body();\n    stapler_handle();\n    stapler_hinge();\n    base_details();\n}",
    "renders": true
  },
  {
    "office_supply": "sealants",
    "openscad_code": "// Sealants furniture - Office supply organizer with sealant tube storage\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall dimensions\nbase_width = 100;\nbase_depth = 80;\nbase_height = 15;\n\n// Wall thickness\nwall_thick = 2;\n\n// Tube storage\ntube_diameter = 50;\ntube_height = 120;\ntube_count = 3;\n\n// Tool compartments\ncompartment_width = 25;\ncompartment_depth = 35;\ncompartment_height = 40;\n\n// Handle dimensions\nhandle_radius = 8;\nhandle_height = 20;\n\nmodule base() {\n    // Main base platform\n    difference() {\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Hollow out bottom\n        translate([0, 0, -wall_thick/2])\n            cube([base_width-wall_thick*2, base_depth-wall_thick*2, base_height+1], center=true);\n    }\n}\n\nmodule tube_holders() {\n    // Create storage tubes for sealant cartridges\n    spacing = base_width / (tube_count + 1);\n    \n    for (i = [1:tube_count]) {\n        x_pos = -base_width/2 + i * spacing;\n        \n        // Outer tube\n        translate([x_pos, 0, tube_height/2 + base_height/2])\n            difference() {\n                cylinder(h=tube_height, r=tube_diameter/2, center=true);\n                \n                // Inner cavity\n                cylinder(h=tube_height+2, r=tube_diameter/2 - wall_thick, center=true);\n                \n                // Access slot (front-facing)\n                rotate([0, 90, 0])\n                    translate([0, 0, -tube_diameter/2])\n                        cube([tube_height*2, tube_diameter/2, wall_thick*2], center=true);\n            }\n        \n        // Support ring at top\n        translate([x_pos, 0, tube_height + base_height/2])\n            cylinder(h=wall_thick*2, r=tube_diameter/2 + wall_thick, center=true);\n    }\n}\n\nmodule tool_compartments() {\n    // Rear compartments for tools\n    y_pos = base_depth/2 - compartment_depth/2 - wall_thick;\n    \n    for (i = [0:3]) {\n        x_pos = -base_width/2 + 15 + i * (compartment_width + wall_thick);\n        \n        translate([x_pos, y_pos, compartment_height/2 + base_height/2])\n            difference() {\n                cube([compartment_width, compartment_depth, compartment_height], center=true);\n                \n                // Hollow out\n                translate([0, 0, -wall_thick])\n                    cube([compartment_width-wall_thick*2, compartment_depth-wall_thick*2, compartment_height+1], center=true);\n            }\n    }\n}\n\nmodule handle() {\n    // Front handle for easy carrying\n    translate([0, -base_depth/2 - handle_radius, handle_height/2 + base_height/2]) {\n        // Handle grip\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=base_width - 40, r=handle_radius, center=true);\n                cylinder(h=base_width - 35, r=handle_radius - wall_thick, center=true);\n            }\n        \n        // Support brackets\n        for (x = [-base_width/2 + 20, base_width/2 - 20]) {\n            translate([x, 0, 0])\n                cube([wall_thick*4, handle_radius, handle_height], center=true);\n        }\n    }\n}\n\nmodule label_area() {\n    // Front label plate\n    translate([0, -base_depth/2 + wall_thick, base_height/2 + 5])\n        cube([60, wall_thick, 10], center=true);\n}\n\n// Assembly\nunion() {\n    base();\n    tube_holders();\n    tool_compartments();\n    handle();\n    label_area();\n}",
    "renders": true
  },
  {
    "office_supply": "paints",
    "openscad_code": "// Paint can rack for 4 standard 250 ml paint cans\n// Overall size: 120 mm wide × 120 mm deep × 110 mm tall\n\nmodule can_slot() {\n    // Single paint-can holder – 60 mm diameter can\n    difference() {\n        // Outer shell 2 mm thick\n        cube([65, 65, 55], center = true);\n        translate([0, 0, 2.5])\n            cube([61, 61, 60], center = true);\n    }\n}\n\nmodule side_wall(h = 110) {\n    // Vertical side wall with lightening holes\n    difference() {\n        cube([5, 120, h]);\n        for (x = [15:25:105])\n            translate([x, 2.5, 15])\n                cylinder(h = 5, d = 8);\n    }\n}\n\nmodule back_wall(h = 110) {\n    // Rear wall with holes for screw mounting\n    difference() {\n        cube([120, 5, h]);\n        for (y = [15:30:105])\n            translate([y, 2.5, 15])\n                cylinder(h = 5, d = 8);\n    }\n}\n\nmodule bottom_base() {\n    // 2 mm thick base plate\n    cube([120, 120, 5]);\n}\n\nmodule front_lip() {\n    // Low front lip to keep cans from rolling out\n    translate([0, 120 - 5, 0])\n        cube([120, 5, 15]);\n}\n\nmodule label_ridge() {\n    // Raised ridge for attaching a label strip\n    translate([5, 5, 90])\n        cube([110, 5, 2]);\n}\n\n// Assemble rack\nunion() {\n    bottom_base();\n    \n    // Vertical walls\n    side_wall();\n    translate([115, 0, 0])\n        mirror([1, 0, 0])\n            side_wall();\n    back_wall();\n    \n    front_lip();\n    label_ridge();\n    \n    // Four can slots arranged 2×2\n    translate([30, 30, 30])\n        can_slot();\n    translate([30, 90, 30])\n        can_slot();\n    translate([90, 30, 30])\n        can_slot();\n    translate([90, 90, 30])\n        can_slot();\n}",
    "renders": true
  },
  {
    "office_supply": "varnishes",
    "openscad_code": "// Varnished Office Chair – 3D-printable, medium complexity\n// Overall size: 110 mm tall, 55 mm wide, 60 mm deep\n// Seat height 55 mm, back height 55 mm above seat\n// All shells 2 mm thick for easy printing\n\n// Main colours\nchair_color = \"SaddleBrown\";      // dark varnish\nmetal_color = \"Gray\";             // aluminium look\nseat_top_color = \"Black\";         // faux leather\n\n// Wall thickness for 3D-printing\nwt = 2;\n\n// ---------- Utility modules ----------\nmodule shell_box(w, d, h){\n    difference(){\n        cube([w, d, h]);\n        translate([wt, wt, wt])\n            cube([w-2*wt, d-2*wt, h-wt]);\n    }\n}\n\nmodule tube(od, h){\n    difference(){\n        cylinder(d=od, h=h, $fn=20);\n        cylinder(d=od-2*wt, h=h+1, $fn=20);\n    }\n}\n\n// ---------- Leg ----------\nmodule leg(){\n    color(metal_color)\n        tube(od=6, h=55);\n}\n\n// ---------- Five-star base ----------\nmodule base(){\n    difference(){\n        union(){\n            cylinder(d=50, h=4, $fn=30);\n            for(a=[0:72:359])\n                rotate([0,0,a])\n                    translate([20,0,0])\n                        cube([20,6,4], center=true);\n        }\n        cylinder(d=46, h=4.1, $fn=30);\n    }\n}\n\n// ---------- Gas-spring cover ----------\nmodule spring_cover(){\n    color(metal_color)\n        tube(od=12, h=15);\n}\n\n// ---------- Seat shell ----------\nmodule seat(){\n    color(chair_color)\n    difference(){\n        // main seat pan\n        hull(){\n            translate([-25, 0, 0])\n                cube([50, 50, 8]);\n            translate([-25, 0, 4])\n                cube([50, 46, 8]);\n        }\n        // ergonomic dip\n        translate([0, 10, -1])\n            cube([40, 30, 10], center=true);\n    }\n    // seat top surface\n    color(seat_top_color)\n        translate([0, 0, 7.9])\n            cube([46, 46, 0.2], center=true);\n}\n\n// ---------- Backrest ----------\nmodule back(){\n    color(chair_color)\n    hull(){\n        // lower back\n        translate([-25, 0, 0])\n            cube([50, 6, 30]);\n        // upper back\n        translate([-23, 0, 30])\n            cube([46, 4, 25]);\n    }\n}\n\n// ---------- Armrest ----------\nmodule armrest(side){\n    translate([side*28, 0, 0])\n    rotate([0, side*15, 0])\n    union(){\n        color(metal_color)\n            tube(od=6, h=25);\n        color(chair_color)\n            translate([0, 15, 22])\n                rotate([90,0,0])\n                    cylinder(d1=8, d2=6, h=20, $fn=20);\n    }\n}\n\n// ---------- Assembly ----------\ntranslate([0,0,0]) base();\ntranslate([0,0,4]) leg();\ntranslate([0,0,59]) spring_cover();\ntranslate([0,0,74]) seat();\ntranslate([0,-3,74+30]) back();\narmrest(1);\narmrest(-1);",
    "renders": true
  },
  {
    "office_supply": "top",
    "openscad_code": "// Office Chair - Top view model\n// Realistic style, medium complexity office chair focusing on top view elements\n\n// Overall dimensions\nchair_width = 120;\nchair_depth = 120;\nseat_height = 15;\nback_height = 80;\narmrest_height = 40;\n\n// Seat cushion\nmodule seat() {\n    difference() {\n        // Main seat pad\n        translate([0, 0, seat_height/2])\n            cube([chair_width, chair_depth, seat_height], center=true);\n        \n        // Rounded front edge\n        translate([0, chair_depth/2 - 5, seat_height/2])\n            cylinder(h=seat_height, r=5, $fn=20);\n        \n        // Create rounded front\n        translate([0, chair_depth/2 - 5, seat_height/2])\n            cube([chair_width - 10, 10, seat_height], center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -chair_depth/2 + 10, back_height/2 + seat_height])\n        cube([chair_width - 20, 8, back_height], center=true);\n    \n    // Lumbar support curve\n    translate([0, -chair_depth/2 + 6, seat_height + 25])\n        cube([chair_width - 30, 4, 30], center=true);\n    \n    // Headrest support\n    translate([0, -chair_depth/2 + 8, seat_height + back_height - 10])\n        cube([60, 6, 20], center=true);\n}\n\n// Armrest with adjustment mechanism\nmodule armrest(side) {\n    // Position armrest\n    translate([side * (chair_width/2 - 20), 0, 0]) {\n        // Vertical support post\n        cylinder(h=armrest_height, r=4, $fn=16);\n        \n        // Horizontal arm pad\n        translate([0, chair_depth/4 - 10, armrest_height - 5])\n            cube([40, 60, 8], center=true);\n        \n        // Adjustment holes\n        for(i = [0:15:45]) {\n            translate([0, 0, i + 5])\n                cylinder(h=2, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Central column and base attachment\nmodule central_support() {\n    // Gas cylinder housing\n    cylinder(h=20, r=15, $fn=32);\n    \n    // Base plate\n    translate([0, 0, -2])\n        cylinder(h=4, r=25, $fn=32);\n    \n    // Adjustment lever\n    translate([20, 0, 5])\n    rotate([90, 0, 0])\n        cylinder(h=25, r=3, $fn=12);\n}\n\n// Wheel base attachment points\nmodule wheel_base() {\n    for(angle = [0:72:359]) {\n        rotate([0, 0, angle])\n        translate([40, 0, 0])\n            cylinder(h=8, r=6, $fn=12);\n    }\n}\n\n// Seat adjustment mechanism\nmodule seat_controls() {\n    // Under-seat mechanism housing\n    translate([0, 0, seat_height - 2])\n        cube([chair_width - 30, chair_depth - 40, 4], center=true);\n    \n    // Height adjustment lever\n    translate([chair_width/2 - 25, 0, seat_height/2])\n    rotate([0, 90, 0])\n        cylinder(h=30, r=2, $fn=12);\n}\n\n// Main assembly\nunion() {\n    // Central support structure\n    central_support();\n    \n    // Wheel base\n    translate([0, 0, -10])\n        wheel_base();\n    \n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Seat controls\n    seat_controls();\n    \n    // Reinforcement ribs under seat\n    for(x = [-chair_width/3, 0, chair_width/3]) {\n        translate([x, 0, seat_height - 1])\n            cube([4, chair_depth - 20, 2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "kite",
    "openscad_code": "// Kite-Inspired Ergonomic Desk Organizer\n// Realistic style, medium complexity\n// Wall thickness: 2mm throughout for 3D printability\n\n$fn = 50;\n\n// Main kite body dimensions\nkite_width = 80;\nkite_height = 60;\nkite_depth = 40;\nwall_thickness = 2;\n\n// Pen holder slot dimensions\nslot_width = 12;\nslot_depth = 30;\nslot_spacing = 15;\n\n// Base dimensions\nbase_height = 8;\nbase_width = 90;\n\n// Support strut dimensions\nstrut_height = 35;\nstrut_width = 4;\nstrut_depth = 3;\n\n// Assembly\ndifference() {\n    union() {\n        // Main kite body - hollow diamond shape\n        hull() {\n            translate([0, 0, kite_depth/2]) \n                cube([kite_width, 2, kite_depth], center=true);\n            translate([0, kite_height, kite_depth/2]) \n                cube([2, kite_height, kite_depth], center=true);\n            translate([0, -kite_height, kite_depth/2]) \n                cube([2, kite_height, kite_depth], center=true);\n        }\n        \n        // Front face - diamond panel\n        translate([0, 0, kite_depth/2 + wall_thickness/2]) \n            cube([kite_width - wall_thickness*2, kite_height*2 - wall_thickness*2, wall_thickness], center=true);\n        \n        // Base platform\n        translate([0, 0, -kite_depth/2 - base_height/2]) \n            cube([base_width, base_width*0.7, base_height], center=true);\n        \n        // Support struts - kite frame structure\n        for(i = [-1, 1]) {\n            // Diagonal struts\n            translate([i * kite_width/4, i * kite_height/4, 0]) \n                rotate([0, 0, i * 45]) \n                cube([strut_width, strut_height, strut_depth], center=true);\n            \n            // Cross struts\n            translate([i * kite_width/3, 0, strut_height/3]) \n                cube([strut_width, strut_height*1.5, strut_depth], center=true);\n        }\n        \n        // Paper clip tray - small diamond on side\n        translate([kite_width/2 + 10, 0, 0]) \n        rotate([0, 0, 45]) \n        cube([20, 20, 8], center=true);\n    }\n    \n    // Hollow out main body\n    translate([0, 0, kite_depth/2 + wall_thickness]) \n        cube([kite_width - wall_thickness*4, kite_height*2 - wall_thickness*4, kite_depth + wall_thickness], center=true);\n    \n    // Pen and pencil slots\n    for(i = [-2, -1, 0, 1, 2]) {\n        translate([i * slot_spacing, 0, kite_depth/2 - slot_depth/2]) \n            cube([slot_width - wall_thickness, kite_height*2, slot_depth + wall_thickness], center=true);\n    }\n    \n    // Cable management hole\n    translate([0, kite_height*0.7, -kite_depth/2]) \n        rotate([90, 0, 0]) \n        cylinder(h=kite_depth, r=4, center=true);\n    \n    // Weight reduction in base\n    translate([0, 0, -kite_depth/2 - base_height/2]) \n        cube([base_width - wall_thickness*4, base_width*0.7 - wall_thickness*4, base_height], center=true);\n    \n    // Finger grip grooves on sides\n    for(i = [-1, 1]) {\n        translate([i * (base_width/2 - 2), 0, -kite_depth/2 - base_height/2]) \n            rotate([0, 90, 0]) \n            cylinder(h=20, r=3, center=true);\n    }\n}\n\n// Non-slip pads\nfor(x = [-base_width/2 + 10, base_width/2 - 10]) {\n    for(y = [-base_width*0.7/2 + 10, base_width*0.7/2 - 10]) {\n        translate([x, y, -kite_depth/2 - base_height - 1]) \n            cylinder(h=2, r=3, center=true);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "frisbee",
    "openscad_code": "// Frisbee Desk Organizer - OpenSCAD Code\n// Realistic style, medium complexity\n\n// Dimensions (mm)\nfrisbee_diameter = 120;\nfrisbee_thickness = 4;\nwall_thickness = 2;\nbase_height = 8;\npen_holder_height = 60;\nphone_slot_height = 15;\n\nmodule frisbee_base() {\n    // Main frisbee body\n    difference() {\n        // Outer disc shape\n        cylinder(h=frisbee_thickness, d=frisbee_diameter, $fn=100);\n        \n        // Center hole for structural lightness\n        cylinder(h=frisbee_thickness + 0.1, d=30, $fn=50);\n        \n        // Grip ridges on top surface\n        for(i = [1:8]) {\n            rotate([0, 0, i * 45]) {\n                translate([-frisbee_diameter/2 + 5, -1, frisbee_thickness - 0.5]) {\n                    cube([frisbee_diameter - 10, 2, 0.5]);\n                }\n            }\n        }\n    }\n}\n\nmodule base_support() {\n    // Structural base that connects to furniture\n    difference() {\n        // Main support block\n        cube([frisbee_diameter + 10, frisbee_diameter + 10, base_height], center=true);\n        \n        // Recessed area for frisbee\n        translate([0, 0, -0.1]) {\n            cylinder(h=base_height + 0.2, d=frisbee_diameter + 2, $fn=100);\n        }\n    }\n}\n\nmodule pen_holder() {\n    // Central pen/pencil holder\n    difference() {\n        // Outer cylinder\n        cylinder(h=pen_holder_height, d=25, $fn=50);\n        \n        // Inner hole for pens\n        cylinder(h=pen_holder_height + 0.2, d=20, $fn=50);\n        \n        // Access slots for easy removal\n        for(i = [1:4]) {\n            rotate([0, 0, i * 90]) {\n                translate([10, -wall_thickness, 0]) {\n                    cube([wall_thickness * 2, wall_thickness * 2, pen_holder_height]);\n                }\n            }\n        }\n    }\n}\n\nmodule phone_stand() {\n    // Phone/tablet support slot\n    difference() {\n        // Main block\n        translate([-15, -frisbee_diameter/2 + 20, 0]) {\n            cube([30, 50, phone_slot_height]);\n        }\n        \n        // Phone slot\n        translate([-13, -frisbee_diameter/2 + 25, wall_thickness]) {\n            cube([26, 40, phone_slot_height - wall_thickness * 2]);\n        }\n        \n        // Cable management hole\n        translate([0, -frisbee_diameter/2 + 20, wall_thickness/2]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=50, d=8, $fn=20);\n            }\n        }\n    }\n}\n\nmodule paper_clip_tray() {\n    // Small tray for paper clips and small items\n    difference() {\n        // Tray base\n        translate([frisbee_diameter/2 - 25, -15, 0]) {\n            cube([30, 30, 8]);\n        }\n        \n        // Recessed area\n        translate([frisbee_diameter/2 - 25 + wall_thickness, -15 + wall_thickness, wall_thickness]) {\n            cube([30 - wall_thickness * 2, 30 - wall_thickness * 2, 8]);\n        }\n        \n        // Dividing wall\n        translate([frisbee_diameter/2 - 10, -15, wall_thickness]) {\n            cube([wall_thickness, 30 - wall_thickness * 2, 8 - wall_thickness]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base support structure\n    translate([0, 0, 0]) {\n        base_support();\n    }\n    \n    // Frisbee element as organizer top\n    translate([0, 0, base_height]) {\n        frisbee_base();\n    }\n    \n    // Central pen holder\n    translate([0, 0, base_height + frisbee_thickness]) {\n        pen_holder();\n    }\n    \n    // Phone stand\n    translate([0, 0, base_height + frisbee_thickness]) {\n        phone_stand();\n    }\n    \n    // Paper clip tray\n    translate([0, 0, base_height + frisbee_thickness]) {\n        paper_clip_tray();\n    }\n    \n    // Additional structural supports\n    for(i = [1:4]) {\n        rotate([0, 0, i * 90]) {\n            translate([frisbee_diameter/2 - 10, 0, base_height/2]) {\n                cube([20, wall_thickness * 2, base_height], center=true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "jacks",
    "openscad_code": "// Realistic Jacks Furniture Stool (Medium Complexity)\n// 3D printable with 2mm walls and no overhangs\n// Dimensions: 120mm diameter x 450mm height\n\n// Main module for the entire stool\nmodule jacks_stool() {\n    // Central column structure\n    central_column();\n    \n    // Generate 6 legs radiating from center\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, 0])\n                leg_structure();\n    }\n    \n    // Seat top with ergonomic curves\n    seat_top();\n    \n    // Reinforcement rings for stability\n    base_ring();\n    mid_ring();\n}\n\n// Central vertical support column\nmodule central_column() {\n    // Main column - hollow cylinder with 2mm walls\n    difference() {\n        cylinder(h=400, d=40, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=396, d=36, $fn=32);\n    }\n    \n    // Top connector for seat\n    translate([0, 0, 400])\n    difference() {\n        cylinder(h=20, d=60, $fn=32);\n        translate([0, 0, 2])\n            cylinder(h=16, d=56, $fn=32);\n    }\n}\n\n// Individual leg structure radiating from center\nmodule leg_structure() {\n    // Main leg tube - hollow with 2mm walls\n    translate([30, 0, 50])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=200, d=30, $fn=16);\n        translate([0, 0, 2])\n            cylinder(h=196, d=26, $fn=16);\n    }\n    \n    // Foot pad for stability\n    translate([30, 0, 0])\n    difference() {\n        cylinder(h=10, d=40, $fn=32);\n        translate([0, 2, 2])\n            cylinder(h=6, d=36, $fn=32);\n    }\n    \n    // Connection bracket to central column\n    translate([20, 0, 50])\n    rotate([0, 90, 0])\n    difference() {\n        cube([20, 30, 30], center=true);\n        translate([0, 0, 2])\n            cube([16, 26, 26], center=true);\n    }\n}\n\n// Ergonomic seat top with slight curvature\nmodule seat_top() {\n    // Main seat disk\n    translate([0, 0, 420])\n    difference() {\n        cylinder(h=30, d=120, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=26, d=116, $fn=64);\n    }\n    \n    // Top surface with gentle dome\n    translate([0, 0, 450])\n    scale([1, 1, 0.15])\n    difference() {\n        sphere(d=120, $fn=64);\n        translate([0, 0, -2])\n            sphere(d=116, $fn=64);\n    }\n    \n    // Ventilation holes\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60 + 30])\n            translate([40, 0, 435])\n                cylinder(h=15, d=8, $fn=16);\n    }\n}\n\n// Base reinforcement ring\nmodule base_ring() {\n    translate([0, 0, 10])\n    difference() {\n        cylinder(h=15, d=200, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=11, d=196, $fn=64);\n    }\n}\n\n// Mid-height reinforcement ring\nmodule mid_ring() {\n    translate([0, 0, 200])\n    difference() {\n        cylinder(h=15, d=160, $fn=64);\n        translate([0, 0, 2])\n            cylinder(h=11, d=156, $fn=64);\n    }\n}\n\n// Generate the complete stool\njacks_stool();",
    "renders": true
  },
  {
    "office_supply": "marbles",
    "openscad_code": "// Marbles Office Desk Organizer\n// A realistic marble-textured desk caddy with pen/pencil holder and small storage tray\n// Overall size: 120mm x 80mm x 45mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule marble(radius, detail=32) {\n    // Create a marble with subtle surface texture using spheres\n    difference() {\n        sphere(r=radius, $fn=detail);\n        // Subtle indentations for realistic marble texture\n        for(i=[0:7]) {\n            rotate([0, 0, i*45]) \n                translate([radius*0.3, 0, radius*0.7])\n                    sphere(r=radius*0.08, $fn=16);\n        }\n    }\n}\n\nmodule pen_hole() {\n    // Single pen/pencil hole with tapered bottom\n    cylinder(h=40, r1=6, r2=5.5, $fn=32);\n}\n\nmodule organizer_base() {\n    // Main base structure - marble textured base with compartments\n    difference() {\n        // Outer shell\n        translate([0, 0, 22.5]) \n            cube([120, 80, 45], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 25]) \n            cube([116, 76, 41], center=true);\n        \n        // Rounded edges using cylinders\n        for(x=[-58, 58]) {\n            for(y=[-38, 38]) {\n                translate([x, y, 22.5]) \n                    cylinder(h=45, r=wall, $fn=16);\n            }\n        }\n    }\n    \n    // Add marble accent rings around edges\n    for(i=[0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle]) \n            translate([58, 0, 42]) \n                marble(4);\n    }\n}\n\nmodule pen_compartment() {\n    // Pen holder section with 5 holes\n    translate([-35, 0, 0]) {\n        difference() {\n            // Outer wall\n            translate([0, 0, 20]) \n                cube([40, 70, 40], center=true);\n            \n            // Hollow interior\n            translate([0, 0, 22]) \n                cube([36, 66, 38], center=true);\n            \n            // Pen holes\n            for(i=[-2:2]) {\n                translate([0, i*12, 0]) \n                    pen_hole();\n            }\n        }\n        \n        // Marble accent on front\n        translate([18, 0, 38]) \n            marble(6);\n    }\n}\n\nmodule storage_tray() {\n    // Small storage compartment for paperclips, etc.\n    translate([35, 0, 0]) {\n        difference() {\n            // Main tray\n            translate([0, 0, 15]) \n                cube([40, 70, 30], center=true);\n            \n            // Interior space\n            translate([0, 0, 17]) \n                cube([36, 66, 28], center=true);\n            \n            // Rounded inner corners\n            for(x=[-16, 16]) {\n                for(y=[-31, 31]) {\n                    translate([x, y, 17]) \n                        cylinder(h=28, r=3, $fn=16);\n                }\n            }\n        }\n        \n        // Marble decorative elements\n        for(i=[-1, 1]) {\n            translate([18, i*20, 28]) \n                marble(4);\n        }\n    }\n}\n\nmodule support_feet() {\n    // Four support feet with marbles\n    for(x=[-50, 50]) {\n        for(y=[-30, 30]) {\n            translate([x, y, -2.5]) {\n                cylinder(h=5, r=4, $fn=16);\n                translate([0, 0, 3]) \n                    marble(3);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    organizer_base();\n    pen_compartment();\n    storage_tray();\n    support_feet();\n    \n    // Additional marbles as decorative elements\n    translate([0, 0, 46]) marble(5);\n    translate([25, 25, 46]) marble(4);\n    translate([-25, -25, 46]) marble(4);\n}",
    "renders": true
  },
  {
    "office_supply": "spinningwheel",
    "openscad_code": "// OpenSCAD Spinning Wheel (realistic style, medium complexity)\n// Overall printable size ~100 mm tall\n\n// Parameters\n$fn = 32;\nwall = 2;           // wall thickness for 3D printing\nscaleFactor = 0.4;  // scale real proportions to ~100 mm\n\n// Helper module: wooden plank with rounded edges\nmodule plank(w, h, d) {\n    difference() {\n        cube([w, h, d]);\n        // round long edges\n        for(x = [0, w])\n            for(z = [0, d])\n                translate([x, -1, z])\n                    rotate([0, 90, 0])\n                        cylinder(h = h + 2, r = 1, center = true);\n    }\n}\n\n// Helper module: turned wood spindle\nmodule spindle(len, dia) {\n    cylinder(h = len, d = dia, center = true);\n    translate([0, 0, len/2 - 2])\n        sphere(d = dia + 2);\n    translate([0, 0, -len/2 + 2])\n        sphere(d = dia + 2);\n}\n\n// Base frame\nmodule baseFrame() {\n    // left & right legs\n    for(side = [-1, 1])\n        translate([side * 25, 0, 0])\n            rotate([0, 10, 0])\n                plank(4, 80, 40);\n\n    // front & back stretchers\n    for(y = [-1, 1])\n        translate([0, y * 35, 20])\n            plank(50, 4, 4);\n}\n\n// Treadle pedal\nmodule treadle() {\n    translate([0, -30, 10])\n        rotate([30, 0, 0])\n            plank(40, 15, 4);\n}\n\n// Main wheel\nmodule mainWheel() {\n    // rim\n    difference() {\n        cylinder(h = 6, d = 60, center = true);\n        cylinder(h = 7, d = 54, center = true);\n    }\n    // spokes\n    for(i = [0:30:330])\n        rotate([0, 0, i])\n            translate([27, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 3, d = 3, center = true);\n    // hub\n    translate([0, 0, 0])\n        cylinder(h = 10, d = 10, center = true);\n}\n\n// Upright post with maidens\nmodule upright() {\n    // post\n    translate([0, 15, 40])\n        rotate([0, -15, 0])\n            cylinder(h = 60, d = 8);\n\n    // maidens\n    for(side = [-1, 1])\n        translate([side * 6, 15, 90])\n            cylinder(h = 20, d = 4);\n}\n\n// Flyer assembly\nmodule flyer() {\n    // flyer shaft\n    translate([0, 15, 95])\n        rotate([90, 0, 0])\n            spindle(50, 6);\n    // bobbin\n    translate([0, 15, 95])\n        rotate([90, 0, 0])\n            cylinder(h = 35, d = 22);\n}\n\n// Drive band (as thin ring)\nmodule driveBand() {\n    rotate([0, 90, 0])\n        translate([0, 30, 0])\n            difference() {\n                cylinder(h = 1, d = 63, center = true);\n                cylinder(h = 2, d = 61, center = true);\n            }\n}\n\n// Ornament details (tiny knobs, pegs)\nmodule details() {\n    // distaff peg\n    translate([0, 40, 90])\n        rotate([30, 0, 0])\n            cylinder(h = 15, d = 3);\n    // four table legs\n    for(x = [-20, 20])\n        for(y = [-30, 30])\n            translate([x, y, 0])\n                cylinder(h = 8, d = 4);\n}\n\n// Assembly\nscale([scaleFactor, scaleFactor, scaleFactor]) {\n    union() {\n        baseFrame();\n        treadle();\n        translate([0, 0, 45]) rotate([0, 0, 0]) mainWheel();\n        upright();\n        flyer();\n        driveBand();\n        details();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "kaleidoscope",
    "openscad_code": "// Kaleidoscope Furniture - Office Desk Accessory\n// Dimensions: 120mm length, 45mm diameter\n// Features rotating mechanism and stable base\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nkaleidoscope_length = 120;\nkaleidoscope_diameter = 45;\nwall_thickness = 2;\nbase_width = 60;\nbase_depth = 40;\nbase_height = 15;\n\nmodule kaleidoscope_body() {\n    // Outer tube with viewing end\n    difference() {\n        cylinder(h = kaleidoscope_length, d = kaleidoscope_diameter, center = false);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cylinder(h = kaleidoscope_length - wall_thickness, \n                    d = kaleidoscope_diameter - 2*wall_thickness, \n                    center = false);\n        \n        // Viewing hole\n        translate([0, 0, kaleidoscope_length - wall_thickness - 2])\n            cylinder(h = 5, d = 25, center = false);\n    }\n    \n    // Eyepiece ring\n    translate([0, 0, kaleidoscope_length - wall_thickness - 2])\n        cylinder(h = 5, d = 30, d1 = 28, center = false);\n}\n\nmodule rotating_section() {\n    // Rotating barrel at the far end\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = 35, d = kaleidoscope_diameter, center = false);\n        \n        // Interior for beads\n        translate([0, 0, wall_thickness])\n            cylinder(h = 35 - wall_thickness, \n                    d = kaleidoscope_diameter - 2*wall_thickness, \n                    center = false);\n    }\n    \n    // Grip ridges\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([kaleidoscope_diameter/2, 0, 0])\n                cube([2, 1, 35], center = true);\n    }\n}\n\nmodule support_base() {\n    // Stable weighted base\n    difference() {\n        // Main base block\n        translate([-base_width/2, -base_depth/2, 0])\n            cube([base_width, base_depth, base_height]);\n        \n        // Weight cavity\n        translate([-base_width/2 + 5, -base_depth/2 + 5, 5])\n            cube([base_width - 10, base_depth - 10, base_height - 7]);\n        \n        // Cable channel\n        translate([-base_width/2 + 20, -2.5, 0])\n            cube([base_width - 40, 5, 5]);\n    }\n    \n    // Support pillars\n    for(x = [-20, 20]) {\n        translate([x, 0, base_height])\n            cylinder(h = 10, d = 8, center = false);\n    }\n    \n    // Support cradle\n    translate([0, 0, base_height + 10])\n    difference() {\n        rotate([90, 0, 0])\n            cylinder(h = 35, d = 50, center = false);\n        \n        // Hollow for tube\n        rotate([90, 0, 0])\n            translate([0, 0, wall_thickness])\n                cylinder(h = 35 - 2*wall_thickness, \n                        d = kaleidoscope_diameter, \n                        center = false);\n    }\n}\n\nmodule decorative_details() {\n    // Brand label plate\n    translate([kaleidoscope_diameter/2 + 1, 0, kaleidoscope_length/2])\n        rotate([0, 90, 0])\n            cube([20, 8, 2]);\n    \n    // Alignment dots\n    for(i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle])\n            translate([kaleidoscope_diameter/2 - 1, 0, 5])\n                sphere(d = 3);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    translate([0, 0, 25])\n        kaleidoscope_body();\n    \n    // Rotating section\n    translate([0, 0, 25])\n        rotating_section();\n    \n    // Base and support\n    translate([0, 0, 0])\n        support_base();\n    \n    // Details\n    translate([0, 0, 25])\n        decorative_details();\n}",
    "renders": true
  },
  {
    "office_supply": "skippingrope",
    "openscad_code": "// Skipping Rope Furniture - Office Desk Organizer\n// Combines the form of a skipping rope with functional desk storage\n\n// Overall dimensions: 120mm length, 60mm width, 80mm height\n\n// Parameters\n$fn = 32;\nrope_diameter = 6;\nhandle_diameter = 18;\nhandle_length = 40;\nframe_thickness = 2;\nbase_width = 60;\nbase_length = 120;\nbase_height = 8;\n\n// Main module\nmodule skipping_rope_furniture() {\n    // Base platform\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_length, base_width, base_height], center=true);\n        \n        // Pen tray cutout\n        translate([-20, 0, base_height-1])\n            cube([40, 30, base_height+2], center=true);\n    }\n    \n    // Left handle (pencil holder)\n    translate([-base_length/2 + handle_length/2, 0, handle_length/2 + base_height])\n        handle_assembly();\n    \n    // Right handle (phone stand)\n    translate([base_length/2 - handle_length/2, 0, handle_length/2 + base_height])\n        phone_stand_handle();\n    \n    // Rope segments as structural supports\n    // Front rope\n    translate([0, -base_width/2 + rope_diameter/2 + frame_thickness, base_height + 25])\n        rotate([90, 0, 0])\n            rope_segment(base_length - handle_length*2);\n    \n    // Rear rope\n    translate([0, base_width/2 - rope_diameter/2 - frame_thickness, base_height + 25])\n        rotate([90, 0, 0])\n            rope_segment(base_length - handle_length*2);\n    \n    // Side ropes (decorative)\n    translate([-base_length/2 + handle_length/2, 0, base_height + 40])\n        rotate([0, 90, 0])\n            rope_segment(40);\n    \n    translate([base_length/2 - handle_length/2, 0, base_height + 40])\n        rotate([0, 90, 0])\n            rope_segment(40);\n}\n\n// Handle module for pencil holder\nmodule handle_assembly() {\n    difference() {\n        // Outer handle\n        cylinder(h=handle_length, d=handle_diameter);\n        \n        // Inner cavity\n        translate([0, 0, 5])\n            cylinder(h=handle_length-5, d=handle_diameter-frame_thickness*2);\n        \n        // Ergonomic grip grooves\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([handle_diameter/2 - 2, 0, 10])\n                    cube([4, 2, handle_length-20], center=true);\n        }\n    }\n    \n    // Base ring for stability\n    translate([0, 0, 0])\n        cylinder(h=frame_thickness, d=handle_diameter+4);\n}\n\n// Handle module with phone stand\nmodule phone_stand_handle() {\n    union() {\n        // Main handle body\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter);\n            \n            // Inner cavity\n            translate([0, 0, 5])\n                cylinder(h=handle_length-5, d=handle_diameter-frame_thickness*2);\n            \n            // Phone slot\n            translate([handle_diameter/2 + 1, 0, handle_length*0.6])\n                rotate([90, 0, 0])\n                    cube([handle_diameter*0.6, 12, 8], center=true);\n        }\n        \n        // Phone support ledge\n        translate([handle_diameter/2 - 8, 0, handle_length*0.6 - 6])\n            cube([16, 14, 3], center=true);\n        \n        // Base ring\n        translate([0, 0, 0])\n            cylinder(h=frame_thickness, d=handle_diameter+4);\n    }\n}\n\n// Rope segment module\nmodule rope_segment(length) {\n    // Main rope body\n    difference() {\n        cylinder(h=length, d=rope_diameter);\n        \n        // Twist detail\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([rope_diameter/2 - 1, 0, 0])\n                    cube([2, rope_diameter, length], center=true);\n        }\n    }\n    \n    // End caps\n    translate([0, 0, 0])\n        sphere(d=rope_diameter+2);\n    translate([0, 0, length])\n        sphere(d=rope_diameter+2);\n}\n\n// Render the model\nskipping_rope_furniture();",
    "renders": true
  },
  {
    "office_supply": "tambourine",
    "openscad_code": "// Tambourine Office Chair\n// Realistic style with medium complexity\n\n// Overall dimensions\nchair_width = 120;\nchair_depth = 120;\nseat_height = 75;\nback_height = 180;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Seat module\nmodule seat() {\n    difference() {\n        // Main seat cushion\n        translate([0, 0, seat_height/2])\n            cube([chair_width, chair_depth, seat_height], center=true);\n        \n        // Hollow out bottom\n        translate([0, 0, wall_thickness/2])\n            cube([chair_width-wall_thickness*2, chair_depth-wall_thickness*2, seat_height-wall_thickness], center=true);\n        \n        // Rounded edges\n        for(x = [-chair_width/2+5, chair_width/2-5])\n            for(y = [-chair_depth/2+5, chair_depth/2-5])\n                translate([x, y, seat_height/2-5])\n                    cube([10, 10, 10], center=true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    union() {\n        // Main backrest\n        difference() {\n            translate([0, -chair_depth/4, back_height/2+seat_height])\n                cube([chair_width*0.8, chair_depth*0.6, back_height], center=true);\n            \n            // Hollow out\n            translate([0, -chair_depth/4, back_height/2+seat_height])\n                cube([chair_width*0.8-wall_thickness*2, chair_depth*0.6-wall_thickness*2, back_height-wall_thickness*2], center=true);\n        }\n        \n        // Support bar\n        translate([0, 0, seat_height+back_height/2])\n            cube([wall_thickness*3, chair_depth*0.4, back_height*1.1], center=true);\n    }\n}\n\n// Base module with 5 legs\nmodule base() {\n    union() {\n        // Center post\n        cylinder(h=seat_height-wall_thickness, r=wall_thickness*3, $fn=20);\n        \n        // Legs\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n                translate([0, wall_thickness*4, seat_height/2-wall_thickness/2])\n                    cube([wall_thickness*2, chair_width/2-wall_thickness*4, wall_thickness*2], center=true);\n        }\n        \n        // Wheels\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n                translate([0, chair_width/2-wall_thickness*2, wall_thickness*2])\n                    sphere(r=wall_thickness*2, $fn=20);\n        }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    union() {\n        // Left armrest\n        translate([-chair_width/2-wall_thickness, 0, seat_height+back_height/3])\n            cube([wall_thickness*3, chair_depth*0.3, wall_thickness*3]);\n        \n        // Right armrest\n        translate([chair_width/2+wall_thickness, 0, seat_height+back_height/3])\n            cube([wall_thickness*3, chair_depth*0.3, wall_thickness*3]);\n        \n        // Support posts\n        translate([-chair_width/2-wall_thickness, 0, seat_height/2+back_height/6])\n            cube([wall_thickness*3, wall_thickness*2, seat_height/2]);\n        \n        translate([chair_width/2+wall_thickness, 0, seat_height/2+back_height/6])\n            cube([wall_thickness*3, wall_thickness*2, seat_height/2]);\n    }\n}\n\n// Assemble the chair\nunion() {\n    seat();\n    backrest();\n    base();\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "harmonica",
    "openscad_code": "// Harmonica Desk Organizer - realistic style, medium complexity\n// Overall dimensions: 120mm wide x 60mm deep x 40mm high\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main harmonica body\nmodule harmonica_body() {\n    difference() {\n        // Outer shell with rounded edges\n        hull() {\n            translate([wall, wall, wall]) cube([120-2*wall, 60-2*wall, 40-2*wall]);\n            translate([wall, wall, 40-wall]) cube([120-2*wall, 60-2*wall, 0.01]);\n        }\n        \n        // Hollow interior\n        translate([wall*2, wall*2, wall*2]) \n            cube([120-4*wall, 60-4*wall, 40-3*wall]);\n    }\n}\n\n// Front cover plate with holes\nmodule cover_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, 38]) cube([120, 60, 2]);\n        \n        // Ventilation/cable holes\n        for(x = [10:10:110]) {\n            translate([x, 30, 38.5]) \n                cylinder(h=2, d=6, $fn=16);\n        }\n        \n        // USB cable slot\n        translate([115, 25, 38.5]) \n            cube([5, 10, 2.5]);\n    }\n}\n\n// Rear comb structure (organizer compartments)\nmodule comb_structure() {\n    // Base comb\n    translate([wall, wall, 0]) \n        cube([120-2*wall, 60-2*wall, 20]);\n    \n    // Vertical dividers creating compartments\n    for(x = [20:20:100]) {\n        translate([x-wall/2, wall, 0]) \n            cube([wall, 60-2*wall, 20]);\n    }\n    \n    // Horizontal divider\n    translate([wall, 30-wall/2, 10]) \n        cube([120-2*wall, wall, 10]);\n}\n\n// Side mouthpiece details (handles)\nmodule handles() {\n    // Left handle\n    translate([-5, 20, 10]) \n        rotate([0, 90, 0])\n            cylinder(h=10, d=8, $fn=16);\n    \n    // Right handle\n    translate([125, 20, 10]) \n        rotate([0, 90, 0])\n            cylinder(h=10, d=8, $fn=16);\n}\n\n// Rubber feet for stability\nmodule feet() {\n    for(x = [10, 110]) {\n        for(y = [10, 50]) {\n            translate([x, y, -1]) \n                cylinder(h=2, d=6, $fn=12);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    harmonica_body();\n    cover_plate();\n    comb_structure();\n    handles();\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "drum",
    "openscad_code": "// Drum furniture piece - Medium complexity realistic style\n// Overall dimensions: 120mm diameter, 180mm height\n// Wall thickness: 2mm throughout\n\n// Drum body shell\nmodule drum_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=140, r1=60, r2=60, $fn=100);\n        \n        // Inner hollow space (2mm wall)\n        translate([0, 0, -1])\n            cylinder(h=142, r1=58, r2=58, $fn=100);\n    }\n}\n\n// Drum top membrane\nmodule drum_top() {\n    difference() {\n        // Membrane base\n        cylinder(h=3, r1=60, r2=60, $fn=100);\n        \n        // Inner membrane surface\n        translate([0, 0, -1])\n            cylinder(h=4, r1=58, r2=58, $fn=100);\n    }\n}\n\n// Drum bottom membrane\nmodule drum_bottom() {\n    translate([0, 0, 137])\n        drum_top();\n}\n\n// Tension ring for top\nmodule tension_ring_top() {\n    difference() {\n        // Outer ring\n        cylinder(h=8, r1=63, r2=63, $fn=100);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cylinder(h=10, r1=61, r2=61, $fn=100);\n    }\n}\n\n// Tension ring for bottom\nmodule tension_ring_bottom() {\n    translate([0, 0, 132])\n        tension_ring_top();\n}\n\n// Tension rod assembly\nmodule tension_rod(position, height) {\n    rotate([0, 0, position])\n        translate([62, 0, height])\n            rotate([90, 0, 0])\n                cylinder(h=15, r1=1.5, r2=1.5, $fn=16);\n}\n\n// Lug housing\nmodule lug_housing(position, height) {\n    rotate([0, 0, position])\n        translate([58, 0, height])\n            difference() {\n                // Main lug body\n                cube([10, 4, 12], center=true);\n                \n                // Mounting hole\n                translate([2, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=5, r1=2, r2=2, $fn=16);\n            }\n}\n\n// Drum legs/floor stand\nmodule drum_leg() {\n    difference() {\n        // Main leg\n        cube([8, 8, 40], center=true);\n        \n        // Lightening hole\n        translate([0, 0, 10])\n            cube([4, 4, 20], center=true);\n    }\n}\n\n// Leg mounting bracket\nmodule leg_bracket(position) {\n    rotate([0, 0, position])\n        translate([50, 0, -20])\n            cube([12, 6, 4], center=true);\n}\n\n// Main assembly\nunion() {\n    // Drum body\n    drum_body();\n    \n    // Top and bottom membranes\n    translate([0, 0, 140])\n        drum_top();\n    drum_bottom();\n    \n    // Tension rings\n    translate([0, 0, 140])\n        tension_ring_top();\n    tension_ring_bottom();\n    \n    // Tension rods and lugs\n    for(i = [0:30:330]) {\n        tension_rod(i, 140);\n        tension_rod(i, 0);\n        lug_housing(i, 134);\n        lug_housing(i, 6);\n    }\n    \n    // Floor stand legs (3 legs at 120 degrees)\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([40, 0, -20])\n                drum_leg();\n        leg_bracket(i);\n    }\n}\n\n// Center support post for structural integrity\ntranslate([0, 0, 70])\n    cylinder(h=140, r1=5, r2=5, $fn=20);",
    "renders": true
  },
  {
    "office_supply": "xylophone",
    "openscad_code": "// Xylophone Office Desk Organizer\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 32;\nbar_thickness = 2;\nbar_width = 8;\nbar_height = 4;\nnum_bars = 8;\nbase_length = 120;\nbase_width = 50;\nbase_height = 6;\nleg_height = 25;\nleg_thickness = 3;\nsupport_width = 4;\nmallet_diameter = 6;\nmallet_length = 80;\n\nmodule xylophone_base() {\n    // Main base platform\n    difference() {\n        // Base\n        union() {\n            translate([0, 0, base_height/2])\n                cube([base_length, base_width, base_height], center=true);\n            \n            // Front and back support rails\n            translate([0, base_width/2 - support_width/2, base_height + leg_height/2])\n                cube([base_length - 10, support_width, leg_height], center=true);\n            translate([0, -base_width/2 + support_width/2, base_height + leg_height/2])\n                cube([base_length - 10, support_width, leg_height], center=true);\n        }\n        \n        // Cable management hole\n        translate([0, 0, base_height])\n            cylinder(h=base_height + 1, r=8, center=false);\n    }\n}\n\nmodule xylophone_legs() {\n    // Four legs with rounded feet\n    for(x = [-base_length/2 + 5, base_length/2 - 5])\n    for(y = [-base_width/2 + 5, base_width/2 - 5]) {\n        // Leg post\n        translate([x, y, base_height + leg_height/2])\n            cube([leg_thickness, leg_thickness, leg_height], center=true);\n        \n        // Rounded foot\n        translate([x, y, base_height + leg_height + 2])\n            sphere(r=3);\n    }\n}\n\nmodule xylophone_bars() {\n    // Graduated bars with proper spacing\n    bar_lengths = [35, 40, 45, 50, 55, 60, 65, 70];\n    spacing = 5;\n    \n    for(i = [0:num_bars-1]) {\n        len = bar_lengths[i];\n        offset = -sum(bar_lengths)/2 - (num_bars-1)*spacing/2 + sum([for(j=[0:i-1]) bar_lengths[j] + spacing]) + len/2;\n        \n        // Each bar\n        translate([offset, 0, base_height + leg_height + bar_height/2 + 2])\n            cube([len, bar_width, bar_height], center=true);\n        \n        // Support posts under each end\n        translate([offset - len/2 + 2, 0, base_height + leg_height + bar_height/2])\n            cylinder(h=leg_height + 2, r=1, center=false);\n        translate([offset + len/2 - 2, 0, base_height + leg_height + bar_height/2])\n            cylinder(h=leg_height + 2, r=1, center=false);\n    }\n}\n\nmodule mallet_holder() {\n    // Side bracket for holding mallets\n    translate([base_length/2 + 5, 0, base_height + leg_height/2])\n        rotate([0, 90, 0])\n            difference() {\n                // Main holder\n                cylinder(h=20, r=8, center=true);\n                \n                // Mallet holes\n                for(i = [-1, 1]) {\n                    translate([0, 0, i*7])\n                        cylinder(h=22, r=mallet_diameter/2 + 1, center=true);\n                }\n            }\n}\n\nmodule mallets() {\n    // Two mallets\n    for(i = [-1, 1]) {\n        // Handle\n        translate([base_length/2 + 5, 0, base_height + leg_height/2 + i*7])\n            rotate([90, 0, 0])\n                cylinder(h=mallet_length - 10, r=2, center=false);\n        \n        // Mallet head\n        translate([base_length/2 + 5 + mallet_length - 10, 0, base_height + leg_height/2 + i*7])\n            sphere(r=mallet_diameter/2);\n    }\n}\n\n// Assembly\nunion() {\n    xylophone_base();\n    xylophone_legs();\n    xylophone_bars();\n    mallet_holder();\n    mallets();\n}",
    "renders": true
  },
  {
    "office_supply": "flute",
    "openscad_code": "// Flute Furniture - 3D Printed Flute Stand with Realistic Design\n// Size: ~120mm tall, 80mm wide, 60mm deep\n\n// Overall dimensions\nflute_length = 110;\nflute_diameter = 12;\nbase_width = 80;\nbase_depth = 60;\nbase_height = 8;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base module with rounded edges\nmodule base() {\n    difference() {\n        // Main base block\n        translate([-base_width/2, -base_depth/2, 0])\n            cube([base_width, base_depth, base_height]);\n        \n        // Rounded corners\n        translate([-base_width/2 + wall_thickness, -base_depth/2 + wall_thickness, -0.1])\n            cube([wall_thickness*2, wall_thickness*2, base_height + 0.2]);\n        translate([base_width/2 - wall_thickness*3, -base_depth/2 + wall_thickness, -0.1])\n            cube([wall_thickness*2, wall_thickness*2, base_height + 0.2]);\n        translate([-base_width/2 + wall_thickness, base_depth/2 - wall_thickness*3, -0.1])\n            cube([wall_thickness*2, wall_thickness*2, base_height + 0.2]);\n        translate([base_width/2 - wall_thickness*3, base_depth/2 - wall_thickness*3, -0.1])\n            cube([wall_thickness*2, wall_thickness*2, base_height + 0.2]);\n    }\n}\n\n// Support arms for flute\nmodule support_arms() {\n    // Left support\n    translate([-20, 0, base_height]) {\n        rotate([0, -15, 0])\n            cylinder(h=30, d=wall_thickness*3, $fn=20);\n    }\n    \n    // Right support\n    translate([20, 0, base_height]) {\n        rotate([0, 15, 0])\n            cylinder(h=30, d=wall_thickness*3, $fn=20);\n    }\n}\n\n// Flute body with realistic details\nmodule flute_body() {\n    // Main tube\n    translate([0, 0, base_height + 25])\n        rotate([90, 0, 0])\n            cylinder(h=flute_length, d=flute_diameter, $fn=32);\n    \n    // Mouthpiece\n    translate([0, 0, base_height + 25 + flute_length - 8])\n        rotate([90, 0, 0])\n            cylinder(h=10, d=flute_diameter + 2, $fn=32);\n    \n    // Keys/holes along flute\n    for(i = [1:8]) {\n        // Finger holes\n        translate([0, 0, base_height + 25 + 10 + i*10])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=3, d=flute_diameter + 1, $fn=32);\n                    cylinder(h=4, d=flute_diameter - 4, $fn=32);\n                }\n        \n        // Key mechanisms\n        translate([flute_diameter/2 + 2, 0, base_height + 25 + 8 + i*10])\n            rotate([90, 0, 0])\n                cube([3, 5, 1]);\n    }\n}\n\n// Decorative elements\nmodule decorative_ring() {\n    // Ring around base\n    translate([0, 0, base_height])\n        cylinder(h=wall_thickness, d=base_width - 10, $fn=32);\n    \n    // Small feet\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([base_width/2 - 8, base_depth/2 - 8, 0])\n                cylinder(h=wall_thickness*2, d=wall_thickness*4, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    support_arms();\n    flute_body();\n    decorative_ring();\n}",
    "renders": true
  },
  {
    "office_supply": "trumpet",
    "openscad_code": "// Trumpet Furniture Item - Realistic Style\n// Dimensions: ~120mm length, ~60mm height\n\n$fn = 64;\n\n// Main body parameters\nbody_radius = 22;\nbody_length = 80;\nwall_thickness = 2;\n\n// Bell flare\nbell_length = 35;\nbell_start_radius = 22;\nbell_end_radius = 45;\n\n// Valve section\nvalve_block_length = 25;\nvalve_block_radius = 15;\nvalve_height = 18;\nvalve_radius = 3;\n\n// Mouthpiece\nmouthpiece_length = 15;\nmouthpiece_radius = 5;\n\n// Lead pipe\nlead_pipe_length = 30;\nlead_pipe_radius = 6;\n\n// Support structure\nleg_length = 40;\nleg_radius = 3;\nbase_radius = 25;\n\nmodule trumpet_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = body_length, r = body_radius, center = true);\n        cylinder(h = body_length + 2, r = body_radius - wall_thickness, center = true);\n    }\n}\n\nmodule bell_flare() {\n    // Bell flare at the end\n    translate([body_length/2 + bell_length/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = bell_length, r1 = bell_start_radius, r2 = bell_end_radius);\n                cylinder(h = bell_length + 1, r1 = bell_start_radius - wall_thickness, r2 = bell_end_radius - wall_thickness);\n            }\n        }\n    }\n}\n\nmodule valve_section() {\n    // Valve block\n    translate([-body_length/4, 0, body_radius + valve_height/2]) {\n        difference() {\n            cube([valve_block_length, valve_block_radius*2, valve_height], center = true);\n            cube([valve_block_length + 1, (valve_block_radius - wall_thickness)*2, valve_height - wall_thickness], center = true);\n        }\n        \n        // Three valves\n        for(i = [-1, 0, 1]) {\n            translate([i * 7, 0, valve_height/2 + 2]) {\n                cylinder(h = 12, r = valve_radius, center = true);\n            }\n        }\n    }\n}\n\nmodule mouthpiece() {\n    // Mouthpiece\n    translate([-body_length/2 - mouthpiece_length/2, 0, 0]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = mouthpiece_length, r1 = lead_pipe_radius, r2 = mouthpiece_radius);\n                cylinder(h = mouthpiece_length + 1, r1 = lead_pipe_radius - wall_thickness, r2 = mouthpiece_radius - wall_thickness);\n            }\n        }\n    }\n}\n\nmodule lead_pipe() {\n    // Lead pipe connecting to valves\n    translate([-body_length/2 + 10, 0, body_radius/2]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = lead_pipe_length, r = lead_pipe_radius);\n                cylinder(h = lead_pipe_length + 1, r = lead_pipe_radius - wall_thickness);\n            }\n        }\n    }\n}\n\nmodule support_structure() {\n    // Base support\n    translate([0, 0, -leg_length - body_radius]) {\n        difference() {\n            cylinder(h = leg_length, r = base_radius);\n            cylinder(h = leg_length + 1, r = base_radius - wall_thickness);\n        }\n        \n        // Three support legs\n        for(i = [0, 120, 240]) {\n            rotate([0, 0, i]) {\n                translate([base_radius - leg_radius, 0, -leg_length/2]) {\n                    difference() {\n                        cylinder(h = leg_length, r = leg_radius);\n                        cylinder(h = leg_length + 1, r = leg_radius - wall_thickness);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tuning_slides() {\n    // Main tuning slide\n    translate([body_length/4, body_radius + 3, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h = 20, r = 7);\n                cylinder(h = 21, r = 7 - wall_thickness);\n            }\n        }\n    }\n    \n    // Second valve slide\n    translate([-body_length/4 - 10, 0, body_radius + valve_height + 5]) {\n        rotate([0, 90, 0]) {\n            difference() {\n                cylinder(h = 15, r = 5);\n                cylinder(h = 16, r = 5 - wall_thickness);\n            }\n        }\n    }\n}\n\n// Assemble the trumpet furniture item\nunion() {\n    // Main components\n    trumpet_body();\n    bell_flare();\n    mouthpiece();\n    \n    // Connective elements\n    lead_pipe();\n    valve_section();\n    tuning_slides();\n    \n    // Support structure\n    support_structure();\n}",
    "renders": true
  },
  {
    "office_supply": "violin",
    "openscad_code": "// Violin-shaped desk organizer (medium complexity, realistic style)\n// Overall size: 120mm x 60mm x 40mm\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main body module\nmodule violin_body() {\n    // Lower bout (body lower part)\n    union() {\n        // Main body shape\n        hull() {\n            translate([0, 0, 0]) cylinder(h = 40, r1 = 25, r2 = 25);\n            translate([0, -30, 0]) cylinder(h = 40, r1 = 20, r2 = 20);\n            translate([0, -60, 0]) cylinder(h = 40, r1 = 15, r2 = 15);\n        }\n        \n        // Upper bout (body upper part)\n        translate([0, 75, 0]) {\n            hull() {\n                translate([0, 0, 0]) cylinder(h = 35, r1 = 12, r2 = 12);\n                translate([0, 20, 0]) cylinder(h = 35, r1 = 8, r2 = 8);\n            }\n        }\n        \n        // C-bout waist\n        translate([0, 35, 0]) {\n            scale([0.7, 1, 1]) cylinder(h = 38, r1 = 18, r2 = 18);\n        }\n    }\n}\n\n// Hollow out the body for storage\nmodule violin_shell() {\n    difference() {\n        violin_body();\n        \n        // Inner cavity for storage\n        translate([0, 0, wall_thickness]) {\n            scale([0.8, 0.8, 0.8]) violin_body();\n        }\n        \n        // Bottom opening\n        translate([0, 0, -1]) cube([50, 120, 2], center = true);\n    }\n}\n\n// Fingerboard (functional pen holder)\nmodule fingerboard() {\n    // Main fingerboard\n    translate([0, 90, 40]) {\n        rotate([0, 90, 0]) {\n            linear_extrude(height = 50, center = true) {\n                polygon(points = [\n                    [-2, 0], [2, 0], [3, 25], [-3, 25]\n                ]);\n            }\n        }\n    }\n    \n    // Pen holes along fingerboard\n    for (i = [0:4]) {\n        translate([0, 90 + i * 5, 42]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 4, r = 3.5, center = true);\n            }\n        }\n    }\n}\n\n// Tailpiece (business card holder)\nmodule tailpiece() {\n    translate([0, -70, 40]) {\n        difference() {\n            // Main tailpiece shape\n            hull() {\n                cube([20, 25, 2], center = true);\n                translate([0, 0, 10]) cube([15, 20, 2], center = true);\n            }\n            \n            // Card slot\n            translate([0, 0, 5]) cube([18, 22, 12], center = true);\n        }\n    }\n}\n\n// Bridge (divider)\nmodule bridge() {\n    translate([0, 20, 40]) {\n        difference() {\n            // Bridge shape\n            hull() {\n                cube([30, 2, 15], center = true);\n                translate([0, 0, 7]) cube([25, 2, 10], center = true);\n            }\n            \n            // Cutouts for strings (functional slots)\n            for (i = [-1, 0, 1]) {\n                translate([i * 8, 0, 7]) cube([2, 3, 8], center = true);\n            }\n        }\n    }\n}\n\n// Sound holes (decorative and functional for grip)\nmodule f_holes() {\n    // Left f-hole\n    translate([-15, 35, 20]) {\n        rotate([0, 0, 15]) {\n            linear_extrude(height = 2) {\n                polygon(points = [\n                    [0, 0], [2, 3], [2, 12], [1, 15], [1, 18], [2, 21], [2, 24],\n                    [0, 27], [-2, 24], [-2, 21], [-1, 18], [-1, 15], [-2, 12], [-2, 3]\n                ]);\n            }\n        }\n    }\n    \n    // Right f-hole (mirrored)\n    mirror([1, 0, 0]) {\n        translate([-15, 35, 20]) {\n            rotate([0, 0, 15]) {\n                linear_extrude(height = 2) {\n                    polygon(points = [\n                        [0, 0], [2, 3], [2, 12], [1, 15], [1, 18], [2, 21], [2, 24],\n                        [0, 27], [-2, 24], [-2, 21], [-1, 18], [-1, 15], [-2, 12], [-2, 3]\n                    ]);\n                }\n            }\n        }\n    }\n}\n\n// Scroll (paperclip holder)\nmodule scroll() {\n    translate([0, 105, 38]) {\n        // Spiral scroll shape\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([6 - i, 0, 0]) {\n                    cylinder(h = 4, r = 4 - i * 0.5, center = true);\n                }\n            }\n        }\n        \n        // Center pegbox for clips\n        translate([0, 0, 0]) {\n            cylinder(h = 8, r1 = 3, r2 = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body with storage\n    violin_shell();\n    \n    // Functional elements\n    fingerboard();\n    tailpiece();\n    bridge();\n    scroll();\n    \n    // Decorative elements\n    f_holes();\n}",
    "renders": true
  },
  {
    "office_supply": "guitar",
    "openscad_code": "// Guitar-shaped desk organizer (realistic style, medium complexity)\n// Overall size: ~120mm long, 45mm wide, 50mm tall\n// 3D printable with 2mm walls and no overhangs\n\n// module for rounded rectangle (for body contours)\nmodule rounded_rect(w, l, h, r) {\n    hull() {\n        for (x = [r, w-r], y = [r, l-r]) {\n            translate([x, y, 0]) cylinder(r=r, h=h, $fn=16);\n        }\n    }\n}\n\n// Guitar body with hollow compartments\nmodule guitar_body() {\n    difference() {\n        // Main body shape\n        union() {\n            // Upper bout\n            translate([10, 20, 0]) rounded_rect(25, 30, 8, 5);\n            // Lower bout\n            translate([5, 0, 0]) rounded_rect(35, 45, 8, 8);\n            // Waist\n            hull() {\n                translate([15, 30, 4]) cube([15, 10, 4]);\n                translate([10, 45, 4]) cube([25, 10, 4]);\n            }\n        }\n        \n        // Compartments for office supplies\n        // Pen holder\n        translate([20, 35, 0]) cylinder(r=6, h=8, $fn=32);\n        // Paperclip tray\n        translate([15, 10, 0]) cube([20, 15, 8]);\n        // Small items tray\n        translate([25, 25, 0]) cube([10, 8, 8]);\n        \n        // Wall thickness compensation\n        translate([20, 35, -0.5]) cylinder(r=4, h=10, $fn=32);\n        translate([16, 11, -0.5]) cube([18, 13, 10]);\n        translate([26, 26, -0.5]) cube([8, 6, 10]);\n    }\n}\n\n// Guitar neck with tuning pegs\nmodule guitar_neck() {\n    // Neck shaft\n    translate([42, 30, 5]) cube([50, 8, 4]);\n    \n    // Headstock\n    hull() {\n        translate([90, 28, 5]) cube([20, 12, 4]);\n        translate([85, 31, 5]) cube([10, 6, 4]);\n    }\n    \n    // Tuning pegs (as pen holders)\n    for (i = [0:3]) {\n        translate([95, 30 + i*2.5, 9]) cylinder(r=2, h=4, $fn=12);\n    }\n    for (i = [0:3]) {\n        translate([95, 30 + i*2.5, 0]) cylinder(r=2, h=4, $fn=12);\n    }\n}\n\n// Sound hole as cable management hole\nmodule sound_hole() {\n    difference() {\n        // Raised ring around hole\n        translate([20, 25, 8]) cylinder(r=8, h=3, $fn=32);\n        translate([20, 25, 7.5]) cylinder(r=6, h=5, $fn=32);\n    }\n}\n\n// Bridge as business card holder\nmodule bridge() {\n    difference() {\n        // Main bridge structure\n        translate([15, 5, 8]) cube([20, 6, 6]);\n        // Card slot\n        translate([16, 6, 12]) cube([18, 4, 3]);\n    }\n}\n\n// Strings as wire separators\nmodule strings() {\n    for (i = [0:5]) {\n        translate([40 + i*2, 30, 0]) cube([50, 0.5, 9]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    guitar_body();\n    guitar_neck();\n    sound_hole();\n    bridge();\n    strings();\n    \n    // Support feet\n    translate([5, 5, 0]) cylinder(r=3, h=2, $fn=16);\n    translate([35, 5, 0]) cylinder(r=3, h=2, $fn=16);\n    translate([5, 40, 0]) cylinder(r=3, h=2, $fn=16);\n    translate([35, 40, 0]) cylinder(r=3, h=2, $fn=16);\n}",
    "renders": true
  },
  {
    "office_supply": "piano",
    "openscad_code": "// Realistic Piano Furniture Model - Medium Complexity\n// 3D printable upright piano with furniture details\n// Dimensions: 60mm (W) x 50mm (D) x 80mm (H)\n\n// Overall dimensions\npiano_width = 60;\npiano_depth = 50;\npiano_height = 80;\nwall_thickness = 2;\n\n// Main piano body\nmodule piano_body() {\n    // Base structure\n    difference() {\n        // Main body block\n        cube([piano_width, piano_depth, piano_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([piano_width - 2*wall_thickness, \n                  piano_depth - 2*wall_thickness, \n                  piano_height - 2*wall_thickness]);\n    }\n}\n\n// Top lid with hinge detail\nmodule piano_lid() {\n    // Main lid\n    translate([0, -2, piano_height - 4])\n        cube([piano_width, piano_depth + 2, 4]);\n    \n    // Hinge detail\n    for(i = [5:10:piano_width-5]) {\n        translate([i, -3, piano_height - 2])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=1, $fn=8);\n    }\n}\n\n// Keyboard section\nmodule keyboard_section() {\n    // Keyboard shelf\n    translate([-2, piano_depth*0.7, 30])\n        cube([piano_width + 4, 8, 5]);\n    \n    // White keys\n    for(i = [5:3.5:piano_width-5]) {\n        translate([i, piano_depth*0.7 + 1, 35.5])\n            cube([3, 6, 1.5]);\n    }\n    \n    // Black keys\n    for(i = [7:7:piano_width-7]) {\n        translate([i, piano_depth*0.7 + 0.5, 36.5])\n            cube([2, 5, 2.5]);\n    }\n}\n\n// Front panel with decorative elements\nmodule front_panel() {\n    // Main panel\n    translate([-2, 0, 30])\n        cube([wall_thickness, piano_depth*0.7, 25]);\n    \n    // Decorative molding\n    translate([-2.5, 5, 35])\n        cube([wall_thickness + 1, piano_depth - 10, 2]);\n    \n    // Pedal cutouts\n    for(i = [0:1:2]) {\n        translate([-1, piano_depth*0.3 + i*8, 10])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=2, $fn=12);\n    }\n}\n\n// Side panels with structural supports\nmodule side_panels() {\n    // Left panel\n    translate([-1, 0, 0])\n        cube([wall_thickness, piano_depth, piano_height]);\n    \n    // Right panel\n    translate([piano_width - wall_thickness + 1, 0, 0])\n        cube([wall_thickness, piano_depth, piano_height]);\n    \n    // Back panel\n    translate([0, -1, 0])\n        cube([piano_width, wall_thickness, piano_height]);\n}\n\n// Pedals\nmodule pedals() {\n    translate([piano_width/2, piano_depth*0.3, 5])\n        rotate([45, 0, 0])\n            cylinder(h=15, r=1, $fn=8);\n    \n    translate([piano_width/2 - 8, piano_depth*0.3, 5])\n        rotate([45, 0, 0])\n            cylinder(h=15, r=1, $fn=8);\n    \n    translate([piano_width/2 + 8, piano_depth*0.3, 5])\n        rotate([45, 0, 0])\n            cylinder(h=15, r=1, $fn=8);\n}\n\n// Music stand\nmodule music_stand() {\n    translate([piano_width/2 - 15, piano_depth*0.8, 45])\n        rotate([60, 0, 0])\n            cube([30, 2, 15]);\n    \n    // Stand supports\n    translate([piano_width/2 - 10, piano_depth*0.8 - 5, 45])\n        cube([2, 5, 2]);\n    \n    translate([piano_width/2 + 8, piano_depth*0.8 - 5, 45])\n        cube([2, 5, 2]);\n}\n\n// Casters for mobility\nmodule casters() {\n    // Front casters\n    translate([5, 2, 0])\n        sphere(r=3, $fn=8);\n    \n    translate([piano_width - 5, 2, 0])\n        sphere(r=3, $fn=8);\n    \n    // Rear casters\n    translate([5, piano_depth - 2, 0])\n        sphere(r=3, $fn=8);\n    \n    translate([piano_width - 5, piano_depth - 2, 0])\n        sphere(r=3, $fn=8);\n}\n\n// Main assembly\nunion() {\n    piano_body();\n    piano_lid();\n    keyboard_section();\n    front_panel();\n    side_panels();\n    pedals();\n    music_stand();\n    casters();\n}",
    "renders": true
  },
  {
    "office_supply": "accordion",
    "openscad_code": "// Accordion-style folding furniture organizer\n// Medium complexity realistic style 3D printable design\n// Overall size: ~120mm x 80mm x 60mm when folded\n\n$fn = 36;\nwall_thickness = 2;\n\nmodule accordion_panel(width, height, depth, has_tabs = false) {\n    difference() {\n        // Main panel body\n        cube([width, height, depth]);\n        \n        // Lightening holes for 3D printing efficiency\n        translate([wall_thickness*2, wall_thickness*2, -0.1])\n            cube([width-wall_thickness*4, height-wall_thickness*4, depth+0.2]);\n        \n        // Finger grip slots\n        for(i = [1:3]) {\n            translate([width/4*i, height-8, depth-wall_thickness])\n                cube([6, 6, wall_thickness+0.2]);\n        }\n    }\n    \n    // Hinge pins\n    if(has_tabs) {\n        translate([0, -wall_thickness/2, -wall_thickness])\n            cylinder(h=wall_thickness*2, r=wall_thickness);\n        translate([width, -wall_thickness/2, -wall_thickness])\n            cylinder(h=wall_thickness*2, r=wall_thickness);\n    }\n}\n\nmodule hinge_joint() {\n    difference() {\n        union() {\n            cylinder(h=10, r=wall_thickness);\n            translate([-wall_thickness, 0, 0])\n                cube([wall_thickness*2, wall_thickness*2, 10]);\n        }\n        // Pin hole\n        translate([0, 0, -0.1])\n            cylinder(h=10.2, r=wall_thickness-0.5);\n    }\n}\n\nmodule accordion_frame() {\n    // Base frame\n    difference() {\n        cube([120, 10, 60]);\n        translate([wall_thickness, -0.1, wall_thickness])\n            cube([120-wall_thickness*2, 10.2, 60-wall_thickness*2]);\n    }\n    \n    // Side supports\n    for(side = [0, 1]) {\n        translate([side*120-5, 0, 0])\n            cube([10, 10, 60]);\n    }\n}\n\nmodule accordion_structure() {\n    accordion_frame();\n    \n    // Folding panels\n    panel_width = 110/5;\n    panel_height = 50;\n    \n    for(i = [0:4]) {\n        translate([5 + i*panel_width + i*2, 10, 5])\n            accordion_panel(panel_width, panel_height, wall_thickness, i < 4);\n    }\n    \n    // Hinge connections\n    for(i = [0:3]) {\n        translate([5 + (i+1)*panel_width + i*2 + wall_thickness, 10+panel_height-wall_thickness, 5])\n            rotate([90, 0, 0])\n                hinge_joint();\n    }\n    \n    // Shelf supports\n    for(i = [0:2]) {\n        translate([30 + i*30, 10, 30])\n            cube([wall_thickness*2, 20, wall_thickness*2]);\n    }\n    \n    // Support braces\n    translate([60, 10, 55])\n        cube([wall_thickness*2, 30, wall_thickness*2]);\n}\n\naccordion_structure();",
    "renders": true
  },
  {
    "office_supply": "harmonium",
    "openscad_code": "// Harmonium furniture item\n// Medium complexity realistic style\n\n$fn = 50;\n\n// Main body dimensions\nbody_length = 120;\nbody_width = 70;\nbody_height = 80;\n\n// Wall thickness\nwall = 2;\n\n// Top panel with keys\nmodule top_panel() {\n    difference() {\n        // Main top surface\n        translate([0, 0, body_height - wall])\n            cube([body_length, body_width, wall], center = true);\n        \n        // Key slots\n        for (i = [-5:5]) {\n            translate([i * 8, 0, 0])\n                cube([6, body_width - 20, wall + 1], center = true);\n        }\n    }\n}\n\n// Side panels\nmodule side_panel() {\n    difference() {\n        // Left side\n        translate([-body_length/2 - wall/2, 0, body_height/2])\n            cube([wall, body_width, body_height], center = true);\n        \n        // Handle hole\n        translate([-body_length/2 - wall, 0, body_height * 0.75])\n            rotate([0, 90, 0])\n                cylinder(h = wall + 1, r = 5);\n    }\n}\n\n// Front panel with stops\nmodule front_panel() {\n    difference() {\n        // Front surface\n        translate([0, body_width/2 + wall/2, body_height/2])\n            cube([body_length, wall, body_height], center = true);\n        \n        // Stop knobs\n        for (i = [-2:2]) {\n            translate([i * 15, body_width/2 + wall, body_height * 0.7])\n                cylinder(h = wall + 1, r = 4);\n        }\n    }\n}\n\n// Rear panel\nmodule rear_panel() {\n    translate([0, -body_width/2 - wall/2, body_height/2])\n        cube([body_length, wall, body_height], center = true);\n}\n\n// Bottom panel\nmodule bottom_panel() {\n    translate([0, 0, wall/2])\n        cube([body_length - 4, body_width - 4, wall], center = true);\n}\n\n// Feet\nmodule feet() {\n    for (x = [-body_length/2 + 10, body_length/2 - 10])\n        for (y = [-body_width/2 + 10, body_width/2 - 10])\n            translate([x, y, 0])\n                cylinder(h = 8, r1 = 4, r2 = 3);\n}\n\n// Bellows on top\nmodule bellows() {\n    translate([0, 0, body_height + 5])\n    difference() {\n        // Main bellows box\n        cube([body_length - 20, body_width - 20, 15], center = true);\n        \n        // Air holes\n        for (i = [-1:1])\n            for (j = [-1:1])\n                translate([i * 25, j * 15, 0])\n                    cylinder(h = 20, r = 3);\n    }\n}\n\n// Keys\nmodule keys() {\n    for (i = [-5:5]) {\n        translate([i * 8, 0, body_height + 1])\n            cube([5, 8, 2], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Structural frame\n    top_panel();\n    side_panel();\n    mirror([1, 0, 0]) side_panel();\n    front_panel();\n    rear_panel();\n    bottom_panel();\n    \n    // Functional elements\n    bellows();\n    keys();\n    \n    // Support feet\n    feet();\n}",
    "renders": true
  },
  {
    "office_supply": "bugle",
    "openscad_code": "// Bugle furniture item - realistic office decor\n// Overall dimensions: 120mm length, 45mm width, 45mm height\n\nmodule bugle_body() {\n    // Main bell section - conical shape\n    for (i = [0:2:20]) {\n        hull() {\n            translate([i*2, 0, 0]) \n                rotate([0, 90, 0]) \n                cylinder(h=1, r1=20-i*0.8, r2=20-i*0.9, $fn=20);\n            translate([(i+1)*2, 0, 0]) \n                rotate([0, 90, 0]) \n                cylinder(h=1, r1=20-(i+1)*0.8, r2=20-(i+1)*0.9, $fn=20);\n        }\n    }\n}\n\nmodule mouthpiece() {\n    // Small mouthpiece at the narrow end\n    translate([-5, 0, 0]) {\n        // Mouthpiece cup\n        difference() {\n            cylinder(h=8, r1=8, r2=6, $fn=20);\n            translate([0, 0, 2]) \n                cylinder(h=10, r1=5, r2=4, $fn=20);\n        }\n        // Mouthpiece rim\n        translate([0, 0, 8]) \n            cylinder(h=2, r1=8.5, r2=8.5, $fn=20);\n    }\n}\n\nmodule tubing() {\n    // Main tubing loop\n    difference() {\n        // Outer tube\n        rotate([0, 90, 0]) {\n            hull() {\n                translate([0, 0, 0]) \n                    cylinder(h=2, r=6, $fn=16);\n                translate([0, 30, 0]) \n                    cylinder(h=2, r=6, $fn=16);\n                translate([0, 0, 30]) \n                    cylinder(h=2, r=6, $fn=16);\n                translate([0, 30, 30]) \n                    cylinder(h=2, r=6, $fn=16);\n            }\n        }\n        \n        // Inner tube (hollow)\n        rotate([0, 90, 0]) {\n            hull() {\n                translate([0, 0, 0]) \n                    cylinder(h=2, r=4, $fn=16);\n                translate([0, 30, 0]) \n                    cylinder(h=2, r=4, $fn=16);\n                translate([0, 0, 30]) \n                    cylinder(h=2, r=4, $fn=16);\n                translate([0, 30, 30]) \n                    cylinder(h=2, r=4, $fn=16);\n            }\n        }\n    }\n}\n\nmodule valves() {\n    // Three valve casings\n    for (i = [0:2]) {\n        translate([35 + i*12, 15, 15]) {\n            // Valve casing\n            cylinder(h=20, r=5, $fn=16);\n            \n            // Valve button\n            translate([0, 0, 22]) {\n                cylinder(h=3, r=4, $fn=16);\n                translate([0, 0, 3]) \n                    cylinder(h=2, r=5, $fn=16);\n            }\n        }\n    }\n}\n\nmodule braces() {\n    // Support braces between tubing\n    translate([20, 0, 15]) {\n        rotate([45, 0, 0]) {\n            cube([2, 2, 25]);\n        }\n    }\n    \n    translate([50, 0, 15]) {\n        rotate([45, 0, 0]) {\n            cube([2, 2, 25]);\n        }\n    }\n}\n\nmodule bell_rim() {\n    // Reinforced bell rim\n    difference() {\n        translate([40, 0, 0]) \n            rotate([0, 90, 0]) {\n                cylinder(h=3, r1=20, r2=20, $fn=32);\n                cylinder(h=3, r1=18, r2=18, $fn=32);\n            }\n    }\n}\n\nmodule base_stand() {\n    // Decorative base for furniture placement\n    translate([20, 0, -5]) {\n        // Base plate\n        cube([80, 40, 2]);\n        \n        // Support posts\n        for (pos = [[0, 0], [80, 0], [40, 20], [20, 40], [60, 40]]) {\n            translate([pos[0] - 40, pos[1] - 20, 2]) {\n                cylinder(h=3, r=2, $fn=12);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main bugle components\n    color(\"gold\") {\n        bugle_body();\n        mouthpiece();\n        tubing();\n        bell_rim();\n    }\n    \n    // Valve section\n    color(\"silver\") {\n        valves();\n    }\n    \n    // Structural braces\n    color(\"darkgoldenrod\") {\n        braces();\n    }\n    \n    // Furniture base\n    color(\"darkbrown\") {\n        base_stand();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "clarinet",
    "openscad_code": "// Clarinet Desk Organizer\n// A medium-complexity realistic clarinet-shaped pen holder and small item organizer\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n// Overall dimensions: ~120mm height, 40mm base diameter\n$fn = 32;\n\n// Main clarinet body as pen holder\nmodule clarinet_body() {\n    // Lower joint (main storage)\n    cylinder(h = 80, r1 = 20, r2 = 18, center = false);\n    \n    // Upper joint (tapered section)\n    translate([0, 0, 80])\n        cylinder(h = 30, r1 = 18, r2 = 15, center = false);\n    \n    // Barrel section\n    translate([0, 0, 110])\n        cylinder(h = 15, r1 = 15, r2 = 14, center = false);\n}\n\n// Bell flare at bottom\nmodule bell() {\n    difference() {\n        // Outer bell shape\n        cylinder(h = 25, r1 = 25, r2 = 20, center = false);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h = 27, r1 = 22, r2 = 17, center = false);\n    }\n}\n\n// Mouthpiece cap storage\nmodule mouthpiece() {\n    translate([0, 0, 125]) {\n        // Main mouthpiece shape\n        cylinder(h = 15, r1 = 14, r2 = 12, center = false);\n        \n        // Ligature detail\n        translate([0, 0, 8])\n            cylinder(h = 3, r = 15, center = false);\n    }\n}\n\n// Tone holes as pen slots\nmodule tone_holes() {\n    // Generate 7 tone holes around the body\n    for(i = [0:6]) {\n        rotate([0, 0, i * 51.4]) {\n            translate([17, 0, 15 + i * 10]) {\n                // Each hole is a slot for pens\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r = 4, center = true);\n            }\n        }\n    }\n}\n\n// Keys as structural supports\nmodule keys() {\n    // Main key post supports\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            // Bridge keys\n            translate([22, 0, 40 + i * 15]) {\n                cube([8, 3, 2], center = true);\n            }\n            \n            // Ring keys\n            translate([22, 0, 50 + i * 15]) {\n                difference() {\n                    cylinder(h = 2, r = 5, center = true);\n                    cylinder(h = 3, r = 3, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    difference() {\n        // Solid base\n        cylinder(h = 8, r = 30, center = false);\n        \n        // Recessed bottom for material saving\n        translate([0, 0, 2])\n            cylinder(h = 4, r = 27, center = false);\n    }\n}\n\n// Cork joint details\nmodule cork_joints() {\n    // Bottom cork\n    translate([0, 0, 22])\n        cylinder(h = 3, r = 21, center = false);\n    \n    // Middle joint cork\n    translate([0, 0, 80])\n        cylinder(h = 3, r = 19, center = false);\n    \n    // Barrel cork\n    translate([0, 0, 110])\n        cylinder(h = 2, r = 16, center = false);\n}\n\n// Main assembly\nunion() {\n    // Base platform\n    base();\n    \n    // Hollow out the clarinet body\n    difference() {\n        union() {\n            // Assemble clarinet parts\n            translate([0, 0, 8]) {\n                union() {\n                    bell();\n                    clarinet_body();\n                    mouthpiece();\n                    cork_joints();\n                }\n            }\n        }\n        \n        // Central hollow for pens\n        translate([0, 0, 7])\n            cylinder(h = 135, r = 15, center = false);\n    }\n    \n    // Add tone holes (cut through)\n    tone_holes();\n    \n    // Add key details\n    keys();\n}",
    "renders": true
  },
  {
    "office_supply": "piccolo",
    "openscad_code": "// Piccolo Office Chair - Realistic Style\n// Medium complexity office furniture piece\n\n// Chair dimensions (mm)\nchair_width = 55;\nchair_depth = 55;\nchair_height = 85;\nseat_height = 45;\nbackrest_height = 40;\n\n// Material thickness\nwall_thickness = 2;\n\n// Main seat module\nmodule seat() {\n    // Seat base\n    difference() {\n        // Main seat cushion\n        translate([0, 0, seat_height - 5])\n            cube([chair_width, chair_depth, 10], center=true);\n        \n        // Comfort contouring - remove material from center\n        translate([0, 0, seat_height - 4])\n            cube([chair_width - 10, chair_depth - 10, 8], center=true);\n    }\n    \n    // Seat edge piping detail\n    for (i = [-1, 1]) {\n        translate([0, i * (chair_depth/2 - 2), seat_height - 0.5])\n            cube([chair_width, 4, 1], center=true);\n    }\n    for (i = [-1, 1]) {\n        translate([i * (chair_width/2 - 2), 0, seat_height - 0.5])\n            cube([4, chair_depth, 1], center=true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -chair_depth/2 + 5, seat_height + backrest_height/2])\n        cube([chair_width - 10, wall_thickness, backrest_height], center=true);\n    \n    // Lumbar support curve\n    difference() {\n        // Curved backrest\n        translate([0, -chair_depth/2 + 6, seat_height + 15])\n            cube([chair_width - 10, wall_thickness, 25], center=true);\n        \n        // Remove curve\n        translate([0, -chair_depth/2 + 3, seat_height + 20])\n            sphere(r=15, $fn=30);\n    }\n}\n\n// Armrest module\nmodule armrest(side) {\n    // Armrest support\n    translate([side * (chair_width/2 - 5), 0, seat_height + 10])\n        cube([wall_thickness*2, chair_depth/3, 20], center=true);\n    \n    // Armrest pad\n    translate([side * (chair_width/2 - 5), chair_depth/4, seat_height + 20])\n        cube([8, 25, 3], center=true);\n}\n\n// Base module\nmodule base() {\n    // Central support column\n    cylinder(h=seat_height - 10, r=8, $fn=20);\n    \n    // 5-star base legs\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 0, 0])\n                leg();\n    }\n    \n    // Caster wheels\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([25, 0, 0])\n                caster();\n    }\n}\n\n// Single leg module\nmodule leg() {\n    // Main leg\n    translate([12.5, 0, 5])\n        cube([25, wall_thickness*2, seat_height - 15], center=true);\n    \n    // Leg reinforcement\n    translate([20, 0, seat_height - 20])\n        cylinder(h=wall_thickness*3, r=3, $fn=10);\n}\n\n// Caster wheel module\nmodule caster() {\n    // Wheel housing\n    translate([0, 0, 0])\n        cylinder(h=8, r=4, $fn=15);\n    \n    // Wheel\n    rotate([90, 0, 0])\n        translate([0, 0, -2])\n            cylinder(h=4, r=3, $fn=15);\n}\n\n// Assembly\nunion() {\n    // Seat assembly\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Base assembly\n    translate([0, 0, 0])\n        base();\n}",
    "renders": true
  },
  {
    "office_supply": "trombone",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// Overall scale factor to fit printer volume (~120 mm max)\nscale_factor = 0.6;\n\n// Wall thickness for 3D-printability\nwall = 2;\n\nmodule bell_shade() {\n    // Bell-shaped lamp shade with 2 mm walls\n    difference() {\n        rotate([90,0,0])\n            cylinder(h = 40 * scale_factor, r1 = 18 * scale_factor, r2 = 12 * scale_factor, center = true);\n        rotate([90,0,0])\n            cylinder(h = 42 * scale_factor, r1 = 16 * scale_factor, r2 = 10 * scale_factor, center = true);\n    }\n}\n\nmodule slide_tube(len = 30, dia = 6) {\n    // Hollow tube for slide arms\n    difference() {\n        cylinder(h = len * scale_factor, r = dia/2 * scale_factor, center = true);\n        cylinder(h = (len + 2) * scale_factor, r = (dia/2 - wall) * scale_factor, center = true);\n    }\n}\n\nmodule brace_block(w = 12, d = 8, h = 6) {\n    // Structural brace block with rounded edges\n    hull() {\n        translate([-w/2 * scale_factor, -d/2 * scale_factor, -h/2 * scale_factor])\n            sphere(2 * scale_factor);\n        translate([ w/2 * scale_factor, -d/2 * scale_factor, -h/2 * scale_factor])\n            sphere(2 * scale_factor);\n        translate([-w/2 * scale_factor,  d/2 * scale_factor, -h/2 * scale_factor])\n            sphere(2 * scale_factor);\n        translate([ w/2 * scale_factor,  d/2 * scale_factor, -h/2 * scale_factor])\n            sphere(2 * scale_factor);\n        translate([-w/2 * scale_factor, -d/2 * scale_factor,  h/2 * scale_factor])\n            sphere(2 * scale_factor);\n        translate([ w/2 * scale_factor, -d/2 * scale_factor,  h/2 * scale_factor])\n            sphere(2 * scale_factor);\n        translate([-w/2 * scale_factor,  d/2 * scale_factor,  h/2 * scale_factor])\n            sphere(2 * scale_factor);\n        translate([ w/2 * scale_factor,  d/2 * scale_factor,  h/2 * scale_factor])\n            sphere(2 * scale_factor);\n    }\n}\n\nmodule mouthpiece_socket() {\n    // Socket for mouthpiece, doubles as lamp holder\n    difference() {\n        cylinder(h = 12 * scale_factor, r1 = 4.5 * scale_factor, r2 = 3.5 * scale_factor, center = true);\n        cylinder(h = 14 * scale_factor, r1 = 2.5 * scale_factor, r2 = 1.5 * scale_factor, center = true);\n    }\n}\n\nmodule slide_assembly() {\n    // Dual slide tubes with braces\n    translate([0, 0, 0])\n        slide_tube(45, 6);\n    translate([0, 10 * scale_factor, 0])\n        slide_tube(45, 6);\n    \n    // Main braces\n    translate([0, 5 * scale_factor, 20 * scale_factor])\n        rotate([0,90,0])\n            brace_block(12, 8, 6);\n    translate([0, 5 * scale_factor, -20 * scale_factor])\n        rotate([0,90,0])\n            brace_block(12, 8, 6);\n}\n\nmodule base_stand() {\n    // Heavy circular base for stability\n    difference() {\n        cylinder(h = 8 * scale_factor, r = 20 * scale_factor, center = true);\n        cylinder(h = 10 * scale_factor, r = 18 * scale_factor, center = true);\n    }\n    \n    // Feet for better grip\n    for (i = [0:3]) {\n        rotate([0,0,i*90])\n            translate([16 * scale_factor, 0, -6 * scale_factor])\n                cube([8 * scale_factor, 4 * scale_factor, 4 * scale_factor], center = true);\n    }\n}\n\n// Assemble the trombone lamp\nunion() {\n    // Base\n    translate([0, 0, -40 * scale_factor])\n        base_stand();\n    \n    // Vertical main post\n    translate([0, 0, -25 * scale_factor])\n        cylinder(h = 40 * scale_factor, r = 4 * scale_factor, center = true);\n    \n    // Lower U-bend\n    translate([0, 5 * scale_factor, 0])\n        rotate([0,90,0])\n            rotate([0,0,-90])\n                cylinder(h = 12 * scale_factor, r = 3 * scale_factor, center = true);\n    \n    // Slide assembly\n    translate([0, 5 * scale_factor, 10 * scale_factor])\n        rotate([0,90,0])\n            slide_assembly();\n    \n    // Bell lamp shade\n    translate([0, 5 * scale_factor, 45 * scale_factor])\n        rotate([0,90,0])\n            bell_shade();\n    \n    // Mouthpiece socket / lamp holder\n    translate([0, 5 * scale_factor, 50 * scale_factor])\n        rotate([0,90,0])\n            mouthpiece_socket();\n}",
    "renders": true
  },
  {
    "office_supply": "saxophone",
    "openscad_code": "// Saxophone-inspired desk organizer\n// Overall dimensions: ~100mm tall, 60mm wide, 80mm deep\n\n// Parameters\n$fn = 32;\nwall = 2;\n\n// Main body - saxophone bell as pen holder\nmodule bell() {\n    difference() {\n        // Outer bell shape\n        cylinder(h = 40, r1 = 25, r2 = 15);\n        \n        // Inner cavity for pens\n        translate([0, 0, -1])\n            cylinder(h = 42, r1 = 23, r2 = 13);\n    }\n}\n\n// Neck pipe - tube for scissors/rulers\nmodule neck() {\n    translate([30, 0, 20])\n        rotate([0, 45, 0])\n        difference() {\n            cylinder(h = 35, r = 6);\n            translate([0, 0, -1])\n                cylinder(h = 37, r = 4);\n        }\n}\n\n// Keys as dividers\nmodule key(x, y, angle) {\n    translate([x, y, 0])\n        rotate([0, 0, angle])\n        difference() {\n            // Key shape\n            union() {\n                cube([10, 2, 4]);\n                translate([10, 0, 2])\n                    sphere(r = 3);\n            }\n            // Hollow center\n            translate([-1, -1, -1])\n                cube([12, 4, 6]);\n        }\n}\n\n// Mouthpiece as small tray\nmodule mouthpiece() {\n    translate([-20, 15, 0])\n        difference() {\n            // Mouthpiece shape\n            cube([15, 10, 8]);\n            // Storage cavity\n            translate([wall, wall, 4])\n                cube([15-wall*2, 10-wall*2, 4]);\n        }\n}\n\n// Base structure\nmodule base() {\n    difference() {\n        // Main base\n        cube([80, 60, 5]);\n        \n        // Cable management hole\n        translate([40, 30, -1])\n            cylinder(h = 7, r = 8);\n    }\n}\n\n// Support braces\nmodule brace(x, y, z) {\n    translate([x, y, z])\n        difference() {\n            cube([8, 8, 15]);\n            translate([wall, wall, -1])\n                cube([8-wall*2, 8-wall*2, 17]);\n        }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Main components\n    translate([40, 30, 5])\n        bell();\n    \n    neck();\n    \n    mouthpiece();\n    \n    // Keys as dividers\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([20, 0, 5])\n                key(0, 0, i);\n    }\n    \n    // Structural braces\n    brace(15, 15, 5);\n    brace(65, 15, 5);\n    brace(15, 45, 5);\n    brace(65, 45, 5);\n}",
    "renders": true
  },
  {
    "office_supply": "cymbals",
    "openscad_code": "// Cymbals Furniture – OpenSCAD medium-complexity realistic model\n// Overall footprint ≈ 110 mm × 85 mm × 80 mm, printable without supports.\n\n// General parameters\n$fn = 48;          // Smooth curves\nwall = 2;          // 2 mm printable walls\ndia = 100;         // Main cymbal diameter\nth  = 1.5;         // Cymbal sheet thickness\n\n// Utility: simple rounded rectangle profile for printable edges\nmodule rounded_rect(w, d, h, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h = h, r = r);\n        translate([w - r, r, 0]) cylinder(h = h, r = r);\n        translate([w - r, d - r, 0]) cylinder(h = h, r = r);\n        translate([r, d - r, 0]) cylinder(h = h, r = r);\n    }\n}\n\n// Stand base plate\nmodule base() {\n    difference() {\n        rounded_rect(90, 70, wall, 5);\n        translate([45, 35, -1]) cylinder(h = wall + 2, r = 4, $fn = 32);\n    }\n}\n\n// Central mast\nmodule mast() {\n    h = 60;\n    difference() {\n        cylinder(h = h, r = 5);\n        translate([0, 0, -1]) cylinder(h = h + 2, r = 3);\n    }\n}\n\n// Three-leg support ring for stability\nmodule legs() {\n    for (a = [0 : 120 : 240]) {\n        rotate([0, 0, a])\n            translate([0, 35, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, r = 4);\n    }\n}\n\n// Boom arm holder clamp\nmodule boom_holder() {\n    difference() {\n        cube([20, 10, 12], center = true);\n        translate([0, 0, -6]) cylinder(h = 12.5, r = 5.2);\n    }\n}\n\n// Boom arm\nmodule boom() {\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 40, r = 3);\n            translate([0, 0, -1]) cylinder(h = 42, r = 2);\n        }\n}\n\n// Cymbal sheet with realistic profile\nmodule cymbal() {\n    difference() {\n        // Basic sheet with gentle taper\n        cylinder(h = th, r = dia/2);\n        // Center hole for mounting\n        translate([0, 0, -1]) cylinder(h = th + 2, r = 8);\n        // Subtle taper toward edge\n        translate([0, 0, th])\n            cylinder(h = 1, r1 = dia/2 - 2, r2 = dia/2 - 5);\n    }\n    // Small bead around edge for realism\n    rotate_extrude()\n        translate([dia/2 - 1, 0, 0])\n            circle(r = 0.8);\n}\n\n// Cymbal felt and wing nut\nmodule cymbal_mount() {\n    // Felt washer\n    color(\"darkgray\")\n        translate([0, 0, 0])\n            cylinder(h = 2, r = 9.5);\n    // Wing nut\n    difference() {\n        translate([0, 0, 2])\n            cylinder(h = 6, r = 8);\n        translate([0, 0, 1.9])\n            cylinder(h = 6.2, r = 4.1);\n        // Wings\n        for (a = [0 : 180 : 180])\n            rotate([0, 0, a])\n                translate([0, 12, 5])\n                    cube([4, 8, 2], center = true);\n    }\n}\n\n// Assemble the complete furniture piece\nunion() {\n    // Base and stand\n    base();\n    translate([45, 35, wall]) mast();\n    translate([45, 35, wall + 20]) legs();\n    translate([45, 35, wall + 55]) boom_holder();\n    translate([45 + 10, 35, wall + 55]) boom();\n    \n    // Cymbal mounted on boom end\n    translate([45 + 10 + 40, 35, wall + 55 + 3])\n        rotate([0, 90, 0])\n            cymbal_mount();\n    translate([45 + 10 + 40, 35, wall + 55 + 3])\n        rotate([0, 90, 0])\n            cymbal();\n}",
    "renders": true
  },
  {
    "office_supply": "triangle",
    "openscad_code": "// Triangle-shaped desktop shelf unit / organizer\n// Dimensions: 120 mm wide x 100 mm deep x 80 mm tall\n// Wall thickness: 2 mm throughout for 3D printing\n// No overhangs greater than 45°\n\n$fn = 32;  // Resolution for curved surfaces\n\n// Main parameters\nwall_thickness = 2;\nshelf_thickness = 2;\nbase_width = 120;\nbase_depth = 100;\nheight = 80;\n\n// Calculate triangle geometry\ntriangle_height = base_depth * sin(60);  // Equilateral triangle proportions\n\n// Main body - hollow triangular prism\nmodule triangular_body() {\n    difference() {\n        // Outer shell\n        linear_extrude(height = height)\n            polygon([\n                [0, 0],\n                [base_width, 0],\n                [base_width/2, base_depth]\n            ]);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            linear_extrude(height = height - wall_thickness*2)\n                polygon([\n                    [0, 0],\n                    [base_width - wall_thickness*2, 0],\n                    [(base_width - wall_thickness*2)/2, base_depth - wall_thickness*2]\n                ]);\n    }\n}\n\n// Shelves - three levels with rounded fronts\nmodule shelves() {\n    shelf_spacing = (height - wall_thickness*2 - shelf_thickness*3) / 3;\n    \n    for (i = [0:2]) {\n        translate([wall_thickness, wall_thickness, wall_thickness + i*(shelf_spacing + shelf_thickness)])\n            linear_extrude(height = shelf_thickness)\n                polygon([\n                    [0, 0],\n                    [base_width - wall_thickness*2, 0],\n                    [(base_width - wall_thickness*2)/2, base_depth - wall_thickness*2 - 5]  // Recessed front\n                ]);\n    }\n}\n\n// Support ribs for structural integrity\nmodule support_ribs() {\n    rib_width = 1.5;\n    rib_height = height - wall_thickness*2;\n    \n    // Left rib\n    translate([wall_thickness*2, wall_thickness, wall_thickness])\n        rotate([0, 0, 30])\n            cube([rib_width, 40, rib_height]);\n    \n    // Right rib\n    translate([base_width - wall_thickness*3, wall_thickness, wall_thickness])\n        rotate([0, 0, -30])\n            cube([rib_width, 40, rib_height]);\n    \n    // Center rib\n    translate([base_width/2 - rib_width/2, wall_thickness + 20, wall_thickness])\n        cube([rib_width, 30, rib_height]);\n}\n\n// Cable management cutout in back\nmodule cable_cutout() {\n    translate([base_width/2 - 15, wall_thickness - 1, height/2 - 10])\n        cube([30, wall_thickness + 2, 20]);\n}\n\n// Non-slip feet\nmodule feet() {\n    foot_diameter = 8;\n    foot_height = 3;\n    \n    positions = [\n        [15, 15],\n        [base_width - 15, 15],\n        [base_width/2, base_depth - 15]\n    ];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], -foot_height])\n            cylinder(h = foot_height, d = foot_diameter);\n    }\n}\n\n// Assembly\nunion() {\n    triangular_body();\n    shelves();\n    support_ribs();\n    difference() {\n        cube([0.001, 0.001, 0.001]);  // Dummy for difference\n        cable_cutout();\n    }\n}\n\ntranslate([0, 0, 0])\n    feet();",
    "renders": true
  },
  {
    "office_supply": "castanets",
    "openscad_code": "// Castanets Office Furniture - Medium Complexity\n// Realistic style with structural details and ergonomic design\n\n// Overall dimensions (mm)\n$fn = 50;\noverall_length = 120;\noverall_width = 50;\noverall_thickness = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main castanet shell module\nmodule castanet_shell(is_left = true) {\n    // Main body - hollow shell\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, overall_thickness/2])\n                cube([overall_length, overall_width, overall_thickness], center=true);\n            \n            // Rounded ends\n            translate([(is_left ? 1 : -1) * (overall_length/2 - overall_width/2), 0, overall_thickness/2])\n                sphere(overall_width/2);\n        }\n        \n        // Hollow interior\n        translate([0, 0, overall_thickness/2])\n            cube([overall_length - 2*wall_thickness, \n                  overall_width - 2*wall_thickness, \n                  overall_thickness], center=true);\n        \n        // Rounded hollow ends\n        translate([(is_left ? 1 : -1) * (overall_length/2 - overall_width/2), 0, overall_thickness/2])\n            sphere(overall_width/2 - wall_thickness);\n    }\n}\n\n// Finger grip details\nmodule finger_grips() {\n    for(i = [-1, 1]) {\n        // Main grip indentations\n        translate([i * 20, 0, overall_thickness/2])\n            rotate([0, 90, 0])\n                cylinder(h=15, r1=8, r2=8, $fn=20);\n        \n        // Smaller grip details\n        translate([i * 30, 0, overall_thickness/2])\n            rotate([0, 90, 0])\n                cylinder(h=10, r1=5, r2=5, $fn=15);\n    }\n}\n\n// Hinge mechanism\nmodule hinge_pin(diameter = 6) {\n    // Pin\n    translate([0, 0, overall_thickness/2])\n        cylinder(h=overall_width + wall_thickness, r=diameter/2, center=true);\n    \n    // Pin caps\n    translate([0, overall_width/2 + wall_thickness/2, overall_thickness/2])\n        cylinder(h=wall_thickness, r=diameter/2 + 1);\n    \n    translate([0, -overall_width/2 - wall_thickness/2, overall_thickness/2])\n        cylinder(h=wall_thickness, r=diameter/2 + 1);\n}\n\n// Hinge arms\nmodule hinge_arm(is_left = true) {\n    arm_length = 25;\n    arm_width = 8;\n    \n    translate([(is_left ? -1 : 1) * arm_length/2, 0, overall_thickness/2])\n        cube([arm_length, arm_width, overall_thickness - 2*wall_thickness], center=true);\n    \n    // Pin hole\n    translate([0, 0, overall_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h=arm_width + 2, r=3.2, center=true);\n}\n\n// Sound chamber details\nmodule sound_chamber() {\n    // Internal resonance chambers\n    for(i = [0, 1]) {\n        translate([i * 30 - 15, 0, overall_thickness/4])\n            difference() {\n                sphere(overall_width/3);\n                sphere(overall_width/3 - wall_thickness);\n            }\n    }\n    \n    // Reinforcement ribs\n    for(i = [-1, 0, 1]) {\n        translate([i * 25, 0, overall_thickness/2])\n            cube([wall_thickness, overall_width - 4, overall_thickness - 4], center=true);\n    }\n}\n\n// Assembly\nmodule castanets_assembly() {\n    // Left castanet\n    translate([-5, 0, 0]) {\n        difference() {\n            castanet_shell(true);\n            finger_grips();\n            sound_chamber();\n        }\n        hinge_arm(true);\n    }\n    \n    // Right castanet\n    translate([5, 0, 0]) {\n        difference() {\n            castanet_shell(false);\n            finger_grips();\n            sound_chamber();\n        }\n        hinge_arm(false);\n    }\n    \n    // Central hinge\n    hinge_pin();\n}\n\n// Render the complete assembly\ncastanets_assembly();",
    "renders": true
  },
  {
    "office_supply": "maracas",
    "openscad_code": "// Maracas Office Chair\n// A stylized maracas-inspired swivel chair with ergonomic features\n\n// Chair parameters\n$fn = 32;\nseat_diameter = 45;\nseat_thickness = 4;\nback_height = 35;\nback_width = 40;\nback_thickness = 3;\nbase_diameter = 35;\nbase_height = 8;\npole_height = 25;\npole_diameter = 8;\narmrest_height = 18;\narmrest_width = 5;\narmrest_length = 25;\ncaster_radius = 5;\ncaster_stem = 3;\n\n// Maracas ball detail (decorative backrest feature)\nmaracas_ball_radius = 12;\nmaracas_handle_length = 18;\nmaracas_handle_radius = 3;\n\n// Color scheme\ncolor_chair = \"#2C3E50\";\ncolor_maracas = \"#E74C3C\";\n\nmodule maracas_ball() {\n    // Main maracas sphere\n    difference() {\n        sphere(r = maracas_ball_radius);\n        // Texture grooves\n        for(i = [0:30:150]) {\n            rotate([0, 0, i])\n            translate([0, maracas_ball_radius - 1, 0])\n            cube([2, 2, maracas_ball_radius * 2], center = true);\n        }\n    }\n    \n    // Handle connection\n    translate([0, 0, -maracas_ball_radius])\n    cylinder(h = 5, r1 = maracas_handle_radius + 1, r2 = maracas_handle_radius, center = false);\n}\n\nmodule maracas_handle() {\n    // Curved handle\n    translate([0, -maracas_handle_length/2, 0])\n    rotate([90, 0, 0])\n    cylinder(h = maracas_handle_length, r = maracas_handle_radius);\n}\n\nmodule caster_assembly() {\n    // Caster wheel\n    translate([0, 0, caster_stem])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = caster_radius * 2, r = caster_radius, center = true);\n        // Wheel cutout\n        translate([0, 0, 0])\n        cube([caster_radius * 1.8, caster_radius * 1.8, caster_radius * 2.2], center = true);\n    }\n    \n    // Caster stem\n    cylinder(h = caster_stem, r = caster_stem/2);\n}\n\nmodule base_with_casters() {\n    // Star base\n    difference() {\n        cylinder(h = base_height, r = base_diameter/2);\n        // Lightening holes\n        for(i = [0:72:360]) {\n            rotate([0, 0, i])\n            translate([base_diameter/4, 0, -1])\n            cylinder(h = base_height + 2, r = 5);\n        }\n    }\n    \n    // Caster arms\n    for(i = [0:72:360]) {\n        rotate([0, 0, i])\n        translate([base_diameter/2 - 5, 0, -base_height/2])\n        union() {\n            // Arm\n            cube([20, 4, base_height], center = true);\n            // Caster\n            translate([10, 0, -base_height/2])\n            caster_assembly();\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Main seat\n    difference() {\n        cylinder(h = seat_thickness, r = seat_diameter/2);\n        // Ergonomic contour\n        translate([0, 0, -1])\n        cylinder(h = seat_thickness + 2, r = seat_diameter/2 - 8);\n    }\n    \n    // Edge detail\n    translate([0, 0, seat_thickness])\n    cylinder(h = 2, r1 = seat_diameter/2, r2 = seat_diameter/2 + 1);\n}\n\nmodule backrest() {\n    // Main back\n    difference() {\n        cube([back_width, back_thickness, back_height], center = true);\n        // Lumbar curve\n        translate([0, back_thickness/2 + 1, -back_height/4])\n        sphere(r = back_height/2);\n    }\n    \n    // Maracas decorative element\n    translate([back_width/2 - maracas_ball_radius - 5, back_thickness/2 + 1, back_height/3])\n    union() {\n        maracas_ball();\n        translate([0, maracas_ball_radius, 0])\n        maracas_handle();\n    }\n}\n\nmodule armrest() {\n    // Armrest support\n    translate([0, 0, armrest_height/2])\n    cube([armrest_width, armrest_width, armrest_height], center = true);\n    \n    // Armrest pad\n    translate([0, armrest_length/2, armrest_height])\n    cube([armrest_width * 1.5, armrest_length, armrest_width/2], center = true);\n}\n\n// Main assembly\nunion() {\n    // Base and casters\n    base_with_casters();\n    \n    // Central pole\n    translate([0, 0, base_height])\n    cylinder(h = pole_height, r = pole_diameter/2);\n    \n    // Seat\n    translate([0, 0, base_height + pole_height])\n    seat_cushion();\n    \n    // Backrest\n    translate([0, -seat_diameter/2 + back_thickness/2, base_height + pole_height + seat_thickness])\n    rotate([15, 0, 0])\n    backrest();\n    \n    // Armrests\n    translate([seat_diameter/2 - armrest_width/2, 0, base_height + pole_height + seat_thickness])\n    armrest();\n    \n    translate([-seat_diameter/2 + armrest_width/2, 0, base_height + pole_height + seat_thickness])\n    armrest();\n}",
    "renders": true
  },
  {
    "office_supply": "gong",
    "openscad_code": "// Gong Furniture Item (Office Gong)\n// Medium complexity realistic style\n\n// Overall dimensions\ngong_diameter = 80;\ngong_thickness = 3;\nframe_height = 65;\nbase_width = 100;\nbase_depth = 70;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\n// Gong surface with hammered texture\nmodule gong_disc() {\n    difference() {\n        // Main disc\n        cylinder(h=gong_thickness, d=gong_diameter, $fn=100);\n        \n        // Center hole for mounting\n        cylinder(h=gong_thickness+1, d=8, $fn=32);\n        \n        // Hammered texture rings\n        for(i=[1:10:40]) {\n            rotate([0,0,i*36])\n            translate([i,0,-0.5])\n            cube([0.5,2,gong_thickness+1]);\n        }\n    }\n}\n\n// Gong frame structure\nmodule frame() {\n    // Left post\n    translate([-gong_diameter/2-5, 0, 0])\n    cube([wall_thick, 15, frame_height]);\n    \n    // Right post\n    translate([gong_diameter/2+5-2, 0, 0])\n    cube([wall_thick, 15, frame_height]);\n    \n    // Top crossbar\n    translate([0, 7.5, frame_height-2])\n    cube([gong_diameter+14, wall_thick, 10]);\n}\n\n// Base structure\nmodule base() {\n    // Main base platform\n    cube([base_width, base_depth, wall_thick]);\n    \n    // Front support rib\n    translate([0, base_depth/2-wall_thick/2, 0])\n    cube([base_width-20, wall_thick, 10]);\n    \n    // Rear support rib\n    translate([0, -base_depth/2+wall_thick/2, 0])\n    cube([base_width-20, wall_thick, 10]);\n    \n    // Side support ribs\n    for(side=[-1,1]) {\n        translate([side*(base_width/2-wall_thick/2), 0, 0])\n        cube([wall_thick, base_depth-20, 10]);\n    }\n}\n\n// Gong mallet holder\nmodule mallet_holder() {\n    translate([base_width/2-15, base_depth/2-10, wall_thick])\n    cube([12, 8, 20]);\n    \n    // Mallet hole\n    translate([base_width/2-9, base_depth/2-6, wall_thick+2])\n    rotate([90,0,0])\n    cylinder(h=20, d=6, $fn=20);\n}\n\n// Gong mallet\nmodule mallet() {\n    // Handle\n    translate([base_width/2-9, base_depth/2-6, wall_thick+12])\n    rotate([90,0,0])\n    cylinder(h=40, d=4, $fn=20);\n    \n    // Mallet head\n    translate([base_width/2-9, base_depth/2-6, wall_thick+12+35])\n    rotate([90,0,0])\n    sphere(d=10, $fn=20);\n}\n\n// Assembly\ntranslate([0, 0, 10])\n    gong_disc();\n\ntranslate([0, 0, 10])\n    frame();\n\ntranslate([-base_width/2, -base_depth/2, 0])\n    base();\n\nmallet_holder();\nmallet();",
    "renders": true
  },
  {
    "office_supply": "bell",
    "openscad_code": "// Bell-shaped desk ornament / paperweight\n// Overall height 80mm, base Ø60mm, wall 2mm for printing\n\n$fn = 64;   // smooth curves\n\nmodule bell_body() {\n    // Main bell shell – stepped profile for realistic look\n    difference() {\n        union() {\n            // Lower flared bell\n            cylinder(h = 45, d1 = 60, d2 = 52, center = false);\n            // Upper shoulder\n            translate([0,0,45])\n                cylinder(h = 15, d1 = 52, d2 = 48, center = false);\n            // Neck\n            translate([0,0,60])\n                cylinder(h = 10, d1 = 48, d2 = 44, center = false);\n        }\n        // Hollow interior – leave 2 mm wall\n        translate([0,0,-1])\n            cylinder(h = 77, d1 = 56, d2 = 40, center = false);\n    }\n}\n\nmodule clapper() {\n    // Free-moving clapper cylinder suspended by small bridges\n    translate([0,0,-10])\n        rotate([90,0,0])\n            cylinder(h = 20, d = 6, center = true);\n}\n\nmodule handle() {\n    // Ergonomic curved handle for lifting\n    difference() {\n        union() {\n            // Arch\n            translate([0,0,70])\n                rotate_extrude(angle = 180, convexity = 2)\n                    translate([22,0,0])\n                        circle(r = 4);\n            // Strengthening ribs\n            for(i=[-1:1]) {\n                rotate([0,0,i*20])\n                    translate([0,0,70])\n                        cube([30,2,8], center = true);\n            }\n        }\n        // Hollow arch for printing\n        translate([0,0,70])\n            rotate_extrude(angle = 180, convexity = 2)\n                translate([18,0,0])\n                    circle(r = 2);\n    }\n}\n\nmodule base_ring() {\n    // Decorative stepped base for stability\n    difference() {\n        union() {\n            cylinder(h = 4, d = 60, center = false);\n            translate([0,0,4])\n                cylinder(h = 2, d = 56, center = false);\n        }\n        // Remove center to save material\n        translate([0,0,-1])\n            cylinder(h = 8, d = 50, center = false);\n    }\n}\n\nmodule sound_lines() {\n    // Horizontal grooves for realistic bell tone ridges\n    for(z=[15:5:40]) {\n        translate([0,0,z])\n            difference() {\n                cylinder(h = 1, d = 59, center = false);\n                cylinder(h = 1.2, d = 57, center = false);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    base_ring();\n    bell_body();\n    handle();\n    sound_lines();\n    // Clapper printed in place with break-away supports\n    clapper();\n}",
    "renders": true
  },
  {
    "office_supply": "rattle",
    "openscad_code": "// OpenSCAD Rattle Chair\n// A playful, 3D-printable rattle shaped like a miniature office chair\n// Overall size: ~90 mm tall, printable without supports\n\nwall = 2;           // uniform wall thickness for 3D printing\nscaleFactor = 0.8;  // global scale to fit 90 mm height\n\nmodule roundedCube(s, r) {\n    // helper: cube with rounded vertical edges, printable without supports\n    hull() {\n        for(x=[r, s.x-r], y=[r, s.y-r])\n            translate([x, y, 0])\n                cylinder(h=s.z, r=r, $fn=16);\n    }\n}\n\nmodule casterWheel() {\n    // single caster wheel assembly\n    difference() {\n        union() {\n            // wheel\n            rotate([90,0,0])\n                cylinder(h=6, r=4, $fn=20);\n            // fork\n            translate([0,0,3])\n                rotate([90,0,0])\n                    cylinder(h=8, r1=2.5, r2=2.5, $fn=12);\n            // stem\n            translate([0,0,3+8])\n                cylinder(h=6, r=2, $fn=12);\n        }\n        // axle hole\n        rotate([90,0,0])\n            cylinder(h=7, r=1.5, $fn=12);\n    }\n}\n\nmodule fiveStarBase() {\n    // office chair star base with 5 casters\n    union() {\n        // central hub\n        cylinder(h=6, r=8, $fn=32);\n        // 5 arms\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n                translate([8,0,3])\n                    rotate([90,0,0])\n                        cylinder(h=40, r1=3, r2=2, $fn=12);\n        }\n        // caster wheels\n        for(i=[0:4]) {\n            rotate([0,0,i*72])\n                translate([40,0,0])\n                    casterWheel();\n        }\n    }\n}\n\nmodule gasCylinder() {\n    // height-adjustment cylinder\n    difference() {\n        union() {\n            cylinder(h=30, r=6, $fn=32);   // outer\n            translate([0,0,30])\n                cylinder(h=6, r1=6, r2=4, $fn=32); // tapered\n        }\n        // hollow core\n        cylinder(h=36, r=4, $fn=32);\n    }\n}\n\nmodule seatShell() {\n    // ergonomic seat pan with slight scoop\n    difference() {\n        hull() {\n            roundedCube([50,50,6], 4);\n            translate([0,0,4])\n                roundedCube([46,46,6], 4);\n        }\n        // bottom hollow\n        translate([0,0,-1])\n            roundedCube([46,46,8], 3);\n        // top scoop\n        translate([0,0,2])\n            rotate_extrude(angle=360, $fn=64)\n                translate([20,0,0])\n                    circle(r=20);\n    }\n}\n\nmodule backrest() {\n    // curved mesh backrest with lumbar support\n    difference() {\n        // frame\n        union() {\n            // outer frame\n            translate([0, -28, 0])\n                roundedCube([46, 6, 48], 3);\n            // lumbar bar\n            translate([0, -28, 20])\n                roundedCube([38, 6, 4], 3);\n        }\n        // mesh pattern cutouts\n        for(y=[-24:8:-8], z=[6:8:38]) {\n            translate([y, -28.1, z])\n                cube([6, 6.2, 6]);\n        }\n    }\n}\n\nmodule armrests() {\n    // looped armrests attached to seat\n    for(side=[-1,1]) {\n        translate([side*25, 0, 0])\n            union() {\n                // vertical post\n                cylinder(h=20, r=2.5, $fn=12);\n                // horizontal loop\n                translate([0, -15, 20])\n                    rotate([90,0,0])\n                        cylinder(h=30, r1=2.5, r2=2.5, $fn=12);\n                // support brace\n                translate([0, -15, 10])\n                    rotate([45,0,side*90])\n                        cylinder(h=15, r1=2.5, r2=2.5, $fn=12);\n            }\n    }\n}\n\nmodule rattleBeads() {\n    // three loose beads inside the seat for rattling sound\n    // printed in place with 0.4 mm clearance\n    beadsRadius = 3;\n    clearance = 0.4;\n    for(i=[-1,0,1]) {\n        translate([i*12, 0, 3])\n            sphere(r=beadsRadius, $fn=20);\n    }\n}\n\nmodule chairAssembly() {\n    // combine all parts\n    union() {\n        // base\n        fiveStarBase();\n        translate([0,0,6])\n            gasCylinder();\n        translate([0,0,6+30])\n            seatShell();\n        translate([0,0,6+30+6])\n            backrest();\n        armrests();\n    }\n}\n\ndifference() {\n    scale(scaleFactor)\n        chairAssembly();\n    // hollow seat for beads\n    translate([0,0,(6+30)*scaleFactor])\n        scale(scaleFactor)\n            cube([42*1.05,42*1.05,8*1.05], center=true);\n    // add internal beads\n    translate([0,0,(6+30+3)*scaleFactor])\n        scale(scaleFactor)\n            rattleBeads();\n}",
    "renders": true
  },
  {
    "office_supply": "horsecart",
    "openscad_code": "// Horsecart Furniture - Realistic Medium Complexity\n// 3D printable model with office furniture characteristics\n\n$fn = 32;\n\n// Overall dimensions\ncart_length = 100;\ncart_width = 60;\ncart_height = 45;\n\n// Wheel parameters\nwheel_radius = 15;\nwheel_width = 8;\naxle_length = cart_width + 20;\n\n// Wall thickness\nwall = 2;\n\n// Main cart body\nmodule cart_body() {\n    difference() {\n        // Main box\n        translate([0, 0, cart_height/2])\n            cube([cart_length, cart_width, cart_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, cart_height/2])\n            cube([cart_length - 2*wall, cart_width - 2*wall, cart_height - wall], center=true);\n        \n        // Front opening\n        translate([cart_length/2, 0, cart_height/2])\n            cube([wall, cart_width - 2*wall, cart_height/2], center=true);\n    }\n    \n    // Bottom reinforcement ribs\n    for(i = [-1, 1]) {\n        translate([i * cart_length/4, 0, wall])\n            cube([cart_length/2 - 2*wall, cart_width - 2*wall, wall], center=true);\n    }\n}\n\n// Wheel with spokes\nmodule wheel() {\n    difference() {\n        // Main wheel\n        cylinder(h=wheel_width, r=wheel_radius, center=true);\n        \n        // Center hole\n        cylinder(h=wheel_width + 1, r=3, center=true);\n        \n        // Spoke cutouts\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([wheel_radius/2, 0, 0])\n                    cube([wheel_radius, 2, wheel_width + 1], center=true);\n        }\n    }\n    \n    // Tire tread\n    translate([0, 0, wheel_width/2 + 0.5])\n        cylinder(h=1, r1=wheel_radius + 1, r2=wheel_radius + 0.5);\n}\n\n// Axle\nmodule axle() {\n    translate([0, 0, wheel_radius])\n        rotate([90, 0, 0])\n            cylinder(h=axle_length, r=3, center=true);\n}\n\n// Handle\nmodule handle() {\n    translate([-cart_length/2 - 25, 0, cart_height/2])\n        rotate([0, 0, 30])\n            cube([50, 4, 4], center=true);\n    \n    // Handle grip\n    translate([-cart_length/2 - 25, 0, cart_height/2])\n        rotate([0, 0, 30])\n            cylinder(h=6, r=2, center=true);\n}\n\n// Office chair wheels (casters)\nmodule office_wheels() {\n    for(pos = [[cart_length/2 - 10, cart_width/4], \n               [cart_length/2 - 10, -cart_width/4],\n               [-cart_length/2 + 10, cart_width/4],\n               [-cart_length/2 + 10, -cart_width/4]]) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=wall, r=5, $fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Cart body\n    cart_body();\n    \n    // Wheels and axles\n    translate([0, cart_width/2 + 10, wheel_radius])\n        wheel();\n    translate([0, -cart_width/2 - 10, wheel_radius])\n        wheel();\n    axle();\n    \n    // Handle\n    handle();\n    \n    // Office furniture base\n    office_wheels();\n}\n\n// Ergonomic backrest\ntranslate([-cart_length/2 + 2, 0, cart_height + 5])\n    cube([wall, cart_width/2, 20], center=true);\n\n// Document tray\ntranslate([cart_length/4, 0, cart_height - wall/2])\n    cube([cart_length/2 - wall, cart_width/2 - wall, wall], center=true);",
    "renders": true
  },
  {
    "office_supply": "wagon",
    "openscad_code": "// Wagon Cart - Office Supply Cart\n// Realistic style, medium complexity\n\n// Parameters\nwheel_radius = 8;\nwheel_width = 5;\naxle_length = 60;\nbase_width = 50;\nbase_depth = 40;\nbase_height = 2;\nside_wall_height = 30;\nhandle_height = 80;\nhandle_width = 40;\nshelf_spacing = 25;\nwall_thickness = 2;\n\n// Main assembly\nmodule wagon_cart() {\n    // Base platform\n    difference() {\n        cube([base_width, base_depth, base_height], center=true);\n        translate([0, 0, -base_height/2 + 0.5])\n            cube([base_width - wall_thickness*2, base_depth - wall_thickness*2, base_height], center=true);\n    }\n    \n    // Side walls\n    translate([0, base_depth/2 - wall_thickness/2, side_wall_height/2])\n        cube([base_width - wall_thickness*2, wall_thickness, side_wall_height], center=true);\n    \n    translate([0, -base_depth/2 + wall_thickness/2, side_wall_height/2])\n        cube([base_width - wall_thickness*2, wall_thickness, side_wall_height], center=true);\n    \n    // Front and back walls\n    translate([base_width/2 - wall_thickness/2, 0, side_wall_height/2])\n        cube([wall_thickness, base_depth - wall_thickness*2, side_wall_height], center=true);\n    \n    translate([-base_width/2 + wall_thickness/2, 0, side_wall_height/2])\n        cube([wall_thickness, base_depth - wall_thickness*2, side_wall_height], center=true);\n    \n    // Shelf\n    translate([0, 0, shelf_spacing])\n        cube([base_width - wall_thickness*4, base_depth - wall_thickness*4, 2], center=true);\n    \n    // Handle supports\n    translate([handle_width/2, 0, handle_height/2 - base_height/2])\n        cube([wall_thickness, wall_thickness, handle_height], center=true);\n    \n    translate([-handle_width/2, 0, handle_height/2 - base_height/2])\n        cube([wall_thickness, wall_thickness, handle_height], center=true);\n    \n    // Handle crossbar\n    translate([0, 0, handle_height - base_height/2])\n        cube([handle_width, wall_thickness, wall_thickness], center=true);\n    \n    // Wheels\n    for(side = [-1, 1]) {\n        translate([side * axle_length/2, 0, wheel_radius])\n            rotate([90, 0, 0])\n                wheel();\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        // Main wheel\n        cylinder(h=wheel_width, r=wheel_radius, center=true);\n        \n        // Hub hole\n        cylinder(h=wheel_width + 1, r=2, center=true);\n        \n        // Spokes\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n                translate([wheel_radius/2, 0, 0])\n                    cube([wheel_radius/2, wheel_width/2, wheel_width], center=true);\n        }\n    }\n}\n\n// Axle\nmodule axle() {\n    rotate([90, 0, 0])\n        cylinder(h=axle_length, r=2, center=true);\n}\n\n// Final assembly\nunion() {\n    wagon_cart();\n    \n    // Axles\n    translate([0, base_depth/2 - 5, wheel_radius])\n        axle();\n    \n    translate([0, -base_depth/2 + 5, wheel_radius])\n        axle();\n}",
    "renders": true
  },
  {
    "office_supply": "sled",
    "openscad_code": "// Sled Office Chair Base\n// Medium complexity realistic sled base for office furniture\n// Overall dimensions: 120mm x 80mm x 45mm\n\n// Parameters\n$fn = 32;\nwall_thickness = 2;\nbase_width = 80;\nbase_depth = 120;\nbase_height = 45;\nsled_thickness = 6;\ncaster_mount_size = 12;\ncaster_mount_height = 8;\n\n// Main sled base module\nmodule sled_base() {\n    // Front sled runner\n    translate([0, -base_depth/2 + 10, 0])\n        sled_runner(base_width - 20, base_depth/2, base_height/2);\n    \n    // Rear sled runner\n    translate([0, base_depth/2 - 10, 0])\n        sled_runner(base_width - 20, base_depth/2, base_height/2);\n    \n    // Central support beam\n    translate([0, 0, base_height/2 - sled_thickness/2])\n        cube([base_width - 40, base_depth - 20, sled_thickness], center=true);\n    \n    // Cross braces\n    for(y = [-base_depth/4, base_depth/4]) {\n        translate([0, y, base_height/2 - sled_thickness/2])\n            cube([base_width - 10, sled_thickness, base_height/2 - 5], center=true);\n    }\n    \n    // Caster mounting points (4 positions)\n    for(x = [-base_width/3, base_width/3])\n        for(y = [-base_depth/3, base_depth/3]) {\n            caster_mount(x, y);\n        }\n}\n\n// Sled runner module with curved ends\nmodule sled_runner(width, length, height) {\n    difference() {\n        // Main runner body\n        hull() {\n            translate([-width/2, -length/2 + 10, 0])\n                cylinder(h=height, r1=height/2, r2=height/2);\n            translate([width/2, -length/2 + 10, 0])\n                cylinder(h=height, r1=height/2, r2=height/2);\n            translate([-width/2, length/2 - 10, 0])\n                cylinder(h=height, r1=height/2, r2=height/2);\n            translate([width/2, length/2 - 10, 0])\n                cylinder(h=height, r1=height/2, r2=height/2);\n        }\n        \n        // Hollow out runner\n        hull() {\n            translate([-width/2 + wall_thickness, -length/2 + 15, wall_thickness])\n                cylinder(h=height - wall_thickness*2, r1=height/2 - wall_thickness, r2=height/2 - wall_thickness);\n            translate([width/2 - wall_thickness, -length/2 + 15, wall_thickness])\n                cylinder(h=height - wall_thickness*2, r1=height/2 - wall_thickness, r2=height/2 - wall_thickness);\n            translate([-width/2 + wall_thickness, length/2 - 15, wall_thickness])\n                cylinder(h=height - wall_thickness*2, r1=height/2 - wall_thickness, r2=height/2 - wall_thickness);\n            translate([width/2 - wall_thickness, length/2 - 15, wall_thickness])\n                cylinder(h=height - wall_thickness*2, r1=height/2 - wall_thickness, r2=height/2 - wall_thickness);\n        }\n    }\n}\n\n// Caster mounting point module\nmodule caster_mount(x, y) {\n    // Mounting plate\n    translate([x, y, base_height - caster_mount_height/2])\n        cube([caster_mount_size, caster_mount_size, caster_mount_height], center=true);\n    \n    // Screw holes\n    for(hx = [-caster_mount_size/4, caster_mount_size/4])\n        for(hy = [-caster_mount_size/4, caster_mount_size/4]) {\n            translate([x + hx, y + hy, base_height - caster_mount_height])\n                cylinder(h=caster_mount_height + 1, r=1.5, center=false);\n        }\n}\n\n// Assembly\nsled_base();",
    "renders": true
  },
  {
    "office_supply": "scooter",
    "openscad_code": "// Scooter-style office supply holder / desk organizer\n// Dimensions: ~120mm long, 70mm high, 40mm wide\n// Wall thickness: 2mm throughout for 3D printability\n\n$fn = 32;  // Smooth curves\n\n// Main module\nmodule scooter_desk_organizer() {\n    // Base deck with storage compartment\n    difference() {\n        // Main deck body\n        union() {\n            // Lower deck platform\n            translate([0, 0, 2])\n                cube([90, 35, 4], center=true);\n            \n            // Upper deck with slight taper\n            translate([0, 0, 8])\n                cube([85, 30, 4], center=true);\n        }\n        \n        // Storage cavity\n        translate([0, 0, 6])\n            cube([81, 26, 8], center=true);\n    }\n    \n    // Front steering column\n    translate([-35, 0, 8]) {\n        // Steering tube\n        cylinder(h=45, r1=4, r2=3.5);\n        \n        // Handlebar\n        translate([0, 0, 45])\n            rotate([90, 0, 0])\n                cylinder(h=35, r=2);\n    }\n    \n    // Rear wheel assembly\n    translate([35, 0, 5]) {\n        union() {\n            // Wheel guard\n            difference() {\n                cylinder(h=8, r=12);\n                translate([0, 0, -1])\n                    cylinder(h=10, r=10);\n            }\n            \n            // Actual wheel\n            translate([0, 0, 4])\n                cylinder(h=4, r=8);\n            \n            // Axle\n            translate([0, 0, 6])\n                cylinder(h=12, r=2);\n        }\n    }\n    \n    // Front wheel assembly\n    translate([-50, 0, 5]) {\n        union() {\n            // Fork\n            difference() {\n                cylinder(h=8, r=10);\n                translate([0, 0, -1])\n                    cylinder(h=10, r=8);\n            }\n            \n            // Wheel\n            translate([0, 0, 4])\n                cylinder(h=4, r=6);\n            \n            // Axle\n            translate([0, 0, 6])\n                cylinder(h=12, r=2);\n        }\n    }\n    \n    // Side panels for pen storage\n    module pen_holder(x_pos) {\n        translate([x_pos, 0, 15]) {\n            difference() {\n                // Holder body\n                cube([6, 25, 30], center=true);\n                \n                // Pen holes (3 holes)\n                for(i = [-1, 0, 1]) {\n                    translate([0, i*8, 10])\n                        rotate([0, 90, 0])\n                            cylinder(h=10, r=3);\n                }\n            }\n        }\n    }\n    \n    pen_holder(-20);\n    pen_holder(20);\n    \n    // Grip tape texture on deck\n    module grip_pattern() {\n        for(x = [-40:5:40]) {\n            for(y = [-15:3:15]) {\n                translate([x, y, 10.1])\n                    cube([3, 1, 0.5], center=true);\n            }\n        }\n    }\n    \n    grip_pattern();\n    \n    // Reinforcement ribs underneath\n    translate([0, 0, 0]) {\n        union() {\n            // Longitudinal ribs\n            for(y = [-10, 0, 10]) {\n                translate([0, y, 1])\n                    cube([85, 2, 2], center=true);\n            }\n            \n            // Transverse ribs\n            for(x = [-30:15:30]) {\n                translate([x, 0, 1])\n                    cube([2, 32, 2], center=true);\n            }\n        }\n    }\n}\n\n// Render the model\nscooter_desk_organizer();",
    "renders": true
  },
  {
    "office_supply": "bicycle",
    "openscad_code": "// Bicycle furniture item - bike-inspired desk organizer\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall dimensions\nbike_length = 120;\nbike_height = 70;\nbike_width = 30;\n\n// Wall thickness\nwall = 2;\n\nmodule frame_tube(length, diameter) {\n    difference() {\n        cylinder(h = length, d = diameter);\n        translate([0, 0, -1]) \n            cylinder(h = length + 2, d = diameter - wall*2);\n    }\n}\n\nmodule bike_frame() {\n    // Main triangle\n    color(\"darkslategray\") {\n        // Top tube\n        translate([0, 0, 40]) \n            rotate([0, 90, -10]) \n                frame_tube(65, 8);\n        \n        // Down tube\n        translate([0, 0, 0]) \n            rotate([0, 90, 45]) \n                frame_tube(70, 8);\n        \n        // Seat tube\n        translate([-10, 0, 0]) \n            rotate([0, 0, 0]) \n                frame_tube(40, 8);\n        \n        // Chain stays\n        translate([-10, 0, 0]) \n            rotate([0, 90, -15]) \n                frame_tube(30, 6);\n        \n        // Seat stays\n        translate([-10, 0, 40]) \n            rotate([0, 90, -35]) \n                frame_tube(35, 6);\n    }\n}\n\nmodule handlebars() {\n    color(\"silver\") {\n        // Stem\n        rotate([0, 90, 0]) \n            frame_tube(20, 8);\n        \n        // Handlebar\n        translate([10, 0, 60]) \n            rotate([0, 0, 90]) {\n                difference() {\n                    cylinder(h = 40, d = 8);\n                    translate([0, 0, -1]) \n                        cylinder(h = 42, d = 4);\n                }\n            }\n        \n        // Grips\n        translate([10, 15, 60]) \n            rotate([90, 0, 0]) \n                cylinder(h = 10, d = 10);\n        translate([10, -15, 60]) \n            rotate([90, 0, 0]) \n                cylinder(h = 10, d = 10);\n    }\n}\n\nmodule seat() {\n    color(\"black\") {\n        // Seat post\n        translate([-10, 0, 40]) \n            rotate([0, 0, 0]) \n                frame_tube(20, 8);\n        \n        // Saddle\n        translate([-10, 0, 60]) \n            scale([1.5, 0.6, 0.3]) {\n                difference() {\n                    sphere(d = 20);\n                    translate([0, 0, -10]) \n                        cube([30, 30, 10], center = true);\n                }\n            }\n    }\n}\n\nmodule wheels() {\n    // Rear wheel\n    translate([-30, 0, 8]) {\n        color(\"dimgray\") {\n            difference() {\n                cylinder(h = wall*2, d = 40);\n                translate([0, 0, -1]) \n                    cylinder(h = wall*2 + 2, d = 34);\n            }\n        }\n        \n        // Spokes\n        for(i = [0:6:360]) {\n            rotate([0, 0, i]) \n                translate([15, 0, wall]) \n                    cube([30, 1, 1], center = true);\n            rotate([90, 0, i]) \n                translate([15, 0, wall]) \n                    cube([30, 1, 1], center = true);\n        }\n    }\n    \n    // Front wheel\n    translate([30, 0, 8]) {\n        color(\"dimgray\") {\n            difference() {\n                cylinder(h = wall*2, d = 40);\n                translate([0, 0, -1]) \n                    cylinder(h = wall*2 + 2, d = 34);\n            }\n        }\n        \n        // Spokes\n        for(i = [0:6:360]) {\n            rotate([0, 0, i]) \n                translate([15, 0, wall]) \n                    cube([30, 1, 1], center = true);\n            rotate([90, 0, i]) \n                translate([15, 0, wall]) \n                    cube([30, 1, 1], center = true);\n        }\n    }\n}\n\nmodule storage_boxes() {\n    // Top tube storage\n    color(\"lightgray\") {\n        translate([15, 0, 40]) \n            rotate([0, 90, -10]) {\n                difference() {\n                    cube([50, 25, 10], center = true);\n                    translate([0, 0, wall]) \n                        cube([50 - wall*2, 25 - wall*2, 10 - wall], center = true);\n                }\n            }\n    }\n    \n    // Rear rack\n    color(\"darkgray\") {\n        translate([-25, 0, 15]) {\n            difference() {\n                cube([20, 30, 5]);\n                translate([wall, wall, wall]) \n                    cube([20 - wall*2, 30 - wall*2, 5 - wall]);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 8]) {\n    bike_frame();\n    handlebars();\n    seat();\n    wheels();\n    storage_boxes();\n}",
    "renders": true
  },
  {
    "office_supply": "skateboard",
    "openscad_code": "// Skateboard Desk Organizer\n// A realistic skateboard-shaped pen holder & small-item tray for office use\n// Overall size: ~110mm long x 32mm wide x 45mm high\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Skateboard deck profile\nmodule deck_profile() {\n    difference() {\n        // Main deck shape\n        hull() {\n            cube([90, 30, wall], center=true);\n            translate([40,0,0]) cube([10, 28, wall], center=true);\n            translate([-40,0,0]) cube([10, 28, wall], center=true);\n        }\n        \n        // Rounded ends\n        translate([45,0,-wall/2]) scale([1,1.5,1]) cylinder(h=wall+1, d=25, center=true);\n        translate([-45,0,-wall/2]) scale([1,1.5,1]) cylinder(h=wall+1, d=25, center=true);\n    }\n}\n\n// Create deck shell\nmodule deck_shell() {\n    difference() {\n        linear_extrude(height=32) deck_profile();\n        \n        // Hollow interior\n        translate([0,0,wall]) \n            linear_extrude(height=30-wall) \n            scale([0.85,0.85,1]) \n            offset(r=-wall) \n            deck_profile();\n    }\n}\n\n// Skateboard trucks\nmodule truck() {\n    // Baseplate\n    cube([15, 25, 3], center=true);\n    \n    // Hanger\n    translate([0,0,3]) \n        cube([30, 8, 5], center=true);\n    \n    // Bushings\n    for(i=[-1,1]) {\n        translate([i*8,0,8]) \n            cylinder(h=4, d=6, center=true);\n    }\n    \n    // Kingpin\n    translate([0,0,10]) \n        cylinder(h=15, d=3, center=true);\n}\n\n// Wheels\nmodule wheel() {\n    cylinder(h=8, d=12, center=true);\n    translate([0,0,-4]) \n        cylinder(h=1, d=8, center=true);\n}\n\n// Complete truck assembly\nmodule truck_assembly() {\n    union() {\n        truck();\n        \n        // Wheels\n        translate([-15,0,-6]) wheel();\n        translate([15,0,-6]) wheel();\n    }\n}\n\n// Pen holes\nmodule pen_holes() {\n    for(i=[0:3]) {\n        translate([20 - i*15, 0, 30]) \n            cylinder(h=32, d=8 + wall);\n    }\n}\n\n// Main model\nunion() {\n    // Deck container\n    translate([0,0,0]) \n        deck_shell();\n    \n    // Trucks (decorative, non-functional)\n    translate([-25,0,32]) \n        rotate([90,0,0]) \n        truck_assembly();\n    \n    translate([25,0,32]) \n        rotate([90,0,0]) \n        truck_assembly();\n    \n    // Pen holes through deck\n    difference() {\n        translate([0,0,0]) \n            deck_shell();\n        pen_holes();\n    }\n    \n    // Small tray section\n    translate([0,10,30]) {\n        difference() {\n            cube([40, 10, 8], center=true);\n            translate([0,0,wall]) \n                cube([36, 6, 8-wall], center=true);\n        }\n    }\n    \n    // Grip tape texture lines\n    for(i=[-4:4]) {\n        translate([i*8,0,32]) \n            cube([1, 28, 0.5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "sleigh",
    "openscad_code": "// OpenSCAD Sleigh Furniture Piece – Desk-Sized Decorative Sleigh\n// Overall size: 120 mm long × 55 mm wide × 45 mm high\n// Wall thickness: 2 mm everywhere for easy 3D printing\n\n$fn = 32; // smooth curves\n\n// Main module\nmodule sleigh_desk_ornament() {\n    // Runner blades (left & right)\n    difference() {\n        union() {\n            runner_blade();\n            mirror([1,0,0]) runner_blade();\n        }\n        // cut off blade top for flat foot\n        translate([-65,-30,-1]) cube([130,60,2]);\n    }\n\n    // Sleigh body (hollow shell)\n    difference() {\n        sleigh_shell_outside();\n        sleigh_shell_inside();\n    }\n\n    // Seat plank\n    translate([0,-20,34]) cube([80,40,2], center=true);\n\n    // Backrest\n    difference() {\n        backrest_outside();\n        backrest_inside();\n    }\n\n    // Decorative slats on the sides\n    for (x = [-50,-10,30]) {\n        translate([x,-25,20]) rotate([0,90,0]) cylinder(h=2, d=4);\n        translate([x, 25,20]) rotate([0,90,0]) cylinder(h=2, d=4);\n    }\n\n    // Front pull handle (curved bar)\n    translate([58,0,25]) rotate([0,0,-20]) pull_handle();\n}\n\n// Runner blade\nmodule runner_blade() {\n    translate([0,-27.5,0]) {\n        // main curved blade\n        difference() {\n            linear_extrude(height=2, center=true, convexity=3)\n                for (i=[0:5:180]) {\n                    rotate([0,0,i]) translate([60-i/3,0,0]) circle(d=3);\n                }\n            // flat bottom\n            translate([-65,-2,-1]) cube([130,4,4]);\n        }\n    }\n}\n\n// Outside shape of sleigh body\nmodule sleigh_shell_outside() {\n    hull() {\n        // front curved nose\n        translate([55,0,20]) rotate([0,90,0]) cylinder(h=2, r1=25, r2=15);\n        // back straight wall\n        translate([-55,0,20]) cube([2,50,40], center=true);\n        // side walls\n        for (y = [-25,25]) {\n            translate([0,y,20]) cube([110,2,40], center=true);\n        }\n    }\n}\n\n// Inside hollow (2 mm wall)\nmodule sleigh_shell_inside() {\n    scale([0.92,0.92,0.9]) sleigh_shell_outside();\n}\n\n// Backrest outside\nmodule backrest_outside() {\n    translate([-55,0,42]) cube([4,50,25], center=true);\n}\n\n// Backrest inside cutout\nmodule backrest_inside() {\n    translate([-55,0,42]) cube([4.5,46,21], center=true);\n}\n\n// Pull handle bar\nmodule pull_handle() {\n    difference() {\n        rotate_extrude(angle=180, convexity=2) {\n            translate([18,0,0]) circle(d=6);\n        }\n        // hollow center\n        rotate_extrude(angle=180, convexity=2) {\n            translate([19,0,0]) circle(d=3);\n        }\n    }\n}\n\n// Render the model\nsleigh_desk_ornament();",
    "renders": true
  },
  {
    "office_supply": "wheelbarrow",
    "openscad_code": "// Wheelbarrow Furniture - Realistic Medium Complexity\n// Overall dimensions: 120mm x 60mm x 55mm\n\n// Parameters\ntray_length = 100;\ntray_width = 60;\ntray_height = 30;\nleg_length = 25;\nwheel_radius = 20;\nwheel_thickness = 10;\nhandle_length = 100;\nhandle_diameter = 6;\n\n// Main wheelbarrow module\nmodule wheelbarrow() {\n    // Tray assembly\n    color(\"firebrick\") translate([0, 0, leg_length]) tray_assembly();\n    \n    // Legs\n    color(\"sienna\") legs();\n    \n    // Wheel assembly\n    color(\"black\") wheel_assembly();\n    \n    // Handles\n    color(\"burlywood\") handles();\n}\n\n// Tray with realistic details\nmodule tray_assembly() {\n    difference() {\n        // Main tray body\n        hull() {\n            // Front tapered section\n            translate([-tray_length/2 + 5, 0, 0])\n                cube([10, tray_width, tray_height], center = true);\n            // Main section\n            translate([tray_length/2 - 15, 0, 0])\n                cube([tray_length - 30, tray_width - 5, tray_height], center = true);\n        }\n        \n        // Interior cavity\n        translate([0, 0, -2])\n            cube([tray_length - 8, tray_width - 12, tray_height - 2], center = true);\n        \n        // Drain holes pattern\n        for (x = [-30:15:30]) {\n            for (y = [-20:10:20]) {\n                translate([x, y, -tray_height/2 + 1])\n                    cylinder(h=5, r=1.5, $fn=8);\n            }\n        }\n    }\n    \n    // Reinforcement ribs\n    for (x = [-35, -10, 15]) {\n        translate([x, 0, tray_height/2 - 1])\n            cube([3, tray_width - 6, 2], center = true);\n    }\n}\n\n// Support legs structure\nmodule legs() {\n    // Left leg\n    translate([-tray_length/2 + 20, tray_width/2 - 3, leg_length/2])\n        rotate([0, 0, 10])\n        cylinder(h=leg_length + 5, r=3, $fn=12);\n    \n    // Right leg\n    translate([-tray_length/2 + 20, -tray_width/2 + 3, leg_length/2])\n        rotate([0, 0, -10])\n        cylinder(h=leg_length + 5, r=3, $fn=12);\n    \n    // Cross brace\n    translate([-tray_length/2 + 15, 0, leg_length - 5])\n        rotate([90, 0, 0])\n        cylinder(h=tray_width - 10, r=2, $fn=8);\n}\n\n// Wheel with axle\nmodule wheel_assembly() {\n    // Wheel\n    rotate([90, 0, 0])\n    translate([tray_length/2 - 5, 0, -leg_length + wheel_radius])\n    difference() {\n        // Tire\n        cylinder(h=wheel_thickness, r=wheel_radius, $fn=32);\n        \n        // Spokes pattern\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([wheel_radius/2, 0, -1])\n            cube([wheel_radius - 5, 3, wheel_thickness + 2], center = true);\n        }\n        \n        // Hub hole\n        cylinder(h=wheel_thickness + 2, r=3, $fn=12);\n    }\n    \n    // Axle\n    rotate([90, 0, 0])\n    translate([tray_length/2 - 5, 0, -leg_length + wheel_radius])\n    cylinder(h=tray_width + 10, r=3, $fn=8);\n}\n\n// Handles with ergonomic grips\nmodule handles() {\n    // Left handle\n    translate([-tray_length/2 + 5, tray_width/2 - 2, leg_length + tray_height/2])\n    rotate([0, 30, 0])\n    difference() {\n        // Main handle bar\n        cylinder(h=handle_length, r=handle_diameter/2, $fn=8);\n        \n        // Grip texture pattern\n        for (i = [10:5:handle_length - 10]) {\n            translate([0, 0, i])\n            rotate([0, 90, 0])\n            cylinder(h=handle_diameter + 1, r=0.5, $fn=6);\n        }\n    }\n    \n    // Right handle\n    translate([-tray_length/2 + 5, -tray_width/2 + 2, leg_length + tray_height/2])\n    rotate([0, 30, 0])\n    difference() {\n        // Main handle bar\n        cylinder(h=handle_length, r=handle_diameter/2, $fn=8);\n        \n        // Grip texture pattern\n        for (i = [10:5:handle_length - 10]) {\n            translate([0, 0, i])\n            rotate([0, 90, 0])\n            cylinder(h=handle_diameter + 1, r=0.5, $fn=6);\n        }\n    }\n    \n    // Handle support brackets\n    translate([-tray_length/2 - 5, tray_width/2 - 5, leg_length + tray_height/2 - 5])\n    cube([10, 4, 10]);\n    \n    translate([-tray_length/2 - 5, -tray_width/2 + 5, leg_length + tray_height/2 - 5])\n    cube([10, 4, 10]);\n}\n\n// Render the wheelbarrow\nwheelbarrow();",
    "renders": true
  },
  {
    "office_supply": "wagonwheel",
    "openscad_code": "// Wagon Wheel Office Clock - 3D Printable\n// Medium complexity realistic furniture item\n// Overall diameter: 120mm, thickness: 20mm\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nwheel_diameter = 120;\nwheel_thickness = 20;\nhub_diameter = 30;\nhub_thickness = 22;\nspoke_count = 12;\nspoke_width = 8;\nspoke_thickness = 6;\nrim_width = 10;\nwall_thickness = 2;\n\n// Outer rim with realistic proportions\nmodule wagon_rim() {\n    difference() {\n        // Outer solid rim\n        cylinder(d=wheel_diameter, h=wheel_thickness, center=true);\n        \n        // Hollow center for weight reduction\n        cylinder(d=wheel_diameter - 2*rim_width, h=wheel_thickness + 1, center=true);\n    }\n}\n\n// Central hub with mounting hole\nmodule wheel_hub() {\n    difference() {\n        // Main hub cylinder\n        cylinder(d=hub_diameter, h=hub_thickness, center=true);\n        \n        // Central clock mechanism hole (standard 8mm shaft)\n        cylinder(d=8.5, h=hub_thickness + 2, center=true);\n        \n        // Keyhole slot for hanging\n        translate([0, hub_diameter/2 - 5, 0])\n            rotate([90, 0, 0])\n                cylinder(d=6, h=10, center=true);\n        translate([0, hub_diameter/2 - 10, 0])\n            rotate([90, 0, 0])\n                cube([8, 15, 10], center=true);\n    }\n    \n    // Decorative hub ring\n    translate([0, 0, wheel_thickness/2 - 1])\n        cylinder(d=hub_diameter + 4, h=wall_thickness, center=false);\n}\n\n// Spokes with realistic tapered design\nmodule spokes() {\n    for (i = [0 : spoke_count - 1]) {\n        rotate([0, 0, i * 360/spoke_count]) {\n            // Main spoke body\n            translate([hub_diameter/2 + (wheel_diameter - hub_diameter - 2*rim_width)/4, 0, 0])\n                cube([spoke_width, (wheel_diameter - hub_diameter - 2*rim_width)/2, spoke_thickness], center=true);\n            \n            // Reinforcement gussets\n            translate([hub_diameter/2 + (wheel_diameter - hub_diameter - 2*rim_width)/8, 0, spoke_thickness/2 - wall_thickness/2])\n                cube([spoke_width/2, (wheel_diameter - hub_diameter - 2*rim_width)/4, wall_thickness], center=true);\n            translate([hub_diameter/2 + (wheel_diameter - hub_diameter - 2*rim_width)/8, 0, -spoke_thickness/2 + wall_thickness/2])\n                cube([spoke_width/2, (wheel_diameter - hub_diameter - 2*rim_width)/4, wall_thickness], center=true);\n        }\n    }\n}\n\n// Realistic wood grain texture elements\nmodule wood_texture() {\n    for (angle = [0 : 30 : 150]) {\n        rotate([0, 0, angle]) {\n            for (r = [hub_diameter/2 + rim_width : 5 : wheel_diameter/2 - rim_width - 2]) {\n                translate([r, 0, wheel_thickness/2 - wall_thickness/2])\n                    rotate([90, 0, 0])\n                        cylinder(d=1.5, h=wall_thickness, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main wheel structure\n    union() {\n        wagon_rim();\n        wheel_hub();\n        spokes();\n    }\n    \n    // Clock face indicators (realistic hour markers)\n    for (i = [0 : 11]) {\n        rotate([0, 0, i * 30]) {\n            translate([wheel_diameter/2 - rim_width/2 - 3, 0, wheel_thickness/2 - wall_thickness/2])\n                cube([6, i % 3 == 0 ? 4 : 2, wall_thickness], center=true);\n        }\n    }\n    \n    // Subtle wood grain texture\n    wood_texture();\n}",
    "renders": true
  },
  {
    "office_supply": "barrel",
    "openscad_code": "// Barrel-style stool made from a realistic wooden barrel\n// Overall height: 80 mm, seat diameter: 50 mm, safe for 3D printing\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Main barrel body\nmodule barrel_body() {\n    difference() {\n        // Outer staves\n        union() {\n            for (i = [0 : 15]) {\n                rotate([0, 0, i * 22.5])\n                translate([0, 0, -40])\n                cylinder(h = 80, r1 = 25, r2 = 30, center = false);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, -40])\n        cylinder(h = 82, r1 = 21, r2 = 26, center = false);\n        \n        // Top opening\n        translate([0, 0, 40])\n        cylinder(h = 5, r = 25, center = false);\n        \n        // Bottom opening\n        translate([0, 0, -45])\n        cylinder(h = 5, r = 20, center = false);\n    }\n}\n\n// Metal hoops around the barrel\nmodule metal_hoops() {\n    difference() {\n        // Top hoop\n        translate([0, 0, 35])\n        cylinder(h = 3, r = 30.5, center = false);\n        \n        translate([0, 0, 34.5])\n        cylinder(h = 4, r = 28.5, center = false);\n    }\n    \n    difference() {\n        // Middle hoop\n        translate([0, 0, 0])\n        cylinder(h = 3, r = 31, center = false);\n        \n        translate([0, 0, -0.5])\n        cylinder(h = 4, r = 29, center = false);\n    }\n    \n    difference() {\n        // Bottom hoop\n        translate([0, 0, -35])\n        cylinder(h = 3, r = 30.5, center = false);\n        \n        translate([0, 0, -35.5])\n        cylinder(h = 4, r = 28.5, center = false);\n    }\n}\n\n// Padded seat cushion on top\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, 42])\n        cylinder(h = 8, r = 25, center = false);\n        \n        // Cushion indention\n        translate([0, 0, 42.5])\n        cylinder(h = 6, r = 22, center = false);\n    }\n    \n    // Cushion piping detail\n    translate([0, 0, 42])\n    cylinder(h = 1, r = 25.5, center = false);\n}\n\n// Support legs inside barrel\nmodule internal_supports() {\n    // Central support column\n    translate([0, 0, -40])\n    cylinder(h = 80, r = 3, center = false);\n    \n    // Radial supports\n    for (i = [0 : 3]) {\n        rotate([0, 0, i * 90])\n        translate([10, 0, -40])\n        cube([20, 3, 80], center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Color the wood parts\n    color([0.6, 0.4, 0.2]) {\n        barrel_body();\n    }\n    \n    // Color the metal parts\n    color([0.7, 0.7, 0.7]) {\n        metal_hoops();\n    }\n    \n    // Color the cushion\n    color([0.3, 0.2, 0.1]) {\n        seat_cushion();\n    }\n    \n    // Internal supports (hidden, same wood color)\n    color([0.6, 0.4, 0.2]) {\n        internal_supports();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "bucket",
    "openscad_code": "// Office Bucket - Realistic Style, Medium Complexity\n// Dimensions: 100mm diameter, 95mm height, 2mm wall thickness\n\n$fn = 32;\n\n// Main bucket body\nmodule bucket_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=90, r1=50, r2=45, center=false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=88, r1=48, r2=43, center=false);\n    }\n}\n\n// Reinforced rim with handle mounts\nmodule reinforced_rim() {\n    union() {\n        // Thick rim ring\n        translate([0, 0, 90])\n            difference() {\n                cylinder(h=5, r1=52, r2=52, center=false);\n                cylinder(h=5, r1=45, r2=45, center=false);\n            }\n        \n        // Handle mounting brackets\n        translate([52, 0, 92.5])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=4, center=true);\n        \n        translate([-52, 0, 92.5])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=4, center=true);\n    }\n}\n\n// Metal wire handle\nmodule handle() {\n    rotate([0, 90, 0])\n    translate([0, 0, -52])\n    rotate_extrude(angle=180, $fn=20)\n    translate([52, 0, 0])\n    circle(r=3);\n}\n\n// Base reinforcement ring\nmodule base_ring() {\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=3, r1=50, r2=50, center=false);\n            cylinder(h=3, r1=47, r2=47, center=false);\n        }\n}\n\n// Structural ribs for furniture-grade strength\nmodule structural_ribs() {\n    for(i=[0:30:359]) {\n        rotate([0, 0, i])\n        translate([0, 47, 1])\n            cube([2, 6, 88], center=true);\n    }\n}\n\n// Ergonomic finger grips\nmodule finger_grips() {\n    for(i=[0:90:359]) {\n        rotate([0, 0, i])\n        translate([48, 0, 45])\n            rotate([90, 0, 0])\n                cylinder(h=30, r1=3, r2=3, center=true);\n    }\n}\n\n// Floor protection pads\nmodule floor_pads() {\n    for(i=[0:120:359]) {\n        rotate([0, 0, i])\n        translate([40, 0, 0])\n            cylinder(h=2, r=4, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    bucket_body();\n    reinforced_rim();\n    handle();\n    base_ring();\n    structural_ribs();\n    finger_grips();\n    floor_pads();\n}",
    "renders": true
  },
  {
    "office_supply": "pail",
    "openscad_code": "// Pail Furniture Item - Realistic Medium Complexity\n// Office-style pail with functional elements and structural details\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Parameters\npail_height = 100;\npail_diameter = 80;\nwall_thickness = 2;\nhandle_diameter = 6;\nbase_thickness = 3;\nlip_height = 5;\n\nmodule pail_body() {\n    // Main cylindrical body\n    difference() {\n        cylinder(h = pail_height, d = pail_diameter, center = false);\n        \n        // Hollow interior\n        translate([0, 0, base_thickness])\n            cylinder(h = pail_height - base_thickness, d = pail_diameter - 2*wall_thickness, center = false);\n    }\n    \n    // Reinforced base ring\n    translate([0, 0, 0])\n        cylinder(h = base_thickness, d = pail_diameter + 4, center = false);\n}\n\nmodule handle_mounts() {\n    // Left mount\n    translate([0, (pail_diameter/2) - 2, pail_height - 15])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 8, center = false);\n    \n    // Right mount\n    translate([0, -(pail_diameter/2) + 2, pail_height - 15])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 8, center = false);\n}\n\nmodule handle() {\n    // Handle arc\n    translate([0, 0, pail_height - 10])\n        rotate([0, 90, 0])\n            rotate_extrude(angle = 180, $fn = 64)\n                translate([(pail_diameter/2) + 2, 0, 0])\n                    circle(d = handle_diameter);\n    \n    // Handle grips\n    for(i = [-1, 1]) {\n        translate([0, i * ((pail_diameter/2) + 8), pail_height - 10])\n            rotate([90, 0, 0])\n                cylinder(h = 15, d = handle_diameter, center = false);\n    }\n}\n\nmodule rolled_lip() {\n    // Rolled top edge for comfort\n    difference() {\n        translate([0, 0, pail_height])\n            cylinder(h = lip_height, d = pail_diameter + 2, center = false);\n        \n        translate([0, 0, pail_height])\n            cylinder(h = lip_height + 0.5, d = pail_diameter - wall_thickness, center = false);\n    }\n}\n\nmodule structural_ribs() {\n    // Vertical reinforcement ribs\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([(pail_diameter/2) - wall_thickness - 1, 0, base_thickness])\n                cube([2, 1, pail_height - base_thickness - lip_height], center = true);\n    }\n}\n\nmodule measurement_markers() {\n    // 25%, 50%, 75% fill indicators\n    for(level = [0.25, 0.5, 0.75]) {\n        translate([(pail_diameter/2) - 5, 0, base_thickness + (level * (pail_height - base_thickness - lip_height))])\n            cube([4, 1, 0.5], center = true);\n    }\n}\n\n// Assemble the pail\nunion() {\n    pail_body();\n    handle_mounts();\n    handle();\n    rolled_lip();\n    structural_ribs();\n    measurement_markers();\n}",
    "renders": true
  },
  {
    "office_supply": "shovel",
    "openscad_code": "// Shovel furniture item for office use\n// Dimensions: 120mm long x 40mm wide x 15mm thick\n// 3D printable with 2mm wall thickness\n\n// Main parameters\nshovel_length = 120;\nhandle_length = 80;\nblade_width = 40;\nblade_height = 30;\nwall_thickness = 2;\n\nmodule handle() {\n    // Main handle tube\n    difference() {\n        cylinder(h=handle_length, d=8, $fn=32);\n        translate([0, 0, wall_thickness])\n            cylinder(h=handle_length - wall_thickness*2, d=8 - wall_thickness*2, $fn=32);\n    }\n    \n    // Handle grip rings for comfort\n    for(i = [0:3]) {\n        translate([0, 0, 10 + i*15])\n            difference() {\n                cylinder(h=3, d=10, $fn=32);\n                translate([0, 0, wall_thickness])\n                    cylinder(h=3 - wall_thickness, d=10 - wall_thickness*2, $fn=32);\n            }\n    }\n}\n\nmodule blade() {\n    // Main blade body\n    difference() {\n        // Outer blade shape\n        linear_extrude(height=blade_height)\n            polygon([\n                [0, 0],\n                [blade_width, 0],\n                [blade_width*0.8, blade_height*0.7],\n                [blade_width*0.2, blade_height*0.7],\n                [0, 0]\n            ]);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            linear_extrude(height=blade_height - wall_thickness*2)\n                polygon([\n                    [0, 0],\n                    [blade_width - wall_thickness*2, 0],\n                    [blade_width*0.8 - wall_thickness*1.5, blade_height*0.7 - wall_thickness*2],\n                    [blade_width*0.2 + wall_thickness*1.5, blade_height*0.7 - wall_thickness*2],\n                    [0, 0]\n                ]);\n    }\n    \n    // Reinforcement ribs\n    for(i = [1:3]) {\n        translate([blade_width*i/4, 0, blade_height/2])\n            cube([wall_thickness, wall_thickness, blade_height*0.4], center=true);\n    }\n}\n\nmodule shovel_joint() {\n    // Connection joint between handle and blade\n    difference() {\n        // Outer joint\n        hull() {\n            cylinder(h=12, d=10, $fn=32);\n            translate([blade_width/2, 0, 0])\n                cube([blade_width, 8, 12], center=true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            hull() {\n                cylinder(h=12 - wall_thickness*2, d=10 - wall_thickness*2, $fn=32);\n                translate([blade_width/2, 0, 0])\n                    cube([blade_width - wall_thickness*2, 8 - wall_thickness*2, 12 - wall_thickness*2], center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, -handle_length])\n        handle();\n    \n    // Joint\n    shovel_joint();\n    \n    // Blade\n    translate([blade_width/2, 0, 12])\n        rotate([90, 0, 0])\n            blade();\n}",
    "renders": true
  },
  {
    "office_supply": "rake",
    "openscad_code": "// Garden rake for office plant-care corner\n// Overall length 140 mm – fits printers with 150 mm bed\n$fn = 32;\n\nmodule rake_head() {\n    // Main head plate – 2 mm wall thickness\n    difference() {\n        cube([80, 20, 4], center = true);\n        translate([0, 0, 2])\n            cube([76, 16, 2], center = true);   // hollow inside\n    }\n\n    // Tines – 2 mm thick, 2 mm spacing\n    for (x = [-35:5:35]) {\n        translate([x, 0, -8])\n            cube([2, 2, 12], center = true);\n    }\n}\n\nmodule handle_shaft() {\n    // Handle tube – 2 mm wall\n    difference() {\n        cylinder(h = 120, d = 12, center = true);\n        translate([0, 0, 2])\n            cylinder(h = 124, d = 8, center = true);\n    }\n}\n\nmodule grip() {\n    // Ergonomic grip cap\n    translate([0, 0, 62])\n    difference() {\n        cylinder(h = 20, d = 14, center = true);\n        cylinder(h = 21, d = 10, center = true);\n    }\n}\n\nmodule ferrule_joint() {\n    // Metal ferrule connecting head and handle\n    translate([0, 0, -58])\n    cylinder(h = 10, d = 14, center = true);\n}\n\nunion() {\n    rake_head();\n    handle_shaft();\n    grip();\n    ferrule_joint();\n}",
    "renders": true
  },
  {
    "office_supply": "hoe",
    "openscad_code": "// Realistic 3D-printable desk-top \"hoe\" office organizer\n// Overall size: ~120 x 50 x 45 mm\n\n// --- Parameters --------------------------------------------------\nwall         = 2;          // 3D-print friendly wall thickness\nhandle_len   = 85;\nhandle_d     = 12;\nblade_len    = 45;\nblade_w      = 35;\nblade_thick  = 3;\nsocket_len   = 25;\nsocket_d     = 14;\nrib_w        = 1.5;\nrib_gap      = 6;\nribs         = 4;\n\n// --- Modules ----------------------------------------------------\nmodule handle() {\n    // Main tube\n    cylinder(h = handle_len, d = handle_d, $fn = 32);\n    \n    // End-cap sphere for ergonomics\n    translate([0,0,handle_len])\n        sphere(d = handle_d, $fn = 32);\n    \n    // Grip rings\n    for(i = [1 : rib_gap : handle_len - 20]) {\n        translate([0,0,i])\n            cylinder(h = rib_w, d1 = handle_d + 2, d2 = handle_d, $fn = 32);\n    }\n}\n\nmodule socket() {\n    // Cylindrical socket\n    cylinder(h = socket_len, d = socket_d, $fn = 32);\n    \n    // Reinforcement collar\n    translate([0,0,-1])\n        cylinder(h = 4, d1 = socket_d + 4, d2 = socket_d, $fn = 32);\n    \n    // Rivet-style pins for visual detail\n    for(a = [0 : 120 : 359]) {\n        rotate([0,0,a])\n            translate([socket_d/2 + 1, 0, socket_len/2])\n                rotate([90,0,0])\n                    cylinder(h = 3, d = 2.5, $fn = 12);\n    }\n}\n\nmodule blade() {\n    // Main blade body\n    difference() {\n        // Outer blade shape\n        linear_extrude(height = blade_thick)\n            polygon([\n                [0,0],\n                [blade_len, blade_w/2],\n                [blade_len, -blade_w/2],\n                [0,0]\n            ]);\n        \n        // Lightening slot in blade center\n        translate([blade_len/2, 0, -0.5])\n            cube([blade_len/2 - 4, blade_w/3, blade_thick + 1], center = true);\n    }\n    \n    // Edge bevel\n    translate([blade_len - 0.5, 0, blade_thick/2])\n        rotate([0,-90,0])\n            cylinder(h = blade_w, r = blade_thick, $fn = 32);\n}\n\n// --- Assembly ---------------------------------------------------\nunion() {\n    // Handle\n    handle();\n    \n    // Socket\n    translate([0,0,handle_len - 5])\n        socket();\n    \n    // Blade\n    translate([0,0,handle_len + socket_len - 5])\n        rotate([90,0,0])\n            blade();\n}",
    "renders": true
  },
  {
    "office_supply": "spade",
    "openscad_code": "// Spade Furniture - Office Chair Spade Backrest\n// Realistic style, medium complexity, 3D printable\n\n// Main parameters\nspade_length = 120;\nspade_width = 80;\nspade_thickness = 4;\nhandle_length = 30;\nhandle_diameter = 8;\nbase_width = 40;\nbase_height = 8;\n\n// Material thickness for 3D printing\nwall_thickness = 2;\n\nmodule spade_blade() {\n    // Main blade shape using cylinders and cubes for smooth curves\n    difference() {\n        union() {\n            // Central blade body\n            translate([0, 0, spade_thickness/2])\n                scale([1, 1.4, 1])\n                cylinder(h=spade_thickness, r1=spade_width/2, r2=spade_width/3, $fn=50);\n            \n            // Top rounded part\n            translate([0, spade_length/2 - spade_width/3, spade_thickness/2])\n                sphere(d=spade_width/1.5, $fn=50);\n            \n            // Bottom taper\n            translate([0, -spade_length/2 + 10, spade_thickness/2])\n                cylinder(h=spade_thickness, r1=spade_width/2.5, r2=0, $fn=50);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, spade_thickness/2 + wall_thickness])\n            scale([0.8, 0.8, 1])\n            cylinder(h=spade_thickness, r1=spade_width/2 - wall_thickness, r2=spade_width/3 - wall_thickness, $fn=50);\n    }\n}\n\nmodule spade_handle() {\n    // Handle grip\n    translate([0, -spade_length/2 - handle_length/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, d=handle_diameter, $fn=20);\n    \n    // Handle connection to blade\n    translate([0, -spade_length/2, 0])\n        cube([handle_diameter, 10, spade_thickness], center=true);\n}\n\nmodule support_structure() {\n    // Reinforcement ribs\n    for(i = [-1, 1]) {\n        translate([i * spade_width/4, 0, 0])\n            cube([wall_thickness*2, spade_length*0.8, spade_thickness*0.8], center=true);\n    }\n    \n    // Base mounting plate\n    translate([0, spade_length/2 + 15, spade_thickness/2])\n        cube([base_width, base_height, spade_thickness*2], center=true);\n    \n    // Mounting holes\n    for(i = [-1, 1]) {\n        translate([i * base_width/3, spade_length/2 + 15, spade_thickness/2])\n            rotate([90, 0, 0])\n            cylinder(h=spade_thickness*2 + 2, d=3, center=true, $fn=20);\n    }\n}\n\nmodule ergonomic_details() {\n    // Lumbar support curve\n    translate([0, spade_length/4, spade_thickness/2 + 2])\n        rotate([0, 0, 0])\n        cylinder(h=wall_thickness, r1=spade_width/3, r2=spade_width/3, $fn=50);\n    \n    // Side wings for support\n    for(i = [-1, 1]) {\n        translate([i * (spade_width/2 - 5), 0, spade_thickness/2])\n            rotate([0, i * 15, 0])\n            cube([wall_thickness*3, spade_length*0.7, spade_thickness], center=true);\n    }\n    \n    // Ventilation holes\n    for(y = [-spade_length/3, 0, spade_length/3]) {\n        for(x = [-spade_width/3, 0, spade_width/3]) {\n            translate([x, y, spade_thickness/2])\n                rotate([90, 0, 0])\n                cylinder(h=spade_thickness + 1, d=6, $fn=20);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main spade backrest\n    spade_blade();\n    \n    // Handle for adjustment\n    spade_handle();\n    \n    // Structural support\n    support_structure();\n    \n    // Ergonomic additions\n    ergonomic_details();\n}",
    "renders": true
  },
  {
    "office_supply": "hammer",
    "openscad_code": "// Hammer Furniture - Realistic Style (Medium Complexity)\n// Overall dimensions: ~140mm length, 52mm head width, 30mm handle height\n\n$fn = 32;\n\nmodule hammer_head() {\n    // Main hammer head body - 3mm walls\n    difference() {\n        cube([52, 20, 30], center = true);\n        translate([0, 0, 0])\n            cube([48, 16, 26], center = true);\n    }\n    \n    // Claw curve - 2mm thick\n    translate([-26, 0, 0])\n    difference() {\n        rotate([0, 90, 0])\n            cylinder(h = 20, r1 = 15, r2 = 15);\n        translate([0, 0, -10])\n            cube([30, 30, 20], center = true);\n    }\n    \n    // Striking face - 2mm thick\n    translate([26, 0, 0])\n    difference() {\n        cylinder(h = 2, r = 10);\n        translate([0, 0, -1])\n            cylinder(h = 4, r = 8);\n    }\n    \n    // Nail puller slot\n    translate([-26, 0, 15])\n    cube([4, 2, 8], center = true);\n}\n\nmodule handle_grip() {\n    // Main handle - 2mm wall thickness\n    difference() {\n        cylinder(h = 110, r = 12);\n        translate([0, 0, 5])\n            cylinder(h = 100, r = 10);\n    }\n    \n    // Grip rings - 2mm thick each\n    for(i = [10:10:90]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h = 3, r = 12.5);\n            cylinder(h = 3, r = 10);\n        }\n    }\n    \n    // End cap - 2mm thick\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = 5, r = 13);\n        translate([0, 0, 1])\n            cylinder(h = 3, r = 11);\n    }\n}\n\nmodule joint_connector() {\n    // Handle to head joint - 3mm thick\n    translate([0, 0, 15])\n    difference() {\n        cube([20, 20, 10], center = true);\n        translate([0, 0, 1])\n            cube([16, 16, 8], center = true);\n    }\n    \n    // Reinforcement rings\n    for(i = [-3, 3]) {\n        translate([0, 0, 15 + i])\n        difference() {\n            cylinder(h = 2, r = 10);\n            cylinder(h = 2, r = 8);\n        }\n    }\n}\n\nunion() {\n    // Assemble hammer\n    translate([0, 0, 70])\n    rotate([0, 90, 0])\n    hammer_head();\n    \n    translate([0, 0, 0])\n    handle_grip();\n    \n    translate([0, 0, 60])\n    joint_connector();\n}",
    "renders": true
  },
  {
    "office_supply": "saw",
    "openscad_code": "// OpenSCAD code for a realistic 3D-printable SAW (Saw) furniture item – medium complexity\n// Approx. 120 mm long overall, 2 mm wall thickness throughout, printable without supports.\n\n$fn = 50;          // Quality for curved surfaces\nblade_t  = 2;      // Wall / blade thickness\ngrip_d   = 18;     // Handle outer diameter\ngrip_h   = 90;     // Handle length\nguard_w  = 26;     // Front hand-guard width\nblade_L  = 120;    // Total blade length\nblade_W  = 45;     // Blade height at base\ntooth_pitch = 4;   // Distance between teeth\n\nmodule handle() {\n    // Ergonomic grip with two finger grooves\n    difference() {\n        union() {\n            // Main cylindrical grip\n            cylinder(h = grip_h, d = grip_d, center = false);\n            // Rear flare for palm rest\n            translate([0, 0, 78])\n                cylinder(h = 12, d1 = grip_d, d2 = grip_d + 8, center = false);\n            // Front guard disc\n            translate([0, 0, 0])\n                cylinder(h = blade_t, d = guard_w, center = false);\n        }\n        // Central bore (hollow for material saving)\n        cylinder(h = grip_h, d = grip_d - 2*blade_t, center = false);\n        // Two finger grooves\n        for(z = [20, 50])\n            translate([0, 0, z])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 10, center = true);\n    }\n}\n\nmodule saw_blade() {\n    // Tapered blade with teeth on lower edge\n    linear_extrude(height = blade_t, center = false)\n    polygon(points=[\n        [0, 0],\n        [blade_L, 0],\n        [blade_L - 15, blade_W],\n        [0, blade_W - 8]\n    ]);\n\n    // Teeth along bottom edge\n    teeth_count = floor(blade_L / tooth_pitch);\n    for(i = [0 : teeth_count - 1]) {\n        x = i * tooth_pitch;\n        translate([x, -1, 0])\n            cube([tooth_pitch/2, 2, blade_t]);\n    }\n\n    // Central spine rib for stiffness\n    translate([0, blade_W/2, blade_t/2])\n        cube([blade_L, 3, blade_t], center = true);\n}\n\nmodule mounting_slot() {\n    // Rectangular slot in handle front for blade insertion (mortise)\n    translate([0, 0, blade_t])\n        cube([15, blade_W - 8, blade_t * 2], center = true);\n}\n\n// Assembly\nhandle();\ntranslate([0, 0, blade_t])\n    rotate([90, 0, 0])\n        saw_blade();",
    "renders": true
  },
  {
    "office_supply": "chisel",
    "openscad_code": "// Realistic office chisel furniture item - medium complexity\n// Overall length: 120mm, blade width: 12mm\n\n$fn = 50;\n\nmodule handle_grip() {\n    // Main handle grip with ergonomic contour\n    difference() {\n        // Handle body with rounded edges\n        hull() {\n            translate([0, 0, -25]) cylinder(h=50, r=8);\n            translate([0, 0, 25]) cylinder(h=50, r=6);\n        }\n        \n        // Finger grooves\n        for(i = [-15, -5, 5, 15]) {\n            translate([0, 0, i])\n                rotate([90, 0, 0])\n                    cylinder(h=20, r=2.5, center=true);\n        }\n        \n        // Hollow core for weight reduction\n        cylinder(h=60, r=3);\n    }\n}\n\nmodule handle_cap() {\n    // Metal cap at handle end\n    union() {\n        cylinder(h=8, r=7);\n        translate([0, 0, 8]) cylinder(h=3, r=6);\n    }\n}\n\nmodule ferrule() {\n    // Brass ferrule connecting handle to blade\n    difference() {\n        cylinder(h=10, r=7.5);\n        cylinder(h=12, r=6.5);\n    }\n}\n\nmodule blade() {\n    // Main blade body with realistic proportions\n    union() {\n        // Blade shank\n        translate([0, 0, 5])\n            cube([12, 8, 60], center=true);\n        \n        // Tapered blade\n        translate([0, 0, 45])\n            hull() {\n                cube([12, 8, 20], center=true);\n                translate([0, 0, 15])\n                    cube([2, 1, 10], center=true);\n            }\n        \n        // Blade spine reinforcement\n        translate([0, -4.5, 25])\n            cube([12, 1, 50], center=true);\n    }\n}\n\nmodule cutting_edge() {\n    // Sharp cutting edge (beveled)\n    translate([0, 0, 60])\n        rotate([0, -15, 0])\n            cube([0.5, 8, 10], center=true);\n}\n\nmodule manufacturer_stamps() {\n    // Brand stamps and size markings\n    translate([0, 5.1, 20])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"12mm\", size=3, center=true);\n    \n    translate([0, 5.1, 10])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"HSS\", size=2, center=true);\n}\n\n// Assemble the chisel\nunion() {\n    // Handle assembly\n    color([0.2, 0.1, 0.05]) {\n        translate([0, 0, -35]) handle_grip();\n        translate([0, 0, -43]) handle_cap();\n    }\n    \n    // Connection hardware\n    color([0.8, 0.6, 0.2]) {\n        translate([0, 0, -30]) ferrule();\n    }\n    \n    // Blade assembly\n    color([0.7, 0.7, 0.75]) {\n        blade();\n        cutting_edge();\n    }\n    \n    // Details and markings\n    manufacturer_stamps();\n}",
    "renders": true
  },
  {
    "office_supply": "pliers",
    "openscad_code": "// Realistic Pliers Furniture Item - Medium Complexity\n// Office desk pliers as a decorative/stationery holder\n\n$fn = 50;\nwall_thickness = 2;\nscale_factor = 2.5;\n\nmodule handle_segment(length, radius) {\n    // Create one segment of the handle with ergonomic grip pattern\n    difference() {\n        cylinder(h=length, r=radius);\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([radius - 1, -0.5, -1])\n                    cube([2, 1, length + 2]);\n        }\n    }\n}\n\nmodule handle_end(cap_radius, cap_length) {\n    // End cap of the handle\n    union() {\n        cylinder(h=cap_length, r=cap_radius);\n        translate([0, 0, cap_length])\n            sphere(r=cap_radius);\n    }\n}\n\nmodule jaw_teeth(width, height, depth) {\n    // Cutting teeth pattern on the jaws\n    for(i = [0:4]) {\n        translate([-width/2 + i * (width/5), 0, 0])\n            cube([width/6, height, depth]);\n    }\n}\n\nmodule plier_half(is_left) {\n    // Create one half of the pliers\n    mirror = is_left ? [-1, 1, 1] : [1, 1, 1];\n    \n    // Handle portion\n    translate([0, 0, 0]) {\n        scale(mirror) {\n            // Main handle tube\n            handle_segment(60, 8);\n            \n            // Handle grip area\n            translate([0, 0, 10])\n                handle_segment(40, 8.5);\n            \n            // End cap\n            translate([0, 0, 60])\n                handle_end(9, 5);\n        }\n    }\n    \n    // Pivot joint\n    translate([0, 0, 5]) {\n        scale(mirror) {\n            rotate([90, 0, 0])\n                cylinder(h=15, r=5);\n            rotate([90, 0, 0])\n                translate([0, 0, -2])\n                    cylinder(h=19, r=3);\n        }\n    }\n    \n    // Jaw portion\n    translate([0, 15, 5]) {\n        scale(mirror) {\n            // Main jaw body\n            cube([12, 30, 10], center=true);\n            \n            // Jaw tip\n            translate([0, 15, 0])\n                cube([8, 10, 8], center=true);\n            \n            // Cutting edge with teeth\n            translate([0, 10, 5]) {\n                jaw_teeth(10, 2, 8);\n            }\n            \n            // Wire cutter notch\n            translate([0, 20, 5])\n                cube([6, 8, 3], center=true);\n        }\n    }\n    \n    // Spring mechanism (simplified)\n    translate([-5, 5, 2.5]) {\n        scale(mirror) {\n            for(i = [0:2]) {\n                translate([0, i * 3, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=5, r=1);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Left half\n    plier_half(true);\n    \n    // Right half\n    plier_half(false);\n    \n    // Pivot bolt\n    translate([0, 7.5, 5])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=3);\n    \n    // Bolt head\n    translate([0, -5, 5])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=5);\n    \n    // Nut on other side\n    translate([0, 20, 5])\n        rotate([90, 0, 0])\n            cylinder(h=3, r=5);\n}\n\n// Base stand for furniture use\ntranslate([-30, -10, -10]) {\n    difference() {\n        // Main base\n        cube([60, 40, 5]);\n        \n        // Cable management holes\n        for(x = [10:20:50]) {\n            for(y = [10:20:30]) {\n                translate([x, y, -1])\n                    cylinder(h=7, r=3);\n            }\n        }\n    }\n    \n    // Non-slip feet\n    for(x = [5:50:55]) {\n        for(y = [5:30:35]) {\n            translate([x, y, -2])\n                cylinder(h=2, r=4);\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "screwdriver",
    "openscad_code": "// Screwdriver furniture - medium complexity realistic style\n// 3D-printable office tool with furniture-like structural details\n\n// Overall dimensions\nhandle_len = 60;\nhandle_dia = 18;\nshaft_len = 80;\nshaft_dia = 8;\ntip_len = 20;\n\n// Wall thickness for printing\nwall = 2;\n\n// Main screwdriver module\nmodule screwdriver() {\n    // Handle with ergonomic grip rings\n    translate([0,0,0])\n    union() {\n        // Core handle cylinder\n        cylinder(h=handle_len, d=handle_dia, $fn=32);\n        \n        // Grip rings - 5 evenly spaced\n        for(i=[1:5]) {\n            translate([0,0,i*10-5])\n            difference() {\n                cylinder(h=3, d=handle_dia+2, $fn=32);\n                cylinder(h=3.5, d=handle_dia-2, $fn=32);\n            }\n        }\n        \n        // End cap with hex recess\n        translate([0,0,handle_len])\n        difference() {\n            cylinder(h=5, d=handle_dia, $fn=6);\n            translate([0,0,-1])\n            cylinder(h=7, d=handle_dia-6, $fn=6);\n        }\n    }\n    \n    // Transition collar\n    translate([0,0,handle_len])\n    cylinder(h=4, d1=handle_dia, d2=shaft_dia+4, $fn=32);\n    \n    // Main shaft\n    translate([0,0,handle_len+4])\n    difference() {\n        cylinder(h=shaft_len, d=shaft_dia+4, $fn=32);\n        cylinder(h=shaft_len, d=shaft_dia, $fn=32);\n    }\n    \n    // Flathead tip\n    translate([0,0,handle_len+4+shaft_len])\n    difference() {\n        // Tapered shaft\n        cylinder(h=tip_len, d1=shaft_dia+4, d2=shaft_dia+2, $fn=32);\n        \n        // Flat blade\n        translate([0,0,-1])\n        cube([shaft_dia*2, 1.5, tip_len+2], center=true);\n        \n        // Remove shaft core\n        cylinder(h=tip_len+2, d=shaft_dia, $fn=32);\n    }\n    \n    // Magnetic tip indicator ring\n    translate([0,0,handle_len+4+shaft_len-2])\n    cylinder(h=1, d=shaft_dia+6, $fn=32);\n}\n\n// Furniture-style base/stand\nmodule stand() {\n    // Base platform\n    translate([0,-25,handle_len+4+shaft_len+tip_len])\n    cube([30, 50, 2], center=true);\n    \n    // Support ribs\n    for(x=[-10,0,10]) {\n        translate([x,-25,handle_len+4+shaft_len+tip_len-10])\n        cube([2, 50, 10], center=true);\n    }\n    \n    // Tool holder clips\n    for(y=[-20,0,20]) {\n        translate([0,y,handle_len+4+shaft_len+tip_len-5])\n        difference() {\n            union() {\n                cube([8, 4, 5], center=true);\n                translate([0,0,2.5])\n                cylinder(h=5, d=8, $fn=32);\n            }\n            cylinder(h=6, d=shaft_dia+2, $fn=32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    screwdriver();\n    stand();\n}",
    "renders": true
  },
  {
    "office_supply": "wrench",
    "openscad_code": "// Wrench-inspired desk organizer / paperweight\n// Realistic style, medium complexity, 3D-printable\n\n// Global parameters\n$fn = 32;  // Smooth curves\nwall_thickness = 2;  // 3D-print friendly\n\n// Overall dimensions\noverall_length = 120;\nhandle_length = 75;\nhandle_diameter = 12;\njaw_width = 25;\njaw_height = 20;\n\n// Furniture features\nslot_height = 3;\nslot_width = 35;\nslot_depth = 8;\npen_holes = 4;\npen_hole_diameter = 8;\n\nmodule wrench_body() {\n    // Main handle - hollow cylinder\n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        translate([0, 0, wall_thickness])\n            cylinder(h=handle_length - wall_thickness*2, d=handle_diameter - wall_thickness*2, center=false);\n    }\n\n    // Solid end cap for balance\n    translate([0, 0, handle_length - wall_thickness])\n        cylinder(h=wall_thickness*2, d=handle_diameter, center=false);\n}\n\nmodule wrench_jaw() {\n    // Fixed jaw - box with rounded edges\n    difference() {\n        // Outer shape\n        hull() {\n            translate([0, 0, 0])\n                cube([jaw_width, jaw_height, wall_thickness*2], center=true);\n            translate([0, 0, jaw_height/2])\n                cube([jaw_width - 6, 6, jaw_height], center=true);\n        }\n        \n        // Inner opening\n        translate([0, 2, jaw_height/4])\n            cube([jaw_width - wall_thickness*2, jaw_height - 4, jaw_height/2], center=true);\n    }\n\n    // Movable jaw rail\n    translate([0, -(jaw_height/2 + 1), jaw_height/4])\n        cube([jaw_width, 2, jaw_height/2], center=true);\n}\n\nmodule furniture_features() {\n    // Paper slot in handle\n    translate([0, 0, handle_length/2])\n        rotate([90, 0, 0])\n            cube([slot_width, slot_depth, slot_height], center=true);\n    \n    // Pen holes in jaw area\n    for(i=[0:pen_holes-1]) {\n        angle = i * (360/pen_holes);\n        radius = jaw_width/2 - pen_hole_diameter/2 - 2;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            jaw_height/2\n        ])\n            rotate([0, 90, 0])\n                cylinder(h=jaw_height, d=pen_hole_diameter, center=true);\n    }\n    \n    // Non-slip grip rings\n    for(z=[15:15:handle_length-20]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h=1.5, d=handle_diameter + 1, center=false);\n                cylinder(h=1.5, d=handle_diameter - 1, center=false);\n            }\n    }\n}\n\nmodule assembly() {\n    union() {\n        // Main wrench body\n        wrench_body();\n        \n        // Position jaw at end of handle\n        translate([0, 0, handle_length - wall_thickness])\n            wrench_jaw();\n        \n        // Furniture features\n        furniture_features();\n    }\n}\n\n// Render the complete model\nassembly();",
    "renders": true
  },
  {
    "office_supply": "nails",
    "openscad_code": "// OpenSCAD Nails Organizer / Display Rack\n// Realistic style, medium complexity\n// Overall size: 120 x 70 x 85 mm (fits on most printers)\n\n$fn = 32;  // Smooth curves for printing\n\n// Main body frame\nmodule frame() {\n    difference() {\n        // Outer block\n        cube([120, 70, 85]);\n        \n        // Hollow out inside for weight and material saving\n        translate([2, 2, 2])\n            cube([116, 66, 81]);\n    }\n}\n\n// Base plate with label slot\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, 0])\n            cube([120, 70, 5]);\n            \n        // Label slot front\n        translate([10, 0, 2.5])\n            cube([100, 2, 2]);\n    }\n}\n\n// Nail compartment divider wall\nmodule divider_wall() {\n    // Vertical wall thickness 2mm\n    translate([40, 0, 5])\n        cube([2, 70, 80]);\n    translate([80, 0, 5])\n        cube([2, 70, 80]);\n}\n\n// Angled nail support pegs\nmodule nail_peg(row, col) {\n    // Position calculation for even spacing\n    x_pos = 20 + col * 20;\n    y_pos = 15 + row * 20;\n    \n    // Angled cylinder for nail support\n    translate([x_pos, y_pos, 7])\n        rotate([90, 0, 0])\n            cylinder(h=12, d1=5, d2=3);  // Tapered peg\n}\n\n// Generate peg grid\nmodule peg_array() {\n    for (row = [0:2]) {\n        for (col = [0:4]) {\n            nail_peg(row, col);\n        }\n    }\n}\n\n// Side handles for easy lifting\nmodule side_handles() {\n    // Left handle\n    difference() {\n        translate([-5, 25, 40])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=5);\n        translate([-6, 25, 40])\n            rotate([0, 90, 0])\n                cylinder(h=22, r=3);\n    }\n    \n    // Right handle (mirrored)\n    mirror([1, 0, 0]) {\n        difference() {\n            translate([-5, 25, 40])\n                rotate([0, 90, 0])\n                    cylinder(h=20, r=5);\n            translate([-6, 25, 40])\n                rotate([0, 90, 0])\n                    cylinder(h=22, r=3);\n        }\n    }\n}\n\n// Small drainage holes in base\nmodule drainage_holes() {\n    for (i = [0:2]) {\n        translate([30 + i*30, 10, 0])\n            cylinder(h=5, d=3);\n        translate([30 + i*30, 60, 0])\n            cylinder(h=5, d=3);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    frame();\n    divider_wall();\n    peg_array();\n    side_handles();\n    drainage_holes();\n}",
    "renders": true
  },
  {
    "office_supply": "screws",
    "openscad_code": "// Screws Organizer - Office Furniture Item\n// A realistic desktop screws storage unit with compartments for different screw sizes\n\n$fn = 32;  // Smooth curves for 3D printing\nwall = 2;  // 2mm wall thickness for 3D printing\n\n// Overall dimensions (fits on most printers)\nbase_width = 120;\nbase_depth = 80;\nbase_height = 25;\n\n// Compartment dimensions\nsmall_comp_size = 20;\nmedium_comp_size = 25;\nlarge_comp_size = 30;\ncomp_height = 18;\n\n// Screw slot dimensions\nslot_width = 2;\nslot_depth = 3;\n\nmodule screw_slot() {\n    // Create a slot for screw identification\n    difference() {\n        cube([slot_width, slot_depth, comp_height + 2]);\n        translate([0.5, 0.5, -1])\n            cube([slot_width - 1, slot_depth - 1, comp_height + 4]);\n    }\n}\n\nmodule compartment(size) {\n    // Create a single compartment with rounded edges\n    difference() {\n        // Outer rounded box\n        translate([0, 0, comp_height/2])\n            minkowski() {\n                cube([size - wall*2, size - wall*2, comp_height - wall], center=true);\n                sphere(wall);\n            }\n        \n        // Inner cavity\n        translate([0, 0, wall])\n            cube([size - wall*4 - 2, size - wall*4 - 2, comp_height - wall*2], center=true);\n        \n        // Front chamfer for easy access\n        translate([0, size/2 - wall - 1, comp_height/2])\n            rotate([0, 45, 0])\n                cube([size, size, size]);\n    }\n    \n    // Add screw slots for identification\n    translate([-size/2 + 5, -size/2 + 2, 0])\n        screw_slot();\n    translate([size/2 - 5, -size/2 + 2, 0])\n        screw_slot();\n}\n\nmodule base_unit() {\n    // Main base structure\n    difference() {\n        // Rounded base platform\n        translate([0, 0, base_height/2])\n            minkowski() {\n                cube([base_width, base_depth, base_height - wall], center=true);\n                sphere(wall);\n            }\n        \n        // Recessed bottom for material saving\n        translate([0, 0, wall])\n            cube([base_width - wall*4, base_depth - wall*4, base_height - wall], center=true);\n        \n        // Cable management notch (back)\n        translate([0, base_depth/2 - wall, base_height/2])\n            rotate([0, 45, 0])\n                cube([30, 30, 30]);\n    }\n    \n    // Add grip ridges on sides\n    for (i = [-2:2]) {\n        translate([i * 20, -base_depth/2 + wall/2, base_height/2])\n            cube([3, wall, base_height - wall*2]);\n        translate([i * 20, base_depth/2 - wall/2, base_height/2])\n            cube([3, wall, base_height - wall*2]);\n    }\n}\n\nmodule label_area() {\n    // Flat area for labels\n    translate([0, base_depth/2 - 8, base_height + comp_height + 2])\n        cube([base_width - 20, 15, 1]);\n}\n\n// Assemble the organizer\nunion() {\n    // Base\n    base_unit();\n    \n    // Small compartments (front row)\n    for (i = [-2:2]) {\n        translate([i * (small_comp_size + 5), 0, base_height])\n            compartment(small_comp_size);\n    }\n    \n    // Medium compartments (middle row)\n    for (i = [-1:1]) {\n        translate([i * (medium_comp_size + 10), 30, base_height])\n            compartment(medium_comp_size);\n    }\n    \n    // Large compartments (back row)\n    translate([-large_comp_size/2 - 5, 60, base_height])\n        compartment(large_comp_size);\n    translate([large_comp_size/2 + 5, 60, base_height])\n        compartment(large_comp_size);\n    \n    // Label area\n    label_area();\n    \n    // Non-slip feet\n    for (x = [-base_width/2 + 15, base_width/2 - 15]) {\n        for (y = [-base_depth/2 + 15, base_depth/2 - 15]) {\n            translate([x, y, -1])\n                cylinder(h=2, r=5);\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "ropes",
    "openscad_code": "// Rope Storage Stool (realistic style, medium complexity)\n// A compact ottoman-style stool with rope-wrapped sides and hollow interior for storage\n\n// Overall dimensions (mm)\nstool_d = 120;\nstool_h = 80;\nwall_t = 2;          // 3D-printable wall thickness\nrope_d = 4;          // diameter of rope wraps\nrope_gap = 2;        // gap between rope wraps\n\n// Top cushioned seat\nmodule seat_top() {\n    // Padded cushion\n    translate([0, 0, stool_h - 8])\n        difference() {\n            // Main cushion\n            cylinder(d = stool_d, h = 8, $fn = 64);\n            // Hollow underneath for weight reduction\n            cylinder(d = stool_d - 2 * wall_t, h = 8.1, $fn = 64);\n        }\n    \n    // Upholstery seams\n    for (r = [stool_d/2 - 10, stool_d/2 - 20]) {\n        rotate([0, 0, 0])\n            cylinder(d = r * 2, h = 0.5, $fn = 64);\n    }\n}\n\n// Base frame (hidden inside rope wraps)\nmodule inner_frame() {\n    difference() {\n        // Outer cylinder shell\n        cylinder(d = stool_d - 2 * rope_d, h = stool_h, $fn = 64);\n        // Hollow storage space\n        cylinder(d = stool_d - 2 * rope_d - 2 * wall_t, h = stool_h, $fn = 64);\n    }\n    \n    // Bottom base plate\n    translate([0, 0, -0.1])\n        cylinder(d = stool_d - 2 * rope_d, h = wall_t, $fn = 64);\n}\n\n// Rope wraps around the sides\nmodule rope_wraps() {\n    num_wraps = floor(stool_h / (rope_d + rope_gap));\n    for (i = [0 : num_wraps - 1]) {\n        z_pos = i * (rope_d + rope_gap) + rope_d/2;\n        translate([0, 0, z_pos])\n            difference() {\n                // Main rope ring\n                cylinder(d = stool_d, h = rope_d, $fn = 64);\n                // Hollow center\n                cylinder(d = stool_d - 2 * rope_d, h = rope_d + 0.1, $fn = 64);\n            }\n    }\n}\n\n// Decorative rope handles on sides\nmodule rope_handles() {\n    handle_r = 5;\n    handle_offset = stool_d/2 + handle_r;\n    \n    // Left handle\n    translate([-handle_offset, 0, stool_h/2])\n        rotate([90, 0, 0])\n            difference() {\n                torus(5, handle_r, 90, 180);\n                translate([0, 0, -handle_r - 1])\n                    cube([handle_r * 2, handle_r * 2, handle_r * 2], center = true);\n            }\n    \n    // Right handle\n    translate([handle_offset, 0, stool_h/2])\n        rotate([90, 0, 0])\n            scale([-1, 1, 1])\n                difference() {\n                    torus(5, handle_r, 90, 180);\n                    translate([0, 0, -handle_r - 1])\n                        cube([handle_r * 2, handle_r * 2, handle_r * 2], center = true);\n                }\n}\n\n// Torus primitive for rope handles\nmodule torus(r_major, r_minor, start_angle, end_angle) {\n    for (i = [start_angle : 5 : end_angle]) {\n        rotate([0, 0, i])\n            translate([r_major, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(r = r_minor, h = 1.5, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    // Internal structure\n    inner_frame();\n    \n    // Rope exterior\n    rope_wraps();\n    \n    // Top padded seat\n    seat_top();\n    \n    // Side handles\n    rope_handles();\n}",
    "renders": true
  },
  {
    "office_supply": "twine",
    "openscad_code": "// Twine dispenser furniture for office use\n// Overall dimensions: 120mm x 80mm x 90mm\n\n$fn = 32;\n\nmodule base_frame() {\n    // Main base platform with rounded edges\n    difference() {\n        // Main platform\n        translate([-60, -40, 0])\n            cube([120, 80, 8], center=false);\n        \n        // Rounded edges using cylinders\n        for(x = [-55, 55])\n            for(y = [-35, 35])\n                translate([x, y, 0])\n                    cylinder(h=9, r=5);\n        \n        // Remove material for rounded corners\n        for(x = [-55, 55])\n            for(y = [-35, 35])\n                translate([x, y, 0])\n                    cube([10, 10, 9], center=true);\n    }\n}\n\nmodule support_posts() {\n    // Four corner posts for structure\n    for(x = [-45, 45])\n        for(y = [-30, 30]) {\n            translate([x, y, 8])\n                cylinder(h=70, r=3);\n        }\n}\n\nmodule twine_spindle() {\n    // Central spindle for twine roll\n    translate([0, 0, 78])\n        cylinder(h=12, r=6);\n    \n    // Bearing surface for twine roll\n    translate([0, 0, 78])\n        cylinder(h=2, r=12);\n}\n\nmodule cutter_assembly() {\n    // Cutter blade housing\n    translate([50, 0, 75])\n        cube([15, 30, 5], center=true);\n    \n    // Cutter blade slot\n    translate([50, 0, 72.5])\n        cube([3, 28, 10], center=true);\n    \n    // Blade edge detail\n    translate([50, 0, 75])\n        cube([0.5, 28, 5], center=true);\n}\n\nmodule twine_guide() {\n    // Eyelet for twine guidance\n    translate([-50, 0, 75])\n        rotate([90, 0, 0])\n            cylinder(h=20, r=8);\n    \n    // Inner hole\n    translate([-50, 0, 75])\n        rotate([90, 0, 0])\n            cylinder(h=22, r=5);\n}\n\nmodule side_reinforcements() {\n    // Side frame reinforcements\n    for(z = [25, 50]) {\n        translate([0, -30, 8 + z])\n            cube([90, 2, 5], center=true);\n        translate([0, 30, 8 + z])\n            cube([90, 2, 5], center=true);\n    }\n    \n    // Front-back reinforcements\n    for(z = [25, 50]) {\n        translate([-45, 0, 8 + z])\n            cube([2, 60, 5], center=true);\n        translate([45, 0, 8 + z])\n            cube([2, 60, 5], center=true);\n    }\n}\n\nmodule top_frame() {\n    // Top frame connecting posts\n    for(x = [-45, 45])\n        cube([90, 2, 2], center=true);\n    \n    for(y = [-30, 30])\n        cube([2, 60, 2], center=true);\n    \n    // Actual frame pieces\n    translate([0, 0, 78])\n        cube([90, 2, 2], center=true);\n    translate([0, 0, 78])\n        cube([2, 60, 2], center=true);\n}\n\n// Assembly\nunion() {\n    base_frame();\n    support_posts();\n    twine_spindle();\n    cutter_assembly();\n    twine_guide();\n    side_reinforcements();\n    top_frame();\n}",
    "renders": true
  },
  {
    "office_supply": "string",
    "openscad_code": "// Office string dispenser with weighted base\n// Overall height: 120mm, base diameter: 80mm\n\n$fn = 50;\nwall = 2;\n\nmodule base() {\n    // Weighted circular base\n    difference() {\n        cylinder(h = 15, d = 80, center = true);\n        translate([0, 0, 7])\n            cylinder(h = 11, d = 76, center = true);\n    }\n    \n    // Rubber grip ring\n    translate([0, 0, -8])\n        cylinder(h = 3, d = 82, center = true);\n}\n\nmodule spindle() {\n    // Central spindle shaft\n    cylinder(h = 70, d = 12);\n    \n    // Top cap\n    translate([0, 0, 35])\n        cylinder(h = 8, d = 20);\n    \n    // String threading slot\n    difference() {\n        translate([0, 0, 5])\n            cylinder(h = 50, d = 12);\n        translate([-8, -8, 0])\n            cube([16, 16, 60]);\n    }\n}\n\nmodule cutter_assembly() {\n    // Cutter mount\n    translate([0, 0, -55])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 20, d = 15);\n        translate([0, 0, -1])\n            cylinder(h = 22, d = 11);\n    }\n    \n    // Serrated blade\n    translate([0, 0, -55])\n    rotate([90, 0, 0])\n    for(i = [0:9]) {\n        rotate([0, 0, i * 36])\n        translate([7.5, 0, 10])\n            cube([1.5, 3, wall], center = true);\n    }\n}\n\nmodule arm_support() {\n    // Curved support arm\n    translate([0, 0, -25])\n    rotate([0, 0, -30])\n    difference() {\n        hull() {\n            translate([0, 0, 0])\n                sphere(d = 8);\n            translate([0, 30, 0])\n                sphere(d = 8);\n        }\n        translate([0, 15, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 35, d = 4, center = true);\n    }\n}\n\nmodule string_guide() {\n    // Threading eyelet\n    translate([0, 30, -25])\n    rotate([0, 0, -30])\n    difference() {\n        sphere(d = 10);\n        rotate([0, 90, 0])\n            cylinder(h = 12, d = 4, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    translate([0, 0, 7.5])\n        base();\n    \n    translate([0, 0, 15])\n        spindle();\n    \n    cutter_assembly();\n    arm_support();\n    string_guide();\n}",
    "renders": true
  },
  {
    "office_supply": "yarn",
    "openscad_code": "// Yarn Office Chair - Realistic Style\n// Medium complexity 3D printable model\n// Size: 120mm height, 100mm width, 110mm depth\n\n// Wall thickness parameter\nwall = 2;\n\n// Main chair module\nmodule office_chair() {\n    // Chair base with 5-star caster support\n    union() {\n        // Central pole\n        cylinder(h=45, r1=6, r2=4, $fn=32);\n        \n        // Caster arms\n        for (i = [0:72:359]) {\n            rotate([0, 0, i])\n                translate([0, 30, 5])\n                    cube([4, 25, 3], center=true);\n        }\n        \n        // Casters (wheels)\n        for (i = [0:72:359]) {\n            rotate([0, 0, i])\n                translate([0, 42, 0])\n                    sphere(r=4, $fn=16);\n        }\n    }\n    \n    // Seat cushion\n    translate([0, 0, 45])\n        difference() {\n            // Main cushion\n            cube([80, 75, 12], center=true);\n            \n            // Cushion indent\n            translate([0, 0, -1])\n                cube([76, 71, 5], center=true);\n        }\n    \n    // Backrest support post\n    translate([0, -25, 57])\n        cylinder(h=50, r=4, $fn=32);\n    \n    // Backrest\n    translate([0, -30, 85])\n        difference() {\n            // Main backrest\n            cube([75, 8, 55], center=true);\n            \n            // Backrest curve\n            translate([0, 0, 15])\n                cube([71, 12, 25], center=true);\n            \n            // Lumbar support cutout\n            translate([0, 2, -10])\n                cube([50, 12, 20], center=true);\n        }\n    \n    // Armrest supports\n    // Left armrest\n    translate([-35, 0, 57])\n        union() {\n            // Vertical support\n            cylinder(h=20, r=3, $fn=16);\n            \n            // Horizontal armrest\n            translate([0, 15, 20])\n                cube([35, 5, 4], center=true);\n        }\n    \n    // Right armrest\n    mirror([1, 0, 0])\n        translate([-35, 0, 57])\n            union() {\n                // Vertical support\n                cylinder(h=20, r=3, $fn=16);\n                \n                // Horizontal armrest\n                translate([0, 15, 20])\n                    cube([35, 5, 4], center=true);\n            }\n    \n    // Seat adjustment lever\n    translate([40, 0, 50])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=2, $fn=16);\n    \n    // Backrest adjustment knob\n    translate([0, -35, 75])\n        rotate([0, 90, 0])\n            cylinder(h=8, r=3, $fn=16);\n}\n\n// Render the chair\noffice_chair();",
    "renders": true
  },
  {
    "office_supply": "thread",
    "openscad_code": "// Thread Spool Office Furniture - Realistic Style\n// A 3D printable spool holder that looks like a giant thread spool (desk organizer)\n\n// Parameters\n$fn = 32;\nspool_diameter = 80;\nspool_height = 60;\ncore_diameter = 30;\nwall_thickness = 2;\nedge_radius = 4;\n\n// Main spool body module\nmodule spool_body() {\n    // Bottom flange with rounded edges\n    difference() {\n        // Main flange cylinder\n        cylinder(h=wall_thickness*2, d=spool_diameter, center=false);\n        \n        // Rounded bottom edge\n        translate([0, 0, -0.1])\n            cylinder(h=edge_radius*2, d=spool_diameter-edge_radius*2, center=false);\n    }\n    \n    // Top flange (mirrored bottom)\n    translate([0, 0, spool_height-wall_thickness*2])\n        mirror([0, 0, 1])\n        difference() {\n            cylinder(h=wall_thickness*2, d=spool_diameter, center=false);\n            translate([0, 0, -0.1])\n                cylinder(h=edge_radius*2, d=spool_diameter-edge_radius*2, center=false);\n        }\n    \n    // Central core\n    translate([0, 0, wall_thickness*2])\n        cylinder(h=spool_height-wall_thickness*4, d=core_diameter, center=false);\n}\n\n// Thread grooves for realistic appearance\nmodule thread_grooves() {\n    groove_width = 1.5;\n    groove_depth = 0.5;\n    num_grooves = 20;\n    \n    for(i=[0:num_grooves-1]) {\n        rotate([0, 0, i*360/num_grooves])\n            translate([spool_diameter/2 - wall_thickness - groove_depth, 0, wall_thickness*2])\n                cube([groove_depth, groove_width, spool_height-wall_thickness*4], center=true);\n    }\n}\n\n// Structural ribs inside for 3D printing support\nmodule internal_ribs() {\n    rib_thickness = 2;\n    rib_height = spool_height-wall_thickness*4;\n    \n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([core_diameter/2 + rib_thickness, -rib_thickness/2, wall_thickness*2])\n                cube([spool_diameter/2 - core_diameter/2 - rib_thickness, rib_thickness, rib_height]);\n    }\n}\n\n// Central hole for pens/pencils\nmodule central_hole() {\n    hole_diameter = 12;\n    \n    translate([0, 0, -1])\n        cylinder(h=spool_height+2, d=hole_diameter, center=false);\n}\n\n// Bottom feet for stability\nmodule feet() {\n    foot_diameter = 8;\n    foot_height = 3;\n    \n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n            translate([spool_diameter/2*0.7, 0, -foot_height])\n                cylinder(h=foot_height, d=foot_diameter, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    difference() {\n        union() {\n            spool_body();\n            internal_ribs();\n        }\n        central_hole();\n    }\n    \n    // Thread texture on outer surface\n    thread_grooves();\n    \n    // Bottom feet\n    feet();\n}\n\n// Optional label area (flat surface)\ntranslate([0, -spool_diameter/2 + wall_thickness + 2, spool_height/2])\n    cube([30, wall_thickness, 20], center=true);",
    "renders": true
  },
  {
    "office_supply": "fabric",
    "openscad_code": "// Office Fabric Task Chair - Realistic Style\n// Medium complexity 3D printable model with fabric texture and ergonomic features\n\n// Chair dimensions in mm\nseat_width = 80;\nseat_depth = 75;\nbackrest_height = 90;\nbase_height = 50;\narmrest_width = 15;\nwheel_diameter = 12;\n\n// Fabric texture pattern\nmodule fabric_texture(width, height, depth) {\n    for (i = [0:5]) {\n        for (j = [0:5]) {\n            translate([i * (width/6), j * (height/6), depth/2 - 0.5])\n                cube([width/6 - 0.5, height/6 - 0.5, 1], center = true);\n        }\n    }\n}\n\n// Seat cushion with fabric\nmodule seat_cushion() {\n    difference() {\n        // Main cushion\n        translate([0, 0, base_height + 10])\n            cube([seat_width, seat_depth, 15], center = true);\n        \n        // Contoured top surface\n        translate([0, 0, base_height + 17.5])\n            cube([seat_width - 10, seat_depth - 10, 10], center = true);\n    }\n    \n    // Fabric texture on top\n    translate([0, 0, base_height + 17])\n        fabric_texture(seat_width - 5, seat_depth - 5, 2);\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2 + 5, base_height + 10 + backrest_height/2])\n            cube([seat_width - 10, 10, backrest_height], center = true);\n        \n        // Lumbar curve\n        translate([0, -seat_depth/2 + 5, base_height + 10 + 30])\n            cube([seat_width - 20, 12, 40], center = true);\n    }\n    \n    // Fabric texture\n    translate([0, -seat_depth/2 + 4, base_height + 10 + backrest_height/2])\n        fabric_texture(seat_width - 15, 8, backrest_height);\n    \n    // Headrest\n    translate([0, -seat_depth/2 + 5, base_height + 10 + backrest_height + 15])\n        cube([seat_width - 20, 8, 20], center = true);\n}\n\n// Armrests\nmodule armrest(side) {\n    translate([side * (seat_width/2 - armrest_width/2), 0, base_height + 25])\n        cube([armrest_width, seat_depth - 10, 20], center = true);\n    \n    // Armrest pad\n    translate([side * (seat_width/2 - armrest_width/2), 0, base_height + 35])\n        cube([armrest_width + 5, seat_depth - 15, 5], center = true);\n}\n\n// 5-star base with wheels\nmodule wheel_base() {\n    // Central column\n    cylinder(h = base_height, r = 8, center = false);\n    \n    // Star legs\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([30, 0, 0])\n                cube([60, 10, 5], center = true);\n            \n            // Wheels\n            translate([60, 0, -wheel_diameter/2])\n                rotate([90, 0, 0])\n                    cylinder(h = wheel_diameter, r = wheel_diameter/2, center = false);\n        }\n    }\n    \n    // Gas lift cylinder\n    cylinder(h = base_height + 5, r = 6, center = false);\n}\n\n// Main assembly\nunion() {\n    // Seat and backrest\n    seat_cushion();\n    backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Base and wheels\n    wheel_base();\n}",
    "renders": true
  },
  {
    "office_supply": "canvas",
    "openscad_code": "// Canvas Office Chair\n// Realistic style, medium complexity\n\nchair_width = 80;\nchair_depth = 80;\nseat_height = 45;\nback_height = 85;\narmrest_height = 65;\n\n// Wall thickness\nwall = 2;\n\nmodule chair_frame() {\n    // Base frame - 5 star base\n    translate([0, 0, 0]) {\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) {\n                translate([25, 0, 0]) {\n                    cube([50, 6, wall], center = true);\n                }\n            }\n        }\n    }\n    \n    // Central post\n    cylinder(h = seat_height, r = 6, $fn = 16);\n    \n    // Seat support\n    translate([0, 0, seat_height]) {\n        cube([chair_width, chair_depth, wall], center = true);\n    }\n}\n\nmodule seat() {\n    // Seat cushion\n    translate([0, 0, seat_height + wall]) {\n        // Base seat\n        cube([chair_width, chair_depth, 8], center = true);\n        \n        // Rounded edges\n        translate([chair_width/2 - 4, 0, 4]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = chair_depth - 8, r = 4, center = true, $fn = 16);\n            }\n        }\n        translate([-chair_width/2 + 4, 0, 4]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = chair_depth - 8, r = 4, center = true, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    // Back support post\n    translate([0, -chair_depth/2 + 5, seat_height + wall + 4]) {\n        cylinder(h = back_height - seat_height, r = 4, $fn = 16);\n    }\n    \n    // Backrest frame\n    translate([0, -chair_depth/2 + 8, seat_height + wall + 4 + (back_height - seat_height)/2]) {\n        difference() {\n            cube([chair_width - 10, 6, back_height - seat_height - 8], center = true);\n            translate([0, 0, 0]) {\n                cube([chair_width - 14, 10, back_height - seat_height - 12], center = true);\n            }\n        }\n    }\n    \n    // Canvas back\n    translate([0, -chair_depth/2 + 8, seat_height + wall + 4 + (back_height - seat_height)/2]) {\n        cube([chair_width - 14, 1, back_height - seat_height - 12], center = true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-chair_width/2 + 5, 0, armrest_height]) {\n        // Post\n        cylinder(h = armrest_height - seat_height - 8, r = 3, $fn = 16);\n        \n        // Rest\n        translate([0, 0, (armrest_height - seat_height - 8)/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 30, r1 = 3, r2 = 3, $fn = 16);\n            }\n        }\n    }\n    \n    // Right armrest\n    translate([chair_width/2 - 5, 0, armrest_height]) {\n        // Post\n        cylinder(h = armrest_height - seat_height - 8, r = 3, $fn = 16);\n        \n        // Rest\n        translate([0, 0, (armrest_height - seat_height - 8)/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 30, r1 = 3, r2 = 3, $fn = 16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat();\n    backrest();\n    armrests();\n}",
    "renders": true
  },
  {
    "office_supply": "leather",
    "openscad_code": "// Leather Office Chair - Medium Complexity\n// Realistic style with 2mm printable walls\n\nchair_width = 60;\nchair_depth = 55;\nchair_height = 75;\nseat_height = 35;\n\n// Main seat cushion with rounded edges\nmodule seat_cushion() {\n    difference() {\n        // Main seat block\n        translate([0, 0, seat_height]) {\n            cube([chair_width, chair_depth, 8], center = true);\n        }\n        \n        // Rounded edges via subtraction\n        for (i = [-1, 1]) {\n            translate([i * (chair_width/2 - 4), 0, seat_height + 4]) {\n                sphere(4);\n            }\n        }\n        for (i = [-1, 1]) {\n            translate([0, i * (chair_depth/2 - 4), seat_height + 4]) {\n                sphere(4);\n            }\n        }\n    }\n}\n\n// Backrest cushion with ergonomic curve\nmodule backrest() {\n    translate([0, chair_depth/2 - 5, seat_height + 25]) {\n        rotate([15, 0, 0]) {\n            difference() {\n                // Main backrest\n                cube([chair_width - 10, 6, 30], center = true);\n                \n                // Lumbar support curve\n                translate([0, 0, -5]) {\n                    cube([chair_width - 10, 8, 10], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Leather texture pattern\nmodule leather_texture() {\n    for (x = [-25:10:25]) {\n        for (y = [-20:10:20]) {\n            translate([x, y, 0.5]) {\n                cylinder(h = 0.5, r = 1, $fn = 8);\n            }\n        }\n    }\n}\n\n// Armrest support\nmodule armrest(side) {\n    translate([side * (chair_width/2 - 5), 0, seat_height + 10]) {\n        union() {\n            // Vertical post\n            cylinder(h = 15, r = 3, $fn = 16);\n            \n            // Horizontal armrest\n            translate([0, chair_depth/4, 7]) {\n                rotate([0, 20 * side, 0]) {\n                    cube([4, 15, 4], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Base with 5-star legs\nmodule base() {\n    // Central pole\n    cylinder(h = seat_height - 5, r = 4, $fn = 16);\n    \n    // Star legs\n    for (i = [0:72:360]) {\n        rotate([0, 0, i]) {\n            translate([0, 15, 0]) {\n                cube([30, 4, 4], center = true);\n            }\n        }\n    }\n    \n    // Wheels\n    for (i = [0:72:360]) {\n        rotate([0, 0, i]) {\n            translate([0, 30, -2]) {\n                sphere(3, $fn = 16);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat components\n    seat_cushion();\n    \n    // Apply leather texture to seat\n    translate([0, 0, seat_height + 8.5]) {\n        leather_texture();\n    }\n    \n    // Backrest\n    backrest();\n    translate([0, chair_depth/2, seat_height + 40]) {\n        leather_texture();\n    }\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Base\n    translate([0, 0, 0]) {\n        base();\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for (i = [-20:20:20]) {\n        translate([i, 0, seat_height - 4]) {\n            cube([4, chair_depth - 10, 2], center = true);\n        }\n    }\n}\n\ntranslate([0, 0, 0]) {\n    ribs();\n}",
    "renders": true
  },
  {
    "office_supply": "wood",
    "openscad_code": "// Wooden desk organizer with sliding drawer\n// Medium complexity realistic wood furniture for 3D printing\n// Overall dimensions: 100mm x 80mm x 65mm\n\n$fn = 32;\n\n// Main body\nmodule organizer_body() {\n    difference() {\n        // Outer shell\n        cube([100, 80, 65]);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([96, 76, 63]);\n        \n        // Pen/pencil slots\n        for (i = [0:4]) {\n            translate([5 + i*18, 5, 30])\n                cylinder(h = 35, d = 12);\n        }\n        \n        // Note pad slot\n        translate([5, 55, 2])\n            cube([90, 20, 30]);\n    }\n}\n\n// Drawer\nmodule drawer() {\n    difference() {\n        // Drawer box\n        translate([10, 10, 2])\n            cube([80, 35, 25]);\n        \n        // Hollow interior\n        translate([12, 12, 4])\n            cube([76, 31, 21]);\n        \n        // Finger groove\n        translate([40, 45, 10])\n            cylinder(h = 2, d = 15);\n    }\n}\n\n// Drawer front\nmodule drawer_front() {\n    difference() {\n        // Front panel\n        translate([5, 5, 2])\n            cube([90, 10, 25]);\n        \n        // Handle\n        translate([45, 5, 12])\n            cylinder(h = 15, d = 8);\n    }\n}\n\n// Side supports\nmodule side_supports() {\n    // Left support\n    translate([2, 2, 0])\n        cube([4, 76, 2]);\n    \n    // Right support\n    translate([94, 2, 0])\n        cube([4, 76, 2]);\n    \n    // Back support\n    translate([2, 2, 0])\n        cube([96, 4, 2]);\n}\n\n// Wood grain texture on top surface\nmodule wood_grain() {\n    for (i = [0:5:95]) {\n        translate([i + 2.5, 2, 65])\n            cube([0.5, 76, 0.2]);\n    }\n}\n\n// Assembly\nunion() {\n    organizer_body();\n    drawer();\n    translate([0, 40, 0])\n        drawer_front();\n    side_supports();\n    wood_grain();\n}",
    "renders": true
  },
  {
    "office_supply": "metal",
    "openscad_code": "// Metal Office Desk Lamp - Medium Complexity\n// Realistic style with proper proportions and structural details\n\n$fn = 30;\nwall_thickness = 2;\n\n// Main lamp assembly\nmodule desk_lamp() {\n    // Base - heavy metal disc for stability\n    translate([0, 0, 0]) {\n        cylinder(h=8, d1=80, d2=75);\n    }\n    \n    // Base detail ring\n    translate([0, 0, 8]) {\n        cylinder(h=2, d=78);\n    }\n    \n    // Vertical post - main support\n    translate([0, 0, 10]) {\n        post_assembly();\n    }\n    \n    // Arm assembly - adjustable lamp head support\n    translate([0, 0, 85]) {\n        arm_assembly();\n    }\n    \n    // Lamp head - contains LED/light source\n    translate([0, 180, 85]) {\n        lamp_head();\n    }\n}\n\n// Vertical post with adjustment mechanism\nmodule post_assembly() {\n    // Main post tube\n    difference() {\n        cylinder(h=75, d=25);\n        translate([0, 0, -1]) {\n            cylinder(h=77, d=21);\n        }\n    }\n    \n    // Adjustment knob\n    translate([20, 0, 40]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=15, d=12);\n        }\n    }\n    \n    // Post joint - connection point for arm\n    translate([0, 0, 75]) {\n        sphere(d=28);\n    }\n}\n\n// Adjustable arm with joints\nmodule arm_assembly() {\n    // First arm segment\n    rotate([0, 0, 90]) {\n        difference() {\n            cube([100, 12, 12], center=true);\n            translate([0, 0, -7]) {\n                cube([96, 8, 8], center=true);\n            }\n        }\n    }\n    \n    // Mid joint\n    translate([0, 100, 0]) {\n        sphere(d=20);\n    }\n    \n    // Second arm segment\n    translate([0, 100, 0]) {\n        rotate([0, 0, 0]) {\n            difference() {\n                cube([80, 12, 12], center=true);\n                translate([0, 0, -7]) {\n                    cube([76, 8, 8], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Lamp head with realistic details\nmodule lamp_head() {\n    // Main housing - cylindrical\n    rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h=45, d1=50, d2=45);\n            translate([0, 0, 5]) {\n                cylinder(h=40, d1=46, d2=41);\n            }\n        }\n    }\n    \n    // Heat sink fins - for LED cooling\n    for(i = [0:30:330]) {\n        rotate([0, 0, i]) {\n            translate([0, 22, 20]) {\n                cube([2, 6, 15], center=true);\n            }\n        }\n    }\n    \n    // LED panel face\n    translate([0, 0, 40]) {\n        cylinder(h=2, d=35);\n    }\n    \n    // Power cable entry\n    translate([0, -22, 15]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=20, d=8);\n        }\n    }\n    \n    // Adjustment handle\n    translate([0, 0, -25]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=25, d=8);\n        }\n    }\n}\n\n// Generate the complete lamp\ndesk_lamp();",
    "renders": true
  },
  {
    "office_supply": "iron",
    "openscad_code": "// Ironing Board with foldable legs and iron rest\n// Medium complexity realistic style iron furniture\n\n$fn = 32;\n\n// Main ironing board dimensions\nboard_length = 120;\nboard_width = 35;\nboard_thickness = 2;\nleg_height = 65;\nleg_width = 2;\n\nmodule ironing_board() {\n    // Main board with rounded edges\n    difference() {\n        // Main board body\n        translate([0, 0, board_thickness/2])\n            minkowski() {\n                cube([board_length, board_width, board_thickness], center=true);\n                cylinder(h=0.1, r=2);\n            }\n        \n        // Tapered front end\n        translate([board_length/2 - 15, 0, -1])\n            cube([30, board_width + 4, board_thickness + 2], center=true);\n        \n        // Tapered back end\n        translate([-board_length/2 + 10, 0, -1])\n            cube([20, board_width + 4, board_thickness + 2], center=true);\n    }\n}\n\nmodule leg_support(x_pos, angle) {\n    // Vertical leg\n    translate([x_pos, 0, leg_height/2])\n        rotate([0, angle, 0])\n        cube([leg_width, leg_width, leg_height], center=true);\n    \n    // Cross brace\n    translate([x_pos/2, 0, leg_height/3])\n        rotate([0, angle, 0])\n        cube([abs(x_pos) + leg_width, leg_width, leg_width], center=true);\n}\n\nmodule legs_assembly() {\n    // Front legs (angled outward for stability)\n    for(side = [-1, 1]) {\n        leg_support(side * (board_length/2 - 15), 10 * side);\n    }\n    \n    // Back legs (angled inward for storage)\n    for(side = [-1, 1]) {\n        leg_support(side * (board_length/2 - 10), -5 * side);\n    }\n    \n    // Center support beam\n    translate([0, 0, leg_height/2])\n        cube([board_length - 20, leg_width, leg_width], center=true);\n}\n\nmodule iron_rest() {\n    // Iron rest platform at back\n    translate([-board_length/2 + 15, 0, board_thickness + 5])\n        cube([30, board_width - 10, 2], center=true);\n    \n    // Heat-resistant ridges\n    for(i = [-1, 0, 1]) {\n        translate([-board_length/2 + 15 + i*8, 0, board_thickness + 6])\n            cube([2, board_width - 12, 1], center=true);\n    }\n    \n    // Back stop\n    translate([-board_length/2 + 2, 0, board_thickness + 3])\n        cube([4, board_width - 6, 6], center=true);\n}\n\nmodule height_adjustment() {\n    // Adjustment mechanism on legs\n    for(side = [-1, 1]) {\n        translate([side * (board_length/2 - 15), 0, leg_height - 10])\n            rotate([0, 10 * side, 0])\n            difference() {\n                cylinder(h=8, r=3);\n                cylinder(h=10, r=1.5);\n            }\n    }\n}\n\nmodule non_slip_feet() {\n    // Rubber feet on legs\n    for(side = [-1, 1]) {\n        translate([side * (board_length/2 - 15), 0, 1])\n            sphere(r=3);\n        \n        translate([side * (board_length/2 - 10), 0, 1])\n            sphere(r=3);\n    }\n}\n\n// Assembly\nunion() {\n    ironing_board();\n    legs_assembly();\n    iron_rest();\n    height_adjustment();\n    non_slip_feet();\n}",
    "renders": true
  },
  {
    "office_supply": "steel",
    "openscad_code": "// Steel Office Desk Lamp - Realistic Style\n\n// Overall dimensions: 120mm tall, 80mm reach, 60mm base diameter\n// Wall thickness: 2mm for all steel parts\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Base module - weighted circular steel base\nmodule base() {\n    difference() {\n        // Main base disc\n        cylinder(h = 8, d = 60, center = true);\n        // Hollow center for weight reduction\n        translate([0, 0, 2])\n            cylinder(h = 12, d = 54);\n        // Cable hole at back\n        translate([-25, 0, -5])\n            rotate([90, 0, 0])\n            cylinder(h = 10, d = 6);\n    }\n}\n\n// Vertical post - hollow steel tube\nmodule vertical_post() {\n    difference() {\n        // Outer tube\n        cylinder(h = 80, d = 12);\n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h = 82, d = 8);\n    }\n}\n\n// Adjustable joint mechanism\nmodule joint() {\n    difference() {\n        // Main joint housing\n        sphere(d = 16);\n        // Inner cavity for wiring\n        sphere(d = 12);\n        // Pivot hole\n        rotate([0, 90, 0])\n        cylinder(h = 20, d = 4);\n    }\n}\n\n// Adjustable arm - hollow steel tube\nmodule arm() {\n    difference() {\n        // Main arm tube\n        rotate([0, -30, 0])\n        translate([0, 0, -40])\n            cylinder(h = 80, d = 10);\n        // Inner hollow\n        rotate([0, -30, 0])\n        translate([0, 0, -41])\n            cylinder(h = 82, d = 6);\n    }\n}\n\n// Lamp shade - steel cone with diffuser\nmodule shade() {\n    difference() {\n        // Main shade cone\n        cylinder(h1 = 30, h2 = 25, r1 = 30, r2 = 20);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h1 = 26, h2 = 21, r1 = 28, r2 = 18);\n        // Light opening\n        translate([0, 0, -1])\n            cylinder(h = 5, d = 20);\n    }\n}\n\n// Assembly pivot pin\nmodule pivot_pin() {\n    cylinder(h = 20, d = 4);\n}\n\n// Main assembly\nunion() {\n    // Base at origin\n    base();\n    \n    // Vertical post\n    translate([0, 0, 4])\n        vertical_post();\n    \n    // First joint at top of post\n    translate([0, 0, 84])\n        joint();\n    \n    // Pivot pin through joint\n    translate([0, 0, 84])\n    rotate([0, 90, 0])\n        pivot_pin();\n    \n    // Arm attached to joint\n    translate([0, 0, 84])\n        arm();\n    \n    // Second joint at end of arm\n    translate([69.3, 0, 104])\n        joint();\n    \n    // Second pivot pin\n    translate([69.3, 0, 104])\n    rotate([0, 90, 0])\n        pivot_pin();\n    \n    // Lamp shade attached to arm\n    translate([69.3, 0, 104])\n    rotate([0, -30, 0])\n        translate([0, 0, 25])\n            shade();\n    \n    // Reinforcement gusset at base\n    translate([0, 0, 0])\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([22, 0, 4])\n        cube([2, 2, 6], center = true);\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "brass",
    "openscad_code": "// Brass Desk Lamp - Medium Complexity\n// Realistic style with proper proportions and functional details\n\n$fn = 50;\n\n// Main dimensions\nbase_d = 80;\nbase_h = 8;\nstem_h = 120;\narm_l = 100;\nshade_d = 70;\nshade_h = 45;\nwall_thickness = 2;\n\nmodule base() {\n    // Weighted circular base with stepped detail\n    difference() {\n        cylinder(h=base_h, d=base_d, center=true);\n        translate([0, 0, -1])\n            cylinder(h=base_h+2, d=base_d-10, center=true);\n    }\n    \n    // Anti-slip ring detail\n    translate([0, 0, -base_h/2 + 0.5])\n        cylinder(h=1, d=base_d-4, center=true);\n}\n\nmodule stem() {\n    // Main support stem with joint detail\n    translate([0, 0, base_h/2 + stem_h/2])\n        cylinder(h=stem_h, d=10, center=true);\n    \n    // Joint housing at top of stem\n    translate([0, 0, base_h/2 + stem_h])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=12, center=true);\n}\n\nmodule adjustable_arm() {\n    // Main arm with cable channel\n    translate([0, 0, base_h/2 + stem_h])\n        rotate([90, 0, 0])\n            translate([arm_l/2, 0, 0])\n                cube([arm_l, 8, 8], center=true);\n    \n    // Counterweight detail\n    translate([0, 0, base_h/2 + stem_h])\n        rotate([90, 0, 0])\n            translate([-arm_l/4, 0, 0])\n                cylinder(h=12, d=12, center=true);\n}\n\nmodule lamp_shade() {\n    // Conical shade with stepped interior\n    translate([arm_l, 0, base_h/2 + stem_h])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h1=shade_h, h2=shade_h-10, d1=shade_d, d2=shade_d-20, center=true);\n            translate([0, 0, 5])\n                cylinder(h1=shade_h-10, h2=shade_h-20, d1=shade_d-4, d2=shade_d-24, center=true);\n        }\n    \n    // Shade mounting bracket\n    translate([arm_l-10, 0, base_h/2 + stem_h])\n        rotate([90, 0, 0])\n            cube([20, 6, 4], center=true);\n}\n\nmodule switch_detail() {\n    // Inline switch on stem\n    translate([0, 0, base_h/2 + stem_h/2])\n        rotate([0, 90, 0])\n            cube([8, 12, 4], center=true);\n    \n    // Switch lever\n    translate([0, 6, base_h/2 + stem_h/2])\n        rotate([0, 90, 0])\n            cylinder(h=8, d=3, center=true);\n}\n\nmodule cable_exit() {\n    // Cable exit point at base\n    translate([base_d/2 - 5, 0, -base_h/2])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=6, center=true);\n}\n\n// Assembly\nunion() {\n    base();\n    stem();\n    adjustable_arm();\n    lamp_shade();\n    switch_detail();\n    cable_exit();\n}",
    "renders": true
  },
  {
    "office_supply": "copper",
    "openscad_code": "// Copper Desk Lamp - Realistic Style\n// Medium complexity OpenSCAD model for 3D printing\n\n// Overall dimensions: 120mm height, 80mm base diameter\n$fn = 32;\n\n// Color for preview (will print in copper filament)\ncolor(\"copper\") {\n\n// Base module - weighted circular base\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=8, d=80, center=false);\n        \n        // Cable hole in back\n        translate([30, -35, 0])\n            rotate([0, 90, 0])\n                cylinder(h=60, d=6, center=true);\n    }\n}\n\n// Vertical stem with adjustable joint\nmodule stem() {\n    // Lower stem\n    translate([0, 0, 8])\n        cylinder(h=60, d=12, center=false);\n    \n    // Adjustment joint detail\n    translate([0, 0, 68])\n        difference() {\n            cylinder(h=10, d=16, center=false);\n            // Grooves for grip\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([7, -1, 0])\n                        cube([2, 2, 10], center=false);\n            }\n        }\n    \n    // Upper stem\n    translate([0, 0, 78])\n        cylinder(h=40, d=8, center=false);\n}\n\n// Articulated lamp shade support arm\nmodule arm() {\n    // Main horizontal arm\n    translate([0, 0, 118])\n        rotate([90, 0, 0])\n            cylinder(h=50, d=6, center=false);\n    \n    // Pivot joint\n    translate([0, 0, 118])\n        sphere(d=10);\n    \n    // Counter-balance weight\n    translate([0, -45, 118])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=12, center=false);\n}\n\n// Conical lamp shade with heat vents\nmodule shade() {\n    translate([0, 50, 118])\n        rotate([90, 0, 0])\n            difference() {\n                // Main shade cone\n                cylinder(h1=40, h2=0, r1=25, r2=15, center=false);\n                \n                // Inner cavity for bulb\n                cylinder(h1=35, h2=0, r1=23, r2=13, center=false);\n                \n                // Ventilation holes\n                for(i = [0:7]) {\n                    rotate([0, 0, i * 45])\n                        translate([20, 0, 30])\n                            rotate([90, 0, 0])\n                                cylinder(h=10, d=3, center=false);\n                }\n            }\n}\n\n// Switch detail on base\nmodule switch() {\n    translate([25, 0, 8])\n        difference() {\n            // Switch housing\n            cube([10, 6, 4], center=true);\n            // Switch toggle\n            translate([0, 0, 2])\n                cube([4, 2, 2], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    stem();\n    arm();\n    shade();\n    switch();\n    \n    // Cable strain relief detail\n    translate([30, -40, 4])\n        rotate([0, 90, 0])\n            cylinder(h=20, d=8, center=true);\n}",
    "renders": true
  },
  {
    "office_supply": "tin",
    "openscad_code": "// Tin Office Supply Organizer\n// A realistic tin container with compartments for office supplies\n// Overall dimensions: 120mm x 80mm x 60mm\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Main tin body\nmodule tin_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Base\n            translate([0, 0, wall_thickness]) {\n                cube([120, 80, 58], center = true);\n            }\n            // Rolled rim top edge\n            translate([0, 0, 30]) {\n                cylinder(h = 3, r1 = 61, r2 = 62, center = true);\n            }\n        }\n        \n        // Inner cavity\n        translate([0, 0, 0]) {\n            cube([116, 76, 56], center = true);\n        }\n    }\n}\n\n// Handle attachment points\nmodule handle_mounts() {\n    for (x = [-50, 50]) {\n        translate([x, 0, 25]) {\n            difference() {\n                // Mount base\n                cylinder(h = 8, r = 6, center = true);\n                // Screw hole\n                cylinder(h = 10, r = 2, center = true);\n            }\n        }\n    }\n}\n\n// Wire handle\nmodule wire_handle() {\n    translate([0, 0, 25]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                // Main handle arc\n                rotate_extrude(angle = 180, $fn = 32) {\n                    translate([55, 0, 0]) {\n                        circle(r = 3, $fn = 16);\n                    }\n                }\n                // Cut bottom half for wire appearance\n                translate([0, 0, -10]) {\n                    cube([200, 200, 10], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Internal dividers for compartments\nmodule dividers() {\n    // Long divider\n    translate([0, -20, 29]) {\n        cube([114, wall_thickness, 54], center = true);\n    }\n    \n    // Short divider\n    translate([20, 10, 29]) {\n        cube([wall_thickness, 34, 54], center = true);\n    }\n}\n\n// Reinforcement ribs on bottom\nmodule bottom_ribs() {\n    for (x = [-40, -20, 0, 20, 40]) {\n        translate([x, 0, 1]) {\n            cube([8, 76, wall_thickness], center = true);\n        }\n    }\n}\n\n// Corner radius fillets (simulated with cylinders)\nmodule corner_reinforcements() {\n    for (x = [-58, 58]) {\n        for (y = [-38, 38]) {\n            translate([x, y, 29]) {\n                cylinder(h = 54, r = wall_thickness, center = true);\n            }\n        }\n    }\n}\n\n// Label recess area\nmodule label_area() {\n    translate([0, 35, 28]) {\n        cube([80, 0.5, 40], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main tin\n    tin_body();\n    \n    // Structural elements\n    handle_mounts();\n    bottom_ribs();\n    corner_reinforcements();\n    \n    // Internal features\n    translate([0, 0, wall_thickness]) {\n        dividers();\n    }\n    \n    // Label placement area\n    label_area();\n}\n\n// Wire handle (separate piece for printing)\ntranslate([0, 0, 0]) {\n    wire_handle();\n}",
    "renders": true
  },
  {
    "office_supply": "porcelain",
    "openscad_code": "// Porcelain Table Lamp Base for Office Desk\n// Dimensions: 100mm diameter x 150mm height\n$fn = 32; // Smooth curves for porcelain look\n\n// Main parameters\nbase_diameter = 100;\nbase_height = 150;\nwall_thickness = 2;\nporcelain_color = \"white\";\n\n// Module for decorative ring detail\nmodule decorative_ring(height, diameter, count) {\n    for (i = [0:count-1]) {\n        translate([0, 0, height * i / count])\n        difference() {\n            cylinder(h=2, d=diameter, center=true);\n            cylinder(h=2.5, d=diameter - wall_thickness*2, center=true);\n        }\n    }\n}\n\n// Module for tapered body with subtle curves\nmodule porcelain_body() {\n    // Main hollow body with gentle taper\n    difference() {\n        // Outer shape - porcelain should have smooth curves\n        union() {\n            // Base foot\n            translate([0, 0, 5])\n            cylinder(h=10, d=base_diameter);\n            \n            // Main body with taper\n            hull() {\n                translate([0, 0, 15])\n                cylinder(h=5, d=base_diameter * 0.95);\n                translate([0, 0, 135])\n                cylinder(h=5, d=base_diameter * 0.7);\n            }\n            \n            // Top neck\n            translate([0, 0, 140])\n            cylinder(h=10, d=base_diameter * 0.65);\n        }\n        \n        // Hollow interior - print-friendly\n        translate([0, 0, 7.5])\n        cylinder(h=base_height - 15, d=base_diameter - wall_thickness*2);\n    }\n    \n    // Decorative relief rings - typical porcelain details\n    decorative_ring(30, base_diameter * 0.9, 4);\n    decorative_ring(60, base_diameter * 0.85, 3);\n    decorative_ring(90, base_diameter * 0.8, 3);\n    \n    // Subtle vertical ribs for structure\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([base_diameter/2 - wall_thickness - 2, 0, 75])\n        cube([4, 2, 50], center=true);\n    }\n}\n\n// Module for lamp socket mount\nmodule socket_mount() {\n    // Top mounting platform\n    translate([0, 0, base_height - 5])\n    difference() {\n        cylinder(h=10, d=base_diameter * 0.5);\n        cylinder(h=11, d=base_diameter * 0.4);\n    }\n    \n    // Cable hole\n    translate([0, 0, -1])\n    rotate([90, 0, 0])\n    cylinder(h=base_diameter * 0.5, d=8);\n}\n\n// Module for stability base\nmodule weighted_base() {\n    // Hidden weight cavity for stability\n    translate([0, 0, 2.5])\n    difference() {\n        cylinder(h=5, d=base_diameter * 0.8);\n        cylinder(h=5.5, d=base_diameter * 0.7);\n    }\n    \n    // Non-slip feet\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([base_diameter/2 * 0.85, 0, 0])\n        cylinder(h=3, d=8);\n    }\n}\n\n// Assemble the lamp base\nunion() {\n    // Main porcelain form\n    porcelain_body();\n    \n    // Functional elements\n    socket_mount();\n    \n    // Stability features\n    weighted_base();\n    \n    // Subtle light switch detail\n    translate([base_diameter/2 * 0.75, 0, 60])\n    rotate([0, 90, 0])\n    cylinder(h=15, d=10);\n}",
    "renders": true
  },
  {
    "office_supply": "clay",
    "openscad_code": "// Clay Office Chair\n// Realistic style, medium complexity, 3D-printable\n// Total height: 120 mm, seat height: 70 mm, width: 110 mm, depth: 110 mm\n\n// Parameters\n$fn = 50;\nwall = 2;            // wall thickness for 3D printing\nscale = 0.8;         // overall scale to fit 120 mm height\n\n// Main chair module\nmodule chair() {\n    // Central support column\n    difference() {\n        cylinder(h = 70 * scale, d1 = 25 * scale, d2 = 30 * scale, center = false);\n        translate([0, 0, wall])\n            cylinder(h = 70 * scale - 2*wall, d1 = (25 - 2*wall) * scale, d2 = (30 - 2*wall) * scale, center = false);\n    }\n\n    // Five-star base\n    union() {\n        for (i = [0:4]) {\n            rotate([0, 0, i * 72])\n                translate([0, 0, 0])\n                    base_leg();\n        }\n    }\n\n    // Seat pan\n    translate([0, 0, 70 * scale])\n        seat();\n\n    // Backrest post\n    translate([0, -20 * scale, 70 * scale])\n        backrest_post();\n\n    // Backrest\n    translate([0, -45 * scale, 100 * scale])\n        rotate([15, 0, 0])\n            backrest();\n}\n\n// Single leg of the five-star base\nmodule base_leg() {\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = wall * 2, d = 30 * scale, center = false);\n        translate([50 * scale, 0, 0])\n            cylinder(h = wall * 2, d = 20 * scale, center = false);\n    }\n}\n\n// Seat pan with ergonomic curve\nmodule seat() {\n    difference() {\n        // Main seat\n        hull() {\n            translate([0, 0, 0])\n                cube([100 * scale, 100 * scale, 10 * scale], center = true);\n            translate([0, 0, -5 * scale])\n                cube([90 * scale, 90 * scale, 5 * scale], center = true);\n        }\n\n        // Hollow out center\n        translate([0, 0, -wall])\n            cube([(100 - 2*wall) * scale, (100 - 2*wall) * scale, 10 * scale], center = true);\n\n        // Gentle curve on top\n        translate([0, 0, 5 * scale])\n            cylinder(h = 10 * scale, d = 100 * scale, center = true);\n    }\n}\n\n// Backrest support post\nmodule backrest_post() {\n    difference() {\n        cylinder(h = 35 * scale, d = 15 * scale, center = false);\n        translate([0, 0, wall])\n            cylinder(h = 35 * scale - 2*wall, d = (15 - 2*wall) * scale, center = false);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    difference() {\n        // Main backrest\n        hull() {\n            cube([100 * scale, 10 * scale, 60 * scale], center = true);\n            translate([0, 0, 10 * scale])\n                cube([90 * scale, 8 * scale, 50 * scale], center = true);\n        }\n\n        // Hollow center\n        translate([0, 0, 0])\n            cube([(100 - 2*wall) * scale, (10 - 2*wall) * scale, (60 - 2*wall) * scale], center = true);\n\n        // Lumbar curve\n        translate([0, 0, -15 * scale])\n            sphere(d = 90 * scale, center = true);\n    }\n}\n\n// Render the chair\nchair();",
    "renders": true
  },
  {
    "office_supply": "wax",
    "openscad_code": "// Wax furniture - Office desk organizer with wax block storage\n// Dimensions: 120mm x 80mm x 45mm\n\n// Main wax block storage compartment\nmodule wax_block() {\n    difference() {\n        // Main block body\n        cube([60, 40, 30], center=true);\n        \n        // Carved hollow for wax\n        translate([0, 0, -2])\n            cube([54, 34, 26], center=true);\n    }\n}\n\n// Desk organizer base\nmodule organizer_base() {\n    difference() {\n        // Base platform\n        cube([120, 80, 8], center=true);\n        \n        // Rounded edges using cylinders\n        for(x = [-55, 55])\n            for(y = [-35, 35])\n                translate([x, y, 4])\n                    cylinder(h=8, r=8, center=true);\n    }\n}\n\n// Pen holder section\nmodule pen_holder() {\n    // Main holder\n    difference() {\n        translate([40, 0, 0])\n            cube([30, 20, 25], center=true);\n        \n        // Three pen holes\n        for(x = [-10, 0, 10])\n            translate([40, x, 12.5])\n                cylinder(h=25, r=4, center=true);\n    }\n}\n\n// Paper clip tray\nmodule clip_tray() {\n    difference() {\n        translate([-40, 0, 0])\n            cube([25, 35, 15], center=true);\n        \n        // Rounded bottom\n        translate([-40, 0, 7.5])\n            scale([1, 0.7, 0.5])\n                sphere(r=12.5);\n    }\n}\n\n// Support legs\nmodule legs() {\n    for(x = [-50, 50])\n        for(y = [-30, 30]) {\n            translate([x, y, -18.5])\n                cylinder(h=35, r=4, center=true);\n        }\n}\n\n// Wax melt reservoir detail\nmodule wax_detail() {\n    // Small wax puddle detail\n    translate([0, 0, 16])\n        scale([1, 1, 0.3])\n            sphere(r=8);\n    \n    // Wax drips\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle])\n            translate([0, 20, 15])\n                scale([0.3, 0.3, 1])\n                    cylinder(h=5, r=3);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    organizer_base();\n    \n    legs();\n    \n    // Wax block storage\n    translate([0, 0, 19])\n        wax_block();\n    \n    // Add wax detail to top\n    wax_detail();\n    \n    // Functional elements\n    pen_holder();\n    clip_tray();\n    \n    // Reinforcement ribs\n    translate([0, 0, 4])\n        difference() {\n            cube([116, 76, 2], center=true);\n            cube([114, 74, 2], center=true);\n        }\n}",
    "renders": true
  },
  {
    "office_supply": "candle",
    "openscad_code": "// Candle furniture item - realistic style, medium complexity\n// Dimensions: 60mm diameter, 120mm height (3D printable)\n\n// Parameters\n$fn = 30;\ncandle_diameter = 60;\ncandle_height = 100;\nbase_height = 20;\nwall_thickness = 2;\n\n// Main module\nmodule candle() {\n    // Base structure with furniture-style support\n    difference() {\n        union() {\n            // Main body with subtle taper\n            cylinder(h = candle_height, d1 = candle_diameter, d2 = candle_diameter * 0.95);\n            \n            // Decorative base ring (furniture-style foot)\n            translate([0, 0, -base_height/2])\n                cylinder(h = base_height, d = candle_diameter * 1.1, d1 = candle_diameter * 1.1, d2 = candle_diameter);\n            \n            // Structural ribs for stability (like furniture bracing)\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([candle_diameter/2 - wall_thickness, -wall_thickness/2, candle_height/2])\n                        cube([wall_thickness, wall_thickness, candle_height]);\n            }\n        }\n        \n        // Wick channel - hollow center like furniture joinery\n        translate([0, 0, -1])\n            cylinder(h = candle_height + 2, d = 3);\n    }\n    \n    // Realistic melted wax pool at top\n    translate([0, 0, candle_height - 3])\n        difference() {\n            cylinder(h = 3, d = candle_diameter * 0.7);\n            translate([0, 0, 1])\n                cylinder(h = 2, d = candle_diameter * 0.6);\n        }\n    \n    // Wick - like a furniture peg detail\n    union() {\n        // Wick base (structural element)\n        translate([0, 0, candle_height - 2])\n            cylinder(h = 2, d = 2.5);\n        \n        // Wick top (thread detail)\n        translate([0, 0, candle_height])\n            cylinder(h = 8, d = 1.5);\n        \n        // Wick tip (burnt look)\n        translate([0, 0, candle_height + 8])\n            sphere(d = 1.8);\n    }\n    \n    // Furniture-style joint details around base\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([candle_diameter/2 * 0.9, -wall_thickness/2, -base_height/4])\n                cube([wall_thickness * 2, wall_thickness, base_height/2]);\n    }\n    \n    // Realistic wax drips - like furniture decorative moldings\n    drip_angles = [15, 35, 120, 200, 250, 310];\n    for (a = drip_angles) {\n        rotate([0, 0, a])\n            translate([candle_diameter/2 * 0.48, 0, candle_height - 5])\n                rotate([90, 0, 0])\n                    scale([1, 1.5, 1])\n                        cylinder(h = 8, d1 = 3, d2 = 1);\n    }\n}\n\n// Render the candle\ncandle();",
    "renders": true
  },
  {
    "office_supply": "lamp",
    "openscad_code": "// Desk Lamp - Realistic Style, Medium Complexity\n// Dimensions: ~120mm tall, 3D printable with 2mm wall thickness\n\n// Lamp Base\nmodule lamp_base() {\n    // Main base cylinder\n    difference() {\n        cylinder(h=8, d=60, $fn=48);\n        // Cable hole\n        translate([25, 0, -1]) cylinder(h=10, d=8, $fn=32);\n    }\n    \n    // Rubber feet\n    for(i=[0:3]) {\n        rotate([0, 0, i*90]) \n            translate([22, 22, -2]) \n                cylinder(h=3, d=6, $fn=16);\n    }\n}\n\n// Vertical Post\nmodule lamp_post() {\n    // Main post\n    difference() {\n        cylinder(h=100, d=12, $fn=32);\n        // Wire channel\n        translate([0, 0, -1]) cylinder(h=102, d=8, $fn=32);\n    }\n    \n    // Joint reinforcement rings\n    translate([0, 0, 0]) cylinder(h=4, d=16, $fn=32);\n    translate([0, 0, 100]) cylinder(h=4, d=16, $fn=32);\n}\n\n// Adjustable Arm\nmodule lamp_arm() {\n    // Main arm tube\n    difference() {\n        rotate([0, 90, 0]) cylinder(h=80, d=10, $fn=32);\n        // Internal wire channel\n        rotate([0, 90, 0]) translate([0, 0, -1]) cylinder(h=82, d=6, $fn=32);\n    }\n    \n    // Joint connector\n    translate([0, 0, 40]) rotate([0, 90, 0]) {\n        difference() {\n            cylinder(h=16, d=14, $fn=32);\n            cylinder(h=18, d=10, $fn=32);\n        }\n    }\n}\n\n// LED Light Head\nmodule lamp_head() {\n    // Head housing\n    difference() {\n        // Main housing\n        translate([0, 0, -5]) cube([60, 30, 15], center=true);\n        \n        // LED cavity\n        translate([0, 0, 1]) cube([54, 24, 10], center=true);\n        \n        // Heat vents\n        for(y=[-8:8:8]) {\n            translate([25, y, 2]) cube([8, 2, 8], center=true);\n            translate([-25, y, 2]) cube([8, 2, 8], center=true);\n        }\n    }\n    \n    // Mounting bracket\n    difference() {\n        translate([0, 0, 10]) cube([12, 16, 8], center=true);\n        translate([0, 0, 10]) rotate([90, 0, 0]) cylinder(h=20, d=10, $fn=32);\n    }\n    \n    // Light diffuser\n    translate([0, 0, -3]) cube([52, 20, 1], center=true);\n}\n\n// Control Button\nmodule lamp_button() {\n    // Button housing\n    translate([0, 12, 0]) difference() {\n        cylinder(h=8, d=12, $fn=32);\n        cylinder(h=9, d=8, $fn=32);\n    }\n    \n    // Button top\n    translate([0, 12, 8]) cylinder(h=2, d=10, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Base with post\n    lamp_base();\n    translate([0, 0, 8]) lamp_post();\n    \n    // Arm assembly\n    translate([0, 0, 108]) rotate([0, -30, 0]) {\n        lamp_arm();\n        \n        // Head assembly\n        translate([80, 0, 0]) rotate([0, -60, 0]) {\n            lamp_head();\n            lamp_button();\n        }\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "wick",
    "openscad_code": "// Wick office chair - realistic medium complexity model\n// Overall dimensions: 120mm H x 100mm W x 100mm D\n\n// Chair frame thickness\nframe_thickness = 2;\n\n// Module for chair leg\nmodule chair_leg() {\n    // Main leg post\n    cylinder(h = 100, d1 = 8, d2 = 6, $fn = 20);\n    \n    // Foot base\n    translate([0, 0, 100])\n        cylinder(h = 3, d = 12, $fn = 20);\n}\n\n// Module for backrest support bars\nmodule backrest_bar() {\n    rotate([90, 0, 0])\n        cylinder(h = 40, d = 6, $fn = 12);\n}\n\n// Module for seat with cushion detail\nmodule seat() {\n    // Seat base\n    difference() {\n        cube([100, 100, 5], center = true);\n        translate([0, 0, -2.5])\n            cube([96, 96, 5], center = true);\n    }\n    \n    // Cushion layer\n    translate([0, 0, 3.5])\n        cube([94, 94, 4], center = true);\n}\n\n// Module for backrest with lumbar support\nmodule backrest() {\n    // Main backrest frame\n    difference() {\n        cube([90, 6, 60], center = true);\n        translate([0, 0, 25])\n            cube([86, 7, 56], center = true);\n    }\n    \n    // Lumbar support curve\n    translate([0, 4, -5])\n        scale([1, 0.3, 1])\n            sphere(d = 60, $fn = 30);\n}\n\n// Module for armrest\nmodule armrest(side) {\n    translate([side * 45, 0, 0]) {\n        // Armrest pad\n        cube([30, 6, 20], center = true);\n        \n        // Support post\n        translate([0, 0, -10])\n            cylinder(h = 25, d = 5, $fn = 12);\n    }\n}\n\n// Module for wheel base\nmodule wheel_base() {\n    // Center hub\n    cylinder(h = 10, d = 15, $fn = 20);\n    \n    // Wheel spokes\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([0, 7.5, 0])\n                cube([frame_thickness, 15, 10], center = true);\n        }\n    }\n    \n    // Wheels\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60 + 30]) {\n            translate([15, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, d = 8, $fn = 12);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat\n    translate([0, 0, 48])\n        seat();\n    \n    // Backrest\n    translate([0, -47, 78])\n        backrest();\n    \n    // Backrest support bars\n    translate([-30, -44, 48])\n        backrest_bar();\n    translate([30, -44, 48])\n        backrest_bar();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Central post\n    translate([0, 0, 0])\n        cylinder(h = 48, d = 10, $fn = 20);\n    \n    // Gas lift cylinder\n    translate([0, 0, 48])\n        cylinder(h = 15, d = 12, $fn = 20);\n    \n    // Wheel base\n    translate([0, 0, 0])\n        wheel_base();\n}",
    "renders": true
  },
  {
    "office_supply": "match",
    "openscad_code": "// Realistic Match Furniture - Office Supply Organizer\n// Medium complexity, 3D-printable model\n// Approx. 100mm length, 40mm width, 60mm height\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main parameters\nmatch_length = 100;\nmatch_width = 40;\nmatch_height = 60;\nwall_thickness = 2;\n\n// Match head dimensions\nhead_radius = match_width/2 * 0.9;\nhead_height = 25;\n\n// Match body dimensions\nbody_length = match_length - head_height;\nbody_width = match_width - wall_thickness*2;\n\n// Base dimensions\nbase_height = 5;\nbase_overhang = 3;\n\n// Create the complete match furniture organizer\nmodule match_furniture() {\n    // Main match body - hollow storage compartment\n    difference() {\n        // Outer shell - matchstick shape\n        union() {\n            // Main rectangular body\n            translate([0, 0, base_height + body_length/2])\n                cube([match_width, match_width, body_length], center=true);\n            \n            // Tapered end near head\n            translate([0, 0, base_height + body_length + head_height/2])\n                cylinder(h=head_height, r1=match_width/2, r2=head_radius, center=true);\n        }\n        \n        // Hollow interior - storage compartment\n        translate([0, 0, base_height + body_length/2])\n            cube([body_width, body_width, body_length + head_height], center=true);\n    }\n    \n    // Match head - textured surface for grip\n    translate([0, 0, base_height + body_length + head_height/2])\n        difference() {\n            // Main head shape\n            cylinder(h=head_height, r1=head_radius, r2=head_radius*0.8, center=true);\n            \n            // Grip texture - concentric rings\n            for(i = [1:3]) {\n                translate([0, 0, head_height/2 - i*head_height/4])\n                    cylinder(h=head_height/8, r1=head_radius*0.9, r2=head_radius*0.7, center=true);\n            }\n        }\n    \n    // Reinforced base with furniture-style feet\n    difference() {\n        // Base platform\n        translate([0, 0, base_height/2])\n            cube([match_width + base_overhang*2, match_width + base_overhang*2, base_height], center=true);\n        \n        // Recessed bottom for material saving\n        translate([0, 0, base_height/2 - 1])\n            cube([match_width, match_width, base_height - 1], center=true);\n        \n        // Furniture feet - four corners\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*(match_width/2 - base_overhang), y*(match_width/2 - base_overhang), 0])\n                    cylinder(h=base_height, r1=3, r2=2, center=false);\n            }\n        }\n    }\n    \n    // Office supply dividers - internal structure\n    translate([0, 0, base_height + body_length/2])\n        for(i = [-1, 1]) {\n            rotate([90, 0, 0])\n                cube([body_width - wall_thickness*2, wall_thickness, body_length*0.8], center=true);\n        }\n    \n    // Ergonomic finger grip - front access\n    translate([0, -match_width/2 - 1, base_height + body_length*0.7])\n        difference() {\n            cube([match_width*0.6, wall_thickness*2, 15], center=true);\n            translate([0, 0, 7])\n                cube([match_width*0.4, wall_thickness*3, 10], center=true);\n        }\n}\n\n// Assembly call\nmatch_furniture();",
    "renders": true
  },
  {
    "office_supply": "flint",
    "openscad_code": "// Flint Office Chair - Realistic Style\n// Overall dimensions: 120mm height x 100mm width x 100mm depth\n\n// Parameters\nseat_height = 45;\nseat_width = 50;\nseat_depth = 50;\nback_height = 75;\narmrest_height = 65;\nbase_diameter = 80;\nwheel_radius = 8;\ncylinder_radius = 5;\n\n// Main seat\nmodule seat() {\n    difference() {\n        // Seat cushion\n        translate([0, 0, seat_height - 5])\n            scale([1, 1, 0.3])\n                cube([seat_width, seat_depth, 10], center=true);\n        \n        // Seat indentation\n        translate([0, 0, seat_height - 3])\n            scale([0.9, 0.9, 0.2])\n                cube([seat_width, seat_depth, 10], center=true);\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    union() {\n        // Main backrest\n        translate([0, -20, seat_height + back_height/2])\n            scale([0.9, 0.3, 1.5])\n                cube([seat_width, seat_depth, back_height], center=true);\n        \n        // Lumbar support curve\n        translate([0, -10, seat_height + 25])\n            rotate([15, 0, 0])\n                scale([0.8, 0.25, 0.4])\n                    cube([seat_width * 0.8, seat_depth * 0.8, 20], center=true);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        translate([side * (seat_width/2 + 5), 0, armrest_height]) {\n            // Vertical support\n            cylinder(h=20, r=cylinder_radius);\n            // Horizontal armrest\n            translate([0, 10, 10])\n                rotate([0, 90, 0])\n                    cylinder(h=25, r=cylinder_radius);\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    // Outer cylinder\n    cylinder(h=40, r=cylinder_radius + 2);\n    \n    // Inner cylinder\n    translate([0, 0, 40])\n        cylinder(h=20, r=cylinder_radius);\n}\n\n// 5-star base\nmodule base() {\n    // Central hub\n    cylinder(h=10, r=15);\n    \n    // 5 spokes with wheels\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n            translate([0, 30, 5]) {\n                // Spoke\n                cube([60, 8, 8], center=true);\n                \n                // Wheel\n                translate([30, 0, -8])\n                    sphere(r=wheel_radius);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat assembly\n    union() {\n        seat();\n        backrest();\n        armrests();\n    }\n    \n    // Support structure\n    translate([0, 0, seat_height - 20]) {\n        gas_lift();\n        translate([0, 0, -20])\n            base();\n    }\n}",
    "renders": true
  },
  {
    "office_supply": "torch",
    "openscad_code": "// Realistic Torch Furniture Item - Medium Complexity\n// A wall-mountable torch holder with bracket and base\n\n// Overall dimensions\ntorch_height = 120;\ntorch_diameter = 25;\nbracket_width = 60;\nbracket_height = 80;\nbase_length = 80;\nbase_width = 40;\nbase_height = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Torch body module\nmodule torch_body() {\n    // Main cylindrical body\n    cylinder(h=torch_height, d=torch_diameter, $fn=32);\n    \n    // Top rim detail\n    translate([0, 0, torch_height])\n    cylinder(h=5, d1=torch_diameter + 4, d2=torch_diameter + 2, $fn=32);\n    \n    // Bottom rim detail\n    translate([0, 0, -5])\n    cylinder(h=5, d1=torch_diameter + 2, d2=torch_diameter + 4, $fn=32);\n}\n\n// Flame module\nmodule flame() {\n    // Flame base\n    color(\"orange\")\n    translate([0, 0, torch_height + 5])\n    cylinder(h=20, d1=15, d2=8, $fn=16);\n    \n    // Flame tip\n    color(\"yellow\")\n    translate([0, 0, torch_height + 25])\n    cylinder(h=15, d1=8, d2=2, $fn=16);\n}\n\n// Wall bracket module\nmodule wall_bracket() {\n    // Main bracket plate\n    difference() {\n        cube([bracket_width, wall_thickness, bracket_height], center=true);\n        \n        // Screw holes (2 holes)\n        for (i = [-1, 1]) {\n            translate([i * 20, 0, 30])\n            cylinder(h=wall_thickness + 1, d=4, center=true, $fn=16);\n        }\n    }\n    \n    // Support gusset\n    translate([0, -wall_thickness/2 - 10, 0])\n    rotate([90, 0, 0])\n    linear_extrude(height=wall_thickness)\n    polygon(points=[\n        [0, 0],\n        [20, 0],\n        [0, 20],\n        [-20, 0]\n    ]);\n}\n\n// Base module\nmodule torch_base() {\n    // Main base\n    difference() {\n        cube([base_length, base_width, base_height], center=true);\n        \n        // Torch socket\n        translate([0, 0, -base_height/2])\n        cylinder(h=base_height + 1, d=torch_diameter + 4, $fn=32);\n        \n        // Cable management hole\n        translate([30, 0, -base_height/2])\n        cylinder(h=base_height + 1, d=6, $fn=16);\n    }\n    \n    // Base feet\n    for (x = [-base_length/2 + 10, base_length/2 - 10])\n    for (y = [-base_width/2 + 10, base_width/2 - 10]) {\n        translate([x, y, -base_height/2 - 2])\n        cube([8, 8, 4], center=true);\n    }\n}\n\n// Handle module\nmodule handle() {\n    // Main handle grip\n    translate([torch_diameter/2 + 10, 0, torch_height/2])\n    rotate([0, 90, 0])\n    cylinder(h=30, d=10, $fn=16);\n    \n    // Handle supports\n    for (h = [torch_height/2 - 15, torch_height/2 + 15]) {\n        translate([torch_diameter/2 + 10, 0, h])\n        rotate([0, 90, 0])\n        cylinder(h=5, d1=12, d2=10, $fn=16);\n    }\n}\n\n// Assembly\n// Wall bracket\ntranslate([0, -torch_diameter/2 - 20, 0])\nwall_bracket();\n\n// Torch assembly\ntranslate([0, 0, 0])\nunion() {\n    // Torch body\n    torch_body();\n    \n    // Flame\n    flame();\n    \n    // Handle\n    handle();\n}\n\n// Base (alternative to wall mount)\ntranslate([0, 50, base_height/2])\ntorch_base();",
    "renders": true
  },
  {
    "office_supply": "torchlight",
    "openscad_code": "// Torchlight Office Furniture Item - Realistic Style\n// Uses only basic OpenSCAD primitives, ~100 lines\n\n$fn = 32;\n\nmodule torch_body() {\n    // Main cylindrical body with wall thickness\n    difference() {\n        cylinder(h=80, d=30, center=false);\n        translate([0, 0, 2])\n            cylinder(h=78, d=26, center=false);\n    }\n}\n\nmodule grip_pattern() {\n    // Ergonomic grip rings\n    for(i = [1:5:30]) {\n        translate([0, 0, 10+i])\n            difference() {\n                cylinder(h=3, d=32);\n                cylinder(h=3, d=28);\n            }\n    }\n}\n\nmodule head_assembly() {\n    // Flashlight head with reflector\n    translate([0, 0, 80])\n    union() {\n        // Main head\n        difference() {\n            cylinder(h=20, d=35);\n            translate([0, 0, 2])\n                cylinder(h=18, d=31);\n        }\n        \n        // Reflector cone\n        translate([0, 0, 5])\n            difference() {\n                cylinder(h=15, d1=25, d2=20);\n                cylinder(h=15, d1=23, d2=18);\n            }\n    }\n}\n\nmodule lens() {\n    // Clear lens cover\n    translate([0, 0, 95])\n    difference() {\n        cylinder(h=2, d=33);\n        cylinder(h=2, d=29);\n    }\n}\n\nmodule switch_button() {\n    // Power switch on side\n    translate([15, 0, 50])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=8, d=8);\n        translate([0, 0, 2])\n            cylinder(h=6, d=4);\n    }\n}\n\nmodule base_cap() {\n    // Removable battery cap\n    translate([0, 0, -5])\n    difference() {\n        cylinder(h=7, d=32);\n        translate([0, 0, 2])\n            cylinder(h=5, d=28);\n    }\n}\n\nmodule mounting_clip() {\n    // Office desk clip for storage\n    translate([0, -20, 40])\n    rotate([0, 0, 0])\n    union() {\n        // Clip base\n        cube([30, 4, 15], center=true);\n        \n        // Clip curve\n        translate([0, -8, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=16, d=20);\n                translate([0, 0, -2])\n                    cube([20, 10, 20], center=true);\n            }\n    }\n}\n\nmodule structural_supports() {\n    // Internal support ribs\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([13, 0, 40])\n            cube([2, 1, 40], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    torch_body();\n    grip_pattern();\n    head_assembly();\n    lens();\n    switch_button();\n    base_cap();\n    mounting_clip();\n    \n    // Internal structure (hidden but printable)\n    %structural_supports();\n}",
    "renders": true
  },
  {
    "office_supply": "lantern",
    "openscad_code": "// Desk Lantern with realistic proportions and printable walls\n// Overall size: 60mm wide x 60mm deep x 130mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module for the lantern\nmodule lantern_body() {\n    difference() {\n        // Outer cube shell\n        translate([0, 0, 40]) cube([60, 60, 80], center=true);\n        // Hollow out interior\n        translate([0, 0, 40]) cube([60-wall*2, 60-wall*2, 80-wall*2], center=true);\n    }\n}\n\n// Top cap with vent holes\nmodule top_cap() {\n    difference() {\n        // Main cap\n        translate([0, 0, 80.5]) cube([65, 65, 5], center=true);\n        \n        // Ventilation slots\n        for (i = [-25:10:25]) {\n            translate([i, 0, 82]) cube([6, 55, 2], center=true);\n        }\n    }\n}\n\n// Bottom base with feet\nmodule base() {\n    union() {\n        // Base platform\n        translate([0, 0, 0]) cube([65, 65, 10], center=true);\n        \n        // Four feet\n        for (x = [-25, 25])\n        for (y = [-25, 25]) {\n            translate([x, y, -3]) cylinder(h=8, d=12, $fn=20);\n        }\n    }\n}\n\n// LED bulb representation\nmodule led_bulb() {\n    translate([0, 0, 35]) sphere(d=15);\n}\n\n// Handle for carrying\nmodule handle() {\n    difference() {\n        // Handle arch\n        translate([0, 0, 120]) rotate([90, 0, 0]) cylinder(h=65, d=8, center=true, $fn=20);\n        // Remove center for grip\n        translate([0, 0, 120]) rotate([90, 0, 0]) cylinder(h=70, d=5, center=true, $fn=20);\n    }\n    \n    // Handle supports\n    translate([-30, 0, 80]) cylinder(h=6, d=8, center=true, $fn=20);\n    translate([30, 0, 80]) cylinder(h=6, d=8, center=true, $fn=20);\n}\n\n// Side windows with frames\nmodule windows() {\n    // Front and back windows\n    for (side = [-1, 1]) {\n        translate([side * 29.5, 0, 40]) rotate([0, side * 90, 0]) {\n            difference() {\n                // Frame\n                cube([wall, 50, 60]);\n                // Window opening\n                translate([side * wall/2, 0, 0]) cube([wall+1, 46, 56], center=true);\n            }\n        }\n    }\n    \n    // Left and right windows\n    for (side = [-1, 1]) {\n        translate([0, side * 29.5, 40]) rotate([0, 0, side * 90]) {\n            difference() {\n                // Frame\n                cube([wall, 50, 60]);\n                // Window opening\n                translate([side * wall/2, 0, 0]) cube([wall+1, 46, 56], center=true);\n            }\n        }\n    }\n}\n\n// Control knob on front\nmodule control_knob() {\n    translate([0, -32, 25]) {\n        union() {\n            // Knob stem\n            cylinder(h=15, d=8, $fn=20);\n            // Knob head\n            translate([0, 0, 15]) cylinder(h=5, d=12, $fn=20);\n        }\n    }\n}\n\n// Assemble the complete lantern\nunion() {\n    base();\n    lantern_body();\n    top_cap();\n    handle();\n    windows();\n    control_knob();\n    // LED bulb (optional - can be added separately)\n    %led_bulb();\n}",
    "renders": true
  },
  {
    "office_supply": "paper",
    "openscad_code": "// DIN A4 paper tray for desktop use\n// Overall footprint 210x297 mm (A4) x 50 mm height\n// Wall thickness 2 mm for 3D printability\n\n$fn = 50;\n\n// Main module\nmodule paper_tray() {\n    difference() {\n        // Base tray body\n        tray_body();\n        \n        // Paper cavity\n        translate([2, 2, 2])\n            cube([210-4, 297-4, 50-2]);\n        \n        // Finger cutout at front\n        translate([210/2-15, 295, 2])\n            cube([30, 10, 10]);\n    }\n    \n    // Reinforcement ribs inside\n    for (x = [20:40:190]) {\n        translate([x, 20, 2])\n            cube([2, 297-40, 5]);\n    }\n    \n    // Stack alignment pegs on bottom\n    translate([10, 10, 0])\n        cylinder(h=3, d=6);\n    translate([200, 10, 0])\n        cylinder(h=3, d=6);\n    translate([10, 287, 0])\n        cylinder(h=3, d=6);\n    translate([200, 287, 0])\n        cylinder(h=3, d=6);\n    \n    // Corresponding holes on top for stacking\n    translate([10, 10, 50])\n        cylinder(h=2, d=8);\n    translate([200, 10, 50])\n        cylinder(h=2, d=8);\n    translate([10, 287, 50])\n        cylinder(h=2, d=8);\n    translate([200, 287, 50])\n        cylinder(h=2, d=8);\n}\n\nmodule tray_body() {\n    // Base plate\n    cube([210, 297, 2]);\n    \n    // Front wall\n    translate([0, 297-2, 0])\n        cube([210, 2, 50]);\n    \n    // Back wall\n    translate([0, 0, 0])\n        cube([210, 2, 50]);\n    \n    // Left wall\n    translate([0, 0, 0])\n        cube([2, 297, 50]);\n    \n    // Right wall\n    translate([210-2, 0, 0])\n        cube([2, 297, 50]);\n    \n    // Rounded front edge\n    difference() {\n        translate([210-2, 297-2, 0])\n            cube([2, 2, 50]);\n        translate([210-2, 297-2, 0])\n            rotate([0, 0, 90])\n                cylinder(h=2, d=2);\n    }\n}\n\n// Paper sheets\nmodule paper_stack() {\n    for (i = [0:10:45]) {\n        translate([10, 10, 50+2+i])\n            color(\"white\", 0.9)\n                cube([210-20, 297-20, 0.1]);\n    }\n}\n\n// Assembly\npaper_tray();\ntranslate([0, 350, 0])\n    paper_stack();",
    "renders": true
  },
  {
    "office_supply": "ink",
    "openscad_code": "// Ink Cartridge Desk Organizer - Realistic Medium Complexity\n// Holds standard ink cartridges with drawer storage\n\n$fn = 32;\n\n// Overall dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 120;\n\n// Wall thickness\nwall = 2;\n\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n        cube([base_width-wall*2, base_depth-wall*2, base_height-wall], center=true);\n    }\n}\n\nmodule drawer_opening() {\n    // Create opening for drawer\n    translate([0, 0, -base_height/2 + 25])\n    cube([50, base_depth-wall*2, 40], center=true);\n}\n\nmodule drawer() {\n    // Drawer box\n    difference() {\n        translate([0, 0, -base_height/2 + 25])\n        cube([48-wall, base_depth-wall*4, 38], center=true);\n        \n        // Hollow drawer\n        translate([0, 0, -base_height/2 + 25])\n        cube([44-wall*2, base_depth-wall*6, 36], center=true);\n    }\n    \n    // Drawer handle\n    translate([0, base_depth/2 - wall*3, -base_height/2 + 25])\n    rotate([90, 0, 0])\n    cylinder(h=15, r1=2, r2=3, center=true);\n}\n\nmodule cartridge_slots() {\n    // Top platform for cartridges\n    translate([0, 0, base_height/2 - 10])\n    cube([base_width-wall*4, base_depth-wall*4, 5], center=true);\n    \n    // Cartridge holes (standard 12mm diameter)\n    for (x = [-25, -8, 9, 26]) {\n        for (y = [-20, -5, 10]) {\n            translate([x, y, base_height/2 - 7.5])\n            cylinder(h=10, r=6.5, center=true);\n        }\n    }\n}\n\nmodule support_feet() {\n    // Four support feet\n    foot_positions = [\n        [base_width/2 - 8, base_depth/2 - 8, -base_height/2],\n        [-base_width/2 + 8, base_depth/2 - 8, -base_height/2],\n        [base_width/2 - 8, -base_depth/2 + 8, -base_height/2],\n        [-base_width/2 + 8, -base_depth/2 + 8, -base_height/2]\n    ];\n    \n    for (pos = foot_positions) {\n        translate(pos)\n        cylinder(h=5, r=4, center=true);\n    }\n}\n\nmodule label_area() {\n    // Recessed label area on front\n    translate([0, base_depth/2 - wall - 1, base_height/2 - 30])\n    cube([40, wall, 20], center=true);\n}\n\n// Main assembly\nunion() {\n    difference() {\n        main_body();\n        drawer_opening();\n    }\n    \n    drawer();\n    cartridge_slots();\n    support_feet();\n    label_area();\n}",
    "renders": true
  },
  {
    "office_supply": "quill",
    "openscad_code": "// Quill Pen Holder - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm x 40mm x 40mm\n\n// Parameters for customization\n$fn = 32;\nwall_thickness = 2;\nbase_width = 40;\nbase_depth = 40;\nbase_height = 8;\nquill_length = 120;\nquill_diameter_top = 4;\nquill_diameter_mid = 6;\nquill_diameter_bottom = 8;\nholder_height = 25;\nholder_inner_diameter = 10;\n\n// Feather texture module\nmodule feather_texture(height, radius, segments) {\n    for (i = [0:segments-1]) {\n        rotate([0, 0, i * (360/segments)]) \n            translate([radius * 0.8, 0, height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=height*0.7, r=radius*0.15, $fn=3);\n    }\n}\n\n// Main quill structure\nmodule quill_pen() {\n    // Quill shaft with taper\n    hull() {\n        translate([0, 0, quill_length*0.9])\n            cylinder(h=1, r=quill_diameter_top/2, $fn=16);\n        translate([0, 0, quill_length*0.6])\n            cylinder(h=1, r=quill_diameter_mid/2, $fn=16);\n        translate([0, 0, 0])\n            cylinder(h=1, r=quill_diameter_bottom/2, $fn=16);\n    }\n    \n    // Feather details along shaft\n    feather_texture(quill_length*0.4, quill_diameter_mid/2, 8);\n    translate([0, 0, quill_length*0.5]) \n        feather_texture(quill_length*0.3, quill_diameter_mid/2 * 0.9, 6);\n    \n    // Nib detail\n    translate([0, 0, 0])\n        cylinder(h=5, r1=quill_diameter_bottom/2, r2=1, $fn=8);\n}\n\n// Base with holder\nmodule quill_base() {\n    // Solid base\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded edges\n        translate([base_width/2 - 4, base_depth/2 - 4, 0])\n            cylinder(h=base_height*2, r=4, center=true);\n        translate([-base_width/2 + 4, base_depth/2 - 4, 0])\n            rotate([0, 0, 90])\n                cylinder(h=base_height*2, r=4, center=true);\n        translate([-base_width/2 + 4, -base_depth/2 + 4, 0])\n            rotate([0, 0, 180])\n                cylinder(h=base_height*2, r=4, center=true);\n        translate([base_width/2 - 4, -base_depth/2 + 4, 0])\n            rotate([0, 0, 270])\n                cylinder(h=base_height*2, r=4, center=true);\n    }\n    \n    // Holder cylinder\n    difference() {\n        translate([0, 0, base_height + holder_height/2])\n            cylinder(h=holder_height, r=holder_inner_diameter/2 + wall_thickness, $fn=32);\n        translate([0, 0, base_height + wall_thickness])\n            cylinder(h=holder_height, r=holder_inner_diameter/2, $fn=32);\n    }\n    \n    // Reinforcement ribs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([holder_inner_diameter/2 + wall_thickness/2, 0, base_height + holder_height/2])\n                cube([wall_thickness, 6, holder_height], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    quill_base();\n\ntranslate([0, 0, base_height + holder_height + quill_length/2 - 5])\n    rotate([0, 10, 0])\n        quill_pen();",
    "renders": true
  },
  {
    "office_supply": "book",
    "openscad_code": "// Book furniture item - medium complexity realistic style\n// Dimensions: 120mm x 90mm x 30mm book with functional furniture elements\n\n$fn = 32;  // Smooth curves\n\n// Main book body module\nmodule book_body() {\n    // Cover thickness\n    cover_thickness = 2;\n    \n    // Front cover\n    translate([0, 0, 15]) {\n        difference() {\n            // Main cover\n            cube([120, 90, cover_thickness], center = true);\n            \n            // Rounded corners on front cover\n            for(x = [-58, 58])\n                for(y = [-43, 43])\n                    translate([x, y, 0])\n                        cylinder(h = cover_thickness + 1, r = 4, center = true);\n        }\n    }\n    \n    // Back cover\n    translate([0, 0, -15]) {\n        difference() {\n            // Main cover\n            cube([120, 90, cover_thickness], center = true);\n            \n            // Rounded corners on back cover\n            for(x = [-58, 58])\n                for(y = [-43, 43])\n                    translate([x, y, 0])\n                        cylinder(h = cover_thickness + 1, r = 4, center = true);\n        }\n    }\n    \n    // Spine\n    translate([-61, 0, 0]) {\n        difference() {\n            // Main spine\n            cube([2, 90, 32], center = true);\n            \n            // Spine rounding\n            for(z = [-14, 14])\n                translate([0, 0, z])\n                    sphere(r = 1.5);\n        }\n    }\n}\n\n// Pages module\nmodule pages() {\n    // Stack of pages\n    for(i = [0:4:28]) {\n        translate([0, 0, -14 + i]) {\n            // Individual page\n            color(\"white\")\n            difference() {\n                cube([116, 86, 1.8], center = true);\n                \n                // Page rounding\n                for(x = [-56, 56])\n                    for(y = [-41, 41])\n                        translate([x, y, 0])\n                            cylinder(h = 2, r = 2, center = true);\n            }\n        }\n    }\n}\n\n// Furniture support structure - bookend elements\nmodule support_structure() {\n    // Base support frame\n    translate([0, 0, -20]) {\n        difference() {\n            // Main base\n            cube([125, 95, 5], center = true);\n            \n            // Center relief for weight reduction\n            cube([115, 85, 6], center = true);\n        }\n    }\n    \n    // Side supports for stability\n    translate([0, -48, -10]) {\n        cube([125, 2, 20], center = true);\n    }\n    \n    translate([0, 48, -10]) {\n        cube([125, 2, 20], center = true);\n    }\n}\n\n// Ergonomic grip details\nmodule grip_details() {\n    // Thumb indent on front cover\n    translate([45, 35, 15]) {\n        difference() {\n            cylinder(h = 3, r = 8, center = true);\n            translate([0, 0, -1])\n                cube([16, 16, 5], center = true);\n        }\n    }\n    \n    // Finger grip on spine\n    for(i = [-30:15:30]) {\n        translate([-61, i, 0]) {\n            rotate([0, 90, 0])\n                cylinder(h = 2, r = 3, center = true);\n        }\n    }\n}\n\n// Title block (furniture label)\nmodule title_block() {\n    translate([0, 0, 16.5]) {\n        // Raised title area\n        difference() {\n            cube([80, 20, 1], center = true);\n            \n            // Engraved text area\n            translate([0, 0, -0.5])\n                cube([76, 16, 1.5], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main book structure\n    union() {\n        book_body();\n        pages();\n    }\n    \n    // Furniture elements\n    support_structure();\n    \n    // Ergonomic features\n    grip_details();\n    \n    // Labeling\n    title_block();\n}",
    "renders": true
  }
]