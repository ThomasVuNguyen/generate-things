[
  {
    "historical_artifact": "gladius",
    "openscad_code": "// Gladius Hispaniensis - Mainz type (1st century AD)\n// Overall length ~85 mm for 3D printing (1:10 scale)\n\nblade_length = 65;\nblade_width = 9;\nblade_thickness = 2;\nhandle_length = 18;\nguard_width = 12;\nguard_thickness = 3;\npommel_diameter = 10;\npommel_height = 5;\n\n// Main blade construction\nmodule gladius_blade() {\n    color(\"silver\")\n    union() {\n        // Central fullered blade\n        difference() {\n            // Main blade body with slight taper\n            hull() {\n                translate([0, 0, 0])\n                    cube([blade_length, blade_width, blade_thickness], center=true);\n                translate([blade_length*0.8, 0, 0])\n                    scale([0.3, 0.3, 1])\n                        cube([blade_length*0.2, blade_width, blade_thickness], center=true);\n            }\n            \n            // Fuller grooves (two parallel grooves)\n            for(side = [-1, 1]) {\n                translate([blade_length*0.3, side*blade_width*0.25, -blade_thickness/2])\n                    rotate([0, 0, 0])\n                        scale([1, 0.2, 0.8])\n                            cylinder(h=blade_thickness*2, r=blade_width*0.15, $fn=8);\n            }\n            \n            // Point shaping\n            translate([blade_length*0.9, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=blade_width*1.5, r=blade_width, $fn=3);\n        }\n    }\n}\n\n// Decorative guard with classical motifs\nmodule gladius_guard() {\n    color(\"bronze\")\n    difference() {\n        // Main guard body\n        translate([-guard_thickness/2, 0, 0])\n            cube([guard_thickness, guard_width, blade_thickness*1.5], center=true);\n        \n        // Decorative cutouts\n        for(i = [1:3]) {\n            translate([-guard_thickness/2, -guard_width*0.3 + i*guard_width*0.3, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=guard_thickness+1, r=1.5, $fn=6);\n        }\n    }\n}\n\n// Grip with wire wrapping texture\nmodule gladius_grip() {\n    color(\"brown\")\n    difference() {\n        // Main grip cylinder\n        translate([-handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r=blade_thickness*1.2, $fn=16);\n        \n        // Wire wrapping grooves\n        for(i = [0:5]) {\n            translate([-handle_length*0.8 + i*handle_length*0.15, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=handle_length*0.05, r=blade_thickness*1.25, $fn=16);\n        }\n    }\n}\n\n// Pommel with typical bulbous shape\nmodule gladius_pommel() {\n    color(\"bronze\")\n    union() {\n        // Main pommel\n        translate([-handle_length - pommel_height/2, 0, 0])\n            scale([1, 1.2, 1.2])\n                sphere(r=pommel_diameter/2, $fn=16);\n        \n        // Decorative ring\n        translate([-handle_length - pommel_height*0.7, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=pommel_height*0.3, r1=pommel_diameter*0.6, r2=pommel_diameter*0.5, $fn=16);\n    }\n}\n\n// Assembly\nmodule gladius_complete() {\n    union() {\n        gladius_blade();\n        translate([blade_length*0.45, 0, 0])\n            gladius_guard();\n        translate([blade_length*0.45 + guard_thickness/2, 0, 0])\n            gladius_grip();\n        translate([blade_length*0.45 + guard_thickness/2 + handle_length, 0, 0])\n            gladius_pommel();\n    }\n}\n\n// Render the gladius\ngladius_complete();",
    "renders": true
  },
  {
    "historical_artifact": "scutum",
    "openscad_code": "$fa = 0.5;\n$fs = 0.5;\n\n// Scutum (Roman rectangular curved shield)\n// Overall dimensions: 80mm tall, 45mm wide, 8mm thick\ncolor(\"chocolate\") difference() {\n    // Main curved shield body\n    translate([0, -5, 0])\n    scale([1, 1.2, 1])\n    rotate([0, 10, 0])\n    cube([45, 80, 7], center = true);\n    \n    // Cut out central boss hole\n    translate([0, 0, 4])\n    cylinder(h = 8, r1 = 7, r2 = 5);\n    \n    // Cut out hand grip slots\n    translate([0, -15, 4])\n    cube([8, 20, 8], center = true);\n}\n\n// Central boss (umbo)\ncolor(\"goldenrod\") translate([0, 0, 5])\ndifference() {\n    cylinder(h = 8, r1 = 11, r2 = 8);\n    // Boss hollow\n    translate([0, 0, -1])\n    cylinder(h = 10, r1 = 7, r2 = 4);\n}\n\n// Decorative spine along vertical axis\ncolor(\"saddlebrown\") for(i = [-1:1]) {\n    translate([i * 2, 0, 3.5])\n    cube([1, 78, 2]);\n}\n\n// Horizontal reinforcing strips\ncolor(\"saddlebrown\") for(y = [-25, 0, 25]) {\n    translate([0, y, 3.5])\n    cube([44, 2, 2]);\n}\n\n// Rivet heads along edges\ncolor(\"goldenrod\") for(y = [-35:10:35]) {\n    translate([20, y, 6])\n    sphere(r = 1);\n    translate([-20, y, 6])\n    sphere(r = 1);\n}\n\n// Handle grip behind boss\ncolor(\"saddlebrown\") translate([0, -15, -2])\nrotate([90, 0, 0])\ndifference() {\n    cylinder(h = 25, r = 3);\n    translate([0, 0, -1])\n    cylinder(h = 27, r = 1.5);\n}\n\n// Decorative central motif\ncolor(\"goldenrod\") translate([0, 0, 7])\nscale([1, 0.8, 1])\nrotate([0, 0, 45])\ndifference() {\n    cube([10, 10, 1], center = true);\n    cube([6, 6, 2], center = true);\n}\n\n// Wing motifs on sides\ncolor(\"goldenrod\") for(side = [-1, 1]) {\n    translate([side * 22, 15, 6.5])\n    rotate([0, 0, side * -30])\n    scale([1, 0.5, 1])\n    cylinder(h = 1, r = 5);\n    \n    translate([side * 22, -15, 6.5])\n    rotate([0, 0, side * 30])\n    scale([1, 0.5, 1])\n    cylinder(h = 1, r = 5);\n}\n\n// Edge reinforcement\ncolor(\"saddlebrown\") difference() {\n    // Outer frame\n    translate([0, 0, 3.5])\n    cube([47, 82, 3], center = true);\n    \n    // Inner cutout\n    translate([0, 0, 2])\n    cube([43, 78, 5], center = true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "pilum",
    "openscad_code": "// Roman Pilum - Medium Complexity Historical Artifact\n// 3D printable model with realistic proportions\n\n$fn = 64;\n\n// Main pilum module\nmodule pilum() {\n    // Iron shaft with pyramidal tip\n    color(\"silver\") {\n        // Pyramidal head\n        translate([0, 0, 45])\n            rotate([0, 0, 45])\n            pyramid_head();\n        \n        // Main iron shaft\n        translate([0, 0, 0])\n            cylinder(h=45, d1=3, d2=2.5);\n        \n        // Shaft reinforcement ring\n        translate([0, 0, 38])\n            cylinder(h=3, d=4);\n    }\n    \n    // Wooden shaft socket\n    color(\"saddlebrown\") {\n        translate([0, 0, -30])\n            cylinder(h=30, d1=4, d2=3, $fn=8);\n    }\n    \n    // Bronze ferrule at base\n    color(\"bronze\") {\n        translate([0, 0, -31])\n            cylinder(h=4, d=5, $fn=8);\n    }\n    \n    // Socket rivets (3 evenly spaced)\n    color(\"silver\") {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([2.2, 0, -25])\n                    cylinder(h=6, d=0.8);\n        }\n    }\n    \n    // Decorative grip rings\n    color(\"bronze\") {\n        for(pos = [-20, -15, -10]) {\n            translate([0, 0, pos])\n                cylinder(h=1.5, d=4.5);\n        }\n    }\n    \n    // Weighted counterbalance\n    color(\"silver\") {\n        translate([0, 0, -35])\n            sphere(d=5);\n    }\n}\n\n// Pyramidal head module\nmodule pyramid_head() {\n    difference() {\n        // Main pyramid\n        linear_extrude(height=15, scale=0.01)\n            square([3, 3], center=true);\n            \n        // Hollow core for weight reduction\n        translate([0, 0, 0])\n            linear_extrude(height=15, scale=0.01)\n                square([2.5, 2.5], center=true);\n    }\n}\n\n// Scale to reasonable 3D print size (80mm total length)\nscale([1, 1, 1]) {\n    pilum();\n}",
    "renders": true
  },
  {
    "historical_artifact": "kopis",
    "openscad_code": "// Kopis Sword - Historical Greek Artifact\n// 3D printable model with realistic features\n\n// Color definitions\nblade_color = [0.7, 0.7, 0.8];  // Steel\nhandle_color = [0.4, 0.3, 0.2]; // Dark wood\nguard_color = [0.6, 0.5, 0.4];  // Bronze\n\n// Overall dimensions\nblade_length = 65;\nblade_width = 28;\nhandle_length = 20;\nguard_width = 12;\ntotal_length = blade_length + handle_length;\n\nmodule kopis() {\n    // Main blade with forward curve\n    color(blade_color) {\n        // Blade body - curved forward\n        translate([0, 0, 2]) {\n            difference() {\n                // Main blade shape\n                hull() {\n                    translate([-blade_length/2, 0, 0]) \n                        cube([blade_length, blade_width, 4], center=true);\n                    translate([blade_length/2 - 10, 0, 0]) \n                        cube([20, blade_width/3, 4], center=true);\n                }\n                \n                // Fuller groove\n                translate([0, 0, 1]) {\n                    for(i = [-20:10:20]) {\n                        rotate([0, 0, 5]) \n                            translate([i, 0, -1]) \n                                cylinder(h=6, r=1.5, $fn=8);\n                    }\n                }\n                \n                // Edge bevel\n                translate([blade_length/2 - 15, blade_width/2 - 8, 0])\n                    cube([30, 8, 6], center=true);\n            }\n        }\n        \n        // Tip curve\n        translate([blade_length/2 - 8, 0, 2]) {\n            rotate([0, 0, -45])\n                cylinder(h=8, r1=3, r2=0, $fn=8);\n        }\n    }\n    \n    // Guard\n    color(guard_color) {\n        translate([-blade_length/2 - 5, 0, 0]) {\n            difference() {\n                // Main guard shape\n                hull() {\n                    cube([guard_width, blade_width/1.5, 6], center=true);\n                    translate([-guard_width/2, 0, 0])\n                        cube([guard_width/2, blade_width/1.3, 6], center=true);\n                }\n                \n                // Central hole\n                translate([-guard_width/2 - 2, 0, 0])\n                    cylinder(h=8, r=3, center=true);\n            }\n        }\n    }\n    \n    // Handle\n    color(handle_color) {\n        translate([-blade_length/2 - handle_length/2 - 5, 0, 0]) {\n            // Handle grip\n            difference() {\n                cylinder(h=handle_length, r=4, center=true, $fn=8);\n                \n                // Grip grooves\n                for(i = [-handle_length/2 + 2:3:handle_length/2 - 2]) {\n                    translate([0, 0, i])\n                        cylinder(h=1, r=3.5, center=true, $fn=8);\n                }\n            }\n            \n            // Pommel\n            translate([0, 0, -handle_length/2 - 4]) {\n                cylinder(h=8, r1=3, r2=5, $fn=16);\n                \n                // Decorative ring\n                translate([0, 0, -2])\n                    cylinder(h=2, r=5.5, r1=5.5, $fn=32);\n            }\n        }\n    }\n    \n    // Decorative inscriptions on blade\n    color([0.5, 0.5, 0.6]) {\n        translate([0, blade_width/4, 2.5]) {\n            rotate([0, 0, 5]) {\n                for(i = [0:3]) {\n                    translate([-blade_length/3 + i*8, 0, 0])\n                        cube([1, 0.5, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Render the kopis\nkopis();",
    "renders": true
  },
  {
    "historical_artifact": "xiphos",
    "openscad_code": "// Greek Xiphos - Iron Age short sword\n// Historically accurate medium-complexity model\n\n// Xiphos dimensions (mm)\nblade_len = 70;\nblade_width = 20;\nhandle_len = 35;\nguard_width = 30;\npommel_d = 12;\n\n// Blade module with leaf shape\nmodule leaf_blade() {\n    // Blade tapering towards tip\n    hull() {\n        // Base section\n        translate([0, 0, -1])\n            scale([1, 1, 2])\n                cylinder(h=2, d1=blade_width, d2=blade_width-2, $fn=4);\n        \n        // Mid section\n        translate([blade_len/3, 0, 0])\n            scale([1, 1, 1.8])\n                cylinder(h=2, d1=blade_width-4, d2=blade_width-6, $fn=4);\n        \n        // Tip section\n        translate([blade_len-2, 0, 0])\n            cylinder(h=2, d1=blade_width-8, d2=1, $fn=3);\n    }\n    \n    // Fullers (blood grooves)\n    for(i = [0:1]) {\n        translate([blade_len/2 + i*15, 0, 1])\n            rotate([90, 0, 0])\n                cylinder(h=blade_len/2, d=2, $fn=6);\n    }\n}\n\n// Guard with decorative elements\nmodule guard() {\n    difference() {\n        // Main guard\n        translate([-3, 0, 0])\n            cube([6, guard_width, 8]);\n        \n        // Decorative cutouts\n        for(i = [-1:1]) {\n            translate([0, i*8, 2])\n                cylinder(h=9, d=4, $fn=6);\n        }\n        \n        // Central hole\n        translate([0, 0, -1])\n            cylinder(h=10, d=6, $fn=20);\n    }\n}\n\n// Handle with spiral wrap\nmodule handle() {\n    // Core\n    color(\"saddlebrown\")\n    cylinder(h=handle_len, d=10, $fn=8);\n    \n    // Leather wrap rings\n    color(\"darkgoldenrod\")\n    for(i = [2:4:handle_len-6]) {\n        translate([0, 0, i])\n            cylinder(h=2, d=11, $fn=20);\n    }\n    \n    // Rivets\n    color(\"darkgoldenrod\")\n    for(i = [1:3]) {\n        rotate([0, 0, i*120])\n            translate([5, 0, handle_len/2])\n                cylinder(h=10, d=2, $fn=6);\n    }\n}\n\n// Pommel with typical xiphos shape\nmodule pommel() {\n    // Main pommel\n    color(\"saddlebrown\")\n    difference() {\n        sphere(d=pommel_d, $fn=20);\n        // Flattened sides\n        translate([0, 0, -pommel_d/2])\n            cube([pommel_d, pommel_d, pommel_d], center=true);\n    }\n    \n    // Decorative cap\n    color(\"goldenrod\")\n    translate([0, 0, pommel_d/2])\n        cylinder(h=2, d=pommel_d-2, $fn=20);\n}\n\n// Assembly\nmodule xiphos() {\n    // Blade\n    color(\"silver\")\n    translate([0, 0, 4])\n        leaf_blade();\n    \n    // Guard\n    color(\"goldenrod\")\n    translate([-3, 0, 0])\n        guard();\n    \n    // Handle\n    translate([0, 0, -handle_len])\n        handle();\n    \n    // Pommel\n    translate([0, 0, -handle_len-2])\n        pommel();\n}\n\n// Render the complete xiphos\nxiphos();",
    "renders": true
  },
  {
    "historical_artifact": "dory",
    "openscad_code": "// Historical Dory - Bronze Age Greek Fishing Vessel\n// Scale: 1:50, Length: 90mm, Width: 20mm, Height: 12mm\n// Based on 8th century BCE Mediterranean fishing dory\n\n$fn = 32;\n\n// Main hull with characteristic pointed bow and flat stern\nmodule hull() {\n    color(\"burlywood\") difference() {\n        // Main hull body - elongated with tapered ends\n        hull_shape();\n        \n        // Interior cavity for hollow printing\n        translate([0, 0, 2]) scale([0.85, 0.85, 0.8]) hull_shape();\n    }\n}\n\n// Basic hull form\nmodule hull_shape() {\n    hull_points = [\n        [0, 0], [10, 8], [25, 12], [45, 15], \n        [70, 15], [85, 12], [90, 8], [90, 0]\n    ];\n    \n    linear_extrude(height = 12, convexity = 10) {\n        polygon(points = hull_points);\n    }\n}\n\n// Decorative sternpost with traditional spiral carving\nmodule sternpost() {\n    color(\"burlywood\") union() {\n        // Main sternpost\n        translate([88, 7.5, 8]) rotate([0, 90, 0]) \n            cylinder(h = 4, d1 = 3, d2 = 2);\n        \n        // Spiral decoration\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) \n                translate([88.5, 7.5, 10 - i*0.5]) \n                    cylinder(h = 0.5, d = 1.5);\n        }\n    }\n}\n\n// Rowing benches with traditional cross-bracing\nmodule benches() {\n    color(\"saddlebrown\") \n    for (pos = [25, 45, 65]) {\n        translate([pos, 0, 10]) cube([8, 18, 1]);\n        // Support struts\n        translate([pos + 2, 8, 9]) cube([1, 1, 1]);\n        translate([pos + 2, -9, 9]) cube([1, 1, 1]);\n    }\n}\n\n// Bronze age oars with carved handles\nmodule oars() {\n    color(\"goldenrod\") \n    for (i = [0:3]) {\n        // Port oars\n        translate([20 + i*15, 10, 9]) rotate([0, 0, -45]) {\n            cylinder(h = 12, d = 0.8);\n            translate([0, 12, 0]) sphere(d = 1.2);\n        }\n        // Starboard oars\n        translate([20 + i*15, -10, 9]) rotate([0, 0, 45]) {\n            cylinder(h = 12, d = 0.8);\n            translate([0, -12, 0]) sphere(d = 1.2);\n        }\n    }\n}\n\n// Bronze eye of protection on bow\nmodule protective_eye() {\n    color(\"gold\") difference() {\n        translate([3, 7.5, 10]) sphere(d = 2.5);\n        translate([3, 7.5, 11]) sphere(d = 1.5);\n    }\n    color(\"black\") translate([3, 7.5, 11.5]) sphere(d = 0.8);\n}\n\n// Fishing net storage at stern\nmodule net_storage() {\n    color(\"tan\") {\n        // Net bundle\n        translate([82, 0, 10.5]) sphere(d = 4);\n        \n        // Binding ropes\n        for (i = [-1, 1]) {\n            translate([82, i*1.5, 10.5]) rotate([90, 0, 0]) \n                cylinder(h = 3, d = 0.3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    sternpost();\n    benches();\n    oars();\n    protective_eye();\n    net_storage();\n    \n    // Waterline marking (painted)\n    color(\"saddlebrown\") \n    translate([45, 0, 2]) cube([90, 20, 0.5]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "hoplite",
    "openscad_code": "// Hoplite Shield (Aspis) - Historical Greek Artifact\n// Medium complexity realistic model for 3D printing\n\n$fn = 32;\n\n// Shield parameters\nshield_diameter = 80;\nshield_thickness = 6;\nboss_diameter = 30;\nboss_height = 12;\nrim_width = 4;\n\n// Colors\nbronze_color = [0.72, 0.53, 0.04];\nleather_color = [0.45, 0.32, 0.18];\n\n// Main shield body\nmodule shield_body() {\n    difference() {\n        // Main circular shield\n        color(bronze_color)\n        cylinder(h=shield_thickness, d=shield_diameter, center=true);\n        \n        // Central boss hole\n        translate([0, 0, shield_thickness/2])\n        cylinder(h=shield_thickness+1, d=boss_diameter+8, center=true);\n    }\n}\n\n// Central boss (umbo)\nmodule shield_boss() {\n    difference() {\n        // Main boss dome\n        color(bronze_color)\n        translate([0, 0, shield_thickness/2 + boss_height/2])\n        scale([1, 1, 0.8])\n        sphere(d=boss_diameter);\n        \n        // Inner cutout for hand grip\n        translate([0, 0, shield_thickness/2 + boss_height/2])\n        sphere(d=boss_diameter-12);\n    }\n}\n\n// Decorative bronze rim\nmodule shield_rim() {\n    color(bronze_color)\n    difference() {\n        cylinder(h=shield_thickness+2, d=shield_diameter, center=true);\n        cylinder(h=shield_thickness+3, d=shield_diameter-rim_width*2, center=true);\n    }\n}\n\n// Leather hand grip on back\nmodule hand_grip() {\n    color(leather_color)\n    translate([0, -15, -shield_thickness/2])\n    rotate([90, 0, 0])\n    cylinder(h=25, d=8, center=true);\n}\n\n// Decorative bronze studs around boss\nmodule decorative_studs() {\n    color(bronze_color)\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([boss_diameter/2 + 8, 0, shield_thickness/2])\n        cylinder(h=2, d=4, center=true);\n    }\n}\n\n// Back reinforcement strips\nmodule back_strips() {\n    color(leather_color)\n    for(i = [0:1]) {\n        rotate([0, 0, i * 90])\n        translate([0, 0, -shield_thickness/2])\n        cube([shield_diameter-10, 6, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main shield components\n    shield_body();\n    shield_rim();\n    shield_boss();\n    \n    // Decorative elements\n    decorative_studs();\n    \n    // Back side components\n    hand_grip();\n    back_strips();\n}",
    "renders": true
  },
  {
    "historical_artifact": "cuirass",
    "openscad_code": "// Ancient Greek Bronze Muscle Cuirass (Medium Complexity)\n// 5th Century BC Hoplite Armor - 3D Printable Model\n\n$fa = 1;\n$fs = 0.5;\n\n// Main color - antiqued bronze\ncolor([0.72, 0.52, 0.35]) {\n    // Main torso section\n    difference() {\n        // Front torso plate\n        union() {\n            // Chest muscle definition\n            translate([0, 0, 25]) {\n                scale([1, 1.2, 0.8]) {\n                    sphere(25);\n                }\n            }\n            \n            // Abdomen section\n            translate([0, 0, 5]) {\n                cube([50, 60, 20], center = true);\n            }\n            \n            // Lower edge flare\n            translate([0, 0, -10]) {\n                cylinder(h = 5, r1 = 30, r2 = 35);\n            }\n        }\n        \n        // Neck hole\n        translate([0, 20, 25]) {\n            cylinder(h = 40, r = 8);\n        }\n        \n        // Arm holes\n        translate([25, 0, 15]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 30, r = 10);\n            }\n        }\n        mirror([1, 0, 0]) {\n            translate([25, 0, 15]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 30, r = 10);\n                }\n            }\n        }\n        \n        // Sculpted muscle grooves\n        for (i = [0:1]) {\n            translate([i == 0 ? 8 : -8, 5, 30]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 15, r = 3);\n                }\n            }\n        }\n        \n        // Abdominal grooves\n        for (i = [0:2]) {\n            translate([0, -10 + i * 10, 10]) {\n                cube([40, 1, 15], center = true);\n            }\n        }\n    }\n    \n    // Decorative pectoral ridge\n    translate([0, 15, 35]) {\n        scale([1, 0.3, 0.2]) {\n            sphere(20);\n        }\n    }\n    \n    // Side hinges (simplified)\n    module hinge(x) {\n        translate([x, -25, 15]) {\n            union() {\n                cylinder(h = 5, r = 4);\n                translate([0, 0, 5]) {\n                    sphere(4);\n                }\n            }\n        }\n    }\n    \n    hinge(30);\n    hinge(-30);\n    \n    // Decorative border pattern\n    color([0.65, 0.45, 0.28]) {\n        for (i = [0:35:360]) {\n            rotate([0, 0, i]) {\n                translate([0, -30, 0]) {\n                    sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Back plate (simplified)\n    translate([0, 0, -45]) {\n        difference() {\n            scale([0.9, 1, 0.6]) {\n                sphere(30);\n            }\n            \n            // Back neck hole\n            translate([0, 20, 10]) {\n                cylinder(h = 20, r = 8);\n            }\n        }\n    }\n    \n    // Lower tassets (hip guards)\n    module tasset(x) {\n        translate([x, -40, -15]) {\n            difference() {\n                cube([15, 20, 3]);\n                translate([0, -1, -1]) {\n                    cube([17, 2, 5]);\n                }\n            }\n        }\n    }\n    \n    tasset(15);\n    tasset(-15);\n    \n    // Central decorative boss\n    color([0.55, 0.35, 0.18]) {\n        translate([0, 5, 30]) {\n            cylinder(h = 3, r = 6);\n            translate([0, 0, 3]) {\n                sphere(6);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "greaves",
    "openscad_code": "// Historical Bronze Greaves (Ancient Greek)\n// Medium complexity realistic model with decorative elements\n\n$fn = 64;\n\n// Main color - aged bronze\ncolor([0.65, 0.45, 0.25]) difference() {\n    union() {\n        // Main shin guard body\n        difference() {\n            // Outer curved shell\n            translate([0, -15, 0])\n                scale([1, 0.6, 1.2])\n                rotate([0, 90, 0])\n                cylinder(h = 60, r1 = 25, r2 = 22);\n            \n            // Inner cavity for leg\n            translate([0, -15, 5])\n                scale([0.9, 0.5, 1.1])\n                rotate([0, 90, 0])\n                cylinder(h = 55, r1 = 23, r2 = 20);\n        }\n        \n        // Knee cap protection\n        translate([0, 45, 15])\n            rotate([90, 0, 0])\n            scale([1.2, 1.5, 0.8])\n            sphere(10);\n        \n        // Ankle flare\n        translate([0, -40, -5])\n            rotate([0, 90, 0])\n            scale([1.1, 0.7, 1])\n            cylinder(h = 15, r1 = 25, r2 = 28);\n    }\n    \n    // Ventilation holes\n    for (i = [0:5]) {\n        rotate([0, i * 30 - 75, 0])\n            translate([0, -10, 25])\n            rotate([0, 90, 0])\n            cylinder(h = 30, r = 2);\n    }\n}\n\n// Decorative ridge\ncolor([0.7, 0.5, 0.3]) union() {\n    for (y = [-30:15:30]) {\n        translate([0, y, 25])\n            rotate([90, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h = 5, r = 20);\n    }\n}\n\n// Greek key pattern borders\ncolor([0.6, 0.4, 0.2]) module greek_key() {\n    for (i = [0:3]) {\n        translate([i * 4, 0, 0])\n            cube([3, 2, 1]);\n        translate([i * 4 + 2, 2, 0])\n            cube([2, 3, 1]);\n    }\n}\n\n// Apply Greek key pattern to top and bottom edges\nfor (angle = [-45, 135]) {\n    rotate([0, 0, angle])\n        translate([0, 45, 30])\n            rotate([0, 90, 0])\n            scale([0.5, 0.5, 1])\n            greek_key();\n    \n    rotate([0, 0, angle])\n        translate([0, -45, -5])\n            rotate([0, 90, 0])\n            scale([0.5, 0.5, 1])\n            greek_key();\n}\n\n// Fastening rings\ncolor([0.5, 0.35, 0.2]) for (z = [-20:20:20]) {\n    translate([15, z, 20])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r = 4);\n    translate([15, z, 20])\n        rotate([90, 0, 0])\n        cylinder(h = 7, r = 2);\n    \n    mirror([1, 0, 0]) {\n        translate([15, z, 20])\n            rotate([90, 0, 0])\n            cylinder(h = 3, r = 4);\n        translate([15, z, 20])\n            rotate([90, 0, 0])\n            cylinder(h = 7, r = 2);\n    }\n}\n\n// Decorative studs\ncolor([0.75, 0.55, 0.3]) for (y = [-25:10:25]) {\n    for (x = [-8:8:8]) {\n        translate([x, y, 25 + abs(x) * 0.5])\n            sphere(1.5);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "vambraces",
    "openscad_code": "// Medieval Gothic Vambrace\n// A realistic representation of 14th century plate armor forearm protection\n\n// Overall dimensions (in mm)\nlength = 85;\nwidth = 45;\nheight = 35;\nwall = 2.5;\n\n// Main curved plate body\nmodule main_plate() {\n    difference() {\n        // Outer shell\n        translate([0, -width/2, 0])\n            scale([1, 0.6, 1])\n                cylinder(h = length, r = width/2, $fn = 64);\n        \n        // Inner cavity\n        translate([0, -width/2, wall])\n            scale([1, 0.6, 1])\n                cylinder(h = length, r = width/2 - wall, $fn = 64);\n        \n        // Cut to make it a half-cylinder\n        translate([0, 0, -height/2])\n            cube([length*2, width*2, height], center = true);\n    }\n}\n\n// Decorative ridges along the length\nmodule ridges() {\n    for(i = [10:15:length-10]) {\n        color(\"silver\")\n        translate([i, -width/2 + 3, -1])\n            rotate([90, 0, 0])\n                cylinder(h = width - 6, r = 1.2, $fn = 16);\n    }\n}\n\n// Rivet details\nmodule rivets() {\n    // Edge rivets\n    for(i = [5:10:length-5]) {\n        color(\"dimgray\")\n        translate([i, -width/2 + 2, 2])\n            sphere(r = 1.5, $fn = 12);\n        translate([i, width/2 - 2, 2])\n            sphere(r = 1.5, $fn = 12);\n    }\n}\n\n// Central decorative plate with heraldic design\nmodule central_plate() {\n    color(\"silver\")\n    translate([length/2, 0, 0])\n        difference() {\n            // Base plate\n            translate([0, 0, 1])\n                cube([20, 30, 1.5], center = true);\n            \n            // Heraldic cross cutout\n            translate([0, -5, 0.5])\n                cube([2, 10, 3], center = true);\n            translate([-5, 0, 0.5])\n                cube([10, 2, 3], center = true);\n        }\n}\n\n// Leather strap attachment points\nmodule strap_loops() {\n    for(pos = [25, 60]) {\n        color(\"dimgray\")\n        translate([pos, -width/2 - 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = 2, $fn = 16);\n    }\n}\n\n// Elbow cop attachment hinge\nmodule elbow_hinge() {\n    color(\"silver\")\n    translate([-2, 0, -5])\n    union() {\n        // Hinge barrel\n        rotate([90, 0, 0])\n            cylinder(h = 8, r = 3, $fn = 16);\n        \n        // Attachment plates\n        for(side = [-1, 1]) {\n            translate([0, side * 4, -3])\n                cube([4, 2, 6]);\n        }\n    }\n}\n\n// Wrist flare for mobility\nmodule wrist_flare() {\n    color(\"silver\")\n    translate([length + 2, 0, 0])\n        difference() {\n            // Flared section\n            scale([0.8, 1.2, 1])\n                cylinder(h = 10, r = width/2 - 2, $fn = 32);\n            \n            // Inner cavity\n            translate([0, 0, wall])\n                scale([0.8, 1.2, 1])\n                    cylinder(h = 10, r = width/2 - wall - 2, $fn = 32);\n        }\n}\n\n// Assembly\nrotate([0, -15, 0])\ntranslate([0, 0, height/2])\nunion() {\n    color(\"silver\") main_plate();\n    ridges();\n    rivets();\n    central_plate();\n    strap_loops();\n    elbow_hinge();\n    wrist_flare();\n}",
    "renders": true
  },
  {
    "historical_artifact": "falcata",
    "openscad_code": "// Falcata - Iberian Iron Age sword (4th-1st century BC)\n// Realistic style, medium complexity, 3D printable\n\n// Global settings\n$fn = 50;\nblade_length = 75;\nblade_width = 25;\nblade_thickness = 3;\nhandle_length = 60;\nhandle_thickness = 12;\n\n// Main assembly\nmodule falcata() {\n    color(\"silver\") {\n        union() {\n            // Curved single-edged blade\n            blade();\n            \n            // Reinforced spine with decorative ridge\n            blade_spine();\n            \n            // Hooked grip with horse-head pommel\n            handle();\n            \n            // Decorative inlay on blade\n            blade_inlay();\n        }\n    }\n}\n\n// Curved blade with single cutting edge\nmodule blade() {\n    // Main blade body - curved forward\n    translate([0, 0, blade_thickness/2])\n    rotate([0, 0, -15])\n    linear_extrude(height=blade_thickness, convexity=10)\n    polygon(points=[\n        [0, 0],                    // Hilt junction\n        [blade_length * 0.3, blade_width * 0.8],   // Mid curve\n        [blade_length * 0.7, blade_width * 0.9],   // Widest point\n        [blade_length, blade_width * 0.3],         // Tip\n        [blade_length * 0.9, 0],                   // Back edge to tip\n        [blade_length * 0.5, -blade_width * 0.2],  // Concave back\n        [blade_length * 0.2, -blade_width * 0.1],  // Back to hilt\n        [0, 0]\n    ]);\n    \n    // Blade bevel for cutting edge\n    translate([0, 0, blade_thickness/2])\n    rotate([0, 0, -15])\n    linear_extrude(height=blade_thickness * 0.5, convexity=10)\n    offset(r=-1)\n    polygon(points=[\n        [blade_length * 0.3, blade_width * 0.8],\n        [blade_length * 0.7, blade_width * 0.9],\n        [blade_length, blade_width * 0.3],\n        [blade_length * 0.95, blade_width * 0.25]\n    ]);\n}\n\n// Reinforced spine ridge\nmodule blade_spine() {\n    color(\"gray\") {\n        translate([blade_length * 0.3, -blade_width * 0.1, blade_thickness])\n        rotate([0, 10, -15])\n        scale([1, 0.3, 0.3])\n        cylinder(h=blade_length * 0.6, r1=3, r2=1);\n        \n        // Decorative spine notches\n        for(i = [1:3]) {\n            translate([blade_length * (0.4 + i * 0.15), -blade_width * 0.1, blade_thickness + 1])\n            rotate([0, 10, -15])\n            cube([2, 4, 1], center=true);\n        }\n    }\n}\n\n// Horse-head pommel handle\nmodule handle() {\n    // Main grip\n    translate([-handle_length * 0.3, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=handle_length, r=handle_thickness/2, center=true);\n    \n    // Hooked grip extension\n    translate([-handle_length * 0.7, handle_thickness * 0.8, 0])\n    rotate([0, 90, 30])\n    scale([1, 1, 0.8])\n    cylinder(h=handle_length * 0.4, r=handle_thickness/2 * 0.8);\n    \n    // Horse head pommel detail\n    color(\"bronze\") {\n        translate([-handle_length * 0.85, handle_thickness * 1.2, 0])\n        scale([1.2, 1.5, 1])\n        sphere(r=handle_thickness/2 * 0.8);\n        \n        // Horse ears\n        translate([-handle_length * 0.85, handle_thickness * 1.6, handle_thickness/2 * 0.5])\n        rotate([30, 0, 0])\n        cylinder(h=3, r=1);\n        \n        translate([-handle_length * 0.85, handle_thickness * 1.6, -handle_thickness/2 * 0.5])\n        rotate([-30, 0, 0])\n        cylinder(h=3, r=1);\n    }\n    \n    // Grip wrapping rings\n    color(\"bronze\") {\n        for(i = [0.2:0.2:0.8]) {\n            translate([-handle_length * i, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=2, r=handle_thickness/2 + 1);\n        }\n    }\n}\n\n// Decorative inlay pattern\nmodule blade_inlay() {\n    color(\"bronze\") {\n        // Central inlay line\n        translate([blade_length * 0.5, blade_width * 0.3, blade_thickness + 0.1])\n        rotate([0, 0, -15])\n        linear_extrude(height=0.5)\n        polygon(points=[\n            [0, 0],\n            [blade_length * 0.3, 0],\n            [blade_length * 0.25, 1],\n            [-blade_length * 0.05, 1]\n        ]);\n        \n        // Decorative circles\n        for(pos = [[blade_length * 0.4, blade_width * 0.5], \n                   [blade_length * 0.6, blade_width * 0.6]]) {\n            translate([pos[0], pos[1], blade_thickness + 0.1])\n            cylinder(h=0.5, r=2);\n        }\n    }\n}\n\n// Generate the complete falcata\nfalcata();",
    "renders": true
  },
  {
    "historical_artifact": "spatha",
    "openscad_code": "// Spatha - Roman long sword (3rd-4th century AD)\n// Medium complexity realistic model for 3D printing\n\nblade_length = 80;\nblade_width = 8;\nblade_thickness = 2;\ngrip_length = 25;\nguard_width = 15;\npommel_diameter = 12;\n\nmodule spatha() {\n    color(\"silver\") {\n        // Main blade\n        translate([0, 0, 0])\n            linear_extrude(height=blade_thickness, center=true)\n                polygon([\n                    [-blade_length/2, 0],\n                    [blade_length/2 - 5, 0],\n                    [blade_length/2, blade_width/2],\n                    [blade_length/2 - 10, blade_width/2],\n                    [-blade_length/2 + 10, blade_width/2 - 2],\n                    [-blade_length/2 + 5, blade_width/2 - 2]\n                ]);\n        \n        // Fullers (grooves on blade)\n        translate([blade_length/4, 0, blade_thickness/2 + 0.1])\n            linear_extrude(height=0.5, center=true)\n                polygon([\n                    [-blade_length/4, -blade_width/4],\n                    [blade_length/4, -blade_width/4],\n                    [blade_length/4, blade_width/4],\n                    [-blade_length/4, blade_width/4]\n                ]);\n    }\n    \n    color(\"bronze\") {\n        // Guard\n        translate([-blade_length/2 - 2, 0, 0])\n            difference() {\n                cube([4, guard_width, blade_thickness + 2], center=true);\n                // Decorative cutouts in guard\n                for(i = [-1:1]) {\n                    translate([0, i * 4, 0])\n                        cylinder(h=5, r=1.5, center=true);\n                }\n            }\n        \n        // Grip\n        translate([-blade_length/2 - 2 - grip_length/2, 0, 0])\n            difference() {\n                cube([grip_length, 6, 5], center=true);\n                // Grip texture rings\n                for(i = [0:4]) {\n                    translate([-blade_length/2 - 4 - grip_length/2 + i * 5, 0, 2.6])\n                        rotate([90, 0, 0])\n                            cylinder(h=6.2, r=0.5, center=true);\n                }\n            }\n        \n        // Pommel\n        translate([-blade_length/2 - 2 - grip_length - 3, 0, 0])\n            difference() {\n                sphere(d=pommel_diameter);\n                // Decorative pommel disk\n                translate([0, 0, -pommel_diameter/2 - 0.1])\n                    cylinder(h=2, r=pommel_diameter/2 - 2);\n            }\n    }\n}\n\n// Assembly\nrotate([0, 90, 0]) {\n    spatha();\n}\n\n// Printing support base (removable)\ncolor(\"gray\") {\n    translate([0, 0, -2])\n        cube([100, 20, 2], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "targe",
    "openscad_code": "// Scottish Highland Targe (Historical Shield)\n// Traditional 17th-18th century circular shield with brass boss and Celtic decorations\n\n// Main dimensions\ntarge_diameter = 80;\ntarge_thickness = 8;\nboss_diameter = 25;\nboss_height = 12;\nhandle_clearance = 30;\n\n// Targe body module\nmodule targe_body() {\n    difference() {\n        // Main wooden disc\n        color(\"burlywood\") \n        cylinder(h=targe_thickness, d=targe_diameter, $fn=64);\n        \n        // Central hole for boss\n        translate([0, 0, -1])\n        cylinder(h=targe_thickness+2, d=boss_diameter-4, $fn=32);\n        \n        // Rear handle slot\n        translate([0, -handle_clearance/2, targe_thickness-3])\n        cube([8, handle_clearance, 4], center=true);\n    }\n}\n\n// Brass central boss with studs\nmodule central_boss() {\n    // Main boss dome\n    color(\"goldenrod\") {\n        translate([0, 0, targe_thickness])\n        cylinder(h=boss_height-2, d=boss_diameter, $fn=32);\n        \n        translate([0, 0, targe_thickness+boss_height-2])\n        sphere(d=boss_diameter, $fn=32);\n        \n        // Decorative studs around boss\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n            translate([boss_diameter/2 + 5, 0, targe_thickness-0.5])\n            cylinder(h=1.5, d=3, $fn=16);\n        }\n    }\n}\n\n// Celtic interlace pattern on face\nmodule celtic_pattern() {\n    color(\"saddlebrown\") {\n        // Concentric rings\n        for(r=[30:10:70]) {\n            rotate_extrude(angle=360, $fn=64)\n            translate([r, 0, 0])\n            square([1.5, targe_thickness/2]);\n        }\n        \n        // Radial dividers\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5])\n            translate([0, -targe_diameter/2, targe_thickness/2])\n            cube([2, targe_diameter, targe_thickness]);\n        }\n    }\n}\n\n// Rear grip handle\nmodule grip_handle() {\n    color(\"burlywood\") {\n        // Handle bar\n        translate([0, -handle_clearance/2, targe_thickness-6])\n        rotate([90, 0, 0])\n        cylinder(h=handle_clearance-5, d=8, $fn=16);\n        \n        // Handle supports\n        translate([0, -handle_clearance/2+5, targe_thickness-6])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=12, $fn=16);\n        \n        translate([0, handle_clearance/2-5, targe_thickness-6])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=12, $fn=16);\n    }\n}\n\n// Leather edge binding\nmodule edge_binding() {\n    color(\"saddlebrown\") {\n        // Outer leather strip\n        difference() {\n            cylinder(h=targe_thickness+1, d=targe_diameter+4, $fn=64);\n            cylinder(h=targe_thickness+2, d=targe_diameter, $fn=64);\n        }\n        \n        // Decorative tacks\n    for(i=[0:23]) {\n        rotate([0, 0, i*15])\n        translate([targe_diameter/2+1, 0, targe_thickness/2])\n        color(\"goldenrod\")\n        cylinder(h=1.5, d=2, $fn=8);\n    }\n    }\n}\n\n// Assembly\ntarge_body();\ncentral_boss();\nceltic_pattern();\ngrip_handle();\nedge_binding();",
    "renders": true
  },
  {
    "historical_artifact": "pelta",
    "openscad_code": "// Pelta Shield - Thracian crescent-shaped shield (400-200 BCE)\n// Realistic medium complexity version for 3D printing\n\n$fn=64;\n\nmodule pelta_shield() {\n    // Main shield body - crescent shape\n    difference() {\n        // Outer crescent\n        linear_extrude(height=3) {\n            difference() {\n                // Large circle\n                circle(d=80);\n                // Cut inner circle offset to create crescent\n                translate([10,0,0]) circle(d=60);\n            }\n        }\n        \n        // Grip hole\n        translate([0,-5,0]) cylinder(h=4, d=20);\n    }\n    \n    // Reinforcement ridge around edge\n    translate([0,0,2.5]) {\n        difference() {\n            linear_extrude(height=1.5) {\n                offset(r=2) {\n                    difference() {\n                        circle(d=80);\n                        translate([10,0,0]) circle(d=60);\n                    }\n                }\n            }\n            linear_extrude(height=2) {\n                difference() {\n                    circle(d=78);\n                    translate([10,0,0]) circle(d=62);\n                }\n            }\n        }\n    }\n    \n    // Central spine reinforcement\n    translate([0,0,1.5]) {\n        rotate([90,0,0]) {\n            cylinder(h=30, d1=4, d2=2);\n            translate([0,30,0]) sphere(d=2);\n        }\n    }\n    \n    // Decorative bronze boss\n    translate([0,0,3]) {\n        color(\"bronze\") {\n            cylinder(h=2, d=12);\n            translate([0,0,2]) sphere(d=6);\n        }\n    }\n    \n    // Traditional geometric patterns - concentric arcs\n    for(i=[1:3]) {\n        color(\"darkgreen\") {\n            translate([0,0,1.5]) {\n                linear_extrude(height=0.5) {\n                    difference() {\n                        offset(r=i*3) {\n                            difference() {\n                                circle(d=80-i*6);\n                                translate([10,0,0]) circle(d=60+i*6);\n                            }\n                        }\n                        offset(r=i*3-1) {\n                            difference() {\n                                circle(d=80-i*6);\n                                translate([10,0,0]) circle(d=60+i*6);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Handle on back\n    translate([0,-5,-1]) {\n        rotate([90,0,0]) {\n            difference() {\n                // Handle bar\n                translate([0,-15,0]) cube([20,30,4], center=true);\n                // Grip space\n                translate([0,-15,0]) cube([16,26,5], center=true);\n            }\n        }\n    }\n    \n    // Decorative edge studs\n    for(angle=[-120:15:120]) {\n        translate([0,0,3]) {\n            rotate([0,0,angle]) {\n                translate([38,0,0]) {\n                    color(\"bronze\") cylinder(h=1, d=3);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\npelta_shield();",
    "renders": true
  },
  {
    "historical_artifact": "kopesh",
    "openscad_code": "// Kopesh - Ancient Egyptian Sickle Sword (circa 1550 BCE)\n// Realistic medium complexity model for 3D printing\n\n$fn = 64;\n\nmodule kopesh_sword() {\n    color(\"bronze\") {\n        // Main blade with characteristic sickle curve\n        union() {\n            // Blade base - straight section\n            translate([0, 5, 0])\n                difference() {\n                    cube([60, 10, 3], center = true);\n                    // Blade taper\n                    translate([20, 0, 0])\n                        scale([0.8, 1, 1])\n                        cube([40, 10, 3.2], center = true);\n                }\n            \n            // Curved sickle portion\n            translate([55, -15, 0])\n                rotate([0, 0, 45])\n                difference() {\n                    cylinder(h = 3, r = 35);\n                    translate([5, 5, -1])\n                        cube([40, 40, 5], center = true);\n                    // Inner curve\n                    translate([20, 20, -1])\n                        cylinder(h = 5, r = 20);\n                }\n            \n            // Blade tip\n            translate([75, -30, 0])\n                rotate([0, 0, 45])\n                scale([0.3, 1, 1])\n                cylinder(h = 3, r1 = 15, r2 = 0);\n        }\n        \n        // Reinforced spine\n        translate([-10, 0, 1.5])\n            difference() {\n                cube([85, 6, 1.5], center = true);\n                // Taper spine\n                translate([25, 0, 0])\n                    scale([0.7, 1, 1])\n                    cube([50, 6, 1.6], center = true);\n            }\n    }\n    \n    // Hilt and grip\n    color(\"darkgoldenrod\") {\n        // Hilt base\n        translate([-20, 0, 0])\n            union() {\n                // Main hilt block\n                cube([20, 12, 8], center = true);\n                \n                // Decorative pommel\n                translate([-12, 0, 0])\n                    sphere(d = 12);\n                \n                // Grip ridges\n                for(i = [-10:5:-5]) {\n                    translate([i, 0, 4])\n                        cube([3, 12, 1]);\n                }\n            }\n    }\n    \n    // Decorative elements\n    color(\"gold\") {\n        // Egyptian hieroglyphic patterns on blade\n        translate([30, -2, 1.6])\n            for(i = [0:3]) {\n                translate([i * 8, 0, 0])\n                    scale([0.5, 0.3, 1])\n                    sphere(d = 3);\n            }\n        \n        // Eye of Horus symbol on hilt\n        translate([-20, 0, 5])\n            union() {\n                scale([1.5, 1, 0.3])\n                sphere(d = 8);\n                translate([0, 0, 0.5])\n                    scale([0.7, 0.5, 1])\n                    cube([6, 4, 1], center = true);\n            }\n        \n        // Decorative rivets\n        translate([-15, 6, 0])\n            for(i = [0:1]) {\n                rotate([0, 90 * i, 0])\n                    translate([0, 0, 0])\n                        cylinder(h = 2, r = 1.5, center = true);\n            }\n    }\n    \n    // Blood groove (historical accuracy)\n    color(\"bronze\") {\n        translate([40, 0, -0.5])\n            difference() {\n                cube([30, 2, 1], center = true);\n                translate([0, 0, 0.5])\n                    scale([1, 0.7, 1])\n                    cube([30, 2, 1], center = true);\n            }\n    }\n}\n\n// Scale to appropriate 3D printing size (85mm total length)\nscale([0.85, 0.85, 0.85])\n    kopesh_sword();",
    "renders": true
  },
  {
    "historical_artifact": "khopesh",
    "openscad_code": "// Khopesh - Ancient Egyptian sickle-sword\n// Medium complexity, realistic style\n\n// Parameters\nblade_length = 75;\nblade_width = 12;\nhandle_length = 35;\nhandle_diameter = 8;\nthickness = 3;\n\n// Main module\nmodule khopesh() {\n    // Blade\n    union() {\n        // Straight portion of blade\n        translate([0, 0, thickness/2])\n            cube([blade_length*0.4, blade_width, thickness], center=true);\n        \n        // Curved sickle portion\n        difference() {\n            // Main curve\n            rotate([90, 0, 0])\n                translate([blade_length*0.2, 0, blade_width/2])\n                    cylinder(h=blade_length*0.6, r=blade_width/2, center=false);\n            \n            // Cut for sickle shape\n            rotate([90, 0, 0])\n                translate([blade_length*0.2, 0, blade_width/2 + 2])\n                    cylinder(h=blade_length*0.6, r=blade_width/2 - 3, center=false);\n            \n            // Remove back portion\n            translate([blade_length*0.2, 0, -blade_width])\n                cube([blade_length*0.6, blade_width*2, blade_width*4], center=true);\n        }\n        \n        // Blade tip\n        rotate([90, 0, 0])\n            translate([blade_length*0.2, 0, blade_width/2])\n                rotate([0, 0, 90])\n                    cylinder(h=blade_width, r=blade_width/2, center=true);\n    }\n    \n    // Handle grip\n    color(\"saddlebrown\")\n    translate([-blade_length*0.4 - handle_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=handle_length, r=handle_diameter/2, center=true);\n    \n    // Handle guard\n    color(\"goldenrod\")\n    translate([-blade_length*0.4 - handle_length/4, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=handle_diameter, r=handle_diameter*0.75, center=true);\n    \n    // Decorative pommel\n    color(\"goldenrod\")\n    translate([-blade_length*0.4 - handle_length - 5, 0, 0])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=10, r=handle_diameter*0.8, center=true);\n                cylinder(h=11, r=handle_diameter*0.4, center=true);\n            }\n    \n    // Decorative inscriptions on blade\n    color(\"goldenrod\")\n    for(i = [0:3]) {\n        translate([blade_length*0.6 - i*8, blade_width/4, thickness/2 + 0.1])\n            rotate([0, 0, 45])\n                cube([2, 2, 0.5], center=true);\n        translate([blade_length*0.6 - i*8 - 4, -blade_width/4, thickness/2 + 0.1])\n            rotate([0, 0, -45])\n                cube([2, 2, 0.5], center=true);\n    }\n    \n    // Blood groove (lightening channel)\n    difference() {\n        // Already in union above\n        translate([blade_length*0.2, 0, 0])\n            cube([blade_length*0.4, blade_width*0.3, thickness*1.2], center=true);\n    }\n}\n\n// Generate the khopesh\nkhopesh();",
    "renders": true
  },
  {
    "historical_artifact": "sica",
    "openscad_code": "// Historical Sica Dagger - Thracian/Illyrian curved weapon (3rd-1st century BCE)\n// Medium complexity model with realistic features\n\n// Overall dimensions: 180mm length, 25mm width, 8mm thickness\n\ncolor([0.6, 0.4, 0.2]) // Bronze blade color\ndifference() {\n    union() {\n        // Main blade - characteristic sickle shape\n        translate([0, 0, 2]) rotate([0, 0, -15]) {\n            difference() {\n                // Outer blade curve\n                hull() {\n                    cylinder(h=4, d=20, $fn=64);\n                    translate([0, 65, 0]) cylinder(h=4, d=15, $fn=64);\n                    translate([0, 130, 0]) cylinder(h=4, d=8, $fn=64);\n                }\n                \n                // Inner cutting edge curve\n                translate([0, -5, 0]) rotate([0, 0, 5]) {\n                    hull() {\n                        cylinder(h=6, d=18, $fn=64);\n                        translate([0, 70, 0]) cylinder(h=6, d=12, $fn=64);\n                        translate([0, 135, 0]) cylinder(h=6, d=6, $fn=64);\n                    }\n                }\n            }\n        }\n        \n        // Blade spine reinforcement\n        translate([-2, 20, 2]) rotate([0, 0, -15]) {\n            cube([4, 100, 3]);\n        }\n        \n        // Handle grip\n        color([0.3, 0.2, 0.1]) // Dark wood color\n        translate([0, -25, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=35, d=18, $fn=32);\n                \n                // Grip rings for better handling\n                for(i=[0:3]) {\n                    translate([0, 0, i*8+2]) {\n                        cylinder(h=2, d=20, $fn=32);\n                    }\n                }\n            }\n            \n            // Pommel\n            translate([0, 0, -5]) {\n                sphere(d=22, $fn=32);\n            }\n        }\n        \n        // Guard\n        color([0.5, 0.3, 0.1]) // Bronze guard\n        translate([0, 0, 0]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=8, d=25, $fn=64);\n                    cylinder(h=9, d=18, $fn=64);\n                }\n            }\n        }\n    }\n    \n    // Blood groove (fuller) on blade\n    translate([0, 30, 3]) rotate([0, 0, -15]) {\n        cube([2, 70, 1]);\n    }\n    \n    // Handle hole for hanging loop\n    translate([0, -40, 0]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=20, d=4, $fn=16);\n        }\n    }\n}\n\n// Decorative inscriptions on blade\nmodule inscription(text, x, y, z) {\n    translate([x, y, z]) rotate([0, 0, -15]) {\n        linear_extrude(height=0.5) {\n            text(text, size=3, font=\"Liberation Sans:style=Bold\");\n        }\n    }\n}\n\ncolor([0.1, 0.1, 0.1]) // Dark inscription\ninscription(\"SICA\", -8, 80, 3.5);\ninscription(\"THRA\", -8, 95, 3.5);",
    "renders": true
  },
  {
    "historical_artifact": "hasta",
    "openscad_code": "// Hasta - Roman infantry spear\n// Historically accurate Roman hasta with iron spearhead and wooden ash shaft\n// Designed for 3D printing at 1:20 scale (total length 150mm)\n\n// Color definitions\nwood_brown = [139/255, 90/255, 43/255];\niron_gray = [105/255, 105/255, 105/255];\nbrass_gold = [181/255, 166/255, 66/255];\n\n// Overall dimensions\ntotal_length = 150;\nshaft_length = 120;\nspearhead_length = 30;\nbutt_spike_length = 15;\n\n// Module for the iron spearhead\nmodule spearhead() {\n    color(iron_gray) {\n        union() {\n            // Main blade - leaf-shaped\n            translate([0, 0, -spearhead_length/2])\n                scale([1, 0.8, 1])\n                    cylinder(h=spearhead_length, r1=4, r2=0.5, $fn=8);\n            \n            // Reinforcement socket\n            translate([0, 0, spearhead_length/2 - 4])\n                cylinder(h=8, r1=2.5, r2=3, $fn=8);\n            \n            // Central ridge\n            translate([0, 0, -spearhead_length/2])\n                rotate([90, 0, 0])\n                    cube([0.8, spearhead_length, 2.5], center=true);\n            \n            // Side strengthening ribs\n            for(i = [0:1]) {\n                rotate([0, 0, i*180])\n                    translate([2.5, 0, 0])\n                        rotate([90, 0, 0])\n                            cube([0.5, spearhead_length-5, 1.5], center=true);\n            }\n        }\n    }\n}\n\n// Module for the wooden shaft with texture\nmodule shaft() {\n    color(wood_brown) {\n        difference() {\n            // Main shaft - slightly tapered\n            cylinder(h=shaft_length, r1=2.5, r2=2.2, $fn=16);\n            \n            // Wood grain texture - shallow grooves\n            for(i = [0:5:shaft_length-5]) {\n                translate([0, 0, i])\n                    rotate([0, 0, 45])\n                        cube([4.5, 0.2, 3], center=true);\n            }\n        }\n        \n        // Iron ferrule at top\n        color(iron_gray)\n            translate([0, 0, shaft_length/2 - 3])\n                cylinder(h=6, r=2.8, $fn=16);\n    }\n}\n\n// Module for the butt spike (ferrum)\nmodule butt_spike() {\n    color(iron_gray) {\n        union() {\n            // Main spike\n            translate([0, 0, shaft_length/2 + butt_spike_length/2])\n                cylinder(h=butt_spike_length, r1=2.2, r2=0.3, $fn=6);\n            \n            // Socket collar\n            translate([0, 0, shaft_length/2 + 2])\n                cylinder(h=4, r1=2.8, r2=2.5, $fn=16);\n            \n            // Decorative ring\n            color(brass_gold)\n                translate([0, 0, shaft_length/2])\n                    cylinder(h=1.5, r=3.2, $fn=32);\n        }\n    }\n}\n\n// Module for shaft binding reinforcement\nmodule shaft_bindings() {\n    color(brass_gold) {\n        // Binding at quarter points\n        for(pos = [shaft_length/4, -shaft_length/4]) {\n            translate([0, 0, pos])\n                cylinder(h=2, r=2.7, $fn=32);\n        }\n        \n        // Grip area binding\n        translate([0, 0, -shaft_length/2 + 15])\n            cylinder(h=8, r=2.7, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    // Assemble from bottom to top\n    butt_spike();\n    \n    shaft();\n    \n    shaft_bindings();\n    \n    translate([0, 0, shaft_length/2 + spearhead_length/2])\n        spearhead();\n}",
    "renders": true
  },
  {
    "historical_artifact": "lorica",
    "openscad_code": "// Lorica Segmentata - Roman segmented armor\n// Medium complexity historical artifact with realistic styling\n\n$fn = 32;\n\n// Main parameters\nscale_factor = 0.6;\ntorso_height = 70 * scale_factor;\ntorso_width = 40 * scale_factor;\ntorso_depth = 25 * scale_factor;\nplate_thickness = 2 * scale_factor;\n\n// Colors\nbronze_color = \"#B87333\";\nleather_color = \"#8B4513\";\niron_color = \"#36454F\";\n\nmodule lorica_segment() {\n    // Main torso plates\n    color(bronze_color) {\n        // Upper chest plate\n        translate([0, 0, torso_height * 0.8]) {\n            difference() {\n                cube([torso_width * 1.1, torso_depth * 1.2, plate_thickness], center = true);\n                // Decorative border cutout\n                translate([0, 0, -plate_thickness/2 - 0.1])\n                    cube([torso_width * 0.9, torso_depth * 1.0, plate_thickness + 0.2], center = true);\n            }\n        }\n        \n        // Middle plates with hinges\n        for (i = [0:3]) {\n            translate([0, 0, torso_height * (0.5 - i * 0.12)]) {\n                difference() {\n                    cube([torso_width * 1.05, torso_depth * 1.1, plate_thickness], center = true);\n                    // Hinge holes\n                    for (j = [-1, 1]) {\n                        translate([j * torso_width * 0.4, torso_depth * 0.55, 0])\n                            cylinder(h = plate_thickness + 0.2, r = 2 * scale_factor, center = true);\n                    }\n                }\n            }\n        }\n        \n        // Lower abdominal plates\n        for (i = [0:2]) {\n            translate([0, 0, torso_height * (0.1 - i * 0.08)]) {\n                cube([torso_width * 0.9, torso_depth * 0.9, plate_thickness], center = true);\n            }\n        }\n    }\n    \n    // Leather straps\n    color(leather_color) {\n        // Vertical back straps\n        for (i = [-1, 1]) {\n            translate([i * torso_width * 0.35, 0, torso_height * 0.4]) {\n                cube([3 * scale_factor, torso_depth * 0.8, torso_height * 0.6], center = true);\n            }\n        }\n        \n        // Horizontal belt\n        translate([0, torso_depth * 0.5, torso_height * 0.2]) {\n            rotate([90, 0, 0])\n                cylinder(h = torso_width * 1.2, r = 3 * scale_factor, center = true);\n        }\n    }\n    \n    // Decorative rivets\n    color(iron_color) {\n        for (i = [0:4]) {\n            translate([torso_width * 0.45, 0, torso_height * (0.7 - i * 0.15)]) {\n                sphere(r = 1.5 * scale_factor);\n            }\n            translate([-torso_width * 0.45, 0, torso_height * (0.7 - i * 0.15)]) {\n                sphere(r = 1.5 * scale_factor);\n            }\n        }\n    }\n    \n    // Shoulder guards\n    color(bronze_color) {\n        translate([torso_width * 0.45, 0, torso_height * 0.85]) {\n            rotate([0, -30, 45])\n                cube([20 * scale_factor, 15 * scale_factor, plate_thickness], center = true);\n        }\n        translate([-torso_width * 0.45, 0, torso_height * 0.85]) {\n            rotate([0, -30, -45])\n                cube([20 * scale_factor, 15 * scale_factor, plate_thickness], center = true);\n        }\n    }\n    \n    // Back plate details\n    color(bronze_color) {\n        translate([0, -torso_depth * 0.8, torso_height * 0.4]) {\n            difference() {\n                cube([torso_width * 1.1, plate_thickness, torso_height * 0.7], center = true);\n                // Spine groove\n                translate([0, -plate_thickness/2 - 0.1, 0])\n                    cube([torso_width * 0.3, plate_thickness + 0.2, torso_height * 0.65], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nrotate([0, -10, 0]) {\n    lorica_segment();\n}\n\n// Base stand\ncolor([0.2, 0.2, 0.2]) {\n    translate([0, -torso_depth * 1.5, -5]) {\n        cube([torso_width * 1.5, torso_depth * 0.5, 10], center = true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "segmentata",
    "openscad_code": "// Lorica Segmentata - Roman segmented armor (historical artifact)\n// Medium complexity, realistic style\n// Scale: ~80mm tall when printed\n\n// Armor segments module\nmodule armor_segment(width, height, thickness, curve_radius) {\n    difference() {\n        // Main curved plate\n        translate([0, 0, height/2])\n            scale([1, 1, height/curve_radius])\n            cylinder(h=curve_radius, r1=curve_radius, r2=curve_radius+thickness, $fn=50);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=height+2, r1=curve_radius-2, r2=curve_radius-2+thickness, $fn=50);\n    }\n}\n\n// Decorative rivets\nmodule rivet(head_d, shaft_d, height) {\n    union() {\n        cylinder(h=height*0.7, d=shaft_d, $fn=8);\n        translate([0, 0, height*0.7])\n            cylinder(h=height*0.3, d=head_d, $fn=12);\n    }\n}\n\n// Main armor plate with rivets\nmodule chest_plate() {\n    color([0.7, 0.6, 0.5])  // Bronze color\n    union() {\n        // Upper chest segment\n        armor_segment(25, 15, 3, 35);\n        \n        // Rivets along edges\n        for(i = [-1, 1]) {\n            translate([i*10, 0, 0])\n                rivet(2.5, 1.5, 3);\n            translate([i*10, 0, 12])\n                rivet(2.5, 1.5, 3);\n        }\n    }\n}\n\n// Leather strap with buckle\nmodule strap(length, width, thickness) {\n    color([0.3, 0.2, 0.1])  // Dark brown leather\n    union() {\n        translate([0, -width/2, -thickness/2])\n            cube([length, width, thickness]);\n        \n        // Buckle\n        color([0.6, 0.5, 0.4])\n        translate([length, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=width+2, d=3, $fn=16);\n    }\n}\n\n// Complete segmentata assembly\nunion() {\n    // Central torso plates\n    for(i = [0:3]) {\n        translate([0, 0, i*18])\n            chest_plate();\n    }\n    \n    // Side plates\n    for(i = [0:2]) {\n        translate([30, 0, 10+i*18])\n            rotate([0, 0, 15])\n                scale([0.8, 0.8, 0.8])\n                    armor_segment(20, 12, 2.5, 30);\n        \n        translate([-30, 0, 10+i*18])\n            rotate([0, 0, -15])\n                scale([0.8, 0.8, 0.8])\n                    armor_segment(20, 12, 2.5, 30);\n    }\n    \n    // Shoulder guards\n    color([0.7, 0.6, 0.5])\n    for(i = [-1, 1]) {\n        translate([i*20, 25, 65])\n            rotate([0, 15, 0])\n                armor_segment(18, 10, 2, 25);\n    }\n    \n    // Leather straps\n    translate([-15, 20, 35])\n    rotate([0, 90, 0])\n        strap(30, 4, 1.5);\n    \n    // Decorative medallion\n    color([0.8, 0.7, 0.3])  // Brass\n    translate([0, 0, 75])\n        cylinder(h=2, d=8, $fn=32);\n    \n    // Medallion details\n    color([0.6, 0.5, 0.4])\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([3, 0, 76.5])\n                cube([2, 0.5, 1]);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "lamellar",
    "openscad_code": "// Lamellar armor plate - Byzantine style 6th-10th century\n// Individual lamellae were laced together to form flexible armor\n// This represents a single lamellar plate as would be used in historical armor\n\n// Overall dimensions for 3D printing\nplate_width = 20;\nplate_height = 40;\nplate_thickness = 2;\nhole_diameter = 2;\nhole_offset = 4;\n\n// Historical decorative elements\ndecoration_width = 14;\ndecoration_height = 6;\ndecoration_depth = 0.5;\n\n// Color definitions\nbronze_color = [150/255, 120/255, 90/255];\nleather_color = [101/255, 67/255, 33/255];\n\nmodule lamellar_plate() {\n    // Main plate body with rounded top\n    union() {\n        // Base rectangular plate\n        difference() {\n            cube([plate_width, plate_height, plate_thickness], center=true);\n            \n            // Rounded top edge\n            translate([0, plate_height/2 - plate_width/2, plate_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=plate_width, r1=plate_width/2, r2=plate_width/2, center=true);\n        }\n        \n        // Historical decorative ridge\n        translate([0, plate_height/4, plate_thickness/2 + decoration_depth/2])\n            cube([decoration_width, decoration_height, decoration_depth], center=true);\n        \n        // Secondary decorative line\n        translate([0, -plate_height/4, plate_thickness/2 + decoration_depth/2])\n            cube([decoration_width*0.8, decoration_height*0.6, decoration_depth], center=true);\n    }\n    \n    // Lacing holes - historically accurate spacing\n    for (y = [-plate_height/2 + hole_offset*2, -plate_height/2 + hole_offset*4]) {\n        for (x = [-plate_width/2 + hole_offset, plate_width/2 - hole_offset]) {\n            translate([x, y, plate_thickness/2])\n                rotate([0, 180, 0])\n                    cylinder(h=plate_thickness+1, d=hole_diameter, center=true);\n        }\n    }\n    \n    // Additional side holes for horizontal lacing\n    for (y = [-plate_height/2 + hole_offset*3, plate_height/2 - hole_offset*3]) {\n        translate([plate_width/2 + 0.1, y, 0])\n            rotate([0, 90, 0])\n                cylinder(h=plate_thickness+0.2, d=hole_diameter, center=true);\n    }\n}\n\n// Create a small section of lamellar armor showing how plates overlap\nmodule lamellar_section() {\n    color(bronze_color) {\n        // Base plate\n        lamellar_plate();\n        \n        // Second plate overlapping (historical overlap was 1/3 to 1/2)\n        translate([0, plate_height/3, plate_thickness*0.8])\n            rotate([0, 0, 5]) // Slight angle for realistic overlap\n            lamellar_plate();\n            \n        // Third plate\n        translate([0, -plate_height/3, plate_thickness*1.6])\n            rotate([0, 0, -3])\n            lamellar_plate();\n    }\n    \n    // Lacing cords representation\n    color(leather_color) {\n        for (x = [-plate_width/2 + hole_offset, plate_width/2 - hole_offset]) {\n            for (z = [0, plate_thickness*0.8, plate_thickness*1.6]) {\n                translate([x, -plate_height/2 + hole_offset*2, z])\n                    rotate([90, 0, 0])\n                        cylinder(h=plate_height, d=1.5, center=false);\n            }\n        }\n    }\n}\n\n// Render the lamellar section\nlamellar_section();",
    "renders": true
  },
  {
    "historical_artifact": "brigandine",
    "openscad_code": "// Brigandine Vest\n// A late 14th-century torso defense made from small overlapping iron plates riveted inside a fabric or leather shell\n\n$fa = 2;\n$fs = 0.5;\n\nmodule rivet(h=1.5, d=2) {\n    // Simple domed rivet\n    cylinder(h=h, d1=d, d2=d*0.8, $fn=12);\n}\n\nmodule plate(w=12, h=18, t=1.5) {\n    // Slightly curved rectangular iron plate\n    translate([0,0,t/2])\n    difference() {\n        // Main plate with rounded corners\n        minkowski() {\n            cube([w,h,t], center=true);\n            cylinder(h=0.1, r=1.5, $fn=8);\n        }\n        // Rivet hole\n        translate([0, -h/3, t/2+0.1])\n        cylinder(h=t+0.2, r=0.8, $fn=6);\n    }\n}\n\nmodule brigandine_row(count=6, offset=0) {\n    // Row of overlapping plates\n    for(i=[0:count-1]) {\n        translate([i*10 - (count-1)*5 + offset, 0, 0])\n        rotate([0, -5, 0])\n        plate();\n    }\n}\n\nmodule fabric_layer() {\n    // Quilted canvas or leather backing\n    color(\"saddlebrown\")\n    difference() {\n        // Main body\n        minkowski() {\n            cube([60, 80, 3], center=true);\n            cylinder(h=0.1, r=8, $fn=16);\n        }\n        \n        // Neck opening\n        translate([0, 25, 0])\n        cylinder(h=4, r=12, $fn=32);\n    }\n}\n\nmodule decorative_edge() {\n    // Reinforced edge binding\n    color(\"goldenrod\")\n    for(side=[-1, 1]) {\n        translate([side*29.5, 0, 0])\n        cube([2, 78, 4], center=true);\n    }\n    translate([0, -39.5, 0])\n    cube([58, 2, 4], center=true);\n    translate([0, 39.5, 0])\n    cube([58, 2, 4], center=true);\n}\n\nmodule shoulder_straps() {\n    // Simple shoulder attachments\n    color(\"saddlebrown\")\n    translate([0, -35, 10])\n    cube([8, 15, 2], center=true);\n}\n\n// Main assembly\nunion() {\n    // Base fabric layer\n    fabric_layer();\n    \n    // Decorative edge binding\n    decorative_edge();\n    \n    // Plate rows (historically 8-12 rows)\n    for(row=[0:7]) {\n        translate([0, -30 + row*8.5, 2])\n        brigandine_row(count=6 - (row%2), offset=(row%2)*5);\n    }\n    \n    // Rivets visible on the outside (decorative)\n    for(row=[0:7]) {\n        for(col=[0:5-(row%2)]) {\n            color(\"silver\")\n            translate([col*10 - (5-(row%2))*5 + (row%2)*5, -30 + row*8.5, 3.5])\n            rivet();\n        }\n    }\n    \n    // Shoulder straps\n    shoulder_straps();\n    mirror([0,1,0])\n    shoulder_straps();\n    \n    // Central decorative boss (historical feature)\n    color(\"goldenrod\")\n    translate([0, 0, 4])\n    cylinder(h=3, r=6, $fn=32);\n    translate([0, 0, 7])\n    sphere(r=3, $fn=32);\n}",
    "renders": true
  },
  {
    "historical_artifact": "hauberk",
    "openscad_code": "// Hauberk (chainmail shirt) - Historical Medieval Armor\n// Medium complexity realistic representation for 3D printing\n// Overall dimensions: ~70mm height, 60mm width, 20mm thickness\n\n// Color definitions - iron/steel appearance\niron = [0.4, 0.4, 0.45];\ndark_iron = [0.3, 0.3, 0.35];\n\n// Ring pattern module - creates individual chainmail rings\nmodule chain_ring(diameter=2.5, thickness=0.8, height=1.2) {\n    difference() {\n        cylinder(h=height, d=diameter, $fn=8);\n        translate([0, 0, -0.1])\n            cylinder(h=height+0.2, d=diameter-thickness, $fn=8);\n    }\n}\n\n// Create a row of chainmail rings with alternating pattern\nmodule chain_row(length, y_offset=0) {\n    for(i=[0:ceil(length/2.5)-1]) {\n        if(i%2==0) {\n            translate([i*2.5, y_offset, 0])\n                chain_ring();\n        } else {\n            translate([i*2.5, y_offset+1.25, 0])\n                chain_ring();\n        }\n    }\n}\n\n// Create chainmail mesh section\nmodule chain_section(width, height, start_x=0, start_y=0) {\n    for(j=[0:ceil(height/2.5)-1]) {\n        if(j%2==0) {\n            chain_row(width, start_y+j*2.165);\n        } else {\n            chain_row(width-1.25, start_y+j*2.165);\n        }\n    }\n}\n\n// Main hauberk body\nmodule hauberk_body() {\n    color(iron) {\n        // Front torso section\n        chain_section(40, 50, 0, 0);\n        \n        // Back torso section (mirrored)\n        translate([0, 60, 0])\n            mirror([0, 1, 0])\n                chain_section(40, 50, 0, 0);\n        \n        // Sleeves - left\n        translate([-20, 20, 0])\n            rotate([0, 0, 45])\n                chain_section(25, 30, 0, 0);\n        \n        // Sleeves - right\n        translate([20, 20, 0])\n            rotate([0, 0, -45])\n                chain_section(25, 30, 0, 0);\n    }\n}\n\n// Reinforced collar/neck opening\nmodule collar() {\n    color(dark_iron) {\n        // Neck opening reinforcement\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([0, 12, 0])\n                    chain_ring(3.5, 1.2, 1.5);\n        }\n    }\n}\n\n// Hem reinforcements\nmodule hem() {\n    color(dark_iron) {\n        // Bottom hem reinforcement\n        for(i=[0:15]) {\n            translate([i*2.5-20, -28, 0])\n                chain_ring(3.5, 1.2, 1.5);\n        }\n        \n        // Sleeve cuff reinforcements\n        for(i=[0:6]) {\n            // Left cuff\n            translate([-32+i*2.5, 32, 0])\n                chain_ring(3.5, 1.2, 1.5);\n            // Right cuff\n            translate([20+i*2.5, 32, 0])\n                chain_ring(3.5, 1.2, 1.5);\n        }\n    }\n}\n\n// Side seams (connection between front and back)\nmodule side_seams() {\n    color(dark_iron) {\n        for(i=[0:4]) {\n            // Left side\n            translate([-20, 25-i*10, 0])\n                chain_ring(3.5, 1.2, 1.5);\n            // Right side\n            translate([20, 25-i*10, 0])\n                chain_ring(3.5, 1.2, 1.5);\n        }\n    }\n}\n\n// Assembly of complete hauberk\nunion() {\n    // Main body\n    hauberk_body();\n    \n    // Reinforcements\n    collar();\n    hem();\n    side_seams();\n}",
    "renders": true
  },
  {
    "historical_artifact": "byrnie",
    "openscad_code": "// Viking byrnie - mail shirt artifact\n// Scale: 1:20, ~60mm tall for 3D printing\n\n// Main body dimensions\ntorso_h = 40;\ntorso_w = 30;\ntorso_d = 15;\narm_hole = 8;\nneck_r = 5;\n\n// Mail texture parameters\nring_r = 1.2;\nring_th = 0.3;\nring_spacing = 2.0;\n\n// Decorative elements\nborder_w = 2;\nborder_th = 0.5;\n\nmodule mail_ring(x, y, z) {\n    color(\"silver\") \n    translate([x, y, z])\n    difference() {\n        cylinder(h = ring_th, r = ring_r, $fn = 12);\n        translate([0, 0, -0.1])\n        cylinder(h = ring_th + 0.2, r = ring_r - 0.4, $fn = 8);\n    }\n}\n\nmodule mail_pattern(width, height, depth) {\n    for (i = [0:ceil(width/ring_spacing)])\n        for (j = [0:ceil(height/ring_spacing)]) {\n            x = i * ring_spacing - width/2;\n            y = j * ring_spacing - height/2;\n            offset = (j % 2) * ring_spacing/2;\n            mail_ring(x + offset, y, depth);\n        }\n}\n\nmodule torso_base() {\n    color(\"silver\") difference() {\n        // Main torso\n        translate([0, 0, torso_h/2])\n        cube([torso_w, torso_d, torso_h], center = true);\n        \n        // Neck hole\n        translate([0, torso_d/2 - 2, torso_h - neck_r])\n        rotate([90, 0, 0])\n        cylinder(h = torso_d + 4, r = neck_r, $fn = 16);\n        \n        // Arm holes\n        translate([torso_w/2 - 1, 0, torso_h - arm_hole])\n        rotate([0, 90, 0])\n        cylinder(h = 4, r = arm_hole - 1, $fn = 16);\n        mirror([1, 0, 0])\n        translate([torso_w/2 - 1, 0, torso_h - arm_hole])\n        rotate([0, 90, 0])\n        cylinder(h = 4, r = arm_hole - 1, $fn = 16);\n        \n        // Bottom taper\n        translate([0, 0, -1])\n        cube([torso_w + 2, torso_d + 2, 2], center = true);\n    }\n}\n\nmodule decorative_border() {\n    color(\"bronze\") {\n        // Neck border\n        translate([0, torso_d/2 - 2, torso_h - neck_r])\n        rotate([90, 0, 0])\n        cylinder(h = border_th, r = neck_r + 1, $fn = 32);\n        \n        // Hem border\n        translate([0, 0, border_th/2])\n        cube([torso_w + 2, torso_d + 1, border_th], center = true);\n        \n        // Side reinforcements\n        translate([torso_w/2 - border_w/2, 0, torso_h/2])\n        cube([border_w, torso_d + 0.5, torso_h], center = true);\n        mirror([1, 0, 0])\n        translate([torso_w/2 - border_w/2, 0, torso_h/2])\n        cube([border_w, torso_d + 0.5, torso_h], center = true);\n    }\n}\n\nmodule shoulder_straps() {\n    color(\"silver\") for (i = [-1, 1]) {\n        translate([i * (torso_w/2 - 3), 0, torso_h - 5])\n        cube([6, torso_d + 0.5, 10], center = true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        torso_base();\n        decorative_border();\n        shoulder_straps();\n    }\n    \n    // Remove inner volume for hollow printing\n    translate([0, 0, torso_h/2])\n    cube([torso_w - 2, torso_d - 2, torso_h - 2], center = true);\n}\n\n// Add mail texture to outer surface\nmail_pattern(torso_w + 2, torso_h + 2, torso_d/2 + 0.5);\nmail_pattern(torso_w + 2, torso_h + 2, -torso_d/2 - 0.5);",
    "renders": true
  },
  {
    "historical_artifact": "aventail",
    "openscad_code": "// Historical Aventail - 14th century mail neck defense\n// Realistic style with medium complexity\n// Designed for 3D printing - 80mm diameter\n\n$fn = 32;\n\n// Main colors\ncolor(\"silver\") \n\n// Scale factor for 3D printing (80mm diameter)\nscale(0.8) \n\n// Main assembly\nunion() {\n    // Base mail ring - main aventail structure\n    mail_collar();\n    \n    // Top mounting ring - attaches to helm\n    mounting_ring();\n    \n    // Decorative rivet details\n    decorative_rivets();\n    \n    // Bottom edge reinforcement\n    bottom_reinforcement();\n    \n    // Ventilation holes pattern\n    ventilation_pattern();\n}\n\nmodule mail_collar() {\n    // Main mail section - conical shape\n    difference() {\n        // Outer cone\n        cylinder(h = 35, r1 = 42, r2 = 50, center = true);\n        \n        // Inner cone - creates hollow shell\n        translate([0, 0, 1])\n            cylinder(h = 33, r1 = 38, r2 = 46, center = true);\n    }\n    \n    // Mail texture simulation with small cylinders\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5]) {\n            for (j = [-20:5:20]) {\n                translate([0, 43 + j * 0.5, j]) {\n                    rotate([90, 0, 0])\n                        cylinder(h = 2, r = 1.5, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule mounting_ring() {\n    // Top ring for attaching to bascinet\n    difference() {\n        // Outer ring\n        cylinder(h = 8, r1 = 42, r2 = 42, center = true);\n        \n        // Inner hole\n        translate([0, 0, 1])\n            cylinder(h = 6, r1 = 38, r2 = 38, center = true);\n    }\n    \n    // Mounting holes for lacing\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([40, 0, 0]) {\n                rotate([90, 0, 0])\n                    cylinder(h = 10, r = 2, center = true);\n            }\n        }\n    }\n}\n\nmodule decorative_rivets() {\n    // Brass decorative rivets around top edge\n    color(\"gold\") {\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([42, 0, 15]) {\n                    sphere(r = 1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule bottom_reinforcement() {\n    // Leather-wrapped bottom edge\n    color(\"saddlebrown\") {\n        difference() {\n            // Main reinforcement strip\n            cylinder(h = 4, r1 = 50, r2 = 50, center = true);\n            \n            // Inner cutout\n            translate([0, 0, 1])\n                cylinder(h = 2, r1 = 46, r2 = 46, center = true);\n        }\n        \n        // Stitching details\n        color(\"black\") {\n            for (i = [0:23]) {\n                rotate([0, 0, i * 15]) {\n                    translate([48, 0, 0]) {\n                        rotate([90, 0, 0])\n                            cylinder(h = 6, r = 0.5, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule ventilation_pattern() {\n    // Historical diamond pattern ventilation holes\n    for (i = [0:5]) {\n        for (j = [0:7]) {\n            rotate([0, 0, i * 60 + j * 8.5]) {\n                translate([44 + j * 1.2, 0, -15 + j * 3]) {\n                    rotate([0, 90, 0])\n                        cylinder(h = 3, r = 1.2, center = true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "nasalhelm",
    "openscad_code": "// Nasalhelm - 12th century Crusader helmet\n// Realistic style with medium complexity\n// Dimensions approximately 60mm tall for 3D printing\n\n$fn = 32; // Smooth curves\n\n// Overall scale\nscale([0.3, 0.3, 0.3]) {\n\n    // Main helmet bowl - conical shape\n    color([0.7, 0.7, 0.7]) {\n        difference() {\n            // Base cone\n            cylinder(h = 80, r1 = 45, r2 = 25);\n            \n            // Hollow interior\n            translate([0, 0, 5])\n                cylinder(h = 75, r1 = 40, r2 = 20);\n            \n            // Eye opening\n            translate([0, -35, 50])\n                cube([70, 20, 25], center = true);\n        }\n    }\n    \n    // Nasal guard\n    color([0.65, 0.65, 0.65]) {\n        translate([0, -40, 45])\n            difference() {\n                // Main nasal plate\n                cube([15, 50, 3]);\n                \n                // Ventilation holes\n                for(i = [1:3])\n                    translate([0, -25 + i*15, 1.5])\n                        cylinder(h = 4, r = 2);\n            }\n    }\n    \n    // Reinforcement band around base\n    color([0.6, 0.6, 0.6]) {\n        translate([0, 0, 5])\n            difference() {\n                cylinder(h = 10, r = 46);\n                cylinder(h = 12, r = 42);\n            }\n    }\n    \n    // Decorative cross rivets on front\n    color([0.3, 0.3, 0.3]) {\n        for(pos = [[0, 0, 65], [0, -15, 55], [0, 15, 55]]) {\n            translate(pos)\n                cylinder(h = 4, r = 3);\n        }\n    }\n    \n    // Side hinge reinforcements\n    color([0.75, 0.75, 0.75]) {\n        translate([35, 0, 25])\n            cube([8, 15, 35]);\n        \n        translate([-35, 0, 25])\n            cube([8, 15, 35]);\n    }\n    \n    // Ventilation holes around top\n    color([0.6, 0.6, 0.6]) {\n        for(i = [0:5:360]) {\n            rotate([0, 0, i])\n                translate([20, 0, 70])\n                    cylinder(h = 10, r = 2);\n        }\n    }\n    \n    // Decorative brass trim\n    color([0.8, 0.6, 0.2]) {\n        // Top ring\n        translate([0, 0, 78])\n            difference() {\n                cylinder(h = 3, r = 27);\n                cylinder(h = 4, r = 24);\n            }\n        \n        // Nasal guard edge\n        translate([0, -15, 45])\n            difference() {\n                cube([17, 30, 5]);\n                cube([15, 28, 7]);\n            }\n    }\n    \n    // Internal padding representation\n    color([0.3, 0.2, 0.1]) {\n        translate([0, 0, 15])\n            difference() {\n                cylinder(h = 40, r1 = 39, r2 = 19);\n                cylinder(h = 42, r1 = 35, r2 = 15);\n            }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "spangenhelm",
    "openscad_code": "// Spangenhelm - 9th-11th century Viking helmet\n// Medium complexity realistic model\n// Dimensions: ~75mm total height, ~60mm width\n\n// Main colors\n$fn = 64;\n\n// Helmet proportions\nhelmet_diameter = 55; // Inner diameter for head\nhelmet_height = 45;\nband_width = 5;\nplate_thickness = 2;\n\n// Create the complete helmet\nmodule spangenhelm() {\n    color(\"silver\") {\n        // Main dome segments (4 plates)\n        difference() {\n            union() {\n                // Front plate\n                translate([0, 0, helmet_height/2])\n                    scale([1, 0.9, 1])\n                    sphere(d=helmet_diameter);\n                \n                // Back plate\n                translate([0, 0, helmet_height/2])\n                    scale([1, 0.9, 0.8])\n                    rotate([180, 0, 0])\n                    sphere(d=helmet_diameter);\n                \n                // Left plate\n                translate([0, 0, helmet_height/2])\n                    scale([0.9, 1, 1])\n                    rotate([0, 90, 0])\n                    sphere(d=helmet_diameter);\n                \n                // Right plate\n                translate([0, 0, helmet_height/2])\n                    scale([0.9, 1, 1])\n                    rotate([0, -90, 0])\n                    sphere(d=helmet_diameter);\n            }\n            \n            // Cut interior hollow\n            translate([0, 0, helmet_height/2 - 5])\n                sphere(d=helmet_diameter - 6);\n        }\n        \n        // Spangen bands (framework strips)\n        // Horizontal band\n        translate([0, 0, helmet_height/2])\n            rotate_extrude()\n                translate([helmet_diameter/2 - band_width/2, 0, 0])\n                    square([band_width, plate_thickness]);\n        \n        // Vertical bands (4 pieces)\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([helmet_diameter/2 - band_width/2, 0, helmet_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(h=helmet_diameter/2, r=band_width/2, $fn=4);\n        }\n        \n        // Nasal guard\n        translate([0, helmet_diameter/2 - 8, helmet_height/2 - 5])\n            rotate([90, 0, 0])\n                linear_extrude(height=band_width)\n                    polygon(points=[\n                        [0, 0],\n                        [6, -15],\n                        [3, -25],\n                        [-3, -25],\n                        [-6, -15],\n                        [0, 0]\n                    ]);\n        \n        // Decorative rivets along bands\n        color(\"goldenrod\") {\n            // Rivets on horizontal band\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45])\n                    translate([helmet_diameter/2 - band_width/2, 0, helmet_height/2 + plate_thickness])\n                        sphere(d=1.5);\n            }\n            \n            // Rivets on vertical bands\n            for(i = [0:3]) {\n                for(j = [1:3]) {\n                    rotate([0, 0, i * 90])\n                        translate([helmet_diameter/2 - band_width/2 - j*5, 0, helmet_height/2 + plate_thickness])\n                            sphere(d=1.5);\n                }\n            }\n        }\n        \n        // Chain mail aventail attachment points\n        color(\"darkgray\") {\n            for(i = [0:11]) {\n                rotate([0, 0, i * 30])\n                    translate([helmet_diameter/2 - 2, 0, helmet_height/2 - helmet_height/4])\n                        cylinder(h=3, r=1.5);\n            }\n        }\n        \n        // Decorative bronze brow band\n        color(\"bronze\") {\n            translate([0, 0, helmet_height/2 + 8])\n                rotate_extrude()\n                    translate([helmet_diameter/2 + 2, 0, 0])\n                        square([1.5, 3]);\n        }\n    }\n}\n\n// Eye slits\nmodule eye_slits() {\n    color(\"black\") {\n        translate([8, helmet_diameter/2 - 5, helmet_height/2 + 5])\n            rotate([0, 90, 0])\n                cube([15, 3, 6]);\n        \n        translate([-8, helmet_diameter/2 - 5, helmet_height/2 + 5])\n            rotate([0, 90, 0])\n                cube([15, 3, 6]);\n    }\n}\n\n// Assembly\nspangenhelm();\neye_slits();",
    "renders": true
  },
  {
    "historical_artifact": "sallet",
    "openscad_code": "// Historical Sallet Helmet (15th century)\n// Scale: ~70mm height for 3D printing\n\n$fn=32;\n\n// Overall scale factor\nscale_factor = 0.35;\n\n// Main helmet color - aged steel\ncolor([0.4, 0.4, 0.45]) union() {\n    \n    // Main dome of the helmet\n    translate([0, 0, 30*scale_factor]) {\n        scale([1, 1.2, 1.2]) sphere(r=30*scale_factor);\n    }\n    \n    // Extended tail at back\n    translate([0, -25*scale_factor, 20*scale_factor]) {\n        scale([0.8, 1.5, 0.6]) sphere(r=20*scale_factor);\n    }\n    \n    // Visor pivot points\n    translate([-20*scale_factor, 15*scale_factor, 25*scale_factor]) \n        cylinder(h=8*scale_factor, r=3*scale_factor);\n    translate([20*scale_factor, 15*scale_factor, 25*scale_factor]) \n        cylinder(h=8*scale_factor, r=3*scale_factor);\n    \n    // Movable visor\n    rotate([0, 20, 0]) {\n        translate([0, 15*scale_factor, 25*scale_factor]) {\n            difference() {\n                // Main visor shape\n                color([0.45, 0.45, 0.5]) translate([0, 0, 0]) {\n                    scale([0.9, 0.7, 0.8]) sphere(r=30*scale_factor);\n                }\n                \n                // Eye slit\n                translate([0, 10*scale_factor, 0]) {\n                    scale([0.3, 0.05, 0.8]) sphere(r=30*scale_factor);\n                }\n                \n                // Breathing holes pattern\n                for(y = [0:3]) {\n                    translate([-10*scale_factor + y*7*scale_factor, 5*scale_factor, 5*scale_factor]) {\n                        rotate([90, 0, 0]) cylinder(h=2*scale_factor, r=1.5*scale_factor);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Helmet rim\n    color([0.35, 0.35, 0.4]) translate([0, 0, 8*scale_factor]) {\n        cylinder(h=3*scale_factor, r1=32*scale_factor, r2=30*scale_factor);\n    }\n    \n    // Decorative ridge along top\n    translate([0, -20*scale_factor, 35*scale_factor]) {\n        scale([0.15, 2.5, 0.1]) cube([60*scale_factor, 10*scale_factor, 20*scale_factor]);\n    }\n    \n    // Side reinforcements\n    difference() {\n        // Left cheek guard\n        translate([-25*scale_factor, 10*scale_factor, 15*scale_factor]) {\n            rotate([0, 0, -20]) {\n                scale([0.2, 0.8, 1.2]) sphere(r=15*scale_factor);\n            }\n        }\n        \n        // Right cheek guard\n        translate([25*scale_factor, 10*scale_factor, 15*scale_factor]) {\n            rotate([0, 0, 20]) {\n                mirror([1, 0, 0]) {\n                    scale([0.2, 0.8, 1.2]) sphere(r=15*scale_factor);\n                }\n            }\n        }\n    }\n    \n    // Rivet details\n    color([0.3, 0.3, 0.35]) for(i=[-1:1]) {\n        translate([i*15*scale_factor, -5*scale_factor, 35*scale_factor]) \n            sphere(r=1*scale_factor);\n    }\n    \n    // Neck guard segments\n    for(i=[0:3]) {\n        translate([0, -30*scale_factor - i*5*scale_factor, 15*scale_factor - i*3*scale_factor]) {\n            rotate([0, -10 + i*5, 0]) {\n                scale([0.9 - i*0.05, 0.2, 0.8 - i*0.1]) \n                    cube([40*scale_factor, 5*scale_factor, 15*scale_factor]);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "barbute",
    "openscad_code": "// Realistic barbute helmet (15th century Italian)\n// Scale: 1:7 for 3D printing (≈85 mm high)\n\n$fn = 64;\n\nmodule barboute() {\n    color([0.55,0.55,0.58])    // weathered steel\n    \n    union() {\n        // Main helmet shell\n        difference() {\n            // Basic dome\n            scale([1, 0.9, 1.2])\n                cylinder(h=60, d1=45, d2=40);\n            \n            // T-shaped face opening\n            translate([-7.5, 0, 30])\n                cube([15, 25, 30]);\n            \n            // Eyes\n            translate([-20, -5, 45])\n                cube([40, 10, 5]);\n            \n            // Ventilation slots\n            for(y = [-20:10:-10])\n                translate([2, y, 25])\n                    rotate([0,90,0])\n                        cylinder(h=1, d=2);\n        }\n        \n        // Reinforcing ridge\n        translate([0, 0, 60])\n            scale([1.1, 1, 0.3])\n                cylinder(h=3, d=45);\n        \n        // Neck guard (articulated)\n        difference() {\n            union() {\n                translate([0, -22, 15])\n                    cube([45, 12, 30], center=true);\n                \n                // Curved bottom\n                translate([0, -22, 0])\n                    scale([1, 0.5, 1])\n                        cylinder(h=30, d=45);\n            }\n            \n            // Neck hole\n            translate([0, -22, 15])\n                cube([25, 15, 25], center=true);\n            \n            // Articulation slots\n            for(x = [-15:15:15])\n                translate([x, -16, 15])\n                    cube([3, 6, 25], center=true);\n        }\n        \n        // Decorative rivets\n        for(a = [0:45:315]) {\n            rotate([0,0,a])\n                translate([22, 0, 55])\n                    cylinder(h=1.5, d=2.5);\n        }\n        \n        // Cheek guards\n        difference() {\n            union() {\n                // Left cheek\n                translate([-22, -5, 25])\n                    rotate([0,0,-10])\n                        cube([15, 8, 30]);\n                \n                // Right cheek (mirrored)\n                mirror([1,0,0])\n                    translate([-22, -5, 25])\n                        rotate([0,0,-10])\n                            cube([15, 8, 30]);\n            }\n            \n            // Attachment holes\n            translate([-28, -5, 25])\n                rotate([0,90,0])\n                    cylinder(h=15, d=2);\n            \n            mirror([1,0,0])\n                translate([-28, -5, 25])\n                    rotate([0,90,0])\n                        cylinder(h=15, d=2);\n        }\n        \n        // Chain mail aventail attachment points\n        color([0.3,0.3,0.3])\n        for(i = [-20:5:20]) {\n            translate([i, -22, 5])\n                cylinder(h=2, d=1.5);\n        }\n        \n        // Battle wear marks\n        color([0.4,0.4,0.42])\n        translate([10, 5, 50])\n            rotate([0,0,30])\n                cube([8, 2, 1]);\n        \n        translate([-15, -8, 40])\n            rotate([0,0,-20])\n                cube([12, 1.5, 1]);\n    }\n}\n\n// Display the barbute\ntranslate([0, 0, 0])\n    barboute();",
    "renders": true
  },
  {
    "historical_artifact": "bascinet",
    "openscad_code": "// Bascinet - 14th century knight helmet\n// Medium complexity realistic style\n// Approx 80mm height, 3D printable\n\n// Color definitions\ncolor_iron = [0.4, 0.4, 0.45];\ncolor_brass = [0.7, 0.5, 0.25];\ncolor_leather = [0.3, 0.2, 0.1];\n\n// Main helmet parameters\nhelmet_height = 80;\nhelmet_width = 60;\nhelmet_depth = 70;\nwall_thickness = 3;\n\nmodule bascinet() {\n    // Main skull cap\n    color(color_iron) {\n        difference() {\n            // Main rounded skull\n            sphere(d = helmet_width);\n            \n            // Hollow out interior\n            sphere(d = helmet_width - wall_thickness * 2);\n            \n            // Bottom cut for neck\n            translate([0, 0, -helmet_height/2])\n                cube([helmet_width * 2, helmet_width * 2, helmet_height], center = true);\n        }\n    }\n    \n    // Aventail (mail curtain) attachment points\n    color(color_iron) {\n        for(i = [0:15:359]) {\n            rotate([0, 0, i])\n                translate([0, helmet_width/2 - 2, -5])\n                    cylinder(h = 8, d = 3, center = true);\n        }\n    }\n    \n    // Hinge for visor\n    color(color_iron) {\n        // Left hinge\n        translate([-helmet_width/2 - 2, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 6, d = 4);\n        \n        // Right hinge\n        translate([helmet_width/2 + 2, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 6, d = 4);\n    }\n    \n    // Brass decorative band\n    color(color_brass) {\n        // Front band\n        translate([0, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r = helmet_width/2 - 1, center = true);\n        \n        // Rear band\n        translate([0, 0, -15])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r = helmet_width/2 - 1, center = true);\n    }\n    \n    // Ventilation holes\n    color(color_iron) {\n        for(i = [0:30:150]) {\n            rotate([0, i, 0])\n                translate([0, 0, helmet_width/2 - 5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 10, d = 4);\n        }\n    }\n    \n    // Nasal guard\n    color(color_iron) {\n        difference() {\n            // Main plate\n            translate([0, helmet_width/2 - 8, 0])\n                rotate([15, 0, 0])\n                    cube([helmet_width/3, 30, wall_thickness], center = true);\n            \n            // Decorative cutout\n            translate([0, helmet_width/2 + 8, 5])\n                rotate([15, 0, 0])\n                    cube([helmet_width/4, 20, wall_thickness + 1], center = true);\n        }\n    }\n    \n    // Leather liner attachment points\n    color(color_iron) {\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n                translate([0, 0, 20])\n                    cylinder(h = 5, d = 2);\n        }\n    }\n    \n    // Decorative rivets around base\n    color(color_brass) {\n        rivet_count = 24;\n        for(i = [0:360/rivet_count:359]) {\n            rotate([0, 0, i])\n                translate([0, helmet_width/2 - 1, -helmet_height/3])\n                    cylinder(h = 2, d = 3);\n        }\n    }\n}\n\n// Display the helmet\nbascinet();\n\n// Add ground reference\ncolor([0.8, 0.8, 0.8])\n    translate([0, 0, -helmet_height/2 - 2])\n        cube([helmet_width * 2, helmet_width * 2, 2], center = true);",
    "renders": true
  },
  {
    "historical_artifact": "greathelm",
    "openscad_code": "// Great Helm (c. 1240-1350) – Crusader period kettle-hat derivative\n// Overall height 60 mm, wall 2 mm – printable without supports\n\n$fa = 2; $fs = 1; \n\ncolor(\"silver\") difference() {\n    /* Main cylindrical skull */\n    union() {\n        // Cylindrical body\n        cylinder(h = 45, d = 50, center = true);\n        // Flat top plate\n        translate([0, 0, 22.5]) cylinder(h = 5, d = 50, center = true);\n    }\n\n    /* Inner hollow */\n    translate([0, 0, 2]) cylinder(h = 50, d = 46, center = true);\n\n    /* Eye-slits */\n    for (y = [-6, 6])\n        translate([0, y, 10])\n            rotate([0, 90, 0]) cylinder(h = 30, d = 3.5, center = true);\n\n    /* Breath holes */\n    for (a = [-30:15:30])\n        rotate([0, 0, a])\n            translate([0, 22.5, -10])\n                cylinder(h = 5, d = 2);\n}\n\n/* Reinforcing brow band */\ncolor(\"dimgray\") translate([0, 0, 8])\n    difference() {\n        cylinder(h = 6, d = 54, center = true);\n        cylinder(h = 7, d = 46, center = true);\n    }\n\n/* Decorative brass cross on front */\ncolor(\"goldenrod\") translate([0, 25, 10])\n    union() {\n        cube([2, 20, 2], center = true);\n        cube([20, 2, 2], center = true);\n    }\n\n/* Rivet line along junction (simulated) */\nmodule rivet() color(\"dimgray\")\n    translate([0, 0, -1]) cylinder(h = 2, d = 2);\n\nfor (a = [0:30:330])\n    rotate([0, 0, a])\n        translate([25, 0, 22.5])\n            rivet();\n\n/* Maille aventail mounting band */\ncolor(\"silver\") translate([0, 0, -18])\n    difference() {\n        cylinder(h = 4, d = 52, center = true);\n        cylinder(h = 5, d = 48, center = true);\n    }\n\n// Small heraldic lion etching (simplified)\ncolor(\"dimgray\") translate([0, 12, 15])\n    scale([.1, .1, 1])\n        cube([30, 20, .5]);",
    "renders": true
  },
  {
    "historical_artifact": "chausses",
    "openscad_code": "// Medieval Chausses - 14th Century Mail Leg Armor\n// Scale: 1:6 (approximately 80mm height)\n\n// Colors\nchain_mail_color = [0.4, 0.4, 0.45];\nleather_color = [0.3, 0.2, 0.1];\ncloth_color = [0.5, 0.4, 0.3];\n\n// Main parameters\nleg_length = 80;\nleg_width = 18;\nwall_thickness = 1.5;\n\nmodule mail_texture() {\n    for (i = [0:3]) {\n        for (j = [0:8]) {\n            translate([i * 2.5, j * 2.5, 0])\n                sphere(d = 1.8, $fn = 8);\n        }\n    }\n}\n\nmodule chain_mail_surface(width, height) {\n    color(chain_mail_color) {\n        for (x = [-width/2:2:width/2]) {\n            for (y = [0:2:height]) {\n                translate([x, y, 0])\n                    mail_texture();\n            }\n        }\n    }\n}\n\nmodule foot_cover() {\n    color(leather_color) {\n        // Sole\n        translate([0, 0, -leg_width/2])\n            cube([leg_width * 0.8, leg_width * 1.2, wall_thickness], center = true);\n        \n        // Toe cap\n        translate([0, leg_width * 0.6, 0])\n            rotate([90, 0, 0])\n                cylinder(h = leg_width * 0.4, r1 = leg_width * 0.4, r2 = leg_width * 0.3, $fn = 16);\n        \n        // Heel reinforcement\n        translate([0, -leg_width * 0.5, 0])\n            rotate([90, 0, 0])\n                cylinder(h = leg_width * 0.3, r1 = leg_width * 0.35, r2 = leg_width * 0.3, $fn = 16);\n    }\n}\n\nmodule knee_pieces() {\n    color(leather_color) {\n        // Upper knee plate\n        translate([0, leg_length * 0.75, leg_width/2])\n            rotate([90, 0, 0])\n                cylinder(h = wall_thickness * 2, r1 = leg_width * 0.7, r2 = leg_width * 0.6, $fn = 16);\n        \n        // Decorative rivets\n        for (angle = [0:60:300]) {\n            rotate([0, 0, angle])\n                translate([leg_width * 0.55, leg_length * 0.75, leg_width/2 + wall_thickness])\n                    sphere(d = 1.2, $fn = 8);\n        }\n    }\n}\n\nmodule strap() {\n    color(cloth_color) {\n        // Upper strap\n        translate([0, leg_length - 5, leg_width/2 + 2])\n            cube([leg_width * 1.5, 3, wall_thickness], center = true);\n        \n        // Buckle\n        translate([leg_width * 0.8, leg_length - 5, leg_width/2 + 3])\n            difference() {\n                cube([4, 2, 1], center = true);\n                translate([0, 0, -0.5])\n                    cube([3, 1, 2], center = true);\n            }\n    }\n}\n\nmodule leg_segment(start_y, end_y, width) {\n    hull() {\n        translate([0, start_y, 0])\n            sphere(d = width, $fn = 16);\n        translate([0, end_y, 0])\n            sphere(d = width * 0.9, $fn = 16);\n    }\n}\n\nmodule chausses_leg() {\n    // Main leg structure\n    difference() {\n        // Outer shell\n        union() {\n            for (i = [0:5:leg_length]) {\n                leg_segment(i, i + 5, leg_width - i * 0.1);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            scale([0.7, 1, 0.7])\n                cylinder(h = leg_length + 5, r = leg_width/2 - wall_thickness, center = false, $fn = 16);\n    }\n    \n    // Add chain mail texture\n    chain_mail_surface(leg_width, leg_length);\n    \n    // Add foot\n    translate([0, 0, -leg_width/2])\n        foot_cover();\n    \n    // Add knee protection\n    knee_pieces();\n    \n    // Add securing strap\n    strap();\n}\n\n// Main assembly\ntranslate([0, 0, leg_width/2])\n    rotate([0, 90, 0])\n        chausses_leg();",
    "renders": true
  },
  {
    "historical_artifact": "sabatons",
    "openscad_code": "$fn = 64;\n\n// Overall scale factor for 3D printing (fits ~90 mm)\nscale_factor = 0.4;\ncolor(\"silver\") scale([scale_factor, scale_factor, scale_factor]) \nunion() {\n\n    // Main toe plates (symmetrical)\n    difference() {\n        union() {\n            for (i = [0:1:2]) {\n                translate([i*20, 0, 0]) \n                cube([18, 36, 2], center=true);\n            }\n        }\n        // Remove inner toe area (hollow shell)\n        translate([20, 0, 0]) \n        cube([54, 32, 2.5], center=true);\n    }\n\n    // Side plates for toe\n    for (side = [-1, 1]) {\n        translate([0, side*18, 0]) \n        rotate([90, 0, 0]) \n        cylinder(h=2, r=5);\n    }\n\n    // Central metatarsal plate (slightly larger)\n    translate([60, 0, 0]) \n    cube([22, 40, 2.5], center=true);\n\n    // Heel plate (rounded)\n    translate([85, 0, 0]) \n    difference() {\n        scale([1, 0.7, 1]) \n        sphere(r=20);\n        translate([0, 0, -20]) \n        cube([40, 40, 20], center=true);\n    }\n\n    // Ankle plate (articulated)\n    translate([100, 0, 5]) \n    cube([15, 30, 2], center=true);\n\n    // Decorative rivets\n    for (row = [0:1:1]) {\n        for (col = [0:1:3]) {\n            translate([col*20 + 10, (row - 0.5)*30, 1]) \n            cylinder(h=2, r=1.5, $fn=16);\n        }\n    }\n\n    // Historical engravings (simplified as grooves)\n    for (i = [0:1:2]) {\n        translate([i*20 + 10, 0, 1.1]) \n        cube([1, 25, 0.5], center=true);\n    }\n\n    // Side hinges (simplified)\n    for (side = [-1, 1]) {\n        translate([40, side*20, 0]) \n        rotate([90, 0, 0]) \n        cylinder(h=3, r=2);\n    }\n\n    // Toe cap reinforcement\n    translate([-10, 0, 0]) \n    difference() {\n        scale([1, 1, 0.5]) \n        sphere(r=18);\n        translate([0, 0, -9]) \n        cube([36, 36, 9], center=true);\n    }\n\n    // Leather straps (simulated as ridges)\n    for (strap = [0:1:1]) {\n        translate([strap*40 + 30, 0, 2.1]) \n        cube([5, 38, 0.5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "pauldrons",
    "openscad_code": "// Pauldrons - 15th century historical shoulder armor\n// Dimensions: 80mm x 60mm x 25mm\n\ncolor(\"silver\")\nunion() {\n    // Main shoulder plate\n    translate([0, 0, 10])\n    difference() {\n        scale([1, 1.2, 0.3])\n        sphere(30);\n        \n        // Hollow interior for printing\n        translate([0, 0, -5])\n        scale([0.9, 1.1, 0.2])\n        sphere(30);\n    }\n    \n    // Upper arm lames\n    for (i = [0:2]) {\n        translate([0, -25 - i*8, 12 - i*3])\n        rotate([0, -20 + i*5, 0])\n        difference() {\n            scale([0.8 - i*0.1, 1, 0.15])\n            sphere(20);\n            \n            translate([0, 0, -5])\n            scale([0.7 - i*0.1, 0.9, 0.1])\n            sphere(20);\n        }\n    }\n    \n    // Decorative rivets\n    module rivet(x, y, z) {\n        translate([x, y, z])\n        cylinder(h=2, r=1.5, $fn=8);\n    }\n    \n    for (angle = [0:60:300]) {\n        rivet(cos(angle)*25, sin(angle)*25, 20);\n    }\n    \n    // Articulated plate joints\n    module plate_joint(y_pos) {\n        translate([0, y_pos, 10])\n        difference() {\n            cube([15, 3, 5], center=true);\n            translate([0, 0, 2.5])\n            cylinder(h=6, r=2, center=true);\n        }\n    }\n    \n    plate_joint(-20);\n    plate_joint(-28);\n    \n    // Heraldic emblem (fleur-de-lis)\n    translate([25, 0, 21])\n    linear_extrude(height=1.5)\n    polygon(points=[\n        [0, 0],\n        [-3, 5],\n        [-1.5, 5],\n        [-1.5, 8],\n        [1.5, 8],\n        [1.5, 5],\n        [3, 5]\n    ]);\n    \n    // Leather strap attachment points\n    module strap_mount(x, y) {\n        translate([x, y, 15])\n        difference() {\n            cylinder(h=8, r=3, $fn=16);\n            cylinder(h=10, r=1.5, $fn=16);\n        }\n    }\n    \n    strap_mount(-30, 25);\n    strap_mount(30, 25);\n    \n    // Decorative edge ridges\n    for (angle = [0:10:360]) {\n        translate([cos(angle)*30, sin(angle)*36, 10])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=1, r2=0.5);\n    }\n    \n    // Lower shoulder extension\n    translate([0, 10, 8])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=15, r1=25, r2=20, $fn=32);\n        cylinder(h=16, r1=22, r2=17, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "tassets",
    "openscad_code": "// Historical Tassets - Renaissance Plate Armor (c. 1550)\n// Each tasset is roughly 70mm high, designed to hang from a cuirass\n\n$fn = 32;\n\n// Main dimensions\ntasset_width = 30;\ntasset_height = 70;\ntasset_thickness = 2.5;\nrivet_diameter = 1.5;\nrivet_height = 1;\n\n// Create a single tasset plate\nmodule tasset_plate() {\n    color(\"silver\") {\n        // Main plate with slight curvature\n        difference() {\n            // Curved main plate\n            translate([0, 0, tasset_height/2])\n            scale([1, 1.2, 1])\n            rotate([0, 90, 0])\n            cylinder(h = tasset_width, r1 = 40, r2 = 38, center = true);\n            \n            // Remove back half for proper curve\n            translate([0, -tasset_width/2, tasset_height/2])\n            cube([100, tasset_width, tasset_height], center = false);\n        }\n    }\n}\n\n// Decorative ridge along the center\nmodule central_ridge() {\n    color(\"silver\") \n    translate([0, 1.5, tasset_height/2])\n    scale([0.1, 1, 1.1])\n    rotate([0, 90, 0])\n    cylinder(h = tasset_width * 0.8, r1 = 40, r2 = 38, center = true);\n}\n\n// Rivets for attaching straps\nmodule rivets() {\n    color(\"dimgray\")\n    for(i = [0:1]) {\n        // Top rivets\n        translate([0, 2, 60 + i * 5])\n        cylinder(h = rivet_height, d = rivet_diameter, center = true);\n        \n        // Bottom rivets\n        translate([0, 2, 10 + i * 5])\n        cylinder(h = rivet_height, d = rivet_diameter, center = true);\n    }\n}\n\n// Decorative etching pattern\nmodule etching_pattern() {\n    color(\"dimgray\") {\n        // Top decorative band\n        translate([0, 2.6, 55])\n        cube([tasset_width * 0.8, 0.2, 8]);\n        \n        // Bottom decorative band\n        translate([0, 2.6, 15])\n        cube([tasset_width * 0.8, 0.2, 8]);\n        \n        // Vertical lines\n        for(x = [-10:5:10]) {\n            translate([x, 2.6, 35])\n            cube([0.5, 0.2, 30]);\n        }\n    }\n}\n\n// Articulated lames (overlapping plates)\nmodule lames() {\n    color(\"silver\") {\n        for(i = [1:4]) {\n            translate([0, -i * 0.5, 40 - i * 8])\n            scale([1 - i * 0.05, 1, 0.8])\n            rotate([0, 90, 0])\n            cylinder(h = tasset_width * 0.9, r1 = 40, r2 = 38, center = true);\n        }\n    }\n}\n\n// Complete left tasset\nmodule left_tasset() {\n    union() {\n        tasset_plate();\n        central_ridge();\n        rivets();\n        etching_pattern();\n        lames();\n    }\n}\n\n// Complete right tasset (mirrored)\nmodule right_tasset() {\n    mirror([1, 0, 0])\n    left_tasset();\n}\n\n// Assembly - pair of tassets\nleft_tasset();\ntranslate([tasset_width + 5, 0, 0])\nright_tasset();",
    "renders": true
  },
  {
    "historical_artifact": "kettlehat",
    "openscad_code": "// Kettlehat - Medieval European steel helmet\n// Designed for 3D printing with 1.2mm walls and no overhangs\n\n$fn = 64;\n\n// Main parameters\nhat_diameter = 80;\nhat_height = 35;\nbrim_width = 15;\nbrim_thickness = 2;\nwall_thickness = 1.2;\nrivet_diameter = 2;\nrivet_height = 1;\n\nmodule kettlehat() {\n    // Main bowl - conical shape typical of kettlehat\n    difference() {\n        // Outer cone\n        cylinder(h = hat_height, r1 = hat_diameter/2, r2 = hat_diameter/2 - 8);\n        \n        // Inner cone - hollow it out\n        translate([0, 0, -0.1])\n            cylinder(h = hat_height + 0.2, \n                   r1 = hat_diameter/2 - wall_thickness, \n                   r2 = hat_diameter/2 - 8 - wall_thickness);\n    }\n    \n    // Wide circular brim - key feature of kettlehat\n    color(\"silver\")\n    difference() {\n        // Brim base\n        translate([0, 0, hat_height - brim_thickness/2])\n            cylinder(h = brim_thickness, r1 = hat_diameter/2 + brim_width, r2 = hat_diameter/2 + brim_width);\n        \n        // Cut hole for head\n        translate([0, 0, hat_height - brim_thickness - 0.1])\n            cylinder(h = brim_thickness + 0.2, r1 = hat_diameter/2 - wall_thickness, r2 = hat_diameter/2 - wall_thickness);\n    }\n    \n    // Reinforcement band around base of cone\n    color(\"gray\")\n    translate([0, 0, hat_height - brim_thickness - 2])\n        difference() {\n            cylinder(h = 2, r1 = hat_diameter/2 + 1, r2 = hat_diameter/2 + 1);\n            cylinder(h = 2.2, r1 = hat_diameter/2 - 1, r2 = hat_diameter/2 - 1);\n        }\n    \n    // Decorative rivets around brim - 8 rivets total\n    for (i = [0:7]) {\n        angle = i * 45;\n        translate([\n            cos(angle) * (hat_diameter/2 + brim_width/2),\n            sin(angle) * (hat_diameter/2 + brim_width/2),\n            hat_height\n        ])\n            cylinder(h = rivet_height, d = rivet_diameter);\n    }\n    \n    // Central raised boss - typical decorative element\n    color(\"silver\")\n    translate([0, 0, -1])\n        difference() {\n            cylinder(h = 3, r1 = 6, r2 = 4);\n            cylinder(h = 3.2, r1 = 4, r2 = 2);\n        }\n    \n    // Ventilation holes - 4 holes around crown\n    for (i = [0:3]) {\n        angle = i * 90 + 22.5;\n        translate([\n            cos(angle) * (hat_diameter/4),\n            sin(angle) * (hat_diameter/4),\n            hat_height - 5\n        ])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 3);\n    }\n    \n    // Leather suspension ring attachment points - 4 points\n    for (i = [0:3]) {\n        angle = i * 90 + 45;\n        translate([\n            cos(angle) * (hat_diameter/2 - 6),\n            sin(angle) * (hat_diameter/2 - 6),\n            hat_height - 10\n        ])\n            difference() {\n                cube([4, 4, 2], center = true);\n                cube([3, 3, 2.2], center = true);\n            }\n    }\n}\n\n// Render the kettlehat\nkettlehat();",
    "renders": true
  },
  {
    "historical_artifact": "angon",
    "openscad_code": "// Angon - Early Medieval Frankish throwing spear (6th-7th century)\n// Based on archaeological finds from Merovingian graves\n\n$fn = 64;\n\n// Main colors\ncolor(\"silver\") difference() {\n    union() {\n        // Spearhead\n        angon_head();\n        \n        // Socket\n        angon_socket();\n        \n        // Decorative inlay bands\n        inlay_bands();\n    }\n    \n    // Rivet hole through socket\n    translate([0, 0, 5]) rotate([90, 0, 0]) \n        cylinder(h = 15, d = 3, center = true);\n}\n\nmodule angon_head() {\n    // Spear blade - leaf-shaped with central ridge\n    translate([0, 0, 60]) rotate([0, 0, 0]) {\n        // Main blade body\n        linear_extrude(height = 2, center = true) {\n            polygon(points = [[0, 30], [8, 28], [12, 20], [14, 10], [15, 0], \n                             [14, -10], [12, -20], [8, -28], [0, -30], \n                             [-8, -28], [-12, -20], [-14, -10], [-15, 0], \n                             [-14, 10], [-12, 20], [-8, 28]]);\n        }\n        \n        // Central ridge on both sides\n        translate([0, 0, 1]) rotate([90, 0, 0])\n            cylinder(h = 60, d1 = 3, d2 = 1);\n        translate([0, 0, -1]) rotate([90, 0, 0])\n            cylinder(h = 60, d1 = 3, d2 = 1);\n    }\n}\n\nmodule angon_socket() {\n    // Hollow socket tube\n    difference() {\n        // Outer socket\n        translate([0, 0, 15]) rotate([90, 0, 0])\n            cylinder(h = 30, d1 = 12, d2 = 10);\n        \n        // Inner hollow\n        translate([0, 0, 15]) rotate([90, 0, 0])\n            cylinder(h = 32, d = 8);\n    }\n}\n\nmodule inlay_bands() {\n    // Decorative copper-alloy inlays typical of Merovingian craftsmanship\n    \n    // First band near socket\n    color(\"bronze\") translate([0, 0, 30]) rotate([90, 0, 0])\n        cylinder(h = 2, d = 14);\n    \n    // Second band further up\n    color(\"bronze\") translate([0, 0, 45]) rotate([90, 0, 0])\n        cylinder(h = 2, d = 13);\n    \n    // Dot pattern on socket\n    for (i = [0:5]) {\n        color(\"bronze\") rotate([0, 0, i * 60]) \n            translate([6, 0, 15]) sphere(d = 1.5);\n    }\n    \n    // Additional dot pattern on blade\n    for (i = [0:3]) {\n        color(\"bronze\") rotate([0, 0, i * 90]) \n            translate([10, 0, 50]) sphere(d = 1);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "francisca",
    "openscad_code": "// Francisca throwing axe - 6th-8th century Frankish weapon\n// Historically accurate proportions and features\n\n// Overall dimensions for 3D printing\n$fn = 32;\n\n// Colors for materials\ncolor_wood = [139/255, 90/255, 43/255];\ncolor_iron = [0.3, 0.3, 0.3];\ncolor_bronze = [0.8, 0.5, 0.2];\n\nmodule handle() {\n    // Wooden ash handle with slight taper\n    color(color_wood) {\n        // Main handle shaft\n        for (i = [0:9]) {\n            translate([0, 0, i*5]) {\n                cylinder(h = 5, d1 = 15-i*0.4, d2 = 15-(i+1)*0.4, center = false);\n            }\n        }\n        \n        // Leather grip rings\n        for (i = [1:3]) {\n            color([0.1, 0.1, 0.1]) {\n                translate([0, 0, i*12]) {\n                    cylinder(h = 2, d = 16, center = false);\n                }\n            }\n        }\n        \n        // End knob\n        sphere(d = 18);\n    }\n}\n\nmodule axe_head() {\n    color(color_iron) {\n        // Main blade body\n        difference() {\n            // Forged iron blade\n            translate([-20, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    scale([1, 0.3, 1]) {\n                        sphere(d = 60);\n                    }\n                }\n            }\n            \n            // Hollow socket\n            translate([0, 0, -10]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 30, d = 16, center = true);\n                }\n            }\n            \n            // Blade edge bevel\n            translate([-35, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cube([30, 30, 8], center = true);\n                }\n            }\n        }\n        \n        // Socket collar\n        color(color_bronze) {\n            translate([-5, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 12, d1 = 20, d2 = 22, center = true);\n                }\n            }\n        }\n        \n        // Decorative rivets\n        for (angle = [0:120:240]) {\n            color(color_bronze) {\n                rotate([0, angle, 0]) {\n                    translate([-8, 0, 10]) {\n                        cylinder(h = 3, d = 4, center = true);\n                    }\n                }\n            }\n        }\n        \n        // Blade fuller\n        translate([-15, 0, 0]) {\n            rotate([0, 90, 0]) {\n                scale([0.8, 0.5, 0.1]) {\n                    cylinder(h = 30, d = 50, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule francisca() {\n    union() {\n        // Assemble components\n        translate([0, 0, 0]) {\n            handle();\n        }\n        \n        translate([0, 0, 55]) {\n            rotate([0, 0, 45]) {\n                axe_head();\n            }\n        }\n        \n        // Hanging loop\n        color(color_bronze) {\n            translate([-20, 0, 20]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        torus(rot = 90, r1 = 3, r2 = 1);\n                        translate([3, 0, 0]) {\n                            cube([6, 6, 6], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Scale for 3D printing (total length ~80mm)\nscale(0.8) {\n    francisca();\n}",
    "renders": true
  },
  {
    "historical_artifact": "seax",
    "openscad_code": "// Seax historical artifact - OpenSCAD model\n// Viking age single-edged knife with typical geometric decorations\n\n// Overall dimensions (mm)\nblade_length = 70;\nblade_width = 18;\nhandle_length = 30;\nhandle_width = 12;\ntotal_length = blade_length + handle_length;\n\n// Blade module with characteristic broken-back profile\nmodule blade() {\n    difference() {\n        // Main blade shape\n        translate([0, 0, 2]) {\n            hull() {\n                // Tip\n                translate([blade_length-8, 0, 0])\n                    cube([8, blade_width*0.3, 4], center=true);\n                // Base\n                translate([0, 0, 0])\n                    cube([12, blade_width, 4], center=true);\n                // Mid section\n                translate([blade_length*0.6, 0, 0])\n                    cube([8, blade_width*0.5, 4], center=true);\n            }\n        }\n        \n        // Fuller groove\n        translate([blade_length*0.3, 0, 3])\n            cube([blade_length*0.4, blade_width*0.2, 2], center=true);\n            \n        // Edge bevel\n        translate([0, -blade_width/2, 1])\n            rotate([0, 45, 0])\n            cube([blade_length, 3, 3]);\n    }\n    \n    // Decorative pattern along spine\n    for(i = [1:5:blade_length-10]) {\n        translate([i, 0, 4.5])\n            cube([3, 2, 1], center=true);\n    }\n}\n\n// Handle with typical Viking wire wrap\nmodule handle() {\n    // Core\n    color(\"burlywood\") {\n        translate([-handle_length, 0, 0])\n            cube([handle_length, handle_width, 8], center=true);\n    }\n    \n    // Wire wrap pattern\n    color(\"goldenrod\") {\n        for(i = [0:3]) {\n            translate([-handle_length*0.8 + i*6, 0, 4])\n                rotate([0, 90, 0])\n                cylinder(h=handle_width*1.2, r=0.5, center=true);\n        }\n    }\n    \n    // Pommel cap\n    color(\"silver\") {\n        translate([-handle_length-2, 0, 0])\n            difference() {\n                sphere(d=handle_width*1.2);\n                translate([0, 0, -handle_width*0.6])\n                    cube([handle_width*1.2, handle_width*1.2, handle_width*1.2], center=true);\n            }\n    }\n}\n\n// Hilt with guard\nmodule hilt() {\n    color(\"silver\") {\n        // Guard\n        translate([0, 0, 0])\n            cube([6, handle_width*1.5, 2], center=true);\n            \n        // Hilt collar\n        translate([-2, 0, 3])\n            cylinder(h=4, r=handle_width/2+1, center=true);\n    }\n}\n\n// Tang (hidden)\nmodule tang() {\n    translate([-handle_length/2, 0, 2])\n        cube([handle_length-4, 6, 4], center=true);\n}\n\n// Assembly\nunion() {\n    // Blade\n    color(\"lightgray\") blade();\n    \n    // Hilt assembly\n    union() {\n        hilt();\n        handle();\n        tang();\n    }\n}\n\n// Display stand\ncolor(\"gray\") {\n    translate([0, 0, -5])\n        cube([total_length+10, 20, 2], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "beardedaxe",
    "openscad_code": "// Bearded Axe - Viking Era Historical Artifact\n// Medium complexity realistic design for 3D printing\n\naxe_scale = 1;\nhandle_length = 80 * axe_scale;\nhandle_diameter = 8 * axe_scale;\nblade_length = 45 * axe_scale;\nblade_thickness = 6 * axe_scale;\nblade_height = 35 * axe_scale;\n\n// Main assembly\nunion() {\n    // Axe handle\n    color([0.4, 0.2, 0.1]) {\n        // Handle shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=16);\n        \n        // Handle grip texture\n        for(i=[0:5:handle_length-15]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=2, d=handle_diameter+1, $fn=16);\n                    cylinder(h=3, d=handle_diameter-1, $fn=16);\n                }\n            }\n        }\n        \n        // Pommel\n        translate([0, 0, handle_length]) {\n            sphere(d=handle_diameter+4, $fn=16);\n        }\n    }\n    \n    // Axe head\n    color([0.5, 0.5, 0.5]) {\n        // Main blade body\n        translate([0, 0, handle_length-15]) {\n            rotate([0, 0, -90]) {\n                // Blade base\n                cube([blade_length, blade_thickness, blade_height], center=true);\n                \n                // Bearded extension\n                translate([-blade_length/2, 0, -blade_height/2]) {\n                    cube([blade_length/2, blade_thickness, blade_height/3], center=false);\n                }\n                \n                // Cutting edge bevel\n                translate([blade_length/2-2, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=blade_thickness*1.2, r1=2, r2=0, $fn=8);\n                    }\n                }\n                \n                // Beard bevel\n                translate([-blade_length/2+5, 0, -blade_height/2+2]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=blade_thickness*1.2, r1=2, r2=0, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Eye for handle\n        translate([0, 0, handle_length-15]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=15, d=12, $fn=16);\n                    cylinder(h=16, d=handle_diameter+1, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Decorative runic inscriptions\n    color([0.3, 0.3, 0.3]) {\n        // Runic pattern on blade\n        translate([0, blade_thickness/2+0.1, handle_length-15]) {\n            rotate([0, 0, -90]) {\n                for(i=[-15:10:15]) {\n                    translate([i, 0, 5]) {\n                        cube([1, 0.2, 8]);\n                    }\n                }\n            }\n        }\n        \n        // Geometric pattern on handle\n        color([0.3, 0.3, 0.3]) {\n            for(i=[10:10:handle_length-20]) {\n                translate([0, 0, i]) {\n                    rotate([0, 0, 45]) {\n                        difference() {\n                            cube([3, 3, 2], center=true);\n                            cube([2, 2, 3], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "daneaxe",
    "openscad_code": "// Dane Axe - Historical Viking Weapon\n// Medium complexity realistic model\n\naxe_length = 90; // mm\nhandle_diameter = 6;\nblade_width = 25;\nblade_height = 40;\nsocket_length = 15;\n\n// Colors\nwood_color = [0.6, 0.4, 0.2];\nsteel_color = [0.7, 0.7, 0.75];\nbronze_color = [0.8, 0.5, 0.2];\n\n// Main assembly\ncolor(wood_color) handle();\ncolor(steel_color) blade();\ncolor(bronze_color) socket();\ncolor(bronze_color) decorative_ring();\n\nmodule handle() {\n    // Main handle shaft\n    translate([0, 0, axe_length/2 - socket_length/2])\n        cylinder(h=axe_length - socket_length, d=handle_diameter, $fn=16);\n    \n    // Handle texture - leather wrap\n    for(i = [0:2:axe_length - socket_length - 10]) {\n        translate([0, 0, i + 5])\n            rotate([0, 0, i*30])\n            difference() {\n                cylinder(h=2, d=handle_diameter + 1, $fn=16);\n                cylinder(h=2.1, d=handle_diameter, $fn=16);\n            }\n    }\n    \n    // Butt end\n    translate([0, 0, 5]) {\n        cylinder(h=3, d=handle_diameter + 2, $fn=16);\n        sphere(d=handle_diameter + 2, $fn=16);\n    }\n}\n\nmodule socket() {\n    // Main socket\n    translate([0, 0, axe_length - socket_length - 5])\n        cylinder(h=socket_length, d1=handle_diameter + 4, d2=handle_diameter + 6, $fn=16);\n    \n    // Socket rivet\n    translate([0, (handle_diameter + 4)/2 + 1, axe_length - socket_length - 2])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=2, $fn=8);\n}\n\nmodule blade() {\n    // Main blade body\n    translate([0, 0, axe_length - socket_length - 5])\n        rotate([0, 0, 0])\n        linear_extrude(height=3)\n        polygon(points=[\n            [0, -handle_diameter/2 - 2],\n            [blade_width - 5, -handle_diameter/2 - 2],\n            [blade_width, -handle_diameter/2],\n            [blade_width, blade_height - 10],\n            [blade_width - 3, blade_height],\n            [0, blade_height - 5],\n            [0, -handle_diameter/2 - 2]\n        ]);\n    \n    // Blade edge reinforcement\n    translate([blade_width - 1, 0, axe_length - socket_length - 5])\n        rotate([0, 90, 0])\n        cylinder(h=blade_height, d=2, $fn=8);\n    \n    // Decorative fuller\n    translate([blade_width/2, 3, axe_length - socket_length - 4])\n        rotate([0, 90, 0])\n        cylinder(h=blade_height - 15, d=1, $fn=8);\n    \n    // Norse knotwork pattern on blade\n    for(i = [1:3]) {\n        translate([i*5, 10, axe_length - socket_length - 2])\n            sphere(d=1, $fn=8);\n        translate([i*5, 20, axe_length - socket_length - 2])\n            sphere(d=1, $fn=8);\n    }\n}\n\nmodule decorative_ring() {\n    // Bronze decorative ring below socket\n    translate([0, 0, axe_length - socket_length - 8])\n        difference() {\n            cylinder(h=2, d=handle_diameter + 6, $fn=32);\n            cylinder(h=2.1, d=handle_diameter + 2, $fn=32);\n        }\n    \n    // Ring decorations\n    for(i = [0:30:360]) {\n        rotate([0, 0, i])\n            translate([0, (handle_diameter + 4)/2, axe_length - socket_length - 7])\n            sphere(d=1, $fn=6);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "skeggox",
    "openscad_code": "// Skeggox (Viking Axe) - Historical Artifact\n// Based on 10th-11th century Norse design\n// Size: 85mm total length\n\n// Colors\nblade_color = \"Silver\";\nhaft_color = \"SaddleBrown\";\npommel_color = \"DarkGoldenrod\";\ndecoration_color = \"Gold\";\n\n// Main module\nmodule skeggox() {\n    // Axe blade\n    union() {\n        // Main blade body\n        color(blade_color)\n        translate([0, 0, 15])\n        rotate([0, 0, -15])\n        difference() {\n            // Blade shape\n            union() {\n                // Upper blade curve\n                translate([-30, 0, 0])\n                scale([1, 0.7, 0.2])\n                sphere(d=60);\n                \n                // Lower blade extension (beard)\n                translate([-45, -25, 0])\n                scale([1.2, 0.8, 0.2])\n                sphere(d=40);\n                \n                // Connecting body\n                translate([-20, -10, 0])\n                scale([2, 0.8, 0.2])\n                cube([30, 20, 5]);\n            }\n            \n            // Cut hole for haft\n            translate([10, 0, -2])\n            rotate([0, 0, 15])\n            cylinder(h=10, d=12);\n        }\n        \n        // Blade edge reinforcement\n        color(\"Gray\")\n        translate([-48, -30, 14])\n        rotate([0, 0, -15])\n        linear_extrude(height=0.5)\n        polygon(points=[\n            [0, 0], [15, 8], [35, 10], [50, 5], [55, 0],\n            [50, -5], [35, -10], [15, -8], [0, 0]\n        ]);\n    }\n    \n    // Haft (handle)\n    color(haft_color)\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=70, d1=12, d2=10);\n    \n    // Haft decorations\n    for(i = [1:3]) {\n        color(decoration_color)\n        translate([0, 0, 15 + i * 15])\n        rotate([90, 0, 0])\n        cylinder(h=2, d=15);\n    }\n    \n    // Runic inscription\n    color(\"Black\")\n    translate([0, 7, 20])\n    rotate([0, 90, 0])\n    linear_extrude(height=0.5)\n    text(\"ᚦᛟᚱ\", size=5, halign=\"center\");\n    \n    // Pommel/wedge\n    color(pommel_color)\n    translate([0, 0, 68])\n    rotate([90, 0, 0])\n    cylinder(h=8, d1=12, d2=16);\n    \n    // Steel collar\n    color(\"Gray\")\n    translate([0, 0, 68])\n    rotate([90, 0, 0])\n    cylinder(h=5, d=18);\n    \n    // Decorative rivets\n    for(i = [0:3]) {\n        angle = i * 90;\n        color(\"Gray\")\n        translate([8 * cos(angle), 8 * sin(angle), 70])\n        cylinder(h=2, d=3);\n    }\n}\n\n// Render the axe\nskeggox();",
    "renders": true
  },
  {
    "historical_artifact": "broadaxe",
    "openscad_code": "// Broadaxe historical artifact - realistic style, medium complexity\n// Based on Viking era broadaxe design (9th-11th century)\n\naxe_length = 90;\nhandle_length = 70;\nblade_width = 45;\nblade_thickness = 3;\nsocket_length = 20;\nsocket_diameter = 12;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255];\nsteel_color = [192/255, 192/255, 192/255];\nleather_color = [101/255, 67/255, 33/255];\n\nmodule handle() {\n    color(wood_color) \n    difference() {\n        // Main handle\n        rotate([0, 90, 0]) \n        cylinder(h=handle_length, d1=socket_diameter-2, d2=10, $fn=16);\n        \n        // Grip grooves\n        for(i = [1:5]) {\n            translate([0, 0, i*12-5])\n            rotate([0, 90, 0])\n            cube([10, 2, 2], center=true);\n        }\n    }\n    \n    // Leather grip wrapping\n    color(leather_color)\n    for(i = [0:3]) {\n        translate([0, 0, i*15-15])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=12, d=11.5, $fn=8);\n            cylinder(h=12.1, d=10.5, $fn=8);\n        }\n    }\n}\n\nmodule blade() {\n    color(steel_color)\n    union() {\n        // Main blade body\n        translate([0, 0, -blade_thickness/2])\n        linear_extrude(height=blade_thickness)\n        polygon([\n            [0, 0],\n            [blade_width/2, 0],\n            [blade_width/2-5, blade_width/2],\n            [0, blade_width/2+5],\n            [-blade_width/2+5, blade_width/2],\n            [-blade_width/2, 0]\n        ]);\n        \n        // Reinforcement ridge\n        translate([0, 5, -blade_thickness/2-1])\n        cube([blade_width-10, 15, blade_thickness+2], center=true);\n        \n        // Socket connection\n        translate([0, -socket_length/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=socket_length, d=socket_diameter+4, $fn=16);\n        \n        // Decorative runic inscriptions on blade\n        for(i = [0:2]) {\n            translate([i*8-8, blade_width/2-2, blade_thickness/2+0.1])\n            cube([1.5, 4, 0.5]);\n        }\n        \n        // Blade edge bevel\n        translate([0, 0, blade_thickness/2])\n        linear_extrude(height=1)\n        offset(r=-1)\n        polygon([\n            [0, 0],\n            [blade_width/2, 0],\n            [blade_width/2-5, blade_width/2],\n            [0, blade_width/2+5],\n            [-blade_width/2+5, blade_width/2],\n            [-blade_width/2, 0]\n        ]);\n    }\n}\n\nmodule socket_rivet() {\n    color(steel_color)\n    union() {\n        // Rivet head\n        translate([0, -socket_length/2+3, 0])\n        rotate([0, 90, 0])\n        cylinder(h=2, d=3, $fn=16);\n        \n        // Rivet shaft\n        translate([0, -socket_length/2, 0])\n        rotate([0, 90, 0])\n        cylinder(h=socket_length, d=1.5, $fn=16);\n    }\n}\n\n// Main assembly\ntranslate([0, -handle_length/2, 0]) {\n    handle();\n    \n    translate([0, 0, 0])\n    rotate([0, 0, 0])\n    blade();\n    \n    // Rivet through socket and handle\n    translate([0, 0, socket_diameter/2+2])\n    socket_rivet();\n    \n    translate([0, 0, -socket_diameter/2-2])\n    socket_rivet();\n}",
    "renders": true
  },
  {
    "historical_artifact": "handaxe",
    "openscad_code": "// Handaxe - Paleolithic Acheulean style, 3D printable\n// Size: ~90mm length, based on typical Acheulean handaxes\n\nmodule handaxe() {\n    color(\"SaddleBrown\") {\n        difference() {\n            // Main biface body - almond shape\n            union() {\n                // Upper half\n                scale([1, 0.6, 0.15]) \n                    sphere(d=80, $fn=60);\n                \n                // Lower half, mirrored\n                mirror([0, 1, 0])\n                    scale([1, 0.6, 0.15]) \n                        sphere(d=80, $fn=60);\n            }\n            \n            // Create pointed tip\n            translate([35, 0, -10])\n                rotate([0, 90, 0])\n                    cylinder(h=40, r1=20, r2=0, $fn=30);\n            \n            // Create rounded base\n            translate([-35, 0, -10])\n                rotate([0, 90, 0])\n                    cylinder(h=30, r1=20, r2=0, $fn=30);\n        }\n        \n        // Add flake scars for realism\n        for(i = [-30:15:30]) {\n            for(j = [-20:10:20]) {\n                if(i != 0 && j != 0) {\n                    translate([i, j, 2])\n                        rotate([0, 0, rand(i*j)*45])\n                            scale([1, 1, 0.3])\n                                sphere(d=8, $fn=6);\n                }\n            }\n        }\n        \n        // Add transverse percussion ripples on both faces\n        for(k = [-5:2:5]) {\n            translate([k*5, 0, -1])\n                rotate([90, 0, 0])\n                    cylinder(h=0.5, r=30-k*k, $fn=40);\n        }\n        \n        // Thicken edges for 3D printing\n        difference() {\n            // Outer shell\n            scale([1.05, 1.05, 1.1])\n                handaxe_core();\n            \n            // Inner hollow\n            scale([0.9, 0.9, 0.8])\n                handaxe_core();\n        }\n    }\n}\n\n// Core shape module for reuse\nmodule handaxe_core() {\n    union() {\n        scale([1, 0.6, 0.15]) \n            sphere(d=80, $fn=60);\n        mirror([0, 1, 0])\n            scale([1, 0.6, 0.15]) \n                sphere(d=80, $fn=60);\n    }\n}\n\n// Create the artifact\nhandaxe();\n\n// Add subtle color variation for patina\ntranslate([0, 0, 5])\n    color(\"Burlywood\", 0.3)\n        scale([0.99, 0.99, 0.1])\n            handaxe_core();",
    "renders": true
  },
  {
    "historical_artifact": "tomahawk",
    "openscad_code": "// Historical Tomahawk - Eastern Woodlands style circa 1750-1800\n// Features forged iron head with pipe bowl and decorative brass tacks\n\n// Overall scale factor for 3D printing\nscale_factor = 0.5;\n\n// Colors\ncolor_wood = [139/255, 69/255, 19/255];\ncolor_iron = [105/255, 105/255, 105/255];\ncolor_brass = [181/255, 166/255, 66/255];\n\n// Handle module with traditional pipe stem\nmodule handle() {\n    color(color_wood) {\n        // Main handle shaft\n        translate([0, 0, 50]) \n            cylinder(h=100, r1=6, r2=5, $fn=20);\n        \n        // Pipe stem end\n        translate([0, 0, 5]) \n            cylinder(h=10, r1=3, r2=2, $fn=16);\n    }\n}\n\n// Iron blade with traditional bevel\nmodule blade() {\n    color(color_iron) {\n        union() {\n            // Main blade body\n            translate([0, -15, 110])\n                rotate([90, 0, 0])\n                    cylinder(h=30, r1=20, r2=12, $fn=3);\n            \n            // Blade cutting edge\n            translate([0, -25, 110])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r1=22, r2=14, $fn=3);\n            \n            // Pipe bowl\n            translate([0, -5, 120])\n                cylinder(h=15, r1=6, r2=4, $fn=16);\n            \n            // Eye for handle\n            translate([0, 0, 115])\n                rotate([90, 0, 0])\n                    cylinder(h=15, r1=6, $fn=16);\n                \n            // Reinforcement collar\n            translate([0, 0, 110])\n                cylinder(h=5, r1=7, r2=6, $fn=16);\n        }\n    }\n}\n\n// Decorative brass tacks\nmodule brass_tacks() {\n    color(color_brass) {\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n                translate([5, 0, 75 + i*15])\n                    cylinder(h=1, r=2, $fn=16);\n        }\n    }\n}\n\n// Traditional geometric filework on blade spine\nmodule filework() {\n    color(color_iron) {\n        for(i = [0:5]) {\n            translate([0, -10 + i*2, 125])\n                cube([1, 1, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    handle();\n    blade();\n    brass_tacks();\n    filework();\n}",
    "renders": true
  },
  {
    "historical_artifact": "throwingaxe",
    "openscad_code": "// Viking Throwing Axe (Franska) - 9th-11th Century\n// Based on archaeological finds from Birka, Sweden\n\n// Overall dimensions (mm) - suitable for 3D printing\ntotal_length = 85;\nblade_width = 40;\nhandle_length = 65;\n\n// Colors\niron_color = [0.5, 0.5, 0.5];\nwood_color = [0.6, 0.4, 0.2];\nleather_color = [0.3, 0.2, 0.1];\n\nmodule handle() {\n    // Main wooden handle with taper\n    color(wood_color)\n    union() {\n        // Handle shaft - slightly tapered\n        cylinder(h = handle_length, r1 = 5, r2 = 4, $fn = 8);\n        \n        // Leather wrapping at grip\n        translate([0, 0, 15])\n        color(leather_color)\n        for(i = [0:3]) {\n            translate([0, 0, i*2])\n            cylinder(h = 1.5, r = 5.5, $fn = 8);\n        }\n        \n        // End knob\n        translate([0, 0, handle_length])\n        sphere(r = 5.5, $fn = 8);\n    }\n}\n\nmodule blade() {\n    color(iron_color)\n    union() {\n        // Main blade body - bearded axe style\n        translate([0, 0, handle_length - 10])\n        rotate([0, 90, 0])\n        difference() {\n            // Blade shape\n            union() {\n                // Main cutting edge\n                translate([0, 0, 0])\n                cube([35, blade_width, 3], center = true);\n                \n                // Upswept toe\n                translate([15, 0, 1.5])\n                rotate([0, 0, 20])\n                cube([10, 8, 3], center = true);\n                \n                // Beard extension\n                translate([-15, 0, -1.5])\n                rotate([0, 0, -30])\n                cube([15, 10, 3], center = true);\n            }\n            \n            // Hollow grind (slightly concave)\n            translate([0, 0, 2])\n            cube([50, blade_width + 2, 1], center = true);\n        }\n        \n        // Blade socket - wraps around handle\n        translate([0, 0, handle_length - 15])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 15, r = 7, $fn = 8);\n            cylinder(h = 15, r = 4.5, $fn = 8);\n        }\n        \n        // Decorative rivets on blade\n        translate([5, 0, handle_length - 10])\n        for(i = [0:1]) {\n            translate([i*8 - 4, 0, 0])\n            rotate([90, 0, 0])\n            color([0.3, 0.3, 0.3])\n            cylinder(h = 2, r = 1.5, $fn = 6);\n        }\n        \n        // Runic inscription on blade\n        translate([-10, 12, handle_length - 10])\n        rotate([90, 0, 0])\n        linear_extrude(height = 0.5)\n        text(\"ᚱᛁᚲ\", size = 4, halign = \"center\");\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    blade();\n}",
    "renders": true
  },
  {
    "historical_artifact": "battleaxe",
    "openscad_code": "// Battleaxe - Historical Artifact (Viking style, 9-11th century)\n// Realistic style, medium complexity\n\n$fn=32;\n\n// Colors\ncolor_blade = \"#C0C0C0\";\ncolor_handle = \"#8B4513\";\ncolor_leather = \"#654321\";\ncolor_steel = \"#A8A8A8\";\n\n// Overall scale\nscale_factor = 0.7;\n\nmodule battleaxe() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Axe head\n            translate([0, 0, 60]) {\n                color(color_blade) {\n                    difference() {\n                        // Main blade body\n                        union() {\n                            // Blade\n                            translate([-30, -3, 0]) {\n                                cube([60, 6, 25]);\n                            }\n                            // Blade curve\n                            translate([-25, -3, 0]) {\n                                rotate([0, 0, 30]) {\n                                    cube([40, 6, 20]);\n                                }\n                            }\n                            // Beard\n                            translate([-20, -3, -15]) {\n                                cube([25, 6, 15]);\n                            }\n                        }\n                        // Bevels\n                        translate([-28, -4, 10]) {\n                            rotate([0, 30, 0]) {\n                                cube([35, 8, 10]);\n                            }\n                        }\n                        translate([-28, -4, 5]) {\n                            rotate([0, -30, 0]) {\n                                cube([35, 8, 10]);\n                            }\n                        }\n                    }\n                    \n                    // Decorative rivets\n                    for(i = [0:2]) {\n                        translate([-15 + i*15, 0, 12]) {\n                            color(color_steel) {\n                                cylinder(h=8, r=2, $fn=16);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Haft (handle)\n            color(color_handle) {\n                cylinder(h=100, r=4, center=true);\n            }\n            \n            // Leather wrap\n            color(color_leather) {\n                for(i = [0:4]) {\n                    translate([0, 0, -40 + i*15]) {\n                        rotate([0, 0, 45]) {\n                            difference() {\n                                cylinder(h=8, r=5, $fn=4);\n                                cylinder(h=10, r=4.5, $fn=4);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Pommel\n            translate([0, 0, -50]) {\n                color(color_steel) {\n                    sphere(r=6);\n                    // Decorative ring\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h=2, r=8);\n                            cylinder(h=3, r=6);\n                        }\n                    }\n                }\n            }\n            \n            // Cross guard\n            translate([0, 0, 45]) {\n                color(color_steel) {\n                    cube([20, 4, 8], center=true);\n                    // Side rings\n                    translate([10, 0, 0]) {\n                        rotate([0, 90, 0]) {\n                            difference() {\n                                cylinder(h=4, r=3);\n                                cylinder(h=5, r=2);\n                            }\n                        }\n                    }\n                    translate([-10, 0, 0]) {\n                        rotate([0, 90, 0]) {\n                            difference() {\n                                cylinder(h=4, r=3);\n                                cylinder(h=5, r=2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the battleaxe\nbattleaxe();",
    "renders": true
  },
  {
    "historical_artifact": "warhammer",
    "openscad_code": "// Warhammer Artifact - 11th Century Norman Horseman's Mace\n// Based on archaeological finds from Battle Abbey, England\n\n// Overall dimensions for 3D printing\n$fn = 32;\n\n// Main module for the complete warhammer\nmodule warhammer() {\n    // Handle shaft\n    color(\"SaddleBrown\") \n    translate([0, 0, -40]) \n    cylinder(h=80, d=8, center=true);\n    \n    // Leather grip wrapping\n    color(\"DarkBrown\")\n    for(i = [-30:5:25]) {\n        translate([0, 0, i]) \n        rotate([0, 0, i*15]) \n        scale([1, 0.3, 1]) \n        cylinder(h=5, d=10, center=true);\n    }\n    \n    // Pommel counterweight\n    color(\"DarkGoldenrod\")\n    translate([0, 0, -42]) \n    sphere(d=12);\n    \n    // Mace head - octagonal flanges\n    color(\"DarkGoldenrod\") {\n        union() {\n            // Central core\n            translate([0, 0, 10]) \n            cylinder(h=25, d=20, center=true);\n            \n            // Eight flanges\n            for(i = [0:45:360-45]) {\n                rotate([0, 0, i]) \n                translate([12, 0, 10]) \n                cube([8, 4, 25], center=true);\n            }\n            \n            // Decorative rivets\n            for(i = [22.5:45:360-22.5]) {\n                rotate([0, 0, i]) \n                translate([16, 0, 22]) \n                color(\"DarkGray\") \n                sphere(d=3);\n            }\n        }\n    }\n    \n    // Back spike\n    color(\"DarkGoldenrod\") \n    translate([0, 0, 25]) {\n        // Spike base\n        cylinder(h=8, d=16, center=true);\n        \n        // Spike point\n        translate([0, 0, 8]) \n        cone(h=15, d1=16, d2=2);\n    }\n    \n    // Front hammer face\n    color(\"DarkGoldenrod\") \n    translate([0, 0, -5]) {\n        // Hammer face\n        cube([20, 20, 6], center=true);\n        \n        // Reinforcement ridges\n        for(i = [-6:6:6]) {\n            translate([i, 0, -3]) \n            cube([2, 20, 6], center=true);\n        }\n        for(i = [-6:6:6]) {\n            translate([0, i, -3]) \n            cube([20, 2, 6], center=true);\n        }\n    }\n    \n    // Inscription band\n    color(\"DarkGray\") \n    translate([0, 0, 10]) \n    difference() {\n        cylinder(h=5, d=22, center=true);\n        // Decorative pattern holes\n        for(i = [0:30:360-30]) {\n            rotate([0, 0, i]) \n            translate([10, 0, 0]) \n            cylinder(h=6, d=2, center=true);\n        }\n    }\n    \n    // Hanging ring\n    color(\"DarkGoldenrod\") \n    translate([0, 12, 10]) \n    rotate([90, 0, 0]) \n    difference() {\n        cylinder(h=1, d=6, center=true);\n        cylinder(h=2, d=3, center=true);\n    }\n}\n\n// Render the complete warhammer\nwarhammer();",
    "renders": true
  },
  {
    "historical_artifact": "maul",
    "openscad_code": "// Viking Era Maul - Historical Artifact Reproduction\n// Based on 10th-11th century Scandinavian battle mauls\n// Scale: 1:10 for 3D printing (approx 80mm total length)\n\n// Color definitions for realistic appearance\n$fn = 32;\n\n// Main maul head - rectangular with slight taper\nmodule maul_head() {\n    color(\"SaddleBrown\") {\n        // Central striking block\n        translate([0, 0, 15]) {\n            difference() {\n                cube([28, 22, 35], center=true);\n                // Historical taper on sides\n                translate([0, -12, 0]) {\n                    rotate([0, 15, 0])\n                    cube([32, 25, 35], center=true);\n                }\n                translate([0, 12, 0]) {\n                    rotate([0, -15, 0])\n                    cube([32, 25, 35], center=true);\n                }\n            }\n        }\n        \n        // Reinforcement langets (historical riveted strips)\n        for(i = [-1, 1]) {\n            translate([i * 10, 0, 15]) {\n                color(\"Goldenrod\") difference() {\n                    cube([3, 20, 40], center=true);\n                    // Rivet holes\n                    for(h = [-15, -5, 5, 15]) {\n                        translate([0, 0, h])\n                        cylinder(h=4, d=2, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Decorative Nordic knotwork panel (simplified)\n        translate([0, 12, 30]) {\n            rotate([90, 0, 0])\n            linear_extrude(height=2)\n            polygon(points=[\n                [-10, -5], [-8, -2], [-5, -2], [-3, 0],\n                [-5, 2], [-8, 2], [-10, 5], [-8, 3],\n                [-5, 3], [-3, 5], [-1, 3], [1, 5],\n                [3, 3], [5, 5], [8, 3], [10, 5],\n                [8, 2], [5, 2], [3, 0], [5, -2],\n                [8, -2], [10, -5], [8, -3], [5, -3],\n                [3, -5], [1, -3], [-1, -5], [-3, -3],\n                [-5, -5], [-8, -3]\n            ]);\n        }\n    }\n}\n\n// Historical wooden haft with traditional proportions\nmodule haft() {\n    color(\"BurlyWood\") {\n        // Main haft - slightly tapered octagonal\n        translate([0, 0, -30]) {\n            cylinder(h=60, d1=12, d2=10);\n        }\n        \n        // Leather grip winding\n        color(\"SaddleBrown\") {\n            translate([0, 0, -35]) {\n                for(i = [0:5:25]) {\n                    rotate([0, 0, i * 15])\n                    translate([0, 5.5, i])\n                    rotate([90, 0, 0])\n                    cylinder(h=5, d=1.5, center=true);\n                }\n            }\n        }\n        \n        // End cap with historical ring\n        translate([0, 0, -60]) {\n            color(\"Goldenrod\") {\n                cylinder(h=5, d=14);\n                translate([0, 0, -2.5])\n                cylinder(h=2, d=16);\n            }\n        }\n    }\n}\n\n// Assembly of complete maul\nunion() {\n    // Position head at top of haft\n    translate([0, 0, 30]) {\n        maul_head();\n    }\n    \n    // Add haft\n    haft();\n}",
    "renders": true
  },
  {
    "historical_artifact": "morningstar",
    "openscad_code": "// Morningstar historical artifact (late medieval period, 15th century)\n// Designed for 3D printing - 80mm overall length\n\n// Color definitions\nwood_color = [139/255, 69/255, 19/255];\niron_color = [0.4, 0.4, 0.4];\nbrass_color = [0.8, 0.6, 0.2];\n\n// Main module\nmodule morningstar() {\n    // Handle assembly\n    translate([0, 0, 0]) {\n        handle();\n        pommel();\n        guard();\n    }\n    \n    // Head assembly\n    translate([0, 0, 50]) {\n        head();\n    }\n}\n\n// Wooden handle with leather wrap texture\nmodule handle() {\n    color(wood_color) {\n        cylinder(h=50, r=5, $fn=16);\n        \n        // Leather wrap bands\n        for(i = [5:10:45]) {\n            translate([0, 0, i]) {\n                scale([1.05, 1.05, 0.5]) {\n                    cylinder(h=3, r=5, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Decorative pommel with ring\nmodule pommel() {\n    translate([0, 0, -3]) {\n        color(brass_color) {\n            cylinder(h=6, r=7, $fn=32);\n            \n            // Ring loop\n            rotate([90, 0, 0]) {\n                difference() {\n                    torus(4, 1.5);\n                    translate([0, 0, -1.5]) {\n                        cube([8, 8, 3], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Hand guard\nmodule guard() {\n    translate([0, 0, 47]) {\n        color(iron_color) {\n            difference() {\n                cylinder(h=3, r=15, $fn=32);\n                cylinder(h=3.5, r=4.5, $fn=16);\n            }\n            \n            // Decorative rivets\n            for(i = [0:45:315]) {\n                rotate([0, 0, i]) {\n                    translate([12, 0, 1.5]) {\n                        cylinder(h=1, r=1.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Spiked head\nmodule head() {\n    color(iron_color) {\n        // Main ball\n        sphere(r=12, $fn=32);\n        \n        // Six symmetrical spikes\n        for(phi = [0:60:300]) {\n            rotate([0, 0, phi]) {\n                rotate([0, 90, 0]) {\n                    spike();\n                }\n            }\n            \n            // Additional spikes at 45 degrees\n            rotate([0, 45, phi]) {\n                rotate([0, 90, 0]) {\n                    spike();\n                }\n            }\n        }\n        \n        // Reinforcement band\n        translate([0, 0, 8]) {\n            cylinder(h=2, r=13, $fn=32);\n        }\n        \n        // Connection socket\n        translate([0, 0, -12]) {\n            cylinder(h=10, r=5, $fn=16);\n        }\n    }\n}\n\n// Individual spike module\nmodule spike() {\n    translate([12, 0, 0]) {\n        difference() {\n            // Main spike body\n            union() {\n                cylinder(h=12, r=3, $fn=8);\n                translate([12, 0, 0]) {\n                    sphere(r=3, $fn=8);\n                }\n            }\n            \n            // Hollow tip for printing\n            translate([12, 0, 0]) {\n                sphere(r=2.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Torus helper module\nmodule torus(outer_radius, inner_radius) {\n    rotate_extrude($fn=32) {\n        translate([outer_radius - inner_radius, 0, 0]) {\n            circle(r=inner_radius, $fn=16);\n        }\n    }\n}\n\n// Generate the artifact\nmorningstar();",
    "renders": true
  },
  {
    "historical_artifact": "flail",
    "openscad_code": "// Historical Medieval Flail (Medium Complexity)\n// Realistic style with decorative elements and proper proportions\n\n$fn = 100;\n\n// Main colors\nwood_color = \"#8B4513\";\nmetal_color = \"#C0C0C0\";\nleather_color = \"#8B4513\";\n\n// Overall scale factor for 3D printing\nscale_factor = 0.5;\n\nmodule handle() {\n    color(wood_color) {\n        // Main handle cylinder\n        cylinder(h = 80 * scale_factor, r = 5 * scale_factor);\n        \n        // Leather grip rings\n        translate([0, 0, 10 * scale_factor])\n            for(i = [0:3]) {\n                translate([0, 0, i * 15 * scale_factor])\n                    color(leather_color)\n                        cylinder(h = 3 * scale_factor, r = 6 * scale_factor);\n            }\n        \n        // Decorative end cap\n        translate([0, 0, 82 * scale_factor])\n            color(metal_color)\n                cylinder(h = 8 * scale_factor, r1 = 6 * scale_factor, r2 = 4 * scale_factor);\n    }\n}\n\nmodule chain_link() {\n    // Single chain link\n    color(metal_color) {\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 8 * scale_factor, r = 1.5 * scale_factor);\n                translate([0, -4 * scale_factor, 0])\n                    cube([3 * scale_factor, 8 * scale_factor, 3 * scale_factor], center = true);\n            }\n    }\n}\n\nmodule chain(length = 5) {\n    // Construct chain from individual links\n    for(i = [0:length-1]) {\n        rotate([0, 90 * i, 0])\n            translate([0, 0, i * 8 * scale_factor])\n                chain_link();\n    }\n}\n\nmodule spiked_ball() {\n    color(metal_color) {\n        difference() {\n            // Main ball\n            sphere(r = 12 * scale_factor);\n            \n            // Cut flat bottom for chain attachment\n            translate([0, 0, -12 * scale_factor])\n                cube([30 * scale_factor, 30 * scale_factor, 15 * scale_factor], center = true);\n            \n            // Attachment hole\n            translate([0, 0, -10 * scale_factor])\n                cylinder(h = 15 * scale_factor, r = 2 * scale_factor);\n        }\n        \n        // Spikes\n        for(i = [0:7]) {\n            rotate([0, i * 45, 0])\n                rotate([30, 0, 0])\n                    translate([0, 0, 12 * scale_factor])\n                        cylinder(h = 8 * scale_factor, r1 = 3 * scale_factor, r2 = 1 * scale_factor);\n        }\n        \n        // Decorative band\n        translate([0, 0, 8 * scale_factor])\n            rotate([0, 0, 0])\n                cylinder(h = 2 * scale_factor, r = 13 * scale_factor);\n    }\n}\n\n// Assemble the flail\ntranslate([0, 0, 0])\n    handle();\n\ntranslate([0, 0, 80 * scale_factor])\n    chain(3);\n\ntranslate([0, 0, 80 * scale_factor + 24 * scale_factor])\n    rotate([0, 90, 0])\n        spiked_ball();",
    "renders": true
  },
  {
    "historical_artifact": "mace",
    "openscad_code": "// Historical Medieval Mace (14th Century German Style)\n// Overall dimensions: 180mm total length, 60mm head diameter\n\n$fn = 64;\n\n// Main colors for artifact\ncolor_steel = [0.5, 0.5, 0.55];\ncolor_wood = [0.4, 0.25, 0.1];\ncolor_bronze = [0.7, 0.4, 0.2];\n\n// Main assembly\nunion() {\n    // Handle\n    color(color_wood)\n    translate([0, 0, -80])\n        cylinder(h=100, d1=20, d2=15);\n    \n    // Handle grip rings\n    for(i = [0:9]) {\n        color(color_wood)\n        translate([0, 0, -75 + i*10])\n            cylinder(h=3, d=22);\n    }\n    \n    // Pommel\n    color(color_bronze)\n    translate([0, 0, -85])\n        sphere(d=25);\n    \n    // Pommel decorative ring\n    color(color_bronze)\n    translate([0, 0, -72])\n        cylinder(h=5, d1=28, d2=24);\n    \n    // Mace head\n    color(color_steel)\n    translate([0, 0, 0])\n        sphere(d=60);\n    \n    // Six flanges around the head\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 30, 0])\n            flange();\n    }\n    \n    // Central decorative band\n    color(color_bronze)\n    translate([0, 0, 0])\n        cylinder(h=8, d=65);\n    \n    // Decorative rivets on band\n    for(i = [0:11]) {\n        color(color_bronze)\n        rotate([0, 0, i*30])\n        translate([32.5, 0, 0])\n            cylinder(h=2, d=5);\n    }\n    \n    // Connection from handle to head\n    color(color_steel)\n    translate([0, 0, -30])\n        cylinder(h=30, d1=20, d2=40);\n}\n\n// Flange module with historical proportions\nmodule flange() {\n    difference() {\n        // Main flange body\n        union() {\n            translate([-8, 0, -20])\n                cube([16, 40, 40]);\n            translate([-8, 40, -20])\n                cube([16, 5, 40]);\n        }\n        \n        // Rounded top edge\n        translate([0, 40, 0])\n            rotate([90, 0, 0])\n                cylinder(h=16, d=40);\n        \n        // Tapered sides\n        translate([-12, 0, -20])\n            cube([24, 45, 5]);\n        translate([-12, 0, 15])\n            cube([24, 45, 5]);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "club",
    "openscad_code": "// Medieval Mace - Historical Club Artifact\n// Based on 14th century European designs\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions\nhandle_length = 80;\nhead_diameter = 35;\nspike_length = 12;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255];  // Dark brown wood\nmetal_color = [192/255, 192/255, 192/255];  // Polished steel\nleather_color = [101/255, 67/255, 33/255];  // Brown leather wrap\n\n// Main assembly\nunion() {\n    // Handle assembly\n    translate([0, 0, -handle_length/2]) {\n        color(wood_color) {\n            // Main wooden handle\n            cylinder(h = handle_length, d = 12, center = true);\n            \n            // Leather grip wrapping\n            for(i = [1:8]) {\n                color(leather_color) {\n                    translate([0, 0, -handle_length/2 + i*10])\n                    rotate([90, 0, 0])\n                    torus(6, 1.5);\n                }\n            }\n        }\n        \n        // Metal pommel\n        translate([0, 0, -handle_length/2 - 8]) {\n            color(metal_color) {\n                sphere(d = 15);\n            }\n        }\n    }\n    \n    // Mace head\n    translate([0, 0, handle_length/2 - 15]) {\n        color(metal_color) {\n            // Main head sphere\n            sphere(d = head_diameter);\n            \n            // Decorative bands\n            for(i = [1:3]) {\n                translate([0, 0, -head_diameter/2 + i*12])\n                cylinder(h = 2, d = head_diameter + 4, center = true);\n            }\n            \n            // Spikes - 8 evenly spaced around head\n            for(i = [0:7]) {\n                rotate([0, 0, i*45]) {\n                    translate([head_diameter/2 + 3, 0, 0]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h = spike_length, d = 4, center = false);\n                        }\n                        sphere(d = 6);\n                    }\n                }\n            }\n            \n            // Top spike\n            translate([0, 0, head_diameter/2 + 6]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h = spike_length + 5, d = 6, center = false);\n                }\n                sphere(d = 8);\n            }\n        }\n    }\n    \n    // Collar between handle and head\n    translate([0, 0, handle_length/2 - 25]) {\n        color(metal_color) {\n            cylinder(h = 8, d = 18, center = true);\n            \n            // Decorative ridges\n            for(i = [0:2]) {\n                translate([0, 0, -4 + i*4])\n                cylinder(h = 1, d = 20, center = true);\n            }\n        }\n    }\n}\n\n// Helper module for torus shape\nmodule torus(outer, inner) {\n    rotate_extrude() {\n        translate([outer - inner, 0, 0])\n        circle(r = inner);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "macehead",
    "openscad_code": "// Medieval Flanged Mace Head (circa 13th-15th century)\n// Realistic reproduction with proper proportions and decorative elements\n\n// Overall dimensions\nmace_diameter = 70;\nmace_height = 90;\nflange_count = 8;\nflange_width = 8;\nflange_height = 60;\nshaft_hole_diameter = 25;\nmin_wall_thickness = 3;\n\n// Main body module\nmodule mace_head() {\n    // Color: dark iron\n    color([0.3, 0.3, 0.35]) {\n        union() {\n            // Central cylindrical core\n            cylinder(h=mace_height, d=mace_diameter, $fn=64);\n            \n            // Reinforcement rings at top and bottom\n            translate([0, 0, 0])\n                cylinder(h=8, d=mace_diameter + 6, $fn=64);\n            translate([0, 0, mace_height - 8])\n                cylinder(h=8, d=mace_diameter + 6, $fn=64);\n            \n            // Decorative band around middle\n            translate([0, 0, mace_height/2 - 4])\n                cylinder(h=8, d=mace_diameter + 4, $fn=64);\n        }\n    }\n}\n\n// Flange generation\nmodule create_flange(index) {\n    angle = (360 / flange_count) * index;\n    \n    color([0.35, 0.35, 0.4]) {\n        translate([0, 0, mace_height/2])\n            rotate([0, 0, angle])\n                translate([mace_diameter/2 - flange_width/2, 0, 0])\n                    cube([flange_width, flange_width/2, flange_height], center=true);\n    }\n}\n\n// Boss details at flange intersections\nmodule flange_boss(index) {\n    angle = (360 / flange_count) * index;\n    \n    color([0.4, 0.4, 0.45]) {\n        translate([0, 0, mace_height/2])\n            rotate([0, 0, angle])\n                translate([mace_diameter/2 - 4, 0, 0])\n                    sphere(d=8, $fn=16);\n    }\n}\n\n// Decorative rivet pattern\nmodule rivet_pattern() {\n    color([0.6, 0.5, 0.4]) {\n        for(i = [0:11]) {\n            angle = i * 30;\n            radius = mace_diameter/2 - 8;\n            \n            // Top rivets\n            translate([cos(angle) * radius, sin(angle) * radius, 4])\n                cylinder(h=2, d=4, $fn=8);\n            \n            // Bottom rivets\n            translate([cos(angle) * radius, sin(angle) * radius, mace_height - 4])\n                cylinder(h=2, d=4, $fn=8);\n        }\n    }\n}\n\n// Central shaft hole\nmodule shaft_hole() {\n    color([0.1, 0.1, 0.1]) {\n        translate([0, 0, -1])\n            cylinder(h=mace_height + 2, d=shaft_hole_diameter, $fn=32);\n        \n        // Chamfer for shaft insertion\n        translate([0, 0, -1])\n            cylinder(h=5, d1=shaft_hole_diameter + 4, d2=shaft_hole_diameter, $fn=32);\n    }\n}\n\n// Engraved decorative bands\nmodule decorative_bands() {\n    color([0.25, 0.25, 0.3]) {\n        // Top band\n        translate([0, 0, mace_height - 15])\n            rotate([0, 0, 0])\n                for(i = [0:7]) {\n                    rotate([0, 0, i * 45])\n                        translate([mace_diameter/2 - 2, 0, 0])\n                            cube([4, 1, 10], center=true);\n                }\n        \n        // Bottom band\n        translate([0, 0, 15])\n            rotate([0, 0, 22.5])\n                for(i = [0:7]) {\n                    rotate([0, 0, i * 45])\n                        translate([mace_diameter/2 - 2, 0, 0])\n                            cube([4, 1, 10], center=true);\n                }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        mace_head();\n        \n        // Generate all flanges\n        for(i = [0:flange_count-1]) {\n            create_flange(i);\n            flange_boss(i);\n        }\n        \n        rivet_pattern();\n        decorative_bands();\n    }\n    \n    // Remove shaft hole\n    shaft_hole();\n}\n\n// Add slight fillet to flange edges for realism\nmodule flange_edge() {\n    color([0.3, 0.3, 0.35]) {\n        for(i = [0:flange_count-1]) {\n            angle = (360 / flange_count) * i;\n            translate([0, 0, mace_height/2])\n                rotate([0, 0, angle])\n                    translate([mace_diameter/2 + flange_width/2 - 2, 0, flange_height/2 - 5])\n                        cylinder(h=10, d=4, $fn=16);\n        }\n    }\n}\n\nflange_edge();",
    "renders": true
  },
  {
    "historical_artifact": "cudgel",
    "openscad_code": "// Medieval Cudgel - Historical Artifact (Realistic, Medium Complexity)\n// Overall length: 80mm, suitable for 3D printing\n\n$fn = 32;\n\n// Main assembly\nmodule cudgel() {\n    // Handle (ash wood)\n    color(\"#8B4513\") {\n        // Main handle shaft\n        translate([0, 0, 5]) cylinder(h = 70, d1 = 8, d2 = 10, center = false);\n        \n        // Grip texture - leather wrapping\n        translate([0, 0, 10]) grip_texture();\n    }\n    \n    // Iron ferrule at base\n    color(\"#2F2F2F\") {\n        translate([0, 0, 0]) cylinder(h = 5, d = 11, center = false);\n    }\n    \n    // Striking head (oak with iron bands)\n    color(\"#654321\") {\n        translate([0, 0, 75]) {\n            // Main head\n            cylinder(h = 15, d = 22, center = false);\n            \n            // Decorative ridges\n            for(i = [0:2]) {\n                translate([0, 0, 2 + i * 4]) cylinder(h = 1, d = 24, center = false);\n            }\n        }\n    }\n    \n    // Iron bands around head\n    color(\"#2F2F2F\") {\n        translate([0, 0, 75]) {\n            for(i = [0:3]) {\n                translate([0, 0, i * 3.75]) cylinder(h = 1.5, d = 23, center = false);\n            }\n        }\n    }\n    \n    // Wrist strap hole\n    color(\"#8B4513\") difference() {\n        translate([0, 0, 5]) cylinder(h = 70, d = 8, center = false);\n        translate([0, 0, 15]) rotate([90, 0, 0]) cylinder(h = 12, d = 3, center = true);\n    }\n}\n\n// Leather grip texture\nmodule grip_texture() {\n    for(i = [0:5]) {\n        translate([0, 0, i * 10]) {\n            // Spiral leather wrapping\n            rotate([0, 0, i * 30]) {\n                difference() {\n                    cylinder(h = 8, d = 10, center = false);\n                    translate([3, 0, 0]) cube([6, 10, 8], center = false);\n                }\n                mirror([1, 0, 0]) {\n                    difference() {\n                        cylinder(h = 8, d = 10, center = false);\n                        translate([3, 0, 0]) cube([6, 10, 8], center = false);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the cudgel\ncudgel();",
    "renders": true
  },
  {
    "historical_artifact": "shillelagh",
    "openscad_code": "// Shillelagh - Historical Irish Walking Stick & Weapon\n// Traditional blackthorn wood with brass ferrule and leather grip\n\n// Color definitions\ncolor_wood = \"#8B4513\";\ncolor_darkwood = \"#5D2906\";\ncolor_metal = \"#B87333\";\ncolor_leather = \"#3C2414\";\n\n// Overall dimensions\ntotal_length = 85;\nhandle_length = 25;\nshaft_diameter = 6;\nhandle_diameter = 10;\n\n// Create the shillelagh\nmodule shillelagh() {\n    union() {\n        // Main shaft\n        color(color_wood) {\n            // Tapered shaft\n            cylinder(h=total_length - handle_length, d1=shaft_diameter, d2=shaft_diameter * 0.8, $fn=16);\n            \n            // Natural wood texture using small bumps\n            for(i = [0:5:total_length - handle_length]) {\n                translate([0, 0, i]) {\n                    rotate([0, 0, i * 15]) {\n                        translate([shaft_diameter/2 + 0.5, 0, 0]) {\n                            sphere(d=1.5, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Brass ferrule at bottom\n        color(color_metal) {\n            translate([0, 0, -2]) {\n                cylinder(h=4, d=shaft_diameter + 2, $fn=16);\n            }\n        }\n        \n        // Characteristic knotted handle\n        color(color_darkwood) {\n            translate([0, 0, total_length - handle_length]) {\n                // Main handle knob\n                sphere(d=handle_diameter * 1.8, $fn=32);\n                \n                // Knob extensions for knotted appearance\n                for(angle = [0:60:300]) {\n                    rotate([0, 0, angle]) {\n                        translate([handle_diameter * 0.7, 0, 0]) {\n                            sphere(d=handle_diameter * 0.8, $fn=16);\n                        }\n                    }\n                }\n                \n                // Connection to shaft\n                translate([0, 0, -handle_length/2]) {\n                    cylinder(h=handle_length, d=handle_diameter, $fn=16);\n                }\n            }\n        }\n        \n        // Leather grip wrapping\n        color(color_leather) {\n            for(i = [0:2:handle_length - 2]) {\n                translate([0, 0, total_length - handle_length + i - handle_length/2]) {\n                    rotate([90, 0, 0]) {\n                        rotate([0, 0, i * 45]) {\n                            // Leather band segments\n                            difference() {\n                                cylinder(h=1.5, d=handle_diameter + 1, $fn=16);\n                                cylinder(h=2, d=handle_diameter + 0.5, $fn=16);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Celtic knot inscription on handle\n        color(color_metal) {\n            for(i = [0:30:359]) {\n                rotate([0, 0, i]) {\n                    translate([handle_diameter * 0.9, 0, total_length - handle_length - 5]) {\n                        sphere(d=0.8, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete shillelagh\ntranslate([0, 0, 0]) {\n    shillelagh();\n}",
    "renders": true
  },
  {
    "historical_artifact": "quarterstaff",
    "openscad_code": "// Historical Quarterstaff Artifact - English Medieval Training Staff\n// Based on 14th-15th century martial arts training staves\n// Features iron ferrules and carved grip markings\n\n// Overall dimensions for 3D printing (scaled down)\nstaff_length = 80;\nstaff_diameter = 4;\nferrule_length = 6;\nferrule_diameter = 5;\n\n// Color definitions\nwood_color = \"#8B4513\";  // Saddle brown for aged oak\niron_color = \"#4A4A4A\";  // Dark iron\nleather_color = \"#3D2914\"; // Dark leather\n\nmodule iron_ferrule() {\n    color(iron_color) {\n        difference() {\n            // Main ferrule cylinder\n            cylinder(h=ferrule_length, d=ferrule_diameter, $fn=32);\n            \n            // Decorative ring grooves\n            for(i = [1:2]) {\n                translate([0, 0, i * ferrule_length/3 - 0.5])\n                    cylinder(h=1, d=ferrule_diameter - 1, $fn=32);\n            }\n        }\n    }\n}\n\nmodule carved_grip_pattern() {\n    color(wood_color) {\n        // Spiral grip carving\n        rotate([90, 0, 0]) {\n            for(angle = [0:30:360]) {\n                rotate([0, 0, angle]) {\n                    translate([staff_diameter/2 - 0.2, -0.5, -10])\n                        cube([0.4, 1, 20]);\n                }\n            }\n        }\n        \n        // Center grip band with diamond pattern\n        translate([0, 0, -2])\n            cylinder(h=4, d=staff_diameter + 0.5, $fn=6);\n        \n        // Diamond texture details\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([staff_diameter/2 + 0.2, 0, 0])\n                    cube([0.5, 0.5, 4], center=true);\n        }\n    }\n}\n\nmodule leather_grip_wrap() {\n    color(leather_color) {\n        // Leather binding at quarter points\n        for(pos = [-20, 20]) {\n            translate([0, 0, pos])\n                cylinder(h=3, d=staff_diameter + 0.5, $fn=32);\n            \n            // Stitching detail\n            for(stitch = [0:36:360]) {\n                rotate([0, 0, stitch]) {\n                    translate([staff_diameter/2 + 0.2, 0, pos + 1.5])\n                        cube([0.3, 0.3, 0.3], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule staff_shaft() {\n    color(wood_color) {\n        // Main shaft with slight taper\n        cylinder(h=staff_length - 2*ferrule_length, d1=staff_diameter, d2=staff_diameter*0.9, $fn=32);\n        \n        // Wood grain texture - subtle rings\n        for(i = [0:2:staff_length - 2*ferrule_length]) {\n            translate([0, 0, i - (staff_length - 2*ferrule_length)/2])\n                scale([1.01, 1.01, 0.1])\n                    cylinder(h=0.2, d=staff_diameter, $fn=32);\n        }\n    }\n}\n\nmodule maker_mark() {\n    color(iron_color) {\n        // Smith's mark near grip\n        translate([0, staff_diameter/2 + 0.1, -5])\n            rotate([90, 0, 0])\n                linear_extrude(height=0.5) {\n                    text(\"X\", size=2, halign=\"center\", valign=\"center\");\n                }\n    }\n}\n\n// Main assembly\nunion() {\n    // Bottom ferrule\n    translate([0, 0, -staff_length/2 + ferrule_length/2])\n        iron_ferrule();\n    \n    // Top ferrule\n    translate([0, 0, staff_length/2 - ferrule_length/2])\n        iron_ferrule();\n    \n    // Main shaft\n    staff_shaft();\n    \n    // Grip details\n    carved_grip_pattern();\n    leather_grip_wrap();\n    \n    // Historical maker's mark\n    maker_mark();\n}",
    "renders": true
  },
  {
    "historical_artifact": "partisan",
    "openscad_code": "// Partisan's Headgear - Yugoslav Partisan Cap (Titovka)\n// Historical artifact from WWII Yugoslav resistance movement\n// Medium complexity realistic model\n\n$fn = 36;\n\n// Main cap color - olive green wool\ncolor([0.25, 0.35, 0.15]) {\n    // Main cap body\n    union() {\n        // Crown of cap\n        translate([0, 0, 30]) \n            scale([1, 1.2, 0.8])\n            sphere(15);\n        \n        // Lower band\n        translate([0, 0, 15])\n            cylinder(h = 15, r1 = 18, r2 = 16);\n            \n        // Visor\n        translate([0, 20, 22])\n            rotate([30, 0, 0])\n            difference() {\n                cube([30, 3, 12], center = true);\n                translate([0, -2, 0])\n                    cube([32, 5, 14], center = true);\n            }\n    }\n}\n\n// Red star insignia\ncolor([0.8, 0.1, 0.1]) {\n    // Star base\n    translate([0, 0, 42])\n        cylinder(h = 1.5, r = 6);\n    \n    // Star points using loops\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n            translate([0, 4.5, 42.7])\n                cube([2, 3, 1.5], center = true);\n    }\n}\n\n// Leather chin strap\ncolor([0.4, 0.25, 0.15]) {\n    // Left strap\n    translate([-15, -10, 25])\n        rotate([90, 0, 90])\n        cylinder(h = 12, r = 1.5);\n    \n    // Right strap\n    translate([15, -10, 25])\n        rotate([90, 0, 90])\n        cylinder(h = 12, r = 1.5);\n    \n    // Buckle\n    translate([0, -10, 25])\n        rotate([90, 0, 90])\n        difference() {\n            cylinder(h = 5, r = 3);\n            translate([0, 0, -1])\n                cube([6, 6, 7], center = true);\n        }\n}\n\n// Brass buttons\ncolor([0.7, 0.5, 0.2]) {\n    // Side buttons\n    for(side = [-1, 1]) {\n        translate([side * 16, -5, 25])\n            cylinder(h = 2, r = 2.5);\n        \n        // Button center detail\n        translate([side * 16, -5, 27])\n            cylinder(h = 0.5, r = 1);\n    }\n}\n\n// Cockade detail (circular emblem)\ncolor([0.9, 0.8, 0.2]) {\n    translate([0, -16, 34])\n        rotate([90, 0, 0])\n        cylinder(h = 1, r = 4);\n    \n    // Cockade center\n    color([0.1, 0.1, 0.1])\n        translate([0, -16.5, 34])\n            sphere(1.5);\n}\n\n// Internal structure for 3D printing\ndifference() {\n    // Main internal hollow\n    translate([0, 0, 25])\n        scale([0.8, 1, 0.9])\n        sphere(13);\n        \n    // Remove bottom for printability\n    translate([0, 0, -5])\n        cube([40, 40, 10], center = true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "glaive",
    "openscad_code": "// Historical Glaive - 15th Century European Polearm\n// Overall length: 90mm - suitable for 3D printing\n\n// Color definitions\nblade_color = [0.7, 0.7, 0.8];      // Steel\nsocket_color = [0.6, 0.5, 0.4];    // Weathered iron\nshaft_color = [0.4, 0.3, 0.2];     // Dark wood\naccent_color = [0.8, 0.7, 0.4];    // Brass decorations\n\n// Main blade module\nmodule glaive_blade() {\n    color(blade_color)\n    union() {\n        // Main cutting blade - curved with fuller\n        translate([0, 0, 35])\n        rotate([0, 0, 0])\n        linear_extrude(height = 2, center = true)\n        polygon(points = [\n            [0, 0], [25, 0], [28, 5], [30, 15], \n            [28, 25], [20, 30], [10, 32], [0, 33],\n            [-10, 32], [-20, 30], [-28, 25], [-30, 15],\n            [-28, 5], [-25, 0]\n        ]);\n        \n        // Blade spine reinforcement\n        translate([0, 0, 36])\n        rotate([0, 90, 0])\n        cylinder(h = 60, r1 = 1.5, r2 = 0.5, center = true);\n        \n        // Decorative piercings in blade\n        for (i = [-1, 1]) {\n            translate([i * 15, 0, 36])\n            rotate([90, 0, 0])\n            cylinder(h = 5, r = 2, $fn = 6);\n        }\n    }\n}\n\n// Socket for attaching blade to shaft\nmodule blade_socket() {\n    color(socket_color)\n    union() {\n        // Main socket tube\n        translate([0, 0, 25])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r = 4, r1 = 4.5, $fn = 8);\n        \n        // Reinforcement rings\n        for (i = [0:1]) {\n            translate([0, 0, 20 + i * 10])\n            rotate([90, 0, 0])\n            cylinder(h = 2, r = 5, $fn = 8);\n        }\n        \n        // Nail hole for securing\n        translate([4, 0, 25])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r = 0.5, $fn = 8);\n    }\n}\n\n// Wooden shaft with decorative elements\nmodule shaft() {\n    color(shaft_color)\n    union() {\n        // Main shaft - tapered slightly\n        translate([0, 0, 10])\n        rotate([90, 0, 0])\n        cylinder(h = 40, r1 = 3.5, r2 = 3, $fn = 16);\n        \n        // Decorative brass bands\n        color(accent_color)\n        for (i = [0:2]) {\n            translate([0, 0, 5 + i * 15])\n            rotate([90, 0, 0])\n            cylinder(h = 2, r = 4, $fn = 16);\n        }\n        \n        // Leather grip texture (simulated with small cylinders)\n        color([0.2, 0.15, 0.1])\n        for (i = [0:7]) {\n            translate([0, 0, 18 + i * 2])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 1.5, r = 3.8, $fn = 16);\n                cylinder(h = 2, r = 3.2, $fn = 16);\n            }\n        }\n    }\n}\n\n// Butt spike/cap\nmodule butt_spike() {\n    color(socket_color)\n    union() {\n        // Conical butt cap\n        translate([0, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h = 5, r1 = 2.5, r2 = 1, $fn = 8);\n        \n        // Small decorative spike\n        translate([0, 0, -8])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 1, r2 = 0.5, $fn = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Assemble all parts\n    glaive_blade();\n    blade_socket();\n    shaft();\n    butt_spike();\n    \n    // Small brass rivets on blade\n    color(accent_color)\n    for (i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle])\n        translate([0, 27, 36])\n        cylinder(h = 2, r = 0.5, $fn = 8);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "halberd",
    "openscad_code": "// Halberd - 15th century European polearm\n// Designed for 3D printing at 1:20 scale (total length ~90mm)\n\n$fn = 32;\n\n// Overall dimensions\nshaft_length = 75;\nshaft_diameter = 5;\nblade_thickness = 1.5;\n\n// Colors\ncolor_shaft = [0.4, 0.2, 0.1];\ncolor_blade = [0.7, 0.7, 0.7];\ncolor_decorative = [0.8, 0.6, 0.2];\n\nmodule halberd() {\n    union() {\n        // Main shaft with octagonal cross-section\n        color(color_shaft)\n        translate([0, 0, shaft_length/2])\n        cylinder(h = shaft_length, d1 = shaft_diameter, d2 = shaft_diameter * 0.9, $fn = 8);\n        \n        // Iron shoe at bottom\n        color(color_blade)\n        translate([0, 0, 2])\n        cylinder(h = 4, d = shaft_diameter * 1.3);\n        \n        // Main axe blade\n        color(color_blade)\n        translate([0, 0, shaft_length - 8])\n        rotate([0, 0, 0])\n        union() {\n            // Axe head\n            translate([-12, 0, 0])\n            cube([24, blade_thickness, 20]);\n            \n            // Curved cutting edge\n            translate([-12, -blade_thickness/2, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 24, r = 20);\n            \n            // Back spike\n            translate([10, 0, 15])\n            rotate([0, -30, 0])\n            cylinder(h = 15, r1 = 2, r2 = 0.5);\n            \n            // Top spike\n            translate([0, 0, 20])\n            rotate([0, 0, 0])\n            cylinder(h = 25, r1 = 2, r2 = 0.5);\n        }\n        \n        // Hook/beak on reverse\n        color(color_blade)\n        translate([-8, 0, shaft_length - 4])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 15, r = 3);\n            translate([0, -5, -5])\n            cube([20, 10, 10]);\n        }\n        \n        // Decorative langets\n        for(i = [0:1]) {\n            rotate([0, 0, i * 120])\n            translate([0, 0, shaft_length - 18])\n            color(color_decorative)\n            cube([15, 1, 12]);\n        }\n        \n        // Rivets on langets\n        for(i = [0:1]) {\n            rotate([0, 0, i * 120])\n            for(z = [shaft_length - 16, shaft_length - 8]) {\n                translate([5, 0, z])\n                color(color_blade)\n                sphere(r = 0.8);\n            }\n        }\n        \n        // Engraved cross pattern on axe blade\n        color(color_blade)\n        translate([-12, blade_thickness/2 + 0.1, 10])\n        rotate([90, 0, 0])\n        linear_extrude(height = 0.2) {\n            for(i = [-8:4:8]) {\n                translate([i, 0, 0])\n                square([0.5, 8]);\n            }\n            for(i = [-4:4:4]) {\n                translate([0, i, 0])\n                square([8, 0.5]);\n            }\n        }\n    }\n}\n\n// Main assembly\nhalberd();",
    "renders": true
  },
  {
    "historical_artifact": "guisarme",
    "openscad_code": "// Guisarme - Medieval Polearm with Hook and Blade\n// Designed for 3D printing at 100mm height\n\n$fn = 32;\n\n// Colors\ncolor_wood = [0.6, 0.4, 0.2];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_leather = [0.5, 0.3, 0.1];\n\n// Main dimensions\nshaft_length = 80;\nshaft_diameter = 6;\nblade_length = 20;\nhook_length = 15;\nhook_width = 12;\n\nmodule shaft() {\n    color(color_wood)\n    union() {\n        // Main shaft\n        cylinder(h = shaft_length, d = shaft_diameter);\n        \n        // Leather grip\n        translate([0, 0, 5])\n            color(color_leather)\n            for(i = [0:3]) {\n                translate([0, 0, i * 5])\n                    cylinder(h = 2, d = shaft_diameter + 1);\n            }\n    }\n}\n\nmodule blade_base() {\n    color(color_metal)\n    union() {\n        // Main blade\n        translate([0, 0, shaft_length])\n            rotate([0, 90, 0])\n            linear_extrude(height = blade_length, center = true)\n            polygon([\n                [0, 0],\n                [3, 0],\n                [5, 1],\n                [6, 3],\n                [6, 6],\n                [4, 8],\n                [2, 9],\n                [0, 9],\n                [-2, 7],\n                [-2, 3],\n                [0, 0]\n            ]);\n        \n        // Reinforcement plate\n        translate([0, 0, shaft_length - 2])\n            rotate([0, 0, 0])\n            cylinder(h = 4, d1 = shaft_diameter + 6, d2 = shaft_diameter + 4);\n    }\n}\n\nmodule hook() {\n    color(color_metal)\n    translate([0, 0, shaft_length + 5])\n        rotate([0, 0, -45])\n        union() {\n            // Hook base\n            cylinder(h = 3, d = 4);\n            \n            // Hook curve\n            translate([0, 0, 1.5])\n                rotate([0, 90, 0])\n                rotate_extrude(angle = 180)\n                translate([hook_width / 2, 0, 0])\n                    square([hook_length, 3]);\n            \n            // Hook point\n            translate([hook_width / 2, 0, -hook_length])\n                rotate([0, 90, 0])\n                cylinder(h = 5, d1 = 3, d2 = 1);\n        }\n}\n\nmodule back_spike() {\n    color(color_metal)\n    translate([0, 0, shaft_length - 5])\n        rotate([0, 90, 180])\n        union() {\n            // Spike base\n            cylinder(h = 3, d = 4);\n            \n            // Spike\n            translate([0, 0, 3])\n                cylinder(h = 8, d1 = 4, d2 = 1);\n        }\n}\n\nmodule decorative_rivets() {\n    color(color_metal)\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([shaft_diameter / 2 + 1, 0, shaft_length - 1])\n                sphere(d = 1.5);\n    }\n}\n\n// Assemble the guisarme\nunion() {\n    shaft();\n    blade_base();\n    hook();\n    back_spike();\n    decorative_rivets();\n}",
    "renders": true
  },
  {
    "historical_artifact": "voulge",
    "openscad_code": "// Medieval Voulge Polearm - 15th century European infantry weapon\n// Overall length 95mm, blade length 35mm, shaft diameter 6mm\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main assembly\nmodule voulge() {\n    color(\"BurlyWood\") pole();\n    color(\"SaddleBrown\") bindings();\n    color(\"Silver\") blade();\n    color(\"Goldenrod\") decorative_ring();\n}\n\n// Wooden pole with tapered end\nmodule pole() {\n    // Main shaft\n    cylinder(h = 80, d1 = 6, d2 = 5.5);\n    \n    // Tapered end for blade socket\n    translate([0, 0, 80])\n        cylinder(h = 5, d1 = 5.5, d2 = 4.5);\n    \n    // Textured grip area\n    translate([0, 0, 10])\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([3.2, 0, 0])\n        cube([0.6, 0.6, 8], center = true);\n    }\n}\n\n// Leather binding straps\nmodule bindings() {\n    // Upper binding near blade\n    translate([0, 0, 77])\n    rotate([0, 0, 45])\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([3.1, 0, 0])\n        cube([2, 0.8, 2.5], center = true);\n    }\n    \n    // Lower binding\n    translate([0, 0, 65])\n    rotate([0, 0, 0])\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([3.1, 0, 0])\n        cube([2, 0.8, 2.5], center = true);\n    }\n}\n\n// Decorative ring below blade\nmodule decorative_ring() {\n    difference() {\n        cylinder(h = 2, d = 7.5);\n        cylinder(h = 2.1, d = 5.8);\n    }\n    translate([0, 0, 0.5])\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([3.3, 0, 0])\n        sphere(d = 1);\n    }\n}\n\n// Main blade assembly\nmodule blade() {\n    translate([0, 0, 85])\n    union() {\n        // Socket for pole attachment\n        cylinder(h = 5, d = 4.5);\n        \n        // Main cleaver-like blade\n        translate([0, 12, 2])\n        rotate([90, 0, 0])\n        scale([1, 1.5, 1])\n        linear_extrude(height = 2)\n        polygon(points = [\n            [-5, 0], [-3, 15], [0, 30], [3, 15], [5, 0], [4, -3], [2, -5], [-2, -5], [-4, -3]\n        ]);\n        \n        // Rear spike\n        translate([0, -8, 2])\n        rotate([90, 0, 0])\n        cylinder(h = 12, d1 = 3, d2 = 0.5);\n        \n        // Central ridge reinforcement\n        translate([0, 0, 2.5])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 1])\n        linear_extrude(height = 1)\n        polygon(points = [\n            [-4, 0], [-2, 10], [0, 25], [2, 10], [4, 0]\n        ]);\n    }\n}\n\n// Generate the complete voulge\nvoulge();",
    "renders": true
  },
  {
    "historical_artifact": "bardiche",
    "openscad_code": "// Bardiche Historical Artifact - Realistic Style\n// Medium complexity with historical accuracy\n\n$fn = 50; // Smooth curves for 3D printing\n\n// Blade module with fuller groove\nmodule bardiche_blade(width=25, height=35, thickness=3) {\n    color(\"silver\") {\n        // Main blade body\n        difference() {\n            // Tapered blade shape\n            hull() {\n                translate([0, 0, thickness/2]) cube([width, height, thickness], center=true);\n                translate([0, height/2 - 5, thickness/2]) cube([width*0.7, 10, thickness], center=true);\n                translate([0, -height/2 + 5, thickness/2]) cube([width*0.7, 10, thickness], center=true);\n            }\n            \n            // Fuller groove\n            translate([0, 0, thickness/2 + 0.1]) \n                cube([width*0.3, height*0.8, thickness*0.5], center=true);\n            \n            // Blade edge chamfers\n            translate([width/2 - 0.5, 0, 0]) rotate([0, 0, 45]) cube([2, height*1.2, thickness*1.2], center=true);\n            translate([-width/2 + 0.5, 0, 0]) rotate([0, 0, -45]) cube([2, height*1.2, thickness*1.2], center=true);\n        }\n    }\n}\n\n// Socket collar with rings\nmodule socket_collar(height=8, outer_dia=8, inner_dia=5) {\n    color(\"goldenrod\") {\n        difference() {\n            cylinder(h=height, d=outer_dia);\n            cylinder(h=height+1, d=inner_dia);\n        }\n        \n        // Decorative rings\n        for(i = [1, 3, 6]) {\n            translate([0, 0, i]) \n                cylinder(h=0.5, d=outer_dia + 1);\n        }\n    }\n}\n\n// Wooden haft with texture rings\nmodule haft(length=60, diameter=4) {\n    color(\"saddlebrown\") {\n        difference() {\n            cylinder(h=length, d=diameter);\n            \n            // Cutout for blade socket\n            translate([0, -length/2 + 15, 0]) rotate([90, 0, 0]) \n                cube([diameter + 2, 10, diameter + 2], center=true);\n        }\n        \n        // Texture rings\n        for(i = [5:5:length-5]) {\n            translate([0, -length/2 + i, 0]) \n                cylinder(h=0.3, d=diameter + 0.5);\n        }\n    }\n}\n\n// Rivet detail\nmodule rivet() {\n    color(\"goldenrod\") {\n        cylinder(h=2, d=1.5);\n        translate([0, 0, 1]) sphere(d=2);\n    }\n}\n\n// Main assembly\nmodule bardiche() {\n    // Haft\n    haft();\n    \n    // Socket collar at top\n    translate([0, -30 + 8, 0]) socket_collar();\n    \n    // Blade assembly\n    translate([0, -15, 0]) rotate([0, 90, 0]) {\n        // Main blade\n        bardiche_blade();\n        \n        // Langets (metal strips securing blade)\n        color(\"silver\") {\n            translate([12, 0, 0]) cube([15, 3, 1]);\n            translate([-12, 0, 0]) cube([15, 3, 1]);\n        }\n        \n        // Rivets\n        for(pos = [-10, 0, 10]) {\n            translate([13, pos, 1]) rivet();\n            translate([-13, pos, 1]) rivet();\n        }\n    }\n    \n    // Back spike\n    color(\"silver\") {\n        translate([0, 15, 0]) rotate([0, 90, 0]) \n            cylinder(h=15, d1=8, d2=2);\n    }\n}\n\n// Render the complete bardiche\nbardiche();",
    "renders": true
  },
  {
    "historical_artifact": "lucerne",
    "openscad_code": "// Lucerne Hammer - Historical Polearm Weapon (15th-16th Century Swiss)\n// Medium complexity realistic reproduction for 3D printing\n\n$fn = 64;\n\n// Main module for the Lucerne hammer\nmodule lucerne_hammer() {\n    color(\"silver\")\n    union() {\n        // Main shaft - slightly tapered pole\n        translate([0, 0, 10])\n            cylinder(h=80, r1=4, r2=3.5);\n        \n        // Hammer head assembly\n        translate([0, 0, 90])\n            rotate([0, 90, 0])\n            hammer_head();\n            \n        // Back spike\n        translate([0, 0, 85])\n            rotate([0, 90, 0])\n            back_spike();\n            \n        // Side prongs (characteristic of Lucerne hammer)\n        translate([0, 0, 90])\n            rotate([0, 90, 0])\n            side_prongs();\n            \n        // Decorative ferrule at base of head\n        translate([0, 0, 85])\n            cylinder(h=5, r=5);\n    }\n}\n\n// Hammer head module\nmodule hammer_head() {\n    difference() {\n        // Main hammer block\n        cube([12, 20, 8], center=true);\n        \n        // Prong holes - typical Lucerne design\n        for(i = [-1, 1]) {\n            translate([i * 4, 0, 0])\n                cylinder(h=10, r=1.5, center=true);\n        }\n    }\n    \n    // Hammer face - slightly curved\n    translate([0, 10, 0])\n        scale([1, 0.3, 1])\n        sphere(r=6);\n        \n    // Top decorative ridge\n    translate([0, 0, 4])\n        cube([14, 20, 1], center=true);\n}\n\n// Back spike module\nmodule back_spike() {\n    // Base of spike\n    translate([0, -10, 0])\n        cube([8, 8, 8], center=true);\n    \n    // Spike itself - four-sided pyramid\n    translate([0, -18, 0])\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        polyhedron(\n            points=[[0, -8, 0], [2, -8, 0], [0, -8, 2], [0, -16, 0]],\n            faces=[[0,1,2], [0,2,3], [1,3,2], [0,3,1]]\n        );\n    }\n}\n\n// Side prongs module - characteristic Lucerne feature\nmodule side_prongs() {\n    for(side = [-1, 1]) {\n        translate([side * 10, 0, 0])\n        rotate([0, 0, side * 30])\n        union() {\n            // Prong base\n            cube([15, 3, 3], center=true);\n            \n            // Prong tip\n            translate([7.5, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=1.5, r2=0.5);\n        }\n    }\n}\n\n// Generate the complete model\nlucerne_hammer();",
    "renders": true
  },
  {
    "historical_artifact": "poleaxe",
    "openscad_code": "// Poleaxe Historical Artifact - OpenSCAD Code\n// Based on 15th century European poleaxe design\n\n$fn = 32;\n\n// Overall dimensions (mm)\nshaft_length = 80;\nshaft_diameter = 6;\nhead_length = 35;\nhead_width = 25;\nspike_length = 15;\n\n// Colors\nwood_color = \"#8B4513\";\nmetal_color = \"#C0C0C0\";\ndark_metal = \"#708090\";\n\n// Main shaft with octagonal cross-section\nmodule shaft() {\n    color(wood_color) {\n        // Create octagonal shaft via cylinder with 8 sides\n        cylinder(h=shaft_length, d=shaft_diameter, $fn=8);\n        \n        // Add leather grip rings\n        translate([0, 0, 5])\n            color(\"#654321\")\n            for(i=[0:3]) {\n                translate([0, 0, i*5])\n                    cylinder(h=2, d=shaft_diameter+1, $fn=8);\n            }\n    }\n}\n\n// Axe head with historical bearded design\nmodule axe_blade() {\n    color(metal_color) {\n        // Main blade body\n        translate([0, 0, spike_length])\n            difference() {\n                // Bearded shape\n                linear_extrude(height=3)\n                    polygon(points=[\n                        [0, 0], [head_length/2, 0], [head_length-5, head_width/2], \n                        [head_length-8, head_width/2+3], [head_length-12, head_width/2+2],\n                        [head_length-18, head_width/2+4], [3, head_width/2+2], [0, head_width/4]\n                    ]);\n                \n                // Fuller groove\n                translate([head_length/2, 0, 1.5])\n                    cube([head_length/2-5, 1, 3], center=true);\n            }\n    }\n}\n\n// Back spike (rondel)\nmodule back_spike() {\n    color(dark_metal) {\n        // Rondel spike\n        translate([0, 0, spike_length])\n            rotate([0, 90, 0])\n                cylinder(h=head_length/2, d1=3, d2=1);\n        \n        // Decorative rondel disk\n        translate([0, 0, spike_length])\n            rotate([0, 90, 0])\n                cylinder(h=2, d=8);\n    }\n}\n\n// Top spike\nmodule top_spike() {\n    color(metal_color) {\n        // Main spike\n        cylinder(h=spike_length, d1=2, d2=0.5);\n        \n        // Decorative ring\n        translate([0, 0, spike_length/2])\n            cylinder(h=1.5, d=4);\n    }\n}\n\n// Langets (metal strips reinforcing shaft)\nmodule langets() {\n    color(dark_metal) {\n        for(angle=[0, 120, 240]) {\n            rotate([0, 0, angle])\n                translate([shaft_diameter/2+0.5, 0, 0])\n                    cube([1.5, shaft_diameter/2+2, spike_length+5]);\n        }\n    }\n}\n\n// Decorative etching on blade\nmodule blade_decoration() {\n    color(\"#2F4F4F\") {\n        translate([head_length/2, 0, spike_length+1.6])\n            rotate([90, 0, 0])\n                linear_extrude(height=0.3)\n                    text(\"DEUS VULT\", size=3, font=\"Latin:style=Bold\");\n    }\n}\n\n// Assembly\ntranslate([0, 0, shaft_length/2])\n    shaft();\n\ntranslate([0, 0, shaft_length])\n    union() {\n        // Langets first\n        langets();\n        \n        // Axe head assembly\n        rotate([0, 0, -90])\n            translate([shaft_diameter/2+1, 0, 0])\n                axe_blade();\n        \n        // Back spike\n        rotate([0, 0, 90])\n            translate([shaft_diameter/2+1, 0, 0])\n                back_spike();\n        \n        // Top spike\n        top_spike();\n        \n        // Decorative elements\n        blade_decoration();\n    }",
    "renders": true
  },
  {
    "historical_artifact": "ranseur",
    "openscad_code": "// Historical Ranseur (medieval polearm with three prongs)\n// 3D printable model - 100mm total height\n\n// Overall dimensions\npole_length = 80;\npole_diameter = 5;\nhead_height = 20;\nhead_width = 12;\n\n// Colors\ncolor_wood = [0.4, 0.2, 0.1];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_darker_metal = [0.5, 0.5, 0.5];\n\n// Main pole\nmodule pole() {\n    color(color_wood)\n    cylinder(h = pole_length, d = pole_diameter, center = false);\n}\n\n// Central spike\nmodule central_spike() {\n    color(color_metal)\n    linear_extrude(height = head_height, convexity = 10)\n    circle(d = head_width * 0.25);\n    translate([0, 0, head_height - 5])\n    cylinder(h = 5, d1 = head_width * 0.25, d2 = 0);\n}\n\n// Side prongs\nmodule side_prong(angle) {\n    rotate([0, 0, angle])\n    translate([head_width * 0.35, 0, head_height - 15])\n    rotate([0, -30, 0])\n    cylinder(h = 15, d1 = 3, d2 = 1);\n}\n\n// Decorative ring under head\nmodule decorative_ring() {\n    color(color_darker_metal)\n    difference() {\n        cylinder(h = 3, d = 10);\n        cylinder(h = 3.5, d = 8);\n    }\n}\n\n// Reinforcement bands on pole\nmodule reinforcement_band(pos) {\n    color(color_metal)\n    translate([0, 0, pos])\n    cylinder(h = 2, d = pole_diameter + 1);\n}\n\n// Decorative engravings on head\nmodule engravings() {\n    color(color_darker_metal)\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([head_width * 0.4, 0, head_height - 10])\n        cube([0.5, 0.5, 5]);\n    }\n}\n\n// Complete ranseur head\nmodule ranseur_head() {\n    union() {\n        // Base plate\n        color(color_metal)\n        cylinder(h = 2, d = head_width);\n        \n        // Central spike\n        central_spike();\n        \n        // Side prongs\n        side_prong(120);\n        side_prong(-120);\n        \n        // Decorative elements\n        translate([0, 0, 2])\n        decorative_ring();\n        \n        // Engravings\n        translate([0, 0, 2])\n        engravings();\n    }\n}\n\n// Assembly\nunion() {\n    // Pole\n    pole();\n    \n    // Ranseur head\n    translate([0, 0, pole_length - 2])\n    ranseur_head();\n    \n    // Reinforcement bands\n    reinforcement_band(pole_length - 10);\n    reinforcement_band(pole_length - 20);\n    reinforcement_band(pole_length - 30);\n}",
    "renders": true
  },
  {
    "historical_artifact": "spetum",
    "openscad_code": "// Spetum - Renaissance polearm weapon\n// Characterized by central spear point and two curved side blades\n\n// Color scheme\n$fn = 100;\n\n// Main spear head\nmodule spear_head() {\n    color(\"silver\") {\n        union() {\n            // Central spear point\n            translate([0, 0, 40]) {\n                rotate([0, 180, 0]) {\n                    cylinder(h=35, r1=2, r2=0.5);\n                }\n            }\n            \n            // Reinforcement socket\n            translate([0, 0, 15]) {\n                cylinder(h=25, r1=3.5, r2=2.5);\n            }\n            \n            // Decorative collar\n            translate([0, 0, 12]) {\n                cylinder(h=3, r1=4, r2=4);\n            }\n        }\n    }\n}\n\n// Side blade\nmodule side_blade(side) {\n    color(\"silver\") {\n        translate([side*8, 0, 25]) {\n            rotate([0, 0, side*30]) {\n                rotate([0, 90, 0]) {\n                    linear_extrude(height=0.8) {\n                        polygon(points=[\n                            [0, 0],\n                            [12, 0],\n                            [10, 8],\n                            [7, 12],\n                            [3, 15],\n                            [0, 16],\n                            [-3, 15],\n                            [-7, 12],\n                            [-10, 8],\n                            [-12, 0]\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Blade support brackets\nmodule blade_support(side) {\n    color(\"silver\") {\n        translate([side*6, 0, 20]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=8, r1=1, r2=1);\n            }\n        }\n        \n        // Triangular gusset\n        translate([side*4, 0, 18]) {\n            rotate([0, side*90, 0]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height=0.5) {\n                        polygon(points=[\n                            [0, 0],\n                            [8, 0],\n                            [0, 6]\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Handle with wood texture pattern\nmodule handle() {\n    color(\"darkgoldenrod\") {\n        union() {\n            // Main handle\n            translate([0, 0, 5]) {\n                cylinder(h=12, r1=3, r2=3);\n            }\n            \n            // Wood grain rings\n            for(i = [1:6:12]) {\n                translate([0, 0, i]) {\n                    cylinder(h=0.5, r1=3.2, r2=3.2);\n                }\n            }\n            \n            // End cap\n            translate([0, 0, -1]) {\n                cylinder(h=2, r1=3.5, r2=3);\n            }\n        }\n    }\n}\n\n// Decorative elements\nmodule decorative_elements() {\n    color(\"gold\") {\n        // Ornate etching on spear socket\n        translate([0, 0, 20]) {\n            rotate([0, 0, 45]) {\n                for(i = [0:45:315]) {\n                    rotate([0, 0, i]) {\n                        translate([3, 0, 0]) {\n                            cube([0.5, 0.2, 5]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle base\n    handle();\n    \n    // Main weapon assembly\n    translate([0, 0, 10]) {\n        union() {\n            spear_head();\n            side_blade(1);\n            side_blade(-1);\n            blade_support(1);\n            blade_support(-1);\n            decorative_elements();\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "corseque",
    "openscad_code": "// Corseque - 16th C. polearm head\n// Overall printable length ~95 mm, blade thickness 2 mm, socket wall 2 mm\n\nblade_th = 2;\nsocket_wall = 2;\nsocket_h = 20;\nsocket_r = 5;\n\nmodule fluke(t) {\n    // leaf-shaped side blade\n    linear_extrude(height = blade_th, center = true, convexity = 10)\n        polygon(points = [\n            [0, 0],\n            [t*10, 0],\n            [t*9, 4],\n            [t*7, 5],\n            [t*4, 4.5],\n            [0, 3]\n        ]);\n}\n\nmodule spear_point() {\n    // central diamond-section spear head\n    hull() {\n        translate([0,0,30]) cube([1,1,1], center=true);\n        rotate([0,45,0]) cube([blade_th,30,blade_th], center=true);\n        rotate([0,-45,0]) cube([blade_th,30,blade_th], center=true);\n    }\n}\n\nmodule socket() {\n    // hollow conical socket with two rivet holes\n    difference() {\n        cylinder(h = socket_h, r1 = socket_r, r2 = socket_r*0.9, $fn = 32);\n        translate([0,0,-1])\n            cylinder(h = socket_h+2, r1 = socket_r - socket_wall,\n                     r2 = socket_r*0.9 - socket_wall, $fn = 32);\n        // rivet holes\n        for (z = [socket_h*0.3, socket_h*0.7])\n            translate([socket_r - socket_wall/2, 0, z])\n                rotate([0,90,0]) cylinder(h = socket_r*2, r = 1.2, $fn = 12);\n    }\n}\n\nmodule corseque_head() {\n    union() {\n        color(\"silver\")\n        // central blade\n        translate([0,0,15]) spear_point();\n\n        color(\"silver\")\n        // lower flukes\n        for (s = [-1, 1])\n            translate([0, 0, socket_h + 2])\n            rotate([0, 0, s*30]) fluke(s);\n\n        color(\"silver\")\n        // socket\n        translate([0,0,0]) socket();\n\n        // decorative ring\n        color(\"gold\")\n        translate([0,0,socket_h+1])\n            cylinder(h = 2, r = socket_r + 1, $fn = 32);\n    }\n}\n\n// Display the corseque head upright for printing\nrotate([0,180,0])\n    corseque_head();",
    "renders": true
  },
  {
    "historical_artifact": "sovnya",
    "openscad_code": "// Sovnya - Medieval Russian polearm head (realistic medium complexity)\n// Based on 15th-16th century examples found in Novgorod excavations\n// Overall length: 80mm, suitable for 3D printing\n\n$fn=32;\n\nmodule sovnya_head() {\n    // Main blade - slightly curved single-edge\n    translate([0, 0, 5]) {\n        color(\"silver\") {\n            // Blade base\n            translate([0, 0, -2]) cube([45, 6, 4], center=true);\n            \n            // Tapered blade\n            for(i=[0:3]) {\n                translate([i*10-20, 0, 0]) \n                scale([1-i*0.15, 1-i*0.1, 1-i*0.1])\n                cube([10, 6-i, 4-i], center=true);\n            }\n            \n            // Blade tip\n            translate([22.5, 0, 0]) rotate([0, 0, -15]) \n            cylinder(h=10, r1=3, r2=0.5, center=true);\n            \n            // Blade spine reinforcement\n            translate([0, 3.5, 0]) cube([45, 1, 4], center=true);\n        }\n    }\n    \n    // Socket for pole attachment\n    color(\"dimgray\") {\n        translate([-15, 0, -10]) \n        rotate([90, 0, 0])\n        cylinder(h=20, r1=3, r2=3.5, center=false);\n        \n        // Socket rivet holes\n        for(i=[-1:1]) {\n            translate([-15, 0, -10+i*8]) \n            rotate([90, 0, 0])\n            cylinder(h=7, r=0.8, center=true);\n        }\n    }\n    \n    // Backspike/lug\n    color(\"silver\") {\n        translate([-22, 0, 0]) rotate([0, 0, 45])\n        cube([10, 3, 3], center=true);\n        \n        // Lug reinforcements\n        translate([-22, 0, -1.5]) cube([12, 3, 1], center=true);\n        translate([-22, 0, 1.5]) cube([12, 3, 1], center=true);\n    }\n    \n    // Decorative fuller groove\n    color(\"silver\") {\n        translate([0, 0, 0]) difference() {\n            translate([0, 0, 2]) cube([35, 1, 1], center=true);\n            translate([0, 0, 2]) cube([34, 1.2, 1.2], center=true);\n        }\n    }\n    \n    // Ornamental inscriptions (simplified runic patterns)\n    color(\"goldenrod\") {\n        for(i=[-2:2]) {\n            translate([i*8, 1.5, 2.5]) \n            rotate([90, 0, 0])\n            cylinder(h=0.5, r=0.3, center=true);\n        }\n        \n        for(i=[-1:1]) {\n            translate([i*12, -1.5, 2.5]) \n            sphere(r=0.4);\n        }\n    }\n    \n    // Blade edge bevel\n    color(\"silver\") {\n        translate([0, -3.5, 0]) \n        cube([45, 0.5, 4], center=true);\n    }\n}\n\n// Assembly\nsovnya_head();",
    "renders": true
  },
  {
    "historical_artifact": "billhook",
    "openscad_code": "// Medieval English Billhook (14th-15th century)\n// Traditional agricultural/weapon hybrid tool\n\n$fn = 50;\n\n// Overall dimensions\ntotal_length = 85;  // mm\nblade_length = 45;\nhandle_length = 40;\nblade_width = 25;\nblade_thickness = 2.5;\nhandle_diameter = 8;\n\n// Colors\nwood_color = \"#8B4513\";\nsteel_color = \"#C0C0C0\";\nleather_color = \"#3D2314\";\n\nmodule billhook() {\n    // Main blade assembly\n    union() {\n        // Handle core\n        color(wood_color)\n        translate([0, 0, -handle_length/2])\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Handle reinforcement rings\n        for(i = [0:1]) {\n            color(steel_color)\n            translate([0, 0, -handle_length/2 + 10 + i*20])\n                difference() {\n                    cylinder(h=3, d=handle_diameter + 2, center=true);\n                    cylinder(h=4, d=handle_diameter + 1, center=true);\n                }\n        }\n        \n        // Leather grip wrapping\n        color(leather_color)\n        translate([0, 0, -handle_length/2 + 10])\n            cylinder(h=20, d=handle_diameter + 1, center=true);\n        \n        // Socket/shaft connection\n        color(steel_color)\n        translate([0, 0, 0])\n            cylinder(h=8, d1=handle_diameter + 3, d2=handle_diameter + 1, center=true);\n        \n        // Main blade\n        color(steel_color)\n        translate([blade_length/2, 0, 4])\n            rotate([0, 90, 0])\n                difference() {\n                    // Blade body\n                    union() {\n                        // Main curved blade\n                        translate([0, 0, 0])\n                            rotate([0, 0, -15])\n                                cube([blade_length, blade_thickness, blade_width], center=true);\n                        \n                        // Curved hook\n                        translate([-blade_length/4, 0, -blade_width/2])\n                            rotate([0, 0, 45])\n                                cube([blade_length/2, blade_thickness, blade_width/2], center=true);\n                    }\n                    \n                    // Blade tapering\n                    translate([blade_length/2, 0, blade_width/4])\n                        rotate([0, 90, 0])\n                            cylinder(h=blade_length, d=blade_width/2, center=true);\n                    \n                    // Hook curve refinement\n                    translate([-blade_length/3, 0, -blade_width/2])\n                        rotate([0, 90, 0])\n                            cylinder(h=blade_length/3, d=blade_width/3, center=true);\n                }\n        \n        // Blade spine reinforcement\n        color(steel_color)\n        translate([blade_length/2 - 5, 0, 4 + blade_width/2 + 1])\n            cube([blade_length - 10, blade_thickness + 1, 2], center=true);\n        \n        // Decorative rivets on socket\n        color(steel_color)\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle])\n                translate([handle_diameter/2 + 1.5, 0, 2])\n                    cylinder(h=2, d=1.5, center=true);\n        }\n    }\n}\n\n// Render the complete billhook\nbillhook();",
    "renders": true
  },
  {
    "historical_artifact": "fauchard",
    "openscad_code": "// Fauchard - Medieval polearm with curved blade\n// Overall length: 85mm, blade length: 35mm, handle diameter: 6mm\n\n// Main colors for different materials\nblade_color = \"Silver\";\nhandle_color = \"SaddleBrown\";\nring_color = \"Gold\";\n\n// Main union\nunion() {\n    // Blade assembly\n    translate([0, 0, 42.5])\n    rotate([90, 0, 0])\n    union() {\n        // Main curved blade\n        color(blade_color)\n        difference() {\n            // Blade body - curved sickle shape\n            union() {\n                // Main blade curve\n                rotate([0, 0, -30])\n                translate([-12, 0, 0])\n                linear_extrude(height=2)\n                polygon(points=[\n                    [0, 0], [25, 0], [30, 8], [28, 15], [20, 22], [10, 25], [0, 20]\n                ]);\n                \n                // Blade spine reinforcement\n                translate([0, 0, 2])\n                rotate([0, 0, -30])\n                translate([-12, 0, 0])\n                linear_extrude(height=1)\n                polygon(points=[\n                    [2, 2], [23, 2], [26, 7], [24, 13], [18, 18], [10, 20], [2, 15]\n                ]);\n            }\n            \n            // Fuller groove\n            translate([0, 0, -0.5])\n            rotate([0, 0, -30])\n            translate([-12, 0, 0])\n            linear_extrude(height=4)\n            polygon(points=[\n                [8, 5], [20, 7], [22, 12], [18, 16], [12, 17], [8, 14]\n            ]);\n        }\n        \n        // Back spike/hook\n        color(blade_color)\n        translate([10, 0, 0])\n        rotate([0, 0, 45])\n        cylinder(h=15, r1=2, r2=1);\n        \n        // Decorative langet plates\n        for(i = [-1, 1]) {\n            color(\"Goldenrod\")\n            translate([0, i*4, -15])\n            cube([4, 2, 8]);\n        }\n    }\n    \n    // Socket and handle assembly\n    union() {\n        // Socket (metal tube connecting blade to shaft)\n        color(\"DarkGray\")\n        translate([0, 0, 25])\n        cylinder(h=12, r1=4, r2=3.5);\n        \n        // Decorative ring below socket\n        color(ring_color)\n        translate([0, 0, 23])\n        cylinder(h=2, r1=5, r2=5);\n        \n        // Main handle shaft\n        color(handle_color)\n        translate([0, 0, 0])\n        cylinder(h=45, r=3);\n        \n        // Handle grip rings for better hold\n        for(i = [0:5:40]) {\n            color(\"SaddleBrown\")\n            translate([0, 0, i])\n            cylinder(h=2, r=3.2);\n        }\n        \n        // Butt cap\n        color(ring_color)\n        translate([0, 0, 45])\n        cylinder(h=4, r1=3, r2=4);\n        \n        // Hanging ring\n        color(ring_color)\n        translate([0, 4, 45])\n        rotate([90, 0, 0])\n        rotate_extrude(angle=360, $fn=16)\n        translate([2.5, 0, 0])\n        circle(r=0.5);\n    }\n    \n    // Decorative etching on blade\n    color(\"DimGray\")\n    translate([5, 0, 43])\n    rotate([90, 0, 0])\n    rotate([0, 0, -30])\n    linear_extrude(height=0.1)\n    text(\"DEUS VULT\", size=2, halign=\"center\");\n}",
    "renders": true
  },
  {
    "historical_artifact": "glaiveglaive",
    "openscad_code": "// Historical Glaive (Glaiveglaive) - 15th Century Central European Polearm\n// Realistic style with medium complexity for 3D printing\n\n// Overall dimensions: 90mm length, 25mm width\n$fn = 32;\n\n// Main blade module with historical double-curved design\nmodule glaive_blade() {\n    color(\"silver\") {\n        // Central blade spine\n        translate([0, 0, 2]) \n            cube([45, 5, 4], center=true);\n        \n        // Curved cutting edge\n        for(i = [0:3]) {\n            translate([-20 + i*12, 0, 0])\n                rotate([0, 0, -15 + i*5])\n                    scale([1, 0.3, 1])\n                        cylinder(h=3, r1=6, r2=8, center=true);\n        }\n        \n        // Decorative fuller groove\n        translate([-5, 0, 2.5])\n            cube([30, 2, 1], center=true);\n        \n        // Reinforced back edge\n        translate([10, 0, 2])\n            rotate([0, 0, 45])\n                cube([8, 3, 3], center=true);\n    }\n}\n\n// Socket for pole attachment with historical rivet holes\nmodule socket_mount() {\n    color(\"darkslategray\") {\n        // Main socket tube\n        translate([-25, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, r=4, center=true);\n        \n        // Reinforcement bands\n        for(pos = [-30, -20]) {\n            translate([pos, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=3, r=5, center=true);\n        }\n        \n        // Rivet holes (for 3D printing: use teardrop shape)\n        for(hole = [-25, -22]) {\n            translate([hole, 2.5, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=3, r=1, center=true);\n            translate([hole, -2.5, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=3, r=1, center=true);\n        }\n    }\n}\n\n// Decorative langets (metal strips extending down the pole)\nmodule langets() {\n    color(\"silver\") {\n        // Left langet\n        translate([-35, -3, 0])\n            cube([20, 2, 1.5]);\n        \n        // Right langet\n        translate([-35, 3, 0])\n            cube([20, 2, 1.5]);\n    }\n}\n\n// Historical maker's mark inscription plate\nmodule makers_mark() {\n    color(\"goldenrod\") {\n        translate([0, 0, 5])\n            cube([8, 4, 0.5], center=true);\n        \n        // Simplified cross pattern typical of 15th century\n        translate([0, 0, 5.3]) {\n            cube([6, 1, 0.2], center=true);\n            cube([1, 4, 0.2], center=true);\n        }\n    }\n}\n\n// Pole representation (simplified for printing)\nmodule pole() {\n    color(\"brown\") {\n        translate([-50, 0, -2])\n            cylinder(h=40, r=2.5, center=true);\n    }\n}\n\n// Assembly of complete glaive\nunion() {\n    // Main components\n    glaive_blade();\n    socket_mount();\n    langets();\n    makers_mark();\n    pole();\n    \n    // Historical decorative lugs on blade back\n    color(\"silver\") {\n        translate([15, 0, 2])\n            sphere(r=2);\n        translate([5, 0, 2])\n            sphere(r=1.5);\n    }\n}\n\n// Ensure printable orientation\nrotate([0, 0, 0]) {\n    // Model is oriented for printing with blade flat on bed\n}",
    "renders": true
  },
  {
    "historical_artifact": "pike",
    "openscad_code": "// Renaissance pike head (approx. 85 mm total length)\n// Based on 16th-century German designs, 3D-printable\n\n$fn = 64;\n\n// Overall length scale\nPikeScale = 0.7;\n\nmodule pikeHead() {\n    difference() {\n        color(\"silver\") union() {\n            // Socket tube\n            translate([0, 0, 5])\n                cylinder(h = 25, d1 = 12, d2 = 11);\n\n            // Reinforcing langets (long strips)\n            for (a = [0, 120, 240])\n                rotate([0, 0, a])\n                    translate([6, 0, 5])\n                        cube([15, 2, 25]);\n\n            // Tapered blade body\n            translate([0, 0, 30])\n                cylinder(h = 45, d1 = 18, d2 = 3);\n\n            // Central ridge\n            translate([0, 0, 30])\n                cube([2, 18, 45], center = true);\n\n            // Cross-guard base\n            translate([0, 0, 25])\n                cube([22, 4, 5], center = true);\n        }\n\n        // Hollow socket\n        translate([0, 0, -1])\n            cylinder(h = 27, d = 9);\n\n        // Decorative fuller on both faces\n        for (y = [-1, 1])\n            translate([0, y * 7, 45])\n                rotate([0, 90, 0])\n                    cylinder(h = 25, d = 2);\n    }\n}\n\nmodule etchingPattern() {\n    // Simple engraved crosses along blade\n    color(\"gray\") for (z = [35:7:70]) {\n        translate([0, 0, z])\n            cube([0.5, 0.5, 0.5], center = true);\n        translate([0, 0, z])\n            rotate([0, 0, 45])\n                cube([0.5, 0.5, 0.5], center = true);\n    }\n}\n\nmodule decorativeRivets() {\n    // Brass rivets on langets\n    color(\"goldenrod\") for (a = [0, 120, 240])\n        for (z = [9:6:25]) {\n            rotate([0, 0, a])\n                translate([13.5, 0, z])\n                    sphere(d = 2);\n        }\n}\n\n// Assemble pike head\nscale(PikeScale) union() {\n    pikeHead();\n    etchingPattern();\n    decorativeRivets();\n}",
    "renders": true
  },
  {
    "historical_artifact": "lance",
    "openscad_code": "// Medieval Tournament Lance (c. 14th century)\n// Designed for 3D printing - 80mm total length\n\n$fn = 32;\n\n// Main assembly\nmodule lance() {\n    // Colors for realistic appearance\n    color(\"peru\") // Wood color\n    union() {\n        // Main shaft\n        shaft();\n        \n        // Vamplate (hand guard)\n        translate([0, 0, 55]) vamplate();\n        \n        // Grip area\n        translate([0, 0, 45]) grip();\n        \n        // Decorative ferrule at base\n        translate([0, 0, 5]) ferrule();\n        \n        // Metal tip\n        translate([0, 0, 75]) tip();\n    }\n}\n\n// Wooden shaft\nmodule shaft() {\n    // Main shaft body\n    cylinder(h = 70, d1 = 6, d2 = 4.5);\n    \n    // Reinforcement rings\n    for(i = [15:15:60]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h = 2, d = 7);\n            cylinder(h = 2.2, d = 5);\n        }\n    }\n}\n\n// Hand guard (vamplate) - conical\nmodule vamplate() {\n    color(\"goldenrod\")\n    difference() {\n        // Main cone\n        cylinder(h = 8, d1 = 20, d2 = 16);\n        \n        // Inner hole\n        translate([0, 0, -0.1])\n        cylinder(h = 8.2, d = 6);\n        \n        // Decorative cutouts\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([8.5, 0, 4])\n            rotate([90, 0, 0])\n            cylinder(h = 3, d = 3);\n        }\n    }\n}\n\n// Wrapped leather grip\nmodule grip() {\n    color(\"saddlebrown\")\n    difference() {\n        // Base cylinder\n        cylinder(h = 12, d = 7.5);\n        \n        // Spiral grooves for leather wrapping\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([3.8, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 12, d = 1.5);\n        }\n    }\n}\n\n// Decorative metal ferrule\nmodule ferrule() {\n    color(\"silver\")\n    union() {\n        // Main ring\n        cylinder(h = 4, d = 8);\n        \n        // Decorative ridges\n        translate([0, 0, 1])\n        cylinder(h = 1, d = 9);\n        translate([0, 0, 2])\n        cylinder(h = 1, d = 9);\n    }\n}\n\n// Steel lance tip\nmodule tip() {\n    color(\"silver\")\n    union() {\n        // Main pyramid tip\n        cylinder(h = 5, d1 = 0, d2 = 5);\n        \n        // Reinforcement collar\n        translate([0, 0, -2])\n        cylinder(h = 2, d = 6);\n    }\n}\n\n// Base stand for display\nmodule stand() {\n    color(\"dimgray\")\n    union() {\n        // Base plate\n        translate([0, 0, -2])\n        cube([20, 8, 2], center = true);\n        \n        // Support prongs\n        translate([-8, 0, 0])\n        cube([2, 6, 10], center = true);\n        translate([8, 0, 0])\n        cube([2, 6, 10], center = true);\n    }\n}\n\n// Assemble complete model\nrotate([90, 0, 0])\ntranslate([0, 0, -5])\nlance();\n\n// Optional display stand\ntranslate([0, 0, -8])\nstand();",
    "renders": true
  },
  {
    "historical_artifact": "javelin",
    "openscad_code": "// Ancient Greek bronze javelin (akontia) ~500 BCE\n// Realistic medium-complexity model for 3D printing\n\n// Overall dimensions\nshaft_length = 80;\nshaft_diameter = 3.5;\ntip_length = 20;\ntotal_length = shaft_length + tip_length;\n\n// Color definitions\nbronze = [0.72, 0.45, 0.2];\nwood = [0.55, 0.38, 0.22];\n\n// Main shaft\nmodule shaft() {\n    color(wood)\n    union() {\n        // Main wooden shaft\n        cylinder(h = shaft_length, d = shaft_diameter, $fn = 16);\n        \n        // Wrapping rings every 20mm\n        for(i = [0:4]) {\n            translate([0, 0, 5 + i * 15])\n            color(bronze)\n            cylinder(h = 2, d = shaft_diameter + 1.2, $fn = 16);\n        }\n        \n        // Grip texture - leather wrapping\n        translate([0, 0, 35])\n        color([0.3, 0.2, 0.1])\n        difference() {\n            cylinder(h = 15, d = shaft_diameter + 1, $fn = 16);\n            for(angle = [0:45:315]) {\n                rotate([0, 0, angle])\n                translate([-0.5, -1, -0.5])\n                cube([1, 2, 16]);\n            }\n        }\n    }\n}\n\n// Bronze spear point\nmodule spear_point() {\n    color(bronze)\n    union() {\n        // Main leaf-shaped blade\n        translate([0, 0, shaft_length])\n        linear_extrude(height = tip_length, scale = 0.2)\n        polygon(points = [\n            [0, 0],\n            [2, -6],\n            [8, -8],\n            [10, -7],\n            [10, 7],\n            [8, 8],\n            [2, 6],\n            [0, 0]\n        ]);\n        \n        // Central ridge\n        translate([0, 0, shaft_length + tip_length/2])\n        rotate([90, 0, 0])\n        cylinder(h = 14, d1 = 1, d2 = 0.2, $fn = 3);\n        \n        // Decorative rings\n        translate([0, 0, shaft_length - 0.5])\n        cylinder(h = 1, d = shaft_diameter + 2, $fn = 16);\n        \n        // Inscription band\n        translate([0, 0, shaft_length - 2])\n        difference() {\n            cylinder(h = 1.5, d = shaft_diameter + 1.5, $fn = 32);\n            // Greek key pattern\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45])\n                translate([0, (shaft_diameter + 1.5)/2 - 0.3, 0.3])\n                cube([0.6, 0.6, 1.5], center = true);\n            }\n        }\n    }\n}\n\n// Ankyle (throwing strap attachment)\nmodule ankyle_loop() {\n    color(bronze)\n    translate([0, shaft_diameter/2 + 1.5, 25])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 3, d = 5, $fn = 16);\n        translate([0, 0, -0.5])\n        cylinder(h = 4, d = 3, $fn = 16);\n    }\n}\n\n// Assembly\nunion() {\n    shaft();\n    spear_point();\n    ankyle_loop();\n}\n\n// Add maker's mark on shaft\ntranslate([0, shaft_diameter/2 + 0.5, 10])\nrotate([0, 90, 0])\ncolor(bronze)\nlinear_extrude(height = 0.3)\ntext(\"ΛΥΚΩΝ\", size = 2, font = \"Liberation Sans:style=Bold\");\n\n// Scale to fit print bed\nscale([0.8, 0.8, 0.8])\ntranslate([0, 0, -5]);",
    "renders": true
  },
  {
    "historical_artifact": "dart",
    "openscad_code": "// Historical Bronze Age Dart - Realistic Medium Detail\n// Based on Bronze Age throwing darts from Northern Europe (c. 1500-500 BCE)\n\n// Overall dimensions - scaled for 3D printing\noverall_length = 85;\nshaft_diameter = 4;\nbarb_length = 15;\n\n// Colors for bronze and wood appearance\ncolor_bronze = [0.72, 0.45, 0.2];\ncolor_wood = [0.4, 0.26, 0.13];\n\nmodule bronze_tipped_dart() {\n    union() {\n        // Main wooden shaft\n        color(color_wood)\n        translate([0, 0, 5])\n        cylinder(h=overall_length - 15, d=shaft_diameter, $fn=16);\n        \n        // Bronze socket collar\n        color(color_bronze)\n        translate([0, 0, 0])\n        cylinder(h=8, d=shaft_diameter + 3, $fn=32);\n        \n        // Decorative ring engravings on collar\n        for(i = [2:2:6]) {\n            color(color_bronze)\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=0.5, d=shaft_diameter + 3, $fn=32);\n                cylinder(h=0.6, d=shaft_diameter + 2.5, $fn=32);\n            }\n        }\n        \n        // Bronze blade tip\n        color(color_bronze)\n        union() {\n            // Main blade\n            translate([0, 0, 8])\n            cylinder(h=10, d1=shaft_diameter + 1, d2=2, $fn=6);\n            \n            // Side barbs\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle])\n                translate([shaft_diameter/2 + 1, 0, 8])\n                rotate([0, 90, 0])\n                cylinder(h=barb_length, d1=1.5, d2=0.5, $fn=8);\n            }\n        }\n        \n        // Shaft grip texture - spiral wrapping\n        for(i = [15:5:60]) {\n            rotate([0, 0, i * 15])\n            translate([shaft_diameter/2 + 0.5, 0, i])\n            cube([1, 0.5, 4], center=true);\n        }\n        \n        // Fletching - three feathers\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle])\n            translate([0, 0, overall_length - 5])\n            color([0.8, 0.8, 0.8])\n            linear_extrude(height=0.5, center=true)\n            polygon(points=[\n                [0, 0],\n                [8, 3],\n                [15, 2],\n                [20, 0],\n                [15, -2],\n                [8, -3]\n            ]);\n        }\n    }\n}\n\n// Position the dart horizontally for printing\nrotate([90, 0, 0])\ntranslate([0, 0, overall_length/2])\nbronze_tipped_dart();",
    "renders": true
  },
  {
    "historical_artifact": "plumbata",
    "openscad_code": "// Plumbata - Roman lead-weighted throwing dart (4th-6th century AD)\n// Realistic medium complexity model for 3D printing\n\n$fn = 32;\n\n// Main module for the complete plumbata\nmodule plumbata() {\n    color(\"SaddleBrown\") // Wooden shaft color\n    union() {\n        // Main wooden shaft\n        shaft();\n        \n        // Iron spear head\n        translate([0, 0, 85]) \n        color(\"DarkGray\")\n        spear_head();\n        \n        // Lead weight socket\n        translate([0, 0, -5])\n        color(\"DarkSlateGray\")\n        lead_weight();\n        \n        // Fletching (three feathers)\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n            translate([0, 5, 70])\n            fletching();\n        }\n        \n        // Decorative leather wrapping\n        for(i = [0:5:35]) {\n            color(\"Tan\")\n            translate([0, 0, 30+i])\n            rotate([90, 0, 0])\n            cylinder(h=1.5, r1=4.5, r2=4.5);\n        }\n    }\n}\n\n// Wooden shaft with slight taper\nmodule shaft() {\n    union() {\n        // Main shaft body\n        cylinder(h=90, r1=4, r2=3.5);\n        \n        // Grip texture rings\n        for(i = [0:3:21]) {\n            translate([0, 0, 25+i])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=1.2, r1=4.2, r2=4.2);\n                cylinder(h=1.3, r1=3.8, r2=3.8);\n            }\n        }\n    }\n}\n\n// Iron spear head with barbs\nmodule spear_head() {\n    union() {\n        // Main blade\n        rotate([0, 0, 0])\n        linear_extrude(height=15, twist=0)\n        polygon(points=[[0,0], [2,15], [0,20], [-2,15], [0,0]]);\n        \n        // Socket for shaft\n        translate([0, 0, -3])\n        cylinder(h=8, r1=3.5, r2=3.2);\n        \n        // Barbs\n        translate([2, 0, 10])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=1, r2=0);\n        mirror([1, 0, 0])\n        translate([2, 0, 10])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=1, r2=0);\n    }\n}\n\n// Lead weight with decorative grooves\nmodule lead_weight() {\n    difference() {\n        union() {\n            // Main weight body\n            cylinder(h=10, r1=5, r2=4.5);\n            \n            // Rounded bottom\n            translate([0, 0, -2])\n            sphere(d=9);\n        }\n        \n        // Decorative grooves\n        for(i = [0:90:359]) {\n            rotate([0, 0, i])\n            translate([4.2, 0, -1])\n            cube([0.4, 0.8, 12]);\n        }\n    }\n}\n\n// Fletching feathers (three arranged around shaft)\nmodule fletching() {\n    difference() {\n        union() {\n            // Main feather shape\n            scale([1, 1, 0.3])\n            rotate([90, 0, 0])\n            cylinder(h=20, r1=0.5, r2=4);\n            \n            // Feather shaft\n            translate([0, 0, 10])\n            rotate([90, 0, 0])\n            cylinder(h=20, r1=0.3, r2=0.3);\n        }\n        \n        // Feather barbs (notches)\n        for(i = [0:2:18]) {\n            translate([0, 2+i, 1+i])\n            rotate([0, 0, 30])\n            cube([0.5, 2, 1]);\n        }\n    }\n}\n\n// Scale to reasonable size (total length ~95mm)\nscale(0.85)\nplumbata();",
    "renders": true
  },
  {
    "historical_artifact": "chakram",
    "openscad_code": "// Realistic historical chakram for 3D printing\n// Medium complexity with authentic details\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Main parameters\nchakram_diameter = 80;\nchakram_thickness = 4;\ninner_hole = 35;\nedge_thickness = 2;\n\nmodule chakram_ring() {\n    // Outer ring with slight taper\n    difference() {\n        cylinder(h = chakram_thickness, d = chakram_diameter, center = true);\n        translate([0, 0, -0.5])\n            cylinder(h = chakram_thickness + 1, d = inner_hole, center = true);\n    }\n}\n\nmodule sharpened_edge() {\n    // Traditional double-edged blade profile\n    color(\"silver\")\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180])\n        translate([0, 0, chakram_thickness/2 - edge_thickness/2])\n        difference() {\n            cylinder(h = edge_thickness, d = chakram_diameter, center = true);\n            cylinder(h = edge_thickness + 1, d = chakram_diameter - 4, center = true);\n        }\n    }\n}\n\nmodule decorative_panels() {\n    // Traditional 8-panel design with engravings\n    color(\"silver\")\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([chakram_diameter/2 - 6, 0, -chakram_thickness/2 - 0.1])\n        difference() {\n            cube([6, 3, chakram_thickness + 0.2], center = true);\n            // Engraved center line\n            translate([3, 0, 0])\n                cube([0.5, 2, chakram_thickness + 0.4], center = true);\n        }\n    }\n}\n\nmodule central_mandala() {\n    // Traditional sun symbol in center\n    color(\"goldenrod\")\n    translate([0, 0, chakram_thickness/2 + 0.1])\n    for (rays = [0:30:330]) {\n        rotate([0, 0, rays])\n        translate([inner_hole/2 + 2, 0, 0])\n            cube([4, 0.8, 0.3], center = true);\n    }\n    // Central dot\n    translate([0, 0, chakram_thickness/2 + 0.2])\n        cylinder(h = 0.5, d = 3, center = true);\n}\n\nmodule grip_pattern() {\n    // Textured grip on inner edge\n    color(\"silver\")\n    for (grip = [0:15:345]) {\n        rotate([0, 0, grip])\n        translate([(inner_hole + chakram_diameter)/4, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 3, d = 1.5, center = true);\n    }\n}\n\nmodule inscription_band() {\n    // Faux Devanagari-inspired inscription\n    color(\"silver\")\n    translate([0, 0, chakram_thickness/2 + 0.05])\n    for (i = [0:5:355]) {\n        rotate([0, 0, i])\n        translate([chakram_diameter/2 - 2, 0, 0])\n            cube([1, 0.5, 0.1], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    chakram_ring();\n    sharpened_edge();\n    decorative_panels();\n    central_mandala();\n    grip_pattern();\n    inscription_band();\n}",
    "renders": true
  },
  {
    "historical_artifact": "shuriken",
    "openscad_code": "// Realistic historical shuriken (hira-shuriken) with medium complexity\n// Based on Edo-period Japanese throwing stars\n\n// Main parameters\nshuriken_diameter = 80;\nthickness = 3;\nblade_width = 8;\ncenter_hole_diameter = 12;\n\n// Colors for realistic appearance\nmetal_color = \"#8B7355\";  // Aged iron color\nedge_color = \"#A0A0A0\";   // Polished steel edge highlight\n\n// Module for a single blade point\nmodule blade_point(length, width, thickness) {\n    // Create blade taper\n    difference() {\n        // Main blade body\n        linear_extrude(height = thickness, center = true) {\n            polygon(points = [\n                [0, 0],\n                [width/2, -length * 0.2],\n                [width/3, -length * 0.8],\n                [0, -length],\n                [-width/3, -length * 0.8],\n                [-width/2, -length * 0.2]\n            ]);\n        }\n        \n        // Create hollow ground blade edge\n        translate([0, -length * 0.5, 0])\n            cube([width * 0.6, length * 0.4, thickness + 1], center = true);\n    }\n    \n    // Add edge bevel\n    color(edge_color)\n    translate([0, -length * 0.1, thickness/2 + 0.1])\n        cube([width * 0.8, length * 0.8, 0.2], center = true);\n}\n\n// Module for decorative pattern on blade\nmodule blade_pattern() {\n    // Traditional kanji family mark (placeholder geometric pattern)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, -shuriken_diameter/3, thickness/2 + 0.1])\n            linear_extrude(height = 0.3)\n                circle(r = 3, $fn = 6);\n    }\n}\n\n// Module for central ring with grip texture\nmodule central_ring() {\n    difference() {\n        // Main ring\n        cylinder(h = thickness + 2, r = center_hole_diameter/2 + 3, center = true, $fn = 32);\n        \n        // Center hole\n        cylinder(h = thickness + 3, r = center_hole_diameter/2, center = true, $fn = 32);\n    }\n    \n    // Add grip rings\n    for (i = [-1, 0, 1]) {\n        translate([0, 0, i * 0.5])\n            cylinder(h = 0.3, r = center_hole_diameter/2 + 2, center = true, $fn = 32);\n    }\n}\n\n// Create the complete shuriken\nunion() {\n    color(metal_color) {\n        // Main body with all four blades\n        difference() {\n            // Create central disk\n            cylinder(h = thickness, r = shuriken_diameter/2, center = true, $fn = 32);\n            \n            // Cut out spaces between blades\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90 + 45])\n                    translate([0, shuriken_diameter/4, 0])\n                        cube([blade_width * 1.5, shuriken_diameter/2, thickness + 2], center = true);\n            }\n        }\n        \n        // Add four blade points\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, shuriken_diameter/2 - 5, 0])\n                    blade_point(shuriken_diameter/2 - 10, blade_width, thickness);\n        }\n    }\n    \n    // Add central ring\n    color(metal_color)\n    central_ring();\n    \n    // Add decorative patterns\n    blade_pattern();\n}\n\n// Add subtle wear marks\nfor (i = [0:7]) {\n    color(\"#6B5B47\")\n    rotate([0, 0, i * 45])\n    translate([shuriken_diameter/3, 0, thickness/2 + 0.2])\n        scale([1, 0.3, 0.1])\n            sphere(r = 2);\n}",
    "renders": true
  },
  {
    "historical_artifact": "kunai",
    "openscad_code": "// Historical Kunai - Realistic Style\n// Based on traditional Japanese kunai tool/weapons used by ninjas\n// Features include ring pommel, wrapped handle, leaf-shaped blade, and decorative elements\n\n// Overall dimensions: 100mm length, scaled for 3D printing\n\nmodule kunai() {\n  color(\"gray\") {\n    // Ring pommel (characteristic of historical kunai)\n    translate([0, 0, 0]) {\n      difference() {\n        cylinder(h=8, d=25, $fn=64);\n        cylinder(h=10, d=20, $fn=64);\n      }\n    }\n    \n    // Handle with wrapped cord texture\n    translate([0, 0, 8]) {\n      union() {\n        // Main handle cylinder\n        cylinder(h=35, d=15, $fn=32);\n        \n        // Cord wrapping pattern\n        for (i = [0:2:30]) {\n          translate([0, 0, 10 + i]) {\n            rotate([90, 0, 0]) {\n              cylinder(h=20, d=16.5, $fn=6);\n            }\n          }\n        }\n      }\n    }\n    \n    // Blade base (transition from handle to blade)\n    translate([0, 0, 43]) {\n      cylinder(h=5, d1=15, d2=20, $fn=32);\n    }\n    \n    // Main blade - leaf-shaped with historical accuracy\n    translate([0, 0, 48]) {\n      // Front face of blade\n      difference() {\n        union() {\n          // Main blade body\n          linear_extrude(height=2) {\n            polygon(points=[\n              [0, 0],\n              [-10, 40],\n              [0, 50],\n              [10, 40],\n              [0, 0]\n            ]);\n          }\n          \n          // Spine reinforcement\n          translate([0, 25, 0]) {\n            cube([3, 25, 2], center=true);\n          }\n        }\n        \n        // Fuller (blood groove) - historically accurate feature\n        translate([0, 30, -0.5]) {\n          rotate([0, 0, 0]) {\n            cube([1.5, 20, 3], center=true);\n          }\n        }\n      }\n      \n      // Back face of blade\n      translate([0, 0, 2]) {\n        linear_extrude(height=2) {\n          polygon(points=[\n            [0, 0],\n            [-10, 40],\n            [0, 50],\n            [10, 40],\n            [0, 0]\n          ]);\n        }\n      }\n    }\n    \n    // Decorative tassel attachment point on ring\n    translate([0, 0, -2]) {\n      color(\"brown\") {\n        for (i = [0:120:360]) {\n          rotate([0, 0, i]) {\n            translate([11.5, 0, 0]) {\n              cylinder(h=3, d=1.5, $fn=8);\n            }\n          }\n        }\n      }\n    }\n    \n    // Historical inscriptions on handle\n    translate([0, 8, 25]) {\n      rotate([90, 0, 0]) {\n        color(\"black\") {\n          // Simple kanji-like markings\n          for (i = [0:3]) {\n            translate([0, 3*i - 4.5, 0]) {\n              cube([0.5, 2, 0.2], center=true);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Scale to appropriate 3D printing size\nscale(0.8) {\n  kunai();\n}",
    "renders": true
  },
  {
    "historical_artifact": "katar",
    "openscad_code": "// Katar (Indian push dagger) - realistic style, medium complexity\n// Overall length ~85mm, optimized for 3D printing\n\n// Parameters\nblade_length = 55;\nblade_width = 20;\nblade_thickness = 3;\nhandle_length = 30;\nhandle_width = 60;\nhandle_height = 15;\nbar_thickness = 4;\nwall_thickness = 2;\n\n// Main blade\nmodule katar_blade() {\n    color([0.7, 0.7, 0.7])  // Steel color\n    union() {\n        // Tapered blade\n        linear_extrude(height = blade_thickness, center = true, scale = [0.3, 1], slices = 20)\n        polygon(points = [\n            [0, 0],\n            [blade_length, -blade_width/2],\n            [blade_length, blade_width/2],\n            [0, 0]\n        ]);\n        \n        // Central ridge\n        translate([0, 0, 0])\n        cube([blade_length*0.9, 1, blade_thickness+0.5], center = true);\n    }\n}\n\n// Decorative side bars with traditional patterns\nmodule side_bars() {\n    color([0.6, 0.5, 0.4])  // Bronze color\n    for(side = [-1, 1]) {\n        translate([0, side * (handle_width/2 - bar_thickness/2), 0])\n        cube([handle_length, bar_thickness, handle_height], center = true);\n        \n        // Decorative rings\n        for(i = [1:4]) {\n            translate([handle_length/2 - i*6, side * (handle_width/2 - bar_thickness/2), handle_height/2 - 2])\n            rotate([90, 0, 0])\n            cylinder(h = bar_thickness+1, r = 2, $fn = 16);\n        }\n    }\n}\n\n// Hand grip\nmodule hand_grip() {\n    color([0.4, 0.3, 0.2])  // Dark wood color\n    difference() {\n        // Main grip\n        translate([handle_length/2, 0, -handle_height/4])\n        cube([handle_length, handle_width - bar_thickness*2, handle_height/2], center = true);\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            translate([handle_length/2 - 8 + i*5, 0, -handle_height/4])\n            cylinder(h = handle_width - bar_thickness*2, r = 3, $fn = 16);\n        }\n    }\n}\n\n// Decorative pommel plate\nmodule pommel_plate() {\n    color([0.6, 0.5, 0.4])  // Bronze color\n    translate([-handle_length/2 - 2, 0, 0])\n    difference() {\n        cube([4, handle_width, handle_height], center = true);\n        // Decorative cutouts\n        for(x = [-12:12:12]) {\n            for(y = [-20:20:20]) {\n                translate([0, x, y])\n                cylinder(h = 5, r = 3, $fn = 6);\n            }\n        }\n    }\n}\n\n// Assembly\nmodule katar() {\n    union() {\n        // Blade positioned at front\n        translate([handle_length/2 + blade_length/2, 0, 0])\n        katar_blade();\n        \n        // Handle assembly\n        union() {\n            side_bars();\n            hand_grip();\n            pommel_plate();\n        }\n    }\n}\n\n// Render the katar\nkatar();",
    "renders": true
  },
  {
    "historical_artifact": "pata",
    "openscad_code": "// Pata Gauntlet Sword - Historical Indian Weapon\n// Medium complexity realistic model suitable for 3D printing\n\n// Main parameters\nblade_length = 60;\nblade_width = 20;\nblade_thickness = 2;\nguard_length = 35;\nguard_width = 45;\ngauntlet_length = 45;\ngauntlet_height = 25;\ngauntlet_width = 30;\nhandle_length = 40;\n\n// Colors\nblade_color = \"silver\";\nguard_color = \"darkgoldenrod\";\ngauntlet_color = \"goldenrod\";\nhandle_color = \"saddlebrown\";\n\n// Utility module for rounded edges\nmodule rounded_box(x, y, z, r) {\n    translate([r, r, 0]) cube([x-2*r, y-2*r, z]);\n    translate([r, r, 0]) cylinder(h=z, r=r, $fn=16);\n    translate([x-r, r, 0]) cylinder(h=z, r=r, $fn=16);\n    translate([r, y-r, 0]) cylinder(h=z, r=r, $fn=16);\n    translate([x-r, y-r, 0]) cylinder(h=z, r=r, $fn=16);\n}\n\n// Blade with fuller\nmodule blade() {\n    color(blade_color) {\n        union() {\n            // Main blade\n            translate([0, -blade_width/2, 0])\n                cube([blade_length, blade_width, blade_thickness]);\n            \n            // Fuller (blood groove)\n            translate([blade_length/2, -blade_width/4, blade_thickness/2])\n                cube([blade_length*0.7, blade_width/2, blade_thickness/0.5]);\n            \n            // Tip\n            translate([blade_length-10, -blade_width/2, 0])\n                rotate([0, 0, -atan(blade_width/20)])\n                cube([20, 20, blade_thickness]);\n        }\n    }\n}\n\n// Guard with decorative elements\nmodule guard() {\n    color(guard_color) {\n        union() {\n            // Main guard plate\n            translate([-5, -guard_width/2, -guard_height/2])\n                rounded_box(guard_length, guard_width, 5, 3);\n            \n            // Decorative side prongs\n            for(i = [-1, 1]) {\n                translate([guard_length/2-10, i*guard_width/3, 0])\n                    rotate([0, 0, i*15])\n                    cube([15, 5, 5]);\n            }\n            \n            // Central decorative element\n            translate([guard_length/2, 0, 0])\n                cylinder(h=8, r=8, $fn=32);\n        }\n    }\n}\n\n// Gauntlet with articulated plates\nmodule gauntlet() {\n    color(gauntlet_color) {\n        difference() {\n            // Main gauntlet body\n            translate([0, -gauntlet_width/2, -gauntlet_height/2])\n                rounded_box(gauntlet_length, gauntlet_width, gauntlet_height, 5);\n            \n            // Hand opening\n            translate([-5, -gauntlet_width/4, -gauntlet_height/2])\n                cube([gauntlet_length/2, gauntlet_width/2, gauntlet_height]);\n            \n            // Knuckle relief\n            for(i = [-1, 0, 1]) {\n                translate([gauntlet_length*0.7, i*gauntlet_width/6, 0])\n                    sphere(r=5, $fn=16);\n            }\n        }\n        \n        // Decorative rivets\n        for(i = [0:2]) {\n            translate([i*gauntlet_length/3, -gauntlet_width/2+5, gauntlet_height/2-2])\n                color(\"darkgoldenrod\") cylinder(h=3, r=2, $fn=16);\n            translate([i*gauntlet_length/3, gauntlet_width/2-5, gauntlet_height/2-2])\n                color(\"darkgoldenrod\") cylinder(h=3, r=2, $fn=16);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    color(handle_color) {\n        // Main grip\n        translate([-handle_length/2, -gauntlet_width/4, -gauntlet_height/4])\n            rounded_box(handle_length, gauntlet_width/2, gauntlet_height/2, 3);\n        \n        // Grip texture rings\n        for(i = [0:3]) {\n            translate([-handle_length/2 + i*handle_length/3, -gauntlet_width/4, -gauntlet_height/4])\n                cylinder(h=2, r=gauntlet_width/4+1, $fn=16);\n        }\n    }\n}\n\n// Assembly\nmodule pata_sword() {\n    // Blade assembly\n    translate([0, 0, 0]) blade();\n    \n    // Guard\n    translate([-guard_length+5, 0, blade_thickness/2]) rotate([90, 0, 0]) guard();\n    \n    // Gauntlet\n    translate([-guard_length-gauntlet_length, 0, -blade_thickness/2]) rotate([0, 0, 90]) gauntlet();\n    \n    // Handle inside gauntlet\n    translate([-guard_length-gauntlet_length/2, 0, 0]) rotate([0, 90, 0]) handle();\n}\n\n// Render the complete artifact\npata_sword();",
    "renders": true
  },
  {
    "historical_artifact": "baghnakh",
    "openscad_code": "// Baghnakh (Indian tiger claw weapon)\n// Historical artifact from 17th-19th century India\n// Designed for 3D printing with realistic proportions\n\nmodule handle_base() {\n    // Main wooden handle with traditional bulbous end\n    difference() {\n        union() {\n            // Handle shaft\n            cylinder(h=80, d1=18, d2=15, $fn=20);\n            \n            // Bulbous pommel\n            translate([0,0,75])\n                sphere(d=25, $fn=30);\n                \n            // Decorative collar\n            translate([0,0,-5])\n                cylinder(h=8, d=22, $fn=20);\n        }\n        \n        // Grip grooves\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([0,-10,-20])\n                    cube([30,20,60], center=true);\n        }\n    }\n}\n\nmodule metal_band() {\n    // Brass or iron reinforcement band\n    color(\"gold\")\n    difference() {\n        cylinder(h=12, d=20, $fn=32);\n        cylinder(h=14, d=17, $fn=32);\n    }\n}\n\nmodule claw(curve=0) {\n    // Individual curved claw blade\n    color(\"silver\")\n    rotate([curve,0,0])\n    union() {\n        // Curved blade body\n        translate([0,0,2])\n            cylinder(h=35, d1=8, d2=3, $fn=8);\n            \n        // Blade tip\n        translate([0,0,37])\n            rotate([0,180,0])\n                cylinder(h=8, d1=3, d2=0.1, $fn=8);\n                \n        // Reinforcement ring\n        translate([0,0,-2])\n            cylinder(h=4, d=10, $fn=12);\n    }\n}\n\nmodule claw_assembly() {\n    // Four curved claws in traditional arrangement\n    translate([0,0,-10])\n    for(i=[0:3]) {\n        rotate([0,0,i*90-135])\n            translate([12,0,0])\n                rotate([0,0,15])\n                    claw(curve=-20);\n    }\n}\n\nmodule decorative_ring() {\n    // Ornamental ring below claws\n    color(\"gold\")\n    union() {\n        cylinder(h=3, d=22, $fn=32);\n        \n        // Small decorative studs\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([11,0,1.5])\n                    sphere(d=2, $fn=12);\n        }\n    }\n}\n\nmodule finger_guards() {\n    // Protective metal loops for fingers\n    color(\"silver\")\n    for(i=[0:3]) {\n        rotate([0,0,i*90-135])\n            translate([8,0,-25])\n                rotate([90,0,0])\n                    difference() {\n                        cylinder(h=8, d=12, $fn=16);\n                        cylinder(h=9, d=8, $fn=16);\n                    }\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle with wood color\n    color(\"saddlebrown\")\n    handle_base();\n    \n    // Metal components\n    translate([0,0,-8])\n        metal_band();\n    \n    translate([0,0,-12])\n        decorative_ring();\n    \n    translate([0,0,-15])\n        claw_assembly();\n    \n    translate([0,0,-25])\n        finger_guards();\n}",
    "renders": true
  },
  {
    "historical_artifact": "kukri",
    "openscad_code": "// Kukri - Traditional Nepalese Knife Historical Artifact\n// Medium complexity realistic model\n\n// Blade color - traditional steel\nblade_color = \"#CCCCCC\";\n// Handle color - traditional horn material\nhandle_color = \"#8B4513\";\n// Ricasso and bolster color - brass\nbrass_color = \"#B87333\";\n\n// Overall scale for 3D printing\nscale_factor = 0.8;\n\nmodule kukri_blade() {\n    // Main curved blade\n    translate([0, -5, 0])\n    rotate([0, 0, -15])\n    linear_extrude(height = 2)\n    polygon(points=[\n        [0, 0],\n        [8, 0],\n        [35, 5],\n        [60, 15],\n        [75, 25],\n        [80, 35],\n        [78, 45],\n        [70, 50],\n        [55, 48],\n        [40, 42],\n        [25, 30],\n        [10, 15],\n        [0, 0]\n    ]);\n    \n    // Blade spine ridge\n    translate([0, 0, 1.8])\n    rotate([0, 0, -15])\n    linear_extrude(height = 0.4)\n    polygon(points=[\n        [0, 0],\n        [8, -0.5],\n        [35, -0.3],\n        [60, 0],\n        [75, 0.5],\n        [78, 1],\n        [77, 1.5],\n        [70, 1.8],\n        [55, 1.5],\n        [40, 1],\n        [25, 0.5],\n        [10, 0],\n        [0, 0]\n    ]);\n    \n    // Fuller (blood groove)\n    translate([2, -1, 1])\n    rotate([0, 0, -15])\n    linear_extrude(height = 0.8)\n    polygon(points=[\n        [5, 0],\n        [30, 8],\n        [50, 18],\n        [65, 25],\n        [68, 27],\n        [65, 28],\n        [50, 21],\n        [30, 10],\n        [5, 1],\n        [5, 0]\n    ]);\n}\n\nmodule kukri_handle() {\n    // Main handle body\n    color(handle_color)\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 25, r1 = 4, r2 = 5, $fn = 8);\n    \n    // Brass bolster\n    color(brass_color)\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 3, r = 6, $fn = 8);\n    \n    // Brass pommel\n    color(brass_color)\n    translate([0, 25, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 4, r = 6, $fn = 8);\n    \n    // Traditional ring decorations on handle\n    for(i = [1:5]) {\n        color(brass_color)\n        translate([0, i * 4, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 0.5, r = 4.2, $fn = 8);\n    }\n    \n    // Handle texture rings\n    for(i = [1:12]) {\n        color(\"#654321\")\n        translate([0, i * 2, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 0.3, r = 4.8, $fn = 16);\n    }\n}\n\nmodule kukri_notch() {\n    // Traditional cho (kukri notch)\n    translate([0, -4, 1])\n    difference() {\n        cube([4, 4, 2]);\n        translate([2, 2, -0.1])\n        cylinder(h = 2.2, r = 2, $fn = 16);\n    }\n}\n\n// Assemble the complete kukri\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    color(blade_color)\n    translate([0, 0, 0])\n    kukri_blade();\n    \n    color(brass_color)\n    translate([0, -5, 0])\n    kukri_notch();\n    \n    translate([-2, 0, 0])\n    kukri_handle();\n}",
    "renders": true
  },
  {
    "historical_artifact": "bolo",
    "openscad_code": "// Historical Philippine Bolo Knife (Guna) - 19th Century Artifact\n// Designed for 3D printing with proper wall thickness and no overhangs\n\n$fn = 50;\n\n// Overall scale\nscale_factor = 0.7;\n\n// Color definitions\nwood_color = [139/255, 69/255, 19/255];\nmetal_color = [0.5, 0.5, 0.5];\nblade_color = [0.6, 0.6, 0.7];\nbrass_color = [0.8, 0.6, 0.2];\n\nmodule bolo_knife() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Wooden handle with traditional palm swell\n            color(wood_color) {\n                translate([0, 0, 0]) {\n                    // Main handle body\n                    cylinder(h = 80, r1 = 12, r2 = 10);\n                    \n                    // Palm swell\n                    translate([0, 0, 40]) {\n                        cylinder(h = 20, r1 = 15, r2 = 15);\n                    }\n                    \n                    // Handle end cap\n                    translate([0, 0, 80]) {\n                        sphere(r = 12);\n                    }\n                }\n            }\n            \n            // Brass ferrule\n            color(brass_color) {\n                translate([0, 0, 85]) {\n                    cylinder(h = 5, r1 = 13, r2 = 13);\n                }\n            }\n            \n            // Blade - traditional bolo shape\n            color(blade_color) {\n                translate([0, 0, 90]) {\n                    // Blade tang\n                    cylinder(h = 20, r1 = 6, r2 = 4);\n                    \n                    // Main blade body with curved belly\n                    translate([0, -15, 20]) {\n                        // Create curved belly using hull\n                        hull() {\n                            translate([0, 0, 0]) cube([2, 8, 40]);\n                            translate([0, -20, 60]) cube([2, 35, 5]);\n                        }\n                        \n                        // Add thickness to blade\n                        translate([0, 0, 0]) {\n                            linear_extrude(height = 3) {\n                                polygon(points=[\n                                    [-1, 0],\n                                    [1, 0],\n                                    [1, 90],\n                                    [0, 100],\n                                    [-1, 90]\n                                ]);\n                            }\n                        }\n                    }\n                    \n                    // Blade spine\n                    translate([0, 12, 20]) {\n                        cube([2, 4, 60]);\n                    }\n                    \n                    // Tip reinforcement\n                    translate([0, -25, 80]) {\n                        sphere(r = 8);\n                    }\n                }\n            }\n            \n            // Traditional vine grip pattern\n            color(wood_color) {\n                for(i = [0:15:75]) {\n                    translate([0, 0, i + 5]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h = 1, r = 11.5);\n                        }\n                    }\n                }\n            }\n            \n            // Brass rivets\n            color(brass_color) {\n                for(pos = [[0, 10, 30], [0, -10, 30], [0, 10, 50], [0, -10, 50]]) {\n                    translate(pos) {\n                        sphere(r = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Display the bolo\nbolo_knife();",
    "renders": true
  },
  {
    "historical_artifact": "parang",
    "openscad_code": "// Historical Parang - Southeast Asian machete\n// Based on traditional Borneo/Sumatran parang design\n// Overall length ~85mm for 3D printing\n\n// Color definitions\nwood_color = \"BurlyWood\";\nmetal_color = \"Silver\";\ndecor_color = \"Goldenrod\";\n\n// Basic dimensions (mm)\nblade_length = 45;\nblade_width = 12;\nblade_thickness = 2;\nhandle_length = 35;\nhandle_diameter = 8;\nguard_width = 18;\nguard_thickness = 4;\n\n// Create the parang as a single module\nmodule parang() {\n    // Main blade\n    color(metal_color)\n    union() {\n        // Blade body - curved machete shape\n        translate([0, 0, blade_thickness/2])\n        difference() {\n            // Main blade shape\n            linear_extrude(height=blade_thickness, convexity=10)\n            polygon(points=[\n                [0, 0],                    // Tang start\n                [blade_length-20, 0],      // Straight section\n                [blade_length-5, blade_width*0.7],  // Curved belly\n                [blade_length, blade_width*0.9],    // Tip\n                [blade_length-8, blade_width],      // Back curve\n                [5, blade_width*0.4],      // Spine curve\n                [0, blade_width*0.3]       // Tang end\n            ]);\n            \n            // Fuller groove\n            translate([blade_length*0.4, blade_width*0.5, -1])\n            scale([1, 0.3, 1])\n            cylinder(h=blade_thickness+2, r=blade_length*0.3, $fn=20);\n        }\n        \n        // Spine ridge\n        translate([0, blade_width*0.4, blade_thickness])\n        cube([blade_length-5, 1, 1]);\n        \n        // Decorative etching near spine\n        for(i = [1:3]) {\n            translate([blade_length*(0.2 + i*0.2), blade_width*0.42, blade_thickness/2])\n            color(decor_color)\n            cube([2, 0.5, blade_thickness+0.5]);\n        }\n    }\n    \n    // Guard\n    color(metal_color)\n    translate([-guard_thickness/2, (blade_width-guard_width)/2, -guard_thickness/2])\n    cube([guard_thickness, guard_width, blade_thickness+guard_thickness]);\n    \n    // Handle - traditional wood with grip rings\n    color(wood_color)\n    difference() {\n        // Main handle\n        translate([-handle_length, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=handle_length, r=handle_diameter/2, $fn=20);\n        \n        // Grip rings\n        for(i = [1:5]) {\n            translate([-(handle_length/6)*i, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=1, r=handle_diameter/2+0.5, $fn=20);\n        }\n    }\n    \n    // Pommel with traditional motif\n    color(decor_color)\n    translate([-handle_length-5, 0, 0])\n    sphere(r=handle_diameter/2+1, $fn=20);\n    \n    // Decorative bands on handle\n    color(metal_color)\n    for(i = [1:3]) {\n        translate([-handle_length*(i*0.25), 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=1.5, r=handle_diameter/2+0.2, $fn=20);\n    }\n}\n\n// Assembly\nparang();",
    "renders": true
  },
  {
    "historical_artifact": "kris",
    "openscad_code": "// Kris dagger - Indonesian traditional weapon\n// Size: ~95mm total length, 3D-print friendly\n\nblade_width = 8;\nblade_thickness = 2;\nhandle_length = 45;\nguard_width = 18;\nguard_thickness = 4;\n\nmodule kris_blade() {\n    color(\"silver\") \n    difference() {\n        // Main blade base\n        linear_extrude(height = 50, center = true, twist = 35)\n            polygon(points = [[0,0], [blade_width, 5], [blade_width*0.9, 25], [0,45]]);\n        \n        // First serpentine wave\n        translate([blade_width*0.7, 15, 0])\n            rotate([0,0,20])\n            cylinder(h = 50, r1 = 12, r2 = 12, $fn = 16);\n        \n        // Second serpentine wave\n        translate([blade_width*0.5, 35, 0])\n            rotate([0,0,-25])\n            cylinder(h = 50, r1 = 10, r2 = 10, $fn = 16);\n        \n        // Blade edge bevel\n        translate([0, 22.5, 0])\n            cube([blade_width + 2, 45, blade_thickness*2], center = true);\n    }\n}\n\nmodule kris_guard() {\n    color(\"gold\") {\n        // Main guard body\n        difference() {\n            cube([guard_width, guard_thickness, blade_thickness + 2], center = true);\n            // Center slot for blade\n            cube([blade_thickness + 1, guard_thickness + 1, blade_thickness + 3], center = true);\n        }\n        \n        // Decorative rounded ends\n        translate([guard_width/2 - 2, 0, 0])\n            sphere(r = 3, $fn = 16);\n        translate([-guard_width/2 + 2, 0, 0])\n            sphere(r = 3, $fn = 16);\n    }\n}\n\nmodule kris_handle() {\n    color(\"burlywood\") {\n        // Main handle shaft\n        difference() {\n            cylinder(h = handle_length, r1 = 4, r2 = 5, $fn = 12);\n            // Center hole for tang\n            cylinder(h = handle_length + 1, r = 1.5, $fn = 8);\n        }\n        \n        // Decorative rings\n        for(i = [1:3]) {\n            translate([0, 0, i * handle_length/4])\n                cylinder(h = 2, r1 = 5.5, r2 = 5.5, $fn = 12);\n        }\n        \n        // Pommel decoration\n        translate([0, 0, handle_length])\n            sphere(r = 6, $fn = 16);\n    }\n}\n\nmodule kris() {\n    union() {\n        // Assemble the kris\n        translate([0, 0, 25]) kris_blade();\n        translate([0, 0, 0]) kris_guard();\n        translate([0, 0, -handle_length/2 - guard_thickness/2]) kris_handle();\n    }\n}\n\n// Render the complete kris\nrotate([90, 0, 0]) kris();",
    "renders": true
  },
  {
    "historical_artifact": "kampilan",
    "openscad_code": "// Kampilan Sword - Philippine Moro Sword\n// Medium complexity realistic model for 3D printing\n\n$fn = 32;\nscale_factor = 0.4; // Scale down for printing\n\nmodule blade() {\n    color([0.8, 0.8, 0.8])\n    union() {\n        // Main blade body\n        translate([0, -2, 0])\n            scale([1, 0.3, 0.05])\n                cube([80, 12, 1], center=true);\n        \n        // Tapered tip\n        translate([38, -2, 0])\n            rotate([0, 0, -25])\n                scale([1, 0.3, 0.05])\n                    cube([15, 8, 1], center=true);\n        \n        // Spiked tip extension\n        translate([48, -2, 0])\n            rotate([0, 0, -45])\n                cylinder(h=8, r1=1, r2=0.2, center=true);\n        \n        // Blade spine reinforcement\n        translate([0, -2, 0.6])\n            scale([1, 0.1, 0.02])\n                cube([80, 10, 1], center=true);\n    }\n}\n\nmodule hilt() {\n    color([0.4, 0.2, 0.1])\n    union() {\n        // Grip\n        translate([-20, -2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=1.5, center=true);\n        \n        // Guard\n        translate([-27, -2, 0])\n            scale([0.5, 0.8, 0.1])\n                cube([10, 8, 1], center=true);\n        \n        // Pommel\n        translate([-27, -2, 0])\n            sphere(r=2);\n    }\n}\n\nmodule decorative_elements() {\n    color([0.8, 0.6, 0.2])\n    union() {\n        // Brass tacks along spine\n        for(i = [-30:10:30]) {\n            translate([i, -2, 0.8])\n                sphere(r=0.5);\n        }\n        \n        // Hilt binding\n        translate([-20, -2, 0])\n            rotate([90, 0, 0])\n            for(i = [-6:2:6]) {\n                translate([0, 0, i])\n                    scale([1, 1, 0.3])\n                        cylinder(h=1.5, r=1.7, center=true);\n            }\n        \n        // Ornate pommel decoration\n        translate([-27, -2, 1.5])\n            rotate([0, 0, 45])\n                scale([1, 1, 0.1])\n                    cube([3, 3, 0.5], center=true);\n    }\n}\n\nmodule kampilan() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        blade();\n        hilt();\n        decorative_elements();\n    }\n}\n\n// Main assembly\nkampilan();",
    "renders": true
  },
  {
    "historical_artifact": "barong",
    "openscad_code": "// Barong Kris - Historical Filipino Dagger\n// Traditional weapon with wavy blade and wooden handle\n\n// Overall dimensions in mm\nblade_length = 65;\nhandle_length = 30;\ntotal_width = 12;\nblade_thickness = 2;\n\n// Main module\nmodule barong_kris() {\n    color(\"silver\") {\n        // Blade with traditional wavy pattern\n        union() {\n            // Base straight blade\n            translate([0, 0, blade_length/2])\n                cube([blade_thickness, total_width, blade_length], center=true);\n            \n            // Wavy edge details (5 waves typical for barong)\n            for(i = [1:5]) {\n                translate([0, -total_width/2 + (i-1)*2, blade_length - i*12])\n                    rotate([0, 0, i%2 ? 15 : -15])\n                    cube([blade_thickness, 4, 8], center=true);\n            }\n            \n            // Blade tip curve\n            translate([0, 0, blade_length - 5])\n                rotate([90, 0, 0])\n                cylinder(h=8, r1=total_width/2, r2=0, $fn=20);\n        }\n    }\n    \n    color(\"saddlebrown\") {\n        // Handle with traditional carabao horn styling\n        translate([0, 0, -handle_length/2 - 5])\n            rotate([0, 0, 0])\n            cylinder(h=handle_length, r1=4, r2=3, $fn=8);\n        \n        // Handle guard/collar\n        translate([0, 0, 0])\n            cylinder(h=3, r1=5, r2=4.5, $fn=12);\n        \n        // Pommel with traditional bulbous end\n        translate([0, 0, -handle_length - 7])\n            sphere(r=5, $fn=16);\n    }\n    \n    color(\"gold\") {\n        // Decorative brass collar at blade-handle junction\n        translate([0, 0, 0])\n            cylinder(h=2, r1=5.5, r2=5.5, $fn=20);\n        \n        // Traditional geometric etching on blade (simplified)\n        for(i = [1:3]) {\n            translate([blade_thickness/2 + 0.1, 0, blade_length - i*15])\n                rotate([0, 90, 0])\n                cylinder(h=0.1, r1=total_width/4, r2=total_width/4, $fn=6);\n        }\n    }\n}\n\n// Create the barong\nbarong_kris();",
    "renders": true
  },
  {
    "historical_artifact": "krisbow",
    "openscad_code": "// Krisbow (Javanese kris bow) - historical artifact reproduction\n// A realistic medium-complexity model suitable for 3D printing\n\n// Overall dimensions (mm)\nblade_length = 70;\nblade_width = 8;\nblade_thickness = 3;\nhandle_length = 25;\nhandle_width = 12;\nguard_size = 15;\nbase_height = 5;\n\n// Color definitions\ncolor_blade = [0.6, 0.6, 0.6];  // Steel grey\ncolor_handle = [0.4, 0.2, 0.1];  // Dark wood\ncolor_guard = [0.8, 0.8, 0.2];  // Brass/gold\ncolor_base = [0.3, 0.3, 0.3];  // Dark stone\n\nmodule krisbow() {\n    // Base pedestal\n    color(color_base) {\n        cylinder(h=base_height, r1=guard_size/2+5, r2=guard_size/2+8, $fn=32);\n    }\n    \n    // Guard/water buffalo horn detail\n    translate([0, 0, base_height]) {\n        color(color_guard) {\n            cylinder(h=2, r=guard_size/2, $fn=32);\n            \n            // Decorative ring details\n            for(i=[0:1:3]) {\n                translate([0, 0, 2+i*0.3]) {\n                    cylinder(h=0.5, r=guard_size/2 + i*0.5, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Handle\n    translate([0, 0, base_height+3.5]) {\n        color(color_handle) {\n            // Main handle body - curved\n            for(i=[0:1:handle_length*2]) {\n                translate([sin(i*5)*1.5, 0, i/2]) {\n                    hull() {\n                        sphere(d=handle_width - abs(i-handle_length)/handle_length*4, $fn=16);\n                        translate([0, 0, 0.5]) sphere(d=handle_width - abs(i-handle_length)/handle_length*4, $fn=16);\n                    }\n                }\n            }\n            \n            // Decorative rings\n            for(i=[1:3]) {\n                translate([0, 0, base_height+3.5 + i*handle_length/4]) {\n                    color(color_guard) {\n                        cylinder(h=1, r=handle_width/2+1, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Blade\n    translate([0, 0, base_height+3.5+handle_length]) {\n        color(color_blade) {\n            // Main blade with kris wavy pattern\n            for(wave=[0:1:blade_length*2]) {\n                angle = wave * 15;\n                wave_offset = sin(wave/3) * blade_width/3;\n                translate([wave_offset, 0, wave/2]) {\n                    // Blade cross-section\n                    hull() {\n                        sphere(d=blade_thickness, $fn=8);\n                        translate([blade_width - abs(wave-blade_length)/blade_length*blade_width/2, 0, 0]) \n                            sphere(d=blade_thickness, $fn=8);\n                    }\n                }\n            }\n            \n            // Blood groove\n            difference() {\n                translate([blade_length/2, 0, blade_length/2]) {\n                    cube([blade_length, blade_width/10, blade_length], center=true);\n                }\n                \n                // Subtle groove\n                translate([blade_length/2, 0, blade_length/2]) {\n                    cube([blade_length-4, blade_width/8, blade_length-4], center=true);\n                }\n            }\n            \n            // Tip\n            translate([sin(blade_length*2/3)*blade_width/3, 0, blade_length]) {\n                cylinder(h=8, r1=blade_thickness/2, r2=0, $fn=16);\n            }\n        }\n    }\n}\n\n// Main assembly\nkrisbow();\n\n// Support base for printing\ntranslate([0, 0, -2]) {\n    color([0.2, 0.2, 0.2]) {\n        cylinder(h=2, r=guard_size/2+8, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "compositebow",
    "openscad_code": "// Composite Bow - Historical Artifact (Mongol/Turkic style, 13th century)\n// Realistic style with medium complexity\n// Designed for 3D printing, 80mm length\n\n$fn = 64;\n\n// Overall dimensions\nbow_length = 80;\nbow_height = 25;\nbow_thickness = 4;\n\n// Color definitions\nwood_color = [139/255, 90/255, 43/255];  // Dark brown wood\nhorn_color = [51/255, 25/255, 0/255];    // Dark horn\nsinew_color = [240/255, 234/255, 214/255]; // Cream sinew\nmetal_color = [150/255, 150/255, 150/255]; // Iron\ngold_color = [212/255, 175/255, 55/255];   // Gold decoration\n\n// Main bow module\nmodule composite_bow() {\n    // Bow limbs\n    union() {\n        // Upper limb\n        translate([0, 0, bow_thickness/2])\n            bow_limb();\n        \n        // Lower limb (mirrored)\n        translate([0, 0, -bow_thickness/2])\n            mirror([0, 0, 1])\n                bow_limb();\n        \n        // Grip/handle section\n        grip_section();\n        \n        // Decorative end caps\n        end_caps();\n        \n        // Sinew wrapping details\n        sinew_wrappings();\n        \n        // Decorative inlays\n        decorative_inlays();\n    }\n}\n\n// Bow limb construction\nmodule bow_limb() {\n    // Core wood layer\n    color(wood_color)\n    difference() {\n        // Main curved shape\n        hull() {\n            // Tip\n            translate([bow_length/2-3, 0, 0])\n                scale([1, 0.8, 1])\n                    sphere(2);\n            \n            // Mid-section\n            translate([bow_length/4, bow_height/3, 0])\n                sphere(3);\n            \n            // Grip transition\n            translate([0, bow_height/2, 0])\n                sphere(2.5);\n        }\n        \n        // Hollow center for weight reduction\n        translate([bow_length/4, bow_height/3, 0])\n            scale([0.6, 0.6, 0.6])\n                sphere(2.5);\n    }\n    \n    // Horn layer (belly of bow)\n    color(horn_color)\n    translate([0, 0, -0.5])\n    difference() {\n        hull() {\n            translate([bow_length/2-3, 0, -0.5])\n                scale([0.9, 0.7, 0.5])\n                    sphere(1.8);\n            translate([bow_length/4, bow_height/3, -0.5])\n                scale([0.9, 0.9, 0.5])\n                    sphere(2.5);\n            translate([0, bow_height/2, -0.5])\n                scale([0.9, 0.9, 0.5])\n                    sphere(2);\n        }\n        \n        // Remove wood core overlap\n        translate([bow_length/4, bow_height/3, -0.5])\n            scale([0.5, 0.5, 0.5])\n                sphere(2.5);\n    }\n    \n    // Sinew backing layer\n    color(sinew_color)\n    translate([0, 0, 0.5])\n    difference() {\n        hull() {\n            translate([bow_length/2-3, 0, 0.5])\n                scale([0.95, 0.85, 0.3])\n                    sphere(1.9);\n            translate([bow_length/4, bow_height/3, 0.5])\n                scale([0.95, 0.95, 0.3])\n                    sphere(2.7);\n            translate([0, bow_height/2, 0.5])\n                scale([0.95, 0.95, 0.3])\n                    sphere(2.2);\n        }\n        \n        // Remove wood core overlap\n        translate([bow_length/4, bow_height/3, 0.5])\n            scale([0.55, 0.55, 0.3])\n                sphere(2.7);\n    }\n}\n\n// Grip section\nmodule grip_section() {\n    color(wood_color)\n    difference() {\n        // Main grip\n        hull() {\n            translate([-bow_length/8, bow_height/2, 0])\n                sphere(2.5);\n            translate([bow_length/8, bow_height/2, 0])\n                sphere(2.5);\n            translate([0, bow_height/2 + 2, 0])\n                sphere(2);\n        }\n        \n        // Ergonomic finger grooves\n        for(i = [-1:1]) {\n            translate([i * 2, bow_height/2 + 1, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=4, r=0.8, $fn=16);\n        }\n    }\n    \n    // Leather wrapping texture\n    color([100/255, 70/255, 40/255])\n    for(i = [0:5]) {\n        translate([-bow_length/8 + i*2, bow_height/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=0.3, r=2.5, $fn=20);\n    }\n}\n\n// Decorative end caps\nmodule end_caps() {\n    // Upper cap (siyah)\n    color(metal_color)\n    translate([bow_length/2-3, 0, 0])\n    difference() {\n        union() {\n            // Cap body\n            cylinder(h=4, r1=2.2, r2=1.8, $fn=16);\n            // Decorative ring\n            translate([0, 0, 2])\n                cylinder(h=0.5, r=2.4, $fn=16);\n        }\n        \n        // String groove\n        translate([0, 1.5, 2])\n            cube([3, 0.8, 0.8], center=true);\n    }\n    \n    // Gold inlay decoration\n    color(gold_color)\n    translate([bow_length/2-3, 0, 1])\n        cylinder(h=0.3, r=2, $fn=16);\n}\n\n// Sinew wrappings at joints\nmodule sinew_wrappings() {\n    color(sinew_color)\n    // Wrapping at grip transition\n    for(i = [0:3]) {\n        translate([-i*1.5 - 2, bow_height/2 - 0.5, 0])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, r=2.8, $fn=12);\n    }\n    \n    // Wrapping at limb tips\n    for(side = [-1, 1]) {\n        translate([side * (bow_length/2 - 5), side * bow_height/8, 0])\n            for(i = [0:2]) {\n                rotate([0, 0, side * 30])\n                    translate([0, 0, i*0.4 - 0.4])\n                        rotate([90, 0, 0])\n                            cylinder(h=0.3, r=2, $fn=12);\n            }\n    }\n}\n\n// Decorative inlays\nmodule decorative_inlays() {\n    // Mother-of-pearl inlays on limbs\n    color([0.9, 0.9, 0.85])\n    for(i = [1:3]) {\n        translate([i * 10, bow_height/2 + 1, 0.8])\n            rotate([0, 0, 15])\n                scale([1, 0.6, 1])\n                    cylinder(h=0.2, r=1.5, $fn=6);\n    }\n    \n    // Traditional geometric patterns\n    color(gold_color)\n    for(i = [1:3]) {\n        translate([i * 10 - 5, bow_height/2 - 0.5, 0.8])\n            cube([1.5, 0.2, 0.2], center=true);\n    }\n}\n\n// Main assembly\ncomposite_bow();",
    "renders": true
  },
  {
    "historical_artifact": "longbow",
    "openscad_code": "// Historical English longbow (c. 1350-1450)\n// Based on Mary Rose artifacts\n\nbow_length = 90;\nbow_thickness = 3;\ngrip_length = 15;\ngrip_width = 5;\nnock_radius = 1.5;\nnock_depth = 3;\nstring_diameter = 0.8;\ndecoration_band_width = 2;\ndecoration_band_thickness = 0.2;\n\nmodule bow_stave() {\n    // Main stave body\n    difference() {\n        hull() {\n            // Upper limb\n            translate([0, 0, bow_length/2 - grip_length/2])\n                scale([1, 1, (bow_length - grip_length)/2])\n                    cylinder(h = 1, r = bow_thickness/2, $fn = 16);\n            // Lower limb\n            translate([0, 0, -bow_length/2 + grip_length/2])\n                scale([1, 1, (bow_length - grip_length)/2])\n                    cylinder(h = 1, r = bow_thickness/2, $fn = 16);\n            // Grip section\n            translate([0, 0, 0])\n                cube([grip_width, bow_thickness*1.2, grip_length], center = true);\n        }\n        \n        // Taper limbs\n        for(i = [0:1]) {\n            mirror([0, 0, i == 0 ? 1 : 0]) {\n                translate([0, 0, bow_length/2 - grip_length/2 - 5])\n                    rotate([0, 90, 0])\n                        cylinder(h = bow_thickness*2, r1 = bow_thickness*0.8, r2 = bow_thickness*0.4, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule bow_nocks() {\n    for(i = [0:1]) {\n        mirror([0, 0, i == 0 ? 1 : 0]) {\n            // Upper nock\n            translate([0, bow_thickness/2, bow_length/2 - nock_depth/2]) {\n                difference() {\n                    cylinder(h = nock_depth, r = nock_radius, $fn = 12);\n                    translate([0, -nock_radius/2, nock_depth/2])\n                        cube([nock_radius*2, nock_radius, nock_depth+1], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule bow_string() {\n    color(\"black\") {\n        translate([0, bow_thickness/2 + string_diameter/2, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = bow_length - nock_depth*2, r = string_diameter/2, $fn = 8);\n            }\n        }\n    }\n}\n\nmodule decorative_bands() {\n    color(\"gold\") {\n        // Upper decorative band\n        translate([0, 0, grip_length/2 + decoration_band_width/2])\n            cube([grip_width + 1, decoration_band_thickness, decoration_band_width], center = true);\n        \n        // Lower decorative band\n        translate([0, 0, -grip_length/2 - decoration_band_width/2])\n            cube([grip_width + 1, decoration_band_thickness, decoration_band_width], center = true);\n        \n        // Arrow pass reinforcement\n        translate([grip_width/2 + 0.5, 0, 0])\n            cube([1, decoration_band_thickness, grip_length/3], center = true);\n    }\n}\n\nmodule bow() {\n    color(\"saddlebrown\") {\n        union() {\n            bow_stave();\n            bow_nocks();\n            decorative_bands();\n        }\n    }\n    bow_string();\n}\n\n// Assemble the bow\nrotate([90, 0, 0]) {\n    bow();\n}",
    "renders": true
  },
  {
    "historical_artifact": "shortbow",
    "openscad_code": "// Historical Shortbow - Scythian Composite Bow Replica (5th-3rd Century BCE)\n// Medium complexity realistic style with artifact details\n\n$fn = 32;\n\n// Main bow dimensions\nbow_length = 80;\nbow_width = 8;\nbow_thickness = 4;\n\n// Color definitions\nwood_color = [139/255, 69/255, 19/255];\nhorn_color = [50/255, 50/255, 50/255];\nsinew_color = [250/255, 240/255, 230/255];\nmetal_color = [184/255, 115/255, 51/255];\n\n// Main bow body with characteristic Scythian recurve\nmodule bow_body() {\n    color(wood_color) {\n        // Upper limb\n        translate([0, bow_length/2, 0])\n            rotate([0, 15, 0])\n            scale([1, 1.2, 1])\n            cylinder(h=bow_length/2, r1=bow_width/2, r2=bow_width/3);\n        \n        // Lower limb\n        translate([0, -bow_length/2, 0])\n            rotate([0, -15, 0])\n            scale([1, 1.2, 1])\n            cylinder(h=bow_length/2, r1=bow_width/2, r2=bow_width/3);\n        \n        // Central grip\n        translate([0, 0, 0])\n            scale([1.2, 0.8, 0.9])\n            cube([bow_width*1.5, bow_width*2, bow_thickness], center=true);\n    }\n}\n\n// Horn reinforcements on limbs\nmodule horn_siyahs() {\n    color(horn_color) {\n        // Upper siyah (tip reinforcement)\n        translate([0, bow_length/2 + 8, 0])\n            rotate([0, 30, 0])\n            scale([0.8, 0.3, 0.6])\n            cylinder(h=10, r1=bow_width/3, r2=bow_width/4);\n        \n        // Lower siyah\n        translate([0, -bow_length/2 - 8, 0])\n            rotate([0, -30, 0])\n            scale([0.8, 0.3, 0.6])\n            cylinder(h=10, r1=bow_width/3, r2=bow_width/4);\n    }\n}\n\n// Sinew backing layer (visible on back of bow)\nmodule sinew_backing() {\n    color(sinew_color) {\n        translate([-bow_width/2 - 0.5, 0, 0])\n            scale([0.5, 1, 0.9])\n            cube([1, bow_length, bow_thickness*0.9], center=true);\n    }\n}\n\n// Decorative bone inlays\nmodule decorative_inlays() {\n    color([235/255, 235/255, 235/255]) {\n        // Central grip decorations\n        for(i = [-1:1]) {\n            translate([bow_width/2 + 1, i*5, 0])\n                scale([0.5, 0.5, 0.3])\n                sphere(2);\n        }\n        \n        // Limb tip decorations\n        for(pos = [bow_length/2 - 5, -bow_length/2 + 5]) {\n            translate([0, pos, bow_thickness/2 + 0.5])\n                scale([1, 0.8, 0.2])\n                cylinder(h=1, r=2);\n        }\n    }\n}\n\n// Bowstring nocks\nmodule string_nocks() {\n    color(metal_color) {\n        // Upper nock\n        translate([0, bow_length/2 + 10, 0])\n            difference() {\n                cylinder(h=3, r=1.5);\n                translate([0, 0, -0.1])\n                    cylinder(h=3.2, r=0.5);\n            }\n        \n        // Lower nock\n        translate([0, -bow_length/2 - 10, 0])\n            difference() {\n                cylinder(h=3, r=1.5);\n                translate([0, 0, -0.1])\n                    cylinder(h=3.2, r=0.5);\n            }\n    }\n}\n\n// Leather wrapping on grip\nmodule grip_wrapping() {\n    color([101/255, 67/255, 33/255]) {\n        // Spiral leather wrap\n    for(i = [-3:0.5:3]) {\n        rotate([0, 0, i*30])\n            translate([0, i*2, bow_thickness/2 + 0.5])\n            scale([0.8, 0.2, 0.2])\n            cube([bow_width*1.5, 1, 0.5]);\n    }\n    }\n}\n\n// Assembly of the complete bow\nunion() {\n    bow_body();\n    horn_siyahs();\n    sinew_backing();\n    decorative_inlays();\n    string_nocks();\n    grip_wrapping();\n}",
    "renders": true
  },
  {
    "historical_artifact": "recurve",
    "openscad_code": "// Recurve Composite Bow - Scythian Style (circa 500 BCE)\n// Medium complexity realistic model with historical details\n\n$fn = 32;\n\n// Overall dimensions\nbow_length = 80;\nbow_height = 35;\ngrip_width = 8;\nlimb_thickness = 3;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255]; // saddle brown\nhorn_color = [255/255, 250/255, 240/255]; // floral white\nsinew_color = [245/255, 245/255, 220/255]; // beige\ndecoration_color = [218/255, 165/255, 32/255]; // goldenrod\n\nmodule bow_limb(side) {\n    // Main limb curve with recurve tip\n    translate([0, side * (bow_height/2 - 5), 0])\n    rotate([0, 0, side * -30])\n    union() {\n        // Upper limb\n        color(wood_color)\n        difference() {\n            // Tapered limb\n            hull() {\n                translate([bow_length/4, 0, 0])\n                scale([1, 0.8, 1])\n                sphere(r=limb_thickness);\n                \n                translate([-bow_length/4, side * (bow_height/2 - 8), 0])\n                sphere(r=limb_thickness * 0.7);\n            }\n            \n            // Hollow core\n            translate([0, 0, -limb_thickness/2 - 0.5])\n            cube([bow_length/2 + 5, bow_height/2, limb_thickness + 1], center=true);\n        }\n        \n        // Horn overlay on belly\n        color(horn_color)\n        translate([0, -side * 0.5, limb_thickness/2 - 0.2])\n        scale([1, 0.8, 0.3])\n        hull() {\n            translate([bow_length/4 - 5, 0, 0])\n            sphere(r=limb_thickness * 0.8);\n            \n            translate([-bow_length/4 + 3, side * (bow_height/2 - 8), 0])\n            sphere(r=limb_thickness * 0.5);\n        }\n        \n        // Recurve tip\n        color(horn_color)\n        translate([-bow_length/4 - 3, side * (bow_height/2 - 5), 0])\n        rotate([0, 90, side * 20])\n        cylinder(h=8, r1=limb_thickness * 0.6, r2=limb_thickness * 0.3);\n        \n        // Decorative string bridges\n        for(i = [1:3]) {\n            color(decoration_color)\n            translate([bow_length/4 - i*7, side * (bow_height/2 - 8 + i*2), 0])\n            rotate([90, 0, 0])\n            cylinder(h=limb_thickness + 0.4, r=0.5);\n        }\n    }\n}\n\nmodule bow_grip() {\n    // Central grip section\n    color(wood_color)\n    difference() {\n        // Grip handle\n        hull() {\n            translate([0, 0, 0])\n            sphere(r=grip_width/2);\n            \n            translate([bow_length/6, 0, 0])\n            scale([1.2, 0.8, 1])\n            sphere(r=grip_width/2);\n            \n            translate([-bow_length/6, 0, 0])\n            scale([1.2, 0.8, 1])\n            sphere(r=grip_width/2);\n        }\n        \n        // Finger groove\n        translate([0, 0, -grip_width/2 - 1])\n        cube([bow_length/3 + 2, grip_width, grip_width + 2], center=true);\n    }\n    \n    // Leather wrap texture\n    color(sinew_color)\n    for(i = [-2:2]) {\n        translate([i * 3, 0, grip_width/2 - 0.2])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r=grip_width/2 + 0.2);\n    }\n    \n    // Decorative end caps\n    color(decoration_color)\n    translate([bow_length/4 + 2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=1.5, r=grip_width/2);\n    \n    translate([-bow_length/4 - 2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=1.5, r=grip_width/2);\n}\n\nmodule bow_string() {\n    // Simple string representation\n    color([0, 0, 0])\n    translate([0, 0, limb_thickness/2 + 0.5])\n    rotate([0, 0, 0])\n    hull() {\n        translate([bow_length/4, bow_height/2 - 5, 0])\n        sphere(r=0.3);\n        \n        translate([bow_length/4, -bow_height/2 + 5, 0])\n        sphere(r=0.3);\n    }\n}\n\n// Assembly\ntranslate([0, 0, limb_thickness/2])\nunion() {\n    bow_grip();\n    bow_limb(1);  // Upper limb\n    bow_limb(-1); // Lower limb\n    bow_string();\n}\n\n// Base stand for display\ncolor([105/255, 105/255, 105/255])\ntranslate([0, 0, -5])\ndifference() {\n    cube([bow_length + 10, 15, 3], center=true);\n    translate([0, 0, -2])\n    cube([bow_length + 12, 17, 5], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "selfbow",
    "openscad_code": "// Selfbow - Historical wooden bow artifact\n// Scaled for 3D printing, ~80mm total length\n\n// Material colors\ncolor_bow = [139/255, 69/255, 19/255];    // Dark wood\ncolor_handle = [101/255, 67/255, 33/255]; // Lighter handle\ncolor_string = [105/255, 105/255, 105/255]; // Grey string\n\n// Main parameters\nbow_length = 80;\nbow_thickness = 3;\nhandle_length = 20;\nhandle_width = 8;\n\n// Bow stave module with natural taper\nmodule bow_stave() {\n    color(color_bow)\n    union() {\n        // Handle section - thicker central part\n        translate([-handle_length/2, 0, 0])\n            cube([handle_length, handle_width, bow_thickness], center=true);\n        \n        // Upper limb - tapered\n        translate([handle_length/2 + 15, 0, 0])\n            scale([1, 0.7, 1])\n            cube([30, 6, bow_thickness], center=true);\n        \n        // Lower limb - tapered\n            translate([-handle_length/2 - 15, 0, 0])\n            scale([1, 0.7, 1])\n            cube([30, 6, bow_thickness], center=true);\n    }\n}\n\n// Decorative handle wrap\nmodule handle_wrapping() {\n    color(color_handle)\n    for (i = [-3:3]) {\n        translate([i * 2.5, 0, bow_thickness/2 + 0.5])\n            rotate([90, 0, 0])\n            cylinder(h=handle_width, d=1, $fn=8);\n    }\n}\n\n// Historical knot detail\nmodule decorative_knot() {\n    translate([handle_length/2 - 5, 0, bow_thickness/2 + 1])\n    color(color_handle)\n    difference() {\n        cylinder(h=2, d=4, $fn=20);\n        translate([0, 0, -0.1])\n            cylinder(h=2.2, d=2, $fn=20);\n    }\n}\n\n// Bow string with historical serving\nmodule bow_string() {\n    color(color_string)\n    translate([0, 0, bow_thickness/2 + 0.5])\n    union() {\n        // Main string\n        for (side = [-1, 1]) {\n            translate([0, side * 3.5, 0])\n                cylinder(h=bow_length, d=0.5, $fn=8);\n        }\n        \n        // Serving at center\n        translate([-5, 0, 0])\n            for (i = [0:4]) {\n                translate([i, 0, 0])\n                    cylinder(h=10, d=1.2, $fn=8);\n            }\n    }\n}\n\n// Nock grooves\nmodule nock_grooves() {\n    color(color_bow)\n    for (end = [-1, 1]) {\n        translate([end * (bow_length/2 - 2), 0, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=6, d=3, $fn=20);\n                translate([0, 0, -0.1])\n                    cylinder(h=6.2, d=2, $fn=20);\n            }\n    }\n}\n\n// Growth rings texture\nmodule growth_rings() {\n    color(color_bow)\n    for (i = [1:5]) {\n        translate([0, 0, -bow_thickness/2 - 0.1 + i * 0.2])\n            scale([1.02, 1.02, 0.01])\n            cube([bow_length, 10, bow_thickness], center=true);\n    }\n}\n\n// Assemble complete bow\nunion() {\n    growth_rings();\n    bow_stave();\n    handle_wrapping();\n    decorative_knot();\n    nock_grooves();\n    bow_string();\n}",
    "renders": true
  },
  {
    "historical_artifact": "yumi",
    "openscad_code": "// Historical Yumi (Japanese Asymmetrical Bow) - Realistic Style\n\n// Overall scale factor for 3D printing (target ~70mm height)\nscale_factor = 0.15;\n\n// Main bow parameters\nbow_height = 70 * scale_factor;\nbow_width = 45 * scale_factor;\nbow_thickness = 3 * scale_factor;\ngrip_offset = 15 * scale_factor; // Asymmetrical grip position\n\n// Colors\nbamboo_color = [194/255, 154/255, 108/255];\nlacquer_color = [139/255, 69/255, 19/255];\nleather_color = [101/255, 67/255, 33/255];\ngold_color = [212/255, 175/255, 55/255];\n\n// Module for decorative grip wrapping\nmodule grip_wrapping() {\n    color(leather_color) {\n        // Main grip area\n        difference() {\n            translate([0, grip_offset, 0])\n                cube([bow_thickness * 3, bow_height * 0.15, bow_thickness * 2], center=true);\n            \n            // Ridges for texture\n            for(i = [-2:2]) {\n                translate([0, grip_offset + i * 3 * scale_factor, 0])\n                    cube([bow_thickness * 3.2, 1 * scale_factor, bow_thickness * 2.2], center=true);\n            }\n        }\n        \n        // Binding cords\n        color([0.8, 0.8, 0.8]) {\n            for(j = [0:5]) {\n                translate([0, grip_offset - 8 * scale_factor + j * 3 * scale_factor, bow_thickness])\n                    rotate([90, 0, 0])\n                    cylinder(h=bow_thickness * 3, r=0.3 * scale_factor, center=true);\n            }\n        }\n    }\n}\n\n// Module for bow limbs\nmodule bow_limb(side) {\n    // Main limb curve\n    color(bamboo_color) {\n        difference() {\n            // Upper limb (longer)\n            if(side == \"upper\") {\n                translate([0, bow_height/2 - grip_offset, 0])\n                    scale([1, 1.8, 1])\n                    rotate([0, 0, side == \"upper\" ? 15 : -15])\n                    cylinder(h=bow_height * 0.6, r1=bow_thickness * 1.5, r2=bow_thickness, center=true);\n            } else {\n                // Lower limb (shorter)\n                translate([0, -bow_height/2 - grip_offset, 0])\n                    scale([1, 1.2, 1])\n                    rotate([0, 0, -15])\n                    cylinder(h=bow_height * 0.4, r1=bow_thickness * 1.5, r2=bow_thickness, center=true);\n            }\n        }\n    }\n    \n    // Lacquer coating\n    color(lacquer_color) {\n        if(side == \"upper\") {\n            translate([0, bow_height/2 - grip_offset + bow_height * 0.3, 0])\n                rotate([0, 0, 15])\n                cube([bow_thickness * 3.2, bow_height * 0.6, bow_thickness * 2.2], center=true);\n        } else {\n            translate([0, -bow_height/2 - grip_offset - bow_height * 0.2, 0])\n                rotate([0, 0, -15])\n                cube([bow_thickness * 3.2, bow_height * 0.4, bow_thickness * 2.2], center=true);\n        }\n    }\n}\n\n// Module for string (simplified for 3D printing)\nmodule bow_string() {\n    color([0.9, 0.9, 0.9]) {\n        hull() {\n            // Upper nock point\n            translate([0, bow_height/2 - grip_offset + bow_height * 0.3, 0])\n                sphere(0.5 * scale_factor);\n            // Lower nock point\n            translate([0, -bow_height/2 - grip_offset - bow_height * 0.2, 0])\n                sphere(0.5 * scale_factor);\n        }\n    }\n}\n\n// Module for decorative mon (family crest) on grip\nmodule mon_crest() {\n    color(gold_color) {\n        // Simple chrysanthemum mon\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n            translate([0, grip_offset, bow_thickness * 1.1])\n                sphere(0.8 * scale_factor);\n        }\n        translate([0, grip_offset, bow_thickness * 1.2])\n            sphere(1 * scale_factor);\n    }\n}\n\n// Module for bow tips (nocks)\nmodule bow_tip(side) {\n    color(bamboo_color) {\n        y_pos = side == \"upper\" ? \n            bow_height/2 - grip_offset + bow_height * 0.3 : \n            -bow_height/2 - grip_offset - bow_height * 0.2;\n        \n        translate([0, y_pos, 0])\n            cylinder(h=bow_thickness * 2, r1=bow_thickness * 1.2, r2=bow_thickness * 0.8, center=true);\n        \n        // Horn nock reinforcement\n        color([0.3, 0.3, 0.3]) {\n            translate([0, y_pos + (side == \"upper\" ? 1 : -1) * bow_thickness, 0])\n                cube([bow_thickness * 0.5, bow_thickness * 0.5, bow_thickness * 1.5], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central grip section\n    color(bamboo_color) {\n        translate([0, 0, 0])\n            cube([bow_thickness * 3, bow_height * 0.2, bow_thickness * 2], center=true);\n    }\n    \n    // Upper limb\n    bow_limb(\"upper\");\n    \n    // Lower limb\n    bow_limb(\"lower\");\n    \n    // Grip wrapping\n    grip_wrapping();\n    \n    // Bow string (simplified)\n    bow_string();\n    \n    // Decorative mon\n    mon_crest();\n    \n    // Bow tips\n    bow_tip(\"upper\");\n    bow_tip(\"lower\");\n}",
    "renders": true
  },
  {
    "historical_artifact": "daikyu",
    "openscad_code": "// Daikyu (Japanese longbow) historical artifact - realistic style, medium complexity\n// Overall length: 80mm, suitable for 3D printing\n\n// Color definitions\n$fn = 30;\n\n// Main bow module\nmodule daikyu_bow() {\n    color(\"saddlebrown\")\n    union() {\n        // Upper limb\n        translate([0, 0, 35])\n        rotate([0, 0, -15])\n        scale([0.8, 0.8, 15])\n        cylinder(h = 1, r = 2.5);\n        \n        // Lower limb\n        translate([0, 0, -35])\n        rotate([0, 0, 15])\n        scale([0.8, 0.8, 15])\n        cylinder(h = 1, r = 2.5);\n        \n        // Grip section\n        color(\"darkgoldenrod\")\n        translate([0, 0, 0])\n        scale([3, 2.5, 8])\n        cylinder(h = 1, r = 1);\n        \n        // Rattan wrapping at grip\n        color(\"tan\")\n        for(i = [-3:1:3]) {\n            translate([2.5, 0, i * 1.2])\n            rotate([90, 0, 0])\n            cylinder(h = 5, r = 0.3);\n        }\n        \n        // Bowstring nocks\n        color(\"black\")\n        translate([0, 2.5, 35])\n        sphere(r = 0.8);\n        translate([0, 2.5, -35])\n        sphere(r = 0.8);\n    }\n}\n\n// Bowstring\nmodule bowstring() {\n    color(\"slategray\")\n    difference() {\n        // Main string\n        translate([0, 2.5, 0])\n        scale([0.2, 0.2, 70])\n        cylinder(h = 1, r = 1);\n        \n        // Grip clearance\n        translate([0, 2.5, 0])\n        scale([1, 1, 8])\n        cube([3, 3, 1], center = true);\n    }\n}\n\n// Decorative inlays (mother-of-pearl)\nmodule decorative_inlays() {\n    color(\"honeydew\")\n    union() {\n        // Upper limb inlays\n        for(pos = [25, 30]) {\n            translate([1.5, 0.5, pos])\n            rotate([90, 0, 45])\n            scale([0.3, 0.3, 1])\n            cube([2, 2, 0.5]);\n        }\n        \n        // Lower limb inlays\n        for(pos = [-25, -30]) {\n            translate([1.5, 0.5, pos])\n            rotate([90, 0, 45])\n            scale([0.3, 0.3, 1])\n            cube([2, 2, 0.5]);\n        }\n    }\n}\n\n// Bamboo nodes texture\nmodule bamboo_nodes() {\n    color(\"peru\")\n    union() {\n        // Upper limb nodes\n        for(z = [15:5:33]) {\n            translate([0, 0, z])\n            scale([3.2, 3.2, 0.5])\n            cylinder(h = 1, r = 2.5);\n        }\n        \n        // Lower limb nodes\n        for(z = [-15:-5:-33]) {\n            translate([0, 0, z])\n            scale([3.2, 3.2, 0.5])\n            cylinder(h = 1, r = 2.5);\n        }\n    }\n}\n\n// Lacquer finish detail\nmodule lacquer_detail() {\n    color(\"darkred\", 0.3)\n    union() {\n        // Upper limb lacquer\n        translate([0, 0, 20])\n        scale([3.5, 3.5, 20])\n        cylinder(h = 1, r = 2.5);\n        \n        // Lower limb lacquer\n        translate([0, 0, -20])\n        scale([3.5, 3.5, 20])\n        cylinder(h = 1, r = 2.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bow\n    rotate([90, 0, 0])\n    daikyu_bow();\n    \n    // Bamboo texture\n    rotate([90, 0, 0])\n    bamboo_nodes();\n    \n    // Lacquer coating\n    rotate([90, 0, 0])\n    lacquer_detail();\n    \n    // Decorative elements\n    rotate([90, 0, 0])\n    decorative_inlays();\n    \n    // Bowstring\n    rotate([90, 0, 0])\n    bowstring();\n}",
    "renders": true
  },
  {
    "historical_artifact": "hankyu",
    "openscad_code": "// Hankyu Historical Japanese Bow - Realistic Style\n// Based on Edo period short bow design\n\nmodule bow_stave() {\n    // Main bow stave with slight reflex curve\n    difference() {\n        union() {\n            // Upper limb\n            translate([0, 0, 5])\n                rotate([0, 5, 0])\n                scale([1, 0.8, 1])\n                cylinder(h=45, r1=3, r2=2.5, $fn=8);\n            \n            // Lower limb  \n            translate([0, 0, -5])\n                rotate([0, -5, 0])\n                scale([1, 0.8, 1])\n                cylinder(h=45, r1=3, r2=2.5, $fn=8);\n            \n            // Grip section\n            translate([0, 0, 0])\n                cylinder(h=15, r1=4, r2=4, $fn=16);\n                \n            // String nocks\n            translate([0, 4, 22])\n                sphere(r=2, $fn=8);\n            translate([0, 4, -22])\n                sphere(r=2, $fn=8);\n        }\n        \n        // Recessed grip area\n        translate([0, -2, 0])\n            cube([8, 4, 12], center=true);\n    }\n}\n\nmodule bow_string() {\n    color(\"tan\")\n    translate([0, 4, 0])\n        cylinder(h=44, r=0.3, $fn=6);\n}\n\nmodule decorative_inlays() {\n    // Traditional rattan wrappings\n    color([0.4, 0.2, 0.1])\n    for (i = [-15:5:15]) {\n        translate([0, 0, i])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=4.2, r2=4.2, $fn=16);\n    }\n    \n    // Mother-of-pearl inlay dots\n    color([0.9, 0.9, 0.85])\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([3.5, 0, 0])\n            sphere(r=0.5, $fn=8);\n    }\n}\n\nmodule arrow_rest() {\n    // Traditional horn rest\n    color([0.8, 0.7, 0.6])\n    translate([0, 0, 8])\n    rotate([0, 90, 0])\n    difference() {\n        cube([4, 2, 1], center=true);\n        translate([0, 0, -0.6])\n            cube([3.5, 1.8, 1], center=true);\n    }\n}\n\nmodule bow_tassel() {\n    // Decorative silk tassel\n    color([0.7, 0.1, 0.1])\n    translate([0, 6, 0])\n    for (i = [0:15:345]) {\n        rotate([0, 0, i])\n        translate([2, 0, 0])\n            cylinder(h=8, r=0.3, $fn=4);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main bow in traditional bamboo color\n    color([0.85, 0.65, 0.45])\n    bow_stave();\n    \n    // Decorative elements\n    decorative_inlays();\n    \n    // Functional components\n    arrow_rest();\n    \n    // String (loose representation)\n    bow_string();\n    \n    // Ceremonial tassel\n    bow_tassel();\n}",
    "renders": true
  },
  {
    "historical_artifact": "crossbow",
    "openscad_code": "// Medieval Crossbow (circa 14th century)\n// Realistic style, medium complexity\n\n// Overall dimensions\nlength = 85;\nwidth = 45;\nheight = 12;\n\nmodule crossbow() {\n    // Stock (tiller) - wooden body\n    color(\"saddlebrown\")\n    difference() {\n        // Main stock shape\n        translate([-5, -3, 0])\n            cube([70, 20, 10], center=false);\n        \n        // Trigger slot\n        translate([25, 7, 4])\n            cube([8, 6, 3], center=false);\n        \n        // Arrow groove\n        translate([40, 8.5, 9])\n            cube([40, 3, 1], center=false);\n    }\n    \n    // Decorative end cap\n    color(\"goldenrod\")\n    translate([65, 9.5, 5])\n        cylinder(h=10, r=3, $fn=16);\n    \n    // Stirrup (metal foot loop)\n    color(\"silver\")\n    difference() {\n        // Main loop\n        translate([-2, 9.5, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=5, $fn=32);\n        \n        // Hollow center\n        translate([-1.5, 9.5, 0])\n            rotate([0, 90, 0])\n                cylinder(h=11, r=3.5, $fn=32);\n    }\n    \n    // Prod (bow) - composite material\n    color(\"dimgray\")\n    union() {\n        // Left limb\n        translate([10, -20, 5])\n            rotate([0, 0, -30])\n                cube([3, 25, 5], center=false);\n        \n        // Right limb\n        translate([10, -5, 5])\n            rotate([0, 0, 30])\n                cube([3, 25, 5], center=false);\n        \n        // Center section\n        translate([5, 0, 5])\n            cube([10, 2, 5], center=false);\n    }\n    \n    // Bowstring\n    color(\"beige\")\n    translate([10, -20, 7.5])\n        rotate([0, 0, 90])\n            cylinder(h=45, r=0.5, $fn=8);\n    \n    // Windlass mechanism\n    color(\"silver\")\n    for(i=[0:1:3]) {\n        translate([50 - i*8, 12, 2])\n            cylinder(h=8, r=1, $fn=12);\n    }\n    \n    // Decorative inlays\n    color(\"goldenrod\")\n    for(i=[0:1:2]) {\n        translate([35 + i*10, 2, 10.1])\n            cylinder(h=0.5, r=2, $fn=6);\n    }\n    \n    // Trigger mechanism\n    color(\"silver\")\n    translate([28, 10, 2])\n        rotate([0, 0, -15])\n            cube([2, 8, 3], center=false);\n    \n    // Sight notch\n    color(\"black\")\n    translate([60, 9.5, 9.5])\n        cube([2, 1, 0.5], center=false);\n}\n\ncrossbow();",
    "renders": true
  },
  {
    "historical_artifact": "arbalest",
    "openscad_code": "// Medieval Arbalest (Crossbow) - Historical Artifact\n// Based on 15th century European designs\n\n$fn = 32;\n\n// Overall scale factor\nscale_factor = 0.3;\n\n// Main colors\nwood_color = [0.4, 0.2, 0.1];\nmetal_color = [0.5, 0.5, 0.5];\nstring_color = [0.9, 0.9, 0.8];\n\n// Main assembly\nmodule arbalest() {\n    union() {\n        // Stock (tiller) - wooden body\n        color(wood_color)\n        translate([0, 0, -5])\n        scale([1, 1, 0.8])\n        cube([50, 15, 10], center = true);\n        \n        // Decorative butt plate\n        color(metal_color)\n        translate([-24, 0, -2])\n        cube([3, 15, 5], center = true);\n        \n        // Steel prod (bow)\n        color(metal_color)\n        translate([15, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h = 3, r1 = 8, r2 = 8, center = true);\n        \n        // Prod reinforcement bands\n        for (i = [-1, 1]) {\n            color(metal_color)\n            translate([15, i * 8, 5])\n            rotate([0, 90, 0])\n            cylinder(h = 5, r1 = 1, r2 = 1, center = true);\n        }\n        \n        // Bowstring\n        color(string_color)\n        translate([15, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 16, r1 = 0.5, r2 = 0.5, center = true);\n        \n        // Windlass mechanism\n        color(metal_color)\n        translate([-10, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 20, r1 = 3, r2 = 3, center = true);\n        \n        // Windlass cranks\n        for (i = [-1, 1]) {\n            color(metal_color)\n            translate([-10, i * 10, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 2, r1 = 1, r2 = 1, center = true);\n        }\n        \n        // Trigger guard\n        color(metal_color)\n        translate([-5, 0, -7])\n        difference() {\n            cube([10, 8, 2], center = true);\n            translate([0, 0, -1])\n            cube([8, 6, 4], center = true);\n        }\n        \n        // Decorative inlay on stock\n        color([0.8, 0.6, 0.2])\n        translate([0, 0, -1])\n        for (i = [-15:5:15]) {\n            translate([i, 0, 0])\n            cube([2, 1, 0.5], center = true);\n        }\n        \n        // Arrow groove\n        color([0.3, 0.15, 0.05])\n        translate([0, 0, 0])\n        cube([40, 2, 1], center = true);\n        \n        // Sight bead (front)\n        color(metal_color)\n        translate([20, 0, 3])\n        sphere(r = 1);\n        \n        // Reinforcement plates\n        for (pos = [[10, 5], [10, -5], [-15, 5], [-15, -5]]) {\n            color(metal_color)\n            translate([pos[0], pos[1], -4])\n            cube([4, 4, 1], center = true);\n        }\n        \n        // Stirrup (foot hold)\n        color(metal_color)\n        translate([22, 0, -8])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 12, r1 = 4, r2 = 4, center = true);\n            translate([0, 0, -2])\n            cube([6, 12, 5], center = true);\n        }\n    }\n}\n\n// Scale and render the final model\nscale([scale_factor, scale_factor, scale_factor])\n    arbalest();",
    "renders": true
  },
  {
    "historical_artifact": "ballista",
    "openscad_code": "// Ballista - Roman torsion catapult\n// Medium complexity historical artifact with realistic styling\n\n// Main dimensions in mm\n$fn = 32;\n\nmodule ballista() {\n    // Wooden frame color\n    color([0.65, 0.5, 0.35]) {\n        // Base frame\n        translate([0, 0, 5]) cube([80, 20, 10], center = true);\n        \n        // Side supports\n        for(side = [-1, 1]) {\n            translate([side * 35, 0, 15]) rotate([0, 10 * side, 0]) \n            cube([5, 15, 25]);\n        }\n        \n        // Torsion springs housing\n        for(side = [-1, 1]) {\n            translate([side * 25, 0, 25]) rotate([0, 90, 0])\n            cylinder(h = 15, r = 8);\n            \n            // Winding levers\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle]) \n                translate([side * 25, 12, 25]) rotate([90, 0, 0])\n                cylinder(h = 15, r = 2);\n            }\n        }\n        \n        // Main beam\n        translate([0, 0, 35]) cube([60, 10, 5], center = true);\n        \n        // Stock/slider\n        translate([0, 0, 40]) cube([50, 8, 3], center = true);\n        \n        // Bow arms\n        for(side = [-1, 1]) {\n            translate([side * 30, 0, 38]) rotate([0, 0, side * 15])\n            cube([3, 3, 30]);\n        }\n        \n        // Support struts\n        for(pos = [-20, 0, 20]) {\n            translate([pos, 0, 20]) cube([3, 18, 20]);\n        }\n    }\n    \n    // Metal fittings (bronze)\n    color([0.8, 0.5, 0.2]) {\n        // Reinforcement bands\n        for(pos = [-30, -10, 10, 30]) {\n            translate([pos, 0, 8]) cube([5, 22, 2], center = true);\n        }\n        \n        // Torsion spring caps\n        for(side = [-1, 1]) {\n            translate([side * 25, 0, 25]) \n            cylinder(h = 2, r = 10);\n            \n            // Decorative rivets\n            for(angle = [0:60:300]) {\n                rotate([0, 0, angle]) \n                translate([side * 25, 9, 25]) \n                sphere(r = 1.5);\n            }\n        }\n        \n        // Trigger mechanism\n        translate([25, 0, 42]) cube([8, 6, 4], center = true);\n    }\n    \n    // Rope torsion springs\n    color([0.4, 0.3, 0.2]) {\n        for(side = [-1, 1]) {\n            translate([side * 25, 0, 25]) rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 15, r = 7.5);\n                cylinder(h = 17, r = 5);\n            }\n        }\n    }\n    \n    // Bowstring\n    color([0.6, 0.6, 0.6]) {\n        translate([0, 0, 53]) cube([60, 0.5, 0.5], center = true);\n    }\n    \n    // Arrow\n    color([0.7, 0.6, 0.5]) {\n        translate([0, 0, 42]) rotate([90, 0, 0])\n        cylinder(h = 40, r = 1.5);\n        \n        // Arrow head\n        translate([0, 0, 82]) rotate([90, 0, 0])\n        cylinder(h1 = 5, r1 = 0, h2 = 5, r2 = 2);\n    }\n    \n    // Decorative Latin inscription\n    color([0.9, 0.9, 0.9]) {\n        translate([0, 11, 37]) rotate([90, 0, 0]) linear_extrude(height = 0.5)\n        text(\"LEGIO X FRETENSIS\", size = 3, halign = \"center\");\n    }\n}\n\n// Assembly\nrotate([0, -20, 0]) ballista();",
    "renders": true
  },
  {
    "historical_artifact": "scorpio",
    "openscad_code": "// Scorpio (Roman torsion catapult) - Historical Artifact\n// Medium complexity realistic representation\n\n// Overall dimensions: ~85mm length, ~50mm width, ~30mm height\n\n$fn = 32;\n\n// Main colors\nwood_color = \"#8B4513\";\nbronze_color = \"#CD7F32\";\niron_color = \"#2F4F4F\";\nrope_color = \"#D2691E\";\n\nmodule scorpio_body() {\n    // Main wooden stock/body\n    color(wood_color)\n    difference() {\n        // Main body\n        cube([70, 15, 8], center = true);\n        \n        // Torsion hole\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 20, d = 8, center = true);\n        \n        // Arrow channel\n        translate([-30, 0, 3.5])\n        cube([60, 2, 2]);\n    }\n    \n    // Decorative bronze reinforcements\n    color(bronze_color)\n    union() {\n        // Front reinforcement\n        translate([-35, 0, 0])\n        difference() {\n            cube([3, 18, 10], center = true);\n            cylinder(h = 3, d = 6, center = true);\n        }\n        \n        // Rear reinforcement\n        translate([35, 0, 0])\n        difference() {\n            cube([3, 18, 10], center = true);\n            cylinder(h = 3, d = 6, center = true);\n        }\n    }\n}\n\nmodule torsion_springs() {\n    // Left torsion spring\n    color(rope_color)\n    translate([-5, 7, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 14, d = 6);\n    \n    // Right torsion spring\n    translate([-5, -7, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 14, d = 6);\n    \n    // Bronze washers\n    color(bronze_color)\n    for(i = [0:1]) {\n        translate([-5, (i == 0 ? 7 : -7), 7])\n        rotate([90, 0, 0])\n        cylinder(h = 1, d = 8);\n        \n        translate([-5, (i == 0 ? 7 : -7), -7])\n        rotate([90, 0, 0])\n        cylinder(h = 1, d = 8);\n    }\n}\n\nmodule bow_arms() {\n    // Left bow arm\n    color(wood_color)\n    translate([-5, 12, 0])\n    rotate([0, 0, 30])\n    cube([35, 3, 3]);\n    \n    // Right bow arm\n    translate([-5, -12, 0])\n    rotate([0, 0, -30])\n    cube([35, 3, 3]);\n    \n    // Bronze tips\n    color(bronze_color)\n    union() {\n        translate([25, 18, 0])\n        rotate([0, 0, 30])\n        cube([5, 4, 4]);\n        \n        translate([25, -18, 0])\n        rotate([0, 0, -30])\n        cube([5, 4, 4]);\n    }\n}\n\nmodule bowstring() {\n    // Bowstring\n    color(rope_color)\n    hull() {\n        translate([25, 18, 0])\n        sphere(d = 1.5);\n        \n        translate([25, -18, 0])\n        sphere(d = 1.5);\n    }\n}\n\nmodule trigger_mechanism() {\n    // Bronze trigger assembly\n    color(bronze_color)\n    translate([30, 0, 2])\n    union() {\n        // Trigger housing\n        cube([8, 10, 4], center = true);\n        \n        // Trigger lever\n        translate([0, 5, 2])\n        rotate([0, 0, 15])\n        cube([2, 6, 2]);\n    }\n}\n\nmodule support_stand() {\n    // Wooden support base\n    color(wood_color)\n    translate([0, 0, -12])\n    difference() {\n        cube([60, 40, 8], center = true);\n        \n        // Lightening holes\n        for(i = [-1:1]) {\n            translate([i * 20, 0, 0])\n            cylinder(h = 10, d = 8, center = true);\n        }\n    }\n    \n    // Bronze decorative strips\n    color(bronze_color)\n    for(pos = [-25, 25]) {\n        translate([pos, 0, -7.5])\n        cube([2, 38, 1]);\n    }\n}\n\nmodule carved_inscriptions() {\n    // Roman numeral markings\n    color(\"#654321\")\n    translate([0, 8, 4.1])\n    linear_extrude(height = 0.5)\n    text(\"XII\", size = 3, halign = \"center\");\n    \n    // Legion mark\n    translate([0, -8, 4.1])\n    linear_extrude(height = 0.5)\n    text(\"LEG X\", size = 2.5, halign = \"center\");\n}\n\n// Assembly\nunion() {\n    support_stand();\n    \n    translate([0, 0, -4])\n    union() {\n        scorpio_body();\n        torsion_springs();\n        bow_arms();\n        bowstring();\n        trigger_mechanism();\n        carved_inscriptions();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "oxybeles",
    "openscad_code": "// Oxybeles - Ancient Greek Torsion Catapult\n// Scale: 1:20 for 3D printing (100mm total length)\n\n// Main colors\n$fn=50;\n\n// Overall dimensions\ntotal_length = 100;\nstock_length = 60;\nstock_width = 8;\nstock_height = 6;\nprods_width = 35;\nbase_height = 15;\n\nmodule stock() {\n    // Main wooden stock with slight taper\n    color(\"saddlebrown\")\n    difference() {\n        hull() {\n            translate([0, -stock_width/2, 0])\n                cube([stock_length, stock_width, stock_height]);\n            translate([stock_length-10, -stock_width/2-2, 0])\n                cube([10, stock_width+4, stock_height]);\n        }\n        \n        // Arrow groove\n        translate([stock_length-25, -1, stock_height-1])\n            cube([25, 2, 1]);\n        \n        // Trigger slot\n        translate([stock_length-30, -stock_width/2-1, stock_height-2])\n            cube([5, stock_width+2, 2]);\n    }\n    \n    // Reinforcement bands\n    for(i=[15:20:stock_length-20]) {\n        color(\"goldenrod\")\n        translate([i, -stock_width/2-1, 0])\n            cube([2, stock_width+2, stock_height]);\n    }\n}\n\nmodule torsion_springs() {\n    // Left spring bundle\n    color(\"tan\")\n    translate([10, -prods_width/2-5, stock_height])\n    union() {\n        cylinder(h=15, r=5);\n        for(i=[0:45:315]) {\n            rotate([0,0,i])\n            translate([3.5,0,7.5])\n            cylinder(h=15, r=0.5, center=true);\n        }\n    }\n    \n    // Right spring bundle\n    translate([10, prods_width/2+5, stock_height])\n    union() {\n        cylinder(h=15, r=5);\n        for(i=[0:45:315]) {\n            rotate([0,0,i])\n            translate([3.5,0,7.5])\n            cylinder(h=15, r=0.5, center=true);\n        }\n    }\n}\n\nmodule prods() {\n    // Composite bow arms\n    color(\"saddlebrown\")\n    // Left prod\n    translate([10, -prods_width/2-5, stock_height+15])\n    rotate([0,-10,0])\n    union() {\n        cylinder(h=30, r1=2, r2=1);\n        // Reinforcement rings\n        for(i=[5:10:25]) {\n            translate([0,0,i])\n            cylinder(h=1, r=2.5);\n        }\n    }\n    \n    // Right prod\n    translate([10, prods_width/2+5, stock_height+15])\n    rotate([0,10,0])\n    union() {\n        cylinder(h=30, r1=2, r2=1);\n        for(i=[5:10:25]) {\n            translate([0,0,i])\n            cylinder(h=1, r=2.5);\n        }\n    }\n    \n    // Bowstring\n    color(\"beige\")\n    translate([10, -prods_width/2-5, stock_height+40])\n    rotate([90,0,0])\n    cylinder(h=prods_width+10, r=0.5);\n}\n\nmodule base_frame() {\n    // Supporting base structure\n    color(\"saddlebrown\")\n    difference() {\n        union() {\n            // Front support\n            translate([-5, -stock_width/2-2, 0])\n                cube([15, stock_width+4, base_height]);\n            \n            // Rear support\n            translate([stock_length-10, -stock_width/2-2, 0])\n                cube([15, stock_width+4, base_height]);\n            \n            // Side rails\n            hull() {\n                translate([-5, -stock_width/2-2, 0])\n                    cube([1, 1, base_height]);\n                translate([stock_length-5, -stock_width/2-2, 0])\n                    cube([1, 1, base_height]);\n            }\n            \n            hull() {\n                translate([-5, stock_width/2+1, 0])\n                    cube([1, 1, base_height]);\n                translate([stock_length-5, stock_width/2+1, 0])\n                    cube([1, 1, base_height]);\n            }\n        }\n        \n        // Decorative cutouts\n        for(i=[5:15:stock_length-15]) {\n            translate([i, -stock_width/2, base_height-3])\n                rotate([0,0,45])\n                cube([3,3,3], center=true);\n        }\n    }\n}\n\nmodule trigger_mechanism() {\n    // Simple bronze trigger\n    color(\"bronze\")\n    translate([stock_length-28, 0, stock_height-1])\n    union() {\n        cube([8, 2, 1]);\n        translate([4, 0, 1])\n            rotate([90,0,0])\n            cylinder(h=3, r=1);\n    }\n}\n\nmodule arrow() {\n    // Bronze-tipped arrow\n    color(\"saddlebrown\")\n    translate([stock_length-5, 0, stock_height-0.5])\n    union() {\n        // Shaft\n        cylinder(h=20, r=0.5);\n        \n        // Bronze head\n        color(\"bronze\")\n        translate([20,0,0])\n        cylinder(h=5, r1=0.5, r2=0);\n    }\n}\n\n// Assembly\nstock();\ntorsion_springs();\nprods();\nbase_frame();\ntrigger_mechanism();\narrow();",
    "renders": true
  },
  {
    "historical_artifact": "catapult",
    "openscad_code": "// Historical Roman Onager Catapult (Medium Complexity)\n// Realistic representation of a 1st century AD Roman siege engine\n\n$fn = 32;\n\n// Main colors for historical accuracy\ncolor_wood = [139/255, 69/255, 19/255];\ncolor_metal = [105/255, 105/255, 105/255];\ncolor_rope = [101/255, 67/255, 33/255];\n\n// Main assembly\nunion() {\n    // Base frame structure\n    translate([0, 0, 0]) base_frame();\n    \n    // Upright support posts\n    translate([-20, 0, 8]) support_post();\n    translate([20, 0, 8]) support_post();\n    \n    // Torsion bundle housing\n    translate([0, 0, 35]) torsion_housing();\n    \n    // Throwing arm assembly\n    translate([0, 0, 35]) throwing_arm();\n    \n    // Rope bindings and details\n    translate([0, 0, 0]) rope_bindings();\n    \n    // Decorative Roman details\n    translate([0, 0, 0]) decorative_elements();\n}\n\nmodule base_frame() {\n    color(color_wood) {\n        // Main longitudinal beams\n        for(x = [-25, 25]) {\n            translate([x, 0, 4]) cube([6, 40, 8], center = true);\n        }\n        \n        // Cross beams\n        for(y = [-15, 0, 15]) {\n            translate([0, y, 2]) cube([60, 4, 4], center = true);\n        }\n        \n        // Reinforcement blocks at corners\n        for(x = [-22, 22])\n        for(y = [-18, 18]) {\n            translate([x, y, 6]) cube([4, 4, 12], center = true);\n        }\n    }\n}\n\nmodule support_post() {\n    color(color_wood) {\n        // Main upright post\n        translate([0, 0, 15]) cube([8, 8, 30], center = true);\n        \n        // Support braces\n        rotate([0, 45, 0]) \n        translate([0, 0, 8]) cube([6, 6, 25], center = true);\n        \n        rotate([0, -45, 0]) \n        translate([0, 0, 8]) cube([6, 6, 25], center = true);\n    }\n}\n\nmodule torsion_housing() {\n    color(color_wood) {\n        // Main cylindrical housing\n        cylinder(h = 20, r = 15, center = true);\n        \n        // Reinforcement bands\n        for(h = [-8, 0, 8]) {\n            color(color_metal) {\n                translate([0, 0, h]) cylinder(h = 1.5, r = 16.5, center = true);\n            }\n        }\n        \n        // Vertical slots for torsion ropes\n        difference() {\n            translate([0, 0, 0]) cube([10, 30, 20], center = true);\n            translate([0, 0, 0]) cube([12, 32, 22], center = true);\n        }\n    }\n}\n\nmodule throwing_arm() {\n    color(color_wood) {\n        // Main throwing beam\n        rotate([0, 0, 30]) {\n            translate([0, 0, 5]) cube([4, 4, 50], center = true);\n            \n            // Sling attachment point\n            translate([0, 0, 25]) {\n                sphere(r = 3);\n                translate([0, 0, 3]) cylinder(h = 2, r = 1);\n            }\n            \n            // Counterweight bucket\n            translate([0, 0, -20]) {\n                difference() {\n                    cube([8, 8, 10], center = true);\n                    translate([0, 0, -3]) cube([6, 6, 12], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule rope_bindings() {\n    color(color_rope) {\n        // Torsion rope wraps\n        for(i = [-1, 1]) {\n            rotate([0, 90, 0]) {\n                translate([i * 15, 0, 35]) {\n                    for(h = [-8:2:8]) {\n                        rotate([0, 0, h * 10]) {\n                            torus(ro = 2, ri = 0.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Support rope lashings\n        for(pos = [[-20, 18], [20, 18], [-20, -18], [20, -18]]) {\n            translate([pos[0], pos[1], 12]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 4, r1 = 1.5, r2 = 1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_elements() {\n    // Roman eagle insignia on front\n    color(color_metal) {\n        translate([0, 22, 6]) {\n            rotate([90, 0, 0]) {\n                // Stylized eagle\n                difference() {\n                    cylinder(h = 1, r = 5);\n                    translate([2, 0, -0.5]) cube([3, 1, 2], center = true);\n                    translate([-2, 0, -0.5]) cube([3, 1, 2], center = true);\n                }\n            }\n        }\n    }\n    \n    // Latin inscription on base\n    color(color_metal) {\n        translate([0, 0, 9]) {\n            rotate([0, 0, 0]) {\n                // \"LEGIO X FRETENSIS\" inscription\n                linear_extrude(height = 0.5) {\n                    text(\"LEG X\", size = 4, halign = \"center\", valign = \"center\");\n                }\n            }\n        }\n    }\n}\n\nmodule torus(ro, ri) {\n    rotate_extrude(angle = 360, $fn = 16) {\n        translate([ro, 0, 0]) circle(r = ri, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "onager",
    "openscad_code": "// Onager - Roman torsion catapult artifact\n// Medium complexity realistic model for 3D printing\n\n$fn = 30;\n\n// Overall dimensions (mm)\nframe_length = 90;\nframe_width = 40;\nframe_height = 35;\nwheel_diameter = 20;\n\n// Base frame assembly\nmodule frame_base() {\n    difference() {\n        // Main frame\n        union() {\n            // Base platform\n            color(\"Sienna\")\n            cube([frame_length, frame_width, 4], center=true);\n            \n            // Side rails\n            color(\"SaddleBrown\")\n            for(side = [-1, 1]) {\n                translate([0, side * 15, 2])\n                cube([frame_length, 8, 8], center=true);\n            }\n            \n            // Cross supports\n            color(\"SaddleBrown\")\n            for(pos = [-30, 0, 30]) {\n                translate([pos, 0, 6])\n                cube([4, frame_width + 4, 4], center=true);\n            }\n        }\n        \n        // Decorative holes in supports\n        for(pos = [-30, 0, 30]) {\n            translate([pos, 0, 8])\n            cylinder(h=5, r=1.5, center=true);\n        }\n    }\n}\n\n// Upright frame posts\nmodule upright_posts() {\n    color(\"SaddleBrown\")\n    for(side = [-1, 1]) {\n        translate([20, side * 15, frame_height/2 + 4])\n        cube([8, 8, frame_height], center=true);\n        \n        // Diagonal braces\n        translate([0, side * 15, 10])\n        rotate([0, side * -15, 0])\n        cube([40, 6, 4], center=true);\n    }\n}\n\n// Torsion bundle housing\nmodule torsion_bundle() {\n    color(\"Goldenrod\")\n    difference() {\n        // Main bundle housing\n        translate([0, 0, frame_height + 8])\n        cube([50, 36, 20], center=true);\n        \n        // Rope holes\n        for(side = [-1, 1]) {\n            translate([0, side * 12, frame_height + 8])\n            cylinder(h=38, r=4, center=true);\n        }\n    }\n    \n    // Reinforcement bands\n    color(\"SaddleBrown\")\n    for(pos = [-20, 0, 20]) {\n        translate([pos, 0, frame_height + 18])\n        cube([2, 40, 2], center=true);\n    }\n}\n\n// Throwing arm\nmodule throwing_arm() {\n    color(\"SaddleBrown\")\n    translate([0, 0, frame_height + 20])\n    rotate([0, 0, 25])\n    union() {\n        // Main arm\n        cube([6, 6, 60], center=true);\n        \n        // Arm tip with sling attachment\n        translate([0, 0, 35])\n        cube([4, 4, 10], center=true);\n        \n        // Sling attachment ring\n        translate([0, 0, 40])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=2, center=true);\n    }\n}\n\n// Sling\nmodule sling() {\n    color(\"Tan\")\n    translate([0, 0, frame_height + 60])\n    sphere(3);\n}\n\n// Wheels\nmodule wheels() {\n    color(\"SaddleBrown\")\n    for(side = [-1, 1]) {\n        translate([-30, side * 25, -wheel_diameter/2 + 2])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=wheel_diameter/2, center=true);\n        \n        // Wheel spokes\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([wheel_diameter/2 - 2, 0, 2])\n            cube([wheel_diameter - 4, 2, 4], center=true);\n        }\n    }\n}\n\n// Decorative Roman inscription\nmodule inscription() {\n    color(\"DimGray\")\n    translate([30, 0, 2])\n    linear_extrude(height=0.5)\n    text(\"LEGIO X\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nframe_base();\nupright_posts();\ntorsion_bundle();\nthrowing_arm();\nsling();\nwheels();\ninscription();",
    "renders": true
  },
  {
    "historical_artifact": "mangonel",
    "openscad_code": "// Realistic Mangonel (Roman Torsion Catapult) - Medium Complexity\n// Historical artifact recreation for 3D printing\n\n// Colors for realistic appearance\ncolor_wood = [139/255, 69/255, 19/255];\ncolor_metal = [105/255, 105/255, 105/255];\ncolor_rope = [101/255, 67/255, 33/255];\n\n// Overall scale factor for 3D printing\nscale_factor = 1.2;\n\nmodule frame_base() {\n    // Main wooden base frame\n    color(color_wood)\n    translate([0, 0, 0])\n    cube([45, 30, 2], center = true);\n    \n    // Cross beams for stability\n    for(i = [-15, 0, 15]) {\n        translate([i, 0, 1])\n        cube([2, 28, 2], center = true);\n    }\n}\n\nmodule side_frame() {\n    // Vertical support posts\n    color(color_wood)\n    translate([20, 12, 15])\n    rotate([0, 0, 0])\n    cube([3, 3, 30], center = true);\n    \n    translate([20, -12, 15])\n    rotate([0, 0, 0])\n    cube([3, 3, 30], center = true);\n    \n    // Angled support braces\n    color(color_wood)\n    translate([20, 12, 7.5])\n    rotate([30, 0, 0])\n    cube([2, 2, 15], center = true);\n    \n    translate([20, -12, 7.5])\n    rotate([30, 0, 0])\n    cube([2, 2, 15], center = true);\n}\n\nmodule torsion_skein() {\n    // Rope torsion bundle\n    color(color_rope)\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([20, 12, 25])\n        cylinder(h = 8, d = 3, center = true);\n    }\n    \n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([20, -12, 25])\n        cylinder(h = 8, d = 3, center = true);\n    }\n}\n\nmodule throwing_arm() {\n    // Main throwing arm\n    color(color_wood)\n    translate([0, 0, 28])\n    rotate([0, 15, 0])\n    cylinder(h = 35, d1 = 4, d2 = 2, center = false);\n    \n    // Arm reinforcement collar\n    color(color_metal)\n    translate([0, 0, 30])\n    rotate([0, 15, 0])\n    cylinder(h = 3, d = 5, center = true);\n    \n    // Arm tip with rope attachment point\n    color(color_wood)\n    translate([0, 0, 50])\n    rotate([0, 15, 0])\n    sphere(d = 3);\n    \n    // Rope sling attachment\n    color(color_rope)\n    translate([0, 0, 52])\n    cylinder(h = 1, d = 2, center = true);\n}\n\nmodule bucket() {\n    // Wooden bucket for projectiles\n    color(color_wood)\n    translate([0, 0, 54])\n    rotate([0, 15, 0])\n    cube([6, 4, 2], center = true);\n    \n    // Bucket sides\n    color(color_wood)\n    translate([0, 0, 53])\n    rotate([0, 15, 0])\n    cube([5, 3.5, 1], center = true);\n}\n\nmodule crossbar() {\n    // Horizontal crossbar between posts\n    color(color_wood)\n    translate([20, 0, 28])\n    cube([3, 24, 2], center = true);\n    \n    // Metal reinforcement bands\n    color(color_metal)\n    for(pos = [-8, 0, 8]) {\n        translate([20, pos, 29])\n        cube([3.5, 0.5, 1], center = true);\n    }\n}\n\nmodule winch_mechanism() {\n    // Winch drum\n    color(color_wood)\n    translate([-15, 0, 8])\n    rotate([90, 0, 0])\n    cylinder(h = 15, d = 6, center = true);\n    \n    // Winch handles\n    color(color_metal)\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([-15, 7, 8])\n        cube([1, 3, 1], center = true);\n    }\n    \n    // Winch support brackets\n    color(color_metal)\n    translate([-15, 8, 8])\n    cube([2, 1, 2], center = true);\n    translate([-15, -8, 8])\n    cube([2, 1, 2], center = true);\n}\n\nmodule decorative_elements() {\n    // Roman numerals on frame\n    color(color_metal)\n    translate([20, 0, 2])\n    cube([0.5, 0.5, 0.5], center = true);\n    \n    // Additional decorative metal bands\n    color(color_metal)\n    translate([20, 12, 15])\n    rotate([0, 90, 0])\n    cylinder(h = 3, d = 4.2, center = true);\n    \n    translate([20, -12, 15])\n    rotate([0, 90, 0])\n    cylinder(h = 3, d = 4.2, center = true);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Base structure\n    frame_base();\n    \n    // Side frames (mirrored for both sides)\n    side_frame();\n    mirror([1, 0, 0]) side_frame();\n    \n    // Torsion mechanisms\n    torsion_skein();\n    \n    // Throwing mechanism\n    throwing_arm();\n    bucket();\n    \n    // Support structures\n    crossbar();\n    winch_mechanism();\n    \n    // Historical decorative elements\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "historical_artifact": "trebucket",
    "openscad_code": "// Trebucket - Medieval Bronze Weighing Scale\n// Based on 15th century French examples found in archaeological digs\n// Overall dimensions: 80mm x 50mm x 30mm\n\n// Scale parameters\nscale_width = 40;\nscale_length = 80;\nscale_height = 30;\nbeam_thickness = 3;\npan_diameter = 25;\npan_depth = 5;\n\n// Display colors\nbronze = \"#B87333\";\ndark_bronze = \"#8B4513\";\ngold = \"#FFD700\";\n\n// Main beam with decorative elements\nmodule beam() {\n    color(bronze) {\n        // Central beam\n        translate([-scale_length/2, -beam_thickness/2, scale_height/2])\n            cube([scale_length, beam_thickness, beam_thickness]);\n        \n        // Ornate central pivot housing\n        translate([0, -beam_thickness-2, scale_height/2-2])\n            rotate([0, 90, 0])\n                cylinder(h=beam_thickness+4, r1=3, r2=3);\n        \n        // Decorative end caps with medieval patterns\n        for (x=[-scale_length/2+5, scale_length/2-5]) {\n            translate([x, -beam_thickness/2-1, scale_height/2+beam_thickness/2])\n                rotate([0, 90, 0])\n                    cylinder(h=beam_thickness+2, r1=2, r2=2);\n            \n            // Small decorative spheres\n            translate([x, -beam_thickness/2, scale_height/2+beam_thickness])\n                sphere(1.5);\n        }\n    }\n}\n\n// Traditional bronze weighing pan with chain\nmodule pan(side) {\n    // Chain links (simplified for printing)\n    color(dark_bronze) {\n        for (i=[0:3]) {\n            translate([side*(15+i*2), 0, scale_height/2-5-i*2])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h=3, r=1.5);\n                        translate([0, -1, 0])\n                            cube([3, 2, 3]);\n                    }\n        }\n    }\n    \n    // Pan with historical rim pattern\n    color(bronze) {\n        translate([side*25, 0, scale_height/2-15])\n            difference() {\n                // Main pan body\n                cylinder(h=pan_depth, r=pan_diameter/2);\n                \n                // Inner cavity for coins\n                translate([0, 0, 1])\n                    cylinder(h=pan_depth-1, r=pan_diameter/2-2);\n                \n                // Decorative rim pattern - small notches\n                for (a=[0:30:330]) {\n                    rotate([0, 0, a])\n                        translate([pan_diameter/2-1, -0.5, 0])\n                            cube([1, 1, pan_depth]);\n                }\n            }\n    }\n}\n\n// Decorative base with medieval motifs\nmodule base() {\n    color(dark_bronze) {\n        // Main base platform\n        translate([-scale_length/2-5, -scale_width/2-5, 0])\n            cube([scale_length+10, scale_width+10, 5]);\n        \n        // Ornate feet - four medieval style supports\n        for (x=[-scale_length/2+10, scale_length/2-10])\n            for (y=[-scale_width/2+10, scale_width/2-10]) {\n                translate([x, y, 5])\n                    difference() {\n                        cylinder(h=5, r=3);\n                        translate([1, -1, 0])\n                            cube([2, 2, 5]);\n                    }\n            }\n        \n        // Central pillar with decorative ring\n        translate([0, 0, 10])\n            union() {\n                cylinder(h=scale_height/2-5, r=4);\n                translate([0, 0, scale_height/2-7])\n                    color(gold) \n                        cylinder(h=2, r=5);\n            }\n    }\n}\n\n// Assembly\nbase();\nbeam();\npan(-1);  // Left pan\npan(1);   // Right pan\n\n// Historical inscription on the beam (simplified as texture)\ncolor(dark_bronze) {\n    for (i=[-3:3]) {\n        translate([i*5, -beam_thickness/2-0.5, scale_height/2+beam_thickness/2])\n            cube([1, 0.5, 0.5]);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "batteringram",
    "openscad_code": "// Historical Battering Ram - Roman-style Aries\n// Based on archaeological finds from Masada (1st century CE)\n// Overall length: 90mm, designed for FDM 3D printing\n\n$fn = 32;\n\n// Main colors\ncolor_wood = [139/255, 90/255, 43/255];\ncolor_metal = [105/255, 105/255, 105/255];\ncolor_rope = [101/255, 67/255, 33/255];\n\n// Main assembly\nmodule battering_ram() {\n    // Main ram beam\n    color(color_wood) {\n        // Central beam - slightly tapered for historical accuracy\n        translate([0, 0, 10]) {\n            hull() {\n                cylinder(h = 70, d1 = 12, d2 = 10);\n                translate([50, 0, 0]) cylinder(h = 70, d1 = 10, d2 = 8);\n            }\n        }\n    }\n    \n    // Iron ram head - traditional ram's head shape\n    color(color_metal) {\n        translate([-25, 0, 10]) {\n            // Main ram head\n            rotate([0, 90, 0]) {\n                cylinder(h = 15, d = 14);\n            }\n            \n            // Ram's head protrusion\n            translate([-7, 0, 0]) {\n                sphere(d = 10);\n            }\n            \n            // Reinforcement bands\n            for(i = [0:1]) {\n                translate([-5 + i*8, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 2, d = 16);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Support beams\n    color(color_wood) {\n        // Top support beam\n        translate([0, 0, 25]) {\n            cube([60, 8, 6], center = true);\n        }\n        \n        // Side reinforcement beams\n        for(side = [-1, 1]) {\n            translate([10, side*6, 15]) {\n                rotate([0, 15*side, 0]) {\n                    cube([40, 4, 4], center = true);\n                }\n            }\n        }\n    }\n    \n    // Rope bindings (historical lashings)\n    color(color_rope) {\n        for(pos = [5, 25, 45]) {\n            translate([pos, 0, 10]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 20, d = 2);\n                }\n            }\n        }\n    }\n    \n    // Carrying handles\n    color(color_wood) {\n        // Rear handles for soldiers\n        translate([40, 0, 15]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 30, d = 6);\n            }\n        }\n        \n        // Side handles\n        for(side = [-1, 1]) {\n            translate([20, side*12, 15]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 10, d = 4);\n                }\n            }\n        }\n    }\n    \n    // Decorative bronze reinforcements\n    color([184/255, 115/255, 51/255]) {\n        // Front collar\n        translate([-20, 0, 10]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h = 8, d = 18);\n                    cylinder(h = 9, d = 12);\n                }\n            }\n        }\n        \n        // Decorative studs along beam\n        for(pos = [0:10:50]) {\n            translate([pos, 0, 22]) {\n                sphere(d = 3);\n            }\n        }\n    }\n    \n    // Historical inscription band\n    color(color_metal) {\n        translate([30, 0, 20]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h = 15, d = 14);\n                    cylinder(h = 16, d = 12);\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nbattering_ram();",
    "renders": true
  },
  {
    "historical_artifact": "siegetower",
    "openscad_code": "// Medieval Siege Tower - Historical Artifact\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall dimensions\ntower_width = 40;\ntower_depth = 35;\ntower_height = 80;\nwall_thickness = 2;\n\n// Colors\ncolor_wood = \"#8B4513\";\ncolor_dark_wood = \"#654321\";\ncolor_metal = \"#708090\";\ncolor_rope = \"#D2691E\";\n\n// Main tower structure\nmodule tower_body() {\n    color(color_wood) {\n        // Main walls\n        difference() {\n            // Outer shell\n            cube([tower_width, tower_depth, tower_height]);\n            \n            // Hollow interior\n            translate([wall_thickness, wall_thickness, 0])\n                cube([tower_width - wall_thickness*2, \n                      tower_depth - wall_thickness*2, \n                      tower_height]);\n        }\n    }\n}\n\n// Battlements at top\nmodule battlements() {\n    color(color_dark_wood) {\n        // Create crenellations\n        for (i = [0:3]) {\n            translate([i * 10 + 2, -1, tower_height])\n                cube([6, 37, 5]);\n            \n            translate([-1, i * 9 + 2, tower_height])\n                cube([42, 5, 5]);\n        }\n    }\n}\n\n// Arrow slits\nmodule arrow_slits() {\n    color(color_wood) {\n        // Side arrow slits\n        for (h = [20, 35, 50]) {\n            for (side = [0, 1]) {\n                translate([side ? tower_width - 1 : 0, \n                          tower_depth/2 - 1, h])\n                    rotate([0, 90*side, 0])\n                        cube([10, 2, 8]);\n            }\n        }\n        \n        // Front arrow slits\n        for (h = [25, 45]) {\n            translate([tower_width/2 - 1, 0, h])\n                rotate([0, 0, 0])\n                    cube([2, 10, 8]);\n        }\n    }\n}\n\n// Reinforcement bands\nmodule metal_bands() {\n    color(color_metal) {\n        // Horizontal bands\n        for (h = [15, 30, 45, 60]) {\n            translate([-2, -2, h])\n                cube([44, 39, 2]);\n        }\n        \n        // Corner reinforcements\n    for (x = [0, tower_width]) {\n        for (y = [0, tower_depth]) {\n            translate([x, y, 0])\n                cylinder(h = tower_height, r1 = 1.5, r2 = 1.5);\n            }\n        }\n    }\n}\n\n// Drawbridge door at bottom\nmodule drawbridge() {\n    color(color_wood) {\n        // Door frame\n        translate([tower_width/2 - 8, -1, 0])\n            cube([16, wall_thickness, 20]);\n        \n        // Hinges\n        color(color_metal) {\n            translate([tower_width/2 - 7, -2, 2])\n                cylinder(h = 3, r = 1);\n            translate([tower_width/2 + 7, -2, 2])\n                cylinder(h = 3, r = 1);\n        }\n    }\n}\n\n// Ladder rungs inside\nmodule ladder() {\n    color(color_dark_wood) {\n        for (h = [5:8:tower_height-10]) {\n            translate([wall_thickness + 2, wall_thickness + 2, h])\n                cube([tower_width - wall_thickness*2 - 4, 1.5, 1.5]);\n        }\n    }\n}\n\n// Rope details\nmodule rope_details() {\n    color(color_rope) {\n        // Top pulley ropes\n        for (x = [tower_width/2 - 5, tower_width/2 + 5]) {\n            translate([x, tower_depth/2, tower_height + 10])\n                cylinder(h = 10, r = 0.5);\n        }\n        \n        // Side support ropes\n        translate([5, tower_depth/2, tower_height - 10])\n            rotate([0, 0, 45])\n                cylinder(h = 15, r = 0.5);\n        translate([tower_width - 5, tower_depth/2, tower_height - 10])\n            rotate([0, 0, -45])\n                cylinder(h = 15, r = 0.5);\n    }\n}\n\n// Wheels (simplified for 3D printing)\nmodule wheels() {\n    color(color_metal) {\n        // Front wheels\n        translate([10, -3, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 4);\n        translate([tower_width - 10, -3, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 4);\n        \n        // Back wheels (hidden but implied)\n        translate([10, tower_depth + 3, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 4);\n        translate([tower_width - 10, tower_depth + 3, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 4);\n    }\n}\n\n// Assemble the siege tower\nunion() {\n    tower_body();\n    battlements();\n    arrow_slits();\n    metal_bands();\n    drawbridge();\n    ladder();\n    rope_details();\n    wheels();\n}",
    "renders": true
  },
  {
    "historical_artifact": "repeater",
    "openscad_code": "// OpenSCAD Repeater Flintlock Pistol (ca. 1780)\n// Realistic style, medium complexity\n// Approx. 90 mm overall length\n\n// Color constants\nwood_color = \"SaddleBrown\";\nmetal_color = \"DarkGoldenrod\";\nbrass_color = \"Goldenrod\";\nblack_color = \"DimGray\";\n\n// Overall scale\nscale_factor = 0.8;\n\n// Main assembly\nunion() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Pistol grip with ornate carving\n        color(wood_color) {\n            translate([-10, -8, 0]) {\n                difference() {\n                    // Main grip\n                    cube([18, 16, 40], center = true);\n                    // Grip carving relief\n                    for(i = [1:3]) {\n                        translate([0, 0, 20 - i*8])\n                            scale([0.8, 0.8, 1])\n                                cylinder(h=2, r=6, $fn=20);\n                    }\n                }\n            }\n        }\n        \n        // Barrel assembly\n        color(metal_color) {\n            // Main barrel\n            translate([10, 0, 20]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=80, r=4, $fn=16);\n                    // Muzzle crown detail\n                    translate([80, 0, 0]) {\n                        cylinder(h=2, r=5, $fn=32);\n                    }\n                }\n            }\n            \n            // Front sight\n            translate([88, 0, 26]) {\n                cube([2, 1, 2], center = true);\n            }\n        }\n        \n        // Brass trigger guard\n        color(brass_color) {\n            translate([0, 0, 8]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        // Guard bow\n                        cylinder(h=15, r=2, $fn=32);\n                        // Trigger opening\n                        translate([0, 0, -8]) {\n                            cube([6, 15, 8], center = true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Trigger\n        color(black_color) {\n            translate([0, 0, 8]) {\n                cube([2, 1, 8], center = true);\n            }\n        }\n        \n        // Flintlock mechanism\n        color(metal_color) {\n            // Lock plate\n            translate([5, -6, 16]) {\n                cube([12, 4, 20], center = true);\n            }\n            \n            // Frizzen\n            translate([15, -8, 28]) {\n                rotate([0, 15, 0]) {\n                    cube([4, 2, 10], center = true);\n                }\n            }\n            \n            // Hammer/cock\n            translate([10, -6, 30]) {\n                rotate([0, 0, 30]) {\n                    union() {\n                        cylinder(h=8, r=2, $fn=8);\n                        translate([0, 0, 6]) {\n                            sphere(r=3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Brass ramrod pipes\n        color(brass_color) {\n            for(pos = [30, 50, 70]) {\n                translate([pos, 0, 8]) {\n                    rotate([0, 90, 0]) {\n                        difference() {\n                            cylinder(h=4, r=3.5, $fn=16);\n                            cylinder(h=5, r=2.5, $fn=16);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Ramrod\n        color(wood_color) {\n            translate([50, 0, 5]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=65, r=2.2, $fn=16);\n                }\n            }\n        }\n        \n        // Decorative side plates\n        color(brass_color) {\n            translate([0, 8, 20]) {\n                difference() {\n                    // Plate\n                    cube([20, 2, 12], center = true);\n                    // Engraving pattern\n                    for(x = [-8:4:8]) {\n                        for(y = [-4:2:4]) {\n                            translate([x, 1, y]) {\n                                sphere(r=0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Rear sight notch\n        color(metal_color) {\n            translate([5, 0, 26]) {\n                cube([1, 3, 2], center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "repeatingcrossbow",
    "openscad_code": "// Repeating Crossbow (Zhuge Nu) - Historical Chinese Artifact\n// Based on 3rd century AD design attributed to Zhuge Liang\n\n$fn = 32;\n\n// Overall dimensions\ncrossbow_length = 80;\ncrossbow_width = 15;\nstock_height = 8;\n\nmodule stock() {\n    color(\"saddlebrown\")\n    union() {\n        // Main stock body\n        translate([-5, -crossbow_width/2, 0])\n            cube([crossbow_length, crossbow_width, stock_height]);\n        \n        // Stock butt\n        translate([-8, -crossbow_width/2-2, -2])\n            cube([8, crossbow_width+4, stock_height+4]);\n            \n        // Trigger guard\n        difference() {\n            translate([20, -crossbow_width/2-1, -1])\n                cube([12, crossbow_width+2, stock_height+2]);\n            translate([21, -crossbow_width/2, 0])\n                cube([10, crossbow_width, stock_height]);\n        }\n    }\n}\n\nmodule bow() {\n    color(\"burlywood\")\n    union() {\n        // Bow arms\n        translate([crossbow_length-5, -crossbow_width/2-8, stock_height/2])\n            rotate([0, 0, 30])\n            cube([2, 15, 1]);\n        translate([crossbow_length-5, crossbow_width/2+8, stock_height/2])\n            rotate([0, 0, -30])\n            cube([2, 15, 1]);\n            \n        // Bow string\n        color(\"dimgray\")\n        for(i = [-1, 1]) {\n            translate([crossbow_length-5, i*crossbow_width/2+8, stock_height/2])\n                cylinder(h = 25, r = 0.3);\n        }\n    }\n}\n\nmodule magazine() {\n    color(\"saddlebrown\")\n    translate([40, -crossbow_width/2-2, stock_height])\n    union() {\n        // Magazine body\n        cube([30, crossbow_width+4, 8]);\n        \n        // Arrow slot\n        difference() {\n            translate([0, 0, 0])\n                cube([30, crossbow_width+4, 8]);\n            translate([5, 2, -1])\n                cube([20, crossbow_width, 10]);\n        }\n        \n        // Decorative bands\n        color(\"goldenrod\")\n        for(i = [0:2]) {\n            translate([10 + i*8, -1, -0.5])\n                cube([2, crossbow_width+6, 1]);\n        }\n    }\n}\n\nmodule trigger_mechanism() {\n    color(\"dimgray\")\n    translate([25, 0, stock_height/2])\n    union() {\n        // Trigger lever\n        rotate([0, 90, 0])\n            cylinder(h = 10, r = 1.5);\n            \n        // Catch mechanism\n        translate([0, 0, 2])\n            cube([5, 3, 2]);\n    }\n}\n\nmodule arrows() {\n    color(\"wheat\")\n    for(i = [0:3]) {\n        translate([45 + i*6, 0, stock_height+10])\n            rotate([90, 0, 0])\n            union() {\n                cylinder(h = 15, r = 0.5);\n                translate([0, 0, 15])\n                    cone(h = 2, r1 = 0.5, r2 = 0);\n            }\n    }\n}\n\nmodule decorative_motifs() {\n    color(\"goldenrod\")\n    // Dragon motifs on stock\n    translate([15, -crossbow_width/2-1, stock_height+0.5])\n        cube([3, 0.5, 0.5]);\n    translate([15, crossbow_width/2+1, stock_height+0.5])\n        cube([3, 0.5, 0.5]);\n        \n    // Inscription panel\n    translate([10, -crossbow_width/2-2, stock_height+1])\n        cube([8, 1, 0.5]);\n}\n\n// Assembly\nunion() {\n    stock();\n    bow();\n    magazine();\n    trigger_mechanism();\n    arrows();\n    decorative_motifs();\n}",
    "renders": true
  },
  {
    "historical_artifact": "pelletbow",
    "openscad_code": "// Pelletbow (弓弩) - Chinese Tang Dynasty (618-907 CE) design\n// Dimensions chosen for 3D printing: 80 mm overall length\n\n// Basic parameters\nbow_length = 70;\nbow_thickness = 4;\nbow_width = 6;\nhandle_length = 25;\nhandle_diameter = 8;\nstring_diameter = 1.2;\npellet_holder_length = 12;\npellet_holder_width = 8;\n\n// Color definitions\nwood_color = [0.55, 0.35, 0.15];\nstring_color = [0.9, 0.9, 0.8];\nmetal_color = [0.4, 0.4, 0.4];\n\nmodule bow_stave() {\n    color(wood_color) {\n        // Main bow stave with recurve\n        difference() {\n            // Central stave\n            cube([bow_length, bow_width, bow_thickness], center=true);\n            \n            // Recurve cuts\n            for(side = [-1, 1]) {\n                translate([side * 30, 0, 0])\n                rotate([0, 0, side * 15])\n                cube([25, bow_width + 2, bow_thickness + 2], center=true);\n            }\n        }\n        \n        // Decorative reinforcement rings\n        for(pos = [-30, -15, 0, 15, 30]) {\n            translate([pos, 0, bow_thickness/2 + 1])\n            cylinder(h=2, d1=bow_width + 4, d2=bow_width + 2, $fn=16);\n        }\n    }\n}\n\nmodule bow_string() {\n    color(string_color) {\n        // String segments\n        for(side = [-1, 1]) {\n            translate([side * 35, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=70, d=string_diameter, $fn=8);\n        }\n        \n        // Central string bridge\n        translate([0, 0, -35])\n        cylinder(h=string_diameter, d=3, $fn=8);\n    }\n}\n\nmodule handle() {\n    color(wood_color) {\n        // Main handle grip\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip wrapping texture\n        for(i = [-10:5:10]) {\n            translate([0, i, 0])\n            rotate([90, 0, 0])\n            cylinder(h=handle_length, d=handle_diameter + 1, $fn=32);\n        }\n    }\n}\n\nmodule pellet_holder() {\n    color(wood_color) {\n        // Main holder body\n        translate([0, -bow_width/2 - pellet_holder_width/2 - 2, 0])\n        cube([pellet_holder_length, pellet_holder_width, bow_thickness], center=true);\n        \n        // Pellet groove\n        translate([0, -bow_width/2 - pellet_holder_width/2 - 2, 0])\n        cube([pellet_holder_length - 4, pellet_holder_width - 2, bow_thickness/2], center=true);\n        \n        // Decorative end caps\n        for(end = [-1, 1]) {\n            translate([end * (pellet_holder_length/2 - 1), -bow_width/2 - pellet_holder_width/2 - 2, 0])\n            cylinder(h=bow_thickness, d=6, $fn=16);\n        }\n    }\n}\n\nmodule trigger_mechanism() {\n    color(metal_color) {\n        // Trigger lever\n        translate([0, bow_width/2 + 5, -bow_thickness/2])\n        rotate([45, 0, 0])\n        cube([8, 3, 12], center=true);\n        \n        // Release catch\n        translate([0, bow_width/2 + 2, bow_thickness/2 + 2])\n        sphere(d=4, $fn=16);\n        \n        // Pivot pin\n        translate([0, bow_width/2 + 5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=bow_width + 10, d=2, $fn=8);\n    }\n}\n\nmodule decorative_carving() {\n    color(wood_color) {\n        // Dragon motif carving on handle\n        for(angle = [0:30:330]) {\n            rotate([0, 0, angle])\n            translate([0, handle_diameter/2 + 1, 0])\n            sphere(d=2, $fn=8);\n        }\n        \n        // Inscription band\n        translate([0, 0, handle_length/2 + 2])\n        rotate([90, 0, 0])\n        cylinder(h=3, d=handle_diameter + 4, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bow assembly\n    translate([0, 0, 0]) {\n        bow_stave();\n        bow_string();\n    }\n    \n    // Handle assembly\n    translate([0, 0, 0]) {\n        handle();\n        decorative_carving();\n    }\n    \n    // Functional components\n    pellet_holder();\n    trigger_mechanism();\n}",
    "renders": true
  },
  {
    "historical_artifact": "pelletcrossbow",
    "openscad_code": "// Pellet Crossbow - Historical Artifact (Ming Dynasty style, ~1500 CE)\n// Realistic medium-complexity model for 3D printing\n\n// Overall dimensions: 80mm length, 50mm width, 15mm height\n$fn = 32;\n\n// Main colors\nwood_color = \"SaddleBrown\";\nmetal_color = \"Goldenrod\";\nstring_color = \"DimGray\";\n\n// Stock module\nmodule stock() {\n    color(wood_color)\n    difference() {\n        // Main stock body\n        hull() {\n            cube([60, 8, 6], center=true);\n            translate([10, 0, 2]) cube([40, 6, 4], center=true);\n        }\n        \n        // Trigger slot\n        translate([-15, 0, -3]) cube([8, 4, 6], center=true);\n        \n        // Decorative cutouts\n        for(i = [-20:10:20]) {\n            translate([i, 0, 2]) rotate([90,0,0]) cylinder(h=2, r=1.5, center=true);\n        }\n    }\n    \n    // Butt plate\n    color(metal_color)\n    translate([-30, 0, 0]) cube([2, 10, 8], center=true);\n}\n\n// Bow (prod) module\nmodule bow() {\n    color(wood_color)\n    difference() {\n        // Main bow stave\n        hull() {\n            translate([25, -20, 0]) cylinder(h=3, r=2);\n            translate([25, 20, 0]) cylinder(h=3, r=2);\n            translate([30, 0, 0]) cylinder(h=3, r=1.5);\n        }\n        \n        // String grooves\n        translate([25, -20, 0]) rotate([90,0,0]) cylinder(h=3, r=0.5);\n        translate([25, 20, 0]) rotate([90,0,0]) cylinder(h=3, r=0.5);\n    }\n    \n    // Bow tips\n    color(metal_color)\n    translate([25, -22, 0]) sphere(r=1.5);\n    translate([25, 22, 0]) sphere(r=1.5);\n}\n\n// String module\nmodule string() {\n    color(string_color)\n    translate([25, 0, 0]) {\n        // Central serving area\n        cylinder(h=0.5, r=0.5);\n        \n        // String segments\n        for(side = [-1, 1]) {\n            hull() {\n                translate([0, 0, 0]) sphere(r=0.3);\n                translate([0, side * 20, 0]) sphere(r=0.3);\n            }\n        }\n    }\n}\n\n// Trigger mechanism\nmodule trigger() {\n    color(metal_color)\n    union() {\n        // Trigger lever\n        translate([-15, 0, -5]) rotate([0,0,15]) cube([10, 4, 1], center=true);\n        \n        // Catch mechanism\n        translate([20, 0, 2]) cube([3, 2, 2], center=true);\n    }\n}\n\n// Decorative inlay pattern\nmodule decoration() {\n    color(\"Gold\")\n    for(pos = [[-10, 3, 3], [-5, -3, 3], [0, 3, 3], [5, -3, 3], [10, 3, 3]]) {\n        translate(pos) sphere(r=0.5);\n    }\n}\n\n// Assembly\nunion() {\n    stock();\n    bow();\n    string();\n    trigger();\n    decoration();\n    \n    // Support stand (for display)\n    color(\"BurlyWood\")\n    translate([0, 0, -10]) cube([50, 3, 10], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "pellet",
    "openscad_code": "// Historical Lead Sling Bullet (Greek / Roman period 4th-1st century BCE)\n// Life-size replica, 55 mm long, cast-lead appearance\n\n$fn = 120;  // smooth curves for 3-D printing\n\n// overall length 55 mm, max diameter 22 mm\nmodule sling_bullet() {\n    color(\"slategray\")\n    union() {\n        // main cast-lead almond body\n        scale([1, 1, 1.1])\n        hull() {\n            sphere(d = 22);               // forward bulb\n            translate([55-22, 0, 0])\n            sphere(d = 22);               // rear bulb\n        }\n\n        // casting seam ridge along the long axis\n        translate([0, 0, -1])\n        rotate([90, 0, 0])\n        cylinder(h = 55, d1 = 23, d2 = 23, center = false);\n\n        // Greek inscription “ΔΕΞΑΙ” (“Take this!”) on one side\n        translate([27, 0, 12])\n        rotate([90, 0, 0])\n        linear_extrude(height = 1.2)\n        text(\"ΔΕΞΑΙ\", size = 5, halign = \"center\", font = \"Liberation Sans:style=Bold\");\n\n        // small circular punch mark (manufacturer's mark) opposite side\n        translate([27, 0, -12])\n        cylinder(h = 1.5, d = 4, center = true);\n\n        // subtle grip grooves (three shallow rings)\n        for (i = [0:1:2]) {\n            translate([20 + i*7, 0, 0])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 1.5, d = 24, center = true);\n                cylinder(h = 2, d = 20, center = true);  // remove inner part\n            }\n        }\n    }\n}\n\n// Optional support ring for FDM printing (break away after print)\nmodule print_support_ring() {\n    color(\"dimgray\", 0.4)  // transparent\n    difference() {\n        cylinder(h = 2, d = 26, center = true);\n        cylinder(h = 2.2, d = 22.5, center = true);\n    }\n}\n\n// Assemble\nsling_bullet();\ntranslate([0, 0, -15]) print_support_ring();",
    "renders": true
  },
  {
    "historical_artifact": "bolt",
    "openscad_code": "// Roman-style bronze bolt from archaeological finds\n// Based on 1st-3rd century AD Roman military bolts\n// Features decorative head with maker's mark and square shank\n\nbolt_diameter = 8;\nbolt_length = 65;\nhead_diameter = 16;\nhead_height = 6;\nshank_length = 45;\nthread_length = 20;\nsquare_shank_width = 6;\n\n$fn = 64;\n\n// Overall bolt assembly\ncolor(\"bronze\") \nunion() {\n    // Bolt head with decorative features\n    union() {\n        // Main head cylinder\n        cylinder(h=head_height, d=head_diameter);\n        \n        // Decorative raised ring around edge\n        translate([0, 0, head_height-1])\n            cylinder(h=1, d=head_diameter+2);\n        \n        // Maker's mark - stylized \"LEG\" inscription\n        translate([0, -2, head_height/2])\n            rotate([90, 0, 0])\n                linear_extrude(height=1)\n                    text(\"LEG\", size=3, halign=\"center\");\n    }\n    \n    // Square shank (prevents rotation when installed)\n    translate([0, 0, -shank_length])\n        difference() {\n            cube([square_shank_width, square_shank_width, shank_length], center=true);\n            \n            // Rounded corners for printability\n            for(i = [-1, 1])\n                for(j = [-1, 1])\n                    translate([i*square_shank_width/2, j*square_shank_width/2, -shank_length/2])\n                        rotate([0, 90, 0])\n                            cylinder(h=square_shank_width/2, r=1);\n        }\n    \n    // Threaded section\n    translate([0, 0, -(shank_length + thread_length)])\n        union() {\n            // Main threaded cylinder\n            cylinder(h=thread_length, d=bolt_diameter);\n            \n            // Simplified V-threads (printable without supports)\n            threads_per_mm = 1.5;\n            thread_depth = 0.8;\n            \n            for(i = [0 : 5 : thread_length-1]) {\n                translate([0, 0, -(shank_length + i)])\n                    cylinder(h=2, d=bolt_diameter + thread_depth);\n                translate([0, 0, -(shank_length + i + 2)])\n                    cylinder(h=2, d=bolt_diameter - thread_depth);\n            }\n        }\n    \n    // Tapered tip for easier insertion\n    translate([0, 0, -(shank_length + thread_length + 3)])\n        cylinder(h=3, d1=bolt_diameter, d2=0);\n}\n\n// Weathering and patina effects\ncolor(\"darkgreen\", 0.3)\ndifference() {\n    // Overall weathering\n    scale([1.02, 1.02, 1.02])\n        union() {\n            cylinder(h=head_height, d=head_diameter);\n            translate([0, 0, -shank_length])\n                cylinder(h=shank_length, d=square_shank_width);\n            translate([0, 0, -(shank_length + thread_length + 3)])\n                cylinder(h=thread_length + 3, d=bolt_diameter);\n        }\n    \n    // Remove main shape to leave only patina layer\n    scale([0.99, 0.99, 0.99])\n        union() {\n            cylinder(h=head_height, d=head_diameter);\n            translate([0, 0, -shank_length])\n                cylinder(h=shank_length, d=square_shank_width);\n            translate([0, 0, -(shank_length + thread_length + 3)])\n                cylinder(h=thread_length + 3, d=bolt_diameter);\n        }\n}",
    "renders": true
  },
  {
    "historical_artifact": "quarrel",
    "openscad_code": "// Medieval crossbow quarrel (bolt) - 14th century style\n// Length: 90mm, designed for 3D printing\n\n// Colors\ncolor(\"silver\") difference() {\n    union() {\n        // Main shaft - straight wooden body\n        translate([0, 0, 0])\n            cylinder(h=75, d1=8, d2=6, $fn=16);\n        \n        // Shaft tapering at nock end\n        translate([0, 0, 75])\n            cylinder(h=5, d1=6, d2=4, $fn=16);\n            \n        // Iron arrowhead - quadrangular bodkin point\n        translate([0, 0, -15])\n            cylinder(h=15, d1=0, d2=8, $fn=4);\n            \n        // Arrowhead socket\n        difference() {\n            translate([0, 0, -15])\n                cylinder(h=10, d=8, $fn=16);\n            translate([0, 0, -10])\n                cylinder(h=10, d=6, $fn=16);\n        }\n        \n        // Fletching - three vanes spaced 120 degrees\n        for(i = [0:120:240]) {\n            rotate([0, 0, i])\n                translate([0, 6, 70])\n                    rotate([90, 0, 0])\n                        linear_extrude(height=0.5)\n                            polygon(points=[[0,0],[8,2],[7,10],[0,12]]);\n        }\n        \n        // Binding wraps at fletching base\n        translate([0, 0, 68])\n            cylinder(h=2, d=8.5, $fn=16);\n            \n        // Historical maker's mark - cross pattée\n        translate([0, 3.5, 35])\n            rotate([90, 0, 0])\n                linear_extrude(height=0.5)\n                    polygon(points=[[-2,-2],[2,-2],[2,-0.5],[0.5,-0.5],[0.5,0.5],[2,0.5],[2,2],[-2,2]]);\n                    \n        // Nock groove for crossbow string\n        translate([0, 0, 80])\n            cylinder(h=2, d=4, $fn=16);\n    }\n    \n    // Nock cutout\n    translate([0, -2, 80])\n        cube([4, 4, 2], center=true);\n        \n    // Fletching cutouts for realistic feather shape\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n            translate([0, 6, 76])\n                rotate([90, 0, 0])\n                    cube([3, 4, 0.6], center=true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "arrow",
    "openscad_code": "// Historical Bronze Age Arrow - Realistic Style\n// Features leaf-shaped barbed head, bound fletching and nock detail\n\n// Overall arrow length: 90mm\n$fn = 32;\n\nmodule arrow() {\n    color(\"burlywood\") {\n        // Arrow shaft (main body)\n        cylinder(h = 75, d = 3, center = false);\n        \n        // Shaft taper at nock end\n        translate([0, 0, 72])\n            cylinder(h = 3, d1 = 3, d2 = 2.5, center = false);\n    }\n    \n    color(\"goldenrod\") {\n        // Arrowhead - leaf-shaped barbed point\n        translate([0, 0, 75]) {\n            // Central spine\n            cylinder(h = 15, d = 2.5, center = false);\n            \n            // Barbs - two pairs at angles\n            for(i = [0:1]) {\n                rotate([0, 0, i * 180]) {\n                    // Upper barbs\n                    translate([1.5, 0, 10])\n                        rotate([0, 90, 0])\n                            cylinder(h = 4, d = 1, center = false);\n                    translate([1.5, 0, 7])\n                        rotate([0, 90, 0])\n                            cylinder(h = 3.5, d = 0.8, center = false);\n                    \n                    // Lower barbs\n                    translate([-1.5, 0, 5])\n                        rotate([0, -90, 0])\n                            cylinder(h = 4, d = 1, center = false);\n                    translate([-1.5, 0, 2])\n                        rotate([0, -90, 0])\n                            cylinder(h = 3.5, d = 0.8, center = false);\n                }\n            }\n            \n            // Leaf-shaped blade edges\n            for(angle = [0, 120, 240]) {\n                rotate([0, 0, angle])\n                    translate([0, 0, 7.5])\n                        rotate([90, 0, 0])\n                            scale([1, 0.3, 1])\n                                cylinder(h = 15, d = 8, center = true);\n            }\n        }\n    }\n    \n    // Decorative bronze binding ring\n    color(\"darkgoldenrod\") {\n        translate([0, 0, 68])\n            cylinder(h = 2, d = 3.5, center = false);\n    }\n    \n    // Fletching - three feathers\n    color(\"dimgray\") {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                // Feather base\n                translate([0, 1.5, 60])\n                    rotate([90, 0, 0])\n                        scale([1, 0.15, 1])\n                            cylinder(h = 12, d = 3, center = true);\n                \n                // Feather barbs (simplified)\n                for(pos = [2:2:10]) {\n                    translate([0, 1.5, 60 - pos])\n                        rotate([90, 0, 0])\n                            scale([0.8 - pos/25, 0.1, 1])\n                                cylinder(h = 10 - pos, d = 2.5, center = true);\n                }\n            }\n        }\n    }\n    \n    // Nock detail\n    color(\"burlywood\") {\n        translate([0, 0, 0]) {\n            difference() {\n                cylinder(h = 5, d = 3, center = false);\n                // Nock groove\n                translate([0, -1.5, 2.5])\n                    cube([3, 3, 2], center = true);\n            }\n        }\n    }\n    \n    // Historical decorative spiral pattern on shaft\n    color(\"saddlebrown\") {\n        for(z = [15:15:60]) {\n            rotate([0, 0, z * 3])\n                translate([1.6, 0, z])\n                    rotate([90, 0, 0])\n                        cylinder(h = 0.5, d = 0.8, center = true);\n        }\n    }\n}\n\n// Render the complete arrow\nrotate([90, 0, 0]) arrow();",
    "renders": true
  },
  {
    "historical_artifact": "bodkin",
    "openscad_code": "// Historical Bodkin - Medieval Needle-Point Arrowhead\n// Realistic style, medium complexity\n// Overall length: 75mm\n\n// Colors for realistic appearance\ncolor([0.65, 0.6, 0.58])  // Steel color\n\n// Main shaft with hollow socket for arrow shaft\nmodule bodkin_shaft() {\n    difference() {\n        // Outer socket tube\n        cylinder(h = 25, d1 = 8, d2 = 6, $fn = 32);\n        \n        // Inner hollow for arrow shaft\n        translate([0, 0, -1])\n            cylinder(h = 27, d = 5, $fn = 32);\n        \n        // Reinforcement ring at base\n        translate([0, 0, 0])\n            cylinder(h = 3, d = 10, $fn = 32);\n    }\n}\n\n// Tapered square bodkin point\nmodule bodkin_point() {\n    // Square pyramid main point\n    difference() {\n        // Main pyramid shape\n        hull() {\n            translate([0, 0, 50])\n                cube([1, 1, 1], center = true);\n            translate([0, 0, 25])\n                cube([6, 6, 1], center = true);\n        }\n        \n        // Hollow pyramid for weight reduction\n        difference() {\n            translate([0, 0, 48])\n                cube([0.5, 0.5, 23], center = true);\n            translate([0, 0, 25.5])\n                cube([5, 5, 1], center = true);\n        }\n    }\n}\n\n// Historical decorative rings\nmodule decorative_rings() {\n    for(i = [0:1]) {\n        translate([0, 0, 5 + i * 10])\n            difference() {\n                // Ring base\n                cylinder(h = 2, d = 9, $fn = 32);\n                \n                // Decorative notches\n                for(j = [0:7]) {\n                    rotate([0, 0, j * 45])\n                        translate([4.5, 0, 0])\n                            cube([1, 0.5, 3], center = true);\n                }\n            }\n    }\n}\n\n// Barbs for historical accuracy (small, non-functional)\nmodule small_barbs() {\n    for(side = [-1, 1]) {\n        translate([side * 3, 0, 35])\n            rotate([0, side * 15, 0])\n                cube([2, 1, 8]);\n    }\n}\n\n// Historical maker's mark inscription base\nmodule makers_mark_base() {\n    translate([0, -4.5, 20])\n        rotate([90, 0, 0])\n            cylinder(h = 1, d = 3, $fn = 16);\n}\n\n// Assembly of complete bodkin\nunion() {\n    // Main components\n    bodkin_shaft();\n    translate([0, 0, 25]) bodkin_point();\n    \n    // Decorative elements\n    decorative_rings();\n    small_barbs();\n    makers_mark_base();\n    \n    // Historical strengthening ridge\n    translate([0, 0, 30])\n        rotate([45, 0, 0])\n            scale([1, 0.3, 1])\n                cylinder(h = 15, d = 2, $fn = 4);\n}",
    "renders": true
  },
  {
    "historical_artifact": "broadhead",
    "openscad_code": "// Medieval European broadhead arrowhead (circa 14th-15th century)\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n// Main parameters\npoint_length = 35;\nblade_span = 45;\nsocket_length = 35;\nsocket_diameter = 11;\nblade_thickness = 2;\nfillet_radius = 1;\n\n// Color definitions\nbronze = [184/255, 115/255, 51/255];\ndark_bronze = [160/255, 100/255, 45/255];\nhighlight = [210/255, 140/255, 70/255];\n\n// Socket with decorative ring\nmodule socket() {\n    color(bronze) {\n        difference() {\n            // Main socket cylinder\n            cylinder(h=socket_length, d=socket_diameter, $fn=32);\n            \n            // Hollow interior\n            translate([0, 0, -1])\n                cylinder(h=socket_length+2, d=socket_diameter-4, $fn=32);\n                \n            // Decorative ring groove\n            translate([0, 0, 8])\n                cylinder(h=3, d=socket_diameter+2, $fn=32);\n        }\n        \n        // Decorative raised ring\n        color(highlight)\n        translate([0, 0, 8])\n            cylinder(h=2, d=socket_diameter+1, $fn=32);\n    }\n}\n\n// Blade with historical European profile\nmodule blade() {\n    color(dark_bronze) {\n        union() {\n            // Central diamond cross-section\n            translate([0, 0, socket_length])\n            linear_extrude(height=point_length, convexity=10)\n            polygon(points=[\n                [0, 0],\n                [blade_span/2 - 8, 0],\n                [blade_span/2, blade_span/4],\n                [0, blade_span/2],\n                [-blade_span/2, blade_span/4],\n                [-blade_span/2 + 8, 0]\n            ]);\n            \n            // Blade thickness (tapered)\n            for(i = [0:1:3]) {\n                rotate([0, 0, i*90])\n                translate([0, 0, socket_length])\n                linear_extrude(height=point_length, scale=[1, 0.3])\n                polygon(points=[\n                    [0, 0],\n                    [blade_span/2 - 8, 0],\n                    [blade_span/2 - 8 - i*2, blade_thickness],\n                    [0, blade_thickness]\n                ]);\n            }\n            \n            // Barbs (historical style)\n            for(side = [-1, 1]) {\n                translate([side * (blade_span/2 - 5), 0, socket_length + 10])\n                rotate([0, 0, side * 25])\n                linear_extrude(height=2)\n                polygon(points=[\n                    [0, 0],\n                    [5, 8],\n                    [7, 8],\n                    [2, 0]\n                ]);\n            }\n        }\n    }\n}\n\n// Decorative fuller (blood groove)\nmodule fuller() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -0.5, socket_length + 5])\n    rotate([45, 0, 0])\n    cube([blade_span/3, 1, point_length - 10], center=true);\n}\n\n// Assembly\nunion() {\n    socket();\n    blade();\n    fuller();\n    \n    // Historical maker's mark (cross pattée)\n    color(highlight)\n    translate([0, 0, 12])\n    rotate([0, 0, 45])\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 2, 0])\n        cube([1, 6, 0.5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "firearrow",
    "openscad_code": "// Firearrow Historical Artifact - Korean Hwacha Firearrow\n// Medium complexity realistic model with historical details\n\n// Overall dimensions: 95mm length, 8mm diameter shaft\n// Based on 15th century Joseon dynasty hwacha arrows\n\n$fn = 36;\n\n// Main assembly\ncolor(\"burlywood\") firearrow();\n\nmodule firearrow() {\n    // Main arrow shaft\n    translate([0, 0, -47.5]) \n        cylinder(h=95, d=8, center=true);\n    \n    // Iron arrowhead\n    translate([0, 0, 42]) \n        arrowhead();\n    \n    // Tail fletching with traditional Korean colors\n    color(\"darkred\") \n        translate([0, 0, -42]) \n            fletching();\n    \n    // Fire chamber - paper tube for gunpowder\n    color(\"sienna\") \n        translate([0, 0, 30]) \n            fire_chamber();\n    \n    // Historical inscription band\n    color(\"goldenrod\") \n        translate([0, 0, 15]) \n            inscription_band();\n}\n\nmodule arrowhead() {\n    // Pyramidal iron arrowhead typical of Joseon military\n    union() {\n        // Main pyramid\n        rotate([0, 0, 45]) \n            cylinder(h=10, d1=8, d2=0, center=false);\n        \n        // Four reinforcing ridges\n        for(i=[0:3]) {\n            rotate([0, 0, i*90]) \n                translate([2, 0, 0]) \n                    cube([1, 0.5, 10]);\n        }\n    }\n}\n\nmodule fletching() {\n    // Traditional Korean feather fletching (3 feathers)\n    difference() {\n        // Main shaft at tail\n        cylinder(h=15, d=7.5, center=true);\n        \n        // Cut grooves for feathers\n        for(i=[0:2]) {\n            rotate([0, 0, i*120]) \n                translate([3.5, 0, 0]) \n                    cube([7, 1.5, 16], center=true);\n        }\n    }\n    \n    // Actual feather vanes\n    for(i=[0:2]) {\n        rotate([0, 0, i*120]) \n            translate([3.8, 0, 0]) \n                vane();\n    }\n}\n\nmodule vane() {\n    // Individual feather vane\n    linear_extrude(height=0.3) {\n        polygon(points=[\n            [0, 0],\n            [12, 2],\n            [15, 0],\n            [12, -2]\n        ]);\n    }\n}\n\nmodule fire_chamber() {\n    // Paper tube containing gunpowder\n    difference() {\n        // Outer paper tube\n        cylinder(h=12, d=10, center=true);\n        \n        // Hollow center\n        cylinder(h=14, d=6, center=true);\n    }\n    \n    // Fuse hole\n    rotate([90, 0, 0]) \n        cylinder(h=3, d=2, center=true);\n}\n\nmodule inscription_band() {\n    // Brass identification band with Korean characters\n    difference() {\n        // Main band\n        cylinder(h=3, d=9, center=true);\n        \n        // Engraved characters (simplified)\n        translate([0, 4, 0]) \n            cube([1.5, 0.5, 3.2], center=true);\n        translate([0, -4, 0]) \n            cube([1.5, 0.5, 3.2], center=true);\n        translate([2.8, 2.8, 0]) \n            cube([0.5, 0.5, 3.2], center=true);\n        translate([-2.8, -2.8, 0]) \n            cube([0.5, 0.5, 3.2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "whistlingarrow",
    "openscad_code": "// Whistling Arrow Historical Artifact\n// Based on 12th century Mongol whistling arrow design\n\n// Main arrow dimensions\narrow_length = 85;\nshaft_diameter = 4;\nhead_length = 25;\n\n// Whistle chamber dimensions\nwhistle_length = 15;\nwhistle_diameter = 8;\nwhistle_wall = 1.5;\n\n// Fletching dimensions\nfletch_length = 20;\nfletch_width = 5;\nfletch_height = 1;\n\n// Nock dimensions\nnock_diameter = 3;\nnock_depth = 5;\n\n// Colors\nshaft_color = [0.6, 0.4, 0.2];  // Wood brown\nhead_color = [0.7, 0.7, 0.7];  // Iron gray\nfletch_color = [0.1, 0.1, 0.1];  // Black feathers\n\nmodule shaft() {\n    color(shaft_color)\n    union() {\n        // Main shaft\n        cylinder(h=arrow_length, d=shaft_diameter, $fn=16);\n        \n        // Decorative ring near head\n        translate([0, 0, arrow_length-5])\n            cylinder(h=2, d=shaft_diameter+2, $fn=16);\n    }\n}\n\nmodule arrowhead() {\n    color(head_color)\n    union() {\n        // Arrow point\n        translate([0, 0, arrow_length])\n            cylinder(h=head_length, d1=0, d2=6, $fn=8);\n        \n        // Whistle chamber body\n        translate([0, 0, arrow_length-head_length-whistle_length])\n            cylinder(h=whistle_length, d=whistle_diameter, $fn=32);\n        \n        // Whistle holes (3 holes around circumference)\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n                translate([whistle_diameter/2 - whistle_wall/2, 0, arrow_length-head_length-whistle_length+whistle_length/2])\n                    rotate([0, 90, 0])\n                        cylinder(h=whistle_wall+0.2, d=2, $fn=8);\n        }\n        \n        // Internal whistle cavity\n        translate([0, 0, arrow_length-head_length-whistle_length+whistle_wall])\n            cylinder(h=whistle_length-whistle_wall*2, d=whistle_diameter-whistle_wall*2, $fn=32);\n    }\n}\n\nmodule fletching() {\n    color(fletch_color)\n    for(i=[0:2]) {\n        rotate([0, 0, i*120+30])\n            translate([0, fletch_width/2, fletch_length/2])\n                cube([fletch_height, fletch_width, fletch_length], center=true);\n    }\n}\n\nmodule nock() {\n    color(shaft_color)\n    difference() {\n        cylinder(h=5, d=shaft_diameter+1, center=true, $fn=16);\n        \n        // Nock groove\n        rotate([90, 0, 0])\n            cube([nock_depth+1, nock_diameter, nock_diameter*1.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    shaft();\n    arrowhead();\n    \n    // Fletching at rear\n    translate([0, 0, fletch_length/2])\n        fletching();\n    \n    // Nock at very rear\n    translate([0, 0, -arrow_length/2-2.5])\n        nock();\n}",
    "renders": true
  },
  {
    "historical_artifact": "armor",
    "openscad_code": "// 15th Century Gothic Breastplate - Medium Complexity\n// Realistic styling with Gothic fluting and faulds\n\n$fn = 50;\n\n// Overall scale\nscale_factor = 0.4;\n\n// Main breastplate module\nmodule breastplate() {\n    color([0.8, 0.8, 0.85]) {\n        // Central chest plate with Gothic fluting\n        difference() {\n            union() {\n                // Main curved plate\n                scale([scale_factor, scale_factor, scale_factor])\n                    difference() {\n                        // Basic curved shape\n                        translate([0, 0, 15])\n                            scale([1, 1.2, 0.3])\n                                sphere(d = 80);\n                        \n                        // Cut to plate shape\n                        translate([0, -60, 0])\n                            cube([200, 100, 200], center = true);\n                        \n                        // Neck cutout\n                        translate([0, 25, 25])\n                            rotate([0, 15, 0])\n                                cylinder(h = 50, d1 = 40, d2 = 50);\n                    }\n                \n                // Add Gothic flutes\n                for(i = [-40:20:40]) {\n                    translate([i * scale_factor, 0, 10 * scale_factor])\n                        scale([scale_factor * 0.1, scale_factor * 1.2, scale_factor])\n                            rotate([90, 0, 0])\n                                cylinder(h = 60, d1 = 5, d2 = 5);\n                }\n            }\n            \n            // Arm holes\n            translate([-35 * scale_factor, -5 * scale_factor, 15 * scale_factor])\n                rotate([0, 90, 0])\n                    cylinder(h = 40 * scale_factor, d = 30 * scale_factor);\n            \n            mirror([1, 0, 0])\n                translate([-35 * scale_factor, -5 * scale_factor, 15 * scale_factor])\n                    rotate([0, 90, 0])\n                        cylinder(h = 40 * scale_factor, d = 30 * scale_factor);\n        }\n    }\n}\n\n// Faulds (lower plates)\nmodule faulds() {\n    color([0.75, 0.75, 0.8]) {\n        for(i = [0:1:2]) {\n            translate([0, (-20 - i * 15) * scale_factor, (10 - i * 8) * scale_factor])\n                scale([scale_factor * (1 - i * 0.1), scale_factor * 0.3, scale_factor * 0.2])\n                    difference() {\n                        cube([80, 30, 20], center = true);\n                        \n                        // Decorative ridge\n                        translate([0, 0, 11])\n                            cube([75, 25, 2], center = true);\n                    }\n        }\n    }\n}\n\n// Rivet detail module\nmodule rivet(x, y, z) {\n    color([0.3, 0.3, 0.3]) {\n        translate([x * scale_factor, y * scale_factor, z * scale_factor])\n            cylinder(h = 3 * scale_factor, d = 4 * scale_factor);\n    }\n}\n\n// Decorative heart-shaped ridge (sternum)\nmodule sternum_ridge() {\n    color([0.85, 0.85, 0.9]) {\n        translate([0, 10 * scale_factor, 18 * scale_factor])\n            scale([scale_factor * 0.3, scale_factor * 0.4, scale_factor * 0.1])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = 40, d = 40);\n                        translate([0, -20, 0])\n                            cube([80, 20, 50], center = true);\n                    }\n    }\n}\n\n// Main assembly\nunion() {\n    breastplate();\n    faulds();\n    sternum_ridge();\n    \n    // Add rivets around edges\n    for(angle = [30:30:330]) {\n        rivet(35 * cos(angle), -5 + 25 * sin(angle), 15);\n    }\n    \n    // Additional rivets on faulds\n    for(i = [0:1:2]) {\n        rivet(30, (-20 - i * 15), 18 - i * 8);\n        rivet(-30, (-20 - i * 15), 18 - i * 8);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "mail",
    "openscad_code": "// Historical Roman Legionary Mail Lorica Hamata\n// A medium-complexity realistic 3D printable model\n// Overall size: ~80mm height, 60mm width, 15mm depth\n\n$fn=32;\n\n// Main colors\ncolor(\"silver\") lorica();\ncolor(\"darkgoldenrod\") trim();\n\nmodule lorica() {\n    difference() {\n        // Main body\n        scale([1, 0.8, 1.2]) sphere(d=60);\n        \n        // Neck opening\n        translate([0, 0, 30]) rotate([90, 0, 0]) \n            cylinder(h=40, d1=25, d2=30, center=true);\n        \n        // Arm holes\n        translate([0, 27, 8]) rotate([0, 90, 0])\n            cylinder(h=30, d=25, center=true);\n        translate([0, -27, 8]) rotate([0, 90, 0])\n            cylinder(h=30, d=25, center=true);\n        \n        // Bottom opening\n        translate([0, 0, -35]) cube([50, 50, 20], center=true);\n    }\n    \n    // Mail texture - overlapping rings pattern\n    for(i=[-30:5:30]) {\n        for(j=[-15:5:15]) {\n            if(i*i + j*j < 650) {\n                translate([i, j, 18+sin(i*0.2)*2]) {\n                    rotate([90, 0, 0]) \n                        torus_ring();\n                }\n            }\n        }\n    }\n    \n    // Back side rings\n    for(i=[-30:5:30]) {\n        for(j=[-15:5:15]) {\n            if(i*i + j*j < 650) {\n                translate([i, j, -18-sin(i*0.2)*2]) {\n                    rotate([-90, 0, 0]) \n                        torus_ring();\n                }\n            }\n        }\n    }\n}\n\nmodule torus_ring() {\n    difference() {\n        cylinder(h=2, d=4);\n        translate([0, 0, -0.5]) cylinder(h=3, d=2.5);\n    }\n}\n\nmodule trim() {\n    // Shoulder reinforcements\n    translate([0, 30, 10]) rotate([0, 90, 0])\n        scale([1, 0.3, 0.3]) cylinder(h=50, d=8);\n    translate([0, -30, 10]) rotate([0, 90, 0])\n        scale([1, 0.3, 0.3]) cylinder(h=50, d=8);\n    \n    // Bottom hem edging\n    rotate_extrude() {\n        translate([29, -35, 0]) \n            circle(d=3);\n    }\n    \n    // Decorative studs\n    for(a=[0:30:330]) {\n        translate([25*cos(a), 25*sin(a), 30]) \n            sphere(d=2);\n    }\n    \n    // Central decorative plate\n    translate([0, 0, 25]) {\n        difference() {\n            cube([15, 20, 1], center=true);\n            for(x=[-5:5:5]) {\n                for(y=[-7:7:7]) {\n                    translate([x, y, 0.5]) \n                        cylinder(h=2, d=1);\n                }\n            }\n        }\n    }\n}\n\n// Support base for printing\ntranslate([0, 0, -40]) color(\"gray\") {\n    difference() {\n        cube([70, 70, 3], center=true);\n        translate([0, 0, -1]) cube([60, 60, 5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "ringmail",
    "openscad_code": "// Ringmail fragment - 14th century European pattern\n// Dimensions: 80mm x 60mm x 8mm\n\n$fn = 32;\n\n// Material colors\ncolor_iron = [0.3, 0.3, 0.3];\ncolor_rust = [0.5, 0.2, 0.1];\n\n// Ring parameters\nring_diameter = 8;\nwire_thickness = 1.2;\nring_spacing = 10;\nrows = 6;\ncols = 8;\n\n// Create a single riveted ring\nmodule riveted_ring() {\n    difference() {\n        // Main ring body\n        color(color_iron)\n        rotate_extrude()\n            translate([ring_diameter/2, 0, 0])\n                circle(wire_thickness/2);\n        \n        // Rivet head on top\n        color(color_rust)\n        translate([0, 0, ring_diameter/2])\n            sphere(wire_thickness * 0.8);\n    }\n    \n    // Rivet seam - slight gap in ring\n    color(color_rust)\n    rotate([90, 0, 0])\n        translate([ring_diameter/2, 0, 0])\n            cube([wire_thickness*1.5, 0.3, wire_thickness*1.5], center=true);\n}\n\n// Create alternating ring pattern (4-in-1 weave)\nmodule ring_pattern() {\n    for (row = [0:rows-1]) {\n        for (col = [0:cols-1]) {\n            // Offset every other row\n            x_offset = (row % 2) * ring_spacing/2;\n            y_offset = row * ring_spacing * 0.866;\n            \n            translate([col * ring_spacing + x_offset, y_offset, 0]) {\n                // Flat rings for 4-in-1 pattern\n                if ((row + col) % 2 == 0) {\n                    rotate([90, 0, 0]) riveted_ring();\n                } else {\n                    rotate([0, 90, 0]) riveted_ring();\n                }\n            }\n        }\n    }\n}\n\n// Decorative leather edging strip\nmodule leather_edging() {\n    color([0.2, 0.1, 0.05])\n    linear_extrude(height=1.5)\n        offset(r=1.5)\n            square([cols * ring_spacing + 10, rows * ring_spacing * 0.866 + 6], center=false);\n}\n\n// Reinforcement plate detail\nmodule reinforcement_plate() {\n    color(color_iron)\n    translate([cols * ring_spacing/2 - 5, rows * ring_spacing * 0.866/2 - 3, 2])\n        linear_extrude(height=2)\n            offset(r=1)\n                square([10, 6], center=true);\n    \n    // Decorative rivets on plate\n    for (i = [0:3]) {\n        color([0.4, 0.2, 0.1])\n        translate([\n            cols * ring_spacing/2 - 7 + i * 4.5,\n            rows * ring_spacing * 0.866/2 - 3,\n            4.2\n        ])\n            cylinder(h=0.8, d=1.5, $fn=6);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Base ringmail pattern\n        ring_pattern();\n        \n        // Leather backing (slightly larger than mail)\n        translate([-5, -3, -1.5]) leather_edging();\n        \n        // Reinforcement details\n        reinforcement_plate();\n    }\n    \n    // Cut out central section to show construction\n    color([0.8, 0.8, 0.8])\n    translate([cols * ring_spacing/2 - 2, rows * ring_spacing * 0.866/2 - 2, -2])\n        cube([12, 4, 12], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "scalemail",
    "openscad_code": "// Roman Lorica Squamata Scalemail Segment (Realistic)\n// Medium complexity scalemail fragment with brass scales and leather backing\n\n$fn = 32;\n\n// Overall dimensions\nsegment_width = 60;\nsegment_height = 80;\nscale_size = 8;\nscale_thickness = 0.8;\nleather_thickness = 1.5;\n\n// Colors\nbrass_color = [0.8, 0.6, 0.3];\nleather_color = [0.3, 0.2, 0.1];\n\n// Individual scale module with historical Roman styling\nmodule roman_scale(scale_size, thickness) {\n    // Main scale body - slightly curved\n    difference() {\n        // Main scale plate\n        scale([0.9, 1, 1])\n        linear_extrude(height = thickness, center = true, convexity = 10)\n        difference() {\n            circle(d = scale_size);\n            // Decorative cutout\n            translate([0, -scale_size/4, 0])\n            circle(d = scale_size * 0.3);\n        }\n        \n        // Central ridge for strength\n        translate([0, -scale_size/2, -thickness/2])\n        cube([scale_size * 0.1, scale_size, thickness + 0.1], center = true);\n        \n        // Attachment holes\n        translate([scale_size * 0.3, scale_size * 0.3, -thickness/2])\n        cylinder(h = thickness + 0.2, r = 0.6, center = true);\n        \n        translate([-scale_size * 0.3, scale_size * 0.3, -thickness/2])\n        cylinder(h = thickness + 0.2, r = 0.6, center = true);\n    }\n}\n\n// Leather backing with stitching holes\nmodule leather_backing(width, height, thickness) {\n    color(leather_color)\n    difference() {\n        // Main backing\n        translate([-width/2, -height/2, -thickness/2])\n        cube([width, height, thickness]);\n        \n        // Stitching holes along edges\n        for(x = [-width/2 + 5 : 10 : width/2 - 5]) {\n            for(y = [-height/2 + 5 : 10 : height/2 - 5]) {\n                if(abs(x) == width/2 - 5 || abs(y) == height/2 - 5) {\n                    translate([x, y, -thickness])\n                    cylinder(h = thickness + 1, r = 0.8);\n                }\n            }\n        }\n    }\n}\n\n// Complete scale row\nmodule scale_row(row_length, y_pos, offset) {\n    for(x = [-row_length/2 + scale_size/2 : scale_size : row_length/2 - scale_size/2]) {\n        translate([x + offset, y_pos, scale_thickness/2 + leather_thickness])\n        rotate([15, 0, 0])\n        color(brass_color)\n        roman_scale(scale_size, scale_thickness);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Leather backing\n        leather_backing(segment_width, segment_height, leather_thickness);\n        \n        // Scale rows - historical overlapping pattern\n        for(row = [0 : 6]) {\n            y_pos = -segment_height/2 + row * (scale_size * 0.7) + scale_size/2;\n            offset = (row % 2) * scale_size/2;\n            scale_row(segment_width - 10, y_pos, offset);\n        }\n        \n        // Decorative border rivets\n        for(x = [-segment_width/2 + 5 : 10 : segment_width/2 - 5]) {\n            for(y = [-segment_height/2 + 5 : 10 : segment_height/2 - 5]) {\n                if(abs(x) == segment_width/2 - 5 || abs(y) == segment_height/2 - 5) {\n                    translate([x, y, leather_thickness + scale_thickness + 0.5])\n                    color(brass_color)\n                    cylinder(h = 1, r = 1.5);\n                }\n            }\n        }\n    }\n    \n    // Keyhole for display mounting\n    translate([0, segment_height/2 - 10, -leather_thickness])\n    cylinder(h = leather_thickness + 1, r = 3);\n    translate([0, segment_height/2 - 10, -leather_thickness - 1])\n    cube([6, 6, leather_thickness + 2], center = true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "splintmail",
    "openscad_code": "// Splintmail bracer - historical artifact from medieval period\n// 3D printable model with realistic details\n\ncolor([0.7, 0.7, 0.7])  // Metallic grey for iron splints\n\n// Main bracer body\nmodule bracer_base() {\n    difference() {\n        // Outer curved shell\n        cylinder(h=60, r1=35, r2=32, center=true, $fn=64);\n        \n        // Inner hollow for arm\n        translate([0, 0, -2])\n            cylinder(h=64, r1=28, r2=25, center=true, $fn=64);\n        \n        // Wrist opening\n        translate([0, 0, 35])\n            cube([50, 50, 20], center=true);\n        \n        // Elbow opening\n        translate([0, 0, -35])\n            cube([50, 50, 20], center=true);\n    }\n}\n\n// Individual splint\nmodule splint(length, width, thickness) {\n    color([0.6, 0.6, 0.6])\n    difference() {\n        // Main splint body\n        cube([length, width, thickness], center=true);\n        \n        // Rounded ends\n        translate([length/2, 0, 0])\n            cylinder(h=width+1, r=width/2, center=true, $fn=16);\n        translate([-length/2, 0, 0])\n            cylinder(h=width+1, r=width/2, center=true, $fn=16);\n    }\n    \n    // Rivet holes\n    for (x = [-length/2+3, length/2-3]) {\n        translate([x, 0, thickness/2+0.1])\n            cylinder(h=thickness+0.2, r=1, $fn=8);\n    }\n}\n\n// Decorative brass border\nmodule brass_border() {\n    color([0.8, 0.6, 0.2])\n    difference() {\n        translate([0, 0, 31])\n            cylinder(h=2, r1=37, r2=34, $fn=64);\n        translate([0, 0, 30])\n            cylinder(h=4, r1=34, r2=31, $fn=64);\n    }\n}\n\n// Leather strap attachment points\nmodule strap_loops() {\n    for (z = [-20, -10, 0, 10, 20]) {\n        color([0.4, 0.2, 0.1])\n        translate([0, 34, z])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=8, r=2.5, $fn=12);\n                    cylinder(h=9, r=1, $fn=12);\n                }\n    }\n}\n\n// Assembly\nbracer_base();\n\n// Apply splints in rows\nfor (z = [-25, -20, -15, -10, -5, 0, 5, 10, 15, 20, 25]) {\n    rotate([0, 0, 90])\n        translate([0, 0, z])\n            splint(50, 5, 1.5);\n}\n\nbrass_border();\nmirror([0, 0, 1]) brass_border();\n\nstrap_loops();",
    "renders": true
  },
  {
    "historical_artifact": "platemail",
    "openscad_code": "// Platemail chest piece inspired by 15th century Gothic armor\n// Designed for 3D printing with minimal supports\n\n$fn = 32;\n\n// Main plate thickness\nplate_thickness = 2;\n\n// Overall dimensions\nchest_width = 80;\nchest_height = 100;\nchest_depth = 40;\n\nmodule rivet() {\n    cylinder(h = 3, r1 = 1.5, r2 = 2);\n}\n\nmodule decorative_rivet_pattern(x_pos, y_pos, count) {\n    for (i = [0:count-1]) {\n        translate([x_pos + i * 8, y_pos, 0]) \n            rivet();\n    }\n}\n\nmodule breast_plate() {\n    // Main breast plate with central ridge\n    color([0.7, 0.7, 0.75]) {\n        difference() {\n            // Curved main plate\n            translate([0, -10, 0]) \n                scale([1, 1.2, 1]) \n                    sphere(d = chest_width);\n            \n            // Hollow inside\n            translate([0, -15, 0]) \n                scale([0.85, 1.1, 0.9]) \n                    sphere(d = chest_width - plate_thickness * 2);\n            \n            // Bottom cut for torso\n            translate([0, -30, 0]) \n                cube([chest_width + 20, 40, chest_depth], center = true);\n        }\n    }\n}\n\nmodule faulds() {\n    // Overlapping plates below breastplate\n    for (i = [0:2]) {\n        color([0.65, 0.65, 0.7]) {\n            translate([0, -35 - i * 8, 5 + i * 2]) {\n                rotate([0, -10, 0]) {\n                    difference() {\n                        cube([chest_width - 10, 6, 3], center = true);\n                        translate([0, 0, -2]) \n                            cube([chest_width - 12, 4, 4], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule pauldrons() {\n    // Shoulder guards\n    for (side = [-1, 1]) {\n        color([0.7, 0.7, 0.75]) {\n            translate([side * 35, 15, 0]) {\n                rotate([0, 0, side * 30]) {\n                    difference() {\n                        scale([1.2, 0.8, 0.3]) \n                            sphere(d = 25);\n                        translate([side * 5, 0, -5]) \n                            cube([20, 25, 10], center = true);\n                    }\n                }\n                \n                // Decorative border\n                for (j = [0:3]) {\n                    translate([side * 10, -10 + j * 6, 2]) \n                        rivet();\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_etching() {\n    // Stylized cross pattern typical of Gothic armor\n    color([0.8, 0.8, 0.85]) {\n        translate([0, 0, plate_thickness + 0.1]) {\n            // Vertical line\n            cube([2, 40, 0.5], center = true);\n            \n            // Horizontal line\n            cube([30, 2, 0.5], center = true);\n            \n            // Fleur-de-lis inspired tips\n            translate([0, 22, 0]) {\n                rotate([0, 0, 45]) \n                    cube([3, 8, 0.5], center = true);\n                rotate([0, 0, -45]) \n                    cube([3, 8, 0.5], center = true);\n            }\n        }\n    }\n}\n\nmodule articulated_plates() {\n    // Side plates for flexibility\n    for (side = [-1, 1]) {\n        for (plate = [0:1]) {\n            color([0.6, 0.6, 0.65]) {\n                translate([side * (chest_width/2 - 5), -10 - plate * 15, 0]) {\n                    rotate([0, 0, side * 10]) {\n                        cube([12, 10, plate_thickness], center = true);\n                    }\n                    \n                    // Hinges\n                    translate([side * 5, 0, plate_thickness]) {\n                        cylinder(h = 2, r = 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    breast_plate();\n    translate([0, 0, 5]) {\n        faulds();\n    }\n    pauldrons();\n    \n    // Rivet decorations\n    decorative_rivet_pattern(-30, 20, 8);\n    decorative_rivet_pattern(-30, -20, 8);\n    \n    decorative_etching();\n    articulated_plates();\n}\n\n// Base stand for display\ncolor([0.3, 0.2, 0.1]) {\n    translate([0, -45, -10]) {\n        cylinder(h = 5, r = 30);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "fullplate",
    "openscad_code": "// Historical Fullplate Armor - 15th Century Gothic Style\n// Overall dimensions: ~70mm height, scaled for 3D printing\n\n// Color definitions\narmor_color = \"Silver\";\nrivet_color = \"Gray\";\nleather_color = \"Brown\";\n\n// Main armor plate thickness\nplate_thickness = 2;\n\nmodule chest_plate() {\n    color(armor_color)\n    difference() {\n        // Main torso piece\n        translate([0, 0, 35])\n        scale([1, 0.8, 1.2])\n        cube([30, 25, 40], center=true);\n        \n        // Neck hole\n        translate([0, 0, 52])\n        scale([0.3, 0.2, 1])\n        sphere(10, $fn=32);\n        \n        // Arm holes\n        translate([-18, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h=15, r1=7, r2=7, center=true);\n        \n        translate([18, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h=15, r1=7, r2=7, center=true);\n    }\n}\n\nmodule faulds() {\n    // Hinged plates below chest\n    color(armor_color)\n    for(i = [0:2]) {\n        translate([0, 0, 20 - i*6])\n        scale([0.9 - i*0.1, 0.7, 0.3])\n        cube([30, 25, 5], center=true);\n    }\n}\n\nmodule pauldrons() {\n    // Shoulder guards\n    color(armor_color)\n    union() {\n        // Left pauldron\n        translate([-25, 0, 45])\n        rotate([0, -30, 45])\n        scale([0.8, 0.6, 0.3])\n        cube([20, 15, 5], center=true);\n        \n        // Right pauldron\n        translate([25, 0, 45])\n        mirror([1, 0, 0])\n        rotate([0, -30, 45])\n        scale([0.8, 0.6, 0.3])\n        cube([20, 15, 5], center=true);\n    }\n}\n\nmodule decorative_rivets() {\n    // Gothic style rivets along edges\n    color(rivet_color)\n    union() {\n        // Chest rivets\n        for(i = [-1, 0, 1]) {\n            translate([i*10, 12, 45])\n            sphere(1.5, $fn=16);\n            translate([i*10, -12, 45])\n            sphere(1.5, $fn=16);\n        }\n        \n        // Waist rivets\n        for(i = [-1.5, -0.5, 0.5, 1.5]) {\n            translate([i*10, 0, 25])\n            sphere(1.5, $fn=16);\n        }\n    }\n}\n\nmodule back_plate() {\n    // Simpler back plate\n    color(armor_color)\n    translate([0, 0, 35])\n    scale([1, 0.9, 1.1])\n    difference() {\n        cube([28, 22, 38], center=true);\n        \n        // Ventilation slots\n        for(i = [-1, 0, 1]) {\n            translate([0, 0, 35 + i*8])\n            cube([20, 1, 3], center=true);\n        }\n    }\n}\n\nmodule leather_straps() {\n    // Attachment straps\n    color(leather_color)\n    union() {\n        // Side straps\n        translate([-15, 12, 35])\n        rotate([90, 0, 90])\n        cylinder(h=3, r1=2, r2=2);\n        \n        translate([15, 12, 35])\n        rotate([90, 0, 90])\n        cylinder(h=3, r1=2, r2=2);\n        \n        // Shoulder straps\n        translate([-20, 0, 48])\n        rotate([0, 90, 0])\n        cylinder(h=2, r1=2, r2=2);\n        \n        translate([20, 0, 48])\n        rotate([0, 90, 0])\n        cylinder(h=2, r1=2, r2=2);\n    }\n}\n\n// Assemble the fullplate armor\nunion() {\n    chest_plate();\n    back_plate();\n    faulds();\n    pauldrons();\n    decorative_rivets();\n    leather_straps();\n}",
    "renders": true
  },
  {
    "historical_artifact": "halfplate",
    "openscad_code": "// Halfplate Historical Armor - 16th Century European Cuirass\n// Realistic medium complexity design for 3D printing\n\n$fn = 32;\n\n// Main dimensions (fits 1:6 scale figure torso)\nplate_width = 40;\nplate_height = 55;\nplate_thickness = 2.5;\nflange_height = 4;\nrivet_diameter = 1.2;\nrivet_head_height = 0.8;\n\n// Colors\ncolor_steel = [0.5, 0.5, 0.55];\ncolor_rust = [0.6, 0.35, 0.25];\ncolor_leather = [0.3, 0.2, 0.1];\n\n// Main breastplate body\nmodule breastplate_body() {\n    difference() {\n        // Main curved plate\n        translate([0, 0, plate_height/2])\n            scale([1, 1.2, 1])\n            sphere(d=plate_width);\n        \n        // Hollow interior\n        translate([0, 0, plate_height/2])\n            scale([0.85, 1.05, 0.9])\n            sphere(d=plate_width - plate_thickness*2);\n        \n        // Bottom cut\n        translate([0, 0, plate_height/2 - 2])\n            cube([plate_width*2, plate_width*2, plate_height], center=true);\n        \n        // Neck opening\n        translate([0, 0, plate_height - 8])\n            rotate([90, 0, 0])\n            cylinder(h=plate_width, d1=18, d2=14, center=true);\n    }\n}\n\n// Flanged bottom edge\nmodule flanged_edge() {\n    color(color_steel)\n    difference() {\n        // Flange base\n        translate([0, 0, flange_height/2])\n            cube([plate_width + 8, plate_thickness*2, flange_height], center=true);\n        \n        // Rounded edge profile\n        for(i = [-1, 1]) {\n            translate([i * (plate_width/2 + 2), 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=plate_thickness*2, r=flange_height/2, center=true);\n        }\n    }\n}\n\n// Decorative ridge (central crest)\nmodule central_ridge() {\n    color(color_steel)\n    translate([0, -plate_thickness/2, plate_height/2])\n        cube([plate_thickness*1.5, plate_thickness, plate_height - 10]);\n}\n\n// Rivet placement helper\nmodule rivet(x, z) {\n    translate([x, 0, z])\n    union() {\n        // Rivet body\n        color(color_rust) \n        cylinder(h=plate_thickness + 0.5, d=rivet_diameter, center=true);\n        \n        // Rivet head\n        color(color_steel)\n        translate([0, 0, plate_thickness/2 + rivet_head_height/2])\n            sphere(d=rivet_diameter * 1.5);\n    }\n}\n\n// Strap attachment points\nmodule strap_mounts() {\n    for(side = [-1, 1]) {\n        color(color_steel)\n        translate([side * (plate_width/2 - 5), 0, plate_height/2 + 5])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=plate_thickness*3, d=plate_thickness*4);\n                translate([0, 0, -1])\n                    cylinder(h=plate_thickness*5, d=plate_thickness*2);\n            }\n    }\n}\n\n// Decorative etched pattern\nmodule etched_pattern() {\n    color([0.4, 0.4, 0.45])\n    for(i = [1:3]) {\n        translate([0, 0, plate_height - 15 - i*8])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=plate_thickness*0.3, d=plate_width - 6 - i*2);\n                translate([0, 0, -1])\n                    cylinder(h=plate_thickness*0.5, d=plate_width - 8 - i*2);\n            }\n    }\n}\n\n// Battle damage/wear\nmodule battle_wear() {\n    color(color_rust)\n    for(i = [0:4]) {\n        angle = i * 72;\n        r = plate_width/2 - 3;\n        translate([cos(angle) * r, sin(angle) * 3, plate_height/2 + sin(angle) * 10])\n            sphere(d=0.5 + i*0.2);\n    }\n}\n\n// Assembly\nunion() {\n    // Main plate assembly\n    difference() {\n        union() {\n            color(color_steel) breastplate_body();\n            color(color_steel) flanged_edge();\n            color(color_steel) central_ridge();\n        }\n        \n        // Attachment holes\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, plate_height - 20])\n                rotate([90, 0, 0])\n                cylinder(h=plate_thickness*3, d=2, center=true);\n        }\n    }\n    \n    // Rivets along edges\n    for(i = [0:5]) {\n        x_pos = (i - 2.5) * 6;\n        rivet(x_pos, plate_height - 8 - i*5);\n        rivet(x_pos, 8 + i*5);\n    }\n    \n    // Side rivets\n    for(side = [-1, 1]) {\n        for(z = [10:10:40]) {\n            rivet(side * (plate_width/2 - 1), z);\n        }\n    }\n    \n    strap_mounts();\n    etched_pattern();\n    battle_wear();\n}",
    "renders": true
  },
  {
    "historical_artifact": "fieldplate",
    "openscad_code": "// Fieldplate - medieval battlefield identification plate\n// Typically worn on armor to identify knights and nobles\n// Features heraldic symbols and decorative elements\n\n// Overall dimensions for 3D printing\nplate_width = 60;\nplate_height = 80;\nplate_thickness = 4;\nedge_thickness = 8;\n\n// Create main plate body with rounded corners\nmodule main_plate() {\n    color(\"silver\") \n    difference() {\n        // Main rounded rectangle\n        translate([0, 0, -plate_thickness/2])\n        minkowski() {\n            cube([plate_width, plate_height, plate_thickness], center=true);\n            cylinder(r=8, h=0.1, center=true);\n        }\n        \n        // Central heraldic field\n        translate([0, 5, 0])\n        cube([plate_width-20, plate_height-30, plate_thickness+2], center=true);\n    }\n}\n\n// Decorative rivets around the border\nmodule border_rivets() {\n    color(\"gray20\") \n    for(i = [-1, 1]) {\n        // Top and bottom rivets\n        for(x = [-20:20:20]) {\n            translate([x, i*35, plate_thickness/2+1])\n            cylinder(h=2, r=2.5, $fn=8);\n        }\n        // Left and right rivets\n        for(y = [-30:20:30]) {\n            translate([i*28, y, plate_thickness/2+1])\n            cylinder(h=2, r=2.5, $fn=8);\n        }\n    }\n}\n\n// Heraldic lion rampant design\nmodule heraldic_lion() {\n    color(\"goldenrod\") \n    translate([0, 5, plate_thickness/2+0.5]) {\n        // Lion body\n        scale([1, 1.2, 1])\n        rotate([90, 0, 0])\n        cylinder(h=30, r1=12, r2=8, center=true);\n        \n        // Lion head\n        translate([0, 8, 10])\n        sphere(6);\n        \n        // Front raised paw\n        translate([8, 5, 5])\n        rotate([0, 30, 0])\n        cylinder(h=15, r=4, center=true);\n        \n        // Tail\n        translate([-12, -5, 0])\n        rotate([0, 0, 45])\n        cylinder(h=20, r=2, center=true);\n    }\n}\n\n// Latin inscription banner\nmodule inscription_banner() {\n    color(\"darkgoldenrod\") \n    translate([0, -25, plate_thickness/2]) {\n        // Banner background\n        cube([40, 10, 1], center=true);\n        \n        // Decorative ends\n        translate([-20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=5, center=true);\n        translate([20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=5, center=true);\n    }\n}\n\n// Attachment loops on back\nmodule attachment_loops() {\n    color(\"gray40\") \n    translate([0, 0, -plate_thickness/2-3])\n    difference() {\n        // Main loop structure\n        cube([plate_width-10, 10, 6], center=true);\n        \n        // Cut hole for cord\n        translate([0, 0, -1])\n        cube([plate_width-20, 20, 8], center=true);\n    }\n}\n\n// Decorative edge pattern (simulated engraving)\nmodule edge_pattern() {\n    color(\"gray30\") \n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([0, 40, plate_thickness/2])\n        cylinder(h=1, r1=3, r2=1);\n    }\n}\n\n// Assembly\nmain_plate();\nborder_rivets();\nheraldic_lion();\ninscription_banner();\nattachment_loops();\nedge_pattern();",
    "renders": true
  },
  {
    "historical_artifact": "mirrorplate",
    "openscad_code": "// Bronze Age Mirrorplate (ca. 1000–800 BCE)\n// Inspired by European Bronze Age mirrors found in Britain\n// Typical diameter 150-200mm, here scaled for 3D printing\n\n$fn = 60;\nscale_factor = 0.4;          // Scale down from ~180mm to ~72mm\nwall_thickness = 1.6;        // Good for FDM printing\nhandle_length = 35 * scale_factor;\n\nmodule handle_grip() {\n    // Twisted rope-like grip common on Bronze Age mirrors\n    for (i = [0:10]) {\n        rotate([0, 0, i*36]) \n            translate([0, 0, i*handle_length/10])\n                difference() {\n                    cylinder(h=handle_length/10 + 0.1, d=6*scale_factor);\n                    cylinder(h=handle_length/10 + 0.2, d=4*scale_factor);\n                }\n    }\n}\n\nmodule handle_ring() {\n    // Terminal ring for suspension or decoration\n    rotate([90, 0, 0])\n        difference() {\n            torus(3*scale_factor, 1.2*scale_factor);\n            cube([7*scale_factor, 7*scale_factor, 3*scale_factor], center=true);\n        }\n}\n\nmodule handle() {\n    // Curved handle typical of Bronze Age mirrors\n    color(\"Bronze\")\n    union() {\n        // Main handle shaft\n        linear_extrude(height=handle_length, scale=[1, 0.7], twist=45)\n            circle(d=8*scale_factor);\n        \n        // Decorative collar at mirror junction\n        translate([0, 0, handle_length-2*scale_factor])\n            cylinder(h=2*scale_factor, d1=10*scale_factor, d2=8*scale_factor);\n        \n        // Ring terminal\n        translate([0, 0, -1])\n            handle_ring();\n    }\n}\n\nmodule decorative_border() {\n    // Concentric rings with dot pattern typical of Bronze Age decoration\n    color(\"Bronze\")\n    difference() {\n        // Raised border ring\n        cylinder(h=wall_thickness*0.8, d=70*scale_factor);\n        \n        // Recess for dot pattern\n        cylinder(h=wall_thickness*0.8 + 0.1, d=68*scale_factor);\n    }\n    \n    // Dot pattern\n    for (a = [0:30:359]) {\n        rotate([0, 0, a])\n            translate([33*scale_factor, 0, wall_thickness*0.4])\n                sphere(d=1.5*scale_factor);\n    }\n}\n\nmodule mirrorplate() {\n    // Main mirror surface with characteristic Bronze Age proportions\n    color(\"Bronze\")\n    difference() {\n        // Overall disc shape\n        cylinder(h=wall_thickness, d=70*scale_factor);\n        \n        // Recessed mirror surface\n        translate([0, 0, -0.1])\n            cylinder(h=wall_thickness*0.5, d=65*scale_factor);\n        \n        // Central dimple (common on period mirrors)\n        translate([0, 0, -0.2])\n            sphere(d=8*scale_factor);\n    }\n    \n    // Attach handle\n    translate([0, 35*scale_factor, wall_thickness])\n        rotate([180, 0, 0])\n            handle();\n    \n    // Add decorative border\n    translate([0, 0, wall_thickness*0.2])\n        decorative_border();\n}\n\n// Assembly\nmirrorplate();",
    "renders": true
  },
  {
    "historical_artifact": "mirrorarmor",
    "openscad_code": "// Mirror armor (Kusari Katabira) - Japanese chain mail with small iron plates\n// Historical artifact from Edo period Japan (1603-1868)\n\n// Overall dimensions\noverall_width = 60;\noverall_height = 80;\nplate_size = 6;\nplate_thickness = 1;\nchain_link_size = 2;\nchain_link_thickness = 0.4;\n\n// Define colors\niron_color = [0.3, 0.3, 0.32];\ncopper_color = [0.72, 0.45, 0.2];\n\n// Module for single rectangular plate with slightly rounded corners\nmodule mirror_plate(size, thickness) {\n    difference() {\n        // Main plate\n        cube([size, size * 0.7, thickness], center = true);\n        \n        // Rounded edges by subtracting cylinders\n        translate([size/2 - thickness, 0, thickness/2])\n            rotate([0, 90, 0])\n                cylinder(h = size * 0.7, r = thickness/2, $fn = 8);\n        translate([-size/2 + thickness, 0, thickness/2])\n            rotate([0, 90, 0])\n                cylinder(h = size * 0.7, r = thickness/2, $fn = 8);\n    }\n}\n\n// Module for chain link (simple torus)\nmodule chain_link(size, thickness) {\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h = size, r = thickness, $fn = 12);\n            translate([0, 0, -0.1])\n                cylinder(h = size + 0.2, r = thickness/2, $fn = 12);\n        }\n}\n\n// Module for copper rivet decoration\nmodule rivet() {\n    color(copper_color) {\n        translate([0, 0, plate_thickness/2 + 0.3])\n            cylinder(h = 0.6, r = 0.5, $fn = 6);\n    }\n}\n\n// Module for single armor segment (plate + 4 chain links + rivets)\nmodule armor_segment(x, y) {\n    translate([x, y, 0]) {\n        color(iron_color) {\n            mirror_plate(plate_size, plate_thickness);\n        }\n        \n        // Decorative rivets at corners\n        translate([plate_size/2 - 1, plate_size * 0.7/2 - 1, 0]) rivet();\n        translate([-plate_size/2 + 1, plate_size * 0.7/2 - 1, 0]) rivet();\n        translate([plate_size/2 - 1, -plate_size * 0.7/2 + 1, 0]) rivet();\n        translate([-plate_size/2 + 1, -plate_size * 0.7/2 + 1, 0]) rivet();\n        \n        // Chain links at corners\n        translate([plate_size/2 + chain_link_size/2, plate_size * 0.7/2 + chain_link_size/2, 0]) \n            color(iron_color) chain_link(chain_link_size, chain_link_thickness);\n        translate([-plate_size/2 - chain_link_size/2, plate_size * 0.7/2 + chain_link_size/2, 0]) \n            color(iron_color) chain_link(chain_link_size, chain_link_thickness);\n        translate([plate_size/2 + chain_link_size/2, -plate_size * 0.7/2 - chain_link_size/2, 0]) \n            color(iron_color) chain_link(chain_link_size, chain_link_thickness);\n        translate([-plate_size/2 - chain_link_size/2, -plate_size * 0.7/2 - chain_link_size/2, 0]) \n            color(iron_color) chain_link(chain_link_size, chain_link_thickness);\n    }\n}\n\n// Main armor assembly\ndifference() {\n    union() {\n        // Create grid of armor segments\n        for (x = [-overall_width/2 + plate_size/2 : plate_size + chain_link_size : overall_width/2 - plate_size/2]) {\n            for (y = [-overall_height/2 + plate_size * 0.35 : plate_size * 0.7 + chain_link_size : overall_height/2 - plate_size * 0.35]) {\n                armor_segment(x, y);\n            }\n        }\n        \n        // Central decorative plate (larger)\n        translate([0, 0, 0.5]) {\n            color(iron_color) {\n                scale([1.2, 1.2, 1]) mirror_plate(plate_size * 1.5, plate_thickness + 0.5);\n            }\n            \n            // Family mon (crest) - simple circle\n            translate([0, 0, plate_thickness + 0.5]) {\n                color(copper_color) {\n                    difference() {\n                        cylinder(h = 0.5, r = 3, $fn = 32);\n                        cylinder(h = 0.6, r = 2, $fn = 32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Cut neck opening\n    translate([0, overall_height/2 - 10, -1])\n        cylinder(h = plate_thickness + 2, r = 8, $fn = 32);\n    \n    // Cut arm holes\n    translate([-overall_width/2 + 8, 0, -1])\n        rotate([0, 0, 30])\n            cylinder(h = plate_thickness + 2, r = 6, $fn = 32);\n    translate([overall_width/2 - 8, 0, -1])\n        rotate([0, 0, -30])\n            cylinder(h = plate_thickness + 2, r = 6, $fn = 32);\n}",
    "renders": true
  },
  {
    "historical_artifact": "brigandinecoat",
    "openscad_code": "// Brigandine Coat - 15th Century Style\n// Historical medium-complexity 3D printable model\n\n// Overall dimensions\ncoat_length = 70;\ncoat_width = 45;\nshoulder_width = 55;\nplate_thickness = 2;\n\n// Colors\nleather_color = [101, 67, 33];\nsteel_color = [180, 180, 180];\nbrass_color = [181, 155, 80];\n\n// Main leather base\nmodule leather_base() {\n    color(leather_color)\n    difference() {\n        // Main torso\n        cube([coat_width, coat_length, 4], center=true);\n        \n        // Neck hole\n        translate([0, 25, 2])\n        cylinder(h=5, r=8, center=true);\n        \n        // Arm holes\n        translate([coat_width/2 - 10, 15, 2])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=10, center=true);\n        \n        mirror([1, 0, 0])\n        translate([coat_width/2 - 10, 15, 2])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=10, center=true);\n    }\n}\n\n// Metal plate\nmodule metal_plate(x, y, w, h) {\n    color(steel_color)\n    translate([x, y, 3])\n    linear_extrude(height=plate_thickness)\n    difference() {\n        cube([w, h, 1], center=true);\n        // Rivet holes\n        translate([0, 0, 0])\n        cylinder(h=2, r=1.5, center=true);\n    }\n}\n\n// Brass rivet\nmodule rivet(x, y) {\n    color(brass_color)\n    translate([x, y, 5.5])\n    cylinder(h=1.5, r=2, center=true);\n}\n\n// Decorative border\nmodule border() {\n    for(i = [-coat_width/2 + 5 : 5 : coat_width/2 - 5]) {\n        color(brass_color)\n        translate([i, -coat_length/2 + 5, 3])\n        cube([3, 3, 1]);\n    }\n    for(i = [-coat_length/2 + 10 : 5 : coat_length/2 - 5]) {\n        color(brass_color)\n        translate([-coat_width/2 + 2.5, i, 3])\n        cube([3, 3, 1]);\n    }\n    for(i = [-coat_length/2 + 10 : 5 : coat_length/2 - 5]) {\n        color(brass_color)\n        translate([coat_width/2 - 2.5, i, 3])\n        cube([3, 3, 1]);\n    }\n}\n\n// Build the brigandine\nunion() {\n    leather_base();\n    \n    // Front plates arrangement\n    for(row = [0 : 4]) {\n        for(col = [-3 : 3]) {\n            x_pos = col * 6;\n            y_pos = -20 + row * 10;\n            metal_plate(x_pos, y_pos, 5, 8);\n            rivet(x_pos, y_pos);\n        }\n    }\n    \n    // Shoulder plates\n    for(side = [-1, 1]) {\n        translate([side * 20, 25, 0])\n        rotate([0, 0, side * 15])\n        metal_plate(0, 0, 8, 12);\n    }\n    \n    // Side plates\n    for(side = [-1, 1]) {\n        for(row = [0 : 2]) {\n            y_pos = -10 + row * 10;\n            translate([side * (coat_width/2 - 5), y_pos, 0])\n            rotate([0, 0, side * -20])\n            metal_plate(0, 0, 4, 6);\n        }\n    }\n    \n    // Decorative elements\n    border();\n    \n    // Central decorative plate\n    color([150, 150, 150])\n    translate([0, 10, 4])\n    linear_extrude(height=1)\n    difference() {\n        circle(r=6);\n        circle(r=4);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "coatofplates",
    "openscad_code": "// Coat of Plates - Historical Artifact (14th century style)\n// Realistic medium complexity model for 3D printing\n\n// Overall dimensions\nplate_width = 45;\nplate_height = 60;\nplate_thickness = 2.5;\nrivet_size = 1.2;\nleather_thickness = 1;\n\nmodule rivet() {\n    // Simple rivet with rounded head\n    union() {\n        cylinder(h=leather_thickness + 2, r=rivet_size/2, $fn=8);\n        translate([0, 0, leather_thickness + 2]) \n            cylinder(h=1, r=rivet_size/1.5, $fn=8);\n    }\n}\n\nmodule single_plate(w, h, has_rivets=true) {\n    difference() {\n        // Main rectangular plate with rounded edges\n        union() {\n            cube([w, h, plate_thickness]);\n            // Rounded top edge\n            translate([w/2, h-plate_thickness/2, plate_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=w, r=plate_thickness/2, $fn=16);\n            // Rounded bottom edge\n            translate([w/2, plate_thickness/2, plate_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h=w, r=plate_thickness/2, $fn=16);\n        }\n        \n        // Central ridge groove\n        translate([w/2 - 1, 0, -0.1])\n            cube([2, h, plate_thickness + 0.2]);\n    }\n    \n    // Add rivets at corners if needed\n    if (has_rivets) {\n        translate([3, 3, plate_thickness])\n            rivet();\n        translate([w-3, 3, plate_thickness])\n            rivet();\n        translate([3, h-3, plate_thickness])\n            rivet();\n        translate([w-3, h-3, plate_thickness])\n            rivet();\n    }\n}\n\nmodule backplate() {\n    // Leather/fabric backing\n    color([0.4, 0.25, 0.1])  // Dark brown leather\n    translate([0, 0, -leather_thickness])\n        cube([plate_width + 10, plate_height + 20, leather_thickness]);\n}\n\nmodule coat_of_plates() {\n    backplate();\n    \n    color([0.7, 0.7, 0.7])  // Dark steel color\n    \n    // Top row - smaller plates\n    for (i = [0:2]) {\n        translate([i * (plate_width/3 + 2) + 2, plate_height - 15, 0])\n            single_plate(plate_width/3, 15, true);\n    }\n    \n    // Middle rows - larger plates\n    for (row = [0:3]) {\n        for (col = [0:1]) {\n            translate([col * (plate_width/2 + 2) + 2, \n                      plate_height - 30 - row * 15, 0])\n                single_plate(plate_width/2 - 1, 15, true);\n        }\n    }\n    \n    // Bottom row - tapered plates\n    for (i = [0:3]) {\n        translate([i * (plate_width/4 + 1) + 2, 5, 0])\n            single_plate(plate_width/4, 10, true);\n    }\n    \n    // Side plates for wrap-around protection\n    color([0.6, 0.6, 0.6])\n    translate([-3, 20, 0])\n        rotate([0, 0, -15])\n            single_plate(8, 30, false);\n    translate([plate_width + 3, 20, 0])\n        rotate([0, 0, 15])\n            single_plate(8, 30, false);\n    \n    // Decorative central boss\n    color([0.8, 0.7, 0.3])  // Brass color\n    translate([plate_width/2, plate_height/2, plate_thickness + leather_thickness])\n        cylinder(h=2, r=5, $fn=32);\n    translate([plate_width/2, plate_height/2, plate_thickness + leather_thickness + 2])\n        cylinder(h=1, r=3, $fn=32);\n}\n\n// Main assembly\ncoat_of_plates();",
    "renders": true
  },
  {
    "historical_artifact": "jackofplate",
    "openscad_code": "// Jack of Plate - 16th century body armor\n// A jack of plate was a type of armor consisting of small iron plates sewn between layers of fabric\n// This represents a typical example from the Tudor period, scaled for 3D printing\n\n// Overall dimensions\noverall_length = 80;\noverall_width = 60;\noverall_thickness = 8;\n\n// Plate dimensions\nplate_diameter = 12;\nplate_thickness = 1.5;\nplate_spacing = 15;\n\n// Fabric layers\nfabric_thickness = 1.5;\ninner_layer_offset = 1;\nouter_layer_offset = 2;\n\n// Decorative elements\nrivet_diameter = 2;\nrivet_height = 1;\nborder_width = 5;\n\n// Colors\ncolor_plate = [0.4, 0.4, 0.4];  // Iron gray\ncolor_fabric = [0.3, 0.2, 0.1];  // Dark brown canvas\ncolor_rivets = [0.5, 0.5, 0.5];  // Steel gray\n\nmodule single_plate() {\n    difference() {\n        // Main plate\n        cylinder(h = plate_thickness, d = plate_diameter, $fn = 32);\n        \n        // Central hole\n        cylinder(h = plate_thickness + 0.1, d = rivet_diameter, $fn = 16);\n    }\n}\n\nmodule plate_array() {\n    color(color_plate) {\n        for (x = [-overall_width/2 + plate_spacing : plate_spacing : overall_width/2 - plate_spacing]) {\n            for (y = [-overall_length/2 + plate_spacing : plate_spacing : overall_length/2 - plate_spacing]) {\n                translate([x, y, overall_thickness/2 - plate_thickness/2 - fabric_thickness]) {\n                    single_plate();\n                }\n            }\n        }\n    }\n}\n\nmodule fabric_layer(z_offset) {\n    color(color_fabric) {\n        // Main rectangular piece\n        translate([0, 0, overall_thickness/2 - z_offset]) {\n            cube([overall_width, overall_length, fabric_thickness], center = true);\n        }\n        \n        // Rounded corners for historical accuracy\n        difference() {\n            translate([0, 0, overall_thickness/2 - z_offset]) {\n                cube([overall_width - border_width, overall_length - border_width, fabric_thickness], center = true);\n            }\n            \n            // Decorative scalloped edge pattern\n            for (i = [0:5:overall_width - border_width]) {\n                translate([i - overall_width/2 + border_width/2, -overall_length/2 + border_width/2, overall_thickness/2 - z_offset]) {\n                    cylinder(h = fabric_thickness + 0.1, d = 6, $fn = 16);\n                }\n                translate([i - overall_width/2 + border_width/2, overall_length/2 - border_width/2, overall_thickness/2 - z_offset]) {\n                    cylinder(h = fabric_thickness + 0.1, d = 6, $fn = 16);\n                }\n            }\n        }\n    }\n}\n\nmodule rivets() {\n    color(color_rivets) {\n        // Rivets at plate intersections\n        for (x = [-overall_width/2 + plate_spacing : plate_spacing : overall_width/2 - plate_spacing]) {\n            for (y = [-overall_length/2 + plate_spacing : plate_spacing : overall_length/2 - plate_spacing]) {\n                translate([x, y, overall_thickness/2 + fabric_thickness/2]) {\n                    cylinder(h = rivet_height, d = rivet_diameter, $fn = 16);\n                }\n            }\n        }\n        \n        // Border rivets\n        for (angle = [0:30:359]) {\n            translate([\n                (overall_width/2 - border_width/2) * cos(angle),\n                (overall_length/2 - border_width/2) * sin(angle),\n                overall_thickness/2 + fabric_thickness/2\n            ]) {\n                cylinder(h = rivet_height, d = rivet_diameter * 0.7, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule shoulder_straps() {\n    color(color_fabric) {\n        // Left shoulder strap\n        translate([-overall_width/2 - 8, overall_length/4, overall_thickness/2]) {\n            cube([16, 8, fabric_thickness * 2], center = true);\n        }\n        \n        // Right shoulder strap\n        translate([overall_width/2 + 8, overall_length/4, overall_thickness/2]) {\n            cube([16, 8, fabric_thickness * 2], center = true);\n        }\n        \n        // Reinforcement plates on straps\n        color(color_plate) {\n            for (offset = [-5, 5]) {\n                translate([-overall_width/2 - 8, overall_length/4 + offset, overall_thickness/2 + fabric_thickness]) {\n                    cube([12, 3, plate_thickness], center = true);\n                }\n                translate([overall_width/2 + 8, overall_length/4 + offset, overall_thickness/2 + fabric_thickness]) {\n                    cube([12, 3, plate_thickness], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Inner fabric layer\n    fabric_layer(inner_layer_offset);\n    \n    // Protective plates\n    plate_array();\n    \n    // Outer fabric layer\n    fabric_layer(outer_layer_offset);\n    \n    // Rivets holding everything together\n    rivets();\n    \n    // Shoulder attachment straps\n    shoulder_straps();\n}",
    "renders": true
  },
  {
    "historical_artifact": "paddedarmor",
    "openscad_code": "// Padded Gambeson – 14th C. Western Europe\n// 1 mm walls, no over-45° overhangs, 80 mm tall overall\n// Colors: unbleached linen (#F5F5DC), stitched seams (#8B4513), iron buckles (#696969)\n\nmodule gambeson() {\n    // Central torso plate – lightly flared toward waist\n    skin = 1.5;\n    torso_h = 45;\n    torso_w = 28;\n    difference() {\n        cube([torso_w, 20, torso_h], center=true);\n        translate([0, 0, -skin])\n            cube([torso_w - 2*skin, 20 - 2*skin, torso_h + skin], center=true);\n    }\n\n    // Horizontal quilting rows\n    stitches = 8;\n    color(\"#8B4513\")\n    for (i=[1:stitches-1]) {\n        translate([0, 0, -torso_h/2 + i*torso_h/stitches])\n            cube([torso_w + 2, 20.2, 0.4], center=true);\n    }\n\n    // Vertical side gussets for arm mobility\n    gusset_w = 5;\n    for (x=[-1, 1]) {\n        translate([x*(torso_w/2 + gusset_w/2), 0, 0])\n            cube([gusset_w, 20, torso_h], center=true);\n    }\n\n    // Shoulder straps with buckle\n    strap_w = 4;\n    strap_h = 12;\n    translate([0, 0, torso_h/2 + strap_h/2 - 2])\n        cube([torso_w, strap_w, strap_h], center=true);\n\n    // Buckle plate\n    color(\"#696969\")\n    translate([torso_w/2 + 1, 0, torso_h/2 + strap_h/2 - 2])\n    rotate([0, 90, 0])\n        cylinder(h=3, d=4, $fn=16);\n\n    // Decorative edging strip (thin raised band)\n    edging_h = 1;\n    color(\"#D2B48C\")\n    translate([0, 0, -torso_h/2 - edging_h/2])\n        cube([torso_w + 2, 22, edging_h], center=true);\n}\n\n// Small stand to keep print flat\nmodule stand() {\n    difference() {\n        cube([35, 25, 3], center=true);\n        translate([0, 0, -1])\n            cube([33, 23, 5], center=true);\n    }\n}\n\ncolor(\"#F5F5DC\") gambeson();\ntranslate([0, 0, -torso_h/2 - 1.5]) color(\"#8B4513\") stand();",
    "renders": true
  },
  {
    "historical_artifact": "gambeson",
    "openscad_code": "// Gambeson - padded medieval jacket, 13-15th C style\n// Scale: 1:20, overall ~80 mm tall\n\n// Overall color for wool/linen outer\ncolor(\"linen\") {\n\n// Main torso body\ndifference() {\n    // Central padded block\n    union() {\n        // Front panel\n        translate([-15, -5, 0])\n            cube([30, 10, 60], center = true);\n\n        // Back panel\n        translate([-15, 5, 0])\n            cube([30, 10, 60], center = true);\n\n        // Shoulder caps\n        translate([-15, 0, 30])\n            rotate([90, 0, 0])\n            cylinder(h = 12, r = 8, $fn = 16);\n        mirror([1, 0, 0])\n            translate([-15, 0, 30])\n            rotate([90, 0, 0])\n            cylinder(h = 12, r = 8, $fn = 16);\n    }\n\n    // Neck hole\n    translate([0, 0, 45])\n        rotate([0, 90, 0])\n        cylinder(h = 20, r = 6, $fn = 32);\n\n    // Arm holes (left)\n    translate([-15, 0, 25])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = 7, $fn = 24);\n\n    // Arm holes (right)\n    translate([15, 0, 25])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = 7, $fn = 24);\n}\n\n// Side ties (lacing)\nmodule lace(x, y, z) {\n    color(\"sienna\")\n    translate([x, y, z])\n        rotate([90, 0, 0])\n        cylinder(h = 2, r = 0.5, $fn = 8);\n}\n\n// Left side laces\nfor (i = [-1:1]) {\n    lace(-20, 0, 25 + i * 12);\n    lace(-20, 0, 27 + i * 12);\n}\n\n// Right side laces\nfor (i = [-1:1]) {\n    lace(20, 0, 25 + i * 12);\n    lace(20, 0, 27 + i * 12);\n}\n\n// Vertical quilting lines (front)\ncolor(\"tan\")\nfor (x = [-10:5:10]) {\n    translate([x, -5, 0])\n        cube([1, 10, 60]);\n}\n\n// Vertical quilting lines (back)\nfor (x = [-10:5:10]) {\n    translate([x, 5, 0])\n        cube([1, 10, 60]);\n}\n\n// Bottom hem band\ncolor(\"darkgoldenrod\")\ntranslate([0, 0, -31])\n    cube([34, 22, 3], center = true);\n\n// Decorative embroidered cross at chest\ncolor(\"crimson\")\ntranslate([0, -6, 15])\n    cube([8, 1, 1]);\ntranslate([0, -6, 15])\n    cube([1, 8, 1]);\n\n}",
    "renders": true
  },
  {
    "historical_artifact": "aketon",
    "openscad_code": "// Medieval Aketon Quilted Gambeson\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall dimensions\nlength = 80;\nwidth = 50;\nthickness = 8;\n\n// Color definitions\ncolor_linen = [0.9, 0.85, 0.75];\ncolor_stitching = [0.7, 0.6, 0.5];\ncolor_cord = [0.4, 0.3, 0.2];\n\n// Main body module\nmodule aketon_body() {\n    color(color_linen) {\n        difference() {\n            // Main padded body\n            translate([0, 0, thickness/2])\n                cube([length, width, thickness], center=true);\n            \n            // Neck opening\n            translate([0, width/3, thickness/2])\n                rotate([0, 0, 0])\n                cylinder(h=thickness+2, r=10, center=true);\n            \n            // Arm holes (elliptical)\n            for(side = [-1, 1]) {\n                translate([side * length/3, -width/2 - 2, thickness/2])\n                    rotate([90, 0, 0])\n                    scale([1, 1.5, 1])\n                    cylinder(h=5, r=8, center=true);\n            }\n        }\n    }\n}\n\n// Quilted pattern module\nmodule quilting_pattern() {\n    color(color_stitching) {\n        // Vertical quilting lines\n        for(x = [-length/2 + 5 : 10 : length/2 - 5]) {\n            translate([x, 0, thickness + 0.1])\n                cube([0.5, width, 0.2]);\n        }\n        \n        // Horizontal quilting lines\n        for(y = [-width/2 + 5 : 10 : width/2 - 5]) {\n            translate([0, y, thickness + 0.1])\n                cube([length, 0.5, 0.2]);\n        }\n    }\n}\n\n// Decorative edging cords module\nmodule edging_cords() {\n    color(color_cord) {\n        // Bottom edge cord\n        translate([0, -width/2 - 1, thickness/2])\n            cube([length + 4, 2, thickness + 2], center=true);\n        \n        // Top edge cord\n        translate([0, width/2 + 1, thickness/2])\n            cube([length + 4, 2, thickness + 2], center=true);\n        \n        // Side edge cords\n        for(side = [-1, 1]) {\n            translate([side * (length/2 + 1), 0, thickness/2])\n                cube([2, width + 4, thickness + 2], center=true);\n        }\n    }\n}\n\n// Decorative buttons module\nmodule buttons() {\n    color(color_cord) {\n        // Front closure buttons\n        for(y = [-width/3 : width/6 : width/3]) {\n            translate([length/2 + 2, y, thickness - 2])\n                sphere(r=2);\n        }\n        \n        // Decorative buttons on shoulders\n        for(side = [-1, 1]) {\n            translate([side * length/3, width/2 - 5, thickness - 2])\n                sphere(r=1.5);\n        }\n    }\n}\n\n// Lacing holes module\nmodule lacing_holes() {\n    color([0.3, 0.3, 0.3]) {\n        // Front lacing holes\n        for(i = [0:4]) {\n            y = -width/6 + i * width/6;\n            translate([length/2 + 1, y, thickness/2])\n                rotate([0, 90, 0])\n                cylinder(h=3, r=1.2, center=true);\n        }\n    }\n}\n\n// Assemble the aketon\nunion() {\n    aketon_body();\n    quilting_pattern();\n    edging_cords();\n    buttons();\n    lacing_holes();\n}",
    "renders": true
  },
  {
    "historical_artifact": "armingdoublet",
    "openscad_code": "// Arming Doublet - Historical 15th century padded armor garment\n// Designed for 3D printing in realistic style with medium complexity\n\nscale_factor = 0.4;\n$fn = 32;\n\nmodule arming_doublet() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main torso body - padded jack\n        color([0.7, 0.5, 0.3]) {\n            // Front torso\n            difference() {\n                union() {\n                    // Main body - quilted appearance\n                    for (i = [-2:2]) {\n                        translate([i * 12, 0, 0]) {\n                            cube([10, 45, 25], center=true);\n                        }\n                    }\n                    \n                    // Upper chest reinforcement\n                    translate([0, 10, 5]) {\n                        cube([50, 20, 5], center=true);\n                    }\n                }\n                \n                // Arm holes\n                translate([25, -5, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=50, r=10, center=true);\n                    }\n                }\n                translate([-25, -5, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=50, r=10, center=true);\n                    }\n                }\n                \n                // Neck hole\n                translate([0, 20, 5]) {\n                    cylinder(h=30, r=8, center=true);\n                }\n            }\n            \n            // Back torso\n            translate([0, -45, 0]) {\n                difference() {\n                    union() {\n                        for (i = [-2:2]) {\n                            translate([i * 12, 0, 0]) {\n                                cube([10, 45, 25], center=true);\n                            }\n                        }\n                    }\n                    \n                    // Back arm holes\n                    translate([25, 5, 0]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=50, r=10, center=true);\n                        }\n                    }\n                    translate([-25, 5, 0]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=50, r=10, center=true);\n                        }\n                    }\n                }\n            }\n            \n            // Side panels connecting front and back\n            translate([30, 0, 0]) {\n                cube([5, 90, 25], center=true);\n            }\n            translate([-30, 0, 0]) {\n                cube([5, 90, 25], center=true);\n            }\n        }\n        \n        // Arming points - leather laces for attaching armor\n        color([0.4, 0.2, 0.1]) {\n            // Shoulder points\n            translate([20, 0, 15]) {\n                cylinder(h=8, r=1.5);\n            }\n            translate([-20, 0, 15]) {\n                cylinder(h=8, r=1.5);\n            }\n            \n            // Side points for torso armor\n            for (pos = [[15, -15], [15, 0], [15, 15], [-15, -15], [-15, 0], [-15, 15]]) {\n                translate([pos[0], pos[1], 15]) {\n                    cylinder(h=8, r=1.5);\n                }\n            }\n        }\n        \n        // Decorative edging/binding\n        color([0.6, 0.4, 0.2]) {\n            // Front edging\n            translate([0, 22.5, 12.5]) {\n                cube([52, 2, 27]);\n            }\n            translate([0, -22.5, 12.5]) {\n                cube([52, 2, 27]);\n            }\n            \n            // Side edging\n            translate([31, 0, 12.5]) {\n                cube([2, 90, 27]);\n            }\n            translate([-31, 0, 12.5]) {\n                cube([2, 90, 27]);\n            }\n        }\n        \n        // Quilted pattern details\n        color([0.6, 0.4, 0.25]) {\n            for (x = [-20:10:20]) {\n                for (y = [-15:10:15]) {\n                    // Front quilting stitches\n                    translate([x, y, 13]) {\n                        sphere(r=0.5);\n                    }\n                    \n                    // Back quilting stitches\n                    translate([x, y - 45, 13]) {\n                        sphere(r=0.5);\n                    }\n                }\n            }\n        }\n        \n        // Bottom skirt/faulds attachment points\n        color([0.4, 0.2, 0.1]) {\n            for (x = [-15:7.5:15]) {\n                translate([x, -45, 10]) {\n                    cylinder(h=5, r=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete arming doublet\narming_doublet();",
    "renders": true
  },
  {
    "historical_artifact": "cotehardie",
    "openscad_code": "// Cotehardie - 14th century fitted medieval garment\n// Based on historical patterns with authentic proportions\n\n// Overall dimensions (scaled for 3D printing)\ngarment_length = 70;\ngarment_width = 35;\nsleeve_length = 25;\nwaist_height = 20;\n\n// Main body module\nmodule cotehardie_body() {\n    // Torso - fitted upper body\n    color(\"darkgreen\")\n    difference() {\n        // Main torso block\n        cube([garment_width, garment_length, 8], center=true);\n        \n        // Neck hole\n        translate([0, garment_length/2 - 5, 0])\n            cylinder(h=10, r=5, center=true);\n            \n        // Arm holes\n        translate([garment_width/2 + 2, garment_length/2 - 8, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, r=6, center=true);\n                \n        translate([-garment_width/2 - 2, garment_length/2 - 8, 0])\n            rotate([0, 90, 0])\n                cylinder(h=15, r=6, center=true);\n    }\n    \n    // Lower skirt - flared panels\n    for (i = [-1, 1]) {\n        translate([i * garment_width/4, -garment_length/2 + 10, 0])\n            color(\"forestgreen\")\n            cube([garment_width/2 + 5, 20, 8], center=true);\n    }\n}\n\n// Button closure module\nmodule buttons() {\n    for (i = [0:3:15]) {\n        translate([garment_width/2 + 2, garment_length/2 - 10 - i, 0])\n            color(\"gold\")\n            sphere(r=2);\n    }\n}\n\n// Decorative heraldic embroidery\nmodule heraldic_emblem() {\n    // Chest embroidery - lion rampant\n    translate([0, 10, 4.1])\n    color(\"gold\")\n    union() {\n        // Lion body\n        cube([8, 12, 1]);\n        // Lion head\n        translate([-2, 12, 0])\n            cube([4, 6, 1]);\n        // Tail\n        translate([6, 8, 0])\n            rotate([0, 0, 45])\n                cube([2, 8, 1]);\n    }\n}\n\n// Sleeve module\nmodule sleeve(side) {\n    translate([side * (garment_width/2 + 6), garment_length/2 - 8, 0])\n    rotate([0, 0, side * 15])\n    color(\"darkgreen\")\n    union() {\n        // Upper sleeve - fitted\n        cube([10, sleeve_length, 8], center=true);\n        \n        // Lower sleeve - flared\n        translate([0, -sleeve_length/2 - 8, 0])\n            cube([15, 16, 8], center=true);\n            \n        // Button trim at cuff\n        for (b = [-5, 0, 5]) {\n            translate([b, -sleeve_length - 8, 4.1])\n                color(\"gold\")\n                sphere(r=1.5);\n        }\n    }\n}\n\n// Belt module\nmodule belt() {\n    color(\"brown\")\n    translate([0, waist_height, 4.1])\n    cube([garment_width + 10, 6, 2], center=true);\n    \n    // Belt buckle\n    translate([garment_width/2 + 5, waist_height, 5.2])\n    color(\"gold\")\n    union() {\n        cube([4, 6, 1]);\n        translate([2, 3, 0])\n            cylinder(h=1, r=2);\n    }\n}\n\n// Assembly\nunion() {\n    cotehardie_body();\n    sleeve(1);  // Right sleeve\n    sleeve(-1); // Left sleeve\n    buttons();\n    heraldic_emblem();\n    belt();\n}",
    "renders": true
  },
  {
    "historical_artifact": "surcoat",
    "openscad_code": "// Surcoat (tabard) – 13th–14th c. heraldic garment\n// Realistic 3D-printable version, ~70 mm long\n\n// Parameters (mm)\nlength = 70;\nwidth  = 35;\nthick  = 1.8;\nhem    = 2.0;\narmhole_r = 5;\nneck_r    = 4;\ncross_size = 12;\n\n// Colors\ntabard_col = \"linen\";\ncross_col  = \"red\";\n\n// Main tabard body\nmodule tabard_body() {\n    difference() {\n        // Overall shape: rounded-bottom rectangle\n        union() {\n            translate([0, 0, thick/2])\n                cube([width, length, thick], center=true);\n            translate([0, length/2 - hem/2, thick/2])\n                cylinder(r=width/2, h=thick, $fn=60);\n        }\n        \n        // Armholes\n        translate([ width/2 + armhole_r,  length/4, 0])\n            rotate([90, 0, 0])\n            cylinder(r=armhole_r, h=thick+1, $fn=20);\n        translate([-width/2 - armhole_r,  length/4, 0])\n            rotate([90, 0, 0])\n            cylinder(r=armhole_r, h=thick+1, $fn=20);\n        \n        // Neck hole\n        translate([0, -length/2 + neck_r*2, 0])\n            rotate([90, 0, 0])\n            cylinder(r=neck_r, h=thick+1, $fn=24);\n    }\n}\n\n// Heraldic cross (St George)\nmodule heraldic_cross() {\n    color(cross_col)\n    difference() {\n        // Central cross arms\n        union() {\n            // Vertical bar\n            translate([0, 0, thick])\n                cube([cross_size/3.5, cross_size, thick]);\n            // Horizontal bar\n            translate([0, 0, thick])\n                cube([cross_size, cross_size/3.5, thick]);\n        }\n        // Create cross outline by subtracting smaller cross\n        translate([0, 0, thick-0.1])\n        scale([0.65, 0.65, 1])\n        union() {\n            cube([cross_size/3.5, cross_size, thick+0.2]);\n            cube([cross_size, cross_size/3.5, thick+0.2]);\n        }\n    }\n}\n\n// Belt with buckle\nmodule belt() {\n    color(\"brown\")\n    translate([0, 0, thick+0.5])\n        cube([width+4, 4, 1.2], center=true);\n    // Buckle\n    color(\"silver\")\n    translate([width/2+1.5, 0, thick+1.1])\n        difference() {\n            cube([3, 5, 1]);\n            translate([1, 2.5, -0.1])\n                cube([1, 2, 1.3]);\n        }\n}\n\n// Hem stitching pattern\nmodule hem_stitch() {\n    color(\"darkgray\")\n    for (a=[0:15:360])\n        translate([width/2*sin(a), length/2 - hem, thick+0.2])\n            sphere(d=0.8, $fn=8);\n}\n\n// Assembly\ncolor(tabard_col) tabard_body();\nheraldic_cross();\nbelt();\nhem_stitch();",
    "renders": true
  },
  {
    "historical_artifact": "tabard",
    "openscad_code": "// Historical Medieval Tabard - OpenSCAD Model\n// Based on 14th-15th century heraldic tabard design\n\n// Overall dimensions for 3D printing\ntabard_length = 80;\ntabard_width = 50;\nfabric_thickness = 2;\n\n// Heraldic colors\nheraldic_blue = [0.2, 0.3, 0.7];\nheraldic_gold = [0.9, 0.7, 0.2];\nheraldic_red = [0.7, 0.1, 0.1];\nfabric_color = [0.8, 0.75, 0.65];\n\n// Main tabard body\nmodule tabard_body() {\n    color(fabric_color)\n    difference() {\n        // Main rectangular body\n        translate([0, -tabard_length/2, 0])\n            cube([tabard_width, tabard_length, fabric_thickness], center=true);\n        \n        // Neck hole\n        translate([0, tabard_length/4, -1])\n            cylinder(h=fabric_thickness+2, r=8, $fn=32);\n        \n        // Side splits\n        translate([tabard_width/2 - 3, -tabard_length/4, -1])\n            cube([6, tabard_length/2, fabric_thickness+2]);\n        translate([-tabard_width/2 + 3, -tabard_length/4, -1])\n            cube([6, tabard_length/2, fabric_thickness+2]);\n    }\n}\n\n// Heraldic shield emblem\nmodule heraldic_shield() {\n    color(heraldic_blue)\n    translate([0, -10, fabric_thickness])\n    linear_extrude(height=1)\n    union() {\n        // Shield shape\n        difference() {\n            // Main shield body\n            translate([0, 0, 0])\n                scale([1, 1.2, 1])\n                    circle(r=12, $fn=5);\n            \n            // Bottom point\n            translate([0, -15, 0])\n                cube([24, 15, 24], center=true);\n        }\n        \n        // Gold cross\n        color(heraldic_gold)\n        union() {\n            // Vertical bar\n            translate([0, 0, 1])\n                cube([3, 20, 1]);\n            // Horizontal bar\n            translate([0, 0, 1])\n                cube([16, 3, 1]);\n        }\n        \n        // Four red lions (simplified)\n        color(heraldic_red)\n        for(x=[-6, 6])\n            for(y=[-6, 6])\n                translate([x, y, 2])\n                    scale([0.3, 0.3, 1])\n                        circle(r=4, $fn=3);\n    }\n}\n\n// Decorative trim along edges\nmodule edge_trim() {\n    color(heraldic_gold)\n    for(side=[-1, 1]) {\n        // Side trims\n        translate([side * tabard_width/2, 0, fabric_thickness/2])\n            cube([1, tabard_length, fabric_thickness+1]);\n        \n        // Bottom trim pattern\n        for(i=[-tabard_width/2+5:10:tabard_width/2-5]) {\n            translate([i, -tabard_length/2+2, fabric_thickness])\n                sphere(r=1.5, $fn=8);\n        }\n        \n        // Top shoulder trim\n        translate([side * tabard_width/4, tabard_length/2-5, fabric_thickness])\n            rotate([0, 0, 45])\n                cube([2, 15, fabric_thickness]);\n    }\n}\n\n// Fabric folds texture\nmodule fabric_folds() {\n    color(fabric_color)\n    difference() {\n        union() {\n            // Vertical folds\n            for(i=[-tabard_width/2+8:8:tabard_width/2-8]) {\n                translate([i, 0, fabric_thickness+0.5])\n                    scale([0.5, tabard_length, 0.5])\n                        cylinder(h=1, r=1, $fn=16);\n            }\n            \n            // Horizontal folds at bottom\n            for(i=[-tabard_length/2+10:10:tabard_length/2-20]) {\n                translate([0, i, fabric_thickness+0.5])\n                    scale([tabard_width, 0.5, 0.5])\n                        cylinder(h=1, r=1, $fn=16);\n            }\n        }\n    }\n}\n\n// Belt detail\nmodule belt() {\n    color([0.4, 0.2, 0.1])\n    translate([0, -5, fabric_thickness+0.5])\n    difference() {\n        // Main belt\n        cube([tabard_width+5, 4, 2], center=true);\n        \n        // Belt buckle hole\n        translate([tabard_width/2-2, 0, -1])\n            cylinder(h=4, r=1, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    tabard_body();\n    heraldic_shield();\n    edge_trim();\n    fabric_folds();\n    belt();\n}",
    "renders": true
  },
  {
    "historical_artifact": "cloak",
    "openscad_code": "// Historical Roman Legionary Sagum Cloak\n// Realistic medium-complexity 3D printable model\n\nscale_factor = 0.4;\n$fn = 32;\n\n// Main cloak body\nmodule cloak_body() {\n    color(\"sienna\") {\n        // Main rectangular fabric\n        difference() {\n            translate([-20, 0, 0]) {\n                cube([40, 55, 2]);\n            }\n            // Neck curve\n            translate([0, 48, -1]) {\n                cylinder(h=4, d=20);\n            }\n        }\n        \n        // Folded edges for thickness\n        translate([-20, 0, 2]) {\n            cube([40, 55, 1]);\n        }\n        translate([-20, 0, -1]) {\n            cube([40, 55, 1]);\n        }\n    }\n}\n\n// Decorative border (clavus)\nmodule decorative_border() {\n    color(\"goldenrod\") {\n        // Bottom border\n        translate([-19, 2, 1.5]) {\n            cube([38, 3, 0.5]);\n        }\n        \n        // Side borders\n        translate([-19, 2, 1.5]) {\n            cube([2, 51, 0.5]);\n        }\n        translate([17, 2, 1.5]) {\n            cube([2, 51, 0.5]);\n        }\n    }\n}\n\n// Fibula (cloak pin)\nmodule fibula() {\n    color(\"silver\") {\n        // Main pin body\n        translate([0, 50, 1]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=15, d=3);\n            }\n        }\n        \n        // Pin crossbar\n        translate([0, 50, 8]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=8, d=1.5);\n            }\n        }\n        \n        // Decorative disk\n        translate([0, 50, 8.5]) {\n            cylinder(h=1, d=6);\n        }\n    }\n}\n\n// Fabric folds\nmodule folds() {\n    color(\"sienna\") {\n        for(i = [1:4]) {\n            translate([-15 + i*7, 25, 1]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=2, d=3);\n                }\n            }\n        }\n    }\n}\n\n// Tassels at bottom corners\nmodule tassels() {\n    color(\"goldenrod\") {\n        for(pos = [[-18, 5], [18, 5]]) {\n            translate(pos) {\n                for(i = [0:2]) {\n                    translate([i*1.5 - 1.5, 0, -2]) {\n                        cylinder(h=4, d=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Unit insignia (legion marking)\nmodule insignia() {\n    color(\"white\") {\n        translate([0, 30, 2.1]) {\n            // Shield shape\n            difference() {\n                sphere(d=8);\n                translate([0, 0, -4]) {\n                    cube([20, 20, 8], center=true);\n                }\n            }\n            // Legion number X\n            translate([-2, 0, 0.5]) {\n                cube([1, 4, 1]);\n                rotate([0, 0, 45]) {\n                    cube([1, 5, 1]);\n                }\n                rotate([0, 0, -45]) {\n                    cube([1, 5, 1]);\n                }\n            }\n        }\n    }\n}\n\n// Scale the entire model\nscale(scale_factor) {\n    union() {\n        cloak_body();\n        decorative_border();\n        fibula();\n        folds();\n        tassels();\n        insignia();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "buckler",
    "openscad_code": "// Historical Buckler Shield - OpenSCAD Model\n// A 15th century style round buckler with decorative boss and riveted construction\n\n// Overall dimensions\nshield_diameter = 80;\nshield_thickness = 4;\nboss_diameter = 35;\nboss_height = 12;\nhandle_length = 70;\nhandle_diameter = 8;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main shield body\nmodule shield_body() {\n    color(\"burlywood\") difference() {\n        // Main circular shield\n        cylinder(h = shield_thickness, d = shield_diameter, $fn = 64);\n        \n        // Central hole for boss\n        translate([0, 0, -1]) \n            cylinder(h = shield_thickness + 2, d = boss_diameter - 10, $fn = 32);\n    }\n}\n\n// Decorative central boss (umbos)\nmodule central_boss() {\n    color(\"darkgoldenrod\") union() {\n        // Main dome\n        translate([0, 0, shield_thickness]) \n            scale([1, 1, 0.8]) \n                sphere(d = boss_diameter, $fn = 32);\n        \n        // Boss base ring\n        translate([0, 0, shield_thickness]) \n            cylinder(h = 2, d = boss_diameter + 4, $fn = 32);\n        \n        // Decorative rivets around boss\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) \n                translate([(boss_diameter + 8)/2, 0, shield_thickness + 1]) \n                    cylinder(h = 2, d = 3, $fn = 8);\n        }\n    }\n}\n\n// Reinforcement bands on back\nmodule reinforcement_bands() {\n    color(\"saddlebrown\") union() {\n        // Horizontal band\n        translate([0, 0, shield_thickness/2 - 1]) \n            cube([shield_diameter - 10, 6, 2], center = true);\n        \n        // Vertical band\n        translate([0, 0, shield_thickness/2 - 1]) \n            cube([6, shield_diameter - 10, 2], center = true);\n    }\n}\n\n// Handle grip\nmodule handle() {\n    color(\"saddlebrown\") union() {\n        // Main handle bar\n        translate([0, -handle_length/2, -handle_diameter/2 - 2]) \n            rotate([90, 0, 0]) \n                cylinder(h = handle_length, d = handle_diameter, $fn = 16);\n        \n        // Handle supports\n        for(pos = [-20, 20]) {\n            translate([pos, 0, -handle_diameter/2 - 2]) \n                cube([4, handle_diameter, handle_diameter], center = true);\n        }\n    }\n}\n\n// Decorative edge reinforcement with rivets\nmodule edge_reinforcement() {\n    color(\"darkgoldenrod\") union() {\n        // Metal edge band\n        difference() {\n            translate([0, 0, shield_thickness/2]) \n                cylinder(h = shield_thickness + 2, d = shield_diameter + 4, $fn = 64);\n            \n            translate([0, 0, -1]) \n                cylinder(h = shield_thickness + 4, d = shield_diameter, $fn = 64);\n        }\n        \n        // Rivets around edge\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30]) \n                translate([(shield_diameter + 2)/2, 0, shield_thickness/2]) \n                    cylinder(h = shield_thickness + 2, d = 2.5, $fn = 6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    shield_body();\n    central_boss();\n    edge_reinforcement();\n    \n    // Back side components (mirrored for display)\n    mirror([0, 0, 1]) {\n        translate([0, 0, shield_thickness + boss_height + 5]) {\n            reinforcement_bands();\n            handle();\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "heater",
    "openscad_code": "// Roman Hypocaust Tile Heater - Historical Artifact\n// A terracotta box used in Roman bathhouse under-floor heating systems\n// Features decorative patterns and air flow holes for hot air circulation\n\n$fn = 32;\n\n// Overall dimensions (mm)\ntile_width = 80;\ntile_length = 80;\ntile_height = 25;\nwall_thickness = 3;\n\n// Colors\nterracotta = [0.8, 0.4, 0.2];\ndarker_terracotta = [0.7, 0.35, 0.15];\n\n// Main tile body\nmodule tile_body() {\n    difference() {\n        // Outer shell\n        color(terracotta) cube([tile_width, tile_length, tile_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cube([tile_width - 2*wall_thickness, tile_length - 2*wall_thickness, tile_height], center = true);\n    }\n}\n\n// Decorative border pattern\nmodule decorative_border() {\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i * (tile_width/2 - 5), j * (tile_length/2 - 5), tile_height/2])\n                color(darker_terracotta) cylinder(r = 4, h = 1.5);\n        }\n    }\n}\n\n// Air flow holes (characteristic of hypocaust tiles)\nmodule air_holes() {\n    // Central large hole\n    translate([0, 0, tile_height/2 - 1])\n        color(darker_terracotta) cylinder(r = 8, h = 2);\n    \n    // Smaller corner holes\n    for (x = [-tile_width/3, tile_width/3]) {\n        for (y = [-tile_length/3, tile_length/3]) {\n            translate([x, y, tile_height/2 - 1])\n                color(darker_terracotta) cylinder(r = 5, h = 2);\n        }\n    }\n}\n\n// Roman numeral markings (historical authenticity)\nmodule roman_numerals() {\n    translate([0, 0, tile_height/2 + 0.5]) {\n        color(darker_terracotta) {\n            // \"VII\" for VIIth Legion\n            translate([-10, 0, 0]) cube([2, 10, 0.5]);\n            translate([-5, 0, 0]) cube([2, 10, 0.5]);\n            translate([5, 0, 0]) cube([2, 10, 0.5]);\n            translate([10, 0, 0]) cube([2, 10, 0.5]);\n            translate([15, 0, 0]) cube([2, 10, 0.5]);\n            translate([20, 0, 0]) cube([2, 10, 0.5]);\n            translate([10, -5, 0]) cube([20, 2, 0.5]);\n        }\n    }\n}\n\n// Support feet for stacking\nmodule support_feet() {\n    for (x = [-tile_width/3, tile_width/3]) {\n        for (y = [-tile_length/3, tile_length/3]) {\n            translate([x, y, -tile_height/2 + 2])\n                color(terracotta) cylinder(r = 6, h = 4);\n        }\n    }\n}\n\n// Worn edges for realistic aging\nmodule worn_edges() {\n    translate([tile_width/2 - 2, 0, 0])\n        rotate([0, 0, 45])\n        color(terracotta) cube([3, 15, tile_height], center = true);\n    translate([-tile_width/2 + 2, 0, 0])\n        rotate([0, 0, -45])\n        color(terracotta) cube([3, 15, tile_height], center = true);\n}\n\n// Assembly\nunion() {\n    tile_body();\n    decorative_border();\n    air_holes();\n    roman_numerals();\n    support_feet();\n    worn_edges();\n}",
    "renders": true
  },
  {
    "historical_artifact": "pavese",
    "openscad_code": "// Pavese (historic Italian shield) - realistic medium complexity\n// Overall dimensions ~90mm high, ~55mm wide, ~12mm thick\n\n$fn=64;\n\n// Shield body with slight curvature\nmodule shield_body() {\n    difference() {\n        // Main curved shield\n        translate([0,0,0])\n            scale([1,1.1,1])\n            rotate_extrude(angle=180, convexity=10) {\n                translate([25,0,0])\n                    polygon(points=[[0,0],[45,0],[45,90],[0,90]]);\n            }\n        \n        // Hollow inside for 3D printing\n        translate([0,0,-1])\n            scale([0.9,0.9,0.9])\n            rotate_extrude(angle=180, convexity=10) {\n                translate([25,0,0])\n                    polygon(points=[[0,0],[45,0],[45,90],[0,90]]);\n            }\n    }\n}\n\n// Central boss (umbo) with reinforcement\nmodule central_boss() {\n    color(\"silver\")\n    union() {\n        // Main dome\n        translate([0,0,12])\n            scale([1,1,0.8])\n            sphere(d=25);\n        \n        // Reinforcement ring\n        translate([0,0,10])\n            cylinder(h=3, d1=30, d2=28);\n    }\n}\n\n// Vertical strengthening ridges\nmodule ridges() {\n    color(\"dimgray\")\n    for(x=[-20,-10,0,10,20]) {\n        translate([x,0,6])\n            cube([2,90,8], center=true);\n    }\n}\n\n// Cross reinforcement bars\nmodule cross_bars() {\n    color(\"dimgray\")\n    union() {\n        // Horizontal bar\n        translate([0,30,10])\n            cube([50,3,4], center=true);\n        \n        // Vertical bar\n        translate([0,0,10])\n            cube([3,60,4], center=true);\n    }\n}\n\n// Decorative edge trim\nmodule edge_trim() {\n    color(\"gold\")\n    translate([0,0,1])\n        difference() {\n            cube([55,95,2], center=true);\n            cube([51,91,3], center=true);\n        }\n}\n\n// Rivets around boss\nmodule rivets() {\n    color(\"silver\")\n    for(i=[0:30:359]) {\n        rotate([0,0,i])\n            translate([18,0,12])\n                cylinder(h=2, d=3);\n    }\n}\n\n// Heraldic cross decoration\nmodule heraldic_cross() {\n    color(\"red\")\n    translate([0,0,13])\n    union() {\n        // Vertical arm\n        translate([0,0,0])\n            cube([4,40,1], center=true);\n        \n        // Horizontal arm\n        translate([0,0,0])\n            cube([30,4,1], center=true);\n    }\n}\n\n// Handle on back\nmodule handle() {\n    color(\"brown\")\n    difference() {\n        // Main handle bar\n        translate([0,-20,-6])\n            rotate([90,0,0])\n                cylinder(h=30, d=8);\n        \n        // Grip space\n        translate([0,-20,-6])\n            rotate([90,0,0])\n                cylinder(h=30, d=5);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"saddlebrown\") shield_body();\n    central_boss();\n    ridges();\n    cross_bars();\n    edge_trim();\n    rivets();\n    heraldic_cross();\n    handle();\n}",
    "renders": true
  },
  {
    "historical_artifact": "pavise",
    "openscad_code": "// Pavise historical shield - Medium complexity realistic style\n// A 15th century European pavise with heraldic decoration\n\n$fn = 32;\n\n// Overall dimensions\nshield_width = 60;\nshield_height = 80;\nshield_thickness = 4;\n\nmodule pavise_shield() {\n    // Main shield body - tapered top\n    difference() {\n        // Base shape\n        union() {\n            // Lower rectangular section\n            translate([0, -shield_height/4, 0])\n                cube([shield_width, shield_height/2, shield_thickness], center=true);\n            \n            // Upper tapered section\n            translate([0, shield_height/4, 0])\n                scale([0.7, 1, 1])\n                    cube([shield_width, shield_height/2, shield_thickness], center=true);\n        }\n        \n        // Cut handle slot on back\n        translate([0, -shield_height/4, -shield_thickness/2-0.1])\n            cube([15, 40, shield_thickness+0.2], center=true);\n    }\n}\n\nmodule heraldic_cross() {\n    // Heraldic cross decoration on front\n    color(\"red\") {\n        // Vertical bar\n        translate([0, 0, shield_thickness/2+0.1])\n            cube([6, 35, 0.5], center=true);\n        \n        // Horizontal bar\n        translate([0, 10, shield_thickness/2+0.1])\n            cube([25, 6, 0.5], center=true);\n    }\n}\n\nmodule decorative_border() {\n    // Raised border around shield edge\n    color(\"gold\") {\n        // Left border\n        translate([-shield_width/2-1, 0, 0])\n            cube([2, shield_height+2, shield_thickness+1], center=true);\n        \n        // Right border\n        translate([shield_width/2+1, 0, 0])\n            cube([2, shield_height+2, shield_thickness+1], center=true);\n        \n        // Bottom border\n        translate([0, -shield_height/2-1, 0])\n            cube([shield_width+4, 2, shield_thickness+1], center=true);\n        \n        // Top border (tapered)\n        translate([0, shield_height/2+1, 0])\n            scale([0.7, 1, 1])\n                cube([shield_width+4, 2, shield_thickness+1], center=true);\n    }\n}\n\nmodule support_struts() {\n    // Internal support structure for 3D printing\n    color(\"gray\") {\n        for(i = [-20:20:20]) {\n            translate([i, 0, 0])\n                cube([2, shield_height-10, shield_thickness-1], center=true);\n        }\n        \n        for(j = [-25:25:25]) {\n            translate([0, j, 0])\n                cube([shield_width-10, 2, shield_thickness-1], center=true);\n        }\n    }\n}\n\nmodule heraldic_eagle() {\n    // Simplified heraldic eagle in center\n    color(\"black\") {\n        // Eagle body\n        translate([0, 10, shield_thickness/2+0.2])\n            scale([1, 1.2, 1])\n                sphere(4, $fn=16);\n        \n        // Eagle wings\n        rotate([0, 0, 30])\n            translate([-8, 10, shield_thickness/2+0.2])\n                cube([12, 3, 0.5]);\n        \n        rotate([0, 0, -30])\n            translate([8, 10, shield_thickness/2+0.2])\n                cube([12, 3, 0.5]);\n    }\n}\n\nmodule bolt_holes() {\n    // Historical crossbow bolt damage\n    color(\"brown\") {\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle])\n                translate([15, 25, shield_thickness/2])\n                    cylinder(h=shield_thickness+1, r=1.5, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shield body\n    color(\"brown\") pavise_shield();\n    \n    // Internal supports (only visible from bottom)\n    translate([0, 0, -shield_thickness/2-0.5])\n        support_struts();\n    \n    // External decorations\n    heraldic_cross();\n    decorative_border();\n    heraldic_eagle();\n    bolt_holes();\n}",
    "renders": true
  },
  {
    "historical_artifact": "targebuckler",
    "openscad_code": "// Targebuckler - Scottish Highland Shield\n// Historical artifact replica (17th-18th century)\n\n$fn=64;\n\n// Main dimensions\ndiameter = 80;\nthickness = 12;\nboss_diameter = 30;\nboss_height = 8;\n\n// Colors\nwood_color = \"#8B4513\";\nleather_color = \"#3E2723\";\nmetal_color = \"#B87333\";\nbrass_color = \"#B8860B\";\n\n// Main wooden shield body\nmodule shield_body() {\n    color(wood_color) {\n        // Main circular disk\n        cylinder(h=thickness, d=diameter, center=true);\n        \n        // Central boss - raised dome for hand protection\n        translate([0, 0, thickness/2 + boss_height/2])\n            color(metal_color)\n            sphere(d=boss_diameter);\n        \n        // Hand grip on back\n        translate([0, -diameter/4, -thickness/2 - 3])\n            rotate([90, 0, 0])\n            color(leather_color)\n            cylinder(h=diameter/2, d=8, center=true);\n    }\n}\n\n// Decorative brass studs around perimeter\nmodule decorative_studs() {\n    color(brass_color) {\n        for(i=[0:15:359]) {\n            rotate([0, 0, i])\n                translate([diameter/2 - 5, 0, thickness/2 + 1])\n                    sphere(d=3);\n        }\n    }\n}\n\n// Celtic knot pattern border\nmodule celtic_border() {\n    color(brass_color) {\n        // Interlaced pattern segments\n        for(i=[0:30:359]) {\n            rotate([0, 0, i])\n                translate([diameter/2 - 10, 0, thickness/2 + 0.5])\n                    cube([6, 2, 1], center=true);\n        }\n        \n        // Crossing elements\n        for(i=[15:30:359]) {\n            rotate([0, 0, i])\n                translate([diameter/2 - 10, 0, thickness/2 + 0.5])\n                    rotate([0, 0, 45])\n                    cube([8, 2, 1], center=true);\n        }\n    }\n}\n\n// Leather facing with stitching\nmodule leather_face() {\n    color(leather_color) {\n        // Main leather layer\n        translate([0, 0, thickness/2 + 0.1])\n            cylinder(h=0.5, d=diameter - 10);\n        \n        // Stitching holes\n        color(\"black\") {\n            for(i=[0:10:359]) {\n                rotate([0, 0, i])\n                    translate([diameter/2 - 12, 0, thickness/2 + 0.5])\n                        cylinder(h=0.5, d=1);\n            }\n        }\n    }\n}\n\n// Central brass boss decoration\nmodule boss_decoration() {\n    color(brass_color) {\n        // Raised center\n        translate([0, 0, thickness/2 + boss_height + 2])\n            sphere(d=10);\n        \n        // Four decorative rays\n        for(i=[0:90:360]) {\n            rotate([0, 0, i])\n                translate([8, 0, thickness/2 + boss_height + 2])\n                    cube([12, 2, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    shield_body();\n    decorative_studs();\n    celtic_border();\n    leather_face();\n    boss_decoration();\n}",
    "renders": true
  },
  {
    "historical_artifact": "target",
    "openscad_code": "// Roman Legionary Shield (Scutum)\n// Medium complexity realistic model\n// Designed for 3D printing at 1:20 scale (approx 80mm tall)\n\n// Overall dimensions\nshield_width = 60;\nshield_height = 80;\nshield_thickness = 6;\nboss_radius = 12;\nboss_height = 8;\n\n// Colors\nshield_color = \"#8B4513\";\nmetal_color = \"#B87333\";\nleather_color = \"#8B4513\";\n\n// Main shield body with curved shape\nmodule scutum_body() {\n    difference() {\n        // Main curved shield body\n        translate([0, 0, shield_thickness/2])\n        scale([1, 1.2, 1])\n        cylinder(h=shield_thickness, r1=shield_width/2, r2=shield_width/2 - 5, $fn=100);\n        \n        // Taper edges for realistic curvature\n        translate([0, -shield_height/3, -1])\n        cube([shield_width + 2, shield_height/3, shield_thickness + 2], center=true);\n    }\n}\n\n// Central boss (umbo)\nmodule shield_boss() {\n    color(metal_color)\n    translate([0, 0, shield_thickness + boss_height/2])\n    cylinder(h=boss_height, r=boss_radius, $fn=50);\n    \n    color(metal_color)\n    translate([0, 0, shield_thickness])\n    cylinder(h=2, r=boss_radius + 3, $fn=50);\n}\n\n// Decorative metal rim\nmodule metal_rim() {\n    color(metal_color)\n    translate([0, 0, shield_thickness - 0.5])\n    difference() {\n        cylinder(h=1.5, r=shield_width/2 + 2, $fn=100);\n        cylinder(h=2, r=shield_width/2 - 3, $fn=100);\n    }\n}\n\n// Horizontal wooden planks texture\nmodule wood_planks() {\n    color(shield_color)\n    for(i = [-2:1:2]) {\n        translate([0, i * 10, 0])\n        cube([shield_width - 8, 8, shield_thickness + 0.2], center=true);\n    }\n}\n\n// Leather grip on back\nmodule shield_grip() {\n    color(leather_color)\n    translate([0, -shield_height/3, -shield_thickness/2 - 3])\n    rotate([90, 0, 0])\n    cylinder(h=shield_height/2, r=2.5, $fn=20);\n    \n    // Grip supports\n    translate([0, -shield_height/3, -shield_thickness/2 - 2])\n    rotate([90, 0, 0])\n    cylinder(h=8, r=3.5, $fn=20);\n}\n\n// Decorative central spine\nmodule central_spine() {\n    color(metal_color)\n    translate([0, 0, shield_thickness - 0.3])\n    cube([4, shield_height * 0.8, 1], center=true);\n}\n\n// Rivets around boss\nmodule boss_rivets() {\n    color(metal_color)\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([boss_radius + 6, 0, shield_thickness + 1])\n        cylinder(h=1.5, r=1.2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main shield parts\n    color(shield_color) scutum_body();\n    wood_planks();\n    metal_rim();\n    central_spine();\n    \n    // Front details\n    shield_boss();\n    boss_rivets();\n    \n    // Back details\n    %shield_grip();\n}",
    "renders": true
  },
  {
    "historical_artifact": "roundshield",
    "openscad_code": "// Historical Viking Roundshield - 9th-11th Century Style\n// Diameter: 80mm, suitable for 3D printing at 1:10 scale\n\n// Shield parameters\nshield_diameter = 80;\nshield_thickness = 3;\nboss_diameter = 25;\nboss_height = 12;\nboss_thickness = 2;\ngrip_length = 60;\ngrip_width = 8;\ngrip_thickness = 4;\nplank_width = 12;\nplank_count = 8;\nnail_count = 16;\nnail_diameter = 1.5;\n\n// Main shield body with wooden planks\nmodule shield_body() {\n    difference() {\n        // Main disc\n        color([0.4, 0.25, 0.15]) \n        cylinder(h=shield_thickness, d=shield_diameter, $fn=64);\n        \n        // Central hole for boss\n        translate([0, 0, -0.1])\n        cylinder(h=shield_thickness + 0.2, d=boss_diameter - 4, $fn=32);\n    }\n    \n    // Wooden plank texture\n    for(i = [0 : plank_count - 1]) {\n        rotate([0, 0, i * 360/plank_count])\n        translate([0, -plank_width/2, -0.1])\n        color([0.45, 0.3, 0.18])\n        cube([shield_diameter/2, plank_width, shield_thickness + 0.2], center=false);\n    }\n}\n\n// Iron boss (central dome)\nmodule boss() {\n    // Main dome\n    translate([0, 0, shield_thickness])\n    color([0.3, 0.3, 0.3])\n    cylinder(h=boss_height - boss_thickness, d1=boss_diameter, d2=boss_diameter - 8, $fn=32);\n    \n    // Flange\n    translate([0, 0, shield_thickness])\n    color([0.4, 0.4, 0.4])\n    cylinder(h=boss_thickness, d=boss_diameter + 6, $fn=32);\n}\n\n// Iron reinforcement bands\nmodule reinforcement_bands() {\n    // Outer band\n    translate([0, 0, shield_thickness/2])\n    color([0.35, 0.35, 0.35])\n    rotate_extrude($fn=64)\n    translate([shield_diameter/2 - 3, 0, 0])\n    square([3, shield_thickness]);\n    \n    // Inner circle band\n    translate([0, 0, shield_thickness/2])\n    color([0.35, 0.35, 0.35])\n    rotate_extrude($fn=32)\n    translate([shield_diameter/3, 0, 0])\n    square([2, shield_thickness]);\n}\n\n// Decorative nails\nmodule nails() {\n    for(i = [0 : nail_count - 1]) {\n        angle = i * 360/nail_count;\n        radius = shield_diameter/2 - 6;\n        \n        translate([cos(angle) * radius, sin(angle) * radius, shield_thickness])\n        color([0.2, 0.2, 0.2])\n        cylinder(h=2, d=nail_diameter, $fn=8);\n    }\n}\n\n// Leather hand grip on back\nmodule hand_grip() {\n    translate([0, -grip_width/2, shield_thickness/2])\n    rotate([90, 0, 0])\n    color([0.2, 0.15, 0.1])\n    cylinder(h=grip_length, d=grip_width, $fn=16);\n    \n    // Grip supports\n    for(x = [-grip_length/3, grip_length/3]) {\n        translate([x, 0, shield_thickness/2])\n        rotate([90, 0, 0])\n        color([0.3, 0.2, 0.15])\n        cube([grip_thickness, grip_width, 6], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    shield_body();\n    boss();\n    reinforcement_bands();\n    nails();\n}\n\n// Back side elements\nmirror([0, 0, 1]) {\n    translate([0, 0, -shield_thickness])\n    hand_grip();\n}",
    "renders": true
  },
  {
    "historical_artifact": "kiteshield",
    "openscad_code": "// Medieval Kite Shield (Norman 11th-13th century)\n// Overall height 80 mm, scaled for 3D printing\n\nmodule shield_body() {\n    // Main kite-shaped body\n    difference() {\n        // Tapered body\n        linear_extrude(height = 3, center = true)\n            polygon(points = [\n                [0, 40],      // Top center\n                [-20, 40],    // Top left\n                [-25, 30],    // Shoulder left\n                [-30, 0],     // Waist left\n                [-25, -30],   // Bottom left\n                [0, -40],     // Bottom point\n                [25, -30],    // Bottom right\n                [30, 0],      // Waist right\n                [25, 30],     // Shoulder right\n                [20, 40]      // Top right\n            ]);\n        \n        // Engraved cross decoration on face\n        translate([0, 5, 1.6])\n            linear_extrude(height = 1, center = false)\n                polygon(points = [\n                    [-1.5, 10], [-1.5, 2], [-6, 2], [-6, 0], [-1.5, 0],\n                    [-1.5, -8], [1.5, -8], [1.5, 0], [6, 0], [6, 2],\n                    [1.5, 2], [1.5, 10]\n                ]);\n    }\n}\n\nmodule boss() {\n    // Central shield boss with rivets\n    difference() {\n        // Main dome\n        translate([0, 0, 0])\n            scale([1, 1.2, 1])\n            sphere(d = 15, $fn = 32);\n        \n        // Hollow back\n        translate([0, 0, -2])\n            sphere(d = 12, $fn = 32);\n    }\n    \n    // Decorative rivets around boss\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([9, 0, 0])\n            cylinder(d = 2, h = 1.5, $fn = 8);\n    }\n}\n\nmodule grip() {\n    // Leather-wrapped grip bar\n    color(\"saddlebrown\")\n    translate([0, 0, -5])\n        rotate([90, 0, 0])\n        difference() {\n            // Main grip bar\n            cylinder(h = 20, d = 5, $fn = 16);\n            \n            // Finger grooves\n            for (i = [-1:1]) {\n                translate([0, 0, 5 + i * 5])\n                cylinder(h = 2.5, d = 4.5, $fn = 16);\n            }\n        }\n}\n\nmodule strap() {\n    // Leather arm strap\n    color(\"saddlebrown\")\n    difference() {\n        // Main strap\n        translate([0, 0, -8])\n            rotate([0, 90, 0])\n            cube([30, 10, 2], center = true);\n        \n        // Strap holes\n        for (i = [-1, 1]) {\n            translate([i * 10, 0, -8])\n                rotate([0, 90, 0])\n                cylinder(h = 3, d = 3, $fn = 8);\n        }\n    }\n}\n\nmodule battle_wear() {\n    // Subtle dents and scratches\n    color(\"silver\")\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 25])\n        translate([10 + i * 5, 10 - i * 7, 1.5])\n            sphere(d = 2 + i, $fn = 8);\n    }\n    \n    // Edge nicks\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120 + 15])\n        translate([25 - i * 5, 25 - i * 8, 0])\n            cube([3, 2, 4], center = true);\n    }\n}\n\n// Main assembly\ncolor(\"silver\") {\n    shield_body();\n    battle_wear();\n}\n\ncolor(\"dimgray\") {\n    boss();\n}\n\ngrip();\nstrap();",
    "renders": true
  },
  {
    "historical_artifact": "heatershield",
    "openscad_code": "// Heater Shield - 13th century knightly shield\n// Medium complexity realistic historical artifact\n// Dimensions: ~70mm height, ~50mm width\n\n$fn = 36;\n\n// Main shield body with slight curve\nmodule shield_body() {\n    // Central curved section\n    difference() {\n        union() {\n            // Main shield shape - tapered rectangle with curved top\n            linear_extrude(height = 5, convexity = 10) {\n                polygon(points = [\n                    [0, 0], [50, 0], [48, 10], [45, 30], \n                    [40, 50], [25, 70], [10, 50], [5, 30], [2, 10], [0, 0]\n                ]);\n            }\n            \n            // Add slight bulge for realistic curvature\n            translate([25, 35, 2.5]) \n                scale([1, 1.2, 0.3]) \n                sphere(d = 45);\n        }\n        \n        // Hollow out back for 3D printing\n        translate([2, 2, -1]) \n            linear_extrude(height = 7, convexity = 10) {\n                polygon(points = [\n                    [0, 0], [46, 0], [44, 8], [41, 28], \n                    [38, 48], [25, 66], [12, 48], [9, 28], [6, 8], [0, 0]\n                ]);\n            }\n    }\n}\n\n// Shield boss (central metal dome)\nmodule shield_boss() {\n    color(\"silver\") {\n        translate([25, 35, 5]) \n            difference() {\n                sphere(d = 12);\n                translate([0, 0, -6]) \n                    cube([20, 20, 12], center = true);\n            }\n    }\n}\n\n// Decorative cross pattern (typical for crusader shields)\nmodule cross_emblem() {\n    color(\"red\") {\n        // Vertical bar\n        translate([25, 35, 6]) \n            cube([3, 50, 1], center = true);\n        \n        // Horizontal bar\n        translate([25, 35, 6]) \n            cube([35, 3, 1], center = true);\n    }\n}\n\n// Reinforcing metal strips (enarmes)\nmodule metal_strips() {\n    color(\"silver\") {\n        // Vertical strip on left\n        translate([5, 35, 5.5]) \n            cube([2, 60, 0.5]);\n        \n        // Horizontal strips for grip reinforcement\n        for(y = [15, 55]) {\n            translate([25, y, 5.5]) \n                cube([40, 2, 0.5]);\n        }\n    }\n}\n\n// Grip on back\nmodule shield_grip() {\n    color(\"brown\") {\n        translate([25, 35, -1]) \n            rotate([90, 0, 0]) \n                cylinder(h = 30, d = 4);\n        \n        // Grip supports\n        for(x = [-8, 8]) {\n            translate([25 + x, 35, -1]) \n                cube([2, 2, 8]);\n        }\n    }\n}\n\n// Rivets along the edge\nmodule rivets() {\n    color(\"silver\") {\n        // Top edge rivets\n        for(x = [8:8:42]) {\n            translate([x, 15, 6]) \n                cylinder(h = 1, d = 2);\n        }\n        \n        // Side rivets\n        for(y = [8:8:62]) {\n            translate([8, y, 6]) \n                cylinder(h = 1, d = 2);\n            translate([42, y, 6]) \n                cylinder(h = 1, d = 2);\n        }\n    }\n}\n\n// Weathering and texture details\nmodule weathering() {\n    color(\"brown\") {\n    // Wood grain effect - subtle scratches\n    for(i = [0:5:65]) {\n        translate([2, i, 5.8]) \n            rotate([0, 0, 5]) \n                cube([46, 0.5, 0.2]);\n    }\n    }\n}\n\n// Assemble the complete shield\nunion() {\n    // Main wooden body\n    color(\"burlywood\") shield_body();\n    \n    // Front details\n    shield_boss();\n    cross_emblem();\n    metal_strips();\n    rivets();\n    weathering();\n    \n    // Back details\n    shield_grip();\n}",
    "renders": true
  },
  {
    "historical_artifact": "scutumbuckler",
    "openscad_code": "// Scutumbuckler - Historical Roman Shield Boss\n// A decorative boss from the center of a legionary scutum shield\n// Features include central dome, decorative rings, rivet holes, and Latin inscription\n\n$fn = 64;\n\n// Overall dimensions\nshield_diameter = 80;\nboss_height = 15;\nwall_thickness = 2;\n\n// Main module\nmodule scutumbuckler() {\n    // Main dome structure\n    difference() {\n        // Outer dome\n        translate([0, 0, boss_height/2])\n            scale([1, 1, 0.5])\n                sphere(d = shield_diameter * 0.6);\n        \n        // Inner dome cavity\n        translate([0, 0, boss_height/2 + wall_thickness])\n            scale([1, 1, 0.5])\n                sphere(d = shield_diameter * 0.6 - wall_thickness * 2);\n    }\n    \n    // Decorative ring around base\n    color(\"bronze\")\n    translate([0, 0, 0])\n        cylinder(h = boss_height * 0.3, \n                r1 = shield_diameter * 0.31, \n                r2 = shield_diameter * 0.29);\n    \n    // Inner reinforcing ring\n    color(\"bronze\")\n    translate([0, 0, 0])\n        cylinder(h = boss_height * 0.2, \n                r1 = shield_diameter * 0.25, \n                r2 = shield_diameter * 0.23);\n    \n    // Rivet holes for attachment (6 evenly spaced)\n    for(i = [0:5]) {\n        angle = i * 60;\n        x = cos(angle) * shield_diameter * 0.35;\n        y = sin(angle) * shield_diameter * 0.35;\n        \n        // Rivet hole\n        translate([x, y, 0])\n            cylinder(h = boss_height * 0.4, r = 2);\n        \n        // Raised rivet head\n        color(\"bronze\")\n        translate([x, y, boss_height * 0.4])\n            sphere(r = 2.5);\n    }\n    \n    // Decorative Latin inscription band\n    color(\"bronze\")\n    translate([0, 0, boss_height * 0.5])\n        cylinder(h = 3, \n                r1 = shield_diameter * 0.28, \n                r2 = shield_diameter * 0.28);\n    \n    // Inscription text (raised relief)\n    for(i = [0:10]) {\n        angle = i * 30 - 150;\n        x = cos(angle) * shield_diameter * 0.27;\n        y = sin(angle) * shield_diameter * 0.27;\n        \n        // Individual letter blocks (simplified Latin characters)\n        translate([x, y, boss_height * 0.5 + 1.5])\n            rotate([0, 0, angle + 90])\n                cube([3, 1, 1], center = true);\n    }\n    \n    // Central decorative boss\n    color(\"bronze\")\n    translate([0, 0, boss_height * 0.8])\n        cylinder(h = 5, r = shield_diameter * 0.08);\n    \n    // Central spike mount\n    color(\"bronze\")\n    translate([0, 0, boss_height * 0.8 + 5])\n        cylinder(h = 8, r1 = 3, r2 = 1.5);\n    \n    // Reinforcement ribs\n    for(i = [0:3]) {\n        angle = i * 90;\n        \n        color(\"bronze\")\n        rotate([0, 0, angle])\n            translate([0, 0, 0])\n                cube([shield_diameter * 0.5, 2, boss_height * 0.3], center = true);\n    }\n    \n    // Shield attachment flange\n    color(\"darkgreen\")\n    translate([0, 0, -wall_thickness])\n        cylinder(h = wall_thickness, \n                r1 = shield_diameter * 0.5, \n                r2 = shield_diameter * 0.5);\n    \n    // Flange reinforcement holes\n    for(i = [0:7]) {\n        angle = i * 45;\n        x = cos(angle) * shield_diameter * 0.42;\n        y = sin(angle) * shield_diameter * 0.42;\n        \n        translate([x, y, -wall_thickness])\n            cylinder(h = wall_thickness + 1, r = 1.5);\n    }\n}\n\n// Render the complete artifact\nscutumbuckler();",
    "renders": true
  },
  {
    "historical_artifact": "peltabuckler",
    "openscad_code": "// Pelta Buckler (Ancient Roman/Italic light infantry shield)\n// Based on archaeological finds from 1st century BC - 1st century AD\n// Medium complexity realistic representation\n\n$fn = 32;\n\n// Main parameters\nshield_width = 85;          // Overall width in mm\nshield_height = 110;        // Overall height in mm\nshield_thickness = 8;       // Base thickness\nboss_radius = 22;           // Central boss radius\nboss_height = 15;           // Boss projection\nrim_thickness = 5;          // Reinforced rim thickness\ngrip_offset = 25;           // Handle offset from center\n\n// Colors\ncolor_shield = \"burlywood\";\ncolor_metal = \"goldenrod\";\ncolor_leather = \"saddlebrown\";\n\n// Main shield body - pelta shape (light infantry curved shield)\nmodule pelta_shape() {\n    difference() {\n        // Basic pelta outline - elongated teardrop with curved top\n        union() {\n            // Main body\n            scale([1, 1.3, 1])\n                sphere(d = shield_width, $fn = 6);\n            // Extend bottom point\n            translate([0, -shield_height/2 + 10, 0])\n                cube([shield_width * 0.8, 20, shield_thickness], center = true);\n        }\n        \n        // Cut to proper shape\n        intersection() {\n            cube([shield_width * 2, shield_height * 2, shield_thickness * 2], center = true);\n            translate([0, 0, -shield_thickness/2])\n                cylinder(h = shield_thickness + 1, d = shield_width, $fn = 6);\n        }\n    }\n}\n\n// Central boss (umbo) with concentric rings\nmodule central_boss() {\n    color(color_metal)\n    union() {\n        // Main boss dome\n        translate([0, 0, shield_thickness/2])\n            scale([1, 1, 0.7])\n                sphere(r = boss_radius);\n        \n        // Decorative outer ring\n        translate([0, 0, shield_thickness/2 + boss_height - 3])\n            cylinder(h = 3, r1 = boss_radius + 3, r2 = boss_radius + 2);\n        \n        // Inner ring detail\n        translate([0, 0, shield_thickness/2 + boss_height - 1])\n            cylinder(h = 1, r = boss_radius - 5);\n    }\n}\n\n// Reinforced rim with metal facing\nmodule rim_reinforcement() {\n    color(color_metal)\n    difference() {\n        // Outer rim\n        translate([0, 0, shield_thickness/2])\n            cylinder(h = shield_thickness + 2, r = shield_width/2 + 3, $fn = 64);\n        \n        // Cutout for shield body\n        translate([0, 0, -1])\n            cylinder(h = shield_thickness + 4, r = shield_width/2 - rim_thickness, $fn = 64);\n    }\n}\n\n// Leather grip system\nmodule shield_grip() {\n    color(color_leather)\n    union() {\n        // Horizontal grip bar\n        translate([0, -grip_offset, -shield_thickness/2 - 5])\n            rotate([90, 0, 0])\n                cylinder(h = 60, r = 4);\n        \n        // Grip supports\n        translate([25, -grip_offset, -shield_thickness/2 - 5])\n            cylinder(h = 5, r = 6);\n        translate([-25, -grip_offset, -shield_thickness/2 - 5])\n            cylinder(h = 5, r = 6);\n        \n        // Wrist strap\n        translate([0, grip_offset/2, shield_thickness/2 + 2])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 50, r = 8);\n                    cylinder(h = 51, r = 5);\n                }\n    }\n}\n\n// Decorative bronze applique patterns\nmodule decorative_appliques() {\n    color(color_metal)\n    union() {\n        // Lightning bolt patterns (common Italic motif)\n        for(i = [-1, 1]) {\n            translate([i * 20, 15, shield_thickness/2 + 0.5])\n                rotate([0, 0, i * 30])\n                    scale([0.5, 2, 1])\n                        cylinder(h = 1, r = 3, $fn = 3);\n        }\n        \n        // Small circular studs around boss\n        for(angle = [0 : 45 : 315]) {\n            translate([\n                cos(angle) * (boss_radius + 8),\n                sin(angle) * (boss_radius + 8),\n                shield_thickness/2 + 0.5\n            ])\n                cylinder(h = 1, r = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main shield body\n    color(color_shield)\n    pelta_shape();\n    \n    // Structural elements\n    rim_reinforcement();\n    central_boss();\n    \n    // Functional elements\n    shield_grip();\n    \n    // Decorative elements\n    decorative_appliques();\n}",
    "renders": true
  },
  {
    "historical_artifact": "aspis",
    "openscad_code": "// Aspis (Greek hoplite shield) - Historical Artifact\n// Medium complexity realistic style - 3D printable\n\n$fn = 64;\n\n// Main parameters\nshield_diameter = 85;\nshield_thickness = 4;\nrim_width = 5;\nboss_diameter = 25;\nboss_height = 12;\ngrip_diameter = 12;\ngrip_length = 35;\n\n// Colors\nbronze_color = \"#CD7F32\";\nleather_color = \"#8B4513\";\nwood_color = \"#DEB887\";\n\nmodule aspis() {\n    // Main wooden shield body\n    color(wood_color) {\n        difference() {\n            // Main disk\n            cylinder(h=shield_thickness, d=shield_diameter, center=true);\n            \n            // Central hole for hand grip\n            translate([0, 0, -shield_thickness/2 - 0.5])\n                cylinder(h=shield_thickness + 1, d=grip_diameter);\n        }\n    }\n    \n    // Bronze rim reinforcement\n    color(bronze_color) {\n        difference() {\n            cylinder(h=shield_thickness + 2, d=shield_diameter + 2, center=true);\n            cylinder(h=shield_thickness + 3, d=shield_diameter - rim_width * 2, center=true);\n        }\n    }\n    \n    // Bronze central boss (porpax)\n    color(bronze_color) {\n        translate([0, 0, shield_thickness/2 + boss_height/2])\n            cylinder(h=boss_height, d=boss_diameter);\n        \n        // Boss rim\n        translate([0, 0, shield_thickness/2 + boss_height/2])\n            cylinder(h=boss_height/3, d=boss_diameter + 4);\n    }\n    \n    // Leather hand grip (antilabe) on back\n    color(leather_color) {\n        translate([0, 0, -shield_thickness/2 - 1])\n            rotate([90, 0, 0])\n                cylinder(h=grip_length, d=grip_diameter - 2, center=true);\n    }\n    \n    // Decorative bronze concentric rings\n    color(bronze_color) {\n        for(i=[1:3]) {\n            ring_diameter = shield_diameter - 20 * i;\n            translate([0, 0, shield_thickness/2 + 0.5])\n                cylinder(h=0.5, d=ring_diameter);\n        }\n    }\n    \n    // Decorative Greek meander pattern segments on rim\n    color(bronze_color) {\n        for(angle=[0:30:330]) {\n            rotate([0, 0, angle])\n                translate([shield_diameter/2 - rim_width, 0, shield_thickness/2 + 0.3])\n                    cube([2, 2, 0.5], center=true);\n        }\n    }\n    \n    // Back support ribs\n    color(wood_color) {\n        for(angle=[0:90:270]) {\n            rotate([0, 0, angle])\n                translate([0, 0, -shield_thickness/2])\n                    cube([shield_diameter - rim_width * 4, 2, shield_thickness/2]);\n        }\n    }\n}\n\n// Render the complete aspis\naspis();",
    "renders": true
  },
  {
    "historical_artifact": "hoplon",
    "openscad_code": "// Hoplon (Greek aspis shield) - 5th century BCE\n// Overall diameter: 90mm (1:10 scale for 900mm real shield)\n// Optimized for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main shield parameters\nshield_diameter = 90;\nshield_thickness = 4;\nrim_width = 4;\ngrip_offset = 10;\n\n// Colors\ncolor_bronze = [0.72, 0.45, 0.2];\ncolor_wood = [0.4, 0.26, 0.13];\ncolor_leather = [0.3, 0.2, 0.1];\n\nmodule hoplon() {\n    // Main wooden core\n    color(color_wood) difference() {\n        cylinder(h = shield_thickness, d = shield_diameter);\n        // Central recess for arm\n        translate([0, 0, -0.1])\n            cylinder(h = shield_thickness + 0.2, d = 35);\n    }\n    \n    // Bronze rim reinforcement\n    color(color_bronze) difference() {\n        cylinder(h = shield_thickness + 2, d = shield_diameter + 2);\n        translate([0, 0, -0.1])\n            cylinder(h = shield_thickness + 2.2, d = shield_diameter - rim_width * 2);\n    }\n    \n    // Bronze facing on front\n    color(color_bronze) {\n        translate([0, 0, shield_thickness])\n            cylinder(h = 1, d = shield_diameter - 4);\n        \n        // Central boss (porpax)\n        translate([0, 0, shield_thickness + 1])\n            cylinder(h = 8, d1 = 25, d2 = 20);\n    }\n    \n    // Leather grip (antilabe) on back\n    color(color_leather) {\n        translate([grip_offset, 0, shield_thickness/2])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h = 35, d = 8);\n                    cylinder(h = 35, d = 4);\n                }\n    }\n    \n    // Decorative blazon - lambda for Lakedaimon\n    color(color_bronze) {\n        translate([0, 0, shield_thickness + 1.1])\n            scale([1, 1.5, 1])\n                rotate([0, 0, 180])\n                    linear_extrude(height = 1.5)\n                        polygon(points=[[0,0], [-8,0], [-8,4], [-3,4], [-3,12], [0,12]]);\n    }\n    \n    // Rivets around rim\n    color(color_bronze) {\n        for(i = [0:15]) {\n            rotate([0, 0, i * 360/16])\n                translate([shield_diameter/2 - rim_width/2, 0, shield_thickness + 1])\n                    cylinder(h = 1, d = 2);\n        }\n    }\n    \n    // Arm band (porpax) on back\n    color(color_bronze) {\n        translate([0, 0, shield_thickness - 2])\n            difference() {\n                cylinder(h = 4, d = 30);\n                cylinder(h = 4.2, d = 28);\n            }\n    }\n}\n\n// Render the shield\nhoplon();",
    "renders": true
  },
  {
    "historical_artifact": "pelte",
    "openscad_code": "// Pelte Shield - Historical Greek Cavalry Shield\n// Medium complexity realistic model with artifact-specific features\n\n// Shield parameters\nshield_diameter = 70;\nshield_thickness = 3;\nrim_width = 4;\ngrip_length = 40;\ngrip_diameter = 8;\n\n// Colors\nbronze_color = [0.72, 0.45, 0.2];\nleather_color = [0.4, 0.26, 0.13];\niron_color = [0.3, 0.3, 0.3];\n\n// Main shield body\nmodule shield_body() {\n    difference() {\n        // Main circular shield\n        color(bronze_color)\n        cylinder(h = shield_thickness, d = shield_diameter, $fn = 64);\n        \n        // Center boss recess\n        translate([0, 0, -0.1])\n        cylinder(h = shield_thickness + 0.2, d = 20, $fn = 32);\n        \n        // Decorative concentric rings\n        for(i = [1:3]) {\n            translate([0, 0, shield_thickness])\n            cylinder(h = 0.5, d = shield_diameter - (i * 10), $fn = 64);\n        }\n    }\n}\n\n// Central boss (umbo)\nmodule central_boss() {\n    union() {\n        // Main boss\n        translate([0, 0, shield_thickness])\n        color(bronze_color)\n        cylinder(h = 8, d = 18, $fn = 32);\n        \n        // Boss spike\n        translate([0, 0, shield_thickness + 8])\n        color(bronze_color)\n        cylinder(h = 5, d1 = 10, d2 = 4, $fn = 16);\n    }\n}\n\n// Reinforced rim\nmodule shield_rim() {\n    difference() {\n        // Outer rim\n        color(bronze_color)\n        cylinder(h = shield_thickness + 2, d = shield_diameter + rim_width, $fn = 64);\n        \n        // Cut out center\n        translate([0, 0, -0.1])\n        cylinder(h = shield_thickness + 2.2, d = shield_diameter, $fn = 64);\n    }\n}\n\n// Leather hand grip on back\nmodule hand_grip() {\n    translate([0, -15, -grip_diameter/2])\n    rotate([90, 0, 0])\n    color(leather_color)\n    cylinder(h = grip_length, d = grip_diameter, $fn = 16);\n    \n    // Grip reinforcements\n    for(pos = [-15, 15]) {\n        translate([0, -15, pos])\n        rotate([90, 0, 0])\n        color(iron_color)\n        cylinder(h = 4, d = 12, $fn = 16);\n    }\n}\n\n// Decorative pattern around shield face\nmodule decorative_pattern() {\n    // Greek key pattern segments\n    for(angle = [0:30:360]) {\n        rotate([0, 0, angle])\n        translate([shield_diameter/2 - rim_width - 5, 0, shield_thickness - 0.5])\n        color(bronze_color)\n        cube([10, 1, 1], center = true);\n    }\n    \n    // Small bronze studs\n    for(angle = [15:30:360]) {\n        rotate([0, 0, angle])\n        translate([shield_diameter/2 - rim_width - 2, 0, shield_thickness + 0.5])\n        color(bronze_color)\n        sphere(d = 2, $fn = 12);\n    }\n}\n\n// Assembly\nunion() {\n    // Shield components\n    shield_body();\n    shield_rim();\n    central_boss();\n    \n    // Decorative elements\n    decorative_pattern();\n    \n    // Back side components\n    translate([0, 0, shield_thickness])\n    rotate([180, 0, 0])\n    hand_grip();\n}",
    "renders": true
  },
  {
    "historical_artifact": "clipeus",
    "openscad_code": "$fn=64;\n\n// Colors\ncolor_bronze = \"#CD7F32\";\ncolor_dark_bronze = \"#8B4513\";\ncolor_gold = \"#D4AF37\";\ncolor_iron = \"#36454F\";\n\n// Main parameters\nshield_diameter = 60;\nshield_thickness = 4;\nboss_radius = 12;\nboss_height = 8;\nrim_width = 3;\ngrip_length = 60;\ngrip_diameter = 8;\n\nmodule clipeus_shield() {\n    difference() {\n        // Main shield body\n        union() {\n            // Shield disc\n            cylinder(h=shield_thickness, d=shield_diameter, center=true);\n            \n            // Reinforcement ring\n            translate([0, 0, shield_thickness/2])\n                cylinder(h=rim_width, d=shield_diameter+2, center=false);\n        }\n        \n        // Central boss cavity\n        translate([0, 0, -shield_thickness/2-1])\n            cylinder(h=boss_height+shield_thickness+2, r=boss_radius-2, center=false);\n    }\n}\n\nmodule central_boss() {\n    // Main boss dome\n    translate([0, 0, shield_thickness/2])\n        cylinder(h=boss_height, r=boss_radius, center=false);\n    \n    // Boss rim\n    translate([0, 0, shield_thickness/2])\n        cylinder(h=2, r=boss_radius+1, center=false);\n    \n    // Decorative concentric rings\n    for(i=[1:3]) {\n        translate([0, 0, shield_thickness/2+boss_height-1-i*1.5])\n            cylinder(h=0.5, r=boss_radius-i*1.5, center=false);\n    }\n}\n\nmodule decorative_medallions() {\n    // Four decorative medallions at cardinal points\n    angles = [0, 90, 180, 270];\n    \n    for(angle=angles) {\n        rotate([0, 0, angle])\n            translate([shield_diameter/2 - rim_width - 3, 0, shield_thickness/2])\n                union() {\n                    // Medallion base\n                    cylinder(h=2, r=3, center=false);\n                    \n                    // Medallion detail\n                    translate([0, 0, 2])\n                        cylinder(h=1, r=2.5, center=false);\n                    \n                    // Center dot\n                    translate([0, 0, 3])\n                        cylinder(h=0.5, r=1, center=false);\n                }\n    }\n}\n\nmodule grip_assembly() {\n    translate([0, 0, -shield_thickness/2-2])\n        rotate([90, 0, 0])\n            union() {\n                // Main grip bar\n                rotate([0, 90, 0])\n                    cylinder(h=grip_length, d=grip_diameter, center=true);\n                \n                // Grip supports\n                translate([grip_length/2-5, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=8, d=grip_diameter+2, center=true);\n                \n                translate([-grip_length/2+5, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=8, d=grip_diameter+2, center=true);\n                \n                // Reinforcement plates\n                translate([grip_length/2-5, 0, -grip_diameter/2-2])\n                    cube([8, grip_diameter+2, 2], center=true);\n                \n                translate([-grip_length/2+5, 0, -grip_diameter/2-2])\n                    cube([8, grip_diameter+2, 2], center=true);\n            }\n}\n\nmodule lightning_decoration() {\n    // Stylized lightning bolts between medallions\n    angles = [45, 135, 225, 315];\n    \n    for(angle=angles) {\n        rotate([0, 0, angle])\n            translate([shield_diameter/2 - rim_width - 8, 0, shield_thickness/2])\n                union() {\n                    // Lightning bolt segments\n                    translate([0, -1, 0])\n                        cube([8, 1, 1]);\n                    translate([2, 0, 0])\n                        cube([6, 1, 1]);\n                    translate([4, 1, 0])\n                        cube([4, 1, 1]);\n                }\n    }\n}\n\nmodule inscription_band() {\n    // Inscription band around inner edge\n    rotate([90, 0, 0])\n        translate([0, 0, shield_diameter/2 - rim_width - 6])\n            difference() {\n                // Band base\n                cylinder(h=1.5, r=shield_diameter/2 - rim_width - 6, center=true);\n                \n                // Decorative notches\n                for(i=[0:15]) {\n                    rotate([0, 0, i*22.5])\n                        translate([shield_diameter/2 - rim_width - 6, 0, 0])\n                            cube([2, 1, 3], center=true);\n                }\n            }\n}\n\n// Assemble the clipeus\ncolor(color_bronze) {\n    clipeus_shield();\n    central_boss();\n}\n\ncolor(color_gold) {\n    decorative_medallions();\n    lightning_decoration();\n    inscription_band();\n}\n\ncolor(color_iron) grip_assembly();",
    "renders": true
  },
  {
    "historical_artifact": "parma",
    "openscad_code": "// Parma Shield - Roman Legionary Scutum-style Shield\n// Based on historical artifacts from 1st-3rd century AD\n\n// Overall dimensions\nshield_width = 90;\nshield_height = 120;\nshield_thickness = 6;\nboss_radius = 20;\nboss_height = 15;\n\n// Colors\nshield_color = \"#8B4513\";  // Bronze age leather color\nboss_color = \"#B87333\";    // Polished bronze\ntrim_color = \"#D4AF37\";    // Gold trim\nrivet_color = \"#C0C0C0\";   // Silver rivets\n\nmodule shield_body() {\n    // Main oval shield body\n    difference() {\n        scale([1, 1.3, 0.1])\n            cylinder(h=shield_thickness, r=shield_width/2, $fn=50);\n        \n        // Inner cutout for handle space\n        translate([0, 0, -1])\n            scale([0.8, 0.8, 2])\n            cylinder(h=shield_thickness+2, r=shield_width/2-10, $fn=40);\n    }\n}\n\nmodule central_boss() {\n    // Central boss (umbo) for hand protection\n    color(boss_color) {\n        translate([0, 0, shield_thickness/2])\n            cylinder(h=boss_height, r=boss_radius, $fn=40);\n        \n        // Boss rim\n        translate([0, 0, shield_thickness/2])\n            cylinder(h=boss_height/2, r=boss_radius+2, $fn=40);\n    }\n    \n    // Rivets around boss\n    for(i = [0:11]) {\n        angle = i * 30;\n        color(rivet_color) {\n            translate([\n                cos(angle) * (boss_radius + 5),\n                sin(angle) * (boss_radius + 5),\n                shield_thickness/2 + boss_height\n            ])\n                sphere(r=1.5);\n        }\n    }\n}\n\nmodule decorative_strips() {\n    // Horizontal reinforcement strips\n    color(trim_color) {\n        for(y = [-30, 0, 30]) {\n            translate([0, y, shield_thickness/2])\n                cube([shield_width-10, 4, 2], center=true);\n        }\n    }\n    \n    // Vertical center strip\n    color(trim_color) {\n        translate([0, 0, shield_thickness/2])\n            cube([4, shield_height-20, 2], center=true);\n    }\n}\n\nmodule edge_reinforcement() {\n    // Metal edge binding\n    color(trim_color) {\n        translate([0, 0, shield_thickness/2])\n            difference() {\n                scale([1, 1.3, 0.1])\n                    cylinder(h=4, r=shield_width/2+3, $fn=50);\n                scale([1, 1.3, 0.1])\n                    cylinder(h=5, r=shield_width/2, $fn=50);\n            }\n    }\n}\n\nmodule handle_grip() {\n    // Interior handle grip\n    color(shield_color) {\n        translate([0, -20, -shield_thickness/2-5])\n            rotate([90, 0, 0])\n                cylinder(h=40, r=5, $fn=16);\n        \n        // Handle brackets\n        translate([-15, -20, -shield_thickness/2-5])\n            cube([5, 40, 10]);\n        translate([10, -20, -shield_thickness/2-5])\n            cube([5, 40, 10]);\n    }\n}\n\nmodule decorative_motifs() {\n    // Thunderbolt pattern common on legionary shields\n    color(trim_color) {\n        // Left thunderbolt\n        translate([-30, 0, shield_thickness/2+1])\n            for(i = [0:2]) {\n                rotate([0, 0, i*120-30])\n                    translate([0, 0, 0])\n                        cube([3, 15, 1]);\n            }\n        \n        // Right thunderbolt\n        translate([30, 0, shield_thickness/2+1])\n            for(i = [0:2]) {\n                rotate([0, 0, i*120+30])\n                    translate([0, 0, 0])\n                        cube([3, 15, 1]);\n            }\n    }\n}\n\n// Assembly\ncolor(shield_color) shield_body();\ncentral_boss();\ndecorative_strips();\nedge_reinforcement();\nhandle_grip();\ndecorative_motifs();",
    "renders": true
  },
  {
    "historical_artifact": "vase",
    "openscad_code": "$fa = 2; $fs = 0.5;\n\n// Greek Amphora-style vase, 6th century BCE\n// Overall height 80 mm, printable in two halves\n\n// Base color for terracotta\ncolor([0.72,0.45,0.25]) \ndifference() {\n    union() {\n        // Foot ring\n        translate([0,0,2])\n        cylinder(h=4, r1=18, r2=16, $fn=60);\n        \n        // Lower body\n        translate([0,0,6])\n        cylinder(h=20, r1=16, r2=22, $fn=60);\n        \n        // Bulge\n        translate([0,0,26])\n        cylinder(h=25, r1=22, r2=26, $fn=60);\n        \n        // Neck\n        translate([0,0,51])\n        cylinder(h=20, r1=26, r2=12, $fn=60);\n        \n        // Rim\n        translate([0,0,71])\n        cylinder(h=4, r1=12, r2=15, $fn=60);\n    }\n    \n    // Hollow out interior\n    translate([0,0,4])\n    cylinder(h=74, r1=14, r2=14, $fn=60);\n}\n\n// Handles (two opposing)\nmodule handle() {\n    color([0.68,0.42,0.23]) {\n        difference() {\n            // Handle body\n            rotate([90,0,0])\n            translate([0,0,-12])\n            cylinder(h=24, r1=3.5, r2=3.5, $fn=20);\n            \n            // Carve channel\n            rotate([90,0,0])\n            translate([0,0,-12])\n            cylinder(h=24, r1=2, r2=2, $fn=20);\n        }\n    }\n}\n\n// Attach handles\ntranslate([0,0,40])\nrotate([0,0,0])\ntranslate([26.5,0,0])\nhandle();\n\ntranslate([0,0,40])\nrotate([0,0,180])\ntranslate([26.5,0,0])\nhandle();\n\n// Decorative band around shoulder\ncolor([0.55,0.32,0.15])\nfor (i=[0:35]) {\n    rotate([0,0,i*10])\n    translate([24,0,37])\n    rotate([90,0,0])\n    cylinder(h=3, r1=1.5, r2=0.5, $fn=6);\n}\n\n// Meander pattern on neck\ncolor([0.50,0.28,0.12])\nmodule meander() {\n    for (x=[-9:3:9]) {\n        translate([x,0,60])\n        cube([2.5,2,1.5]);\n    }\n}\n\n// Repeat meander around neck\nfor (a=[0:30:359]) {\n    rotate([0,0,a])\n    translate([0,12.5,0])\n    meander();\n}\n\n// Small footed base disk\ncolor([0.60,0.35,0.18])\ntranslate([0,0,0])\ncylinder(h=2, r1=20, r2=20, $fn=60);",
    "renders": true
  },
  {
    "historical_artifact": "urn",
    "openscad_code": "// Historical Grecian Urn - Medium Complexity\n// Dimensions: ~70mm height, 3mm wall thickness for 3D printing\n\n// Base color for terracotta appearance\ncolor([0.72, 0.45, 0.20]) \n\n// Main urn body module\nmodule urn_body() {\n    // Base torus foot\n    translate([0, 0, 3])\n    rotate_extrude(angle = 360)\n    translate([22, 0, 0])\n    circle(r = 3);\n    \n    // Main body - tapered cylinder\n    translate([0, 0, 6])\n    cylinder(h = 35, r1 = 25, r2 = 20, $fn = 128);\n    \n    // Neck section\n    translate([0, 0, 41])\n    cylinder(h = 8, r1 = 20, r2 = 18, $fn = 128);\n    \n    // Rim lip\n    translate([0, 0, 49])\n    cylinder(h = 3, r1 = 19, r2 = 21, $fn = 128);\n}\n\n// Decorative handles\nmodule handles() {\n    // Left handle\n    translate([-25, 0, 25])\n    rotate([0, 90, 0])\n    rotate_extrude(angle = 180, $fn = 64)\n    translate([8, 0, 0])\n    circle(r = 2.5);\n    \n    // Right handle\n    translate([25, 0, 25])\n    rotate([0, -90, 0])\n    mirror([1, 0, 0])\n    rotate_extrude(angle = 180, $fn = 64)\n    translate([8, 0, 0])\n    circle(r = 2.5);\n}\n\n// Decorative pattern bands\nmodule decorative_bands() {\n    // Upper band with meander pattern\n    translate([0, 0, 38])\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([22, 0, 0])\n        cube([3, 1.5, 2], center = true);\n    }\n    \n    // Lower band with alternating rectangles\n    translate([0, 0, 15])\n    for(i = [0:23]) {\n        rotate([0, 0, i * 15])\n        translate([23.5, 0, 0])\n        cube([2, 1, 3], center = true);\n    }\n}\n\n// Lid with finial\nmodule lid() {\n    // Lid disk\n    translate([0, 0, 52])\n    cylinder(h = 4, r = 20.5, $fn = 128);\n    \n    // Conical top\n    translate([0, 0, 56])\n    cylinder(h = 6, r1 = 20.5, r2 = 15, $fn = 128);\n    \n    // Finial decoration\n    translate([0, 0, 62])\n    sphere(r = 3, $fn = 64);\n}\n\n// Interior hollow space for 3D printing\nmodule interior_hollow() {\n    // Main hollow\n    translate([0, 0, 6])\n    cylinder(h = 43, r1 = 22, r2 = 17, $fn = 128);\n    \n    // Neck hollow\n    translate([0, 0, 49])\n    cylinder(h = 3, r = 16, $fn = 128);\n}\n\n// Assembly\ndifference() {\n    union() {\n        urn_body();\n        handles();\n        decorative_bands();\n        lid();\n    }\n    \n    // Remove interior for hollow printing\n    interior_hollow();\n}",
    "renders": true
  },
  {
    "historical_artifact": "bowl",
    "openscad_code": "// Ancient Greek Black-Figure Kylix Bowl (ca. 530 BCE)\n// A drinking cup with characteristic wide shallow bowl and raised handles\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n$fn = 100;\n\n// Overall dimensions\nbowl_diameter = 80;\nbowl_height = 25;\nfoot_diameter = 35;\nfoot_height = 8;\nhandle_width = 8;\nhandle_height = 12;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main bowl body\nmodule bowl_body() {\n    difference() {\n        // Outer bowl shape\n        cylinder(h = bowl_height, d1 = bowl_diameter, d2 = bowl_diameter * 0.85);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n        cylinder(h = bowl_height - wall_thickness, d1 = bowl_diameter - 2 * wall_thickness, d2 = bowl_diameter * 0.85 - 2 * wall_thickness);\n    }\n}\n\n// Pedestal foot\nmodule foot() {\n    union() {\n        // Main foot\n        cylinder(h = foot_height, d1 = foot_diameter * 0.7, d2 = foot_diameter);\n        \n        // Hollow inside foot\n        difference() {\n            cylinder(h = foot_height, d1 = foot_diameter * 0.7, d2 = foot_diameter);\n            translate([0, 0, wall_thickness])\n            cylinder(h = foot_height - wall_thickness, d1 = foot_diameter * 0.7 - 2 * wall_thickness, d2 = foot_diameter - 2 * wall_thickness);\n        }\n    }\n}\n\n// Characteristic Greek handles (2 horizontal loops)\nmodule handle() {\n    difference() {\n        // Outer handle loop\n        rotate([90, 0, 0])\n        torus(major = handle_height/2, minor = handle_width/2);\n        \n        // Inner hole\n        rotate([90, 0, 0])\n        torus(major = handle_height/2 - wall_thickness, minor = handle_width/2 - wall_thickness);\n    }\n}\n\n// Decorative black-figure pattern band\nmodule decorative_band() {\n    color(\"darkslategray\")\n    translate([0, 0, bowl_height - 8])\n    difference() {\n        cylinder(h = 6, d = bowl_diameter * 0.9);\n        cylinder(h = 6, d = bowl_diameter * 0.9 - 2 * wall_thickness);\n    }\n}\n\n// Painted meander pattern (Greek key motif)\nmodule meander_pattern() {\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([bowl_diameter * 0.42, 0, bowl_height - 5])\n        color(\"black\")\n        cube([4, 2, 2]);\n    }\n}\n\n// Central tondo decoration (mythological scene)\nmodule tondo_deco() {\n    translate([0, 0, bowl_height - 10])\n    union() {\n        // Central circle\n        color(\"black\")\n        cylinder(h = 1, d = 20);\n        \n        // Decorative rays\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([8, 0, 0.5])\n            color(\"black\")\n            cube([6, 1, 1]);\n        }\n    }\n}\n\n// Assemble the complete kylix\nunion() {\n    // Main bowl\n    color(\"saddlebrown\")\n    bowl_body();\n    \n    // Foot pedestal\n    color(\"saddlebrown\")\n    translate([0, 0, -foot_height])\n    foot();\n    \n    // Attach handles on sides\n    color(\"saddlebrown\")\n    translate([bowl_diameter/2 - handle_width/2, 0, bowl_height/2])\n    handle();\n    \n    color(\"saddlebrown\")\n    translate([-bowl_diameter/2 + handle_width/2, 0, bowl_height/2])\n    mirror([1, 0, 0])\n    handle();\n    \n    // Decorative elements\n    decorative_band();\n    meander_pattern();\n    tondo_deco();\n}\n\n// Ensure flat bottom for printing\ntranslate([-bowl_diameter/2 - 5, -bowl_diameter/2 - 5, -foot_height - 1])\ncolor(\"lightgray\", 0.2)\ncube([bowl_diameter + 10, bowl_diameter + 10, 1]);",
    "renders": true
  },
  {
    "historical_artifact": "cup",
    "openscad_code": "// Ancient Greek Kylix (drinking cup) - 5th century BCE style\n// Dimensions: 90mm diameter, 45mm height\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main cup body module\nmodule kylix_body() {\n    color(\"cornsilk\") difference() {\n        // Outer bowl shape\n        cylinder(h=25, r1=45, r2=40, $fn=100);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h=27, r1=43.5-wall, r2=38.5-wall, $fn=100);\n    }\n}\n\n// Foot base module\nmodule kylix_foot() {\n    color(\"cornsilk\") union() {\n        // Main foot\n        cylinder(h=8, r1=35, r2=30, $fn=100);\n        \n        // Stem\n        translate([0, 0, 8])\n            cylinder(h=12, r1=8, r2=12, $fn=50);\n    }\n}\n\n// Handle module - creates one handle\nmodule handle(side) {\n    color(\"cornsilk\") {\n        // Handle attachment points\n        translate([side * 40, 0, 15])\n            sphere(r=4, $fn=20);\n        \n        // Curved handle\n        translate([side * 50, 0, 15])\n            rotate([90, 0, side * 90])\n            difference() {\n                // Outer handle\n                rotate_extrude(angle=90, $fn=50)\n                    translate([10, 0, 0])\n                    circle(r=3, $fn=20);\n                \n                // Inner cavity\n                rotate_extrude(angle=90, $fn=50)\n                    translate([10, 0, 0])\n                    circle(r=1.5, $fn=20);\n            }\n        \n        // Handle attachment points\n        translate([side * 40, 0, 15])\n            sphere(r=4, $fn=20);\n    }\n}\n\n// Decorative meander pattern on rim\nmodule meander_pattern() {\n    color(\"saddlebrown\") {\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n                translate([44.5, 0, 24])\n                    cube([2, 3, 1], center=true);\n            \n            rotate([0, 0, i+7.5])\n                translate([44.5, 0, 24])\n                    cube([3, 2, 1], center=true);\n        }\n    }\n}\n\n// Central tondo decoration (typical black-figure scene)\nmodule tondo_decoration() {\n    color(\"saddlebrown\") {\n        // Central medallion\n        translate([0, 0, 0.5])\n            cylinder(h=0.5, r=20, $fn=100);\n        \n        // Decorative border\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n                translate([18, 0, 1])\n                    cube([2, 1, 1], center=true);\n        }\n        \n        // Stylized figure (simplified hoplite warrior)\n        translate([0, 0, 1]) {\n            // Body\n            cylinder(h=0.5, r=8, $fn=6);\n            \n            // Shield\n            translate([-8, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(h=0.5, r=4, $fn=20);\n            \n            // Spear\n            translate([5, 0, 0])\n                rotate([90, 0, 45])\n                cube([12, 0.5, 0.5], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Assemble the cup\n    translate([0, 0, 20])\n        kylix_body();\n    \n    // Add foot\n    kylix_foot();\n    \n    // Add handles\n    handle(1);   // Right handle\n    handle(-1);  // Left handle\n    \n    // Add decorations\n    meander_pattern();\n    tondo_decoration();\n}",
    "renders": true
  },
  {
    "historical_artifact": "plate",
    "openscad_code": "// Ancient Greek Black-Figure Plate (Kylix style)\n// 6th century BCE Athenian pottery replica\n\n// Main plate dimensions\nplate_diameter = 80;\nplate_height = 12;\nwall_thickness = 3;\nbase_ring_height = 5;\n\n// Color definitions\nceramic_color = [0.15, 0.12, 0.08];  // Black figure pottery\nfigure_color = [0.9, 0.85, 0.75];   // Orange-red clay showing through\n\n// Main plate body\nmodule plate_body() {\n    // Base ring for stability\n    difference() {\n        cylinder(h=base_ring_height, d1=plate_diameter-20, d2=plate_diameter-15, $fn=64);\n        cylinder(h=base_ring_height+1, d1=plate_diameter-22, d2=plate_diameter-17, $fn=64);\n    }\n    \n    // Main bowl shape\n    translate([0, 0, base_ring_height]) {\n        difference() {\n            cylinder(h=plate_height, d1=plate_diameter-15, d2=plate_diameter, $fn=128);\n            // Hollow interior\n            translate([0, 0, wall_thickness]) {\n                cylinder(h=plate_height-wall_thickness+1, d1=plate_diameter-15-wall_thickness*2, d2=plate_diameter-wall_thickness*2, $fn=128);\n            }\n        }\n    }\n}\n\n// Decorative meander pattern border\nmodule meander_pattern() {\n    for(i=[0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([plate_diameter/2-8, 0, plate_height-1]) {\n                cube([6, 2, 1]);\n            }\n            translate([plate_diameter/2-8, 3, plate_height-1]) {\n                cube([2, 6, 1]);\n            }\n        }\n    }\n}\n\n// Greek key pattern on rim\nmodule greek_key() {\n    for(i=[0:23]) {\n        rotate([0, 0, i*15]) {\n            translate([plate_diameter/2-3, 0, plate_height-0.5]) {\n                cube([1, 3, 0.5]);\n            }\n        }\n    }\n}\n\n// Black figure scene - warrior and horse\nmodule black_figure_scene() {\n    // Warrior figure (simplified silhouette)\n    translate([0, -10, plate_height-2]) {\n        scale([0.1, 0.1, 0.2]) {\n            // Body\n            cube([20, 15, 5]);\n            // Shield\n            translate([3, 8, 0]) {\n                cylinder(h=6, d=10);\n            }\n            // Spear\n            translate([15, -5, 0]) {\n                rotate([0, 0, 45]) {\n                    cube([2, 30, 2]);\n                }\n            }\n        }\n    }\n    \n    // Horse figure\n    translate([15, 5, plate_height-2]) {\n        scale([0.08, 0.08, 0.15]) {\n            // Body\n            cube([40, 20, 8]);\n            // Head\n            translate([35, 5, 0]) {\n                cube([15, 8, 6]);\n            }\n            // Legs\n            for(x=[-5, 15]) {\n                for(y=[-8, 8]) {\n                    translate([x, y, -10]) {\n                        cube([3, 3, 10]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Central boss decoration\nmodule central_boss() {\n    translate([0, 0, plate_height-3]) {\n        difference() {\n            cylinder(h=3, d=20, $fn=32);\n            cylinder(h=4, d=18, $fn=32);\n        }\n        translate([0, 0, 0.5]) {\n            // Gorgon head (simplified)\n            for(i=[0:5]) {\n                rotate([0, 0, i*60]) {\n                    translate([8, 0, 0]) {\n                        cube([2, 1, 1]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete plate\ncolor(ceramic_color) {\n    plate_body();\n    \n    // Apply orange-red clay color to interior\n    color(figure_color) {\n        intersection() {\n            plate_body();\n            translate([0, 0, base_ring_height+wall_thickness]) {\n                cylinder(h=plate_height-wall_thickness, d=plate_diameter-wall_thickness*2-2, $fn=128);\n            }\n        }\n    }\n    \n    // Add decorative elements\n    color(ceramic_color) {\n        meander_pattern();\n        greek_key();\n        black_figure_scene();\n        central_boss();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "jar",
    "openscad_code": "// Historical Canopic Jar of Hapi - Medium complexity realistic style\n// Based on New Kingdom period Egyptian canopic jars (18th-20th Dynasty)\n// Designed for 3D printing with 1.2mm wall thickness\n\n// Overall dimensions: 80mm height, 35mm diameter\n\n// Main jar body with slight taper\nmodule jar_body() {\n    difference() {\n        // Main tapered body\n        cylinder(h = 55, r1 = 17.5, r2 = 15, $fn = 64);\n        \n        // Hollow interior with 1.2mm walls\n        translate([0, 0, 1.2])\n            cylinder(h = 53.8, r1 = 16.3, r2 = 13.8, $fn = 64);\n    }\n}\n\n// Decorative rim at top\nmodule decorative_rim() {\n    difference() {\n        // Main rim\n        cylinder(h = 4, r = 19, $fn = 64);\n        \n        // Inner cutout\n        cylinder(h = 4.2, r = 17.5, $fn = 64);\n    }\n}\n\n// Hapi's head - baboon form lid\nmodule hapi_head_lid() {\n    color(\"BurlyWood\")\n    union() {\n        // Base of lid\n        cylinder(h = 3, r = 17.2, $fn = 64);\n        \n        // Neck transition\n        translate([0, 0, 3])\n            cylinder(h = 5, r1 = 17, r2 = 12, $fn = 64);\n        \n        // Head form (simplified baboon)\n        translate([0, 0, 8])\n            scale([1, 1.2, 1.3])\n                sphere(r = 12, $fn = 32);\n        \n        // Snout\n        translate([0, 7, 8])\n            scale([0.7, 0.5, 0.5])\n                sphere(r = 6, $fn = 16);\n        \n        // Ears\n        translate([-10, -2, 12])\n            rotate([0, 0, -30])\n                scale([0.3, 0.2, 0.4])\n                    sphere(r = 5, $fn = 16);\n        translate([10, -2, 12])\n            rotate([0, 0, 30])\n                scale([0.3, 0.2, 0.4])\n                    sphere(r = 5, $fn = 16);\n    }\n}\n\n// Hieroglyphic inscription columns\nmodule hieroglyphic_columns() {\n    color(\"GoldenRod\")\n    for(i = [1:4]) {\n        rotate([0, 0, i * 90])\n            translate([16, 0, 25])\n                for(j = [0:3]) {\n                    translate([0, 0, j * 10])\n                        cube([0.5, 1, 2], center = true);\n                }\n    }\n}\n\n// Decorative bands\nmodule decorative_bands() {\n    color(\"GoldenRod\")\n    union() {\n        // Upper band\n        translate([0, 0, 48])\n            cylinder(h = 1.5, r = 18, $fn = 64);\n        \n        // Middle band\n        translate([0, 0, 30])\n            cylinder(h = 1.5, r = 17, $fn = 64);\n        \n        // Lower band\n        translate([0, 0, 12])\n            cylinder(h = 1.5, r = 16, $fn = 64);\n    }\n}\n\n// Lotus petal decoration at base\nmodule lotus_base() {\n    color(\"BurlyWood\")\n    difference() {\n        // Base flare\n        cylinder(h = 3, r1 = 19, r2 = 17.5, $fn = 64);\n        \n        // Petal cutouts\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([17, 0, 1.5])\n                    rotate([0, 90, 0])\n                        cylinder(h = 4, r = 2, $fn = 16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main jar\n    color(\"BurlyWood\")\n    union() {\n        translate([0, 0, 3])\n            jar_body();\n        \n        translate([0, 0, 58])\n            decorative_rim();\n        \n        translate([0, 0, 0])\n            lotus_base();\n        \n        // Apply decoration\n        decorative_bands();\n        hieroglyphic_columns();\n    }\n    \n    // Lid\n    translate([0, 0, 62])\n        hapi_head_lid();\n}",
    "renders": true
  },
  {
    "historical_artifact": "pot",
    "openscad_code": "// Ancient Minoan-style terracotta storage jar (pithos) - 1600 BCE\n// Height: 85mm, Diameter: 65mm (scaled for 3D printing)\n\nmodule rim() {\n    // Thick rolled rim characteristic of Minoan pithoi\n    translate([0, 0, 80])\n    difference() {\n        cylinder(h=8, d1=58, d2=62, $fn=64);\n        cylinder(h=10, d1=52, d2=56, $fn=64);\n    }\n}\n\nmodule handles() {\n    // Two horizontal lug handles for rope threading\n    for (i=[0:1]) {\n        rotate([0, 0, i*180])\n        translate([32, 0, 55])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=12, d=10, $fn=12);\n            translate([0, 0, 2])\n            cylinder(h=12, d=6, $fn=12);\n        }\n    }\n}\n\nmodule body() {\n    // Main bulbous body with slight taper\n    difference() {\n        // Outer shape\n        cylinder(h=75, d1=65, d2=50, $fn=64);\n        \n        // Hollow interior\n        translate([0, 0, 5])\n        cylinder(h=75, d1=55, d2=40, $fn=64);\n    }\n}\n\nmodule base() {\n    // Flat base with slight foot\n    difference() {\n        cylinder(h=8, d1=52, d2=48, $fn=64);\n        translate([0, 0, 2])\n        cylinder(h=8, d1=48, d2=44, $fn=64);\n    }\n}\n\nmodule decorative_bands() {\n    // Incised horizontal bands typical of Minoan pottery\n    color(\"DarkOrange\")\n    for (band=[1:3]) {\n        translate([0, 0, band*20+5])\n        difference() {\n            cylinder(h=1.5, d1=64-band*2, d2=64-band*2, $fn=64);\n            cylinder(h=2, d1=56-band*2, d2=56-band*2, $fn=64);\n        }\n    }\n}\n\nmodule spiral_decoration() {\n    // Spiral motif common in Minoan art\n    color(\"SaddleBrown\")\n    for (angle=[0:60:360]) {\n        rotate([0, 0, angle])\n        translate([28, 0, 35])\n        rotate([90, 0, 0])\n        for (i=[0:8]) {\n            translate([i*0.5, 0, 0])\n            rotate([0, i*15, 0])\n            scale([0.8, 0.8, 0.8])\n            sphere(d=2, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Terracotta base color\n    color(\"Peru\") {\n        base();\n        body();\n        rim();\n        handles();\n    }\n    \n    // Decorative elements\n    decorative_bands();\n    spiral_decoration();\n}",
    "renders": true
  },
  {
    "historical_artifact": "amphora",
    "openscad_code": "// Historical Greek Amphora - Medium Complexity\n// Scale: 80mm height, 3D printable with 2mm walls\n\n$fn = 32;\n\n// Main colors\ncolor_bronze = [150/255, 100/255, 50/255];\ncolor_clay = [180/255, 120/255, 80/255];\n\n// Overall dimensions\nheight = 80;\nmax_diameter = 45;\nbase_diameter = 25;\nneck_diameter = 12;\n\n// Wall thickness\nwall = 2;\n\nmodule amphora_body() {\n    difference() {\n        // Outer body\n        union() {\n            // Base\n            cylinder(h=5, d1=base_diameter, d2=base_diameter);\n            \n            // Lower body - rounded\n            translate([0, 0, 5])\n                scale([1, 1, 0.7])\n                    sphere(d=max_diameter);\n            \n            // Upper body taper\n            translate([0, 0, 5 + max_diameter*0.7 - 10])\n                cylinder(h=25, d1=max_diameter*0.9, d2=neck_diameter);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=height+2, d=neck_diameter-wall, $fn=24);\n    }\n}\n\nmodule handles() {\n    for(side = [-1, 1]) {\n        translate([side * (max_diameter/2 - 5), 0, 25]) {\n            rotate([0, 90, 90 * side]) {\n                color(color_bronze)\n                difference() {\n                    // Handle curve\n                    rotate_extrude(angle=180, $fn=16)\n                        translate([8, 0, 0])\n                            circle(r=3);\n                    \n                    // Hollow handle\n                    rotate_extrude(angle=180, $fn=16)\n                        translate([8, 0, 0])\n                            circle(r=1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule neck_and_rim() {\n    translate([0, 0, height-15]) {\n        difference() {\n            // Neck\n            cylinder(h=15, d=neck_diameter);\n            \n            // Hollow neck\n            translate([0, 0, -1])\n                cylinder(h=17, d=neck_diameter-wall);\n            \n            // Rim flare\n            translate([0, 0, 15])\n                cylinder(h=3, d1=neck_diameter, d2=neck_diameter+6);\n            \n            // Hollow rim\n            translate([0, 0, 14.5])\n                cylinder(h=5, d=neck_diameter+2);\n        }\n    }\n}\n\nmodule decorative_bands() {\n    // Painted bands - typical Greek geometric decoration\n    color([0.9, 0.9, 0.9]) {\n        // Upper band\n        translate([0, 0, 35])\n            cylinder(h=2, d=max_diameter+1);\n        \n        // Middle band\n        translate([0, 0, 25])\n            cylinder(h=2, d=max_diameter+1);\n        \n        // Lower band\n        translate([0, 0, 15])\n            cylinder(h=2, d=max_diameter*0.8+1);\n    }\n}\n\nmodule base_decoration() {\n    // Raised ring base decoration\n    color(color_bronze)\n    translate([0, 0, 2])\n        cylinder(h=1, d=base_diameter+2);\n}\n\n// Assembly\ncolor(color_clay) {\n    amphora_body();\n    neck_and_rim();\n}\n\nhandles();\ndecorative_bands();\nbase_decoration();",
    "renders": true
  },
  {
    "historical_artifact": "krater",
    "openscad_code": "// Krater - Greek mixing bowl for wine and water\n// Classical Greek period (5th century BCE)\n\n$fn = 64; // Smooth curves for 3D printing\n\n// Main dimensions (scaled for 3D printing)\nkrater_height = 80;\nbase_diameter = 45;\nbody_diameter = 70;\nrim_diameter = 55;\nwall_thickness = 2;\n\n// Base module with flaring foot\nmodule base() {\n    color([0.82, 0.71, 0.55]) // Terracotta color\n    difference() {\n        // Flaring base\n        cylinder(h=12, d1=base_diameter, d2=base_diameter*1.2);\n        \n        // Hollow out base\n        translate([0, 0, -1])\n            cylinder(h=14, d1=base_diameter-wall_thickness*2, d2=base_diameter*1.2-wall_thickness*2);\n    }\n    \n    // Base ring decoration\n    for(i = [1:3]) {\n        translate([0, 0, i*3])\n            difference() {\n                cylinder(h=0.5, d=base_diameter+i*2);\n                cylinder(h=0.5, d=base_diameter+i*2-1);\n            }\n    }\n}\n\n// Body with characteristic ovoid shape\nmodule body() {\n    color([0.82, 0.71, 0.55])\n    difference() {\n        // Main body - ovoid shape\n        hull() {\n            cylinder(h=krater_height*0.5, d=body_diameter);\n            translate([0, 0, krater_height*0.4])\n                cylinder(h=krater_height*0.3, d=body_diameter*0.9);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            hull() {\n                cylinder(h=krater_height*0.5-wall_thickness*2, d=body_diameter-wall_thickness*2);\n                translate([0, 0, krater_height*0.4])\n                    cylinder(h=krater_height*0.3, d=body_diameter*0.9-wall_thickness*2);\n            }\n    }\n    \n    // Horizontal decorative bands\n    for(band = [1:5]) {\n        translate([0, 0, krater_height*0.15 + band*6])\n            difference() {\n                cylinder(h=1, d=body_diameter+1);\n                cylinder(h=1, d=body_diameter-1);\n            }\n    }\n}\n\n// Handles - characteristic volute handles\nmodule handles() {\n    color([0.82, 0.71, 0.55])\n    for(side = [0, 1]) {\n        rotate([0, 0, side*180])\n        translate([body_diameter/2 + 5, 0, krater_height*0.5]) {\n            // Main handle loop\n            rotate([0, 90, 0])\n                difference() {\n                    rotate_extrude(angle=180, $fn=20)\n                        translate([8, 0, 0])\n                            circle(r=2);\n                    rotate_extrude(angle=180, $fn=20)\n                        translate([8, 0, 0])\n                            circle(r=1);\n                }\n            \n            // Volute scroll at top\n            translate([0, 0, 15])\n                for(i = [0:3]) {\n                    rotate([0, 0, i*90])\n                        translate([5, 0, 0])\n                            rotate([90, 0, 0])\n                                cylinder(h=3, r=1);\n                }\n        }\n    }\n}\n\n// Rim with overhanging lip\nmodule rim() {\n    color([0.82, 0.71, 0.55])\n    difference() {\n        // Overhanging rim\n        translate([0, 0, krater_height*0.8])\n            cylinder(h=10, d1=rim_diameter, d2=rim_diameter*1.1);\n        \n        // Hollow rim\n        translate([0, 0, krater_height*0.8])\n            cylinder(h=10, d1=rim_diameter-wall_thickness*2, d2=rim_diameter*1.1-wall_thickness*2);\n    }\n}\n\n// Decorative meander pattern around rim\nmodule meander_pattern() {\n    color([0.75, 0.6, 0.45]) // Slightly darker for contrast\n    for(i = [0:23]) {\n        rotate([0, 0, i*15])\n            translate([rim_diameter/2 - 3, 0, krater_height*0.83])\n                cube([2, 2, 1], center=true);\n        rotate([0, 0, i*15 + 7.5])\n            translate([rim_diameter/2 - 3, 1.5, krater_height*0.83])\n                cube([2, 2, 1], center=true);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    base();\n    translate([0, 0, 12]) body();\n    rim();\n    handles();\n    meander_pattern();\n}",
    "renders": true
  },
  {
    "historical_artifact": "kylix",
    "openscad_code": "// Kylix - Ancient Greek drinking cup (c. 500 BCE)\n// Realistic style, medium complexity\n\n// Overall dimensions\ncup_diameter = 80;\ncup_height = 35;\nstem_height = 20;\nbase_diameter = 40;\nwall_thickness = 2;\n\n// Colors\nterra_cotta = [0.8, 0.4, 0.2];\nblack_figure = [0.1, 0.1, 0.1];\n\nmodule kylix() {\n    // Base and stem\n    color(terra_cotta) {\n        // Foot base\n        difference() {\n            cylinder(h=5, d1=base_diameter, d2=base_diameter, $fn=64);\n            translate([0, 0, -0.1])\n                cylinder(h=5.2, d1=base_diameter-4, d2=base_diameter-4, $fn=64);\n        }\n        \n        // Stem\n        translate([0, 0, 5])\n            cylinder(h=stem_height, d1=12, d2=8, $fn=32);\n    }\n    \n    // Main bowl\n    color(terra_cotta) {\n        difference() {\n            // Outer bowl\n            translate([0, 0, stem_height+5])\n                cylinder(h=cup_height, d1=cup_diameter, d2=cup_diameter*0.9, $fn=128);\n            \n            // Inner cavity\n            translate([0, 0, stem_height+5])\n                cylinder(h=cup_height-1, d1=cup_diameter-wall_thickness*2, d2=cup_diameter*0.9-wall_thickness*2, $fn=128);\n        }\n        \n        // Rim lip\n        translate([0, 0, stem_height+cup_height+5])\n            cylinder(h=2, d1=cup_diameter, d2=cup_diameter+1, $fn=128);\n    }\n    \n    // Horizontal handles (2)\n    color(terra_cotta) {\n        for(i=[0,1]) {\n            rotate([0, 0, i*180])\n            translate([cup_diameter/2-10, 0, stem_height+cup_height/2+5])\n            rotate([90, 0, 90])\n            difference() {\n                // Handle body\n                scale([1, 0.8, 1])\n                cylinder(h=25, d1=8, d2=6, $fn=16);\n                \n                // Handle hole\n                translate([5, 0, 0])\n                scale([1, 0.9, 1])\n                cylinder(h=26, d1=4, d2=3, $fn=12);\n            }\n        }\n    }\n    \n    // Black figure decoration - warrior scene\n    color(black_figure) {\n        // Central tondo (circular decoration)\n        translate([0, 0, stem_height+cup_height+7])\n        rotate([180, 0, 0])\n        linear_extrude(0.5)\n        difference() {\n            circle(d=30, $fn=64);\n            circle(d=28, $fn=64);\n        }\n        \n        // Warrior figure (simplified silhouette)\n        translate([0, 0, stem_height+cup_height+7.5])\n        rotate([180, 0, 0])\n        linear_extrude(0.3)\n        union() {\n            // Body\n            translate([0, -5, 0])\n            scale([1, 1.5, 1])\n            circle(d=8, $fn=32);\n            \n            // Shield\n            translate([-6, -3, 0])\n            circle(d=4, $fn=16);\n            \n            // Spear\n            translate([5, -8, 0])\n            rotate([45, 0, 0])\n            square([1, 12]);\n        }\n        \n        // Decorative bands\n        translate([0, 0, stem_height+cup_height+4])\n        rotate([180, 0, 0])\n        linear_extrude(0.5) {\n            // Meander pattern on rim\n            for(i=[0:11]) {\n                rotate(i*30) {\n                    translate([cup_diameter/2-4, 0, 0])\n                    square([2, 1]);\n                    translate([cup_diameter/2-4, 2, 0])\n                    square([1, 2]);\n                }\n            }\n        }\n    }\n    \n    // Interior decoration - concentric circles\n    color(terra_cotta) {\n        for(i=[1:3]) {\n            translate([0, 0, stem_height+cup_height+6-i*0.5])\n            rotate([180, 0, 0])\n            linear_extrude(0.2)\n            difference() {\n                circle(d=30-i*8, $fn=64);\n                circle(d=30-i*8-1, $fn=64);\n            }\n        }\n    }\n}\n\n// Render the kylix\nkylix();",
    "renders": true
  },
  {
    "historical_artifact": "rhyton",
    "openscad_code": "// Rhyton - Ancient Greek drinking horn\n// Medium complexity realistic style\n\n$fn = 50;\nwall_thickness = 1.5;\n\nmodule horn_body() {\n    // Main horn shape - conical with slight curve\n    union() {\n        // Outer horn\n        color(\"burlywood\")\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h = 25, r1 = 8, r2 = 12);\n            translate([5, -2, 20])\n                rotate([15, 0, 0])\n                cylinder(h = 30, r1 = 12, r2 = 15);\n        }\n        \n        // Inner cavity for liquid\n        color(\"burlywood\")\n        translate([0, 0, wall_thickness])\n            hull() {\n                translate([0, 0, 0])\n                    cylinder(h = 25 - wall_thickness, r1 = 8 - wall_thickness, r2 = 12 - wall_thickness);\n                translate([5, -2, 20])\n                    rotate([15, 0, 0])\n                    cylinder(h = 30 - wall_thickness, r1 = 12 - wall_thickness, r2 = 15 - wall_thickness);\n            }\n    }\n}\n\nmodule animal_head() {\n    // Ram head at the end of horn\n    color(\"burlywood\")\n    union() {\n        // Head base\n        translate([8, -5, 45])\n            rotate([15, 0, -20])\n            sphere(8);\n        \n        // Muzzle\n        translate([12, -7, 45])\n            rotate([15, 0, -20])\n            scale([1.2, 0.8, 0.8])\n            sphere(6);\n        \n        // Horns\n        color(\"peru\")\n        translate([5, -3, 50])\n            rotate([0, 30, -30])\n            cylinder(h = 12, r1 = 2, r2 = 0.5);\n        translate([5, -7, 50])\n            rotate([0, -30, -30])\n            cylinder(h = 12, r1 = 2, r2 = 0.5);\n        \n        // Eyes\n        color(\"black\")\n        translate([10, -5, 48])\n            sphere(1);\n        translate([10, -9, 48])\n            sphere(1);\n    }\n}\n\nmodule decorative_bands() {\n    // Geometric patterns on horn\n    color(\"saddlebrown\")\n    for(i = [1:5]) {\n        translate([0, 0, i * 8])\n            difference() {\n                cylinder(h = 2, r = 9.5 + i * 0.3);\n                cylinder(h = 2.2, r = 8.5 + i * 0.3);\n            }\n    }\n}\n\nmodule base_ring() {\n    // Reinforcement ring at drinking end\n    color(\"saddlebrown\")\n    translate([0, 0, -2])\n        cylinder(h = 3, r = 9);\n}\n\nmodule spout() {\n    // Animal mouth as spout\n    color(\"burlywood\")\n    difference() {\n        translate([14, -7, 45])\n            rotate([15, 0, -20])\n            scale([2, 1, 1])\n            cylinder(h = 5, r = 2);\n        translate([16, -7, 45])\n            rotate([15, 0, -20])\n            scale([2, 1, 1])\n            cylinder(h = 7, r = 1);\n    }\n}\n\n// Assembly\nunion() {\n    horn_body();\n    animal_head();\n    decorative_bands();\n    base_ring();\n    spout();\n}",
    "renders": true
  },
  {
    "historical_artifact": "chalice",
    "openscad_code": "// Medieval Chalice - Historical Artifact\n// Based on 14th century ecclesiastical metalwork\n\n$fn = 50;\n\n// Overall dimensions: 80mm height, 45mm diameter at widest\nmodule chalice() {\n    color(\"goldenrod\") {\n        union() {\n            // Base - hexagonal foot with decorative elements\n            base();\n            \n            // Stem with knop (central bulb)\n            stem();\n            \n            // Cup with everted rim\n            cup();\n            \n            // Decorative nodes around stem\n            decorative_nodes();\n        }\n    }\n}\n\n// Hexagonal base with engraved cross pattern\nmodule base() {\n    translate([0, 0, 5]) {\n        difference() {\n            // Main hexagonal base\n            cylinder(h = 10, d1 = 45, d2 = 40, center = true);\n            \n            // Central depression\n            cylinder(h = 11, d1 = 15, d2 = 12, center = true);\n            \n            // Engraved cross grooves\n            for(i = [0:2]) {\n                rotate([0, 0, i * 60]) {\n                    translate([0, 0, -5.5]) {\n                        cube([3, 25, 12], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ornate stem with central knop\nmodule stem() {\n    // Lower stem\n    translate([0, 0, 15]) {\n        cylinder(h = 15, d = 8);\n    }\n    \n    // Central knop (bulbous decorative element)\n    translate([0, 0, 22.5]) {\n        sphere(d = 18);\n    }\n    \n    // Upper stem\n    translate([0, 0, 30]) {\n        cylinder(h = 15, d = 8);\n    }\n}\n\n// Deep cup with everted rim and decorative band\nmodule cup() {\n    // Main cup body\n    translate([0, 0, 52.5]) {\n        difference() {\n            cylinder(h = 25, d1 = 35, d2 = 40);\n            \n            // Hollow interior\n            translate([0, 0, -1]) {\n                cylinder(h = 27, d1 = 30, d2 = 35);\n            }\n        }\n    }\n    \n    // Everted rim\n    translate([0, 0, 77.5]) {\n        difference() {\n            cylinder(h = 5, d1 = 40, d2 = 45);\n            \n            // Interior curve\n            translate([0, 0, -1]) {\n                cylinder(h = 7, d1 = 35, d2 = 40);\n            }\n        }\n    }\n    \n    // Decorative band around cup\n    translate([0, 0, 62.5]) {\n        difference() {\n            cylinder(h = 3, d = 38, center = true);\n            \n            // Engraved dots pattern\n            for(i = [0:11]) {\n                rotate([0, 0, i * 30]) {\n                    translate([17, 0, 0]) {\n                        sphere(d = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Small decorative nodes around stem\nmodule decorative_nodes() {\n    // Nodes on knop\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([9, 0, 22.5]) {\n                sphere(d = 3);\n            }\n        }\n    }\n    \n    // Nodes at stem transitions\n    translate([0, 0, 15]) {\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([5, 0, 0]) {\n                    sphere(d = 2);\n                }\n            }\n        }\n    }\n    \n    translate([0, 0, 30]) {\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([5, 0, 0]) {\n                    sphere(d = 2);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete chalice\nchalice();",
    "renders": true
  },
  {
    "historical_artifact": "tureen",
    "openscad_code": "// Historical Tureen (18th century French style)\n// Designed for 3D printing with 1.2mm walls and no overhangs\n\n// Overall dimensions: 80mm diameter, 60mm height\n$fa = 2;\n$fs = 0.5;\n\n// Main tureen body\nmodule tureen_body() {\n    difference() {\n        // Main bowl - slightly oval for historical accuracy\n        scale([1, 0.9, 1])\n        cylinder(h = 35, r = 35, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        scale([1, 0.9, 1])\n        cylinder(h = 34, r = 32, $fn = 64);\n        \n        // Rim chamfer\n        translate([0, 0, 34])\n        scale([1, 0.9, 1])\n        cylinder(h = 3, r1 = 35, r2 = 32, $fn = 64);\n    }\n}\n\n// Decorative rim with repeating pattern\nmodule decorative_rim() {\n    color(\"silver\")\n    difference() {\n        // Outer rim\n        translate([0, 0, 34])\n        scale([1, 0.9, 1])\n        cylinder(h = 5, r = 37, $fn = 128);\n        \n        // Inner cutout\n        translate([0, 0, 34])\n        scale([1, 0.9, 1])\n        cylinder(h = 6, r = 35, $fn = 128);\n    }\n    \n    // Decorative beads around rim\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([36, 0, 36.5])\n        sphere(r = 1.5, $fn = 16);\n    }\n}\n\n// Handles on sides (scroll design)\nmodule handle() {\n    color(\"silver\")\n    union() {\n        // Main scroll body\n        translate([0, 0, 20])\n        rotate([90, 0, 0])\n        scale([0.8, 1, 0.8])\n        cylinder(h = 25, r1 = 6, r2 = 4, $fn = 16);\n        \n        // Scroll curl\n        translate([0, 12, 20])\n        rotate([90, 0, 0])\n        scale([1, 1.2, 1])\n        sphere(r = 6, $fn = 16);\n    }\n}\n\n// Lid with finial\nmodule lid() {\n    color(\"silver\")\n    union() {\n        // Main lid - domed shape\n        translate([0, 0, 39])\n        scale([1, 0.9, 1])\n        sphere(r = 35, $fn = 64);\n        \n        // Cut underside hollow\n        translate([0, 0, 39])\n        scale([1, 0.9, 1])\n        difference() {\n            sphere(r = 35, $fn = 64);\n            translate([0, 0, -5])\n            sphere(r = 32, $fn = 64);\n        }\n        \n        // Lid rim\n        translate([0, 0, 39])\n        scale([1, 0.9, 1])\n        cylinder(h = 3, r = 35, $fn = 64);\n        \n        // Decorative finial (acorn shape)\n        translate([0, 0, 74])\n        union() {\n            // Acorn cup\n            cylinder(h = 4, r = 4, $fn = 16);\n            // Acorn nut\n            translate([0, 0, 4])\n            sphere(r = 3.5, $fn = 16);\n        }\n    }\n}\n\n// Base/foot ring\nmodule foot_ring() {\n    color(\"silver\")\n    difference() {\n        // Main foot\n        cylinder(h = 8, r1 = 30, r2 = 28, $fn = 64);\n        \n        // Inner hollow\n        translate([0, 0, 2])\n        cylinder(h = 8, r1 = 26, r2 = 24, $fn = 64);\n    }\n}\n\n// Decorative crest on side\nmodule crest() {\n    color(\"silver\")\n    translate([0, -31, 20])\n    rotate([0, 90, 0])\n    linear_extrude(height = 2)\n    polygon(points = [\n        [0, 0], [3, 5], [6, 0], [3, -5]\n    ]);\n}\n\n// Assembly\ntranslate([0, 0, 8])\ntureen_body();\n\ntranslate([0, 0, 0])\nfoot_ring();\n\ntranslate([0, 0, 0])\ndecorative_rim();\n\ntranslate([35, 0, 0])\nhandle();\n\ntranslate([-35, 0, 0])\nmirror([1, 0, 0])\nhandle();\n\ntranslate([0, 0, 0])\nlid();\n\n// Add crests on both sides\ntranslate([0, 31, 20])\nrotate([0, 0, 180])\ncrest();\n\ntranslate([0, -31, 20])\ncrest();",
    "renders": true
  },
  {
    "historical_artifact": "ring",
    "openscad_code": "// Iron Age Celtic Torc-style Ring\n// Based on archaeological finds from La Tène culture (450-1 BCE)\n// Features twisted rope pattern and terminal knobs\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Main ring parameters\nring_outer_diameter = 60;\nring_inner_diameter = 45;\nring_height = 12;\nwall_thickness = 3;\n\n// Terminal knobs\nknob_diameter = 14;\nknob_height = 10;\n\n// Rope pattern parameters\nrope_twists = 8;\nrope_depth = 1.5;\n\n// Colors\ncolor_iron = [0.4, 0.35, 0.3];\ncolor_dark_iron = [0.3, 0.25, 0.2];\n\nmodule twisted_rope_pattern() {\n    // Create twisted rope effect around ring\n    for (i = [0:rope_twists-1]) {\n        rotate([0, 0, i * (360/rope_twists)]) {\n            translate([0, 0, -ring_height/2]) {\n                // Twisted strands\n                rotate([0, 0, 45]) {\n                    linear_extrude(height=ring_height, twist=20) {\n                        difference() {\n                            circle(d=ring_outer_diameter - wall_thickness);\n                            circle(d=ring_inner_diameter + wall_thickness);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_grooves() {\n    // Add parallel grooves for La Tène style decoration\n    for (i = [1:3]) {\n        rotate([0, 90, 0]) {\n            translate([0, 0, -ring_height/2 + i * (ring_height/4)]) {\n                difference() {\n                    cylinder(h=ring_outer_diameter, d=ring_outer_diameter - wall_thickness/2, center=true);\n                    cylinder(h=ring_outer_diameter + 2, d=ring_outer_diameter - wall_thickness/2 - rope_depth, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule terminal_knob(position) {\n    // Celtic-style terminal knobs\n    translate(position) {\n        color(color_dark_iron) {\n            // Main knob body\n            sphere(d=knob_diameter);\n            \n            // Decorative ridges\n            translate([0, 0, -knob_height/4]) {\n                cylinder(h=knob_height/2, d=knob_diameter * 0.8);\n            }\n            \n            // Knob top detail\n            translate([0, 0, knob_height/3]) {\n                sphere(d=knob_diameter * 0.6);\n            }\n        }\n    }\n}\n\nmodule ring_body() {\n    // Create the main torc ring\n    rotate_extrude(angle=350) {  // Small gap for 3D printing support\n        translate([(ring_outer_diameter + ring_inner_diameter)/4, 0, 0]) {\n            difference() {\n                // Outer profile\n                square([ring_outer_diameter/2 - ring_inner_diameter/2, ring_height], center=true);\n                \n                // Inner hollow\n                translate([0, 0, ring_height/2 - wall_thickness]) {\n                    cube([ring_outer_diameter/2 - ring_inner_diameter/2 - wall_thickness*2, ring_height - wall_thickness*2, wall_thickness*2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ncolor(color_iron) {\n    difference() {\n        union() {\n            // Ring body with twisted rope texture\n            ring_body();\n            \n            // Add rope pattern details\n            twisted_rope_pattern();\n            \n            // Terminal knobs at ends\n            terminal_knob([0, (ring_outer_diameter + ring_inner_diameter)/4, 0]);\n            terminal_knob([0, -(ring_outer_diameter + ring_inner_diameter)/4, 0]);\n        }\n        \n        // Remove bottom face for 3D printing support\n        translate([0, 0, -ring_height/2 - 1]) {\n            cube([ring_outer_diameter + 10, ring_outer_diameter + 10, 2], center=true);\n        }\n    }\n}\n\n// Add decorative grooves\ncolor(color_dark_iron) {\n    decorative_grooves();\n}\n\n// Scale to appropriate size\nscale([1, 1, 1]) { }",
    "renders": true
  },
  {
    "historical_artifact": "necklace",
    "openscad_code": "// Ancient Egyptian Broad Collar Necklace - Usekh\n// Based on New Kingdom period (1550-1070 BCE) examples\n\n// Overall dimensions\ncollar_width = 90;\ncollar_height = 45;\nbead_diameter = 2.2;\nstring_thickness = 1.5;\n\n// Color definitions\ngold_color = [0.83, 0.69, 0.22];\nlapis_color = [0.05, 0.15, 0.5];\ncarnelian_color = [0.7, 0.15, 0.1];\nturquoise_color = [0.25, 0.88, 0.82];\n\n// Main collar structure\nmodule usekh_collar() {\n    difference() {\n        // Main collar body - tapered trapezoid\n        color(gold_color)\n        linear_extrude(height = 3)\n        polygon(points=[\n            [-collar_width/2, 0],\n            [collar_width/2, 0],\n            [collar_width/2 - 10, collar_height],\n            [-collar_width/2 + 10, collar_height]\n        ]);\n        \n        // Inner cutout for neck\n        translate([0, 15, -1])\n        cylinder(h=5, r=10, $fn=32);\n    }\n}\n\n// Decorative bead rows\nmodule bead_row(y_pos, bead_count, bead_color) {\n    row_width = collar_width - 20;\n    for (i = [0:bead_count-1]) {\n        x_pos = -row_width/2 + (i * row_width/(bead_count-1));\n        translate([x_pos, y_pos, 2])\n        color(bead_color)\n        sphere(d=bead_diameter, $fn=16);\n    }\n}\n\n// Lotus flower pendant\nmodule lotus_pendant() {\n    translate([0, collar_height + 8, 0])\n    union() {\n        // Central disk\n        color(gold_color)\n        cylinder(h=2, r=8, $fn=32);\n        \n        // Petals\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([0, 6, 1])\n            color(lapis_color)\n            scale([1, 1.5, 0.5])\n            sphere(d=6, $fn=16);\n        }\n    }\n}\n\n// Hieroglyphic border pattern\nmodule hieroglyph_border() {\n    border_y = 5;\n    for (i = [0:11]) {\n        x_pos = -collar_width/2 + 5 + (i * 7);\n        translate([x_pos, border_y, 3.5])\n        color(gold_color)\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r=1.5, $fn=6);\n    }\n}\n\n// String ties\nmodule string_ties() {\n    // Left tie\n    translate([-collar_width/2, 10, 1.5])\n    rotate([90, 0, 0])\n    color(gold_color)\n    cylinder(h=30, r=string_thickness, $fn=16);\n    \n    // Right tie\n    translate([collar_width/2, 10, 1.5])\n    rotate([90, 0, 0])\n    color(gold_color)\n    cylinder(h=30, r=string_thickness, $fn=16);\n}\n\n// Falcon terminals (Horus protection)\nmodule falcon_terminals() {\n    // Left falcon\n    translate([-collar_width/2 + 5, 0, 1.5])\n    union() {\n        color(gold_color)\n        cylinder(h=5, r=4, $fn=32);\n        translate([0, 0, 5])\n        sphere(d=8, $fn=32);\n    }\n    \n    // Right falcon\n    mirror([1, 0, 0])\n    translate([-collar_width/2 + 5, 0, 1.5])\n    union() {\n        color(gold_color)\n        cylinder(h=5, r=4, $fn=32);\n        translate([0, 0, 5])\n        sphere(d=8, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    usekh_collar();\n    \n    // Multiple rows of beads\n    bead_row(8, 15, lapis_color);\n    bead_row(12, 13, carnelian_color);\n    bead_row(16, 11, turquoise_color);\n    bead_row(20, 9, lapis_color);\n    bead_row(24, 7, carnelian_color);\n    bead_row(28, 5, turquoise_color);\n    \n    lotus_pendant();\n    hieroglyph_border();\n    string_ties();\n    falcon_terminals();\n}",
    "renders": true
  },
  {
    "historical_artifact": "bracelet",
    "openscad_code": "// Roman Legionnaire Signet Bracelet - 1st Century AD Style\n// Heavy bronze cuff with legionary eagle and unit markings\n\n$fn = 100;  // Smooth curves for realistic appearance\n\n// Main bronze color\ncolor([0.72, 0.52, 0.35]) {\n\n// Main cuff body - oval torus section\nmodule cuff_body() {\n    difference() {\n        // Outer oval cuff\n        scale([1.2, 1, 1]) \n        rotate_extrude(angle=360)\n        translate([35, 0, 0])\n        square([4, 12], center=true);\n        \n        // Inner opening\n        scale([1.15, 0.95, 1]) \n        rotate_extrude(angle=360)\n        translate([35, 0, 0])\n        square([4, 10], center=true);\n    }\n}\n\n// Legionary eagle emblem\nmodule eagle_emblem() {\n    translate([42, 0, 6])\n    rotate([90, 0, 0])\n    union() {\n        // Eagle body\n        cylinder(h=8, r1=3, r2=2);\n        \n        // Eagle head\n        translate([0, 0, 8])\n        sphere(r=2);\n        \n        // Wings spread\n        for (angle = [45, -45]) {\n            rotate([0, 0, angle])\n            translate([2.5, 0, 4])\n            scale([1, 0.3, 0.1])\n            sphere(r=4);\n        }\n        \n        // Laurel wreath base\n        translate([0, 0, -2])\n        rotate_extrude(angle=360)\n        translate([3.5, 0, 0])\n        circle(r=0.5);\n    }\n}\n\n// Unit inscription panel\nmodule inscription_panel() {\n    translate([-42, 0, 5])\n    rotate([0, 90, 0])\n    union() {\n        // Panel background\n        cube([20, 8, 1]);\n        \n        // \"LEG X FRET\" inscription (Legio X Fretensis)\n        for (i = [0:3]) {\n            translate([i*4.5 - 7, 0, 1])\n            linear_extrude(height=0.5)\n            text(\"X\", size=3, valign=\"center\", halign=\"center\");\n        }\n    }\n}\n\n// Decorative rivets around cuff\nmodule decorative_rivets() {\n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([39, 0, 2])\n        cylinder(h=2, r=1.5);\n    }\n}\n\n// Hinge detail on side\nmodule hinge_detail() {\n    translate([0, 30, 3])\n    union() {\n        // Hinge barrels\n        for (offset = [-3, 3]) {\n            translate([offset, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=6, r=1);\n        }\n        \n        // Hinge pin\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=7, r=0.5);\n    }\n}\n\n// Battle damage/wear marks\nmodule battle_wear() {\n    // Random nicks and scratches\n    for (i = [1:8]) {\n        rotate([0, 0, i*45])\n        translate([38 + i, 0, 1])\n        sphere(r=0.5);\n    }\n    \n    // Edge wear\n    rotate([0, 0, 15])\n    translate([40, 5, 6])\n    cube([2, 3, 1]);\n}\n\n// Assembly\nunion() {\n    cuff_body();\n    eagle_emblem();\n    inscription_panel();\n    decorative_rivets();\n    hinge_detail();\n    battle_wear();\n}\n}",
    "renders": true
  },
  {
    "historical_artifact": "earring",
    "openscad_code": "// Ancient Egyptian Scarab Earrings (New Kingdom style, c. 1550-1070 BCE)\n// Based on artifacts found in Tutankhamun's tomb\n\n// Overall dimensions: 65mm height, 25mm width\n$fn = 64;\n\n// Main earring hook with ancient Egyptian proportions\nmodule earring_hook() {\n    color(\"gold\") {\n        // Hook curve\n        difference() {\n            union() {\n                // Main hook body\n                rotate([90, 0, 0])\n                    cylinder(h = 2, r1 = 1.5, r2 = 1.5);\n                \n                // Hook curve\n                translate([0, 0, 0])\n                    rotate([90, 0, 0])\n                        rotate_extrude(angle = 200)\n                            translate([12, 0, 0])\n                                circle(r = 1.5);\n            }\n            // Hollow center for wire\n            rotate([90, 0, 0])\n                cylinder(h = 3, r1 = 0.8, r2 = 0.8);\n        }\n    }\n}\n\n// Lotus flower decorative element (symbol of rebirth)\nmodule lotus_flower() {\n    color(\"gold\") {\n        // Central bud\n        translate([0, 0, 0])\n            cylinder(h = 3, r1 = 4, r2 = 3);\n        \n        // Petals array\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([3.5, 0, 1.5])\n                    rotate([0, 90, 0])\n                        cylinder(h = 2, r1 = 2.5, r2 = 1);\n        }\n    }\n}\n\n// Sacred scarab beetle (protective amulet)\nmodule scarab_body() {\n    color(\"lapis\") {\n        // Main scarab body\n        scale([1.2, 1, 0.8])\n            sphere(r = 8);\n        \n        // Head\n        translate([9, 0, 0])\n            scale([1.5, 0.8, 0.8])\n                sphere(r = 3);\n        \n        // Wing elytra lines\n        for (i = [-1, 1]) {\n            translate([0, i * 2, 7.5])\n                rotate([90, 0, 0])\n                    cube([12, 0.5, 2]);\n        }\n    }\n}\n\n// Hieroglyphic cartouche border\nmodule cartouche_border() {\n    color(\"gold\") {\n        // Oval frame\n        difference() {\n            scale([1.3, 1.7, 0.5])\n                cylinder(h = 1.5, r1 = 12, r2 = 12);\n            scale([1.2, 1.6, 0.6])\n                cylinder(h = 2, r1 = 11, r2 = 11);\n        }\n        \n        // Decorative dots along border\n        for (i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([15, 0, 1])\n                    sphere(r = 0.8);\n        }\n    }\n}\n\n// Eye of Horus protective symbol\nmodule eye_of_horus() {\n    color(\"turquoise\") {\n        // Main eye shape\n        translate([0, 0, 0.5])\n            scale([1.5, 1, 1])\n                sphere(r = 3);\n        \n        // Pupil\n        translate([-1, 0, 1])\n            sphere(r = 1);\n        \n        // Eyebrow\n        translate([0, 3, 1])\n            rotate([90, 0, 0])\n                cylinder(h = 0.5, r1 = 3, r2 = 2);\n        \n        // Teardrop marking\n        translate([2, -2, 0.5])\n            scale([0.5, 1.5, 1])\n                sphere(r = 1.5);\n    }\n}\n\n// Main earring assembly\nmodule single_earring() {\n    // Hook at top\n    translate([0, 0, 30])\n        earring_hook();\n    \n    // Lotus flower connector\n    translate([0, 0, 20])\n        lotus_flower();\n    \n    // Cartouche with scarab\n    translate([0, 0, 0])\n        cartouche_border();\n    translate([0, 0, 1])\n        scarab_body();\n    \n    // Eye of Horus dangle below\n    translate([0, 0, -15])\n        eye_of_horus();\n}\n\n// Create pair of earrings mirrored\ntranslate([15, 0, 0])\n    single_earring();\ntranslate([-15, 0, 0])\n    mirror([1, 0, 0])\n        single_earring();",
    "renders": true
  },
  {
    "historical_artifact": "pendant",
    "openscad_code": "// Egyptian Ankh Pendant - Medium Complexity Historical Artifact\n// Overall size: 50mm height, 30mm width, 5mm thickness\n\n// Color definitions\nankh_color = \"gold\";\nloop_color = \"bronze\";\n\n// Main Ankh body\nmodule ankh_body() {\n    color(ankh_color)\n    union() {\n        // Horizontal crossbar\n        translate([0, 20, 0])\n            cube([30, 8, 5], center=true);\n        \n        // Vertical stem\n        translate([0, 0, 0])\n            cube([8, 50, 5], center=true);\n        \n        // Top loop (D-shaped)\n        difference() {\n            // Main loop body\n            translate([0, 36, 0])\n                rotate([0, 0, 0])\n                cylinder(h=5, r=12, center=true);\n            \n            // Cutout for D-shape\n            translate([0, 24, -1])\n                cube([24, 24, 7], center=true);\n        }\n    }\n}\n\n// Hieroglyphic decorations on crossbar\nmodule hieroglyphs() {\n    color(\"black\")\n    for (i = [-10:5:10]) {\n        translate([i, 20, 2.6])\n            rotate([0, 0, 45])\n            scale([0.3, 0.3, 1])\n            cylinder(h=1, r=2, $fn=4);\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color(ankh_color)\n    for (i = [0:12:359]) {\n        rotate([0, 0, i])\n        translate([0, 36, 2.6])\n            sphere(r=1);\n    }\n}\n\n// Bail loop for necklace attachment\nmodule bail() {\n    color(loop_color)\n    difference() {\n        // Main bail\n        translate([0, 48, 0])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=3, r2=3, center=true);\n        \n        // Hole for necklace\n        translate([0, 48, 0])\n            rotate([90, 0, 0])\n            cylinder(h=10, r1=1.5, r2=1.5, center=true);\n    }\n}\n\n// Relief decorations on stem\nmodule stem_decorations() {\n    color(ankh_color)\n    union() {\n        // Lotus pattern on left\n        for (i = [-15:8:15]) {\n            translate([-6, i, 2.6])\n                scale([0.5, 0.5, 1])\n                sphere(r=2);\n        }\n        \n        // Papyrus pattern on right\n        for (i = [-15:8:15]) {\n            translate([6, i, 2.6])\n                scale([0.5, 0.5, 1])\n                cube([2, 3, 1], center=true);\n        }\n    }\n}\n\n// Base plate for structural integrity\nmodule base_plate() {\n    color(ankh_color)\n    translate([0, 0, -2.5])\n        cube([32, 52, 1], center=true);\n}\n\n// Assembly\nunion() {\n    base_plate();\n    ankh_body();\n    hieroglyphs();\n    border_pattern();\n    stem_decorations();\n    bail();\n}",
    "renders": true
  },
  {
    "historical_artifact": "brooch",
    "openscad_code": "// Viking Oval Brooch (Pair Style) - 9th-10th Century Historical Artifact\n// Based on archaeological finds from Birka, Sweden\n// Overall dimensions: 70mm x 45mm x 12mm\n\n// Main body parameters\nbody_length = 70;\nbody_width = 45;\nbody_thickness = 8;\n\n// Pin and hinge parameters\npin_length = 40;\npin_diameter = 2.5;\nhinge_diameter = 8;\nhinge_thickness = 3;\n\n// Decorative elements\nboss_radius = 6;\nboss_height = 3;\nnubs = 12;\nnub_radius = 1.5;\nnub_height = 1;\n\n// Geometric pattern parameters\nline_width = 1;\nline_depth = 0.5;\ncircle_radius = 3;\n\n// Color definitions\nbronze_color = [0.72, 0.45, 0.2];\npatina_color = [0.2, 0.4, 0.2];\n\n// Main brooch module\nmodule viking_brooch() {\n    // Main oval body with slight dome\n    color(bronze_color) {\n        difference() {\n            // Base oval body\n            scale([1, 0.65, 1])\n                cylinder(h=body_thickness, r=body_length/2, $fn=64);\n            \n            // Hollow center\n            translate([0, 0, -0.1])\n                scale([1, 0.65, 1])\n                    cylinder(h=body_thickness+0.2, r=body_length/2-6, $fn=64);\n        }\n        \n        // Upper dome\n        translate([0, 0, body_thickness])\n            scale([1, 0.65, 0.3])\n                cylinder(h=4, r=body_length/2, $fn=64);\n    }\n    \n    // Central boss\n    color(bronze_color) {\n        translate([0, 0, body_thickness+4])\n            cylinder(h=boss_height, r=boss_radius, $fn=32);\n    }\n    \n    // Decorative nubs around edge\n    color(bronze_color) {\n        for(i = [0:nubs-1]) {\n            angle = i * 360 / nubs;\n            x = cos(angle) * (body_length/2 - 8);\n            y = sin(angle) * (body_length/2 - 8) * 0.65;\n            \n            translate([x, y, 0])\n                cylinder(h=nub_height+body_thickness, r=nub_radius, $fn=16);\n        }\n    }\n    \n    // Geometric incised decoration\n    color(patina_color) {\n        // Triangular patterns\n        for(i = [0:5]) {\n            angle = i * 60;\n            x1 = cos(angle) * 15;\n            y1 = sin(angle) * 15 * 0.65;\n            x2 = cos(angle+30) * 25;\n            y2 = sin(angle+30) * 25 * 0.65;\n            \n            translate([0, 0, body_thickness-0.1])\n                linear_extrude(height=line_depth+0.1)\n                    polygon(points=[[0,0], [x1,y1], [x2,y2]]);\n        }\n        \n        // Concentric circles\n        for(r = [10:5:25]) {\n            translate([0, 0, body_thickness-0.1])\n                scale([1, 0.65, 1])\n                    cylinder(h=line_depth+0.1, r1=r, r2=r-line_width, $fn=64);\n        }\n    }\n    \n    // Pin hinge mechanism\n    color(bronze_color) {\n        // Hinge tubes\n        translate([-body_length/2 + 8, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=hinge_thickness, r=hinge_diameter/2, $fn=16);\n        \n        translate([-body_length/2 + 12, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=hinge_thickness, r=hinge_diameter/2, $fn=16);\n        \n        // Pin\n        translate([-body_length/2 + 10, 0, -hinge_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=pin_length, r=pin_diameter/2, $fn=8);\n    }\n    \n    // Attachment loops on back\n    color(bronze_color) {\n        translate([body_length/2 - 15, 0, -body_thickness])\n            difference() {\n                cube([8, 15, 3], center=true);\n                translate([0, 0, -0.1])\n                    cube([10, 11, 3.2], center=true);\n            }\n        \n        translate([-body_length/2 + 15, 0, -body_thickness])\n            difference() {\n                cube([8, 15, 3], center=true);\n                translate([0, 0, -0.1])\n                    cube([10, 11, 3.2], center=true);\n            }\n    }\n}\n\n// Generate the brooch\nviking_brooch();",
    "renders": true
  },
  {
    "historical_artifact": "crown",
    "openscad_code": "// Medieval European Crown - Realistic Style\n// Based on 15th century European royal crown designs\n\n$fn = 48; // Smooth curves for 3D printing\n\n// Main crown assembly\nmodule crown() {\n    // Base ring structure\n    difference() {\n        // Outer ring\n        cylinder(h=8, d=55, center=true);\n        // Inner ring (hollow)\n        translate([0, 0, 1])\n            cylinder(h=10, d=48, center=true);\n    }\n    \n    // Upper decorative band with jewels\n    translate([0, 0, 4.5])\n    difference() {\n        cylinder(h=3, d=58, center=true);\n        translate([0, 0, -1])\n            cylinder(h=5, d=54, center=true);\n    }\n    \n    // Eight main arches (fleur-de-lis style)\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n        translate([0, 24, 6])\n        rotate([0, 0, 0])\n        fleur_de_lis();\n    }\n    \n    // Central cross\n    translate([0, 0, 18])\n    central_cross();\n    \n    // Jewel settings around base\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([25, 0, 2])\n        scale([1, 1, 0.6])\n        sphere(d=4);\n    }\n    \n    // Pearl drops\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n        translate([22, 0, 0])\n        pearl_drop();\n    }\n}\n\n// Fleur-de-lis decorative element\nmodule fleur_de_lis() {\n    color(\"gold\")\n    union() {\n        // Central spike\n        translate([0, 0, 0])\n            cylinder(h=12, d1=4, d2=0, center=false);\n        \n        // Left petal\n        translate([-2, 0, 0])\n            rotate([0, -15, -30])\n            cylinder(h=8, d1=3, d2=0, center=false);\n        \n        // Right petal\n        translate([2, 0, 0])\n            rotate([0, 15, 30])\n            cylinder(h=8, d1=3, d2=0, center=false);\n    }\n}\n\n// Central cross with jewels\nmodule central_cross() {\n    color(\"gold\")\n    union() {\n        // Vertical beam\n        translate([0, 0, 0])\n            cube([3, 2, 12], center=true);\n        \n        // Horizontal beam\n        translate([0, 0, 4])\n            cube([2, 8, 3], center=true);\n        \n        // Central jewel\n        color(\"red\")\n        translate([0, 0, 7])\n            sphere(d=3);\n        \n        // Four smaller jewels\n        color(\"blue\")\n        for(i=[-1:1:1]) {\n            for(j=[-1:1:1]) {\n                if(abs(i)+abs(j) == 1)\n                translate([i*2, j*2, 7])\n                    sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Pearl drop decoration\nmodule pearl_drop() {\n    color(\"white\")\n    union() {\n        // Chain link\n        translate([0, 0, -3])\n            rotate([90, 0, 0])\n            cylinder(h=1.5, d=2, center=true);\n        \n        // Pearl\n        translate([0, 0, -6])\n            sphere(d=3);\n    }\n}\n\n// Render the crown\ncrown();",
    "renders": true
  },
  {
    "historical_artifact": "tiara",
    "openscad_code": "// Historical Tiara - Realistic Style, Medium Complexity\n// Based on Ancient Greek gold diadems (4th-3rd century BCE)\n\n// Main parameters\n$fn = 30;\n\n// Color constants\nGOLD = [0.83, 0.69, 0.22];\nSILVER = [0.75, 0.75, 0.75];\nGEM_BLUE = [0.0, 0.2, 0.6];\n\n// Base band\nmodule base_band() {\n    color(GOLD) difference() {\n        // Main curved band\n        rotate_extrude(angle = 160, $fn = 100)\n            translate([55, 0, 0])\n                square([3, 6], center = true);\n        \n        // Inner hollow for weight reduction\n        rotate_extrude(angle = 160, $fn = 100)\n            translate([56, 0, 0])\n                square([1, 4], center = true);\n    }\n}\n\n// Decorative leaf pattern\nmodule leaf() {\n    color(GOLD) {\n        translate([0, 0, 3])\n            scale([1, 1.5, 0.3])\n                sphere(d = 6);\n        \n        // Leaf veins\n        for(i = [-1:1]) {\n            rotate([0, 0, i * 30])\n                translate([0, 0, 3.5])\n                    scale([0.1, 1, 0.1])\n                        cube([1, 2, 1], center = true);\n        }\n    }\n}\n\n// Palmette decoration\nmodule palmette() {\n    color(GOLD) {\n        // Central element\n        translate([0, 0, 8])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d1 = 3, d2 = 0, center = true);\n        \n        // Leaves around palmette\n        for(angle = [0:45:180]) {\n            rotate([0, 0, angle])\n                translate([2.5, 0, 8])\n                    rotate([0, 90, 0])\n                        scale([0.5, 1, 0.3])\n                            cylinder(h = 3, d = 2);\n        }\n    }\n}\n\n// Lotus flower decoration\nmodule lotus() {\n    color(GOLD) {\n        // Central cup\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 3, d = 4, d1 = 3, d2 = 5, center = true);\n        \n        // Petals\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n                translate([2, 0, 5])\n                    rotate([0, 90, 0])\n                        scale([0.8, 1.5, 0.2])\n                            cylinder(h = 2.5, d = 2);\n        }\n    }\n}\n\n// Gem setting\nmodule gem_setting() {\n    color(SILVER) {\n        // Setting base\n        translate([0, 0, 7])\n            cylinder(h = 1, d = 4, center = true);\n        \n        // Prongs\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n                translate([1.5, 0, 7.5])\n                    cube([0.5, 0.5, 2], center = true);\n        }\n        \n        // Gem\n        color(GEM_BLUE)\n            translate([0, 0, 8.5])\n                sphere(d = 3);\n    }\n}\n\n// Central decorative panel\nmodule central_panel() {\n    translate([0, 0, 0]) {\n        // Central palmette\n        palmette();\n        \n        // Lotus flowers on sides\n        translate([-15, 0, 0]) lotus();\n        translate([15, 0, 0]) lotus();\n        \n        // Gems between decorations\n        translate([-7, 0, 0]) gem_setting();\n        translate([7, 0, 0]) gem_setting();\n    }\n}\n\n// Side decorations\nmodule side_decorations() {\n    for(side = [-1:2:1]) {\n        translate([side * 25, 0, 0]) {\n            // Leaves\n            for(i = [0:3]) {\n                rotate([0, 0, side * (20 + i * 15)])\n                    translate([0, 0, 4 + i * 0.5])\n                        leaf();\n            }\n            \n            // Small gems\n            for(i = [0:2]) {\n                translate([side * (5 + i * 5), 0, 6])\n                    gem_setting();\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, -20, 0]) {\n    // Base band\n    base_band();\n    \n    // Decorations\n    central_panel();\n    side_decorations();\n}",
    "renders": true
  },
  {
    "historical_artifact": "amulet",
    "openscad_code": "// Ancient Egyptian Djed-Pillar Amulet (c. 1550-1077 BCE)\n// Symbol of stability and endurance, commonly placed on mummies\n\n// Overall dimensions: 60mm height, 20mm width, 6mm thickness\n\n$fn = 32;\n\n// Main pillar body\nmodule djed_pillar() {\n    color(\"gold\") {\n        union() {\n            // Central pillar shaft\n            translate([0, 0, 0])\n                cube([12, 6, 45], center = true);\n            \n            // Lower horizontal bars (4 levels)\n            for (i = [0:3]) {\n                translate([0, 0, -15 + i * 10])\n                    cube([20, 6, 3], center = true);\n            }\n            \n            // Upper crossbar with rounded ends\n            translate([0, 0, 22])\n                cube([20, 6, 4], center = true);\n            \n            // Side pillars\n            translate([-8, 0, 10])\n                cube([3, 6, 20], center = true);\n            translate([8, 0, 10])\n                cube([3, 6, 20], center = true);\n            \n            // Capitals on side pillars\n            translate([-8, 0, 21])\n                sphere(d = 4);\n            translate([8, 0, 21])\n                sphere(d = 4);\n        }\n    }\n}\n\n// Decorative hieroglyphic inscriptions\nmodule inscriptions() {\n    color(\"black\") {\n        // Central ankh symbol\n        translate([0, 3.5, 5])\n            rotate([90, 0, 0])\n            linear_extrude(1)\n            text(\"☥\", size = 6, halign = \"center\", valign = \"center\");\n        \n        // Side was-scepter symbols\n        translate([-7, 3.5, 0])\n            rotate([90, 0, 0])\n            linear_extrude(1)\n            text(\"𓋹\", size = 4, halign = \"center\", valign = \"center\");\n            \n        translate([7, 3.5, 0])\n            rotate([90, 0, 0])\n            linear_extrude(1)\n            text(\"𓋹\", size = 4, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Suspension loop for wearing\nmodule suspension_loop() {\n    color(\"gold\") {\n        translate([0, 0, 25])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 5, r1 = 6, r2 = 6, center = true);\n                cylinder(h = 6, r1 = 3, r2 = 3, center = true);\n            }\n    }\n}\n\n// Base platform with lotus pattern\nmodule base() {\n    color(\"lapis\") {\n        translate([0, 0, -25])\n            cube([16, 6, 2], center = true);\n        \n        // Lotus petals around base\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([8, 0, -25])\n                cylinder(h = 2, r1 = 2, r2 = 0, center = true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    base();\n    djed_pillar();\n    inscriptions();\n    suspension_loop();\n}",
    "renders": true
  },
  {
    "historical_artifact": "talisman",
    "openscad_code": "// Ancient Egyptian Ankh Talisman\n// Based on New Kingdom period ankh amulets (1550-1077 BCE)\n\n// Overall dimensions\nankh_height = 70;\nankh_width = 35;\nankh_thickness = 5;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main ankh cross\nmodule ankh_cross() {\n    color(\"gold\") {\n        difference() {\n            // Main cross shape\n            union() {\n                // Vertical stem\n                translate([0, -ankh_height/2 + 15, 0])\n                    cube([ankh_width/3, ankh_height - 15, ankh_thickness], center=true);\n                \n                // Horizontal bar\n                translate([0, 0, 0])\n                    cube([ankh_width, ankh_width/3, ankh_thickness], center=true);\n                \n                // Top loop (shenu)\n                translate([0, ankh_height/2 - 10, 0])\n                    cylinder(h=ankh_thickness, r=ankh_width/2 - 2, center=true);\n                \n                // Fill loop sides\n                translate([0, ankh_height/2 - 10, 0])\n                    cube([ankh_width - 4, ankh_width/2 - 2, ankh_thickness], center=true);\n            }\n            \n            // Remove center of loop\n            translate([0, ankh_height/2 - 10, 0])\n                cylinder(h=ankh_thickness + 2, r=ankh_width/3, center=true);\n        }\n    }\n}\n\n// Hieroglyphic detail border\nmodule hieroglyphic_border() {\n    color(\"gold\") {\n        // Border along edges\n        for(i = [-1, 1]) {\n            // Vertical borders\n            translate([i * (ankh_width/2 - 1), 0, ankh_thickness/2 + 0.5])\n                cube([wall_thickness, ankh_height - 15, wall_thickness]);\n            \n            // Horizontal border details\n            for(j = [-1, 0, 1]) {\n                translate([j * 10, 0, ankh_thickness/2 + 0.5])\n                    cube([wall_thickness, wall_thickness, wall_thickness]);\n            }\n        }\n    }\n}\n\n// Decorative lotus pattern\nmodule lotus_decoration() {\n    color(\"gold\") {\n        // Lotus flowers at cardinal points\n        translate([0, ankh_height/2 - 15, ankh_thickness/2 + 1])\n            cylinder(h=1, r=3);\n        \n        translate([0, -ankh_height/2 + 15, ankh_thickness/2 + 1])\n            cylinder(h=1, r=3);\n        \n        translate([ankh_width/2 - 3, 0, ankh_thickness/2 + 1])\n            cylinder(h=1, r=3);\n        \n        translate([-ankh_width/2 + 3, 0, ankh_thickness/2 + 1])\n            cylinder(h=1, r=3);\n    }\n}\n\n// Suspension loop for wearing\nmodule suspension_loop() {\n    color(\"gold\") {\n        translate([0, ankh_height/2 - 10, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=5, r=3, center=true);\n                    cylinder(h=6, r=1.5, center=true);\n                }\n    }\n}\n\n// Ancient wear texture pattern\nmodule wear_pattern() {\n    color(\"gold\") {\n        // Random wear marks\n        for(i = [0:5:360]) {\n            rotate([0, 0, i])\n                translate([sin(i) * 8, cos(i) * 15, 0])\n                    scale([0.3, 0.3, 1])\n                        sphere(r=0.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base ankh shape\n    ankh_cross();\n    \n    // Add raised details\n    hieroglyphic_border();\n    lotus_decoration();\n    suspension_loop();\n    \n    // Subtle wear for realism\n    wear_pattern();\n}",
    "renders": true
  },
  {
    "historical_artifact": "bangle",
    "openscad_code": "// Bronze Age Celtic Bangle - Medium Complexity\n// Based on 8th century BCE torc-style bangle found in Ireland\n\n// Global parameters for sizing\n$fn = 64;\nbangle_diameter = 60;\nwire_thickness = 6;\nwall_thickness = 2.5;\ngap_width = 12;\n\n// Colors for bronze material\nbronze_dark = [0.6, 0.35, 0.15];\nbronze_light = [0.75, 0.5, 0.25];\n\nmodule bangle_body() {\n    // Main torc body - hollow tube\n    difference() {\n        // Outer tube\n        rotate_extrude(angle = 300) {\n            translate([bangle_diameter/2, 0, 0])\n            circle(r = wire_thickness);\n        }\n        // Inner hollow\n        rotate_extrude(angle = 300) {\n            translate([bangle_diameter/2, 0, 0])\n            circle(r = wire_thickness - wall_thickness);\n        }\n    }\n}\n\nmodule spiral_decoration() {\n    // Celtic spiral motifs along the bangle\n    for (i = [0:15:300]) {\n        rotate([0, 0, i])\n        translate([bangle_diameter/2 + 2, 0, 0])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.3])\n        color(bronze_light) {\n            difference() {\n                cylinder(h = 1.5, r1 = 3, r2 = 2);\n                for (j = [0:90:270]) {\n                    rotate([0, 0, j])\n                    translate([1.2, 0, -0.5])\n                    cylinder(h = 2.5, r = 0.8);\n                }\n            }\n        }\n    }\n}\n\nmodule terminals() {\n    // Traditional Celtic zoomorphic terminals\n    // Left terminal\n    rotate([0, 0, 0])\n    translate([bangle_diameter/2 - 3, 0, 0])\n    color(bronze_dark) {\n        // Terminal base\n        rotate([0, 90, 0])\n        cylinder(h = 8, r1 = 7, r2 = 5);\n        \n        // Beak detail\n        translate([0, 4, 0])\n        rotate([0, 90, 0])\n        scale([1, 1.5, 1])\n        cylinder(h = 4, r1 = 2.5, r2 = 0);\n        \n        // Eye socket\n        translate([0, 2, 2.5])\n        rotate([0, 90, 0])\n        sphere(r = 1.2);\n    }\n    \n    // Right terminal (mirrored)\n    rotate([0, 0, 300])\n    translate([bangle_diameter/2 - 3, 0, 0])\n    scale([-1, 1, 1])\n    color(bronze_dark) {\n        rotate([0, 90, 0])\n        cylinder(h = 8, r1 = 7, r2 = 5);\n        \n        translate([0, 4, 0])\n        rotate([0, 90, 0])\n        scale([1, 1.5, 1])\n        cylinder(h = 4, r1 = 2.5, r2 = 0);\n        \n        translate([0, 2, 2.5])\n        rotate([0, 90, 0])\n        sphere(r = 1.2);\n    }\n}\n\nmodule decorative_bands() {\n    // Raised decorative bands with geometric patterns\n    for (angle = [45:30:255]) {\n        rotate([0, 0, angle])\n        translate([bangle_diameter/2, 0, 0])\n        rotate([90, 0, 0])\n        color(bronze_light) {\n            difference() {\n                // Raised band\n                cylinder(h = 3.5, r = wire_thickness + 0.5, center = true);\n                cylinder(h = 4, r = wire_thickness - 0.2, center = true);\n            }\n            \n            // Dot pattern on band\n            for (dot = [-1:1]) {\n                translate([0, dot * 1.2, 0])\n                sphere(r = 0.4);\n            }\n        }\n    }\n}\n\nmodule gap_detail() {\n    // Smooth transition at the gap\n    rotate([0, 0, 300])\n    translate([bangle_diameter/2 - 2, 0, 0])\n    rotate([90, 0, 0])\n    color(bronze_dark) {\n        cylinder(h = 4, r = wire_thickness - 0.5);\n    }\n}\n\n// Main assembly\ncolor(bronze_dark) bangle_body();\nspiral_decoration();\nterminals();\ndecorative_bands();\ngap_detail();",
    "renders": true
  },
  {
    "historical_artifact": "choker",
    "openscad_code": "// Historical Egyptian Faience Choker (New Kingdom, ~1400 BCE)\n// Realistic medium-complexity model for 3D printing\n// Sized for human neck: ~110 mm inner circumference, 15 mm height\n\n// Color palette for faience and gold\nfaience = \"#4DA6A6\";   // Turquoise faience\ngold = \"#B8860B\";      // Gold inlay\n\nmodule bead(diam, height) {\n    cylinder(h=height, d=diam, $fn=20);\n}\n\nmodule scarab() {\n    color(faience) union() {\n        // Body\n        scale([1.2, 0.9, 0.6]) sphere(d=8, $fn=32);\n        // Head\n        translate([4, 0, 1]) sphere(d=4, $fn=16);\n        // Wing cases\n        translate([-2, 3, 0.5]) cube([4, 2, 1]);\n        translate([-2, -5, 0.5]) cube([4, 2, 1]);\n    }\n}\n\nmodule lotus_pendant() {\n    color(faience) union() {\n        // Central lotus\n        translate([0, -4, 0]) cylinder(h=2, d=10, $fn=6);\n        // Petals\n        for(i=[0:5]) {\n            rotate([0, 0, i*60]) \n                translate([4, 0, 1]) scale([1, 2, 0.5]) sphere(d=3, $fn=12);\n        }\n        // Hanging loop\n        color(gold) translate([0, 0, 2]) rotate([90, 0, 0]) \n            torus(1.5, 0.5, $fn=16);\n    }\n}\n\nmodule choker_band() {\n    // Main band - hollow torus for 3D printing\n    difference() {\n        // Outer band\n        rotate_extrude($fn=100) \n            translate([50, 0, 0]) square([3, 15]);\n        // Inner hollow space\n        rotate_extrude($fn=100) \n            translate([47, 0, 1.5]) square([2.5, 12]);\n    }\n}\n\nmodule decorative_pattern() {\n    // Alternating faience and gold beads\n    for(i=[0:35]) {\n        angle = i * 10;\n        radius = 51.5;\n        \n        if(i%2 == 0) {\n            color(faience) \n                translate([cos(angle)*radius, sin(angle)*radius, 7.5]) \n                bead(4, 3);\n        } else {\n            color(gold) \n                translate([cos(angle)*radius, sin(angle)*radius, 7.5]) \n                bead(3.5, 2.5);\n        }\n    }\n}\n\nmodule central_focal() {\n    // Central scarab with lotus pendant below\n    translate([0, -55, 7.5]) rotate([90, 0, 0]) scarab();\n    translate([0, -55, 0]) lotus_pendant();\n}\n\n// Assembly\nunion() {\n    // Main choker structure\n    color(faience) choker_band();\n    \n    // Decorative elements\n    decorative_pattern();\n    central_focal();\n    \n    // Hieroglyphic inscriptions on back\n    translate([0, 55, 7.5]) rotate([0, 0, 180]) \n        color(gold) linear_extrude(height=0.5) \n            text(\"ankh wedja seneb\", size=4, halign=\"center\");\n}",
    "renders": true
  },
  {
    "historical_artifact": "anklet",
    "openscad_code": "// Historical Egyptian Anklet (circa 1400 BCE)\n// Based on New Kingdom period designs with scarab motif and lotus patterns\n\n$fn = 64;\n\n// Overall dimensions - sized for adult ankle\nanklet_diameter = 65;\nanklet_width = 12;\nanklet_thickness = 3;\n\n// Main anklet band\nmodule anklet_band() {\n    color(\"gold\") \n    difference() {\n        // Outer torus shape\n        rotate_extrude(angle = 360, $fn = 100)\n            translate([anklet_diameter/2, 0, 0])\n                square([anklet_thickness, anklet_width], center = true);\n        \n        // Inner opening for ankle\n        rotate_extrude(angle = 360, $fn = 100)\n            translate([anklet_diameter/2 - anklet_thickness, 0, 0])\n                square([anklet_thickness, anklet_width + 1], center = true);\n    }\n}\n\n// Scarab beetle centerpiece\nmodule scarab() {\n    color(\"turquoise\") \n    translate([0, -anklet_diameter/2 - 5, 0])\n    union() {\n        // Scarab body\n        scale([1.5, 1.2, 0.8])\n            sphere(r = 5);\n        \n        // Head\n        translate([0, -3, 0])\n            scale([0.8, 0.8, 0.6])\n                sphere(r = 3);\n        \n        // Wing details\n        translate([3, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 0.5, r1 = 4, r2 = 2);\n        \n        translate([-3, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 0.5, r1 = 4, r2 = 2);\n    }\n}\n\n// Lotus flower decorations\nmodule lotus(position, rotation) {\n    color(\"lapisblue\") \n    rotate([0, 0, rotation])\n    translate([0, -anklet_diameter/2 - 2, 0])\n    union() {\n        // Petals\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([0, 2, 0])\n                scale([0.3, 1, 0.3])\n                    cylinder(h = 4, r1 = 2, r2 = 0);\n        }\n        \n        // Center\n        sphere(r = 1.5);\n    }\n}\n\n// Hieroglyphic border pattern\nmodule hieroglyphs() {\n    color(\"gold\") \n    for(i = [0:20]) {\n        rotate([0, 0, i * 18])\n        translate([0, -anklet_diameter/2 - 1, 0])\n            cube([0.5, 1, 0.3], center = true);\n    }\n}\n\n// Small bead chain connectors\nmodule bead_chain(start_angle, end_angle) {\n    color(\"gold\") \n    for(angle = [start_angle:end_angle/5:end_angle]) {\n        rotate([0, 0, angle])\n        translate([0, -anklet_diameter/2 - 8, 0])\n            sphere(r = 1.2);\n    }\n}\n\n// Assembly of the anklet\nunion() {\n    // Main band\n    anklet_band();\n    \n    // Front scarab centerpiece\n    scarab();\n    \n    // Lotus flowers at cardinal points\n    lotus([0, 0, 0], 0);\n    lotus([0, 0, 0], 90);\n    lotus([0, 0, 0], 180);\n    lotus([0, 0, 0], 270);\n    \n    // Hieroglyphic border\n    hieroglyphs();\n    \n    // Decorative chains\n    bead_chain(-30, 30);\n    bead_chain(150, 210);\n}",
    "renders": true
  },
  {
    "historical_artifact": "torc",
    "openscad_code": "// Celtic Bronze Torc - Historical Artifact\n// Medium complexity realistic reproduction\n// Based on Iron Age gold torcs found across Europe\n\n$fn = 64;\n\n// Main parameters\ntorc_radius = 25;\ntorc_thickness = 4;\ngap_width = 15;\nbead_diameter = 6;\nnum_beads = 8;\n\n// Colors\nbronze = \"#CD7F32\";\ngold = \"#FFD700\";\n\n// Main torc body - split C-shape with gap\nmodule torc_body() {\n    difference() {\n        // Full torus\n        rotate([90, 0, 0])\n        torus(torc_radius, torc_thickness);\n        \n        // Gap for opening\n        translate([0, -torc_radius - 5, -torc_thickness - 2])\n        cube([gap_width, torc_radius * 2 + 10, torc_thickness * 2 + 4]);\n    }\n}\n\n// Helper for torus\nmodule torus(r, thickness) {\n    rotate_extrude()\n    translate([r, 0, 0])\n    circle(thickness);\n}\n\n// Decorative terminal knobs\nmodule terminal_knob() {\n    color(gold)\n    difference() {\n        // Main knob sphere\n        sphere(torc_thickness * 1.2);\n        \n        // Recessed pattern\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([torc_thickness * 0.8, 0, 0])\n            cylinder(h = torc_thickness * 2.5, r = 0.5, $fn = 6);\n        }\n        \n        // Central boss\n        translate([0, 0, torc_thickness * 1.1])\n        cylinder(h = torc_thickness * 0.3, r = torc_thickness * 0.4, $fn = 32);\n    }\n}\n\n// Twisted rope pattern\nmodule twisted_pattern() {\n    color(bronze)\n    for(i = [0:360/num_beads:360-360/num_beads]) {\n        rotate([0, 0, i])\n        translate([torc_radius, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = torc_thickness * 2.2, r = 0.8, $fn = 8);\n    }\n}\n\n// Bead decorations\nmodule decorative_beads() {\n    color(gold)\n    for(i = [0:360/num_beads:360-360/num_beads]) {\n        rotate([0, 0, i + 360/(num_beads*2)])\n        translate([torc_radius, 0, 0])\n        sphere(bead_diameter/2);\n    }\n}\n\n// Engraved spiral pattern\nmodule spiral_pattern() {\n    color(bronze)\n    for(angle = [0:15:345]) {\n        rotate([0, 0, angle])\n        translate([torc_radius + torc_thickness * 0.3, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, r = 0.2, $fn = 8);\n    }\n}\n\n// Main assembly\n// Base torc structure\nunion() {\n    // Main body\n    color(bronze)\n    torc_body();\n    \n    // Twisted pattern on surface\n    twisted_pattern();\n    \n    // Decorative beads\n    decorative_beads();\n    \n    // Spiral engraving\n    spiral_pattern();\n    \n    // Terminal knobs at ends\n    translate([gap_width/2, -torc_radius - 2, 0])\n    terminal_knob();\n    \n    translate([-gap_width/2, -torc_radius - 2, 0])\n    mirror([1, 0, 0])\n    terminal_knob();\n}\n\n// Reinforcement ring for strength\ncolor(bronze)\ntranslate([0, 0, torc_thickness + 1])\nrotate([90, 0, 0])\ncylinder(h = 2, r = torc_radius - 2, $fn = 64);",
    "renders": true
  },
  {
    "historical_artifact": "diadem",
    "openscad_code": "// Ancient Greek Gold Diadem\n// Based on Hellenistic period diadems circa 3rd-1st century BCE\n\n// Overall dimensions\nband_width = 6;\nband_thickness = 2;\nband_radius = 75; // Fits adult head size\njewel_height = 8;\ntotal_height = 15;\n\n// Colors\ngold_color = \"GoldenRod\";\ngem_color = \"DarkTurquoise\";\n\nmodule central_medallion() {\n    // Central oval medallion\n    translate([0, 0, band_thickness + jewel_height/2])\n    color(gold_color)\n    scale([1.5, 1, 1])\n    sphere(r=8, $fn=32);\n    \n    // Gemstone in center\n    translate([0, 0, band_thickness + jewel_height + 2])\n    color(gem_color)\n    sphere(r=3, $fn=24);\n    \n    // Decorative border beads\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([12, 0, band_thickness + jewel_height/2])\n        color(gold_color)\n        sphere(r=1, $fn=16);\n    }\n}\n\nmodule side_palmette(x_pos) {\n    // Palmette leaf motif\n    translate([x_pos, 0, band_thickness + 2])\n    color(gold_color)\n    rotate([0, 0, x_pos > 0 ? 0 : 180])\n    linear_extrude(height=5, convexity=10)\n    polygon(points=[\n        [0, 0],\n        [-4, 3],\n        [-3, 3],\n        [-2, 1],\n        [-1, 3],\n        [0, 1],\n        [1, 3],\n        [2, 1],\n        [3, 3],\n        [4, 3],\n        [0, 0]\n    ]);\n}\n\nmodule decorative_frieze() {\n    // Meander pattern along band\n    for(i=[-120:20:120]) {\n        rotate([0, 0, i])\n        translate([band_radius - 3, 0, band_thickness/2])\n        color(gold_color)\n        cube([4, 1, 1]);\n    }\n}\n\nmodule band_with_crenellations() {\n    // Main band with crenellated top edge\n    difference() {\n        // Full band\n        rotate_extrude(angle=360, $fn=128)\n        translate([band_radius, 0, 0])\n        square([band_width, band_thickness]);\n        \n        // Crenellations\n        for(i=[0:20:340]) {\n            rotate([0, 0, i])\n            translate([band_radius + 2, -1, band_thickness])\n            cube([6, 2, 2]);\n        }\n    }\n}\n\nmodule side_gems() {\n    // Two side gems with settings\n    for(side=[-1, 1]) {\n        translate([side * 35, 0, band_thickness + 4])\n        color(gold_color)\n        cylinder(h=3, r1=4, r2=5, $fn=24);\n        \n        translate([side * 35, 0, band_thickness + 5])\n        color(gem_color)\n        sphere(r=2.5, $fn=24);\n        \n        // Bezel prongs\n        for(i=[0:90:270]) {\n            rotate([0, 0, i])\n            translate([side * 35 + 3.5, 0, band_thickness + 5])\n            color(gold_color)\n            cube([1.5, 0.5, 3]);\n        }\n    }\n}\n\nmodule attachment_loops() {\n    // Loops for attaching ribbon ties\n    for(side=[-1, 1]) {\n        rotate([0, 0, side * 70])\n        translate([band_radius + band_width/2, 0, band_thickness/2])\n        rotate([90, 0, 0])\n        color(gold_color)\n        difference() {\n            cylinder(h=band_width + 2, r=2, $fn=16);\n            cylinder(h=band_width + 3, r=1.2, $fn=16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base diadem band\n    band_with_crenellations();\n    \n    // Decorative elements\n    decorative_frieze();\n    central_medallion();\n    \n    // Side decorations\n    side_palmette(20);\n    side_palmette(-20);\n    \n    // Side gems\n    side_gems();\n    \n    // Attachment loops\n    attachment_loops();\n}",
    "renders": true
  },
  {
    "historical_artifact": "circlet",
    "openscad_code": "// Bronze Age Circlet - Realistic Style\n// Based on Nordic Bronze Age ceremonial circlets found in Scandinavia (c. 1500-500 BCE)\n\n// Circlet parameters\ndiameter = 70;          // Inner diameter in mm\nthickness = 4;          // Band thickness\nwidth = 8;              // Band width\nsegments = 64;          // Circle resolution\n\n// Decorative elements\nnum_spikes = 12;        // Number of sun ray spikes\nspike_height = 15;      // Height of decorative spikes\nspike_width = 3;        // Width at base of spike\n\n// Engraving details\nengraving_depth = 0.5;  // Depth of engraved patterns\nnum_engravings = 24;    // Number of engraved lines\n\n// Colors\nbronze_color = [0.72, 0.45, 0.2];  // Bronze color\npatina_color = [0.2, 0.4, 0.3];    // Green patina\n\n// Main circlet band\nmodule circlet_band() {\n    color(bronze_color) {\n        difference() {\n            // Main torus shape for the band\n            rotate_extrude($fn = segments)\n                translate([diameter/2, 0, 0])\n                    square([thickness, width], center=true);\n            \n            // Inner hollow for wearing\n            rotate_extrude($fn = segments)\n                translate([diameter/2 - thickness, 0, 0])\n                    square([thickness - 1, width - 1], center=true);\n        }\n    }\n}\n\n// Decorative sun ray spikes\nmodule sun_spikes() {\n    for(i = [0:num_spikes-1]) {\n        angle = i * 360 / num_spikes;\n        rotate([0, 0, angle])\n            translate([diameter/2 + thickness/2, 0, 0])\n                rotate([90, 0, 0])\n                    color(bronze_color) {\n                        // Spike base\n                        cylinder(h=spike_height/3, r1=spike_width, r2=spike_width*0.8, $fn=8);\n                        // Spike tip\n                        translate([0, 0, spike_height/3])\n                            cylinder(h=spike_height*2/3, r1=spike_width*0.8, r2=0.5, $fn=8);\n                    }\n    }\n}\n\n// Engraved patterns\nmodule engravings() {\n    for(i = [0:num_engravings-1]) {\n        angle = i * 360 / num_engravings;\n        rotate([0, 0, angle])\n            translate([diameter/2 + thickness/2, 0, width/2 - engraving_depth])\n                color(patina_color) {\n                    cube([thickness + 1, 1, engraving_depth], center=true);\n                }\n    }\n}\n\n// Central decorative boss (sun symbol)\nmodule central_boss() {\n    color(bronze_color) {\n        // Main boss\n        translate([diameter/2, 0, width/2 + 2])\n            rotate([0, 90, 0])\n                cylinder(h=6, r=5, $fn=32);\n        \n        // Sun wheel spokes\n        for(i = [0:7]) {\n            angle = i * 45;\n            rotate([0, 0, angle])\n                translate([diameter/2, 0, width/2 + 2])\n                    rotate([0, 90, 0])\n                        cube([8, 1, 1], center=true);\n        }\n    }\n}\n\n// Patina effect spots\nmodule patina_spots() {\n    random_seed = 42;\n    for(i = [0:20]) {\n        angle = rands(0, 360, 1, random_seed + i)[0];\n        height = rands(-width/2, width/2, 1, random_seed + i)[0];\n        rotate([0, 0, angle])\n            translate([diameter/2 + thickness/2, 0, height])\n                color(patina_color) {\n                    sphere(r=0.5, $fn=8);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    circlet_band();\n    sun_spikes();\n    engravings();\n    central_boss();\n    patina_spots();\n}",
    "renders": true
  },
  {
    "historical_artifact": "signet",
    "openscad_code": "// Historical Roman Legion Signet Ring\n// Medium complexity realistic style\n\n// Main ring body\nmodule ring_band(outer_r, inner_r, height) {\n    difference() {\n        cylinder(h=height, r=outer_r, $fn=100);\n        translate([0, 0, -1])\n            cylinder(h=height+2, r=inner_r, $fn=100);\n    }\n}\n\n// Decorative beaded edge pattern\nmodule beaded_edge(radius, height, count=36) {\n    bead_diameter = 2 * PI * radius / count;\n    for(i=[0:count-1]) {\n        angle = i * 360 / count;\n        translate([radius * cos(angle), radius * sin(angle), height/2])\n            sphere(d=bead_diameter * 0.8, $fn=16);\n    }\n}\n\n// Eagle emblem (Aquila) - symbol of Roman legions\nmodule eagle_emblem() {\n    // Eagle body\n    color(\"gold\") {\n        translate([0, 0, 2])\n            scale([1.2, 0.8, 0.3])\n                sphere(d=12, $fn=32);\n        \n        // Eagle head\n        translate([5, 0, 3.5])\n            scale([0.6, 0.4, 0.6])\n                sphere(d=6, $fn=32);\n        \n        // Wings\n        difference() {\n            union() {\n                // Left wing\n                translate([-2, -4, 2.5])\n                    rotate([0, 0, -20])\n                        scale([0.3, 1.5, 0.1])\n                            cube([8, 8, 1], center=true);\n                \n                // Right wing\n                translate([-2, 4, 2.5])\n                    rotate([0, 0, 20])\n                        scale([0.3, 1.5, 0.1])\n                            cube([8, 8, 1], center=true);\n            }\n            // Wing details\n            for(i=[-3:3]) {\n                translate([i*1.2, -4, 2.7])\n                    rotate([0, 0, -20])\n                        cube([0.5, 6, 0.3], center=true);\n                translate([i*1.2, 4, 2.7])\n                    rotate([0, 0, 20])\n                        cube([0.5, 6, 0.3], center=true);\n            }\n        }\n        \n        // Laurel wreath base\n        translate([0, 0, 1])\n            cylinder(h=1, r=8, $fn=64);\n    }\n}\n\n// Latin inscription band\nmodule inscription(text_height) {\n    color(\"gold\") {\n        // SPQR inscription (Senātus Populusque Rōmānus)\n        translate([0, -10, text_height])\n            linear_extrude(height=0.5)\n                text(\"SPQR\", size=3, halign=\"center\", font=\"Times New Roman:style=Bold\");\n    }\n}\n\n// Main assembly\nmodule signet_ring() {\n    // Ring parameters\n    outer_radius = 12;\n    inner_radius = 9;\n    band_height = 6;\n    \n    // Create ring band\n    color(\"bronze\") {\n        ring_band(outer_radius, inner_radius, band_height);\n        \n        // Add beaded decoration on top edge\n        beaded_edge(outer_radius - 0.5, band_height);\n        \n        // Add beaded decoration on bottom edge\n        beaded_edge(outer_radius - 0.5, 0);\n    }\n    \n    // Signet face (flat top for seal)\n    color(\"bronze\") {\n        translate([0, outer_radius + 8, band_height/2])\n            cube([20, 20, 4], center=true);\n    }\n    \n    // Eagle emblem on signet face\n    translate([0, outer_radius + 8, band_height/2 + 2])\n        eagle_emblem();\n    \n    // Inscription on ring band\n    translate([0, 0, band_height/2 + 1])\n        inscription(band_height);\n}\n\n// Generate the ring\nsignet_ring();",
    "renders": true
  },
  {
    "historical_artifact": "locket",
    "openscad_code": "// Victorian-era oval locket with floral engraving and hinge detail\n\n$fn = 36;\n\n// Overall dimensions\nlocket_length = 60;\nlocket_width = 40;\nlocket_thickness = 8;\nwall_thickness = 2;\n\n// Colors\ngold_color = \"GoldenRod\";\nsilver_color = \"Silver\";\n\nmodule main_body() {\n    color(gold_color)\n    difference() {\n        // Outer oval shell\n        scale([1, 0.7, 1])\n        sphere(d = locket_length);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n        scale([1, 0.7, 1])\n        sphere(d = locket_length - 2*wall_thickness);\n        \n        // Flatten back\n        translate([0, 0, -locket_thickness/2 - 1])\n        cube([locket_length + 2, locket_width + 2, locket_thickness], center = true);\n    }\n}\n\nmodule hinge() {\n    color(silver_color)\n    // Hinge barrel\n    translate([-locket_length/2 - 2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 4, r = 2, center = true);\n    \n    // Hinge pins\n    for(i = [-1, 1]) {\n        translate([-locket_length/2 - 2, i * 6, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 10, r = 0.8, center = true);\n    }\n}\n\nmodule decorative_border() {\n    color(gold_color)\n    // Raised border ridge\n    difference() {\n        scale([1, 0.7, 0.1])\n        sphere(d = locket_length);\n        \n        scale([1, 0.7, 0.2])\n        sphere(d = locket_length - 4);\n    }\n}\n\nmodule floral_motif() {\n    color(gold_color)\n    // Central flower\n    for(i = [0:60:300]) {\n        rotate([0, 0, i])\n        translate([0, locket_width/4, locket_thickness/2 - 0.5])\n        cylinder(h = 0.5, r = 2.5);\n    }\n    \n    // Petal details\n    for(i = [0:72:359]) {\n        rotate([0, 0, i])\n        translate([0, locket_width/3, locket_thickness/2 - 0.5])\n        scale([0.3, 1, 0.3])\n        sphere(d = 3);\n    }\n}\n\nmodule bail() {\n    color(gold_color)\n    // Top bail for chain\n    translate([0, 0, locket_thickness/2 + 3])\n    rotate([90, 0, 0])\n    difference() {\n        torus(4, 1.5);\n        translate([0, -5, 0])\n        cube([10, 10, 3], center = true);\n    }\n}\n\nmodule inscription_band() {\n    color(silver_color)\n    // Decorative band for engraving\n    translate([0, 0, locket_thickness/2 - 0.3])\n    scale([1, 0.65, 0.1])\n    sphere(d = locket_length - 8);\n}\n\n// Assembly\nmain_body();\nhinge();\ntranslate([0, 0, locket_thickness/2 - 0.1])\ndecorative_border();\nfloral_motif();\nbail();\ninscription_band();",
    "renders": true
  },
  {
    "historical_artifact": "medallion",
    "openscad_code": "// Roman Imperial Medallion (Antoninianus style) - 3D Printable Historical Artifact\n// Based on 3rd century Roman coin design, 70mm diameter for display\n\n$fn = 64;  // High resolution for realistic curves\n\n// Main parameters\ndiameter = 70;\nthickness = 4;\nedge_thickness = 2.5;\nrelief_height = 0.8;\n\n// Colors - bronze patina\ncolor([0.65, 0.4, 0.2]) {\n    difference() {\n        // Main medallion body\n        union() {\n            // Solid base\n            cylinder(h = thickness, d = diameter, center = true);\n            \n            // Raised rim\n            translate([0, 0, thickness/2])\n                cylinder(h = edge_thickness, d = diameter + 2, center = true);\n        }\n        \n        // Central portrait recess\n        translate([0, 0, -thickness/2 + relief_height])\n            cylinder(h = thickness + 1, d = diameter - 18, center = true);\n    }\n}\n\n// Emperor portrait (simplified profile)\nmodule portrait_profile() {\n    color([0.55, 0.35, 0.15]) {\n        translate([0, -5, -thickness/2 + relief_height*2])\n            rotate([90, 0, 0])\n                cylinder(h = 3, d1 = 30, d2 = 25, center = true);\n        \n        // Laurel wreath crown\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([14, 0, -thickness/2 + relief_height*3])\n                    cube([1.5, 8, 2], center = true);\n        }\n    }\n}\n\n// Latin inscription around rim\nmodule inscription() {\n    color([0.5, 0.3, 0.1]) {\n        // Raised letters\n        for(i = [0:15:345]) {\n            rotate([0, 0, i])\n                translate([diameter/2 - 6, 0, thickness/2 - 0.5])\n                    cube([2, 1, 1], center = true);\n        }\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color([0.6, 0.38, 0.18]) {\n        // Beaded border\n        for(i = [0:10:359]) {\n            rotate([0, 0, i])\n                translate([diameter/2 - 3, 0, thickness/2 - edge_thickness/2])\n                    sphere(d = 2);\n        }\n    }\n}\n\n// Reverse side - military standard\nmodule reverse_design() {\n    color([0.55, 0.35, 0.15]) {\n        // Center standard pole\n        translate([0, 0, thickness/2 - edge_thickness])\n            cylinder(h = 2, d = 3, center = true);\n        \n        // Eagle emblem\n        translate([0, 0, thickness/2 - edge_thickness + 1])\n            rotate([0, 90, 0])\n                cylinder(h = 15, d1 = 8, d2 = 12, center = true);\n        \n        // Small decorative elements\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([20, 0, thickness/2 - edge_thickness + 0.5])\n                    sphere(d = 4);\n        }\n    }\n}\n\n// Assembly of all elements\nportrait_profile();\ninscription();\nborder_pattern();\n\n// Mirror for reverse side\nmirror([0, 0, 1]) {\n    translate([0, 0, -thickness])\n        reverse_design();\n}\n\n// Hanging loop for display\ntranslate([0, diameter/2 + 5, 0])\n    rotate([90, 0, 0])\n        cylinder(h = 8, d1 = 6, d2 = 4, center = true);\n        \n// Reinforcement ring\ntranslate([0, 0, 0])\n    cylinder(h = thickness + 2, d = diameter + 4, center = true);",
    "renders": true
  },
  {
    "historical_artifact": "charms",
    "openscad_code": "// Ancient Egyptian Scarab Amulet (Historical Charm)\n// Based on New Kingdom period scarab charms (~1550-1070 BCE)\n// Typically 15-30mm, scaled up for 3D printing\n\n$fn = 50;  // Smooth curves for realistic appearance\n\nmodule scarab_body() {\n    // Main scarab body - oval shape\n    color(\"DarkGoldenrod\") \n    difference() {\n        // Base oval body\n        scale([1.2, 1, 0.6])\n        sphere(d=40);\n        \n        // Flatten bottom\n        translate([0, 0, -12])\n        cube([50, 50, 25], center=true);\n    }\n}\n\nmodule wing_cases() {\n    // Elytra (wing cases) with realistic segmentation\n    color(\"Goldenrod\") {\n        // Left wing case\n        translate([-15, 0, 8])\n        rotate([0, 0, 15])\n        scale([0.8, 1.5, 0.3])\n        cylinder(h=20, d1=25, d2=20);\n        \n        // Right wing case\n        translate([15, 0, 8])\n        rotate([0, 0, -15])\n        scale([0.8, 1.5, 0.3])\n        cylinder(h=20, d1=25, d2=20);\n        \n        // Center line between wing cases\n        translate([0, 0, 8])\n        cube([3, 30, 6], center=true);\n    }\n}\n\nmodule head() {\n    // Scarab head with realistic proportions\n    color(\"DarkOliveGreen\") {\n        translate([0, 25, 5])\n        rotate([270, 0, 0])\n        cylinder(h=15, d1=12, d2=8);\n        \n        // Eyes\n        translate([-5, 28, 8])\n        sphere(d=3);\n        \n        translate([5, 28, 8])\n        sphere(d=3);\n    }\n}\n\nmodule legs() {\n    // Six legs in realistic positioning\n    color(\"DarkGoldenrod\")\n    for(i = [1:3]) {\n        // Left legs\n        translate([-18 + i*5, 15 - i*8, -5])\n        rotate([0, 30, 90])\n        cylinder(h=15, d=3);\n        \n        // Right legs\n        translate([18 - i*5, 15 - i*8, -5])\n        rotate([0, 30, -90])\n        cylinder(h=15, d=3);\n    }\n}\n\nmodule hieroglyphics() {\n    // Simplified hieroglyphic inscription on base\n    color(\"SaddleBrown\") {\n        // Cartouche outline\n    translate([0, -15, -12])\n    difference() {\n        scale([1.5, 0.3, 1])\n        cylinder(h=2, d=30);\n        \n        // Inner oval\n        scale([1.3, 0.3, 1])\n        cylinder(h=3, d=25);\n    }\n    \n    // Basic hieroglyphs - ankh symbols\n    for(i = [-1, 0, 1]) {\n        translate([i*8, -15, -11])\n        scale([0.5, 0.5, 2])\n        union() {\n            // Ankh loop\n            cylinder(h=1, d=6);\n            difference() {\n                cube([6, 6, 1], center=true);\n                translate([0, 0, -1])\n                cylinder(h=3, d=4);\n            }\n            // Ankh stem\n            translate([0, -4, 0])\n            cube([2, 8, 1], center=true);\n        }\n    }\n    }\n}\n\nmodule suspension_loop() {\n    // Suspension loop for wearing as charm\n    color(\"Goldenrod\")\n    rotate([90, 0, 0])\n    translate([0, 0, -25])\n    difference() {\n        // Outer ring\n        rotate_extrude()\n        translate([5, 0, 0])\n        circle(r=2);\n        \n        // Inner hole for cord\n        rotate_extrude()\n        translate([5, 0, 0])\n        circle(r=1);\n    }\n}\n\n// Assemble the scarab charm\nunion() {\n    scarab_body();\n    wing_cases();\n    head();\n    legs();\n    hieroglyphics();\n    suspension_loop();\n}",
    "renders": true
  },
  {
    "historical_artifact": "collar",
    "openscad_code": "// Ancient Egyptian Broad Collar (Wesekh) - 18th Dynasty Style\n// Based on artifacts from Thebes, approximately 1400 BCE\n\n// Main parameters\ncollar_width = 70;\ncollar_height = 35;\nthickness = 3;\nbead_size = 2.5;\n\n// Color definitions\nfaience_blue = [0.2, 0.4, 0.8];\ngold_color = [0.8, 0.6, 0.2];\ncarnelian = [0.7, 0.2, 0.1];\nlapis = [0.1, 0.2, 0.6];\n\nmodule collar_base() {\n    // Create the curved collar shape\n    difference() {\n        // Main collar body\n        union() {\n            color(faience_blue)\n            linear_extrude(height = thickness)\n            polygon(points = [\n                [-collar_width/2, 0],\n                [-collar_width/2 + 8, collar_height],\n                [collar_width/2 - 8, collar_height],\n                [collar_width/2, 0],\n                [collar_width/2 - 15, -8],\n                [-collar_width/2 + 15, -8]\n            ]);\n        }\n        \n        // Cut center hole for neck\n        translate([0, 5, -1])\n        cylinder(h = thickness + 2, r = 12, $fn = 32);\n        \n        // Add string holes\n        for (i = [-1, 1]) {\n            translate([i * 30, -6, thickness/2])\n            rotate([90, 0, 0])\n            cylinder(h = thickness, r = 1.5, $fn = 16);\n        }\n    }\n}\n\nmodule decorative_beads() {\n    // Top row - gold spacer beads\n    for (i = [-3:3]) {\n        translate([i * 10, collar_height - 3, thickness/2])\n        color(gold_color)\n        sphere(r = bead_size * 0.8, $fn = 12);\n    }\n    \n    // Second row - alternating colors\n    for (i = [-3:2]) {\n        translate([i * 10 + 5, collar_height - 7, thickness/2])\n        color(i % 2 == 0 ? carnelian : lapis)\n        sphere(r = bead_size, $fn = 8);\n    }\n    \n    // Third row - larger beads\n    for (i = [-2:2]) {\n        translate([i * 12, collar_height - 12, thickness/2])\n        color(gold_color)\n        sphere(r = bead_size * 1.2, $fn = 12);\n    }\n    \n    // Bottom decorative fringe\n    for (i = [-5:5]) {\n        translate([i * 6, collar_height - 18, thickness/2])\n        union() {\n            color(lapis)\n            sphere(r = bead_size * 0.7, $fn = 8);\n            translate([0, -bead_size, 0])\n            color(gold_color)\n            cylinder(h = bead_size * 2, r = 0.5, $fn = 8);\n        }\n    }\n}\n\nmodule hieroglyph_inscriptions() {\n    // Simple lotus motif on sides\n    for (side = [-1, 1]) {\n        translate([side * 25, 15, thickness + 0.1])\n        rotate([0, 0, side * 15])\n        union() {\n            color(gold_color)\n            for (i = [0:2]) {\n                translate([0, -i * 2, 0])\n                scale([1, 0.7, 1])\n                sphere(r = 1.5, $fn = 12);\n            }\n            translate([0, 2, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 4, r1 = 2, r2 = 0, $fn = 8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    collar_base();\n    decorative_beads();\n    hieroglyph_inscriptions();\n    \n    // Add back reinforcement\n    translate([0, 0, -thickness/2])\n    color(faience_blue)\n    linear_extrude(height = 1)\n    polygon(points = [\n        [-collar_width/2 + 2, 2],\n        [-collar_width/2 + 10, collar_height - 2],\n        [collar_width/2 - 10, collar_height - 2],\n        [collar_width/2 - 2, 2],\n        [collar_width/2 - 15, -7],\n        [-collar_width/2 + 15, -7]\n    ]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "armlet",
    "openscad_code": "// Bronze Age Celtic Armlet - Medium Complexity\n// Based on historical artifacts from 800-400 BCE\n// Features spiral terminals, dot repoussé decoration, and engraved borders\n\n// Color definitions\nbronze = [184/255, 115/255, 51/255];\ndark_bronze = [156/255, 98/255, 43/255];\n\n// Main parameters\narmlet_diameter = 65;\nband_width = 15;\nband_thickness = 3;\nwall_thickness = 2;\n\n// Create the main armlet band\nmodule armlet_band() {\n    // Outer band\n    difference() {\n        cylinder(h=band_thickness, d=armlet_diameter, $fn=100);\n        translate([0, 0, -0.1])\n            cylinder(h=band_thickness+0.2, d=armlet_diameter-wall_thickness*2, $fn=100);\n    }\n    \n    // Inner comfort edge\n    translate([0, 0, -0.5])\n        cylinder(h=1, d=armlet_diameter-wall_thickness, $fn=100);\n}\n\n// Spiral terminal decorations\nmodule spiral_terminal() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([armlet_diameter/2 - 5, 0, band_thickness/2])\n        rotate([90, 0, 0])\n        union() {\n            // Spiral base\n            for(j = [0:5]) {\n                rotate([0, 0, j*30])\n                translate([j*1.5, 0, 0])\n                scale([1, 1, 0.5])\n                sphere(d=3.5-j*0.3, $fn=20);\n            }\n            \n            // Terminal bead\n            translate([9, 0, 0])\n            sphere(d=4, $fn=20);\n        }\n    }\n}\n\n// Dot repoussé decoration pattern\nmodule dot_pattern() {\n    for(angle = [0:15:345]) {\n        for(pos = [-5:2.5:5]) {\n            rotate([0, 0, angle])\n            translate([armlet_diameter/2 - band_width/2 + pos, 0, band_thickness/2 + 0.1])\n            sphere(d=1.2, $fn=10);\n        }\n    }\n}\n\n// Engraved border lines\nmodule border_lines() {\n    // Upper border\n    translate([0, 0, band_thickness/2 - 0.2])\n    difference() {\n        cylinder(h=0.4, d=armlet_diameter-0.5, $fn=100);\n        translate([0, 0, -0.1])\n            cylinder(h=0.6, d=armlet_diameter-1.5, $fn=100);\n    }\n    \n    // Lower border\n    translate([0, 0, -band_thickness/2 + 0.2])\n    difference() {\n        cylinder(h=0.4, d=armlet_diameter-0.5, $fn=100);\n        translate([0, 0, -0.1])\n            cylinder(h=0.6, d=armlet_diameter-1.5, $fn=100);\n    }\n}\n\n// Hinged opening mechanism\nmodule hinge_mechanism() {\n    // Left hinge half\n    translate([armlet_diameter/2 - 2, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=band_width, d=4, $fn=20);\n        translate([0, 0, -0.1])\n            cylinder(h=band_width+0.2, d=2, $fn=20);\n    }\n    \n    // Right hinge half\n    translate([-armlet_diameter/2 + 2, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=band_width, d=4, $fn=20);\n        translate([0, 0, -0.1])\n            cylinder(h=band_width+0.2, d=2, $fn=20);\n    }\n}\n\n// Celtic knot pattern (simplified)\nmodule knot_pattern() {\n    for(angle = [45:90:315]) {\n        rotate([0, 0, angle])\n        translate([0, armlet_diameter/2 - band_width/2, band_thickness/2])\n        linear_extrude(height=0.5)\n        union() {\n            // Basic knot segment\n            translate([0, 0, 0])\n            square([band_width/3, band_width/3], center=true);\n            translate([band_width/6, band_width/6, 0])\n            square([band_width/6, band_width/6], center=true);\n            translate([-band_width/6, band_width/6, 0])\n            square([band_width/6, band_width/6], center=true);\n        }\n    }\n}\n\n// Main assembly\ncolor(bronze)\nunion() {\n    // Core armlet structure\n    armlet_band();\n    \n    // Decorative elements\n    color(dark_bronze) {\n        spiral_terminal();\n        dot_pattern();\n        border_lines();\n        hinge_mechanism();\n        knot_pattern();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "hairpin",
    "openscad_code": "// Ancient Roman Hairpin (crinale) - 1st-2nd Century CE\n// Bronze hairpin with decorative head and geometric engraving\n\n$fn = 32;  // Smooth curves\n\n// Main dimensions\npin_length = 80;\npin_diameter = 3;\nhead_diameter = 12;\nhead_height = 8;\n\n// Colors\nbronze = \"#CD7F32\";\ndark_bronze = \"#8B4513\";\n\nmodule hairpin_pin() {\n    // Tapered bronze pin shaft\n    color(bronze)\n    union() {\n        // Main shaft - slightly tapered for insertion\n        cylinder(h=pin_length, d1=pin_diameter, d2=pin_diameter*0.8, center=false);\n        \n        // Sharp point with safety radius\n        translate([0, 0, pin_length])\n        cylinder(h=5, d1=pin_diameter*0.8, d2=0.5, center=false);\n    }\n}\n\nmodule decorative_head() {\n    color(dark_bronze)\n    difference() {\n        // Decorative disc head\n        translate([0, 0, pin_length])\n        cylinder(h=head_height, d=head_diameter, center=false);\n        \n        // Central dome\n        translate([0, 0, pin_length + head_height])\n        sphere(d=head_diameter * 0.8);\n    }\n    \n    // Geometric engraving pattern - concentric circles\n    color(bronze)\n    for(i=[1:3]) {\n        translate([0, 0, pin_length + head_height*0.5])\n        linear_extrude(height=0.3)\n        circle(d=head_diameter - i*3);\n    }\n    \n    // Small decorative spheres around edge\n    color(bronze)\n    for(angle=[0:45:359]) {\n        rotate([0, 0, angle])\n        translate([head_diameter/2 - 2, 0, pin_length + head_height*0.5])\n        sphere(d=1.5);\n    }\n}\n\nmodule grip_texture() {\n    // Spiral grooves for grip\n    color(bronze)\n    for(z=[10:10:pin_length-10]) {\n        rotate([0, 0, z*5])\n        translate([0, 0, z])\n        difference() {\n            cylinder(h=5, d=pin_diameter+0.5, center=false);\n            cylinder(h=5.5, d=pin_diameter-0.5, center=false);\n        }\n    }\n}\n\nmodule inscription_band() {\n    // Decorative inscription band near head\n    color(dark_bronze)\n    translate([0, 0, pin_length - 8])\n    difference() {\n        cylinder(h=3, d=pin_diameter+2, center=false);\n        \n        // Simulated inscription dots\n        for(angle=[0:30:359]) {\n            rotate([0, 0, angle])\n            translate([pin_diameter/2 + 0.5, 0, 1])\n            cube([1, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    hairpin_pin();\n    decorative_head();\n    grip_texture();\n    inscription_band();\n}",
    "renders": true
  },
  {
    "historical_artifact": "gorget",
    "openscad_code": "// Renaissance steel gorget with riveted construction\n// Overall dimensions: ~70mm wide x 55mm tall x 35mm deep\n\n$fn = 64;\n\n// Main gorget plate\nmodule main_plate() {\n    difference() {\n        // Outer curved plate\n        translate([0, 0, 12])\n        scale([1, 1.2, 0.3])\n        sphere(d = 60);\n        \n        // Inner cutout for neck\n        translate([0, 0, 5])\n        scale([0.5, 0.7, 1])\n        sphere(d = 45);\n        \n        // Bottom opening\n        translate([0, -20, 0])\n        cube([60, 40, 30], center = true);\n    }\n}\n\n// Overlapping back plate\nmodule back_plate() {\n    rotate([0, 180, 0])\n    translate([0, 0, 10])\n    scale([0.9, 1.1, 0.25])\n    sphere(d = 55);\n}\n\n// Decorative embossed ridge\nmodule ridge(count = 6) {\n    for(i = [1:count]) {\n        rotate([0, 0, i * 360/count])\n        translate([20, 0, 13])\n        rotate([90, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h = 5, d1 = 3, d2 = 2);\n    }\n}\n\n// Rivets for construction\nmodule rivets() {\n    // Front rivets\n    for(angle = [30, 150]) {\n        rotate([0, 0, angle])\n        translate([25, 0, 14])\n        color(\"silver\")\n        cylinder(h = 2, d = 2.5);\n    }\n    \n    // Side rivets\n    for(angle = [-45, 45]) {\n        rotate([0, 0, angle])\n        translate([22, 0, 13])\n        color(\"silver\")\n        cylinder(h = 2, d = 2.5);\n    }\n}\n\n// Hinged side plates\nmodule side_plate(side = 1) {\n    translate([side * 18, 0, 10])\n    rotate([0, 0, side * 15])\n    scale([0.3, 1, 0.4])\n    sphere(d = 40);\n    \n    // Hinge loops\n    translate([side * 22, -8, 12])\n    rotate([90, 0, 0])\n    color(\"silver\")\n    difference() {\n        cylinder(h = 4, d = 4);\n        cylinder(h = 5, d = 2);\n    }\n}\n\n// Decorative etching pattern\nmodule etching() {\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([15, 0, 13.5])\n        color(\"dimgray\")\n        scale([0.05, 0.3, 0.02])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d = 1);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"lightgray\") main_plate();\n    color(\"silver\") back_plate();\n    color(\"silver\") ridge();\n    rivets();\n    side_plate(1);\n    side_plate(-1);\n    etching();\n}",
    "renders": true
  },
  {
    "historical_artifact": "ferroniere",
    "openscad_code": "// Ferronière - Renaissance forehead jewelry (c. 1490-1530)\n// Realistic style, medium complexity, 3D printable\n\n$fn = 64;\n\n// Main parameters\nband_width = 3;\nband_thickness = 1.5;\ngem_diameter = 8;\ngem_height = 5;\nchain_link_size = 2;\nchain_length = 25;\nchain_links = 12;\ntotal_width = 80;\n\n// Colors\ncolor_gold = \"goldenrod\";\ncolor_gem = \"royalblue\";\n\n// Gem setting\nmodule gem_setting() {\n    color(color_gem) \n    union() {\n        // Central sapphire\n        translate([0, 0, gem_height/2]) \n        sphere(d=gem_diameter);\n        \n        // Prong setting\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([0, gem_diameter/2, 0])\n            color(color_gold)\n            cylinder(h=gem_height + 1, d1=1.5, d2=0.8);\n        }\n    }\n}\n\n// Decorative rosettes\nmodule rosette(radius) {\n    color(color_gold)\n    difference() {\n        union() {\n            cylinder(h=band_thickness + 0.5, r=radius, $fn=6);\n            for(i=[0:5]) {\n                rotate([0, 0, i*60])\n                translate([radius*0.7, 0, band_thickness/2])\n                cube([radius*0.6, radius*0.3, band_thickness + 0.5], center=true);\n            }\n        }\n        cylinder(h=band_thickness + 1, r=radius*0.4, $fn=6);\n    }\n}\n\n// Chain link\nmodule chain_link() {\n    color(color_gold)\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=chain_link_size, r=chain_link_size/2, center=true);\n        translate([0, 0, -chain_link_size/2 - 0.1])\n        cube([chain_link_size*0.8, chain_link_size*0.8, chain_link_size + 0.2], center=true);\n    }\n}\n\n// Main band\nmodule ferroniere_band() {\n    color(color_gold)\n    difference() {\n        // Outer band with slight curve\n        hull() {\n            translate([-total_width/2, 0, 0])\n            sphere(d=band_width);\n            translate([total_width/2, 0, 0])\n            sphere(d=band_width);\n        }\n        \n        // Inner hollow for curve\n        translate([0, 0, -band_thickness/2])\n        cube([total_width + 2, band_width*2, band_thickness + 1], center=true);\n        \n        // Holes for chain attachment\n        translate([total_width/2 - 2, 0, 0])\n        cylinder(h=band_width + 1, r=1, center=true);\n    }\n}\n\n// Chain assembly\nmodule chain() {\n    for(i=[0:chain_links-1]) {\n        translate([total_width/2 + chain_link_size/2 + i*chain_link_size*0.8, -band_width - chain_length/2, 0])\n        rotate([0, 0, i*45])\n        chain_link();\n    }\n}\n\n// Assemble the ferronière\nunion() {\n    // Main band\n    ferroniere_band();\n    \n    // Central gem setting\n    translate([0, 0, band_thickness/2])\n    gem_setting();\n    \n    // Decorative rosettes\n    translate([-total_width/4, 0, band_thickness/2])\n    rosette(3);\n    translate([total_width/4, 0, band_thickness/2])\n    rosette(3);\n    \n    // Chain for securing at back\n    chain();\n}",
    "renders": true
  },
  {
    "historical_artifact": "aigrette",
    "openscad_code": "// Aigrette Historical Hair Ornament (Ottoman style, 18th century)\n// Overall height ~75mm, designed for 3D printing\n\nmodule feather_vane() {\n    // Main feather blade with realistic taper\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(d=2.5);\n            translate([0, 0, 40]) sphere(d=0.5);\n        }\n        \n        // Add feather texture grooves\n        for(i=[0:5:35]) {\n            translate([0, 0, i]) rotate([0, 0, 45]) \n                cube([20, 0.2, 0.5], center=true);\n        }\n    }\n}\n\nmodule feather_shaft() {\n    // Central rachis (quill)\n    color([0.8, 0.7, 0.5]) cylinder(h=45, d1=1.8, d2=0.8, center=false);\n}\n\nmodule feather() {\n    // Complete ostrich feather\n    union() {\n        // Main vane\n        color([0.9, 0.85, 0.8]) {\n            translate([0, 0, 3]) feather_vane();\n            translate([-2, 0, 6]) rotate([0, 10, 0]) \n                scale([0.8, 0.8, 0.8]) feather_vane();\n            translate([2, 0, 9]) rotate([0, -10, 0]) \n                scale([0.7, 0.7, 0.7]) feather_vane();\n        }\n        \n        // Shaft\n        translate([0, 0, -2]) feather_shaft();\n    }\n}\n\nmodule jewel_mount() {\n    // Decorative mount for gemstone\n    color([0.8, 0.7, 0]) {\n        // Base cup\n        cylinder(h=3, d=8, $fn=32);\n        translate([0, 0, 3]) cylinder(h=2, d=6, $fn=32);\n        \n        // Prongs\n        for(i=[0:45:315]) {\n            rotate([0, 0, i]) \n                translate([3.5, 0, 3]) cube([0.5, 0.5, 2]);\n        }\n    }\n}\n\nmodule gemstone() {\n    // Central diamond/cabochon\n    color([0.5, 0.8, 0.9, 0.8]) \n        translate([0, 0, 5.5]) sphere(d=5, $fn=32);\n}\n\nmodule support_structure() {\n    // Metal support for feathers\n    color([0.7, 0.6, 0.4]) {\n        // Main stem\n        cylinder(h=15, d=2.5, $fn=16);\n        \n        // Branching arms\n        translate([0, 0, 10]) rotate([0, 0, 30]) \n            cylinder(h=12, d=1.5, $fn=16);\n        translate([0, 0, 10]) rotate([0, 0, -30]) \n            cylinder(h=12, d=1.5, $fn=16);\n    }\n}\n\nmodule base_pin() {\n    // Hair pin base\n    color([0.7, 0.6, 0.4]) {\n        // Flattened base plate\n        translate([0, 0, -2]) \n            scale([1, 0.3, 1]) sphere(d=15, $fn=64);\n        \n        // Pin shaft\n        translate([0, 0, -15]) \n            cylinder(h=20, d=2, $fn=16);\n        \n        // Decorative scrolls\n        rotate([0, 0, 45]) translate([5, 0, -1]) \n            scale([0.3, 0.3, 1]) cylinder(h=3, d=8, $fn=16);\n        rotate([0, 0, -45]) translate([5, 0, -1]) \n            scale([0.3, 0.3, 1]) cylinder(h=3, d=8, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base assembly\n    base_pin();\n    \n    // Support structure\n    translate([0, 0, 0]) support_structure();\n    \n    // Central jewel\n    translate([0, 0, 15]) {\n        jewel_mount();\n        gemstone();\n    }\n    \n    // Feathers\n    translate([0, 0, 15]) rotate([0, 0, 30]) \n        scale([1, 1, 1]) feather();\n    translate([0, 0, 15]) rotate([0, 0, -30]) \n        scale([0.9, 0.9, 0.9]) feather();\n    translate([0, 0, 15]) rotate([0, 0, 0]) \n        scale([1.1, 1.1, 1.1]) feather();\n}",
    "renders": true
  },
  {
    "historical_artifact": "parure",
    "openscad_code": "// Parure - Historical jewelry set (Necklace, Earrings, Brooch) - Rococo style\n// Scaled for 3D printing, max dimension ~80mm\n\n$fn = 32;\n\n// Main colors\ngold = [0.83, 0.69, 0.22];\npearl = [0.95, 0.94, 0.92];\nruby = [0.70, 0.13, 0.13];\nemerald = [0.31, 0.78, 0.47];\n\n// Pearl module\nmodule pearl(d=4) {\n    color(pearl) sphere(d=d);\n}\n\n// Ruby gem module\nmodule ruby_gem(w=3, h=2) {\n    color(ruby) {\n        scale([1, 0.8, 1]) cylinder(h=h, d1=w, d2=w*1.2);\n    }\n}\n\n// Emerald gem module\nmodule emerald_gem(w=4, h=2) {\n    color(emerald) {\n        scale([0.8, 1, 1]) cylinder(h=h, d1=w, d2=w*0.8);\n    }\n}\n\n// Ornate gold link module\nmodule ornate_link() {\n    color(gold) {\n        difference() {\n            union() {\n                cylinder(h=2, d=6);\n                for(i=[0:5]) {\n                    rotate([0,0,i*60]) \n                        translate([3,0,1]) \n                            scale([0.3,1,2]) \n                                sphere(d=2);\n                }\n            }\n            cylinder(h=3, d=2);\n        }\n    }\n}\n\n// Necklace pendant\nmodule necklace_pendant() {\n    union() {\n        // Main pendant base\n        color(gold) {\n            difference() {\n                translate([0,0,1]) \n                    scale([1.5,1,0.3]) \n                        sphere(d=20);\n                translate([0,0,-1]) \n                    cylinder(h=5, d=8);\n            }\n        }\n        \n        // Central ruby\n        translate([0,0,3.5]) ruby_gem(6,4);\n        \n        // Pearl drops\n        for(i=[-1,1]) {\n            translate([i*8,-8,0]) {\n                pearl(3);\n                translate([0,0,-4]) pearl(2.5);\n            }\n        }\n        \n        // Emerald side stones\n        for(i=[-1,1]) {\n            translate([i*12,0,2]) emerald_gem(4,2);\n        }\n    }\n}\n\n// Single earring\nmodule earring() {\n    union() {\n        // Hook\n        color(gold) {\n            rotate([0,90,0]) \n                difference() {\n                    torus(15,1.5);\n                    translate([0,-15,-1]) cube([30,30,3], center=true);\n                }\n        }\n        \n        // Drop\n        translate([0,-15,0]) {\n            pearl(5);\n            translate([0,-7,0]) {\n                color(gold) scale([1,0.7,1]) sphere(d=4);\n                translate([0,-4,0]) ruby_gem(3,3);\n            }\n        }\n    }\n}\n\n// Brooch\nmodule brooch() {\n    union() {\n        // Main body\n        color(gold) {\n            difference() {\n                cylinder(h=3, d=25);\n                for(i=[0:7]) {\n                    rotate([0,0,i*45]) \n                        translate([8,0,1.5]) \n                            cylinder(h=4, d=2);\n                }\n            }\n        }\n        \n        // Center pearl\n        translate([0,0,4]) pearl(6);\n        \n        // Surrounding gems\n        for(i=[0:11]) {\n            rotate([0,0,i*30]) {\n                translate([9,0,3]) {\n                    if(i%2==0) ruby_gem(3,2);\n                    else emerald_gem(3,2);\n                }\n            }\n        }\n        \n        // Pin back\n        color(gold) translate([-12,0,-2]) cube([24,2,1]);\n    }\n}\n\n// Necklace chain\nmodule necklace_chain() {\n    for(i=[0:15]) {\n        translate([i*8-60,0,0]) {\n            ornate_link();\n            if(i%2==0) {\n                translate([0,0,-5]) pearl(3);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0,30,0]) necklace_pendant();\nnecklace_chain();\n\ntranslate([-20,-30,0]) rotate([0,0,10]) earring();\ntranslate([20,-30,0]) mirror([1,0,0]) rotate([0,0,10]) earring();\n\ntranslate([0,50,0]) brooch();",
    "renders": true
  },
  {
    "historical_artifact": "suite",
    "openscad_code": "// Egyptian Canopic Jar - Imsety (Human-headed)\n// Height: 75mm, Diameter: 40mm\n// Medium complexity realistic model with proper 3D printing support\n\n// Main colors\ncolor(\"burlywood\") // Sandstone-like color\n\n// Module for the jar body\nmodule jar_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 50, d = 40, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 48, d = 36, $fn = 64);\n        \n        // Rim detail\n        translate([0, 0, 50])\n            cylinder(h = 5, d1 = 38, d2 = 42, $fn = 64);\n    }\n}\n\n// Module for decorative band\nmodule decorative_band() {\n    translate([0, 0, 35])\n    difference() {\n        // Main band\n        cylinder(h = 8, d = 42, $fn = 128);\n        \n        // Hieroglyphic pattern recesses\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([20, 0, 0])\n            cube([4, 2, 8], center = true);\n        }\n    }\n}\n\n// Module for human head (Imsety)\nmodule human_head() {\n    translate([0, 0, 60])\n    union() {\n        // Head base\n        sphere(d = 38, $fn = 64);\n        \n        // Nose\n        translate([0, 10, 0])\n        scale([1, 2, 1])\n        sphere(d = 8, $fn = 32);\n        \n        // Eyes\n        for(x = [-7, 7]) {\n            translate([x, 8, 3])\n            color(\"black\")\n            sphere(d = 4, $fn = 16);\n        }\n        \n        // Eyebrows\n        for(x = [-7, 7]) {\n            translate([x, 12, 6])\n            rotate([0, 30, 0])\n            scale([1, 0.3, 0.3])\n            sphere(d = 8, $fn = 16);\n        }\n        \n        // Traditional nemes headdress\n        translate([0, -5, 10])\n        difference() {\n            // Main headdress\n            cube([45, 25, 20], center = true);\n            \n            // Head opening\n            translate([0, 0, 5])\n            sphere(d = 30, $fn = 64);\n        }\n        \n        // Headdress stripes\n        for(i = [-3:3]) {\n            color(\"darkgoldenrod\")\n            translate([i * 4, -15, 20])\n            cube([2, 5, 18]);\n        }\n    }\n}\n\n// Base platform\nmodule base() {\n    translate([0, 0, -3])\n    cylinder(h = 5, d1 = 45, d2 = 40, $fn = 64);\n}\n\n// Assemble the complete jar\nunion() {\n    base();\n    jar_body();\n    decorative_band();\n    human_head();\n}\n\n// Small offering inscription on front\ntranslate([0, -20.5, 25])\nrotate([90, 0, 0])\ncolor(\"saddlebrown\")\nlinear_extrude(height = 0.5)\ntext(\"IMSETY\", size = 4, halign = \"center\", font = \"Liberation Sans:style=Bold\");",
    "renders": true
  },
  {
    "historical_artifact": "solitaire",
    "openscad_code": "// Historical Roman Glass Gaming Die (Tessera) - Solitaire Artifact\n// Based on 1st-2nd century Roman dice used for gaming\n// Features characteristic ring-and-dot pattern decoration\n\n// Overall dimensions for 3D printing\n$fn = 32;\n\n// Main die body - slightly rounded edges for historical accuracy\nmodule die_body() {\n    color(\"LightSteelBlue\")\n    difference() {\n        // Main cube with slightly rounded corners\n        minkowski() {\n            cube([16, 16, 16], center = true);\n            sphere(1);\n        }\n        \n        // Hollow out center for printability\n        translate([0, 0, 0])\n        cube([12, 12, 12], center = true);\n    }\n}\n\n// Ring-and-dot pattern decoration characteristic of Roman dice\nmodule ring_dot(position, size) {\n    translate(position) {\n        // Outer ring\n        color(\"SteelBlue\")\n        cylinder(h = 1.5, r = size, center = true);\n        \n        // Inner dot\n        color(\"MidnightBlue\")\n        cylinder(h = 2, r = size * 0.3, center = true);\n    }\n}\n\n// Create face pattern based on Roman numeral value\nmodule face_pattern(value, face_normal) {\n    // Define positions for dots based on face value\n    positions = [\n        [], // 0 - shouldn't occur\n        [[0, 0, 0]], // 1\n        [[-4, -4, 0], [4, 4, 0]], // 2\n        [[-4, -4, 0], [0, 0, 0], [4, 4, 0]], // 3\n        [[-4, -4, 0], [4, -4, 0], [-4, 4, 0], [4, 4, 0]], // 4\n        [[-4, -4, 0], [4, -4, 0], [0, 0, 0], [-4, 4, 0], [4, 4, 0]], // 5\n        [[-4, -4, 0], [4, -4, 0], [-4, 0, 0], [4, 0, 0], [-4, 4, 0], [4, 4, 0]] // 6\n    ];\n    \n    // Rotate to proper face\n    rotate(face_normal) {\n        translate([0, 0, 8.5]) {\n            for(pos = positions[value]) {\n                ring_dot(pos, 1.5);\n            }\n        }\n    }\n}\n\n// Roman numeral inscriptions on edges\nmodule edge_inscription() {\n    color(\"Goldenrod\")\n    linear_extrude(height = 0.5) {\n        // I-VI in Roman numerals on edges\n        text(\"I\", size = 2, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Create the complete die\nmodule roman_die() {\n    union() {\n        // Main body\n        die_body();\n        \n        // Numbered faces (1-6)\n        face_pattern(1, [0, 0, 0]); // Top face\n        face_pattern(6, [180, 0, 0]); // Bottom face\n        face_pattern(2, [90, 0, 0]); // Front face\n        face_pattern(5, [-90, 0, 0]); // Back face\n        face_pattern(3, [0, 90, 0]); // Right face\n        face_pattern(4, [0, -90, 0]); // Left face\n        \n        // Decorative edge bevels\n        color(\"SkyBlue\")\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i*7.5, j*7.5, 7.5])\n                rotate([0, 90, 0])\n                cylinder(h = 1, r = 1);\n            }\n        }\n    }\n}\n\n// Display the artifact\nrotate([15, -15, 45])\n    roman_die();",
    "renders": true
  },
  {
    "historical_artifact": "cluster",
    "openscad_code": "// OpenSCAD code for a realistic cluster of ancient Roman oil lamps (50-100mm scale)\n// Based on 1st-3rd century AD terra sigillata oil lamps\n// Medium complexity model with proper 3D printing considerations\n\n// Overall dimensions: 80mm x 60mm x 25mm cluster\n\n// Colors for realistic terra sigillata appearance\ncolor([0.72, 0.45, 0.33]) // Terracotta color\n\n// Main cluster module\nmodule oil_lamp_cluster() {\n    \n    // Central lamp - largest in cluster\n    translate([0, 0, 0]) \n        oil_lamp(25, 0);\n    \n    // Secondary lamp - top right\n    translate([20, 10, 5])\n        rotate([0, 0, 15]) \n        oil_lamp(20, 30);\n    \n    // Third lamp - bottom left\n    translate([-15, -12, 3])\n        rotate([0, 0, -25]) \n        oil_lamp(22, -45);\n    \n    // Fourth lamp - small, top left\n    translate([-18, 15, 8])\n        rotate([0, 0, 45]) \n        oil_lamp(15, 60);\n    \n    // Fifth lamp - bottom right, partially buried\n    translate([15, -20, 2])\n        rotate([0, 0, -15]) \n        oil_lamp(18, -20);\n}\n\n// Individual oil lamp module\nmodule oil_lamp(diameter, rotation) {\n    // Main body - elliptical shape\n    scale([1.3, 1, 0.6])\n        sphere(d = diameter, $fn = 32);\n    \n    // Top surface detail\n    translate([0, 0, diameter*0.3])\n    difference() {\n        scale([1.2, 0.9, 0.2])\n            sphere(d = diameter, $fn = 32);\n        \n        // Central filling hole\n        translate([0, diameter*0.2, -0.5])\n            cylinder(h = diameter*0.5, d = diameter*0.3, $fn = 16);\n        \n        // Nozzle opening\n        translate([diameter*0.5, 0, -0.5])\n            rotate([0, 0, rotation])\n            cylinder(h = diameter*0.5, d1 = diameter*0.4, d2 = diameter*0.2, $fn = 8);\n    }\n    \n    // Handle loop\n    translate([-diameter*0.6, 0, diameter*0.2])\n    rotate([90, 0, 0])\n    difference() {\n        rotate_extrude($fn = 16)\n            translate([diameter*0.2, 0, 0])\n            circle(d = diameter*0.15, $fn = 8);\n        \n        // Hollow handle\n        rotate_extrude($fn = 16)\n            translate([diameter*0.2, 0, 0])\n            circle(d = diameter*0.08, $fn = 8);\n    }\n    \n    // Decorative ring around top\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([diameter*0.55, 0, diameter*0.3])\n        cylinder(h = diameter*0.05, d = diameter*0.08, $fn = 8);\n    }\n    \n    // Base ring for stability\n    difference() {\n        translate([0, 0, -diameter*0.3])\n        scale([1.25, 0.95, 0.1])\n            sphere(d = diameter, $fn = 32);\n        \n        translate([0, 0, -diameter*0.29])\n        scale([1.1, 0.8, 0.12])\n            sphere(d = diameter*0.9, $fn = 32);\n    }\n}\n\n// Generate the complete cluster\noil_lamp_cluster();",
    "renders": true
  },
  {
    "historical_artifact": "halo",
    "openscad_code": "// Halo Historical Artifact - Byzantine Crown Halo (8th-10th Century)\n// Based on Byzantine imperial crowns with jeweled halos\n\n// Overall dimensions\nhalo_diameter = 80;\nhalo_thickness = 3;\njewel_size = 4;\n\n// Main halo ring\nmodule halo_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h=halo_thickness, d=halo_diameter, $fn=100);\n        \n        // Inner cavity for weight reduction\n        translate([0, 0, -0.5])\n            cylinder(h=halo_thickness+1, d=halo_diameter-8, $fn=100);\n    }\n}\n\n// Decorative cross at top\nmodule top_cross() {\n    translate([0, halo_diameter/2 - 5, halo_thickness/2]) {\n        rotate([90, 0, 0]) {\n            // Vertical beam\n            color(\"gold\") \n                cube([3, 20, 3], center=true);\n            \n            // Horizontal beam\n            color(\"gold\")\n                translate([0, 5, 0])\n                cube([15, 3, 3], center=true);\n        }\n    }\n}\n\n// Pearl decoration module\nmodule pearl(x, y, angle) {\n    translate([x, y, halo_thickness/2]) {\n        rotate([0, 0, angle])\n        color(\"ivory\")\n            sphere(d=jewel_size, $fn=20);\n    }\n}\n\n// Ruby jewel module\nmodule ruby(x, y, angle) {\n    translate([x, y, halo_thickness/2]) {\n        rotate([0, 0, angle])\n        color(\"darkred\")\n            cylinder(h=jewel_size, d=jewel_size*0.8, $fn=6);\n    }\n}\n\n// Decorative pattern of pearls and rubies\nmodule jewel_decoration() {\n    // 8 pearls around the halo\n    for (i = [0:7]) {\n        angle = i * 45;\n        x = cos(angle) * (halo_diameter/2 - jewel_size);\n        y = sin(angle) * (halo_diameter/2 - jewel_size);\n        pearl(x, y, angle);\n        \n        // Alternating rubies between pearls\n        if (i % 2 == 0) {\n            angle2 = angle + 22.5;\n            x2 = cos(angle2) * (halo_diameter/2 - jewel_size*1.5);\n            y2 = sin(angle2) * (halo_diameter/2 - jewel_size*1.5);\n            ruby(x2, y2, angle2);\n        }\n    }\n}\n\n// Engraved inscription band (simplified as raised text)\nmodule inscription_band() {\n    translate([0, 0, halo_thickness/2 + 0.5]) {\n        color(\"gold\")\n        difference() {\n            cylinder(h=1, d=halo_diameter-4, $fn=100);\n            \n            // Negative space for \"IC XC\" inscription\n            translate([-8, 0, -0.5])\n                cube([16, 3, 2]);\n            translate([-2, -5, -0.5])\n                cube([4, 10, 2]);\n            translate([4, 0, -0.5])\n                cube([8, 3, 2]);\n        }\n    }\n}\n\n// Inner support ring for 3D printing\nmodule support_ring() {\n    color(\"gold\")\n    difference() {\n        cylinder(h=halo_thickness, d=halo_diameter-12, $fn=100);\n        cylinder(h=halo_thickness+1, d=halo_diameter-16, $fn=100);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"gold\") halo_ring();\n    color(\"gold\") support_ring();\n    top_cross();\n    jewel_decoration();\n    inscription_band();\n}",
    "renders": true
  },
  {
    "historical_artifact": "pave",
    "openscad_code": "// Roman Pave Coin (Antoninianus) - 3rd Century AD\n// Medium complexity model with realistic historical details\n\n$fn = 64;  // Smooth curves for printing\n\n// Main coin body\nmodule coin_base() {\n    color(\"goldenrod\") \n    cylinder(h = 4, d = 26);\n}\n\n// Raised rim around edge\nmodule coin_rim() {\n    color(\"darkgoldenrod\") \n    difference() {\n        cylinder(h = 1.5, d = 26);\n        translate([0, 0, -0.1]) \n            cylinder(h = 2, d = 23);\n    }\n}\n\n// Emperor bust (Radiate crown style)\nmodule emperor_bust() {\n    color(\"goldenrod\") {\n        // Head\n        translate([0, -3, 2.5]) \n            sphere(d = 8);\n        \n        // Radiate crown spikes\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) \n                translate([0, -3.5, 4]) \n                    rotate([45, 0, 0]) \n                        cylinder(h = 3, d1 = 1.2, d2 = 0.4);\n        }\n        \n        // Neck\n        translate([0, 0, 1.5]) \n            cylinder(h = 4, d1 = 5, d2 = 4);\n        \n        // Draped shoulders\n        translate([0, 4, 1]) \n            scale([1.2, 1, 0.6]) \n                sphere(d = 12);\n    }\n}\n\n// Reverse inscription band\nmodule inscription_band() {\n    color(\"goldenrod\") \n    translate([0, 0, 0.5]) \n        cylinder(h = 1, d = 22);\n}\n\n// Legionary standard reverse\nmodule legionary_standard() {\n    color(\"goldenrod\") {\n        // Standard pole\n        translate([0, 0, 2.5]) \n            cylinder(h = 8, d = 1.2);\n        \n        // Banner top\n        translate([0, 0, 6.5]) \n            sphere(d = 3);\n        \n        // Cross bar\n        translate([0, 0, 5.5]) \n            rotate([90, 0, 0]) \n                cylinder(h = 6, d = 0.8);\n        \n        // Banner streamers\n        translate([2.8, 0, 5.5]) \n            cube([1.5, 0.5, 3]);\n        translate([-4.3, 0, 5.5]) \n            cube([1.5, 0.5, 3]);\n    }\n}\n\n// Decorative border dots\nmodule border_dots() {\n    color(\"goldenrod\") \n    for(i = [0:22.5:360]) {\n        rotate([0, 0, i]) \n            translate([11.5, 0, 2]) \n                sphere(d = 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Base coin\n    coin_base();\n    \n    // Raised rim on both sides\n    translate([0, 0, 4]) \n        coin_rim();\n    translate([0, 0, 0]) \n        coin_rim();\n    \n    // Obverse (emperor side)\n    translate([0, 0, 3]) {\n        emperor_bust();\n        border_dots();\n    }\n    \n    // Reverse (standard side)\n    mirror([0, 0, 1]) {\n        translate([0, 0, -3]) {\n            inscription_band();\n            legionary_standard();\n            border_dots();\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "bezel",
    "openscad_code": "// Bronze Age Egyptian Scarab Bezel\n// A bezel ring mounting for a scarab seal, typical of Middle Kingdom Egypt (c. 2055-1650 BCE)\n\n// Overall dimensions for 3D printing\nbezel_diameter = 25;  // Outer ring diameter\nbezel_height = 8;     // Ring band height\nbezel_thickness = 2;  // Wall thickness\nscarab_length = 18;   // Scarab length\nscarab_width = 12;    // Scarab width\nscarab_height = 6;    // Scarab height\n\n// Create the ring band\nmodule ring_band() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=bezel_height, d=bezel_diameter, $fn=64);\n        \n        // Inner hole (slightly smaller for comfortable fit)\n        translate([0, 0, -0.1])\n            cylinder(h=bezel_height+0.2, d=bezel_diameter-2*bezel_thickness, $fn=64);\n        \n        // Decorative notches on top edge\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([bezel_diameter/2 - bezel_thickness/2, 0, bezel_height-1])\n                    cube([bezel_thickness, 2, 1], center=true);\n        }\n    }\n}\n\n// Create the scarab body\nmodule scarab_body() {\n    color(\"darkgreen\")\n    difference() {\n        // Main scarab body\n        scale([1, 0.7, 0.5])\n            sphere(d=scarab_length, $fn=32);\n        \n        // Head protrusion\n        translate([scarab_length/3, 0, scarab_height/2])\n            scale([0.3, 0.4, 0.3])\n                sphere(d=scarab_length/3, $fn=16);\n        \n        // Wing lines decoration\n        for(i=[-1:1]) {\n            rotate([0, 0, i*30])\n                translate([0, 0, scarab_height/2])\n                    cube([scarab_length*0.8, 0.5, 0.5], center=true);\n        }\n    }\n}\n\n// Create the bezel mount\nmodule bezel_mount() {\n    color(\"bronze\")\n    difference() {\n        union() {\n            // Ring band\n            ring_band();\n            \n            // Mounting platform for scarab\n            translate([0, 0, bezel_height])\n                cylinder(h=scarab_height/2, d=scarab_length+4, $fn=32);\n            \n            // Decorative lotus petals around mount\n            for(i=[0:7]) {\n                rotate([0, 0, i*45])\n                    translate([(scarab_length+4)/2, 0, bezel_height+scarab_height/4])\n                        scale([0.5, 0.3, 1])\n                            sphere(d=3, $fn=8);\n            }\n        }\n        \n        // Recess for scarab\n        translate([0, 0, bezel_height+0.5])\n            cube([scarab_length+1, scarab_width+1, scarab_height+1], center=true);\n    }\n}\n\n// Hieroglyphic inscription on base\nmodule inscription() {\n    color(\"gold\")\n    translate([0, 0, -bezel_height/2])\n        linear_extrude(height=0.3)\n            text(\"ANKH\", size=3, halign=\"center\", valign=\"center\", font=\"Liberation Sans:style=Bold\");\n}\n\n// Assemble the complete bezel\nbezel_mount();\ntranslate([0, 0, bezel_height+scarab_height/2+1])\n    scarab_body();\ninscription();",
    "renders": true
  },
  {
    "historical_artifact": "prong",
    "openscad_code": "// Historical Bronze Age Pronged Artifact (c. 1200-800 BCE)\n// A ritual prong with three tines used in ceremonial contexts\n\n$fn = 32;\n\n// Main parameters\nprong_length = 70;\nprong_width = 12;\nshaft_diameter = 8;\nbase_height = 15;\n\nmodule prong_tine(length, width, thickness) {\n    // Create a single tine with tapered end\n    difference() {\n        // Main tine body\n        hull() {\n            translate([0, 0, 0]) \n                cube([thickness, width * 0.8, length * 0.9], center = true);\n            translate([0, 0, length * 0.45]) \n                cube([thickness * 0.6, width * 0.4, length * 0.1], center = true);\n        }\n        \n        // Add slight curve to tine tip\n        translate([0, 0, length * 0.5])\n            rotate([0, 90, 0])\n                cylinder(h = thickness * 1.2, r = length * 0.15, center = true);\n    }\n}\n\nmodule decorative_ring(height, diameter) {\n    // Decorative ring with dot pattern\n    difference() {\n        cylinder(h = height, r = diameter/2, center = true);\n        cylinder(h = height + 0.2, r = diameter/2 - 1.5, center = true);\n    }\n    \n    // Dot pattern around ring\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([diameter/2 - 0.75, 0, 0])\n                sphere(r = 0.8);\n    }\n}\n\nmodule shaft() {\n    // Main shaft with grip texture\n    color(\"Bronze\")\n    difference() {\n        cylinder(h = prong_length * 0.6, r = shaft_diameter/2, center = true);\n        \n        // Hollow shaft for weight reduction\n        translate([0, 0, -prong_length * 0.31])\n            cylinder(h = prong_length * 0.62, r = shaft_diameter/2 - 2, center = true);\n    }\n    \n    // Grip rings\n    for(i = [1:3]) {\n        translate([0, 0, -prong_length * 0.25 + i * prong_length * 0.15])\n            decorative_ring(3, shaft_diameter + 2);\n    }\n}\n\nmodule prong_base() {\n    // Base with three mounting points for tines\n    color(\"Bronze\")\n    difference() {\n        cylinder(h = base_height, r1 = shaft_diameter/2 + 3, r2 = shaft_diameter/2 + 8, center = true);\n        translate([0, 0, base_height/2 + 0.1])\n            cylinder(h = base_height/2 + 1, r1 = shaft_diameter/2 - 1, r2 = shaft_diameter/2 - 1, center = true);\n    }\n    \n    // Decorative triangles around base\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([shaft_diameter/2 + 5.5, 0, base_height/4])\n                rotate([0, 90, 0])\n                    linear_extrude(height = 0.5)\n                        polygon([[0,0], [2,1], [0,2]]);\n    }\n}\n\nmodule full_prong() {\n    // Assemble the complete artifact\n    union() {\n        // Shaft\n        translate([0, 0, -prong_length/2 + base_height/2])\n            shaft();\n        \n        // Base\n        translate([0, 0, base_height/2])\n            prong_base();\n        \n        // Three tines at 120 degree intervals\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([0, shaft_diameter/2 + 2, base_height])\n                    rotate([0, -10, 0])\n                        prong_tine(prong_length * 0.4, prong_width/2, 3);\n        }\n        \n        // Central decorative element\n        translate([0, 0, base_height + prong_length * 0.2])\n            sphere(r = 2);\n    }\n}\n\n// Render the artifact\nfull_prong();",
    "renders": true
  },
  {
    "historical_artifact": "stud",
    "openscad_code": "// Bronze Age Celtic ring-headed stud (circa 800 BCE)\n// 3D printable, 70mm tall, wall thickness 2mm\n\n// Earth bronze tone\ncolor([0.55, 0.35, 0.15]) difference() {\n\n    // Main shank with slight taper\n    translate([0, 0, 25]) scale([1, 1, 1.2]) cylinder(h = 50, r1 = 12, r2 = 8);\n\n    // Hollow core for printing economy\n    translate([0, 0, 27]) cylinder(h = 46, r = 6);\n\n    // Ring head loop\n    translate([0, 0, 75]) rotate([90, 0, 0]) torus(20, 3.5);\n\n    // Decorative ring voids\n    for (a = [0 : 120 : 240]) {\n        rotate([0, 0, a]) translate([10, 0, 71]) rotate([90, 0, 0]) cylinder(h = 8, r = 1.5);\n    }\n}\n\n// Raised Celtic knot pattern around shank\nmodule knot_boss() {\n    color([0.45, 0.25, 0.05]) for (i = [0 : 30 : 330]) {\n        rotate([0, 0, i]) translate([9.5, 0, 45]) rotate([90, 0, 0]) scale([0.5, 0.5, 1]) cylinder(h = 3, r = 2.5);\n    }\n}\nknot_boss();\n\n// Engraved triskele symbols on ring\nmodule triskele(elev) {\n    color([0.45, 0.25, 0.05]) difference() {\n        // Outer circle plate\n        translate([0, 0, elev]) cylinder(h = 0.5, r = 17);\n        // Three spiral voids forming triskele\n        for (a = [0 : 120 : 240]) {\n            rotate([0, 0, a]) translate([8, 0, elev - 0.1]) scale([0.8, 0.8, 1]) cylinder(h = 0.7, r = 4);\n            rotate([0, 0, a + 35]) translate([11, 0, elev - 0.1]) scale([0.5, 0.5, 1]) cylinder(h = 0.7, r = 3);\n        }\n    }\n}\ntriskele(74.5);\n\n// Base nub for fitting into leather\ntranslate([0, 0, 0]) color([0.55, 0.35, 0.15]) cylinder(h = 5, r = 10);\ndifference() {\n    translate([0, 0, 2]) cylinder(h = 3, r = 9);\n    translate([0, 0, 1]) cylinder(h = 5, r = 7);\n}",
    "renders": true
  },
  {
    "historical_artifact": "hoop",
    "openscad_code": "// Bronze Age Hoop Earring (ca. 1200 BCE)\n// Realistic style, medium complexity\n// Designed for 3D printing - 60 mm outer diameter\n\n// Main parameters\nouter_d = 60;\nwire_d = 5;\nwall_thk = 1.5;\n\n// Decorative knobs\nknob_d = 3;\nknob_h = 1.5;\nknob_count = 16;\n\n// Hinge for clasp\nhinge_w = 4;\nhinge_pin_d = 1.5;\n\nmodule hoop_ring() {\n    color(\"bronze\") difference() {\n        // Main torus\n        rotate_extrude(angle = 345, $fn = 100)\n            translate([outer_d/2 - wire_d/2, 0, 0])\n                circle(d = wire_d, $fn = 32);\n        \n        // Clasp gap\n        translate([0, -outer_d/2 - 2, 0])\n            cube([wire_d + 2, 4, wire_d + 2], center = true);\n    }\n}\n\nmodule decorative_knobs() {\n    color(\"bronze\") for(i = [0:knob_count-1]) {\n        rotate([0, 0, i * (360/knob_count)])\n            translate([outer_d/2 - wire_d/2, 0, 0])\n                cylinder(d = knob_d, h = knob_h, center = true, $fn = 16);\n    }\n}\n\nmodule beaded_pattern() {\n    color(\"bronze\") for(i = [0:knob_count-1]) {\n        rotate([0, 0, i * (360/knob_count) + 11.25])\n            translate([outer_d/2 - wire_d/2, 0, 0])\n                sphere(d = 1.2, $fn = 8);\n    }\n}\n\nmodule clasp_mechanism() {\n    // Male clasp end\n    translate([(outer_d/2 - wire_d/2) * cos(345), \n               (outer_d/2 - wire_d/2) * sin(345), 0])\n        rotate([0, 0, 345])\n            union() {\n                // Hook\n                cylinder(d = 3, h = 4, $fn = 16);\n                translate([-1.5, 0, 4])\n                    cube([3, 1, 2]);\n            }\n    \n    // Female clasp end\n    translate([(outer_d/2 - wire_d/2) * cos(0), \n               (outer_d/2 - wire_d/2) * sin(0), 0])\n        rotate([0, 0, 0])\n            difference() {\n                // Receptacle\n                cube([3, hinge_w, 6], center = true);\n                translate([1.5, 0, -1])\n                    cube([0.5, hinge_w - 1, 8], center = true);\n            }\n}\n\nmodule age_patina() {\n    color([0.2, 0.4, 0.3, 0.3]) \n        scale([1.02, 1.02, 1.02])\n            rotate_extrude(angle = 345, $fn = 100)\n                translate([outer_d/2 - wire_d/2, 0, 0])\n                    circle(d = wire_d * 1.1, $fn = 32);\n}\n\n// Assemble the earring\nunion() {\n    hoop_ring();\n    decorative_knobs();\n    beaded_pattern();\n    clasp_mechanism();\n    age_patina();\n}",
    "renders": true
  },
  {
    "historical_artifact": "drop",
    "openscad_code": "// Ancient Roman Oil Lamp - Drop-shaped historical artifact\n// Approximately 75mm long, 45mm wide, 25mm high\n\n// Color definitions\ncolor_body = \"BurlyWood\";\ncolor_burn = \"SaddleBrown\";\ncolor_detail = \"Sienna\";\n\nmodule oil_lamp_body() {\n    color(color_body)\n    difference() {\n        // Main body - drop shape\n        scale([1, 0.8, 0.5])\n        sphere(d = 70, $fn = 64);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n        scale([0.9, 0.7, 0.4])\n        sphere(d = 65, $fn = 64);\n        \n        // Fill hole on top\n        translate([0, -15, 10])\n        rotate([0, 0, 0])\n        cylinder(h = 20, d = 12, $fn = 32);\n        \n        // Wick hole at front\n        translate([30, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 15, d = 8, $fn = 32);\n    }\n}\n\nmodule handle() {\n    color(color_body)\n    union() {\n        // Main handle curve\n        translate([-25, 0, 8])\n        rotate([0, 90, 0])\n        rotate_extrude(angle = 180, $fn = 32)\n        translate([15, 0, 0])\n        circle(d = 8, $fn = 16);\n        \n        // Handle grip ridges\n        for(i = [0:3]) {\n            translate([-25 + i*3, 0, 8])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 180, $fn = 32)\n            translate([13, 0, 0])\n            circle(d = 10, $fn = 16);\n        }\n    }\n}\n\nmodule decorative_pattern() {\n    color(color_detail)\n    // Top decorative ring\n    translate([0, 0, 0])\n    linear_extrude(height = 2)\n    difference() {\n        circle(d = 50, $fn = 64);\n        circle(d = 46, $fn = 64);\n    }\n    \n    // Side leaf patterns\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 2])\n        scale([1, 0.6, 1])\n        cylinder(h = 3, d1 = 12, d2 = 8, $fn = 16);\n    }\n    \n    // Central rosette\n    translate([0, -15, 12])\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([5, 0, 0])\n        scale([0.2, 1, 0.5])\n        sphere(d = 6, $fn = 16);\n    }\n}\n\nmodule wick_holder() {\n    color(color_burn)\n    translate([35, 0, 5])\n    rotate([90, 0, 0])\n    union() {\n        cylinder(h = 8, d = 10, $fn = 32);\n        cylinder(h = 3, d = 12, $fn = 32);\n    }\n}\n\nmodule base_ring() {\n    color(color_detail)\n    translate([0, 0, -12])\n    difference() {\n        cylinder(h = 4, d = 55, $fn = 64);\n        cylinder(h = 5, d = 45, $fn = 64);\n    }\n}\n\n// Assembly\nunion() {\n    oil_lamp_body();\n    handle();\n    decorative_pattern();\n    wick_holder();\n    base_ring();\n}\n\n// Alignment indicator for printing\n%translate([0, 0, -15])\ncolor(\"gray\", 0.2)\ncube([80, 60, 1], center = true);",
    "renders": true
  },
  {
    "historical_artifact": "dangle",
    "openscad_code": "// Ancient Egyptian Scarab Dangle Amulet\n// Based on New Kingdom period scarabs (1550-1070 BCE)\n\n// Color definitions\ncolor_bronze = [150/255, 90/255, 40/255];\ncolor_gold = [212/255, 175/255, 55/255];\ncolor_stone = [180/255, 170/255, 150/255];\n\n// Main parameters\ntotal_length = 65;\nscarab_size = 18;\nloop_diameter = 8;\nloop_thickness = 2;\n\n// Create the dangle\nunion() {\n    // Hanging loop\n    translate([0, 0, total_length - loop_diameter/2]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                torus(loop_diameter/2, loop_thickness, $fn=32);\n                // Cut for opening\n                translate([0, loop_diameter/2, 0]) {\n                    cube([loop_diameter*2, loop_diameter, loop_thickness*2], center=true);\n                }\n            }\n        }\n    }\n    \n    // Connector bar\n    color(color_bronze) {\n        translate([0, 0, total_length - loop_diameter - 5]) {\n            cylinder(h=5, d1=4, d2=2, $fn=16);\n        }\n    }\n    \n    // Scarab body\n    color(color_gold) {\n        translate([0, 0, total_length - loop_diameter - 5 - scarab_size/2]) {\n            union() {\n                // Main scarab body\n                scale([1.2, 1, 0.7]) sphere(d=scarab_size, $fn=32);\n                \n                // Head\n                translate([0, scarab_size/2 + 3, 0]) {\n                    scale([0.6, 0.8, 0.6]) sphere(d=scarab_size/2, $fn=16);\n                }\n                \n                // Wing cases\n                wing_case(-30);\n                wing_case(30);\n            }\n        }\n    }\n    \n    // Hieroglyphic inscription on base\n    color(color_stone) {\n        translate([0, 0, total_length - loop_diameter - 5 - scarab_size*0.8]) {\n            difference() {\n                cube([scarab_size*1.3, scarab_size*1.8, 2], center=true);\n                \n                // Carved symbols\n                for(i = [-2:2]) {\n                    translate([i*4, 0, -0.5]) {\n                        cylinder(h=2, d=2, $fn=6);\n                    }\n                }\n                \n                // Central sun disk\n                translate([0, 6, -0.5]) {\n                    cylinder(h=2, d=4, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Module for wing cases\nmodule wing_case(angle) {\n    rotate([0, 0, angle]) {\n        translate([scarab_size/3, 0, 0]) {\n            scale([0.8, 0.3, 0.2]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=scarab_size/2, d=scarab_size/1.5, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Module for torus shape (for hanging loop)\nmodule torus(outer_radius, tube_radius, fn) {\n    rotate_extrude($fn=fn) {\n        translate([outer_radius, 0, 0]) {\n            circle(r=tube_radius, $fn=fn);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "threader",
    "openscad_code": "// Historical Bronze Threader - 14th-15th Century European Style\n// Used for threading needles in textile work\n\nthreader_length = 80;\nthreader_width = 12;\nthickness = 3;\nhandle_length = 45;\nneedle_eye_diameter = 1.5;\nloop_thickness = 2;\n\nmodule decorative_ring(height, radius, segments) {\n    for(i = [0:segments-1]) {\n        rotate([0, 0, i * 360/segments])\n        translate([radius, 0, height/2])\n        rotate([90, 0, 0])\n        cylinder(h=height, r=1.2, $fn=6);\n    }\n}\n\nmodule grip_pattern() {\n    difference() {\n        cube([handle_length-10, threader_width-4, thickness]);\n        for(i = [0:3]) {\n            translate([5 + i * 8, 2, -0.5])\n            cube([4, threader_width-8, thickness+1]);\n        }\n    }\n}\n\nmodule inscription_band() {\n    color(\"bronze\")\n    translate([handle_length/2 - 5, 0, thickness/2 + 1])\n    rotate([90, 0, 0])\n    cylinder(h=3, r=threader_width/2 - 1, $fn=32);\n}\n\nmodule needle_threader() {\n    // Main handle body\n    color(\"bronze\")\n    union() {\n        // Handle shaft\n        translate([0, 0, 0])\n        cube([handle_length, threader_width, thickness], center=true);\n        \n        // Decorative end cap\n        translate([-handle_length/2 - 3, 0, 0])\n        sphere(r=threader_width/2, $fn=32);\n        \n        // Grip pattern on handle\n        translate([0, 0, 0])\n        grip_pattern();\n        \n        // Ornamental ring near threader end\n        translate([handle_length/2 - 5, 0, 0])\n        decorative_ring(thickness + 2, threader_width/2 - 1, 12);\n        \n        // Threading loop structure\n        translate([handle_length/2 + threader_length/4, 0, 0])\n        difference() {\n            // Main loop body\n            union() {\n                cube([threader_length/2, threader_width/3, loop_thickness], center=true);\n                translate([threader_length/2, 0, 0])\n                sphere(r=threader_width/6, $fn=16);\n            }\n            \n            // Needle eye hole\n            translate([threader_length/2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=threader_width/2, r=needle_eye_diameter, $fn=16);\n            \n            // Decorative cutouts\n            for(i = [0:2]) {\n                translate([handle_length/2 + 8 + i*5, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=loop_thickness+1, r=1, $fn=8);\n            }\n        }\n        \n        // Reinforcement ridge\n        translate([handle_length/2 - 8, 0, thickness/2 + 1])\n        cube([16, threader_width-2, 1.5], center=true);\n        \n        // Historical maker's mark\n        translate([-handle_length/2 + 5, 0, thickness/2 + 1])\n        cylinder(h=1, r=3, $fn=6);\n    }\n    \n    // Inscription band details\n    color([0.7, 0.5, 0.3])\n    inscription_band();\n}\n\n// Render the threader\nrotate([0, -20, 0])\nneedle_threader();",
    "renders": true
  },
  {
    "historical_artifact": "jacket",
    "openscad_code": "// Historical Roman Legionary Leather Subarmalis Jacket\n// 3D printable model with historical details - medium complexity\n\n$fn = 36;  // Smooth curves for printing\n\n// Main dimensions\njacket_length = 60;\njacket_width = 50;\nshoulder_width = 25;\nsleeve_length = 25;\nthickness = 3;\n\n// Historical colors\ncolor([0.4, 0.2, 0.05])  // Dark leather brown\n\n// Main jacket body\nmodule jacket_body() {\n    difference() {\n        // Front torso\n        translate([0, 0, jacket_length/2])\n            cube([jacket_width, thickness+1, jacket_length], center=true);\n        \n        // Neck hole\n        translate([0, thickness/2+1, jacket_length-10])\n            rotate([90, 0, 0])\n                cylinder(h=thickness+2, r=8, center=true);\n        \n        // Arm holes\n        translate([jacket_width/2-5, thickness/2+1, jacket_length-15])\n            rotate([90, 0, 0])\n                cylinder(h=thickness+2, r=7, center=true);\n        \n        mirror([1, 0, 0]) {\n            translate([jacket_width/2-5, thickness/2+1, jacket_length-15])\n                rotate([90, 0, 0])\n                    cylinder(h=thickness+2, r=7, center=true);\n        }\n    }\n}\n\n// Pteruges (leather strips)\nmodule pteruges() {\n    color([0.3, 0.15, 0.05])\n    for(i = [-20:5:20]) {\n        translate([i, thickness/2+2, 0])\n            cube([4, 1, 20]);\n    }\n}\n\n// Decorative brass studs\nmodule studs() {\n    color([0.7, 0.5, 0.1])\n    for(i = [-15:15:15]) {\n        for(j = [5:10:jacket_length-10]) {\n            translate([i, thickness/2+1, j])\n                sphere(r=1);\n        }\n    }\n}\n\n// Shoulder reinforcements\nmodule shoulder_pads() {\n    color([0.35, 0.18, 0.05])\n    translate([jacket_width/2-10, 0, jacket_length-15])\n        cube([10, thickness+1, 15]);\n    \n    mirror([1, 0, 0]) {\n        translate([jacket_width/2-10, 0, jacket_length-15])\n            cube([10, thickness+1, 15]);\n    }\n}\n\n// Back of jacket\nmodule jacket_back() {\n    color([0.4, 0.2, 0.05])\n    translate([0, -thickness-1, jacket_length/2])\n        cube([jacket_width, thickness, jacket_length], center=true);\n}\n\n// Belt loops\nmodule belt_loops() {\n    color([0.3, 0.15, 0.05])\n    for(i = [-20:10:20]) {\n        translate([i, thickness/2, jacket_length/2])\n            difference() {\n                cube([3, 2, 8]);\n                translate([0.5, -0.5, 1])\n                    cube([2, 3, 6]);\n            }\n    }\n}\n\n// Historical inscription\nmodule inscription() {\n    color([0.1, 0.05, 0.02])\n    translate([0, thickness/2+0.5, jacket_length-5])\n        scale([0.1, 0.1, 0.1])\n            linear_extrude(height=1)\n                text(\"LEG X FRET\", halign=\"center\", valign=\"center\", size=10);\n}\n\n// Assembly\nunion() {\n    jacket_body();\n    translate([0, 0, thickness/2]) jacket_back();\n    translate([0, 0, 0]) pteruges();\n    studs();\n    shoulder_pads();\n    belt_loops();\n    inscription();\n}",
    "renders": true
  },
  {
    "historical_artifact": "cuff",
    "openscad_code": "// Roman military manica (armored cuff) - 1st-2nd century AD\n// Based on finds from Carnuntum and Vindonissa\n\n// Overall dimensions for 3D printing\ncuff_length = 70;\ncuff_width = 55;\ncuff_thickness = 3;\n\n// Module for single lamellar plate\nmodule lamella_plate(width, height, thickness, rivet_count=3) {\n    // Main plate with rounded edges\n    difference() {\n        minkowski() {\n            cube([width, height, thickness], center=true);\n            cylinder(r=1, h=0.1, center=true);\n        }\n        \n        // Rivet holes\n        for(i = [-1, 0, 1]) {\n            translate([i * (width/3), 0, 0])\n                cylinder(r=1.2, h=thickness+1, center=true);\n        }\n    }\n    \n    // Decorative rivets\n    color(\"bronze\")\n    for(i = [-1, 0, 1]) {\n        translate([i * (width/3), 0, thickness/2 + 0.5])\n            cylinder(r=1, h=1, center=true);\n    }\n}\n\n// Module for leather backing\nmodule leather_backing() {\n    color(\"saddlebrown\")\n    difference() {\n        // Main curved backing\n        translate([0, 0, -cuff_thickness/2 - 2])\n            rotate([90, 0, 0])\n                cylinder(h=cuff_length, r1=cuff_width/2, r2=cuff_width/2 - 5, center=true);\n        \n        // Strap holes\n        for(i = [-1, 1]) {\n            translate([i * 15, cuff_length/2 - 10, -cuff_thickness/2 - 2])\n                rotate([90, 0, 0])\n                    cylinder(h=5, r=2.5, center=true);\n            translate([i * 15, -cuff_length/2 + 10, -cuff_thickness/2 - 2])\n                rotate([90, 0, 0])\n                    cylinder(h=5, r=2.5, center=true);\n        }\n    }\n}\n\n// Module for decorative border\nmodule decorative_border() {\n    color(\"bronze\")\n    for(i = [-1, 1]) {\n        // Top and bottom decorative bands\n        translate([0, i * (cuff_length/2 - 5), 0])\n            cube([cuff_width + 6, 4, cuff_thickness + 2], center=true);\n        \n        // Rivets along border\n        for(j = [-4:4]) {\n            translate([j * 5, i * (cuff_length/2 - 5), cuff_thickness/2 + 1])\n                cylinder(r=1.5, h=2, center=true);\n        }\n    }\n}\n\n// Main assembly\nmodule manica_cuff() {\n    // Base leather structure\n    leather_backing();\n    \n    // Lamellar plates\n    plate_width = 12;\n    plate_height = 8;\n    plate_gap = 2;\n    \n    for(row = [-3:3]) {\n        for(col = [-2:2]) {\n            translate([col * (plate_width + plate_gap), \n                      row * (plate_height + plate_gap), \n                      0])\n                lamella_plate(plate_width, plate_height, cuff_thickness);\n        }\n    }\n    \n    // Decorative elements\n    decorative_border();\n    \n    // Central boss decoration\n    color(\"bronze\")\n    translate([0, 0, cuff_thickness/2 + 3])\n        cylinder(r=8, h=4, center=true);\n    \n    // Boss rivets\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([5, 0, cuff_thickness/2 + 5])\n                cylinder(r=1.5, h=2, center=true);\n    }\n    \n    // Straps\n    color(\"saddlebrown\")\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, -cuff_thickness/2 - 3])\n            cube([4, cuff_length - 20, 2], center=true);\n    }\n}\n\n// Generate the cuff\nmanica_cuff();",
    "renders": true
  },
  {
    "historical_artifact": "armband",
    "openscad_code": "// Ancient Egyptian Gold Armband - New Kingdom Period (1550-1070 BCE)\n// Based on artifacts found in Tutankhamun's tomb and other royal burials\n\n$fn = 32;\nwall_thickness = 2;\nband_width = 25;\nband_diameter = 70;\nband_height = 15;\n\n// Main armband body\nmodule armband_body() {\n    color(\"gold\") difference() {\n        // Outer torus shape\n        rotate_extrude(angle = 360, $fn = 100)\n            translate([band_diameter/2, 0, 0])\n                square([band_width, band_height]);\n        \n        // Inner hollow space for arm\n        rotate_extrude(angle = 360, $fn = 100)\n            translate([(band_diameter - wall_thickness*2)/2, 0, 0])\n                square([band_width - wall_thickness*2, band_height - wall_thickness]);\n    }\n}\n\n// Decorative scarab centerpiece\nmodule scarab() {\n    color(\"gold\") {\n        // Scarab body\n        translate([0, 0, band_height + 2])\n            scale([1, 1.3, 0.8])\n                sphere(d = 12);\n        \n        // Scarab head\n        translate([0, 7, band_height + 2])\n            sphere(d = 6);\n        \n        // Wing cases\n        translate([-6, -2, band_height + 1.5])\n            rotate([0, 0, -30])\n                cube([8, 4, 1]);\n        translate([6, -2, band_height + 1.5])\n            rotate([0, 0, 30])\n                cube([8, 4, 1]);\n    }\n}\n\n// Lotus flower decorations\nmodule lotus(decoration_angle) {\n    color(\"gold\") rotate([0, 0, decoration_angle]) {\n        translate([band_diameter/2 + band_width/2 - 3, 0, band_height/2])\n            for(i = [0:60:300]) {\n                rotate([0, 0, i])\n                    translate([0, 4, 0])\n                        cylinder(h = 3, d1 = 4, d2 = 2);\n            }\n    }\n}\n\n// Hieroglyphic inscription band\nmodule inscription_band() {\n    color(\"gold\") rotate_extrude(angle = 360, $fn = 200)\n        translate([(band_diameter - wall_thickness)/2, 0, band_height - 2])\n            square([wall_thickness, 1]);\n}\n\n// Falcon head terminals (traditional Egyptian motif)\nmodule falcon_head(angle) {\n    color(\"gold\") rotate([0, 0, angle]) {\n        translate([band_diameter/2 + band_width/2 - 5, 0, band_height/2])\n            rotate([0, 90, 0])\n                difference() {\n                    // Falcon head shape\n                    cylinder(h = 8, d1 = 10, d2 = 6);\n                    \n                    // Eye detail\n                    translate([4, 2, 0])\n                        sphere(d = 2);\n                }\n    }\n}\n\n// Assembly\narmband_body();\n\n// Add decorations around the band\nfor(i = [0:45:315]) {\n    lotus(i);\n}\n\n// Falcon heads at cardinal points\nfalcon_head(0);\nfalcon_head(180);\n\n// Scarab centerpiece on top\nscarab();\n\n// Inscription band for hieroglyphs\ninscription_band();",
    "renders": true
  },
  {
    "historical_artifact": "wristlet",
    "openscad_code": "// Bronze Age Wristlet - Historical Artifact\n// Based on Celtic bronze arm rings from 800-600 BCE\n\n$fn = 32; // Smooth curves for printing\n\n// Main dimensions\nband_width = 8;\nband_thickness = 3;\ninner_diameter = 55;\nouter_diameter = inner_diameter + 2*band_thickness;\nheight = 12;\n\n// Terminal dimensions\nterminal_length = 15;\nterminal_width = 10;\nterminal_thickness = 4;\n\n// Decorative bead dimensions\nbead_diameter = 4;\nbead_spacing = 15;\nnum_beads = 6;\n\n// Main band with slight oval shape\nmodule main_band() {\n    color(\"bronze\") \n    difference() {\n        // Outer form - slightly oval\n        scale([1.05, 1, 1])\n        cylinder(h=height, d=outer_diameter, center=true);\n        \n        // Inner hollow\n        scale([1.05, 1, 1])\n        cylinder(h=height+2, d=inner_diameter, center=true);\n    }\n}\n\n// Decorative raised ridges\nmodule decorative_ridges() {\n    color(\"bronze\") \n    for(i = [-1, 1]) {\n        translate([0, 0, i*height/4])\n        difference() {\n            cylinder(h=1, d=outer_diameter+1, center=true);\n            cylinder(h=2, d=outer_diameter-2, center=true);\n        }\n    }\n}\n\n// Terminal knobs with spiral pattern\nmodule terminal_knob(side) {\n    color(\"bronze\") \n    translate([0, side*(inner_diameter/2 + terminal_length/2), 0])\n    rotate([90, 0, 0])\n    union() {\n        // Main terminal body\n        cylinder(h=terminal_length, d=terminal_width);\n        \n        // Spiral decoration using scaled cylinders\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([0, terminal_width/4, terminal_length/2])\n            scale([1, 0.3, 0.3])\n            sphere(d=terminal_width);\n        }\n    }\n}\n\n// Decorative beads along band\nmodule decorative_beads() {\n    color(\"bronze\") \n    for(i = [0:num_beads-1]) {\n        angle = i * 360/num_beads;\n        rotate([0, 0, angle])\n        translate([0, outer_diameter/2 + bead_diameter/2 - 1, 0])\n        sphere(d=bead_diameter);\n    }\n}\n\n// Engraved pattern simulation\nmodule engraved_pattern() {\n    color(\"bronze\") \n    for(i = [0:11]) {\n        angle = i * 30;\n        rotate([0, 0, angle])\n        translate([0, (inner_diameter + outer_diameter)/4, 0])\n        cube([1, 2, height*0.8], center=true);\n    }\n}\n\n// Assemble the wristlet\nunion() {\n    // Main structure\n    main_band();\n    \n    // Decorative elements\n    decorative_ridges();\n    terminal_knob(1);  // Top terminal\n    terminal_knob(-1); // Bottom terminal\n    \n    // Surface decorations\n    decorative_beads();\n    engraved_pattern();\n}",
    "renders": true
  },
  {
    "historical_artifact": "chain",
    "openscad_code": "// Historical Chain Link Artifact - Roman Legionary Chain Fragment (Medium Complexity)\n// Based on archaeological finds from 1st-2nd century CE\n\n// Parameters for 3D printing compatibility\n$fn = 32;  // Circle resolution for smooth curves\nwall_thickness = 2.0;  // Minimum wall thickness for printing\nlink_outer_diameter = 12;\nlink_inner_diameter = 8;\nlink_thickness = 2;\n\n// Main chain assembly\nmodule roman_chain_fragment() {\n    // Create 4 connected links in a historical pattern\n    color(\"Goldenrod\") {\n        // First link - base link\n        translate([0, 0, 0])\n            roman_link();\n        \n        // Second link - rotated 90 degrees and connected\n        translate([link_outer_diameter, 0, 0])\n            rotate([0, 90, 0])\n            roman_link();\n        \n        // Third link - back to original orientation\n        translate([link_outer_diameter*2, 0, 0])\n            roman_link();\n        \n        // Fourth link - with decorative terminal\n        translate([link_outer_diameter*3, 0, 0])\n            rotate([0, 90, 0])\n            roman_link_with_terminal();\n    }\n}\n\n// Basic Roman chain link with characteristic oval shape\nmodule roman_link() {\n    difference() {\n        // Outer oval shape\n        scale([1.3, 1, 1])\n            rotate_extrude(angle = 360, $fn = $fn)\n            translate([link_outer_diameter/2, 0, 0])\n            circle(r = link_thickness);\n        \n        // Inner opening\n        scale([1.3, 1, 1])\n            rotate_extrude(angle = 360, $fn = $fn)\n            translate([link_inner_diameter/2, 0, 0])\n            circle(r = link_thickness - 0.5);\n    }\n    \n    // Add characteristic forge weld marks (slight bulges)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([link_outer_diameter/2 * 1.3, 0, 0])\n        scale([1.2, 1.2, 1.2])\n        sphere(r = link_thickness/2);\n    }\n}\n\n// Terminal link with decorative element\nmodule roman_link_with_terminal() {\n    union() {\n        // Standard link\n        roman_link();\n        \n        // Decorative terminal - characteristic Roman acorn shape\n        translate([link_outer_diameter*1.5, 0, 0])\n            rotate([90, 0, 0])\n            scale([0.8, 0.8, 1.2])\n            union() {\n                // Acorn body\n                sphere(r = 4);\n                \n                // Acorn cap with texture\n                translate([0, 0, 3.5])\n                difference() {\n                    cylinder(h = 2, r = 3.5);\n                    // Add decorative grooves\n                    for (i = [0:5]) {\n                        rotate([0, 0, i * 30])\n                        translate([2.5, 0, 0])\n                        cube([1, 0.5, 2.5], center = true);\n                    }\n                }\n            }\n        \n        // Small connecting ring between link and terminal\n        translate([link_outer_diameter*1.1, 0, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 0.8, r = 2);\n                cylinder(h = 1, r = 1.2);\n            }\n    }\n}\n\n// Create the complete chain fragment\nroman_chain_fragment();",
    "renders": true
  },
  {
    "historical_artifact": "lariat",
    "openscad_code": "// Historical Spanish Colonial Lariat (reata) - 18th century vaquero design\n// Designed for 3D printing, 80mm total length\n\n// Color constants\n$fn = 50;\n\nmodule lariat_main_rope() {\n    // Main rope body - 5-strand twist\n    color([0.45, 0.32, 0.18]) {\n        difference() {\n            hull() {\n                for(i = [0:4]) {\n                    rotate([0, 0, i*72]) \n                        translate([0, 0, -40]) \n                            cylinder(h=80, r=4, center=true);\n                }\n            }\n            // Carve grooves for rope texture\n            for(i = [0:20]) {\n                translate([0, 0, -40 + i*4]) \n                    rotate([0, 0, i*15]) \n                        cylinder(h=2, r=3.8, center=true);\n            }\n        }\n    }\n}\n\nmodule honda_loop() {\n    // The honda - reinforced eyelet at working end\n    color([0.35, 0.25, 0.15]) {\n        translate([0, 0, -38]) {\n            // Reinforced honda body\n            difference() {\n                cylinder(h=8, r=8, center=true);\n                cylinder(h=10, r=5, center=true);\n            }\n            // Metal reinforcement ring\n            color([0.4, 0.4, 0.4]) {\n                translate([0, 0, -4]) \n                    rotate_extrude() \n                        translate([7, 0, 0]) \n                            circle(r=0.5);\n            }\n        }\n    }\n}\n\nmodule decorative_knot() {\n    // Decorative knot at standing end\n    color([0.5, 0.35, 0.2]) {\n        translate([0, 0, 38]) {\n            // Base knot body\n            sphere(r=6);\n            \n            // Knot details\n            for(i = [0:5]) {\n                rotate([0, i*60, 0]) \n                    translate([3, 0, 0]) \n                        sphere(r=2.5);\n            }\n            \n            // Hanging loop\n            translate([0, 0, 6]) {\n                rotate_extrude(angle=180) {\n                    translate([3, 0, 0]) \n                        circle(r=2);\n                }\n            }\n        }\n    }\n}\n\nmodule wear_marks() {\n    // Realistic wear patterns from use\n    color([0.6, 0.45, 0.25]) {\n        // Honda contact wear\n        translate([0, 0, -35]) {\n            for(i = [0:3]) {\n                rotate([0, 0, i*120]) \n                    translate([7, 0, 0]) \n                        scale([1, 0.3, 0.2]) \n                            sphere(r=3);\n            }\n        }\n        \n        // Hand grip wear patterns\n        for(i = [0:2]) {\n            translate([0, 0, 15 + i*10]) {\n                rotate([0, 90, 0]) {\n                    scale([0.8, 0.3, 1]) \n                        cylinder(h=8, r=4.2, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_stamping() {\n    // Traditional decorative stamping patterns\n    color([0.3, 0.3, 0.3]) {\n        // Small decorative conchos\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) \n                translate([0, 0, -20 + i*5]) {\n                    scale([1, 1, 0.3]) \n                        cylinder(h=0.5, r=1.2, center=true);\n                    translate([0, 0, 0.3]) \n                        sphere(r=0.8);\n                }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    lariat_main_rope();\n    honda_loop();\n    decorative_knot();\n    wear_marks();\n    decorative_stamping();\n}",
    "renders": true
  },
  {
    "historical_artifact": "rope",
    "openscad_code": "// Historical Rope Fragment - Medieval Mooring Rope with Turk's Head Knot\n// Based on 14th century ship mooring ropes found in London docks\n// Features realistic rope construction and decorative knot work\n\n// Main parameters for 3D printing\nrope_length = 80;\nrope_diameter = 8;\nsegment_length = 5;\nknot_diameter = 12;\n\n// Rope color - weathered hemp\ncolor([0.45, 0.32, 0.22]) \n\n// Module for individual rope strand\nmodule rope_strand(strand_diameter, length, twist_angle) {\n    rotate([0, 0, twist_angle])\n        for(i = [0:segment_length:length-segment_length]) {\n            translate([0, 0, i])\n                cylinder(h=segment_length, d=strand_diameter, $fn=8);\n        }\n}\n\n// Module for main rope body (3-strand construction)\nmodule rope_body(length, diameter) {\n    union() {\n        // Three twisted strands\n        for(strand = [0:120:240]) {\n            rope_strand(diameter/2.2, length, strand);\n        }\n        \n        // Central core for structure\n        cylinder(h=length, d=diameter/3, $fn=12);\n    }\n}\n\n// Turk's Head Knot decorative element\nmodule turks_head_knot(position) {\n    translate([0, 0, position])\n    difference() {\n        // Main knot body\n        union() {\n            // Outer ring\n            rotate_extrude($fn=32)\n                translate([knot_diameter/2, 0, 0])\n                    circle(r=rope_diameter/2, $fn=8);\n            \n            // Cross strands\n            for(angle = [0:45:315]) {\n                rotate([0, 0, angle])\n                    translate([0, 0, 0])\n                        cube([knot_diameter, rope_diameter, rope_diameter], center=true);\n            }\n        }\n        \n        // Center hole\n        cylinder(h=rope_diameter+1, d=rope_diameter/2, center=true, $fn=16);\n    }\n}\n\n// Worn section with frayed ends\nmodule frayed_section(position) {\n    translate([0, 0, position])\n    for(i = [0:3:15]) {\n        rotate([0, 90, i*12])\n            translate([rope_diameter/2, 0, i/2])\n                cylinder(h=2, d=1.5, $fn=6);\n    }\n}\n\n// Historical maker's mark inscription\nmodule makers_mark(position) {\n    translate([rope_diameter/2 + 2, 0, position])\n    rotate([0, 90, 0])\n    linear_extrude(height=1)\n        text(\"W\", size=3, font=\"Times New Roman:style=Bold\");\n}\n\n// Main assembly\nunion() {\n    // Main rope body\n    rope_body(rope_length, rope_diameter);\n    \n    // Turk's Head knot at quarter position\n    turks_head_knot(rope_length/4);\n    \n    // Second Turk's Head knot at three-quarter position\n    turks_head_knot(3*rope_length/4);\n    \n    // Frayed end near termination\n    frayed_section(rope_length - 10);\n    \n    // Historical maker's mark\n    makers_mark(rope_length/2);\n    \n    // Reinforced eye splice at start\n    translate([0, 0, -3])\n        difference() {\n            cylinder(h=6, d=rope_diameter*1.5, $fn=16);\n            translate([0, rope_diameter/2, 3])\n                rotate([90, 0, 0])\n                    cylinder(h=rope_diameter*2, d=rope_diameter*0.8, center=true, $fn=16);\n        }\n}\n\n// Weathering detail - surface wear marks\nfor(wear = [0:20:rope_length-20]) {\n    translate([rope_diameter/2, 0, wear])\n        rotate([90, 0, 0])\n            scale([1.2, 0.3, 0.1])\n                sphere(d=rope_diameter, $fn=8);\n}",
    "renders": true
  },
  {
    "historical_artifact": "twist",
    "openscad_code": "// Twisted Egyptian Scarab Seal Amulet (Middle Kingdom style)\n// A realistic replica of a scarab seal with twisted rope border\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule scarab_seal()\n{\n    // Base scarab body (oval shape)\n    color(\"DarkGoldenrod\") \n    difference() {\n        scale([1, 0.7, 0.6]) \n        sphere(d=35);\n        \n        // Flatten bottom\n        translate([0, 0, -5]) \n        cube([40, 40, 10], center=true);\n    }\n    \n    // Head section\n    color(\"Goldenrod\") \n    translate([15, 0, 8]) \n    rotate([0, 90, 0]) \n    cylinder(h=12, d1=10, d2=8);\n    \n    // Eyes (two small spheres)\n    for(i = [-1, 1]) {\n        color(\"Black\") \n        translate([16, i*4, 10]) \n        sphere(d=2);\n    }\n    \n    // Wing cases (elytra) - carved detail\n    color(\"DarkGoldenrod\") \n    for(angle = [45, -45]) {\n        rotate([0, 0, angle]) \n        translate([0, 12, 6]) \n        scale([0.3, 1, 0.1]) \n        sphere(d=20);\n    }\n    \n    // Twisted rope border\n    module twisted_rope_segment(angle)\n    {\n        rotate([0, 0, angle]) \n        translate([16.5, 0, -2]) \n        rotate([90, 0, 0]) \n        cylinder(h=1.5, d=3, $fn=8);\n    }\n    \n    // Generate twisted rope border with 36 segments\n    for(i = [0:10:359]) {\n        color(\"Brown\") \n        twisted_rope_segment(i);\n        \n        // Second strand of twist\n        color(\"Tan\") \n        translate([0, 0, 0.5]) \n        twisted_rope_segment(i + 5);\n    }\n    \n    // Legs (six total)\n    color(\"Goldenrod\") \n    for(side = [-1, 1]) {\n        for(pos = [-8, 0, 8]) {\n            translate([pos, side*12, 0]) \n            rotate([90, 0, side*30]) \n            cylinder(h=8, d1=3, d2=2);\n        }\n    }\n    \n    // Hieroglyphic inscription on base\n    color(\"Black\") \n    translate([0, 0, -2.9]) \n    linear_extrude(height=0.5) {\n        // Cartouche oval\n        scale([0.8, 0.3, 1]) \n        circle(d=25);\n        \n        // Central symbol (Ankh)\n        translate([0, 0, 0]) \n        scale(0.3) \n        union() {\n            circle(d=8);\n            translate([0, -6, 0]) \n            square([3, 10], center=true);\n            translate([0, -11, 0]) \n            square([8, 3], center=true);\n        }\n    }\n    \n    // Small decorative dots around edge\n    for(i = [0:30:359]) {\n        color(\"Goldenrod\") \n        rotate([0, 0, i]) \n        translate([15, 0, 5]) \n        sphere(d=1);\n    }\n}\n\n// Create the scarab seal\nscarab_seal();",
    "renders": true
  },
  {
    "historical_artifact": "link",
    "openscad_code": "// Roman Legionary Link - Lorica Segmentata Hinge\n// Historically accurate reproduction of a 1st-2nd century AD armor link\n// Used to connect overlapping steel plates of Roman segmented armor\n\n$fn = 48;  // Smooth curves for 3D printing\nwall_thickness = 2.5;  // Minimum printable wall thickness\n\n// Main dimensions (historically accurate proportions)\nlink_length = 65;  // mm\nlink_width = 35;   // mm\nlink_thickness = 8;  // mm\nhinge_diameter = 12;  // mm\nring_diameter = 22;  // mm\n\n// Decorative elements\nborder_width = 3;\nrivet_diameter = 4;\n\nmodule roman_rivet(x, y) {\n    // Decorative brass rivets used in period armor\n    translate([x, y, link_thickness/2 + 1]) {\n        color([0.8, 0.6, 0.2])  // Brass color\n        union() {\n            cylinder(h=2, d=rivet_diameter, center=true);\n            translate([0, 0, 1]) \n                sphere(d=rivet_diameter);\n        }\n    }\n}\n\nmodule decorative_border() {\n    // Raised border typical of Roman metalwork\n    color([0.7, 0.7, 0.7])  // Iron color\n    translate([0, 0, link_thickness/2 - border_width/2]) {\n        difference() {\n            cube([link_length, link_width, border_width], center=true);\n            cube([link_length - border_width*2, link_width - border_width*2, border_width + 0.1], center=true);\n        }\n    }\n}\n\nmodule hinge_loop(side) {\n    // Hinge loops for leather thong attachment\n    // Historical loops were forged from wrought iron\n    translate([side * link_length/2 - side*2, 0, 0]) {\n        color([0.65, 0.65, 0.65])  // Dark iron\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=8, d=hinge_diameter, center=true);\n                translate([0, 0, -4.1]) \n                    cube([hinge_diameter*0.8, hinge_diameter*0.8, 8.2], center=true);\n            }\n        }\n    }\n}\n\nmodule attachment_ring(side) {\n    // Central ring for attaching to armor plates\n    translate([side * link_length/4, 0, 0]) {\n        color([0.7, 0.7, 0.7])  // Iron color\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=link_thickness, d=ring_diameter, center=true);\n                cylinder(h=link_thickness + 0.2, d=ring_diameter - wall_thickness*2, center=true);\n            }\n        }\n    }\n}\n\nmodule roman_inscription() {\n    // Simplified SPQR inscription (Senatus Populusque Romanus)\n    translate([0, 0, link_thickness/2 + 0.1]) {\n        color([0.1, 0.1, 0.1])  // Engraved black\n        for(i = [-1:1]) {\n            translate([i*8, 0, 0]) {\n                cube([3, 2, 0.2], center=true);\n            }\n        }\n    }\n}\n\nmodule lorica_link() {\n    // Main link body - forged iron construction\n    color([0.75, 0.75, 0.75])  // Weathered iron\n    difference() {\n        // Main plate\n        cube([link_length, link_width, link_thickness], center=true);\n        \n        // Rounded ends for safety and comfort\n        translate([link_length/2 - link_width/2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=link_width, d=link_width, center=true);\n        translate([-link_length/2 + link_width/2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=link_width, d=link_width, center=true);\n    }\n    \n    // Add decorative elements\n    decorative_border();\n    \n    // Historical attachment points\n    hinge_loop(1);    // Right side\n    hinge_loop(-1);   // Left side\n    attachment_ring(1);   // Right center\n    attachment_ring(-1);  // Left center\n    \n    // Period-appropriate rivets\n    roman_rivet(link_length/3, link_width/3);\n    roman_rivet(-link_length/3, link_width/3);\n    roman_rivet(link_length/3, -link_width/3);\n    roman_rivet(-link_length/3, -link_width/3);\n    \n    // Roman inscription\n    roman_inscription();\n}\n\n// Generate the complete link\nlorica_link();",
    "renders": true
  },
  {
    "historical_artifact": "mesh",
    "openscad_code": "// Mesopotamian Cuneiform Tablet – Meshed Reconstruction\n// Wall thickness ≈ 2 mm, printable without support\n// Overall size ≈ 75 × 50 × 12 mm\n\n// Color palette\n$fa = 2; $fs = 0.5;\n\n/* ===== Core tablet body ===== */\nmodule tablet_body() {\n    difference() {\n        // Main clay slab\n        color(\"burlywood\")\n        translate([0, 0, 1])\n            cube([75, 50, 10], center = true);\n\n        // Hollow inside for 2 mm shell\n        color(\"burlywood\")\n        translate([0, 0, 1])\n            cube([71, 46, 12], center = true);\n    }\n}\n\n/* ===== Repetitive cuneiform wedge pattern ===== */\nmodule wedge(x, y, angle) {\n    translate([x, y, 6])\n    rotate([0, 0, angle])\n    color(\"saddlebrown\")\n    linear_extrude(height = 2.5, scale = 0.5) \n    polygon(points = [[0, 0], [2, 1], [4, 0], [2, -1]]);\n}\n\n/* ===== Stylus impressions – front side ===== */\nmodule front_inscriptions() {\n    for (row = [0:4])\n        for (col = [0:7]) {\n            wedge(-30 + col * 8, -20 + row * 8, 90);\n        }\n}\n\n/* ===== Stylus impressions – back side ===== */\nmodule back_inscriptions() {\n    for (row = [0:3])\n        for (col = [0:5]) {\n            wedge(-25 + col * 10, 15 - row * 10, 0);\n        }\n}\n\n/* ===== Reinforcing edge bands ===== */\nmodule edges() {\n    // Top edge\n    translate([0, 25, 6])\n    color(\"sandybrown\")\n    cube([77, 4, 4], center = true);\n\n    // Bottom edge\n    translate([0, -25, 6])\n    color(\"sandybrown\")\n    cube([77, 4, 4], center = true);\n\n    // Left edge\n    translate([-37.5, 0, 6])\n    color(\"sandybrown\")\n    cube([4, 54, 4], center = true);\n\n    // Right edge\n    translate([37.5, 0, 6])\n    color(\"sandybrown\")\n    cube([4, 54, 4], center = true);\n}\n\n/* ===== Optional display stand ===== */\nmodule stand() {\n    translate([0, 0, -8])\n    color(\"tan\")\n    difference() {\n        cube([20, 60, 4], center = true);\n        cube([16, 56, 6], center = true);\n    }\n}\n\n/* ===== Assembly ===== */\nunion() {\n    tablet_body();\n    front_inscriptions();\n    back_inscriptions();\n    edges();\n    stand();\n}",
    "renders": true
  },
  {
    "historical_artifact": "strand",
    "openscad_code": "// Historical Rope Strand from Ancient Maritime Knotwork\n// Based on 16th century ship rigging strands with Turk's head knot terminal\n\n// Color definitions for realistic appearance\ncolor_rope = [0.6, 0.4, 0.2]; // Weathered hemp color\ncolor_knot = [0.45, 0.3, 0.15]; // Darker knot due to handling\n\n// Overall dimensions (mm)\nstrand_length = 80;\nstrand_diameter = 6;\nknot_diameter = 12;\n\n// Render the complete strand artifact\nmodule strand_artifact() {\n    // Main rope strand with realistic twisted texture\n    color(color_rope) {\n        // Create twisted rope effect using stacked cylinders\n        for(i = [0:5:strand_length-5]) {\n            rotate([0, 0, i*3]) {\n                translate([0, 0, i]) {\n                    cylinder(h=5, d=strand_diameter, $fn=8);\n                }\n            }\n        }\n        \n        // Terminal end with frayed appearance\n        translate([0, 0, strand_length-2]) {\n            cylinder(h=4, d=strand_diameter*1.1, $fn=8);\n            for(j = [1:3]) {\n                rotate([0, 0, j*120]) {\n                    translate([strand_diameter*0.3, 0, strand_length]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=8, d=1, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Turk's head knot at the working end\n    color(color_knot) {\n        translate([0, 0, -6]) {\n            // Base knot ring\n            rotate_extrude(angle=360, $fn=32) {\n                translate([knot_diameter/2, 0, 0]) {\n                    square([2, 2]);\n                }\n            }\n            \n            // Knot crossings - 3-pass Turk's head\n            for(k = [0:11]) {\n                rotate([0, 0, k*30]) {\n                    translate([knot_diameter/2, 0, 0]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=knot_diameter, d=2.5, $fn=8);\n                        }\n                    }\n                }\n            }\n            \n            // Decorative beads at knot intersections\n            for(m = [0:3]) {\n                rotate([0, 0, m*90]) {\n                    translate([knot_diameter/2, 0, -3]) {\n                        sphere(d=3, $fn=12);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Historical maker's mark - carved initial \"S\"\n    color([0.3, 0.2, 0.1]) {\n        translate([0, strand_diameter/2, strand_length/2]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height=0.5) {\n                    // Simple S shape\n                    offset(r=0.5) {\n                        text(\"S\", size=3, font=\"Liberation Sans:style=Bold\");\n                    }\n                }\n            }\n        }\n    }\n    \n    // Age/wear marks along the strand\n    color([0.35, 0.25, 0.15]) {\n        for(w = [1:3]) {\n            translate([0, -strand_diameter/2, w*20+10]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=strand_diameter*1.2, d=0.5, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Create the complete artifact\nstrand_artifact();",
    "renders": true
  },
  {
    "historical_artifact": "string",
    "openscad_code": "// Ancient Egyptian Stringed Instrument - A Sistrum\n// A sacred musical instrument used in ancient Egypt, associated with the goddess Hathor\n// Features the characteristic U-shaped frame with crossbars and jingling metal disks\n\n$fn = 50;\n\n// Overall dimensions - approximately 80mm tall\nstaff_height = 80;\nframe_width = 35;\nframe_thickness = 3;\n\n// Colors for realistic appearance\ncolor_bronze = [0.8, 0.5, 0.2];\ncolor_gold = [0.83, 0.69, 0.22];\ncolor_dark_bronze = [0.6, 0.4, 0.15];\n\n// Main handle/stound\nmodule handle() {\n    color(color_bronze)\n    union() {\n        // Main cylindrical handle\n        cylinder(h = staff_height * 0.65, r = 4, center = false);\n        \n        // Decorative rings on handle\n        for (i = [1:3:10]) {\n            translate([0, 0, i * 5])\n            cylinder(h = 1.5, r = 4.5, center = false);\n        }\n        \n        // Lotus flower at base\n        translate([0, 0, -2])\n        color(color_gold)\n        cylinder(h = 3, r1 = 5, r2 = 7, center = false);\n    }\n}\n\n// U-shaped frame with Hathor head decoration\nmodule frame() {\n    color(color_bronze)\n    union() {\n        // Left side of U-frame\n        translate([-frame_width/2, 0, staff_height * 0.65])\n        rotate([0, 90, 0])\n        cylinder(h = frame_width, r = frame_thickness, center = true);\n        \n        // Right side of U-frame\n        translate([frame_width/2, 0, staff_height * 0.65])\n        rotate([0, 90, 0])\n        cylinder(h = frame_width, r = frame_thickness, center = true);\n        \n        // Crossbar\n        translate([0, 0, staff_height * 0.65])\n        rotate([90, 0, 0])\n        cylinder(h = frame_width, r = frame_thickness, center = true);\n        \n        // Hathor head at top\n        translate([0, 0, staff_height * 0.65 + frame_width/2])\n        color(color_gold)\n        union() {\n            // Face outline\n            sphere(r = 8);\n            \n            // Cow ears\n            translate([-6, 0, 3])\n            rotate([0, 30, 0])\n            scale([1, 0.5, 1.5])\n            sphere(r = 4);\n            translate([6, 0, 3])\n            rotate([0, -30, 0])\n            scale([1, 0.5, 1.5])\n            sphere(r = 4);\n            \n            // Curved horns\n            translate([-4, -8, 3])\n            rotate([0, 45, -30])\n            scale([0.5, 0.5, 1])\n            cylinder(h = 8, r1 = 3, r2 = 1, center = false);\n            translate([4, -8, 3])\n            rotate([0, 45, 30])\n            scale([0.5, 0.5, 1])\n            cylinder(h = 8, r1 = 3, r2 = 1, center = false);\n        }\n    }\n}\n\n// Jingling metal disks (the \"strings\" that create sound)\nmodule disks() {\n    color(color_gold)\n    for (i = [-1:1]) {\n        translate([i * 10, 0, staff_height * 0.65])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 1, r = 4, center = true);\n            translate([0, 0, -0.5])\n            cylinder(h = 2, r = 2, center = true);\n        }\n    }\n}\n\n// Decorative hieroglyphic bands\nmodule hieroglyphs() {\n    color(color_dark_bronze)\n    for (i = [1:5:staff_height * 0.5]) {\n        translate([0, 0, i])\n        difference() {\n            cylinder(h = 2, r = 4.2, center = true);\n            // Eye of Horus pattern\n            translate([-1.5, 0, 0])\n            sphere(r = 0.5);\n            translate([1.5, 0, 0])\n            sphere(r = 0.5);\n            translate([0, -1, 0])\n            cube([3, 0.5, 2], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    frame();\n    disks();\n    hieroglyphs();\n}",
    "renders": true
  },
  {
    "historical_artifact": "band",
    "openscad_code": "// Bronze Age torc (neck ring) with spiral terminals, Ireland c.1200-800 BCE\n// Designed for 3D printing: no large overhangs, 2 mm wall minimum\n\n$fn = 40;  // smooth curves for realistic appearance\nthickness = 4;        // torc band diameter\nband_radius = 22;     // inner radius of neck opening\nspiral_turns = 3.5;   // classic spiral count\nspiral_radius = 6;    // spiral wire radius\n\nmodule torc_band() {\n    // central C-shaped band\n    difference() {\n        // outer torus segment\n        rotate([0, 90, 0])\n            rotate_extrude(angle = 220, $fn = 100)\n                translate([band_radius, 0, 0])\n                    circle(d = thickness);\n                    \n        // inner hollow for 3D printing\n        rotate([0, 90, 0])\n            rotate_extrude(angle = 220, $fn = 100)\n                translate([band_radius, 0, 0])\n                    circle(d = thickness - 2);\n    }\n}\n\nmodule spiral_terminal(offset_angle = 0) {\n    // decorative spiral end typical of Bronze Age torcs\n    color(\"bronze\") \n    for (i = [0:36]) {\n        angle = i * 10;\n        radius = spiral_radius + (i * 0.25);\n        height = (i / 36) * 8;\n        \n        translate([\n            cos(angle + offset_angle) * radius,\n            0,\n            sin(angle + offset_angle) * radius + height\n        ])\n            sphere(d = 3.5);\n    }\n    \n    // central boss\n    translate([0, 0, 8])\n        cylinder(h = 3, d = 8, $fn = 32);\n}\n\nmodule decorative_ribbing() {\n    // raised rib decoration along band\n    for (a = [30:30:190]) {\n        rotate([0, 0, a])\n            translate([band_radius, -thickness/2, 0])\n                cube([thickness, thickness/2, 2]);\n    }\n}\n\n// Main assembly\nunion() {\n    color(\"bronze\") torc_band();\n    \n    // left spiral terminal\n    translate([band_radius * cos(220), 0, band_radius * sin(220)])\n        rotate([90, 0, 220])\n            spiral_terminal(0);\n    \n    // right spiral terminal\n    translate([band_radius, 0, 0])\n        rotate([90, 0, 0])\n            spiral_terminal(180);\n    \n    decorative_ribbing();\n}",
    "renders": true
  },
  {
    "historical_artifact": "loop",
    "openscad_code": "// Iron Age Celtic Torc (neck ring) - Medium complexity realistic replica\n// Based on Snettisham Great Torc style (1st century BCE)\n\n// Main parameters\ntorc_diameter = 60;\nwire_thickness = 6;\nterminal_length = 25;\nterminal_width = 15;\nterminal_thickness = 8;\n\n// Colors\nbronze_color = \"#CD7F32\";\npatina_color = \"#4A5D23\";\n\nmodule torc_wire() {\n    // Create the main twisted wire effect using multiple cylinders\n    difference() {\n        union() {\n            // Main ring body\n            rotate_extrude(angle=350, $fn=100)\n                translate([torc_diameter/2, 0, 0])\n                    circle(d=wire_thickness, $fn=8);\n            \n            // Add slight bulge for realistic wire twist\n            for(i=[0:30:330]) {\n                rotate([0, 0, i])\n                    translate([torc_diameter/2, 0, 0])\n                        sphere(d=wire_thickness*1.1, $fn=12);\n            }\n        }\n        \n        // Remove small gap for opening (typical torc design)\n        translate([0, -torc_diameter/2-5, -wire_thickness])\n            cube([torc_diameter+10, torc_diameter+10, wire_thickness*2]);\n    }\n}\n\nmodule terminal_decoration() {\n    // Classic Celtic trumpet spiral motif\n    union() {\n        // Main terminal body\n        color(bronze_color)\n            difference() {\n                cube([terminal_length, terminal_width, terminal_thickness], center=true);\n                \n                // Hollow center\n                cube([terminal_length-4, terminal_width-4, terminal_thickness+2], center=true);\n            }\n        \n        // Trumpet spiral decorations\n        for(i=[0:60:300]) {\n            rotate([0, 0, i])\n                translate([terminal_length/2-2, 0, 0])\n                    color(bronze_color)\n                        cylinder(h=terminal_thickness-1, d1=8, d2=3, center=true, $fn=20);\n        }\n        \n        // Central boss\n        translate([0, 0, terminal_thickness/2])\n            color(bronze_color)\n                sphere(d=6, $fn=20);\n    }\n}\n\nmodule patina_effect() {\n    // Add subtle weathering/patina\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([torc_diameter/2 + sin(i*5)*2, cos(i*5)*2, 0])\n                color(patina_color)\n                    sphere(d=1.5, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main torc body\n    color(bronze_color)\n        torc_wire();\n    \n    // Left terminal\n    translate([torc_diameter/2, 0, 0])\n        rotate([90, 0, 0])\n            terminal_decoration();\n    \n    // Right terminal\n    translate([-torc_diameter/2, 0, 0])\n        rotate([90, 0, 180])\n            terminal_decoration();\n    \n    // Add patina/aging effect\n    patina_effect();\n}",
    "renders": true
  },
  {
    "historical_artifact": "circle",
    "openscad_code": "// OpenSCAD Code: Celtic Bronze Mirror (Historical Circle Artifact)\n// Based on Iron Age British mirrors (~50 BCE - 50 CE)\n// Diameter: 80mm, suitable for 3D printing\n\n// Main parameters\n$fn = 100;\nmirror_diameter = 80;\nmirror_thickness = 3;\nhandle_length = 45;\nhandle_width = 12;\nhandle_thickness = 4;\n\n// Bronze color for realistic appearance\ncolor([0.72, 0.45, 0.2]) {\n    \n    // Main mirror disk\n    difference() {\n        // Solid bronze disk\n        cylinder(h = mirror_thickness, d = mirror_diameter, center = true);\n        \n        // Reflective surface depression\n        translate([0, 0, -0.5])\n            cylinder(h = 1, d = mirror_diameter - 4, center = true);\n    }\n    \n    // Decorative raised border\n    translate([0, 0, 1.5])\n        cylinder(h = 1.5, d1 = mirror_diameter, d2 = mirror_diameter - 2);\n    \n    // Celtic La Tène style decorations on back\n    translate([0, 0, -mirror_thickness/2 - 0.5])\n    union() {\n        // Central boss\n        cylinder(h = 2, d = 12);\n        \n        // Spiral decorations\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([20, 0, 0])\n            rotate_extrude(angle = 360, $fn = 50)\n                translate([15, 0, 0])\n                circle(r = 2);\n        }\n        \n        // Triskele pattern segments\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([0, 0, 0.5])\n            linear_extrude(height = 1.5)\n                polygon(points = [\n                    [0, 0],\n                    [25, -5],\n                    [30, 0],\n                    [25, 5]\n                ]);\n        }\n    }\n    \n    // Handle attachment\n    translate([0, mirror_diameter/2 + handle_length/2, 0])\n    union() {\n        // Handle body\n        rotate([90, 0, 0])\n            cylinder(h = handle_length, d = handle_width);\n        \n        // Handle grip rings\n        for (i = [0:3]) {\n            translate([0, -handle_length/2 + i * 10, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, d = handle_width + 3);\n        }\n        \n        // Decorative terminal\n        translate([0, handle_length/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = handle_width, d2 = 0);\n    }\n    \n    // Rivet details on front\n    translate([0, 0, mirror_thickness/2 + 0.25])\n    for (angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([mirror_diameter/2 - 8, 0, 0])\n            cylinder(h = 0.5, d = 3);\n    }\n}\n\n// Patina effect (greenish oxidation)\ntranslate([0, 0, mirror_thickness/2 + 1])\ncolor([0.2, 0.4, 0.2, 0.3]) {\n    // Random patina spots\n    for (i = [0:15]) {\n        rotate([0, 0, rands(0, 360, 1)[0]])\n        translate([rands(0, mirror_diameter/2 - 10, 1)[0], 0, 0])\n            scale([1, 0.8, 0.3])\n                sphere(r = rands(1, 3, 1)[0]);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "oval",
    "openscad_code": "// Oval Roman oil lamp - 2nd century CE style\n// Dimensions: 85mm x 65mm x 25mm\n\nmodule oil_lamp_body() {\n    // Main oval body\n    scale([1, 0.75, 0.3]) \n        sphere(d=85, $fn=60);\n    \n    // Hollow interior\n    difference() {\n        scale([1, 0.75, 0.3]) \n            sphere(d=85, $fn=60);\n        translate([0, 0, -3])\n            scale([0.9, 0.65, 0.25]) \n                sphere(d=85, $fn=60);\n    }\n}\n\nmodule fill_hole() {\n    // Central filling hole\n    translate([0, 15, 5])\n        rotate_extrude($fn=30) {\n            translate([15, 0, 0])\n                circle(r=2.5);\n        }\n}\n\nmodule nozzle() {\n    // Spout with wick hole\n    translate([0, -40, 2])\n        rotate([90, 0, 0])\n            union() {\n                // Nozzle body\n                translate([0, 0, -5])\n                    cylinder(h=10, r1=12, r2=8, $fn=30);\n                \n                // Wick hole\n                translate([0, 0, 5])\n                    cylinder(h=8, r=3, $fn=16);\n            }\n}\n\nmodule handle() {\n    // Crescent handle\n    translate([35, 10, 5])\n        rotate([0, 90, 0])\n            difference() {\n                // Handle body\n                rotate_extrude($fn=30) {\n                    translate([25, 0, 0])\n                        circle(r=5);\n                }\n                // Handle hole\n                rotate_extrude($fn=30) {\n                    translate([25, 0, 0])\n                        circle(r=3);\n                }\n            }\n}\n\nmodule decorative_motifs() {\n    // Ivy leaf patterns around fill hole\n    for(i=[0:6]) {\n        rotate([0, 0, i*60])\n            translate([18, 0, 5])\n                rotate([0, 0, 30])\n                    scale([0.8, 1.2, 0.5])\n                        sphere(d=5, $fn=6);\n    }\n    \n    // Wave pattern around edge\n    for(i=[0:23]) {\n        rotate([0, 0, i*15])\n            translate([42, 0, 3])\n                sphere(d=2.5, $fn=8);\n    }\n}\n\nmodule maker_mark() {\n    // Potter's mark on base\n    translate([0, 20, -2]) {\n        rotate([0, 180, 0]) {\n            linear_extrude(height=0.5) {\n                text(\"FAVSTI\", size=6, halign=\"center\", font=\"Arial:style=Bold\");\n            }\n        }\n    }\n}\n\n// Main assembly\ncolor([205, 175, 149]) {\n    union() {\n        oil_lamp_body();\n        fill_hole();\n        nozzle();\n        handle();\n        \n        // Add decorative elements\n        translate([0, 0, 0.5])\n            decorative_motifs();\n        \n        // Base features\n        maker_mark();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "square",
    "openscad_code": "// Babylonian Kudurru Stone (boundary-marker)\n// 85 mm tall square stele, c. 1100 BCE\n// 3D-printable, no overhangs\n\n$fn = 32;\n\n// overall dimensions\nwidth = 70;\nheight = 85;\ndepth = 12;\n\n// wall thickness for printing\nthick = 2.2;\n\n// base pedestal\ncolor(\"burlywood\")\ntranslate([0,0,-15])\n    cube([width+16, depth+16, 15], center=true);\n\n// main square stele body\ncolor(\"antiquewhite\")\ndifference() {\n    cube([width, depth, height], center=true);\n    // hollow it out for printing economy\n    translate([0,0,2])\n        cube([width-2*thick, depth-2*thick, height-2*thick], center=true);\n}\n\n// top crenellations (typical Babylonian form)\nmodule crenellate(pos) {\n    translate(pos)\n    for(i = [-1, 0, 1])\n        translate([i*18, 0, height/2 + 4])\n            cube([12, depth+2, 8], center=true);\n}\ncrenellate([0,0,0]);\n\n// carved star of Shamash on front face\ncolor(\"goldenrod\")\ntranslate([0, depth/2 + 0.1, 12])\n    rotate([90,0,0])\n    linear_extrude(1.6)\n    union() {\n        // eight-point star outline\n        for(a = [0:45:315])\n            rotate(a)\n                translate([6,0,0])\n                    square([12,3], center=true);\n        // central disk\n        circle(d=6, $fn=32);\n    }\n\n// cuneiform inscription band\nmodule wedge(x,y,rot) {\n    translate([x, y, height/2 - 15])\n    rotate([0,0,rot])\n    color(\"saddlebrown\")\n        cube([3, 1, 1.5], center=true);\n}\n\nfor(row = [0:1]) {\n    for(col = [-4:4]) {\n        wedge(col*7, depth/2 + 0.1, row*90);\n    }\n}\n\n// side decorative grooves\nmodule groove(y,z) {\n    translate([width/2 + 0.1, y, z])\n    rotate([0,90,0])\n    color(\"tan\")\n        cylinder(h=width-6, d=2, center=true);\n}\n\nfor(z = [-30:15:30])\n    for(y = [-3, 0, 3])\n        groove(y, z);\n\n// small lugal (king) emblem on back top\ncolor(\"darkgoldenrod\")\ntranslate([0, -depth/2 - 0.1, height/2 - 8])\n    mirror([0,1,0])\n    rotate([90,0,0])\n    linear_extrude(1.6)\n        union() {\n            circle(d=10);\n            translate([-6,-6,0])  square([5,5]);\n            translate([ 1,-6,0])  square([5,5]);\n        }\n\n// drainage hole through bottom\ntranslate([0,0,-height/2+thick])\n    cylinder(h=height, d=4, center=true, $fn=16);",
    "renders": true
  },
  {
    "historical_artifact": "marquise",
    "openscad_code": "// Marquise signet ring - historical artifact (circa 1750-1800)\n// Based on French aristocratic jewelry with heraldic crest\n\n$fn = 32;\n\n// Ring dimensions (mm)\nring_outer_d = 20;\nring_inner_d = 17;\nring_height = 8;\n\n// Marquise stone dimensions\nstone_length = 25;\nstone_width = 12;\nstone_height = 8;\n\n// Overall proportions for 3D printing\nscale_factor = 2.5;\n\n// Main body\nunion() {\n    color([0.85, 0.7, 0.4]) // Gold color\n    \n    // Ring band\n    difference() {\n        cylinder(h = ring_height, d = ring_outer_d, center = true);\n        cylinder(h = ring_height + 1, d = ring_inner_d, center = true);\n    }\n    \n    // Decorative shoulders\n    for (i = [0, 120, 240]) {\n        rotate([0, 0, i]) translate([ring_outer_d/2, 0, 0]) {\n            rotate([0, 90, 0]) \n            cylinder(h = 6, d1 = 4, d2 = 2, center = true);\n        }\n    }\n    \n    // Marquise stone setting\n    translate([0, 0, ring_height/2 + stone_height/4]) {\n        // Prongs (4 total)\n        for (angle = [45, 135, 225, 315]) {\n            rotate([0, 0, angle]) translate([stone_width/3, 0, 0]) {\n                cylinder(h = stone_height/2, d = 1.5, center = true);\n            }\n        }\n        \n        // Stone base\n        color([0.1, 0.1, 0.1]) // Dark stone color\n        scale([1, stone_width/stone_length, 1]) \n        sphere(d = stone_length, center = true);\n        \n        // Stone point\n        translate([0, 0, stone_height/4]) {\n            rotate_extrude() {\n                polygon(points = [\n                    [0, 0],\n                    [stone_length/2, 0],\n                    [0, stone_height/2]\n                ]);\n            }\n        }\n    }\n    \n    // Heraldic crest on top\n    translate([0, 0, ring_height/2 + stone_height/2 + 2]) {\n        color([0.85, 0.7, 0.4])\n        difference() {\n            // Crest shield shape\n            linear_extrude(height = 1) {\n                polygon(points = [\n                    [-6, -4],\n                    [6, -4],\n                    [8, 0],\n                    [6, 4],\n                    [-6, 4],\n                    [-8, 0]\n                ]);\n            }\n            \n            // Fleur-de-lis engraving\n            translate([0, 0, -0.1]) {\n                linear_extrude(height = 1.2) {\n                    polygon(points = [\n                        [-1, -2],\n                        [1, -2],\n                        [1, 0],\n                        [2, 0],\n                        [0, 2],\n                        [-2, 0],\n                        [-1, 0]\n                    ]);\n                }\n            }\n        }\n    }\n    \n    // Engraved band decoration\n    translate([0, 0, -ring_height/2 + 1]) {\n        difference() {\n            cylinder(h = 0.5, d = ring_outer_d - 1, center = true);\n            // Decorative pattern\n            for (i = [0 : 15 : 360]) {\n                rotate([0, 0, i]) translate([(ring_outer_d - 1)/2, 0, 0]) {\n                    cube([1, 0.5, 1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Scale for printing\nscale([scale_factor, scale_factor, scale_factor]) children();",
    "renders": true
  },
  {
    "historical_artifact": "pear",
    "openscad_code": "// Medieval Bronze Reliquary Pear - 14th Century Style\n// Height: 70mm, designed for 3D printing with 1.2mm wall thickness\n\n$fn = 36;\n\n// Main pear body\nmodule pear_body() {\n    color([0.6, 0.4, 0.2])  // Bronze patina color\n    \n    // Upper pear section\n    union() {\n        translate([0, 0, 30])\n            scale([1, 1, 1.3])\n            sphere(d = 40);\n        \n        // Lower pear section\n        translate([0, 0, 10])\n            scale([1.2, 1.2, 0.8])\n            sphere(d = 45);\n        \n        // Pear bottom\n        translate([0, 0, 0])\n            cylinder(h = 8, d1 = 35, d2 = 20);\n    }\n}\n\n// Decorative collar with inscription band\nmodule decorative_collar() {\n    color([0.7, 0.5, 0.25])\n    difference() {\n        // Outer collar\n        translate([0, 0, 25])\n            cylinder(h = 8, d = 44);\n        \n        // Inner recess\n        translate([0, 0, 24])\n            cylinder(h = 10, d = 38);\n    }\n    \n    // Latin inscription \"AVE MARIA\"\n    for(i = [0:6]) {\n        rotate([0, 0, i * 51.4])\n        translate([19, 0, 29])\n            color([0.3, 0.2, 0.1])\n            cube([1.5, 0.5, 2]);\n    }\n}\n\n// Hinged compartment door\nmodule compartment_door() {\n    color([0.65, 0.45, 0.22])\n    difference() {\n        // Door panel\n        translate([0, -20, 15])\n            cube([30, 2, 18]);\n        \n        // Keyhole\n        translate([0, -19, 22])\n            cylinder(h = 3, d = 4);\n        translate([0, -19, 22])\n            cube([4, 3, 2]);\n    }\n    \n    // Decorative cross on door\n    color([0.4, 0.25, 0.1])\n    translate([0, -18, 22])\n    union() {\n        cube([12, 1.5, 2]);\n        cube([1.5, 12, 2]);\n    }\n}\n\n// Stem and leaf decoration\nmodule stem_leaf() {\n    color([0.3, 0.25, 0.15])  // Dark bronze\n    \n    // Stem\n    translate([0, 0, 56])\n        cylinder(h = 12, d1 = 8, d2 = 4);\n    \n    // Leaf pair\n    for(i = [0, 1]) {\n        rotate([0, 0, i * 180 - 90])\n        translate([8, 0, 50])\n        rotate([30, 0, 0])\n        scale([1, 0.3, 0.1])\n        sphere(d = 15);\n    }\n}\n\n// Relief decoration bands\nmodule relief_bands() {\n    color([0.7, 0.5, 0.25])\n    for(z = [35, 42]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 2, d = 38 - (z - 35) * 2);\n                cylinder(h = 3, d = 34 - (z - 35) * 2);\n            }\n    }\n}\n\n// Assembly\npear_body();\ndecorative_collar();\ncompartment_door();\nstem_leaf();\nrelief_bands();",
    "renders": true
  },
  {
    "historical_artifact": "heart",
    "openscad_code": "// Historical Heart Artifact - Medieval Love Token (14th Century)\n// Based on pewter heart badges found in London excavations\n// Dimensions: 60mm x 55mm x 12mm\n\n// Main color - aged pewter\ncolor([0.7, 0.7, 0.75])\n\nmodule heart_base() {\n    // Main heart shape using two spheres and tapered cone\n    union() {\n        // Left lobe\n        translate([-12, 0, 0])\n            scale([1, 1.2, 0.8])\n            sphere(r=18, $fn=32);\n        \n        // Right lobe\n        translate([12, 0, 0])\n            scale([1, 1.2, 0.8])\n            sphere(r=18, $fn=32);\n        \n        // Tapered bottom cone\n        translate([0, -25, 0])\n            cylinder(h=35, r1=22, r2=12, $fn=32);\n    }\n}\n\n// Raised decorative border\nmodule border() {\n    difference() {\n        // Outer border\n        scale([1.15, 1.15, 0.3])\n            heart_base();\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n            scale([1.05, 1.05, 0.5])\n                heart_base();\n    }\n}\n\n// Central fleur-de-lis decoration\nmodule fleur_de_lis() {\n    translate([0, 0, 2.5])\n    union() {\n        // Center petal\n        cylinder(h=3, r1=3, r2=1, $fn=16);\n        \n        // Side petals\n        for(i=[-1, 1]) {\n            translate([i*2.5, -1, 0])\n                rotate([0, 15*i, 0])\n                cylinder(h=2.5, r1=2, r2=0.5, $fn=12);\n        }\n        \n        // Stem detail\n        translate([0, -2, 0])\n            cylinder(h=2, r=0.5, $fn=8);\n    }\n}\n\n// Perforation holes for sewing to clothing\nmodule attachment_holes() {\n    // Three evenly spaced holes\n    for(angle=[-60, 0, 60]) {\n        rotate([0, 0, angle])\n        translate([0, 32, -1])\n            cylinder(h=5, r=1.5, $fn=12);\n    }\n}\n\n// Period inscription band\nmodule inscription_band() {\n    translate([0, 5, 2.2])\n    difference() {\n        // Raised band\n        cube([35, 8, 1], center=true);\n        \n        // \"AMOR\" lettering simulation\n        for(pos=[-12, -4, 4, 12]) {\n            translate([pos, 0, 0])\n                cube([3, 6, 1.1], center=true);\n        }\n    }\n}\n\n// Surface wear patterns\nmodule wear_marks() {\n    // Random small dents for historical accuracy\n    for(i=[0:8]) {\n        rotate([0, 0, i*40])\n        translate([sin(i*5)*15, cos(i*5)*20, 1])\n            sphere(r=0.5 + sin(i*2)*0.3, $fn=8);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Main body\n        heart_base();\n        \n        // Decorative elements\n        border();\n        inscription_band();\n        fleur_de_lis();\n        wear_marks();\n    }\n    \n    // Attachment holes\n    attachment_holes();\n    \n    // Keyhole mount on back\n    translate([0, -15, -6])\n        cube([8, 12, 3], center=true);\n    translate([0, -15, -4.5])\n        cylinder(h=6, r=2, $fn=16);\n}",
    "renders": true
  },
  {
    "historical_artifact": "star",
    "openscad_code": "// Historical Star Artifact - Mesopotamian Star Disk (c. 2000 BCE)\n// A ceremonial bronze star disk with cuneiform inscriptions and geometric patterns\n\n// Overall dimensions\nstar_radius = 45;\ndisk_thickness = 4;\ntotal_height = 55;\n\n// Main star disk\nmodule star_disk() {\n    // Central disk base\n    difference() {\n        cylinder(h=disk_thickness, r=star_radius, $fn=100);\n        \n        // Central hole for mounting\n        translate([0, 0, -0.1])\n            cylinder(h=disk_thickness+0.2, r=8, $fn=50);\n    }\n}\n\n// Eight-pointed star outline\nmodule star_outline() {\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([star_radius-7, 0, disk_thickness/2])\n                rotate([0, 90, 0])\n                    cylinder(h=14, r=2, $fn=20);\n    }\n}\n\n// Cuneiform inscription panels\nmodule cuneiform_panel(angle) {\n    rotate([0, 0, angle])\n        translate([star_radius-12, 0, disk_thickness/2])\n            for(i=[-1:1]) {\n                translate([0, i*3, -disk_thickness/4])\n                    cube([8, 1, disk_thickness/2]);\n            }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    for(i=[0:35]) {\n        rotate([0, 0, i*10])\n            translate([star_radius-3, 0, 0])\n                cube([2, 1, disk_thickness]);\n    }\n}\n\n// Star rays (pyramidal projections)\nmodule star_rays() {\n    for(i=[0:7]) {\n        rotate([0, 0, i*45])\n            translate([star_radius-18, 0, 0])\n                rotate([0, -30, 0])\n                    translate([0, 0, disk_thickness/2])\n                        cube([15, 6, disk_thickness], center=true);\n    }\n}\n\n// Central boss with geometric pattern\nmodule central_boss() {\n    difference() {\n        // Main boss\n        color(\"bronze\")\n            translate([0, 0, disk_thickness])\n                cylinder(h=8, r=12, $fn=6);\n        \n        // Geometric cutouts\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([6, 0, disk_thickness+4])\n                    cube([4, 2, 8], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main disk in bronze\n    color(\"bronze\") star_disk();\n    \n    // Star outline\n    color(\"bronze\") star_outline();\n    \n    // Cuneiform panels (8 panels around disk)\n    for(i=[0:7]) {\n        color(\"darkgreen\") cuneiform_panel(i*45+22.5);\n    }\n    \n    // Border decoration\n    color(\"bronze\") border_pattern();\n    \n    // Star rays\n    color(\"bronze\") star_rays();\n    \n    // Central boss\n    central_boss();\n    \n    // Hanging loop on back\n    color(\"bronze\")\n        translate([0, 0, -5])\n            rotate([90, 0, 0])\n                difference() {\n                    torus(8, 2, $fn=30);\n                    translate([10, 0, 0])\n                        cube([20, 20, 4], center=true);\n                };\n}",
    "renders": true
  },
  {
    "historical_artifact": "moon",
    "openscad_code": "// Apollo 11 Lunar Plaque - Historical Moon Artifact\n// Realistic style, medium complexity\n\n$fn = 64;\n\n// Main plaque dimensions (actual size: 9\" x 7 5/8\" x 1/8\")\nmodule plaque_body() {\n    color(\"gold\")\n    difference() {\n        // Main plaque\n        translate([0, 0, 1.5])\n        cube([95, 80, 3], center=true);\n        \n        // Mounting holes (4 corners)\n        for(x = [-40, 40])\n            for(y = [-35, 35]) {\n                translate([x, y, 1.4])\n                cylinder(h=3.1, r=2.5, center=true);\n            }\n        \n        // Rounded corners\n        for(x = [-45, 45])\n            for(y = [-38, 38]) {\n                translate([x, y, 1.4])\n                cylinder(h=3.1, r=5, center=true);\n            }\n    }\n}\n\n// Text inscription module\nmodule text_inscription() {\n    color(\"darkslategray\")\n    linear_extrude(height=0.3) {\n        // Main text\n        translate([-40, 20, 0])\n        text(\"HERE MEN FROM THE PLANET EARTH\", size=3.5, font=\"Liberation Sans:style=Bold\");\n        \n        translate([-40, 15, 0])\n        text(\"FIRST SET FOOT UPON THE MOON\", size=3.5, font=\"Liberation Sans:style=Bold\");\n        \n        translate([-40, 10, 0])\n        text(\"JULY 1969 A.D.\", size=3.5, font=\"Liberation Sans:style=Bold\");\n        \n        translate([-40, 5, 0])\n        text(\"WE CAME IN PEACE FOR ALL MANKIND\", size=3.5, font=\"Liberation Sans:style=Bold\");\n    }\n}\n\n// Signatures module\nmodule signatures() {\n    color(\"darkslategray\")\n    linear_extrude(height=0.3) {\n        translate([-40, -10, 0])\n        text(\"NEIL A. ARMSTRONG\", size=3, font=\"Liberation Sans:style=Italic\");\n        \n        translate([-40, -15, 0])\n        text(\"MICHAEL COLLINS\", size=3, font=\"Liberation Sans:style=Italic\");\n        \n        translate([-40, -20, 0])\n        text(\"EDWIN E. ALDRIN JR.\", size=3, font=\"Liberation Sans:style=Italic\");\n        \n        translate([-40, -25, 0])\n        text(\"RICHARD NIXON\", size=3, font=\"Liberation Sans:style=Italic\");\n    }\n}\n\n// Earth hemisphere symbol\nmodule earth_symbol() {\n    color(\"steelblue\")\n    translate([35, -15, 1.6])\n    scale([1, 0.8, 1])\n    sphere(r=8);\n    \n    // Continents (simplified)\n    color(\"darkgreen\")\n    translate([35, -15, 9.6])\n    for(i = [0:4]) {\n        rotate([0, 0, i*72])\n        translate([0, 3, 0])\n        scale([1, 0.5, 0.1])\n        sphere(r=2);\n    }\n}\n\n// Lunar surface texture\nmodule lunar_texture() {\n    color(\"silver\")\n    translate([0, 0, -1.5])\n    for(i = [0:20]) {\n        for(j = [0:20]) {\n            translate([i*4.75-47.5, j*4-40, 0])\n            cylinder(h=0.2, r=0.5 + sin(i+j)*0.3, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Back support with texture\n    difference() {\n        cube([97, 82, 3], center=true);\n        translate([0, 0, 1.5])\n        cube([95, 80, 3], center=true);\n    }\n    \n    lunar_texture();\n    \n    // Main components\n    plaque_body();\n    text_inscription();\n    signatures();\n    earth_symbol();\n}",
    "renders": true
  },
  {
    "historical_artifact": "sun",
    "openscad_code": "// Aztec Sun Stone - Medium complexity realistic historical artifact\n// Based on the famous 15th century Mexica calendar stone\n\n$fn = 64;\n\n// Overall dimensions\nstone_diameter = 80;\nstone_thickness = 8;\n\n// Create the main disk\nmodule sun_disk() {\n    // Central disk\n    difference() {\n        cylinder(h = stone_thickness, d = stone_diameter);\n        \n        // Central cavity for sun god face\n        translate([0, 0, -1])\n            cylinder(h = stone_thickness + 2, d = 20);\n    }\n}\n\n// Sun god face in center\nmodule sun_god_face() {\n    color(\"gold\") {\n        // Face base\n        translate([0, 0, stone_thickness - 1])\n            cylinder(h = 2, d = 18);\n        \n        // Eyes\n        for(x = [-5, 5]) {\n            translate([x, 2, stone_thickness + 1])\n                sphere(d = 3);\n        }\n        \n        // Nose\n        translate([0, -2, stone_thickness + 1])\n            cube([2, 4, 3], center = true);\n        \n        // Mouth\n        translate([0, -6, stone_thickness + 1])\n            cube([8, 2, 2], center = true);\n    }\n}\n\n// Sun rays around perimeter\nmodule sun_rays() {\n    color(\"goldenrod\") {\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5]) {\n                translate([stone_diameter/2 - 8, 0, stone_thickness/2])\n                    cube([16, 4, stone_thickness], center = true);\n            }\n        }\n    }\n}\n\n// Aztec calendar glyphs\nmodule calendar_glyphs() {\n    color(\"darkgoldenrod\") {\n        // 20 day signs arranged in ring\n        for(i = [0:19]) {\n            rotate([0, 0, i * 18]) {\n                translate([stone_diameter/2 - 15, 0, stone_thickness/2])\n                    scale([0.1, 0.1, 0.1])\n                        cylinder(h = 5, d = 8);\n            }\n        }\n    }\n}\n\n// Decorative ring patterns\nmodule decorative_rings() {\n    // Inner ring\n    color(\"sienna\") {\n        translate([0, 0, stone_thickness - 0.5])\n            cylinder(h = 1, d = 35);\n    }\n    \n    // Outer ring\n    color(\"sienna\") {\n        translate([0, 0, stone_thickness - 0.5])\n            cylinder(h = 1, d = 60);\n    }\n}\n\n// Four previous suns (world ages)\nmodule four_suns() {\n    color(\"peru\") {\n        // Four boxes representing previous suns\n        for(angle = [0, 90, 180, 270]) {\n            rotate([0, 0, angle]) {\n                translate([0, 25, stone_thickness/2])\n                    cube([8, 4, stone_thickness - 1], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main stone\n    color(\"darkgoldenrod\") sun_disk();\n    \n    // Central face\n    sun_god_face();\n    \n    // Rays\n    sun_rays();\n    \n    // Calendar glyphs\n    calendar_glyphs();\n    \n    // Decorative elements\n    decorative_rings();\n    \n    // Four previous suns\n    four_suns();\n}",
    "renders": true
  },
  {
    "historical_artifact": "cross",
    "openscad_code": "// Historical Celtic High Cross - 9th Century Ireland\n// Dimensions: 70mm tall, 40mm wide, 8mm thick\n\n$fn=64;  // Smooth curves for 3D printing\n\n// Main stone color - weathered granite\ncolor([0.7, 0.7, 0.65]) difference() {\n    // Main cross body\n    union() {\n        // Vertical shaft\n        translate([-4, -25, 0]) cube([8, 50, 8]);\n        \n        // Horizontal arms\n        translate([-20, -4, 0]) cube([40, 8, 8]);\n        \n        // Circular ring connecting arms (characteristic of Celtic crosses)\n        translate([0, 0, 0]) cylinder(h=8, r=20);\n        translate([0, 0, -1]) cylinder(h=10, r=16);\n    }\n    \n    // Center hole in ring\n    translate([0, 0, -1]) cylinder(h=10, r=12);\n}\n\n// Decorative knotwork panels on front face\nmodule knotwork_pattern(x, y, scale) {\n    translate([x, y, 8.1]) scale([scale, scale, 0.5]) {\n        color([0.5, 0.5, 0.5]) {\n            // Interwoven cords - simplified representation\n            for(i=[-1:1]) {\n                rotate([0, 0, i*120]) translate([0, 5, 0]) \n                    cylinder(h=0.5, r=0.8);\n                rotate([0, 0, i*120]) translate([0, -5, 0]) \n                    cylinder(h=0.5, r=0.8);\n            }\n            \n            // Connecting arcs\n            for(a=[0:60:359]) {\n                rotate([0, 0, a]) translate([4, 0, 0]) \n                    cylinder(h=0.5, r=0.6);\n            }\n        }\n    }\n}\n\n// Apply knotwork to arms\nknotwork_pattern(0, 15, 1.5);\nknotwork_pattern(0, -15, 1.5);\nknotwork_pattern(15, 0, 1.5);\nknotwork_pattern(-15, 0, 1.5);\n\n// Boss decorations at arm intersections\nmodule stone_boss(x, y) {\n    color([0.6, 0.6, 0.6]) translate([x, y, 8.5]) {\n        cylinder(h=1.5, r=2.5);\n        translate([0, 0, 1.5]) sphere(r=2);\n    }\n}\n\nstone_boss(0, 8);\nstone_boss(0, -8);\nstone_boss(8, 0);\nstone_boss(-8, 0);\n\n// Weathered inscription panel on vertical shaft\ncolor([0.5, 0.5, 0.5]) translate([-3.9, -10, 4]) cube([0.2, 20, 4]);\n\n// Base platform for stability in printing\ncolor([0.75, 0.75, 0.7]) translate([-12, -30, -2]) cube([24, 8, 2]);\n\n// Side supports for 3D printing stability\ncolor([0.7, 0.7, 0.65]) {\n    translate([8.1, 0, 0]) cube([2, 50, 8]);\n    translate([-10.1, 0, 0]) cube([2, 50, 8]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "ankh",
    "openscad_code": "// Historical Egyptian Ankh - Medium Complexity Realistic Style\n// Based on ancient Egyptian ceremonial ankh with hieroglyphic details\n\n// Colors\ncolor(\"gold\") difference() {\n    // Main ankh structure\n    union() {\n        // Upper loop (shenu)\n        translate([0, 0, 5]) {\n            difference() {\n                // Outer loop\n                rotate_extrude(angle=360, $fn=64) {\n                    translate([12, 0, 0]) circle(d=4);\n                }\n                // Inner loop for hollow effect\n                rotate_extrude(angle=360, $fn=64) {\n                    translate([12, 0, 0]) circle(d=2.5);\n                }\n            }\n        }\n        \n        // Vertical stem\n        translate([0, 0, 0]) {\n            difference() {\n                cube([6, 6, 35], center=true);\n                translate([0, 0, 17.5]) cube([4, 4, 35], center=true);\n            }\n        }\n        \n        // Horizontal arms\n        translate([0, 0, 15]) {\n            difference() {\n                cube([30, 6, 6], center=true);\n                cube([28, 4, 4], center=true);\n            }\n        }\n    }\n    \n    // Decorative hieroglyphic patterns on arms\n    for (i = [-1, 1]) {\n        translate([i * 10, 0, 18]) {\n            // Eye of Ra symbols\n            rotate([90, 0, 0]) cylinder(h=1, d=3, $fn=16);\n            translate([0, 0.5, 0]) sphere(d=1.5);\n            translate([0, -0.5, 0]) cube([1.5, 1, 0.5], center=true);\n        }\n    }\n    \n    // Lotus flower patterns on stem\n    for (i = [0:1:4]) {\n        translate([0, 3.1, 5 + i * 6]) {\n            rotate([90, 0, 0]) {\n                for (j = [0:60:359]) {\n                    rotate([0, 0, j]) translate([1.5, 0, 0]) \n                        cylinder(h=0.5, d=1, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Decorative rings\ncolor(\"darkgoldenrod\") {\n    // Upper ring decoration\n    translate([0, 0, 28]) {\n        rotate_extrude(angle=360, $fn=32) {\n            translate([3, 0, 0]) circle(d=1);\n        }\n    }\n    \n    // Lower decorative band\n    translate([0, 0, 2]) {\n        rotate_extrude(angle=360, $fn=32) {\n            translate([3.5, 0, 0]) circle(d=0.8);\n        }\n    }\n}\n\n// Engraved cartouche on back\ncolor(\"gold\") translate([0, -3.5, 10]) {\n    difference() {\n        cube([8, 0.5, 12], center=true);\n        translate([0, 0.3, 0]) {\n            for (i = [-1, 0, 1]) {\n                translate([i * 2, 0, 0]) \n                    rotate([90, 0, 0]) cylinder(h=0.3, d=1, $fn=12);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "scarab",
    "openscad_code": "// Ancient Egyptian Scarab Artifact\n// Based on Middle Kingdom funerary scarab amulets\n// Size: 60mm long, 40mm wide, 20mm high\n\n// Main scarab body module\nmodule scarab_body() {\n    // Base ellipsoid body\n    color(\"DarkGoldenrod\")\n    scale([1, 0.7, 0.5])\n    sphere(d=50, $fn=50);\n}\n\n// Head with realistic details\nmodule scarab_head() {\n    // Main head sphere\n    color(\"Goldenrod\")\n    translate([25, 0, 0])\n    scale([0.8, 0.6, 0.6])\n    sphere(d=20, $fn=30);\n    \n    // Eyes (two small spheres)\n    color(\"Black\")\n    for(x = [1, -1]) {\n        translate([28, x*5, 5])\n        sphere(d=3, $fn=16);\n    }\n    \n    // Mandibles\n    color(\"Goldenrod\")\n    translate([30, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, r1=4, r2=2, $fn=8);\n}\n\n// Wing cases with realistic elytra pattern\nmodule wing_cases() {\n    // Left wing case\n    color(\"DarkGoldenrod\")\n    translate([0, 10, 5])\n    rotate([10, 0, 0])\n    scale([1.2, 0.4, 0.3])\n    sphere(d=40, $fn=30);\n    \n    // Right wing case\n    color(\"DarkGoldenrod\")\n    translate([0, -10, 5])\n    rotate([10, 0, 0])\n    scale([1.2, 0.4, 0.3])\n    sphere(d=40, $fn=30);\n    \n    // Wing case division line\n    color(\"SaddleBrown\")\n    translate([0, 0, 8])\n    cube([40, 1, 1]);\n}\n\n// Historical hieroglyphic inscription on base\nmodule inscription() {\n    // Base platform for inscription\n    color(\"Gold\")\n    translate([0, 0, -8])\n    cube([45, 35, 2], center=true);\n    \n    // Simplified cartouche with hieroglyphs\n    color(\"Black\")\n    translate([-10, 0, -7])\n    scale([0.5, 0.5, 0.5])\n    cube([8, 12, 1]);\n    \n    // Additional symbols\n    for(i = [0:3]) {\n        translate([5 + i*8, -10, -7])\n        cylinder(h=1, r=2, $fn=6);\n        translate([5 + i*8, 10, -7])\n        cylinder(h=1, r=2, $fn=6);\n    }\n}\n\n// Leg details (simplified for 3D printing)\nmodule legs() {\n    color(\"Goldenrod\")\n    // Front legs\n    for(y = [12, -12]) {\n        translate([20, y, -5])\n        rotate([0, 0, 30])\n        cylinder(h=15, r=2, $fn=8);\n    }\n    \n    // Middle legs\n    for(y = [15, -15]) {\n        translate([0, y, -5])\n        rotate([0, 0, 0])\n        cylinder(h=20, r=2, $fn=8);\n    }\n    \n    // Back legs\n    for(y = [12, -12]) {\n        translate([-15, y, -5])\n        rotate([0, 0, -30])\n        cylinder(h=18, r=2, $fn=8);\n    }\n}\n\n// Decorative border around scarab\nmodule decorative_border() {\n    color(\"Gold\")\n    difference() {\n        // Outer border\n        translate([0, 0, -6])\n        cube([48, 38, 1], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -6.5])\n        cube([44, 34, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    scarab_body();\n    scarab_head();\n    wing_cases();\n    inscription();\n    legs();\n    decorative_border();\n}",
    "renders": true
  },
  {
    "historical_artifact": "eye",
    "openscad_code": "// Egyptian Wedjat Eye Amulet (Eye of Horus)\n// Realistic style, medium complexity\n// Overall size: ~60mm width\n\n$fn=50;\n\n// Color definitions\ncolor_wood = [0.6, 0.4, 0.2];\ncolor_stone = [0.8, 0.7, 0.6];\ncolor_paint = [0.2, 0.1, 0.05];\n\n// Main module\nmodule wedjat_eye() {\n    // Base eye shape\n    difference() {\n        union() {\n            // Main body - curved back\n            scale([1, 0.7, 0.3])\n                sphere(d=50);\n            \n            // Eye socket ridge\n            translate([0, 0, 1])\n                scale([1.2, 0.8, 0.15])\n                    sphere(d=50);\n        }\n        \n        // Hollow out back for 3D printing\n        translate([0, 0, -2])\n            scale([0.9, 0.6, 0.5])\n                sphere(d=50);\n    }\n    \n    // Eyeball\n    color(color_stone)\n    translate([5, 0, 4])\n        scale([0.8, 0.8, 0.3])\n            sphere(d=25);\n    \n    // Pupil\n    color(color_paint)\n    translate([10, 0, 4.5])\n        cylinder(h=1, d=12);\n    \n    // Iris decoration rings\n    for(i=[1:3]) {\n        color(color_paint)\n        translate([10, 0, 4.3])\n            cylinder(h=0.5, d=10+i*2);\n    }\n    \n    // Eyebrow\n    translate([-15, 15, 5])\n        rotate([0, 0, -20])\n            scale([1.5, 0.3, 0.5])\n                cube([20, 5, 3], center=true);\n    \n    // Decorative markings - falcon eye markings\n    module eye_marking(x, y, rot, scale_factor) {\n        translate([x, y, 3.5])\n            rotate([0, 0, rot])\n                scale([scale_factor, scale_factor, 1])\n                    cylinder(h=2, d=3);\n    }\n    \n    // Add curved markings below eye\n    for(i=[-45:15:45]) {\n        rad = 25;\n        x = cos(i) * rad;\n        y = sin(i) * rad - 10;\n        eye_marking(x, y, i+90, 0.8);\n    }\n    \n    // Vertical line below eye (typical of Wedjat)\n    translate([0, -20, 3.5])\n        cube([3, 15, 2], center=true);\n    \n    // Horizontal decorative lines\n    for(pos=[-8, 0, 8]) {\n        translate([pos, -27, 3.5])\n            cube([6, 3, 2], center=true);\n    }\n    \n    // Falcon tear marking\n    translate([-20, -5, 3.5])\n        rotate([0, 0, 30])\n            scale([0.5, 2, 1])\n                cube([4, 15, 2], center=true);\n    \n    // Corner spiral decorations\n    module spiral_corner(x, y, rot) {\n        translate([x, y, 3.5])\n            rotate([0, 0, rot])\n                for(i=[0:30:270]) {\n                    translate([cos(i)*3, sin(i)*3, 0])\n                        cylinder(h=2, d=2);\n                }\n    }\n    \n    spiral_corner(-20, 10, 0);\n    spiral_corner(25, -5, 180);\n    \n    // Back mounting loop for wearing\n    translate([0, 0, -4])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=5, d=8);\n                translate([0, 0, -1])\n                    cylinder(h=7, d=4);\n            }\n}\n\n// Render the amulet\ncolor(color_wood)\nwedjat_eye();",
    "renders": true
  },
  {
    "historical_artifact": "hand",
    "openscad_code": "// Roman bronze votive hand (2nd-3rd century AD)\n// Found in temples as offerings to gods\n// Features: life-size right hand, hollow-cast bronze construction\n// Decorated with geometric patterns and dedication text\n\n// Overall dimensions for 3D printing\noverall_scale = 0.7;\n\n// Bronze color for realistic appearance\ncolor([0.72, 0.52, 0.35]) \n\ndifference() {\n    // Main hand structure - hollow for bronze casting realism\n    union() {\n        // Palm base - slightly cupped for offering gesture\n        translate([0, 0, 5]) \n            scale([1, 1.2, 0.8]) \n            sphere(18 * overall_scale);\n\n        // Palm extension\n        translate([0, -10 * overall_scale, 0])\n            cube([35 * overall_scale, 30 * overall_scale, 12 * overall_scale], center = true);\n\n        // Thumb\n        translate([-15 * overall_scale, -8 * overall_scale, 8 * overall_scale])\n            rotate([0, 0, -30])\n            cylinder(h = 25 * overall_scale, r1 = 7 * overall_scale, r2 = 5 * overall_scale);\n\n        // Fingers module with joints\n        module finger(length, angle, x_pos) {\n            translate([x_pos, -20 * overall_scale, 8 * overall_scale])\n                rotate([0, 0, angle])\n                union() {\n                    // First phalanx\n                    cylinder(h = length * 0.4, r = 5 * overall_scale);\n                    // Second phalanx\n                    translate([0, -length * 0.4, 0])\n                        cylinder(h = length * 0.35, r = 4.5 * overall_scale);\n                    // Third phalanx\n                    translate([0, -length * 0.75, 0])\n                        cylinder(h = length * 0.25, r = 4 * overall_scale);\n                }\n        }\n\n        // Create four fingers with proper spacing\n        finger(28 * overall_scale, 0, 12 * overall_scale);      // Index\n        finger(30 * overall_scale, 0, 6 * overall_scale);       // Middle\n        finger(28 * overall_scale, 0, 0);                       // Ring\n        finger(25 * overall_scale, 5, -6 * overall_scale);      // Little\n\n        // Wrist transition\n        translate([0, 8 * overall_scale, 0])\n            cylinder(h = 15 * overall_scale, r1 = 15 * overall_scale, r2 = 12 * overall_scale);\n\n        // Decorative bronze rim around wrist\n        translate([0, 15 * overall_scale, 0])\n            difference() {\n                cylinder(h = 3 * overall_scale, r = 16 * overall_scale);\n                cylinder(h = 3.1 * overall_scale, r = 14 * overall_scale);\n            }\n\n        // Geometric decoration on back of hand\n        for (i = [-1:1]) {\n            translate([i * 8 * overall_scale, -5 * overall_scale, 13 * overall_scale])\n                rotate([90, 0, 0])\n                cylinder(h = 2 * overall_scale, r = 2 * overall_scale);\n        }\n        \n        // Central decorative boss\n        translate([0, -5 * overall_scale, 14 * overall_scale])\n            sphere(3 * overall_scale);\n    }\n\n    // Hollow interior for bronze casting realism\n    translate([0, -5 * overall_scale, 2 * overall_scale])\n        scale([0.85, 0.85, 0.85])\n        union() {\n            sphere(16 * overall_scale);\n            translate([0, -15 * overall_scale, -2 * overall_scale])\n                cube([30 * overall_scale, 25 * overall_scale, 25 * overall_scale], center = true);\n        }\n\n    // Drain hole for casting (bottom of wrist)\n    translate([0, 15 * overall_scale, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 20 * overall_scale, r = 3 * overall_scale);\n}\n\n// Dedication inscription on palm\ntranslate([0, -12 * overall_scale, 10 * overall_scale])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5 * overall_scale)\n    text(\"D M\", size = 4 * overall_scale, halign = \"center\", font = \"Liberation Serif:style=Bold\");",
    "renders": true
  },
  {
    "historical_artifact": "fish",
    "openscad_code": "// Fish-shaped clay lamp from the Roman period (1st-3rd century CE)\n// Typical size: ~80 mm long, ~35 mm wide, ~25 mm high\n// Found throughout the Mediterranean, often with red slip ware finish\n\n// Overall scale factor\nscale_factor = 1;  // adjust for different print sizes\nbody_length = 80 * scale_factor;\nbody_width = 35 * scale_factor;\nbody_height = 25 * scale_factor;\n\n// Artifact color - characteristic red terracotta\ncolor([0.72, 0.25, 0.25]) {\n    // Main body - fish form\n    union() {\n        // Fish body - elongated oval\n        translate([0, 0, body_height/2])\n            scale([1.4, 1, 0.8])\n            sphere(d = body_width, $fn=32);\n        \n        // Fish head - more pointed\n        translate([-body_length/2.5, 0, body_height/2.5])\n            scale([1.8, 1.2, 1])\n            sphere(d = body_width*0.7, $fn=32);\n        \n        // Tail fin - triangular\n        translate([body_length/2.2, 0, body_height/3])\n            rotate([0, 0, 180])\n            linear_extrude(height=body_height/3)\n                polygon(points=[[0,0], [-body_width/2, body_width/2], [-body_width/2, -body_width/2]]);\n        \n        // Dorsal fin - series of small triangles\n        for(i = [-body_length/3:body_length/6:body_length/3]) {\n            translate([i, 0, body_height*0.9])\n                rotate([90, 0, 0])\n                linear_extrude(height=body_width/8)\n                    polygon(points=[[0,0], [-body_width/8, body_width/4], [body_width/8, body_width/4]]);\n        }\n        \n        // Eye - protruding disk\n        translate([-body_length/2.8, body_width/4, body_height/2])\n            cylinder(h=body_height/10, d=body_width/6, $fn=16);\n        \n        // Mouth opening - spout for wick\n        translate([-body_length/2.1, 0, body_height/3])\n            rotate([90, 0, 0])\n            cylinder(h=body_length/8, d1=body_width/8, d2=body_width/12, $fn=16);\n    }\n    \n    // Oil reservoir - hollowed body\n    difference() {\n        // Outer shell\n        translate([0, 0, body_height/2])\n            scale([1.35, 0.95, 0.75])\n            sphere(d = body_width*0.9, $fn=32);\n        \n        // Inner cavity with proper wall thickness\n        translate([0, 0, body_height/2])\n            scale([1.25, 0.85, 0.65])\n            sphere(d = body_width*0.8, $fn=32);\n        \n        // Filling hole on top\n        translate([0, 0, body_height*0.85])\n            cylinder(h=body_height/5, d=body_width/5, $fn=16);\n    }\n    \n    // Decorative scales pattern\n    for(x = [-body_length/3:body_length/8:body_length/3]) {\n        for(y = [-body_width/3:body_width/6:body_width/3]) {\n            if(sqrt(x^2 + y^2) < body_width/2.5) {\n                translate([x, y, body_height*0.85])\n                    scale([1, 0.7, 0.3])\n                    sphere(d=body_width/12, $fn=8);\n            }\n        }\n    }\n    \n    // Roman decorative band around body\n    translate([0, 0, body_height*0.6])\n        rotate_extrude($fn=64)\n            translate([body_width/2.1, 0, 0])\n            square([body_width/30, body_height/20]);\n    \n    // Base ring for stability\n    translate([0, 0, body_height/10])\n        cylinder(h=body_height/15, d=body_width*1.1, $fn=32);\n    \n    // Wick rest area - small platform\n    translate([-body_length/2, 0, body_height/4])\n        cube([body_length/10, body_width/6, body_height/20], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "bird",
    "openscad_code": "// Ancient Egyptian Horus Falcon Amulet (c. 1550-1070 BCE)\n// Medium complexity realistic replica with 3D printable features\n// Overall dimensions: 70mm wingspan, 60mm height, 15mm depth\n\n// Base color for sandstone/limestone appearance\ncolor([0.85, 0.78, 0.65]) {\n\n// Main body - stylized falcon body\nmodule falcon_body() {\n    difference() {\n        union() {\n            // Torso - elongated oval\n            scale([1.2, 0.8, 0.6])\n                sphere(d=25);\n            \n            // Chest protrusion\n            translate([0, -5, -2])\n                scale([0.8, 0.6, 0.4])\n                    sphere(d=15);\n        }\n        \n        // Remove bottom flat for printing\n        translate([-20, -20, -10])\n            cube([40, 40, 10]);\n    }\n}\n\n// Head with hooked beak\nmodule falcon_head() {\n    union() {\n        // Main head sphere\n        translate([0, 12, 8])\n            scale([1, 1.1, 1.1])\n                sphere(d=18);\n        \n        // Beak\n        translate([0, 22, 8])\n            rotate([0, -20, 0])\n                scale([0.3, 1.5, 0.4])\n                    cylinder(h=12, d1=8, d2=2);\n        \n        // Eye ridge detail\n        translate([-6, 12, 10])\n            sphere(d=4);\n        translate([6, 12, 10])\n            sphere(d=4);\n    }\n}\n\n// Wings with feather details\nmodule wings() {\n    union() {\n        // Left wing\n        translate([-15, 0, 5])\n            rotate([0, 0, 30])\n                wing_shape();\n        \n        // Right wing\n        translate([15, 0, 5])\n            rotate([0, 0, -30])\n                    mirror([1, 0, 0])\n                        wing_shape();\n    }\n}\n\n// Individual wing with feather layers\nmodule wing_shape() {\n    difference() {\n        // Main wing shape\n        scale([1.2, 2, 0.2])\n            sphere(d=20);\n        \n        // Feather notches\n        for(i = [0:3]) {\n            translate([-8 + i*4, 15 - i*3, -2])\n                rotate([0, 0, -20 + i*10])\n                    scale([0.5, 0.3, 3])\n                        cube([8, 3, 1]);\n        }\n    }\n}\n\n// Tail feathers\nmodule tail() {\n    union() {\n        // Central tail\n        translate([0, -18, 3])\n            scale([0.3, 1, 0.2])\n                sphere(d=15);\n        \n        // Side tail feathers\n        translate([-4, -18, 3])\n            rotate([0, 0, 15])\n                scale([0.2, 0.8, 0.15])\n                    sphere(d=12);\n        \n        translate([4, -18, 3])\n            rotate([0, 0, -15])\n                scale([0.2, 0.8, 0.15])\n                    sphere(d=12);\n    }\n}\n\n// Hieroglyphic inscription band\nmodule inscription_band() {\n    color([0.7, 0.6, 0.5]) {\n        translate([0, 5, 12])\n            scale([1.5, 0.2, 0.1])\n                cube([20, 8, 1]);\n        \n        // Simple hieroglyphs (Eye of Horus pattern)\n        for(i = [-3:3]) {\n            translate([i*3, 5, 12.5])\n                rotate([90, 0, 0])\n                    scale([0.3, 0.3, 0.3])\n                        cylinder(h=0.5, d=2);\n        }\n    }\n}\n\n// Suspension loop on back\nmodule suspension_loop() {\n    translate([0, 8, -5])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=5, d=8);\n                translate([0, 0, -1])\n                    cylinder(h=7, d=4);\n            }\n}\n\n// Assembly\nunion() {\n    falcon_body();\n    falcon_head();\n    wings();\n    tail();\n    inscription_band();\n    \n    // Only add suspension loop if printing flat on back\n    // suspension_loop();\n}\n\n}",
    "renders": true
  },
  {
    "historical_artifact": "feather",
    "openscad_code": "// Historical feather artifact - Aztec quetzal feather tribute\n// Dimensions: 80mm length, 20mm width at widest point\n\n$fn = 32;\n\n// Main feather color - quetzal green\ncolor([0.1, 0.6, 0.2]) {\n    union() {\n        // Central rachis (shaft)\n        translate([0, 0, 1]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 80, r1 = 1.5, r2 = 0.5);\n            }\n        }\n        \n        // Feather vane - left side\n        module left_vane() {\n            difference() {\n                // Main vane shape\n                translate([-20, 0, 0]) {\n                    rotate([0, 0, 5]) {\n                        cube([20, 80, 0.5]);\n                    }\n                }\n                \n                // Barbs - creating feather texture\n                for (i = [0:4:76]) {\n                    translate([-20, i, 0.3]) {\n                        rotate([0, 0, -2]) {\n                            cube([22, 2, 0.3]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Feather vane - right side\n        module right_vane() {\n            difference() {\n                // Main vane shape\n                translate([0, 0, 0]) {\n                    rotate([0, 0, -5]) {\n                        cube([20, 80, 0.5]);\n                    }\n                }\n                \n                // Barbs\n                for (i = [0:4:76]) {\n                    translate([-2, i, 0.3]) {\n                        rotate([0, 0, 2]) {\n                            cube([22, 2, 0.3]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Position vanes\n        left_vane();\n        right_vane();\n        \n        // Calamus (quill end)\n        translate([0, 78, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 10, r1 = 1.5, r2 = 2);\n            }\n        }\n        \n        // Historical gold decoration bands\n        color([0.8, 0.7, 0.1]) {\n            // Upper band - Aztec sun symbol\n            translate([0, 15, 0.8]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 3, r = 3, $fn = 8);\n                }\n            }\n            \n            // Lower band - tribute marker\n            translate([0, 35, 0.8]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 2, r = 2.5, $fn = 6);\n                }\n            }\n        }\n        \n        // Decorative barbules at tip\n        for (i = [0:20:60]) {\n            translate([-10 + i/3, i, 0.6]) {\n                rotate([0, 0, -30 + i/2]) {\n                    color([0.15, 0.5, 0.25]) {\n                        cube([8 - i/10, 0.5, 0.2]);\n                    }\n                }\n            }\n            \n            translate([10 - i/3, i, 0.6]) {\n                rotate([0, 0, 30 - i/2]) {\n                    color([0.15, 0.5, 0.25]) {\n                        cube([8 - i/10, 0.5, 0.2]);\n                    }\n                }\n            }\n        }\n        \n        // Eye spots - traditional quetzal markings\n        color([0.05, 0.3, 0.15]) {\n            for (i = [20:15:65]) {\n                translate([0, i, 1]) {\n                    sphere(r = 1.5);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "leaf",
    "openscad_code": "// Bronze Age leaf-shaped votive offering\n// Based on Minoan gold-leaf votives found in Crete (c. 1500 BCE)\n\n$fn=64;  // Smooth curves for realistic appearance\n\n// Main leaf body\ncolor([0.65, 0.45, 0.25])  // Bronze patina color\ndifference() {\n    union() {\n        // Central leaf blade\n        leaf_blade();\n        \n        // Stem with decorative ring\n        stem();\n        \n        // Veins for structural strength and decoration\n        veins();\n        \n        // Hanging loop for temple display\n        hanging_loop();\n    }\n    \n    // Central inscription recess\n    inscription_recess();\n}\n\nmodule leaf_blade() {\n    // Tapered leaf shape using hull of scaled spheres\n    hull() {\n        // Tip of leaf\n        translate([0, 0, 1])\n            scale([0.5, 1, 0.2])\n            sphere(d=3);\n        \n        // Wide base\n        translate([0, -40, 1])\n            scale([1.5, 1, 0.4])\n            sphere(d=10);\n    }\n    \n    // Thicken edges for 3D printing\n    difference() {\n        // Outer blade\n        translate([0, -20, 0])\n            scale([1, 1.8, 0.15])\n            cylinder(h=2, d=50);\n        \n        // Inner hollow for material saving\n        translate([0, -20, -0.5])\n            scale([0.9, 1.7, 0.3])\n            cylinder(h=3, d=45);\n    }\n}\n\nmodule stem() {\n    color([0.7, 0.5, 0.3])\n    // Main stem\n    translate([0, 30, 0])\n        rotate([90, 0, 0])\n        cylinder(h=15, d1=5, d2=3);\n    \n    // Decorative ring\n    color([0.6, 0.4, 0.2])\n    translate([0, 45, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, d=7);\n    \n    // Ring hole\n    difference() {\n        cylinder(h=3, d=7);\n        translate([0, 0, -0.5])\n            cylinder(h=4, d=3);\n    }\n}\n\nmodule veins() {\n    color([0.5, 0.35, 0.2])\n    // Central vein\n    translate([0, -30, 1.5])\n        rotate([10, 0, 0])\n        cylinder(h=40, d1=2, d2=1);\n    \n    // Side veins\n    for (i = [-1:1]) {\n        translate([0, -20 + i*15, 1.3])\n            rotate([0, 0, i*20])\n            scale([1, 0.8, 1])\n            cylinder(h=25, d1=1.5, d2=0.5);\n    }\n}\n\nmodule hanging_loop() {\n    color([0.6, 0.4, 0.2])\n    translate([0, 47, 0])\n        rotate([0, 90, 0])\n        torus(4, 1.5);\n}\n\nmodule torus(r, tube_r) {\n    rotate_extrude()\n        translate([r, 0, 0])\n            circle(tube_r);\n}\n\nmodule inscription_recess() {\n    // Linear A inscription area\n    color([0.3, 0.2, 0.1])\n    translate([0, -15, 1.8])\n        scale([1.2, 0.3, 1])\n        cube([25, 8, 0.5], center=true);\n    \n    // Three holes for symbolic offerings\n    for (i = [-1:0:1]) {\n        translate([i*8, -15, 2])\n            cylinder(h=3, d=2);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "flower",
    "openscad_code": "// Lotus-shaped offering bowl - Ancient Egyptian artifact (c. 1550 BCE)\n// Used in temple rituals for sacred water and offerings to gods\n\n// Main dimensions\nbowl_diameter = 80;\nbowl_height = 35;\npetal_count = 16;\nwall_thickness = 2.5;\n\n// Colors\ncolor_bowl = [0.8, 0.7, 0.4]; // Weathered bronze\ncolor_petals = [0.6, 0.5, 0.3]; // Oxidized bronze\ncolor_inscription = [0.2, 0.1, 0.1]; // Dark patina\n\n// Base pedestal\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=12, d1=45, d2=40, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=14, d1=35, d2=30, $fn=32);\n    }\n}\n\n// Lotus petal with realistic curve\nmodule petal() {\n    difference() {\n        // Main petal shape\n        scale([1, 1.8, 1])\n            sphere(d=22, $fn=16);\n        \n        // Inner hollow\n        translate([0, -2, 0])\n            scale([0.7, 0.7, 0.9])\n                sphere(d=20, $fn=16);\n        \n        // Flatten bottom\n        translate([0, 0, -12])\n            cube([40, 40, 25], center=true);\n    }\n}\n\n// Hieroglyphic inscription band\nmodule inscription_band() {\n    rotate([90, 0, 0]) {\n        // Raised band\n        difference() {\n            cylinder(h=3, d=75, center=true, $fn=64);\n            cylinder(h=4, d=70, center=true, $fn=64);\n        }\n        \n        // Simplified hieroglyphs - lotus symbols\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n                translate([32, 0, 0])\n                    scale([0.3, 0.3, 1])\n                        cube([5, 8, 2], center=true);\n        }\n    }\n}\n\n// Main bowl body\nmodule bowl() {\n    difference() {\n        // Outer bowl\n        scale([1, 1, 0.6])\n            sphere(d=bowl_diameter, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, -5])\n            scale([1, 1, 0.5])\n                sphere(d=bowl_diameter - 2*wall_thickness, $fn=64);\n        \n        // Flatten bottom\n        translate([0, 0, -18])\n            cube([bowl_diameter, bowl_diameter, 20], center=true);\n    }\n}\n\n// Petal ring\nmodule petal_ring() {\n    for(i=[0:petal_count-1]) {\n        rotate([0, 0, i*360/petal_count])\n            translate([0, 30, 8])\n                rotate([15, 0, 0])\n                    petal();\n    }\n}\n\n// Central lotus seed pod\nmodule seed_pod() {\n    difference() {\n        cylinder(h=8, d=20, $fn=32);\n        \n        // Seed impressions\n        for(i=[0:8]) {\n            rotate([0, 0, i*40])\n                translate([6, 0, 3])\n                    sphere(d=3, $fn=8);\n        }\n    }\n}\n\n// Assembly\ncolor(color_bowl) base();\ntranslate([0, 0, 12]) color(color_bowl) bowl();\ntranslate([0, 0, 12]) color(color_petals) petal_ring();\ntranslate([0, 0, 25]) color(color_inscription) inscription_band();\ntranslate([0, 0, 30]) color(color_bowl) seed_pod();",
    "renders": true
  },
  {
    "historical_artifact": "lotus",
    "openscad_code": "// Lotus-shaped oil lamp inspired by ancient Egyptian artifacts\n// Dimensions: 80mm diameter, 50mm height\n\n// Base color for bronze patina\ncolor([0.5, 0.4, 0.3]) {\n    // Central bowl for oil\n    union() {\n        // Main lotus bowl\n        difference() {\n            // Outer bowl shape\n            cylinder(h = 12, r1 = 25, r2 = 20, $fn = 64);\n            translate([0, 0, 2])\n                cylinder(h = 12, r1 = 22, r2 = 17, $fn = 64);\n        }\n        \n        // Base pedestal\n        translate([0, 0, -8])\n            cylinder(h = 8, r1 = 12, r2 = 15, $fn = 32);\n    }\n}\n\n// Lotus petals around the rim\nmodule petal() {\n    difference() {\n        // Main petal shape\n        scale([1, 2.5, 0.8])\n            sphere(r = 8, $fn = 16);\n        \n        // Cut underside\n        translate([0, -12, -6])\n            cube([20, 20, 12], center = true);\n        \n        // Taper the tip\n        translate([0, 10, 0])\n            rotate([0, 30, 0])\n                cube([15, 15, 15], center = true);\n    }\n}\n\n// Create 16 petals around the bowl\nfor (i = [0:15]) {\n    angle = i * 22.5;\n    translate([0, 0, 10])\n    rotate([0, 0, angle])\n    translate([0, 20, 0])\n    rotate([15, 0, 0])\n    color([0.45, 0.35, 0.25])\n    petal();\n}\n\n// Decorative hieroglyphic band around bowl\nmodule hieroglyph() {\n    color([0.4, 0.3, 0.2])\n    translate([0, 0, 6])\n    difference() {\n        cylinder(h = 2, r = 23, $fn = 64);\n        translate([0, 0, -0.5])\n            cylinder(h = 3, r = 21.5, $fn = 64);\n    }\n}\n\nhieroglyph();\n\n// Small lotus buds as decorative elements\nmodule bud() {\n    union() {\n        // Bud body\n        sphere(r = 3, $fn = 16);\n        \n        // Stem\n        translate([0, 0, -3])\n            cylinder(h = 6, r1 = 1.5, r2 = 1, $fn = 8);\n    }\n}\n\n// Place buds between petals\nfor (i = [0:15]) {\n    angle = i * 22.5 + 11.25;\n    translate([0, 0, 8])\n    rotate([0, 0, angle])\n    translate([0, 23, 0])\n    color([0.35, 0.28, 0.22])\n    bud();\n}\n\n// Wick holder in center\ntranslate([0, 0, 12])\n    cylinder(h = 5, r = 3, $fn = 16);\n\n// Bottom detail - concentric rings\nfor (r = [8:2:14]) {\n    color([0.4, 0.32, 0.24])\n    translate([0, 0, -7.5])\n    difference() {\n        cylinder(h = 1, r = r + 0.5, $fn = 64);\n        cylinder(h = 1.2, r = r, $fn = 64);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "rose",
    "openscad_code": "// Medieval Rose Reliquary Pendant (13th-14th century style)\n// Based on surviving examples from French reliquaries\n\n// Overall dimensions: 60mm height including bail, 45mm width\n\ncolor(\"gold\") {\n    // Main body - hexagonal reliquary box\n    difference() {\n        // Hollow hexagonal prism\n        cylinder(h=15, r1=22, r2=22, $fn=6);\n        translate([0,0,2]) cylinder(h=13, r1=20, r2=20, $fn=6);\n    }\n    \n    // Decorative band around top edge\n    translate([0,0,15]) cylinder(h=2, r1=23, r2=23, $fn=6);\n    \n    // Bottom decorative base\n    translate([0,0,-3]) cylinder(h=3, r1=24, r2=22, $fn=6);\n}\n\n// Rose relief on front face\ncolor(\"burlywood\") {\n    rotate([0,0,0]) translate([0, -19, 7]) rose();\n}\n\n// Back face with inscription\ncolor(\"gold\") {\n    translate([0, 19.5, 7.5]) {\n        rotate([0,180,0]) {\n            // Inscription panel\n            cube([30, 1, 25], center=true);\n            // Raised letters (simplified)\n            for (i=[-10:5:10]) {\n                translate([i, 0.5, 0]) cube([2, 0.5, 2]);\n            }\n        }\n    }\n}\n\n// Bail for chain\ncolor(\"gold\") {\n    translate([0, 0, 20]) {\n        rotate([90,0,0]) {\n            difference() {\n                cylinder(h=8, r1=4, r2=4);\n                cylinder(h=8, r1=3, r2=3);\n            }\n        }\n    }\n}\n\n// Side decorative bosses\ncolor(\"gold\") {\n    for (a=[60, 180, 300]) {\n        rotate([0,0,a]) translate([22,0,7.5]) sphere(r=2.5);\n    }\n}\n\nmodule rose() {\n    // Central boss\n    sphere(r=3.5);\n    \n    // Petals in two layers\n    for (layer=[0:1]) {\n        for (i=[0:4]) {\n            rotate([0,0,i*72 + layer*36]) {\n                translate([6 + layer*3, 0, layer*2]) {\n                    scale([1.2, 0.8, 0.3]) sphere(r=4.5);\n                }\n            }\n        }\n    }\n    \n    // Sepals at base\n    for (i=[0:4]) {\n        rotate([0,0,i*72 + 36]) {\n            translate([0, -6, -2]) {\n                rotate([45,0,0]) cylinder(h=3, r1=2, r2=0.5);\n            }\n        }\n    }\n    \n    // Stem detail\n    translate([0, -9, -2]) {\n        rotate([90,0,0]) cylinder(h=6, r1=1, r2=1);\n    }\n}\n\n// Internal hollow for relic\ncolor(\"antiquewhite\") {\n    translate([0,0,7.5]) {\n        rotate([0,0,0]) {\n            cylinder(h=11, r1=18, r2=18, $fn=6);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "orchid",
    "openscad_code": "// Ancient Orchid Vase - Historical Artifact (Ming Dynasty style)\n// Ceramic vase with orchid motif relief decorations\n// Overall height: 80mm, base diameter: 45mm\n\n// Color definitions for ceramic glaze\nvase_color = [0.9, 0.85, 0.75];  // Cream-white glaze\ndetail_color = [0.7, 0.5, 0.3];  // Brown underglaze details\n\n// Main vase body module\nmodule vase_body() {\n    color(vase_color) {\n        // Lower base\n        cylinder(h=10, r1=22.5, r2=20, $fn=64);\n        \n        // Main body\n        translate([0, 0, 10])\n            cylinder(h=50, r1=20, r2=15, $fn=64);\n            \n        // Neck\n        translate([0, 0, 60])\n            cylinder(h=15, r1=15, r2=12, $fn=64);\n            \n        // Rim\n        translate([0, 0, 75])\n            cylinder(h=5, r1=12.5, r2=12, $fn=64);\n    }\n}\n\n// Orchid petal module for decorations\nmodule orchid_petal(size) {\n    scale([size, size, size]) {\n        // Main petal shape\n        rotate([0, 90, 0])\n            cylinder(h=8, r1=3, r2=0.5, $fn=16);\n            \n        // Petal detail ridge\n        translate([0, 0, 4])\n            rotate([0, 90, 0])\n                cylinder(h=0.5, r1=1.5, r2=0.3, $fn=8);\n    }\n}\n\n// Orchid flower module\nmodule orchid_flower(x, y, z, rot) {\n    color(detail_color) {\n        translate([x, y, z]) {\n            rotate([0, 0, rot]) {\n                // Center of flower\n                sphere(r=2, $fn=16);\n                \n                // Create 5 petals in circle\n                for (i = [0:4]) {\n                    rotate([0, 0, i * 72])\n                        translate([2.5, 0, 0])\n                            orchid_petal(1);\n                }\n                \n                // Small sphere details\n                for (i = [0:3]) {\n                    rotate([0, 0, i * 90])\n                        translate([1.8, 0, 1])\n                            sphere(r=0.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Leaf module for decoration\nmodule orchid_leaf(x, y, z, rot, scale_factor) {\n    color(detail_color) {\n        translate([x, y, z]) {\n            rotate([0, 0, rot]) {\n                scale([scale_factor, scale_factor, scale_factor]) {\n                    // Main leaf shape\n                    translate([-5, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h=15, r1=2, r2=0.5, $fn=16);\n                            \n                    // Leaf vein\n                    translate([-5, 0, 0.5])\n                        rotate([0, 90, 0])\n                            cylinder(h=15, r1=0.3, r2=0.1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Decorative band with Chinese pattern\nmodule decorative_band() {\n    color(detail_color) {\n        // Upper band\n        translate([0, 0, 70])\n            difference() {\n                cylinder(h=3, r1=15.2, r2=15.2, $fn=64);\n                cylinder(h=3.1, r1=14.5, r2=14.5, $fn=64);\n            }\n            \n        // Lower band\n        translate([0, 0, 15])\n            difference() {\n                cylinder(h=3, r1=20.2, r2=20.2, $fn=64);\n                cylinder(h=3.1, r1=19.5, r2=19.5, $fn=64);\n            }\n    }\n}\n\n// Create the complete vase\nunion() {\n    vase_body();\n    \n    // Add decorative bands\n    decorative_band();\n    \n    // Add orchid flowers around upper body\n    for (i = [0:3]) {\n        angle = i * 90;\n        x = cos(angle) * 17;\n        y = sin(angle) * 17;\n        orchid_flower(x, y, 35, angle + 45);\n    }\n    \n    // Add orchid flowers around middle body\n    for (i = [0:2]) {\n        angle = i * 120 + 60;\n        x = cos(angle) * 19;\n        y = sin(angle) * 19;\n        orchid_flower(x, y, 25, angle);\n    }\n    \n    // Add leaves between flowers\n    orchid_leaf(17, 0, 30, 30, 0.8);\n    orchid_leaf(-17, 0, 30, -30, 0.8);\n    orchid_leaf(0, 17, 30, 120, 0.8);\n    orchid_leaf(0, -17, 30, -120, 0.8);\n    \n    // Add small leaf details on neck\n    orchid_leaf(10, 0, 65, 45, 0.6);\n    orchid_leaf(-10, 0, 65, -45, 0.6);\n}",
    "renders": true
  },
  {
    "historical_artifact": "lily",
    "openscad_code": "// Lily artifact - Ancient Egyptian lotus/lily motif\n// Medium complexity 3D printable historical artifact\n\n// Overall dimensions\nartifact_height = 60;\nbase_diameter = 45;\n\n// Colors\npapyrus_color = \"#f5e6d3\";\ngold_color = \"#d4af37\";\nstone_color = \"#8b7355\";\n\n// Base module - papyrus column style\nmodule lily_base() {\n    color(papyrus_color) {\n        // Main base cylinder\n        cylinder(h=12, d=base_diameter, $fn=64);\n        \n        // Decorative rings\n        translate([0, 0, 12])\n            cylinder(h=2, d=base_diameter + 4, $fn=64);\n            \n        translate([0, 0, 14])\n            cylinder(h=1.5, d=base_diameter + 2, $fn=64);\n    }\n}\n\n// Stem module - fluted column style\nmodule lily_stem() {\n    color(stone_color) {\n        // Main stem\n        cylinder(h=25, d=8, $fn=32);\n        \n        // Fluting details\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([4, 0, 0])\n                    cube([1, 1, 25], center=true);\n        }\n    }\n}\n\n// Petal module - individual lily petal\nmodule lily_petal(length, width, thickness, angle) {\n    translate([0, 0, 35]) {\n        rotate([0, angle, 0]) {\n            // Petal shape using scaled spheres\n            scale([width/10, length/20, thickness/2])\n                sphere(10, $fn=32);\n                \n            // Vein detail\n            color(gold_color) {\n                rotate([90, 0, 0])\n                    translate([0, 0, -length/2])\n                        cylinder(h=length, d=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Flower module - assembled lily\nmodule lily_flower() {\n    color(papyrus_color) {\n        // Central bud\n        translate([0, 0, 35])\n            sphere(6, $fn=32);\n            \n        // Outer petals\n        lily_petal(20, 12, 2, 0);\n        lily_petal(20, 12, 2, 72);\n        lily_petal(20, 12, 2, 144);\n        lily_petal(20, 12, 2, 216);\n        lily_petal(20, 12, 2, 288);\n        \n        // Inner petals\n        lily_petal(15, 8, 1.5, 36);\n        lily_petal(15, 8, 1.5, 108);\n        lily_petal(15, 8, 1.5, 180);\n        lily_petal(15, 8, 1.5, 252);\n        lily_petal(15, 8, 1.5, 324);\n    }\n    \n    // Anthers\n    color(gold_color) {\n        for(i=[0:4]) {\n            rotate([0, 0, i*72])\n                translate([0, 3, 40])\n                    cylinder(h=8, d=0.8, $fn=8);\n        }\n    }\n}\n\n// Hieroglyphic decoration module\nmodule hieroglyphics() {\n    color(gold_color) {\n        // Decorative band around base\n        translate([0, 0, 8])\n            for(i=[0:15]) {\n                rotate([0, 0, i*22.5])\n                    translate([base_diameter/2 - 2, 0, 0])\n                        cube([3, 0.5, 2], center=true);\n            }\n            \n        // Lotus symbols on stem\n        translate([0, 0, 20])\n            for(i=[0:3]) {\n                rotate([0, 0, i*120])\n                    translate([5, 0, 0])\n                        scale([0.3, 0.3, 0.3])\n                            sphere(2, $fn=16);\n            }\n    }\n}\n\n// Assembly\nlily_base();\ntranslate([0, 0, 12]) lily_stem();\nlily_flower();\nhieroglyphics();",
    "renders": true
  },
  {
    "historical_artifact": "daisy",
    "openscad_code": "// Historical Daisy Artifact - Roman Era Decorative Brooch\n// Size: 70mm diameter, suitable for 3D printing\n\n// Base module for the brooch body\nmodule brooch_base() {\n    difference() {\n        // Main circular base\n        cylinder(h=3, d=70, $fn=100);\n        \n        // Central hole for pin attachment\n        translate([0, 0, -1])\n            cylinder(h=5, d=8, $fn=32);\n    }\n}\n\n// Petal module with historical decorative ridges\nmodule petal(length, width, thickness) {\n    color(\"ivory\")\n    difference() {\n        // Main petal shape\n        scale([width/length, 1, 1])\n            cylinder(h=thickness, d=length, $fn=3);\n        \n        // Historical decorative ridges\n        for(i = [1:3]) {\n            translate([0, 0, thickness/2])\n                scale([0.8 - i*0.1, 0.9 - i*0.05, 1])\n                    cylinder(h=thickness+1, d=length - i*5, $fn=3);\n        }\n    }\n}\n\n// Center disk with Roman decorative pattern\nmodule flower_center() {\n    color(\"goldenrod\")\n    union() {\n        // Main center disk\n        cylinder(h=5, d=25, $fn=64);\n        \n        // Historical dot pattern - typical Roman decorative style\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n                translate([8, 0, 5.5])\n                    sphere(d=2.5, $fn=16);\n        }\n        \n        // Central boss decoration\n        translate([0, 0, 6])\n            sphere(d=6, $fn=32);\n    }\n}\n\n// Decorative border ring with classical motifs\nmodule decorative_border() {\n    color(\"burlywood\")\n    difference() {\n        // Outer ring\n        cylinder(h=4, d=74, $fn=100);\n        \n        // Inner cut\n        cylinder(h=5, d=66, $fn=100);\n    }\n    \n    // Classical bead pattern on border\n    for(i = [0:29]) {\n        rotate([0, 0, i*12])\n            translate([33, 0, 2])\n                sphere(d=3, $fn=16);\n    }\n}\n\n// Attachment pin base (historical brooch feature)\nmodule pin_attachment() {\n    color(\"gray\")\n    translate([0, 0, -2])\n        difference() {\n            // Pin hinge base\n            cube([15, 6, 4], center=true);\n            \n            // Pin hole\n            translate([0, 0, -1])\n                cube([12, 3, 6], center=true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Base brooch\n    brooch_base();\n    \n    // Decorative border\n    translate([0, 0, 3])\n        decorative_border();\n    \n    // Petals arranged in historical 12-petal pattern\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([22, 0, 3.5])\n                petal(20, 10, 2.5);\n    }\n    \n    // Flower center\n    translate([0, 0, 3])\n        flower_center();\n    \n    // Historical pin attachment on back\n    rotate([0, 180, 0])\n        pin_attachment();\n}",
    "renders": true
  },
  {
    "historical_artifact": "violet",
    "openscad_code": "// Violet Roman intaglio signet ring (1st-2nd century CE)\n// Realistic style, medium complexity\n\n$fn=64;\n\n// Overall scale factor to reach ~60 mm max dimension\nscale_factor = 0.8;\n\ncolor(\"violet\") difference() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Finger hoop (oval torus)\n        rotate([90,0,0]) {\n            difference() {\n                torus(15, 4.5);\n                translate([0,0,-4.5]) cube([40,40,9], center=true);\n            }\n        }\n\n        // Oval bezel base\n        translate([0, 0, 14]) rotate([90,0,0]) {\n            difference() {\n                scale([1.3,1,0.4]) cylinder(h=2, r=15);\n                // Engraved violet intaglio\n                translate([0,0,-0.5]) scale([1.2,0.9,1]) cylinder(h=2.5, r=12);\n            }\n        }\n\n        // Decorative beaded edge around bezel\n        for(a=[0:30:359]) {\n            rotate([0,0,a]) translate([18,0,14]) sphere(r=1.2);\n        }\n\n        // Violet petals carved into intaglio (raised on ring)\n        for(i=[0:2]) {\n            rotate([0,0,i*120+30]) translate([0,0,14]) {\n                scale([1,0.7,1]) rotate([90,0,0]) {\n                    cylinder(h=0.3, r=5, $fn=6);\n                }\n            }\n        }\n\n        // Center dot of flower\n        translate([0,0,14.4]) sphere(r=1.5);\n\n        // Roman inscription band\n        rotate([0,0,0]) translate([0,0,-10]) {\n            difference() {\n                cylinder(h=4, r=16.5);\n                translate([0,0,-1]) cylinder(h=6, r=15.5);\n            }\n        }\n\n        // Latin inscription \"SPQR\" letters (simplified)\n        translate([-5,-1,-8]) cube([10,2,3]);\n        translate([-7,-1,-6]) cube([2,2,3]);\n        translate([5,-1,-6]) cube([2,2,3]);\n        translate([-1,-1,-4]) cube([2,2,3]);\n    }\n}\n\n// Helper module for torus\nmodule torus(outer, inner) {\n    rotate_extrude() translate([outer, 0, 0]) circle(r=inner);\n}",
    "renders": true
  },
  {
    "historical_artifact": "jasmine",
    "openscad_code": "// Jasmine Historical Artifact - Ancient Egyptian Perfume Vessel\n// Inspired by 18th Dynasty cosmetic vessels found in Tutankhamun's tomb\n\n// Main dimensions (in mm)\nbase_diameter = 40;\nheight = 80;\nwall_thickness = 2.5;\n\n// Colors matching historical materials\ncolor(\"gold\") \nunion() {\n    // Base pedestal with lotus decoration\n    difference() {\n        cylinder(h=8, d1=base_diameter, d2=base_diameter*0.9);\n        cylinder(h=8.5, d1=base_diameter-4, d2=base_diameter*0.9-4);\n    }\n    \n    // Main vessel body - elongated jasmine bud shape\n    translate([0,0,8])\n    difference() {\n        hull() {\n            cylinder(h=50, d1=base_diameter*0.9, d2=base_diameter*0.7);\n            translate([0,0,45])\n            sphere(d=base_diameter*0.7);\n        }\n        \n        // Hollow interior for perfume storage\n        translate([0,0,5])\n        cylinder(h=55, d1=base_diameter*0.9-wall_thickness*2, d2=base_diameter*0.7-wall_thickness*2);\n    }\n    \n    // Decorated neck with hieroglyphic band\n    translate([0,0,58])\n    union() {\n        cylinder(h=15, d1=base_diameter*0.7, d2=base_diameter*0.5);\n        \n        // Hieroglyphic decorative band\n        color(\"darkslategray\")\n        for(i=[0:15:360]) {\n            rotate([0,0,i])\n            translate([base_diameter*0.35-1, 0, 60])\n            cube([2, 0.5, 8], center=true);\n        }\n    }\n    \n    // Jasmine flower stopper with petals\n    translate([0,0,73])\n    union() {\n        // Central bud\n        sphere(d=base_diameter*0.5);\n        \n        // Jasmine petals arranged in star pattern\n        color(\"ivory\")\n        for(i=[0:45:360]) {\n            rotate([0,0,i])\n            translate([base_diameter*0.15, 0, 0])\n            rotate([0,90,0])\n            scale([0.8,0.4,1])\n            cylinder(h=base_diameter*0.3, d1=base_diameter*0.2, d2=base_diameter*0.1);\n        }\n    }\n    \n    // Side handles for suspension cords\n    module handle() {\n        translate([base_diameter*0.45, 0, 30])\n        rotate([90,0,0])\n        difference() {\n            torus(r1=base_diameter*0.1, r2=base_diameter*0.05);\n            cube([base_diameter*0.3, base_diameter*0.3, base_diameter*0.3], center=true);\n        }\n    }\n    \n    // Add handles on both sides\n    handle();\n    mirror([1,0,0]) handle();\n    \n    // Decorative lotus petals around base\n    color(\"gold\")\n    for(i=[0:30:360]) {\n        rotate([0,0,i])\n        translate([0, base_diameter*0.4, 4])\n        scale([0.3,1,0.5])\n        cylinder(h=4, d1=base_diameter*0.2, d2=0);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "pearl",
    "openscad_code": "// Historical Pearl Artifact - Roman Era Cultured Pearl with Gold Mountings\n// Based on 1st century AD Roman pearl jewelry findings\n\n// Overall dimensions for 3D printing\npearl_diameter = 30;\ntotal_height = 50;\nwall_thickness = 2;\n\nmodule pearl_surface() {\n    // Create realistic nacreous surface with slight irregularities\n    difference() {\n        sphere(d = pearl_diameter, $fn = 100);\n        \n        // Add slight surface imperfections for realism\n        for(i = [0:30]) {\n            rotate([rand(0,360), rand(0,360), rand(0,360)])\n            translate([rand(-14,14), rand(-14,14), rand(-14,14)])\n            sphere(d = rand(0.3,1.2), $fn = 8);\n        }\n    }\n}\n\nmodule gold_cap() {\n    // Upper gold mounting cap with decorative elements\n    color(\"gold\") {\n        // Main cap structure\n        cylinder(h = 8, d1 = 18, d2 = 22, $fn = 6);\n        \n        // Decorative ring\n        translate([0, 0, 8])\n        cylinder(h = 3, d = 24, $fn = 64);\n        \n        // Attachment loop\n        translate([0, 0, 11])\n        rotate_extrude($fn = 32)\n        translate([5, 0, 0])\n        circle(r = 2);\n    }\n}\n\nmodule gold_base() {\n    // Lower gold mounting base\n    color(\"gold\") {\n        // Main base structure\n        cylinder(h = 6, d1 = 20, d2 = 16, $fn = 6);\n        \n        // Decorative filigree elements\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([9, 0, 0])\n            cube([2, 1, 6], center = true);\n        }\n    }\n}\n\nmodule inscription_band() {\n    // Add Latin inscription band around the middle\n    color(\"gold\") \n    translate([0, 0, -1.5])\n    cylinder(h = 3, d = pearl_diameter + 4, $fn = 64);\n    \n    // Recessed inscription\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, -0.5])\n    cylinder(h = 1, d = pearl_diameter + 2, $fn = 64);\n    \n    // Simplified Latin text simulation\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([16, 0, -0.5])\n        cube([1.5, 0.5, 1], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Position pearl slightly offset for natural look\n    translate([0, 0, 15])\n    color([0.95, 0.95, 0.97])  // Pearl white with slight iridescence\n    pearl_surface();\n    \n    // Add gold mounting cap on top\n    translate([0, 0, 30])\n    gold_cap();\n    \n    // Add gold mounting base at bottom\n    translate([0, 0, 9])\n    gold_base();\n    \n    // Add decorative inscription band\n    inscription_band();\n    \n    // Small decorative gold studs around pearl\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([15, 0, 15])\n        color(\"gold\")\n        sphere(d = 2, $fn = 16);\n    }\n}\n\n// Add subtle support ring for 3D printing stability\ntranslate([0, 0, 3])\ncolor(\"gold\")\ncylinder(h = 1, d = 12, $fn = 32);",
    "renders": true
  },
  {
    "historical_artifact": "opal",
    "openscad_code": "// Opal Historical Artifact - Roman Intaglio Ring Setting\n// Based on ancient Roman carved opal ring designs (1st-3rd century AD)\n\n// Overall dimensions for 3D printing (roughly 70mm diameter)\n$fn = 50; // Smooth curves\n\n// Main opal gemstone\nmodule opal_gemstone() {\n    color(\"lightblue\") \n    difference() {\n        // Main opal body - slightly flattened sphere\n        scale([1, 1, 0.7]) \n        sphere(20);\n        \n        // Carved intaglio design - facing bust\n        translate([0, 0, 14.8])\n        rotate([90, 0, 0])\n        linear_extrude(height=0.4)\n        // Simplified profile face\n        union() {\n            // Head outline\n            circle(8);\n            // Neck\n            translate([0, -12, 0])\n            scale([0.6, 1.2, 1])\n            circle(4);\n            // Facial features\n            translate([-4, 2, 0])\n            scale([0.3, 0.5, 1])\n            circle(2); // Eye\n            translate([4, 2, 0])\n            scale([0.3, 0.5, 1])\n            circle(2); // Eye\n            translate([0, -2, 0])\n            scale([0.4, 0.5, 1])\n            circle(1.5); // Nose\n        }\n    }\n}\n\n// Roman-style ring band\nmodule roman_ring() {\n    color(\"gold\") {\n        // Main ring band with historical profile\n        rotate_extrude()\n        translate([25, 0, 0])\n        polygon(points=[\n            [0, 0], [3, 0], [3.5, 2], [4, 4], [3.5, 6], [2.5, 8], \n            [1, 10], [0, 12], [-1, 10], [-2.5, 8], [-3.5, 6], \n            [-4, 4], [-3.5, 2], [-3, 0]\n        ]);\n        \n        // Decorative beaded borders\n        for(i = [0:359]) {\n            rotate([0, 0, i])\n            translate([28, 0, 2])\n            sphere(1);\n        }\n    }\n}\n\n// Prongs to hold the opal\nmodule prongs() {\n    color(\"gold\")\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([18, 0, 12])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=2.5, r2=1.5);\n    }\n}\n\n// Decorative Roman acanthus leaves on shoulders\nmodule acanthus_leaves() {\n    color(\"gold\")\n    union() {\n        // Left shoulder decoration\n        rotate([90, 0, 45])\n        translate([20, 0, 0])\n        scale([0.8, 1.2, 0.3])\n        cylinder(h=15, r=5);\n        \n        // Right shoulder decoration\n        rotate([90, 0, -45])\n        translate([20, 0, 0])\n        scale([0.8, 1.2, 0.3])\n        cylinder(h=15, r=5);\n        \n        // Small scroll details\n        for(i = [-1, 1]) {\n            rotate([0, 0, i * 60])\n            translate([20, 0, 6])\n            rotate([45, 0, 0])\n            cylinder(h=8, r1=1.5, r2=0.5);\n        }\n    }\n}\n\n// Assemble the complete artifact\nunion() {\n    // Ring band and decorations\n    roman_ring();\n    acanthus_leaves();\n    \n    // Prongs and opal\n    prongs();\n    translate([0, 0, 8])\n    rotate([0, 0, 0])\n    opal_gemstone();\n}",
    "renders": true
  },
  {
    "historical_artifact": "jade",
    "openscad_code": "// Jade Bi Disc - Chinese Ritual Object (Neolithic to Han Dynasty)\n// Outer diameter: 80mm, inner diameter: 20mm, thickness: 8mm\n// Features decorative spiral patterns and geometric motifs\n\n// Main parameters\nouter_d = 80;\ninner_d = 20;\nthickness = 8;\nwall_thickness = 4;\n\n// Color for jade\ncolor([0.2, 0.65, 0.4]) difference() {\n    // Main disc shape\n    cylinder(h = thickness, d = outer_d, center = true);\n    \n    // Central hole\n    cylinder(h = thickness + 2, d = inner_d, center = true);\n}\n\n// Raised decorative ring on top\ntranslate([0, 0, thickness/2 + 0.1]) \ncolor([0.15, 0.6, 0.35]) cylinder(h = 1, d1 = outer_d - 10, d2 = outer_d - 8, center = true);\n\n// Four symmetrical rectangular notches (ritual significance)\nfor (i = [0:3]) {\n    rotate([0, 0, i * 90]) \n    translate([outer_d/2 - 8, 0, 0])\n    color([0.15, 0.6, 0.35]) \n    cube([6, 8, thickness], center = true);\n}\n\n// Module for creating spiral patterns\nmodule spiral_pattern(radius, segments, height) {\n    for (i = [0:segments-1]) {\n        angle = i * (360/segments);\n        x = radius * cos(angle);\n        y = radius * sin(angle);\n        \n        translate([x, y, height/2]) \n        rotate([0, 0, angle + 45]) \n        scale([1, 0.5, 1]) \n        cylinder(h = height, d = 3, center = true);\n    }\n}\n\n// Inner ring of spiral patterns\nspiral_pattern(inner_d/2 + 8, 12, thickness);\n\n// Outer ring of spiral patterns\nspiral_pattern(outer_d/2 - 8, 16, thickness);\n\n// Four corner notches with geometric patterns\nmodule corner_notch(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        // Main notch\n        difference() {\n            cube([8, 8, thickness], center = true);\n            translate([2, 2, -1]) \n            cube([4, 4, thickness + 2], center = true);\n        }\n        \n        // Decorative square inside notch\n        color([0.25, 0.7, 0.45]) \n        translate([0, 0, thickness/2 + 0.1]) \n        cube([3, 3, 1], center = true);\n    }\n}\n\n// Add corner notches\ncorner_notch(outer_d/2 - 5, outer_d/2 - 5);\ncorner_notch(-outer_d/2 + 5, outer_d/2 - 5);\ncorner_notch(outer_d/2 - 5, -outer_d/2 + 5);\ncorner_notch(-outer_d/2 + 5, -outer_d/2 + 5);\n\n// Raised central boss with geometric pattern\ntranslate([0, 0, thickness/2 + 0.5]) \ncolor([0.15, 0.55, 0.3]) \ndifference() {\n    cylinder(h = 2, d = inner_d + 8, center = true);\n    \n    // Cross pattern in center\n    rotate([0, 0, 45]) \n    cube([inner_d + 4, 2, 4], center = true);\n    rotate([0, 0, -45]) \n    cube([inner_d + 4, 2, 4], center = true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "onyx",
    "openscad_code": "// Onyx Roman Intaglio Signet Ring - Historical Artifact (1st-3rd Century AD)\n// Medium complexity realistic representation with 3D printing considerations\n\n$fn = 50;\n\n// Main ring body\nmodule ring_body() {\n    color(\"dimgray\") {\n        // Base ring shank\n        difference() {\n            cylinder(h = 8, r1 = 12, r2 = 13);\n            cylinder(h = 10, r = 9.5);\n        }\n        \n        // Tapered shoulders\n        for (i = [0:1]) {\n            rotate([0, 0, i * 180]) {\n                translate([-12, 0, 8]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 8, r1 = 4, r2 = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Onyx gemstone with intaglio carving\nmodule onyx_gem() {\n    color(\"gray20\") {\n        // Bezel setting\n        difference() {\n            cylinder(h = 3, r = 9);\n            cylinder(h = 4, r = 7.5);\n        }\n        \n        // Onyx cabochon\n        translate([0, 0, 3]) {\n            difference() {\n                cylinder(h = 2.5, r = 7.5);\n                // Intaglio carving of Mercury's caduceus\n                translate([0, 0, -0.1]) {\n                    scale([0.8, 0.8, 1]) {\n                        // Staff\n                        cube([1, 12, 0.5], center = true);\n                        \n                        // Serpents\n                        for (angle = [30:120:240]) {\n                            rotate([0, 0, angle]) {\n                                translate([3, 0, 0]) {\n                                    rotate([0, 0, angle/2]) {\n                                        cylinder(h = 0.5, r1 = 1.5, r2 = 0.5);\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // Wings at top\n                        translate([0, 6, 0]) {\n                            rotate([0, 0, 45]) {\n                                cube([6, 2, 0.3], center = true);\n                            }\n                            rotate([0, 0, -45]) {\n                                cube([6, 2, 0.3], center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Decorative Greek key pattern on shoulders\nmodule greek_key_pattern() {\n    color(\"dimgray\") {\n        for (i = [0:5]) {\n            translate([-6 + i * 1, 0, 4]) {\n                rotate([0, 0, i % 2 ? 0 : 90]) {\n                    cube([1, 1, 0.5]);\n                }\n            }\n        }\n    }\n}\n\n// Ring shank interior markings\nmodule interior_markings() {\n    color(\"gray40\") {\n        // Roman numerals for gold purity\n    translate([0, 9.8, 4]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height = 0.3) {\n                text(\"XII\", size = 2, halign = \"center\");\n            }\n        }\n    }\n    \n    // Maker's mark\n    translate([0, -9.8, 4]) {\n        rotate([90, 0, 180]) {\n            linear_extrude(height = 0.3) {\n                text(\"AVG\", size = 1.5, halign = \"center\");\n            }\n        }\n    }\n    }\n}\n\n// Assembly\nunion() {\n    ring_body();\n    \n    // Position onyx gemstone\n    translate([0, 0, 8]) {\n        onyx_gem();\n    }\n    \n    // Add Greek key patterns to both shoulders\n    rotate([0, 0, 90]) {\n        greek_key_pattern();\n    }\n    rotate([0, 0, -90]) {\n        greek_key_pattern();\n    }\n    \n    interior_markings();\n}",
    "renders": true
  },
  {
    "historical_artifact": "coral",
    "openscad_code": "// Ancient Coral Amphora Fragment - Greek, 5th Century BCE\n// Realistic reconstruction of a coral-encrusted amphora fragment\n\ncolor(\"tan\") \ndifference() {\n    // Main amphora body fragment\n    rotate([0, 90, 0])\n    union() {\n        // Base fragment\n        difference() {\n            cylinder(h=20, r1=35, r2=30, center=true, $fn=32);\n            translate([0, -30, 0])\n            cube([60, 60, 25], center=true);\n        }\n        \n        // Neck fragment\n        translate([0, 30, 0])\n        difference() {\n            cylinder(h=25, r1=15, r2=18, center=true, $fn=32);\n            translate([0, 15, 0])\n            cube([30, 30, 30], center=true);\n        }\n        \n        // Handle base\n        translate([0, 15, 0])\n        cylinder(h=15, r=8, center=true, $fn=16);\n    }\n}\n\n// Coral growth on surface\nmodule coral_branch(x, y, z, scale) {\n    translate([x, y, z]) {\n        scale([scale, scale, scale]) {\n            // Main coral structure\n            difference() {\n                sphere(r=5, $fn=16);\n                cube([6, 6, 6], center=true);\n            }\n            \n            // Coral branches\n            for(i = [0:30:120]) {\n                rotate([i, 0, 0])\n                translate([0, 3, 0])\n                cylinder(h=4, r1=2, r2=1, $fn=8);\n            }\n            \n            for(i = [0:60:180]) {\n                rotate([0, i, 0])\n                translate([3, 0, 0])\n                cylinder(h=3, r1=1.5, r2=0.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Distribute coral growth\nfor(i = [1:3:12]) {\n    coral_branch(\n        cos(i*30)*25 + sin(i*15)*5,\n        sin(i*30)*25 - 10,\n        cos(i*20)*5,\n        0.6 + sin(i)*0.3\n    );\n}\n\nfor(i = [1:4:16]) {\n    coral_branch(\n        cos(i*45)*15 + 5,\n        sin(i*45)*15 + 20,\n        sin(i*30)*3,\n        0.4 + cos(i)*0.2\n    );\n}\n\n// Remnants of decorative bands\ncolor(\"burlywood\")\nfor(i = [0:1:3]) {\n    translate([0, -25 + i*15, 0])\n    difference() {\n        rotate([0, 90, 0])\n        cylinder(h=2, r1=32, r2=32, center=true, $fn=64);\n        translate([0, -2, 0])\n        cube([64, 4, 4], center=true);\n    }\n}\n\n// Weathering holes\ncolor(\"tan\")\nfor(i = [1:5:25]) {\n    translate([\n        cos(i*45)*20,\n        sin(i*45)*20 - 5,\n        sin(i*30)*3\n    ])\n    sphere(r=1.5 + sin(i)*0.5, $fn=8);\n}\n\n// Encrustation details\ncolor(\"tan\")\nfor(i = [0:8:64]) {\n    translate([\n        cos(i*22.5)*28,\n        sin(i*22.5)*28 - 10,\n        cos(i*11.25)*2\n    ])\n    sphere(r=0.8, $fn=6);\n}",
    "renders": true
  },
  {
    "historical_artifact": "amber",
    "openscad_code": "// Amber seal with Bronze Age spiral motifs – 65 mm tall\n// Inspired by Mycenaean ritual seals (1400 BCE)\n\n$fn = 60;\n\n// main seal body\nmodule amber_body() {\n    difference() {\n        // organic drop shape\n        scale([1, 0.8, 1.3])\n        sphere(d = 45);\n        // cavity for bronze core\n        translate([0, 0, -20])\n        cylinder(h = 40, d1 = 30, d2 = 20);\n    }\n}\n\n// spiral motif carved on base\nmodule spiral() {\n    for (i = [0:5:360]) {\n        rotate([0, 0, i])\n        translate([i/10, 0, -19.9])\n        cylinder(h = 1, d = 2 + i/20);\n    }\n}\n\n// handle loop\nmodule handle() {\n    translate([0, 0, 25])\n    rotate([90, 0, 0])\n    difference() {\n        torus(15, 4);\n        translate([15, 0, 0])\n        cube([30, 30, 30], center = true);\n    }\n}\n\n// torus primitive\nmodule torus(major, minor) {\n    rotate_extrude()\n    translate([major, 0, 0])\n    circle(r = minor);\n}\n\n// decorative rim\nmodule rim() {\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n        translate([20, 0, 10])\n        sphere(d = 4);\n    }\n}\n\n// assembly\ncolor([1, 0.65, 0.15, 0.9]) {\n    union() {\n        amber_body();\n        handle();\n        rim();\n        \n        // spiral base\n        spiral();\n        \n        // accent grooves\n        for (z = [5, 10, 15]) {\n            translate([0, 0, z])\n            rotate([90, 0, 0])\n            cylinder(h = 1, d = 42 + z/2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "garnet",
    "openscad_code": "// Garnet Intaglio Seal Ring - Roman Imperial Period (1st-3rd Century CE)\n// Based on historical examples found in Roman Britain\n// Overall dimensions: 25mm diameter bezel, 8mm band height, 20mm total height\n\n// Garnet color\ncolor([0.6,0.1,0.15,0.9]) {\n\n// Main garnet cabochon - oval dome shape\ntranslate([0,0,15]) {\n    scale([1,0.8,1]) \n    sphere(d=25, $fn=64);\n}\n\n// Bezel setting - raised gold border around garnet\ndifference() {\n    translate([0,0,12]) \n    cylinder(h=4, d=28, $fn=64);\n    translate([0,0,11.9]) \n    cylinder(h=4.2, d=24, $fn=64);\n}\n\n// Ring shank - split shoulders\nmodule shank_half() {\n    translate([10,0,0])\n    rotate([90,0,0])\n    cylinder(h=15, d1=8, d2=6, $fn=32);\n}\n\n// Left shank\nshank_half();\n\n// Right shank\nmirror([1,0,0]) shank_half();\n\n// Decorative collar under bezel\nfor(i=[0:11]) {\n    rotate([0,0,i*30])\n    translate([14,0,8.5])\n    cube([3,2,1], center=true);\n}\n\n// Intaglio carving - Mars figure facing left\n// Simplified Mars with spear and shield\ntranslate([0,0,12.5]) {\n    scale([0.8,0.8,0.1]) {\n        // Mars helmet crest\n        translate([-2,4,0])\n        cylinder(h=0.5, d=1.5, $fn=16);\n        \n        // Mars head\n        translate([-1,2,0])\n        sphere(d=3, $fn=32);\n        \n        // Spear\n        translate([0,0,0])\n        rotate([0,0,-15])\n        cube([0.5,8,0.5], center=true);\n        \n        // Shield\n        translate([2,-2,0])\n        rotate([0,0,30])\n        cylinder(h=0.5, d=4, $fn=32);\n        \n        // Body\n        translate([-0.5,0,0])\n        cube([2,4,0.5], center=true);\n    }\n}\n\n// Reinforcement bars under bezel\ntranslate([0,0,7.5]) {\n    cube([20,3,1], center=true);\n    cube([3,20,1], center=true);\n}\n\n}",
    "renders": true
  },
  {
    "historical_artifact": "topaz",
    "openscad_code": "// Topaz historical signet ring artifact (Hellenistic period, 3rd-1st century BCE)\n// Based on museum examples from Ptolemaic Egypt\n\n// Main dimensions (mm)\nring_outer = 22;\nring_inner = 18;\nring_height = 8;\nbezel_width = 16;\nbezel_length = 20;\nbezel_height = 6;\ntopaz_stone = 14;\n\n// Create the gold ring shank\nmodule ring_shank() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=ring_height, d=ring_outer, $fn=64);\n        // Inner hole\n        translate([0, 0, -0.1])\n            cylinder(h=ring_height+0.2, d=ring_inner, $fn=64);\n    }\n}\n\n// Create decorative beaded border around bezel\nmodule beaded_border() {\n    for(i = [0:35]) {\n        rotate([0, 0, i*10])\n            translate([(bezel_width+2)/2, 0, ring_height/2])\n                sphere(d=1.2, $fn=12);\n    }\n}\n\n// Create the bezel base (where topaz sits)\nmodule bezel_base() {\n    union() {\n        // Main bezel platform\n        translate([0, -(bezel_length-ring_outer)/2, ring_height/2])\n            cube([bezel_width, bezel_length, bezel_height], center=true);\n        \n        // Decorative borders\n        beaded_border();\n    }\n}\n\n// Create the topaz gemstone (oval cabochon)\nmodule topaz_stone() {\n    color([0.9, 0.7, 0.3])  // Golden topaz color\n    scale([1, 1.2, 0.7])\n        sphere(d=topaz_stone, $fn=32);\n}\n\n// Create intaglio design (scarab beetle - symbol of rebirth)\nmodule scarab_intaglio() {\n    // Carved intaglio design (negative relief)\n    difference() {\n        translate([0, 0, 0.2])\n            cube([topaz_stone-2, topaz_stone-1, 0.5], center=true);\n        \n        // Scarab body\n        translate([0, -1, 0.1])\n            scale([1, 1.5, 0.3])\n                sphere(d=6, $fn=32);\n        \n        // Wing details\n        for(side = [-1, 1]) {\n            translate([side*2.5, 0, 0.1])\n                rotate([0, 0, side*30])\n                    scale([2, 1, 0.2])\n                        cube([2, 1, 0.5], center=true);\n        }\n        \n        // Head detail\n        translate([0, -3, 0.1])\n            sphere(d=2, $fn=16);\n    }\n}\n\n// Create the complete artifact\nmodule topaz_signet_ring() {\n    // Main ring body\n    color([0.85, 0.65, 0.13])  // Gold color\n    union() {\n        ring_shank();\n        bezel_base();\n    }\n    \n    // Topaz gemstone\n    translate([0, 0, ring_height + bezel_height/2 + 0.5])\n        topaz_stone();\n    \n    // Intaglio carved on bottom of topaz\n    translate([0, 0, ring_height + bezel_height/2 - 0.2])\n        scarab_intaglio();\n    \n    // Decorative engraving on ring shoulders\n    for(side = [-1, 1]) {\n        translate([0, side*(ring_outer/2 + 2), ring_height/2])\n            rotate([0, 0, side*90])\n                linear_extrude(height=0.5)\n                    text(\"ΑΘΗΝΑ\", size=2.5, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Render the complete artifact\nrotate([0, -30, 0])  // Tilt for better viewing\n    topaz_signet_ring();",
    "renders": true
  },
  {
    "historical_artifact": "amethyst",
    "openscad_code": "// Amethyst Scarab Seal - Ancient Egyptian Revival (ca 50 mm long)\n// A scarab-shaped seal carved from amethyst with hieroglyphic base\n// Designed for 3D printing without supports\n\ncolor([0.6, 0.4, 0.8, 0.9])  // Translucent amethyst purple\n\nmodule scarab_body() {\n    // Main ellipsoid body\n    scale([1.2, 1, 0.8]) sphere(d=30, $fn=50);\n    \n    // Head protrusion\n    translate([15, 0, 5]) \n        scale([0.8, 0.6, 0.6]) sphere(d=15, $fn=30);\n    \n    // Wing cases - raised elytra lines\n    for (i = [-1, 1]) {\n        translate([0, i*8, 2]) \n            rotate([0, 0, i*20])\n            scale([1.5, 0.3, 0.5]) \n            cube([20, 2, 3], center=true);\n    }\n}\n\nmodule legs() {\n    // Six legs with proper scarab proportions\n    for (side = [-1, 1]) {\n        for (pos = [-8, 0, 8]) {\n            translate([pos, side*12, -4])\n                rotate([90, 0, side*30])\n                cylinder(h=8, d1=3, d2=2, $fn=8);\n        }\n    }\n}\n\nmodule hieroglyphs_base() {\n    // Base with hieroglyphic seal inscription\n    difference() {\n        // Base plate\n        translate([0, 0, -8])\n            cube([25, 18, 4], center=true);\n        \n        // Raised border\n        translate([0, 0, -6])\n            cube([22, 15, 2], center=true);\n        \n        // Hieroglyphic symbols - cartouche with Ra symbol\n        translate([-8, 0, -8.1])\n            cube([4, 12, 0.5], center=true);\n        translate([0, 0, -8.1])\n            rotate([0, 0, 90])\n            cylinder(h=0.5, d=8, $fn=32);\n        translate([8, 0, -8.1])\n            cube([4, 12, 0.5], center=true);\n        \n        // Ankh symbols flanking\n        for (x = [-12, 12]) {\n            translate([x, 0, -8.1])\n                union() {\n                    cube([2, 8, 0.5], center=true);\n                    translate([0, 4, 0]) cube([6, 2, 0.5], center=true);\n                    translate([0, -4, 0]) sphere(d=3, $fn=16);\n                }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    scarab_body();\n    legs();\n    hieroglyphs_base();\n}\n\n// Print orientation helper (comment out for final print)\n%translate([0, 0, -12]) cube([30, 20, 1], center=true);",
    "renders": true
  },
  {
    "historical_artifact": "ruby",
    "openscad_code": "// Historical Ruby Seal Ring - Medieval European Signet Style\n// Based on 14th century papal and noble seal rings\n\n// Overall dimensions\nring_diameter = 22;  // US size 12\nband_width = 6;\nband_thickness = 2;\nstone_height = 12;\nstone_width = 18;\n\n// Colors\n$fn = 50;\n\n// Main ring band\nmodule ring_band() {\n    color(\"silver\") \n    difference() {\n        // Outer band\n        cylinder(h=band_thickness, d=ring_diameter+band_width, center=true);\n        \n        // Inner hole (finger hole)\n        cylinder(h=band_thickness+1, d=ring_diameter, center=true);\n        \n        // Cut for stone setting\n        translate([0, (ring_diameter+band_width)/4, 0])\n            cube([(ring_diameter+band_width)/2, band_width/2, band_thickness+1], center=true);\n    }\n}\n\n// Stone setting bezel\nmodule bezel() {\n    color(\"gold\")\n    difference() {\n        // Main bezel\n        cylinder(h=4, d=stone_width+4, center=true);\n        \n        // Inner hole for stone\n        cylinder(h=5, d=stone_width, center=true);\n    }\n}\n\n// Ruby stone with historical engraving\nmodule ruby_stone() {\n    color(\"red\") {\n        // Main stone - cushion cut\n        union() {\n            // Base\n            cylinder(h=stone_height/2, d=stone_width, center=false);\n            \n            // Top facets\n            translate([0, 0, stone_height/2])\n                cylinder(h=stone_height/2, d=stone_width*0.8, center=false);\n            \n            // Very top\n            translate([0, 0, stone_height])\n                cylinder(h=stone_height/4, d=stone_width*0.4, center=false);\n        }\n        \n        // Historical cross engraving (typical of medieval seals)\n        color(\"darkred\")\n        translate([0, 0, stone_height-0.5])\n        linear_extrude(height=0.5) {\n            // Cross arms\n            union() {\n                square([stone_width*0.8, stone_width*0.15], center=true);\n                square([stone_width*0.15, stone_width*0.8], center=true);\n            }\n        }\n        \n        // Latin inscription around edge\n        translate([0, 0, stone_height-1])\n        rotate([90, 0, 0])\n        color(\"darkred\")\n        linear_extrude(height=0.5) {\n            // \"SIGILLUM\" in simplified medieval style\n            text(\"SIGILLUM\", size=2, halign=\"center\");\n        }\n    }\n}\n\n// Decorative elements on band\nmodule decorative_bands() {\n    color(\"gold\")\n    for(i = [0:1]) {\n        rotate([0, 0, i*180])\n        translate([0, 0, -band_thickness/2+1])\n        difference() {\n            // Decorative ridges\n            cylinder(h=0.5, d=ring_diameter+band_width+2, center=true);\n            cylinder(h=0.6, d=ring_diameter+band_width+1, center=true);\n        }\n    }\n    \n    // Side decorations - typical medieval dot patterns\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([(ring_diameter+band_width)/2-2, 0, 0])\n        sphere(d=0.8);\n    }\n}\n\n// Complete ring assembly\nmodule ruby_seal_ring() {\n    // Ring band\n    ring_band();\n    \n    // Bezel setting\n    translate([0, (ring_diameter+band_width)/4, 0])\n    rotate([90, 0, 0])\n    bezel();\n    \n    // Ruby stone in setting\n    translate([0, (ring_diameter+band_width)/4, stone_height/2+2])\n    rotate([90, 0, 0])\n    ruby_stone();\n    \n    // Decorative elements\n    decorative_bands();\n}\n\n// Render the complete ring\nruby_seal_ring();",
    "renders": true
  },
  {
    "historical_artifact": "sapphire",
    "openscad_code": "// Sapphire Seal of King Solomon – historical signet (c. 900 BCE)\n// 65 mm tall, 3D-printable, faceted sapphire with engraved Seal of Solomon\n// Medium complexity, realistic style\n\n// overall size\n$fa = 2; $fs = 0.5;\n\nmodule base_handle() {\n    // flared grip for rolling the seal\n    color(\"darkslateblue\")\n    difference() {\n        cylinder(h = 12, d1 = 28, d2 = 22, center = true);\n        translate([0, 0, 7]) cylinder(h = 14, d = 18, center = true);\n    }\n}\n\nmodule hexagonal_gem() {\n    // upper sapphire body – 12-sided prism\n    color(\"royalblue\") {\n        linear_extrude(height = 30, center = true, convexity = 10)\n        circle($fn = 6, d = 40);\n    }\n}\n\nmodule star_of_david_pattern() {\n    // engraved star pattern on the base\n    color(\"midnightblue\")\n    linear_extrude(height = -1.5, center = false, convexity = 10) {\n        difference() {\n            circle(d = 38);\n            union() {\n                // upward triangle\n                polygon([[0, 19], [-16.5, -9.5], [16.5, -9.5]]);\n                // downward triangle\n                polygon([[0, -19], [16.5, 9.5], [-16.5, 9.5]]);\n            }\n        }\n    }\n}\n\nmodule inscription_band() {\n    // hebrew inscription band around middle\n    // simplified as raised dots for printability\n    color(\"deepskyblue\")\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([19, 0, 0])\n                cylinder(h = 1.5, d = 3, center = true);\n    }\n}\n\nmodule sapphire_seal() {\n    union() {\n        // handle\n        translate([0, 0, -21]) base_handle();\n        \n        // main gem body\n        hexagonal_gem();\n        \n        // inscription band\n        inscription_band();\n        \n        // engraved base\n        translate([0, 0, 16])\n            star_of_david_pattern();\n    }\n}\n\n// render the artifact\nsapphire_seal();",
    "renders": true
  },
  {
    "historical_artifact": "emerald",
    "openscad_code": "// Emerald Scarab Amulet - Ancient Egyptian Revival\n// Based on Middle Kingdom scarab amulets (c. 2055-1650 BCE)\n\n$fn = 50;\n\n// Main dimensions\nscarab_length = 45;\nscarab_width = 30;\nscarab_height = 15;\nbase_thickness = 3;\nloop_diameter = 4;\n\n// Color for emerald\ncolor([0.1, 0.8, 0.4, 0.8]) {\n\n// Base scarab body\ndifference() {\n    union() {\n        // Main oval body\n        scale([1.2, 1, 0.8])\n            sphere(d=scarab_width, $fn=50);\n        \n        // Head protrusion\n        translate([scarab_length/2 - 5, 0, 0])\n            sphere(d=scarab_width/2, $fn=30);\n    }\n    \n    // Hollow bottom for 3D printing\n    translate([0, 0, -scarab_height/2])\n        cube([scarab_length, scarab_width, scarab_height], center=true);\n}\n\n// Wing cases detail\nfor(i = [-1, 1]) {\n    translate([scarab_length/4, i*scarab_width/4, scarab_height/3])\n        rotate([0, 0, i*15])\n            scale([1.2, 0.3, 0.3])\n                sphere(d=scarab_width/2);\n}\n\n// Head details\ntranslate([scarab_length/2 - 3, 0, scarab_height/3])\n    sphere(d=6);\n\n// Eyes\nfor(i = [-1, 1]) {\n    translate([scarab_length/2 - 2, i*5, scarab_height/2])\n        sphere(d=3);\n}\n\n// Leg pairs (6 legs total)\nmodule leg() {\n    rotate([45, 0, 0])\n        cylinder(h=8, d1=3, d2=1.5);\n}\n\nfor(i = [0:2]) {\n    angle = i*120;\n    translate([scarab_length/4, 0, 0])\n        rotate([0, 0, angle])\n            translate([scarab_width/2 - 2, 0, 0])\n                leg();\n}\n\n// Decorative hieroglyphic cartouche on back\ntranslate([-scarab_length/4, 0, scarab_height/2 + 0.5])\n    cube([15, 8, 1], center=true);\n\n// Suspension loop for necklace\ntranslate([-scarab_length/2, 0, 0])\n    rotate([90, 0, 0])\n        cylinder(h=loop_diameter*2, d=loop_diameter);\n        \n// Surface detailing - carved lines\nfor(i = [-2:2]) {\n    if(i != 0) {\n        translate([i*5, 0, scarab_height/2])\n            cube([0.5, scarab_width/2, 0.5], center=true);\n    }\n}\n\n// Wing markings\ncolor([0.05, 0.4, 0.2, 0.6]) {\n    for(i = [0:3]) {\n        translate([-5 + i*8, 0, scarab_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=0.3, r=2);\n    }\n}\n\n}",
    "renders": true
  },
  {
    "historical_artifact": "diamond",
    "openscad_code": "// Historical Diamond Artifact - 16th Century Mughal Empire\n// Inspired by the Koh-i-Noor diamond in its original cut form\n\n// Colors for rendering\ncolor_diamond = [0.9, 0.95, 1.0, 0.6];  // Slightly blue-tinted diamond\ncolor_gold = [0.85, 0.65, 0.15, 1.0];    // Gold setting\ncolor_enamel = [0.2, 0.3, 0.6, 1.0];     // Deep blue enamel\n\n// Base dimensions\ndiamond_height = 40;\ndiamond_width = 35;\nsetting_thickness = 3;\n\n// Main diamond crystal structure\nmodule diamond_crystal() {\n    color(color_diamond) {\n        // Upper pyramid (crown)\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, 0, diamond_height/2]) {\n                    polyhedron(\n                        points = [\n                            [0, 0, diamond_height/2],\n                            [diamond_width/2, 0, 0],\n                            [0, diamond_width/2, 0],\n                            [-diamond_width/2, 0, 0],\n                            [0, -diamond_width/2, 0]\n                        ],\n                        faces = [\n                            [0, 1, 2],\n                            [0, 2, 3],\n                            [0, 3, 4],\n                            [0, 4, 1],\n                            [1, 2, 3, 4]\n                        ]\n                    );\n                }\n            }\n        }\n        \n        // Lower pyramid (pavilion)\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, 0, -diamond_height/2]) {\n                    polyhedron(\n                        points = [\n                            [0, 0, -diamond_height/2],\n                            [diamond_width/2, 0, 0],\n                            [0, diamond_width/2, 0],\n                            [-diamond_width/2, 0, 0],\n                            [0, -diamond_width/2, 0]\n                        ],\n                        faces = [\n                            [0, 2, 1],\n                            [0, 3, 2],\n                            [0, 4, 3],\n                            [0, 1, 4],\n                            [1, 2, 3, 4]\n                        ]\n                    );\n                }\n            }\n        }\n    }\n}\n\n// Decorative gold setting with Mughal patterns\nmodule gold_setting() {\n    color(color_gold) {\n        // Upper setting band\n        translate([0, 0, diamond_height/2 + 2]) {\n            difference() {\n                cylinder(h = setting_thickness, r = diamond_width/2 + 4, $fn = 32);\n                cylinder(h = setting_thickness + 1, r = diamond_width/2 + 1, $fn = 32);\n            }\n        }\n        \n        // Lower setting band\n        translate([0, 0, -diamond_height/2 - 2]) {\n            difference() {\n                cylinder(h = setting_thickness, r = diamond_width/2 + 4, $fn = 32);\n                cylinder(h = setting_thickness + 1, r = diamond_width/2 + 1, $fn = 32);\n            }\n        }\n        \n        // Prongs to hold diamond\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90 + 45]) {\n                translate([diamond_width/2 + 1, 0, 0]) {\n                    cube([3, 3, diamond_height + 4], center = true);\n                }\n            }\n        }\n        \n        // Decorative Mughal arches\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([diamond_width/2 + 6, 0, diamond_height/4]) {\n                    scale([1, 0.5, 1]) {\n                        cylinder(h = 2, r = 4, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Enamel inscription band with Persian calligraphy pattern\nmodule inscription_band() {\n    color(color_enamel) {\n        translate([0, 0, diamond_height/2 + 5]) {\n            difference() {\n                cylinder(h = 2, r = diamond_width/2 + 6, $fn = 64);\n                cylinder(h = 3, r = diamond_width/2 + 5, $fn = 64);\n            }\n            \n            // Decorative dots pattern inspired by Persian miniatures\n            for (i = [0:15]) {\n                rotate([0, 0, i * 22.5]) {\n                    translate([diamond_width/2 + 5.5, 0, 1]) {\n                        sphere(d = 1, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Historical wear and chips (realistic aging)\nmodule historical_wear() {\n    color(color_diamond) {\n        // Small chips on edges\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                translate([diamond_width/2 - 2, 0, diamond_height/4]) {\n                    sphere(d = 2, $fn = 8);\n                }\n                translate([diamond_width/3, 0, -diamond_height/4]) {\n                    sphere(d = 1.5, $fn = 8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly of the complete artifact\nunion() {\n    diamond_crystal();\n    gold_setting();\n    inscription_band();\n    historical_wear();\n}",
    "renders": true
  },
  {
    "historical_artifact": "turquoise",
    "openscad_code": "// Turquoise Aztec Mask (medium complexity, realistic style)\n// Based on the Mixtec turquoise mosaic masks from Monte Albán, Oaxaca (14th-15th century)\n\ncolor([0.2, 0.8, 0.8])  // Turquoise color\n\n// Main mask face\nmodule mask_face() {\n    difference() {\n        // Basic face shape - oval with flat back\n        union() {\n            // Main oval form\n            scale([1.2, 1.4, 1]) \n                sphere(d=60, $fn=50);\n            // Flatten back\n            translate([0, 0, -29])\n                cube([60, 84, 2], center=true);\n        }\n        \n        // Eye holes\n        translate([-15, 10, 10])\n            rotate([0, 20, 0])\n            cylinder(h=30, d1=12, d2=10, center=true, $fn=20);\n        translate([15, 10, 10])\n            rotate([0, -20, 0])\n            cylinder(h=30, d1=12, d2=10, center=true, $fn=20);\n            \n        // Mouth opening\n        translate([0, -20, 5])\n            rotate([0, 10, 0])\n            scale([1.5, 1, 1])\n            cylinder(h=25, d=15, center=true, $fn=20);\n            \n        // Nostrils\n        translate([-5, -5, 0])\n            sphere(d=4, $fn=10);\n        translate([5, -5, 0])\n            sphere(d=4, $fn=10);\n    }\n}\n\n// Turquoise mosaic tiles pattern\nmodule mosaic_tiles() {\n    // Forehead tiles\n    for(y = [25:6:40]) {\n        for(x = [-25:6:25]) {\n            if(abs(x) + abs(y-32) < 30) {\n                translate([x, y, 29.5])\n                    rotate([90, 0, 0])\n                    cylinder(h=0.5, d=5, $fn=6);\n            }\n        }\n    }\n    \n    // Cheek tiles\n    for(angle = [0:30:150]) {\n        translate([30*cos(angle), 10+15*sin(angle), 29.5])\n            rotate([90, 0, angle])\n            cylinder(h=0.5, d=5, $fn=6);\n    }\n}\n\n// Decorative serpent border\nmodule serpent_border() {\n    // Top border\n    for(i = [-30:5:30]) {\n        translate([i, 42, 28])\n            rotate([0, 90, 0])\n            cylinder(h=3, d1=4, d2=2, center=true, $fn=8);\n    }\n    \n    // Side borders\n    for(j = [30:5:42]) {\n        translate([-36, j-21, 28])\n            rotate([90, 0, 0])\n            cylinder(h=3, d1=4, d2=2, center=true, $fn=8);\n        translate([36, j-21, 28])\n            rotate([90, 0, 0])\n            cylinder(h=3, d1=4, d2=2, center=true, $fn=8);\n    }\n}\n\n// Nose ornament\nmodule nose_ornament() {\n    union() {\n        // Central bar\n        translate([0, -3, 5])\n            cube([3, 6, 8], center=true);\n            \n        // Side spirals\n        for(side = [-1, 1]) {\n            translate([side * 8, -3, 5])\n                rotate([0, 0, side * 45])\n                scale([1, 0.5, 1])\n                cylinder(h=12, d1=8, d2=6, center=true, $fn=20);\n        }\n    }\n}\n\n// Back mounting holes for display\nmodule mounting_holes() {\n    translate([-20, 0, -25])\n        cylinder(h=10, d=6, center=true, $fn=20);\n    translate([20, 0, -25])\n        cylinder(h=10, d=6, center=true, $fn=20);\n    translate([0, -15, -25])\n        cylinder(h=10, d=6, center=true, $fn=20);\n}\n\n// Assemble the mask\nunion() {\n    // Main face\n    mask_face();\n    \n    // Mosaic details\n    color([0.15, 0.75, 0.75])\n        mosaic_tiles();\n    \n    // Gold decorative elements\n    color([0.8, 0.7, 0.2]) {\n        serpent_border();\n        nose_ornament();\n    }\n    \n    // Cut mounting holes in back\n    color([0.2, 0.8, 0.8])\n        difference() {\n            cube([0.1, 0.1, 0.1]);  // Dummy for difference\n            mounting_holes();\n        }\n}",
    "renders": true
  },
  {
    "historical_artifact": "lapis",
    "openscad_code": "// Lapis Lazuli Egyptian Scarab Amulet\n// Based on New Kingdom period scarab amulets (1550-1070 BCE)\n\n$fn = 32;\n\n// Main color - deep blue lapis lazuli\ncolor([0.1, 0.2, 0.8]) \ndifference() {\n    union() {\n        // Main scarab body - oval shape\n        scale([1.2, 1, 0.7]) \n        sphere(d = 30);\n        \n        // Head section\n        translate([12, 0, 5])\n        sphere(d = 12);\n        \n        // Wing cases - two elongated domes\n        for(i = [-1, 1]) {\n            translate([5, i * 8, 0])\n            scale([1.5, 0.4, 0.5])\n            sphere(d = 20);\n        }\n    }\n    \n    // Carve out underside cavity\n    translate([0, 0, -8])\n    scale([1.1, 0.9, 0.5])\n    sphere(d = 28);\n}\n\n// Six legs - three per side\ncolor([0.05, 0.15, 0.7])\nfor(side = [-1, 1]) {\n    for(pos = [0, 6, 12]) {\n        translate([pos, side * 12, -5])\n        rotate([0, side * 20, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h = 10, d = 3);\n    }\n}\n\n// Hieroglyphic inscription on base\ncolor([0.9, 0.8, 0.2])  // Gold inlay\nmodule hieroglyph(char, x, y) {\n    translate([x, y, -9.5])\n    scale([0.5, 0.5, 0.5])\n    cube([3, 3, 1]);\n}\n\n// Spell for protection - simplified cartouche symbols\nhieroglyph(\"ankh\", -5, 0);\nhieroglyph(\"djed\", 0, 0);\nhieroglyph(\"was\", 5, 0);\n\n// Decorative wing pattern lines\ncolor([0.15, 0.25, 0.85])\nfor(angle = [30:30:150]) {\n    rotate([0, 0, angle])\n    translate([10, 0, 3])\n    scale([0.1, 8, 0.1])\n    cube([1, 1, 1]);\n}\n\n// Drilled attachment hole (for necklace)\ncolor([0.08, 0.18, 0.75])\nrotate([90, 0, 0])\ntranslate([0, 0, -15])\ncylinder(h = 30, d = 3);\n\n// Small gold details on head\ncolor([0.9, 0.8, 0.2])\ntranslate([14, 0, 7])\nsphere(d = 2);\ntranslate([14, -2, 7])\nsphere(d = 1.5);\ntranslate([14, 2, 7])\nsphere(d = 1.5);",
    "renders": true
  },
  {
    "historical_artifact": "quartz",
    "openscad_code": "// Ancient Sumerian Quartz Cylinder Seal (c. 2500 BCE)\n// Mesopotamian administrative seal with cuneiform inscription and deity procession\n\n$fn=64;\n\n// Overall dimensions: 40mm height, 20mm diameter cylinder\nmodule cylinder_seal() {\n    color(\"cornsilk\") difference() {\n        // Main cylinder body\n        cylinder(h=40, r=10, center=true);\n        \n        // Central boring hole (2mm diameter for string)\n        rotate([90,0,0]) cylinder(h=25, r=1.2, center=true);\n        \n        // Registration notches for alignment\n        translate([0,0,19]) cube([2,2,2], center=true);\n        translate([0,0,-19]) cube([2,2,2], center=true);\n    }\n}\n\n// Cuneiform inscription band\nmodule cuneiform_inscription() {\n    for(i=[-15:5:15]) {\n        translate([0,0,i]) rotate([0,0,randi(0,360)]) {\n            // Wedge impressions\n            color(\"wheat\") difference() {\n                translate([9.5,0,0]) cube([1,0.5,1.5], center=true);\n                translate([9.5,-0.5,0]) rotate([0,0,45]) cube([0.3,2,1.5], center=true);\n            }\n        }\n    }\n}\n\n// Deity procession relief (Anu leading gods)\nmodule deity_procession() {\n    // Anu figure with horned crown\n    color(\"antiquewhite\") union() {\n        translate([7,0,-10]) rotate([90,0,0]) cylinder(h=6, r1=2, r2=1);\n        translate([7,0,-10]) rotate([90,0,0]) cylinder(h=3, r=0.5);\n        // Horned crown\n        for(a=[-30:30:30]) {\n            rotate([0,0,a]) translate([7,2,-10]) rotate([90,0,0]) cylinder(h=1.5, r=0.3);\n        }\n    }\n    \n    // Attendant god figure\n    color(\"antiquewhite\") translate([7,0,0]) rotate([90,0,0]) cylinder(h=5, r1=1.5, r2=0.8);\n    translate([7,0,0]) rotate([90,0,0]) cube([1,1,2], center=true);\n    \n    // Sacred bull symbol\n    color(\"antiquewhite\") translate([7,0,10]) rotate([90,0,0]) cylinder(h=4, r1=2, r2=1.5);\n    // Bull horns\n    rotate([0,0,-20]) translate([7,1.5,10]) rotate([90,0,0]) cylinder(h=2, r=0.2);\n    rotate([0,0,20]) translate([7,-1.5,10]) rotate([90,0,0]) cylinder(h=2, r=0.2);\n}\n\n// Decorative border pattern - guilloche (twisted rope design)\nmodule border_pattern() {\n    for(t=[0:15:360]) {\n        rotate([0,0,t]) {\n            color(\"navajowhite\") translate([9*cos(t*2), 9*sin(t*2), 18]) \n                sphere(r=0.5);\n            color(\"navajowhite\") translate([9*cos(t*2), 9*sin(t*2), -18]) \n                sphere(r=0.5);\n        }\n    }\n}\n\n// Base pedestal for display\nmodule display_base() {\n    color(\"tan\") difference() {\n        cylinder(h=5, r1=15, r2=12);\n        translate([0,0,2]) cylinder(h=5, r1=12, r2=9);\n    }\n}\n\n// Main assembly\nunion() {\n    // Position seal on base\n    translate([0,0,7.5]) cylinder_seal();\n    \n    // Add relief decorations\n    deity_procession();\n    cuneiform_inscription();\n    border_pattern();\n    \n    // Display base\n    translate([0,0,-7.5]) display_base();\n}",
    "renders": true
  },
  {
    "historical_artifact": "agate",
    "openscad_code": "// Agate Historical Artifact - Neo-Babylonian Agate Cylinder Seal (c. 600 BCE)\n// Features traditional contest scene with hero, lions, and cuneiform inscription\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n$fn = 50;\n\n// Main dimensions\nseal_diameter = 25;\nseal_length = 40;\nbore_diameter = 8;\nbore_length = 38;\n\n// Decorative band parameters\nband_width = 4;\nband_offset = 5;\n\n// Create the agate cylinder seal\nmodule agate_seal() {\n    // Base cylinder body with slight taper for authenticity\n    color(\"burlywood\") \n    difference() {\n        // Main cylinder with gentle taper\n        cylinder(h = seal_length, d1 = seal_diameter, d2 = seal_diameter * 0.9, center = true);\n        \n        // Central bore for stringing\n        translate([0, 0, -1])\n            cylinder(h = bore_length + 2, d = bore_diameter, center = true);\n    }\n    \n    // End caps with decorative ridges\n    translate([0, 0, seal_length/2 - 1])\n        color(\"peru\") \n        cylinder(h = 2, d = seal_diameter + 2, center = false);\n    \n    translate([0, 0, -seal_length/2 + 1])\n        color(\"peru\") \n        cylinder(h = 2, d = seal_diameter + 2, center = false);\n    \n    // Decorative bands around ends\n    for (z = [-seal_length/2 + band_offset, seal_length/2 - band_offset - band_width]) {\n        translate([0, 0, z])\n            color(\"saddlebrown\") \n            cylinder(h = band_width, d = seal_diameter + 0.5, center = false);\n    }\n}\n\n// Hero figure with raised relief\nmodule hero_figure() {\n    // Hero body (profile view)\n    translate([0, seal_diameter/2 - 1, 0])\n        rotate([90, 0, 0])\n            color(\"darkgoldenrod\") \n            cylinder(h = 8, d = 3, center = true);\n    \n    // Hero head\n    translate([0, seal_diameter/2 - 1, 2])\n        sphere(d = 2.5);\n    \n    // Hero arms (raised in combat pose)\n    translate([1.5, seal_diameter/2 - 1, 1])\n        rotate([0, 45, 0])\n            cube([1, 1, 3], center = true);\n    \n    translate([-1.5, seal_diameter/2 - 1, 1])\n        rotate([0, -45, 0])\n            cube([1, 1, 3], center = true);\n}\n\n// Lion figure facing hero\nmodule lion_figure() {\n    // Lion body\n    translate([8, seal_diameter/2 - 1, 0])\n        rotate([90, 0, 180])\n            color(\"darkgoldenrod\") \n            cylinder(h = 6, d = 2.5, center = true);\n    \n    // Lion head with mane\n    translate([10, seal_diameter/2 - 1, 0])\n        sphere(d = 3);\n    \n    // Lion legs\n    for (x = [7.5, 8.5]) {\n        translate([x, seal_diameter/2 - 1, -2])\n            cube([0.5, 0.5, 2], center = true);\n    }\n}\n\n// Cuneiform inscription band\nmodule cuneiform_inscription() {\n    // Simplified cuneiform wedges arranged in a band\n    for (i = [0:5:35]) {\n        angle = i * 10;\n        for (j = [0:2:6]) {\n            rotate([0, 0, angle])\n                translate([seal_diameter/2 - 0.5, 0, -seal_length/2 + 5 + j])\n                    color(\"saddlebrown\") \n                    cube([1, 0.5, 0.5], center = true);\n        }\n    }\n}\n\n// Background decorative pattern\nmodule background_pattern() {\n    // Dot pattern typical of Mesopotamian seals\n    for (angle = [0:30:360]) {\n        rotate([0, 0, angle])\n            for (z = [-seal_length/2 + 8:2:seal_length/2 - 8]) {\n                translate([seal_diameter/2 - 1.5, 0, z])\n                    sphere(d = 0.8);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base seal\n    agate_seal();\n    \n    // Decorative elements arranged around cylinder\n    for (rotation = [0, 120, 240]) {\n        rotate([0, 0, rotation]) {\n            hero_figure();\n            lion_figure();\n            background_pattern();\n        }\n    }\n    \n    // Central cuneiform inscription\n    cuneiform_inscription();\n}\n\n// Optional display stand\ntranslate([0, 0, -seal_length/2 - 5])\n    color(\"gray\") \n    cube([30, 10, 2], center = true);",
    "renders": true
  },
  {
    "historical_artifact": "beryl",
    "openscad_code": "// Beryl intaglio ring - Roman Empire, 1st-2nd century CE\n// Carved beryl gemstone set in gold ring with decorative shoulders\n\n$fn = 64;\n\n// Overall scale\nscale_factor = 1.2;\n\n// Main beryl gemstone (hexagonal emerald shape)\nmodule beryl_stone() {\n    color([0.2, 0.8, 0.4], 0.8)  // Translucent green beryl\n    difference() {\n        // Hexagonal prism for the gemstone\n        cylinder(h = 8 * scale_factor, r1 = 12 * scale_factor, r2 = 10 * scale_factor);\n        \n        // Top facet - table cut\n        translate([0, 0, 7.5 * scale_factor])\n            cylinder(h = 2 * scale_factor, r1 = 8 * scale_factor, r2 = 10 * scale_factor);\n        \n        // Pavilion facets\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([6 * scale_factor, 0, 0])\n                    rotate([0, 30, 0])\n                        cube([12 * scale_factor, 0.5, 8 * scale_factor], center = true);\n        }\n        \n        // Intaglio carving - image of Victory (Nike) engraved on base\n        translate([0, 0, -0.5 * scale_factor])\n            scale([0.8, 0.8, 1])\n                cylinder(h = 1 * scale_factor, r = 8 * scale_factor);\n                \n        // Wing details in intaglio\n        for(wing = [45, -45]) {\n            rotate([0, 0, wing])\n                translate([4 * scale_factor, 0, -0.3 * scale_factor])\n                    scale([1, 0.3, 0.5])\n                        sphere(3 * scale_factor);\n        }\n    }\n}\n\n// Gold ring shank\nmodule ring_shank() {\n    color(\"gold\") {\n        // Main ring band\n        rotate_extrude(angle = 360, $fn = 100)\n            translate([20 * scale_factor, 0, 0])\n                circle(r = 3 * scale_factor);\n        \n        // Decorative shoulders with scrollwork\n        for(side = [-1, 1]) {\n            translate([side * 15 * scale_factor, 0, 0]) {\n                // Scroll volutes\n                rotate([90, 0, 90])\n                    linear_extrude(height = 4 * scale_factor, twist = 180)\n                        difference() {\n                            circle(r = 5 * scale_factor);\n                            circle(r = 3 * scale_factor);\n                        }\n                \n                // Granulation pattern\n                for(i = [0:4]) {\n                    translate([side * i * 1.2 * scale_factor, 0, 0])\n                        sphere(0.5 * scale_factor);\n                }\n            }\n        }\n    }\n}\n\n// Bezel setting for the beryl\nmodule bezel_setting() {\n    color(\"gold\") {\n        difference() {\n            // Main bezel cup\n            cylinder(h = 5 * scale_factor, r = 13 * scale_factor);\n            \n            // Hollow for stone\n            cylinder(h = 6 * scale_factor, r = 11 * scale_factor);\n        }\n        \n        // Prongs\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([11.5 * scale_factor, 0, 2 * scale_factor])\n                    cylinder(h = 4 * scale_factor, r = 1 * scale_factor);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Ring shank\n    ring_shank();\n    \n    // Bezel setting\n    translate([0, 0, 15 * scale_factor])\n        rotate([90, 0, 0])\n            bezel_setting();\n    \n    // Beryl gemstone in setting\n    translate([0, 0, 18 * scale_factor])\n        rotate([90, 0, 0])\n            beryl_stone();\n}",
    "renders": true
  },
  {
    "historical_artifact": "citrine",
    "openscad_code": "// Citrine Roman Intaglio Seal Ring - Historical Artifact\n// Based on 1st-2nd century AD Roman signet rings\n// Size: 20mm diameter stone, 60mm total length\n\n$fn = 64;\n\n// Main colors\nstone_color = \"#D4AF37\";  // Natural citrine yellow\nmetal_color = \"#B87333\";  // Bronze\ndetail_color = \"#8B4513\"; // Darker bronze patina\n\n// Ring band module\nmodule ring_band(outer_r=12, inner_r=10, height=8) {\n    difference() {\n        cylinder(h=height, r=outer_r);\n        translate([0, 0, -0.1]) cylinder(h=height+0.2, r=inner_r);\n    }\n}\n\n// Decorative bead pattern around band\nmodule decorative_beads(radius=11.5, height=8, count=12) {\n    for(i=[0:count-1]) {\n        rotate([0, 0, i*360/count]) \n        translate([radius, 0, height/2])\n        scale([1, 0.6, 0.6])\n        sphere(r=1.2);\n    }\n}\n\n// Citrine stone (oval cabochon cut)\nmodule citrine_stone() {\n    // Main stone body\n    scale([1.2, 1, 0.8])\n    sphere(r=10);\n    \n    // Flattened base\n    translate([0, 0, -7.9])\n    scale([1.2, 1, 0.1])\n    sphere(r=10);\n}\n\n// Intaglio carving on bottom (eagle motif - common Roman symbol)\nmodule intaglio_carving() {\n    // Eagle body\n    translate([0, -2, -7.8])\n    scale([1.5, 1, 0.2])\n    sphere(r=3);\n    \n    // Wings\n    for(side=[-1, 1]) {\n        translate([side*3, 1, -7.8])\n        rotate([0, 0, side*-30])\n        scale([2, 0.5, 0.2])\n        sphere(r=2);\n    }\n    \n    // Head\n    translate([0, -4.5, -7.8])\n    sphere(r=1.5);\n}\n\n// Ring shoulders with decorative elements\nmodule ring_shoulders() {\n    // Left shoulder\n    translate([-12, 0, 4])\n    rotate([0, 90, -20])\n    cylinder(h=8, r1=4, r2=2);\n    \n    // Right shoulder\n    translate([12, 0, 4])\n    rotate([0, 90, 20])\n    cylinder(h=8, r1=4, r2=2);\n    \n    // Decorative scrolls\n    for(side=[-1, 1]) {\n        translate([side*15, 0, 6])\n        rotate([0, 0, side*90])\n        scale([1, 0.5, 1])\n        cylinder(h=3, r=2);\n        \n        translate([side*16, 0, 6])\n        sphere(r=1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Ring band\n    color(metal_color) {\n        ring_band();\n        decorative_beads();\n    }\n    \n    // Ring shoulders\n    color(metal_color) ring_shoulders();\n    \n    // Stone setting\n    color(metal_color) {\n        // Bezel setting\n        translate([0, 0, 8])\n        cylinder(h=3, r=12);\n        \n        // Prongs\n        for(angle=[0, 90, 180, 270]) {\n            rotate([0, 0, angle])\n            translate([10, 0, 8])\n            cylinder(h=5, r=1.5);\n        }\n    }\n    \n    // Citrine stone\n    color(stone_color) {\n        translate([0, 0, 11])\n        citrine_stone();\n    }\n    \n    // Intaglio carving (subtracted from stone)\n    color(detail_color) intaglio_carving();\n}\n\n// Scale for 3D printing\nscale(0.7) {}",
    "renders": true
  },
  {
    "historical_artifact": "peridot",
    "openscad_code": "// Peridot historical artifact - Ancient Egyptian scarab amulet with peridot inlay\n// Based on New Kingdom period scarab seals (circa 1550-1070 BCE)\n\n// Overall dimensions for 3D printing\nscarab_length = 60;\nscarab_width = 40;\nscarab_height = 25;\n\n// Colors\nperidot_color = [0.5, 0.7, 0.2];\ngold_color = [0.8, 0.7, 0.2];\nbronze_color = [0.5, 0.3, 0.1];\n\nmodule scarab_body() {\n    // Main oval body\n    difference() {\n        scale([1, 0.7, 0.5])\n            sphere(d=scarab_length);\n        \n        // Flatten bottom\n        translate([0, 0, -scarab_height/2])\n            cube([scarab_length*2, scarab_width*2, scarab_height], center=true);\n    }\n}\n\nmodule peridot_inlay() {\n    // Peridot oval cabochon set in center\n    color(peridot_color) {\n        translate([0, 0, scarab_height/2 + 1])\n            scale([1, 0.8, 0.3])\n                sphere(d=scarab_width * 0.6);\n    }\n    \n    // Gold bezel setting\n    color(gold_color) {\n        translate([0, 0, scarab_height/2 + 0.5])\n            cylinder(h=2, d1=scarab_width*0.65, d2=scarab_width*0.7);\n    }\n}\n\nmodule head_details() {\n    // Head section\n    translate([scarab_length/2 - 5, 0, 0])\n        scale([0.3, 0.4, 0.3])\n            sphere(d=scarab_width/2);\n    \n    // Antennae loops\n    for(i = [-1, 1]) {\n        translate([scarab_length/2 - 8, i * scarab_width/4, scarab_height/4])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=2);\n    }\n}\n\nmodule wing_cases() {\n    // Elytra (wing cases) with decorative lines\n    for(side = [-1, 1]) {\n        // Main wing case\n        translate([side * scarab_length/4, 0, 0])\n            scale([0.4, 0.9, 0.3])\n                sphere(d=scarab_width);\n        \n        // Decorative lines\n        for(i = [0:4]) {\n            translate([side * scarab_length/4, 0, scarab_height/2 - 1])\n                rotate([0, 0, i * 15 * side])\n                    cube([scarab_length/4, 1, 1], center=true);\n        }\n    }\n}\n\nmodule legs() {\n    // Six legs in Egyptian style\n    color(bronze_color) {\n        for(side = [-1, 1]) {\n            for(pos = [0.3, 0.6, 0.9]) {\n                translate([scarab_length/2 - pos * scarab_length, side * scarab_width/2, -scarab_height/4])\n                    rotate([0, 0, side * 45])\n                        cylinder(h=8, d=3);\n            }\n        }\n    }\n}\n\nmodule hieroglyphs() {\n    // Simplified cartouche inscription on base\n    translate([0, 0, -scarab_height/2 + 0.5])\n        color(gold_color) {\n            // Oval cartouche outline\n            scale([1.2, 0.4, 0.1])\n                sphere(d=scarab_width * 0.8);\n            \n            // Hieroglyph patterns\n            for(i = [-1, 0, 1]) {\n                translate([i * 8, 0, 0.5])\n                    cube([2, scarab_width * 0.3, 1], center=true);\n            }\n        }\n}\n\n// Assemble the scarab amulet\nunion() {\n    color(bronze_color) scarab_body();\n    peridot_inlay();\n    head_details();\n    wing_cases();\n    legs();\n    hieroglyphs();\n}",
    "renders": true
  },
  {
    "historical_artifact": "spinel",
    "openscad_code": "// Spinel historical artifact: Medieval French \"Balas Ruby\" Ring\n// Based on the 14th century \"Black Prince's Ruby\" spinel in the Imperial State Crown\n\n// Ring parameters\nring_outer_diameter = 22;\nring_inner_diameter = 18.5;\nring_width = 6;\nring_thickness = 2;\n\n// Spinel stone parameters\nspinel_width = 15;\nspinel_length = 20;\nspinel_height = 10;\ntable_size = 0.7;  // Proportion of table to girdle\n\n// Setting parameters\nsetting_thickness = 1.5;\nprong_height = 3;\nprong_count = 8;\nprong_width = 1.2;\n\n// Decorative elements\nfleur_height = 4;\nfleur_width = 5;\nband_pattern_segments = 12;\n\n// Colors\nspinel_color = [0.7, 0.1, 0.2];  // Deep red spinel\ngold_color = [0.83, 0.69, 0.22];  // Medieval gold alloy\nhighlight_color = [0.9, 0.8, 0.3];  // Highlight for raised details\n\nmodule ring_band() {\n    difference() {\n        // Main band\n        color(gold_color)\n        cylinder(h=ring_width, r1=ring_outer_diameter/2, r2=ring_outer_diameter/2, center=true);\n        \n        // Hollow center\n        color(gold_color)\n        cylinder(h=ring_width+1, r1=ring_inner_diameter/2, r2=ring_inner_diameter/2, center=true);\n    }\n    \n    // Decorative pattern on band\n    for (i=[0:band_pattern_segments-1]) {\n        rotate([0, 0, i*360/band_pattern_segments])\n        translate([ring_outer_diameter/2 - ring_thickness/2, 0, 0])\n        rotate([90, 0, 0])\n        color(highlight_color)\n        scale([0.3, 0.3, 0.3])\n        cylinder(h=ring_width*0.8, r=ring_thickness/2, $fn=6);\n    }\n}\n\nmodule spinel_stone() {\n    // Main stone body - octahedral shape\n    color(spinel_color)\n    scale([spinel_width/spinel_length, 1, spinel_height/spinel_length])\n    polyhedron(\n        points=[\n            [0, 0, spinel_length/2],           // Table top\n            [0, 0, -spinel_length/2],          // Culet bottom\n            [table_size*spinel_length/2, table_size*spinel_length/2, spinel_length/2],\n            [-table_size*spinel_length/2, table_size*spinel_length/2, spinel_length/2],\n            [-table_size*spinel_length/2, -table_size*spinel_length/2, spinel_length/2],\n            [table_size*spinel_length/2, -table_size*spinel_length/2, spinel_length/2],\n            [spinel_length/2, spinel_length/2, -spinel_length/2 + spinel_length*0.8],\n            [-spinel_length/2, spinel_length/2, -spinel_length/2 + spinel_length*0.8],\n            [-spinel_length/2, -spinel_length/2, -spinel_length/2 + spinel_length*0.8],\n            [spinel_length/2, -spinel_length/2, -spinel_length/2 + spinel_length*0.8]\n        ],\n        faces=[\n            [0, 2, 3], [0, 3, 4], [0, 4, 5], [0, 5, 2],  // Table\n            [1, 6, 7], [1, 7, 8], [1, 8, 9], [1, 9, 6],  // Bottom\n            [2, 0, 5], [5, 9, 2], [2, 9, 6], [2, 6, 0],  // Side facets\n            [3, 0, 2], [2, 6, 3], [3, 6, 7], [3, 7, 0],\n            [4, 0, 3], [3, 7, 4], [4, 7, 8], [4, 8, 0],\n            [5, 0, 4], [4, 8, 5], [5, 8, 9], [5, 9, 0]\n        ]\n    );\n}\n\nmodule stone_setting() {\n    // Base bezel\n    color(gold_color)\n    translate([0, 0, -0.5])\n    cylinder(h=setting_thickness, r1=spinel_length/2 + 2, r2=spinel_length/2 + 2, $fn=32);\n    \n    // Prongs\n    for (i=[0:prong_count-1]) {\n        rotate([0, 0, i*360/prong_count])\n        translate([spinel_length/2 + 0.5, 0, setting_thickness/2])\n        rotate([90, 0, 90])\n        color(gold_color)\n        cylinder(h=prong_height, r=prong_width/2, $fn=8);\n    }\n    \n    // Decorative fleur-de-lis on sides\n    for (i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([spinel_length/2 + 3, 0, setting_thickness + fleur_height/2])\n        color(highlight_color)\n        union() {\n            // Central petal\n            scale([0.5, 1, 1])\n            cube([fleur_width/2, fleur_width/4, fleur_height], center=true);\n            \n            // Side petals\n            translate([fleur_width/4, fleur_width/3, 0])\n            rotate([0, 0, 30])\n            scale([0.4, 0.8, 1])\n            cube([fleur_width/2, fleur_width/4, fleur_height*0.8], center=true);\n            \n            translate([fleur_width/4, -fleur_width/3, 0])\n            rotate([0, 0, -30])\n            scale([0.4, 0.8, 1])\n            cube([fleur_width/2, fleur_width/4, fleur_height*0.8], center=true);\n        }\n    }\n}\n\n// Main assembly\n// Position ring horizontally for printing\nrotate([90, 0, 0])\nunion() {\n    // Ring band\n    ring_band();\n    \n    // Stone setting on top\n    translate([0, 0, ring_width/2 + setting_thickness/2])\n    stone_setting();\n    \n    // Spinel stone in setting\n    translate([0, 0, ring_width/2 + setting_thickness + prong_height/2])\n    spinel_stone();\n}",
    "renders": true
  },
  {
    "historical_artifact": "zircon",
    "openscad_code": "// Zircon historical seal artifact (Persian Achaemenid style, 5th century BCE)\n// Based on Darius the Great's cylinder seal design\n\n$fn = 60;\n\n// Overall dimensions\nseal_height = 70;\nseal_diameter = 25;\nring_diameter = 35;\nring_thickness = 4;\n\n// Main colors\nzircon_color = [0.85, 0.88, 0.95];  // Pale blue zircon\ngold_color = [0.85, 0.7, 0.3];      // Gold setting\nbronze_color = [0.55, 0.35, 0.2];   // Bronze ring\n\n// Module for decorative cuneiform pattern\nmodule cuneiform_pattern() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            // Vertical wedges\n            translate([seal_diameter/2 - 1.5, -0.5, seal_height/2 - 2])\n                cube([3, 1, 4]);\n            \n            // Horizontal wedges\n            translate([seal_diameter/2 - 2, -2, seal_height/2 - 0.5])\n                cube([4, 4, 1]);\n            \n            // Diagonal wedges\n            rotate([0, 0, 45])\n            translate([seal_diameter/2 - 1.5, -0.5, seal_height/2 - 8])\n                cube([2, 1, 3]);\n        }\n    }\n}\n\n// Module for lotus motif\nmodule lotus_motif() {\n    translate([0, 0, seal_height - 8]) {\n        difference() {\n            cylinder(h = 6, d1 = 20, d2 = 16);\n            \n            // Lotus petals\n            for (i = [0:7]) {\n                rotate([0, 0, i * 45]) {\n                    translate([0, 6, 3]) {\n                        rotate([90, 0, 0])\n                        scale([1, 1.5, 1])\n                        cylinder(h = 3, r1 = 2.5, r2 = 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module for zircon gemstone setting\nmodule zircon_setting() {\n    color(zircon_color) {\n        // Main zircon crystal\n        translate([0, 0, seal_height - 15]) {\n            cylinder(h = 10, d1 = 18, d2 = 12);\n            \n            // Faceted top\n            difference() {\n                sphere(d = 14);\n                translate([0, 0, -7])\n                cylinder(h = 14, d = 14);\n            }\n        }\n    }\n    \n    // Gold prong setting\n    color(gold_color) {\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([7, 0, seal_height - 15])\n                cube([2, 2, 8]);\n            }\n        }\n    }\n}\n\n// Module for bronze ring\nmodule bronze_ring() {\n    color(bronze_color) {\n        difference() {\n            cylinder(h = ring_thickness, d = ring_diameter);\n            cylinder(h = ring_thickness + 0.1, d = ring_diameter - 8);\n        }\n        \n        // Reinforcement ridges\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, ring_diameter/2 - 2, ring_thickness/2])\n                cube([ring_diameter - 10, 2, ring_thickness]);\n            }\n        }\n    }\n}\n\n// Module for inscription band\nmodule inscription_band() {\n    color([0.6, 0.6, 0.6]) {\n        translate([0, 0, seal_height/2 - 5]) {\n            difference() {\n                cylinder(h = 10, d = seal_diameter + 2);\n                \n                // Inner hollow\n                cylinder(h = 12, d = seal_diameter - 6);\n                \n                // Cuneiform inscriptions\n                cuneiform_pattern();\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Bronze ring for wearing\n    translate([0, 0, 0])\n    bronze_ring();\n    \n    // Seal body\n    translate([0, 0, ring_thickness + 2])\n    union() {\n        // Main seal cylinder\n        color([0.9, 0.9, 0.9]) {\n            cylinder(h = seal_height, d = seal_diameter);\n        }\n        \n        // Inscription band\n        inscription_band();\n        \n        // Lotus motif at top\n        lotus_motif();\n        \n        // Zircon gemstone setting\n        zircon_setting();\n    }\n    \n    // Hanging loop\n    translate([0, ring_diameter/2 - 2, ring_thickness + seal_height + 5])\n    rotate([90, 0, 0])\n    color(bronze_color) {\n        difference() {\n            torus(ring_diameter/2 - 2, 2);\n            cube([ring_diameter, ring_diameter, 4], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "moonstone",
    "openscad_code": "// Moonstone historical artifact - Sri Lankan moonstone (Sandakada pahana)\n// Traditional temple entrance moonstone with concentric decorative bands\n// Size: 80mm diameter x 10mm thick, suitable for 3D printing\n\n$fn = 64;\n\n// Overall dimensions\nmoonstone_diameter = 80;\nmoonstone_thickness = 10;\nband_width = moonstone_diameter / 2;\n\n// Color definitions\nmoonstone_color = [0.9, 0.85, 0.75];  // Pale beige stone\ndetail_color = [0.7, 0.6, 0.5];      // Darker stone details\n\nmodule moonstone_base() {\n    color(moonstone_color)\n    difference() {\n        // Main disk\n        cylinder(h = moonstone_thickness, r = moonstone_diameter/2, center = true);\n        \n        // Central hole (traditional feature)\n        cylinder(h = moonstone_thickness + 2, r = 5, center = true);\n    }\n}\n\nmodule decorative_band(radius, height, pattern) {\n    color(detail_color)\n    for(i = [0:pattern-1]) {\n        rotate([0, 0, i * 360/pattern])\n        translate([radius, 0, -height/2])\n        cube([3, 3, height + 1], center = true);\n    }\n}\n\nmodule lotus_petal(radius, angle) {\n    rotate([0, 0, angle])\n    translate([radius, 0, 0])\n    scale([1, 0.6, 1])\n    sphere(r = 6);\n}\n\nmodule lotus_band() {\n    color(moonstone_color)\n    for(i = [0:15]) {\n        lotus_petal(25, i * 22.5);\n    }\n}\n\nmodule elephant_band() {\n    color(detail_color)\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([35, 0, -1])\n        scale([1.5, 1, 0.8])\n        cube([6, 4, moonstone_thickness + 2], center = true);\n    }\n}\n\nmodule horse_band() {\n    color(detail_color)\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45 + 22.5])\n        translate([30, 0, -1])\n        scale([1.2, 0.8, 0.6])\n        cube([5, 3, moonstone_thickness + 2], center = true);\n    }\n}\n\nmodule lion_band() {\n    color(detail_color)\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([20, 0, -1])\n        scale([0.8, 0.6, 0.4])\n        cube([3, 2, moonstone_thickness + 2], center = true);\n    }\n}\n\nmodule bull_band() {\n    color(detail_color)\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([15, 0, -1])\n        scale([0.6, 0.5, 0.3])\n        cube([2.5, 2, moonstone_thickness + 2], center = true);\n    }\n}\n\nmodule flame_border() {\n    color(detail_color)\n    for(i = [0:31]) {\n        rotate([0, 0, i * 11.25])\n        translate([38, 0, -1])\n        scale([0.3, 1.2, 0.8])\n        cube([2, 4, moonstone_thickness + 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    moonstone_base();\n    \n    // Concentric decorative bands from outside to center\n    // Outer flame border\n    flame_border();\n    \n    // Elephant band (first ring)\n    elephant_band();\n    \n    // Horse band (second ring)\n    horse_band();\n    \n    // Lion band (third ring)\n    lion_band();\n    \n    // Bull band (fourth ring)\n    bull_band();\n    \n    // Lotus flower petals (innermost ring)\n    lotus_band();\n    \n    // Central decorative rosette\n    color(moonstone_color)\n    translate([0, 0, -moonstone_thickness/2])\n    cylinder(h = moonstone_thickness/2, r = 8);\n    \n    // Tiny spheres as jewel details\n    color([1, 0.9, 0.7])\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([10, 0, 0])\n        sphere(r = 1);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "sunstone",
    "openscad_code": "// Sunstone historical artifact - Aztec Calendar Stone replica\n// Medium complexity realistic version for 3D printing\n\n$fn = 72;\n\n// Main dimensions\ndiameter = 80;\nthickness = 8;\n\n// Colors\nstone_color = [0.85, 0.82, 0.75];  // Light limestone\nhighlight_color = [0.95, 0.93, 0.9];\nshadow_color = [0.75, 0.72, 0.65];\n\nmodule central_face() {\n    // Central sun god face\n    color(stone_color) {\n        union() {\n            // Face base\n            cylinder(h = 2, d = 20, $fn = 48);\n            \n            // Eyes\n            translate([-5, 3, 2.1]) \n                color(shadow_color) \n                sphere(d = 2.5);\n            translate([5, 3, 2.1]) \n                color(shadow_color) \n                sphere(d = 2.5);\n                \n            // Nose\n            translate([0, -1, 2.1]) \n                color(highlight_color) \n                cube([2, 4, 1.5]);\n                \n            // Mouth\n            translate([0, -6, 2.1]) \n                color(shadow_color) \n                cube([6, 1.5, 1]);\n                \n            // Tongue\n            translate([0, -6.5, 2.1]) \n                color([0.7, 0.5, 0.5]) \n                cube([3, 1, 0.8]);\n        }\n    }\n}\n\nmodule rays() {\n    // Sun rays around central face\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5]) {\n            translate([13, 0, 0]) {\n                color(i % 2 == 0 ? highlight_color : shadow_color) {\n                    cube([8, 3, 1.5], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule inner_ring() {\n    // Decorative ring with glyphs\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([32, 0, 0]) {\n                color(stone_color) {\n                    // Glyph blocks\n                    cube([5, 5, 1.5], center = true);\n                    \n                    // Glyph details\n                    translate([0, 0, 0.8]) {\n                        color(shadow_color) {\n                            cylinder(h = 0.8, d = 2.5, $fn = 6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule outer_calendar() {\n    // Outer calendar ring with day symbols\n    for(i = [0:19]) {\n        rotate([0, 0, i * 18]) {\n            translate([38, 0, 0]) {\n                color(i % 5 == 0 ? shadow_color : stone_color) {\n                    // Day glyphs\n                    cube([3, 3, 1], center = true);\n                    \n                    // Small dot detail\n                    translate([0, 0, 0.6]) {\n                        color(highlight_color) {\n                            sphere(d = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_bands() {\n    // Outer decorative bands\n    difference() {\n        color(stone_color) {\n            cylinder(h = thickness, d = diameter, $fn = 128);\n        }\n        \n        // Inner relief pattern\n        color([0.8, 0.78, 0.73]) {\n            cylinder(h = thickness - 1, d = diameter - 10, $fn = 128);\n        }\n    }\n}\n\nmodule border_details() {\n    // Edge details\n    for(i = [0:31]) {\n        rotate([0, 0, i * 11.25]) {\n            translate([39, 0, thickness - 0.5]) {\n                color(shadow_color) {\n                    cube([2, 1, 0.5], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base stone disk\n    decorative_bands();\n    \n    // Central relief layers\n    translate([0, 0, thickness - 1.5]) {\n        central_face();\n    }\n    \n    // Rays layer\n    translate([0, 0, thickness - 0.5]) {\n        rays();\n    }\n    \n    // Inner ring of glyphs\n    translate([0, 0, thickness - 0.3]) {\n        inner_ring();\n    }\n    \n    // Outer calendar ring\n    translate([0, 0, thickness - 0.2]) {\n        outer_calendar();\n    }\n    \n    // Border decorations\n    border_details();\n    \n    // Hanging hole (for artifact display)\n    translate([0, -35, thickness/2]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 5, d = 3);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "tourmaline",
    "openscad_code": "// Tourmaline Scarab Amulet - Ancient Egyptian Revival Style\n// Based on historical artifacts from the Late Period (664-332 BCE)\n\n// Color definitions for realistic tourmaline\nTourmaline_Green = [0.1, 0.4, 0.2];\nTourmaline_Dark = [0.05, 0.2, 0.1];\nGold = [0.8, 0.6, 0.2];\nBronze = [0.6, 0.4, 0.2];\n\n// Main scarab body module\nmodule scarab_body() {\n    color(Tourmaline_Green) {\n        // Main oval body\n        scale([1.2, 1, 0.8]) sphere(d=30);\n        \n        // Head protrusion\n        translate([0, -18, 2]) {\n            rotate([90, 0, 0]) cylinder(h=8, d1=12, d2=8);\n        }\n        \n        // Wing covers with segmented texture\n        for(i = [0:3]) {\n            translate([0, 0, -2 + i*0.5]) {\n                scale([1.3 - i*0.1, 1.1 - i*0.05, 0.3]) \n                    sphere(d=30 - i*2);\n            }\n        }\n    }\n}\n\n// Leg modules\nmodule scarab_legs() {\n    color(Tourmaline_Dark) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*10, -15, -8]) {\n                rotate([0, 45*side, 0]) {\n                    rotate([90, 0, 0]) cylinder(h=12, d=3);\n                }\n            }\n        }\n        \n        // Middle legs\n        for(side = [-1, 1]) {\n            translate([side*15, 0, -10]) {\n                rotate([0, 30*side, 0]) {\n                    rotate([90, 0, 0]) cylinder(h=15, d=2.5);\n                }\n            }\n        }\n        \n        // Rear legs\n        for(side = [-1, 1]) {\n            translate([side*12, 15, -8]) {\n                rotate([0, 15*side, 0]) {\n                    rotate([90, 0, 0]) cylinder(h=12, d=3);\n                }\n            }\n        }\n    }\n}\n\n// Hieroglyphic inscription base\nmodule inscription_base() {\n    difference() {\n        color(Gold) {\n            cube([40, 25, 4], center=true);\n        }\n        \n        // Decorative border pattern\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) {\n                translate([19, 0, 1.5]) {\n                    cube([2, 1, 2], center=true);\n                }\n            }\n        }\n        \n        // Center hole for threading\n        translate([0, 0, -2]) {\n            cylinder(h=8, d=3);\n        }\n    }\n}\n\n// Cartouche detail on back\nmodule cartouche_detail() {\n    color(Gold) {\n        translate([0, -5, 14]) {\n            rotate([90, 0, 0]) {\n                // Oval cartouche shape\n                scale([1.5, 0.6, 0.5]) sphere(d=10);\n                \n                // Hieroglyph symbols\n                translate([0, 0, 0.5]) {\n                    // Ankh symbol\n                    scale([0.3, 0.3, 0.3]) {\n                        // Loop\n                        rotate([0, 90, 0]) cylinder(h=2, d=4);\n                        // Stem\n                        translate([0, 0, -1]) cube([1, 2, 1], center=true);\n                        // Cross\n                        translate([0, 1.5, -1]) cube([3, 1, 1], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 5]) {\n    // Base with inscription\n    inscription_base();\n    \n    // Scarab body on top\n    translate([0, 0, 6]) {\n        // Main body\n        scarab_body();\n        \n        // Legs attached\n        scarab_legs();\n        \n        // Back details\n        cartouche_detail();\n        \n        // Eye details\n        for(side = [-1, 1]) {\n            color([0, 0, 0]) {\n                translate([side*3, -18, 4]) {\n                    sphere(d=2);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "malachite",
    "openscad_code": "// Malachite Egyptian Scarab Amulet - Historical Artifact (circa 1980 BCE)\n// Medium complexity realistic model with proper 3D printing considerations\n\n// Color constants for malachite\n$fa = 1;\n$fs = 0.4;\n\nmodule scarab_body() {\n    // Main scarab body - elytra (wing cases)\n    color([0.0, 0.6, 0.2]) {\n        difference() {\n            // Central oval body\n            scale([1.2, 1, 0.8]) sphere(d=20);\n            \n            // Head cavity\n            translate([0, 8, 0]) \n                scale([0.4, 0.4, 0.6]) sphere(d=20);\n            \n            // Underside cavity for 3D printing\n            translate([0, 0, -5])\n                cube([15, 25, 10], center=true);\n        }\n        \n        // Head section\n        translate([0, 8, 3])\n            scale([0.8, 0.6, 0.6]) sphere(d=10);\n    }\n}\n\nmodule wing_details() {\n    // Wing separation line\n    color([0.0, 0.5, 0.15]) {\n        translate([0, -2, 5])\n            cube([1, 15, 0.5], center=true);\n        \n        // Wing vein patterns\n        for(i = [-1, 1]) {\n            translate([i * 3, 0, 5.5]) {\n                for(j = [0:3]) {\n                    rotate([0, 0, j * 20 - 30])\n                        translate([0, j * 2, 0])\n                            scale([0.2, 2, 0.2])\n                                cylinder(h=0.5, d=1);\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Six legs in Egyptian scarab style\n    color([0.0, 0.5, 0.15]) {\n        for(side = [-1, 1]) {\n            for(pos = [0, 1, 2]) {\n                translate([side * 8, -3 + pos * 5, -2]) {\n                    rotate([0, 0, side * (30 - pos * 10)])\n                        cylinder(h=5, d=1.5, $fn=6);\n                    \n                    // Foot detail\n                    translate([side * 3.5, -1, 0])\n                        sphere(d=2);\n                }\n            }\n        }\n    }\n}\n\nmodule hieroglyphs_base() {\n    // Base with hieroglyphic inscription\n    color([0.0, 0.55, 0.18]) {\n        translate([0, -5, -4])\n            cube([18, 12, 2], center=true);\n        \n        // Simplified hieroglyph patterns (Ra and protection symbols)\n        translate([0, -5, -2.5]) {\n            // Ra sun disk\n            color([0.1, 0.4, 0.1])\n            translate([-5, 0, 0])\n                cylinder(h=0.5, d=3);\n            \n            // Ankh symbols\n            for(pos = [-2, 2, 5]) {\n                translate([pos, 0, 0]) {\n                    // Ankh loop\n                    color([0.1, 0.4, 0.1])\n                    rotate_extrude()\n                        translate([1, 0, 0])\n                            circle(d=2);\n                    \n                    // Ankh stem\n                    color([0.1, 0.4, 0.1])\n                    translate([0, -2, 0])\n                        cube([0.5, 4, 0.5], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule suspension_loop() {\n    // Top loop for wearing as pendant\n    color([0.0, 0.5, 0.15]) {\n        translate([0, 10, 8])\n            rotate([90, 0, 0])\n                difference() {\n                    torus(4, 1.5, $fn=20);\n                    cube([8, 8, 3], center=true);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    scarab_body();\n    wing_details();\n    legs();\n    hieroglyphs_base();\n    suspension_loop();\n    \n    // Malachite banding pattern\n    for(i = [0:5]) {\n        color([0.0, 0.45 + i * 0.03, 0.15]) {\n            rotate([0, 90, 0])\n                translate([0, -10 + i * 3, 0])\n                    scale([1.1 - i * 0.05, 1.1 - i * 0.05, 0.1])\n                        cylinder(h=20, d=20);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "obsidian",
    "openscad_code": "// Obsidian Aztec Macuahuitl (Obsidian Sword)\n// A realistic recreation of the Aztec weapon with obsidian blades\n\n$fn = 50;\n\n// Main blade parameters\nblade_length = 80;\nblade_width = 40;\nblade_thickness = 8;\nhandle_length = 40;\nhandle_diameter = 15;\n\n// Obsidian blade color\ncolor([0.1, 0.1, 0.1, 0.9]) {\n    // Main wooden paddle\n    union() {\n        // Central paddle\n        translate([0, 0, 0]) {\n            difference() {\n                cube([blade_length, blade_width, blade_thickness], center = true);\n                // Grooves for obsidian blades\n                for (i = [-3:3]) {\n                    translate([i * 10, 0, -blade_thickness/2 - 0.1]) {\n                        cube([2, blade_width * 0.9, blade_thickness/2 + 0.2]);\n                    }\n                }\n            }\n        }\n        \n        // Handle\n        translate([-blade_length/2 - handle_length/2, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = handle_length, d = handle_diameter, center = true);\n            }\n        }\n        \n        // Handle guard\n        translate([-blade_length/2 - 5, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 8, d = handle_diameter + 6, center = true);\n            }\n        }\n        \n        // Obsidian blades\n        for (i = [-3:3]) {\n            translate([i * 10, blade_width/2 - 2, 0]) {\n                // Top blades\n                rotate([0, 0, -15]) {\n                    linear_extrude(height = 1) {\n                        polygon(points = [\n                            [0, 0],\n                            [3, 2],\n                            [0, 4],\n                            [-1, 2]\n                        ]);\n                    }\n                }\n            }\n            \n            // Bottom blades\n            translate([i * 10, -blade_width/2 + 2, 0]) {\n                rotate([0, 0, 15]) {\n                    linear_extrude(height = 1) {\n                        polygon(points = [\n                            [0, 0],\n                            [3, -2],\n                            [0, -4],\n                            [-1, -2]\n                        ]);\n                    }\n                }\n            }\n        }\n        \n        // Decorative inlays\n        translate([0, 0, blade_thickness/2 + 0.1]) {\n            for (i = [-2:2]) {\n                for (j = [-1:1]) {\n                    translate([i * 15, j * 10, 0]) {\n                        color([0.8, 0.7, 0.4]) {\n                            sphere(d = 2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Handle grip texture\n        translate([-blade_length/2 - handle_length/2, 0, 0]) {\n            rotate([0, 90, 0]) {\n                for (i = [-5:5]) {\n                    translate([i * 3, 0, handle_diameter/2 + 0.1]) {\n                        cube([2, 1, 1], center = true);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "jet",
    "openscad_code": "// OpenSCAD model of a 1950s Jumo 004B-1 turbojet engine (historical artifact)\n// Overall size: ~90 mm long, ~30 mm diameter\n\n$fn=64;\n\n// Main color: oxidized steel\ncolor(\"darkslategray\") {\n    // Main engine body (diffuser/compressor section)\n    difference() {\n        union() {\n            cylinder(h=45, d1=28, d2=24);  // Front diffuser housing\n            \n            // Compressor housing rings\n            for(i=[1:3]) {\n                translate([0,0,i*10+5])\n                    cylinder(h=3, d=30);\n            }\n        }\n        \n        // Air intake hole\n        cylinder(h=5, d=12);\n    }\n}\n\n// Combustor section\ncolor(\"dimgray\") {\n    difference() {\n        cylinder(h=25, d=26);\n        \n        // Exhaust ports\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([8,0,12])\n                    rotate([0,90,0])\n                        cylinder(h=12, d=4);\n        }\n    }\n}\n\n// Turbine section\ntranslate([0,0,45]) {\n    color(\"darkslategray\") {\n        difference() {\n            cylinder(h=20, d=22);\n            \n            // Exhaust cone\n            translate([0,0,-5])\n                cylinder(h=25, d1=12, d2=16);\n        }\n    }\n    \n    // Nozzle\n    translate([0,0,20]) {\n        color(\"gray\") {\n            cylinder(h=15, d1=22, d2=20);\n            translate([0,0,15])\n                cylinder(h=5, d=16);\n        }\n    }\n}\n\n// Accessory gearbox on top\ntranslate([0,15,15]) {\n    color(\"gray\") {\n        cube([12,8,25], center=true);\n    }\n}\n\n// Fuel nozzles (8 small cylinders around combustor)\nfor(i=[0:7]) {\n    rotate([0,0,i*45])\n        translate([13,0,27.5])\n            rotate([90,0,0])\n                cylinder(h=8, d=2);\n}\n\n// Historical data plate\ntranslate([0,-15,22]) {\n    color(\"gold\") {\n        cube([12,2,4], center=true);\n    }\n}\n\n// Mounting lugs\ntranslate([0,0,35]) {\n    difference() {\n        union() {\n            // Left lug\n            translate([-14,0,0])\n                cube([8,4,6], center=true);\n            \n            // Right lug\n            translate([14,0,0])\n                cube([8,4,6], center=true);\n        }\n        \n        // Mounting holes\n        translate([-14,0,0])\n            cylinder(h=6, d=3, center=true);\n        translate([14,0,0])\n            cylinder(h=6, d=3, center=true);\n    }\n}\n\n// Cooling fins on turbine\nfor(i=[0:3]) {\n    translate([0,0,52+i*3])\n        cylinder(h=2, d=24);\n}",
    "renders": true
  },
  {
    "historical_artifact": "ivory",
    "openscad_code": "// Ivory Phoenician Scarab Seal (8th-7th century BCE)\n// Size: 55 mm long, 37 mm wide, 22 mm tall\n// Designed for FDM printing (no overhangs >45°)\n\ncolor(\"ivory\") {\n\n// Main scarab body\ndifference() {\n    union() {\n        // Elytra (wing covers)\n        translate([0, 0, 8]) \n            scale([1.0, 0.7, 0.4])\n            sphere(d = 35, $fn = 64);\n        \n        // Head\n        translate([-15, 0, 8])\n            scale([0.8, 0.9, 0.7])\n            sphere(d = 18, $fn = 32);\n    }\n    \n    // Carve underside cavity for seal\n    translate([0, 0, -2])\n        cube([50, 35, 12], center = true);\n}\n\n// Six legs (three per side)\nmodule leg(x, y, angle) {\n    translate([x, y, 5])\n        rotate([0, 0, angle])\n        cylinder(h = 12, d1 = 4, d2 = 2, $fn = 8);\n}\n\nfor (i = [-1, 0, 1]) {\n    leg(i * 12 + 5, 12, -30);\n    leg(i * 12 + 5, -12, 30);\n}\n\n// Wing cases ridge detail\ntranslate([0, 0, 15])\n    cube([30, 2, 2], center = true);\n\n// Decorative lines on elytra\nfor (i = [-1, 1]) {\n    translate([i * 8, 0, 15])\n        rotate([0, 90, 0])\n        cylinder(h = 25, d = 1, $fn = 8);\n}\n\n// Head details - eyes\nfor (i = [-1, 1]) {\n    translate([-18, i * 5, 9])\n        sphere(d = 3, $fn = 12);\n}\n\n// Clypeus (front plate)\ntranslate([-19, 0, 7])\n    scale([1, 2, 0.5])\n    sphere(d = 8, $fn = 16);\n\n// Seal base - square base with rounded edges\ndifference() {\n    translate([0, 0, -3])\n        minkowski() {\n            cube([45, 30, 6], center = true);\n            sphere(d = 3, $fn = 16);\n        }\n    \n    // Hieroglyph inscription recess (Phoenician ship)\n    translate([5, 0, -6])\n        cube([25, 15, 1.5], center = true);\n    \n    // Perforation for string\n    rotate([0, 90, 0])\n        translate([0, 0, -25])\n            cylinder(h = 50, d = 3, $fn = 12);\n}\n\n// Side decorative dots\nmodule dot(x, y, z) {\n    translate([x, y, z])\n        sphere(d = 1.5, $fn = 8);\n}\n\nfor (i = [0:4]) {\n    a = i * 72;\n    dot(0, 17 * cos(a), 8 + 17 * sin(a));\n    dot(0, -17 * cos(a), 8 + 17 * sin(a));\n}\n\n}",
    "renders": true
  },
  {
    "historical_artifact": "bone",
    "openscad_code": "// Historical Bone Artifact - Carved Bone Stylus (Roman Era)\n// Realistic style with medium complexity\n\n$fn = 50;\n\n// Main bone body - stylized animal bone\ncolor(\"burlywood\") \ndifference() {\n    union() {\n        // Main shaft with slight curvature\n        translate([0,0,-45]) \n        rotate([0,5,0]) \n        cylinder(h=90, r1=6, r2=4, center=true);\n        \n        // Epiphysis - widened ends\n        translate([0,0,40]) \n        sphere(r=8);\n        \n        translate([0,0,-40]) \n        sphere(r=7);\n    }\n    \n    // Hollow interior for 3D printing\n    translate([0,0,-45]) \n    rotate([0,5,0]) \n    cylinder(h=90, r1=4, r2=2.5, center=true);\n}\n\n// Decorative carved ring patterns\nmodule carved_ring(height, radius, depth) {\n    difference() {\n        cylinder(h=2, r=radius+0.5, center=true);\n        translate([0,0,depth]) \n        cylinder(h=2.1, r=radius-depth, center=true);\n    }\n}\n\n// Apply decorative rings at intervals\nfor (i = [-30:15:30]) {\n    color(\"wheat\") \n    translate([0,0,i]) \n    rotate([90,0,0]) \n    carved_ring(0, 6.5, 0.8);\n}\n\n// Stylus tip - metal insert simulation\ncolor(\"darkgoldenrod\") \ntranslate([0,0,-45]) \nrotate([0,5,0]) \ncylinder(h=8, r1=4, r2=1, center=false);\n\n// Carved inscription panel\ncolor(\"burlywood\") \ndifference() {\n    // Panel base\n    translate([0,6,0]) \n    cube([25,2,40], center=true);\n    \n    // Roman numeral inscriptions\n    for (i = [-15:10:15]) {\n        translate([-8+i,7.1,i]) \n        cube([1.5,0.5,5]);\n    }\n    \n    // Decorative border grooves\n    translate([0,7.1,18]) \n    cube([26,0.3,1]);\n    translate([0,7.1,-18]) \n    cube([26,0.3,1]);\n}\n\n// Weathering/wear indicators\nmodule wear_mark(x,z) {\n    color(\"tan\") \n    translate([x,0,z]) \n    scale([1,0.3,1]) \n    sphere(r=1.5);\n}\n\n// Apply weathering marks\nfor (i = [1:8]) {\n    angle = i * 45;\n    r = 6.5 + sin(i) * 0.5;\n    wear_mark(r*cos(angle), i*10-40);\n}\n\n// Small carved spiral detail near tip\ncolor(\"wheat\") \ntranslate([0,0,-35]) \nrotate([0,90,0]) \nfor (i = [0:5:360]) {\n    rotate([0,0,i]) \n    translate([5.5+i/100,0,0]) \n    cube([0.8,0.8,0.5], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "horn",
    "openscad_code": "// Viking Drinking Horn with Metal Rim and Carved Runes\n// Based on 9th-11th century Norse artifacts\n\n$fn = 50;\n\n// Main horn body\nmodule horn_body() {\n    // Horn curve - gradually tapering spiral\n    color(\"burlywood\") {\n        union() {\n            // Base horn shape using scaled cylinders\n            for(i = [0:10]) {\n                translate([sin(i*15)*i*2, cos(i*15)*i*2, i*7]) \n                    rotate([0, 0, i*15])\n                    cylinder(h=8, d1=35-i*2.5, d2=33-i*2.5, $fn=6);\n            }\n            \n            // Tip of horn - more pointed\n            translate([sin(150)*20, cos(150)*20, 80]) \n                rotate([0, 0, 150])\n                cylinder(h=15, d1=10, d2=2, $fn=6);\n        }\n    }\n}\n\n// Metal rim at mouth\nmodule metal_rim() {\n    color(\"silver\") {\n        // Main rim band\n        translate([0, 0, -4])\n            cylinder(h=8, d=38, d2=40, $fn=32);\n            \n        // Decorative ridges\n        for(i = [0:3]) {\n            translate([0, 0, -3+i*2])\n                cylinder(h=1, d=42-i, $fn=32);\n        }\n    }\n}\n\n// Carved runic inscription\nmodule rune_carving() {\n    color(\"saddlebrown\") difference() {\n        // Main horn surface\n        cylinder(h=60, d=32, $fn=16);\n        \n        // Carved runes - Elder Futhark style\n        for(i = [0:5]) {\n            translate([15+i*5, -2, 25+i*5])\n                cube([3, 1, 2]);\n            translate([15+i*5, 0, 25+i*5])\n                cube([1, 3, 2]);\n            translate([15+i*5, 2, 25+i*5])\n                cube([3, 1, 2]);\n        }\n    }\n}\n\n// Support ring for hanging\nmodule suspension_ring() {\n    color(\"silver\") {\n        translate([0, 20, 30])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=5, d=12, $fn=32);\n                cylinder(h=6, d=8, $fn=32);\n            }\n    }\n}\n\n// Decorative bands\nmodule decorative_bands() {\n    color(\"goldenrod\") {\n        for(i = [1:3]) {\n            translate([sin(i*50)*i*5, cos(i*50)*i*5, 15+i*15])\n                rotate([0, 0, i*50])\n                difference() {\n                    cylinder(h=3, d=28-i, $fn=32);\n                    cylinder(h=4, d=26-i, $fn=32);\n                }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 5])\n    horn_body();\n    \ntranslate([0, 0, 5])\n    metal_rim();\n    \ntranslate([sin(15)*2, cos(15)*2, 30])\n    rotate([0, 0, 15])\n    rune_carving();\n    \ntranslate([0, 0, 5])\n    suspension_ring();\n    \ntranslate([0, 0, 5])\n    decorative_bands();",
    "renders": true
  },
  {
    "historical_artifact": "shell",
    "openscad_code": "// Historical Shell Artifact - Ammonite Fossil Replica\n// Based on Mesozoic era ammonite fossils (200-66 million years ago)\n// This model represents a polished fossil specimen with characteristic spiral chambers\n\n// Overall dimensions: 80mm diameter, 30mm thickness\n\n// Main spiral shell with growth rings\nmodule spiral_shell(turns=5, base_radius=40, growth_factor=1.2, thickness=8) {\n    // Create the main spiral structure\n    for (i = [0:turns*36]) {\n        angle = i * 10;\n        radius = base_radius * pow(growth_factor, i/36);\n        \n        // Each chamber segment of the spiral\n        translate([cos(angle) * radius/2, sin(angle) * radius/2, 0])\n        rotate([0, 0, angle])\n        scale([1, 1.1, 1])  // Slightly elliptical cross-section\n        cylinder(h=thickness, r1=radius/8, r2=radius/9, $fn=20);\n    }\n}\n\n// Internal chamber walls (septa)\nmodule chamber_walls(turns=5, base_radius=40) {\n    for (i = [1:turns*6]) {\n        angle = i * 60;\n        radius = base_radius * 0.7 * pow(1.1, i/6);\n        \n        // Curved septa walls between chambers\n        translate([cos(angle) * radius/2, sin(angle) * radius/2, -1])\n        rotate([0, 0, angle + 30])\n        scale([1, 0.3, 1])\n        cylinder(h=10, r1=radius/4, r2=0, $fn=8);\n    }\n}\n\n// Fossilized surface texture with growth lines\nmodule growth_lines(turns=5, base_radius=40) {\n    for (i = [0:turns*20]) {\n        angle = i * 18;\n        radius = base_radius * 0.8 * pow(1.15, i/20);\n        \n        // Fine ridges following growth pattern\n        translate([cos(angle) * radius/2, sin(angle) * radius/2, 4])\n        rotate([0, 0, angle])\n        scale([1, 0.05, 0.3])\n        cylinder(h=1, r=radius/6, $fn=6);\n    }\n}\n\n// Central umbilicus (opening at center)\nmodule central_opening(radius=8) {\n    difference() {\n        cylinder(h=10, r=radius, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=12, r=radius-2, $fn=32);\n    }\n}\n\n// Fossil matrix base (stone surrounding fossil)\nmodule fossil_base() {\n    difference() {\n        // Main oval base\n        scale([1.2, 1, 0.5])\n        cylinder(h=5, r=45, $fn=64);\n        \n        // Cutout for the fossil impression\n        translate([0, 0, -1])\n        scale([1.05, 0.9, 2])\n        cylinder(h=10, r=42, $fn=64);\n    }\n}\n\n// Assemble the complete fossil specimen\nunion() {\n    // Stone matrix base - light gray limestone color\n    color([0.7, 0.7, 0.65])\n    fossil_base();\n    \n    // Main spiral shell - fossilized brown/gold color\n    color([0.6, 0.5, 0.35])\n    union() {\n        spiral_shell();\n        \n        // Add chamber walls inside\n        chamber_walls();\n        \n        // Surface texture details\n        growth_lines();\n    }\n    \n    // Central opening - darker showing depth\n    color([0.4, 0.3, 0.2])\n    translate([0, 0, 4])\n    central_opening();\n    \n    // Edge details showing fossilization\n    color([0.8, 0.75, 0.65])\n    for (i = [0:45:360]) {\n        rotate([0, 0, i])\n        translate([38, 0, 2])\n        scale([0.3, 0.3, 0.5])\n        sphere(r=3, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "cameo",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\ncameo_d = 60;\ncameo_t = 6;\n\n// Shell base\nmodule cameo_shell() {\n    difference() {\n        color(\"Seashell\") scale([1,0.7,1]) cylinder(d = cameo_d, h = cameo_t, center=true);\n        translate([0,0,2]) scale([0.9,0.62,1]) cylinder(d = cameo_d, h = cameo_t, center=true);\n    }\n}\n\n// Laurel wreath\nmodule laurel_leaf() {\n    color(\"Gold\") rotate([0,90,0]) cylinder(h = 14, d1 = 4, d2 = 2, center=true);\n}\n\nmodule laurel_wreath() {\n    for(i = [0:15:359]) {\n        rotate([0,0,i]) translate([18,0,cameo_t/2-1]) laurel_leaf();\n    }\n}\n\n// Portrait relief\nmodule bust_profile() {\n    color(\"NavajoWhite\") {\n        // Face\n        translate([-5,0,0]) scale([1,1.2,1]) sphere(d = 22);\n        // Nose\n        translate([3,-2,2]) rotate([0,20,0]) cylinder(h = 6, d1 = 2, d2 = 4);\n        // Chin\n        translate([0,-10,0]) sphere(d = 8);\n        // Neck\n        translate([0,-18,0]) scale([0.4,0.8,0.6]) cylinder(h = 12, d = 10);\n        // Hair bun\n        translate([-5,3,2]) scale([1.2,0.8,0.7]) sphere(d = 12);\n    }\n}\n\n// Background pattern\nmodule background_pattern() {\n    color(\"AntiqueWhite\") {\n        for(a = [0:30:359]) {\n            rotate([0,0,a]) \n            translate([0,0,-1]) \n            linear_extrude(height = 2) \n            circle(r = 2);\n        }\n    }\n}\n\n// Decorative border pearls\nmodule pearls() {\n    color(\"Ivory\") {\n        for(i = [0:15:359]) {\n            rotate([0,0,i]) translate([cameo_d/2-2,0,cameo_t/2-1]) sphere(d = 3);\n        }\n    }\n}\n\n// Inscription ribbon\nmodule inscription() {\n    color(\"Bisque\") {\n        translate([0,-cameo_d/4,-cameo_t/2+1]) \n        rotate([90,0,0]) \n        linear_extrude(height = 2) \n        text(\"SPQR\", size = 6, halign = \"center\");\n    }\n}\n\n// Assemble cameo\ncameo_shell();\ntranslate([0,0,cameo_t/2]) background_pattern();\ntranslate([0,0,cameo_t/2+1]) bust_profile();\ntranslate([0,0,cameo_t/2+2]) laurel_wreath();\npearls();\ninscription();",
    "renders": true
  },
  {
    "historical_artifact": "intaglio",
    "openscad_code": "// Roman Carnelian Intaglio Ring - 1st Century AD Style\n// Depicts Mars in profile with helmet and spear\n\n// Overall dimensions\n$fn = 50;\n\n// Main ring band - oval shank typical of Roman rings\nmodule ring_band() {\n    color([0.8, 0.6, 0.2])  // Gold color\n    difference() {\n        // Main oval band\n        scale([1.3, 1, 1]) cylinder(h = 8, r = 18);\n        translate([0, 0, -1]) scale([1.2, 0.9, 1.1]) cylinder(h = 10, r = 15);\n    }\n}\n\n// Bezel setting for the intaglio stone\nmodule bezel_setting() {\n    color([0.8, 0.6, 0.2])  // Gold color\n    union() {\n        // Base bezel\n        cylinder(h = 3, r = 25);\n        \n        // Decorative rim with tiny spheres\n        for(i = [0:30]) {\n            rotate([0, 0, i * 12])\n            translate([22, 0, 3])\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// Carnelian intaglio stone with engraved design\nmodule intaglio_stone() {\n    color([0.7, 0.2, 0.1])  // Carnelian red\n    difference() {\n        // Main stone - oval cabochon\n        scale([1.2, 1, 1]) cylinder(h = 4, r = 22);\n        \n        // Engraved design - Mars profile\n        translate([0, 10, 3.9])\n        scale([0.8, 0.6, 0.2])\n        rotate([0, 0, 180])\n        difference() {\n            // Helmet crest\n            union() {\n                translate([-5, 0, 0]) cube([10, 3, 2]);\n                translate([-3, 3, 0]) cube([6, 2, 1]);\n            }\n            \n            // Face profile\n            union() {\n                // Nose\n                translate([0, -2, 0]) cube([2, 8, 2]);\n                \n                // Chin/jaw\n                translate([2, -10, 0]) cube([5, 5, 2]);\n                \n                // Neck\n                translate([4, -12, 0]) cube([3, 8, 2]);\n            }\n            \n            // Spear shaft\n            translate([8, -15, 0]) rotate([0, 0, -15]) cube([2, 20, 1]);\n            \n            // Helmet bowl\n            translate([2, 2, 0]) sphere(r = 8);\n        }\n        \n        // Slight dome top\n        translate([0, 0, 3.5])\n        scale([1.2, 1, 0.3]) sphere(r = 22);\n    }\n}\n\n// Decorative shoulders connecting bezel to band\nmodule shoulders() {\n    color([0.8, 0.6, 0.2])  // Gold color\n    union() {\n        // Left shoulder\n        translate([-25, 0, 2]) rotate([0, 0, -30]) \n        scale([1, 0.3, 1]) cylinder(h = 8, r = 10);\n        \n        // Right shoulder\n        translate([25, 0, 2]) rotate([0, 0, 30]) \n        scale([1, 0.3, 1]) cylinder(h = 8, r = 10);\n        \n        // Decorative elements on shoulders\n        translate([-30, 0, 8]) sphere(r = 2);\n        translate([30, 0, 8]) sphere(r = 2);\n    }\n}\n\n// Assemble the complete intaglio ring\nunion() {\n    ring_band();\n    translate([0, 0, 8]) bezel_setting();\n    translate([0, 0, 11]) intaglio_stone();\n    shoulders();\n}",
    "renders": true
  },
  {
    "historical_artifact": "enamel",
    "openscad_code": "// Byzantine Enamelled Reliquary Cross (ca. 10th–11th c.)\n// Overall size 60 mm tall, 3 mm wall thickness for reliable FDM printing\n\nuse <colors.scad>   // standard OpenSCAD color names\n\n$fn = 64;           // smooth curves\n\n// ---------- MAIN ASSEMBLY ----------\nunion(){\n    color(\"gold\") cross_arms();\n    color(\"royalblue\") enamel_plaques();\n    color(\"gold\") relief_details();\n}\n\n// ---------- CROSS ARMS ----------\nmodule cross_arms(){\n    // Central cube body\n    difference(){\n        cube([40,8,6], center=true);           // 40×8×6 mm bar\n        translate([0,0,3.5])                   // cavity for enamel\n            cube([36,4,4], center=true);\n    }\n\n    // Vertical arm\n    difference(){\n        cube([8,38,6], center=true);\n        translate([0,0,3.5])\n            cube([4,34,4], center=true);\n    }\n\n    // Raised border rim (2 mm wide, 1 mm thick)\n    hull(){\n        translate([0,0,3])\n            cube([42,10,1], center=true);\n        translate([0,0,3])\n            cube([10,40,1], center=true);\n    }\n}\n\n// ---------- ENAMEL PLAQUES ----------\nmodule enamel_plaques(){\n    // Helper for inset rectangles\n    module plaque(dx,dy){\n        translate([dx,dy,3])\n            cube([14,8,0.7], center=true);\n    }\n\n    // Four plaques on cross arms\n    plaque( 10, 0);   // right\n    plaque(-10, 0);   // left\n    plaque( 0, 10);   // top\n    plaque( 0,-10);   // bottom\n    plaque( 0, 0);    // central roundel\n}\n\n// ---------- RELIEF DETAILS ----------\nmodule relief_details(){\n    // Tiny raised spheres at extremities (Byzantine jewels)\n    module jewel(x,y){\n        translate([x,y,5.5])\n            sphere(d=2.5, $fn=16);\n    }\n\n    jewel( 20, 0);\n    jewel(-20, 0);\n    jewel( 0, 19);\n    jewel( 0,-19);\n\n    // Greek IC XC NIKA inscription on central plaque\n    translate([0,0,3.8])\n        linear_extrude(height=0.4)\n            text(\"IC XC NIKA\", size=3, halign=\"center\", valign=\"center\");\n}",
    "renders": true
  },
  {
    "historical_artifact": "filigree",
    "openscad_code": "// Filigree Byzantine Cross Pendant (9th-11th century style)\n// Overall dimensions: ~60mm height x 40mm width x 4mm thickness\n\n// Color definitions\n$fn = 32;\n\n// Main module\nmodule byzantine_cross() {\n    // Base cross shape (flat back plate)\n    color(\"gold\") difference() {\n        // Main cross plate\n        union() {\n            // Vertical bar\n            translate([0, 20, 0]) cube([4, 40, 2], center=true);\n            // Horizontal bar\n            translate([0, 0, 0]) cube([30, 4, 2], center=true);\n        }\n        \n        // Cutout centers for filigree effect\n        translate([0, 20, 0]) cube([2, 36, 3], center=true);\n        translate([0, 0, 0]) cube([26, 2, 3], center=true);\n    }\n    \n    // Decorative filigree patterns\n    color(\"gold\") {\n        // Top decorative circle\n        translate([0, 35, 1]) {\n            cylinder(h=1, d1=8, d2=8);\n            difference() {\n                cylinder(h=1.1, d1=6, d2=6);\n                cylinder(h=1.2, d1=4, d2=4);\n            }\n        }\n        \n        // Side decorative circles\n        for(x = [-10, 10]) {\n            translate([x, 0, 1]) {\n                cylinder(h=1, d1=6, d2=6);\n                difference() {\n                    cylinder(h=1.1, d1=4, d2=4);\n                    cylinder(h=1.2, d1=2, d2=2);\n                }\n            }\n        }\n        \n        // Bottom decorative element\n        translate([0, -25, 1]) {\n            sphere(d=5);\n            difference() {\n                sphere(d=3.5);\n                sphere(d=2);\n            }\n        }\n        \n        // Filigree wire patterns\n        module filigree_wire(start, end, diameter=0.8) {\n            translate(start) {\n                rotate([0, 90, atan2(end[1]-start[1], end[0]-start[0])]) {\n                    cylinder(h=norm(end-start), d=diameter, center=true);\n                }\n            }\n        }\n        \n        // Decorative wire loops\n        filigree_wire([-6, 10, 1], [-12, 15, 1]);\n        filigree_wire([6, 10, 1], [12, 15, 1]);\n        filigree_wire([-8, -5, 1], [-14, -10, 1]);\n        filigree_wire([8, -5, 1], [14, -10, 1]);\n        \n        // Small spheres as pearl decorations\n        for(i = [1:8]) {\n            angle = i * 45;\n            translate([cos(angle) * 3, sin(angle) * 3 + 20, 1.5]) {\n                sphere(d=1.2);\n            }\n        }\n        \n        // Greek cross in center\n        translate([0, 0, 2]) {\n            cube([12, 1, 0.5], center=true);\n            cube([1, 12, 0.5], center=true);\n        }\n    }\n    \n    // Hanging loop\n    color(\"gold\") translate([0, 42, 0]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cylinder(h=2, d1=6, d2=6);\n                cylinder(h=3, d1=3, d2=3);\n            }\n        }\n    }\n    \n    // Beaded border decoration\n    color(\"gold\") for(t = [0:10:360]) {\n        rotate([0, 0, t]) {\n            translate([16, 0, 1]) sphere(d=1.5);\n        }\n    }\n}\n\n// Render the artifact\nbyzantine_cross();",
    "renders": true
  },
  {
    "historical_artifact": "granulation",
    "openscad_code": "// Etruscan granulated gold bulla (pendant) - 7th-6th century BC\n// Overall diameter: 60 mm, typical of votive or high-status jewelry\n\n$fn = 60;  // Smooth curves for printing\n\nmodule granule(r=0.5) {\n    sphere(r=r, $fn=12);\n}\n\nmodule granulated_band(radius=12, height=1.5, granules=60) {\n    for(i=[0:granules-1]) {\n        rotate([0,0,i*360/granules])\n            translate([radius,0,height/2])\n                granule(r=0.6);\n    }\n}\n\nmodule meander_pattern() {\n    // Greek key pattern base\n    color(\"gold\") difference() {\n        cube([20,20,0.8], center=true);\n        for(x=[-8:4:8])\n            for(y=[-8:4:8])\n                translate([x,y,0])\n                    cube([2,2,1.6], center=true);\n    }\n}\n\nmodule suspension_loop() {\n    // Hollow tube for cord\n    color(\"gold\") rotate([90,0,0])\n        difference() {\n            cylinder(h=6, r1=2.5, r2=2.5, center=true);\n            cylinder(h=7, r1=1.5, r2=1.5, center=true);\n        }\n}\n\nmodule central_medallion() {\n    // Raised central boss with granulation\n    color(\"gold\") union() {\n        // Main boss\n        cylinder(h=3, r1=8, r2=8);\n        // Granule ring\n        granulated_band(radius=7, height=3);\n        // Tiny central granule\n        translate([0,0,3.5]) granule(r=0.8);\n    }\n}\n\nmodule bulla_body() {\n    // Main hollow shell\n    color(\"gold\") difference() {\n        // Outer shell\n        sphere(d=60);\n        \n        // Inner hollow\n        sphere(d=54);\n        \n        // Flatten back slightly\n        translate([0,0,-30]) cube([60,60,30], center=true);\n    }\n}\n\nmodule decorative_zones() {\n    // Top granulated border\n    granulated_band(radius=25, height=1);\n    \n    // Middle decorative zone\n    translate([0,0,-5]) {\n        granulated_band(radius=20, height=1);\n        rotate([0,0,3]) granulated_band(radius=20, height=1);\n    }\n    \n    // Bottom granulated border\n    translate([0,0,-10]) granulated_band(radius=15, height=1);\n}\n\n// Assembly\ntranslate([0,0,30]) {\n    // Main body\n    bulla_body();\n    \n    // Decorative elements\n    translate([0,0,27]) decorative_zones();\n    \n    // Central medallion\n    translate([0,0,27]) central_medallion();\n    \n    // Meander pattern band\n    translate([0,0,20]) rotate([90,0,0]) meander_pattern();\n    \n    // Suspension loop\n    translate([0,30,0]) suspension_loop();\n}",
    "renders": true
  },
  {
    "historical_artifact": "repousse",
    "openscad_code": "// Repoussé Phoenician Silver Bowl (8th century BCE)\n// Dimensions: 80mm diameter, 30mm height\n\n$fn = 48;  // Smooth curves for realistic appearance\n\n// Main bowl body\nmodule bowl_body() {\n    difference() {\n        // Outer bowl shell\n        cylinder(h = 30, d1 = 80, d2 = 70, center = false);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 28, d1 = 76, d2 = 66, center = false);\n    }\n}\n\n// Raised central rosette\nmodule central_rosette() {\n    color(\"silver\")\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([0, 15, 30.5])\n                scale([1, 0.3, 1])\n                    cylinder(h = 2, d = 8, center = true);\n    }\n}\n\n// Eight-petal lotus border\nmodule lotus_border() {\n    color(\"silver\")\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([35, 0, 30.5])\n                scale([1, 1.2, 1])\n                    cylinder(h = 1.5, d1 = 8, d2 = 5, center = true);\n    }\n}\n\n// Winged sphinxes in repoussé\nmodule sphinxes() {\n    color(\"silver\")\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 22.5])\n            translate([25, 0, 30.5])\n                union() {\n                    // Sphinx body\n                    scale([1.2, 0.6, 1])\n                        cylinder(h = 1.8, d = 12, center = true);\n                    \n                    // Wings\n                    translate([-6, 0, 0])\n                        rotate([0, 0, -30])\n                            scale([0.3, 1, 1])\n                                cylinder(h = 1.5, d = 10, center = true);\n                    \n                    translate([6, 0, 0])\n                        rotate([0, 0, 30])\n                            scale([0.3, 1, 1])\n                                cylinder(h = 1.5, d = 10, center = true);\n                }\n    }\n}\n\n// Palmette frieze band\nmodule palmette_frieze() {\n    color(\"silver\")\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([30, 0, 30.3])\n                union() {\n                    // Main palmette\n                    scale([0.8, 1, 1])\n                        cylinder(h = 1, d = 4, center = true);\n                    \n                    // Side fronds\n                    translate([-2, 0, 0])\n                        rotate([0, 0, -20])\n                            scale([0.5, 0.8, 1])\n                                cylinder(h = 0.8, d = 3, center = true);\n                    \n                    translate([2, 0, 0])\n                        rotate([0, 0, 20])\n                            scale([0.5, 0.8, 1])\n                                cylinder(h = 0.8, d = 3, center = true);\n                }\n    }\n}\n\n// Base ring for stability\nmodule base_ring() {\n    color(\"silver\")\n    difference() {\n        cylinder(h = 3, d = 70, center = false);\n        translate([0, 0, 0.5])\n            cylinder(h = 2.5, d = 66, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bowl\n    color(\"silver\")\n    bowl_body();\n    \n    // Decorative elements in raised repoussé\n    central_rosette();\n    lotus_border();\n    sphinxes();\n    palmette_frieze();\n    \n    // Base\n    translate([0, 0, -3])\n        base_ring();\n}",
    "renders": true
  },
  {
    "historical_artifact": "chasing",
    "openscad_code": "// Chasing Egyptian Scarab Amulet (New Kingdom, 1550-1077 BCE)\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\nscarab_width = 40;\nscarab_length = 55;\nscarab_height = 15;\nwall_thick = 1.5;\n\n// Main scarab body\nmodule scarab_body() {\n    color(\"gold\") \n    difference() {\n        // Ellipsoidal body\n        scale([1, 1.4, 0.6]) \n        sphere(d=scarab_width);\n        \n        // Flatten bottom\n        translate([0, 0, -scarab_height/2 - 1])\n        cube([scarab_width*2, scarab_width*2, 2], center=true);\n    }\n}\n\n// Head with realistic details\nmodule scarab_head() {\n    color(\"gold\")\n    union() {\n        // Main head\n        translate([0, scarab_length/2 - 5, 0])\n        scale([0.8, 0.6, 0.5])\n        sphere(d=scarab_width * 0.7);\n        \n        // Eyes\n        for(x = [-6, 6]) {\n            translate([x, scarab_length/2 - 2, 3])\n            sphere(d=3);\n        }\n        \n        // Mandibles\n        translate([0, scarab_length/2, -1])\n        rotate([0, 90, 0])\n        cylinder(h=8, r1=4, r2=2, center=true);\n    }\n}\n\n// Wing cases with decorative pattern\nmodule wing_cases() {\n    color(\"gold\")\n    difference() {\n        // Main wing shell\n        translate([0, -5, 0])\n        scale([1, 1.2, 0.3])\n        sphere(d=scarab_width * 1.1);\n        \n        // Wing line grooves\n        for(y = [-10:5:10]) {\n            translate([0, y, -1])\n            cube([scarab_width * 0.8, 1, 3], center=true);\n        }\n    }\n}\n\n// Leg details (6 legs)\nmodule legs() {\n    color(\"gold\")\n    for(side = [-1, 1]) {\n        for(pos = [-15, -5, 10]) {\n            translate([side * 15, pos, -3])\n            rotate([0, 30 * side, 0])\n            cylinder(h=12, r1=1.5, r2=1);\n        }\n    }\n}\n\n// Hieroglyphic inscription on base\nmodule inscription() {\n    color(\"black\")\n    translate([0, 0, -scarab_height/2 + 0.1])\n    linear_extrude(height=0.5) {\n        text(\"𓂀𓃭𓆣\", size=8, halign=\"center\", valign=\"center\", font=\"Arial\");\n    }\n}\n\n// Ring loop for suspension\nmodule suspension_loop() {\n    color(\"gold\")\n    rotate([90, 0, 0])\n    translate([0, scarab_length/2 + 8, 0])\n    difference() {\n        torus(r1=3, r2=1);\n        translate([0, -5, 0])\n        cube([10, 10, 2], center=true);\n    }\n}\n\n// Combine all parts\nunion() {\n    scarab_body();\n    scarab_head();\n    wing_cases();\n    legs();\n    inscription();\n    suspension_loop();\n}",
    "renders": true
  },
  {
    "historical_artifact": "etching",
    "openscad_code": "// Cuneiform tablet (Mesopotamia, ~2300 BCE) – realistic style, medium complexity\n// Overall printable block 60×40×10 mm, cuneiform impressions carved in.\n\n// Base tablet\nunion() {\n    // Clay body\n    color(\"burlywood\")\n    difference() {\n        translate([0, 0, 5])\n            cube([60, 40, 10], center = true);\n\n        // Hollow underside for material saving\n        translate([0, 0, 2])\n            cube([56, 36, 4], center = true);\n    }\n\n    // Top writing surface\n    color(\"wheat\")\n    translate([0, 0, 10.1])\n        cube([58, 38, 0.5], center = true);\n}\n\n// Module for a single wedge impression\nmodule wedge(x, y, rot) {\n    translate([x, y, 10.2])\n    rotate([0, 0, rot])\n    difference() {\n        cube([2.5, 1.5, 1], center = true);\n        scale([0.9, 0.7, 1.1])\n            cube([2.5, 1.5, 1], center = true);\n    }\n}\n\n// Module for a row of wedges\nmodule wedgeRow(x0, y0, n) {\n    for (i = [0:n-1])\n        wedge(x0 + i*3.2, y0, 0);\n}\n\n// Cuneiform inscription – 4 short lines\nwedgeRow(-20, -15, 5);\nwedgeRow(-20, -10, 6);\nwedgeRow(-20, -5, 4);\nwedgeRow(-20, 0, 7);\n\n// Sideways wedges for variety\nfor (i = [0:3])\n    wedge(-25 + i*4, 8, 90);\n\n// Edge seal impression – cylinder seal roll mark\ncolor(\"peru\") {\n    for (a = [0:15:75])\n    rotate([90, 0, a])\n    translate([0, 20, 5])\n    difference() {\n        cylinder(h = 2, r = 2.5, $fn = 8, center = true);\n        cylinder(h = 2.2, r = 2, $fn = 8, center = true);\n    }\n}\n\n// Small corner chips for realism\ndifference() {\n    children();\n    color(\"burlywood\")\n    translate([27, 17, 10])\n        sphere(r = 2.5);\n    translate([-27, -17, 10])\n        sphere(r = 2);\n}",
    "renders": true
  },
  {
    "historical_artifact": "gilding",
    "openscad_code": "// Gilded Byzantine Reliquary Cross (10th century style)\n// Realistic medium-complexity 3D printable artifact\n\n$fn = 64;\n\n// Overall dimensions\ncross_height = 80;\ncross_width = 55;\nthickness = 8;\n\nmodule cross_base() {\n    // Main cross body with slight taper\n    color(\"gold\") difference() {\n        hull() {\n            translate([0, 0, 0]) cube([cross_width, cross_width*0.6, thickness], center=true);\n            translate([0, cross_height*0.3, 0]) cube([cross_width*0.8, cross_height*0.4, thickness], center=true);\n        }\n        \n        // Central gem setting\n        translate([0, cross_height*0.3, thickness/2]) \n            cylinder(h=thickness+1, r=cross_width*0.15, center=true);\n        \n        // Four smaller gem settings\n        for(y=[-cross_height*0.2, cross_height*0.4]) {\n            for(x=[-cross_width*0.3, cross_width*0.3]) {\n                if(!(abs(x) < cross_width*0.2 && abs(y - cross_height*0.3) < cross_height*0.1)) {\n                    translate([x, y, thickness/2]) \n                        cylinder(h=thickness+1, r=cross_width*0.08, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_inscription() {\n    // Raised Greek inscription around edges\n    color(\"darkgoldenrod\") for(i=[0:3]) {\n        rotate([0, 0, i*90]) \n            translate([0, cross_height*0.5, thickness/2]) \n                cylinder(h=thickness*0.3, r=cross_width*0.45, center=true);\n    }\n}\n\nmodule suspension_loop() {\n    // Cast loop for hanging\n    color(\"gold\") rotate([90, 0, 0]) \n        translate([0, cross_height*0.52, 0]) \n            difference() {\n                cylinder(h=cross_width*0.15, r=cross_width*0.08, center=true);\n                cylinder(h=cross_width*0.2, r=cross_width*0.04, center=true);\n            }\n}\n\nmodule engraved_patterns() {\n    // Engraved cross hatching pattern\n    color(\"gold\") for(i=[-2:2]) {\n        // Vertical lines\n        translate([i*cross_width*0.1, cross_height*0.3, 0]) \n            cube([cross_width*0.02, cross_height*0.5, thickness*0.2], center=true);\n        // Horizontal lines\n        translate([0, cross_height*0.3 + i*cross_height*0.1, 0]) \n            cube([cross_width*0.8, cross_width*0.02, thickness*0.2], center=true);\n    }\n}\n\nmodule central_christogram() {\n    // IC XC Christogram in center\n    color(\"gold\") translate([0, cross_height*0.3, thickness*0.4]) {\n        // I\n        cube([cross_width*0.05, cross_height*0.15, thickness*0.3], center=true);\n        // C\n        translate([-cross_width*0.15, 0, 0]) \n            difference() {\n                cylinder(h=thickness*0.3, r=cross_width*0.1, center=true);\n                translate([cross_width*0.05, 0, 0]) \n                    cube([cross_width*0.15, cross_width*0.2, thickness*0.4], center=true);\n            }\n        // X\n        rotate([0, 0, 45]) cube([cross_width*0.05, cross_height*0.2, thickness*0.3], center=true);\n        rotate([0, 0, -45]) cube([cross_width*0.05, cross_height*0.2, thickness*0.3], center=true);\n        // C\n        translate([cross_width*0.15, 0, 0]) mirror([1, 0, 0]) \n            difference() {\n                cylinder(h=thickness*0.3, r=cross_width*0.1, center=true);\n                translate([cross_width*0.05, 0, 0]) \n                    cube([cross_width*0.15, cross_width*0.2, thickness*0.4], center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    cross_base();\n    decorative_inscription();\n    suspension_loop();\n    engraved_patterns();\n    central_christogram();\n}",
    "renders": true
  },
  {
    "historical_artifact": "niello",
    "openscad_code": "// Niello-inlaid Byzantine cross reliquary, 11th c. Constantinople style\n// 80 mm overall height, 55 mm width, 8 mm thick at center\n\ncolor(\"goldenrod\") difference() {\n    // Main cross body\n    union() {\n        // Vertical arm\n        translate([0, 0, 2]) cube([12, 50, 6], center=true);\n        // Horizontal arm\n        translate([0, 0, 2]) cube([42, 12, 6], center=true);\n        // Square boss at crossing\n        translate([0, 0, 4.5]) cube([18, 18, 3], center=true);\n    }\n    \n    // Niello-filled grooves – cross arms\n    for (t = [-30, -10, 10, 30]) {\n        translate([0, t, 4]) cube([8.5, 2.5, 2.1], center=true);\n    }\n    for (t = [-18, 18]) {\n        translate([t, 0, 4]) cube([2.5, 8.5, 2.1], center=true);\n    }\n    \n    // Niello-filled Greek inscription IC XC NIKA on vertical arm\n    // I\n    translate([-2.5, 19, 4]) cube([1.2, 8, 2.1]);\n    // C\n    translate([2.5, 19, 4]) cube([1.2, 8, 2.1]);\n    translate([3.8, 21, 4]) cube([2.5, 1.2, 2.1]);\n    translate([3.8, 24, 4]) cube([2.5, 1.2, 2.1]);\n    // X\n    translate([-2.5, 14, 4]) cube([1.2, 8, 2.1]);\n    rotate([0, 0, 45]) translate([-2.5, 14, 4]) cube([1.2, 8, 2.1]);\n    rotate([0, 0, -45]) translate([2.5, 14, 4]) cube([1.2, 8, 2.1]);\n    // C\n    translate([2.5, 9, 4]) cube([1.2, 8, 2.1]);\n    translate([3.8, 11, 4]) cube([2.5, 1.2, 2.1]);\n    translate([3.8, 14, 4]) cube([2.5, 1.2, 2.1]);\n    // N\n    translate([-2.5, 4, 4]) cube([1.2, 8, 2.1]);\n    translate([2.5, 4, 4]) cube([1.2, 8, 2.1]);\n    rotate([0, 0, 30]) translate([-2.5, 4, 4]) cube([1.2, 8, 2.1]);\n    // I\n    translate([-2.5, -1, 4]) cube([1.2, 8, 2.1]);\n    // K\n    translate([2.5, -1, 4]) cube([1.2, 4, 2.1]);\n    rotate([0, 0, 45]) translate([2.5, -1, 4]) cube([1.2, 4, 2.1]);\n    rotate([0, 0, -45]) translate([2.5, 3, 4]) cube([1.2, 4, 2.1]);\n    // A\n    translate([0, -6, 4]) {\n        rotate([0, 0, 30]) translate([-2.5, 0, 0]) cube([1.2, 8, 2.1]);\n        rotate([0, 0, -30]) translate([2.5, 0, 0]) cube([1.2, 8, 2.1]);\n        translate([0, 3, 0]) cube([5, 1.2, 2.1]);\n    }\n    \n    // Niello dots around perimeter\n    module dot_ring(d) {\n        for (a = [0:30:330]) {\n            translate([sin(a)*d, cos(a)*d, 4]) cylinder(h=2.1, d=1.5, $fn=8);\n        }\n    }\n    // Top arm\n    dot_ring(17);\n    // Bottom arm\n    dot_ring(17);\n    // Left arm\n    dot_ring(17);\n    // Right arm\n    dot_ring(17);\n}\n\n// Suspension loop, printable without support\ntranslate([0, 25.5, 7]) rotate([90, 0, 0]) difference() {\n    cylinder(h=4, d1=6, d2=4, $fn=20);\n    cylinder(h=5, d=2.5, $fn=20);\n}",
    "renders": true
  },
  {
    "historical_artifact": "cloisonne",
    "openscad_code": "// Cloisonné Enamel Bowl - Tang Dynasty Style (8th Century)\n// Dimensions: 80mm diameter x 35mm height\n\n// Parameters\nbowl_radius = 40;\nbowl_height = 35;\nwall_thickness = 2;\nbase_thickness = 3;\ncloison_thickness = 0.8;\nsegment_count = 8;\n\n// Base bowl shell\nmodule bowl_shell() {\n    difference() {\n        // Outer bowl\n        cylinder(h=bowl_height, r=bowl_radius, $fn=100);\n        \n        // Hollow interior\n        translate([0, 0, base_thickness])\n            cylinder(h=bowl_height, r=bowl_radius-wall_thickness, $fn=100);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -1])\n            cylinder(h=2, r=bowl_radius-5, $fn=100);\n    }\n}\n\n// Cloisonné wire dividers\nmodule cloison_wires() {\n    // Vertical dividers\n    for(i=[0:segment_count-1]) {\n        rotate([0, 0, i * 360/segment_count])\n            translate([bowl_radius-wall_thickness-0.5, 0, base_thickness])\n                cube([cloison_thickness, 1, bowl_height-base_thickness], center=true);\n    }\n    \n    // Horizontal rings\n    for(h=[0.3, 0.6, 0.9]) {\n        translate([0, 0, h * bowl_height])\n            difference() {\n                cylinder(h=cloison_thickness, r1=bowl_radius-wall_thickness, \n                        r2=bowl_radius-wall_thickness, $fn=100);\n                cylinder(h=cloison_thickness+0.2, r1=bowl_radius-wall_thickness-5, \n                        r2=bowl_radius-wall_thickness-5, $fn=100);\n            }\n    }\n}\n\n// Enamel cells with colors\nmodule enamel_cells() {\n    colors = [\"red\", \"blue\", \"green\", \"yellow\", \"cyan\", \"magenta\", \"orange\", \"purple\"];\n    \n    for(i=[0:segment_count-1]) {\n        angle = i * 360/segment_count;\n        color(colors[i % len(colors)])\n            rotate([0, 0, angle + 180/segment_count])\n                translate([bowl_radius-wall_thickness-2.5, 0, bowl_height/2])\n                    cube([4, 2, bowl_height-5], center=true);\n    }\n}\n\n// Decorative rim pattern\nmodule rim_pattern() {\n    translate([0, 0, bowl_height-2])\n        for(i=[0:20]) {\n            rotate([0, 0, i * 18])\n                translate([bowl_radius-2, 0, 0])\n                    cube([1.5, 0.5, 2], center=true);\n        }\n}\n\n// Lotus petal base decoration\nmodule lotus_base() {\n    petals = 12;\n    for(i=[0:petals-1]) {\n        rotate([0, 0, i * 360/petals])\n            translate([bowl_radius-8, 0, 0])\n                rotate([90, 0, 90])\n                    scale([0.3, 1, 0.8])\n                        cylinder(h=8, r1=3, r2=1, $fn=3);\n    }\n}\n\n// Central medallion\nmodule central_medallion() {\n    translate([0, 0, base_thickness+0.5])\n        difference() {\n            cylinder(h=1, r=8, $fn=50);\n            for(i=[0:5]) {\n                rotate([0, 0, i * 72])\n                    translate([3, 0, -0.1])\n                        cube([6, 1, 1.2], center=true);\n            }\n        }\n}\n\n// Assembly\ncolor(\"gold\") {\n    union() {\n        bowl_shell();\n        cloison_wires();\n    }\n}\n\nenamel_cells();\ncolor(\"gold\") rim_pattern();\ncolor(\"gold\") lotus_base();\ncolor(\"darkblue\") central_medallion();",
    "renders": true
  },
  {
    "historical_artifact": "plique",
    "openscad_code": "// Plique à jour (Tudor enamelled prayer book pendant) – 1540-1550 English style\n// Overall height ~60 mm, ready to print on its back\n\n$fn = 36;\nwall = 1.2;\n\nmodule hinge_bar(l=6, r=2){\n    color(\"DarkGoldenrod\")\n    cylinder(h=l, r=r, center=true);\n}\n\nmodule book_cover(ornate=true){\n    // outer cover plate\n    difference(){\n        color(\"Goldenrod\")\n        linear_extrude(height=wall)\n            offset(delta=wall)\n                square([28,22], center=true);\n        // recess for enamel\n        color(\"MidnightBlue\")\n        translate([0,0,-0.1])\n            linear_extrude(height=wall+0.2)\n                square([24,18], center=true);\n    }\n    // Tudor rose studs\n    if(ornate)\n    for(x=[-9,9], y=[-7,7]){\n        translate([x,y,wall/2])\n            color(\"Crimson\")\n            sphere(d=3.2, $fn=20);\n    }\n}\n\nmodule book_spine(){\n    color(\"Goldenrod\")\n    translate([-14-wall/2,0,wall/2])\n        cube([wall,22,6]);\n}\n\nmodule inscription(){\n    // raised Latin text band\n    translate([0,-2,wall+0.2])\n        color(\"Silver\")\n        linear_extrude(height=0.4)\n            text(\"IN HOC SIGNO\", size=2.5, halign=\"center\");\n}\n\nmodule chain_loop(){\n    rotate([90,0,0])\n        translate([0,10,14])\n            color(\"DarkGoldenrod\")\n            difference(){\n                cylinder(h=2, r=2.5);\n                cylinder(h=3, r=1.5);\n            }\n}\n\n// main assembly\nunion(){\n    // front cover\n    book_cover();\n    \n    // back cover (mirrored)\n    translate([0,0,6+wall])\n        mirror([0,0,1])\n            book_cover(ornate=false);\n    \n    // spine connecting both\n    book_spine();\n    \n    // hinge bars top and bottom\n    translate([0,0,wall/2]) hinge_bar();\n    translate([0,0,6+wall/2]) hinge_bar();\n    \n    // decorative details\n    inscription();\n    \n    // attachment loop for chain\n    chain_loop();\n}",
    "renders": true
  },
  {
    "historical_artifact": "guilloche",
    "openscad_code": "// Guilloche Pendant from Ancient Greece - 5th Century BCE\n// Realistic medium complexity model with proper 3D printing considerations\n\n$fn = 64;\n\n// Overall dimensions\nouter_diameter = 60;\ninner_diameter = 25;\nthickness = 4;\nloop_thickness = 3;\n\n// Main pendant body\nmodule pendant_body() {\n    difference() {\n        // Outer disk\n        cylinder(h = thickness, d = outer_diameter, center = true);\n        \n        // Inner hole\n        cylinder(h = thickness + 1, d = inner_diameter, center = true);\n    }\n}\n\n// Guilloche pattern element - wave motif\nmodule guilloche_wave(radius, height, angle) {\n    rotate([0, 0, angle])\n    translate([radius, 0, 0])\n    rotate_extrude(angle = 30, $fn = 32)\n    translate([2, 0, 0])\n    circle(d = 1.5);\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([(outer_diameter - 5) / 2, 0, thickness / 2])\n        color(\"gold\")\n        sphere(d = 2.5);\n    }\n}\n\n// Central rosette pattern\nmodule central_rosette() {\n    color(\"gold\")\n    for(i = [0:30:360]) {\n        rotate([0, 0, i])\n        translate([(inner_diameter + 10) / 2, 0, 0])\n        cylinder(h = thickness, d = 4, center = true);\n    }\n}\n\n// Greek key meander pattern\nmodule meander_pattern() {\n    color(\"gold\")\n    for(i = [0:45:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, thickness / 2])\n        linear_extrude(height = 1)\n        polygon(points = [\n            [18, -1], [22, -1], [22, 1], [18, 1], [18, 3], [20, 3], [20, 5], [18, 5],\n            [16, 5], [16, 3], [18, 3], [18, 1], [16, 1], [16, -1], [18, -1]\n        ]);\n    }\n}\n\n// Suspension loop for wearing\nmodule suspension_loop() {\n    color(\"gold\")\n    translate([0, outer_diameter / 2 + 1, 0])\n    rotate([90, 0, 0])\n    difference() {\n        torus(outer_diameter = 8, inner_diameter = 4, thickness = loop_thickness);\n        cube([20, 20, 20], center = true);\n    }\n}\n\n// Main torus module for suspension loop\nmodule torus(outer_diameter, inner_diameter, thickness) {\n    rotate_extrude($fn = 32)\n    translate([outer_diameter / 2, 0, 0])\n    circle(d = inner_diameter);\n}\n\n// Engraved inscription band\nmodule inscription_band() {\n    color(\"gold\")\n    difference() {\n        cylinder(h = 1.5, d = outer_diameter - 10, center = true);\n        \n        // Greek letters (simplified)\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([(outer_diameter - 20) / 2, 0, 0])\n            cube([1.5, 0.5, 2]);\n        }\n    }\n}\n\n// Main assembly\ncolor(\"goldenrod\")\nunion() {\n    // Main pendant\n    pendant_body();\n    \n    // Add layers for depth\n    translate([0, 0, thickness / 2 + 0.75])\n    color(\"gold\")\n    cylinder(h = 1.5, d = outer_diameter - 2, center = true);\n    \n    // Guilloche patterns on front\n    for(angle = [0:15:345]) {\n        color(\"gold\")\n        guilloche_wave((outer_diameter + inner_diameter) / 4, thickness, angle);\n    }\n    \n    // Border decoration\n    border_pattern();\n    \n    // Central rosette\n    central_rosette();\n    \n    // Meander pattern\n    meander_pattern();\n    \n    // Inscription\n    translate([0, 0, -thickness / 2 - 0.75])\n    inscription_band();\n    \n    // Suspension loop\n    suspension_loop();\n}",
    "renders": true
  },
  {
    "historical_artifact": "milgrain",
    "openscad_code": "$fa=0.5;\n$fs=1;\n\n// Milgrain ring - historical signet-style with beaded edge\n// Modeled after 14th century European ecclesiastical seal ring\n\n// Ring parameters\nring_outer = 25;\nring_inner = 18;\nring_height = 8;\nbead_diameter = 1.5;\nbead_count = 36;\n\n// Seal face parameters\nseal_diameter = 22;\nseal_thickness = 2;\nsymbol_depth = 1;\n\n// Color definitions\ngold_color = \"Gold\";\nbronze_color = \"Bronze\";\n\nmodule milgrain_beads() {\n    for(i = [0:bead_count-1]) {\n        rotate([0, 0, i * 360/bead_count])\n        translate([ring_outer - bead_diameter/2, 0, ring_height - bead_diameter/2])\n        sphere(d=bead_diameter, $fn=12);\n    }\n}\n\nmodule cross_symbol() {\n    // Central cross with flared ends\n    union() {\n        // Vertical bar\n        translate([0, 0, -symbol_depth/2])\n        cube([2.5, 12, symbol_depth], center=true);\n        \n        // Horizontal bar\n        translate([0, 0, -symbol_depth/2])\n        cube([12, 2.5, symbol_depth], center=true);\n        \n        // Decorative ends\n        translate([0, 6, -symbol_depth/2])\n        cylinder(h=symbol_depth, r1=3, r2=2, $fn=20);\n        \n        translate([0, -6, -symbol_depth/2])\n        cylinder(h=symbol_depth, r1=3, r2=2, $fn=20);\n        \n        translate([6, 0, -symbol_depth/2])\n        rotate([0, 0, 90])\n        cylinder(h=symbol_depth, r1=3, r2=2, $fn=20);\n        \n        translate([-6, 0, -symbol_depth/2])\n        rotate([0, 0, 90])\n        cylinder(h=symbol_depth, r1=3, r2=2, $fn=20);\n    }\n}\n\nmodule ring_band() {\n    color(gold_color) {\n        difference() {\n            // Main band\n            cylinder(h=ring_height, d=ring_outer*2, $fn=100);\n            \n            // Center hole\n            cylinder(h=ring_height+0.1, d=ring_inner*2, $fn=100);\n            \n            // Taper inner bottom for comfort\n            translate([0, 0, -0.1])\n            cylinder(h=ring_height/2, d1=ring_inner*2+2, d2=ring_inner*2, $fn=100);\n        }\n    }\n}\n\nmodule seal_face() {\n    color(bronze_color) {\n        // Raised seal platform\n        translate([0, 0, ring_height])\n        cylinder(h=seal_thickness, d=seal_diameter, $fn=64);\n        \n        // Engraved cross symbol\n        translate([0, 0, ring_height + seal_thickness])\n        difference() {\n            cylinder(h=seal_thickness, d=seal_diameter, $fn=64);\n            cross_symbol();\n        }\n    }\n}\n\nmodule decorative_bands() {\n    color(gold_color) {\n        // Upper decorative ridge\n        translate([0, 0, ring_height - 1])\n        cylinder(h=1.5, d=ring_outer*2 - 2, $fn=100);\n        \n        // Lower decorative ridge\n        translate([0, 0, 1])\n        cylinder(h=1.5, d=ring_outer*2 - 2, $fn=100);\n    }\n}\n\n// Assemble the ring\nunion() {\n    ring_band();\n    \n    // Add milgrain beads around top edge\n    color(gold_color) milgrain_beads();\n    \n    // Add seal face\n    seal_face();\n    \n    // Add decorative bands\n    decorative_bands();\n}\n\n// Print orientation marker (remove after printing)\n%translate([0, -ring_outer - 10, 0])\ncolor(\"Red\")\ncube([2, 20, 2]);",
    "renders": true
  },
  {
    "historical_artifact": "beading",
    "openscad_code": "// Ancient Egyptian Broadcollar Necklace (Wesekh)\n// Based on artifacts from New Kingdom period (1550-1077 BCE)\n// Features realistic construction with tubular and disc beads\n\n// Overall dimensions for 3D printing\ncollar_width = 90;\ncollar_height = 45;\nbead_diameter = 3.2;\nbead_height = 2.4;\nthread_thickness = 1.0;\n\n// Colors matching faience and gold\nfaience_blue = [0.2, 0.6, 0.9];\nfaience_green = [0.3, 0.7, 0.5];\ngold = [0.8, 0.7, 0.2];\n\nmodule tubular_bead(h, d, color_val) {\n    color(color_val)\n    cylinder(h=h, d=d, $fn=16);\n}\n\nmodule disc_bead(h, d, color_val) {\n    color(color_val)\n    cylinder(h=h, d=d, $fn=32);\n}\n\nmodule spacer_bead() {\n    color(gold)\n    difference() {\n        cylinder(h=bead_height*1.5, d=bead_diameter*1.8, $fn=6);\n        cylinder(h=bead_height*1.6, d=bead_diameter*0.8, $fn=16);\n    }\n}\n\nmodule bead_row(count, start_y, bead_type) {\n    row_width = count * bead_diameter * 1.1;\n    for(i = [0:count-1]) {\n        x_pos = (i - count/2 + 0.5) * bead_diameter * 1.1;\n        translate([x_pos, start_y, 0])\n            if(bead_type == \"tubular\")\n                tubular_bead(bead_height*1.2, bead_diameter*0.9, faience_blue);\n            else if(bead_type == \"disc\")\n                disc_bead(bead_height*0.6, bead_diameter*1.1, faience_green);\n    }\n}\n\nmodule terminal_piece() {\n    // Falcon-head terminals characteristic of wesekh collars\n    color(gold)\n    union() {\n        translate([0, -collar_height/2 - 8, 0])\n            scale([1, 1.5, 0.8])\n            sphere(d=8, $fn=32);\n        \n        // Falcon beak\n        translate([0, -collar_height/2 - 12, 2])\n            rotate([0, 30, 0])\n            scale([0.3, 2, 0.3])\n            cylinder(h=5, d1=2, d2=0.5, $fn=8);\n        \n        // Eye detail\n        translate([-1.5, -collar_height/2 - 7, 3])\n            color([0, 0, 0])\n            sphere(d=1, $fn=8);\n    }\n}\n\n// Main collar construction\nunion() {\n    // Left half\n    translate([-collar_width/4, 0, 0])\n    mirror([1, 0, 0])\n    union() {\n        // Row construction from top to bottom\n        bead_row(15, collar_height/2 - 4, \"tubular\");\n        bead_row(17, collar_height/2 - 8, \"disc\");\n        bead_row(19, collar_height/2 - 12, \"tubular\");\n        bead_row(21, collar_height/2 - 16, \"disc\");\n        bead_row(23, collar_height/2 - 20, \"tubular\");\n        bead_row(25, collar_height/2 - 24, \"disc\");\n        \n        // Spacer beads at intervals\n        for(i = [0:4]) {\n            translate([0, collar_height/2 - 6 - i*8, 0])\n                spacer_bead();\n        }\n        \n        // Terminal piece\n        translate([collar_width/2 - 5, 0, 0])\n            terminal_piece();\n    }\n    \n    // Right half (symmetrical)\n    translate([collar_width/4, 0, 0])\n    union() {\n        bead_row(15, collar_height/2 - 4, \"tubular\");\n        bead_row(17, collar_height/2 - 8, \"disc\");\n        bead_row(19, collar_height/2 - 12, \"tubular\");\n        bead_row(21, collar_height/2 - 16, \"disc\");\n        bead_row(23, collar_height/2 - 20, \"tubular\");\n        bead_row(25, collar_height/2 - 24, \"disc\");\n        \n        for(i = [0:4]) {\n            translate([0, collar_height/2 - 6 - i*8, 0])\n                spacer_bead();\n        }\n        \n        translate([-collar_width/2 + 5, 0, 0])\n            terminal_piece();\n    }\n    \n    // Central counterweight (menat)\n    translate([0, collar_height/2 + 5, -2])\n    color(gold)\n    union() {\n        // Main counterweight plate\n        scale([1.2, 1, 0.2])\n        sphere(d=12, $fn=64);\n        \n        // Suspension loop\n        translate([0, 6, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=3, d=6, $fn=32);\n                cylinder(h=4, d=3, $fn=32);\n            }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "braiding",
    "openscad_code": "// Medieval European tablet-woven braid fragment (13th–14th century)\n// A narrow band used as edging on garments, belts or ecclesiastical textiles\n// Based on finds from London and York\n\n$fa = 2;\n$fs = 0.5;\n\n// main module\nmodule tablet_braid(){\n    color(\"BurlyWood\")\n    union(){\n        // warp threads – 28 tablets × 4 holes each = 112 warp ends\n        for(i = [0:27]){                // 28 tablets across 50 mm\n            rotate([0,0,i*12.8])        // twist angle between tablets\n                tablet(i*1.8);          // 1.8 mm per tablet\n        }\n\n        // decorative weft border at one end (starting border)\n        translate([0,-2,0])\n            starting_border();\n\n        // weft passes visible as ridges\n        for(w = [-20:5:20]){\n            translate([0,w,0])\n                weft_ridge();\n        }\n    }\n}\n\n// one tablet with its four warp threads\nmodule tablet(pos_x){\n    // tablet disk (warp-beater)\n    translate([pos_x,0,0])\n    rotate([90,0,0])\n    cylinder(h=1.2, d=10, $fn=32);\n\n    // four warp threads per tablet\n    for(a=[0:90:270]){\n        rotate([0,0,a])\n        translate([pos_x,0,0])\n        warp_thread();\n    }\n}\n\n// single wool warp thread (S-spun, Z-plied)\nmodule warp_thread(){\n    color(\"SaddleBrown\")\n    rotate([0,90,0])\n    cylinder(h=50, d=1.2, center=true);\n}\n\n// weft ridge made by beaten weft thread\nmodule weft_ridge(){\n    color(\"Sienna\")\n    difference(){\n        cube([50,1.8,0.8], center=true);\n        // tiny gaps between ridges for printability\n        for(i=[-23:4:23]){\n            translate([i,0,0])\n            cube([1.5,2,1], center=true);\n        }\n    }\n}\n\n// decorative starting border – typical chevron pattern\nmodule starting_border(){\n    color(\"DarkGoldenrod\")\n    union(){\n        for(i=[-24:4:24]){\n            translate([i,0,0])\n            rotate([0,90,0])\n            cylinder(h=2.5, d=3.5, $fn=6);\n        }\n    }\n}\n\n// call the model\ntablet_braid();",
    "renders": true
  },
  {
    "historical_artifact": "weaving",
    "openscad_code": "// Anatolian tablet-weaving card\n// Typical bronze age weaving tool found across Anatolia and the Near-East (~2000 BCE)\n// Used to create decorative bands and belts through tablet weaving technique\n\n// overall dimensions for 3D printing (card ~60 mm diameter)\n$fa = 2;\n$fs = 0.5;\n\n// colors based on archaeological finds\ncolor([0.65, 0.40, 0.25])  // bronze-like alloy\ndifference() {\n    union() {\n        // central perforated card\n        linear_extrude(height = 3) {\n            difference() {\n                circle(d = 60);\n                circle(d = 8);          // central hole for warp threads\n            }\n        }\n        \n        // four corner holes for warp threads\n        for (a = [0:90:270]) {\n            rotate([0, 0, a])\n            translate([22, 0, 0])\n            cylinder(h = 3, d = 6, $fn = 16);\n        }\n        \n        // decorative raised rim on both faces\n        translate([0, 0, 3])\n        linear_extrude(height = 1)\n        offset(delta = -2)\n        circle(d = 60);\n        \n        translate([0, 0, -1])\n        linear_extrude(height = 1)\n        offset(delta = -2)\n        circle(d = 60);\n        \n        // radial decorative spokes (12-fold symmetry)\n        for (a = [0:30:359]) {\n            rotate([0, 0, a])\n            translate([12, 0, 0])\n            scale([1, 0.2, 1])\n            cylinder(h = 5, d = 12, $fn = 6);\n        }\n    }\n    \n    // remove holes from corner posts\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n        translate([22, 0, -1])\n        cylinder(h = 5, d = 4, $fn = 16);\n    }\n}\n\n// attached warp threads (linen color)\ncolor([0.92, 0.88, 0.78])  // undyed linen\nmodule warp_thread(h) {\n    cylinder(h = h, d = 1.6, $fn = 8);\n}\n\n// four warp threads through corner holes\nfor (a = [0:90:270]) {\n    rotate([0, 0, a])\n    translate([22, 0, 0])\n    warp_thread(60);\n}\n\n// central warp threads bundle\nfor (a = [0:45:315]) {\n    rotate([0, 0, a])\n    translate([3.5, 0, 0])\n    warp_thread(60);\n}",
    "renders": true
  },
  {
    "historical_artifact": "knotting",
    "openscad_code": "// Historical Celtic Knotting Cross Artifact (8th-9th century AD)\n// Realistic style with medium complexity - 3D printable model\n\n// Overall dimensions: 60mm x 60mm x 8mm\n\n// Base cross structure\nmodule cross_base() {\n    color(\"burlywood\")\n    union() {\n        // Vertical beam\n        translate([-4, -25, 0])\n            cube([8, 50, 6]);\n        \n        // Horizontal beam\n        translate([-25, -4, 0])\n            cube([50, 8, 6]);\n        \n        // Center boss\n        translate([-8, -8, 5])\n            cylinder(h=3, r=8, $fn=32);\n    }\n}\n\n// Celtic knot pattern - interlaced design\nmodule knot_pattern() {\n    color(\"goldenrod\")\n    for(i = [-1, 1]) {\n        // Left and right knots\n        translate([i*15, 0, 6.1]) {\n            rotate([0, 0, 45])\n                cube([3, 16, 1.5], center=true);\n            rotate([0, 0, -45])\n                cube([3, 16, 1.5], center=true);\n        }\n        \n        // Top and bottom knots\n        translate([0, i*15, 6.1]) {\n            rotate([0, 0, 45])\n                cube([16, 3, 1.5], center=true);\n            rotate([0, 0, -45])\n                cube([16, 3, 1.5], center=true);\n        }\n    }\n}\n\n// Decorative corner spirals\nmodule corner_spirals() {\n    color(\"darkgoldenrod\")\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*20, y*20, 6.1]) {\n                // Spiral base\n                cylinder(h=1.5, r=5, $fn=32);\n                \n                // Spiral arms\n                for(angle = [0:45:315]) {\n                    rotate([0, 0, angle])\n                        translate([2.5, 0, 0])\n                            cube([5, 1.5, 1.5]);\n                }\n            }\n        }\n    }\n}\n\n// Runic inscription ring\nmodule runic_inscription() {\n    color(\"saddlebrown\")\n    difference() {\n        // Outer ring\n        translate([0, 0, 7.5])\n            cylinder(h=1, r=10, $fn=64);\n        \n        // Inner ring (create ring shape)\n        translate([0, 0, 7.4])\n            cylinder(h=1.2, r=8, $fn=64);\n    }\n    \n    // Simplified rune marks (8 marks)\n    color(\"black\")\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n            translate([9, 0, 7.6])\n                cube([0.5, 2, 0.3]);\n    }\n}\n\n// Raised border edges\nmodule raised_edges() {\n    color(\"peru\")\n    difference() {\n        // Outer border\n        translate([0, 0, 0])\n            cube([56, 56, 1], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n            cube([52, 52, 1.2], center=true);\n    }\n}\n\n// Back mounting plate\nmodule mounting_plate() {\n    color(\"burlywood\")\n    difference() {\n        // Main plate\n        translate([0, 0, -2])\n            cube([50, 50, 2], center=true);\n        \n        // Mounting holes\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*20, y*20, -2.1])\n                    cylinder(h=2.2, r=2, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    mounting_plate();\n    \n    // Main cross\n    translate([0, 0, 1]) {\n        raised_edges();\n        cross_base();\n        knot_pattern();\n        corner_spirals();\n        runic_inscription();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "setting",
    "openscad_code": "// Egyptian Scarab Signet Ring Setting\n// Medium complexity realistic historical artifact setting\n// Based on New Kingdom period scarab seals (c. 1550-1070 BCE)\n\n$fn = 50;\n\n// Main parameters\nring_size = 18.5; // US ring size 8.5\nband_width = 5;\nband_thickness = 1.5;\nbezel_height = 8;\nbezel_width = 12;\nscarab_length = 15;\nscarab_width = 10;\nscarab_height = 6;\n\n// Color definitions\ngold_color = [0.83, 0.69, 0.22];\nstone_color = [0.2, 0.2, 0.15];\n\n// Ring band module\nmodule ring_band(outer_d, height, width) {\n    difference() {\n        // Outer cylinder\n        cylinder(h=height, d=outer_d, center=true);\n        \n        // Inner hole (size for US 8.5 ring)\n        translate([0, 0, -height/2-0.1])\n            cylinder(h=height+0.2, d=outer_d-(2*width), center=false);\n    }\n}\n\n// Decorative lotus pattern on band\nmodule lotus_pattern() {\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n            translate([ring_size/2 - band_width/2, 0, 0])\n                scale([0.8, 1, 1])\n                    cylinder(h=1, d=2.5, center=true);\n    }\n}\n\n// Scarab beetle body\nmodule scarab_body() {\n    color(stone_color) {\n        // Main body\n        scale([1, 0.7, 0.5])\n            sphere(d=scarab_length);\n        \n        // Head\n        translate([scarab_length/2 - 2, 0, -scarab_height/4])\n            sphere(d=4);\n        \n        // Wing cases\n        for(side=[-1, 1]) {\n            translate([0, side*scarab_width/3, -scarab_height/8])\n                scale([0.8, 0.3, 0.3])\n                    sphere(d=scarab_length);\n        }\n        \n        // Legs\n        for(i=[1:3]) {\n            for(side=[-1, 1]) {\n                translate([scarab_length/2 - i*3, side*scarab_width/2, -scarab_height/2])\n                    rotate([90, 0, 30*side])\n                        cylinder(h=3, d=1);\n            }\n        }\n    }\n}\n\n// Hieroglyph inscription on base\nmodule inscription_base() {\n    color(stone_color) {\n        // Base platform\n        translate([0, 0, -bezel_height/2 - 1])\n            cube([bezel_width+2, bezel_width+2, 2], center=true);\n        \n        // Raised cartouche outline\n        translate([0, 0, -bezel_height/2 - 0.5])\n            difference() {\n                cube([8, 4, 1], center=true);\n                cube([7, 3, 1.1], center=true);\n            }\n        \n        // Simplified hieroglyphs\n        for(i=[0:2]) {\n            translate([-2 + i*2, 0, -bezel_height/2 - 0.2])\n                cylinder(h=0.5, d=0.8);\n        }\n    }\n}\n\n// Main assembly\ncolor(gold_color) {\n    // Ring band\n    ring_band(ring_size, band_thickness, band_width);\n    \n    // Decorative band elements\n    translate([0, 0, band_thickness/2])\n        lotus_pattern();\n    \n    // Bezel mounting\n    translate([0, 0, band_thickness/2 + bezel_height/2])\n        cylinder(h=bezel_height, d=bezel_width+2, center=true);\n    \n    // Scarab setting\n    translate([0, 0, band_thickness/2 + bezel_height - scarab_height/2])\n        scarab_body();\n    \n    // Inscription base\n    inscription_base();\n}\n\n// Optional support sprues for 3D printing\ntranslate([ring_size/2 + 2, 0, 0])\n    cylinder(h=band_thickness, d=0.5);\ntranslate([-ring_size/2 - 2, 0, 0])\n    cylinder(h=band_thickness, d=0.5);",
    "renders": true
  },
  {
    "historical_artifact": "mounting",
    "openscad_code": "// Roman Wax Tablet Mounting - Medium Complexity Historical Artifact\n// A realistic mounting system for a Roman wax tablet (tabula cerata)\n\n// Main parameters\ntablet_width = 45;\ntablet_height = 65;\ntablet_thickness = 8;\nmounting_base_thickness = 5;\npeg_diameter = 4;\npeg_height = 12;\ndecorative_border_width = 3;\n\n// Colors for realistic appearance\ncolor_wood = [0.6, 0.4, 0.2];\ncolor_bronze = [0.7, 0.5, 0.1];\ncolor_wax = [0.8, 0.7, 0.3];\n\n// Main mounting base with rounded corners\nmodule mounting_base() {\n    difference() {\n        // Base platform\n        color(color_bronze)\n        cube([tablet_width + 20, tablet_height + 20, mounting_base_thickness], center=true);\n        \n        // Rounded corners using spheres\n        for(x = [-1, 1])\n        for(y = [-1, 1]) {\n            translate([x * (tablet_width + 20)/2, y * (tablet_height + 20)/2, 0])\n            sphere(r=5);\n        }\n        \n        // Central recess for tablet\n        translate([0, 0, -1])\n        cube([tablet_width + 2, tablet_height + 2, mounting_base_thickness + 2], center=true);\n    }\n}\n\n// Mounting pegs for tablet corners\nmodule mounting_pegs() {\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (tablet_width/2 - 5), y * (tablet_height/2 - 5), 0])\n        cylinder(h=peg_height, d=peg_diameter);\n    }\n}\n\n// Decorative Roman border pattern\nmodule roman_border() {\n    color(color_bronze)\n    translate([0, 0, mounting_base_thickness/2])\n    difference() {\n        // Outer border\n        cube([tablet_width + 16, tablet_height + 16, decorative_border_width], center=true);\n        \n        // Inner cutout\n        cube([tablet_width + 10, tablet_height + 10, decorative_border_width + 1], center=true);\n    }\n    \n    // Roman acanthus leaf motifs at corners\n    for(angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle])\n        translate([(tablet_width + 12)/2 - 2, (tablet_height + 12)/2 - 2, mounting_base_thickness/2 + 1])\n        scale([0.5, 0.5, 1])\n        cylinder(h=decorative_border_width, d1=5, d2=3);\n    }\n}\n\n// Wax tablet representation\nmodule wax_tablet() {\n    color(color_wood)\n    translate([0, 0, mounting_base_thickness + peg_height - 1])\n    difference() {\n        // Wooden backing\n        cube([tablet_width, tablet_height, tablet_thickness], center=true);\n        \n        // Wax recess\n        translate([0, 0, -tablet_thickness/2 + 1])\n        color(color_wax)\n        cube([tablet_width - 4, tablet_height - 4, 2], center=true);\n    }\n    \n    // Hinge holes on left side\n    rotate([0, 0, 90])\n    for(y = [-tablet_height/3, 0, tablet_height/3]) {\n        translate([y, tablet_width/2 + 2, mounting_base_thickness + peg_height])\n        cylinder(h=3, d=2);\n    }\n}\n\n// Latin inscription panel\nmodule inscription_panel() {\n    color(color_bronze)\n    translate([0, -(tablet_height + 20)/2 - 3, 0])\n    cube([tablet_width - 10, 6, mounting_base_thickness], center=true);\n    \n    // Stylized Latin text grooves\n    for(i = [-1, 0, 1]) {\n        translate([i * 8, -(tablet_height + 20)/2 - 3, 0])\n        cube([2, 4, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base mounting\n    mounting_base();\n    \n    // Decorative elements\n    roman_border();\n    \n    // Mounting hardware\n    mounting_pegs();\n    \n    // Artifact representation\n    wax_tablet();\n    \n    // Historical inscription\n    inscription_panel();\n}",
    "renders": true
  },
  {
    "historical_artifact": "finding",
    "openscad_code": "// Roman oil lamp (lucerna) – 1st century CE style\n// 3D printable, wall thickness 2 mm, max dimension ≈ 85 mm\n\n$fn = 64;  // smoother curves for printing\n\n// overall color: terracotta\ncolor(\"BurlyWood\") difference() {\n    // main body shell\n    body();\n    // fill hole on top\n    translate([0, -5, 9.5]) rotate([90, 0, 0]) cylinder(h = 5, d = 8, $fn = 32);\n    // wick hole on nozzle\n    translate([0, 30, 3]) rotate([90, 0, 0]) cylinder(h = 5, d = 4, $fn = 16);\n}\n\n// nozzle and handle in same color\ncolor(\"BurlyWood\") union() {\n    nozzle();\n    handle();\n}\n\n// decorative discus in darker tone\ncolor(\"Sienna\") discus();\n\n//========== modules ==========\n\nmodule body() {\n    difference() {\n        union() {\n            // main oval bowl\n            scale([1, 1.3, 0.4]) sphere(d = 60);\n            translate([0, 0, 3]) cylinder(h = 8, d = 60, $fn = 64);\n            // round base\n            translate([0, 0, -2]) cylinder(h = 2, d = 40);\n        }\n        // hollow interior\n        translate([0, 0, 1]) scale([0.8, 1.1, 0.6]) sphere(d = 60);\n    }\n}\n\nmodule nozzle() {\n    // elongated spout\n    hull() {\n        translate([0, 22, 3]) sphere(d = 18);\n        translate([0, 34, 3]) sphere(d = 10);\n    }\n}\n\nmodule handle() {\n    // ring handle at back\n    translate([0, -28, 7]) rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 6, d = 18);\n        translate([0, 0, -1]) cylinder(h = 8, d = 10);\n    }\n}\n\nmodule discus() {\n    // central medallion with relief pattern\n    difference() {\n        translate([0, -5, 9.5]) cylinder(h = 1.5, d = 25);\n        // star pattern (six rays)\n        for(a = [0:60:359]) {\n            rotate([0, 0, a])\n            translate([5, 0, 0.5]) cube([10, 2, 2], center = true);\n        }\n        // small central vent hole\n        translate([0, 0, 1]) cylinder(h = 2, d = 2);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "clasp",
    "openscad_code": "// Historical Roman Fibula Clasp (Brooch)\n// Based on 1st-2nd century AD Roman fibula design\n// Overall size approximately 65mm x 40mm x 15mm\n\n$fn = 64;\n\nmodule fibula_body() {\n    // Main bow-shaped body with tapered ends\n    color(\"burlywood\") \n    difference() {\n        // Central bow structure\n        hull() {\n            translate([-25, 0, 0]) cylinder(h=8, r=12);\n            translate([25, 0, 0]) cylinder(h=6, r=8);\n        }\n        \n        // Central groove for decoration\n        translate([0, 0, 4]) cube([50, 4, 8], center=true);\n        \n        // Pin hinge holes\n        translate([-28, 12, 0]) rotate([0,90,0]) cylinder(h=20, r=2);\n        translate([28, -12, 0]) rotate([0,90,0]) cylinder(h=20, r=2);\n    }\n}\n\nmodule decorative_plate() {\n    // Ornate decorative plate on bow\n    color(\"goldenrod\") \n    translate([0, 0, 8]) {\n        difference() {\n            // Main plate\n            cube([35, 12, 2], center=true);\n            \n            // Circular motifs\n            for(i=[-12, 0, 12]) {\n                translate([i, 0, 1]) cylinder(h=3, r=4);\n            }\n            \n            // Border recess\n            translate([0, 0, 0.5]) cube([33, 10, 3], center=true);\n        }\n    }\n}\n\nmodule catch_plate() {\n    // Rear catch plate for securing pin\n    color(\"burlywood\") \n    translate([30, -12, -3]) {\n        union() {\n            // Main catch structure\n            cube([15, 8, 12]);\n            \n            // Catch slot\n            difference() {\n                cube([15, 8, 12]);\n                translate([7.5, 4, 6]) cube([3, 4, 8], center=true);\n            }\n        }\n    }\n}\n\nmodule pin_assembly() {\n    // Spring pin mechanism\n    color(\"silver\") \n    translate([-30, 12, 0]) {\n        rotate([0,90,0]) {\n            // Pin shaft\n            cylinder(h=65, r=1.5);\n            \n            // Pin point\n            translate([65, 0, 0]) {\n                rotate([0,90,0]) cylinder(h=8, r1=1.5, r2=0);\n            }\n        }\n        \n        // Spring coil (simplified as torus)\n        rotate([90,0,0]) {\n            translate([0, 0, 2]) rotate_extrude(angle=270) \n                translate([3, 0, 0]) circle(r=1);\n        }\n    }\n}\n\nmodule inscription_band() {\n    // Decorative inscription band\n    color(\"goldenrod\") \n    translate([0, 0, 5]) {\n        difference() {\n            cube([45, 6, 1], center=true);\n            \n            // Simulated Latin inscription grooves\n            for(i=[-20:5:20]) {\n                translate([i, 0, 0.5]) cube([0.5, 4, 2], center=true);\n            }\n        }\n    }\n}\n\nmodule rivets() {\n    // Decorative rivets along edges\n    color(\"silver\") \n    for(pos=[[-20, 10, 8], [20, 10, 8], [-20, -10, 8], [20, -10, 8]]) {\n        translate(pos) sphere(r=1.5);\n    }\n}\n\n// Assemble the fibula\nunion() {\n    fibula_body();\n    decorative_plate();\n    catch_plate();\n    pin_assembly();\n    inscription_band();\n    rivets();\n}",
    "renders": true
  },
  {
    "historical_artifact": "catch",
    "openscad_code": "// Medieval Iron Padlock Catch (14th-15th Century)\n// Used for securing chests and doors in castles\n\n$fn = 32;\n\n// Main colors\niron_color = [0.35, 0.35, 0.35];\nrust_color = [0.6, 0.3, 0.2];\nbronze_color = [0.8, 0.5, 0.2];\n\n// Overall dimensions\npadlock_width = 45;\npadlock_height = 35;\npadlock_depth = 15;\n\n// Main padlock body\nmodule padlock_body() {\n    difference() {\n        // Main body\n        color(iron_color) {\n            difference() {\n                cube([padlock_width, padlock_depth, padlock_height], center = true);\n                \n                // Keyhole slot\n                translate([0, 0, 5])\n                    cube([8, padlock_depth + 2, 12], center = true);\n                \n                // Top shackle hole\n                translate([0, 0, padlock_height/2 - 3])\n                    cylinder(h = 10, r = 6, center = true);\n            }\n        }\n        \n        // Decorative grooves\n        for(i = [-1, 1]) {\n            translate([i * 15, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = padlock_width, r = 2, center = true);\n        }\n    }\n}\n\n// Shackle (U-shaped bar)\nmodule shackle() {\n    color(iron_color) {\n        translate([0, 0, padlock_height/2 + 8]) {\n            // Left arm\n            translate([-15, 0, 0])\n                cylinder(h = 16, r = 3, center = true);\n            \n            // Right arm\n            translate([15, 0, 0])\n                cylinder(h = 16, r = 3, center = true);\n            \n            // Curved top\n            hull() {\n                translate([-15, 0, 8])\n                    sphere(r = 3);\n                translate([15, 0, 8])\n                    sphere(r = 3);\n            }\n        }\n    }\n}\n\n// Decorative rivets\nmodule rivets() {\n    for(x = [-20, -10, 0, 10, 20]) {\n        for(y = [-5, 5]) {\n            translate([x, y, padlock_height/2 - 2])\n                color(bronze_color)\n                    cylinder(h = 2, r = 1.5, center = true);\n        }\n    }\n}\n\n// Rust patches for realism\nmodule rust_patches() {\n    // Bottom rust\n    translate([0, 0, -padlock_height/2 - 1])\n        color(rust_color)\n            cube([padlock_width * 0.8, padlock_depth * 0.6, 0.5], center = true);\n    \n    // Side rust spots\n    for(i = [1, -1]) {\n        translate([i * (padlock_width/2 + 0.5), 0, -5])\n            rotate([0, 90, 0])\n                color(rust_color)\n                    cylinder(h = 10, r = 3, center = true);\n    }\n}\n\n// Keyhole plate detail\nmodule keyhole_plate() {\n    translate([0, padlock_depth/2 + 0.5, 5])\n        color(bronze_color) {\n            cube([12, 1, 8], center = true);\n            translate([0, 0.6, 0])\n                cube([6, 0.5, 4], center = true);\n        }\n}\n\n// Medieval maker's mark\nmodule makers_mark() {\n    translate([15, -padlock_depth/2 - 0.5, 0])\n        rotate([0, 90, 0])\n            color(rust_color) {\n                // Cross pattée\n                for(i = [-2, 2]) {\n                    translate([i, 0, 0])\n                        cube([1, 1, 4], center = true);\n                }\n                for(i = [-2, 2]) {\n                    translate([0, 0, i])\n                        cube([5, 1, 1], center = true);\n                }\n            }\n}\n\n// Assemble the complete padlock\nunion() {\n    padlock_body();\n    shackle();\n    rivets();\n    rust_patches();\n    keyhole_plate();\n    makers_mark();\n}",
    "renders": true
  },
  {
    "historical_artifact": "hinge",
    "openscad_code": "// Bronze Age Hinge - Mediterranean Style (800 BCE)\n// Decorative door hinge with stylized bull motifs\n\n// Overall dimensions\nhinge_width = 80;\nhinge_height = 60;\nhinge_depth = 15;\nleaf_thickness = 4;\npin_diameter = 5;\n\n// Colors\nbronze_color = [0.72, 0.52, 0.29];\npatina_color = [0.2, 0.35, 0.2];\n\n// Main leaf with decorative elements\nmodule hinge_leaf() {\n    color(bronze_color) {\n        // Main leaf body\n        difference() {\n            cube([hinge_width/2-5, hinge_height, leaf_thickness], center=true);\n            // Decorative cutouts\n            translate([0, 10, leaf_thickness/2+0.1]) \n                cube([hinge_width/2-15, 15, leaf_thickness+0.2], center=true);\n            translate([0, -15, leaf_thickness/2+0.1]) \n                cube([hinge_width/2-15, 12, leaf_thickness+0.2], center=true);\n        }\n        \n        // Decorative border ridges\n        for(y = [-20, 0, 20]) {\n            translate([0, y, leaf_thickness/2+0.5])\n                cube([hinge_width/2-12, 3, 1], center=true);\n        }\n    }\n}\n\n// Bull head terminal (historical motif)\nmodule bull_terminal() {\n    color(bronze_color) {\n        // Bull head base\n        union() {\n            translate([0, 0, 0])\n                sphere(d=12, $fn=16);\n            \n            // Horns\n            for(angle = [-30, 30]) {\n                rotate([0, 0, angle])\n                    translate([6, 0, 2])\n                        rotate([0, 90, 0])\n                            cylinder(h=8, d1=2, d2=0.5, $fn=8);\n            }\n            \n            // Snout\n            translate([0, -8, 0])\n                rotate([30, 0, 0])\n                    sphere(d=6, $fn=12);\n        }\n        \n        // Patina effect\n        color(patina_color) {\n            translate([0, 0, 0.5])\n                sphere(d=11.5, $fn=16);\n        }\n    }\n}\n\n// Hinge knuckles\nmodule knuckles() {\n    color(bronze_color) {\n        for(i = [-1, 1]) {\n            translate([i * (hinge_width/4 - 5), 0, 0]) {\n                cylinder(h=leaf_thickness*2+2, d=8, center=true, $fn=32);\n                \n                // Decorative ring pattern\n                for(j = [-2, 0, 2]) {\n                    translate([0, 0, j])\n                        cylinder(h=0.5, d=7.5, center=true, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Mounting plates with rivets\nmodule mounting_plates() {\n    color(bronze_color) {\n        // Mounting plates\n        for(x = [-1, 1]) {\n            translate([x * (hinge_width/4 - 15), hinge_height/2 - 10, 0])\n                cube([20, 8, leaf_thickness+2], center=true);\n        }\n        \n        // Decorative rivets\n        for(x = [-1, 1])\n        for(y = [-1, 1]) {\n            translate([x * 15, y * 20, leaf_thickness/2+1])\n                sphere(d=3, $fn=12);\n        }\n    }\n}\n\n// Assembly\n// Left leaf\ntranslate([-hinge_width/4, 0, 0]) {\n    rotate([0, 0, 0]) {\n        hinge_leaf();\n        translate([hinge_width/4 - 5, hinge_height/2 - 15, leaf_thickness/2+6])\n            bull_terminal();\n    }\n    mounting_plates();\n}\n\n// Right leaf\ntranslate([hinge_width/4, 0, 0]) {\n    rotate([0, 0, 180]) {\n        hinge_leaf();\n        translate([hinge_width/4 - 5, hinge_height/2 - 15, leaf_thickness/2+6])\n            bull_terminal();\n    }\n    mounting_plates();\n}\n\n// Hinge pin\ncolor([0.6, 0.4, 0.2]) {\n    translate([0, 0, 0])\n        cylinder(h=leaf_thickness*2+4, d=pin_diameter, center=true, $fn=32);\n}\n\n// Weathering and patina effects\ncolor(patina_color) {\n    // Random patina spots\n    for(i = [1:20]) {\n        translate([\n            (rand(i*123) - 0.5) * hinge_width/2,\n            (rand(i*456) - 0.5) * hinge_height/2,\n            leaf_thickness/2 + 0.2\n        ])\n            sphere(d=1 + rand(i*789) * 3, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "pin",
    "openscad_code": "// Viking cloak pin (fibula) - 9th century style\n// Dimensions: 70mm long, 25mm at widest point\n\n$fn = 32;\n\n// Main colors\ncolor(\"goldenrod\") {\n    // Pin body (main bow)\n    difference() {\n        // Basic bow shape\n        translate([0, 0, 5]) {\n            scale([1, 0.3, 0.15]) {\n                sphere(d = 60);\n            }\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 5]) {\n            scale([1, 0.25, 0.1]) {\n                sphere(d = 50);\n            }\n        }\n    }\n    \n    // Terminal knobs\n    translate([-30, 0, 5]) {\n        sphere(d = 8);\n    }\n    \n    translate([30, 0, 5]) {\n        sphere(d = 8);\n    }\n}\n\n// Coiled spring mechanism\ncolor(\"darkgoldenrod\") {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    rotate([0, i * 15, 0]) {\n                        translate([0, 0, -i * 2]) {\n                            cylinder(h = 3, d1 = 12, d2 = 10);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Catch plate\ncolor(\"goldenrod\") {\n    translate([25, -8, 0]) {\n        cube([12, 16, 3]);\n    }\n}\n\n// Decorative knotwork patterns\ncolor(\"darkgoldenrod\") {\n    // Left side knotwork\n    for (i = [-2, 0, 2]) {\n        translate([-15, i * 4, 11]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 2, d = 3);\n            }\n        }\n    }\n    \n    // Right side knotwork\n    for (i = [-2, 0, 2]) {\n        translate([15, i * 4, 11]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 2, d = 3);\n            }\n        }\n    }\n}\n\n// Central boss decoration\ncolor(\"goldenrod\") {\n    translate([0, 0, 12]) {\n        sphere(d = 10);\n    }\n    \n    translate([0, 0, 15]) {\n        sphere(d = 6);\n    }\n}\n\n// Pin spike\ncolor(\"silver\") {\n    translate([-35, 0, 2]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 40, d = 3);\n        }\n    }\n}\n\n// Runic inscription band\ncolor(\"darkgoldenrod\") {\n    translate([0, 0, 8]) {\n        difference() {\n            cylinder(h = 2, d = 35);\n            \n            // Runic pattern cuts\n            for (i = [0:5]) {\n                rotate([0, 0, i * 30 + 15]) {\n                    translate([0, 12, -1]) {\n                        cube([2, 8, 4]);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "post",
    "openscad_code": "// Ancient Roman Milestone Post (Milliarium Aureus replica)\n// Designed for 3D printing at 1:20 scale\n// Total height: 80mm, Base diameter: 30mm\n\n// Main colors\nbase_color = [0.8, 0.7, 0.5];   // Travertine stone\ntext_color = [0.4, 0.3, 0.2];   // Darkened inscription\ncap_color = [0.6, 0.5, 0.4];    // Slightly darker cap\n\n// Base cylinder with decorative molding\nmodule milestone_base() {\n    color(base_color)\n    union() {\n        // Main base cylinder\n        cylinder(h=20, d=30, $fn=64);\n        \n        // Decorative molding ring\n        translate([0, 0, 20])\n        cylinder(h=3, d1=30, d2=28, $fn=64);\n    }\n}\n\n// Main post shaft with slight taper\nmodule post_shaft() {\n    color(base_color)\n    difference() {\n        // Tapered shaft\n        cylinder(h=50, d1=26, d2=22, $fn=32);\n        \n        // Small drainage hole (for 3D printing)\n        translate([0, 0, -1])\n        cylinder(h=52, d=3, $fn=16);\n    }\n}\n\n// Roman numeral inscription module\nmodule roman_numerals() {\n    color(text_color)\n    translate([0, -11, 30])\n    rotate([0, 0, 0])\n    linear_extrude(1.5)\n    text(\"XVIII\", size=4, font=\"Times New Roman:style=Bold\", halign=\"center\");\n    \n    translate([0, -11, 35])\n    rotate([0, 0, 0])\n    linear_extrude(1.5)\n    text(\"M.P.\", size=3, font=\"Times New Roman:style=Bold\", halign=\"center\");\n}\n\n// Decorative top cap with rounded edge\nmodule milestone_cap() {\n    color(cap_color)\n    union() {\n        // Cylindrical cap\n        translate([0, 0, 50])\n        cylinder(h=8, d=26, $fn=32);\n        \n        // Rounded top\n        translate([0, 0, 58])\n        sphere(d=26, $fn=32);\n        \n        // Small sphere on top (finial)\n        translate([0, 0, 66])\n        sphere(d=6, $fn=16);\n    }\n}\n\n// Weathering grooves for realistic texture\nmodule weathering_grooves() {\n    color([0.5, 0.4, 0.3])\n    for(i = [1:6]) {\n        rotate([0, 0, i * 60])\n        translate([8, 0, 15])\n        scale([1, 0.1, 1])\n        cylinder(h=30, d=2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    milestone_base();\n    \n    translate([0, 0, 23])\n    post_shaft();\n    \n    translate([0, 0, 0])\n    milestone_cap();\n    \n    roman_numerals();\n    \n    // Add weathering on front and back\n    weathering_grooves();\n    rotate([0, 0, 180])\n    weathering_grooves();\n}",
    "renders": true
  },
  {
    "historical_artifact": "hook",
    "openscad_code": "// Historical Bronze Hook - Viking Age Fish Hook\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main parameters\nhook_length = 70;\nhook_width = 35;\nhook_thickness = 4;\n\n// Colors\nbronze = \"#B87333\";\ndark_bronze = \"#8B5A2B\";\n\n// Main hook body\nmodule hook_body() {\n    color(bronze) {\n        // Create curved hook shape\n        rotate([0, 90, 0]) {\n            difference() {\n                // Main curved cylinder\n                rotate_extrude(angle = 180, $fn = 100) {\n                    translate([hook_width/2, 0, 0]) {\n                        circle(hook_thickness);\n                    }\n                }\n                \n                // Taper the end\n                translate([0, 0, -hook_thickness/2]) {\n                    cube([hook_width*1.5, hook_thickness*3, hook_thickness], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Barbed point\nmodule barb() {\n    color(dark_bronze) {\n        translate([hook_width/2, 0, hook_thickness/2]) {\n            rotate([0, 90, 0]) {\n                // Main barb\n                translate([0, 0, 0]) {\n                    rotate([0, 0, 45]) {\n                        cube([hook_thickness*2, hook_thickness/2, hook_thickness/2]);\n                    }\n                }\n                \n                // Secondary barb\n                translate([0, 0, -hook_thickness]) {\n                    rotate([0, 0, 30]) {\n                        cube([hook_thickness*1.5, hook_thickness/2, hook_thickness/2]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eyelet for attaching line\nmodule eyelet() {\n    color(bronze) {\n        translate([-hook_width/2, 0, 0]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    // Outer ring\n                    cylinder(h = hook_thickness*2, r = hook_thickness*1.5, center = true);\n                    // Inner hole\n                    cylinder(h = hook_thickness*2.5, r = hook_thickness/2, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Decorative Viking knot pattern\nmodule decorative_pattern() {\n    color(dark_bronze) {\n        for(i = [0:30:150]) {\n            rotate([0, 0, i]) {\n                translate([hook_width/4, 0, hook_thickness/2]) {\n                    scale([0.3, 0.3, 0.3]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h = hook_thickness/2, r1 = hook_thickness/4, r2 = hook_thickness/8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Runic inscription\nmodule runic_inscription() {\n    color(dark_bronze) {\n        translate([hook_width/6, -hook_thickness/4, hook_thickness/2]) {\n            // Simplified rune symbols\n            for(i = [0:1:4]) {\n                translate([i*hook_thickness/2, 0, 0]) {\n                    cube([hook_thickness/8, hook_thickness/4, hook_thickness/8]);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    hook_body();\n    barb();\n    eyelet();\n    \n    // Decorative elements\n    decorative_pattern();\n    runic_inscription();\n    \n    // Reinforcement ring\n    color(dark_bronze) {\n        translate([-hook_width/2 + hook_thickness, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = hook_thickness/2, r = hook_thickness*1.8, center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "lever",
    "openscad_code": "// Historical Roman steelyard balance lever artifact\n// Based on archaeological finds from Pompeii, 1st century CE\n// Total length approximately 85mm for 3D printing\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main bronze lever arm with characteristic taper\nmodule lever_arm() {\n    color(\"bronze\")\n    difference() {\n        // Main tapered beam with octagonal cross-section\n        hull() {\n            translate([0, 0, -1.5]) cube([80, 4, 3], center = true);\n            translate([0, 0, 1.5]) cube([80, 3, 3], center = true);\n        }\n        \n        // Central suspension hole\n        translate([-35, 0, 0]) rotate([0, 90, 0]) \n            cylinder(h = 5, r = 1.5, center = true);\n        \n        // Weight calibration notches\n        for(i = [1:8]) {\n            translate([-40 + i*8, 0, -2]) cube([0.5, 3.5, 1]);\n        }\n        \n        // Decorative groove along top\n        translate([0, 0, 1.6]) cube([78, 1.8, 0.3], center = true);\n    }\n}\n\n// Suspension hook assembly\nmodule suspension_hook() {\n    color(\"bronze\")\n    union() {\n        // Hook base plate\n        translate([-35, 0, 0]) \n            cube([6, 8, 2], center = true);\n        \n        // Hook curve\n        translate([-35, 4.5, 0]) rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 5, r = 2);\n                translate([0, 0, -1]) cylinder(h = 7, r = 1.2);\n            }\n    }\n}\n\n// Counterweight pan attachment\nmodule pan_hook() {\n    color(\"bronze\")\n    union() {\n        // Attachment loop\n        translate([35, 0, -4]) rotate([0, 90, 0])\n            cylinder(h = 3, r = 1.5);\n        \n        // Decorative finial\n        translate([35, 0, -7]) sphere(r = 2);\n        \n        // Reinforcement struts\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle]) \n                translate([35, 0, -5]) cube([0.8, 0.8, 2]);\n        }\n    }\n}\n\n// Scale markings (Roman numerals)\nmodule scale_markings() {\n    color(\"darkgreen\")\n    for(i = [0:7]) {\n        translate([-36.5 + i*8, 1.6, 1.8]) \n            linear_extrude(height = 0.2) \n                text(str(i+1), size = 1.5, halign = \"center\");\n    }\n}\n\n// Decorative rosettes at ends\nmodule end_rosette(position) {\n    color(\"bronze\")\n    translate([position, 0, 0]) {\n        // Rosette base\n        cylinder(h = 1, r = 3);\n        \n        // Petal details\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n                translate([1.5, 0, 0.5]) \n                    scale([1, 0.4, 1]) sphere(r = 1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    lever_arm();\n    suspension_hook();\n    pan_hook();\n    \n    // Decorative elements\n    scale_markings();\n    end_rosette(-40);\n    end_rosette(40);\n    \n    // Weathering/patina effect\n    color([0.2, 0.4, 0.2, 0.3])\n    translate([0, 0, -1.6]) \n        cube([82, 4.2, 0.2], center = true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "spring",
    "openscad_code": "// Bronze Age spring fibula (safety-pin style brooch)\n// Based on 8th-7th century BCE examples from Central Europe\n\n$fn = 64;\n\n// Main colors\nbronze = [150/255, 100/255, 50/255];\npatina = [80/255, 120/255, 90/255];\n\n// Overall dimensions\ntotal_length = 70;\nbow_width = 25;\ncoil_diameter = 12;\n\nmodule fibula() {\n    color(bronze) {\n        // Main bow with slight curve\n        translate([0, 0, -5])\n            rotate([0, -15, 0])\n            union() {\n                // Bow body - elongated oval shape\n                hull() {\n                    translate([-total_length/2 + 5, 0, 0])\n                        sphere(d = bow_width - 5);\n                    translate([total_length/2 - 5, 0, 0])\n                        sphere(d = bow_width - 5);\n                }\n                \n                // Ornamental ridge along bow\n                translate([-total_length/2 + 10, 0, -2])\n                    rotate([0, 0, 30])\n                    cube([total_length - 20, 2, 4]);\n            }\n        \n        // Catch plate at end\n        translate([total_length/2 - 2, 0, -5])\n            rotate([0, 0, -15])\n            difference() {\n                // Main catch plate\n                cube([8, bow_width/2, 2]);\n                \n                // Slot for pin\n                translate([4, -bow_width/6, -1])\n                    cube([2, bow_width/3, 4]);\n            }\n        \n        // Spring coil assembly\n        translate([-total_length/2 + 3, 0, 0])\n            rotate([90, 0, 0])\n            union() {\n                // Main coil (3 turns)\n                for(i = [0:2]) {\n                    translate([0, 0, i * coil_diameter/3])\n                        rotate([0, 0, i * 120])\n                        cylinder(h = 2, d1 = coil_diameter, d2 = coil_diameter - 0.5);\n                }\n                \n                // Coil connecting bar\n                translate([0, -coil_diameter/2, coil_diameter/2])\n                    rotate([0, 90, 0])\n                    cylinder(h = coil_diameter, d = 3);\n            }\n        \n        // Pin arm\n        translate([-total_length/2 + 3, -coil_diameter, coil_diameter/2])\n            rotate([0, -90, 0])\n            union() {\n                // Pin shaft\n                cylinder(h = total_length - 5, d = 2);\n                \n                // Pin point\n                translate([0, 0, total_length - 5])\n                    cylinder(h = 5, d1 = 2, d2 = 0.5);\n            }\n        \n        // Decorative knobs\n        for(pos = [-20, -5, 10]) {\n            translate([pos, 0, -8])\n                sphere(d = 4);\n        }\n        \n        // Spiral decoration on bow\n        for(i = [0:5]) {\n            rotate([0, 0, i * 30])\n            translate([i * 4 - 15, 0, -6])\n                rotate([90, 0, 0])\n                cylinder(h = 3, d1 = 2, d2 = 1);\n        }\n    }\n    \n    // Patina effects\n    color(patina) {\n        // Light patina on raised areas\n        translate([0, 0, -6])\n            scale([1.02, 1.02, 1.02])\n            sphere(d = bow_width - 2);\n    }\n}\n\nfibula();",
    "renders": true
  },
  {
    "historical_artifact": "toggle",
    "openscad_code": "// Toggle historical artifact - Viking era cloak toggle (brooch)\n// Based on 10th century Hiberno-Norse finds from Ireland\n\n$fn = 100;\n\n// Main dimensions\ntoggle_length = 80;\ntoggle_width = 25;\ntoggle_thickness = 8;\nring_diameter = 35;\nring_thickness = 4;\n\n// Colors\nbronze_color = [150/255, 100/255, 50/255];\ndark_bronze = [120/255, 80/255, 40/255];\n\n// Main toggle body\nmodule toggle_body() {\n    color(bronze_color)\n    difference() {\n        // Main bar shape\n        union() {\n            // Central bar\n            translate([0, 0, toggle_thickness/2])\n                cube([toggle_length, toggle_width, toggle_thickness], center=true);\n            \n            // Tapered ends\n            translate([toggle_length/2 - 12.5, 0, toggle_thickness/2])\n                scale([1, 0.6, 1])\n                    cylinder(h=toggle_thickness, r1=12.5, r2=8);\n            \n            translate([-toggle_length/2 + 12.5, 0, toggle_thickness/2])\n                scale([1, 0.6, 1])\n                    cylinder(h=toggle_thickness, r1=12.5, r2=8);\n        }\n        \n        // Attachment hole on one end\n        translate([toggle_length/2 - 25, 0, toggle_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=toggle_width + 2, r=3, center=true);\n        \n        // Decorative perforations\n        for(i = [-1, 0, 1]) {\n            translate([i * 20, 0, toggle_thickness/2])\n                cylinder(h=toggle_thickness + 1, r=4);\n        }\n    }\n}\n\n// Decorative knotwork pattern\nmodule knotwork_pattern() {\n    color(dark_bronze)\n    for(i = [-30, -10, 10, 30]) {\n        translate([i, toggle_width/2 - 2, toggle_thickness - 1])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, r1=2, r2=1);\n        translate([i, -toggle_width/2 + 2, toggle_thickness - 1])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, r1=2, r2=1);\n    }\n}\n\n// Ring attachment\nmodule toggle_ring() {\n    color(bronze_color)\n    rotate([90, 0, 0])\n    translate([toggle_length/2 - 25, 0, 0])\n    difference() {\n        // Main ring\n        cylinder(h=ring_thickness, r=ring_diameter/2, center=true);\n        // Inner hole\n        cylinder(h=ring_thickness + 2, r=ring_diameter/2 - ring_thickness, center=true);\n    }\n}\n\n// Decorative studs on ends\nmodule end_studs() {\n    color(dark_bronze)\n    for(side = [-1, 1]) {\n        translate([side * (toggle_length/2 - 8), 0, toggle_thickness])\n            cylinder(h=2, r=5);\n        translate([side * (toggle_length/2 - 8), 0, 2])\n            sphere(r=5);\n    }\n}\n\n// Assembly\nunion() {\n    toggle_body();\n    knotwork_pattern();\n    toggle_ring();\n    end_studs();\n}",
    "renders": true
  },
  {
    "historical_artifact": "barrel",
    "openscad_code": "// Medieval Iron-Banded Oak Barrel - Historical Artifact\n// Typical 14th-15th century water/wine barrel design\n// Overall dimensions: 70mm height x 50mm diameter\n\n// Main wooden barrel body\nmodule barrel_body() {\n    color([0.4, 0.25, 0.12])  // Weathered oak color\n    \n    // Create curved barrel shape using stacked cylinders\n    for(i = [0:9]) {\n        h = i * 3.5;\n        radius = 20 + sin(i * 18) * 5;  // Bulge in middle\n        translate([0, 0, h]) \n            cylinder(h=3.5, r=radius, $fn=32);\n    }\n}\n\n// Iron band with rivets\nmodule iron_band() {\n    color([0.25, 0.25, 0.25])  // Dark iron\n    \n    // Main band\n    difference() {\n        cylinder(h=4, r=25.5, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=6, r=23.5, $fn=32);\n    }\n    \n    // Rivets along band\n    for(angle = [0:30:330]) {\n        translate([25.5 * cos(angle), 25.5 * sin(angle), 2])\n            sphere(r=1.5, $fn=8);\n    }\n}\n\n// Barrel lid with cooper's mark\nmodule barrel_lid() {\n    color([0.4, 0.25, 0.12])\n    \n    difference() {\n        cylinder(h=3, r=23, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=5, r=21, $fn=32);\n    }\n    \n    // Cooper's maker's mark - simple cross\n    color([0.2, 0.2, 0.2])\n    translate([0, 0, 3.1])\n    union() {\n        cube([12, 2, 0.5], center=true);\n        cube([2, 12, 0.5], center=true);\n    }\n}\n\n// Bunghole with plug\nmodule bunghole() {\n    color([0.3, 0.3, 0.3])\n    \n    // Hole through barrel\n    translate([20, 0, 35]) rotate([0, 90, 0])\n        cylinder(h=8, r=3, $fn=16);\n    \n    // Wooden plug\n    color([0.3, 0.2, 0.1])\n    translate([20, 0, 35]) rotate([0, 90, 0])\n        cylinder(h=5, r=2.8, $fn=16);\n}\n\n// Stave joints detail\nmodule stave_joints() {\n    color([0.35, 0.22, 0.11])\n    \n    for(angle = [0:15:345]) {\n        rotate([0, 0, angle]) {\n            translate([22.5, -0.5, 0])\n                cube([1, 1, 70]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main barrel\n    barrel_body();\n    \n    // Iron bands\n    translate([0, 0, 10]) iron_band();\n    translate([0, 0, 25]) iron_band();\n    translate([0, 0, 40]) iron_band();\n    translate([0, 0, 55]) iron_band();\n    \n    // Top and bottom lids\n    translate([0, 0, 0]) barrel_lid();\n    translate([0, 0, 67]) barrel_lid();\n    \n    // Bunghole for tapping\n    bunghole();\n    \n    // Stave joint details\n    stave_joints();\n}",
    "renders": true
  },
  {
    "historical_artifact": "box",
    "openscad_code": "// Ancient Egyptian Canopic Box - Medium complexity realistic style\n// Used to store canopic jars containing organs during mummification\n\n$fn = 50;\n\n// Main box dimensions\nbox_width = 60;\nbox_depth = 40;\nbox_height = 35;\nwall_thickness = 2.5;\n\n// Hieroglyphic symbols module\nmodule hieroglyph(symbol_size) {\n    color([0.8, 0.7, 0.4]) {\n        // Ankh symbol\n        translate([0, 0, 0])\n            sphere(symbol_size/4);\n        translate([0, -symbol_size/2, 0])\n            cylinder(h=symbol_size/2, r=symbol_size/6);\n        translate([-symbol_size/3, -symbol_size, 0])\n            rotate([0, 90, 0])\n            cylinder(h=symbol_size/2, r=symbol_size/6);\n        translate([symbol_size/3, -symbol_size, 0])\n            rotate([0, 90, 0])\n            cylinder(h=symbol_size/2, r=symbol_size/6);\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern(length, height) {\n    pattern_count = floor(length / 6);\n    for(i = [0:pattern_count-1]) {\n        translate([i * 6 + 3, 0, 0])\n            color([0.9, 0.8, 0.5])\n            cube([2, height, 1]);\n    }\n}\n\n// Main box body\nmodule box_body() {\n    difference() {\n        // Outer shell\n        color([0.85, 0.75, 0.5])  // Sandstone color\n        cube([box_width, box_depth, box_height]);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([box_width - 2*wall_thickness, \n                  box_depth - 2*wall_thickness, \n                  box_height - wall_thickness]);\n    }\n}\n\n// Lid with curved top\nmodule box_lid() {\n    difference() {\n        union() {\n            // Base of lid\n            color([0.85, 0.75, 0.5])\n            translate([-1, -1, 0])\n                cube([box_width + 2, box_depth + 2, wall_thickness]);\n            \n            // Curved top\n            color([0.85, 0.75, 0.5])\n            translate([box_width/2, box_depth/2, wall_thickness])\n                scale([1, 0.6, 0.5])\n                sphere(d=box_width * 0.9);\n        }\n        \n        // Handle hole\n        translate([box_width/2, box_depth/2, wall_thickness])\n            cylinder(h=10, r=5);\n    }\n}\n\n// Decorative elements\nmodule decorations() {\n    // Front hieroglyphs\n    translate([box_width/2, box_depth, box_height/2])\n        rotate([90, 0, 0])\n        hieroglyph(8);\n    \n    // Side hieroglyphs\n    translate([0, box_depth/2, box_height/2])\n        rotate([0, 90, 90])\n        hieroglyph(6);\n    \n    // Top border patterns\n    translate([5, 0, box_height - 1])\n        border_pattern(box_width - 10, 3);\n    \n    translate([5, box_depth, box_height - 1])\n        border_pattern(box_width - 10, 3);\n    \n    // Side border patterns\n    translate([0, 5, box_height - 1])\n        rotate([0, 0, 90])\n        border_pattern(box_depth - 10, 3);\n    \n    translate([box_width, 5, box_height - 1])\n        rotate([0, 0, 90])\n        border_pattern(box_depth - 10, 3);\n    \n    // Corner protectors\n    for(x = [0, box_width]) {\n        for(y = [0, box_depth]) {\n            translate([x, y, box_height/2])\n                color([0.7, 0.6, 0.3])\n                cylinder(h=box_height, r=2);\n        }\n    }\n}\n\n// Assembly\nbox_body();\ntranslate([0, 0, box_height + 5])\n    box_lid();\ndecorations();",
    "renders": true
  },
  {
    "historical_artifact": "lobster",
    "openscad_code": "// Lobster-shaped bronze fibula (ancient brooch) - Roman period artifact\n// Realistic style, medium complexity\n\n// Artifact parameters\n$fn = 32;\nartifact_length = 60;\nartifact_thickness = 4;\n\n// Main bronze color\ncolor([0.7, 0.4, 0.1]) {\n\n// Lobster body - elongated oval\nmodule lobster_body() {\n    union() {\n        // Main carapace body\n        translate([0, 0, artifact_thickness/2])\n            scale([1.5, 0.8, 0.3])\n                sphere(d=artifact_length/2);\n        \n        // Segmented ridges\n        for(i = [0:4]) {\n            translate([i*8 - 20, 0, artifact_thickness/2 + 1])\n                rotate([90, 0, 0])\n                    cylinder(h=1.5, d1=15, d2=12);\n        }\n        \n        // Decorative eye ridges\n        translate([-18, 8, artifact_thickness/2 + 2])\n            sphere(d=4);\n        translate([-18, -8, artifact_thickness/2 + 2])\n            sphere(d=4);\n    }\n}\n\n// Lobster tail segments\nmodule lobster_tail() {\n    union() {\n        for(i = [0:5]) {\n            translate([20 + i*6, 0, artifact_thickness/2 - i*0.3])\n                rotate([0, 10*i, 0])\n                    scale([1 - i*0.1, 1 - i*0.1, 0.3])\n                        cube([8, 12 - i, 3], center=true);\n        }\n    }\n}\n\n// Antennae (decorative spirals)\nmodule antennae() {\n    translate([-25, 0, artifact_thickness/2 + 3]) {\n        // Right antenna\n        translate([0, 5, 0])\n            rotate([0, 0, 30])\n                cylinder(h=15, d=1);\n        translate([0, 7, 0])\n            rotate([0, 0, 45])\n                cylinder(h=10, d=0.8);\n        \n        // Left antenna\n        translate([0, -5, 0])\n            rotate([0, 0, -30])\n                cylinder(h=15, d=1);\n        translate([0, -7, 0])\n            rotate([0, 0, -45])\n                cylinder(h=10, d=0.8);\n    }\n}\n\n// Legs (simplified as decorative elements)\nmodule legs() {\n    for(side = [1, -1]) {\n        for(i = [0:3]) {\n            translate([5 + i*8, side*10, artifact_thickness/2 - 2])\n                rotate([90, 0, side*20])\n                    cylinder(h=12 - i*2, d=2);\n        }\n    }\n}\n\n// Claws (decorative pin mechanism)\nmodule claws() {\n    union() {\n        // Right claw\n        translate([-20, 12, artifact_thickness/2])\n            rotate([0, 0, -30])\n                scale([1.2, 0.7, 0.7])\n                    sphere(d=10);\n        translate([-25, 15, artifact_thickness/2])\n            rotate([0, 0, -45])\n                cylinder(h=8, d1=6, d2=3);\n        \n        // Left claw\n        translate([-20, -12, artifact_thickness/2])\n            rotate([0, 0, 30])\n                scale([1.2, 0.7, 0.7])\n                    sphere(d=10);\n        translate([-25, -15, artifact_thickness/2])\n            rotate([0, 0, 45])\n                cylinder(h=8, d1=6, d2=3);\n    }\n}\n\n// Artifact-specific details - bronze age decorative patterns\nmodule decorative_patterns() {\n    // Engraved circles on carapace\n    for(i = [0:2]) {\n        translate([-10 + i*10, 0, artifact_thickness/2 + 1.5])\n            rotate([0, 0, 0])\n                difference() {\n                    cylinder(h=0.5, d=6);\n                    translate([0, 0, -0.1])\n                        cylinder(h=0.7, d=4);\n                }\n    }\n    \n    // Linear engravings on tail\n    for(i = [0:5]) {\n        translate([22 + i*6, 0, artifact_thickness/2 - i*0.3 + 1.5])\n            cube([6, 0.5, 0.5], center=true);\n    }\n}\n\n// Assemble the artifact\nunion() {\n    lobster_body();\n    lobster_tail();\n    antennae();\n    legs();\n    claws();\n    decorative_patterns();\n}\n\n// Pin mechanism base (for fibula functionality)\ntranslate([30, 0, 0])\n    rotate([90, 0, 0])\n        cylinder(h=15, d=3);\n\n// Catch plate\ntranslate([35, 0, -2])\n    cube([8, 4, 2]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "safety",
    "openscad_code": "// Roman military helmet (Galea) - safety artifact from 1st-2nd century AD\n// Designed for 3D printing at 80mm height\n\n// Overall dimensions\nhelmet_height = 80;\nhelmet_width = 65;\nhelmet_length = 75;\n\n// Wall thickness for 3D printing\nwall_thickness = 2.5;\n\n// Main helmet bowl\nmodule helmet_bowl() {\n    difference() {\n        // Outer shell\n        color(\"silver\") \n        scale([1, 0.9, 1.1]) \n        sphere(d=helmet_width);\n        \n        // Inner cavity\n        translate([0, 0, -wall_thickness])\n        scale([1, 0.85, 1]) \n        sphere(d=helmet_width - 2*wall_thickness);\n        \n        // Neck opening\n        translate([0, -helmet_width/3, -helmet_height/4])\n        rotate([15, 0, 0])\n        cube([helmet_width/2, helmet_width/2, helmet_height/2], center=true);\n        \n        // Face opening\n        translate([0, helmet_width/3, -helmet_height/8])\n        rotate([-25, 0, 0])\n        cube([helmet_width/1.5, helmet_width/2, helmet_height/2], center=true);\n    }\n}\n\n// Decorative brow ridge\nmodule brow_ridge() {\n    color(\"bronze\")\n    translate([0, helmet_width/2.2, helmet_height/4])\n    rotate([90, 0, 0])\n    cylinder(h=wall_thickness*1.5, d1=helmet_width*0.9, d2=helmet_width*1.1);\n}\n\n// Cheek guards\nmodule cheek_guards() {\n    for(side = [-1, 1]) {\n        translate([side * helmet_width/4, helmet_width/3, -helmet_height/6])\n        rotate([0, 0, side * 30])\n        color(\"silver\")\n        scale([0.4, 1, 0.6]) \n        sphere(d=helmet_width/2);\n    }\n}\n\n// Neck guard plates\nmodule neck_guard() {\n    color(\"silver\")\n    translate([0, -helmet_width/2.2, -helmet_height/4])\n    rotate([15, 0, 0])\n    for(i = [0:3]) {\n        translate([0, i * wall_thickness*2, -i * wall_thickness])\n        cube([helmet_width, wall_thickness*3, wall_thickness*2], center=true);\n    }\n}\n\n// Crest holder (transverse)\nmodule crest_holder() {\n    color(\"bronze\")\n    translate([0, 0, helmet_height/2 + 5])\n    rotate([90, 0, 0])\n    cylinder(h=helmet_width/8, d=helmet_width/12);\n    \n    // Crest support pins\n    for(side = [-1, 1]) {\n        translate([side * helmet_width/4, 0, helmet_height/2 + 5])\n        rotate([90, 0, 0])\n        cylinder(h=helmet_width/12, d=helmet_width/20);\n    }\n}\n\n// Decorative eyebrow etchings\nmodule eyebrow_decorations() {\n    color(\"bronze\")\n    for(side = [-1, 1]) {\n        translate([side * helmet_width/4, helmet_width/2.5, helmet_height/6])\n        rotate([0, 0, side * 15])\n        scale([0.1, 1, 0.05]) \n        sphere(d=helmet_width/4);\n    }\n}\n\n// Assembly\nunion() {\n    helmet_bowl();\n    brow_ridge();\n    cheek_guards();\n    neck_guard();\n    crest_holder();\n    eyebrow_decorations();\n}",
    "renders": true
  },
  {
    "historical_artifact": "guard",
    "openscad_code": "// Roman Praetorian Guard Shield - Historical Artifact\n// Based on 1st-3rd century AD rectangular scutum\n\n// Overall dimensions for 3D printing (scaled down)\nshield_width = 70;\nshield_height = 100;\nshield_depth = 8;\n\n// Colors\nshield_color = \"#8B4513\";  // Bronze-brown leather\nmetal_color = \"#B87333\";    // Bronze\ndecoration_color = \"#FFD700\"; // Gold\n\n// Main shield body\nmodule shield_body() {\n    color(shield_color) {\n        // Main rectangular body with slight curve\n        difference() {\n            // Outer curved surface\n            union() {\n                for (i = [0:shield_height-1]) {\n                    translate([0, i-shield_height/2, 0]) {\n                        hull() {\n                            translate([-shield_width/2, 0, 0]) \n                                cube([1, 1, shield_depth], center=true);\n                            translate([shield_width/2, 0, 0]) \n                                cube([1, 1, shield_depth], center=true);\n                        }\n                    }\n                }\n            }\n            \n            // Inner hollow for hand grip\n            translate([0, 0, -shield_depth/2+1])\n                cube([shield_width-10, shield_height-10, shield_depth-2], center=true);\n        }\n    }\n}\n\n// Central bronze boss (umbo)\nmodule shield_boss() {\n    color(metal_color) {\n        // Main dome\n        translate([0, 0, shield_depth/2])\n            scale([1, 1, 0.6])\n                sphere(d=25, $fn=32);\n        \n        // Boss rim\n        translate([0, 0, shield_depth/2-2])\n            cylinder(h=3, d1=28, d2=30, $fn=32);\n    }\n}\n\n// Decorative edge trim\nmodule edge_trim() {\n    color(metal_color) {\n        // Top trim\n        translate([0, shield_height/2-1, 0])\n            cube([shield_width+4, 2, shield_depth+2], center=true);\n        \n        // Bottom trim\n        translate([0, -shield_height/2+1, 0])\n            cube([shield_width+4, 2, shield_depth+2], center=true);\n        \n        // Side trims\n        for (x = [-1, 1]) {\n            translate([x*(shield_width/2-1), 0, 0])\n                cube([2, shield_height+4, shield_depth+2], center=true);\n        }\n    }\n}\n\n// Praetorian Guard insignia - stylized eagle and SPQR\nmodule insignia() {\n    color(decoration_color) {\n        // SPQR inscription\n        translate([0, 25, shield_depth/2+0.5])\n            cube([30, 5, 1], center=true);\n        \n        // Eagle wings\n        for (angle = [-45, 0, 45]) {\n            rotate([0, 0, angle])\n                translate([15, 0, shield_depth/2+0.5])\n                    scale([0.3, 1, 1])\n                        cube([20, 8, 1], center=true);\n        }\n        \n        // Eagle body\n        translate([0, 15, shield_depth/2+0.5])\n            cube([8, 12, 1], center=true);\n    }\n}\n\n// Decorative rivets around edge\nmodule rivets() {\n    color(metal_color) {\n        // Rivet pattern\n        for (i = [-3:3]) {\n            for (j = [-2:2]) {\n                if (abs(i) == 3 || abs(j) == 2) {\n                    translate([i*10, j*20, shield_depth/2+1])\n                        cylinder(h=2, d=3, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Hand grip on back\nmodule hand_grip() {\n    color(shield_color) {\n        // Crossbar grip\n        translate([0, 0, -shield_depth/2+2])\n            rotate([90, 0, 0])\n                cylinder(h=shield_width-20, d=8, center=true, $fn=16);\n        \n        // Grip reinforcement\n        for (i = [-1, 1]) {\n            translate([i*20, 0, -shield_depth/2+2])\n                rotate([90, 0, 0])\n                    cylinder(h=12, d=12, center=true, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    shield_body();\n    edge_trim();\n    shield_boss();\n    insignia();\n    rivets();\n    hand_grip();\n}",
    "renders": true
  },
  {
    "historical_artifact": "extender",
    "openscad_code": "// Roman wooden writing-tablet extender (tabula ansata style)\n// Size: 85 mm long, designed for 3D printing\n\n$fn = 50;  // Smooth curves\n\n// Main tablet body\nmodule tablet_body() {\n    difference() {\n        // Main tablet\n        cube([70, 45, 3], center = true);\n        \n        // Writing recess\n        translate([0, 0, 1])\n            cube([60, 35, 2], center = true);\n    }\n}\n\n// Handle loops (ansae)\nmodule handle_loop() {\n    difference() {\n        // Outer loop\n        rotate_extrude(angle = 180)\n            translate([20, 0, 0])\n                square([2, 8]);\n        \n        // Inner hole\n        rotate_extrude(angle = 180)\n            translate([22, 0, 0])\n                square([1.5, 6]);\n    }\n}\n\n// Roman decorative border pattern\nmodule border_pattern() {\n    for (i = [-30:10:30]) {\n        translate([i, -17, 1.6])\n            cube([3, 2, 0.5]);\n        translate([i, 17, 1.6])\n            cube([3, 2, 0.5]);\n    }\n}\n\n// Wax sealing area with border\nmodule seal_area() {\n    translate([0, 0, 1.5])\n        difference() {\n            // Raised border\n            cube([65, 40, 1], center = true);\n            // Recessed sealing area\n            cube([60, 35, 2], center = true);\n        }\n}\n\n// Roman numeral inscriptions\nmodule inscriptions() {\n    // Left side - \"M D\" (1500)\n    translate([-25, 0, 1.6])\n        cube([1, 0.5, 0.3]);\n    translate([-25, -2, 1.6])\n        cube([1, 0.5, 0.3]);\n    translate([-25, 2, 1.6])\n        cube([1, 0.5, 0.3]);\n    \n    translate([-20, 0, 1.6])\n        cube([1, 3, 0.3]);\n    \n    // Right side - \"X V\" (15)\n    translate([20, 0, 1.6])\n        cube([1, 3, 0.3]);\n    translate([25, 0, 1.6])\n        cube([1, 3, 0.3]);\n}\n\n// Wooden texture pattern\nmodule wood_grain() {\n    for (i = [-35:2:35]) {\n        color([0.4, 0.25, 0.15])\n            translate([i, -22.5, 0])\n                cube([0.5, 45, 3.1]);\n    }\n}\n\n// Complete tablet assembly\nmodule roman_tablet_extender() {\n    color([0.5, 0.3, 0.2])  // Dark wood color\n    \n    union() {\n        // Main body with texture\n        wood_grain();\n        tablet_body();\n        \n        // Handles on both sides\n        translate([-35, 0, 0])\n            rotate([0, 90, 0])\n                handle_loop();\n        translate([35, 0, 0])\n            rotate([0, -90, 0])\n                mirror([0, 1, 0])\n                    handle_loop();\n        \n        // Decorative elements\n        seal_area();\n        border_pattern();\n        inscriptions();\n        \n        // Reinforcement corners\n        translate([-30, -20, 1.5])\n            cylinder(h = 1.5, r = 2);\n        translate([-30, 20, 1.5])\n            cylinder(h = 1.5, r = 2);\n        translate([30, -20, 1.5])\n            cylinder(h = 1.5, r = 2);\n        translate([30, 20, 1.5])\n            cylinder(h = 1.5, r = 2);\n    }\n}\n\n// Render the extender\nroman_tablet_extender();",
    "renders": true
  },
  {
    "historical_artifact": "adjuster",
    "openscad_code": "// Medieval Astrolabe Adjuster (15th Century)\n// A handheld brass tool used to calibrate astrolabes for celestial navigation\n\n$fn = 48;\n\n// Main dimensions\ntotal_length = 80;\nhandle_length = 25;\nhead_radius = 15;\nthickness = 3;\n\n// Colors\nbrass = [0.8, 0.6, 0.2];\ndark_brass = [0.6, 0.45, 0.15];\n\nmodule handle_grooves() {\n    for(i = [0:1:3]) {\n        translate([i*6 - 9, -8, -thickness/2 - 0.1])\n            cube([1.5, 16, thickness + 0.2]);\n    }\n}\n\nmodule decorative_ring() {\n    // Raised ring with small decorative beads\n    translate([0, 0, thickness/2 + 0.5])\n        cylinder(h=1, r1=head_radius + 2, r2=head_radius + 2);\n    \n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([head_radius + 2, 0, thickness/2 + 1])\n                sphere(0.8);\n    }\n}\n\nmodule calibration_marks() {\n    // Degree markings around the edge\n    for(i = [0:5:355]) {\n        rotate([0, 0, i])\n            translate([head_radius - 1, 0, -thickness/2 - 0.1])\n                cube([0.5, 1, thickness + 0.2]);\n    }\n    \n    // Cardinal point markers\n    for(i = [0, 90, 180, 270]) {\n        rotate([0, 0, i])\n            translate([head_radius - 2, 0, -thickness/2 - 0.1])\n                cube([1.5, 3, thickness + 0.2]);\n    }\n}\n\nmodule inscription_band() {\n    // Decorative band with Latin inscription area\n    difference() {\n        translate([0, 0, thickness/2 - 1])\n            cylinder(h=2, r1=head_radius, r2=head_radius);\n        \n        // Small rectangular windows for inscription\n        for(i = [0:45:315]) {\n            rotate([0, 0, i + 22.5])\n                translate([head_radius - 3, -2, thickness/2 - 1.1])\n                    cube([4, 4, 2.2]);\n        }\n    }\n}\n\nmodule adjustment_pointer() {\n    // Central pointer arm\n    translate([0, 0, thickness/2 - 0.5])\n        rotate([0, 0, 45])\n        union() {\n            // Arm body\n            translate([-head_radius + 5, -1, 0])\n                cube([head_radius - 3, 2, 1.5]);\n            \n            // Arrow tip\n            translate([head_radius - 3.5, -2, 0])\n                cylinder(h=1.5, r1=0, r2=2);\n        }\n}\n\nmodule handle() {\n    color(dark_brass)\n    difference() {\n        // Main handle\n        translate([-total_length/2, -handle_length/2, -thickness/2])\n            cube([handle_length, handle_length, thickness]);\n        \n        // Rounded end\n        translate([-total_length/2 + handle_length, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, r=handle_length/2);\n        \n        // Hanging hole\n        translate([-total_length/2 + 5, 0, 0])\n            cylinder(h=thickness + 1, r=2);\n        \n        // Grip grooves\n        handle_grooves();\n    }\n}\n\nmodule adjustment_head() {\n    color(brass)\n    union() {\n        // Main circular head\n        translate([total_length/2 - head_radius - 5, 0, 0])\n            cylinder(h=thickness, r=head_radius);\n        \n        // Thickened center\n        translate([total_length/2 - head_radius - 5, 0, -thickness/4])\n            cylinder(h=thickness*1.5, r=head_radius - 2);\n        \n        // Decorative elements\n        decorative_ring();\n        calibration_marks();\n        inscription_band();\n        \n        // Central pivot detail\n        translate([total_length/2 - head_radius - 5, 0, thickness/2 + 0.5])\n            cylinder(h=1, r=3);\n        translate([total_length/2 - head_radius - 5, 0, thickness/2 + 1])\n            sphere(3);\n        \n        // Adjustment pointer\n        adjustment_pointer();\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    adjustment_head();\n    \n    // Reinforcement bridge\n    color(dark_brass)\n    translate([-total_length/2 + handle_length - 2, 0, -thickness/2])\n        cube([total_length - handle_length - head_radius*2 + 8, handle_length/3, thickness]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "keeper",
    "openscad_code": "// Ancient Egyptian Ankh-shaped Key of Life Keeper Amulet\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\n// Overall dimensions\noverall_length = 75;\nankh_width = 35;\nthickness = 6;\n\n// Main ankh body\nmodule ankh_body() {\n    color([0.8, 0.6, 0.2])  // Gold color\n    \n    union() {\n        // Central vertical shaft\n        translate([0, -overall_length/3, 0])\n            cube([10, overall_length/1.5, thickness], center=true);\n        \n        // Horizontal crossbar\n        translate([0, overall_length/4, 0])\n            cube([ankh_width, 10, thickness], center=true);\n        \n        // Upper loop (oval)\n        translate([0, overall_length/2.8, -thickness/2])\n            linear_extrude(height=thickness)\n            difference() {\n                scale([1, 1.2, 1])\n                    circle(d=ankh_width - 5);\n                scale([0.7, 0.9, 1])\n                    circle(d=ankh_width - 15);\n            }\n    }\n}\n\n// Hieroglyphic inscriptions on sides\nmodule hieroglyphs() {\n    color([0.1, 0.1, 0.1])  // Dark hieroglyphs\n    \n    // Left side symbols\n    for(i = [-2:1:2]) {\n        translate([-thickness/2 - 0.1, i*8, -thickness/2])\n            rotate([0, 90, 0])\n                linear_extrude(height=1)\n                    text(\"𓂀\", size=6, font=\"Aegyptus\");\n    }\n    \n    // Right side symbols\n    for(i = [-2:1:2]) {\n        translate([thickness/2 + 0.1, i*8, -thickness/2])\n            rotate([0, 90, 0])\n                linear_extrude(height=1)\n                    text(\"𓊽\", size=6, font=\"Aegyptus\");\n    }\n}\n\n// Decorative border pattern\nmodule decorative_border() {\n    color([0.9, 0.7, 0.1])  // Brighter gold\n    \n    // Top border dots\n    for(x = [-ankh_width/2+5:5:ankh_width/2-5]) {\n        translate([x, overall_length/2.8 + 12, -thickness/2 - 0.1])\n            sphere(d=2);\n    }\n    \n    // Side border dots\n    for(y = [-overall_length/3+5:5:overall_length/3-5]) {\n        translate([ankh_width/2 + 2, y, -thickness/2 - 0.1])\n            sphere(d=2);\n    }\n}\n\n// Suspension loop for wearing\nmodule suspension_loop() {\n    color([0.7, 0.5, 0.1])\n    \n    translate([0, overall_length/2.8 + 18, 0])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=5, d1=8, d2=8);\n                cylinder(h=6, d1=5, d2=5);\n            }\n}\n\n// Central eye of Ra detail\nmodule eye_of_ra() {\n    color([0.2, 0.1, 0.1])\n    \n    translate([0, overall_length/4, thickness/2 + 0.1])\n        linear_extrude(height=1)\n            union() {\n                // Eye outline\n                scale([1.5, 0.8, 1])\n                    circle(d=8);\n                \n                // Pupil\n                circle(d=4);\n                \n                // Eyebrow\n                translate([0, 4, 0])\n                    scale([1.2, 0.3, 1])\n                        circle(d=8);\n            }\n}\n\n// Generate the complete keeper\nunion() {\n    // Main body with rounded edges\n    difference() {\n        ankh_body();\n        \n        // Rounded edges on back\n        translate([0, 0, -thickness/2 - 1])\n            cube([ankh_width + 10, overall_length + 10, 2], center=true);\n    }\n    \n    // All details\n    hieroglyphs();\n    decorative_border();\n    suspension_loop();\n    eye_of_ra();\n}",
    "renders": true
  },
  {
    "historical_artifact": "stopper",
    "openscad_code": "// Ancient Roman Glass Bottle Stopper (1st-3rd century AD)\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 64;  // Smooth curves\n\n// Main parameters\nstopper_height = 65;\nbase_diameter = 35;\nhandle_diameter = 12;\ncone_height = 25;\n\n// Colors for realistic appearance\ncolor(\"cornsilk\")  // Ivory/bone color for stopper body\n\nunion() {\n    // Conical sealing plug\n    translate([0, 0, 0])\n        cylinder(h1 = cone_height, h2 = 0, r1 = base_diameter/2, r2 = base_diameter/2 - 5, center = false);\n    \n    // Cylindrical base\n    translate([0, 0, cone_height])\n        cylinder(h = 15, r = base_diameter/2, center = false);\n    \n    // Decorative collar with rings\n    translate([0, 0, cone_height + 15])\n        difference() {\n            cylinder(h = 8, r = base_diameter/2 + 3, center = false);\n            // Central hole for handle\n            cylinder(h = 10, r = handle_diameter/2, center = false);\n        }\n    \n    // Ring decorations on collar\n    for (i = [0:2]) {\n        translate([0, 0, cone_height + 15 + i * 2.5])\n            difference() {\n                cylinder(h = 1.5, r = base_diameter/2 + 3, center = false);\n                cylinder(h = 2, r = base_diameter/2 + 1, center = false);\n            }\n    }\n    \n    // Handle shaft\n    translate([0, 0, cone_height + 23])\n        cylinder(h = 25, r = handle_diameter/2, center = false);\n    \n    // Decorative finial with historical motifs\n    translate([0, 0, cone_height + 48])\n        union() {\n            // Spherical finial top\n            sphere(r = 8);\n            \n            // Four decorative lobes (quatrefoil design typical of Roman period)\n            for (angle = [0:90:270]) {\n                rotate([0, 0, angle])\n                    translate([5, 0, 0])\n                        scale([1.2, 0.6, 0.8])\n                            sphere(r = 4);\n            }\n            \n            // Central ring detail\n            translate([0, 0, -2])\n                difference() {\n                    cylinder(h = 4, r = 6, center = false);\n                    cylinder(h = 5, r = 4, center = false);\n                }\n        }\n    \n    // Vertical grooves on handle for grip (historical feature)\n    translate([0, 0, cone_height + 25])\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([handle_diameter/2 - 1, 0, 0])\n                    cube([2, 1, 20], center = true);\n        }\n    \n    // Horizontal inscription band on collar\n    translate([0, 0, cone_height + 18])\n        difference() {\n            cylinder(h = 3, r = base_diameter/2 + 2.5, center = false);\n            // Simulated Latin inscription grooves\n            for (i = [0:15:345]) {\n                rotate([0, 0, i])\n                    translate([base_diameter/2 + 1.5, 0, 1.5])\n                        cube([0.5, 2, 2], center = true);\n            }\n        }\n}",
    "renders": true
  },
  {
    "historical_artifact": "charm",
    "openscad_code": "// Ankh Egyptian charm - medium complexity historical artifact\n// Overall dimensions: ~60mm height, ~40mm width, ~5mm thickness\n\n// Main color - gold/brass appearance\ncolor(\"gold\") \nunion() {\n    // Main ankh loop (upper oval)\n    translate([0, 0, 2.5]) \n    difference() {\n        // Outer loop\n        cylinder(h=5, d=35, center=true);\n        \n        // Inner cutout\n        cylinder(h=6, d=25, center=true);\n    }\n    \n    // Vertical shaft\n    translate([0, -17.5, 2.5]) \n    cube([5, 35, 5], center=true);\n    \n    // Horizontal crossbar\n    translate([0, 0, 2.5]) \n    cube([30, 5, 5], center=true);\n}\n\n// Hieroglyphic details on the loop\ncolor(\"darkgoldenrod\") \nfor(i=[-45:30:45]) {\n    rotate([0, 0, i]) \n    translate([0, 12.5, 3]) \n    cube([1.5, 4, 1], center=true);\n}\n\n// Eye of Horus detail on crossbar\ncolor(\"blue\") \ntranslate([10, 0, 5.5]) \nunion() {\n    // Eye outline\n    sphere(d=6);\n    \n    // Pupil\n    color(\"black\") \n    sphere(d=3);\n}\n\n// Decorative dots along edges\ncolor(\"red\") \nfor(pos=[[0, 17.5, 5.5], [0, -17.5, 5.5], [-15, 0, 5.5], [15, 0, 5.5]]) {\n    translate(pos) \n    sphere(d=2);\n}\n\n// Hanging loop at top\ncolor(\"gold\") \ntranslate([0, 17.5, 5.5]) \nunion() {\n    // Loop base\n    cylinder(h=3, d=4);\n    \n    // Loop hole\n    translate([0, 0, 1.5]) \n    cylinder(h=4, d=2);\n}",
    "renders": true
  },
  {
    "historical_artifact": "fob",
    "openscad_code": "// Historical Roman oil lamp fob - Medium complexity\n// Based on 2nd century AD Roman artifacts used for sealing oil containers\n\n// Overall dimensions\n$fn = 50;  // Smooth curves for better print quality\nbody_length = 45;\nbody_width = 30;\nbody_height = 8;\nring_outer = 12;\nring_inner = 7;\nring_thickness = 2.5;\n\n// Colors\nbronze_color = [0.72, 0.45, 0.2];\npatina_color = [0.4, 0.6, 0.4];\n\n// Main body of the fob\nmodule fob_body() {\n    color(bronze_color) {\n        // Base oval shape\n        difference() {\n            scale([1.2, 1, 1])\n                cylinder(h=body_height, d=body_width, center=true);\n            // Hollow center for weight reduction\n            translate([0, 0, -body_height/2])\n                cylinder(h=body_height+2, d=body_width*0.6, center=false);\n        }\n        \n        // Raised border\n        translate([0, 0, body_height/2 - 1])\n            scale([1.3, 1.1, 1])\n                cylinder(h=2, d=body_width, center=true);\n    }\n}\n\n// Decorative elements - stylized dolphins and waves\nmodule decorations() {\n    color(bronze_color) {\n        // Central dolphin motif\n        translate([0, 0, body_height/2 + 1])\n            rotate([0, 0, 45])\n                for(i=[-1,1]) mirror([i,0,0])\n                    union() {\n                        // Dolphin body\n                        translate([0, 0, 0])\n                            scale([0.8, 0.4, 1])\n                                cylinder(h=1.5, d=8, center=true);\n                        // Dolphin tail\n                        translate([-3, 0, 0])\n                            rotate([0, 0, -30])\n                                cube([6, 1, 1.5], center=true);\n                    }\n        \n        // Wave patterns along edges\n        for(angle=[0:30:330]) {\n            rotate([0, 0, angle])\n                translate([body_width/2 * 0.9, 0, body_height/2])\n                    scale([1, 0.5, 1])\n                        sphere(d=4);\n        }\n    }\n}\n\n// Inscription oval\nmodule inscription() {\n    color(patina_color) {\n        translate([0, -5, body_height/2 + 2])\n            scale([1.5, 0.8, 0.5])\n                cylinder(h=2, d=20, center=true);\n        \n        // Stylized Latin letters \"LVCERNA\"\n        translate([0, -5, body_height/2 + 3])\n            rotate([0, 0, 90])\n                for(pos=[-8:4:8]) {\n                    translate([pos, 0, 0])\n                        cube([2, 1, 0.5], center=true);\n                }\n    }\n}\n\n// Attachment ring\nmodule attachment_ring() {\n    color(bronze_color) {\n        // Main ring\n        translate([0, body_width/2 + 8, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=ring_thickness, d=ring_outer, center=true);\n                    cylinder(h=ring_thickness+1, d=ring_inner, center=true);\n                }\n        \n        // Reinforcement where ring meets body\n        translate([0, body_width/2 + 5, 0])\n            sphere(d=6);\n    }\n}\n\n// Assembly\nunion() {\n    fob_body();\n    decorations();\n    inscription();\n    attachment_ring();\n    \n    // Add patina spots for realism\n    color(patina_color) {\n        for(i=[1:8]) {\n            rotate([0, 0, i*45])\n                translate([8*cos(i*45), 8*sin(i*45), body_height/2 + 1])\n                    sphere(d=2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "tassel",
    "openscad_code": "// Historical Tassel Artifact - Roman Military Standard Decoration\n// Based on 1st-2nd century CE Roman military standards\n\n// Overall dimensions\noverall_height = 80;\ncord_diameter = 3;\nknot_size = 12;\nfringe_length = 25;\n\n// Colors\ncolor_cord = \"saddlebrown\";\ncolor_metal = \"goldenrod\";\ncolor_fabric = \"darkred\";\n\nmodule metal_cap() {\n    color(color_metal) {\n        // Main cap body\n        cylinder(h=8, d1=10, d2=12, $fn=32);\n        \n        // Decorative ring\n        translate([0, 0, 8])\n            cylinder(h=2, d1=12, d2=12, $fn=32);\n        \n        // Attachment loop\n        translate([0, 0, 10])\n            rotate([90, 0, 0])\n            difference() {\n                torus(4, 1, $fn=32);\n                cube([10, 10, 10], center=true);\n            }\n    }\n}\n\nmodule torus(outer_r, inner_r, $fn=32) {\n    rotate_extrude($fn=$fn)\n        translate([outer_r, 0, 0])\n            circle(r=inner_r, $fn=$fn);\n}\n\nmodule knot_detail() {\n    color(color_cord) {\n        // Central knot sphere\n        sphere(d=knot_size, $fn=32);\n        \n        // Decorative wraps\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([0, knot_size/2, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=knot_size, d=cord_diameter, $fn=16);\n        }\n    }\n}\n\nmodule cord_strand(length, twist) {\n    color(color_cord) {\n        linear_extrude(height=length, twist=twist, $fn=16)\n            circle(d=cord_diameter);\n    }\n}\n\nmodule fringe_strand(length, index) {\n    color(color_fabric) {\n        // Slight variation in fringe strands\n    translate([index * 3 - 12, 0, 0])\n        rotate([0, 5 * sin(index * 30), 0])\n            cylinder(h=length - abs(index) * 0.5, d=1.5, $fn=8);\n    }\n}\n\nmodule decorative_bead() {\n    color(color_metal) {\n        difference() {\n            sphere(d=4, $fn=16);\n            // Small decorative groove\n            for (i = [0:120:240]) {\n                rotate([0, i, 0])\n                    cube([4.1, 0.5, 0.5], center=true);\n            }\n        }\n    }\n}\n\nmodule main_tassel() {\n    union() {\n        // Metal cap at top\n        metal_cap();\n        \n        // Main cord body\n        translate([0, 0, -15])\n            cord_strand(30, 180);\n        \n        // Central knot\n        translate([0, 0, -30])\n            knot_detail();\n        \n        // Lower cord section\n        translate([0, 0, -42])\n            cord_strand(12, 90);\n        \n        // Decorative beads\n        translate([0, 0, -48])\n            decorative_bead();\n        translate([0, 0, -52])\n            decorative_bead();\n        \n        // Fringe section\n        for (i = [-8:8]) {\n            translate([0, 0, -55])\n                fringe_strand(fringe_length, i);\n        }\n    }\n}\n\n// Main assembly\nrotate([0, 0, 0])\n    main_tassel();",
    "renders": true
  },
  {
    "historical_artifact": "fringe",
    "openscad_code": "// Phaistos Disc Replica (c. 1700 BCE)\n// Minoan clay tablet with stamped hieroglyphic symbols\n// Diameter: 80 mm, Thickness: 6 mm\n\n$fn = 64;\n\nmodule disc_base() {\n    // Central clay disc body\n    color(\"burlywood\")\n    difference() {\n        cylinder(h = 6, d = 80, center = true);\n        // Central hole\n        cylinder(h = 7, d = 12, center = true);\n    }\n}\n\nmodule spiral_groove(turns = 5, spacing = 3.5) {\n    // Raised spiral ridge around disc\n    for (i = [0:turns * 16]) {\n        angle = i * 22.5;\n        radius = 40 - (i * spacing);\n        if (radius > 6) {\n            translate([\n                cos(angle) * radius,\n                sin(angle) * radius,\n                0\n            ])\n            color(\"wheat\")\n            cylinder(h = 1.5, d = 2.5, center = true);\n        }\n    }\n}\n\nmodule hieroglyph_symbol(type, angle, radius) {\n    // Basic hieroglyphic symbols - simplified representations\n    translate([\n        cos(angle) * radius,\n        sin(angle) * radius,\n        3.5\n    ])\n    rotate([0, 0, angle + 90])\n    color(\"saddlebrown\")\n    union() {\n        if (type == 1) {\n            // Walking man symbol\n            cylinder(h = 1.5, d = 3);\n            translate([0, -2, 0])\n            cube([1, 3, 1.5], center = true);\n        } else if (type == 2) {\n            // Boat symbol\n            scale([2, 1, 1])\n            cylinder(h = 1.5, d = 3);\n        } else if (type == 3) {\n            // Flower symbol\n            for (j = [0:45:315]) {\n                rotate([0, 0, j])\n                translate([1.2, 0, 0])\n                cylinder(h = 1.5, d = 1.5);\n            }\n        } else {\n            // Fish symbol\n            scale([1.5, 0.8, 1])\n            sphere(d = 3);\n        }\n    }\n}\n\n// Main assembly\ndisc_base();\n\n// Add spiral groove\nspiral_groove();\n\n// Outer ring of symbols (31 symbols clockwise)\nfor (i = [0:30]) {\n    hieroglyph_symbol(\n        (i % 4) + 1,\n        i * 11.6,\n        32\n    );\n}\n\n// Inner ring of symbols (18 symbols counter-clockwise)\nfor (i = [0:17]) {\n    hieroglyph_symbol(\n        (i % 4) + 1,\n        -i * 20,\n        20\n    );\n}\n\n// Edge decoration - raised dots\nfor (i = [0:35]) {\n    angle = i * 10;\n    translate([\n        cos(angle) * 39,\n        sin(angle) * 39,\n        3\n    ])\n    color(\"peru\")\n    sphere(d = 2);\n}",
    "renders": true
  },
  {
    "historical_artifact": "bow",
    "openscad_code": "// Historical English Longbow (c. 1415 Agincourt period)\n// Scale: 1:20 model (~85mm long)\n\nbow_length = 85;\nbow_thickness = 3;\ngrip_length = 15;\ngrip_width = 5;\nstave_width = 4;\nnock_size = 2;\nstring_diameter = 0.8;\n\n// Wood color for yew\ncolor([0.52, 0.37, 0.26]) {\n    // Main stave - tapered towards tips\n    union() {\n        // Grip section\n        translate([0, 0, -bow_thickness/2])\n            cube([grip_length, grip_width, bow_thickness], center=true);\n        \n        // Upper limb\n        for (i = [0:4]) {\n            height = bow_thickness * (1 - i * 0.15);\n            translate([grip_length/2 + i * 7.5, 0, -height/2])\n                cube([7.5, stave_width * (1 - i * 0.15), height], center=false);\n        }\n        \n        // Lower limb\n        mirror([1, 0, 0]) {\n            for (i = [0:4]) {\n                height = bow_thickness * (1 - i * 0.15);\n                translate([grip_length/2 + i * 7.5, 0, -height/2])\n                    cube([7.5, stave_width * (1 - i * 0.15), height], center=false);\n            }\n        }\n        \n        // Decorative grip wrap - leather binding\n        color([0.25, 0.15, 0.08]) {\n            for (i = [-6:6]) {\n                translate([i * 1.1, 0, bow_thickness/2 + 0.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=0.3, r=0.6, $fn=8);\n            }\n        }\n        \n        // Arrow shelf\n        translate([grip_length/2 - 1, -grip_width/2 - 0.5, 0])\n            cube([2, 0.5, 1.5]);\n    }\n}\n\n// String (hemp)\ncolor([0.6, 0.5, 0.35]) {\n    // Upper nock\n    translate([bow_length/2 - 2, 0, 0])\n        cylinder(h=nock_size, r=string_diameter, center=true, $fn=8);\n    \n    // Lower nock\n    translate([-bow_length/2 + 2, 0, 0])\n        cylinder(h=nock_size, r=string_diameter, center=true, $fn=8);\n    \n    // Main string\n    hull() {\n        translate([bow_length/2 - 2, 0, 0])\n            sphere(r=string_diameter, $fn=8);\n        translate([-bow_length/2 + 2, 0, 0])\n            sphere(r=string_diameter, $fn=8);\n    }\n}\n\n// Decorative crest mark on grip\ncolor([0.15, 0.1, 0.05]) {\n    translate([0, 0, bow_thickness/2 + 0.1])\n        rotate([0, 0, 45])\n            cube([3, 0.5, 0.2], center=true);\n    translate([0, 0, bow_thickness/2 + 0.1])\n        rotate([0, 0, -45])\n            cube([3, 0.5, 0.2], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "ribbon",
    "openscad_code": "// Medieval Pilgrim's Ribbon Badge - 14th Century Style\n// A devotional ribbon badge worn by pilgrims visiting Canterbury Cathedral\n// Features the traditional scallop shell motif and Latin inscription\n\n$fn = 32;\n\n// Overall dimensions\ntotal_length = 85;\ntotal_width = 25;\ntotal_thickness = 3;\n\n// Main ribbon body with realistic fabric folds\nmodule ribbon_body() {\n    color(\"goldenrod\") {\n        // Central body with gentle undulations\n        for(i = [0:8]) {\n            translate([i * 10 - 5, 0, 0]) {\n                difference() {\n                    // Create wavy surface for fabric texture\n                    hull() {\n                        translate([0, -12 + sin(i*0.8)*3, 0])\n                            cube([10, 8, total_thickness]);\n                        translate([0, 12 - sin(i*0.8)*3, 0])\n                            cube([10, 8, total_thickness]);\n                    }\n                    // Add subtle grooves for thread texture\n                    for(j = [1:3]) {\n                        translate([j * 2.5 - 5, -10, -0.5])\n                            cube([0.5, 20, total_thickness + 1]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Decorative end pieces with period-appropriate design\nmodule ribbon_ends() {\n    // Left end - pointed tip\n    color(\"goldenrod\") {\n        translate([-10, 0, 0])\n            rotate([0, 0, 90])\n                cylinder(h=total_thickness, r1=5, r2=0, center=true);\n        \n        // Right end - scallop shell badge\n        translate([85, 0, 0])\n            scallop_shell();\n    }\n}\n\n// Scallop shell badge - symbol of St. James pilgrimage\nmodule scallop_shell() {\n    color(\"gold\") {\n        // Main shell body\n        difference() {\n            intersection() {\n                sphere(d=16);\n                cube([16, 16, 8], center=true);\n            }\n            \n            // Shell ridges\n            for(i = [1:6]) {\n                rotate([0, 0, i * 30 - 90])\n                    translate([0, 0, -1])\n                        cube([12, 1.5, 10], center=true);\n            }\n        }\n        \n        // Central boss\n        translate([0, 0, 2])\n            sphere(d=3);\n    }\n}\n\n// Latin inscription band\nmodule inscription_band() {\n    color(\"saddlebrown\") {\n        // Raised inscription band\n        translate([25, 0, total_thickness/2 + 0.5])\n            cube([35, 8, 1]);\n        \n        // Simplified Latin text \"BENEDICAT\" as raised bumps\n        for(i = [0:8]) {\n            translate([30 + i * 3.5, 0, total_thickness/2 + 1.5])\n                sphere(d=1.5);\n        }\n    }\n}\n\n// Attachment loop at top\nmodule attachment_loop() {\n    color(\"goldenrod\") {\n        // Create a reinforced loop for pinning\n        translate([42.5, -12, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=8, r=3, center=true);\n                    cylinder(h=9, r=1.5, center=true);\n                }\n    }\n}\n\n// Weathering and age details\nmodule age_details() {\n    color(\"peru\") {\n        // Small holes and wear marks\n    for(pos = [[15, 5, 0], [60, -8, 0], [75, 3, 0]]) {\n        translate(pos)\n            cylinder(h=total_thickness + 1, r=0.5, center=true);\n    }\n    \n    // Frayed edges\n    for(i = [0:20]) {\n        translate([i * 4.25 - 5, \n                  (i % 2 == 0) ? 12.5 : -12.5, \n                  0])\n            cube([1, 2, total_thickness]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    ribbon_body();\n    ribbon_ends();\n    inscription_band();\n    attachment_loop();\n    age_details();\n}",
    "renders": true
  },
  {
    "historical_artifact": "lace",
    "openscad_code": "// Renaissance Venetian needle-lace collar segment (ca. 1580)\n// Approx. 85 mm wide, 45 mm tall, 3 mm thick – printable without supports\n\n// overall scale\nscale(0.85) {\n\n// main crescent-shaped collar band\ndifference() {\n    // outer crescent\n    linear_extrude(height = 3) offset(delta = 1) {\n        difference() {\n            circle(d = 100, $fn = 120);\n            translate([0, 20, 0]) circle(d = 70, $fn = 120);\n        }\n    }\n    // inner cutouts forming the lace voids\n    for (a = [-60:20:60]) {\n        rotate([0, 0, a]) translate([0, 42.5, 0]) {\n            cylinder(h = 4, d = 8, $fn = 16);\n        }\n    }\n}\n\n// decorative picots along upper rim\nmodule picot() {\n    color(\"AntiqueWhite\") sphere(d = 2.4, $fn = 8);\n}\nfor (a = [-70:10:70]) {\n    rotate([0, 0, a]) translate([0, 50, 1.8]) picot();\n}\n\n// repeating floral motif (rose window style) in lower border\nmodule petal() {\n    color(\"Ivory\") cylinder(h = 2, d1 = 4, d2 = 0, $fn = 6);\n}\nmodule flower() {\n    for (i = [0:6]) {\n        rotate([0, 0, i*60]) translate([5, 0, 0]) petal();\n    }\n    color(\"Ivory\") cylinder(h = 2, d = 4, $fn = 12);\n}\nfor (a = [-65:15:65]) {\n    rotate([0, 0, a]) translate([0, 35, 1.5]) flower();\n}\n\n// baroque scroll bridges connecting motifs\nmodule bridge() {\n    color(\"Gainsboro\") \n    rotate([90, 0, 0]) cylinder(h = 22, d = 2.4, $fn = 8);\n}\nfor (a = [-50:25:50]) {\n    rotate([0, 0, a]) translate([0, 43, 1.5]) bridge();\n}\n\n// central cartouche with heraldic detail\ntranslate([0, 0, 3]) {\n    difference() {\n        color(\"FloralWhite\") \n        linear_extrude(height = 2) offset(delta = 0.8) {\n            circle(d = 18, $fn = 64);\n        }\n        color(\"FloralWhite\") \n        linear_extrude(height = 3) {\n            text(\"S.P.Q.V.\", size = 8, halign = \"center\", valign = \"center\", font = \"Liberation Serif:style=Italic\");\n        }\n    }\n}\n\n}",
    "renders": true
  },
  {
    "historical_artifact": "bandeau",
    "openscad_code": "// Bronze Age Bandeau Diadem (circa 1200 BCE)\n// Based on Mycenaean gold examples found in shaft graves\n\n// Overall dimensions: 80 mm wide, 20 mm high, 3 mm thick\nbandeau_width = 80;\nbandeau_height = 20;\nbandeau_thickness = 3;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.2;\n\n// Create main curved band\nmodule bandeau_base() {\n    color(\"goldenrod\") difference() {\n        // Main curved strip\n        translate([0, 0, bandeau_thickness/2])\n            scale([1, 0.3, 1])\n                sphere(d = bandeau_width, $fn=64);\n        \n        // Hollow out the center\n        translate([0, 0, -1])\n            scale([1, 0.4, 2])\n                sphere(d = bandeau_width - 2*wall_thickness, $fn=64);\n    }\n}\n\n// Decorative spiral motif (common in Mycenaean work)\nmodule spiral_motif(radius, height, turns=2) {\n    for(i = [0:5:turns*360]) {\n        rotate([0, 0, i])\n            translate([radius * sin(i)/3, radius * cos(i)/3, 0])\n                cylinder(h = height, r = 1.2, $fn=12);\n    }\n}\n\n// Central boss decoration\nmodule central_boss() {\n    color(\"gold\") union() {\n        // Main boss\n        translate([0, 0, bandeau_thickness])\n            cylinder(h = 4, r = 6, $fn=32);\n        \n        // Decorative ring\n        translate([0, 0, bandeau_thickness + 4])\n            cylinder(h = 1, r = 7, $fn=32);\n        \n        // Spiral details on boss\n        spiral_motif(3, 2, 3);\n    }\n}\n\n// Side rosettes (8-petal flowers typical of the period)\nmodule side_rosette(x_pos) {\n    color(\"gold\") union() {\n        // Base disc\n        translate([x_pos, 0, bandeau_thickness])\n            cylinder(h = 2, r = 4, $fn=32);\n        \n        // Petals\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([x_pos + 3.5, 0, bandeau_thickness + 1])\n                    scale([1, 0.5, 1])\n                        cylinder(h = 0.8, r = 1.5, $fn=12);\n        }\n        \n        // Center bead\n        translate([x_pos, 0, bandeau_thickness + 2.5])\n            sphere(r = 1.5, $fn=16);\n    }\n}\n\n// Perforations for attachment strings\nmodule attachment_holes() {\n    color(\"goldenrod\") difference() {\n        // Show the original geometry\n        children();\n        \n        // Left hole\n        translate([-bandeau_width/2 + 5, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = bandeau_thickness + 2, r = 1.5, $fn=16);\n        \n        // Right hole\n        translate([bandeau_width/2 - 5, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = bandeau_thickness + 2, r = 1.5, $fn=16);\n    }\n}\n\n// Dotted border decoration\nmodule border_dots() {\n    color(\"gold\") for(i = [-bandeau_width/2 + 5 : 5 : bandeau_width/2 - 5]) {\n        translate([i, bandeau_height/2 - 2, bandeau_thickness])\n            sphere(r = 0.8, $fn=12);\n        translate([i, -bandeau_height/2 + 2, bandeau_thickness])\n            sphere(r = 0.8, $fn=12);\n    }\n}\n\n// Main assembly\nattachment_holes() union() {\n    bandeau_base();\n    central_boss();\n    side_rosette(-bandeau_width/3);\n    side_rosette(bandeau_width/3);\n    border_dots();\n}",
    "renders": true
  },
  {
    "historical_artifact": "headband",
    "openscad_code": "// Ancient Egyptian Gold Pectoral Headband - Medium Complexity\n// Based on New Kingdom period (1550-1077 BCE) burial artifacts\n// Features lotus flower motifs, solar disk, and protective uraeus cobras\n\n$fn = 50;\n\n// Main headband structure\nmodule headband_base() {\n    color(\"gold\") difference() {\n        // Outer curved band\n        rotate([90, 0, 0])\n            cylinder(h=5, r1=45, r2=45, center=true);\n        \n        // Inner cutout for head\n        rotate([90, 0, 0])\n            cylinder(h=6, r1=40, r2=40, center=true);\n        \n        // Flatten bottom edge\n        translate([0, 0, -3])\n            cube([100, 100, 6], center=true);\n    }\n}\n\n// Lotus flower motif\nmodule lotus_flower() {\n    color(\"gold\") union() {\n        // Central disk\n        cylinder(h=2, r=6, center=true);\n        \n        // Petals - 8 petals around circle\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([4, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=1, r1=3, r2=0, center=true);\n        }\n    }\n}\n\n// Uraeus cobra\nmodule uraeus() {\n    color(\"gold\") union() {\n        // Snake body\n        rotate([-90, 0, 0])\n            cylinder(h=12, r=3, center=false);\n        \n        // Head\n        translate([0, 0, 12])\n            sphere(4);\n        \n        // Hood flare\n        translate([0, 0, 10])\n            rotate([90, 0, 0])\n                cylinder(h=1, r1=8, r2=0, center=true);\n    }\n}\n\n// Solar disk\nmodule solar_disk() {\n    color(\"gold\") difference() {\n        // Main disk\n        cylinder(h=3, r=15, center=true);\n        \n        // Central hole\n        cylinder(h=4, r=5, center=true);\n        \n        // Rays - 12 triangular rays\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([10, 0, 0])\n                    cube([8, 3, 3], center=true);\n        }\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color(\"gold\") union() {\n        // Small spheres as border decoration\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([43, 0, 0])\n                    sphere(2);\n        }\n    }\n}\n\n// Hieroglyphic inscription panel\nmodule inscription_panel() {\n    color(\"gold\") difference() {\n        // Rectangular panel\n        translate([0, 35, 2.5])\n            cube([20, 10, 2], center=true);\n        \n        // Inscription grooves (simplified)\n        for(i = [0:2]) {\n            translate([0, 35, 3])\n                rotate([90, 0, 0])\n                    translate([0, i*3-3, 0])\n                        cube([15, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Assemble the complete headband\nunion() {\n    headband_base();\n    \n    // Front center solar disk\n    translate([0, 45, 2.5]) rotate([90, 0, 0]) solar_disk();\n    \n    // Side lotus flowers\n    translate([25, 30, 2.5]) lotus_flower();\n    translate([-25, 30, 2.5]) mirror([1, 0, 0]) lotus_flower();\n    \n    // Rear lotus flowers\n    translate([20, -35, 2.5]) lotus_flower();\n    translate([-20, -35, 2.5]) mirror([1, 0, 0]) lotus_flower();\n    \n    // Uraeus cobras at sides\n    translate([30, 0, 2.5]) rotate([0, 0, -30]) uraeus();\n    translate([-30, 0, 2.5]) mirror([1, 0, 0]) rotate([0, 0, -30]) uraeus();\n    \n    // Border decoration\n    border_pattern();\n    \n    // Inscription panels\n    inscription_panel();\n    mirror([1, 0, 0]) inscription_panel();\n}",
    "renders": true
  },
  {
    "historical_artifact": "coronet",
    "openscad_code": "// Medieval Coronet - Historical Artifact\n// Based on English 14th-15th century noble coronets\n\n// Main parameters\nband_width = 3;\nband_height = 4;\ncoronet_diameter = 60;\ncoronet_height = 25;\nwall_thickness = 2;\n\n// Colors\ngold_color = [0.8, 0.6, 0.2];\nsilver_color = [0.7, 0.7, 0.75];\nruby_color = [0.7, 0.1, 0.1];\n\nmodule main_band() {\n    color(gold_color)\n    difference() {\n        cylinder(h=band_height, d=coronet_diameter, $fn=100);\n        translate([0, 0, -0.1])\n            cylinder(h=band_height+0.2, d=coronet_diameter-wall_thickness*2, $fn=100);\n    }\n}\n\nmodule decorative_fleur_de_lis() {\n    // Stylized fleur-de-lis for coronet points\n    color(gold_color)\n    union() {\n        // Central petal\n        translate([0, 0, 0])\n            scale([1, 0.3, 2])\n                sphere(d=8, $fn=20);\n        \n        // Side petals\n        translate([-3, 0, -2])\n            rotate([0, 0, -30])\n            scale([0.7, 0.25, 1.5])\n                sphere(d=6, $fn=20);\n                \n        translate([3, 0, -2])\n            rotate([0, 0, 30])\n            scale([0.7, 0.25, 1.5])\n                sphere(d=6, $fn=20);\n    }\n}\n\nmodule coronet_point(angle) {\n    rotate([0, 0, angle])\n    translate([0, coronet_diameter/2 - band_width/2, band_height])\n    rotate([0, 0, 180])\n    decorative_fleur_de_lis();\n}\n\nmodule ruby_stone() {\n    color(ruby_color)\n    scale([1, 0.7, 0.5])\n        sphere(d=3, $fn=12);\n}\n\nmodule stone_setting(angle) {\n    rotate([0, 0, angle])\n    translate([0, coronet_diameter/2 - band_width/2 - 1, band_height/2])\n    ruby_stone();\n}\n\nmodule pearl() {\n    color(silver_color)\n    sphere(d=2.5, $fn=16);\n}\n\nmodule pearl_decoration(angle, offset) {\n    rotate([0, 0, angle])\n    translate([0, coronet_diameter/2 - wall_thickness - 1, offset])\n    pearl();\n}\n\n// Main assembly\nunion() {\n    main_band();\n    \n    // Eight coronet points (fleur-de-lis)\n    for (i = [0:8]) {\n        coronet_point(i * 45);\n    }\n    \n    // Eight ruby stones between points\n    for (i = [0:7]) {\n        stone_setting(i * 45 + 22.5);\n    }\n    \n    // Pearl decorations along top and bottom edges\n    for (i = [0:15]) {\n        pearl_decoration(i * 22.5, band_height + 0.5);\n        pearl_decoration(i * 22.5 + 11.25, -0.5);\n    }\n    \n    // Inner comfort ring for wearing\n    color(silver_color)\n    translate([0, 0, -1])\n    cylinder(h=2, d=coronet_diameter-wall_thickness*2-4, $fn=100);\n}",
    "renders": true
  },
  {
    "historical_artifact": "frontlet",
    "openscad_code": "// Frontlet - Ancient Greek Bronze Helmet Forehead Plate\n// Realistic style, medium complexity\n\n$fn = 64;\n\n// Main dimensions (mm)\nplate_width = 85;\nplate_height = 35;\nplate_thickness = 4;\nborder_thickness = 2;\nrivet_diameter = 3;\nrivet_height = 1.5;\n\n// Color definitions\nbronze_color = [0.72, 0.45, 0.2];\n\n// Main frontlet plate with curved top\nmodule frontlet_plate() {\n    color(bronze_color)\n    union() {\n        // Base plate with curved top edge\n        difference() {\n            // Main rectangular plate\n            translate([-plate_width/2, 0, 0])\n                cube([plate_width, plate_height, plate_thickness]);\n            \n            // Curve top edge\n            translate([0, plate_height, -1])\n                cylinder(h=plate_thickness+2, r=plate_width/2);\n        }\n        \n        // Reinforced border along edges\n        translate([-plate_width/2 - border_thickness, -border_thickness, 0])\n            cube([plate_width + 2*border_thickness, border_thickness, plate_thickness]);\n        translate([-plate_width/2 - border_thickness, plate_height, 0])\n            cube([plate_width + 2*border_thickness, border_thickness, plate_thickness]);\n        translate([-plate_width/2 - border_thickness, 0, 0])\n            cube([border_thickness, plate_height, plate_thickness]);\n        translate([plate_width/2, 0, 0])\n            cube([border_thickness, plate_height, plate_thickness]);\n    }\n}\n\n// Decorative meander pattern border\nmodule meander_pattern() {\n    color(bronze_color)\n    for(i = [-3:3]) {\n        translate([i * 10, 5, plate_thickness])\n            cube([8, 2, 1]);\n        translate([i * 10 + 5, 8, plate_thickness])\n            cube([2, 8, 1]);\n    }\n}\n\n// Heraldic decoration - stylized horse\nmodule horse_emblem() {\n    color(bronze_color)\n    translate([0, 20, plate_thickness])\n    union() {\n        // Horse head shape\n        scale([0.8, 0.6, 1])\n            cylinder(h=2, r=12);\n        \n        // Mane details\n        for(i = [-2:2]) {\n            translate([i * 3, 8, 0])\n                cube([1, 4, 2]);\n        }\n        \n        // Eye detail\n        translate([5, 2, 1])\n            sphere(r=1.5);\n    }\n}\n\n// Rivet holes for attachment\nmodule rivet_holes() {\n    for(pos = [[-30, 8], [30, 8], [-30, 25], [30, 25]]) {\n        translate([pos[0], pos[1], -0.5])\n            cylinder(h=plate_thickness+1, r=rivet_diameter/2);\n    }\n}\n\n// Rivet heads\nmodule rivets() {\n    color(bronze_color)\n    for(pos = [[-30, 8], [30, 8], [-30, 25], [30, 25]]) {\n        translate([pos[0], pos[1], 0])\n            cylinder(h=rivet_height, r=rivet_diameter/2);\n    }\n}\n\n// Engraved inscription band\nmodule inscription_band() {\n    color(bronze_color)\n    difference() {\n        // Raised band\n        translate([-plate_width/2 + 10, 12, plate_thickness])\n            cube([plate_width - 20, 6, 0.5]);\n        \n        // Engraved letters (simplified)\n        for(i = [0:8]) {\n            translate([-plate_width/2 + 15 + i*6, 14.5, plate_thickness+0.5])\n                cube([2, 2, 0.5]);\n        }\n    }\n}\n\n// Combine all elements\nunion() {\n    // Main structure\n    difference() {\n        union() {\n            frontlet_plate();\n            rivets();\n        }\n        rivet_holes();\n    }\n    \n    // Decorative elements\n    meander_pattern();\n    horse_emblem();\n    inscription_band();\n}",
    "renders": true
  },
  {
    "historical_artifact": "wreath",
    "openscad_code": "// Historical Roman Laurel Wreath - Medium Complexity\n// Based on Imperial Roman wreaths (circa 1st-3rd century CE)\n// Features: Laurel leaves, berries, and decorative fillet\n\n$fn = 32;\n\n// Colors for realistic appearance\ncolor_gold = [0.83, 0.69, 0.22];\ncolor_leaf = [0.13, 0.37, 0.31];\ncolor_berry = [0.73, 0.16, 0.16];\n\n// Main wreath assembly\nmodule wreath() {\n    union() {\n        // Base circlet - flat band for structure\n        color(color_gold) \n        translate([0, 0, -2])\n        difference() {\n            cylinder(h=4, r=25, center=true);\n            cylinder(h=5, r=22, center=true);\n        }\n        \n        // Laurel leaves around the circle\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5]) \n            translate([25, 0, 0])\n            laurel_leaf();\n        }\n        \n        // Laurel berries between leaves\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5 + 11.25]) \n            translate([28, 0, 2])\n            berry_cluster();\n        }\n        \n        // Decorative fillet at front\n        color(color_gold)\n        translate([25, 0, 5])\n        rotate([90, 0, 0])\n        decorative_fillet();\n    }\n}\n\n// Single laurel leaf with historical accuracy\nmodule laurel_leaf() {\n    color(color_leaf)\n    union() {\n        // Main leaf blade\n        rotate([0, 90, 0])\n        linear_extrude(height=0.8, center=true)\n        polygon(points=[\n            [0, 0],\n            [8, 3],\n            [12, 2],\n            [15, 0],\n            [12, -2],\n            [8, -3],\n            [0, 0]\n        ]);\n        \n        // Leaf stem\n        translate([0, 0, -0.4])\n        rotate([0, 90, 0])\n        cylinder(h=3, r=0.5);\n    }\n}\n\n// Cluster of small laurel berries\nmodule berry_cluster() {\n    color(color_berry)\n    for(i = [0:3]) {\n        translate([i * 1.2 - 1.8, 0, 0])\n        sphere(r=1);\n    }\n}\n\n// Decorative front fillet with inscription\nmodule decorative_fillet() {\n    // Main ribbon\n    linear_extrude(height=1.5)\n    polygon(points=[\n        [-8, -3],\n        [8, -3],\n        [10, 0],\n        [8, 3],\n        [-8, 3],\n        [-10, 0]\n    ]);\n    \n    // Raised inscription panel\n    translate([0, 0, 1.6])\n    linear_extrude(height=0.5)\n    square([12, 2], center=true);\n}\n\n// Render the complete wreath\nwreath();",
    "renders": true
  },
  {
    "historical_artifact": "garland",
    "openscad_code": "// Classical Greek laurel garland (stylized ceremonial wreath)\n// Medium complexity, 3D-printable, historically inspired\n// Overall diameter ~70 mm, thickness ~7 mm\n\nmodule leaf() {\n    // Single laurel leaf: ellipsoid with slight twist\n    translate([0,0,0.5]) rotate([5,0,0]) scale([1,0.4,0.15]) sphere(d=6, $fn=12);\n    translate([1.5,0,0.5]) rotate([8,0,5]) scale([1.2,0.45,0.12]) sphere(d=5, $fn=10);\n}\n\nmodule berry() {\n    // Small berry at intersection points\n    translate([0,0,2]) sphere(d=2.5, $fn=6);\n}\n\nmodule leaf_pair(a) {\n    // Pair of leaves angled for natural look\n    rotate([0,0,a]) {\n        translate([25,0,0]) rotate([0,0,-25]) leaf();\n        translate([25,0,0]) rotate([0,0,25]) scale([1,-1,1]) leaf();\n    }\n}\n\n// Main circular band\ndifference() {\n    color(\"goldenrod\") \n    rotate_extrude($fn=48) \n        translate([30,0,0]) square([3,4], center=true);\n    \n    // Inner relief groove\n    color(\"goldenrod\") \n    rotate_extrude($fn=48) \n        translate([30,0,0]) square([0.8,3.5], center=true);\n}\n\n// Decorative leaves around the garland\nfor (i=[0:30:360]) {\n    leaf_pair(i);\n}\n\n// Berries at cardinal points\nfor (i=[45:90:360]) {\n    rotate([0,0,i]) translate([30,0,4]) berry();\n}\n\n// Central inscription band (Greek key pattern segments)\nmodule key_segment() {\n    difference() {\n        translate([0,0,0.5]) cube([8,1.5,1], center=true);\n        for (x=[-3:2:3]) {\n            translate([x,0,1]) cube([1,1.5,1.1], center=true);\n        }\n    }\n}\n\n// Place 8 key segments around inner edge\nfor (i=[0:45:360]) {\n    color(\"saddlebrown\") rotate([0,0,i]) translate([25,0,4.5]) key_segment();\n}\n\n// Reinforcement ring at back\ncolor(\"goldenrod\") \nrotate_extrude($fn=48) \n    translate([30,0,0]) square([2,1], center=true);",
    "renders": true
  },
  {
    "historical_artifact": "altar",
    "openscad_code": "// Ancient Roman portable altar (ara) - 1st-2nd century AD style\n// Designed for 3D printing - 75mm wide base\n\n// Main altar color - marble-like white\ncolor([0.95, 0.93, 0.88]) {\n    \n    // Altar base with stepped design\n    module altar_base() {\n        // Bottom step\n        translate([0, 0, 0])\n            cube([75, 50, 8], center = true);\n        \n        // Middle step\n        translate([0, 0, 8])\n            cube([65, 40, 6], center = true);\n        \n        // Top step\n        translate([0, 0, 14])\n            cube([55, 30, 4], center = true);\n    }\n    \n    // Main altar body\n    module altar_body() {\n        translate([0, 0, 32])\n            cube([45, 25, 35], center = true);\n    }\n    \n    // Decorative cornice with dentil molding\n    module cornice() {\n        // Main cornice block\n        translate([0, 0, 49.5])\n            cube([48, 28, 3], center = true);\n        \n        // Dentil molding details\n        for (i = [-20:5:20]) {\n            translate([i, 12, 49.5])\n                cube([3, 2, 3], center = true);\n            translate([i, -12, 49.5])\n                cube([3, 2, 3], center = true);\n        }\n        \n        for (j = [-10:5:10]) {\n            translate([21, j, 49.5])\n                cube([2, 3, 3], center = true);\n            translate([-21, j, 49.5])\n                cube([2, 3, 3], center = true);\n        }\n    }\n    \n    // Altar top with libation basin\n    module altar_top() {\n        // Top slab\n        translate([0, 0, 53])\n            cube([40, 22, 2], center = true);\n        \n        // Libation basin\n        translate([0, 0, 54])\n            difference() {\n                cube([25, 15, 3], center = true);\n                translate([0, 0, 1])\n                    cube([22, 12, 3], center = true);\n            }\n    }\n    \n    // Decorative garlands (simplified)\n    module garlands() {\n        color([0.8, 0.7, 0.3]) {  // Bronze/gold color\n            // Front garland\n            for (i = [-15:5:15]) {\n                translate([i, 12, 35])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3, r = 1.5, center = true);\n            }\n            \n            // Side garlands\n            for (j = [-8:4:8]) {\n                translate([22, j, 35])\n                    rotate([90, 0, 90])\n                        cylinder(h = 3, r = 1.5, center = true);\n            }\n        }\n    }\n    \n    // Ritual inscriptions (simplified Latin text)\n    module inscriptions() {\n        color([0.6, 0.5, 0.25]) {  // Dark bronze for text\n            // Front inscription panel\n            translate([0, 13, 30])\n                cube([30, 1, 5], center = true);\n            \n            // Side inscription panels\n            translate([23, 0, 30])\n                rotate([0, 0, 90])\n                    cube([20, 1, 5], center = true);\n            translate([-23, 0, 30])\n                rotate([0, 0, 90])\n                    cube([20, 1, 5], center = true);\n        }\n    }\n    \n    // Sacrificial channels\n    module channels() {\n        color([0.3, 0.3, 0.3]) {  // Dark gray for channels\n            // Front channel\n            translate([0, 12, 54.5])\n                cube([2, 12, 0.5], center = true);\n            \n            // Side channels\n            translate([15, 0, 54.5])\n                rotate([0, 0, 90])\n                    cube([2, 10, 0.5], center = true);\n            translate([-15, 0, 54.5])\n                rotate([0, 0, 90])\n                    cube([2, 10, 0.5], center = true);\n        }\n    }\n    \n    // Assemble the altar\n    union() {\n        altar_base();\n        altar_body();\n        cornice();\n        altar_top();\n        garlands();\n        inscriptions();\n        channels();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "shrine",
    "openscad_code": "// Shinto Shrine Miniature\n// Based on traditional Japanese Hachiman-style shrine architecture\n// Overall dimensions: 60mm x 40mm x 55mm\n\n$fn = 50;\n\n// Main colors\ncolor_roof = [0.4, 0.2, 0.1];\ncolor_wood = [0.6, 0.4, 0.2];\ncolor_gold = [0.8, 0.7, 0.2];\n\nmodule main_structure() {\n    // Base platform\n    color(color_wood)\n    translate([0, 0, 2])\n    cube([50, 35, 4], center = true);\n    \n    // Main hall body\n    color(color_wood)\n    translate([0, 0, 10])\n    cube([40, 30, 16], center = true);\n    \n    // Entrance step\n    color(color_wood)\n    translate([0, 20, 6])\n    cube([20, 4, 8], center = true);\n}\n\nmodule roof_structure() {\n    // Main roof - curved style\n    color(color_roof)\n    translate([0, 0, 26])\n    scale([1.4, 1.1, 0.5])\n    sphere(20);\n    \n    // Roof overhang edges\n    color(color_roof)\n    translate([0, 0, 26])\n    difference() {\n        scale([1.5, 1.2, 0.3])\n        cube([45, 35, 8], center = true);\n        scale([1.3, 1, 0.4])\n        cube([45, 35, 8], center = true);\n    }\n    \n    // Ridge pole\n    color(color_gold)\n    translate([0, 0, 32])\n    rotate([90, 0, 0])\n    cylinder(h = 45, d = 2, center = true);\n}\n\nmodule pillars() {\n    // Front pillars\n    for(x = [-15, 15]) {\n        color(color_wood)\n        translate([x, 10, 14])\n        cylinder(h = 20, d = 3, center = true);\n    }\n    \n    // Back pillars\n    for(x = [-15, 15]) {\n        color(color_wood)\n        translate([x, -10, 14])\n        cylinder(h = 20, d = 3, center = true);\n    }\n}\n\nmodule decorative_elements() {\n    // Chigi (crossed roof beams)\n    color(color_wood)\n    translate([0, 0, 34]) {\n        rotate([0, 0, 20])\n        cube([30, 2, 2], center = true);\n        rotate([0, 0, -20])\n        cube([30, 2, 2], center = true);\n    }\n    \n    // Katsuogi (roof ornaments)\n    for(x = [-12, -6, 0, 6, 12]) {\n        color(color_gold)\n        translate([x, 0, 34])\n        cylinder(h = 3, d = 2, center = true);\n    }\n    \n    // Entrance decoration\n    color(color_gold)\n    translate([0, 19, 18])\n    rotate([90, 0, 0])\n    cylinder(h = 16, d = 0.5, center = true);\n    \n    // Sacred rope (Shimenawa)\n    color([0.9, 0.9, 0.8])\n    translate([0, 18, 20])\n    rotate([90, 0, 0])\n    scale([1, 1, 0.3])\n    cylinder(h = 18, d = 2, center = true);\n}\n\nmodule offering_box() {\n    // Donation box\n    color(color_gold)\n    translate([0, 0, 6])\n    cube([8, 6, 4], center = true);\n    \n    // Slot for donations\n    color([0, 0, 0])\n    translate([0, 3, 8])\n    cube([6, 0.5, 1], center = true);\n}\n\n// Assembly\nunion() {\n    main_structure();\n    roof_structure();\n    pillars();\n    decorative_elements();\n    offering_box();\n}\n\n// Print orientation marker\ncolor([0.5, 0.5, 0.5])\ntranslate([0, -25, 0])\ncube([2, 2, 2], center = true);",
    "renders": true
  },
  {
    "historical_artifact": "temple",
    "openscad_code": "// Temple of Bel - Palmyra Historical Artifact (3D printable)\n// Scale model of the 1st century CE temple, 100mm wide\n\n// Colors\ncolor(\"burlywood\") temple();\n\nmodule temple() {\n    // Base platform (solid foundation)\n    translate([0, 0, 0])\n        cube([100, 50, 5], center = true);\n\n    // Temple cella (main chamber)\n    translate([0, 0, 7.5])\n        cube([40, 30, 15], center = true);\n\n    // Peristyle columns\n    for (x = [-30, -10, 10, 30]) {\n        column(x, -20);\n        column(x, 20);\n    }\n\n    // Portico columns\n    for (x = [-30, -10, 10, 30]) {\n        column(x, -10);\n    }\n\n    // Entablature\n    translate([0, 0, 17.5])\n        cube([80, 30, 3], center = true);\n\n    // Pediment (triangular gable)\n    translate([0, 0, 20.5]) {\n        rotate([90, 0, 0])\n            cylinder(h = 40, r1 = 20, r2 = 0, $fn = 3);\n    }\n\n    // Decorative cornice\n    translate([0, 0, 19])\n        cube([82, 32, 1], center = true);\n\n    // Inscription panel\n    color(\"saddlebrown\")\n        translate([0, 0, 16])\n            cube([30, 8, 0.5], center = true);\n\n    // Staircase\n    for (step = [0:1:5]) {\n        translate([0, -30 - step, step/2])\n            cube([60 + step*2, 2, 1], center = true);\n    }\n\n    // Roof details - acroteria\n    color(\"goldenrod\") {\n        translate([-30, 0, 21])\n            sphere(2);\n        translate([30, 0, 21])\n            sphere(2);\n    }\n\n    // Interior altar\n    color(\"saddlebrown\")\n        translate([0, 5, 13])\n            cube([8, 6, 4], center = true);\n}\n\nmodule column(x, y) {\n    // Column base\n    translate([x, y, 2.5])\n        cylinder(h = 2, r = 3, $fn = 16);\n\n    // Column shaft with fluting\n    translate([x, y, 10])\n        cylinder(h = 10, r = 2.5, $fn = 16);\n\n    // Column capital (Corinthian style simplified)\n    color(\"goldenrod\")\n        translate([x, y, 15.5])\n            cylinder(h = 2, r1 = 3.5, r2 = 2.5, $fn = 16);\n}",
    "renders": true
  },
  {
    "historical_artifact": "statue",
    "openscad_code": "// Egyptian Canopic Jar of Hapi (Son of Horus)\n// Medium complexity realistic style 3D printable statue artifact (65 mm tall)\n\n// Base dimensions in mm\nbase_d = 40;\nbase_h = 8;\n\n// Jar body dimensions\njar_d = 36;\njar_h = 40;\n\n// Lid dimensions\nlid_d = 38;\nlid_h = 15;\n\n// Head dimensions\nhead_d = 28;\nhead_h = 12;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Color definitions\ncolor_base = [0.65, 0.5, 0.3];    // Sandstone\ncolor_jar = [0.9, 0.85, 0.7];     // Calcite\ncolor_head = [0.4, 0.3, 0.2];     // Bronze\n\n// Main assembly\nunion() {\n    // Base pedestal\n    color(color_base)\n    translate([0, 0, 0])\n    cylinder(h = base_h, d = base_d, $fn = 64);\n    \n    // Jar body (hollow with bottom)\n    difference() {\n        // Outer jar\n        color(color_jar)\n        translate([0, 0, base_h])\n        cylinder(h = jar_h, d = jar_d, $fn = 64);\n        \n        // Inner hollow\n        translate([0, 0, base_h + wall])\n        cylinder(h = jar_h - wall, d = jar_d - 2*wall, $fn = 64);\n    }\n    \n    // Decorative collar ring\n    color(color_base)\n    translate([0, 0, base_h + jar_h - 3])\n    cylinder(h = 6, d = lid_d + 4, $fn = 64);\n    \n    // Lid with baboon head (Hapi)\n    union() {\n        // Lid disk\n        color(color_jar)\n        translate([0, 0, base_h + jar_h])\n        cylinder(h = 8, d = lid_d, $fn = 64);\n        \n        // Neck transition\n        color(color_jar)\n        translate([0, 0, base_h + jar_h + 8])\n        cylinder(h = 4, d1 = lid_d, d2 = head_d, $fn = 64);\n        \n        // Baboon head (Hapi)\n        color(color_head)\n        translate([0, 0, base_h + jar_h + 12])\n        union() {\n            // Main head sphere\n            sphere(d = head_h, $fn = 32);\n            \n            // Snout\n            translate([0, head_d/3, -head_h/4])\n            scale([1, 1.2, 0.8])\n            sphere(d = head_h/2, $fn = 32);\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([side * head_d/2.5, 0, head_h/4])\n                rotate([0, side * 20, 0])\n                scale([0.5, 0.3, 0.5])\n                sphere(d = head_h/2, $fn = 16);\n            }\n        }\n        \n        // Decorative hieroglyphic bands\n        color([0.1, 0.1, 0.1])\n        for(z = [base_h + 10, base_h + 20, base_h + 30]) {\n            translate([0, 0, z])\n            cylinder(h = 1, d = jar_d + 1, $fn = 64);\n        }\n        \n        // Offering inscription band on lid\n        translate([0, 0, base_h + jar_h + 4])\n        cylinder(h = 2, d = lid_d + 2, $fn = 64);\n    }\n}\n\n// Small canopic jar feet for stability\ncolor(color_base)\nfor(angle = [45, 135, 225, 315]) {\n    rotate([0, 0, angle])\n    translate([base_d/2 - 4, 0, 0])\n    cube([8, 8, 4], center = true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "idol",
    "openscad_code": "// Cycladic Idol - Historical artifact (c. 2800-2300 BCE)\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\nmodule idol_body() {\n    // Main torso\n    difference() {\n        // Upper body\n        translate([0, 0, 15])\n            scale([1.2, 0.4, 3])\n            sphere(r = 10);\n        \n        // Neck groove\n        translate([0, 0, 35])\n            scale([0.4, 0.9, 0.3])\n            sphere(r = 10);\n        \n        // Arm grooves\n        translate([8, 0, 25])\n            rotate([0, 90, 0])\n            cylinder(h = 15, r = 2);\n        \n        translate([-8, 0, 25])\n            rotate([0, 90, 0])\n            cylinder(h = 15, r = 2);\n    }\n}\n\nmodule idol_head() {\n    // Head with characteristic Cycladic tilt\n    translate([0, 0, 45])\n    rotate([15, 0, 0])\n    difference() {\n        // Main head shape\n        sphere(r = 8);\n        \n        // Nose ridge\n        translate([0, 4.5, -2])\n            cube([2, 3, 6], center = true);\n        \n        // Eye grooves\n        for(x = [-3, 3]) {\n            translate([x, 2.5, 1])\n                rotate([0, 90, 0])\n                cylinder(h = 3, r = 1.5);\n        }\n    }\n}\n\nmodule pubic_triangle() {\n    // Carved pubic triangle\n    translate([0, 0, 8])\n    difference() {\n        cube([10, 1, 6], center = true);\n        \n        // Triangle incision\n        translate([0, 0, 1])\n            rotate([0, 90, 0])\n            cylinder(h = 8, r1 = 4, r2 = 0);\n    }\n}\n\nmodule legs() {\n    // Separate legs\n    for(x = [-4, 4]) {\n        translate([x, 0, 0])\n            scale([0.8, 1, 1.5])\n            cylinder(h = 15, r = 3);\n    }\n}\n\nmodule base() {\n    // Simple flat base for 3D printing stability\n    translate([0, 0, -2])\n        cube([20, 10, 4], center = true);\n}\n\nmodule decorative_lines() {\n    // Incised decorative lines on torso\n    color(\"white\")\n    for(z = [20, 25, 30]) {\n        translate([0, 0, z])\n            scale([1.2, 0.4, 0.1])\n            sphere(r = 10);\n    }\n}\n\n// Main assembly\ncolor(\"white\") {\n    union() {\n        base();\n        legs();\n        idol_body();\n        idol_head();\n        pubic_triangle();\n        \n        // Subtle incised decorations\n        %decorative_lines();\n    }\n}\n\n// Artifact orientation marker\ncolor(\"red\")\ntranslate([0, -6, 2])\n    cube([1, 1, 1]);",
    "renders": true
  },
  {
    "historical_artifact": "relic",
    "openscad_code": "// Ancient Sumerian Clay Tablet with Cuneiform Inscriptions\n// A realistic model of a cuneiform tablet with authentic proportions and features\n\n$fn = 32;\n\n// Overall dimensions\ntablet_width = 60;\ntablet_height = 40;\ntablet_thickness = 15;\n\n// Color for fired clay\ncolor([0.6, 0.4, 0.3]) {\n\n// Main tablet body - slightly curved for realism\ndifference() {\n    union() {\n        // Base tablet with gentle curvature\n        translate([0, 0, tablet_thickness/2])\n        scale([1, 1, 0.9])\n        cube([tablet_width, tablet_height, tablet_thickness], center=true);\n        \n        // Rounded edges\n        hull() {\n            for(x = [-tablet_width/2+3, tablet_width/2-3])\n                for(y = [-tablet_height/2+3, tablet_height/2-3])\n                    translate([x, y, 0])\n                    cylinder(r=3, h=tablet_thickness, center=true);\n        }\n    }\n    \n    // Carved center depression for writing surface\n    translate([0, 0, tablet_thickness/2-0.5])\n    cube([tablet_width-8, tablet_height-8, 2], center=true);\n}\n\n// Cuneiform inscriptions - wedge impressions\nmodule cuneiform_wedge(x, y, angle, size) {\n    translate([x, y, tablet_thickness/2+1])\n    rotate([0, 0, angle])\n    linear_extrude(height=1.5, convexity=10)\n    polygon(points=[\n        [-size, -size*0.3],\n        [size, 0],\n        [-size, size*0.3]\n    ]);\n}\n\n// Rows of cuneiform text\nfor(row = [0:3]) {\n    y_pos = -tablet_height/4 + row * 8;\n    for(col = [0:4]) {\n        x_pos = -tablet_width/3 + col * 10 + (row%2)*5;\n        cuneiform_wedge(x_pos, y_pos, 45, 2);\n        cuneiform_wedge(x_pos+3, y_pos, -45, 2);\n    }\n}\n\n// Side columns with decorative pattern\nmodule side_pattern() {\n    for(i = [0:2]) {\n        translate([0, -tablet_height/3 + i*10, 0])\n        cube([1, 6, 0.5], center=true);\n    }\n}\n\n// Left side decoration\ntranslate([-tablet_width/2+2, 0, 0])\nside_pattern();\n\n// Right side decoration\ntranslate([tablet_width/2-2, 0, 0])\nside_pattern();\n\n// Top and bottom decorative borders\nmodule border_pattern(y_pos) {\n    for(x = [-tablet_width/2+5:6:tablet_width/2-5]) {\n        translate([x, y_pos, tablet_thickness/2+0.5])\n        cylinder(r=1, h=1);\n    }\n}\n\nborder_pattern(tablet_height/2-3);\nborder_pattern(-tablet_height/2+3);\n\n// Seal impression at bottom\ntranslate([0, -tablet_height/4, tablet_thickness/2+1])\nrotate([0, 0, 0])\ncylinder(r=5, h=1, $fn=6);\n\n// Small chip/damage for realism\ntranslate([tablet_width/3, tablet_height/3, tablet_thickness/2])\nsphere(r=2);\n\n// Corner reinforcements (thicker clay at corners)\nfor(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x*tablet_width/2.2, y*tablet_height/2.2, 0])\n        cylinder(r=4, h=tablet_thickness+1, center=true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "rosary",
    "openscad_code": "// Gothic Rosary, 15th century style, Flemish region\n// Overall length ~90 mm, suitable for 3D printing\n\n$fn = 64;\n\n// Color scheme based on period materials\ncolor(\"darkgoldenrod\") cross();\ncolor(\"burlywood\") beads();\n\nmodule cross() {\n    // Gothic crucifix, 15 mm tall\n    translate([0, 0, 40]) {\n        difference() {\n            union() {\n                // Cross body\n                cube([2, 8, 0.5], center=true);\n                cube([8, 2, 0.5], center=true);\n                // Fleur-de-lis style terminals\n                for (a = [0:90:270]) {\n                    rotate([0, 0, a])\n                        translate([5, 0, 0])\n                            scale([0.5, 0.5, 1])\n                                cylinder(h=0.5, r1=2, r2=0);\n                }\n            }\n            // Engraved IHS christogram\n            translate([0, -1, 0.3])\n                cube([2, 0.5, 0.2], center=true);\n            translate([0, 0, 0.3])\n                cube([1, 2, 0.2], center=true);\n            translate([0, 1, 0.3])\n                cube([2, 0.5, 0.2], center=true);\n        }\n    }\n}\n\nmodule beads() {\n    // Rosary chain with Gothic spacing\n    // Main loop: 5 decades (50 Hail Mary beads)\n    for (i = [0:49]) {\n        angle = i * 360 / 50;\n        radius = 18;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            20\n        ])\n            sphere(d=2.5);\n    }\n    \n    // Larger Our Father beads (5)\n    for (i = [0:4]) {\n        angle = i * 360 / 5;\n        radius = 18;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            20\n        ])\n            sphere(d=3.5);\n    }\n    \n    // Drop chain with 5 beads leading to cross\n    for (i = [0:4]) {\n        translate([0, 0, 35 - i * 3.5])\n            sphere(d=i == 0 ? 3.5 : 2.5); // Larger bead at junction\n    }\n    \n    // Period-correct connector rings between segments\n    for (i = [0:4]) {\n        angle = i * 72;\n        radius = 18;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            20\n        ])\n            rotate([90, 0, angle])\n                cylinder(h=1, r=0.8, center=true);\n    }\n}\n\n// Central medal - Gothic quatrefoil\ncolor(\"goldenrod\") {\n    translate([0, 0, 20]) {\n        difference() {\n            cylinder(h=1, r=4.5);\n            // Quatrefoil cutouts\n            for (a = [0:90:270]) {\n                rotate([0, 0, a])\n                    translate([2.5, 0, -0.5])\n                        cube([2, 2, 2], center=true);\n            }\n            // Central rose window pattern\n            for (i = [0:7]) {\n                rotate([0, 0, i * 45])\n                    translate([1.5, 0, -0.5])\n                        cube([0.5, 1, 2], center=true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "censer",
    "openscad_code": "// Historical Censer - Byzantine style hanging censer\n// Suitable for 3D printing, 60mm diameter\n\n$fs = 0.5;\n$fa = 1;\n\n// Main body parameters\nbody_d = 60;\nbody_h = 35;\nwall_th = 2;\nchain_h = 20;\n\n// Colors\nbronze = [101/255, 67/255, 33/255];\ndark_bronze = [80/255, 50/255, 25/255];\n\nmodule censer_body() {\n    color(bronze) {\n        difference() {\n            // Main bowl\n            cylinder(h = body_h, d = body_d, $fn = 64);\n            // Hollow interior\n            translate([0, 0, wall_th])\n                cylinder(h = body_h - wall_th, d = body_d - 2*wall_th, $fn = 64);\n            // Decorative holes - 4 sides\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                    translate([body_d/2 - wall_th - 3, 0, body_h/2])\n                        rotate([90, 0, 0])\n                            cylinder(h = wall_th + 2, d = 6, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule decorative_rim() {\n    color(dark_bronze) {\n        // Top rim with cross pattern\n        difference() {\n            cylinder(h = 4, d = body_d + 4, $fn = 64);\n            translate([0, 0, -1])\n                cylinder(h = 6, d = body_d, $fn = 64);\n        }\n        \n        // Four small crosses on rim\n        for(i = [0:3]) {\n            rotate([0, 0, i*90 + 45])\n                translate([body_d/2 + 1, 0, 2])\n                    scale([1, 0.2, 1])\n                        cylinder(h = 3, d = 5, $fn = 32);\n        }\n    }\n}\n\nmodule chains() {\n    color([0.7, 0.7, 0.7]) {\n        // Three chain attachment points\n        for(i = [0:2]) {\n            angle = i*120;\n            rotate([0, 0, angle])\n                translate([body_d/2 - 5, 0, body_h + 2])\n                    cylinder(h = chain_h, d = 2, $fn = 8);\n        }\n        \n        // Central ring\n        translate([0, 0, body_h + chain_h + 2])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d = 8, $fn = 32);\n    }\n}\n\nmodule base_stand() {\n    color(bronze) {\n        // Decorative base ring\n        cylinder(h = 3, d = body_d - 10, $fn = 64);\n        \n        // Small feet\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n                translate([body_d/3, 0, 0])\n                    cylinder(h = 5, d = 6, $fn = 16);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 5]) {\n    base_stand();\n    translate([0, 0, 5]) {\n        censer_body();\n        decorative_rim();\n        chains();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "paten",
    "openscad_code": "// Historical Paten (6th-7th century Byzantine style)\n// A small plate used to hold the Eucharistic bread during Christian liturgy\n\npaten_diameter = 80;\npaten_height = 8;\nrim_height = 6;\ncross_arm_width = 8;\ncross_arm_thickness = 2;\n\nmodule paten_base() {\n    // Main circular dish body\n    difference() {\n        cylinder(h=paten_height, d=paten_diameter, $fn=64);\n        \n        // Hollow out the center for 3D printing\n        translate([0, 0, 2])\n            cylinder(h=paten_height-1, d=paten_diameter-4, $fn=64);\n    }\n}\n\nmodule raised_rim() {\n    // Decorative raised rim with inscription zone\n    difference() {\n        // Outer rim ring\n        translate([0, 0, paten_height-2])\n            cylinder(h=rim_height, d=paten_diameter, $fn=64);\n            \n        // Inner cutout for rim\n        translate([0, 0, paten_height-2])\n            cylinder(h=rim_height, d=paten_diameter-8, $fn=64);\n    }\n}\n\nmodule central_cross() {\n    // Byzantine style cross with flared arms\n    union() {\n        // Vertical arm\n        color(\"gold\")\n        translate([0, 0, paten_height+rim_height-3])\n            cube([cross_arm_width, cross_arm_width*3, cross_arm_thickness], center=true);\n            \n        // Horizontal arm\n        color(\"gold\")\n        translate([0, 0, paten_height+rim_height-3])\n            cube([cross_arm_width*3, cross_arm_width, cross_arm_thickness], center=true);\n            \n        // Center medallion\n        color(\"gold\")\n        translate([0, 0, paten_height+rim_height-2])\n            cylinder(h=cross_arm_thickness+1, d=cross_arm_width*1.5, $fn=32);\n    }\n}\n\nmodule decorative_beads() {\n    // Small decorative beads around the rim\n    for(i=[0:30]) {\n        angle = i * 12;\n        radius = (paten_diameter-6)/2;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        color(\"gold\")\n        translate([x, y, paten_height+rim_height-2])\n            sphere(d=3, $fn=16);\n    }\n}\n\nmodule greek_inscription() {\n    // Simplified Greek inscription \"IC XC NIKA\" (Jesus Christ Conquers)\n    // Represented as raised dots in circular pattern\n    \n    for(i=[0:8]) {\n        angle = i * 40 - 20;\n        radius = (paten_diameter-20)/2;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        color(\"gold\")\n        translate([x, y, paten_height+rim_height-1.5])\n            sphere(d=2, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base paten in silver\n    color(\"silver\")\n    paten_base();\n    \n    // Rim in gold\n    color(\"gold\")\n    raised_rim();\n    \n    // Central cross\n    central_cross();\n    \n    // Decorative elements\n    decorative_beads();\n    \n    // Inscription\n    greek_inscription();\n}",
    "renders": true
  },
  {
    "historical_artifact": "thurible",
    "openscad_code": "// Thurible (Censer) - Historical Incense Burner\n// Medium complexity realistic model for 3D printing\n\nmodule chain_link() {\n    color([0.6, 0.5, 0.4]) {\n        difference() {\n            cylinder(h=4, d=6, $fn=16);\n            translate([0, 0, -0.5]) cylinder(h=5, d=3, $fn=16);\n        }\n    }\n}\n\nmodule chain_links(count=5) {\n    for(i = [0:count-1]) {\n        translate([0, 0, -i*6]) chain_link();\n    }\n}\n\nmodule decorative_ring() {\n    color([0.7, 0.6, 0.5]) {\n        difference() {\n            cylinder(h=3, d=32, $fn=64);\n            translate([0, 0, -0.5]) cylinder(h=4, d=28, $fn=64);\n        }\n    }\n}\n\nmodule lid_cap() {\n    color([0.65, 0.55, 0.45]) {\n        union() {\n            // Main lid dome\n            translate([0, 0, 8]) sphere(d=28, $fn=32);\n            // Decorative cross on top\n            color([0.9, 0.8, 0.7]) {\n                translate([0, 0, 22]) cube([2, 12, 4], center=true);\n                translate([0, 0, 22]) cube([12, 2, 4], center=true);\n            }\n        }\n    }\n}\n\nmodule lid() {\n    color([0.65, 0.55, 0.45]) {\n        difference() {\n            union() {\n                cylinder(h=5, d=30, $fn=48);\n                lid_cap();\n            }\n            // Ventilation holes\n            for(i = [0:11]) {\n                rotate([0, 0, i*30]) {\n                    translate([12, 0, 2.5]) rotate([90, 0, 0]) \n                    cylinder(h=6, d=2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule body() {\n    color([0.65, 0.55, 0.45]) {\n        difference() {\n            // Main body - inverted bell shape\n            cylinder(h1=25, h2=20, r1=15, r2=25, $fn=48);\n            // Hollow interior\n            translate([0, 0, -1]) cylinder(h1=23, h2=18, r1=12, r2=22, $fn=48);\n        }\n        // Decorative bands\n        translate([0, 0, 5]) decorative_ring();\n        translate([0, 0, 15]) decorative_ring();\n    }\n}\n\nmodule base_ring() {\n    color([0.65, 0.55, 0.45]) {\n        difference() {\n            cylinder(h=3, d=36, $fn=64);\n            translate([0, 0, -0.5]) cylinder(h=4, d=32, $fn=64);\n        }\n    }\n}\n\nmodule support_chains() {\n    color([0.6, 0.5, 0.4]) {\n        // Three support chains\n        for(i = [0:2]) {\n            rotate([0, 0, i*120]) {\n                translate([15, 0, 0]) rotate([90, 0, 0]) chain_links(4);\n            }\n        }\n    }\n}\n\nmodule thurible() {\n    // Main assembly\n    translate([0, 0, 30]) support_chains();\n    \n    // Central chain\n    translate([0, 0, 30]) chain_links(5);\n    \n    // Body assembly\n    translate([0, 0, 0]) {\n        body();\n        translate([0, 0, 25]) lid();\n        translate([0, 0, -3]) base_ring();\n    }\n}\n\n// Render the complete thurible\nthurible();",
    "renders": true
  },
  {
    "historical_artifact": "tabernacle",
    "openscad_code": "// Tabernacle Historical Artifact - Realistic Style (Medium Complexity)\n// Based on medieval portable tabernacles used for Eucharist reservation\n\n// Overall dimensions for 3D printing\ntabernacle_width = 60;\ntabernacle_depth = 40;\ntabernacle_height = 80;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main color scheme - bronze/brass appearance\ncolor([0.8, 0.5, 0.2]) {\n    difference() {\n        // Main tabernacle body\n        cube([tabernacle_width, tabernacle_depth, tabernacle_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cube([tabernacle_width - 2*wall_thickness, tabernacle_depth - 2*wall_thickness, tabernacle_height], center=true);\n    }\n}\n\n// Decorative arched top\nmodule arched_top() {\n    color([0.85, 0.55, 0.25]) {\n        translate([0, 0, tabernacle_height/2 + 5])\n            difference() {\n                // Main arch body\n                union() {\n                    cube([tabernacle_width + 10, tabernacle_depth + 5, 10], center=true);\n                    cylinder(h=10, r=(tabernacle_width + 10)/2, center=true);\n                }\n                \n                // Hollow arch\n                translate([0, 0, -wall_thickness])\n                    cylinder(h=15, r=(tabernacle_width + 6)/2, center=true);\n            }\n    }\n}\n\n// Cross on top\nmodule cross() {\n    color([0.9, 0.9, 0.9]) {\n        translate([0, 0, tabernacle_height/2 + 15]) {\n            // Vertical beam\n            cube([4, 3, 15], center=true);\n            \n            // Horizontal beam\n            translate([0, 0, 5])\n                cube([12, 3, 4], center=true);\n        }\n    }\n}\n\n// Decorative columns\nmodule column(x_offset) {\n    color([0.75, 0.45, 0.15]) {\n        translate([x_offset, tabernacle_depth/2, 0]) {\n            // Column body\n            for(i = [-tabernacle_height/2 + 5 : 10 : tabernacle_height/2 - 5]) {\n                translate([0, 0, i])\n                    cylinder(h=8, r=3, center=true);\n            }\n            \n            // Column capital\n            translate([0, 0, tabernacle_height/2 - 2])\n                cylinder(h=4, r=4, center=true);\n            \n            // Column base\n            translate([0, 0, -tabernacle_height/2 + 2])\n                cylinder(h=4, r=4, center=true);\n        }\n    }\n}\n\n// Decorative panels with inscribed crosses\nmodule side_panel(side) {\n    color([0.7, 0.4, 0.1]) {\n        translate([side * tabernacle_width/2 + side * wall_thickness/2, 0, 0]) {\n            // Panel background\n            cube([wall_thickness, tabernacle_depth - 10, tabernacle_height - 10], center=true);\n            \n            // Raised cross\n            color([0.9, 0.9, 0.9]) {\n                translate([side * wall_thickness/4, 0, 0]) {\n                    cube([wall_thickness/2, 3, 15], center=true);\n                    cube([10, 3, wall_thickness/2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Door with hinges\nmodule door() {\n    color([0.8, 0.5, 0.2]) {\n        translate([-tabernacle_width/2 - 0.5, 0, -tabernacle_height/4]) {\n            // Door panel\n            cube([wall_thickness + 1, tabernacle_depth - 4, tabernacle_height/2], center=true);\n            \n            // Door handle\n            color([0.9, 0.9, 0.9]) {\n                translate([wall_thickness/2, tabernacle_depth/4, 0])\n                    sphere(r=2);\n            }\n            \n            // Decorative hinges\n            color([0.7, 0.4, 0.1]) {\n                for(h = [-tabernacle_height/4 + 5 : 10 : tabernacle_height/4 - 5]) {\n                    translate([-wall_thickness/2, -tabernacle_depth/2 + 2, h])\n                        cube([2, 4, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Base platform\nmodule base() {\n    color([0.6, 0.3, 0.1]) {\n        translate([0, 0, -tabernacle_height/2 - 3]) {\n            cube([tabernacle_width + 10, tabernacle_depth + 10, 6], center=true);\n            \n            // Step detail\n            translate([0, 0, -5])\n                cube([tabernacle_width + 15, tabernacle_depth + 15, 4], center=true);\n        }\n    }\n}\n\n// Assembly\narched_top();\ncross();\n\n// Columns at corners\ncolumn(tabernacle_width/2 - 5);\ncolumn(-tabernacle_width/2 + 5);\n\n// Side panels\nside_panel(1);\nside_panel(-1);\n\n// Door on front\ndoor();\n\n// Base\nbase();\n\n// Small decorative elements\ncolor([0.9, 0.9, 0.1]) {\n    // Tiny decorative studs on front\n    for(x = [-20 : 10 : 20]) {\n        for(z = [-30 : 10 : 30]) {\n            translate([tabernacle_width/2 - wall_thickness, tabernacle_depth/2 - 2, z])\n                sphere(r=1);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "monstrance",
    "openscad_code": "// Monstrance - Historical Eucharistic Vessel\n// Medium complexity, realistic style\n\n$fn = 64;\n\n// Main body\nmodule base() {\n    // Circular base with decorative rings\n    difference() {\n        cylinder(h=8, d1=40, d2=35);\n        translate([0, 0, 7.5]) cylinder(h=1, d1=38, d2=33);\n    }\n    translate([0, 0, 8]) cylinder(h=5, d1=30, d2=28);\n}\n\nmodule stem() {\n    // Central stem with decorative nodes\n    color(\"gold\") {\n        translate([0, 0, 13]) cylinder(h=20, d=8);\n        translate([0, 0, 23]) cylinder(h=4, d=12);\n        translate([0, 0, 27]) cylinder(h=20, d=8);\n    }\n}\n\nmodule sunburst() {\n    // Radiating sun rays around host\n    color(\"gold\") {\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5]) {\n                translate([0, 22, 47]) cube([3, 25, 2], center=true);\n            }\n        }\n    }\n}\n\nmodule cross() {\n    // Celtic-style cross on top\n    color(\"gold\") {\n        translate([0, 0, 75]) {\n            cube([4, 20, 2], center=true);\n            cube([20, 4, 2], center=true);\n            translate([0, 0, 3]) cube([3, 3, 3], center=true);\n        }\n    }\n}\n\nmodule host() {\n    // Circular host in center\n    color(\"white\") {\n        translate([0, 0, 47]) cylinder(h=1, d=15);\n    }\n}\n\nmodule decorative_ring() {\n    // Decorative ring with small spheres\n    color(\"gold\") {\n        rotate_extrude() {\n            translate([20, 47, 0]) circle(r=2);\n        }\n        for(i=[0:23]) {\n            rotate([0, 0, i*15]) {\n                translate([20, 0, 47]) sphere(r=1.5);\n            }\n        }\n    }\n}\n\nmodule supports() {\n    // Four supporting arms\n    color(\"gold\") {\n        for(i=[0:3]) {\n            rotate([0, 0, i*90]) {\n                translate([10, 0, 40]) {\n                    rotate([0, 90, 0]) cylinder(h=15, d=3);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nbase();\nstem();\nsunburst();\ncross();\nhost();\ndecorative_ring();\nsupports();",
    "renders": true
  },
  {
    "historical_artifact": "pyx",
    "openscad_code": "// Medieval Pyx - Eucharistic container (12th-13th century style)\n// Overall dimensions: 70mm diameter, 90mm height including cross\n\n$fn = 60;\n\n// Main body module\nmodule pyx_body() {\n    // Base cylinder with slight taper\n    cylinder(h = 40, r1 = 35, r2 = 33, center = true);\n    \n    // Decorative ring at base\n    translate([0, 0, -18])\n        difference() {\n            cylinder(h = 8, r = 38, center = true);\n            cylinder(h = 10, r = 34, center = true);\n        }\n}\n\n// Hinged lid module\nmodule pyx_lid() {\n    // Main lid dome\n    translate([0, 0, 22])\n        difference() {\n            sphere(r = 36);\n            translate([0, 0, -20])\n                cube([80, 80, 40], center = true);\n        }\n    \n    // Lid rim\n    translate([0, 0, 8])\n        difference() {\n            cylinder(h = 6, r = 36, center = true);\n            cylinder(h = 8, r = 33, center = true);\n        }\n}\n\n// Decorative cross on lid\nmodule cross() {\n    color(\"gold\")\n    translate([0, 0, 55])\n    union() {\n        // Vertical beam\n        cube([6, 6, 30], center = true);\n        \n        // Horizontal beam\n        translate([0, 0, 10])\n            cube([20, 6, 6], center = true);\n        \n        // Decorative terminals\n        translate([0, 0, 15])\n            sphere(r = 4);\n        translate([0, 0, -15])\n            sphere(r = 4);\n        translate([10, 0, 10])\n            sphere(r = 4);\n        translate([-10, 0, 10])\n            sphere(r = 4);\n    }\n}\n\n// Repetitive decorative arches around body\nmodule decorative_arches() {\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n        translate([30, 0, 0])\n        color(\"gold\")\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 15, r = 5, center = true);\n            translate([-3, 0, 0])\n                cube([6, 10, 10], center = true);\n        }\n    }\n}\n\n// Small feet at base\nmodule feet() {\n    for(i = [45:90:315]) {\n        rotate([0, 0, i])\n        translate([28, 0, -22])\n        color(\"gold\")\n        sphere(r = 4);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body in bronze\n    color(\"bronze\")\n    pyx_body();\n    \n    // Lid in bronze\n    color(\"bronze\")\n    pyx_lid();\n    \n    // Cross on lid\n    cross();\n    \n    // Decorative elements\n    decorative_arches();\n    feet();\n}\n\n// Interior cavity for host storage\ndifference() {\n    // Cut hollow space in body\n    translate([0, 0, -5])\n        cylinder(h = 30, r = 28, center = true);\n    \n    // Cut hollow space in lid\n    translate([0, 0, 15])\n        sphere(r = 30);\n}",
    "renders": true
  },
  {
    "historical_artifact": "ampulla",
    "openscad_code": "// Historical Byzantine Pilgrim Ampulla (6th-7th century)\n// Medium complexity realistic model with decorative elements\n\n// Overall dimensions\nampulla_height = 80;\nbody_width = 45;\nneck_height = 25;\nspout_length = 15;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body - flattened flask shape\nmodule ampulla_body() {\n    difference() {\n        // Outer shape - elongated sphere with flattened sides\n        scale([1, 0.7, 1.3])\n            sphere(d=body_width, $fn=50);\n        \n        // Hollow interior\n        translate([0, 0, -wall])\n            scale([1, 0.7, 1.3])\n            sphere(d=body_width-wall*2, $fn=50);\n    }\n}\n\n// Neck with flared rim\nmodule neck() {\n    translate([0, 0, ampulla_height/2-5])\n    difference() {\n        // Outer neck\n        cylinder(h=neck_height, d1=20, d2=25, $fn=30);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h=neck_height+2, d1=20-wall*2, d2=25-wall*2, $fn=30);\n    }\n}\n\n// Spout\nmodule spout() {\n    translate([body_width/2-5, 0, ampulla_height/2+neck_height/2-5])\n    rotate([0, 90, 0])\n    difference() {\n        // Outer spout\n        cylinder(h=spout_length, d1=12, d2=8, $fn=20);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h=spout_length+2, d1=12-wall*2, d2=8-wall*2, $fn=20);\n    }\n}\n\n// Decorative ring handles (typical of Byzantine ampullae)\nmodule handles() {\n    // Left handle\n    translate([-body_width/2+5, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Handle ring\n        rotate_extrude(angle=360, $fn=30)\n            translate([8, 0, 0])\n            circle(r=3, $fn=20);\n        \n        // Hollow center\n        rotate_extrude(angle=360, $fn=30)\n            translate([8, 0, 0])\n            circle(r=3-wall, $fn=20);\n    }\n    \n    // Right handle (mirrored)\n    translate([body_width/2-5, 0, 0])\n    scale([-1, 1, 1])\n    handles();\n}\n\n// Cross decoration on front - typical Christian symbol\nmodule cross_decoration() {\n    translate([0, -body_width/2-1, ampulla_height/4])\n    linear_extrude(height=1.5)\n    union() {\n        // Vertical bar\n        square([3, 15], center=true);\n        \n        // Horizontal bar\n        translate([0, 5, 0])\n            square([12, 3], center=true);\n    }\n}\n\n// Small circular medallions with geometric patterns\nmodule medallions() {\n    // Top medallion\n    translate([0, -body_width/2-1, ampulla_height/2-10])\n    cylinder(h=1.5, d=8, $fn=32);\n    \n    // Bottom medallion\n    translate([0, -body_width/2-1, -ampulla_height/4])\n    cylinder(h=1.5, d=8, $fn=32);\n    \n    // Side medallions\n    translate([-15, -body_width/2-1, 0])\n    cylinder(h=1.5, d=6, $fn=24);\n    \n    translate([15, -body_width/2-1, 0])\n    cylinder(h=1.5, d=6, $fn=24);\n}\n\n// Raised decorative band around neck\nmodule neck_band() {\n    translate([0, 0, ampulla_height/2-5+neck_height/2])\n    difference() {\n        cylinder(h=3, d1=28, d2=30, $fn=30);\n        cylinder(h=4, d1=22, d2=24, $fn=30);\n    }\n}\n\n// Complete ampulla assembly\ncolor(\"DarkGoldenrod\") {\n    union() {\n        ampulla_body();\n        neck();\n        spout();\n        handles();\n        \n        // Decorative elements\n        color(\"Goldenrod\") {\n            cross_decoration();\n            medallions();\n            neck_band();\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "ampullae",
    "openscad_code": "// Ampulla - Byzantine pilgrimage flask for holy oil/water\n// Historical reproduction with decorative crosses and rope handles\n\n$fn = 64;\n\n// Main dimensions\nbody_height = 60;\nbody_width = 40;\nbody_thickness = 35;\nneck_height = 15;\nneck_diameter = 12;\nrim_height = 5;\nrim_diameter = 18;\nhandle_width = 8;\nhandle_thickness = 4;\n\n// Wall thickness\nwall = 2;\n\n// Main body - flattened oval flask shape\nmodule ampulla_body() {\n    // Outer body - elliptical cross-section\n    rotate([90,0,0])\n    scale([1, 0.7, 1])\n    cylinder(h=body_height, d1=body_width, d2=body_width);\n}\n\n// Inner cavity\nmodule ampulla_cavity() {\n    translate([0,0,wall])\n    rotate([90,0,0])\n    scale([1, 0.7, 1])\n    cylinder(h=body_height-wall*2, d1=body_width-wall*2, d2=body_width-wall*2);\n}\n\n// Neck and mouth\nmodule neck() {\n    translate([0,0,body_height/2])\n    cylinder(h=neck_height, d=neck_diameter);\n    \n    translate([0,0,body_height/2+neck_height])\n    cylinder(h=rim_height, d=rim_diameter);\n}\n\n// Neck cavity\nmodule neck_cavity() {\n    translate([0,0,body_height/2+wall])\n    cylinder(h=neck_height+rim_height-wall, d=neck_diameter-wall*2);\n}\n\n// Decorative cross on front\nmodule cross() {\n    color(\"gold\")\n    translate([0,-body_thickness/2+0.5,body_height/4])\n    rotate([0,0,45])\n    union() {\n        cube([2, 15, 1], center=true);\n        cube([15, 2, 1], center=true);\n    }\n}\n\n// Byzantine-style rope handle\nmodule rope_handle() {\n    color(\"bronze\")\n    translate([body_width/2+handle_width/2, 0, body_height/4])\n    rotate([0,90,0])\n    difference() {\n        // Handle loop\n        torus(handle_width/2, handle_thickness/2);\n        \n        // Cut inner hole\n        scale([0.8,0.8,1])\n        torus(handle_width/2-1, handle_thickness/2-1);\n    }\n}\n\n// Helper for torus shape\nmodule torus(major_r, minor_r) {\n    rotate_extrude()\n    translate([major_r, 0, 0])\n    circle(r=minor_r);\n}\n\n// Decorative band around neck\nmodule neck_band() {\n    color(\"gold\")\n    translate([0,0,body_height/2+neck_height/2])\n    cylinder(h=neck_height/4, d=neck_diameter+2, $fn=32);\n}\n\n// Small crosses around rim\nmodule rim_crosses() {\n    for(i=[0:45:315]) {\n        rotate([0,0,i])\n        translate([rim_diameter/2+2, 0, body_height/2+neck_height+rim_height/2])\n        rotate([90,0,0])\n        scale([0.5,0.5,0.5])\n        cross();\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body structure\n    difference() {\n        union() {\n            ampulla_body();\n            neck();\n        }\n        // Hollow out\n        ampulla_cavity();\n        neck_cavity();\n    }\n    \n    // Decorative elements\n    cross();\n    rope_handle();\n    mirror([1,0,0]) rope_handle();\n    neck_band();\n    rim_crosses();\n}\n\n// Base support for printing\ncolor(\"gray\")\ntranslate([0,0,-body_height/2-1])\ncylinder(h=2, d=body_width+4, $fn=32);",
    "renders": true
  },
  {
    "historical_artifact": "ciborium",
    "openscad_code": "// Ciborium - Historical Eucharistic Vessel\n// Scale: 80mm total height\n\n$fn = 64;\n\n// Overall dimensions\ntotal_height = 80;\nbase_height = 15;\nstem_height = 25;\ncup_height = 30;\nlid_height = 10;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\nmodule base() {\n    // Ornate hexagonal base with stepped layers\n    color(\"gold\")\n    union() {\n        // Bottom tier\n        cylinder(h=5, r1=25, r2=27);\n        \n        // Middle tier\n        translate([0,0,5])\n            cylinder(h=5, r1=22, r2=25);\n        \n        // Top tier\n        translate([0,0,10])\n            cylinder(h=5, r1=20, r2=22);\n        \n        // Decorative rings\n        for(i=[0:2]) {\n            translate([0,0,i*5])\n                difference() {\n                    cylinder(h=0.5, r=27-i*2.5);\n                    cylinder(h=0.5, r=25-i*2.5);\n                }\n        }\n    }\n}\n\nmodule stem() {\n    // Knopped stem with decorative nodes\n    color(\"gold\")\n    union() {\n        // Lower stem\n        cylinder(h=8, r1=5, r2=4);\n        \n        // Central knop\n        translate([0,0,8])\n            sphere(d=10);\n        \n        // Upper stem\n        translate([0,0,8])\n            cylinder(h=17, r1=4, r2=3);\n        \n        // Decorative rings on stem\n        translate([0,0,12])\n            cylinder(h=1, r1=6, r2=6);\n    }\n}\n\nmodule cup() {\n    // Chalice-shaped cup with everted rim\n    color(\"gold\")\n    difference() {\n        union() {\n            // Main cup body\n            cylinder(h=25, r1=16, r2=20);\n            \n            // Everted rim\n            translate([0,0,25])\n                cylinder(h=5, r1=20, r2=22);\n        }\n        \n        // Hollow interior\n        translate([0,0,-1])\n            cylinder(h=27, r1=14.5, r2=18.5);\n    }\n}\n\nmodule lid() {\n    // Domed lid with cross finial\n    color(\"gold\")\n    union() {\n        // Lid base\n        difference() {\n            cylinder(h=3, r=22);\n            translate([0,0,-1])\n                cylinder(h=5, r=20.5);\n        }\n        \n        // Domed top\n        translate([0,0,3])\n            sphere(d=40);\n        \n        // Cross finial\n        translate([0,0,23])\n            rotate([0,0,45])\n            union() {\n                cube([2,15,2], center=true);\n                cube([15,2,2], center=true);\n            }\n    }\n}\n\nmodule decorative_panels() {\n    // Six decorative panels around cup\n    color(\"gold\")\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([19,0,12])\n                cube([1,8,20], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    \n    translate([0,0,base_height])\n        stem();\n    \n    translate([0,0,base_height+stem_height])\n        cup();\n    \n    translate([0,0,base_height+stem_height])\n        decorative_panels();\n    \n    translate([0,0,base_height+stem_height+cup_height])\n        lid();\n}",
    "renders": true
  },
  {
    "historical_artifact": "patella",
    "openscad_code": "// Ancient Roman Patella Mirror (1st-3rd Century AD)\n// Bronze hand mirror with characteristic patella (kneecap) shaped reflective surface\n// Based on archaeological finds from Pompeii and Herculaneum\n\n$fn = 32;\n\n// Overall dimensions\nmirror_diameter = 80;\nhandle_length = 90;\nbronze_thickness = 3;\n\n// Bronze color for aged artifact\ncolor([0.72, 0.52, 0.42]) {\n    // Main mirror body - patella shape\n    difference() {\n        // Outer oval dome shape\n        scale([1.2, 1, 0.8])\n            sphere(d = mirror_diameter);\n        \n        // Inner reflective surface - concave patella\n        translate([0, 0, bronze_thickness/2])\n            scale([1.15, 0.95, 0.5])\n                sphere(d = mirror_diameter - bronze_thickness*2);\n    }\n    \n    // Reinforcement ridge around edge\n    translate([0, 0, -mirror_diameter*0.4 + bronze_thickness/2])\n        scale([1.25, 1.05, 0.2])\n            cylinder(h = bronze_thickness, d = mirror_diameter);\n    \n    // Decorative border pattern - geometric meander\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([mirror_diameter*0.48, 0, -mirror_diameter*0.3])\n                scale([0.1, 0.05, 1])\n                    cube([bronze_thickness*2, bronze_thickness*4, bronze_thickness]);\n    }\n    \n    // Handle attachment - flared collar\n    translate([0, 0, -mirror_diameter*0.4])\n        cylinder(h = bronze_thickness*3, d1 = 25, d2 = 15);\n    \n    // Handle with characteristic Roman scroll design\n    module handle_segment() {\n        difference() {\n            cylinder(h = 15, d = 12);\n            translate([0, 0, -1])\n                cylinder(h = 17, d = 8);\n        }\n    }\n    \n    // Assemble handle with scroll elements\n    for(i = [0:1:5]) {\n        translate([0, 0, -mirror_diameter*0.4 - 15 - i*15])\n            handle_segment();\n    }\n    \n    // Terminal knob with ring attachment\n    translate([0, 0, -mirror_diameter*0.4 - handle_length])\n        sphere(d = 15);\n    \n    // Suspension ring\n    rotate([90, 0, 0])\n        translate([0, -mirror_diameter*0.4 - handle_length, 0])\n            difference() {\n                rotate_extrude()\n                    translate([8, 0, 0])\n                        circle(r = 2);\n                rotate_extrude()\n                    translate([5, 0, 0])\n                        circle(r = 1.5);\n            }\n    \n    // Decorative rivets around mirror edge (typical Roman construction)\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([mirror_diameter*0.58, 0, -mirror_diameter*0.3])\n                sphere(d = 4);\n    }\n    \n    // Maker's mark inscription area\n    translate([mirror_diameter*0.3, 0, -mirror_diameter*0.35])\n        scale([1, 0.3, 0.5])\n            cube([15, bronze_thickness, 8]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "crucifix",
    "openscad_code": "// Historical Crucifix Artifact (Byzantine style, 6th-7th century)\n// Dimensions: 80mm height, 50mm width, 8mm depth\n\n$fn = 64;\n\n// Main cross body\nmodule cross_body() {\n    color(\"burlywood\")\n    union() {\n        // Vertical beam\n        translate([0, 0, 0])\n            cube([6, 6, 50], center=true);\n        \n        // Horizontal beam\n        translate([0, 0, 15])\n            cube([30, 6, 6], center=true);\n    }\n}\n\n// Decorative end caps\nmodule cross_caps() {\n    color(\"goldenrod\")\n    union() {\n        // Top cap\n        translate([0, 0, 25])\n            cylinder(h=3, r=4);\n        \n        // Bottom cap\n        translate([0, 0, -25])\n            cylinder(h=3, r=4);\n        \n        // Left arm cap\n        translate([-15, 0, 15])\n            cylinder(h=3, r=4, rotate=[0, 90, 0]);\n        \n        // Right arm cap\n        translate([15, 0, 15])\n            cylinder(h=3, r=4, rotate=[0, 90, 0]);\n    }\n}\n\n// Corpus (Christ figure)\nmodule corpus() {\n    color(\"antiquewhite\")\n    union() {\n        // Body\n        translate([0, 2, 10])\n            scale([1, 0.3, 2.5])\n                sphere(r=5);\n        \n        // Head\n        translate([0, 2, 22])\n            sphere(r=3);\n        \n        // Arms\n        translate([-10, 2, 15])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=1.2);\n        \n        // INRI plaque\n        color(\"goldenrod\")\n        translate([0, -2, 27])\n            cube([12, 1, 4], center=true);\n    }\n}\n\n// Decorative Byzantine patterns\nmodule decorative_patterns() {\n    color(\"goldenrod\")\n    union() {\n        // Halo ring\n        translate([0, 3.5, 22])\n            rotate([90, 0, 0])\n                cylinder(h=1, r1=5, r2=5);\n        \n        // Greek cross on front\n        translate([0, -3.5, 15])\n            cube([8, 1, 1], center=true);\n        translate([0, -3.5, 15])\n            cube([1, 1, 8], center=true);\n        \n        // Decorative dots pattern\n        for(i = [-1:1]) {\n            for(j = [-8:4:8]) {\n                translate([j, -3.5, 5 + i * 8])\n                    sphere(r=0.5);\n            }\n        }\n    }\n}\n\n// Base support\nmodule base() {\n    color(\"burlywood\")\n    translate([0, 0, -30])\n    union() {\n        cylinder(h=5, r=8);\n        translate([0, 0, -2])\n            cylinder(h=4, r=10);\n    }\n}\n\n// Assembly\nunion() {\n    cross_body();\n    cross_caps();\n    corpus();\n    decorative_patterns();\n    base();\n}",
    "renders": true
  },
  {
    "historical_artifact": "breviary",
    "openscad_code": "// Medieval Breviary (Book of Hours) - 15th century style\n// Dimensions: ~70mm x 50mm x 15mm\n\n$fn = 32;\n\n// Main colors\ncolor_brown = [0.4, 0.25, 0.15];\ncolor_gold = [0.8, 0.6, 0.2];\ncolor_red = [0.7, 0.1, 0.1];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_parchment = [0.9, 0.85, 0.7];\n\n// Main book body\nmodule book_body() {\n    color(color_brown)\n    difference() {\n        // Main block\n        cube([65, 45, 12], center=true);\n        \n        // Spine groove\n        translate([0, 22, 0])\n        cube([64, 2, 11], center=true);\n        \n        // Page edges details\n        for(i = [-30:5:30]) {\n            translate([i, 23, 6])\n            cube([1, 1, 0.5]);\n        }\n    }\n}\n\n// Metal corner protectors\nmodule corner_protector(x, y) {\n    color(color_gold)\n    translate([x, y, 6])\n    union() {\n        // Main triangle\n        translate([0, 0, -3])\n        cube([5, 5, 3]);\n        \n        // Decorative rivet\n        translate([2, 2, -1])\n        cylinder(h=2, r=0.8);\n    }\n}\n\n// Decorative clasp\nmodule clasp() {\n    color(color_gold)\n    translate([0, -23, 0])\n    union() {\n        // Base plate\n        cube([20, 8, 2], center=true);\n        \n        // Ornate details\n        for(i = [-8:4:8]) {\n            translate([i, 0, 1.5])\n            cylinder(h=1, r=1.5);\n        }\n        \n        // Hinge detail\n        translate([0, -4.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=20, r=0.5, center=true);\n    }\n}\n\n// Medieval decorative pattern on cover\nmodule decorative_pattern() {\n    color(color_red)\n    translate([0, 0, 6.5])\n    union() {\n        // Central cross\n        cube([4, 25, 0.5], center=true);\n        cube([20, 4, 0.5], center=true);\n        \n        // Corner fleur-de-lis details\n        for(x = [-25, 25])\n        for(y = [-15, 15]) {\n            translate([x, y, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=0.5, r=5);\n        }\n        \n        // Border lines\n        for(offset = [28, 26]) {\n            translate([0, 0, 0])\n            cube([offset*2, offset*2 - 20, 0.3], center=true);\n        }\n    }\n}\n\n// Pages block\nmodule pages() {\n    color(color_parchment)\n    translate([0, 0, -6.5])\n    cube([60, 40, 11], center=true);\n}\n\n// Title inscription\nmodule title_text() {\n    color(color_black)\n    translate([0, 0, 6.8])\n    linear_extrude(height=0.2)\n    text(\"BREV\", size=6, halign=\"center\", valign=\"center\", font=\"Liberation Serif:style=Bold\");\n}\n\n// Main assembly\nunion() {\n    book_body();\n    \n    // Corner protectors\n    corner_protector(30, 20);\n    corner_protector(-30, 20);\n    corner_protector(30, -20);\n    corner_protector(-30, -20);\n    \n    // Clasp assembly\n    clasp();\n    \n    // Cover decorations\n    decorative_pattern();\n    \n    // Title\n    title_text();\n    \n    // Pages\n    pages();\n}",
    "renders": true
  },
  {
    "historical_artifact": "missal",
    "openscad_code": "// Historical Missal - 15th Century Gothic Style\n// Dimensions: 75mm x 55mm x 15mm (closed)\n\n$fn = 32;\n\n// Main colors\nwood_color = [101, 67, 33] / 255;\nmetal_color = [150, 130, 80] / 255;\npage_color = [240, 235, 220] / 255;\nleather_color = [65, 40, 25] / 255;\n\nmodule missal_cover() {\n    // Wooden cover base\n    color(wood_color)\n    difference() {\n        cube([75, 55, 3]);\n        \n        // Engraved cross pattern\n        translate([37.5, 27.5, 2.9])\n        cube([35, 25, 0.2], center=true);\n        \n        // Central circular depression\n        translate([37.5, 27.5, 2.8])\n        cylinder(h=0.3, r=12);\n    }\n    \n    // Metal corner reinforcements\n    for(x = [5, 70]) {\n        for(y = [5, 50]) {\n            color(metal_color)\n            translate([x, y, 0])\n            cylinder(h=3.5, r=4);\n        }\n    }\n    \n    // Leather spine\n    color(leather_color)\n    translate([-1, 0, 0])\n    cube([5, 55, 3.5]);\n}\n\nmodule pages() {\n    color(page_color)\n    for(i = [0:14]) {\n        translate([i*0.5+5, 2, 3.2])\n        cube([65, 51, 0.3]);\n    }\n}\n\nmodule metal_clasp() {\n    // Main clasp body\n    color(metal_color)\n    translate([72, 27.5, 1.5])\n    rotate([90, 0, 0])\n    cylinder(h=15, r=2);\n    \n    // Clasp ring\n    translate([72, 27.5, 0])\n    rotate([90, 0, 0])\n    cylinder(h=5, r=3, center=true);\n}\n\nmodule decorative_rivets() {\n    // Rivets along spine\n    for(i = [5:10:45]) {\n        color(metal_color)\n        translate([2, i, 1.5])\n        sphere(r=1.5);\n    }\n}\n\nmodule missal_artifact() {\n    missal_cover();\n    pages();\n    metal_clasp();\n    decorative_rivets();\n    \n    // Front cover inscription\n    translate([35, 27.5, 2.95])\n    rotate([0, 0, 0])\n    color(0.2, 0.2, 0.2)\n    linear_extrude(0.1)\n    text(\"IHS\", size=8, halign=\"center\", valign=\"center\", font=\"Gothic:style=Bold\");\n}\n\n// Render the complete missal\nmissal_artifact();",
    "renders": true
  },
  {
    "historical_artifact": "lectionary",
    "openscad_code": "// Medieval Lectionary Cover with Metalwork and Gemstones\n// Based on 12th century Ottonian style manuscript covers\n\n$fn = 50;\n\n// Main dimensions\ncover_length = 75;\ncover_width = 55;\ncover_thickness = 4;\nmetal_thickness = 1;\ngem_size = 3;\n\n// Colors\ncolor_gold = \"DarkGoldenrod\";\ncolor_silver = \"LightGray\";\ncolor_gem = \"Crimson\";\ncolor_wood = \"SaddleBrown\";\ncolor_ivory = \"AntiqueWhite\";\n\n// Main wooden cover\nmodule wooden_cover() {\n    color(color_wood)\n    cube([cover_length, cover_width, cover_thickness], center = true);\n}\n\n// Metal framework around edges\nmodule metal_frame() {\n    color(color_gold)\n    difference() {\n        // Outer frame\n        cube([cover_length + 2, cover_width + 2, metal_thickness + 1], center = true);\n        \n        // Inner cutout\n        translate([0, 0, -0.5])\n        cube([cover_length - 4, cover_width - 4, metal_thickness + 2], center = true);\n    }\n}\n\n// Decorative corner pieces\nmodule corner_piece(x, y) {\n    translate([x * (cover_length/2 - 3), y * (cover_width/2 - 2), cover_thickness/2 + metal_thickness/2])\n    color(color_gold)\n    rotate([0, 0, 45])\n    cube([4, 4, metal_thickness], center = true);\n}\n\n// Central cross medallion\nmodule central_cross() {\n    translate([0, 0, cover_thickness/2 + metal_thickness/2])\n    color(color_silver)\n    union() {\n        // Vertical bar\n        cube([3, 15, metal_thickness], center = true);\n        // Horizontal bar\n        cube([15, 3, metal_thickness], center = true);\n    }\n}\n\n// Gemstone setting\nmodule gemstone(x, y) {\n    translate([x, y, cover_thickness/2 + metal_thickness + gem_size/2])\n    color(color_gem)\n    sphere(gem_size/2);\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    for(i = [-35:7:35]) {\n        for(j = [-22:7:22]) {\n            if(abs(i) > 30 || abs(j) > 17) {\n                translate([i, j, cover_thickness/2 + metal_thickness/2])\n                color(color_silver)\n                cylinder(h = metal_thickness, r = 1.5, $fn = 6);\n            }\n        }\n    }\n}\n\n// Raised central panel\nmodule central_panel() {\n    translate([0, 0, -cover_thickness/4])\n    color(color_ivory)\n    difference() {\n        cube([cover_length - 20, cover_width - 15, cover_thickness/2], center = true);\n        // Inscription area\n        translate([0, 0, -0.1])\n        cube([cover_length - 25, cover_width - 20, cover_thickness/2 + 0.2], center = true);\n    }\n}\n\n// Spine detail\nmodule spine_detail() {\n    translate([-cover_length/2 - 2, 0, 0])\n    color(color_gold)\n    cube([4, cover_width, cover_thickness + 2], center = true);\n}\n\n// Hinge rings\nmodule hinge_rings() {\n    for(i = [-20:10:20]) {\n        translate([-cover_length/2 - 4, i, 0])\n        rotate([90, 0, 0])\n        color(color_silver)\n        difference() {\n            cylinder(h = 3, r = 2.5, center = true);\n            cylinder(h = 4, r = 1.5, center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    wooden_cover();\n    \n    // Metal decorations\n    translate([0, 0, 0])\n    metal_frame();\n    \n    // Corner pieces\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            corner_piece(x, y);\n        }\n    }\n    \n    central_cross();\n    \n    // Gemstones along cross\n    gemstone(0, 8);\n    gemstone(0, -8);\n    gemstone(8, 0);\n    gemstone(-8, 0);\n    \n    border_pattern();\n    \n    central_panel();\n    \n    spine_detail();\n    hinge_rings();\n}",
    "renders": true
  },
  {
    "historical_artifact": "psalter",
    "openscad_code": "// Medieval Psalter (Book of Psalms) - 12th Century Style\n// Dimensions: 80mm x 60mm x 20mm closed\n\n// Main book cover dimensions\ncover_width = 80;\ncover_height = 60;\ncover_thickness = 2.5;\nspine_width = 12;\n\n// Page block dimensions\npage_width = 75;\npage_height = 55;\npage_thickness = 15;\n\n// Colors\nwood_color = [139/255, 90/255, 43/255];\nleather_color = [101/255, 67/255, 33/255];\ngold_color = [212/255, 175/255, 55/255];\nparchment_color = [240/255, 228/255, 196/255];\n\n// Main cover module with wood core and leather binding\nmodule book_cover() {\n    // Wooden cover core\n    color(wood_color)\n    cube([cover_width, cover_height, cover_thickness], center=true);\n    \n    // Leather binding around edges\n    color(leather_color) {\n        difference() {\n            cube([cover_width + 1, cover_height + 1, cover_thickness + 0.5], center=true);\n            cube([cover_width - 1, cover_height - 1, cover_thickness + 1], center=true);\n        }\n    }\n    \n    // Metal corner reinforcements\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (cover_width/2 - 5), y * (cover_height/2 - 5), cover_thickness/2 + 0.1])\n            color(gold_color)\n            cylinder(h=0.5, r=3, $fn=6);\n        }\n    }\n    \n    // Central decorative boss\n    translate([0, 0, cover_thickness/2 + 0.1])\n    color(gold_color)\n    cylinder(h=0.5, r=8, $fn=24);\n    \n    // Decorative cross on front\n    translate([0, 0, cover_thickness/2 + 0.6])\n    color(gold_color) {\n        cube([2, 20, 0.5], center=true);\n        cube([16, 2, 0.5], center=true);\n    }\n}\n\n// Spine with raised bands\nmodule spine() {\n    color(leather_color) {\n        cube([spine_width, cover_height, cover_thickness + page_thickness + 2], center=true);\n        \n        // Raised bands\n        for(i = [-2, -1, 0, 1, 2]) {\n            translate([0, i * 10, (cover_thickness + page_thickness + 2)/2 - 0.5])\n            cube([spine_width - 1, 3, 1], center=true);\n        }\n    }\n}\n\n// Page block with gilded edges\nmodule pages() {\n    color(parchment_color)\n    cube([page_width, page_height, page_thickness], center=true);\n    \n    // Gilded page edges\n    color(gold_color) {\n        // Top edge\n        translate([0, page_height/2 + 0.1, 0])\n        cube([page_width + 0.5, 0.2, page_thickness + 0.5], center=true);\n        \n        // Bottom edge\n        translate([0, -page_height/2 - 0.1, 0])\n        cube([page_width + 0.5, 0.2, page_thickness + 0.5], center=true);\n        \n        // Fore edge\n        translate([page_width/2 + 0.1, 0, 0])\n        cube([0.2, page_height + 0.5, page_thickness + 0.5], center=true);\n    }\n}\n\n// Clasp and strap for closing\nmodule clasp() {\n    // Leather strap on back cover\n    translate([cover_width/2 - 8, 0, cover_thickness/2 + 0.5])\n    color(leather_color)\n    cube([16, 4, 0.5]);\n    \n    // Metal clasp\n    translate([cover_width/2 + 8, 0, cover_thickness/2 + 0.5])\n    color(gold_color)\n    difference() {\n        cube([6, 8, 1]);\n        translate([3, 0, -0.1])\n        cylinder(h=2, r=2, $fn=16);\n    }\n}\n\n// Complete psalter assembly\nunion() {\n    // Back cover\n    translate([0, 0, -page_thickness/2 - cover_thickness/2 - 1])\n    book_cover();\n    \n    // Front cover\n    translate([0, 0, page_thickness/2 + cover_thickness/2 + 1])\n    rotate([0, 180, 0])\n    book_cover();\n    \n    // Spine\n    translate([-(cover_width + spine_width)/2 - 0.5, 0, 0])\n    spine();\n    \n    // Pages\n    pages();\n    \n    // Clasp assembly on back cover\n    translate([0, 0, -page_thickness/2 - cover_thickness/2 - 1])\n    clasp();\n}",
    "renders": true
  },
  {
    "historical_artifact": "hymnal",
    "openscad_code": "// Historical hymnal from 16th century with ornate leather binding\n// Dimensions: 60mm x 45mm x 10mm (closed)\n\n// Main book body\nmodule hymnal_body() {\n    difference() {\n        // Main book block\n        color([0.9, 0.85, 0.75]) cube([60, 45, 8], center=true);\n        \n        // Interior pages cavity\n        color([0.95, 0.92, 0.88]) \n        translate([0, 0, 1])\n        cube([55, 40, 7], center=true);\n    }\n}\n\n// Leather binding with raised bands\nmodule binding() {\n    // Front and back leather covers\n    color([0.4, 0.2, 0.1]) {\n        // Front cover\n        translate([0, 22.5, 0])\n        cube([62, 2, 8], center=true);\n        \n        // Back cover\n        translate([0, -22.5, 0])\n        cube([62, 2, 8], center=true);\n        \n        // Spine with raised bands\n        translate([-31, 0, 0])\n        cube([2, 45, 8], center=true);\n        \n        // Raised bands on spine (3 bands typical for 16th century)\n        for(i = [-1, 0, 1]) {\n            translate([-32, i*10, 0])\n            cube([2.5, 3, 7], center=true);\n        }\n    }\n}\n\n// Brass clasps for securing the hymnal\nmodule clasps() {\n    color([0.7, 0.5, 0.2]) {\n        // Front clasp base\n        translate([25, 22.5, 0])\n        cube([8, 3, 2], center=true);\n        \n        // Back clasp receiver\n        translate([25, -22.5, 0])\n        cube([8, 3, 2], center=true);\n        \n        // Clasp loop\n        translate([29, 22.5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, r=1.5, center=true);\n    }\n}\n\n// Decorative corner protectors\nmodule corner_protectors() {\n    color([0.7, 0.5, 0.2]) {\n        // Front corners\n        for(corner = [[-27, 19], [27, 19], [-27, -19], [27, -19]]) {\n            translate([corner[0], corner[1], 0])\n            cube([6, 6, 2], center=true);\n        }\n    }\n}\n\n// Title inscription on spine\nmodule spine_title() {\n    color([0.3, 0.15, 0.05]) {\n        translate([-32.5, 0, 3])\n        rotate([0, 90, 0])\n        cube([15, 2, 1], center=true);\n    }\n}\n\n// Page edges with gilding effect\nmodule page_edges() {\n    color([0.8, 0.7, 0.1]) {\n        // Top edge\n        translate([0, 0, 4.5])\n        cube([55, 40, 0.5], center=true);\n        \n        // Bottom edge\n        translate([0, 0, -4.5])\n        cube([55, 40, 0.5], center=true);\n        \n        // Fore edge\n        translate([27.5, 0, 0])\n        cube([0.5, 40, 8], center=true);\n    }\n}\n\n// Assemble the complete hymnal\nhymnal_body();\nbinding();\nclasps();\ncorner_protectors();\nspine_title();\npage_edges();",
    "renders": true
  },
  {
    "historical_artifact": "menorah",
    "openscad_code": "// Historical Menorah Artifact - OpenSCAD\n// Based on ancient Judean oil-lamp menorah design (Hasmonean period)\n// Overall height: 80mm, width: 70mm, depth: 20mm\n\n// Base module with decorative relief pattern\nmodule base() {\n    color(\"goldenrod\") union() {\n        // Main base platform\n        translate([0, 0, 2]) cube([60, 15, 4], center=true);\n        \n        // Raised decorative border\n        translate([0, 0, 4]) cube([64, 19, 1], center=true);\n        \n        // Relief pattern - repeating lozenge shapes\n        for(i=[-25:10:25]) {\n            translate([i, 0, 4.5]) cube([8, 2, 0.5], center=true);\n            translate([i, 7, 4.5]) cube([8, 2, 0.5], center=true);\n            translate([i, -7, 4.5]) cube([8, 2, 0.5], center=true);\n        }\n    }\n}\n\n// Central stem with fluted design\nmodule central_stem() {\n    color(\"goldenrod\") union() {\n        // Main stem body\n        cylinder(h=25, d1=8, d2=6, $fn=16);\n        \n        // Fluted decoration rings\n        for(h=[5:5:20]) {\n            translate([0, 0, h]) cylinder(h=1, d=10, $fn=32);\n        }\n    }\n}\n\n// Decorative oil cup holder\nmodule oil_cup() {\n    color(\"goldenrod\") union() {\n        // Main cup body\n        cylinder(h=5, d1=6, d2=4, $fn=16);\n        \n        // Lip detail\n        translate([0, 0, 4.5]) cylinder(h=1, d=7, $fn=16);\n        \n        // Interior cavity for oil\n        translate([0, 0, 1]) cylinder(h=4, d=3, $fn=16);\n    }\n}\n\n// Branch arm with decorative elements\nmodule branch(length, angle) {\n    color(\"goldenrod\") union() {\n        // Main branch\n        rotate([0, 0, angle]) translate([length/2, 0, 0]) \n            cube([length, 3, 2], center=true);\n        \n        // Decorative knob\n        rotate([0, 0, angle]) translate([length-3, 0, 2])\n            sphere(d=4, $fn=16);\n        \n        // Oil cup on branch\n        rotate([0, 0, angle]) translate([length-3, 0, 4])\n            oil_cup();\n    }\n}\n\n// Side branches with Hebrew inscription\nmodule side_branches() {\n    // Left branches\n    branch(20, 30);\n    branch(18, 45);\n    branch(15, 60);\n    \n    // Right branches\n    mirror([1, 0, 0]) {\n        branch(20, 30);\n        branch(18, 45);\n        branch(15, 60);\n    }\n}\n\n// Shamash (servant light) - raised central lamp\nmodule shamash() {\n    color(\"goldenrod\") union() {\n        // Extended stem\n        translate([0, 0, 25]) cylinder(h=15, d=5, $fn=16);\n        \n        // Decorative capital\n        translate([0, 0, 40]) cylinder(h=3, d=8, $fn=16);\n        \n        // Oil cup for shamash\n        translate([0, 0, 43]) oil_cup();\n    }\n}\n\n// Assembly\ntranslate([0, 0, 4]) base();\ntranslate([0, 0, 6]) central_stem();\ntranslate([0, 0, 31]) side_branches();\nshamash();",
    "renders": true
  },
  {
    "historical_artifact": "menorot",
    "openscad_code": "// Historic Menorah - based on Jerusalem Temple period design\n// Realistic style, medium complexity, 3D printable\n\n// Color definitions\ncolor(\"gold\") render() union() {\n\n// Base platform\ntranslate([0,0,0]) cube([60,15,5], center=true);\n\n// Central stem\ntranslate([0,0,12.5]) cylinder(h=25, d=8, $fn=32);\n\n// Decorative base rings\nfor(i = [1:3]) {\n    translate([0,0,2+i*1.5]) cylinder(h=1, d=15-i*2, $fn=32);\n}\n\n// Main arms structure\ntranslate([0,0,25]) rotate([0,0,0]) cube([50,6,8], center=true);\n\n// Seven branches - central and six side branches\nmodule branch(height, angle, offset) {\n    translate([offset,0,25]) rotate([0,angle,0]) union() {\n        // Branch arm\n        translate([0,0,height/2]) cube([height,4,4], center=true);\n        \n        // Decorative knob\n        translate([height/2,0,0]) sphere(d=5, $fn=16);\n        \n        // Oil cup holder\n        translate([height,0,-1]) cylinder(h=3, d=6, $fn=16);\n    }\n}\n\n// Central branch (taller)\nbranch(20, 0, 0);\n\n// Three branches on each side\nfor(i = [1:3]) {\n    branch(15, 25*i, i*10);\n    branch(15, -25*i, -i*10);\n}\n\n// Decorative elements on main arms\nfor(i = [-20:10:20]) {\n    if(i != 0) {\n        translate([i,0,29]) sphere(d=3, $fn=16);\n    }\n}\n\n// Base inscriptions (simulated with small cylinders)\nfor(i = [-25:5:25]) {\n    translate([i,-7.5,3]) cylinder(h=0.5, d=2, $fn=8);\n}\n\n// Top decorative crown\ntranslate([0,0,47]) union() {\n    cylinder(h=3, d=12, $fn=32);\n    translate([0,0,1.5]) sphere(d=12, $fn=32);\n}\n\n// Oil cups with realistic shape\nmodule oil_cup(pos) {\n    translate(pos) difference() {\n        cylinder(h=4, d=5, $fn=16);\n        translate([0,0,0.5]) cylinder(h=3.5, d=3.5, $fn=16);\n    }\n}\n\n// Place oil cups at branch ends\nfor(pos = [[20,0,44], [17.5,0,39], [10,0,34], \n           [-20,0,44], [-17.5,0,39], [-10,0,34], [0,0,49]]) {\n    oil_cup(pos);\n}\n\n// Side decorative panels\nfor(side = [-1,1]) {\n    translate([side*30,0,2.5]) cube([2,15,5], center=true);\n    \n    // Panel decorations\n    for(i = [-6:3:6]) {\n        translate([side*31,i,2.5]) sphere(d=1.5, $fn=8);\n    }\n}\n\n}",
    "renders": true
  },
  {
    "historical_artifact": "mezuzah",
    "openscad_code": "// Historical Mezuzah - Medieval Spanish Style (circa 1300s)\n// Based on brass mezuzah cases from medieval Toledo\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main dimensions (scaled for 3D printing)\nlength = 75;\nwidth = 18;\ndepth = 12;\nwall_thickness = 2;\n\n// Colors\nbrass_color = [181/255, 166/255, 66/255];\ndark_brass_color = [150/255, 130/255, 50/255];\npatina_color = [0.3, 0.4, 0.3];\n\n// Main body with historical proportions\nmodule mezuzah_body() {\n    difference() {\n        // Outer case\n        color(brass_color)\n        cube([length, width, depth], center = true);\n        \n        // Inner cavity for scroll\n        translate([0, 0, -wall_thickness/2])\n        cube([length - wall_thickness*2, width - wall_thickness*2, depth - wall_thickness], center = true);\n        \n        // Top opening\n        translate([0, 0, depth/2])\n        cube([length - 20, width - 4, wall_thickness + 0.1], center = true);\n    }\n}\n\n// Medieval decorative end caps\nmodule end_caps() {\n    // Left cap with Star of David motif\n    translate([-length/2 - 3, 0, 0])\n    color(dark_brass_color) {\n        cylinder(h = width, r = width/2, center = true);\n        rotate([90, 0, 0])\n        cylinder(h = width, r = width/2 - 2, center = true);\n    }\n    \n    // Right cap with traditional Hebrew letter Shin\n    translate([length/2 + 3, 0, 0])\n    color(dark_brass_color) {\n        cylinder(h = width, r = width/2, center = true);\n        \n        // Hebrew letter Shin (simplified)\n        for(i = [-1, 0, 1]) {\n            translate([0, i * 3, 0])\n            cube([2, 1, width - 2], center = true);\n        }\n        for(i = [-1, 1]) {\n            rotate([0, 90, 30 * i])\n            translate([0, 0, 0])\n            cube([1.5, 4, 1.5], center = true);\n        }\n    }\n}\n\n// Historical decorative border pattern\nmodule decorative_border() {\n    color(brass_color)\n    for(i = [0:10:length-10]) {\n        translate([i - length/2 + 5, 0, depth/2 + 0.1])\n        scale([1, 0.8, 1])\n        rotate([90, 0, 0])\n        cylinder(h = 2, r1 = 2, r2 = 1);\n    }\n}\n\n// Medieval geometric patterns\nmodule geometric_patterns() {\n    color(dark_brass_color)\n    // Diamond pattern on front face\n    for(x = [-length/2 + 8:10:length/2 - 8]) {\n        for(y = [-width/2 + 4:6:width/2 - 4]) {\n            translate([x, y, depth/2 + 0.2])\n            rotate([0, 0, 45])\n            cube([4, 4, 0.5], center = true);\n        }\n    }\n}\n\n// Patina/age effects\nmodule age_effects() {\n    color(patina_color)\n    for(i = [1:15]) {\n        translate([\n            length * (0.1 + 0.8 * rands(0, 1, 1)[0]) - length/2,\n            width * (0.1 + 0.8 * rands(0, 1, 1)[0]) - width/2,\n            depth/2 + 0.3\n        ])\n        sphere(r = rands(0.5, 1.5, 1)[0]);\n    }\n}\n\n// Assembly\nunion() {\n    mezuzah_body();\n    end_caps();\n    decorative_border();\n    geometric_patterns();\n    age_effects();\n}",
    "renders": true
  },
  {
    "historical_artifact": "tefillin",
    "openscad_code": "// Tefillin - Historical Jewish phylactery artifact\n// Based on traditional Ashkenazi style tefillin from medieval period\n\n$fn = 50;\n\n// Main color - black leather\ncolor([0.1, 0.1, 0.1]) {\n\n// Head tefillin (shel rosh)\nmodule head_tefillin() {\n    // Main box - 4 compartments\n    translate([0, 0, 5]) {\n        difference() {\n            // Outer box\n            cube([32, 32, 16], center=true);\n            // Hollow interior\n            cube([28, 28, 14], center=true);\n        }\n    }\n    \n    // Base platform\n    translate([0, 0, -2]) {\n        cube([36, 36, 4], center=true);\n    }\n    \n    // Shin letter on left side\n    translate([-17, 0, 13]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=3, r=4);\n            translate([0, 3, 0]) cylinder(h=3, r=2);\n            translate([0, -3, 0]) cylinder(h=3, r=2);\n        }\n    }\n    \n    // Four compartments divider lines\n    for(i = [-12, -4, 4, 12]) {\n        translate([i, 0, 13]) {\n            cube([0.5, 28, 1]);\n        }\n    }\n    \n    // Leather straps attachment points\n    translate([0, 20, 0]) {\n        cube([8, 4, 2], center=true);\n    }\n}\n\n// Arm tefillin (shel yad)\nmodule arm_tefillin() {\n    // Single compartment box\n    translate([0, 0, 5]) {\n        difference() {\n            cube([20, 20, 16], center=true);\n            cube([16, 16, 14], center=true);\n        }\n    }\n    \n    // Base platform\n    translate([0, 0, -2]) {\n        cube([24, 24, 4], center=true);\n    }\n    \n    // Leather straps attachment\n    translate([0, 14, 0]) {\n        cube([6, 3, 2], center=true);\n    }\n}\n\n// Leather straps with knot patterns\nmodule straps() {\n    color([0.05, 0.05, 0.05]) {\n        // Head straps\n        translate([0, 25, 0]) {\n            for(i = [0:5:50]) {\n                translate([0, i, -3]) {\n                    cube([4, 4, 1]);\n                }\n            }\n        }\n        \n        // Arm straps\n        translate([0, -25, 0]) {\n            rotate([0, 0, 90]) {\n                for(i = [0:5:40]) {\n                    translate([0, i, -3]) {\n                        cube([3, 3, 1]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Decorative edges with traditional pattern\nmodule decorative_edges() {\n    // Head tefillin edges\n    translate([0, 0, 5]) {\n        difference() {\n            cube([34, 34, 2], center=true);\n            cube([32, 32, 3], center=true);\n        }\n    }\n    \n    // Arm tefillin edges  \n    translate([50, 0, 5]) {\n        difference() {\n            cube([22, 22, 2], center=true);\n            cube([20, 20, 3], center=true);\n        }\n    }\n}\n\n// Historical inscription texture\nmodule inscriptions() {\n    // Hebrew letters on head tefillin\n    translate([-15, -15, 13]) {\n        for(x = [0:8:24]) {\n            for(y = [0:8:24]) {\n                translate([x, y, 0]) {\n                    cube([1, 1, 0.5]);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ntranslate([-25, 0, 0]) head_tefillin();\ntranslate([25, 0, 0]) arm_tefillin();\ndecorative_edges();\nstraps();\ninscriptions();",
    "renders": true
  },
  {
    "historical_artifact": "kippah",
    "openscad_code": "// Historical Kippah Artifact - Yemenite Style (19th Century)\n// Typical Yemenite kippah with geometric embroidery patterns\n\n$fn = 36;  // Smooth curves\n\n// Main kippah base - slightly domed hemisphere\nmodule kippah_base() {\n    color(\"darkgoldenrod\") \n    difference() {\n        // Main dome shape\n        scale([1, 1, 0.4])\n        sphere(d=80);\n        \n        // Flatten bottom slightly\n        translate([0, 0, -0.5])\n        cube([100, 100, 1], center=true);\n    }\n}\n\n// Decorative border pattern around edge\nmodule border_pattern() {\n    color(\"goldenrod\") \n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([38, 0, 1])\n        rotate([90, 0, 0])\n        cylinder(h=2, r1=3, r2=2);\n    }\n}\n\n// Traditional Yemenite geometric star pattern\nmodule star_pattern() {\n    color(\"darkgoldenrod\") \n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([0, 0, 2])\n        linear_extrude(height=0.5)\n        polygon(points=[\n            [0, 0],\n            [5, 15],\n            [0, 20],\n            [-5, 15]\n        ]);\n    }\n}\n\n// Central medallion with Hebrew inscription\nmodule central_medallion() {\n    color(\"goldenrod\") \n    union() {\n        // Base medallion\n        translate([0, 0, 3])\n        cylinder(h=1, r=8);\n        \n        // Six-pointed star (Magen David)\n        for(rot = [0:60:300]) {\n            rotate([0, 0, rot])\n            translate([0, 4, 4.5])\n            scale([0.5, 1.2, 1])\n            cube([2, 8, 1], center=true);\n        }\n        \n        // Hebrew letter \"Shin\" - simplified representation\n        translate([0, 0, 5])\n        color(\"darkred\") \n        cube([3, 1, 0.5], center=true);\n        translate([0, 2, 5])\n        cube([3, 1, 0.5], center=true);\n        translate([0, -2, 5])\n        cube([3, 1, 0.5], center=true);\n    }\n}\n\n// Decorative side embroidery lines\nmodule embroidery_lines() {\n    color(\"goldenrod\") \n    for(r = [15:10:35]) {\n        rotate_extrude(angle=360, $fn=64)\n        translate([r, 0, 0])\n        square([0.5, 0.5]);\n    }\n}\n\n// Assembly\nunion() {\n    kippah_base();\n    border_pattern();\n    star_pattern();\n    central_medallion();\n    embroidery_lines();\n}",
    "renders": true
  },
  {
    "historical_artifact": "tallit",
    "openscad_code": "// Historical Tallit artifact - 16th century Polish style\n// Size: 80mm x 60mm x 2mm (scaled for 3D printing)\n\n// Main tallit body module\nmodule tallit_body() {\n    // Base rectangular cloth with rounded corners\n    color(\"linen\") \n    difference() {\n        // Main rectangle\n        translate([0, 0, -0.5])\n            cube([80, 60, 1], center=true);\n        \n        // Rounded corners cutouts\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i*38, j*28, -1])\n                    cylinder(h=3, r=5, center=true);\n            }\n        }\n    }\n}\n\n// Atarah (neckband) with Hebrew inscription\nmodule atarah() {\n    color(\"darkblue\") {\n        // Main atarah strip\n        translate([0, 25, 0.5])\n            cube([60, 8, 0.5], center=true);\n        \n        // Decorative pattern - alternating rectangles\n        for(i = [-4:1:4]) {\n            translate([i*6, 25, 1]) {\n                cube([2, 7, 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Tzitzit corner with knots\nmodule tzitzit_corner(base_x, base_y) {\n    color(\"white\") {\n        // Corner reinforcement patch\n        translate([base_x, base_y, 0.5])\n            cube([8, 8, 0.3], center=true);\n        \n        // Hole for tzitzit thread\n        translate([base_x, base_y, 0.5])\n            cylinder(h=2, r=1, center=true);\n        \n        // Tzitzit strings (simplified as cylinders)\n        for(i = [0:3]) {\n            translate([base_x + cos(i*90)*1.5, base_y + sin(i*90)*1.5, -1])\n                cylinder(h=8, r=0.3, center=false);\n        }\n    }\n}\n\n// Stripes pattern on tallit\nmodule stripes() {\n    color(\"darkblue\") {\n        // Horizontal stripes\n        for(y = [-15:10:15]) {\n            translate([0, y, 0.5])\n                cube([78, 2, 0.2], center=true);\n        }\n        \n        // Vertical stripes at edges\n        for(x = [-38, 38]) {\n            translate([x, 0, 0.5])\n                cube([2, 58, 0.2], center=true);\n        }\n    }\n}\n\n// Decorative embroidery pattern\nmodule embroidery() {\n    color(\"silver\") {\n        // Small dots pattern\n        for(x = [-30:5:30]) {\n            for(y = [-20:5:20]) {\n                if((x+y) % 10 == 0) {\n                    translate([x, y, 0.8])\n                        sphere(r=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main tallit body\n    tallit_body();\n    \n    // Atarah (neckband)\n    atarah();\n    \n    // Stripes\n    stripes();\n    \n    // Embroidery details\n    embroidery();\n    \n    // Four tzitzit corners\n    tzitzit_corner(-35, -25);\n    tzitzit_corner(35, -25);\n    tzitzit_corner(-35, 25);\n    tzitzit_corner(35, 25);\n}",
    "renders": true
  },
  {
    "historical_artifact": "siddur",
    "openscad_code": "$fn = 100;\n\n// Historical Siddur Artifact (16th century Italian Jewish prayer book)\n// Dimensions in mm, sized for 3D printing\n\n// Main cover proportions based on historical siddurim\ncover_width = 45;\ncover_height = 60;\ncover_thickness = 3;\nspine_radius = 2;\n\n// Colors for realistic appearance\ncover_color = \"SaddleBrown\";\npage_color = \"AntiqueWhite\";\nmetal_color = \"Goldenrod\";\n\n// Main body module\nmodule siddur_body() {\n    // Front cover with rounded spine\n    translate([-cover_width/2, -cover_height/2, -cover_thickness/2])\n    difference() {\n        // Main cover block\n        color(cover_color)\n        cube([cover_width, cover_height, cover_thickness]);\n        \n        // Rounded spine edge\n        translate([-0.5, spine_radius, cover_thickness/2])\n        rotate([0, 90, 0])\n        cylinder(h=cover_height+1, r=spine_radius, center=true);\n    }\n    \n    // Back cover (mirrored)\n    translate([-cover_width/2, -cover_height/2, cover_thickness/2])\n    mirror([0, 0, 1])\n    difference() {\n        color(cover_color)\n        cube([cover_width, cover_height, cover_thickness]);\n        \n        translate([-0.5, spine_radius, cover_thickness/2])\n        rotate([0, 90, 0])\n        cylinder(h=cover_height+1, r=spine_radius, center=true);\n    }\n    \n    // Page block\n    translate([-cover_width/2+1, -cover_height/2+2, -cover_thickness/2+1])\n    color(page_color)\n    cube([cover_width-2, cover_height-4, cover_thickness*2-2]);\n}\n\n// Metal corner protectors\nmodule corner_protector(x_pos, y_pos) {\n    translate([x_pos, y_pos, cover_thickness/2])\n    color(metal_color) {\n        // Main triangular protector\n        linear_extrude(height=1.5)\n        polygon(points=[[0,0], [5,0], [0,5]]);\n        \n        // Tiny decorative rivet\n        translate([1, 1, 1.6])\n        sphere(r=0.5);\n    }\n}\n\n// Decorative spine ridges\nmodule spine_ridges() {\n    for(i = [-25:5:25]) {\n        translate([-cover_width/2-1, i, 0])\n        rotate([0, 90, 0])\n        color(cover_color)\n        cylinder(h=1, r=1.5);\n    }\n}\n\n// Hebrew letter Shin decoration on cover\nmodule cover_shin() {\n    translate([0, cover_height/4, cover_thickness/2+0.1])\n    rotate([0, 0, 180])\n    color(metal_color)\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [-3, 0], [3, 0], [3, -2], [1, -2], [1, -4], [-1, -4], [-1, -2], [-3, -2]\n    ]);\n}\n\n// Page edges texture\nmodule page_edges() {\n    for(i = [-cover_thickness+1:0.2:cover_thickness-1]) {\n        translate([-cover_width/2+1, -cover_height/2+2, i])\n        color(page_color)\n        cube([cover_width-2, 0.1, 0.1]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main siddur body\n    siddur_body();\n    \n    // Corner protectors on front cover\n    corner_protector(cover_width/2-5, cover_height/2-5);\n    corner_protector(-cover_width/2, cover_height/2-5);\n    corner_protector(cover_width/2-5, -cover_height/2);\n    corner_protector(-cover_width/2, -cover_height/2);\n    \n    // Same protectors mirrored on back cover\n    mirror([0, 0, 1]) {\n        corner_protector(cover_width/2-5, cover_height/2-5);\n        corner_protector(-cover_width/2, cover_height/2-5);\n        corner_protector(cover_width/2-5, -cover_height/2);\n        corner_protector(-cover_width/2, -cover_height/2);\n    }\n    \n    // Spine decorations\n    spine_ridges();\n    \n    // Cover decoration\n    cover_shin();\n}\n\n// Page edge details visible from sides\npage_edges();",
    "renders": true
  },
  {
    "historical_artifact": "machzor",
    "openscad_code": "// Machzor Historical Artifact - Medieval Hebrew Prayer Book\n// Realistic style with moderate detail for 3D printing\n\n// Overall dimensions (mm)\nbook_width = 40;\nbook_height = 55;\nbook_thickness = 12;\npage_thickness = 0.8;\ncover_thickness = 1.5;\n\n// Colors\ncover_color = [0.6, 0.3, 0.1];  // Dark brown leather\npage_color = [0.9, 0.85, 0.75];  // Aged parchment\nmetal_color = [0.7, 0.6, 0.2];  // Brass fittings\n\n// Main module\nmodule machzor() {\n    // Front and back covers\n    difference() {\n        union() {\n            // Back cover\n            color(cover_color) translate([0, 0, 0])\n                cube([book_width, book_height, cover_thickness], center=true);\n            \n            // Front cover\n            color(cover_color) translate([0, 0, book_thickness])\n                cube([book_width, book_height, cover_thickness], center=true);\n            \n            // Spine\n            color(cover_color) translate([-(book_width/2 + cover_thickness/2), 0, book_thickness/2])\n                rotate([0, 90, 0])\n                cylinder(h=book_thickness, r=cover_thickness/2, center=true);\n            \n            // Metal corner protectors\n            for(x=[-1, 1]) {\n                for(y=[-1, 1]) {\n                    for(z=[0, book_thickness]) {\n                        color(metal_color) translate([x*book_width/2.5, y*book_height/2.5, z])\n                            cube([4, 4, 1.5], center=true);\n                    }\n                }\n            }\n            \n            // Central decorative element on front\n            color(metal_color) translate([0, 0, book_thickness + cover_thickness/2 + 0.8])\n                cylinder(h=0.5, r=8, $fn=6);\n            \n            // Decorative bands on spine\n            for(i=[-0.3, 0, 0.3]) {\n                color(metal_color) translate([-(book_width/2 + 0.5), i*book_height/3, book_thickness/2])\n                    rotate([0, 90, 0])\n                    cylinder(h=book_thickness*0.8, r=0.5, center=true);\n            }\n        }\n        \n        // Pages cavity\n        color(page_color) translate([0, 0, cover_thickness/2 + 0.1])\n            cube([book_width-4, book_height-4, book_thickness - cover_thickness - 0.2], center=true);\n    }\n    \n    // Pages - multiple thin sheets\n    for(i=[0:1:10]) {\n        color(page_color) translate([0, 0, cover_thickness + i*page_thickness + 0.2])\n            cube([book_width-6, book_height-6, page_thickness], center=true);\n    }\n    \n    // Hebrew inscription on spine (simplified as grooves)\n    for(i=[-0.5, 0, 0.5]) {\n        translate([-(book_width/2 + cover_thickness/2 - 0.1), i*book_height/4, book_thickness/2])\n            rotate([0, 90, 0])\n            cube([0.3, 2, book_thickness*0.6], center=true);\n    }\n    \n    // Clasp mechanism\n    color(metal_color) translate([book_width/2 - 2, -book_height/2 + 3, book_thickness + cover_thickness/2])\n        cube([1, 6, 1.5], center=true);\n    \n    color(metal_color) translate([book_width/2 - 2, book_height/2 - 3, cover_thickness/2])\n        cube([1, 3, 1.5], center=true);\n}\n\n// Render the complete artifact\nmachzor();",
    "renders": true
  },
  {
    "historical_artifact": "ketubah",
    "openscad_code": "// Historical Ketubah - Jewish Marriage Contract\n// Medium complexity realistic representation for 3D printing\n// Overall dimensions: 80mm x 60mm x 5mm\n\n$fn = 32;\n\n// Main parchment base\nmodule parchment_base() {\n    color(\"burlywood\") \n    difference() {\n        // Main rectangular parchment\n        translate([0, 0, 1]) \n        cube([80, 60, 3], center = true);\n        \n        // Rounded corners\n        for(x = [-38, 38])\n        for(y = [-28, 28]) {\n            translate([x, y, 2.5]) \n            cylinder(h = 5, r = 3, center = true);\n        }\n    }\n}\n\n// Decorative border pattern\nmodule decorative_border() {\n    color(\"goldenrod\") {\n        // Top and bottom borders\n        for(y = [-27, 27])\n        translate([0, y, 3.5]) \n        cube([76, 4, 1], center = true);\n        \n        // Left and right borders\n        for(x = [-38, 38])\n        translate([x, 0, 3.5]) \n        cube([4, 54, 1], center = true);\n        \n        // Corner decorations\n        for(x = [-36, 36])\n        for(y = [-26, 26]) {\n            translate([x, y, 4]) \n            cylinder(h = 1, r = 2);\n        }\n    }\n}\n\n// Hebrew text inscription blocks\nmodule text_blocks() {\n    color(\"saddlebrown\") {\n        // Main text area\n        translate([0, 10, 4]) \n        cube([60, 20, 0.5], center = true);\n        \n        // Bride and groom names\n        translate([-20, -10, 4]) \n        cube([15, 8, 0.5], center = true);\n        \n        translate([20, -10, 4]) \n        cube([15, 8, 0.5], center = true);\n        \n        // Date and location\n        translate([0, -20, 4]) \n        cube([50, 6, 0.5], center = true);\n    }\n}\n\n// Star of David decorative element\nmodule star_of_david() {\n    color(\"goldenrod\") {\n        translate([0, 15, 5]) {\n            // Two overlapping triangles\n            rotate([0, 0, 0]) \n            linear_extrude(height = 1) {\n                polygon(points = [[0, 10], [-8.66, -5], [8.66, -5]]);\n            }\n            rotate([0, 0, 180]) \n            linear_extrude(height = 1) {\n                polygon(points = [[0, 10], [-8.66, -5], [8.66, -5]]);\n            }\n        }\n    }\n}\n\n// Ornamental vines\nmodule decorative_vines() {\n    color(\"darkgreen\") {\n        // Left vine\n        for(i = [0:3]) {\n            translate([-30 + i*5, 0, 4.5]) \n            rotate([0, 0, i*30]) \n            cylinder(h = 8, r = 0.5);\n        }\n        \n        // Right vine\n        for(i = [0:3]) {\n            translate([30 - i*5, 0, 4.5]) \n            rotate([0, 0, -i*30]) \n            cylinder(h = 8, r = 0.5);\n        }\n    }\n}\n\n// Signature lines at bottom\nmodule signature_lines() {\n    color(\"saddlebrown\") {\n        for(x = [-25, -8, 9, 26]) {\n            translate([x, -27, 4]) \n            cube([12, 0.5, 0.5], center = true);\n        }\n    }\n}\n\n// Witness stamps\nmodule witness_stamps() {\n    color(\"firebrick\") {\n        for(x = [-15, 15]) {\n            translate([x, -27, 5]) \n            cylinder(h = 1, r = 3);\n        }\n    }\n}\n\n// Assembly\nparchment_base();\ndecorative_border();\ntext_blocks();\nstar_of_david();\ndecorative_vines();\nsignature_lines();\nwitness_stamps();",
    "renders": true
  },
  {
    "historical_artifact": "sefer",
    "openscad_code": "// Historical Sefer Torah Scroll Artifact\n// Medium complexity realistic model with traditional features\n\n// Parameters\nscroll_length = 85;\nscroll_diameter = 18;\nroller_diameter = 4;\nhandle_length = 12;\nyad_length = 35;\ncover_thickness = 2;\n\n// Wooden rollers with traditional handles\nmodule roller(has_handle=true) {\n    color(\"burlywood\") {\n        // Main roller body\n        cylinder(d=roller_diameter, h=scroll_length, $fn=20);\n        \n        // Crown-shaped handle\n        if (has_handle) {\n            translate([0, 0, scroll_length/2 + handle_length/2]) {\n                // Handle shaft\n                cylinder(d=roller_diameter*0.8, h=handle_length*0.7, $fn=8);\n                \n                // Crown top\n                translate([0, 0, handle_length*0.35]) {\n                    for(i=[0:8]) {\n                        rotate([0, 0, i*45]) {\n                            translate([roller_diameter*0.4, 0, 0]) {\n                                cylinder(d=roller_diameter*0.3, h=handle_length*0.3, $fn=6);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Parchment scroll with visible edges\nmodule parchment_scroll() {\n    color(\"beige\") {\n        // Main scroll body\n        difference() {\n            cylinder(d=scroll_diameter, h=scroll_length - 4, $fn=32);\n            \n            // Hollow center\n            cylinder(d=scroll_diameter - 6, h=scroll_length - 2, $fn=32);\n        }\n        \n        // Visible parchment edges\n        for(i=[0:7]) {\n            rotate([0, 90, i*45]) {\n                translate([scroll_diameter/2 - 1, 0, -(scroll_length/2) + 2]) {\n                    cube([2, scroll_diameter - 8, 0.5]);\n                }\n            }\n        }\n    }\n}\n\n// Traditional velvet cover with crown embroidery\nmodule scroll_cover() {\n    color(\"darkblue\") {\n        // Main cover body\n        difference() {\n            // Outer cover\n            cube([scroll_diameter + 8, scroll_length + 4, scroll_diameter/2 + 2], center=true);\n            \n            // Inner cavity\n            cube([scroll_diameter + 4, scroll_length, scroll_diameter/2], center=true);\n        }\n        \n        // Embroidered crown on front\n        color(\"gold\") {\n            translate([0, 0, scroll_diameter/4 + 0.5]) {\n                // Crown base\n                cube([scroll_diameter*0.8, 6, 1]);\n                \n                // Crown points\n                for(i=[0:4]) {\n                    translate([-scroll_diameter*0.3 + i*scroll_diameter*0.15, 3.5, 1]) {\n                        cube([scroll_diameter*0.1, 3, 1]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Yad (Torah pointer) with traditional chain\nmodule yad_pointer() {\n    color(\"silver\") {\n        // Handle\n        cylinder(d=3, h=yad_length*0.8, $fn=16);\n        \n        // Pointer hand\n        translate([0, 0, yad_length*0.8]) {\n            rotate([0, -20, 0]) {\n                // Palm\n                translate([0, 0, 2]) {\n                    sphere(d=4);\n                }\n                \n                // Index finger\n                translate([0, 0, 4]) {\n                    cylinder(d=1.5, h=6, $fn=8);\n                }\n            }\n        }\n        \n        // Chain loop\n        translate([0, 0, -yad_length*0.4]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(d=5, h=2, $fn=20);\n                    cylinder(d=3, h=3, $fn=20);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\n// Left roller\ntranslate([-scroll_diameter/2 - roller_diameter/2 - 2, 0, 0]) {\n    roller(true);\n}\n\n// Right roller\ntranslate([scroll_diameter/2 + roller_diameter/2 + 2, 0, 0]) {\n    roller(false);\n}\n\n// Scroll between rollers\nparchment_scroll();\n\n// Cover on top\ntranslate([0, 0, scroll_diameter/2 + cover_thickness/2 + 2]) {\n    scroll_cover();\n}\n\n// Yad pointer beside scroll\ntranslate([scroll_diameter/2 + 15, scroll_length/2 - 10, -scroll_diameter/2 + 5]) {\n    rotate([0, 90, 0]) {\n        yad_pointer();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "torah",
    "openscad_code": "// Realistic Torah Scroll Artifact (Medium Complexity)\n// 3D printable historical artifact with traditional features\n\n$fn = 32;  // Smooth curves\n\n// Main colors\ncolor_wood = [139/255, 90/255, 43/255];\ncolor_parchment = [255/255, 248/255, 220/255];\ncolor_gold = [212/255, 175/255, 55/255];\ncolor_silver = [192/255, 192/255, 192/255];\n\n// Overall dimensions (mm)\nscroll_length = 60;\nscroll_diameter = 25;\nhandle_length = 15;\nhandle_diameter = 8;\n\nmodule scroll_body() {\n    color(color_parchment) {\n        // Main scroll body - rolled parchment\n        rotate([90, 0, 0])\n            cylinder(h=scroll_length, d=scroll_diameter, center=true);\n        \n        // Edge details showing rolled layers\n        for(i = [0:5]) {\n            translate([0, 0, scroll_length/2 - i*3])\n                rotate([90, 0, 0])\n                    cylinder(h=1, d=scroll_diameter - i*2, center=true);\n        }\n    }\n}\n\nmodule wooden_handle() {\n    color(color_wood) {\n        // Main handle\n        cylinder(h=handle_length, d=handle_diameter);\n        \n        // Decorative end cap\n        translate([0, 0, handle_length - 2])\n            cylinder(h=3, d1=handle_diameter, d2=handle_diameter + 4);\n        \n        // Carved grip rings\n        for(i = [1:3]) {\n            translate([0, 0, i * 3])\n                difference() {\n                    cylinder(h=1, d=handle_diameter + 1);\n                    cylinder(h=1.2, d=handle_diameter - 1);\n                }\n        }\n    }\n}\n\nmodule etz_chayim(handles) {\n    // Wooden rollers (Etz Chayim - \"Tree of Life\")\n    for(side = [-1, 1]) {\n        translate([0, side * scroll_diameter/2, scroll_length/2 + handle_length/2 - 5]) {\n            if(handles) {\n                rotate([90, 0, 0])\n                    wooden_handle();\n            }\n        }\n        \n        translate([0, side * scroll_diameter/2, -scroll_length/2 - handle_length/2 + 5]) {\n            if(handles) {\n                rotate([-90, 0, 0])\n                    wooden_handle();\n            }\n        }\n    }\n}\n\nmodule mantle() {\n    color([75/255, 0, 130/255]) {  // Traditional purple/burgundy\n        // Main mantle covering\n        difference() {\n            translate([0, 0, 0])\n                cube([scroll_diameter + 4, scroll_diameter + 4, scroll_length + 8], center=true);\n            \n            // Hollow center\n            translate([0, 0, 0])\n                cube([scroll_diameter - 2, scroll_diameter - 2, scroll_length + 10], center=true);\n        }\n        \n        // Decorative breastplate (Hoshen)\n        translate([0, scroll_diameter/2 + 2, 0])\n            difference() {\n                cube([scroll_diameter - 4, 1, scroll_length/3], center=true);\n                // Engraved pattern\n                for(i = [-2:2]) {\n                    translate([i*4, 0, 0])\n                        cube([1, 1.1, scroll_length/4], center=true);\n                }\n            }\n    }\n}\n\nmodule crown() {\n    color(color_gold) {\n        // Crown (Atarah) for top\n        translate([0, 0, scroll_length/2 + 4])\n            difference() {\n                cylinder(h=3, d=scroll_diameter + 6);\n                cylinder(h=3.5, d=scroll_diameter);\n                \n                // Crown points\n                for(i = [0:11]) {\n                    rotate([0, 0, i * 30])\n                        translate([scroll_diameter/2 + 2, 0, 0])\n                            cube([2, 1, 3], center=true);\n                }\n            }\n    }\n}\n\nmodule shield() {\n    color(color_silver) {\n        // Decorative shield (Breastplate)\n        translate([0, scroll_diameter/2 + 1, scroll_length/4])\n            difference() {\n                // Main shield shape\n                cube([scroll_diameter - 6, 1, scroll_length/4], center=true);\n                \n                // Engraved Star of David\n                union() {\n                    translate([0, 0, 0])\n                        cube([8, 0.2, 8], center=true);\n                    translate([0, 0, 0])\n                        cube([0.2, 0.2, 12], center=true);\n                }\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main scroll\n    scroll_body();\n    \n    // Wooden rollers with handles\n    etz_chayim(true);\n    \n    // Mantle covering\n    mantle();\n    \n    // Crown ornament\n    crown();\n    \n    // Breastplate\n    shield();\n}",
    "renders": true
  },
  {
    "historical_artifact": "scroll",
    "openscad_code": "// Ancient Scroll Artifact - OpenSCAD Model\n// Historical papyrus scroll with wooden rollers and leather ties\n// Designed for 3D printing - approximately 80mm long\n\n// Main scroll assembly\nmodule scroll_artifact() {\n    color(\"burlywood\") {\n        // Left wooden roller (core)\n        translate([-40, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=15, d=8, $fn=32);\n                \n                // Decorative end caps\n                translate([0, 7.5, 0]) {\n                    sphere(d=10, $fn=32);\n                    translate([0, 0.5, 0]) cylinder(h=2, d=8, $fn=32);\n                }\n                translate([0, -7.5, 0]) {\n                    sphere(d=10, $fn=32);\n                    translate([0, -0.5, 0]) cylinder(h=2, d=8, $fn=32);\n                }\n            }\n        }\n        \n        // Right wooden roller (core)\n        translate([40, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=15, d=8, $fn=32);\n                \n                // Decorative end caps\n                translate([0, 7.5, 0]) {\n                    sphere(d=10, $fn=32);\n                    translate([0, 0.5, 0]) cylinder(h=2, d=8, $fn=32);\n                }\n                translate([0, -7.5, 0]) {\n                    sphere(d=10, $fn=32);\n                    translate([0, -0.5, 0]) cylinder(h=2, d=8, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Papyrus scroll body\n    color(\"papyrus\") {\n        difference() {\n            union() {\n                // Main scroll sheets (layered)\n                for(i = [0:0.5:3]) {\n                    translate([0, 0, i]) {\n                        rotate([0, 0, 5]) {\n                            scale([1, 1.05, 1]) {\n                                cube([78, 16, 0.5], center=true);\n                            }\n                        }\n                    }\n                }\n                \n                // Rolled edges\n                translate([-37, 0, 1.5]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=15.5, d=14, $fn=32);\n                    }\n                }\n                translate([37, 0, 1.5]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=15.5, d=14, $fn=32);\n                    }\n                }\n            }\n            \n            // Hollow centers for rollers\n            translate([-40, 0, 1.5]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=20, d=9, $fn=32);\n                }\n            }\n            translate([40, 0, 1.5]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=20, d=9, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Hieroglyphic inscriptions (raised details)\n    color(\"saddlebrown\") {\n        // Left side hieroglyphs\n        translate([-20, 0, 2.5]) {\n            for(x = [-8:4:8]) {\n                for(y = [-5:3:5]) {\n                    translate([x, y, 0]) {\n                        cube([2, 2, 0.3]);\n                    }\n                }\n            }\n        }\n        \n        // Right side hieroglyphs\n        translate([20, 0, 2.5]) {\n            for(x = [-8:4:8]) {\n                for(y = [-5:3:5]) {\n                    translate([x, y, 0]) {\n                        sphere(d=1.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Leather binding ties\n    color(\"saddlebrown\") {\n        // Left tie\n        translate([-20, 0, 2.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=20, d=1.5, $fn=16);\n            }\n        }\n        \n        // Right tie\n        translate([20, 0, 2.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=20, d=1.5, $fn=16);\n            }\n        }\n        \n        // Knot details\n        translate([-20, 9.5, 2.5]) {\n            sphere(d=3);\n        }\n        translate([20, 9.5, 2.5]) {\n            sphere(d=3);\n        }\n    }\n    \n    // Wax seal\n    color(\"firebrick\") {\n        translate([0, -7, 2.5]) {\n            cylinder(h=1.5, d=6, $fn=32);\n            translate([0, 0, 1.5]) {\n                sphere(d=6, $fn=32);\n            }\n        }\n    }\n}\n\n// Display stand\nmodule stand() {\n    color(\"saddlebrown\") {\n        difference() {\n            // Main base\n            translate([0, 0, -5]) {\n                cube([100, 30, 4], center=true);\n            }\n            \n            // Center cutout\n            translate([0, 0, -5]) {\n                cube([90, 20, 5], center=true);\n            }\n        }\n        \n        // Support ridges\n        translate([-30, 0, -3]) {\n            cube([5, 20, 2], center=true);\n        }\n        translate([30, 0, -3]) {\n            cube([5, 20, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nscroll_artifact();\ntranslate([0, 0, -8]) stand();",
    "renders": true
  },
  {
    "historical_artifact": "manuscript",
    "openscad_code": "// Medieval Illuminated Manuscript - Book of Hours Style\n// 15th century manuscript with wooden covers, leather binding, and decorative clasps\n\n$fn = 32; // Smoother curves\n\n// Main dimensions (mm)\nbook_width = 60;\nbook_height = 80;\nbook_thickness = 15;\ncover_thickness = 2;\npage_thickness = 11;\nmetal_thickness = 1;\n\n// Colors\nwood_color = \"#8B4513\";\nleather_color = \"#4A2C17\";\ngold_color = \"#FFD700\";\npage_color = \"#F5F5DC\";\nmetal_color = \"#C0C0C0\";\n\n// Wooden cover with raised border\nmodule wooden_cover() {\n    color(wood_color) {\n        // Main cover board\n        translate([0, 0, 0])\n            cube([book_width, book_height, cover_thickness], center=true);\n        \n        // Raised border\n        translate([0, 0, cover_thickness/2 + 0.5])\n            cube([book_width - 4, book_height - 4, 1], center=true);\n    }\n}\n\n// Leather spine with raised bands\nmodule leather_spine() {\n    color(leather_color) {\n        // Main spine\n        translate([book_width/2 + 0.5, 0, page_thickness/2 + cover_thickness/2])\n            cube([2, book_height, page_thickness + cover_thickness], center=true);\n        \n        // Raised bands (5 cords)\n        for (i = [-2:2]) {\n            translate([book_width/2 + 0.5, i * 12, page_thickness/2 + cover_thickness/2 + 1])\n                cube([2.5, 3, page_thickness + cover_thickness + 2], center=true);\n        }\n    }\n}\n\n// Metal corner protectors\nmodule corner_protectors() {\n    color(metal_color) {\n        // Define corner positions\n        positions = [\n            [-book_width/2 + 3, book_height/2 - 3],\n            [book_width/2 - 3, book_height/2 - 3],\n            [-book_width/2 + 3, -book_height/2 + 3],\n            [book_width/2 - 3, -book_height/2 + 3]\n        ];\n        \n        for (pos = positions) {\n            translate([pos[0], pos[1], cover_thickness/2 + 0.5]) {\n                // Corner triangle\n                linear_extrude(height=metal_thickness)\n                    polygon(points=[[0,0], [5,0], [0,5]]);\n                \n                // Decorative rivet\n                translate([1, 1, metal_thickness/2])\n                    cylinder(h=2, r=0.5);\n            }\n        }\n    }\n}\n\n// Decorative clasp and lock\nmodule clasp() {\n    color(gold_color) {\n        // Main clasp on front cover\n        translate([book_width/2 - 8, 0, cover_thickness + 1])\n            cube([6, 10, 2]);\n        \n        // Hinge part\n        for (i = [-1, 1]) {\n            translate([book_width/2 - 8, i * 4, cover_thickness + 2])\n                cylinder(h=3, r=1);\n        }\n        \n        // Lock plate on spine\n        translate([book_width/2 + 1, 0, page_thickness/2 + cover_thickness/2])\n            cube([2, 8, 3], center=true);\n    }\n}\n\n// Pages visible at edges\nmodule pages() {\n    color(page_color) {\n        translate([0, 0, 0])\n            cube([book_width - 1, book_height - 1, page_thickness], center=true);\n        \n        // Page edges detail\n        for (i = [-4:4]) {\n            translate([book_width/2 - 1, i * 8, 0])\n                cube([0.5, 6, page_thickness], center=true);\n        }\n    }\n}\n\n// Central boss decoration\nmodule boss_decoration() {\n    color(gold_color) {\n        translate([0, 0, cover_thickness + 1]) {\n            cylinder(h=2, r=8);\n            cylinder(h=3, r=4);\n            cylinder(h=4, r=2);\n        }\n    }\n}\n\n// Assemble the manuscript\nunion() {\n    // Bottom cover\n    translate([0, 0, -page_thickness/2 - cover_thickness/2])\n        wooden_cover();\n    \n    // Top cover\n    translate([0, 0, page_thickness/2 + cover_thickness/2])\n        wooden_cover();\n    \n    // Pages between covers\n    pages();\n    \n    // Spine\n    leather_spine();\n    \n    // Metal protectors\n    corner_protectors();\n    \n    // Clasp and lock mechanism\n    clasp();\n    \n    // Central decoration on front cover\n    translate([0, 0, page_thickness/2 + cover_thickness])\n        boss_decoration();\n}",
    "renders": true
  },
  {
    "historical_artifact": "codex",
    "openscad_code": "// Medieval illuminated codex, 9th century style\n// 3D-printable model – medium complexity\n\n$fn = 32;\ncover_t = 3;        // thickness of wooden boards\npage_t = 0.8;       // thickness of one folio block\nmetal_t = 1;        // thickness of corner bosses\nboss_r = 4;         // radius of corner boss\nstrap_w = 6;        // width of leather strap\nstrap_t = 1.2;\nspine_h = 8;        // raised spine height\n\n// Main assembly\ncolor(\"saddlebrown\")          // leather cover\ndifference() {\n    codex_body();\n    codex_details();\n}\ncolor(\"darkgoldenrod\") corner_bosses();   // brass fittings\ncolor(\"tan\") spine_straps();\n\nmodule codex_body() {\n    // wooden core covered with leather\n    difference() {\n        union() {\n            // front cover\n            translate([0, 0, cover_t/2])\n                cube([70, 95, cover_t], center=true);\n            // back cover (mirror of front)\n            mirror([0, 0, 1])\n                translate([0, 0, cover_t/2])\n                    cube([70, 95, cover_t], center=true);\n            // spine\n            translate([-70/2 - cover_t/2, 0, 0])\n                cube([cover_t, 95, spine_h*2 + cover_t*2 + page_t*2], center=true);\n        }\n\n        // hollow out for pages\n        difference() {\n            translate([0, 0, 0])\n                cube([65, 90, page_t*2 + 2], center=true);\n            // page gap\n            translate([0, 0, 0])\n                cube([63, 88, page_t*2 + 4], center=true);\n        }\n    }\n}\n\nmodule codex_details() {\n    // central cross motif\n    translate([0, 0, cover_t/2 + 0.2])\n        union() {\n            cube([8, 40, 0.5], center=true);\n            cube([40, 8, 0.5], center=true);\n        }\n    // four corner circles\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x*25, y*35, cover_t/2 + 0.2])\n                cylinder(h=0.5, r=6);\n}\n\nmodule corner_bosses() {\n    // brass protective corners\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x*32, y*42, cover_t/2 + metal_t/2])\n                difference() {\n                    cylinder(h=metal_t, r=boss_r);\n                    cylinder(h=metal_t+0.1, r=boss_r-1);\n                }\n    // same on back\n    mirror([0, 0, 1])\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x*32, y*42, cover_t/2 + metal_t/2])\n                    difference() {\n                        cylinder(h=metal_t, r=boss_r);\n                        cylinder(h=metal_t+0.1, r=boss_r-1);\n                    }\n}\n\nmodule spine_straps() {\n    // raised leather straps over spine\n    for(i = [-2:1:2])\n        translate([-70/2 - cover_t/2, i*18, 0])\n            rotate([0, 90, 0])\n                cylinder(h=strap_w, r=strap_t, center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "icon",
    "openscad_code": "// Ancient Egyptian Scarab Amulet\n// Based on New Kingdom scarabs (1550-1077 BCE)\n\n$fn = 32;\n\n// Main colors\ncolor_bronze = [0.72, 0.45, 0.2];\ncolor_dark_bronze = [0.55, 0.35, 0.15];\ncolor_stone = [0.85, 0.8, 0.7];\n\n// Overall dimensions\nscarab_width = 35;\nscarab_length = 45;\nscarab_height = 18;\n\nmodule scarab_body() {\n    difference() {\n        // Main body - oval shape\n        color(color_stone)\n        scale([1, 1.2, 0.6])\n        sphere(d = scarab_width);\n        \n        // Flatten bottom\n        translate([0, 0, -scarab_height/2])\n        cube([scarab_width*2, scarab_length*2, scarab_height], center = true);\n    }\n}\n\nmodule wing_cases() {\n    // Left wing case\n    translate([-scarab_width/4, 0, scarab_height/4])\n    rotate([0, 15, -15])\n    color(color_dark_bronze)\n    scale([1.2, 0.3, 0.8])\n    cylinder(h = scarab_length/2, d1 = scarab_width/3, d2 = scarab_width/4);\n    \n    // Right wing case\n    translate([scarab_width/4, 0, scarab_height/4])\n    rotate([0, 15, 15])\n    color(color_dark_bronze)\n    scale([1.2, 0.3, 0.8])\n    cylinder(h = scarab_length/2, d1 = scarab_width/3, d2 = scarab_width/4);\n}\n\nmodule head() {\n    // Scarab head\n    translate([0, scarab_length/2 - 5, scarab_height/3])\n    color(color_stone)\n    scale([0.5, 0.4, 0.5])\n    sphere(d = scarab_width/2);\n    \n    // Eyes\n    for(x = [-scarab_width/6, scarab_width/6]) {\n        translate([x, scarab_length/2 - 3, scarab_height/2.5])\n        color(color_dark_bronze)\n        sphere(d = 2);\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Front pair\n        translate([side * scarab_width/3, scarab_length/3, 0])\n        rotate([0, 90, side * -30])\n        color(color_bronze)\n        cylinder(h = 8, d = 2);\n        \n        // Middle pair\n        translate([side * scarab_width/2.5, 0, -2])\n        rotate([0, 90, side * -20])\n        color(color_bronze)\n        cylinder(h = 10, d = 2);\n        \n        // Back pair\n        translate([side * scarab_width/3, -scarab_length/3, 0])\n        rotate([0, 90, side * -10])\n        color(color_bronze)\n        cylinder(h = 8, d = 2);\n    }\n}\n\nmodule hieroglyphs_base() {\n    // Base with hieroglyph inscription\n    translate([0, 0, -scarab_height/2 - 1])\n    color(color_bronze)\n    difference() {\n        cube([scarab_width + 8, scarab_length + 8, 2], center = true);\n        \n        // Hieroglyph pattern - simplified lotus and sun symbols\n        for(i = [-2:2]) {\n            translate([i * 6, 0, -0.5])\n            cylinder(h = 3, d = 3);\n        }\n        for(i = [-1:1]) {\n            translate([i * 8, 8, -0.5])\n            cylinder(h = 3, d = 3);\n            translate([i * 8, -8, -0.5])\n            cylinder(h = 3, d = 3);\n        }\n    }\n}\n\nmodule decorative_elements() {\n    // Wing patterns\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle])\n        translate([0, 0, scarab_height/3])\n        color(color_bronze)\n        scale([0.8, 0.1, 0.05])\n        rotate([90, 0, 0])\n        cylinder(h = scarab_width/2.5, d = 8);\n    }\n    \n    // Central line on back\n    translate([0, 0, scarab_height/2.5])\n    color(color_dark_bronze)\n    scale([0.1, 1.2, 0.1])\n    sphere(d = scarab_width);\n}\n\n// Assemble the scarab\nunion() {\n    scarab_body();\n    wing_cases();\n    head();\n    legs();\n    hieroglyphs_base();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "historical_artifact": "triptych",
    "openscad_code": "// Triptych Historical Artifact - Medieval Gothic Altarpiece\n// Dimensions: 80mm wide x 60mm tall x 15mm deep when closed\n\n// Overall scale factor\nscale_factor = 1;\n\n// Panel dimensions\npanel_width = 25 * scale_factor;\npanel_height = 60 * scale_factor;\npanel_depth = 3 * scale_factor;\nhinge_width = 2.5 * scale_factor;\n\nmodule triptych_frame() {\n    // Left panel frame\n    color(\"burlywood\") {\n        difference() {\n            // Outer frame\n            translate([-40, 0, 0]) cube([panel_width, panel_height, panel_depth]);\n            // Inner cutout\n            translate([-38, 2, -0.5]) cube([panel_width - 4, panel_height - 4, panel_depth + 1]);\n        }\n        \n        // Right panel frame (mirrored)\n        mirror([1, 0, 0]) \n            difference() {\n                translate([-40, 0, 0]) cube([panel_width, panel_height, panel_depth]);\n                translate([-38, 2, -0.5]) cube([panel_width - 4, panel_height - 4, panel_depth + 1]);\n            }\n        \n        // Center panel frame\n        translate([0, 0, 0]) {\n            difference() {\n                cube([panel_width, panel_height, panel_depth]);\n                translate([2, 2, -0.5]) cube([panel_width - 4, panel_height - 4, panel_depth + 1]);\n            }\n        }\n    }\n}\n\nmodule gothic_arch() {\n    // Gothic arch decoration for top of panels\n    color(\"goldenrod\") {\n        for(i = [-1, 0, 1]) {\n            translate([i * 27.5, 58, panel_depth]) {\n                rotate([90, 0, 0]) cylinder(h=2, r1=8, r2=8, $fn=50);\n                translate([0, 0, 2]) rotate([90, 0, 0]) cylinder(h=8, r1=8, r2=0, $fn=3);\n            }\n        }\n    }\n}\n\nmodule decorative_rosettes() {\n    // Rosette decorations on frame corners\n    color(\"gold\") {\n        for(x = [-37.5, -12.5, 12.5, 37.5]) {\n            for(y = [5, 55]) {\n                translate([x, y, panel_depth + 0.5]) {\n                    cylinder(h=0.5, r=3, $fn=16);\n                    for(i = [0:45:315]) {\n                        rotate([0, 0, i]) \n                            translate([2, 0, 0]) \n                                cube([1, 0.5, 0.5], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule central_reliefs() {\n    // Central religious scene reliefs\n    color(\"wheat\") {\n        // Central figure (simplified Madonna and Child)\n        translate([12.5, 30, -2]) {\n            // Madonna figure\n            sphere(r=3, $fn=20);\n            translate([0, -4, 0]) sphere(r=2, $fn=20);\n            // Halo\n            color(\"gold\") \n                translate([0, 0, 3]) rotate([90, 0, 0]) \n                    cylinder(h=0.5, r1=4, r2=4, $fn=50);\n        }\n    }\n}\n\nmodule side_panels_reliefs() {\n    // Saint figures on side panels\n    color(\"wheat\") {\n        // Left panel saint\n        translate([-27.5, 30, -2]) {\n            sphere(r=2.5, $fn=20);\n            translate([0, -3, 0]) sphere(r=1.5, $fn=20);\n        }\n        \n        // Right panel saint (mirrored)\n        translate([27.5, 30, -2]) {\n            sphere(r=2.5, $fn=20);\n            translate([0, -3, 0]) sphere(r=1.5, $fn=20);\n        }\n    }\n}\n\nmodule inscription_band() {\n    // Latin inscription band on center panel\n    color(\"darkgoldenrod\") {\n        translate([12.5, 10, panel_depth - 1]) {\n            cube([20, 2, 0.5], center=true);\n            // Simplified text as raised dots\n            for(i = [-9:2:9]) {\n                translate([i, 0, 0.25]) sphere(r=0.3, $fn=8);\n            }\n        }\n    }\n}\n\nmodule hinges() {\n    // Simple hinge mechanisms\n    color(\"darkgray\") {\n        for(i = [0:1]) {\n            translate([i * 27.5 - 13.75, 5, panel_depth/2]) {\n                rotate([90, 0, 0]) cylinder(h=panel_depth, r=1, $fn=12);\n            }\n            translate([i * 27.5 - 13.75, 55, panel_depth/2]) {\n                rotate([90, 0, 0]) cylinder(h=panel_depth, r=1, $fn=12);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    triptych_frame();\n    gothic_arch();\n    decorative_rosettes();\n    central_reliefs();\n    side_panels_reliefs();\n    inscription_band();\n    hinges();\n}\n\n// Optional: Display open position\n// translate([0, -20, 0]) rotate([0, 0, -30]) triptych_frame();\n// translate([0, -20, 0]) rotate([0, 0, 30]) mirror([1, 0, 0]) triptych_frame();",
    "renders": true
  },
  {
    "historical_artifact": "diptych",
    "openscad_code": "// Roman ivory diptych panel (consular diptych style)\n// Based on 4th-5th century AD examples\n// Overall dimensions: 90mm x 60mm x 8mm when closed\n\n$fn = 64;\n\n// Main panel dimensions\npanel_w = 45;\npanel_h = 60;\npanel_d = 3;\nhinge_d = 4;\nborder_w = 3;\n\n// Colors\nivory = [1, 0.95, 0.85];\nbronze = [0.7, 0.4, 0.2];\n\nmodule panel() {\n    difference() {\n        // Main panel body\n        color(ivory)\n        cube([panel_w, panel_h, panel_d], center=true);\n        \n        // Inner recess\n        translate([0, 0, panel_d/2 - 0.5])\n            cube([panel_w - 2*border_w, panel_h - 2*border_w, 1], center=true);\n    }\n    \n    // Decorative border pattern\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i*(panel_w/2 - border_w/2), j*(panel_h/2 - border_w/2), panel_d/2])\n                cube([border_w, border_w, 0.5], center=true);\n        }\n    }\n    \n    // Corner rosettes\n    module rosette(x, y) {\n        translate([x, y, panel_d/2 + 0.2])\n            for (a = [0:45:315]) {\n                rotate([0, 0, a])\n                    translate([border_w/2, 0, 0])\n                        cylinder(r1=1.5, r2=0.5, h=0.3, $fn=6);\n            }\n    }\n    \n    rosette(-(panel_w/2 - border_w), -(panel_h/2 - border_w));\n    rosette(panel_w/2 - border_w, -(panel_h/2 - border_w));\n    rosette(-(panel_w/2 - border_w), panel_h/2 - border_w);\n    rosette(panel_w/2 - border_w, panel_h/2 - border_w);\n}\n\n// Central portrait medallion\nmodule medallion() {\n    translate([0, 8, panel_d/2 + 0.1])\n        difference() {\n            // Outer ring\n            color(bronze)\n            cylinder(r=10, h=1, center=true);\n            cylinder(r=8, h=2, center=true);\n            \n            // Inner ivory disk\n            color(ivory)\n            translate([0, 0, -0.1])\n                cylinder(r=7.5, h=1.2, center=true);\n        }\n    \n    // Simplified facial features\n    translate([0, 8, panel_d/2 + 0.8]) {\n        // Eyes\n        color([0.1, 0.1, 0.1])\n        translate([-2.5, 1, 0])\n            sphere(r=0.8);\n        translate([2.5, 1, 0])\n            sphere(r=0.8);\n        \n        // Nose\n        translate([0, -1, 0])\n            cube([1, 2, 0.5], center=true);\n        \n        // Mouth\n        translate([0, -3, 0])\n            cube([3, 0.5, 0.3], center=true);\n    }\n}\n\n// Latin inscription panel\nmodule inscription() {\n    translate([0, -12, panel_d/2 + 0.1])\n        color([0.3, 0.3, 0.3])\n        cube([20, 6, 0.2], center=true);\n}\n\n// Hinge mechanism\nmodule hinge() {\n    // Left panel hinge\n    translate([panel_w/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(r=hinge_d/2, h=panel_h/4, center=true);\n    \n    // Right panel hinge\n    translate([-panel_w/2, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(r=hinge_d/2, h=panel_h/4, center=true);\n}\n\n// Assemble left panel\nmodule left_panel() {\n    panel();\n    medallion();\n    inscription();\n    hinge();\n}\n\n// Assemble right panel (mirror of left)\nmodule right_panel() {\n    mirror([1, 0, 0])\n        left_panel();\n}\n\n// Main assembly\ntranslate([-panel_w/2 - 1, 0, 0])\n    left_panel();\n\ntranslate([panel_w/2 + 1, 0, 0])\n    right_panel();",
    "renders": true
  },
  {
    "historical_artifact": "retable",
    "openscad_code": "// Gothic Retable - Medium Complexity Historical Artifact\n// Based on 15th century Spanish retable altarpiece\n// Designed for 3D printing - approximately 80mm wide x 60mm tall x 25mm deep\n\n$fn = 32;\n\n// Main colors\ncolor(\"burlywood\") {\n    // Base platform\n    translate([0, -5, 0]) {\n        cube([80, 10, 5], center = true);\n    }\n    \n    // Main altar structure\n    difference() {\n        translate([0, 0, 30]) {\n            cube([70, 20, 60], center = true);\n        }\n        // Inner cavity for depth\n        translate([0, 5, 35]) {\n            cube([64, 10, 50], center = true);\n        }\n    }\n}\n\n// Gothic arch frame\nmodule gothic_arch(width, height, depth) {\n    difference() {\n        // Main arch shape\n        translate([0, 0, height/2]) {\n            cube([width, depth, height], center = true);\n        }\n        // Gothic arch cutout\n        union() {\n            translate([0, -depth/2 - 1, height*0.7]) {\n                cylinder(h = depth + 2, r = width/2 - 2, center = true);\n            }\n            translate([0, -depth/2 - 1, height*0.3]) {\n                cube([width - 4, depth + 2, height*0.4], center = true);\n            }\n        }\n    }\n}\n\n// Central gothic arch\ncolor(\"goldenrod\") {\n    translate([0, 0, 55]) {\n        gothic_arch(30, 35, 4);\n    }\n}\n\n// Side arches\nfor (x = [-25, 25]) {\n    color(\"goldenrod\") {\n        translate([x, 0, 45]) {\n            scale([0.7, 1, 0.8]) {\n                gothic_arch(25, 30, 4);\n            }\n        }\n    }\n}\n\n// Decorative finials\nmodule finial() {\n    color(\"gold\") {\n        translate([0, 0, 0]) {\n            cylinder(h = 8, r1 = 2, r2 = 1);\n            translate([0, 0, 8]) {\n                sphere(r = 2);\n            }\n        }\n    }\n}\n\n// Top finials\nfor (x = [-25, 0, 25]) {\n    translate([x, 0, 73]) {\n        finial();\n    }\n}\n\n// Altar steps\ncolor(\"burlywood\") {\n    for (i = [1:3]) {\n        translate([0, -8 - i*3, i*2.5]) {\n            cube([70 - i*10, 6, 5], center = true);\n        }\n    }\n}\n\n// Decorative columns\nmodule column() {\n    color(\"goldenrod\") {\n        for (z = [10:15:55]) {\n            translate([0, 0, z]) {\n                cylinder(h = 15, r = 2.5);\n            }\n        }\n    }\n}\n\n// Side columns\nfor (x = [-33, 33]) {\n    translate([x, 0, 0]) {\n        column();\n    }\n}\n\n// Central relief panel\ncolor(\"darkgoldenrod\") {\n    translate([0, 5.1, 30]) {\n        cube([40, 1, 25], center = true);\n    }\n}\n\n// Decorative quatrefoil patterns\nmodule quatrefoil() {\n    color(\"gold\") {\n        for (a = [0:90:270]) {\n            rotate([0, 0, a]) {\n                translate([4, 0, 0]) {\n                    sphere(r = 2);\n                }\n            }\n        }\n        sphere(r = 1.5);\n    }\n}\n\n// Quatrefoils on side panels\nfor (x = [-20, 20]) {\n    translate([x, 5.2, 35]) {\n        quatrefoil();\n    }\n}\n\n// Rosette decorations\nmodule rosette() {\n    color(\"gold\") {\n        difference() {\n            cylinder(h = 2, r = 4);\n            for (a = [0:45:315]) {\n                rotate([0, 0, a]) {\n                    translate([2, 0, -1]) {\n                        cube([3, 1, 4], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Rosettes on base\nfor (x = [-25, 0, 25]) {\n    translate([x, -4.9, 2.5]) {\n        rosette();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "reredos",
    "openscad_code": "// Medieval Reredos - Decorative Altar Screen\n// Based on 14th century English church architecture\n// Overall dimensions: 80mm wide x 60mm tall x 15mm deep\n\n// Main color for stone appearance\ncolor([0.8, 0.8, 0.75]) {\n    \n    // Base altar platform\n    translate([0, 0, 0]) {\n        cube([80, 15, 8], center = true);\n    }\n    \n    // Central arch\n    translate([0, 0, 8]) {\n        difference() {\n            cube([45, 12, 50], center = true);\n            translate([0, 0, 20]) {\n                cylinder(h = 25, r1 = 22, r2 = 22, center = true);\n            }\n            translate([0, -6, 0]) {\n                cube([43, 12, 48], center = true);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([-27, 0, 8]) {\n        difference() {\n            cube([20, 12, 45], center = true);\n            translate([0, 0, 17.5]) {\n                cylinder(h = 20, r1 = 10, r2 = 10, center = true);\n            }\n            translate([0, -6, 0]) {\n                cube([18, 12, 43], center = true);\n            }\n        }\n    }\n    \n    // Right wing\n    translate([27, 0, 8]) {\n        mirror([1, 0, 0]) {\n            children();\n        }\n    }\n    \n    // Decorative finials on top of arches\n    module finial(x_pos) {\n        translate([x_pos, 0, 58]) {\n            cylinder(h = 8, r1 = 4, r2 = 2, center = true);\n            translate([0, 0, 4]) {\n                sphere(r = 2);\n            }\n        }\n    }\n    \n    // Add three finials\n    finial(0);\n    finial(-27);\n    finial(27);\n    \n    // Tracery pattern in central arch\n    translate([0, -5, 30]) {\n        for(i = [-2:2]) {\n            for(j = [0:2]) {\n                translate([i * 6, 0, j * 8]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 2, r = 2, center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Decorative panels on wings\n    module wing_panel(x_pos) {\n        translate([x_pos, -5, 25]) {\n            difference() {\n                cube([12, 2, 20], center = true);\n                for(i = [0:2]) {\n                    translate([0, 0, -7 + i * 7]) {\n                        cylinder(h = 3, r1 = 4, r2 = 4, center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    wing_panel(-27);\n    wing_panel(27);\n    \n    // Inscription band (raised text area)\n    translate([0, -5, 15]) {\n        cube([70, 2, 6], center = true);\n    }\n    \n    // Supporting buttresses\n    module buttress(x_pos) {\n        translate([x_pos, 6, 8]) {\n            cube([6, 6, 45], center = true);\n        }\n    }\n    \n    buttress(-35);\n    buttress(35);\n    \n    // Base molding detail\n    translate([0, 0, 4]) {\n        difference() {\n            cube([82, 16, 4], center = true);\n            translate([0, 0, 2]) {\n                cube([78, 12, 4], center = true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "chasuble",
    "openscad_code": "// Chasuble - historical liturgical vestment\n// Based on 13th-14th century Roman style chasuble\n\n// Overall dimensions for 3D printing\n$fn = 32;\n\n// Main body of chasuble\nmodule chasuble_body() {\n    // Front panel - elliptical shape\n    difference() {\n        // Main panel\n        scale([1, 1.2, 0.3])\n            sphere(d = 60);\n        \n        // Neck opening\n        translate([0, 20, 0])\n            scale([0.3, 0.4, 1.2])\n                sphere(d = 30);\n        \n        // Bottom curve\n        translate([0, -25, -8])\n            cube([60, 20, 20], center = true);\n    }\n    \n    // Back panel - same as front\n    mirror([0, 0, 1])\n        translate([0, 0, 20])\n            difference() {\n                scale([1, 1.2, 0.3])\n                    sphere(d = 60);\n                translate([0, 20, 0])\n                    scale([0.3, 0.4, 1.2])\n                        sphere(d = 30);\n                translate([0, -25, -8])\n                    cube([60, 20, 20], center = true);\n            };\n}\n\n// Orphrey band - decorative strip\nmodule orphrey_band() {\n    color(\"gold\")\n    translate([0, 0, 9.5])\n        for(i = [-45:15:45]) {\n            rotate([0, 0, i])\n                translate([0, 28, 0])\n                    scale([0.8, 0.1, 1])\n                        cube([3, 0.5, 2], center = true);\n        }\n}\n\n// Cross decoration on back\nmodule back_cross() {\n    color(\"gold\")\n    translate([0, 0, -10.5])\n    union() {\n        // Vertical bar\n        translate([0, 10, 0])\n            scale([0.15, 1, 0.1])\n                cube([8, 40, 2], center = true);\n        \n        // Horizontal bar\n        translate([0, 25, 0])\n            scale([1, 0.15, 0.1])\n                cube([30, 8, 2], center = true);\n    }\n}\n\n// Tau cross on front\nmodule tau_cross() {\n    color(\"gold\")\n    translate([0, 15, 10.5])\n    union() {\n        // Vertical stem\n        translate([0, 0, 0])\n            scale([0.2, 1, 0.1])\n                cube([5, 25, 2], center = true);\n        \n        // Horizontal top\n        translate([0, 10, 0])\n            scale([1, 0.2, 0.1])\n                cube([25, 5, 2], center = true);\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color(\"darkred\")\n    translate([0, 0, 9.8])\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n            translate([0, 29.5, 0])\n                scale([0.5, 0.5, 0.5])\n                    sphere(d = 1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main chasuble body in deep red\n    color(\"firebrick\")\n    chasuble_body();\n    \n    // Decorative elements\n    orphrey_band();\n    back_cross();\n    tau_cross();\n    border_pattern();\n}",
    "renders": true
  },
  {
    "historical_artifact": "stole",
    "openscad_code": "// Egyptian Broad Collar (Wesekh) - Stole-style historical artifact\n// Based on New Kingdom period examples, 3D printable at ~80mm width\n\n$fn = 32;\n\n// Main dimensions\nwidth = 80;\nheight = 40;\nthickness = 4;\n\n// Color definitions\ngold = \"#D4AF37\";\nlapis = \"#191970\";\ncarnelian = \"#B22222\";\nturquoise = \"#40E0D0\";\n\n// Main collar band\nmodule collar_band() {\n    color(gold)\n    difference() {\n        // Outer shape - tapered towards ends\n        hull() {\n            translate([-width/2, 0, 0]) cube([width*0.1, height, thickness], center=true);\n            translate([width/2, 0, 0]) cube([width*0.1, height, thickness], center=true);\n            translate([0, height/2 - 2, 0]) cube([width*0.8, height*0.2, thickness], center=true);\n        }\n        \n        // Inner cutout\n        translate([0, 0, -1]) \n            cube([width*0.6, height*0.6, thickness+2], center=true);\n    }\n}\n\n// Decorative bead row\nmodule bead_row(y_pos, bead_count, bead_color) {\n    color(bead_color)\n    for(i = [0:bead_count-1]) {\n        x_pos = -width/2 + width/(bead_count-1)*i + 5;\n        translate([x_pos, y_pos, thickness/2]) \n            sphere(d=2.5);\n    }\n}\n\n// Lotus flower motif\nmodule lotus_motif(x_pos, y_pos) {\n    translate([x_pos, y_pos, thickness/2 + 0.5]) {\n        // Petals\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle]) \n                translate([0, 3, 0]) \n                    scale([1, 1.5, 0.5])\n                        sphere(d=3);\n        }\n        // Center\n        color(gold) sphere(d=2);\n    }\n}\n\n// Falcon terminals\nmodule falcon_terminal(side) {\n    mirror([side, 0, 0]) {\n        translate([width/2 - 5, 0, 0]) {\n            // Falcon head\n            color(gold) {\n                rotate([0, 90, 0]) \n                    cylinder(h=4, d1=6, d2=4);\n                // Beak\n                translate([2, 0, 0]) \n                    rotate([0, -30, 0]) \n                        cylinder(h=3, d1=2, d2=1);\n            }\n            \n            // Eye detail\n            color(lapis) \n                translate([0, 2, 1]) \n                    sphere(d=1);\n        }\n    }\n}\n\n// Hieroglyphic inscription band\nmodule inscription_band() {\n    color(lapis)\n    translate([0, -height/3, thickness/2 + 0.1]) {\n        for(i = [0:7]) {\n            x_pos = -width/2 + 10 + i*8;\n            // Simplified hieroglyphs as cylinders\n            rotate([0, 0, i*15]) \n                translate([x_pos, 0, 0]) \n                    cylinder(h=0.5, d=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main collar structure\n    collar_band();\n    \n    // Decorative elements\n    bead_row(10, 12, lapis);\n    bead_row(5, 10, carnelian);\n    bead_row(0, 14, turquoise);\n    bead_row(-5, 12, lapis);\n    \n    // Lotus motifs\n    lotus_motif(-width/4, height/3);\n    lotus_motif(width/4, height/3);\n    lotus_motif(0, height/2 - 2);\n    \n    // Falcon terminals\n    falcon_terminal(1);\n    falcon_terminal(-1);\n    \n    // Hieroglyphic band\n    inscription_band();\n}",
    "renders": true
  },
  {
    "historical_artifact": "alb",
    "openscad_code": "// Historical Roman Alb (white tunic) artifact\n// A miniature representation of a ceremonial alb with embroidered clavi and decorative borders\n// Scale: ~60mm height, suitable for 3D printing\n\n// Main parameters\nalb_height = 60;\nalb_width = 25;\nsleeve_length = 15;\nhem_thickness = 2;\n\n// Module for clavi (vertical purple stripes)\nmodule clavi(stripe_width) {\n    color([0.4, 0.1, 0.6])  // Imperial purple\n    translate([0, 0, -alb_height/2 + 5])\n        cube([stripe_width, alb_width, alb_height - 10], center=true);\n}\n\n// Module for decorative cuff\nmodule cuff_decoration(radius) {\n    color([0.8, 0.7, 0.3])  // Gold thread\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([radius, 0, 0])\n            cylinder(h=1, r1=1, r2=0.5, $fn=6);\n    }\n}\n\n// Module for embroidered hem border\nmodule hem_border() {\n    color([0.8, 0.7, 0.3])  // Gold thread\n    difference() {\n        // Main border band\n        translate([0, 0, -alb_height/2 + hem_thickness/2])\n            cube([alb_width + 4, alb_width + 4, hem_thickness], center=true);\n        \n        // Cut out center for hollow border\n        translate([0, 0, -alb_height/2 + hem_thickness/2 - 0.1])\n            cube([alb_width - 2, alb_width - 2, hem_thickness + 0.2], center=true);\n    }\n    \n    // Decorative squares pattern\n    for(x = [-10:5:10]) {\n        for(y = [-10:5:10]) {\n            if(abs(x) + abs(y) > 8) {\n                color([0.6, 0.2, 0.8])\n                translate([x, y, -alb_height/2 + hem_thickness])\n                    cube([1.5, 1.5, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Main alb body\nmodule alb_body() {\n    color([0.95, 0.95, 0.95])  // Off-white linen\n    \n    // Torso part\n    union() {\n        translate([0, 0, 0])\n            cube([alb_width, alb_width/2, alb_height], center=true);\n        \n        // Sleeves\n        translate([alb_width/2 + sleeve_length/2, 0, alb_height/4])\n            rotate([0, 90, 0])\n                cylinder(h=sleeve_length, r=alb_width/4, center=true);\n        \n        translate([-alb_width/2 - sleeve_length/2, 0, alb_height/4])\n            rotate([0, -90, 0])\n                cylinder(h=sleeve_length, r=alb_width/4, center=true);\n        \n        // Neck opening (subtractive)\n        translate([0, 0, alb_height/2 - 8])\n            rotate([90, 0, 0])\n                cylinder(h=20, r1=4, r2=6, center=true, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main garment\n    alb_body();\n    \n    // Decorative elements\n    clavi(2);\n    translate([alb_width/2 + sleeve_length - 2, 0, alb_height/4])\n        cuff_decoration(alb_width/5);\n    translate([-alb_width/2 - sleeve_length + 2, 0, alb_height/4])\n        cuff_decoration(alb_width/5);\n    \n    // Hem decoration\n    hem_border();\n    \n    // Small cross embroidery on chest\n    color([0.8, 0.7, 0.3])\n    translate([0, 0, alb_height/2 - 10])\n    union() {\n        cube([1, 8, 1], center=true);\n        cube([8, 1, 1], center=true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "cope",
    "openscad_code": "// Historical Cope (Ecclesiastical Vestment)\n// Based on 14th-15th century liturgical vestments\n\nmodule hood() {\n    // Hood with decorative trim\n    color(\"DarkGoldenrod\") difference() {\n        sphere(8);\n        translate([0, 0, -4]) cube([16, 16, 8], center=true);\n    }\n    \n    // Hood lining\n    color(\"Crimson\") translate([0, 0, 3.5]) sphere(7.5);\n}\n\nmodule clasp() {\n    // Ornate clasp with central jewel\n    union() {\n        color(\"Gold\") cylinder(h=3, r=5, $fn=6);\n        color(\"DarkRed\") translate([0, 0, 2]) cylinder(h=2, r=3, $fn=6);\n        for(i=[0:60:300]) {\n            rotate([0, 0, i]) \n            translate([4, 0, 1.5]) color(\"Gold\") \n            cylinder(h=3, r=0.5, $fn=12);\n        }\n    }\n}\n\nmodule embroidery_band() {\n    // Decorative embroidered band with repeating pattern\n    for(i=[-20:10:20]) {\n        translate([i, 0, 0]) color(\"Gold\") cube([3, 1, 0.5]);\n        translate([i+1.5, 0, 0]) color(\"DarkRed\") cube([1.5, 1, 0.5]);\n    }\n}\n\nmodule cope_body() {\n    // Main semicircular cope body\n    color(\"Burgundy\") difference() {\n        // Main semicircular shape\n        translate([0, 0, -2]) cylinder(h=4, r=40, $fn=60);\n        \n        // Cut to semicircle\n        translate([-40, 0, -5]) cube([80, 40, 10]);\n        \n        // Neck opening\n        translate([0, 20, -5]) cylinder(h=10, r=8);\n    }\n    \n    // Inner lining\n    color(\"Crimson\") translate([0, 0, -1.8]) \n    cylinder(h=2, r=39, $fn=60);\n}\n\nmodule orphrey_band() {\n    // Decorative band along straight edge\n    translate([0, 0, 2]) {\n        color(\"Gold\") linear_extrude(height=1) \n        polygon(points=[[-38,0], [38,0], [35,4], [-35,4]]);\n        \n        // Rows of small crosses\n        for(i=[-35:7:35]) {\n            translate([i, 2, 1.5]) color(\"DarkBlue\") {\n                cube([2, 0.5, 1.5], center=true);\n                cube([0.5, 2, 1.5], center=true);\n            }\n        }\n    }\n}\n\nmodule tassels() {\n    // Decorative tassels at corners\n    for(x=[-35, 35]) {\n        translate([x, -5, 0]) {\n            color(\"Gold\") cylinder(h=8, r=2);\n            for(i=[0:30:330]) {\n                rotate([0, 0, i]) \n                translate([2, 0, -4]) color(\"DarkGoldenrod\")\n                cylinder(h=10, r=0.5);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    cope_body();\n    \n    // Hood attached at neck\n    translate([0, 20, 2]) rotate([90, 0, 0]) hood();\n    \n    // Orphrey bands\n    orphrey_band();\n    \n    // Embroidery bands on body\n    translate([0, -25, 2.5]) embroidery_band();\n    translate([0, -15, 2.5]) scale([0.7, 1, 1]) embroidery_band();\n    \n    // Clasp at front\n    translate([0, 30, 2]) clasp();\n    \n    // Tassels\n    tassels();\n}\n\n// Base stand for printing\ncolor(\"DimGray\") translate([0, 0, -5]) cube([90, 60, 2], center=true);",
    "renders": true
  },
  {
    "historical_artifact": "dalmatic",
    "openscad_code": "// Dalmatic - Historical Ecclesiastical Vestment\n// Scale: ~80mm height\n\n$fn = 32;\n\n// Main colors\ncolor_liturgical = \"purple\";\ncolor_ornament = \"gold\";\ncolor_lining = \"white\";\n\n// Overall dimensions\nheight = 80;\nwidth = 60;\nthickness = 3;\n\n// Sleeve parameters\nsleeve_length = 25;\nsleeve_width = 20;\n\n// Ornament parameters\nband_height = 5;\nclavus_width = 3;\n\nmodule dalmatic_body() {\n    color(color_liturgical) {\n        // Main tunic body - slightly flared\n        hull() {\n            translate([0, -height/4, 0]) \n                cube([width*0.8, height/2, thickness], center=true);\n            translate([0, height/4, 0]) \n                cube([width, height/2, thickness], center=true);\n        }\n        \n        // Sleeves - wide and rectangular\n        translate([-width/2 - sleeve_width/2, 0, 0])\n            rotate([0, 0, 45])\n            cube([sleeve_length, sleeve_width, thickness], center=true);\n            \n        translate([width/2 + sleeve_width/2, 0, 0])\n            rotate([0, 0, -45])\n            cube([sleeve_length, sleeve_width, thickness], center=true);\n    }\n}\n\nmodule decorative_bands() {\n    color(color_ornament) {\n        // Horizontal bands at hem\n        translate([0, height/2 - band_height/2, thickness/2])\n            cube([width, band_height, 1], center=true);\n            \n        // Vertical clavi (ornamental stripes)\n        translate([-width/4, 0, thickness/2])\n            cube([clavus_width, height*0.9, 1], center=true);\n            \n        translate([width/4, 0, thickness/2])\n            cube([clavus_width, height*0.9, 1], center=true);\n    }\n}\n\nmodule ornamental_roundels() {\n    color(color_ornament) {\n        // Decorative roundels on the clavi\n        for (i = [-2:1:2]) {\n            translate([-width/4, i*15, thickness/2 + 0.5])\n                cylinder(h=1, r=3);\n                \n            translate([width/4, i*15, thickness/2 + 0.5])\n                cylinder(h=1, r=3);\n        }\n    }\n}\n\nmodule neck_opening() {\n    color(color_lining) {\n        // Keyhole neckline\n        difference() {\n            translate([0, height/4, -thickness/2])\n                cube([width*0.3, height*0.15, thickness*2], center=true);\n                \n            // Cut the keyhole shape\n            translate([0, height/4 + height*0.08, -thickness])\n                cylinder(h=thickness*3, r=width*0.15);\n                \n            translate([0, height/4 - height*0.08, -thickness])\n                cube([width*0.2, height*0.15, thickness*3], center=true);\n        }\n    }\n}\n\nmodule fringe_details() {\n    color(color_ornament) {\n        // Fringe at hem\n        for (i = [-width/2+2:4:width/2-2]) {\n            translate([i, height/2 + 2, thickness/2])\n                cylinder(h=4, r=0.5);\n        }\n    }\n}\n\n// Assemble the dalmatic\nunion() {\n    dalmatic_body();\n    decorative_bands();\n    ornamental_roundels();\n    neck_opening();\n    fringe_details();\n}",
    "renders": true
  },
  {
    "historical_artifact": "maniple",
    "openscad_code": "// Maniple - Historical Christian liturgical vestment\n// 3D printable model in realistic style with medium complexity\n\n// Base dimensions (mm)\nmaniple_length = 80;\nmaniple_width = 25;\nmaniple_thickness = 3;\n\n// Main body of maniple\nmodule maniple_body() {\n    color(\"gold\") {\n        difference() {\n            // Main rectangular shape\n            translate([0, 0, maniple_thickness/2])\n                cube([maniple_length, maniple_width, maniple_thickness], center=true);\n            \n            // Rounded ends\n            translate([maniple_length/2 - maniple_width/2, 0, 0])\n                cylinder(h=maniple_thickness+1, r=maniple_width/2, center=true);\n            translate([-maniple_length/2 + maniple_width/2, 0, 0])\n                cylinder(h=maniple_thickness+1, r=maniple_width/2, center=true);\n        }\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color(\"darkred\") {\n        for(i = [-35:5:35]) {\n            translate([i, maniple_width/2 - 1.5, maniple_thickness/2 + 0.1])\n                cube([3, 3, 0.5], center=true);\n            translate([i, -maniple_width/2 + 1.5, maniple_thickness/2 + 0.1])\n                cube([3, 3, 0.5], center=true);\n        }\n    }\n}\n\n// Central cross decoration\nmodule central_cross() {\n    color(\"darkred\") {\n        // Vertical bar\n        translate([0, 0, maniple_thickness/2 + 0.2])\n            cube([4, 12, 0.8], center=true);\n        // Horizontal bar\n        translate([0, 0, maniple_thickness/2 + 0.2])\n            cube([12, 4, 0.8], center=true);\n    }\n}\n\n// Ornamental tassels at ends\nmodule tassel(position) {\n    color(\"gold\") {\n        translate([position, 0, -maniple_thickness/2 - 5])\n            cylinder(h=10, r=3, center=false);\n        \n        // Tassel strands\n        for(angle = [0:30:330]) {\n            rotate([0, 0, angle])\n                translate([position + 2.5, 0, -maniple_thickness/2 - 10])\n                    cylinder(h=5, r=0.5, center=false);\n        }\n    }\n}\n\n// Latin inscription band\nmodule inscription_band() {\n    color(\"darkred\") {\n        translate([0, 0, maniple_thickness/2 + 0.5])\n            cube([maniple_length - 20, 6, 0.3], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base maniple\n    maniple_body();\n    \n    // Decorative elements\n    border_pattern();\n    central_cross();\n    inscription_band();\n    \n    // Tassels at both ends\n    tassel(maniple_length/2 - 5);\n    tassel(-maniple_length/2 + 5);\n    \n    // Small decorative studs\n    color(\"red\") {\n        for(pos = [-25:10:25]) {\n            translate([pos, maniple_width/4, maniple_thickness/2 + 0.5])\n                cylinder(h=1, r=1.5, center=false);\n            translate([pos, -maniple_width/4, maniple_thickness/2 + 0.5])\n                cylinder(h=1, r=1.5, center=false);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "amice",
    "openscad_code": "// Amice - Medieval liturgical collar/neck cloth\n// Designed for 3D printing at 80mm width\n\n$fn = 50;\n\nmodule amice_base() {\n    // Main rectangular body of the amice - linen cloth\n    color([0.9, 0.85, 0.75]) {\n        // Main body with slight curve for realism\n        translate([0, 0, 0]) {\n            difference() {\n                cube([60, 40, 1], center = true);\n                // Subtle curved edges using cylinders\n                for(i = [0:1]) {\n                    translate([-30 + i*60, 0, 0]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h = 2, r = 20, center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule collar_neck_opening() {\n    // Neck opening with reinforced edges\n    color([0.85, 0.8, 0.7]) {\n        translate([0, 15, 0.5]) {\n            difference() {\n                // Reinforced collar band\n                cube([25, 10, 1.5], center = true);\n                // Neck opening hole\n                cylinder(h = 3, r = 5, center = true);\n            }\n        }\n    }\n}\n\nmodule decorative_cords() {\n    // Red decorative cords along edges\n    color([0.6, 0.1, 0.1]) {\n        // Two parallel cords on each side\n        for(y = [-15, 15]) {\n            translate([0, y, 0.8]) {\n                // Create cord segments\n                for(i = [0:5]) {\n                    translate([-25 + i*10, 0, 0]) {\n                        cylinder(h = 8, r = 0.8, center = true);\n                        rotate([90, 0, 0]) {\n                            cylinder(h = 8, r = 0.8, center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule embroidered_cross() {\n    // Simple embroidered cross on back\n    color([0.8, 0.7, 0.3]) {\n        translate([0, 0, 0.6]) {\n            union() {\n                // Vertical bar\n                cube([3, 25, 0.3], center = true);\n                // Horizontal bar\n                cube([15, 3, 0.3], center = true);\n            }\n        }\n    }\n}\n\nmodule ties() {\n    // Cotton ties for fastening\n    color([0.95, 0.9, 0.8]) {\n        // Left tie\n        translate([-35, 0, 0]) {\n            rotate([0, 0, 30]) {\n                cylinder(h = 20, r = 1.5, center = true);\n            }\n        }\n        // Right tie\n        translate([35, 0, 0]) {\n            rotate([0, 0, -30]) {\n                cylinder(h = 20, r = 1.5, center = true);\n            }\n        }\n    }\n}\n\nmodule hem() {\n    // Reinforced hem around edges\n    color([0.85, 0.8, 0.7]) {\n        // Top hem\n        translate([0, 20, 0.5]) {\n            cube([58, 3, 1], center = true);\n        }\n        // Bottom hem\n        translate([0, -20, 0.5]) {\n            cube([58, 3, 1], center = true);\n        }\n    }\n}\n\n// Assemble the amice\nunion() {\n    amice_base();\n    collar_neck_opening();\n    decorative_cords();\n    embroidered_cross();\n    ties();\n    hem();\n}",
    "renders": true
  },
  {
    "historical_artifact": "surplice",
    "openscad_code": "// Surplice Historical Artifact - Medieval Clerical Vestment\n// Based on 14th century liturgical garment\n\n$fn = 32;\n\n// Overall dimensions for 3D printing\noverall_height = 70;\nshoulder_width = 45;\ngarment_length = 55;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Main body of surplice\nmodule surplice_body() {\n    color(\"linen\") \n    difference() {\n        // Main tunic shape\n        union() {\n            // Upper torso\n            translate([0, 0, garment_length/2])\n                scale([1, 0.6, 1])\n                cube([shoulder_width, shoulder_width*0.8, garment_length], center=true);\n            \n            // Flared lower portion\n            translate([0, 0, garment_length/4])\n                cylinder(h=garment_length/2, r1=shoulder_width*0.7, r2=shoulder_width*1.1, center=true);\n        }\n        \n        // Remove center for hollow body\n        translate([0, 0, garment_length/2])\n            scale([0.7, 0.4, 0.9])\n            cube([shoulder_width, shoulder_width*0.8, garment_length], center=true);\n    }\n}\n\n// Wide sleeves characteristic of surplice\nmodule sleeves() {\n    sleeve_length = 40;\n    sleeve_width = 15;\n    \n    color(\"linen\")\n    union() {\n        // Left sleeve\n        translate([-shoulder_width/2 - sleeve_width/2, 0, garment_length - 10])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=sleeve_length, r=sleeve_width/2, center=false);\n                translate([0, 0, -sleeve_width/4])\n                    cylinder(h=sleeve_length + sleeve_width/2, r=sleeve_width/2 - wall_thickness, center=false);\n            }\n        \n        // Right sleeve\n        translate([shoulder_width/2 + sleeve_width/2, 0, garment_length - 10])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=sleeve_length, r=sleeve_width/2, center=false);\n                translate([0, 0, -sleeve_width/4])\n                    cylinder(h=sleeve_length + sleeve_width/2, r=sleeve_width/2 - wall_thickness, center=false);\n            }\n    }\n}\n\n// Traditional lace trim around hem and sleeves\nmodule lace_trim() {\n    trim_height = 2;\n    lace_pattern_radius = 0.5;\n    \n    color(\"ivory\") \n    union() {\n        // Hem trim\n        for (i = [0:15:359]) {\n            rotate([0, 0, i])\n                translate([shoulder_width*0.9, 0, trim_height/2])\n                    sphere(r=lace_pattern_radius, center=true);\n        }\n        \n        // Sleeve trim - left\n        translate([-shoulder_width/2 - 7.5, 0, garment_length - 30])\n            for (i = [0:15:359]) {\n                rotate([90, 0, i])\n                    translate([0, 7.5, 0])\n                        sphere(r=lace_pattern_radius, center=true);\n            }\n        \n        // Sleeve trim - right\n        translate([shoulder_width/2 + 7.5, 0, garment_length - 30])\n            for (i = [0:15:359]) {\n                rotate([90, 0, i])\n                    translate([0, 7.5, 0])\n                        sphere(r=lace_pattern_radius, center=true);\n            }\n    }\n}\n\n// Neck opening with traditional square collar\nmodule collar() {\n    color(\"linen\")\n    difference() {\n        // Raised collar base\n        translate([0, 0, garment_length - 5])\n            cube([shoulder_width*0.4, shoulder_width*0.3, 5], center=true);\n        \n        // Neck opening\n        translate([0, 0, garment_length - 3])\n            cube([shoulder_width*0.2, shoulder_width*0.15, 7], center=true);\n    }\n}\n\n// Historical embroidered cross on chest\nmodule embroidered_cross() {\n    cross_size = 8;\n    color(\"red\") \n    union() {\n        // Vertical bar\n        translate([0, 0, garment_length - 2])\n            cube([wall_thickness*2, cross_size, 1], center=true);\n        \n        // Horizontal bar\n        translate([0, cross_size/2 - 1, garment_length - 2])\n            cube([cross_size/2, wall_thickness*3, 1], center=true);\n    }\n}\n\n// Assembly of complete surplice\nunion() {\n    surplice_body();\n    sleeves();\n    lace_trim();\n    collar();\n    embroidered_cross();\n}",
    "renders": true
  },
  {
    "historical_artifact": "cassock",
    "openscad_code": "// Historical Cassock Artifact - 16th Century Clerical Garment\n// Dimensions optimized for 3D printing (80mm height)\n\n// Main color - deep black wool\ncolor([0.1, 0.1, 0.1])\n\n// Main body of cassock\nmodule cassock_body() {\n    difference() {\n        // Main robe body\n        union() {\n            // Torso section\n            cube([30, 20, 50], center=true);\n            \n            // Skirt section - flared bottom\n            translate([0, 0, -25])\n                cylinder(h=30, r1=15, r2=20, center=true);\n        }\n        \n        // Neck opening\n        translate([0, 10, 20])\n            cylinder(h=10, r=5, center=true);\n            \n        // Arm holes\n        translate([15, 0, 10])\n            rotate([0, 90, 0])\n                cylinder(h=15, r=6, center=true);\n        mirror([1, 0, 0])\n            translate([15, 0, 10])\n                rotate([0, 90, 0])\n                    cylinder(h=15, r=6, center=true);\n    }\n}\n\n// Front button placket\nmodule button_placket() {\n    color([0.2, 0.2, 0.2])\n    translate([0, 10.5, 0])\n        cube([2, 1, 40], center=true);\n}\n\n// Decorative buttons (30 buttons in double-breasted arrangement)\nmodule buttons() {\n    color([0.8, 0.7, 0.2]) // Brass buttons\n    for(i = [-14:2:14]) {\n        translate([1.5, 11, i])\n            sphere(r=0.8);\n        translate([-1.5, 11, i])\n            sphere(r=0.8);\n    }\n}\n\n// Cincture (rope belt)\nmodule cincture() {\n    color([0.6, 0.4, 0.2]) // Brown rope color\n    translate([0, 0, -5])\n        rotate([90, 0, 0])\n            cylinder(h=35, r=1.5, center=true);\n}\n\n// Decorative piping along edges\nmodule piping() {\n    color([0.3, 0.3, 0.3])\n    // Bottom hem piping\n    translate([0, 0, -25])\n        cylinder(h=1, r=20.5, center=true);\n    \n    // Cuff piping (simplified as rings)\n    translate([15, 0, -15])\n        rotate([0, 90, 0])\n            cylinder(h=1, r=6.5, center=true);\n    mirror([1, 0, 0])\n        translate([15, 0, -15])\n            rotate([0, 90, 0])\n                cylinder(h=1, r=6.5, center=true);\n}\n\n// Small Latin cross pendant\nmodule cross_pendant() {\n    color([0.9, 0.8, 0.1]) // Gold color\n    translate([0, 11, 5])\n        union() {\n            cube([0.5, 0.5, 3], center=true);\n            cube([2, 0.5, 0.5], center=true);\n        }\n}\n\n// Assembly\ncassock_body();\nbutton_placket();\nbuttons();\ncincture();\npiping();\ncross_pendant();",
    "renders": true
  },
  {
    "historical_artifact": "hammer",
    "openscad_code": "// Viking Age Hammer Pendant - 9th-11th Century Scandinavian Artifact\n// Based on Mjolnir pendants found in archaeological digs\n\n// Overall dimensions: ~60mm height, historically accurate proportions\n\ncolor(\"silver\") difference() {\n    // Main hammer head\n    union() {\n        // Rectangular hammer head with slight taper\n        translate([0, 0, 25])\n            scale([1, 0.8, 1])\n                cube([20, 15, 12], center=true);\n        \n        // Decorative ridge along top\n        translate([0, 0, 31])\n            cube([18, 3, 2], center=true);\n        \n        // Hammer face with beveled edges\n        translate([0, 0, 19])\n            scale([1.1, 0.9, 0.8])\n                cube([20, 15, 8], center=true);\n    }\n    \n    // Central eye for suspension loop\n    translate([0, 0, 25])\n        rotate([90, 0, 0])\n            cylinder(h=25, d=4, center=true);\n}\n\n// Handle socket with runic-style decoration rings\ncolor(\"silver\") \nfor(i = [0:2]) {\n    translate([0, 0, 15 - i*3])\n        cylinder(h=2, d=10 - i*1.5, center=true);\n}\n\n// Ornate handle with geometric patterns\ncolor(\"bronze\") union() {\n    // Main handle shaft\n    translate([0, 0, 5])\n        cylinder(h=20, d=6, center=true);\n    \n    // Decorative rings at handle top\n    for(i = [0:1]) {\n        translate([0, 0, 15 - i*2])\n            cylinder(h=1.5, d=7.5, center=true);\n    }\n    \n    // Knurled grip pattern using small cylinders\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n            translate([2.8, 0, 5])\n                cylinder(h=18, d=1, center=true);\n    }\n    \n    // Pommel with traditional Norse knotwork inspiration\n    translate([0, 0, -5])\n        difference() {\n            sphere(d=8);\n            // Central depression\n            translate([0, 0, -2])\n                sphere(d=4);\n        }\n}\n\n// Side decorations - interlaced serpent motif\ncolor(\"silver\") \nfor(side = [-1, 1]) {\n    translate([side*10, 0, 25])\n        rotate([0, 90, 0])\n            for(i = [0:3]) {\n                rotate([0, 0, i*90])\n                    translate([0, 0, 2])\n                        cube([2, 0.5, 4], center=true);\n            }\n}\n\n// Runic inscription panel on hammer face\ncolor(\"silver\") translate([0, 7.6, 25])\n    for(i = [0:2]) {\n        translate([i*4 - 4, 0, 0])\n            cube([0.5, 0.5, 1], center=true);\n    }",
    "renders": true
  },
  {
    "historical_artifact": "chisel",
    "openscad_code": "// Chisel - Bronze Age style woodworking chisel\n// Medium complexity historical artifact\n// Features socketed design with decorative rings and weathering details\n\n$fn = 32;\n\n// Main dimensions\nchisel_length = 85;\nblade_length = 35;\nblade_width = 12;\nblade_thickness = 4;\nsocket_outer = 10;\nsocket_inner = 7;\nsocket_length = 25;\n\n// Colors\ncolor_chisel = [150/255, 120/255, 100/255]; // Bronze\ncolor_dark = [100/255, 80/255, 60/255];     // Weathered bronze\n\n// Create the complete chisel\nmodule chisel() {\n    union() {\n        // Blade\n        translate([0, 0, chisel_length/2])\n            rotate([90, 0, 0])\n                blade();\n        \n        // Socket\n        translate([0, 0, chisel_length - socket_length/2])\n            rotate([90, 0, 0])\n                socket();\n        \n        // Decorative rings on socket\n        for(i = [1:3]) {\n            translate([0, 0, chisel_length - socket_length/2 + i*6])\n                rotate([90, 0, 0])\n                    decorative_ring();\n        }\n    }\n}\n\n// Blade with tapered cutting edge\nmodule blade() {\n    color(color_chisel)\n    difference() {\n        // Main blade body\n        union() {\n            // Blade shaft\n            cube([blade_thickness, blade_width, blade_length], center=true);\n            \n            // Tapered cutting edge\n            translate([0, 0, blade_length/2 + 2])\n                scale([1, 1, 0.5])\n                    cube([blade_thickness, blade_width, 8], center=true);\n        }\n        \n        // Create beveled cutting edge\n        translate([0, blade_width/2, blade_length/2 + 2])\n            rotate([0, 45, 0])\n                cube([blade_thickness*2, blade_width, blade_thickness*2]);\n        \n        // Opposite bevel\n        translate([0, -blade_width/2, blade_length/2 + 2])\n            rotate([0, -45, 0])\n                cube([blade_thickness*2, blade_width, blade_thickness*2]);\n        \n        // Weathering grooves\n        for(i = [0:2]) {\n            translate([0, blade_width/2 - (i+1)*3, -blade_length/2 + i*8])\n                rotate([0, 0, 45])\n                    cube([blade_thickness+0.5, 0.5, 8]);\n        }\n    }\n}\n\n// Socket for handle attachment\nmodule socket() {\n    color(color_chisel)\n    difference() {\n        // Outer socket\n        cylinder(h=socket_length, r=socket_outer, center=true);\n        \n        // Inner hole for handle\n        cylinder(h=socket_length+2, r=socket_inner, center=true);\n        \n        // Decorative notches\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([socket_outer-1, 0, socket_length/2 - 3])\n                    cube([2, socket_outer/2, 6]);\n        }\n    }\n}\n\n// Decorative ring detail\nmodule decorative_ring() {\n    color(color_dark)\n    difference() {\n        cylinder(h=2, r=socket_outer+1, center=true);\n        cylinder(h=3, r=socket_outer-0.5, center=true);\n    }\n}\n\n// Render the chisel\nchisel();",
    "renders": true
  },
  {
    "historical_artifact": "saw",
    "openscad_code": "// Historical Bronze Age Saw (Egyptian style circa 1500 BCE)\n// Length: 80mm, Width: 18mm, Thickness: 3mm\n\nblade_length = 70;\nblade_width = 18;\nblade_thickness = 1.2;\nhandle_length = 25;\nhandle_width = 12;\nhandle_thickness = 3;\ntooth_pitch = 2.5;\ntooth_height = 1.2;\n\n$fn = 32;\n\nmodule saw_tooth() {\n    difference() {\n        cube([tooth_pitch, blade_width, tooth_height]);\n        translate([0, 0, tooth_height])\n            rotate([0, 45, 0])\n                cube([tooth_pitch*2, blade_width*2, tooth_height]);\n    }\n}\n\nmodule saw_teeth() {\n    teeth_count = floor(blade_length / tooth_pitch);\n    for(i = [0:teeth_count-1]) {\n        translate([i*tooth_pitch + tooth_pitch/2, 0, 0])\n            saw_tooth();\n    }\n}\n\nmodule blade() {\n    // Main blade body\n    color(\"bronze\")\n    difference() {\n        union() {\n            // Tapered blade\n            hull() {\n                translate([0, 0, 0])\n                    cube([blade_length*0.3, blade_width, blade_thickness]);\n                translate([blade_length*0.7, 0, 0])\n                    cube([blade_length*0.3, blade_width*0.8, blade_thickness]);\n            }\n            \n            // Reinforcement ridge\n            translate([0, 0, blade_thickness])\n                cube([blade_length, 2, 0.8]);\n            \n            // Tang\n            translate([-handle_length*0.8, (handle_width-blade_width)/2, 0])\n                cube([handle_length*0.8, blade_width, blade_thickness]);\n        }\n        \n        // Rivet holes\n        for(i = [0:1]) {\n            translate([-handle_length*0.6 + i*5, handle_width/2, -0.1])\n                cylinder(h=blade_thickness+0.2, r=1.5, center=true);\n        }\n    }\n    \n    // Cutting teeth on bottom edge\n    translate([0, 0, -tooth_height])\n        saw_teeth();\n}\n\nmodule handle() {\n    // Main handle grip\n    color(\"saddlebrown\")\n    difference() {\n        hull() {\n            // Front section\n            translate([-handle_length*0.9, 0, 0])\n                cube([handle_length*0.6, handle_width, handle_thickness]);\n            // Rear grip\n            translate([-handle_length, 0, 0])\n                sphere(d=handle_width*1.2);\n        }\n        \n        // Tang slot\n        translate([-handle_length*0.7, (handle_width-blade_width)/2, -0.1])\n            cube([handle_length*0.6, blade_width, handle_thickness+0.2]);\n        \n        // Decorative grooves\n        for(i = [0:2]) {\n            translate([-handle_length*0.8 + i*3, 0, handle_thickness/2])\n                cube([1, handle_width, 0.5]);\n        }\n    }\n    \n    // Rivets\n    color(\"bronze\")\n    for(i = [0:1]) {\n        translate([-handle_length*0.6 + i*5, handle_width/2, handle_thickness/2])\n            cylinder(h=handle_thickness+0.5, r=1.5, center=true);\n    }\n    \n    // Decorative inlay pattern\n    color(\"gold\")\n    translate([-handle_length*0.3, handle_width/2-2, handle_thickness+0.1])\n        cube([8, 4, 0.3]);\n    translate([-handle_length*0.3, handle_width/2+2, handle_thickness+0.1])\n        cube([8, 4, 0.3]);\n}\n\n// Assembly\nrotate([0, 0, -15])\n    union() {\n        blade();\n        handle();\n    }",
    "renders": true
  },
  {
    "historical_artifact": "drill",
    "openscad_code": "// Historical Bronze Age Hand Drill - Realistic Style\n// Based on ancient Egyptian/European bronze drill designs from 2000-1500 BCE\n\n// Overall dimensions: 80mm length x 15mm width x 15mm height\n\n// Main colors\n$fn=50;\n\n// Bronze color for metal parts\ncolor([0.72, 0.45, 0.2]) {\n    // Main drill shaft with decorative bands\n    difference() {\n        // Main cylindrical shaft\n        cylinder(h=60, d=8, center=false);\n        \n        // Decorative spiral grooves\n        for(i=[0:5:55]) {\n            rotate([0,0,i*15]) {\n                translate([0,0,i]) {\n                    cube([1, 8.5, 5], center=true);\n                }\n            }\n        }\n    }\n    \n    // Handle grip section\n    translate([0,0,60]) {\n        difference() {\n            cylinder(h=15, d=12);\n            // Finger grooves\n            for(i=[0:30:330]) {\n                rotate([0,0,i]) {\n                    translate([4,0,7.5]) {\n                        rotate([90,0,0]) {\n                            cylinder(h=2, d=3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Drill bit - bronze spiral\n    translate([0,0,-10]) {\n        union() {\n            // Main bit shaft\n            cylinder(h=10, d=4);\n            \n            // Spiral cutting edges\n            for(i=[0:10:90]) {\n                rotate([0,0,i]) {\n                    translate([2,0,-i/9]) {\n                        rotate([90,0,0]) {\n                            cylinder(h=2, d=1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wooden handle core (darker wood)\ncolor([0.4, 0.25, 0.1]) {\n    translate([0,0,60]) {\n        difference() {\n            cylinder(h=10, d=10);\n            // Central hole for shaft\n            cylinder(h=12, d=8.2);\n        }\n    }\n}\n\n// Leather binding wraps\ncolor([0.3, 0.2, 0.1]) {\n    // Binding at handle-shaft junction\n    translate([0,0,57]) {\n        cylinder(h=6, d=14);\n    }\n    \n    // Binding at bit-shaft junction\n    translate([0,0,-5]) {\n        cylinder(h=3, d=10);\n    }\n}\n\n// Decorative bronze end cap\ncolor([0.72, 0.45, 0.2]) {\n    translate([0,0,75]) {\n        difference() {\n            sphere(d=15);\n            // Ring detail\n            cylinder(h=8, d=8);\n        }\n    }\n}\n\n// Ancient inscription band\ncolor([0.6, 0.4, 0.15]) {\n    translate([0,0,2]) {\n        difference() {\n            cylinder(h=3, d=8.5);\n            // Hieroglyph-style symbols (simplified)\n            for(i=[0:45:315]) {\n                rotate([0,0,i]) {\n                    translate([3.8,0,1.5]) {\n                        cube([1, 0.5, 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "awl",
    "openscad_code": "// Bronze Age Awl - Historical Artifact (c. 2000-1500 BCE)\n// Features characteristic twisted shaft and flattened triangular point\n// Designed for leather work and fine detail in woodworking\n\n$fn = 64;\n\n// Main assembly\ncolor([0.72, 0.45, 0.25])  // Bronze patina color\nunion() {\n    \n    // Handle grip section\n    translate([0, 0, 85])\n    difference() {\n        // Main grip cylinder\n        cylinder(h = 25, d = 12, center = true);\n        \n        // Decorative grip rings\n        for(i = [0:1]) {\n            translate([0, 0, -10 + i*20])\n            difference() {\n                cylinder(h = 2, d = 13);\n                cylinder(h = 3, d = 11);\n            }\n        }\n    }\n    \n    // Twisted shaft - created with stacked rotated ellipses\n    union() {\n        for(i = [0:19]) {\n            rotate([0, 0, i*18])  // 18 degree rotation per segment\n            translate([0, 0, 85 - i*2.5])\n            scale([1, 0.8, 1])\n            cylinder(h = 2.6, d = 8 - i*0.2, center = true);\n        }\n    }\n    \n    // Tapered point section\n    translate([0, 0, 32.5])\n    difference() {\n        // Main cone\n        cylinder(h = 30, d1 = 4, d2 = 0.5);\n        \n        // Flattened to create triangular cross-section\n        scale([1.2, 0.4, 1])\n        cylinder(h = 30, d1 = 4, d2 = 0.5);\n    }\n    \n    // Decorative collar at shaft-point junction\n    translate([0, 0, 47])\n    difference() {\n        // Main collar\n        cylinder(h = 4, d = 6);\n        \n        // Engraved ring pattern\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([2.8, 0, 1])\n            cube([0.5, 0.5, 2]);\n        }\n    }\n    \n    // Hanging loop\n    translate([0, 7, 72])\n    rotate([90, 0, 0])\n    difference() {\n        torus(3, 1.5);\n        translate([0, -5, 0])\n        cube([10, 10, 3], center = true);\n    }\n}\n\n// Helper module for torus (used for hanging loop)\nmodule torus(outer, inner) {\n    rotate_extrude()\n    translate([outer, 0, 0])\n    circle(r = inner);\n}",
    "renders": true
  },
  {
    "historical_artifact": "needle",
    "openscad_code": "// Bronze Age sewing needle (c. 2000 BCE)\n// Based on archaeological finds from Northern Europe\n// Total length: 80mm, suitable for 3D printing\n\n// Eye dimensions\neye_width = 4;\neye_height = 2;\neye_depth = 1.5;\n\n// Shaft dimensions\nshaft_length = 65;\nshaft_diameter_top = 3;\nshaft_diameter_bottom = 1.5;\n\n// Head dimensions\nhead_length = 10;\nhead_diameter = 5;\n\n// Decorative ring parameters\nring_count = 3;\nring_spacing = 2;\n\n// Wall thickness for 3D printing\nwall_thickness = 0.8;\n\n// Main needle module\nmodule needle() {\n    color(\"bronze\") union() {\n        // Needle head with decorative rings\n        translate([0, 0, shaft_length]) {\n            // Main head cylinder\n            cylinder(h=head_length, d=head_diameter, $fn=32);\n            \n            // Decorative rings around head\n            for(i = [0:ring_count-1]) {\n                translate([0, 0, head_length - (i+1)*ring_spacing]) {\n                    difference() {\n                        cylinder(h=0.5, d=head_diameter + 1, $fn=32);\n                        cylinder(h=0.6, d=head_diameter - 0.5, $fn=32);\n                    }\n                }\n            }\n        }\n        \n        // Tapered shaft\n        translate([0, 0, 0]) {\n            cylinder(h=shaft_length, d1=shaft_diameter_top, d2=shaft_diameter_bottom, $fn=32);\n        }\n        \n        // Eye at the top of shaft\n        translate([0, 0, shaft_length - 2]) {\n            difference() {\n                cylinder(h=eye_depth, d=shaft_diameter_top + 1, $fn=32);\n                translate([0, 0, -0.1]) {\n                    cube([eye_width, eye_height, eye_depth + 0.2], center=true);\n                }\n            }\n        }\n        \n        // Sharp point\n        translate([0, 0, -2]) {\n            cylinder(h=4, d1=shaft_diameter_bottom, d2=0.1, $fn=16);\n        }\n        \n        // Engraved spiral decoration on shaft\n        module spiral_groove(turns=3, depth=0.2) {\n            for(i = [0:5:shaft_length*10]) {\n                rotate([0, 0, i*turns*36]) {\n                    translate([0, 0, i/10]) {\n                        cube([shaft_diameter_top - 0.5, 0.5, 1], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Apply spiral decoration\n        translate([0, 0, 10]) {\n            scale([1, 1, 1]) {\n                spiral_groove();\n            }\n        }\n    }\n}\n\n// Base stand for display\nmodule display_stand() {\n    color(\"darkslategray\") difference() {\n        // Main stand\n        translate([0, 0, -1]) {\n            cube([15, 8, 2], center=true);\n        }\n        \n        // Groove for needle\n        translate([0, 0, 0.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=15, d=shaft_diameter_top + 1, $fn=32);\n            }\n        }\n    }\n}\n\n// Assembly\nneedle();\ntranslate([0, -15, -1]) display_stand();",
    "renders": true
  },
  {
    "historical_artifact": "loom",
    "openscad_code": "// Historical Ancient Greek Warp-Weighted Loom\n// Scale: 1:40 (real loom ~2 m tall → 50 mm model)\n\n// Color scheme\n$fn = 24;\n\n// Main frame color - aged olive wood\ncolor([0.35, 0.25, 0.12]) {\n    // Upright posts\n    module post(h = 50) {\n        difference() {\n            cube([4, 3, h], center = false);\n            // Decorative fluting along posts\n            for(i = [0:5:h-5]) {\n                translate([1, -0.5, i])\n                    cube([2, 4, 3]);\n            }\n        }\n    }\n\n    // Base beam\n    translate([0, 0, 0])\n        cube([50, 3, 2]);\n\n    // Top beam\n    translate([0, 0, 48])\n        cube([50, 3, 2]);\n\n    // Left post\n    translate([2, 0, 0])\n        post();\n\n    // Right post\n    translate([46, 0, 0])\n        post();\n\n    // Cross-beams for hanging weights\n    translate([0, 8, 35])\n        cube([50, 2, 1.5]);\n}\n\n// Warp threads (vertical)\ncolor([0.8, 0.75, 0.65]) {\n    for(i = [6:2:44]) {\n        translate([i, 1.5, 46])\n            cylinder(h = 35, d = 0.5);\n    }\n}\n\n// Weft thread spool\ncolor([0.6, 0.4, 0.2]) {\n    translate([25, 25, 25]) {\n        difference() {\n            cylinder(h = 15, d = 5);\n            cylinder(h = 16, d = 1.5);\n        }\n    }\n}\n\n// Clay warp weights (loom weights)\ncolor([0.65, 0.45, 0.35]) {\n    module weight(h = 8) {\n        difference() {\n            cylinder(h = h, d = 6);\n            // Central hole for hanging\n            translate([0, 0, -1])\n                cylinder(h = h + 2, d = 2);\n            // Decorative spiral groove\n            rotate([90, 0, 0])\n                for(a = [0:30:360]) {\n                    rotate([0, 0, a])\n                        translate([3, 0, a/30])\n                            cube([0.5, 0.5, 1]);\n                }\n        }\n    }\n\n    // Hanging weights\n    translate([8, 9, 35 - 8])\n        weight();\n    translate([14, 9, 35 - 8])\n        weight();\n    translate([20, 9, 35 - 8])\n        weight();\n    translate([26, 9, 35 - 8])\n        weight();\n    translate([32, 9, 35 - 8])\n        weight();\n    translate([38, 9, 35 - 8])\n        weight();\n}\n\n// Shuttle\ncolor([0.5, 0.3, 0.1]) {\n    translate([35, 15, 30]) {\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 20, d = 2);\n                // Tapered ends\n                translate([-1, 0, 0])\n                    cube([2, 20, 2]);\n                translate([17, 0, 0])\n                    cube([2, 20, 2]);\n            }\n    }\n}\n\n// Heddle rod\ncolor([0.4, 0.2, 0.05]) {\n    translate([0, -2, 40])\n        cube([50, 1, 0.5]);\n}\n\n// Supporting leg braces\ncolor([0.35, 0.25, 0.12]) {\n    translate([2, -2, 0])\n        rotate([0, 0, 30])\n            cube([12, 2, 1]);\n    translate([46, -2, 0])\n        rotate([0, 0, -30])\n            cube([12, 2, 1]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "spindle",
    "openscad_code": "// Historical Spindle Artifact - OpenSCAD\n// Based on medieval European spindle whorl design\n\n$fn = 100;\n\n// Overall dimensions\nspindle_length = 85;\nwhorl_diameter = 35;\nshaft_diameter = 6;\nhook_height = 15;\nhook_diameter = 12;\n\n// Colors\nwood_color = \"#8B4513\";\nmetal_color = \"#C0C0C0\";\nwhorl_color = \"#D2691E\";\n\n// Main shaft\nmodule shaft() {\n    color(wood_color) {\n        // Tapered shaft\n        cylinder(h = spindle_length, d1 = shaft_diameter, d2 = 3.5, center = false);\n        \n        // Grip texture rings\n        for(i = [5:10:spindle_length-20]) {\n            translate([0, 0, i]) {\n                cylinder(h = 2, d = shaft_diameter + 1, $fn = 30);\n            }\n        }\n    }\n}\n\n// Whorl (spindle weight)\nmodule whorl() {\n    color(whorl_color) {\n        difference() {\n            // Main disc shape\n            cylinder(h = 12, d = whorl_diameter, center = true);\n            \n            // Central hole\n            cylinder(h = 15, d = shaft_diameter + 1, center = true);\n            \n            // Decorative notches\n            for(i = [0:30:359]) {\n                rotate([0, 0, i]) {\n                    translate([whorl_diameter/2 - 3, 0, 0]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h = 6, d = 2, $fn = 6);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Raised decorative ring\n        translate([0, 0, 6]) {\n            cylinder(h = 2, d = whorl_diameter - 2);\n        }\n    }\n}\n\n// Metal hook\nmodule hook() {\n    color(metal_color) {\n        // Hook base\n        cylinder(h = 5, d = shaft_diameter + 2);\n        \n        // Hook curve\n        translate([0, 0, 2.5]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    torus(r1 = hook_diameter/2, r2 = 1.5);\n                    cube([hook_diameter + 2, hook_diameter + 2, hook_diameter], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Helper for torus\nmodule torus(r1, r2) {\n    rotate_extrude($fn = 50) {\n        translate([r1, 0, 0]) {\n            circle(r = r2, $fn = 50);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    shaft();\n    \n    translate([0, 0, spindle_length * 0.65]) {\n        whorl();\n    }\n    \n    translate([0, 0, spindle_length]) {\n        hook();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "quern",
    "openscad_code": "// Historical Quern Stone (hand-mill) - Iron Age to Medieval period\n// Upper (runner) stone and lower (bed) stone with central wooden handle socket\n// Roughly 1:8 scale for desktop display (real querns ~300-400 mm diameter)\n\n$fn = 36;\n\n// Historical granite-like colour\ncolor([0.55,0.52,0.48]) {\n\n// ---------- Lower bedstone ----------\nmodule bedstone() {\n    // Main disk with slightly domed top\n    difference() {\n        cylinder(h = 12, d = 80);                    // Base cylinder\n        translate([0,0,11]) sphere(d = 80);          // Gentle dome\n    }\n    \n    // Central feed hole funnel\n    translate([0,0,-0.1])\n    cylinder(h = 12.1, d1 = 8, d2 = 12, center = false);\n    \n    // Peripheral collection trough\n    difference() {\n        cylinder(h = 3, d = 82);\n        translate([0,0,-0.1]) cylinder(h = 3.2, d = 60);\n    }\n    \n    // Simple decorative ring pattern typical of Romano-British finds\n    for(i = [1:5:75]) {\n        rotate([90,0,0])\n        rotate([0,0,i*15])\n        translate([38,0,6])\n        cylinder(h = 0.6, d = 2);\n    }\n}\n\n// ---------- Upper runner stone ----------\nmodule runner() {\n    // Main upper stone\n    difference() {\n        cylinder(h = 20, d = 75);\n        // Hollow underside for grain channel\n        translate([0,0,-0.1])\n        cylinder(h = 10, d1 = 55, d2 = 65);\n    }\n    \n    // Wooden handle socket (historical ash handle)\n    translate([0,0,20])\n    cylinder(h = 15, d = 12);\n    \n    // Feed hopper eye\n    translate([0,0,15])\n    rotate_extrude()\n    translate([20,0,0]) circle(r = 5);\n    \n    // Handle lug (for wooden turning bar)\n    translate([30,0,25])\n    rotate([0,90,0])\n    cylinder(h = 8, d = 6);\n    \n    // Decorative incised lines (common on Scottish examples)\n    for(i = [1:3]) {\n        rotate([0,0,i*120])\n        translate([0,0,19.9])\n        linear_extrude(0.2)\n        offset(r = -1)\n        circle(d = 65);\n    }\n}\n\n// ---------- Assembly ----------\ntranslate([0,0,12]) bedstone();\ntranslate([0,0,35]) runner();\n\n} // end color",
    "renders": true
  },
  {
    "historical_artifact": "mortar",
    "openscad_code": "// Historical Mortar - Medieval Stone Construction Tool\n// Based on 14th century European stone mortar designs\n// Dimensions: 80mm diameter, 65mm height - suitable for 3D printing\n\n// Main material colors\nstone_color = [0.7, 0.65, 0.6];  // Weathered granite\nband_color = [0.4, 0.3, 0.25];   // Iron reinforcement bands\n\n// Main mortar bowl\nmodule mortar_bowl() {\n    difference() {\n        // Outer bowl shape\n        cylinder(h = 45, r1 = 40, r2 = 35, $fn = 64);\n        \n        // Inner cavity - tapered for grinding efficiency\n        translate([0, 0, -1])\n            cylinder(h = 42, r1 = 32, r2 = 28, $fn = 64);\n        \n        // Pouring spout\n        translate([0, -40, 25])\n            rotate([90, 0, 0])\n                cylinder(h = 15, r1 = 8, r2 = 12, $fn = 32);\n    }\n}\n\n// Decorative iron bands around the mortar\nmodule iron_bands() {\n    for(z = [10, 25, 38]) {\n        translate([0, 0, z])\n            color(band_color)\n            difference() {\n                cylinder(h = 3, r = 41, $fn = 64);\n                cylinder(h = 3, r = 38, $fn = 64);\n            }\n    }\n}\n\n// Base pedestal with decorative elements\nmodule mortar_base() {\n    union() {\n        // Main base cylinder\n        translate([0, 0, -10])\n            cylinder(h = 10, r = 35, $fn = 64);\n        \n        // Decorative ring at base bottom\n        translate([0, 0, -10.5])\n            cylinder(h = 1.5, r = 38, $fn = 64);\n        \n        // Four supporting feet\n        for(angle = [45, 135, 225, 315]) {\n            rotate([0, 0, angle])\n                translate([25, 0, -10])\n                    cube([10, 8, 10], center = true);\n        }\n    }\n}\n\n// Historical inscription band\nmodule inscription_band() {\n    translate([0, 0, 30])\n        difference() {\n            cylinder(h = 2, r = 39.5, $fn = 64);\n            cylinder(h = 2.5, r = 37.5, $fn = 64);\n        }\n}\n\n// Small decorative rivets on iron bands\nmodule rivets() {\n    for(z = [11.5, 26.5, 39.5]) {\n        for(angle = [0:30:330]) {\n            rotate([0, 0, angle])\n                translate([39, 0, z])\n                    color(band_color)\n                    sphere(r = 1.5, $fn = 16);\n        }\n    }\n}\n\n// Weathering texture elements\nmodule weathering() {\n    // Small chips and dents\n    for(i = [1:20]) {\n        rotate([0, 0, i * 73])\n            translate([35 + sin(i) * 3, 0, 5 + i * 2])\n                sphere(r = 0.5 + sin(i) * 0.5, $fn = 8);\n    }\n}\n\n// Assembly of complete mortar\nunion() {\n    color(stone_color) {\n        mortar_bowl();\n        mortar_base();\n        weathering();\n    }\n    \n    iron_bands();\n    rivets();\n    \n    // Subtle inscription texture\n    color([0.3, 0.25, 0.2])\n    inscription_band();\n}\n\n// Ensure model sits flat on build plate\ntranslate([0, 0, 0.1])\n    cube([0.1, 0.1, 0.1], center = true);",
    "renders": true
  },
  {
    "historical_artifact": "pestle",
    "openscad_code": "// Historical Roman Marble Pestle - Medium Complexity\n// Based on 1st-2nd century AD Roman kitchen artifacts\n\n// Overall dimensions (mm)\ntotal_length = 85;\nhandle_length = 45;\nhead_diameter = 35;\n\n// Colors\nmarble_color = [0.9, 0.88, 0.85];\nwear_color = [0.7, 0.68, 0.65];\n\n// Main pestle module\nmodule pestle() {\n    union() {\n        // Handle with ergonomic grip pattern\n        translate([0, 0, total_length - handle_length/2]) {\n            color(marble_color) {\n                // Main handle cylinder\n                cylinder(h = handle_length, d1 = 18, d2 = 15, $fn = 32);\n                \n                // Grip rings\n                for(i = [0:4]) {\n                    translate([0, 0, handle_length - 8 - i*8]) {\n                        difference() {\n                            cylinder(h = 2, d = 22, $fn = 32);\n                            cylinder(h = 2.2, d = 16, $fn = 32);\n                        }\n                    }\n                }\n                \n                // End knob\n                translate([0, 0, handle_length]) {\n                    sphere(r = 10, $fn = 32);\n                    translate([0, 0, -5]) {\n                        cylinder(h = 5, r = 10, $fn = 32);\n                    }\n                }\n            }\n        }\n        \n        // Pestle head\n        translate([0, 0, head_diameter/2]) {\n            color(marble_color) {\n                // Main grinding head\n                difference() {\n                    sphere(d = head_diameter, $fn = 64);\n                    // Flatten bottom for stability\n                    translate([0, 0, -head_diameter/2]) {\n                        cube([head_diameter*2, head_diameter*2, head_diameter], center = true);\n                    }\n                }\n                \n                // Decorative collar\n                translate([0, 0, head_diameter/2 - 2]) {\n                    cylinder(h = 4, d1 = 28, d2 = 22, $fn = 32);\n                }\n                \n                // Connection between handle and head\n                translate([0, 0, head_diameter - 2]) {\n                    cylinder(h = total_length - handle_length - head_diameter + 2, \n                             d1 = 15, d2 = 22, $fn = 32);\n                }\n            }\n        }\n        \n        // Historical wear patterns\n        color(wear_color) {\n            // Grinding surface wear\n            translate([0, 0, 0]) {\n                difference() {\n                    sphere(d = head_diameter*1.02, $fn = 64);\n                    sphere(d = head_diameter, $fn = 64);\n                }\n            }\n            \n            // Handle wear from use\n            for(i = [0:2]) {\n                rotate([0, 0, i*120]) {\n                    translate([12, 0, total_length - handle_length/2]) {\n                        scale([1, 0.3, 0.5]) {\n                            sphere(r = 3, $fn = 16);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Roman decorative inscription band\n        translate([0, 0, head_diameter + (total_length - handle_length - head_diameter)/2]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height = 1) {\n                    text(\"SPQR\", size = 4, font = \"Liberation Sans:style=Bold\", halign = \"center\");\n                }\n            }\n        }\n    }\n}\n\n// Generate the pestle\npestle();",
    "renders": true
  },
  {
    "historical_artifact": "sickle",
    "openscad_code": "// Historical Bronze Age Sickle - Realistic Style\n// Medium complexity with authentic features\n\n// Colors\ncolor_bronze = [150/255, 100/255, 50/255];\ncolor_wood = [101/255, 67/255, 33/255];\n\n// Main module\nmodule sickle() {\n    // Blade\n    color(color_bronze) {\n        union() {\n            // Blade curve\n            difference() {\n                // Main blade body\n                translate([0, 0, 5]) {\n                    rotate([0, 0, -30]) {\n                        scale([1, 0.8, 1]) {\n                            cylinder(h=2, r=40, $fn=60);\n                        }\n                    }\n                }\n                \n                // Inner curve cutout\n                translate([5, 0, 4]) {\n                    rotate([0, 0, -30]) {\n                        scale([0.7, 0.6, 1]) {\n                            cylinder(h=4, r=38, $fn=60);\n                        }\n                    }\n                }\n                \n                // Top flat cut\n                translate([-20, 0, 5]) {\n                    cube([40, 40, 5], center=true);\n                }\n                \n                // Bottom flat cut\n                translate([5, -40, 5]) {\n                    cube([40, 40, 5], center=true);\n                }\n            }\n            \n            // Blade tip\n            translate([-27, 18, 5]) {\n                rotate([0, 0, 60]) {\n                    cylinder(h=2, r1=8, r2=0, $fn=30);\n                }\n            }\n            \n            // Edge reinforcement ridge\n            for(i = [0:5:180]) {\n                translate([cos(i) * 35 - 35, sin(i) * 35 + 5, 6]) {\n                    rotate([0, 0, i + 90]) {\n                        cube([1.5, 2, 1]);\n                    }\n                }\n            }\n            \n            // Decorative rivets\n            translate([-15, 8, 6.5]) {\n                cylinder(h=1, r=2, $fn=20);\n            }\n            translate([-12, 12, 6.5]) {\n                cylinder(h=1, r=2, $fn=20);\n            }\n            translate([-18, 4, 6.5]) {\n                cylinder(h=1, r=2, $fn=20);\n            }\n        }\n    }\n    \n    // Handle\n    color(color_wood) {\n        difference() {\n            // Main handle\n            translate([0, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=50, r1=6, r2=4, $fn=30);\n                }\n            }\n            \n            // Handle hole for tang\n            translate([0, 0, 2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=20, r=2.5, $fn=20);\n                }\n            }\n            \n            // Grip texture\n            for(i = [5:5:45]) {\n                translate([0, i, 0]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h=2, r=6.5, $fn=30);\n                            cylinder(h=2.5, r=5.5, $fn=30);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Bronze tang\n    color(color_bronze) {\n        difference() {\n            // Tang body\n            translate([0, 0, 3]) {\n                rotate([90, 0, 0]) {\n                    cube([4, 20, 2], center=true);\n                }\n            }\n            \n            // Rivet holes\n            translate([0, 10, 3]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=3, r=1.5, $fn=15);\n                }\n            }\n            translate([0, 20, 3]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=3, r=1.5, $fn=15);\n                }\n            }\n        }\n    }\n    \n    // Rivets through handle\n    color(color_bronze) {\n        translate([0, 10, 3]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=15, r=1.5, $fn=15);\n            }\n        }\n        translate([0, 20, 3]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=15, r=1.5, $fn=15);\n            }\n        }\n    }\n}\n\n// Render the sickle\nsickle();",
    "renders": true
  },
  {
    "historical_artifact": "scythe",
    "openscad_code": "// Historical Scythe Artifact - OpenSCAD Model\n// Medieval European harvest scythe with decorative elements\n\n$fn = 32;\n\n// Overall dimensions (mm)\nblade_length = 60;\nblade_width = 12;\nhandle_length = 45;\ngrip_diameter = 8;\n\n// Colors\ncolor_blade = [0.7, 0.7, 0.7];\ncolor_handle = [0.4, 0.2, 0.1];\ncolor_wrap = [0.3, 0.15, 0.05];\ncolor_detail = [0.8, 0.7, 0.1];\n\nmodule blade_ornament() {\n    difference() {\n        union() {\n            // Central ridge\n            translate([0, 0, 1]) \n                cube([8, 2, 0.5], center=true);\n            // Decorative circles\n            for(i = [1:3]) {\n                translate([i * 8 - 16, 0, 1.25]) \n                    cylinder(h=0.5, d=3);\n            }\n        }\n        // Engraved lines\n        for(i = [1:2]) {\n            translate([i * 8 - 12, -1, 1]) \n                cube([0.5, 2, 1.5]);\n        }\n    }\n}\n\nmodule blade() {\n    color(color_blade) {\n        union() {\n            // Main blade body\n            translate([blade_length/2, 0, 0]) \n                cube([blade_length, blade_width, 1.5], center=true);\n            \n            // Tapered tip\n            translate([blade_length, 0, 0]) \n                rotate([90, 0, 0]) \n                    cylinder(h=blade_width, d1=1.5, d2=0.1);\n            \n            // Curved edge\n            translate([blade_length/4, blade_width/2 - 0.75, 0]) \n                rotate([0, 0, -15]) \n                    cube([blade_length/2, 0.5, 2]);\n            \n            // Reinforcement spine\n            translate([blade_length/2, 0, 0.75]) \n                cube([blade_length - 5, 3, 1], center=true);\n            \n            // Ornamental details\n            blade_ornament();\n        }\n    }\n}\n\nmodule handle_wraps() {\n    color(color_wrap) {\n        for(i = [1:3]) {\n            translate([0, 0, i * 8 - 12]) \n                rotate([90, 0, 0]) \n                    cylinder(h=10, d=grip_diameter + 1.5);\n        }\n    }\n}\n\nmodule handle_grip() {\n    color(color_handle) {\n        union() {\n            // Main handle\n            cylinder(h=handle_length, d=grip_diameter);\n            \n            // Knob end\n            translate([0, 0, handle_length]) \n                sphere(d=grip_diameter + 2);\n            \n            // Grip texture rings\n            handle_wraps();\n            \n            // Connection collar\n            translate([0, 0, 0]) \n                cylinder(h=5, d=grip_diameter + 3);\n        }\n    }\n}\n\nmodule tang_extension() {\n    color(color_blade) {\n        union() {\n            // Tang\n            translate([0, 0, -8]) \n                cube([20, 3, 1.5], center=true);\n            \n            // Rivets\n            for(i = [0:1]) {\n                translate([i * 8 - 4, 0, -7.5]) \n                    cylinder(h=2, d=2);\n            }\n        }\n    }\n}\n\nmodule decorative_ring() {\n    color(color_detail) {\n        difference() {\n            cylinder(h=3, d=grip_diameter + 6);\n            cylinder(h=3.5, d=grip_diameter + 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Blade assembly\n    translate([10, 0, 0]) \n        rotate([0, 0, 30]) \n            blade();\n    \n    // Handle assembly\n    rotate([0, 90, 0]) \n        handle_grip();\n    \n    // Tang connection\n    translate([0, 0, 0]) \n        rotate([0, 90, 0]) \n            tang_extension();\n    \n    // Decorative ring at connection\n    translate([0, 0, 0]) \n        rotate([0, 90, 0]) \n            decorative_ring();\n}",
    "renders": true
  },
  {
    "historical_artifact": "plow",
    "openscad_code": "// Historical Roman Plow (Aratrum)\n// Based on 1st-2nd century AD Roman plow design\n// Scale: 1:20 for 3D printing (approx 60mm length)\n\n// Colors for realistic appearance\nsoil_color = [101, 67, 33];\nwood_color = [139, 90, 43];\nmetal_color = [105, 105, 105];\nleather_color = [139, 69, 19];\n\n// Main plow assembly\nmodule roman_plow() {\n    union() {\n        // Plow beam (main wooden beam)\n        color(wood_color)\n        translate([0, 0, 5])\n        rotate([0, 10, 0])\n        cube([50, 8, 6], center=true);\n        \n        // Plow handle (stilt handle)\n        color(wood_color)\n        translate([-20, 0, 15])\n        rotate([0, -30, 0])\n        cylinder(h=25, d=4, $fn=8);\n        \n        // Second handle\n        color(wood_color)\n        translate([-20, 8, 15])\n        rotate([0, -30, 0])\n        cylinder(h=25, d=4, $fn=8);\n        \n        // Share (iron cutting blade)\n        color(metal_color)\n        translate([25, 0, 2])\n        rotate([0, -15, 0])\n        union() {\n            // Main blade\n            cube([12, 2, 1], center=true);\n            // Blade tip\n            translate([6, 0, 0])\n            rotate([0, 0, -30])\n            cube([4, 2, 1], center=true);\n        };\n        \n        // Plowshare support\n        color(wood_color)\n        translate([20, 0, 4])\n        rotate([0, -15, 0])\n        cube([8, 6, 4], center=true);\n        \n        // Coulter (vertical cutting blade)\n        color(metal_color)\n        translate([15, 0, 8])\n        rotate([0, 0, 0])\n        cube([2, 0.5, 10], center=true);\n        \n        // Yoke attachment point\n        color(leather_color)\n        translate([-22, 0, 8])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=3, $fn=12);\n        \n        // Decorative bronze reinforcements\n        color(metal_color)\n        for(i=[-1:1]) {\n            translate([i*15, 0, 5.5])\n            rotate([90, 0, 0])\n            cylinder(h=1, d=10, $fn=6);\n        };\n        \n        // Leather binding details\n        color(leather_color)\n        for(pos=[-10, 0, 10]) {\n            translate([pos, 4, 5])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=1, $fn=8);\n        };\n        \n        // Soil accumulation simulation\n        color(soil_color)\n        translate([15, 0, 0])\n        rotate([0, -15, 0])\n        scale([1.2, 1, 0.5])\n        sphere(d=8, $fn=16);\n        \n        // Support struts\n        color(wood_color)\n        translate([10, 0, 10])\n        rotate([45, 0, 0])\n        cube([15, 2, 2], center=true);\n        \n        // Iron rivets\n        color(metal_color)\n        for(pos=[5, 15, 25]) {\n            translate([pos, 0, 8.5])\n            sphere(d=1.5, $fn=8);\n        };\n    };\n}\n\n// Base platform for printing stability\ncolor([200, 200, 200])\ntranslate([0, 0, -1])\ncube([80, 40, 2], center=true);\n\n// Generate the plow\nroman_plow();",
    "renders": true
  },
  {
    "historical_artifact": "hoe",
    "openscad_code": "// Historical Bronze Age Hoe Artifact (Mesopotamian Style)\n// Based on archaeological finds from 3000-2000 BCE\n\nhoe_height = 85; // Total height in mm\nhoe_width = 45;\nhandle_diameter = 8;\nblade_length = 35;\nblade_width = 28;\nblade_thickness = 4;\n\n// Color definitions\nbronze_color = [0.72, 0.45, 0.2]; // Bronze patina\nwood_color = [0.4, 0.25, 0.1];   // Aged wood\n\nmodule handle() {\n    // Main handle with slight taper\n    color(wood_color)\n    union() {\n        // Upper handle - cylindrical\n        cylinder(h=hoe_height * 0.7, d1=handle_diameter, d2=handle_diameter * 0.9, $fn=20);\n        \n        // Decorative grip rings\n        translate([0, 0, hoe_height * 0.72])\n        for(i = [0:2]) {\n            translate([0, 0, i * 2])\n            cylinder(h=1.5, d=handle_diameter + 2, $fn=20);\n        }\n    }\n}\n\nmodule blade_mount() {\n    // Bronze socket for attaching blade to handle\n    color(bronze_color)\n    difference() {\n        // Main socket\n        translate([0, 0, -hoe_height * 0.15])\n        cylinder(h=15, d1=handle_diameter + 6, d2=handle_diameter + 4, $fn=20);\n        \n        // Inner hole for handle\n        translate([0, 0, -hoe_height * 0.15 - 1])\n        cylinder(h=17, d=handle_diameter + 1, $fn=20);\n    }\n}\n\nmodule blade() {\n    // Traditional Mesopotamian hoe blade with characteristic curved shape\n    color(bronze_color)\n    union() {\n        // Main blade body\n        translate([0, -blade_width/2, -hoe_height * 0.15 - blade_length/2])\n        scale([1, 1.2, 1])\n        cube([blade_thickness, blade_width/1.2, blade_length], center=true);\n        \n        // Curved cutting edge\n        translate([blade_thickness/2, 0, -hoe_height * 0.15 - blade_length + 2])\n        rotate([0, 90, 0])\n        cylinder(h=blade_width, d=blade_length * 0.8, $fn=50);\n        \n        // Reinforcement ridge along back\n        translate([0, 0, -hoe_height * 0.15 - blade_length/2])\n        cube([blade_thickness + 2, 4, blade_length - 10], center=true);\n        \n        // Decorative rivets (typical of Bronze Age construction)\n        for(pos = [-blade_length/3, 0, blade_length/3]) {\n            translate([-blade_thickness/2 - 1, 0, -hoe_height * 0.15 + pos])\n            sphere(d=3, $fn=12);\n        }\n    }\n}\n\nmodule ancient_markings() {\n    // Cuneiform-inspired decorative markings on blade\n    color([0.6, 0.35, 0.15])\n    translate([-blade_thickness/2 - 0.5, 0, -hoe_height * 0.15 - blade_length/2])\n    for(i = [0:3]) {\n        translate([0, -blade_width/3 + i * blade_width/3, 0])\n        for(j = [0:2]) {\n            translate([0, 0, -blade_length/3 + j * blade_length/3])\n            cube([0.5, 2, 0.5]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    translate([0, 0, hoe_height * 0.7])\n    blade_mount();\n    blade();\n    ancient_markings();\n}",
    "renders": true
  },
  {
    "historical_artifact": "rake",
    "openscad_code": "// Historical Rake Artifact - Medieval Agricultural Tool\n// Based on 14th-15th century wooden rakes with iron teeth\n\n// Overall dimensions: 120mm handle, 80mm head width\n// Designed for 3D printing with 1.2mm wall thickness\n\n$fn = 32;\n\n// Main module for the complete rake\nmodule historical_rake() {\n    union() {\n        // Handle - ash wood appearance\n        color([0.72, 0.52, 0.32]) {\n            handle();\n        }\n        \n        // Head assembly - weathered oak with iron teeth\n        translate([0, 0, 110]) {\n            color([0.45, 0.32, 0.22]) {\n                rake_head();\n            }\n        }\n        \n        // Iron reinforcement band\n        translate([0, 0, 105]) {\n            color([0.3, 0.3, 0.3]) {\n                iron_band();\n            }\n        }\n    }\n}\n\n// Handle with historical details\nmodule handle() {\n    // Main handle shaft\n    cylinder(h=110, d1=12, d2=8, center=false);\n    \n    // Grip end with carved details\n    translate([0, 0, 110]) {\n        difference() {\n            cylinder(h=15, d=12, center=false);\n            // Decorative grooves\n            for(i = [0:2]) {\n                translate([0, 0, 5 + i*3]) {\n                    rotate([0, 0, 45*i]) {\n                        cube([14, 1.5, 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Metal ferrule at head joint\n    translate([0, 0, 95]) {\n        color([0.25, 0.25, 0.25]) {\n            cylinder(h=10, d=10, center=false);\n        }\n    }\n}\n\n// Rake head with teeth\nmodule rake_head() {\n    difference() {\n        // Main head beam\n        cube([80, 12, 25], center=true);\n        \n        // Mortise joint for handle\n        translate([0, 0, -12.5]) {\n            cylinder(h=30, d=10, center=true);\n        }\n    }\n    \n    // Historical maker's mark\n    translate([25, 7, 0]) {\n        color([0.2, 0.2, 0.2]) {\n            // Simple cross mark\n            cube([8, 1, 3], center=true);\n            cube([1, 8, 3], center=true);\n        }\n    }\n    \n    // Rake teeth - iron construction\n    color([0.4, 0.4, 0.4]) {\n        for(i = [-35:10:35]) {\n            translate([i, 0, -20]) {\n                rake_tooth();\n            }\n        }\n    }\n}\n\n// Individual rake tooth\nmodule rake_tooth() {\n    difference() {\n        // Tapered iron tooth\n        cylinder(h=25, d1=2.5, d2=1.5, center=false);\n        \n        // Rounded tip\n        translate([0, 0, -1]) {\n            sphere(d=3);\n        }\n    }\n}\n\n// Iron reinforcement band\nmodule iron_band() {\n    difference() {\n        cylinder(h=5, d=14, center=true);\n        translate([0, 0, -3]) {\n            cylinder(h=7, d=9, center=true);\n        }\n    }\n    \n    // Decorative rivets\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle]) {\n            translate([6, 0, 0]) {\n                sphere(d=2);\n            }\n        }\n    }\n}\n\n// Generate the complete rake\nhistorical_rake();",
    "renders": true
  },
  {
    "historical_artifact": "shovel",
    "openscad_code": "// Iron Age shovel replica (c. 500 BCE)\n// Based on archaeological finds from Northern Europe\n// Designed for 3D printing: blade 60 mm, handle 80 mm, wall 2 mm\n\nblade_width = 60;\nblade_height = 45;\nhandle_length = 80;\nhandle_diameter = 8;\nwall = 2;\n\nmodule shovel_blade() {\n    // Main forged iron blade with slight curve\n    difference() {\n        union() {\n            translate([0, 0, blade_height/2])\n                scale([1, 0.9, 1])\n                cube([blade_width, blade_height*0.7, wall], center=true);\n            \n            // Reinforced socket where blade meets handle\n            translate([0, -blade_height*0.4, 0])\n                cylinder(h=12, d1=handle_diameter+4, d2=handle_diameter+8, center=true);\n        }\n        \n        // Hollow socket for handle insertion\n        translate([0, -blade_height*0.4, 0])\n            cylinder(h=14, d=handle_diameter, center=true);\n        \n        // Archaic punched hole for hanging/storage\n        translate([blade_width*0.3, -blade_height*0.2, blade_height/2+1])\n            rotate([90, 0, 0])\n                cylinder(h=wall+2, d=4, center=true);\n        \n        // Decorative geometric pattern (triangular cutouts typical of Iron Age)\n        for(i=[-1:1]) {\n            translate([i*15, -blade_height*0.1, blade_height/2+1])\n                rotate([90, 0, 0])\n                    cylinder(h=wall+2, d=6, $fn=3, center=true);\n        }\n    }\n}\n\nmodule wooden_handle() {\n    // Ash wood handle with characteristic taper\n    color(\"SaddleBrown\")\n    difference() {\n        union() {\n            // Main handle shaft\n            translate([0, -handle_length/2 - blade_height*0.4, 0])\n                cylinder(h=handle_length, d=handle_diameter, center=true);\n            \n            // Slight flare at grip end\n            translate([0, -handle_length - blade_height*0.4 + 5, 0])\n                cylinder(h=10, d1=handle_diameter, d2=handle_diameter+2, center=true);\n        }\n        \n        // Iron rivet hole through handle\n        translate([0, -blade_height*0.4, 0])\n            rotate([90, 0, 0])\n                cylinder(h=handle_diameter+2, d=2, center=true);\n    }\n}\n\nmodule iron_rivet() {\n    // Traditional iron rivet securing blade to handle\n    color(\"DarkSlateGray\")\n    translate([0, -blade_height*0.4, 0])\n    rotate([90, 0, 0])\n    union() {\n        cylinder(h=handle_diameter+4, d=3, center=true);\n        // Peened ends\n        translate([0, 0, handle_diameter/2+1.5])\n            sphere(d=4);\n        translate([0, 0, -handle_diameter/2-1.5])\n            sphere(d=4);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"DarkSlateGray\") shovel_blade();\n    wooden_handle();\n    iron_rivet();\n}",
    "renders": true
  },
  {
    "historical_artifact": "spade",
    "openscad_code": "// Historical Bronze Age Spade (circa 1200 BCE)\n// Based on archaeological finds from Northern Europe\n// Features socketed blade with decorative rivets and grip ridges\n\n$fn = 32;\n\n// Main module for the complete spade\nmodule spade() {\n    color(\"Bronze\") {\n        union() {\n            // Spade blade with realistic curvature\n            blade();\n            \n            // Socket for handle attachment\n            socket();\n            \n            // Decorative rivets along blade edges\n            rivets();\n            \n            // Reinforcement ribs\n            ribs();\n        }\n    }\n}\n\n// Blade with historical curved profile\nmodule blade() {\n    difference() {\n        // Main blade body\n        union() {\n            // Central blade - slightly curved for digging efficiency\n            translate([0, 0, 2])\n                linear_extrude(height = 3, convexity = 10)\n                    polygon(points = [\n                        [0, 0],\n                        [5, 25],\n                        [12, 45],\n                        [25, 55],\n                        [35, 57],\n                        [45, 55],\n                        [55, 45],\n                        [60, 25],\n                        [65, 0],\n                        [60, -5],\n                        [45, -8],\n                        [35, -10],\n                        [25, -8],\n                        [12, -5],\n                        [5, 0]\n                    ]);\n            \n            // Thickened cutting edge\n            translate([32.5, 57, 0])\n                cube([5, 3, 7], center = false);\n        }\n        \n        // Historical wear pattern grooves\n        for(i = [1:3]) {\n            translate([20 * i, 20, 1])\n                rotate([90, 0, 0])\n                    cylinder(h = 40, r = 0.5, center = true);\n        }\n    }\n}\n\n// Socket for wooden handle\nmodule socket() {\n    difference() {\n        // Main socket tube\n        translate([32.5, -5, 3.5])\n            rotate([90, 0, 0])\n                cylinder(h = 25, r1 = 5, r2 = 4);\n        \n        // Interior hole for handle\n        translate([32.5, -5, 3.5])\n            rotate([90, 0, 0])\n                cylinder(h = 26, r1 = 3, r2 = 2.5);\n        \n        // Rivet holes for securing handle\n        for(i = [0:1]) {\n            translate([32.5, -5 + 12 * i, 3.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 10, r = 0.8);\n        }\n    }\n}\n\n// Decorative bronze rivets along blade edges\nmodule rivets() {\n    for(pos = [[10, 10], [20, 25], [32.5, 45], [45, 25], [55, 10]]) {\n        translate([pos[0], pos[1], 4])\n            sphere(r = 1.2);\n    }\n}\n\n// Reinforcement ribs for durability\nmodule ribs() {\n    // Central strengthening rib\n    translate([32.5, 25, 2])\n        cube([2, 35, 1.5], center = true);\n    \n    // Side ribs for lateral strength\n    for(side = [-1, 1]) {\n        translate([32.5 + side * 15, 20, 2])\n            rotate([0, 0, side * 10])\n                cube([1.5, 25, 1], center = true);\n    }\n}\n\n// Scale to reasonable 3D printing size\nscale([0.8, 0.8, 0.8])\n    spade();",
    "renders": true
  },
  {
    "historical_artifact": "pick",
    "openscad_code": "// Medieval iron miner's pickaxe (13th century European style)\n// Based on archaeological finds from Central Europe\n// Overall length: 85mm, suitable for 3D printing\n\n$fn = 32;\n\n// Material colors\ncolor(\"dimgray\") union() {\n    \n    // Pick head - forged iron construction\n    translate([0, 0, 65]) {\n        // Main pick head body\n        difference() {\n            cube([20, 15, 35], center = true);\n            // Socket hole for handle\n            translate([0, 0, -10])\n                cylinder(h = 40, r = 5, center = true);\n        }\n        \n        // Pick point (adze end)\n        translate([0, 7.5, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 25, r1 = 7, r2 = 2);\n        \n        // Pick point (pointed end)\n        translate([0, -7.5, 15])\n            rotate([90, 0, 0])\n                cylinder(h = 25, r1 = 7, r2 = 1);\n        \n        // Reinforcement collar\n        translate([0, 0, -15])\n            cylinder(h = 5, r = 12);\n        \n        // Decorative forge weld lines\n        for(i = [-1, 1]) {\n            translate([i * 8, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 15, r = 1);\n        }\n    }\n    \n    // Wooden handle - ash wood construction\n    color(\"saddlebrown\") {\n        // Main handle shaft\n        translate([0, 0, 32.5])\n            cylinder(h = 65, r = 4.5);\n        \n        // Handle swell for grip\n        translate([0, 0, 15])\n            cylinder(h = 15, r1 = 5, r2 = 6);\n        \n        // Handle end knob\n        translate([0, 0, 0])\n            sphere(r = 6);\n        \n        // Leather grip wrapping\n        color(\"darkbrown\") {\n            for(i = [1:5]) {\n                translate([0, 0, 20 + i * 8])\n                    rotate([90, 0, 0])\n                        cylinder(h = 5, r = 5.2);\n            }\n        }\n    }\n    \n    // Iron wedges for securing head\n    translate([0, 0, 65]) {\n        color(\"dimgray\") {\n            // Two securing wedges\n            for(angle = [0, 180]) {\n                rotate([0, 0, angle])\n                    translate([5, 0, -15])\n                        cube([3, 2, 10], center = true);\n            }\n        }\n    }\n    \n    // Decorative maker's mark\n    translate([0, 8, 50])\n        rotate([0, 90, 0])\n            linear_extrude(height = 1) {\n                text(\"✠\", size = 4, halign = \"center\");\n            }\n}",
    "renders": true
  },
  {
    "historical_artifact": "adze",
    "openscad_code": "// Historical Adze - Neolithic style stone blade with wooden handle\n// Traditional woodworking tool used for carving and shaping wood\n// Blade angled perpendicular to handle, characteristic curved cutting edge\n\n// Overall dimensions (mm)\nblade_length = 35;\nblade_width = 25;\nhandle_length = 80;\nhandle_diameter = 12;\n\n// Colors\nstone_color = [0.5, 0.5, 0.45];\nwood_color = [0.6, 0.4, 0.2];\nleather_color = [0.4, 0.25, 0.15];\n\n// Stone blade module\nmodule stone_blade() {\n    color(stone_color)\n    union() {\n        // Main blade body - tapered rectangular prism\n        translate([-blade_length/2, 0, 0])\n        scale([1, 0.7, 0.3])\n        cube([blade_length, blade_width, 8], center=true);\n        \n        // Curved cutting edge - created from sphere difference\n        translate([blade_length/2-2, 0, -4])\n        scale([1, 1.2, 0.5])\n        sphere(d=blade_width);\n        \n        // Blade bevel - angled surface\n        translate([blade_length/2-5, 0, 0])\n        rotate([0, -20, 0])\n        cube([10, blade_width+5, 8], center=true);\n        \n        // Weathering/wear marks\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n            translate([i*3-3, i*2-2, 2])\n            scale([1, 0.3, 0.2])\n            sphere(d=3);\n        }\n    }\n}\n\n// Wrapped handle detail\nmodule leather_wrap() {\n    color(leather_color)\n    for(i = [0:5]) {\n        translate([0, 0, i*10-25])\n        rotate([90, 0, 0])\n        cylinder(h=handle_diameter+2, d1=handle_diameter+3, d2=handle_diameter+3, $fn=8);\n    }\n}\n\n// Wooden handle with grip texture\nmodule wooden_handle() {\n    color(wood_color)\n    union() {\n        // Main handle shaft\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, d=handle_diameter, center=true, $fn=12);\n        \n        // Grip rings for better hold\n        for(i = [0:4]) {\n            translate([0, 0, i*15-30])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=handle_diameter+1, $fn=12);\n        }\n        \n        // End knob\n        translate([0, handle_length/2-5, 0])\n        sphere(d=handle_diameter+3);\n    }\n}\n\n// Lashing cord detail\nmodule lashing_cord() {\n    color([0.2, 0.2, 0.2])\n    for(i = [0:3]) {\n        rotate([0, 0, i*45])\n        translate([-blade_length/3, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=handle_diameter+5, d=1.5, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle assembly\n    translate([0, 0, 0])\n    wooden_handle();\n    \n    // Leather wrapping\n    translate([0, -handle_length/2+20, 0])\n    leather_wrap();\n    \n    // Blade attachment point\n    translate([0, -handle_length/2-5, handle_diameter/2+3])\n    rotate([0, -45, 0])\n    union() {\n        // Stone blade\n        stone_blade();\n        \n        // Lashing detail\n        lashing_cord();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "plane",
    "openscad_code": "// Historical Greek Trireme Ram - Bronze Age Naval Artifact\n// A realistic representation of a trireme bronze ram from ancient Greek warships (ca. 5th century BCE)\n\n// Overall dimensions: 80mm length, 25mm width, 30mm height\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 32;\n\n// Main bronze ram structure\nmodule trireme_ram() {\n    color(\"bronze\") {\n        // Central ram core\n        union() {\n            // Primary ram body - elongated elliptical shape\n            translate([0, 0, 15])\n                scale([1, 0.8, 0.6])\n                    sphere(r = 12);\n            \n            // Tapered front section\n            translate([25, 0, 15])\n                rotate([0, 90, 0])\n                    cylinder(h = 30, r1 = 8, r2 = 3);\n            \n            // Reinforcement ridge along top\n            translate([0, 0, 22])\n                scale([1.2, 0.3, 0.2])\n                    cube([60, 8, 4], center = true);\n        }\n        \n        // Decorative crest patterns\n        difference() {\n            // Main crest base\n            translate([-20, 0, 25])\n                rotate([10, 0, 0])\n                    cube([10, 20, 3], center = true);\n            \n            // Engraved wave pattern\n            for(i = [-1:1]) {\n                translate([-20 + i*3, 0, 27])\n                    rotate([10, 0, 0])\n                        cube([1, 18, 2], center = true);\n            }\n        }\n        \n        // Side reinforcement plates\n        for(side = [-1, 1]) {\n            translate([0, side*10, 15])\n                rotate([0, 0, side*15])\n                    cube([50, 2, 20], center = true);\n        }\n        \n        // Attachment bolt holes (historical rivets)\n        for(i = [0:3]) {\n            translate([-25 + i*15, 0, 15])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, r = 2, $fn = 16);\n        }\n        \n        // Lower blade edge\n        translate([5, 0, 5])\n            rotate([0, 0, 0])\n                scale([1.2, 0.1, 0.3])\n                    cube([40, 25, 10], center = true);\n    }\n}\n\n// Weathering and battle damage details\nmodule battle_damage() {\n    color(\"darkgreen\") {\n        // Verdigris patina spots\n        for(pos = [[-10, 5, 20], [15, -3, 18], [-5, -8, 16], [20, 7, 22]]) {\n            translate(pos)\n                sphere(r = 1.5 + (rand($children)*2));\n        }\n        \n        // Small impact dents\n        difference() {\n            children();\n            for(dent = [[-5, 3, 18], [12, -2, 20], [8, 6, 17]]) {\n                translate(dent)\n                    sphere(r = 1.2);\n            }\n        }\n    }\n}\n\n// Decorative inscription band\nmodule inscription_band() {\n    color(\"bronze\") {\n        translate([0, 0, 20])\n            difference() {\n                // Raised band\n                cylinder(h = 3, r = 13);\n                \n                // Greek key pattern cutouts\n                for(angle = [0:30:330]) {\n                    rotate([0, 0, angle])\n                        translate([10, 0, -0.5])\n                            cube([4, 2, 4], center = true);\n                }\n            }\n    }\n}\n\n// Assembly\ntrireme_ram();\nbattle_damage() children();\ninscription_band();\n\n// Mounting base for display\ncolor(\"gray\") {\n    translate([0, 0, -2])\n        cube([70, 30, 2], center = true);\n    \n    // Museum label stand\n    translate([-30, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 15, r = 1, $fn = 8);\n}",
    "renders": true
  },
  {
    "historical_artifact": "drawknife",
    "openscad_code": "// Drawknife - Historical Woodworking Tool (Realistic, Medium Complexity)\n// Based on 18th-19th century European drawknives used by coopers and wheelwrights\n\n// Overall dimensions: 80mm length, 25mm height, 6mm thickness\n$fn = 32;\n\nmodule drawknife() {\n    // Blade assembly\n    union() {\n        // Main blade - slightly curved cutting edge\n        color([0.7, 0.7, 0.7]) \n        translate([-30, 0, 0]) {\n            difference() {\n                // Blade body with slight curvature\n                hull() {\n                    translate([0, 0, 1]) cube([60, 12, 1.5]);\n                    translate([0, 2, 0]) cube([60, 8, 2]);\n                }\n                \n                // Beveled cutting edge\n                translate([0, 5, -1]) cube([60, 10, 3]);\n                \n                // Tang holes\n                cylinder(h=5, d=3);\n                translate([60, 0, 0]) cylinder(h=5, d=3);\n            }\n        }\n        \n        // Blade spine reinforcement\n        color([0.5, 0.5, 0.5])\n        translate([-32, -2, 1.5]) cube([64, 4, 1]);\n        \n        // Decorative fuller groove\n        color([0.8, 0.8, 0.8])\n        translate([-25, 1.5, 1]) cube([50, 1, 0.8]);\n    }\n    \n    // Wooden handles with traditional mushroom shape\n    module handle() {\n        difference() {\n            // Handle body\n            color([0.6, 0.4, 0.2]) \n            union() {\n                // Main grip\n                cylinder(h=35, d1=10, d2=8);\n                \n                // Mushroom cap\n                translate([0, 0, 35]) sphere(d=14);\n                \n                // Ferrule ring\n                color([0.3, 0.3, 0.3])\n                translate([0, 0, -0.5]) cylinder(h=3, d=11);\n            }\n            \n            // Tang hole\n            rotate([90, 0, 0]) cylinder(h=20, d=3.2);\n            \n            // Decorative grip rings\n            for(i = [5:10:30]) {\n                translate([0, 0, i]) \n                rotate([90, 0, 0]) \n                cylinder(h=1, d1=9.5, d2=8.5);\n            }\n        }\n    }\n    \n    // Left handle\n    translate([-35, 0, 0]) rotate([0, 90, 0]) handle();\n    \n    // Right handle\n    translate([35, 0, 0]) rotate([0, 90, 180]) handle();\n    \n    // Maker's mark on blade\n    color([0.2, 0.2, 0.2])\n    translate([0, 0, 2.1]) \n    linear_extrude(height=0.1) \n    text(\"SHEFFIELD\", size=4, halign=\"center\", valign=\"center\");\n}\n\ndrawknife();",
    "renders": true
  },
  {
    "historical_artifact": "gouge",
    "openscad_code": "// Historical gouge artifact (Mesolithic bone-working tool)\n// Overall dimensions: 80mm length, 15mm width, 12mm height\n\ncolor([0.82, 0.71, 0.55])  // Bone/antler color\n\nmodule handle_grooves() {\n    // Carved grip grooves for fingers\n    for (i = [0:3]) {\n        translate([10 + i*15, -7, 8])\n            rotate([90, 0, 0])\n                cylinder(h=2, d1=3, d2=2, $fn=8);\n    }\n}\n\nmodule decorative_notches() {\n    // Decorative notches on spine (common in Mesolithic tools)\n    for (i = [0:4]) {\n        translate([55 + i*4, 0, 10])\n            rotate([0, 90, 0])\n                cube([1, 1.5, 0.5]);\n    }\n}\n\nmodule blade_edge() {\n    // Curved cutting edge with slight asymmetry\n    difference() {\n        translate([0, 0, 0])\n            rotate([0, 0, -15])\n                cube([35, 15, 6]);\n        \n        // Hollow ground blade\n        translate([-5, 7.5, 3])\n            rotate([0, 0, 0])\n                cylinder(h=40, r=8, $fn=20);\n        \n        // Sharpening bevel\n        translate([0, -1, 0])\n            rotate([0, 25, 0])\n                cube([40, 20, 10]);\n    }\n}\n\nmodule handle_body() {\n    // Antler/bone handle with natural taper\n    difference() {\n        union() {\n            // Main handle\n            translate([30, 0, 6])\n                rotate([0, 0, 5])\n                    scale([1, 0.8, 0.6])\n                        cylinder(h=50, r=8, $fn=12);\n            \n            // Bulbous grip end\n            translate([75, 0, 6])\n                sphere(d=12, $fn=16);\n        }\n        \n        // Carved socket for blade insertion\n        translate([30, 0, 6])\n            rotate([0, 0, 0])\n                cylinder(h=15, r=4, $fn=8);\n    }\n}\n\nmodule surface_texture() {\n    // Subtle tool marks from stone-age crafting\n    for (i = [0:20]) {\n        translate([random(30, 80), random(-7, 7), random(2, 10)])\n            rotate([random(0, 360), random(0, 20), random(0, 360)])\n                cube([random(0.5, 1.5), random(0.1, 0.3), random(0.1, 0.2)]);\n    }\n}\n\nunion() {\n    // Main assembly\n    union() {\n        blade_edge();\n        handle_body();\n    }\n    \n    // Surface details\n    handle_grooves();\n    decorative_notches();\n    \n    // Optional texture layer (comment out for smoother print)\n    // surface_texture();\n}\n\n// Support base for printing\ntranslate([40, 0, -0.2])\n    cube([80, 16, 0.2]);",
    "renders": true
  },
  {
    "historical_artifact": "file",
    "openscad_code": "// Roman Wax Tablet (Tabulae) - historical writing tablet with stylus cavity\n// Based on 1st-2nd century AD artifacts found at Pompeii and Vindolanda\n// Dimensions: 90mm x 60mm x 12mm - typical Roman writing tablet size\n\n// Color constants\ntablet_color = \"burlywood\";\nwax_color = \"saddlebrown\";\nstylus_color = \"darkgoldenrod\";\n\n// Main tablet body\nmodule tablet_body() {\n    color(tablet_color)\n    difference() {\n        // Outer shell - slightly rounded edges\n        hull() {\n            translate([-45, -30, 0]) cube([90, 60, 12], center = false);\n            translate([-42, -27, 3]) cube([84, 54, 6], center = false);\n        }\n        \n        // Hollow cavity for wax layer\n        translate([-43, -28, 10]) cube([86, 56, 3], center = false);\n        \n        // Stylus storage channel on right side\n        translate([35, -3, 5]) rotate([0, 90, 0]) \n            cylinder(h = 35, r1 = 4, r2 = 3.5, center = true);\n    }\n}\n\n// Wax layer inside tablet\nmodule wax_layer() {\n    color(wax_color)\n    translate([-42, -28, 9.5]) cube([84, 56, 2], center = false);\n}\n\n// Hinges on left side - two small cylinders\nmodule hinges() {\n    color(tablet_color)\n    for(i = [-1:1]) {\n        translate([-45, i * 20, 6]) rotate([90, 0, 0]) \n            cylinder(h = 10, r = 3, center = true);\n    }\n}\n\n// Decorative border pattern - Roman geometric motif\nmodule border_pattern() {\n    color(\"peru\")\n    for(x = [-35:10:35]) {\n        for(y = [-20:10:20]) {\n            if(abs(x) < 40 && abs(y) < 25) {\n                translate([x, y, 11.5]) \n                    cylinder(h = 0.5, r = 1.5, $fn = 6);\n            }\n        }\n    }\n}\n\n// Latin inscription on bottom edge - \"MARCUS CAESARI\"\nmodule inscription() {\n    color(\"saddlebrown\")\n    translate([-30, -32, 0.5]) \n        for(i = [0:9]) {\n            translate([i * 6, 0, 0]) \n                cube([0.5, 3, 0.5], center = false);\n        }\n}\n\n// Stylus (writing implement)\nmodule stylus() {\n    color(stylus_color)\n    union() {\n        // Main shaft\n        translate([52, 0, 6]) rotate([0, 90, 0]) \n            cylinder(h = 30, r1 = 3, r2 = 2, center = true);\n        \n        // Flattened end for erasing\n        translate([67, 0, 6]) rotate([0, 90, 0]) \n            scale([1, 0.3, 1]) sphere(r = 3);\n        \n        // Pointed writing end\n        translate([37, 0, 6]) rotate([0, 90, 0]) \n            cylinder(h = 5, r1 = 2, r2 = 0.5, center = true);\n    }\n}\n\n// Leather tie cord (simplified)\nmodule tie_cord() {\n    color(\"dimgray\")\n    translate([-45, 0, 12]) rotate([90, 0, 0]) \n        cylinder(h = 60, r = 0.5, center = true);\n}\n\n// Assembly of complete tablet\nunion() {\n    // Main components\n    tablet_body();\n    wax_layer();\n    \n    // Hardware and decoration\n    hinges();\n    border_pattern();\n    inscription();\n    \n    // Accessories\n    stylus();\n    tie_cord();\n}\n\n// Render settings for 3D printing\n$fn = 32;  // Smooth curves\n$vpr = [45, 0, 30];  // Initial view angle",
    "renders": true
  },
  {
    "historical_artifact": "rasps",
    "openscad_code": "// Bronze Age Rasps Historical Artifact\n// Based on archaeological finds from Minoan Crete (c. 1500 BCE)\n\n// Color definitions for bronze artifact\n$fn = 32;\n\n// Main rasp body - bronze tool with tapered end\nmodule rasp_body() {\n    color([0.72, 0.45, 0.2])  // Bronze patina color\n    \n    // Handle portion\n    union() {\n        // Main rectangular body\n        translate([-20, -8, -3])\n            cube([40, 16, 6]);\n        \n        // Tapered working end\n        translate([20, -6, -2.5])\n            cube([15, 12, 5]);\n        \n        // Rounded butt end\n        translate([-20, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=16, r1=3, r2=3);\n    }\n}\n\n// Cutting teeth pattern - triangular teeth along working surface\nmodule cutting_teeth() {\n    color([0.65, 0.4, 0.15])  // Darker bronze for worn teeth\n    \n    // Top surface teeth\n    for(i = [0:3]) {\n        for(j = [0:7]) {\n            translate([5 + i*8, -7 + j*2, 3])\n                rotate([0, 0, 45])\n                    cube([1.5, 1.5, 1.5], center=true);\n        }\n    }\n    \n    // Side surface teeth\n    for(i = [0:3]) {\n        for(j = [0:3]) {\n            translate([5 + i*8, 8, -2.5 + j*2])\n                rotate([0, 90, 45])\n                    cube([1.5, 1.5, 1.5], center=true);\n        }\n    }\n}\n\n// Decorative rivet at handle end\nmodule decorative_rivet() {\n    color([0.8, 0.6, 0.3])  // Polished bronze\n    \n    translate([-20, 0, 0])\n        union() {\n            // Rivet head\n            cylinder(h=2, r1=4, r2=2);\n            // Decorative ring\n            translate([0, 0, 1])\n                cylinder(h=0.5, r1=5, r2=5);\n        }\n}\n\n// Inscription band - Linear A symbols (simplified)\nmodule inscription_band() {\n    color([0.5, 0.3, 0.1])  // Dark bronze\n    \n    translate([-15, 0, 3.5])\n        union() {\n            // Raised band\n            cube([10, 14, 0.5]);\n            \n            // Symbolic marks (representing Linear A)\n            translate([-4, -5, 0.6])\n                cube([1, 2, 0.3]);\n            translate([-2, -3, 0.6])\n                cube([1, 4, 0.3]);\n            translate([0, -4, 0.6])\n                cube([2, 1, 0.3]);\n            translate([2, -2, 0.6])\n                cube([1, 3, 0.3]);\n        }\n}\n\n// Wear marks from use\nmodule wear_marks() {\n    color([0.6, 0.35, 0.1])  // Dark worn areas\n    \n    // Handle grip wear\n    translate([-12, -6, 3.2])\n        cube([8, 12, 0.2]);\n    \n    // Edge wear from striking\n    translate([30, -3, 0])\n        rotate([0, 0, 30])\n            cube([3, 6, 6]);\n}\n\n// Main assembly\nunion() {\n    // Core rasp\n    rasp_body();\n    \n    // Functional elements\n    cutting_teeth();\n    \n    // Decorative elements\n    decorative_rivet();\n    inscription_band();\n    \n    // Usage wear\n    wear_marks();\n}",
    "renders": true
  },
  {
    "historical_artifact": "whetstone",
    "openscad_code": "// Historical Whetstone Artifact - Medieval sharpening stone with runic inscriptions\n// Based on 10th-11th century Norse whetstones found in archaeological sites\n\n// Overall dimensions for 3D printing\nlength = 85;\nwidth = 22;\nthickness = 12;\nwall_thickness = 2;\n\n// Main stone body with realistic proportions\nmodule stone_body() {\n    difference() {\n        // Basic rectangular stone shape with rounded edges\n        hull() {\n            translate([-length/2 + 5, -width/2 + 5, -thickness/2 + 2])\n                sphere(d=10, $fn=20);\n            translate([length/2 - 5, width/2 - 5, thickness/2 - 2])\n                sphere(d=10, $fn=20);\n            translate([-length/2 + 5, width/2 - 5, -thickness/2 + 2])\n                sphere(d=10, $fn=20);\n            translate([length/2 - 5, -width/2 + 5, -thickness/2 + 2])\n                sphere(d=10, $fn=20);\n            translate([-length/2 + 5, -width/2 + 5, thickness/2 - 2])\n                sphere(d=10, $fn=20);\n            translate([length/2 - 5, width/2 - 5, -thickness/2 + 2])\n                sphere(d=10, $fn=20);\n            translate([-length/2 + 5, width/2 - 5, thickness/2 - 2])\n                sphere(d=10, $fn=20);\n            translate([length/2 - 5, -width/2 + 5, thickness/2 - 2])\n                sphere(d=10, $fn=20);\n        }\n        \n        // Central groove from sharpening\n        translate([0, -width/4, -thickness/2])\n            cube([length*0.8, width/2, thickness/2], center=true);\n    }\n}\n\n// Runic inscription details\nmodule runic_inscription() {\n    // Younger Futhark runes spelling \"SKERP\" (sharpen)\n    for(i=[0:4]) {\n        translate([-length/3 + i*10, 0, thickness/2 + 0.1])\n            linear_extrude(height=0.5)\n                text(\"ᚱ\", size=6, font=\"Segoe UI Historic\");\n    }\n}\n\n// Suspension hole for leather thong\nmodule suspension_hole() {\n    difference() {\n        translate([length/2 - 8, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=width+2, d=4, center=true, $fn=20);\n        \n        // Chamfer edges of hole\n        translate([length/2 - 8, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=width+4, d1=6, d2=4, center=true, $fn=20);\n    }\n}\n\n// Worn surface texture patterns\nmodule wear_patterns() {\n    // Random small depressions from use\n    for(i=[0:20]) {\n        angle = i * 137.5;\n        radius = 8 + i * 0.5;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, -thickness/2 + 0.5])\n            sphere(d=1 + sin(i*2)*0.5, $fn=8);\n    }\n}\n\n// Decorative border groove\nmodule border_groove() {\n    difference() {\n        cube([length, width, thickness], center=true);\n        \n        translate([0, 0, -thickness/2 + 1])\n            cube([length-4, width-4, thickness-1], center=true);\n    }\n}\n\n// Assembly of the complete whetstone\nmodule whetstone() {\n    // Main stone in grey slate color\n    color(\"slategrey\")\n    difference() {\n        stone_body();\n        \n        // Add suspension hole\n        suspension_hole();\n        \n        // Border decoration\n        border_groove();\n    }\n    \n    // Add runic inscription in darker color\n    color(\"darkslategray\")\n    runic_inscription();\n    \n    // Add wear patterns\n    color(\"slategrey\")\n    wear_patterns();\n    \n    // Leather thong through suspension hole\n    color(\"saddlebrown\")\n    translate([length/2 - 8, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=40, d=2, center=true, $fn=8);\n}\n\n// Render the complete artifact\nwhetstone();",
    "renders": true
  },
  {
    "historical_artifact": "grindstone",
    "openscad_code": "// Historical Grindstone Artifact - OpenSCAD\n// Traditional hand-cranked sandstone wheel with wooden frame and trough\n\n$fn = 36; // Increase smoothness for realistic appearance\n\nmodule grindstone_assembly() {\n    // Main sandstone grinding wheel\n    color(\"burlywood\") {\n        // Wheel with realistic thickness and diameter\n        translate([0, 0, 15]) {\n            difference() {\n                cylinder(h = 20, d = 70, center = true);\n                // Central hole for axle\n                cylinder(h = 25, d = 12, center = true);\n            }\n            \n            // Historical groove pattern from years of sharpening\n            for (i = [1:5]) {\n                rotate([0, 0, i * 30]) {\n                    translate([25, 0, 0]) {\n                        cylinder(h = 3, d = 2, center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Iron crank handle with wooden grip\n    color(\"gray\") {\n        // Crank arm\n        translate([0, 0, 25]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h = 40, d = 8, center = true);\n                    // Handle offset\n                    translate([0, 20, 0]) {\n                        cylinder(h = 15, d = 10, center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Wooden crank handle grip\n    color(\"saddlebrown\") {\n        translate([0, 40, 25]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 20, d = 12, center = true);\n            }\n        }\n    }\n    \n    // Wooden support frame - left post\n    color(\"saddlebrown\") {\n        translate([-45, 0, 0]) {\n            difference() {\n                cube([10, 15, 60], center = true);\n                // Mortise joint for axle\n                translate([0, 0, 15]) {\n                    cube([12, 8, 12], center = true);\n                }\n            }\n        }\n        \n        // Right post\n        translate([45, 0, 0]) {\n            difference() {\n                cube([10, 15, 60], center = true);\n                translate([0, 0, 15]) {\n                    cube([12, 8, 12], center = true);\n                }\n            }\n        }\n        \n        // Base frame\n        translate([0, 0, -35]) {\n            cube([100, 20, 10], center = true);\n        }\n    }\n    \n    // Water trough below wheel\n    color(\"darkslategray\") {\n        translate([0, -15, -20]) {\n            difference() {\n                // Outer trough\n                cube([80, 15, 12], center = true);\n                // Inner cavity for water\n                translate([0, 2, 2]) {\n                    cube([75, 11, 8], center = true);\n                }\n            }\n        }\n    }\n    \n    // Historical maker's mark on frame\n    color(\"black\") {\n        translate([-45, -8, 15]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height = 1) {\n                    text(\"1789\", size = 4, halign = \"center\");\n                }\n            }\n        }\n    }\n    \n    // Iron reinforcement bands\n    color(\"gray\") {\n        // Bands around frame posts\n    for (z = [-15, 0, 15]) {\n        translate([-45, 0, z]) {\n            difference() {\n                cube([12, 17, 3], center = true);\n                cube([8, 13, 4], center = true);\n            }\n        }\n        translate([45, 0, z]) {\n            difference() {\n                cube([12, 17, 3], center = true);\n                cube([8, 13, 4], center = true);\n            }\n        }\n    }\n    }\n    \n    // Axle pin\n    color(\"gray\") {\n        translate([0, 0, 15]) {\n            cylinder(h = 100, d = 10, center = true);\n        }\n    }\n}\n\n// Assembly call\ngrindstone_assembly();",
    "renders": true
  },
  {
    "historical_artifact": "anvil",
    "openscad_code": "// Historical Anvil Artifact - Realistic Style\n// Dimensions: ~80mm x 30mm x 45mm\n\n// Base color for iron/steel\ncolor([0.3, 0.3, 0.35]) {\n\n// Main anvil body\nmodule anvil_body() {\n    // Base - wider at bottom for stability\n    translate([0, -5, 0]) {\n        // Main base block\n        cube([50, 25, 15], center=true);\n        \n        // Tapered sides\n        for(i = [-1, 1]) {\n            translate([i * 20, 0, 0]) {\n                rotate([0, 0, i * 10]) {\n                    cube([10, 25, 15], center=true);\n                }\n            }\n        }\n    }\n    \n    // Main working surface\n    translate([0, 0, 15]) {\n        difference() {\n            cube([45, 22, 12], center=true);\n            \n            // Horn taper - cutout for horn transition\n            translate([20, 0, 0]) {\n                rotate([0, 0, 30]) {\n                    cube([25, 15, 15], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Anvil horn\nmodule horn() {\n    translate([25, 0, 15]) {\n        rotate([0, -90, 0]) {\n            // Main horn cone\n            cylinder(h=30, r1=12, r2=2, center=true);\n            \n            // Horn tip detail\n            translate([0, 0, 16]) {\n                sphere(d=4);\n            }\n        }\n    }\n}\n\n// Cutting table (back of anvil)\nmodule cutting_table() {\n    translate([-22, 0, 15]) {\n        // Square cutting table\n        cube([12, 18, 8], center=true);\n        \n        // Decorative chamfer\n        difference() {\n            cube([12, 18, 8], center=true);\n            translate([0, 0, 4]) {\n                cube([10, 16, 8], center=true);\n            }\n        }\n    }\n}\n\n// Hardie hole (square hole for tools)\nmodule hardie_hole() {\n    translate([-10, 0, 15]) {\n        rotate([0, 0, 0]) {\n            cube([5, 5, 12], center=true);\n        }\n    }\n}\n\n// Pritchel hole (round hole)\nmodule pritchel_hole() {\n    translate([5, 0, 15]) {\n        rotate([0, 0, 0]) {\n            cylinder(h=12, d=4, center=true);\n        }\n    }\n}\n\n// Decorative maker's mark\nmodule makers_mark() {\n    translate([0, 10, 28]) {\n        // Raised border\n        cube([8, 3, 1], center=true);\n        \n        // Simple cross pattern\n        for(i = [-1, 1]) {\n            translate([i * 2, 0, 0.6]) {\n                cube([1, 2.5, 0.5], center=true);\n            }\n            translate([0, i * 1, 0.6]) {\n                cube([6, 1, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Base mounting holes\nmodule mounting_holes() {\n    translate([0, -5, 0]) {\n        for(x = [-15, 15]) {\n            for(y = [-8, 8]) {\n                translate([x, y, -7.5]) {\n                    cylinder(h=15, d=3, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the anvil\nunion() {\n    // Main components\n    anvil_body();\n    horn();\n    cutting_table();\n    \n    // Holes (subtracted)\n    difference() {\n        union(); // Placeholder for boolean operations\n        hardie_hole();\n        pritchel_hole();\n        mounting_holes();\n    }\n    \n    // Decorative elements\n    makers_mark();\n}\n\n// Add slight weathering/wear marks\nfor(i = [1:5]) {\n    translate([rand(-20, 20), rand(-10, 10), rand(20, 25)]) {\n        rotate([0, 0, rand(0, 360)]) {\n            color([0.25, 0.25, 0.3])\n            cube([rand(1, 3), rand(1, 2), 0.2], center=true);\n        }\n    }\n}\n}",
    "renders": true
  },
  {
    "historical_artifact": "tongs",
    "openscad_code": "// Historical Roman Iron Tongs with decorative scrollwork\n// Medium complexity for 3D printing - approximately 80mm length\n\n$fn = 32;  // Smooth curves for printing\n\n// Main color - aged iron\ncolor([0.27, 0.25, 0.24]) union() {\n    \n    // Left tong arm\n    translate([0, 0, 0]) left_arm();\n    \n    // Right tong arm (mirrored)\n    translate([0, 0, 0]) mirror([1, 0, 0]) left_arm();\n    \n    // Central pivot rivet\n    translate([0, 0, 10]) cylinder(h=5, d=8);\n}\n\nmodule left_arm() {\n    // Pivot joint with decorative boss\n    difference() {\n        translate([0, 0, 10]) cylinder(h=15, d=20);\n        translate([0, 0, 10]) cylinder(h=16, d=6);\n    }\n    \n    // Lower jaw - forged iron with grip teeth\n    union() {\n        // Jaw base\n        translate([-30, -8, 0]) cube([30, 16, 10]);\n        \n        // Grip teeth pattern\n        for(i = [-20:5:-5]) {\n            translate([i, -8, 5]) cube([3, 16, 5]);\n        }\n        \n        // Decorative scroll end\n        translate([-35, 0, 5]) rotate([90, 0, 0]) \n            cylinder(h=8, d1=16, d2=8);\n    }\n    \n    // Upper arm - tapered forged bar\n    hull() {\n        // Thick at pivot\n        translate([0, -5, 15]) cube([10, 10, 30]);\n        \n        // Tapered handle end\n        translate([25, -3, 15]) cube([50, 6, 20]);\n    }\n    \n    // Handle grip with Roman vine pattern\n    for(i = [35:8:65]) {\n        rotate([0, 90, 0]) \n            translate([i, 0, 25]) cylinder(h=2, d=8);\n    }\n    \n    // Hanging loop at end\n    difference() {\n        translate([75, 0, 25]) sphere(d=12);\n        translate([75, 0, 25]) sphere(d=6);\n    }\n    \n    // Reinforcement band at handle junction\n    translate([25, 0, 25]) rotate([90, 0, 0]) \n        cylinder(h=3, d=15);\n}",
    "renders": true
  },
  {
    "historical_artifact": "vise",
    "openscad_code": "// Historical Blacksmith's Leg Vise - 18th Century Style\n// Medium complexity realistic model for 3D printing\n\n// Overall dimensions: ~80mm tall, ~60mm wide\n\n$fn = 32;\n\n// Main colors\ncolor_iron = [0.25, 0.25, 0.25];\ncolor_steel = [0.4, 0.4, 0.45];\ncolor_wood = [0.55, 0.35, 0.2];\n\nmodule main_body() {\n    color(color_iron)\n    union() {\n        // Main screw housing\n        translate([-5, 0, 30])\n            cube([20, 25, 40]);\n        \n        // Bottom support leg\n        translate([0, 10, 0])\n            cube([10, 5, 30]);\n    }\n}\n\nmodule screw_assembly() {\n    color(color_steel)\n    union() {\n        // Lead screw\n        translate([15, 12.5, 50])\n            rotate([0, 90, 0])\n                cylinder(h=40, d=6);\n        \n        // Screw handle\n        translate([50, 12.5, 50])\n            rotate([0, 90, 0])\n                cylinder(h=20, d=4);\n        \n        // Handle grip\n        translate([50, 12.5, 50])\n            sphere(d=8);\n    }\n}\n\nmodule jaw_plates() {\n    color(color_iron)\n    union() {\n        // Fixed jaw\n        translate([0, -2, 40])\n            cube([10, 4, 25]);\n        \n        // Moving jaw\n        translate([15, -2, 40])\n            cube([10, 4, 25]);\n        \n        // Jaw faces with serrations\n        for(i = [0:2]) {\n            translate([0, 2, 42 + i * 8])\n                cube([10, 0.5, 2]);\n            translate([15, 2, 42 + i * 8])\n                cube([10, 0.5, 2]);\n        }\n    }\n}\n\nmodule mounting_bracket() {\n    color(color_iron)\n    union() {\n        // Mounting plate\n        translate([-5, 12, 25])\n            cube([30, 3, 10]);\n        \n        // Mounting holes (for historical look)\n        for(pos = [[0, 13.5, 30], [20, 13.5, 30]]) {\n            translate(pos)\n                cylinder(h=5, d=3);\n        }\n    }\n}\n\nmodule decorative_elements() {\n    color(color_iron)\n    union() {\n        // Maker's mark plate\n        translate([8, 15, 50])\n            cube([6, 1, 8]);\n        \n        // Reinforcement ribs\n        translate([0, 0, 35])\n            cube([2, 25, 5]);\n        translate([13, 0, 35])\n            cube([2, 25, 5]);\n    }\n}\n\nmodule wood_pad() {\n    color(color_wood)\n    union() {\n        // Wooden jaw pad (period-appropriate)\n        translate([0, -3, 45])\n            cube([10, 1, 15]);\n        translate([15, -3, 45])\n            cube([10, 1, 15]);\n    }\n}\n\n// Assemble the vise\nmain_body();\nscrew_assembly();\njaw_plates();\nmounting_bracket();\ndecorative_elements();\nwood_pad();",
    "renders": true
  },
  {
    "historical_artifact": "clamp",
    "openscad_code": "// Roman wooden screw clamp (1st-3rd century AD)\n// Common woodworking clamp found in Roman workshops\n\n// Overall dimensions: 80 mm long, 30 mm wide, 40 mm high\n\n$fn = 32;\n\n// Wood color\nwood = [139/255, 69/255, 19/255];\n\n// Iron color\niron = [0.3, 0.3, 0.3];\n\nmodule clamp_body() {\n    color(wood)\n    difference() {\n        // Main beam\n        translate([0, 0, 5])\n            cube([70, 25, 10], center=true);\n        \n        // Slot for sliding jaw\n        translate([15, 0, 5])\n            cube([40, 18, 12], center=true);\n        \n        // Decorative groove\n        for(i = [-25, -15, -5, 5, 15, 25])\n            translate([i, 0, 10.5])\n                cube([2, 25, 1], center=true);\n    }\n}\n\nmodule fixed_jaw() {\n    color(wood)\n    union() {\n        // Jaw block\n        translate([-35, 0, 15])\n            cube([10, 25, 30], center=true);\n        \n        // Reinforcement wedge\n        translate([-35, 0, 30])\n            cube([15, 3, 5], center=true);\n    }\n}\n\nmodule sliding_jaw() {\n    color(wood)\n    union() {\n        // Main jaw body\n        translate([20, 0, 15])\n            cube([10, 25, 30], center=true);\n        \n        // Bottom support\n        translate([20, 0, 2.5])\n            cube([10, 22, 5], center=true);\n        \n        // Handle hole\n        translate([20, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=25, d=5, center=true);\n    }\n}\n\nmodule screw_mechanism() {\n    color(iron)\n    union() {\n        // Main screw\n        translate([0, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h=80, d=6, center=true);\n        \n        // Screw threads (simplified)\n        for(i = [-30:5:30])\n            translate([i, 0, 15])\n                rotate([0, 90, 0])\n                    cylinder(h=3, d=8, center=true);\n        \n        // Handle bar\n        translate([-40, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=30, d=8, center=true);\n        \n        // Handle grips\n        for(i = [-12, 12])\n            translate([-40, i, 15])\n                sphere(d=10);\n    }\n}\n\nmodule decorative_elements() {\n    color(wood)\n    union() {\n        // Roman numerals (workshop marks)\n        translate([-32, 10, 11])\n            cube([1, 1, 1]); // I\n        translate([-32, 12, 11])\n            cube([1, 3, 1]); // I\n        \n        // Maker's mark (dolphin symbol)\n        translate([32, -10, 11])\n            sphere(d=3);\n    }\n}\n\n// Assemble the clamp\nclamp_body();\nfixed_jaw();\nsliding_jaw();\nscrew_mechanism();\ndecorative_elements();",
    "renders": true
  },
  {
    "historical_artifact": "level",
    "openscad_code": "// Ancient Egyptian mason's leveling tool\n// Based on tomb paintings from Deir el-Medina, New Kingdom period (1550–1077 BCE)\n// Design incorporates palm-leaf motifs and hieroglyphic inscriptions\n\n// Overall dimensions (mm)\nlength = 80;\nwidth = 20;\nheight = 8;\nwall_thickness = 2;\n\n// Color definitions\nbronze_color = [0.8, 0.5, 0.2];\nwood_color = [0.4, 0.25, 0.1];\ngold_color = [1, 0.84, 0];\n\n// Main wooden body with tapered ends\nmodule level_body() {\n    color(wood_color)\n    difference() {\n        // Main rectangular body\n        cube([length, width, height], center=true);\n        \n        // Tapered ends\n        translate([length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=width, r1=5, r2=2, center=true);\n        translate([-length/2 + 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=width, r1=5, r2=2, center=true);\n    }\n}\n\n// Bronze sighting tube with decorative rings\nmodule sighting_tube() {\n    color(bronze_color)\n    difference() {\n        // Main tube\n        translate([0, 0, height/2 + 4])\n            cylinder(h=length - 10, r=3, center=true);\n        \n        // Hollow center\n        translate([0, 0, height/2 + 4])\n            cylinder(h=length - 8, r=2, center=true);\n        \n        // Decorative rings every 15mm\n        for(i = [-30:15:30]) {\n            translate([i, 0, height/2 + 4])\n                difference() {\n                    cylinder(h=2, r=3.5, center=true);\n                    cylinder(h=2.5, r=3.1, center=true);\n                }\n        }\n    }\n}\n\n// Palm leaf decorative motif on top\nmodule palm_motif() {\n    color(gold_color)\n    translate([0, 0, height/2 + 1])\n        for(i = [0:30:60]) {\n            rotate([0, 0, i])\n                translate([length/4, 0, 0])\n                    scale([1, 0.3, 0.1])\n                        sphere(r=8);\n        }\n}\n\n// Hieroglyphic inscription band\nmodule inscription_band() {\n    color(gold_color)\n    translate([0, 0, height/2 + 0.5])\n        for(i = [-30:5:30]) {\n            translate([i, 0, 0])\n                cube([3, 0.5, 0.5], center=true);\n        }\n}\n\n// Bronze end caps with lotus pattern\nmodule end_caps() {\n    color(bronze_color)\n    // Front cap\n    translate([length/2 - 2, 0, 0])\n        difference() {\n            cylinder(h=4, r=width/2, center=true);\n            cylinder(h=5, r=width/2 - wall_thickness, center=true);\n        }\n    \n    // Rear cap\n    translate([-length/2 + 2, 0, 0])\n        difference() {\n            cylinder(h=4, r=width/2, center=true);\n            cylinder(h=5, r=width/2 - wall_thickness, center=true);\n        }\n    \n    // Lotus petal details\n    for(side = [-1, 1]) {\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([side * (length/2 - 2), 0, 0])\n                    translate([0, width/2 * 0.8, 0])\n                        scale([0.5, 0.2, 0.5])\n                            sphere(r=3);\n        }\n    }\n}\n\n// Assembly\nlevel_body();\nsighting_tube();\npalm_motif();\ninscription_band();\nend_caps();",
    "renders": true
  },
  {
    "historical_artifact": "compass",
    "openscad_code": "// Historical brass pocket compass, late 19th century\n// Overall size ~75 mm diameter, 20 mm thick\n\n// Main body\nmodule compass_body() {\n    difference() {\n        cylinder(h = 20, d = 75, $fn = 120);  // main disk\n        translate([0, 0, 18])\n            cylinder(h = 5, d = 72, $fn = 120);  // hollow out inside\n    }\n}\n\n// Hinged lid\nmodule lid() {\n    difference() {\n        union() {\n            // lid disk\n            translate([0, 0, 20])\n                cylinder(h = 3, d = 75, $fn = 120);\n            \n            // hinge knuckles\n            for (i = [0:1]) {\n                translate([35 + i * 6, 0, 17])\n                    rotate([90, 0, 0])\n                        cylinder(h = 6, d = 3, $fn = 20);\n            }\n        }\n        \n        // sighting notch\n        translate([0, 36, 21])\n            cube([6, 12, 5], center = true);\n    }\n}\n\n// Compass rose engraving\nmodule rose() {\n    color(\"white\")\n    translate([0, 0, 17.5])\n    linear_extrude(height = 0.5) {\n        // outer ring\n        circle(d = 65, $fn = 120);\n        \n        // cardinal points\n        for (a = [0:90:270]) {\n            rotate(a) translate([0, 28, 0]) square([2, 8], center = true);\n        }\n        \n        // intercardinal points\n        for (a = [45:90:315]) {\n            rotate(a) translate([0, 28, 0]) square([1, 5], center = true);\n        }\n    }\n}\n\n// Magnetic needle\nmodule needle() {\n    color(\"FireBrick\")\n    translate([0, 0, 18])\n    union() {\n        // north arm\n        translate([0, 8.5, 0])\n            cube([2, 17, 1.5], center = true);\n        \n        // south arm\n        translate([0, -8.5, 0])\n            cube([2, 17, 1.5], center = true);\n        \n        // pivot cap\n        cylinder(h = 2, d = 3, $fn = 24);\n    }\n}\n\n// Ornamental engraving on lid\nmodule lid_engraving() {\n    color(\"goldenrod\")\n    translate([0, 0, 22.5])\n    linear_extrude(height = 0.3) {\n        circle(d = 8, $fn = 60);\n        \n        // decorative rays\n        for (a = [0:30:330]) {\n            rotate(a) translate([0, 20, 0]) square([1, 15], center = true);\n        }\n        \n        // maker's mark\n        translate([0, 0, 0])\n            text(\"T.G. & CO LONDON\", size = 3, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Brass ring around glass\nmodule bezel() {\n    color(\"goldenrod\")\n    difference() {\n        cylinder(h = 3, d = 70, $fn = 120);\n        cylinder(h = 4, d = 66, $fn = 120);\n    }\n}\n\n// Main assembly\ncompass_body();\nlid();\ntranslate([0, 0, 19])\n    bezel();\nrose();\nneedle();\nlid_engraving();",
    "renders": true
  },
  {
    "historical_artifact": "caliper",
    "openscad_code": "// Historical Roman bronze caliper artifact (1st-3rd century AD)\n// Based on archaeological finds with typical decorative elements\n\n// Overall dimensions: 85mm length when closed\n$fn = 32;\n\n// Main caliper body with characteristic Roman proportions\nmodule caliper_body() {\n    color([0.72, 0.45, 0.15])  // Bronze patina color\n    \n    // Main beam with gentle taper\n    difference() {\n        union() {\n            // Tapered rectangular beam\n            hull() {\n                translate([-40, -3, -2]) cube([80, 6, 4]);\n                translate([-40, -2.5, -1.5]) cube([80, 5, 3]);\n            }\n            \n            // Decorative end caps\n            translate([-42, 0, 0]) rotate([90, 0, 0]) cylinder(h=6, d1=8, d2=6);\n            translate([42, 0, 0]) rotate([90, 0, 0]) cylinder(h=6, d1=8, d2=6);\n        }\n        \n        // Engraved measurement markings (Roman numerals)\n        for(i = [1:8]) {\n            translate([-35 + i*8, -4, -1]) cube([0.5, 8, 2]);\n            translate([-35 + i*8, -1, -2]) rotate([0, 90, 0]) \n                text(str(\"V\"), size=2, height=0.5);\n        }\n    }\n}\n\n// Fixed jaw with classical Roman decorative elements\nmodule fixed_jaw() {\n    color([0.7, 0.43, 0.13])\n    \n    union() {\n        // Main jaw body\n        translate([-42, -8, -6]) cube([12, 16, 12]);\n        \n        // Decorative scrollwork on jaw\n        difference() {\n            translate([-42, -8, -6]) cube([12, 16, 12]);\n            for(i = [0:5]) {\n                translate([-38 + i*2, -4 + i*1.2, -5.5]) \n                    sphere(d=1.5);\n            }\n        }\n        \n        // Contact surface\n        translate([-30, -6, -4]) cube([2, 12, 8]);\n    }\n}\n\n// Movable jaw with characteristic Roman sliding mechanism\nmodule movable_jaw() {\n    color([0.73, 0.46, 0.16])\n    \n    union() {\n        // Jaw body with dovetail slide\n        difference() {\n            translate([10, -8, -6]) cube([15, 16, 12]);\n            \n            // Dovetail groove for sliding\n            translate([12, -5, -3]) \n                cube([11, 10, 6]);\n            translate([12, -6, -4]) \n                cube([11, 12, 8]);\n        }\n        \n        // Decorative finial\n        translate([25, 0, 8]) rotate([0, 0, 0]) \n            cylinder(h=5, d1=6, d2=4);\n        \n        // Contact surface aligned with fixed jaw\n        translate([10, -6, -4]) cube([2, 12, 8]);\n        \n        // Thumb adjustment screw\n        translate([18, 0, 12]) rotate([0, 0, 0])\n            union() {\n                cylinder(h=8, d=4);\n                translate([0, 0, 8]) sphere(d=6);\n            }\n    }\n}\n\n// Roman decorative vine pattern module\nmodule vine_pattern(x_pos) {\n    color([0.65, 0.38, 0.1])\n    for(i = [0:3]) {\n        translate([x_pos + i*3, -3, 2]) rotate([90, 0, i*30])\n            cylinder(h=2, d=0.8);\n        translate([x_pos + i*3 + 1.5, 3, 2]) rotate([90, 0, -i*30])\n            cylinder(h=2, d=0.8);\n    }\n}\n\n// Assembly of complete caliper\nunion() {\n    caliper_body();\n    fixed_jaw();\n    movable_jaw();\n    \n    // Add decorative vine patterns along beam\n    vine_pattern(-30);\n    vine_pattern(10);\n    \n    // Add small bronze rivets\n    color([0.75, 0.48, 0.18])\n    translate([-35, 0, 3]) sphere(d=1.5);\n    translate([0, 0, 3]) sphere(d=1.5);\n    translate([25, 0, 3]) sphere(d=1.5);\n}",
    "renders": true
  },
  {
    "historical_artifact": "rule",
    "openscad_code": "// Medieval Wooden Ruler with Brass Inlays - Historical Artifact\n// 15th Century measuring tool used by craftsmen and merchants\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main dimensions\nruler_length = 80;\nruler_width = 15;\nruler_thickness = 3;\nhandle_length = 20;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255];\nbrass_color = [181/255, 166/255, 66/255];\ndark_wood = [101/255, 67/255, 33/255];\n\n// Main ruler body\nmodule ruler_body() {\n    color(wood_color)\n    difference() {\n        // Main wooden plank\n        cube([ruler_length, ruler_width, ruler_thickness]);\n        \n        // Rounded edges for worn appearance\n        translate([-1, -1, -1])\n            cube([ruler_length + 2, 2, ruler_thickness + 2]);\n        translate([-1, ruler_width - 1, -1])\n            cube([ruler_length + 2, 2, ruler_thickness + 2]);\n    }\n}\n\n// Brass measurement inlays\nmodule brass_inlays() {\n    color(brass_color)\n    for(i = [0:4]) {\n        translate([10 + i * 15, 2, ruler_thickness])\n            cube([1, 11, 1]);\n        translate([17.5 + i * 15, 2, ruler_thickness])\n            cube([1, 11, 1]);\n    }\n    \n    // Decorative brass end caps\n    translate([0, 0, 0])\n        cube([2, ruler_width, ruler_thickness + 1]);\n    translate([ruler_length - 2, 0, 0])\n        cube([2, ruler_width, ruler_thickness + 1]);\n}\n\n// Engraved Roman numerals\nmodule engravings() {\n    color(dark_wood) {\n        // I marks\n        for(i = [0:4]) {\n            translate([11 + i * 15, 8, ruler_thickness - 0.5])\n                cube([0.5, 4, 0.5]);\n        }\n        \n        // V marks\n        for(i = [0:4]) {\n            translate([18 + i * 15, 8, ruler_thickness - 0.5]) {\n                cube([0.5, 4, 0.5]);\n                translate([1, 0, 0])\n                    cube([0.5, 4, 0.5]);\n                translate([0.5, 2, 0])\n                    cube([0.5, 2, 0.5]);\n            }\n        }\n    }\n}\n\n// Worn handle with grip marks\nmodule handle() {\n    color(wood_color)\n    difference() {\n        // Handle base\n        translate([-handle_length, 2, 0])\n            cube([handle_length, ruler_width - 4, ruler_thickness]);\n        \n        // Grip grooves\n        for(i = [1:3]) {\n            translate([-i * 5 - 2, 2, ruler_thickness - 0.5])\n                cube([1, ruler_width - 4, 1]);\n        }\n    }\n    \n    // Brass reinforcement ring\n    color(brass_color)\n    translate([-handle_length - 1, 5, -1])\n        cylinder(h = ruler_thickness + 2, r = 5);\n}\n\n// Maker's mark stamp\nmodule makers_mark() {\n    color(dark_wood)\n    translate([ruler_length/2, ruler_width/2, ruler_thickness - 0.3])\n        cylinder(h = 0.3, r = 3);\n    \n    // Cross symbol\n    color(brass_color)\n    translate([ruler_length/2 - 1.5, ruler_width/2 - 0.5, ruler_thickness])\n        cube([3, 1, 0.5]);\n    translate([ruler_length/2 - 0.5, ruler_width/2 - 1.5, ruler_thickness])\n        cube([1, 3, 0.5]);\n}\n\n// Assembly\nunion() {\n    ruler_body();\n    handle();\n    brass_inlays();\n    engravings();\n    makers_mark();\n}",
    "renders": true
  },
  {
    "historical_artifact": "rod",
    "openscad_code": "// Ancient Egyptian Scepter Rod - Medium Complexity Historical Artifact\n// Based on typical pharaonic was-scepter design elements\n\n// Main parameters\nrod_length = 80;\nrod_diameter = 6;\nhead_height = 15;\nbase_height = 8;\n\n// Colors\npapyrus_yellow = [0.9, 0.8, 0.5];\ngold = [0.8, 0.7, 0.2];\nbronze = [0.6, 0.4, 0.2];\n\n// Main rod body\nmodule rod_body() {\n    color(papyrus_yellow)\n    difference() {\n        // Main cylinder\n        cylinder(h=rod_length, d=rod_diameter, $fn=32);\n        \n        // Decorative grooves\n        for(i = [1:8]) {\n            translate([0, 0, i * 9])\n            rotate([0, 0, 45])\n            cylinder(h=1, d=rod_diameter + 0.5, $fn=4);\n        }\n    }\n}\n\n// Lotus flower head (top decoration)\nmodule lotus_head() {\n    color(gold)\n    union() {\n        // Central bud\n        translate([0, 0, rod_length + head_height/2])\n        sphere(d=head_height, $fn=32);\n        \n        // Petals around bud\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([head_height/2.5, 0, rod_length + head_height/3])\n            rotate([45, 0, 0])\n            scale([1, 0.6, 1.5])\n            sphere(d=head_height/2, $fn=16);\n        }\n    }\n}\n\n// Decorative collar below head\nmodule collar() {\n    color(bronze)\n    difference() {\n        cylinder(h=4, d=rod_diameter + 4, $fn=32);\n        cylinder(h=4.1, d=rod_diameter + 1, $fn=32);\n    }\n}\n\n// Hieroglyphic inscriptions\nmodule hieroglyphs() {\n    color([0.3, 0.2, 0.1])\n    for(i = [0:3]) {\n        translate([rod_diameter/2 + 0.1, 0, 15 + i * 15])\n        rotate([0, 90, 0])\n        linear_extrude(height=0.5) {\n            // Simple ankh symbol\n            translate([0, 0, 0])\n            union() {\n                circle(d=2);\n                translate([0, -1.5, 0])\n                square([0.5, 3]);\n                translate([0, -3, 0])\n                square([3, 0.5]);\n            }\n        }\n    }\n}\n\n// Base with stepped design\nmodule stepped_base() {\n    color(bronze)\n    union() {\n        // Bottom step\n        cylinder(h=base_height, d=rod_diameter + 8, $fn=32);\n        \n        // Middle step\n        translate([0, 0, base_height/3])\n        cylinder(h=base_height/3, d=rod_diameter + 6, $fn=32);\n        \n        // Top step\n        translate([0, 0, 2*base_height/3])\n        cylinder(h=base_height/3, d=rod_diameter + 4, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0])\n    stepped_base();\n    \n    // Rod body\n    translate([0, 0, base_height])\n    rod_body();\n    \n    // Collar\n    translate([0, 0, rod_length - 2])\n    collar();\n    \n    // Lotus head\n    lotus_head();\n    \n    // Hieroglyphs\n    hieroglyphs();\n}",
    "renders": true
  },
  {
    "historical_artifact": "staff",
    "openscad_code": "// Egyptian ceremonial staff based on ancient pharaoh's 'was-sceptre'\n// Overall height 100mm, built for 3D printing (no overhangs >45°)\n\n$fn = 64;\n\n// Main colors\ncolor_bronze = [0.55, 0.37, 0.22];\ncolor_gold   = [0.83, 0.69, 0.22];\ncolor_faience = [0.1, 0.55, 0.65];\n\n// Shaft\nmodule shaft() {\n    color(color_bronze)\n    linear_extrude(height = 70, center = false, convexity = 10)\n    for (i = [0:2])\n        translate([0, i*0.5, 0])\n        circle(d = 6 - i*0.1);\n}\n\n// Spiral wrap decoration on shaft\nmodule spiral_wrap() {\n    color(color_gold)\n    for (a = [0:45:360*3]) {\n        rotate([90, 0, a])\n        translate([0, 3, a/5])\n        cylinder(h = 3, d = 0.8, center = true);\n    }\n}\n\n// Head - stylized Set animal head\nmodule head() {\n    color(color_bronze)\n    union() {\n        // Snout\n        translate([0, 0, 70])\n        cylinder(h = 15, d1 = 3, d2 = 5);\n        \n        // Main head\n        translate([0, 0, 83])\n        sphere(d = 12);\n        \n        // Ears\n        for (x = [-4, 4]) {\n            translate([x, 0, 87])\n            rotate([0, 30*sign(x), 0])\n            scale([1, 0.5, 2])\n            sphere(d = 3);\n        }\n    }\n}\n\n// Forked bottom\nmodule fork() {\n    color(color_bronze)\n    difference() {\n        cylinder(h = 15, d = 6);\n        translate([0, 0, -1])\n        cylinder(h = 17, d = 4);\n    }\n    \n    // Fork prongs\n    for (a = [-60, 0, 60]) {\n        rotate([0, 0, a])\n        translate([0, 2.5, 7])\n        cylinder(h = 8, d = 1.5);\n    }\n}\n\n// Hieroglyphic inscriptions\nmodule inscriptions() {\n    color(color_faience)\n    for (h = [20:15:65]) {\n        translate([3, 0, h])\n        rotate([0, 90, 0])\n        linear_extrude(height = 0.5)\n        text(\"𓂀\", size = 3, halign = \"center\");\n    }\n}\n\n// Assembly\nunion() {\n    shaft();\n    spiral_wrap();\n    head();\n    \n    translate([0, 0, -15])\n    fork();\n    \n    inscriptions();\n}",
    "renders": true
  },
  {
    "historical_artifact": "plumb",
    "openscad_code": "// Historical Roman plumb bob (plumbum) - 1st century AD style\n// Based on archaeological finds from Pompeii and Herculaneum\n\n// Overall dimensions for 3D printing\ntotal_length = 85;\nbob_height = 45;\nbob_diameter = 25;\nstring_length = 40;\nloop_height = 8;\n\n// Main module for the complete plumb bob assembly\nmodule roman_plumb_bob() {\n    color(\"bronze\") {\n        union() {\n            // Main conical body with decorative rings\n            difference() {\n                // Basic conical shape\n                cylinder(h=bob_height, r1=bob_diameter/2, r2=0.5, $fn=64);\n                \n                // Decorative rings carved into the surface\n                for (i = [1:3]) {\n                    translate([0, 0, i * 8 + 5])\n                        cylinder(h=1.5, r1=bob_diameter/2 - 1, r2=bob_diameter/2 - 1, $fn=64);\n                }\n                \n                // Central hole for the string channel\n                translate([0, 0, -1])\n                    cylinder(h=bob_height + 2, r=1.5, $fn=32);\n            }\n            \n            // Top attachment loop\n            translate([0, 0, bob_height])\n                difference() {\n                    // Main loop body\n                    cylinder(h=loop_height, r1=6, r2=6, $fn=32);\n                    \n                    // String hole through loop\n                    rotate([90, 0, 0])\n                        cylinder(h=14, r=2, $fn=32);\n                }\n            \n            // Decorative collar below loop\n            translate([0, 0, bob_height - 2])\n                cylinder(h=4, r1=7, r2=5, $fn=32);\n            \n            // Inscription band\n            translate([0, 0, bob_height / 2])\n                difference() {\n                    cylinder(h=6, r1=bob_diameter/2 + 0.5, r2=bob_diameter/2 + 0.5, $fn=64);\n                    \n                    // Raised dot pattern typical of Roman decorative work\n                    for (angle = [0:30:330]) {\n                        rotate([0, 0, angle])\n                            translate([bob_diameter/2 - 1, 0, 1.5])\n                                cube([2, 2, 3], center=true);\n                    }\n                }\n            \n            // Point reinforcement collar\n            translate([0, 0, 2])\n                cylinder(h=4, r1=3, r2=2, $fn=32);\n        }\n    }\n    \n    // String representation (for display only)\n    color(\"tan\") {\n        translate([0, 0, bob_height + loop_height])\n            cylinder(h=string_length, r=1, $fn=16);\n    }\n}\n\n// Create the complete assembly\nroman_plumb_bob();",
    "renders": true
  },
  {
    "historical_artifact": "bob",
    "openscad_code": "// Historical Bob Weight - Medieval Style\n// Based on 14th century trade weights used in marketplaces\n\n// Main parameters\nbase_diameter = 45;\nheight = 55;\nstem_diameter = 8;\nhandle_height = 15;\nhandle_width = 25;\ninscription_depth = 0.5;\n\n// Main body - traditional bulbous shape\nmodule main_body() {\n    color(\"Bronze\") \n    difference() {\n        // Create bulbous shape using scaled spheres\n        union() {\n            // Upper bulb\n            translate([0, 0, height * 0.7]) \n                scale([1, 1, 0.8]) \n                sphere(d = base_diameter * 0.9, $fn = 50);\n            \n            // Lower bulb\n            translate([0, 0, height * 0.3]) \n                scale([1, 1, 0.9]) \n                sphere(d = base_diameter, $fn = 50);\n            \n            // Connect with cylinder\n            cylinder(h = height * 0.4, d1 = base_diameter * 0.85, d2 = base_diameter * 0.9, $fn = 50);\n        }\n        \n        // Hollow center for weight accuracy\n        translate([0, 0, -1]) \n            cylinder(h = height + 2, d = base_diameter * 0.5, $fn = 50);\n    }\n}\n\n// Crown-style top with verification marks\nmodule crown_top() {\n    color(\"Bronze\") {\n        // Crown base\n        cylinder(h = 5, d = base_diameter * 0.7, $fn = 50);\n        \n        // Decorative crown points\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) \n                translate([base_diameter * 0.25, 0, 5]) \n                    cylinder(h = 8, d1 = 6, d2 = 3, $fn = 8);\n        }\n        \n        // Verification stamp\n        translate([0, 0, 12]) \n            color(\"DarkGray\") \n            cube([8, 8, 1], center = true);\n    }\n}\n\n// Handle with period-appropriate styling\nmodule handle() {\n    color(\"Bronze\") \n    union() {\n        // Main handle arch\n        translate([0, 0, height + 10]) \n            rotate([90, 0, 0]) \n            difference() {\n                // Outer handle\n                cylinder(h = handle_width, d = stem_diameter + 4, $fn = 20);\n                // Inner hole\n                translate([0, 0, -1]) \n                    cylinder(h = handle_width + 2, d = stem_diameter, $fn = 20);\n            }\n        \n        // Support struts\n        for(side = [-1, 1]) {\n            translate([side * handle_width/2, 0, height + 10]) \n                rotate([0, 90, 0]) \n                cylinder(h = 10, d = stem_diameter, $fn = 8);\n        }\n    }\n}\n\n// Period-appropriate inscription band\nmodule inscription_band() {\n    color(\"Bronze\") \n    difference() {\n        // Band around middle\n        translate([0, 0, height * 0.45]) \n            cylinder(h = 8, d = base_diameter * 0.95, $fn = 50);\n        \n        // Inscription grooves\n        for(angle = [0:30:330]) {\n            rotate([0, 0, angle]) \n                translate([base_diameter * 0.47, 0, height * 0.45]) \n                    cube([inscription_depth, 2, 8], center = true);\n        }\n    }\n}\n\n// Accuracy marks and guild symbols\nmodule verification_marks() {\n    color(\"DarkGray\") \n    union() {\n        // Guild mark - cross\n        translate([base_diameter * 0.25, 0, height * 0.2]) \n            union() {\n                cube([10, 2, 1], center = true);\n                cube([2, 10, 1], center = true);\n            }\n        \n        // Year mark\n        translate([-base_diameter * 0.25, 0, height * 0.2]) \n            rotate([90, 0, 0]) \n            linear_extrude(height = 1) \n            text(\"MCCCLXXV\", size = 4, halign = \"center\");\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    \n    translate([0, 0, height * 0.9]) \n        crown_top();\n    \n    handle();\n    \n    inscription_band();\n    \n    verification_marks();\n}",
    "renders": true
  },
  {
    "historical_artifact": "axe",
    "openscad_code": "// Viking Bearded Axe (10th century style) - OpenSCAD Model\n// 3D printable historical artifact with realistic styling\n\n// Overall dimensions: ~75mm length, ~35mm height\naxe_color = [0.3, 0.3, 0.3];  // Dark iron/steel color\nhandle_color = [0.4, 0.2, 0.1];  // Weathered wood\n\n// Main assembly\nunion() {\n    // Axe head\n    color(axe_color) {\n        // Main blade body\n        translate([0, 0, 15]) {\n            difference() {\n                // Blade core\n                union() {\n                    // Upper blade section\n                    translate([0, -8, 0]) {\n                        cube([20, 16, 6], center=true);\n                    }\n                    \n                    // Extended beard\n                    translate([-15, -8, -2]) {\n                        cube([25, 12, 4], center=true);\n                    }\n                    \n                    // Eye socket for handle\n                    translate([12, 0, 0]) {\n                        cylinder(h=8, r=6, center=true);\n                    }\n                }\n                \n                // Taper the blade edges\n                translate([0, -12, 2]) {\n                    rotate([0, 0, -15]) {\n                        cube([30, 20, 8], center=true);\n                    }\n                }\n                \n                // Cutting edge bevel\n                translate([-20, 0, 2]) {\n                    rotate([0, 0, -25]) {\n                        cube([40, 25, 8], center=true);\n                    }\n                }\n                \n                // Eye socket hole\n                translate([12, 0, 0]) {\n                    cylinder(h=10, r=3.5, center=true);\n                }\n            }\n        }\n        \n        // Decorative rivets\n        for(i = [-1, 1]) {\n            translate([12, i * 4, 4]) {\n                sphere(r=1.5);\n            }\n        }\n        \n        // Engraved rune decoration\n        translate([5, 0, 18]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height=0.5) {\n                    text(\"ᚦ\", size=4, font=\"serif\");\n                }\n            }\n        }\n    }\n    \n    // Wooden handle\n    color(handle_color) {\n        handle();\n    }\n}\n\n// Handle module with grip texture\nmodule handle() {\n    union() {\n        // Main handle shaft\n        translate([12, 0, -15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=45, r1=3.5, r2=3, center=false);\n            }\n        }\n        \n        // Handle grip rings\n        for(i = [0:3]) {\n            translate([12, 0, -20 - i * 8]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=2, r=4, center=false);\n                        cylinder(h=2.2, r=3.2, center=false);\n                    }\n                }\n            }\n        }\n        \n        // Butt cap\n        translate([12, 0, -35]) {\n            sphere(r=4.5);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "hatchet",
    "openscad_code": "// Viking Hatchet - Historical Artifact\n// Based on 10th century Viking bearded axe\n\n// Parameters\nblade_length = 35;\nblade_height = 25;\nhandle_length = 80;\nhandle_diameter = 8;\nsocket_length = 20;\nsocket_diameter = 10;\n\n// Main assembly\nunion() {\n    // Axe blade\n    translate([handle_length/2 + 5, 0, 0]) \n        color(\"silver\") \n        axe_blade();\n    \n    // Handle\n    translate([0, 0, 0]) \n        color(\"saddlebrown\") \n        handle();\n    \n    // Socket\n    translate([handle_length - socket_length/2, 0, 0]) \n        color(\"silver\") \n        socket();\n    \n    // Decorative inlays on blade\n    translate([handle_length/2 + 15, 0, blade_height/2]) \n        color(\"gold\") \n        inlays();\n}\n\nmodule axe_blade() {\n    difference() {\n        // Main blade body\n        union() {\n            // Bearded blade shape\n            scale([1, 1.2, 0.3]) \n                cube([blade_length, blade_height, 5], center=true);\n            \n            // Curved cutting edge\n            translate([blade_length/2, 0, -2.5]) \n                rotate([0, 90, 0]) \n                    cylinder(h=blade_height*1.2, r=2, center=true);\n        }\n        \n        // Hollow grind\n        translate([blade_length/4, 0, 0]) \n            scale([0.7, 0.9, 0.6]) \n                cube([blade_length, blade_height, 6], center=true);\n        \n        // Edge bevel\n        translate([blade_length/2 + 1, 0, -1]) \n            rotate([0, 90, 0]) \n                cylinder(h=blade_height*1.2, r=0.5, center=true);\n    }\n    \n    // Decorative pattern\n    for(i = [-1:1]) {\n        translate([i*10, 0, blade_height/2 + 0.1]) \n            color(\"silver\") \n            cube([2, 2, 0.5], center=true);\n    }\n}\n\nmodule handle() {\n    // Main handle with taper\n    hull() {\n        translate([0, 0, 0]) \n            cylinder(h=handle_length, r=handle_diameter/2, center=false);\n        translate([0, 0, handle_length]) \n            cylinder(h=1, r=handle_diameter/3, center=false);\n    }\n    \n    // Grip texture\n    for(i = [0:5:handle_length-5]) {\n        translate([0, 0, i]) \n            difference() {\n                cylinder(h=3, r=handle_diameter/2 + 0.5, center=false);\n                cylinder(h=3, r=handle_diameter/2 - 0.5, center=false);\n            }\n    }\n}\n\nmodule socket() {\n    // Socket for handle\n    difference() {\n        cylinder(h=socket_length, r=socket_diameter/2, center=true);\n        cylinder(h=socket_length + 1, r=handle_diameter/2 - 0.5, center=true);\n    }\n    \n    // Reinforcement ring\n    translate([0, 0, socket_length/2]) \n        cylinder(h=2, r=socket_diameter/2 + 1, center=true);\n}\n\nmodule inlays() {\n    // Runic inlay pattern\n    for(i = [0:30:360]) {\n        rotate([0, 0, i]) \n            translate([5, 0, 0]) \n                rotate([90, 0, 0]) \n                    cylinder(h=0.5, r=0.5, center=true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "mallet",
    "openscad_code": "// Historical wooden mallet with bronze ring reinforcements\n// Based on medieval carpentry mallets found in European excavations\n\n// Overall scale factor\nscale_factor = 0.7;\n\n// Main mallet body dimensions\nhandle_length = 40 * scale_factor;\nhandle_diameter = 8 * scale_factor;\nhead_length = 25 * scale_factor;\nhead_width = 15 * scale_factor;\nhead_height = 12 * scale_factor;\n\n// Bronze ring dimensions\nring_thickness = 1.2 * scale_factor;\nring_width = 4 * scale_factor;\n\n// Decorative elements\ninscription_depth = 0.3 * scale_factor;\nwedge_length = 6 * scale_factor;\nwedge_width = 3 * scale_factor;\n\n// Colors\nwood_color = [0.45, 0.32, 0.22];\nbronze_color = [0.72, 0.45, 0.2];\n\n// Create the handle with decorative rings\nmodule handle() {\n    color(wood_color) {\n        // Main handle shaft\n        translate([0, 0, -handle_length/2])\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Bronze reinforcement rings\n        for(i = [0:1]) {\n            translate([0, 0, -handle_length/2 + handle_length*0.3 + i*handle_length*0.4])\n                color(bronze_color)\n                    cylinder(h=ring_thickness, d=handle_diameter+1, $fn=32);\n        }\n        \n        // Handle grip texture - simple rings\n        for(i = [1:4]) {\n            translate([0, 0, -handle_length/2 + i*handle_length/5])\n                difference() {\n                    cylinder(h=0.5, d=handle_diameter+0.3, $fn=32);\n                    cylinder(h=0.6, d=handle_diameter-0.5, $fn=32);\n                }\n        }\n    }\n}\n\n// Create the mallet head with traditional wedge connection\nmodule mallet_head() {\n    union() {\n        // Main head block\n        color(wood_color) {\n            translate([-head_length/2, 0, 0])\n                cube([head_length, head_width, head_height], center=true);\n            \n            // Rounded edges on striking faces\n            translate([-head_length/2, 0, 0])\n                difference() {\n                    cube([head_length, head_width, head_height], center=true);\n                    translate([head_length/2, 0, 0])\n                        scale([1, 1.2, 1.2])\n                            sphere(d=head_width*0.9, $fn=32);\n                    translate([-head_length/2, 0, 0])\n                        scale([1, 1.2, 1.2])\n                            sphere(d=head_width*0.9, $fn=32);\n                }\n        }\n        \n        // Bronze end caps\n        color(bronze_color) {\n            translate([head_length/2, 0, 0])\n                cylinder(h=ring_width, d=head_width+1, $fn=32);\n            translate([-head_length/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=ring_width, d=head_width+1, $fn=32);\n        }\n        \n        // Medieval maker's mark inscription\n        translate([0, head_width/2 - inscription_depth - 0.1, head_height/4])\n            rotate([90, 0, 0])\n                linear_extrude(height=inscription_depth)\n                    text(\"XIV\", size=2*scale_factor, font=\"serif:style=Bold\");\n    }\n}\n\n// Wedge for securing handle to head\nmodule wedge() {\n    color(wood_color) {\n        translate([0, -head_width/2 - wedge_length/2, 0])\n            rotate([0, 90, 0])\n                wedge_shape();\n    }\n}\n\nmodule wedge_shape() {\n    difference() {\n        cube([wedge_length, wedge_width, head_height*0.6], center=true);\n        translate([wedge_length/4, 0, 0])\n            cube([wedge_length/2, wedge_width+1, head_height*0.6+1], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2 + head_height/2])\n    mallet_head();\n\ntranslate([0, 0, 0])\n    handle();\n\ntranslate([0, head_width/2 - 0.5, head_height/2])\n    wedge();",
    "renders": true
  },
  {
    "historical_artifact": "gavel",
    "openscad_code": "// Historical Gavel - Traditional Judge's Mallet\n// Based on 19th century wooden gavel designs\n// Overall length: 80mm, printable in two pieces\n\n// Color definitions for realistic wood appearance\noak_color = \"#8B4513\";\nwalnut_color = \"#5D4E37\";\n\n// Main handle with traditional turned wood profile\nmodule handle() {\n    color(oak_color) {\n        // Handle shaft with gradual taper\n        cylinder(h = 50, r1 = 6, r2 = 4.5, $fn = 32);\n        \n        // Decorative collar near center\n        translate([0, 0, 20])\n            cylinder(h = 8, r = 7, $fn = 32);\n            \n        // Grip rings for better handling\n        for(i = [0:3]) {\n            translate([0, 0, 5 + i * 10])\n                difference() {\n                    cylinder(h = 1.5, r = 5.5, $fn = 32);\n                    cylinder(h = 1.5, r = 4.5, $fn = 32);\n                }\n        }\n        \n        // Flared end for balance\n        translate([0, 0, 48])\n            cylinder(h = 4, r1 = 4.5, r2 = 6, $fn = 32);\n    }\n}\n\n// Traditional mallet head with historical proportions\nmodule gavel_head() {\n    color(walnut_color) {\n        // Main rectangular head (traditional 2:1:1.5 ratio)\n        translate([0, 0, 0])\n            cube([30, 15, 22], center = true);\n            \n        // Rounded striking faces (traditional chamfered edges)\n        translate([15, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 15, r = 11, $fn = 32);\n                \n        translate([-15, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 15, r = 11, $fn = 32);\n                \n        // Historical inscription band\n        translate([0, 0, 12])\n            difference() {\n                cube([32, 17, 2], center = true);\n                // Decorative relief pattern\n                for(i = [-3:3]) {\n                    translate([i * 4, 0, -0.5])\n                        cube([2, 13, 1.5], center = true);\n                }\n            }\n            \n        // Traditional wedge detail on top\n        translate([0, 0, -13])\n            cube([6, 15, 2], center = true);\n    }\n}\n\n// Assembly with proper orientation for printing\ntranslate([0, 0, 0])\n    gavel_head();\n\ntranslate([0, 0, -35])\n    rotate([180, 0, 0])\n    handle();",
    "renders": true
  },
  {
    "historical_artifact": "mattock",
    "openscad_code": "// Historical Mattock Artifact - Iron Age Agricultural Tool\n// Medium complexity realistic model with weathered appearance\n\n// Overall dimensions: ~80mm length\n$fn = 32;  // Smooth curves for 3D printing\n\n// Colors for realistic appearance\ncolor_wood = [101/255, 67/255, 33/255];\ncolor_iron = [100/255, 100/255, 100/255];\ncolor_rust = [139/255, 69/255, 19/255];\n\n// Main module for the complete mattock\nmodule mattock() {\n    union() {\n        // Wooden handle with weathering\n        handle();\n        \n        // Iron head assembly\n        translate([0, 0, 55]) {\n            iron_head();\n        }\n    }\n}\n\n// Weathered wooden handle\nmodule handle() {\n    color(color_wood) {\n        // Main handle shaft with slight taper\n        cylinder(h1 = 55, h2 = 55, r1 = 3.5, r2 = 3.2, center = true);\n        \n        // Handle grip rings for better hold\n        for(i = [0:8]) {\n            translate([0, 0, -25 + i*6]) {\n                cylinder(h = 2, r = 3.8, center = true);\n            }\n        }\n        \n        // End knob for balance\n        translate([0, 0, -29]) {\n            sphere(r = 4);\n        }\n    }\n}\n\n// Iron head with pick and adze blades\nmodule iron_head() {\n    color(color_iron) {\n        union() {\n            // Central socket for handle\n            socket();\n            \n            // Pick blade (pointed end)\n            translate([0, 8, 0]) {\n                rotate([90, 0, 0]) {\n                    pick_blade();\n                }\n            }\n            \n            // Adze blade (flat chisel end)\n            translate([0, -8, 0]) {\n                rotate([-90, 0, 0]) {\n                    adze_blade();\n                }\n            }\n            \n            // Reinforcement ring\n            translate([0, 0, -5]) {\n                cylinder(h = 4, r = 6, center = true);\n            }\n        }\n    }\n    \n    // Add rust details\n    rust_details();\n}\n\n// Socket that fits on handle\nmodule socket() {\n    difference() {\n        // Outer socket\n        cylinder(h = 12, r = 5, center = true);\n        \n        // Inner hole for handle\n        cylinder(h = 14, r = 3.6, center = true);\n        \n        // Wedges for tightening\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle]) {\n                translate([0, 3.5, 0]) {\n                    cube([1, 3, 12], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Pick blade - tapered point for breaking soil\nmodule pick_blade() {\n    linear_extrude(height = 15, scale = [0.3, 0.3]) {\n        // Tapered blade profile\n        polygon(points=[\n            [0, 0], [3, 0], [2, 12], [0, 15], [-2, 12], [-3, 0]\n        ]);\n    }\n    \n    // Blade ridge for strength\n    translate([0, 0, 7.5]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 15, r1 = 0.5, r2 = 1, center = true);\n        }\n    }\n}\n\n// Adze blade - curved cutting edge\nmodule adze_blade() {\n    difference() {\n        // Main blade body\n        linear_extrude(height = 12) {\n            polygon(points=[\n                [0, 0], [4, 0], [5, -8], [4, -12], \n                [0, -14], [-4, -12], [-5, -8], [-4, 0]\n            ]);\n        }\n        \n        // Cutting edge bevel\n        translate([0, -6, 0]) {\n            rotate([0, 15, 0]) {\n                cube([12, 8, 15], center = true);\n            }\n        }\n    }\n}\n\n// Rust and weathering details\nmodule rust_details() {\n    color(color_rust) {\n        // Surface rust spots\n        for(pos = [[2, 3, 2], [-2, -3, 1], [1, -2, -1], [-1, 2, 0]]) {\n            translate(pos) {\n                sphere(r = 0.5);\n            }\n        }\n        \n        // Edge wear on blades\n        translate([0, 8, 8]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 3, r = 0.3, center = true);\n            }\n        }\n        \n        translate([0, -8, -7]) {\n            rotate([-90, 0, 0]) {\n                cylinder(h = 4, r = 0.4, center = true);\n            }\n        }\n    }\n}\n\n// Render the complete mattock\nmattock();",
    "renders": true
  },
  {
    "historical_artifact": "crowbar",
    "openscad_code": "// Historical wrought-iron crowbar artifact\n// Medieval period, roughly 12th-14th century\n// With decorative twisted shaft and chisel tip\n\n// Overall dimensions for 3D printing (80 mm long)\nbar_length = 80;\nbar_thickness = 6;\ncurve_radius = 25;\nhandle_length = 30;\n\n// Colors\ncolor_iron = [0.2, 0.2, 0.2];\ncolor_rust = [0.5, 0.2, 0.1];\n\n// Decorative twisted shaft module\nmodule twisted_shaft(length, radius, twists = 8) {\n    union() {\n        for (i = [0:twists-1]) {\n            rotate([0, 0, i * 360 / twists])\n            translate([0, 0, i * length / twists])\n            difference() {\n                cylinder(h = length/twists + 1, r = radius, $fn = 20);\n                rotate([0, 0, 45])\n                cube([radius*2, radius*0.5, length/twists + 2], center = true);\n            }\n        }\n    }\n}\n\n// Chisel tip end\nmodule chisel_tip() {\n    difference() {\n        union() {\n            // Main chisel body\n            cube([bar_thickness * 1.5, bar_thickness * 2.5, bar_thickness], center = true);\n            // Tapered edge\n            translate([0, bar_thickness * 1.25, 0])\n            rotate([0, 90, 0])\n            cylinder(h = bar_thickness * 1.5, r1 = bar_thickness, r2 = 0, $fn = 8);\n        }\n        // Edge bevel\n        translate([0, bar_thickness * 1.5, 0])\n        rotate([0, 0, 45])\n        cube([bar_thickness * 2, bar_thickness * 2, bar_thickness * 2], center = true);\n    }\n}\n\n// Hook end\nmodule hook_end() {\n    difference() {\n        union() {\n            // Main curve\n            translate([-curve_radius, 0, 0])\n            rotate([0, 90, 0])\n            rotate_extrude(angle = 90, $fn = 20)\n            translate([curve_radius, 0, 0])\n            circle(r = bar_thickness * 0.8);\n            \n            // Tapered claw\n            translate([-bar_thickness * 0.5, 0, -curve_radius])\n            rotate([0, 0, 45])\n            cube([bar_thickness * 1.2, bar_thickness * 0.8, bar_thickness * 2], center = true);\n            \n            // Reinforcement ring\n            translate([0, 0, -handle_length * 0.2])\n            cylinder(h = bar_thickness * 2, r1 = bar_thickness * 1.3, r2 = bar_thickness * 1.1, $fn = 16);\n        }\n        \n        // Nail slot\n        translate([-curve_radius * 0.7, 0, -curve_radius * 0.7])\n        cube([bar_thickness * 0.4, bar_thickness * 2, curve_radius * 1.2], center = true);\n    }\n}\n\n// Decorative ring details\nmodule decorative_rings() {\n    for (i = [1:3]) {\n        translate([0, 0, -handle_length * 0.3 * i])\n        difference() {\n            cylinder(h = bar_thickness * 0.4, r = bar_thickness * 1.1, $fn = 16);\n            cylinder(h = bar_thickness * 0.5, r = bar_thickness * 0.9, $fn = 16);\n        }\n    }\n}\n\n// Main assembly\ncolor(color_iron)\nunion() {\n    // Handle shaft\n    translate([0, 0, -handle_length])\n    twisted_shaft(handle_length, bar_thickness * 0.9, 12);\n    \n    // Central shaft\n    cylinder(h = bar_length - handle_length - curve_radius, r = bar_thickness, $fn = 16);\n    \n    // Decorative rings\n    translate([0, 0, -(bar_length - handle_length - curve_radius)])\n    decorative_rings();\n    \n    // Hook end\n    translate([0, 0, -(bar_length - curve_radius)])\n    hook_end();\n    \n    // Chisel tip\n    translate([0, 0, handle_length])\n    chisel_tip();\n}\n\n// Rust patina effects\ncolor(color_rust)\ntranslate([bar_thickness * 0.3, bar_thickness * 0.3, -handle_length * 0.5])\nsphere(r = bar_thickness * 0.2, $fn = 8);\n\ncolor(color_rust)\ntranslate([-bar_thickness * 0.2, -bar_thickness * 0.2, -handle_length * 0.7])\nsphere(r = bar_thickness * 0.15, $fn = 8);\n\n// Manufacturer's mark (simulated medieval maker's mark)\ncolor([0.1, 0.1, 0.1])\ntranslate([0, bar_thickness * 1.1, -handle_length * 0.4])\nrotate([90, 0, 0])\nlinear_extrude(height = 0.5)\ntext(\"X\", size = bar_thickness * 0.8, halign = \"center\", valign = \"center\");",
    "renders": true
  },
  {
    "historical_artifact": "wedge",
    "openscad_code": "// Bronze Age stone wedge - realistic historical artifact\n// Used for splitting wood in ancient woodworking\n\n// Overall dimensions for 3D printing\nwedge_length = 80;\nwedge_height = 25;\nwedge_width = 15;\n\n// Create the main wedge body with realistic proportions\nmodule wedge_body() {\n    difference() {\n        // Main tapered wedge shape\n        hull() {\n            // Tip - sharp point\n            translate([wedge_length-2, 0, 0])\n                cube([1, wedge_width, wedge_height], center=true);\n            \n            // Base - wider back\n            translate([0, 0, 0])\n                cube([4, wedge_width*1.2, wedge_height*1.1], center=true);\n        }\n        \n        // Carve out the striking surface depression\n        translate([-1, 0, wedge_height/4])\n            rotate([0, 90, 0])\n            cylinder(h=wedge_width*1.3, r1=8, r2=6, center=true);\n    }\n}\n\n// Ancient runic inscriptions on the sides\nmodule runic_inscriptions() {\n    color(\"burlywood\") {\n        // Left side runes\n        for(i = [1:3]) {\n            translate([wedge_length/4*i, -wedge_width/2-0.1, 0])\n                rotate([90, 0, 0])\n                cylinder(h=0.5, r=1.5, $fn=6);\n        }\n        \n        // Right side runes\n        for(i = [1:3]) {\n            translate([wedge_length/4*i, wedge_width/2+0.1, 0])\n                rotate([90, 0, 0])\n                cylinder(h=0.5, r=1.5, $fn=6);\n        }\n    }\n}\n\n// Wear patterns from use\nmodule use_wear() {\n    difference() {\n        // Main body\n        children();\n        \n        // Chips and dents from use\n        color(\"dimgray\") {\n            // Tip wear\n            translate([wedge_length-5, 0, wedge_height/2])\n                sphere(r=2);\n            \n            // Edge chips\n            for(i = [1:2]) {\n                translate([wedge_length/3*i, wedge_width/2, wedge_height/2])\n                    sphere(r=1.5);\n                translate([wedge_length/3*i, -wedge_width/2, wedge_height/2])\n                    sphere(r=1.5);\n            }\n        }\n    }\n}\n\n// Handle grip texture\nmodule grip_texture() {\n    color(\"saddlebrown\") {\n        // Horizontal grip lines\n        for(z = [-wedge_height/3:wedge_height/6:wedge_height/3]) {\n            for(y = [-wedge_width/2+2:wedge_width/8:wedge_width/2-2]) {\n                translate([-2, y, z])\n                    cube([2, 0.5, 0.5]);\n            }\n        }\n    }\n}\n\n// Assemble the complete wedge\nunion() {\n    // Main stone wedge with realistic stone color\n    color(\"darkgoldenrod\") {\n        use_wear() {\n            wedge_body();\n        }\n    }\n    \n    // Runic decorations\n    runic_inscriptions();\n    \n    // Grip area\n    grip_texture();\n    \n    // Leather wrapping remnants\n    color(\"sienna\") {\n        difference() {\n            // Leather strip\n            translate([-3, 0, -wedge_height/4])\n                cube([6, wedge_width*1.1, wedge_height/2]);\n            \n            // Holes for lacing\n            translate([-2, -wedge_width/2-1, 0])\n                rotate([90, 0, 0])\n                cylinder(h=6, r=1);\n            translate([-2, wedge_width/2+1, 0])\n                rotate([90, 0, 0])\n                cylinder(h=6, r=1);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "fulcrum",
    "openscad_code": "// Fulcrum artifact based on ancient Egyptian balance scales\n// Realistic style with medium complexity\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nbase_width = 40;\nbase_length = 60;\nbase_height = 8;\npillar_height = 35;\npillar_width = 12;\nfulcrum_arm_length = 45;\nfulcrum_diameter = 6;\ndecoration_radius = 3;\n\n// Color definitions\nbronze_color = \"#CD7F32\";\ngold_color = \"#FFD700\";\ndark_bronze = \"#8B4513\";\n\nmodule base_platform() {\n    color(bronze_color)\n    difference() {\n        // Main base\n        cube([base_width, base_length, base_height], center=true);\n        \n        // Decorative recesses on top\n        for(x = [-15, 0, 15])\n            translate([x, 0, base_height/2 - 0.1])\n                cube([8, 25, 2], center=true);\n    }\n    \n    // Decorative border pattern\n    color(dark_bronze)\n    for(x = [-base_width/2 + 3, base_width/2 - 3])\n        for(y = [-base_length/2 + 3, base_length/2 - 3])\n            translate([x, y, base_height/2 + 0.5])\n                cylinder(h=1, r=2, $fn=16);\n}\n\nmodule central_pillar() {\n    color(bronze_color)\n    union() {\n        // Main pillar\n        translate([0, 0, base_height/2 + pillar_height/2])\n            cube([pillar_width, pillar_width, pillar_height], center=true);\n        \n        // Decorative rings\n        color(gold_color)\n        for(h = [base_height + 8, base_height + 20, base_height + 30])\n            translate([0, 0, h])\n                cylinder(h=2, r=pillar_width/2 + 1, $fn=32);\n    }\n}\n\nmodule fulcrum_assembly() {\n    // Horizontal pivot bar\n    color(bronze_color)\n    translate([0, 0, base_height + pillar_height - 8])\n        rotate([0, 90, 0])\n            cylinder(h=fulcrum_arm_length + 10, r=fulcrum_diameter/2, center=true, $fn=32);\n    \n    // Central pivot point\n    color(gold_color)\n    translate([0, 0, base_height + pillar_height - 8])\n        sphere(r=fulcrum_diameter/2 + 1, $fn=32);\n    \n    // Decorative ends\n    color(dark_bronze)\n    for(x = [-fulcrum_arm_length/2, fulcrum_arm_length/2])\n        translate([x, 0, base_height + pillar_height - 8])\n            rotate([0, 90, 0])\n                cylinder(h=5, r1=fulcrum_diameter/2 + 1, r2=fulcrum_diameter/2 - 0.5, $fn=16);\n}\n\nmodule hieroglyphics() {\n    color(dark_bronze)\n    // Simple representation of hieroglyphics on base sides\n    for(side = [0, 1]) {\n        rotate([0, 0, side * 90])\n            for(i = [-2:2])\n                translate([0, base_length/2 - 1, base_height/2 + i*3])\n                    cube([2, 0.5, 2], center=true);\n    }\n}\n\nmodule support_braces() {\n    color(bronze_color)\n    // Diagonal supports for stability\n    for(angle = [45, -45]) {\n        rotate([0, 0, angle])\n            translate([0, 0, base_height/2 + 10])\n                cube([pillar_width/2, 20, 3], center=true);\n    }\n}\n\n// Assembly\nbase_platform();\ncentral_pillar();\nfulcrum_assembly();\nhieroglyphics();\nsupport_braces();",
    "renders": true
  },
  {
    "historical_artifact": "pulley",
    "openscad_code": "// Ancient Roman wooden pulley with bronze fittings - 3D printable\n// Based on archaeological finds from Pompeii\n\n// Overall dimensions (in mm)\nwheel_diameter = 70;\nwheel_thickness = 15;\naxle_diameter = 8;\naxle_length = 90;\nframe_height = 40;\nframe_width = 80;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255];\nbronze_color = [205/255, 127/255, 50/255];\niron_color = [105/255, 105/255, 105/255];\n\n// Wooden wheel with bronze hub\nmodule wheel() {\n    // Main wooden wheel\n    color(wood_color)\n    cylinder(h=wheel_thickness, d=wheel_diameter, $fn=64);\n    \n    // Bronze hub\n    color(bronze_color)\n    cylinder(h=wheel_thickness + 2, d=20, $fn=32);\n    \n    // Bronze rim reinforcement\n    color(bronze_color)\n    difference() {\n        cylinder(h=wheel_thickness + 1, d=wheel_diameter + 4, $fn=64);\n        cylinder(h=wheel_thickness + 2, d=wheel_diameter - 8, $fn=64);\n    }\n    \n    // Wooden spokes (12 spokes typical for Roman pulleys)\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([wheel_diameter/4, -2, -1])\n        color(wood_color)\n        cube([wheel_diameter/3, 4, wheel_thickness + 2]);\n    }\n    \n    // Central axle hole\n    translate([0, 0, -1])\n    color(iron_color)\n    cylinder(h=wheel_thickness + 2, d=axle_diameter + 2, $fn=32);\n}\n\n// Wooden frame with bronze fittings\nmodule frame() {\n    // Main wooden frame sides\n    color(wood_color) {\n        // Left side\n        translate([-frame_width/2 + 5, 0, -frame_height/2])\n        cube([10, frame_width/2, frame_height]);\n        \n        // Right side\n        translate([frame_width/2 - 15, 0, -frame_height/2])\n        cube([10, frame_width/2, frame_height]);\n        \n        // Base\n        translate([-frame_width/2 + 5, -20, -frame_height/2 - 5])\n        cube([frame_width - 20, 40, 5]);\n    }\n    \n    // Bronze corner brackets\n    color(bronze_color) {\n        // Front left\n        translate([-frame_width/2 + 5, 0, -frame_height/2])\n        cube([3, 5, 10]);\n        \n        // Front right\n        translate([frame_width/2 - 8, 0, -frame_height/2])\n        cube([3, 5, 10]);\n        \n        // Back left\n        translate([-frame_width/2 + 5, frame_width/2 - 5, -frame_height/2])\n        cube([3, 5, 10]);\n        \n        // Back right\n        translate([frame_width/2 - 8, frame_width/2 - 5, -frame_height/2])\n        cube([3, 5, 10]);\n    }\n}\n\n// Iron axle with bronze end caps\nmodule axle() {\n    // Main iron axle\n    color(iron_color)\n    cylinder(h=axle_length, d=axle_diameter, $fn=32);\n    \n    // Bronze end caps\n    color(bronze_color) {\n        translate([0, 0, -2])\n        cylinder(h=4, d=axle_diameter + 6, $fn=32);\n        \n        translate([0, 0, axle_length - 2])\n        cylinder(h=4, d=axle_diameter + 6, $fn=32);\n    }\n}\n\n// Rope groove detail\nmodule rope_groove() {\n    color(wood_color)\n    difference() {\n        cylinder(h=wheel_thickness, d=wheel_diameter, $fn=64);\n        \n        // Groove for rope\n        translate([0, 0, 5])\n        cylinder(h=wheel_thickness - 10, d=wheel_diameter - 10, $fn=64);\n        \n        // Rope channel\n        translate([0, 0, wheel_thickness/2 - 1])\n        cylinder(h=2, d=wheel_diameter - 20, $fn=64);\n    }\n}\n\n// Assembly\nmodule pulley_assembly() {\n    // Frame\n    frame();\n    \n    // Axle through frame\n    translate([0, frame_width/4, 0])\n    rotate([90, 0, 0])\n    axle();\n    \n    // Wheel on axle\n    translate([0, frame_width/4, 0])\n    rotate([90, 0, 0])\n    wheel();\n    \n    // Rope groove\n    translate([0, frame_width/4, 0])\n    rotate([90, 0, 0])\n    rope_groove();\n}\n\n// Main rendering\npulley_assembly();",
    "renders": true
  },
  {
    "historical_artifact": "sheave",
    "openscad_code": "// Historical Bronze Age Sheave (Pulley Wheel)\n// Realistic style with medium complexity\n// Based on archaeological findings from the Mediterranean (c. 1200 BCE)\n\n$fa = 2;\n$fs = 0.5;\n\n// Main parameters\nsheave_diameter = 80;\nsheave_thickness = 25;\naxle_hole_diameter = 12;\ngroove_depth = 8;\ngroove_width = 12;\n\n// Color for aged bronze\ncolor([0.6, 0.4, 0.2]) \n\n// Main sheave body\ndifference() {\n    // Outer wheel with decorative rim\n    union() {\n        // Central disk\n        cylinder(h = sheave_thickness, d = sheave_diameter);\n        \n        // Raised decorative rim on both sides\n        translate([0, 0, 0])\n            cylinder(h = sheave_thickness + 2, d = sheave_diameter + 4);\n        \n        // Inner reinforcement ring\n        translate([0, 0, sheave_thickness/2])\n            cylinder(h = 3, d = sheave_diameter - 10);\n    }\n    \n    // Central axle hole\n    translate([0, 0, -1])\n        cylinder(h = sheave_thickness + 2, d = axle_hole_diameter);\n    \n    // Rope groove\n    translate([0, 0, sheave_thickness/2 - groove_depth/2])\n        rotate([0, 90, 0])\n            cylinder(h = sheave_diameter + 2, d = groove_width, center = true);\n}\n\n// Decorative spokes (8 spokes typical for Bronze Age sheaves)\nmodule spoke() {\n    rotate([0, 0, 45]) {\n        translate([0, 0, sheave_thickness/2])\n            cube([sheave_diameter/2 - 15, 4, 2], center = true);\n    }\n}\n\n// Create 8 spokes\nfor (i = [0:7]) {\n    rotate([0, 0, i * 45]) {\n        translate([0, 0, 0])\n            spoke();\n        translate([0, 0, sheave_thickness - 2])\n            spoke();\n    }\n}\n\n// Bronze Age decorative elements - spiral patterns\nmodule spiral_decoration() {\n    for (j = [0:3]) {\n        rotate([0, 0, j * 90]) {\n            translate([sheave_diameter/2 - 8, 0, sheave_thickness/2 + 1])\n                scale([1, 0.5, 1])\n                    cylinder(h = 1, d = 6);\n            translate([sheave_diameter/2 - 12, 0, sheave_thickness/2 + 1])\n                scale([0.7, 0.7, 1])\n                    cylinder(h = 1, d = 4);\n        }\n    }\n}\n\n// Add spiral decorations on both sides\nspiral_decoration();\nmirror([0, 0, 1])\n    spiral_decoration();\n\n// Wear marks from rope usage\nmodule wear_mark(angle) {\n    translate([0, 0, sheave_thickness/2]) {\n        rotate([0, 0, angle]) {\n            translate([sheave_diameter/2 - groove_depth - 1, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, d = 2);\n        }\n    }\n}\n\n// Add wear marks around the groove\nfor (k = [0:15]) {\n    wear_mark(k * 22.5);\n}\n\n// Small casting imperfections for realism\nmodule casting_bump() {\n    translate([sheave_diameter/4, sheave_diameter/4, sheave_thickness/2])\n        sphere(d = 1.5);\n}\n\n// Random casting imperfections\ncasting_bump();\ntranslate([sheave_diameter/3, -sheave_diameter/5, sheave_thickness/2 + 3])\n    sphere(d = 1.2);\ntranslate([-sheave_diameter/3.5, sheave_diameter/6, sheave_thickness/2 - 3])\n    sphere(d = 1.8);",
    "renders": true
  },
  {
    "historical_artifact": "block",
    "openscad_code": "// Babylonian-style cuneiform clay tablet (ca. 1800 BCE)\n// Overall size: 75 mm × 50 mm × 25 mm\n\n// Base clay tablet block\nmodule tablet_body() {\n    translate([0, 0, 12.5])\n        cube([75, 50, 25], center=true);\n}\n\n// Wedge-shaped cuneiform stylus impression (single wedge)\nmodule cuneus(angle=0) {\n    rotate([0, 0, angle])\n        translate([0, 0, 1])\n        union() {\n            // Main triangular wedge body (no overhangs)\n            linear_extrude(height=2, convexity=2)\n                polygon([[0, 0], [2.5, 0], [1.25, 2]]);\n        }\n}\n\n// Row of horizontal wedges (typical sign fragment)\nmodule wedge_row(count=5, spacing=5) {\n    for(i=[0:count-1]) {\n        translate([i*spacing, 0, 0])\n            cuneus(0);\n    }\n}\n\n// Vertical wedge column\nmodule wedge_column(count=3, spacing=4) {\n    for(i=[0:count-1]) {\n        translate([0, -i*spacing, 0])\n            cuneus(90);\n    }\n}\n\n// Full inscription field\nmodule inscription() {\n    // Front face: Sumerian administrative text\n    translate([-30, 20, 13.5])\n        wedge_row(6, 5);\n    translate([-30, 15, 13.5])\n        wedge_row(4, 5);\n    translate([-30, 10, 13.5])\n        wedge_column(3, 4);\n    translate([-15, 10, 13.5])\n        wedge_row(3, 5);\n    translate([5, 20, 13.5])\n        wedge_column(4, 4);\n    translate([5, 5, 13.5])\n        wedge_row(5, 5);\n    \n    // Right edge continuation\n    translate([38, 0, 13.5])\n        rotate([0, 0, 90])\n            wedge_row(3, 5);\n    \n    // Back face seal impression area\n    translate([-20, -20, -13.5])\n        rotate([0, 180, 0])\n            wedge_row(2, 6);\n    translate([-10, -20, -13.5])\n        rotate([0, 180, 0])\n            wedge_column(2, 5);\n}\n\n// Rounded corners for clay tablet realism\nmodule rounded_corners() {\n    // Front top edge rounding\n    translate([-37.5, 25, 25])\n        rotate([90, 0, 0])\n            cylinder(h=75, r=2, $fn=20);\n    translate([37.5, 25, 25])\n        rotate([90, 0, 0])\n            cylinder(h=75, r=2, $fn=20);\n    \n    // Side edge rounding\n    translate([-37.5, 25, 12.5])\n        rotate([0, 90, 0])\n            cylinder(h=50, r=2, $fn=20);\n    translate([37.5, 25, 12.5])\n        rotate([0, 90, 0])\n            cylinder(h=50, r=2, $fn=20);\n}\n\n// Main assembly\ncolor(\"burlywood\")\nunion() {\n    // Core tablet\n    tablet_body();\n    \n    // Surface relief cuneiform impressions\n    color(\"saddlebrown\")\n    inscription();\n    \n    // Edge rounding details\n    rounded_corners();\n}",
    "renders": true
  },
  {
    "historical_artifact": "tackle",
    "openscad_code": "// Historical Roman Fishing Tackle – Lead Line-Sinker (Galea Lead)\n// Typical 1st–3rd century AD, found throughout the Empire\n// Cast-lead sinker with suspension eye and decorative “galea” (helmet) shape\n// Overall printable size ≈ 80 mm long\n\n$fn = 60;                // smooth curves\n\n// ---- colours ----\ncolor(\"darkslategray\") difference() {\n\n    // ---- main body, helmet-shaped lead weight ----\n    union() {\n        // central helmet dome\n        translate([0,0,8]) scale([1,1.2,1])\n            cylinder(h = 16, r1 = 15, r2 = 12);\n\n        // swept back “neck-guard” flare\n        translate([0,-15,0])\n            cube([30,20,8], center = true);\n    }\n\n    // ---- hollow inside for 3D-print material saving ----\n    // keep 2 mm walls\n    translate([0,0,8]) scale([0.7,0.7,0.8])\n        cylinder(h = 18, r1 = 15, r2 = 12);\n\n    // ---- suspension eye slot ----\n    // entrance cut\n    translate([0,0,25])\n        rotate([90,0,0])\n            cylinder(h = 12, r = 3.5);\n\n    // vertical slot for line\n    translate([-2,-2,0])\n        cube([4,20,28]);\n}\n\n// ---- reinforced eye loop ----\ntranslate([0,0,25])\n    rotate([90,0,0])\n        difference() {\n            // thick eye ring\n            cylinder(h = 4, r = 7, center = true);\n            // hole for line\n            cylinder(h = 5, r = 3.2, center = true);\n        }\n\n// ---- decorative knurled grip rings around body ----\nfor(z=[3:5:23])\n    translate([0,0,z])\n    difference() {\n        cylinder(h = 1.5, r = 16.5);\n        cylinder(h = 1.7, r = 15.5);\n    }\n\n// ---- small maker’s mark punch (raised dot pattern) ----\nmodule dot() translate([0,0,0.5]) sphere(r = 0.8);\ntranslate([0,16,10]) { dot(); translate([4,0,0]) dot(); translate([-4,0,0]) dot(); }\n\n// ---- tiny drainage hole at bottom for printing ----\ntranslate([0,0,0.5]) cylinder(h = 2, r = 1.5);",
    "renders": true
  },
  {
    "historical_artifact": "winch",
    "openscad_code": "// Medieval ship's capstan winch (15th century)\n// Used for raising anchors and cargo on carracks and caravels\n// Features wooden construction with iron banding and decorative carvings\n\n// Overall dimensions\nwinch_height = 60;\nwinch_base_diameter = 50;\nwinch_bar_length = 80;\n\n// Colors\nwood_color = \"#8B4513\";\niron_color = \"#2F2F2F\";\nbrass_color = \"#B87333\";\n\n// Base foundation\nmodule base_foundation() {\n    color(wood_color) {\n        // Main base cylinder\n        cylinder(h=8, d=winch_base_diameter, $fn=64);\n        \n        // Reinforcement ring at bottom\n        translate([0, 0, 0.5])\n            color(iron_color)\n            cylinder(h=2, d=winch_base_diameter + 2, $fn=64);\n    }\n}\n\n// Central drum with decorative carving bands\nmodule central_drum() {\n    color(wood_color) {\n        // Main drum cylinder\n        cylinder(h=25, d=25, center=true, $fn=32);\n        \n        // Decorative carved bands\n        for(i = [-1:1]) {\n            translate([0, 0, i * 8])\n                color(wood_color)\n                cylinder(h=2, d=27, $fn=32);\n        }\n        \n        // Iron band reinforcement\n        translate([0, 0, 12])\n            color(iron_color)\n            cylinder(h=1, d=28, $fn=32);\n    }\n}\n\n// Winch bars (cross-shaped for multiple sailors)\nmodule winch_bars() {\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle]) {\n            // Main wooden bar\n            color(wood_color) {\n                translate([0, winch_bar_length/4, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=winch_bar_length/2, d=6, $fn=16);\n                \n                // Tapered ends\n                translate([0, winch_bar_length/2 - 2, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=4, d1=6, d2=4, $fn=16);\n            }\n            \n            // Iron reinforcement at connection point\n            translate([0, 0, 0])\n                color(iron_color)\n                cylinder(h=8, d=12, $fn=32);\n            \n            // Brass decorative caps on bar ends\n            translate([0, winch_bar_length/2, 0])\n                color(brass_color)\n                sphere(d=5, $fn=16);\n        }\n    }\n}\n\n// Pawl mechanism for ratcheting\nmodule pawl_mechanism() {\n    translate([winch_base_diameter/2 - 5, 0, 15]) {\n        color(iron_color) {\n            // Pawl base\n            cube([10, 4, 8], center=true);\n            \n            // Pawl tooth\n            translate([5, 0, 4])\n                cube([4, 3, 2], center=true);\n        }\n        \n        // Pawl pivot pin\n        translate([0, 0, 0])\n            color(brass_color)\n            cylinder(h=12, d=2, $fn=16);\n    }\n}\n\n// Rope guide with historical scrollwork\nmodule rope_guide() {\n    translate([0, 0, 20]) {\n        color(iron_color) {\n            // Main guide loop\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=15, d=12, $fn=32);\n                    translate([0, 0, -1])\n                        cylinder(h=17, d=8, $fn=32);\n                }\n            \n            // Decorative scrollwork brackets\n            for(angle = [0:180:180]) {\n                rotate([0, 0, angle]) {\n                    translate([8, 0, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h=5, d=3, $fn=16);\n                    translate([6, 0, 3])\n                        sphere(d=4, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 4])\n    base_foundation();\n\ntranslate([0, 0, 8])\n    central_drum();\n\ntranslate([0, 0, 20])\n    winch_bars();\n\ntranslate([0, 0, 8])\n    pawl_mechanism();\n\nrope_guide();",
    "renders": true
  },
  {
    "historical_artifact": "windlass",
    "openscad_code": "// Historical Windlass (medieval ship lifting mechanism)\n// 3D printable at ~80mm width\n\n$fn = 64;\n\n// Main colors\nwood_color = [139/255, 69/255, 19/255];\nmetal_color = [150/255, 150/255, 150/255];\nrope_color = [139/255, 90/255, 43/255];\n\n// Overall scale factor for 3D printing\nscale_factor = 0.4;\n\n// Windlass drum with decorative end caps\nmodule windlass_drum() {\n    color(wood_color) {\n        // Main wooden drum\n        rotate([90, 0, 0]) cylinder(h = 60, d = 25, center = true);\n        \n        // Decorative iron bands\n        color(metal_color) {\n            for(i = [-1, 1]) {\n                translate([i * 20, 0, 0]) \n                    rotate([90, 0, 0]) cylinder(h = 5, d = 27, center = true);\n            }\n            \n            // Central rope groove\n            rotate([90, 0, 0]) cylinder(h = 3, d = 22, center = true);\n        }\n    }\n}\n\n// Crank handle with wooden grip\nmodule crank_handle() {\n    color(metal_color) {\n        // Iron crank arm\n        translate([-40, 0, 0]) rotate([0, 0, 45]) cube([25, 5, 5], center = true);\n        \n        // Wooden grip\n        color(wood_color) {\n            translate([-45, 0, 0]) rotate([0, 90, 0]) \n                cylinder(h = 15, d = 8, center = true);\n        }\n    }\n}\n\n// Support frame with medieval styling\nmodule support_frame() {\n    color(wood_color) {\n        // Left support post\n        translate([-30, 0, -20]) cube([8, 8, 40], center = true);\n        \n        // Right support post\n        translate([30, 0, -20]) cube([8, 8, 40], center = true);\n        \n        // Cross beam\n        translate([0, 0, -35]) cube([70, 6, 4], center = true);\n    }\n    \n    // Iron brackets\n    color(metal_color) {\n        for(side = [-1, 1]) {\n            translate([side * 30, 0, -10]) \n                cube([3, 12, 25], center = true);\n            \n            // Decorative rivets\n            for(h = [-15, -5, 5]) {\n                translate([side * 32, 0, h]) \n                    sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Rope wound around drum\nmodule rope() {\n    color(rope_color) {\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([0, 10, 0]) \n                    rotate([90, 0, 0]) cylinder(h = 30, d = 2, center = true);\n            }\n        }\n        \n        // Hanging rope segment\n        translate([0, 0, -20]) rotate([90, 0, 0]) \n            cylinder(h = 25, d = 2, center = true);\n    }\n}\n\n// Assembly\nscale(scale_factor) {\n    // Base frame\n    support_frame();\n    \n    // Windlass mechanism\n    translate([0, 0, -10]) {\n        windlass_drum();\n        \n        // Crank on right side\n        translate([15, 0, 0]) crank_handle();\n        \n        // Optional second crank on left\n        mirror([1, 0, 0]) translate([15, 0, 0]) crank_handle();\n    }\n    \n    // Rope system\n    translate([0, 0, -10]) rope();\n}",
    "renders": true
  },
  {
    "historical_artifact": "crank",
    "openscad_code": "// Historical crank artifact - medieval water well crank mechanism\n// Based on 12th century European well cranks with decorative ironwork\n\n$fn = 50;\n\n// Overall dimensions\ncrank_length = 85;  // Total length\nhandle_diameter = 12;\nshaft_diameter = 8;\nmain_body_thickness = 15;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255];\niron_color = [0.3, 0.3, 0.3];\nbrass_color = [0.8, 0.6, 0.2];\n\n// Main crank body\nmodule crank_body() {\n    color(wood_color) {\n        // Central shaft with decorative grooves\n        translate([0, 0, -crank_length/2]) {\n            cylinder(h = crank_length, d = shaft_diameter);\n            \n            // Decorative grooves\n            for(i = [0:3]) {\n                translate([0, 0, i * 20]) {\n                    cylinder(h = 2, d = shaft_diameter + 2);\n                    difference() {\n                        cylinder(h = 2, d = shaft_diameter + 2);\n                        cylinder(h = 2.1, d = shaft_diameter);\n                    }\n                }\n            }\n        }\n        \n        // Handle grip\n        translate([25, 0, crank_length/2 - 10]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 20, d = handle_diameter);\n                \n                // Grip ridges for better hold\n                for(i = [2:4:18]) {\n                    translate([0, 0, i]) {\n                        difference() {\n                            cylinder(h = 2, d = handle_diameter + 2);\n                            cylinder(h = 2.1, d = handle_diameter);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Iron crank arm with decorative scrollwork\nmodule crank_arm() {\n    color(iron_color) {\n        // Main arm\n        translate([0, 0, crank_length/2]) {\n            rotate([0, 90, 0]) {\n                // Elliptical arm shape\n                scale([1, 0.6, 1]) {\n                    cylinder(h = 25, d = main_body_thickness);\n                }\n                \n                // Decorative boss at center\n                translate([-12.5, 0, 0]) {\n                    sphere(d = main_body_thickness + 4);\n                }\n                \n                // Connection to handle\n                translate([12.5, 0, 0]) {\n                    // Reinforcement ring\n                    cylinder(h = 8, d = handle_diameter + 4);\n                    \n                    // Brass decorative pin\n                    color(brass_color) {\n                        translate([0, 0, 4]) {\n                            cylinder(h = 2, d = 6);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Scroll decorations\n        translate([0, 0, crank_length/2]) {\n            rotate([0, 90, 0]) {\n                for(i = [0:1]) {\n                    mirror([i == 1 ? 1 : 0, 0, 0]) {\n                        translate([-8, 6, 0]) {\n                            rotate([0, 0, -30]) {\n                                scale([0.3, 1, 0.3]) {\n                                    sphere(d = 8);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Rope attachment point with historical knot ring\nmodule rope_attachment() {\n    color(iron_color) {\n        translate([0, 0, -crank_length/2 - 8]) {\n            // Main attachment ring\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h = 15, d = 12);\n                    cylinder(h = 16, d = 8);\n                }\n                \n                // Decorative ridges\n                for(i = [2:3:13]) {\n                    translate([0, 0, i]) {\n                        difference() {\n                            cylinder(h = 1, d = 14);\n                            cylinder(h = 1.1, d = 10);\n                        }\n                    }\n                }\n            }\n            \n            // Reinforcement collar\n            translate([0, 0, 7]) {\n                cylinder(h = 4, d = 16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    crank_body();\n    crank_arm();\n    rope_attachment();\n}",
    "renders": true
  },
  {
    "historical_artifact": "wheel",
    "openscad_code": "// Ancient Mesopotamian Chariot Wheel (c. 2000 BCE)\n// Based on archaeological finds from Ur\n\n// Overall dimensions\nwheel_diameter = 70;\nwheel_width = 8;\nhub_diameter = 15;\nhub_length = 12;\nspoke_count = 6;\nspoke_width = 3;\nspoke_thickness = 2;\n\n// Colors\nbronze = \"#B87333\";\nwood = \"#8B4513\";\ngold = \"#FFD700\";\n\n// Main wheel module\nmodule chariot_wheel() {\n    // Wooden wheel rim with bronze tire\n    difference() {\n        // Outer bronze tire\n        color(bronze)\n        cylinder(h=wheel_width+1, d=wheel_diameter+2, center=true);\n        \n        // Inner wood core\n        color(wood)\n        cylinder(h=wheel_width, d=wheel_diameter-4, center=true);\n    }\n    \n    // Central hub with decorative caps\n    translate([0, 0, 0])\n    union() {\n        // Main hub\n        color(wood)\n        cylinder(h=hub_length+4, d=hub_diameter, center=true);\n        \n        // Bronze hub caps\n        color(bronze)\n        translate([0, 0, hub_length/2+1])\n        cylinder(h=2, d=hub_diameter+4, center=true);\n        \n        translate([0, 0, -hub_length/2-1])\n        cylinder(h=2, d=hub_diameter+4, center=true);\n    }\n    \n    // Spokes with bronze reinforcement\n    for(i = [0:spoke_count-1]) {\n        rotate([0, 0, i*360/spoke_count])\n        translate([hub_diameter/2+spoke_width/2, 0, 0])\n        union() {\n            // Wooden spoke\n            color(wood)\n            cube([wheel_diameter/2-hub_diameter/2-spoke_width/2, spoke_width, spoke_thickness], center=true);\n            \n            // Bronze spoke reinforcement\n            color(bronze)\n            translate([wheel_diameter/2-hub_diameter/2-spoke_width/2, 0, spoke_thickness/2+0.5])\n            cube([wheel_diameter/2-hub_diameter/2-spoke_width/2+2, spoke_width-0.5, 1], center=true);\n        }\n    }\n    \n    // Decorative sun disk in center\n    translate([0, 0, hub_length/2+2])\n    color(gold)\n    difference() {\n        cylinder(h=1, d=10, center=true);\n        // Eight-pointed star pattern\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n            translate([2, 0, 0])\n            cube([4, 1, 1.2], center=true);\n        }\n    }\n    \n    // Axle hole\n    translate([0, 0, 0])\n    color(bronze)\n    cylinder(h=hub_length+6, d=5, center=true);\n}\n\n// Generate the wheel\nchariot_wheel();",
    "renders": true
  },
  {
    "historical_artifact": "axle",
    "openscad_code": "// Ancient Roman wooden cart axle replica\n// Based on archaeological finds from Pompeii, 1st century AD\n// Features bronze collars, iron reinforcement rings, and maker's marks\n\n// Overall dimensions: 90mm length, 18mm diameter\n\n$fn = 64;\n\n// Main axle body - slightly tapered historical design\nmodule axle_body() {\n    color(\"BurlyWood\")\n    union() {\n        // Central thicker section\n        cylinder(h = 35, d1 = 16, d2 = 14, center = true);\n        \n        // Left taper\n        translate([-17.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d1 = 14, d2 = 11, center = true);\n                \n        // Right taper  \n        translate([17.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d1 = 14, d2 = 11, center = true);\n                \n        // End pegs for wheel attachment\n        translate([-27, 0, 0])\n            cylinder(h = 5, d = 8);\n        translate([27, 0, 0])\n            cylinder(h = 5, d = 8);\n    }\n}\n\n// Bronze decorative collar near wheel position\nmodule bronze_collar(position) {\n    color(\"Goldenrod\")\n    translate([position, 0, 0])\n    difference() {\n        cylinder(h = 8, d = 20);\n        cylinder(h = 10, d = 12);\n    }\n}\n\n// Iron reinforcement rings - typical of Roman construction\nmodule iron_ring(position) {\n    color(\"SlateGray\")\n    translate([position, 0, 0])\n    difference() {\n        cylinder(h = 3, d = 18);\n        cylinder(h = 4, d = 11);\n    }\n}\n\n// Maker's mark inscription - simplified as raised dots\nmodule makers_mark(position) {\n    color(\"DarkGoldenrod\")\n    translate([position, 7, 0])\n    for(i = [0:2]) {\n        translate([i*2-2, 0, 0])\n            sphere(d = 1.5);\n    }\n}\n\n// Wear patterns from wheel hubs - shown as grooves\nmodule wear_grooves(position) {\n    color(\"SaddleBrown\")\n    translate([position, 0, -7])\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 7.5, 0])\n                cube([20, 1.5, 1.5], center = true);\n    }\n}\n\n// Assembly of complete axle\nunion() {\n    axle_body();\n    \n    // Bronze collars near wheel positions\n    bronze_collar(-20);\n    bronze_collar(20);\n    \n    // Iron reinforcement rings at stress points\n    iron_ring(-10);\n    iron_ring(0);\n    iron_ring(10);\n    \n    // Maker's marks - typical Roman workshop identification\n    makers_mark(-5);\n    makers_mark(5);\n    \n    // Wear patterns from actual use\n    wear_grooves(-20);\n    wear_grooves(20);\n}",
    "renders": true
  },
  {
    "historical_artifact": "gear",
    "openscad_code": "// Medieval Astrolabe Gear - 15th Century Astronomical Instrument\n// Based on historical artifacts from European observatories\n// Features decorative star patterns and Latin inscriptions\n// Optimized for 3D printing with 2mm wall thickness\n\n$fn = 64;\n\nmodule astrolabe_gear() {\n    // Main gear body - typical brass construction\n    color([0.7, 0.5, 0.2]) {\n        // Central hub with reinforced core\n        difference() {\n            cylinder(h=6, d=20, center=true);\n            cylinder(h=7, d=8, center=true);\n        }\n        \n        // Gear wheel with 24 teeth (common for astrolabes - 24 hours)\n        difference() {\n            // Main wheel disc\n            cylinder(h=4, d=80, center=true);\n            \n            // Decorative inner ring pattern\n            for(i=[0:11]) {\n                rotate([0, 0, i*30]) {\n                    translate([25, 0, 1.5]) \n                        cube([8, 3, 2], center=true);\n                }\n            }\n            \n            // Central viewing window\n            cylinder(h=5, d=40, center=true);\n        }\n        \n        // Teeth generation using loop\n        for(i=[0:23]) {\n            rotate([0, 0, i*15]) {\n                translate([40, 0, 0]) {\n                    // Tooth base\n                    cube([10, 4, 4], center=true);\n                    \n                    // Rounded tooth tip\n                    translate([5, 0, 0])\n                        sphere(d=4);\n                }\n            }\n        }\n    }\n    \n    // Rete (star map) overlay in darker brass\n    color([0.6, 0.4, 0.15]) {\n        // Thin decorative overlay\n        difference() {\n            cylinder(h=1, d=78, center=true);\n            \n            // Star pattern holes - historical constellations\n            for(star=[ [15, 20], [-20, 15], [10, -15], [-15, -10], [0, 25], [20, -5] ]) {\n                translate([star[0], star[1], 0])\n                    sphere(d=3);\n            }\n            \n            // Latin inscription holes\n            translate([0, 30, 0])\n                rotate([0, 0, 0])\n                    cube([25, 2, 2], center=true);\n            translate([0, -30, 0])\n                rotate([0, 0, 0])\n                    cube([20, 2, 2], center=true);\n        }\n        \n        // Radial support arms\n        for(i=[0:2]) {\n            rotate([0, 0, i*120]) {\n                translate([0, 0, 0]) {\n                    cube([2, 38, 1], center=true);\n                }\n            }\n        }\n    }\n    \n    // Alidade (sighting rule) in contrasting bronze\n    color([0.5, 0.3, 0.1]) {\n        // Rotatable sighting arm\n        rotate([0, 0, 45]) {\n            difference() {\n                cube([2, 35, 2], center=true);\n                \n                // Sighting holes\n                translate([0, 15, 0])\n                    cylinder(h=3, d=3, center=true);\n                translate([0, -15, 0])\n                    cylinder(h=3, d=3, center=true);\n            }\n        }\n    }\n    \n    // Decorative rivets at cardinal points\n    color([0.8, 0.6, 0.3]) {\n        for(angle=[0, 90, 180, 270]) {\n            rotate([0, 0, angle]) {\n                translate([30, 0, 3]) {\n                    cylinder(h=1.5, d=5);\n                    translate([0, 0, 0.75])\n                        sphere(d=5);\n                }\n            }\n        }\n    }\n}\n\n// Scale model to 85mm diameter for printing\nscale(0.85) astrolabe_gear();",
    "renders": true
  },
  {
    "historical_artifact": "sprocket",
    "openscad_code": "// Historical Bronze Sprocket - Medieval Waterwheel Transmission Component (c. 1250-1350 AD)\n// Based on finds from Cistercian abbey watermill sites in Northern France\n\n$fn = 48;  // Smooth curves for historical accuracy\n\n// Main parameters\nsprocket_diameter = 75;  // Typical size for medieval waterwheel gearing\nsprocket_thickness = 12;\nhub_diameter = 20;\nhub_height = 18;\ntooth_count = 12;  // Common for medieval wooden chain drives\ntooth_height = 8;\ntooth_width = 6;\nspoke_count = 4;  // Cross-shaped design typical of period\n\n// Historical bronze patina color\ncolor([0.4, 0.3, 0.2]) \n\n// Main sprocket body with historical proportions\ndifference() {\n    // Main disk with slightly tapered edges for casting draft\n    cylinder(d1 = sprocket_diameter, d2 = sprocket_diameter - 2, h = sprocket_thickness, center = true);\n    \n    // Central hole for wooden axle (slightly tapered for wedge fit)\n    cylinder(d1 = hub_diameter - 8, d2 = hub_diameter - 6, h = sprocket_thickness + 2, center = true);\n}\n\n// Historical hub with decorative collar\ntranslate([0, 0, (sprocket_thickness/2) + (hub_height/2)]) {\n    color([0.35, 0.25, 0.15]) {\n        // Main hub body\n        cylinder(d = hub_diameter, h = hub_height);\n        \n        // Decorative collar with period-appropriate molding\n        translate([0, 0, hub_height/2 - 1]) {\n            cylinder(d = hub_diameter + 4, h = 2);\n        }\n        \n        // Wedge slot for wooden key\n        translate([0, 0, -1]) {\n            cube([3, hub_diameter/2 + 2, hub_height + 2], center = true);\n        }\n    }\n}\n\n// Medieval cross-shaped spokes (characteristic of waterwheel gearing)\nmodule spoke() {\n    color([0.45, 0.35, 0.25]) {\n        // Main spoke\n        translate([0, 0, 0]) {\n            cube([sprocket_diameter/2 - hub_diameter/2 - 5, sprocket_thickness - 2, sprocket_thickness], center = true);\n        }\n        \n        // Period-appropriate decorative ridge\n        translate([0, 0, 1]) {\n            cube([sprocket_diameter/2 - hub_diameter/2 - 5, sprocket_thickness - 4, 0.5], center = true);\n        }\n    }\n}\n\n// Generate spokes in cross pattern\nfor (i = [0:45:360-45]) {\n    rotate([0, 0, i]) {\n        translate([hub_diameter/4 + (sprocket_diameter/4) - 2, 0, 0]) {\n            spoke();\n        }\n    }\n}\n\n// Historical sprocket teeth with period-accurate profile\nmodule tooth() {\n    color([0.5, 0.4, 0.3]) {\n        union() {\n            // Main tooth body (rounded medieval profile)\n            cylinder(d = tooth_width, h = tooth_height);\n            \n            // Reinforcement collar at base (casting feature)\n            translate([0, 0, 0]) {\n                cylinder(d1 = tooth_width + 2, d2 = tooth_width, h = 2);\n            }\n            \n            // Historical wear indicator notch\n            translate([tooth_width/3, 0, tooth_height - 1]) {\n                cube([tooth_width/3, 1, 2]);\n            }\n        }\n    }\n}\n\n// Generate teeth around circumference\nfor (i = [0:360/tooth_count:360-360/tooth_count]) {\n    rotate([0, 0, i]) {\n        translate([0, sprocket_diameter/2 - tooth_height/2, 0]) {\n            tooth();\n        }\n    }\n}\n\n// Period-appropriate maker's mark inscription\ntranslate([0, 0, sprocket_thickness/2 + 1]) {\n    color([0.2, 0.15, 0.1]) {\n        rotate([0, 0, 30]) {\n            // \"X\" mark typical of medieval craftsmen\n            cube([1, 8, 0.5]);\n            rotate([0, 0, 45]) {\n                cube([1, 6, 0.5]);\n            }\n            rotate([0, 0, -45]) {\n                cube([1, 6, 0.5]);\n            }\n        }\n    }\n}\n\n// Historical wear patterns (realistic casting flaws)\ntranslate([sprocket_diameter/3, -sprocket_diameter/3, sprocket_thickness/2]) {\n    color([0.3, 0.2, 0.1]) {\n        sphere(d = 3);\n    }\n}\n\ntranslate([-sprocket_diameter/4, sprocket_diameter/4, -sprocket_thickness/2]) {\n    color([0.3, 0.2, 0.1]) {\n        sphere(d = 2);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "ratchet",
    "openscad_code": "// Historical ratchet mechanism from 18th century clockmaker's toolkit\n// Features hand-forged iron construction with brass pawl and decorative finial\n\n$fn = 32;\n\n// Overall dimensions\nratchet_diameter = 60;\nratchet_thickness = 10;\npawl_length = 25;\nhandle_length = 40;\n\n// Colors\ncolor_iron = [0.25, 0.25, 0.25];\ncolor_brass = [0.8, 0.6, 0.2];\ncolor_steel = [0.5, 0.5, 0.5];\n\n// Main ratchet wheel\nmodule ratchet_wheel() {\n    color(color_iron)\n    difference() {\n        // Basic wheel disc\n        cylinder(h = ratchet_thickness, r = ratchet_diameter/2, center = true);\n        \n        // Central hole for arbor\n        cylinder(h = ratchet_thickness + 2, r = 6, center = true);\n        \n        // Ornamental spokes for historical authenticity\n        for(i = [0:30:150]) {\n            rotate([0, 0, i])\n            translate([ratchet_diameter/4, 0, 0])\n            cube([ratchet_diameter/3, 6, ratchet_thickness + 2], center = true);\n        }\n    }\n    \n    // Teeth generation\n    color(color_iron)\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([ratchet_diameter/2 - 2.5, 0, 0])\n        difference() {\n            cube([5, 8, ratchet_thickness], center = true);\n            translate([0, 4, 0])\n            rotate([0, 0, 45])\n            cube([7, 7, ratchet_thickness + 1], center = true);\n        }\n    }\n    \n    // Decorative center rosette\n    color(color_brass)\n    translate([0, 0, ratchet_thickness/2 + 1])\n    cylinder(h = 2, r = 12);\n    \n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([8, 0, ratchet_thickness/2 + 1])\n        color(color_brass)\n        cylinder(h = 2, r = 2.5);\n    }\n}\n\n// Brass pawl mechanism\nmodule pawl() {\n    color(color_brass)\n    union() {\n        // Pawl body\n        translate([ratchet_diameter/2 - 2, 0, ratchet_thickness/2 + 5])\n        rotate([90, 0, 0])\n        cylinder(h = pawl_length, r = 3);\n        \n        // Pawl head with catch tooth\n        translate([ratchet_diameter/2 - 2, pawl_length - 2, ratchet_thickness/2 + 5])\n        rotate([90, 0, 0])\n        union() {\n            cylinder(h = 6, r = 5);\n            translate([-3, 0, 0])\n            cube([6, 5, 3], center = true);\n        }\n        \n        // Pawl pivot\n        translate([ratchet_diameter/2 - 2, 0, ratchet_thickness/2 + 5])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r = 1.5);\n    }\n}\n\n// Hand-forged iron handle\nmodule handle() {\n    color(color_iron)\n    translate([0, 0, -ratchet_thickness/2 - 15])\n    rotate([0, 0, 0])\n    union() {\n        // Handle shaft with period-appropriate twist\n        linear_extrude(height = handle_length, twist = 30)\n        circle(r = 4);\n        \n        // Decorative finial\n        translate([0, 0, handle_length + 4])\n        union() {\n            sphere(r = 6);\n            translate([0, 0, -3])\n            cylinder(h = 6, r = 4);\n        }\n        \n        // Grip rings for hand positioning\n        for(i = [10:10:30]) {\n            translate([0, 0, i])\n            cylinder(h = 2, r = 5);\n        }\n    }\n}\n\n// Assembly\nrotate([0, 0, 0]) ratchet_wheel();\ntranslate([0, 0, 0]) pawl();\nhandle();\n\n// Maker's mark inscription on handle\ncolor([0.1, 0.1, 0.1])\ntranslate([-2, 4, 10])\nrotate([90, 0, 0])\nlinear_extrude(height = 0.5)\ntext(\"I.S. 1783\", size = 3, font = \"Liberation Serif:style=Bold\");",
    "renders": true
  },
  {
    "historical_artifact": "pawl",
    "openscad_code": "// Medieval Ratchet Pawl - Historical Artifact\n// Based on 14th-15th century European clockwork mechanisms\n\n$fn = 32;\npawl_color = [150/255, 120/255, 80/255]; // Bronze patina\n\nmodule pawl_base() {\n    difference() {\n        // Main base plate\n        translate([0, 0, 2])\n            cube([35, 15, 4], center=true);\n        \n        // Mounting holes\n        for (x = [-12, 12]) {\n            translate([x, 0, 3.9])\n                cylinder(h=2, r=2.5, center=true);\n        }\n        \n        // Decorative groove\n        translate([0, 0, 4])\n            cube([30, 10, 0.5], center=true);\n    }\n}\n\nmodule pawl_arm() {\n    difference() {\n        union() {\n            // Main arm body\n            translate([0, 0, 8])\n                cube([25, 8, 3], center=true);\n            \n            // Tapered end\n            translate([12.5, 0, 8])\n                cube([5, 6, 3], center=true);\n            \n            // Reinforcement ridge\n            translate([0, 0, 9.5])\n                cube([20, 7, 0.8], center=true);\n        }\n        \n        // Weight reduction hole\n        translate([5, 0, 8])\n            cylinder(h=4, r=3, center=true);\n    }\n}\n\nmodule pawl_tooth() {\n    difference() {\n        // Main tooth\n        translate([17.5, 0, 12.5])\n            rotate([0, -20, 0])\n            cube([8, 4, 5], center=true);\n        \n        // Tooth tip detail\n        translate([21, 0, 11])\n            sphere(r=2.5);\n    }\n}\n\nmodule decorative_rivets() {\n    for (pos = [[-10, 5, 4.5], [-10, -5, 4.5], [10, 5, 4.5], [10, -5, 4.5]]) {\n        translate(pos)\n            cylinder(h=1, r=1.5, center=true);\n    }\n}\n\nmodule maker_marks() {\n    // Simulated maker's mark on side\n    translate([0, 7.6, 8])\n        rotate([0, 90, 0])\n        linear_extrude(1)\n        text(\"IHS\", size=3, halign=\"center\", valign=\"center\");\n}\n\nmodule pivot_pin() {\n    // Main pivot cylinder\n    translate([-17.5, 0, 8])\n        rotate([90, 0, 0])\n        cylinder(h=12, r=3.5, center=true);\n    \n    // Pin head\n    translate([-17.5, 0, 14])\n        sphere(r=4.5);\n    \n    // Decorative knurling\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n        translate([-17.5, 3.5, 8])\n            cube([0.5, 1, 12], center=true);\n    }\n}\n\nmodule spring_mount() {\n    // Spring attachment point\n    translate([-15, 0, 4])\n        cube([5, 3, 8], center=true);\n    \n    // Spring hook hole\n    translate([-12.5, 0, 4])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=1.5, center=true);\n}\n\n// Assemble the pawl\ncolor(pawl_color) {\n    union() {\n        pawl_base();\n        pawl_arm();\n        pawl_tooth();\n        decorative_rivets();\n        maker_marks();\n        pivot_pin();\n        spring_mount();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "hasp",
    "openscad_code": "// Historical Iron Hasp (Medieval Style)\n// Based on 14th-15th century European designs\n// Overall dimensions: 80mm x 25mm x 8mm\n\n// Main color for iron\ncolor([0.3, 0.3, 0.35]) \n\n// Base plate with decorative ridge\nmodule base_plate() {\n    difference() {\n        // Main plate\n        cube([80, 25, 3]);\n        \n        // Decorative groove pattern\n        for(i = [1:3]) {\n            translate([i*20, 5, 1.5])\n                cube([2, 15, 1.5]);\n        }\n    }\n}\n\n// Hinge barrel (left side)\nmodule hinge_barrel() {\n    union() {\n        // Main barrel\n        translate([-5, 7.5, 0])\n            cylinder(h=10, d=8, $fn=16);\n        \n        // Hinge pin holes\n        for(i = [0:1]) {\n            translate([-5, 7.5, 2 + i*6])\n                cylinder(h=2, d=3, $fn=12);\n        }\n    }\n}\n\n// Staple loop (right side)\nmodule staple_loop() {\n    difference() {\n        // Main arch\n        translate([75, 12.5, 0])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=5, $fn=16);\n        \n        // Hole through arch\n        translate([75, 12.5, -2])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=3, $fn=12);\n    }\n    \n    // Base supports\n    for(x = [70, 80]) {\n        translate([x, 10, 0])\n            cube([3, 5, 2]);\n    }\n}\n\n// Decorative rivets (historical authenticity)\nmodule rivets() {\n    for(pos = [[15, 5], [15, 20], [45, 5], [45, 20]]) {\n        translate([pos[0], pos[1], 3])\n            cylinder(h=2, d=4, $fn=8);\n        translate([pos[0], pos[1], 3.5])\n            sphere(d=4, $fn=8);\n    }\n}\n\n// Reinforcement ridges\nmodule reinforcements() {\n    // Longitudinal ridges\n    translate([-2, 2, 3])\n        cube([84, 3, 2]);\n    translate([-2, 20, 3])\n        cube([84, 3, 2]);\n    \n    // Cross ridges\n    translate([20, 0, 3])\n        cube([3, 25, 2]);\n    translate([60, 0, 3])\n        cube([3, 25, 2]);\n}\n\n// Historical maker's mark\nmodule makers_mark() {\n    translate([40, 12.5, 5.1])\n        rotate([0, 0, 45])\n            cube([2, 6, 0.5]);\n    translate([40, 12.5, 5.1])\n        rotate([0, 0, -45])\n            cube([2, 6, 0.5]);\n}\n\n// Assemble the hasp\nunion() {\n    base_plate();\n    hinge_barrel();\n    staple_loop();\n    reinforcements();\n    rivets();\n    \n    // Color contrast for maker's mark\n    color([0.2, 0.2, 0.25])\n        makers_mark();\n}",
    "renders": true
  },
  {
    "historical_artifact": "latch",
    "openscad_code": "// Medieval iron door latch - circa 14th century\n// Based on historical examples found in European castles\n\n// Main color definitions\ncolor_iron = [0.3, 0.3, 0.3];\ncolor_bronze = [0.7, 0.4, 0.2];\n\n// Wall plate with decorative elements\nmodule wall_plate() {\n    color(color_iron)\n    difference() {\n        // Main plate body\n        translate([0, 0, 0])\n            cube([40, 8, 60], center=true);\n        \n        // Decorative border recess\n        translate([0, 1, 0])\n            cube([36, 2, 56], center=true);\n        \n        // Four mounting holes\n        for(x = [-15, 15])\n            for(y = [-20, 20])\n                translate([x, 5, y])\n                    cylinder(h=10, r=2, center=true);\n    }\n}\n\n// Hinged latch bar\nmodule latch_bar() {\n    color(color_iron)\n    union() {\n        // Main bar\n        translate([20, 0, 0])\n            cube([50, 6, 12], center=true);\n        \n        // Tapered handle end\n        translate([50, 0, 0])\n            scale([1, 1, 0.8])\n                cube([10, 6, 12], center=true);\n        \n        // Decorative ridges\n        for(i = [-2:1:2])\n            translate([35, 0, i*3])\n                cube([15, 6, 1], center=true);\n    }\n}\n\n// Hinge mechanism\nmodule hinge() {\n    color(color_iron)\n    union() {\n        // Hinge barrel\n        translate([-20, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=4, center=true);\n        \n        // Hinge pin\n        translate([-20, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=1.5, center=true);\n    }\n}\n\n// Catch plate for door frame\nmodule catch_plate() {\n    color(color_iron)\n    difference() {\n        // Main catch\n        translate([30, 0, 0])\n            cube([20, 8, 30], center=true);\n        \n        // Latch slot\n        translate([30, 1, 0])\n            cube([8, 4, 12], center=true);\n        \n        // Decorative scroll work\n        translate([35, 1, -10])\n            rotate([0, 0, 45])\n                cube([8, 2, 8], center=true);\n        translate([35, 1, 10])\n            rotate([0, 0, -45])\n                cube([8, 2, 8], center=true);\n    }\n}\n\n// Decorative rivets\nmodule rivets() {\n    color(color_bronze)\n    for(x = [-15, 15])\n        for(y = [-20, 20])\n            translate([x, 8, y])\n                sphere(r=2.5);\n}\n\n// Assembly\nunion() {\n    // Main components\n    wall_plate();\n    latch_bar();\n    hinge();\n    catch_plate();\n    rivets();\n    \n    // Additional historical details\n    // Wrought iron texture simulation with small bumps\n    color(color_iron)\n    for(i = [1:10:360]) {\n        rotate([0, 0, i])\n            translate([0, 4, -25 + i/10])\n                sphere(r=0.5);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "lock",
    "openscad_code": "// Medieval Iron Padlock (ca. 14th Century)\n// Based on archaeological finds from York, England\n\n$fs = 0.5;\n$fa = 2;\n\n// Overall dimensions\nlock_length = 60;\nlock_width = 35;\nlock_height = 25;\nkey_hole_diameter = 8;\n\nmodule body() {\n    difference() {\n        // Main body with rounded edges\n        union() {\n            color(\"DimGray\") \n            translate([0,0,lock_height/2])\n                minkowski() {\n                    cube([lock_length-6, lock_width-6, lock_height-4], center=true);\n                    sphere(2);\n                }\n            \n            // Reinforced corners\n            for(x=[-1,1])\n            for(y=[-1,1])\n                translate([x*(lock_length/2-3), y*(lock_width/2-3), lock_height/2])\n                    cylinder(h=lock_height-4, r=3, $fn=20);\n        }\n        \n        // Keyhole\n        translate([lock_length/2-5, 0, lock_height/2])\n            rotate([0,90,0])\n                cylinder(h=15, d=key_hole_diameter, $fn=32);\n        \n        // Decorative slot\n        translate([0, 0, lock_height-2])\n            cube([lock_length-10, 8, 3], center=true);\n    }\n}\n\nmodule shackle() {\n    // U-shaped shackle with square cross-section\n    color(\"DarkGray\")\n    union() {\n        // Left post\n        translate([-lock_length/2+5, 0, lock_height+15])\n            rotate([0,0,0])\n                cylinder(h=30, r=3, $fn=8);\n        \n        // Right post\n        translate([lock_length/2-5, 0, lock_height+15])\n            rotate([0,0,0])\n                cylinder(h=30, r=3, $fn=8);\n        \n        // Cross bar\n        translate([0, 0, lock_height+30])\n            rotate([90,0,0])\n                cylinder(h=lock_length-10, r=3, $fn=8);\n    }\n}\n\nmodule decorative_plates() {\n    // Ornamental brass plates on front and back\n    color(\"Goldenrod\") {\n        for(side=[-1,1]) {\n            translate([side*(lock_length/2-1), 0, lock_height/2])\n                cube([2, lock_width-8, lock_height-8], center=true);\n        }\n    }\n}\n\nmodule rivets() {\n    // Decorative rivets along edges\n    color(\"Goldenrod\") {\n        for(i=[1:3]) {\n            for(side=[-1,1]) {\n                translate([lock_length/2-10*i, side*(lock_width/2-3), lock_height/2])\n                    sphere(1.5, $fn=16);\n                translate([lock_length/2-10*i, side*(lock_width/2-3), lock_height/2-8])\n                    sphere(1.5, $fn=16);\n            }\n        }\n    }\n}\n\nmodule maker_mark() {\n    // Simulated maker's mark inscription\n    color(\"Black\")\n    translate([0, lock_width/2-0.5, lock_height/2+3])\n        rotate([90,0,0])\n            linear_extrude(height=0.5)\n                text(\"S\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// Assemble the lock\nunion() {\n    body();\n    shackle();\n    decorative_plates();\n    rivets();\n    maker_mark();\n}",
    "renders": true
  },
  {
    "historical_artifact": "key",
    "openscad_code": "// Egyptian Ankh Key (Medium Complexity)\n// Symbolic key of life from ancient Egypt\n// Overall size: ~80mm height for 3D printing\n\n// Main color: Gold/bronze\ncolor([0.8, 0.6, 0.2]) {\n    // Main loop/handle of the ankh\n    difference() {\n        // Outer loop\n        union() {\n            // Top crossbar\n            translate([0, 30, 0])\n                cube([40, 8, 6], center=true);\n                \n            // Vertical shaft\n            translate([0, 0, 0])\n                cylinder(h=35, r=3, $fn=32);\n                \n            // Horizontal loop top\n            translate([0, 35, 0])\n                rotate([90, 0, 0])\n                cylinder(h=30, r=3, $fn=32);\n                \n            // Side curves of loop\n            for(i=[-1, 1]) {\n                translate([i*15, 35, 0])\n                    rotate([0, 0, i*90])\n                    cylinder(h=15, r=3, $fn=32);\n            }\n        }\n        \n        // Hollow out the loop\n        translate([0, 35, 0])\n            cube([25, 25, 10], center=true);\n    }\n    \n    // Decorative hieroglyphic bands\n    module hieroglyph_band(y_pos) {\n        color([0.9, 0.7, 0.3]) {\n            translate([0, y_pos, 3.5])\n                cube([38, 4, 1], center=true);\n                \n            // Small dots pattern\n            for(x=[-15:5:15]) {\n                translate([x, y_pos, 4])\n                    sphere(r=0.8, $fn=8);\n            }\n        }\n    }\n    \n    hieroglyph_band(30);\n    hieroglyph_band(26);\n    \n    // Lotus flower details at base\n    module lotus_petal(x_pos) {\n        translate([x_pos, -15, 0])\n            rotate([0, 0, -20])\n            scale([1, 1.5, 1])\n            cylinder(h=8, r1=2, r2=0.5, $fn=8);\n    }\n    \n    for(i=[-2:1:2]) {\n        lotus_petal(i*5);\n    }\n    \n    // Central shaft ribbing\n    for(y=[-10:5:20]) {\n        translate([0, y, 0])\n            difference() {\n                cylinder(h=4, r=3.5, $fn=32);\n                cylinder(h=4.2, r=2.8, $fn=32);\n            }\n    }\n    \n    // Crossbar end caps\n    module end_cap(x_pos) {\n        translate([x_pos, 30, 0])\n            sphere(r=4, $fn=16);\n    }\n    \n    end_cap(20);\n    end_cap(-20);\n    \n    // Eye of Horus detail\n    translate([0, 35, 3.5])\n        color([0.1, 0.1, 0.1]) {\n            // Eye outline\n            cube([8, 4, 0.5], center=true);\n            \n            // Pupil\n            translate([2, 0, 0.3])\n                sphere(r=1, $fn=8);\n        }\n}",
    "renders": true
  },
  {
    "historical_artifact": "nail",
    "openscad_code": "// Historical Nail Artifact - Roman Iron Nail (1st-3rd century AD)\n// Based on archaeological findings from Roman Britain\n// Features square shank, rose-head design, and decorative collar\n\n$fn = 32;\n\n// Overall dimensions\nnail_length = 75;\nnail_width = 4.5;\nhead_width = 10;\nhead_thickness = 3;\n\n// Colors for realistic appearance\ncolor(\"DarkSlateGray\") {\n    union() {\n        // Main nail body (square shank)\n        translate([0, 0, nail_length/2])\n            cube([nail_width, nail_width, nail_length], center=true);\n        \n        // Rose-head formation (pyramidal top)\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([0, 0, nail_length])\n            rotate([45, 0, 0])\n            cube([head_width, head_width/2, head_thickness], center=true);\n        }\n        \n        // Decorative collar below head\n        translate([0, 0, nail_length-3])\n            cylinder(h=2, r1=nail_width*1.2, r2=nail_width*1.1, center=true);\n        \n        // Pointed tip (four-sided pyramid)\n        translate([0, 0, 0])\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n            rotate([45, 0, 0])\n            translate([-nail_width/2, 0, 0])\n            cube([nail_width, nail_width, nail_width*2]);\n        }\n        \n        // Hammer strike marks on head (realistic detail)\n        for (i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([0, head_width/3, nail_length+head_thickness/2])\n            scale([1, 0.3, 0.1])\n            sphere(r=1.5);\n        }\n        \n        // Surface texture - forge scale marks\n        for (z = [5:10:nail_length-10]) {\n            for (angle = [0:90:270]) {\n                rotate([0, 0, angle])\n                translate([nail_width/2+0.1, 0, z])\n                scale([0.2, 0.5, 0.5])\n                sphere(r=0.3);\n            }\n        }\n        \n        // Clench marks for historical authenticity\n        // Roman nails often show signs of being clenched (bent over)\n        translate([nail_width/2, 0, nail_length/3])\n            rotate([0, 90, 0])\n            cylinder(h=nail_width*1.5, r=nail_width/4, center=true);\n        \n        // Corrosion pits (realistic aging)\n        color(\"SaddleBrown\") {\n            for (i = [0:15]) {\n                rotate([0, 0, i*137.5])\n                translate([nail_width/2+0.1, 0, 5+i*4])\n                sphere(r=0.4);\n            }\n        }\n    }\n}\n\n// Small manufacturing seam along shank\ncolor(\"DimGray\") {\n    translate([nail_width/2, 0, nail_length/2])\n    rotate([90, 0, 0])\n    cylinder(h=nail_length-5, r=0.1, center=true);\n}\n\n// Additional historical detail: maker's mark\ncolor(\"Black\") {\n    translate([0, -nail_width/2-0.1, nail_length-12])\n    rotate([90, 0, 0])\n    linear_extrude(0.2)\n    text(\"LEG\", size=2, halign=\"center\", valign=\"center\");\n}",
    "renders": true
  },
  {
    "historical_artifact": "spike",
    "openscad_code": "// Historical Iron Spike Artifact (Medieval Iron Spike)\n// Realistic style, medium complexity\n// Based on 15th century iron spikes used in timber construction\n\n// Main spike body\nmodule spike_body() {\n    difference() {\n        // Main shaft - tapered cylinder\n        cylinder(h=80, r1=4, r2=2, $fn=32);\n        \n        // Groove for rope/wire\n        translate([0, 0, 60])\n            rotate([90, 0, 0])\n                cylinder(h=8.1, r=2.5, $fn=32);\n    }\n}\n\n// Decorative collar below the head\nmodule decorative_collar() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, 80])\n    difference() {\n        cylinder(h=5, r=6, $fn=32);\n        cylinder(h=5.1, r=5, $fn=32);\n    }\n}\n\n// Square spike head with hammered texture\nmodule spike_head() {\n    color([0.35, 0.35, 0.35])\n    union() {\n        // Main square head\n        translate([0, 0, 85])\n            cube([10, 10, 12], center=true);\n        \n        // Pyramid top\n        translate([0, 0, 96])\n            cylinder(h=8, r1=7, r2=0, $fn=4);\n    }\n}\n\n// Rust and wear patterns\nmodule rust_patterns() {\n    color([0.4, 0.2, 0.1])\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([3.5, 0, 20 + i/3])\n            scale([1, 0.3, 0.3])\n                sphere(r=0.8);\n    }\n}\n\n// Hammer marks simulation\nmodule hammer_marks() {\n    color([0.25, 0.25, 0.25])\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([5, 0, 85 + i/20])\n            scale([1.2, 0.5, 0.2])\n                sphere(r=1.5);\n    }\n}\n\n// Manufacturing seams\nmodule manufacturing_seams() {\n    color([0.3, 0.3, 0.3])\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([2, 0, 0])\n            cube([0.5, 0.2, 80]);\n    }\n}\n\n// Assembly\nunion() {\n    spike_body();\n    decorative_collar();\n    spike_head();\n    rust_patterns();\n    hammer_marks();\n    manufacturing_seams();\n}",
    "renders": true
  },
  {
    "historical_artifact": "rivet",
    "openscad_code": "// Historical Roman Bronze Rivet Artifact (circa 100-200 CE)\n// Medium complexity, realistic style, 3D printable\n\n$fn = 32;\n\n// Main dimensions (in mm)\nrivet_height = 65;\nhead_diameter = 20;\nshaft_diameter = 12;\nshaft_length = 45;\ndecorative_ring_height = 3;\ninscription_height = 1;\n\n// Colors\nbronze_dark = [0.5, 0.35, 0.2];\nbronze_light = [0.7, 0.5, 0.3];\npatina = [0.3, 0.4, 0.35];\n\n// Main rivet assembly\nmodule historical_rivet() {\n    // Overall bronze material\n    color(bronze_dark)\n    union() {\n        // Domed head with slight flattening from age\n        translate([0, 0, shaft_length])\n        difference() {\n            // Domed head\n            scale([1, 1, 0.4])\n            sphere(d = head_diameter);\n            \n            // Age wear - slightly flattened top\n            translate([0, 0, -head_diameter/4])\n            cube([head_diameter*1.2, head_diameter*1.2, head_diameter/2], center=true);\n        }\n        \n        // Decorative ring below head\n        translate([0, 0, shaft_length - decorative_ring_height/2])\n        cylinder(h = decorative_ring_height, d1 = head_diameter*0.9, d2 = shaft_diameter*1.2);\n        \n        // Main shaft\n        cylinder(h = shaft_length, d = shaft_diameter);\n        \n        // Tapered end (hammered)\n        translate([0, 0, -shaft_diameter/2])\n        cylinder(h = shaft_diameter/2, d1 = shaft_diameter, d2 = shaft_diameter*0.7);\n        \n        // Decorative fluting on shaft\n        for(i = [0:5:355]) {\n            rotate([0, 0, i])\n            translate([shaft_diameter/2 + 0.5, 0, shaft_length/2])\n            scale([0.3, 1, 1])\n            cylinder(h = shaft_length*0.8, d = 1.5);\n        }\n        \n        // Roman inscription band\n        translate([0, 0, shaft_length - decorative_ring_height - inscription_height - 2])\n        color(bronze_light)\n        cylinder(h = inscription_height + 0.5, d = shaft_diameter*1.1);\n        \n        // Inscription details (SPQR)\n        for(angle = [30, 90, 150, 210, 270, 330]) {\n            rotate([0, 0, angle])\n            translate([shaft_diameter/2 * 0.95, 0, shaft_length - decorative_ring_height - inscription_height/2 - 1.75])\n            color([0.1, 0.1, 0.1])\n            cube([0.5, 3, inscription_height*0.8], center=true);\n        }\n    }\n    \n    // Patina effects\n    color(patina)\n    translate([0, 0, shaft_length - 2])\n    difference() {\n        sphere(d = head_diameter * 1.05);\n        sphere(d = head_diameter * 0.95);\n    }\n    \n    // Additional wear patterns\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([head_diameter/3, 0, shaft_length + 1])\n        color([0.2, 0.15, 0.1, 0.6])\n        sphere(d = 2);\n    }\n}\n\n// Generate the complete rivet\nhistorical_rivet();",
    "renders": true
  },
  {
    "historical_artifact": "staple",
    "openscad_code": "// Roman legionary standard - Aquila (Eagle) on staff\n// Based on 1st century AD military standards, scaled for 3D printing\n\n// Overall dimensions: ~85mm height\n\n$fn = 32;  // Smooth curves\n\n// Main colors\ngold = [0.83, 0.69, 0.22];\nsilver = [0.75, 0.75, 0.75];\nbronze = [0.8, 0.5, 0.2];\n\n// Main assembly\nunion() {\n    // Staff/handle\n    color(silver) staff();\n    \n    // Main eagle body\n    translate([0, 0, 65]) color(gold) eagle_body();\n    \n    // Wings\n    translate([0, 0, 65]) color(gold) wings();\n    \n    // Head and beak\n    translate([0, 0, 65]) color(gold) eagle_head();\n    \n    // Talons gripping orb\n    translate([0, 0, 65]) color(gold) talons();\n    \n    // Decorative wreath below eagle\n    translate([0, 0, 50]) color(bronze) wreath();\n    \n    // Cross-bar with banners\n    translate([0, 0, 30]) color(silver) crossbar_with_banners();\n}\n\nmodule staff() {\n    // Main staff pole with slight taper\n    cylinder(h = 55, r1 = 2.5, r2 = 2, center = false);\n    \n    // Decorative bands on staff\n    for(i = [1:3:15]) {\n        translate([0, 0, i * 3]) \n            cylinder(h = 2, r = 3, center = false);\n    }\n}\n\nmodule eagle_body() {\n    // Main body - elongated teardrop shape\n    scale([1, 0.6, 1.5]) sphere(r = 8);\n    \n    // Chest detail\n    translate([0, -4.5, -2])\n        cube([12, 2, 8], center = true);\n    \n    // Tail feathers\n    for(i = [0:2:8]) {\n        translate([0, 0, -12 + i])\n            rotate([0, 10, 0])\n            cube([8, 1, 2], center = true);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-8, 0, 2])\n        rotate([0, 0, -20])\n        scale([1.5, 0.3, 0.8])\n        sphere(r = 8);\n    \n    // Right wing\n    translate([8, 0, 2])\n        rotate([0, 0, 20])\n        scale([1.5, 0.3, 0.8])\n        sphere(r = 8);\n    \n    // Wing feathers detail\n    for(side = [-1, 1]) {\n        for(i = [0:3:12]) {\n            translate([side * (6 + i/2), 0, 2 - i/4])\n                rotate([0, 0, side * 15])\n                cube([4, 0.5, 1.5], center = true);\n        }\n    }\n}\n\nmodule eagle_head() {\n    // Head\n    translate([0, -6, 10])\n        scale([0.8, 0.8, 1.2])\n        sphere(r = 4);\n    \n    // Beak\n    translate([0, -10, 10])\n        rotate([30, 0, 0])\n        cylinder(h = 6, r1 = 2, r2 = 0.5);\n    \n    // Eye sockets\n    for(side = [-1, 1]) {\n        translate([side * 1.5, -6.5, 11])\n            sphere(r = 0.5);\n    }\n}\n\nmodule talons() {\n    // Orb/sphere being gripped\n    translate([0, 0, -8])\n        color(bronze)\n        sphere(r = 3);\n    \n    // Talons\n    for(angle = [45, 135, 225, 315]) {\n        translate([0, 0, -5])\n            rotate([0, 0, angle])\n            translate([2.5, 0, 0])\n            cylinder(h = 4, r = 0.8);\n    }\n}\n\nmodule wreath() {\n    // Laurel wreath base\n    rotate_extrude(angle = 360, $fn = 64)\n        translate([8, 0, 0])\n            circle(r = 1.5);\n    \n    // Laurel leaves\n    for(i = [0:15:345]) {\n        rotate([0, 0, i])\n            translate([8, 0, 0])\n                rotate([90, 0, 0])\n                    scale([0.3, 1.5, 1])\n                    cylinder(h = 3, r1 = 1, r2 = 0.5);\n    }\n}\n\nmodule crossbar_with_banners() {\n    // Cross-bar\n    cube([20, 1, 2], center = true);\n    \n    // Banner attachments\n    for(side = [-1, 1]) {\n        translate([side * 9, 0, -2])\n            cylinder(h = 4, r = 0.5);\n    }\n    \n    // Small SPQR inscription plaque\n    translate([0, 0.6, -1])\n        cube([6, 0.2, 2], center = true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "tack",
    "openscad_code": "// Historical Roman Tack Stud - Decorative Harness Ornament\n// Based on 1st-2nd century AD Roman cavalry tack decorations\n\n// Overall dimensions approximately 75mm diameter\n\n// Main decorative disc with embossed details\nmodule decorative_disc() {\n    // Base disc with raised edge\n    difference() {\n        cylinder(h=8, d=70, $fn=64);\n        translate([0, 0, 6])\n            cylinder(h=4, d=66, $fn=64);\n    }\n    \n    // Central boss with concentric rings\n    translate([0, 0, 8])\n        cylinder(h=6, d=20, $fn=32);\n    \n    for(i=[1:2:5]) {\n        translate([0, 0, 8+i])\n            cylinder(h=1, d=20-i*2, $fn=32);\n    }\n}\n\n// Decorative radial pattern - typical Roman geometric design\nmodule radial_pattern() {\n    for(angle=[0:30:359]) {\n        rotate([0, 0, angle])\n        translate([0, 25, 8.5])\n            scale([1, 0.3, 1])\n            rotate([0, 0, 15])\n            cube([12, 3, 1.5], center=true);\n    }\n}\n\n// Small domed rivets around perimeter\nmodule perimeter_rivets() {\n    for(angle=[15:30:345]) {\n        rotate([0, 0, angle])\n        translate([0, 32.5, 8])\n            scale([1, 1, 0.5])\n            sphere(d=4, $fn=16);\n    }\n}\n\n// Attachment spike on back\nmodule attachment_spike() {\n    // Tapered spike for securing to leather\n    translate([0, 0, -15])\n        cylinder(h=15, d1=15, d2=8, $fn=32);\n    \n    // Small collar at base\n    translate([0, 0, -1])\n        cylinder(h=3, d=20, $fn=32);\n}\n\n// Engraved central motif - stylized thunderbolt\nmodule central_motif() {\n    translate([0, 0, 8.5]) {\n        // Main lightning bolt shape\n        color(\"gold\") {\n            rotate([0, 0, 45])\n            scale([1, 0.3, 1])\n            cube([10, 2, 0.5], center=true);\n            \n            rotate([0, 0, -45])\n            scale([1, 0.3, 1])\n            cube([10, 2, 0.5], center=true);\n            \n            // Cross bar\n            cube([6, 1.5, 0.5], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Bronze-colored main body\n    color(\"bronze\") {\n        decorative_disc();\n        radial_pattern();\n        perimeter_rivets();\n        attachment_spike();\n    }\n    \n    // Gold central decoration\n    central_motif();\n}",
    "renders": true
  },
  {
    "historical_artifact": "peg",
    "openscad_code": "// Historical wooden peg inspired by Medieval European timber framing joints\n// Features decorative turnings and hand-carved details typical of 14th-16th century craftsmanship\n\n// Overall dimensions: 80mm length, 20mm diameter at head, tapering to 12mm\n\nmodule peg_head() {\n    // Decorative turned head with characteristic mushroom profile\n    union() {\n        // Main bulbous head\n        cylinder(h=8, d1=20, d2=18, $fn=32);\n        translate([0,0,8])\n            cylinder(h=4, d1=18, d2=16, $fn=32);\n        \n        // Decorative ring detail below head\n        translate([0,0,-2])\n            cylinder(h=2, d1=22, d2=22, $fn=32);\n            \n        // Hand-carved groove details\n        for(i=[0:2]) {\n            rotate([0,0,i*120])\n                translate([9.5,0,3])\n                    rotate([90,0,0])\n                        cylinder(h=1, d1=1, d2=0.5, $fn=8);\n        }\n    }\n}\n\nmodule peg_shaft() {\n    // Tapered shaft with hand-hewn texture marks\n    difference() {\n        // Main tapered shaft\n        cylinder(h=65, d1=16, d2=12, $fn=24);\n        \n        // Hand-hewn chisel marks along shaft\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([7.5,0,i*7+10])\n                    cube([3,1,5], center=true);\n        }\n        \n        // Wedging slot at bottom\n        translate([0,0,60])\n            rotate([0,90,0])\n                cube([8,3,2], center=true);\n    }\n}\n\nmodule peg_wedge() {\n    // Wooden wedge for securing peg in mortise\n    color(\"SaddleBrown\")\n    translate([0,0,67])\n        rotate([90,0,0])\n            cube([6,2,8], center=true);\n}\n\n// Assembly with historical wood color\ncolor(\"BurlyWood\")\nunion() {\n    peg_head();\n    translate([0,0,10]) peg_shaft();\n}\n\npeg_wedge();\n\n// Historical maker's mark (simple cross carved in head)\ntranslate([0,0,11])\n    linear_extrude(height=0.5)\n        text(\"+\", size=3, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "historical_artifact": "dowel",
    "openscad_code": "// Ancient Mesopotamian Clay Dowel - Cuneiform Inscribed (c. 2000 BCE)\n// Used for sealing storage jars and doors in early Sumerian cities\n\n// Overall dimensions: 80mm long, 12mm diameter\n\n// Main dowel body - slightly tapered for authenticity\nmodule dowel_body() {\n    difference() {\n        // Tapered cylinder body\n        cylinder(h=80, d1=11.5, d2=12, $fn=32);\n        \n        // Finger grip grooves - three evenly spaced\n        for (z = [20, 40, 60]) {\n            translate([0, 0, z])\n                rotate([0, 0, 0])\n                cylinder(h=1.5, d=13.5, $fn=32);\n        }\n        \n        // Central hollow for cord - 4mm diameter\n        translate([0, 0, -1])\n            cylinder(h=82, d=4, $fn=16);\n    }\n}\n\n// Cuneiform inscription panel - raised clay tablet section\nmodule inscription_panel() {\n    color(\"SaddleBrown\")\n    translate([0, 6, 75])\n        cube([14, 2, 5], center=true);\n}\n\n// Cuneiform symbols - wedge-shaped impressions\nmodule cuneiform_symbols() {\n    color(\"SaddleBrown\")\n    // First row of wedges\n    for (i = [-2, 0, 2]) {\n        translate([i*3, 6, 77])\n            rotate([90, 0, -45])\n            scale([1, 0.3, 1])\n            cylinder(h=1.5, d=2.5, $fn=3);\n    }\n    \n    // Second row of wedges\n    for (j = [-1.5, 0.5, 2.5]) {\n        translate([j*3, 6, 74])\n            rotate([90, 0, 45])\n            scale([1, 0.3, 1])\n            cylinder(h=1.5, d=2.5, $fn=3);\n    }\n}\n\n// Clay seal impression - circular seal pattern at top\nmodule seal_impression() {\n    color(\"SaddleBrown\")\n    difference() {\n        translate([0, 0, 81])\n            cylinder(h=1, d=15, $fn=32);\n        \n        // Star pattern typical of Ur III period\n        for (a = [0:60:300]) {\n            rotate([0, 0, a])\n            translate([4, 0, 81])\n                cube([8, 1, 1.2], center=true);\n        }\n    }\n}\n\n// Weathering/wear marks\nmodule weathering_marks() {\n    // Small chips and dents from age\n    for (i = [0:15:75]) {\n        translate([5*sin(i*10), 5*cos(i*10), i])\n            sphere(d=1.2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"SaddleBrown\") {\n        dowel_body();\n        inscription_panel();\n        cuneiform_symbols();\n        seal_impression();\n    }\n    \n    // Apply weathering after main model\n    difference() {\n        union();\n        color(\"SaddleBrown\")\n        weathering_marks();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "thimble",
    "openscad_code": "// Historical brass sewing thimble, medieval European style\n// Based on 15th century examples found in London excavations\n\n// Overall dimensions (in mm)\nthimble_height = 35;\ntop_diameter = 15;\nbase_diameter = 20;\nwall_thickness = 1.5;\n\n// Create the main thimble body\nmodule thimble_body() {\n    color(\"brass\") difference() {\n        // Outer cone shape\n        cylinder(h=thimble_height, d1=base_diameter, d2=top_diameter, $fn=64);\n        \n        // Hollow interior\n        translate([0, 0, -0.1])\n            cylinder(h=thimble_height+0.2, d1=base_diameter-wall_thickness*2, d2=top_diameter-wall_thickness*2, $fn=64);\n        \n        // Top opening\n        translate([0, 0, thimble_height-0.5])\n            cylinder(h=2, d=top_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Decorative ridges around the base\nmodule base_ridges() {\n    color(\"brass\") for(i=[1:3]) {\n        translate([0, 0, i*2])\n            difference() {\n                cylinder(h=1, d=base_diameter+1, $fn=64);\n                cylinder(h=2, d=base_diameter-1, $fn=64);\n            }\n    }\n}\n\n// Hand-punched dimples for needle pushing\nmodule dimples() {\n    color(\"brass\") {\n        // Spiral pattern of dimples\n        dimple_diameter = 2;\n        dimple_depth = 1;\n        \n        for(row=[1:6]) {\n            rows_per_height = 6;\n            z = row * (thimble_height-10)/rows_per_height + 5;\n            \n            circumference = PI * (base_diameter - (base_diameter-top_diameter)*(z/thimble_height));\n            dimples_per_row = floor(circumference / 4);\n            \n            for(i=[0:dimples_per_row-1]) {\n                angle = i * 360/dimples_per_row;\n                radius = base_diameter/2 - (base_diameter-top_diameter)/2 * (z/thimble_height);\n                \n                translate([cos(angle)*radius, sin(angle)*radius, z])\n                    rotate([90, 0, angle])\n                        sphere(d=dimple_diameter, $fn=16);\n            }\n        }\n    }\n}\n\n// Decorative engraved band\nmodule engraved_band() {\n    color(\"brass\") {\n        band_height = 3;\n        band_z = thimble_height * 0.7;\n        \n        difference() {\n            // Raised band\n            cylinder(h=band_height, d1=base_diameter-2, d2=top_diameter-2, $fn=64);\n            \n            // Engraved zigzag pattern\n            for(i=[0:35]) {\n                angle = i * 10;\n                radius = (base_diameter-2)/2 - (base_diameter-top_diameter)/2 * (band_z/thimble_height);\n                x = cos(angle) * radius;\n                y = sin(angle) * radius;\n                \n                translate([x, y, band_z])\n                    rotate([0, 0, angle+90])\n                        cube([0.5, 2, band_height], center=true);\n            }\n        }\n    }\n}\n\n// Maker's mark on the side\nmodule makers_mark() {\n    color(\"brass\") {\n        mark_z = thimble_height * 0.3;\n        mark_radius = base_diameter/2 - (base_diameter-top_diameter)/2 * (mark_z/thimble_height) - 1;\n        \n        translate([mark_radius, 0, mark_z])\n            rotate([90, 0, 0])\n                linear_extrude(height=0.5)\n                    text(\"W\", size=3, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Assemble the complete thimble\nunion() {\n    thimble_body();\n    base_ridges();\n    dimples();\n    engraved_band();\n    makers_mark();\n}",
    "renders": true
  },
  {
    "historical_artifact": "scriber",
    "openscad_code": "// Bronze Age Scriber Tool (circa 1500-1000 BCE)\n// Used for marking stone and pottery with geometric patterns\n\n// Main parameters\n$fn = 32;\nhandle_length = 65;\nhandle_diameter = 10;\ntip_length = 25;\nshaft_diameter = 4;\n\n// Bronze color for the metal parts\ncolor([0.8, 0.5, 0.2]) {\n    // Main shaft\n    difference() {\n        union() {\n            // Handle grip\n            translate([0, 0, handle_length/2])\n                cylinder(d = handle_diameter, h = handle_length, center = true);\n            \n            // Tapered shaft\n            translate([0, 0, -tip_length/2])\n                cylinder(d1 = handle_diameter * 0.7, d2 = shaft_diameter, h = tip_length + handle_length/2, center = true);\n            \n            // Decorative collar at handle end\n            translate([0, 0, handle_length - 2])\n                cylinder(d = handle_diameter * 1.3, h = 4, center = true);\n        }\n        \n        // Grip grooves - 3 evenly spaced around handle\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([handle_diameter/2 - 0.5, 0, handle_length/2])\n                    cube([1, handle_diameter * 0.8, handle_length * 0.8], center = true);\n        }\n    }\n    \n    // Carving tip - fine point\n    translate([0, 0, -(tip_length + handle_length/2 + 5)])\n        cylinder(d1 = shaft_diameter, d2 = 0.5, h = 10);\n    \n    // Decorative rings on shaft\n    color([0.7, 0.4, 0.15]) {\n        for(i = [1:3]) {\n            translate([0, 0, handle_length/2 - i * 12])\n                cylinder(d = handle_diameter * 1.1, h = 1.5, center = true);\n        }\n    }\n    \n    // Geometric pattern band near tip\n    module pattern_band() {\n        difference() {\n            cylinder(d = handle_diameter * 0.9, h = 6, center = true);\n            \n            // Chevron pattern cutouts\n            for(i = [0:11]) {\n                rotate([0, 0, i * 30])\n                    translate([handle_diameter * 0.35, 0, 0])\n                        cube([2, 1, 8], center = true);\n            }\n        }\n    }\n    \n    translate([0, 0, handle_length/2 - 25])\n        pattern_band();\n}\n\n// Hanging loop at end\ncolor([0.75, 0.45, 0.18]) {\n    translate([0, 0, handle_length + 3])\n        rotate([90, 0, 0])\n            difference() {\n                torus(6, 1.5);\n                translate([0, -7, 0])\n                    cube([20, 14, 3], center = true);\n            }\n}\n\nmodule torus(outer, inner) {\n    rotate_extrude()\n        translate([outer, 0])\n            circle(r = inner);\n}",
    "renders": true
  },
  {
    "historical_artifact": "tablet",
    "openscad_code": "// Babylonian Clay Tablet (cuneiform) - 1800 BCE\n// Hammurabi Code style tablet with cuneiform impressions\n\ntablet_w = 80;\ntablet_h = 55;\ntablet_d = 12;\n\n// Main tablet body\ndifference() {\n    // Base tablet shape\n    color([0.65, 0.5, 0.35]) {\n        translate([-tablet_w/2, -tablet_h/2, 0])\n            cube([tablet_w, tablet_h, tablet_d]);\n    }\n    \n    // Rounded edges\n    color([0.65, 0.5, 0.35]) {\n        translate([0, 0, tablet_d])\n            cylinder(h = tablet_d*2, r = tablet_w/2, $fn=32);\n    }\n}\n\n// Top surface rounding\ndifference() {\n    translate([0, 0, tablet_d-2])\n        color([0.65, 0.5, 0.35]) {\n            cylinder(h = 4, r = tablet_w/2-2, $fn=32);\n        }\n    \n    translate([0, 0, tablet_d])\n        cube([tablet_w+2, tablet_h+2, 10], center=true);\n}\n\n// Cuneiform impressions module\nmodule cuneiform_mark(x, y, angle=0) {\n    translate([x, y, tablet_d-0.3]) {\n        rotate([0, 0, angle]) {\n            difference() {\n                cube([2, 0.5, 0.3], center=true);\n                cube([1.8, 0.3, 0.4], center=true);\n            }\n        }\n    }\n}\n\n// Header dividing line\ndifference() {\n    translate([0, tablet_h/2-10, tablet_d-0.2])\n        cube([tablet_w-10, 1, 0.2], center=true);\n    for(i=[0:3]) {\n        translate([-tablet_w/2+10+i*15, tablet_h/2-10, tablet_d-0.1])\n            cube([2, 1.5, 0.3]);\n    }\n}\n\n// Main text area cuneiform marks\nfor(row=[0:6]) {\n    for(col=[0:8]) {\n        x = -tablet_w/2+8+col*8;\n        y = tablet_h/2-20-row*6;\n        cuneiform_mark(x, y, (row+col)%2*30);\n    }\n}\n\n// Decorative border pattern\nmodule border_notch(x, y) {\n    translate([x, y, tablet_d-0.2]) {\n        difference() {\n            cube([2, 2, 0.4]);\n            cube([1, 1, 0.5], center=true);\n        }\n    }\n}\n\n// Left and right borders\nfor(i=[0:8]) {\n    border_notch(-tablet_w/2+2, -tablet_h/2+5+i*6);\n    border_notch(tablet_w/2-4, -tablet_h/2+5+i*6);\n}\n\n// Top and bottom borders\nfor(i=[0:11]) {\n    border_notch(-tablet_w/2+5+i*6, -tablet_h/2+2);\n    border_notch(-tablet_w/2+5+i*6, tablet_h/2-4);\n}\n\n// Central seal impression\ndifference() {\n    translate([0, 5, tablet_d-0.5]) {\n        cylinder(h = 0.5, r = 8, $fn=32);\n    }\n    \n    // Seal pattern\n    for(i=[0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([5, 0, tablet_d-0.4]) {\n                rotate([90, 0, 0])\n                    cylinder(h = 0.3, r1=0.5, r2=0, $fn=3);\n            }\n        }\n    }\n}\n\n// Corner reinforcements\nmodule corner_reinforcement(x, y) {\n    translate([x, y, 0]) {\n        color([0.6, 0.45, 0.3]) {\n            difference() {\n                cube([6, 6, tablet_d]);\n                translate([3, 3, -1])\n                    cylinder(h = tablet_d+2, r = 4, $fn=16);\n            }\n        }\n    }\n}\n\ncorner_reinforcement(-tablet_w/2+3, -tablet_h/2+3);\ncorner_reinforcement(tablet_w/2-3, -tablet_h/2+3);\ncorner_reinforcement(-tablet_w/2+3, tablet_h/2-3);\ncorner_reinforcement(tablet_w/2-3, tablet_h/2-3);\n\n// Age cracks\nmodule crack(x, y, length, angle) {\n    translate([x, y, tablet_d-0.1]) {\n        rotate([0, 0, angle]) {\n            color([0.3, 0.2, 0.15]) {\n                cube([length, 0.3, 0.2]);\n            }\n        }\n    }\n}\n\ncrack(-20, -10, 15, 25);\ncrack(15, 0, 10, -15);\ncrack(-10, 15, 12, 45);",
    "renders": true
  },
  {
    "historical_artifact": "papyrus",
    "openscad_code": "// Ancient Egyptian Papyrus Scroll with Hieroglyphics - Realistic Style\n// Dimensions: 80mm x 50mm x 3mm when rolled\n\n// Overall papyrus sheet\nmodule papyrus_sheet() {\n    color([0.95, 0.9, 0.75])  // Light papyrus color\n    \n    // Main rectangular sheet with slight waviness\n    union() {\n        // Base sheet\n        difference() {\n            scale([1, 1.02, 1]) cube([75, 45, 0.8], center=true);\n            // Tear at bottom edge for realism\n            translate([0, -22, 0]) cube([15, 4, 2], center=true);\n        }\n        \n        // Thickness variation for realism\n        translate([0, 0, 0.4]) scale([0.98, 0.98, 0.2]) cube([75, 45, 1], center=true);\n    }\n}\n\n// Hieroglyphic symbols as raised dots\nmodule hieroglyph(symbol_type, x, y) {\n    color([0.85, 0.8, 0.65])\n    \n    translate([x, y, 0.5]) {\n        if (symbol_type == 0) {\n            // Eye of Horus\n            sphere(d=1.5, $fn=16);\n            translate([0, 0, 0.8]) sphere(d=0.8, $fn=16);\n        } else if (symbol_type == 1) {\n            // Ankh symbol (simplified)\n            cylinder(h=1.2, d=1.2, $fn=8);\n            translate([0, 1.2, 0]) rotate([90,0,0]) cylinder(h=2, d=0.6, $fn=8);\n        } else if (symbol_type == 2) {\n            // Scarab beetle\n            sphere(d=1.8, $fn=12);\n            translate([0, 0, 1]) sphere(d=1, $fn=12);\n        }\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color([0.7, 0.6, 0.5])\n    \n    // Top border dots\n    for(i = [-35:5:35]) {\n        translate([i, 20, 0.6]) cylinder(h=0.5, d=0.8, $fn=6);\n    }\n    \n    // Bottom border dots (with gap for tear)\n    for(i = [-35:5:-10]) {\n        translate([i, -20, 0.6]) cylinder(h=0.5, d=0.8, $fn=6);\n    }\n    for(i = [-5:5:35]) {\n        translate([i, -20, 0.6]) cylinder(h=0.5, d=0.8, $fn=6);\n    }\n    \n    // Side borders\n    for(j = [-18:4:18]) {\n        translate([36, j, 0.6]) cylinder(h=0.5, d=0.8, $fn=6);\n        translate([-36, j, 0.6]) cylinder(h=0.5, d=0.8, $fn=6);\n    }\n}\n\n// Central cartouche oval\nmodule cartouche() {\n    color([0.8, 0.75, 0.6])\n    \n    // Oval frame\n    translate([0, 0, 0.7]) linear_extrude(height=0.8) {\n        scale([1.3, 0.7, 1]) circle(d=25, $fn=32);\n    }\n    \n    // Inner oval cutout\n    translate([0, 0, 0.8]) linear_extrude(height=0.8) {\n        scale([1.2, 0.6, 1]) circle(d=22, $fn=32);\n    }\n}\n\n// Rope tie at one end\nmodule rope_tie() {\n    color([0.6, 0.4, 0.2])\n    \n    // Main rope\n    rotate([90,0,0]) translate([30, 0, 0]) cylinder(h=3, d=2.5, $fn=12);\n    \n    // Rope wrapping details\n    for(angle = [0:30:330]) {\n        rotate([90, angle, 0]) translate([30, 0, 0]) \n            scale([1, 0.3, 1]) cylinder(h=3.2, d=3, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base papyrus\n    papyrus_sheet();\n    \n    // Border decoration\n    border_pattern();\n    \n    // Central cartouche\n    cartouche();\n    \n    // Hieroglyphics in grid pattern\n    for(row = [-15:6:15]) {\n        for(col = [-30:8:30]) {\n            symbol = (row + col) % 3;\n            hieroglyph(symbol, col, row);\n        }\n    }\n    \n    // Additional symbols in cartouche\n    hieroglyph(0, -4, 0);\n    hieroglyph(1, 0, 0);\n    hieroglyph(2, 4, 0);\n    \n    // Rope tie at right edge\n    rope_tie();\n}",
    "renders": true
  },
  {
    "historical_artifact": "parchment",
    "openscad_code": "// Medieval Royal Charter Parchment\n// 3D printable model with seal and decorative elements\n\n$fn = 32;\n\n// Main parchment dimensions\nparchment_width = 80;\nparchment_height = 60;\nparchment_thickness = 1.5;\n\n// Seal parameters\nseal_diameter = 18;\nseal_thickness = 3;\n\n// Decorative border width\nborder_width = 3;\n\n// Parchment color - aged yellow-brown\ncolor([0.82, 0.71, 0.55]) {\n    // Main parchment body\n    difference() {\n        // Base parchment with rounded corners\n        rounded_cube(parchment_width, parchment_height, parchment_thickness, 5);\n        \n        // Holes for seal cord\n        translate([parchment_width/2 - 5, parchment_height/2 - 5, -0.1])\n            cylinder(h = parchment_thickness + 0.2, d = 2);\n        translate([parchment_width/2 + 5, parchment_height/2 - 5, -0.1])\n            cylinder(h = parchment_thickness + 0.2, d = 2);\n    }\n    \n    // Decorative border pattern\n    translate([0, 0, parchment_thickness])\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([parchment_width/2 - border_width/2, 0, 0])\n        border_pattern();\n    }\n    \n    // Text lines simulation\n    translate([0, 0, parchment_thickness + 0.1])\n    for(y = [-20:10:20]) {\n        translate([0, y, 0])\n        text_line(60, 0.5);\n    }\n    \n    // Wax seal attached with cord\n    translate([parchment_width/2 - 5, parchment_height/2 + 15, -seal_thickness/2])\n    rotate([90, 0, 0])\n    color([0.6, 0.2, 0.2]) {\n        // Seal body\n        cylinder(h = seal_thickness, d = seal_diameter);\n        \n        // Royal crown impression on seal\n        translate([0, 0, seal_thickness + 0.1])\n        scale([0.8, 0.8, 1])\n        royal_crown();\n    }\n    \n    // Hanging cord from seal\n    translate([parchment_width/2 - 5, parchment_height/2 + 15, 0])\n    rotate([0, 90, 0])\n    color([0.5, 0.3, 0.1])\n    cord();\n}\n\n// Module for rounded cube\nmodule rounded_cube(w, h, t, r) {\n    offset = r * (1 - sqrt(2)/2);\n    linear_extrude(height = t)\n    offset(r = r)\n    offset(r = -r)\n    square([w - 2*r, h - 2*r], center = true);\n}\n\n// Module for decorative border elements\nmodule border_pattern() {\n    for(i = [-1:1]) {\n        translate([0, i * (parchment_height/2 - border_width), 0])\n        difference() {\n            cube([border_width, 6, 1.2], center = true);\n            cylinder(h = 2, d = 3, center = true);\n        }\n    }\n}\n\n// Module for text lines\nmodule text_line(length, height) {\n    cube([length, height, 0.3], center = true);\n}\n\n// Module for royal crown impression\nmodule royal_crown() {\n    union() {\n        // Crown base\n        cylinder(h = 2, d = seal_diameter * 0.7);\n        \n        // Crown points\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([seal_diameter * 0.25, 0, 1])\n            cylinder(h = 3, d1 = 3, d2 = 1);\n        }\n        \n        // Central jewel\n        translate([0, 0, 3])\n        sphere(d = 2);\n    }\n}\n\n// Module for hanging cord\nmodule cord() {\n    rotate_extrude(angle = 180, $fn = 16)\n    translate([2, 0, 0])\n    circle(d = 1.5);\n}",
    "renders": true
  },
  {
    "historical_artifact": "vellum",
    "openscad_code": "// Medieval illuminated manuscript on vellum - realistic style\n// Based on 13th century Book of Hours\n\n// Main parameters\nmanuscript_width = 80;\nmanuscript_height = 60;\nmanuscript_thickness = 8;\npage_thickness = 0.5;\ncover_thickness = 1.5;\n\n// Colors\nvellum_color = [0.95, 0.92, 0.82]; // Warm cream vellum\nleather_color = [0.35, 0.20, 0.10]; // Dark brown leather\ngold_color = [0.83, 0.69, 0.22]; // Antique gold\nink_color = [0.15, 0.15, 0.15]; // Iron gall ink\n\n// Main manuscript body\nmodule manuscript_body() {\n    difference() {\n        // Stack of vellum pages\n        color(vellum_color) {\n            for(i = [-manuscript_thickness/2 + cover_thickness : page_thickness : manuscript_thickness/2 - cover_thickness]) {\n                translate([0, 0, i]) {\n                    cube([manuscript_width, manuscript_height, page_thickness * 0.8], center=true);\n                }\n            }\n        }\n        \n        // Hole for binding cord\n        translate([manuscript_width/2 - 5, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=manuscript_height + 2, r=1.5, center=true);\n            }\n        }\n    }\n}\n\n// Leather cover with tooling\nmodule leather_cover() {\n    color(leather_color) {\n        // Front cover\n        translate([0, 0, -manuscript_thickness/2 + cover_thickness/2]) {\n            cube([manuscript_width + 2, manuscript_height + 2, cover_thickness], center=true);\n        }\n        \n        // Back cover\n        translate([0, 0, manuscript_thickness/2 - cover_thickness/2]) {\n            cube([manuscript_width + 2, manuscript_height + 2, cover_thickness], center=true);\n        }\n        \n        // Spine\n        translate([manuscript_width/2 + 1, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cube([manuscript_thickness, manuscript_height + 2, cover_thickness], center=true);\n            }\n        }\n    }\n}\n\n// Decorative tooling pattern on cover\nmodule cover_tooling() {\n    color([0.25, 0.15, 0.08]) {\n        // Central medallion\n        translate([0, 0, -manuscript_thickness/2 + cover_thickness + 0.1]) {\n            cylinder(h=0.2, r=12, center=false);\n        }\n        \n        // Corner decorations\n        for(x = [-manuscript_width/2 + 15, manuscript_width/2 - 15]) {\n            for(y = [-manuscript_height/2 + 15, manuscript_height/2 - 15]) {\n                translate([x, y, -manuscript_thickness/2 + cover_thickness + 0.1]) {\n                    rotate([0, 0, 45]) {\n                        cube([8, 8, 0.2], center=true);\n                        for(i = [-3, 3]) {\n                            translate([i, 0, 0]) {\n                                cylinder(h=0.2, r=1, center=false);\n                            }\n                            translate([0, i, 0]) {\n                                cylinder(h=0.2, r=1, center=false);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Illuminated capital letter\nmodule illuminated_capital() {\n    color(gold_color) {\n        // Gold leaf background\n        translate([-manuscript_width/2 + 10, manuscript_height/2 - 15, -manuscript_thickness/2 + cover_thickness + page_thickness + 0.2]) {\n            cube([12, 12, 0.3], center=false);\n        }\n    }\n    \n    color(ink_color) {\n        // Initial letter \"B\"\n        translate([-manuscript_width/2 + 14, manuscript_height/2 - 12, -manuscript_thickness/2 + cover_thickness + page_thickness + 0.5]) {\n            // Vertical stroke\n            cube([2, 10, 0.2], center=false);\n            \n            // Top curve\n            translate([2, 7, 0]) {\n                cylinder(h=0.2, r=3, center=false);\n            }\n            \n            // Middle bar\n            translate([2, 3, 0]) {\n                cube([4, 2, 0.2], center=false);\n            }\n            \n            // Bottom curve\n            translate([2, 0, 0]) {\n                cylinder(h=0.2, r=3, center=false);\n            }\n        }\n    }\n}\n\n// Text lines on vellum\nmodule manuscript_text() {\n    color(ink_color) {\n        for(i = [1:7]) {\n            // Main text lines\n            translate([-manuscript_width/2 + 15, manuscript_height/2 - 20 - i * 6, -manuscript_thickness/2 + cover_thickness + page_thickness + 0.2]) {\n                cube([manuscript_width - 30, 0.5, 0.1], center=false);\n            }\n        }\n        \n        // Decorative red rubrication\n        color([0.65, 0.15, 0.15]) {\n            translate([-manuscript_width/2 + 15, manuscript_height/2 - 27, -manuscript_thickness/2 + cover_thickness + page_thickness + 0.2]) {\n                cube([8, 0.8, 0.1], center=false);\n            }\n        }\n    }\n}\n\n// Brass clasp for closing\nmodule brass_clasp() {\n    color(gold_color) {\n        // Front clasp\n        translate([manuscript_width/2 + 1, manuscript_height/2 - 10, -manuscript_thickness/2 + cover_thickness/2]) {\n            cube([8, 3, cover_thickness], center=false);\n        }\n        \n        // Back clasp receiver\n        translate([manuscript_width/2 + 1, manuscript_height/2 - 10, manuscript_thickness/2 - cover_thickness/2]) {\n            cube([8, 3, cover_thickness], center=false);\n        }\n        \n        // Hinge detail\n        for(i = [-manuscript_height/2 + 10 : 10 : manuscript_height/2 - 10]) {\n            translate([manuscript_width/2 + 1, i, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=3, r=1, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nmanuscript_body();\nleather_cover();\ncover_tooling();\nilluminated_capital();\nmanuscript_text();\nbrass_clasp();",
    "renders": true
  },
  {
    "historical_artifact": "charter",
    "openscad_code": "// Medieval Royal Charter Seal - 3D Printable Replica\n// Based on 13th century English royal charters\n\n$fn = 32;\n\n// Overall dimensions (mm)\ncharter_width = 60;\ncharter_height = 80;\ncharter_thickness = 2;\nseal_diameter = 25;\nseal_thickness = 3;\n\n// Charter document\ncolor(\"linen\")\ndifference() {\n    // Main parchment\n    cube([charter_width, charter_height, charter_thickness], center=true);\n    \n    // Attachment hole for seal\n    translate([0, -charter_height/2 - 1, 0])\n        rotate([90, 0, 0])\n            cylinder(h=charter_thickness*2 + 2, r=2.5, center=true);\n}\n\n// Seal matrix (double-sided royal seal)\nmodule royal_seal() {\n    // Main seal body\n    color(\"goldenrod\")\n    difference() {\n        cylinder(h=seal_thickness, r=seal_diameter/2, center=true);\n        \n        // Central boss\n        translate([0, 0, seal_thickness/2 - 0.5])\n            cylinder(h=1, r=seal_diameter/4, center=true);\n    }\n    \n    // Front face details - royal arms\n    color(\"saddlebrown\")\n    translate([0, 0, seal_thickness/2 - 0.1])\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([seal_diameter/6, 0, 0])\n                scale([0.8, 0.4, 1])\n                    sphere(r=4);\n    }\n    \n    // Latin inscription around edge\n    color(\"saddlebrown\")\n    translate([0, 0, seal_thickness/2 - 0.2])\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([seal_diameter/2 - 3, 0, 0])\n                cube([1.5, 0.5, 0.5], center=true);\n    }\n    \n    // Back face details - cross\n    color(\"saddlebrown\")\n    translate([0, 0, -seal_thickness/2 + 0.1])\n    union() {\n        cube([seal_diameter/3, 2, 0.5], center=true);\n        cube([2, seal_diameter/3, 0.5], center=true);\n    }\n}\n\n// Wax seal attached to charter\ntranslate([0, -charter_height/2 - seal_thickness/2 - 1, 0])\n    royal_seal();\n\n// Decorative border pattern\nmodule decorative_border() {\n    color(\"saddlebrown\")\n    translate([0, 0, charter_thickness/2 + 0.1])\n    for(i = [0:charter_width/5 - 1]) {\n        translate([-charter_width/2 + 2.5 + i*5, charter_height/2 - 2.5, 0])\n            sphere(r=1.5);\n        translate([-charter_width/2 + 2.5 + i*5, -charter_height/2 + 2.5, 0])\n            sphere(r=1.5);\n    }\n    for(j = [0:charter_height/5 - 1]) {\n        translate([charter_width/2 - 2.5, -charter_height/2 + 2.5 + j*5, 0])\n            sphere(r=1.5);\n        translate([-charter_width/2 + 2.5, -charter_height/2 + 2.5 + j*5, 0])\n            sphere(r=1.5);\n    }\n}\n\ndecorative_border();\n\n// Handwritten text lines (simplified representation)\nmodule text_lines() {\n    color(\"saddlebrown\")\n    for(line = [0:5]) {\n        translate([-charter_width/2 + 5, charter_height/2 - 10 - line*8, charter_thickness/2 + 0.1])\n            cube([charter_width - 10, 0.5, 0.2]);\n    }\n}\n\ntext_lines();\n\n// Initial letter decoration (illuminated letter)\ncolor(\"darkred\")\ntranslate([-charter_width/2 + 5, charter_height/2 - 15, charter_thickness/2 + 0.2])\n    scale([1, 1.5, 1])\n        cube([6, 6, 0.3]);\n\n// Royal signature line\ncolor(\"saddlebrown\")\ntranslate([0, -charter_height/2 + 15, charter_thickness/2 + 0.1])\n    cube([25, 0.5, 0.2]);\n\n// Fold marks (where charter was folded for transport)\ncolor(\"saddlebrown\")\nfor(fold = [-1, 1]) {\n    translate([fold * charter_width/4, 0, charter_thickness/2 + 0.1])\n        cube([0.5, charter_height - 10, 0.1]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "deed",
    "openscad_code": "// Medieval Wax-Sealed Deed Scroll\n// 14th century European property deed\n\nuse <colors.scad>  // fallback: render with natural colors\n\n// Overall dimensions for 3D printing\nscroll_length = 75;\nscroll_diameter = 12;\nseal_diameter = 18;\nseal_thickness = 3;\n\nmodule scroll_body() {\n    // parchment rolled into loose cylinder\n    difference() {\n        // main roll\n        color(\"antique_white\")\n        cylinder(h = scroll_length, d = scroll_diameter, $fn = 32);\n\n        // hollow core so it prints without supports\n        translate([0, 0, -0.1])\n            cylinder(h = scroll_length + 0.2, d = scroll_diameter - 2, $fn = 32);\n    }\n\n    // slightly unrolled outer flap\n    translate([scroll_diameter/2, 0, scroll_length/2])\n        rotate([0, 85, 0])\n        color(\"antique_white\")\n        cube([scroll_length/3, scroll_diameter, 0.8], center = true);\n}\n\nmodule seal() {\n    // disk of red sealing wax\n    color(\"firebrick\")\n    translate([0, 0, scroll_length - seal_thickness/2])\n    cylinder(h = seal_thickness, d = seal_diameter, $fn = 64);\n\n    // simple heraldic emblem raised relief\n    translate([0, 0, scroll_length + 0.2])\n    color(\"darkred\")\n    linear_extrude(height = 0.5)\n    union() {\n        circle(d = 12, $fn = 32);\n        // cross\n        square([1, 12], center = true);\n        square([12, 1], center = true);\n    }\n}\n\nmodule ribbon() {\n    // twin cords holding seal\n    for (offset = [-2.5, 2.5]) {\n        color(\"sienna\")\n        translate([offset, 0, scroll_length - 3])\n        cube([1.5, scroll_diameter, 2.5]);\n    }\n}\n\nmodule inscription_lines() {\n    // shallow engraved text lines on parchment\n    for (y = [-scroll_diameter/2 + 3 : 4 : scroll_diameter/2 - 3]) {\n        translate([0, y, scroll_length/2])\n        color(\"wheat\")\n        cube([scroll_length - 10, 0.4, 0.2], center = true);\n    }\n}\n\nmodule decorative_borders() {\n    // repeating leaf motifs at top and bottom edges\n    module leaf() {\n        // simple stylized leaf\n        rotate([-90, 0, 0])\n        color(\"goldenrod\")\n        translate([0, 0, scroll_diameter/2 + 0.5])\n        cylinder(h = 1.2, d1 = 2.5, d2 = 1.2, $fn = 6);\n    }\n\n    for (i = [0 : 6 : scroll_length - 6]) {\n        translate([i - scroll_length/2 + 3, 0, 0])\n            leaf();\n        translate([i - scroll_length/2 + 3, 0, scroll_length])\n            rotate([0, 180, 0])\n            leaf();\n    }\n}\n\n// Assemble the deed\nunion() {\n    scroll_body();\n    seal();\n    ribbon();\n    inscription_lines();\n    decorative_borders();\n}",
    "renders": true
  },
  {
    "historical_artifact": "writ",
    "openscad_code": "// Medieval Writ Scroll - 13th Century English Royal Charter Style\n// Dimensions: ~80mm long x ~30mm diameter when rolled\n\n// Main scroll body module\nmodule scroll_body() {\n    // Central scroll cylinder core\n    cylinder(h=60, r=12, $fn=64);\n    \n    // Paper edges - slightly thicker rolled parchment\n    translate([0, 0, -1])\n        cylinder(h=62, r=13, $fn=64);\n}\n\n// Wax seal module with heraldic emblem\nmodule wax_seal() {\n    color(\"darkred\") {\n        // Main seal disk\n        translate([0, 0, 0])\n            cylinder(h=4, r=10, $fn=32);\n        \n        // Heraldic lion rampant in relief\n        translate([0, 0, 4.1])\n            scale([0.8, 0.8, 1])\n                union() {\n                    // Lion body\n                    translate([0, -2, 0])\n                        cube([6, 12, 1.5], center=true);\n                    \n                    // Lion head\n                    translate([0, 6, 0])\n                        sphere(d=6, $fn=16);\n                    \n                    // Foreleg raised\n                    translate([-3, 0, 0])\n                        rotate([30, 0, 0])\n                            cube([2, 8, 1.5], center=true);\n                    \n                    // Tail\n                    translate([4, -4, 0])\n                        rotate([0, 0, 45])\n                            cube([1.5, 10, 1.5], center=true);\n                }\n    }\n}\n\n// Hanging ribbon with inscription lines\nmodule hanging_ribbon() {\n    color(\"sienna\") {\n        // Main ribbon strip\n        translate([0, -15, 20])\n            cube([30, 3, 1], center=true);\n        \n        // Text lines (simulated inscription)\n        for(i = [-1, 0, 1]) {\n            translate([i*8, -15, 21])\n                cube([6, 1, 0.5], center=true);\n        }\n    }\n}\n\n// Parchment texture lines\nmodule parchment_texture() {\n    color(\"burlywood\") {\n        // Vertical grain lines\n        for(i = [-5:5]) {\n            rotate([0, 90, 0])\n                translate([i*2, 0, 30])\n                    cube([0.5, 60, 2], center=true);\n        }\n    }\n}\n\n// Decorative border pattern\nmodule decorative_border() {\n    color(\"goldenrod\") {\n        // Top border\n        translate([0, 12, 30])\n            for(i = [-10:10]) {\n                translate([i*2, 0, 0])\n                    sphere(d=1.5, $fn=8);\n            }\n        \n        // Bottom border\n        translate([0, -12, 30])\n            for(i = [-10:10]) {\n                translate([i*2, 0, 0])\n                    sphere(d=1.5, $fn=8);\n            }\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Main scroll body\n        scroll_body();\n        \n        // Parchment texture on outside\n        translate([0, 0, 30])\n            parchment_texture();\n        \n        // Decorative borders\n        decorative_border();\n        \n        // Hanging ribbon\n        hanging_ribbon();\n    }\n    \n    // Hollow center for printability\n    translate([0, 0, 5])\n        cylinder(h=50, r=8, $fn=32);\n}\n\n// Wax seal attached with string\ntranslate([15, 15, 30])\n    rotate([90, 0, 0])\n        union() {\n            // String attaching seal\n            color(\"brown\")\n                cylinder(h=15, r=0.5, $fn=8);\n            \n            // Actual seal\n            translate([0, 0, 17])\n                wax_seal();\n        }",
    "renders": true
  },
  {
    "historical_artifact": "antiphonary",
    "openscad_code": "// Antiphonary Medieval Choir Book\n// Medium complexity realistic model for 3D printing\n\nbook_width = 40;\nbook_height = 55;\nbook_thickness = 12;\ncover_thickness = 2;\npage_thickness = 8;\nspine_radius = 3;\n\nmodule clasps() {\n    // Metal clasps to keep book closed\n    color(\"gold\") {\n        translate([book_width/2 - 3, 0, book_thickness/2 + 1]) {\n            cube([2, 8, 1], center=true);\n            translate([0, 4, 0]) cylinder(h=1, r=1.5, $fn=16);\n        }\n        mirror([1,0,0]) translate([book_width/2 - 3, 0, book_thickness/2 + 1]) {\n            cube([2, 8, 1], center=true);\n            translate([0, 4, 0]) cylinder(h=1, r=1.5, $fn=16);\n        }\n    }\n}\n\nmodule decorative_corners() {\n    // Decorative brass corner protectors\n    color(\"gold\") {\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * book_width/2, y * book_height/2, 0]) {\n                    difference() {\n                        cube([4, 4, cover_thickness + 0.5], center=true);\n                        cylinder(h=cover_thickness + 1, r=2.5, center=true, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule spine_details() {\n    // Raised bands on spine\n    color(\"saddlebrown\") {\n        for(i = [-1, 0, 1]) {\n            translate([0, i * 12, book_thickness/2 - 1]) {\n                difference() {\n                    cube([book_thickness + 2, 6, 3], center=true);\n                    sphere(r=book_thickness/2 + 1);\n                }\n            }\n        }\n    }\n}\n\nmodule pages() {\n    // Individual page edges\n    color(\"ivory\") {\n        translate([0, 0, -page_thickness/2 + 0.5]) {\n            difference() {\n                cube([book_width - 2, book_height - 2, page_thickness], center=true);\n                translate([0, 0, -1]) cube([book_width - 4, book_height - 4, page_thickness + 2], center=true);\n            }\n        }\n    }\n}\n\nmodule cover() {\n    // Main leather cover\n    color(\"saddlebrown\") {\n        translate([0, 0, 0]) {\n            difference() {\n                // Front cover\n                cube([book_width, book_height, cover_thickness], center=true);\n                // Inner cavity\n                translate([0, 0, -0.5]) cube([book_width - 2, book_height - 2, cover_thickness + 1], center=true);\n            }\n        }\n    }\n}\n\nmodule boss_decoration() {\n    // Central brass boss decoration\n    color(\"gold\") {\n        translate([0, 0, cover_thickness + 1]) {\n            cylinder(h=2, r=6, $fn=32);\n            translate([0, 0, 2]) cylinder(h=1, r=4, $fn=32);\n            translate([0, 0, 3]) sphere(r=2);\n        }\n    }\n}\n\nmodule bookmark() {\n    // Silk bookmark ribbon\n    color(\"red\") {\n        translate([0, book_height/2 - 2, 0]) {\n            cube([1, book_height/2, 0.5], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Book body\n    cover();\n    \n    // Pages visible on edges\n    pages();\n    \n    // Spine details\n    spine_details();\n    \n    // Corner protectors\n    decorative_corners();\n    \n    // Central boss\n    boss_decoration();\n    \n    // Clasps\n    clasps();\n    \n    // Bookmark ribbon\n    bookmark();\n}\n\n// Rotate to lie flat\nrotate([90, 0, 0]) {\n    // Additional detail: inscribed title area\n    color(\"darkgoldenrod\") {\n        translate([0, -book_height/4, cover_thickness + 0.5]) {\n            cube([book_width/2, 8, 0.5], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "gradual",
    "openscad_code": "// Gradual (medieval liturgical book) - 3D printable model\n// Dimensions: ~80mm x 60mm x 15mm\n\n// Main dimensions\nbook_width = 80;\nbook_height = 60;\nbook_thickness = 15;\npage_thickness = 1.5;\ncover_thickness = 2;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255];\nleather_color = [101/255, 67/255, 33/255];\npage_color = [245/255, 222/255, 179/255];\ngold_color = [212/255, 175/255, 55/255];\n\nmodule book_cover() {\n    difference() {\n        // Main wooden board\n        color(wood_color)\n        cube([book_width, book_height, cover_thickness], center=true);\n        \n        // Recessed panel\n        translate([0, 0, -0.5])\n        cube([book_width-6, book_height-6, cover_thickness], center=true);\n    }\n}\n\nmodule metal_corner(x, y) {\n    translate([x, y, 0])\n    color(gold_color)\n    difference() {\n        cube([6, 6, cover_thickness+0.5], center=true);\n        cylinder(h=cover_thickness+1, r=1.5, center=true);\n    }\n}\n\nmodule clasp() {\n    translate([book_width/2-5, 0, 0])\n    rotate([90, 0, 0])\n    color(gold_color)\n    difference() {\n        cube([8, 4, 2], center=true);\n        translate([0, -2.5, 0])\n        cylinder(h=3, r=1.5, center=true);\n    }\n}\n\nmodule pages() {\n    difference() {\n        // Main page block\n        color(page_color)\n        for(i = [-page_thickness*2:page_thickness/2:page_thickness*2]) {\n            translate([i/2, 0, 0])\n            cube([book_width-cover_thickness*2, book_height-cover_thickness*2, book_thickness-cover_thickness*2], center=true);\n        }\n        \n        // Spine curve\n        translate([-book_width/2+cover_thickness, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=book_height-cover_thickness*2, r=book_thickness/4, center=true);\n    }\n}\n\nmodule decorative_rivets() {\n    // Rivets along spine\n    for(i = [-book_height/2+5:10:book_height/2-5]) {\n        translate([-book_width/2-cover_thickness/2, i, 0])\n        color(gold_color)\n        sphere(r=1.5);\n    }\n}\n\nmodule spine_bands() {\n    // Raised bands on spine\n    for(i = [-book_height/3, 0, book_height/3]) {\n        translate([-book_width/2-cover_thickness/2, i, 0])\n        color(leather_color)\n        cube([cover_thickness, 3, book_thickness], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Front cover\n    translate([0, 0, book_thickness/2])\n    book_cover();\n    \n    // Back cover\n    translate([0, 0, -book_thickness/2])\n    book_cover();\n    \n    // Pages\n    pages();\n    \n    // Metal corners\n    metal_corner(book_width/2-3, book_height/2-3);\n    metal_corner(book_width/2-3, -book_height/2+3);\n    metal_corner(-book_width/2+3, book_height/2-3);\n    metal_corner(-book_width/2+3, -book_height/2+3);\n    \n    // Clasps\n    translate([0, book_height/2-5, book_thickness/2])\n    clasp();\n    translate([0, -book_height/2+5, -book_thickness/2])\n    rotate([0, 180, 0])\n    clasp();\n    \n    // Spine details\n    decorative_rivets();\n    spine_bands();\n    \n    // Leather covering\n    color(leather_color)\n    translate([0, 0, book_thickness/2+cover_thickness/2])\n    cube([book_width+1, book_height+1, 0.5], center=true);\n    translate([0, 0, -book_thickness/2-cover_thickness/2])\n    cube([book_width+1, book_height+1, 0.5], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "troper",
    "openscad_code": "// Medieval Troper (chant book) - OpenSCAD model\n// Historically accurate: 13th century manuscript with wooden binding and metal clasps\n\n$fn = 32;\n\n// Main dimensions\nbook_width = 65;\nbook_height = 85;\nbook_thickness = 20;\npage_thickness = 16;\ncover_thickness = 2;\n\nmodule book_body() {\n    difference() {\n        // Main block of pages\n        color([0.95, 0.93, 0.85])\n        cube([book_width, book_height, page_thickness]);\n        \n        // Carved center gutter\n        translate([book_width/2 - 1, -1, -1])\n            cube([2, book_height + 2, page_thickness + 2]);\n    }\n}\n\nmodule wooden_cover() {\n    // Front cover\n    color([0.4, 0.25, 0.1])\n    translate([-cover_thickness, -1, -1])\n        cube([cover_thickness, book_height + 2, page_thickness + 2]);\n    \n    // Back cover\n    translate([book_width, -1, -1])\n        cube([cover_thickness, book_height + 2, page_thickness + 2]);\n}\n\nmodule spine_ribs() {\n    // Raised bands on spine (typical of medieval bindings)\n    for (i = [1:3]) {\n        translate([-cover_thickness, \n                   i * book_height/4 - 5, \n                   page_thickness/2 - 2])\n        rotate([90, 0, 0])\n        color([0.3, 0.2, 0.08])\n            cylinder(h = cover_thickness + 1, r = 1.5);\n    }\n}\n\nmodule metal_clasps() {\n    // Brass clasp on front cover\n    color([0.8, 0.6, 0.2])\n    translate([-cover_thickness - 3, book_height - 8, page_thickness - 3])\n        cube([3, 6, 1]);\n    \n    // Matching clasp on back\n    translate([book_width, book_height - 8, page_thickness - 3])\n        cube([3, 6, 1]);\n}\n\nmodule decorative_corners() {\n    // Metal corner protectors\n    for (x = [0, book_width - 5]) {\n        for (y = [0, book_height - 5]) {\n            translate([x - 1, y - 1, -1])\n                color([0.7, 0.5, 0.1])\n                cube([5, 5, 1]);\n        }\n    }\n}\n\nmodule red_initial() {\n    // Decorative red initial (typical medieval illumination)\n    translate([book_width/2 - 5, book_height/2 + 15, page_thickness + 0.1])\n    color([0.7, 0.1, 0.1])\n    linear_extrude(height = 0.5)\n        text(\"T\", size = 8, font = \"Liberation Serif:style=Bold\");\n}\n\nmodule staff_lines() {\n    // Neume notation staff lines\n    for (i = [1:4]) {\n        translate([5, book_height/2 + 10 + i * 3, page_thickness + 0.1])\n        color([0.2, 0.2, 0.2])\n        cube([book_width - 10, 0.3, 0.2]);\n    }\n}\n\n// Assembly\nbook_body();\nwooden_cover();\nspine_ribs();\nmetal_clasps();\ndecorative_corners();\nred_initial();\nstaff_lines();",
    "renders": true
  },
  {
    "historical_artifact": "evangeliary",
    "openscad_code": "// Evangeliary historical artifact - Medieval book cover with decorative elements\n// Realistic style, medium complexity\n\n// Overall dimensions\nbook_width = 70;\nbook_height = 90;\nbook_thickness = 15;\ncover_thickness = 3;\npage_thickness = 9;\n\n// Decorative elements\ncross_height = 25;\ncross_width = 20;\ngem_radius = 4;\nboss_radius = 8;\nboss_height = 2;\n\n// Main book body\nmodule book_body() {\n    difference() {\n        // Main book block\n        cube([book_width, book_height, book_thickness], center=true);\n        \n        // Hollow for pages\n        translate([0, 0, -cover_thickness/2])\n            cube([book_width-4, book_height-4, page_thickness], center=true);\n    }\n}\n\n// Front cover with decorations\nmodule front_cover() {\n    color(\"saddlebrown\")\n    translate([0, 0, book_thickness/2 - cover_thickness/2])\n    difference() {\n        // Cover plate\n        cube([book_width, book_height, cover_thickness], center=true);\n        \n        // Border recess\n        translate([0, 0, -0.5])\n            cube([book_width-4, book_height-4, cover_thickness+1], center=true);\n    }\n    \n    // Central cross\n    color(\"gold\")\n    translate([0, 0, book_thickness/2 + 0.5])\n    union() {\n        // Vertical bar\n        cube([cross_width/3, cross_height, cover_thickness/2], center=true);\n        \n        // Horizontal bar\n        translate([0, cross_height/4, 0])\n            cube([cross_width, cross_width/3, cover_thickness/2], center=true);\n    }\n    \n    // Decorative gems at cross ends\n    color(\"darkred\")\n    for(pos = [[0, cross_height/2, 0], [0, -cross_height/2, 0], \n               [cross_width/2, cross_height/4, 0], [-cross_width/2, cross_height/4, 0]]) {\n        translate(pos + [0, 0, book_thickness/2 + 1])\n            sphere(gem_radius, $fn=8);\n    }\n    \n    // Corner bosses\n    color(\"goldenrod\")\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x*(book_width/2-10), y*(book_height/2-10), book_thickness/2 + 1])\n                cylinder(boss_height, boss_radius, boss_radius, $fn=12);\n}\n\n// Spine with raised bands\nmodule spine() {\n    color(\"saddlebrown\")\n    translate([-book_width/2 - cover_thickness/2, 0, 0])\n        cube([cover_thickness, book_height, book_thickness], center=true);\n    \n    // Raised bands\n    color(\"saddlebrown\")\n    for(i = [-1, 0, 1]) {\n        translate([-book_width/2 - cover_thickness/2, i*20, book_thickness/2 - cover_thickness/2])\n            cube([cover_thickness+1, 8, cover_thickness], center=true);\n    }\n}\n\n// Back cover\nmodule back_cover() {\n    color(\"saddlebrown\")\n    translate([0, 0, -book_thickness/2 + cover_thickness/2])\n        cube([book_width, book_height, cover_thickness], center=true);\n}\n\n// Clasps for closure\nmodule clasps() {\n    color(\"goldenrod\")\n    for(side = [-1, 1]) {\n        translate([side*(book_width/2-2), book_height/2-5, 0])\n            cube([4, 10, book_thickness/2], center=true);\n        \n        // Clasp ring\n        translate([side*(book_width/2-2), book_height/2+5, 0])\n            cylinder(4, 3, 3, $fn=12);\n    }\n}\n\n// Page edges texture\nmodule page_edges() {\n    color(\"ivory\")\n    translate([0, -book_height/2-0.5, 0])\n    difference() {\n        cube([book_width-2, 1, page_thickness], center=true);\n        \n        // Page lines\n        for(i = [-1:0.5:1]) {\n            translate([0, 0, i*page_thickness/2])\n                cube([book_width-2, 1.1, 0.2], center=true);\n        }\n    }\n}\n\n// Assemble the evangeliary\nbook_body();\nfront_cover();\nspine();\nback_cover();\nclasps();\nrotate([90, 0, 0])\n    page_edges();",
    "renders": true
  },
  {
    "historical_artifact": "epistolary",
    "openscad_code": "// Medieval Epistolary (Letter Case) - 15th Century Style\n// Typical size for holding wax-sealed letters and documents\n\n$fa = 2;\n$fs = 0.5;\n\n// Main dimensions\ncase_width = 80;\ncase_height = 60;\ncase_depth = 25;\nwall_thickness = 2.5;\nhinge_radius = 3;\n\n// Colors\nwood_color = \"#8B4513\";\nleather_color = \"#3C2414\";\nmetal_color = \"#B87333\";\n\n// Wood grain texture module\nmodule wood_texture(width, height, depth) {\n    for (i = [0:2:width]) {\n        translate([i, 0, -0.2])\n            cube([0.5, height, 0.4]);\n    }\n}\n\n// Decorative metal corner\nmodule metal_corner() {\n    color(metal_color)\n    union() {\n        // Main corner plate\n        translate([0, 0, 0])\n            cube([8, 8, 1.5]);\n        \n        // Decorative rivets\n        for (x = [1.5, 6.5])\n            for (y = [1.5, 6.5])\n                translate([x, y, 1.5])\n                    cylinder(h=1, r=0.8, $fn=8);\n    }\n}\n\n// Hinge mechanism\nmodule hinge() {\n    color(metal_color)\n    union() {\n        // Hinge barrel\n        cylinder(h=case_width, r=hinge_radius, $fn=16);\n        \n        // Hinge pins\n        for (i = [0:10:case_width-10])\n            translate([0, 0, i])\n                cylinder(h=3, r=hinge_radius+0.5, $fn=8);\n    }\n}\n\n// Main case body\nmodule case_body() {\n    color(wood_color)\n    difference() {\n        // Outer shell\n        cube([case_width, case_height, case_depth]);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness/2])\n            cube([case_width-wall_thickness*2, case_height-wall_thickness*2, case_depth-wall_thickness]);\n    }\n    \n    // Wood texture on top\n    translate([0, 0, case_depth])\n        wood_texture(case_width, case_height, 0.5);\n}\n\n// Leather strap with buckle\nmodule leather_strap() {\n    color(leather_color)\n    union() {\n        // Main strap\n        translate([case_width+5, case_height/2-5, 0])\n            cube([20, 10, 2]);\n        \n        // Buckle\n        color(metal_color)\n        translate([case_width+20, case_height/2-5, 1])\n            difference() {\n                cube([8, 10, 2]);\n                translate([4, 5, -0.5])\n                    cylinder(h=3, r=2, $fn=16);\n            }\n    }\n}\n\n// Wax seal impression on front\nmodule wax_seal() {\n    color(\"#8B0000\")\n    translate([case_width/2-10, case_height/2-10, case_depth+0.5])\n    union() {\n        cylinder(h=3, r=10, $fn=32);\n        translate([0, 0, 3])\n            cylinder(h=1, r=8, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Bottom half\n    translate([0, 0, 0])\n        case_body();\n    \n    // Top half (lid)\n    translate([0, 0, case_depth])\n        rotate([180, 0, 0])\n            case_body();\n    \n    // Hinge connecting halves\n    translate([case_width/2, -hinge_radius, case_depth])\n        rotate([90, 0, 0])\n            hinge();\n    \n    // Metal corners\n    for (x = [0, case_width-8])\n        for (y = [0, case_height-8])\n            translate([x, y, case_depth-1.5])\n                metal_corner();\n    \n    // Leather strap\n    translate([0, 0, case_depth])\n        leather_strap();\n    \n    // Wax seal decoration\n    wax_seal();\n}",
    "renders": true
  },
  {
    "historical_artifact": "homiliary",
    "openscad_code": "// Homiliary - Medieval illuminated manuscript with wooden covers and metal fittings\n// 3D printable model with historical accuracy features\n\n// Overall dimensions (mm)\nbook_width = 75;\nbook_height = 105;\nbook_thickness = 18;\npage_thickness = 12;\n\n// Wooden cover thickness\ncover_thickness = 3;\n\n// Metal corner pieces\ncorner_size = 8;\ncorner_thickness = 1;\n\n// Central boss dimensions\nboss_radius = 12;\nboss_height = 2;\n\n// Spine details\nspine_rib_width = 4;\nspine_rib_height = 1;\nspine_rib_count = 5;\n\n// Decorative elements\nrivet_radius = 1;\nrivet_height = 0.5;\nrivet_count = 4;\n\n// Color definitions\nwood_color = [139/255, 90/255, 43/255];\nmetal_color = [192/255, 192/255, 192/255];\npage_color = [245/255, 245/255, 220/255];\n\nmodule metal_corner(x_pos, y_pos, z_pos) {\n    color(metal_color)\n    translate([x_pos, y_pos, z_pos])\n    union() {\n        // Main corner piece\n        difference() {\n            cube([corner_size, corner_size, corner_thickness]);\n            // Rounded inner corner\n            translate([corner_size-2, corner_size-2, -1])\n                cylinder(h=corner_thickness+2, r=2);\n        }\n        \n        // Decorative rivets\n        for(i=[-1, 1]) {\n            for(j=[-1, 1]) {\n                translate([corner_size/2 + i*2.5, corner_size/2 + j*2.5, corner_thickness])\n                    cylinder(h=rivet_height, r=rivet_radius);\n            }\n        }\n    }\n}\n\nmodule spine_ribs() {\n    color(metal_color)\n    for(i=[0:spine_rib_count-1]) {\n        translate([-book_thickness/2 - 0.1, \n                  -book_height/2 + (book_height/(spine_rib_count-1))*i, \n                  0])\n            cube([spine_rib_height, spine_rib_width, book_thickness + page_thickness]);\n    }\n}\n\nmodule central_boss() {\n    color(metal_color)\n    difference() {\n        // Main boss\n        translate([0, 0, cover_thickness])\n            cylinder(h=boss_height, r=boss_radius);\n        \n        // Decorative ring\n        translate([0, 0, cover_thickness + boss_height/2])\n            cylinder(h=boss_height + 0.1, r=boss_radius - 2);\n        \n        // Center rivet\n        translate([0, 0, cover_thickness + boss_height - 0.1])\n            cylinder(h=rivet_height + 0.2, r=rivet_radius + 0.5);\n    }\n}\n\n// Front cover\ncolor(wood_color)\ntranslate([0, 0, -page_thickness/2 - cover_thickness/2])\n    cube([book_width, book_height, cover_thickness], center=true);\n\n// Back cover\ncolor(wood_color)\ntranslate([0, 0, page_thickness/2 + cover_thickness/2])\n    cube([book_width, book_height, cover_thickness], center=true);\n\n// Pages\ncolor(page_color)\ncube([book_width - 2, book_height - 2, page_thickness], center=true);\n\n// Spine\ncolor(wood_color)\ntranslate([-book_width/2 - cover_thickness/2, 0, 0])\n    cube([cover_thickness, book_height, page_thickness + 2*cover_thickness], center=true);\n\n// Front cover decorations\ntranslate([0, 0, -page_thickness/2 - cover_thickness]) {\n    // Metal corners\n    metal_corner(-book_width/2, -book_height/2, 0);\n    metal_corner(book_width/2 - corner_size, -book_height/2, 0);\n    metal_corner(-book_width/2, book_height/2 - corner_size, 0);\n    metal_corner(book_width/2 - corner_size, book_height/2 - corner_size, 0);\n    \n    // Central boss\n    central_boss();\n}\n\n// Back cover decorations (mirror of front)\ntranslate([0, 0, page_thickness/2 + cover_thickness])\nmirror([0, 0, 1]) {\n    // Metal corners\n    metal_corner(-book_width/2, -book_height/2, 0);\n    metal_corner(book_width/2 - corner_size, -book_height/2, 0);\n    metal_corner(-book_width/2, book_height/2 - corner_size, 0);\n    metal_corner(book_width/2 - corner_size, book_height/2 - corner_size, 0);\n    \n    // Central boss\n    central_boss();\n}\n\n// Spine decorations\ntranslate([0, 0, 0]) {\n    spine_ribs();\n}",
    "renders": true
  },
  {
    "historical_artifact": "martyrology",
    "openscad_code": "// Martyrology tablet - historical ecclesiastical artifact\n// Dimensions scaled for 3D printing (80mm x 60mm x 12mm)\n\n// Base tablet body\ndifference() {\n    color([0.85, 0.8, 0.75]) cube([80, 60, 12], center=true);\n    \n    // Central recess for inscription\n    translate([0, 0, 5.5])\n        cube([70, 50, 2], center=true);\n}\n\n// Decorative border pattern\nmodule border_element(x, y) {\n    translate([x, y, 5.9])\n        color([0.7, 0.6, 0.5]) cylinder(h=0.5, r=1.5, $fn=6);\n}\n\n// Create border pattern on top surface\nfor(i=[-35:7:35]) {\n    border_element(i, 27);\n    border_element(i, -27);\n}\nfor(j=[-20:7:20]) {\n    border_element(38.5, j);\n    border_element(-38.5, j);\n}\n\n// Corner crosses\nmodule corner_cross(x, y) {\n    translate([x, y, 6])\n    union() {\n        color([0.6, 0.5, 0.4]) cube([8, 2, 1], center=true);\n        color([0.6, 0.5, 0.4]) cube([2, 8, 1], center=true);\n    }\n}\n\ncorner_cross(33, 23);\ncorner_cross(-33, 23);\ncorner_cross(33, -23);\ncorner_cross(-33, -23);\n\n// Central inscription panel with raised Latin text\ntranslate([0, 10, 6])\n    color([0.5, 0.4, 0.3]) cube([40, 5, 0.5], center=true);\ntranslate([0, 0, 6])\n    color([0.5, 0.4, 0.3]) cube([40, 5, 0.5], center=true);\ntranslate([0, -10, 6])\n    color([0.5, 0.4, 0.3]) cube([40, 5, 0.5], center=true);\n\n// Small circular rivets at corners for mounting\nmodule rivet(x, y) {\n    translate([x, y, 6.5])\n        color([0.4, 0.35, 0.3]) cylinder(h=2, r=2.5, $fn=12);\n}\n\nrivet(36, 26);\nrivet(-36, 26);\nrivet(36, -26);\nrivet(-36, -26);\n\n// Side decorative grooves\ndifference() {\n    translate([0, 0, 0])\n        cube([80, 60, 12], center=true);\n    \n    for(side=[-1, 1]) {\n        translate([side * 38, 0, 0])\n            cube([2, 56, 11], center=true);\n    }\n}\n\n// Small hanging loop at top\ntranslate([0, 30, 0])\nrotate([90, 0, 0])\n    color([0.6, 0.5, 0.45]) cylinder(h=2, r1=3, r2=3, center=true);\ndifference() {\n    translate([0, 30, 0])\n    rotate([90, 0, 0])\n        color([0.6, 0.5, 0.45]) cylinder(h=4, r1=5, r2=5, center=true);\n    translate([0, 30, 0])\n    rotate([90, 0, 0])\n        cylinder(h=5, r1=2.5, r2=2.5, center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "passional",
    "openscad_code": "// Medieval Passional Book Box\n// A small devotional book box used in the 14th-15th century for storing prayers and relics\n\n// Overall dimensions (in mm)\nbook_length = 80;\nbook_width = 60;\nbook_thickness = 25;\npage_thickness = 2;\ncover_thickness = 3;\n\n// Book cover\nmodule book_cover() {\n    // Main cover body\n    color([0.6, 0.3, 0.1])  // Dark brown leather color\n    difference() {\n        cube([book_length, book_width, cover_thickness], center=true);\n        \n        // Inner cavity for pages\n        translate([0, 0, -cover_thickness/2 + 0.5])\n        cube([book_length-6, book_width-6, cover_thickness], center=true);\n    }\n    \n    // Raised bands on spine (simulating leather cords)\n    for(i = [-20:10:20]) {\n        translate([book_length/2 - 3, i, 0])\n        color([0.5, 0.25, 0.08])\n        cube([2, 6, cover_thickness+0.5]);\n    }\n    \n    // Decorative corner pieces\n    for(x = [-book_length/2+5:book_length-10:book_length-10]) {\n        for(y = [-book_width/2+5:book_width-10:book_width-10]) {\n            translate([x, y, cover_thickness/2])\n            color([0.8, 0.6, 0.2])  // Brass color\n            cylinder(h=1, r=3, $fn=32);\n        }\n    }\n}\n\n// Metal clasp\nmodule clasp() {\n    color([0.7, 0.7, 0.7])  // Silver color\n    translate([book_length/2-5, 0, cover_thickness/2+1])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=15, r=2, $fn=16);\n        translate([0, 0, -1])\n        cube([4, 2, 17], center=true);\n    }\n    \n    // Catch plate\n    translate([-book_length/2+3, 0, cover_thickness/2])\n    color([0.8, 0.6, 0.2])\n    cube([6, 8, 1]);\n}\n\n// Decorative cross on cover\nmodule cover_cross() {\n    color([0.8, 0.6, 0.2])  // Brass color\n    translate([0, 0, cover_thickness/2+0.5])\n    union() {\n        cube([25, 5, 1]);\n        cube([5, 35, 1]);\n    }\n    \n    // Small decorative studs\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([10, 10, cover_thickness/2+1])\n        sphere(r=1.5);\n    }\n}\n\n// Pages inside\nmodule pages() {\n    color([0.95, 0.9, 0.7])  // Aged parchment color\n    translate([0, 0, 0])\n    difference() {\n        cube([book_length-10, book_width-10, page_thickness*4], center=true);\n        \n        // Rounded page edges\n        translate([0, 0, -page_thickness*2-1])\n        cylinder(h=page_thickness*4+2, r=(book_width-10)/2-2, $fn=64);\n    }\n}\n\n// Assembly\nmodule passional_book() {\n    // Bottom cover\n    translate([0, 0, -page_thickness/2-cover_thickness/2])\n    book_cover();\n    \n    // Top cover\n    translate([0, 0, page_thickness/2+cover_thickness/2])\n    book_cover();\n    \n    // Pages\n    pages();\n    \n    // Clasp on front edge\n    clasp();\n    \n    // Decorative cross on top cover\n    translate([0, 0, page_thickness+cover_thickness])\n    cover_cross();\n    \n    // Small ring for carrying\n    color([0.8, 0.6, 0.2])\n    translate([-book_length/2-3, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=5, r=2, $fn=16);\n}\n\n// Render the complete passional\npassional_book();",
    "renders": true
  },
  {
    "historical_artifact": "constitution",
    "openscad_code": "// Constitution Scroll Artifact - Realistic Style\n// Ancient parchment with seal and wooden handles\n\n// Overall dimensions\nscroll_length = 80;\nscroll_diameter = 18;\nhandle_length = 15;\nseal_diameter = 12;\n\n// Wooden scroll handles\nmodule scroll_handle() {\n    color([0.4, 0.2, 0.1]) {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=scroll_diameter, $fn=32);\n        \n        // Decorative end caps\n        translate([0, 0, handle_length-2])\n            cylinder(h=3, d=scroll_diameter+4, $fn=32);\n        \n        // Carved grip rings\n        for(i=[2:4:handle_length-4]) {\n            translate([0, 0, i])\n                cylinder(h=1, d=scroll_diameter-2, $fn=32);\n        }\n    }\n}\n\n// Parchment scroll body\nmodule scroll_body() {\n    color([0.85, 0.75, 0.55]) {\n        // Main rolled parchment\n        difference() {\n            cylinder(h=scroll_length, d=scroll_diameter, center=true, $fn=64);\n            cylinder(h=scroll_length+2, d=scroll_diameter-4, center=true, $fn=64);\n        }\n        \n        // Rolled edge detail\n        for(i=[-1:0.5:1]) {\n            rotate([90, 0, 0])\n                translate([0, scroll_length/2 + i*2, scroll_diameter/2 - 1])\n                    cube([scroll_diameter-2, 0.5, 2], center=true);\n        }\n    }\n}\n\n// Wax seal with imprint\nmodule wax_seal() {\n    color([0.6, 0.1, 0.1]) {\n        // Main seal body\n        translate([scroll_diameter/2 + 2, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=seal_diameter, $fn=32);\n        \n        // Seal impression (constitution symbol - scales of justice)\n        translate([scroll_diameter/2 + 2.5, 0, 0])\n            rotate([90, 0, 0]) {\n                // Balance beam\n                cube([8, 1, 1], center=true);\n                \n                // Left scale\n                translate([-3, 0, 0])\n                    sphere(d=2, $fn=16);\n                \n                // Right scale\n                translate([3, 0, 0])\n                    sphere(d=2, $fn=16);\n                \n                // Central support\n                translate([0, 0, -2])\n                    cube([1, 1, 2], center=true);\n            }\n    }\n}\n\n// Hanging ribbon/tie\nmodule ribbon() {\n    color([0.7, 0.1, 0.1]) {\n        // Red silk ribbon\n        translate([0, scroll_length/2, scroll_diameter/2 + 1])\n            rotate([90, 0, 0])\n                linear_extrude(height=0.5)\n                    polygon(points=[\n                        [-5, 0], [-4, -8], [-3, -7], [-2, -9], \n                        [-1, -6], [0, -10], [1, -6], [2, -9],\n                        [3, -7], [4, -8], [5, 0]\n                    ]);\n    }\n}\n\n// Assembly\nunion() {\n    // Left handle\n    translate([-scroll_length/2 - handle_length/2, 0, 0])\n        scroll_handle();\n    \n    // Right handle\n    translate([scroll_length/2 + handle_length/2, 0, 0])\n        mirror([1, 0, 0])\n            scroll_handle();\n    \n    // Scroll body\n    scroll_body();\n    \n    // Wax seal on front\n    wax_seal();\n    \n    // Hanging ribbon\n    ribbon();\n}\n\n// Small inscription plaque\ncolor([0.3, 0.3, 0.3]) {\n    translate([0, -scroll_length/2 - 5, scroll_diameter/2])\n        cube([20, 2, 4], center=true);\n    \n    // Inscription text (simulated)\n    translate([0, -scroll_length/2 - 5.5, scroll_diameter/2 + 0.5])\n        color([0.9, 0.9, 0.8])\n            cube([16, 1, 2], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "ordinance",
    "openscad_code": "// Civil War-era Parrott Rifle Shell (100mm shell)\n// 10-pounder Parrott rifled artillery projectile, 1860s\n\n$fn = 64;  // Smooth curves for 3D printing\n\nmodule shell_body() {\n    color(\"DarkOliveGreen\") {\n        // Main shell body - cast iron\n        cylinder(h=70, d=65, center=true);\n        \n        // Tapered nose\n        translate([0,0,35])\n            cylinder(h=15, d1=65, d2=55, center=false);\n        \n        // Base cavity for powder bag\n        translate([0,0,-35])\n            cylinder(h=10, d=50, center=false);\n    }\n}\n\nmodule bourrelet() {\n    // Rotating band for rifling engagement\n    color(\"Goldenrod\") {\n        for(i=[-1,1]) {\n            translate([0,0,i*25])\n                cylinder(h=5, d=70, center=true);\n        }\n    }\n}\n\nmodule fuze() {\n    // Time fuze on nose\n    color(\"BurlyWood\") {\n        translate([0,0,50])\n            cylinder(h=15, d=25, center=true);\n        \n        // Fuze cap\n        translate([0,0,57.5])\n            cylinder(h=5, d1=25, d2=30, center=true);\n    }\n}\n\nmodule lifting_handle() {\n    // Side lifting handle for loading\n    color(\"SaddleBrown\") {\n        translate([32.5,0,-20])\n            rotate([90,0,0])\n                cylinder(h=25, d=5, center=true);\n        \n        // Handle grip\n        translate([45,0,-20])\n            rotate([90,0,0])\n                cylinder(h=15, d=8, center=true);\n    }\n}\n\nmodule sabot_key() {\n    // Key for sabot attachment\n    color(\"DimGray\") {\n        for(angle=[0,120,240]) {\n            rotate([0,0,angle])\n                translate([27.5,0,-30])\n                    cube([15,5,10], center=true);\n        }\n    }\n}\n\nmodule inscription() {\n    // Raised foundry marks\n    color(\"Black\") {\n        rotate([0,0,180])\n            translate([0,0,-32.5])\n                linear_extrude(height=1)\n                    text(\"PARROTT 1863\", size=4, halign=\"center\");\n    }\n}\n\n// Assembly\nunion() {\n    shell_body();\n    bourrelet();\n    fuze();\n    \n    // Two lifting handles\n    lifting_handle();\n    rotate([0,0,180]) lifting_handle();\n    \n    sabot_key();\n    inscription();\n}",
    "renders": true
  },
  {
    "historical_artifact": "statute",
    "openscad_code": "// Rosetta Stone - Historical artifact\n// Dimensions: 50mm x 75mm x 25mm (scaled down for 3D printing)\n\n// Main stone body with realistic proportions\nmodule rosetta_stone() {\n    color(\"beige\")\n    difference() {\n        // Rough stone block\n        cube([50, 75, 25], center=true);\n        \n        // Rounded edges for weathered appearance\n        translate([0, 0, 12.5])\n        scale([1.1, 1.1, 0.9])\n        sphere(r=15, $fn=32);\n    }\n}\n\n// Inscription panel with hieroglyphs\nmodule hieroglyph_panel() {\n    color(\"tan\")\n    translate([0, 25, 12.5])\n    cube([45, 20, 0.5], center=true);\n    \n    // Hieroglyph symbols (simplified representation)\n    for(i = [-20:5:20]) {\n        translate([i, 30, 13.5])\n        color(\"saddlebrown\")\n        sphere(r=1, $fn=6);\n    }\n}\n\n// Demotic script panel\nmodule demotic_script() {\n    color(\"tan\")\n    translate([0, 0, 12.5])\n    cube([45, 20, 0.5], center=true);\n    \n    // Demotic lines (horizontal grooves)\n    for(y = [-5:2.5:5]) {\n        translate([0, y, 13.5])\n        color(\"saddlebrown\")\n        cube([40, 0.5, 0.2], center=true);\n    }\n}\n\n// Greek text panel\nmodule greek_text() {\n    color(\"tan\")\n    translate([0, -25, 12.5])\n    cube([45, 20, 0.5], center=true);\n    \n    // Greek letters (represented as squares)\n    for(x = [-20:4:20]) {\n        translate([x, -25, 13.5])\n        color(\"saddlebrown\")\n        cube([1.5, 1.5, 0.2], center=true);\n    }\n}\n\n// Broken edges simulation\nmodule broken_edges() {\n    for(i = [-25:5:25]) {\n        translate([25, i, 0])\n        color(\"beige\")\n        sphere(r=2, $fn=8);\n        \n        translate([-25, i, 0])\n        color(\"beige\")\n        sphere(r=2, $fn=8);\n    }\n}\n\n// Weathering and chips\nmodule weathering() {\n    for(pos = [[-15, 35, 10], [10, -30, 8], [-20, -20, 12], [15, 10, 9]]) {\n        translate(pos)\n        color(\"tan\")\n        sphere(r=1.5, $fn=6);\n    }\n}\n\n// Assembly of the complete artifact\nunion() {\n    rosetta_stone();\n    hieroglyph_panel();\n    demotic_script();\n    greek_text();\n    broken_edges();\n    weathering();\n}",
    "renders": true
  },
  {
    "historical_artifact": "edict",
    "openscad_code": "// Roman Bronze Military Diploma - Honorable Discharge Edict\n// Overall dimensions: ~70mm wide, ~55mm tall, ~2.5mm thick\n\n// Bronze color for the metal tablet\ncolor([0.72, 0.45, 0.2]) difference() {\n    // Main tablet body\n    translate([-35, -25, 0])\n        cube([70, 50, 2.5]);\n\n    // Two suspension holes at top\n    for (x = [-20, 20]) {\n        translate([x, 23, -1])\n            cylinder(h, 3.5, 3.5, $fn=16);\n    }\n\n    // Inscription panels recessed into surface\n    translate([-30, -20, 1.6])\n        cube([60, 15, 1]);\n    translate([-30, -3, 1.6])\n        cube([60, 4, 1]);\n    translate([-30, 4, 1.6])\n        cube([60, 15, 1]);\n\n    // Seal impression area\n    translate([15, -10, 1.6])\n        cylinder(h, 8, 8, $fn=32);\n}\n\n// Raised border decoration\ncolor([0.65, 0.4, 0.15]) union() {\n    // Top border with repeating pattern\n    for (x = [-30:10:30]) {\n        translate([x, 22, 2.5])\n            cube([8, 3, 0.8]);\n    }\n\n    // Bottom border\n    for (x = [-30:10:30]) {\n        translate([x, -25, 2.5])\n            cube([8, 3, 0.8]);\n    }\n\n    // Side borders\n    for (y = [-20:10:20]) {\n        translate([-35, y, 2.5])\n            cube([3, 8, 0.8]);\n        translate([32, y, 2.5])\n            cube([3, 8, 0.8]);\n    }\n}\n\n// Imperial seal details\ncolor([0.55, 0.35, 0.12]) union() {\n    // Eagle motif in seal\n    translate([15, -10, 2.6]) {\n        // Eagle body\n        scale([1, 0.7, 1])\n            sphere(4, $fn=16);\n        \n        // Wings\n        rotate([0, 0, 30])\n            translate([-3, 0, 2])\n                scale([2, 0.5, 0.3])\n                    cube([4, 2, 1]);\n        rotate([0, 0, -30])\n            translate([3, 0, 2])\n                scale([2, 0.5, 0.3])\n                    cube([4, 2, 1]);\n    }\n}\n\n// Small rivets at corners\ncolor([0.6, 0.38, 0.18]) \nfor (pos = [[-30, -20], [25, -20], [-30, 18], [25, 18]]) {\n    translate([pos[0], pos[1], 3.4])\n        cylinder(h, 1.5, 1.5, $fn=12);\n}",
    "renders": true
  },
  {
    "historical_artifact": "proclamation",
    "openscad_code": "// Historical Proclamation Tablet - Roman Style\n// 3D printable replica with imperial seal and text areas\n\n// Overall dimensions\ntablet_width = 70;\ntablet_height = 90;\ntablet_thickness = 6;\nborder_width = 4;\n\n// Colors\ntablet_color = \"burlywood\";\nseal_color = \"goldenrod\";\ntext_color = \"saddlebrown\";\n\n// Main tablet body with rounded edges\nmodule tablet_body() {\n    color(tablet_color) {\n        // Main rectangular body\n        difference() {\n            translate([0, 0, tablet_thickness/2])\n                cube([tablet_width, tablet_height, tablet_thickness], center=true);\n            \n            // Rounded edges on back\n            translate([0, 0, -tablet_thickness/2 + 0.5])\n                cube([tablet_width - 4, tablet_height - 4, 2], center=true);\n        }\n        \n        // Top and bottom decorative borders\n        translate([0, tablet_height/2 - border_width/2, tablet_thickness/2])\n            cube([tablet_width, border_width, tablet_thickness], center=true);\n        translate([0, -tablet_height/2 + border_width/2, tablet_thickness/2])\n            cube([tablet_width, border_width, tablet_thickness], center=true);\n    }\n}\n\n// Imperial seal decoration\nmodule imperial_seal() {\n    color(seal_color) {\n        // Central seal disc\n        translate([0, 20, tablet_thickness + 0.1])\n            cylinder(h=2, r=12, $fn=32);\n        \n        // Eagle motif (simplified)\n        translate([0, 20, tablet_thickness + 2.2])\n            scale([1, 0.7, 1])\n                sphere(r=8, $fn=24);\n        \n        // Laurel wreath around seal\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([10, 20, tablet_thickness + 1.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=0.5, r1=3, r2=1, $fn=8);\n        }\n    }\n}\n\n// Text inscription areas\nmodule text_blocks() {\n    color(text_color) {\n        // Main proclamation text area\n        translate([0, -15, tablet_thickness + 0.1])\n            cube([50, 25, 0.5], center=true);\n        \n        // Title area\n        translate([0, 35, tablet_thickness + 0.1])\n            cube([40, 8, 0.5], center=true);\n        \n        // Signature line\n        translate([20, -35, tablet_thickness + 0.1])\n            cube([25, 3, 0.5], center=true);\n    }\n}\n\n// Decorative corner elements\nmodule corner_decorations() {\n    color(seal_color) {\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (tablet_width/2 - 8), y * (tablet_height/2 - 8), tablet_thickness/2])\n                    cylinder(h=tablet_thickness, r=4, $fn=8);\n                \n                translate([x * (tablet_width/2 - 8), y * (tablet_height/2 - 8), tablet_thickness + 0.1])\n                    sphere(r=2, $fn=8);\n            }\n        }\n    }\n}\n\n// Holes for hanging/display\nmodule mounting_holes() {\n    translate([0, tablet_height/2 - 10, 0])\n        rotate([90, 0, 0])\n            cylinder(h=tablet_width, r=2, center=true);\n}\n\n// Assembly\nunion() {\n    tablet_body();\n    imperial_seal();\n    text_blocks();\n    corner_decorations();\n    \n    // Add mounting hole (remove material)\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "treatise",
    "openscad_code": "// Medieval illuminated manuscript treatise (codex)\n// Overall dimensions: 80mm x 60mm x 25mm\n\n$fn = 32;\n\n// Main colors\nBOOK_COVER = \"#8B4513\";   // Saddle brown leather\nMETAL = \"#C0C0C0\";        // Silver metalwork\nPARCHMENT = \"#F5F5DC\";    // Beige parchment\nGOLD = \"#FFD700\";         // Gold illumination\n\nmodule book_cover() {\n    // Main leather cover with rounded edges\n    color(BOOK_COVER)\n    difference() {\n        // Main cover body\n        union() {\n            cube([80, 60, 5], center=true);\n            // Rounded corners\n            for(x = [-35, 35])\n                for(y = [-25, 25])\n                    translate([x, y, 2.5])\n                    sphere(5);\n        }\n        \n        // Inner cavity for pages\n        translate([0, 0, 0])\n        cube([74, 54, 3], center=true);\n    }\n}\n\nmodule metal_corner(x, y, z) {\n    // Decorative metal corner piece\n    color(METAL)\n    translate([x, y, z])\n    union() {\n        // Main corner plate\n        cube([8, 8, 1]);\n        \n        // Decorative studs\n        for(i = [2:4:6])\n            for(j = [2:4:6])\n                translate([i, j, 1])\n                cylinder(h=1.5, r=1);\n    }\n}\n\nmodule clasp() {\n    // Metal clasp for securing the book\n    color(METAL)\n    translate([0, 30, 3])\n    union() {\n        // Hinge part\n        cube([4, 8, 2], center=true);\n        \n        // Clasp loop\n        translate([0, 4, 1.5])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=2, r2=2);\n        \n        // Decorative knob\n        translate([0, 6, 2])\n        sphere(1.5);\n    }\n}\n\nmodule page_stack() {\n    // Stack of parchment pages\n    color(PARCHMENT)\n    for(i = [0:0.5:19]) {\n        translate([0, 0, -11.5 + i])\n        cube([72, 52, 0.4], center=true);\n    }\n}\n\nmodule illumination() {\n    // Gold decorative illumination on cover\n    color(GOLD)\n    translate([0, 0, 3])\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([0, 20, 0])\n        scale([1, 0.3, 1])\n        cylinder(h=0.5, r=5);\n    }\n    \n    // Central roundel\n    translate([0, 0, 3.5])\n    cylinder(h=0.5, r=8);\n    \n    // Decorative border pattern\n    for(side = [-1, 1])\n        for(pos = [-30:5:30])\n            translate([pos, side * 27, 3])\n            sphere(0.5);\n}\n\nmodule spine_detail() {\n    // Raised bands on spine\n    color(BOOK_COVER)\n    for(i = [-20:10:20]) {\n        translate([-42.5, i, 0])\n        cube([5, 8, 7], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Book cover\n    book_cover();\n    \n    // Metal corner pieces\n    for(x = [-36, 36])\n        for(y = [-26, 26])\n            metal_corner(x, y, 2.5);\n    \n    // Clasp\n    clasp();\n    \n    // Spine details\n    spine_detail();\n    \n    // Illumination\n    illumination();\n    \n    // Page stack inside\n    page_stack();\n}",
    "renders": true
  },
  {
    "historical_artifact": "tract",
    "openscad_code": "// Babylonian cuneiform tablet (ca. 2000 BCE)\n// Overall size: 75 mm x 50 mm x 20 mm\n\n$fn = 50;\nwall = 1.5;\n\nmodule tablet_body() {\n    difference() {\n        translate([0, 0, 10]) {\n            color([0.65, 0.48, 0.35])  // fired clay color\n            cube([75, 50, 20], center = true);\n        }\n        // Hollow interior\n        translate([0, 0, 11]) {\n            cube([72, 47, 18], center = true);\n        }\n    }\n}\n\nmodule cuneiform_line(start, end, depth) {\n    // Simple wedge-shaped impressions\n    num_wedges = ceil(norm(end - start) / 4);\n    for (i = [0 : num_wedges - 1]) {\n        pos = start + (end - start) * i / (num_wedges - 1);\n        translate(pos + [0, 0, 10 + depth]) {\n            rotate([0, 0, atan2(end.y - start.y, end.x - start.x)])\n            difference() {\n                cube([3, 2, depth + 0.5], center = true);\n                translate([0, 0, 0.5])\n                cube([2.5, 1.5, depth + 1], center = true);\n            }\n        }\n    }\n}\n\nmodule cuneiform_text() {\n    color([0.35, 0.25, 0.15]) {\n        // Front face text - typical Babylonian accounting tablet\n        // Row 1: 120 sheep\n        cuneiform_line([-30, 15, 0], [30, 15, 0], 1.5);\n        cuneiform_line([-30, 10, 0], [-20, 10, 0], 1.5);\n        \n        // Row 2: 60 goats\n        cuneiform_line([-30, 5, 0], [30, 5, 0], 1.5);\n        cuneiform_line([-30, 0, 0], [-10, 0, 0], 1.5);\n        \n        // Row 3: 30 cattle\n        cuneiform_line([-30, -5, 0], [30, -5, 0], 1.5);\n        cuneiform_line([-30, -10, 0], [0, -10, 0], 1.5);\n        \n        // Seal impression - administrative cylinder seal pattern\n        translate([0, -15, 11.5]) {\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 3, r = 8);\n                union() {\n                    for (i = [0:7]) {\n                        rotate([0, 0, 45 * i])\n                        translate([3, 0, -1])\n                        cube([1.5, 1, 5], center = true);\n                    }\n                    translate([0, 0, 0])\n                    cylinder(h = 3, r = 2);\n                }\n            }\n        }\n    }\n}\n\nmodule edge_chips() {\n    // Historical wear and damage\n    color([0.6, 0.45, 0.3]) {\n        // Top edge chips\n        translate([-35, 20, 20]) {\n            sphere(r = 3);\n        }\n        translate([30, 18, 20]) {\n            sphere(r = 2.5);\n        }\n        \n        // Corner damage\n        translate([-37.5, -25, 10]) {\n            sphere(r = 4);\n        }\n        translate([37.5, 25, 8]) {\n            sphere(r = 3.5);\n        }\n    }\n}\n\nmodule back_surface() {\n    color([0.65, 0.48, 0.35]) {\n        // Back of tablet - continuation of text\n        translate([0, 0, -10]) {\n            difference() {\n                cube([75, 50, 0.5], center = true);\n                // Summary on back\n                translate([0, 10, 0])\n                cube([40, 2, 2], center = true);\n                translate([0, 5, 0])\n                cube([30, 2, 2], center = true);\n                translate([0, 0, 0])\n                cube([50, 2, 2], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    tablet_body();\n    cuneiform_text();\n    back_surface();\n    edge_chips();\n}\n\n// Add support for printing\ntranslate([0, 0, -12])\ncolor([0.5, 0.5, 0.5])\ncube([77, 52, 2], center = true);",
    "renders": true
  },
  {
    "historical_artifact": "compendium",
    "openscad_code": "// Medieval Astrolabe Compendium - Historical Navigation Tool\n// Based on 15th century German design\n\n$fn = 64;\n\n// Main parameters\nmain_diameter = 80;\nthickness = 12;\nwall_thickness = 2;\n\n// Colors\ncolor_bronze = [150/255, 100/255, 50/255];\ncolor_dark_bronze = [120/255, 80/255, 40/255];\ncolor_gold = [200/255, 160/255, 50/255];\n\nmodule astrolabe_compendium() {\n    // Main body - circular base\n    color(color_bronze)\n    difference() {\n        cylinder(h = thickness, d = main_diameter, center = true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cylinder(h = thickness + 2, d = main_diameter - 2*wall_thickness, center = true);\n    }\n    \n    // Suspension ring mount\n    translate([0, main_diameter/2 + 5, thickness/2 - 2])\n    rotate([90, 0, 0])\n    color(color_dark_bronze)\n    difference() {\n        cylinder(h = 8, d = 10, center = true);\n        cylinder(h = 10, d = 5, center = true);\n    }\n    \n    // Suspension ring\n    translate([0, main_diameter/2 + 5, thickness/2 - 2])\n    rotate([90, 0, 0])\n    color(color_gold)\n    rotate([0, 90, 0])\n    torus(4, 1.5);\n    \n    // Rete (star map) - simplified\n    translate([0, 0, thickness/2 + 1])\n    color(color_gold)\n    linear_extrude(height = 0.5)\n    union() {\n        // Main star pattern\n        circle(d = main_diameter - 20);\n        \n        // Ecliptic circle\n        circle(d = main_diameter - 30);\n        \n        // Star pointers\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([main_diameter/2 - 15, 0, 0])\n            circle(d = 2);\n        }\n    }\n    \n    // Rule (straight measuring arm)\n    translate([0, 0, thickness/2 + 2])\n    color(color_dark_bronze)\n    rotate([0, 0, 45])\n    cube([main_diameter - 10, 3, 1], center = true);\n    \n    // Alidade (sighting rule)\n    translate([0, 0, -thickness/2 - 1])\n    color(color_bronze)\n    rotate([0, 0, 0])\n    cube([main_diameter - 15, 5, 1], center = true);\n    \n    // Sighting vanes\n    translate([main_diameter/2 - 10, 0, -thickness/2 - 1])\n    rotate([0, 0, 0])\n    color(color_gold)\n    union() {\n        // Left vane\n        translate([-2.5, -5, 0])\n        cube([5, 10, 2]);\n        \n        // Right vane\n        translate([2.5, -5, 0])\n        cube([5, 10, 2]);\n    }\n    \n    // Engraved degree scale\n    translate([0, 0, thickness/2 - 0.1])\n    color(color_dark_bronze)\n    linear_extrude(height = 0.2)\n    difference() {\n        circle(d = main_diameter - 4);\n        \n        // Degree markings\n        for(i = [0:5:359]) {\n            rotate([0, 0, i])\n            translate([main_diameter/2 - 6, -0.5, 0])\n            square([5, 1]);\n        }\n    }\n    \n    // Central pin\n    translate([0, 0, 0])\n    color(color_gold)\n    union() {\n        cylinder(h = thickness + 4, d = 4, center = true);\n        sphere(d = 5);\n    }\n    \n    // Decorative border\n    translate([0, 0, thickness/2])\n    color(color_gold)\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([main_diameter/2 - 3, 0, 0])\n        sphere(d = 2);\n    }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n    translate([major, 0, 0])\n    circle(r = minor);\n}\n\nastrolabe_compendium();",
    "renders": true
  },
  {
    "historical_artifact": "compend",
    "openscad_code": "// Medieval Astronomical Compendium (c. 1550-1600)\n// A portable brass instrument containing multiple tools for navigation and timekeeping\n\n// Overall dimensions for 3D printing\ncompend_size = 70; // mm diameter\n\n// Main body module\nmodule compendium_body() {\n    color(\"goldenrod\") {\n        // Outer case - cylindrical base\n        difference() {\n            cylinder(h=8, d=compend_size, $fn=100);\n            \n            // Central recess for instruments\n            translate([0, 0, -1])\n                cylinder(h=10, d=compend_size-6, $fn=100);\n            \n            // Hinge cutouts\n            for(i=[0,1]) {\n                rotate([0, 0, i*180])\n                    translate([compend_size/2-3, 0, 0])\n                        cube([6, 3, 8], center=true);\n            }\n        }\n        \n        // Decorative rim\n        for(i=[1:3]) {\n            translate([0, 0, i*2.5])\n                cylinder(h=0.5, d=compend_size+1-i*0.5, $fn=100);\n        }\n    }\n}\n\n// Hinged lid module\nmodule lid() {\n    color(\"goldenrod\") {\n        difference() {\n            // Main lid\n            translate([0, 0, 8])\n                cylinder(h=3, d=compend_size, $fn=100);\n            \n            // Recess for sundial\n            translate([0, 0, 7.5])\n                cylinder(h=4, d=compend_size-8, $fn=100);\n        }\n        \n        // Sundial gnomon support\n        translate([0, (compend_size-8)/2-5, 9.5])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=2, $fn=12);\n    }\n}\n\n// Magnetic compass module\nmodule compass() {\n    color(\"saddlebrown\") {\n        // Compass bowl\n        translate([0, 0, 6])\n            cylinder(h=2, d=compend_size/3, $fn=50);\n        \n        // Needle\n        color(\"silver\") {\n            translate([-compend_size/8, 0, 7.1])\n                cube([compend_size/4, 1, 0.5]);\n        }\n    }\n}\n\n// Lunar volvelle (rotating disc)\nmodule volvelle() {\n    color(\"goldenrod\") {\n        translate([0, 0, 5])\n            rotate([0, 0, 45])\n                cylinder(h=1, d=compend_size/2-5, $fn=60);\n    }\n    \n    // Index pointer\n    color(\"silver\") {\n        translate([compend_size/4-3, 0, 5.5])\n            cube([10, 1, 0.5]);\n    }\n}\n\n// Decorative engraving pattern\nmodule engravings() {\n    color(\"darkgoldenrod\") {\n        // Geometric pattern on lid\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([compend_size/3, 0, 9.5])\n                    cube([0.5, 5, 0.3]);\n        }\n        \n        // Cardinal points on compass\n        translate([0, compend_size/6, 6.1])\n            rotate([0, 0, 0])\n                color(\"red\")\n                    cube([1, 3, 0.3]);\n                    \n        translate([-compend_size/6, 0, 6.1])\n            rotate([0, 0, 0])\n                cube([3, 1, 0.3]);\n    }\n}\n\n// Assembly\ncompendium_body();\nlid();\ncompass();\nvolvelle();\nengravings();\n\n// Small suspension ring\ncolor(\"goldenrod\") {\n    translate([compend_size/2-2, 0, 10])\n        rotate([90, 0, 0])\n            rotate_extrude(angle=360, $fn=20)\n                translate([2, 0, 0])\n                    circle(r=1);\n}",
    "renders": true
  },
  {
    "historical_artifact": "florilegium",
    "openscad_code": "// Florilegium - Renaissance Book of Botanical Knowledge\n// Dimensions: 80mm x 60mm x 15mm\n\n// Base book dimensions\nbook_width = 80;\nbook_height = 60;\nbook_thickness = 15;\npage_thickness = 1;\n\n// Colors\nbook_color = \"BurlyWood\";\ncover_color = \"SaddleBrown\";\ndetail_color = \"DarkGoldenrod\";\npage_color = \"NavajoWhite\";\n\n// Main book body\ncolor(book_color) {\n    difference() {\n        // Main book block\n        cube([book_width, book_height, book_thickness], center = true);\n        \n        // Hollow out pages\n        translate([0, 0, -page_thickness/2])\n            cube([book_width-4, book_height-4, book_thickness+1], center = true);\n    }\n}\n\n// Front cover\ncolor(cover_color) {\n    translate([0, 0, book_thickness/2 + 0.5])\n        cube([book_width, book_height, 1], center = true);\n}\n\n// Back cover\ncolor(cover_color) {\n    translate([0, 0, -book_thickness/2 - 0.5])\n        cube([book_width, book_height, 1], center = true);\n}\n\n// Spine with decorative ridges\nmodule spine_ridges() {\n    for(i = [-3:1:3]) {\n        translate([book_width/2 + 0.5, i * 8, 0])\n            cube([1, 2, book_thickness - 2], center = true);\n    }\n}\n\ncolor(cover_color) spine_ridges();\n\n// Metal corner protectors\nmodule corner_protectors() {\n    // Front corners\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (book_width/2 - 3), y * (book_height/2 - 3), book_thickness/2 + 0.5])\n                color(detail_color)\n                    cylinder(h = 1.5, r = 3, $fn = 16);\n        }\n    }\n    \n    // Back corners\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (book_width/2 - 3), y * (book_height/2 - 3), -book_thickness/2 - 0.5])\n                color(detail_color)\n                    cylinder(h = 1.5, r = 3, $fn = 16);\n        }\n    }\n}\n\ncorner_protectors();\n\n// Central decorative medallion on front\ncolor(detail_color) {\n    translate([0, 0, book_thickness/2 + 1.25])\n        cylinder(h = 0.5, r = 12, $fn = 32);\n    \n    translate([0, 0, book_thickness/2 + 1.5])\n        cylinder(h = 0.25, r = 8, $fn = 32);\n}\n\n// Title inscription (simulated with rectangles)\ncolor(\"black\") {\n    for(i = [-2:1:2]) {\n        translate([i * 3, 0, book_thickness/2 + 1.75])\n            cube([2, 0.5, 0.1], center = true);\n    }\n}\n\n// Page edges with simplified botanical patterns\nmodule page_patterns() {\n    color(page_color) {\n        for(i = [-book_width/2 + 5:5:book_width/2 - 5]) {\n            for(j = [-book_height/2 + 5:5:book_height/2 - 5]) {\n                translate([i, j, book_thickness/2 - page_thickness])\n                    cylinder(h = page_thickness * 2, r = 1, $fn = 6);\n            }\n        }\n    }\n}\n\npage_patterns();\n\n// Bookmark ribbon\ncolor(\"DarkRed\") {\n    translate([book_width/4, book_height/2, book_thickness/4])\n        rotate([90, 0, 0])\n            cylinder(h = book_height/2, r = 1, $fn = 8);\n}\n\n// Clasp mechanism\nmodule clasp() {\n    color(detail_color) {\n        // Front clasp base\n        translate([0, book_height/2 - 2, book_thickness/2 + 0.75])\n            cube([8, 4, 1.5], center = true);\n        \n        // Clasp loop\n        translate([0, book_height/2 + 2, book_thickness/2 + 0.75])\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = 1.5, center = true);\n    }\n}\n\nclasp();",
    "renders": true
  },
  {
    "historical_artifact": "anthology",
    "openscad_code": "// Ancient Sumerian Clay Tablet Anthology with Cuneiform Inscriptions\n// Dimensions: 90mm x 60mm x 25mm (tablet collection in wooden frame)\n\n$fn = 32;\n\n// Main wooden anthology frame\nmodule anthology_frame() {\n    color([0.4, 0.2, 0.1]) {\n        // Base frame\n        difference() {\n            cube([90, 60, 8]);\n            translate([3, 3, -1]) cube([84, 54, 10]);\n        }\n        \n        // Side walls\n        translate([0, 0, 8]) cube([90, 3, 15]);\n        translate([0, 57, 8]) cube([90, 3, 15]);\n        translate([0, 0, 8]) cube([3, 60, 15]);\n        translate([87, 0, 8]) cube([3, 60, 15]);\n    }\n}\n\n// Individual clay tablet with cuneiform\nmodule clay_tablet(x, y, z, rotation) {\n    translate([x, y, z]) {\n        rotate([0, 0, rotation]) {\n            // Clay tablet body\n            color([0.7, 0.5, 0.3]) {\n                difference() {\n                    cube([20, 15, 4]);\n                    translate([1, 1, 3]) cube([18, 13, 2]);\n                }\n            }\n            \n            // Cuneiform impressions - front\n            color([0.5, 0.3, 0.2]) {\n                for(i = [0:3]) {\n                    for(j = [0:4]) {\n                        translate([3 + i*4, 3 + j*2.5, 3.5]) \n                            rotate([90, 0, 0]) cylinder(h=0.5, d=1);\n                        translate([3 + i*4 + 0.5, 3 + j*2.5 + 0.5, 3.5]) \n                            rotate([90, 0, 0]) cylinder(h=0.5, d=1);\n                    }\n                }\n            }\n            \n            // Cuneiform impressions - back\n            color([0.5, 0.3, 0.2]) {\n                for(i = [0:2]) {\n                    for(j = [0:3]) {\n                        translate([5 + i*5, 5 + j*3, 0]) \n                            rotate([90, 0, 0]) cylinder(h=0.5, d=1);\n                        translate([5 + i*5 + 0.5, 5 + j*3 + 0.5, 0]) \n                            rotate([90, 0, 0]) cylinder(h=0.5, d=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wax seal decoration on frame corners\nmodule wax_seal(x, y) {\n    translate([x, y, 22]) {\n        color([0.6, 0.2, 0.1]) {\n            cylinder(h=2, d=8);\n            translate([0, 0, 2]) {\n                cylinder(h=1, d=6);\n                translate([0, 0, 1]) rotate([0, 0, 45]) \n                    cube([4, 1, 1], center=true);\n            }\n        }\n    }\n}\n\n// Assemble the anthology\nanthology_frame();\n\n// Clay tablets arranged in anthology\nclay_tablet(15, 10, 12, 5);\nclay_tablet(40, 10, 12, -3);\nclay_tablet(65, 10, 12, 8);\n\nclay_tablet(15, 35, 12, -7);\nclay_tablet(40, 35, 12, 3);\nclay_tablet(65, 35, 12, -5);\n\n// Wax seals on corners\nwax_seal(5, 5);\nwax_seal(85, 5);\nwax_seal(5, 55);\nwax_seal(85, 55);\n\n// Central label tablet\ntranslate([35, 25, 12]) {\n    color([0.6, 0.4, 0.2]) {\n        difference() {\n            cube([20, 10, 2]);\n            translate([1, 1, 1]) cube([18, 8, 2]);\n        }\n    }\n    color([0.4, 0.2, 0.1]) {\n        for(i = [0:4]) {\n            translate([2 + i*3.5, 5, 2.5]) \n                rotate([90, 0, 0]) cylinder(h=0.3, d=0.8);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "chrestomathy",
    "openscad_code": "// Chrestomathy Sumerian Clay Tablet replica\n// Cuneiform writing board with stylus grooves and realistic weathering\n// Approx 70x50x15mm suitable for 3D printing\n\n// Main tablet body\nmodule tablet_body() {\n    difference() {\n        // Main tablet slab\n        color(\"#8B4513\") // Sumerian clay brown\n        cube([70, 50, 12], center=true);\n        \n        // Stylus grooves on front\n        translate([0, 0, 6.1])\n        for(y=[-20:5:20]) {\n            rotate([0,0,2])\n            translate([0,y,0])\n            cube([65, 0.8, 1], center=true);\n        }\n        \n        // Stylus grooves on back (cross-hatched)\n        translate([0, 0, -6.1])\n        for(x=[-30:5:30]) {\n            rotate([0,0,90])\n            translate([x,0,0])\n            cube([45, 0.8, 1], center=true);\n        }\n        \n        // Chipped edges for weathering\n        translate([33,23,0])\n        sphere(3);\n        translate([-35,-25,0])\n        sphere(2.5);\n        translate([30,-22,0])\n        sphere(2);\n    }\n}\n\n// Cuneiform wedges on front\nmodule cuneiform_wedges() {\n    color(\"#654321\") // Darker clay\n    translate([0,0,6.5])\n    for(row=[-2:2]) {\n        for(col=[-5:5]) {\n            if((row+col)%2==0) {\n                translate([col*6, row*6, 0])\n                rotate([0,0,45])\n                cylinder(h=1.5, d1=2.5, d2=0.5, $fn=3);\n            }\n        }\n    }\n}\n\n// Edge bevels for realism\nmodule beveled_edges() {\n    difference() {\n        cube([72, 52, 14], center=true);\n        \n        // Inner tablet shape\n        color(\"#8B4513\")\n        translate([0,0,-1])\n        cube([70, 50, 12], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main tablet with edges\n    beveled_edges();\n    tablet_body();\n    \n    // Cuneiform text\n    cuneiform_wedges();\n    \n    // Corner repair marks\n    translate([32,22,0])\n    color(\"#A0522D\")\n    cylinder(h=3, d=4, $fn=6);\n    translate([-32,-22,0])\n    cylinder(h=3, d=4, $fn=6);\n}",
    "renders": true
  },
  {
    "historical_artifact": "enchiridion",
    "openscad_code": "// Enchiridion - Historical Roman Legionary Handbook\n// Dimensions: 60mm x 45mm x 15mm closed\n\n// Main body with rounded corners\nmodule enchiridion_body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main block\n            translate([0, 0, 7.5])\n                cube([60, 45, 15], center=true);\n            \n            // Rounded edges\n            for(x = [-28, 28])\n                for(y = [-21.5, 21.5])\n                    translate([x, y, 7.5])\n                        cylinder(h=15, r=2, $fn=16);\n            \n            for(x = [-28, 28])\n                translate([x, 0, 7.5])\n                    cube([4, 43, 15], center=true);\n                    \n            for(y = [-21.5, 21.5])\n                translate([0, y, 7.5])\n                    cube([56, 4, 15], center=true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, 9])\n            cube([54, 39, 8], center=true);\n    }\n}\n\n// Hinge mechanism\nmodule hinges() {\n    for(side = [-1, 1]) {\n        translate([side * 30, 0, 0])\n            cylinder(h=45, r=1.5, $fn=12);\n    }\n}\n\n// Leather cord binding rings\nmodule binding_rings() {\n    color([0.3, 0.2, 0.1]) {\n        for(pos = [-15, 0, 15]) {\n            translate([pos, -23, 7.5])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=3, r=2, $fn=12);\n                        cylinder(h=4, r=1.2, $fn=12);\n                    }\n        }\n    }\n}\n\n// Wax tablet surface texture\nmodule wax_tablets() {\n    color([0.6, 0.4, 0.2]) {\n        for(i = [-1, 0, 1]) {\n            translate([i * 17, 0, 1])\n                cube([15, 39, 2], center=true);\n        }\n    }\n}\n\n// Roman military inscription panel\nmodule inscription_panel() {\n    color([0.5, 0.5, 0.5]) {\n        translate([0, 0, 15])\n            cube([40, 25, 1], center=true);\n        \n        // Stylized \"LEGIO\" text\n        translate([-15, -8, 16])\n            cube([5, 1, 0.5]);\n        translate([-15, -6, 16])\n            cube([1, 5, 0.5]);\n        translate([-15, -6, 16])\n            cube([5, 1, 0.5]);\n            \n        translate([-8, -8, 16])\n            cube([1, 5, 0.5]);\n        translate([-8, -8, 16])\n            cube([5, 1, 0.5]);\n        translate([-8, -4, 16])\n            cube([5, 1, 0.5]);\n        \n        translate([0, -8, 16])\n            cube([5, 1, 0.5]);\n        translate([0, -6, 16])\n            cube([1, 5, 0.5]);\n        translate([4, -6, 16])\n            cube([1, 5, 0.5]);\n        \n        translate([8, -8, 16])\n            cube([5, 1, 0.5]);\n        translate([8, -6, 16])\n            cube([1, 5, 0.5]);\n        translate([8, -4, 16])\n            cube([5, 1, 0.5]);\n        \n        translate([15, -8, 16])\n            cube([5, 1, 0.5]);\n        translate([15, -6, 16])\n            cube([1, 3, 0.5]);\n        translate([15, -4, 16])\n            cube([5, 1, 0.5]);\n        translate([19, -8, 16])\n            cube([1, 5, 0.5]);\n    }\n}\n\n// Decorative corner reinforcements\nmodule corner_reinforcements() {\n    color([0.4, 0.3, 0.2]) {\n        for(x = [-1, 1])\n            for(y = [-1, 1]) {\n                translate([x * 26, y * 19, 7.5])\n                    difference() {\n                        cylinder(h=15, r=3, $fn=6);\n                        translate([0, 0, -1])\n                            cylinder(h=17, r=1.5, $fn=6);\n                    }\n            }\n    }\n}\n\n// Assembly\ncolor([0.5, 0.35, 0.2]) {\n    enchiridion_body();\n}\n\ncolor([0.3, 0.3, 0.3]) {\n    hinges();\n}\n\nbinding_rings();\nwax_tablets();\ninscription_panel();\ncorner_reinforcements();",
    "renders": true
  },
  {
    "historical_artifact": "handbook",
    "openscad_code": "// Medieval Illuminated Handbook (Book of Hours style)\n// Dimensions: 60mm x 45mm x 15mm when closed\n\n// Overall scale factor\nscale_factor = 0.5;\n\n// Book dimensions in mm\nbook_width = 60 * scale_factor;\nbook_height = 45 * scale_factor;\nbook_thickness = 15 * scale_factor;\ncover_thickness = 2 * scale_factor;\npage_thickness = 11 * scale_factor;\nspine_width = 8 * scale_factor;\n\n// Colors\ncover_color = \"saddlebrown\";\nclasp_color = \"goldenrod\";\npage_color = \"beige\";\ngem_color = \"darkblue\";\n\n// Main book module\nmodule medieval_handbook() {\n    // Front cover\n    color(cover_color) {\n        // Main cover\n        translate([-book_width/2, -book_height/2, -book_thickness/2]) \n            cube([book_width, book_height, cover_thickness]);\n        \n        // Spine\n        translate([-book_width/2 - spine_width/2, -book_height/2, -book_thickness/2])\n            cube([spine_width, book_height, book_thickness]);\n        \n        // Raised decorative border\n        translate([-book_width/2 + 2, -book_height/2 + 2, -book_thickness/2 + cover_thickness])\n            cube([book_width - 4, book_height - 4, 0.5]);\n        \n        // Corner decorations (4 corners)\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (book_width/2 - 5), y * (book_height/2 - 5), \n                          -book_thickness/2 + cover_thickness + 0.5]) {\n                    rotate([0, 0, 45 * (x * y)]) \n                        cube([3, 3, 0.5], center=true);\n                }\n            }\n        }\n        \n        // Central boss/gem setting\n        translate([0, 0, -book_thickness/2 + cover_thickness + 1]) {\n            cylinder(h=1, r1=4, r2=4, $fn=16);\n            color(gem_color) \n                translate([0, 0, 0.5]) \n                    cylinder(h=0.5, r1=3, r2=3, $fn=16);\n        }\n    }\n    \n    // Metal clasp\n    color(clasp_color) {\n        // Hinge side\n        translate([book_width/2 - 1, -3, -book_thickness/2 + cover_thickness]) \n            cube([2, 6, page_thickness]);\n        \n        // Clasp loop\n        translate([book_width/2 + 1, 0, -book_thickness/2 + book_thickness/2]) {\n            difference() {\n                cube([4, 8, 2]);\n                translate([2, 4, -0.1]) \n                    cylinder(h=2.2, r1=2, r2=2, $fn=16);\n            }\n        }\n    }\n    \n    // Pages\n    color(page_color) {\n        translate([-book_width/2, -book_height/2, \n                  -book_thickness/2 + cover_thickness]) \n            cube([book_width, book_height, page_thickness]);\n    }\n    \n    // Page edges details\n    color(page_color) {\n        // Gilded page edges effect\n        for(i = [0:5:page_thickness-2]) {\n            translate([-book_width/2 - 0.1, -book_height/2, \n                      -book_thickness/2 + cover_thickness + i]) \n                cube([book_width + 0.2, book_height, 1]);\n        }\n    }\n    \n    // Spine ridges (raised bands)\n    color(cover_color) {\n        for(i = [-1, 0, 1]) {\n            translate([-book_width/2 - spine_width/2, \n                      i * (book_height/3), \n                      -book_thickness/2 + cover_thickness]) {\n                cube([spine_width, 2, book_thickness - 2*cover_thickness]);\n            }\n        }\n    }\n    \n    // Back cover\n    color(cover_color) {\n        translate([-book_width/2, -book_height/2, \n                  -book_thickness/2 + cover_thickness + page_thickness]) \n            cube([book_width, book_height, cover_thickness]);\n    }\n}\n\n// Render the handbook\nmedieval_handbook();",
    "renders": true
  },
  {
    "historical_artifact": "manual",
    "openscad_code": "// Manual Roman wax tablet (tabula cerata) – circa 100 CE\n// Typical open‐format writing tablet with two hinged leaves\n// Overall footprint ≈ 75 mm × 55 mm × 12 mm closed\n\n// ------------------- Parameters -------------------\nth_leaf = 5;            // thickness of one wooden leaf\ngap = 1;                // hinge clearance\nth_wax = 1.5;           // wax layer depth\nr_corner = 3;           // corner radius for printability\nth_wall = 1.8;          // minimum wall thickness for FDM\npin_r = 1.5;            // hinge pin radius\npin_l = 2 * th_leaf + gap + 2;  // pin length\n\n// ------------------- Colours ----------------------\ncolor_wood   = [0.55, 0.35, 0.15];\ncolor_wax    = [0.25, 0.20, 0.10];\ncolor_metal  = [0.60, 0.60, 0.55];\n\n// ------------------- Modules ----------------------\nmodule rounded_box(size, r, center=false) {\n    // center must be false so that translate() behaves predictably\n    hull() {\n        translate([r, r, 0]) cube([size.x-2*r, size.y-2*r, size.z], center=center);\n        translate([r, size.y-r, 0]) sphere(r);\n        translate([size.x-r, r, 0]) sphere(r);\n        translate([size.x-r, size.y-r, 0]) sphere(r);\n        translate([r, r, size.z]) sphere(r);\n        translate([r, size.y-r, size.z]) sphere(r);\n        translate([size.x-r, r, size.z]) sphere(r);\n        translate([size.x-r, size.y-r, size.z]) sphere(r);\n    }\n}\n\nmodule leaf() {\n    // Wooden substrate\n    color(color_wood) {\n        difference() {\n            rounded_box([75, 55, th_leaf], r_corner);\n            // Recess for wax\n            translate([5, 5, th_leaf - th_wax])\n                cube([65, 45, th_wax + 0.1]);\n        }\n    }\n    // Wax layer\n    color(color_wax)\n        translate([5, 5, th_leaf - th_wax])\n            cube([65, 45, th_wax]);\n}\n\nmodule hinge_pin() {\n    color(color_metal)\n        cylinder(h = pin_l, r = pin_r, center = true);\n}\n\nmodule hinge_half(teeth, y0) {\n    // one half of a simple barrel hinge\n    tooth_w = 4;\n    tooth_h = 4;\n    for (i = [0:teeth-1])\n        translate([0, y0 + i * (tooth_w + 1), 0])\n            cube([tooth_h, tooth_w, th_leaf]);\n}\n\n// ------------------- Main assembly ----------------\ntranslate([0, -55/2, 0]) {\n    // bottom leaf\n    leaf();\n\n    // top leaf (rotates around hinge)\n    translate([0, 0, th_leaf + gap])\n        rotate([0, 0, 0])  // default closed\n        leaf();\n}\n\n// hinge barrels\ntranslate([75 - 2, 0, th_leaf + gap/2]) {\n    // bottom barrels\n    hinge_half(3, 5);\n\n    // top barrels, offset one tooth\n    translate([0, 0, th_leaf + gap])\n        hinge_half(2, 5 + 4 + 1);\n\n    // hinge pin\n    translate([2, 5 + 2 + 1, 0])\n        rotate([90, 0, 0])\n            hinge_pin();\n}\n\n// Decorative bronze corner plates (reinforcements)\nmodule corner_plate() {\n    color(color_metal)\n        cube([8, 8, 0.6]);\n}\n\ntranslate([0, 0, 0]) corner_plate();\ntranslate([75-8, 0, 0]) mirror([1, 0, 0]) corner_plate();\ntranslate([0, 55-8, 0]) mirror([0, 1, 0]) corner_plate();\ntranslate([75-8, 55-8, 0]) mirror([1, 1, 0]) corner_plate();",
    "renders": true
  },
  {
    "historical_artifact": "guide",
    "openscad_code": "// Roman Milestone Guide - A 2nd Century AD Historical Artifact\n// Height: 80mm, Base: 30x30mm\n\n// Main module\nmodule milestone() {\n    color(\"antiquewhite\") {\n        // Base plinth\n        translate([0, 0, 0])\n            cube([30, 30, 5], center=true);\n        \n        // Main cylindrical shaft\n        translate([0, 0, 12.5])\n            cylinder(h=50, r1=12, r2=10, center=false);\n        \n        // Top capital\n        translate([0, 0, 62.5])\n            cylinder(h=5, r=13, center=false);\n        \n        // Decorative torus molding below capital\n        translate([0, 0, 57.5])\n            cylinder(h=3, r1=13, r2=14, center=false);\n    }\n    \n    // Latin inscription panel\n    color(\"gray40\") {\n        translate([10, 0, 35])\n            rotate([0, 0, 0])\n            cube([18, 12, 1], center=true);\n    }\n    \n    // Inscription text (simplified)\n    color(\"black\") {\n        // Line 1: Emperor name\n        translate([10, 3, 36])\n            cube([16, 0.5, 0.5], center=true);\n        translate([10, 2.5, 36])\n            cube([15, 0.5, 0.5], center=true);\n        translate([10, 2, 36])\n            cube([14, 0.5, 0.5], center=true);\n        \n        // Line 2: Distance marker\n        translate([10, 1, 36])\n            cube([12, 0.5, 0.5], center=true);\n        translate([10, 0.5, 36])\n            cube([10, 0.5, 0.5], center=true);\n        translate([10, 0, 36])\n            cube([8, 0.5, 0.5], center=true);\n            \n        // Line 3: Location\n        translate([10, -1, 36])\n            cube([16, 0.5, 0.5], center=true);\n        translate([10, -1.5, 36])\n            cube([14, 0.5, 0.5], center=true);\n        translate([10, -2, 36])\n            cube([12, 0.5, 0.5], center=true);\n    }\n    \n    // Decorative fluting on shaft\n    color(\"antiquewhite\") {\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([11.5, 0, 25])\n                    cube([1, 0.5, 40], center=true);\n        }\n    }\n    \n    // Ornamental rosettes on capital\n    color(\"goldenrod\") {\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([9, 0, 65])\n                    sphere(r=1.5, $fn=16);\n        }\n    }\n    \n    // Weathering details\n    color(\"gray20\") {\n        // Chips and cracks\n        translate([8, 8, 30])\n            sphere(r=1, $fn=8);\n        translate([-7, -9, 45])\n            sphere(r=0.8, $fn=8);\n        translate([9, -7, 20])\n            sphere(r=1.2, $fn=8);\n    }\n}\n\n// Render the milestone\nmilestone();",
    "renders": true
  },
  {
    "historical_artifact": "register",
    "openscad_code": "// Mechanical brass cash register (National style, ca. 1900)\n// 3D-printable, ~80 mm wide\n\n$fn = 50;               // smooth curves\n\n// overall scale factor – adjust to printer bed\nscale_factor = 0.35;\n\n// colors\ncolor_brass = \"#b5a642\";\ncolor_dark = \"#3c2f2f\";\ncolor_white = \"#f0f0f0\";\n\nmodule cash_register() {\n    // main cast-brass body\n    color(color_brass)\n    difference() {\n        cube([80, 60, 60], center = true);                 // body block\n        translate([0, 0, 30.5])\n            cube([82, 62, 2], center = true);                // remove top face\n    }\n\n    // drawer compartment\n    difference() {\n        translate([0, 0, -5])\n            cube([75, 55, 12], center = true);\n        translate([0, 0, -10])\n            cube([72, 52, 12], center = true);               // inner cavity\n    }\n\n    // drawer front\n    color(color_brass)\n    translate([0, 28, -10])\n    cube([70, 6, 10], center = true);\n\n    // drawer handle\n    color(color_dark)\n    translate([0, 32, -10])\n    rotate([90, 0, 0])\n    cylinder(h = 20, d = 6, center = true);\n\n    // keys (5 rows × 4 columns)\n    for (row = [0:4]) {\n        for (col = [0:3]) {\n            color(color_white)\n            translate([-30 + col * 20, -25 + row * 10, 31])\n                cylinder(h = 3, d = 8);\n            color(color_dark)\n            translate([-30 + col * 20, -25 + row * 10, 34.5])\n                cylinder(h = 1, d = 4);\n        }\n    }\n\n    // front decorative nameplate\n    color(color_dark)\n    translate([0, 29, 15])\n    cube([40, 2, 20], center = true);\n\n    // side ornamental ridges\n    for (z = [-25:5:25]) {\n        color(color_brass)\n        translate([42, 0, z])\n        cube([2, 58, 2], center = true);\n        translate([-42, 0, z])\n        cube([2, 58, 2], center = true);\n    }\n\n    // display window frame\n    color(color_brass)\n    translate([0, -20, 45])\n    difference() {\n        cube([50, 10, 15], center = true);\n        translate([0, 0, 1])\n            cube([46, 8, 20], center = true);                // window opening\n    }\n\n    // crank arm on right side\n    color(color_brass)\n    translate([45, 10, 20])\n    rotate([90, 0, 0])\n    cylinder(h = 20, d = 6);\n    translate([45, 10, 30])\n    sphere(d = 10);\n}\n\n// render the register\nscale([scale_factor, scale_factor, scale_factor])\ncash_register();",
    "renders": true
  },
  {
    "historical_artifact": "catalogue",
    "openscad_code": "// Historical Roman Wax Tablet (Tabula) - 1st Century AD\n// Realistic medium-complexity model for 3D printing\n\n// Overall dimensions in mm\ntablet_width = 80;\ntablet_height = 50;\ntablet_thickness = 8;\nwood_thickness = 3;\nwax_depth = 2;\n\n// Hinge dimensions\nhinge_diameter = 4;\nhinge_length = 40;\nhinge_gap = 2;\n\n// Stylus dimensions\nstylus_length = 70;\nstylus_diameter = 3;\n\n// Colors\nwood_color = \"#8B4513\";\nwax_color = \"#DAA520\";\nbronze_color = \"#CD7F32\";\n\nmodule wooden_frame() {\n    // Main wooden frame\n    color(wood_color) {\n        // Outer frame\n        difference() {\n            cube([tablet_width, tablet_height, tablet_thickness]);\n            translate([wood_thickness, wood_thickness, wood_thickness])\n                cube([tablet_width-2*wood_thickness, tablet_height-2*wood_thickness, tablet_thickness-wood_thickness+1]);\n        }\n        \n        // Corner reinforcements\n        for(x = [0, tablet_width-wood_thickness]) {\n            for(y = [0, tablet_height-wood_thickness]) {\n                translate([x, y, 0])\n                    cube([wood_thickness, wood_thickness, tablet_thickness+1]);\n            }\n        }\n    }\n}\n\nmodule wax_surface() {\n    // Recessed wax area\n    color(wax_color) {\n        translate([wood_thickness+1, wood_thickness+1, tablet_thickness-wax_depth-1])\n            cube([tablet_width-2*wood_thickness-2, tablet_height-2*wood_thickness-2, wax_depth+1]);\n    }\n}\n\nmodule hinges() {\n    // Bronze hinges connecting tablets\n    color(bronze_color) {\n        for(side = [0, 1]) {\n            translate([side * (tablet_width-hinge_gap), -hinge_length/2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=hinge_gap, d=hinge_diameter, $fn=20);\n            \n            translate([side * (tablet_width-hinge_gap), -hinge_length/2, tablet_thickness-hinge_diameter])\n                rotate([90, 0, 0])\n                    cylinder(h=hinge_gap, d=hinge_diameter, $fn=20);\n        }\n        \n        // Hinge pins\n        translate([0, 0, tablet_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=tablet_width, d=hinge_diameter*0.8, $fn=16);\n    }\n}\n\nmodule stylus() {\n    // Roman stylus for writing\n    color(bronze_color) {\n        translate([0, -tablet_height/2-10, 0])\n            rotate([90, 0, 0]) {\n                // Main shaft\n                cylinder(h=stylus_length, d=stylus_diameter, $fn=12);\n                \n                // Flattened end for writing\n                translate([0, 0, stylus_length-stylus_diameter*2])\n                    scale([1, 0.3, 1])\n                        cylinder(h=stylus_diameter*2, d=stylus_diameter*2, $fn=12);\n                \n                // Eraser end (rounded)\n                translate([0, 0, 0])\n                    sphere(d=stylus_diameter*1.5, $fn=12);\n            }\n    }\n}\n\nmodule decorative_motifs() {\n    // Simple Roman decorative border pattern\n    color(bronze_color) {\n        for(i = [1:3]) {\n            // Top border\n            translate([i*20, 2, tablet_thickness-0.5])\n                sphere(d=1.5, $fn=8);\n            // Bottom border\n            translate([i*20, tablet_height-2, tablet_thickness-0.5])\n                sphere(d=1.5, $fn=8);\n        }\n        \n        // Central boss\n        translate([tablet_width/2, tablet_height/2, tablet_thickness-1])\n            sphere(d=3, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Left tablet\n    translate([-tablet_width/2-hinge_gap/2, 0, 0]) {\n        wooden_frame();\n        wax_surface();\n        decorative_motifs();\n    }\n    \n    // Right tablet\n    translate([tablet_width/2+hinge_gap/2, 0, 0]) {\n        wooden_frame();\n        wax_surface();\n        decorative_motifs();\n    }\n    \n    // Hinges between tablets\n    translate([0, 0, 0])\n        hinges();\n    \n    // Stylus alongside\n    translate([0, tablet_height/2+10, 0])\n        stylus();\n}",
    "renders": true
  },
  {
    "historical_artifact": "inventory",
    "openscad_code": "// Ancient Mesopotamian Clay Inventory Tablet (c. 2000 BCE)\n// A cuneiform administrative tablet with inventory records\n\n// Tablet dimensions (historical: ~90×60×25 mm)\ntablet_w = 80;\ntablet_h = 55;\ntablet_t = 20;\n\n// Cuneiform wedge parameters\nwedge_w = 2.5;\nwedge_l = 4;\nwedge_d = 1.2;\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\nmodule cuneiform_wedge(x, y, angle=0) {\n    translate([x, y, tablet_t - wedge_d]) {\n        rotate([0, 0, angle]) {\n            // Wedge shape for cuneiform\n            linear_extrude(height=wedge_d) {\n                polygon(points=[\n                    [-wedge_w/2, 0],\n                    [wedge_w/2, 0],\n                    [0, wedge_l]\n                ]);\n            }\n        }\n    }\n}\n\nmodule cuneiform_line(start_x, start_y, length, num_wedges) {\n    for(i = [0:num_wedges-1]) {\n        x = start_x + (i * length/num_wedges);\n        cuneiform_wedge(x, start_y, rand() > 0.5 ? 0 : 180);\n    }\n}\n\nmodule inventory_tablet() {\n    difference() {\n        // Main tablet body\n        color(\"burlywood\") {\n            translate([-tablet_w/2, -tablet_h/2, 0]) {\n                cube([tablet_w, tablet_h, tablet_t]);\n            }\n        }\n        \n        // Rounded edges for realism\n        color(\"burlywood\") {\n            translate([-tablet_w/2 + 5, -tablet_h/2 + 5, 0]) {\n                cylinder(h=tablet_t, r=5, $fn=16);\n            }\n            translate([tablet_w/2 - 5, -tablet_h/2 + 5, 0]) {\n                cylinder(h=tablet_t, r=5, $fn=16);\n            }\n            translate([-tablet_w/2 + 5, tablet_h/2 - 5, 0]) {\n                cylinder(h=tablet_t, r=5, $fn=16);\n            }\n            translate([tablet_w/2 - 5, tablet_h/2 - 5, 0]) {\n                cylinder(h=tablet_t, r=5, $fn=16);\n            }\n        }\n        \n        // Seal impression area\n        translate([tablet_w/4, tablet_h/4, tablet_t - 2]) {\n            cylinder(h=2, r=8, $fn=32);\n        }\n        \n        // Cuneiform text areas\n        \n        // Header - inventory title\n        cuneiform_line(-tablet_w/3, tablet_h/4, tablet_w/1.5, 8);\n        \n        // Item counts - barley\n        for(row = [0:2]) {\n            y_pos = tablet_h/4 - (row * 8) - 8;\n            cuneiform_line(-tablet_w/3, y_pos, tablet_w/3, 5);\n            cuneiform_line(tablet_w/6, y_pos, tablet_w/6, 3);\n        }\n        \n        // Item counts - livestock\n        for(row = [3:4]) {\n            y_pos = tablet_h/4 - (row * 8) - 8;\n            cuneiform_line(-tablet_w/3, y_pos, tablet_w/3, 4);\n            cuneiform_line(tablet_w/6, y_pos, tablet_w/6, 2);\n        }\n        \n        // Date section\n        cuneiform_line(-tablet_w/3, -tablet_h/3, tablet_w/3, 6);\n        \n        // Administrative signature\n        cuneiform_line(tablet_w/6, -tablet_h/3, tablet_w/4, 7);\n    }\n    \n    // Clay tablet texture - small imperfections\n    for(i = [0:20]) {\n        translate([\n            rand() * tablet_w - tablet_w/2,\n            rand() * tablet_h - tablet_h/2,\n            tablet_t - rand() * 0.5\n        ]) {\n            sphere(r=rand() * 0.8 + 0.2);\n        }\n    }\n}\n\n// Render the tablet\ninventory_tablet();",
    "renders": true
  },
  {
    "historical_artifact": "roll",
    "openscad_code": "// Dead Sea Scrolls inspired parchment roll (historical artifact)\n// Realistic style, medium complexity, 3D printable\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main roll dimensions\nroll_length = 80;\nroll_diameter = 18;\nwall_thickness = 2;\n\n// Color for aged parchment\ncolor([0.91, 0.85, 0.69]) {\n\n    // Main parchment roll body\n    difference() {\n        // Outer cylinder for the rolled parchment\n        cylinder(h = roll_length, d = roll_diameter, center = true);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h = roll_length + 2, d = roll_diameter - wall_thickness*2, center = true);\n    }\n\n    // Visible edge of rolled parchment layers\n    for (i = [0:2]) {\n        rotate([0, 90, 0])\n            translate([0, 0, -roll_length/2 + i*3 + 2])\n                difference() {\n                    cylinder(h = 1, d1 = roll_diameter - i*0.5, d2 = roll_diameter - i*0.5 - 0.5, center = true);\n                    translate([0, 0, -1])\n                        cylinder(h = 3, d = roll_diameter - wall_thickness*2 - i, center = true);\n                }\n    }\n\n    // Unrolled parchment strip at the end\n    translate([roll_diameter/2 - wall_thickness, 0, roll_length/2 - 5])\n        rotate([90, 0, 0])\n            linear_extrude(height = wall_thickness, center = true)\n                polygon(points = [\n                    [0, 0],\n                    [0, 15],\n                    [1, 15],\n                    [2, 14],\n                    [3, 15],\n                    [4, 14],\n                    [5, 15],\n                    [6, 14],\n                    [7, 15],\n                    [8, 14],\n                    [9, 15],\n                    [10, 0]\n                ]);\n\n    // Torn edge detail at the beginning\n    translate([0, 0, -roll_length/2 + 2])\n        difference() {\n            cylinder(h = 1, d = roll_diameter, center = true);\n            for (i = [0:5]) {\n                rotate([0, 0, i*60 + 30])\n                    translate([roll_diameter/2 - 2, 0, 0])\n                        cube([4, 3, 2], center = true);\n            }\n        }\n\n    // Ancient Hebrew inscription lines (simplified)\n    color([0.7, 0.6, 0.5]) {\n        for (line = [0:3]) {\n            rotate([90, 0, 0])\n                translate([0, -roll_length/2 + line*8 + 10, roll_diameter/2 - wall_thickness/2])\n                    for (char = [0:5]) {\n                        translate([char*2.5 - 7.5, 0, 0])\n                            cube([0.5, 0.2, 2]);\n                    }\n        }\n    }\n\n    // Leather ties/wrapping\n    color([0.4, 0.25, 0.15]) {\n        // Main leather cord\n        rotate([90, 0, 0])\n            translate([0, 0, roll_diameter/2 + 1])\n                torus(roll_diameter/2 + 1, 1);\n\n        // Knot detail\n        translate([roll_diameter/2 + 1, 0, 0])\n            sphere(d = 3);\n    }\n}\n\n// Helper module for leather tie torus\nmodule torus(r, thickness) {\n    rotate_extrude()\n        translate([r, 0, 0])\n            circle(thickness);\n}\n\n// Handle for display\ncolor([0.8, 0.8, 0.8]) {\n    translate([0, 0, -roll_length/2 - 10])\n        cylinder(h = 5, d1 = 8, d2 = 6);\n}",
    "renders": true
  },
  {
    "historical_artifact": "rotulus",
    "openscad_code": "// Rotulus (ancient scroll) - historical artifact\n// Medium complexity realistic style for 3D printing\n\n// Overall dimensions\nscroll_length = 80;\nscroll_diameter = 12;\nhandle_length = 15;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255];\nparchment_color = [245/255, 222/255, 179/255];\nink_color = [25/255, 25/255, 25/255];\nbronze_color = [205/255, 127/255, 50/255];\n\n// Main scroll module\nmodule rotulus() {\n    // Left wooden handle\n    translate([-scroll_length/2 - handle_length/2, 0, 0])\n        color(wood_color)\n        cylinder(h=handle_length, d=scroll_diameter, $fn=20);\n    \n    // Right wooden handle\n    translate([scroll_length/2 + handle_length/2, 0, 0])\n        color(wood_color)\n        cylinder(h=handle_length, d=scroll_diameter, $fn=20);\n    \n    // Scroll body (rolled parchment)\n    color(parchment_color) {\n        // Main scroll tube\n        cylinder(h=scroll_length, d=scroll_diameter, center=true, $fn=50);\n        \n        // Layered scroll effect\n        for(i = [0:4]) {\n            rotate([0, 90, 0])\n            translate([0, 0, -scroll_length/2 + i*2 + 1])\n            scale([1.05 - i*0.02, 1.05 - i*0.02, 0.5])\n            cylinder(h=scroll_length - 2, d=scroll_diameter, center=false, $fn=50);\n        }\n    }\n    \n    // Bronze end caps\n    color(bronze_color) {\n        // Left cap\n        translate([-scroll_length/2 - handle_length/2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=scroll_diameter/3, d=scroll_diameter*1.1, center=true, $fn=30);\n        \n        // Right cap\n        translate([scroll_length/2 + handle_length/2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=scroll_diameter/3, d=scroll_diameter*1.1, center=true, $fn=30);\n    }\n    \n    // Decorative bronze rings\n    color(bronze_color) {\n        for(pos = [-scroll_length/3, 0, scroll_length/3]) {\n            rotate([0, 90, 0])\n            translate([pos, 0, 0])\n            difference() {\n                cylinder(h=3, d=scroll_diameter*1.15, center=true, $fn=30);\n                cylinder(h=4, d=scroll_diameter*0.9, center=true, $fn=30);\n            }\n        }\n    }\n    \n    // Ink inscriptions\n    color(ink_color) {\n        for(i = [0:8]) {\n            rotate([0, 90, 0])\n            translate([0, scroll_diameter/2 + 0.1, -scroll_length/2 + 5 + i*8])\n            cube([0.5, 0.2, 4], center=true);\n        }\n        \n        // Decorative pattern\n        for(j = [0:5]) {\n            rotate([0, 90, 0])\n            translate([0, scroll_diameter/2 + 0.1, -scroll_length/2 + 2 + j*13])\n            for(k = [0:3]) {\n                rotate([0, 0, k*45])\n                translate([0, 0, 0])\n                cube([0.3, 0.2, 1], center=true);\n            }\n        }\n    }\n}\n\n// Create the rotulus\nrotulus();",
    "renders": true
  },
  {
    "historical_artifact": "rotula",
    "openscad_code": "// OpenSCAD model of a Roman rotula (hand-washing basin)\n// Historical artifact from Pompeii, 1st century AD\n// Dimensions: 80mm diameter, 40mm height\n\n// Main body parameters\ndiameter = 80;\nheight = 40;\nwall_thickness = 3;\nbase_thickness = 5;\n\n// Decorative elements\nrim_width = 6;\nhandle_length = 15;\nhandle_width = 8;\nhandle_height = 6;\nfoot_diameter = 40;\nfoot_height = 8;\n\n// Color definitions\nbronze_color = [0.65, 0.35, 0.15];\npatina_color = [0.2, 0.4, 0.3];\n\nmodule rotula_base() {\n    // Main bowl body\n    difference() {\n        // Outer bowl\n        cylinder(h=height, d=diameter, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n        cylinder(h=height-wall_thickness, d=diameter-2*wall_thickness, $fn=64);\n        \n        // Flatten bottom\n        translate([0, 0, -0.1])\n        cube([diameter+2, diameter+2, 0.2], center=true);\n    }\n}\n\nmodule decorative_rim() {\n    // Raised rim with stepped profile\n    difference() {\n        // Outer rim\n        translate([0, 0, height])\n        cylinder(h=rim_width, d=diameter+4, $fn=64);\n        \n        // Inner cutout\n        translate([0, 0, height+rim_width-2])\n        cylinder(h=4, d=diameter-2, $fn=64);\n    }\n}\n\nmodule handles() {\n    // Two opposing handles with classical scroll design\n    for (angle = [0, 180]) {\n        rotate([0, 0, angle])\n        translate([diameter/2 - handle_length/2, 0, height/2 + 5])\n        union() {\n            // Main handle body\n            rotate([0, 90, 0])\n            cylinder(h=handle_length, d=handle_width, $fn=32);\n            \n            // Decorative scroll ends\n            translate([handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n            sphere(d=handle_width*1.2, $fn=32);\n            \n            translate([-handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n            sphere(d=handle_width*1.2, $fn=32);\n        }\n    }\n}\n\nmodule foot_base() {\n    // Classical trumpet-shaped foot\n    difference() {\n        // Main foot shape\n        union() {\n            cylinder(h=foot_height, d=foot_diameter+4, $fn=64);\n            translate([0, 0, foot_height])\n            cylinder(h=foot_height/2, d=foot_diameter, $fn=64);\n        }\n        \n        // Hollow center\n        translate([0, -0.1, 0])\n        cylinder(h=foot_height*1.5, d=foot_diameter-8, $fn=64);\n    }\n}\n\nmodule decorative_patterns() {\n    // Classical acanthus leaf pattern around rim\n    for (i = [0:15]) {\n        rotate([0, 0, i*22.5])\n        translate([diameter/2 + 2, 0, height+rim_width/2])\n        scale([0.3, 0.3, 0.8])\n        rotate([90, 0, 0])\n        cylinder(h=8, d1=3, d2=1, $fn=3);\n    }\n}\n\nmodule patina_effect() {\n    // Random patina spots for realistic aging\n    for (i = [0:20]) {\n        rotate([0, 0, rands(0, 360, 1)[0]])\n        translate([rands(0, diameter/2-5, 1)[0], 0, rands(wall_thickness, height-2, 1)[0]])\n        scale([1, 1, 0.3])\n        sphere(d=rands(2, 4, 1)[0], $fn=16);\n    }\n}\n\n// Main assembly\ncolor(bronze_color)\nunion() {\n    rotula_base();\n    decorative_rim();\n    handles();\n    foot_base();\n    color(patina_color, 0.6)\n    patina_effect();\n}\n\n// Decorative elements\ncolor(bronze_color)\ntranslate([0, 0, 0.01])\ndecorative_patterns();",
    "renders": true
  },
  {
    "historical_artifact": "charta",
    "openscad_code": "// Roman Wax Tablet (Tabula Cerata) - Historical Charta Artifact\n// Medium complexity, realistic style\n// A traditional Roman writing tablet with wax surface and wooden frame\n\n// Overall dimensions for 3D printing\ntablet_width = 80;\ntablet_height = 60;\ntablet_thickness = 10;\n\n// Wax surface dimensions\nwax_depth = 3;\nborder_width = 4;\n\n// Hinge details\nhinge_diameter = 6;\nhinge_length = 15;\nhinge_gap = 2;\n\n// Stylus hole\nstylus_hole_diameter = 4;\n\n// Decorative elements\ncorner_radius = 3;\ninscription_depth = 0.5;\n\n// Wooden frame with wax cavity\nmodule wax_tablet() {\n    difference() {\n        // Main wooden tablet\n        color(\"burlywood\")\n        cube([tablet_width, tablet_height, tablet_thickness], center=true);\n        \n        // Wax cavity\n        color(\"burlywood\")\n        translate([0, 0, tablet_thickness/2 - wax_depth/2])\n        cube([tablet_width - 2*border_width, tablet_height - 2*border_width, wax_depth + 0.1], center=true);\n        \n        // Stylus hole\n        rotate([90, 0, 0])\n        translate([tablet_width/2 - border_width, 0, tablet_thickness/2 - wax_depth])\n        cylinder(h=border_width*2, d=stylus_hole_diameter, $fn=16);\n    }\n    \n    // Wax surface\n    color(\"darkgoldenrod\")\n    translate([0, 0, tablet_thickness/2 - wax_depth - 0.05])\n    cube([tablet_width - 2*border_width - 1, tablet_height - 2*border_width - 1, wax_depth], center=true);\n}\n\n// Hinge loops for binding tablets together\nmodule hinge_loops() {\n    // Left side loops\n    for(i = [-1, 1]) {\n        translate([-tablet_width/2 - hinge_gap, i*tablet_height/4, 0])\n        rotate([90, 0, 0])\n        color(\"burlywood\")\n        difference() {\n            cylinder(h=hinge_length, d=hinge_diameter, $fn=16);\n            // Hollow center\n            cylinder(h=hinge_length + 0.1, d=hinge_diameter - 2, $fn=16);\n        }\n    }\n    \n    // Right side loops (offset for interlocking)\n    for(i = [-0.5, 0.5]) {\n        translate([tablet_width/2 + hinge_gap, i*tablet_height/3, 0])\n        rotate([90, 0, 0])\n        color(\"burlywood\")\n        difference() {\n            cylinder(h=hinge_length, d=hinge_diameter, $fn=16);\n            cylinder(h=hinge_length + 0.1, d=hinge_diameter - 2, $fn=16);\n        }\n    }\n}\n\n// Decorative corner reinforcements\nmodule corner_reinforcements() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(tablet_width/2 - border_width/2), y*(tablet_height/2 - border_width/2), 0])\n            color(\"saddlebrown\")\n            difference() {\n                // Corner bracket\n                cube([border_width*2, border_width*2, tablet_thickness], center=true);\n                \n                // Rounded corners\n                translate([border_width/2, border_width/2, 0])\n                sphere(r=corner_radius, $fn=16);\n                translate([-border_width/2, border_width/2, 0])\n                sphere(r=corner_radius, $fn=16);\n                translate([border_width/2, -border_width/2, 0])\n                sphere(r=corner_radius, $fn=16);\n                translate([-border_width/2, -border_width/2, 0])\n                sphere(r=corner_radius, $fn=16);\n            }\n        }\n    }\n}\n\n// Roman inscription on frame\nmodule inscription() {\n    // Top inscription\n    translate([0, tablet_height/2 - border_width/2, tablet_thickness/2 - wax_depth - inscription_depth/2])\n    linear_extrude(height=inscription_depth + 0.1)\n    text(\"TABULA\", size=4, halign=\"center\", valign=\"center\", font=\"Liberation Sans:style=Bold\");\n    \n    // Bottom inscription\n    translate([0, -tablet_height/2 + border_width/2, tablet_thickness/2 - wax_depth - inscription_depth/2])\n    linear_extrude(height=inscription_depth + 0.1)\n    text(\"CERATA\", size=4, halign=\"center\", valign=\"center\", font=\"Liberation Sans:style=Bold\");\n}\n\n// Wood grain texture effect using small cylinders\nmodule wood_grain() {\n    for(x = [-tablet_width/2:2:tablet_width/2]) {\n        for(y = [-tablet_height/2:2:tablet_height/2]) {\n            if(abs(x) > tablet_width/2 - border_width || abs(y) > tablet_height/2 - border_width) {\n                translate([x, y, tablet_thickness/2 - wax_depth - 0.1])\n                color(\"saddlebrown\")\n                cylinder(h=0.2, d=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Assemble the complete tablet\nunion() {\n    wax_tablet();\n    hinge_loops();\n    corner_reinforcements();\n    inscription();\n    wood_grain();\n}\n\n// Add a simple wooden stylus\ntranslate([tablet_width/2 + 15, 0, 0])\nrotate([0, 90, 0])\ncolor(\"burlywood\")\nunion() {\n    // Stylus body\n    cylinder(h=50, d=3, $fn=12);\n    \n    // Pointed end\n    translate([0, 0, 25])\n    cylinder(h=5, d1=3, d2=1, $fn=12);\n    \n    // Flat end for erasing\n    translate([0, 0, -25])\n    cylinder(h=5, d=5, $fn=12);\n}",
    "renders": true
  },
  {
    "historical_artifact": "chartula",
    "openscad_code": "// Chartula - Byzantine lead seal (sigillographic historical artifact)\n// Overall dimensions: 60mm diameter, 8mm thickness\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main seal disk\nmodule seal_disk() {\n    color(\"dimgray\")\n    difference() {\n        // Main disk body\n        cylinder(h=8, d=60);\n        \n        // Raised central boss\n        translate([0, 0, 2])\n            cylinder(h=6, d=30);\n        \n        // Decorative ring groove\n        translate([0, 0, 0.5])\n            cylinder(h=1, d=50);\n    }\n}\n\n// Imperial bust facing forward (stylized)\nmodule imperial_bust() {\n    color(\"silver\")\n    translate([0, 0, 6.5])\n    difference() {\n        // Head\n        sphere(d=12);\n        \n        // Crown\n        translate([0, 0, 3])\n            cylinder(h=4, d=14);\n        \n        // Crown jewels\n        for(i=[-1:1]) {\n            translate([i*4, 0, 7])\n                sphere(d=2);\n        }\n        \n        // Eyes recessed\n        translate([-3, 2, 2])\n            sphere(d=1.5);\n        translate([3, 2, 2])\n            sphere(d=1.5);\n    }\n    \n    // Torso/robes\n    translate([0, -8, 2])\n    scale([1, 1.2, 1])\n    sphere(d=18);\n}\n\n// Greek inscription around border\nmodule inscription() {\n    color(\"darkslategray\")\n    translate([0, 0, 7.5])\n    for(angle=[0:30:330]) {\n        rotate([0, 0, angle])\n        translate([24, 0, 0])\n        rotate([0, 0, angle])\n        cube([2, 0.5, 1]);\n    }\n}\n\n// Small crosses in quadrants\nmodule decorative_crosses() {\n    color(\"lightgray\")\n    for(pos=[[-15, 15], [15, 15], [-15, -15], [15, -15]]) {\n        translate([pos[0], pos[1], 7.5]) {\n            // Vertical bar\n            cube([1, 6, 1]);\n            // Horizontal bar\n            translate([-2.5, -0.5, 0])\n                cube([6, 1, 1]);\n        }\n    }\n}\n\n// Suspension loop on back\nmodule suspension_loop() {\n    color(\"dimgray\")\n    translate([0, 30, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Outer loop\n        cylinder(h=5, d=10);\n        // Inner hole\n        cylinder(h=6, d=5);\n    }\n}\n\n// Back inscription area\nmodule back_inscription() {\n    color(\"darkslategray\")\n    translate([0, 0, 0.5])\n    cylinder(h=0.5, d=40);\n}\n\n// Assemble the complete chartula\nunion() {\n    seal_disk();\n    imperial_bust();\n    inscription();\n    decorative_crosses();\n    suspension_loop();\n    back_inscription();\n}",
    "renders": true
  },
  {
    "historical_artifact": "schedula",
    "openscad_code": "// Schedula - Medieval Astronomical Tablet\n// Based on 15th century brass astronomical schedula\n\n// Main parameters\ntablet_length = 80;\ntablet_width = 60;\ntablet_thickness = 4;\nborder_width = 3;\ntext_depth = 0.5;\n\n// Decorative corner radius\ncorner_radius = 5;\n\n// Hole parameters\nhole_radius = 2;\nhole_depth = tablet_thickness + 1;\n\n// Module for decorative border pattern\nmodule border_pattern() {\n    // Raised border frame\n    difference() {\n        // Outer frame\n        cube([tablet_length, tablet_width, border_width], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n        cube([tablet_length - 2*border_width, tablet_width - 2*border_width, border_width + 0.2], center=true);\n    }\n}\n\n// Module for suspension hole\nmodule suspension_hole() {\n    // Top hole for hanging\n    translate([0, (tablet_width/2) - 5, 0])\n    rotate([90, 0, 0])\n    cylinder(h=hole_depth, r=hole_radius, center=true, $fn=20);\n}\n\n// Module for astrological symbols\nmodule astrological_symbols() {\n    // Sun symbol\n    translate([-20, 15, 0])\n    color(\"gold\")\n    difference() {\n        cylinder(h=text_depth + 0.1, r=4, center=true, $fn=20);\n        cylinder(h=text_depth + 0.2, r=3.5, center=true, $fn=20);\n    }\n    \n    // Moon symbol\n    translate([20, 15, 0])\n    color(\"silver\")\n    difference() {\n        sphere(r=3.5, $fn=20);\n        translate([1, 0, 0])\n        sphere(r=3.5, $fn=20);\n    }\n    \n    // Saturn symbol (simplified ring)\n    translate([0, -15, 0])\n    color(\"darkgoldenrod\")\n    difference() {\n        cube([8, 3, text_depth + 0.1], center=true);\n        cube([6, 1.5, text_depth + 0.2], center=true);\n    }\n}\n\n// Module for degree markings\nmodule degree_markings() {\n    for(i = [0:5:355]) {\n        rotate([0, 0, i])\n        translate([0, 0, -0.1])\n        translate([0, (tablet_width/2) - 10, 0])\n        cube([0.5, 2, text_depth + 0.2], center=true);\n    }\n}\n\n// Main tablet body\ncolor(\"burlywood\")\ndifference() {\n    // Base tablet\n    cube([tablet_length, tablet_width, tablet_thickness], center=true);\n    \n    // Rounded corners\n    translate([(tablet_length/2) - corner_radius, (tablet_width/2) - corner_radius, 0])\n    sphere(r=corner_radius, $fn=20);\n    translate([-(tablet_length/2) + corner_radius, (tablet_width/2) - corner_radius, 0])\n    sphere(r=corner_radius, $fn=20);\n    translate([(tablet_length/2) - corner_radius, -(tablet_width/2) + corner_radius, 0])\n    sphere(r=corner_radius, $fn=20);\n    translate([-(tablet_length/2) + corner_radius, -(tablet_width/2) + corner_radius, 0])\n    sphere(r=corner_radius, $fn=20);\n}\n\n// Raised central circle\ntranslate([0, 0, tablet_thickness/2 + 0.5])\ncolor(\"goldenrod\")\ndifference() {\n    cylinder(h=2, r=20, center=true, $fn=50);\n    cylinder(h=2.1, r=18, center=true, $fn=50);\n}\n\n// Central pivot hole\ntranslate([0, 0, -tablet_thickness/2])\nrotate([90, 0, 0])\ncylinder(h=tablet_thickness + 2, r=1.5, center=true, $fn=20);\n\n// Add decorative border on front\ntranslate([0, 0, tablet_thickness/2 + 0.1])\nborder_pattern();\n\n// Add suspension hole\ndifference() {\n    union();\n    suspension_hole();\n}\n\n// Add astrological symbols\ntranslate([0, 0, tablet_thickness/2 + 0.2])\nastrological_symbols();\n\n// Add degree markings around edge\ntranslate([0, 0, tablet_thickness/2 + 0.1])\ndegree_markings();\n\n// Back side inscriptions\ntranslate([-15, -5, -tablet_thickness/2 - 0.1])\ncolor(\"darkgoldenrod\")\nlinear_extrude(height=text_depth + 0.1) {\n    text(\"ANNO\", size=3);\n}\n\ntranslate([5, -5, -tablet_thickness/2 - 0.1])\ncolor(\"darkgoldenrod\")\nlinear_extrude(height=text_depth + 0.1) {\n    text(\"DOMINI\", size=3);\n}\n\ntranslate([-10, -10, -tablet_thickness/2 - 0.1])\ncolor(\"darkgoldenrod\")\nlinear_extrude(height=text_depth + 0.1) {\n    text(\"MCCCCLXX\", size=2.5);\n}",
    "renders": true
  },
  {
    "historical_artifact": "scheda",
    "openscad_code": "// Roman military scheda - wax writing tablet\n// 3D printable model with historical accuracy\n\n// Overall dimensions\nlength = 80;\nwidth = 55;\nheight = 8;\nthickness = 2;\n\n// Wood color\ncolor([0.4, 0.2, 0.1]) {\n    // Main tablet body\n    difference() {\n        // Outer frame\n        cube([length, width, height], center = true);\n        \n        // Inner cavity for wax\n        translate([0, 0, -thickness/2])\n            cube([length - 8, width - 8, height], center = true);\n    }\n    \n    // Hinges on left side\n    for(i = [1:3]) {\n        translate([-length/2 + 2, -width/2 + i * width/4, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 4, r = 2, $fn = 16);\n    }\n    \n    // Reinforcement corners\n    module corner(x, y) {\n        translate([x, y, height/2 - 1])\n            cube([6, 6, 2], center = true);\n    }\n    \n    corner(length/2 - 3, width/2 - 3);\n    corner(-length/2 + 3, width/2 - 3);\n    corner(length/2 - 3, -width/2 + 3);\n    corner(-length/2 + 3, -width/2 + 3);\n    \n    // Decorative border pattern\n    module border_pattern() {\n        for(i = [0:4:length-4]) {\n            translate([-length/2 + 2 + i, width/2 - 1, 0])\n                cube([2, 1, height]);\n            translate([-length/2 + 2 + i, -width/2 + 1, 0])\n                cube([2, 1, height]);\n        }\n    }\n    border_pattern();\n}\n\n// Bronze stylus holder\ncolor([0.7, 0.5, 0.2]) {\n    translate([length/2 - 10, 0, height/2 + 1])\n        rotate([90, 0, 0])\n            cylinder(h = 15, r1 = 3, r2 = 2, $fn = 12);\n    \n    // Stylus\n    translate([length/2 - 10, 0, height/2 + 8])\n        rotate([90, 0, 0])\n            cylinder(h = 25, r = 1.5, $fn = 8);\n            \n    // Stylus point\n    translate([length/2 - 10, 0, height/2 + 16])\n        sphere(r = 1.5, $fn = 8);\n}\n\n// Wax surface visualization (translucent)\ncolor([0.9, 0.9, 0.7, 0.3]) {\n    translate([0, 0, -height/2 + 1])\n        cube([length - 8, width - 8, 0.5], center = true);\n}\n\n// Inscription marks on wax\ncolor([0.3, 0.3, 0.3, 0.5]) {\n    for(i = [0:2]) {\n        translate([-length/4 + i * 10, 0, -height/2 + 1.1])\n            cube([0.5, width - 10, 0.2]);\n    }\n    \n    // Vertical lines\n    for(j = [0:1]) {\n        translate([0, -width/4 + j * width/2, -height/2 + 1.1])\n            cube([length - 10, 0.5, 0.2]);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "bulla",
    "openscad_code": "// Roman bulla - protective amulet worn by children (8th-1st century BCE)\n// Overall dimensions: 60mm diameter, 70mm tall including suspension loop\n\n$fn = 64;  // Smooth curves for realistic appearance\n\n// Main body - hollow spherical locket\ndifference() {\n    color(\"goldenrod\") sphere(d = 60);\n    \n    // Hollow interior - 4mm wall thickness\n    translate([0, 0, 5]) sphere(d = 52);\n    \n    // Opening seam - vertical cut\n    rotate([0, 0, 45]) cube([80, 2, 60], center = true);\n}\n\n// Suspension loop - solid torus section\ntranslate([0, 0, 35])\nrotate_extrude(angle = 180)\ntranslate([5, 0, 0])\ncolor(\"goldenrod\") circle(d = 8);\n\n// Decorative border - raised ridge around equator\ndifference() {\n    translate([0, 0, 0])\n    color(\"goldenrod\") sphere(d = 62);\n    \n    translate([0, 0, -1])\n    sphere(d = 58);\n}\n\n// Decorative studs - 8 evenly spaced around equator\nfor (i = [0:7]) {\n    rotate([0, 0, i * 45])\n    translate([28, 0, 0])\n    color(\"gold\") sphere(d = 4);\n}\n\n// Front face inscription - simplified Latin text\nmodule letter_E() {\n    translate([-3, -2, 30.5])\n    color(\"bronze\") cube([6, 4, 1]);\n    \n    translate([-3, -0.5, 30.5])\n    color(\"bronze\") cube([6, 1, 1]);\n    \n    translate([-3, 1.5, 30.5])\n    color(\"bronze\") cube([6, 4, 1]);\n}\n\nmodule letter_V() {\n    translate([-3, 2, 30.5])\n    color(\"bronze\") cube([1, 4, 1]);\n    \n    translate([-1, 0, 30.5])\n    color(\"bronze\") cube([2, 2, 1]);\n    \n    translate([2, 2, 30.5])\n    color(\"bronze\") cube([1, 4, 1]);\n}\n\n// Position letters on front\ntranslate([10, 0, 0]) letter_V();\ntranslate([0, 0, 0]) letter_E();\n\n// Back face geometric pattern - concentric circles\nfor (r = [5:5:20]) {\n    translate([0, 0, -30.5])\n    color(\"bronze\") cylinder(h = 0.5, r1 = r, r2 = r + 0.5);\n}\n\n// Hinge detail on right side\ntranslate([28, 0, 0])\nrotate([90, 0, 0])\ncolor(\"goldenrod\") cylinder(h = 10, d = 6);\n\n// Second hinge segment\ntranslate([28, 0, -10])\nrotate([90, 0, 0])\ncolor(\"goldenrod\") cylinder(h = 10, d = 6);\n\n// Small decorative bosses at cardinal points\ntranslate([0, 30, 0]) color(\"gold\") sphere(d = 3);\ntranslate([0, -30, 0]) color(\"gold\") sphere(d = 3);\ntranslate([30, 0, 0]) color(\"gold\") sphere(d = 3);\ntranslate([-30, 0, 0]) color(\"gold\") sphere(d = 3);",
    "renders": true
  },
  {
    "historical_artifact": "brief",
    "openscad_code": "// Ancient Egyptian Scarab Seal (Middle Kingdom, c. 2000 BCE)\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\nlength = 60;\nwidth = 40;\nheight = 25;\n\n// Colors\ncolor_body = [0.8, 0.6, 0.3];  // Lapis lazuli blue-green\ncolor_details = [0.2, 0.2, 0.2];  // Dark carved details\n\nmodule scarab_body() {\n    color(color_body) {\n        // Main scarab body - oval dome\n        translate([0, 0, 10])\n            scale([1.3, 1, 1])\n            rotate([90, 0, 0])\n                cylinder(h=width*0.8, d1=width*1.2, d2=width*0.8, $fn=50);\n        \n        // Head section\n        translate([length/2 - 8, 0, 10])\n            rotate([90, 0, 0])\n                cylinder(h=15, d1=12, d2=8, $fn=20);\n    }\n}\n\nmodule wing_cases() {\n    color(color_body) {\n        // Left wing case\n        translate([-length/4, width/2 - 3, 8])\n            rotate([0, 0, -15])\n                cube([length/2, 8, 3], center=true);\n        \n        // Right wing case\n        translate([-length/4, -width/2 + 3, 8])\n            rotate([0, 0, 15])\n                cube([length/2, 8, 3], center=true);\n    }\n}\n\nmodule legs() {\n    color(color_body) {\n        // Front legs (6 total legs - 3 per side)\n        for (i = [0:2]) {\n            // Left side legs\n            translate([length/2 - 15 - i*15, width/2 + 2, 5])\n                rotate([0, 0, 45])\n                    cylinder(h=12, d=3, $fn=8);\n            \n            // Right side legs\n            translate([length/2 - 15 - i*15, -width/2 - 2, 5])\n                rotate([0, 0, -45])\n                    cylinder(h=12, d=3, $fn=8);\n        }\n    }\n}\n\nmodule hieroglyphs() {\n    color(color_details) {\n        // Cartouche border\n        translate([0, 0, 0.5])\n            linear_extrude(height=1)\n                square([length-10, width-10], center=true);\n        \n        // Central hieroglyph - simplified Eye of Horus\n        translate([-5, 0, 1])\n            scale([0.5, 0.5, 1])\n            rotate([0, 0, 90])\n                for (i = [0:2]) {\n                    translate([i*3, 0, 0])\n                        cylinder(h=2, d=2, $fn=8);\n                }\n        \n        // Side decorative elements\n        translate([length/2 - 15, 0, 1])\n            rotate([0, 0, 45])\n                cube([3, 3, 2], center=true);\n        \n        translate([-length/2 + 15, 0, 1])\n            rotate([0, 0, -45])\n                cube([3, 3, 2], center=true);\n    }\n}\n\nmodule suspension_loop() {\n    color(color_body) {\n        // Top loop for string/cord\n        translate([0, 0, height - 5])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=10, d=8, $fn=20);\n                    translate([0, 0, -1])\n                        cylinder(h=12, d=4, $fn=20);\n                }\n    }\n}\n\n// Assemble the scarab seal\nunion() {\n    scarab_body();\n    wing_cases();\n    legs();\n    suspension_loop();\n    \n    // Base with hieroglyphic inscription\n    color(color_details) {\n        translate([0, 0, 0])\n            cube([length, width, 2], center=true);\n    }\n    \n    // Carved details on base\n    hieroglyphs();\n}",
    "renders": true
  },
  {
    "historical_artifact": "epistle",
    "openscad_code": "// Epistle historical artifact - Roman wax tablet diptych\n// A realistic representation of a Roman letter-writing tablet\n\n// Main tablet dimensions\ntablet_width = 80;\ntablet_height = 50;\ntablet_thickness = 8;\nhinge_radius = 2.5;\n\n// Wax layer thickness\nwax_thickness = 2;\n\n// Border decoration\nborder_width = 3;\ncorner_radius = 5;\n\n// Stylus hole\nstylus_hole_radius = 3;\n\n// Color definitions\ncolor_wood = [139/255, 90/255, 43/255];\ncolor_wax = [75/255, 60/255, 45/255];\ncolor_metal = [180/255, 180/255, 180/255];\n\nmodule rounded_cube(width, height, depth, radius) {\n    difference() {\n        cube([width, height, depth]);\n        // Round corners\n        translate([radius, radius, -1]) cylinder(r=radius, h=depth+2);\n        translate([width-radius, radius, -1]) cylinder(r=radius, h=depth+2);\n        translate([radius, height-radius, -1]) cylinder(r=radius, h=depth+2);\n        translate([width-radius, height-radius, -1]) cylinder(r=radius, h=depth+2);\n    }\n}\n\nmodule single_tablet() {\n    difference() {\n        // Wooden tablet base\n        color(color_wood) rounded_cube(tablet_width, tablet_height, tablet_thickness, corner_radius);\n        \n        // Wax recess\n        translate([border_width, border_width, tablet_thickness-wax_thickness]) \n            cube([tablet_width-2*border_width, tablet_height-2*border_width, wax_thickness+1]);\n        \n        // Decorative border grooves\n        for(i = [1:3]) {\n            translate([border_width-i, border_width-i, tablet_thickness-1]) \n                cube([tablet_width-2*(border_width-i), tablet_height-2*(border_width-i), 0.5]);\n            translate([border_width+i, border_width+i, tablet_thickness-1]) \n                cube([tablet_width-2*(border_width+i), tablet_height-2*(border_width+i), 0.5]);\n        }\n        \n        // Stylus hole on right edge\n        translate([tablet_width-stylus_hole_radius-2, tablet_height/2, tablet_thickness/2]) \n            rotate([90, 0, 0]) cylinder(r=stylus_hole_radius, h=10, center=true);\n    }\n    \n    // Wax layer in recess\n    translate([border_width, border_width, tablet_thickness-wax_thickness]) \n        color(color_wax) cube([tablet_width-2*border_width, tablet_height-2*border_width, wax_thickness]);\n}\n\nmodule hinge_pin() {\n    // Metal hinge pin\n    color(color_metal) cylinder(r=hinge_radius, h=tablet_width*0.7, center=false);\n}\n\n// Create the diptych (two tablets joined by hinge)\ntranslate([0, 0, 0]) single_tablet();\ntranslate([tablet_width, 0, 0]) rotate([0, 0, 180]) single_tablet();\n\n// Hinge mechanism\ntranslate([tablet_width, tablet_height/2, tablet_thickness/2]) rotate([90, 0, 90]) hinge_pin();\n\n// Add decorative metal corners\nmodule metal_corner() {\n    color(color_metal) {\n        translate([0, 0, 0]) cube([5, 5, 3]);\n        translate([0, 0, 3]) cylinder(r=2.5, h=1);\n    }\n}\n\n// Place metal corners on each corner\ntranslate([1, 1, 0]) metal_corner();\ntranslate([tablet_width-6, 1, 0]) metal_corner();\ntranslate([1, tablet_height-6, 0]) metal_corner();\ntranslate([tablet_width-6, tablet_height-6, 0]) metal_corner();\n\n// And for second tablet\ntranslate([tablet_width, 0, 0]) {\n    translate([1, 1, 0]) metal_corner();\n    translate([tablet_width-6, 1, 0]) metal_corner();\n    translate([1, tablet_height-6, 0]) metal_corner();\n    translate([tablet_width-6, tablet_height-6, 0]) metal_corner();\n}\n\n// Add raised inscription area on back\nmodule inscription_area() {\n    translate([tablet_width*0.2, tablet_height*0.3, -0.5]) \n        cube([tablet_width*0.6, tablet_height*0.4, 0.5]);\n}\n\ntranslate([0, 0, -tablet_thickness]) inscription_area();\ntranslate([tablet_width, 0, -tablet_thickness]) inscription_area();",
    "renders": true
  },
  {
    "historical_artifact": "letter",
    "openscad_code": "// Medieval wax-sealed letter (circa 14th century)\n// Features parchment, wax seal, tied cord, and period-appropriate proportions\n// Sized for 3D printing: ~70mm tall\n\n// Main parameters\nletter_width = 45;\nletter_height = 65;\nletter_thickness = 0.8;\nfold_thickness = 1.6;\nseal_diameter = 14;\nseal_thickness = 3;\ncord_thickness = 1.2;\ncord_length = 35;\n\n// Colors\nparchment_color = \"#f5e8c9\";\nseal_color = \"#8B0000\";\ncord_color = \"#4A4A4A\";\n\n// Create the folded letter\nmodule folded_letter() {\n    color(parchment_color) {\n        // Main body - folded parchment\n        difference() {\n            // Outer envelope shape\n            cube([letter_width, letter_height, fold_thickness], center=true);\n            \n            // Inner hollow space (where letter would be folded)\n            translate([0, 0, fold_thickness/2 - 0.1])\n                cube([letter_width-4, letter_height-4, fold_thickness], center=true);\n        }\n        \n        // Top flap (folded down)\n        translate([0, letter_height/2 - fold_thickness/2, 0])\n            rotate([45, 0, 0])\n            cube([letter_width-2, letter_height/3, letter_thickness], center=true);\n            \n        // Bottom flap (folded up)\n        translate([0, -letter_height/2 + fold_thickness/2, 0])\n            rotate([-45, 0, 0])\n            cube([letter_width-2, letter_height/3, letter_thickness], center=true);\n    }\n}\n\n// Medieval wax seal\nmodule wax_seal() {\n    color(seal_color) {\n        // Main seal body\n        translate([0, 0, fold_thickness/2 + seal_thickness/2])\n            cylinder(h=seal_thickness, d=seal_diameter, $fn=32);\n            \n        // Seal impression (simple heraldic lion rampant)\n        translate([0, 0, fold_thickness/2 + seal_thickness - 0.5])\n            difference() {\n                cylinder(h=1, d=seal_diameter-2, $fn=32);\n                \n                // Lion body (simplified)\n                translate([-2, 2, -0.5])\n                    cube([8, 4, 2]);\n                translate([3, 3, 0])\n                    cylinder(h=2, d=2);\n                    \n                // Tail\n                translate([4, -2, -0.5])\n                    rotate([0, 0, 45])\n                    cube([8, 1.5, 2]);\n            }\n    }\n}\n\n// Tied cord around the letter\nmodule binding_cord() {\n    color(cord_color) {\n        // Horizontal band\n        for(i = [-1, 1]) {\n            translate([0, i * (letter_height/2 - 5), fold_thickness/2 + cord_thickness/2])\n                rotate([90, 0, 0])\n                cylinder(h=letter_width+2, d=cord_thickness, $fn=16);\n        }\n        \n        // Vertical band\n        translate([letter_width/2 - 5, 0, fold_thickness/2 + cord_thickness/2])\n            rotate([0, 90, 0])\n            cylinder(h=letter_height-10, d=cord_thickness, $fn=16);\n            \n        // Knot detail\n        translate([letter_width/2 - 5, letter_height/2 - 5, fold_thickness/2])\n            sphere(d=cord_thickness*2, $fn=16);\n    }\n}\n\n// Assembly\nfolded_letter();\nwax_seal();\nbinding_cord();\n\n// Age marks on parchment (subtle imperfections)\nmodule age_marks() {\n    color(\"#d4c5a0\") {\n        for(i = [1:8]) {\n            translate([rand(-20, 20), rand(-30, 30), fold_thickness/2 + 0.1])\n                sphere(d=rand(0.5, 2), $fn=8);\n        }\n    }\n}\n\n// Uncomment for subtle aging effect\n// %age_marks();",
    "renders": true
  },
  {
    "historical_artifact": "dispatch",
    "openscad_code": "// Roman wax-tablet writing dispatch (1st–2nd c. AD)\n// Two hinged wooden tablets with wax-filled recess, cord seal & stylus\n\n$fa = 2; $fs = 0.5;\n\n// overall scale factor so largest dimension ~70 mm\nscale(0.5)\nunion(){\n    // left tablet\n    tablet(true);\n    \n    // right tablet\n    translate([45,0,0])\n        rotate([0,180,0])\n        tablet(false);\n    \n    // leather cord running through both tablets\n    color(\"SaddleBrown\")\n    translate([-5,0,5])\n    rotate([90,0,0])\n    cylinder(h=55,d=3,center=true);\n    \n    // clay bulla seal dangling on cord\n    translate([-8,0,-8])\n    rotate([0,90,0])\n    bulla();\n}\n\nmodule tablet(isLeft){\n    difference(){\n        // wooden core\n        color(\"BurlyWood\")\n        union(){\n            // main board 40×60×8 mm\n            cube([40,60,8], center=false);\n            \n            // raised rim around wax recess (1 mm thick, 1 mm high)\n            translate([5,5,6])\n                cube([30,50,1]);\n            translate([4,4,6])\n                cube([32,1,1]);\n            translate([4,55,6])\n                cube([32,1,1]);\n            translate([4,5,6])\n                cube([1,50,1]);\n            translate([33,5,6])\n                cube([1,50,1]);\n        }\n        \n        // recess for wax layer (3 mm deep)\n        translate([5,5,0])\n            cube([30,50,3]);\n    }\n    \n    // two hinge rings\n    color(\"BurlyWood\")\n    for(y=[10,50]){\n        translate([isLeft?-3:37, y, 4])\n            rotate([0,90,0])\n            torus(3,1.2);\n    }\n    \n    // faint scratched writing on wax (simulated with thin cubes)\n    color(\"Black\")\n    for(i=[0:3]){\n        translate([10+i*6, 15+i*5, 7.9])\n            cube([0.3, 15, 0.1]);\n    }\n}\n\nmodule torus(R,r){\n    rotate_extrude()\n        translate([R,0,0])\n            circle(r=r);\n}\n\nmodule bulla(){\n    // clay seal 15 mm diameter, 8 mm thick\n    color(\"FireBrick\")\n    difference(){\n        sphere(d=15);\n        translate([0,0,-7.5])\n            cube(16,center=true);\n    }\n    \n    // seal impression: eagle & SPQR text\n    color(\"Maroon\")\n    translate([0,0,7.1])\n        linear_extrude(0.2)\n        union(){\n            circle(d=5);                    // central boss\n            translate([0,0,0])\n                text(\"SPQR\", size=3, halign=\"center\");\n        }\n}",
    "renders": true
  },
  {
    "historical_artifact": "memorandum",
    "openscad_code": "// Wax Tablet Memorandum - Historical Roman writing tablet\n// Size: 80mm x 55mm x 12mm (closed)\n\n// Main tablet dimensions\ntablet_width = 80;\ntablet_height = 55;\ntablet_thickness = 6;\nhinge_diameter = 4;\nhinge_length = 8;\n\n// Wood color\nwood_color = \"#8B4513\";\n\n// Create the tablet with wax surface\nmodule tablet_half(width, height, thickness, is_left) {\n    color(wood_color) {\n        // Main wooden body\n        difference() {\n            cube([width, height, thickness], center = true);\n            // Hollow for wax\n            translate([0, 0, thickness/2 - 1])\n                cube([width - 6, height - 6, 2], center = true);\n        }\n        \n        // Hinges on spine\n        for(i = [-1, 1]) {\n            translate([is_left ? width/2 - 2 : -width/2 + 2, i * height/4, 0])\n                rotate([0, 90, 0])\n                cylinder(h = hinge_length, d = hinge_diameter, center = true);\n        }\n        \n        // Decorative edge pattern\n        for(x = [-width/2 + 5 : 5 : width/2 - 5]) {\n            for(y = [-height/2 + 5 : 5 : height/2 - 5]) {\n                if(abs(x) != width/2 - 5 || abs(y) != height/2 - 5) {\n                    translate([x, y, thickness/2])\n                        cylinder(h = 0.5, d = 2, $fn = 6);\n                }\n            }\n        }\n    }\n    \n    // Wax surface\n    color(\"#2F1B14\") {\n        translate([0, 0, thickness/2 - 0.5])\n            cube([width - 6, height - 6, 1], center = true);\n    }\n    \n    // Stylus groove\n    color(\"#2F1B14\") {\n        translate([is_left ? -width/4 : width/4, -height/2 + 8, thickness/2 - 0.3])\n            cube([width/2 - 10, 2, 0.6], center = true);\n    }\n}\n\n// Stylus\nmodule stylus() {\n    color(\"#C0C0C0\") {\n        // Handle\n        translate([0, 0, 0])\n            cylinder(h = 70, d = 5, center = true);\n        \n        // Point\n        translate([0, 0, -35])\n            cylinder(h = 10, d1 = 5, d2 = 1, center = true);\n        \n        // Flat end for erasing\n        translate([0, 0, 35])\n            cylinder(h = 3, d = 8, center = true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Left tablet half\n        translate([-tablet_width/2 - 1, 0, 0])\n            tablet_half(tablet_width, tablet_height, tablet_thickness, true);\n        \n        // Right tablet half\n        translate([tablet_width/2 + 1, 0, 0])\n            tablet_half(tablet_width, tablet_height, tablet_thickness, false);\n    }\n    \n    // Hinge clearance gap\n    translate([0, 0, 0])\n        cube([2, tablet_height + 10, tablet_thickness + 2], center = true);\n}\n\n// Stylus placement groove on spine\ntranslate([0, -tablet_height/2 - 8, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 80, d = 6, center = true);\n\n// Stylus\ntranslate([0, -tablet_height/2 - 8, -tablet_thickness/2 - 35])\n    rotate([90, 0, 0])\n    stylus();\n\n// Closure mechanism - leather thong\ncolor(\"#654321\") {\n    for(i = [-1, 1]) {\n        translate([i * (tablet_width/2 - 5), tablet_height/2 + 2, tablet_thickness/2 - 1])\n            cylinder(h = 2, d = 3, center = true);\n    }\n}\n\n// Inscription marks on wax (simulated as indentations)\nmodule inscription_marks() {\n    color(\"#1A0F0A\") {\n        for(i = [0 : 10 : 50]) {\n            translate([-tablet_width/2 + 10 + i, -5, tablet_thickness/2 - 0.7])\n                cube([0.5, 30, 0.2], center = true);\n        }\n    }\n}\n\n// Add inscription to both halves\ntranslate([-tablet_width/2 - 1, 0, 0])\n    inscription_marks();\ntranslate([tablet_width/2 + 1, 0, 0])\n    inscription_marks();",
    "renders": true
  },
  {
    "historical_artifact": "minute",
    "openscad_code": "// Roman Legionary Bronze Seal Ring (1st–3rd century AD)\n// Replica miniature, printable, ~22 mm tall ring\n\n// Overall scale so the bezel is ~20 mm wide\nSCALE = 1.0;\n\n// Wall thickness for 3D printing\nWALL = 1.2;\n\n// Bronze colour\ncolor([0.72,0.45,0.2]) union() {\n\n    // Finger ring shank\n    difference() {\n        // Outer torus (full ring)\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([9, 0, 0])\n                circle(r = 2 * SCALE);\n\n        // Remove centre hole\n        rotate_extrude(angle = 360, $fn = 64)\n            translate([9, 0, 0])\n                circle(r = (9 - WALL) * SCALE);\n    }\n\n    // Bezel plate\n    translate([0, 0, 2 * SCALE])\n        difference() {\n            // Oval bezel\n            scale([1.25, 1, 1])\n                cylinder(h = 2 * WALL * SCALE, r = 10 * SCALE, $fn = 48);\n\n            // Recessed intaglio: Legionary eagle with SPQR banner\n            translate([0, 0, -0.1])\n                linear_extrude(height = 1.5 * WALL * SCALE, center = true)\n                    // SPQR inscription\n                    text(\"SPQR\",\n                         size = 5 * SCALE,\n                         font = \"Liberation Sans:style=Bold\",\n                         halign = \"center\",\n                         valign = \"center\");\n        }\n\n    // Decorative ridge around bezel\n    translate([0, 0, 2 * SCALE + 2 * WALL * SCALE])\n        scale([1.4, 1.15, 1])\n            cylinder(h = 1 * SCALE, r = 10.5 * SCALE, $fn = 64);\n\n    // Four small hemispherical studs on ridge\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([11 * SCALE, 0, 2 * SCALE + (2 * WALL + 0.5) * SCALE])\n                sphere(r = 1 * SCALE, $fn = 16);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "protocol",
    "openscad_code": "// Ancient Roman Diplomatic Protocol Tablet - Ceraunia Tabula\n// Wax tablet used for official treaties and protocols (1st-3rd century CE)\n\n// Main tablet dimensions\ntablet_width = 80;\ntablet_height = 60;\ntablet_thickness = 8;\nwall_thickness = 3;\n\n// Wax layer thickness\nwax_thickness = 2;\n\n// Hinge dimensions\nhinge_radius = 3;\nhinge_length = 40;\n\n// Seal placement\nseal_diameter = 12;\nseal_height = 3;\n\n// Latin inscription parameters\ninscription_depth = 0.5;\n\n// Module for wax tablet surface with inscribed protocol text\nmodule wax_surface(width, height, thickness) {\n    // Base wax layer\n    color(\"burlywood\") \n    translate([0, 0, -thickness/2])\n        cube([width-2*wall_thickness, height-2*wall_thickness, thickness], center=true);\n    \n    // Roman protocol inscription (simplified SPQR and treaty marks)\n    color(\"saddlebrown\")\n    for(i = [0:5]) {\n        translate([-width/3 + i*8, -5, -thickness/2 + 0.1])\n            cube([1, 30, inscription_depth]);\n    }\n    \n    // Vertical border lines\n    for(j = [0:3]) {\n        translate([-width/3 + j*15, -height/3, -thickness/2 + 0.1])\n            cube([1, height*0.66, inscription_depth]);\n    }\n}\n\n// Module for single tablet half\nmodule tablet_half(width, height, thickness) {\n    // Outer wooden frame\n    color(\"saddlebrown\") {\n        // Main frame\n        difference() {\n            cube([width, height, thickness], center=true);\n            translate([0, 0, wall_thickness/2])\n                cube([width-2*wall_thickness, height-2*wall_thickness, thickness], center=true);\n        }\n        \n        // Hinge loops\n        for(i = [-1:1]) {\n            translate([width/2 - wall_thickness/2, i*15, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness, r=hinge_radius, center=true);\n        }\n    }\n    \n    // Inner wax surface\n    wax_surface(width, height, wax_thickness);\n}\n\n// Official seal module (SPQR emblem)\nmodule official_seal() {\n    // Seal base\n    color(\"goldenrod\")\n    cylinder(h=seal_height, r=seal_diameter/2, center=true);\n    \n    // Eagle emblem (simplified)\n    color(\"darkgoldenrod\")\n    translate([0, 0, seal_height/2 + 0.1])\n        cube([8, 4, 1], center=true);\n    \n    // Laurel wreath\n    color(\"darkgoldenrod\")\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n            translate([seal_diameter/3, 0, seal_height/2 + 0.1])\n                cylinder(h=0.5, r=1, center=true);\n    }\n}\n\n// Leather binding cord\nmodule binding_cord() {\n    color(\"sienna\")\n    for(i = [-1, 1]) {\n        translate([i*25, 0, tablet_thickness])\n            rotate([90, 0, 0])\n                cylinder(h=50, r=1, center=true);\n    }\n}\n\n// Assembly\n// Left tablet half\ntranslate([-tablet_width/2 - 5, 0, 0])\n    tablet_half(tablet_width, tablet_height, tablet_thickness);\n\n// Right tablet half\ntranslate([tablet_width/2 + 5, 0, 0])\n    mirror([1, 0, 0])\n        tablet_half(tablet_width, tablet_height, tablet_thickness);\n\n// Central seal binding the protocol\ntranslate([0, 0, tablet_thickness/2 + seal_height/2])\n    official_seal();\n\n// Binding cords\nbinding_cord();",
    "renders": true
  },
  {
    "historical_artifact": "registrum",
    "openscad_code": "// Registrum - Medieval Ecclesiastical Register\n// Dimensions: 70mm x 50mm x 10mm\n\n// Main book dimensions\nbook_width = 70;\nbook_height = 50;\nbook_thickness = 10;\ncover_thickness = 1.5;\npage_thickness = 7;\n\n// Colors\ncover_color = \"saddlebrown\";\npage_color = \"antiquewhite\";\nmetal_color = \"darkgoldenrod\";\n\n// Main book body\nmodule book_body() {\n    color(cover_color)\n    difference() {\n        // Main book block\n        cube([book_width, book_height, book_thickness], center=true);\n        \n        // Hollow inside for pages\n        translate([0, 0, cover_thickness/2])\n        cube([book_width-2*cover_thickness, book_height-2*cover_thickness, page_thickness], center=true);\n    }\n}\n\n// Metal corner protectors\nmodule corner_protectors() {\n    corner_size = 5;\n    corner_thickness = 0.5;\n    \n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(book_width/2 - corner_size/2), y*(book_height/2 - corner_size/2), book_thickness/2])\n            color(metal_color)\n            difference() {\n                // Outer corner\n                cube([corner_size, corner_size, cover_thickness*2]);\n                \n                // Inner cutout\n                translate([x*corner_size/2, y*corner_size/2, 0])\n                cube([corner_size/2, corner_size/2, cover_thickness*2 + 0.1]);\n            }\n        }\n    }\n}\n\n// Metal clasp\nmodule clasp() {\n    clasp_width = 8;\n    clasp_height = 3;\n    clasp_thickness = 1;\n    \n    // Front clasp\n    translate([book_width/2 - 2, 0, book_thickness/2])\n    color(metal_color)\n    union() {\n        // Main clasp\n        cube([clasp_width, clasp_height, clasp_thickness]);\n        \n        // Hinge detail\n        translate([clasp_width/2, 0, -clasp_thickness/2])\n        cylinder(h=clasp_thickness*2, r=clasp_height/2, $fn=16);\n    }\n    \n    // Back plate\n    translate([-book_width/2 + 2, 0, book_thickness/2])\n    color(metal_color)\n    cube([clasp_width/2, clasp_height*1.5, clasp_thickness]);\n}\n\n// Decorative raised bands on spine\nmodule spine_bands() {\n    band_width = 2;\n    band_height = 1;\n    num_bands = 4;\n    \n    for(i = [0:num_bands-1]) {\n        translate([-book_width/2 + band_width/2 + i*(book_width/num_bands), 0, book_thickness/2])\n        color(\"darkred\")\n        cube([band_width, book_height, band_height]);\n    }\n}\n\n// Medieval inscription panel\nmodule inscription_panel() {\n    panel_width = 20;\n    panel_height = 8;\n    \n    translate([0, book_height/2 - panel_height/2 - 3, book_thickness/2 + cover_thickness/2])\n    color(\"burlywood\")\n    difference() {\n        // Raised panel\n        cube([panel_width, panel_height, 0.5]);\n        \n        // Inscription grooves\n        for(i = [0:2]) {\n            translate([-panel_width/2 + 3 + i*6, -panel_height/2 + 2, -0.1])\n            cube([4, 1, 0.6]);\n        }\n    }\n}\n\n// Page edges texture\nmodule page_edges() {\n    edge_detail = 0.2;\n    num_lines = 30;\n    \n    translate([0, 0, -book_thickness/2 + cover_thickness/2])\n    color(page_color)\n    for(i = [0:num_lines-1]) {\n        translate([book_width/2 - i*(book_width/num_lines) - book_width/(2*num_lines), 0, 0])\n        cube([book_width/num_lines, book_height, edge_detail]);\n    }\n}\n\n// Assemble the registrum\nunion() {\n    book_body();\n    corner_protectors();\n    clasp();\n    spine_bands();\n    inscription_panel();\n    page_edges();\n}",
    "renders": true
  },
  {
    "historical_artifact": "cartulary",
    "openscad_code": "// Medieval Cartulary - a bound collection of charters and documents\n// Features wooden covers with metal fittings, parchment pages, and decorative clasps\n\n$fn = 50; // Smooth curves for 3D printing\n\n// Main colors\nwood_color = \"#8B4513\";\nmetal_color = \"#B8860B\";\nparchment_color = \"#F5F5DC\";\n\n// Overall dimensions\nbook_width = 70;\nbook_height = 90;\nbook_thickness = 25;\npage_thickness = 20;\n\nmodule book_cover() {\n    // Wooden cover with rounded edges\n    color(wood_color) {\n        translate([0, 0, 0]) {\n            difference() {\n                // Main cover block\n                cube([book_width, book_height, 3], center = true);\n                \n                // Rounded edges by subtracting cylinders\n                translate([book_width/2 - 1.5, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = book_height, r = 1.5, center = true);\n                translate([-book_width/2 + 1.5, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = book_height, r = 1.5, center = true);\n            }\n        }\n    }\n    \n    // Metal corner reinforcements\n    color(metal_color) {\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (book_width/2 - 3), y * (book_height/2 - 3), 1.5]) {\n                    difference() {\n                        cube([6, 6, 1], center = true);\n                        cylinder(h = 2, r = 2.5, center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Central metal boss\n    color(metal_color) {\n        translate([0, 0, 1.5]) {\n            cylinder(h = 2, r = 8, center = true);\n            translate([0, 0, 1])\n                cylinder(h = 2, r = 6, center = true);\n        }\n    }\n}\n\nmodule book_spine() {\n    // Spine with raised bands\n    color(wood_color) {\n        translate([-book_width/2 - 1.5, 0, 0]) {\n            cube([3, book_height, page_thickness + 6], center = true);\n            \n            // Raised bands for sewing supports\n            for(i = [-20, 0, 20]) {\n                translate([0, i, page_thickness/2 + 3]) {\n                    cube([3.5, 8, 1.5], center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule parchment_pages() {\n    // Stacked parchment pages\n    color(parchment_color) {\n        for(i = [0:2:page_thickness-2]) {\n            translate([0, 0, -page_thickness/2 + i + 1]) {\n                cube([book_width - 2, book_height - 2, 0.8], center = true);\n            }\n        }\n    }\n}\n\nmodule decorative_clasp() {\n    // Metal clasp on front cover\n    color(metal_color) {\n        translate([book_width/2 + 2, 0, 0]) {\n            rotate([0, 90, 0]) {\n                // Hinge part\n                cylinder(h = 8, r = 1.5, center = true);\n                \n                // Clasp arm\n                translate([0, -book_height/2 + 5, 0])\n                    rotate([90, 0, 0])\n                        cube([20, 3, 1], center = true);\n                \n                // Clasp loop\n                translate([0, -book_height/2 + 5, 10]) {\n                    rotate([90, 0, 0])\n                        difference() {\n                            cylinder(h = 3, r = 4, center = true);\n                            cylinder(h = 4, r = 2.5, center = true);\n                        }\n                }\n            }\n        }\n    }\n}\n\nmodule inscription() {\n    // Faux Latin inscription on cover\n    color([0.2, 0.2, 0.2]) {\n        translate([0, book_height/2 - 8, 2]) {\n            rotate([0, 0, 0]) {\n                // Simple representation of text\n                for(i = [-15, -5, 5, 15]) {\n                    translate([i, 0, 0])\n                        cube([3, 0.5, 0.2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the cartulary\ntranslate([0, 0, 0]) {\n    // Front cover\n    book_cover();\n    \n    // Back cover (mirror of front)\n    translate([0, 0, -page_thickness - 3])\n        mirror([0, 0, 1])\n            book_cover();\n    \n    // Spine\n    book_spine();\n    \n    // Pages between covers\n    parchment_pages();\n    \n    // Decorative clasp on right side\n    decorative_clasp();\n    \n    // Inscription detail\n    inscription();\n}",
    "renders": true
  },
  {
    "historical_artifact": "chronicle",
    "openscad_code": "// Medieval Chronicle Book - 14th Century illuminated manuscript\n// Size: 80mm x 60mm x 15mm (closed book)\n\n// Colors\nwood_color = [101, 67, 33];\nleather_color = [64, 38, 18];\ngold_color = [255, 215, 0];\npage_color = [245, 222, 179];\n\n// Main book body\nmodule book_body() {\n    // Leather cover front\n    color(leather_color) {\n        difference() {\n            cube([80, 60, 3]);\n            // Decorative border recess\n            translate([5, 5, -0.1])\n                cube([70, 50, 3.2]);\n        }\n    }\n    \n    // Leather cover back\n    translate([0, 0, 12])\n        color(leather_color) {\n            difference() {\n                cube([80, 60, 3]);\n                translate([5, 5, -0.1])\n                    cube([70, 50, 3.2]);\n            }\n        }\n    \n    // Spine\n    translate([0, 27, 3])\n        color(leather_color)\n            cube([80, 6, 9]);\n}\n\n// Metal corner protectors\nmodule corner_protectors() {\n    for(x = [0, 70]) {\n        for(y = [0, 50]) {\n            translate([x, y, -0.5])\n                color(gold_color)\n                    cylinder(h=4, r=4, $fn=16);\n            translate([x, y, 11.5])\n                color(gold_color)\n                    cylinder(h=4, r=4, $fn=16);\n        }\n    }\n}\n\n// Metal clasp\nmodule clasp() {\n    // Hasp on front cover\n    translate([40, -2, 1.5])\n        color(gold_color)\n            cube([15, 4, 1]);\n    \n    // Loop on back cover\n    translate([40, -2, 13.5])\n        color(gold_color)\n            cube([15, 4, 1]);\n}\n\n// Pages\nmodule pages() {\n    color(page_color) {\n        for(i = [0:19]) {\n            translate([2, 2, 3 + i*0.45])\n                cube([76, 56, 0.4]);\n        }\n    }\n}\n\n// Decorative tooling pattern on cover\nmodule cover_decoration() {\n    // Central cross\n    color(gold_color) {\n        translate([37.5, 20, 3.1])\n            cube([5, 20, 0.3]);\n        translate([27.5, 29.5, 3.1])\n            cube([25, 5, 0.3]);\n    }\n    \n    // Corner decorations\n    for(x = [10, 60]) {\n        for(y = [10, 40]) {\n            translate([x, y, 3.1])\n                color(gold_color)\n                    cylinder(h=0.3, r=3, $fn=8);\n        }\n    }\n}\n\n// Medieval style clasps\nmodule medieval_clasps() {\n    // Metal straps\n    color(gold_color) {\n        // Front straps\n        translate([10, -1, 1.5])\n            cube([60, 2, 0.5]);\n        translate([-1, 10, 1.5])\n            cube([2, 40, 0.5]);\n        translate([79, 10, 1.5])\n            cube([2, 40, 0.5]);\n            \n        // Back straps\n        translate([10, 59, 13.5])\n            cube([60, 2, 0.5]);\n        translate([-1, 10, 13.5])\n            cube([2, 40, 0.5]);\n        translate([79, 10, 13.5])\n            cube([2, 40, 0.5]);\n    }\n}\n\n// Wood core for strength\nmodule wood_core() {\n    color(wood_color) {\n        // Front cover core\n        translate([2, 2, 0.5])\n            cube([76, 56, 2]);\n        // Back cover core\n        translate([2, 2, 12.5])\n            cube([76, 56, 2]);\n    }\n}\n\n// Assembly\nbook_body();\nwood_core();\npages();\ncorner_protectors();\nclasp();\ncover_decoration();\nmedieval_clasps();",
    "renders": true
  },
  {
    "historical_artifact": "annal",
    "openscad_code": "// Annal historical artifact - Roman wax tablet with stylus\n// Dimensions: 80mm x 55mm x 12mm (closed position)\n\n// Main tablet body\nmodule tablet_body(width, height, depth, color_val) {\n    color(color_val) {\n        // Main wooden frame\n        difference() {\n            // Outer frame\n            cube([width, height, depth]);\n            \n            // Hollow center for wax\n            translate([3, 3, -1])\n                cube([width-6, height-6, depth+2]);\n            \n            // Hinges on left side\n            translate([-2, height*0.3, depth*0.3])\n                cylinder(h=depth*0.4, d=4);\n            translate([-2, height*0.7, depth*0.3])\n                cylinder(h=depth*0.4, d=4);\n        }\n        \n        // Wax surface (slightly recessed)\n        translate([4, 4, 1])\n            color([0.2, 0.15, 0.1])\n            cube([width-8, height-8, 1]);\n    }\n}\n\n// Decorative corner elements\nmodule corner_decoration(size) {\n    color([0.8, 0.6, 0.2]) {\n        // Simple bronze corner protectors\n        translate([0, 0, 0])\n            cylinder(h=size, d=size*2);\n        rotate([0, 0, 90])\n            translate([0, -size, 0])\n                cube([size*2, size, size]);\n    }\n}\n\n// Roman inscription text (simplified as grooves)\nmodule inscription(text_height) {\n    color([0.3, 0.3, 0.3]) {\n        // Latin text grooves\n        for(i = [1:5]) {\n            translate([10, i*8, 2.5])\n                cube([50, 1, 0.5]);\n        }\n    }\n}\n\n// Stylus for writing\nmodule stylus() {\n    color([0.7, 0.5, 0.3]) {\n        // Main stylus body\n        translate([40, 70, 6])\n            rotate([0, 90, 0])\n                cylinder(h=40, d=3);\n        \n        // Sharp writing point\n        translate([40, 70, 6])\n            rotate([0, 90, 0])\n                cylinder(h=5, d1=3, d2=0.5);\n        \n        // Flat eraser end\n        translate([40, 30, 6])\n            rotate([0, 90, 0])\n                cube([4, 4, 1], center=true);\n    }\n}\n\n// Leather binding strap\nmodule binding_strap() {\n    color([0.4, 0.2, 0.1]) {\n        // Main strap\n        difference() {\n            translate([20, -3, 2])\n                cube([20, 3, 1.5]);\n            \n            // Buckle hole\n            translate([29, -2, 2.5])\n                cylinder(h=2, d=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Bottom tablet\n    tablet_body(50, 35, 8, [0.6, 0.4, 0.2]);\n    \n    // Top tablet (hinged)\n    translate([0, 0, 8])\n        rotate([180, 0, 0])\n            translate([0, -35, 0])\n                tablet_body(50, 35, 8, [0.6, 0.4, 0.2]);\n    \n    // Corner decorations for bottom tablet\n    corner_decoration(3);\n    translate([47, 0, 0])\n        mirror([1, 0, 0])\n            corner_decoration(3);\n    translate([0, 32, 0])\n        mirror([0, 1, 0])\n            corner_decoration(3);\n    translate([47, 32, 0])\n        mirror([1, 1, 0])\n            corner_decoration(3);\n    \n    // Inscription on bottom tablet\n    inscription(2);\n    \n    // Stylus\n    stylus();\n    \n    // Binding strap on bottom\n    binding_strap();\n}",
    "renders": true
  },
  {
    "historical_artifact": "diary",
    "openscad_code": "// Victorian Leather-Bound Diary (Medium Realistic Style)\n// Approximately 80mm x 60mm x 20mm\n\n$fn = 32;\n\n// Main colors\nleather_color = \"#8B4513\";\npage_color = \"#F5F5DC\";\nmetal_color = \"#C0C0C0\";\nembossing_color = \"#654321\";\n\n// Main diary body\nmodule diary_body() {\n    color(leather_color) {\n        // Front cover\n        difference() {\n            translate([0, 0, 10]) cube([80, 60, 3], center=true);\n            // Rounded edges\n            translate([0, 0, 12]) cube([76, 56, 1], center=true);\n        }\n        \n        // Back cover\n        difference() {\n            translate([0, 0, -10]) cube([80, 60, 3], center=true);\n            translate([0, 0, -12]) cube([76, 56, 1], center=true);\n        }\n        \n        // Spine\n        translate([40, 0, 0]) rotate([0, 90, 0]) cylinder(h=3, r=30);\n    }\n}\n\n// Pages block (with slight bulge)\nmodule pages() {\n    color(page_color) {\n        translate([0, 0, 0]) cube([76, 56, 16], center=true);\n        // Page edges texture\n        for (i = [-7:7]) {\n            translate([0, 28 - i*2, -8]) cube([78, 0.2, 16], center=true);\n        }\n    }\n}\n\n// Metal lock clasp\nmodule lock_clasp() {\n    color(metal_color) {\n        // Main clasp on front\n        translate([0, -25, 12]) rotate([90, 0, 0]) cylinder(h=8, r=4);\n        translate([0, -25, 12]) sphere(4);\n        \n        // Lock loop on back\n        translate([0, 25, -12]) rotate([90, 0, 0]) difference() {\n            cylinder(h=8, r=5);\n            cylinder(h=8.1, r=3);\n        }\n    }\n}\n\n// Embossed decorative corners\nmodule corner_ornaments() {\n    color(embossing_color) {\n        for (corner = [[1,1], [1,-1], [-1,1], [-1,-1]]) {\n            translate([corner[0]*35, corner[1]*25, corner[1]*12]) {\n                rotate([0, 0, corner[1]*45]) \n                    cube([8, 8, 0.5], center=true);\n                // Small circles at corners\n                for (i = [-1:1]) {\n                    for (j = [-1:1]) {\n                        if (abs(i) + abs(j) == 2) {\n                            translate([i*3, j*3, 0.3]) \n                                cylinder(h=0.5, r=0.8, center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Spine ridges\nmodule spine_ridges() {\n    color(embossing_color) {\n        for (i = [-2:2]) {\n            translate([40, i*10, 0]) rotate([0, 90, 0]) \n                cylinder(h=30, r=1.5);\n        }\n    }\n}\n\n// Title embossing\nmodule title_embossing() {\n    color(embossing_color) {\n        translate([-15, 0, 12]) rotate([90, 0, 0]) \n            linear_extrude(height=0.3) {\n                text(\"DIARY\", size=6, font=\"Times:style=Bold\");\n            }\n    }\n}\n\n// Leather texture simulation\nmodule leather_texture() {\n    color(leather_color) {\n        for (i = [0:5]) {\n            for (j = [0:3]) {\n                translate([-35 + i*12, -25 + j*15, 11.8]) \n                    sphere(0.5, $fn=8);\n                translate([-35 + i*12, -25 + j*15, -11.8]) \n                    sphere(0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Assemble the diary\nunion() {\n    diary_body();\n    pages();\n    lock_clasp();\n    corner_ornaments();\n    spine_ridges();\n    title_embossing();\n    leather_texture();\n}",
    "renders": true
  },
  {
    "historical_artifact": "journal",
    "openscad_code": "// Historical Journal - Medieval Monastic Manuscript\n// A 3D printable replica of a 12th century illuminated journal\n\n$fn = 32;\n\n// Overall dimensions (in mm)\njournal_width = 70;\njournal_height = 90;\njournal_thickness = 25;\npage_thickness = 20;\ncover_thickness = 2.5;\n\n// Colors\nwood_color = [101, 67, 33];\nleather_color = [74, 44, 28];\ngold_color = [212, 175, 55];\nparchment_color = [240, 234, 214];\n\n// Main journal assembly\nmodule journal() {\n    // Front cover with leather texture\n    color(leather_color)\n    difference() {\n        // Main cover\n        translate([-journal_width/2, -journal_height/2, -journal_thickness/2])\n            cube([journal_width, journal_height, cover_thickness]);\n        \n        // Decorative border recess\n        translate([-journal_width/2 + 3, -journal_height/2 + 3, -1])\n            cube([journal_width - 6, journal_height - 6, 2]);\n    }\n    \n    // Back cover\n    translate([0, 0, journal_thickness - cover_thickness])\n        color(leather_color)\n        translate([-journal_width/2, -journal_height/2, 0])\n            cube([journal_width, journal_height, cover_thickness]);\n    \n    // Spine with raised bands\n    color(leather_color)\n    union() {\n        // Main spine\n        translate([-journal_width/2 - 3, -journal_height/2, -journal_thickness/2])\n            cube([6, journal_height, journal_thickness]);\n        \n        // Raised bands (typical of medieval bindings)\n        for(i = [-1, 0, 1]) {\n            translate([-journal_width/2 - 3.5, i * 25, -journal_thickness/2 + 2])\n                cube([7, 8, journal_thickness - 4]);\n        }\n    }\n    \n    // Pages\n    color(parchment_color)\n    translate([-journal_width/2 + 2, -journal_height/2 + 2, -journal_thickness/2 + cover_thickness])\n        cube([journal_width - 4, journal_height - 4, page_thickness]);\n    \n    // Front cover decorations\n    // Central boss (metal ornament)\n    color(gold_color)\n    translate([0, 0, -2])\n        cylinder(h=3, r=8);\n    \n    // Corner protectors\n    module corner_protector(x, y) {\n        translate([x, y, -2])\n            difference() {\n                cube([8, 8, 3]);\n                translate([8, 8, 0])\n                    sphere(r=8);\n            }\n    }\n    \n    corner_protector(journal_width/2 - 4, journal_height/2 - 4);\n    corner_protector(-journal_width/2 + 4, journal_height/2 - 4);\n    corner_protector(journal_width/2 - 4, -journal_height/2 + 4);\n    corner_protector(-journal_width/2 + 4, -journal_height/2 + 4);\n    \n    // Clasp (metal closure)\n    color(gold_color)\n    translate([journal_width/2 - 2, 0, -1])\n        rotate([0, 90, 0])\n            cylinder(h=15, r=2);\n    \n    // Miniature decorative studs along spine\n    for(i = [-40:10:40]) {\n        color(gold_color)\n        translate([-journal_width/2 - 3, i, journal_thickness/2 - 2])\n            sphere(r=1.5);\n    }\n    \n    // Medieval cross on front cover\n    color(gold_color)\n    translate([0, 0, -2.5])\n    union() {\n        cube([20, 4, 0.5]);\n        cube([4, 20, 0.5]);\n        // Small decorative circles at cross ends\n        translate([10, 0, 0.5]) sphere(r=2);\n        translate([-10, 0, 0.5]) sphere(r=2);\n        translate([0, 10, 0.5]) sphere(r=2);\n        translate([0, -10, 0.5]) sphere(r=2);\n    }\n}\n\n// Create the journal\njournal();",
    "renders": true
  },
  {
    "historical_artifact": "log",
    "openscad_code": "// Viking Runestone Log - Historical Artifact\n// A carved log section with runic inscriptions and decorative patterns\n// Based on 9th-11th century Scandinavian runestones\n\n// Main parameters\nlog_length = 80;\nlog_radius = 20;\nwall_thickness = 3;\n\nmodule rune_carving(char, x, y, z, scale_factor) {\n    // Simple rune representation using primitive shapes\n    translate([x, y, z]) scale([scale_factor, scale_factor, scale_factor]) {\n        if (char == \"F\") {\n            // Fehu rune (wealth)\n            cube([2, 8, 1], center = true);\n            translate([0, 2.5, 0]) cube([8, 2, 1], center = true);\n        }\n        if (char == \"U\") {\n            // Ur rune (aurochs)\n            cube([2, 8, 1], center = true);\n            translate([-3, 0, 0]) cube([2, 8, 1], center = true);\n            translate([3, 0, 0]) cube([2, 8, 1], center = true);\n        }\n        if (char == \"T\") {\n            // Tyr rune (god)\n            cube([8, 2, 1], center = true);\n            translate([0, 3, 0]) cube([2, 6, 1], center = true);\n        }\n    }\n}\n\nmodule viking_knot(x_offset, y_offset, z_offset, rotation) {\n    // Decorative Viking knot pattern\n    translate([x_offset, y_offset, z_offset]) rotate([0, 0, rotation]) {\n        color(\"DarkGoldenrod\") {\n            // Interlaced pattern elements\n            for (i = [-1, 1]) {\n                translate([i * 5, 0, 0]) \n                    rotate([90, 0, 0]) \n                    cylinder(h = 10, r = 1.5, $fn = 8);\n                translate([0, i * 5, 0]) \n                    rotate([0, 90, 0]) \n                    cylinder(h = 10, r = 1.5, $fn = 8);\n            }\n            // Center crossing\n            rotate([45, 0, 0]) cylinder(h = 7, r = 1.5, $fn = 8);\n            rotate([-45, 0, 0]) cylinder(h = 7, r = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Main log body\ncolor(\"SaddleBrown\") {\n    difference() {\n        // Outer log shape\n        cylinder(h = log_length, r = log_radius, $fn = 32);\n        \n        // Hollow center for 3D printing\n        translate([0, 0, -1]) \n            cylinder(h = log_length + 2, r = log_radius - wall_thickness, $fn = 32);\n        \n        // Bark texture - irregular grooves\n        for (i = [0:30]) {\n            rotate([0, 0, i * 12]) {\n                translate([log_radius - 1.5, 0, i * 2.5]) \n                    rotate([90, 0, 0]) \n                    cylinder(h = 3, r1 = 1.5, r2 = 0.5, $fn = 6);\n            }\n        }\n    }\n}\n\n// Top face with runic inscription\ncolor(\"Tan\") {\n    translate([0, 0, log_length - 0.5]) {\n        // Runic text \"FUTHARK\" (first six runes)\n        rune_carving(\"F\", -25, 0, 0, 1.5);\n        rune_carving(\"U\", -15, 0, 0, 1.5);\n        rune_carving(\"T\", -5, 0, 0, 1.5);\n        rune_carving(\"F\", 5, 0, 0, 1.5);\n        rune_carving(\"U\", 15, 0, 0, 1.5);\n        rune_carving(\"T\", 25, 0, 0, 1.5);\n    }\n}\n\n// Decorative knot patterns around the circumference\nfor (i = [0:3]) {\n    angle = i * 90;\n    z_pos = log_length * 0.3 + i * 15;\n    viking_knot(\n        cos(angle) * (log_radius - 3),\n        sin(angle) * (log_radius - 3),\n        z_pos,\n        angle\n    );\n}\n\n// Weathering and age marks\ncolor(\"DimGray\") {\n    for (i = [0:20]) {\n        rotate([0, 0, i * 18]) {\n            translate([log_radius - 1, 0, i * 3.8]) {\n                scale([1, 0.5, 0.3]) \n                    sphere(r = 1.5, $fn = 8);\n            }\n        }\n    }\n}\n\n// Bottom base ring\ncolor(\"Sienna\") {\n    translate([0, 0, 0]) {\n        cylinder(h = 3, r = log_radius + 1, $fn = 32);\n        translate([0, 0, -1]) \n            cylinder(h = 5, r = log_radius + 2, r1 = log_radius + 2, r2 = log_radius + 1, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "record",
    "openscad_code": "// Babylonian cuneiform clay tablet with cuneiform impressions\n// Typical size: ~75mm x 50mm x 25mm\n// Features: Sun-baked clay appearance, cuneiform impressions, edge damage\n\n// Main tablet body\nmodule clay_tablet() {\n    color(\"burlywood\")\n    difference() {\n        // Main tablet - slightly curved top surface\n        union() {\n            // Base slab\n            translate([0, 0, -1])\n                cube([75, 50, 12], center=true);\n            \n            // Slightly domed top\n            scale([1, 1, 0.3])\n                translate([0, 0, 11])\n                    sphere(d=75);\n        }\n        \n        // Edge damage - chipped corners\n        translate([-35, -23, -10])\n            cube([15, 15, 25]);\n        translate([30, 20, -10])\n            cube([12, 12, 25]);\n        translate([25, -25, -10])\n            cube([10, 10, 20]);\n    }\n}\n\n// Cuneiform wedge impression\nmodule cuneiform_wedge(x, y, angle=0, size=2) {\n    translate([x, y, 5])\n    rotate([0, 0, angle])\n    color(\"saddlebrown\")\n    difference() {\n        // Raised area around wedge\n        translate([0, 0, 0.2])\n            cube([size*1.5, size*2, 0.4], center=true);\n        \n        // Wedge impression\n        translate([0, 0, -0.1])\n            scale([0.3, 1, 1])\n                rotate([0, 90, 0])\n                    cylinder(h=size*1.5, d=size, center=true);\n    }\n}\n\n// Tablet edge decoration\nmodule edge_decoration() {\n    color(\"peru\")\n    for(i=[-35:10:35]) {\n        // Top edge dots\n        translate([i, 24, 5])\n            sphere(d=2);\n        translate([i, -24, 5])\n            sphere(d=2);\n        \n        // Side edge dots\n        translate([37, i/1.5, 5])\n            sphere(d=2);\n        translate([-37, i/1.5, 5])\n            sphere(d=2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Clay tablet base\n    clay_tablet();\n    \n    // Cuneiform text area - front\n    for(row=[-15:8:15]) {\n        for(col=[-25:6:25]) {\n            if(row != 7 && !(abs(col) < 10 && row == -7)) {\n                cuneiform_wedge(col, row, (row+col)%2*45);\n            }\n        }\n    }\n    \n    // Cuneiform text area - back\n    translate([0, 0, -12])\n    rotate([180, 0, 0])\n    for(row=[-12:8:12]) {\n        for(col=[-20:6:20]) {\n            cuneiform_wedge(col, row, (row+col)%2*-45);\n        }\n    }\n    \n    // Decorative edge elements\n    edge_decoration();\n    \n    // Surface texture - small pits from air bubbles\n    color(\"sandybrown\")\n    for(i=[1:30]) {\n        translate([\n            rands(-35, 35, 1)[0],\n            rands(-22, 22, 1)[0],\n            rands(5, 7, 1)[0]\n        ])\n        sphere(d=rands(0.5, 1.5, 1)[0]);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "archive",
    "openscad_code": "// Clay Tablet Archive from Mesopotamia (cuneiform style)\n// Overall size: 70 x 45 x 25 mm (fits common FDM printers)\n\n// Wall thickness for printing\nwall = 1.5;\n\n// Main tablet body with rounded edges\nmodule tablet_body() {\n    difference() {\n        // Rounded main tablet\n        minkowski() {\n            cube([65, 40, 8], center=true);\n            sphere(r=2);\n        }\n        \n        // Hollow interior for realistic wall thickness\n        translate([0,0,1])\n            cube([65-2*wall, 40-2*wall, 8], center=true);\n    }\n}\n\n// Cuneiform wedge impression\nmodule wedge(x,y,rot=0) {\n    translate([x,y,-1])\n        rotate([0,0,rot])\n        difference() {\n            cube([1.2,1.2,2], center=true);\n            translate([0,0,1])\n                sphere(r=0.8, $fn=8);\n        }\n}\n\n// Create a row of cuneiform characters\nmodule cuneiform_line(row, y_pos) {\n    for(i=[0:len(row)-1]) {\n        if(row[i] == \"1\") {\n            wedge(-25 + i*5, y_pos, 0);\n        }\n        if(row[i] == \"2\") {\n            wedge(-25 + i*5, y_pos, 45);\n        }\n        if(row[i] == \"3\") {\n            wedge(-25 + i*5, y_pos, -45);\n        }\n    }\n}\n\n// Cuneiform inscription pattern (simplified Sumerian record)\nmodule inscription() {\n    pattern = [\n        [\"1\",\"2\",\"3\",\"1\",\"2\",\"1\",\"3\",\"2\",\"1\",\"1\"],\n        [\"2\",\"1\",\"1\",\"3\",\"1\",\"2\",\"2\",\"1\",\"3\",\"2\"],\n        [\"3\",\"2\",\"1\",\"2\",\"3\",\"1\",\"1\",\"2\",\"2\",\"3\"],\n        [\"1\",\"3\",\"2\",\"1\",\"1\",\"2\",\"3\",\"1\",\"2\",\"1\"]\n    ];\n    \n    for(row=[0:len(pattern)-1]) {\n        cuneiform_line(pattern[row], -15 + row*10);\n    }\n}\n\n// Archive seal impression (cylinder seal style)\nmodule archive_seal() {\n    translate([0, 0, 5]) {\n        difference() {\n            // Raised seal area\n            cylinder(h=1.5, r=8, $fn=32);\n            // Seal motifs\n            for(i=[0:3]) {\n                rotate([0,0,i*90])\n                    translate([4,0,-0.1])\n                        cube([8,1,2], center=true);\n            }\n            cylinder(h=2, r=3, $fn=16);\n        }\n    }\n}\n\n// Small edge chips for realism\nmodule edge_chips() {\n    for(pos=[[-30,-20], [30,-20], [-30,20], [30,20]]) {\n        translate([pos[0], pos[1], 3])\n            translate([rand(-1,1), rand(-1,1), 0])\n                sphere(r=rand(1,2), $fn=8);\n    }\n}\n\n// Main assembly\ncolor(\"burlywood\")\nunion() {\n    tablet_body();\n    \n    color(\"saddlebrown\")\n    difference() {\n        // Cuneiform inscriptions on front\n        translate([0,0,4])\n            inscription();\n        // Chips to show age\n        edge_chips();\n    }\n    \n    // Archive seal mark\n    color(\"saddlebrown\")\n    archive_seal();\n}\n\n// Bottom support ring for printing\ncolor(\"burlywood\")\ntranslate([0,0,-6])\n    cylinder(h=2, r=20, $fn=32);",
    "renders": true
  },
  {
    "historical_artifact": "acta",
    "openscad_code": "// Roman Acta Diurna (Daily Acts) Tablet\n// Daily public notices carved in wax tablets from ancient Rome\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions - tablet sized for handheld reading\ntablet_width = 85;\ntablet_height = 65;\ntablet_thickness = 12;\nwall_thickness = 3;\n\n// Create the main wax tablet frame\nmodule tablet_frame() {\n    // Outer wooden frame\n    color(\"burlywood\")\n    difference() {\n        // Main frame body\n        cube([tablet_width, tablet_height, tablet_thickness], center=true);\n        \n        // Hollow out for wax inset\n        translate([0, 0, tablet_thickness/2 - wall_thickness/2])\n        cube([tablet_width - 2*wall_thickness, \n              tablet_height - 2*wall_thickness, \n              tablet_thickness], center=true);\n    }\n    \n    // Wax writing surface\n    color(\"darkgoldenrod\")\n    translate([0, 0, -tablet_thickness/2 + wall_thickness/2 + 0.5])\n    cube([tablet_width - 2*wall_thickness - 2, \n          tablet_height - 2*wall_thickness - 2, \n          wall_thickness], center=true);\n}\n\n// Roman border decoration pattern\nmodule border_decoration() {\n    color(\"goldenrod\")\n    for(i = [-1, 1]) {\n        // Side borders\n        translate([i * (tablet_width/2 - wall_thickness/2), 0, tablet_thickness/2])\n        cube([wall_thickness, tablet_height - 6, wall_thickness*1.2]);\n        \n        // Top/bottom borders\n        translate([0, i * (tablet_height/2 - wall_thickness/2), tablet_thickness/2])\n        cube([tablet_width - 6, wall_thickness, wall_thickness*1.2]);\n    }\n}\n\n// Latin inscription text (simulated with rectangles)\nmodule inscription() {\n    color(\"saddlebrown\")\n    // Title inscription on frame\n    translate([0, tablet_height/2 - 8, tablet_thickness/2 + 0.5])\n    cube([30, 3, 1]);\n    \n    // Lines of text in wax\n    for(line = [1:5]) {\n        translate([-30, -25 + line*8, -tablet_thickness/2 + wall_thickness])\n        cube([60, 1, 0.5]);\n    }\n}\n\n// Hinge holes for connecting multiple tablets\nmodule hinge_holes() {\n    color(\"burlywood\")\n    for(side = [-1, 1]) {\n        translate([side * (tablet_width/2 - 2), 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=4, r=2, center=true);\n    }\n}\n\n// Seal impression location\nmodule seal_spot() {\n    color(\"firebrick\")\n    translate([tablet_width/2 - 8, -tablet_height/2 + 8, tablet_thickness/2])\n    cylinder(h=1, r=5);\n}\n\n// Assembly\nunion() {\n    tablet_frame();\n    border_decoration();\n    inscription();\n    hinge_holes();\n    seal_spot();\n}",
    "renders": true
  },
  {
    "historical_artifact": "proceedings",
    "openscad_code": "// Historical Proceedings Scroll Artifact - Roman Senate Record\n// Realistic style with medium complexity\n\n$fn = 32;\n\n// Main scroll body\nmodule scroll_body() {\n    color([0.82, 0.71, 0.54])  // Parchment color\n    difference() {\n        // Main rolled scroll\n        cylinder(h = 45, r = 12, center = true);\n        \n        // Hollow center for printing\n        cylinder(h = 47, r = 4, center = true);\n    }\n}\n\n// Wax seal with senate emblem\nmodule wax_seal() {\n    color([0.6, 0.2, 0.2])  // Deep red wax\n    translate([0, 0, 25])\n    difference() {\n        cylinder(h = 3, r = 8);\n        // Senate SPQR emblem\n        translate([0, 0, -0.5])\n        linear_extrude(height = 3.5)\n        text(\"SPQR\", size = 4, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Scroll handles\nmodule scroll_handles() {\n    // Left handle\n    translate([-14, 0, 0])\n    rotate([90, 0, 0])\n    color([0.4, 0.2, 0.1])  // Dark wood\n    cylinder(h = 20, r = 2);\n    \n    // Right handle\n    translate([14, 0, 0])\n    rotate([90, 0, 0])\n    color([0.4, 0.2, 0.1])  // Dark wood\n    cylinder(h = 20, r = 2);\n}\n\n// Torn edges showing inner layers\nmodule torn_edges() {\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([12, 0, -22 + (i % 2) * 2])\n        color([0.75, 0.65, 0.5])\n        cube([2, 1, 4]);\n    }\n}\n\n// Written text lines on scroll\nmodule text_lines() {\n    color([0.3, 0.2, 0.1])  // Dark ink\n    for(z = [-15:5:15]) {\n        translate([0, 0, z])\n        rotate([90, 0, 0])\n        linear_extrude(height = 0.5)\n        text(\"SENATVS\", size = 2, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color([0.5, 0.3, 0.1])  // Bronze/gold accent\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([11.5, 0, 0])\n        sphere(r = 0.5);\n    }\n}\n\n// Leather binding straps\nmodule binding_straps() {\n    color([0.3, 0.2, 0.1])  // Dark leather\n    // Top strap\n    translate([0, 8, 0])\n    cube([26, 2, 1], center = true);\n    \n    // Bottom strap\n    translate([0, -8, 0])\n    cube([26, 2, 1], center = true);\n}\n\n// Assembly\nunion() {\n    scroll_body();\n    scroll_handles();\n    wax_seal();\n    torn_edges();\n    text_lines();\n    border_pattern();\n    binding_straps();\n}",
    "renders": true
  },
  {
    "historical_artifact": "transaction",
    "openscad_code": "// Mesopotamian clay tablet with cuneiform transaction record\n// Typical size of real tablets: 60-90 mm\n// This model: 70 x 45 x 18 mm\n\n// Clay color\ncolor([0.65, 0.45, 0.35])\n\n// Main tablet body\ndifference() {\n    // Basic tablet shape - slightly curved\n    union() {\n        // Front half\n        translate([0, 0, -1]) {\n            cube([70, 45, 10], center=true);\n        }\n        // Back half slightly offset for curvature\n        translate([0, 0, 1]) {\n            cube([68, 43, 10], center=true);\n        }\n    }\n    \n    // Rounded edges\n    translate([0, 0, 0]) {\n        scale([1, 1, 0.5]) {\n            sphere(d=50, $fn=64);\n        }\n    }\n    \n    // Smooth corners\n    for(x = [-33, 33])\n    for(y = [-20, 20]) {\n        translate([x, y, 0]) {\n            sphere(d=8, $fn=16);\n        }\n    }\n}\n\n// Cuneiform impressions on front face\nmodule cuneiform_mark(x, y, rotation=0) {\n    translate([x, y, 9]) {\n        rotate([0, 0, rotation]) {\n            union() {\n                // Wedge shape\n                translate([0, 0, -1]) {\n                    cube([3, 1.5, 2], center=true);\n                }\n                translate([0, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=2, d1=3, d2=0.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Transaction details - barley delivery\n// Date marks\nfor(i = [0:4]) {\n    cuneiform_mark(-25 + i*5, 15, 45);\n}\n\n// Quantity marks\nfor(i = [0:2]) {\n    for(j = [0:3]) {\n        cuneiform_mark(-15 + j*4, 5 - i*4, 0);\n    }\n}\n\n// Seal impression (cylinder seal mark)\nmodule seal_impression() {\n    difference() {\n        translate([20, -10, 9]) {\n            cylinder(h=1.5, d=12, $fn=64);\n        }\n        // Decorative pattern\n        for(i = [0:5]) {\n            rotate([0, 0, i*60]) {\n                translate([6, 0, 7.5]) {\n                    cube([0.5, 2, 0.5], center=true);\n                }\n            }\n        }\n    }\n}\n\nseal_impression();\n\n// Small chip on edge for realism\ntranslate([-32, 18, 5]) {\n    sphere(d=4, $fn=16);\n}\n\n// Back face with additional transaction lines\nfor(i = [0:2]) {\n    translate([-20 + i*15, 0, -8.5]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height=0.8) {\n                square([8, 1], center=true);\n            }\n        }\n    }\n}\n\n// Thickness reinforcement\ndifference() {\n    translate([0, 0, 0]) {\n        cube([72, 47, 18], center=true);\n    }\n    translate([0, 0, 0]) {\n        cube([68, 43, 20], center=true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "instrument",
    "openscad_code": "// Roman Cornu - Ancient Roman Military Signal Horn\n// Historical artifact from 1st-3rd century AD\n// Used by Roman legions for battlefield communication\n\n$fn = 32;\n\n// Overall dimensions: ~90mm length\nscale_factor = 0.6;\n\nmodule cornu_body() {\n    color(\"bronze\") {\n        // Main curved tube\n        difference() {\n            union() {\n                // Create curved tube using rotated cylinders\n                for(i = [0:5:90]) {\n                    rotate([0, 0, i]) \n                    translate([0, -35 + i * 0.35, 0])\n                    rotate([90, 0, 0])\n                    cylinder(h = 6, r1 = 6 - i * 0.03, r2 = 6 - (i + 5) * 0.03);\n                }\n                \n                // Mouthpiece\n                translate([-30, -38, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 15, r1 = 4, r2 = 5);\n                \n                // Bell flare\n                translate([33, -3, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 12, r1 = 8, r2 = 12);\n            }\n            \n            // Hollow out the tube\n            for(i = [0:5:90]) {\n                rotate([0, 0, i]) \n                translate([0, -35 + i * 0.35, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 7, r1 = 4.5 - i * 0.02, r2 = 4.5 - (i + 5) * 0.02);\n            }\n        }\n    }\n}\n\nmodule decorative_crossbar() {\n    color(\"bronze\") {\n        // Main crossbar\n        translate([0, -20, 0])\n        rotate([0, 0, -15])\n        cube([50, 4, 4], center = true);\n        \n        // Decorative end caps\n        translate([-25, -20, 0])\n        rotate([0, 0, -15])\n        sphere(r = 3);\n        \n        translate([25, -20, 0])\n        rotate([0, 0, -15])\n        sphere(r = 3);\n        \n        // Support rings\n        for(pos = [[-15, -18, 0], [15, -12, 0]]) {\n            translate(pos)\n            rotate([0, 0, -15])\n            difference() {\n                cylinder(h = 5, r = 4);\n                cylinder(h = 6, r = 2);\n            }\n        }\n    }\n}\n\nmodule inscription_plaque() {\n    color(\"darkgray\") {\n        // Decorative plaque with inscription area\n        translate([0, -20, 6])\n        rotate([0, 0, -15])\n        cube([30, 6, 1]);\n        \n        // Small rivets at corners\n        for(x = [-12, 12]) {\n            for(y = [-2, 2]) {\n                translate([x, y + -20, 6.5])\n                rotate([0, 0, -15])\n                cylinder(h = 1, r = 0.8);\n            }\n        }\n    }\n}\n\nmodule mouthpiece_detail() {\n    color(\"brass\") {\n        // Reinforced mouthpiece ring\n        translate([-35, -38, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r = 5.5);\n        \n        // Lip rest\n        translate([-38, -38, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 2, r = 6);\n    }\n}\n\nmodule bell_decoration() {\n    color(\"bronze\") {\n        // Decorative ring on bell\n        translate([33, -3, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 2, r = 12.5);\n        \n        // Additional flare detail\n        translate([38, -3, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 3, r1 = 12, r2 = 12.5);\n    }\n}\n\n// Assemble the complete Cornu\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        cornu_body();\n        decorative_crossbar();\n        inscription_plaque();\n        mouthpiece_detail();\n        bell_decoration();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "testament",
    "openscad_code": "// Historical Testament Scroll Case - Dead Sea Scrolls style\n// Medium complexity realistic replica\n\n$fn = 32;\n\n// Main dimensions\nscroll_length = 80;\nscroll_diameter = 20;\ncase_length = 85;\ncase_diameter = 25;\nwall_thickness = 2;\n\nmodule scroll_case() {\n    // Main cylindrical case body\n    color(\"burlywood\") difference() {\n        cylinder(h = case_length, d = case_diameter, center = true);\n        cylinder(h = case_length + 2, d = case_diameter - 2*wall_thickness, center = true);\n    }\n    \n    // End caps\n    translate([0, 0, case_length/2 - 1]) {\n        color(\"saddlebrown\") cylinder(h = 2, d = case_diameter);\n    }\n    translate([0, 0, -case_length/2 + 1]) {\n        color(\"saddlebrown\") cylinder(h = 2, d = case_diameter);\n    }\n}\n\nmodule scroll() {\n    // Rolled parchment\n    color(\"ivory\") rotate([90, 0, 0]) cylinder(h = scroll_length, d = scroll_diameter, center = true);\n    \n    // Leather binding straps\n    for(i = [-1, 1]) {\n        translate([scroll_diameter/2 + 1, 0, i * scroll_length/3]) {\n            color(\"saddlebrown\") cube([3, 1, 10], center = true);\n        }\n    }\n}\n\nmodule hebrew_inscription() {\n    // Simplified paleo-Hebrew characters on case\n    translate([0, case_diameter/2 + 0.1, case_length/4]) {\n        rotate([90, 0, 0]) {\n            for(i = [0:3]) {\n                translate([i*5 - 7.5, 0, 0]) {\n                    color(\"black\") cube([3, 0.5, 2]);\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_bands() {\n    // Decorative etched bands around case\n    for(pos = [-case_length/3, 0, case_length/3]) {\n        translate([0, 0, pos]) {\n            color(\"saddlebrown\") difference() {\n                cylinder(h = 1, d = case_diameter, center = true);\n                cylinder(h = 1.5, d = case_diameter - 4, center = true);\n            }\n        }\n    }\n}\n\nmodule sealing_clay() {\n    // Clay seal at center\n    translate([0, -case_diameter/2 - 3, 0]) {\n        color(\"firebrick\") {\n            cylinder(h = 5, d = 8, center = true);\n            translate([0, 0, 2.5]) {\n                cylinder(h = 1, d = 10);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    scroll_case();\n    decorative_bands();\n    hebrew_inscription();\n    sealing_clay();\n}\n\n// Optional: Show scroll partially removed\ntranslate([0, -40, 0]) {\n    rotate([0, 15, 0]) {\n        scroll();\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "will",
    "openscad_code": "// Medieval Scroll of Last Will and Testament\n// A rolled parchment with wax seal and decorative elements\n\n// Overall dimensions: 60mm length, 20mm diameter when rolled\n$fn = 32;\n\n// Main parchment scroll body\nmodule scroll_body() {\n    // Rolled parchment cylinder\n    color(\"beige\") \n    rotate([90, 0, 0])\n    cylinder(h=50, d=18, center=true);\n}\n\n// Parchment edges showing rolled layers\nmodule scroll_layers() {\n    color(\"antiquewhite\")\n    for(i = [0:5]) {\n        rotate([90, 0, 0])\n        translate([0, 0, -25 + i*2.5])\n        cylinder(h=1, d=18 - i*0.5, center=true);\n    }\n}\n\n// Decorative end caps\nmodule scroll_caps() {\n    color(\"peru\") {\n        // Left cap\n        rotate([90, 0, 0])\n        translate([0, 0, -26])\n        cylinder(h=3, d=20, center=true);\n        \n        // Right cap\n        rotate([90, 0, 0])\n        translate([0, 0, 26])\n        cylinder(h=3, d=20, center=true);\n    }\n}\n\n// Hanging string/tie\nmodule hanging_string() {\n    color(\"saddlebrown\")\n    rotate([90, 0, 0])\n    translate([0, 10, 26])\n    rotate([90, 0, 0])\n    cylinder(h=15, d=1.5, center=true);\n}\n\n// Wax seal with heraldic symbol\nmodule wax_seal() {\n    union() {\n        // Wax base\n        color(\"firebrick\") {\n            translate([0, -10, 20])\n            rotate([90, 0, 0])\n            cylinder(h=4, d=12, center=true);\n        }\n        \n        // Heraldic lion symbol (simplified)\n        color(\"goldenrod\") {\n            // Lion body\n            translate([0, -10, 22])\n            cube([6, 2, 3], center=true);\n            \n            // Lion head\n            translate([3, -10, 22])\n            sphere(d=2.5);\n            \n            // Tail\n            translate([-3.5, -10, 22])\n            rotate([0, 0, 45])\n            cube([3, 0.5, 0.5], center=true);\n        }\n    }\n}\n\n// Written text lines (as relief)\nmodule text_lines() {\n    color(\"burlywood\")\n    for(i = [0:3]) {\n        rotate([90, 0, 0])\n        translate([0, -8 + i*4, 0])\n        cube([30, 0.5, 1], center=true);\n    }\n}\n\n// Decorative border pattern\nmodule decorative_border() {\n    color(\"goldenrod\")\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([9, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=1, d=2, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    scroll_body();\n    scroll_layers();\n    scroll_caps();\n    hanging_string();\n    wax_seal();\n    \n    // Text elements on scroll\n    translate([0, 0, -5])\n    text_lines();\n    \n    // Decorative elements\n    translate([0, 0, -15])\n    decorative_border();\n    translate([0, 0, 15])\n    decorative_border();\n}",
    "renders": true
  },
  {
    "historical_artifact": "covenant",
    "openscad_code": "// Covenant Stone Tablet - 10 Commandments Replica\n// Based on traditional biblical description with rounded top stone tablet\n// Includes engraved Roman numerals and decorative border\n\n// Overall dimensions (mm)\ntablet_height = 80;\ntablet_width = 50;\ntablet_thickness = 8;\nborder_thickness = 2;\nengraving_depth = 1;\n\n// Colors\nstone_color = [0.7, 0.65, 0.6];  // Light sandstone\nengraving_color = [0.4, 0.35, 0.3];  // Darker stone for engravings\n\n// Main tablet body with rounded top\nmodule tablet_body() {\n    color(stone_color)\n    union() {\n        // Main rectangular body\n        cube([tablet_width, tablet_thickness, tablet_height - tablet_width/2], center=true);\n        \n        // Rounded top (half cylinder)\n        translate([0, 0, tablet_height/2 - tablet_width/4])\n        rotate([90, 0, 0])\n        cylinder(h=tablet_width, r=tablet_width/2, center=true);\n    }\n}\n\n// Decorative border pattern\nmodule decorative_border() {\n    color(stone_color)\n    for(i = [-1, 1]) {\n        // Left and right borders\n        translate([tablet_width/2 * i, 0, 0])\n        cube([border_thickness, tablet_thickness + 0.1, tablet_height - tablet_width/2], center=true);\n        \n        // Top border segments (following curve)\n        translate([tablet_width/2 * i * 0.7, 0, tablet_height/2 - tablet_width/4])\n        rotate([90, 0, 0])\n        cylinder(h=border_thickness, r=tablet_width/2 * 0.7, center=true);\n    }\n    \n    // Bottom border\n    translate([0, 0, -tablet_height/2 + tablet_width/4])\n    cube([tablet_width + border_thickness*2, tablet_thickness + 0.1, border_thickness], center=true);\n}\n\n// Roman numerals I-X engravings\nmodule roman_numerals() {\n    color(engraving_color)\n    difference() {\n        // Create engraving cuts\n        for(i = [1:10]) {\n            translate([\n                (i <= 5 ? -tablet_width/4 : tablet_width/4),\n                tablet_thickness/2 + 0.1,\n                tablet_height/2 - tablet_width/4 - 8 - (i <= 5 ? i-1 : i-6) * 12\n            ])\n            scale([0.3, 1, 0.5])\n            text(str(i), size=6, font=\"Times:style=Bold\", halign=\"center\");\n        }\n    }\n}\n\n// Central decorative emblem (two tablets symbol)\nmodule central_emblem() {\n    color(engraving_color)\n    difference() {\n        // Two small rounded tablets\n        translate([-8, 0, 0])\n        scale([0.15, 0.5, 0.25])\n        tablet_body();\n        \n        translate([8, 0, 0])\n        scale([0.15, 0.5, 0.25])\n        tablet_body();\n    }\n}\n\n// Assembly\nunion() {\n    // Main tablet\n    tablet_body();\n    \n    // Decorative border\n    decorative_border();\n    \n    // Engravings\n    translate([0, 0, 0])\n    roman_numerals();\n    \n    // Central emblem\n    translate([0, tablet_thickness/2 + 0.2, tablet_height/4])\n    central_emblem();\n}",
    "renders": true
  },
  {
    "historical_artifact": "contract",
    "openscad_code": "// Medieval Wax Seal Contract\n// A folded parchment with wax seal and cord, 14th century style\n\n// Overall dimensions (mm)\ncontract_width = 40;\ncontract_height = 30;\ncontract_thickness = 3;\nseal_diameter = 15;\nseal_thickness = 4;\n\nmodule parchment_sheet() {\n    // Main contract body - slightly curved folded parchment\n    color(\"antique_white\") \n    difference() {\n        // Main folded shape\n        union() {\n            // Front page\n            translate([0, 0, contract_thickness/2]) \n            cube([contract_width, contract_height, contract_thickness], center=true);\n            \n            // Back page (folded behind)\n            translate([0, -contract_height/2 - 0.5, -contract_thickness/2]) \n            rotate([10, 0, 0])\n            cube([contract_width, contract_height, contract_thickness], center=true);\n        }\n        \n        // Text lines on front (engraved)\n        for(y = [-contract_height/3, -contract_height/6, 0, contract_height/6, contract_height/3]) {\n            translate([0, y, contract_thickness/2 + 0.1]) \n            cube([contract_width * 0.8, 1, 0.2], center=true);\n        }\n        \n        // Signature line at bottom\n        translate([0, contract_height/3 + 5, contract_thickness/2 + 0.1]) \n        cube([contract_width * 0.6, 1, 0.2], center=true);\n    }\n}\n\nmodule wax_seal() {\n    // Red wax seal with seal design\n    color(\"firebrick\") {\n        // Main seal body\n        translate([0, -contract_height/2 - 5, -seal_thickness/2]) \n        cylinder(d=seal_diameter, h=seal_thickness);\n        \n        // Seal impression - heraldic rose\n        difference() {\n            // Base of seal\n            translate([0, -contract_height/2 - 5, seal_thickness/2 - 0.5]) \n            cylinder(d=seal_diameter * 0.9, h=1);\n            \n            // Rose petals pattern\n            for(i = [0:60:359]) {\n                rotate([0, 0, i]) \n                translate([seal_diameter * 0.25, 0, -0.3]) \n                scale([1, 0.5, 1]) \n                sphere(d=seal_diameter * 0.3);\n            }\n        }\n    }\n}\n\nmodule sealing_cord() {\n    // Hemp cord attaching seal to contract\n    color(\"saddlebrown\") {\n        // Cord from seal to contract\n        hull() {\n            translate([seal_diameter/2 - 2, -contract_height/2 - 5, 0]) \n            sphere(d=1.5);\n            translate([contract_width/2 - 5, contract_height/2 - 5, contract_thickness/2]) \n            sphere(d=1.5);\n        }\n        \n        // Cord loop around contract\n        for(angle = [0:30:359]) {\n            rotate([90, 0, angle]) \n            translate([contract_width/2 - 4, 0, 0]) \n            rotate([0, 90, 0]) \n            cylinder(h=1, d=1.5);\n        }\n    }\n}\n\nmodule decorative_edge() {\n    // Decorative punched holes along edge\n    color(\"antique_white\") \n    for(x = [-contract_width/2 + 3:4:contract_width/2 - 3]) {\n        translate([x, contract_height/2, contract_thickness/2]) \n        cylinder(h=contract_thickness + 0.5, d=1.5);\n    }\n}\n\n// Assemble the contract\nunion() {\n    parchment_sheet();\n    wax_seal();\n    sealing_cord();\n    decorative_edge();\n}\n\n// Small medieval cross watermark\ncolor(\"antique_white\") \ntranslate([contract_width/4, 0, contract_thickness/2 + 0.15]) \nunion() {\n    cube([8, 1.5, 0.1], center=true);\n    cube([1.5, 8, 0.1], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "agreement",
    "openscad_code": "// Magna Carta Sealed Scroll (1215 CE) - Realistic Medium Complexity\n// A 3D printable representation of the historic agreement charter\n\n$fn = 32;  // Smooth curves for printing\n\n// Scroll dimensions (scaled for 3D printing)\nscroll_length = 80;\nscroll_diameter = 15;\nseal_diameter = 22;\nseal_thickness = 4;\n\n// Colors\nparchment_color = \"#F5DEB3\";\nseal_color = \"#8B4513\";\nribbon_color = \"#B22222\";\nwax_color = \"#A0522D\";\n\n// Main scroll body\nmodule scroll_body() {\n    color(parchment_color) {\n        // Rolled parchment tube\n        difference() {\n            cylinder(h = scroll_length, d = scroll_diameter, center = true);\n            // Hollow center\n            cylinder(h = scroll_length + 2, d = scroll_diameter - 4, center = true);\n        }\n        \n        // Parchment end details\n        translate([scroll_length/2 - 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = scroll_diameter + 2, d = 2, center = true);\n        \n        translate([-scroll_length/2 + 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = scroll_diameter + 2, d = 2, center = true);\n    }\n}\n\n// Wax seal with royal impression\nmodule royal_seal() {\n    color(seal_color) {\n        // Main seal disk\n        translate([scroll_length/2 - seal_diameter/2, 0, scroll_diameter/2 + seal_thickness/2])\n            cylinder(h = seal_thickness, d = seal_diameter);\n        \n        // Royal crown impression on seal\n        translate([scroll_length/2 - seal_diameter/2, 0, scroll_diameter/2 + seal_thickness]) {\n            color(wax_color) {\n                // Crown base\n                cylinder(h = 1, d = seal_diameter - 4);\n                \n                // Crown points\n                for(i = [-30:30:30]) {\n                    rotate([0, 0, i])\n                        translate([0, (seal_diameter - 6)/2, 0.5])\n                            cube([2, 6, 2], center = true);\n                }\n                \n                // Central orb\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Red silk ribbon\nmodule ribbon() {\n    color(ribbon_color) {\n        // Ribbon wrapping around scroll\n        for(i = [0:120:240]) {\n            rotate([0, 0, i])\n                translate([scroll_length/2 - 10, 0, scroll_diameter/2 + 1])\n                    cube([20, 2, 0.5], center = true);\n        }\n        \n        // Ribbon knot under seal\n        translate([scroll_length/2 - seal_diameter/2, 0, scroll_diameter/2 - 1])\n            cylinder(h = 2, d = 6);\n    }\n}\n\n// Parchment texture lines\nmodule parchment_lines() {\n    color(\"#DEB887\") {\n        for(i = [-scroll_length/2 + 5:5:scroll_length/2 - 5]) {\n            translate([i, 0, scroll_diameter/2 + 0.1])\n                cube([0.5, scroll_diameter - 2, 0.1], center = true);\n        }\n    }\n}\n\n// Latin inscription band\nmodule inscription() {\n    color(\"#8B7355\") {\n        // Decorative border\n        translate([0, 0, scroll_diameter/2 + 0.2])\n            cube([scroll_length - 10, scroll_diameter - 6, 0.2], center = true);\n        \n        // Initial letter decoration\n        translate([-scroll_length/2 + 8, 0, scroll_diameter/2 + 0.3])\n            cube([4, 6, 0.1], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    scroll_body();\n    royal_seal();\n    ribbon();\n    parchment_lines();\n    inscription();\n}",
    "renders": true
  },
  {
    "historical_artifact": "bond",
    "openscad_code": "// Historical Bond Certificate - 1880s Railroad Bond\n// Dimensions: 80mm wide, 55mm tall, 3mm thick\n\n// Overall bond body\nmodule bond_body() {\n    color([0.95, 0.9, 0.7])  // Aged parchment color\n    difference() {\n        // Main rectangular shape with rounded corners\n        minkowski() {\n            cube([75, 50, 2.5], center=true);\n            cylinder(h=0.1, r=3, $fn=20);\n        }\n        \n        // Central security watermark hole pattern\n        translate([0, 0, 1.3])\n        for(x = [-30:15:30])\n            for(y = [-20:10:20])\n                translate([x, y, 0])\n                cylinder(h=3, r=2, $fn=6);\n    }\n}\n\n// Ornate border decoration\nmodule border_decoration() {\n    color([0.7, 0.5, 0.2])  // Gold ink color\n    \n    // Top border\n    translate([0, 22, 1.3])\n    union() {\n        // Central decorative element\n        translate([0, 0, 0])\n        cylinder(h=0.5, r=8, $fn=32);\n        \n        // Side flourishes\n        for(side = [-1, 1]) {\n            translate([side * 25, 0, 0])\n            rotate([0, 0, side * 15])\n            scale([0.8, 1, 1])\n            cylinder(h=0.5, r=5, $fn=32);\n        }\n    }\n    \n    // Bottom border (mirrored)\n    mirror([0, 1, 0])\n    translate([0, 22, 1.3])\n    union() {\n        cylinder(h=0.5, r=8, $fn=32);\n        for(side = [-1, 1]) {\n            translate([side * 25, 0, 0])\n            rotate([0, 0, side * 15])\n            scale([0.8, 1, 1])\n            cylinder(h=0.5, r=5, $fn=32);\n        }\n    }\n}\n\n// Company seal\nmodule company_seal() {\n    color([0.6, 0.2, 0.1])  // Red wax seal color\n    \n    // Raised seal base\n    translate([25, -15, 1.3])\n    cylinder(h=2, r=8, $fn=32);\n    \n    // Seal ring\n    translate([25, -15, 3.3])\n    difference() {\n        cylinder(h=0.5, r=7, $fn=32);\n        cylinder(h=0.6, r=5, $fn=32);\n    }\n    \n    // Railroad tracks motif inside seal\n    translate([25, -15, 3.4])\n    for(i = [-2:2]) {\n        translate([i * 1.5, 0, 0])\n        cube([0.5, 6, 0.3], center=true);\n    }\n}\n\n// Text lines for bond details\nmodule bond_text() {\n    color([0.1, 0.1, 0.1])  // Black text\n    \n    // Main title\n    translate([0, 10, 1.3])\n    scale([0.8, 1, 0.1])\n    cube([50, 3, 0.5], center=true);\n    \n    // Value line\n    translate([0, 5, 1.3])\n    scale([0.6, 1, 0.1])\n    cube([40, 2, 0.5], center=true);\n    \n    // Issue date line\n    translate([0, 0, 1.3])\n    scale([0.5, 1, 0.1])\n    cube([30, 1.5, 0.5], center=true);\n    \n    // Serial number boxes\n    translate([-20, -10, 1.3])\n    cube([8, 4, 0.5]);\n    translate([20, -10, 1.3])\n    cube([8, 4, 0.5]);\n}\n\n// Decorative corner elements\nmodule corner_decorations() {\n    color([0.7, 0.5, 0.2])  // Gold ink\n    \n    module corner_element(pos) {\n        translate(pos)\n        union() {\n            // Main corner piece\n            rotate([0, 0, 45])\n            cube([5, 5, 0.5]);\n            \n            // Small circles\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                translate([3, 3, 0])\n                cylinder(h=0.5, r=1, $fn=16);\n            }\n        }\n    }\n    \n    corner_element([-35, 22, 1.3]);\n    corner_element([35, 22, 1.3]);\n    corner_element([-35, -22, 1.3]);\n    corner_element([35, -22, 1.3]);\n}\n\n// Signature lines\nmodule signatures() {\n    color([0.3, 0.1, 0.05])  // Sepia ink\n    \n    // President signature line\n    translate([-15, -18, 1.3])\n    scale([1, 0.2, 0.1])\n    cube([25, 2, 0.5], center=true);\n    \n    // Treasurer signature line\n    translate([15, -18, 1.3])\n    scale([1, 0.2, 0.1])\n    cube([25, 2, 0.5], center=true);\n}\n\n// Assembly of the bond\nunion() {\n    bond_body();\n    border_decoration();\n    company_seal();\n    bond_text();\n    corner_decorations();\n    signatures();\n}",
    "renders": true
  },
  {
    "historical_artifact": "indenture",
    "openscad_code": "// Indenture – medieval double-tab contract fragment (c. 1400)\n// Model is the lower “foot” of a parchment indenture, torn along the wavy top\n// and retaining its seal tag and remnant wax.  1 : 4 scale, 75 mm tall.\n\n$fn = 36;\n\n// overall size\nwidth  = 60;\nheight = 75;\nthick  =  2.5;\n\n// parchment colour\ncolor([0.94, 0.89, 0.77]) {\n\n    // main contract sheet\n    difference() {\n        // body\n        translate([0, -height/2, 0])\n            cube([width, height, thick], center=true);\n\n        // wavy tear line – top half removed\n        for (i=[-width/2 : 6.5 : width/2]) {\n            translate([i, height/4, -thick/2-0.1])\n                cylinder(h=thick+0.2, r=6);\n        }\n\n        // small worm holes\n        for (p = [[-20,  10], [15, -20], [-5,  25]])\n            translate(concat(p, [-thick/2-0.1]))\n                cylinder(h=thick+0.2, r=1.2);\n    }\n\n    // seal tag – narrow parchment strip\n    color([0.92, 0.87, 0.75])\n    translate([0, -height/2+2, -thick])\n        cube([4, 18, 0.8], center=true);\n\n    // wax seal remnant\n    color([0.65, 0.20, 0.15])\n    translate([0, -height/2+2, -thick-3.5])\n    union() {\n        cylinder(h=3, r=6);\n        // heraldic impression – simple cross\n        translate([0, 0, -0.1])\n            difference() {\n                cylinder(h=0.7, r=5.5);\n                rotate([0,0,45])\n                    cube([10, 1.2, 0.9], center=true);\n                rotate([0,0,-45])\n                    cube([10, 1.2, 0.9], center=true);\n            }\n    }\n\n    // handwritten text lines (slightly darker ink)\n    color([0.50, 0.40, 0.30])\n    for (y=[-height/3 : 5 : height/3])\n        translate([0, y, thick/2+0.05])\n            cube([width*0.9, 0.4, 0.1], center=true);\n\n    // decorative initial capital\n    translate([-width/2+8, height/2-12, thick/2+0.05])\n        color([0.45, 0.30, 0.20])\n        linear_extrude(height=0.4)\n            square(5, center=true);\n}\n\n// small hanging hole for display\ntranslate([0, height/2-4, 0])\n    rotate([90,0,0])\n        cylinder(h=thick+0.2, d=3, center=true);",
    "renders": true
  },
  {
    "historical_artifact": "obligation",
    "openscad_code": "// Roman military diploma - bronze tablet certifying military service obligation\n// Dimensions: 90mm x 60mm x 3mm (foldable tablet)\n\n// Bronze color\ncolor([0.72, 0.45, 0.2]) {\n    // Main tablet body\n    difference() {\n        union() {\n            // Left half of tablet\n            translate([0, 0, 0]) cube([43, 58, 2.5]);\n            \n            // Right half of tablet (hinged part)\n            translate([47, 0, 0]) cube([43, 58, 2.5]);\n            \n            // Hinge cylinders\n            for(i = [0:4]) {\n                translate([45, 10 + i*10, -0.5]) cylinder(h=3.5, r=2);\n            }\n        }\n        \n        // Central fold line groove\n        translate([44.5, 0, 2.4]) cube([1, 58, 0.5]);\n        \n        // Text areas recessed\n        translate([5, 5, 1.5]) cube([33, 48, 1]);\n        translate([52, 5, 1.5]) cube([33, 48, 1]);\n    }\n    \n    // Seal holes at top\n    for(x = [15, 30, 60, 75]) {\n        translate([x, 55, 1.25]) cylinder(h=2.5, r=2.5);\n    }\n    \n    // Decorative border pattern on left half\n    module border_pattern(side) {\n        for(i = [0:27]) {\n            translate([side, 5 + i*2, 2.6]) rotate([90, 0, 0]) cylinder(h=0.5, r=0.5);\n        }\n    }\n    \n    border_pattern(2);\n    border_pattern(41);\n    \n    // Latin inscription lines (simplified)\n    translate([7, 10, 2.6]) {\n        for(i = [0:20]) {\n            translate([i*1.5, 0, 0]) cube([1, 0.5, 0.3]);\n        }\n    }\n    \n    translate([7, 15, 2.6]) {\n        for(i = [0:18]) {\n            translate([i*1.5, 0, 0]) cube([1, 0.5, 0.3]);\n        }\n    }\n    \n    // Imperial seal impression (right half)\n    translate([60, 25, 2.6]) {\n        difference() {\n            cylinder(h=0.5, r=12);\n            for(angle = [0:60:359]) {\n                rotate([0, 0, angle]) translate([8, 0, -0.1]) cube([3, 1, 0.7]);\n            }\n        }\n    }\n    \n    // Hanging loop on left edge\n    translate([-2, 25, 1.25]) rotate([0, 90, 0]) cylinder(h=4, r=1.5);\n}",
    "renders": true
  },
  {
    "historical_artifact": "receipt",
    "openscad_code": "// Historical Receipt Artifact - 19th Century Store Receipt\n// Based on typical 1870s dry goods store receipt\n\n$fn = 32;\n\n// Receipt paper color - aged off-white\ncolor([0.95, 0.93, 0.85]) {\n    // Main receipt body\n    difference() {\n        // Base paper thickness\n        translate([0, 0, 0.5])\n            cube([70, 85, 1], center=true);\n        \n        // Torn corner effect\n        translate([30, 35, 0])\n            cylinder(h=3, r=8, center=true);\n        translate([-30, 35, 0])\n            cylinder(h=3, r=8, center=true);\n    }\n}\n\n// Store header with decorative border\nmodule storeHeader() {\n    color([0.1, 0.1, 0.1]) {\n        // Top border line\n        translate([0, 35, 1.1])\n            cube([65, 1, 0.5], center=true);\n        \n        // Store name text blocks (simulated)\n        for(i = [0:2]) {\n            translate([-20 + i*20, 30, 1.1])\n                cube([15, 2, 0.3], center=true);\n        }\n    }\n}\n\n// Item rows with lines\nmodule itemRows() {\n    color([0.2, 0.2, 0.2]) {\n        for(row = [0:4]) {\n            y_pos = 15 - row * 10;\n            \n            // Item description line\n            translate([-15, y_pos, 1.1])\n                cube([25, 1, 0.3], center=true);\n            \n            // Quantity dot\n            translate([15, y_pos, 1.1])\n                cylinder(h=0.5, r=1, center=true);\n            \n            // Price line\n            translate([25, y_pos, 1.1])\n                cube([15, 1, 0.3], center=true);\n        }\n    }\n}\n\n// Date stamp effect\nmodule dateStamp() {\n    color([0.3, 0.1, 0.1]) {\n        // Circular stamp outline\n        translate([20, -30, 1.2])\n            cylinder(h=0.3, r=12, center=true);\n        \n        // Inner circle\n        translate([20, -30, 1.3])\n            cylinder(h=0.3, r=10, center=true);\n        \n        // Date text blocks (simulated)\n        for(i = [0:1]) {\n            translate([15 + i*10, -30, 1.4])\n                cube([8, 1.5, 0.2], center=true);\n        }\n    }\n}\n\n// Handwritten signature line\nmodule signature() {\n    color([0.1, 0.1, 0.3]) {\n        // Signature line\n        translate([0, -35, 1.1])\n            cube([40, 0.5, 0.3], center=true);\n        \n        // Signature flourish\n        for(i = [0:5]) {\n            rotate([0, 0, -20 + i*8])\n                translate([15 + i*2, -35, 1.2])\n                    cube([3, 0.5, 0.3], center=true);\n        }\n    }\n}\n\n// Decorative corner elements (period-appropriate)\nmodule cornerDecoration() {\n    color([0.15, 0.15, 0.15]) {\n        // Top-left corner\n        translate([-30, 38, 1.1]) {\n            rotate([90, 0, 0])\n                cylinder(h=0.5, r=3, center=true);\n            for(i = [0:2]) {\n                rotate([0, 0, i*120])\n                    translate([0, 2, 0])\n                        cube([0.5, 3, 0.5], center=true);\n            }\n        }\n        \n        // Top-right corner (mirrored)\n        mirror([1, 0, 0])\n            translate([30, 38, 1.1]) {\n                rotate([90, 0, 0])\n                    cylinder(h=0.5, r=3, center=true);\n                for(i = [0:2]) {\n                    rotate([0, 0, i*120])\n                        translate([0, 2, 0])\n                            cube([0.5, 3, 0.5], center=true);\n                }\n            }\n    }\n}\n\n// Water damage effect (realistic aging)\nmodule waterDamage() {\n    color([0.85, 0.83, 0.75]) {\n        for(i = [0:3]) {\n            translate([-25 + i*15, -10 + sin(i*45)*5, 0.9])\n                scale([1 + i*0.2, 0.5 + i*0.1, 1])\n                    sphere(r=3 + i*2);\n        }\n    }\n}\n\n// Fold lines\nmodule foldLines() {\n    color([0.7, 0.7, 0.65]) {\n        // Vertical fold\n        translate([-5, 0, 0.9])\n            cube([0.5, 80, 0.3], center=true);\n        \n        // Horizontal fold\n        translate([0, 0, 0.9])\n            cube([65, 0.5, 0.3], center=true);\n    }\n}\n\n// Assembly\nstoreHeader();\nitemRows();\ndateStamp();\nsignature();\ncornerDecoration();\nwaterDamage();\nfoldLines();",
    "renders": true
  },
  {
    "historical_artifact": "quittance",
    "openscad_code": "// Medieval French Quittance (Debt Release Document) - 3D Printable Model\n// Based on 14th century tax receipt tablets from Northern France\n\n$fn = 64;  // Smooth curves for printing\n\n// Main tablet dimensions (in mm)\ntablet_width = 85;\ntablet_height = 60;\ntablet_thickness = 7;\nborder_depth = 2;\n\n// Seal dimensions\nseal_diameter = 18;\nseal_height = 4;\n\n// Text line parameters\ntext_line_height = 3;\ntext_line_width = 2;\nnum_text_lines = 8;\n\nmodule tablet_base() {\n    difference() {\n        // Main wooden tablet\n        color(\"burlywood\") \n        cube([tablet_width, tablet_height, tablet_thickness], center=true);\n        \n        // Carved border recess\n        color(\"burlywood\")\n        translate([0, 0, tablet_thickness/2 - border_depth/2])\n        cube([tablet_width - 6, tablet_height - 6, border_depth], center=true);\n    }\n}\n\nmodule wax_seal() {\n    // Central red wax seal with rope impression\n    color(\"firebrick\") {\n        translate([0, 0, tablet_thickness/2 + seal_height/2])\n        cylinder(h = seal_height, d = seal_diameter, center=true);\n        \n        // Seal impression detail\n        translate([0, 0, tablet_thickness/2 + seal_height - 0.5])\n        cylinder(h = 1, d = seal_diameter * 0.7, center=true);\n    }\n    \n    // Rope under seal\n    color(\"saddlebrown\")\n    for(i = [-1, 1]) {\n        rotate([90, 0, 45 * i])\n        translate([0, 0, tablet_thickness/2 + 0.5])\n        cylinder(h = seal_diameter * 0.8, d = 2, center=true);\n    }\n}\n\nmodule inscription_lines() {\n    // Carved text lines representing Latin inscription\n    color(\"saddlebrown\")\n    for(i = [1:num_text_lines]) {\n        y_pos = tablet_height/2 - 8 - (i * 5);\n        translate([0, y_pos, tablet_thickness/2 - text_line_height/2])\n        cube([tablet_width - 20, text_line_width, text_line_height], center=true);\n    }\n}\n\nmodule decorative_corner_motifs() {\n    // Gothic corner decorations\n    module corner_motif(x, y) {\n        translate([x, y, tablet_thickness/2 - border_depth/2])\n        color(\"goldenrod\") {\n            // Quarter-circle decoration\n            intersection() {\n                cylinder(h = border_depth, d = 8, center=true);\n                translate([4, 4, 0]) cube([8, 8, border_depth], center=true);\n            }\n            \n            // Center dot\n            translate([0, 0, border_depth/2 - 0.5])\n            cylinder(h = 1, d = 2, center=true);\n        }\n    }\n    \n    // Place at all four corners\n    corner_motif(tablelet_width/2 - 4, tablet_height/2 - 4);\n    corner_motif(-tablet_width/2 + 4, tablet_height/2 - 4);\n    corner_motif(tablet_width/2 - 4, -tablet_height/2 + 4);\n    corner_motif(-tablet_width/2 + 4, -tablet_height/2 + 4);\n}\n\nmodule hanging_hole() {\n    // Hole for leather cord attachment\n    color(\"burlywood\")\n    rotate([90, 0, 0])\n    translate([0, tablet_height/2 + 5, 0])\n    cylinder(h = tablet_width - 10, d = 3, center=true);\n}\n\n// Assemble the quittance\nunion() {\n    tablet_base();\n    wax_seal();\n    inscription_lines();\n    decorative_corner_motifs();\n    hanging_hole();\n}",
    "renders": true
  },
  {
    "historical_artifact": "acquittance",
    "openscad_code": "// Medieval French Acquittance (Debt Release Document) - 14th Century\n// Dimensions: 80mm x 60mm x 4mm thickness\n\n// Set colors for realistic appearance\ncolor(\"burlywood\") \ndifference() {\n    // Main tablet base\n    translate([0, 0, 0])\n        cube([80, 60, 4], center = true);\n    \n    // Wax tablet recess (slightly smaller)\n    translate([0, 0, 1])\n        cube([75, 55, 2.5], center = true);\n}\n\n// Wooden frame edges\nmodule frame_edge() {\n    color(\"saddlebrown\")\n    union() {\n        // Top edge\n        translate([0, 29, 1.5])\n            cube([82, 2, 3], center = true);\n        \n        // Bottom edge\n        translate([0, -29, 1.5])\n            cube([82, 2, 3], center = true);\n        \n        // Left edge\n        translate([-39, 0, 1.5])\n            cube([2, 62, 3], center = true);\n        \n        // Right edge\n        translate([39, 0, 1.5])\n            cube([2, 62, 3], center = true);\n    }\n}\n\nframe_edge();\n\n// Seal attachment point (wax seal impression)\ncolor(\"firebrick\")\ntranslate([30, 20, 2.2])\n    cylinder(h = 1.5, r = 8, $fn = 32);\n\n// Seal string grooves\nmodule seal_grooves() {\n    for(i = [-1:1]) {\n        rotate([0, 0, i * 120])\n        translate([30, 20, 2.5])\n            cube([12, 1, 0.5], center = true);\n    }\n}\n\nseal_grooves();\n\n// Medieval text inscription (simulated with small cubes)\nmodule text_lines() {\n    color(\"saddlebrown\")\n    // Top text line\n    for(i = [-3:3]) {\n        translate([i * 8, 10, 2.2])\n            cube([6, 1, 0.3], center = true);\n    }\n    \n    // Middle text line\n    for(i = [-2.5:2.5]) {\n        translate([i * 9, 5, 2.2])\n            cube([7, 1, 0.3], center = true);\n    }\n    \n    // Bottom text line\n    for(i = [-3:3]) {\n        translate([i * 8, 0, 2.2])\n            cube([6, 1, 0.3], center = true);\n    }\n    \n    // Date line\n    for(i = [-1.5:1.5]) {\n        translate([i * 10, -5, 2.2])\n            cube([8, 1, 0.3], center = true);\n    }\n}\n\ntext_lines();\n\n// Decorative corner elements\nmodule corner_decorations() {\n    color(\"saddlebrown\")\n    // Top left corner\n    translate([-35, 23, 2])\n        cylinder(h = 1, r = 3, $fn = 8);\n    \n    // Top right corner\n    translate([35, 23, 2])\n        cylinder(h = 1, r = 3, $fn = 8);\n    \n    // Bottom left corner\n    translate([-35, -23, 2])\n        cylinder(h = 1, r = 3, $fn = 8);\n    \n    // Bottom right corner\n    translate([35, -23, 2])\n        cylinder(h = 1, r = 3, $fn = 8);\n}\n\ncorner_decorations();\n\n// Hinge holes for binding multiple tablets\nmodule hinge_holes() {\n    color(\"burlywood\")\n    translate([-39, -15, 0])\n        cylinder(h = 4, r = 2, $fn = 16);\n    \n    translate([-39, 0, 0])\n        cylinder(h = 4, r = 2, $fn = 16);\n    \n    translate([-39, 15, 0])\n        cylinder(h = 4, r = 2, $fn = 16);\n}\n\nhinge_holes();\n\n// Cross-hatching texture on back\nmodule back_texture() {\n    color(\"burlywood\")\n    for(x = [-35:5:35]) {\n        translate([x, 0, -2.2])\n            cube([0.5, 60, 0.3], center = true);\n    }\n    for(y = [-25:5:25]) {\n        translate([0, y, -2.2])\n            cube([80, 0.5, 0.3], center = true);\n    }\n}\n\nback_texture();",
    "renders": true
  },
  {
    "historical_artifact": "warrant",
    "openscad_code": "// Tudor-style royal warrant seal matrix (ca. 1550)\n// A 3D printable model of the metal die used to emboss wax seals on official documents\n\n// Overall dimensions for 3D printing\n$fn = 50;  // Smooth curves for printing\n\n// Main colors\ncolor(\"goldenrod\") union() {\n\n    // Central handle for the seal matrix\n    module handle() {\n        // Cylindrical grip\n        cylinder(h = 12, d = 8, center = true);\n        // Decorative end cap\n        translate([0, 0, 6]) sphere(d = 10);\n    }\n\n    // Tudor rose decorative boss\n    module tudor_rose() {\n        union() {\n            // Central rose\n            color(\"firebrick\") \n            for(i = [0:45:315]) {\n                rotate([0, 0, i]) \n                translate([0, 6, 0]) \n                scale([1, 0.6, 1]) \n                cylinder(h = 3, d = 4, center = true);\n            }\n            // Central boss\n            translate([0, 0, 1.5]) sphere(d = 3);\n        }\n    }\n\n    // Seal face with recessed design\n    module seal_face() {\n        difference() {\n            // Main seal disc\n            cylinder(h = 5, d = 40, center = true);\n            \n            // Tudor royal arms\n            color(\"dimgray\") {\n                // Shield outline (recessed)\n                translate([0, 0, 2.5]) {\n                    difference() {\n                        cube([25, 30, 3], center = true);\n                        // Inner cutout\n                        cube([20, 25, 4], center = true);\n                    }\n                }\n                \n                // Lions passant (simplified heraldic)\n                for(pos = [[-8, 5], [8, 5]]) {\n                    translate(pos + [0, 0, 2.5]) {\n                        // Lion body\n                        cube([6, 12, 3], center = true);\n                        // Lion head\n                        translate([0, 7, 0]) sphere(d = 5);\n                    }\n                }\n                \n                // Fleur-de-lis\n                for(pos = [[-8, -8], [0, -10], [8, -8]]) {\n                    translate(pos + [0, 0, 2.5]) {\n                        // Central petal\n                        cube([3, 8, 3], center = true);\n                        // Side petals\n                        translate([-3, -2, 0]) cube([3, 6, 3], center = true);\n                        translate([3, -2, 0]) cube([3, 6, 3], center = true);\n                    }\n                }\n                \n                // Latin inscription around edge\n                translate([0, 0, 2.5]) {\n                    for(angle = [0:30:330]) {\n                        rotate([0, 0, angle]) \n                        translate([17, 0, 0]) \n                        cube([2, 1, 3], center = true);\n                    }\n                }\n            }\n        }\n    }\n\n    // Decorative rope border around seal\n    module rope_border() {\n        for(angle = [0:15:345]) {\n            rotate([0, 0, angle]) \n            translate([20, 0, 2.5]) \n            sphere(d = 2);\n        }\n    }\n\n    // Assembly\n    translate([0, 0, 10]) handle();\n    translate([0, 0, -2.5]) seal_face();\n    rope_border();\n    \n    // Tudor rose decoration on handle base\n    translate([0, 0, 3]) tudor_rose();\n}",
    "renders": true
  },
  {
    "historical_artifact": "commission",
    "openscad_code": "// Roman Legionary Signifer Standard - Imperial Eagle (Aquila) on Staff\n// 1st-2nd Century AD Legion Standard\n// Overall height: 95mm, 3D-printable without supports\n\n// Color definitions\ncolor_wood = [101/255, 67/255, 33/255];\ncolor_bronze = [205/255, 127/255, 50/255];\ncolor_gold = [255/255, 215/255, 0/255];\n\n// Main module\nmodule legion_standard() {\n    union() {\n        // Wooden staff\n        color(color_wood)\n        translate([0, 0, 0])\n        cylinder(h = 85, r = 3, $fn = 16);\n        \n        // Bronze base ferrule\n        color(color_bronze)\n        translate([0, 0, -2])\n        cylinder(h = 5, r1 = 4, r2 = 3.5, $fn = 16);\n        \n        // Eagle standard assembly\n        translate([0, 0, 85])\n        rotate([0, 0, 0])\n        eagle_standard();\n        \n        // Cross-bar supports for banners\n        color(color_bronze)\n        translate([0, 0, 75])\n        rotate([90, 0, 0])\n        cylinder(h = 25, r = 1, $fn = 8);\n        \n        // Banner attachment rings\n        for (i = [-1, 1]) {\n            color(color_bronze)\n            translate([i * 12, 0, 75])\n            rotate([90, 0, 0])\n            torus(1, 0.5);\n        }\n    }\n}\n\n// Eagle module\nmodule eagle_standard() {\n    union() {\n        // Bronze mount\n        color(color_bronze)\n        translate([0, 0, 0])\n        cylinder(h = 5, r = 6, $fn = 32);\n        \n        // Eagle body\n        color(color_gold)\n        translate([0, 0, 5])\n        scale([1, 0.7, 1.2])\n        sphere(r = 4, $fn = 32);\n        \n        // Eagle head\n        color(color_gold)\n        translate([0, 3, 8])\n        scale([0.8, 1.2, 0.8])\n        sphere(r = 3, $fn = 32);\n        \n        // Beak\n        color(color_gold)\n        translate([0, 4.5, 8.5])\n        rotate([30, 0, 0])\n        cylinder(h = 2, r1 = 0.8, r2 = 0.3, $fn = 8);\n        \n        // Wings\n        wing(-45);\n        wing(45);\n        \n        // Tail feathers\n        color(color_gold)\n        translate([0, -3, 5])\n        rotate([0, 0, 0])\n        scale([1, 0.2, 0.5])\n        cube([6, 1, 3], center = true);\n        \n        // Claws gripping thunderbolts\n        thunderbolt(2, 0);\n        thunderbolt(-2, 0);\n        \n        // Decorative wreath around base\n        decorative_wreath();\n    }\n}\n\n// Wing module\nmodule wing(angle) {\n    color(color_gold)\n    translate([0, 0, 7])\n    rotate([0, 0, angle])\n    scale([1, 0.2, 0.5])\n    cube([8, 1, 4], center = true);\n    \n    // Wing feathers detail\n    for (i = [1:3]) {\n        translate([i * 2 * cos(angle), i * 2 * sin(angle), 7 - i * 0.3])\n        rotate([0, 0, angle])\n        scale([0.8, 0.1, 0.4])\n        cube([6, 0.5, 3], center = true);\n    }\n}\n\n// Thunderbolt module\nmodule thunderbolt(x_pos, z_rot) {\n    color(color_gold)\n    translate([x_pos, 0, 3])\n    rotate([0, 0, z_rot])\n    scale([0.3, 0.3, 1])\n    cylinder(h = 3, r = 1.5, $fn = 6);\n    \n    // Zig-zag pattern\n    for (i = [0.5:0.5:2.5]) {\n        translate([x_pos + (i % 1 == 0 ? 0.5 : -0.5), 0, i])\n        rotate([0, 0, z_rot])\n        cube([0.5, 0.3, 0.5], center = true);\n    }\n}\n\n// Decorative wreath module\nmodule decorative_wreath() {\n    color(color_bronze)\n    translate([0, 0, 2.5])\n    rotate([0, 0, 0])\n    cylinder(h = 0.5, r = 7, r2 = 6.5, $fn = 64);\n    \n    // Laurel leaves\n    for (i = [0:30:330]) {\n        translate([cos(i) * 6.5, sin(i) * 6.5, 2.5])\n        rotate([90, 0, i + 90])\n        scale([0.3, 1, 0.1])\n        cylinder(h = 1.5, r1 = 0.5, r2 = 0, $fn = 8);\n    }\n}\n\n// Torus helper module\nmodule torus(major, minor) {\n    rotate_extrude($fn = 32)\n    translate([major, 0, 0])\n    circle(r = minor, $fn = 16);\n}\n\n// Generate the complete standard\nlegion_standard();",
    "renders": true
  },
  {
    "historical_artifact": "patent",
    "openscad_code": "// 1876 Bell Telephone Patent Medal – commemorative plaquette\n// Outer diameter ≈ 60 mm, thickness 3.5 mm – printable without supports\n\n// color constants\nbronze = [150/255, 90/255, 40/255];\ngold   = [212/255, 175/255, 55/255];\n\n// overall plaquette\ndifference() {\n    color(bronze)\n        cylinder(h = 3.5, d = 60, $fn = 128);          // main disk\n    \n    // hanging hole\n    translate([0, 25, -1])\n        cylinder(h = 5, d = 4, $fn = 32);\n}\n\n// raised rim\ntranslate([0, 0, 0.5])\n    difference() {\n        cylinder(h = 1.5, d = 58, $fn = 128);\n        cylinder(h = 1.6, d = 54, $fn = 128);\n    }\n\n// inner medallion field\ncolor(gold)\n    translate([0, 0, 2.2])\n        difference() {\n            cylinder(h = 1.3, d = 54, $fn = 128);\n            cylinder(h = 1.4, d = 50, $fn = 128);\n        }\n\n// portrait bust (Bell) – simplified silhouette\nmodule bell_bust() {\n    translate([0, 5, 2.8])\n        scale([1, 1.2, 1])\n            cylinder(h = 0.8, d = 14, $fn = 64);\n    translate([0, -4, 2.8])\n        cube([12, 8, 0.8], center = true);\n}\n\ncolor(bronze) bell_bust();\n\n// telephone apparatus bas-relief below bust\nmodule telephone() {\n    // base box\n    translate([0, -18, 2.8])\n        cube([20, 12, 0.8], center = true);\n    \n    // vertical tube\n    translate([0, -18, 3.6])\n        cylinder(h = 8, d = 3, $fn = 32);\n    \n    // mouthpiece funnel\n    translate([0, -18, 4.8])\n        cylinder(h1 = 4, h2 = 0, r1 = 3.5, r2 = 1.5, $fn = 32);\n    \n    // receiver arm\n    rotate([90, 0, 0])\n        translate([5, 0, 18])\n            cylinder(h = 12, d = 2, $fn = 32);\n    \n    // receiver cap\n    rotate([90, 0, 0])\n        translate([5, 0, 30])\n            cylinder(h = 2, d = 4, $fn = 32);\n}\n\ncolor(bronze) telephone();\n\n// curved patent inscription text placeholders (blocks)\nmodule arc_text(radius, h, txt_height, count) {\n    for(i = [0 : count-1]) {\n        angle = 180/(count-1) * i;\n        rotate([0, 0, angle - 90])\n            translate([radius, 0, h])\n                cube([4, 1.5, txt_height], center = true);\n    }\n}\n\n// top arch \"TELEPHONE PATENT\"\ncolor(bronze)\n    arc_text(22, 3.3, 0.8, 15);\n\n// lower arch \"1876\"\ncolor(bronze)\n    arc_text(22, 3.3, 0.8, 4);\n\n// decorative stars between text and rim\nmodule stars(n) {\n    for(i = [0 : n-1])\n        rotate([0, 0, i * 360/n])\n            translate([26, 0, 3.3])\n                scale([1, 0.4, 1])\n                    cylinder(h = 0.8, d = 3, $fn = 5);\n}\n\ncolor(bronze) stars(24);",
    "renders": true
  },
  {
    "historical_artifact": "license",
    "openscad_code": "// Historical License Plate - 1920s Style Porcelain Enamel\n// Realistic medium-complexity recreation for 3D printing\n\n// Overall dimensions\nplate_width = 100;\nplate_height = 50;\nplate_thickness = 3;\n\n// Colors\nporcelain_blue = [0.1, 0.2, 0.6];\nporcelain_white = [0.9, 0.9, 0.95];\npainted_white = [0.95, 0.95, 0.98];\niron_base = [0.3, 0.3, 0.35];\n\n// Create rounded corners for plate\nmodule rounded_plate(w, h, t, r) {\n    difference() {\n        cube([w, h, t], center=false);\n        translate([r, r, -1]) cylinder(h=t+2, r=r, $fn=20);\n        translate([w-r, r, -1]) cylinder(h=t+2, r=r, $fn=20);\n        translate([r, h-r, -1]) cylinder(h=t+2, r=r, $fn=20);\n        translate([w-r, h-r, -1]) cylinder(h=t+2, r=r, $fn=20);\n    }\n}\n\n// Create mounting holes\nmodule mounting_holes() {\n    for(x=[10, plate_width-10]) {\n        for(y=[10, plate_height-10]) {\n            translate([x, y, -1]) cylinder(h=plate_thickness+2, r=2.5, $fn=16);\n        }\n    }\n}\n\n// Create raised rivets\nmodule rivets() {\n    color(iron_base)\n    for(x=[5, plate_width-5]) {\n        for(y=[5, plate_height-5]) {\n            translate([x, y, plate_thickness+0.5]) sphere(r=1.5, $fn=8);\n        }\n    }\n}\n\n// Create state text\nmodule state_text() {\n    translate([plate_width/2, 8, plate_thickness+0.1]) \n        scale([0.8, 0.8, 1]) \n        color(painted_white)\n        linear_extrude(height=0.5) \n        text(\"IOWA\", size=8, halign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Create year text\nmodule year_text() {\n    translate([plate_width/2, plate_height-8, plate_thickness+0.1]) \n        scale([0.8, 0.8, 1]) \n        color(painted_white)\n        linear_extrude(height=0.5) \n        text(\"1927\", size=6, halign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Create license number\nmodule license_number() {\n    translate([plate_width/2, plate_height/2, plate_thickness+0.1]) \n        scale([0.9, 0.9, 1]) \n        color(painted_white)\n        linear_extrude(height=1) \n        text(\"47-281\", size=12, halign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Create decorative border pattern\nmodule border_pattern() {\n    color(painted_white)\n    for(i=[5:10:plate_width-10]) {\n        translate([i, 2.5, plate_thickness+0.1]) cube([5, 1, 0.5]);\n        translate([i, plate_height-3.5, plate_thickness+0.1]) cube([5, 1, 0.5]);\n    }\n}\n\n// Main assembly\ndifference() {\n    // Base plate with rounded corners\n    color(porcelain_blue)\n    rounded_plate(plate_width, plate_height, plate_thickness, 5);\n    \n    // Mounting holes\n    mounting_holes();\n}\n\n// Iron backing for authenticity\ncolor(iron_base)\ntranslate([0, 0, -0.5]) cube([plate_width, plate_height, 0.5]);\n\n// Raised border\ncolor(painted_white)\ntranslate([2, 2, plate_thickness]) cube([plate_width-4, plate_height-4, 0.5]);\n\n// All text and decorations\nstate_text();\nyear_text();\nlicense_number();\nborder_pattern();\n\n// Optional rivets for period accuracy\n// rivets();",
    "renders": true
  },
  {
    "historical_artifact": "permit",
    "openscad_code": "// Medieval Wax Seal Permit\n// A 3D printable model of a historical permit with wax seal attachment\n\n$fs = 0.5;\n$fa = 3;\n\n// Main dimensions\npermit_width = 40;\npermit_height = 60;\npermit_thickness = 2;\nseal_diameter = 18;\nseal_thickness = 3;\nribbon_width = 3;\nribbon_length = 25;\nhole_diameter = 4;\n\n// Colors\npermit_color = \"wheat\";\nseal_color = \"darkred\";\nribbon_color = \"brown\";\n\nmodule permit_body() {\n    color(permit_color)\n    difference() {\n        // Main permit rectangle\n        cube([permit_width, permit_height, permit_thickness], center=true);\n        \n        // Corner holes for ribbon attachment\n        for(x = [-permit_width/2 + 5, permit_width/2 - 5]) {\n            for(y = [-permit_height/2 + 5, permit_height/2 - 5]) {\n                translate([x, y, 0])\n                cylinder(h=permit_thickness+1, r=hole_diameter/2, center=true);\n            }\n        }\n    }\n}\n\nmodule wax_seal() {\n    color(seal_color)\n    union() {\n        // Main seal disk\n        cylinder(h=seal_thickness, r=seal_diameter/2, center=true);\n        \n        // Raised decorative pattern - cross\n        translate([0, 0, seal_thickness/2 + 0.5])\n        cube([seal_diameter/2, 2, 1], center=true);\n        \n        translate([0, 0, seal_thickness/2 + 0.5])\n        cube([2, seal_diameter/2, 1], center=true);\n        \n        // Outer ring\n        difference() {\n            cylinder(h=seal_thickness/2, r=seal_diameter/2, center=true);\n            cylinder(h=seal_thickness/2 + 0.1, r=seal_diameter/2 - 2, center=true);\n        }\n    }\n}\n\nmodule inscription_lines() {\n    color(\"black\")\n    for(i = [-2:2]) {\n        translate([0, i * 5, permit_thickness/2 + 0.1])\n        cube([permit_width - 10, 0.5, 0.2], center=true);\n    }\n}\n\nmodule decorative_border() {\n    color(\"goldenrod\")\n    translate([0, 0, permit_thickness/2 + 0.1])\n    difference() {\n        cube([permit_width + 2, permit_height + 2, 0.2], center=true);\n        cube([permit_width - 4, permit_height - 4, 0.3], center=true);\n    }\n}\n\nmodule attachment_ribbon() {\n    color(ribbon_color)\n    for(x = [-permit_width/2 + 5, permit_width/2 - 5]) {\n        for(y = [-permit_height/2 + 5, permit_height/2 - 5]) {\n            translate([x, y, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cube([ribbon_width, ribbon_length, 1], center=true);\n                translate([0, ribbon_length/2 - 5, 0])\n                cylinder(h=2, r=hole_diameter/2, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\npermit_body();\n\ntranslate([0, 0, permit_thickness/2 + seal_thickness/2 + 0.5])\nwax_seal();\n\ninscription_lines();\ndecorative_border();\n\nattachment_ribbon();\n\n// Additional seal attachment point\ntranslate([0, -permit_height/2 - 10, 0])\nrotate([90, 0, 0])\ncylinder(h=permit_width, r=1, center=true);\n\n// Small heraldic symbols\ncolor(\"goldenrod\")\ntranslate([-permit_width/4, permit_height/4, permit_thickness/2 + 0.2])\ncylinder(h=0.5, r=2);\n\ntranslate([permit_width/4, permit_height/4, permit_thickness/2 + 0.2])\ncylinder(h=0.5, r=2);",
    "renders": true
  },
  {
    "historical_artifact": "pass",
    "openscad_code": "// Medieval Pilgrim's Pass - Lead alloy token from 14th century Canterbury\n// Dimensions: 65mm tall x 45mm wide x 4mm thick\n// Historical pilgrim badges served as proof of pilgrimage completion\n\n// Main token body\ndifference() {\n    // Base shield shape\n    color(\"DarkSlateGray\")\n    union() {\n        // Central shield plate\n        cube([40, 50, 3], center=true);\n        \n        // Top arch extension\n        translate([0, 25, 0])\n            cylinder(h=3, r=20, $fn=64);\n        \n        // Bottom point\n        translate([0, -25, 0])\n            rotate([0, 0, 180])\n            cylinder(h=3, r1=20, r2=0, $fn=3);\n    }\n    \n    // Hanging hole at top\n    translate([0, 38, 1])\n        cylinder(h=5, r=3, $fn=32);\n}\n\n// Raised border decoration\ndifference() {\n    // Outer border\n    color(\"DimGray\")\n    translate([0, 0, 1.5])\n    union() {\n        // Frame around shield\n        cube([44, 54, 1], center=true);\n        \n        // Top arch frame\n        translate([0, 25, 0])\n            cylinder(h=1, r=22, $fn=64);\n        \n        // Bottom point frame\n        translate([0, -25, 0])\n            rotate([0, 0, 180])\n            cylinder(h=1, r1=22, r2=0, $fn=3);\n    }\n    \n    // Cut inner opening\n    translate([0, 0, -1])\n    union() {\n        cube([38, 48, 3], center=true);\n        translate([0, 25, 0])\n            cylinder(h=3, r=19, $fn=64);\n        translate([0, -25, 0])\n            rotate([0, 0, 180])\n            cylinder(h=3, r1=19, r2=0, $fn=3);\n    }\n}\n\n// Thomas Becket's mitre symbol at top\ncolor(\"Silver\")\ntranslate([0, 15, 2])\nrotate([90, 0, 0])\nunion() {\n    // Mitre base\n    cube([20, 15, 2], center=true);\n    \n    // Pointed top\n    translate([0, 7.5, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, r1=10, r2=0, $fn=3);\n    \n    // Cross decoration\n    translate([0, 0, 2.5])\n    union() {\n        cube([12, 2, 1], center=true);\n        cube([2, 12, 1], center=true);\n    }\n}\n\n// Latin inscription band\nmodule inscription(text_height, z_pos) {\n    for(i = [0:len(text_height)-1]) {\n        translate([text_height[i][0], text_height[i][1], z_pos])\n            cube([text_height[i][2], text_height[i][3], 0.5]);\n    }\n}\n\n// \"THOMAS\" inscription (simplified block letters)\ncolor(\"Silver\")\nunion() {\n    // T\n    translate([-15, 5, 2])\n        cube([8, 1.5, 0.5]);\n    translate([-11, 5, 2])\n        cube([1.5, 6, 0.5]);\n    \n    // H\n    translate([-5, 5, 2])\n        cube([1.5, 6, 0.5]);\n    translate([2, 5, 2])\n        cube([1.5, 6, 0.5]);\n    translate([-5, 8.5, 2])\n        cube([7, 1.5, 0.5]);\n    \n    // O\n    translate([5, 5, 2])\n    difference() {\n        cube([6, 6, 0.5]);\n        translate([1, 1, -1])\n            cube([4, 4, 2]);\n    }\n    \n    // M\n    translate([12, 5, 2])\n    union() {\n        cube([1.5, 6, 0.5]);\n        translate([4.5, 5, 2])\n            cube([1.5, 6, 0.5]);\n        translate([1.5, 5, 2])\n            rotate([0, 0, -30])\n            cube([1.5, 4, 0.5]);\n        translate([3, 5, 2])\n            rotate([0, 0, 30])\n            cube([1.5, 4, 0.5]);\n    }\n    \n    // A\n    translate([20, 5, 2])\n    union() {\n        translate([0, 2, 0])\n            cube([6, 1.5, 0.5]);\n        translate([0, 5, 0])\n            rotate([0, 0, -30])\n            cube([1.5, 6, 0.5]);\n        translate([6, 5, 0])\n            rotate([0, 0, 30])\n            cube([1.5, 6, 0.5]);\n    }\n    \n    // S\n    translate([28, 5, 2])\n    union() {\n        cube([6, 1.5, 0.5]);\n        translate([0, 5, 0])\n            cube([6, 1.5, 0.5]);\n        translate([0, 2.5, 0])\n            cube([1.5, 2.5, 0.5]);\n        translate([4.5, 7, 0])\n            cube([1.5, 2.5, 0.5]);\n    }\n}\n\n// Decorative dots around border\ncolor(\"Silver\")\nfor(angle = [0:30:330]) {\n    translate([20 * cos(angle), 20 * sin(angle), 2])\n        sphere(r=1, $fn=16);\n}\n\n// Becket's martyrdom symbols (swords)\ncolor(\"DarkGray\")\ntranslate([0, -10, 2])\nunion() {\n    // Left sword\n    translate([-8, 0, 0])\n    rotate([0, 0, -15])\n    union() {\n        cube([2, 12, 0.5], center=true);\n        translate([0, 6, 0])\n            cube([3, 2, 1]);\n    }\n    \n    // Right sword\n    translate([8, 0, 0])\n    rotate([0, 0, 15])\n    mirror([1, 0, 0])\n    union() {\n        cube([2, 12, 0.5], center=true);\n        translate([0, 6, 0])\n            cube([3, 2, 1]);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "diploma",
    "openscad_code": "// Medieval Diploma Scroll\n// A rolled parchment with wax seal and decorative elements\n\n$fn = 50; // Smooth curves\n\n// Main colors\nparchment_color = [0.95, 0.90, 0.75];\nseal_color = [0.5, 0.1, 0.1];\nribbon_color = [0.7, 0.2, 0.2];\n\n// Overall dimensions\nscroll_length = 80;\nscroll_diameter = 15;\n\nmodule scroll_body() {\n    color(parchment_color)\n    difference() {\n        // Main rolled scroll\n        rotate([90, 0, 0])\n        cylinder(h=scroll_length, d=scroll_diameter, center=true);\n        \n        // Hollow center\n        rotate([90, 0, 0])\n        cylinder(h=scroll_length+2, d=scroll_diameter-4, center=true);\n    }\n}\n\nmodule scroll_ends() {\n    // Left end - rolled edge\n    translate([-scroll_length/2-5, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=10, d=scroll_diameter+2);\n    \n    // Right end - rolled edge\n    translate([scroll_length/2+5, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h=10, d=scroll_diameter+2);\n}\n\nmodule wax_seal() {\n    color(seal_color)\n    translate([scroll_length/2-5, 0, scroll_diameter/2+3])\n    union() {\n        // Main seal\n        cylinder(h=3, d=12);\n        \n        // Decorative seal impression (simple cross pattern)\n        translate([0, 0, 3])\n        linear_extrude(height=1) {\n            for(i=[-3, 3]) {\n                translate([i, 0, 0])\n                square([1, 6], center=true);\n                translate([0, i, 0])\n                square([6, 1], center=true);\n            }\n        }\n    }\n}\n\nmodule ribbon_ties() {\n    color(ribbon_color)\n    for(pos=[-20, 0, 20]) {\n        translate([pos, 0, scroll_diameter/2+1])\n        rotate([90, 0, 0])\n        cylinder(h=scroll_diameter+2, d=1.5);\n    }\n}\n\nmodule parchment_texture() {\n    // Subtle surface details using small cylinders\n    color(parchment_color)\n    for(i=[-scroll_length/2+10:5:scroll_length/2-10]) {\n        for(j=[-scroll_diameter/2+2:2:scroll_diameter/2-2]) {\n            translate([i, j, scroll_diameter/2+0.5])\n            sphere(d=0.5);\n        }\n    }\n}\n\nmodule decorative_borders() {\n    // Top border decoration\n    color([0.8, 0.7, 0.5])\n    translate([0, 0, scroll_diameter/2+1])\n    for(i=[-scroll_length/2+5:2:scroll_length/2-5]) {\n        translate([i, scroll_diameter/2-1, 0])\n        sphere(d=1.5);\n    }\n    \n    // Bottom border decoration\n    translate([0, 0, scroll_diameter/2+1])\n    for(i=[-scroll_length/2+5:2:scroll_length/2-5]) {\n        translate([i, -scroll_diameter/2+1, 0])\n        sphere(d=1.5);\n    }\n}\n\n// Assembly\nunion() {\n    scroll_body();\n    scroll_ends();\n    wax_seal();\n    ribbon_ties();\n    decorative_borders();\n    parchment_texture();\n}",
    "renders": true
  },
  {
    "historical_artifact": "certificate",
    "openscad_code": "// Historical Certificate Artifact - Medieval Royal Charter\n// 3D printable model with realistic detailing\n\n// Overall dimensions (mm)\ncertificate_width = 80;\ncertificate_height = 60;\ncertificate_thickness = 3;\nseal_diameter = 20;\nseal_thickness = 2;\n\n// Colors\nparchment_color = [0.95, 0.90, 0.75];\nink_color = [0.3, 0.2, 0.1];\nseal_color = [0.6, 0.4, 0.3];\nribbon_color = [0.7, 0.1, 0.1];\n\n// Main certificate body\nmodule certificate_body() {\n    color(parchment_color)\n    difference() {\n        // Main parchment\n        cube([certificate_width, certificate_height, certificate_thickness], center=true);\n        \n        // Rounded corners\n        translate([certificate_width/2-5, certificate_height/2-5, certificate_thickness/2])\n            rotate([0, 0, 0])\n            cylinder(h=certificate_thickness+1, r=5, center=true);\n        translate([-certificate_width/2+5, certificate_height/2-5, certificate_thickness/2])\n            rotate([0, 0, 0])\n            cylinder(h=certificate_thickness+1, r=5, center=true);\n        translate([certificate_width/2-5, -certificate_height/2+5, certificate_thickness/2])\n            rotate([0, 0, 0])\n            cylinder(h=certificate_thickness+1, r=5, center=true);\n        translate([-certificate_width/2+5, -certificate_height/2+5, certificate_thickness/2])\n            rotate([0, 0, 0])\n            cylinder(h=certificate_thickness+1, r=5, center=true);\n    }\n}\n\n// Latin inscription text lines\nmodule text_lines() {\n    color(ink_color)\n    for(i=[0:4]) {\n        translate([0, 20-i*8, certificate_thickness/2+0.1])\n            cube([60, 1, 0.3], center=true);\n    }\n}\n\n// Decorative border pattern\nmodule decorative_border() {\n    color(ink_color)\n    for(i=[0:19]) {\n        rotate([0, 0, i*18])\n        translate([certificate_width/2-3, 0, certificate_thickness/2+0.1])\n            cube([6, 1, 0.3], center=true);\n    }\n}\n\n// Royal seal with heraldic symbols\nmodule royal_seal() {\n    // Seal base\n    color(seal_color)\n    translate([0, 0, -certificate_thickness/2-seal_thickness/2])\n    cylinder(h=seal_thickness, r=seal_diameter/2, center=true);\n    \n    // Seal ring\n    color(seal_color)\n    translate([0, 0, -certificate_thickness/2-seal_thickness])\n    rotate_extrude()\n        translate([seal_diameter/2-1.5, 0, 0])\n            circle(r=1.5);\n    \n    // Cross heraldic symbol\n    color([0.5, 0.3, 0.2])\n    translate([0, 0, -certificate_thickness/2-seal_thickness-0.2])\n    union() {\n        cube([2, 12, 0.4], center=true);\n        cube([12, 2, 0.4], center=true);\n    }\n}\n\n// Wax seal attachment ribbons\nmodule seal_ribbons() {\n    color(ribbon_color)\n    for(i=[0:2]) {\n        rotate([90, 0, i*120])\n        translate([0, 0, 0])\n        union() {\n            translate([0, -certificate_height/4, 0])\n                cube([1.5, certificate_height/4, 0.5], center=true);\n            translate([0, -certificate_height/3, 0])\n                sphere(r=0.8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    certificate_body();\n    text_lines();\n    decorative_border();\n    royal_seal();\n    seal_ribbons();\n}",
    "renders": true
  },
  {
    "historical_artifact": "credential",
    "openscad_code": "// Roman military diploma replica – bronze citizenship tablet\n// Overall size ~80 mm tall, ~60 mm wide, 4 mm thick\n\ncolor([0.65,0.4,0.15])  // bronze tone\n\nmodule hinge_pin(r=1.5,h=4) {\n    cylinder(h=h,r=r,$fn=12);\n}\n\nmodule hinge_loop(inner=3,outer=4,height=4) {\n    difference() {\n        cylinder(h=height,r=outer,$fn=20);\n        translate([0,0,-0.1]) cylinder(h=height+0.2,r=inner,$fn=20);\n    }\n}\n\nmodule tab_body() {\n    difference() {\n        // main bronze tablet\n        cube([60,80,4],center=true);\n\n        // decorative recessed border\n        translate([0,0,1.9])\n            cube([54,74,2.2],center=true);\n\n        // twin rivet holes top\n        for(x=[-18,18])\n            translate([x,30,-2])\n                cylinder(h=6,r=2,$fn=10);\n\n        // twin rivet holes bottom\n        for(x=[-18,18])\n            translate([x,-30,-2])\n                cylinder(h=6,r=2,$fn=10);\n    }\n}\n\nmodule inscription_lines() {\n    color([0.55,0.3,0.1])\n    for(y=[-25,-20,-15,-10,-5,0,5,10,15,20,25]) {\n        translate([-22,y,2.1])\n            cube([44,0.6,0.2],center=false);\n    }\n}\n\nmodule imperial_seal() {\n    // raised circle at center\n    translate([0,0,2])\n    cylinder(h=1.2,r=12,$fn=40);\n\n    // simplified SPQR letters (negative)\n    translate([0,0,3.1])\n    color([0.65,0.4,0.15])\n    difference() {\n        cylinder(h=1,r=10,$fn=40);\n        // crude S\n        translate([-5,2,0]) cube([3,6,2],center=true);\n        translate([-5,-2,0]) cube([3,6,2],center=true);\n        // P\n        translate([0,0,0]) cube([2,8,2],center=true);\n        translate([0,3,0]) cube([6,2,2],center=true);\n        // Q\n        translate([5,0,0]) cube([2,8,2],center=true);\n        translate([5,-3,0]) cube([6,2,2],center=true);\n        translate([7,-5,0]) cube([2,2,2],center=true);\n        // R\n        translate([0,0,0]) cube([2,8,2],center=true);\n        translate([0,3,0]) cube([6,2,2],center=true);\n        translate([3,0,0]) cube([2,5,2],center=true);\n    }\n}\n\nmodule hinge_assembly() {\n    // left side hinge loops\n    translate([-32,20,0]) rotate([90,0,0]) hinge_loop();\n    translate([-32,-20,0]) rotate([90,0,0]) hinge_loop();\n\n    // right side hinge loops\n    translate([32,20,0]) rotate([90,0,0]) hinge_loop();\n    translate([32,-20,0]) rotate([90,0,0]) hinge_loop();\n}\n\n// assemble the diploma\nunion() {\n    tab_body();\n    inscription_lines();\n    imperial_seal();\n    hinge_assembly();\n}",
    "renders": true
  },
  {
    "historical_artifact": "privilege",
    "openscad_code": "// Roman Imperial Fasces - Symbol of Magisterial Power\n// Realistic style, medium complexity, 3D printable\n\n$fn = 36;\n\nmodule axe_blade() {\n    difference() {\n        // Main blade\n        translate([0, 0, 15])\n            scale([1, 0.3, 1])\n            cylinder(h=30, d1=20, d2=10);\n        \n        // Edge bevel\n        translate([0, -6, 15])\n            rotate([90, 0, 0])\n            cylinder(h=30, d1=22, d2=12);\n    }\n}\n\nmodule axe_handle() {\n    color(\"brown\")\n    cylinder(h=120, d=8);\n}\n\nmodule single_rod() {\n    color(\"burlywood\")\n    cylinder(h=100, d=5);\n}\n\nmodule bundle_rods() {\n    for(i = [0:9]) {\n        rotate([0, 0, i * 36])\n        translate([12, 0, 0])\n        single_rod();\n    }\n}\n\nmodule binding_straps() {\n    for(z = [10, 30, 50, 70, 90]) {\n        color(\"brown\")\n        translate([0, 0, z])\n        cylinder(h=3, d=30);\n    }\n}\n\nmodule eagle_head() {\n    color(\"gold\")\n    translate([0, 0, 100])\n    scale([1.2, 1, 1])\n    sphere(d=20);\n    \n    // Beak\n    translate([8, 0, 110])\n    rotate([0, -20, 0])\n    scale([2, 0.5, 0.5])\n    cylinder(h=10, d=5);\n    \n    // Eyes\n    for(x = [-3, 3]) {\n        translate([x, 5, 105])\n        color(\"black\")\n        sphere(d=2);\n    }\n}\n\nmodule laurel_wreath() {\n    color(\"gold\")\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([18, 0, 100])\n        scale([0.5, 1, 0.3])\n        sphere(d=6);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Bundle of rods\n        bundle_rods();\n        \n        // Axe blade\n        translate([0, 0, 100])\n        rotate([0, 90, 0])\n        color(\"silver\")\n        axe_blade();\n        \n        // Axe handle\n        translate([0, 0, 100])\n        rotate([0, 90, 0])\n        axe_handle();\n        \n        // Binding leather straps\n        binding_straps();\n        \n        // Eagle atop fasces\n        eagle_head();\n        \n        // Laurel wreath decoration\n        laurel_wreath();\n    }\n    \n    // Remove bottom to make flat base\n    translate([0, 0, -1])\n    cube([40, 40, 2], center=true);\n}\n\n// Base inscription\ntranslate([0, -20, 0])\nrotate([0, 90, 0])\nlinear_extrude(height=1)\ntext(\"SPQR\", size=6, halign=\"center\", font=\"Times:style=Bold\");",
    "renders": true
  },
  {
    "historical_artifact": "dispensation",
    "openscad_code": "// Dispensation Scroll - Historical Artifact\n// Medieval papal dispensation scroll with wax seal\n\n// Overall dimensions\nscroll_length = 80;\nscroll_width = 25;\nscroll_thickness = 2;\nseal_diameter = 12;\nseal_thickness = 3;\n\n// Colors\nscroll_color = \"burlywood\";\nseal_color = \"crimson\";\nribbon_color = \"red\";\nink_color = \"black\";\n\n// Main scroll body\nmodule scroll_body() {\n    color(scroll_color) {\n        // Main scroll sheet\n        translate([0, 0, scroll_thickness/2])\n            cube([scroll_length, scroll_width, scroll_thickness], center=true);\n        \n        // Rolled edges\n        translate([-scroll_length/2 + 5, 0, scroll_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=scroll_width-2, r=5, center=true);\n        \n        translate([scroll_length/2 - 5, 0, scroll_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=scroll_width-2, r=5, center=true);\n    }\n}\n\n// Wax seal\nmodule wax_seal() {\n    color(seal_color) {\n        // Main seal body\n        translate([scroll_length/2 - 15, 0, scroll_thickness + seal_thickness/2])\n            cylinder(h=seal_thickness, d=seal_diameter, center=true);\n        \n        // Cross impression in seal\n        difference() {\n            cylinder(h=seal_thickness, d=seal_diameter, center=true);\n            translate([scroll_length/2 - 15, 0, scroll_thickness + seal_thickness/2 + 0.1])\n                cube([seal_diameter*0.8, 1, seal_thickness*1.5], center=true);\n            translate([scroll_length/2 - 15, 0, scroll_thickness + seal_thickness/2 + 0.1])\n                cube([1, seal_diameter*0.8, seal_thickness*1.5], center=true);\n        }\n    }\n}\n\n// Silk ribbon\nmodule ribbon() {\n    color(ribbon_color) {\n        // Ribbon passing through seal\n        translate([scroll_length/2 - 15, 0, scroll_thickness + seal_thickness + 1])\n            rotate([90, 0, 0])\n                cylinder(h=seal_diameter + 4, r=0.5, center=true);\n    }\n}\n\n// Text lines on scroll\nmodule scroll_text() {\n    color(ink_color) {\n        // Latin text lines\n        for(i = [1:5]) {\n            translate([-scroll_length/2 + 10, -scroll_width/2 + 5 + i*4, scroll_thickness + 0.1])\n                cube([scroll_length*0.7, 0.5, 0.2]);\n        }\n        \n        // Decorative initial letter\n        translate([-scroll_length/2 + 5, -scroll_width/2 + 15, scroll_thickness + 0.1])\n            cube([4, 4, 0.2]);\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color(ink_color) {\n        // Top border\n        translate([0, scroll_width/2 - 2, scroll_thickness/2])\n            cube([scroll_length, 0.5, scroll_thickness + 0.2], center=true);\n        \n        // Bottom border\n        translate([0, -scroll_width/2 + 2, scroll_thickness/2])\n            cube([scroll_length, 0.5, scroll_thickness + 0.2], center=true);\n        \n        // Corner decorations\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x*scroll_length/2, y*scroll_width/2, scroll_thickness/2])\n                    difference() {\n                        cube([3, 3, scroll_thickness + 0.2], center=true);\n                        cube([2.5, 2.5, scroll_thickness + 0.4], center=true);\n                    }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    scroll_body();\n    wax_seal();\n    ribbon();\n    scroll_text();\n    border_pattern();\n}",
    "renders": true
  },
  {
    "historical_artifact": "indulgence",
    "openscad_code": "// Papal Indulgence Document (ca. 1500)\n// A three-dimensional representation of a papal indulgence scroll\n// Dimensions: ~70mm in length when unfurled\n\n$fn = 32;\n\n// Main scroll body\nmodule scroll_body() {\n    color(\"parchment\") {\n        // Scroll tube (rolled document)\n        difference() {\n            cylinder(h = 60, d = 20, center = true);\n            translate([0, 0, 30.5]) \n                cylinder(h = 2, d = 18, center = true);\n        }\n        \n        // Unfurled portion\n        translate([10, 0, 0])\n            rotate([0, 0, 30])\n                cube([40, 25, 1], center = true);\n    }\n}\n\n// Papal seal (lead bulla)\nmodule papal_seal() {\n    color(\"darkslategray\") {\n        // Main seal disk\n        translate([0, 0, -12])\n            cylinder(h = 3, d = 15);\n        \n        // Papal cross relief\n        translate([0, 0, -8.5])\n            linear_extrude(height = 1) {\n                offset(r = 1) {\n                    intersection() {\n                        square([8, 1], center = true);\n                        square([1, 8], center = true);\n                    }\n                }\n            }\n    }\n}\n\n// Hanging cord\nmodule hanging_cord() {\n    color(\"sienna\") {\n        for(i = [0:1:5]) {\n            translate([0, 0, -15 - i*2])\n                rotate([0, 0, i*30])\n                    difference() {\n                        cylinder(h = 2, d = 2);\n                        translate([0, -1, 0])\n                            cube([2, 2, 2], center = true);\n                    }\n        }\n    }\n}\n\n// Decorative ecclesiastical border pattern\nmodule border_pattern() {\n    color(\"gold\") {\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, 12, 1])\n                    cylinder(h = 2, d = 3);\n            \n            rotate([0, 0, i*90 + 45])\n                translate([0, 12, 1])\n                    sphere(d = 2);\n        }\n    }\n}\n\n// Latin inscription panel\nmodule inscription_panel() {\n    color(\"burlywood\") {\n        translate([30, 0, 1])\n            cube([35, 20, 0.5], center = true);\n        \n        // Simulated text lines\n        for(i = [-2:1:2]) {\n            color(\"saddlebrown\") {\n                translate([30, i*3, 2])\n                    cube([30, 0.5, 0.2], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    scroll_body();\n    \n    // Attach seal to scroll\n    translate([20, 0, 0])\n        papal_seal();\n    \n    // Attach cord to seal\n    translate([20, 0, 0])\n        hanging_cord();\n    \n    // Border decorations on unfurled portion\n    translate([30, 0, 1])\n        border_pattern();\n    \n    // Inscription area\n    inscription_panel();\n}\n\n// Display stand (for printing stability)\ncolor(\"brown\") {\n    translate([0, 0, -20])\n        cube([80, 30, 2], center = true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "briefula",
    "openscad_code": "// Briefula historical artifact (Roman writing tablet)\n// Realistic style, medium complexity\n\n// Overall dimensions\ntablet_width = 80;\ntablet_height = 120;\ntablet_thickness = 8;\nhinge_diameter = 6;\n\n// Create the main tablet body\nmodule tablet_body(width, height, thickness) {\n    // Main wooden tablet\n    color([0.4, 0.25, 0.1])\n    difference() {\n        // Main body\n        cube([width, height, thickness], center=true);\n        \n        // Wax recess\n        translate([0, 0, thickness/2 - 1])\n        cube([width - 8, height - 12, 2], center=true);\n    }\n    \n    // Raised border\n    color([0.35, 0.2, 0.08])\n    for(i = [-1, 1]) {\n        // Top and bottom borders\n        translate([0, i * (height/2 - 3), thickness/2])\n        cube([width, 6, 1], center=true);\n        \n        // Left and right borders\n        translate([i * (width/2 - 3), 0, thickness/2])\n        cube([6, height, 1], center=true);\n    }\n}\n\n// Create hinge loops for binding\nmodule hinge_loops(count = 3) {\n    color([0.6, 0.4, 0.15])\n    for(i = [0:count-1]) {\n        translate([0, -40 + i * 40 + 20, 0])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=hinge_diameter, center=true);\n    }\n}\n\n// Decorative corner pieces\nmodule corner_decorations() {\n    color([0.7, 0.5, 0.2])\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (tablet_width/2 - 8), y * (tablet_height/2 - 8), 4])\n            cylinder(h=2, d=8);\n            \n            // Small dome on top\n            translate([x * (tablet_width/2 - 8), y * (tablet_height/2 - 8), 5])\n            sphere(d=8);\n        }\n    }\n}\n\n// Stylus holder groove\nmodule stylus_holder() {\n    color([0.3, 0.15, 0.05])\n    translate([tablet_width/2 - 4, 0, tablet_thickness/2 - 1])\n    rotate([0, 0, 45])\n    cube([60, 4, 1.5], center=true);\n}\n\n// Wax surface texture (simulated with small cylinders)\nmodule wax_surface() {\n    color([0.8, 0.7, 0.4])\n    for(x = [-35:5:35]) {\n        for(y = [-55:5:55]) {\n            translate([x, y, tablet_thickness/2 - 0.5])\n            cylinder(h=0.2, d=2);\n        }\n    }\n}\n\n// Roman inscription (stylized)\nmodule inscription() {\n    color([0.1, 0.1, 0.1])\n    // Simple Roman numerals\n    translate([0, -20, tablet_thickness/2])\n    linear_extrude(height=0.3)\n    text(\"MMXXIV\", size=8, halign=\"center\");\n}\n\n// Assemble the complete briefula\nunion() {\n    // Main tablet\n    tablet_body(tablet_width, tablet_height, tablet_thickness);\n    \n    // Hinge loops on left edge\n    translate([-tablet_width/2 - hinge_diameter/2, 0, 0])\n    hinge_loops(3);\n    \n    // Decorative elements\n    corner_decorations();\n    \n    // Stylus holder\n    stylus_holder();\n    \n    // Wax surface detail\n    wax_surface();\n    \n    // Inscription\n    inscription();\n}",
    "renders": true
  },
  {
    "historical_artifact": "schedule",
    "openscad_code": "// Roman Wax Tablet Schedule (Tabula with Daily Rostrum)\n// Historical daily duty roster carved into a reusable wax tablet\n// 50mm x 35mm x 8mm overall, 3D printable without supports\n\n// Main tablet body with raised frame\ndifference() {\n    // Solid tablet base\n    color(\"burlywood\") cube([50, 35, 6], center=true);\n    \n    // Recessed wax area\n    color(\"saddlebrown\") translate([0, 0, 1]) cube([42, 27, 4.5], center=true);\n}\n\n// Wooden frame edges\nmodule frame_edge() {\n    color(\"peru\") translate([0, 0, 3.5]) cube([50, 3, 1], center=true);\n}\nframe_edge();\nrotate([0, 0, 90]) translate([0, 0, 3.5]) frame_edge();\nrotate([0, 0, 180]) translate([0, 0, 3.5]) frame_edge();\nrotate([0, 0, 270]) translate([0, 0, 3.5]) frame_edge();\n\n// Hinges on left side\nfor (i = [-12:12:12]) {\n    color(\"goldenrod\") translate([-25.5, i, 0]) rotate([90, 0, 0]) \n        cylinder(h=3, r=1.5, center=true);\n}\n\n// Stylus holder holes\nfor (i = [-15:15:15]) {\n    color(\"saddlebrown\") translate([22, i, 2]) \n        rotate([90, 0, 0]) cylinder(h=8, r=1.5, $fn=8);\n}\n\n// Engraved schedule lines (Roman hours)\nmodule schedule_line(y, length) {\n    color(\"black\") translate([0, y, 2.5]) cube([length, 0.5, 0.5], center=true);\n}\nschedule_line(-8, 35);\nschedule_line(-4, 35);\nschedule_line(0, 35);\nschedule_line(4, 35);\nschedule_line(8, 35);\n\n// Roman numerals for hours (I-VI across top)\nmodule roman_numeral(num, x) {\n    // Simple line-based numerals\n    if (num == 1) {\n        translate([x, -11, 2.5]) cube([0.5, 2, 0.5]);\n    }\n    if (num == 2) {\n        translate([x, -11, 2.5]) cube([0.5, 2, 0.5]);\n        translate([x+1, -11, 2.5]) cube([0.5, 2, 0.5]);\n    }\n    if (num == 3) {\n        translate([x, -11, 2.5]) cube([0.5, 2, 0.5]);\n        translate([x+1, -11, 2.5]) cube([0.5, 2, 0.5]);\n        translate([x+2, -11, 2.5]) cube([0.5, 2, 0.5]);\n    }\n    if (num == 4) {\n        translate([x, -11, 2.5]) cube([0.5, 3, 0.5]);\n        translate([x+1, -11, 2.5]) cube([0.5, 2, 0.5]);\n    }\n    if (num == 5) {\n        translate([x, -11, 2.5]) cube([0.5, 3, 0.5]);\n    }\n    if (num == 6) {\n        translate([x, -11, 2.5]) cube([0.5, 3, 0.5]);\n        translate([x+1, -11, 2.5]) cube([0.5, 2, 0.5]);\n    }\n}\n\n// Place numerals\nroman_numeral(1, -15);\nroman_numeral(2, -9);\nroman_numeral(3, -3);\nroman_numeral(4, 3);\nroman_numeral(5, 9);\nroman_numeral(6, 15);\n\n// Duty assignments (simple letter markings)\nmodule duty_mark(x, y, letter) {\n    // Simple block letters\n    if (letter == \"S\") {\n        translate([x, y, 2.5]) cube([2, 0.5, 0.5]);\n        translate([x, y, 2.5]) cube([0.5, 2, 0.5]);\n        translate([x+1.5, y, 2.5]) cube([0.5, 2, 0.5]);\n        translate([x, y+1.5, 2.5]) cube([2, 0.5, 0.5]);\n        translate([x, y+0.75, 2.5]) cube([2, 0.5, 0.5]);\n    }\n    if (letter == \"G\") {\n        translate([x, y, 2.5]) cube([2, 0.5, 0.5]);\n        translate([x, y, 2.5]) cube([0.5, 2, 0.5]);\n        translate([x, y+1.5, 2.5]) cube([2, 0.5, 0.5]);\n        translate([x+1.5, y+0.75, 2.5]) cube([0.5, 0.75, 0.5]);\n        translate([x+1.5, y+1.5, 2.5]) cube([0.5, 0.5, 0.5]);\n    }\n}\n\nduty_mark(-18, -2, \"S\");\nduty_mark(-12, 2, \"G\");\nduty_mark(-6, -6, \"S\");\nduty_mark(6, 6, \"G\");\nduty_mark(12, -2, \"S\");\nduty_mark(18, 2, \"G\");\n\n// Wax tablet seal impression on back\ncolor(\"peru\") translate([0, 0, -3.5]) \n    rotate([0, 180, 0]) linear_extrude(0.5) \n    text(\"SPQR\", size=6, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "historical_artifact": "appendix",
    "openscad_code": "// Appendix Historical Artifact - Roman Wax Tablet (Tabula)\n// Realistic style, medium complexity\n// Overall dimensions: 80mm x 60mm x 12mm\n\n// Historical colors\ntablet_color = \"#8B4513\";  // Saddle brown - wood\nwax_color = \"#2F1B14\";     // Dark brown - beeswax\ntext_color = \"#CD853F\";    // Peru - lighter wood for stylus\n\n// Main tablet body\nmodule tablet_body() {\n    difference() {\n        // Main wooden tablet\n        color(tablet_color)\n        cube([80, 60, 10], center=true);\n        \n        // Recessed area for wax\n        translate([0, 0, 4.5])\n        cube([70, 50, 2], center=true);\n        \n        // Holes for binding cord\n        for(i = [-1, 1]) {\n            translate([35*i, 25, 0])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=4, center=true);\n        }\n    }\n}\n\n// Wax surface\nmodule wax_surface() {\n    color(wax_color)\n    translate([0, 0, 3])\n    cube([68, 48, 1], center=true);\n}\n\n// Roman inscription strokes (simplified)\nmodule inscription() {\n    color(\"#1a0f0a\")\n    translate([0, 0, 3.6])\n    for(x = [-30:15:30]) {\n        for(y = [-20:10:20]) {\n            if(abs(x) + abs(y) > 10) {\n                rotate([0, 0, rand() * 30])\n                cube([8, 1.5, 0.3], center=true);\n            }\n        }\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color(text_color)\n    translate([0, 0, 5.1])\n    for(i = [-1, 1]) {\n        // Top and bottom borders\n        for(x = [-30:5:30]) {\n            translate([x, 27*i, 0])\n            cube([3, 2, 0.5], center=true);\n        }\n        // Left and right borders\n        for(y = [-25:5:25]) {\n            translate([37.5*i, y, 0])\n            cube([2, 3, 0.5], center=true);\n        }\n    }\n}\n\n// Stylus (writing tool)\nmodule stylus() {\n    color(text_color)\n    translate([45, 0, -8])\n    rotate([90, 0, 0])\n    union() {\n        // Handle\n        cylinder(h=20, d=4, center=true);\n        // Point\n        translate([0, 0, 12])\n        cylinder(h=8, d1=4, d2=1, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    tablet_body();\n    wax_surface();\n    inscription();\n    border_pattern();\n    stylus();\n}",
    "renders": true
  },
  {
    "historical_artifact": "addendum",
    "openscad_code": "// Bronze Age Clay Tablet Addendum - Cuneiform Receipt Tablet (circa 2500 BCE)\n// Realistic style, medium complexity\n\n// Overall dimensions (mm)\ntablet_width = 60;\ntablet_height = 40;\ntablet_thickness = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule tablet_body() {\n    difference() {\n        // Main tablet shape - slightly curved for authenticity\n        hull() {\n            cube([tablet_width, tablet_height, tablet_thickness], center = true);\n            translate([0, 0, tablet_thickness/2 - 2]) \n                sphere(d = tablet_width * 0.9);\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, 1])\n            cube([tablet_width - wall_thickness*2, \n                  tablet_height - wall_thickness*2, \n                  tablet_thickness], center = true);\n    }\n}\n\nmodule cuneiform_wedge(x, y, depth = 1) {\n    // Single cuneiform wedge impression\n    translate([x, y, tablet_thickness/2 - 0.5])\n        rotate([0, 0, rand(0, 30)])\n        linear_extrude(height = depth + 0.5)\n            polygon(points = [[0, 0], [2, 3], [3, 0]]);\n}\n\nmodule cuneiform_numbers() {\n    // Early Sumerian numeric system wedges\n    for (i = [0:4]) {\n        for (j = [0:2]) {\n            cuneiform_wedge(-20 + i*10, -10 + j*8, 1.5);\n        }\n    }\n    \n    // Quantity symbols\n    for (k = [0:5]) {\n        translate([10 + k*3, -5, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 1.5, r = 0.5, $fn = 6);\n    }\n}\n\nmodule tablet_edge_markings() {\n    // Decorative edge notches typical for receipts\n    for (i = [0:7]) {\n        rotate([0, 0, i*45])\n        translate([tablet_width/2 - 2, 0, tablet_thickness/2 - 1])\n            cube([4, 2, 3], center = true);\n    }\n}\n\nmodule seal_impression() {\n    // Cylinder seal impression at bottom\n    translate([0, tablet_height/2 - 5, tablet_thickness/2 - 0.5])\n    difference() {\n        cylinder(h = 1.5, r = 8, $fn = 32);\n        for (angle = [0:30:330]) {\n            rotate([0, 0, angle])\n            translate([5, 0, 0])\n            sphere(d = 2);\n        }\n    }\n}\n\nmodule repair_holes() {\n    // Authentic repair holes from ancient times\n    for (pos = [[-15, 12], [15, -12]]) {\n        translate([pos[0], pos[1], 0])\n        rotate([90, 0, 0])\n        cylinder(h = tablet_thickness, r = 1.5, $fn = 8);\n    }\n}\n\n// Main assembly\ncolor(\"#8B4513\")  // Bronze age clay color\nunion() {\n    tablet_body();\n    \n    color(\"#654321\")  // Darker impressions\n    union() {\n        cuneiform_numbers();\n        seal_impression();\n        tablet_edge_markings();\n    }\n    \n    color(\"#A0522D\")  // Fired clay repair\n    repair_holes();\n}\n\n// Add maker's mark on back\ncolor(\"#4A4A4A\")\ntranslate([0, 0, -tablet_thickness/2 + 0.5])\n    cylinder(h = 0.5, r = 3, $fn = 16);\n\n// Random seed for natural variations\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);",
    "renders": true
  },
  {
    "historical_artifact": "supplement",
    "openscad_code": "// OpenSCAD code for a Roman military dolabra (axe-pick) supplement artifact\n// This represents a legionary's multi-tool carried on campaign, ~1st-3rd century CE\n\n$fn = 100;\n\n// Overall scale - 70mm length\noverall_scale = 0.7;\n\n// Main handle module\nmodule handle() {\n    // Wooden shaft with slight taper\n    color(\"saddlebrown\")\n    translate([0, 0, -35])\n    cylinder(h = 70, r1 = 5, r2 = 4.5);\n    \n    // Iron ferrule reinforcement\n    color(\"dimgray\")\n    translate([0, 0, 28])\n    cylinder(h = 8, r = 5.5, r1 = 5.5, r2 = 5.2);\n    \n    // Leather grip wraps\n    for(i = [-20:8:20]) {\n        color(\"darkbrown\")\n        translate([0, 0, i])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 6, r = 5.1, center = true);\n            cylinder(h = 7, r = 4.6, center = true);\n        }\n    }\n}\n\n// Axe head module\nmodule axe_head() {\n    // Main axe blade\n    color(\"silver\")\n    translate([0, 12, 30])\n    rotate([0, 0, 45])\n    union() {\n        // Blade body\n        cube([25, 3, 15], center = true);\n        \n        // Curved cutting edge\n        translate([10, 0, -7.5])\n        rotate([0, 90, 0])\n        cylinder(h = 3, r = 15);\n    }\n    \n    // Socket for handle\n    color(\"silver\")\n    translate([0, 0, 30])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 20, r = 5.8);\n        cylinder(h = 21, r = 5);\n    }\n}\n\n// Pick spike module\nmodule pick_spike() {\n    color(\"silver\")\n    translate([0, -12, 30])\n    rotate([0, 0, -30])\n    union() {\n        // Spike body\n        cube([20, 3, 3], center = true);\n        \n        // Tapered spike end\n        translate([-10, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 3, r1 = 1.5, r2 = 0);\n    }\n}\n\n// Roman decorative elements\nmodule decorative_elements() {\n    // Eagle motif on axe blade\n    color(\"gold\")\n    translate([5, 15, 30])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    polygon(points = [\n        [0, 0], [2, -1], [3, 0], [4, -2], [5, -1], [5, 1], [4, 2], [3, 1], [2, 2], [0, 0]\n    ]);\n    \n    // Legion marking \"LEG\" inscription\n    translate([0, 15, 32])\n    rotate([0, 90, 0])\n    linear_extrude(height = 0.3)\n    text(\"LEG\", size = 3, halign = \"center\", valign = \"center\");\n}\n\n// Assembly\nscale(overall_scale) {\n    handle();\n    axe_head();\n    pick_spike();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "historical_artifact": "codicil",
    "openscad_code": "// Ancient Roman Bronze Codicil (testamentary supplement)\n// A small folding tablet used for legal amendments to wills\n\n// Overall dimensions in mm\ntablet_width = 45;\ntablet_height = 65;\ntablet_thickness = 3;\nhinge_diameter = 4;\n\n// Bronze material color\ncolor([0.72, 0.45, 0.2])\n\n// Main tablet body as two hinged leaves\nmodule tablet_leaf(width, height, thickness) {\n    difference() {\n        // Main tablet body\n        cube([width, height, thickness], center=true);\n        \n        // Wax surface recess\n        translate([0, 0, thickness/2 - 0.5])\n            cube([width - 6, height - 10, 1], center=true);\n        \n        // Rounded corners\n        translate([width/2 - 3, height/2 - 3, 0])\n            sphere(r=3, $fn=16);\n        translate([-width/2 + 3, height/2 - 3, 0])\n            sphere(r=3, $fn=16);\n        translate([width/2 - 3, -height/2 + 3, 0])\n            sphere(r=3, $fn=16);\n        translate([-width/2 + 3, -height/2 + 3, 0])\n            sphere(r=3, $fn=16);\n    }\n}\n\n// Hinge mechanism\nmodule hinge(diameter, length) {\n    for(i = [0:2]) {\n        translate([0, -length/2 + i * (length/3), 0])\n            rotate([90, 0, 0])\n                cylinder(h=diameter, r=diameter/2, center=true, $fn=12);\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern(width, height) {\n    // Top and bottom borders with rivet details\n    for(i = [-width/2 + 5 : 5 : width/2 - 5]) {\n        translate([i, height/2 - 3, tablet_thickness/2 - 0.5])\n            cylinder(h=1, r=1, $fn=8);\n        translate([i, -height/2 + 3, tablet_thickness/2 - 0.5])\n            cylinder(h=1, r=1, $fn=8);\n    }\n    \n    // Side borders with rivet details\n    for(j = [-height/2 + 10 : 5 : height/2 - 10]) {\n        translate([width/2 - 3, j, tablet_thickness/2 - 0.5])\n            cylinder(h=1, r=1, $fn=8);\n        translate([-width/2 + 3, j, tablet_thickness/2 - 0.5])\n            cylinder(h=1, r=1, $fn=8);\n    }\n}\n\n// Seal ring attachment point\nmodule seal_ring() {\n    translate([0, tablet_height/2 + 3, 0]) {\n        difference() {\n            // Ring base\n            cylinder(h=3, r=4, $fn=32);\n            // Ring hole\n            translate([0, 0, -1])\n                cylinder(h=5, r=2, $fn=32);\n        }\n    }\n}\n\n// Roman inscription panel\nmodule inscription_panel() {\n    translate([0, 0, tablet_thickness/2 + 0.1]) {\n        // Raised border for inscription area\n        cube([tablet_width - 12, tablet_height - 16, 0.5], center=true);\n        \n        // Text lines (simulated as grooves)\n        for(line = [1:4]) {\n            translate([0, -15 + line * 6, 0])\n                cube([tablet_width - 16, 0.5, 0.2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Left tablet leaf\n    translate([-tablet_width/2 - 2, 0, 0])\n        tablet_leaf(tablet_width, tablet_height, tablet_thickness);\n    \n    // Right tablet leaf\n    translate([tablet_width/2 + 2, 0, 0])\n        tablet_leaf(tablet_width, tablet_height, tablet_thickness);\n    \n    // Central hinge\n    translate([0, 0, 0])\n        hinge(hinge_diameter, tablet_height);\n    \n    // Decorative elements on left leaf\n    translate([-tablet_width/2 - 2, 0, 0]) {\n        border_pattern(tablet_width, tablet_height);\n        inscription_panel();\n    }\n    \n    // Decorative elements on right leaf\n    translate([tablet_width/2 + 2, 0, 0]) {\n        border_pattern(tablet_width, tablet_height);\n        inscription_panel();\n    }\n    \n    // Seal ring on right leaf\n    translate([tablet_width/2 + 2, 0, 0])\n        seal_ring();\n}",
    "renders": true
  },
  {
    "historical_artifact": "annotation",
    "openscad_code": "// Roman wax tablet (tabula cerata) - 1st-2nd century CE\n// A hinged wooden notebook with wax-filled recesses for writing with a stylus\n// Designed for 3D printing at ~60mm length, ~40mm width when closed\n\n// Overall tablet dimensions\ntablet_length = 60;\ntablet_width = 40;\ntablet_thickness = 8;\nwall_thickness = 2;\nwax_depth = 3;\n\n// Color definitions\nwood_color = [0.4, 0.25, 0.1];\nwax_color = [0.9, 0.7, 0.2];\nmetal_color = [0.7, 0.6, 0.4];\n\n// Hinge pin\npin_radius = 1.5;\npin_length = tablet_width;\n\n// Left half of tablet\nmodule left_half() {\n    difference() {\n        // Main wooden frame\n        color(wood_color)\n        cube([tablet_length/2, tablet_width, tablet_thickness], center=true);\n        \n        // Wax cavity\n        translate([0, 0, tablet_thickness/2 - wax_depth/2 - wall_thickness])\n            color(wax_color)\n            cube([tablet_length/2 - 2*wall_thickness, tablet_width - 2*wall_thickness, wax_depth], center=true);\n        \n        // Hinge holes\n        translate([tablet_length/4, tablet_width/2, 0])\n            rotate([90, 0, 0])\n            cylinder(r=pin_radius, h=pin_length/2, center=true);\n        translate([tablet_length/4, -tablet_width/2, 0])\n            rotate([90, 0, 0])\n            cylinder(r=pin_radius, h=pin_length/2, center=true);\n    }\n}\n\n// Right half of tablet (mirror of left half)\nmodule right_half() {\n    mirror([1, 0, 0]) left_half();\n}\n\n// Hinge pin\nmodule hinge_pin() {\n    color(metal_color)\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(r=pin_radius, h=pin_length, center=true);\n}\n\n// Decorative corner reinforcement plates\nmodule corner_plates() {\n    plate_size = 6;\n    plate_thickness = 1;\n    \n    // Corners for left half\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (tablet_length/4 - plate_size/2), \n                      y * (tablet_width/2 - plate_size/2), \n                      tablet_thickness/2 + plate_thickness/2])\n                color(metal_color)\n                cube([plate_size, plate_size, plate_thickness], center=true);\n        }\n    }\n    \n    // Corners for right half\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([-x * (tablet_length/4 - plate_size/2), \n                      y * (tablet_width/2 - plate_size/2), \n                      tablet_thickness/2 + plate_thickness/2])\n                color(metal_color)\n                cube([plate_size, plate_size, plate_thickness], center=true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    left_half();\n    right_half();\n    corner_plates();\n    hinge_pin();\n}",
    "renders": true
  },
  {
    "historical_artifact": "gloss",
    "openscad_code": "// Historical Gloss (Medieval Book Cover with Metalwork)\n// A 15th-century illuminated manuscript cover reproduction\n// Features: Central boss, corner reinforcements, decorative studs, inscription band\n\n// Overall dimensions: 80mm x 60mm x 8mm\n\n// Main book cover plate\nmodule cover_plate() {\n    color(\"burlywood\") \n    difference() {\n        // Main wooden board\n        cube([80, 60, 6], center=true);\n        \n        // Recessed panel for leather covering\n        translate([0, 0, 2.9])\n        cube([74, 54, 2], center=true);\n    }\n}\n\n// Central metal boss (protective and decorative)\nmodule central_boss() {\n    color(\"goldenrod\") \n    union() {\n        // Main dome\n        translate([0, 0, 5])\n        scale([1, 1, 0.6])\n        sphere(d=18, $fn=32);\n        \n        // Decorative ring\n        translate([0, 0, 3])\n        cylinder(h=2, d1=18, d2=16, $fn=32);\n        \n        // Small top dome\n        translate([0, 0, 10])\n        scale([1, 1, 0.4])\n        sphere(d=8, $fn=24);\n    }\n}\n\n// Corner reinforcements (metal protectors)\nmodule corner_reinforcement(x, y) {\n    color(\"goldenrod\") \n    translate([x, y, 2])\n    union() {\n        // Main triangular piece\n        rotate([0, 0, y > 0 ? 45 : -45])\n        scale([0.5, 0.5, 1])\n        cube([20, 20, 4], center=true);\n        \n        // Decorative rivet\n        translate([x > 0 ? -5 : 5, y > 0 ? -5 : 5, 4])\n        cylinder(h=2, d=4, $fn=16);\n    }\n}\n\n// Decorative studs along edges\nmodule decorative_studs() {\n    color(\"gold\") \n    // Top and bottom edges\n    for(i = [-30:15:30]) {\n        translate([i, 27, 3])\n        cylinder(h=2, d=3, $fn=12);\n        translate([i, -27, 3])\n        cylinder(h=2, d=3, $fn=12);\n    }\n    \n    // Left and right edges\n    for(j = [-20:15:20]) {\n        translate([37, j, 3])\n        cylinder(h=2, d=3, $fn=12);\n        translate([-37, j, 3])\n        cylinder(h=2, d=3, $fn=12);\n    }\n}\n\n// Inscription band (raised text area)\nmodule inscription_band() {\n    color(\"saddlebrown\") \n    translate([0, 12, 3])\n    cube([50, 8, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    cover_plate();\n    central_boss();\n    \n    // Add corner reinforcements\n    corner_reinforcement(35, 25);\n    corner_reinforcement(-35, 25);\n    corner_reinforcement(35, -25);\n    corner_reinforcement(-35, -25);\n    \n    decorative_studs();\n    inscription_band();\n}\n\n// Optional: Add hinge loops on left side for book binding\n// Uncomment below for complete book cover\n/*\ncolor(\"goldenrod\") \nfor(h = [-20:10:20]) {\n    translate([-40, h, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=6, d=6, $fn=20);\n        translate([0, 0, 3])\n        cylinder(h=8, d=3, $fn=20);\n    }\n}\n*/",
    "renders": true
  },
  {
    "historical_artifact": "commentary",
    "openscad_code": "// Commentary Historical Artifact: Roman Wax Tablet Set with Bronze Hinges\n// A realistic 3D printable model of a Roman wax tablet used for writing commentaries\n// Size: 90mm width, 60mm height, 12mm thickness (closed)\n\n// Main parameters\ntablet_width = 80;\ntablet_height = 55;\ntablet_thickness = 4;\nhinge_diameter = 4;\nhinge_length = 8;\nwax_depth = 2;\nborder_width = 3;\n\n// Color definitions\nbronze_color = [150/255, 100/255, 50/255];\nwax_color = [40/255, 35/255, 30/255];\nwood_color = [120/255, 100/255, 80/255];\n\n// Create the complete wax tablet set\nmodule wax_tablet_set() {\n    // Left tablet\n    translate([-tablet_width/2 - hinge_diameter, 0, 0]) {\n        color(wood_color) tablet_half();\n    }\n    \n    // Right tablet\n    translate([tablet_width/2 + hinge_diameter, 0, 0]) {\n        color(wood_color) tablet_half();\n    }\n    \n    // Bronze hinges\n    color(bronze_color) {\n        // Top hinge\n        translate([0, tablet_height/2 - 5, 0]) {\n            hinge();\n        }\n        \n        // Bottom hinge\n        translate([0, -tablet_height/2 + 5, 0]) {\n            hinge();\n        }\n    }\n}\n\n// Create one half of the tablet\nmodule tablet_half() {\n    difference() {\n        // Main wooden tablet\n        cube([tablet_width, tablet_height, tablet_thickness], center=true);\n        \n        // Wax recess\n        translate([0, 0, tablet_thickness/2 - wax_depth/2]) {\n            cube([tablet_width - 2*border_width, tablet_height - 2*border_width, wax_depth + 0.1], center=true);\n        }\n        \n        // Decorative border pattern\n        for(i = [0:5]) {\n            translate([tablet_width/2 - border_width - i*2, tablet_height/2 - border_width - 1, tablet_thickness/2 - 0.5]) {\n                cube([1, 2, 1]);\n            }\n            translate([tablet_width/2 - border_width - 1, tablet_height/2 - border_width - i*2, tablet_thickness/2 - 0.5]) {\n                cube([2, 1, 1]);\n            }\n        }\n    }\n    \n    // Wax surface\n    color(wax_color) {\n        translate([0, 0, tablet_thickness/2 - wax_depth/2]) {\n            cube([tablet_width - 2*border_width - 2, tablet_height - 2*border_width - 2, wax_depth], center=true);\n        }\n    }\n}\n\n// Bronze hinge mechanism\nmodule hinge() {\n    union() {\n        // Central pin\n        rotate([90, 0, 0]) {\n            cylinder(h=hinge_length * 1.2, d=hinge_diameter, center=true);\n        }\n        \n        // Left hinge loops\n        for(i = [-1, 0, 1]) {\n            translate([-tablet_width/2 - hinge_diameter/2, i*2.5, 0]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=hinge_length, d=hinge_diameter + 2, center=true);\n                        cylinder(h=hinge_length + 1, d=hinge_diameter, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Right hinge loops\n        for(i = [-1, 0, 1]) {\n            translate([tablet_width/2 + hinge_diameter/2, i*2.5 + 1.25, 0]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=hinge_length, d=hinge_diameter + 2, center=true);\n                        cylinder(h=hinge_length + 1, d=hinge_diameter, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the complete artifact\nwax_tablet_set();",
    "renders": true
  },
  {
    "historical_artifact": "scholium",
    "openscad_code": "// Scholium - Medieval manuscript gloss artifact\n// A realistic representation of a 13th century scholium with marginal notes\n\n// Overall dimensions: 80mm x 60mm x 8mm\n\n// Colors\ncolor_parchment = [0.95, 0.90, 0.82];\ncolor_ink = [0.25, 0.20, 0.15];\ncolor_red = [0.65, 0.15, 0.10];\ncolor_blue = [0.10, 0.20, 0.55];\n\n// Main manuscript page with scholium\nmodule manuscript_page() {\n    color(color_parchment)\n    difference() {\n        // Main page\n        cube([80, 60, 2], center=false);\n        \n        // Binding holes\n        for (i = [10:20:50]) {\n            translate([i, 2, 0])\n            cylinder(h=3, d=2, center=false);\n        }\n    }\n}\n\n// Main text block (latin text representation)\nmodule main_text() {\n    color(color_ink)\n    translate([10, 10, 2.1])\n    cube([55, 35, 0.5]);\n}\n\n// Individual gloss note\nmodule gloss_note(x, y, width, height) {\n    color(color_ink)\n    translate([x, y, 2.1])\n    cube([width, height, 0.3]);\n    \n    // Red initial letter decoration\n    color(color_red)\n    translate([x, y, 2.4])\n    cube([3, 3, 0.2]);\n}\n\n// Decorative initial with illumination\nmodule illuminated_initial() {\n    // Blue background\n    color(color_blue)\n    translate([12, 12, 2.4])\n    cube([8, 8, 0.5]);\n    \n    // Gold pattern (represented with yellow)\n    color([0.8, 0.7, 0.1])\n    for (i = [0:3]) {\n        translate([14 + i*1.5, 14, 2.9])\n        sphere(d=0.8);\n    }\n}\n\n// Red and blue paragraph markers\nmodule paragraph_markers() {\n    // Red marker\n    color(color_red)\n    translate([65, 20, 2.1])\n    cylinder(h=0.5, d=2, center=false);\n    \n    // Blue marker\n    color(color_blue)\n    translate([65, 28, 2.1])\n    cylinder(h=0.5, d=2, center=false);\n}\n\n// Binding cord impression\nmodule binding_cord() {\n    color([0.4, 0.3, 0.2])\n    translate([0, 30, 1])\n    rotate([0, 90, 0])\n    cylinder(h=80, d=1.5, center=false);\n}\n\n// Generate the complete scholium\nmanuscript_page();\nmain_text();\nilluminated_initial();\n\n// Multiple gloss notes in margins\ngloss_note(5, 20, 4, 15);\ngloss_note(70, 15, 6, 8);\ngloss_note(20, 5, 30, 3);\ngloss_note(25, 52, 25, 4);\n\nparagraph_markers();\nbinding_cord();\n\n// Additional marginal decoration\ncolor(color_red)\ntranslate([75, 45, 2.1])\nrotate([0, 0, 45])\ncube([2, 8, 0.3]);\n\ncolor(color_blue)\ntranslate([5, 45, 2.1])\nrotate([0, 0, -30])\ncube([2, 6, 0.3]);",
    "renders": true
  },
  {
    "historical_artifact": "marginalia",
    "openscad_code": "// Marginalia - Medieval Manuscript Grotesque\n// A 3D printable interpretation of a historiated initial marginal grotesque\n// Based on 13th century illuminated manuscripts\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Main colors\ncolor_brown = [0.4, 0.25, 0.15];\ncolor_gold = [0.8, 0.6, 0.2];\ncolor_red = [0.6, 0.1, 0.1];\ncolor_parchment = [0.95, 0.9, 0.8];\n\n// Overall dimensions for 3D printing\nscale_factor = 0.5; // Final size ~60mm\n\nmodule marginalia_grotesque() {\n    // Base manuscript corner\n    color(color_parchment)\n    translate([0, 0, -2])\n    cube([40, 30, 2], center=false);\n    \n    // Main dragon body\n    color(color_brown)\n    union() {\n        // Serpentine body\n        rotate([0, 0, 15])\n        translate([8, 5, 0])\n        cylinder(h=25, d1=8, d2=6);\n        \n        // Body curve\n        rotate([0, 0, 45])\n        translate([15, 8, 8])\n        cylinder(h=20, d1=6, d2=4);\n        \n        // Tail curl\n        rotate([0, 0, 90])\n        translate([20, 15, 15])\n        cylinder(h=15, d1=4, d2=2);\n    }\n    \n    // Dragon head\n    color(color_brown)\n    union() {\n        // Snout\n        rotate([0, -20, 35])\n        translate([5, 2, 20])\n        cylinder(h=8, d1=6, d2=4);\n        \n        // Head bulb\n        rotate([0, -20, 35])\n        translate([3, 1, 26])\n        sphere(d=7);\n    }\n    \n    // Horns\n    color(color_brown)\n    for(i = [0:1]) {\n        rotate([0, -20, 35 + i*20])\n        translate([3 + i*2, 1 + i*1, 29])\n        cylinder(h=6, d1=2, d2=1);\n    }\n    \n    // Wings\n    color(color_brown)\n    union() {\n        // Left wing\n        rotate([30, -15, 20])\n        translate([10, 8, 15])\n        cube([12, 2, 8]);\n        \n        // Wing detail\n        rotate([30, -15, 25])\n        translate([12, 9, 16])\n        cube([8, 1.5, 6]);\n        \n        // Right wing\n        rotate([30, -15, 50])\n        translate([12, 6, 12])\n        cube([10, 2, 7]);\n    }\n    \n    // Decorative gold leaf accents\n    color(color_gold)\n    union() {\n        // Eye\n        rotate([0, -20, 35])\n        translate([4, 2, 25])\n        sphere(d=1.5);\n        \n        // Tail decoration\n        rotate([0, 0, 90])\n        translate([30, 18, 15])\n        sphere(d=2);\n        \n        // Wing tips\n        for(pos = [[20, 10, 20], [18, 8, 16]]) {\n            translate(pos)\n            sphere(d=1.5);\n        }\n    }\n    \n    // Red ink details (historical manuscript colors)\n    color(color_red)\n    union() {\n        // Decorative spots on body\n        for(i = [0:3]) {\n            rotate([0, 0, 15 + i*10])\n            translate([10 + i*3, 5 + i*2, 5 + i*4])\n            sphere(d=1);\n        }\n        \n        // Mouth line\n        rotate([0, -20, 35])\n        translate([6, 2.5, 23])\n        cube([3, 0.5, 1]);\n        \n        // Claw details\n        for(i = [0:1]) {\n            rotate([0, 0, 45 + i*20])\n            translate([20 + i*2, 10 + i, 0])\n            cylinder(h=2, d=1.5);\n        }\n    }\n    \n    // Scrollwork decoration\n    color(color_gold)\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([35, 15, -1])\n        cylinder(h=1, d1=3, d2=1);\n    }\n    \n    // Vine decoration curling around\n    color(color_brown)\n    for(t = [0:10:90]) {\n        rotate([0, 0, t])\n        translate([25 + cos(t*2)*5, 15 + sin(t*2)*5, 2 + t/20])\n        sphere(d=1.5);\n    }\n}\n\n// Scale to 3D printing size\nscale([scale_factor, scale_factor, scale_factor])\nmarginalia_grotesque();",
    "renders": true
  },
  {
    "historical_artifact": "footnote",
    "openscad_code": "// Footnote Historical Artifact - Ancient Egyptian Papyrus Scroll Footnote\n// A realistic style 3D printable footnote marker inspired by ancient Egyptian papyrus fragments\n// Size: 60mm x 45mm x 8mm\n\n$fn = 32;\n\n// Main papyrus fragment base\nmodule papyrus_fragment() {\n    color([0.82, 0.71, 0.55])  // Papyrus color\n    difference() {\n        // Main papyrus body\n        translate([0, 0, 1])\n        cube([50, 35, 2], center=true);\n        \n        // Irregular torn edges\n        union() {\n            // Top tear\n            translate([-20, 15, 0])\n            scale([1, 0.5, 1])\n            sphere(5);\n            \n            // Bottom tear\n            translate([15, -15, 0])\n            scale([1, 0.7, 1])\n            sphere(4);\n            \n            // Side tears\n            translate([22, 5, 0])\n            scale([0.5, 1, 1])\n            sphere(3);\n        }\n    }\n}\n\n// Hieroglyphic symbols as footnote markers\nmodule hieroglyph_footnote() {\n    color([0.3, 0.2, 0.1])\n    translate([0, 0, 3])\n    union() {\n        // Ankh symbol (life)\n        translate([-8, 0, 0])\n        union() {\n            // Main loop\n            cylinder(h=1.5, r=3);\n            // Cross bar\n            translate([0, -3, 0.75])\n            cube([6, 1.5, 1.5], center=true);\n            // Vertical stem\n            translate([0, 2.5, 0.75])\n            cube([1.5, 5, 1.5], center=true);\n        }\n        \n        // Eye of Horus\n        translate([8, 0, 0])\n        scale([0.8, 0.8, 1])\n        union() {\n            // Curved top\n            translate([0, 1, 0.75])\n            sphere(2, $fn=64);\n            // Straight bottom\n            translate([0, -1, 0.75])\n            cube([4, 1, 1.5], center=true);\n            // Markings\n            translate([0, 0, 1.5])\n            cube([0.5, 2.5, 0.5], center=true);\n            translate([0, 0, 1.5])\n            rotate([0, 0, 90])\n            cube([0.5, 2.5, 0.5], center=true);\n        }\n    }\n}\n\n// Papyrus texture pattern (reed marks)\nmodule papyrus_texture() {\n    color([0.75, 0.65, 0.5])\n    for(i = [-20:5:20]) {\n        translate([i, 0, 2.1])\n        cube([0.8, 35, 0.2]);\n    }\n    for(j = [-15:5:15]) {\n        translate([0, j, 2.1])\n        cube([50, 0.8, 0.2]);\n    }\n}\n\n// Fragmented edge fibers\nmodule edge_fibers() {\n    color([0.78, 0.68, 0.53])\n    for(i = [1:10]) {\n        angle = i * 36;\n        radius = 25 + sin(i * 3) * 3;\n        translate([cos(angle) * radius, sin(angle) * radius, 1])\n        rotate([0, 0, angle])\n        scale([0.3, 2 + sin(i) * 1, 0.3])\n        cylinder(h=1.5, r=0.5);\n    }\n}\n\n// Ancient ink stains/decay\nmodule ink_stains() {\n    color([0.15, 0.12, 0.1])\n    union() {\n        // Main footnote area stain\n        translate([0, 0, 2.2])\n        scale([1.2, 0.8, 0.1])\n        sphere(5, $fn=32);\n        \n        // Smaller stains\n        translate([-12, 8, 2.2])\n        scale([0.8, 0.6, 0.1])\n        sphere(2, $fn=32);\n        \n        translate([10, -10, 2.2])\n        scale([0.7, 0.5, 0.1])\n        sphere(1.5, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    papyrus_fragment();\n    papyrus_texture();\n    edge_fibers();\n    hieroglyph_footnote();\n    ink_stains();\n}",
    "renders": true
  },
  {
    "historical_artifact": "rubric",
    "openscad_code": "// Historical Rubric - Medieval Manuscript Grading Tablet\n// Based on 13th century wax tablets used by university masters\n\n// Overall dimensions for 3D printing\ntablet_width = 80;\ntablet_height = 60;\ntablet_thickness = 12;\nwall_thickness = 3;\n\n// Create the main tablet body with hollow interior\nmodule tablet_body() {\n    difference() {\n        // Outer shell\n        cube([tablet_width, tablet_height, tablet_thickness], center=true);\n        \n        // Hollow interior\n        translate([0, 0, tablet_thickness/2 - wall_thickness])\n            cube([tablet_width - 2*wall_thickness, tablet_height - 2*wall_thickness, \n                  tablet_thickness], center=true);\n        \n        // Finger hole for opening\n        translate([0, -tablet_height/2 + 10, 0])\n            rotate([90, 0, 0])\n            cylinder(h=20, r=5, center=true);\n    }\n}\n\n// Decorative border pattern\nmodule decorative_border() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([tablet_width/2 - 5, tablet_height/2 - 5, 0])\n        color(\"saddlebrown\")\n        for(j = [0:3]) {\n            translate([0, -j*10, tablet_thickness/2])\n            sphere(r=2);\n        }\n    }\n}\n\n// Wax writing surface\nmodule wax_surface() {\n    color(\"darkred\")\n    translate([0, 0, -tablet_thickness/2 + wall_thickness + 1])\n    cube([tablet_width - 2*wall_thickness - 4, \n          tablet_height - 2*wall_thickness - 4, \n          2], center=true);\n}\n\n// Metal stylus holder loops\nmodule stylus_holders() {\n    color(\"goldenrod\")\n    for(pos = [-1, 1]) {\n        translate([pos * (tablet_width/2 - 8), tablet_height/2 - 3, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=8, r=3, center=true);\n            cylinder(h=9, r=2, center=true);\n        }\n    }\n}\n\n// Medieval inscription band\nmodule inscription_band() {\n    color(\"bronze\")\n    translate([0, 0, tablet_thickness/2 - 1])\n    cube([tablet_width - 10, 8, 2], center=true);\n}\n\n// Latin inscription text (simulated with raised rectangles)\nmodule inscription_text() {\n    color(\"goldenrod\")\n    for(i = [0:7]) {\n        translate([-30 + i*8, 0, tablet_thickness/2 + 0.5])\n        cube([2, 1, 0.5], center=true);\n    }\n}\n\n// Hinged clasp mechanism\nmodule clasp() {\n    color(\"silver\")\n    translate([0, tablet_height/2 - 2, 0])\n    difference() {\n        cube([20, 4, 6], center=true);\n        translate([0, 0, 3])\n            cube([16, 6, 4], center=true);\n    }\n}\n\n// Assemble the complete rubric\nunion() {\n    // Main tablet parts\n    color(\"saddlebrown\")\n    tablet_body();\n    \n    // Surface and decorations\n    wax_surface();\n    decorative_border();\n    inscription_band();\n    inscription_text();\n    stylus_holders();\n    clasp();\n}\n\n// Add slight rounding to edges for realistic feel\nmodule rounded_edges() {\n    color(\"saddlebrown\")\n    translate([0, 0, 0])\n    minkowski() {\n        cube([tablet_width, tablet_height, tablet_thickness], center=true);\n        sphere(r=1);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "illumination",
    "openscad_code": "// Illuminated Manuscript Book (Medieval)\n// Overall dimensions: 70 x 50 x 8 mm\n\n// Color definitions\ncover_color = \"saddlebrown\";\ngold_color = \"goldenrod\";\nparchment_color = \"wheat\";\n\n// Main module\nmodule illuminated_book() {\n    // Book cover\n    color(cover_color) {\n        // Front cover\n        difference() {\n            // Main cover body\n            translate([0, 0, 4]) cube([70, 50, 2], center=true);\n            \n            // Central medallion recess\n            translate([0, 0, 5]) \n                cube([25, 30, 2], center=true);\n        }\n        \n        // Back cover\n        translate([0, 0, -4]) mirror([0,0,1]) cube([70, 50, 2], center=true);\n    }\n    \n    // Central gold illumination\n    color(gold_color) {\n        // Central medallion\n        translate([0, 0, 5.5]) cylinder(h=0.5, d=20, $fn=32);\n        \n        // Decorative corners front\n        for(x=[-25, 25])\n            for(y=[-18, 18])\n                translate([x, y, 5.5])\n                    rotate([0, 0, 45])\n                        cube([8, 8, 0.5], center=true);\n        \n        // Decorative corners back\n        for(x=[-25, 25])\n            for(y=[-18, 18])\n                translate([x, y, -5.5])\n                    rotate([0, 0, 45])\n                        cube([8, 8, 0.5], center=true);\n    }\n    \n    // Parchment pages\n    color(parchment_color) {\n        difference() {\n            // Page block\n            translate([0, 0, 0]) cube([64, 44, 6], center=true);\n            \n            // Text block recess\n            translate([0, 0, 3.1]) cube([50, 35, 0.5], center=true);\n        }\n    }\n    \n    // Spine details\n    color(cover_color) {\n        // Spine ridges\n        for(i=[-2, 0, 2]) {\n            translate([35.5, i*10, 0])\n                cube([3, 8, 10], center=true);\n        }\n    }\n    \n    // Gold decorative elements\n    color(gold_color) {\n        // Front cover border\n        translate([0, 0, 5.5])\n            difference() {\n                cube([68, 48, 0.5], center=true);\n                cube([60, 40, 1], center=true);\n            }\n        \n        // Back cover border\n        translate([0, 0, -5.5])\n            difference() {\n                cube([68, 48, 0.5], center=true);\n                cube([60, 40, 1], center=true);\n            }\n        \n        // Central jewel\n        translate([0, 0, 6.2]) sphere(d=5);\n    }\n    \n    // Illuminated letters on pages (simplified)\n    color(\"darkred\") {\n        translate([-20, -15, 3.2]) cube([3, 5, 0.3]);\n        translate([-16, -15, 3.2]) cube([3, 5, 0.3]);\n        translate([-20, -8, 3.2]) cube([3, 5, 0.3]);\n        translate([-16, -8, 3.2]) cube([3, 5, 0.3]);\n    }\n}\n\n// Render the book\nilluminated_book();",
    "renders": true
  },
  {
    "historical_artifact": "miniature",
    "openscad_code": "// Miniature Roman Oil Lamp (50-80 mm)\n// Based on 1st century CE terracotta oil lamp designs\n\n// Color definitions\ncolor_terracotta = \"#C65D00\";\n\n// Overall scaling factor\nscale_factor = 0.8;\n\n// Main lamp body module\nmodule lamp_body() {\n    // Body shell with hollow interior\n    difference() {\n        // Outer shell - elongated oval shape\n        scale([1, 0.7, 0.4]) \n            sphere(d = 60);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n            scale([0.85, 0.55, 0.3])\n                sphere(d = 60);\n    }\n}\n\n// Nozzle for wick\nmodule nozzle() {\n    // Main nozzle body\n    translate([28, 0, 8])\n        rotate([0, 20, 0])\n        union() {\n            // Tapered nozzle\n            cylinder(h = 15, d1 = 12, d2 = 8);\n            \n            // Wick hole (vertical cylinder)\n            translate([0, 0, 15])\n                cylinder(h = 5, d = 4);\n        }\n    \n    // Fill hole on top\n    translate([0, 0, 12])\n        cylinder(h = 5, d = 12);\n}\n\n// Decorative handle ring\nmodule handle() {\n    translate([-25, 0, 10])\n        rotate([0, 90, 0])\n        difference() {\n            // Handle ring\n            torus(8, 2, $fn=32);\n            \n            // Attachment gap\n            rotate([0, 90, 0])\n                cube([20, 10, 10], center=true);\n        }\n}\n\n// Decorative pattern stamps around the edge\nmodule decoration() {\n    // Groove around the edge\n    difference() {\n        scale([1, 0.7, 0.42]) \n            sphere(d = 62);\n        scale([0.95, 0.65, 0.43]) \n            sphere(d = 62);\n    }\n    \n    // Small decorative dots\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([25, 0, 12])\n                sphere(d = 2);\n    }\n}\n\n// Base ring for stability\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 4, d = 45);\n        \n        // Inner hollow\n        cylinder(h = 5, d = 35);\n    }\n}\n\n// Complete lamp assembly\ncolor(color_terracotta)\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Main components\n    lamp_body();\n    nozzle();\n    handle();\n    decoration();\n    \n    // Base\n    translate([0, 0, -2])\n        base_ring();\n}",
    "renders": true
  },
  {
    "historical_artifact": "initial",
    "openscad_code": "// Egyptian Canopic Jar of Hapi (Son of Horus)\n// Medium complexity realistic model - 3D printable without supports\n// Overall height ~80 mm, base ~40 mm diameter\n\n// Colors\n$fn = 128;\n\n// Main jar body\nmodule jar_body() {\n    difference() {\n        union() {\n            // Main cylindrical body\n            cylinder(h = 55, d = 40, center = false);\n            \n            // Slight bulge in middle for realistic shape\n            translate([0, 0, 27.5])\n                scale([1.05, 1.05, 1])\n                cylinder(h = 20, d = 40, center = true);\n            \n            // Base disk\n            translate([0, 0, -2])\n                cylinder(h = 4, d = 42, center = false);\n        }\n        \n        // Hollow interior - wall thickness 3mm\n        translate([0, 0, 2])\n            cylinder(h = 51, d = 34, center = false);\n    }\n}\n\n// Lid with baboon head (Hapi)\nmodule baboon_head_lid() {\n    union() {\n        // Lid base\n        translate([0, 0, 55])\n            cylinder(h = 8, d = 38, center = false);\n        \n        // Neck transition\n        translate([0, 0, 63])\n            cylinder(h = 5, d = 30, center = false);\n        \n        // Baboon head base\n        translate([0, 0, 68])\n            sphere(d = 28);\n        \n        // Muzzle\n        translate([0, -8, 68])\n            scale([0.8, 1.2, 0.9])\n            sphere(d = 18);\n        \n        // Nose\n        translate([0, -12, 70])\n            sphere(d = 6);\n        \n        // Eyes\n        for(x = [-6, 6]) {\n            translate([x, -2, 75])\n                sphere(d = 4);\n        }\n        \n        // Ears\n        for(x = [-12, 12]) {\n            translate([x, 0, 78])\n                rotate([0, 90, 0])\n                cylinder(h = 8, d1 = 6, d2 = 0, center = true);\n        }\n        \n        // Decorative collar\n        translate([0, 0, 63])\n            for(i = [0:11]) {\n                rotate([0, 0, i * 30])\n                translate([13, 0, 0])\n                cube([3, 3, 5], center = true);\n            }\n    }\n}\n\n// Hieroglyphic inscription bands\nmodule inscription_band(height) {\n    // Upper band\n    translate([0, 0, height])\n    difference() {\n        cylinder(h = 3, d = 39, center = false);\n        // Carved symbols (simplified)\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([19, 0, 1.5])\n            cube([3, 1, 2], center = true);\n        }\n    }\n}\n\n// Decorative lotus pattern on base\nmodule lotus_base() {\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([17, 0, 0.5])\n        scale([0.8, 1, 1])\n        cylinder(h = 3, d = 8, center = true);\n    }\n}\n\n// Main assembly\ncolor(\"burlywood\") {\n    union() {\n        jar_body();\n        \n        // Add two inscription bands\n        color(\"goldenrod\") {\n            inscription_band(25);\n            inscription_band(45);\n        }\n        \n        // Base decoration\n        color(\"darkgoldenrod\") {\n            lotus_base();\n        }\n        \n        // Lid with baboon head\n        color(\"tan\") {\n            baboon_head_lid();\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "border",
    "openscad_code": "// Roman Limes Border Stone (Limitanei Milestone)\n// Typical 2nd-3rd century AD frontier marker with Latin inscription\n// Found along Danube Limes frontier defenses\n\n// Overall dimensions for 3D printing\nstone_height = 70;\nbase_width = 35;\ntop_width = 30;\nthickness = 15;\n\n// Colors\nstone_color = [0.7, 0.65, 0.6];  // Weathered limestone\nbronze_color = [0.7, 0.5, 0.3];  // Bronze plaque\n\nmodule base_stone() {\n    difference() {\n        // Main tapered stone body\n        translate([0, 0, stone_height/2])\n            scale([1, 1, stone_height])\n                cylinder(h=1, r1=base_width/2, r2=top_width/2, $fn=6);\n        \n        // Carved inscription panel (front face)\n        translate([0, thickness/2 + 0.1, stone_height * 0.6])\n            cube([top_width * 0.8, 2, stone_height * 0.3], center=true);\n    }\n}\n\nmodule bronze_plaque() {\n    color(bronze_color) {\n        // Bronze information plaque\n        translate([0, thickness/2 + 1, stone_height * 0.6])\n            cube([top_width * 0.7, 0.5, stone_height * 0.25], center=true);\n        \n        // Mounting rivets (4 corners)\n        for(x = [-1, 1])\n            for(z = [-1, 1])\n                translate([x * top_width * 0.3, thickness/2 + 1.5, stone_height * 0.6 + z * stone_height * 0.1])\n                    cylinder(h=0.5, r=1, $fn=8);\n    }\n}\n\nmodule border_markings() {\n    // M P XXII (Miliarium Passuum 22 - 22nd mile marker)\n    translate([0, thickness/2 + 1.3, stone_height * 0.7])\n        scale([0.1, 0.1, 0.1])\n            linear_extrude(height=0.5)\n                text(\"M P XXII\", size=8, halign=\"center\", valign=\"center\", font=\"Liberation Sans:style=Bold\");\n    \n    // Legion mark (LEG XXI)\n    translate([0, thickness/2 + 1.3, stone_height * 0.55])\n        scale([0.08, 0.08, 0.08])\n            linear_extrude(height=0.5)\n                text(\"LEG XXI RAPAX\", size=6, halign=\"center\", valign=\"center\", font=\"Liberation Sans:style=Bold\");\n}\n\nmodule weathering_details() {\n    // Surface chips and erosion\n    for(i = [1:8]) {\n        rotate([0, 0, i * 45])\n            translate([base_width/2 * 0.8, 0, i * stone_height/8])\n                sphere(r=1 + i/4);\n    }\n    \n    // Moss/lichen patches\n    color([0.4, 0.5, 0.3]) {\n        for(i = [1:5]) {\n            rotate([0, 0, i * 72])\n                translate([base_width/2 * 0.7, thickness/4, i * stone_height/5])\n                    sphere(r=2);\n        }\n    }\n}\n\nmodule roman_border_stone() {\n    color(stone_color) {\n        difference() {\n            union() {\n                base_stone();\n                weathering_details();\n            }\n            \n            // Remove hidden geometry for cleaner print\n            translate([0, 0, -1])\n                cube([base_width * 2, base_width * 2, 2], center=true);\n        }\n    }\n    \n    bronze_plaque();\n    border_markings();\n}\n\n// Render the complete border marker\nroman_border_stone();",
    "renders": true
  },
  {
    "historical_artifact": "frontispiece",
    "openscad_code": "// Frontispiece from Renaissance Book Cover\n// Based on 16th century Italian binding designs\n// Overall dimensions: 80mm x 100mm x 12mm\n\n$fn = 64;\n\n// Main colors\ncolor_brown = [139/255, 69/255, 19/255];\ncolor_gold = [218/255, 165/255, 32/255];\ncolor_red = [178/255, 34/255, 34/255];\n\nmodule frontispiece() {\n    difference() {\n        // Main panel base\n        color(color_brown)\n        translate([0, 0, 0])\n        cube([80, 100, 3], center = true);\n        \n        // Central recessed panel\n        color(color_brown)\n        translate([0, 0, 1.4])\n        cube([60, 80, 2], center = true);\n    }\n    \n    // Raised border frame\n    color(color_brown)\n    difference() {\n        translate([0, 0, 1.5])\n        cube([82, 102, 3], center = true);\n        translate([0, 0, -0.5])\n        cube([76, 96, 6], center = true);\n    }\n    \n    // Corner bosses (4 corners)\n    module corner_boss(x, y) {\n        translate([x, y, 3])\n        difference() {\n            cylinder(h = 3, r = 6, center = true);\n            translate([0, 0, 1])\n            cylinder(h = 4, r = 4, center = true);\n        }\n    }\n    \n    color(color_gold)\n    corner_boss(35, 45);\n    corner_boss(-35, 45);\n    corner_boss(35, -45);\n    corner_boss(-35, -45);\n    \n    // Central coat of arms\n    color(color_red)\n    translate([0, 0, 2.5])\n    difference() {\n        cylinder(h = 2.5, r = 18, center = true);\n        translate([0, 0, 1.3])\n        cylinder(h = 3, r = 15, center = true);\n    }\n    \n    // Heraldic shield on coat of arms\n    color(color_gold)\n    translate([0, 0, 4])\n    scale([0.6, 0.8, 1])\n    cube([20, 25, 1], center = true);\n    \n    // Vertical decorative ribs\n    module rib(x) {\n        color(color_gold)\n        translate([x, 0, 2])\n        cube([2, 90, 1], center = true);\n    }\n    \n    for (i = [-1:1]) {\n        rib(i * 25);\n    }\n    \n    // Horizontal decorative bands\n    module band(y) {\n        color(color_gold)\n        translate([0, y, 2])\n        cube([70, 2, 1], center = true);\n    }\n    \n    band(30);\n    band(0);\n    band(-30);\n    \n    // Rosette stamps in border\n    module rosette(x, y) {\n        color(color_gold)\n        translate([x, y, 3])\n        difference() {\n            cylinder(h = 1, r = 4, center = true);\n            for (i = [0:5]) {\n                rotate([0, 0, i * 60])\n                translate([2.5, 0, 0])\n                scale([0.3, 1, 1])\n                cylinder(h = 1.2, r = 1, center = true);\n            }\n        }\n    }\n    \n    // Place rosettes along top and bottom borders\n    for (i = [-3:3]) {\n        if (abs(i) != 0) {\n            rosette(i * 10, 48);\n            rosette(i * 10, -48);\n        }\n    }\n    \n    // Side rosettes\n    rosette(38, 20);\n    rosette(38, -20);\n    rosette(-38, 20);\n    rosette(-38, -20);\n    \n    // Title inscription area\n    color([0.9, 0.9, 0.9])\n    translate([0, 35, 3.5])\n    cube([50, 8, 0.5], center = true);\n}\n\nfrontispiece();",
    "renders": true
  },
  {
    "historical_artifact": "titlepage",
    "openscad_code": "// Titlepage of the Gutenberg Bible (c. 1454-1455) - realistic 3D printable model\n// Overall dimensions: 85 x 60 x 12 mm\n\nmodule gothic_letter(letter) {\n    translate([0,0,1]) cube([8,10,1], center=true);\n}\n\nmodule decorative_flourish() {\n    color(\"goldenrod\") {\n        for(i=[0:3]) {\n            rotate([0,0,i*90]) \n                translate([35,35,0]) \n                    cylinder(h=1.5, r=3, $fn=16);\n            rotate([0,0,i*90]) \n                translate([30,40,0]) \n                    cylinder(h=1.5, r=2, $fn=8);\n        }\n    }\n}\n\nmodule illuminated_initial() {\n    color(\"royalblue\") {\n        translate([5,5,0]) cylinder(h=3, r=8, $fn=32);\n        translate([5,5,1.5]) difference() {\n            cylinder(h=1.5, r=7.5, $fn=32);\n            cylinder(h=2, r=5, $fn=32);\n        }\n    }\n    color(\"gold\") {\n        translate([5,5,2.5]) sphere(r=1.5);\n    }\n}\n\nmodule page_texture() {\n    for(x=[-40:5:40]) {\n        for(y=[-25:5:25]) {\n            if(x%10 && y%10) {\n                translate([x,y,0]) \n                    color(\"ivory\") cube([0.5,0.5,0.2], center=true);\n            }\n        }\n    }\n}\n\nmodule vertical_border() {\n    color(\"saddlebrown\") {\n        translate([42,0,0]) cube([3,60,2]);\n        translate([-42,0,0]) cube([3,60,2]);\n    }\n    for(i=[-27:3:27]) {\n        color(\"goldenrod\") {\n            translate([42,i,2]) cylinder(h=1, r=1.5, $fn=6);\n            translate([-42,i,2]) cylinder(h=1, r=1.5, $fn=6);\n        }\n    }\n}\n\nmodule horizontal_border() {\n    color(\"saddlebrown\") {\n        translate([0,28,0]) cube([80,3,2]);\n        translate([0,-28,0]) cube([80,3,2]);\n    }\n    for(i=[-37:3:37]) {\n        color(\"goldenrod\") {\n            translate([i,28,2]) cylinder(h=1, r=1.5, $fn=6);\n            translate([i,-28,2]) cylinder(h=1, r=1.5, $fn=6);\n        }\n    }\n}\n\nmodule central_text() {\n    color(\"black\") {\n        for(i=[0:6]) {\n            translate([-20,20-i*4,1]) cube([40,2,0.5]);\n        }\n        translate([-15,12,1]) cube([30,2,0.5]);\n        translate([-25,8,1]) cube([50,2,0.5]);\n        translate([-10,4,1]) cube([20,2,0.5]);\n        translate([-30,0,1]) cube([60,2,0.5]);\n    }\n}\n\nmodule rubrication() {\n    color(\"darkred\") {\n        translate([-35,15,1]) cube([12,1,0.5]);\n        translate([-35,11,1]) cube([12,1,0.5]);\n        translate([23,15,1]) cube([12,1,0.5]);\n        translate([23,11,1]) cube([12,1,0.5]);\n    }\n}\n\n// Main assembly\ndifference() {\n    // Base page\n    color(\"ivory\") cube([80,56,2], center=true);\n    \n    // Page indentation for realism\n    translate([0,0,-0.5]) cube([82,58,1], center=true);\n}\n\n// Page texture\npage_texture();\n\n// Borders\nvertical_border();\nhorizontal_border();\n\n// Corner decorations\ndecorative_flourish();\n\n// Illuminated initial\nilluminated_initial();\n\n// Main text block\ncentral_text();\n\n// Red rubrication marks\nrubrication();\n\n// Title section\ncolor(\"black\") {\n    translate([-25,22,1]) cube([50,3,0.5]);\n    translate([-30,25,1]) cube([60,2,0.5]);\n}\n\n// Marginal notes\ncolor(\"darkgray\") {\n    translate([-38,18,1]) cube([2,12,0.3]);\n    translate([36,18,1]) cube([2,12,0.3]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "colophon",
    "openscad_code": "// Colophon Historical Artifact - Babylonian Clay Tablet\n// Realistic style with cuneiform inscription impression and seal markings\n\n$fn = 50;\n\n// Overall dimensions\ntablet_width = 80;\ntablet_height = 60;\ntablet_thickness = 12;\n\n// Color definitions\nclay_color = \"#8B4513\";\ninscription_color = \"#654321\";\nseal_color = \"#CD853F\";\n\n// Main tablet body\nmodule tablet_body() {\n    color(clay_color) {\n        difference() {\n            // Main tablet\n            cube([tablet_width, tablet_height, tablet_thickness], center=true);\n            \n            // Rounded edges\n            translate([0, 0, tablet_thickness/2 - 1]) {\n                cylinder(h=tablet_thickness + 2, r=3, center=true);\n            }\n        }\n    }\n}\n\n// Cuneiform inscription pattern\nmodule cuneiform_inscription() {\n    color(inscription_color) {\n        // Front face inscription\n        translate([0, 0, tablet_thickness/2 + 0.1]) {\n            for(x = [-35:10:35]) {\n                for(y = [-25:8:25]) {\n                    if((x + y) % 20 == 0) {\n                        translate([x, y, 0]) {\n                            // Wedge-shaped cuneiform marks\n                            rotate([0, 0, 45]) {\n                                cube([2, 0.5, 0.3], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Back face inscription\n        translate([0, 0, -tablet_thickness/2 - 0.1]) {\n            rotate([180, 0, 0]) {\n                for(x = [-30:12:30]) {\n                    for(y = [-20:10:20]) {\n                        if((x + y) % 15 == 0) {\n                            translate([x, y, 0]) {\n                                // Horizontal wedge marks\n                                cube([3, 0.8, 0.2], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Cylinder seal impression\nmodule cylinder_seal() {\n    color(seal_color) {\n        // Main seal impression\n        translate([0, tablet_height/2 - 8, tablet_thickness/2 - 1]) {\n            difference() {\n                cylinder(h=2, r=8, center=false);\n                // Decorative pattern on seal\n                for(i = [0:30:330]) {\n                    rotate([0, 0, i]) {\n                        translate([5, 0, -0.5]) {\n                            cube([1, 0.5, 2.5], center=true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Secondary seal on back\n        translate([0, -tablet_height/2 + 10, -tablet_thickness/2 + 1]) {\n            difference() {\n                cylinder(h=2, r=6, center=false);\n                // Cross pattern\n                for(i = [0:90:270]) {\n                    rotate([0, 0, i]) {\n                        translate([3, 0, -0.5]) {\n                            cube([4, 1, 2.5], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Edge decorations\nmodule edge_decorations() {\n    color(clay_color) {\n        // Top edge rope pattern\n        translate([0, tablet_height/2, 0]) {\n            for(x = [-tablet_width/2 + 5:5:tablet_width/2 - 5]) {\n                translate([x, 0, 0]) {\n                    sphere(r=1, center=true);\n                }\n            }\n        }\n        \n        // Bottom edge rope pattern\n        translate([0, -tablet_height/2, 0]) {\n            for(x = [-tablet_width/2 + 7:5:tablet_width/2 - 7]) {\n                translate([x, 0, 0]) {\n                    sphere(r=1, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Maker's mark on side\nmodule makers_mark() {\n    color(inscription_color) {\n        translate([tablet_width/2 - 2, 0, 0]) {\n            rotate([0, 90, 0]) {\n                for(i = [-2:1:2]) {\n                    translate([0, i*2, 0]) {\n                        cube([0.5, 1, 0.5], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    tablet_body();\n    cuneiform_inscription();\n    cylinder_seal();\n    edge_decorations();\n    makers_mark();\n}",
    "renders": true
  },
  {
    "historical_artifact": "imprint",
    "openscad_code": "// Babylonian Cuneiform Clay Tablet Imprint (ca. 1800 BCE)\n// Realistic style, medium complexity, 3D-printable\n\n// Overall tablet dimensions (scaled for printing)\ntablet_w = 70;\ntablet_h = 50;\ntablet_d = 12;\nwall_t = 2.5;          // safe printable wall thickness\ncorner_r = 3;          // small fillet for printability\n\nmodule rounded_cube(w, h, d, r) {\n    // Create a cube with slightly rounded edges for printability\n    translate([r, r, 0])\n    minkowski() {\n        cube([w-2*r, h-2*r, d]);\n        sphere(r);\n    }\n}\n\nmodule cuneiform_lines() {\n    // Stylised wedge impressions running left-to-right\n    color(\"Brown\")\n    for(y = [-15:10:15]) {\n        translate([0, y, 0])\n        for(x = [-25:6:25]) {\n            translate([x, 0, -0.8])\n            rotate([0, 0, -30])\n            scale([1, 0.5, 1])\n            cylinder(h=1.5, d1=2.5, d2=1.5, $fn=8);\n        }\n    }\n}\n\nmodule numerical_tablet() {\n    // Main tablet body\n    difference() {\n        // Outer rounded tablet\n        rounded_cube(tablet_w, tablet_h, tablet_d, corner_r);\n        \n        // Hollow interior for imprinting\n        translate([wall_t, wall_t, -tablet_d])\n        cube([tablet_w-2*wall_t, tablet_h-2*wall_t, tablet_d]);\n    }\n}\n\nmodule seal_imprint() {\n    // Central circular seal impression\n    color(\"Sienna\")\n    difference() {\n        // Raised ring\n        translate([0, 0, tablet_d-1])\n        cylinder(h=1.5, r=10, $fn=32);\n        \n        // Central recess\n        translate([0, 0, tablet_d-1.8])\n        cylinder(h=2, r=8, $fn=32);\n    }\n    \n    // Eight-point star inside seal\n    color(\"Brown\")\n    for(a = [0:45:360-45]) {\n        rotate([0, 0, a])\n        translate([0, 4.5, tablet_d-1.8])\n        scale([0.8, 0.8, 1])\n        cube([1.5, 9, 1.5], center=true);\n    }\n}\n\nmodule edge_frame() {\n    // Decorative raised frame around upper edge\n    color(\"SaddleBrown\")\n    translate([0, 0, tablet_d-1])\n    difference() {\n        rounded_cube(tablet_w-4, tablet_h-4, 1.5, corner_r-1);\n        translate([1.5, 1.5, -1])\n        rounded_cube(tablet_w-7, tablet_h-7, 3, corner_r-2);\n    }\n}\n\n// Assembly\nunion() {\n    numerical_tablet();\n    edge_frame();\n    translate([0, 0, 0]) seal_imprint();\n    translate([0, 0, tablet_d-1.5]) cuneiform_lines();\n}",
    "renders": true
  },
  {
    "historical_artifact": "impressum",
    "openscad_code": "// Impressum (seal matrix) - Medieval bronze seal used for authenticating documents\n// Overall dimensions: 80mm diameter, 20mm thick\n\n// Main seal matrix body\nmodule seal_matrix() {\n    color(\"bronze\") difference() {\n        // Base cylinder with handle\n        union() {\n            // Main seal body\n            cylinder(h=15, d=80, $fn=100);\n            \n            // Handle for holding\n            translate([0, 0, 15]) cylinder(h=20, d1=20, d2=15, $fn=30);\n            \n            // Handle grip ring\n            translate([0, 0, 35]) cylinder(h=5, d=25, $fn=30);\n        }\n        \n        // Central inscription area recess\n        translate([0, 0, -1]) cylinder(h=7, d=50, $fn=100);\n        \n        // Handle hollow for weight reduction\n        translate([0, 0, 15]) cylinder(h=20, d=8, $fn=30);\n    }\n}\n\n// Raised inscription text (simplified Latin)\nmodule inscription() {\n    color(\"bronze\") {\n        // Central cross\n        translate([0, 0, 9.9]) cube([30, 4, 2], center=true);\n        translate([0, 0, 9.9]) cube([4, 30, 2], center=true);\n        \n        // Text around circumference\n        // \"SIGILLVM\" letters (simplified blocks)\n        for(i=[0:7]) {\n            rotate([0, 0, i*45]) translate([20, 0, 10]) cube([4, 3, 1.5]);\n        }\n        \n        // \"IOHANNIS\" letters\n        for(i=[0:7]) {\n            rotate([0, 0, i*45 + 22.5]) translate([20, 0, 10]) cube([4, 3, 1.5]);\n        }\n        \n        // Decorative dots between text\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5]) translate([28, 0, 10]) sphere(d=2, $fn=16);\n        }\n    }\n}\n\n// Ornate border decorations\nmodule border_decorations() {\n    color(\"bronze\") {\n        // Outer ring\n        difference() {\n            cylinder(h=3, d=78, $fn=100);\n            translate([0, 0, -0.1]) cylinder(h=3.2, d=74, $fn=100);\n        }\n        \n        // Decorative lobes around edge\n        for(i=[0:11]) {\n            rotate([0, 0, i*30]) translate([35, 0, 10]) scale([1, 0.6, 1]) \n                sphere(d=5, $fn=20);\n        }\n        \n        // Inner decorative ring\n        difference() {\n            cylinder(h=2, d=56, $fn=100);\n            translate([0, 0, -0.1]) cylinder(h=2.2, d=54, $fn=100);\n        }\n    }\n}\n\n// Small suspension loop on handle\nmodule suspension_loop() {\n    color(\"bronze\") translate([0, 12, 30]) rotate([90, 0, 0]) \n        difference() {\n            torus(major=5, minor=2, $fn=30);\n            translate([0, 0, -6]) cube([12, 12, 12], center=true);\n        }\n}\n\n// Helper module for torus\nmodule torus(major, minor, $fn=30) {\n    rotate_extrude() translate([major, 0]) circle(r=minor, $fn=$fn);\n}\n\n// Combine all parts\nunion() {\n    seal_matrix();\n    inscription();\n    border_decorations();\n    suspension_loop();\n}",
    "renders": true
  },
  {
    "historical_artifact": "device",
    "openscad_code": "// Medieval Astrolabe – OpenSCAD model\n// Overall size: ~80 mm diameter, printable in one piece\n\n// Base disc\nmodule base_disc() {\n    difference() {\n        // Main disc, 2.2 mm thick, 80 mm diameter\n        cylinder(h = 2.2, d = 80, $fn = 100);\n        // Central 4 mm hole for the alidade pivot\n        cylinder(h = 2.3, d = 4, $fn = 50);\n        // Ring eyelet at top for suspension cord\n        translate([0, 38, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d1 = 8, d2 = 8, $fn = 30);\n    }\n}\n\n// Rete (star map) – thin openwork plate\nmodule rete() {\n    linear_extrude(height = 1.2) {\n        difference() {\n            circle(d = 76, $fn = 100);\n            circle(d = 8);\n            // Simplified ecliptic ring and star pointers\n            for (a = [0 : 30 : 330])\n                translate([28 * cos(a), 28 * sin(a), 0])\n                    circle(d = 4);\n        }\n    }\n}\n\n// Tympan plate – latitude grid\nmodule tympan() {\n    difference() {\n        cylinder(h = 1.2, d = 76, $fn = 100);\n        cylinder(h = 1.3, d = 4, $fn = 50);\n        // Latitude arcs\n        for (r = [10 : 10 : 30])\n            offset(r = -r)\n                circle(d = 76 - 2 * r, $fn = 100);\n    }\n}\n\n// Alidade (sighting rule) – double vane\nmodule alidade() {\n    difference() {\n        // Main bar\n        cube([60, 6, 1.5], center = true);\n        // Small sighting holes\n        translate([25, 0, 0]) cylinder(h = 2, d = 2, $fn = 20);\n        translate([-25, 0, 0]) cylinder(h = 2, d = 2, $fn = 20);\n    }\n}\n\n// Decorative degree scale on rim\nmodule degree_scale() {\n    for (a = [0 : 5 : 355])\n        rotate([0, 0, a])\n            translate([38, 0, 1.1])\n                cube([2, 1, 0.8]);\n}\n\n// Assembly\ncolor(\"burlywood\") base_disc();\ntranslate([0, 0, 2.3]) color(\"goldenrod\") tympan();\ntranslate([0, 0, 3.7]) color(\"saddlebrown\") rete();\n// Pivot pin (print separately and insert)\ntranslate([0, 0, 5.2]) color(\"dimgray\") cylinder(h = 8, d = 3.9, $fn = 30);\n// Alidade on top, free to rotate\ntranslate([0, 0, 6.2]) color(\"saddlebrown\") alidade();",
    "renders": true
  },
  {
    "historical_artifact": "emblem",
    "openscad_code": "// Roman Legionary Eagle Aquila Emblem (historical standard top)\n// Overall height ~80 mm, wingspan ~70 mm\n\n// Main colors\ncolor(\"gold\") \ndifference() {\n    // Central pole socket\n    cylinder(h = 20, d = 12, $fn = 32);\n    \n    // Hollow out socket for pole\n    translate([0, 0, -1])\n        cylinder(h = 22, d = 10, $fn = 32);\n}\n\n// Eagle body\ncolor(\"gold\")\nunion() {\n    // Torso\n    translate([0, 0, 20])\n        scale([1, 0.8, 1.2])\n            sphere(d = 18, $fn = 32);\n    \n    // Head\n    translate([0, 0, 35])\n        sphere(d = 14, $fn = 32);\n    \n    // Beak\n    translate([0, 6, 38])\n        rotate([0, 90, 0])\n            cylinder(h = 8, d1 = 0, d2 = 6, $fn = 16);\n    \n    // Tail feathers\n    for(i = [-20:10:20]) {\n        translate([i/2, -8, 20])\n            rotate([i/2, 0, 0])\n                cube([2, 1, 15 - abs(i/4)]);\n    }\n}\n\n// Wings\nmodule wing() {\n    color(\"gold\")\n    difference() {\n        // Main wing shape\n        translate([0, 0, 0])\n            rotate([0, 0, 10])\n                cube([30, 3, 15]);\n        \n        // Feather cutouts\n        for(i = [1:3:12]) {\n            translate([i*2, -1, 2])\n                cube([1, 5, 1]);\n            translate([i*2, -1, 8])\n                cube([1, 5, 1]);\n        }\n    }\n}\n\n// Left wing\ntranslate([-8, -5, 28])\n    rotate([0, 0, -20])\n        wing();\n\n// Right wing (mirrored)\ntranslate([8, -5, 28])\n    mirror([1, 0, 0])\n        wing();\n\n// Laurel wreath base\ncolor(\"gold\")\ntranslate([0, 0, 20])\n    difference() {\n        cylinder(h = 3, d = 28, $fn = 64);\n        \n        // Laurel leaf pattern\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([11, 0, -1])\n                    cube([3, 2, 5]);\n        }\n    }\n\n// Legion inscription band\ncolor(\"gold\")\ntranslate([0, 0, 22.5])\n    difference() {\n        cylinder(h = 2, d = 22, $fn = 64);\n        \n        // Stylized \"LEGIO X\" inscription\n        translate([-8, 0, -1])\n            cube([16, 3, 4]);\n    }",
    "renders": true
  },
  {
    "historical_artifact": "sigil",
    "openscad_code": "// Roman Legionary Signum Standard (historical sigil)\n// 1st Century AD eagle & phalerae standard, ~85 mm tall\n\n$fn = 64; // Smooth curves for 3D printing\n\n// Main colors per Roman finds\ncolor(\"gold\") union() {\n\n    // Central wooden staff with metal ferrule\n    translate([0,0,0]) {\n        // Reinforcing iron ferrule at base\n        cylinder(h=12, d1=11, d2=11.5, center=true);\n        // Tapered ash-wood shaft\n        translate([0,0,6]) cylinder(h=45, d1=10, d2=8, center=true);\n    }\n\n    // Bronze cross-bar (transverse arms)\n    translate([0,0,28.5])\n        rotate([90,0,0])\n            cylinder(h=55, d=4, center=true);\n\n    // Decorative phalerae (medallions) on cross-bar\n    for(i=[-1,1]) {\n        translate([i*20,0,28.5])\n            sphere(d=12);\n        translate([i*10,0,28.5])\n            sphere(d=9);\n    }\n\n    // Central phalera at junction\n    translate([0,0,28.5])\n        sphere(d=14);\n\n    // Imperial eagle (Aquila) perched atop\n    translate([0,0,51]) {\n        // Eagle body\n        scale([1.1,0.75,1.4]) sphere(d=15);\n\n        // Wings spread - left\n        translate([-8,0,2]) rotate([0,15,-30])\n            scale([1,0.3,0.4]) sphere(d=18);\n\n        // Wings spread - right\n        translate([8,0,2]) rotate([0,-15,30])\n            scale([1,0.3,0.4]) sphere(d=18);\n\n        // Head/neck\n        translate([0,0,8])\n            cylinder(h=10, d1=5, d2=3, center=true);\n\n        // Beak (imperial eagle's characteristic curved beak)\n        translate([0,2,14]) rotate([0,-30,0])\n            cylinder(h=6, d1=3, d2=0, center=true);\n    }\n\n    // Reinforcement bands on shaft\n    color(\"silver\") {\n        translate([0,0,15]) cylinder(h=3, d=11, center=true);\n        translate([0,0,35]) cylinder(h=3, d=9, center=true);\n    }\n\n    // Wreath (corona civica) detail below cross-bar\n    color(\"bronze\")\n    translate([0,0,25]) rotate([90,0,0])\n        difference() {\n            cylinder(h=3, d=20, center=true);\n            cylinder(h=4, d=16, center=true);\n        }\n\n    // Inscription tablet (vexillum name plate)\n    color(\"silver\")\n    translate([0,-3,28.5]) rotate([0,15,0])\n        cube([25,2,8], center=true);\n}\n\n// Small rivets holding phalerae\ncolor(\"silver\")\nfor(pos=[[-20,0,28.5], [20,0,28.5], [-10,0,28.5], [10,0,28.5], [0,0,28.5]]) {\n    translate(pos) cylinder(h=2, d=2, center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "seal",
    "openscad_code": "// Medieval Signet Ring Seal (13th Century Style)\n// Overall dimensions: 80mm tall ring with 25mm diameter seal face\n\n// Bronze color for historical accuracy\ncolor([0.72, 0.45, 0.2]) {\n\n// Ring shank - split for 3D printing\nmodule ring_shank() {\n    difference() {\n        // Main ring body\n        rotate([0, 90, 0]) \n            cylinder(h=5, d1=25, d2=25, $fn=100);\n        \n        // Hollow center for finger\n        rotate([0, 90, 0]) \n            cylinder(h=7, d1=18, d2=18, $fn=100);\n        \n        // Split gap for printing\n        translate([0, -15, -3])\n            cube([30, 30, 6]);\n    }\n}\n\n// Decorative bezel collar\nmodule bezel_collar() {\n    difference() {\n        // Main collar\n        cylinder(h=8, d1=30, d2=28, $fn=6);\n        \n        // Hollow center\n        cylinder(h=9, d1=20, d2=20, $fn=100);\n    }\n}\n\n// Heraldic lion rampant seal face\nmodule seal_face() {\n    // Seal base\n    cylinder(h=3, d=25, $fn=100);\n    \n    // Heraldic shield shape\n    translate([0, 0, 3])\n    scale([1, 1.3, 1])\n    cylinder(h=1, d=20, $fn=3);\n    \n    // Lion rampant body (simplified)\n    translate([0, 5, 3.5])\n    rotate([0, 0, 45])\n    cube([3, 8, 1.5], center=true);\n    \n    // Lion head\n    translate([0, 2, 3.5])\n    sphere(d=4);\n    \n    // Lion tail\n    translate([0, 8, 3.5])\n    rotate([0, 0, -30])\n    cylinder(h=6, d1=2, d2=0.5, $fn=8);\n    \n    // Cross hatching background\n    for(i=[-10:2:10]) {\n        translate([i, 0, 3.2])\n        cube([0.5, 20, 0.2]);\n    }\n    for(i=[-10:2:10]) {\n        translate([0, i, 3.2])\n        cube([20, 0.5, 0.2]);\n    }\n}\n\n// Decorative ring patterns\nmodule ring_patterns() {\n    // Raised nubs pattern\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n        translate([11.5, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=1, d=2, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ring\n    ring_shank();\n    \n    // Bezel at top\n    translate([0, 12.5, 0])\n    bezel_collar();\n    \n    // Seal face\n    translate([0, 12.5, 8])\n    seal_face();\n    \n    // Patterns on ring\n    ring_patterns();\n}\n\n// Maker's mark inscription inside\ntranslate([0, -12.5, 1.5])\nrotate([0, 90, 0])\nlinear_extrude(height=0.5) {\n    text(\"SIGILLVM\", size=3, halign=\"center\", valign=\"center\");\n}\n\n}",
    "renders": true
  },
  {
    "historical_artifact": "matrix",
    "openscad_code": "// Roman Lead Matrix Seal - Historical Artifact\n// Used for authenticating documents and correspondence in ancient Rome\n\n$fn = 32;\n\n// Main dimensions\nmatrix_diameter = 45;\nmatrix_height = 12;\nhandle_height = 25;\nhandle_diameter = 12;\n\n// Colors\ncolor_lead = [0.4, 0.4, 0.45];\ncolor_patina = [0.3, 0.5, 0.4, 0.7];\n\n// Main module\nmodule roman_matrix_seal() {\n    // Main seal disk\n    color(color_lead)\n    union() {\n        // Base disk with slight taper\n        cylinder(h = matrix_height, d1 = matrix_diameter, d2 = matrix_diameter * 0.95);\n        \n        // Handle\n        translate([0, 0, matrix_height])\n        cylinder(h = handle_height, d = handle_diameter);\n        \n        // Handle grip ring\n        translate([0, 0, matrix_height + handle_height - 3])\n        cylinder(h = 6, d = handle_diameter + 4);\n        \n        // Decorative rings on handle\n        for(i = [1:3]) {\n            translate([0, 0, matrix_height + i * 6])\n            cylinder(h = 1, d = handle_diameter + 2);\n        }\n    }\n    \n    // Intaglio design on bottom - SPQR inscription\n    translate([0, 0, -0.2])\n    difference() {\n        // Base of seal bottom\n        cylinder(h = 2, d = matrix_diameter * 0.9);\n        \n        // SPQR inscription (Senatus Populusque Romanus)\n        // S\n        translate([-12, 5, -1])\n        cube([3, 10, 2]);\n        translate([-15, 5, -1])\n        cube([6, 3, 2]);\n        translate([-15, 12, -1])\n        cube([6, 3, 2]);\n        \n        // P\n        translate([-5, 5, -1])\n        cube([3, 10, 2]);\n        translate([-5, 12, -1])\n        cube([6, 3, 2]);\n        \n        // Q\n        circle(d = 12);\n        translate([4, -4, -1])\n        cube([3, 8, 2]);\n        \n        // R\n        translate([10, 5, -1])\n        cube([3, 10, 2]);\n        translate([10, 12, -1])\n        cube([6, 3, 2]);\n        translate([10, 8, -1])\n        cube([6, 5, 2]);\n        translate([13, 5, -1])\n        cube([3, 5, 2]);\n    }\n    \n    // Decorative border pattern\n    translate([0, 0, matrix_height - 2])\n    difference() {\n        cylinder(h = 2, d = matrix_diameter + 2);\n        \n        // Repeating dot pattern\n        for(i = [0:35]) {\n            rotate([0, 0, i * 10])\n            translate([matrix_diameter/2 - 1, 0, -1])\n            cylinder(h = 4, d = 3);\n        }\n    }\n    \n    // Age patina effect\n    color(color_patina)\n    translate([0, 0, -0.1])\n    cylinder(h = matrix_height + handle_height + 10, d = matrix_diameter + 2);\n}\n\n// Create the matrix seal\nroman_matrix_seal();",
    "renders": true
  },
  {
    "historical_artifact": "bull",
    "openscad_code": "// Bronze bull figurine inspired by Minoan art (ca. 1600 BCE)\n// Overall size ~80 mm long, 60 mm high, 40 mm wide\n\n$fn = 48;  // Smooth curves for printing\n\n// Main body\ncolor([0.4,0.2,0.05])\nunion(){\n    // Torso – slightly elongated for the Minoan style\n    hull(){\n        translate([-15,-15,0]) sphere(12);\n        translate([25,-15,0]) sphere(12);\n        translate([-15,15,0]) sphere(12);\n        translate([25,15,0]) sphere(12);\n    }\n\n    // Neck\n    translate([25,0,10]) rotate([0,-20,0])\n        cylinder(h=20, r1=10, r2=6, center=true);\n\n    // Head\n    translate([38,-1,23]) cube([22,18,18], center=true);\n\n    // Hump on shoulders (typical of Minoan bulls)\n    translate([12,0,18]) sphere(10);\n\n    // Tail\n    translate([-28,0,12]) rotate([0,20,0])\n        cylinder(h=20, r1=3, r2=2);\n\n    // Legs – thick for stability and printing without support\n    module leg(dx){\n        translate([dx,-12,0]) rotate([0,15,0])\n            cylinder(h=22, r1=4, r2=5, center=false);\n    }\n    leg(15); leg(-5);\n    mirror([0,1,0]){\n        leg(15); leg(-5);\n    }\n\n    // Horns – curved forward in the Minoan tradition\n    module horn(tx){\n        color([0.85,0.7,0.4])\n        translate([tx,8,30]) rotate([0,0,30]) rotate([0,90,0])\n            cylinder(h=12, r1=2, r2=4);\n    }\n    horn(45); horn(45) mirror([0,1,0]);\n\n    // Eyes\n    color(\"black\")\n    translate([46,-6,27]) sphere(2);\n    translate([46,6,27]) sphere(2);\n\n    // Decorative rosette on the forehead\n    color([0.6,0.3,0.1])\n    translate([46,0,33]) cylinder(h=1, r=4, $fn=8);\n    for(a=[0:60:300])\n        rotate([0,0,a])\n            translate([46,3.5,33.5]) cube([1,3,0.5], center=true);\n}\n\n// Base pedestal with Minoan spiral pattern\ncolor([0.5,0.5,0.5])\ndifference(){\n    cube([80,50,4], center=true);\n    for(x=[-25:10:25])\n        for(y=[-15:10:15])\n            translate([x,y,2.1]) rotate([0,0,45]) cylinder(h=2, r=3, $fn=4);\n}",
    "renders": true
  },
  {
    "historical_artifact": "supplicatio",
    "openscad_code": "// Supplicatio Roman tablet - a votive offering plaque\n// Dimensions: 80mm x 60mm x 8mm (tablet), 10mm base\n\n// Color definitions\n$fn = 50;\n\n// Main tablet module\nmodule supplicatio_tablet() {\n    // Base tablet body\n    color(\"burlywood\")\n    difference() {\n        // Main tablet shape\n        cube([80, 60, 8], center = true);\n        \n        // Recessed text area\n        translate([0, 0, 3.5])\n        cube([70, 50, 2], center = true);\n    }\n    \n    // Raised border frame\n    color(\"goldenrod\")\n    difference() {\n        // Outer frame\n        cube([82, 62, 2], center = true);\n        // Inner cutout\n        translate([0, 0, -0.1])\n        cube([78, 58, 3], center = true);\n    }\n}\n\n// Roman nail heads for mounting\nmodule roman_nail(x, y) {\n    color(\"gray\")\n    translate([x, y, 5])\n    union() {\n        // Nail head\n        cylinder(h = 2, r = 3, center = true);\n        // Decorative rosette pattern\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([2, 0, 0])\n            cube([1, 0.5, 0.5], center = true);\n        }\n    }\n}\n\n// Latin inscription text (represented as raised dots)\nmodule inscription_text() {\n    color(\"darkgoldenrod\")\n    // First line: \"DIS MANIBVS\"\n    for(i = [0:9]) {\n        translate([-30 + i * 6, 15, 4.5])\n        sphere(r = 0.8);\n    }\n    \n    // Second line: \"T FLAVIVS\"\n    for(i = [0:7]) {\n        translate([-25 + i * 6, 5, 4.5])\n        sphere(r = 0.8);\n    }\n    \n    // Third line: \"FELICITER\"\n    for(i = [0:8]) {\n        translate([-27 + i * 6, -5, 4.5])\n        sphere(r = 0.8);\n    }\n}\n\n// Decorative laurel wreath\nmodule laurel_wreath() {\n    color(\"darkolivegreen\")\n    translate([0, 25, 4.5])\n    union() {\n        // Wreath base\n        rotate_extrude(angle = 360)\n        translate([15, 0, 0])\n        circle(r = 2);\n        \n        // Laurel leaves\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([15, 0, 0])\n            rotate([45, 0, 0])\n            scale([1, 2, 0.3])\n            sphere(r = 3);\n        }\n    }\n}\n\n// Base stand\nmodule base_stand() {\n    color(\"saddlebrown\")\n    translate([0, 0, -8])\n    difference() {\n        // Main base\n        cube([90, 70, 4], center = true);\n        \n        // Tapered sides\n        translate([0, 0, -0.1])\n        cube([85, 65, 5], center = true);\n    }\n}\n\n// Assemble the complete artifact\nunion() {\n    base_stand();\n    translate([0, 0, -4])\n    supplicatio_tablet();\n    \n    // Mounting nails at corners\n    roman_nail(-35, 25);\n    roman_nail(35, 25);\n    roman_nail(-35, -25);\n    roman_nail(35, -25);\n    \n    // Decorative elements\n    inscription_text();\n    laurel_wreath();\n}",
    "renders": true
  },
  {
    "historical_artifact": "petition",
    "openscad_code": "// Petition tablet - Babylonian clay tablet with cuneiform petition\n// Dimensions: 80mm x 50mm x 12mm (fits within 3D printer limits)\n\n// Main tablet body\ncolor(\"burlywood\")\ndifference() {\n    // Base tablet shape\n    translate([0, 0, 0]) {\n        cube([80, 50, 12], center = true);\n    }\n    \n    // Rounded edges by subtracting cylinders\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([i * 40, j * 25, 0])\n                cylinder(h = 15, r = 6, center = true);\n        }\n    }\n}\n\n// Clay tablet seal impression (administrative mark)\ncolor(\"saddlebrown\")\ntranslate([0, 0, 6.2])\n    cylinder(h = 0.5, r = 8, $fn = 6);\n\n// Cuneiform inscription rows\nmodule cuneiform_row(y_pos, char_count) {\n    for(i = [0:char_count-1]) {\n        translate([-30 + i * 5, y_pos, 6.1])\n            rotate([0, 0, 45])\n            cube([2, 1.5, 0.5], center = true);\n    }\n}\n\n// Petition text lines (simplified cuneiform marks)\ncolor(\"saddlebrown\") {\n    cuneiform_row(15, 12);\n    cuneiform_row(10, 15);\n    cuneiform_row(5, 11);\n    cuneiform_row(0, 13);\n    cuneiform_row(-5, 14);\n    cuneiform_row(-10, 10);\n    cuneiform_row(-15, 12);\n}\n\n// Witness signature marks on edge\nmodule witness_mark() {\n    color(\"saddlebrown\")\n    translate([0, 0, 6.1])\n        rotate([0, 0, 30])\n        cube([1.5, 1, 0.5], center = true);\n}\n\n// Left edge witness marks\nfor(i = [0:3]) {\n    translate([-40, -20 + i * 15, 0])\n        witness_mark();\n}\n\n// Right edge witness marks\nfor(i = [0:3]) {\n    translate([40, -20 + i * 15, 0])\n        mirror([1, 0, 0])\n            witness_mark();\n}\n\n// Broken corner (historical damage)\ncolor(\"burlywood\")\ntranslate([38, -23, -5])\n    difference() {\n        cube([8, 8, 8]);\n        translate([4, 4, 4])\n            sphere(r = 6);\n    }\n\n// Firing marks on back\ncolor(\"saddlebrown\")\nfor(i = [0:2]) {\n    for(j = [0:1]) {\n        translate([-25 + i * 25, -15 + j * 30, -6.1])\n            cylinder(h = 0.3, r = 3);\n    }\n}\n\n// String hole for hanging/storage\ncolor(\"burlywood\")\ntranslate([0, 25, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 50, r = 2);\n\n// Administrative stamp impression\ncolor(\"saddlebrown\")\ntranslate([20, -15, 6.2])\n    difference() {\n        cylinder(h = 0.5, r = 4, $fn = 8);\n        cylinder(h = 0.6, r = 2, $fn = 8);\n    }",
    "renders": true
  },
  {
    "historical_artifact": "appeal",
    "openscad_code": "// OpenSCAD model: Roman wax-tablet writing tablet (tabula)\n// Historical appeal tablet with stylus holder\n// Overall size ~90 mm x 60 mm x 15 mm\n\n// Basic parameters\ntabletW = 85;\ntabletH = 55;\ntabletD = 8;\nhingeR = 2.5;\nstylusL = 75;\nstylusR = 3;\ngap = 0.4;\n\n// Colors\ncolorWood = [139/255, 69/255, 19/255];\ncolorWax = [90/255, 60/255, 40/255];\n\n// Main tablet body with wax recess\nmodule tabletBody() {\n    // Outer wooden shell\n    color(colorWood)\n    difference() {\n        // Main block\n        cube([tabletW, tabletH, tabletD], center=true);\n\n        // Recess for wax on front\n        translate([0, 0, tabletD/2 - 1])\n            cube([tabletW - 6, tabletH - 6, 2.5], center=true);\n\n        // Groove for stylus\n        translate([tabletW/2 - 8, 0, tabletD/2])\n            rotate([90, 0, 0])\n                cylinder(h=tabletH - 10, r=stylusR + 1, center=true);\n    }\n\n    // Wax layer\n    color(colorWax)\n    translate([0, 0, tabletD/2 - 1.2])\n        cube([tabletW - 7, tabletH - 7, 1], center=true);\n}\n\n// Stylus\nmodule stylus() {\n    // Main shaft\n    color([0.8, 0.8, 0.8])\n    union() {\n        cylinder(h=stylusL, r=stylusR, center=true);\n        // Pointed end\n        translate([stylusL/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=stylusR*2, r1=stylusR, r2=0, center=true);\n        // Flat end for erasing\n        translate([-stylusL/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=stylusR*2, r1=stylusR, r2=stylusR*1.5, center=true);\n    }\n}\n\n// Decorative metal corners\nmodule metalCorner() {\n    color([0.7, 0.7, 0.7])\n    difference() {\n        cube([8, 8, 2], center=true);\n        cylinder(h=3, r=1.5, center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, tabletD/2])\n    tabletBody();\n\n// Place corners\nfor(x = [-1, 1]) {\n    for(y = [-1, 1]) {\n        translate([x * (tabletW/2 - 4), y * (tabletH/2 - 4), tabletD + 0.5])\n            metalCorner();\n    }\n}\n\n// Stylus in groove\ntranslate([tabletW/2 - 8, 0, tabletD/2 + 1])\n    rotate([90, 0, 0])\n        stylus();",
    "renders": true
  },
  {
    "historical_artifact": "memorial",
    "openscad_code": "// Roman Legionary Standard Memorial - Aquila Standard\n// A tribute to the eagle standards carried by Roman legions\n// Historically accurate proportions and details\n// Designed for 3D printing with 2mm walls and no overhangs\n\n// Main colors\n$fn = 32;\n\n// Base dimensions\nbase_width = 40;\nbase_depth = 40;\nbase_height = 8;\n\n// Standard pole dimensions\npole_diameter = 6;\npole_height = 80;\n\n// Eagle dimensions\neagle_height = 25;\neagle_wingspan = 35;\neagle_body_length = 20;\n\n// Wreath dimensions\nwreath_radius = 12;\nwreath_thickness = 3;\n\nmodule memorial_base() {\n    color([0.85, 0.85, 0.85])  // Stone gray\n    translate([0, 0, base_height/2])\n    cube([base_width, base_depth, base_height], center=true);\n    \n    // Base inscription\n    color([0.5, 0.5, 0.5])\n    translate([0, -base_depth/2 + 2, base_height - 0.5])\n    cube([30, 2, 0.5], center=true);\n}\n\nmodule standard_pole() {\n    color([0.7, 0.6, 0.2])  // Bronze color\n    translate([0, 0, pole_height/2 + base_height])\n    cylinder(d=pole_diameter, h=pole_height);\n    \n    // Pole decorations\n    for(i = [1:2:7]) {\n        color([0.8, 0.7, 0.3])\n        translate([0, 0, base_height + i * 10])\n        cylinder(d=pole_diameter + 2, h=1);\n    }\n}\n\nmodule eagle_standard() {\n    // Eagle body\n    color([0.8, 0.7, 0.3])  // Gold\n    translate([0, 0, base_height + pole_height + eagle_height/2 - 5])\n    scale([1.2, 1, 1.5])\n    sphere(d=eagle_body_length);\n    \n    // Eagle head\n    translate([eagle_body_length/2 - 2, 0, base_height + pole_height + eagle_height - 5])\n    sphere(d=8);\n    \n    // Eagle beak\n    color([0.7, 0.6, 0.2])\n    translate([eagle_body_length/2 + 4, 0, base_height + pole_height + eagle_height - 5])\n    rotate([0, 90, 0])\n    cylinder(d1=3, d2=0, h=5);\n    \n    // Eagle wings\n    for(side = [-1, 1]) {\n        color([0.8, 0.7, 0.3])\n        translate([0, side * eagle_wingspan/4, base_height + pole_height + eagle_height/2])\n        rotate([0, 30, 0])\n        scale([0.3, 1, 0.1])\n        sphere(d=eagle_wingspan/2);\n    }\n}\n\nmodule laurel_wreath() {\n    color([0.7, 0.6, 0.2])  // Bronze\n    translate([0, 0, base_height + pole_height + 5])\n    rotate_extrude(angle=360, $fn=32)\n    translate([wreath_radius, 0, 0])\n    circle(r=wreath_thickness/2);\n    \n    // Laurel leaves\n    for(i = [0:15:345]) {\n        color([0.6, 0.5, 0.1])\n        rotate([0, 0, i])\n        translate([wreath_radius, 0, base_height + pole_height + 5])\n        rotate([90, 0, 0])\n        scale([0.5, 2, 0.2])\n        sphere(d=3);\n    }\n}\n\nmodule inscription_plaque() {\n    color([0.6, 0.6, 0.6])\n    translate([0, -base_depth/2 + 10, base_height + 2])\n    cube([35, 15, 1], center=true);\n    \n    // Inscription text representation\n    for(i = [0:2]) {\n        color([0.3, 0.3, 0.3])\n        translate([-12 + i * 8, -base_depth/2 + 10, base_height + 3])\n        cube([6, 1, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    memorial_base();\n    standard_pole();\n    eagle_standard();\n    laurel_wreath();\n    inscription_plaque();\n}",
    "renders": true
  },
  {
    "historical_artifact": "relation",
    "openscad_code": "// Rosetta Stone - Key to understanding hieroglyphs (196 BCE)\n// Historical replica with accurate proportions and inscriptions\n\n// Color definitions\nstone_color = [0.75, 0.73, 0.68];\nshadow_color = [0.5, 0.48, 0.45];\n\n// Main dimensions (real stone: 1144mm x 723mm x 279mm)\n// Scaled to 100mm height for 3D printing\nscale_factor = 100 / 1144;\nwidth = 723 * scale_factor;\nheight = 1144 * scale_factor;\nthickness = 279 * scale_factor;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, radius]) sphere(r = radius);\n        translate([size.x - radius, radius, radius]) sphere(r = radius);\n        translate([radius, size.y - radius, radius]) sphere(r = radius);\n        translate([size.x - radius, size.y - radius, radius]) sphere(r = radius);\n        translate([radius, radius, size.z - radius]) sphere(r = radius);\n        translate([size.x - radius, radius, size.z - radius]) sphere(r = radius);\n        translate([radius, size.y - radius, size.z - radius]) sphere(r = radius);\n        translate([size.x - radius, size.y - radius, size.z - radius]) sphere(r = radius);\n    }\n}\n\nmodule hieroglyph_line(y_pos, line_length) {\n    // Simulate hieroglyph text with small cubes\n    for (i = [0:3:line_length]) {\n        translate([i, y_pos, -thickness/2 + 1])\n            cube([1.5, 2, 0.5]);\n    }\n}\n\nmodule demotic_line(y_pos, line_length) {\n    // Simulate demotic script with elongated rectangles\n    for (i = [0:2:line_length]) {\n        translate([i, y_pos, -thickness/2 + 0.5])\n            cube([2, 1.5, 0.3]);\n    }\n}\n\nmodule greek_line(y_pos, line_length) {\n    // Simulate Greek text with small cylinders\n    for (i = [0:3:line_length]) {\n        translate([i, y_pos, -thickness/2 + 0.8])\n            cylinder(h = 0.8, r = 0.8);\n    }\n}\n\n// Main stone body\ncolor(stone_color) {\n    difference() {\n        // Outer rounded stone\n        rounded_cube([width, height, thickness], 3);\n        \n        // Hollow center for 3D printing\n        translate([wall_thick, wall_thick, wall_thick])\n            rounded_cube([width - 2*wall_thick, height - 2*wall_thick, thickness - wall_thick], 2);\n    }\n}\n\n// Top broken edge simulation\ncolor(shadow_color) {\n    translate([width*0.7, height*0.98, 0])\n        rotate([0, 15, 0])\n        cube([width*0.3, thickness*0.5, thickness]);\n}\n\n// Hieroglyphic section (top 1/3)\nfor (j = [height*0.65:6:height*0.95]) {\n    hieroglyph_line(j, width*0.9);\n}\n\n// Demotic section (middle 1/3)\nfor (j = [height*0.35:4:height*0.6]) {\n    demotic_line(j, width*0.85);\n}\n\n// Greek section (bottom 1/3)\nfor (j = [height*0.05:5:height*0.3]) {\n    greek_line(j, width*0.8);\n}\n\n// Corner damage details\ncolor(shadow_color) {\n    translate([width - 8, 5, thickness - 3])\n        sphere(r = 6);\n    \n    translate([5, height - 8, thickness - 3])\n        sphere(r = 5);\n}\n\n// Surface texture for ancient stone\nmodule surface_pit(x, y, size) {\n    translate([x, y, -thickness/2 + 0.1])\n        sphere(r = size);\n}\n\n// Add random surface pits for realism\nfor (i = [0:15]) {\n    color(shadow_color) {\n        surface_pit(rands(5, width-5, 1)[0], \n                   rands(5, height-5, 1)[0], \n                   rands(0.5, 1.5, 1)[0]);\n    }\n}\n\n// Small chips along edges\nmodule edge_chip(pos, rot) {\n    translate(pos)\n        rotate(rot)\n        cube([3, 2, 1]);\n}\n\ncolor(shadow_color) {\n    edge_chip([width*0.2, 0, thickness*0.3], [0, 0, 30]);\n    edge_chip([width*0.8, height, thickness*0.7], [0, 0, -20]);\n    edge_chip([0, height*0.4, thickness*0.5], [0, 0, 45]);\n}",
    "renders": true
  },
  {
    "historical_artifact": "report",
    "openscad_code": "// Mesopotamian Cuneiform Clay Tablet (ca. 2100 BCE)\n// Realistic medium-complexity 3D printable historical artifact\n\n// Overall dimensions (mm)\ntablet_w = 65;\ntablet_h = 45;\ntablet_d = 18;\nedge_chamfer = 2;\n\n// Cuneiform wedge parameters\nwedge_w = 2.2;\nwedge_h = 1.8;\nwedge_d = 1.2;\nrows = 6;\ncols_per_row = [10,12,9,11,8,10];\n\nmodule wedge() {\n    // Stylized triangular cuneiform impression\n    difference() {\n        cube([wedge_w, wedge_d, wedge_h], center=true);\n        translate([0,0,0.3])\n            cube([wedge_w*0.6, wedge_d*1.1, wedge_h], center=true);\n    }\n}\n\nmodule line_of_wedges(count, y_offset) {\n    for (i = [0:count-1]) {\n        x_pos = -tablet_w/2.4 + i*(tablet_w*0.8/count);\n        translate([x_pos, y_offset, -tablet_d/2 + wedge_h/2 + 0.2])\n            wedge();\n    }\n}\n\nmodule cuneiform_text() {\n    for (r = [0:rows-1]) {\n        y_pos = -tablet_h/2.5 + r*(tablet_h*0.8/rows);\n        line_of_wedges(cols_per_row[r], y_pos);\n    }\n}\n\nmodule tablet_body() {\n    // Main tablet with chamfered edges\n    difference() {\n        // Base tablet\n        translate([0,0,0])\n            cube([tablet_w, tablet_h, tablet_d], center=true);\n        \n        // Top chamfer\n        translate([0,0,tablet_d/2-edge_chamfer])\n            cube([tablet_w+2, tablet_h+2, edge_chamfer*2], center=true);\n        \n        // Bottom chamfer\n        translate([0,0,-tablet_d/2+edge_chamfer])\n            cube([tablet_w+2, tablet_h+2, edge_chamfer*2], center=true);\n    }\n}\n\nmodule edge_cracks() {\n    // Random weathering cracks for realism\n    crack_positions = [\n        [-25, 18, 0],\n        [20, -15, 0],\n        [-10, -20, 0],\n        [30, 10, 0]\n    ];\n    \n    for (pos = crack_positions) {\n        translate(pos)\n            rotate([0,0,rands(0,360,1)[0]])\n            scale([1, rands(0.5,1.5,1)[0], 1])\n                cylinder(h=tablet_d*0.8, r1=0.8, r2=0.2, center=true);\n    }\n}\n\nmodule seal_impression() {\n    // Cylinder seal roll mark on edge\n    translate([tablet_w/2-2, 0, 0])\n        rotate([90,0,0])\n            cylinder(h=3, r=8, center=true);\n    \n    // Seal pattern dots\n    for (i = [0:7]) {\n        angle = i*45;\n        translate([tablet_w/2-2, 0, 0])\n            rotate([90,0,angle])\n                translate([0,6,0])\n                    sphere(d=1.5);\n    }\n}\n\n// Main assembly\ncolor(\"burlywood\")\nunion() {\n    tablet_body();\n    \n    // Cuneiform writing on front face\n    translate([0,0,tablet_d/2+0.01])\n        cuneiform_text();\n    \n    // Additional text on back\n    translate([0,0,-tablet_d/2-0.01])\n        rotate([180,0,0])\n            cuneiform_text();\n    \n    // Weathering details\n    edge_cracks();\n    \n    // Seal impression\n    seal_impression();\n}",
    "renders": true
  },
  {
    "historical_artifact": "statement",
    "openscad_code": "// Rosetta Stone Replica - Historical Artifact\n// Dimensions: 70mm x 50mm x 20mm\n\n$fn = 50;\n\n// Main stone slab\nmodule rosetta_stone() {\n    color(\"darkslategray\")\n    difference() {\n        // Main body with rounded edges\n        union() {\n            translate([-35, -25, 0])\n                cube([70, 50, 20], center = false);\n            \n            // Rounded top edge\n            translate([0, 25, 10])\n                rotate([0, 90, 0])\n                    cylinder(h = 70, r = 10);\n            \n            // Rounded bottom edge\n            translate([0, -25, 10])\n                rotate([0, 90, 0])\n                    cylinder(h = 70, r = 10);\n        }\n        \n        // Rounded corners\n        translate([35, 25, 10])\n            sphere(r = 10);\n        translate([-35, 25, 10])\n            sphere(r = 10);\n        translate([35, -25, 10])\n            sphere(r = 10);\n        translate([-35, -25, 10])\n            sphere(r = 10);\n    }\n}\n\n// Carved inscription bands\nmodule inscription_band(x_pos, width) {\n    color(\"dimgray\")\n    translate([x_pos, -25, 1])\n        cube([width, 50, 0.5]);\n}\n\n// Hieroglyphic symbols (simplified)\nmodule hieroglyph(x, y) {\n    color(\"black\")\n    translate([x, y, 2])\n        rotate([0, 0, 45])\n            cube([2, 2, 0.5], center = true);\n}\n\n// Greek text symbols (simplified)\nmodule greek_text(x, y) {\n    color(\"black\")\n    translate([x, y, 2])\n        cylinder(h = 0.3, r = 1);\n}\n\n// Demotic text symbols (simplified)\nmodule demotic_text(x, y) {\n    color(\"black\")\n    translate([x, y, 2])\n        cube([3, 1, 0.3], center = true);\n}\n\n// Main assembly\nunion() {\n    // Stone base\n    rosetta_stone();\n    \n    // Three distinct text bands\n    inscription_band(-30, 20);  // Hieroglyphic section\n    inscription_band(-10, 20);  // Demotic section\n    inscription_band(10, 20);   // Greek section\n    \n    // Hieroglyphic details (top section)\n    for (i = [-25:5:-15]) {\n        for (j = [-20:5:20]) {\n            if ((i + j) % 2 == 0)\n                hieroglyph(i, j);\n        }\n    }\n    \n    // Demotic details (middle section)\n    for (i = [-5:3:5]) {\n        for (j = [-20:5:20]) {\n            if (j % 3 == 0)\n                demotic_text(i, j);\n        }\n    }\n    \n    // Greek details (bottom section)\n    for (i = [15:3:25]) {\n        for (j = [-20:5:20]) {\n            if ((i + j) % 2 == 1)\n                greek_text(i, j);\n        }\n    }\n    \n    // Weathering cracks (realistic detail)\n    color(\"gray\")\n    translate([0, 0, 19])\n        union() {\n            // Main diagonal crack\n            translate([10, -15, 0])\n                rotate([0, 0, 30])\n                    cube([25, 0.5, 1]);\n            \n            // Secondary cracks\n            translate([-10, 5, 0])\n                rotate([0, 0, -20])\n                    cube([20, 0.3, 1]);\n                    \n            translate([-20, -10, 0])\n                rotate([0, 0, 45])\n                    cube([15, 0.3, 1]);\n        }\n}\n\n// Scale to 3D printing size\nscale([1, 1, 1])",
    "renders": true
  },
  {
    "historical_artifact": "deposition",
    "openscad_code": "// Roman bronze wax-tablet deposition stylus (Tabula ansata stylus)\n// Typical length 150-180 mm, here scaled to 70 mm for printing\n// Used to inscribe wax tablets in legal depositions and contracts\n\nmodule stylus_body() {\n    // Main shaft - octagonal cross-section for better grip\n    linear_extrude(height=50, center=true, convexity=10)\n        offset(r=2)\n            difference() {\n                circle(d=8, $fn=8);\n                circle(d=6, $fn=8);\n            }\n}\n\nmodule pointed_end() {\n    // Sharp writing point\n    translate([0, 0, -25])\n        cylinder(h=10, r1=4, r2=0.5, $fn=8);\n}\n\nmodule flat_spatula() {\n    // Flat end for erasing wax\n    translate([0, 0, 25])\n        cube([12, 3, 3], center=true);\n}\n\nmodule decorative_ring() {\n    // Bronze ring decoration near center\n    for(i=[-1, 1]) {\n        translate([0, 0, i*15])\n            rotate([90, 0, 0])\n                cylinder(h=2, r1=5, r2=5, $fn=32);\n    }\n}\n\nmodule inscription_band() {\n    // Faint inscription band with maker's mark\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=1.5, r1=4.2, r2=4.2, $fn=64);\n                // Tiny dots for inscription texture\n                for(i=[0:15]) {\n                    rotate([0, 0, i*22.5])\n                        translate([3.8, 0, 0])\n                            sphere(d=0.3, $fn=8);\n                }\n            }\n}\n\nmodule grip_texture() {\n    // Diagonal grip lines for better handling\n    for(i=[-20:5:20]) {\n        rotate([0, 90, 45])\n            translate([i, 0, 0])\n                cube([1, 2, 8], center=true);\n    }\n}\n\n// Main assembly\ncolor(\"bronze\") {\n    union() {\n        stylus_body();\n        pointed_end();\n        flat_spatula();\n        decorative_ring();\n        inscription_band();\n        grip_texture();\n    }\n}\n\n// Small wear marks from use\ncolor(\"darkgreen\") {\n    for(pos = [[2, 1, 10], [-1.5, -1, -15], [0.5, 0.8, 0]]) {\n        translate(pos)\n            sphere(d=1.2, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "testimony",
    "openscad_code": "// Roman Tabula Testimonialis – wax writing tablet (ca. 100 CE)\n// Overall size 90 mm × 60 mm × 12 mm, printable without supports\n\n$fa = 2; $fs = 0.5;\n\n// Wood colour for the tablet body\ncolor([0.50, 0.30, 0.15]) {\n\n    // Main hinged tablet body\n    difference() {\n        union() {\n            // Left leaf\n            translate([-43, -28, 0]) roundedBox(50, 56, 10, 2);\n            // Right leaf\n            translate([  7, -28, 0]) roundedBox(50, 56, 10, 2);\n        }\n        // Recessed writing surfaces\n        translate([-38, -23, 4]) cube([40, 46, 1.5]);\n        translate([ 12, -23, 4]) cube([40, 46, 1.5]);\n    }\n\n    // Hinge (three wooden dowels)\n    for(y = [-20, 0, 20])\n        translate([5, y, -1])\n            rotate([0, 90, 0])\n                cylinder(h = 12, d = 8, $fn = 12);\n}\n\n// Bronze clasp & ring\ncolor([0.75, 0.5, 0.1]) {\n    // Staple on left leaf\n    translate([-22, 28, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d = 2, $fn = 8);\n    // Movable ring\n    rotate([-30, 0, 0])\n        translate([22, 28, 5])\n            rotate_extrude(angle = 360, $fn = 32)\n                translate([4, 0, 0])\n                    circle(r = 1.2);\n}\n\n// Stylus lying in recess on right leaf\ncolor([0.3, 0.3, 0.3]) {\n    translate([20, 0, 12])\n        rotate([0, 90, 0])\n            union() {\n                cylinder(h = 30, d = 3, $fn = 8);\n                translate([30, 0, 0])\n                    sphere(d = 3);\n            }\n}\n\n// Decorative bronze corner reinforcements\nmodule cornerPlate(dx, dy) {\n    translate([dx*43, dy*28, 5]) {\n        linear_extrude(height = 1.5)\n            offset(r = 1)\n                square([6, 6], center = false);\n    }\n}\n\ncolor([0.75, 0.5, 0.1])\n    for(dx = [-1, 1])\n        for(dy = [-1, 1]) {\n            cornerPlate(dx, dy);\n            mirror([1, 0, 0]) cornerPlate(dx, dy);\n        }\n\n// Helper module for rounded boxes\nmodule roundedBox(w, d, h, r) {\n    translate([r, r, 0]) {\n        minkowski() {\n            cube([w-2*r, d-2*r, h]);\n            sphere(r);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "affidavit",
    "openscad_code": "// Historical Affidavit Seal with Wax Imprint\n// Represents a 19th century legal document with wax seal\n\n// Set overall scale for 3D printing\nscale_factor = 1;\n\n// Document dimensions (mm)\ndoc_width = 60 * scale_factor;\ndoc_height = 80 * scale_factor;\ndoc_thickness = 0.8 * scale_factor;\n\n// Wax seal dimensions\nseal_diameter = 18 * scale_factor;\nseal_height = 4 * scale_factor;\n\n// Ribbon dimensions\nribbon_width = 3 * scale_factor;\nribbon_thickness = 0.4 * scale_factor;\n\n// Paper texture module using small cubes\nmodule paper_texture() {\n    difference() {\n        color([0.95, 0.93, 0.88])  // Parchment color\n        cube([doc_width, doc_height, doc_thickness], center = true);\n        \n        // Create subtle paper texture with small indentations\n        for (x = [-doc_width/2 + 2 : 2 : doc_width/2 - 2]) {\n            for (y = [-doc_height/2 + 2 : 2 : doc_height/2 - 2]) {\n                if (rands(0, 1, 1)[0] > 0.7) {\n                    translate([x, y, doc_thickness/2 - 0.05])\n                    cube([0.5, 0.5, 0.1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Wax seal module\nmodule wax_seal() {\n    // Wax base\n    color([0.6, 0.1, 0.1])  // Deep red wax color\n    union() {\n        cylinder(h = seal_height, d = seal_diameter, $fn = 32);\n        \n        // Decorative seal impression (shield shape)\n        translate([0, 0, seal_height - 0.5])\n        scale([1, 1.2, 1])\n        cylinder(h = 0.5, d = seal_diameter * 0.8, $fn = 3);\n        \n        // Central star symbol\n        translate([0, 0, seal_height - 0.3])\n        scale([1, 1, 0.2])\n        sphere(d = seal_diameter * 0.4, $fn = 8);\n    }\n}\n\n// Legal text lines\nmodule text_lines() {\n    color([0.2, 0.2, 0.2])  // Dark ink color\n    for (i = [1 : 6]) {\n        translate([0, -doc_height/2 + 10 + i * 8, doc_thickness/2 + 0.1])\n        cube([doc_width * 0.8, 0.5, 0.1], center = true);\n    }\n    \n    // Signature line\n    translate([doc_width/4, doc_height/2 - 15, doc_thickness/2 + 0.1])\n    cube([doc_width * 0.4, 0.5, 0.1], center = true);\n}\n\n// Ribbon module\nmodule ribbon() {\n    color([0.8, 0.1, 0.1])  // Red ribbon color\n    union() {\n        // Main ribbon\n        translate([doc_width/2 - 5, 0, 0])\n        cube([ribbon_width, doc_height * 0.6, ribbon_thickness]);\n        \n        // Folded part\n        translate([doc_width/2 - 5 - ribbon_width/2, doc_height/4, -ribbon_thickness])\n        rotate([90, 0, 0])\n        cylinder(h = ribbon_width, r = ribbon_thickness, $fn = 16);\n    }\n}\n\n// Corner decorative elements\nmodule corner_ornaments() {\n    color([0.3, 0.2, 0.1])  // Dark brown ink\n    for (corner = [[-1, -1], [1, -1], [-1, 1], [1, 1]]) {\n        translate([corner[0] * (doc_width/2 - 3), corner[1] * (doc_height/2 - 3), doc_thickness/2 + 0.1])\n        rotate([0, 0, corner[0] * corner[1] * 45])\n        union() {\n            cube([2, 0.5, 0.1], center = true);\n            rotate([0, 0, 90])\n            cube([2, 0.5, 0.1], center = true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Document body\n    paper_texture();\n    \n    // Text and decorations\n    text_lines();\n    corner_ornaments();\n    \n    // Ribbon with wax seal\n    translate([0, 0, doc_thickness/2 + ribbon_thickness/2])\n    ribbon();\n    \n    // Wax seal positioned on the ribbon\n    translate([doc_width/2 - 5 - ribbon_width/2, doc_height/4 + 5, doc_thickness/2 + ribbon_thickness + seal_height/2])\n    wax_seal();\n}",
    "renders": true
  },
  {
    "historical_artifact": "attestation",
    "openscad_code": "// Roman military diploma - bronze attestation tablet (diploma militare)\n// 1:2 scale model, ~90 mm tall, 3D-printable with 1 mm walls\n\n$fn = 64;            // smooth curves\nwall = 1.2;          // printable wall thickness\nw = 45;              // tablet width\nh = 90;              // tablet height\nt = 4;               // tablet thickness\nborder = 3;          // raised border width\ntxt_h = 0.4;         // inscription depth\n\nmodule tablet() {\n    difference() {\n        // main bronze plate\n        color(\"bronze\")\n        cube([w, h, t], center=true);\n\n        // inner recessed area\n        translate([0,0,-t/2+0.1])\n        cube([w-2*border, h-2*border, t], center=true);\n    }\n}\n\nmodule border_molding() {\n    // raised decorative rim\n    for (i=[-1,1])\n    translate([0, i*(h/2-border/2), 0])\n    rotate([90,0,0])\n    cylinder(h=w-border*2, r=border/2, center=true);\n\n    for (i=[-1,1])\n    translate([i*(w/2-border/2), 0, 0])\n    rotate([0,90,0])\n    cylinder(h=h-border*2, r=border/2, center=true);\n}\n\nmodule inscription_lines() {\n    // horizontal ruling lines for text\n    for (y=[-35:7:35])\n    translate([0, y, t/2-txt_h-0.05])\n    color([0.3,0.2,0.1])\n    cube([w-2*border-2, 0.5, txt_h], center=true);\n}\n\nmodule rivet_heads() {\n    // four corner rivets for original wire binding\n    for (x=[-1,1])\n    for (y=[-1,1])\n    translate([x*(w/2-5), y*(h/2-5), t/2])\n    color(\"bronze\")\n    cylinder(h=1.5, r=2, $fn=12);\n}\n\nmodule seal_holes() {\n    // two holes for wire seal\n    translate([0, h/2-10, 0])\n    rotate([90,0,0])\n    cylinder(h=w+2, r=1.5, center=true);\n    \n    translate([0, -h/2+10, 0])\n    rotate([90,0,0])\n    cylinder(h=w+2, r=1.5, center=true);\n}\n\nmodule imperial_motif() {\n    // simplified imperial eagle at top\n    translate([0, h/2-8, t/2+0.1])\n    color(\"bronze\")\n    union() {\n        // body\n        cube([6, 4, 1], center=true);\n        // wings\n        for (x=[-4,4])\n        translate([x,0,0])\n        cube([6, 3, 1], center=true);\n        // head\n        translate([0, 3, 0])\n        cube([3, 3, 1], center=true);\n    }\n}\n\n// assembly\nunion() {\n    tablet();\n    translate([0,0,t/2+wall/2])\n    border_molding();\n    inscription_lines();\n    rivet_heads();\n    seal_holes();\n    imperial_motif();\n}",
    "renders": true
  },
  {
    "historical_artifact": "instrumentum",
    "openscad_code": "// Roman Bronze Steelyard Balance (Instrumentum)\n// Medium complexity realistic model with proper proportions\n// Overall length: ~80mm\n\n// Colors\nbalance_color = \"Bronze\";\nmark_color = \"DarkGoldenrod\";\n\n// Main beam with graduated markings\nmodule steelyard_beam() {\n    color(balance_color)\n    union() {\n        // Main beam - slightly tapered\n        hull() {\n            translate([-5, 0, 0]) cylinder(h=2, r=3, $fn=32);\n            translate([35, 0, 0]) cylinder(h=2, r=2.5, $fn=32);\n        }\n        \n        // Graduated markings along beam\n        color(mark_color)\n        for(i = [0:2:30]) {\n            translate([i, 4, 0]) cube([0.5, 0.5, 2.5]);\n        }\n    }\n}\n\n// Suspension hook at fulcrum point\nmodule suspension_hook() {\n    color(balance_color)\n    union() {\n        // Hook loop\n        rotate([90, 0, 0])\n            scale([1, 1.2, 1])\n            difference() {\n                cylinder(h=10, r=3, $fn=32);\n                translate([0, 0, -1]) cylinder(h=12, r=2.2, $fn=32);\n            }\n        \n        // Connection to beam\n        translate([0, 0, 5]) cylinder(h=3, r=2, $fn=16);\n    }\n}\n\n// Counterweight with chain attachment\nmodule counterweight() {\n    color(balance_color)\n    union() {\n        // Main weight - biconical\n        hull() {\n            cylinder(h=5, r=6, $fn=32);\n            translate([0, 0, 5]) sphere(d=12, $fn=32);\n            translate([0, 0, 10]) cylinder(h=5, r=6, $fn=32);\n        }\n        \n        // Chain ring\n        rotate([90, 0, 0])\n            translate([0, 0, 12])\n            difference() {\n                cylinder(h=5, r=2.5, $fn=32);\n                translate([0, 0, -1]) cylinder(h=7, r=1.5, $fn=32);\n            }\n    }\n}\n\n// Weighing pan with decorative rim\nmodule weighing_pan() {\n    color(balance_color)\n    difference() {\n        // Pan body\n        cylinder(h=3, r=10, $fn=64);\n        \n        // Hollow interior\n        translate([0, 0, 0.5]) cylinder(h=3, r=8.5, $fn=64);\n        \n        // Drainage hole\n        translate([0, 0, -0.5]) cylinder(h=4, r=1, $fn=16);\n    }\n    \n    // Decorative rim with fluting\n    color(mark_color)\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n            translate([9.5, 0, 2.5])\n            cube([1, 0.5, 1]);\n    }\n}\n\n// Pan suspension chain\nmodule pan_chain() {\n    color(balance_color)\n    for(i = [0:2:10]) {\n        translate([35, 0, -i-3])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, r=1.5, $fn=16);\n                translate([0, 0, -0.5]) cylinder(h=3, r=0.8, $fn=16);\n            }\n    }\n}\n\n// Position indicator (cursor)\nmodule position_indicator() {\n    color(balance_color)\n    translate([20, 0, 2.5]) {\n        // Main body\n        cube([4, 2, 3], center=true);\n        \n        // Pointer\n        translate([2.5, 0, 1.5])\n            rotate([0, 0, 45])\n            cube([2, 0.5, 0.5], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 10]) {\n    // Main beam\n    steelyard_beam();\n    \n    // Suspension hook at fulcrum\n    suspension_hook();\n    \n    // Counterweight on left\n    translate([-15, 0, -15]) counterweight();\n    \n    // Weighing pan on right\n    translate([40, 0, -15]) weighing_pan();\n    \n    // Chain connecting pan to beam\n    pan_chain();\n    \n    // Position indicator\n    position_indicator();\n}",
    "renders": true
  },
  {
    "historical_artifact": "volumen",
    "openscad_code": "// Roman volumen scroll – medium realism\n// 80 mm long, 30 mm diameter scroll\n\n$fn = 36;\n\n// Main scroll body\ncolor(\"BurlyWood\")\ndifference() {\n    // Rolled papyrus core\n    rotate([90, 0, 0])\n    cylinder(h = 80, d = 30, center = true);\n\n    // Hollow core for realism\n    rotate([90, 0, 0])\n    cylinder(h = 82, d = 8, center = true);\n}\n\n// Overlapping outer sheet\ncolor(\"Wheat\")\ntranslate([0, 15, 0])\nrotate([90, 0, 0])\ndifference() {\n    cylinder(h = 40, d = 36, center = true);\n    cylinder(h = 42, d = 30, center = true);\n}\n\n// Knob ends (umbilici)\nmodule knob() {\n    color(\"SaddleBrown\")\n    union() {\n        translate([0, 0, 0])\n            sphere(d = 12);\n        translate([0, 0, 2])\n            cylinder(h = 5, d = 6);\n    }\n}\n\ntranslate([0, 0, 40])\n    knob();\ntranslate([0, 0, -40])\n    knob();\n\n// Central inscription band\ncolor(\"Tan\")\ntranslate([0, 0, 0])\nrotate([90, 0, 0])\ndifference() {\n    cylinder(h = 10, d = 32, center = true);\n    cylinder(h = 12, d = 28, center = true);\n}\n\n// Decorative red wax seal\ncolor(\"FireBrick\")\ntranslate([15, 0, 0])\nrotate([90, 0, 90])\ncylinder(h = 3, d1 = 12, d2 = 10);\n\n// Tied leather cord\nmodule cord_loop(a) {\n    color(\"SaddleBrown\")\n    rotate([90, 0, a])\n    translate([0, 0, 32])\n    rotate_extrude(angle = 180, $fn = 12)\n    translate([3, 0, 0])\n    circle(d = 2);\n}\n\nfor (a = [0:60:300])\n    cord_loop(a);\n\n// Small cracks for realism\nmodule crack(x, z) {\n    color(\"Peru\")\n    translate([x, 0, z])\n    rotate([90, 0, 45])\n    cube([0.5, 0.5, 10], center = true);\n}\n\ncrack(10, 15);\ncrack(-7, -20);\ncrack(5, 0);",
    "renders": true
  },
  {
    "historical_artifact": "liber",
    "openscad_code": "// Roman wax tablet (liber) - double hinged writing tablet\n// Overall dimensions: 90mm x 60mm x 20mm closed\n\n// Main tablet dimensions\ntablet_w = 90;\ntablet_h = 60;\ntablet_d = 8;\nhinge_d = 4;\nwall_t = 2;\n\n// Wax recess dimensions\nwax_w = 38;\nwax_h = 50;\nwax_d = 3;\n\n// Stylus holder\nstylus_r = 2;\nstylus_l = 50;\n\n// Decorative elements\nboss_r = 4;\nboss_h = 1;\nboss_spacing = 20;\n\nmodule tablet_half() {\n    difference() {\n        // Main tablet body\n        cube([tablet_w/2, tablet_h, tablet_d]);\n        \n        // Wax recess\n        translate([wall_t, wall_t, -0.1])\n            cube([wax_w, wax_h, wax_d + 0.2]);\n        \n        // Stylus groove on side\n        translate([tablet_w/2 - wall_t - stylus_r, \n                   tablet_h/2 - stylus_l/2, \n                   tablet_d/2])\n            rotate([90, 0, 0])\n            cylinder(r = stylus_r, h = stylus_l + 0.2, $fn = 16);\n    }\n    \n    // Decorative corner bosses\n    for (x = [wall_t + boss_r, tablet_w/2 - wall_t - boss_r]) {\n        for (y = [wall_t + boss_r, tablet_h - wall_t - boss_r]) {\n            translate([x, y, tablet_d])\n                cylinder(r = boss_r, h = boss_h, $fn = 16);\n        }\n    }\n    \n    // Central decorative boss\n    translate([tablet_w/4, tablet_h/2, tablet_d])\n        cylinder(r = boss_r * 1.2, h = boss_h, $fn = 16);\n}\n\nmodule hinge() {\n    // Hinge pin\n    color(\"goldenrod\")\n    translate([0, 0, tablet_d/2])\n        cylinder(r = hinge_d/2, h = tablet_h, $fn = 16);\n    \n    // Hinge loops on left half\n    for (y = [hinge_d, tablet_h - hinge_d]) {\n        translate([tablet_w/2, y, tablet_d/2])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(r = hinge_d + wall_t, h = hinge_d, $fn = 16);\n                cylinder(r = hinge_d/2 + 0.1, h = hinge_d + 0.2, $fn = 16);\n            }\n    }\n    \n    // Hinge pin on right half (mirrored)\n    for (y = [hinge_d, tablet_h - hinge_d]) {\n        translate([tablet_w/2 - hinge_d, y, tablet_d/2])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(r = hinge_d + wall_t, h = hinge_d, $fn = 16);\n                cylinder(r = hinge_d/2 + 0.1, h = hinge_d + 0.2, $fn = 16);\n            }\n    }\n}\n\nmodule clasp() {\n    // Simple loop clasp on right side\n    translate([tablet_w - wall_t - 4, tablet_h/2, tablet_d/2])\n        difference() {\n            cube([8, 6, 4]);\n            translate([4, 3, 0])\n                cylinder(r = 2, h = 4, $fn = 16);\n        }\n    \n    // Corresponding hook on left side\n    translate([wall_t + 4, tablet_h/2, tablet_d/2])\n        difference() {\n            cube([8, 6, 4]);\n            translate([4, 3, 0])\n                cylinder(r = 1.5, h = 4, $fn = 16);\n        }\n}\n\n// Assembly\ncolor(\"burlywood\") {\n    // Left half\n    translate([-tablet_w/2, 0, 0])\n        tablet_half();\n    \n    // Right half\n    translate([tablet_w/2, 0, 0])\n        mirror([1, 0, 0])\n        tablet_half();\n}\n\n// Hinge assembly\ntranslate([0, 0, 0])\n    hinge();\n\n// Clasp assembly\ncolor(\"goldenrod\") {\n    translate([0, 0, 0])\n        clasp();\n}\n\n// Stylus\ncolor(\"saddlebrown\")\ntranslate([tablet_w/2 - wall_t - stylus_r - 5, \n           tablet_h/2 + stylus_l/2, \n           tablet_d/2])\n    rotate([90, 0, 0])\n    cylinder(r = stylus_r * 0.8, h = stylus_l, $fn = 16);\n\n// Wax surface texture indication\ncolor(\"darkgoldenrod\") {\n    for (x = [-tablet_w/4, tablet_w/4]) {\n        for (y = [-10, 10]) {\n            translate([x, tablet_h/2 + y, tablet_d - wax_d - 0.1])\n                cube([1, 1, 0.1]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "libellus",
    "openscad_code": "// Libellus - Roman wax writing tablet\n// A small, hinged wooden notebook with wax-filled recesses for writing with stylus\n\n// Overall dimensions\nlength = 80;\nwidth = 55;\nthickness = 8;\nhinge_diameter = 3;\nwax_depth = 2;\nwall_thickness = 3;\n\n// Colors\nwood_color = [139/255, 90/255, 43/255];\nwax_color = [218/255, 165/255, 32/255];\nmetal_color = [180/255, 180/255, 180/255];\n\n// Create the complete libellus\nmodule libellus() {\n    // Left tablet\n    translate([-length/2 - 2, 0, 0]) {\n        tablet_half();\n    }\n    \n    // Right tablet\n    translate([length/2 + 2, 0, 0]) {\n        mirror([1, 0, 0]) {\n            tablet_half();\n        }\n    }\n    \n    // Hinge pins\n    color(metal_color) {\n        for(i = [-1, 1]) {\n            translate([0, width/4 * i, 0]) {\n                cylinder(h = thickness + 2, d = hinge_diameter, $fn = 12);\n            }\n        }\n    }\n}\n\n// Single tablet half\nmodule tablet_half() {\n    // Wooden frame\n    color(wood_color) {\n        difference() {\n            // Outer frame\n            cube([length/2, width, thickness], center = true);\n            \n            // Wax recess\n            translate([0, 0, -thickness/2 + wall_thickness/2]) {\n                cube([length/2 - wall_thickness*2, width - wall_thickness*2, wall_thickness*2], center = false);\n            }\n            \n            // Hinge holes\n            for(i = [-1, 1]) {\n                translate([length/2 - wall_thickness, width/4 * i, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = wall_thickness*2, d = hinge_diameter + 0.5, $fn = 12);\n                    }\n                }\n            }\n        }\n        \n        // Decorative border ridge\n        for(side = [0, 1]) {\n            translate([0, width/2 - 2 - side*(width - 4), thickness/2 - 1]) {\n                cube([length/2 - 4, 1, 1], center = true);\n            }\n        }\n    }\n    \n    // Wax surface\n    color(wax_color) {\n        translate([0, 0, -thickness/2 + wall_thickness/2 + 0.1]) {\n            cube([length/2 - wall_thickness*2 - 1, width - wall_thickness*2 - 1, wax_depth], center = true);\n        }\n    }\n    \n    // Decorative corner motifs\n    color(wax_color) {\n        for(x = [1, -1]) {\n            for(y = [1, -1]) {\n                translate([x*(length/4 - 5), y*(width/2 - 5), thickness/2 - 1]) {\n                    cylinder(h = 1, d = 6, $fn = 6);\n                }\n            }\n        }\n    }\n    \n    // Stylus groove on side\n    color(wood_color) {\n        translate([length/4, width/2, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = width/3, d = 4, $fn = 16);\n            }\n        }\n    }\n}\n\n// Render the libellus\nlibellus();",
    "renders": true
  },
  {
    "historical_artifact": "opus",
    "openscad_code": "// Opus Tessellatum Roman Mosaic Panel\n// 2nd Century AD Roman floor mosaic fragment\n// Dimensions: 80mm x 60mm x 8mm (printable size)\n\n// Main panel base with appropriate thickness for printing\ndifference() {\n    color([0.9, 0.8, 0.7])  // Light mortar color\n    cube([80, 60, 8], center=false);\n    \n    // Hollow out base for material saving\n    translate([2, 2, 2])\n        cube([76, 56, 6], center=false);\n}\n\n// Border tesserae (small square tiles)\nmodule border_tesserae() {\n    color([0.6, 0.4, 0.2])  // Dark stone\n    for(x = [0:2:79]) {\n        for(y = [0:2:59]) {\n            if(x <= 6 || x >= 72 || y <= 6 || y >= 52) {\n                translate([x, y, 6])\n                    cube([1.8, 1.8, 2]);\n            }\n        }\n    }\n}\n\n// Central geometric pattern - Solomon's knot\nmodule solomon_knot() {\n    color([0.8, 0.1, 0.1])  // Red terracotta\n    // Horizontal bars\n    for(i = [-1:1]) {\n        translate([40 + i*12, 30, 6])\n            cube([10, 4, 2]);\n    }\n    \n    // Vertical bars\n    for(i = [-1:1]) {\n        translate([40, 30 + i*12, 6])\n            cube([4, 10, 2]);\n    }\n    \n    // Intersection details\n    translate([40, 30, 7])\n        cube([8, 8, 1]);\n}\n\n// Corner decorative rosettes\nmodule corner_rosette(x_pos, y_pos) {\n    color([0.2, 0.3, 0.5])  // Blue glass tesserae\n    \n    // Center circle\n    translate([x_pos, y_pos, 6.5])\n        cylinder(h=1.5, r=3, $fn=16);\n    \n    // Petals\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n            translate([x_pos + 4, y_pos, 6.5])\n                cylinder(h=1.5, r=1.5, $fn=8);\n    }\n}\n\n// Inner field tesserae (background pattern)\nmodule background_tesserae() {\n    color([0.7, 0.65, 0.6])  // Light limestone\n    \n    // Diagonal pattern fill\n    for(x = [8:3:71]) {\n        for(y = [8:3:50]) {\n            if((x + y) % 6 == 0) {\n                translate([x, y, 6])\n                    cube([2.5, 2.5, 2]);\n            }\n        }\n    }\n}\n\n// Assemble the mosaic\nunion() {\n    border_tesserae();\n    background_tesserae();\n    solomon_knot();\n    \n    // Add corner decorations\n    corner_rosette(15, 15);\n    corner_rosette(65, 15);\n    corner_rosette(15, 45);\n    corner_rosette(65, 45);\n    \n    // Age/wear details\n    color([0.5, 0.5, 0.5])  // Weathering\n    translate([25, 25, 7.5])\n        sphere(r=2, $fn=16);\n    translate([55, 35, 7.5])\n        sphere(r=1.5, $fn=16);\n}",
    "renders": true
  },
  {
    "historical_artifact": "tractatus",
    "openscad_code": "// Tractatus Historical Artifact - Medieval Manuscript\n// Realistic Style, Medium Complexity\n\n// Main parameters\nbook_width = 60;\nbook_height = 80;\nbook_depth = 15;\ncover_thickness = 2;\npage_thickness = 11;\nspine_radius = 3;\n\n// Colors\ncover_color = \"SaddleBrown\";\npage_color = \"AntiqueWhite\";\nmetal_color = \"Goldenrod\";\nink_color = \"Black\";\n\nmodule book_cover() {\n    // Main cover panel\n    color(cover_color)\n    difference() {\n        cube([book_width, book_height, cover_thickness]);\n        \n        // Inner recess for pages\n        translate([cover_thickness, cover_thickness, -0.1])\n        cube([book_width - 2*cover_thickness, book_height - 2*cover_thickness, cover_thickness + 0.2]);\n    }\n    \n    // Ornamental corners\n    for(x = [cover_thickness/2, book_width - cover_thickness/2]) {\n        for(y = [cover_thickness/2, book_height - cover_thickness/2]) {\n            translate([x, y, cover_thickness - 0.5])\n            color(metal_color)\n            cylinder(h=1, r=3, $fn=16);\n        }\n    }\n    \n    // Central boss\n    translate([book_width/2, book_height/2, cover_thickness - 1])\n    color(metal_color)\n    cylinder(h=1, r=8, $fn=32);\n    \n    // Spine ridges\n    for(i = [1:3]) {\n        translate([0, i * book_height/4, 0])\n        color(cover_color)\n        cube([cover_thickness, 2, cover_thickness]);\n    }\n}\n\nmodule pages() {\n    // Page block\n    color(page_color)\n    translate([cover_thickness, cover_thickness, cover_thickness])\n    cube([page_thickness, book_height - 2*cover_thickness, book_depth - 2*cover_thickness]);\n    \n    // Page edges texture\n    for(i = [0:20]) {\n        translate([cover_thickness + page_thickness * i/20, cover_thickness, cover_thickness])\n        color(page_color)\n        cube([page_thickness/20, book_height - 2*cover_thickness, book_depth - 2*cover_thickness]);\n    }\n}\n\nmodule spine() {\n    // Curved spine\n    color(cover_color)\n    translate([0, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=book_height, r=spine_radius, $fn=20);\n    \n    // Spine bands\n    for(i = [1:3]) {\n        translate([-0.5, i * book_height/4, spine_radius])\n        rotate([0, 90, 0])\n        color(\"DarkBrown\")\n        cylinder(h=book_height/8, r=spine_radius + 1, $fn=20);\n    }\n}\n\nmodule clasp() {\n    // Metal clasp on front cover\n    translate([book_width - 5, book_height/2, cover_thickness + 1])\n    color(metal_color)\n    union() {\n        cube([8, 4, 1]);\n        translate([8, 2, 0])\n        cylinder(h=1, r=2, $fn=16);\n    }\n    \n    // Corresponding loop on back cover\n    translate([5, book_height/2, book_depth - cover_thickness - 1])\n    color(metal_color)\n    difference() {\n        cube([6, 6, 1]);\n        translate([3, 3, -0.1])\n        cylinder(h=1.2, r=2, $fn=16);\n    }\n}\n\nmodule inscription() {\n    // Title text on spine\n    translate([-1, book_height/2, book_depth/2])\n    rotate([0, 90, 90])\n    color(ink_color)\n    linear_extrude(height=0.5)\n    text(\"TRACTATUS\", size=5, font=\"Times:style=Bold\");\n    \n    // Decorative initial on front\n    translate([book_width/2 - 5, book_height - 15, cover_thickness + 0.1])\n    rotate([0, 0, 0])\n    color(ink_color)\n    linear_extrude(height=0.3)\n    text(\"T\", size=12, font=\"Times:style=Bold\");\n}\n\nmodule bookmark() {\n    // Silk bookmark ribbon\n    translate([cover_thickness + page_thickness/2, cover_thickness, book_depth - cover_thickness - 2])\n    color(\"DarkRed\")\n    cube([0.5, book_height - 4*cover_thickness, 2]);\n}\n\n// Assembly\nunion() {\n    // Front cover\n    book_cover();\n    \n    // Pages\n    pages();\n    \n    // Spine\n    spine();\n    \n    // Back cover (mirrored front)\n    translate([0, 0, book_depth])\n    mirror([0, 0, 1])\n    book_cover();\n    \n    // Clasp assembly\n    clasp();\n    \n    // Inscriptions\n    inscription();\n    \n    // Bookmark\n    bookmark();\n}",
    "renders": true
  },
  {
    "historical_artifact": "opuscule",
    "openscad_code": "// Medieval wax tablet booklet (opuscule) - 13th century style\n// Dimensions: 80mm x 55mm x 12mm closed\n\n// Wood color for the tablets\ncolor([0.4, 0.25, 0.1]) {\n    // Front cover with inscribed cross\n    difference() {\n        translate([0, 0, 1]) cube([80, 55, 3], center=true);\n        \n        // Inscribed cross on front\n        translate([0, 0, 1.6]) cube([50, 8, 1], center=true);\n        translate([0, 0, 1.6]) cube([8, 50, 1], center=true);\n        \n        // Holes for binding cords\n        for (i = [-1, 1]) {\n            translate([35*i, 20, 1]) cylinder(h=4, r=2, center=true);\n            translate([35*i, -20, 1]) cylinder(h=4, r=2, center=true);\n        }\n    }\n    \n    // Back cover\n    translate([0, 0, -11]) cube([80, 55, 3], center=true);\n}\n\n// Wax tablets (3 pieces)\nfor (i = [0, 1, 2]) {\n    color([0.15, 0.1, 0.05]) {\n        difference() {\n            translate([0, 0, -5 - i*3]) cube([75, 50, 2.5], center=true);\n            \n            // Wax recess\n            translate([0, 0, -4.5 - i*3]) cube([70, 45, 1], center=true);\n            \n            // Binding holes\n            for (j = [-1, 1]) {\n                translate([33*j, 18, -5 - i*3]) cylinder(h=3, r=1.5, center=true);\n                translate([33*j, -18, -5 - i*3]) cylinder(h=3, r=1.5, center=true);\n            }\n        }\n    }\n}\n\n// Leather binding straps\ncolor([0.2, 0.1, 0.05]) {\n    // Front strap with buckle\n    translate([-45, 0, 0]) rotate([0, 90, 0]) cylinder(h=60, r=1.5, center=true);\n    translate([-45, 0, -10]) rotate([0, 90, 0]) cylinder(h=60, r=1.5, center=true);\n    \n    // Buckle\n    translate([-45, 20, -5]) rotate([90, 0, 0]) difference() {\n        cylinder(h=8, r=6, center=true);\n        cylinder(h=9, r=3, center=true);\n    }\n    \n    // Back strap with holes\n    translate([45, 0, 0]) rotate([0, 90, 0]) cylinder(h=60, r=1.5, center=true);\n    translate([45, 0, -10]) rotate([0, 90, 0]) cylinder(h=60, r=1.5, center=true);\n    \n    // Punch holes in back strap\n    for (h = [0:3]) {\n        translate([45, -25 + h*10, 0]) rotate([0, 90, 0]) cylinder(h=4, r=2, center=true);\n        translate([45, -25 + h*10, -10]) rotate([0, 90, 0]) cylinder(h=4, r=2, center=true);\n    }\n}\n\n// Decorative metal corners\ncolor([0.7, 0.6, 0.1]) {\n    module corner(x, y, z) {\n        translate([x, y, z]) difference() {\n            cube([8, 8, 4], center=true);\n            translate([-2, -2, 2]) cube([3, 3, 2], center=true);\n            translate([2, -2, 2]) cube([3, 3, 2], center=true);\n            translate([-2, 2, 2]) cube([3, 3, 2], center=true);\n            translate([2, 2, 2]) cube([3, 3, 2], center=true);\n        }\n    }\n    \n    // Front cover corners\n    corner(36, 26, 1);\n    corner(-36, 26, 1);\n    corner(36, -26, 1);\n    corner(-36, -26, 1);\n    \n    // Back cover corners\n    corner(36, 26, -11);\n    corner(-36, 26, -11);\n    corner(36, -26, -11);\n    corner(-36, -26, -11);\n}\n\n// Binding cords (simplified as cylinders)\ncolor([0.3, 0.2, 0.1]) {\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([35*i, 20*j, -2]) cylinder(h=8, r=1.2, center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "libretto",
    "openscad_code": "// Libretto Historical Artifact - 18th Century Italian Opera Libretto\n// Realistic style, medium complexity\n\n// Overall dimensions\nlibretto_width = 45;\nlibretto_height = 65;\nlibretto_thickness = 8;\npage_thickness = 0.4;\n\n// Main libretto body\nmodule libretto_body() {\n    color([0.85, 0.75, 0.65]) {\n        // Front cover\n        difference() {\n            cube([libretto_width, libretto_height, libretto_thickness], center=true);\n            \n            // Title window\n            translate([0, 20, libretto_thickness/2 - 0.1]) {\n                cube([30, 10, 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Spine with decorative elements\nmodule spine() {\n    color([0.7, 0.6, 0.5]) {\n        translate([libretto_width/2 + 0.5, 0, 0]) {\n            cube([2, libretto_height, libretto_thickness + 2], center=true);\n            \n            // Decorative ridges\n            for(i = [-25:5:25]) {\n                translate([0, i, libretto_thickness/2 + 1]) {\n                    cube([2.5, 3, 0.5], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Pages inside\nmodule pages() {\n    color([0.95, 0.95, 0.9]) {\n        for(i = [1:1:10]) {\n            translate([libretto_width/2 - i*page_thickness - 1, 0, 0]) {\n                cube([page_thickness, libretto_height - 4, libretto_thickness - 2], center=true);\n            }\n        }\n    }\n}\n\n// Title engraving\nmodule title_engraving() {\n    color([0.2, 0.2, 0.2]) {\n        translate([0, 20, libretto_thickness/2 - 0.05]) {\n            // \"LA TRAVIATA\"\n            scale([0.1, 0.1, 0.1]) {\n                cube([150, 15, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Decorative corner ornaments\nmodule corner_ornaments() {\n    color([0.6, 0.5, 0.4]) {\n        // Top left\n        translate([-libretto_width/2 + 3, libretto_height/2 - 3, libretto_thickness/2]) {\n            difference() {\n                cylinder(h=0.5, r=2);\n                cylinder(h=0.6, r=1.5);\n            }\n        }\n        \n        // Top right\n        translate([libretto_width/2 - 3, libretto_height/2 - 3, libretto_thickness/2]) {\n            difference() {\n                cylinder(h=0.5, r=2);\n                cylinder(h=0.6, r=1.5);\n            }\n        }\n        \n        // Bottom left\n        translate([-libretto_width/2 + 3, -libretto_height/2 + 3, libretto_thickness/2]) {\n            difference() {\n                cylinder(h=0.5, r=2);\n                cylinder(h=0.6, r=1.5);\n            }\n        }\n        \n        // Bottom right\n        translate([libretto_width/2 - 3, -libretto_height/2 + 3, libretto_thickness/2]) {\n            difference() {\n                cylinder(h=0.5, r=2);\n                cylinder(h=0.6, r=1.5);\n            }\n        }\n    }\n}\n\n// Page edges texture\nmodule page_edges() {\n    color([0.9, 0.9, 0.85]) {\n        for(i = [-libretto_thickness/2 + 1:0.2:libretto_thickness/2 - 1]) {\n            translate([libretto_width/2 - 5, 0, i]) {\n                cube([0.1, libretto_height - 4, 0.1], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    libretto_body();\n    spine();\n    pages();\n    title_engraving();\n    corner_ornaments();\n    page_edges();\n}",
    "renders": true
  },
  {
    "historical_artifact": "libra",
    "openscad_code": "// Libra Roman Balance Scale - Historical Artifact (1st-3rd Century AD)\n// Based on archaeological finds from Pompeii and Herculaneum\n\n// Overall dimensions: 85mm length, 40mm height, 25mm width\n\n// Bronze material color\ncolor([0.72, 0.45, 0.2]) \n\n// Main scale beam\nmodule scale_beam() {\n    // Central support post\n    translate([0, 0, 5]) {\n        cylinder(h=25, d=6, $fn=16);\n    }\n    \n    // Horizontal balance beam\n    translate([0, 0, 30]) {\n        rotate([90, 0, 0]) {\n            cube([80, 4, 4], center=true);\n        }\n    }\n    \n    // Beam support arms\n    translate([0, 0, 25]) {\n        for(i=[-1, 1]) {\n            translate([i*5, 0, 0]) {\n                rotate([30*i, 0, 0]) {\n                    cylinder(h=12, d1=4, d2=2, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Hanging chains and pans\nmodule pans_and_chains() {\n    // Left chain\n    translate([-35, 0, 30]) {\n        // Chain links\n        for(i=[0:3]) {\n            translate([0, 0, -i*6]) {\n                rotate([0, 90, 0]) {\n                    difference() {\n                        cylinder(h=8, d=3, $fn=12);\n                        translate([0, 0, -1]) cylinder(h=10, d=2.2, $fn=12);\n                    }\n                }\n            }\n        }\n        \n        // Pan\n        translate([0, 0, -28]) {\n            difference() {\n                cylinder(h=8, d=20, $fn=32);\n                translate([0, 0, -1]) cylinder(h=10, d=18, $fn=32);\n            }\n            // Pan rim\n            translate([0, 0, 8]) {\n                cylinder(h=2, d=22, $fn=32);\n            }\n        }\n    }\n    \n    // Right chain (mirrored)\n    mirror([1, 0, 0]) {\n        translate([-35, 0, 30]) {\n            // Chain links\n            for(i=[0:3]) {\n                translate([0, 0, -i*6]) {\n                    rotate([0, 90, 0]) {\n                        difference() {\n                            cylinder(h=8, d=3, $fn=12);\n                            translate([0, 0, -1]) cylinder(h=10, d=2.2, $fn=12);\n                        }\n                    }\n                }\n            }\n            \n            // Pan\n            translate([0, 0, -28]) {\n                difference() {\n                    cylinder(h=8, d=20, $fn=32);\n                    translate([0, 0, -1]) cylinder(h=10, d=18, $fn=32);\n                }\n                // Pan rim\n                translate([0, 0, 8]) {\n                    cylinder(h=2, d=22, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Decorative elements\nmodule decorations() {\n    // Central decorative knob\n    translate([0, 0, 35]) {\n        sphere(d=5, $fn=16);\n    }\n    \n    // Roman numerals on beam\n    color([0.5, 0.3, 0.15]) {\n        // V mark at center\n        translate([0, 2.1, 30]) {\n            cube([3, 0.5, 0.5]);\n        }\n        \n        // I marks\n        for(i=[-1, 1]) {\n            translate([i*15, 2.1, 30]) {\n                cube([1, 0.5, 0.5]);\n            }\n            translate([i*30, 2.1, 30]) {\n                cube([1, 0.5, 0.5]);\n            }\n        }\n    }\n    \n    // Base plate\n    translate([0, 0, 0]) {\n        cube([20, 15, 5], center=true);\n    }\n    \n    // Decorative feet\n    for(x=[-7, 7]) {\n        for(y=[-5, 5]) {\n            translate([x, y, 0]) {\n                cylinder(h=3, d=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    scale_beam();\n    pans_and_chains();\n    decorations();\n}",
    "renders": true
  },
  {
    "historical_artifact": "quaternion",
    "openscad_code": "// Quaternion Historical Artifact - \"Hamilton's Quaternion Memorial\"\n// A 3D printable representation of the quaternion discovery moment\n// Based on the historical plaque and bridge setting where Hamilton carved the formula\n\n// Historical colors\n$fn = 64;\n\n// Main dimensions\nplaque_width = 60;\nplaque_height = 40;\nplaque_thickness = 4;\nstone_base_height = 5;\n\n// Bridge stone dimensions\nbridge_width = 80;\nbridge_depth = 50;\nbridge_height = 20;\n\n// Quaternion formula components\nformula_height = 8;\nformula_thickness = 1.5;\n\n// Create the stone bridge base\nmodule bridge_stone() {\n    color([0.5, 0.5, 0.5]) // Weathered stone color\n    difference() {\n        // Main bridge stone\n        cube([bridge_width, bridge_depth, bridge_height], center=true);\n        \n        // Carve arch underneath (simplified)\n        translate([0, 0, -bridge_height/2 + 5])\n            cylinder(h=bridge_depth, r1=bridge_width/3, r2=bridge_width/3, center=true);\n    }\n}\n\n// Create the commemorative plaque\nmodule commemorative_plaque() {\n    color([0.3, 0.3, 0.3]) // Dark stone/metal color\n    difference() {\n        // Main plaque body\n        cube([plaque_width, plaque_thickness, plaque_height], center=true);\n        \n        // Engraved border\n        translate([0, 0, -plaque_thickness/2 + 0.5])\n            cube([plaque_width - 4, plaque_thickness + 0.1, plaque_height - 4], center=true);\n    }\n}\n\n// Create the quaternion formula i² = j² = k² = ijk = -1\nmodule quaternion_formula() {\n    color([0.8, 0.8, 0.8]) // Engraved text color\n    \n    // i²\n    translate([-plaque_width/4, 0, -formula_height/2])\n        cube([formula_thickness, formula_thickness, formula_height]);\n    \n    translate([-plaque_width/4, 0, formula_height/2])\n        cube([formula_thickness, formula_thickness, formula_height]);\n    \n    // =\n    translate([-plaque_width/8, 0, -formula_height/4])\n        cube([formula_thickness*2, formula_thickness, formula_thickness]);\n    translate([-plaque_width/8, 0, formula_height/4])\n        cube([formula_thickness*2, formula_thickness, formula_thickness]);\n    \n    // j²\n    translate([0, 0, -formula_height/2])\n        cube([formula_thickness, formula_thickness, formula_height]);\n    \n    translate([0, 0, formula_height/2])\n        cube([formula_thickness, formula_thickness, formula_height]);\n    \n    // =\n    translate([plaque_width/8, 0, -formula_height/4])\n        cube([formula_thickness*2, formula_thickness, formula_thickness]);\n    translate([plaque_width/8, 0, formula_height/4])\n        cube([formula_thickness*2, formula_thickness, formula_thickness]);\n    \n    // k²\n    translate([plaque_width/4, 0, -formula_height/2])\n        cube([formula_thickness, formula_thickness, formula_height]);\n    \n    translate([plaque_width/4, 0, formula_height/2])\n        cube([formula_thickness, formula_thickness, formula_height]);\n    \n    // = ijk = -1\n    translate([plaque_width/3, 0, 0])\n        cube([formula_thickness*3, formula_thickness, formula_thickness]);\n}\n\n// Create decorative Celtic knot border\nmodule celtic_border() {\n    color([0.7, 0.7, 0.7])\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([i * (plaque_width/2 - 3), j * (plaque_height/2 - 3), 0])\n                rotate([90, 0, 45])\n                    cylinder(h=plaque_thickness, r1=2, r2=2);\n        }\n    }\n}\n\n// Create the date inscription (1843)\nmodule date_inscription() {\n    color([0.6, 0.6, 0.6])\n    translate([0, -plaque_height/4, 0])\n    for(i = [0:3]) {\n        translate([i * 5 - 7.5, 0, 0])\n            cube([2, formula_thickness, 8]);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, bridge_height/2])\n    bridge_stone();\n\ntranslate([0, 0, bridge_height + stone_base_height/2])\n    color([0.4, 0.4, 0.4])\n    cube([plaque_width + 10, plaque_thickness + 2, stone_base_height], center=true);\n\ntranslate([0, 0, bridge_height + stone_base_height + plaque_height/2])\n    union() {\n        commemorative_plaque();\n        \n        translate([0, plaque_thickness/2 + 0.1, 0])\n            quaternion_formula();\n            \n        celtic_border();\n        \n        date_inscription();\n    }",
    "renders": true
  },
  {
    "historical_artifact": "quire",
    "openscad_code": "// Quire - Medieval manuscript gathering of parchment sheets\n// Historical characteristics: 4 folded sheets = 8 leaves = 16 pages\n// Includes leather binding strips and wax tablet marking system\n\n// Overall dimensions (mm)\nbook_width = 70;\nbook_height = 50;\nbook_thickness = 8;\n\n// Page characteristics\npage_thickness = 0.4;\npage_count = 16;\nfold_margin = 2;\n\n// Cover materials\nleather_thickness = 0.8;\nstrap_width = 5;\n\n// Wax tablet details\ntablet_width = 10;\ntablet_height = 8;\ntablet_thickness = 2;\n\n// Parchment color\ncolor_parchment = [0.95, 0.93, 0.88];\ncolor_leather = [0.4, 0.2, 0.1];\ncolor_wax = [0.6, 0.4, 0.3];\n\nmodule parchment_sheet(index) {\n    translate([0, 0, -book_thickness/2 + index * page_thickness * 2 + fold_margin]) {\n        // Single folded sheet (two leaves)\n        difference() {\n            // Outer sheet\n            cube([book_width, book_height, page_thickness], center=true);\n            \n            // Fold line groove\n            translate([0, 0, page_thickness/2])\n            cube([book_width * 0.8, 0.5, page_thickness + 0.1], center=true);\n        }\n    }\n}\n\nmodule leather_reinforcement() {\n    color(color_leather) {\n        // Spine strip\n        translate([-book_width/2 - leather_thickness/2, 0, 0])\n        cube([leather_thickness, book_height, book_thickness + 2], center=true);\n        \n        // Corner reinforcements\n        for(x=[-1, 1])\n        for(y=[-1, 1]) {\n            translate([x * book_width/2 * 0.9, y * book_height/2 * 0.9, book_thickness/2 + leather_thickness/2])\n            cube([book_width * 0.15, book_height * 0.15, leather_thickness], center=true);\n        }\n        \n        // Binding straps\n        for(i=[-0.3, 0, 0.3]) {\n            translate([book_width/2 + leather_thickness/2, i * book_height/2, 0])\n            rotate([0, 90, 0])\n            cylinder(h=book_thickness + 2, r=strap_width/2, center=true);\n        }\n    }\n}\n\nmodule wax_marking_tablets() {\n    color(color_wax) {\n        for(side=[-1, 1]) {\n            translate([side * (book_width/2 - tablet_width/2 - 2), \n                      book_height/2 - tablet_height/2 - 2, \n                      book_thickness/2 + tablet_thickness/2 + 0.5]) {\n                // Main wax tablet\n                cube([tablet_width, tablet_height, tablet_thickness], center=false);\n                \n                // Stylus hole\n                translate([tablet_width/2, tablet_height/2, tablet_thickness/2])\n                rotate([90, 0, 0])\n                cylinder(h=tablet_thickness + 0.2, r=1, center=true);\n            }\n        }\n    }\n}\n\nmodule stitching_holes() {\n    // Medieval quire stitching pattern\n    for(i=[-0.4, -0.2, 0, 0.2, 0.4]) {\n        for(z=[-book_thickness/2 + 1, book_thickness/2 - 1]) {\n            translate([book_width/2 + 0.1, i * book_height/2, z])\n            rotate([90, 0, 0])\n            cylinder(h=0.5, r=0.3, center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Parchment pages\n    color(color_parchment)\n    for(i=[0:page_count/4-1]) {\n        parchment_sheet(i);\n    }\n    \n    // Leather reinforcements\n    leather_reinforcement();\n    \n    // Wax marking tablets\n    wax_marking_tablets();\n    \n    // Stitching guide holes (for assembly reference)\n    %stitching_holes();\n}",
    "renders": true
  },
  {
    "historical_artifact": "gathering",
    "openscad_code": "// Bronze Age ceremonial gathering bowl - Minoan style (circa 1500 BCE)\n// Used for ritual gatherings and libation ceremonies\n\n$fn = 32;\n\n// Main dimensions\nbowl_diameter = 60;\nbowl_height = 25;\nwall_thickness = 2;\n\n// Color definitions\nbronze_color = [0.72, 0.45, 0.2];\ngold_color = [0.83, 0.69, 0.22];\ndark_bronze = [0.55, 0.35, 0.15];\n\nmodule ceremonial_bowl() {\n    // Main bowl body\n    difference() {\n        // Outer shell\n        cylinder(h = bowl_height, d = bowl_diameter, center = false);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cylinder(h = bowl_height - wall_thickness, d = bowl_diameter - 2*wall_thickness, center = false);\n    }\n    \n    // Thick rim with decorative bevel\n    difference() {\n        translate([0, 0, bowl_height - 3])\n            cylinder(h = 5, d = bowl_diameter + 4, center = false);\n        \n        // Inner bevel\n        translate([0, 0, bowl_height])\n            cylinder(h = 3, d1 = bowl_diameter, d2 = bowl_diameter + 2, center = false);\n    }\n    \n    // Triple handles - Minoan spiral design\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([bowl_diameter/2 - 2, 0, bowl_height/2])\n                spiral_handle();\n    }\n    \n    // Decorative band around middle with octopus motif (simplified)\n    translate([0, 0, bowl_height/2])\n        octopus_band();\n    \n    // Base pedestal\n    translate([0, 0, -5])\n        cylinder(h = 7, d1 = bowl_diameter/2, d2 = bowl_diameter/3, center = false);\n}\n\nmodule spiral_handle() {\n    // Main handle loop\n    rotate([90, 0, 0])\n        translate([0, 0, -8])\n            difference() {\n                // Handle body\n                rotate_extrude(angle = 180, $fn = 16)\n                    translate([8, 0, 0])\n                        circle(r = 1.5);\n                \n                // Attachment points\n                translate([-10, -2, -10])\n                    cube([20, 4, 20]);\n            }\n    \n    // Decorative spiral ends\n    translate([0, 0, -1])\n        sphere(r = 2);\n}\n\nmodule octopus_band() {\n    // Simplified octopus tentacle pattern\n    for (angle = [0:30:359]) {\n        rotate([0, 0, angle])\n            translate([bowl_diameter/2 - 4, 0, 0])\n                tentacle();\n    }\n}\n\nmodule tentacle() {\n    // Curved tentacle segment\n    for (i = [0:5:20]) {\n        translate([i/4, sin(i*9)*2, 0])\n            scale([0.8, 0.8, 0.5])\n                sphere(r = 1.2);\n    }\n}\n\n// Assembly\ncolor(bronze_color) ceremonial_bowl();\n\n// Interior gold wash (ritual significance)\ntranslate([0, 0, wall_thickness - 0.1])\n    color(gold_color)\n        cylinder(h = 0.2, d = bowl_diameter - 2*wall_thickness - 0.5, center = false);",
    "renders": true
  },
  {
    "historical_artifact": "folio",
    "openscad_code": "// Medieval chained folio (library book, 14th century)\n// Dimensions chosen for small desktop print: ~70 mm spine height\n\n$fn = 36;   // smoother curves\n\n// colors\nwood = [0.55,0.35,0.15];\nleather = [0.25,0.12,0.08];\niron = [0.25,0.25,0.25];\nparchment = [0.95,0.92,0.80];\n\n// overall folio\nmodule folio() {\n    difference() {\n        // main block (closed book)\n        color(wood) cube([50, 35, 8], center = true);\n\n        // hollow inside\n        translate([0,0,2]) color(parchment) cube([46, 31, 7], center = true);\n    }\n}\n\n// raised leather bands on spine\nmodule raised_bands() {\n    for(i = [-15:10:15]) {\n        translate([25, i, 0])\n            color(leather) cube([1.5, 6, 9]);\n    }\n}\n\n// corner protectors\nmodule corners() {\n    for(x = [-20, 20])\n        for(y = [-12, 12]) {\n            translate([x, y, 4])\n                color(iron) cube([6, 6, 3]);\n        }\n}\n\n// decorative center boss\nmodule center_boss() {\n    translate([0, 0, 4.5])\n        color(iron) cylinder(h = 3, r = 5);\n}\n\n// chain staple on lower edge\nmodule chain_staple() {\n    translate([0, 17, 0])\n        color(iron) union() {\n            // staple arch\n            cylinder(h = 6, r = 1.5);\n            translate([0,-2,0]) cylinder(h = 6, r = 1.5);\n            // cross-bar\n            translate([0,-1,3]) rotate([90,0,0]) cylinder(h = 4, r = 1);\n        }\n}\n\n// metal clasp\nmodule clasp() {\n    translate([0, -17, 4])\n        color(iron) union() {\n            // fixed loop on front cover\n            cylinder(h = 2, r = 2);\n            // movable strap (simple bar)\n            translate([0, -3, 1]) cube([15, 2, 2]);\n        }\n}\n\n// assemble the folio\nunion() {\n    folio();\n    raised_bands();\n    corners();\n    center_boss();\n    chain_staple();\n    clasp();\n}",
    "renders": true
  },
  {
    "historical_artifact": "sheet",
    "openscad_code": "// Babylonian Clay Tablet with Cuneiform Inscriptions\n// Typical tablet size: 50-80mm wide, 40-60mm tall, 15-20mm thick\n\ntablet_width = 70;\ntablet_height = 55;\ntablet_thickness = 18;\ncorner_radius = 4;\ncuneiform_rows = 5;\ncuneiform_cols = 8;\n\n// Main tablet body\nunion() {\n    // Base tablet shape with rounded edges\n    difference() {\n        minkowski() {\n            cube([tablet_width, tablet_height, tablet_thickness], center = true);\n            sphere(r = corner_radius);\n        }\n        translate([0, 0, tablet_thickness/2 + 0.5])\n            cube([tablet_width + 2, tablet_height + 2, tablet_thickness + 1], center = true);\n    }\n    \n    // Cuneiform impressions on front face\n    color(\"#8B4513\") {\n        for(row = [0:cuneiform_rows-1]) {\n            for(col = [0:cuneiform_cols-1]) {\n                translate([\n                    -tablet_width/2 + 10 + col * 7,\n                    -tablet_height/2 + 8 + row * 10,\n                    tablet_thickness/2 - 1\n                ])\n                    rotate([0, 0, 45 * ((row + col) % 2)])\n                        cuneiform_wedge();\n            }\n        }\n    }\n    \n    // Seal impression on back\n    translate([0, 0, -tablet_thickness/2 + 1])\n        rotate([0, 0, 0])\n            cylinder(h = 2, r1 = 8, r2 = 8, $fn = 16);\n    \n    // Cylinder seal pattern around central seal\n    for(i = [0:11]) {\n        translate([0, 0, -tablet_thickness/2 + 1])\n            rotate([0, 0, i * 30])\n                translate([6, 0, 0])\n                    cylinder(h = 2, r1 = 1, r2 = 1);\n    }\n    \n    // Edges showing clay texture marks\n    color(\"#A0522D\") {\n        // Top edge finger impressions\n        for(i = [0:6]) {\n            translate([\n                -tablet_width/2 + 10 + i * 10,\n                tablet_height/2 - 2,\n                0\n            ])\n                sphere(r = 2);\n        }\n        \n        // Side edge smoothing marks\n        for(i = [0:4]) {\n            translate([\n                tablet_width/2 - 2,\n                -tablet_height/2 + 10 + i * 10,\n                0\n            ])\n                rotate([0, 90, 0])\n                    cylinder(h = 3, r1 = 1, r2 = 1);\n        }\n    }\n}\n\n// Module for cuneiform wedge impressions\nmodule cuneiform_wedge() {\n    difference() {\n        cube([3, 1.5, 1.5], center = true);\n        translate([0, 0, 0.5])\n            rotate([0, 45, 0])\n                cube([4, 2, 2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "page",
    "openscad_code": "// Medieval Illuminated Manuscript Page - Realistic Style\n// Based on 13th century Gothic script manuscripts\n\n// Overall dimensions\npage_width = 80;\npage_height = 60;\npage_thickness = 2;\n\n// Colors\nparchment_color = \"#f5e6d3\";\nink_color = \"#2f1b14\";\ngold_color = \"#d4af37\";\nred_color = \"#8b0000\";\n\n// Main page module\nmodule manuscript_page() {\n    // Base parchment\n    color(parchment_color) {\n        difference() {\n            // Main page body\n            translate([0, 0, -page_thickness/2])\n                cube([page_width, page_height, page_thickness], center=true);\n            \n            // Rounded corners\n            translate([page_width/2-5, page_height/2-5, -page_thickness/2-0.1])\n                cylinder(h=page_thickness+0.2, r=5, $fn=20);\n            translate([-page_width/2+5, page_height/2-5, -page_thickness/2-0.1])\n                cylinder(h=page_thickness+0.2, r=5, $fn=20);\n            translate([page_width/2-5, -page_height/2+5, -page_thickness/2-0.1])\n                cylinder(h=page_thickness+0.2, r=5, $fn=20);\n            translate([-page_width/2+5, -page_height/2+5, -page_thickness/2-0.1])\n                cylinder(h=page_thickness+0.2, r=5, $fn=20);\n        }\n    }\n    \n    // Decorated initial capital\n    module initial_capital() {\n        color(gold_color) {\n            translate([-page_width/2+10, page_height/2-15, page_thickness/2])\n                linear_extrude(height=0.5)\n                    text(\"I\", size=10, font=\"serif:style=Bold\");\n        }\n        \n        // Red/blue penwork decoration around initial\n        color(red_color) {\n            translate([-page_width/2+8, page_height/2-13, page_thickness/2+0.1])\n                for(i=[0:3]) {\n                    rotate([0, 0, i*90])\n                        translate([0, -2, 0])\n                            cube([0.5, 4, 0.3]);\n                }\n        }\n    }\n    \n    // Gothic text lines\n    module text_lines() {\n        color(ink_color) {\n            for(line=[0:5]) {\n                translate([-page_width/2+15, page_height/2-20-line*7, page_thickness/2+0.1])\n                    linear_extrude(height=0.2)\n                        text(\"Lorem ipsum dolor sit amet consectetur\", \n                             size=3, font=\"serif:style=Bold\");\n            }\n        }\n    }\n    \n    // Marginal decoration\n    module marginalia() {\n        // Left margin vine decoration\n        color([0.2, 0.4, 0.1]) {\n            translate([-page_width/2+3, -page_height/2+10, page_thickness/2+0.1]) {\n                for(i=[0:8]) {\n                    rotate([0, 0, i*20])\n                        translate([0, i*3, 0])\n                            cylinder(h=0.3, r=0.5);\n                }\n            }\n        }\n        \n        // Red rubrication marks\n        color(red_color) {\n            translate([-page_width/2+5, page_height/2-25, page_thickness/2+0.2])\n                cube([1, 20, 0.2]);\n            translate([-page_width/2+5, page_height/2-46, page_thickness/2+0.2])\n                cube([1, 20, 0.2]);\n        }\n    }\n    \n    // Illuminated border\n    module border() {\n        color(gold_color) {\n            translate([0, page_height/2-5, page_thickness/2+0.1])\n                cube([page_width-10, 0.5, 0.5]);\n            translate([0, -page_height/2+5, page_thickness/2+0.1])\n                cube([page_width-10, 0.5, 0.5]);\n            translate([page_width/2-5, 0, page_thickness/2+0.1])\n                cube([0.5, page_height-10, 0.5]);\n            translate([-page_width/2+5, 0, page_thickness/2+0.1])\n                cube([0.5, page_height-10, 0.5]);\n        }\n        \n        // Corner decorations\n        for(x=[-1:1:1]) {\n            for(y=[-1:1:1]) {\n                translate([x*(page_width/2-5), y*(page_height/2-5), page_thickness/2+0.2]) {\n                    color(red_color) {\n                        cylinder(h=0.3, r=1.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Wax seal impression\n    module wax_seal() {\n        color(\"#8b4513\") {\n            translate([page_width/2-10, -page_height/2+10, page_thickness/2+0.1]) {\n                cylinder(h=1, r=4, $fn=32);\n                translate([0, 0, 1])\n                    cylinder(h=0.5, r=3, $fn=32);\n                // Seal impression\n                translate([0, 0, 1.5])\n                    linear_extrude(height=0.2)\n                        circle(r=2.5, $fn=6);\n            }\n        }\n    }\n    \n    // Assemble all elements\n    initial_capital();\n    text_lines();\n    marginalia();\n    border();\n    wax_seal();\n}\n\n// Generate the complete manuscript page\nmanuscript_page();",
    "renders": true
  },
  {
    "historical_artifact": "signature",
    "openscad_code": "// Rosetta Stone Replica (196 BCE) - 3D printable historical artifact\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main stone dimensions (mm)\nstone_width = 90;\nstone_height = 70;\nstone_depth = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\nmodule rosetta_stone() {\n    // Main stone body with slight erosion\n    difference() {\n        // Main block\n        color([0.7, 0.65, 0.55])  // Sandstone color\n        cube([stone_width, stone_height, stone_depth], center=true);\n        \n        // Top erosion\n        translate([0, stone_height/2 - 2, stone_depth/2 - 1])\n            cube([stone_width, 4, 2], center=true);\n    }\n    \n    // Rounded edges\n    translate([stone_width/2 - 2, 0, 0])\n        rotate([0, 0, 90])\n        cylinder(h=stone_height, r=2, center=true);\n    translate([-stone_width/2 + 2, 0, 0])\n        rotate([0, 0, 90])\n        cylinder(h=stone_height, r=2, center=true);\n}\n\nmodule hieroglyph_block(x, y, size) {\n    // Simplified hieroglyphics pattern\n    translate([x, y, stone_depth/2 + 0.1]) {\n        for(i=[0:3]) {\n            for(j=[0:2]) {\n                translate([i*size/4 - size/2, j*size/4 - size/2, 0])\n                    color([0.1, 0.1, 0.1])\n                    cube([size/8, size/8, 0.2], center=true);\n            }\n        }\n    }\n}\n\nmodule demotic_text(x, y, width, height) {\n    // Demotic script section\n    translate([x, y, stone_depth/2 + 0.1]) {\n        for(i=[0:5]) {\n            rotate([0, 0, 45])\n            translate([i*2 - width/2, 0, 0])\n                color([0.05, 0.05, 0.05])\n                cube([1, height, 0.2], center=true);\n        }\n    }\n}\n\nmodule greek_text(x, y, width, height) {\n    // Greek text section\n    translate([x, y, stone_depth/2 + 0.1]) {\n        for(i=[0:8]) {\n            translate([i*width/9 - width/2 + width/18, 0, 0])\n                color([0.05, 0.05, 0.05])\n                cube([width/12, height, 0.2], center=true);\n        }\n    }\n}\n\nmodule inscription_lines() {\n    // Top section - Hieroglyphics\n    hieroglyph_block(-15, 25, 30, 20);\n    \n    // Middle section - Demotic\n    demotic_text(0, 0, 80, 15);\n    \n    // Bottom section - Greek\n    greek_text(0, -20, 80, 10);\n}\n\nmodule weathering() {\n    // Surface weathering details\n    for(i=[0:10]) {\n        rotate([0, 0, i*36])\n        translate([cos(i*36)*20, sin(i*36)*15, stone_depth/2])\n            color([0.6, 0.55, 0.45])\n            sphere(r=1.5);\n    }\n}\n\nmodule mounting_holes() {\n    // 3D printing friendly mounting holes\n    translate([stone_width/2 - 10, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=2, center=true);\n    translate([-stone_width/2 + 10, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=2, center=true);\n}\n\n// Main assembly\nunion() {\n    rosetta_stone();\n    \n    // Inscriptions\n    inscription_lines();\n    \n    // Surface details\n    weathering();\n    \n    // Optional mounting holes (uncomment for printing)\n    // mounting_holes();\n}\n\n// Base stand\ntranslate([0, 0, -stone_depth/2 - 5])\n    color([0.4, 0.3, 0.2])\n    cube([100, 80, 2], center=true);",
    "renders": true
  },
  {
    "historical_artifact": "catchword",
    "openscad_code": "// Historical Catchword Artifact - 16th Century Printer's Catchword Block\n// Realistic style, medium complexity\n// Size: 80mm x 60mm x 15mm (suitable for 3D printing)\n\n// Overall dimensions\nblock_width = 80;\nblock_height = 60;\nblock_thickness = 15;\n\n// Wood texture parameters\ngrain_spacing = 2;\ngrain_depth = 0.3;\n\n// Main wooden block base with wood grain texture\nmodule wooden_block() {\n    difference() {\n        // Main block body\n        color([0.4, 0.25, 0.1]) \n        cube([block_width, block_height, block_thickness], center=true);\n        \n        // Add wood grain texture on top surface\n        for(i = [-block_width/2+5 : grain_spacing : block_width/2-5]) {\n            translate([i, 0, block_thickness/2 + 0.01])\n            color([0.35, 0.2, 0.08])\n            cube([0.3, block_height-10, grain_depth]);\n        }\n    }\n}\n\n// Raised catchword text \"sub\" in Gothic blackletter style\nmodule catchword_text() {\n    // Letter S\n    translate([-20, 10, -block_thickness/2 + 1])\n    color([0.1, 0.1, 0.1])\n    union() {\n        cylinder(h=2, r=6, $fn=20);\n        translate([-6, 0, 0])\n        cube([12, 3, 2]);\n        translate([-6, -6, 0])\n        cube([12, 3, 2]);\n    }\n    \n    // Letter U\n    translate([-5, 10, -block_thickness/2 + 1])\n    color([0.1, 0.1, 0.1])\n    difference() {\n        cube([12, 12, 2]);\n        translate([2, 2, -0.1])\n        cube([8, 10, 2.2]);\n    }\n    \n    // Letter B\n    translate([10, 10, -block_thickness/2 + 1])\n    color([0.1, 0.1, 0.1])\n    union() {\n        cube([3, 12, 2]);\n        translate([1.5, 10.5, 0])\n        cylinder(h=2, r=4.5, $fn=20);\n        translate([1.5, 1.5, 0])\n        cylinder(h=2, r=4.5, $fn=20);\n    }\n}\n\n// Decorative border with period-appropriate ornamentation\nmodule decorative_border() {\n    // Top and bottom borders with leaf motifs\n    for(side = [-1, 1]) {\n        translate([0, side * (block_height/2 - 3), 0])\n        color([0.3, 0.15, 0.05])\n        cube([block_width-10, 1.5, 1]);\n        \n        // Small leaf shapes\n        for(i = [-30 : 10 : 30]) {\n            translate([i, side * (block_height/2 - 3), 1])\n            color([0.25, 0.12, 0.05])\n            scale([1, side, 1])\n            rotate([90, 0, 0])\n            cylinder(h=2, r1=2, r2=0, $fn=6);\n        }\n    }\n    \n    // Side borders\n    for(side = [-1, 1]) {\n        translate([side * (block_width/2 - 2), 0, 0])\n        color([0.3, 0.15, 0.05])\n        cube([1.5, block_height-10, 1]);\n    }\n}\n\n// Printer's mark (small decorative element typical of period)\nmodule printers_mark() {\n    translate([0, -15, -block_thickness/2 + 1])\n    color([0.15, 0.15, 0.15])\n    difference() {\n        // Rosette base\n        cylinder(h=2, r=8, $fn=24);\n        \n        // Cut out center\n        cylinder(h=2.2, r=4, $fn=24);\n        \n        // Add spokes\n        for(angle = [0 : 30 : 330]) {\n            rotate([0, 0, angle])\n            translate([6, 0, 0])\n            cube([3, 1.5, 2.2]);\n        }\n    }\n}\n\n// Handle holes for printer's fingers\nmodule handle_holes() {\n    for(side = [-1, 1]) {\n        translate([side * 30, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=4, $fn=16);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        wooden_block();\n        catchword_text();\n        decorative_border();\n        printers_mark();\n    }\n    \n    handle_holes();\n}\n\n// Add slight chamfer to bottom edges for printability\ntranslate([0, 0, -block_thickness/2 - 0.1])\ncolor([0.4, 0.25, 0.1])\ncylinder(h=0.5, r1=block_width/2, r2=block_width/2-1, $fn=64);",
    "renders": true
  },
  {
    "historical_artifact": "watermark",
    "openscad_code": "// Renaissance papermaker's brass wire watermark mould (c. 1550)\n// Typical mould size: 40×30 cm, adapted here to 80×60 mm\n// Features laid wires, chain wires, and a hand-laid watermark design\n\n$fn=32;\n\n// Overall dimensions scaled for 3D printing\nmould_width = 80;\nmould_height = 60;\nmould_thickness = 3;\nwire_diameter = 0.6;\nlaid_wire_spacing = 1.2;\nchain_wire_spacing = 6;\n\nmodule watermark_mould() {\n    color(\"goldenrod\") {\n        // Main wooden frame\n        difference() {\n            cube([mould_width, mould_height, mould_thickness], center=true);\n            \n            // Hollow out center for wire area\n            translate([0,0,-mould_thickness/2+0.5])\n                cube([mould_width-6, mould_height-6, mould_thickness+1], center=true);\n        }\n        \n        // Frame edges\n        translate([0,0,mould_thickness/2]) {\n            // Long sides\n            for(side=[-1,1]) {\n                translate([0, side*(mould_height/2-1.5), 0])\n                    cube([mould_width-2, 3, 3], center=true);\n            }\n            \n            // Short sides\n            for(side=[-1,1]) {\n                translate([side*(mould_width/2-1.5), 0, 0])\n                    cube([3, mould_height-2, 3], center=true);\n            }\n        }\n    }\n    \n    // Chain wires (thicker horizontal wires)\n    color(\"silver\") {\n        for(y=[-mould_height/2+5 : chain_wire_spacing : mould_height/2-5]) {\n            translate([0, y, 0])\n                cube([mould_width-6, wire_diameter*1.5, wire_diameter], center=true);\n        }\n        \n        // Laid wires (thin vertical wires)\n        for(x=[-mould_width/2+5 : laid_wire_spacing : mould_width/2-5]) {\n            translate([x, 0, 0])\n                cube([wire_diameter, mould_height-6, wire_diameter], center=true);\n        }\n    }\n    \n    // Central watermark design - Florentine lily\n    color(\"silver\") translate([0,0,wire_diameter/2]) {\n        // Main stem\n        translate([0,-8,0]) \n            cylinder(h=wire_diameter, r1=1, r2=1);\n        \n        // Lily petals\n        for(angle=[0,120,240]) {\n            rotate([0,0,angle]) \n                translate([0,4,0]) \n                    cylinder(h=wire_diameter, r1=2.5, r2=0.5);\n        }\n        \n        // Crown above lily\n        translate([0,10,0]) {\n            for(i=[-1,0,1]) {\n                translate([i*2,0,0]) \n                    cylinder(h=wire_diameter, r1=1, r2=1);\n            }\n        }\n        \n        // Connecting wires\n        color(\"silver\") {\n            translate([0,1,0]) \n                cube([0.6, 10, wire_diameter], center=true);\n            translate([0,-5,0]) \n                cube([3, 0.6, wire_diameter], center=true);\n        }\n    }\n    \n    // Corner reinforcements\n    color(\"goldenrod\") {\n        for(x=[-1,1]) {\n            for(y=[-1,1]) {\n                translate([x*(mould_width/2-3), y*(mould_height/2-3), 0])\n                    cylinder(h=mould_thickness*1.5, r=3, center=true);\n            }\n        }\n    }\n    \n    // Maker's mark on frame\n    color(\"silver\") translate([mould_width/2-2, 0, mould_thickness/2+1]) {\n        rotate([90,0,0])\n            linear_extrude(height=0.5) {\n                text(\"FLORENCE 1552\", size=2, halign=\"center\");\n            }\n    }\n}\n\n// Display the mould at slight angle for viewing\nrotate([15,0,0]) watermark_mould();",
    "renders": true
  },
  {
    "historical_artifact": "countermark",
    "openscad_code": "// Countermark historical artifact - Roman military countermark on a denarius coin\n// Realistic style with medium complexity\n// Features imperial countermark stamp on a silver denarius with realistic proportions\n\n// Overall dimensions for 3D printing\ncoin_diameter = 20;\ncoin_thickness = 2;\ncountermark_size = 8;\ncountermark_depth = 0.5;\n\n// Colors\nsilver = [0.75, 0.75, 0.75];\nbronze = [0.8, 0.5, 0.2];\n\n// Main coin body\nmodule coin_body() {\n    color(silver)\n    difference() {\n        // Basic coin disc\n        cylinder(h=coin_thickness, d=coin_diameter, $fn=100);\n        \n        // Create realistic rim\n        translate([0, 0, -0.1])\n        cylinder(h=coin_thickness + 0.2, d=coin_diameter - 2, $fn=100);\n    }\n}\n\n// Roman imperial countermark - stylized IMP (Imperator) stamp\nmodule countermark() {\n    color(bronze)\n    translate([0, 0, coin_thickness])\n    linear_extrude(height=countermark_depth)\n    union() {\n        // Letter I\n        translate([-2, 0, 0])\n        square([1, 6]);\n        \n        // Letter M\n        translate([0, 0, 0]) {\n            // Left vertical\n            square([1, 6]);\n            // Diagonal\n            translate([1, 0, 0])\n            polygon(points=[[0,0], [0,6], [2,6]]);\n            // Right vertical\n            translate([2, 0, 0])\n            square([1, 6]);\n        }\n        \n        // Letter P\n        translate([4, 0, 0]) {\n            // Left vertical\n            square([1, 6]);\n            // Top horizontal\n            translate([1, 5, 0])\n            square([2, 1]);\n            // Right vertical (partial)\n            translate([3, 3, 0])\n            square([1, 3]);\n            // Bottom horizontal\n            translate([1, 3, 0])\n            square([2, 1]);\n        }\n    }\n}\n\n// Decorative border pattern on coin edge\nmodule coin_edge() {\n    color(silver)\n    difference() {\n        // Create raised edge\n        cylinder(h=coin_thickness, d=coin_diameter, $fn=100);\n        \n        // Inner recessed area\n        translate([0, 0, -0.1])\n        cylinder(h=coin_thickness + 0.2, d=coin_diameter - 1, $fn=100);\n    }\n    \n    // Small decorative beads along edge\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([coin_diameter/2 - 0.5, 0, coin_thickness/2])\n        sphere(d=0.5, $fn=8);\n    }\n}\n\n// Obverse side - basic imperial portrait outline\nmodule obverse_portrait() {\n    color(silver)\n    translate([0, 0, coin_thickness])\n    difference() {\n        // Head outline\n        translate([0, 2, 0])\n        scale([0.8, 1, 1])\n        sphere(d=12, $fn=50);\n        \n        // Neck\n        translate([0, -3, 0])\n        cube([4, 6, coin_thickness], center=true);\n    }\n}\n\n// Reverse side - basic military standards\nmodule reverse_standards() {\n    color(silver)\n    translate([0, 0, 0])\n    union() {\n        // Left standard\n        translate([-4, 0, 0])\n        union() {\n            // Pole\n            cube([0.5, 10, 0.5], center=true);\n            // Top decoration\n            translate([0, 5.5, 0])\n            sphere(d=1.5, $fn=8);\n        }\n        \n        // Center standard\n        translate([0, 0, 0])\n        union() {\n            // Pole\n            cube([0.5, 10, 0.5], center=true);\n            // Top decoration\n            translate([0, 5.5, 0])\n            sphere(d=1.5, $fn=8);\n        }\n        \n        // Right standard\n        translate([4, 0, 0])\n        union() {\n            // Pole\n            cube([0.5, 10, 0.5], center=true);\n            // Top decoration\n            translate([0, 5.5, 0])\n            sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main coin\n    coin_body();\n    \n    // Edge decoration\n    coin_edge();\n    \n    // Countermark (offset from center as historically accurate)\n    translate([3, -2, 0])\n    countermark();\n    \n    // Obverse side details\n    obverse_portrait();\n    \n    // Reverse side details (mirrored)\n    translate([0, 0, coin_thickness])\n    mirror([0, 0, 1])\n    reverse_standards();\n}",
    "renders": true
  },
  {
    "historical_artifact": "wiremark",
    "openscad_code": "// Wiremark Historical Artifact - Ancient Roman Lead Seal\n// Realistic style with medium complexity\n// Overall dimensions: 60mm diameter, 8mm thick\n\n// Color definitions\ncolor_lead = [0.6, 0.6, 0.65];\ncolor_patina = [0.4, 0.5, 0.45];\n\n// Main body - circular lead seal\nmodule lead_seal_body() {\n    color(color_lead) {\n        // Main disc\n        cylinder(h = 8, d = 60, $fn = 64);\n        \n        // Raised border\n        translate([0, 0, 6]) {\n            cylinder(h = 2, d1 = 58, d2 = 56, $fn = 64);\n        }\n    }\n}\n\n// Central wire channel\nmodule wire_channel() {\n    color(color_lead) {\n        // Main channel\n        translate([0, 0, -1]) {\n            cylinder(h = 10, d = 8, $fn = 32);\n        }\n        \n        // Counter-sink on top\n        translate([0, 0, 8]) {\n            cylinder(h = 2, d1 = 12, d2 = 8, $fn = 32);\n        }\n    }\n}\n\n// Imperial inscription band\nmodule inscription_band() {\n    color(color_patina) {\n        translate([0, 0, 6]) {\n            difference() {\n                cylinder(h = 1, d = 52, $fn = 128);\n                // Roman numerals relief\n                for(i = [0:11]) {\n                    rotate([0, 0, i * 30]) {\n                        translate([22, 0, 0]) {\n                            cube([2, 1, 1], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Imperial eagle motif\nmodule imperial_eagle() {\n    color(color_lead) {\n        translate([0, 0, 3]) {\n            // Eagle body\n            cube([20, 15, 2], center = true);\n            \n            // Eagle head\n            translate([12, 0, 1]) {\n                cube([8, 6, 3], center = true);\n            }\n            \n            // Wings - left\n            translate([-5, 10, 1]) {\n                rotate([0, 0, -30]) {\n                    cube([15, 5, 1.5], center = true);\n                }\n            }\n            \n            // Wings - right\n            translate([-5, -10, 1]) {\n                rotate([0, 0, 30]) {\n                    cube([15, 5, 1.5], center = true);\n                }\n            }\n            \n            // Tail\n            translate([-10, 0, 1]) {\n                rotate([0, 0, 180]) {\n                    cube([8, 10, 1], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Reinforcement ribs on back\nmodule reinforcement_ribs() {\n    color(color_lead) {\n        for(angle = [0:45:135]) {\n            rotate([0, 0, angle]) {\n                translate([0, 0, 0]) {\n                    cube([40, 3, 2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Patina spots for aging effect\nmodule patina_spots() {\n    color(color_patina) {\n        for(i = [0:15]) {\n            rotate([0, 0, i * 23]) {\n                translate([20 + (i % 3) * 5, 0, 7.5]) {\n                    sphere(d = 1 + (i % 2), $fn = 16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    lead_seal_body();\n    \n    difference() {\n        // Main body with channel\n        wire_channel();\n        \n        // Cut the channel through\n        translate([0, 0, -2]) {\n            cylinder(h = 12, d = 8.5, $fn = 32);\n        }\n    }\n    \n    // Front decorations\n    inscription_band();\n    imperial_eagle();\n    \n    // Back structure\n    translate([0, 0, -0.5]) {\n        reinforcement_ribs();\n    }\n    \n    // Aging effects\n    patina_spots();\n}",
    "renders": true
  },
  {
    "historical_artifact": "chainline",
    "openscad_code": "// Chainline Historical Artifact - Roman Military Chain Segment\n// A realistic representation of a Roman lorica hamata chain link segment\n// Used for 3D printing - no overhangs, proper wall thickness\n\n$fn = 64;  // Smooth curves for realistic appearance\n\n// Main module for the chain segment\nmodule chain_segment() {\n    // Overall dimensions: 60mm x 45mm x 8mm\n    color([0.7, 0.6, 0.5])  // Bronze-like color\n    \n    // Create base plate for structure\n    translate([0, 0, 0]) {\n        difference() {\n            // Main backing plate\n            cube([60, 45, 2], center = true);\n            \n            // Central decorative opening\n            translate([0, 0, 0.5]) {\n                cylinder(h = 3, r = 12, center = true);\n            }\n            \n            // Four corner rivet holes\n            for (x = [-25, 25])\n                for (y = [-18, 18])\n                    translate([x, y, 0.5]) {\n                        cylinder(h = 3, r = 2, center = true);\n                    }\n        }\n    }\n    \n    // Generate chain links in a 4x3 grid pattern\n    for (i = [0:3])\n        for (j = [0:2]) {\n            translate([-22.5 + i*15, -15 + j*15, 3]) {\n                chain_link();\n            }\n        }\n    \n    // Decorative border\n    translate([0, 0, 1]) {\n        difference() {\n            cube([64, 49, 1], center = true);\n            cube([58, 43, 2], center = true);\n        }\n    }\n    \n    // Historical inscription\n    translate([0, -20, 4]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height = 1) {\n                text(\"SPQR\", size = 6, halign = \"center\", font = \"Liberation Sans:style=Bold\");\n            }\n        }\n    }\n}\n\n// Individual chain link module\nmodule chain_link() {\n    // Each link is 8mm diameter, 3mm thick\n    rotate([90, 0, 0]) {\n        difference() {\n            // Main ring\n            cylinder(h = 3, r = 4, center = true);\n            \n            // Inner hole\n            cylinder(h = 4, r = 2.5, center = true);\n        }\n    }\n    \n    // Add subtle rivet detail\n    translate([0, 0, 1.5]) {\n        color([0.8, 0.7, 0.6])  // Lighter bronze for highlights\n        cylinder(h = 0.5, r = 1, center = true);\n    }\n}\n\n// Generate the complete artifact\nchain_segment();\n\n// Add mounting loop for display\ntranslate([0, 25, 0]) {\n    rotate([90, 0, 0]) {\n        difference() {\n            // Outer loop\n            torus(4, 1.5);\n            \n            // Cut for string\n            translate([0, 0, -1.6]) {\n                cube([9, 3.5, 3.2], center = true);\n            }\n        }\n    }\n}\n\n// Helper module for torus shape\nmodule torus(major, minor) {\n    rotate_extrude() {\n        translate([major, 0, 0]) {\n            circle(r = minor);\n        }\n    }\n}",
    "renders": true
  },
  {
    "historical_artifact": "laidline",
    "openscad_code": "// Laidline historical artifact - Roman wax tablet with laid paper texture\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\ntablet_width = 80;\ntablet_height = 60;\ntablet_thickness = 8;\nwall_thickness = 3;\n\n// Wood texture parameters\ngroove_width = 0.8;\ngroove_depth = 0.5;\ngroove_spacing = 2.5;\n\n// Wax recess parameters\nwax_depth = 4;\nwax_margin = 5;\n\n// Hinge parameters\nhinge_radius = 3;\nhinge_length = 10;\nhinge_gap = 1;\n\n// Laid line paper texture parameters\nlaid_line_spacing = 0.8;\nlaid_line_width = 0.2;\nlaid_line_depth = 0.1;\nchain_line_spacing = 10;\nchain_line_width = 0.4;\n\nmodule wood_grooves(width, height, depth) {\n    for (x = [groove_spacing/2 : groove_spacing : width]) {\n        translate([x, 0, -depth/2])\n            cube([groove_width, height, depth], center = true);\n    }\n}\n\nmodule laid_texture(width, height) {\n    // Laid lines (horizontal)\n    for (y = [laid_line_spacing/2 : laid_line_spacing : height]) {\n        translate([width/2, y, -laid_line_depth/2])\n            cube([width, laid_line_width, laid_line_depth], center = true);\n    }\n    \n    // Chain lines (vertical)\n    for (x = [chain_line_spacing/2 : chain_line_spacing : width]) {\n        translate([x, height/2, -laid_line_depth/2])\n            cube([chain_line_width, height, laid_line_depth], center = true);\n    }\n}\n\nmodule wax_tablet() {\n    difference() {\n        // Main tablet body\n        union() {\n            // Outer shell\n            color(\"saddlebrown\")\n            cube([tablet_width, tablet_height, tablet_thickness], center = true);\n            \n            // Wood grain texture on back\n            translate([0, 0, tablet_thickness/2 - groove_depth/2])\n                wood_grooves(tablet_width, tablet_height, groove_depth);\n        }\n        \n        // Wax recess\n        translate([0, 0, tablet_thickness/2 - wax_depth/2])\n            cube([tablet_width - 2*wax_margin, tablet_height - 2*wax_margin, wax_depth], center = true);\n        \n        // Hinge holes\n        translate([tablet_width/2 - hinge_gap - hinge_radius, tablet_height/2 - hinge_length/2, 0])\n            rotate([90, 0, 0])\n            cylinder(h = tablet_thickness, r = hinge_radius, center = true);\n            \n        translate([tablet_width/2 - hinge_gap - hinge_radius, -tablet_height/2 + hinge_length/2, 0])\n            rotate([90, 0, 0])\n            cylinder(h = tablet_thickness, r = hinge_radius, center = true);\n    }\n    \n    // Wax layer with laid paper texture\n    translate([0, 0, tablet_thickness/2 - wax_depth + 0.5])\n    color(\"darkgoldenrod\")\n    difference() {\n        cube([tablet_width - 2*wax_margin - 1, tablet_height - 2*wax_margin - 1, wax_depth - 1], center = true);\n        \n        // Laid paper texture on wax\n        laid_texture(tablet_width - 2*wax_margin - 2, tablet_height - 2*wax_margin - 2);\n    }\n    \n    // Reinforcement corners\n    corner_size = 5;\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*(tablet_width/2 - corner_size/2), y*(tablet_height/2 - corner_size/2), 0])\n            color(\"saddlebrown\")\n            difference() {\n                cube([corner_size, corner_size, tablet_thickness], center = true);\n                cylinder(h = tablet_thickness + 1, r = corner_size/2, center = true);\n            }\n        }\n    }\n}\n\n// Create the tablet\nwax_tablet();",
    "renders": true
  },
  {
    "historical_artifact": "wireline",
    "openscad_code": "// Wireline Logging Tool - 1950s Schlumberger \"Sonde\" \n// A realistic 1:20 scale model of an early resistivity logging tool\n\n// Overall dimensions: 100mm long, 20mm diameter\n\n// Colors\ncolor_base = \"silver\";\ncolor_insulator = \"darkblue\";\ncolor_contact = \"gold\";\n\n// Main parameters\ntool_length = 100;\ntool_diameter = 20;\nwall_thickness = 1.5;\nsegment_length = 15;\n\n// Central mandrel\nmodule mandrel() {\n    color(color_base)\n    cylinder(h=tool_length, d=tool_diameter - 2*wall_thickness, $fn=32);\n}\n\n// Insulating sleeve with ribs\nmodule insulator() {\n    color(color_insulator)\n    difference() {\n        union() {\n            // Main sleeve\n            cylinder(h=segment_length*2, d=tool_diameter, $fn=32);\n            \n            // Insulating ribs\n            for(i = [0:3]) {\n                translate([0, 0, i*5])\n                cylinder(h=1.5, d=tool_diameter+2, $fn=32);\n            }\n        }\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cylinder(h=segment_length*2+2, d=tool_diameter-2*wall_thickness, $fn=32);\n    }\n}\n\n// Electrode section\nmodule electrode() {\n    color(color_contact)\n    union() {\n        // Contact ring\n        cylinder(h=3, d=tool_diameter-1, $fn=32);\n        \n        // Contact screws (4 around)\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([tool_diameter/2-2, 0, 1.5])\n            cylinder(h=2, d=1.5, $fn=8);\n        }\n    }\n}\n\n// Pressure housing with threaded connector\nmodule housing() {\n    color(color_base)\n    difference() {\n        union() {\n            // Main housing\n            cylinder(h=segment_length*1.5, d=tool_diameter, $fn=32);\n            \n            // Threaded connector\n            translate([0, 0, segment_length*1.5])\n            cylinder(h=8, d=tool_diameter-4, $fn=32);\n            \n            // Thread detail\n            for(i = [0:5]) {\n                translate([0, 0, segment_length*1.5 + i*1.2])\n                cylinder(h=0.8, d=tool_diameter-3.2, $fn=32);\n            }\n        }\n        \n        // Central bore\n        translate([0, 0, -1])\n        cylinder(h=segment_length*1.5+10, d=tool_diameter-2*wall_thickness, $fn=32);\n    }\n}\n\n// Cable head with strain relief\nmodule cable_head() {\n    color(color_base)\n    union() {\n        // Head body\n        cylinder(h=12, d=tool_diameter-2, $fn=32);\n        \n        // Cable gland\n        translate([0, 0, 12])\n        cylinder(h=8, d=8, $fn=32);\n        \n        // Strain relief fins\n        for(i = [0:4]) {\n            rotate([0, 0, i*45])\n            translate([0, 5, 6])\n            cube([1, 3, 8], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Central structure\n    mandrel();\n    \n    // First section - housing\n    translate([0, 0, 0])\n    housing();\n    \n    // Insulator section\n    translate([0, 0, 25])\n    insulator();\n    \n    // Electrode section 1\n    translate([0, 0, 60])\n    electrode();\n    \n    // Second insulator\n    translate([0, 0, 67])\n    insulator();\n    \n    // Electrode section 2\n    translate([0, 0, 85])\n    electrode();\n    \n    // Cable head\n    translate([0, 0, 90])\n    cable_head();\n}\n\n// Identification markings\nmodule markings() {\n    color(\"black\")\n    translate([0, tool_diameter/2+0.1, 40])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.2)\n    text(\"SCHLUMBERGER\", size=2, halign=\"center\");\n    \n    translate([0, tool_diameter/2+0.1, 45])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.2)\n    text(\"ELECTRIC LOG\", size=1.5, halign=\"center\");\n}\n\nmarkings();",
    "renders": true
  },
  {
    "historical_artifact": "ruling",
    "openscad_code": "// The Code of Hammurabi - Babylonian Law Stele (c. 1754 BCE)\n// A medium-complexity 3D printable model with realistic proportions\n\n// Overall dimensions: ~60mm tall stele\n$fn = 32;\n\n// Main stele body with realistic proportions\nmodule stele_body() {\n    difference() {\n        // Main diorite block (dark gray)\n        color([0.3, 0.3, 0.35])\n        cube([30, 12, 55], center = true);\n        \n        // Rounded top characteristic of Babylonian steles\n        translate([0, 0, 27.5])\n        scale([1, 1, 0.3])\n        sphere(15);\n    }\n}\n\n// Relief of Hammurabi receiving laws from Shamash\nmodule relief_scene() {\n    translate([0, 6.2, 15])\n    scale([0.8, 0.1, 0.8])\n    color([0.4, 0.35, 0.3]) {\n        // Hammurabi figure (simplified standing figure)\n        translate([0, 0, -5])\n        cylinder(h = 15, r1 = 3, r2 = 3);\n        \n        // Shamash seated figure with rays\n        translate([-8, 0, 0])\n        cylinder(h = 12, r1 = 2.5, r2 = 2.5);\n        \n        // Sun rays\n        for(i = [-60:30:60]) {\n            rotate([0, 0, i])\n            translate([-8, 0, 6])\n            cube([8, 0.5, 1]);\n        }\n    }\n}\n\n// Cuneiform inscription bands\nmodule cuneiform_text() {\n    color([0.2, 0.2, 0.25])\n    for(z = [-20:7:20]) {\n        translate([0, 6.1, z])\n        scale([0.9, 0.05, 0.8])\n        cube([28, 1, 6]);\n    }\n}\n\n// Decorative border pattern\nmodule border_pattern() {\n    color([0.35, 0.3, 0.33])\n    // Top border\n    translate([0, 6.1, 22])\n    for(x = [-12:3:12]) {\n        translate([x, 0, 0])\n        cube([2, 0.1, 1]);\n    }\n    \n    // Side borders\n    for(side = [-1, 1]) {\n        translate([side * 14.5, 6.1, 0])\n        for(z = [-25:2.5:25]) {\n            translate([0, 0, z])\n            cube([0.5, 0.1, 1.5]);\n        }\n    }\n}\n\n// Base platform\nmodule base() {\n    color([0.25, 0.25, 0.3])\n    translate([0, 0, -30])\n    cube([35, 15, 5], center = true);\n}\n\n// Assemble the complete stele\nunion() {\n    base();\n    \n    translate([0, 0, -2.5])\n    stele_body();\n    \n    relief_scene();\n    cuneiform_text();\n    border_pattern();\n}",
    "renders": true
  },
  {
    "historical_artifact": "pricking",
    "openscad_code": "// Medieval parchment pricking wheel - used for creating guide holes in manuscripts\n// Based on 14th century examples from monastic scriptoriums\n\n$fn = 64;\n\n// Overall dimensions\nwheel_diameter = 75;\nhandle_length = 85;\nhandle_diameter = 12;\nprick_length = 8;\n\n// Main wheel with decorative elements\nmodule pricking_wheel() {\n    color(\"burlywood\") {\n        // Central wheel disc\n        difference() {\n            cylinder(h=8, d=wheel_diameter, center=true);\n            \n            // Central hole for handle\n            cylinder(h=10, d=handle_diameter, center=true);\n            \n            // Decorative inner ring\n            cylinder(h=9, d=wheel_diameter-8, center=true);\n        }\n        \n        // Reinforcement ring around edge\n        translate([0, 0, 4.5]) \n            cylinder(h=2, d=wheel_diameter+2, center=true);\n    }\n}\n\n// Pricking teeth around wheel edge\nmodule pricking_teeth() {\n    color(\"silver\") {\n        for(i = [0:15:359]) {\n            rotate([0, 0, i])\n            translate([wheel_diameter/2, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=prick_length, d1=2, d2=0.5, center=false);\n        }\n    }\n}\n\n// Wooden handle with grip rings\nmodule handle() {\n    color(\"saddlebrown\") {\n        // Main handle shaft\n        translate([-handle_length/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip rings\n        for(pos = [-30, -15, 0, 15, 30]) {\n            translate([pos, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=4, d=handle_diameter+2, center=true);\n        }\n        \n        // End cap\n        translate([handle_length/2, 0, 0])\n        rotate([0, 90, 0])\n        sphere(d=handle_diameter+2);\n    }\n}\n\n// Decorative cross pattern on wheel face\nmodule wheel_decoration() {\n    color(\"goldenrod\") {\n        // Cross arms\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n            translate([wheel_diameter/4, 0, 4.5])\n            cube([wheel_diameter/2-5, 3, 1], center=true);\n        }\n        \n        // Central decorative boss\n        translate([0, 0, 5])\n        cylinder(h=2, d=6, center=true);\n        \n        // Small rivet details\n        for(angle = [45:90:315]) {\n            rotate([0, 0, angle])\n            translate([wheel_diameter/3, 0, 5])\n            cylinder(h=1, d=3, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Wheel assembly\n    translate([-handle_length/2-10, 0, 0])\n    union() {\n        pricking_wheel();\n        pricking_teeth();\n        wheel_decoration();\n    }\n    \n    // Handle\n    handle();\n    \n    // Metal ferrule at wheel/handle junction\n    color(\"silver\") \n    translate([-handle_length/2-10, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=8, d=handle_diameter+4, center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "lining",
    "openscad_code": "// Roman leather armor lining (subarmalis) - realistic style\n// Medium complexity with historical accuracy\n// Overall size: 80mm height x 60mm width x 15mm depth\n\ncolor(\"saddlebrown\") \ndifference() {\n    // Main padded body\n    translate([0, 0, 5]) \n    scale([1, 1.2, 0.3])\n    cube([60, 50, 15], center=true);\n    \n    // Neck hole\n    translate([0, 15, 7])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=8, center=true);\n    \n    // Arm holes\n    translate([25, -5, 7])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=7, center=true);\n    \n    mirror([1, 0, 0])\n    translate([25, -5, 7])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=7, center=true);\n}\n\n// Padded quilting lines\nmodule quilting_line() {\n    color(\"burlywood\") \n    cube([60, 1, 3], center=true);\n}\n\nfor (i = [-20:10:20]) {\n    translate([0, i, 6.5])\n    quilting_line();\n}\n\n// Decorative leather edging\ncolor(\"saddlebrown\")\ndifference() {\n    translate([0, 0, 2.5])\n    scale([1.1, 1.3, 0.2])\n    cube([60, 50, 5], center=true);\n    \n    translate([0, 0, 2.5])\n    scale([1, 1.2, 0.3])\n    cube([60, 50, 5], center=true);\n}\n\n// Leather ties/laces for fastening\nmodule leather_tie() {\n    color(\"darkbrown\") \n    rotate([90, 0, 0])\n    cylinder(h=15, r=1, center=true);\n}\n\n// Left side ties\nfor (i = [-15:10:15]) {\n    translate([-32, i, 7])\n    leather_tie();\n}\n\n// Right side ties\nfor (i = [-15:10:15]) {\n    translate([32, i, 7])\n    leather_tie();\n}\n\n// Reinforced shoulder areas\ncolor(\"saddlebrown\")\nunion() {\n    translate([-20, 25, 8])\n    cube([15, 10, 3], center=true);\n    \n    translate([20, 25, 8])\n    cube([15, 10, 3], center=true);\n}\n\n// Decorative brass studs on shoulders\nmodule brass_stud() {\n    color(\"goldenrod\") \n    sphere(r=1.5);\n}\n\nfor (x = [-15:5:-5]) {\n    translate([x, 25, 9.5])\n    brass_stud();\n}\n\nfor (x = [5:5:15]) {\n    translate([x, 25, 9.5])\n    brass_stud();\n}\n\n// Back reinforcement strips\ncolor(\"burlywood\") \nfor (i = [-10:5:10]) {\n    translate([i, -20, 6])\n    cube([3, 10, 1], center=true);\n}",
    "renders": true
  },
  {
    "historical_artifact": "frame",
    "openscad_code": "// Egyptian Papyrus Frame inspired by New Kingdom cartouches (1550-1070 BCE)\n// Features lotus motifs and hieroglyphic border typical of temple and tomb art\n\n$fn = 64; // Smooth curves for realistic appearance\n\n// Main frame dimensions - sized for 3D printing\nframe_width = 60;\nframe_height = 70;\nframe_thickness = 8;\nborder_width = 6;\n\n// Colors for realistic appearance\nframe_color = \"BurlyWood\";\naccent_color = \"DarkGoldenrod\";\n\n// Main frame base\nmodule frame_base() {\n    color(frame_color)\n    difference() {\n        // Outer frame\n        cube([frame_width, frame_height, frame_thickness], center = true);\n        \n        // Inner opening for papyrus\n        translate([0, 0, frame_thickness/2 - 1])\n        cube([frame_width - 2*border_width, frame_height - 2*border_width, frame_thickness], center = true);\n    }\n}\n\n// Lotus flower motif - sacred to ancient Egyptians\nmodule lotus_motif() {\n    color(accent_color)\n    union() {\n        // Center of lotus\n        translate([0, 0, frame_thickness/2 + 0.1])\n        cylinder(h = 1, r = 2);\n        \n        // Petals around center\n        for (i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([0, 3, frame_thickness/2 + 0.1])\n            scale([1, 1.5, 1])\n            sphere(r = 1.5);\n        }\n    }\n}\n\n// Hieroglyphic border pattern\nmodule hieroglyph_border() {\n    color(accent_color)\n    // Top border\n    for (i = [-frame_width/2 + border_width : 5 : frame_width/2 - border_width]) {\n        translate([i, frame_height/2 - border_width/2, frame_thickness/2])\n        cube([2, 2, 1]);\n    }\n    \n    // Bottom border\n    for (i = [-frame_width/2 + border_width : 5 : frame_width/2 - border_width]) {\n        translate([i, -frame_height/2 + border_width/2, frame_thickness/2])\n        cube([2, 2, 1]);\n    }\n}\n\n// Corner decorations - ankh symbols simplified\nmodule corner_ankh() {\n    color(accent_color)\n    union() {\n        // Vertical stem\n        translate([0, 0, frame_thickness/2 + 0.1])\n        cube([1, 4, 1]);\n        \n        // Horizontal bar\n        translate([-1.5, 1.5, frame_thickness/2 + 0.1])\n        cube([4, 1, 1]);\n        \n        // Top loop\n        translate([0, 3.5, frame_thickness/2 + 0.1])\n        cylinder(h = 1, r = 2);\n    }\n}\n\n// Back mounting pegs for 3D printing stability\nmodule mounting_pegs() {\n    color(frame_color)\n    for (x = [-frame_width/3, frame_width/3]) {\n        for (y = [-frame_height/3, frame_height/3]) {\n            translate([x, y, -frame_thickness/2 - 1])\n            cylinder(h = 2, r = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame structure\n    frame_base();\n    \n    // Corner decorations\n    translate([frame_width/2 - border_width/2, frame_height/2 - border_width/2, 0])\n    rotate([0, 0, 0])\n    corner_ankh();\n    \n    translate([-frame_width/2 + border_width/2, frame_height/2 - border_width/2, 0])\n    rotate([0, 0, 90])\n    corner_ankh();\n    \n    translate([frame_width/2 - border_width/2, -frame_height/2 + border_width/2, 0])\n    rotate([0, 0, -90])\n    corner_ankh();\n    \n    translate([-frame_width/2 + border_width/2, -frame_height/2 + border_width/2, 0])\n    rotate([0, 0, 180])\n    corner_ankh();\n    \n    // Lotus motifs on sides\n    for (y = [-frame_height/2 + 10 : 15 : frame_height/2 - 10]) {\n        translate([frame_width/2 - border_width/2, y, 0])\n        lotus_motif();\n        \n        translate([-frame_width/2 + border_width/2, y, 0])\n        lotus_motif();\n    }\n    \n    // Hieroglyphic border\n    hieroglyph_border();\n    \n    // Mounting pegs for 3D printing\n    mounting_pegs();\n}",
    "renders": true
  },
  {
    "historical_artifact": "margin",
    "openscad_code": "// Medieval Ironclad Wooden Margin - Historical Battle Shield\n// Realistic style with medium complexity\n\n$fn = 36;\n\n// Overall dimensions\nshield_width = 80;\nshield_height = 95;\nshield_thickness = 6;\nboss_radius = 18;\nboss_height = 10;\nrim_thickness = 4;\n\n// Shield body with wood grain texture simulation\nmodule shield_body() {\n    color([0.4, 0.25, 0.15])  // Dark wood stain color\n    difference() {\n        // Main shield shape - elongated oval\n        scale([1, 1.2, 1])\n        cylinder(h = shield_thickness, r = shield_width/2, center = true);\n        \n        // Handle cutout on back\n        translate([0, -shield_height/3, -shield_thickness/2])\n            cube([30, 15, shield_thickness + 1], center = true);\n    }\n}\n\n// Iron boss (central dome)\nmodule iron_boss() {\n    color([0.3, 0.3, 0.3])  // Dark iron color\n    union() {\n        // Central dome\n        translate([0, 0, shield_thickness/2 + boss_height/2])\n            cylinder(h = boss_height, r = boss_radius, center = true);\n        \n        // Flared base ring\n        translate([0, 0, shield_thickness/2])\n            cylinder(h = 2, r1 = boss_radius + 3, r2 = boss_radius, center = false);\n    }\n}\n\n// Reinforced iron rim\nmodule iron_rim() {\n    color([0.25, 0.25, 0.25])  // Slightly darker iron\n    difference() {\n        // Outer rim\n        cylinder(h = shield_thickness + 2, r = shield_width/2 + rim_thickness, center = true);\n        \n        // Remove inner part\n        cylinder(h = shield_thickness + 3, r = shield_width/2, center = true);\n    }\n}\n\n// Decorative brass rivets around boss\nmodule rivets() {\n    color([0.8, 0.6, 0.2])  // Brass color\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([boss_radius + 8, 0, shield_thickness/2 + 1])\n            cylinder(h = 2, r = 1.5, center = false);\n    }\n}\n\n// Crossed leather straps on back\nmodule leather_straps() {\n    color([0.3, 0.2, 0.1])  // Dark leather brown\n    \n    // Vertical strap\n    translate([0, 0, -shield_thickness/2 - 0.5])\n        cube([8, shield_height - 20, 2], center = true);\n    \n    // Horizontal strap\n    translate([0, 0, -shield_thickness/2 - 0.5])\n        rotate([0, 0, 90])\n        cube([8, shield_width - 30, 2], center = true);\n}\n\n// Heraldic device - painted cross\nmodule heraldic_device() {\n    color([0.8, 0.1, 0.1])  // Deep red heraldic color\n    \n    // Vertical bar of cross\n    translate([0, shield_height/6, shield_thickness/2 + 0.5])\n        cube([8, 30, 1]);\n    \n    // Horizontal bar of cross\n    translate([0, shield_height/6, shield_thickness/2 + 0.5])\n        cube([30, 8, 1]);\n}\n\n// Battle damage simulation\nmodule battle_damage() {\n    color([0.35, 0.2, 0.1])  // Fresh wood color under damage\n    \n    // Sword cut marks\n    translate([shield_width/4, shield_height/3, 0])\n        rotate([0, 0, -30])\n        cube([15, 2, shield_thickness]);\n    \n    translate([-shield_width/4, -shield_height/4, 0])\n        rotate([0, 0, 45])\n        cube([12, 2, shield_thickness]);\n    \n    // Arrow puncture\n    translate([0, -shield_height/6, 0])\n        cylinder(h = shield_thickness + 1, r = 3, center = true);\n}\n\n// Main assembly\nunion() {\n    // Shield components\n    shield_body();\n    iron_rim();\n    iron_boss();\n    rivets();\n    heraldic_device();\n    \n    // Back components\n    translate([0, 0, 0])\n    leather_straps();\n    \n    // Battle damage (comment out for pristine shield)\n    battle_damage();\n}\n\n// Position for viewing\ntranslate([0, 0, shield_thickness/2])",
    "renders": true
  }
]