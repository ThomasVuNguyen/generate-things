[
  {
    "tool": "hammer",
    "openscad_code": "// Realistic 3D-printable hammer\n// Overall length ~90 mm, printable on FDM printer\n\n$fn = 32; // Smooth curves\n\n// Colors\nhandle_color = \"SaddleBrown\";\nmetal_color = \"Silver\";\ngrip_color = \"DarkRed\";\nmarking_color = \"Black\";\n\n// Main module\nmodule hammer() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 0]) handle();\n        // Head assembly\n        translate([0, 0, 35]) head();\n    }\n}\n\n// Handle with grip\nmodule handle() {\n    color(handle_color) {\n        // Main handle shaft\n        cylinder(h = 35, d1 = 10, d2 = 8, center = false);\n        \n        // Wider base for balance\n        translate([0, 0, -2]) cylinder(h = 4, d = 12);\n    }\n    \n    // Rubber grip rings\n    color(grip_color) {\n        for (i = [5:5:30]) {\n            translate([0, 0, i]) \n                difference() {\n                    cylinder(h = 3, d = 11);\n                    cylinder(h = 3.1, d = 9);\n                }\n        }\n    }\n}\n\n// Hammer head\nmodule head() {\n    color(metal_color) {\n        union() {\n            // Main head body\n            translate([0, 0, 0]) {\n                // Rectangular center\n                cube([20, 12, 25], center = true);\n            }\n            \n            // Claw (back end)\n            translate([0, 0, 18]) {\n                difference() {\n                    // Main claw shape\n                    union() {\n                        // Vertical section\n                        cube([12, 12, 15], center = true);\n                        // Curved claw\n                        rotate([90, 0, 0])\n                            cylinder(h = 8, d = 12);\n                    }\n                    // Remove center for claw gap\n                    translate([0, -6, 0])\n                        cube([8, 12, 20], center = true);\n                }\n            }\n            \n            // Strike face (front end)\n            translate([0, 0, -12.5]) {\n                // Main strike surface\n                cylinder(h = 2, d = 18);\n                \n                // Beveled edge\n                difference() {\n                    cylinder(h = 2, d = 22);\n                    cylinder(h = 2.1, d = 18);\n                }\n            }\n            \n            // Handle connection neck\n            translate([0, 0, -25]) {\n                cylinder(h = 8, d1 = 12, d2 = 10);\n            }\n        }\n    }\n    \n    // Manufacturer marking on side\n    color(marking_color) {\n        translate([10.1, 0, 8])\n            rotate([0, 90, 0])\n                linear_extrude(height = 0.5)\n                    text(\"HAMMER\", size = 3, halign = \"center\");\n    }\n}\n\n// Render the hammer\nhammer();",
    "renders": true
  },
  {
    "tool": "screwdriver",
    "openscad_code": "// Realistic medium-complexity screwdriver (â‰ˆ85 mm total)\n$fn = 50;\n\n// Overall dimensions\nhandle_len = 45;\nshaft_len  = 40;\ntip_len    = 6;\n\n// Module for the Phillips tip profile\nmodule phillips_tip(radius, depth) {\n    difference() {\n        cylinder(h = depth, r = radius, center = false);\n        for(a = [0:90:359])\n            rotate([0, 0, a])\n                translate([0, 0, -1])\n                    cube([radius*2.2, 1.2, depth + 2], center = true);\n    }\n}\n\n// Handle grip ridges\nmodule grip_ridges() {\n    color(\"DarkOrange\")\n    for(i = [0:3:handle_len-7]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h = 2, r1 = 10, r2 = 9.6);\n                cylinder(h = 2.1, r = 7.5);\n            }\n    }\n}\n\n// Handle main body\nmodule handle() {\n    color(\"SaddleBrown\") {\n        // Core\n        cylinder(h = handle_len, r = 10);\n\n        // End cap\n        translate([0, 0, handle_len])\n            cylinder(h = 4, r1 = 10, r2 = 8);\n\n        // Grip pattern\n        grip_ridges();\n    }\n}\n\n// Shaft\nmodule shaft() {\n    color(\"Silver\") {\n        // Main rod\n        cylinder(h = shaft_len, r = 3.5);\n\n        // Transition collar\n        translate([0, 0, -1])\n            cylinder(h = 3, r1 = 5, r2 = 3.5);\n    }\n}\n\n// Phillips tip\nmodule tip() {\n    color(\"Silver\")\n    translate([0, 0, shaft_len])\n        phillips_tip(radius = 3.5, depth = tip_len);\n}\n\n// Assembly\nhandle();\ntranslate([0, 0, handle_len])\n    shaft();\ntranslate([0, 0, handle_len + shaft_len])\n    tip();",
    "renders": true
  },
  {
    "tool": "wrench",
    "openscad_code": "// Realistic Wrench Tool - OpenSCAD\n// Medium complexity 3D printable wrench\n\n$fn = 50;\n\n// Main colors\n$wrench_color = [0.7, 0.7, 0.7];\n$grip_color = [0.2, 0.2, 0.2];\n\n// Overall dimensions\nwrench_length = 80;\nhandle_length = 55;\nhandle_width = 10;\nhandle_height = 8;\nhead_width = 18;\nhead_thickness = 8;\njaw_opening = 12;\njaw_depth = 6;\n\nmodule handle() {\n    color($grip_color) {\n        // Main handle body\n        translate([0, 0, -handle_height/2])\n            cube([handle_length, handle_width, handle_height], center=false);\n        \n        // Grip pattern - recessed grooves\n        for(i = [5:5:handle_length-10]) {\n            translate([i, handle_width/4, -handle_height/2])\n                cube([1, handle_width/2, handle_height], center=false);\n        }\n        \n        // End rounding\n        translate([handle_length-5, handle_width/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_width, r=5, center=true);\n    }\n}\n\nmodule hex_jaw() {\n    color($wrench_color) {\n        // Fixed jaw\n        translate([handle_length, 0, 0])\n            difference() {\n                // Main jaw body\n                cube([head_width, head_width, head_thickness], center=true);\n                \n                // Hex opening\n                translate([head_width/2, 0, 0])\n                    rotate([0, 0, 30])\n                        cylinder(h=head_thickness+2, r=jaw_opening/2/sin(60), center=true);\n                \n                // Cut to create jaw opening\n                translate([head_width/2, 0, -head_thickness/2-1])\n                    cube([jaw_depth*2, jaw_opening+2, head_thickness+2], center=true);\n            }\n        \n        // Movable jaw (simplified as fixed)\n        translate([handle_length, 0, 0])\n            cube([jaw_depth, jaw_opening, head_thickness], center=true);\n    }\n}\n\nmodule wrench_head() {\n    color($wrench_color) {\n        // Transition from handle to head\n        translate([handle_length-10, 0, 0])\n            union() {\n                // Tapered section\n                hull() {\n                    translate([0, -handle_width/2, -handle_height/2])\n                        cube([20, handle_width, handle_height]);\n                    translate([10, -head_width/2, -head_thickness/2])\n                        cube([1, head_width, head_thickness]);\n                }\n                \n                // Reinforcement ribs\n                for(side = [-1, 1]) {\n                    translate([handle_length-5, side*(handle_width/2+2), 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=8, r1=3, r2=1);\n                }\n            }\n        \n        // Head structure\n        hex_jaw();\n    }\n}\n\n// Size markings\nmodule markings() {\n    color([0, 0, 0]) {\n        // Metric size marking\n        translate([handle_length/2, handle_width+1, 0])\n            rotate([90, 0, 0])\n                linear_extrude(height=0.5)\n                    text(\"12mm\", size=3, halign=\"center\");\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    wrench_head();\n    markings();\n}",
    "renders": true
  },
  {
    "tool": "pliers",
    "openscad_code": "// Realistic pliers model - medium complexity\n// Overall size ~80mm\n\n// Color definitions\n$fn = 32;\n\nmodule handle_grip() {\n    // Main handle cylinder\n    color(\"darkblue\")\n    difference() {\n        cylinder(h=35, d=8);\n        // Grip texture - hexagonal pattern\n        for (i = [0:4]) {\n            translate([0, 0, i*7+3.5])\n                cylinder(h=2, d=7.5);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, 35])\n        color(\"silver\")\n        cylinder(h=3, d=9);\n}\n\nmodule handle_bar() {\n    // Metal shaft\n    color(\"silver\")\n    difference() {\n        cylinder(h=40, d=5);\n        // Hollow center\n        cylinder(h=40, d=3);\n    }\n}\n\nmodule pivot_pin() {\n    // Central pivot bolt\n    color(\"silver\")\n    difference() {\n        cylinder(h=10, d=6);\n        translate([0, 0, -1])\n            cylinder(h=12, d=4);\n    }\n    \n    // Bolt head\n    translate([0, 0, 5])\n        cylinder(h=2, d=8);\n}\n\nmodule jaw_half() {\n    // Cutters section\n    color(\"silver\")\n    translate([0, 0, -15])\n        difference() {\n            cube([8, 3, 20], center=true);\n            // Cutting edge\n            translate([-4, 0, -5])\n                rotate([0, 30, 0])\n                cube([10, 4, 10]);\n        }\n    \n    // Gripping section\n    translate([0, 0, 5])\n        difference() {\n            cube([8, 3, 10], center=true);\n            // Grip teeth\n            for (i = [0:3]) {\n                translate([-3.5 + i*2.3, 0, -2.5])\n                    cube([0.5, 3.2, 0.3]);\n            }\n        }\n}\n\nmodule pliers_half() {\n    handle_grip();\n    \n    translate([0, 0, 35])\n        handle_bar();\n    \n    translate([0, 0, 75])\n        rotate([0, 30, 0])\n        jaw_half();\n}\n\n// Main assembly\n// Left half\npliers_half();\n\n// Right half - mirrored\nmirror([1, 0, 0])\n    pliers_half();\n\n// Central pivot\ntranslate([0, 0, 75])\n    rotate([90, 0, 0])\n    pivot_pin();",
    "renders": true
  },
  {
    "tool": "saw",
    "openscad_code": "// Realistic Hand Saw - 3D Printable\n// Medium complexity saw with blade, handle, and grip details\n\n// Overall dimensions\nblade_length = 70;\nblade_width = 20;\nblade_thickness = 1.2;\nhandle_length = 25;\nhandle_diameter = 18;\ngrip_depth = 3;\n\nmodule saw_blade() {\n    // Main blade body\n    color(\"silver\") \n    difference() {\n        // Tapered blade shape\n        hull() {\n            translate([0, 0, blade_thickness/2])\n                cube([blade_length, blade_width*0.4, blade_thickness], center=true);\n            translate([blade_length*0.8, 0, blade_thickness/2])\n                cube([blade_length*0.2, blade_width, blade_thickness], center=true);\n        }\n        \n        // Blade hole\n        translate([blade_length*0.9, 0, 0])\n            cylinder(h=blade_thickness+0.1, r=2, center=true);\n        \n        // Teeth pattern\n        for(i = [0:2:blade_length-5]) {\n            translate([i-blade_length/2, blade_width/2+0.1, 0])\n                rotate([90, 0, 45])\n                    cylinder(h=blade_thickness+0.2, r1=0.8, r2=0.2, center=true);\n            translate([i-blade_length/2+1, blade_width/2+0.1, 0])\n                rotate([90, 0, -45])\n                    cylinder(h=blade_thickness+0.2, r1=0.2, r2=0.8, center=true);\n        }\n    }\n    \n    // Blade spine reinforcement\n    color(\"silver\")\n    translate([0, 0, blade_thickness+0.1])\n        cube([blade_length, 2, 1], center=true);\n}\n\nmodule saw_handle() {\n    // Main handle body\n    color(\"burlywood\") difference() {\n        hull() {\n            sphere(d=handle_diameter);\n            translate([handle_length, 0, 0])\n                sphere(d=handle_diameter*0.8);\n        }\n        \n        // Grip grooves\n        for(i = [0:4]) {\n            rotate([0, i*360/5, 0])\n                translate([handle_length*0.5, 0, 0])\n                    cube([handle_length*1.2, 2, grip_depth*2], center=true);\n        }\n        \n        // Ergonomic finger grooves\n        for(i = [0:3]) {\n            translate([handle_length*0.2 + i*handle_length/4, 0, -handle_diameter/2])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_diameter*0.8, r=handle_diameter/0.8, center=true);\n        }\n    }\n    \n    // Handle grip texture rings\n    color(\"black\")\n    for(i = [0:3]) {\n        translate([handle_length*0.3 + i*handle_length/4, 0, 0])\n            rotate_extrude()\n                translate([handle_diameter/2-0.5, 0, 0])\n                    circle(r=0.5);\n    }\n    \n    // Handle hole for hanging\n    color(\"burlywood\")\n    translate([handle_length*0.9, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=handle_diameter*2, r=2, center=true);\n}\n\n// Assembly\nmodule saw_assembly() {\n    saw_blade();\n    \n    // Handle attachment\n    translate([blade_length*0.5, 0, 0])\n        rotate([0, 0, 90])\n            saw_handle();\n    \n    // Rivets securing blade to handle\n    color(\"gray\")\n    for(i = [-1:1]) {\n        translate([blade_length*0.45, i*handle_diameter*0.25, blade_thickness/2+1])\n            cylinder(h=2, r=1.5);\n    }\n}\n\n// Render the complete saw\nsaw_assembly();",
    "renders": true
  },
  {
    "tool": "chisel",
    "openscad_code": "// Chisel Tool - Medium Complexity Realistic Style\n// Woodworking chisel with wooden handle and metal blade\n\n// Overall dimensions (mm)\nblade_length = 30;\nblade_width = 12;\nblade_thickness = 3;\nhandle_length = 70;\nhandle_diameter = 15;\nferrule_length = 10;\nferrule_diameter = 16;\n\n// Colors\nhandle_color = \"BurlyWood\";\nblade_color = \"Silver\";\nferrule_color = \"Goldenrod\";\n\n// Handle grip rings\ngrip_ring_count = 5;\ngrip_ring_width = 2;\ngrip_ring_spacing = 8;\n\n// Main chisel module\nmodule chisel() {\n    // Handle\n    color(handle_color) {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Handle end cap (slightly rounded)\n        translate([0, 0, handle_length])\n            sphere(d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [1:grip_ring_count]) {\n            translate([0, 0, handle_length - (i * grip_ring_spacing) - grip_ring_width])\n                cylinder(h=grip_ring_width, d=handle_diameter + 2, $fn=32);\n        }\n    }\n    \n    // Ferrule (metal collar)\n    color(ferrule_color) {\n        translate([0, 0, handle_length - ferrule_length])\n            cylinder(h=ferrule_length + 2, d=ferrule_diameter, $fn=32);\n    }\n    \n    // Blade\n    color(blade_color) {\n        // Blade shank\n        translate([0, 0, handle_length - ferrule_length - blade_length])\n            cylinder(h=blade_length - 10, d1=blade_width, d2=blade_width * 0.8, $fn=4);\n        \n        // Blade body\n        translate([0, 0, handle_length - ferrule_length - blade_length - 5])\n            cube([blade_width, blade_thickness, 15], center=true);\n        \n        // Chisel cutting edge\n        translate([0, 0, handle_length - ferrule_length - blade_length - 12])\n            cube([blade_width, blade_thickness, 5], center=true);\n        \n        // Beveled cutting edge\n        translate([0, 0, handle_length - ferrule_length - blade_length - 14.5])\n            rotate([90, 0, 0])\n                cylinder(h=blade_width/2, d1=blade_thickness, d2=0.5, $fn=3);\n    }\n    \n    // Blade spine\n    color(blade_color) {\n        translate([0, blade_thickness/2 + 0.5, handle_length - ferrule_length - blade_length])\n            cube([blade_width, 1, blade_length], center=true);\n    }\n}\n\n// Create the chisel\nchisel();",
    "renders": true
  },
  {
    "tool": "file",
    "openscad_code": "// OpenSCAD File Tool - Realistic Medium Complexity\n// A hand file with ergonomic handle and proper teeth pattern\n\n$fn = 50;\n\n// File dimensions (mm)\nfile_length = 150;\nhandle_length = 60;\nblade_width = 20;\nblade_thickness = 4;\ntang_length = 35;\n\n// Colors\nhandle_color = \"BurlyWood\";\nmetal_color = \"Silver\";\n\n// Main assembly\nmodule file_tool() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 0]) handle();\n        \n        // Tang (hidden part inside handle)\n        translate([handle_length - tang_length, 0, 0]) tang();\n        \n        // File blade\n        translate([handle_length, 0, 0]) blade();\n        \n        // Tip detail\n        translate([handle_length + file_length - 5, 0, 0]) tip();\n    }\n}\n\n// Ergonomic handle with grip pattern\nmodule handle() {\n    color(handle_color) {\n        difference() {\n            // Main handle body\n            rotate([0, 90, 0]) cylinder(h = handle_length, d1 = 28, d2 = 22, center = false);\n            \n            // Grip grooves\n            for(i = [5:8:handle_length-10]) {\n                translate([i, 0, 0]) rotate([0, 90, 0]) \n                    cylinder(h = 4, d = 24, center = true);\n            }\n        }\n        \n        // End cap detail\n        translate([0, 0, 0]) rotate([0, 90, 0]) \n            cylinder(h = 5, d = 30, center = false);\n    }\n}\n\n// Tang (tapered end that goes into handle)\nmodule tang() {\n    color(metal_color) {\n        difference() {\n            // Main tang body\n            cube([tang_length, 12, 6], center = true);\n            \n            // Rounded corners\n            translate([tang_length/2, 6, 3]) sphere(d = 6);\n            translate([tang_length/2, -6, 3]) sphere(d = 6);\n            translate([tang_length/2, 6, -3]) sphere(d = 6);\n            translate([tang_length/2, -6, -3]) sphere(d = 6);\n        }\n    }\n}\n\n// File blade with teeth pattern\nmodule blade() {\n    color(metal_color) {\n        difference() {\n            // Main blade body\n            cube([file_length, blade_width, blade_thickness], center = true);\n            \n            // Tapered edges\n            translate([0, blade_width/2, 0]) \n                cube([file_length, 2, blade_thickness], center = true);\n            translate([0, -blade_width/2, 0]) \n                cube([file_length, 2, blade_thickness], center = true);\n            \n            // Teeth pattern - single cut file\n            for(i = [5:3:file_length-10]) {\n                // Top teeth\n                translate([i, blade_width/2 - 1, blade_thickness/2]) \n                    cube([0.5, blade_width - 2, 0.3]);\n                \n                // Bottom teeth\n                translate([i, blade_width/2 - 1, -blade_thickness/2 + 0.3]) \n                    cube([0.5, blade_width - 2, 0.3]);\n            }\n            \n            // Safe edges (smooth sides)\n            translate([0, blade_width/2 - 1, 0]) \n                cube([file_length, 2, blade_thickness + 0.1], center = true);\n            translate([0, -blade_width/2 + 1, 0]) \n                cube([file_length, 2, blade_thickness + 0.1], center = true);\n        }\n    }\n}\n\n// Rounded tip\nmodule tip() {\n    color(metal_color) {\n        translate([-2.5, 0, 0]) \n            scale([1, 0.8, 0.8]) sphere(d = blade_width);\n    }\n}\n\n// Render the file\nfile_tool();",
    "renders": true
  },
  {
    "tool": "drill",
    "openscad_code": "// Realistic Hand-Held Electric Drill - Medium Complexity\n// Overall length ~95 mm, printable without supports\n\n$fn = 50;\n\n// Main colors\nhandle_col = \"DarkSlateGray\";\nbody_col   = \"FireBrick\";\nmetal_col  = \"Silver\";\n\n// Overall scale for 3D printing\nscale = 0.8;\n\nmodule drill_assembly() {\n    scale([scale,scale,scale]) {\n        // Handle with ergonomic grip\n        color(handle_col) {\n            translate([0,0,0])\n                rotate([0,90,0])\n                    cylinder(h = 30, d1 = 24, d2 = 28, center = true);\n\n            // Rubber grip rings\n            for(i = [-12:6:12]) {\n                translate([i,0,0])\n                    rotate([0,90,0])\n                        cylinder(h = 4, d = 30, center = true);\n            }\n        }\n\n        // Main motor body\n        color(body_col) {\n            translate([30,0,0])\n                rotate([0,90,0])\n                    cylinder(h = 45, d = 28);\n        }\n\n        // Chuck collar\n        color(metal_col) {\n            translate([52,0,0])\n                rotate([0,90,0])\n                    cylinder(h = 8, d = 22);\n\n            // Chuck jaws (simplified as rings)\n            for(i = [0:2.5:5]) {\n                translate([56+i,0,0])\n                    rotate([0,90,0])\n                        cylinder(h = 2, d = 12 - i*1.2);\n            }\n        }\n\n        // Trigger guard\n        color(handle_col) {\n            difference() {\n                translate([15,-12,0])\n                    cube([16,24,20], center = true);\n                translate([15,-12,0])\n                    cube([12,20,16], center = true);\n            }\n        }\n\n        // Trigger\n        color(\"Black\") {\n            translate([15,-10,5])\n                cube([10,4,8], center = true);\n        }\n\n        // Forward/reverse slider\n        color(\"Black\") {\n            translate([15,10,5])\n                cube([8,3,4], center = true);\n        }\n\n        // Side handle mount ring\n        color(metal_col) {\n            translate([35,0,-15])\n                rotate([90,0,0])\n                    cylinder(h = 8, d = 16);\n        }\n\n        // Ventilation slots\n        color(body_col) {\n            for(i = [1:3:10]) {\n                translate([28+i*2,0,12])\n                    cube([1.5,26,4], center = true);\n            }\n        }\n\n        // Power cable\n        color(\"Black\") {\n            translate([-15,0,0])\n                rotate([0,90,0])\n                    cylinder(h = 25, d = 5);\n        }\n    }\n}\n\ndrill_assembly();",
    "renders": true
  },
  {
    "tool": "level",
    "openscad_code": "// Realistic 3D-printable spirit level\n// Overall length: 80 mm, height: 35 mm, thickness: 14 mm\n\n$fn = 36;\n\nmodule main_body() {\n    // Extruded aluminum channel profile\n    difference() {\n        // Outer block\n        translate([-40, -7, 0])\n            cube([80, 14, 35], center = false);\n\n        // Center cavity\n        translate([-38, -5, 2])\n            cube([76, 10, 31], center = false);\n\n        // Top viewing window\n        translate([-36, -6, 28])\n            cube([72, 12, 5], center = false);\n    }\n}\n\nmodule vial_housing() {\n    // Vertical vial (plumb)\n    color([0.9,0.9,0.9])\n    difference() {\n        translate([0, 0, 18])\n            cube([12, 9, 12], center = true);\n        translate([0, 0, 18])\n            cylinder(h = 10, r = 4.5, center = true);\n    }\n\n    // Horizontal vial\n    color([0.9,0.9,0.9])\n    difference() {\n        translate([-25, 0, 18])\n            cube([12, 9, 12], center = true);\n        translate([-25, 0, 18])\n            rotate([0,90,0])\n                cylinder(h = 10, r = 4.5, center = true);\n    }\n\n    // 45-degree vial\n    color([0.9,0.9,0.9])\n    difference() {\n        translate([25, 0, 18])\n            cube([12, 9, 12], center = true);\n        translate([25, 0, 18])\n            rotate([0,45,90])\n                cylinder(h = 10, r = 4.5, center = true);\n    }\n}\n\nmodule vial_fill() {\n    // Liquid fills (yellowish green)\n    color([0.5,0.7,0.2,0.6])\n    union() {\n        // Vertical vial fill\n        translate([0, 0, 18])\n            sphere(r = 4.4);\n\n        // Horizontal vial fill\n        translate([-25, 0, 18])\n            rotate([0,90,0])\n                sphere(r = 4.4);\n\n        // 45-degree vial fill\n        translate([25, 0, 18])\n            rotate([0,45,90])\n                sphere(r = 4.4);\n    }\n\n    // Bubbles (white)\n    color(\"white\")\n    union() {\n        // Vertical bubble\n        translate([0, 0, 20])\n            sphere(r = 1.2);\n\n        // Horizontal bubble\n        translate([-25, 0, 20])\n            rotate([0,90,0])\n                sphere(r = 1.2);\n\n        // 45-degree bubble\n        translate([25, 0, 20])\n            rotate([0,45,90])\n                sphere(r = 1.2);\n    }\n}\n\nmodule measurement_marks() {\n    // Raised graduation marks\n    for (i = [-36:6:36]) {\n        if (i != 0) {\n            translate([i, -6.5, 1])\n                cube([0.5, 1, 0.5], center = true);\n        }\n    }\n\n    // Center zero mark\n    translate([0, -6.5, 1.5])\n        cube([1, 1.5, 1], center = true);\n}\n\nmodule end_caps() {\n    // Left end cap\n    color([0.2,0.2,0.2])\n    translate([-40, 0, 0])\n        cube([2, 14, 35], center = false);\n\n    // Right end cap\n    color([0.2,0.2,0.2])\n    translate([38, 0, 0])\n        cube([2, 14, 35], center = false);\n}\n\nmodule grip_pads() {\n    // Rubber grip pattern\n    color([0.1,0.1,0.1])\n    for (x = [-30:10:30]) {\n        translate([x, 7.5, 10])\n            cube([8, 1, 15], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    color([0.7,0.75,0.8]) main_body();\n    vial_housing();\n    vial_fill();\n    color([0.6,0.6,0.6]) measurement_marks();\n    end_caps();\n    grip_pads();\n}",
    "renders": true
  },
  {
    "tool": "square",
    "openscad_code": "// Square Tool - Engineer Combination Square (realistic style, medium complexity)\n// Features ruler blade, anodized head, level vial, knurled grip, scribe pin\n\n$fn = 36;  // Smoother curves for realism\n\n// Overall dimensions\nblade_len = 75;\nblade_w = 19;\nblade_thick = 1.6;\nhead_size = 30;\nhead_thick = 20;\ngrip_d = 12;\ngrip_h = 18;\n\nmodule ruler_blade() {\n    color(\"silver\")\n    difference() {\n        // Main blade body\n        translate([-blade_len/2, -blade_w/2, -blade_thick/2])\n            cube([blade_len, blade_w, blade_thick]);\n        \n        // Millimeter scale marks\n        for (i = [1:blade_len-1]) {\n            h = (i % 10 == 0) ? 3 : 1.5;\n            translate([-blade_len/2 + i, -blade_w/2 + 1, -blade_thick/2 - 0.01])\n                cube([0.3, h, blade_thick + 0.02]);\n        }\n        \n        // Number recesses (every 10 mm)\n        for (i = [0:10:blade_len-1]) {\n            translate([-blade_len/2 + i + 2, -blade_w/2 + 5, -blade_thick/2 - 0.01])\n                cube([3, 3, blade_thick + 0.02]);\n        }\n    }\n}\n\nmodule anodized_head() {\n    color([0.1, 0.1, 0.3])  // Dark anodized blue\n    difference() {\n        // Main head block\n        translate([-head_size/2, -head_size/2, -head_thick/2])\n            cube([head_size, head_size, head_thick]);\n        \n        // Blade slot\n        translate([-blade_len/2 - 1, -blade_w/2 - 0.5, -blade_thick/2 - 0.5])\n            cube([blade_len + 2, blade_w + 1, blade_thick + 1]);\n        \n        // Fillets on edges\n        for (x = [-head_size/2 + 2, head_size/2 - 2])\n            for (y = [-head_size/2 + 2, head_size/2 - 2])\n                translate([x, y, -head_thick/2])\n                    cylinder(r=2, h=head_thick);\n    }\n    \n    // Knurled grip cylinder\n    color(\"silver\")\n    rotate([90, 0, 0])\n        translate([0, 0, head_size/2 + grip_h/2])\n        difference() {\n            cylinder(d=grip_d, h=grip_h, $fn=60);\n            // Knurling grooves\n            for (i = [0:30]) {\n                rotate([0, 0, i*12])\n                    translate([-grip_d/2 - 0.1, -0.5, -0.5])\n                        cube([grip_d + 0.2, 1, grip_h + 1]);\n            }\n        }\n    \n    // Level vial\n    color([0.8, 0.9, 1, 0.6])  // Transparent blue\n    translate([0, 0, head_thick/2 - 4])\n        rotate([90, 0, 0])\n            cylinder(d=6, h=head_size - 4, $fn=32);\n    \n    // Scribe pin hole\n    translate([head_size/2 - 4, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d=2.5, h=10, $fn=20);\n}\n\n// Assembly\nruler_blade();\ntranslate([0, 0, 0])\n    anodized_head();",
    "renders": true
  },
  {
    "tool": "axe",
    "openscad_code": "// Realistic 3D Printable Axe - Medium Complexity\n// Overall length ~85 mm, suitable for FDM printing\n\n// Color constants\nblade_col = \"#C0C0C0\";\nhandle_col = \"#8B4513\";\ngrip_col = \"#2F4F2F\";\nrivet_col = \"#FFD700\";\n\n// Main assembly\nmodule axe() {\n    union() {\n        // Axe head assembly\n        translate([0, 0, 5]) axe_head();\n        \n        // Handle assembly\n        translate([0, 0, -35]) handle();\n    }\n}\n\n// Axe head with blade and poll\nmodule axe_head() {\n    color(blade_col) {\n        union() {\n            // Main head body\n            difference() {\n                // Tapered head shape\n                hull() {\n                    translate([0, 0, 0]) cube([6, 20, 15], center=true);\n                    translate([0, 0, 8]) cube([3, 18, 12], center=true);\n                }\n                \n                // Eye hole for handle\n                translate([0, 0, -2])\n                    rotate([90, 0, 0])\n                        cylinder(h=20, d=8, $fn=32);\n            }\n            \n            // Cutting edge\n            translate([0, 12, 2])\n                rotate([0, 10, 0])\n                    cube([0.5, 8, 10], center=true);\n            \n            // Blade bevel\n            difference() {\n                translate([0, 12, 2])\n                    cube([2, 8, 10], center=true);\n                \n                translate([2, 12, 2])\n                    rotate([0, -15, 0])\n                        cube([4, 9, 11], center=true);\n            }\n            \n            // Poll (back of axe)\n            difference() {\n                translate([0, -12, 2])\n                    sphere(d=8);\n                \n                // Flatten poll slightly\n                translate([0, -12, 2])\n                    cube([6, 4, 8], center=true);\n            }\n        }\n    }\n    \n    // Blade edge highlight\n    color(\"#E8E8E8\")\n        translate([0, 16.5, 2])\n            cube([0.3, 2, 8], center=true);\n}\n\n// Handle with grip and wedges\nmodule handle() {\n    // Main handle shaft\n    color(handle_col) {\n        difference() {\n            // Tapered handle\n            hull() {\n                translate([0, 0, 0])\n                    cylinder(h=40, d1=8, d2=6, $fn=32);\n                translate([0, 0, -30])\n                    cylinder(h=30, d1=6, d2=5, $fn=32);\n            }\n            \n            // Top chamfer\n            translate([0, 0, 2])\n                cylinder(h=10, d=7, $fn=32);\n        }\n    }\n    \n    // Grip texture\n    color(grip_col) {\n        for(i = [-25:5:-5]) {\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=2.5, d=6.2, $fn=32);\n                    cylinder(h=3, d=5.8, $fn=32);\n                }\n        }\n    }\n    \n    // Wedge at top\n    color(handle_col) {\n        translate([0, 0, 5])\n            rotate([0, 90, 0])\n                wedge();\n    }\n    \n    // Rivet detail\n    color(rivet_col) {\n        for(i = [-20:10:-10]) {\n            translate([2.5, 0, i])\n                sphere(d=1.5);\n            translate([-2.5, 0, i])\n                sphere(d=1.5);\n        }\n    }\n}\n\n// Wedge for securing head\nmodule wedge() {\n    difference() {\n        cube([3, 8, 4], center=true);\n        translate([0, 0, 1])\n            cube([2.5, 7, 4], center=true);\n    }\n}\n\n// Render the complete axe\naxe();",
    "renders": true
  },
  {
    "tool": "mallet",
    "openscad_code": "// Realistic 3D-printable mallet\n// Overall length â‰ˆ 100 mm, head 50 mm\n\n$fn = 36;  // Smooth curves for realistic look\n\n// Colors\ncolor_handle = \"SaddleBrown\";\ncolor_head   = \"DarkGray\";\ncolor_strike = \"LightGray\";\n\nmodule mallet() {\n    /* ---------- Handle ---------- */\n    union() {\n        color(color_handle) {\n            // Main shaft\n            translate([0, 0, 25])\n                cylinder(h = 70, d1 = 12, d2 = 10);\n\n            // Palm swell\n            translate([0, 0, 90])\n                sphere(d = 18);\n\n            // Grip rings\n            for (z = [35 : 7 : 75])\n                translate([0, 0, z])\n                    cylinder(h = 2.5, d = 13.5);\n        }\n\n        /* ---------- Head ---------- */\n        color(color_head) {\n            translate([0, 0, 17]) {\n                // Tapered body\n                cylinder(h = 14, d1 = 45, d2 = 40);\n\n                // Chamfer edges\n                for (z = [14, 0]) {\n                    translate([0, 0, z])\n                        cylinder(h = 2, d1 = (z ? 45 : 40) - 4, d2 = (z ? 45 : 40));\n                }\n            }\n        }\n\n        /* ---------- Strike faces ---------- */\n        color(color_strike) {\n            // Top face\n            translate([0, 0, 31])\n                cylinder(h = 3, d = 42);\n\n            // Bottom face\n            translate([0, 0, 14])\n                cylinder(h = 3, d = 42);\n        }\n    }\n}\n\n// Render the mallet upright for printing\nrotate([0, 90, 0])\n    mallet();",
    "renders": true
  },
  {
    "tool": "plane",
    "openscad_code": "// Hand plane tool - OpenSCAD model\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main parameters\nbody_length = 80;\nbody_width = 25;\nbody_height = 20;\nblade_width = 22;\nblade_length = 35;\nhandle_height = 15;\nhandle_width = 20;\nhandle_length = 12;\n\n// Colors\nbody_color = \"BurlyWood\";\nblade_color = \"Silver\";\nhandle_color = \"SaddleBrown\";\nknob_color = \"SaddleBrown\";\n\n// Main body of the plane\nmodule plane_body() {\n    color(body_color)\n    difference() {\n        // Main block\n        translate([0, 0, body_height/2])\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Front slope for mouth\n        translate([-body_length/4, 0, body_height*0.7])\n        rotate([0, 20, 0])\n        cube([body_length/2, body_width+2, body_height], center=true);\n        \n        // Blade slot\n        translate([body_length/4, 0, body_height/2])\n        cube([blade_length+5, blade_width+2, body_height], center=true);\n        \n        // Bottom opening for blade\n        translate([body_length/4, 0, -0.5])\n        cube([blade_length+2, blade_width+2, 1], center=true);\n    }\n    \n    // Side cheeks\n    for(side = [-1, 1]) {\n        color(body_color)\n        translate([body_length/4, side*(body_width/2 + 1.5), body_height/2])\n        cube([body_length/2, 3, body_height], center=true);\n    }\n}\n\n// Cutting blade assembly\nmodule blade_assembly() {\n    // Blade\n    color(blade_color)\n    translate([body_length/4 + 5, 0, body_height/2 - 2])\n    rotate([0, 10, 0])\n    cube([blade_length, blade_width, 2], center=true);\n    \n    // Chip breaker\n    color(blade_color)\n    translate([body_length/4 + 8, 0, body_height/2 + 1])\n    rotate([0, 10, 0])\n    cube([blade_length-10, blade_width-4, 1], center=true);\n    \n    // Blade adjustment screw\n    color(\"Goldenrod\")\n    translate([body_length/4 + 15, 0, body_height/2 + 4])\n    cylinder(h=4, r=2, $fn=16);\n}\n\n// Rear handle\nmodule rear_handle() {\n    color(handle_color)\n    difference() {\n        // Main handle shape\n        translate([-body_length/3, 0, body_height + handle_height/2])\n        rotate([0, 0, 0])\n        cube([handle_length, handle_width, handle_height], center=true);\n        \n        // Grip cutout\n        translate([-body_length/3, 0, body_height + handle_height/2])\n        cube([handle_length+2, handle_width-8, handle_height-8], center=true);\n        \n        // Rounded top\n        translate([-body_length/3, 0, body_height + handle_height])\n        scale([1, 0.8, 0.5])\n        sphere(r=handle_width/2);\n    }\n}\n\n// Front knob\nmodule front_knob() {\n    color(knob_color)\n    translate([body_length/3, 0, body_height + 5])\n    cylinder(h=8, r=6, $fn=32);\n    \n    color(knob_color)\n    translate([body_length/3, 0, body_height + 10])\n    sphere(r=6);\n}\n\n// Sole with mouth opening\nmodule plane_sole() {\n    color(body_color)\n    difference() {\n        // Main sole\n        translate([0, 0, -1])\n        cube([body_length, body_width, 2], center=true);\n        \n        // Mouth opening\n        translate([body_length/4, 0, -1])\n        cube([blade_width-2, blade_width-2, 2], center=true);\n    }\n    \n    // Throat opening\n    color(body_color)\n    translate([body_length/4 - 10, 0, -0.5])\n    cube([20, blade_width-4, 1], center=true);\n}\n\n// Lever cap\nmodule lever_cap() {\n    color(\"Goldenrod\")\n    translate([body_length/4 + 8, 0, body_height/2 + 3])\n    rotate([0, -10, 0])\n    cube([blade_length/4, blade_width-2, 1], center=true);\n    \n    color(\"Goldenrod\")\n    translate([body_length/4 + 8, 0, body_height/2 + 5])\n    cylinder(h=8, r=3, $fn=16);\n}\n\n// Assembly\nplane_body();\nblade_assembly();\nrear_handle();\nfront_knob();\nplane_sole();\nlever_cap();\n\n// Side adjustment wheel\ncolor(\"Goldenrod\")\ntranslate([body_length/4 + 15, body_width/2 + 2, body_height/2])\nrotate([0, 90, 0])\ncylinder(h=3, r=4, $fn=16);",
    "renders": true
  },
  {
    "tool": "spokeshave",
    "openscad_code": "// Realistic spokeshave model for 3D printing\n// Medium complexity with functional features\n\n// Parameters\n$fn = 32;\nbody_length = 65;\nbody_width = 25;\nbody_height = 15;\nhandle_length = 35;\nhandle_diameter = 12;\nblade_width = 40;\nblade_thickness = 2;\nblade_depth = 8;\nmouth_width = 20;\nmouth_height = 3;\nblade_angle = 45;\n\n// Main body module\nmodule spokeshave_body() {\n    difference() {\n        // Main body block\n        color(\"DimGray\")\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Mouth opening\n        translate([0, 0, -body_height/2 + mouth_height])\n        cube([mouth_width, body_width + 1, mouth_height + 1], center=true);\n        \n        // Blade slot\n        translate([-blade_depth/2, 0, -body_height/2 + blade_thickness])\n        rotate([0, blade_angle, 0])\n        cube([blade_depth, blade_width + 2, blade_thickness + 0.5], center=true);\n        \n        // Screw holes\n        translate([body_length/2 - 8, 0, 0])\n        cylinder(h=body_height + 1, r=2, center=true);\n        \n        translate([-body_length/2 + 8, 0, 0])\n        cylinder(h=body_height + 1, r=2, center=true);\n    }\n}\n\n// Handle module\nmodule handle() {\n    color(\"SaddleBrown\")\n    rotate([0, 90, 0])\n    difference() {\n        // Handle shaft\n        cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Grip grooves\n        for(i = [-10:5:10]) {\n            translate([i, 0, 0])\n            cube([3, handle_diameter + 1, 2], center=true);\n        }\n    }\n}\n\n// Blade module\nmodule blade() {\n    color(\"Silver\")\n    difference() {\n        // Main blade\n        translate([blade_depth/2, 0, -body_height/2 + blade_thickness])\n        rotate([0, blade_angle, 0])\n        cube([blade_depth, blade_width, blade_thickness], center=true);\n        \n        // Cutting bevel\n        translate([blade_depth, 0, -body_height/2 - 1])\n        rotate([0, blade_angle, 0])\n        cube([blade_depth, blade_width, blade_thickness + 2], center=true);\n        \n        // Screw slots\n        translate([0, blade_width/2 - 5, 0])\n        cube([blade_depth + 2, 4, blade_thickness + 0.5], center=true);\n        \n        translate([0, -blade_width/2 + 5, 0])\n        cube([blade_depth + 2, 4, blade_thickness + 0.5], center=true);\n    }\n}\n\n// Thumb screws\nmodule thumb_screw() {\n    color(\"Gold\")\n    union() {\n        // Screw body\n        cylinder(h=6, r=3, center=true);\n        \n        // Thumb grip\n        translate([0, 0, 3])\n        cylinder(h=4, r=5, center=true);\n        \n        // Knurling\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([4.5, 0, 5])\n            cube([1, 1, 2], center=true);\n        }\n    }\n}\n\n// Assembly\n// Main body\nspokeshave_body();\n\n// Handles\ntranslate([body_length/2 + handle_length/2, 0, 0])\nhandle();\n\ntranslate([-body_length/2 - handle_length/2, 0, 0])\nmirror([1, 0, 0])\nhandle();\n\n// Blade\nblade();\n\n// Thumb screws\ntranslate([body_length/2 - 8, 0, body_height/2 + 3])\nthumb_screw();\n\ntranslate([-body_length/2 + 8, 0, body_height/2 + 3])\nthumb_screw();",
    "renders": true
  },
  {
    "tool": "awl",
    "openscad_code": "// OpenSCAD Code for Realistic Awl Tool - Medium Complexity\n// Overall length: 85 mm\n\n// Parameters\nhandle_length = 55;\nhandle_diameter = 12;\nferrule_length = 8;\nferrule_diameter = 14;\nshaft_length = 15;\nshaft_diameter = 5;\nblade_length = 15;\nblade_base_diameter = 3;\nblade_tip_diameter = 0.5;\n\n// Colors\nhandle_color = \"BurlyWood\";\nferrule_color = \"Goldenrod\";\nshaft_color = \"Silver\";\nblade_color = \"LightGray\";\n\n// Handle with grip rings\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for (i = [5:10:handle_length-10]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=2, d=handle_diameter+1, $fn=32);\n                cylinder(h=2.5, d=handle_diameter-2, $fn=32);\n            }\n        }\n        \n        // End cap dome\n        translate([0, 0, handle_length])\n        sphere(d=handle_diameter, $fn=32);\n    }\n}\n\n// Metal ferrule\nmodule ferrule() {\n    color(ferrule_color)\n    translate([0, 0, handle_length])\n    cylinder(h=ferrule_length, d=ferrule_diameter, $fn=32);\n}\n\n// Tapered shaft\nmodule shaft() {\n    color(shaft_color)\n    translate([0, 0, handle_length + ferrule_length])\n    cylinder(h=shaft_length, d1=shaft_diameter, d2=shaft_diameter*0.8, $fn=32);\n}\n\n// Tapered blade\nmodule blade() {\n    color(blade_color)\n    translate([0, 0, handle_length + ferrule_length + shaft_length])\n    cylinder(h=blade_length, d1=blade_base_diameter, d2=blade_tip_diameter, $fn=16);\n    \n    // Blade tip rounding\n    translate([0, 0, handle_length + ferrule_length + shaft_length + blade_length])\n    sphere(d=blade_tip_diameter*2, $fn=16);\n}\n\n// Assembly\nunion() {\n    handle();\n    ferrule();\n    shaft();\n    blade();\n}",
    "renders": true
  },
  {
    "tool": "brace",
    "openscad_code": "// OpenSCAD Brace Tool - Realistic Style, Medium Complexity\n// Overall size: ~80mm handle, ~60mm chuck, ~130mm total length\n\nmodule handle_grip_ring(depth, radius, thickness) {\n    difference() {\n        cylinder(h=thickness, r=radius, $fn=32);\n        cylinder(h=thickness+0.2, r=radius-2, $fn=32);\n    }\n    translate([0,0,-0.1]) cylinder(h=thickness+0.2, r=radius-0.5, $fn=32);\n}\n\nmodule handle() {\n    color(\"darkslategray\") {\n        union() {\n            // Main handle body\n            difference() {\n                cylinder(h=80, r=12, $fn=32);\n                translate([0,0,-1]) cylinder(h=82, r=10, $fn=32);\n            }\n            \n            // Grip rings\n            for(i=[0:7]) {\n                translate([0,0,5+i*10]) handle_grip_ring(80, 12.5, 2);\n            }\n            \n            // Tapered end\n            translate([0,0,80]) cylinder(h=10, r1=12, r2=8, $fn=32);\n        }\n    }\n}\n\nmodule chuck_jaw() {\n    color(\"silver\") {\n        difference() {\n            cube([8, 15, 20]);\n            translate([2,5,2]) cube([4, 5, 16]);\n            translate([4,0,10]) cylinder(h=15, r=3, $fn=16);\n        }\n    }\n}\n\nmodule chuck() {\n    color(\"silver\") {\n        union() {\n            // Main chuck body\n            difference() {\n                cylinder(h=25, r=20, $fn=6);\n                translate([0,0,-1]) cylinder(h=27, r=15, $fn=32);\n            }\n            \n            // Chuck jaws (3 pieces)\n            for(i=[0:2]) {\n                rotate([0,0,i*120]) translate([12,0,2.5]) chuck_jaw();\n            }\n            \n            // Chuck collar\n            translate([0,0,25]) cylinder(h=8, r=22, $fn=32);\n            \n            // Chuck key holes\n            for(i=[0:2]) {\n                rotate([0,0,i*120+60]) translate([18,0,12]) rotate([90,0,0]) \n                    cylinder(h=5, r=2.5, $fn=16);\n            }\n        }\n    }\n}\n\nmodule crank_handle() {\n    color(\"silver\") {\n        union() {\n            // Crank arm\n            difference() {\n                cube([50, 10, 8]);\n                translate([5,5,1]) cube([40, 2, 6]);\n            }\n            \n            // Crank knob\n            translate([50,5,4]) rotate([0,90,0]) {\n                difference() {\n                    cylinder(h=15, r=8, $fn=32);\n                    translate([0,0,-1]) cylinder(h=17, r=4, $fn=32);\n                }\n            }\n            \n            // Pivot\n            translate([0,5,4]) rotate([0,90,0]) \n                cylinder(h=10, r=6, $fn=32);\n        }\n    }\n}\n\nmodule brace() {\n    union() {\n        // Handle assembly\n        handle();\n        \n        // Chuck assembly\n        translate([0,0,90]) chuck();\n        \n        // Crank assembly\n        translate([0,0,90]) rotate([0,0,90]) crank_handle();\n        \n        // Main drive shaft\n        color(\"silver\") {\n            translate([0,0,90]) cylinder(h=40, r=6, $fn=32);\n        }\n    }\n}\n\nbrace();",
    "renders": true
  },
  {
    "tool": "bit",
    "openscad_code": "// OpenSCAD Realistic Phillips #2 Screwdriver Bit\n// ~60 mm total length â€“ optimized for FDM 3D printing\n\n// -------------- parameters --------------\nbit_d       =  6.3;     // 1/4\" hex shank\nbit_len     = 19.0;     // depth that goes into driver\ntip_len     =  8.0;     // Phillips #2 working tip\ntip_dia     =  3.0;     // tip diameter\nshank_len   = 30.0;     // visible shank\nwall        =  1.2;     // minimum printable wall\n$fn         = 36;       // cylinder segmentation\n\n// -------------- colors --------------\ncolor_handle = [0.15,0.15,0.15];   // dark grey steel\ncolor_tip    = [0.75,0.75,0.80];   // bright metal\n\n// -------------- modules --------------\n\n// hexagonal prism generator\nmodule hex(r, h) {\n    cylinder(h=h, r=r/cos(30), $fn=6);\n}\n\n// knurled grip pattern\nmodule knurl(r, h, rings=8) {\n    step = h / rings;\n    for (i=[0:rings-1])\n        translate([0,0,i*step+step/2])\n            rotate([90,0,0])\n                difference() {\n                    cylinder(h=step*1.1, r=r+0.3, center=true, $fn=6);\n                    scale([1,0.4,1]) cylinder(h=step*1.2, r=r+0.4, center=true, $fn=6);\n                }\n}\n\n// Phillips #2 cross tip\nmodule phillips_tip(l, d) {\n    // four flukes 90Â° apart\n    for (a=[0:90:270])\n        rotate([0,0,a])\n            translate([d/4,0,0])\n                rotate([0,90,0])\n                    cylinder(h=d*0.55, d=d/3, center=true);\n}\n\n// -------------- main model --------------\nunion() {\n    // shank: hex body plus knurl\n    color(color_handle)\n    union() {\n        // main hex shaft\n        hex(bit_d/2, bit_len+shank_len);\n        // knurled grip zone\n        translate([0,0,bit_len])\n            knurl(bit_d/2, shank_len*0.7);\n    }\n\n    // Phillips #2 tip\n    color(color_tip)\n    translate([0,0,bit_len+shank_len])\n        union() {\n            // tapered cone leading to tip\n            cylinder(h=tip_len*0.6, d1=bit_d, d2=tip_dia);\n            translate([0,0,tip_len*0.6])\n                cylinder(h=tip_len*0.4, d=tip_dia);\n            // cross recess\n            translate([0,0,tip_len*0.6+tip_len*0.4/2])\n                phillips_tip(tip_len*0.4, tip_dia);\n        }\n}",
    "renders": true
  },
  {
    "tool": "gimlet",
    "openscad_code": "// Gimlet Tool - Realistic Style, Medium Complexity\n// Overall length: ~85mm\n\nhandle_diameter = 22;\nhandle_length = 45;\nshank_diameter = 6;\nshank_length = 35;\nspiral_length = 25;\nspiral_tip_diameter = 1.5;\nspiral_turns = 6;\n\n// Main handle with grip rings\nmodule handle() {\n    color(\"DarkGoldenrod\") {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for (i = [0:4]) {\n            translate([0, 0, 5 + i*8]) {\n                difference() {\n                    cylinder(h=3, d=handle_diameter + 1, $fn=32);\n                    cylinder(h=3.5, d=handle_diameter - 3, $fn=32);\n                }\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length]) {\n            cylinder(h=3, d=handle_diameter + 2, $fn=32);\n        }\n        \n        // Shank collar\n        translate([0, 0, 0]) {\n            cylinder(h=4, d=shank_diameter + 8, $fn=32);\n        }\n    }\n}\n\n// Spiral screw portion\nmodule spiral_screw() {\n    color(\"LightGray\") {\n        // Shank\n        translate([0, 0, -shank_length]) {\n            cylinder(h=shank_length, d=shank_diameter, $fn=16);\n        }\n        \n        // Spiral thread\n        for (i = [0:spiral_turns*20]) {\n            rotate([0, 0, i*360/(spiral_turns*20)]) {\n                translate([shank_diameter/2 + 1, 0, -i*spiral_length/(spiral_turns*20)]) {\n                    sphere(d=3, $fn=8);\n                }\n            }\n        }\n        \n        // Tapered tip\n        translate([0, 0, -shank_length - spiral_length]) {\n            cylinder(h=spiral_length, d1=spiral_tip_diameter, d2=shank_diameter, $fn=16);\n        }\n    }\n}\n\n// Handle hole for hanging\nmodule hanging_hole() {\n    translate([handle_diameter/2 - 3, 0, handle_length - 10]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=handle_diameter, d=4, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main handle with hole\n    difference() {\n        handle();\n        hanging_hole();\n    }\n    \n    // Spiral screw\n    spiral_screw();\n}",
    "renders": true
  },
  {
    "tool": "reamer",
    "openscad_code": "// Adjustable hand reamer - medium complexity, realistic style\n// Overall length â‰ˆ 85 mm, suitable for 3D printing\n\n$fn = 36;\n\n// Main assembly\nunion() {\n    color(\"silver\") reamer_body();\n    color(\"black\") handle();\n    color(\"darkgray\") adjusting_nut();\n}\n\nmodule reamer_body() {\n    // Central rod with hex shank\n    union() {\n        // Hex shank end\n        translate([0,0,0])\n            cylinder(d=6, h=12, $fn=6);\n\n        // Main rod shaft\n        translate([0,0,12])\n            cylinder(d=5.5, h=65);\n\n        // Graduated scale marks\n        for(i=[1:5]) {\n            translate([0,0,12 + i*10])\n                rotate([0,0,i*15])\n                    difference() {\n                        cylinder(d=5.8, h=1);\n                        cylinder(d=5.2, h=1.2);\n                    }\n        }\n\n        // Blade mounting collar\n        translate([0,0,77])\n            cylinder(d=10, h=3);\n\n        // Cutting blades (6 flutes)\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n                translate([7,0,78])\n                    cube([6,1.5,5], center=true);\n        }\n\n        // Blade taper\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n                translate([7,0,83])\n                    scale([1,1,0.3])\n                        cube([6,1.5,2], center=true);\n        }\n    }\n}\n\nmodule handle() {\n    // Main grip\n    translate([0,0,-25])\n        difference() {\n            cylinder(d=18, h=30);\n            // Grip knurling\n            for(i=[0:9]) {\n                rotate([0,0,i*36])\n                    translate([9,0,15])\n                        cube([0.5,1,30], center=true);\n            }\n        }\n\n    // End cap\n    translate([0,0,-27])\n        cylinder(d=15, h=2);\n}\n\nmodule adjusting_nut() {\n    // Threaded collar\n    difference() {\n        cylinder(d=12, h=8);\n        // Hex key holes\n        for(i=[0:2]) {\n            rotate([0,0,i*120])\n                translate([6,0,4])\n                    rotate([90,0,0])\n                        cylinder(d=2, h=12, center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "tap",
    "openscad_code": "// Tap Tool - Realistic Style, Medium Complexity\n// Overall dimensions: ~90mm length, ~25mm diameter\n\n// Colors\n$fn = 50;\n\nmodule tap_tool() {\n    color(\"silver\") {\n        union() {\n            // Handle section\n            translate([0, 0, 75]) \n                rotate([0, 0, 0]) \n                    handle();\n            \n            // Shank section\n            translate([0, 0, 50]) \n                shank();\n            \n            // Threaded section\n            translate([0, 0, 0]) \n                    threads();\n            \n            // Cutting edges at tip\n            translate([0, 0, -5]) \n                cutting_edges();\n        }\n    }\n}\n\nmodule handle() {\n    // Main handle body\n    cylinder(h = 25, d1 = 20, d2 = 18);\n    \n    // Knurled grip pattern\n    difference() {\n        cylinder(h = 25, d = 20);\n        for (i = [0: 30]) {\n            rotate([0, 0, i * 12]) {\n                translate([-10.5, -0.5, 0]) \n                    cube([21, 1, 25]);\n            }\n        }\n    }\n    \n    // Drive square hole\n    color(\"black\") \n        translate([0, 0, 12.5]) \n            cube([6, 6, 12.5], center = true);\n}\n\nmodule shank() {\n    // Main shank\n    cylinder(h = 25, d = 12);\n    \n    // Alignment flats\n    difference() {\n        cylinder(h = 25, d = 12);\n        for (i = [0: 1]) {\n            rotate([0, 0, i * 90]) {\n                translate([5, -1, 0]) \n                    cube([10, 2, 25]);\n            }\n        }\n    }\n}\n\nmodule threads() {\n    // Thread core\n    cylinder(h = 50, d = 8);\n    \n    // Thread profile\n    for (i = [0: 20]) {\n        translate([0, 0, i * 2.5]) {\n            rotate([0, 0, i * 30]) {\n                // Thread ridge\n                difference() {\n                    cylinder(h = 2.5, d1 = 10, d2 = 9.5);\n                    cylinder(h = 2.5, d = 8);\n                }\n            }\n        }\n    }\n    \n    // Flutes for chip clearance\n    for (i = [0: 3]) {\n        rotate([0, 0, i * 90]) {\n            difference() {\n                translate([0, 0, 25]) \n                    cylinder(h = 50, d = 10);\n                translate([-5, -5, 0]) \n                    cube([10, 10, 50]);\n            }\n        }\n    }\n}\n\nmodule cutting_edges() {\n    // Tapered cutting end\n    cylinder(h = 5, d1 = 8, d2 = 6);\n    \n    // Cutting faces\n    for (i = [0: 3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([0, 0, 2.5]) {\n                rotate([90, 0, 0]) {\n                    // Relief angle\n                    translate([-2, -2.5, -2]) \n                        cube([4, 5, 4]);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete tap\ntap_tool();",
    "renders": true
  },
  {
    "tool": "die",
    "openscad_code": "// Die Tool - Realistic Style, Medium Complexity\n// A 6-sided die with chamfered edges and inset pips\n// Size: 60mm cube with 3mm wall thickness\n// Pip diameter: 8mm, depth: 3mm\n\n// Main color definitions\ndie_color = [0.9, 0.9, 0.9];  // Ivory white\npip_color = [0.1, 0.1, 0.1];  // Deep black\n\n// Overall dimensions\ndie_size = 60;\nedge_chamfer = 3;\nwall_thickness = 3;\n\n// Pip dimensions\npip_diameter = 8;\npip_depth = 3;\n\n// Create the main die body\nmodule die_body() {\n    difference() {\n        // Main cube with chamfered edges\n        difference() {\n            cube([die_size, die_size, die_size], center = true);\n            \n            // Chamfer all 12 edges\n            // Top edges\n            translate([0, 0, die_size/2 - edge_chamfer]) rotate([0, 0, 45]) \n                cube([die_size*sqrt(2), 2*edge_chamfer, 2*edge_chamfer], center = true);\n            translate([0, 0, die_size/2 - edge_chamfer]) rotate([0, 0, -45]) \n                cube([die_size*sqrt(2), 2*edge_chamfer, 2*edge_chamfer], center = true);\n            \n            // Bottom edges\n            translate([0, 0, -die_size/2 + edge_chamfer]) rotate([0, 0, 45]) \n                cube([die_size*sqrt(2), 2*edge_chamfer, 2*edge_chamfer], center = true);\n            translate([0, 0, -die_size/2 + edge_chamfer]) rotate([0, 0, -45]) \n                cube([die_size*sqrt(2), 2*edge_chamfer, 2*edge_chamfer], center = true);\n            \n            // Side edges\n            translate([0, die_size/2 - edge_chamfer, 0]) rotate([0, 0, 45]) rotate([90, 0, 0])\n                cube([die_size*sqrt(2), 2*edge_chamfer, 2*edge_chamfer], center = true);\n            translate([0, -die_size/2 + edge_chamfer, 0]) rotate([0, 0, 45]) rotate([90, 0, 0])\n                cube([die_size*sqrt(2), 2*edge_chamfer, 2*edge_chamfer], center = true);\n                \n            // Front/back edges\n            translate([die_size/2 - edge_chamfer, 0, 0]) rotate([0, 0, 45]) rotate([0, 90, 0])\n                cube([die_size*sqrt(2), 2*edge_chamfer, 2*edge_chamfer], center = true);\n            translate([-die_size/2 + edge_chamfer, 0, 0]) rotate([0, 0, 45]) rotate([0, 90, 0])\n                cube([die_size*sqrt(2), 2*edge_chamfer, 2*edge_chamfer], center = true);\n        }\n        \n        // Hollow out the center for 3D printing\n        cube([die_size - 2*wall_thickness, die_size - 2*wall_thickness, die_size - 2*wall_thickness], center = true);\n    }\n}\n\n// Create a single pip (dot)\nmodule pip() {\n    difference() {\n        cylinder(h = pip_depth + 0.1, d = pip_diameter, $fn = 32);\n        translate([0, 0, pip_depth]) \n            cylinder(h = 0.1, d = pip_diameter + 0.2, $fn = 32);\n    }\n}\n\n// Create pips for face 1 (1 dot)\nmodule face_1() {\n    color(pip_color) {\n        translate([0, 0, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n    }\n}\n\n// Create pips for face 2 (2 dots)\nmodule face_2() {\n    color(pip_color) {\n        translate([-die_size/4, -die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([die_size/4, die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n    }\n}\n\n// Create pips for face 3 (3 dots)\nmodule face_3() {\n    color(pip_color) {\n        translate([-die_size/4, -die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([0, 0, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([die_size/4, die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n    }\n}\n\n// Create pips for face 4 (4 dots)\nmodule face_4() {\n    color(pip_color) {\n        translate([-die_size/4, -die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([die_size/4, -die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([-die_size/4, die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([die_size/4, die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n    }\n}\n\n// Create pips for face 5 (5 dots)\nmodule face_5() {\n    color(pip_color) {\n        translate([-die_size/4, -die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([die_size/4, -die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([0, 0, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([-die_size/4, die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n        translate([die_size/4, die_size/4, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n    }\n}\n\n// Create pips for face 6 (6 dots)\nmodule face_6() {\n    color(pip_color) {\n        for (x = [-die_size/4, die_size/4]) {\n            for (y = [-die_size/3, 0, die_size/3]) {\n                translate([x, y, die_size/2 - pip_depth/2]) rotate([0, 180, 0]) pip();\n            }\n        }\n    }\n}\n\n// Assemble the complete die\ncolor(die_color) die_body();\n\n// Add pips to each face\nface_1();  // Front face (1)\nrotate([0, 180, 0]) translate([0, 0, die_size]) face_6();  // Back face (6)\n\nrotate([90, 0, 0]) face_2();  // Top face (2)\nrotate([-90, 0, 0]) translate([0, 0, die_size]) face_5();  // Bottom face (5)\n\nrotate([0, 90, 0]) face_3();  // Right face (3)\nrotate([0, -90, 0]) translate([die_size, 0, 0]) face_4();  // Left face (4)",
    "renders": true
  },
  {
    "tool": "vise",
    "openscad_code": "// Medium-complexity 3D-printable bench vise â€“ realistic style\n// Overall footprint â‰ˆ 80 mm Ã— 40 mm Ã— 45 mm (printable on most FDM printers)\n// No support required; all surfaces printable flat on the bed\n\n// ---------- global dimensions ----------\nbase_length = 80;\nbase_width  = 40;\nbase_height = 10;\n\nslide_length = 60;\nslide_width  = 18;\nslide_height = 12;\n\njaw_height   = 24;\njaw_width    = 25;\n\nleadscrew_d  = 6;\nhandle_len   = 60;\nhandle_d     = 8;\nhandle_grip_d = 12;\n\nknurl_depth = 0.5;\n\n// ---------- colours ----------\n$fn = 32;\ncolor_cast   = [0.2,0.2,0.2];     // cast-iron grey\ncolor_steel  = [0.4,0.4,0.5];     // machined steel\ncolor_handle = [0.15,0.15,0.15];  // rubberised grip\ncolor_jaw    = [0.9,0.9,0.9];     // aluminium jaw face\n\n// ---------- helper: rounded cube ----------\nmodule rounded_cube(size, r, center=false) {\n    x = size.x; y = size.y; z = size.z;\n    translate(center?[0,0,0]:[x/2,y/2,z/2])\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*(x/2-r),dy*(y/2-r),dz*(z/2-r)])\n            sphere(r=r);\n    }\n}\n\n// ---------- base ----------\nmodule vise_base() {\n    color(color_cast)\n    difference() {\n        rounded_cube([base_length,base_width,base_height], 3, true);\n        // mounting slots\n        for(x=[-base_length/3, base_length/3])\n            translate([x,0,-base_height/2+1])\n            cube([5, base_width-4, 2], center=true);\n    }\n}\n\n// ---------- sliding jaw body ----------\nmodule sliding_jaw() {\n    color(color_cast)\n    difference() {\n        union() {\n            // main block\n            translate([0,0,base_height/2+slide_height/2])\n                rounded_cube([slide_length,slide_width,slide_height], 2, true);\n            // vertical jaw\n            translate([slide_length/2-2,0,base_height+slide_height/2+jaw_height/2])\n                rounded_cube([slide_length/2, jaw_width, jaw_height], 2, true);\n        }\n        // leadscrew clearance hole\n        translate([-slide_length/2-1,0,base_height/2+slide_height/2])\n            rotate([0,90,0])\n            cylinder(h=slide_length+2, d=leadscrew_d+1, center=true);\n    }\n}\n\n// ---------- fixed jaw ----------\nmodule fixed_jaw() {\n    color(color_cast)\n    translate([-base_length/2,0,base_height+jaw_height/2])\n        rounded_cube([base_length/2, jaw_width, jaw_height], 2, true);\n}\n\n// ---------- replaceable jaw plates ----------\nmodule jaw_plate(dx) {\n    color(color_jaw)\n    translate([dx,0,base_height+jaw_height/2-0.5])\n        cube([2, jaw_width-4, jaw_height-2], center=true);\n}\n\n// ---------- knurled handle ----------\nmodule handle() {\n    color(color_handle)\n    union() {\n        // shaft\n        rotate([0,90,0])\n            cylinder(h=handle_len, d=handle_d, center=true);\n        // grips\n        for(i=[-handle_len/2+4 : 8 : handle_len/2-4])\n            translate([i,0,0])\n                rotate([0,90,0])\n                    cylinder(h=handle_grip_d, d=handle_d+4, $fn=6);\n    }\n}\n\n// ---------- leadscrew assembly ----------\nmodule leadscrew() {\n    color(color_steel)\n    union() {\n        // threaded rod\n        rotate([0,90,0])\n            cylinder(h=base_length+10, d=leadscrew_d, center=true);\n        // crank end\n        translate([base_length/2+handle_len/2+5,0,0])\n            handle();\n    }\n}\n\n// ---------- guiding rails underneath ----------\nmodule rails() {\n    color(color_steel)\n    for(y=[-slide_width/4, slide_width/4])\n        translate([0,y,base_height/2-1])\n            cube([slide_length, 4, 2], center=true);\n}\n\n// ---------- assembly ----------\ntranslate([0,0,base_height/2])\n    vise_base();\n\ntranslate([base_length/4,0,0])\n    union() {\n        rails();\n        sliding_jaw();\n    }\n\nfixed_jaw();\n\njaw_plate(-base_length/2+1);\njaw_plate(base_length/4+slide_length/2-1);\n\nleadscrew();",
    "renders": true
  },
  {
    "tool": "clamp",
    "openscad_code": "$fn = 50;\n\n// C-Clamp overall dimensions\nclamp_width = 80;\nclamp_height = 70;\nclamp_thickness = 20;\n\n// Handle dimensions\nhandle_length = 40;\nhandle_diameter = 12;\ngrip_length = 30;\ngrip_diameter = 16;\n\n// Threaded rod\nrod_diameter = 10;\nrod_length = 50;\n\n// Jaw dimensions\njaw_width = 30;\njaw_depth = 25;\n\n// Colors\nframe_color = [0.2, 0.2, 0.2];  // dark gray metal\nhandle_color = [0.8, 0.4, 0.1];  // orange grip\nmetal_color = [0.6, 0.6, 0.6];  // light gray metal\n\nmodule main_frame() {\n    color(frame_color)\n    difference() {\n        // C-shaped frame\n        union() {\n            // Top bar\n            translate([0, clamp_height/2, 0])\n                cube([clamp_width, clamp_thickness, clamp_thickness], center=true);\n            \n            // Bottom bar\n            translate([0, -clamp_height/2, 0])\n                cube([clamp_width, clamp_thickness, clamp_thickness], center=true);\n            \n            // Back bar\n            translate([-clamp_width/2, 0, 0])\n                cube([clamp_thickness, clamp_height, clamp_thickness], center=true);\n        }\n        \n        // Thread hole in top bar\n        translate([0, clamp_height/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=clamp_thickness+2, d=rod_diameter+2, center=true, $fn=20);\n    }\n}\n\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Main handle body\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip padding segments\n        for(i = [-1, 0, 1]) {\n            translate([0, 0, i*10])\n                rotate([90, 0, 0])\n                    cylinder(h=grip_length/3, d=grip_diameter, center=true);\n        }\n    }\n}\n\nmodule threaded_rod() {\n    color(metal_color)\n    difference() {\n        // Main rod\n        cylinder(h=rod_length, d=rod_diameter, center=true, $fn=20);\n        \n        // Thread ridges (simplified)\n        for(i = [-rod_length/2:2:rod_length/2]) {\n            translate([0, 0, i])\n                rotate([0, 0, 45])\n                    cube([rod_diameter*1.1, rod_diameter*1.1, 1], center=true);\n        }\n    }\n}\n\nmodule fixed_jaw() {\n    color(frame_color)\n    translate([0, -clamp_height/2, 0])\n    union() {\n        // Main jaw block\n        translate([0, 0, -clamp_thickness/2 - jaw_depth/2])\n            cube([jaw_width, clamp_thickness, jaw_depth], center=true);\n        \n        // Jaw face with ridges\n        cube([jaw_width-4, clamp_thickness-4, 2], center=true);\n        for(i = [-jaw_width/2+2:3:jaw_width/2-2]) {\n            translate([i, 0, 1])\n                cube([0.5, clamp_thickness-6, 1], center=true);\n        }\n    }\n}\n\nmodule movable_jaw() {\n    color(metal_color)\n    translate([0, clamp_height/2 - 10, 0])\n    union() {\n        // Jaw block\n        translate([0, 0, -clamp_thickness/2 - jaw_depth/2])\n            cube([jaw_width, clamp_thickness, jaw_depth], center=true);\n        \n        // Jaw face\n        cube([jaw_width-4, clamp_thickness-4, 2], center=true);\n        \n        // Connection to rod\n        translate([0, 10, 0])\n            cylinder(h=10, d=rod_diameter+2, center=true, $fn=20);\n    }\n}\n\n// Main assembly\nmain_frame();\n\n// Handle attached to threaded rod\ntranslate([0, clamp_height/2 + handle_length/2 + 5, 0])\n    handle();\n\n// Threaded rod\ntranslate([0, clamp_height/2 - rod_length/2 + 10, 0])\n    threaded_rod();\n\n// Jaws\nfixed_jaw();\nmovable_jaw();",
    "renders": true
  },
  {
    "tool": "anvil",
    "openscad_code": "// Anvil - Realistic style, medium complexity\n// Total height: 60mm, length: 100mm, width: 40mm\n\n$fn = 64;\n\n// Main anvil body\nmodule anvil_body() {\n    union() {\n        // Base plate\n        translate([0, 0, -2]) \n            cube([100, 40, 4], center=true);\n        \n        // Main body - tapered block\n        translate([0, 0, 12])\n            scale([1, 0.8, 1])\n                cube([90, 35, 20], center=true);\n        \n        // Top working surface\n        translate([0, 0, 25])\n            cube([85, 30, 2], center=true);\n        \n        // Horn - tapered cylinder\n        translate([-45, 0, 25])\n            rotate([0, 90, 0])\n                cylinder(h=40, r1=15, r2=5, center=true);\n        \n        // Tail - square tapered\n        translate([45, 0, 20])\n            cube([20, 25, 10], center=true);\n        \n        // Round hole (pritchel hole)\n        translate([30, 0, 25])\n            rotate([0, 0, 0])\n                cylinder(h=5, r=3, center=true);\n        \n        // Square hole (hardy hole)\n        translate([35, 0, 25])\n            cube([6, 6, 5], center=true);\n    }\n}\n\n// Cut holes through the anvil\nmodule cut_holes() {\n    difference() {\n        anvil_body();\n        \n        // Pritchel hole - round\n        translate([30, 0, 0])\n            cylinder(h=60, r=3, center=true);\n        \n        // Hardy hole - square\n        translate([35, 0, 0])\n            cube([6, 6, 60], center=true);\n    }\n}\n\n// Feet/base details\nmodule feet() {\n    for(x = [-35, 35]) {\n        translate([x, 0, -4])\n            cylinder(h=4, r=8, center=false);\n    }\n    for(y = [-15, 15]) {\n        translate([0, y, -4])\n            cylinder(h=4, r=6, center=false);\n    }\n}\n\n// Surface details - hammer marks\nmodule hammer_marks() {\n    // Random hammer marks on top surface\n    for(i = [-40:10:40]) {\n        for(j = [-10:5:10]) {\n            if(i*i + j*j < 900) {  // Circular pattern\n                translate([i, j, 27])\n                    sphere(r=0.5);\n            }\n        }\n    }\n}\n\n// Assembly\ncolor(\"DarkSlateGray\") {\n    union() {\n        difference() {\n            cut_holes();\n            feet();\n        }\n    }\n}\n\n// Add dark steel color for top surface\ncolor(\"DimGray\") {\n    translate([0, 0, 26])\n        cube([85, 30, 0.5], center=true);\n}\n\n// Add rust details at base\ncolor(\"SaddleBrown\") {\n    feet();\n}\n\n// Add subtle hammer marks\ncolor(\"Gray20\") {\n    hammer_marks();\n}",
    "renders": true
  },
  {
    "tool": "tongs",
    "openscad_code": "// Medium complexity realistic tongs in OpenSCAD\n// Overall length ~90mm, printable in one piece or two mirrored halves\n\n// Colors\ncolor_handle = \"BurlyWood\";\ncolor_metal = \"Silver\";\ncolor_grip = \"DimGray\";\n\n// Basic dimensions (mm)\nhandle_length = 40;\nhandle_diameter = 8;\nscrew_radius = 3;\nscrew_height = 6;\ngrip_pad_length = 25;\ngrip_pad_width = 6;\ngrip_pad_thickness = 2;\njaw_length = 35;\njaw_width = 12;\njaw_thickness = 4;\n\nmodule handle() {\n    color(color_handle) {\n        // Main handle tube\n        difference() {\n            cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n            translate([0, 0, -1])\n                cylinder(h = handle_length + 2, d = handle_diameter - 3, $fn = 32);\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n            cylinder(h = 2, d = handle_diameter + 2, $fn = 32);\n            \n        // Grip rings\n        for (i = [1:5:handle_length - 10]) {\n            translate([0, 0, i])\n                cylinder(h = 1.5, d = handle_diameter + 1, $fn = 32);\n        }\n    }\n}\n\nmodule jaw() {\n    color(color_metal) {\n        // Main jaw body\n        difference() {\n            // Outer shape\n            hull() {\n                translate([0, 0, 0])\n                    cube([jaw_width, jaw_thickness, jaw_length], center = true);\n                translate([0, 0, jaw_length / 2 + 5])\n                    cube([jaw_width * 0.7, jaw_thickness * 0.8, 10], center = true);\n            }\n            \n            // Inner taper\n            translate([0, 0, -jaw_length / 4])\n                cube([jaw_width * 0.9, jaw_thickness + 1, jaw_length * 1.5], center = true);\n        }\n        \n        // Serrations\n        for (i = [0:2:jaw_length - 10]) {\n            translate([0, 0, -jaw_length / 2 + i + 5])\n                cube([jaw_width * 0.95, jaw_thickness + 0.1, 0.5], center = true);\n        }\n    }\n}\n\nmodule grip_pad() {\n    color(color_grip) {\n        difference() {\n            // Main pad\n            translate([0, 0, 0])\n                cube([grip_pad_width, grip_pad_thickness, grip_pad_length], center = true);\n                \n            // Grooves for grip\n            for (i = [-grip_pad_length / 2 + 3:3:grip_pad_length / 2 - 3]) {\n                translate([0, 0, i])\n                    cube([grip_pad_width, grip_pad_thickness + 0.1, 0.8], center = true);\n            }\n        }\n    }\n}\n\nmodule screw() {\n    color(color_metal) {\n        // Screw head\n        cylinder(h = screw_height, r = screw_radius, $fn = 6);\n        \n        // Threaded shaft\n        translate([0, 0, -5])\n            cylinder(h = 10, r = screw_radius * 0.7, $fn = 16);\n    }\n}\n\nmodule tong_half() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                handle();\n                \n        // Transition piece\n        translate([0, handle_diameter / 2, handle_length / 2])\n            rotate([0, 90, 0])\n                cylinder(h = handle_diameter, r = handle_diameter / 2, $fn = 16);\n                \n        // Jaw\n        translate([0, handle_diameter, handle_length])\n            rotate([0, 0, 0])\n                jaw();\n                \n        // Grip pad on jaw\n        translate([0, handle_diameter + jaw_thickness / 2 + grip_pad_thickness / 2 + 1, handle_length + 5])\n            rotate([90, 0, 0])\n                grip_pad();\n                \n        // Hinge hole (will be aligned when mirrored)\n        translate([0, handle_diameter / 2, handle_length - 5])\n            rotate([0, 90, 0])\n                cylinder(h = handle_diameter + 2, r = screw_radius * 0.8, $fn = 16);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // First half\n        tong_half();\n        \n        // Mirrored second half\n        mirror([0, 1, 0]) {\n            tong_half();\n        }\n    }\n    \n    // Remove hinge material for screw\n    translate([0, 0, handle_length - 5])\n        rotate([0, 90, 0])\n            cylinder(h = handle_diameter + 2, r = screw_radius * 0.8, $fn = 16);\n}\n\n// Screw in place\ntranslate([0, 0, handle_length - 5])\n    rotate([0, 90, 0])\n        screw();",
    "renders": true
  },
  {
    "tool": "scriber",
    "openscad_code": "// OpenSCAD Realistic Scriber Tool - Medium Complexity\n// Features: ergonomic handle, steel scribe tip, knurled grip, depth adjustment collar\n\n// Overall dimensions\nscribe_length = 85;  // Total length\nhandle_length = 60;\ntip_length = 25;\n\n// Colors\n$fn = 50;\n\nmodule handle() {\n    difference() {\n        union() {\n            // Main handle body\n            color(\"dimgray\") {\n                cylinder(h=handle_length, d1=14, d2=12);\n            }\n            \n            // Knurled grip section\n            translate([0,0,handle_length-25])\n            color(\"darkgray\") {\n                cylinder(h=20, d=14);\n            }\n            \n            // End cap\n            translate([0,0,handle_length])\n            color(\"silver\") {\n                sphere(d=14);\n            }\n        }\n        \n        // Knurling cuts\n        for(i=[0:359:15]) {\n            rotate([0,0,i])\n            translate([7,0,handle_length-25])\n            cube([0.5, 20, 20], center=true);\n        }\n        \n        // Center hole for tip\n        translate([0,0,-1])\n        cylinder(h=handle_length+2, d=5);\n    }\n}\n\nmodule adjustment_collar() {\n    translate([0,0,handle_length-30])\n    color(\"gray\") {\n        difference() {\n            cylinder(h=10, d=18);\n            cylinder(h=12, d=5.5);\n            \n            // Set screw hole\n            rotate([90,0,0])\n            translate([9,0,5])\n            cylinder(h=3, d=3);\n        }\n    }\n}\n\nmodule scribe_tip() {\n    translate([0,0,-tip_length])\n    union() {\n        // Steel shaft\n        color(\"lightgray\") {\n            cylinder(h=20, d=6);\n        }\n        \n        // Tapered needle tip\n        color(\"silver\") {\n            cylinder(h=5, d1=6, d2=0.5);\n        }\n        \n        // Fine point\n        color(\"silver\") {\n            cylinder(h=tip_length-25, d=0.4);\n        }\n    }\n}\n\nmodule handle_texture() {\n    // Side grip ridges\n    for(i=[0:3]) {\n        rotate([0,0,i*90])\n        translate([7,0,handle_length/2])\n        color(\"gray\") {\n            cube([1, 10, handle_length-20], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    adjustment_collar();\n    scribe_tip();\n    handle_texture();\n}",
    "renders": true
  },
  {
    "tool": "calipers",
    "openscad_code": "// Vernier Calipers - Realistic Style, Medium Complexity\n// Overall length ~90mm, 3D printable design\n\n// Constants\n$fn = 30;\nwall = 2;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_jaw = [0.3, 0.3, 0.3];\ncolor_scale = [0.1, 0.1, 0.1];\ncolor_highlight = [0.8, 0.8, 0.8];\n\n// Vernier calipers module\nmodule calipers() {\n    // Main beam/ruler\n    color(color_body) {\n        translate([-40, 0, 0]) {\n            difference() {\n                // Main beam body\n                cube([80, 15, 6], center=false);\n                \n                // Center slot for slider\n                translate([5, wall, -1]) cube([70, 15 - 2*wall, 8]);\n                \n                // Measurement scale markings\n                for(i = [0:79]) {\n                    translate([-39.5 + i, 0.5, 3.1]) cube([0.3, 1, 0.2]);\n                }\n            }\n        }\n    }\n    \n    // Fixed jaw\n    color(color_jaw) {\n        translate([-40, 15, 0]) {\n            union() {\n                // Jaw base\n                cube([8, 10, 6]);\n                \n                // Measuring face\n                translate([7.9, 0, 0]) cube([0.1, 10, 6]);\n            }\n        }\n    }\n    \n    // Sliding jaw assembly\n    color(color_body) {\n        translate([-5, 0, 0]) {\n            difference() {\n                // Slider body\n                cube([20, 15, 15]);\n                \n                // Grip cutouts\n                for(i = [0:3]) {\n                    translate([2 + i*4, 1, 2]) cube([2, 13, 2]);\n                }\n                \n                // Thumb wheel hole\n                translate([10, -2, 7.5]) rotate([0, 90, 0]) \n                    cylinder(h=4, r=3, center=true);\n            }\n            \n            // Lower jaw\n            translate([0, 15, 0]) {\n                union() {\n                    cube([8, 10, 6]);\n                    translate([7.9, 0, 0]) cube([0.1, 10, 6]);\n                }\n            }\n            \n            // Thumb wheel\n            color(color_highlight) {\n                translate([10, -2, 7.5]) rotate([0, 90, 0]) {\n                    cylinder(h=3, r=3.5);\n                    for(i = [0:7]) {\n                        rotate([0, 0, i*45]) \n                            translate([3.5, 0, 0]) cube([0.5, 0.5, 3]);\n                    }\n                }\n            }\n            \n            // Locking screw\n            color(color_highlight) {\n                translate([15, 7.5, 15]) rotate([90, 0, 0]) {\n                    cylinder(h=5, r=2);\n                    translate([0, 0, 5]) cylinder(h=2, r=4, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Vernier scale\n    color(color_scale) {\n        translate([-5, -1, 3.1]) {\n            for(i = [0:9]) {\n                translate([i*2, 0, 0]) cube([0.2, 0.8, 0.2]);\n            }\n        }\n    }\n    \n    // Depth rod\n    color(color_jaw) {\n        translate([-38, 7.5, -20]) {\n            cube([2, 2, 20]);\n            translate([0, 0, -1]) cylinder(h=2, r=1);\n        }\n    }\n}\n\n// Assembly\ncalipers();",
    "renders": true
  },
  {
    "tool": "dividers",
    "openscad_code": "// Realistic Dividers Tool in OpenSCAD\n// Medium complexity with 3D printable features\n\n// Overall dimensions\n$fn = 50;\nleg_length = 75;\nleg_width = 4;\nleg_thickness = 3;\nhandle_diameter = 12;\nhandle_length = 25;\npivot_radius = 5;\ntip_length = 12;\n\n// Color definitions\ncolor_leg = [0.7, 0.7, 0.7]; // Steel gray\ncolor_handle = [0.1, 0.1, 0.1]; // Black plastic\ncolor_pivot = [0.8, 0.8, 0.8]; // Silver metal\ncolor_tip = [0.9, 0.9, 0.9]; // Polished steel\n\n// Main assembly\nmodule dividers() {\n    union() {\n        // First leg\n        translate([0, 0, 0]) {\n            color(color_leg) leg();\n        }\n        \n        // Second leg (mirrored)\n        rotate([0, 0, 180]) {\n            color(color_leg) leg();\n        }\n        \n        // Pivot mechanism\n        translate([0, 0, 0]) {\n            color(color_pivot) pivot();\n        }\n        \n        // Adjustment wheel\n        translate([0, 0, leg_thickness]) {\n            color(color_pivot) adjustment_wheel();\n        }\n    }\n}\n\n// Single leg module\nmodule leg() {\n    union() {\n        // Handle grip\n        translate([-leg_length/2 + 5, 0, -handle_length/2]) {\n            rotate([90, 0, 0]) {\n                color(color_handle) cylinder(h=handle_length, d=handle_diameter, center=true);\n            }\n        }\n        \n        // Handle end cap\n        translate([-leg_length/2, 0, 0]) {\n            sphere(d=handle_diameter);\n        }\n        \n        // Main leg bar\n        translate([0, 0, -leg_thickness/2]) {\n            cube([leg_length, leg_width, leg_thickness], center=true);\n        }\n        \n        // Gripping ridges on handle\n        for (i = [-5:2:5]) {\n            translate([-leg_length/2 + 12, 0, i]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=1, d=handle_diameter + 1, center=true);\n                        cylinder(h=2, d=handle_diameter - 1, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Pointed tip\n        translate([leg_length/2 - tip_length/2, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=tip_length, r1=leg_width/2, r2=0.5, center=true);\n            }\n        }\n    }\n}\n\n// Pivot mechanism\nmodule pivot() {\n    difference() {\n        // Main pivot body\n        cylinder(h=leg_thickness * 2 + 2, r=pivot_radius, center=true);\n        \n        // Central hole\n        cylinder(h=leg_thickness * 2 + 4, r=2, center=true);\n    }\n    \n    // Threaded part detail\n    translate([0, 0, leg_thickness + 1]) {\n        cylinder(h=3, r1=pivot_radius - 1, r2=pivot_radius - 1.5);\n    }\n}\n\n// Adjustment wheel\nmodule adjustment_wheel() {\n    difference() {\n        // Wheel body\n        cylinder(h=4, r=8, center=true);\n        \n        // Knurling pattern\n        for (i = [0:15:360]) {\n            rotate([0, 0, i]) {\n                translate([6, 0, -2]) {\n                    cube([4, 1, 5], center=true);\n                }\n            }\n        }\n        \n        // Central hole\n        cylinder(h=5, r=2.5, center=true);\n    }\n}\n\n// Render the dividers\ndividers();",
    "renders": true
  },
  {
    "tool": "ruler",
    "openscad_code": "// Realistic 3D-printable 150 mm ruler\n// Overall size: 160 mm x 25 mm x 5 mm\n\n// Color definitions\nruler_color   = [0.85, 0.85, 0.82];   // Off-white plastic\nmark_color    = [0.1, 0.1, 0.1];      // Black markings\ngrip_color    = [0.2, 0.2, 0.2];      // Dark grey rubber grips\n\n// Main ruler body\nmodule ruler_body() {\n    color(ruler_color)\n    union() {\n        difference() {\n            // Main block\n            translate([0, 0, 2.5])\n                cube([160, 25, 5], center=true);\n\n            // Hollow out center for weight reduction\n            translate([0, 0, 3])\n                cube([150, 18, 3], center=true);\n        }\n\n        // Raised edges for stiffness\n        translate([0, -12, 2.5])\n            cube([160, 1, 6], center=true);\n        translate([0, 12, 2.5])\n            cube([160, 1, 6], center=true);\n    }\n}\n\n// Millimeter tick marks (every mm, with 5mm and 10mm marks longer)\nmodule mm_marks() {\n    color(mark_color)\n    for(i = [0:150]) {\n        height = (i % 10 == 0) ? 3 : (i % 5 == 0) ? 2 : 1;\n        translate([i - 75, 11.5, 5.1])\n            cube([0.4, height, 0.4]);\n    }\n}\n\n// Centimeter numbers\nmodule cm_numbers() {\n    color(mark_color)\n    for(i = [0:15]) {\n        translate([i*10 - 75, 7, 5.1])\n            linear_extrude(0.4)\n                text(str(i), size=3, halign=\"center\");\n    }\n}\n\n// Inch marks on opposite edge\nmodule inch_marks() {\n    color(mark_color)\n    for(i = [0:59]) {\n        inches = i * 25.4 / 60;\n        if(inches <= 150) {\n            height = (i % 8 == 0) ? 3 : (i % 4 == 0) ? 2 : 1;\n            translate([inches - 75, -11.5 - height, 5.1])\n                cube([0.4, height, 0.4]);\n        }\n    }\n}\n\n// Inch numbers\nmodule inch_numbers() {\n    color(mark_color)\n    for(i = [0:5]) {\n        inches = i * 25.4;\n        if(inches <= 150) {\n            translate([inches - 75, -7, 5.1])\n                linear_extrude(0.4)\n                    text(str(i), size=3, halign=\"center\");\n        }\n    }\n}\n\n// Rubber grip pads\nmodule grip_pads() {\n    color(grip_color)\n    difference() {\n        // Left grip\n        translate([-55, 0, 2.5])\n            cube([20, 23, 2], center=true);\n        \n        // Right grip\n        translate([55, 0, 2.5])\n            cube([20, 23, 2], center=true);\n\n        // Grip texture - small cylinders\n        for(x = [-60:5:-50]) {\n            for(y = [-8:4:8]) {\n                translate([x, y, 3.6])\n                    cylinder(h=2, d=1.5, $fn=8);\n            }\n        }\n        \n        for(x = [50:5:60]) {\n            for(y = [-8:4:8]) {\n                translate([x, y, 3.6])\n                    cylinder(h=2, d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Hole for hanging\nmodule hang_hole() {\n    translate([75, 0, 2.5])\n        rotate([90, 0, 0])\n            cylinder(h=25, d=3, center=true);\n}\n\n// Assembly\nunion() {\n    ruler_body();\n    mm_marks();\n    cm_numbers();\n    inch_marks();\n    inch_numbers();\n    grip_pads();\n    hang_hole();\n}",
    "renders": true
  },
  {
    "tool": "tape",
    "openscad_code": "// Tape Measure Tool - OpenSCAD\n// Medium complexity realistic tape measure\n\n$fn = 32;\n\n// Main colors\ncase_color = \"#2E2E2E\";\ntape_color = \"#C0C0C0\";\nbutton_color = \"#D02020\";\ngrip_color = \"#1A1A1A\";\nmarking_color = \"#000000\";\n\n// Main dimensions\ncase_diameter = 60;\ncase_thickness = 28;\ntape_width = 19;\ntape_thickness = 0.15;\ntape_length = 50;\nbutton_diameter = 12;\nbutton_height = 3;\ngrip_width = 35;\ngrip_height = 8;\ngrip_depth = 3;\n\nmodule case_body() {\n    // Main circular case\n    difference() {\n        cylinder(h = case_thickness, d = case_diameter);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h = case_thickness + 0.2, d = case_diameter - 8);\n        \n        // Tape exit slot\n        translate([case_diameter/2 - tape_width/2 - 2, -tape_thickness/2, case_thickness - 5])\n            cube([tape_width + 4, tape_thickness + 0.5, 5]);\n    }\n}\n\nmodule grip_pattern() {\n    // Diamond grip pattern\n    for (i = [-1:1]) {\n        translate([i * 8, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h = grip_depth, d1 = 6, d2 = 4);\n    }\n    for (i = [-1:1]) {\n        translate([i * 8 + 4, 6, 0])\n            rotate([90, 0, 0])\n                cylinder(h = grip_depth, d1 = 6, d2 = 4);\n    }\n}\n\nmodule handle() {\n    // Curved handle\n    difference() {\n        union() {\n            // Main grip\n            translate([0, -case_diameter/2 - 15, case_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 30, d = 10);\n            \n            // Grip supports\n            translate([0, -case_diameter/2 - 15, case_thickness/2 - 7])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, d = 8);\n            translate([0, -case_diameter/2 - 15, case_thickness/2 + 7])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, d = 8);\n        }\n        \n        // Grip cutouts\n        for (i = [-1:1]) {\n            translate([0, -case_diameter/2 - 15 + i * 8, case_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 4);\n        }\n    }\n}\n\nmodule lock_button() {\n    // Lock button on top\n    translate([0, case_diameter/4, case_thickness + 2])\n        cylinder(h = button_height, d = button_diameter);\n    \n    // Button base\n    translate([0, case_diameter/4, case_thickness])\n        cylinder(h = 2, d = button_diameter + 4);\n}\n\nmodule tape_end() {\n    // L-shaped tape end hook\n    translate([case_diameter/2 + tape_length, 0, case_thickness/2 - tape_thickness/2])\n        union() {\n            // Main hook\n            cube([5, tape_width, tape_thickness]);\n            \n            // Hook lip\n            translate([5, -tape_width/2 + 1, -tape_thickness])\n                cube([2, tape_width - 2, tape_thickness * 3]);\n        }\n}\n\nmodule tape_strip() {\n    // Curved tape strip\n    translate([case_diameter/2, 0, case_thickness/2 - tape_thickness/2])\n        rotate([0, -5, 0])\n            cube([tape_length, tape_width, tape_thickness]);\n}\n\nmodule measurement_marks() {\n    // Imperial measurement marks (simplified)\n    for (i = [0:tape_length/2]) {\n        translate([case_diameter/2 + i * 2, tape_width/2, case_thickness/2 - tape_thickness/2 - 0.1])\n            cube([0.5, 2, 0.1]);\n    }\n    for (i = [0:tape_length/10]) {\n        translate([case_diameter/2 + i * 10, tape_width/2 - 1, case_thickness/2 - tape_thickness/2 - 0.1])\n            cube([1, 4, 0.1]);\n    }\n}\n\n// Main assembly\ncolor(case_color) {\n    case_body();\n}\n\ncolor(grip_color) {\n    handle();\n}\n\ncolor(button_color) {\n    lock_button();\n}\n\ncolor(tape_color) {\n    tape_strip();\n    tape_end();\n}\n\ncolor(marking_color) {\n    measurement_marks();\n}\n\n// Grip texture on back\ntranslate([0, 0, case_thickness])\n    grip_pattern();",
    "renders": true
  },
  {
    "tool": "bevel",
    "openscad_code": "// Bevel Tool - Medium Complexity Realistic Style\n// Overall dimensions: ~85mm length, 25mm width, 15mm height\n\n$fn = 64;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];  // Dark gray metal\ncolor_handle = [0.1, 0.1, 0.1];  // Black grip\ncolor_blade = [0.7, 0.7, 0.7];  // Silver blade\ncolor_screw = [0.8, 0.6, 0.2];  // Brass screw\n\n// Main assembly\nmodule bevel_tool() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 5]) {\n            handle();\n        }\n        \n        // Blade assembly\n        translate([-50, 0, 7.5]) {\n            rotate([0, -30, 0]) {\n                blade_assembly();\n            }\n        }\n        \n        // Adjustment mechanism\n        translate([-35, 0, 10]) {\n            adjustment_screw();\n        }\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    color(color_handle) {\n        difference() {\n            // Main handle body\n            cylinder(h = 60, r1 = 12, r2 = 10);\n            \n            // Grip grooves\n            for(i = [0:5:55]) {\n                translate([0, 0, i]) {\n                    cylinder(h = 2, r1 = 11.5, r2 = 9.5);\n                }\n            }\n            \n            // Center hole for weight reduction\n            cylinder(h = 60, r = 6);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, 60]) {\n        color(color_body) {\n            cylinder(h = 5, r = 12);\n        }\n    }\n}\n\n// Blade assembly with base\nmodule blade_assembly() {\n    union() {\n        // Blade base\n        color(color_body) {\n            cube([40, 20, 5], center = true);\n        }\n        \n        // Blade\n        translate([20, 0, 0]) {\n            color(color_blade) {\n                difference() {\n                    // Main blade shape\n                    cube([30, 0.5, 10], center = true);\n                    \n                    // Beveled cutting edge\n                    translate([15, 0, 0]) {\n                        rotate([0, 0, 30]) {\n                            cube([20, 2, 15], center = true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Blade support ribs\n        for(i = [-8:8:8]) {\n            translate([5, i, 0]) {\n                color(color_body) {\n                    cube([10, 2, 5], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Adjustment screw mechanism\nmodule adjustment_screw() {\n    color(color_screw) {\n        // Screw head\n        translate([0, 0, 5]) {\n            cylinder(h = 3, r = 8);\n            cylinder(h = 2, r = 6);\n        }\n        \n        // Screw threads\n        translate([0, 0, -5]) {\n            cylinder(h = 10, r = 4);\n        }\n    }\n    \n    // Thread knurling\n    for(a = [0:30:330]) {\n        rotate([0, 0, a]) {\n            translate([0, 7.5, 2.5]) {\n                color(color_screw) {\n                    cube([1, 1, 5]);\n                }\n            }\n        }\n    }\n}\n\n// Angle markings on base\nmodule angle_markings() {\n    translate([-50, 0, 7.5]) {\n        color([0, 0, 0]) {\n            for(angle = [0:15:45]) {\n                rotate([0, -angle, 0]) {\n                    translate([5, 12, 0]) {\n                        cube([0.5, 3, 0.5]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the complete tool\nbevel_tool();\nangle_markings();",
    "renders": true
  },
  {
    "tool": "gouge",
    "openscad_code": "// Realistic Gouge Tool - Medium Complexity\n// 3D printable carving gouge with wooden handle and metal blade\n\n// Colors\nwood_color = \"SaddleBrown\";\nmetal_color = \"Silver\";\ndark_metal = \"#444444\";\n\n// Overall dimensions\nhandle_length = 60;\nhandle_diameter = 20;\nblade_length = 35;\nblade_width = 12;\nblade_thickness = 2.5;\n\n// Handle grip rings\nmodule grip_rings() {\n    for(i = [0:4]) {\n        translate([0, 0, 5 + i * 10]) {\n            difference() {\n                cylinder(h=2, d=handle_diameter + 2, $fn=64);\n                cylinder(h=3, d=handle_diameter - 2, $fn=64);\n            }\n        }\n    }\n}\n\n// Ferrule (metal ring at blade end)\nmodule ferrule() {\n    color(dark_metal) {\n        cylinder(h=8, d=handle_diameter + 4, $fn=64);\n    }\n}\n\n// Handle with ergonomic shape\nmodule handle() {\n    color(wood_color) {\n        difference() {\n            union() {\n                // Main handle body - slightly tapered\n                cylinder(h=handle_length, d1=handle_diameter + 2, d2=handle_diameter, $fn=64);\n                \n                // Grip rings\n                grip_rings();\n            }\n            \n            // Hollow out handle for weight reduction\n            cylinder(h=handle_length - 10, d=handle_diameter - 8, $fn=32);\n        }\n    }\n    \n    // Add ferrule at end\n    translate([0, 0, handle_length]) {\n        ferrule();\n    }\n}\n\n// Blade shank (connects to handle)\nmodule blade_shank() {\n    color(metal_color) {\n        cylinder(h=15, d1=handle_diameter - 2, d2=blade_width + 4, $fn=32);\n    }\n}\n\n// Main curved blade\nmodule blade() {\n    color(metal_color) {\n        translate([0, 0, 15]) {\n            difference() {\n                // Outer blade shape\n                rotate([90, 0, 0]) {\n                    cylinder(h=blade_length, d1=blade_width + 2, d2=blade_width, $fn=128);\n                }\n                \n                // Inner hollow (curved cutting edge)\n                translate([0, -blade_length/2, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=blade_length + 2, d1=blade_width - blade_thickness*2, d2=blade_width - blade_thickness*2 - 1, $fn=128);\n                    }\n                }\n                \n                // Create sharp cutting edge\n                translate([0, blade_length - 2, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=blade_length, d=blade_width - blade_thickness, $fn=128);\n                    }\n                }\n            }\n            \n            // Bevel on cutting edge\n            translate([0, blade_length - 1, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=3, d1=blade_width, d2=blade_width - 3, $fn=128);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nmodule gouge() {\n    // Handle assembly\n    translate([0, 0, 0]) {\n        handle();\n    }\n    \n    // Blade assembly\n    translate([0, 0, handle_length + 8]) {\n        blade_shank();\n        blade();\n    }\n}\n\n// Main model\ngouge();",
    "renders": true
  },
  {
    "tool": "rasp",
    "openscad_code": "// OpenSCAD Rasp Tool - Realistic Style, Medium Complexity\n// Dimensions: 70mm handle + 30mm rasp head = 100mm total length\n\n// Color definitions\nhandle_color = \"SaddleBrown\";\nmetal_color = \"Silver\";\ngrip_color = \"DarkGray\";\n\n// Handle with ergonomic grip\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        difference() {\n            cylinder(h=70, r1=10, r2=8, $fn=32);\n            // Finger grooves\n            for(i=[0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([0, 7, 10+i*15]) {\n                        cube([4, 3, 8], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Rubber grip rings\n        color(grip_color) {\n            for(i=[0:5]) {\n                translate([0, 0, 15+i*8]) {\n                    difference() {\n                        cylinder(h=2, r=11, $fn=32);\n                        cylinder(h=3, r=9.5, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tapered neck connecting handle to rasp\nmodule neck() {\n    color(metal_color) {\n        cylinder(h=8, r1=8, r2=5, $fn=32);\n    }\n}\n\n// Rasp head with teeth pattern\nmodule rasp_head() {\n    color(metal_color) {\n        // Main rasp body\n        union() {\n            // Tapered rasp shape\n            difference() {\n                cube([15, 8, 30], center=true);\n                translate([0, 0, -15]) {\n                    cube([13, 6, 30], center=true);\n                }\n            }\n            \n            // Teeth pattern - raised ridges\n            for(i=[0:14]) {\n                for(j=[0:7]) {\n                    translate([-7+i, -3.5+j, -12+i*1.5]) {\n                        cube([0.8, 0.8, 0.4]);\n                    }\n                }\n            }\n            \n            // Cross-cut teeth pattern\n            for(i=[0:14]) {\n                for(j=[0:7]) {\n                    translate([-7+i, -3.5+j, -12+i*1.5+0.6]) {\n                        rotate([45, 0, 0]) {\n                            cube([0.4, 0.4, 0.6]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Rasp tip\n        translate([0, 0, 15]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=8, r1=0, r2=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 35]) handle();\ntranslate([0, 0, 79]) neck();\ntranslate([0, 0, 98]) rotate([180, 0, 0]) rasp_head();",
    "renders": true
  },
  {
    "tool": "drawknife",
    "openscad_code": "// Drawknife - Medium complexity realistic style\n// Total length ~80mm, blade ~60mm wide\n\nblade_thickness = 2;\nblade_width = 60;\nblade_length = 80;\nhandle_diameter = 12;\nhandle_length = 35;\ntang_length = 25;\ntang_width = 8;\n\n// Blade module\nmodule drawknife_blade() {\n    color(\"silver\") {\n        // Main blade body\n        difference() {\n            // Tapered blade shape\n            hull() {\n                translate([-blade_width/2, 0, 0])\n                    cube([blade_width, blade_length, blade_thickness]);\n                translate([-blade_width/2 + 5, blade_length - 10, 0])\n                    cube([blade_width - 10, 10, blade_thickness]);\n            }\n            \n            // Cutting bevel\n            translate([-blade_width/2 - 1, -1, blade_thickness/2])\n                cube([blade_width + 2, blade_length + 2, blade_thickness]);\n            \n            // Edge relief\n            for(i = [0:5:blade_length - 10]) {\n                translate([-blade_width/2 - 1, i, -1])\n                    rotate([0, 45, 0])\n                    cube([5, 3, blade_thickness + 2]);\n            }\n        }\n        \n        // Blade spine rounding\n        translate([0, blade_length/2, blade_thickness/2])\n            rotate([90, 0, 0])\n            cylinder(h=blade_width, r=blade_thickness/2, $fn=20);\n    }\n}\n\n// Handle module\nmodule handle() {\n    color(\"saddlebrown\") {\n        difference() {\n            // Main handle\n            cylinder(h=handle_length, r=handle_diameter/2, $fn=20);\n            \n            // Grip grooves\n            for(i = [5:5:handle_length - 5]) {\n                translate([0, 0, i])\n                    rotate([0, 0, 0])\n                    cylinder(h=3, r1=handle_diameter/2 - 1, r2=handle_diameter/2 - 1.5, $fn=20);\n            }\n            \n            // End cap recess\n            translate([0, 0, handle_length - 2])\n                cylinder(h=3, r=handle_diameter/2 - 2, $fn=20);\n        }\n        \n        // Metal end cap\n        color(\"gray\") {\n            translate([0, 0, handle_length - 1])\n                cylinder(h=2, r=handle_diameter/2, $fn=20);\n        }\n    }\n}\n\n// Tang module\nmodule tang() {\n    color(\"silver\") {\n        translate([0, 0, -tang_length/2])\n            cube([tang_width, tang_length, blade_thickness], center=true);\n    }\n}\n\n// Assemble drawknife\nmodule drawknife() {\n    // Main blade\n    drawknife_blade();\n    \n    // Left handle assembly\n    translate([-blade_width/2 - tang_length/2, blade_length/2, 0])\n        rotate([0, 0, -30])\n        union() {\n            rotate([0, 90, 0])\n                handle();\n            tang();\n        }\n    \n    // Right handle assembly\n    translate([blade_width/2 + tang_length/2, blade_length/2, 0])\n        rotate([0, 0, 30])\n        mirror([0, 0, 1])\n        union() {\n            rotate([0, 90, 0])\n                handle();\n            tang();\n        }\n}\n\n// Render the complete tool\ndrawknife();",
    "renders": true
  },
  {
    "tool": "slick",
    "openscad_code": "// Realistic Slick Tool for 3D Printing\n// Medium complexity with functional features\n\n$fn = 32;\n\n// Overall size control\nhandle_length = 80;\nhandle_diameter = 12;\nblade_length = 60;\nblade_width = 25;\nblade_thickness = 3;\ntang_length = 35;\n\n// Main module\nmodule slick_tool() {\n    color(\"silver\") {\n        union() {\n            // Handle assembly\n            handle();\n            \n            // Tang and blade\n            tang_and_blade();\n            \n            // Rivets\n            rivets();\n        }\n    }\n}\n\n// Handle with grip pattern\nmodule handle() {\n    translate([0, 0, handle_length/2]) {\n        difference() {\n            // Main handle cylinder\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n            \n            // Grip grooves\n            for(i = [-35:10:35]) {\n                translate([0, 0, i])\n                    rotate([90, 0, 0])\n                        cylinder(h=handle_diameter+2, d=1.5, center=true);\n            }\n        }\n        \n        // Handle end cap\n        translate([0, 0, handle_length - 2])\n            cylinder(h=4, d=handle_diameter + 2, center=true);\n            \n        // Handle collar\n        translate([0, 0, 5])\n            cylinder(h=5, d=handle_diameter + 3, center=true);\n    }\n}\n\n// Tang connecting handle to blade\nmodule tang() {\n    translate([0, 0, -tang_length/2 + 5]) {\n        // Main tang\n        cube([8, blade_thickness + 2, tang_length], center=true);\n        \n        // Rivet holes\n        for(i = [1:3]) {\n            translate([0, 0, -tang_length/2 + i * 12])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=3, center=true);\n        }\n    }\n}\n\n// Blade with realistic shape\nmodule blade() {\n    translate([0, 0, -tang_length - blade_length/2 + 5]) {\n        difference() {\n            union() {\n                // Main blade body\n                linear_extrude(height=blade_thickness, center=true)\n                    polygon(points=[\n                        [0, -blade_width/2],\n                        [blade_length, -blade_width/3],\n                        [blade_length, blade_width/3],\n                        [0, blade_width/2]\n                    ]);\n                \n                // Blade spine reinforcement\n                translate([0, 0, blade_thickness/2 + 0.5])\n                    linear_extrude(height=1)\n                        polygon(points=[\n                            [0, -blade_width/2 + 2],\n                            [blade_length - 10, -blade_width/3 + 1],\n                            [blade_length - 10, blade_width/3 - 1],\n                            [0, blade_width/2 - 2]\n                        ]);\n            }\n            \n            // Cutting edge bevel\n            translate([blade_length - 8, 0, -blade_thickness/2 - 0.5])\n                cube([8, blade_width, blade_thickness/2 + 1], center=true);\n                \n            // Nail puller notch\n            translate([blade_length - 5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=8, d=8, center=true);\n        }\n    }\n}\n\n// Tang and blade combined\nmodule tang_and_blade() {\n    tang();\n    blade();\n}\n\n// Rivets for handle attachment\nmodule rivets() {\n    color(\"darkgray\") {\n        for(i = [1:3]) {\n            translate([0, 0, -tang_length/2 + 5 + i * 12]) {\n                // Rivet heads\n                for(side = [-1, 1]) {\n                    translate([side * (handle_diameter/2 + 1), 0, 0])\n                        sphere(d=5);\n                }\n                \n                // Rivet shaft\n                cylinder(h=handle_diameter + 2, d=3, center=true);\n            }\n        }\n    }\n}\n\n// Generate the tool\nslick_tool();",
    "renders": true
  },
  {
    "tool": "adze",
    "openscad_code": "// Adze Tool - Realistic Style, Medium Complexity\n// Traditional woodworking adze with curved blade and ergonomic handle\n\n// Parameters\nblade_width = 35;\nblade_thickness = 5;\nblade_curve_depth = 15;\nhandle_length = 80;\nhandle_diameter = 12;\nhead_length = 50;\nhead_height = 25;\n\n// Colors\ncolor_blade = [0.7, 0.7, 0.7];\ncolor_handle = [0.4, 0.2, 0.1];\ncolor_metal = [0.5, 0.5, 0.5];\n\n// Main adze assembly\nmodule adze() {\n    union() {\n        // Metal head with blade\n        translate([0, 0, handle_diameter/2]) {\n            color(color_metal) adze_head();\n        }\n        \n        // Wooden handle\n        translate([0, 0, 0]) {\n            color(color_handle) handle();\n        }\n    }\n}\n\n// Adze head module\nmodule adze_head() {\n    difference() {\n        union() {\n            // Main head body\n            cube([head_length, head_height, blade_thickness], center=true);\n            \n            // Blade attachment\n            translate([head_length/2 - blade_thickness/2, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=blade_thickness*2, r=head_height/2, center=true);\n                }\n            }\n            \n            // Curved blade\n            translate([head_length/2 + blade_thickness, 0, 0]) {\n                blade();\n            }\n        }\n        \n        // Hollow out for weight reduction\n        translate([0, 0, 0]) {\n            cube([head_length*0.8, head_height*0.6, blade_thickness*0.5], center=true);\n        }\n    }\n}\n\n// Curved blade module\nmodule blade() {\n    color(color_blade) {\n        difference() {\n            union() {\n                // Main blade body\n                for(i = [0:5]) {\n                    rotate([0, 0, -i*3]) {\n                        translate([0, 0, -i*blade_thickness/10]) {\n                            cube([blade_width, blade_thickness, blade_thickness], center=true);\n                        }\n                    }\n                }\n                \n                // Curved cutting edge\n                translate([-blade_width/2, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=blade_width, r=blade_curve_depth, center=true);\n                    }\n                }\n            }\n            \n            // Bevel the cutting edge\n            translate([blade_curve_depth - 2, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=blade_width*1.5, r=blade_curve_depth*1.5, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Handle module with grip texture\nmodule handle() {\n    difference() {\n        // Main handle shaft\n        cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Grip rings\n        for(i = [0:7]) {\n            translate([0, 0, -handle_length/2 + i*10 + 5]) {\n                cylinder(h=2, r=handle_diameter/2 + 1, center=true);\n            }\n        }\n    }\n    \n    // Handle end cap\n    translate([0, 0, handle_length/2]) {\n        sphere(r=handle_diameter/2 + 2);\n    }\n}\n\n// Render the adze\nrotate([0, -20, 0]) {\n    adze();\n}",
    "renders": true
  },
  {
    "tool": "fro",
    "openscad_code": "// Froe Tool - OpenSCAD Model\n// A traditional splitting tool with blade and handle\n\n// Overall dimensions\nblade_length = 70;\nblade_width = 35;\nblade_thickness = 3;\nhandle_length = 80;\nhandle_diameter = 25;\neye_length = 25;\neye_width = 20;\neye_thickness = 30;\n\n// Colors\nblade_color = \"silver\";\nhandle_color = \"brown\";\nring_color = \"darkgray\";\n\n// Create the blade\nmodule blade() {\n    color(blade_color) {\n        // Main blade body\n        translate([0, 0, blade_thickness/2])\n            cube([blade_length, blade_width, blade_thickness], center=true);\n        \n        // Cutting edge - tapered\n        translate([blade_length/2 + 2, 0, blade_thickness/2])\n            cube([4, blade_width + 2, blade_thickness], center=true);\n        \n        // Blade eye for handle\n        translate([-blade_length/2 + eye_length/2, 0, 0])\n            difference() {\n                cube([eye_length, eye_width, eye_thickness], center=true);\n                // Taper the eye\n                translate([0, 0, eye_thickness/2 + 1])\n                    cube([eye_length + 2, eye_width - 2, eye_thickness + 2], center=true);\n            }\n        \n        // Reinforcement ridge\n        translate([0, 0, blade_thickness/2 + 2])\n            cube([blade_length - 10, 5, 2], center=true);\n    }\n}\n\n// Create the handle\nmodule handle() {\n    color(handle_color) {\n        // Main handle\n        translate([-blade_length/2 - handle_length/2 - eye_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Handle grip rings\n        for(i = [1:5]) {\n            translate([-blade_length/2 - eye_length/2 - i*12, 0, 0])\n                rotate([0, 90, 0])\n                    color(ring_color)\n                        cylinder(h=3, d=handle_diameter + 2, center=true);\n        }\n        \n        // End cap\n        translate([-blade_length/2 - handle_length - eye_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=5, d1=handle_diameter, d2=handle_diameter + 5, center=true);\n        \n        // Handle swell\n        translate([-blade_length/2 - 10 - eye_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=20, d1=handle_diameter - 2, d2=handle_diameter + 3, center=true);\n    }\n}\n\n// Create the assembly\nmodule froe() {\n    union() {\n        blade();\n        handle();\n    }\n}\n\n// Render the model\nfroe();",
    "renders": true
  },
  {
    "tool": "sledge",
    "openscad_code": "// Sledgehammer - OpenSCAD realistic style medium complexity\n// Overall length: 80mm, suitable for 3D printing\n\n// Parameters\nhandle_length = 70;\nhandle_diameter = 8;\nhead_length = 30;\nhead_height = 12;\nhead_width = 12;\ngrip_length = 35;\n\n// Handle grip texture module\nmodule grip_texture() {\n    for (i = [0:3:35]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h=2, d=handle_diameter + 1, $fn=20);\n                cylinder(h=2.5, d=handle_diameter - 1, $fn=20);\n            }\n        }\n    }\n}\n\n// Handle with grip\nmodule handle() {\n    color(\"sienna\") {\n        // Main handle\n        translate([0, 0, handle_length/2]) {\n            cylinder(h=handle_length, d=handle_diameter, $fn=20);\n        }\n        \n        // Grip area\n        translate([0, 0, handle_length - grip_length/2 - 5]) {\n            grip_texture();\n        }\n        \n        // Handle end cap\n        translate([0, 0, handle_length]) {\n            cylinder(h=3, d=handle_diameter + 2, $fn=20);\n        }\n    }\n}\n\n// Sledgehammer head\nmodule hammer_head() {\n    color(\"silver\") {\n        // Main head block\n        translate([0, 0, handle_length + head_height/2]) {\n            cube([head_length, head_width, head_height], center=true);\n        }\n        \n        // Handle hole\n        translate([0, 0, handle_length]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=head_width + 2, d=handle_diameter + 1, center=true, $fn=20);\n            }\n        }\n        \n        // Striking faces\n        translate([head_length/2, 0, handle_length + head_height/2]) {\n            cube([2, head_width, head_height], center=true);\n        }\n        \n        translate([-head_length/2, 0, handle_length + head_height/2]) {\n            cube([2, head_width, head_height], center=true);\n        }\n        \n        // Chamfers on edges\n        for (i = [0:1]) {\n            mirror([i, 0, 0]) {\n                translate([head_length/2 - 1, head_width/2 - 1, handle_length + head_height/2]) {\n                    cube([2, 2, head_height], center=true);\n                }\n                translate([head_length/2 - 1, -(head_width/2 - 1), handle_length + head_height/2]) {\n                    cube([2, 2, head_height], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    hammer_head();\n    \n    // Small detail - manufacturer mark\n    color(\"black\") {\n        translate([head_length/2 - 1, 0, handle_length + head_height/2]) {\n            cube([0.5, 6, 2], center=true);\n        }\n    }\n}\n\n// Optional support base for printing\n%translate([0, 0, -1]) {\n    color(\"lightgray\", 0.3) {\n        cylinder(h=1, d=20, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "tool": "crowbar",
    "openscad_code": "// Realistic Crowbar Tool - Medium Complexity\n// Size: ~80mm total length\n\n// Color definitions\ncrowbar_color = \"Silver\";\ngrip_color = \"Black\";\n\n// Main dimensions\ntotal_length = 80;\nhandle_length = 35;\ncurved_length = 25;\npry_length = 20;\nhandle_diameter = 8;\nbar_thickness = 4;\npry_width = 6;\n\n// Handle with grip pattern\nmodule handle() {\n    color(grip_color) {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [5:5:handle_length-5]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=2, d=handle_diameter+1, $fn=32);\n                cylinder(h=2.5, d=handle_diameter-1, $fn=32);\n            }\n        }\n    }\n}\n\n// Curved neck section\nmodule curved_neck() {\n    color(crowbar_color) {\n        // Create curved transition using hull of spheres\n        hull() {\n            translate([0, 0, 0])\n            sphere(d=bar_thickness, $fn=16);\n            \n            translate([0, -curved_length/2, curved_length/2])\n            sphere(d=bar_thickness, $fn=16);\n            \n            translate([0, -curved_length, curved_length])\n            sphere(d=bar_thickness, $fn=16);\n        }\n        \n        // Add flat bottom to curved section\n        translate([0, -curved_length/2, curved_length/4])\n        cube([bar_thickness, curved_length, curved_length/2], center=true);\n    }\n}\n\n// Pry end with nail puller\nmodule pry_end() {\n    color(crowbar_color) {\n        // Main pry bar\n        translate([0, -handle_length-curved_length-pry_length/2, curved_length])\n        cube([bar_thickness, pry_length, pry_width], center=true);\n        \n        // Split pry end (claw)\n        translate([0, -handle_length-curved_length-pry_length, curved_length+pry_width/2])\n        difference() {\n            // Main claw shape\n            cube([bar_thickness, pry_length/2, pry_width], center=true);\n            \n            // V-shaped notch for nail pulling\n            translate([0, pry_length/4, 0])\n            rotate([0, 0, 45])\n            cube([bar_thickness+1, pry_length/2, pry_width], center=true);\n            \n            translate([0, -pry_length/4, 0])\n            rotate([0, 0, -45])\n            cube([bar_thickness+1, pry_length/2, pry_width], center=true);\n        }\n        \n        // Taper the pry end\n        translate([0, -handle_length-curved_length-pry_length-2, curved_length])\n        cube([bar_thickness, 4, 0.5], center=true);\n    }\n}\n\n// Flat chisel end\nmodule chisel_end() {\n    color(crowbar_color) {\n        // Main bar extension\n        translate([0, handle_length/2, 0])\n        cube([bar_thickness, handle_length, pry_width], center=true);\n        \n        // Chisel end - tapered\n        translate([0, handle_length+3, 0])\n        hull() {\n            cube([bar_thickness, 1, pry_width], center=true);\n            cube([bar_thickness, 0.5, pry_width-2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Position handle at origin\n    translate([0, 0, -handle_length/2])\n    handle();\n    \n    // Curved transition\n    translate([0, handle_length/2, 0])\n    rotate([90, 0, 0])\n    curved_neck();\n    \n    // Pry end\n    pry_end();\n    \n    // Chisel end\n    chisel_end();\n}",
    "renders": true
  },
  {
    "tool": "lever",
    "openscad_code": "// Lever Tool - Medium Complexity Realistic Style\n// A 3D printable pry bar / crowbar style lever tool\n\n// Colors\n$fn = 48;\n\n// Main parameters\nbar_length = 80;\nbar_width = 8;\nbar_height = 12;\nhandle_length = 25;\nhandle_diameter = 14;\nclaw_radius = 6;\nclaw_width = 10;\nclaw_length = 20;\n\nmodule main_bar() {\n    color(\"silver\") {\n        // Central bar body\n        translate([0, 0, bar_height/2])\n            cube([bar_length, bar_width, bar_height], center=true);\n        \n        // Reinforcement ridges along bar\n        for(i = [-bar_length/2 + 5 : 10 : bar_length/2 - 5]) {\n            translate([i, 0, bar_height - 1])\n                cube([8, bar_width + 2, 2], center=true);\n        }\n    }\n}\n\nmodule handle() {\n    color(\"darkslategray\") {\n        // Main handle grip\n        translate([-bar_length/2 - handle_length/2, 0, bar_height/2]) {\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, d=handle_diameter, center=true);\n            \n            // Grip rings\n            for(i = [-handle_length/2 + 3 : 3 : handle_length/2 - 3]) {\n                translate([0, 0, i])\n                    cylinder(h=1.5, d=handle_diameter + 1, center=true);\n            }\n        }\n    }\n}\n\nmodule claw_end() {\n    color(\"silver\") {\n        // Claw base\n        translate([bar_length/2 + claw_length/2, 0, bar_height/2 - 2]) {\n            rotate([0, 0, 0])\n                cube([claw_length, claw_width, bar_height + 4], center=true);\n        }\n        \n        // Curved claw\n        translate([bar_length/2 + claw_length, 0, bar_height/2 - 2]) {\n            difference() {\n                // Outer claw curve\n                rotate([0, 90, 0])\n                    cylinder(h=claw_width, r=claw_radius, center=true);\n                \n                // Inner curve for nail puller\n                translate([0, 0, claw_radius/2])\n                    rotate([0, 90, 0])\n                        cylinder(h=claw_width + 2, r=claw_radius/2, center=true);\n                \n                // Split claw into two prongs\n                translate([0, 0, 0])\n                    cube([claw_radius * 2, claw_width/2, claw_radius * 2], center=true);\n            }\n        }\n        \n        // Claw tip bevel\n        translate([bar_length/2 + claw_length + claw_radius, 0, bar_height/2 - 2]) {\n            rotate([0, 90, 0])\n                cylinder(h=claw_width, r1=claw_radius, r2=claw_radius - 2, center=true);\n        }\n    }\n}\n\nmodule bevel_ends() {\n    // Bevel handle end\n    translate([-bar_length/2 - handle_length/2, 0, bar_height/2]) {\n        rotate([90, 0, 0])\n            cylinder(h=handle_length/2, r1=handle_diameter/2, r2=handle_diameter/2 - 2, center=true);\n    }\n    \n    // Bevel claw connection\n    translate([bar_length/2, 0, bar_height/2]) {\n        rotate([0, 90, 0])\n            cylinder(h=bar_width + 2, r=bar_height/2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_bar();\n    handle();\n    claw_end();\n    bevel_ends();\n    \n    // Small nail puller slot near claw\n    translate([bar_length/2 - 5, 0, bar_height/2 + 2]) {\n        cube([3, bar_width + 1, 4], center=true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "wedge",
    "openscad_code": "// Wedge Tool - Medium Complexity Realistic Style\n// A functional splitting wedge with handle and striking surface\n\n// Color definitions\n$fn = 50;\n\n// Main module for the wedge tool\nmodule wedge_tool() {\n    color(\"silver\") {\n        // Main wedge body\n        union() {\n            // Primary wedge blade\n            translate([0, 0, 10]) rotate([0, 0, 0]) {\n                wedge_body();\n            }\n            \n            // Handle collar\n            translate([0, 0, -5]) handle_collar();\n            \n            // Handle grip\n            translate([0, 0, -35]) handle_grip();\n            \n            // Striking surface\n            translate([0, 0, 20]) striking_surface();\n        }\n        \n        // Safety features and details\n        safety_features();\n        \n        // Weight reduction holes\n        weight_reduction();\n    }\n}\n\n// Main wedge blade body\nmodule wedge_body() {\n    // Tapered blade starting wide and narrowing\n    hull() {\n        // Wide base\n        translate([0, 0, 0]) cube([60, 10, 5], center = true);\n        \n        // Narrow tip\n        translate([0, 0, 25]) cube([8, 8, 2], center = true);\n        \n        // Mid section\n        translate([0, 0, 12]) cube([35, 9, 4], center = true);\n    }\n    \n    // Side bevels for splitting action\n    difference() {\n        cube([60, 10, 30], center = true);\n        \n        // Left bevel\n        translate([-25, -6, 12]) rotate([0, 15, 0]) \n            cube([50, 20, 30], center = true);\n        \n        // Right bevel\n        translate([25, -6, 12]) rotate([0, -15, 0]) \n            cube([50, 20, 30], center = true);\n    }\n    \n    // Curved cutting edge\n    translate([0, 0, 28]) \n        scale([1, 0.3, 0.3]) \n        sphere(15, center = true);\n}\n\n// Handle collar for grip transition\nmodule handle_collar() {\n    difference() {\n        cylinder(h = 10, r1 = 12, r2 = 10, center = true);\n        \n        // Central hole for weight reduction\n        cylinder(h = 12, r = 6, center = true);\n    }\n}\n\n// Ergonomic handle grip\nmodule handle_grip() {\n    color(\"darkslategray\") {\n        difference() {\n            // Main grip cylinder\n            cylinder(h = 50, r = 10, center = true);\n            \n            // Finger grooves\n            for(i = [-20:10:20]) {\n                translate([0, 0, i]) \n                    rotate([0, 90, 0]) \n                    cylinder(h = 20, r1 = 11, r2 = 8, center = true);\n            }\n            \n            // Through hole for hanging\n            translate([0, 0, 0]) rotate([0, 90, 0]) \n                cylinder(h = 25, r = 3, center = true);\n        }\n        \n        // Grip texture rings\n        for(i = [-20:5:20]) {\n            translate([0, 0, i]) \n                cylinder(h = 2, r = 10.5, center = true);\n        }\n    }\n}\n\n// Striking surface for hammer impact\nmodule striking_surface() {\n    difference() {\n        // Main striking plate\n        translate([0, 0, 0]) cube([40, 20, 8], center = true);\n        \n        // Chamfered edges\n        translate([0, 0, 2]) \n            cube([36, 16, 12], center = true);\n        \n        // Impact surface texture\n        for(x = [-15:5:15]) {\n            for(y = [-7:3.5:7]) {\n                translate([x, y, 4]) \n                    cylinder(h = 2, r = 1.5, center = true);\n            }\n        }\n    }\n}\n\n// Safety features\nmodule safety_features() {\n    // Safety ridge\n    color(\"red\") {\n        translate([0, 0, 22]) \n            difference() {\n                cube([65, 12, 2], center = true);\n                cube([55, 8, 3], center = true);\n            }\n    }\n}\n\n// Weight reduction features\nmodule weight_reduction() {\n    // Triangular cutouts in blade\n    difference() {\n        wedge_body();\n        \n        // Left side cutouts\n        for(i = [5:10:45]) {\n            translate([-i, 0, 15]) \n                rotate([0, 0, 45]) \n                cube([8, 8, 20], center = true);\n        }\n        \n        // Right side cutouts\n        for(i = [5:10:45]) {\n            translate([i, 0, 15]) \n                rotate([0, 0, -45]) \n                cube([8, 8, 20], center = true);\n        }\n    }\n}\n\n// Render the complete tool\nwedge_tool();",
    "renders": true
  },
  {
    "tool": "pick",
    "openscad_code": "// Pick tool (lock pick) - realistic style, medium complexity\n// Overall length: ~80mm, suitable for 3D printing\n\n// Color definitions\n$fn = 32;\n\n// Main handle module\nmodule handle() {\n    color(\"DarkSlateGray\") {\n        // Handle body with ergonomic grip pattern\n        union() {\n            // Main handle body\n            difference() {\n                hull() {\n                    translate([0, 0, -2]) \n                        cube([8, 18, 4], center=true);\n                    translate([0, 0, 2]) \n                        cube([10, 20, 4], center=true);\n                }\n                \n                // Grip indentations\n                for(i = [-3:1:3]) {\n                    translate([0, i*4, 0])\n                        rotate([0, 90, 0])\n                            cylinder(h=10, r=1.5, center=true);\n                }\n            }\n            \n            // Grip ridges for better handling\n            for(i = [-3:1:3]) {\n                translate([5.5, i*4, 0])\n                    cube([1, 2, 3], center=true);\n                translate([-5.5, i*4, 0])\n                    cube([1, 2, 3], center=true);\n            }\n            \n            // Tapered end\n            translate([0, -12, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=3, r1=4, r2=2, center=true);\n        }\n    }\n}\n\n// Pick shaft module\nmodule shaft() {\n    color(\"Silver\") {\n        // Tapered rectangular shaft\n        difference() {\n            hull() {\n                translate([0, 12, 0])\n                    cube([2, 12, 1.5], center=true);\n                translate([0, 28, 0])\n                    cube([1, 40, 0.8], center=true);\n            }\n            \n            // Lightening hole\n            translate([0, 20, 0])\n                cube([0.5, 15, 0.5], center=true);\n        }\n    }\n}\n\n// Pick tip (hook style)\nmodule pick_tip() {\n    color(\"Silver\") {\n        // Hook pick profile\n        union() {\n            // Main tip body\n            translate([0, 48, 0])\n                rotate([0, 0, 15])\n                    cube([0.6, 8, 0.6], center=true);\n            \n            // Hook curve\n            translate([0.2, 54, 0])\n                rotate([0, 0, 45])\n                    cylinder(h=0.6, r=3, center=false);\n            \n            // Fine tip point\n            translate([-0.2, 51.5, 0])\n                sphere(r=0.3);\n        }\n        \n        // Reinforcement ridge\n        translate([0, 40, 0])\n            rotate([90, 0, 0])\n                cylinder(h=1, r=0.8, center=true);\n    }\n}\n\n// Tension wrench storage slot\nmodule tension_wrench_slot() {\n    color(\"DimGray\") {\n        // Slot for tension wrench\n        translate([0, 5, 2.5])\n            cube([6, 10, 1], center=true);\n        \n        // Notch for retention\n        translate([0, 8, 3])\n            cube([3, 2, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    shaft();\n    pick_tip();\n    tension_wrench_slot();\n}",
    "renders": true
  },
  {
    "tool": "mattock",
    "openscad_code": "// Realistic Mattock Tool - Medium Complexity\n// Overall length ~85mm, suitable for 3D printing\n\n$fn = 50;\n\n// Main colors\ncolor_wood = [0.6, 0.4, 0.2];\ncolor_metal = [0.5, 0.5, 0.5];\ncolor_handle = [0.4, 0.2, 0.1];\n\nmodule handle_grip() {\n    color(color_handle)\n    difference() {\n        // Main handle\n        cylinder(h = 45, d = 8);\n        \n        // Grip rings\n        for (i = [0:3]) {\n            translate([0, 0, i * 10 + 2])\n                cylinder(h = 3, d = 7.5);\n        }\n    }\n}\n\nmodule handle() {\n    color(color_wood)\n    union() {\n        // Main handle shaft\n        rotate([0, 90, 0])\n            cylinder(h = 70, d = 12);\n        \n        // Tapered end\n        translate([0, 35, 0])\n            rotate([0, 90, 0])\n                cylinder(h1 = 10, h2 = 0, d1 = 12, d2 = 8);\n        \n        // Handle grip\n        translate([0, -30, 0])\n            rotate([0, 90, 0])\n                handle_grip();\n    }\n}\n\nmodule pick_end() {\n    color(color_metal)\n    difference() {\n        // Main pick shaft\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 20, d = 12);\n        \n        // Taper to point\n        translate([12, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h1 = 15, h2 = 0, d1 = 12, d2 = 2);\n        \n        // Side bevels\n        rotate([0, 0, 45])\n            translate([5, 0, 0])\n                cube([20, 5, 12], center = true);\n        rotate([0, 0, -45])\n            translate([5, 0, 0])\n                cube([20, 5, 12], center = true);\n    }\n}\n\nmodule adze_blade() {\n    color(color_metal)\n    difference() {\n        // Main blade body\n        translate([0, 0, 5])\n            cube([25, 30, 6], center = true);\n        \n        // Cutting edge curve\n        translate([0, 15, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r = 20, center = true);\n        \n        // Taper thickness\n        translate([0, 15, 5])\n            rotate([90, 0, 0])\n                cylinder(h = 30, r1 = 20, r2 = 18, center = true);\n        \n        // Sharpen edge\n        translate([0, 15, 2])\n            rotate([90, 0, 0])\n                cube([30, 6, 3], center = true);\n    }\n}\n\nmodule head_mount() {\n    color(color_metal)\n    union() {\n        // Eye for handle\n        difference() {\n            cylinder(h = 15, d = 14);\n            translate([0, 0, -1])\n                cylinder(h = 17, d = 12);\n        }\n        \n        // Reinforcement collar\n        translate([0, 0, 7.5])\n            cylinder(h = 5, d = 18);\n    }\n}\n\nmodule mattock_head() {\n    color(color_metal)\n    union() {\n        // Mounting point\n        head_mount();\n        \n        // Pick end\n        translate([0, 0, -10])\n            rotate([0, 180, 0])\n                pick_end();\n        \n        // Adze blade\n        translate([0, 0, 10])\n            rotate([90, 0, 0])\n                adze_blade();\n        \n        // Additional blade support\n        translate([0, 10, 5])\n            rotate([45, 0, 0])\n                cube([8, 20, 3], center = true);\n    }\n}\n\n// Assemble the mattock\ntranslate([0, 0, 0])\n    mattock_head();\n\ntranslate([0, 0, 15])\n    rotate([0, 90, 0])\n        handle();",
    "renders": true
  },
  {
    "tool": "hoe",
    "openscad_code": "// Realistic Hoe Tool - Medium Complexity OpenSCAD Model\n// Overall dimensions: ~90mm length, blade width ~40mm\n\n// Color definitions\nblade_color = [0.5, 0.5, 0.5];  // Metal gray\nhandle_color = [0.4, 0.2, 0.1];  // Wood brown\ngrip_color = [0.1, 0.1, 0.1];   // Black grip\n\n// Main assembly\nmodule hoe() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 0]) handle_assembly();\n        \n        // Blade assembly\n        translate([0, 0, 75]) blade_assembly();\n    }\n}\n\n// Handle with grip details\nmodule handle_assembly() {\n    color(handle_color) {\n        // Main handle shaft\n        cylinder(h=70, d=8, $fn=32);\n        \n        // Tapered end\n        translate([0, 0, -2]) cylinder(h=5, d1=8, d2=6, $fn=32);\n        \n        // Reinforced neck\n        translate([0, 0, 68]) cylinder(h=7, d1=8, d2=12, $fn=32);\n    }\n    \n    // Grip rings\n    color(grip_color) {\n        for(i = [10:15:55]) {\n            translate([0, 0, i]) cylinder(h=3, d=9.5, $fn=32);\n        }\n    }\n}\n\n// Blade assembly with realistic features\nmodule blade_assembly() {\n    // Blade mount/socket\n    color(blade_color) {\n        difference() {\n            // Socket body\n            translate([0, 0, -8]) cylinder(h=12, d=14, $fn=32);\n            \n            // Socket hole\n            translate([0, 0, -10]) cylinder(h=15, d=9.5, $fn=32);\n        }\n        \n        // Blade mounting bracket\n        translate([0, -7, 0]) cube([14, 14, 12], center=true);\n        \n        // Main blade\n        translate([0, -25, 4]) blade_shape();\n        \n        // Blade reinforcement rib\n        translate([0, -15, 2]) cube([2, 20, 4], center=true);\n    }\n}\n\n// Detailed blade shape\nmodule blade_shape() {\n    difference() {\n        // Main blade body\n        linear_extrude(height=3) polygon(points=[\n            [-20, 0], [-15, -20], [0, -25], [15, -20], [20, 0], [20, 5], [-20, 5]\n        ]);\n        \n        // Cutting edge bevel\n        translate([0, -25, 0]) cube([40, 2, 3], center=true);\n    }\n    \n    // Blade tip reinforcement\n    translate([0, -25, 0]) {\n        cylinder(h=3, d=4, $fn=16);\n    }\n    \n    // Stress relief holes\n    for(x = [-12, 0, 12]) {\n        translate([x, -12, 1.5]) cylinder(h=3, d=3, $fn=16);\n    }\n}\n\n// Render the complete hoe\nhoe();",
    "renders": true
  },
  {
    "tool": "rake",
    "openscad_code": "// Garden rake - realistic style, medium complexity\n// Overall size: ~90mm long, 25mm wide\n\n// Colors\nhandle_color = \"SaddleBrown\";\nmetal_color = \"Silver\";\ngrip_color = \"DarkRed\";\n\n// Handle parameters\nhandle_length = 75;\nhandle_diameter = 6;\ngrip_length = 15;\ngrip_diameter = 8;\n\n// Head parameters\nhead_width = 22;\nhead_thickness = 3;\nhead_height = 8;\ntine_count = 11;\ntine_width = 1.2;\ntine_length = 12;\ntine_thickness = 0.8;\n\n// Connection bracket\nbracket_length = 10;\nbracket_width = 10;\nbracket_height = 6;\n\n// Handle with grip\nmodule handle() {\n    color(handle_color) {\n        // Main handle shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip section\n        translate([0, 0, handle_length - grip_length]) \n            color(grip_color) \n            cylinder(h=grip_length, d=grip_diameter, $fn=32);\n        \n        // Grip rings for texture\n        for(i = [0:3]) {\n            translate([0, 0, handle_length - grip_length + i*3 + 1]) \n                color(grip_color) \n                cylinder(h=1, d=grip_diameter+1, $fn=32);\n        }\n    }\n}\n\n// Rake head with tines\nmodule rake_head() {\n    // Main head body\n    color(metal_color) {\n        // Head plate\n        translate([-head_width/2, -head_thickness/2, -head_height])\n            cube([head_width, head_thickness, head_height]);\n        \n        // Tapered connection to bracket\n        translate([-bracket_width/2, -head_thickness/2, -head_height-bracket_height])\n            cube([bracket_width, head_thickness, bracket_height]);\n    }\n}\n\n// Individual tine\nmodule tine() {\n    color(metal_color) {\n        // Tine shaft\n        translate([-tine_width/2, -tine_thickness/2, -tine_length])\n            cube([tine_width, tine_thickness, tine_length]);\n        \n        // Tine tip - beveled\n        translate([-tine_width/2, -tine_thickness/2, -tine_length])\n            rotate([0, 45, 0])\n            cube([tine_width, tine_thickness*sqrt(2), tine_thickness]);\n    }\n}\n\n// Complete rake assembly\nmodule rake() {\n    // Handle\n    rotate([90, 0, 0])\n    handle();\n    \n    // Connection bracket\n    translate([0, 0, -bracket_height])\n    color(metal_color) {\n        // Main bracket\n        rotate([90, 0, 0])\n        cylinder(h=bracket_length, d=bracket_width, $fn=32);\n        \n        // Reinforcement ring\n        translate([0, 0, -bracket_length/2])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=bracket_length/2, d=bracket_width+2, $fn=32);\n            cylinder(h=bracket_length/2+1, d=bracket_width-1, $fn=32);\n        }\n    }\n    \n    // Rake head\n    translate([0, bracket_length, 0])\n    rake_head();\n    \n    // Tines\n    translate([0, bracket_length, -head_height])\n    for(i = [0:tine_count-1]) {\n        x_pos = -head_width/2 + head_width/(tine_count-1)*i;\n        translate([x_pos, 0, 0])\n        tine();\n    }\n}\n\n// Render the rake\nrake();",
    "renders": true
  },
  {
    "tool": "spade",
    "openscad_code": "// Realistic Spade Tool - Medium Complexity\n// Scale: 50-100mm largest dimension\n\n// Colors\nblade_color = [0.7, 0.7, 0.7]; // Metallic gray\nhandle_color = [0.4, 0.2, 0.1]; // Dark brown handle\ngrip_color = [0.1, 0.1, 0.1]; // Black rubber grip\nmetal_color = [0.8, 0.8, 0.8]; // Brighter metal\n\n// Main module\nmodule spade() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 80]) handle_assembly();\n        \n        // Blade\n        translate([0, 0, 0]) blade();\n        \n        // Collar connecting handle to blade\n        translate([0, 0, 60]) collar();\n    }\n}\n\n// Handle assembly\nmodule handle_assembly() {\n    union() {\n        // Main handle shaft\n        color(handle_color) cylinder(h = 80, d = 12, $fn = 32);\n        \n        // Rubber grip\n        color(grip_color) \n        translate([0, 0, 40]) \n        cylinder(h = 35, d = 14, $fn = 32);\n        \n        // Grip texture rings\n        for(i = [0:3]) {\n            color(handle_color)\n            translate([0, 0, 42 + i * 8])\n            cylinder(h = 2, d = 13, $fn = 32);\n        }\n        \n        // Handle end cap\n        color(metal_color)\n        translate([0, 0, 80])\n        cylinder(h = 5, d = 14, $fn = 32);\n    }\n}\n\n// Blade assembly\nmodule blade() {\n    union() {\n        // Main blade\n        color(blade_color) main_blade();\n        \n        // Step on blade\n        color(metal_color) step();\n        \n        // Blade edge\n        color(metal_color) blade_edge();\n    }\n}\n\n// Main blade shape\nmodule main_blade() {\n    difference() {\n        // Basic blade shape\n        union() {\n            // Curved blade\n            linear_extrude(height = 2, convexity = 10)\n            polygon(points = [\n                [-15, 0], [15, 0], [20, 30], [10, 50], [-10, 50], [-20, 30]\n            ]);\n            \n            // Stem\n            translate([0, -8, 0])\n            cube([8, 8, 2], center = true);\n        }\n        \n        // Cut hole for weight reduction\n        translate([0, 30, 0])\n        cylinder(h = 3, d = 6, center = true, $fn = 32);\n    }\n}\n\n// Step for foot\nmodule step() {\n    translate([0, -4, 2])\n    cube([30, 8, 2], center = true);\n}\n\n// Sharpened blade edge\nmodule blade_edge() {\n    translate([0, 25, -1])\n    cube([35, 25, 1]);\n}\n\n// Collar connecting handle to blade\nmodule collar() {\n    color(metal_color) {\n        union() {\n            // Main collar\n            cylinder(h = 20, d = 16, $fn = 32);\n            \n            // Rivet details\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle])\n                translate([7, 0, 10])\n                cylinder(h = 3, d = 3, $fn = 16);\n            }\n        }\n    }\n}\n\n// Generate the spade\nspade();",
    "renders": true
  },
  {
    "tool": "shovel",
    "openscad_code": "// Realistic shovel (medium complexity) â€“ 3D-printable, no overhangs\n$fa = 1; $fs = 0.5;\n\n// Overall scale factor for easy resizing\nscale_factor = 0.7;\n\nmodule shovel() {\n\n    // ---------- HANDLE ----------\n    color(\"Sienna\") {\n        // Main shaft\n        translate([0, 0, 60*scale_factor])\n            cylinder(h = 120*scale_factor,\n                     r1 = 4*scale_factor,\n                     r2 = 4*scale_factor,\n                     $fn = 32);\n        \n        // Top grip ring\n        translate([0, 0, 180*scale_factor])\n            difference() {\n                cylinder(h = 15*scale_factor,\n                         r1 = 6*scale_factor,\n                         r2 = 6*scale_factor,\n                         $fn = 32);\n                cylinder(h = 16*scale_factor,\n                         r1 = 3*scale_factor,\n                         r2 = 3*scale_factor,\n                         $fn = 32);\n            }\n            \n        // Handle grip texture\n        for(i = [0:2:120*scale_factor]) {\n            translate([0, 0, 60*scale_factor + i])\n                difference() {\n                    cylinder(h = 1.5*scale_factor,\n                             r1 = 4.3*scale_factor,\n                             r2 = 4.3*scale_factor,\n                             $fn = 32);\n                    cylinder(h = 1.6*scale_factor,\n                             r1 = 4*scale_factor,\n                             r2 = 4*scale_factor,\n                             $fn = 32);\n                }\n        }\n    }\n    \n    // ---------- SOCKET ----------\n    color(\"DarkSlateGray\") {\n        translate([0, 0, 0])\n            difference() {\n                // Socket tube\n                cylinder(h = 22*scale_factor,\n                         r1 = 6*scale_factor,\n                         r2 = 4.5*scale_factor,\n                         $fn = 32);\n                // Remove inner hole\n                cylinder(h = 23*scale_factor,\n                         r1 = 4*scale_factor,\n                         r2 = 4*scale_factor,\n                         $fn = 32);\n            }\n    }\n    \n    // ---------- BLADE ----------\n    color(\"LightGray\") {\n        union() {\n            // Main blade body\n            translate([0, -30*scale_factor, -10*scale_factor])\n                scale([1, 1, 0.3])\n                sphere(r = 35*scale_factor, $fn = 64);\n            \n            // Flatten bottom\n            translate([0, -50*scale_factor, -18*scale_factor])\n                cube([70*scale_factor, 50*scale_factor, 20*scale_factor], center = true);\n            \n            // Stiffening rib\n            translate([0, -20*scale_factor, 0])\n                rotate([90, 0, 0])\n                cylinder(h = 60*scale_factor,\n                         r1 = 2*scale_factor,\n                         r2 = 2*scale_factor,\n                         $fn = 16);\n        }\n    }\n    \n    // ---------- BLADE EDGES ----------\n    color(\"DarkGray\") {\n        translate([0, -65*scale_factor, -7*scale_factor])\n            rotate([90, 0, 0])\n            linear_extrude(height = 0.5*scale_factor, center = true, convexity = 10)\n            polygon(points = [\n                [-35*scale_factor, 0],\n                [-30*scale_factor, -3*scale_factor],\n                [30*scale_factor, -3*scale_factor],\n                [35*scale_factor, 0]\n            ]);\n    }\n    \n    // ---------- STEP PLATE ----------\n    color(\"LightGray\") {\n        translate([0, 0, 5*scale_factor])\n            cube([12*scale_factor, 50*scale_factor, 2*scale_factor], center = true);\n    }\n}\n\n// Render the shovel\nshovel();",
    "renders": true
  },
  {
    "tool": "trowel",
    "openscad_code": "// Realistic 3D printable trowel tool - medium complexity\n// Overall length: 80mm, blade width: 40mm\n\n// Blade module - slightly curved with proper thickness\nmodule blade() {\n    color(\"silver\")\n    difference() {\n        // Main blade body - tapered\n        union() {\n            // Wide part of blade\n            linear_extrude(height=2, scale=[1, 0.9])\n                polygon(points=[\n                    [0, 0], [40, 0], [38, 35], [2, 35], [0, 30]\n                ]);\n            \n            // Narrow neck transition\n            translate([0, 35, 0])\n                cube([8, 5, 2], center=true);\n        }\n        \n        // Blade tip curve\n        translate([40, 0, -1])\n            rotate([0, 90, 0])\n                cylinder(h=45, r=15, $fn=20);\n        \n        // Blade edge bevel\n        translate([0, 0, 1.5])\n            linear_extrude(height=1)\n                polygon(points=[\n                    [0, 0], [40, 0], [39, 35], [1, 35]\n                ]);\n    }\n}\n\n// Handle grip with realistic texture\nmodule grip() {\n    color(\"darkgreen\")\n    difference() {\n        union() {\n            // Main grip cylinder\n            translate([0, 45, 1])\n                cylinder(h=30, r=4, $fn=16);\n            \n            // Grip flare at end\n            translate([0, 75, 1])\n                cylinder(h=5, r1=4, r2=5, $fn=16);\n        }\n        \n        // Grip texture rings\n        for(i=[0:3]) {\n            translate([0, 48 + i*7, 1])\n                rotate([0, 90, 0])\n                    cylinder(h=8, r=3.8, $fn=16);\n        }\n        \n        // Finger grooves\n        for(i=[0:2]) {\n            rotate([0, 0, i*120])\n                translate([3.5, 60, 1])\n                    rotate([90, 0, 0])\n                        cylinder(h=6, r=1, $fn=8);\n        }\n    }\n}\n\n// Tang - metal extension into handle\nmodule tang() {\n    color(\"silver\")\n    translate([0, 37, 1])\n        cube([6, 10, 1.5], center=true);\n}\n\n// Handle ferrule\nmodule ferrule() {\n    color(\"goldenrod\")\n    difference() {\n        // Main ferrule ring\n        translate([0, 44, 1])\n            cylinder(h=4, r=5.5, $fn=32);\n        \n        // Inner cutout\n        translate([0, 44, 0.5])\n            cylinder(h=5, r=4.5, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main blade\n    blade();\n    \n    // Tang connecting blade to handle\n    tang();\n    \n    // Metal ferrule at blade-handle junction\n    ferrule();\n    \n    // Handle grip\n    grip();\n}",
    "renders": true
  },
  {
    "tool": "scoop",
    "openscad_code": "// Realistic Medium-Complexity 3D-Printable Scoop Tool\n// Overall length ~85 mm, scoop width ~45 mm, handle ~15 mm thick\n\n// Parameters\nhandle_len = 60;\nhandle_d = 15;\nscoop_w = 45;\nscoop_d = 40;\nscoop_h = 20;\nwall_t = 2.4;      // 2-3 perimeters common for FDM\nfillet_r = 3;\n\n// Colors\ncolor_handle = \"SaddleBrown\";\ncolor_scoop  = \"Silver\";\n\n// Utility module for rounded edges\nmodule round_box(size, r, center=false) {\n    translate(center ? -size/2 : [0,0,0])\n    hull() {\n        for(dx=[0,size.x], dy=[0,size.y], dz=[0,size.z])\n            translate([dx,dy,dz]-[r,r,r])\n                sphere(r, $fn=16);\n    }\n}\n\n// Handle grip rings\nmodule grip_rings(count=5) {\n    for(i=[0:count-1]) {\n        translate([0,0,i*handle_len/count])\n            difference() {\n                cylinder(h=3, d=handle_d+2, center=true, $fn=64);\n                cylinder(h=4, d=handle_d-1, center=true, $fn=64);\n            }\n    }\n}\n\n// Main handle\nmodule handle() {\n    color(color_handle)\n    difference() {\n        union() {\n            // Primary shaft\n            cylinder(h=handle_len, d=handle_d, center=false, $fn=64);\n            grip_rings();\n            // Ferrule ring at joint\n            translate([0,0,handle_len-2])\n                cylinder(h=4, d=handle_d+3, $fn=64);\n        }\n        // Hollow shaft to save material\n        translate([0,0,-1])\n            cylinder(h=handle_len+2, d=handle_d-wall_t*2, $fn=64);\n    }\n}\n\n// Scoop bowl with realistic taper and pour spout\nmodule scoop() {\n    color(color_scoop)\n    difference() {\n        union() {\n            // Outer bowl shell\n            scale([1, 0.9, 0.7])\n                sphere(d=scoop_w, $fn=64);\n            translate([0,0,-scoop_h/2])\n                cube([scoop_w, scoop_d, scoop_h], center=true);\n            // Reinforcement ridge\n            translate([0,0,-scoop_h/2+wall_t])\n                round_box([scoop_w+4, 4, wall_t*2], fillet_r, center=true);\n        }\n        // Inner cavity\n        translate([0,0,-scoop_h/2+wall_t])\n            scale([1, 0.85, 0.65])\n                sphere(d=scoop_w-wall_t*2, $fn=64);\n        translate([0,0,-scoop_h/2+wall_t])\n            cube([scoop_w-wall_t*2, scoop_d-wall_t*2, scoop_h], center=true);\n    }\n    // Pour spout\n    translate([0, scoop_d/2, 0])\n        rotate([0,30,0])\n            scale([0.3,1.2,0.3])\n                cylinder(h=scoop_w/2, d=scoop_w/4, $fn=16);\n}\n\n// Assembly\nhandle();\ntranslate([0,0,handle_len-2])\n    rotate([90,0,0])\n        scoop();",
    "renders": true
  },
  {
    "tool": "fork",
    "openscad_code": "// Realistic Fork Tool - Medium Complexity\n// 3D printable design with proper wall thickness and no overhangs\n\n// Color definitions\nfork_color = \"Silver\";\nhandle_color = \"#2F2F2F\";\n\n// Main parameters\nfork_length = 90;\nhandle_length = 45;\nhandle_diameter = 8;\ntine_length = 45;\ntine_width = 2.5;\ntine_spacing = 5;\nnum_tines = 4;\nwall_thickness = 1.5;\n\nmodule fork_tine(length, width) {\n    // Single tine with rounded tip\n    difference() {\n        union() {\n            // Main tine body\n            translate([0, 0, length/2])\n                cube([width, width, length], center=true);\n            \n            // Rounded tip\n            translate([0, 0, length])\n                sphere(d=width, $fn=16);\n        }\n        // Hollow out for 3D printing\n        translate([0, 0, length/2])\n            cube([width-wall_thickness*2, width-wall_thickness*2, length-wall_thickness], center=true);\n    }\n}\n\nmodule fork_head() {\n    // Fork head with tines\n    color(fork_color) {\n        // Base plate\n        translate([0, 0, wall_thickness/2])\n            cube([(num_tines-1)*tine_spacing + tine_width, tine_width*2, wall_thickness], center=true);\n        \n        // Tines\n        for(i = [0:num_tines-1]) {\n            translate([(i-(num_tines-1)/2)*tine_spacing, 0, wall_thickness])\n                fork_tine(tine_length, tine_width);\n        }\n    }\n}\n\nmodule handle_grip() {\n    // Ergonomic handle with grip pattern\n    color(handle_color) {\n        difference() {\n            // Main handle body\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n            // Hollow handle for material saving\n            cylinder(h=handle_length, d=handle_diameter-wall_thickness*2, $fn=32);\n        }\n        \n        // Grip rings\n        for(i = [1:6]) {\n            translate([0, 0, i*handle_length/7])\n                difference() {\n                    cylinder(h=2, d=handle_diameter+1, $fn=32);\n                    cylinder(h=2.5, d=handle_diameter-1, $fn=32);\n                }\n        }\n    }\n}\n\nmodule fork_neck() {\n    // Transition between handle and fork head\n    color(fork_color) {\n        hull() {\n            // Handle connection\n            translate([0, 0, handle_length/2])\n                cylinder(h=handle_length/3, d=handle_diameter*0.8, $fn=32);\n            \n            // Fork head connection\n            translate([0, 0, handle_length + 5])\n                cylinder(h=10, d=tine_width*4, $fn=32);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2])\n    handle_grip();\n\ntranslate([0, 0, handle_length + 5])\n    fork_neck();\n\ntranslate([0, 0, handle_length + 15])\n    fork_head();",
    "renders": true
  },
  {
    "tool": "harrow",
    "openscad_code": "// Harrow tool - realistic style, medium complexity\n// Overall dimensions: ~80mm wide x 70mm deep x 40mm tall\n\n// Define colors\nframe_color = \"Silver\";\nblade_color = \"Gray\";\nhandle_color = \"DarkBrown\";\n\n// Main frame structure\nmodule frame() {\n    color(frame_color) {\n        // Central cross beam\n        translate([0, 0, 15]) cube([70, 8, 6], center=true);\n        \n        // Side rails\n        translate([-30, 0, 15]) cube([4, 60, 6], center=true);\n        translate([30, 0, 15]) cube([4, 60, 6], center=true);\n        \n        // Front support\n        translate([0, 25, 15]) cube([74, 4, 6], center=true);\n        \n        // Rear support\n        translate([0, -25, 15]) cube([74, 4, 6], center=true);\n    }\n}\n\n// Individual harrow blade\nmodule blade() {\n    color(blade_color) difference() {\n        // Main blade body\n        rotate([90, 0, 0]) cylinder(h=12, d1=8, d2=6, center=false);\n        \n        // Taper the bottom\n        translate([0, 0, -0.5]) rotate([90, 0, 0]) cylinder(h=13, d1=7, d2=3, center=false);\n        \n        // Create cutting edge\n        translate([0, 6, 0]) rotate([0, 90, 0]) cube([12, 2, 8], center=true);\n    }\n}\n\n// Blade assembly with mounting bracket\nmodule blade_assembly(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 18]) rotate([0, 0, angle]) {\n        // Mounting bracket\n        color(frame_color) cube([10, 4, 8], center=true);\n        \n        // Blade\n        translate([0, 0, 4]) blade();\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    color(handle_color) {\n        // Main handle tube\n        translate([0, 30, 35]) rotate([90, 0, 0]) cylinder(h=40, d=8, center=false);\n        \n        // Handle grip\n        translate([0, 30, 55]) rotate([90, 0, 0]) cylinder(h=15, d=12, center=false);\n        \n        // Connection to frame\n        translate([0, 25, 22]) rotate([45, 0, 0]) cylinder(h=20, d=6, center=false);\n    }\n}\n\n// Generate complete harrow\nunion() {\n    // Main frame\n    frame();\n    \n    // Handle\n    handle();\n    \n    // Blade rows - staggered pattern\n    // Front row\n    for (i = [-3:3]) {\n        blade_assembly(i * 10, 20, -15);\n    }\n    \n    // Second row\n    for (i = [-2.5:3]) {\n        blade_assembly(i * 10 - 5, 10, 0);\n    }\n    \n    // Third row\n    for (i = [-3:3]) {\n        blade_assembly(i * 10, 0, 15);\n    }\n    \n    // Fourth row\n    for (i = [-2.5:3]) {\n        blade_assembly(i * 10 - 5, -10, 0);\n    }\n    \n    // Rear row\n    for (i = [-3:3]) {\n        blade_assembly(i * 10, -20, -15);\n    }\n}",
    "renders": true
  },
  {
    "tool": "sickle",
    "openscad_code": "// Realistic sickle tool - medium complexity\n// Overall dimensions: ~90mm length, ~35mm width, ~10mm thickness\n\n// Colors\nblade_color = \"#C0C0C0\";\nhandle_color = \"#8B4513\";\nrivet_color = \"#A0A0A0\";\n\n// Main module to create complete sickle\nmodule sickle() {\n    // Sickle blade - curved cutting implement\n    blade();\n    \n    // Handle assembly\n    handle();\n    \n    // Connection between blade and handle\n    ferrule();\n}\n\n// Curved sickle blade with sharpened edge\nmodule blade() {\n    color(blade_color)\n    difference() {\n        // Main blade body - curved shape\n        translate([0, 0, 2])\n        rotate([90, 0, 0])\n        linear_extrude(3)\n        offset(1)\n        polygon(points=[\n            [0, 0], [35, 0], [65, 15], [70, 25], [60, 35], [40, 30], [15, 20], [0, 0]\n        ]);\n        \n        // Create cutting edge bevel\n        translate([0, 0, 2.5])\n        rotate([90, 0, 0])\n        linear_extrude(2)\n        offset(0.5)\n        polygon(points=[\n            [0, 0], [35, 0], [65, 15], [70, 25], [60, 35], [40, 30], [15, 20], [0, 0]\n        ]);\n        \n        // Blade spine for strength\n        translate([5, 0, 3])\n        rotate([90, 0, 0])\n        linear_extrude(1)\n        polygon(points=[\n            [0, 5], [30, 3], [50, 8], [55, 12], [45, 15], [25, 12], [0, 5]\n        ]);\n    }\n    \n    // Blade tang (extension into handle)\n    color(blade_color)\n    translate([-25, 0, 2])\n    cube([25, 8, 3]);\n}\n\n// Wooden handle with grip texture\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle - tapered cylinder\n        translate([-70, 0, 2])\n        rotate([0, 90, 0])\n        cylinder(h=45, r1=4, r2=3.5, $fn=16);\n        \n        // Grip grooves for better handling\n        for(i = [1:4]) {\n            translate([-65 + i*8, 0, 2])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=6, r=4.2, $fn=16);\n                translate([0, 0, -1])\n                cylinder(h=8, r=3.8, $fn=16);\n            }\n        }\n    }\n    \n    // Handle end cap\n    color(handle_color)\n    translate([-70, 0, 2])\n    rotate([0, 90, 0])\n    cylinder(h=3, r=4.5, $fn=16);\n}\n\n// Metal ferrule connecting blade to handle\nmodule ferrule() {\n    color(rivet_color)\n    difference() {\n        // Main ferrule tube\n        translate([-25, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=5, $fn=32);\n        \n        // Central hole for tang\n        translate([-25, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=16, r=2.5, $fn=32);\n    }\n    \n    // Rivet details\n    for(i = [-15, -10, -5]) {\n        color(rivet_color)\n        translate([i, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=1.5, $fn=8);\n    }\n}\n\n// Create the sickle\nsickle();",
    "renders": true
  },
  {
    "tool": "scythe",
    "openscad_code": "// Realistic scythe - medium complexity\n// Overall length ~90mm, printable in one piece\n\nblade_thickness = 1.2;\nhandle_d = 6;\ngrip_d = 8;\nmetal_col = [0.65,0.65,0.65];\nwood_col = [0.45,0.32,0.2];\nedge_col = [0.8,0.8,0.8];\n\nmodule scythe_blade() {\n    union() {\n        // Main curved blade body\n        translate([0,0,0]) rotate([0,0,15]) {\n            difference() {\n                // Outer curved shape\n                hull() {\n                    translate([0,0,0]) sphere(d=16);\n                    translate([-35,-5,0]) sphere(d=14);\n                    translate([-65,-15,0]) sphere(d=10);\n                    translate([-85,-35,0]) sphere(d=6);\n                }\n                // Inner cutout\n                hull() {\n                    translate([-10,-2,-blade_thickness]) sphere(d=12);\n                    translate([-55,-20,-blade_thickness]) sphere(d=8);\n                    translate([-80,-40,-blade_thickness]) sphere(d=4);\n                }\n                scale([1,1,0.1]) translate([0,0,-blade_thickness*5]) cube(200,center=true);\n            }\n        }\n        \n        // Cutting edge bevel\n        color(edge_col) translate([0,0,-blade_thickness/2-0.1]) rotate([0,0,15]) {\n            hull() {\n                translate([0,0,0]) sphere(d=15.8);\n                translate([-85,-35,0]) sphere(d=5.8);\n            }\n        }\n        \n        // Reinforcement rib along spine\n        translate([-45,5,-1]) rotate([0,0,15]) {\n            hull() {\n                for(i=[0:4]) {\n                    translate([-i*11, i*3, 0]) sphere(d=3.5-i*0.4);\n                }\n            }\n        }\n    }\n}\n\nmodule handle_grip() {\n    difference() {\n        cylinder(h=22, d=grip_d, $fn=32);\n        for(i=[0:3]) {\n            rotate([0,0,i*90]) translate([grip_d/2-1,0,-1]) cube([2, 0.5, 24]);\n        }\n    }\n}\n\nmodule handle() {\n    color(wood_col) {\n        // Main snath\n        union() {\n            translate([0,0,0]) rotate([0,90,0]) cylinder(h=70, d=handle_d, $fn=24);\n            translate([0,70,0]) rotate([20,90,0]) cylinder(h=45, d=handle_d*0.9, $fn=24);\n        }\n        \n        // Upper grip\n        translate([0,45,0]) rotate([90,0,0]) handle_grip();\n        \n        // Lower grip\n        translate([0,15,0]) rotate([0,0,-20]) rotate([90,0,0]) {\n            scale([1,0.8,1]) handle_grip();\n        }\n    }\n}\n\nmodule tang() {\n    color(metal_col) {\n        union() {\n            // Tang extension\n            translate([-20,0,-1]) cube([20, 7, 2]);\n            \n            // Rivet heads\n            for(i=[0:1]) {\n                translate([-15-i*8, 0, 0]) sphere(d=2.5);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0,0,10]) {\n    // Blade assembly\n    color(metal_col) translate([-85,0,0]) rotate([0,0,180]) scythe_blade();\n    \n    // Tang connection\n    translate([0,0,0]) tang();\n    \n    // Handle\n    handle();\n}",
    "renders": true
  },
  {
    "tool": "billhook",
    "openscad_code": "// Billhook Tool - Realistic Medium Complexity\n// 3D Printable model with proper wall thickness and no overhangs\n\n// Overall dimensions (mm)\nhandle_length = 80;\nhandle_diameter = 12;\nblade_length = 60;\nblade_width = 25;\nblade_thickness = 3;\n\n// Colors\ncolor_handle = [0.4, 0.2, 0.1];\ncolor_blade = [0.7, 0.7, 0.7];\ncolor_edge = [0.6, 0.6, 0.6];\n\nmodule handle_grip() {\n    difference() {\n        // Main handle cylinder\n        color(color_handle)\n        cylinder(h=handle_length, d=handle_diameter, $fn=20);\n        \n        // Grip rings\n        for(i = [10:15:handle_length-20]) {\n            translate([0, 0, i])\n            rotate([90, 0, 0])\n            cylinder(h=handle_diameter+2, d=2, center=true, $fn=20);\n        }\n        \n        // Finger grooves\n        for(i = [20:15:handle_length-30]) {\n            translate([0, 0, i])\n            rotate([0, 90, 0])\n            cylinder(h=handle_diameter-2, d=handle_diameter-4, $fn=20);\n        }\n    }\n}\n\nmodule blade_base() {\n    color(color_blade)\n    difference() {\n        // Main blade shape\n        linear_extrude(height=blade_thickness)\n        polygon(points=[\n            [0, 0],\n            [blade_length*0.8, blade_width/2],\n            [blade_length, blade_width/3],\n            [blade_length, -blade_width/3],\n            [blade_length*0.8, -blade_width/2],\n            [0, 0]\n        ]);\n        \n        // Inner curve\n        translate([blade_length*0.3, 0, blade_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=blade_width, d=blade_width*0.8, $fn=30);\n    }\n}\n\nmodule blade_edge() {\n    color(color_edge)\n    translate([0, 0, blade_thickness/2 + 0.1])\n    linear_extrude(height=1)\n    polygon(points=[\n        [blade_length*0.2, 0],\n        [blade_length, blade_width/4],\n        [blade_length, -blade_width/4],\n        [blade_length*0.2, 0]\n    ]);\n}\n\nmodule hook() {\n    color(color_blade)\n    difference() {\n        union() {\n            // Hook base\n            translate([blade_length*0.9, 0, blade_thickness/2])\n            rotate([0, 0, -45])\n            cube([blade_length*0.4, blade_thickness*2, blade_thickness], center=true);\n            \n            // Hook curve\n            translate([blade_length*0.7, blade_width/2, blade_thickness/2])\n            rotate([0, 0, 30])\n            cylinder(h=blade_thickness*2, d=blade_width*0.8, $fn=20);\n        }\n        \n        // Hollow out hook\n        translate([blade_length*0.85, blade_width/3, blade_thickness/2])\n        rotate([0, 0, -30])\n        cylinder(h=blade_thickness*3, d=blade_width*0.4, $fn=20);\n    }\n}\n\nmodule ferrule() {\n    color([0.5, 0.5, 0.5])\n    difference() {\n        // Metal collar\n        cylinder(h=8, d=handle_diameter+4, $fn=20);\n        \n        // Center hole\n        cylinder(h=10, d=handle_diameter+1, $fn=20);\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2])\nhandle_grip();\n\ntranslate([0, 0, handle_length])\nrotate([0, 90, 0])\nferrule();\n\ntranslate([0, 0, handle_length+4])\nrotate([0, 90, 0])\nunion() {\n    blade_base();\n    blade_edge();\n    hook();\n}",
    "renders": true
  },
  {
    "tool": "shears",
    "openscad_code": "// Realistic Medium-Complexity Shears Tool\n// Overall length ~90 mm, printable in two mirrored halves\n\n// Color palette\nblade_col  = [0.75,0.75,0.75]; // metallic silver\nhandle_col = [0.2,0.2,0.2];    // dark gray rubber\nrivet_col  = [0.5,0.5,0.5];    // steel rivet\nring_col   = [0.9,0.9,0.9];    // light ring\n\n// Basic dimensions\ntotal_len = 90;\nblade_len = 40;\nhandle_len = 50;\nblade_w = 12;\nblade_t = 1.5;\nhandle_d = 12;\nrivet_r = 2;\npivot_offset = 12;\n\n// Blade module (tapered, sharpened edge)\nmodule blade(blade_wd){\n    difference(){\n        // Main blade body\n        hull(){\n            translate([0,-blade_wd/2,0])\n                cube([blade_len,blade_wd,blade_t],center=true);\n            translate([blade_len-2,0,0])\n                cube([4,1.5,blade_t],center=true);\n        }\n        // Tapered cutting edge\n        translate([-1,-blade_wd/2-1,-blade_t/2-1])\n            cube([blade_len+2,blade_wd/2+2,blade_t+2]);\n    }\n}\n\n// Handle grip with finger rings\nmodule handle(){\n    // Main grip\n    translate([0,0,0])\n        rotate([90,0,0])\n            cylinder(h=handle_len,d=handle_d,$fn=32);\n    \n    // Finger ring\n    difference(){\n        translate([0,handle_len/2,0])\n            rotate([90,0,0])\n                cylinder(h=5,d=handle_d+4,$fn=32);\n        translate([0,handle_len/2,0])\n            rotate([90,0,0])\n                cylinder(h=6,d=handle_d-2,$fn=32);\n    }\n    \n    // Grip ridges\n    for(i=[-20:5:20]){\n        translate([0,i,0])\n            rotate([90,0,0])\n                difference(){\n                    cylinder(h=1.5,d=handle_d+1,$fn=32);\n                    cylinder(h=2,d=handle_d-1,$fn=32);\n                }\n    }\n}\n\n// Rivet pivot\nmodule rivet(){\n    color(rivet_col)\n        cylinder(h=blade_t+2,r=rivet_r,$fn=20);\n}\n\n// Assemble half of shears\nmodule shears_half(){\n    // Blade assembly\n    color(blade_col){\n        translate([pivot_offset,0,0])\n            rotate([0,0,180])\n                blade(blade_w);\n    }\n    \n    // Handle assembly\n    color(handle_col){\n        translate([pivot_offset,0,0])\n            rotate([0,0,180])\n                handle();\n    }\n    \n    // Pivot rivet\n    translate([pivot_offset,0,0])\n        rivet();\n}\n\n// Render both halves\ntranslate([-pivot_offset/2,0,0])\n    shears_half();\nmirror([0,1,0]){\n    translate([pivot_offset/2,0,0])\n        shears_half();\n}",
    "renders": true
  },
  {
    "tool": "snips",
    "openscad_code": "// OpenSCAD Snips Tool - Realistic Style, Medium Complexity\n// 3D printable garden snips, ~90mm length\n\n$fn = 32;\n\n// Main parameters\nhandle_length = 80;\nblade_length = 50;\nhandle_diameter = 12;\nblade_thickness = 2.5;\n\n// Colors\nhandle_color = \"#1E1E1E\";\nblade_color = \"#C0C0C0\";\ngrip_color = \"#8B4513\";\n\n// Handle grip texture module\nmodule grip_texture() {\n    for (i = [0:4]) {\n        translate([0, 0, -handle_diameter/2 + i*handle_diameter/5])\n        difference() {\n            cylinder(h=handle_diameter/10, d=handle_diameter*1.1);\n            cylinder(h=handle_diameter/10+1, d=handle_diameter);\n        }\n    }\n}\n\n// Handle module\nmodule handle(is_left = true) {\n    color(handle_color) {\n        // Main handle body\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter);\n            // Ergonomic curve\n            translate([handle_length/2, 0, 0])\n            rotate([0, 0, 90])\n            cube([handle_length, handle_diameter*2, handle_diameter*2], center=true);\n        }\n        \n        // Grip area\n        color(grip_color) {\n            translate([is_left ? -handle_length/2 : handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n            grip_texture();\n        }\n        \n        // Finger rest\n        translate([is_left ? -handle_length/2 - 5 : handle_length/2 + 5, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=handle_diameter*1.2);\n    }\n}\n\n// Blade module\nmodule blade(is_top = true) {\n    color(blade_color) {\n        // Main blade\n        translate([0, 0, is_top ? blade_thickness/2 : -blade_thickness/2])\n        difference() {\n            linear_extrude(height=blade_thickness)\n            polygon(points=[\n                [0, 0],\n                [blade_length, 0],\n                [blade_length-10, 5],\n                [blade_length-20, 8],\n                [5, 8],\n                [0, 5]\n            ]);\n            \n            // Cutting edge bevel\n            translate([blade_length-15, 2, 0])\n            cube([15, 6, blade_thickness*2]);\n        }\n        \n        // Blade spine\n        translate([0, 0, is_top ? blade_thickness : -blade_thickness])\n        cube([blade_length, 2, blade_thickness/2]);\n    }\n}\n\n// Pivot mechanism\nmodule pivot() {\n    color(\"#444444\") {\n        // Pivot bolt\n        cylinder(h=10, d=6);\n        \n        // Nut\n        translate([0, 0, 5])\n        cylinder(h=4, d=8, $fn=6);\n        \n        // Washer\n        translate([0, 0, -1])\n        cylinder(h=1, d=10);\n    }\n}\n\n// Spring mechanism\nmodule spring() {\n    color(\"#888888\") {\n        rotate([90, 0, 0])\n        for (i = [0:5]) {\n            translate([0, 0, i*3])\n            rotate([0, 0, i*30])\n            cylinder(h=3, d=4);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Left handle and blade\n        translate([-handle_length/2 - 10, 0, 0]) {\n            rotate([0, 0, -25]) {\n                handle(true);\n                translate([handle_length/2, 0, 0])\n                blade(true);\n            }\n        }\n        \n        // Right handle and blade (mirrored)\n        translate([handle_length/2 + 10, 0, 0]) {\n            rotate([0, 0, 25]) {\n                mirror([1, 0, 0]) {\n                    handle(false);\n                    translate([-handle_length/2, 0, 0])\n                    blade(false);\n                }\n            }\n        }\n        \n        // Pivot\n        translate([0, 0, 0])\n        pivot();\n        \n        // Spring\n        translate([0, 0, 0])\n        spring();\n    }\n    \n    // Safety lock cutout\n    translate([-handle_length/2 - 5, -handle_diameter/2 - 2, -handle_diameter/2])\n    cube([10, 4, handle_diameter]);\n}",
    "renders": true
  },
  {
    "tool": "secateurs",
    "openscad_code": "// Realistic secateurs - medium complexity\n// Designed for 3D printing with no overhangs\n\n// Color definitions\n$fn = 32;\n\nmodule handle(rotation) {\n    color(\"darkgreen\")\n    rotate(rotation) {\n        // Handle grip\n        difference() {\n            // Main handle body\n            translate([0, 0, 0])\n                cylinder(h = 35, r1 = 8, r2 = 7);\n            \n            // Finger grooves\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([5, 0, 10])\n                        rotate([90, 0, 0])\n                            cylinder(h = 12, r = 1.5, $fn = 16);\n            }\n        }\n        \n        // Handle end cap\n        translate([0, 0, 35])\n            cylinder(h = 5, r1 = 7, r2 = 8);\n    }\n}\n\nmodule blade() {\n    color(\"silver\")\n    // Main cutting blade\n    difference() {\n        // Blade shape\n        translate([0, 0, 0])\n            linear_extrude(height = 2)\n                polygon(points = [\n                    [0, 0],\n                    [25, -5],\n                    [30, 0],\n                    [30, 10],\n                    [25, 15],\n                    [0, 10]\n                ]);\n        \n        // Cutting edge bevel\n        translate([-1, 0, 0])\n            cube([2, 15, 2]);\n    }\n    \n    // Blade reinforcement\n    translate([5, 5, -1])\n        cube([20, 3, 4]);\n}\n\nmodule lower_jaw() {\n    color(\"silver\")\n    // Lower jaw with anvil\n    translate([0, 0, 0])\n        linear_extrude(height = 3)\n            polygon(points = [\n                [0, 5],\n                [25, 5],\n                [25, 15],\n                [0, 15]\n            ]);\n    \n    // Anvil surface\n    translate([0, 5, 3])\n        cube([25, 10, 1]);\n}\n\nmodule pivot_mechanism() {\n    color(\"darkgray\")\n    // Pivot bolt\n    cylinder(h = 12, r = 3);\n    \n    // Washer\n    translate([0, 0, 12])\n        cylinder(h = 1, r = 4);\n    \n    // Nut\n    translate([0, 0, -2])\n        cylinder(h = 2, r = 3.5, $fn = 6);\n}\n\nmodule spring() {\n    color(\"lightgray\")\n    // Simplified spring\n    for(i = [0:3]) {\n        translate([0, 0, i * 2])\n            rotate([0, 0, i * 30])\n                difference() {\n                    cylinder(h = 1, r = 5);\n                    cylinder(h = 1.1, r = 3.5);\n                }\n    }\n}\n\n// Main assembly\n// First handle with blade\ntranslate([-15, 0, 0])\n    rotate([0, 0, -20])\n        union() {\n            handle(0);\n            translate([0, 8, 5])\n                rotate([0, 0, 90])\n                    blade();\n        }\n\n// Second handle with lower jaw\ntranslate([15, 0, 0])\n    rotate([0, 0, 20])\n        union() {\n            handle(180);\n            translate([0, -8, 5])\n                rotate([0, 0, 90])\n                    lower_jaw();\n        }\n\n// Pivot point\ntranslate([0, 0, 10])\n    pivot_mechanism();\n\n// Spring between handles\ntranslate([0, 0, 5])\n    spring();\n\n// Safety lock\ncolor(\"red\")\ntranslate([5, 12, 8])\n    rotate([90, 0, 0])\n        cylinder(h = 8, r = 2);",
    "renders": true
  },
  {
    "tool": "knife",
    "openscad_code": "// Realistic 3D-printable folding knife â€“ medium complexity\n// Overall length ~90 mm, blade ~40 mm, handle ~50 mm\n// All printable flat-side-down with 0.8 mm min walls\n\n$fn = 32;\n\n// Color scheme\nblade_col  = [0.7,0.7,0.75];\nhandle_col = [0.05,0.05,0.05];\nrivet_col  = [0.5,0.5,0.5];\n\nmodule knife_assembly() {\n    union() {\n        // ---------- BLADE ----------\n        translate([0,0,3])    // 3 mm lift to print flat\n        color(blade_col)\n        union() {\n            // Main blade body (drop-point style)\n            difference() {\n                linear_extrude(height = 2, center = true)\n                    polygon(points = [\n                        [-40,0],[-38,5],[-20,11],[20,11],\n                        [40,2],[40,-2],[20,-11],[-20,-11],[-38,-5]\n                    ]);\n                // Cutting edge bevel (simple chamfer)\n                translate([0,0,-1])\n                    rotate([90,0,0])\n                        cylinder(h = 40, r1 = 1.5, r2 = 0, $fn = 4);\n            }\n\n            // Pivot hole\n            translate([-38,0,0])\n                rotate([90,0,0])\n                    cylinder(h = 3, r = 2.5, $fn = 16);\n\n            // Blood groove (lightening channel)\n            translate([-20,0,0])\n                cube([30,1.5,2.5], center = true);\n        }\n\n        // ---------- HANDLE ----------\n        color(handle_col)\n        difference() {\n            // Main handle halves (two scales)\n            for (side = [-1,1])\n                mirror([0,side,0])\n                    translate([0,side*9.5,3])\n                        cube([50,19,3], center = true);\n\n            // Cavity for blade when closed\n            translate([-15,0,3])\n                cube([42,11,4], center = true);\n\n            // Pivot pin clearance\n            translate([-38,0,3])\n                rotate([90,0,0])\n                    cylinder(h = 20, r = 3.5, $fn = 16);\n\n            // Stop-pin clearance\n            translate([12,0,3])\n                rotate([90,0,0])\n                    cylinder(h = 20, r = 2, $fn = 16);\n        }\n\n        // Handle screws / standoffs (3 pcs)\n        color(rivet_col)\n        for (x = [-20,0,20])\n            translate([x,0,3])\n                rotate([90,0,0])\n                    cylinder(h = 20, r = 1.5, $fn = 12);\n\n        // Thumb stud\n        color(rivet_col)\n        translate([20,0,4])\n            rotate([0,90,0])\n                cylinder(h = 6, r = 2, center = true);\n    }\n}\n\n// Render\nknife_assembly();",
    "renders": true
  },
  {
    "tool": "blade",
    "openscad_code": "// Realistic box-cutter / utility-knife blade tool, ~80 mm long\n// All dimensions in mm, printable without supports (0.4 mm walls)\n\n$fn = 36;\n\n// Main color palette\nblade_color   = [0.75,0.75,0.80];  // brushed steel\nhandle_color  = [0.15,0.15,0.15];  // matte black\ngrip_color    = [0.05,0.05,0.05];  // soft rubber\naccent_color  = [0.8,0.1,0.1];     // red slider button\n\n// Overall assembly\nmodule utility_knife() {\n    union() {\n        color(handle_color) handle_body();\n        color(grip_color) grip_inserts();\n        color(accent_color) slider_button();\n        color(blade_color) blade_assembly();\n    }\n}\n\n// Main handle shell â€“ hollow to save material\nmodule handle_body() {\n    difference() {\n        // Exterior shell\n        translate([-4, -10, -4])\n            cube([88, 20, 10], center=false);\n        \n        // Interior cavity (3 mm walls)\n        translate([-1, -7, -1])\n            cube([82, 14, 7], center=false);\n        \n        // Front blade slot\n        translate([83, -2, 1])\n            cube([8, 4, 3], center=false);\n        \n        // Slider rail\n        translate([0, -1, 2.5])\n            cube([80, 2, 0.5], center=false);\n    }\n}\n\n// Rubberized grip pattern\nmodule grip_inserts() {\n    for (i = [0:6]) {\n        translate([10 + i*10, -10.5, 1])\n            scale([1, 0.2, 0.8])\n                cube([8, 1, 5], center=false);\n    }\n}\n\n// Red thumb slider\nmodule slider_button() {\n    translate([40, 0, 3.5])\n        cylinder(h = 3, r1 = 4, r2 = 3.5, center=false);\n}\n\n// Blade + carrier\nmodule blade_assembly() {\n    translate([slider_pos(), 0, 1.5])\n        union() {\n            // Blade carrier rail\n            color(handle_color)\n                cube([10, 4, 1], center=false);\n            \n            // Trapezoid blade\n            color(blade_color)\n                translate([8, 0, 0])\n                    linear_extrude(height=0.6)\n                        polygon([\n                            [0, 0],\n                            [18, 0],\n                            [18, -5],\n                            [16, -7],\n                            [0, 0]\n                        ]);\n            \n            // Back edge reinforcement\n            color(blade_color)\n                translate([8, 4, 0])\n                    cube([10, 1, 0.6], center=false);\n        }\n}\n\n// Simple slider position tied to $t for demo animation\nfunction slider_pos() = 35 + 40*$t;\n\n// Render\nutility_knife();",
    "renders": true
  },
  {
    "tool": "cutter",
    "openscad_code": "// Realistic Cutter Tool - Medium Complexity\n// Box-style utility knife/cutter with replaceable blade mechanism\n\n// Color constants\nblade_color = [0.8, 0.8, 0.8];\nhandle_color = [0.1, 0.1, 0.1];\ngrip_color = [0.05, 0.05, 0.05];\nmetal_color = [0.5, 0.5, 0.5];\n\n// Overall dimensions\nhandle_length = 80;\nhandle_width = 18;\nhandle_height = 12;\nblade_exposure = 15;\nblade_width = 18;\nblade_thickness = 0.8;\n\n// Main handle body\nmodule handle_body() {\n    difference() {\n        // Main handle shape\n        color(handle_color)\n        linear_extrude(height = handle_height, center = true)\n        offset(r = 2)\n        offset(r = -2)\n        square([handle_length - 10, handle_width - 6], center = true);\n        \n        // Blade slot\n        translate([handle_length/2 - 5, 0, 0])\n        cube([30, blade_width, handle_height + 0.1], center = true);\n        \n        // Screw holes for blade clamp\n        for(i = [-1, 1]) {\n            translate([handle_length/2 - 10, i * 5, 0])\n            cylinder(h = handle_height + 0.1, r = 1.5, $fn = 12);\n        }\n    }\n}\n\n// Grip texture pattern\nmodule grip_pattern() {\n    color(grip_color)\n    for(i = [0:3]) {\n        translate([5 + i * 15, 0, handle_height/2 + 0.1])\n        cube([2, handle_width - 8, 1]);\n    }\n}\n\n// Blade mechanism\nmodule blade_assembly() {\n    // Main blade\n    color(blade_color)\n    translate([handle_length/2 + blade_exposure/2, 0, 0])\n    cube([blade_exposure, blade_width, blade_thickness], center = true);\n    \n    // Blade tip angle\n    translate([handle_length/2 + blade_exposure, 0, 0])\n    rotate([0, 0, -30])\n    cube([5, blade_width, blade_thickness], center = true);\n    \n    // Blade clamp mechanism\n    color(metal_color)\n    translate([handle_length/2 - 5, 0, handle_height/2 + 2])\n    cylinder(h = 4, r1 = 4, r2 = 3, $fn = 12);\n    \n    // Clamp screws\n    for(i = [-1, 1]) {\n        translate([handle_length/2 - 10, i * 5, handle_height/2 + 4])\n        cylinder(h = 3, r = 2.5, $fn = 6);\n    }\n}\n\n// Safety slider\nmodule safety_slider() {\n    color(metal_color)\n    translate([-handle_length/2 + 10, 0, handle_height/2 + 1])\n    cube([8, 6, 2]);\n    \n    // Slider texture\n    color([0.2, 0.2, 0.2])\n    for(i = [0:2]) {\n        translate([-handle_length/2 + 11, -2 + i * 2, handle_height/2 + 3])\n        cube([6, 0.5, 0.5]);\n    }\n}\n\n// Belt clip\nmodule belt_clip() {\n    color(metal_color)\n    translate([0, handle_width/2 + 1, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = handle_length - 20, r1 = 2, r2 = 1.5, $fn = 12);\n        translate([0, 0, 5])\n        cube([4, 10, handle_length - 30], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    handle_body();\n    grip_pattern();\n    blade_assembly();\n    safety_slider();\n    belt_clip();\n    \n    // Additional grip on sides\n    color(grip_color)\n    for(side = [-1, 1]) {\n        translate([0, side * handle_width/2, 0])\n        rotate([90, 0, 90])\n        cylinder(h = handle_length - 20, r1 = 1, r2 = 1, $fn = 8);\n    }\n}",
    "renders": true
  },
  {
    "tool": "slicer",
    "openscad_code": "// Kitchen Slicer Tool - OpenSCAD\n// A realistic 3D printable mandoline slicer with adjustable thickness\n\n// Color definitions\nhandle_color = \"DarkOliveGreen\";\nblade_color = \"Silver\";\nframe_color = \"SlateGray\";\ngrip_color = \"Black\";\n\n// Overall dimensions\nlength = 80;\nwidth = 50;\nheight = 25;\n\n// Blade thickness\nblade_thickness = 0.8;\n\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Main handle grip\n        translate([-5, width/2 - 8, 0])\n            cube([15, 16, 12], center=true);\n        \n        // Ergonomic finger grooves\n        for(i = [0:3]) {\n            translate([2, width/2 - 12 + i*4, 2])\n                cube([10, 2, 1], center=true);\n        }\n        \n        // End cap\n        translate([12, width/2, 6])\n            cylinder(h=8, r=8, center=true);\n    }\n}\n\nmodule blade_assembly() {\n    color(blade_color)\n    union() {\n        // Main cutting blade - angled\n        translate([length/2 - 15, 0, height/2 - 2])\n            rotate([0, -15, 0])\n            cube([30, width - 4, blade_thickness], center=true);\n        \n        // Blade support frame\n        color(frame_color)\n        translate([length/2 - 15, 0, height/2 - 6])\n            cube([32, width, 2], center=true);\n    }\n}\n\nmodule adjuster_mechanism() {\n    color(frame_color)\n    union() {\n        // Thickness adjustment rail\n        translate([length/2 + 15, 0, 5])\n            cube([20, 4, 10], center=true);\n        \n        // Adjustment knob\n        color(grip_color)\n        translate([length/2 + 25, 0, 12])\n            cylinder(h=8, r=6, center=true);\n        \n        // Knob grip ridges\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n            translate([length/2 + 25, 0, 12])\n                cube([1, 6.5, 8], center=true);\n        }\n    }\n}\n\nmodule base_platform() {\n    color(frame_color)\n    difference() {\n        // Main platform\n        cube([length, width, height], center=true);\n        \n        // Blade slot\n        translate([length/2 - 15, 0, height/2 - 2])\n            cube([32, width - 2, blade_thickness + 1], center=true);\n        \n        // Food guard slot\n        translate([length/2 + 5, 0, height/2 - 8])\n            cube([20, width - 10, 4], center=true);\n    }\n}\n\nmodule food_guard() {\n    color(\"Red\")\n    translate([length/2 + 15, 0, height/2 - 5])\n    difference() {\n        // Main guard body\n        cube([18, width - 12, 8], center=true);\n        \n        // Finger protection holes\n        for(i = [0:2]) {\n            translate([length/2 + 15, -10 + i*10, height/2 - 5])\n                cylinder(h=10, r=3, center=true);\n        }\n    }\n}\n\nmodule non_slip_feet() {\n    color(\"Black\")\n    for(x = [-length/2 + 5, length/2 - 5])\n    for(y = [-width/2 + 5, width/2 - 5])\n        translate([x, y, -height/2 - 2])\n            cylinder(h=4, r=3, center=true);\n}\n\n// Assembly\nunion() {\n    base_platform();\n    blade_assembly();\n    handle();\n    food_guard();\n    adjuster_mechanism();\n    non_slip_feet();\n}",
    "renders": true
  },
  {
    "tool": "carver",
    "openscad_code": "// Wood carving knife - realistic style, medium complexity\n// Overall size: ~80mm\n\n$fn = 50;\n\n// Main blade\nmodule blade() {\n    difference() {\n        // Blade body\n        union() {\n            // Tapered blade\n            hull() {\n                translate([0, 0, 0])\n                    scale([0.5, 1, 0.1])\n                    cylinder(h = 35);\n                translate([0, 0, 35])\n                    scale([0.05, 0.2, 0.05])\n                    cylinder(h = 3);\n            }\n            \n            // Cutting edge\n            translate([0, 0, 37])\n                rotate([90, 0, 0])\n                scale([1, 0.3, 0.05])\n                cylinder(h = 35);\n        }\n        \n        // Hollow grind\n        translate([0, -1, 18])\n            rotate([90, 0, 0])\n            scale([1, 0.5, 0.5])\n            cylinder(h = 38);\n    }\n}\n\n// Handle ferrule\nmodule ferrule() {\n    color(\"silver\")\n    difference() {\n        cylinder(h = 8, r = 7.5);\n        cylinder(h = 10, r = 6);\n    }\n}\n\n// Handle with grip pattern\nmodule handle() {\n    color(\"burlywood\")\n    difference() {\n        // Main handle shape\n        union() {\n            cylinder(h = 45, r1 = 7.5, r2 = 9);\n            \n            // Grip rings\n            for (i = [1:4]) {\n                translate([0, 0, i * 8])\n                    difference() {\n                        cylinder(h = 2, r = 8.5);\n                        cylinder(h = 3, r = 7.5);\n                    }\n            }\n        }\n        \n        // Hanging hole\n        translate([0, 0, 42])\n            rotate([90, 0, 0])\n            cylinder(h = 20, r = 2.5);\n    }\n}\n\n// Tool marking/engraving\nmodule markings() {\n    color(\"dimgray\")\n    translate([0, 7.5, 25])\n        rotate([90, 0, 0])\n        linear_extrude(height = 0.3)\n        text(\"CARVER\", size = 2, halign = \"center\");\n}\n\n// Assembly\ntranslate([0, 0, 8])\n    blade();\n\ntranslate([0, 0, 0])\n    ferrule();\n\ntranslate([0, 0, -45])\n    handle();\n\ntranslate([0, 0, -20])\n    markings();",
    "renders": true
  },
  {
    "tool": "whittler",
    "openscad_code": "// Whittler Tool - Realistic Style (Medium Complexity)\n// OpenSCAD file for 3D printing\n\n$fn = 50;\n\n// Overall dimensions\nhandle_length = 80;\nhandle_diameter = 15;\nblade_length = 35;\nblade_width = 8;\nblade_thickness = 2;\n\n// Main body module\nmodule whittler_tool() {\n    color(\"SaddleBrown\") {\n        // Handle - main grip\n        handle();\n        \n        // Handle end cap\n        translate([handle_length - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, d1=handle_diameter, d2=handle_diameter + 2);\n    }\n    \n    // Main blade\n    color(\"LightGray\") {\n        translate([handle_length - 5, 0, 0])\n            rotate([0, 0, -30])\n                main_blade();\n    }\n    \n    // Secondary detail blade\n    color(\"LightGray\") {\n        translate([handle_length - 10, 0, 3])\n            rotate([0, 90, 0])\n                detail_blade();\n    }\n    \n    // Metal rivets\n    color(\"Gray\") {\n        for(i = [1:3]) {\n            translate([i * 20, 0, handle_diameter/2 + 1])\n                sphere(d=3);\n        }\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle cylinder\n        rotate([0, 90, 0])\n            cylinder(h=handle_length, d=handle_diameter, center=false);\n            \n        // Grip grooves\n        for(i = [5:10:handle_length - 10]) {\n            rotate([0, 90, 0])\n                translate([i, 0, -(handle_diameter/2 + 1)])\n                    cube([2, handle_diameter + 2, 2], center=true);\n        }\n    }\n}\n\n// Main carving blade\nmodule main_blade() {\n    difference() {\n        // Blade body\n        linear_extrude(height=blade_thickness)\n            polygon(points=[\n                [0, 0],\n                [blade_length, blade_width/2],\n                [blade_length*0.8, blade_width],\n                [0, blade_width/2]\n            ]);\n            \n        // Cutting edge bevel\n        translate([blade_length - 5, blade_width/2, -1])\n            rotate([0, 0, -30])\n                cube([blade_length, 2, blade_thickness + 2]);\n                \n        // Blood groove\n        translate([blade_length/2, blade_width/2, -1])\n            cylinder(h=blade_thickness + 2, d=1);\n    }\n}\n\n// Detail blade\nmodule detail_blade() {\n    difference() {\n        // Small detail blade\n        linear_extrude(height=1.5)\n            polygon(points=[\n                [0, 0],\n                [20, 3],\n                [18, 5],\n                [0, 2]\n            ]);\n            \n        // Detail blade bevel\n        translate([15, 2.5, -1])\n            rotate([0, 0, -25])\n                cube([10, 1, 3]);\n    }\n}\n\n// Assembly\nwhittler_tool();",
    "renders": true
  },
  {
    "tool": "sander",
    "openscad_code": "// Orbital sander - medium complexity realistic style\n// Overall dimensions: ~80mm x ~60mm x ~100mm\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];       // Dark grey plastic body\ncolor_handle = [0.1, 0.1, 0.1];     // Black rubber grip\ncolor_pad = [0.7, 0.7, 0.7];        // Light grey sanding pad\ncolor_switch = [0.8, 0.1, 0.1];     // Red power switch\ncolor_detail = [0.3, 0.3, 0.3];     // Medium grey details\n\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Main housing - rounded rectangle shape\n        translate([0, 0, 30])\n        scale([1, 0.7, 1])\n        minkowski() {\n            cube([60, 50, 40], center = true);\n            sphere(5);\n        }\n        \n        // Dust collection port\n        translate([35, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h = 20, r1 = 12, r2 = 15, center = true);\n    }\n}\n\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle grip\n        translate([0, 0, 65])\n        scale([1.2, 0.8, 1])\n        minkowski() {\n            cube([50, 35, 25], center = true);\n            sphere(3);\n        }\n        \n        // Handle grip texture - raised ribs\n        for(i = [-20:5:20]) {\n            translate([i, 0, 65])\n            scale([1, 0.85, 0.95])\n            cube([3, 30, 20], center = true);\n        }\n    }\n}\n\nmodule power_switch() {\n    color(color_switch)\n    translate([-25, 20, 45])\n    cube([8, 6, 4], center = true);\n    \n    // Switch guard\n    color(color_body)\n    translate([-25, 20, 48])\n    difference() {\n        cube([12, 10, 2], center = true);\n        translate([0, 0, -1])\n        cube([10, 8, 4], center = true);\n    }\n}\n\nmodule sanding_pad() {\n    color(color_pad)\n    union() {\n        // Main pad base\n        translate([0, 0, 5])\n        cylinder(h = 10, r = 35);\n        \n        // Hook and loop surface texture\n        for(x = [-25:10:25]) {\n            for(y = [-25:10:25]) {\n                translate([x, y, 15])\n                cylinder(h = 0.5, r = 3);\n            }\n        }\n    }\n}\n\nmodule motor_ventilation() {\n    color(color_detail)\n    // Side vents\n    for(i = [0:15:45]) {\n        rotate([0, 0, i])\n        translate([30, 0, 30])\n        cube([8, 2, 20], center = true);\n    }\n}\n\nmodule power_cord() {\n    color(color_detail)\n    // Cord entry point\n    translate([0, -30, 65])\n    rotate([0, 90, 0])\n    cylinder(h = 15, r1 = 5, r2 = 4);\n    \n    // Strain relief\n    translate([0, -35, 65])\n    rotate([0, 90, 0])\n    cylinder(h = 10, r = 6);\n}\n\n// Assembly\nunion() {\n    main_body();\n    handle();\n    power_switch();\n    sanding_pad();\n    motor_ventilation();\n    power_cord();\n    \n    // Brand label\n    color(color_detail)\n    translate([-20, 0, 50])\n    cube([15, 25, 0.5], center = true);\n}",
    "renders": true
  },
  {
    "tool": "burnisher",
    "openscad_code": "// Burnisher Tool - Realistic Style, Medium Complexity\n// A burnisher for smoothing and polishing materials\n\n// Main Parameters\nhandle_length = 70;\nhandle_diameter = 12;\nshaft_length = 25;\nshaft_diameter = 8;\nhead_length = 15;\nhead_diameter = 12;\n\n// Colors\ncolor_handle = \"BurlyWood\";\ncolor_shaft = \"Silver\";\ncolor_head = \"Gold\";\n\n// Handle with ergonomic grip\nmodule handle() {\n    color(color_handle) {\n        // Main handle cylinder\n        translate([0, 0, handle_length/2]) {\n            cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        }\n        \n        // Grip rings\n        for(i = [1:4]) {\n            translate([0, 0, i * 12 + 5]) {\n                cylinder(h = 2, d = handle_diameter + 2, $fn = 32);\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length + 1]) {\n            sphere(d = handle_diameter + 1, $fn = 32);\n        }\n    }\n}\n\n// Shaft connecting handle to head\nmodule shaft() {\n    color(color_shaft) {\n        // Main shaft\n        translate([0, 0, handle_length + shaft_length/2]) {\n            cylinder(h = shaft_length, d = shaft_diameter, $fn = 32);\n        }\n        \n        // Tapered transition\n        translate([0, 0, handle_length]) {\n            cylinder(h = 5, d1 = handle_diameter, d2 = shaft_diameter, $fn = 32);\n        }\n    }\n}\n\n// Burnishing head with working surface\nmodule burnishing_head() {\n    color(color_head) {\n        // Main head body\n        translate([0, 0, handle_length + shaft_length + head_length/2]) {\n            difference() {\n                cylinder(h = head_length, d = head_diameter, $fn = 32);\n                \n                // Hollow end for weight reduction\n                translate([0, 0, 2]) {\n                    cylinder(h = head_length - 4, d = head_diameter - 4, $fn = 32);\n                }\n            }\n        }\n        \n        // Burnishing tip - rounded end\n        translate([0, 0, handle_length + shaft_length + head_length]) {\n            sphere(d = head_diameter, $fn = 32);\n        }\n        \n        // Decorative ring\n        translate([0, 0, handle_length + shaft_length + head_length/2]) {\n            cylinder(h = 1, d = head_diameter + 1, $fn = 32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    shaft();\n    burnishing_head();\n}",
    "renders": true
  },
  {
    "tool": "polisher",
    "openscad_code": "// Polisher Tool - Realistic Style, Medium Complexity\n// Electric rotary polisher with ergonomic grip and replaceable foam pad\n\n// Configuration\n$fn=30;\nhandle_length = 80;\nhandle_diameter = 25;\nmotor_body_length = 35;\nmotor_body_diameter = 35;\nhead_diameter = 40;\nhead_thickness = 8;\npad_diameter = 50;\npad_thickness = 10;\nwall_thickness = 2;\n\n// Colors\ncolor_handle = [0.2, 0.2, 0.2];\ncolor_motor = [0.8, 0.8, 0.8];\ncolor_head = [0.7, 0.7, 0.7];\ncolor_pad = [0.9, 0.7, 0.5];\ncolor_switch = [0.9, 0.1, 0.1];\ncolor_cable = [0, 0, 0];\n\n// Main assembly\nunion() {\n    // Handle with grip texture\n    translate([0, 0, -handle_length/2]) {\n        color(color_handle) {\n            // Main handle body\n            cylinder(h=handle_length, d=handle_diameter);\n            \n            // Grip rings\n            for(i=[0:5:handle_length-10]) {\n                translate([0, 0, -handle_length/2+i]) {\n                    difference() {\n                        cylinder(h=3, d=handle_diameter+2);\n                        cylinder(h=3.1, d=handle_diameter);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Motor housing\n    translate([0, 0, handle_length/2 + motor_body_length/2]) {\n        color(color_motor) {\n            // Main motor body\n            cylinder(h=motor_body_length, d=motor_body_diameter);\n            \n            // Cooling vents\n            for(i=[0:30:359]) {\n                rotate([0, 0, i]) {\n                    translate([motor_body_diameter/2-1, 0, 0]) {\n                        cube([2, 3, motor_body_length], center=true);\n                    }\n                }\n            }\n            \n            // Power switch\n            rotate([0, 90, 0]) {\n                translate([motor_body_diameter/2+1, 0, -motor_body_length/4]) {\n                    color(color_switch) {\n                        cube([4, 8, 3]);\n                    }\n                }\n            }\n            \n            // Cable exit\n            rotate([0, -90, 0]) {\n                translate([motor_body_diameter/2+1, 0, motor_body_length/4]) {\n                    rotate([90, 0, 0]) {\n                        color(color_cable) {\n                            cylinder(h=30, d=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Polishing head\n    translate([0, 0, handle_length/2 + motor_body_length + head_thickness/2]) {\n        color(color_head) {\n            // Head body\n            cylinder(h=head_thickness, d=head_diameter);\n            \n            // Mounting holes\n            for(i=[0:120:359]) {\n                rotate([0, 0, i]) {\n                    translate([head_diameter/2-8, 0, 0]) {\n                        cylinder(h=head_thickness+1, d=3);\n                    }\n                }\n            }\n        }\n        \n        // Foam pad\n        translate([0, 0, head_thickness/2 + pad_thickness/2]) {\n            color(color_pad) {\n                // Main pad\n                cylinder(h=pad_thickness, d=pad_diameter);\n                \n                // Pad texture\n                for(i=[0:10:pad_diameter-10]) {\n                    for(j=[0:10:359]) {\n                        rotate([0, 0, j]) {\n                            translate([i, 0, pad_thickness-1]) {\n                                cylinder(h=1, d=2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Trigger guard\n    translate([0, 0, handle_length/4]) {\n        difference() {\n            cylinder(h=15, d=handle_diameter+10);\n            cylinder(h=16, d=handle_diameter+2);\n        }\n    }\n    \n    // Safety lock\n    translate([handle_diameter/2, 0, handle_length/2 - 5]) {\n        color(color_switch) {\n            cube([3, 6, 4], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "buffer",
    "openscad_code": "// Realistic Buffer Tool - Medium Complexity\n// A handheld rotary buffer for polishing or sanding applications\n\n// Color definitions\nhandle_color = [0.1, 0.1, 0.1];      // Black rubber\nbody_color = [0.8, 0.8, 0.8];      // Silver metal\npad_color = [0.9, 0.9, 0.9];       // Light gray foam\naccent_color = [0.9, 0.1, 0.1];    // Red power button\n\n// Overall dimensions\nhandle_length = 80;\nhandle_diameter = 25;\nbody_diameter = 40;\nbody_length = 60;\npad_diameter = 50;\npad_thickness = 8;\n\n// Create the complete buffer tool\nmodule buffer_tool() {\n    // Main handle with ergonomic grip\n    color(handle_color) {\n        translate([0, 0, handle_length/2]) {\n            // Main handle tube\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n            // Grip rings\n            for(i = [1:4]) {\n                translate([0, 0, handle_length/2 - 15*i]) {\n                    difference() {\n                        cylinder(h=5, d=handle_diameter+2, $fn=32);\n                        cylinder(h=5, d=handle_diameter-2, $fn=32);\n                    }\n                }\n            }\n            \n            // End cap\n            translate([0, 0, handle_length]) {\n                sphere(d=handle_diameter);\n            }\n        }\n    }\n    \n    // Motor housing\n    color(body_color) {\n        translate([0, 0, -body_length/2]) {\n            // Main body cylinder\n            cylinder(h=body_length, d=body_diameter, $fn=32);\n            \n            // Cooling vents\n            for(angle = [0:30:330]) {\n                rotate([0, 0, angle]) {\n                    translate([body_diameter/2 - 2, 0, 10]) {\n                        cube([4, 2, body_length - 20], center=true);\n                    }\n                }\n            }\n            \n            // Power button\n            color(accent_color) {\n                translate([body_diameter/2 + 1, 0, -10]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=3, d=8, $fn=16);\n                    }\n                }\n            }\n            \n            // Speed dial\n            translate([body_diameter/2 + 2, 0, 10]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=2, d=15, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Motor spindle\n    color(body_color) {\n        translate([0, 0, -body_length]) {\n            cylinder(h=15, d=8, $fn=16);\n        }\n    }\n    \n    // Velcro backing plate\n    color(pad_color) {\n        translate([0, 0, -body_length - 15 - pad_thickness/2]) {\n            cylinder(h=pad_thickness, d=pad_diameter, $fn=32);\n            \n            // Velcro hooks pattern\n            for(x = [-20:5:20]) {\n                for(y = [-20:5:20]) {\n                    if(sqrt(x*x + y*y) < pad_diameter/2 - 5) {\n                        translate([x, y, pad_thickness/2]) {\n                            cube([2, 2, 0.5], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Safety guard\n    color(body_color) {\n        translate([0, 0, -body_length - 15]) {\n            difference() {\n                cylinder(h=5, d=pad_diameter + 10, $fn=32);\n                cylinder(h=6, d=pad_diameter + 2, $fn=32);\n            }\n            \n            // Guard mounting brackets\n            for(angle = [45:90:315]) {\n                rotate([0, 0, angle]) {\n                    translate([pad_diameter/2 + 2, 0, 0]) {\n                        cube([4, 3, 5], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Power cord\n    color([0, 0, 0]) {\n        translate([0, handle_diameter/2, handle_length]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=50, d=5, $fn=16);\n                \n                // Cord relief\n                translate([0, 0, 25]) {\n                    sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\n// Generate the tool\nbuffer_tool();",
    "renders": true
  },
  {
    "tool": "strop",
    "openscad_code": "// Strop tool for knife sharpening - 3D printable design\n// Realistic style with medium complexity\n\n// Main parameters\nstrop_length = 80;\nstrop_width = 25;\nstrop_thickness = 3;\nhandle_length = 40;\nhandle_diameter = 12;\nleather_thickness = 1.5;\nrivet_diameter = 2;\nrivet_height = 2;\n\n// Colors\ncolor_leather = [0.6, 0.3, 0.1];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_wood = [0.4, 0.2, 0.1];\n\n// Main strop body with leather strip\nmodule strop_body() {\n    // Base wooden handle core\n    color(color_wood)\n    union() {\n        // Handle cylinder\n        translate([0, 0, handle_length/2])\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Tapered connection to strop\n        translate([0, 0, handle_length])\n            rotate([90, 0, 0])\n                cylinder(h=10, d1=handle_diameter, d2=strop_thickness*2, $fn=32);\n        \n        // Strop mounting plate\n        translate([0, 0, handle_length + 10])\n            cube([strop_thickness*2, strop_width, strop_thickness*2], center=true);\n    }\n    \n    // Leather strip\n    color(color_leather)\n    translate([0, 0, handle_length + 10 + strop_thickness])\n        cube([strop_length, strop_width, leather_thickness], center=true);\n}\n\n// Rivets for securing leather\nmodule rivets() {\n    color(color_metal)\n    for(x = [-strop_length/3, 0, strop_length/3]) {\n        translate([x, strop_width/4, handle_length + 10 + strop_thickness + leather_thickness/2])\n            cylinder(h=rivet_height, d=rivet_diameter, $fn=16);\n        translate([x, -strop_width/4, handle_length + 10 + strop_thickness + leather_thickness/2])\n            cylinder(h=rivet_height, d=rivet_diameter, $fn=16);\n    }\n}\n\n// Handle grip texture\nmodule grip_texture() {\n    color(color_wood)\n    for(i = [0:5:handle_length-5]) {\n        rotate([90, 0, 0])\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=5, d=handle_diameter, $fn=32);\n                    cylinder(h=5, d=handle_diameter-2, $fn=32);\n                }\n    }\n}\n\n// Hanging hole\nmodule hanging_hole() {\n    color(color_wood)\n    translate([-strop_length/2 + 5, 0, handle_length + 10 + strop_thickness/2])\n        rotate([0, 90, 0])\n            cylinder(h=strop_thickness*2, d=4, $fn=32);\n}\n\n// Assembly\nunion() {\n    strop_body();\n    rivets();\n    grip_texture();\n    difference() {\n        translate([strop_length/2 - 10, 0, handle_length + 10 + strop_thickness/2])\n            cube([20, strop_width, strop_thickness*2], center=true);\n        hanging_hole();\n    }\n}\n\n// Optional support base for printing\ntranslate([0, 0, -1])\n    color([0.8, 0.8, 0.8])\n    cube([strop_length + 20, strop_width + 10, 1], center=true);",
    "renders": true
  },
  {
    "tool": "bodkin",
    "openscad_code": "// Bodkin Tool - Medium Complexity Realistic Style\n// A traditional sewing tool with eye and blunt tip for threading elastic/cord\n\n// Overall dimensions\ntool_length = 85;\nhandle_length = 45;\nshaft_length = tool_length - handle_length;\nhandle_diameter = 8;\nshaft_diameter = 3;\neye_width = 4;\neye_height = 1.5;\n\n// Colors\nhandle_color = \"BurlyWood\";\nmetal_color = \"Silver\";\n\n// Handle grip rings\nmodule grip_rings(count, spacing, depth) {\n    for (i = [0:count-1]) {\n        translate([i * spacing, 0, 0])\n        difference() {\n            cylinder(d=handle_diameter, h=2, $fn=32);\n            cylinder(d=handle_diameter-depth, h=2.1, $fn=32);\n        }\n    }\n}\n\n// Main handle with ergonomic grip\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        difference() {\n            cylinder(d=handle_diameter, h=handle_length, $fn=32);\n            // Tapered end\n            translate([0, 0, 0])\n            cylinder(d=handle_diameter*0.8, h=5, $fn=32);\n        }\n        \n        // Grip rings\n        translate([5, 0, handle_length/2 - 15])\n        rotate([90, 0, 0])\n        grip_rings(5, 2, 0.5);\n        \n        // End cap detail\n        translate([0, 0, handle_length])\n        cylinder(d=handle_diameter*1.1, h=2, $fn=32);\n    }\n}\n\n// Shaft with gradual taper\nmodule shaft() {\n    color(metal_color) {\n        // Main shaft\n        translate([0, 0, handle_length])\n        cylinder(d1=shaft_diameter*1.2, d2=shaft_diameter, h=shaft_length*0.7, $fn=16);\n        \n        // Eye section\n        translate([0, 0, handle_length + shaft_length*0.7])\n        cylinder(d=shaft_diameter, h=shaft_length*0.3, $fn=16);\n    }\n}\n\n// Eye for threading\nmodule eye() {\n    color(metal_color) {\n        translate([0, 0, handle_length + shaft_length*0.85])\n        difference() {\n            // Eye base\n            cube([eye_width, shaft_diameter*1.2, eye_height*2], center=true);\n            \n            // Eye hole\n            translate([eye_width/4, 0, 0])\n            cube([eye_width/2, shaft_diameter*0.8, eye_height*3], center=true);\n        }\n        \n        // Rounded tip\n        translate([eye_width/2 + 1, 0, handle_length + shaft_length*0.85])\n        sphere(d=shaft_diameter*1.2, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    shaft();\n    eye();\n    \n    // Transition from handle to shaft\n    color(metal_color) {\n        translate([0, 0, handle_length-1])\n        cylinder(d=shaft_diameter*1.5, h=2, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "tool": "needle",
    "openscad_code": "// Realistic Needle Tool - Medium Complexity\n// 3D Printable needle with handle, grip, and sharp tip\n\n// Parameters\nneedle_length = 80;\nhandle_length = 50;\nhandle_diameter = 8;\ngrip_length = 25;\ngrip_diameter = 10;\ntip_length = 30;\ntip_diameter = 1.5;\neyelet_diameter = 2;\neyelet_thickness = 0.8;\nwall_thickness = 1.2;\n\n// Colors\nmetal_color = [0.7, 0.7, 0.75];\nhandle_color = [0.2, 0.2, 0.2];\ngrip_color = [0.1, 0.1, 0.1];\n\n// Main assembly\nunion() {\n    // Handle\n    color(handle_color)\n    translate([0, 0, 0])\n    handle();\n    \n    // Grip section\n    color(grip_color)\n    translate([handle_length - grip_length, 0, 0])\n    grip();\n    \n    // Needle shaft\n    color(metal_color)\n    translate([handle_length, 0, 0])\n    needle_shaft();\n    \n    // Needle tip\n    color(metal_color)\n    translate([handle_length + tip_length, 0, 0])\n    needle_tip();\n    \n    // Eyelet\n    color(metal_color)\n    translate([handle_length - 5, 0, 0])\n    eyelet();\n}\n\n// Handle module\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        \n        // Grip cavity\n        translate([handle_length - grip_length, 0, 0])\n        cylinder(h = grip_length + 1, d = handle_diameter - 2, $fn = 32);\n        \n        // End hole for needle\n        translate([handle_length, 0, 0])\n        cylinder(h = 5, d = tip_diameter + 0.5, $fn = 16);\n    }\n    \n    // Handle end cap\n    translate([0, 0, 0])\n    cylinder(h = 2, d = handle_diameter + 1, $fn = 32);\n}\n\n// Grip module\nmodule grip() {\n    // Main grip body\n    cylinder(h = grip_length, d = grip_diameter, $fn = 32);\n    \n    // Grip rings\n    for(i = [0:4]) {\n        translate([i * 5, 0, 0])\n        difference() {\n            cylinder(h = 1.5, d = grip_diameter + 1, $fn = 32);\n            cylinder(h = 1.6, d = grip_diameter - 1, $fn = 32);\n        }\n    }\n}\n\n// Needle shaft\nmodule needle_shaft() {\n    cylinder(h = tip_length, d = tip_diameter, $fn = 16);\n}\n\n// Needle tip\nmodule needle_tip() {\n    // Tapered cone for sharp point\n    cylinder(h = tip_length / 2, d1 = tip_diameter, d2 = 0.1, $fn = 16);\n}\n\n// Eyelet module\nmodule eyelet() {\n    difference() {\n        // Eyelet base\n        translate([0, 0, 0])\n        cylinder(h = eyelet_thickness, d = eyelet_diameter + 2, $fn = 32);\n        \n        // Eyelet hole\n        translate([0, 0, -0.1])\n        cylinder(h = eyelet_thickness + 0.2, d = eyelet_diameter, $fn = 32);\n    }\n    \n    // Connection to needle\n    translate([eyelet_diameter / 2, 0, eyelet_thickness / 2])\n    rotate([90, 0, 0])\n    cylinder(h = eyelet_diameter + 1, d = tip_diameter, $fn = 16);\n}",
    "renders": true
  },
  {
    "tool": "thimble",
    "openscad_code": "// Realistic thimble with dimples and reinforced rim\n// Designed for 3D printing - no overhangs, proper wall thickness\n\n// Parameters\nthimble_height = 35;\nthimble_radius = 18;\nwall_thickness = 2.5;\nrim_height = 8;\ndimple_radius = 2.5;\ndimple_depth = 1.5;\ndimple_rows = 6;\ndimples_per_row = [8, 9, 10, 9, 8, 7];\n\n// Main thimble body\nmodule thimble_body() {\n    difference() {\n        // Outer shell with reinforced rim\n        union() {\n            // Main cylindrical body\n            cylinder(h=thimble_height, r=thimble_radius, $fn=100);\n            \n            // Reinforced rim at top\n            translate([0, 0, thimble_height - rim_height])\n                cylinder(h=rim_height, r1=thimble_radius, r2=thimble_radius + 2, $fn=100);\n        }\n        \n        // Inner cavity - tapered for finger comfort\n        translate([0, 0, -1])\n            cylinder(h=thimble_height + 2, r1=thimble_radius - wall_thickness - 3, \n                    r2=thimble_radius - wall_thickness, $fn=100);\n    }\n}\n\n// Create dimple pattern\nmodule dimples() {\n    color(\"silver\")\n    for (row = [0 : dimple_rows - 1]) {\n        row_height = 8 + row * 4.5;\n        row_radius = thimble_radius - dimple_depth - 0.5;\n        count = dimples_per_row[row];\n        \n        for (i = [0 : count - 1]) {\n            angle = 360 * i / count;\n            // Calculate position on curved surface\n            x = row_radius * cos(angle);\n            y = row_radius * sin(angle);\n            \n            translate([x, y, row_height])\n                rotate([90, 0, angle])\n                    sphere(dimple_radius * 2, $fn=20);\n        }\n    }\n}\n\n// Cut dimples into thimble surface\nmodule create_dimples() {\n    difference() {\n        thimble_body();\n        \n        // Subtract dimple spheres\n        translate([0, 0, 0])\n            dimples();\n    }\n}\n\n// Add grip texture on bottom edge\nmodule grip_texture() {\n    color(\"silver\")\n    difference() {\n        // Raised rings for grip\n        union() {\n            for (i = [0 : 4]) {\n                translate([0, 0, 2 + i * 1.5])\n                    cylinder(h=1, r=thimble_radius + 0.5, r2=thimble_radius + 1, $fn=100);\n            }\n        }\n        \n        // Remove excess beyond rim\n        translate([0, 0, -1])\n            cylinder(h=10, r=thimble_radius + 3, $fn=100);\n    }\n}\n\n// Assemble complete thimble\nmodule thimble() {\n    color(\"silver\") {\n        // Main body with dimples\n        create_dimples();\n        \n        // Add grip texture\n        grip_texture();\n        \n        // Small vent hole at top for printing\n        translate([0, 0, thimble_height + rim_height - 0.5])\n            cylinder(h=2, r=2, $fn=20);\n    }\n}\n\n// Generate the thimble\nthimble();",
    "renders": true
  },
  {
    "tool": "bradawl",
    "openscad_code": "// Bradawl Tool - Realistic Style, Medium Complexity\n// Overall length: ~95mm\n\n// Colors\n$fn = 32;\n\n// Main handle\nmodule handle() {\n    color(\"SaddleBrown\")\n    union() {\n        // Handle body\n        difference() {\n            cylinder(h=70, d=20, center=false);\n            // Grip grooves\n            for(i=[0:3]) {\n                translate([0, 0, 15 + i*15])\n                rotate([0, 0, 0])\n                cylinder(h=3, d=22, center=false);\n            }\n        }\n        \n        // Handle end cap\n        translate([0, 0, 70])\n        cylinder(h=5, d1=20, d2=15, center=false);\n    }\n}\n\n// Metal ferrule\nmodule ferrule() {\n    color(\"Silver\")\n    translate([0, 0, 5])\n    cylinder(h=10, d1=20, d2=18, center=false);\n}\n\n// Tapered blade\nmodule blade() {\n    color(\"Silver\")\n    union() {\n        // Blade shaft\n        translate([0, 0, 0])\n        cylinder(h=15, d1=18, d2=8, center=false);\n        \n        // Pointed tip section\n        translate([0, 0, 15])\n        cylinder(h=12, d1=8, d2=3, center=false);\n        \n        // Final sharp point\n        translate([0, 0, 27])\n        cylinder(h=8, d1=3, d2=0.5, center=false);\n    }\n}\n\n// Grip texture rings\nmodule grip_texture() {\n    color(\"SaddleBrown\")\n    for(i=[0:9]) {\n        translate([0, 0, 8 + i*6])\n        difference() {\n            cylinder(h=2, d=21, center=false);\n            cylinder(h=2.1, d=19, center=false);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nunion() {\n    handle();\n    ferrule();\n    blade();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "tool": "scratch",
    "openscad_code": "// Scratch tool (awl) - realistic style, medium complexity\n// Overall length ~85 mm, designed for 3D printing\n\n// Parameters\nhandle_len = 55;\nhandle_dia = 12;\nshaft_len = 25;\nshaft_dia = 5;\ntip_len = 5;\ntip_dia = 1.5;\ngrip_ring_h = 2;\ngrip_ring_gap = 4;\ngrip_rings = 4;\nwall = 1.2;\n\nmodule scratch_tool() {\n    color(\"BurlyWood\")\n    union() {\n        // Handle with ergonomic grip rings\n        difference() {\n            // Main handle body\n            cylinder(h = handle_len, d = handle_dia, $fn = 36);\n            // Hollow core for weight reduction\n            translate([0,0,wall])\n            cylinder(h = handle_len - 2*wall, d = handle_dia - 2*wall, $fn = 36);\n        }\n        \n        // Grip rings\n        for (i = [0:grip_rings-1]) {\n            translate([0, 0, 10 + i*(grip_ring_h + grip_ring_gap)])\n            color(\"SaddleBrown\")\n            difference() {\n                cylinder(h = grip_ring_h, d = handle_dia + 1, $fn = 36);\n                translate([0,0,-0.1])\n                cylinder(h = grip_ring_h + 0.2, d = handle_dia - 0.5, $fn = 36);\n            }\n        }\n        \n        // Metal ferrule\n        color(\"Silver\")\n        translate([0, 0, handle_len])\n        cylinder(h = 4, d = handle_dia, $fn = 36);\n        \n        // Tool shaft\n        translate([0, 0, handle_len + 4])\n        cylinder(h = shaft_len, d = shaft_dia, $fn = 32);\n        \n        // Tapered tip\n        translate([0, 0, handle_len + 4 + shaft_len])\n        cylinder(h1 = tip_len, h2 = 0, d1 = shaft_dia, d2 = tip_dia, $fn = 32);\n    }\n    \n    // Flattened end cap\n    color(\"BurlyWood\")\n    translate([0, 0, -0.5])\n    cylinder(h = 1, d = handle_dia, $fn = 36);\n}\n\n// Render the tool upright for printing\nscratch_tool();",
    "renders": true
  },
  {
    "tool": "gauge",
    "openscad_code": "// Vernier Caliper Gauge - Realistic Style, Medium Complexity\n\n// Color definitions\n$fn=50;\n\nmodule caliper_body() {\n    // Main beam with measurement scale\n    difference() {\n        union() {\n            // Main beam (80mm long)\n            color(\"silver\") cube([80, 12, 6], center=true);\n            \n            // Reinforcement ridges\n            translate([0, 0, 3.5])\n            color(\"silver\") cube([80, 10, 1], center=true);\n        }\n        \n        // Measurement scale markings\n        for(i=[0:39]) {\n            translate([-40 + i*2, 6.1, 2.5])\n            color(\"black\") cube([0.2, 0.5, 2]);\n        }\n    }\n}\n\nmodule fixed_jaw() {\n    // Fixed measuring jaw\n    translate([-40, 0, 0]) {\n        difference() {\n            union() {\n                // Jaw base\n                color(\"silver\") cube([10, 10, 8], center=true);\n                \n                // Measuring surface\n                translate([5, 0, 0])\n                color(\"silver\") cube([2, 8, 6], center=true);\n                \n                // Inside measuring blade\n                translate([2, 0, -5])\n                color(\"silver\") cube([6, 3, 4], center=true);\n            }\n            \n            // Depth rod slot\n            translate([0, 0, -5])\n            cube([6, 3, 10], center=true);\n        }\n    }\n}\n\nmodule sliding_jaw() {\n    // Sliding jaw assembly\n    translate([20, 0, 0]) {\n        difference() {\n            union() {\n                // Slider body\n                color(\"silver\") cube([15, 14, 10], center=true);\n                \n                // Thumb wheel\n                translate([0, 8, 3])\n                rotate([90, 0, 0])\n                color(\"darkgray\") cylinder(h=4, r=5, center=true);\n                \n                // Measuring surface\n                translate([-7.5, 0, 0])\n                color(\"silver\") cube([2, 8, 6], center=true);\n                \n                // Inside measuring blade\n                translate([-2, 0, -5])\n                color(\"silver\") cube([6, 3, 4], center=true);\n            }\n            \n            // Beam slot\n            translate([0, 0, -0.5])\n            cube([16, 12.5, 7], center=true);\n            \n            // Thumb wheel grooves\n            for(i=[0:19]) {\n                rotate([0, 0, i*18])\n                translate([0, 8, 3])\n                rotate([90, 0, 0])\n                translate([0, 5, 0])\n                color(\"black\") cube([0.3, 0.5, 4], center=true);\n            }\n        }\n    }\n}\n\nmodule depth_rod() {\n    // Depth measurement rod\n    translate([-35, 0, -8]) {\n        color(\"silver\") {\n            // Thin rod\n            rotate([90, 0, 0])\n            cylinder(h=40, r=1, center=true);\n            \n            // Rod base\n            translate([0, 0, 20])\n            cube([4, 4, 2], center=true);\n        }\n    }\n}\n\nmodule locking_screw() {\n    // Locking mechanism\n    translate([20, 0, 5]) {\n        difference() {\n            union() {\n                // Screw head\n                color(\"darkgray\") cylinder(h=3, r=3, center=true);\n                \n                // Screw shaft\n                translate([0, 0, -3])\n                color(\"darkgray\") cylinder(h=6, r=1.5, center=true);\n            }\n            \n            // Screw slot\n            translate([0, 0, 1.6])\n            rotate([90, 0, 0])\n            cube([4, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Vernier scale markings\nmodule vernier_scale() {\n    translate([27.5, 7.1, 2.5]) {\n        for(i=[0:9]) {\n            translate([i*0.9, 0, 0])\n            color(\"black\") cube([0.2, 0.5, 2]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    caliper_body();\n    fixed_jaw();\n    sliding_jaw();\n    depth_rod();\n    locking_screw();\n    vernier_scale();\n}",
    "renders": true
  },
  {
    "tool": "trammel",
    "openscad_code": "// Trammel Tool - Medium Realistic Style\n// Adjustable beam compass for drawing large circles\n\n$fn = 50;\n\n// Main parameters\nbeam_length = 80;\nbeam_width = 8;\nbeam_height = 6;\nbeam_thickness = 2;\n\nhandle_diameter = 12;\nhandle_length = 30;\n\n// Colors\nbeam_color = \"Silver\";\nhandle_color = \"Black\";\npivot_color = \"Gold\";\nblade_color = \"Gray\";\n\n// Main beam with measurement markings\nmodule trammel_beam() {\n    color(beam_color) {\n        // Main beam body\n        difference() {\n            cube([beam_length, beam_width, beam_height], center = true);\n            \n            // Hollow out center for weight reduction\n            translate([0, 0, 0])\n                cube([beam_length - beam_thickness*2, beam_width - beam_thickness*2, beam_height - beam_thickness], center = true);\n        }\n        \n        // Measurement markings (mm scale)\n        for(i = [0:5:beam_length-10]) {\n            translate([-beam_length/2 + 5 + i, beam_width/2 + 0.1, 0])\n                cube([0.5, 2, 0.5]);\n        }\n    }\n}\n\n// Adjustable pivot block with thumb screw\nmodule pivot_block() {\n    color(pivot_color) {\n        translate([0, 0, 0]) {\n            // Main block\n            cube([12, beam_width + 6, beam_height + 4], center = true);\n            \n            // Thumb screw\n            translate([0, 0, beam_height/2 + 6])\n                cylinder(h = 8, r = 5, $fn = 20);\n            \n            // Screw head knurling\n            for(i = [0:30:359]) {\n                rotate([0, 0, i])\n                    translate([4.5, 0, beam_height/2 + 6 + 4])\n                        cube([1, 0.5, 2]);\n            }\n            \n            // Beam channel\n            translate([0, 0, 0])\n                cube([beam_width + 2, beam_width + 2, beam_height + 6], center = true);\n                \n            // Pivot point\n            translate([0, 0, -beam_height/2 - 3])\n                cylinder(h = 6, r1 = 3, r2 = 2, center = true);\n        }\n    }\n}\n\n// Handle grip with finger grooves\nmodule trammel_handle() {\n    color(handle_color) {\n        translate([0, 0, 0]) {\n            // Main handle body\n            cylinder(h = handle_length, r = handle_diameter/2, center = true);\n            \n            // Finger grooves\n            for(i = [0:8:handle_length-8]) {\n                translate([0, 0, -handle_length/2 + 4 + i])\n                    rotate_extrude(angle = 360, $fn = 20)\n                        translate([handle_diameter/2 - 1, 0, 0])\n                            circle(r = 1);\n            }\n            \n            // Center hole for pencil/pen\n            translate([0, 0, 0])\n                cylinder(h = handle_length + 2, r = 3, center = true);\n                \n            // Grip texture rings\n            for(i = [0:5:handle_length-5]) {\n                translate([0, 0, -handle_length/2 + 2.5 + i])\n                    cylinder(h = 0.5, r = handle_diameter/2 + 0.5, center = true);\n            }\n        }\n    }\n}\n\n// Pencil holder assembly\nmodule pencil_holder() {\n    color(pivot_color) {\n        translate([beam_length/2 - 15, 0, 0]) {\n            // Holder block\n            cube([10, beam_width + 4, beam_height + 6], center = true);\n            \n            // Clamp mechanism\n            translate([5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 10, r = 4, center = true);\n                    \n            // Thumb wheel\n            translate([8, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 3, r1 = 6, r2 = 4);\n                    \n            // Pencil channel\n            translate([0, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = beam_width + 4, r = 3, center = true);\n        }\n    }\n}\n\n// Blade holder for needle point\nmodule blade_holder() {\n    color(blade_color) {\n        translate([-beam_length/2 + 15, 0, 0]) {\n            // Main holder\n            cube([10, beam_width + 4, beam_height + 6], center = true);\n            \n            // Needle point\n            translate([0, 0, -beam_height/2 - 8])\n                cylinder(h = 12, r1 = 1, r2 = 0.2);\n                \n            // Protective collar\n            translate([0, 0, -beam_height/2 - 4])\n                cylinder(h = 4, r = 3);\n        }\n    }\n}\n\n// Assembly\nmodule trammel_assembly() {\n    // Main beam\n    translate([0, 0, 0])\n        trammel_beam();\n    \n    // Pivot block (center)\n    translate([0, 0, 0])\n        pivot_block();\n    \n    // Handles at both ends\n    translate([beam_length/2 - 5, 0, beam_height/2 + handle_length/2])\n        rotate([90, 0, 0])\n            trammel_handle();\n            \n    translate([-beam_length/2 + 5, 0, beam_height/2 + handle_length/2])\n        rotate([90, 0, 0])\n            trammel_handle();\n    \n    // Pencil holder\n    pencil_holder();\n    \n    // Blade holder\n    blade_holder();\n}\n\n// Render the complete trammel\ntrammel_assembly();",
    "renders": true
  },
  {
    "tool": "scribe",
    "openscad_code": "// Realistic 3D Printable Scribe Tool - Medium Complexity\n// Overall dimensions: ~85mm length, ~12mm diameter handle\n\n// Main handle color - dark gray for grip\ncolor([0.2, 0.2, 0.2]) {\n    // Handle main body - hexagonal for better grip\n    difference() {\n        // Hexagonal prism handle\n        cylinder(h=60, r=6, $fn=6);\n        \n        // Grip grooves\n        for(i = [0:5]) {\n            translate([0, 0, 5 + i*10])\n                rotate([0, 0, 30])\n                cube([1.5, 12, 3], center=true);\n        }\n    }\n}\n\n// Metal collar at handle end\ncolor([0.7, 0.7, 0.7]) {\n    translate([0, 0, 60])\n        cylinder(h=5, r=7, $fn=20);\n}\n\n// Metal shaft\ncolor([0.8, 0.8, 0.8]) {\n    translate([0, 0, 65])\n        cylinder(h=15, r1=2.5, r2=1.5, $fn=12);\n}\n\n// Carbide tip holder\ncolor([0.9, 0.9, 0.9]) {\n    translate([0, 0, 80])\n        cylinder(h=3, r=2, $fn=8);\n}\n\n// Carbide scribing tip - sharp point\ncolor([0.3, 0.3, 0.3]) {\n    translate([0, 0, 83])\n        cylinder(h=2, r1=1.5, r2=0.1, $fn=8);\n}\n\n// Handle end cap detail\ncolor([0.6, 0.6, 0.6]) {\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=3, r=6.5, $fn=20);\n            cylinder(h=4, r=4, $fn=20);\n        }\n}\n\n// Grip texture rings\nmodule grip_ring(z_pos) {\n    color([0.15, 0.15, 0.15]) {\n        translate([0, 0, z_pos])\n            difference() {\n                cylinder(h=1.5, r=6.2, $fn=20);\n                cylinder(h=1.6, r=5.5, $fn=20);\n            }\n    }\n}\n\n// Add grip rings along handle\nfor(z = [5:10:55]) {\n    grip_ring(z);\n}\n\n// Small alignment mark on collar\ncolor([0, 0, 0]) {\n    translate([7, 0, 62.5])\n        rotate([90, 0, 0])\n        cylinder(h=2, r=0.5, $fn=3);\n}",
    "renders": true
  },
  {
    "tool": "grinder",
    "openscad_code": "// OpenSCAD code for a realistic 3D printable herb grinder\n// Medium complexity, ~100 lines\n\n// Overall dimensions (mm)\ngrinder_height = 55;\ngrinder_diameter = 50;\nwall_thickness = 2.5;\n\n// Top lid\nmodule lid() {\n    color(\"silver\")\n    difference() {\n        // Main lid body\n        cylinder(h = 12, d = grinder_diameter, $fn = 64);\n        \n        // Hollow cavity\n        translate([0, 0, wall_thickness])\n        cylinder(h = 12 - wall_thickness, d = grinder_diameter - 2*wall_thickness, $fn = 64);\n        \n        // Center magnet cavity\n        translate([0, 0, 9])\n        cylinder(h = 3, d = 8, $fn = 32);\n        \n        // Teeth pattern - diamond shaped cutters\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([grinder_diameter/2 - 10, 0, wall_thickness])\n            rotate([45, 0, 0])\n            cube([3, 3, 8], center = true);\n        }\n    }\n    \n    // Knurled grip ring\n    color(\"gray\")\n    difference() {\n        cylinder(h = 8, d = grinder_diameter + 2, $fn = 128);\n        cylinder(h = 8.1, d = grinder_diameter - 2, $fn = 64);\n    }\n    \n    // Top magnet\n    color(\"black\")\n    translate([0, 0, 9])\n    cylinder(h = 3, d = 7.8, $fn = 32);\n}\n\n// Grinding chamber\nmodule chamber() {\n    color(\"silver\")\n    difference() {\n        // Main body\n        cylinder(h = 20, d = grinder_diameter, $fn = 64);\n        \n        // Hollow cavity\n        translate([0, 0, wall_thickness])\n        cylinder(h = 20 - wall_thickness, d = grinder_diameter - 2*wall_thickness, $fn = 64);\n        \n        // Holes for ground material\n        for(i = [0:35]) {\n            rotate([0, 0, i * 10])\n            translate([grinder_diameter/2 - 8, 0, 2])\n            cylinder(h = 16, d = 2.5, $fn = 16);\n        }\n        \n        // Teeth pattern\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([grinder_diameter/2 - 10, 0, 2])\n            rotate([45, 0, 0])\n            cube([3, 3, 16], center = true);\n        }\n    }\n    \n    // Knurled grip ring\n    color(\"gray\")\n    difference() {\n        translate([0, 0, 12])\n        cylinder(h = 8, d = grinder_diameter + 2, $fn = 128);\n        translate([0, 0, 12])\n        cylinder(h = 8.1, d = grinder_diameter - 2, $fn = 64);\n    }\n}\n\n// Collection chamber\nmodule collection() {\n    color(\"silver\")\n    difference() {\n        // Main body\n        cylinder(h = 20, d = grinder_diameter, $fn = 64);\n        \n        // Large cavity for collection\n        translate([0, 0, wall_thickness])\n        cylinder(h = 18, d = grinder_diameter - 2*wall_thickness, $fn = 64);\n        \n        // Threading grooves (simplified)\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([grinder_diameter/2 - 3, 0, 0])\n            cube([6, 1, 20], center = true);\n        }\n    }\n    \n    // Knurled grip ring\n    color(\"gray\")\n    difference() {\n        translate([0, 0, 12])\n        cylinder(h = 8, d = grinder_diameter + 2, $fn = 128);\n        translate([0, 0, 12])\n        cylinder(h = 8.1, d = grinder_diameter - 2, $fn = 64);\n    }\n    \n    // Bottom magnet\n    color(\"black\")\n    translate([0, 0, 0.1])\n    cylinder(h = 3, d = 7.8, $fn = 32);\n}\n\n// Assemble the grinder\ntranslate([0, 0, 0])\ncollection();\n\ntranslate([0, 0, 20])\nchamber();\n\ntranslate([0, 0, 40])\nlid();",
    "renders": true
  },
  {
    "tool": "router",
    "openscad_code": "// Realistic Router Tool - Medium Complexity\n// Overall dimensions approximately 80mm x 60mm x 50mm\n\n$fn = 32;\n\n// Main colors\ncol_base = [0.15, 0.15, 0.15];\ncol_handle = [0.8, 0.2, 0.1];\ncol_switch = [0.9, 0.9, 0.9];\ncol_metal = [0.5, 0.5, 0.5];\ncol_blade = [0.3, 0.3, 0.3];\n\nmodule router_body() {\n    // Main motor housing - cylindrical body\n    color(col_base)\n    union() {\n        // Central cylinder\n        cylinder(h = 45, r = 28);\n        \n        // Top cap with slight taper\n        translate([0, 0, 45])\n            cylinder(h = 8, r1 = 28, r2 = 30);\n            \n        // Bottom base with vents\n        difference() {\n            translate([0, 0, -5])\n                cylinder(h = 10, r = 32);\n            \n            // Vent slots\n            for(i = [0:7]) {\n                rotate([0, 0, i * 45])\n                    translate([25, -1.5, -4])\n                        cube([6, 3, 8]);\n            }\n        }\n    }\n}\n\nmodule handle() {\n    color(col_handle)\n    union() {\n        // Left handle\n        translate([-35, 0, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 40, r = 8);\n                \n        // Right handle\n        translate([35, 0, 20])\n            rotate([0, 90, 0])\n                cylinder(h = 40, r = 8);\n                \n        // Handle grips\n        difference() {\n            // Left grip\n            translate([-35, 0, 20])\n                rotate([0, 90, 0])\n                    cylinder(h = 30, r = 10);\n                    \n            // Grip grooves\n            for(i = [-15:3:15]) {\n                translate([-35, 0, 20 + i])\n                    rotate([0, 90, 0])\n                        cylinder(h = 2, r = 11);\n            }\n        }\n        \n        // Right grip\n        difference() {\n            translate([35, 0, 20])\n                rotate([0, 90, 0])\n                    cylinder(h = 30, r = 10);\n                    \n            // Grip grooves\n            for(i = [-15:3:15]) {\n                translate([35, 0, 20 + i])\n                    rotate([0, 90, 0])\n                        cylinder(h = 2, r = 11);\n            }\n        }\n    }\n}\n\nmodule power_switch() {\n    color(col_switch)\n    translate([0, 25, 35])\n        cube([10, 5, 8]);\n}\n\nmodule collet_assembly() {\n    color(col_metal)\n    union() {\n        // Collet body\n        translate([0, 0, -15])\n            cylinder(h = 12, r = 15);\n            \n        // Collet nut\n        translate([0, 0, -18])\n            cylinder(h = 5, r = 18);\n            \n        // Router bit\n        color(col_blade)\n        translate([0, 0, -25])\n            cylinder(h = 12, r = 3);\n            \n        // Bit tip\n        translate([0, 0, -37])\n            cylinder(h = 3, r1 = 3, r2 = 1);\n    }\n}\n\nmodule depth_adjustment() {\n    color(col_metal)\n    difference() {\n        // Base plate\n        translate([0, 0, -25])\n            cylinder(h = 3, r = 40);\n            \n        // Center hole\n        translate([0, 0, -27])\n            cylinder(h = 8, r = 5);\n            \n        // Adjustment slots\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n                translate([0, 30, -25])\n                    cube([5, 10, 3]);\n        }\n    }\n}\n\nmodule power_cord() {\n    color(col_base)\n    translate([0, -30, 35])\n        rotate([90, 0, 0])\n            cylinder(h = 20, r = 3);\n}\n\n// Assembly\nrouter_body();\nhandle();\npower_switch();\ncollet_assembly();\ndepth_adjustment();\npower_cord();\n\n// Brand label\ncolor([1, 0.8, 0])\ntranslate([0, 28, 25])\n    rotate([90, 0, 0])\n        linear_extrude(height = 0.5)\n            text(\"ROUTER\", size = 5, halign = \"center\");",
    "renders": true
  },
  {
    "tool": "planer",
    "openscad_code": "// Hand Planer - 3D Printable Model\n// Medium complexity realistic style\n\n$fn = 50;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];  // Dark gray\ncolor_handle = [0.4, 0.2, 0.1];  // Wood brown\ncolor_blade = [0.7, 0.7, 0.7];  // Steel gray\ncolor_screw = [0.5, 0.5, 0.5];  // Silver\n\n// Overall dimensions\nplaner_length = 80;\nplaner_width = 45;\nplaner_height = 35;\n\nmodule planer_body() {\n    color(color_body)\n    difference() {\n        // Main body block\n        translate([0, 0, planer_height/2])\n            cube([planer_length, planer_width, planer_height], center=true);\n        \n        // Blade slot\n        translate([planer_length/2 - 15, 0, 5])\n            cube([30, planer_width - 10, 10], center=true);\n        \n        // Front grip cavity\n        translate([-planer_length/2 + 15, 0, planer_height - 10])\n            cube([20, planer_width - 20, 15], center=true);\n    }\n}\n\nmodule front_knob() {\n    color(color_handle)\n    union() {\n        // Knob base\n        translate([-planer_length/2 + 15, 0, planer_height + 5])\n            cylinder(h=8, r=8, center=true);\n        \n        // Knob grip\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n                translate([-planer_length/2 + 15, 5.5, planer_height + 9])\n                    cube([2, 3, 8], center=true);\n        }\n    }\n}\n\nmodule rear_handle() {\n    color(color_handle)\n    translate([planer_length/2 - 20, 0, planer_height/2 + 5])\n        rotate([90, 0, 0])\n            difference() {\n                // Handle body\n                cylinder(h=30, r1=8, r2=6);\n                \n                // Grip grooves\n                for(i=[5:5:25]) {\n                    translate([0, 0, i])\n                        rotate([0, 0, 45])\n                            cube([12, 2, 3], center=true);\n                }\n            }\n}\n\nmodule blade_assembly() {\n    color(color_blade)\n    union() {\n        // Blade\n        translate([planer_length/2 - 15, 0, 8])\n            cube([25, planer_width - 12, 2], center=true);\n        \n        // Chip breaker\n        translate([planer_length/2 - 25, 0, 12])\n            cube([15, planer_width - 14, 1.5], center=true);\n        \n        // Blade clamp\n        color(color_screw)\n        for(i=[-12:12:24]) {\n            translate([planer_length/2 - 5, i, 15])\n                cylinder(h=8, r=2);\n        }\n    }\n}\n\nmodule sole_plate() {\n    color(color_body)\n    difference() {\n        // Base plate\n        translate([0, 0, 2])\n            cube([planer_length + 2, planer_width + 2, 4], center=true);\n        \n        // Mouth opening\n        translate([planer_length/2 - 15, 0, 2])\n            cube([20, planer_width - 8, 5], center=true);\n        \n        // Relief grooves\n        for(i=[-planer_length/2 + 10:10:planer_length/2 - 10]) {\n            translate([i, 0, 2])\n                cube([1, planer_width - 2, 2], center=true);\n        }\n    }\n}\n\nmodule adjustment_wheel() {\n    color(color_screw)\n    translate([planer_length/2 - 10, planer_width/2 + 5, 10])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, r=6);\n                for(i=[0:30:330]) {\n                    rotate([0, 0, i])\n                        translate([3.5, 0, -1])\n                            cube([2, 1, 10], center=true);\n                }\n            }\n}\n\n// Assemble the planer\nplaner_body();\nfront_knob();\nrear_handle();\nblade_assembly();\nsole_plate();\nadjustment_wheel();\nmirror([0, 1, 0]) adjustment_wheel();",
    "renders": true
  },
  {
    "tool": "jigsaw",
    "openscad_code": "// Jigsaw Tool - Realistic Style, Medium Complexity\n// 3D printable handheld jigsaw with basic features\n\n// Main dimensions (mm)\nhandle_length = 40;\nhandle_diameter = 25;\nmotor_housing_length = 45;\nmotor_housing_width = 30;\nmotor_housing_height = 35;\nblade_length = 35;\nblade_thickness = 1.2;\nbase_plate_length = 60;\nbase_plate_width = 40;\nbase_plate_thickness = 3;\n\n// Colors\nhandle_color = [0.1, 0.1, 0.1];  // Black rubber\nbody_color = [0.8, 0.2, 0.2];    // Red body\nmetal_color = [0.7, 0.7, 0.7];   // Silver metal\nblade_color = [0.5, 0.5, 0.5];   // Gray blade\n\n// Handle with grip texture\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [5:5:handle_length-10]) {\n            translate([0, 0, i])\n                cylinder(h=2.5, d=handle_diameter+1, $fn=32);\n        }\n        \n        // Trigger slot\n        translate([0, -handle_diameter/2, handle_length/2+5])\n            cube([8, handle_diameter, 15], center=true);\n    }\n}\n\n// Motor housing with cooling vents\nmodule motor_housing() {\n    color(body_color)\n    union() {\n        // Main body\n        cube([motor_housing_length, motor_housing_width, motor_housing_height], center=true);\n        \n        // Cooling vents\n        for(i = [-15:5:15]) {\n            translate([motor_housing_length/2-2, i, 0])\n                cube([4, 2, motor_housing_height-5], center=true);\n        }\n        \n        // Brand label area\n        translate([motor_housing_length/2-1, 0, motor_housing_height/2-3])\n            cube([8, 20, 0.5], center=true);\n    }\n}\n\n// Blade holder mechanism\nmodule blade_holder() {\n    color(metal_color)\n    union() {\n        // Main holder block\n        translate([0, 0, -blade_length/2-5])\n            cube([10, 8, 15], center=true);\n        \n        // Blade clamp screws\n        for(i = [-3:6:3]) {\n            translate([5, i, -blade_length-2])\n                cylinder(h=8, d=3, $fn=12);\n        }\n    }\n}\n\n// Saw blade with teeth pattern\nmodule blade() {\n    color(blade_color)\n    union() {\n        // Main blade body\n        translate([0, 0, -blade_length/2-15])\n            cube([blade_thickness, 8, blade_length], center=true);\n        \n        // Blade teeth\n        for(i = [-blade_length/2+2:2:blade_length/2-2]) {\n            translate([0, 4, i])\n                cube([blade_thickness, 1, 1.5], center=true);\n        }\n    }\n}\n\n// Base plate with adjustment mechanism\nmodule base_plate() {\n    color(metal_color)\n    difference() {\n        // Main plate\n        cube([base_plate_length, base_plate_width, base_plate_thickness], center=true);\n        \n        // Blade slot\n        translate([0, 0, base_plate_thickness/2+1])\n            cube([blade_thickness+1, 8, base_plate_thickness+2], center=true);\n        \n        // Bevel adjustment markings\n        for(i = [-30:15:30]) {\n            translate([base_plate_length/2-5, i, base_plate_thickness-0.5])\n                cube([5, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Power cord\nmodule power_cord() {\n    color([0, 0, 0])\n    translate([-motor_housing_length/2-5, 0, motor_housing_height/2-5])\n    rotate([0, 90, 0])\n        cylinder(h=30, d=6, $fn=16);\n}\n\n// Trigger switch\nmodule trigger() {\n    color([0.9, 0.9, 0.9])\n    translate([0, -handle_diameter/2-2, handle_length/2+12])\n        cube([6, 4, 10], center=true);\n}\n\n// Assemble the jigsaw\nunion() {\n    // Handle\n    rotate([90, 0, 0])\n        translate([0, 0, -handle_length/2])\n            handle();\n    \n    // Trigger\n    rotate([90, 0, 0])\n        trigger();\n    \n    // Motor housing\n    translate([motor_housing_length/2-5, 0, handle_diameter/2-15])\n        motor_housing();\n    \n    // Blade holder\n    translate([motor_housing_length+5, 0, handle_diameter/2-15])\n        blade_holder();\n    \n    // Blade\n    translate([motor_housing_length+10, 0, handle_diameter/2-15])\n        blade();\n    \n    // Base plate\n    translate([motor_housing_length/2, 0, handle_diameter/2-15-motor_housing_height/2-base_plate_thickness/2-5])\n        base_plate();\n    \n    // Power cord\n    power_cord();\n}",
    "renders": true
  },
  {
    "tool": "circular",
    "openscad_code": "// Circular pipe cutter - realistic medium complexity\n$fn = 64;\n\n// Color definitions\ncutter_color = \"Silver\";\nhandle_color = \"DarkRed\";\ngrip_color = \"Black\";\nblade_color = \"Gray\";\n\n// Main dimensions\nbody_diameter = 25;\nbody_length = 80;\nhandle_length = 100;\ncutter_wheel_diameter = 30;\nwheel_thickness = 3;\n\nmodule pipe_cutter() {\n    difference() {\n        union() {\n            // Main body tube\n            color(cutter_color) \n            cylinder(d = body_diameter, h = body_length, center = true);\n            \n            // Handle connection block\n            translate([0, 0, -body_length/2 - 10])\n            color(cutter_color)\n            cube([body_diameter * 1.2, 15, 20], center = true);\n            \n            // Handle\n            translate([0, -handle_length/2 - 10, -body_length/2 - 20])\n            rotate([90, 0, 0])\n            color(handle_color)\n            cylinder(d = 12, h = handle_length, center = true);\n            \n            // Handle grip rings\n            for(i = [-4:4]) {\n                translate([0, -body_length/2 - 20 + i * 10, -body_length/2 - 20])\n                rotate([90, 0, 0])\n                color(grip_color)\n                cylinder(d = 14, h = 3, center = true);\n            }\n            \n            // Cutter wheel support arm\n            translate([body_diameter/2 + 10, 0, -body_length/4])\n            rotate([0, 90, 0])\n            color(cutter_color)\n            cube([20, 8, 8], center = true);\n            \n            // Cutter wheel\n            translate([body_diameter/2 + 20, 0, -body_length/4])\n            rotate([0, 90, 0])\n            color(blade_color)\n            cylinder(d = cutter_wheel_diameter, h = wheel_thickness, center = true);\n        }\n        \n        // Central hole for pipe\n        cylinder(d = 20, h = body_length + 2, center = true);\n        \n        // Screw hole\n        translate([0, 0, body_length/2 - 5])\n        cylinder(d = 6, h = 10, center = true);\n        \n        // Lightening holes in body\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([body_diameter/2 - 5, 0, 0])\n            cylinder(d = 8, h = body_length + 2, center = true);\n        }\n        \n        // Wheel axle hole\n        translate([body_diameter/2 + 20, 0, -body_length/4])\n        rotate([0, 90, 0])\n        cylinder(d = 3, h = wheel_thickness + 2, center = true);\n    }\n    \n    // Adjustment knob\n    translate([0, 0, body_length/2 + 5])\n    difference() {\n        color(cutter_color)\n        cylinder(d = 15, h = 10, center = true);\n        \n        // Knurling pattern\n        for(i = [0:23]) {\n            rotate([0, 0, i * 15])\n            translate([7, 0, -5])\n            cube([0.5, 1, 10], center = true);\n        }\n    }\n    \n    // Knob handle\n    translate([0, 0, body_length/2 + 15])\n    rotate([90, 0, 0])\n    color(handle_color)\n    cylinder(d = 6, h = 15, center = true);\n}\n\n// Scale to reasonable 3D print size\nscale(0.7)\npipe_cutter();",
    "renders": true
  },
  {
    "tool": "reciprocating",
    "openscad_code": "// Reciprocating Saw â€“ medium complexity, realistic style\n// 1:4 scale (~85 mm long), 3D-printable, no support required\n\n// Overall dimensions reference (mm)\n// Length: 83\n// Height: 55\n// Width : 43\n\n// Colors\n$fn = 40;\n\n// Main housing\nmodule body() {\n    difference() {\n        union() {\n            // Rear motor housing\n            color(\"darkslategray\")\n            translate([-30, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 60, r1 = 25, r2 = 22);\n\n            // Front gear case\n            color(\"dimgray\")\n            translate([28, 0, 0])\n            cube([30, 40, 38], center = true);\n        }\n\n        // Cooling slots\n        for (i = [-2:2]) {\n            color(\"darkslategray\")\n            translate([-30, 0, i*8])\n            rotate([0, 90, 0])\n            cylinder(h = 65, r = 2);\n        }\n    }\n}\n\n// Rubber over-mold grip\nmodule grip() {\n    color(\"black\")\n    difference() {\n        translate([-50, 0, -15])\n        scale([1, 1.15, 1.2])\n        sphere(18);\n\n        // Flatten bottom\n        translate([-50, 0, -35])\n        cube([40, 40, 40], center = true);\n    }\n}\n\n// Trigger & safety\nmodule trigger() {\n    color(\"crimson\")\n    translate([-20, -20, -5])\n    cube([12, 4, 25]);\n\n    color(\"gold\")\n    translate([-20, -25, 8])\n    cube([6, 2, 8]);\n}\n\n// Shoe plate\nmodule shoe() {\n    color(\"silver\")\n    difference() {\n        translate([42, 0, -22])\n        cube([25, 35, 4]);\n\n        // Mounting holes\n        for (x = [0, 12])\n            translate([42 + x, 10, -22])\n            cylinder(h = 5, r = 2);\n\n        for (x = [0, 12])\n            translate([42 + x, -10, -22])\n            cylinder(h = 5, r = 2);\n    }\n}\n\n// Blade clamp & blade\nmodule bladeAssembly() {\n    // Clamp block\n    color(\"dimgray\")\n    translate([12, 0, 0])\n    cube([18, 18, 16], center = true);\n\n    // Visible blade shaft\n    color(\"silver\")\n    translate([12, 0, 8])\n    cube([40, 2, 1.5], center = true);\n\n    // Cutting blade\n    color(\"silver\")\n    translate([42, 0, 8])\n    cube([40, 1.2, 0.8], center = true);\n\n    // Teeth\n    for (i = [0:9]) {\n        color(\"silver\")\n        translate([42 + i*4, 0.6, 8])\n        cube([0.8, 0.4, 0.8]);\n    }\n}\n\n// Cord boot\nmodule cord() {\n    color(\"black\")\n    translate([-55, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 25, r = 7);\n}\n\n// Assembly\nbody();\ngrip();\ntrigger();\nshoe();\nbladeAssembly();\ncord();",
    "renders": true
  },
  {
    "tool": "impact",
    "openscad_code": "// Impact driver - realistic style, medium complexity\n// Overall length ~100mm, designed for 3D printing\n\n// Color definitions\n$fn = 50;\n\n// Main body module\nmodule impact_driver() {\n    color(\"silver\") {\n        // Motor housing\n        translate([0, 0, 0]) {\n            cylinder(h = 35, d1 = 28, d2 = 30);\n        }\n        \n        // Gear housing\n        translate([0, 0, 35]) {\n            cylinder(h = 25, d = 32);\n        }\n        \n        // Chuck assembly\n        translate([0, 0, 60]) {\n            cylinder(h = 15, d = 22);\n        }\n    }\n    \n    // Grip handle\n    color(\"gray20\") {\n        translate([-15, 0, -25]) {\n            rotate([90, 0, 0]) {\n                // Main grip\n                difference() {\n                    cylinder(h = 60, d = 32);\n                    // Grip texture grooves\n                    for(i = [0:5]) {\n                        rotate([0, 0, i * 60]) {\n                            translate([16, 0, 0]) {\n                                cube([4, 2, 60], center = true);\n                            }\n                        }\n                    }\n                }\n                // Trigger guard\n                translate([0, 0, 15]) {\n                    difference() {\n                        cube([25, 15, 30], center = true);\n                        cube([20, 12, 25], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Trigger\n    color(\"red\") {\n        translate([-20, -7, 0]) {\n            rotate([90, 0, 0]) {\n                cube([12, 8, 20]);\n            }\n        }\n    }\n    \n    // Forward/reverse switch\n    color(\"black\") {\n        translate([0, 16, 15]) {\n            cube([8, 4, 6], center = true);\n        }\n    }\n    \n    // Battery pack\n    color(\"gray30\") {\n        translate([-15, 0, -35]) {\n            difference() {\n                // Main battery housing\n                cube([30, 35, 20], center = true);\n                // Battery release buttons\n                translate([0, 18, 0]) {\n                    cube([20, 2, 15], center = true);\n                }\n                // Ventilation slots\n                for(i = [0:3]) {\n                    translate([0, 0, -8 + i * 5]) {\n                        cube([25, 35, 1], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Chuck jaws\n    color(\"silver\") {\n        translate([0, 0, 75]) {\n            for(i = [0:2]) {\n                rotate([0, 0, i * 120]) {\n                    translate([5, 0, 0]) {\n                        cube([10, 3, 8], center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // LED work light\n    color(\"yellow\") {\n        translate([0, 0, 60]) {\n            sphere(d = 8);\n        }\n    }\n    \n    // Torque adjustment ring\n    color(\"blue\") {\n        translate([0, 0, 35]) {\n            difference() {\n                cylinder(h = 8, d = 35);\n                // Adjustment markings\n                for(i = [0:19]) {\n                    rotate([0, 0, i * 18]) {\n                        translate([17, 0, 0]) {\n                            cube([2, 1, 8], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Brand label area\n    color(\"white\") {\n        translate([15, 0, 20]) {\n            cube([15, 20, 0.5], center = true);\n        }\n    }\n}\n\n// Assembly\nimpact_driver();",
    "renders": true
  },
  {
    "tool": "driver",
    "openscad_code": "// Realistic 3D printable driver tool (medium complexity)\n// Overall length ~90 mm, designed for 0.4 mm nozzle / 0.2 mm layer height\n\n// Color constants\nhandle_col = \"darkslategray\";\nshank_col   = \"silver\";\ntip_col     = \"darkgoldenrod\";\n\n// Main dimensions\nhandle_len  = 45;\nhandle_dia  = 16;\nshank_len   = 35;\nshank_dia   = 6;\ntip_len     = 10;\ntip_size    = 3; // #2 Phillips\n\n// Handle module with ergonomic grip\nmodule handle() {\n    color(handle_col)\n    union() {\n        // Main grip body\n        cylinder(h = handle_len, d = handle_dia, $fn = 40);\n\n        // Ergonomic finger grooves (6 around)\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([handle_dia/2 - 1.5, 0, handle_len/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = 12, d1 = 3, d2 = 5, $fn = 16);\n        }\n\n        // End cap with brand inset\n        translate([0, 0, handle_len])\n            cylinder(h = 4, d = handle_dia + 1, $fn = 40);\n\n        // Brand inset\n        difference() {\n            translate([0, 0, handle_len + 2])\n                cylinder(h = 2, d = 8, $fn = 30);\n            translate([0, 0, handle_len + 1.9])\n                cylinder(h = 2.2, d = 6, $fn = 30);\n        }\n    }\n}\n\n// Shank with anti-roll flats\nmodule shank() {\n    color(shank_col)\n    union() {\n        cylinder(h = shank_len, d = shank_dia, $fn = 30);\n\n        // Two small flats to prevent rolling\n        for (side = [0, 1]) {\n            rotate([0, 0, side * 180])\n                translate([shank_dia/2 - 0.5, 0, shank_len/2])\n                    cube([1, shank_dia * 0.8, shank_len], center = true);\n        }\n    }\n}\n\n// Phillips #2 tip\nmodule phillips_tip() {\n    color(tip_col)\n    intersection() {\n        // Tapered cone\n        cylinder(h1 = tip_len, d1 = tip_size, d2 = shank_dia, $fn = 16);\n\n        // Four flutes creating cross pattern\n        for (a = [0:90:270]) {\n            rotate([0, 0, a])\n                translate([0, 0, -1])\n                    cube([tip_size * 1.8, 0.8, tip_len + 2], center = true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) handle();\ntranslate([0, 0, handle_len]) shank();\ntranslate([0, 0, handle_len + shank_len]) phillips_tip();",
    "renders": true
  },
  {
    "tool": "nibbler",
    "openscad_code": "// Nibbler Tool - Realistic Style, Medium Complexity\n\n// Nibbler dimensions (in mm)\n$fn = 32;\nhandle_length = 80;\nhandle_diameter = 12;\njaw_width = 20;\njaw_thickness = 8;\ntotal_height = 35;\n\n// Colors\ncolor_handle = [0.1, 0.1, 0.1]; // Black rubber\ncolor_metal = [0.7, 0.7, 0.7]; // Metal gray\ncolor_blade = [0.8, 0.8, 0.9]; // Steel\n\n// Handle with grip texture\nmodule handle() {\n    color(color_handle) {\n        // Main handle body\n        cylinder(h = handle_length, d = handle_diameter, center = true);\n        \n        // Grip rings\n        for(i = [0:8]) {\n            translate([0, 0, -handle_length/2 + i * 10 + 5]) {\n                difference() {\n                    cylinder(h = 3, d = handle_diameter + 2, center = true);\n                    cylinder(h = 3.5, d = handle_diameter, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Upper jaw with blade\nmodule upper_jaw() {\n    color(color_metal) {\n        // Main jaw body\n        translate([0, 0, 15]) {\n            cube([jaw_width, jaw_thickness, 15], center = true);\n        }\n        \n        // Blade insert\n        color(color_blade) {\n            translate([-jaw_width/2 + 2, -jaw_thickness/2 - 0.5, 22.5]) {\n                cube([jaw_width - 4, 1, 5]);\n            }\n        }\n        \n        // Pivot point\n        translate([0, 0, 15]) {\n            cylinder(h = jaw_thickness + 4, d = 6, center = true);\n        }\n        \n        // Spring mount\n        translate([jaw_width/2 - 5, 0, 12]) {\n            cylinder(h = 3, d = 4, center = true);\n        }\n    }\n}\n\n// Lower jaw with blade\nmodule lower_jaw() {\n    color(color_metal) {\n        // Main jaw body\n        translate([0, 0, 0]) {\n            cube([jaw_width, jaw_thickness, 15], center = true);\n        }\n        \n        // Blade insert\n        color(color_blade) {\n            translate([-jaw_width/2 + 2, -jaw_thickness/2 - 0.5, -2.5]) {\n                cube([jaw_width - 4, 1, 5]);\n            }\n        }\n        \n        // Pivot point\n        translate([0, 0, 0]) {\n            cylinder(h = jaw_thickness + 4, d = 6, center = true);\n        }\n        \n        // Spring mount\n        translate([jaw_width/2 - 5, 0, 3]) {\n            cylinder(h = 3, d = 4, center = true);\n        }\n        \n        // Handle connector\n        translate([-jaw_width/2 - 5, 0, -7.5]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 10, d = 8, center = true);\n            }\n        }\n    }\n}\n\n// Spring mechanism\nmodule spring() {\n    color([0.5, 0.5, 0.5]) {\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90]) {\n                translate([jaw_width/2 - 5, 0, 7.5 + i * 1.5]) {\n                    cylinder(h = 3, d = 2, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nmodule nibbler() {\n    // Handle\n    translate([-jaw_width/2 - 10, 0, -7.5]) {\n        rotate([0, 0, -90]) {\n            handle();\n        }\n    }\n    \n    // Jaws\n    upper_jaw();\n    lower_jaw();\n    \n    // Spring\n    spring();\n    \n    // Safety latch\n    color(color_metal) {\n        translate([jaw_width/2 + 2, 0, 7.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 10, d = 3);\n            }\n        }\n    }\n}\n\n// Render the nibbler\nnibbler();",
    "renders": true
  },
  {
    "tool": "shear",
    "openscad_code": "// Realistic Shear Tool - Medium Complexity\n// Designed for 3D printing - approximately 80mm length\n\n// Main parameters\nhandle_length = 35;\nhandle_diameter = 8;\nblade_length = 45;\nblade_width = 15;\nblade_thickness = 2;\npivot_radius = 3;\ngrip_radius = 1.5;\n\n// Colors\nhandle_color = [0.2, 0.2, 0.2]; // Dark gray rubber\nmetal_color = [0.7, 0.7, 0.8]; // Light gray metal\nblade_color = [0.9, 0.9, 0.9]; // Silver blade\n\nmodule grip_pattern(circles = 6) {\n    // Non-slip grip pattern on handles\n    for(i = [0:circles-1]) {\n        rotate([0, 0, i * 60]) \n            translate([0, handle_diameter/2 + 0.5, 0])\n                cylinder(h=0.5, r=grip_radius, $fn=16);\n    }\n}\n\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        difference() {\n            cylinder(h=handle_length, r=handle_diameter/2, $fn=32);\n            // Hollow center for weight reduction\n            cylinder(h=handle_length-2, r=handle_diameter/2-2, $fn=32);\n        }\n        \n        // Grip rings\n        for(z = [5, 10, 15, 20, 25, 30]) {\n            translate([0, 0, z]) {\n                cylinder(h=2, r=handle_diameter/2+1, $fn=32);\n            }\n        }\n        \n        // Finger indentations\n        rotate([0, 90, 0]) {\n            translate([0, 0, -handle_length/2]) {\n                for(i = [0:3]) {\n                    translate([0, 0, i*7+7]) {\n                        sphere(r=handle_diameter/2+0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule blade() {\n    color(blade_color) {\n        // Main blade body\n        difference() {\n            // Tapered blade\n            hull() {\n                translate([0, 0, 0]) cube([blade_length, blade_thickness, blade_width]);\n                translate([blade_length-5, 0, 0]) cube([5, blade_thickness, blade_width-4]);\n            }\n            \n            // Cutting edge bevel\n            translate([0, blade_thickness/2, 0])\n                rotate([0, -15, 0])\n                    cube([blade_length+5, blade_thickness*2, blade_width*2]);\n        }\n        \n        // Blade spine reinforcement\n        translate([0, 0, blade_width/2-1]) {\n            cube([blade_length, blade_thickness+1, 2]);\n        }\n    }\n}\n\nmodule finger_guard() {\n    color(metal_color) {\n        translate([0, 0, handle_length/2-5]) {\n            difference() {\n                cylinder(h=3, r=handle_diameter/2+2, $fn=32);\n                cylinder(h=4, r=handle_diameter/2-1, $fn=32);\n            }\n        }\n    }\n}\n\nmodule pivot_mechanism() {\n    color(metal_color) {\n        // Pivot cylinder\n        cylinder(h=blade_thickness+4, r=pivot_radius, $fn=32);\n        \n        // Pivot head\n        translate([0, 0, blade_thickness/2+2]) {\n            cylinder(h=2, r=pivot_radius+1, $fn=32);\n        }\n        \n        // Thread detail\n        for(i = [0:5]) {\n            translate([0, 0, i*0.5-1.5]) {\n                cylinder(h=0.3, r=pivot_radius+0.2, $fn=32);\n            }\n        }\n    }\n}\n\n// Assemble first handle and blade\ntranslate([0, 0, 0]) {\n    handle();\n    translate([0, 0, handle_length/2+blade_width/2]) {\n        rotate([0, 90, 0]) {\n            blade();\n        }\n    }\n    translate([0, 0, handle_length/2-2]) {\n        finger_guard();\n    }\n    translate([0, handle_thickness/2+2, handle_length/2+blade_width/2]) {\n        pivot_mechanism();\n    }\n}\n\n// Assemble second handle and blade (mirrored)\ntranslate([0, blade_thickness+4, 0]) {\n    rotate([180, 0, 0]) {\n        handle();\n        translate([0, 0, handle_length/2+blade_width/2]) {\n            rotate([0, 90, 0]) {\n                blade();\n            }\n        }\n        translate([0, 0, handle_length/2-2]) {\n            finger_guard();\n        }\n        translate([0, -handle_thickness/2-2, handle_length/2+blade_width/2]) {\n            pivot_mechanism();\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "lathe",
    "openscad_code": "// Lathe Cutting Tool (Medium Complexity Realistic Style)\n// Overall dimensions: ~80mm x 25mm x 25mm\n\n// Color definitions\ntool_steel = [0.5, 0.5, 0.5];      // Gray tool steel\nhandle_color = [0.2, 0.1, 0.05];   // Dark wood handle\ninsert_color = [0.8, 0.8, 0.2];    // Yellow carbide insert\nsetscrew_color = [0.3, 0.3, 0.3];  // Dark gray screws\n\n// Main module\nmodule lathe_tool() {\n    // Tool holder body\n    difference() {\n        union() {\n            // Main shank\n            color(tool_steel) {\n                cube([60, 20, 20], center=true);\n            }\n            \n            // Tool head\n            translate([30, 0, 0]) {\n                rotate([0, 0, 45]) {\n                    color(tool_steel) {\n                        cube([20, 20, 20], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Center hole for clamping\n        rotate([0, 90, 0]) {\n            cylinder(h=22, r=4.5, center=true);\n        }\n    }\n    \n    // Carbide insert pocket\n    translate([35, 0, 10]) {\n        rotate([0, -5, 45]) {\n            color(insert_color) {\n                cube([8, 2.5, 6], center=true);\n            }\n        }\n    }\n    \n    // Cutting edge\n    translate([35, 0, 10]) {\n        rotate([0, -5, 45]) {\n            translate([4, 0, 3]) {\n                color(insert_color) {\n                    cube([1, 2.5, 1], center=true);\n                }\n            }\n        }\n    }\n    \n    // Clamp screw\n    translate([32, 0, 10]) {\n        color(setscrew_color) {\n            cylinder(h=8, r=2.5, $fn=6);\n        }\n    }\n    \n    // Handle grip\n    translate([-35, 0, 0]) {\n        difference() {\n            color(handle_color) {\n                cylinder(h=30, r=10, center=true);\n            }\n            \n            // Grip knurling\n            for(i = [0:5:30]) {\n                translate([0, 0, -15 + i]) {\n                    rotate([0, 0, 45]) {\n                        cube([18, 2, 1], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Set screws\n    for(pos = [[-30, 0, 0], [-20, 0, 0]]) {\n        translate(pos) {\n            color(setscrew_color) {\n                cylinder(h=5, r=3, $fn=6);\n            }\n        }\n    }\n    \n    // Rounded edges on shank\n    translate([0, 0, -10]) {\n        color(tool_steel) {\n            cube([60, 18, 1], center=true);\n        }\n    }\n    \n    // Identification groove\n    translate([-10, 0, -10.5]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=0.5, r=8, $fn=3);\n        }\n    }\n}\n\n// Generate the tool\nlathe_tool();",
    "renders": true
  },
  {
    "tool": "mill",
    "openscad_code": "// Realistic medium-complexity OpenSCAD model of a pepper mill\n// Overall height â‰ˆ 85 mm, Ã˜ â‰ˆ 45 mm â€“ 3D-print friendly\n\n$fn = 40;\n\n// Main colors\ncolor_body   = \"SaddleBrown\";\ncolor_metal  = \"Silver\";\ncolor_pepper = \"DarkGoldenrod\";\n\n// --------------------\n// Pepper-mill body\n// --------------------\nmodule body() {\n    color(color_body)\n    difference() {\n        // Main cylinder\n        cylinder(h = 60, d = 45, center = false);\n\n        // Hollow chamber for peppercorns\n        translate([0, 0, 5])\n            cylinder(h = 45, d = 35);\n\n        // Filling hole (top)\n        translate([0, 0, 55])\n            cylinder(h = 5, d = 20);\n    }\n}\n\n// --------------------\n// Metal adjustment knob\n// --------------------\nmodule knob() {\n    color(color_metal)\n    union() {\n        // Knob cylinder\n        translate([0, 0, 60])\n            cylinder(h = 10, d = 48);\n\n        // Grip ridges\n        for (i = [0 : 30 : 330]) {\n            rotate([0, 0, i])\n                translate([22, 0, 60])\n                    cube([2, 2, 10], center = true);\n        }\n    }\n}\n\n// --------------------\n// Crank arm with handle\n// --------------------\nmodule crank() {\n    color(color_metal)\n    union() {\n        // Arm\n        translate([0, 0, 65])\n            rotate([90, 0, 0])\n                cylinder(h = 25, d = 6);\n\n        // Handle knob\n        translate([0, 25, 65])\n            sphere(d = 12);\n    }\n}\n\n// --------------------\n// Grinding mechanism (simplified burr)\n// --------------------\nmodule burr() {\n    color(color_metal)\n    difference() {\n        cylinder(h = 15, d = 34);\n        // Teeth\n        for (i = [0 : 15 : 345]) {\n            rotate([0, 0, i])\n                translate([15, 0, 0])\n                    cube([2, 1, 15], center = true);\n        }\n    }\n}\n\n// --------------------\n// Peppercorns (decorative)\n// --------------------\nmodule peppercorns() {\n    color(color_pepper)\n    for (i = [0 : 5]) {\n        a = i * 60;\n        r = 10 + (i % 2) * 5;\n        translate([r * cos(a), r * sin(a), 25 + (i % 3) * 10])\n            sphere(d = 4);\n    }\n}\n\n// --------------------\n// Assembly\n// --------------------\nbody();\nknob();\ncrank();\ntranslate([0, 0, 5]) burr();\npeppercorns();",
    "renders": true
  },
  {
    "tool": "shaper",
    "openscad_code": "// Wood Shaper Tool - OpenSCAD\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Colors\ncolor_base = [0.2, 0.2, 0.2];  // Dark gray\ncolor_handle = [0.5, 0.3, 0.1];  // Wood brown\ncolor_blade = [0.7, 0.7, 0.7];  // Steel gray\ncolor_screw = [0.8, 0.8, 0.8];  // Silver\ncolor_guard = [0.3, 0.3, 0.3];  // Dark gray\n\n// Main body dimensions\nbody_length = 80;\nbody_width = 35;\nbody_height = 25;\nhandle_diameter = 15;\nhandle_length = 60;\n\n// Blade dimensions\nblade_width = 25;\nblade_height = 8;\nblade_thickness = 3;\n\n// Guard dimensions\nguard_length = 40;\nguard_width = 8;\nguard_height = 15;\n\nmodule shaper_body() {\n    color(color_base)\n    union() {\n        // Main body block\n        translate([-body_length/2, -body_width/2, -body_height/2])\n            cube([body_length, body_width, body_height]);\n        \n        // Front slope\n        translate([-body_length/2 - 10, -body_width/2, -body_height/2])\n            rotate([0, 0, 20])\n            cube([15, body_width, body_height]);\n        \n        // Top ridge\n        translate([-body_length/2 + 10, -body_width/2, body_height/2])\n            cube([body_length - 20, body_width, 3]);\n        \n        // Mounting holes\n        for(i = [-1, 1]) {\n            translate([body_length/2 - 15, i * 8, 0])\n                cylinder(h = body_height + 1, r = 2, center = true);\n            translate([body_length/2 - 25, i * 8, 0])\n                cylinder(h = body_height + 1, r = 2, center = true);\n        }\n    }\n}\n\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle\n        translate([body_length/2 + handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = handle_length, r = handle_diameter/2, center = true);\n        \n        // Handle grip rings\n        for(i = [-2, -1, 0, 1, 2]) {\n            translate([body_length/2 + 10 + i * 10, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h = 2, r1 = handle_diameter/2 + 1, r2 = handle_diameter/2 + 1, center = true);\n        }\n        \n        // End cap\n        translate([body_length/2 + handle_length, 0, 0])\n            sphere(r = handle_diameter/2 + 1);\n    }\n}\n\nmodule blade_assembly() {\n    color(color_blade)\n    difference() {\n        // Main blade\n        translate([-body_length/2 - 20, -blade_width/2, -blade_height/2])\n            cube([40, blade_width, blade_height]);\n        \n        // Cutting edge profile\n        translate([-body_length/2 - 25, -blade_width/2 - 1, -blade_height/2 - 1])\n            cube([10, blade_width + 2, blade_height + 2]);\n        \n        // Mounting slot\n        translate([-body_length/2 - 15, -3, -blade_height/2])\n            cube([6, 6, blade_height + 1]);\n    }\n    \n    // Blade screws\n    color(color_screw)\n    for(i = [-1, 1]) {\n        translate([-body_length/2 - 12, i * 8, 0])\n            cylinder(h = blade_thickness + 2, r = 2, center = true);\n        translate([-body_length/2 - 12, i * 8, -blade_thickness/2 - 1])\n            sphere(r = 2);\n    }\n}\n\nmodule safety_guard() {\n    color(color_guard)\n    difference() {\n        // Main guard\n        translate([-body_length/2 - guard_length/2, -guard_width/2 - blade_width/2 - 5, -guard_height/2])\n            cube([guard_length, guard_width, guard_height]);\n        \n        // Blade slot\n        translate([-body_length/2 - 25, -blade_width/2 - 10, -blade_height/2 - 1])\n            cube([20, 10, blade_height + 2]);\n        \n        // Mounting holes\n        for(i = [-1, 1]) {\n            translate([-body_length/2 - 10, -guard_width/2 - blade_width/2 - 5, i * 5])\n                cylinder(h = guard_height + 1, r = 1.5, center = true);\n        }\n    }\n}\n\n// Assembly\nshaper_body();\nhandle();\nblade_assembly();\nsafety_guard();",
    "renders": true
  },
  {
    "tool": "solderingiron",
    "openscad_code": "// OpenSCAD Soldering Iron - Realistic Style - Medium Complexity\n\n$fn = 50;\n\n// Main colors\ncolor_grip = [0.1, 0.1, 0.1];\ncolor_body = [0.7, 0.7, 0.7];\ncolor_metal = [0.8, 0.8, 0.8];\ncolor_heater = [0.4, 0.4, 0.4];\ncolor_tip = [0.9, 0.9, 0.9];\n\n// Overall dimensions\nmodule soldering_iron() {\n    // Handle with grip texture\n    union() {\n        color(color_grip)\n        translate([0, 0, -40])\n        difference() {\n            cylinder(h=60, d1=20, d2=18);\n            // Grip rings\n            for(i = [-35:5:-10]) {\n                translate([0, 0, i])\n                cylinder(h=2, d=17);\n            }\n        }\n        \n        // Body tube\n        color(color_body)\n        translate([0, 0, 20])\n        cylinder(h=40, d=18);\n        \n        // Heater element\n        color(color_heater)\n        translate([0, 0, 60])\n        cylinder(h=20, d=15);\n        \n        // Metal tip holder\n        color(color_metal)\n        translate([0, 0, 80])\n        cylinder(h=10, d=12);\n        \n        // Tip (cone shape)\n        color(color_tip)\n        translate([0, 0, 90])\n        cylinder(h1=15, h2=0, r1=6, r2=1);\n        \n        // Power cord\n        color([0, 0, 0])\n        translate([0, 0, -42])\n        rotate([90, 0, 0])\n        cylinder(h=30, d=5);\n        \n        // Indicator light\n        color([1, 0, 0])\n        translate([8, 0, 15])\n        sphere(d=3);\n        \n        // Temperature adjustment dial\n        color(color_metal)\n        translate([0, 10, 5])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=8);\n        \n        // Dial markings\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([0, 12, 5])\n            cube([0.5, 2, 0.5]);\n        }\n        \n        // Ventilation holes\n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([9, 0, 35])\n            cylinder(h=15, d=2);\n        }\n        \n        // Safety collar\n        color(color_metal)\n        translate([0, 0, 55])\n        cylinder(h=5, d=20);\n    }\n}\n\n// Assembly\nsoldering_iron();",
    "renders": true
  },
  {
    "tool": "heatgun",
    "openscad_code": "// Heat Gun - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm long, ~20mm wide, ~15mm high\n\n// Color definitions\ncolor_dark = [0.1, 0.1, 0.1];\ncolor_orange = [0.8, 0.3, 0];\ncolor_gray = [0.5, 0.5, 0.5];\ncolor_red = [0.7, 0.1, 0.1];\n\n// Main body module\nmodule heat_gun() {\n    union() {\n        // Handle grip\n        color(color_dark)\n        translate([0, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h=25, r=8, $fn=32);\n        \n        // Handle grip texture\n        color(color_dark)\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 0, -5])\n                    rotate([90, 0, 0])\n                        cylinder(h=25, r1=8, r2=7.5, $fn=6);\n        }\n        \n        // Body housing\n        color(color_orange)\n        difference() {\n            translate([-10, 0, 0])\n                cube([40, 20, 20], center=true);\n            \n            // Ventilation slots\n            for(i=[-15:5:15]) {\n                translate([i, 0, 10])\n                    cube([3, 18, 3], center=true);\n            }\n        }\n        \n        // Nozzle\n        color(color_gray)\n        translate([15, 0, 0])\n            cylinder(h=20, r1=5, r2=3, $fn=16);\n        \n        // Nozzle tip detail\n        color(color_red)\n        translate([35, 0, 0])\n            cylinder(h=2, r=2.5, $fn=16);\n        \n        // Power cable entry\n        color(color_dark)\n        translate([-25, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=10, r=3, $fn=16);\n        \n        // Trigger\n        color(color_dark)\n        translate([-10, 10, 0])\n            cube([8, 5, 15], center=true);\n        \n        // Trigger guard\n        color(color_gray)\n        translate([-12, 15, 0])\n            difference() {\n                cube([12, 8, 20], center=true);\n                translate([0, 0, 0])\n                    cube([8, 4, 16], center=true);\n            }\n        \n        // Control dial\n        color(color_gray)\n        translate([5, 10, 5])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=4, $fn=32);\n        \n        // Dial markings\n        color(color_dark)\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([5, 14, 5])\n                    cube([1, 2, 3], center=true);\n        }\n        \n        // Side vents\n        color(color_gray)\n        difference() {\n            translate([0, 0, 0])\n                cube([30, 20, 20], center=true);\n            translate([0, 0, 0])\n                cube([28, 18, 18], center=true);\n        }\n        \n        // Mounting bracket slots\n        color(color_dark)\n        for(side=[-1, 1]) {\n            translate([0, side*12, 5])\n                cube([20, 2, 10], center=true);\n        }\n    }\n}\n\n// Display the heat gun\nrotate([0, -20, 30])\n    heat_gun();",
    "renders": true
  },
  {
    "tool": "gluegun",
    "openscad_code": "// Glue Gun - Realistic Style, Medium Complexity\n// Dimensions: ~90mm length, designed for 3D printing\n\nmodule gluegun() {\n    // Main body - cylindrical with slight taper\n    union() {\n        // Upper body housing\n        difference() {\n            cylinder(h=45, r1=12, r2=11, $fn=64);\n            translate([0, 0, -1]) cylinder(h=47, r1=10, r2=9, $fn=64);\n        }\n        \n        // Lower body extension\n        translate([0, 0, -25]) \n        difference() {\n            cylinder(h=25, r1=11, r2=12, $fn=64);\n            translate([0, 0, -1]) cylinder(h=27, r1=9, r2=10, $fn=64);\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    color([0.1, 0.1, 0.1]) {\n        difference() {\n            // Main handle shape\n            translate([-8, -15, -35]) \n            cube([16, 30, 35], center=true);\n            \n            // Rounded edges\n            translate([0, -15, -35]) {\n                rotate([90, 0, 0]) cylinder(h=30, r=8, $fn=32);\n                translate([0, 0, 35]) rotate([90, 0, 0]) cylinder(h=30, r=8, $fn=32);\n            }\n            \n            // Grip cutouts\n            for(i = [-20:10:10]) {\n                translate([0, -15, i]) \n                cube([12, 28, 4], center=true);\n            }\n        }\n    }\n}\n\n// Nozzle assembly\nmodule nozzle() {\n    color([0.3, 0.3, 0.3]) {\n        // Nozzle base\n        cylinder(h=8, r1=12, r2=10, $fn=32);\n        \n        // Nozzle tip - tapered\n        translate([0, 0, 8]) \n        cylinder(h=20, r1=10, r2=2, $fn=32);\n        \n        // Heat shield ring\n        translate([0, 0, 5]) \n        cylinder(h=3, r=14, $fn=32);\n    }\n}\n\n// Trigger mechanism\nmodule trigger() {\n    color([0.8, 0.1, 0.1]) {\n        translate([0, -12, -10]) {\n            difference() {\n                // Trigger shape\n                cube([8, 15, 20], center=true);\n                \n                // Rounded trigger surface\n                translate([0, 7.5, 0]) \n                rotate([90, 0, 0]) cylinder(h=8, r=8, $fn=32);\n            }\n        }\n    }\n}\n\n// Glue stick holder\nmodule glue_holder() {\n    color([0.5, 0.5, 0.5]) {\n        translate([0, 0, 47]) {\n            difference() {\n                // Main tube\n                cylinder(h=25, r=6, $fn=32);\n                \n                // Hollow center\n                translate([0, 0, -1]) \n                cylinder(h=27, r=4, $fn=32);\n                \n                // Support fins\n                for(i = [0:120:359]) {\n                    rotate([0, 0, i]) \n                    translate([5, 0, 12.5]) \n                    cube([5, 1, 25], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Power cord entry\nmodule power_cord() {\n    color([0.0, 0.0, 0.0]) {\n        translate([0, 12, -35]) {\n            // Cord housing\n            cylinder(h=15, r1=6, r2=4, $fn=16);\n            \n            // Strain relief grooves\n            for(i = [0:3:12]) {\n                translate([0, 0, i]) \n                cylinder(h=1, r=5, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 25]) rotate([0, 90, 0]) {\n    color([0.8, 0.8, 0.8]) gluegun();\n    handle();\n    translate([0, 0, 45]) nozzle();\n    trigger();\n    glue_holder();\n    power_cord();\n}",
    "renders": true
  },
  {
    "tool": "blower",
    "openscad_code": "// Realistic 3D Printable Blower Tool\n// Medium complexity model with functional details\n\n$fn = 36;\n\nmodule blower_body() {\n    difference() {\n        // Main body shell\n        union() {\n            // Cylindrical motor housing\n            cylinder(h = 40, d = 35);\n            // Tapered nozzle\n            translate([0, 0, 40])\n                cylinder(h1 = 35, h2 = 25, d1 = 35, d2 = 20);\n        }\n        \n        // Motor cooling vents\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([17.5, 0, 15])\n                    cube([2, 3, 20], center = true);\n        }\n        \n        // Air intake\n        translate([0, 0, -1])\n            cylinder(h = 5, d = 25);\n    }\n}\n\nmodule handle() {\n    // Main grip\n    translate([-20, -25, 20])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 50, d = 22);\n                \n                // Grip texture grooves\n                for(i = [5:5:45]) {\n                    translate([0, 0, i])\n                        rotate([0, 0, 0])\n                            cube([21, 2, 1], center = true);\n                }\n            }\n    \n    // Trigger housing\n    translate([-20, -30, 20])\n        cube([15, 10, 25], center = true);\n    \n    // Trigger\n    translate([-20, -35, 25])\n        cube([8, 5, 15], center = true);\n}\n\nmodule impeller() {\n    // Central hub\n    color(\"silver\")\n    translate([0, 0, 2])\n        cylinder(h = 5, d = 8);\n    \n    // Blades (6 curved blades)\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([8, 0, 2.5])\n                rotate([0, 0, 15])\n                    scale([1, 0.3, 1])\n                        cube([10, 2, 3], center = true);\n    }\n}\n\nmodule air_outlet() {\n    // Rectangular outlet\n    translate([0, 0, 75])\n        rotate([0, 0, 0])\n            difference() {\n                cube([20, 8, 15], center = true);\n                \n                // Flow straightener vanes\n                for(i = [-6:3:6]) {\n                    translate([i, 0, 0])\n                        cube([0.5, 8, 15], center = true);\n                }\n            }\n}\n\nmodule mounting_bracket() {\n    // Top handle mount\n    translate([0, 0, 50])\n        cube([30, 5, 8], center = true);\n    \n    // Side supports\n    translate([12, -2.5, 55])\n        cube([5, 5, 15]);\n    translate([-12, -2.5, 55])\n        cube([5, 5, 15]);\n}\n\n// Assembly\ncolor(\"darkblue\")\nblower_body();\n\ncolor(\"black\")\nhandle();\n\n// Transparent motor section to show impeller\n%color(\"lightgray\", 0.3)\ntranslate([0, 0, 0])\n    cylinder(h = 40, d = 35);\n\ncolor(\"silver\")\nimpeller();\n\ncolor(\"gray\")\nair_outlet();\n\ncolor(\"black\")\nmounting_bracket();",
    "renders": true
  },
  {
    "tool": "vacuum",
    "openscad_code": "// Handheld Vacuum Cleaner - Realistic Style, Medium Complexity\n// All dimensions in mm, no support needed for FDM printing\n\nmodule handle_grip() {\n    // Ergonomic grip with ribbed texture\n    color(\"dimgray\")\n    difference() {\n        cylinder(h=80, d=20, $fn=32);\n        // Grip grooves\n        for(i=[-30:10:30]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=22, $fn=32);\n        }\n    }\n}\n\nmodule vacuum_body() {\n    // Main cylindrical body housing motor and dust container\n    color(\"firebrick\")\n    union() {\n        // Dust container\n        cylinder(h=60, d=45, $fn=48);\n        \n        // Motor housing top\n        translate([0, 0, 60])\n            cylinder(h=25, d=40, $fn=48);\n            \n        // Exhaust vents\n        for(angle=[0:45:315]) {\n            rotate([0, 0, angle])\n                translate([22, 0, 70])\n                    cube([8, 2, 15], center=true);\n        }\n    }\n}\n\nmodule intake_nozzle() {\n    // Tapered intake nozzle for suction\n    color(\"silver\")\n    union() {\n        // Main nozzle\n        cylinder(h1=30, h2=20, r1=10, r2=15, $fn=24);\n        \n        // Beveled edge\n        translate([0, 0, -1])\n            cylinder(h1=2, h2=1, r1=16, r2=15, $fn=24);\n    }\n}\n\nmodule power_button() {\n    // Rubberized power button\n    color(\"black\")\n    translate([-20, 0, 70])\n        difference() {\n            cylinder(h=5, d=12, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=7, d=8, $fn=32);\n        }\n}\n\nmodule charging_port() {\n    // Micro-USB charging port\n    color(\"gray20\")\n    translate([20, 0, 50])\n        cube([8, 6, 4], center=true);\n}\n\nmodule filter_mesh() {\n    // HEPA filter visible through grille\n    color(\"lightgray\")\n    difference() {\n        cylinder(h=2, d=35, $fn=48);\n        // Grille pattern\n        for(i=[-15:5:15]) {\n            translate([0, i, 0])\n                cube([40, 1, 3], center=true);\n            translate([i, 0, 0])\n                cube([1, 40, 3], center=true);\n        }\n    }\n}\n\nmodule wheels() {\n    // Small wheels for floor contact\n    color(\"darkgray\")\n    for(side=[-1, 1]) {\n        translate([side*25, 0, -3])\n            rotate([90, 0, 0])\n                cylinder(h=6, d=8, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Main assembly\n    translate([0, 0, 10])\n        vacuum_body();\n    \n    // Handle attached at 45Â° angle\n    translate([0, -25, 60])\n        rotate([45, 0, 0])\n            handle_grip();\n    \n    // Intake nozzle\n    translate([0, 0, -20])\n        intake_nozzle();\n    \n    // Filter visible at back\n    translate([0, 0, 10])\n        filter_mesh();\n    \n    // Controls and ports\n    power_button();\n    charging_port();\n    \n    // Support wheels\n    translate([0, 0, 0])\n        wheels();\n}\n\n// LED indicator light\ncolor(\"green\")\ntranslate([-22, 0, 72])\n    sphere(d=3, $fn=16);",
    "renders": true
  },
  {
    "tool": "compressor",
    "openscad_code": "// Compressor Tool - Medium Complexity Realistic Style\n// 3D Printable Air Compressor Model (~80mm length)\n\n// Colors\n$fn = 50;\n\nmodule compressor_body() {\n    color(\"darkblue\") {\n        // Main tank body\n        difference() {\n            cylinder(h=60, d=35);\n            translate([0, 0, -1]) cylinder(h=62, d=31);\n        }\n        \n        // Tank end caps\n        translate([0, 0, 60]) sphere(d=35);\n        translate([0, 0, 0]) sphere(d=35);\n    }\n}\n\nmodule motor_assembly() {\n    color(\"darkgrey\") {\n        // Motor housing\n        translate([20, 0, 45]) rotate([90, 0, 0]) cylinder(h=30, d=20);\n        \n        // Motor cooling fins\n        for(i = [0:3:360]) {\n            rotate([0, 0, i]) translate([20, 0, 45]) rotate([90, 0, 0]) \n            cube([1, 25, 2], center=true);\n        }\n    }\n}\n\nmodule pressure_switch() {\n    color(\"red\") {\n        // Pressure switch box\n        translate([-20, 0, 55]) cube([15, 12, 8], center=true);\n        \n        // Pressure gauge\n        color(\"silver\") {\n            translate([-20, 7, 59]) sphere(d=8);\n            translate([-20, 7, 63]) cylinder(h=2, d=4);\n        }\n    }\n}\n\nmodule air_outlet() {\n    color(\"silver\") {\n        // Outlet pipe\n        translate([0, -20, 40]) rotate([90, 0, 0]) cylinder(h=15, d=6);\n        \n        // Quick connect fitting\n        translate([0, -35, 40]) cylinder(h=8, d=10);\n        \n        // Air hose\n        color(\"black\") {\n            translate([0, -43, 40]) rotate([0, 90, 0]) cylinder(h=20, d=4);\n        }\n    }\n}\n\nmodule base_frame() {\n    color(\"black\") {\n        // Rubber feet\n    translate([12, 12, -5]) cylinder(h=5, d=8);\n    translate([-12, 12, -5]) cylinder(h=5, d=8);\n    translate([12, -12, -5]) cylinder(h=5, d=8);\n    translate([-12, -12, -5]) cylinder(h=5, d=8);\n    \n    // Support brackets\n    color(\"silver\") {\n        translate([0, 0, -2]) cube([40, 30, 4], center=true);\n    }\n    }\n}\n\nmodule handle() {\n    color(\"red\") {\n        // Handle grip\n        translate([0, 25, 70]) rotate([45, 0, 0]) cylinder(h=30, d=12);\n        \n        // Handle supports\n        translate([8, 18, 60]) rotate([0, -45, 0]) cylinder(h=15, d=5);\n        translate([-8, 18, 60]) rotate([0, -45, 0]) cylinder(h=15, d=5);\n    }\n}\n\nmodule power_cord() {\n    color(\"black\") {\n        // Power cord\n        translate([25, -8, 30]) rotate([0, 90, 45]) cylinder(h=30, d=3);\n        translate([40, -23, 30]) sphere(d=3);\n    }\n}\n\n// Main assembly\nunion() {\n    compressor_body();\n    motor_assembly();\n    pressure_switch();\n    air_outlet();\n    base_frame();\n    handle();\n    power_cord();\n}",
    "renders": true
  },
  {
    "tool": "nailer",
    "openscad_code": "// Nail Gun / Nailer Tool - OpenSCAD\n// Medium complexity, realistic style\n\n// Overall scale factor\nscale_factor = 0.7;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];      // Dark gray/black\ncolor_handle = [0.1, 0.1, 0.1];    // Rubber grip\ncolor_metal = [0.6, 0.6, 0.6];     // Aluminum parts\ncolor_orange = [1.0, 0.4, 0.0];    // Safety elements\n\n// Body dimensions\nbody_len = 60 * scale_factor;\nbody_height = 35 * scale_factor;\nbody_width = 25 * scale_factor;\nhandle_rad = 12 * scale_factor;\n\nmodule nailer_body() {\n    color(color_body)\n    union() {\n        // Main body block\n        translate([-body_len/2, 0, 0])\n            cube([body_len, body_width, body_height], center=true);\n        \n        // Top magazine area\n        translate([body_len/4, 0, body_height/2 + 5*scale_factor])\n            cube([body_len/2, body_width*0.8, 10*scale_factor], center=true);\n        \n        // Front nose piece\n        translate([-body_len/2 - 8*scale_factor, 0, -body_height/2 + 5*scale_factor])\n            cube([12*scale_factor, body_width*0.7, 20*scale_factor], center=true);\n    }\n}\n\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main grip cylinder\n        rotate([90, 0, 0])\n            translate([0, 0, -body_width/2 - 15*scale_factor])\n                cylinder(h=40*scale_factor, r=handle_rad, center=true);\n        \n        // Trigger guard\n        color(color_metal)\n        translate([-5*scale_factor, -body_width/2 - 10*scale_factor, -body_height/2 + 5*scale_factor])\n            cube([20*scale_factor, 5*scale_factor, 15*scale_factor]);\n        \n        // Trigger\n        color(color_orange)\n        translate([5*scale_factor, -body_width/2 - 12*scale_factor, -body_height/2 + 10*scale_factor])\n            cube([8*scale_factor, 2*scale_factor, 8*scale_factor]);\n    }\n}\n\nmodule magazine() {\n    color(color_metal)\n    difference() {\n        // Main magazine rail\n        translate([body_len/4, 0, body_height/2 + 10*scale_factor])\n            cube([body_len/2 + 10*scale_factor, body_width*0.6, 8*scale_factor], center=true);\n        \n        // Nail slot channel\n        translate([body_len/4, 0, body_height/2 + 10*scale_factor])\n            cube([body_len/2 + 5*scale_factor, body_width*0.3, 9*scale_factor], center=true);\n    }\n}\n\nmodule exhaust_deflector() {\n    color(color_metal)\n    rotate([0, -30, 0])\n        translate([body_len/2 - 5*scale_factor, 0, body_height/4])\n            cylinder(h=15*scale_factor, r1=8*scale_factor, r2=6*scale_factor);\n}\n\nmodule grip_texture() {\n    color(color_handle)\n    for(i = [-3:3]) {\n        translate([0, -body_width/2 - 15*scale_factor, i*5*scale_factor])\n            rotate([90, 0, 0])\n                cylinder(h=40*scale_factor, r=handle_rad + 1, center=true);\n    }\n}\n\nmodule nozzle() {\n    color(color_metal)\n    translate([-body_len/2 - 14*scale_factor, 0, -body_height/2 + 5*scale_factor])\n        cylinder(h=8*scale_factor, r1=4*scale_factor, r2=3*scale_factor);\n}\n\n// Assembly\nunion() {\n    nailer_body();\n    handle();\n    magazine();\n    exhaust_deflector();\n    nozzle();\n    \n    // Safety tip\n    color(color_orange)\n    translate([-body_len/2 - 20*scale_factor, 0, -body_height/2 + 5*scale_factor])\n        sphere(r=3*scale_factor);\n}",
    "renders": true
  },
  {
    "tool": "stapler",
    "openscad_code": "// Realistic Stapler - Medium Complexity\n// Basic dimensions (mm)\nstapler_length = 90;\nstapler_width = 25;\nstapler_height = 35;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\nmodule base_platform() {\n    // Main base with rounded edges\n    difference() {\n        union() {\n            // Main base block\n            translate([-stapler_length/2, -stapler_width/2, 0])\n                cube([stapler_length, stapler_width, stapler_height/3]);\n            \n            // Rounded front edge\n            translate([stapler_length/2-5, 0, stapler_height/3])\n                rotate([90,0,0])\n                    cylinder(h=10, r=5, $fn=20);\n            \n            // Rounded back edge\n            translate([-stapler_length/2+5, 0, stapler_height/3])\n                rotate([90,0,0])\n                    cylinder(h=10, r=5, $fn=20);\n        }\n        \n        // Cavity for stapler mechanism\n        translate([-stapler_length/2+10, -stapler_width/2+wall_thick, wall_thick])\n            cube([stapler_length-20, stapler_width-2*wall_thick, stapler_height/3-wall_thick]);\n    }\n}\n\nmodule top_handle() {\n    // Pivot point at back\n    translate([-stapler_length/2+10, 0, stapler_height/3])\n    rotate([0, 0, 0]) {\n        // Handle body\n        difference() {\n            hull() {\n                // Front curved section\n                translate([stapler_length/2-20, 0, stapler_height/1.5])\n                    sphere(r=8, $fn=20);\n                // Back straight section\n                translate([-stapler_length/2+20, 0, stapler_height/1.5])\n                    sphere(r=8, $fn=20);\n            }\n            \n            // Grip cavity\n            translate([-stapler_length/2+25, -stapler_width/2+5, stapler_height/2])\n                cube([stapler_length-50, stapler_width-10, stapler_height/2]);\n        }\n        \n        // Rubber grip pattern\n        for(i = [-1:1]) {\n            translate([0, i*6, stapler_height/2+2])\n                cube([stapler_length-30, 2, 1]);\n        }\n    }\n}\n\nmodule staple_magazine() {\n    // Magazine rail\n    translate([-stapler_length/2+15, -stapler_width/2+3, stapler_height/3])\n        cube([stapler_length-30, stapler_width-6, 3]);\n    \n    // Magazine cover\n    translate([-stapler_length/2+15, -stapler_width/2+2, stapler_height/3+3])\n        cube([stapler_length-30, stapler_width-4, 2]);\n    \n    // Staple pusher spring mechanism\n    translate([stapler_length/2-25, 0, stapler_height/3+1])\n        cube([5, 2, 2]);\n}\n\nmodule pivot_hinge() {\n    // Main pivot rod\n    translate([-stapler_length/2+10, 0, stapler_height/3])\n        rotate([90,0,0])\n            cylinder(h=stapler_width, r=3, $fn=20);\n    \n    // Support brackets\n    for(side = [-1, 1]) {\n        translate([-stapler_length/2+10, side*stapler_width/2, stapler_height/3])\n            cube([wall_thick*2, wall_thick, 6]);\n    }\n}\n\nmodule anvil() {\n    // Metal anvil plate\n    color(\"silver\")\n    translate([stapler_length/2-15, -stapler_width/2, 0])\n        cube([10, stapler_width, 1]);\n    \n    // Grooves for staple bending\n    translate([stapler_length/2-10, -stapler_width/4, -0.1])\n        cube([1, stapler_width/2, 0.2]);\n    translate([stapler_length/2-10, 0, -0.1])\n        cube([1, stapler_width/4, 0.2]);\n}\n\n// Assembly\ncolor(\"darkgray\") base_platform();\ncolor(\"black\") top_handle();\ncolor(\"silver\") pivot_hinge();\ncolor(\"gray\") staple_magazine();\nanvil();\n\n// Non-slip feet\nfor(x = [-stapler_length/3, stapler_length/3]) {\n    for(y = [-stapler_width/3, stapler_width/3]) {\n        translate([x, y, -1])\n            cylinder(h=1, r=2, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "tool": "sprayer",
    "openscad_code": "// Handheld Trigger Sprayer - Realistic Style, Medium Complexity\n// Overall size: ~80mm tall, ~40mm wide, ~60mm deep\n\n$fn = 32;\n\n// Main body color\ncolor([0.2, 0.2, 0.2]) \nunion() {\n    // Main reservoir tank\n    difference() {\n        cylinder(h = 70, d = 38, center = false);\n        translate([0, 0, 2])\n        cylinder(h = 68, d = 34, center = false);\n    }\n\n    // Tank bottom cap\n    translate([0, 0, -2])\n    cylinder(h = 4, d = 42, center = false);\n\n    // Neck threads\n    translate([0, 0, 70])\n    union() {\n        cylinder(h = 10, d = 30, center = false);\n        for(i = [0:5:35]) {\n            translate([0, 0, 70 + i])\n            cylinder(h = 3, d1 = 30, d2 = 32, center = false);\n        }\n    }\n\n    // Pump housing (top)\n    translate([0, 0, 80])\n    difference() {\n        union() {\n            cylinder(h = 25, d = 30, center = false);\n            translate([-15, 0, 15])\n            cube([30, 20, 10], center = false);\n        }\n        translate([0, 0, 5])\n        cylinder(h = 25, d = 26, center = false);\n    }\n\n    // Trigger guard\n    color([0.1, 0.1, 0.1])\n    translate([-20, -10, 85])\n    difference() {\n        cube([40, 20, 15], center = false);\n        translate([2, 2, 2])\n        cube([36, 16, 15], center = false);\n    }\n\n    // Trigger\n    color([0.4, 0.4, 0.4])\n    translate([-18, -8, 95])\n    union() {\n        cube([8, 4, 20], center = false);\n        translate([0, 0, 18])\n        cube([14, 12, 4], center = false);\n    }\n\n    // Nozzle assembly\n    color([0.3, 0.3, 0.3])\n    translate([15, 0, 95])\n    union() {\n        // Nozzle base\n        cylinder(h = 15, d = 12, center = false);\n        \n        // Nozzle tip\n        color([0.5, 0.5, 0.5])\n        translate([0, 0, 15])\n        cylinder(h = 8, d1 = 12, d2 = 8, center = false);\n        \n        // Spray hole\n        color([0, 0, 0])\n        translate([0, 0, 22])\n        cylinder(h = 2, d = 2, center = false);\n    }\n\n    // Handle grip\n    color([0.15, 0.15, 0.15])\n    translate([0, -20, 40])\n    difference() {\n        // Main grip body\n        cylinder(h = 30, d = 25, center = true);\n        \n        // Grip hole\n        translate([0, 0, 0])\n        cylinder(h = 32, d = 20, center = true);\n    }\n\n    // Grip texture rings\n    color([0.1, 0.1, 0.1])\n    for(i = [-10:5:10]) {\n        translate([0, -20, 40 + i])\n        cylinder(h = 2, d = 25.5, center = true);\n    }\n\n    // Pump rod (visible through housing)\n    color([0.6, 0.6, 0.6])\n    translate([0, 0, 85])\n    cylinder(h = 20, d = 4, center = false);\n\n    // Air vent holes\n    color([0, 0, 0])\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([17, 0, 35])\n        cylinder(h = 3, d = 2, center = false);\n    }\n\n    // Label area\n    color([0.4, 0.4, 0.4])\n    translate([19, 0, 35])\n    cube([0.5, 30, 20], center = true);\n\n    // Reinforcement ribs\n    color([0.15, 0.15, 0.15])\n    for(i = [0:90:270]) {\n        rotate([0, 0, i])\n        translate([0, 0, 20])\n        cube([38, 2, 40], center = true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "pressurewasher",
    "openscad_code": "// Pressure Washer Gun with Hose Connector\n// Medium complexity realistic model\n\n$fn = 50;\n\nmodule handle() {\n    // Main handle grip\n    difference() {\n        union() {\n            // Handle body\n            color(\"gray\") \n            translate([0, 0, 25])\n            rotate([90, 0, 0])\n            cylinder(h=60, d1=25, d2=22);\n            \n            // Trigger guard\n            color(\"darkgray\")\n            translate([0, -30, 25])\n            rotate([90, 0, 0])\n            cylinder(h=40, d=5);\n            translate([0, 30, 25])\n            rotate([90, 0, 0])\n            cylinder(h=40, d=5);\n            translate([0, 0, 5])\n            rotate([90, 0, 0])\n            cube([60, 65, 5], center=true);\n        }\n        \n        // Remove trigger space\n        translate([0, 0, 25])\n        rotate([90, 0, 0])\n        cube([65, 45, 15], center=true);\n    }\n    \n    // Grip texture rings\n    for(i = [-25:10:25]) {\n        color(\"black\")\n        translate([0, i, 25])\n        rotate([90, 0, 0])\n        cylinder(h=2, d=24);\n    }\n}\n\nmodule trigger() {\n    color(\"red\")\n    translate([0, 0, 15])\n    rotate([10, 0, 0])\n    cube([10, 35, 20], center=true);\n    \n    // Trigger pivot\n    color(\"gray\")\n    translate([0, 0, 10])\n    rotate([90, 0, 0])\n    cylinder(h=40, d=6);\n}\n\nmodule main_body() {\n    // Main body housing\n    color(\"darkgray\")\n    difference() {\n        union() {\n            // Main cylinder\n            translate([0, 0, 55])\n            cylinder(h=50, d=35);\n            \n            // Front nozzle mount\n            translate([0, 0, 80])\n            cylinder(h=20, d=28);\n            \n            // Rear connector\n            translate([0, 0, 30])\n            cylinder(h=20, d=32);\n        }\n        \n        // Internal bore\n        translate([0, 0, 20])\n        cylinder(h=90, d=15);\n    }\n    \n    // Safety lock button\n    color(\"yellow\")\n    translate([15, 0, 65])\n    cylinder(h=5, d=8);\n}\n\nmodule nozzle() {\n    // Quick-connect nozzle\n    color(\"yellow\")\n    translate([0, 0, 95])\n    cylinder(h=15, d=20);\n    \n    // Nozzle tip\n    color(\"silver\")\n    translate([0, 0, 105])\n    cylinder(h=10, d=8);\n    \n    // Spray adjustment ring\n    color(\"blue\")\n    translate([0, 0, 100])\n    cylinder(h=5, d=22);\n    \n    // Grip knurls\n    for(i = [0:30:330]) {\n        color(\"black\")\n        translate([0, 0, 97])\n        rotate([0, 0, i])\n        translate([10, 0, 0])\n        cube([2, 1, 6]);\n    }\n}\n\nmodule hose_connector() {\n    // Quick-connect hose fitting\n    color(\"black\")\n    translate([0, 0, 15])\n    cylinder(h=15, d=25);\n    \n    // Hose barb\n    color(\"gray\")\n    translate([0, 0, 5])\n    cylinder(h=15, d=18);\n    \n    // O-ring groove\n    color(\"black\")\n    translate([0, 0, 20])\n    cylinder(h=2, d=20);\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    handle();\n    translate([0, 0, 0]) trigger();\n    translate([0, 0, 0]) main_body();\n    translate([0, 0, 0]) nozzle();\n    translate([0, 0, 0]) hose_connector();\n}",
    "renders": true
  },
  {
    "tool": "chainsaw",
    "openscad_code": "// Realistic Chainsaw - Medium Complexity\n// Overall size approx 90mm length\n\n// Main colors\n$fn = 32;\n\nmodule chainsaw() {\n    // Main body\n    color(\"darkslategray\")\n    translate([0,0,15])\n    cube([55,20,20], center=true);\n    \n    // Engine housing\n    color(\"dimgray\")\n    translate([0,0,30])\n    cube([40,25,15], center=true);\n    \n    // Handle bar\n    color(\"black\")\n    translate([0,0,45])\n    rotate([90,0,0])\n    cylinder(h=35, d=8, center=true);\n    \n    // Front handle\n    color(\"black\")\n    translate([20,0,40])\n    rotate([0,90,0])\n    cylinder(h=30, d=8, center=true);\n    \n    // Guide bar\n    color(\"silver\")\n    translate([30,0,15])\n    cube([40,4,2], center=true);\n    \n    // Chain teeth\n    for(i=[0:2:35]) {\n        translate([30+i,0,16])\n        rotate([0,90,0])\n        cylinder(h=1.5, d=2);\n    }\n    \n    // Chain links\n    color(\"lightgray\")\n    for(i=[1:2:35]) {\n        translate([30+i,0,15])\n        cube([1.5,3,1], center=true);\n    }\n    \n    // Trigger guard\n    color(\"red\")\n    translate([-10,0,40])\n    cube([15,8,5], center=true);\n    \n    // Trigger\n    color(\"black\")\n    translate([-15,0,42])\n    cube([8,4,3], center=true);\n    \n    // Fuel cap\n    color(\"darkolivegreen\")\n    translate([0,12,30])\n    cylinder(h=3, d=6);\n    \n    // Air filter cover\n    color(\"darkgreen\")\n    translate([0,-12,30])\n    cube([20,2,10], center=true);\n    \n    // Muffler\n    color(\"gray\")\n    translate([-20,10,30])\n    cube([10,8,8], center=true);\n    \n    // Starter handle\n    color(\"yellow\")\n    translate([-25,0,35])\n    rotate([0,90,0])\n    cylinder(h=15, d=3);\n    \n    // Safety brake lever\n    color(\"orange\")\n    translate([20,15,42])\n    cube([8,2,10], center=true);\n    \n    // Bar cover\n    color(\"slategray\")\n    translate([30,0,10])\n    cube([35,6,1], center=true);\n}\n\nchainsaw();",
    "renders": true
  },
  {
    "tool": "trimmer",
    "openscad_code": "// Realistic Medium-Complexity Trimmer Tool\n// A handheld beard trimmer with body, guard, blades and controls\n\n// Main parameters\n$fn = 32;\nbody_len = 80;\nbody_width = 30;\nbody_height = 22;\nblade_width = 35;\nblade_height = 8;\nguard_height = 15;\n\nmodule trimmer_body() {\n    // Main shell\n    difference() {\n        hull() {\n            // Tapered main body\n            translate([0, 0, body_height/2])\n                scale([1, 0.8, 1])\n                    cube([body_len, body_width, body_height], center=true);\n            // Front nose\n            translate([body_len/2 - 5, 0, body_height/2])\n                sphere(d=body_width*0.9);\n        }\n        \n        // Battery compartment cavity\n        translate([0, 0, body_height/2 - 2])\n            cube([body_len - 20, body_width - 8, body_height - 4], center=true);\n    }\n}\n\nmodule grip_pattern() {\n    // Rubber grip texture with vertical grooves\n    for (i = [-10:2:10]) {\n        translate([i, body_width/2 - 1, body_height/2 - 3])\n            cube([1.5, 2, body_height - 6]);\n    }\n}\n\nmodule power_button() {\n    // Rounded power button\n    translate([-body_len/2 + 15, 0, body_height/2 + 2])\n        color(\"silver\")\n        rotate([90, 0, 0])\n            cylinder(h=4, d1=8, d2=10);\n}\n\nmodule blade_assembly() {\n    // Metal blade housing\n    translate([body_len/2 - 5, 0, body_height/2 + 5])\n        color(\"silver\")\n        difference() {\n            cube([20, blade_width, blade_height], center=true);\n            // Blade slots\n            for (i = [-blade_width/2 + 2 : 2.5 : blade_width/2 - 2]) {\n                translate([body_len/2 - 5, i, body_height/2 + 5])\n                    cube([0.3, 1, blade_height - 2], center=true);\n            }\n        }\n    \n    // Cutting blades\n    translate([body_len/2 - 3, 0, body_height/2 + blade_height/2 + 2])\n        color(\"lightgray\")\n        cube([5, blade_width - 4, 0.5], center=true);\n}\n\nmodule adjustable_guard() {\n    // Detachable plastic guard\n    translate([body_len/2 - 5, 0, body_height/2 - 5])\n        color(\"black\")\n        difference() {\n            // Main guard body\n            cube([25, blade_width + 6, guard_height], center=true);\n            \n            // Blade opening\n            translate([body_len/2 - 5, 0, body_height/2 + 5])\n                cube([30, blade_width + 2, blade_height + 2], center=true);\n                \n            // Adjustment teeth\n            for (i = [-blade_width/2 : 2 : blade_width/2]) {\n                translate([body_len/2 + 5, i, body_height/2 - 5])\n                    cube([2, 1, 5]);\n            }\n        }\n}\n\nmodule charging_port() {\n    // Micro-USB port\n    translate([-body_len/2 + 5, 0, body_height/2 - 8])\n        color(\"black\")\n        cube([6, 8, 3], center=true);\n}\n\nmodule led_indicator() {\n    // Power LED\n    translate([-body_len/2 + 25, body_width/2 - 3, body_height/2 + 2])\n        color(\"lime\")\n        sphere(d=3);\n}\n\n// Main assembly\ncolor(\"darkslategray\") trimmer_body();\ncolor(\"darkgray\") grip_pattern();\npower_button();\nblade_assembly();\nadjustable_guard();\ncharging_port();\nled_indicator();",
    "renders": true
  },
  {
    "tool": "edger",
    "openscad_code": "// Edger Tool - Realistic Style, Medium Complexity\n// Lawn edger for clean garden borders\n\n// Overall dimensions\ntool_length = 85;\ntool_height = 35;\nhandle_diameter = 12;\n\n// Colors\nhandle_color = \"DarkKhaki\";\nblade_color = \"Silver\";\ngrip_color = \"DarkGreen\";\n\n// Main handle tube\nmodule handle_bar() {\n    color(handle_color)\n    difference() {\n        cylinder(h=tool_length, d=handle_diameter, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=tool_length+2, d=handle_diameter-4, $fn=32);\n    }\n}\n\n// Handle grip with texture\nmodule handle_grip() {\n    color(grip_color)\n    difference() {\n        // Main grip body\n        translate([0, 0, 15])\n            cylinder(h=25, d=handle_diameter+4, $fn=32);\n        \n        // Grip grooves\n        for(i = [1:5]) {\n            rotate([0, 0, i*36])\n                translate([handle_diameter/2+2, 0, 17+i*4])\n                    cube([handle_diameter/2, 1, 2], center=true);\n        }\n    }\n}\n\n// Blade support bracket\nmodule blade_bracket() {\n    color(handle_color)\n    union() {\n        // Main bracket\n        translate([0, 0, -8])\n            cube([8, 16, 16], center=true);\n        \n        // Reinforcement ribs\n        translate([0, 8, 0])\n            cube([4, 2, 12], center=true);\n        translate([0, -8, 0])\n            cube([4, 2, 12], center=true);\n    }\n}\n\n// Cutting blade\nmodule blade() {\n    color(blade_color)\n    difference() {\n        // Main blade shape\n        translate([0, 0, -20])\n            cube([1.5, 25, 40], center=true);\n        \n        // Blade edge bevel\n        translate([0.75, -15, -20])\n            cube([1.5, 5, 40], center=true);\n        \n        // Cutting teeth\n        for(i = [0:4]) {\n            translate([-0.75, -12+i*5, -35-i*2])\n                cube([1.5, 3, 2], center=true);\n        }\n    }\n}\n\n// Foot step plate\nmodule foot_plate() {\n    color(handle_color)\n    union() {\n        // Main plate\n        translate([0, 0, -25])\n            cube([20, 8, 2], center=true);\n        \n        // Traction pattern\n        for(x = [-7:7]) {\n            translate([x, 0, -24])\n                cube([0.5, 7, 0.5], center=true);\n        }\n    }\n}\n\n// Assembly\nmodule edger_tool() {\n    // Handle assembly\n    union() {\n        handle_bar();\n        handle_grip();\n        \n        // Blade assembly at end\n        translate([0, 0, -tool_length/2])\n            rotate([90, 0, 0])\n                union() {\n                    blade_bracket();\n                    blade();\n                    foot_plate();\n                }\n    }\n}\n\n// Render the complete tool\nedger_tool();",
    "renders": true
  },
  {
    "tool": "tiller",
    "openscad_code": "// Tiller Tool - OpenSCAD\n// Medium complexity realistic garden tiller\n\n// Color definitions\n$fn = 50;\n\n// Main module\nmodule tiller() {\n    // Handle assembly\n    union() {\n        // Main handle grip\n        translate([0, 0, 120]) {\n            color(\"darkgreen\")\n            cylinder(h=80, d=25, $fn=6);\n        }\n        \n        // Handle shaft\n        translate([0, 0, 60]) {\n            color(\"gray\")\n            cylinder(h=60, d=15);\n        }\n        \n        // Cross handle\n        translate([0, 0, 160]) {\n            rotate([90, 0, 0]) {\n                color(\"darkgreen\")\n                cylinder(h=60, d=20, $fn=6);\n            }\n        }\n        \n        // Shaft reinforcement\n        translate([0, 0, 60]) {\n            color(\"darkgray\")\n            cylinder(h=15, d=25);\n        }\n    }\n    \n    // Main body frame\n    translate([0, 0, 30]) {\n        color(\"red\")\n        difference() {\n            // Main frame\n            union() {\n                cube([40, 15, 60], center=true);\n                translate([0, 0, -25])\n                cube([35, 12, 20], center=true);\n            }\n            \n            // Mounting holes\n            translate([12, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=6);\n            \n            translate([-12, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=6);\n        }\n    }\n    \n    // Tine wheel assembly\n    translate([0, 0, 0]) {\n        color(\"darkgray\")\n        difference() {\n            // Wheel hub\n            cylinder(h=25, d=30);\n            \n            // Central hole\n            translate([0, 0, -1])\n            cylinder(h=27, d=10);\n        }\n        \n        // Tines - arranged radially\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([20, 0, 12.5]) {\n                    color(\"lightgray\")\n                    rotate([0, 90, 0]) {\n                        difference() {\n                            cylinder(h=25, d=6);\n                            // Tine point\n                            translate([0, 0, 20])\n                            cylinder(h=10, d=4);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Spacer ring\n        translate([0, 0, -5]) {\n            color(\"gray\")\n            cylinder(h=5, d=35);\n        }\n    }\n    \n    // Depth adjustment bar\n    translate([0, -30, -10]) {\n        color(\"darkgray\")\n        union() {\n            // Main bar\n            cube([60, 5, 8], center=true);\n            \n            // Adjustment holes\n            for(i = [-20:10:20]) {\n                translate([i, 0, 0])\n                cylinder(h=6, d=4);\n            }\n            \n            // Skid plate\n            translate([0, -15, -8])\n            cube([50, 15, 3], center=true);\n        }\n    }\n    \n    // Support brackets\n    translate([15, 8, 15]) {\n        color(\"red\")\n        rotate([0, 45, 0])\n        cube([8, 8, 25]);\n    }\n    \n    translate([-15, 8, 15]) {\n        color(\"red\")\n        rotate([0, -45, 0])\n        cube([8, 8, 25]);\n    }\n}\n\n// Render the tiller\ntiller();",
    "renders": true
  },
  {
    "tool": "cultivator",
    "openscad_code": "// Garden hand cultivator â€“ medium complexity, printable, realistic\n// Overall length â‰ˆ 80 mm, width â‰ˆ 30 mm\n\n$fn = 30;\n\n// Colors\ncolorHandle = \"tan\";\ncolorMetal  = \"silver\";\n\n// ---------- Main assembly ----------\nunion() {\n    // Wooden handle\n    color(colorHandle)\n    handle();\n\n    // Steel shank\n    color(colorMetal)\n    shank();\n\n    // Fork head with three tines\n    color(colorMetal)\n    forkHead();\n}\n\n// ---------- Modules ----------\nmodule handle() {\n    // Real wood-like grip with shallow rings\n    difference() {\n        // Main handle body\n        translate([0, 0, 60])\n            rotate([90, 0, 0])\n                cylinder(h = 40, d1 = 14, d2 = 12, center = true);\n\n        // Grip rings\n        for (i = [0:1:3]) {\n            translate([0, 0, 60 - 8 + i * 6])\n                rotate([90, 0, 0])\n                    cylinder(h = 2.5, d = 15.5, center = true);\n        }\n    }\n\n    // End cap\n    translate([0, 0, 40])\n        rotate([90, 0, 0])\n            cylinder(h = 6, d = 12.5, center = true);\n}\n\nmodule shank() {\n    // Smooth steel rod\n    translate([0, 0, 35])\n        rotate([90, 0, 0])\n            cylinder(h = 40, d = 6, center = true);\n}\n\nmodule forkHead() {\n    // Arched base plate\n    difference() {\n        translate([0, 0, 12])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 22, d2 = 18, center = true);\n\n        // Lightening hole from below\n        translate([0, 0, 8])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 4, center = true);\n    }\n\n    // Three straight tines\n    for (x = [-8, 0, 8]) {\n        translate([x, 0, 0])\n            tine();\n    }\n}\n\nmodule tine() {\n    // Straight shaft\n    linear_extrude(height = 22, center = true, scale = [1, 0.3])\n        circle(d = 4.5);\n\n    // Pointed tip via scaled sphere\n    translate([0, 0, -11])\n        scale([1, 0.3, 1])\n            sphere(d = 4.5);\n}",
    "renders": true
  },
  {
    "tool": "auger",
    "openscad_code": "// Auger tool - realistic style, medium complexity\n// 3D printable hand auger for drilling holes in soil\n\n// Overall dimensions (mm)\n$fn = 32;  // Smooth curves\nshaft_length = 80;\nshaft_diameter = 12;\nhandle_length = 70;\nhandle_diameter = 18;\nblade_height = 25;\nblade_diameter = 30;\n\n// Main shaft module\nmodule shaft() {\n    color([0.8, 0.8, 0.8])  // Metallic gray\n    \n    // Central shaft tube\n    difference() {\n        cylinder(h=shaft_length, d=shaft_diameter, center=false);\n        \n        // Hollow shaft for weight reduction\n        translate([0, 0, 5])\n            cylinder(h=shaft_length-10, d=shaft_diameter-4, center=false);\n    }\n    \n    // Reinforcement rings\n    for(i=[1:15]) {\n        translate([0, 0, i*5])\n            difference() {\n                cylinder(h=2, d=shaft_diameter+2, center=false);\n                cylinder(h=2, d=shaft_diameter, center=false);\n            }\n    }\n}\n\n// T-handle for turning\nmodule handle() {\n    color([0.2, 0.2, 0.2])  // Dark grip\n    \n    // Main crossbar\n    rotate([0, 90, 0])\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n            cylinder(h=handle_length+2, d=handle_diameter-6, center=true);\n        }\n    \n    // Grip ends\n    translate([handle_length/2-5, 0, 0])\n        rotate([0, 90, 0])\n            sphere(d=handle_diameter+4);\n    translate([-handle_length/2+5, 0, 0])\n        rotate([0, 90, 0])\n            sphere(d=handle_diameter+4);\n    \n    // Grip texture rings\n    for(i=[-30:5:30]) {\n        translate([i, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=2, d=handle_diameter+2, center=true);\n    }\n}\n\n// Cutting blade spiral\nmodule blade() {\n    color([0.9, 0.9, 0.9])  // Sharp steel\n    \n    // Create spiral cutting edge\n    for(angle=[0:30:360*2]) {\n        translate([0, 0, angle/20])\n            rotate([0, 0, angle])\n                translate([blade_diameter/2-5, 0, 0])\n                    cube([10, 5, 2], center=true);\n    }\n    \n    // Central point\n    translate([0, 0, -5])\n        cylinder(h=10, d1=3, d2=0, center=false);\n    \n    // Cutting edges\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([blade_diameter/2-8, 0, blade_height/2])\n                cube([16, 3, blade_height], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, shaft_length])\n    handle();\n\ntranslate([0, 0, 0])\n    shaft();\n\ntranslate([0, 0, -blade_height-5])\n    blade();\n\n// Connection joint\ntranslate([0, 0, shaft_length-handle_diameter/2])\n    difference() {\n        cylinder(h=handle_diameter, d=shaft_diameter+8, center=true);\n        cylinder(h=handle_diameter+2, d=shaft_diameter, center=true);\n    }",
    "renders": true
  },
  {
    "tool": "breaker",
    "openscad_code": "// Circuit Breaker Tool - Realistic Style, Medium Complexity\n// 3D printable breaker with handle, lever, and terminals\n\n// Main dimensions (in mm)\nhandle_len = 60;\nhandle_d = 15;\nlever_len = 25;\nlever_w = 5;\nbody_w = 22;\nbody_h = 30;\nbody_d = 15;\nterminal_w = 6;\nterminal_h = 8;\nterminal_d = 10;\n\n// Colors\nhandle_color = \"darkslategray\";\nbody_color = \"black\";\nlever_color = \"red\";\nterminal_color = \"gold\";\n\n// Handle grip texture module\nmodule grip_texture() {\n    difference() {\n        cylinder(h=handle_len, d=handle_d, $fn=32);\n        // Grip grooves\n        for(i = [0:5:handle_len-5]) {\n            translate([0, 0, i])\n                rotate([0, 90, 0])\n                    cylinder(h=handle_d+2, d=2, center=true, $fn=16);\n        }\n    }\n}\n\n// Main breaker body\nmodule breaker_body() {\n    union() {\n        // Main rectangular body\n        color(body_color)\n            cube([body_w, body_d, body_h], center=true);\n        \n        // Top mounting rail\n        translate([0, -body_d/2-2, body_h/2-2])\n            cube([body_w, 2, 4], center=true);\n        \n        // Bottom mounting rail\n        translate([0, body_d/2+2, body_h/2-2])\n            cube([body_w, 2, 4], center=true);\n        \n        // Rating label indentation\n        translate([0, 0, body_h/2-1])\n            cube([12, 8, 0.5], center=true);\n    }\n}\n\n// Lever mechanism\nmodule breaker_lever() {\n    color(lever_color) {\n        // Pivot base\n        translate([-body_w/2-3, 0, body_h/2+3])\n            rotate([0, 90, 0])\n                cylinder(h=lever_w, d=lever_w*2, $fn=20);\n        \n        // Lever arm\n        translate([-body_w/2-lever_len, 0, body_h/2+3])\n            rotate([0, 0, 90])\n                cube([lever_len, lever_w, lever_w*2], center=true);\n        \n        // Lever handle\n        translate([-body_w/2-lever_len-lever_w, 0, body_h/2+3])\n            sphere(d=lever_w*2, $fn=16);\n    }\n}\n\n// Terminal connections\nmodule terminals() {\n    color(terminal_color) {\n        // Top terminal\n        translate([0, 0, body_h/2+terminal_h/2])\n            cube([terminal_w, terminal_d, terminal_h], center=true);\n        \n        // Bottom terminal\n        translate([0, 0, -body_h/2-terminal_h/2])\n            cube([terminal_w, terminal_d, terminal_h], center=true);\n        \n        // Terminal screws\n        translate([terminal_w/2, 0, body_h/2+terminal_h])\n            cylinder(h=3, d=2, $fn=8);\n        \n        translate([terminal_w/2, 0, -body_h/2-terminal_h-3])\n            cylinder(h=3, d=2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([body_w/2+handle_len/2+5, 0, 0])\n        rotate([0, 90, 0])\n            color(handle_color)\n                grip_texture();\n    \n    // Main body\n    breaker_body();\n    \n    // Lever\n    breaker_lever();\n    \n    // Terminals\n    terminals();\n    \n    // Small indicator window\n    translate([body_w/2-3, body_d/2-1, body_h/2-5])\n        color(\"green\")\n            cube([4, 0.5, 3]);\n}",
    "renders": true
  },
  {
    "tool": "demolitionhammer",
    "openscad_code": "// Demolition Hammer - Realistic Style, Medium Complexity\n// Dimensions: ~85mm length, 25mm width, 35mm height\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];        // Dark grey body\ncolor_handle = [0.1, 0.1, 0.1];      // Black handle\ncolor_metal = [0.7, 0.7, 0.7];       // Silver metal\ncolor_accents = [0.9, 0.2, 0.1];     // Red safety switch\n\n// Main module\nmodule demolition_hammer() {\n    // Main body/housing\n    color(color_body)\n    translate([0, 0, 15])\n    difference() {\n        cube([45, 25, 30], center=true);\n        \n        // Cooling vents\n        for(i = [-15:7:15]) {\n            translate([i, 12.5, 0])\n            rotate([90, 0, 0])\n            cylinder(h=2, r1=2, r2=1.5, center=true);\n        }\n    }\n    \n    // Motor housing (cylindrical part)\n    color(color_body)\n    translate([-25, 0, 15])\n    rotate([0, 90, 0])\n    cylinder(h=30, r=12.5, center=true);\n    \n    // Handle grip\n    color(color_handle)\n    translate([-12, 0, 35])\n    difference() {\n        cylinder(h=25, r=6, center=true);\n        \n        // Grip texture\n        for(i = [-10:2:10]) {\n            translate([0, 0, i])\n            rotate([0, 0, 45])\n            cube([8, 8, 1], center=true);\n        }\n    }\n    \n    // Side handle\n    color(color_handle)\n    translate([0, 15, 20])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=20, r=4, center=true);\n        \n        // Texture rings\n        for(i = [-8:3:8]) {\n            translate([0, 0, i])\n            cylinder(h=0.5, r=4.5, center=true);\n        }\n    }\n    \n    // Power cord\n    color(color_handle)\n    translate([-40, 0, 15])\n    rotate([0, 90, 0])\n    cylinder(h=20, r=3, center=true);\n    \n    // Bit holder/chuck\n    color(color_metal)\n    translate([22.5, 0, 15])\n    cylinder(h=15, r=8, center=true);\n    \n    // Chuck locking mechanism\n    color(color_metal)\n    translate([30, 0, 15])\n    difference() {\n        cylinder(h=8, r=6, center=true);\n        \n        // Hexagonal pattern\n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([4, 0, 0])\n            cube([3, 1, 8], center=true);\n        }\n    }\n    \n    // Chisel bit\n    color(color_metal)\n    translate([38, 0, 15])\n    rotate([0, 0, 90])\n    difference() {\n        cube([40, 8, 8], center=true);\n        \n        // Tapered tip\n        translate([20, 0, 0])\n        cube([10, 6, 6], center=true);\n    }\n    \n    // Safety switch\n    color(color_accents)\n    translate([0, -12.5, 25])\n    cube([8, 2, 4], center=true);\n    \n    // Trigger\n    color(color_accents)\n    translate([-12, 8, 35])\n    rotate([0, 20, 0])\n    cube([5, 3, 8], center=true);\n    \n    // LED work light\n    color([1, 1, 0.8])\n    translate([22.5, 10, 25])\n    sphere(r=2);\n    \n    // Manufacturer label plate\n    color([0.8, 0.8, 0.8])\n    translate([0, 12.6, 25])\n    cube([15, 0.5, 6], center=true);\n}\n\n// Render the hammer\ndemolition_hammer();",
    "renders": true
  },
  {
    "tool": "rotaryhammer",
    "openscad_code": "// Rotary Hammer - Realistic Style, Medium Complexity\n// Overall dimensions ~90mm long, 30mm diameter, 3D printable\n\n// Main colors\n$fn = 32;\n\n// Overall scale factor for 3D printing\nscale_factor = 0.5;\n\nmodule handle_grip() {\n    difference() {\n        // Main handle body\n        color(\"darkslategray\")\n        cylinder(h=60, d1=22, d2=20);\n        \n        // Grip texture rings\n        for(i=[5:10:55]) {\n            translate([0,0,i])\n            rotate([0,0,0])\n            cylinder(h=3, d=20.5);\n        }\n        \n        // Trigger cutout\n        translate([-6,-11,20])\n        cube([12,22,25]);\n    }\n}\n\nmodule battery_pack() {\n    color(\"black\")\n    translate([0,0,-15])\n    difference() {\n        cube([25,35,15], center=true);\n        \n        // Vent slots\n        for(i=[-10:5:10]) {\n            translate([i,0,-7.5])\n            cube([2,30,2]);\n        }\n    }\n}\n\nmodule motor_housing() {\n    color(\"red\")\n    difference() {\n        cylinder(h=35, d=28);\n        \n        // Cooling vents\n        for(i=[0:30:359]) {\n            rotate([0,0,i])\n            translate([12,0,5])\n            cube([3,2,25]);\n        }\n    }\n}\n\nmodule gear_housing() {\n    color(\"red\")\n    translate([0,0,35])\n    cylinder(h=15, d1=28, d2=22);\n}\n\nmodule hammer_mechanism() {\n    color(\"lightgray\")\n    translate([0,0,50])\n    difference() {\n        cylinder(h=25, d=20);\n        \n        // Chuck collar\n        translate([0,-12,5])\n        rotate([90,0,0])\n        cylinder(h=24, d=4);\n    }\n}\n\nmodule chuck() {\n    color(\"silver\")\n    translate([0,0,75])\n    difference() {\n        cylinder(h=12, d1=18, d2=12);\n        \n        // SDS chuck grooves\n        for(i=[0:120:240]) {\n            rotate([0,0,i])\n            translate([0,4.5,0])\n            cube([1,9,12]);\n        }\n    }\n}\n\nmodule bit() {\n    color(\"darkgray\")\n    translate([0,0,87])\n    cylinder(h=25, d=6);\n}\n\nmodule trigger() {\n    color(\"black\")\n    translate([0,-11,25])\n    difference() {\n        cube([8,15,20]);\n        \n        // Trigger guard\n        translate([4,-2,0])\n        cube([2,19,20]);\n    }\n}\n\nmodule side_handle() {\n    color(\"black\")\n    translate([0,-20,45])\n    rotate([90,0,0])\n    difference() {\n        cylinder(h=30, d=8);\n        \n        // Handle texture\n        for(i=[5:5:25]) {\n            translate([0,0,i])\n            cylinder(h=2, d=7.5);\n        }\n    }\n}\n\nscale(scale_factor)\nunion() {\n    // Main assembly\n    union() {\n        handle_grip();\n        battery_pack();\n        motor_housing();\n        gear_housing();\n        hammer_mechanism();\n        chuck();\n        bit();\n        trigger();\n        side_handle();\n    }\n    \n    // Mode selector switch\n    color(\"yellow\")\n    translate([0,0,40])\n    rotate([90,0,0])\n    cylinder(h=5, d=8);\n    \n    // Forward/reverse indicator\n    color(\"darkgreen\")\n    translate([12,0,30])\n    cube([3,2,4]);\n}",
    "renders": true
  },
  {
    "tool": "jackhammer",
    "openscad_code": "// Scale factor for 3D printing (50mm tall)\nscale_factor = 0.4;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];      // Dark grey\ncolor_handle = [0.1, 0.1, 0.1];    // Black\ncolor_metal = [0.7, 0.7, 0.7];     // Silver\ncolor_yellow = [0.9, 0.7, 0.1];    // Safety yellow\n\nmodule jackhammer() {\n    scale(scale_factor) {\n        // Main body housing\n        color(color_body) {\n            translate([0, 0, 20])\n                cube([22, 18, 40], center=true);\n            \n            // Motor housing - rounded front\n            translate([0, 0, 45])\n                cylinder(h=20, d1=20, d2=24, center=true);\n        }\n        \n        // Piston cylinder\n        color(color_metal) {\n            translate([0, 0, 10])\n                cylinder(h=20, d=10, center=true);\n            \n            // Chisel bit\n            translate([0, 0, -5])\n                cylinder(h=10, d1=8, d2=6, center=true);\n        }\n        \n        // Side handles\n        color(color_handle) {\n            // Rear handle with grip\n            translate([-12, 0, 35])\n                rotate([90, 0, 0])\n                    cylinder(h=20, d=8, center=true);\n            \n            // Handle grip pattern\n            for(i = [-1:1]) {\n                translate([-12, 0, 35 + i*6])\n                    rotate([90, 0, 0])\n                        cylinder(h=3, d=10, center=true);\n            }\n            \n            // Front handle (D-handle)\n            translate([0, 0, 55])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=25, d=12, center=true);\n                        translate([0, 0, -15])\n                            cube([16, 16, 30], center=true);\n                    }\n        }\n        \n        // Air compressor connections\n        color(color_yellow) {\n            translate([11, 0, 40])\n                rotate([0, 90, 0])\n                    cylinder(h=8, d=6, center=true);\n            \n            translate([11, 0, 40])\n                rotate([0, 90, 0])\n                    cylinder(h=5, d=10, center=true);\n        }\n        \n        // Engine cooling fins\n        color(color_metal) {\n            for(i = [0:3]) {\n                translate([0, 0, 50 + i*3])\n                    difference() {\n                        cylinder(h=2, d=26, center=true);\n                        cylinder(h=3, d=20, center=true);\n                    }\n            }\n        }\n        \n        // Base plate\n        color(color_body) {\n            translate([0, 0, -12])\n                cube([30, 20, 4], center=true);\n        }\n        \n        // Safety markings\n        color(color_yellow) {\n            translate([0, 10, 30])\n                cube([20, 1, 10], center=true);\n            translate([0, -10, 30])\n                cube([20, 1, 10], center=true);\n        }\n        \n        // Control lever\n        color(color_metal) {\n            translate([-10, 0, 42])\n                rotate([0, 0, -30])\n                    cube([15, 3, 3], center=false);\n        }\n    }\n}\n\njackhammer();",
    "renders": true
  },
  {
    "tool": "anglegrinder",
    "openscad_code": "// Angle Grinder - Realistic Style, Medium Complexity\n// Designed for 3D printing with no supports needed\n\n// Main colors\ncolor_body = [0.15, 0.15, 0.15];       // Dark grey body\ncolor_handle = [0.8, 0.2, 0.2];        // Red safety handle\ncolor_metal = [0.5, 0.5, 0.5];         // Silver metal parts\ncolor_grip = [0.1, 0.1, 0.1];          // Black rubber grip\n\n// Overall scale factor\nscale_factor = 0.7;\n\nmodule angle_grinder() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main motor housing\n        color(color_body)\n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        cylinder(h=35, d1=28, d2=32, $fn=32);\n        \n        // Gear head\n        color(color_body)\n        translate([0, 32, 15])\n        rotate([90, 0, 0])\n        cylinder(h=20, d1=32, d2=28, $fn=32);\n        \n        // Spindle\n        color(color_metal)\n        translate([0, 52, 15])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=12, $fn=16);\n        \n        // Grinding disc\n        color(color_metal)\n        translate([0, 60, 15])\n        rotate([90, 0, 0])\n        cylinder(h=1.5, d=45, $fn=64);\n        \n        // Disc center\n        color([0.2, 0.2, 0.2])\n        translate([0, 61, 15])\n        rotate([90, 0, 0])\n        cylinder(h=2, d=10, $fn=32);\n        \n        // Main handle\n        color(color_body)\n        translate([0, -25, -5])\n        rotate([-20, 0, 0])\n        cylinder(h=45, d=22, $fn=32);\n        \n        // Handle grip texture\n        for(i = [0:5:40]) {\n            color(color_grip)\n            translate([0, -25 + i * cos(20), -5 + i * sin(20)])\n            rotate([-20, 0, 0])\n            cylinder(h=5, d=24, $fn=32);\n        }\n        \n        // Side handle\n        color(color_handle)\n        translate([20, 8, 0])\n        rotate([0, 90, 0])\n        cylinder(h=35, d=18, $fn=32);\n        \n        // Side handle grip rings\n        for(i = [5:5:30]) {\n            color(color_grip)\n            translate([20 + i, 8, 0])\n            rotate([0, 90, 0])\n            cylinder(h=3, d=20, $fn=32);\n        }\n        \n        // Power cable\n        color([0, 0, 0])\n        translate([0, -45, 0])\n        rotate([90, 0, 0])\n        cylinder(h=50, d=8, $fn=16);\n        \n        // Cable strain relief\n        color(color_body)\n        translate([0, -45, 0])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=12, $fn=16);\n        \n        // Vent slots on motor housing\n        for(angle = [0:30:330]) {\n            color([0.1, 0.1, 0.1])\n            translate([0, 12, 15])\n            rotate([90, angle, 0])\n            translate([17, 0, 0])\n            cube([12, 2, 8], center=true);\n        }\n        \n        // Power switch\n        color([0.8, 0.8, 0.8])\n        translate([0, -10, 30])\n        cube([10, 20, 4], center=true);\n        \n        // Safety lock button\n        color(color_handle)\n        translate([8, -10, 34])\n        cube([4, 8, 2], center=true);\n        \n        // Brand label area\n        color([0.3, 0.3, 0.3])\n        translate([0, 5, 32])\n        cube([18, 8, 1], center=true);\n    }\n}\n\nangle_grinder();",
    "renders": true
  },
  {
    "tool": "benchgrinder",
    "openscad_code": "// Bench Grinder - Realistic Style, Medium Complexity\n// Overall size ~70mm x 60mm x 40mm\n\n$fn = 48;  // Smooth curves for realistic look\n\n// Main colors\ncolor_base = [0.25,0.25,0.25];      // dark gray\ncolor_motor = [0.4,0.4,0.4];        // medium gray\ncolor_wheel = [0.8,0.8,0.8];        // light gray\ncolor_guard = [0.9,0.9,0.9];        // silver\ncolor_switch = [0.1,0.1,0.1];       // black\ncolor_labels = [1,1,0];             // yellow warning\n\nmodule bench_grinder() {\n    // Base\n    color(color_base)\n    translate([0,0,-2])\n    cube([70,40,4], center=true);\n\n    // Motor housing\n    color(color_motor)\n    translate([0,0,10])\n    rotate([90,0,0])\n    cylinder(h=35, r1=12, r2=12);\n\n    // Motor cooling fins\n    for (i=[-6:2:6]) {\n        translate([i,0,10])\n        rotate([90,0,0])\n        cylinder(h=35, r1=12.5, r2=12.5);\n    }\n\n    // Left grinding wheel\n    color(color_wheel)\n    translate([-25,0,10])\n    rotate([90,0,0])\n    cylinder(h=8, r1=20, r2=20);\n\n    // Right grinding wheel\n    color(color_wheel)\n    translate([25,0,10])\n    rotate([90,0,0])\n    cylinder(h=8, r1=20, r2=20);\n\n    // Left wheel guard\n    color(color_guard)\n    difference() {\n        translate([-25,0,10])\n        rotate([90,0,0])\n        difference() {\n            // Main guard body\n            cylinder(h=12, r1=26, r2=26);\n            // Inner cutout\n            translate([0,0,-1])\n            cylinder(h=14, r1=22, r2=22);\n        }\n        // Slot for wheel exposure\n        translate([-30,-15,-5])\n        cube([10,30,20]);\n    }\n\n    // Right wheel guard\n    color(color_guard)\n    difference() {\n        translate([25,0,10])\n        rotate([90,0,0])\n        difference() {\n            cylinder(h=12, r1=26, r2=26);\n            translate([0,0,-1])\n            cylinder(h=14, r1=22, r2=22);\n        }\n        translate([20,-15,-5])\n        cube([10,30,20]);\n    }\n\n    // Support arms\n    color(color_motor)\n    for (x=[-25,25]) {\n        translate([x,0,0])\n        cube([8,8,30], center=true);\n    }\n\n    // Tool rests\n    color(color_motor)\n    for (x=[-25,25]) {\n        translate([x,20,5])\n        cube([25,3,10], center=true);\n    }\n\n    // Eye shields\n    color([0.7,0.9,1,0.6])  // transparent blue\n    for (x=[-25,25]) {\n        translate([x,0,25])\n        rotate([30,0,0])\n        cube([25,2,15], center=true);\n    }\n\n    // Power switch\n    color(color_switch)\n    translate([0,-18,8])\n    cube([12,8,6], center=true);\n\n    // Power indicator LED\n    color([1,0,0])\n    translate([0,-18,12])\n    sphere(r=1.5);\n\n    // Warning labels\n    color(color_labels)\n    for (x=[-25,25]) {\n        translate([x,0,30])\n        rotate([0,90,0])\n        cylinder(h=0.5, r1=5, r2=5);\n    }\n\n    // Mounting holes\n    color([0,0,0])\n    for (x=[-25,25])\n    for (y=[-15,15]) {\n        translate([x,y,-1])\n        cylinder(h=4, r1=2.5, r2=2.5);\n    }\n}\n\nbench_grinder();",
    "renders": true
  },
  {
    "tool": "diegrinder",
    "openscad_code": "// OpenSCAD Die Grinder Tool - Realistic Style, Medium Complexity\n\n// Overall dimensions reference\nlength = 90;  // Total length\nbody_dia = 28;  // Main body diameter\nhandle_dia = 32;  // Handle diameter\n\n// Colors\n$fn=50;\n\n// Main module\nmodule die_grinder() {\n    // Main body assembly\n    union() {\n        // Rear handle grip\n        color(\"darkblue\")\n        translate([0, 0, -length/2 + 10])\n        handle_grip();\n        \n        // Main motor housing\n        color(\"silver\")\n        translate([0, 0, 0])\n        motor_housing();\n        \n        // Front collet assembly\n        color(\"silver\")\n        translate([0, 0, length/2 - 15])\n        collet_assembly();\n        \n        // Air inlet connector\n        color(\"black\")\n        translate([-body_dia/2 - 8, 0, -length/2 + 25])\n        air_inlet();\n        \n        // Trigger assembly\n        color(\"red\")\n        translate([0, body_dia/2 + 2, -length/2 + 35])\n        trigger_button();\n        \n        // Exhaust ports\n        color(\"black\")\n        translate([body_dia/2 - 1, 0, -length/4])\n        exhaust_ports();\n    }\n}\n\n// Handle grip with rubber texture\nmodule handle_grip() {\n    difference() {\n        cylinder(h=30, d=handle_dia);\n        \n        // Grip texture grooves\n        for(i=[0:5:25]) {\n            translate([0, 0, i])\n            cylinder(h=2, d=handle_dia + 1);\n        }\n        \n        // Center hole\n        cylinder(h=35, d=handle_dia - 8);\n    }\n}\n\n// Motor housing with cooling fins\nmodule motor_housing() {\n    union() {\n        // Main cylindrical body\n        cylinder(h=50, d=body_dia);\n        \n        // Cooling fins\n        for(i=[-20:10:20]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=5, d=body_dia + 6);\n                cylinder(h=6, d=body_dia);\n            }\n        }\n        \n        // Name plate\n        translate([0, body_dia/2 + 1, -5])\n        cube([20, 2, 10], center=true);\n    }\n}\n\n// Collet assembly with safety guard\nmodule collet_assembly() {\n    union() {\n        // Collet housing\n        cylinder(h=20, d=body_dia - 4);\n        \n        // Collet nut\n        translate([0, 0, 10])\n        difference() {\n            cylinder(h=8, d=14);\n            cylinder(h=9, d=6);\n        }\n        \n        // Safety guard\n        translate([0, 0, 20])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=15, d=18);\n            cylinder(h=16, d=16);\n        }\n        \n        // Grinding bit\n        color(\"darkgray\")\n        translate([0, 0, 28])\n        cylinder(h=25, d=6);\n    }\n}\n\n// Air inlet connector\nmodule air_inlet() {\n    rotate([0, 90, 0])\n    union() {\n        cylinder(h=12, d=10);\n        translate([0, 0, 12])\n        cylinder(h=5, d=14);\n    }\n}\n\n// Trigger button\nmodule trigger_button() {\n    difference() {\n        cube([15, 8, 12], center=true);\n        translate([0, -2, 0])\n        cube([13, 6, 10], center=true);\n    }\n}\n\n// Exhaust ports\nmodule exhaust_ports() {\n    for(i=[-30:10:30]) {\n        rotate([0, i, 0])\n        translate([body_dia/2 + 2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=4);\n    }\n}\n\n// Render the complete tool\ndie_grinder();",
    "renders": true
  },
  {
    "tool": "orbital",
    "openscad_code": "// OpenSCAD Orbital Sander Model - Realistic Medium Complexity\n\n$fn = 48;\n\n// Main module for the complete orbital sander\nmodule orbital_sander() {\n    // Base color scheme\n    color([0.2,0.2,0.2]) // Dark grey for main body\n    difference() {\n        // Main body housing\n        union() {\n            // Main housing block\n            translate([0,0,15]) cube([65,45,30], center=true);\n            \n            // Motor bulge on top\n            translate([0,0,35]) cylinder(h=20, d=40);\n            \n            // Dust collection port\n            translate([32.5,0,25]) rotate([90,0,0]) \n                cylinder(h=25, d1=15, d2=18);\n        }\n        \n        // Ventilation slots on sides\n        for(i = [-2:2]) {\n            translate([0, -25 + i*10, 15]) \n                cube([70, 3, 25], center=true);\n        }\n        \n        // Power cable hole\n        translate([-32.5, 0, 25]) rotate([0,90,0]) \n            cylinder(h=10, d=8);\n    }\n    \n    // Handle grip\n    color([0.1,0.1,0.1]) // Black rubber grip\n    translate([0,30,40]) rotate([45,0,0]) \n        difference() {\n            cylinder(h=40, d=25);\n            translate([0,0,-1]) cylinder(h=42, d=20);\n        }\n    \n    // Handle grip texture\n    color([0.05,0.05,0.05])\n    for(i = [1:3]) {\n        translate([0,30 + (i-2)*8, 40 + (i-2)*8]) \n            rotate([45,0,0]) cylinder(h=5, d=26);\n    }\n    \n    // On/off switch\n    color([0.8,0.1,0.1]) // Red switch\n    translate([15,22,50]) cube([15,8,5], center=true);\n    \n    // Speed control dial\n    color([0.3,0.3,0.3])\n    translate([-20,20,50]) \n        union() {\n            cylinder(h=5, d=20);\n            translate([0,10,2.5]) rotate([90,0,0]) \n                cube([5,2,5], center=true);\n        }\n    \n    // Base pad\n    color([0.15,0.15,0.15])\n    translate([0,0,5]) cube([70,45,10], center=true);\n    \n    // Hook and loop pad surface\n    color([0.4,0.4,0.4])\n    translate([0,0,0]) cube([68,43,2], center=true);\n    \n    // Velcro hooks pattern\n    color([0.5,0.5,0.5])\n    for(x = [-30:10:30]) {\n        for(y = [-20:10:20]) {\n            translate([x,y,1]) \n                cylinder(h=0.5, d=2);\n        }\n    }\n    \n    // Dust collection bag attachment\n    color([0.7,0.7,0.7])\n    translate([45,0,25]) rotate([0,90,0]) \n        difference() {\n            cylinder(h=30, d=25);\n            translate([0,0,-1]) cylinder(h=32, d=20);\n        }\n    \n    // Brand label\n    color([1,1,1])\n    translate([0,0,34]) \n        cube([30,15,0.5], center=true);\n    \n    // Power cable\n    color([0.1,0.1,0.1])\n    translate([-35,0,25]) rotate([0,90,0]) \n        cylinder(h=50, d=6);\n    \n    // Cable strain relief\n    translate([-35,0,25]) rotate([0,90,0]) \n        cylinder(h=15, d=10);\n}\n\n// Generate the complete model\norbital_sander();",
    "renders": true
  },
  {
    "tool": "belt",
    "openscad_code": "// Belt Tool - Medium Complexity OpenSCAD Model\n// Features: Realistic belt with buckle, holes, and realistic proportions\n\n// Main parameters\nbelt_width = 25;\nbelt_thickness = 3;\nbelt_length = 60;\nbuckle_size = 18;\nbuckle_thickness = 5;\nhole_diameter = 3;\nnum_holes = 5;\n\n// Belt strap module\nmodule belt_strap() {\n    color([0.35, 0.2, 0.05])  // Brown leather color\n    difference() {\n        // Main belt body\n        cube([belt_length, belt_width, belt_thickness], center=false);\n        \n        // Taper the end\n        translate([belt_length - 15, 0, -0.1])\n        cube([15, belt_width, belt_thickness + 0.2], center=false);\n    }\n    \n    // Belt holes\n    for (i = [1:num_holes]) {\n        translate([belt_length - 20 - (i * 7), belt_width/2, -0.1])\n            cylinder(h=belt_thickness + 0.2, d=hole_diameter, $fn=16);\n    }\n    \n    // Stitching detail\n    color([0.5, 0.3, 0.1])\n    for (i = [5:5:belt_length - 30]) {\n        translate([i, 2, belt_thickness])\n        sphere(0.5, $fn=8);\n        translate([i, belt_width - 2, belt_thickness])\n        sphere(0.5, $fn=8);\n    }\n}\n\n// Belt buckle module\nmodule buckle() {\n    // Main buckle frame\n    color([0.7, 0.7, 0.7])  // Metallic silver\n    difference() {\n        // Outer frame\n        cube([buckle_size, buckle_size, buckle_thickness], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n        cube([buckle_size - 4, buckle_size - 4, buckle_thickness + 0.2], center=true);\n    }\n    \n    // Buckle pin\n    color([0.6, 0.6, 0.6])\n    translate([buckle_size/2 - 2, 0, buckle_thickness/2])\n    rotate([90, 0, 0])\n    cylinder(h=buckle_size - 2, d=1.5, $fn=8);\n    \n    // Buckle loop\n    translate([-buckle_size/2 - 2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=buckle_size, d=4, $fn=16);\n}\n\n// Belt keeper loop\nmodule keeper_loop() {\n    color([0.35, 0.2, 0.05])\n    difference() {\n        // Outer shape\n        translate([0, 0, 0])\n        cube([10, belt_width + 2, belt_thickness + 2], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n        cube([12, belt_width, belt_thickness + 2.2], center=true);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    // Belt strap\n    belt_strap();\n    \n    // Buckle positioned at the end\n    translate([0, belt_width/2, belt_thickness/2])\n    buckle();\n    \n    // Keeper loop\n    translate([15, belt_width/2, belt_thickness/2])\n    keeper_loop();\n}\n\n// Reinforcement rivets\ncolor([0.5, 0.5, 0.5])\ntranslate([buckle_size + 3, belt_width/2, belt_thickness])\ncylinder(h=1.5, d=3, $fn=16);\n\ntranslate([buckle_size + 7, belt_width/2, belt_thickness])\ncylinder(h=1.5, d=3, $fn=16);",
    "renders": true
  },
  {
    "tool": "disc",
    "openscad_code": "// Disc tool - Realistic style, medium complexity\n// 3D printable disc cutter with handle and blade guard\n\n// Overall dimensions\ndisc_diameter = 80;\ndisc_thickness = 3;\nhandle_length = 60;\nhandle_diameter = 15;\nguard_thickness = 8;\n\n// Colors\n$fn = 64;\n\nmodule disc_blade() {\n    color(\"silver\")\n    difference() {\n        // Main disc\n        cylinder(h=disc_thickness, d=disc_diameter, center=true);\n        \n        // Center hole\n        cylinder(h=disc_thickness+1, d=10, center=true);\n        \n        // Cutting teeth pattern\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([disc_diameter/2 - 2, 0, 0])\n            cube([4, 2, disc_thickness+1], center=true);\n        }\n    }\n}\n\nmodule handle_grip() {\n    color(\"darkblue\")\n    difference() {\n        // Main handle body\n        rotate([0, 90, 0])\n        cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip grooves\n        for(i = [10:10:handle_length-10]) {\n            rotate([0, 90, 0])\n            translate([i-handle_length/2, 0, 0])\n            cylinder(h=3, d=handle_diameter+1, center=true);\n        }\n    }\n    \n    // End cap\n    color(\"black\")\n    rotate([0, 90, 0])\n    translate([handle_length/2, 0, 0])\n    cylinder(h=3, d=handle_diameter+2);\n}\n\nmodule blade_guard() {\n    color(\"red\")\n    difference() {\n        // Main guard half-circle\n        union() {\n            translate([0, 0, disc_thickness/2 + guard_thickness/2])\n            linear_extrude(height=guard_thickness)\n            difference() {\n                circle(d=disc_diameter + 10);\n                circle(d=disc_diameter + 2);\n            }\n            \n            // Mounting brackets\n            for(pos = [-20, 20]) {\n                translate([pos, 0, guard_thickness/2 + disc_thickness/2])\n                cube([8, 30, guard_thickness]);\n            }\n        }\n        \n        // Blade exposure window (120 degrees)\n        rotate([0, 0, -60])\n        translate([0, 0, -1])\n        cube([disc_diameter + 20, disc_diameter + 20, guard_thickness + 2]);\n    }\n}\n\nmodule mounting_hub() {\n    color(\"gray\")\n    union() {\n        // Hub body\n        cylinder(h=15, d=20);\n        \n        // Mounting flange\n        translate([0, 0, 7.5])\n        cylinder(h=5, d=30);\n        \n        // Screws\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle])\n            translate([12, 0, 7.5])\n            cylinder(h=6, d=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Disc blade\n    disc_blade();\n    \n    // Mounting hub\n    translate([0, 0, disc_thickness/2 + 7.5])\n    mounting_hub();\n    \n    // Handle\n    translate([0, 0, disc_thickness/2 + 15])\n    rotate([0, 0, -90])\n    translate([0, -handle_diameter/2 - 10, 0])\n    handle_grip();\n    \n    // Blade guard (comment out to print separately)\n    // translate([0, 0, 0])\n    // blade_guard();\n}",
    "renders": true
  },
  {
    "tool": "spindle",
    "openscad_code": "// Realistic OpenSCAD Spindle Tool (Medium Complexity)\n// Overall size ~85 mm long\n\n$fa = 2;\n$fs = 0.5;\n\nmodule spindle() {\n    // Main shaft\n    color(\"silver\")\n    cylinder(h = 65, d = 6, center = true);\n\n    // Collet nut (front)\n    translate([0, 0, 30])\n    color(\"gold\")\n    rotate([0, 0, 0])\n    cylinder(h = 8, d = 10, center = true);\n\n    // Collet nut grip rings\n    for (i = [1:4]) {\n        translate([0, 0, 30 - 4 + i*2])\n        color(\"gold\")\n        rotate([0, 0, 0])\n        difference() {\n            cylinder(h = 1.5, d = 10, center = true);\n            cylinder(h = 2, d = 9.2, center = true);\n        }\n    }\n\n    // Motor housing (rear)\n    translate([0, 0, -20])\n    color(\"silver\")\n    cylinder(h = 25, d = 20, center = true);\n\n    // Cooling fins on motor housing\n    for (i = [1:8]) {\n        rotate([0, 0, i*45])\n        translate([0, 0, -20])\n        color(\"silver\")\n        difference() {\n            cylinder(h = 25, d = 22, center = true);\n            cylinder(h = 26, d = 20, center = true);\n        }\n    }\n\n    // Power cable entry\n    translate([10, 0, -30])\n    rotate([90, 0, 0])\n    color(\"black\")\n    cylinder(h = 15, d = 4, center = true);\n\n    // Mounting bracket top\n    translate([0, 0, -35])\n    color(\"gray\")\n    difference() {\n        cube([30, 8, 6], center = true);\n        translate([0, 0, 3])\n        cylinder(h = 7, d = 5, center = true);\n    }\n\n    // Mounting bracket bottom\n    translate([0, 0, -35])\n    color(\"gray\")\n    difference() {\n        cube([30, 8, 6], center = true);\n        translate([0, 0, -3])\n        cylinder(h = 7, d = 5, center = true);\n    }\n\n    // Spindle nose taper\n    translate([0, 0, 35])\n    color(\"silver\")\n    cylinder(h1 = 5, h2 = 0, r1 = 3, r2 = 0, center = true);\n\n    // Tool holder (ER11 style)\n    translate([0, 0, 37])\n    color(\"darkgray\")\n    cylinder(h = 10, d = 4.5, center = true);\n}\n\nspindle();",
    "renders": true
  },
  {
    "tool": "oscillating",
    "openscad_code": "// Oscillating Multi-Tool â€“ realistic medium-complexity OpenSCAD model\n// Overall length â‰ˆ 90 mm, suitable for FDM printing (no steep overhangs)\n\n$fn = 36;\n\n// Main colors\ncolor_body   = [0.15,0.15,0.15];\ncolor_grip   = [0.05,0.05,0.05];\ncolor_metal  = [0.7,0.7,0.7];\ncolor_switch = [0.9,0.1,0.1];\ncolor_blade  = [0.8,0.8,0.8];\n\nmodule main() {\n    union() {\n        handle();\n        motor_housing();\n        gear_head();\n        blade_assembly();\n    }\n}\n\nmodule handle() {\n    color(color_body)\n    difference() {\n        // Main grip body\n        rotate([90,0,0])\n            cylinder(h = 70, d1 = 28, d2 = 32, center = true);\n\n        // Ergonomic finger grooves\n        for(i = [-1:1]) {\n            translate([0, 8*i, 0])\n                rotate([90,0,0])\n                    cylinder(h = 30, d = 8, center = true);\n        }\n\n        // Through cord hole\n        rotate([90,0,0])\n            cylinder(h = 35, d = 6, center = true);\n    }\n\n    // Soft rubber sleeve\n    color(color_grip)\n    rotate([90,0,0])\n        cylinder(h = 72, d = 33, center = true);\n\n    // Trigger switch\n    color(color_switch)\n    translate([0, -16, -5])\n        cube([8, 20, 4], center = true);\n}\n\nmodule motor_housing() {\n    color(color_body)\n    translate([0, 0, 40])\n    difference() {\n        // Cylindrical motor can\n        cylinder(h = 30, d = 36, center = true);\n\n        // Cooling slots\n        for(a = [0:30:150])\n            rotate([0,0,a])\n                translate([18,0,0])\n                    cube([4, 2, 32], center = true);\n    }\n}\n\nmodule gear_head() {\n    color(color_body)\n    difference() {\n        // Gear case\n        translate([0, 0, 56])\n            cylinder(h = 18, d1 = 36, d2 = 26, center = true);\n\n        // Access port\n        rotate([0,90,0])\n            translate([13,0,56])\n                cylinder(h = 10, d = 6, center = true);\n    }\n\n    // Metal shoe plate\n    color(color_metal)\n    translate([0, 0, 66])\n        cube([34, 20, 2], center = true);\n}\n\nmodule blade_assembly() {\n    color(color_metal)\n    translate([0, 0, 70])\n    union() {\n        // Mounting bolt\n        cylinder(h = 6, d = 6);\n\n        // Washer\n        translate([0,0,6])\n            cylinder(h = 1, d = 10);\n\n        // Tool-free lever\n        color(color_body)\n        translate([0, 8, 4])\n            cube([5, 16, 3], center = true);\n    }\n\n    // Saw blade\n    color(color_blade)\n    translate([0, 0, 71])\n    difference() {\n        rotate([0,90,0])\n            cube([40, 25, 1], center = true);\n\n        // Teeth\n        for(i = [0:5])\n            translate([i*6 - 15, 12.5, 0])\n                cube([3, 2, 1.2]);\n    }\n}\n\nmain();",
    "renders": true
  },
  {
    "tool": "multi",
    "openscad_code": "// OpenSCAD Multi-Tool (Medium complexity, realistic style)\n// Overall length ~90 mm, fits most 3D printers\n\n$fn = 36;\n\n// Main colors\ncolor_body = \"silver\";\ncolor_grip = \"black\";\ncolor_tools = \"steel\";\n\n// Main body\nmodule body() {\n    color(color_body)\n    difference() {\n        // Central spine\n        translate([-4, -8, 0])\n            cube([8, 16, 65]);\n        \n        // Pin holes for tools\n        translate([0, 0, 8])\n            cylinder(h=10, d=3.2);\n        translate([0, 0, 25])\n            cylinder(h=10, d=3.2);\n        translate([0, 0, 42])\n            cylinder(h=10, d=3.2);\n        translate([0, 0, 59])\n            cylinder(h=10, d=3.2);\n    }\n    \n    // Side plates\n    color(color_body)\n    for(side = [-1, 1]) {\n        translate([side * 4.5, 0, 32.5])\n            cube([1.5, 15, 65]);\n    }\n    \n    // Grip inlays\n    color(color_grip)\n    for(side = [-1, 1]) {\n        translate([side * 4.5, 0, 15])\n            cube([2, 14, 30]);\n    }\n}\n\n// Knife blade\nmodule knife() {\n    color(color_tools)\n    rotate([0, 0, -90])\n    translate([0, 0, 8])\n    difference() {\n        union() {\n            // Blade base\n            cylinder(h=4, d=12);\n            // Blade taper\n            hull() {\n                translate([0, 0, 4]) cylinder(h=0.1, d=3);\n                translate([0, -35, 4]) cylinder(h=0.1, d=1.5);\n            }\n        }\n        // Edge bevel\n        translate([0, -17, 2])\n            rotate([0, 45, 0])\n            cube([20, 4, 4], center=true);\n    }\n}\n\n// Flat screwdriver\nmodule screwdriver() {\n    color(color_tools)\n    rotate([0, 0, 90])\n    translate([0, 0, 25])\n    union() {\n        // Base\n        cylinder(h=4, d=12);\n        // Shaft\n        cylinder(h=25, d=4);\n        // Tip\n        translate([0, 12.5, 0])\n            cube([0.8, 3, 6], center=true);\n    }\n}\n\n// Phillips screwdriver\nmodule phillips() {\n    color(color_tools)\n    rotate([0, 0, 90])\n    translate([0, 0, 42])\n    union() {\n        // Base\n        cylinder(h=4, d=12);\n        // Shaft\n        cylinder(h=25, d=4);\n        // Cross tip\n        translate([0, 12.5, 0]) {\n            cube([0.8, 3, 6], center=true);\n            cube([6, 3, 0.8], center=true);\n        }\n    }\n}\n\n// Bottle opener\nmodule opener() {\n    color(color_tools)\n    rotate([0, 0, 90])\n    translate([0, 0, 59])\n    difference() {\n        union() {\n            // Base\n            cylinder(h=4, d=12);\n            // Arm\n            cube([3, 20, 4], center=true);\n        }\n        // Hook\n        translate([0, 12, 2])\n            cube([3, 8, 2.5], center=true);\n        // Hole\n        translate([0, 15, 0])\n            rotate([90, 0, 0])\n            cylinder(h=4, d=6);\n    }\n}\n\n// Assembly\nbody();\nknife();\nscrewdriver();\nphillips();\nopener();",
    "renders": true
  },
  {
    "tool": "rotary",
    "openscad_code": "// Rotary Tool â€“ medium-complexity, 3D-printable, realistic style\n// All dimensions in mm, total length â‰ˆ 95 mm\n\n// Body color\nbody_col = \"silver\";\ngrip_col = \"black\";\naccent_col = \"red\";\n\n// Overall size\nhandle_len = 55;\nhandle_d  = 28;\nhead_len  = 40;\nhead_d    = 34;\nbit_len   = 18;\nbit_d     = 3.2;\nwall      = 1.6;      // 3D-print friendly\n\n// Main body module\nmodule body() {\n    color(body_col)\n    difference() {\n        // Main shell\n        union() {\n            // Handle\n            translate([0, 0, handle_len/2])\n                cylinder(h=handle_len, d=handle_d, $fn=48);\n\n            // Motor head\n            translate([0, 0, -head_len/2])\n                cylinder(h=head_len, d=head_d, $fn=48);\n        }\n\n        // Hollow core\n        translate([0, 0, handle_len/2])\n            cylinder(h=handle_len+2, d=handle_d-2*wall, $fn=48);\n        translate([0, 0, -head_len/2])\n            cylinder(h=head_len+2, d=head_d-2*wall, $fn=48);\n    }\n\n    // Nose cone taper\n    translate([0, 0, -head_len])\n        cylinder(h=head_len/2, d1=head_d, d2=head_d*0.7, $fn=48);\n}\n\n// Grip pattern\nmodule grip() {\n    color(grip_col)\n    for (i=[0:9]) {\n        rotate([0, 0, i*36])\n            translate([handle_d/2-2, 0, 8+i*4])\n                cube([4, 2, 3.5], center=true);\n    }\n}\n\n// Vent slots\nmodule vents() {\n    color(body_col)\n    difference() {\n        cylinder(h=head_len*0.6, d=head_d-1, $fn=48);\n        for (a=[0:30:359])\n            rotate([0, 0, a])\n                translate([head_d/2-1, 0, 0])\n                    rotate([0, 90, 0])\n                        cube([head_len*0.6, 1.8, 3], center=true);\n    }\n}\n\n// Spindle lock button\nmodule lock_button() {\n    color(accent_col)\n    translate([0, -head_d/2-1.5, -head_len/4])\n        cube([8, 3, 6], center=true);\n}\n\n// Collet & bit\nmodule collet() {\n    color(\"silver\")\n    difference() {\n        cylinder(h=6, d=8, $fn=32);\n        cylinder(h=7, d=bit_d+0.2, $fn=32);\n    }\n    color(\"silver\")\n    translate([0, 0, -bit_len/2-3])\n        cylinder(h=bit_len, d=bit_d, $fn=16);\n}\n\n// Assembly\nbody();\ntranslate([0, 0, handle_len/2-4]) grip();\ntranslate([0, 0, -head_len*0.2]) vents();\nlock_button();\ntranslate([0, 0, -head_len-6]) collet();",
    "renders": true
  },
  {
    "tool": "engraver",
    "openscad_code": "// Engraver Tool - Realistic Style, Medium Complexity\n// Dimensions: ~90mm length, designed for 3D printing\n\n// Overall dimensions\nbody_length = 90;\nbody_diameter = 18;\ngrip_length = 50;\ntip_length = 15;\n\n// Colors\nmetal_color = \"Silver\";\nplastic_color = \"Black\";\ngrip_color = \"DarkGray\";\n\n// Main body module\nmodule engraver_body() {\n    color(plastic_color) {\n        // Main cylindrical body\n        cylinder(h=body_length, d=body_diameter, $fn=32);\n        \n        // Tapered front section\n        translate([0, 0, body_length - 5])\n            cylinder(h=5, d1=body_diameter, d2=body_diameter * 0.7, $fn=32);\n    }\n}\n\n// Grip module with knurling pattern\nmodule engraver_grip() {\n    color(grip_color) {\n        difference() {\n            // Main grip cylinder\n            cylinder(h=grip_length, d=body_diameter * 1.1, $fn=32);\n            \n            // Knurling grooves\n            for(i = [0:5:grip_length - 5]) {\n                translate([0, 0, i])\n                    cylinder(h=2, d=body_diameter * 1.15, $fn=6);\n            }\n            \n            // Finger grooves\n            for(i = [15:10:grip_length - 15]) {\n                rotate([90, 0, 0])\n                    translate([0, -body_diameter * 0.55, -i])\n                        cube([body_diameter * 1.2, 2, 8], center=true);\n            }\n        }\n    }\n}\n\n// Power button\nmodule power_button() {\n    color(\"Red\") {\n        translate([0, body_diameter * 0.6, body_length - 25])\n            cylinder(h=3, d=6, $fn=20);\n    }\n}\n\n// Speed dial\nmodule speed_dial() {\n    color(\"Blue\") {\n        translate([body_diameter * 0.6, 0, body_length - 40])\n            rotate([90, 0, 0])\n                cylinder(h=3, d=8, $fn=20);\n    }\n}\n\n// Chuck/collet assembly\nmodule chuck_assembly() {\n    color(metal_color) {\n        // Main chuck body\n        translate([0, 0, body_length])\n            cylinder(h=12, d=body_diameter * 0.65, $fn=32);\n        \n        // Collet nut\n        translate([0, 0, body_length + 12])\n            difference() {\n                cylinder(h=8, d=body_diameter * 0.7, $fn=24);\n                // Hexagonal cutout\n                translate([0, 0, -1])\n                    cylinder(h=10, d=body_diameter * 0.5, $fn=6);\n            }\n    }\n}\n\n// Engraving bit\nmodule engraving_bit() {\n    color(metal_color) {\n        // Shank\n        translate([0, 0, body_length + 20])\n            cylinder(h=8, d=3.175, $fn=20);\n        \n        // Tapered cutting tip\n        translate([0, 0, body_length + 28])\n            cylinder(h=tip_length, d1=3.175, d2=0.5, $fn=20);\n    }\n}\n\n// LED work light\nmodule work_light() {\n    color(\"Yellow\") {\n        translate([-body_diameter * 0.4, body_diameter * 0.4, body_length - 8])\n            sphere(d=4);\n    }\n}\n\n// Assembly\nmodule engraver_tool() {\n    union() {\n        // Main components\n        engraver_body();\n        \n        translate([0, 0, body_length - grip_length])\n            engraver_grip();\n        \n        power_button();\n        speed_dial();\n        work_light();\n        \n        chuck_assembly();\n        engraving_bit();\n        \n        // Ventilation slots\n        color(plastic_color) {\n            for(i = [0:30:359]) {\n                rotate([0, 0, i])\n                    translate([body_diameter * 0.5, 0, body_length - 15])\n                        cube([body_diameter * 0.2, 1, 10]);\n            }\n        }\n        \n        // Brand label\n        color(\"White\") {\n            translate([0, -body_diameter * 0.55, body_length - 30])\n                cube([20, 0.5, 8]);\n        }\n    }\n}\n\n// Render the complete tool\nengraver_tool();",
    "renders": true
  },
  {
    "tool": "etcher",
    "openscad_code": "// Etcher Tool - Realistic Style\n// Features a metal etching pen with replaceable carbide tip, ergonomic grip, and hexagonal body\n\n$fn = 50;\n\n// Main colors\ncolor_metal = [0.7, 0.7, 0.75];\ncolor_grip = [0.2, 0.2, 0.2];\ncolor_tip = [0.4, 0.4, 0.4];\ncolor_marking = [0.1, 0.1, 0.1];\n\n// Parameters\nbody_length = 70;\nbody_diameter = 12;\ngrip_length = 35;\ntip_length = 8;\ntip_diameter = 1.5;\nhex_radius = body_diameter/2;\n\n// Hexagonal body\nmodule hex_body() {\n    difference() {\n        // Hexagonal prism\n        linear_extrude(height=body_length, center=false)\n            circle(r=hex_radius, $fn=6);\n        \n        // Central hole for tip\n        translate([0, 0, body_length - 15])\n            cylinder(h=16, r=2.5, center=false);\n            \n        // Grip grooves\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([hex_radius - 1, 0, body_length - grip_length - 5])\n                    cube([2, 1, grip_length], center=true);\n        }\n    }\n}\n\n// Ergonomic grip with texture\nmodule grip_texture() {\n    difference() {\n        cylinder(h=grip_length, r=body_diameter/2 + 1, center=false);\n        \n        // Create knurled pattern\n        for(i = [0:35]) {\n            rotate([0, 0, i * 10])\n                translate([body_diameter/2 + 0.5, 0, 0])\n                    cube([1, 0.5, grip_length], center=true);\n        }\n    }\n}\n\n// Carbide tip assembly\nmodule etching_tip() {\n    union() {\n        // Main tip\n        translate([0, 0, body_length - 2])\n            cylinder(h=tip_length, r=tip_diameter/2, center=false);\n            \n        // Tapered end\n        translate([0, 0, body_length + tip_length - 2])\n            cylinder(h=3, r1=tip_diameter/2, r2=0.1, center=false);\n            \n        // Retaining collar\n        translate([0, 0, body_length - 4])\n            cylinder(h=2, r=tip_diameter, center=false);\n    }\n}\n\n// Metal cap with markings\nmodule end_cap() {\n    difference() {\n        cylinder(h=8, r=body_diameter/2 + 0.5, center=false);\n        \n        // Chamfer edge\n        translate([0, 0, -0.1])\n            cylinder(h=2, r1=body_diameter/2 + 0.5, r2=body_diameter/2 - 0.5, center=false);\n            \n        // Markings\n        translate([0, 0, 4])\n            linear_extrude(height=0.3)\n                text(\"ETCH\", size=4, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    color(color_metal)\n        hex_body();\n    \n    // Grip overlay\n    color(color_grip)\n        translate([0, 0, body_length - grip_length])\n            grip_texture();\n    \n    // Tip assembly\n    color(color_tip)\n        etching_tip();\n    \n    // End cap\n    color(color_metal)\n        translate([0, 0, -8])\n            end_cap();\n    \n    // Optional clip\n    color(color_metal)\n        translate([body_diameter/2, 0, body_length - grip_length - 5])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=20, r=1.5, center=false);\n                    translate([0, 0, -1])\n                        cube([4, 2, 22], center=true);\n                };\n}",
    "renders": true
  },
  {
    "tool": "laser",
    "openscad_code": "// Realistic Laser Pointer Tool - OpenSCAD\n// Medium complexity, 3D printable design\n// Overall length ~80mm, diameter ~25mm\n\n$fn = 50;\n\n// Main colors\ncolor_body = \"silver\";\ncolor_grip = \"darkgray\";\ncolor_button = \"red\";\ncolor_lens = \"lightblue\";\n\n// Body dimensions\nbody_length = 65;\nbody_diameter = 20;\ntip_length = 12;\n\n// Create the laser pointer\nmodule laser_pointer() {\n    union() {\n        // Main cylindrical body\n        color(color_body)\n        cylinder(h = body_length, d = body_diameter, center = false);\n        \n        // Tapered front section\n        color(color_body)\n        translate([0, 0, body_length])\n        cylinder(h = tip_length, d1 = body_diameter, d2 = 12);\n        \n        // Lens cap\n        color(color_lens)\n        translate([0, 0, body_length + tip_length])\n        cylinder(h = 3, d = 12);\n        \n        // Button housing\n        color(color_body)\n        translate([0, body_diameter/2 + 1.5, 30])\n        cube([8, 3, 12], center = true);\n        \n        // Activation button\n        color(color_button)\n        translate([0, body_diameter/2 + 3.5, 36])\n        cube([6, 1, 8], center = true);\n        \n        // Grip rings\n        for (z = [10:15:55]) {\n            color(color_grip)\n            translate([0, 0, z])\n            cylinder(h = 3, d = body_diameter + 2);\n        }\n        \n        // Clip attachment\n        color(color_body)\n        translate([body_diameter/2 + 0.5, 0, 45])\n        rotate([0, 90, 0])\n        cylinder(h = 25, d = 3);\n        \n        // Safety ring\n        color(color_body)\n        translate([0, 0, 5])\n        cylinder(h = 2, d = body_diameter + 4);\n        \n        // Battery cap\n        color(color_body)\n        translate([0, 0, -2])\n        cylinder(h = 4, d = body_diameter);\n        \n        // Thread detail on battery cap\n        for (i = [0:5]) {\n            color(color_grip)\n            rotate([0, 0, i * 60])\n            translate([body_diameter/2 - 1, 0, -1])\n            cube([0.5, 1, 2]);\n        }\n        \n        // Warning label area\n        color(\"yellow\")\n        translate([0, 0, 25])\n        cylinder(h = 8, d = body_diameter + 0.2);\n        \n        // Ventilation holes\n        for (i = [0:3]) {\n            color(\"black\")\n            rotate([0, 0, i * 90])\n            translate([body_diameter/2, 0, 50])\n            rotate([90, 0, 0])\n            cylinder(h = 1, d = 2);\n        }\n    }\n}\n\n// Assembly\nlaser_pointer();",
    "renders": true
  },
  {
    "tool": "plasma",
    "openscad_code": "// Realistic Medium-Complexity Plasma Cutter Torch â€“ OpenSCAD\n// Total length â‰ˆ 90 mm, ready for FDM printing (2 mm walls, no nasty overhangs)\n\nmodule handle_grooves() {\n    // 5 shallow anti-slip rings on the handle\n    for (i = [0:4]) {\n        translate([0, 0, 8 + i*6])\n            difference() {\n                cylinder(h=2, d=28, $fn=48);\n                cylinder(h=2.2, d=24, $fn=48);\n            }\n    }\n}\n\nmodule torch_body() {\n    color(\"darkslategray\")\n    union() {\n        // Main grip body\n        cylinder(h=45, d=28, $fn=48);\n        handle_grooves();\n\n        // Rear cable collar\n        translate([0, 0, -4])\n            cylinder(h=8, d1=28, d2=22, $fn=48);\n\n        // Forward taper\n        translate([0, 0, 45])\n            cylinder(h=8, d1=28, d2=22, $fn=48);\n    }\n}\n\nmodule nozzle() {\n    color(\"silver\")\n    union() {\n        // Outer copper nozzle\n        cylinder(h=12, d=18, $fn=36);\n        translate([0, 0, 12])\n            cylinder(h=5, d1=18, d2=14, $fn=36);\n\n        // Inner bore (print as thin wall)\n        difference() {\n            cylinder(h=17, d=18, $fn=36);\n            cylinder(h=17.2, d=14, $fn=36);\n        }\n    }\n}\n\nmodule swirl_ring() {\n    // Small cylindrical ring with tiny radial fins (decorative)\n    color(\"gold\")\n    difference() {\n        cylinder(h=3, d=20, $fn=32);\n        cylinder(h=3.2, d=16, $fn=32);\n    }\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n            translate([9, 0, 0])\n                cube([2, 1.5, 3], center=true);\n    }\n}\n\nmodule electrode() {\n    // Tungsten tip insert\n    color(\"lightgray\")\n    translate([0, 0, -2])\n        cylinder(h=14, d=4, $fn=24);\n}\n\nmodule trigger_guard() {\n    // Safety trigger guard ring\n    color(\"black\")\n    difference() {\n        rotate_extrude(angle=360, $fn=64)\n            translate([18, 0, 0])\n                square([3, 6], center=true);\n        // Remove bottom half so it prints flat\n        translate([0, 0, -3])\n            cube([100, 100, 6], center=true);\n    }\n}\n\nmodule trigger() {\n    // Ergonomic trigger paddle\n    color(\"crimson\")\n    difference() {\n        translate([16, 0, 30])\n            rotate([90, 0, 0])\n                cylinder(h=20, d=8, $fn=32);\n        // Cut bottom flat\n        translate([0, 0, -3])\n            cube([100, 100, 6], center=true);\n    }\n}\n\nmodule cable_exit() {\n    // Reinforced cable strain relief\n    color(\"black\")\n    translate([0, 0, -12])\n        rotate_extrude(angle=360, $fn=32)\n            translate([8, 0, 0])\n                square([2, 10], center=true);\n}\n\n// Assembly\nunion() {\n    torch_body();\n    translate([0, 0, 53])\n        swirl_ring();\n    translate([0, 0, 56])\n        nozzle();\n    electrode();\n    translate([0, 0, 26])\n        trigger_guard();\n    trigger();\n    cable_exit();\n}",
    "renders": true
  },
  {
    "tool": "cutoff",
    "openscad_code": "// Realistic cutoff tool (cut-off wheel / abrasive wheel cutter)\n// Medium complexity, 3D printable, 80 mm overall length\n\n$fn = 36;\n\n// Overall dimensions\nhandle_len = 60;\nhandle_dia = 18;\nguard_thick = 4;\nwheel_dia = 55;\nwheel_thick = 2.5;\narbor_dia = 10;\narbor_len = 8;\n\n// Colors\ncolor_handle = \"DarkSlateGray\";\ncolor_guard = \"Silver\";\ncolor_wheel = \"LightSlateGray\";\ncolor_arbor = \"Gray\";\ncolor_screw = \"Black\";\n\n// Main assembly\ndifference() {\n    union() {\n        // Handle with grip\n        translate([0, 0, handle_len/2])\n            color(color_handle)\n            handle_assembly(handle_len, handle_dia);\n\n        // Safety guard\n        translate([0, -wheel_dia/2 - guard_thick/2 - 5, handle_len - 20])\n            color(color_guard)\n            guard();\n\n        // Cutting wheel\n        translate([0, 0, handle_len - 20])\n            rotate([90, 0, 0])\n            color(color_wheel)\n            cutting_wheel();\n\n        // Arbor spacer\n        translate([0, 0, handle_len - 20])\n            rotate([90, 0, 0])\n            color(color_arbor)\n            cylinder(d = arbor_dia + 4, h = 3, center = true);\n    }\n\n    // Central hole through wheel and arbor\n    translate([0, 0, handle_len - 20])\n        rotate([90, 0, 0])\n        cylinder(d = arbor_dia, h = arbor_len + 10, center = true);\n}\n\n// Screw head on the arbor\ntranslate([0, arbor_len/2 + 1, handle_len - 20])\n    rotate([90, 0, 0])\n    color(color_screw)\n    cylinder(d1 = arbor_dia + 2, d2 = arbor_dia, h = 2, $fn = 6);\n\nmodule handle_assembly(len, dia) {\n    difference() {\n        // Main handle body\n        cylinder(d = dia, h = len);\n        \n        // Grip rings\n        for (i = [1 : 7 : len - 7]) {\n            translate([0, 0, i])\n                cylinder(d = dia + 1, h = 3);\n        }\n        \n        // Flat sides for grip\n        for (a = [0 : 120 : 240]) {\n            rotate([0, 0, a])\n                translate([dia/2 - 1, 0, len/2])\n                    cube([dia/2, dia * 0.8, len], center = true);\n        }\n    }\n}\n\nmodule guard() {\n    difference() {\n        // Main guard disc\n        cylinder(d = wheel_dia + 20, h = guard_thick);\n        \n        // Cutout for wheel\n        translate([0, 0, -1])\n            cylinder(d = wheel_dia + 2, h = guard_thick + 2);\n        \n        // Mounting holes\n        for (a = [45 : 90 : 315]) {\n            rotate([0, 0, a])\n                translate([wheel_dia/2 + 6, 0, -1])\n                    cylinder(d = 3, h = guard_thick + 2);\n        }\n    }\n}\n\nmodule cutting_wheel() {\n    difference() {\n        // Main wheel\n        cylinder(d = wheel_dia, h = wheel_thick, center = true);\n        \n        // Reinforcement web pattern\n        for (r = [wheel_dia * 0.3, wheel_dia * 0.6]) {\n            rotate_extrude()\n                translate([r, 0, 0])\n                    square([wheel_thick * 0.8, wheel_thick * 0.3], center = true);\n        }\n        \n        // Lightening holes\n        for (a = [0 : 30 : 330]) {\n            rotate([0, 0, a])\n                translate([wheel_dia * 0.4, 0, 0])\n                    cylinder(d = 3, h = wheel_thick + 0.1, center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "chop",
    "openscad_code": "// Chop tool - realistic style with medium complexity\n// A kitchen cleaver-style chopping tool\n\n$fn = 50;\nwall_thickness = 2;\nhandle_length = 70;\nblade_width = 50;\nblade_height = 35;\nblade_thickness = 3;\n\n// Main handle module\nmodule handle() {\n    color(\"saddlebrown\")\n    union() {\n        // Handle grip\n        translate([0, 0, -handle_length/2])\n        difference() {\n            // Main handle body\n            cylinder(h=handle_length, r1=12, r2=10);\n            \n            // Finger grooves\n            for(i = [-2:2]) {\n                translate([0, 0, i*12])\n                rotate([90, 0, 0])\n                cylinder(h=25, r=3, $fn=6);\n            }\n            \n            // Hanging hole\n            translate([0, 8, handle_length/2-10])\n        rotate([90, 0, 0])\n            cylinder(h=30, r=3);\n        }\n        \n        // Handle collar\n        translate([0, 0, handle_length/2+2])\n        cylinder(h=8, r=15, r1=15, r2=12);\n    }\n}\n\n// Blade module\nmodule blade() {\n    color(\"silver\")\n    union() {\n        // Main blade body\n        translate([0, 0, handle_length/2+8+blade_height/2])\n        difference() {\n            // Blade shape\n            linear_extrude(height=blade_thickness)\n            polygon([\n                [-blade_width/2, 0],\n                [blade_width/2, 0],\n                [blade_width/2-5, blade_height],\n                [-blade_width/2+5, blade_height]\n            ]);\n            \n            // Blade edge bevel\n            translate([0, -blade_thickness/2-0.1, blade_height-5])\n            rotate([90, 0, 0])\n            cylinder(h=blade_width-10, r1=0, r2=3);\n        }\n        \n        // Spine\n        translate([0, 0, handle_length/2+8+blade_height-2])\n        cube([blade_width-10, blade_thickness, 4], center=true);\n        \n        // Bolster\n        translate([0, 0, handle_length/2+8])\n        difference() {\n            cylinder(h=8, r=18, r1=18, r2=15);\n            cube([40, 40, 10], center=true);\n        }\n    }\n}\n\n// Rivets detail\nmodule rivets() {\n    color(\"darkgray\")\n    for(i = [-1, 1]) {\n        translate([0, i*6, handle_length/2-15])\n        cylinder(h=wall_thickness+1, r=2.5, center=true);\n    }\n    \n    for(i = [-1, 1]) {\n        translate([0, i*6, handle_length/2+15])\n        cylinder(h=wall_thickness+1, r=2.5, center=true);\n    }\n}\n\n// Blade markings\nmodule blade_markings() {\n    color(\"darkgray\")\n    translate([0, blade_thickness/2+0.2, handle_length/2+8+blade_height/2])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.5)\n    text(\"STAINLESS\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// Assemble the chop tool\nhandle();\nblade();\nrivets();\nblade_markings();",
    "renders": true
  },
  {
    "tool": "miter",
    "openscad_code": "// Miter Tool - Realistic Style, Medium Complexity\n// A 3D printable miter tool with functional features\n\n// Main parameters\n$fn = 50;\nhandle_length = 80;\nhandle_diameter = 12;\nblade_width = 25;\nblade_thickness = 2;\nteeth_count = 18;\nguide_length = 60;\nguide_thickness = 4;\n\n// Tool colors\ncolor_handle = [0.1, 0.1, 0.1];\ncolor_blade = [0.7, 0.7, 0.7];\ncolor_teeth = [0.8, 0.8, 0.8];\ncolor_guide = [0.3, 0.3, 0.3];\n\n// Handle with grip texture\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip rings\n        for(i = [5:10:handle_length-15]) {\n            translate([0, 0, i])\n            cylinder(h=2, d=handle_diameter+2, center=false);\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n        cylinder(h=5, d=handle_diameter+3, center=false);\n    }\n}\n\n// Miter blade with teeth\nmodule blade() {\n    color(color_blade)\n    difference() {\n        // Main blade body\n        cube([blade_width, blade_thickness, guide_length-10], center=true);\n        \n        // Mounting hole\n        translate([0, 0, -guide_length/2+20])\n        cylinder(h=blade_thickness+1, d=3, center=true);\n    }\n    \n    // Teeth along one edge\n    color(color_teeth)\n    for(i = [0:teeth_count-1]) {\n        translate([blade_width/2-1, -blade_thickness/2-0.5, -guide_length/2+10+i*(guide_length-20)/teeth_count])\n        cube([2, 1, (guide_length-20)/teeth_count*0.8], center=false);\n    }\n}\n\n// Guide rail system\nmodule guide_rail() {\n    color(color_guide)\n    union() {\n        // Main guide rail\n        translate([0, 0, 0])\n        cube([guide_thickness, 15, guide_length], center=false);\n        \n        // Support ribs\n        for(i = [10:15:guide_length-20]) {\n            translate([guide_thickness/2, 7.5, i])\n            cube([guide_thickness+2, 1, 8], center=true);\n        }\n        \n        // End stops\n        translate([-1, 0, 0])\n        cube([guide_thickness+2, 15, 2], center=false);\n        \n        translate([-1, 0, guide_length-2])\n        cube([guide_thickness+2, 15, 2], center=false);\n    }\n}\n\n// Protractor scale markings\nmodule protractor_markings() {\n    color([0, 0, 0])\n    difference() {\n        // Base protractor arc\n        translate([0, 0, guide_length/2])\n        rotate([90, 0, 0])\n        cylinder(h=1, r1=guide_length/2+5, r2=guide_length/2+5, center=true);\n        \n        // Inner cutout\n        translate([0, 0, guide_length/2-1])\n        rotate([90, 0, 0])\n        cylinder(h=3, r1=guide_length/2-5, r2=guide_length/2-5, center=true);\n    }\n    \n    // Degree markings\n    for(angle = [0:15:90]) {\n        rotate([0, 0, angle])\n        translate([guide_length/2+2, 0, guide_length/2])\n        cube([1, 0.5, 3], center=true);\n    }\n}\n\n// Assembly\n// Handle positioned vertically\ntranslate([0, -handle_diameter/2-7.5, 10])\nrotate([90, 0, 0])\nhandle();\n\n// Blade attached to handle\ntranslate([0, 0, guide_length/2-5])\nrotate([0, 0, 45])\nblade();\n\n// Guide rail system\ntranslate([-guide_thickness/2-12.5, 0, 0])\nguide_rail();\n\n// Protractor base\ntranslate([0, 0, 0])\nprotractor_markings();\n\n// Blade adjustment knob\ncolor([0.2, 0.2, 0.2])\ntranslate([-guide_thickness-15, 7.5, guide_length/2])\nrotate([90, 0, 0])\ncylinder(h=8, d=6, center=true);\n\n// Thumb screw for blade tension\ncolor([0.2, 0.2, 0.2])\ntranslate([0, 0, guide_length/2+guide_length/2+5])\nrotate([90, 0, 0])\ncylinder(h=5, d=4, center=true);",
    "renders": true
  },
  {
    "tool": "table",
    "openscad_code": "// Realistic Table Tool - OpenSCAD code\n// A miniature workbench table tool with vise and measurement markings\n\n// Overall dimensions\ntable_length = 80;\ntable_width = 50;\ntable_height = 25;\n\n// Colors\ntable_color = \"BurlyWood\";\nvise_color = \"SlateGray\";\nhandle_color = \"DarkRed\";\nmeasure_color = \"Black\";\n\n// Main table module\nmodule table_base() {\n    color(table_color) {\n        // Main tabletop with rounded edges\n        difference() {\n            minkowski() {\n                cube([table_length, table_width, table_height], center=true);\n                sphere(2);\n            }\n            translate([0, 0, table_height/2 + 1])\n                cube([table_length - 4, table_width - 4, table_height + 2], center=true);\n        }\n        \n        // Table legs\n        for(x = [-1, 1])\n        for(y = [-1, 1]) {\n            translate([x * (table_length/2 - 8), y * (table_width/2 - 8), -table_height/2 - 10])\n                cylinder(h=20, d=6, center=true);\n        }\n    }\n}\n\n// Vise jaw module\nmodule vise_jaw(position) {\n    color(vise_color) {\n        translate([position, 0, 0]) {\n            // Jaw body\n            cube([8, table_width - 20, 15], center=true);\n            \n            // Serrated grip surface\n            for(i = [-6:2:6]) {\n                translate([position > 0 ? 3.9 : -3.9, i, 0])\n                    cube([0.5, 1.5, 13], center=true);\n            }\n        }\n    }\n}\n\n// Vise handle module\nmodule vise_handle(position) {\n    color(handle_color) {\n        translate([position, 0, 8]) {\n            rotate([0, 90, 0]) {\n                // Handle bar\n                cylinder(h=30, d=3, center=true);\n                \n                // Handle knob\n                translate([15, 0, 0])\n                    sphere(4);\n                translate([-15, 0, 0])\n                    sphere(4);\n                \n                // Handle grip\n                for(i = [-12:3:12]) {\n                    translate([i, 0, 1.5])\n                        cylinder(h=2, d=3.5);\n                }\n            }\n        }\n    }\n}\n\n// Measurement scale module\nmodule measurement_scale() {\n    color(measure_color) {\n        // Top scale markings\n        for(i = [0:5:table_length - 10]) {\n            translate([-table_length/2 + 5 + i, table_width/2 - 2, table_height/2 + 0.1])\n                cube([0.5, 4, 0.5]);\n        }\n        \n        // Side scale markings\n        for(i = [0:5:table_width - 10]) {\n            translate([table_length/2 - 2, -table_width/2 + 5 + i, table_height/2 + 0.1])\n                cube([4, 0.5, 0.5]);\n        }\n    }\n}\n\n// Tool tray module\nmodule tool_tray() {\n    color(\"DarkGray\") {\n        translate([0, table_width/2 - 10, -table_height/2 - 5]) {\n            difference() {\n                cube([table_length - 20, 15, 5], center=true);\n                translate([0, 0, 2.5])\n                    cube([table_length - 22, 13, 6], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ntable_base();\nvise_jaw(table_length/2 - 15);\nvise_jaw(-table_length/2 + 15);\nvise_handle(table_length/2 - 20);\nmeasurement_scale();\ntool_tray();",
    "renders": true
  },
  {
    "tool": "band",
    "openscad_code": "// Band Tool - Realistic Style with Medium Complexity\n// A recognizable band clamping tool with handle, ratchet mechanism and strap\n\n// Color definitions\n$fn = 50;\n\n// Main assembly\nmodule bandTool() {\n    // Handle assembly\n    color(\"dimgray\") handle();\n    \n    // Ratchet mechanism housing\n    color(\"silver\") ratchetHousing();\n    \n    // Strap and buckle system\n    color(\"black\") strapSystem();\n    \n    // Adjustment wheel\n    color(\"silver\") adjustmentWheel();\n}\n\n// Handle with grip texture\nmodule handle() {\n    translate([0, 0, 15]) {\n        // Main handle body\n        difference() {\n            cylinder(h=80, d=25, center=true);\n            // Hollow interior\n            cylinder(h=82, d=18, center=true);\n        }\n        \n        // Grip rings\n        for(i = [-30:8:30]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=3, d=28, center=true);\n                    cylinder(h=4, d=25, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Ratchet mechanism housing\nmodule ratchetHousing() {\n    translate([0, 0, 0]) {\n        // Main housing block\n        cube([40, 25, 30], center=true);\n        \n        // Strap entry slot\n        translate([0, 0, 10]) {\n            cube([38, 22, 8], center=true);\n        }\n        \n        // Ratchet teeth\n        for(i = [0:5]) {\n            rotate([0, 0, i * 12 - 30]) {\n                translate([18, 0, 0]) {\n                    cube([3, 4, 8], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Strap and buckle system\nmodule strapSystem() {\n    // Main strap body\n    translate([0, 0, -25]) {\n        // Strap thickness\n        linear_extrude(height=2) {\n            polygon(points=[\n                [-20, -8], [20, -8], [20, 8], [-20, 8]\n            ]);\n        }\n        \n        // Strap holes\n        for(i = [-15:5:15]) {\n            translate([i, 0, -25]) {\n                cylinder(h=3, d=3, center=true);\n            }\n        }\n        \n        // Buckle frame\n        translate([22, 0, -25]) {\n            difference() {\n                // Outer frame\n                cube([8, 16, 3], center=true);\n                // Inner opening\n                cube([6, 12, 4], center=true);\n            }\n        }\n    }\n}\n\n// Adjustment wheel\nmodule adjustmentWheel() {\n    translate([0, 20, 0]) {\n        // Wheel body\n        cylinder(h=8, d=20, center=true);\n        \n        // Spoke details\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([7, 0, 0]) {\n                    cube([12, 2, 6], center=true);\n                }\n            }\n        }\n        \n        // Central knob\n        translate([0, 0, 5]) {\n            cylinder(h=5, d=8);\n        }\n    }\n}\n\n// Render the complete tool\nbandTool();",
    "renders": true
  },
  {
    "tool": "scroll",
    "openscad_code": "// Scroll Tool - Realistic Style, Medium Complexity\n// A handheld scroll tool with handle and scroll mechanism\n\n// Overall dimensions (mm)\nscroll_length = 80;\nscroll_diameter = 12;\nhandle_length = 40;\nhandle_diameter = 15;\n\n// Colors\nwood_color = [0.6, 0.4, 0.2];\nmetal_color = [0.7, 0.7, 0.7];\npaper_color = [0.9, 0.85, 0.75];\n\n// Main assembly\nunion() {\n    // Wooden handle\n    color(wood_color) {\n        // Handle grip\n        translate([0, 0, -handle_length/2]) {\n            cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        }\n        \n        // Handle end cap\n        translate([0, 0, -handle_length-5]) {\n            cylinder(h = 5, d = handle_diameter + 2, $fn = 32);\n        }\n        \n        // Handle grip rings\n        for(i = [1:3]) {\n            translate([0, 0, -handle_length + i*10]) {\n                difference() {\n                    cylinder(h = 2, d = handle_diameter + 1, $fn = 32);\n                    cylinder(h = 3, d = handle_diameter - 2, $fn = 32);\n                }\n            }\n        }\n    }\n    \n    // Metal scroll mechanism\n    color(metal_color) {\n        // Main scroll rod\n        translate([0, 0, handle_length/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = scroll_length, d = scroll_diameter, $fn = 32);\n                \n                // End caps\n                translate([0, 0, scroll_length/2]) {\n                    cylinder(h = 3, d = scroll_diameter + 4, $fn = 32);\n                }\n                translate([0, 0, -scroll_length/2]) {\n                    cylinder(h = 3, d = scroll_diameter + 4, $fn = 32);\n                }\n                \n                // Scroll knobs\n                translate([0, scroll_length/2 + 3, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 8, d = 8, $fn = 32);\n                    }\n                }\n                translate([0, -scroll_length/2 - 3, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 8, d = 8, $fn = 32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Scroll paper\n    color(paper_color) {\n        difference() {\n            // Main scroll paper\n            translate([0, 0, handle_length/2 + 2]) {\n                rotate([90, 0, 0]) {\n                    rotate_extrude(angle = 360, $fn = 64) {\n                        translate([scroll_diameter/2 + 0.5, 0, 0]) {\n                            square([0.5, scroll_length - 10]);\n                        }\n                    }\n                }\n            }\n            \n            // Paper edges for realism\n            translate([0, 0, handle_length/2 + 2]) {\n                rotate([90, 0, 0]) {\n                    for(i = [0:5:scroll_length-10]) {\n                        rotate([0, i, 0]) {\n                            translate([scroll_diameter/2 + 1, 0, 0]) {\n                                cube([0.3, 2, 2], center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Handle to scroll transition\n    color(metal_color) {\n        translate([0, 0, handle_length/2 - 2]) {\n            cylinder(h = 4, d = handle_diameter - 2, $fn = 32);\n        }\n    }\n    \n    // Decorative bands on scroll ends\n    color(metal_color) {\n        for(pos = [scroll_length/2 - 5, -scroll_length/2 + 5]) {\n            translate([0, pos, handle_length/2]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 2, d = scroll_diameter + 2, $fn = 32);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "radial",
    "openscad_code": "// Radial arm saw - realistic medium complexity model\n// Overall dimensions: ~80mm wide x ~60mm deep x ~100mm tall\n\n// Main colors\ncolor_table = [0.2, 0.2, 0.2];        // Dark gray\ncolor_metal = [0.5, 0.5, 0.5];       // Silver\ncolor_blade = [0.7, 0.7, 0.7];       // Light metallic\ncolor_grip = [0.1, 0.1, 0.1];        // Black\ncolor_safety = [0.8, 0.1, 0.1];      // Red safety features\n\n// Base table with T-tracks\nmodule base_table() {\n    color(color_table)\n    union() {\n        // Main table surface\n        cube([80, 60, 5], center=true);\n        \n        // T-tracks for miter gauge\n        for(i = [-30:15:30]) {\n            translate([i, 0, 2.5])\n                cube([8, 58, 3], center=true);\n            translate([i, 0, 3])\n                cube([4, 58, 2], center=true);\n        }\n        \n        // Front edge fence\n        translate([0, 29, 2.5])\n            cube([78, 3, 5], center=true);\n    }\n}\n\n// Radial arm assembly\nmodule radial_arm() {\n    color(color_metal)\n    union() {\n        // Vertical column\n        translate([-35, 0, 30])\n            rotate([0, 90, 0])\n                cylinder(h=70, r=6, center=true);\n        \n        // Horizontal arm\n        translate([0, 0, 60])\n            cube([75, 8, 8], center=true);\n        \n        // Support brackets\n        for(side = [-1, 1]) {\n            translate([-35, side*3, 45])\n                rotate([0, -45*side, 0])\n                    cube([20, 3, 3]);\n        }\n    }\n}\n\n// Saw motor housing\nmodule motor_housing() {\n    color(color_metal)\n    union() {\n        // Main motor body\n        translate([20, 0, 60])\n            rotate([0, 90, 0])\n                cylinder(h=25, r=12, center=true);\n        \n        // Motor end cap\n        translate([7, 0, 60])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=10, center=true);\n        \n        // Handle/grip\n        color(color_grip)\n        translate([30, 0, 60])\n            rotate([0, 0, 90])\n                rotate([90, 0, 0])\n                    cylinder(h=15, r=4, center=true);\n    }\n}\n\n// Circular saw blade with teeth\nmodule blade() {\n    color(color_blade)\n    union() {\n        // Main blade disc\n        translate([7, 0, 60])\n            rotate([0, 90, 0])\n                cylinder(h=1.5, r=20, center=true);\n        \n        // Blade teeth (simplified as notches)\n        for(i = [0:15:359]) {\n            rotate([0, 90, i])\n                translate([7, 0, 60])\n                    cube([2, 20.5, 1.5], center=true);\n        }\n        \n        // Arbor hole\n        color(color_metal)\n        translate([7, 0, 60])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Blade guard\nmodule blade_guard() {\n    color(color_safety)\n    difference() {\n        // Main guard housing\n        translate([7, 0, 60])\n            rotate([0, 90, 0])\n                cylinder(h=5, r=23, center=true);\n        \n        // Cutout for blade\n        translate([7, 0, 60])\n            rotate([0, 90, 0])\n                cylinder(h=7, r=21, center=true);\n    }\n}\n\n// Depth adjustment mechanism\nmodule depth_adjust() {\n    color(color_metal)\n    union() {\n        // Adjustment knob\n        translate([35, 15, 60])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=6, center=true);\n        \n        // Knurling on knob\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([35, 15, 60])\n                    cube([1, 1, 8], center=true);\n        }\n        \n        // Indicator scale\n        color([1, 1, 1])\n        translate([35, 15, 56])\n            for(i = [0:3:12]) {\n                rotate([0, 0, i*30-60])\n                    translate([5, 0, 0])\n                        cube([0.5, 0.5, 2], center=true);\n            }\n    }\n}\n\n// Assembly\nbase_table();\nradial_arm();\nmotor_housing();\nblade();\nblade_guard();\ndepth_adjust();",
    "renders": true
  },
  {
    "tool": "panel",
    "openscad_code": "// Panel Tool - Realistic Style with Medium Complexity\n// A panel removal tool for automotive interior work\n\n// Overall dimensions\nwidth = 85;\nheight = 20;\ndepth = 12;\n\n// Handle parameters\nhandle_width = 15;\nhandle_height = 12;\nhandle_length = 60;\n\n// Blade parameters\nblade_width = 5;\nblade_thickness = 2;\nblade_length = 25;\nblade_angle = 30;\n\n// Grip parameters\ngrip_radius = 7.5;\ngrip_depth = 1;\ngrip_spacing = 8;\n\n// Color definitions\nhandle_color = [0.2, 0.2, 0.2];\nblade_color = [0.8, 0.8, 0.8];\ngrip_color = [0.1, 0.1, 0.1];\n\nmodule handle_grips() {\n    // Create textured grip pattern\n    for (i = [0:3]) {\n        translate([0, 0, -handle_length/2 + grip_spacing + i * grip_spacing])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=grip_radius*2, r=grip_radius, $fn=20);\n                    cylinder(h=grip_radius*2+0.1, r=grip_radius-grip_depth, $fn=20);\n                }\n    }\n}\n\nmodule handle_body() {\n    color(handle_color)\n    difference() {\n        // Main handle shape\n        translate([0, 0, -handle_length/2])\n            scale([1, 0.9, 1])\n                cylinder(h=handle_length, r=handle_width/2, $fn=32);\n        \n        // Grip recess\n        translate([0, 0, -handle_length/2 + 5])\n            cylinder(h=handle_length-10, r=handle_width/2 - 2, $fn=32);\n    }\n    \n    // Add grip texture\n    color(grip_color) handle_grips();\n    \n    // Add end cap\n    translate([0, 0, handle_length/2])\n        cylinder(h=3, r=handle_width/2, $fn=32);\n}\n\nmodule blade_body() {\n    color(blade_color) {\n        // Main blade\n        translate([0, -blade_length/2, 0])\n            rotate([0, 0, blade_angle])\n                cube([blade_width, blade_length, blade_thickness], center=true);\n        \n        // Tapered tip\n        translate([0, -blade_length + 2, 0])\n            rotate([0, 0, blade_angle])\n                scale([1, 0.3, 1])\n                    cube([blade_width, 4, blade_thickness], center=true);\n        \n        // Reinforcement ridge\n        translate([0, -blade_length/2, blade_thickness/2 + 0.5])\n            rotate([0, 0, blade_angle])\n                cube([blade_width - 1, blade_length - 5, 1], center=true);\n    }\n}\n\nmodule transition_joint() {\n    // Curved transition from handle to blade\n    color(handle_color)\n    union() {\n        // Main joint body\n        translate([0, -handle_width/4, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_width/2, r1=handle_width/2, r2=blade_width/2, $fn=20);\n        \n        // Reinforcement bracket\n        translate([0, -handle_width/2 - 2, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_width/2, r1=handle_width/4, r2=blade_width/4, $fn=20);\n    }\n}\n\nmodule panel_tool() {\n    // Assemble all parts\n    handle_body();\n    \n    transition_joint();\n    \n    // Position blade correctly\n    translate([0, -handle_width/2 - blade_length/2, 0])\n        blade_body();\n    \n    // Add manufacturer's mark\n    translate([0, -handle_width/2 - 5, handle_height/2])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"PANEL\", size=3, halign=\"center\", valign=\"center\", font=\"Arial:style=Bold\");\n}\n\n// Render the complete tool\npanel_tool();",
    "renders": true
  },
  {
    "tool": "beam",
    "openscad_code": "// Beam Tool - OpenSCAD Model (Realistic Style, Medium Complexity)\n\n// Overall dimensions (mm)\nlength = 85;\nwidth = 12;\nheight = 25;\n\n// Handle parameters\nhandle_length = 40;\nhandle_diameter = 10;\ngrip_length = 35;\ngrip_ring_width = 2;\ngrip_ring_spacing = 5;\n\n// Blade parameters\nblade_length = 45;\nblade_width = 12;\nblade_thickness = 1.5;\nblade_angle = 30;\n\n// Pivot mechanism\npivot_radius = 3;\npivot_height = 8;\nspring_radius = 1.5;\nspring_coils = 5;\n\nmodule handle_with_grip() {\n    difference() {\n        // Main handle cylinder\n        color([0.2, 0.2, 0.2])\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [0:4]) {\n            translate([0, 0, grip_ring_spacing + i * (grip_ring_width + grip_ring_spacing)])\n                color([0.1, 0.1, 0.1])\n                cylinder(h=grip_ring_width, d=handle_diameter + 1, $fn=32);\n        }\n    }\n    \n    // Grip texture rings\n    for(i = [0:6]) {\n        translate([0, 0, 2 + i * 5])\n            difference() {\n                cylinder(h=1, d=handle_diameter + 0.5, $fn=32);\n                cylinder(h=1.1, d=handle_diameter - 1, $fn=32);\n            }\n    }\n}\n\nmodule blade() {\n    // Main blade body\n    translate([0, 0, blade_length/2])\n        rotate([0, 90, 0])\n        difference() {\n            // Tapered blade\n            hull() {\n                translate([0, 0, -blade_width/2])\n                    cube([blade_length, blade_thickness, blade_width], center=true);\n                translate([blade_length/2 - 5, 0, 0])\n                    cube([10, blade_thickness, blade_width * 0.7], center=true);\n            }\n            \n            // Cutting edge bevel\n            translate([0, blade_thickness/2, 0])\n                rotate([0, 0, -blade_angle])\n                cube([blade_length * 2, blade_thickness * 2, blade_width * 2], center=true);\n        }\n    \n    // Blade markings\n    color([0.8, 0.8, 0.8])\n    for(i = [1:4]) {\n        translate([blade_length - i * 8, 0, blade_width/2 + 0.1])\n            cube([0.5, 0.2, 2], center=true);\n    }\n}\n\nmodule pivot_mechanism() {\n    // Pivot pin\n    color([0.6, 0.6, 0.6])\n    translate([0, 0, 0])\n        cylinder(h=pivot_height, r=pivot_radius, $fn=16);\n    \n    // Spring mechanism\n    color([0.7, 0.7, 0.7])\n    for(i = [0:spring_coils-1]) {\n        translate([0, 0, 2 + i * 0.8])\n            rotate([0, 0, i * 30])\n            cylinder(h=0.8, r1=spring_radius, r2=spring_radius * 0.9, $fn=8);\n    }\n}\n\n// Assemble the beam tool\nunion() {\n    // Handle assembly\n    translate([-handle_length/2, 0, 0])\n        rotate([90, 0, 0])\n        handle_with_grip();\n    \n    // Pivot mechanism\n    translate([handle_length/2 - 2, 0, 0])\n        rotate([90, 0, 0])\n        pivot_mechanism();\n    \n    // Blade assembly\n    translate([handle_length/2 + 2, 0, 0])\n        rotate([90, 0, 0])\n        blade();\n    \n    // Safety lock\n    color([0.3, 0.3, 0.3])\n    translate([handle_length/2 - 5, handle_diameter/2 + 1, 0])\n        rotate([0, 90, 0])\n        cube([8, 3, 2], center=true);\n    \n    // Thumb rest\n    color([0.4, 0.4, 0.4])\n    translate([handle_length/2 + 10, 0, handle_diameter/2 + 2])\n        rotate([0, 0, 45])\n        cube([6, 2, 4], center=true);\n}\n\n// Add material indicators\ncolor([0.9, 0.9, 0.9])\ntranslate([-handle_length/2, 0, -handle_diameter/2 - 1])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.5)\n    text(\"HSS\", size=3, font=\"Arial:style=Bold\");",
    "renders": true
  },
  {
    "tool": "wall",
    "openscad_code": "color(\"LightGray\")\ndifference() {\n    // Main wall body\n    union() {\n        // Base wall structure\n        cube([80, 10, 50], center=true);\n        \n        // Top cap\n        translate([0, 0, 25])\n        cube([80, 12, 2], center=true);\n        \n        // Bottom reinforcement\n        translate([0, 0, -25])\n        cube([82, 14, 2], center=true);\n    }\n    \n    // Handle grip holes\n    for (x = [-30, -10, 10, 30]) {\n        translate([x, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, d=6, center=true, $fn=20);\n    }\n    \n    // Hanging hole\n    translate([0, 5, 22])\n    rotate([90, 0, 0])\n    cylinder(h=12, d=5, center=true, $fn=20);\n}\n\n// Handle grips\nfor (x = [-30, -10, 10, 30]) {\n    color(\"DarkGray\")\n    translate([x, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=14, d=8, center=true, $fn=20);\n        cylinder(h=15, d=6, center=true, $fn=20);\n    }\n}\n\n// Measurement markings\ncolor(\"Black\")\nfor (i = [1:9]) {\n    translate([-35 + i*8, 5.1, 15])\n    cube([0.5, 0.5, 10]);\n    \n    translate([-35 + i*8, 5.1, -15])\n    cube([0.5, 0.5, 10]);\n}\n\n// Center line marking\ntranslate([0, 5.1, 0])\ncube([80, 0.5, 0.5]);\n\n// Reinforcement ribs\ncolor(\"Gray\")\nfor (x = [-35, -15, 5, 25, 35]) {\n    translate([x, 0, 0])\n    cube([2, 10, 48]);\n}\n\n// Edge bevels\ntranslate([0, 0, 25.5])\ncube([78, 8, 1], center=true);\n\ntranslate([0, 0, -25.5])\ncube([78, 8, 1], center=true);",
    "renders": true
  },
  {
    "tool": "flooring",
    "openscad_code": "// Flooring Tapping Block (for laminate flooring installation)\n// Realistic style, medium complexity\n\n// Parameters\nblock_length = 90;\nblock_width = 40;\nblock_height = 20;\nhandle_length = 70;\nhandle_width = 25;\nhandle_height = 15;\ngrip_radius = 12;\nlip_height = 8;\nlip_width = 3;\nmagnet_diameter = 6;\nmagnet_depth = 3;\ntext_depth = 0.5;\n\nmodule main_block() {\n    difference() {\n        // Main block body\n        color(\"lightgray\")\n        cube([block_length, block_width, block_height], center=true);\n        \n        // Rounded edges on top\n        translate([0, 0, block_height/2])\n        cylinder(h=block_height+1, r=2, center=true);\n        \n        // Bottom lip for flooring edge\n        translate([block_length/2 - lip_width/2, 0, -block_height/2 - lip_height/2])\n        color(\"darkgray\")\n        cube([lip_width, block_width - 4, lip_height], center=true);\n        \n        // Magnet holes for alignment\n        for(x = [-30, 0, 30]) {\n            translate([x, 0, block_height/2 - magnet_depth/2])\n            cylinder(h=magnet_depth+1, d=magnet_diameter, center=true);\n        }\n        \n        // Text engraving\n        translate([-block_length/2 + 10, 0, block_height/2 - text_depth/2])\n        linear_extrude(height=text_depth+0.1)\n        text(\"TAP\", size=8, halign=\"center\", valign=\"center\");\n    }\n}\n\nmodule handle() {\n    union() {\n        // Main handle body\n        translate([0, 0, block_height/2 + handle_height/2])\n        color(\"darkgray\")\n        cube([handle_length, handle_width, handle_height], center=true);\n        \n        // Rounded handle edges\n        translate([handle_length/2 - 5, 0, block_height/2 + handle_height/2])\n        cylinder(h=handle_width, r=5, center=true, $fn=20);\n        \n        translate([-handle_length/2 + 5, 0, block_height/2 + handle_height/2])\n        cylinder(h=handle_width, r=5, center=true, $fn=20);\n        \n        // Grip pattern\n        for(i = [-30:10:30]) {\n            translate([i, 0, block_height/2 + handle_height])\n            rotate([90, 0, 0])\n            cylinder(h=handle_width-4, r=grip_radius/3, center=true, $fn=8);\n        }\n        \n        // Handle support ribs\n        for(side = [-1, 1]) {\n            translate([0, side * handle_width/2, block_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=handle_height, r=2, center=true, $fn=6);\n        }\n    }\n}\n\nmodule grip_texture() {\n    // Diamond pattern on sides\n    for(x = [-40:8:40]) {\n        for(y = [-15:8:15]) {\n            translate([x, y, block_height/2 - 1])\n            rotate([0, 0, 45])\n            cube([3, 3, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_block();\n    handle();\n    grip_texture();\n    \n    // Mirror for symmetrical features\n    mirror([0, 1, 0]) {\n        grip_texture();\n    }\n}",
    "renders": true
  },
  {
    "tool": "tile",
    "openscad_code": "// Tile Cutting Tool - Medium Complexity Realistic Style\n// A manual tile cutter with scoring wheel and breaking mechanism\n\n// Base dimensions\nbase_length = 90;\nbase_width = 40;\nbase_height = 5;\nhandle_length = 40;\nhandle_diameter = 12;\nrail_height = 15;\n\n// Color definitions\nmetal_color = [0.7, 0.7, 0.7];\nplastic_color = [0.2, 0.2, 0.2];\nrubber_color = [0.1, 0.1, 0.1];\nblade_color = [0.8, 0.8, 0.8];\n\nmodule base_plate() {\n    color(metal_color)\n    difference() {\n        // Main base\n        cube([base_length, base_width, base_height], center=true);\n        \n        // Center channel for tile positioning\n        translate([0, 0, base_height/2 - 0.5])\n        cube([base_length - 10, 2, 1], center=true);\n        \n        // Measurement markings\n        for(i = [-40:10:40]) {\n            translate([i, base_width/2 - 2, base_height/2 - 0.2])\n            cube([0.5, 4, 0.5]);\n        }\n    }\n}\n\nmodule guide_rails() {\n    color(metal_color)\n    union() {\n        // Left rail\n        translate([-base_length/2 + 10, -base_width/2 - 2, 0])\n        cube([5, rail_height + 2, 3]);\n        \n        // Right rail\n        translate([base_length/2 - 15, -base_width/2 - 2, 0])\n        cube([5, rail_height + 2, 3]);\n        \n        // Rail tops\n        translate([-base_length/2 + 12.5, -base_width/2 - 2, rail_height])\n        cube([5, 2, 3]);\n        \n        translate([base_length/2 - 12.5, -base_width/2 - 2, rail_height])\n        cube([5, 2, 3]);\n    }\n}\n\nmodule cutting_carriage() {\n    color(metal_color)\n    translate([0, 0, rail_height])\n    union() {\n        // Main body\n        translate([0, -base_width/2, 0])\n        cube([30, 10, 8]);\n        \n        // Guide wheels\n        for(x = [-10, 10]) {\n            translate([x, -base_width/2 - 2, -2])\n            rotate([90, 0, 0])\n            cylinder(h=3, r=4, $fn=16);\n        }\n        \n        // Scoring wheel assembly\n        translate([0, -base_width/2 + 5, -5])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=2, $fn=8);\n        \n        // Scoring wheel\n        color(blade_color)\n        translate([0, -base_width/2 + 5, -5])\n        rotate([0, 90, 0])\n        cylinder(h=1, r=6, $fn=32);\n    }\n}\n\nmodule breaking_mechanism() {\n    color(metal_color)\n    translate([0, base_width/2 - 5, base_height])\n    union() {\n        // Breaking bar\n        cube([base_length - 20, 5, 8]);\n        \n        // Pressure pad\n        color(rubber_color)\n        translate([0, 0, 8])\n        cube([base_length - 30, 4, 2], center=true);\n        \n        // Breaking handle\n        color(plastic_color)\n        translate([0, 5, 10])\n        rotate([0, 20, 0])\n        cylinder(h=handle_length, r=handle_diameter/2, $fn=16);\n        \n        // Handle grip\n        color(rubber_color)\n        translate([0, 5, 10 + handle_length/2])\n        rotate([0, 20, 0])\n        difference() {\n            cylinder(h=handle_length/2, r=handle_diameter/2 + 2, $fn=16);\n            cylinder(h=handle_length/2 + 1, r=handle_diameter/2 - 1, $fn=16);\n        }\n    }\n}\n\nmodule support_pads() {\n    color(rubber_color)\n    for(pos = [-30, 30]) {\n        translate([pos, 0, -base_height/2 - 1])\n        cube([8, base_width - 10, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base_plate();\n    guide_rails();\n    cutting_carriage();\n    breaking_mechanism();\n    support_pads();\n}",
    "renders": true
  },
  {
    "tool": "masonry",
    "openscad_code": "// Brick Jointer Tool - Realistic style, medium complexity\n// Used for creating concave mortar joints in bricklaying\n\n// Tool Parameters\nhandle_length = 80;\nhandle_diameter = 22;\nhead_length = 30;\nhead_width = 20;\nhead_thickness = 8;\njoint_radius = 6;\ngrip_ring_width = 5;\ngrip_ring_depth = 1.5;\n\n// Handle with ergonomic grip\nmodule handle() {\n    color([0.2, 0.2, 0.2]) {\n        // Main handle shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings for better handling\n        translate([0, 0, 10]) grip_ring();\n        translate([0, 0, 20]) grip_ring();\n        translate([0, 0, 30]) grip_ring();\n        translate([0, 0, 55]) grip_ring();\n        translate([0, 0, 65]) grip_ring();\n    }\n}\n\n// Individual grip ring\nmodule grip_ring() {\n    difference() {\n        cylinder(h=grip_ring_width, d=handle_diameter, $fn=32);\n        cylinder(h=grip_ring_width + 0.2, d=handle_diameter - grip_ring_depth*2, $fn=32);\n    }\n}\n\n// Working head with curved jointing surfaces\nmodule working_head() {\n    color([0.8, 0.8, 0.8]) {\n        // Main head block\n        translate([0, 0, handle_length/2 + head_length/2]) {\n            cube([head_width, head_thickness, head_length], center=true);\n            \n            // Curved jointing surfaces on both ends\n            translate([0, 0, -head_length/2 - joint_radius/2]) {\n                difference() {\n                    cube([head_width, head_thickness, joint_radius], center=true);\n                    translate([0, 0, -joint_radius/2]) {\n                        cylinder(h=joint_radius*2, d=joint_radius*2, $fn=32);\n                    }\n                }\n            }\n            \n            translate([0, 0, head_length/2 + joint_radius/2]) {\n                difference() {\n                    cube([head_width, head_thickness, joint_radius], center=true);\n                    translate([0, 0, joint_radius/2]) {\n                        rotate([180, 0, 0]) {\n                            cylinder(h=joint_radius*2, d=joint_radius*2, $fn=32);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Handle-to-head transition\nmodule transition() {\n    color([0.4, 0.4, 0.4]) {\n        translate([0, 0, handle_length/2]) {\n            cylinder(h=5, d1=handle_diameter, d2=head_width, $fn=32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    transition();\n    working_head();\n}",
    "renders": true
  },
  {
    "tool": "concrete",
    "openscad_code": "// Concrete Trowel (medium complexity realistic style)\n// Overall length: 100mm, blade width: 60mm\n\n// Blade parameters\nblade_length = 80;\nblade_width = 60;\nblade_thickness = 2;\nblade_curve_radius = 120;\nhandle_overlap = 10;\n\n// Handle parameters\nhandle_length = 40;\nhandle_diameter = 25;\ngrip_thickness = 3;\ngrip_grooves = 6;\n\n// Tang parameters\ntang_length = 25;\ntang_width = 10;\ntang_thickness = 4;\n\n// Rivet parameters\nrivet_diameter = 5;\nrivet_height = 2;\nrivets = 2;\n\nmodule blade() {\n    color([0.65, 0.65, 0.65])  // Steel grey blade\n    difference() {\n        // Main curved blade\n        translate([blade_length/2, 0, blade_thickness/2])\n        scale([1, blade_width/blade_length, blade_thickness/blade_length])\n        sphere(d=blade_length);\n        \n        // Flatten bottom and taper edges\n        translate([-5, 0, -1])\n        cube([blade_length*2, blade_width*2, blade_thickness+2]);\n        \n        // Taper front edge\n        translate([blade_length, -blade_width/2, blade_thickness-1])\n        rotate([0, 0, 15])\n        cube([blade_length/2, blade_width, blade_thickness+2]);\n        \n        // Rounded corners\n        translate([0, blade_width/2, 0])\n        cylinder(h=blade_thickness+2, r=5);\n        translate([0, -blade_width/2, 0])\n        cylinder(h=blade_thickness+2, r=5);\n    }\n}\n\nmodule tang() {\n    color([0.6, 0.6, 0.6])  // Steel tang\n    difference() {\n        // Main tang body\n        translate([blade_length - tang_length/2, 0, tang_thickness/2])\n        cube([tang_length, tang_width, tang_thickness], center=true);\n        \n        // Taper towards handle\n        for(i=[0:1]) {\n            mirror([0, i==0 ? 1 : -1, 0])\n            translate([blade_length - tang_length*0.75, tang_width/2, 0])\n            rotate([0, 0, -20])\n            cube([tang_length/2, tang_width, tang_thickness+2]);\n        }\n    }\n}\n\nmodule handle() {\n    // Main handle body\n    color([0.4, 0.2, 0.1])  // Wood color\n    translate([blade_length + handle_length/2 - handle_overlap, 0, handle_diameter/2])\n    rotate([90, 0, 0])\n    cylinder(h=handle_length, d=handle_diameter, $fn=32);\n    \n    // Grip grooves\n    color([0.3, 0.15, 0.08])\n    for(i=[0:grip_grooves-1]) {\n        rotate([0, 0, i*360/grip_grooves])\n        translate([0, 0, blade_length + handle_length/2 - handle_overlap])\n        rotate([90, 0, 0])\n        cylinder(h=handle_length*0.8, d=handle_diameter-grip_thickness*2, $fn=6);\n    }\n    \n    // End cap\n    color([0.5, 0.5, 0.5])\n    translate([blade_length + handle_length - handle_overlap, 0, handle_diameter/2])\n    rotate([90, 0, 0])\n    cylinder(h=5, d=handle_diameter+2, $fn=32);\n}\n\nmodule rivets() {\n    color([0.7, 0.7, 0.7])  // Steel rivets\n    for(i=[0:rivets-1]) {\n        translate([blade_length - tang_length/2 + tang_length*(i+1)/(rivets+1), \n                  0, \n                  handle_diameter/2 + rivet_height/2])\n        cylinder(h=rivet_height, d=rivet_diameter, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    blade();\n    tang();\n    handle();\n    rivets();\n}",
    "renders": true
  },
  {
    "tool": "stone",
    "openscad_code": "// Stone hand-axe â€“ realistic style, medium complexity\n// Overall length â‰ˆ 90 mm, printable without support\n\n$fn = 36;\n\n// Main body\nmodule axe_body() {\n    difference() {\n        // Rough stone core\n        hull() {\n            translate([-12, -25, -8]) sphere(d = 30);\n            translate([ 12,  25,  8]) sphere(d = 30);\n            translate([ 30,  -5,  0]) sphere(d = 20);\n            translate([-30,  10,  0]) sphere(d = 28);\n        }\n\n        // Hollow for weight reduction\n        translate([0, 5, 0]) scale([0.6, 0.4, 0.7])\n            sphere(d = 40);\n    }\n}\n\n// Flaked cutting edge\nmodule cutting_edge() {\n    difference() {\n        // Sharp ridge\n        translate([28, 0, 0]) rotate([0, 90, 0])\n            cylinder(h = 50, d1 = 3, d2 = 12, center = true);\n\n        // Flake scars along edge\n        for (i = [-3:3]) {\n            rotate([0, 0, i*12])\n                translate([40 + i*2, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 25, d = 8, $fn = 3);\n        }\n    }\n}\n\n// Palm-grip indentations\nmodule grip_dimples() {\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([-25, 0, 0])\n                scale([1, 0.7, 0.4])\n                    sphere(d = 12);\n    }\n}\n\n// Cord wrap groove\nmodule cord_wrap() {\n    difference() {\n        cylinder(h = 5, d = 40, center = true);\n        translate([0, 0, 2.6]) cylinder(h = 5.2, d = 42, center = true);\n    }\n}\n\n// Assemble\ncolor([0.35, 0.33, 0.30]) // slate-grey stone\nunion() {\n    axe_body();\n    cutting_edge();\n    grip_dimples();\n\n    // Cord wrap near butt\n    translate([-30, 0, 0]) rotate([90, 0, 0]) cord_wrap();\n}",
    "renders": true
  },
  {
    "tool": "metal",
    "openscad_code": "// Adjustable Wrench - 3D Printable Metal Tool\n// Medium complexity, realistic style, ~95mm long\n\n$fn = 50;\n\n// Main colors\ncolor(\"silver\") {\n\n// Handle module with grip pattern\nmodule handle() {\n    // Main handle body\n    difference() {\n        translate([-5, -8, -8]) cube([110, 16, 16]);\n        \n        // Rounded edges\n        translate([100, 0, 0]) rotate([0, 90, 0]) cylinder(h=20, r=8);\n        translate([-5, 0, 0]) rotate([0, 90, 0]) cylinder(h=20, r=8);\n        \n        // Grip grooves\n        for(i = [0:5:95]) {\n            translate([i, -8.5, 0]) cube([3, 17, 2]);\n            translate([i, -8.5, 14]) cube([3, 17, 2]);\n        }\n    }\n    \n    // End cap\n    translate([105, 0, 0]) rotate([0, 90, 0]) cylinder(h=16, r=8);\n}\n\n// Worm gear mechanism\nmodule worm_gear() {\n    // Gear housing\n    difference() {\n        translate([20, 10, -10]) cube([25, 20, 20]);\n        translate([32.5, 15, 0]) rotate([0, 90, 0]) cylinder(h=25, r=5);\n    }\n    \n    // Gear teeth (simplified)\n    for(i = [0:10:350]) {\n        rotate([0, 0, i]) translate([32.5, 15, 0]) rotate([0, 90, 0]) \n            cylinder(h=2, r=5.5);\n    }\n}\n\n// Adjustable jaw\nmodule adjustable_jaw() {\n    // Fixed jaw\n    difference() {\n        translate([0, -15, -8]) cube([30, 15, 16]);\n        translate([30, -15, 0]) rotate([0, 90, 0]) cylinder(h=15, r=8);\n    }\n    \n    // Moving jaw\n    translate([0, 0, 0]) difference() {\n        translate([0, 0, -8]) cube([30, 15, 16]);\n        translate([30, 0, 0]) rotate([0, 90, 0]) cylinder(h=15, r=8);\n        \n        // Jaw teeth\n        for(i = [0:2:12]) {\n            translate([0, i, -8]) cube([30, 1, 16]);\n        }\n    }\n    \n    // Jaw guide rail\n    translate([0, 0, -10]) cube([30, 15, 2]);\n    translate([0, 0, 8]) cube([30, 15, 2]);\n}\n\n// Size markings\nmodule markings() {\n    color(\"black\") {\n        // Metric sizes\n        for(i = [0:3]) {\n            translate([70 + i*8, -6, 8.5]) cube([1, 12, 0.5]);\n        }\n        \n        // \"METRIC\" text placeholder\n        translate([50, -6, 8.5]) cube([15, 2, 0.5]);\n    }\n}\n\n// Assembly\nhandle();\ntranslate([0, 0, 0]) worm_gear();\ntranslate([0, 0, 0]) adjustable_jaw();\nmarkings();\n}",
    "renders": true
  },
  {
    "tool": "wood",
    "openscad_code": "// Wood Chisel â€“ medium complexity realistic style\n// Overall length â‰ˆ 85 mm, safe to print vertically\n\n// Blade color â€“ metallic grey\nblade_col = [0.4, 0.4, 0.45];\n// Handle color â€“ stained wood brown\nhandle_col = [0.45, 0.28, 0.16];\n// Ferrule color â€“ brass\nferrule_col = [0.8, 0.6, 0.15];\n\n// Main assembly\nmodule chisel() {\n    union() {\n        blade();\n        ferrule();\n        handle();\n    }\n}\n\n// Blade â€“ 30 mm long, 12 mm wide, 3 mm thick\nmodule blade() {\n    color(blade_col)\n    translate([0, 0, 30])\n    rotate([90, 0, 0])\n    difference() {\n        // Tapered blade body\n        hull() {\n            translate([-6, 0, 0]) cylinder(h = 25, r = 0.5, $fn = 16);\n            translate([ 6, 0, 0]) cylinder(h = 25, r = 0.5, $fn = 16);\n            translate([-6, 25, 0]) cylinder(h = 5, r = 0.5, $fn = 16);\n            translate([ 6, 25, 0]) cylinder(h = 5, r = 0.5, $fn = 16);\n        }\n        // Cutting bevel\n        translate([0, 28, -3]) rotate([0, 45, 0])\n        cube([20, 10, 20], center = true);\n    }\n}\n\n// Brass ferrule â€“ 8 mm long, 16 mm diameter\nmodule ferrule() {\n    color(ferrule_col)\n    difference() {\n        translate([0, 0, 22])\n        cylinder(h = 8, r = 8, $fn = 64);\n        // Hollow for handle tenon\n        translate([0, 0, 22])\n        cylinder(h = 10, r = 6, $fn = 32);\n    }\n}\n\n// Wooden handle â€“ 55 mm long, 16 mm diameter, oval cross-section\nmodule handle() {\n    color(handle_col)\n    union() {\n        // Handle body\n        for (i = [0: 1]) mirror([i, 0, 0])\n        translate([0, 0, 11])\n        cylinder(h = 44, r1 = 8, r2 = 6, $fn = 32);\n        // Oval shaping\n        scale([1.15, 0.85, 1])\n        translate([0, 0, 11])\n        cylinder(h = 44, r1 = 8, r2 = 6, $fn = 32);\n        // Strike cap recess\n        translate([0, 0, 0])\n        cylinder(h = 3, r = 6, $fn = 32);\n    }\n}\n\n// Render the tool\nchisel();",
    "renders": true
  },
  {
    "tool": "plastic",
    "openscad_code": "// Medium Complexity Realistic Plastic Utility Knife\n// Overall dimensions: 130mm x 35mm x 20mm\n\n// Color for plastic handle\ncolor([0.1, 0.3, 0.6])  // Blue plastic color\n\n// Main handle body\ndifference() {\n    // Main handle block\n    translate([-10, -15, -8]) cube([110, 30, 16], center=false);\n    \n    // Grip grooves\n    for(i = [1:8]) {\n        translate([i*10, -15, -6]) cube([2, 30, 2], center=false);\n    }\n    \n    // Blade storage cavity\n    translate([85, -8, -5]) cube([20, 16, 10], center=false);\n    \n    // Thumb grip cutouts\n    translate([30, -15, 6]) cube([20, 2, 2], center=false);\n    translate([30, 13, 6]) cube([20, 2, 2], center=false);\n}\n\n// Handle top cover\ndifference() {\n    translate([-10, -15, 8) cube([110, 30, 2], center=false);\n    \n    // Screw holes\n    for(pos = [[15, 0], [50, 0], [80, 0]]) {\n        translate([pos[0], pos[1], 8]) cylinder(h=2, d=4, center=false);\n    }\n}\n\n// Blade channel\ntranslate([10, -0.5, -2]) cube([60, 1, 4], center=false);\n\n// Blade slider mechanism\nmodule slider() {\n    color([0.2, 0.2, 0.2])  // Dark grey metal color\n    union() {\n        // Slider body\n        translate([30, -7, 8]) cube([15, 14, 6], center=false);\n        \n        // Slider grip ridges\n        for(i = [0:3]) {\n            translate([32+i*3, -7, 14]) cube([1, 14, 1], center=false);\n        }\n        \n        // Blade clamp\n        translate([10, -2, -1]) cube([8, 4, 2], center=false);\n    }\n}\n\n// Position the slider\nslider();\n\n// Blade (partially extended)\ncolor([0.7, 0.7, 0.7])  // Metal color\ntranslate([18, -0.3, -0.5]) cube([45, 0.6, 1], center=false);\n\n// Safety lock button\ncolor([0.8, 0.2, 0.2])  // Red safety color\ntranslate([60, -10, 10]) cube([8, 4, 2], center=false);\n\n// Lanyard hole\ntranslate([-5, 0, 0]) cylinder(h=16, d=5, center=true);\n\n// End cap with belt clip\ndifference() {\n    color([0.1, 0.3, 0.6])  // Match handle color\n    translate([100, -15, -8]) cube([15, 30, 16], center=false);\n    \n    // Belt clip slot\n    translate([105, -3, 0]) cube([5, 6, 8], center=false);\n}\n\n// Clip spring detail\ncolor([0.3, 0.3, 0.3])  // Dark grey\ntranslate([105, -3, 4]) cube([5, 6, 0.5], center=false);",
    "renders": true
  },
  {
    "tool": "fiberglass",
    "openscad_code": "// Fiberglass Roller Tool - Realistic Style, Medium Complexity\n// Size: ~85mm length, designed for 3D printing\n\n// Colors\ncolor_body = \"LightGray\";\ncolor_handle = \"DarkGray\";\ncolor_grip = \"Black\";\ncolor_metal = \"Silver\";\n\n// Main dimensions\nroller_diameter = 20;\nroller_length = 70;\nhandle_length = 65;\nhandle_diameter = 12;\naxle_diameter = 4;\n\nmodule roller_surface(roller_d, roller_l) {\n    // Create textured roller surface with spiral pattern\n    union() {\n        difference() {\n            cylinder(d=roller_d, h=roller_l, $fn=32);\n            cylinder(d=roller_d-2, h=roller_l+0.2, $fn=32);\n        }\n        \n        // Add spiral ridges for fiberglass work\n        for (i=[0:20:360]) {\n            rotate([0, 0, i]) \n                translate([roller_d/2-1, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(d=2, h=roller_l, $fn=8);\n        }\n    }\n}\n\nmodule handle_grip() {\n    // Create ergonomic handle grip\n    difference() {\n        color(color_grip)\n        cylinder(d=handle_diameter+4, h=handle_length*0.7, $fn=32);\n        \n        // Cut grip pattern\n        for (i=[0:10:handle_length*0.7-5]) {\n            translate([0, 0, i])\n            rotate([0, 90, 0])\n            cube([handle_diameter+4, 1, 1], center=true);\n        }\n    }\n}\n\nmodule roller_end_cap() {\n    // Metal end cap for roller\n    union() {\n        color(color_metal)\n        cylinder(d=roller_diameter+2, h=3, $fn=32);\n        translate([0, 0, -1])\n        cylinder(d=axle_diameter, h=5, $fn=16);\n    }\n}\n\nmodule frame() {\n    // Main frame connecting roller to handle\n    color(color_body)\n    union() {\n        // Y-shaped frame\n        translate([-roller_length/2-5, 0, 0])\n        cube([10, roller_diameter+8, 8]);\n        \n        // Support arms\n        translate([-roller_length/2-5, roller_diameter/2+4, 0])\n        cube([15, 4, 8]);\n        translate([-roller_length/2-5, -roller_diameter/2-4, 0])\n        cube([15, 4, 8]);\n        \n        // Handle mount\n        translate([-roller_length/2-20, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(d=handle_diameter, h=15, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Roller assembly\n    translate([0, 0, 0])\n    roller_surface(roller_diameter, roller_length);\n    \n    // End caps\n    translate([roller_length/2+1.5, 0, 0])\n    roller_end_cap();\n    translate([-roller_length/2-1.5, 0, 0])\n    mirror([1, 0, 0])\n    roller_end_cap();\n    \n    // Frame\n    translate([0, 0, roller_diameter/2+4])\n    frame();\n    \n    // Handle\n    translate([-roller_length/2-20-handle_length/2, 0, roller_diameter/2+4])\n    rotate([0, 90, 0])\n    color(color_handle)\n    cylinder(d=handle_diameter, h=handle_length, $fn=32);\n    \n    // Handle grip\n    translate([-roller_length/2-20-handle_length*0.85, 0, roller_diameter/2+4])\n    rotate([0, 90, 0])\n    handle_grip();\n}",
    "renders": true
  },
  {
    "tool": "drywall",
    "openscad_code": "// Drywall Taping Knife - 6 inch blade\n// Medium complexity realistic style\n\n$fn = 36;\n\n// Main colors\nblade_color = \"silver\";\nhandle_color = [0.2, 0.2, 0.2];\ngrip_color = [0.1, 0.1, 0.1];\ncap_color = \"silver\";\n\n// Overall dimensions\nknife_length = 85;\nblade_length = 65;\nblade_width = 38;\nblade_thickness = 1.2;\nhandle_length = 20;\nhandle_diameter = 12;\ngrip_length = 15;\n\n// Blade module\nmodule blade() {\n    difference() {\n        // Main blade shape\n        translate([0, 0, blade_thickness/2])\n            cube([blade_length, blade_width, blade_thickness], center=true);\n        \n        // Tapered edge\n        translate([blade_length/2 - 8, 0, blade_thickness/2 + 0.1])\n            rotate([0, 15, 0])\n            cube([15, blade_width + 2, blade_thickness + 0.2], center=true);\n        \n        // Corner rounding\n        for (i = [-1, 1]) {\n            translate([blade_length/2 - 3, i * (blade_width/2 - 3), 0])\n                cylinder(h=blade_thickness + 0.2, r=3, center=true);\n        }\n    }\n}\n\n// Handle grip texture module\nmodule grip_texture() {\n    difference() {\n        cylinder(h=grip_length, r=handle_diameter/2, center=true);\n        \n        // Grip rings\n        for (i = [-3:3]) {\n            translate([0, 0, i * 2])\n                cube([handle_diameter + 0.2, 0.5, 1.5], center=true);\n        }\n    }\n}\n\n// Handle module\nmodule handle() {\n    union() {\n        // Main handle body\n        color(handle_color)\n            cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Rubber grip section\n        color(grip_color)\n            translate([0, 0, (handle_length - grip_length)/2])\n            grip_texture();\n        \n        // End cap\n        color(cap_color)\n            translate([0, 0, handle_length/2])\n            cylinder(h=2, r1=handle_diameter/2, r2=handle_diameter/2 * 0.9, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Position blade\n    color(blade_color)\n        translate([-(handle_length/2 + blade_length/2), 0, 0])\n        blade();\n    \n    // Position handle\n    translate([handle_length/2, 0, 0])\n        handle();\n}\n\n// Reinforcement ridge\ncolor(blade_color)\n    translate([-(handle_length/2 + blade_length/2 - 10), 0, blade_thickness/2 + 1])\n    cube([20, blade_width/3, 2]);",
    "renders": true
  },
  {
    "tool": "plaster",
    "openscad_code": "// Plaster tool (medical plaster dispenser with cutter)\n// Realistic style, medium complexity\n// Size: 80mm x 50mm x 25mm\n\n// Parameters\n$fn = 50;\noverall_width = 80;\noverall_height = 50;\noverall_depth = 25;\nwall_thickness = 2;\nhandle_radius = 8;\nblade_width = 0.5;\n\n// Main body module\nmodule plaster_tool() {\n    // Main body - rounded rectangle\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-overall_width/2 + 5, 0, 0])\n                sphere(r=overall_depth/2);\n            translate([overall_width/2 - 5, 0, 0])\n                sphere(r=overall_depth/2);\n        }\n        \n        // Inner cavity for plaster roll\n        translate([0, 0, -overall_depth/2 + wall_thickness])\n            cube([overall_width - 10, overall_height - 10, overall_depth - wall_thickness], center=true);\n    }\n    \n    // Handle on right side\n    translate([overall_width/2 - 5, 0, 0]) {\n        rotate([0, 90, 0])\n            cylinder(h=handle_radius*2, r=handle_radius, center=true);\n        \n        // Handle grip texture\n        for(i = [-1:1]) {\n            rotate([0, 90, 0])\n            rotate([0, 0, i * 120])\n            translate([0, 0, handle_radius*0.8])\n            cube([handle_radius*1.8, 1, 1], center=true);\n        }\n    }\n    \n    // Cutting blade mechanism\n    translate([overall_width/2 - 15, overall_height/2 - 5, 0]) {\n        // Blade holder\n        color([0.7, 0.7, 0.7])\n        cube([10, 5, blade_width*4], center=true);\n        \n        // Actual blade\n        color([0.5, 0.5, 0.5])\n        translate([0, 0, -blade_width*2])\n            cube([10, 5, blade_width], center=true);\n        \n        // Blade guard\n        color([0.9, 0.9, 0.9])\n        translate([0, -3, 3])\n            cube([10, 2, 5], center=true);\n    }\n    \n    // Plaster roll holder axle\n    color([0.8, 0.8, 0.8])\n    translate([-overall_width/2 + 15, 0, 0]) {\n        rotate([90, 0, 0])\n            cylinder(h=overall_depth - wall_thickness*2, r=3, center=true);\n        \n        // End cap\n        translate([0, 0, overall_depth/2 - wall_thickness])\n            sphere(r=4);\n    }\n    \n    // Dispensing slot\n    translate([overall_width/2 - 25, -overall_height/2 + 5, 0]) {\n        cube([20, 2, 3], center=true);\n    }\n    \n    // Tension roller\n    color([0.6, 0.6, 0.6])\n    translate([overall_width/2 - 30, 0, 0]) {\n        rotate([90, 0, 0])\n            cylinder(h=overall_depth - wall_thickness*2, r=2, center=true);\n    }\n    \n    // Measurement markings\n    color([0, 0, 0])\n    for(i = [0:5:20]) {\n        translate([overall_width/2 - 25 - i, -overall_height/2 + 2, overall_depth/2 - 1])\n            cube([0.5, 3, 0.5]);\n    }\n    \n    // Logo/text area\n    color([0.2, 0.2, 0.2])\n    translate([0, 0, overall_depth/2 - 0.5])\n        text(\"PLASTER\", size=6, halign=\"center\", valign=\"center\");\n}\n\n// Render the tool\ncolor([0.95, 0.95, 0.9])\nplaster_tool();",
    "renders": true
  },
  {
    "tool": "paint",
    "openscad_code": "// Paint Roller Tool - Realistic Style, Medium Complexity\n// Overall dimensions: ~55mm wide x 200mm long x 55mm tall\n\n// Colors\nhandle_color = \"BurlyWood\";\ngrip_color = \"Black\";\nmetal_color = \"Silver\";\nroller_color = \"White\";\n\n// Handle parameters\nhandle_length = 120;\nhandle_diameter = 20;\ngrip_length = 60;\ngrip_diameter = 22;\n\n// Frame parameters\nframe_width = 55;\nframe_height = 35;\nframe_thickness = 3;\nwire_diameter = 4;\n\n// Roller parameters\nroller_length = 45;\nroller_diameter = 30;\nroller_wall = 2;\n\n// Handle with grip\nmodule handle() {\n    // Main handle tube\n    color(handle_color)\n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=handle_length+2, d=handle_diameter-4, $fn=32);\n    }\n    \n    // Rubber grip with texture\n    color(grip_color)\n    difference() {\n        cylinder(h=grip_length, d=grip_diameter, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=grip_length+2, d=grip_diameter-4, $fn=32);\n    }\n    \n    // Grip texture rings\n    for(i = [0:5:grip_length-5]) {\n        translate([0, 0, i])\n        color(grip_color)\n        difference() {\n            cylinder(h=3, d=grip_diameter+1, $fn=32);\n            cylinder(h=3, d=grip_diameter-1, $fn=32);\n        }\n    }\n}\n\n// Wire frame connection\nmodule wire_frame() {\n    color(metal_color)\n    union() {\n        // Main wire arm\n        translate([0, 0, handle_length/2])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=35, d=wire_diameter, $fn=16);\n            translate([0, 0, -1])\n                cylinder(h=37, d=wire_diameter-2, $fn=16);\n        }\n        \n        // Wire bends\n        translate([frame_width/2 - wire_diameter/2, 0, handle_length/2 + 17.5])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=frame_width - wire_diameter, d=wire_diameter, $fn=16);\n            translate([1, 0, 0])\n                cylinder(h=frame_width - wire_diameter - 2, d=wire_diameter-2, $fn=16);\n        }\n    }\n}\n\n// Roller cage\nmodule roller_cage() {\n    color(metal_color)\n    union() {\n        // End caps\n        for(side = [-1, 1]) {\n            translate([side * (frame_width/2 - wire_diameter), 0, handle_length/2 + 17.5])\n            difference() {\n                cylinder(h=frame_thickness, d=roller_diameter + 6, $fn=32);\n                translate([0, 0, -1])\n                    cylinder(h=frame_thickness+2, d=roller_diameter + 2, $fn=32);\n            }\n        }\n        \n        // Support wires\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n            translate([0, 0, handle_length/2 + 17.5])\n            difference() {\n                cube([frame_width - wire_diameter*2, wire_diameter, roller_diameter + 6], center=true);\n                cube([frame_width - wire_diameter*2 - 4, wire_diameter-2, roller_diameter + 2], center=true);\n            }\n        }\n    }\n}\n\n// Paint roller\nmodule roller() {\n    color(roller_color)\n    difference() {\n        // Main roller\n        translate([0, 0, handle_length/2 + 17.5])\n        rotate([90, 0, 0])\n        cylinder(h=roller_length, d=roller_diameter, $fn=32);\n        \n        // Hollow core\n        translate([0, 0, -1])\n        rotate([90, 0, 0])\n        cylinder(h=roller_length+2, d=roller_diameter - roller_wall*2, $fn=32);\n    }\n    \n    // Roller texture - nap pattern\n    color(roller_color)\n    for(i = [0:5:roller_length-5]) {\n        translate([0, 0, handle_length/2 + 17.5 - roller_length/2 + i + 2.5])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d=roller_diameter + 0.5, $fn=32);\n    }\n}\n\n// Assembly\nhandle();\nwire_frame();\nroller_cage();\nroller();",
    "renders": true
  },
  {
    "tool": "coating",
    "openscad_code": "// OpenSCAD Coating Knife - Realistic Style, Medium Complexity\n// A 3D printable coating tool for applying coatings/pastes\n// Total length: 85mm\n\n// Color definitions\nblade_color = \"#C0C0C0\";      // Silver blade\nhandle_color = \"#2F2F2F\";     // Dark gray handle\ngrip_color = \"#4A4A4A\";       // Medium gray grip\naccent_color = \"#FF4444\";     // Red accent stripe\n\n// Main module for the coating knife\nmodule coating_knife() {\n    // Assemble all parts\n    union() {\n        // Handle assembly\n        translate([0, 0, 5]) handle_assembly();\n        \n        // Blade assembly\n        translate([0, 0, 0]) blade_assembly();\n    }\n}\n\n// Handle assembly\nmodule handle_assembly() {\n    union() {\n        // Main handle body\n        color(handle_color) \n        translate([0, 0, 0])\n        cylinder(h = 45, d1 = 18, d2 = 15, $fn = 36);\n        \n        // Ergonomic grip rings\n        for (i = [0:3]) {\n            color(grip_color)\n            translate([0, 0, 5 + i * 10])\n            cylinder(h = 3, d = 19, $fn = 36);\n        }\n        \n        // Red accent ring at top\n        color(accent_color)\n        translate([0, 0, 42])\n        cylinder(h = 2, d = 16, $fn = 36);\n        \n        // Hanging hole\n        difference() {\n            color(handle_color)\n            translate([-7, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h = 5, d = 10, $fn = 36);\n            \n            // Hole cutout\n            translate([-7, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h = 6, d = 4, $fn = 20);\n        }\n    }\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    union() {\n        // Blade neck\n        color(handle_color)\n        translate([0, 0, -8])\n        cylinder(h = 8, d = 14, $fn = 36);\n        \n        // Blade base\n        color(blade_color)\n        translate([0, 0, -18])\n        cylinder(h = 10, d = 12, $fn = 6);\n        \n        // Main blade\n        color(blade_color)\n        translate([0, 0, -38])\n        blade_shape();\n        \n        // Blade stiffening ribs\n        for (i = [-1:1]) {\n            color(blade_color)\n            translate([i * 3, 0, -28])\n            cube([1, 20, 2], center = true);\n        }\n    }\n}\n\n// Blade shape module\nmodule blade_shape() {\n    difference() {\n        // Main blade body - tapered\n        translate([0, 0, 0])\n        linear_extrude(height = 20, scale = [0.4, 1])\n        polygon(points = [\n            [0, -15],      // Left tip\n            [0, 15],       // Right tip\n            [25, 12],      // Right back\n            [25, -12]      // Left back\n        ]);\n        \n        // Blade edge bevel\n        translate([0, 0, -0.5])\n        linear_extrude(height = 21)\n        polygon(points = [\n            [24, -11],\n            [24, 11],\n            [22, 9],\n            [22, -9]\n        ]);\n        \n        // Central channel for coating flow\n        translate([12, 0, 10])\n        rotate([0, 90, 0])\n        cylinder(h = 30, d = 2, $fn = 16);\n    }\n}\n\n// Render the complete coating knife\ncoating_knife();",
    "renders": true
  },
  {
    "tool": "sealer",
    "openscad_code": "// Heat Bag Sealer - Medium complexity realistic style\n// Approx 95mm long, 40mm wide, 20mm thick\n\n$fn = 32;\n\nmodule handle() {\n    color(\"dimgray\")\n    difference() {\n        union() {\n            // Main handle body\n            translate([0, 0, 5])\n                cube([80, 25, 10], center=true);\n            \n            // Contoured grip\n            for(i = [-30:10:30])\n                translate([i, -12, 5])\n                    rotate([0, 90, 0])\n                        cylinder(h=2, r1=6, r2=4);\n        }\n        \n        // Grip cutouts\n        translate([0, 0, 10])\n            cube([70, 22, 5], center=true);\n        \n        for(i = [-25:12.5:25])\n            translate([i, -12.5, 5])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r=2.5);\n    }\n}\n\nmodule hinge() {\n    color(\"silver\")\n    union() {\n        // Left hinge\n        translate([-40, 0, 0])\n            cylinder(h=8, r=3, center=true);\n        \n        // Right hinge\n        translate([40, 0, 0])\n            cylinder(h=8, r=3, center=true);\n        \n        // Center pin\n        cylinder(h=85, r=1.5, center=true);\n    }\n}\n\nmodule sealing_jaw() {\n    color(\"firebrick\")\n    difference() {\n        // Jaw body\n        translate([0, 0, -8])\n            cube([75, 8, 16], center=true);\n        \n        // Heating element channel\n        translate([0, 0, -2])\n            cube([70, 5, 3], center=true);\n        \n        // Wire groove\n        translate([0, 4.1, -2])\n            cube([70, 0.5, 0.5], center=true);\n    }\n    \n    // Teflon strip\n    color(\"lightgray\")\n    translate([0, -4.1, -8])\n        cube([70, 0.5, 16], center=true);\n}\n\nmodule top_half() {\n    union() {\n        translate([0, 0, 10])\n            handle();\n        \n        translate([0, 12.5, 0])\n            sealing_jaw();\n        \n        translate([0, -12.5, 5])\n            hinge();\n    }\n}\n\nmodule bottom_half() {\n    mirror([0, 0, 1])\n        top_half();\n}\n\n// Main assembly\nunion() {\n    top_half();\n    bottom_half();\n    \n    // Power indicator LED\n    color(\"red\")\n    translate([30, 15, 5])\n        cylinder(h=2, r=2);\n    \n    // ON switch\n    color(\"forestgreen\")\n    translate([-30, 15, 5])\n        cube([8, 4, 3], center=true);\n}\n\n// Safety lock tab\ncolor(\"gold\")\ntranslate([-35, 0, 0])\n    cube([5, 2, 15], center=true);",
    "renders": true
  },
  {
    "tool": "finisher",
    "openscad_code": "// Finisher Tool - Drywall Knife / Joint Knife\n// Realistic style, medium complexity\n// 3D printable design with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Overall dimensions\nblade_length = 75;\nblade_width = 28;\nblade_thickness = 1.2;\nhandle_length = 85;\nhandle_diameter = 22;\nferrule_length = 12;\n\nmodule handle_grip() {\n    // Main handle body with grip texture\n    color(\"DarkGoldenrod\")\n    difference() {\n        cylinder(h = handle_length, d = handle_diameter);\n        \n        // Grip rings\n        for (i = [0:5:handle_length-15]) {\n            translate([0, 0, i + 5])\n                cylinder(h = 2, d = handle_diameter - 2);\n        }\n        \n        // Hanging hole\n        translate([0, 0, handle_length - 8])\n            rotate([90, 0, 0])\n                cylinder(h = handle_diameter, d = 5, center = true);\n    }\n    \n    // End cap detail\n    translate([0, 0, handle_length - 2])\n        cylinder(h = 4, d = handle_diameter + 1);\n}\n\nmodule ferrule() {\n    // Metal ferrule connecting handle to blade\n    color(\"Silver\")\n    difference() {\n        cylinder(h = ferrule_length, d = handle_diameter + 2);\n        \n        // Three decorative bands\n        for (i = [2:3:ferrule_length-4]) {\n            translate([0, 0, i])\n                cylinder(h = 1, d = handle_diameter + 4);\n        }\n    }\n}\n\nmodule blade() {\n    // Main blade with tapered end\n    color(\"Silver\")\n    union() {\n        // Main blade body\n        translate([0, 0, -blade_thickness/2])\n            cube([blade_length, blade_width, blade_thickness], center = false);\n        \n        // Tapered tip\n        translate([blade_length - 15, 0, 0])\n            scale([1, 0.85, 1])\n                cylinder(h = 15, d1 = blade_width, d2 = blade_width * 0.7);\n        \n        // Blade spine reinforcement\n        translate([0, blade_width/2 - 1, 0])\n            cube([blade_length - 5, 2, blade_thickness + 0.5]);\n    }\n    \n    // Manufacturer marking (raised text)\n    color(\"Gray\")\n    translate([10, blade_width/2 + 2, blade_thickness/2 + 0.1])\n        cube([15, 2, 0.3]);\n}\n\nmodule full_tool() {\n    // Assemble the complete tool\n    union() {\n        // Handle and grip\n        translate([0, 0, 0])\n            handle_grip();\n        \n        // Ferrule\n        translate([0, 0, 0])\n            ferrule();\n        \n        // Blade (rotate to proper orientation)\n        translate([0, 0, ferrule_length])\n            rotate([90, 0, 0])\n                blade();\n    }\n}\n\n// Render the complete tool\nfull_tool();",
    "renders": true
  },
  {
    "tool": "welder",
    "openscad_code": "// Welder Tool - Medium Complexity Realistic Style\n// MIG-style welding torch with handle, neck, and nozzle\n\n// Main parameters\nhandle_length = 60;\nhandle_diameter = 25;\nneck_length = 40;\nneck_diameter = 15;\nnozzle_length = 25;\nnozzle_diameter = 18;\nwire_diameter = 2;\ntrigger_width = 15;\ntrigger_height = 8;\n\n// Colors\nhandle_color = \"DarkSlateGray\";\nmetal_color = \"Silver\";\nnozzle_color = \"Goldenrod\";\ntrigger_color = \"FireBrick\";\nwire_color = \"LightGray\";\n\n// Handle with grip pattern\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [5:10:handle_length-10]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=3, d=handle_diameter+2, $fn=32);\n                    cylinder(h=3.1, d=handle_diameter, $fn=32);\n                }\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length]) {\n            cylinder(h=5, d=handle_diameter+4, $fn=32);\n        }\n    }\n}\n\n// Trigger mechanism\nmodule trigger() {\n    color(trigger_color) {\n        translate([handle_diameter/2-2, -trigger_width/2, handle_length/2]) {\n            difference() {\n                cube([trigger_height, trigger_width, 20]);\n                translate([-1, 2, 2]) {\n                    cube([trigger_height+2, trigger_width-4, 16]);\n                }\n            }\n        }\n    }\n}\n\n// Cable entry\nmodule cable_entry() {\n    color(\"Black\") {\n        translate([0, 0, -5]) {\n            rotate([0, 180, 0]) {\n                cylinder(h=10, d1=handle_diameter/2, d2=handle_diameter/3, $fn=20);\n            }\n        }\n    }\n}\n\n// Neck with wire guide\nmodule neck() {\n    color(metal_color) {\n        translate([0, 0, handle_length+5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=neck_length, d=neck_diameter, $fn=32);\n                \n                // Wire guide tube\n                color(wire_color) {\n                    translate([0, neck_length, 0]) {\n                        cylinder(h=5, d=wire_diameter+3, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Welding nozzle with tip\nmodule nozzle() {\n    color(nozzle_color) {\n        translate([0, handle_length+5+neck_length, 0]) {\n            rotate([90, 0, 0]) {\n                // Main nozzle\n                cylinder(h=nozzle_length, d=nozzle_diameter, $fn=32);\n                \n                // Tapered tip\n                translate([0, nozzle_length, 0]) {\n                    cylinder(h=8, d1=nozzle_diameter, d2=nozzle_diameter/2, $fn=32);\n                }\n                \n                // Internal bore\n                difference() {\n                    cylinder(h=nozzle_length+8, d=nozzle_diameter, $fn=32);\n                    translate([0, 0, -1]) {\n                        cylinder(h=nozzle_length+10, d=nozzle_diameter-4, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Welding wire\nmodule welding_wire() {\n    color(wire_color) {\n        translate([0, handle_length+5+neck_length+nozzle_length+8, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=30, d=wire_diameter, $fn=16);\n            }\n        }\n    }\n}\n\n// Assemble the welder\nunion() {\n    handle();\n    trigger();\n    cable_entry();\n    neck();\n    nozzle();\n    welding_wire();\n}",
    "renders": true
  },
  {
    "tool": "solderer",
    "openscad_code": "$fa=1; $fs=1;\n\n/* Soldering Iron â€“ Realistic, medium-detail 3D-printable model\n   Total length â‰ˆ 85 mm\n   Uses only basic primitives, transformations, booleans, loops and modules\n   No support-required overhangs; 1 mm+ wall thickness everywhere\n*/\n\n// --- color shortcuts -------------------------------------------------\nmodule c_black() color([0.15,0.15,0.15]);\nmodule c_red()   color([0.9,0.15,0.15]);\nmodule c_orange() color([0.9,0.5,0.1]);\nmodule c_metal() color([0.7,0.7,0.75]);\n\n// --- grip ring pattern ----------------------------------------------\nmodule grip_ring(h=3, r=8.5, t=1) {\n    difference() {\n        cylinder(h=h, r=r, $fn=60);\n        for(a=[0:60:359])\n            rotate([0,0,a])\n                translate([r-t,0,-1])\n                    cube([t*2,h+2,t*2], center=true);\n    }\n}\n\n// --- Handle ----------------------------------------------------------\nmodule handle() {\n    c_black() union() {\n        // Main body\n        cylinder(h=45, r1=8.5, r2=7.5, $fn=60);\n        // Five anti-slip rings\n        for(i=[0:4]) translate([0,0,i*8+2]) grip_ring();\n        // Rear strain-relief taper\n        translate([0,0,45]) cylinder(h=12, r1=7.5, r2=6, $fn=60);\n        // Front collar\n        translate([0,0,-2]) cylinder(h=2, r=9.2, $fn=60);\n    }\n}\n\n// --- Metal sleeve ----------------------------------------------------\nmodule sleeve() {\n    c_metal()\n        cylinder(h=25, r=4.8, $fn=48);\n}\n\n// --- Heater tip ------------------------------------------------------\nmodule tip() {\n    c_orange()\n        union() {\n            cylinder(h=18, r1=4.3, r2=0.8, $fn=48);\n            // Small flat facet for realism\n            translate([0,0,18]) rotate([0,90,0])\n                cylinder(h=4, r=0.8, $fn=6);\n        }\n}\n\n// --- Power cord ------------------------------------------------------\nmodule powercord() {\n    c_red()\n        difference() {\n            // 2 mm thick flexible cable\n            rotate([90,0,0])\n                cylinder(h=40, r=3, center=true, $fn=32);\n            // Flat exit at handle rear\n            translate([0,0,-4]) cube([6,6,8], center=true);\n        }\n}\n\n// --- Assembly --------------------------------------------------------\ntranslate([0,0,0]) handle();\ntranslate([0,0,45-2]) sleeve();\ntranslate([0,0,45-2+25]) tip();\ntranslate([0,0,45-2+25+18-4]) powercord();",
    "renders": true
  },
  {
    "tool": "brazer",
    "openscad_code": "// Brazer Tool - Medium Complexity Realistic Style\n// Overall dimensions: ~85mm length, 15mm diameter\n\n$fn = 32;\n\n// Main color definitions\nbrass_color = [0.8, 0.6, 0.2];\nsteel_color = [0.5, 0.5, 0.55];\nhandle_color = [0.1, 0.1, 0.1];\n\n// Main assembly\nunion() {\n    // Handle assembly\n    translate([0, 0, 0]) handle_assembly();\n    \n    // Tip assembly\n    translate([0, 0, -70]) tip_assembly();\n    \n    // Gas connector\n    translate([0, 12, -35]) gas_connector();\n}\n\n// Handle module\nmodule handle_assembly() {\n    color(handle_color) {\n        // Main handle body\n        difference() {\n            cylinder(h = 45, d = 14);\n            \n            // Grip grooves\n            for(i = [0:4]) {\n                translate([0, 0, 5 + i * 8]) {\n                    rotate([0, 0, 45 + i * 15]) \n                    cube([15, 2, 1.5], center = true);\n                }\n            }\n            \n            // Trigger cutout\n            translate([0, 7, 25]) {\n                cube([8, 8, 15], center = true);\n            }\n        }\n        \n        // Trigger\n        translate([0, 7, 25]) {\n            rotate([15, 0, 0]) {\n                cube([6, 2, 12], center = true);\n            }\n        }\n        \n        // Safety switch\n        translate([5, 7, 30]) {\n            cube([4, 3, 6], center = true);\n        }\n    }\n}\n\n// Tip assembly\nmodule tip_assembly() {\n    color(brass_color) {\n        // Neck tube\n        cylinder(h = 25, d = 10);\n        \n        // Flame nozzle\n        translate([0, 0, -25]) {\n            difference() {\n                cylinder(h = 15, d1 = 8, d2 = 4);\n                \n                // Flame holes\n                for(i = [0:5]) {\n                    rotate([0, 0, i * 60]) {\n                        translate([3, 0, -5]) {\n                            rotate([90, 0, 0])\n                            cylinder(h = 10, d = 1.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Heat shield\n        color(steel_color) {\n            translate([0, 0, -15]) {\n                cylinder(h = 8, d = 20, center = true);\n            }\n        }\n    }\n}\n\n// Gas connector\nmodule gas_connector() {\n    color(steel_color) {\n        // Connector body\n        difference() {\n            cylinder(h = 12, d = 8);\n            \n            // Internal thread\n            cylinder(h = 12, d = 4);\n        }\n        \n        // Hex nut\n        translate([0, 0, 6]) {\n            cylinder(h = 5, d = 10, $fn = 6);\n        }\n        \n        // Small valve\n        translate([0, 0, -3]) {\n            sphere(d = 4);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "torch",
    "openscad_code": "// Realistic 3D Printable Torch Tool (Medium Complexity)\n// Overall dimensions: ~90mm long, ~25mm diameter\n\n// Main module for the complete torch\nmodule torch() {\n    // Handle assembly\n    color(\"DimGray\") handle_assembly();\n    \n    // Head assembly\n    color(\"Silver\") head_assembly();\n    \n    // Switch assembly\n    color(\"Black\") switch_assembly();\n    \n    // Glass lens\n    color(\"LightBlue\", 0.6) lens_assembly();\n}\n\n// Handle with grip pattern\nmodule handle_assembly() {\n    union() {\n        // Main handle body\n        cylinder(h=60, d=24, $fn=32);\n        \n        // Grip rings\n        for(i=[0:5:55]) {\n            translate([0, 0, i]) \n            difference() {\n                cylinder(h=3, d=26, $fn=32);\n                cylinder(h=3.2, d=22, $fn=32);\n            }\n        }\n        \n        // End cap with loop\n        translate([0, 0, 60]) {\n            cylinder(h=5, d=26, $fn=32);\n            translate([0, 12, 2.5]) rotate([90, 0, 0]) \n            difference() {\n                cylinder(h=8, d=6, $fn=16);\n                cylinder(h=8.2, d=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Head assembly with cooling fins\nmodule head_assembly() {\n    translate([0, 0, 65]) {\n        union() {\n            // Head body\n            cylinder(h=20, d=28, $fn=32);\n            \n            // Cooling fins\n            for(i=[0:3:15]) {\n                translate([0, 0, i]) \n                difference() {\n                    cylinder(h=1, d=34, $fn=32);\n                    cylinder(h=1.2, d=26, $fn=32);\n                }\n            }\n            \n            // Reflector cone\n            difference() {\n                cylinder(h=18, d=26, $fn=32);\n                translate([0, 0, 2]) cylinder(h=16, d1=22, d2=18, $fn=32);\n            }\n        }\n    }\n}\n\n// Switch assembly\nmodule switch_assembly() {\n    translate([12, 0, 35]) {\n        difference() {\n            // Switch housing\n            cube([8, 14, 6], center=true);\n            // Switch button\n            translate([0, 0, 3.1]) cube([6, 12, 3], center=true);\n        }\n    }\n}\n\n// Glass lens assembly\nmodule lens_assembly() {\n    translate([0, 0, 83]) {\n        difference() {\n            cylinder(h=2, d=24, $fn=32);\n            cylinder(h=2.2, d=20, $fn=32);\n        }\n    }\n}\n\n// Render the complete torch\ntorch();",
    "renders": true
  },
  {
    "tool": "oxyfuel",
    "openscad_code": "// Oxyfuel cutting torch â€“ medium-complexity realistic model\n// Overall height â‰ˆ 90 mm, printable without supports\n\n// Color scheme\n$fn=32;\n\nmodule grip() {\n    // Main ergonomic handle\n    color(\"slategray\")\n    difference() {\n        cylinder(h=55, d=25, center=false);\n        for(i=[0:3])\n            rotate([0,0,i*90])\n            translate([0,12.5,0])\n            cube([3,25,55],center=true);\n    }\n    // Rubber rings\n    for(pos=[10,30,50])\n        translate([0,0,pos])\n        color(\"black\")\n        cylinder(h=2.5,d=26.5);\n}\n\nmodule valve(colorName, angle) {\n    // Individual brass valve knob\n    rotate([0,0,angle])\n    translate([0,13,0])\n    color(colorName)\n    union() {\n        cylinder(h=8,d=8);\n        translate([0,0,4])\n        sphere(d=8);\n        // Knurling\n        for(i=[0:15])\n            rotate([0,0,i*22.5])\n            translate([0,4,4])\n            cube([1,1,8],center=true);\n    }\n}\n\nmodule torch_head() {\n    // Brass mixing chamber and head\n    color(\"goldenrod\")\n    union() {\n        // Body\n        cylinder(h=12,d=20);\n        translate([0,0,12])\n        cylinder(h=15,d1=20,d2=10);\n        translate([0,0,27])\n        cylinder(h=25,d=10);\n        // Nozzle tip\n        translate([0,0,52])\n        cylinder(h=8,d=6);\n    }\n    // Cutting lever\n    translate([0,-15,35])\n    rotate([0,0,-20])\n    color(\"darkred\")\n    union() {\n        cube([5,15,3],center=true);\n        translate([0,-7.5,5])\n        cylinder(h=10,d=5,center=false);\n    }\n    // Hoses entry\n    translate([0,0,-3])\n    color(\"darkgreen\")\n    cylinder(h=6,d=8);\n    translate([5,0,-3])\n    color(\"darkred\")\n    cylinder(h=6,d=8);\n}\n\nmodule gauges() {\n    // Two pressure gauges on top\n    for(side=[-1,1])\n    translate([side*10,0,60])\n    color(\"silver\")\n    difference() {\n        cylinder(h=8,d=12);\n        translate([0,0,-1])\n        cylinder(h=10,d=10);\n        // Face\n        translate([0,0,1])\n        color(\"black\")\n        cylinder(h=0.5,d=8);\n    }\n}\n\n// Assembly\nunion() {\n    grip();\n    translate([0,0,55])\n    torch_head();\n    // Valves\n    valve(\"darkgreen\",  0);\n    valve(\"darkred\",  120);\n    valve(\"goldenrod\", 240);\n    gauges();\n}",
    "renders": true
  },
  {
    "tool": "arc",
    "openscad_code": "// Arc Tool - OpenSCAD Model\n// A realistic carpenter's compass/arc drawing tool\n// Size: ~80mm length, 3D printable with no overhangs\n\n$fn = 50;\n\n// Main colors\ncolor_steel = [0.5, 0.5, 0.55];\ncolor_handle = [0.1, 0.1, 0.1];\ncolor_grip = [0.15, 0.15, 0.15];\ncolor_pivot = [0.7, 0.7, 0.7];\n\n// Main assembly\nmodule arc_tool() {\n    // Handle assembly\n    translate([0, 0, 0]) {\n        handle();\n    }\n    \n    // Adjustable arm\n    translate([0, 0, 12]) {\n        rotate([0, 0, 45]) {\n            arm();\n        }\n    }\n    \n    // Pivot point\n    translate([0, 0, 0]) {\n        pivot();\n    }\n    \n    // Thumb screw for adjustment\n    translate([25, 0, 12]) {\n        thumb_screw();\n    }\n    \n    // Compass needle\n    translate([0, 0, 0]) {\n        needle();\n    }\n    \n    // Pencil holder\n    translate([45*cos(45), 45*sin(45), 12]) {\n        pencil_holder();\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    union() {\n        // Main handle body\n        color(color_handle) {\n            cylinder(h=50, r1=8, r2=6, center=false);\n            \n            // Top cap\n            translate([0, 0, 50]) {\n                cylinder(h=5, r=8, center=false);\n            }\n        }\n        \n        // Grip rings\n        for(i = [1:5:45]) {\n            color(color_grip) {\n                translate([0, 0, i]) {\n                    cylinder(h=3, r1=8.5, r2=8.5, center=false);\n                }\n            }\n        }\n    }\n}\n\n// Adjustable arm with measurement marks\nmodule arm() {\n    difference() {\n        // Main arm body\n        color(color_steel) {\n            translate([0, 0, -2]) {\n                cube([50, 4, 4], center=false);\n            }\n            \n            // Rounded end\n            translate([50, 2, 0]) {\n                cylinder(h=4, r=2, center=true);\n            }\n        }\n        \n        // Adjustment slot\n        translate([10, -0.5, -3]) {\n            cube([35, 1, 6], center=false);\n        }\n        \n        // Measurement marks (every 5mm)\n        for(i = [5:5:45]) {\n            translate([i, 4.1, 0]) {\n                cube([0.5, 0.5, 4], center=false);\n            }\n        }\n    }\n}\n\n// Pivot point with sharp needle\nmodule pivot() {\n    color(color_pivot) {\n        // Pivot base\n        cylinder(h=3, r=3, center=true);\n        \n        // Needle housing\n        translate([0, 0, -5]) {\n            cylinder(h=7, r1=2, r2=0.5, center=false);\n        }\n    }\n}\n\n// Thumb screw for tightening\nmodule thumb_screw() {\n    union() {\n        color(color_steel) {\n            // Screw shaft\n            translate([0, 0, -8]) {\n                cylinder(h=16, r=2, center=true);\n            }\n            \n            // Thumb wheel\n            translate([0, 0, 0]) {\n                cylinder(h=4, r=6, center=true);\n            }\n        }\n        \n        // Grip texture on wheel\n        for(i = [0:30:359]) {\n            rotate([0, 0, i]) {\n                translate([5, 0, 2]) {\n                    cube([1, 0.5, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Sharp needle point\nmodule needle() {\n    color(color_steel) {\n        translate([0, 0, -12]) {\n            cylinder(h=6, r1=1, r2=0.1, center=false);\n        }\n    }\n}\n\n// Pencil holder at end of arm\nmodule pencil_holder() {\n    difference() {\n        color(color_steel) {\n            // Holder body\n            cylinder(h=8, r=3, center=true);\n            \n            // Top bevel\n            translate([0, 0, 4]) {\n                cylinder(h=2, r1=3, r2=3.5, center=true);\n            }\n        }\n        \n        // Pencil hole (2mm diameter)\n        translate([0, 0, -5]) {\n            cylinder(h=10, r=1, center=false);\n        }\n        \n        // Set screw hole\n        translate([3, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=6, r=1, center=true);\n            }\n        }\n    }\n    \n    // Set screw\n    color(color_steel) {\n        translate([3, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=3, r=1.2, center=true);\n            }\n        }\n    }\n}\n\n// Render the complete tool\narc_tool();",
    "renders": true
  },
  {
    "tool": "mig",
    "openscad_code": "// MIG Welding Torch - Realistic style, medium complexity\n// Overall length ~85mm, designed for 3D printing\n\n// Color constants\n$fn = 32;\n\n// Main module\nmodule mig_torch() {\n    color(\"silver\") {\n        // Torch body\n        translate([0, 0, 10]) cylinder(h=40, d1=12, d2=10);\n        \n        // Handle grip\n        translate([0, 0, 5]) grip();\n        \n        // Neck\n        translate([0, 0, 50]) rotate([15, 0, 0]) \n            cylinder(h=25, d1=10, d2=8);\n            \n        // Nozzle\n        translate([0, 0, 75]) rotate([15, 0, 0]) \n            cylinder(h=15, d1=8, d2=6);\n            \n        // Contact tip\n        translate([0, 0, 90]) rotate([15, 0, 0])\n            cylinder(h=5, d=3);\n    }\n    \n    // Gas shroud\n    color(\"darkslategray\") {\n        translate([0, 0, 75]) rotate([15, 0, 0])\n            difference() {\n                cylinder(h=12, d=12);\n                translate([0, 0, -1]) cylinder(h=14, d=9);\n            }\n    }\n    \n    // Trigger\n    color(\"red\") {\n        translate([6, 0, 30]) rotate([0, 90, 0])\n            difference() {\n                cylinder(h=8, d=5);\n                translate([0, -3, -3]) cube([6, 6, 6]);\n            }\n    }\n    \n    // Cable\n    color(\"black\") {\n        translate([0, 0, 0]) rotate([0, 180, 0])\n            cylinder(h=20, d=15);\n            \n        // Cable ribs for flexibility\n        for(i = [1:2:18]) {\n            translate([0, 0, -i]) cylinder(h=1, d=16);\n        }\n    }\n    \n    // Wire liner\n    color(\"gold\") {\n        translate([0, 0, 50]) rotate([15, 0, 0])\n            cylinder(h=45, d=1.2);\n    }\n}\n\n// Grip module with finger grooves\nmodule grip() {\n    difference() {\n        cylinder(h=30, d=15);\n        \n        // Finger grooves\n        for(i = [0:4]) {\n            rotate([0, 0, i*72-144]) {\n                translate([6.5, 0, 10]) rotate([90, 0, 0])\n                    cylinder(h=8, d=3);\n                translate([6.5, 0, 20]) rotate([90, 0, 0])\n                    cylinder(h=8, d=3);\n            }\n        }\n    }\n}\n\n// Assembly\nmig_torch();",
    "renders": true
  },
  {
    "tool": "tig",
    "openscad_code": "// TIG Welding Torch - Medium complexity realistic style\n// Overall length: ~95mm, designed for 3D printing\n\n// Color definitions\n$fn = 32;\n\nmodule torch_handle() {\n    // Main handle body with grip texture\n    difference() {\n        // Handle tube\n        color(\"darkslategray\") \n        cylinder(h=60, d=22);\n        \n        // Grip grooves\n        for(i = [0:5:55]) {\n            translate([0, 0, i+2])\n                cylinder(h=1.5, d=25);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, -1])\n        color(\"gray\") \n        cylinder(h=4, d=24);\n}\n\nmodule gas_valve() {\n    // Valve body\n    translate([0, 0, 60])\n    union() {\n        color(\"silver\")\n        cylinder(h=8, d=12);\n        \n        // Valve knob\n        translate([0, 0, 8])\n        rotate([0, 0, 45])\n        color(\"red\")\n        cylinder(h=5, d=15);\n    }\n}\n\nmodule cable_connector() {\n    // Cable strain relief\n    translate([0, 0, -5])\n    color(\"black\")\n    cylinder(h=8, d1=24, d2=18);\n}\n\nmodule torch_head() {\n    // Head assembly\n    translate([0, 0, 68])\n    union() {\n        // Head body\n        color(\"darkgray\")\n        cylinder(h=15, d=18);\n        \n        // Nozzle\n        translate([0, 0, 15])\n        color(\"gold\")\n        cylinder(h=8, d1=18, d2=12);\n        \n        // Tungsten electrode\n        translate([0, 0, 23])\n        color(\"lightgray\")\n        cylinder(h=15, d=2.4);\n    }\n}\n\nmodule trigger() {\n    // Trigger mechanism\n    translate([8, 0, 45])\n    rotate([90, 0, 0])\n    union() {\n        color(\"red\")\n        difference() {\n            // Trigger lever\n            cube([12, 6, 15], center=true);\n            \n            // Rounded edges\n            translate([0, 0, 7.5])\n                sphere(d=12);\n            translate([0, 0, -7.5])\n                sphere(d=12);\n        }\n        \n        // Trigger guard\n        color(\"darkslategray\")\n        translate([0, -6, 0])\n        cube([14, 2, 18], center=true);\n    }\n}\n\nmodule cooling_fins() {\n    // Heat dissipating fins\n    for(i = [0:3:12]) {\n        translate([0, 0, 67-i])\n        color(\"silver\")\n        cylinder(h=1, d=20);\n    }\n}\n\n// Assembly\nunion() {\n    torch_handle();\n    gas_valve();\n    cable_connector();\n    torch_head();\n    trigger();\n    cooling_fins();\n}",
    "renders": true
  },
  {
    "tool": "stick",
    "openscad_code": "// Realistic Stick Tool - 3D Printable Walking Stick\n// Medium complexity with functional features\n\n// Overall dimensions\nstick_length = 90;\nhandle_height = 20;\ntip_length = 10;\ndiameter = 8;\n\n// Colors\nwood_color = \"#8B4513\";\nmetal_color = \"#C0C0C0\";\nrubber_color = \"#2F2F2F\";\n\n// Main shaft module\nmodule shaft() {\n    color(wood_color) {\n        // Primary shaft\n        cylinder(h=stick_length - handle_height - tip_length, d=diameter, $fn=24);\n        \n        // Wood grain texture rings\n        for(i = [0:5:stick_length - handle_height - tip_length - 5]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=1, d=diameter + 0.2, $fn=24);\n                    cylinder(h=1.2, d=diameter - 0.5, $fn=24);\n                }\n            }\n        }\n    }\n}\n\n// Contoured handle\nmodule handle() {\n    color(wood_color) {\n        translate([0, 0, stick_length - handle_height]) {\n            // Handle base\n            cylinder(h=8, d=diameter + 4, $fn=24);\n            \n            // Ergonomic grip shape\n            translate([0, 0, 8]) {\n                scale([1.3, 1, 1]) {\n                    sphere(d=diameter + 6, $fn=24);\n                }\n            }\n            \n            // Grip grooves\n            for(i = [0:30:150]) {\n                rotate([0, 0, i]) {\n                    translate([diameter/2 + 2, 0, 12]) {\n                        cube([1, 0.5, 6], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Metal collar reinforcement\nmodule collar() {\n    color(metal_color) {\n        translate([0, 0, stick_length - handle_height - 5]) {\n            cylinder(h=5, d=diameter + 2, $fn=24);\n            \n            // Decorative ring\n            translate([0, 0, 2.5]) {\n                cylinder(h=0.5, d=diameter + 2.5, $fn=24);\n            }\n        }\n    }\n}\n\n// Rubber ferrule tip\nmodule tip() {\n    color(rubber_color) {\n        translate([0, 0, -tip_length]) {\n            // Main tip\n            cylinder(h=tip_length, d1=diameter, d2=diameter - 1, $fn=24);\n            \n            // Grip rings\n            for(i = [1:2:tip_length-1]) {\n                translate([0, 0, -i]) {\n                    difference() {\n                        cylinder(h=0.5, d=diameter, $fn=24);\n                        cylinder(h=0.7, d=diameter - 1, $fn=24);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wrist strap attachment point\nmodule strap_loop() {\n    color(metal_color) {\n        translate([diameter/2 + 3, 0, stick_length - handle_height/2]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    torus(diameter + 2, 1.5, $fn=24);\n                    translate([0, 0, -1]) {\n                        cube([diameter + 5, 2, 2], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Helper for torus\nmodule torus(outer, inner, $fn=24) {\n    rotate_extrude($fn=$fn) {\n        translate([outer, 0, 0]) {\n            circle(r=inner, $fn=$fn);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    shaft();\n    handle();\n    collar();\n    tip();\n    strap_loop();\n}",
    "renders": true
  },
  {
    "tool": "spot",
    "openscad_code": "// Spot Tool (automotive bodywork hammer) â€“ realistic style, medium complexity\n// Overall length â‰ˆ 90 mm, printable in one piece\n\n$fn = 36;\n\n// Main colors\ncolor_handle = [0.15, 0.15, 0.15];   // black rubber\ncolor_shaft  = [0.75, 0.75, 0.75];   // steel\ncolor_head   = [0.65, 0.65, 0.65];   // forged steel\ncolor_grip   = [0.10, 0.10, 0.10];   // textured rubber rings\n\n// Convenience module for rounded rectangles\nmodule rounded_cube(s, r) {\n    hull() for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n        translate([dx*(s.x/2-r), dy*(s.y/2-r), dz*(s.z/2-r)])\n            sphere(r=r);\n}\n\n// Handle shaft\nmodule handle_shaft() {\n    color(color_handle)\n    difference() {\n        cylinder(h=70, d=12, center=false);\n        // longitudinal cavity for weight reduction\n        translate([0,0,-1])\n            cylinder(h=72, d=8, center=false);\n    }\n}\n\n// Rubber grip rings\nmodule grip_rings() {\n    color(color_grip)\n    for(i=[5:10:55])\n        translate([0,0,i])\n            difference() {\n                cylinder(h=3, d=14, center=false);\n                cylinder(h=3.2, d=11.5, center=false);\n            }\n}\n\n// Neck between handle and head\nmodule neck() {\n    color(color_shaft)\n    rotate([0,90,0])\n        cylinder(h=18, d1=10, d2=14, center=false);\n}\n\n// Main forging head (cross-peen style)\nmodule hammer_head() {\n    color(color_head)\n    union() {\n        // large flat face\n        translate([0,0,-15])\n            cylinder(h=10, d=22, center=false);\n        // peen face\n        translate([0,0,15])\n            cylinder(h=8, d=14, center=false);\n        // central body\n        rotate([90,0,0])\n            cylinder(h=30, d=20, center=true);\n    }\n}\n\n// Assembly\nmodule spot_tool() {\n    difference() {\n        union() {\n            handle_shaft();\n            grip_rings();\n            translate([0,0,70]) neck();\n            translate([0,0,88]) rotate([0,0,0]) hammer_head();\n        }\n        // alignment notch on handle end for 3D-printing bed adherence\n        translate([0,0,-0.2])\n            cube([8,2,0.4], center=true);\n    }\n}\n\nspot_tool();",
    "renders": true
  },
  {
    "tool": "seam",
    "openscad_code": "// Seam Tool - Realistic Medium Complexity\n// Professional seam ripper with ergonomic handle and safety cap\n\n$fn = 36;\n\n// Main colors\nhandle_color = \"SaddleBrown\";\nmetal_color = \"Silver\";\ncap_color = \"DarkGray\";\ngrip_color = \"Black\";\n\n// Overall dimensions\nhandle_length = 80;\nhandle_diameter = 15;\nblade_length = 35;\ncap_length = 40;\n\n// Handle module with ergonomic grip\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Ergonomic bulge\n        translate([0, 0, 10])\n            scale([1.2, 1.2, 1.1])\n                cylinder(h=30, d=handle_diameter, center=true);\n        \n        // Finger grooves\n        for(i = [-30:10:30]) {\n            translate([0, handle_diameter/2 - 1, i])\n                rotate([90, 0, 0])\n                    cylinder(h=2, d=handle_diameter/3, center=true);\n        }\n        \n        // End cap detail\n        translate([0, 0, handle_length/2 + 2])\n            cylinder(h=4, d=handle_diameter + 2, center=true);\n    }\n    \n    // Rubber grip section\n    color(grip_color) {\n        translate([0, 0, -15])\n            cylinder(h=25, d=handle_diameter + 1, center=true);\n        \n        // Grip texture lines\n        for(i = [-20:5:20]) {\n            rotate([0, 0, i])\n                translate([handle_diameter/2 + 0.5, 0, -15])\n                    cube([0.5, 25, 1], center=true);\n        }\n    }\n}\n\n// Metal shaft with blade\nmodule blade_assembly() {\n    color(metal_color) {\n        // Main shaft\n        translate([0, 0, handle_length/2 + blade_length/2 - 5])\n            cylinder(h=blade_length, d=3, center=true);\n        \n        // Blade holder\n        translate([0, 0, handle_length/2 + 5])\n            cylinder(h=8, d=5, center=true);\n        \n        // Actual blade (curved with sharp tip)\n        translate([0, 0, handle_length/2 + blade_length - 5])\n            rotate([0, 0, 45])\n                difference() {\n                    cylinder(h=15, d=2, center=true);\n                    translate([-2, -2, -2])\n                        cube([4, 4, 20]);\n                }\n        \n        // Ball tip for safety\n        translate([0, 0, handle_length/2])\n            sphere(d=3.5);\n    }\n}\n\n// Safety cap with ventilation holes\nmodule safety_cap() {\n    color(cap_color) {\n        difference() {\n            // Main cap body\n            translate([0, 0, cap_length/2])\n                cylinder(h=cap_length, d=handle_diameter + 1, center=true);\n            \n            // Internal cavity\n            translate([0, 0, cap_length/2 + 5])\n                cylinder(h=cap_length, d=handle_diameter - 2, center=true);\n            \n            // Ventilation holes\n            for(i = [0:60:300]) {\n                rotate([0, 0, i])\n                    translate([handle_diameter/2, 0, cap_length/2])\n                        rotate([90, 0, 0])\n                            cylinder(h=handle_diameter + 1, d=2, center=true);\n            }\n            \n            // End hole\n            translate([0, 0, cap_length])\n                cylinder(h=2, d=4, center=true);\n        }\n        \n        // Cap grip ridges\n        for(i = [5:5:cap_length-5]) {\n            translate([0, 0, i])\n                cylinder(h=1, d=handle_diameter + 2, center=true);\n        }\n    }\n}\n\n// Assembly\nhandle();\nblade_assembly();\n\n// Optional: Display with cap on\ntranslate([0, -30, 0])\n    safety_cap();",
    "renders": true
  },
  {
    "tool": "induction",
    "openscad_code": "// Induction Coil Tool - Medium Complexity Realistic Style\n// 3D printable induction heating coil assembly with water-cooled copper coil and mounting base\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main colors\ncolor_copper = [184/255, 115/255, 51/255];\ncolor_plastic = [0.2, 0.2, 0.2];\ncolor_metal = [0.5, 0.5, 0.5];\ncolor_water = [0.2, 0.4, 0.8, 0.6];\n\nmodule induction_coil() {\n    // Water-cooled copper coil - 5 turns\n    color(color_copper)\n    union() {\n        for(i = [0:4]) {\n            translate([0, 0, 8*i])\n            rotate([90, 0, 0])\n            difference() {\n                // Outer copper tube\n                cylinder(h=50, d=6, center=true);\n                // Inner water channel\n                cylinder(h=51, d=3, center=true);\n            }\n        }\n        \n        // Vertical connection tubes\n        translate([-25, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=30, d=6, center=true);\n            cylinder(h=31, d=3, center=true);\n        }\n        \n        translate([25, 0, 32])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=30, d=6, center=true);\n            cylinder(h=31, d=3, center=true);\n        }\n    }\n    \n    // Water inlet/outlet fittings\n    color(color_metal)\n    union() {\n        translate([-40, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=15, d=8);\n        \n        translate([40, 0, 32])\n        rotate([0, 90, 0])\n        cylinder(h=15, d=8);\n    }\n}\n\nmodule mounting_base() {\n    // Main base structure\n    color(color_plastic)\n    difference() {\n        // Base plate\n        cube([80, 60, 8], center=true);\n        \n        // Mounting holes\n        for(x = [-30, 30])\n        for(y = [-20, 20])\n        translate([x, y, -1])\n        cylinder(h=10, d=4);\n    }\n    \n    // Vertical support posts\n    color(color_metal)\n    union() {\n        translate([-20, 0, 12])\n        cube([8, 8, 25], center=true);\n        \n        translate([20, 0, 12])\n        cube([8, 8, 25], center=true);\n        \n        // Cross support\n        translate([0, 0, 24])\n        cube([48, 8, 4], center=true);\n    }\n    \n    // Coil mounting clamps\n    color(color_metal)\n    union() {\n        translate([-20, 0, 20])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=12, d=10);\n            cylinder(h=13, d=6);\n        }\n        \n        translate([20, 0, 20])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=12, d=10);\n            cylinder(h=13, d=6);\n        }\n    }\n}\n\nmodule work_surface() {\n    // Ceramic work surface\n    color([0.8, 0.8, 0.8])\n    translate([0, 0, -10])\n    cube([40, 40, 2], center=true);\n    \n    // Heat-resistant markings\n    color([0.1, 0.1, 0.1])\n    for(i = [-1:1]) {\n        translate([i*10, 0, -9])\n        cube([1, 30, 0.5], center=true);\n        translate([0, i*10, -9])\n        cube([30, 1, 0.5], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 8])\nmounting_base();\n\ntranslate([0, 0, 32])\ninduction_coil();\n\nwork_surface();",
    "renders": true
  },
  {
    "tool": "ultrasonic",
    "openscad_code": "// Ultrasonic scaler - realistic medium-complexity model\n// Dimensions: ~85 mm total length, printable without support\n\nmodule scaler_body() {\n    // Main stainless-steel handpiece\n    color([0.7,0.7,0.8]) difference() {\n        union() {\n            cylinder(h=65, d1=14, d2=12, $fn=48);          // tapered grip\n            translate([0,0,65]) cylinder(h=8, d=12, $fn=48); // neck\n        }\n        // Cooling-water channel\n        translate([0,0,-1]) cylinder(h=75, d=2, $fn=32);\n    }\n}\n\nmodule grip_pattern() {\n    // Diamond knurling rings\n    color([0.5,0.5,0.55])\n    for(i=[0:5:50]) {\n        rotate([0,0,i]) translate([0,0,25]) \n            cylinder(h=3, d=15.5, $fn=4);\n    }\n}\n\nmodule tip_connection() {\n    // Torque-lock coupling\n    color([0.6,0.6,0.7]) difference() {\n        cylinder(h=6, d=10, $fn=6);                     // hex body\n        translate([0,0,-1]) cylinder(h=8, d=4, $fn=32); // internal thread\n    }\n}\n\nmodule scaling_tip() {\n    // Replaceable stainless tip\n    color([0.8,0.8,0.9]) union() {\n        translate([0,0,73]) rotate([-15,0,0]) {\n            cylinder(h=12, d1=3, d2=2, $fn=16);         // shank\n            translate([0,0,12]) rotate([0,0,15]) \n                cube([0.8,1.6,8]);                      // curved blade\n        }\n    }\n}\n\nmodule water_tube() {\n    // Transparent polyurethane tubing\n    color([0.1,0.4,0.9,0.6]) \n    translate([0,7,30]) rotate([90,0,0])\n        cylinder(h=25, d=4, $fn=24);\n}\n\nmodule power_cable() {\n    // Silicone-coated cable entry\n    color([0.2,0.2,0.2])\n    translate([0,-7,10]) rotate([-90,0,0])\n        cylinder(h=20, d=5, $fn=24);\n}\n\nmodule activation_ring() {\n    // Touch-sensitive control ring\n    color([0.0,0.3,0.6]) difference() {\n        cylinder(h=5, d=16, $fn=64);                    // blue ring\n        translate([0,0,-1]) cylinder(h=7, d=14, $fn=64); // recess\n    }\n}\n\n// Assembly\nunion() {\n    scaler_body();\n    grip_pattern();\n    translate([0,0,65]) tip_connection();\n    scaling_tip();\n    activation_ring();\n    water_tube();\n    power_cable();\n}",
    "renders": true
  },
  {
    "tool": "infrared",
    "openscad_code": "// Realistic Infrared Thermometer (Medium Complexity)\n// 3D-printable, 90 mm long, no overhangs >45Â°\n\n$fn = 36;\n\n// Main body color\ncolor(\"DarkSlateGray\")\ndifference() {\n    // Grip handle\n    translate([0,0,0])\n    cylinder(h=60, d1=28, d2=32, center=true);\n    \n    // Battery door slot\n    translate([0,-16,0])\n    cube([30,2,55], center=true);\n}\n\n// Display housing\ncolor(\"Black\")\ntranslate([0,0,42])\ncylinder(h=12, d=40, center=true);\n\n// LCD screen\ncolor(\"LightBlue\")\ntranslate([0,0,48.5])\ncube([28,1,22], center=true);\n\n// IR sensor cone\nmodule sensor_cone() {\n    difference() {\n        color(\"FireBrick\")\n        cylinder(h=15, d1=12, d2=8);\n        \n        // Sensor cavity\n        color(\"Black\")\n        translate([0,0,7])\n        cylinder(h=8, d=6);\n    }\n}\n\n// Mount sensor on front\ntranslate([0,0,-37.5])\nrotate([180,0,0])\nsensor_cone();\n\n// Trigger button\ncolor(\"Crimson\")\ntranslate([0,18,-5])\ncylinder(h=8, d=12);\n\n// Mode button\ncolor(\"White\")\ntranslate([12,18,5])\ncylinder(h=3, d=6);\n\n// Unit button\ntranslate([-12,18,5])\ncylinder(h=3, d=6);\n\n// Grip ridges\nmodule grip_ridges() {\n    for (i=[-25:5:25]) {\n        translate([0,0,i])\n        rotate([90,0,0])\n        cylinder(h=30, d=2, center=true);\n    }\n}\n\ncolor(\"DimGray\")\ntranslate([0,15,0])\ngrip_ridges();\n\n// Laser pointer (decorative)\ncolor(\"Red\")\ntranslate([0,0,-45])\ncylinder(h=2, d=1);\n\n// Brand label recess\ncolor(\"Silver\")\ntranslate([0,-16.5,20])\ncube([25,0.5,8], center=true);\n\n// Hanger hole\ntranslate([0,0,35])\nrotate([90,0,0])\ncylinder(h=6, d=6);",
    "renders": true
  },
  {
    "tool": "microwave",
    "openscad_code": "// Microwave Tool - Realistic 3D Printable Model\n// Dimensions: 70mm x 50mm x 40mm\n\n// Main body parameters\nbody_width = 70;\nbody_height = 50;\nbody_depth = 40;\nwall_thickness = 2;\n\n// Door parameters\ndoor_thickness = 2;\ndoor_width = 50;\ndoor_height = 30;\n\n// Handle parameters\nhandle_length = 20;\nhandle_radius = 3;\n\n// Feet parameters\nfoot_height = 3;\nfoot_radius = 4;\n\n// Control panel parameters\npanel_width = 15;\npanel_height = 25;\nbutton_radius = 2;\n\n// Color definitions\n$fn = 32;\n\n// Main microwave body\nmodule microwave_body() {\n    difference() {\n        // Outer shell\n        color([0.8, 0.8, 0.8])  // Light gray\n        cube([body_width, body_depth, body_height]);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n        color([0.4, 0.4, 0.4])  // Dark gray interior\n        cube([body_width - 2*wall_thickness, \n              body_depth - 2*wall_thickness, \n              body_height - 2*wall_thickness]);\n    }\n}\n\n// Microwave door with window\nmodule door() {\n    translate([0, body_depth - door_thickness, body_height/2 - door_height/2])\n    union() {\n        // Door frame\n        color([0.7, 0.7, 0.7])\n        cube([door_width, door_thickness, door_height]);\n        \n        // Window\n        translate([5, door_thickness/2 + 0.1, 5])\n        color([0.3, 0.3, 0.5, 0.7])  // Semi-transparent blue\n        cube([door_width - 10, 0.5, door_height - 10]);\n    }\n}\n\n// Door handle\nmodule door_handle() {\n    translate([door_width/2 - handle_length/2, \n               body_depth - door_thickness - 1, \n               body_height/2 + door_height/2 - 5])\n    rotate([90, 0, 0])\n    color([0.1, 0.1, 0.1])  // Black\n    cylinder(h=handle_length, r=handle_radius);\n}\n\n// Control panel\nmodule control_panel() {\n    translate([body_width - panel_width - 2, 2, body_height - panel_height - 2])\n    difference() {\n        // Panel base\n        color([0.2, 0.2, 0.2])  // Dark gray\n        cube([panel_width, body_depth/2, panel_height]);\n        \n        // Display screen\n        translate([2, 1, panel_height - 8])\n        color([0.1, 0.1, 0.1, 0.8])\n        cube([panel_width - 4, 0.5, 6]);\n        \n        // Buttons\n        for(i = [0:2]) {\n            for(j = [0:3]) {\n                translate([4 + i*4, 5, 5 + j*4])\n                color([0.9, 0.9, 0.9])\n                cylinder(h=0.5, r=button_radius);\n            }\n        }\n    }\n}\n\n// Ventilation grilles\nmodule vents() {\n    // Top vents\n    for(i = [0:4]) {\n        translate([10 + i*10, body_depth - 3, body_height - 1])\n        color([0.3, 0.3, 0.3])\n        cube([8, 1, 0.5]);\n    }\n    \n    // Side vents\n    for(i = [0:3]) {\n        translate([body_width - 1, 10 + i*8, 10 + i*5])\n        color([0.3, 0.3, 0.3])\n        cube([0.5, 6, 4]);\n    }\n}\n\n// Support feet\nmodule feet() {\n    for(x = [10, body_width - 10]) {\n        for(y = [10, body_depth - 10]) {\n            translate([x, y, 0])\n            color([0.2, 0.2, 0.2])\n            cylinder(h=foot_height, r=foot_radius);\n        }\n    }\n}\n\n// Power cord\nmodule power_cord() {\n    translate([body_width/2, body_depth, body_height/2])\n    rotate([90, 0, 0])\n    color([0.1, 0.1, 0.1])\n    linear_extrude(height=30, twist=90)\n    circle(r=2);\n}\n\n// Assemble the microwave\nmicrowave_body();\ndoor();\ndoor_handle();\ncontrol_panel();\nvents();\nfeet();\npower_cord();",
    "renders": true
  },
  {
    "tool": "electronbeam",
    "openscad_code": "// Electron-beam tool (hand-held welding gun style)\n// Overall length ~90 mm, safe for FDM printing\n\n// Color constants\n$fn = 32;\n\nmodule handle() {\n    // Main grip\n    difference() {\n        color(\"DarkSlateGray\")\n        cylinder(h = 70, d1 = 28, d2 = 24, center = false);\n        \n        // Grip rings\n        for (i = [0:3]) {\n            translate([0, 0, 5 + i*15])\n                cylinder(h = 2, d = 32, center = false);\n        }\n    }\n    \n    // Trigger guard\n    difference() {\n        translate([0, -15, 30])\n            rotate([90, 0, 0])\n            color(\"Black\")\n            cylinder(h = 30, d = 6, center = true);\n        \n        translate([0, -15, 30])\n            rotate([90, 0, 0])\n            cylinder(h = 30, d = 4, center = true);\n    }\n    \n    // Trigger\n    translate([0, -23, 30])\n        color(\"FireBrick\")\n        cube([6, 8, 20], center = true);\n}\n\nmodule cable_entry() {\n    // Strain relief boot\n    translate([0, 0, -5])\n        color(\"Black\")\n        cylinder(h = 15, d1 = 18, d2 = 8, center = false);\n    \n    // Power cable\n    translate([0, 0, -15])\n        color(\"Gray\")\n        cylinder(h = 30, d = 6, center = false);\n}\n\nmodule nozzle_assembly() {\n    // Insulator cone\n    color(\"Ivory\")\n    translate([0, 0, 75])\n        cylinder(h = 20, d1 = 24, d2 = 10, center = false);\n    \n    // Electron exit nozzle\n    color(\"Silver\")\n    translate([0, 0, 95])\n        cylinder(h = 10, d = 6, center = false);\n    \n    // Cooling fins\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 10, 80])\n                color(\"LightSteelBlue\")\n                cube([3, 6, 8], center = true);\n    }\n}\n\nmodule control_box() {\n    // Box on top of handle\n    translate([0, 0, 55])\n        color(\"Black\")\n        cube([18, 12, 12], center = true);\n    \n    // LED indicator\n    translate([0, 0, 63])\n        color(\"Lime\")\n        sphere(d = 3);\n}\n\nmodule focusing_lens() {\n    // Lens holder\n    difference() {\n        color(\"DimGray\")\n        translate([0, 0, 85])\n            cylinder(h = 8, d = 14, center = false);\n        \n        translate([0, 0, 87])\n            cylinder(h = 4, d = 8, center = false);\n    }\n    \n    // Glass lens representation\n    translate([0, 0, 87])\n        color(\"LightBlue\", 0.6)\n        cylinder(h = 2, d = 8, center = false);\n}\n\n// Assemble the tool\nunion() {\n    handle();\n    cable_entry();\n    nozzle_assembly();\n    control_box();\n    focusing_lens();\n}",
    "renders": true
  },
  {
    "tool": "friction",
    "openscad_code": "// Realistic Friction Welding Tool (Medium Complexity)\n// Designed for 3D printing with no overhangs\n// Overall size: ~70mm length\n\n// Main colors\nhandle_color = [0.1, 0.1, 0.1]; // Black rubber\nbody_color = [0.7, 0.7, 0.7]; // Aluminum\ntip_color = [0.5, 0.5, 0.5]; // Steel\naccent_color = [0.8, 0.2, 0.2]; // Red safety stripe\n\nmodule handle_grip() {\n    // Main handle body with ergonomic grip\n    color(handle_color)\n    difference() {\n        // Main handle cylinder\n        cylinder(h=35, d=25, $fn=32);\n        \n        // Grip texture rings\n        for(i = [5:5:30]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=23, $fn=32);\n        }\n        \n        // Safety stripe groove\n        translate([0, 0, 32])\n            cylinder(h=2, d=24.5, $fn=32);\n    }\n    \n    // Safety stripe\n    color(accent_color)\n    translate([0, 0, 32.5])\n        cylinder(h=1, d=25.2, $fn=32);\n}\n\nmodule motor_housing() {\n    // Main motor body\n    color(body_color)\n    difference() {\n        // Primary cylinder\n        cylinder(h=25, d=30, $fn=32);\n        \n        // Cooling vents\n        for(i = [5:5:20]) {\n            rotate([0, 0, i])\n                translate([12.5, 0, 10])\n                    cube([5, 2, 10], center=true);\n        }\n        \n        // Mounting holes\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n                translate([10, 0, 20])\n                    cylinder(h=5, d=3, $fn=8);\n        }\n    }\n    \n    // Motor cap\n    translate([0, 0, 25])\n        cylinder(h=5, d=32, $fn=32);\n}\n\nmodule chuck_assembly() {\n    // Chuck body\n    color(body_color)\n    difference() {\n        cylinder(h=15, d=20, $fn=24);\n        \n        // Chuck key holes\n        for(i = [0:90:359]) {\n            rotate([0, 0, i])\n                translate([7.5, 0, 7.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=10, d=2, $fn=8);\n        }\n    }\n    \n    // Collet\n    color(tip_color)\n    translate([0, 0, -5])\n        cylinder(h=10, d1=6, d2=10, $fn=16);\n}\n\nmodule friction_tip() {\n    // Replaceable friction tip\n    color(tip_color)\n    union() {\n        // Main tip body\n        cylinder(h=8, d=6, $fn=16);\n        \n        // Textured surface for friction\n        for(i = [0:45:359]) {\n            rotate([0, 0, i])\n                translate([2.8, 0, 4])\n                    cube([1, 0.5, 8], center=true);\n        }\n        \n        // Tip end with cross-hatch pattern\n        translate([0, 0, 8])\n            cylinder(h=2, d=6, $fn=16);\n    }\n}\n\nmodule power_cord() {\n    // Flexible power cord\n    color([0, 0, 0])\n    translate([-12.5, 0, 15])\n        rotate([90, 0, 0])\n            cylinder(h=40, d=6, $fn=16);\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle_grip();\n\ntranslate([0, 0, 35])\n    motor_housing();\n\ntranslate([0, 0, 65])\n    chuck_assembly();\n\ntranslate([0, 0, 80])\n    friction_tip();\n\ntranslate([0, 0, 0])\n    power_cord();",
    "renders": true
  },
  {
    "tool": "magnetic",
    "openscad_code": "// Magnetic Pickup Tool - Realistic Style with Medium Complexity\n// Overall length: 80mm, designed for 3D printing\n\n$fn = 32;  // Smooth curves for realism\n\n// Main colors\ncolor_handle = [0.1, 0.1, 0.1];      // Black rubberized grip\ncolor_shaft = [0.7, 0.7, 0.7];       // Metallic silver\ncolor_magnet = [0.9, 0, 0];          // Red magnet casing\ncolor_tip = [0.8, 0.8, 0.8];         // Chrome tip\n\n// Handle module with ergonomic grip pattern\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle body\n        cylinder(h = 35, d = 12, center = true);\n        \n        // Grip rings for better handling\n        for(i = [0:3:30]) {\n            translate([0, 0, -15 + i])\n            cylinder(h = 2, d1 = 12, d2 = 11.5, center = true);\n        }\n        \n        // End cap\n        translate([0, 0, 17.5])\n        cylinder(h = 3, d = 13, center = true);\n    }\n}\n\n// Telescoping shaft segments\nmodule shaft() {\n    color(color_shaft)\n    union() {\n        // Outer shaft\n        cylinder(h = 40, d = 6, center = true);\n        \n        // Inner shaft (retracted position)\n        translate([0, 0, 20])\n        cylinder(h = 35, d = 4, center = true);\n    }\n}\n\n// Magnetic tip assembly\nmodule magnet_tip() {\n    color(color_magnet)\n    union() {\n        // Protective casing\n        cylinder(h = 8, d = 8, center = true);\n        \n        // Magnet visible through window\n        difference() {\n            translate([0, 0, 0])\n            cylinder(h = 6, d = 6, center = true);\n            \n            // Cutout to show magnet\n            translate([2, 0, 0])\n            cube([4, 8, 6], center = true);\n        }\n    }\n    \n    // Chrome tip ring\n    color(color_tip)\n    translate([0, 0, 5])\n    cylinder(h = 2, d1 = 6, d2 = 5, center = true);\n}\n\n// Pocket clip\nmodule clip() {\n    color(color_shaft)\n    difference() {\n        // Main clip body\n        translate([-5, 0, 0])\n        cube([10, 2, 15], center = true);\n        \n        // Tapered end\n        translate([-5, 0, 7.5])\n        cube([10, 2.5, 5], center = true);\n    }\n}\n\n// Assembly\nmodule magnetic_tool() {\n    // Handle assembly\n    translate([0, 0, 17.5])\n    handle();\n    \n    // Shaft extending from handle\n    translate([0, 0, -5])\n    shaft();\n    \n    // Magnet tip at end\n    translate([0, 0, -30])\n    magnet_tip();\n    \n    // Clip attached to handle\n    rotate([0, 90, 0])\n    translate([0, 6, 0])\n    clip();\n}\n\n// Render the complete tool\nmagnetic_tool();",
    "renders": true
  },
  {
    "tool": "electrohydraulic",
    "openscad_code": "// Electrohydraulic crimping tool - medium complexity realistic style\n// Overall size ~80mm long\n\n$fn = 50;\n\nmodule handle_grip() {\n    // Textured rubber grip with ergonomic pattern\n    difference() {\n        cylinder(h = 35, d = 16);\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([5, 0, 2])\n                    cube([10, 4, 31], center = true);\n        }\n    }\n}\n\nmodule hydraulic_body() {\n    // Main hydraulic cylinder body\n    color(\"silver\") {\n        union() {\n            // Main cylinder\n            cylinder(h = 25, d = 20);\n            \n            // Pressure adjustment knob\n            translate([0, 0, 26])\n                cylinder(h = 8, d = 15);\n            \n            // Safety valve\n            translate([10, 0, 12])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, d = 6);\n        }\n    }\n}\n\nmodule jaw_mechanism() {\n    // Crimping jaws with replaceable dies\n    color(\"gray\") {\n        union() {\n            // Fixed jaw base\n            translate([0, 0, 0])\n                cube([12, 10, 15], center = true);\n            \n            // Movable jaw arm\n            translate([0, -12, 0])\n                cube([12, 14, 8], center = true);\n            \n            // Crimping dies\n            color(\"darkgray\") {\n                // Fixed die\n                translate([0, 5, 0])\n                    cube([8, 2, 6], center = true);\n                \n                // Movable die\n                translate([0, -12, 0])\n                    cube([8, 2, 6], center = true);\n            }\n        }\n    }\n}\n\nmodule electrical_housing() {\n    // Battery and motor housing\n    color(\"black\") {\n        difference() {\n            // Main housing\n            cube([22, 18, 30], center = true);\n            \n            // Battery compartment\n            translate([0, 0, -10])\n                cube([18, 14, 15], center = true);\n            \n            // Ventilation slots\n            for (i = [-1:1]) {\n                translate([12, i * 5, 0])\n                    cube([2, 3, 25], center = true);\n            }\n        }\n    }\n}\n\nmodule trigger_assembly() {\n    // Trigger and safety mechanism\n    color(\"red\") {\n        union() {\n            // Trigger\n            translate([0, -10, -20])\n                cube([12, 8, 20], center = true);\n            \n            // Safety switch\n            translate([8, -10, -15])\n                rotate([0, 90, 0])\n                    cylinder(h = 8, d = 6);\n        }\n    }\n}\n\nmodule led_indicator() {\n    // LED work light\n    color(\"yellow\") {\n        translate([0, 8, 10])\n            sphere(d = 4);\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle assembly\n    color(\"darkgreen\") {\n        translate([0, 0, -45])\n            handle_grip();\n    }\n    \n    // Hydraulic assembly\n    translate([0, 0, -15])\n        hydraulic_body();\n    \n    // Electrical assembly\n    translate([0, 0, 15])\n        electrical_housing();\n    \n    // Jaw mechanism\n    translate([0, 20, 0])\n        jaw_mechanism();\n    \n    // Controls\n    trigger_assembly();\n    \n    // Work light\n    led_indicator();\n    \n    // Cable strain relief\n    color(\"black\") {\n        translate([0, 0, 32])\n            cylinder(h = 8, d1 = 8, d2 = 5);\n    }\n}",
    "renders": true
  },
  {
    "tool": "electromagnetic",
    "openscad_code": "// Electromagnetic Pickup Tool - Medium Complexity\n// Realistic style with functional design for 3D printing\n\n$fn = 50;\n\n// Main colors\ncolor_aluminum = [0.7, 0.7, 0.7];\ncolor_plastic = [0.1, 0.1, 0.1];\ncolor_metal = [0.4, 0.4, 0.4];\ncolor_wire = [0.8, 0, 0];\n\nmodule handle_grip() {\n    difference() {\n        cylinder(h=80, d=25);\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, -12.5, 40])\n                    cube([25, 1, 40], center=true);\n        }\n    }\n}\n\nmodule handle_shell() {\n    color(color_plastic)\n    handle_grip();\n}\n\nmodule battery_compartment() {\n    difference() {\n        // Main compartment\n        translate([0, 0, 85])\n            cylinder(h=30, d=28);\n        \n        // Battery slot\n        translate([0, 0, 90])\n            cylinder(h=25, d=20);\n        \n        // Access door\n        translate([14, 0, 95])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=5);\n    }\n}\n\nmodule switch() {\n    color(color_metal)\n    translate([0, 15, 75])\n        cube([8, 10, 4], center=true);\n    \n    // Switch indicator\n    color([0.9, 0.9, 0.9])\n    translate([0, 15, 77])\n        cylinder(h=1, d=3);\n}\n\nmodule shaft() {\n    color(color_aluminum)\n    cylinder(h=60, d=8);\n}\n\nmodule coil_assembly() {\n    // Copper coil\n    for(i = [0:15]) {\n        color(color_wire)\n        translate([0, 0, i * 2])\n            rotate([90, 0, 0])\n                cylinder(h=1.5, d=18);\n    }\n    \n    // Coil core\n    color(color_metal)\n    translate([0, 0, 15])\n        cylinder(h=30, d=6);\n}\n\nmodule magnetic_tip() {\n    // Protective cap\n    color([0.2, 0.2, 0.2])\n    difference() {\n        translate([0, 0, -8])\n            cylinder(h=10, d=12);\n        translate([0, 0, -10])\n            cylinder(h=15, d=8);\n    }\n    \n    // Magnetic contact surface\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, -5])\n        sphere(d=8);\n}\n\nmodule led_indicator() {\n    color([0, 1, 0])\n    translate([0, -12.5, 45])\n        sphere(d=3);\n}\n\n// Assembly\nunion() {\n    // Handle assembly\n    union() {\n        handle_shell();\n        battery_compartment();\n        switch();\n        led_indicator();\n    }\n    \n    // Shaft\n    translate([0, 0, 115])\n        shaft();\n    \n    // Coil assembly\n    translate([0, 0, 145])\n        coil_assembly();\n    \n    // Magnetic tip\n    translate([0, 0, 175])\n        magnetic_tip();\n    \n    // Wire channel detail\n    color([0.1, 0.1, 0.1])\n    translate([0, 12.5, 100])\n        cube([2, 2, 50]);\n}",
    "renders": true
  },
  {
    "tool": "spark",
    "openscad_code": "// Realistic Spark Plug Tool - Medium Complexity\n// 3D printable spark plug wrench with spark plug visualization\n\n$fn = 50;\n\n// Main colors\ncolor(\"silver\") spark_tool();\n\nmodule spark_tool() {\n    // Tool body - socket wrench handle\n    union() {\n        // Handle grip\n        difference() {\n            // Main handle cylinder\n            cylinder(h=80, r=8);\n            // Grip grooves\n            for(i = [0:5:75]) {\n                translate([0, 0, i+2.5])\n                    cylinder(h=2.5, r=7.5);\n            }\n        }\n        \n        // Hexagonal socket head\n        translate([0, 0, 80])\n            cylinder(h=20, r=12, $fn=6);\n            \n        // Socket depth\n        translate([0, 0, 85])\n            cylinder(h=15, r=9.5);\n            \n        // Universal joint\n        translate([0, 0, 100])\n            sphere(r=8);\n            \n        // Spark plug visualization\n        translate([0, 0, 108])\n            spark_plug();\n    }\n    \n    // Cross bar for leverage\n    translate([0, 0, 40])\n        rotate([90, 0, 0])\n            cylinder(h=60, r=4);\n}\n\nmodule spark_plug() {\n    color(\"gray\") {\n        // Ceramic insulator\n        cylinder(h=25, r1=6, r2=4);\n        \n        // Metal shell\n        translate([0, 0, 25])\n            cylinder(h=15, r=7, $fn=6);\n            \n        // Threaded portion\n        translate([0, 0, 40])\n            cylinder(h=10, r=6.5, $fs=0.5, $fa=5);\n            \n        // Electrode\n        color(\"gold\")\n            translate([0, 0, 50])\n                cylinder(h=8, r=1);\n                \n        // Ground electrode\n        color(\"silver\")\n            translate([5, 0, 50])\n                rotate([90, 0, 0])\n                    cylinder(h=10, r=0.5);\n                    \n        // Hex head\n        color(\"silver\")\n            translate([0, 0, 25])\n                cylinder(h=8, r=8, $fn=6);\n    }\n}",
    "renders": true
  },
  {
    "tool": "wire",
    "openscad_code": "// Realistic Wire Stripper Tool - Medium Complexity\n// 3D printable wire stripper with functional features\n\n// Tool dimensions (mm)\nhandle_length = 85;\nhandle_diameter = 15;\nblade_length = 20;\nblade_width = 8;\nstripper_jaw_length = 30;\npivot_bolt_diameter = 5;\n\n// Colors\n$fn = 32;\n\n// Main handle profile\nmodule handle_profile() {\n    difference() {\n        // Main handle body\n        rotate([90, 0, 0])\n            cylinder(h=handle_length, d=handle_diameter, $fn=6);\n        \n        // Finger grooves\n        for(i = [1:4]) {\n            translate([0, 0, -handle_length/2 + i*17])\n                rotate([90, 0, 0])\n                    cylinder(h=3, d1=handle_diameter-2, d2=handle_diameter-4, $fn=6);\n        }\n        \n        // Center hole for wire\n        rotate([90, 0, 0])\n            cylinder(h=handle_length+2, d=handle_diameter/3, center=true);\n    }\n}\n\n// Handle grip texture\nmodule grip_texture() {\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            for(j = [1:5]) {\n                translate([0, 0, -handle_length/2 + j*14])\n                    cube([handle_diameter-2, 1, 12], center=true);\n            }\n    }\n}\n\n// Cutting blade\nmodule blade() {\n    color(\"silver\")\n    translate([handle_diameter/2, 0, handle_length/2])\n        rotate([0, 90, 0])\n            linear_extrude(height=blade_width, center=true)\n                polygon(points=[\n                    [0, 0], [blade_length, -blade_width/3], [blade_length, blade_width/3]\n                ]);\n}\n\n// Stripper jaw\nmodule stripper_jaw() {\n    color(\"darkgray\")\n    translate([handle_diameter/2, 0, handle_length/2 + 15])\n        difference() {\n            // Main jaw body\n            cube([stripper_jaw_length, 12, 8], center=true);\n            \n            // Wire stripping notches\n            for(i = [0:3]) {\n                translate([stripper_jaw_length/2 - 5 - i*6, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=12, d=1 + i*0.5, center=true);\n            }\n        }\n}\n\n// Pivot bolt\nmodule pivot_bolt() {\n    color(\"gray\")\n    translate([handle_diameter/2, 0, handle_length/2 + 5])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=pivot_bolt_diameter, $fn=6);\n    \n    // Bolt head\n    translate([handle_diameter/2, 0, handle_length/2 - 5])\n        rotate([90, 0, 0])\n            cylinder(h=3, d=pivot_bolt_diameter*2, $fn=6);\n}\n\n// Wire stop\nmodule wire_stop() {\n    color(\"lightgray\")\n    translate([handle_diameter/2 + stripper_jaw_length/2, 0, handle_length/2 + 15])\n        cube([4, 2, 8], center=true);\n}\n\n// Handle end cap\nmodule end_cap() {\n    color(\"black\")\n    translate([0, 0, -handle_length/2])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=handle_diameter+2, $fn=6);\n}\n\n// Complete handle assembly\nmodule handle_assembly() {\n    handle_profile();\n    color(\"darkblue\") grip_texture();\n    blade();\n    stripper_jaw();\n    pivot_bolt();\n    wire_stop();\n    end_cap();\n}\n\n// Create mirrored pair for complete tool\nunion() {\n    handle_assembly();\n    mirror([0, 1, 0]) handle_assembly();\n}",
    "renders": true
  },
  {
    "tool": "sinker",
    "openscad_code": "// Realistic sinker tool for fishing - medium complexity\n// Features: lead sinker body, brass eyelet, textured grip rings\n\n// Color definitions\ncolor_lead = [0.6, 0.6, 0.65];\ncolor_brass = [0.8, 0.6, 0.2];\n\n// Main parameters\nsinker_length = 75;\nsinker_diameter = 18;\nwall_thickness = 2;\ngrip_ring_count = 6;\n\nmodule grip_ring(height, diameter, taper) {\n    // Create a single grip ring with slight taper\n    cylinder(h=height, d1=diameter, d2=diameter-taper, $fn=32);\n}\n\nmodule brass_eyelet() {\n    color(color_brass) {\n        // Main eyelet loop\n        rotate([90, 0, 0]) \n            difference() {\n                torus(6, 3, $fn=32);\n                // Cut opening for line\n                translate([0, 0, -6]) cube([20, 2, 12], center=true);\n            }\n        \n        // Reinforcement base\n        translate([0, 0, -3]) \n            cylinder(h=3, d=8, $fn=32);\n    }\n}\n\nmodule torus(radius, thickness, fn=32) {\n    rotate_extrude($fn=fn) \n        translate([radius, 0, 0]) \n            circle(r=thickness, $fn=fn);\n}\n\nmodule sinker_body() {\n    color(color_lead) {\n        // Main cylindrical body\n        cylinder(h=sinker_length, d=sinker_diameter, $fn=64);\n        \n        // Add grip rings along body\n        for(i=[1:grip_ring_count]) {\n            translate([0, 0, (sinker_length/(grip_ring_count+1))*i - 1])\n                grip_ring(2, sinker_diameter+2, 1);\n        }\n        \n        // Tapered nose\n        translate([0, 0, sinker_length]) \n            cylinder(h=12, d1=sinker_diameter, d2=sinker_diameter*0.7, $fn=64);\n        \n        // Flattened tail with slight taper\n        translate([0, 0, -5])\n            cylinder(h=5, d1=sinker_diameter*1.1, d2=sinker_diameter, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    // Main sinker body\n    sinker_body();\n    \n    // Brass eyelet at tail\n    translate([0, 0, -8]) brass_eyelet();\n}\n\n// Add weight markings\ncolor([0.3, 0.3, 0.35]) {\n    translate([sinker_diameter/2 + 1, 0, sinker_length/2]) \n        rotate([0, 90, 0]) \n            text(\"2oz\", size=4, h=0.5, center=true);\n}",
    "renders": true
  },
  {
    "tool": "cnc",
    "openscad_code": "// CNC End Mill Tool - Realistic Style\n// 4-flute carbide end mill with toolholder\n\n$fn=32;\n\n// Main dimensions (mm)\ntool_diameter = 12;\ntool_length = 75;\nflute_length = 35;\nshank_diameter = 12;\nholder_diameter = 20;\nholder_length = 25;\ncollet_diameter = 16;\ncollet_length = 18;\n\n// Colors\ncarbide_color = [0.7, 0.7, 0.65];\nsteel_color = [0.5, 0.5, 0.55];\nblack_color = [0.1, 0.1, 0.1];\n\nmodule flutes() {\n    // Generate 4 cutting flutes with helix angle\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([0, 0, -flute_length/2]) {\n                rotate([0, 15, 0]) {\n                    difference() {\n                        cylinder(h=flute_length, d1=tool_diameter, d2=tool_diameter*0.9);\n                        translate([0, -tool_diameter/2, -1]) {\n                            cube([tool_diameter/2, tool_diameter/2, flute_length+2], center=false);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule cutting_edges() {\n    // Sharp cutting edges at tool tip\n    translate([0, 0, -tool_length/2]) {\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90 + 45]) {\n                translate([0, tool_diameter*0.3, 0]) {\n                    rotate([0, -30, 0]) {\n                        cube([0.5, tool_diameter*0.2, 3], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tool_body() {\n    // Main carbide tool body\n    color(carbide_color) {\n        union() {\n            // Cutting portion with flutes\n            translate([0, 0, -tool_length/2 + flute_length/2]) {\n                flutes();\n                cutting_edges();\n            }\n            \n            // Shank portion\n            translate([0, 0, -tool_length/2 + flute_length + (tool_length-flute_length)/2]) {\n                cylinder(h=tool_length-flute_length, d=shank_diameter);\n            }\n            \n            // Tool tip sphere\n            translate([0, 0, -tool_length/2]) {\n                sphere(d=tool_diameter);\n            }\n        }\n    }\n}\n\nmodule toolholder() {\n    // ER collet chuck holder\n    color(steel_color) {\n        union() {\n            // Main holder body\n            cylinder(h=holder_length, d=holder_diameter);\n            \n            // Collet nut\n            translate([0, 0, holder_length/2 - collet_length/2]) {\n                color(black_color) {\n                    difference() {\n                        cylinder(h=collet_length, d=collet_diameter+4);\n                        // Nut flats\n                        for (i = [0:5]) {\n                            rotate([0, 0, i * 60]) {\n                                translate([collet_diameter/2 + 2, 0, 0]) {\n                                    cube([5, 1, collet_length+0.1], center=true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Taper section\n            translate([0, 0, -holder_length/2 - 5]) {\n                cylinder(h=10, d1=holder_diameter, d2=collet_diameter);\n            }\n            \n            // Internal bore\n            difference() {\n                cylinder(h=holder_length+10, d=holder_diameter);\n                translate([0, 0, -holder_length/2 - 5]) {\n                    cylinder(h=holder_length+15, d=shank_diameter+1);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    tool_body();\n    translate([0, 0, tool_length/2 + holder_length/2]) {\n        toolholder();\n    }\n}\n\n// Reference markings\ntranslate([holder_diameter/2 + 2, 0, tool_length/2 + holder_length/2]) {\n    color(black_color) {\n        linear_extrude(height=0.5) {\n            text(\"12mm\", size=3, valign=\"center\", halign=\"center\");\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "robotic",
    "openscad_code": "// Robotic Gripper Tool - Medium complexity realistic model\n// 3D printable robotic gripper with servo-actuated fingers\n\n$fn = 32;\n\n// Overall dimensions: 80mm x 40mm x 60mm\n\n// Colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_joint = [0.8, 0.8, 0.8];\ncolor_grip = [0.9, 0.1, 0.1];\ncolor_servo = [0.1, 0.1, 0.9];\n\nmodule base_plate() {\n    color(color_base)\n    difference() {\n        // Main body\n        translate([0, 0, -5])\n            cube([60, 25, 10], center=true);\n        \n        // Mounting holes\n        for (x = [-20, 20])\n            translate([x, 0, -6])\n                cylinder(h=12, r=2, center=true);\n        \n        // Cable channel\n        translate([0, -12, -3])\n            cube([30, 4, 6], center=true);\n    }\n}\n\nmodule servo_mount() {\n    color(color_servo)\n    union() {\n        // Servo housing\n        translate([0, 10, 5])\n            cube([20, 15, 20], center=true);\n        \n        // Servo horn slot\n        translate([0, 18, 5])\n            cube([8, 2, 10], center=true);\n    }\n}\n\nmodule finger_joint(x_pos, angle) {\n    color(color_joint)\n    translate([x_pos, 0, 15])\n    rotate([0, 0, angle])\n    union() {\n        // Joint housing\n        cylinder(h=8, r=4, center=true);\n        \n        // Pivot pin\n        translate([0, 0, -6])\n            cylinder(h=12, r=1.5, center=true);\n    }\n}\n\nmodule gripper_finger(side) {\n    color(color_grip)\n    translate([side * 15, 0, 15])\n    rotate([0, 0, side * 30])\n    union() {\n        // Upper finger segment\n        translate([side * 10, 0, 0])\n            cube([20, 4, 6], center=true);\n        \n        // Lower finger segment\n        translate([side * 25, 0, -10])\n            cube([15, 3, 5], center=true);\n        \n        // Grip pad\n        translate([side * 25, 0, -13])\n            cube([14, 2.5, 2], center=true);\n        \n        // Linkage connection\n        translate([side * 15, 2, 0])\n            cylinder(h=4, r=2, center=true);\n    }\n}\n\nmodule linkage(side) {\n    color(color_base)\n    translate([side * 5, 15, 5])\n    rotate([0, 90, 0])\n    cylinder(h=15, r=1.5, center=true);\n}\n\n// Main assembly\nbase_plate();\nservo_mount();\n\n// Left gripper\nfinger_joint(-15, 30);\ngripper_finger(-1);\nlinkage(-1);\n\n// Right gripper\nfinger_joint(15, -30);\ngripper_finger(1);\nlinkage(1);\n\n// Support ribs for strength\ncolor(color_base)\nunion() {\n    translate([0, -8, 0])\n        cube([50, 2, 20], center=true);\n    \n    // Additional bracing\n    translate([0, -12, 10])\n        cube([40, 2, 15], center=true);\n}\n\n// Cable management clips\ncolor(color_joint)\nfor (y = [-5, 5]) {\n    translate([0, y, 25])\n        cylinder(h=3, r=3, center=true);\n}",
    "renders": true
  },
  {
    "tool": "automated",
    "openscad_code": "// Automated Screwdriver - Robotic Precision Tool\n// Size: 80mm x 25mm x 25mm (printable)\n\n// Main colors\n$fn = 32;\n\nmodule screwdriver() {\n    // Main body - aluminum casing\n    color([0.7, 0.7, 0.7]) {\n        // Body tube\n        difference() {\n            cylinder(h=60, d=20);\n            translate([0, 0, -1]) cylinder(h=62, d=16);\n        }\n        \n        // LED ring at front\n        translate([0, 0, 0.5]) color([0.2, 0.4, 0.8]) \n            cylinder(h=2, d=18);\n    }\n    \n    // Motor housing - rear section\n    color([0.3, 0.3, 0.3]) {\n        translate([0, 0, 60]) \n            cylinder(h=15, d=22);\n        \n        // Cooling vents\n        for (i = [0:5:359]) {\n            rotate([0, 0, i]) \n                translate([9, 0, 62]) \n                    cube([2, 1, 10]);\n        }\n    }\n    \n    // Grip pattern - rubberized texture\n    color([0.1, 0.1, 0.1]) {\n        for (i = [5:8:55]) {\n            rotate([0, 0, 0]) \n                translate([0, 0, i]) \n                    cylinder(h=6, d=22);\n        }\n        \n        // Grip rings\n        for (i = [8:8:48]) {\n            rotate([0, 0, 0]) \n                translate([0, 0, i]) \n                    difference() {\n                        cylinder(h=1, d=22);\n                        cylinder(h=1.2, d=20);\n                    }\n        }\n    }\n    \n    // Torque adjustment ring\n    color([0.8, 0.8, 0.2]) {\n        translate([0, 0, 12]) {\n            difference() {\n                cylinder(h=8, d=24);\n                cylinder(h=10, d=20);\n            }\n            \n            // Knurling pattern\n            for (i = [0:15:359]) {\n                rotate([0, 0, i]) \n                    translate([11, 0, 12]) \n                        cube([0.5, 1, 8]);\n            }\n        }\n    }\n    \n    // Chuck assembly - bit holder\n    color([0.4, 0.4, 0.4]) {\n        translate([0, 0, -8]) {\n            // Chuck body\n            cylinder(h=8, d=12);\n            \n            // Three-jaw chuck mechanism\n            for (i = [0:120:359]) {\n                rotate([0, 0, i]) {\n                    translate([5, 0, -8]) \n                        cube([3, 2, 8]);\n                    translate([3.5, 0, -8]) \n                        cube([3, 0.5, 8]);\n                }\n            }\n            \n            // Bit opening\n            translate([0, 0, -4]) \n                cylinder(h=10, d=6.5);\n        }\n    }\n    \n    // Forward/reverse switch\n    color([0.1, 0.1, 0.1]) {\n        translate([11, 0, 30]) {\n            cube([3, 8, 4]);\n            translate([0, 3.5, 0]) \n                cube([3.5, 1, 4]);\n        }\n    }\n    \n    // Battery indicator LEDs\n    for (i = [0:3]) {\n        color([0, 1, 0]) \n            translate([10.5, -1.5 + i*1, 50]) \n                cube([1, 0.5, 0.5]);\n    }\n    \n    // Magnetic bit storage slots\n    color([0.35, 0.35, 0.35]) {\n        for (i = [0:1]) {\n            translate([15, -2 + i*4, 25]) {\n                rotate([90, 0, 0]) \n                    cylinder(h=12, d=4);\n                translate([0, 0, 6]) \n                    cylinder(h=2, d=6);\n            }\n        }\n    }\n    \n    // Trigger button\n    color([0.8, 0.1, 0.1]) {\n        translate([10, 0, 35]) {\n            difference() {\n                cube([4, 10, 8]);\n                translate([0, 1, 1]) \n                    cube([4.2, 8, 6]);\n            }\n        }\n    }\n    \n    // Power button\n    color([0.2, 0.2, 0.8]) {\n        translate([-11, 0, 45]) \n            cylinder(h=2, d=6);\n    }\n}\n\n// Assembly\nscrewdriver();",
    "renders": true
  },
  {
    "tool": "cobotic",
    "openscad_code": "// Cobotic Collaborative Gripper Tool - Medium Complexity\n// 3D printable cobotic gripper with compliant fingers and cable routing\n\n$fn = 32;\n\n// Main colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_cable = [1, 0.2, 0];\ncolor_pad = [0.1, 0.1, 0.1];\ncolor_metal = [0.6, 0.6, 0.6];\n\nmodule gripper_base() {\n    // Mounting flange\n    difference() {\n        color(color_base)\n        cylinder(h=15, d1=40, d2=35);\n        \n        // Mounting holes\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n            translate([15,0,-1])\n            cylinder(h=17, d=4.5);\n        }\n    }\n    \n    // Tool body\n    color(color_base)\n    translate([0,0,15])\n    cylinder(h=30, d=35);\n}\n\nmodule finger_base() {\n    // Finger mount block\n    color(color_metal)\n    translate([0,0,45])\n    cube([20, 15, 10], center=true);\n}\n\nmodule compliant_finger() {\n    // Finger with compliant joints\n    difference() {\n        // Main finger body\n        color(color_metal)\n        translate([0,0,55])\n        cube([5, 8, 25], center=true);\n        \n        // Flexure cuts\n        for(i=[0:2]) {\n            translate([0,0,58+i*6])\n            cube([7, 10, 1], center=true);\n        }\n    }\n    \n    // Grip pad\n    color(color_pad)\n    translate([0,0,68])\n    cube([5, 8, 3], center=true);\n}\n\nmodule cable_guide() {\n    // Cable routing channel\n    color(color_cable)\n    translate([10,5,50])\n    rotate([90,0,0])\n    cylinder(h=20, d=3);\n    \n    // Cable entry\n    color(color_cable)\n    translate([10,5,45])\n    sphere(d=3);\n}\n\nmodule sensor_mount() {\n    // Force sensor housing\n    color(color_metal)\n    translate([0,0,42])\n    difference() {\n        cube([12, 12, 6], center=true);\n        translate([0,0,2])\n        cube([8, 8, 8], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    gripper_base();\n    finger_base();\n    \n    // Left finger\n    translate([-10,0,0])\n    rotate([0,0,5])\n    compliant_finger();\n    \n    // Right finger\n    translate([10,0,0])\n    rotate([0,0,-5])\n    mirror([1,0,0])\n    compliant_finger();\n    \n    // Cable guides\n    cable_guide();\n    translate([-20,0,0])\n    mirror([1,0,0])\n    cable_guide();\n    \n    // Sensor mounts\n    sensor_mount();\n    translate([-10,0,0])\n    sensor_mount();\n    translate([10,0,0])\n    sensor_mount();\n}\n\n// Safety collar\ncolor(color_base)\ntranslate([0,0,75])\ncylinder(h=5, d=50);",
    "renders": true
  },
  {
    "tool": "sensor",
    "openscad_code": "// OpenSCAD Sensor Tool - Realistic Style, Medium Complexity\n// A handheld environmental sensor with display, buttons, and probe connector\n\n// Main dimensions (mm)\nsensor_length = 85;\nsensor_width = 45;\nsensor_thickness = 22;\nscreen_width = 30;\nscreen_height = 20;\nbutton_diameter = 8;\nprobe_socket_diameter = 8;\nprobe_socket_depth = 10;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main sensor body with rounded edges\nmodule sensor_body() {\n    difference() {\n        // Outer rounded shell\n        union() {\n            // Main rounded rectangle\n            minkowski() {\n                cube([sensor_length-4, sensor_width-4, sensor_thickness-4], center=true);\n                sphere(r=2);\n            }\n            \n            // Grip texture ridges on sides\n            for(i = [-sensor_length/2+10 : 5 : sensor_length/2-10]) {\n                translate([i, sensor_width/2+1, 0])\n                    cube([3, 2, sensor_thickness-4], center=true);\n            }\n        }\n        \n        // Hollow interior\n        minkowski() {\n            cube([sensor_length-4-wall_thickness*2, sensor_width-4-wall_thickness*2, sensor_thickness-4-wall_thickness*2], center=true);\n            sphere(r=1.5);\n        }\n    }\n}\n\n// LCD display screen\nmodule display_screen() {\n    color(\"black\")\n    translate([sensor_length/4, 0, sensor_thickness/2+0.1])\n        cube([screen_width, screen_height, 1], center=true);\n    \n    // Screen bezel\n    color(\"darkgray\")\n    translate([sensor_length/4, 0, sensor_thickness/2+0.5])\n        cube([screen_width+4, screen_height+4, 0.5], center=true);\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Navigation buttons\n    for(i = [0:2]) {\n        color(\"darkblue\")\n        translate([sensor_length/4-15+i*8, -sensor_width/4, sensor_thickness/2+0.1])\n            cylinder(h=1.5, d=button_diameter, center=true);\n        \n        // Button labels\n        color(\"white\")\n        translate([sensor_length/4-15+i*8, -sensor_width/4, sensor_thickness/2+1])\n            rotate([0, 0, 45])\n            cube([1, 3, 0.1], center=true);\n    }\n    \n    // Power button\n    color(\"red\")\n    translate([sensor_length/4, sensor_width/4, sensor_thickness/2+0.1])\n        cylinder(h=1.5, d=button_diameter-2, center=true);\n}\n\n// Probe connector socket\nmodule probe_connector() {\n    color(\"silver\")\n    translate([-sensor_length/2+5, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=probe_socket_depth, d=probe_socket_diameter+4, center=true);\n            cylinder(h=probe_socket_depth+2, d=probe_socket_diameter, center=true);\n        }\n    \n    // Socket rim\n    color(\"gray\")\n    translate([-sensor_length/2+5, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=2, d=probe_socket_diameter+6, center=true);\n}\n\n// Status LEDs\nmodule status_leds() {\n    // Green LED\n    color(\"green\")\n    translate([sensor_length/4+10, sensor_width/4-5, sensor_thickness/2+0.1])\n        cylinder(h=1, d=3, center=true);\n    \n    // Red LED\n    color(\"red\")\n    translate([sensor_length/4+15, sensor_width/4-5, sensor_thickness/2+0.1])\n        cylinder(h=1, d=3, center=true);\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    color(\"darkgray\")\n    translate([-sensor_length/4-5, 0, sensor_thickness/2-wall_thickness])\n        difference() {\n            cube([15, sensor_width-10, 4], center=true);\n            translate([0, 0, -1])\n                cube([13, sensor_width-12, 2], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Main components\n    color(\"lightgray\") sensor_body();\n    display_screen();\n    control_buttons();\n    probe_connector();\n    status_leds();\n    battery_compartment();\n}",
    "renders": true
  },
  {
    "tool": "vision",
    "openscad_code": "// Vision Tool - Realistic Style (Medium Complexity)\n// A 3D printable inspection magnifier with LED ring and ergonomic grip\n\n// Tool parameters\n$fn = 32;\nbody_length = 85;\nhandle_diameter = 22;\nlens_diameter = 45;\nlens_thickness = 3;\nring_diameter = 55;\nring_height = 8;\nled_count = 8;\nwall_thickness = 2;\n\n// Main assembly\nmodule vision_tool() {\n    union() {\n        // Handle with ergonomic grip\n        handle();\n        \n        // Body connecting handle to lens\n        body();\n        \n        // Lens assembly\n        lens();\n        \n        // LED ring\n        led_ring();\n        \n        // Power button\n        power_button();\n        \n        // Battery compartment cover\n        battery_cover();\n    }\n}\n\n// Handle with textured grip\nmodule handle() {\n    color(\"darkslategray\")\n    difference() {\n        // Main handle body\n        cylinder(h=body_length/1.8, d=handle_diameter, center=true);\n        \n        // Grip texture - subtracted grooves\n        for(i=[0:10]) {\n            rotate([0, 0, i*36])\n            translate([0, -handle_diameter/2, -body_length/1.8+1])\n            cube([handle_diameter, wall_thickness, body_length/1.8-2], center=false);\n        }\n        \n        // Battery compartment - cylindrical cavity\n        translate([0, 0, body_length/1.8-15])\n        cylinder(h=12, d=handle_diameter-6, center=false);\n    }\n}\n\n// Body connecting handle to lens\nmodule body() {\n    color(\"silver\")\n    union() {\n        // Main body tube\n        translate([0, 0, body_length/3.6])\n        cylinder(h=body_length/2.5, d=handle_diameter+8, center=true);\n        \n        // Reinforcement ring\n        translate([0, 0, body_length/3.6])\n        cylinder(h=6, d=handle_diameter+12, center=true);\n    }\n}\n\n// Lens assembly with mount\nmodule lens() {\n    // Lens mount\n    color(\"darkgray\")\n    difference() {\n        // Main mount\n        translate([0, 0, body_length/1.5])\n        cylinder(h=lens_thickness+4, d=lens_diameter+8, center=true);\n        \n        // Lens cavity\n        translate([0, 0, body_length/1.5])\n        cylinder(h=lens_thickness+6, d=lens_diameter, center=true);\n    }\n    \n    // Actual lens\n    color(\"lightblue\", 0.6)\n    translate([0, 0, body_length/1.5])\n    cylinder(h=lens_thickness, d=lens_diameter-1, center=true);\n}\n\n// LED ring around lens\nmodule led_ring() {\n    color(\"black\")\n    difference() {\n        // Ring body\n        translate([0, 0, body_length/1.5])\n        cylinder(h=ring_height, d=ring_diameter, center=true);\n        \n        // Inner cavity for lens\n        translate([0, 0, body_length/1.5])\n        cylinder(h=ring_height+2, d=lens_diameter+6, center=true);\n    }\n    \n    // Individual LEDs\n    for(i=[0:led_count-1]) {\n        rotate([0, 0, i*(360/led_count)])\n        translate([(ring_diameter-4)/2, 0, body_length/1.5])\n        color(\"yellow\")\n        sphere(d=3);\n    }\n}\n\n// Power button on handle\nmodule power_button() {\n    color(\"red\")\n    translate([handle_diameter/2+1, 0, body_length/3])\n    scale([0.5, 1, 1])\n    sphere(d=6);\n}\n\n// Battery compartment cover with grip\nmodule battery_cover() {\n    color(\"darkslategray\")\n    difference() {\n        // Cover plate\n        translate([0, 0, body_length/1.8-22])\n        cylinder(h=3, d=handle_diameter-4, center=true);\n        \n        // Grip grooves\n        for(i=[0:3]) {\n            rotate([0, 0, i*45])\n            translate([0, 0, body_length/1.8-22])\n            cube([handle_diameter-6, 1, 3], center=true);\n        }\n    }\n}\n\n// Generate the complete tool\nvision_tool();",
    "renders": true
  },
  {
    "tool": "inspection",
    "openscad_code": "// Digital Caliper â€“ 3D-printable inspection tool\n// Basic OpenSCAD primitives only, medium complexity, realistic style\n\n$fn=36;\n\n// Overall scale (mm)\nscale = 1;\n\n// Main colors\nframe_c  = [0.25,0.25,0.25];   // dark grey frame\njaw_c    = [0.6,0.6,0.6];      // light grey jaws\ndisplay_c= [0.1,0.1,0.1];      // black LCD\nbutton_c = [0.9,0.1,0.1];      // red buttons\n\n// ---------- Frame ----------\nmodule frame() {\n    difference() {\n        // Main beam\n        color(frame_c)\n        translate([-35, -6, 0])\n            cube([70, 12, 7]);\n\n        // LCD window recess\n        translate([-32, 2, 7.1])\n            cube([30, 8, 1]);\n\n        // Battery cover slot\n        translate([30, -1, 0])\n            cube([8, 2, 1]);\n\n        // Thumb roller windows\n        for(x=[-25, 10])\n            translate([x, 6.1, 1])\n                cube([12, 1, 5]);\n    }\n\n    // Thumb roller\n    color(frame_c)\n    rotate([90,0,0])\n    translate([0, 6.5, -2])\n    cylinder(h=12, r=5, center=true);\n}\n\n// ---------- Sliding Jaw ----------\nmodule sliding_jaw() {\n    color(jaw_c)\n    union() {\n        // Body\n        difference() {\n            translate([-3, -9, 0])\n                cube([20, 18, 7]);\n            // Window for display\n            translate([2, -8, 0])\n                cube([10, 16, 7.5]);\n        }\n\n        // Upper measuring jaw\n        translate([-3, -9, 7])\n            cube([15, 2, 2]);\n\n        // Lower measuring jaw\n        translate([-3, 7, 7])\n            cube([15, 2, 2]);\n\n        // Depth rod\n        translate([0, -2, -20])\n            cube([2, 4, 20]);\n    }\n\n    // Thumb-lock slider\n    color(frame_c)\n    translate([10, -3, 7.1])\n        cube([5, 6, 5]);\n}\n\n// ---------- Fixed Jaw ----------\nmodule fixed_jaw() {\n    color(jaw_c)\n    union() {\n        // Fixed jaw block\n        translate([-35, -9, 0])\n            cube([10, 18, 7]);\n\n        // Upper jaw\n        translate([-35, -9, 7])\n            cube([10, 2, 2]);\n\n        // Lower jaw\n        translate([-35, 7, 7])\n            cube([10, 2, 2]);\n    }\n}\n\n// ---------- Display & Buttons ----------\nmodule display() {\n    color(display_c)\n    translate([-32+15, 2+4, 7.5])\n        cube([14, 4, 0.5]);\n\n    color(button_c)\n    for(i=[0:2])\n        translate([-32+6*i+2, 2+1, 7.5])\n            cylinder(h=0.6, r=1.5);\n}\n\n// ---------- Graduations (raised lines) ----------\nmodule graduations() {\n    color(frame_c)\n    for(i=[-30:5:30]) {\n        translate([i, -6.2, 0])\n            cube([0.4, 0.4, 0.4]);\n    }\n    for(i=[-30:1:30]) {\n        translate([i, -6.2, 0])\n            cube([0.2, 0.2, 0.2]);\n    }\n}\n\n// ---------- Assembly ----------\nframe();\ntranslate([5,0,0]) sliding_jaw();\nfixed_jaw();\ndisplay();\ngraduations();",
    "renders": true
  },
  {
    "tool": "measurement",
    "openscad_code": "// Digital Caliper - Realistic Style, Medium Complexity\n// 3D printable digital caliper with main body, slider, jaws, and display\n\n// Constants\n$fn = 50;\nbody_length = 80;\nbody_width = 25;\nbody_height = 8;\njaw_length = 40;\njaw_width = 4;\nthumb_wheel_radius = 8;\nthumb_wheel_width = 4;\ndisplay_width = 15;\ndisplay_height = 8;\ndepth_rod_length = 20;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];  // Dark gray\ncolor_slider = [0.3, 0.3, 0.3];  // Medium gray\ncolor_jaws = [0.6, 0.6, 0.6];  // Light gray\ncolor_display = [0.1, 0.1, 0.1];  // Black\ncolor_marks = [0.9, 0.9, 0.9];  // White\ncolor_wheel = [0.4, 0.4, 0.4];  // Wheel color\n\n// Main caliper body\nmodule caliper_body() {\n    difference() {\n        // Main rectangular body\n        color(color_body)\n        cube([body_length, body_width, body_height], center = true);\n        \n        // Slot for slider\n        translate([0, 0, -body_height/2 + 0.5])\n            cube([body_length - 10, body_width - 6, body_height + 1], center = true);\n        \n        // Measurement marks - every 5mm\n        for(i = [0:5:body_length]) {\n            translate([i - body_length/2, body_width/2 - 1.5, -body_height/2 + 0.1])\n                cube([0.5, 3, 0.2]);\n        }\n    }\n}\n\n// Sliding jaw assembly\nmodule sliding_jaw() {\n    translate([body_length/2 - 10, 0, 0]) {\n        union() {\n            // Slider body\n            color(color_slider)\n            translate([0, 0, -body_height/2 + 2])\n                cube([20, body_width - 4, body_height - 1]);\n            \n            // Upper jaw\n            color(color_jaws)\n            translate([10, body_width/2 - jaw_width/2, 0])\n                cube([jaw_length, jaw_width, body_height + 4]);\n            \n            // Lower jaw\n            translate([10, -body_width/2, -body_height/2 - 2])\n                cube([jaw_length, jaw_width, body_height + 4]);\n            \n            // Thumb wheel\n            color(color_wheel)\n            rotate([90, 0, 0])\n                translate([0, -thumb_wheel_width/2, body_width/2 + thumb_wheel_radius])\n                    cylinder(h = thumb_wheel_width, r = thumb_wheel_radius);\n            \n            // Display\n            color(color_display)\n            translate([-5, 0, body_height/2 + 1])\n                cube([display_width, display_width, display_height/2]);\n        }\n    }\n}\n\n// Fixed jaw assembly\nmodule fixed_jaw() {\n    translate([-body_length/2, 0, 0]) {\n        color(color_jaws)\n        union() {\n            // Upper fixed jaw\n            translate([0, body_width/2 - jaw_width/2, 0])\n                cube([jaw_length, jaw_width, body_height + 4]);\n            \n            // Lower fixed jaw\n            translate([0, -body_width/2, -body_height/2 - 2])\n                cube([jaw_length, jaw_width, body_height + 4]);\n            \n            // Depth rod\n            translate([jaw_length/2, 0, -body_height/2 - depth_rod_length/2 - 1])\n                cube([2, 2, depth_rod_length]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    caliper_body();\n    fixed_jaw();\n    sliding_jaw();\n}",
    "renders": true
  },
  {
    "tool": "calibration",
    "openscad_code": "// OpenSCAD Calibration Tool â€“ Vernier Caliper Check Gauge\n// Medium complexity, realistic style, 3D-printable\n\n// Overall size â‰ˆ 80 mm Ã— 40 mm Ã— 8 mm\n// Checks caliper accuracy at 0, 5, 10, 15, 20, 25 mm steps\n\n// Color scheme\n$fn = 36;\n\nmodule block(h = 8, w = 10) {\n    cube([w, 40, h], center = true);\n}\n\n// Main base plate\ncolor(\"silver\")\ndifference() {\n    // Solid plate\n    cube([80, 40, 8], center = true);\n\n    // Label recess on top face\n    translate([0, 0, 4.1])\n        cube([70, 30, 0.5], center = true);\n\n    // Four corner mounting holes\n    for (dx = [-30, 30], dy = [-15, 15])\n        translate([dx, dy, 0])\n            cylinder(h = 10, d = 3.2, center = true);\n}\n\n// Measurement steps\nfor (i = [0:5]) {\n    x = -30 + i*10;\n    color(\"gray\")\n    translate([x, 0, 0])\n        block(h = 8, w = 10);\n\n    // 0.2 mm chamfers for printability\n    color(\"gray\")\n    translate([x, 0, 3.9])\n        cube([10, 40, 0.2], center = true);\n}\n\n// Raised labels\nfor (i = [0:5]) {\n    x = -30 + i*10;\n    color(\"black\")\n    translate([x, 18, 5])\n        rotate([0, 0, 90])\n            linear_extrude(height = 0.6)\n                text(str(i*5), size = 4, halign = \"center\", valign = \"center\");\n}\n\n// Alignment ridge for caliper jaw\ncolor(\"silver\")\ntranslate([0, 22, 4])\n    cube([80, 4, 1], center = true);\n\n// Grip texture on sides\nmodule grip() {\n    for (i = [-2:2])\n        translate([0, i*6, 0])\n            cube([80, 2, 1], center = true);\n}\n\ncolor(\"gray\")\ntranslate([0, 0, 0])\n    grip();",
    "renders": true
  },
  {
    "tool": "alignment",
    "openscad_code": "// OpenSCAD Alignment Tool - Precision Corner & Edge Alignment Guide\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main dimensions\nbase_length = 80;\nbase_width = 40;\nbase_height = 10;\nwall_thickness = 3;\nhandle_length = 60;\nhandle_diameter = 12;\n\nmodule base_with_guides() {\n    // Main base plate\n    difference() {\n        color(\"silver\") cube([base_length, base_width, base_height], center=true);\n        \n        // Weight reduction holes\n        for(i = [-25, 0, 25]) {\n            translate([i, 0, 0])\n                cylinder(h=base_height+1, d=8, center=true);\n        }\n    }\n    \n    // Alignment ridges\n    translate([0, base_width/2 - 1.5, 0])\n        color(\"gray\") cube([base_length, 3, base_height], center=true);\n    \n    translate([0, -base_width/2 + 1.5, 0])\n        color(\"gray\") cube([base_length, 3, base_height], center=true);\n    \n    // Reference edges with measurement marks\n    for(i = [-35:5:35]) {\n        if(i % 10 == 0) {\n            translate([i, 0, base_height/2 + 1.5])\n                color(\"black\") cube([0.5, base_width, 3], center=true);\n        } else {\n            translate([i, 0, base_height/2 + 1.5])\n                color(\"black\") cube([0.3, base_width/2, 1.5], center=true);\n        }\n    }\n    \n    // Corner alignment blocks\n    module corner_block(x_pos, y_pos) {\n        translate([x_pos, y_pos, base_height/2 - 5]) {\n            difference() {\n                color(\"darkblue\") cube([8, 8, 15], center=true);\n                translate([3.5, 3.5, 0])\n                    cylinder(h=16, d=3, center=true);\n            }\n        }\n    }\n    \n    corner_block(base_length/2 - 4, base_width/2 - 4);\n    corner_block(-base_length/2 + 4, base_width/2 - 4);\n    corner_block(base_length/2 - 4, -base_width/2 + 4);\n    corner_block(-base_length/2 + 4, -base_width/2 + 4);\n}\n\nmodule handle() {\n    translate([-base_length/2 - handle_length/2, 0, base_height/2]) {\n        rotate([0, 90, 0]) {\n            // Handle grip\n            color(\"darkgray\") \n                cylinder(h=handle_length, d=handle_diameter, center=true);\n            \n            // Grip texture rings\n            for(i = [-handle_length/2 + 5:5:handle_length/2 - 5]) {\n                translate([i, 0, 0])\n                    color(\"black\") \n                        cylinder(h=0.5, d=handle_diameter + 1, center=true);\n            }\n            \n            // End cap\n            translate([-handle_length/2, 0, 0])\n                color(\"red\") \n                    sphere(d=handle_diameter + 2);\n            \n            // Transition to base\n            translate([handle_length/2, 0, 0])\n                color(\"silver\") \n                    cylinder(h=10, d1=handle_diameter, d2=20, center=false);\n        }\n    }\n}\n\nmodule bubble_level() {\n    translate([base_length/2 - 10, 0, base_height/2 + 5]) {\n        // Level housing\n        difference() {\n            color(\"lightgray\") \n                cube([20, 15, 10], center=true);\n            translate([0, 0, -2])\n                cylinder(h=12, d=8, center=true);\n        }\n        \n        // Bubble tube\n        translate([0, 0, 1])\n            color(\"lightblue\") \n                cylinder(h=6, d=6, center=true, $fn=20);\n                \n        // Center marks\n        for(i = [-2, 2]) {\n            translate([i, 0, 5.5])\n                color(\"red\") \n                    cube([0.5, 0.5, 1], center=true);\n        }\n    }\n}\n\nmodule adjustable_stops() {\n    // Movable alignment stops with thumb screws\n    module stop(x_pos) {\n        translate([x_pos, 0, base_height/2 + 5]) {\n            // Stop block\n            difference() {\n                color(\"orange\") \n                    cube([6, base_width-4, 8], center=true);\n                \n                // Thumb screw hole\n                translate([0, 0, -2])\n                    cylinder(h=12, d=4, center=true);\n            }\n            \n            // Thumb screw head\n            translate([0, 0, 8])\n                color(\"silver\") \n                    cylinder(h=3, d=8, center=false);\n        }\n    }\n    \n    stop(15);\n    stop(-15);\n}\n\n// Assembly\nunion() {\n    base_with_guides();\n    handle();\n    bubble_level();\n    adjustable_stops();\n    \n    // Centering indicator\n    translate([0, 0, base_height/2 + 0.5])\n        color(\"yellow\") \n            cylinder(h=1, d=4, center=true);\n}",
    "renders": true
  },
  {
    "tool": "balancing",
    "openscad_code": "// Digital Balancing Scale (3D Printable)\n// Realistic style, medium complexity\n// Overall footprint ~70 mm, height ~85 mm\n\n$fn = 32;  // Good quality for 3D printing\n\n// Color constants\nbase_col   = [0.7,0.7,0.7];  // gray\nbeam_col   = [0.8,0.6,0.4];  // brass\npan_col    = [0.9,0.9,0.9];  // aluminum\npivot_col  = [0.6,0.6,0.6];  // steel\nweight_col = [0.5,0.5,0.5];  // dark steel\n\n/* ----------------------------------------- */\n/* Main assembly                              */\n/* ----------------------------------------- */\nunion() {\n    color(base_col) base_assembly();\n    color(pivot_col) pivot_assembly();\n    translate([0,0,78-1.75]) rotate([0,0,0]) beam_assembly();\n}\n\n/* ----------------------------------------- */\n/* Base assembly                              */\n/* ----------------------------------------- */\nmodule base_assembly() {\n    difference() {\n        // Solid base\n        cylinder(h = 15, d1 = 60, d2 = 50, center = false);\n        // Center hole for pivot pin\n        translate([0,0,-0.1]) cylinder(h = 17, d = 6, center = false);\n    }\n    // Rim for stiffness\n    difference() {\n        cylinder(h = 5, d = 58);\n        cylinder(h = 6, d = 54);\n    }\n}\n\n/* ----------------------------------------- */\n/* Pivot assembly                             */\n/* ----------------------------------------- */\nmodule pivot_assembly() {\n    // Pin\n    cylinder(h = 78, d = 5.5, center = false);\n    // Knife-edge support\n    translate([0,0,78]) difference() {\n        cube([20,4,3.5], center = true);\n        translate([0,0,1.75-0.1])\n            cube([22,6,3.5], center = true);\n    }\n}\n\n/* ----------------------------------------- */\n/* Beam assembly                              */\n/* ----------------------------------------- */\nmodule beam_assembly() {\n    // Beam body\n    difference() {\n        cube([70,5,3], center = true);\n        // Central groove for knife-edge\n        translate([0,0,1.5-0.1]) cube([20,6,3], center = true);\n    }\n    \n    // Left pan arm\n    translate([-30,0,-7]) pan(0);\n    // Right pan arm\n    translate([ 30,0,-7]) pan(1);\n    \n    // Calibration weights\n    translate([-40,0,1.5]) weight();\n    translate([ 40,0,1.5]) weight();\n}\n\n/* ----------------------------------------- */\n/* Pan module                                 */\n/* ----------------------------------------- */\nmodule pan(side) {\n    color(pan_col) {\n        // Pan support rod\n        translate([0,0,0]) cylinder(h = 7, d = 2.5);\n        // Pan dish\n        translate([0,0,7]) {\n            difference() {\n                cylinder(h = 4, d = 22);\n                translate([0,0,2]) cylinder(h = 4, d = 20);\n            }\n            // Rim ring\n            translate([0,0,4]) cylinder(h = 1, d = 23);\n        }\n    }\n}\n\n/* ----------------------------------------- */\n/* Calibration weight module                  */\n/* ----------------------------------------- */\nmodule weight() {\n    color(weight_col) {\n        // Hanging rod\n        cylinder(h = 5, d = 1.5);\n        // Cylindrical weight body\n        translate([0,0,5]) {\n            difference() {\n                cylinder(h = 8, d = 6);\n                translate([0,0,-0.1]) cylinder(h = 10, d = 2.5);\n            }\n            // Groove for grip\n            translate([0,0,4]) rotate([90,0,0])\n                cylinder(h = 6.1, d = 1.5, center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "diagnostic",
    "openscad_code": "// Diagnostic Reflex Hammer - Medium Complexity Realistic Style\n// Realistic Taylor hammer for neurological reflex testing\n\n// Color constants\n$fn = 50;\n\n// Main module\nmodule reflex_hammer() {\n    // Handle with grip texture\n    color([0.8, 0.8, 0.8]) {\n        // Main handle shaft\n        cylinder(h=90, d=8, center=false);\n        \n        // Grip rings along handle\n        for(i = [5:10:85]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=3, d=10, center=true);\n                    cylinder(h=4, d=7.5, center=true);\n                }\n            }\n        }\n    }\n    \n    // Handle cap\n    translate([0, 0, 90]) {\n        color([0.7, 0.7, 0.7]) {\n            sphere(d=10);\n        }\n    }\n    \n    // Hammer head assembly\n    translate([0, 0, 5]) {\n        rotate([0, 90, 0]) {\n            // Main hammer block\n            color([0.9, 0.9, 0.9]) {\n                cube([30, 20, 15], center=true);\n            }\n            \n            // Large rounded striking surface\n            translate([15, 0, 0]) {\n                color([0.85, 0.85, 0.85]) {\n                    sphere(d=20);\n                }\n            }\n            \n            // Small pointed tip (handle side)\n            translate([-15, 0, 0]) {\n                color([0.85, 0.85, 0.85]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=10, d1=15, d2=5, center=true);\n                    }\n                }\n            }\n            \n            // Reinforcement ribs\n            for(offset = [-7, 0, 7]) {\n                translate([0, offset, 8]) {\n                    color([0.7, 0.7, 0.7]) {\n                        cube([28, 2, 3], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Weight balance insert in handle\n    translate([0, 0, 40]) {\n        color([0.3, 0.3, 0.3]) {\n            difference() {\n                cylinder(h=20, d=6, center=true);\n                cylinder(h=22, d=3, center=true);\n            }\n        }\n    }\n    \n    // Manufacturer marking on handle\n    translate([4.5, 0, 50]) {\n        rotate([0, 90, 0]) {\n            color([0, 0, 0]) {\n                linear_extrude(height=0.5) {\n                    text(\"MED\", size=3, font=\"Arial\");\n                }\n            }\n        }\n    }\n}\n\n// Base plate for 3D printing support\nmodule print_base() {\n    color([0.95, 0.95, 0.95]) {\n        translate([0, 0, -1]) {\n            cube([35, 25, 1], center=false);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    reflex_hammer();\n    print_base();\n}",
    "renders": true
  },
  {
    "tool": "analyzer",
    "openscad_code": "// Realistic Analyzer Tool - Medium Complexity\n// Digital Multimeter style analyzer with display, probes, and selector dial\n\n$fn = 32;\n\n// Main colors\ncolor_body = \"DarkSlateGray\";\ncolor_display = \"black\";\ncolor_probes = \"red\";\ncolor_buttons = \"lightgray\";\ncolor_text = \"white\";\n\n// Overall dimensions\nbody_w = 45;\nbody_h = 80;\nbody_d = 20;\n\n// Main body with rounded edges\nmodule body() {\n    color(color_body)\n    union() {\n        // Main rectangular body\n        translate([-body_w/2, -body_h/2, 0])\n            cube([body_w, body_h, body_d]);\n        \n        // Rounded top edge\n        translate([0, body_h/2, body_d/2])\n            rotate([90,0,0])\n            cylinder(h=body_w, r=body_d/2, center=true);\n        \n        // Rounded bottom edge\n        translate([0, -body_h/2, body_d/2])\n            rotate([90,0,0])\n            cylinder(h=body_w, r=body_d/2, center=true);\n    }\n}\n\n// LCD display screen\nmodule display() {\n    color(color_display)\n    translate([0, 20, body_d + 0.1])\n        cube([35, 25, 1], center=true);\n    \n    // Display bezel\n    color(\"gray\")\n    translate([0, 20, body_d + 0.5])\n        cube([37, 27, 0.5], center=true);\n}\n\n// Function selector dial\nmodule selector_dial() {\n    color(\"gray\")\n    rotate([90,0,0])\n    translate([0, -body_d/2 - 1, body_h/2 - 15])\n        cylinder(h=3, r=8);\n    \n    // Dial positions\n    for(i = [0:3]) {\n        color(\"black\")\n        rotate([90,0,0])\n        rotate([0,0,i*30])\n        translate([0, -body_d/2 - 2, body_h/2 - 15])\n            cube([1, 6, 1], center=true);\n    }\n}\n\n// Input jacks for probes\nmodule probe_jacks() {\n    // Common jack (black)\n    color(\"black\")\n    translate([-15, -body_h/2 + 10, body_d/2])\n        cylinder(h=5, r=3);\n    \n    // Voltage jack (red)\n    color(\"red\")\n    translate([15, -body_h/2 + 10, body_d/2])\n        cylinder(h=5, r=3);\n}\n\n// Control buttons\nmodule buttons() {\n    // Range hold button\n    color(color_buttons)\n    translate([-10, -5, body_d + 0.5])\n        cylinder(h=1, r=3);\n    \n    // Mode select button\n    translate([10, -5, body_d + 0.5])\n        cylinder(h=1, r=3);\n}\n\n// Probe cables\nmodule probe_cables() {\n    // Red probe cable\n    color(\"red\")\n    translate([body_w/2 + 10, -body_h/2 + 10, body_d/2])\n        rotate([90,0,0])\n        cylinder(h=50, r=1);\n    \n    // Black probe cable\n    color(\"black\")\n    translate([-body_w/2 - 10, -body_h/2 + 10, body_d/2])\n        rotate([90,0,0])\n        cylinder(h=50, r=1);\n}\n\n// Probe tips\nmodule probes() {\n    // Red probe\n    color(\"red\")\n    translate([body_w/2 + 10, -body_h/2 + 10 - 50, 0])\n        union() {\n            cylinder(h=15, r=2);\n            translate([0,0,-15])\n                cylinder(h=15, r=1);\n        }\n    \n    // Black probe\n    color(\"black\")\n    translate([-body_w/2 - 10, -body_h/2 + 10 - 50, 0])\n        union() {\n            cylinder(h=15, r=2);\n            translate([0,0,-15])\n                cylinder(h=15, r=1);\n        }\n}\n\n// Main assembly\nbody();\ndisplay();\nselector_dial();\nprobe_jacks();\nbuttons();\nprobe_cables();\nprobes();",
    "renders": true
  },
  {
    "tool": "tester",
    "openscad_code": "// Multi-function wire/PCB tester probe\n// 75 mm long, 3D-printable, no support needed\n\n// Color definitions\n$fn=50;\n\n// Main handle\nmodule handle() {\n    color(\"darkslategray\") {\n        difference() {\n            // Main grip body\n            cylinder(h=55, d1=24, d2=22, center=false);\n            \n            // Finger grooves\n            for(i=[0:4]) {\n                translate([0, 0, 8 + i*9])\n                    rotate([0, 0, 22.5])\n                    cube([22, 3, 7], center=true);\n            }\n            \n            // Top collar recess\n            translate([0, 0, 52])\n                cylinder(h=6, d=20, center=false);\n                \n            // Bottom collar recess\n            translate([0, 0, 0])\n                cylinder(h=6, d=20, center=false);\n        }\n    }\n}\n\n// Metal probe tip and shank\nmodule probe() {\n    // Stainless steel portion\n    color(\"silver\") {\n        union() {\n            // Main shank\n            cylinder(h=25, d=6, center=false);\n            \n            // Tapered tip\n            translate([0, 0, 25])\n                cylinder(h=15, d1=6, d2=0.5, center=false);\n                \n            // Ring collar at base\n            translate([0, 0, 0])\n                cylinder(h=3, d=8, center=false);\n        }\n    }\n}\n\n// Test button assembly\nmodule test_button() {\n    color(\"firebrick\") {\n        // Button top\n        translate([0, 0, 60])\n            difference() {\n                cylinder(h=4, d=10, center=false);\n                \n                // LED indicator recess\n                translate([0, 0, 2])\n                    cylinder(h=2, d=6, center=false);\n            }\n    }\n    \n    // LED indicator\n    color(\"lime\") {\n        translate([0, 0, 62])\n            sphere(d=5);\n    }\n}\n\n// Battery compartment cap\nmodule battery_cap() {\n    color(\"gray\") {\n        difference() {\n            // Cap body\n            translate([0, 0, -8])\n                cylinder(h=8, d=20, center=false);\n                \n            // Grip ridges\n            for(i=[0:11]) {\n                rotate([0, 0, i*30])\n                    translate([10, 0, -4])\n                        cube([2, 1, 8], center=true);\n            }\n            \n            // Coin cell slot\n            translate([0, 0, -7])\n                cylinder(h=3, d=16, center=false);\n        }\n    }\n}\n\n// Test leads connector\nmodule connector() {\n    color(\"dimgray\") {\n        // Main socket\n        difference() {\n            translate([12, 0, 45])\n                rotate([0, 90, 0])\n                    cylinder(h=12, d=8, center=true);\n                    \n            // Socket hole\n            translate([12, 0, 45])\n                rotate([0, 90, 0])\n                    cylinder(h=14, d=4, center=true);\n        }\n        \n        // Second socket\n        translate([-12, 0, 45])\n            rotate([0, -90, 0])\n                cylinder(h=12, d=8, center=true);\n    }\n}\n\n// Assembly\nhandle();\ntranslate([0, 0, 55]) probe();\ntest_button();\nbattery_cap();\nconnector();\n\n// Label markings\ncolor(\"white\") {\n    translate([0, 12, 30])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"VÎ©mA\", size=4, halign=\"center\");\n                \n    translate([0, -12, 20])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"CAT III\", size=3, halign=\"center\");\n}",
    "renders": true
  },
  {
    "tool": "simulator",
    "openscad_code": "// Flight Simulator Yoke - Realistic Style\n// Designed for 3D printing at 1:1 scale (100mm width)\n\n$fn = 32;\n\n// Main colors\ncolor_yoke = \"silver\";\ncolor_grips = \"black\";\ncolor_buttons = \"red\";\n\n// Overall dimensions\nyoke_width = 100;\nyoke_height = 80;\nyoke_depth = 30;\n\nmodule yoke_wheel() {\n    // Outer wheel rim\n    color(color_yoke)\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=12, d=90, center=true);\n        \n        // Hollow center\n        cylinder(h=13, d=78, center=true);\n    }\n    \n    // Spokes (3 spokes)\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([0, 0, -6])\n        color(color_yoke)\n        cube([8, 35, 12], center=true);\n    }\n    \n    // Center hub\n    color(color_yoke)\n    rotate([90, 0, 0])\n    cylinder(h=15, d=20, center=true);\n}\n\nmodule control_grips() {\n    // Left grip handle\n    translate([-45, 0, 0])\n    rotate([0, 90, 0])\n    color(color_grips)\n    difference() {\n        cylinder(h=25, d=18);\n        \n        // Grip texture grooves\n        for(pos = [5:5:20]) {\n            translate([0, 0, pos])\n            cylinder(h=2, d=16);\n        }\n    }\n    \n    // Right grip handle\n    translate([45, 0, 0])\n    rotate([0, 90, 0])\n    color(color_grips)\n    difference() {\n        cylinder(h=25, d=18);\n        \n        // Grip texture grooves\n        for(pos = [5:5:20]) {\n            translate([0, 0, pos])\n            cylinder(h=2, d=16);\n        }\n    }\n}\n\nmodule control_buttons() {\n    // Left thumb button\n    translate([-35, -25, 0])\n    color(color_buttons)\n    cylinder(h=3, d=8);\n    \n    // Right thumb button\n    translate([35, -25, 0])\n    color(color_buttons)\n    cylinder(h=3, d=8);\n}\n\nmodule yoke_base() {\n    // Main base housing\n    color(\"gray\")\n    translate([0, 0, -20])\n    cube([40, 60, 15], center=true);\n    \n    // Mounting posts\n    for(x = [-15, 15]) {\n        for(y = [-20, 20]) {\n            translate([x, y, -27])\n            color(\"gray\")\n            cylinder(h=8, d=6);\n        }\n    }\n    \n    // Control shaft\n    color(color_yoke)\n    translate([0, 0, -12])\n    cylinder(h=25, d=12);\n}\n\nmodule instrument_panel() {\n    // Small panel with indicators\n    translate([0, -35, -10])\n    color(\"darkgray\")\n    cube([35, 8, 3], center=true);\n    \n    // Indicator lights\n    for(pos = [-12, 0, 12]) {\n        translate([pos, -39, -8])\n        color(\"yellow\")\n        sphere(d=3);\n    }\n}\n\n// Assemble the complete yoke\nunion() {\n    yoke_wheel();\n    control_grips();\n    control_buttons();\n    yoke_base();\n    instrument_panel();\n}",
    "renders": true
  },
  {
    "tool": "trainer",
    "openscad_code": "// Phillips Screwdriver Trainer - Realistic Style, Medium Complexity\n// 3D printable trainer tool with proper wall thickness and no overhangs\n\n// Parameters\n$fa = 2;\n$fs = 0.5;\nhandle_length = 60;\nhandle_diameter = 18;\nshaft_length = 80;\nshaft_diameter = 6;\ntip_length = 15;\nwall_thickness = 2;\n\n// Color definitions\nhandle_color = \"#1E1E1E\"; // Dark gray rubber\nshaft_color = \"#C0C0C0\"; // Silver metal\ntip_color = \"#B8B8B8\"; // Slightly darker metal\n\n// Handle grip texture module\nmodule grip_ring(depth, width) {\n    difference() {\n        cylinder(h=width, d=handle_diameter, center=true);\n        cylinder(h=width+1, d=handle_diameter-2, center=true);\n    }\n}\n\n// Phillips tip profile\nmodule phillips_tip() {\n    // Cross shape for Phillips #2\n    for (angle = [0, 90]) {\n        rotate([0, 0, angle]) {\n            // Main blades\n            cube([shaft_diameter*1.6, 1.2, tip_length], center=true);\n            // Tapered edges\n            translate([0, 0, tip_length/2 - 1]) {\n                cube([shaft_diameter*1.6, 1.2, 2], center=true);\n            }\n        }\n    }\n}\n\n// Main handle with grip texture\nmodule handle() {\n    color(handle_color) {\n        union() {\n            // Main handle body\n            cylinder(h=handle_length, d=handle_diameter);\n            \n            // Grip rings\n            for (i = [10:10:handle_length-10]) {\n                translate([0, 0, i]) {\n                    grip_ring(0.5, 3);\n                }\n            }\n            \n            // End cap\n            translate([0, 0, handle_length]) {\n                cylinder(h=3, d=handle_diameter+2);\n            }\n            \n            // Transition to shaft\n            translate([0, 0, 0]) {\n                cylinder(h=5, d1=handle_diameter, d2=shaft_diameter+4);\n            }\n        }\n    }\n}\n\n// Shaft with proper thickness\nmodule shaft() {\n    color(shaft_color) {\n        difference() {\n            // Outer shaft\n            cylinder(h=shaft_length, d=shaft_diameter);\n            // Inner hollow for material saving\n            cylinder(h=shaft_length-wall_thickness, d=shaft_diameter-wall_thickness*2);\n        }\n    }\n}\n\n// Phillips tip\nmodule tip() {\n    color(tip_color) {\n        union() {\n            // Transition from shaft to tip\n            cylinder(h=5, d=shaft_diameter);\n            \n            // Phillips tip\n            translate([0, 0, 5]) {\n                phillips_tip();\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length]) {\n    shaft();\n    translate([0, 0, shaft_length]) {\n        tip();\n    }\n}\nhandle();\n\n// Alignment helper (comment out for final print)\n// cylinder(h=handle_length+shaft_length+tip_length, d=1, center=true);",
    "renders": true
  },
  {
    "tool": "augmented",
    "openscad_code": "// Augmented Reality Stylus / Pen with haptic feedback rings\n// Realistic medium-complexity 3D printable model\n// Overall length: 85 mm\n\n// Color definitions\n$fn=50;\n\nmodule body(){\n    // Main aluminum barrel\n    difference(){\n        cylinder(h=60, d1=9, d2=10, center=false);\n        translate([0,0,-1]) cylinder(h=62, d=7, center=false); // hollow core\n    }\n    \n    // Grip section\n    translate([0,0,20]) difference(){\n        cylinder(h=25, d=11, center=false);\n        cylinder(h=25, d=8.5, center=false);\n    }\n    \n    // Grip texture rings\n    for(z=[22:2:42]){\n        translate([0,0,z]) rotate([90,0,0]) \n            difference(){\n                cylinder(h=11, d=11.2, center=true);\n                cylinder(h=11.5, d=10.4, center=true);\n            }\n    }\n}\n\nmodule tip(){\n    // Pressure-sensitive stylus tip\n    translate([0,0,60]) union(){\n        cylinder(h=6, d1=10, d2=6, center=false); // taper\n        translate([0,0,6]) sphere(d=6);\n    }\n}\n\nmodule cap(){\n    // USB-C charging cap\n    translate([0,0,-8]) difference(){\n        cylinder(h=8, d=11, center=false); // cap body\n        translate([0,0,-1]) cylinder(h=10, d=9, center=false); // cavity\n    }\n    \n    // Clip\n    translate([5.5,0,-4]) rotate([0,90,0]) difference(){\n        cube([12,2.5,1.5], center=true);\n        translate([0,0,0.8]) cube([11.5,2.3,0.5], center=true);\n    }\n}\n\nmodule sensors(){\n    // AR tracking sensor windows\n    translate([0,0,15]) rotate([0,90,0]) \n        for(a=[0:120:240]){\n            rotate([0,0,a]) translate([5.5,0,0]) \n                color(\"black\") sphere(d=2.5);\n        }\n    \n    // Haptic feedback ring 1\n    translate([0,0,33]) difference(){\n        cylinder(h=2.5, d=12, center=false);\n        cylinder(h=2.5, d=10, center=false);\n    }\n    \n    // Haptic feedback ring 2\n    translate([0,0,38]) difference(){\n        cylinder(h=2.5, d=12, center=false);\n        cylinder(h=2.5, d=10, center=false);\n    }\n}\n\nmodule button(){\n    // Power/select button\n    translate([0,5.7,50]) difference(){\n        cube([6,1.5,3], center=true);\n        translate([0,0,1.5]) cube([5,1.4,2], center=true);\n    }\n}\n\n// Assembly\ncolor(\"silver\") body();\ncolor(\"darkgray\") tip();\ncolor(\"silver\") cap();\ncolor(\"dimgray\") sensors();\ncolor(\"black\") button();",
    "renders": true
  },
  {
    "tool": "virtual",
    "openscad_code": "// Virtual Screwdriver - Realistic Style (Medium Complexity)\n// Overall length: ~90mm, handle diameter: ~18mm, shaft diameter: ~6mm\n\n// Main colors\n$fn = 32;\n\n// Screwdriver module with all components\nmodule screwdriver() {\n    // Handle - ergonomic grip with hexagonal flats\n    color([0.1, 0.1, 0.1])  // Dark gray/black rubber\n    union() {\n        // Main handle body\n        translate([0, 0, 5])\n        cylinder(h=40, d1=18, d2=16, center=false);\n        \n        // Hexagonal flats for grip\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([8.5, 0, 22])\n            cube([3, 1, 16], center=true);\n        }\n        \n        // End cap\n        translate([0, 0, 45])\n        cylinder(h=5, d=16, center=false);\n    }\n    \n    // Shaft - chrome plated steel\n    color([0.7, 0.7, 0.7])  // Metallic silver\n    union() {\n        // Main shaft\n        translate([0, 0, 0])\n        cylinder(h=45, d=6, center=false);\n        \n        // Transition from handle\n        translate([0, 0, 0])\n        cylinder(h=5, d1=6, d2=8, center=false);\n    }\n    \n    // Tip - Phillips #2\n    color([0.8, 0.8, 0.8])  // Slightly lighter metallic\n    union() {\n        // Tip shaft\n        translate([0, 0, -8])\n        cylinder(h=8, d=6, center=false);\n        \n        // Phillips cross\n        difference() {\n            // Main tip cylinder\n            translate([0, 0, -12])\n            cylinder(h=4, d=6, center=false);\n            \n            // Cross cuts\n            translate([0, -1, -14])\n            cube([6, 2, 6], center=true);\n            translate([-1, 0, -14])\n            cube([2, 6, 6], center=true);\n        }\n        \n        // Tapered tip\n        translate([0, 0, -12])\n        cylinder(h=4, d1=0.5, d2=6, center=false);\n    }\n    \n    // Handle grip rings\n    color([0.05, 0.05, 0.05])  // Very dark rubber\n    for(i=[0:6]) {\n        translate([0, 0, 8 + i*5])\n        cylinder(h=1.5, d=17.5, center=false);\n    }\n    \n    // Manufacturer marking on handle\n    color([0.3, 0.3, 0.3])  // Gray text\n    translate([0, -9, 25])\n    rotate([0, 90, 0])\n    linear_extrude(height=0.5)\n    text(\"VRT-TOOL\", size=3, halign=\"center\");\n}\n\n// Assemble the screwdriver\nscrewdriver();\n\n// Add support base for printing\ncolor([0.4, 0.4, 0.4])\ntranslate([0, -15, -15])\ncube([30, 2, 15], center=true);",
    "renders": true
  },
  {
    "tool": "mixed",
    "openscad_code": "// Mixed Tool: Hammer-Wrench-Screwdriver Combo\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions: ~85mm length, ~30mm width, ~15mm height\n\nmodule handle() {\n    // Main handle body - ergonomic grip\n    color(\"dimgray\")\n    difference() {\n        union() {\n            // Main grip cylinder\n            cylinder(h=60, d=14, $fn=32);\n            \n            // Grip rings\n            for(i = [5:10:55]) {\n                translate([0, 0, i])\n                cylinder(h=2, d=15.5, $fn=32);\n            }\n        }\n        \n        // Grip texture grooves\n        for(i = [10:10:50]) {\n            rotate([0, 90, 0])\n            translate([0, 0, i])\n            cube([30, 1, 2], center=true);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, 60])\n    color(\"darkgray\")\n    cylinder(h=5, d1=14, d2=16, $fn=32);\n}\n\nmodule hammer_head() {\n    color(\"silver\")\n    union() {\n        // Main hammer block\n        translate([0, 0, 65])\n        cube([20, 12, 15], center=true);\n        \n        // Claw hammer curve\n        translate([10, 0, 72.5])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=12, d=15, $fn=32);\n            translate([0, 0, -1])\n            cube([30, 30, 14], center=true);\n        }\n        \n        // Hammer face\n        translate([-10, 0, 72.5])\n        rotate([0, 90, 0])\n        cylinder(h=1, d=12, $fn=32);\n    }\n}\n\nmodule wrench_jaw() {\n    color(\"silver\")\n    difference() {\n        // Main wrench body\n        translate([7, 0, 5])\n        cube([25, 8, 10], center=true);\n        \n        // Adjustable jaw slot\n        translate([15, 0, 5])\n        cube([8, 6, 12], center=true);\n        \n        // Hex bolt grip pattern\n        translate([0, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h=8, d=10, $fn=6);\n    }\n    \n    // Jaw teeth\n    for(i = [-3:3]) {\n        translate([18, i*1.5, 5])\n        cube([2, 0.8, 10], center=true);\n    }\n}\n\nmodule screwdriver_bits() {\n    // Flathead bit storage\n    color(\"gold\")\n    for(i = [0:2]) {\n        rotate([90, 0, 0])\n        translate([5 + i*5, 0, -7])\n        cylinder(h=20, d=3, $fn=16);\n    }\n    \n    // Phillips bit\n    rotate([90, 0, 0])\n    translate([20, 0, -7])\n    cylinder(h=20, d=3, $fn=4);\n}\n\nmodule tool_marks() {\n    // Brand text area\n    color(\"black\")\n    translate([0, -8, 35])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.5)\n    text(\"MULTI-TOOL\", size=3, halign=\"center\");\n    \n    // Size markings\n    translate([7, -4.5, 5])\n    rotate([0, 90, 0])\n    linear_extrude(height=0.5)\n    text(\"8mm\", size=2, halign=\"center\");\n}\n\n// Assembly\nunion() {\n    handle();\n    hammer_head();\n    wrench_jaw();\n    screwdriver_bits();\n    tool_marks();\n}",
    "renders": true
  },
  {
    "tool": "holographic",
    "openscad_code": "// Holographic Tool - Medium Complexity Realistic Style\n// 3D printable holographic projection tool with handle and emitter head\n\n// Tool dimensions (mm)\nhandle_length = 80;\nhandle_diameter = 12;\nhead_length = 30;\nhead_diameter = 22;\nemitter_length = 15;\nemitter_diameter = 8;\n\n// Colors\nhandle_color = [0.2, 0.2, 0.2];  // Dark grey\nhead_color = [0.8, 0.8, 0.9];   // Light grey\nemitter_color = [0.1, 0.6, 1.0]; // Blue holographic emitter\ngrip_color = [0.15, 0.15, 0.15]; // Black grip\n\n// Handle grip texture module\nmodule grip_texture(length, diameter) {\n    difference() {\n        cylinder(h=length, d=diameter, $fn=32);\n        for (i = [0:15:length-5]) {\n            translate([0, 0, i])\n            rotate([0, 0, 45])\n            cube([diameter, 2, 3], center=true);\n        }\n    }\n}\n\n// Holographic emitter grid pattern\nmodule emitter_grid(diameter, depth) {\n    difference() {\n        cylinder(h=depth, d=diameter, $fn=6);\n        for (i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([diameter/4, 0, -1])\n            cube([diameter/2, 1, depth+2], center=true);\n        }\n    }\n}\n\n// Main handle assembly\nmodule handle_assembly() {\n    color(handle_color)\n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        // Hollow center for wire routing\n        cylinder(h=handle_length-5, d=handle_diameter-4, $fn=32);\n    }\n    \n    // Grip sections\n    color(grip_color)\n    grip_texture(30, handle_diameter+2);\n    \n    // Control buttons\n    color([0.9, 0.1, 0.1])\n    translate([handle_diameter/2+1, 0, handle_length-25])\n    rotate([90, 0, 0])\n    cylinder(h=2, d=4, $fn=16);\n    \n    translate([handle_diameter/2+1, 0, handle_length-30])\n    rotate([90, 0, 0])\n    cylinder(h=2, d=4, $fn=16);\n}\n\n// Holographic projector head\nmodule projector_head() {\n    // Main head body\n    color(head_color)\n    difference() {\n        cylinder(h=head_length, d=head_diameter, $fn=32);\n        // Cavity for electronics\n        translate([0, 0, 5])\n        cylinder(h=head_length-10, d=head_diameter-6, $fn=32);\n    }\n    \n    // Mounting collar\n    translate([0, 0, -3])\n    color(handle_color)\n    cylinder(h=6, d=head_diameter+4, $fn=32);\n    \n    // Emitter array\n    color(emitter_color)\n    translate([0, 0, head_length])\n    emitter_grid(emitter_diameter, emitter_length);\n    \n    // Cooling fins\n    color(head_color)\n    for (i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([head_diameter/2-1, 0, head_length/2])\n        cube([2, 1, head_length-4], center=true);\n    }\n}\n\n// Status indicators\nmodule status_lights() {\n    color([0, 1, 0])\n    translate([0, head_diameter/2+1, head_length-5])\n    sphere(d=2, $fn=16);\n    \n    color([1, 1, 0])\n    translate([0, head_diameter/2+1, head_length-10])\n    sphere(d=2, $fn=16);\n}\n\n// Complete holographic tool assembly\nunion() {\n    // Handle\n    translate([0, 0, 0])\n    handle_assembly();\n    \n    // Head assembly\n    translate([0, 0, handle_length])\n    projector_head();\n    \n    // Status indicators\n    translate([0, 0, handle_length])\n    status_lights();\n}\n\n// Optional stand for display\ncolor([0.5, 0.5, 0.5])\ntranslate([0, 0, -5])\ndifference() {\n    cylinder(h=5, d=20, $fn=32);\n    cylinder(h=6, d=15, $fn=32);\n}",
    "renders": true
  },
  {
    "tool": "projection",
    "openscad_code": "// OpenSCAD code for a realistic handheld projector tool (50-100 mm size)\n// Designed for 3D printing with no overhangs and 1.2 mm wall thickness\n\n// Main dimensions (mm)\nbody_width = 40;\nbody_height = 30;\nbody_length = 80;\nlens_diameter = 25;\nlens_length = 15;\nhandle_diameter = 20;\nhandle_length = 60;\nbutton_width = 8;\nbutton_height = 4;\nbutton_depth = 3;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];  // Dark gray\ncolor_lens = [0.1, 0.1, 0.8]; // Blue tint\ncolor_handle = [0.1, 0.1, 0.1]; // Black\ncolor_button = [0.8, 0.1, 0.1]; // Red\ncolor_ring = [0.7, 0.7, 0.7]; // Silver\n\n// Main projector body\nmodule projector_body() {\n    color(color_body)\n    difference() {\n        // Main rectangular body\n        translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Cooling vents on top\n        for (i = [1:3]) {\n            translate([body_length/2 - 15 - i*8, 0, body_height - 2])\n                cube([10, body_width - 10, 2]);\n        }\n        \n        // Lens hole\n        translate([body_length/2 + lens_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=lens_length*2, d=lens_diameter + 2, center=true);\n    }\n    \n    // Lens barrel\n    color(color_lens)\n    translate([body_length/2, 0, 0])\n        cylinder(h=lens_length, d=lens_diameter);\n    \n    // Focus ring\n    color(color_ring)\n    difference() {\n        translate([body_length/2 - 2, 0, 0])\n            cylinder(h=6, d=lens_diameter + 8);\n        translate([body_length/2 - 2, 0, 0])\n            cylinder(h=7, d=lens_diameter + 2);\n    }\n    \n    // Control buttons\n    color(color_button)\n    for (i = [0:1]) {\n        translate([body_length/2 - 20 - i*12, body_width/2 + 2, body_height/2 - 5 - i*6])\n            cube([button_width, button_depth, button_height]);\n    }\n    \n    // LED indicator\n    color([0, 1, 0])\n    translate([body_length/2 - 10, body_width/2 + 1.5, body_height/2 - 15])\n        sphere(d=3);\n}\n\n// Handle with grip texture\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle\n        rotate([90, 0, 0])\n            cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip rings\n        for (i = [1:4]) {\n            translate([0, 0, -handle_length/2 + i*10])\n                cylinder(h=2, d=handle_diameter + 2);\n        }\n        \n        // Connection to body\n        translate([0, 0, handle_length/2])\n            cube([body_width, handle_diameter, handle_diameter], center=true);\n    }\n}\n\n// Tripod mount\nmodule tripod_mount() {\n    color(color_ring)\n    difference() {\n        translate([0, 0, -body_height/2 - 5])\n            cylinder(h=10, d=15);\n        translate([0, 0, -body_height/2 - 6])\n            cylinder(h=12, d=8);\n    }\n    \n    // Screw threads (simplified)\n    for (i = [0:5]) {\n        rotate([0, 0, i*30])\n            translate([3.5, 0, -body_height/2 - 5])\n                cube([1, 1, 10]);\n    }\n}\n\n// Assembly\nunion() {\n    projector_body();\n    translate([0, 0, -body_height/2 - handle_length/2])\n        handle();\n    tripod_mount();\n}",
    "renders": true
  },
  {
    "tool": "display",
    "openscad_code": "// Vernier Caliper Display Tool\n// Realistic style, medium complexity\n\n// Main dimensions (in mm)\n$fn = 50;\noverall_length = 90;\njaw_depth = 20;\njaw_thickness = 4;\nslide_width = 15;\nslide_thickness = 6;\nscale_length = 70;\n\n// Vernier caliper module\nmodule vernier_caliper() {\n    // Main beam\n    color(\"silver\") {\n        // Beam body\n        difference() {\n            union() {\n                // Main beam\n                translate([-5, 0, 0])\n                    cube([scale_length + 10, slide_width, slide_thickness]);\n                \n                // Fixed jaw\n                translate([scale_length - 5, 0, 0])\n                    cube([jaw_thickness, jaw_depth, jaw_thickness * 2]);\n            }\n            \n            // Scale markings on beam\n            for(i = [0:2:scale_length/2]) {\n                translate([i * 2 - 5, slide_width - 0.5, slide_thickness - 0.5])\n                    cube([0.5, 2, 0.5]);\n            }\n        }\n        \n        // Sliding jaw assembly\n        translate([scale_length * 0.6, 0, 0]) {\n            // Slide body\n            difference() {\n                cube([slide_width, slide_width + 5, slide_thickness + 2]);\n                \n                // Thumb wheel hole\n                translate([slide_width/2, slide_width/2 + 2.5, -1])\n                    cylinder(h = slide_thickness + 4, r = 3);\n            }\n            \n            // Moving jaw\n            translate([slide_width, 0, 0])\n                cube([jaw_thickness, jaw_depth, jaw_thickness * 2]);\n                \n            // Thumb wheel\n            color(\"gray\") {\n                translate([slide_width/2, slide_width/2 + 2.5, -1]) {\n                    cylinder(h = slide_thickness + 4, r = 3.5);\n                    for(a = [0:30:330]) {\n                        rotate([90, 0, a])\n                            translate([2.5, 0, 0])\n                                cube([1, 0.5, 1]);\n                    }\n                }\n            }\n            \n            // Locking screw\n            color(\"black\") {\n                translate([slide_width/2, slide_width + 2, slide_thickness/2]) {\n                    cylinder(h = 3, r = 2);\n                    translate([0, 0, 3])\n                        cylinder(h = 2, r1 = 2, r2 = 3);\n                }\n            }\n            \n            // Vernier scale on slide\n            color(\"black\") {\n                translate([0.5, slide_width - 0.5, slide_thickness + 1])\n                    cube([slide_width - 1, 1, 0.5]);\n                for(i = [0:4]) {\n                    translate([i + 1, slide_width - 0.5, slide_thickness + 1])\n                        cube([0.2, 1, 0.5]);\n                }\n            }\n        }\n    }\n    \n    // Measurement jaws detail\n    color(\"silver\") {\n        // Fixed jaw inner surface\n        translate([scale_length - 5, jaw_depth/2, jaw_thickness]) {\n            cube([jaw_thickness, 0.5, 2]);\n        }\n        \n        // Moving jaw inner surface\n        translate([scale_length * 0.6 + slide_width, jaw_depth/2, jaw_thickness]) {\n            cube([jaw_thickness, 0.5, 2]);\n        }\n        \n        // Depth rod\n        translate([-5, slide_width/2, 0]) {\n            rotate([90, 0, 0])\n                cylinder(h = jaw_depth * 0.8, r = 1);\n        }\n    }\n}\n\n// Display base\nmodule display_base() {\n    color(\"darkslategray\") {\n        difference() {\n            union() {\n                // Main base\n                cube([100, 40, 5]);\n                \n                // Raised platform\n                translate([10, 10, 5])\n                    cube([80, 20, 3]);\n            }\n            \n            // Label recess\n            translate([45, 12, 8])\n                cube([10, 1, 0.5]);\n        }\n        \n        // Corner fillets\n        translate([5, 5, 0])\n            cylinder(h = 5, r = 2);\n        translate([95, 5, 0])\n            cylinder(h = 5, r = 2);\n        translate([5, 35, 0])\n            cylinder(h = 5, r = 2);\n        translate([95, 35, 0])\n            cylinder(h = 5, r = 2);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 10])\n    rotate([0, -20, 15])\n        vernier_caliper();\n        \ntranslate([0, 0, 0])\n    display_base();",
    "renders": true
  },
  {
    "tool": "interface",
    "openscad_code": "// OpenSCAD Interface Tool - Realistic Medium Complexity\n// 3D Printable Network Cable Crimping Tool\n\n$fn = 50;\n\n// Overall dimensions\nlength = 90;\nwidth = 50;\nheight = 15;\n\n// Color definitions\nhandle_color = \"DarkSlateGray\";\nmetal_color = \"Silver\";\naccent_color = \"Red\";\n\n// Main module\nmodule interface_tool() {\n    // Left handle assembly\n    translate([-length/2, 0, 0]) {\n        color(handle_color) left_handle();\n    }\n    \n    // Right handle assembly\n    translate([length/2, 0, 0]) {\n        rotate([0, 0, 180]) {\n            color(handle_color) right_handle();\n        }\n    }\n    \n    // Pivot mechanism\n    translate([0, 0, height/2]) {\n        color(metal_color) pivot();\n    }\n    \n    // Crimping heads\n    translate([-length/3, 0, height]) {\n        rotate([0, 0, 45]) {\n            color(metal_color) crimp_head();\n        }\n    }\n    \n    translate([length/3, 0, height]) {\n        rotate([0, 0, -45]) {\n            color(metal_color) crimp_head();\n        }\n    }\n}\n\n// Left handle with grip\nmodule left_handle() {\n    difference() {\n        // Main handle body\n        cube([length/2 - 5, width, height], center = true);\n        \n        // Ergonomic grip cuts\n        for (i = [1:5]) {\n            translate([i * 8 - length/4, 0, height/2 - 2]) {\n                cube([2, width - 8, 4], center = true);\n            }\n        }\n        \n        // Cable guide slot\n        translate([length/4, 0, -height/2]) {\n            cube([10, 6, height + 2], center = true);\n        }\n    }\n    \n    // Grip texture\n    for (i = [0:4]) {\n        translate([i * 8 - length/4 + 4, 0, -height/2 + 1]) {\n            color(accent_color) {\n                cube([1, width - 10, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Right handle with grip\nmodule right_handle() {\n    left_handle();\n}\n\n// Pivot bolt assembly\nmodule pivot() {\n    union() {\n        // Main pivot pin\n        cylinder(h = 20, r = 5, center = true);\n        \n        // Bolt head\n        translate([0, 0, 10]) {\n            cylinder(h = 3, r = 8, center = true);\n            for (i = [0:5]) {\n                rotate([0, 0, i * 60]) {\n                    translate([6, 0, 10]) {\n                        cube([2, 1, 3], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Crimping head with die\nmodule crimp_head() {\n    difference() {\n        // Main head body\n        cube([25, 18, 8], center = true);\n        \n        // RJ45 crimping die\n        translate([0, 0, 4]) {\n            cube([20, 12, 2], center = true);\n            \n            // Pin slots\n            for (i = [-4:4]) {\n                translate([i * 2, 0, 1]) {\n                    cube([0.8, 10, 2], center = true);\n                }\n            }\n            \n            // Cable strain relief dies\n            translate([0, -8, 0]) {\n                cube([16, 2, 2], center = true);\n                cube([14, 1.5, 1], center = true);\n            }\n        }\n    }\n    \n    // Blade edge for cutting\n    translate([0, 9, 4]) {\n        cube([22, 0.5, 2], center = true);\n    }\n}\n\n// Render the tool\ninterface_tool();",
    "renders": true
  },
  {
    "tool": "touchscreen",
    "openscad_code": "// Realistic 3D Printable Touchscreen Stylus\n// Medium complexity, 50-100mm length\n\n$fn = 50;\n\n// Overall dimensions\nstylus_length = 85;\ntip_length = 12;\ngrip_length = 35;\nbody_diameter = 9;\ngrip_diameter = 11;\ntip_diameter = 3;\n\n// Colors\ncolor_body = \"Silver\";\ncolor_grip = \"Black\";\ncolor_tip = \"DarkGray\";\n\n// Main stylus module\nmodule stylus() {\n    // Stylus tip (conductive rubber dome)\n    translate([0, 0, 0])\n    color(color_tip)\n    union() {\n        cylinder(h = tip_length, d1 = tip_diameter, d2 = tip_diameter + 1.5);\n        // Conductive dome\n        translate([0, 0, tip_length - 1])\n        sphere(d = tip_diameter + 2);\n    }\n    \n    // Main body tube\n    translate([0, 0, tip_length])\n    color(color_body)\n    difference() {\n        cylinder(h = stylus_length - tip_length - 2, d = body_diameter);\n        // Internal hollow for weight reduction\n        translate([0, 0, -1])\n        cylinder(h = stylus_length - tip_length, d = body_diameter - 3);\n    }\n    \n    // Grip section with texture\n    translate([0, 0, tip_length + 5])\n    color(color_grip)\n    difference() {\n        cylinder(h = grip_length, d = grip_diameter);\n        // Grip texture grooves\n        for(i = [0:4:grip_length]) {\n            translate([0, 0, i])\n            cylinder(h = 2, d = grip_diameter - 1);\n        }\n    }\n    \n    // Cap end with clip\n    translate([0, 0, stylus_length - 2])\n    color(color_body)\n    union() {\n        // End cap\n        cylinder(h = 4, d = body_diameter);\n        \n        // Clip\n        translate([body_diameter/2, 0, 1])\n        rotate([90, 0, 0])\n        difference() {\n            // Clip body\n            cube([2, 25, body_diameter/2], center = true);\n            // Clip curve\n            translate([0, 10, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 3, r = 10);\n        }\n    }\n    \n    // Decorative ring\n    translate([0, 0, tip_length + 3])\n    color(\"Gray\")\n    cylinder(h = 1.5, d = body_diameter + 1);\n}\n\n// Build the stylus\nstylus();",
    "renders": true
  },
  {
    "tool": "gesture",
    "openscad_code": "// Gesture Tool - Realistic Style, Medium Complexity\n// A pointing/hand gesture tool for presentations and teaching\n\n// Overall dimensions: approximately 80mm long x 40mm wide x 20mm thick\n\n// Main color scheme\n$fn = 32;\n\n// Handle module with ergonomic grip\nmodule handle() {\n    color(\"darkslategray\")\n    difference() {\n        // Main handle body\n        union() {\n            cylinder(h=60, d1=12, d2=10, center=true);\n            // Grip rings for better handling\n            for(i = [-25:10:25]) {\n                translate([0, 0, i])\n                cylinder(h=2, d=14, center=true);\n            }\n        }\n        // Finger grooves\n        rotate([0, 90, 0])\n        for(i = [-15:7.5:15]) {\n            translate([0, i, 0])\n            cylinder(h=8, d=3, center=true);\n        }\n    }\n}\n\n// Index finger module - primary pointing element\nmodule index_finger() {\n    color(\"peachpuff\")\n    translate([0, 8, 35])\n    rotate([0, 15, 0])\n    union() {\n        // Base of finger\n        cylinder(h=15, d=8, center=true);\n        // Middle section\n        translate([0, 0, 10])\n        cylinder(h=12, d=7, center=true);\n        // Tip section\n        translate([0, 0, 20])\n        cylinder(h=10, d=6, center=true);\n        // Fingernail\n        translate([0, 0, 26])\n        scale([1, 0.8, 0.3])\n        sphere(d=6);\n    }\n}\n\n// Thumb module\nmodule thumb() {\n    color(\"peachpuff\")\n    translate([-6, -6, 25])\n    rotate([0, -30, -30])\n    union() {\n        cylinder(h=12, d=7, center=true);\n        translate([0, 0, 8])\n        cylinder(h=10, d=6, center=true);\n    }\n}\n\n// Middle finger module\nmodule middle_finger() {\n    color(\"peachpuff\")\n    translate([0, 0, 32])\n    rotate([0, 5, 0])\n    cylinder(h=20, d=7, center=true);\n}\n\n// Ring finger module\nmodule ring_finger() {\n    color(\"peachpuff\")\n    translate([0, -8, 28])\n    rotate([0, -5, 0])\n    cylinder(h=18, d=6.5, center=true);\n}\n\n// Palm connection between fingers and handle\nmodule palm() {\n    color(\"peachpuff\")\n    translate([0, 0, 15])\n    scale([1.2, 1.5, 0.8])\n    sphere(d=20);\n}\n\n// Wrist transition\nmodule wrist() {\n    color(\"peachpuff\")\n    translate([0, 0, -5])\n    cylinder(h=10, d1=20, d2=15, center=true);\n}\n\n// Assembly of gesture tool\nunion() {\n    handle();\n    wrist();\n    palm();\n    index_finger();\n    thumb();\n    middle_finger();\n    ring_finger();\n    \n    // Small pinky finger (curled)\n    color(\"peachpuff\")\n    translate([0, -12, 25])\n    rotate([0, -20, 0])\n    cylinder(h=12, d=5, center=true);\n}",
    "renders": true
  },
  {
    "tool": "voice",
    "openscad_code": "// Voice Tool - Realistic Style (Microphone)\n// 3D printable microphone with realistic features\n// Overall dimensions: ~80mm height\n\n// Color definitions\n$fn = 50;\n\n// Main microphone body\nmodule microphone_body() {\n    color(\"silver\") {\n        // Upper cylindrical section\n        cylinder(h=30, d=35, $fn=100);\n        \n        // Lower conical transition\n        translate([0, 0, -10])\n            cylinder(h=15, d1=35, d2=25, $fn=100);\n    }\n}\n\n// Microphone head with grill pattern\nmodule mic_head() {\n    color([0.2, 0.2, 0.2]) {\n        // Outer grill shell\n        difference() {\n            cylinder(h=15, d=38, $fn=100);\n            cylinder(h=16, d=34, $fn=100);\n        }\n        \n        // Grill holes pattern\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n                translate([17, 0, 7.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=1, d=2, $fn=12);\n        }\n        \n        // Inner foam visible through grill\n        color([0.8, 0.8, 0.8]) {\n            translate([0, 0, 7.5])\n                sphere(d=32);\n        }\n    }\n}\n\n// Handle/grip section\nmodule handle() {\n    color(\"black\") {\n        // Main handle tube\n        cylinder(h=45, d=25, $fn=100);\n        \n        // Grip rings for better handling\n        for(pos = [5:10:40]) {\n            translate([0, 0, pos])\n                difference() {\n                    cylinder(h=3, d=28, $fn=100);\n                    cylinder(h=4, d=24, $fn=100);\n                }\n        }\n    }\n}\n\n// XLR connector base\nmodule xlr_connector() {\n    color(\"silver\") {\n        // Main connector housing\n        translate([0, 0, -5])\n            cylinder(h=10, d=22, $fn=100);\n        \n        // Connector pins\n        color(\"gold\") {\n            for(pin = [-5, 0, 5]) {\n                translate([pin, 0, -6])\n                    cylinder(h=3, d=2, $fn=12);\n            }\n        }\n        \n        // Locking tab\n        color(\"black\") {\n            translate([12, 0, 2])\n                rotate([90, 0, 0])\n                    cube([8, 3, 2]);\n        }\n    }\n}\n\n// Brand label\nmodule brand_label() {\n    color(\"white\") {\n        translate([0, -17.5, 15])\n            rotate([90, 0, 0])\n                linear_extrude(height=0.5)\n                    text(\"VOICE\", size=3, halign=\"center\");\n    }\n}\n\n// On/off switch\nmodule power_switch() {\n    color(\"red\") {\n        translate([13, 0, 20])\n            cube([3, 6, 2]);\n    }\n}\n\n// Assemble the complete microphone\nunion() {\n    // Main body assembly\n    translate([0, 0, 15])\n        microphone_body();\n    \n    // Microphone head on top\n    translate([0, 0, 45])\n        mic_head();\n    \n    // Handle below\n    translate([0, 0, 0])\n        handle();\n    \n    // XLR connector at bottom\n    translate([0, 0, -5])\n        xlr_connector();\n    \n    // Brand label\n    brand_label();\n    \n    // Power switch\n    power_switch();\n}",
    "renders": true
  },
  {
    "tool": "biometric",
    "openscad_code": "// Biometric Fingerprint Scanner Tool - Realistic Style\n// Dimensions: 80mm x 50mm x 25mm\n\n// Main body color\ncolor([0.2, 0.2, 0.2]) \ndifference() {\n    // Main housing\n    translate([0, 0, 10]) \n    cube([80, 50, 15], center=true);\n    \n    // Cable channel\n    translate([-35, 0, 10]) \n    cylinder(h=16, r=3, center=true);\n}\n\n// Top scanning surface\ncolor([0.3, 0.3, 0.3]) \ntranslate([0, 0, 18]) \ncube([70, 40, 2], center=true);\n\n// Fingerprint sensor area\ncolor([0.1, 0.1, 0.1]) \ntranslate([0, 0, 20.1]) \ncube([45, 25, 0.5], center=true);\n\n// LED indicators\nfor (i = [0:2]) {\n    color([0, 1, 0]) \n    translate([-25 + i*15, 18, 20.1]) \n    cylinder(h=1, r=2, center=true);\n}\n\n// Side grip textures\nmodule grip_texture() {\n    for (i = [0:5]) {\n        translate([0, -25 + i*8, 10]) \n        cube([82, 1, 14], center=true);\n    }\n}\n\ncolor([0.1, 0.1, 0.1]) \ngrip_texture();\n\n// USB connector housing\ncolor([0.15, 0.15, 0.15]) \ntranslate([-40, 0, 8]) \ncube([10, 12, 10], center=true);\n\n// USB port\ndifference() {\n    color([0.05, 0.05, 0.05]) \n    translate([-40, 0, 8]) \n    cube([8, 10, 6], center=true);\n    \n    // USB opening\n    translate([-40, 0, 8]) \n    cube([7, 8, 4], center=true);\n}\n\n// Mounting holes (4 corners)\nfor (x = [-30, 30]) {\n    for (y = [-15, 15]) {\n        translate([x, y, 10]) \n        cylinder(h=16, r=2.5, center=true);\n    }\n}\n\n// Button module\ncolor([0.25, 0.25, 0.25]) \ntranslate([25, 0, 12]) \ncube([12, 8, 8], center=true);\n\n// Button\ncolor([0.8, 0.1, 0.1]) \ntranslate([25, 0, 16.2]) \ncylinder(h=1.5, r=3, center=true);\n\n// Status display window\ncolor([0.05, 0.05, 0.05]) \ntranslate([0, -10, 20.1]) \ncube([25, 8, 0.5], center=true);",
    "renders": true
  },
  {
    "tool": "wireless",
    "openscad_code": "// Wireless Drill (Medium complexity - Realistic style)\n// Overall dimensions: ~85mm long x 65mm tall x 55mm wide\n\n$fn=48;\n\n// Main colors\ncolor_body = [0.1, 0.1, 0.12];\ncolor_grip = [0.15, 0.15, 0.15];\ncolor_metal = [0.6, 0.6, 0.65];\ncolor_red = [0.8, 0.1, 0.1];\n\n// Main assembly\nunion() {\n    // Motor housing\n    color(color_body)\n    translate([0, 0, 0])\n    cylinder(h=30, r=27);\n    \n    // Chuck assembly\n    color(color_metal)\n    translate([30, 0, 0])\n    union() {\n        cylinder(h=15, r=12);\n        translate([15, 0, 0])\n        sphere(r=12);\n    }\n    \n    // Gearbox reduction\n    color(color_body)\n    translate([-20, 0, 0])\n    cylinder(h=20, r=25);\n    \n    // Battery pack\n    color(color_red)\n    translate([-45, 0, -15])\n    cube([25, 30, 40], center=true);\n    \n    // Handle assembly\n    color(color_grip)\n    translate([0, 0, -40])\n    union() {\n        // Main handle\n        cylinder(h=35, r=15);\n        \n        // Grip texture\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n            translate([0, 0, -10])\n            difference() {\n                cylinder(h=35, r=15.5);\n                cylinder(h=35, r=14.5);\n            }\n        }\n    }\n    \n    // Trigger\n    color(color_red)\n    translate([15, 0, -25])\n    cube([20, 12, 8], center=true);\n    \n    // Forward/reverse switch\n    color(color_metal)\n    translate([5, 20, -15])\n    cube([10, 5, 5], center=true);\n    \n    // LED work light\n    color(\"white\")\n    translate([28, 0, 20])\n    sphere(r=5);\n    \n    // Chuck key storage\n    color(color_metal)\n    for(i=[0:1]) {\n        rotate([0, 0, i*180])\n        translate([0, 22, -5])\n        cylinder(h=15, r=3);\n    }\n    \n    // Ventilation slots\n    color(color_body)\n    for(i=[0:3]) {\n        translate([-10, 0, 10 + i*5])\n        rotate([0, 90, 0])\n        cube([20, 3, 2], center=true);\n    }\n    \n    // Chuck jaws (simplified)\n    color(color_metal)\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([35, 0, 0])\n        cube([10, 4, 4], center=true);\n    }\n    \n    // Battery release buttons\n    color(color_body)\n    translate([-35, 15, 0])\n    cube([5, 3, 8], center=true);\n    \n    translate([-35, -15, 0])\n    cube([5, 3, 8], center=true);\n    \n    // Belt hook\n    color(color_metal)\n    translate([0, 25, 10])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=10, r=2);\n        translate([0, 0, -1])\n        cube([4, 4, 12], center=true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "bluetooth",
    "openscad_code": "// Bluetooth speaker tool - realistic style, medium complexity\n// Overall dimensions: 60mm x 25mm x 25mm\n\n$fn = 32;\n\nmodule speaker_body() {\n    difference() {\n        // Main rounded body\n        translate([0, 0, 12.5])\n            scale([1, 0.5, 0.5])\n            sphere(d = 50);\n        \n        // Flatten bottom\n        translate([0, 0, -1])\n            cube([60, 30, 15], center = true);\n        \n        // USB-C port\n        translate([24, 0, 8])\n            rotate([0, 90, 0])\n            cylinder(h = 5, d = 8);\n    }\n}\n\nmodule speaker_grill() {\n    // Front grill area\n    difference() {\n        translate([-24, 0, 12.5])\n            cylinder(h = 3, d = 20);\n        \n        // Grill holes\n        for (i = [-2:2]) {\n            for (j = [-2:2]) {\n                translate([-24, i*3, 12.5 + j*3])\n                    cylinder(h = 4, d = 1.5);\n            }\n        }\n    }\n}\n\nmodule control_buttons() {\n    // Power button\n    color(\"red\")\n    translate([20, 8, 23])\n        cylinder(h = 2, d = 4);\n    \n    // Volume buttons\n    color(\"white\")\n    translate([20, 0, 23])\n        cube([6, 3, 1.5]);\n    \n    color(\"white\")\n    translate([20, -4, 23])\n        cube([6, 3, 1.5]);\n}\n\nmodule led_indicator() {\n    // LED light\n    color(\"blue\")\n    translate([20, 12, 23])\n        cylinder(h = 1, d = 3);\n}\n\nmodule rubber_feet() {\n    // Four rubber feet\n    for (x = [-20, 20]) {\n        for (y = [-8, 8]) {\n            color(\"black\")\n            translate([x, y, 1])\n                cylinder(h = 1, d = 5);\n        }\n    }\n}\n\nmodule charging_indicator() {\n    // Small charging LED\n    color(\"green\")\n    translate([24, 0, 12])\n        sphere(d = 2);\n}\n\n// Assembly\nunion() {\n    // Main body\n    color(\"darkgray\")\n    speaker_body();\n    \n    // Front grill\n    color(\"lightgray\")\n    speaker_grill();\n    \n    // Controls\n    control_buttons();\n    \n    // LED indicators\n    led_indicator();\n    \n    // Rubber feet\n    rubber_feet();\n    \n    // Charging indicator\n    charging_indicator();\n}",
    "renders": true
  },
  {
    "tool": "wifi",
    "openscad_code": "// Wi-Fi Tool - Realistic Style, Medium Complexity\n// A handheld Wi-Fi signal strength analyzer/spectrum analyzer tool\n\n$fn = 36; // Smooth curves\nwall_thickness = 2;\nbody_color = [0.2, 0.2, 0.2]; // Dark gray\nscreen_color = [0.1, 0.1, 0.1]; // Black\nbutton_color = [0.8, 0.8, 0.8]; // Light gray\nantenna_color = [0.4, 0.4, 0.4]; // Medium gray\n\n// Main body of the tool\nmodule main_body() {\n    color(body_color) {\n        // Main rectangular body with rounded edges\n        difference() {\n            hull() {\n                translate([-35, -20, 0]) cylinder(h=15, r=3);\n                translate([35, -20, 0]) cylinder(h=15, r=3);\n                translate([35, 20, 0]) cylinder(h=15, r=3);\n                translate([-35, 20, 0]) cylinder(h=15, r=3);\n            }\n            \n            // Hollow out the inside\n            translate([0, 0, -1]) hull() {\n                translate([-32, -17, 0]) cylinder(h=17, r=2);\n                translate([32, -17, 0]) cylinder(h=17, r=2);\n                translate([32, 17, 0]) cylinder(h=17, r=2);\n                translate([-32, 17, 0]) cylinder(h=17, r=2);\n            }\n        }\n    }\n}\n\n// LCD screen\nmodule screen() {\n    color(screen_color) {\n        difference() {\n            // Screen bezel\n            translate([0, 10, 15]) cube([50, 25, 2], center=true);\n            \n            // Actual screen area\n            translate([0, 10, 16]) cube([46, 21, 1], center=true);\n        }\n    }\n}\n\n// Buttons module\nmodule button(x, y, label=\"\") {\n    color(button_color) {\n        // Button base\n        translate([x, y, 15]) cylinder(h=1.5, r=3);\n        \n        // Button top\n        translate([x, y, 16.5]) cylinder(h=1, r=2.5);\n    }\n}\n\n// Antenna connector\nmodule antenna_connector() {\n    color(antenna_color) {\n        translate([40, 0, 7.5]) {\n            // SMA connector base\n            cylinder(h=5, r=5);\n            \n            // Threaded part\n            translate([0, 0, 5]) cylinder(h=3, r=4);\n            \n            // Center pin\n            translate([0, 0, 8]) cylinder(h=2, r=1);\n        }\n    }\n}\n\n// Detachable antenna\nmodule antenna() {\n    color(antenna_color) {\n        // Antenna base\n        translate([40, 0, 7.5]) {\n            rotate([90, 0, 0]) {\n                // Antenna body\n                cylinder(h=60, r=2.5);\n                \n                // Antenna tip\n                translate([0, 0, 60]) sphere(r=3);\n                \n                // Antenna segments\n                for(i = [0:10:50]) {\n                    translate([0, 0, i]) cylinder(h=2, r=3);\n                }\n            }\n        }\n    }\n}\n\n// Grips on the sides\nmodule side_grips() {\n    color([0.3, 0.3, 0.3]) {\n        for(i = [-1, 1]) {\n            translate([i * 30, 0, 7.5]) {\n                difference() {\n                    cylinder(h=15, r=5);\n                    translate([0, 0, -1]) cylinder(h=17, r=4);\n                }\n            }\n        }\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    // Power LED\n    color([0, 1, 0]) translate([-15, -15, 16]) cylinder(h=1, r=1.5);\n    \n    // Wi-Fi activity LED\n    color([0, 0, 1]) translate([-10, -15, 16]) cylinder(h=1, r=1.5);\n    \n    // Alert LED\n    color([1, 0, 0]) translate([-5, -15, 16]) cylinder(h=1, r=1.5);\n}\n\n// USB-C port\nmodule usb_port() {\n    color([0.1, 0.1, 0.1]) {\n        translate([-40, 0, 5]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cube([8, 4, 3], center=true);\n                    translate([0, 0, 1.5]) cube([6, 2.5, 3], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nmain_body();\nscreen();\n\n// Buttons\nbutton(-20, -5, \"PWR\");\nbutton(-10, -5, \"MODE\");\nbutton(0, -5, \"SCAN\");\nbutton(10, -5, \"MENU\");\nbutton(20, -5, \"OK\");\n\nantenna_connector();\nantenna();\nside_grips();\nstatus_leds();\nusb_port();",
    "renders": true
  },
  {
    "tool": "cellular",
    "openscad_code": "// Cellular phone repair tool - precision spudger set with pry tips\n// Realistic style, medium complexity (~110 lines)\n\n$fn = 32;\n\n// Overall dimensions\nlength = 80;\nhandle_d = 12;\ntip_length = 15;\n\n// Handle grip texture parameters\ngrip_ridges = 20;\nridge_height = 0.5;\n\n// Main body module\nmodule spudger_body() {\n    difference() {\n        // Handle shaft\n        cylinder(h=length, d=handle_d, center=false);\n        \n        // Grip texture - subtracted ridges\n        for(i = [1:grip_ridges]) {\n            translate([0, 0, i*(length/grip_ridges)])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_d+1, d=ridge_height*2, center=true);\n        }\n    }\n}\n\n// Flat pry tip\nmodule flat_pry_tip() {\n    difference() {\n        // Main tip body\n        translate([0, 0, length])\n            rotate([90, 0, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=tip_length, d=handle_d, center=false);\n        \n        // Tapered edge\n        translate([0, 0, length+tip_length-2])\n            rotate([90, 0, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=3, d1=handle_d, d2=0, center=false);\n    }\n}\n\n// Precision point tip\nmodule point_tip() {\n    difference() {\n        // Main point body\n        translate([0, 0, length])\n            rotate([90, 0, 0])\n                cylinder(h=tip_length, d1=handle_d/3, d2=handle_d, center=false);\n        \n        // Fine point\n        translate([0, 0, length+tip_length-5])\n            rotate([90, 0, 0])\n                cylinder(h=5, d1=0.5, d2=handle_d/3, center=false);\n    }\n}\n\n// Anti-static ESD grip coating\nmodule esd_grip() {\n    color([0.1, 0.1, 0.1]) {\n        difference() {\n            // Main grip coating\n            cylinder(h=length*0.7, d=handle_d+1, center=false);\n            \n            // Finger grooves\n            for(i = [1:3]) {\n                rotate([0, 0, i*120])\n                    translate([handle_d/2+0.5, 0, length*0.35])\n                        rotate([90, 0, 0])\n                            cylinder(h=handle_d+2, d=2, center=true);\n            }\n        }\n    }\n}\n\n// Tool marking/engraving\nmodule markings() {\n    color([0.8, 0.8, 0.8]) {\n        translate([0, -handle_d/2-0.1, length*0.8])\n            rotate([90, 0, 0])\n                linear_extrude(height=0.2)\n                    text(\"ESD-SAFE\", size=3, halign=\"center\");\n    }\n}\n\n// Assembly\nunion() {\n    // Main tool body in ESD-safe color\n    color([0.15, 0.15, 0.15]) {\n        union() {\n            spudger_body();\n            flat_pry_tip();\n        }\n    }\n    \n    // ESD grip overlay\n    translate([0, 0, length*0.15]) {\n        esd_grip();\n    }\n    \n    // Markings\n    markings();\n}\n\n// Second tool - precision point\ntranslate([20, 0, 0]) {\n    color([0.15, 0.15, 0.15]) {\n        union() {\n            spudger_body();\n            point_tip();\n        }\n    }\n    \n    translate([0, 0, length*0.15]) {\n        esd_grip();\n    }\n    \n    translate([20, 0, 0]) {\n        markings();\n    }\n}",
    "renders": true
  },
  {
    "tool": "satellite",
    "openscad_code": "// Satellite Tool - Realistic Medium Complexity\n// A satellite with solar panels, body, antenna, and tools\n\n// Main module\nmodule satellite_tool() {\n    color(\"silver\") body();\n    color(\"navy\") solar_panels();\n    color(\"gold\") antenna();\n    color(\"gray\") tools();\n}\n\n// Satellite body - central octagonal prism\nmodule body() {\n    difference() {\n        cylinder(h=25, r=15, $fn=8);\n        // Hollow center for weight reduction\n        translate([0,0,2])\n            cylinder(h=21, r=12, $fn=8);\n        // Tool mounting holes on sides\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([12,0,12])\n                    rotate([90,0,0])\n                        cylinder(h=5, r=2.5);\n        }\n    }\n}\n\n// Solar panels with realistic details\nmodule solar_panel() {\n    difference() {\n        // Panel body\n        translate([-20,-15,0])\n            cube([40,30,2]);\n        // Solar cells grid pattern\n        for(x=[-17:8:17]) {\n            for(y=[-12:6:12]) {\n                translate([x,y,1.1])\n                    cube([7,5,0.2]);\n            }\n        }\n        // Mounting hole\n        translate([0,0,-1])\n            cylinder(h=4, r=1.5);\n    }\n}\n\nmodule solar_panels() {\n    // Left panel\n    translate([-25,0,15])\n        rotate([0,90,0])\n            solar_panel();\n    // Right panel\n    translate([25,0,15])\n        rotate([0,90,0])\n            mirror([1,0,0])\n                solar_panel();\n}\n\n// High-gain parabolic antenna\nmodule antenna() {\n    // Antenna dish\n    translate([0,0,30])\n        rotate_extrude()\n            translate([12,0,0])\n                circle(r=6);\n    \n    // Feed horn\n    translate([0,0,35])\n        cylinder(h=5, r=2);\n    \n    // Support arm\n    translate([0,0,25])\n        cylinder(h=5, r=1.5);\n}\n\n// Tools mounted on satellite\nmodule tools() {\n    // Robotic arm\n    translate([15,0,10])\n        rotate([0,90,0])\n            cylinder(h=20, r=1.5);\n    \n    // Camera/sensor\n    translate([-15,0,15])\n        difference() {\n            cylinder(h=8, r=4);\n            translate([0,0,6])\n                cylinder(h=3, r=2);\n        }\n    \n    // Tool attachment points\n    for(i=[0:1]) {\n        rotate([0,0,i*180])\n            translate([0,15,5])\n                tool_module();\n    }\n}\n\n// Modular tool attachment\nmodule tool_module() {\n    // Base mount\n    cylinder(h=5, r=3);\n    \n    // Gripper fingers\n    difference() {\n        translate([0,0,5])\n            cylinder(h=3, r=4);\n        for(i=[0:1]) {\n            rotate([0,0,i*90])\n                translate([2,0,5])\n                    cube([4,1,3]);\n        }\n    }\n}\n\n// Generate the complete satellite tool\nsatellite_tool();",
    "renders": true
  },
  {
    "tool": "cloud",
    "openscad_code": "// Cloud Storage Tool - 3D Print Version\n// Realistic design with integrated compartments\n\n// Main module\nmodule cloud_tool() {\n    // Set tool color - light gray\n    color([0.85,0.85,0.9]) {\n        \n        // Main cloud body - composed of multiple spheres\n        union() {\n            // Central sphere\n            translate([0,0,15]) sphere(r=20, $fn=32);\n            \n            // Left puff\n            translate([-15,10,22]) sphere(r=15, $fn=32);\n            \n            // Right puff\n            translate([15,10,22]) sphere(r=15, $fn=32);\n            \n            // Front puff\n            translate([0,-12,25]) sphere(r=12, $fn=32);\n            \n            // Back puff\n            translate([0,12,20]) sphere(r=13, $fn=32);\n            \n            // Bottom flattening for stability\n            translate([0,0,5]) cube([50,50,10], center=true);\n        }\n        \n        // Storage compartments - carved from the cloud\n        difference() {\n            // This is filled by the main body\n            \n            // Main storage compartment\n            translate([0,0,10]) \n                scale([1,1,0.8]) \n                sphere(r=16, $fn=32);\n            \n            // Smaller compartments\n            translate([-10,5,20]) \n                sphere(r=8, $fn=32);\n            translate([10,5,20]) \n                sphere(r=8, $fn=32);\n            translate([0,-8,22]) \n                sphere(r=6, $fn=32);\n        }\n        \n        // Reinforcement ridges for 3D printing\n        color([0.75,0.75,0.8]) {\n            // Bottom ring\n            translate([0,0,5]) \n                cylinder(h=2, r1=25, r2=25, $fn=64);\n            \n            // Side supports\n            for(i=[-30:30:30]) {\n                rotate([0,0,i]) \n                    translate([20,0,12]) \n                    cube([4,8,20], center=true);\n            }\n        }\n        \n        // Tool grip/handle on bottom\n        color([0.6,0.6,0.65]) {\n            translate([0,0,-2]) \n                cylinder(h=8, r1=18, r2=20, $fn=32);\n            \n            // Grip texture rings\n            for(h=[1:2:7]) {\n                translate([0,0,h-2]) \n                    cylinder(h=1, r1=19, r2=19.5, $fn=32);\n            }\n        }\n        \n        // Cloud face - subtle features\n        color([0.4,0.4,0.45]) {\n            // Eyes\n            translate([-8,5,28]) sphere(r=2.5, $fn=16);\n            translate([8,5,28]) sphere(r=2.5, $fn=16);\n            \n            // Smile\n            translate([0,-2,26]) \n                rotate([90,0,0]) \n                cylinder(h=1, r1=4, r2=4, $fn=32);\n            translate([0,-2,26]) \n                cube([8,1,2], center=true);\n        }\n        \n        // Drainage holes for cleaning\n        color([0.9,0.9,0.95]) {\n            for(angle=[0:60:300]) {\n                rotate([0,0,angle]) \n                    translate([15,0,8]) \n                    cylinder(h=10, r1=1.5, r2=1.5, $fn=16);\n            }\n        }\n        \n        // Label area - flat surface for customization\n        translate([0,-20,15]) \n            rotate([15,0,0]) \n            cube([20,8,0.5], center=true);\n    }\n}\n\n// Render the cloud tool\ncloud_tool();\n\n// Optional: Add support base for printing\n%translate([0,0,-5]) \n    cube([60,60,1], center=true);",
    "renders": true
  },
  {
    "tool": "edge",
    "openscad_code": "// OpenSCAD Chisel â€“ realistic style, medium complexity\n// Overall length â‰ˆ 85 mm, printable without support\n\n// Blade width\nblade_w = 20;\n// Blade length\nblade_l = 45;\n// Blade thickness (tapers toward edge)\nblade_t = 3;\n\n// Ferrule length\nferrule_l = 12;\n// Ferrule outer diameter\nferrule_d = 10;\n\n// Handle length\nhandle_l = 45;\n// Handle diameter (tapers slightly)\nhandle_d1 = 14;\nhandle_d2 = 12;\n\n// Grip ring geometry\nring_d = 16;\nring_t = 2;\nring_gap = 6;\nring_count = 3;\n\nmodule blade() {\n    // Main blade body\n    difference() {\n        // Tapered blade block\n        hull() {\n            translate([0, 0, blade_t/2])\n                cube([blade_l, blade_w, 0.1], center=true);\n            translate([blade_l/2 - 2, 0, 0])\n                cube([4, blade_w, blade_t], center=true);\n        }\n        // Grinding bevels â€“ upper\n        translate([blade_l - 8, 0, blade_t/2 - 0.5])\n            rotate([0, -25, 0])\n            cube([blade_l, blade_w + 2, blade_t], center=true);\n        // Lower bevel\n        mirror([0, 0, 1])\n            translate([blade_l - 8, 0, blade_t/2 - 0.5])\n            rotate([0, -25, 0])\n            cube([blade_l, blade_w + 2, blade_t], center=true);\n    }\n}\n\nmodule ferrule() {\n    color([0.7, 0.7, 0.7])\n    difference() {\n        cylinder(h = ferrule_l, d = ferrule_d, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = ferrule_l + 0.2, d = ferrule_d - 2, $fn = 32);\n    }\n}\n\nmodule handle() {\n    color([0.4, 0.2, 0.1])\n    union() {\n        // Main tapered handle\n        cylinder(h = handle_l, d1 = handle_d1, d2 = handle_d2, $fn = 32);\n        // Grip rings\n        for (i = [0 : ring_count - 1]) {\n            translate([0, 0, handle_l - (i + 0.5) * ring_gap])\n                cylinder(h = ring_t, d = ring_d, $fn = 32);\n        }\n        // Strike cap\n        translate([0, 0, handle_l])\n            cylinder(h = 3, d = handle_d1, $fn = 32);\n    }\n}\n\n// Assemble the chisel\nunion() {\n    translate([0, 0, -blade_t/2])\n        blade();\n    translate([-ferrule_l, 0, 0])\n        ferrule();\n    translate([-ferrule_l - handle_l, 0, 0])\n        handle();\n}",
    "renders": true
  },
  {
    "tool": "blockchain",
    "openscad_code": "// OpenSCAD Blockchain Key Tool - Realistic Style, Medium Complexity\n// A 3D-printable key-shaped tool representing blockchain technology\n\n// Global parameters\nkey_length = 80;\nkey_width = 25;\nkey_thickness = 6;\nhandle_length = 40;\nshaft_length = key_length - handle_length;\nwall_thickness = 2;\n\n// Colors\nkey_color = [0.7, 0.7, 0.8];  // Metallic silver\nblock_color = [0.2, 0.2, 0.3];  // Dark gray\nhighlight_color = [0.9, 0.9, 0.95];  // Light silver\n\n// Main module\nmodule blockchain_key() {\n    union() {\n        // Handle with blockchain pattern\n        translate([0, 0, 0]) {\n            handle();\n        }\n        \n        // Shaft with block links\n        translate([handle_length, 0, 0]) {\n            shaft();\n        }\n        \n        // Key teeth for blockchain nodes\n        translate([key_length - 8, 0, 0]) {\n            key_teeth();\n        }\n        \n        // Blockchain logo engraving\n        translate([handle_length/2, key_width/2 - 2, key_thickness/2]) {\n            blockchain_logo();\n        }\n    }\n}\n\n// Handle module with grip pattern\nmodule handle() {\n    color(key_color) {\n        difference() {\n            // Main handle body\n            cube([handle_length, key_width, key_thickness], center=false);\n            \n            // Grip grooves\n            for(i = [5:8:handle_length - 10]) {\n                translate([i, 3, key_thickness - 1]) {\n                    cube([3, key_width - 6, 1.5]);\n                }\n            }\n            \n            // Finger indentations\n            for(i = [10:15:handle_length - 15]) {\n                translate([i, key_width - 5, key_thickness/2]) {\n                    sphere(d=6, $fn=20);\n                }\n            }\n        }\n        \n        // Blockchain blocks pattern on handle\n        for(i = [8:12:handle_length - 15]) {\n            for(j = [5:10:key_width - 12]) {\n                translate([i, j, key_thickness - 0.5]) {\n                    color(block_color) {\n                        cube([3, 3, 0.5]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Shaft with chain links\nmodule shaft() {\n    color(key_color) {\n        difference() {\n            // Main shaft\n            cube([shaft_length, key_width - 8, key_thickness], center=false);\n            \n            // Chain link cutouts\n            for(i = [5:8:shaft_length - 10]) {\n                translate([i, (key_width - 8)/2 - 2, key_thickness/2 - 2]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h=4, r=3, $fn=20);\n                            cylinder(h=5, r=2, $fn=20);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Link connectors\n        for(i = [5:8:shaft_length - 10]) {\n            translate([i + 4, (key_width - 8)/2 - 1, key_thickness/2]) {\n                color(block_color) {\n                    cube([2, 2, 2]);\n                }\n            }\n        }\n    }\n}\n\n// Key teeth representing blockchain nodes\nmodule key_teeth() {\n    color(key_color) {\n        union() {\n            // Main teeth base\n            cube([8, key_width - 8, key_thickness], center=false);\n            \n            // Individual teeth\n            for(i = [0:2:6]) {\n                translate([i + 1, -1, 0]) {\n                    cube([1, key_width - 6, key_thickness + 2]);\n                }\n            }\n            \n            // Node indicators\n            for(i = [0:3:6]) {\n                translate([i + 2, (key_width - 8)/2 - 1, key_thickness + 1]) {\n                    color(block_color) {\n                        cylinder(h=2, r=1, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Blockchain logo engraving\nmodule blockchain_logo() {\n    color(highlight_color) {\n        linear_extrude(height=0.5) {\n            text(\"B\", size=8, font=\"Arial:style=Bold\");\n        }\n    }\n}\n\n// Generate the model\nblockchain_key();",
    "renders": true
  },
  {
    "tool": "quantum",
    "openscad_code": "// Quantum Resonance Analyzer Tool\n// A handheld device for field quantum measurements\n\n// Main parameters\n$fn = 32;\nbody_width = 35;\nbody_height = 80;\nbody_depth = 20;\ngrip_height = 40;\nprobe_length = 25;\nscreen_size = 28;\n\n// Main body assembly\nmodule main_body() {\n    color(\"silver\") {\n        // Central housing\n        translate([0, 0, body_height/2]) {\n            difference() {\n                cube([body_width, body_depth, body_height], center=true);\n                // Hollow interior\n                translate([0, 0, 5]) {\n                    cube([body_width-4, body_depth-4, body_height-8], center=true);\n                }\n            }\n        }\n        \n        // Top control surface\n        translate([0, 0, body_height-2]) {\n            cube([body_width-2, body_depth-2, 2], center=true);\n        }\n    }\n}\n\n// Grip handle\nmodule grip_handle() {\n    color(\"darkblue\") {\n        translate([0, 0, grip_height/2]) {\n            difference() {\n                // Main grip\n                cylinder(h=grip_height, r1=8, r2=7, center=false);\n                // Grip grooves\n                for(i = [5:5:grip_height-5]) {\n                    translate([0, 0, i]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=8, r=7.5, center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Display screen\nmodule display_screen() {\n    color(\"black\") {\n        translate([0, 0, body_height-1]) {\n            cube([screen_size, body_depth-4, 0.5], center=true);\n        }\n    }\n    \n    color(\"cyan\") {\n        // Screen grid pattern\n        for(x = [-screen_size/2+2:2:screen_size/2-2]) {\n            for(y = [-body_depth/2+2:2:body_depth/2-2]) {\n                translate([x, y, body_height-0.2]) {\n                    cube([0.3, 0.3, 0.3], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Quantum probe assembly\nmodule quantum_probe() {\n    color(\"gold\") {\n        // Probe housing\n        translate([0, 0, body_height+probe_length/2]) {\n            cylinder(h=probe_length, r=6, center=true);\n        }\n        \n        // Probe tip\n        translate([0, 0, body_height+probe_length]) {\n            cylinder(h=8, r1=6, r2=1, center=false);\n        }\n        \n        // Calibration rings\n        for(i = [1:2:6]) {\n            translate([0, 0, body_height+i]) {\n                cylinder(h=0.5, r=7, center=false);\n            }\n        }\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    color(\"red\") {\n        // Power button\n        translate([-body_width/3, 0, body_height-0.5]) {\n            cylinder(h=1, r=3, center=false);\n        }\n    }\n    \n    color(\"green\") {\n        // Mode button\n        translate([body_width/3, 0, body_height-0.5]) {\n            cylinder(h=1, r=3, center=false);\n        }\n    }\n    \n    color(\"yellow\") {\n        // Calibration dial\n        translate([0, body_depth/2+3, body_height-10]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=6, r=4, center=true);\n            }\n        }\n    }\n}\n\n// Status LEDs\nmodule status_leds() {\n    color(\"blue\") {\n        translate([-body_width/4, 0, body_height-0.5]) {\n            sphere(r=1.5);\n        }\n    }\n    \n    color(\"orange\") {\n        translate([body_width/4, 0, body_height-0.5]) {\n            sphere(r=1.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    grip_handle();\n    display_screen();\n    quantum_probe();\n    control_buttons();\n    status_leds();\n}",
    "renders": true
  },
  {
    "tool": "neural",
    "openscad_code": "// Neural Tool - Realistic Style\n// A 3D printable neurosurgical tool resembling a rongeur\n\n// Tool Parameters\nhandle_length = 80;\nhandle_diameter = 12;\njaw_length = 35;\njaw_width = 8;\njaw_thickness = 4;\nshaft_length = 50;\nshaft_diameter = 6;\n\n// Colors\n$fn = 32;\n\n// Main assembly\nmodule neural_tool() {\n    // Handle assembly\n    union() {\n        // Handle with grip texture\n        translate([0, 0, 0])\n            handle_grip();\n        \n        // Shaft connecting to jaws\n        translate([0, 0, handle_length])\n            rotate([90, 0, 0])\n                cylinder(h=shaft_length, d=shaft_diameter, $fn=16);\n        \n        // Upper jaw\n        translate([0, shaft_length, handle_length])\n            rotate([90, 0, 0])\n                color([0.8, 0.8, 0.8])\n                    upper_jaw();\n        \n        // Lower jaw\n        translate([0, shaft_length, handle_length])\n            rotate([90, 0, 0])\n                color([0.8, 0.8, 0.8])\n                    lower_jaw();\n        \n        // Joint mechanism\n        translate([0, shaft_length, handle_length])\n            sphere(d=shaft_diameter + 2);\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle_grip() {\n    color([0.1, 0.1, 0.1])\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings for better handling\n        for(i = [10:15:handle_length-20]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=handle_diameter - 1, $fn=32);\n        }\n    }\n    \n    // Finger grooves\n    for(i = [20:15:handle_length-30]) {\n        rotate([0, 0, 0])\n            translate([0, handle_diameter/2 - 1, i])\n                sphere(d=handle_diameter/3);\n    }\n}\n\n// Upper jaw with cutting edge\nmodule upper_jaw() {\n    union() {\n        // Main jaw body\n        translate([0, 0, jaw_length/2])\n            cube([jaw_width, jaw_length, jaw_thickness], center=true);\n        \n        // Curved cutting tip\n        translate([0, jaw_length/2 - 2, 0])\n            rotate([0, 0, 0])\n                cylinder(h=jaw_width, d=jaw_thickness, $fn=16);\n        \n        // Cutting edge\n        translate([0, jaw_length - 3, jaw_thickness/2])\n            cube([jaw_width, 3, 0.5], center=false);\n    }\n}\n\n// Lower jaw matching upper\nmodule lower_jaw() {\n    mirror([0, 0, 1])\n        upper_jaw();\n}\n\n// Generate the complete tool\nneural_tool();",
    "renders": true
  },
  {
    "tool": "artificial",
    "openscad_code": "// Adjustable wrench (realistic style, medium complexity)\n// Overall length ~100 mm\n\n// Colors\n$fn = 36;\n\nmodule wrench_body() {\n    color(\"silver\")\n    difference() {\n        // Main handle\n        translate([-40, -6, -3])\n            cube([80, 12, 6]);\n        \n        // Handle grip pattern\n        for(i = [1:7]) {\n            translate([-35 + i * 10, -6.1, -2])\n                cube([5, 12.2, 4]);\n        }\n        \n        // Hanging hole\n        translate([30, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h=12, r=3, center=true);\n    }\n}\n\nmodule adjustable_jaw() {\n    color(\"silver\")\n    union() {\n        // Fixed jaw\n        translate([40, -8, -5])\n            cube([15, 16, 10]);\n        \n        // Fixed jaw grip teeth\n        for(i = [0:5]) {\n            translate([40, -7.5 + i * 2.5, -3])\n                cube([15, 1, 6]);\n        }\n        \n        // Movable jaw base\n        translate([40, -8, -5])\n            cube([10, 16, 10]);\n        \n        // Movable jaw grip teeth\n        for(i = [0:5]) {\n            translate([40, -7.5 + i * 2.5, -3])\n                cube([10, 1, 6]);\n        }\n        \n        // Adjustment mechanism base\n        translate([50, -4, -2])\n            cube([8, 8, 4]);\n    }\n}\n\nmodule adjustment_screw() {\n    color(\"silver\")\n    union() {\n        // Screw base\n        translate([58, -3, -1.5])\n            cylinder(h=3, r=4);\n        \n        // Screw threads (simplified)\n        for(i = [0:4]) {\n            translate([58, -3, -1.5 + i * 0.6])\n                cylinder(h=0.3, r=4.2);\n        }\n        \n        // Thumb wheel\n        translate([58, -3, 1.5])\n            cylinder(h=5, r=6);\n        \n        // Thumb wheel knurling\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n                translate([58, 0, 1.5])\n                    cube([6, 0.5, 5], center=true);\n        }\n    }\n}\n\nmodule measurement_markings() {\n    color(\"black\")\n    for(i = [0:4]) {\n        translate([20 + i * 5, 6.1, -1])\n            cube([0.5, 0.2, 2]);\n    }\n}\n\n// Assembly\nwrench_body();\nadjustable_jaw();\nadjustment_screw();\nmeasurement_markings();",
    "renders": true
  },
  {
    "tool": "intelligent",
    "openscad_code": "// Intelligent Digital Multimeter - Realistic Style\n// Overall dimensions: 80mm x 40mm x 120mm\n\n// Main colors\nprobe_color = \"silver\";\nbody_color = \"darkslategray\";\nscreen_color = \"black\";\nbutton_color = \"dimgray\";\n\n// Main body module\nmodule multimeter_body() {\n    // Main body shell\n    difference() {\n        // Outer shell\n        color(body_color)\n        cube([80, 40, 120], center=true);\n        \n        // Display cutout\n        translate([0, 19.5, 30])\n            cube([50, 3, 30], center=true);\n        \n        // Button cutouts\n        for(i = [0:3]) {\n            translate([-30 + i*20, 19.5, -10])\n                cube([10, 3, 8], center=true);\n        }\n        \n        // Dial cutout\n        translate([0, 19.5, 50])\n            cylinder(h=5, r=12, center=true);\n    }\n    \n    // Display screen\n    translate([0, 18, 30])\n        color(screen_color)\n        cube([48, 2, 28], center=true);\n}\n\n// Function dial\nfunction_dial() {\n    translate([0, 15, 50])\n        rotate([0, 0, 45])\n        difference() {\n            // Dial base\n            cylinder(h=8, r=15, center=true);\n            \n            // Center hole\n            cylinder(h=10, r=3, center=true);\n            \n            // Pointer notch\n            translate([10, 0, 0])\n                cube([5, 3, 10], center=true);\n        }\n}\n\n// Buttons module\nmodule buttons() {\n    for(i = [0:3]) {\n        translate([-30 + i*20, 17, -10])\n            color(button_color)\n            cube([8, 2, 6], center=true);\n    }\n}\n\n// Input jacks\nmodule input_jacks() {\n    // Common jack\n    translate([-20, -19, -50])\n        color(probe_color)\n        cylinder(h=10, r=4);\n    \n    // V jack\n    translate([0, -19, -50])\n        color(probe_color)\n        cylinder(h=10, r=4);\n    \n    // mA jack\n    translate([20, -19, -50])\n        color(probe_color)\n        cylinder(h=10, r=4);\n}\n\n// Probe connectors\nmodule probe_connectors() {\n    // Right probe\n    translate([40, 0, -30])\n        rotate([90, 0, 0])\n        color(probe_color)\n        cylinder(h=60, r=2);\n    \n    // Left probe\n    translate([-40, 0, -30])\n        rotate([90, 0, 0])\n        color(probe_color)\n        cylinder(h=60, r=2);\n}\n\n// Grip texture\nmodule grip_texture() {\n    for(i = [-40:10:40]) {\n        for(j = [-50:10:50]) {\n            translate([i, 19, j])\n                cube([8, 1, 8], center=true);\n        }\n    }\n}\n\n// Main assembly\nmultimeter_body();\nfunction_dial();\nbuttons();\ninput_jacks();\nprobe_connectors();\n\n// Add grip texture to back\ntranslate([0, -19.5, 0])\n    grip_texture();",
    "renders": true
  },
  {
    "tool": "adaptive",
    "openscad_code": "// Adaptive Wrench - medium complexity realistic style\n// Overall size: ~80mm length\n\n$fn = 50;\n\n// Main colors\ncolor_wrench = [0.7, 0.7, 0.7]; // Grey metal\ncolor_grip = [0.1, 0.1, 0.1];   // Black rubber\ncolor_detail = [0.9, 0.9, 0.0]; // Yellow markings\n\nmodule handle_grooves() {\n    for(i = [0:5]) {\n        translate([0, -20 + i*7, 7])\n            cube([12, 2, 2], center=true);\n    }\n}\n\nmodule handle() {\n    color(color_grip)\n    difference() {\n        // Main handle body\n        translate([-6, 0, 0])\n            cube([12, 50, 14], center=true);\n        \n        // Grip grooves\n        handle_grooves();\n    }\n    \n    // End cap\n    color(color_wrench)\n    translate([0, 25, 0])\n        cylinder(h=3, r=7);\n}\n\nmodule adjustable_jaw() {\n    // Fixed jaw\n    color(color_wrench)\n    union() {\n        translate([0, -30, 0])\n            cube([15, 10, 8], center=true);\n        \n        // Jaw teeth\n        for(i = [0:3]) {\n            translate([-5 + i*3.5, -35, 0])\n                cube([2, 5, 8], center=true);\n        }\n    }\n    \n    // Movable jaw\n    color(color_wrench)\n    translate([12, -30, 0])\n        cube([15, 10, 8], center=true);\n    \n    // Movable jaw teeth\n    for(i = [0:3]) {\n        color(color_wrench)\n        translate([12 + 5 - i*3.5, -35, 0])\n            cube([2, 5, 8], center=true);\n    }\n}\n\nmodule adjustment_mechanism() {\n    // Thumb wheel\n    color(color_wrench)\n    difference() {\n        translate([12, -15, 0])\n            cylinder(h=8, r=8);\n        \n        // Knurling\n        for(i = [0:17]) {\n            rotate([0, 0, i*20])\n                translate([12, -15, -1])\n                    cube([0.5, 8, 10], center=true);\n        }\n    }\n    \n    // Threaded rod\n    color(color_wrench)\n    translate([12, -20, 0])\n        cylinder(h=10, r=2);\n    \n    // Measurement scale\n    color(color_detail)\n    for(i = [0:4]) {\n        translate([0, -30 - i*5, 4.1])\n            cube([0.5, 0.5, 0.5], center=true);\n    }\n}\n\nmodule wrench_body() {\n    // Main shaft\n    color(color_wrench)\n    translate([0, -10, 0])\n        cube([8, 40, 8], center=true);\n    \n    // Reinforcement ribs\n    color(color_wrench)\n    translate([0, 0, 4])\n        cube([10, 30, 2], center=true);\n}\n\n// Assemble the wrench\nunion() {\n    handle();\n    wrench_body();\n    adjustable_jaw();\n    adjustment_mechanism();\n}",
    "renders": true
  },
  {
    "tool": "predictive",
    "openscad_code": "// Predictive Tool - Crystal Ball with Arcane Base\n// Medium complexity, realistic style\n\n$fn = 50;\n\n// Main dimensions\nbase_height = 15;\nbase_radius = 25;\nball_radius = 20;\nstand_height = 10;\nring_thickness = 3;\n\n// Colors\ncolor_base = [100/255, 80/255, 60/255];  // Bronze\ncolor_ball = [200/255, 220/255, 255/255];  // Light blue crystal\ncolor_glow = [100/255, 150/255, 255/255, 0.3];  // Magical glow\n\nmodule base() {\n    // Main base cylinder\n    color(color_base)\n    cylinder(h=base_height, r=base_radius, center=false);\n    \n    // Decorative ring on top\n    translate([0, 0, base_height])\n    difference() {\n        cylinder(h=ring_thickness, r=base_radius, center=false);\n        cylinder(h=ring_thickness+0.1, r=base_radius-3, center=false);\n    }\n    \n    // Arcane symbols carved into base\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([base_radius-6, 0, base_height/2])\n        rotate([90, 0, 0])\n        color([0.3, 0.3, 0.3])\n        cylinder(h=2, r1=2, r2=1, center=true);\n    }\n}\n\nmodule stand() {\n    // Central support pillar\n    translate([0, 0, base_height + ring_thickness])\n    color(color_base)\n    cylinder(h=stand_height, r=base_radius/3, center=false);\n    \n    // Support arms\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([base_radius/2, 0, base_height + ring_thickness])\n        rotate([0, 45, 0])\n        color(color_base)\n        cylinder(h=stand_height*1.4, r=2, center=false);\n    }\n}\n\nmodule crystal_ball() {\n    // Main crystal sphere\n    translate([0, 0, base_height + ring_thickness + stand_height + ball_radius])\n    color(color_ball)\n    sphere(r=ball_radius);\n    \n    // Inner glow effect\n    translate([0, 0, base_height + ring_thickness + stand_height + ball_radius])\n    color(color_glow)\n    sphere(r=ball_radius*0.8);\n    \n    // Surface imperfections for realism\n    for(i = [0:5]) {\n        rotate([i*30, i*60, 0])\n        translate([0, ball_radius*0.95, 0])\n        color([1, 1, 1, 0.1])\n        sphere(r=0.5);\n    }\n}\n\nmodule decorative_elements() {\n    // Bottom base decorations\n    translate([0, 0, 2])\n    difference() {\n        cylinder(h=2, r=base_radius+2, center=false);\n        cylinder(h=2.1, r=base_radius, center=false);\n    }\n    \n    // Feet\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([base_radius*0.8, 0, 0])\n        color(color_base)\n        cylinder(h=5, r=3, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    stand();\n    crystal_ball();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "tool": "prescriptive",
    "openscad_code": "// Prescription Pill Splitter â€“ medium-complexity realistic style\n// All dimensions in mm, sized for easy 3D printing (â‰ˆ 80 mm long)\n\n// ---------- PARAMETERS ----------\nblade_th = 1.2;        // stainless blade thickness\nwall = 2.0;            // shell thickness for printability\nclear = 0.3;           // print clearance\ncolor_base = [0.9,0.9,0.9];\ncolor_blade = [0.6,0.6,0.6];\ncolor_grip = [0.2,0.2,0.2];\n\n// ---------- MODULES ----------\nmodule blade() {\n    color(color_blade)\n    difference() {\n        // sharp edge\n        translate([-10, -15, 0])\n            cube([20, 30, blade_th], center=true);\n        translate([0, 0, blade_th/2 + 0.1])\n            rotate([90, 0, 0])\n            cylinder(h=40, r1=15, r2=0, center=true);\n    }\n}\n\nmodule finger_grooves() {\n    linear_extrude(height=wall)\n    for(i=[-2:1:2])\n        translate([0, i*5, 0])\n            circle(d=4, $fn=12);\n}\n\nmodule top_half() {\n    difference() {\n        // main lid body\n        color(color_base)\n        hull() {\n            translate([-20, -25, 0])\n                cube([40, 50, 10]);\n            translate([-20, -25, 30])\n                cube([40, 50, 10]);\n        }\n        // cavity for pill\n        translate([0, 0, 15 + wall])\n            cube([30 - 2*clear, 40 - 2*clear, 20], center=true);\n        // blade slot\n        translate([0, 0, 10])\n            rotate([0, 90, 0])\n            cube([40, blade_th + clear, 50], center=true);\n    }\n    // blade\n    translate([0, 0, 20])\n        rotate([0, 90, 0])\n        blade();\n    // grip pattern\n    translate([0, -25, 5])\n        rotate([90, 0, 0])\n        finger_grooves();\n}\n\nmodule bottom_half() {\n    difference() {\n        // base shell\n        color(color_base)\n        hull() {\n            translate([-20, -25, 0])\n                cube([40, 50, 10]);\n            translate([-20, -25, 20])\n                cube([40, 50, 10]);\n        }\n        // pill bed\n        translate([0, 0, 10])\n            cube([30 - 2*clear, 40 - 2*clear, 10], center=true);\n        // V-groove for pill centering\n        translate([0, 0, 10.1])\n            rotate([90, 0, 0])\n            cylinder(h=30, r1=20, r2=0, center=true, $fn=60);\n    }\n    // grip pattern\n    translate([0, -25, 5])\n        rotate([90, 0, 0])\n        finger_grooves();\n}\n\n// ---------- MAIN ----------\nunion() {\n    // bottom shell\n    bottom_half();\n    // top shell â€“ hinged slightly open for visibility\n    translate([0, 0, 0])\n        rotate([30, 0, 0])\n        translate([0, 0, 20])\n        top_half();\n}",
    "renders": true
  },
  {
    "tool": "caliper",
    "openscad_code": "// Vernier Caliper - Realistic style, medium complexity\n// Overall length ~80mm, 3D printable\n\n$fn = 32;\n\n// Main body color\nbody_color = [0.2, 0.2, 0.2];\njaw_color = [0.4, 0.4, 0.4];\nscale_color = [0.8, 0.8, 0.8];\naccent_color = [0.9, 0.1, 0.1];\n\nmodule main_body() {\n    color(body_color)\n    difference() {\n        // Main beam\n        cube([60, 12, 6], center=true);\n        \n        // Thumb slot\n        translate([20, 0, -3.1])\n        cube([8, 8, 6.2], center=true);\n    }\n}\n\nmodule ruler_marks() {\n    color(scale_color)\n    for(i = [0:1:50]) {\n        translate([-25 + i, -6.5, 3.1])\n        cube([0.5, 2, 0.2]);\n    }\n    \n    // Vernier scale marks\n    for(i = [0:1:10]) {\n        translate([18 + i*0.9, 6.5, 3.1])\n        cube([0.3, 1.5, 0.2]);\n    }\n}\n\nmodule fixed_jaw() {\n    color(jaw_color)\n    union() {\n        // Jaw base\n        translate([-30, -8, 0])\n        cube([6, 16, 6]);\n        \n        // Measuring face\n        translate([-24, -10, -1])\n        cube([2, 20, 8]);\n        \n        // Depth probe\n        translate([-30, 0, -10])\n        rotate([90, 0, 0])\n        cylinder(h=15, d=2);\n    }\n}\n\nmodule sliding_jaw() {\n    color(jaw_color)\n    union() {\n        // Slider body\n        translate([15, -7, -2.5])\n        cube([10, 14, 5]);\n        \n        // Thumb wheel\n        translate([20, -8, -5])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=6);\n        \n        // Jaw\n        translate([25, -10, -1])\n        cube([2, 20, 8]);\n        \n        // Lock screw\n        translate([15, 0, 3.1])\n        cylinder(h=4, d=3);\n        \n        // Vernier plate\n        color(scale_color)\n        translate([17, 5.5, 2.9])\n        cube([8, 2, 0.2]);\n    }\n}\n\nmodule grip_texture() {\n    color(body_color)\n    for(i = [-2:1:2]) {\n        translate([20, i*2, 0])\n        cube([8, 0.5, 6.1]);\n    }\n}\n\n// Assembly\nmain_body();\nruler_marks();\nfixed_jaw();\nsliding_jaw();\ngrip_texture();",
    "renders": true
  },
  {
    "tool": "micrometer",
    "openscad_code": "// Realistic 3D printable micrometer\n// Overall length ~75 mm, printed standing upright for best surface finish\n\n$fn = 50;               // Smooth curves\nth = 1.2;               // General wall thickness (3Ã—0.4 mm nozzle)\nscale = 1;              // Global scale factor\n\n// ---------- Main assembly ----------\nmodule micrometer() {\n    // Frame (C-shaped anvil & frame)\n    color(\"silver\") frame();\n\n    // Spindle & thimble\n    translate([45, 0, 0]) color(\"silver\") spindle_assembly();\n\n    // Locking lever\n    translate([40, 0, 5]) color(\"black\") lock_lever();\n\n    // Measurement scale sleeve\n    translate([30, 0, 0]) color(\"silver\") scale_sleeve();\n\n    // Ratchet stop\n    translate([55, 0, 0]) color(\"black\") ratchet_stop();\n}\n\n// ---------- Frame ----------\nmodule frame() {\n    difference() {\n        union() {\n            // Main C-arm\n            linear_extrude(height = 15, center = true)\n                offset(r = 3)\n                    polygon([[0, 0], [35, 0], [35, 30], [0, 30]]);\n            // Anvil\n            translate([0, 0, 0])\n                cylinder(h = 15, d = 8, center = true);\n            // Frame body\n            translate([17.5, 15, 0])\n                cube([35, 8, 15], center = true);\n        }\n        // Lightening cut-outs\n        translate([17.5, 15, 0])\n            cube([30, 6, 13], center = true);\n        translate([0, 0, 0])\n            cylinder(h = 20, d = 4, center = true);\n    }\n}\n\n// ---------- Spindle assembly ----------\nmodule spindle_assembly() {\n    // Threaded spindle\n    difference() {\n        cylinder(h = 30, d = 7, center = true);\n        // Center bore\n        cylinder(h = 32, d = 3, center = true);\n    }\n\n    // Thimble grip\n    translate([15, 0, 0])\n    difference() {\n        cylinder(h = 20, d = 18, center = true);\n        // Grip knurls\n        for(i = [0:35])\n            rotate([0, 0, i*10])\n                translate([0, 8.5, 0])\n                    cube([1, 1, 20], center = true);\n    }\n}\n\n// ---------- Locking lever ----------\nmodule lock_lever() {\n    rotate([90, 0, 0])\n        cylinder(h = 10, d1 = 4, d2 = 3, center = true);\n}\n\n// ---------- Scale sleeve ----------\nmodule scale_sleeve() {\n    difference() {\n        cylinder(h = 15, d = 11, center = true);\n        // Spindle bore\n        cylinder(h = 17, d = 7.5, center = true);\n    }\n    // Graduation marks (0-25 mm range)\n    for(i = [0:24])\n        rotate([0, 0, i*14.4])\n            translate([5.5, 0, 0])\n                cube([1, 0.5, 0.2], center = true);\n}\n\n// ---------- Ratchet stop ----------\nmodule ratchet_stop() {\n    difference() {\n        cylinder(h = 8, d = 12, center = true);\n        // Knurled grip pattern\n        for(i = [0:23])\n            rotate([0, 0, i*15])\n                translate([0, 6, 0])\n                    cube([1, 1, 8], center = true);\n    }\n}\n\n// ---------- Render ----------\nmicrometer();",
    "renders": true
  },
  {
    "tool": "protractor",
    "openscad_code": "// Realistic Protractor Tool - Medium Complexity\n// 3D printable with proper wall thickness and no overhangs\n\n$fn = 64;\n\n// Main dimensions\nprotractor_radius = 45;\nprotractor_thickness = 3;\nbase_thickness = 2;\nhandle_length = 60;\nhandle_width = 15;\nhandle_thickness = 8;\nmarking_depth = 0.5;\n\n// Colors\ncolor_body = [0.9, 0.9, 0.9];  // Light gray\ncolor_markings = [0.1, 0.1, 0.1];  // Black\ncolor_handle = [0.7, 0.7, 0.7];  // Darker gray\n\nmodule protractor_base() {\n    // Main semicircular base\n    difference() {\n        union() {\n            // Semicircular body\n            linear_extrude(height = protractor_thickness) {\n                difference() {\n                    circle(r = protractor_radius);\n                    square([protractor_radius * 2, protractor_radius]);\n                }\n            }\n            \n            // Rectangular extension with ruler markings\n            translate([0, -protractor_radius, 0])\n                cube([protractor_radius * 2, 20, protractor_thickness]);\n        }\n        \n        // Inner cutout for material saving\n        translate([0, 0, -0.1])\n            linear_extrude(height = protractor_thickness + 0.2) {\n                difference() {\n                    circle(r = protractor_radius - 5);\n                    square([protractor_radius * 2 - 10, protractor_radius - 5]);\n                }\n            }\n    }\n}\n\nmodule degree_markings() {\n    color(color_markings) {\n        // Major marks every 10 degrees\n        for (i = [0:10:180]) {\n            rotate([0, 0, i - 90]) {\n                translate([protractor_radius - 2, -0.5, protractor_thickness - marking_depth])\n                    cube([2, 1, marking_depth]);\n            }\n        }\n        \n        // Minor marks every 5 degrees\n        for (i = [5:10:175]) {\n            rotate([0, 0, i - 90]) {\n                translate([protractor_radius - 1.5, -0.25, protractor_thickness - marking_depth])\n                    cube([1.5, 0.5, marking_depth]);\n            }\n        }\n        \n        // Degree numbers\n        for (i = [0:30:180]) {\n            rotate([0, 0, i - 90]) {\n                translate([protractor_radius - 7, -2, protractor_thickness - marking_depth])\n                    linear_extrude(height = marking_depth) {\n                        text(str(i), size = 3, halign = \"center\", valign = \"center\");\n                    }\n            }\n        }\n    }\n}\n\nmodule ruler_markings() {\n    color(color_markings) {\n        // Millimeter marks\n        for (i = [0:1:40]) {\n            translate([-protractor_radius + i, -protractor_radius, protractor_thickness - marking_depth]) {\n                if (i % 10 == 0) {\n                    // Centimeter marks\n                    cube([0.5, 5, marking_depth]);\n                    translate([0, -8, 0])\n                        linear_extrude(height = marking_depth)\n                            text(str(i/10), size = 2.5, halign = \"center\");\n                } else if (i % 5 == 0) {\n                    // 5mm marks\n                    cube([0.3, 3, marking_depth]);\n                } else {\n                    // 1mm marks\n                    cube([0.2, 2, marking_depth]);\n                }\n            }\n        }\n    }\n}\n\nmodule handle() {\n    color(color_handle) {\n        // Main handle body\n        translate([0, -protractor_radius - 25, -handle_thickness/2 + protractor_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h = handle_length, r1 = handle_width/2, r2 = handle_width/2 - 2);\n        \n        // Grip texture rings\n        for (i = [10:10:50]) {\n            translate([0, -protractor_radius - 25 - i, -handle_thickness/2 + protractor_thickness/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, r = handle_width/2 + 0.5, center = true);\n        }\n        \n        // Handle base connection\n        translate([0, -protractor_radius - 10, -handle_thickness/2 + protractor_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h = 20, r1 = handle_width/2 + 2, r2 = handle_width/2);\n    }\n}\n\nmodule center_mark() {\n    color(color_markings) {\n        // Center point indicator\n        translate([0, 0, protractor_thickness - marking_depth])\n            cylinder(h = marking_depth + 0.1, r = 1, $fn = 32);\n        \n        // Crosshair\n        translate([0, 0, protractor_thickness - marking_depth])\n            cube([0.5, 10, marking_depth + 0.1], center = true);\n        translate([0, 0, protractor_thickness - marking_depth])\n            rotate([0, 0, 90])\n                cube([0.5, 10, marking_depth + 0.1], center = true);\n    }\n}\n\n// Assembly\ncolor(color_body) protractor_base();\ndegree_markings();\nruler_markings();\nhandle();\ncenter_mark();",
    "renders": true
  },
  {
    "tool": "compass",
    "openscad_code": "// Realistic Compass Tool - Medium Complexity\n$fn = 64;\n\n// Overall dimensions\ncompass_height = 85;\nleg_length = 70;\njoint_diameter = 12;\nhandle_length = 30;\npencil_radius = 3.5;\nneedle_length = 15;\n\n// Main compass module\nmodule compass() {\n    color(\"silver\")\n    union() {\n        // Central joint/hub\n        translate([0, 0, compass_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=joint_diameter*1.5, r=joint_diameter, center=true);\n        \n        // First leg with pencil holder\n        translate([0, 0, compass_height/2])\n        rotate([90, 0, 0])\n        translate([joint_diameter/2, 0, 0])\n        rotate([0, 0, -30])\n        leg_assembly(leg_length, \"pencil\");\n        \n        // Second leg with needle\n        translate([0, 0, compass_height/2])\n        rotate([90, 0, 180])\n        translate([joint_diameter/2, 0, 0])\n        rotate([0, 0, 30])\n        leg_assembly(leg_length, \"needle\");\n        \n        // Adjustment screw\n        translate([joint_diameter*1.2, 0, compass_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=4);\n        \n        // Locking mechanism\n        translate([joint_diameter*1.2, 0, compass_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=5, r=6);\n    }\n}\n\n// Individual leg assembly\nmodule leg_assembly(length, type) {\n    difference() {\n        union() {\n            // Main leg\n            color(\"silver\")\n            cylinder(h=length, r=3);\n            \n            // Handle grip\n            translate([0, 0, length - handle_length])\n            color(\"darkgray\")\n            cylinder(h=handle_length, r=4);\n            \n            // Grip texture rings\n            for(i = [0:4]) {\n                translate([0, 0, length - handle_length + i*5 + 2.5])\n                color(\"gray\")\n                cylinder(h=2, r=4.2);\n            }\n            \n            // End fitting\n            if(type == \"pencil\") {\n                // Pencil holder\n                translate([0, 0, length])\n                color(\"silver\")\n                cylinder(h=15, r1=4, r2=2);\n                \n                // Pencil\n                translate([0, 0, length + 15])\n                color(\"yellow\")\n                cylinder(h=10, r=pencil_radius);\n            } else {\n                // Needle holder\n                translate([0, 0, length])\n                color(\"silver\")\n                cone(8, 5, 1);\n                \n                // Sharp needle\n                translate([0, 0, length + 8])\n                color(\"darkgray\")\n                cylinder(h=needle_length, r=0.5);\n            }\n        }\n        \n        // Center hole for joint\n        translate([0, 0, -joint_diameter/2])\n        cylinder(h=joint_diameter*2, r=1.5);\n    }\n}\n\n// Helper module for cone\nmodule cone(h, r1, r2) {\n    cylinder(h=h, r1=r1, r2=r2);\n}\n\ncompass();",
    "renders": true
  },
  {
    "tool": "meter",
    "openscad_code": "// Digital Multimeter - Realistic Style, Medium Complexity\n// Approx 85 mm x 55 mm x 25 mm\n\n// Main colors\n$fa = 1; $fs = 0.4;\n\nmodule body() {\n    difference() {\n        // Main body shell - rounded rectangle extrusion\n        minkowski() {\n            cube([80, 50, 18], center = true);\n            sphere(2.5);\n        }\n        // Hollow cavity inside\n        minkowski() {\n            cube([74, 44, 12], center = true);\n            sphere(2.5);\n        }\n    }\n}\n\nmodule lcd() {\n    color(\"darkslategray\") \n    translate([0, 12, 10])\n    cube([50, 22, 1.5], center = true);\n    \n    // LCD screen\n    color(\"black\")\n    translate([0, 12, 11.6])\n    cube([46, 18, 0.5], center = true);\n    \n    // Protective lens\n    color([0.9,0.9,0.9,0.7])\n    translate([0, 12, 11.7])\n    cube([46.2, 18.2, 0.4], center = true);\n}\n\nmodule dial() {\n    // Dial base\n    color(\"dimgray\")\n    translate([0, -12, 10])\n    cylinder(h = 3, r = 12, $fn = 60);\n    \n    // Dial knob\n    color(\"darkgray\")\n    translate([0, -12, 13.2])\n    cylinder(h = 2.5, r1 = 10, r2 = 9, $fn = 60);\n    \n    // Indicator line\n    color(\"red\")\n    rotate([90,0,0])\n    translate([0, -12, 11])\n    cube([0.8, 8.5, 2], center = true);\n}\n\nmodule button(x, label) {\n    translate([x, -5, 10]) {\n        // Button housing\n        color(\"gray20\")\n        cylinder(h = 1.8, r = 3.5, $fn = 32);\n        \n        // Button top\n        color(\"firebrick\")\n        translate([0,0,1.9])\n        cylinder(h = 1.2, r1 = 3.2, r2 = 2.8, $fn = 32);\n    }\n}\n\nmodule probeJack(x) {\n    color(\"gold\")\n    translate([x, -20, 9]) {\n        difference() {\n            cylinder(h = 4, r = 4.5, $fn = 32);\n            cylinder(h = 5, r = 3.5, $fn = 32);\n        }\n    }\n    color(\"black\")\n    translate([x, -20, 9])\n    cylinder(h = 0.5, r = 5, $fn = 32);\n}\n\nmodule gripStrip() {\n    for (i = [-35:7:35]) {\n        color(\"gray30\")\n        translate([i, 25, 0])\n        cube([5, 10, 20], center = true);\n    }\n}\n\nmodule meter() {\n    // Main assembly\n    color(\"darkolivegreen\") body();\n    lcd();\n    dial();\n    \n    // Buttons\n    button(-20, \"HOLD\");\n    button(-8, \"RANGE\");\n    button(8, \"REL\");\n    button(20, \"MINMAX\");\n    \n    // Probe jacks\n    probeJack(-30); // COM\n    probeJack(-15); // VÎ©mA\n    probeJack(15);  // 10A\n    \n    // Labels (very small raised features)\n    color(\"white\")\n    translate([30, -20, 10.5])\n    rotate([0,0,90])\n    linear_extrude(height = 0.3)\n    text(\"COM\", size = 3);\n    \n    translate([15, -20, 10.5])\n    rotate([0,0,90])\n    linear_extrude(height = 0.3)\n    text(\"VÎ©mA\", size = 3);\n    \n    translate([-15, -20, 10.5])\n    rotate([0,0,90])\n    linear_extrude(height = 0.3)\n    text(\"10A\", size = 3);\n    \n    // Back grip strips\n    gripStrip();\n}\n\n// Render the complete multimeter\nmeter();",
    "renders": true
  },
  {
    "tool": "scale",
    "openscad_code": "// Realistic scale tool - medium complexity\n// Digital caliper style measuring tool with sliding jaw\n\n// Main dimensions (mm)\n$fn = 32;\noverall_length = 90;\nbeam_width = 12;\nbeam_height = 6;\njaw_height = 20;\njaw_width = 15;\nscale_length = 60;\nscale_marking_height = 1.5;\n\n// Colors\ncolor_beam = [0.8, 0.8, 0.8];  // Silver\ncolor_jaw = [0.2, 0.2, 0.2];   // Dark gray\ncolor_scale = [0.1, 0.1, 0.1]; // Black markings\n\n// Main beam with measurement scale\nmodule main_beam() {\n    color(color_beam) {\n        // Main beam body\n        translate([0, 0, beam_height/2])\n            cube([overall_length, beam_width, beam_height], center=true);\n        \n        // Scale markings every 2mm\n        for (i = [0:2:scale_length-2]) {\n            translate([i - scale_length/2 + 5, beam_width/2 - 0.5, beam_height - 0.5])\n                cube([0.2, 1, scale_marking_height]);\n        }\n        \n        // Major markings every 10mm\n        for (i = [0:10:scale_length-10]) {\n            translate([i - scale_length/2 + 5, beam_width/2 - 1, beam_height - 0.5])\n                cube([0.3, 2, scale_marking_height]);\n        }\n    }\n}\n\n// Fixed jaw\nmodule fixed_jaw() {\n    color(color_jaw) {\n        // Jaw base\n        translate([-overall_length/2 + 5, 0, jaw_height/2])\n            cube([jaw_width, jaw_width, jaw_height], center=true);\n        \n        // Measuring surface\n        translate([-overall_length/2 + 5 + jaw_width/2, 0, 2])\n            cube([1, 8, 16], center=true);\n        \n        // Grip texture\n        for (i = [-4:2:4]) {\n            translate([-overall_length/2 + 5, i, 1])\n                cube([jaw_width - 2, 1, 0.5]);\n        }\n    }\n}\n\n// Sliding jaw assembly\nmodule sliding_jaw() {\n    color(color_jaw) {\n        // Main sliding body\n        translate([scale_length/2 - 10, 0, jaw_height/2])\n            cube([jaw_width + 5, jaw_width + 8, jaw_height], center=true);\n        \n        // Measuring blade\n        translate([scale_length/2 - 10 - jaw_width/2 - 2.5, 0, 2])\n            cube([1, 8, 16], center=true);\n        \n        // Thumb wheel\n        translate([scale_length/2 - 10, jaw_width/2 + 4, 8])\n            rotate([90, 0, 0])\n                cylinder(h=6, r=4, $fn=20);\n        \n        // Locking screw\n        translate([scale_length/2 - 10, 0, 18])\n            cylinder(h=8, r=2, $fn=8);\n        \n        // Grip texture\n        for (i = [-5:2:5]) {\n            translate([scale_length/2 - 10, i, 1])\n                cube([jaw_width + 3, 1, 0.5]);\n        }\n    }\n}\n\n// Depth probe\nmodule depth_probe() {\n    color(color_beam) {\n        translate([scale_length/2 - 10, 0, -2])\n            cylinder(h=25, r=1.5);\n    }\n}\n\n// Assembly\nmain_beam();\nfixed_jaw();\nsliding_jaw();\ndepth_probe();",
    "renders": true
  },
  {
    "tool": "balance",
    "openscad_code": "// Digital Balance Scale - Realistic Style, Medium Complexity\n// Overall dimensions: ~70mm wide x 60mm deep x 80mm tall\n\n// Parameters for easy scaling\nbase_w = 60;\nbase_d = 50;\nbase_h = 4;\npillar_h = 50;\npillar_d = 8;\nbeam_l = 70;\nbeam_h = 6;\nbeam_w = 4;\npan_d = 28;\npan_h = 5;\npan_edge = 2;\n\n// Colors\ncolor_base = \"DarkSlateGray\";\ncolor_pillar = \"SlateGray\";\ncolor_beam = \"Silver\";\ncolor_pan = \"LightGray\";\ncolor_indicator = \"Red\";\n\n// Base with feet\nmodule base() {\n    color(color_base)\n    difference() {\n        // Main base\n        cube([base_w, base_d, base_h], center=true);\n        \n        // Chamfer edges\n        translate([0, 0, base_h/2-1])\n        cube([base_w-2, base_d-2, 2], center=true);\n        \n        // Four foot pads\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n        translate([x*base_w/3, y*base_d/3, -base_h/2-1])\n        cube([8, 8, 2], center=true);\n    }\n}\n\n// Central pillar with support braces\nmodule pillar() {\n    color(color_pillar)\n    union() {\n        // Main pillar\n        cylinder(h=pillar_h, d=pillar_d, center=true);\n        \n        // Support braces\n        for(angle = [0, 120, 240])\n        rotate([0, 0, angle])\n        translate([0, -pillar_d/4, -pillar_h/4])\n        cube([pillar_d/2, pillar_d/2, pillar_h/2], center=true);\n    }\n}\n\n// Measurement beam with knife edge pivot\nmodule beam() {\n    color(color_beam)\n    union() {\n        // Main beam\n        translate([0, 0, 0])\n        cube([beam_l, beam_w, beam_h], center=true);\n        \n        // Knife edge pivot block\n        translate([0, 0, beam_h/2+1])\n        cube([beam_w*2, beam_w*2, 2], center=true);\n        \n        // Measurement marks\n        for(pos = [-beam_l/2+5 : 5 : beam_l/2-5])\n        translate([pos, beam_w/2+0.1, 0])\n        cube([0.5, 0.5, beam_h], center=true);\n        \n        // Center mark\n        translate([0, beam_w/2+0.1, 0])\n        color(color_indicator)\n        cube([1, 1, beam_h], center=true);\n    }\n}\n\n// Hanging pan with chain\nmodule pan(side) {\n    color(color_pan)\n    union() {\n        // Chain links (simplified)\n        for(i = [0:1:3]) {\n            translate([side*(beam_l/2-5), 0, -i*4-2])\n            rotate([90, 0, 0])\n            cylinder(h=3, d=2, center=true);\n        }\n        \n        // Pan\n        translate([side*(beam_l/2-5), 0, -18])\n        difference() {\n            cylinder(h=pan_h, d=pan_d);\n            cylinder(h=pan_h+1, d=pan_d-pan_edge*2);\n        }\n        \n        // Pan handle\n        translate([side*(beam_l/2-5), 0, -18-pan_h/2])\n        rotate([90, 0, 0])\n        cylinder(h=6, d=3);\n    }\n}\n\n// Indicator needle\nmodule indicator() {\n    color(color_indicator)\n    translate([0, beam_w/2+1, beam_h/2])\n    rotate([90, 0, 0])\n    cylinder(h=15, d=1.5);\n}\n\n// Assemble the balance\nbase();\ntranslate([0, 0, base_h/2+pillar_h/2])\npillar();\ntranslate([0, 0, base_h+pillar_h])\nrotate([0, 90, 0])\nbeam();\npan(1);\npan(-1);\ntranslate([0, 0, base_h+pillar_h+beam_h/2])\nindicator();",
    "renders": true
  },
  {
    "tool": "thermometer",
    "openscad_code": "// Realistic Thermometer Tool - Medium Complexity\n// 3D printable medical thermometer with probe, display, and control button\n\n// Color definitions\nthermo_color = \"silver\";\nprobe_color = \"silver\";\ndisplay_color = [0.1, 0.1, 0.1];\nbutton_color = \"red\";\nglass_color = \"white\";\n\n// Main dimensions\ntotal_length = 80;\nhandle_length = 45;\nprobe_length = 35;\nhandle_diameter = 12;\nprobe_diameter = 5;\n\n// Module for rounded handle\nmodule rounded_handle(length, diameter, radius) {\n    difference() {\n        union() {\n            // Main cylindrical body\n            cylinder(h=length, d=diameter, $fn=50);\n            \n            // Rounded top cap\n            translate([0, 0, length])\n                sphere(d=diameter, $fn=50);\n        }\n        \n        // Hollow inside for electronics\n        translate([0, 0, -1])\n            cylinder(h=length+2, d=diameter-4, $fn=50);\n    }\n}\n\n// Module for probe tip\nmodule probe_tip(length, base_dia, tip_dia) {\n    hull() {\n        cylinder(h=length*0.7, d=base_dia, $fn=30);\n        translate([0, 0, length*0.7])\n            cylinder(h=length*0.3, d=tip_dia, $fn=30);\n    }\n}\n\n// Module for display screen with bevel\nmodule display_screen(width, height, depth) {\n    translate([0, 0, -depth/2])\n        difference() {\n            // Main screen body\n            cube([width, height, depth], center=true);\n            \n            // Beveled edges\n            translate([0, 0, depth/2-0.5])\n                cube([width-2, height-2, depth+2], center=true);\n        }\n}\n\n// Module for button with tactile feel\nmodule button(diameter, height) {\n    difference() {\n        // Main button\n        cylinder(h=height, d=diameter, $fn=20);\n        \n        // Concave top\n        translate([0, 0, height-0.5])\n            sphere(d=diameter*1.2, $fn=20);\n    }\n}\n\n// Module for grip texture\nmodule grip_texture(handle_dia, handle_len) {\n    for(i = [5:10:handle_len-5]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(h=2, d=handle_dia, $fn=50);\n                cylinder(h=2.5, d=handle_dia-1, $fn=50);\n            }\n    }\n}\n\n// Main assembly\nmodule thermometer() {\n    // Handle body\n    color(thermo_color)\n        rounded_handle(handle_length, handle_diameter, 2);\n    \n    // Grip texture\n    color(\"gray\")\n        grip_texture(handle_diameter, handle_length);\n    \n    // Probe\n    translate([0, 0, handle_length])\n        color(probe_color)\n        probe_tip(probe_length, probe_diameter, probe_diameter*0.5);\n    \n    // Display housing\n    translate([0, handle_diameter/2 + 3, handle_length/2])\n        color(display_color)\n        display_screen(12, 6, 2);\n    \n    // Display screen (glass)\n    translate([0, handle_diameter/2 + 4.5, handle_length/2])\n        color(glass_color, 0.8)\n        cube([10, 4, 0.5], center=true);\n    \n    // Control button\n    translate([handle_diameter/2 + 2, 0, handle_length/2 - 5])\n        color(button_color)\n        button(4, 1.5);\n    \n    // Battery compartment cap\n    translate([0, 0, -2])\n        color(\"black\")\n        cylinder(h=2, d=handle_diameter-2, $fn=30);\n    \n    // Temperature scale markings\n    for(i = [0:2:14]) {\n        translate([handle_diameter/2 + 1, 0, handle_length - 10 - i*2])\n            color(\"black\")\n            cube([0.5, 0.5, 0.5]);\n    }\n}\n\n// Render the thermometer\nthermometer();",
    "renders": true
  },
  {
    "tool": "barometer",
    "openscad_code": "// Realistic Medium-Complexity Barometer Tool\n// Wall-mounted aneroid barometer with glass face, brass bezel, and wooden backplate\n\n$fn=36;\n\n// Main dimensions\nbackplate_d = 90;\nbackplate_t = 8;\nbezel_d = 75;\nbezel_t = 6;\nglass_d = 68;\nglass_t = 2;\nmech_d = 45;\nmech_t = 12;\ncenter_pin_d = 3;\n\n// Colors\nwood_color = \"#8B4513\";\nbrass_color = \"#B87333\";\nglass_color = \"#ADD8E6\";\nblack_color = \"#1C1C1C\";\nwhite_color = \"#F5F5F5\";\nred_color = \"#FF0000\";\n\n// Backplate with wood grain effect\nmodule backplate() {\n    color(wood_color)\n    difference() {\n        cylinder(h=backplate_t, d=backplate_d);\n        // Mounting hole\n        translate([0, 30, -1])\n            cylinder(h=backplate_t+2, d=5);\n    }\n    \n    // Wood grain rings\n    for(i=[1:3:10]) {\n        color(\"#654321\")\n        translate([0,0,backplate_t-0.1])\n        linear_extrude(height=0.2)\n            offset(r=-i*3)\n                circle(d=backplate_d-10);\n    }\n}\n\n// Brass bezel with knurling\nmodule bezel() {\n    color(brass_color)\n    union() {\n        // Main bezel ring\n        difference() {\n            cylinder(h=bezel_t, d=bezel_d);\n            translate([0,0,-1])\n                cylinder(h=bezel_t+2, d=glass_d+2);\n        }\n        \n        // Knurled edge\n        for(a=[0:15:359]) {\n            rotate([0,0,a])\n            translate([bezel_d/2-2, -1, 0])\n                cube([4, 2, bezel_t]);\n        }\n    }\n}\n\n// Glass cover\nmodule glass() {\n    color(glass_color, 0.3)\n    translate([0,0,bezel_t-glass_t])\n    cylinder(h=glass_t, d=glass_d);\n}\n\n// Internal mechanism\nmodule mechanism() {\n    color(\"#C0C0C0\")\n    difference() {\n        cylinder(h=mech_t, d=mech_d);\n        // Central cavity\n        translate([0,0,-1])\n            cylinder(h=mech_t+2, d=mech_d-10);\n    }\n}\n\n// Dial face with markings\nmodule dial_face() {\n    color(white_color)\n    translate([0,0,mech_t+0.1])\n    cylinder(h=0.5, d=mech_d-2);\n    \n    // Markings\n    color(black_color)\n    for(i=[0:9:270]) {\n        rotate([0,0,i])\n        translate([0, (mech_d-8)/2, mech_t+0.6])\n            cube([0.5, 6, 0.5]);\n    }\n    \n    // Pressure text\n    translate([0, -10, mech_t+0.7])\n        rotate([0,0,180])\n        color(black_color)\n        linear_extrude(height=0.3)\n            text(\"1013\", size=4, halign=\"center\");\n    \n    translate([0, 10, mech_t+0.7])\n        rotate([0,0,180])\n        color(black_color)\n        linear_extrude(height=0.3)\n            text(\"hPa\", size=3, halign=\"center\");\n}\n\n// Indicator needle\nmodule needle() {\n    color(red_color)\n    rotate([0,0,45])\n    union() {\n        // Main needle\n        translate([mech_d/4, 0, mech_t+1])\n            rotate([90,0,0])\n            cylinder(h=mech_d/2-2, d1=1, d2=0.5);\n        \n        // Counterweight\n        translate([-mech_d/6, 0, mech_t+1])\n            rotate([90,0,0])\n            cylinder(h=mech_d/6, d1=0.5, d2=1);\n        \n        // Center hub\n        translate([0,0,mech_t+0.9])\n            cylinder(h=2, d=center_pin_d+2);\n    }\n}\n\n// Assembly\ntranslate([0,0,0])\n    backplate();\n\ntranslate([0,0,backplate_t])\n    mechanism();\n\ntranslate([0,0,backplate_t+mech_t])\n    dial_face();\n\ntranslate([0,0,backplate_t+mech_t])\n    needle();\n\ntranslate([0,0,backplate_t+mech_t+mech_t/2])\n    glass();\n\ntranslate([0,0,backplate_t+mech_t+mech_t/2])\n    bezel();",
    "renders": true
  },
  {
    "tool": "hygrometer",
    "openscad_code": "// Hygrometer Tool - Realistic Style with Medium Complexity\n// Measures approximately 70mm x 50mm x 20mm\n\n// Color definitions\n$fn = 50;\n\n// Main housing module\nmodule housing() {\n    color(\"lightgray\") {\n        // Main body\n        difference() {\n            cube([60, 40, 15], center=true);\n            \n            // Display window cutout\n            translate([0, 0, 8])\n                cube([45, 25, 2], center=true);\n            \n            // Battery compartment\n            translate([20, -15, -7])\n                cube([15, 8, 3], center=true);\n        }\n        \n        // Display bezel\n        translate([0, 0, 8])\n            color(\"darkgray\")\n            cube([48, 28, 1], center=true);\n        \n        // Sensor grille\n        translate([0, 18, 0])\n            difference() {\n                cube([40, 4, 12], center=true);\n                for(i = [-18:4:18]) {\n                    translate([i, 0, 0])\n                        cube([2, 6, 14], center=true);\n                }\n            }\n    }\n}\n\n// Screen module\nmodule screen() {\n    color(\"black\") {\n        translate([0, 0, 9])\n            cube([42, 22, 0.5], center=true);\n    }\n    \n    // Display segments\n    color(\"lime\") {\n        // Humidity digits\n        for(pos = [-15, -5, 5, 15]) {\n            translate([pos, 5, 9.5])\n                cube([7, 12, 0.2], center=true);\n        }\n        \n        // Temperature digits\n        for(pos = [-10, 0, 10]) {\n            translate([pos, -5, 9.5])\n                cube([7, 12, 0.2], center=true);\n        }\n        \n        // % symbol\n        translate([22, 5, 9.5])\n            cube([3, 12, 0.2], center=true);\n        \n        // C symbol\n        translate([16, -5, 9.5])\n            cube([3, 12, 0.2], center=true);\n    }\n    \n    // Decimal point\n    color(\"lime\")\n    translate([0, -5, 9.5])\n        sphere(0.5);\n}\n\n// Buttons module\nmodule buttons() {\n    for(pos = [-25, -15, -5]) {\n        color(\"darkgray\") {\n            translate([pos, -20, 2])\n                cylinder(h=3, r=2.5, center=true);\n        }\n    }\n}\n\n// Battery cover module\nmodule battery_cover() {\n    color(\"darkgray\") {\n        translate([20, -15, -5.5])\n            cube([17, 10, 1], center=true);\n        \n        // Screw\n        translate([20, -15, -5])\n            color(\"black\")\n            cylinder(h=2, r=1, center=true);\n    }\n}\n\n// Probe connector\nmodule probe_connector() {\n    color(\"darkgray\") {\n        translate([-30, 0, 0])\n            cylinder(h=8, r=4, center=true);\n        \n        translate([-34, 0, 0])\n            cylinder(h=2, r=5, center=true);\n    }\n}\n\n// Wall mount hook\nmodule wall_mount() {\n    color(\"lightgray\") {\n        translate([0, 0, -9])\n            difference() {\n                cube([8, 30, 3], center=true);\n                translate([0, 0, 0])\n                    cube([4, 26, 4], center=true);\n            }\n    }\n}\n\n// Assembly\nhousing();\nscreen();\nbuttons();\nbattery_cover();\nprobe_connector();\nwall_mount();",
    "renders": true
  },
  {
    "tool": "anemometer",
    "openscad_code": "// OpenSCAD Anemometer Tool - Realistic Style, Medium Complexity\n// 3D printable handheld anemometer with rotating cups\n\n// Color definitions\ncolor_base = [0.2, 0.2, 0.2];       // Dark gray body\ncolor_cups = [0.9, 0.9, 0.9];      // Light gray cups\ncolor_accent = [0.1, 0.1, 0.8];    // Blue display\ncolor_grip = [0.1, 0.1, 0.1];      // Black grip\n\n// Main body dimensions\nbody_width = 15;\nbody_height = 60;\nbody_depth = 25;\n\n// Handle dimensions\nhandle_length = 80;\nhandle_diameter = 12;\n\n// Cup assembly dimensions\ncup_arm_length = 35;\ncup_radius = 10;\ncup_depth = 8;\nhub_radius = 8;\n\n// Display dimensions\ndisplay_width = 20;\ndisplay_height = 12;\ndisplay_depth = 2;\n\nmodule main_body() {\n    color(color_base)\n    union() {\n        // Main rectangular body\n        translate([0, 0, 0])\n            cube([body_width, body_depth, body_height], center=true);\n        \n        // Top rounded section\n        translate([0, 0, body_height/2 + 5])\n            cylinder(h=10, r=body_width/2, center=true);\n    }\n}\n\nmodule handle() {\n    color(color_base)\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Grip texture - concentric rings\n        for(i = [-35:5:35]) {\n            translate([0, 0, i])\n                cylinder(h=2, r1=handle_diameter/2 - 0.5, r2=handle_diameter/2 - 1, center=true);\n        }\n    }\n    \n    // Rubber grip overlay\n    color(color_grip)\n    translate([0, 0, -20])\n        cylinder(h=40, r=handle_diameter/2 + 1, center=true);\n}\n\nmodule cup() {\n    color(color_cups)\n    difference() {\n        // Main cup shape\n        sphere(r=cup_radius);\n        \n        // Hollow out the cup\n        sphere(r=cup_radius - 2);\n        \n        // Flatten one side\n        translate([0, cup_radius - 2, 0])\n            cube([cup_radius*2, cup_radius, cup_radius*2], center=true);\n    }\n}\n\nmodule cup_assembly() {\n    // Central hub\n    color(color_base)\n    cylinder(h=hub_radius*2, r=hub_radius, center=true);\n    \n    // Three cup arms and cups\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n        union() {\n            // Arm\n            color(color_base)\n            translate([cup_arm_length/2, 0, 0])\n                cube([cup_arm_length, 3, 3], center=true);\n            \n            // Cup\n            translate([cup_arm_length + cup_radius/2, 0, 0])\n                rotate([90, 0, 0])\n                cup();\n        }\n    }\n    \n    // Central shaft\n    color(color_base)\n    cylinder(h=hub_radius*2 + 10, r=2, center=true);\n}\n\nmodule display() {\n    // Display screen\n    color(color_accent)\n    translate([0, body_depth/2 + 1, body_height/4])\n        cube([display_width, display_depth, display_height], center=true);\n    \n    // Display bezel\n    color(color_base)\n    translate([0, body_depth/2 + 0.5, body_height/4])\n        cube([display_width + 4, display_depth + 1, display_height + 4], center=true);\n}\n\nmodule buttons() {\n    // Power button\n    color([0.8, 0.2, 0.2])\n    translate([body_width/2 + 2, -5, body_height/4])\n        cylinder(h=3, r=2, center=true);\n    \n    // Mode button\n    color([0.2, 0.8, 0.2])\n    translate([body_width/2 + 2, 5, body_height/4])\n        cylinder(h=3, r=2, center=true);\n}\n\n// Assembly\ntranslate([0, 0, -body_height/2 - handle_length/2])\n    rotate([90, 0, 0])\n    handle();\n\ntranslate([0, 0, 0])\n    main_body();\n\ntranslate([0, 0, body_height/2 + 15])\n    cup_assembly();\n\ndisplay();\nbuttons();",
    "renders": true
  },
  {
    "tool": "sextant",
    "openscad_code": "// Realistic Sextant Tool - OpenSCAD\n// Medium complexity version for 3D printing\n\n$fn = 50;\n\n// Frame color\nframe_color = \"#D4AF37\"; // Brass/gold color\nlens_color = \"#87CEEB\";  // Light blue for lenses\nmirror_color = \"#C0C0C0\"; // Silver for mirrors\n\n// Main dimensions\nframe_radius = 40;\nframe_thickness = 3;\nlimb_width = 6;\nhandle_length = 25;\nhandle_diameter = 8;\nmirror_size = 12;\ntelescope_length = 20;\n\n// Main frame arc (60 degrees)\nmodule frame_arc() {\n    color(frame_color) {\n        difference() {\n            // Outer arc\n            rotate([0, 0, -30])\n                rotate_extrude(angle = 60)\n                    translate([frame_radius, 0, 0])\n                        square([frame_thickness, limb_width], center = true);\n            \n            // Inner cutout\n            rotate([0, 0, -30])\n                rotate_extrude(angle = 60)\n                    translate([frame_radius - frame_thickness, 0, 0])\n                        square([frame_thickness, limb_width + 2], center = true);\n        }\n    }\n}\n\n// Index arm\nmodule index_arm() {\n    color(frame_color) {\n        // Main arm\n        rotate([0, 0, 0])  // Will be positioned by caller\n            linear_extrude(height = limb_width)\n                polygon(points = [\n                    [0, -2], [frame_radius - 5, -2], \n                    [frame_radius - 5, 2], [0, 2]\n                ]);\n        \n        // Vernier scale detail\n        for(i = [0:9]) {\n            translate([frame_radius - 10 + i, -3, limb_width/2])\n                cube([0.5, 3, 0.2]);\n        }\n    }\n}\n\n// Index mirror\nmodule index_mirror() {\n    color(mirror_color) {\n        // Mirror holder\n        translate([frame_radius - 15, 0, limb_width/2 + 2])\n            rotate([0, 45, 0])\n                cube([mirror_size, mirror_size, 1], center = true);\n        \n        // Actual mirror surface\n        color(lens_color) {\n            translate([frame_radius - 15, 0, limb_width/2 + 2.5])\n                rotate([0, 45, 0])\n                    cube([mirror_size - 2, mirror_size - 2, 0.2], center = true);\n        }\n    }\n}\n\n// Horizon mirror\nmodule horizon_mirror() {\n    color(mirror_color) {\n        // Mirror holder\n        translate([frame_radius - 5, 0, limb_width/2 + 2])\n            rotate([0, 45, 0])\n                cube([mirror_size/2, mirror_size, 1], center = true);\n        \n        // Half-silvered mirror\n        color(lens_color) {\n            translate([frame_radius - 5, 0, limb_width/2 + 2.5])\n                rotate([0, 45, 0])\n                    cube([mirror_size/2 - 1, mirror_size - 2, 0.2], center = true);\n        }\n    }\n}\n\n// Telescope\nmodule telescope() {\n    color(frame_color) {\n        translate([frame_radius - 5, -frame_radius/2, limb_width/2 + 5])\n            rotate([90, 0, 0])\n                cylinder(h = telescope_length, r1 = 3, r2 = 4);\n        \n        // Eyepiece\n        translate([frame_radius - 5, -frame_radius/2 - telescope_length, limb_width/2 + 5])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r = 4.5);\n    }\n}\n\n// Handle\nmodule handle() {\n    color(frame_color) {\n        // Main grip\n        translate([0, 0, -handle_length/2])\n            rotate([90, 0, 0])\n                cylinder(h = handle_length, r = handle_diameter/2);\n        \n        // Grip rings\n        for(i = [0:4]) {\n            translate([0, 0, -handle_length/2 + i*5])\n                rotate([90, 0, 0])\n                    cylinder(h = 0.5, r = handle_diameter/2 + 0.5);\n        }\n    }\n}\n\n// Micrometer drum\nmodule micrometer() {\n    color(frame_color) {\n        translate([frame_radius - 5, 0, -5])\n            rotate([90, 0, 0])\n                cylinder(h = 8, r = 4);\n        \n        // Drum markings\n        for(i = [0:35]) {\n            rotate([0, 0, i * 10])\n                translate([frame_radius - 5, 0, -4])\n                    cube([0.5, 3.5, 0.5]);\n        }\n    }\n}\n\n// Assembly\nmodule sextant() {\n    // Main frame\n    frame_arc();\n    \n    // Handle\n    handle();\n    \n    // Index arm with mirror\n    index_arm();\n    index_mirror();\n    \n    // Horizon mirror\n    horizon_mirror();\n    \n    // Telescope\n    telescope();\n    \n    // Micrometer drum\n    micrometer();\n    \n    // Frame brace\n    color(frame_color) {\n        translate([0, 0, limb_width/2])\n            cube([frame_radius - 10, 2, limb_width], center = false);\n    }\n}\n\n// Render the sextant\nsextant();",
    "renders": true
  },
  {
    "tool": "astrolabe",
    "openscad_code": "// Astrolabe - medium detail 3D printable model\n// Overall diameter ~80 mm, 2 mm wall thickness\n\nmodule armilla(){\n    // Main graduated ring (mater)\n    rotate_extrude(angle=360, $fn=100)\n        translate([40,0,0])\n            square([2,5],center=true);\n    \n    // Inner scale marks (hour lines)\n    for(i=[0:15:359])\n        rotate([0,0,i])\n            translate([39,0,2.5])\n                cube([1,0.5,1],center=true);\n}\n\nmodule throne(){\n    // Suspension ring holder\n    translate([0,0,5])\n        rotate([90,0,0])\n            difference(){\n                cylinder(h=10,r=6,center=true,$fn=30);\n                cylinder(h=11,r=3,center=true,$fn=30);\n            }\n    \n    // Suspension ring\n    translate([0,-10,5])\n        rotate([90,0,0])\n            rotate_extrude($fn=50)\n                translate([7,0,0])\n                    circle(r=1,$fn=20);\n}\n\nmodule rete(){\n    // Ecliptic ring with star pointers\n    color(\"gold\")\n    rotate([0,0,23.5]) // Obliquity\n    difference(){\n        cylinder(h=2,r=35,$fn=100);\n        cylinder(h=3,r=33,$fn=100);\n    }\n    \n    // Star pointers\n    for(star=[[30,25],[120,20],[200,30],[300,15]]){\n        rotate([0,0,star[0]])\n            translate([0,star[1],1])\n                cylinder(h=3,r1=1,r2=0,$fn=10);\n    }\n    \n    // Central web\n    rotate([0,0,45])\n        translate([0,10,1])\n            cube([20,2,2],center=true);\n}\n\nmodule climate(lat=45){\n    // Tympan plate for given latitude\n    color(\"silver\")\n    difference(){\n        cylinder(h=2,r=39,$fn=100);\n        cylinder(h=3,r=5,$fn=30);\n    }\n    \n    // Altitude circles\n    for(alt=[10:10:80]){\n        rotate_extrude(angle=360,$fn=100)\n            translate([39*sin(alt),0,0])\n                square([0.5,2],center=true);\n    }\n}\n\nmodule alidade(){\n    // Sighting rule with vanes\n    color(\"brass\")\n    difference(){\n        union(){\n            // Main beam\n            cube([60,2,3],center=true);\n            \n            // Sighting vanes\n            translate([28,0,1.5])\n                cube([4,0.5,4],center=true);\n            translate([-28,0,1.5])\n                cube([4,0.5,4],center=true);\n        }\n        \n        // Sight holes\n        translate([28,0,3.5])\n            rotate([90,0,0])\n                cylinder(h=5,r=0.5,$fn=10);\n        translate([-28,0,3.5])\n            rotate([90,0,0])\n                cylinder(h=5,r=0.5,$fn=10);\n    }\n}\n\n// Assembly\nunion(){\n    // Main body\n    armilla();\n    \n    // Suspension\n    throne();\n    \n    // Tympan (climate plate)\n    translate([0,0,-3])\n        climate();\n    \n    // Rete (star map)\n    translate([0,0,3])\n        rete();\n    \n    // Alidade (sighting rule)\n    translate([0,0,6])\n        rotate([0,0,45])\n            alidade();\n}",
    "renders": true
  },
  {
    "tool": "planimeter",
    "openscad_code": "// Polar Planimeter - Realistic Style, Medium Complexity\n// Overall dimensions ~80mm length, 3D printable\n\n$fn = 32;\n\n// Main colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_arm = [0.9, 0.9, 0.9];\ncolor_wheel = [0.1, 0.1, 0.1];\ncolor_marker = [0.8, 0.1, 0.1];\ncolor_grip = [0.05, 0.05, 0.05];\n\nmodule main_arm() {\n    color(color_arm)\n    union() {\n        // Main arm body - tapered rectangular prism\n        hull() {\n            translate([-2, 0, 0]) cylinder(h=4, r=4, center=true);\n            translate([60, 0, 0]) cylinder(h=3, r=2.5, center=true);\n        }\n        \n        // Reinforcement ridges\n        for(i = [0:12:48]) {\n            translate([i, 0, 2]) cube([1, 8, 0.5], center=true);\n        }\n    }\n}\n\nmodule pivot_base() {\n    color(color_base)\n    difference() {\n        // Base cylinder\n        cylinder(h=8, r=12);\n        \n        // Center hole for pivot pin\n        translate([0, 0, -1]) cylinder(h=10, r=2);\n        \n        // Mounting holes\n        for(a = [0:120:240]) {\n            rotate([0, 0, a])\n            translate([8, 0, -1]) cylinder(h=10, r=1.5);\n        }\n    }\n    \n    // Rubber grip ring\n    color(color_grip)\n    translate([0, 0, 8.5])\n    cylinder(h=3, r=12.5);\n}\n\nmodule tracer_arm() {\n    color(color_arm)\n    union() {\n        // Arm shaft\n        rotate([90, 0, 0])\n        cylinder(h=45, r=2.5);\n        \n        // Tracer needle housing\n        translate([0, 0, -45])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=4);\n        \n        // Needle point\n        color(color_marker)\n        translate([0, 0, -48])\n        rotate([90, 0, 0])\n        cylinder(h=6, r=0.5);\n        \n        // Adjustment slider\n        color(color_base)\n        translate([0, 20, -20])\n        cube([6, 4, 8], center=true);\n    }\n}\n\nmodule measuring_wheel() {\n    color(color_wheel)\n    union() {\n        // Main wheel\n        rotate([90, 0, 0])\n        cylinder(h=3, r=10);\n        \n        // Wheel rim\n        translate([0, 0, 1.5])\n        rotate([90, 0, 0])\n        cylinder(h=3.5, r=11);\n        \n        // Hub\n        color(color_base)\n        rotate([90, 0, 0])\n        cylinder(h=4, r=3);\n        \n        // Counting scale marks\n        for(i = [0:30:360]) {\n            rotate([90, 0, i])\n            translate([9.5, 0, 1.5])\n            cube([0.5, 0.2, 2], center=true);\n        }\n    }\n}\n\nmodule hinge_joint() {\n    color(color_base)\n    union() {\n        // Main hinge body\n        translate([0, 0, 5])\n        cylinder(h=10, r=5);\n        \n        // Mounting flanges\n        for(a = [0, 180]) {\n            rotate([0, 0, a])\n            translate([0, 8, 5])\n            cube([3, 6, 10], center=true);\n        }\n        \n        // Pivot pin\n        color(color_grip)\n        translate([0, 0, 10])\n        cylinder(h=3, r=1.5);\n    }\n}\n\n// Assembly\n// Pivot base at origin\npivot_base();\n\n// Main arm extending from pivot\ntranslate([0, 0, 8])\nrotate([0, 0, 30])\nmain_arm();\n\n// Hinge joint connecting arms\ntranslate([60, 0, 8])\nrotate([0, 0, 30])\nhinge_joint();\n\n// Tracer arm\ntranslate([60, 0, 8])\nrotate([0, 0, 30])\ntranslate([0, 0, 11])\ntracer_arm();\n\n// Measuring wheel assembly\ntranslate([30, 0, 8])\nrotate([0, 0, 30])\ntranslate([0, 0, -2])\nmeasuring_wheel();",
    "renders": true
  },
  {
    "tool": "goniometer",
    "openscad_code": "// Goniometer Tool - Medium Complexity Realistic Style\n// Medical protractor for measuring joint angles\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main colors\ncolor_body = [0.9, 0.9, 0.9];  // Light gray\ncolor_markings = [0.2, 0.2, 0.2];  // Black\ncolor_grip = [0.1, 0.1, 0.1];  // Dark gray\ncolor_highlight = [0.8, 0.8, 0.8];  // Slightly lighter\n\n// Overall dimensions\narm_length = 45;\narm_width = 7;\narm_thickness = 3;\nhinge_diameter = 12;\nhinge_height = 4;\ngrip_length = 15;\n\n// Main body with arms\nmodule goniometer() {\n    difference() {\n        union() {\n            // First arm\n            color(color_body)\n            translate([0, -arm_length/2, 0])\n            rotate([0, 0, 0])\n            cube([arm_width, arm_length, arm_thickness], center=true);\n            \n            // Second arm (rotatable part)\n            color(color_body)\n            translate([0, -arm_length/2, 0])\n            rotate([0, 0, 180])\n            cube([arm_width, arm_length, arm_thickness], center=true);\n            \n            // Central hinge cylinder\n            color(color_highlight)\n            translate([0, 0, 0])\n            cylinder(h=hinge_height, d=hinge_diameter, center=true);\n            \n            // Grip areas on arms\n            color(color_grip)\n            translate([0, -arm_length + grip_length/2, -arm_thickness/2 - 0.1])\n            cube([arm_width + 1, grip_length, 1.5]);\n            \n            color(color_grip)\n            translate([0, arm_length - grip_length/2, -arm_thickness/2 - 0.1])\n            cube([arm_width + 1, grip_length, 1.5]);\n        }\n        \n        // Center hole in hinge\n        color(color_markings)\n        translate([0, 0, -hinge_height/2 - 0.1])\n        cylinder(h=hinge_height + 0.2, d=hinge_diameter/3, center=false);\n    }\n}\n\n// Degree markings on arms\nmodule markings() {\n    for (i = [0:5:180]) {\n        if (i % 15 == 0) {\n            // Major tick marks\n            color(color_markings)\n            rotate([90, 0, 0])\n            translate([0, -hinge_diameter/2 - 2, 0])\n            rotate([0, 0, i])\n            translate([0, 0, 0])\n            cube([0.5, 3, 0.3], center=true);\n        } else {\n            // Minor tick marks\n            color(color_markings)\n            rotate([90, 0, 0])\n            translate([0, -hinge_diameter/2 - 1.5, 0])\n            rotate([0, 0, i])\n            translate([0, 0, 0])\n            cube([0.3, 1.5, 0.2], center=true);\n        }\n    }\n    \n    // Numbers every 15 degrees\n    for (i = [0:15:180]) {\n        if (i <= 180) {\n            color(color_markings)\n            rotate([90, 0, 0])\n            translate([0, -hinge_diameter/2 - 4.5, 0])\n            rotate([0, 0, i])\n            translate([0, 0, 0])\n            linear_extrude(height=0.5)\n            text(str(i), size=2, halign=\"center\", valign=\"center\");\n        }\n    }\n}\n\n// Arm extensions for better measurement\nmodule extensions() {\n    // Left extension\n    color(color_body)\n    translate([0, -arm_length - 5, 0])\n    cube([1.5, 10, arm_thickness], center=true);\n    \n    // Right extension\n    color(color_body)\n    translate([0, arm_length + 5, 0])\n    cube([1.5, 10, arm_thickness], center=true);\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    goniometer();\n    markings();\n    extensions();\n}",
    "renders": true
  },
  {
    "tool": "goniostat",
    "openscad_code": "// Goniostat OpenSCAD Model\n// Realistic style with medium complexity\n\n$fn = 50;\n\n// Main dimensions\nbase_length = 80;\nbase_width = 60;\nbase_height = 8;\narm_length = 70;\narm_width = 12;\narm_height = 8;\nprotractor_radius = 25;\nprotractor_thickness = 3;\nhandle_radius = 8;\nhandle_length = 30;\n\nmodule base() {\n    color([0.2, 0.2, 0.2]) {\n        // Main base plate\n        difference() {\n            cube([base_length, base_width, base_height], center=true);\n            // Rounded corners\n            for(x=[-1,1]) {\n                for(y=[-1,1]) {\n                    translate([x*(base_length/2-10), y*(base_width/2-10), -base_height/2-0.1])\n                        cylinder(h=base_height+0.2, r=10, $fn=20);\n                }\n            }\n        }\n        \n        // Center pivot post\n        translate([0, 0, base_height/2])\n            cylinder(h=15, r=6, center=false);\n    }\n}\n\nmodule protractor() {\n    color([0.8, 0.8, 0.8]) {\n        // Main protractor disc\n        difference() {\n            cylinder(h=protractor_thickness, r=protractor_radius, center=true);\n            // Center hole\n            cylinder(h=protractor_thickness+0.2, r=3, center=true);\n        }\n        \n        // Degree markings\n        for(i=[0:5:180]) {\n            rotate([0, 0, i])\n                translate([protractor_radius-2, 0, protractor_thickness/2+0.1])\n                    cube([2, 1, 0.2], center=true);\n        }\n        \n        // Number markers\n        for(i=[0:30:180]) {\n            rotate([0, 0, i])\n                translate([protractor_radius-8, 0, protractor_thickness/2+0.2])\n                    cube([1, 4, 0.3], center=true);\n        }\n    }\n}\n\nmodule measuring_arm() {\n    color([0.7, 0.7, 0.7]) {\n        // Main arm body\n        difference() {\n            cube([arm_length, arm_width, arm_height], center=true);\n            // Tapered end\n            translate([arm_length/2-5, 0, -arm_height/2-0.1])\n                cube([10, arm_width-4, arm_height+0.2], center=true);\n        }\n        \n        // Measurement scale markings\n        for(i=[5:5:arm_length-10]) {\n            translate([-arm_length/2+i, 0, arm_height/2+0.1])\n                cube([0.5, arm_width-2, 0.2], center=true);\n        }\n        \n        // Pivot connection\n        translate([-arm_length/2+5, 0, -arm_height/2-5])\n            cylinder(h=arm_height+10, r=4, center=true);\n    }\n}\n\nmodule handle() {\n    color([0.3, 0.3, 0.3]) {\n        // Main handle\n        difference() {\n            cylinder(h=handle_length, r=handle_radius, center=true);\n            // Grip grooves\n            for(i=[-handle_length/2+5:3:handle_length/2-5]) {\n                translate([0, 0, i])\n                    cylinder(h=1, r=handle_radius-1, center=true);\n            }\n        }\n        \n        // Handle base\n        translate([0, 0, handle_length/2])\n            cylinder(h=4, r=handle_radius+2, center=false);\n    }\n}\n\nmodule locking_mechanism() {\n    color([0.6, 0.6, 0.6]) {\n        // Thumb screw\n        translate([0, 0, 20])\n            cylinder(h=8, r=5, $fn=6, center=true);\n        \n        // Spring mechanism\n        translate([0, 0, 25])\n            cylinder(h=5, r=2, center=true);\n    }\n}\n\n// Assembly\nbase();\n\n// Protractor assembly\ntranslate([0, 0, base_height/2+7.5])\n    protractor();\n\n// Measuring arm\ntranslate([0, 0, base_height/2+7.5+protractor_thickness/2+arm_height/2])\n    measuring_arm();\n\n// Handle\ntranslate([arm_length/2-10, 0, base_height/2+7.5+protractor_thickness/2+arm_height/2])\n    rotate([0, 90, 0])\n    handle();\n\n// Locking mechanism\ntranslate([0, 0, base_height/2+7.5+protractor_thickness/2+arm_height/2])\n    locking_mechanism();",
    "renders": true
  },
  {
    "tool": "clock",
    "openscad_code": "// Realistic Clock Tool - Medium Complexity\n// Wall clock with 3D-printable design\n\n// Color definitions\n$fn=50;\n\nmodule clock_body() {\n    // Main circular body\n    color(\"silver\")\n    difference() {\n        cylinder(h=8, d=60);\n        // Hollow out the center\n        translate([0,0,-1])\n            cylinder(h=10, d=52);\n    }\n    \n    // Back mounting ring\n    color(\"darkgray\")\n    translate([0,0,-2])\n        cylinder(h=4, d=30);\n}\n\nmodule clock_face() {\n    // Clock face with numbers\n    color(\"white\")\n    translate([0,0,6.5])\n        cylinder(h=1, d=58);\n    \n    // Hour markers\n    for(h=[1:12]) {\n        rotate([0,0,h*30])\n        translate([23,0,7.5])\n            cube([4,1.5,1.5], center=true);\n    }\n    \n    // Numbers 12, 3, 6, 9\n    color(\"black\")\n    translate([0,0,8)\n        cylinder(h=0.5, d=2);\n}\n\nmodule clock_hands() {\n    // Hour hand\n    color(\"black\")\n    translate([0,0,7.5])\n    rotate([0,0,0])\n        union() {\n            cube([14,2,0.8], center=true);\n            cylinder(h=0.8, d=3);\n        }\n    \n    // Minute hand\n    color(\"black\")\n    translate([0,0,7])\n    rotate([0,0,0])\n        union() {\n            cube([18,1.5,0.6], center=true);\n            cylinder(h=0.6, d=2.5);\n        }\n    \n    // Second hand\n    color(\"red\")\n    translate([0,0,6.5])\n    rotate([0,0,0])\n        union() {\n            cube([20,0.8,0.4], center=true);\n            cylinder(h=0.4, d=2);\n        }\n    \n    // Center cap\n    color(\"silver\")\n    translate([0,0,6.2])\n        cylinder(h=1.5, d=4);\n}\n\nmodule winding_mechanism() {\n    // Key winding mechanism\n    color(\"gold\")\n    translate([15,15,8])\n    rotate([90,0,0])\n        cylinder(h=6, d=6);\n    \n    // Key handle\n    translate([15,15,14])\n    rotate([90,0,0])\n        difference() {\n            cylinder(h=10, d=4);\n            translate([0,0,-1])\n                cylinder(h=12, d=2);\n        }\n}\n\n// Main assembly\nclock_body();\nclock_face();\nclock_hands();\nwinding_mechanism();",
    "renders": true
  },
  {
    "tool": "chronometer",
    "openscad_code": "// Chronometer (stopwatch) - OpenSCAD medium-complexity model\n// Overall size: 70 mm diameter, 25 mm thick\n\n// Color definitions\n$fa = 2; $fs = 0.5;\n\n// Main body\ncolor(\"silver\")\ndifference() {\n    // Outer case\n    cylinder(h = 8, d = 70, center = true);\n\n    // Recess for crystal\n    translate([0,0,4.1])\n    cylinder(h = 1, d = 55, center = true);\n}\n\n// Crystal/glass\ncolor([0.8,0.9,1,0.6])\ntranslate([0,0,5])\ncylinder(h = 2, d = 54, center = true);\n\n// Bezel ring\ncolor(\"gray20\")\ndifference() {\n    cylinder(h = 3, d = 74, center = true);\n    cylinder(h = 4, d = 66, center = true);\n}\n\n// Bezel grip ridges\nfor(a = [0:15:345])\n    rotate([0,0,a])\n    translate([34,0,0])\n    cube([2, 1.5, 3.5], center = true);\n\n// Dial face\ncolor(\"white\")\ntranslate([0,0,3.5])\ncylinder(h = 0.5, d = 52, center = true);\n\n// Hour markers\nfor(i = [1:12]) {\n    angle = i * 30;\n    color(\"black\")\n    rotate([0,0,angle])\n    translate([22,0,3.75])\n    cube([1.5, 0.5, 0.2], center = true);\n}\n\n// Minute markers\nfor(i = [0:59]) {\n    angle = i * 6;\n    len = (i % 5 == 0) ? 2 : 1;\n    color(\"black\")\n    rotate([0,0,angle])\n    translate([24,0,3.75])\n    cube([len, 0.3, 0.1], center = true);\n}\n\n// Main second hand\ncolor(\"red\")\ntranslate([0,0,4])\nrotate([0,0,-90])\nlinear_extrude(height = 0.3)\n    polygon(points = [[0,0], [18,0.5], [18,-0.5], [0,0]]);\n\n// Minute hand\ncolor(\"black\")\ntranslate([0,0,4.2])\nrotate([0,0,60])\nlinear_extrude(height = 0.3)\n    polygon(points = [[0,0], [15,0.7], [15,-0.7], [0,0]]);\n\n// Hour hand\ncolor(\"black\")\ntranslate([0,0,4.4])\nrotate([0,0,150])\nlinear_extrude(height = 0.3)\n    polygon(points = [[0,0], [10,0.9], [10,-0.9], [0,0]]);\n\n// Center dot\ncolor(\"gray30\")\ntranslate([0,0,4.6])\ncylinder(h = 0.5, d = 2.5, center = true);\n\n// Top pusher A (start/stop)\ncolor(\"silver\")\ntranslate([0, 37, 0])\ncylinder(h = 8, d = 6, center = true);\n\n// Top pusher button\ncolor(\"red\")\ntranslate([0, 37, 5])\ncylinder(h = 2, d = 5, center = true);\n\n// Side pusher B (lap/reset)\ncolor(\"silver\")\ntranslate([37, 0, 0])\ncylinder(h = 8, d = 6, center = true);\n\ncolor(\"black\")\ntranslate([37, 0, 5])\ncylinder(h = 2, d = 5, center = true);\n\n// Crown\ncolor(\"silver\")\ntranslate([-37, 0, 0])\nrotate([0,90,0])\ncylinder(h = 10, d = 8, center = true);\n\n// Crown grip ridges\nfor(i = [0:8])\n    rotate([0,90,i*20])\n    translate([-37, 0, 0])\n    cube([0.5, 0.5, 8], center = true);\n\n// Bottom lanyard loop\ncolor(\"gray20\")\ntranslate([0, -35, 0])\nrotate([90,0,0])\ndifference() {\n    cylinder(h = 4, d = 8, center = true);\n    cylinder(h = 5, d = 4, center = true);\n}\n\n// Case back details\ncolor(\"gray30\")\ntranslate([0,0,-5])\ncylinder(h = 1, d = 66, center = true);\n\n// Screws\nfor(a = [45:90:315]) {\n    color(\"gray10\")\n    rotate([0,0,a])\n    translate([28,0,-5])\n    cylinder(h = 2, d = 3, center = true);\n}",
    "renders": true
  },
  {
    "tool": "chronoscope",
    "openscad_code": "// Chronoscope Tool - Realistic Style, Medium Complexity\n// 3D printable time measurement device with analog dial and digital display\n\n$fn = 48;\n\n// Main dimensions\nbody_length = 80;\nbody_width = 40;\nbody_thickness = 15;\nhandle_length = 30;\nhandle_diameter = 15;\n\n// Color definitions\ncolor_body = [0.2, 0.2, 0.2];\ncolor_handle = [0.1, 0.1, 0.1];\ncolor_dial = [0.9, 0.9, 0.85];\ncolor_needle = [0.8, 0.1, 0.1];\ncolor_display = [0.1, 0.9, 0.1];\ncolor_buttons = [0.7, 0.7, 0.7];\n\n// Main body of chronoscope\nmodule chronoscope_body() {\n    color(color_body)\n    union() {\n        // Main housing\n        translate([-body_length/2, 0, 0])\n            cube([body_length, body_width, body_thickness], center=true);\n        \n        // Rounded edges\n        translate([-body_length/2 + body_thickness/2, 0, 0])\n            cylinder(h=body_width, r=body_thickness/2, center=true);\n        translate([body_length/2 - body_thickness/2, 0, 0])\n            cylinder(h=body_width, r=body_thickness/2, center=true);\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    color(color_handle)\n    difference() {\n        // Main handle cylinder\n        translate([body_length/2 + handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Grip grooves\n        for(i = [1:3]) {\n            translate([body_length/2 + handle_length/2, 0, handle_diameter/2 - i*3])\n                rotate([0, 90, 0])\n                    cylinder(h=handle_length, r=handle_diameter/2 - 1, center=true);\n        }\n    }\n}\n\n// Analog dial face\nmodule analog_dial() {\n    color(color_dial)\n    difference() {\n        // Dial base\n        translate([-body_length/3, body_width/4, body_thickness/2 + 0.5])\n            cylinder(h=2, r=12, center=false);\n        \n        // Dial center hole\n        translate([-body_length/3, body_width/4, body_thickness/2 + 2.5])\n            cylinder(h=3, r=2, center=false);\n    }\n    \n    // Hour markers\n    for(i = [0:11]) {\n        angle = i * 30;\n        color([0.1, 0.1, 0.1])\n            translate([-body_length/3, body_width/4, body_thickness/2 + 2.5])\n                rotate([0, 0, angle])\n                    translate([10, 0, 0])\n                        cube([2, 1, 0.5], center=true);\n    }\n    \n    // Minute hand\n    color(color_needle)\n    translate([-body_length/3, body_width/4, body_thickness/2 + 2.5])\n        rotate([0, 0, 45])\n            cube([8, 1, 0.5], center=true);\n    \n    // Hour hand\n    color(color_needle)\n    translate([-body_length/3, body_width/4, body_thickness/2 + 3])\n        rotate([0, 0, 15])\n            cube([6, 1.5, 0.5], center=true);\n}\n\n// Digital display\nmodule digital_display() {\n    color([0.05, 0.05, 0.05])\n    translate([body_length/6, -body_width/4, body_thickness/2 + 0.5])\n        cube([25, 12, 1], center=false);\n    \n    color(color_display)\n    translate([body_length/6 + 1, -body_width/4 + 1, body_thickness/2 + 1.5])\n        cube([23, 10, 0.5], center=false);\n    \n    // Display segments (simplified 7-segment)\n    for(i = [0:3]) {\n        color([0.8, 0.9, 0.8])\n        translate([body_length/6 + 3 + i*5, -body_width/4 + 2, body_thickness/2 + 2])\n            cube([3, 6, 0.3], center=false);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Start/stop button\n    color(color_buttons)\n    translate([-body_length/4, body_width/2 + 3, 0])\n        cylinder(h=3, r=4, center=true);\n    \n    // Reset button\n    color(color_buttons)\n    translate([0, body_width/2 + 3, 0])\n        cylinder(h=3, r=3, center=true);\n    \n    // Mode button\n    color(color_buttons)\n    translate([body_length/4, body_width/2 + 3, 0])\n        cylinder(h=3, r=3, center=true);\n}\n\n// Wrist strap attachment points\nmodule strap_attachments() {\n    color(color_body)\n    for(side = [-1, 1]) {\n        translate([body_length/2 - 10, side * body_width/2, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=8, r=3, center=true);\n                    cylinder(h=10, r=2, center=true);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    chronoscope_body();\n    handle();\n    analog_dial();\n    digital_display();\n    control_buttons();\n    strap_attachments();\n}",
    "renders": true
  },
  {
    "tool": "tachometer",
    "openscad_code": "// Realistic Tachometer Tool - Medium Complexity\n// 3D printable handheld tachometer with display and probe\n\n$fn = 50;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];        // Dark gray\ncolor_grip = [0.1, 0.1, 0.1];        // Black\ncolor_display = [0.1, 0.1, 0.3];     // Dark blue\ncolor_button = [0.8, 0.1, 0.1];      // Red\ncolor_probe = [0.7, 0.7, 0.7];       // Silver\n\n// Main body\nmodule main_body() {\n    color(color_body)\n    union() {\n        // Main housing\n        translate([0, 0, 15])\n        cube([40, 25, 30], center=true);\n        \n        // Rounded top\n        translate([0, 0, 30])\n        cylinder(h=5, r1=20, r2=20);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(color_display)\n    translate([0, 8, 31])\n    cube([30, 8, 1], center=true);\n    \n    // Screen details\n    color([0, 1, 0])\n    for(i = [-10:5:10]) {\n        translate([i, 8, 32])\n        cube([2, 6, 0.2], center=true);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // Power button\n    color(color_button)\n    translate([-10, 8, 25])\n    cylinder(h=2, r=3);\n    \n    // Mode buttons\n    color([0.9, 0.9, 0.1])\n    for(pos = [0, 5, 10]) {\n        translate([pos, 8, 25])\n        cylinder(h=2, r=2);\n    }\n}\n\n// Rubber grip\nmodule grip() {\n    color(color_grip)\n    difference() {\n        // Main grip area\n        translate([0, 0, 5])\n        cube([45, 30, 20], center=true);\n        \n        // Grip grooves\n        for(i = [-8:4:8]) {\n            translate([0, i, 5])\n            cube([47, 2, 20], center=true);\n        }\n    }\n}\n\n// Probe connection\nmodule probe_base() {\n    color(color_probe)\n    union() {\n        // Connection point\n        translate([0, -15, 15])\n        cylinder(h=10, r=8);\n        \n        // Thread detail\n        for(i = [0:2:10]) {\n            translate([0, -15, 10+i])\n            cylinder(h=1, r=8.5);\n        }\n    }\n}\n\n// Probe cable\nmodule probe_cable() {\n    color(color_probe)\n    hull() {\n        translate([0, -20, 15])\n        sphere(r=3);\n        \n        translate([0, -40, 10])\n        sphere(r=2);\n        \n        translate([0, -60, 5])\n        sphere(r=2);\n    }\n}\n\n// Measurement tip\nmodule probe_tip() {\n    color(color_probe)\n    union() {\n        // Handle\n        translate([0, -65, 5])\n        cylinder(h=20, r=3);\n        \n        // Tip\n        translate([0, -75, 5])\n        cylinder(h=10, r1=3, r2=0.5);\n        \n        // Protective cap\n        color([0.8, 0.8, 0.8])\n        translate([0, -85, 5])\n        cylinder(h=8, r=4);\n    }\n}\n\n// LCD border detail\nmodule display_bezel() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 8, 30.5])\n    cube([32, 10, 2], center=true);\n    \n    difference() {\n        translate([0, 8, 31])\n        cube([35, 12, 1], center=true);\n        \n        translate([0, 8, 32])\n        cube([30, 8, 2], center=true);\n    }\n}\n\n// Assembly\nmain_body();\ngrip();\ndisplay();\ndisplay_bezel();\nbuttons();\nprobe_base();\nprobe_cable();\nprobe_tip();\n\n// Branding text (simulated)\ncolor([1, 1, 1])\ntranslate([0, 0, 16])\nlinear_extrude(height=0.5)\ntext(\"RPM-2000\", size=4, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "tool": "speedometer",
    "openscad_code": "// Speedometer Tool - Realistic Style, Medium Complexity\n// 3D printable automotive speedometer with functional features\n\n$fn = 64;  // Smooth curves for 3D printing\n\n// Color definitions\ncolor_dial = \"silver\";\ncolor_case = \"darkgray\";\ncolor_needle = \"red\";\ncolor_glass = \"cyan\";\ncolor_text = \"black\";\n\n// Main assembly\nmodule speedometer() {\n    difference() {\n        union() {\n            // Outer case with mounting bracket\n            speedometer_case();\n            \n            // Dial face with markings\n            dial_face();\n            \n            // Needle assembly\n            needle_assembly();\n            \n            // Glass cover\n            glass_cover();\n            \n            // Bezel details\n            bezel_details();\n        }\n        \n        // Remove center hole for needle\n        translate([0, 0, 2])\n            cylinder(h=10, r=2, $fn=32);\n    }\n}\n\n// Main housing\nmodule speedometer_case() {\n    color(color_case)\n    union() {\n        // Main circular body\n        difference() {\n            cylinder(h=15, r=25);\n            translate([0, 0, -1])\n                cylinder(h=17, r=22);\n        }\n        \n        // Mounting bracket - bottom\n        translate([-30, -10, 5])\n            cube([60, 20, 5]);\n        \n        // Mounting holes\n        translate([-20, 0, 2.5])\n            cylinder(h=10, r=2.5, $fn=32);\n        translate([20, 0, 2.5])\n            cylinder(h=10, r=2.5, $fn=32);\n        \n        // Side brackets for screws\n        translate([25, 0, 7.5])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=3);\n        translate([-25, 0, 7.5])\n            rotate([0, 90, 0])\n                cylinder(h=10, r=3);\n    }\n}\n\n// Dial face with markings\nmodule dial_face() {\n    color(color_dial)\n    translate([0, 0, 1])\n    difference() {\n        // Main dial\n        cylinder(h=2, r=23);\n        \n        // Center recess\n        translate([0, 0, -1])\n            cylinder(h=4, r=2.5);\n    }\n    \n    // Speed markings (0-200 km/h)\n    for(i = [0:20]) {\n        angle = -120 + i * 12;\n        distance = 18;\n        translate([cos(angle) * distance, sin(angle) * distance, 2.1])\n            rotate([0, 0, angle + 90])\n                color(color_text)\n                cube([0.5, 3, 0.5], center=true);\n    }\n    \n    // Major markings every 40\n    for(i = [0:5]) {\n        angle = -120 + i * 48;\n        distance = 18;\n        translate([cos(angle) * distance, sin(angle) * distance, 2.1])\n            rotate([0, 0, angle + 90])\n                color(color_text)\n                cube([1, 5, 0.5], center=true);\n    }\n    \n    // Speed numbers\n    translate([0, -12, 2.2])\n        color(color_text)\n        cube([12, 2, 0.5], center=true);\n    translate([10.4, -6, 2.2])\n        rotate([0, 0, 60])\n            color(color_text)\n            cube([12, 2, 0.5], center=true);\n    translate([10.4, 6, 2.2])\n        rotate([0, 0, 120])\n            color(color_text)\n            cube([12, 2, 0.5], center=true);\n}\n\n// Needle assembly\nmodule needle_assembly() {\n    color(color_needle)\n    translate([0, 0, 3])\n    union() {\n        // Needle base\n        cylinder(h=3, r=2);\n        \n        // Needle shaft\n        translate([0, 0, 1.5])\n            rotate([0, 0, -30])\n                cube([15, 1, 1], center=true);\n        \n        // Needle tip\n        translate([15, 0, 1.5])\n            rotate([0, 0, -30])\n                cube([2, 0.5, 1], center=true);\n    }\n}\n\n// Glass cover\nmodule glass_cover() {\n    color(color_glass, 0.3)\n    translate([0, 0, 5])\n    cylinder(h=2, r=24);\n}\n\n// Bezel details\nmodule bezel_details() {\n    color(color_case)\n    difference() {\n        translate([0, 0, 4])\n            cylinder(h=2, r=26);\n        \n        translate([0, 0, 3.9])\n            cylinder(h=2.2, r=24.5);\n    }\n    \n    // Bezel ridges\n    for(i = [0:35]) {\n        angle = i * 10;\n        translate([cos(angle) * 26, sin(angle) * 26, 4])\n            rotate([0, 0, angle])\n                cube([2, 1, 2]);\n    }\n}\n\n// Generate the model\nspeedometer();",
    "renders": true
  },
  {
    "tool": "odometer",
    "openscad_code": "// Realistic Odometer Tool - Medium Complexity\n// 3D printable with no overhangs, includes functional details\n\n// Color definitions\n$fn = 50;\n\n// Main body dimensions\nbody_width = 80;\nbody_height = 25;\nbody_depth = 30;\n\n// Handle dimensions\nhandle_length = 60;\nhandle_diameter = 12;\n\n// Wheel dimensions\nwheel_diameter = 20;\nwheel_thickness = 3;\nnum_wheels = 5;\n\n// Button dimensions\nbutton_width = 8;\nbutton_height = 4;\nbutton_depth = 6;\n\n// Main body module\nmodule odometer_body() {\n    color([0.8, 0.8, 0.8])  // Light gray plastic\n    difference() {\n        // Main rounded body\n        union() {\n            translate([0, 0, body_height/2])\n                cube([body_width, body_depth, body_height], center=true);\n            \n            // Rounded edges\n            for(x = [-body_width/2 + 5, body_width/2 - 5]) {\n                translate([x, 0, body_height/2])\n                    cylinder(h=body_depth, r=5, center=true);\n            }\n        }\n        \n        // Display window cutout\n        translate([0, -body_depth/2 + 1, body_height/2])\n            cube([body_width - 20, 2, 10], center=true);\n    }\n}\n\n// Handle module\nmodule odometer_handle() {\n    color([0.2, 0.2, 0.2])  // Black rubber\n    translate([-body_width/2 - handle_length/2, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n    \n    // Handle grip texture\n    color([0.1, 0.1, 0.1])\n    for(i = [0:5:handle_length-5]) {\n        translate([-body_width/2 - i - 2.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=4, d=handle_diameter + 2, center=true);\n    }\n}\n\n// Number wheels module\nmodule number_wheels() {\n    color([0.9, 0.9, 0.9])  // White plastic\n    for(i = [0:num_wheels-1]) {\n        x_pos = -body_width/2 + 15 + i * 12;\n        translate([x_pos, 0, body_height/2 + 2])\n            rotate([90, 0, 0])\n                cylinder(h=wheel_thickness, d=wheel_diameter, center=true);\n        \n        // Wheel center\n        color([0.3, 0.3, 0.3])\n        translate([x_pos, 0, body_height/2 + 2])\n            cylinder(h=wheel_thickness + 1, d=2, center=true);\n    }\n}\n\n// Reset button module\nmodule reset_button() {\n    color([0.9, 0.1, 0.1])  // Red plastic\n    translate([body_width/2 - 10, 0, body_height/2 + 5])\n        cube([button_width, button_depth, button_height], center=true);\n    \n    // Button housing\n    color([0.5, 0.5, 0.5])\n    difference() {\n        translate([body_width/2 - 10, 0, body_height/2 + 5])\n            cube([button_width + 4, button_depth + 4, button_height + 2], center=true);\n        translate([body_width/2 - 10, 0, body_height/2 + 5])\n            cube([button_width + 2, button_depth + 2, button_height + 4], center=true);\n    }\n}\n\n// Display window module\nmodule display_window() {\n    color([0.1, 0.1, 0.1, 0.8])  // Dark transparent\n    translate([0, -body_depth/2 + 0.5, body_height/2 + 5])\n        cube([body_width - 10, 1, 8], center=true);\n}\n\n// Measurement wheel module\nmodule measurement_wheel() {\n    color([0.2, 0.2, 0.2])  // Black rubber\n    translate([0, body_depth/2 + 15, -5])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=30, center=true);\n    \n    // Tread pattern\n    color([0.1, 0.1, 0.1])\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n            translate([0, body_depth/2 + 15, -5])\n                rotate([90, 0, 0])\n                    cube([2, 8, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    odometer_body();\n    odometer_handle();\n    number_wheels();\n    reset_button();\n    display_window();\n    measurement_wheel();\n    \n    // Support standoffs for 3D printing\n    color([0.8, 0.8, 0.8])\n    translate([-body_width/2 + 10, 0, -body_height/2 - 2])\n        cylinder(h=4, d=6, center=false);\n    translate([body_width/2 - 10, 0, -body_height/2 - 2])\n        cylinder(h=4, d=6, center=false);\n}",
    "renders": true
  },
  {
    "tool": "pedometer",
    "openscad_code": "// Realistic Pedometer - Medium Complexity\n// 3D printable fitness step counter model\n\n// Main body dimensions\nbody_w = 45;\nbody_h = 65;\nbody_d = 12;\nwall_t = 2;\n\n// Screen dimensions\nscreen_w = 35;\nscreen_h = 25;\nscreen_d = 1;\n\n// Button dimensions\nbtn_r = 3;\nbtn_h = 2;\n\n// Clip dimensions\nclip_w = 30;\nclip_h = 20;\nclip_t = 3;\n\n// Battery cover dimensions\ncover_w = 25;\ncover_h = 15;\ncover_d = 1;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer rounded body\n        minkowski() {\n            cube([body_w, body_h, body_d], center=true);\n            sphere(r=3);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        minkowski() {\n            cube([body_w-wall_t*2, body_h-wall_t*2, body_d-wall_t], center=true);\n            sphere(r=2);\n        }\n    }\n}\n\n// LCD screen bezel\nmodule screen() {\n    difference() {\n        // Bezel frame\n        color([0.2, 0.2, 0.2])\n        translate([0, 10, body_d/2+0.1])\n        cube([screen_w+4, screen_h+4, screen_d], center=true);\n        \n        // Screen opening\n        translate([0, 10, body_d/2+0.2])\n        color([0.1, 0.1, 0.1])\n        cube([screen_w, screen_h, screen_d+0.1], center=true);\n        \n        // LCD display\n        translate([0, 10, body_d/2+0.3])\n        color([0.3, 0.8, 0.3])\n        cube([screen_w-2, screen_h-2, screen_d+0.2], center=true);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    // Mode button\n    translate([-12, -5, body_d/2+0.1])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=btn_h, r=btn_r, $fn=20);\n    \n    // Set button\n    translate([-6, -5, body_d/2+0.1])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=btn_h, r=btn_r, $fn=20);\n    \n    // Reset button\n    translate([0, -5, body_d/2+0.1])\n    color([0.1, 0.1, 0.1])\n    cylinder(h=btn_h, r=btn_r, $fn=20);\n}\n\n// Belt clip mechanism\nmodule belt_clip() {\n    difference() {\n        // Clip base\n        color([0.3, 0.3, 0.3])\n        translate([0, -body_h/2-10, -body_d/2+clip_t/2])\n        cube([clip_w, clip_h, clip_t], center=true);\n        \n        // Clip spring gap\n        translate([0, -body_h/2-15, -body_d/2+clip_t])\n        cube([clip_w-4, 10, clip_t], center=true);\n    }\n    \n    // Clip curve\n    color([0.4, 0.4, 0.4])\n    translate([0, -body_h/2-10, -body_d/2+clip_t+2])\n    rotate([90, 0, 0])\n    cylinder(h=clip_w, r=8, center=true);\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    difference() {\n        // Cover plate\n        color([0.5, 0.5, 0.5])\n        translate([0, -body_h/2+10, -body_d/2+0.5])\n        cube([cover_w, cover_h, cover_d], center=true);\n        \n        // Screw holes\n        for (x = [-cover_w/2+5, cover_w/2-5]) {\n            for (y = [-cover_h/2+4, cover_h/2-4]) {\n                translate([x, y, -body_d/2])\n                cylinder(h=cover_d+1, r=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Step sensor indicator\nmodule sensor_indicator() {\n    color([0.8, 0.2, 0.2])\n    translate([15, 0, body_d/2+0.1])\n    cylinder(h=1, r=2, $fn=8);\n}\n\n// Brand text area\nmodule brand_area() {\n    color([0.9, 0.9, 0.9])\n    translate([0, 20, body_d/2+0.1])\n    cube([30, 8, 0.5], center=true);\n}\n\n// Assembly\nunion() {\n    // Main body\n    color([0.7, 0.7, 0.7])\n    body_shell();\n    \n    // Screen assembly\n    screen();\n    \n    // Buttons\n    buttons();\n    \n    // Belt clip\n    belt_clip();\n    \n    // Battery cover\n    battery_cover();\n    \n    // Sensor indicator\n    sensor_indicator();\n    \n    // Brand area\n    brand_area();\n}",
    "renders": true
  },
  {
    "tool": "rangefinder",
    "openscad_code": "// OpenSCAD Rangefinder Tool - Realistic Style, Medium Complexity\n// 3D printable laser rangefinder model with moderate detail\n\n$fn = 50;\n\n// Main color scheme\ncolor_body = [0.2, 0.2, 0.2];      // Dark gray\ncolor_lens = [0.1, 0.1, 0.8];      // Blue lens\ncolor_buttons = [0.8, 0.2, 0.2];   // Red buttons\ncolor_grip = [0.1, 0.1, 0.1];      // Black grip\ncolor_screen = [0.9, 0.9, 0.9];    // Light gray screen\n\n// Overall dimensions (mm)\nlength = 85;\nwidth = 45;\nheight = 25;\n\nmodule rangefinder_body() {\n    // Main body - slightly tapered\n    difference() {\n        hull() {\n            translate([0, 0, height/2])\n                cube([length*0.9, width*0.85, height], center=true);\n            translate([0, 0, height*0.4])\n                cube([length, width, height*0.8], center=true);\n        }\n        \n        // Front lens opening\n        translate([-length/2 + 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=width*0.6, r=width*0.2, center=true);\n        \n        // Screen opening\n        translate([length/4, 0, height/2 - 1])\n            cube([length*0.3, width*0.6, 2], center=true);\n    }\n}\n\nmodule grip_texture() {\n    // Rubber grip pattern on sides\n    for (i = [-1, 1]) {\n        translate([0, i*width*0.4, 0])\n            for (j = [-3:3]) {\n                translate([j*8 - 4, 0, height*0.3])\n                    cube([2, width*0.15, height*0.3], center=true);\n            }\n    }\n}\n\nmodule buttons() {\n    // Control buttons on top\n    for (i = [0:2]) {\n        translate([length/4 - 10, width/4 - i*8, height/2 + 1])\n            cylinder(h=3, r=4, center=true);\n    }\n    \n    // Power button\n    translate([-length/3, width/3, height/2 + 1])\n        cylinder(h=2, r=5, center=true);\n}\n\nmodule lens_assembly() {\n    // Front lens system\n    translate([-length/2, 0, 0])\n        rotate([0, 90, 0]) {\n            // Outer lens barrel\n            cylinder(h=width*0.4, r=width*0.25, center=true);\n            \n            // Inner lens\n            color(color_lens)\n                cylinder(h=width*0.2, r=width*0.22, center=true);\n                \n            // Lens protector ring\n            translate([width*0.2, 0, 0])\n                cylinder(h=width*0.1, r=width*0.28, center=true);\n        }\n}\n\nmodule display_screen() {\n    // LCD display\n    translate([length/4, 0, height/2])\n        cube([length*0.28, width*0.55, 0.5], center=true);\n    \n    // Screen border\n    translate([length/4, 0, height/2 - 0.5])\n        cube([length*0.32, width*0.58, 1], center=true);\n}\n\nmodule viewfinder() {\n    // Top viewfinder eyepiece\n    translate([length/4, 0, height/2 + 4])\n        rotate([90, 0, 0])\n            cylinder(h=width*0.3, r=width*0.15, center=true);\n    \n    // Eyepiece cushion\n    translate([length/4, 0, height/2 + 5])\n        rotate([90, 0, 0])\n            cylinder(h=2, r=width*0.2, center=true);\n}\n\nmodule battery_door() {\n    // Battery compartment on bottom\n    translate([0, 0, -height/2 + 0.5])\n        cube([length*0.4, width*0.3, 1], center=true);\n    \n    // Door latch\n    translate([length/4, 0, -height/2 + 0.5])\n        cube([5, 2, 1], center=true);\n}\n\n// Main assembly\nunion() {\n    color(color_body) rangefinder_body();\n    color(color_grip) grip_texture();\n    color(color_buttons) buttons();\n    lens_assembly();\n    color(color_screen) display_screen();\n    color(color_body) viewfinder();\n    color(color_body) battery_door();\n}",
    "renders": true
  },
  {
    "tool": "altimeter",
    "openscad_code": "// Realistic Altimeter Tool - Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Main parameters\n$fn = 32;\nbody_width = 60;\nbody_height = 80;\nbody_depth = 15;\nbezel_thickness = 3;\nwindow_thickness = 1;\n\n// Main body module\nmodule altimeter_body() {\n    // Main housing\n    difference() {\n        // Main rounded rectangle body\n        color(\"silver\")\n        minkowski() {\n            cube([body_width - 6, body_height - 6, body_depth], center = true);\n            sphere(3);\n        }\n        \n        // Front window opening\n        translate([0, 0, body_depth/2 + 0.1])\n        cylinder(h = bezel_thickness + 1, d = body_width - 20, center = true);\n    }\n}\n\n// Bezel around window\nmodule window_bezel() {\n    color(\"darkgray\")\n    translate([0, 0, body_depth/2 + bezel_thickness/2])\n    cylinder(h = bezel_thickness, d = body_width - 16);\n}\n\n// Glass window\nmodule glass_window() {\n    color(\"skyblue\", 0.3)\n    translate([0, 0, body_depth/2 + bezel_thickness + window_thickness/2])\n    cylinder(h = window_thickness, d = body_width - 20);\n}\n\n// Dial face\nmodule dial_face() {\n    color(\"white\")\n    translate([0, 0, body_depth/2 - 0.5])\n    cylinder(h = 1, d = body_width - 22);\n}\n\n// Hour marks on dial\nmodule hour_marks() {\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, (body_width - 30)/2, body_depth/2])\n        cube([1, 4, 1], center = true);\n    }\n}\n\n// Numbers on dial\nmodule dial_numbers() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, (body_width - 40)/2, body_depth/2 + 0.5])\n        linear_extrude(1)\n        text(str(i * 5), size = 3, halign = \"center\", valign = \"center\");\n    }\n}\n\n// Pointer needle\nmodule pointer_needle() {\n    color(\"red\")\n    rotate([0, 0, 45])\n    translate([0, 0, body_depth/2 + 1])\n    linear_extrude(2)\n    polygon(points = [[0, 0], [-2, 0], [0, (body_width - 30)/2 - 5], [2, 0]]);\n    \n    // Center hub\n    translate([0, 0, body_depth/2 + 1])\n    cylinder(h = 3, d = 4);\n}\n\n// Knurled adjustment knob\nmodule adjustment_knob() {\n    color(\"black\")\n    translate([body_width/2 + 8, body_height/4, 0])\n    cylinder(h = 10, d = 16);\n    \n    // Knurling\n    for(i = [0:17]) {\n        rotate([0, 0, i * 20])\n        translate([body_width/2 + 8, body_height/4, 0])\n        cube([1, 8, 10], center = true);\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    color(\"gray\")\n    // Top bracket\n    translate([0, body_height/2 + 5, 0])\n    cube([body_width, 10, 5], center = true);\n    \n    // Mounting holes\n    for(i = [-1:1]) {\n        translate([i * 20, body_height/2 + 5, 0])\n        cylinder(h = 6, d = 3.5);\n    }\n}\n\n// Protective ridges\nmodule protective_ridges() {\n    color(\"silver\")\n    for(i = [-1:1]) {\n        translate([i * 20, 0, body_depth/2 + 2])\n        cube([5, body_height - 10, 3], center = true);\n    }\n}\n\n// Assembly\naltimeter_body();\nwindow_bezel();\nglass_window();\ndial_face();\nhour_marks();\ndial_numbers();\npointer_needle();\nadjustment_knob();\nmounting_bracket();\nprotective_ridges();",
    "renders": true
  },
  {
    "tool": "depthmeter",
    "openscad_code": "// Depthmeter Tool - Realistic Style with Medium Complexity\n// Basic dimensions (mm)\nbase_thickness = 4;\nbody_height = 25;\nbody_width = 40;\nbody_depth = 65;\nprobe_diameter = 6;\nprobe_length = 100;\ndisplay_thickness = 2;\ndisplay_width = 30;\ndisplay_height = 15;\n\n// Colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_body = [0.3, 0.3, 0.3];\ncolor_probe = [0.8, 0.8, 0.8];\ncolor_display = [0.1, 0.1, 0.1];\ncolor_grip = [0.05, 0.05, 0.05];\ncolor_markings = [1, 1, 1];\n\n// Main assembly\nunion() {\n    // Base plate with rounded edges\n    translate([0, 0, base_thickness/2]) {\n        color(color_base) {\n            difference() {\n                minkowski() {\n                    cube([body_width + 8, body_depth + 8, base_thickness], center=true);\n                    sphere(2);\n                }\n                translate([0, 0, -1]) {\n                    cube([body_width + 4, body_depth + 4, base_thickness + 2], center=true);\n                }\n            }\n        }\n    }\n    \n    // Main body\n    translate([0, 0, base_thickness + body_height/2]) {\n        color(color_body) {\n            difference() {\n                cube([body_width, body_depth, body_height], center=true);\n                // Display cutout\n                translate([0, body_depth/2 - 5, 0]) {\n                    cube([display_width + 4, display_thickness + 2, display_height + 4], center=true);\n                }\n                // Battery compartment\n                translate([-body_width/2 + 8, 0, -body_height/2 + 5]) {\n                    cube([16, 25, 8], center=true);\n                }\n            }\n        }\n    }\n    \n    // Display screen\n    translate([0, body_depth/2 - display_thickness/2 - 4, base_thickness + body_height/2]) {\n        color(color_display) {\n            cube([display_width, display_thickness, display_height], center=true);\n        }\n        // Display markings\n        for(i = [-1:1]) {\n            translate([i * 8, display_thickness/2 + 0.1, 0]) {\n                color(color_markings) {\n                    cube([1, 0.2, 8]);\n                }\n            }\n        }\n    }\n    \n    // Control buttons\n    for(i = [0:2]) {\n        translate([body_width/2 - 8, -body_depth/2 + 10 + i*12, base_thickness + body_height/2]) {\n            color(color_base) {\n                cylinder(h=4, r=3, center=true);\n            }\n        }\n    }\n    \n    // Grip texture on sides\n    for(i = [-1, 1]) {\n        for(j = [0:4]) {\n            translate([i * body_width/2, -body_depth/2 + 10 + j*10, base_thickness + body_height/2 + 5]) {\n                color(color_grip) {\n                    cube([2, 8, 2], center=true);\n                }\n            }\n        }\n    }\n    \n    // Probe shaft\n    translate([0, -body_depth/2 - probe_length/2 + 10, base_thickness + body_height/2 - 5]) {\n        color(color_probe) {\n            cylinder(h=probe_length, r=probe_diameter/2, center=true);\n        }\n        \n        // Measurement markings on probe\n        for(i = [0:9]) {\n            translate([0, -body_depth/2 + 10 + i*10, base_thickness + body_height/2 - probe_diameter/2 - 2]) {\n                color(color_markings) {\n                    cube([probe_diameter + 2, 0.5, 1], center=true);\n                }\n            }\n            translate([probe_diameter/2 + 3, -body_depth/2 + 10 + i*10, base_thickness + body_height/2 - 5]) {\n                color(color_markings) {\n                    rotate([90, 0, 0]) {\n                        linear_extrude(height=0.5) {\n                            text(str(i*10), size=3, valign=\"center\", halign=\"center\");\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Probe tip\n    translate([0, -body_depth/2 - probe_length + 10, base_thickness + body_height/2 - 5]) {\n        color(color_probe) {\n            cylinder(h=8, r1=probe_diameter/2, r2=0, center=true);\n        }\n    }\n    \n    // Reference block\n    translate([0, -body_depth/2 - probe_length - 15, base_thickness + body_height/2 - 5]) {\n        color(color_base) {\n            cube([20, 10, 6], center=true);\n            translate([0, 0, -3]) {\n                cylinder(h=6, r=10, center=true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "soundmeter",
    "openscad_code": "// Sound Level Meter (soundmeter) in realistic style, medium complexity\n// Overall dimensions: ~85 mm length x 55 mm height x 30 mm depth\n\n// Color constants\n$fn = 60;\n\n// Main assembly\nmodule soundmeter() {\n    color(\"silver\") microphone_assembly();\n    color(\"black\") body();\n    color(\"darkgray\") display();\n    color(\"red\") buttons();\n    color(\"black\") battery_compartment();\n    color(\"silver\") tripod_mount();\n}\n\n// Microphone capsule and windscreen\nmodule microphone_assembly() {\n    translate([0, 50, 0]) {\n        // Windscreen foam\n        color(\"lightgray\")\n            scale([1, 1, 1.2])\n                sphere(d = 18);\n        \n        // Microphone capsule\n        color(\"silver\")\n            difference() {\n                cylinder(h = 10, d = 12);\n                translate([0, 5, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 12, d = 4);\n            }\n        \n        // Protective grill\n        color(\"gray\")\n            for(i = [0:15:359])\n                rotate([0, 0, i])\n                    translate([0, 5, 0])\n                        cube([1, 10, 1], center = true);\n    }\n}\n\n// Main body housing\nmodule body() {\n    // Main chassis\n    translate([0, 20, 0])\n        difference() {\n            // Rounded rectangle body\n            minkowski() {\n                cube([55, 40, 25], center = true);\n                sphere(d = 5);\n            }\n            \n            // Display cutout\n            translate([0, 5, 13])\n                cube([35, 20, 2], center = true);\n            \n            // Button holes\n            for(i = [0:2])\n                translate([-15 + i*15, -10, 13])\n                    cylinder(h = 3, d = 6);\n            \n            // Battery door groove\n            translate([0, -20, 12])\n                cube([30, 2, 13], center = true);\n        }\n}\n\n// LCD display\nmodule display() {\n    translate([0, 5, 14]) {\n        // Display bezel\n        color(\"black\")\n            cube([38, 23, 1], center = true);\n        \n        // LCD screen\n        color([0.1, 0.1, 0.2])\n            translate([0, 0, 0.6])\n                cube([34, 18, 0.5], center = true);\n        \n        // Display segments (simplified)\n        color([0, 0.8, 0])\n            for(x = [-15:5:15])\n                for(y = [-7:3:7])\n                    translate([x, y, 1.1])\n                        cube([3, 1.5, 0.1], center = true);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    color(\"red\")\n        for(i = [0:2]) {\n            translate([-15 + i*15, -10, 15]) {\n                // Button shaft\n                cylinder(h = 8, d = 5);\n                \n                // Button cap\n                translate([0, 0, 8])\n                    cylinder(h = 2, d1 = 8, d2 = 6);\n            }\n        }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    translate([0, -20, 6]) {\n        // Door panel\n        difference() {\n            cube([32, 15, 1], center = true);\n            \n            // Finger grip\n            translate([0, -6, 0.6])\n                cube([20, 2, 1], center = true);\n            \n            // Hinge holes\n            translate([-15, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, d = 2);\n            translate([15, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, d = 2);\n        }\n        \n        // Battery cavity (internal)\n        translate([0, 0, -6])\n            cube([28, 12, 10], center = true);\n    }\n}\n\n// Tripod mount socket\nmodule tripod_mount() {\n    translate([0, -30, 0]) {\n        difference() {\n            // Mount base\n            cylinder(h = 5, d = 15);\n            \n            // 1/4-20 threaded insert cavity\n            translate([0, 0, -1])\n                cylinder(h = 7, d = 6.5);\n            \n            // Access slot\n            translate([7.5, 0, 2.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 15, d = 5);\n        }\n    }\n}\n\n// Render the complete soundmeter\nsoundmeter();",
    "renders": true
  },
  {
    "tool": "luxmeter",
    "openscad_code": "// OpenSCAD Luxmeter Model (Realistic Style, Medium Complexity)\n// Overall size: ~85mm x 55mm x 22mm\n\n// Color definitions\n$fn = 50;\n\n// Main body module\nmodule luxmeter_body() {\n    color(\"silver\")\n    difference() {\n        // Main rounded rectangle body\n        translate([-40, -27, 0])\n            cube([80, 54, 20], center = false);\n        \n        // Rounded edges\n        for (i = [-1, 1])\n            translate([i * 40, 0, 10])\n                rotate([0, 90, 0])\n                    cylinder(h = 80, r = 10, center = true);\n        for (j = [-1, 1])\n            translate([0, j * 27, 10])\n                rotate([90, 0, 0])\n                    cylinder(h = 54, r = 10, center = true);\n        \n        // Display window\n        translate([-35, -12, 20.1])\n            cube([70, 24, 1], center = false);\n        \n        // Button holes\n        translate([30, 15, 10])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r = 3);\n        translate([30, 0, 10])\n            rotate([0, 90, 0])\n                cylinder(h = 20, r = 3);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"black\")\n    translate([-34, -11, 20.2])\n        cube([68, 22, 0.5]);\n    \n    color(\"blue\")\n    translate([-30, -7, 20.8])\n        cube([60, 10, 0.2]);\n    \n    // LCD segments\n    for (x = [-25, -15, -5, 5, 15, 25]) {\n        color(\"cyan\")\n        translate([x, 5, 20.8])\n            cube([2, 6, 0.1]);\n    }\n}\n\n// Buttons\nmodule buttons() {\n    // Power button\n    color(\"red\")\n    translate([30, 15, 5])\n        rotate([0, 90, 0])\n            cylinder(h = 3, r = 3);\n    \n    // Mode button\n    color(\"black\")\n    translate([30, 0, 5])\n        rotate([0, 90, 0])\n            cylinder(h = 3, r = 3);\n}\n\n// Light sensor dome\nmodule sensor_dome() {\n    // Sensor housing\n    color(\"white\")\n    difference() {\n        cylinder(h = 8, r = 12);\n        translate([0, 0, -1])\n            cylinder(h = 10, r = 10);\n    }\n    \n    // Sensor window\n    color(\"lightblue\")\n    translate([0, 0, 8.1])\n        sphere(r = 10);\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    color(\"darkgray\")\n    difference() {\n        translate([-38, -25, 1])\n            cube([76, 50, 3]);\n        \n        // Back plate screws\n        for (x = [-30, 30])\n            for (y = [-20, 20])\n                translate([x, y, 4.1])\n                    cylinder(h = 1, r = 2);\n    }\n    \n    // Battery door\n    color(\"black\")\n    translate([-35, -22, 4.2])\n        cube([70, 44, 0.5]);\n}\n\n// Text labels\nmodule labels() {\n    // Power label\n    color(\"white\")\n    translate([35, 18, 20.5])\n        rotate([0, 0, 90])\n        linear_extrude(height = 0.5)\n            text(\"PWR\", size = 3);\n    \n    // Mode label\n    color(\"white\")\n    translate([35, 3, 20.5])\n        rotate([0, 0, 90])\n        linear_extrude(height = 0.5)\n            text(\"MODE\", size = 3);\n    \n    // Units\n    color(\"white\")\n    translate([-30, -15, 20.5])\n        rotate([0, 0, 0])\n        linear_extrude(height = 0.5)\n            text(\"LUX\", size = 4);\n}\n\n// Assembly\nluxmeter_body();\ntranslate([0, -30, 20])\n    sensor_dome();\ndisplay();\nbuttons();\nbattery_compartment();\nlabels();",
    "renders": true
  },
  {
    "tool": "photometer",
    "openscad_code": "// Photometer Tool - Realistic Style, Medium Complexity\n\n// Main dimensions (mm)\n$fn = 32;\nbase_w = 45;\nbase_d = 25;\nbase_h = 4;\nbody_w = 30;\nbody_h = 55;\nsensor_d = 18;\nsensor_h = 12;\ndisplay_w = 22;\ndisplay_h = 12;\nbutton_r = 2.5;\nbutton_h = 1.5;\n\n// Colors\ncolor_case = [0.2, 0.2, 0.2];\ncolor_display = [0.1, 0.1, 0.1];\ncolor_sensor = [0.8, 0.8, 0.8];\ncolor_buttons = [0.9, 0.1, 0.1];\ncolor_label = [1, 1, 1];\n\n// Base module\nmodule base() {\n    color(color_case)\n    union() {\n        // Main base plate\n        translate([0, 0, base_h/2])\n            cube([base_w, base_d, base_h], center=true);\n        \n        // Grip ridges on sides\n        for(i = [-1, 1]) {\n            translate([i * (base_w/2 - 2), 0, base_h + 1])\n                cube([2, base_d - 4, 2], center=true);\n        }\n    }\n}\n\n// Main body module\nmodule body() {\n    color(color_case)\n    union() {\n        // Main body\n        translate([0, 0, base_h + body_h/2])\n            cube([body_w, base_d - 4, body_h], center=true);\n        \n        // Top rounded section\n        translate([0, 0, base_h + body_h + 5])\n            scale([1, 0.8, 1])\n                sphere(8);\n    }\n}\n\n// Display module\nmodule display() {\n    color(color_display)\n    translate([0, base_d/2 - 1, base_h + body_h - 10])\n        cube([display_w, 0.5, display_h], center=true);\n    \n    // Display bezel\n    color(color_case)\n    translate([0, base_d/2 - 0.75, base_h + body_h - 10])\n        cube([display_w + 2, 1, display_h + 2], center=true);\n}\n\n// Sensor module\nmodule sensor() {\n    color(color_sensor)\n    union() {\n        // Sensor barrel\n        translate([0, -base_d/2, base_h + body_h/2])\n            cylinder(h=sensor_h, d=sensor_d);\n        \n        // Sensor window\n        translate([0, -base_d/2 - sensor_h/2, base_h + body_h/2])\n            cylinder(h=2, d=sensor_d - 2);\n        \n        // Light guide tube\n        difference() {\n            translate([0, -base_d/2 - sensor_h - 3, base_h + body_h/2])\n                cylinder(h=6, d=sensor_d/2);\n            translate([0, -base_d/2 - sensor_h - 6, base_h + body_h/2])\n                cylinder(h=6, d=sensor_d/2 - 2);\n        }\n    }\n}\n\n// Control buttons module\nmodule buttons() {\n    for(i = [0:2]) {\n        color(color_buttons)\n        translate([-body_w/4 + i * body_w/4, base_d/2 - 2, base_h + body_h - 20])\n            cylinder(h=button_h, r=button_r);\n        \n        // Button labels\n        color(color_label)\n        translate([-body_w/4 + i * body_w/4, base_d/2 - 1, base_h + body_h - 18.5])\n            cube([1.5, 0.1, 1.5], center=true);\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    color(color_case)\n    difference() {\n        translate([body_w/2 - 5, 0, base_h + 5])\n            cube([10, base_d - 8, 20], center=true);\n        translate([body_w/2 - 2, 0, base_h + 5])\n            cube([9, base_d - 10, 18], center=true);\n    }\n    \n    // Battery cover screws\n    for(y = [-6, 6]) {\n        translate([body_w/2 - 5, y, base_h + 15])\n            cylinder(h=2, r=1.5, $fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    sensor();\n    display();\n    buttons();\n    battery_compartment();\n}",
    "renders": true
  },
  {
    "tool": "spectrometer",
    "openscad_code": "// Realistic Spectrometer Tool - 3D Printable\n// Medium complexity with functional details\n\n$fn=50;\n\n// Main body dimensions\nbody_w = 40;\nbody_h = 25;\nbody_l = 60;\n\n// Color definitions\ncolor_body = [0.2,0.2,0.2];\ncolor_lens = [0.1,0.1,0.5];\ncolor_display = [0.1,0.1,0.1];\ncolor_details = [0.8,0.8,0.8];\n\nmodule spectrometer() {\n    // Main body shell\n    color(color_body) difference() {\n        cube([body_l, body_w, body_h], center=true);\n        translate([0,0,-body_h/2]) cube([body_l-4, body_w-4, body_h-2], center=true);\n    }\n    \n    // Front lens assembly\n    color(color_lens) translate([-body_l/2-2,0,0]) {\n        difference() {\n            cylinder(h=8, d1=20, d2=18);\n            translate([0,0,-1]) cylinder(h=10, d=15);\n        }\n    }\n    \n    // Display screen\n    color(color_display) translate([body_l/2-3,0,body_h/4]) {\n        cube([6, 25, 12], center=true);\n    }\n    \n    // Display buttons\n    for(i=[-1:1]) {\n        color(color_details) translate([body_l/2-3, i*8, body_h/4-8]) {\n            cube([3, 4, 2], center=true);\n        }\n    }\n    \n    // Side grip texture\n    color(color_body) for(i=[-20:5:20]) {\n        translate([i, body_w/2-1, 0]) {\n            cube([3, 2, body_h-4], center=true);\n        }\n    }\n    \n    // Top vent slots\n    color(color_body) for(i=[-20:6:20]) {\n        translate([i, 0, body_h/2-1]) {\n            cube([4, body_w-10, 2], center=true);\n        }\n    }\n    \n    // Handle attachment points\n    color(color_details) {\n        translate([body_l/4, body_w/2+2, 0]) {\n            cylinder(h=8, d=6, center=true);\n            rotate([90,0,0]) cylinder(h=6, d=4, center=true);\n        }\n        translate([-body_l/4, body_w/2+2, 0]) {\n            cylinder(h=8, d=6, center=true);\n            rotate([90,0,0]) cylinder(h=6, d=4, center=true);\n        }\n    }\n    \n    // Battery compartment\n    color(color_body) translate([0, -body_w/2-2, -body_h/4]) {\n        difference() {\n            cube([20, 4, 10], center=true);\n            translate([0,0,1]) cube([18, 5, 8], center=true);\n        }\n    }\n    \n    // Calibration port\n    color(color_details) translate([-30, 0, -body_h/2-2]) {\n        difference() {\n            cylinder(h=4, d=8);\n            translate([0,0,-1]) cylinder(h=6, d=6);\n        }\n    }\n    \n    // Label area\n    color(color_details) translate([5, 0, body_h/2+0.5]) {\n        cube([15, 25, 0.5], center=true);\n    }\n}\n\n// Generate the complete model\nspectrometer();",
    "renders": true
  },
  {
    "tool": "colorimeter",
    "openscad_code": "// Colorimeter Tool - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 50mm x 30mm\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    color(\"silver\")\n    difference() {\n        // Main housing\n        cube([80, 50, 30], center=true);\n        \n        // Sample chamber cavity\n        translate([0, 0, 5])\n        cube([30, 40, 25], center=true);\n        \n        // LED opening\n        translate([-30, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=5, center=true);\n        \n        // Sensor opening\n        translate([30, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=5, center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    color(\"darkslategray\")\n    translate([0, 28, 15])\n    difference() {\n        cube([60, 8, 10], center=true);\n        \n        // Display window\n        translate([0, 0, 5.1])\n        cube([40, 6, 2], center=true);\n        \n        // Button holes\n        for(i = [-20, -10, 0, 10, 20]) {\n            translate([i, 0, -5.1])\n            cylinder(h=3, r=2, center=true);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"cyan\")\n    translate([0, 28, 20.1])\n    cube([38, 4, 1], center=true);\n}\n\n// Control buttons\nmodule buttons() {\n    color(\"black\")\n    for(i = [-20, -10, 0, 10, 20]) {\n        translate([i, 28, 8])\n        cylinder(h=3, r=1.5, center=true);\n    }\n}\n\n// Sample holder\nmodule sample_holder() {\n    color(\"white\")\n    translate([0, 0, -20])\n    difference() {\n        // Holder base\n        cube([35, 35, 5], center=true);\n        \n        // Cuvette slot\n        translate([0, 0, 2])\n        cube([12, 12, 5], center=true);\n        \n        // Finger grips\n        for(x = [-12, 12]) {\n            for(y = [-12, 12]) {\n                translate([x, y, 0])\n                cylinder(h=5, r=3, center=true);\n            }\n        }\n    }\n}\n\n// LED module\nmodule led_module() {\n    color(\"yellow\")\n    translate([-30, 0, 5])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=8, r=4, center=true);\n        cylinder(h=9, r=2, center=true);\n    }\n}\n\n// Sensor module\nmodule sensor_module() {\n    color(\"darkgray\")\n    translate([30, 0, 5])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=8, r=4, center=true);\n        cylinder(h=9, r=2, center=true);\n    }\n}\n\n// Grip texture\nmodule grip_texture() {\n    color(\"silver\")\n    for(i = [-35, -30, -25, -20, 20, 25, 30, 35]) {\n        translate([i, -25, 0])\n        cube([2, 4, 28], center=true);\n    }\n}\n\n// Battery compartment\nmodule battery_compartment() {\n    color(\"black\")\n    translate([0, -25, -10])\n    difference() {\n        cube([50, 8, 15], center=true);\n        translate([0, 0, -7.5])\n        cube([46, 4, 12], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    control_panel();\n    display();\n    buttons();\n    sample_holder();\n    led_module();\n    sensor_module();\n    grip_texture();\n    battery_compartment();\n}",
    "renders": true
  },
  {
    "tool": "densitometer",
    "openscad_code": "// Densitometer Tool - OpenSCAD Code\n// Realistic style with medium complexity\n\n// Main parameters\n$fn = 50;\nwall_thickness = 2;\nbody_length = 80;\nbody_width = 25;\nbody_height = 15;\nhandle_length = 30;\nsensor_diameter = 12;\ndisplay_width = 20;\ndisplay_height = 12;\n\n// Colors\ncolor_body = \"DarkSlateGray\";\ncolor_handle = \"Black\";\ncolor_display = \"LightBlue\";\ncolor_buttons = \"DimGray\";\ncolor_sensor = \"Silver\";\n\n// Main body module\nmodule densitometer_body() {\n    color(color_body)\n    union() {\n        // Main rectangular body\n        translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Rounded front end\n        translate([body_length/2 - body_width/2, 0, body_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=body_width, r=body_width/2, center=true);\n        \n        // Sensor housing protrusion\n        translate([body_length/2 - 5, 0, body_height + 3])\n            cylinder(h=6, r=sensor_diameter/2 + 3, center=false);\n    }\n}\n\n// Handle module\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle grip\n        translate([-body_length/2 - handle_length/2, 0, body_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r=body_width/2 - 2, center=true);\n        \n        // Handle grip rings\n        for(i = [0:2]) {\n            translate([-body_length/2 - 5 - i * 8, 0, body_height/2])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h=3, r=body_width/2 - 1, center=true);\n                        cylinder(h=4, r=body_width/2 - 3, center=true);\n                    }\n        }\n    }\n}\n\n// Display module\nmodule display() {\n    color(color_display)\n    translate([-body_length/4, 0, body_height + 1.1])\n        cube([display_width, display_height, 0.5], center=true);\n    \n    // Display frame\n    color(color_body)\n    translate([-body_length/4, 0, body_height + 0.9])\n        difference() {\n            cube([display_width + 2, display_height + 2, 0.5], center=true);\n            cube([display_width + 1, display_height + 1, 1], center=true);\n        }\n}\n\n// Control buttons module\nmodule buttons() {\n    color(color_buttons)\n    for(i = [0:2]) {\n        translate([body_length/4 + (i-1)*8, body_width/2 + 2, body_height/2])\n            cylinder(h=1.5, r=3, center=true);\n    }\n}\n\n// Sensor module\nmodule sensor() {\n    color(color_sensor)\n    union() {\n        // Sensor lens\n        translate([body_length/2 - 5, 0, body_height + 6.5])\n            sphere(r=sensor_diameter/2);\n        \n        // Sensor ring\n        color(\"Gray\")\n        translate([body_length/2 - 5, 0, body_height + 6.5])\n            difference() {\n                cylinder(h=1, r=sensor_diameter/2 + 1, center=true);\n                cylinder(h=2, r=sensor_diameter/2 - 1, center=true);\n            }\n    }\n}\n\n// Calibration strip\nmodule calibration_strip() {\n    color(\"White\")\n    translate([body_length/2 - 12, body_width/2 + 1, body_height/2])\n        cube([15, 0.5, 3], center=true);\n    \n    // Calibration marks\n    color(\"Black\")\n    for(i = [0:4]) {\n        translate([body_length/2 - 5 - i*3, body_width/2 + 1.3, body_height/2 + 1])\n            cube([2, 0.1, 0.5], center=true);\n    }\n}\n\n// Text labels (as raised features)\nmodule labels() {\n    color(\"LightGray\")\n    translate([0, 0, body_height + 0.1])\n        linear_extrude(height=0.2)\n            text(\"DENS\", size=3, halign=\"center\");\n}\n\n// Main assembly\nunion() {\n    densitometer_body();\n    handle();\n    display();\n    buttons();\n    sensor();\n    calibration_strip();\n    labels();\n}",
    "renders": true
  },
  {
    "tool": "viscometer",
    "openscad_code": "// Viscometer - Ostwald type with reservoir, capillary tube and timing marks\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Colors\ncolor_reservoir = \"lightblue\";\ncolor_tube = \"white\";\ncolor_markings = \"black\";\ncolor_stand = \"gray\";\n\n// Main dimensions\ntube_length = 60;\ntube_diameter = 3;\nreservoir_diameter = 12;\nreservoir_height = 15;\nbulb_volume = 8;\nbulb_diameter = 8;\ncapillary_length = 30;\ncapillary_diameter = 1.5;\n\nmodule timing_mark() {\n    color(color_markings) \n    translate([0, -tube_diameter/2-1, 0])\n    cube([0.5, 0.5, 0.2], center=true);\n}\n\nmodule timing_marks(z_pos) {\n    for (i = [0:1]) {\n        translate([0, 0, z_pos + i*capillary_length/2])\n        timing_mark();\n    }\n}\n\nmodule reservoir() {\n    color(color_reservoir)\n    union() {\n        // Main reservoir bulb\n        cylinder(d=reservoir_diameter, h=reservoir_height, center=true);\n        \n        // Connection to tube\n        translate([0, 0, reservoir_height/2])\n        cylinder(d=tube_diameter, h=2, center=false);\n    }\n}\n\nmodule measuring_bulb() {\n    color(color_tube)\n    translate([0, 0, -tube_length/2 + capillary_length + bulb_volume])\n    sphere(d=bulb_diameter, center=true);\n}\n\nmodule capillary_tube() {\n    color(color_tube)\n    union() {\n        // Lower tube\n        translate([0, 0, -tube_length/2 + capillary_length/2])\n        cylinder(d=tube_diameter, h=capillary_length, center=true);\n        \n        // Upper tube\n        translate([0, 0, tube_length/2 - (tube_length - capillary_length - bulb_volume)/2])\n        cylinder(d=tube_diameter, h=(tube_length - capillary_length - bulb_volume), center=true);\n        \n        // Capillary section\n        translate([0, 0, -tube_length/2 + capillary_length/4])\n        cylinder(d=capillary_diameter, h=capillary_length/2, center=true);\n    }\n}\n\nmodule support_stand() {\n    color(color_stand)\n    union() {\n        // Base\n        translate([0, -15, -tube_length/2-5])\n        cube([30, 5, 2], center=true);\n        \n        // Upright supports\n        for (x = [-12, 12]) {\n            translate([x, -15, -tube_length/2-2.5])\n            cube([2, 5, tube_length+8], center=true);\n        }\n        \n        // Top support\n        translate([0, -15, tube_length/2+3])\n        cube([30, 5, 2], center=true);\n        \n        // Clamp rings\n        for (z = [-tube_length/2+5, tube_length/2-5]) {\n            translate([0, -12, z])\n            rotate([90, 0, 0])\n            cylinder(d=tube_diameter+2, h=3, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main viscometer tube\n    translate([0, 0, 0])\n    union() {\n        reservoir();\n        translate([0, 0, reservoir_height/2 + tube_length/2 - capillary_length/2])\n        capillary_tube();\n        measuring_bulb();\n        timing_marks(-tube_length/2 + capillary_length/4);\n    }\n    \n    // Support stand\n    support_stand();\n}",
    "renders": true
  },
  {
    "tool": "tensiometer",
    "openscad_code": "// Tensiometer Tool - Realistic Style, Medium Complexity\n// This is a 3D printable tensiometer tool for measuring belt tension\n\n$fn = 32;\n\n// Main dimensions\nbody_length = 80;\nbody_width = 15;\nbody_height = 8;\nhandle_length = 40;\nhandle_diameter = 12;\nprobe_length = 50;\nprobe_diameter = 3;\nspring_diameter = 6;\nspring_coils = 8;\n\nmodule body() {\n    // Main rectangular body\n    color(\"silver\") \n    difference() {\n        cube([body_length, body_width, body_height], center = true);\n        \n        // Rounded edges\n        translate([body_length/2 - 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = body_width, r = 2, center = true);\n        translate([-body_length/2 + 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = body_width, r = 2, center = true);\n    }\n    \n    // Grip texture\n    color(\"gray20\")\n    for(i = [-3:1:3]) {\n        translate([i * 10, 0, body_height/2 + 0.1])\n            cube([1, body_width - 2, 0.5], center = true);\n    }\n}\n\nmodule handle() {\n    // Ergonomic handle\n    color(\"black\")\n    difference() {\n        union() {\n            // Main handle cylinder\n            translate([-body_length/2 - handle_length/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = handle_length, d = handle_diameter, center = true);\n            \n            // Tapered end\n            translate([-body_length/2 - handle_length - 5, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 10, d1 = handle_diameter, d2 = handle_diameter * 0.8, center = true);\n        }\n        \n        // Grip grooves\n        for(i = [0:5:handle_length-10]) {\n            translate([-body_length/2 - i - 10, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = handle_diameter + 1, d = 10, center = true);\n        }\n    }\n}\n\nmodule display() {\n    // Digital display screen\n    color(\"darkblue\")\n    translate([body_length/2 - 20, 0, body_height/2 + 1])\n        cube([15, 12, 1], center = true);\n    \n    // Screen bezel\n    color(\"silver\")\n    difference() {\n        translate([body_length/2 - 20, 0, body_height/2 + 0.5])\n            cube([16, 13, 0.5], center = true);\n        translate([body_length/2 - 20, 0, body_height/2 + 1])\n            cube([14, 11, 1], center = true);\n    }\n}\n\nmodule probe() {\n    // Measuring probe assembly\n    color(\"silver\")\n    translate([body_length/2 + 10, 0, 0])\n        cylinder(h = probe_length, d = probe_diameter, center = true);\n    \n    // Probe tip\n    color(\"red\")\n    translate([body_length/2 + probe_length + 10, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 5, d1 = probe_diameter, d2 = 0, center = true);\n    \n    // Spring mechanism\n    color(\"gold\")\n    for(i = [0:1:spring_coils-1]) {\n        translate([body_length/2 + 5 + i * (probe_length/spring_coils), 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 2, d = spring_diameter, center = true);\n    }\n}\n\nmodule calibration_markings() {\n    // Measurement scale\n    color(\"white\")\n    for(i = [0:1:9]) {\n        translate([body_length/2 - 25 + i * 2, body_width/2 + 0.1, 0])\n            cube([0.5, 2, 0.1], center = true);\n    }\n    \n    // Major tick marks\n    for(i = [0:2:9]) {\n        translate([body_length/2 - 25 + i * 2, body_width/2 + 0.1, 0])\n            cube([0.5, 3, 0.1], center = true);\n    }\n}\n\nmodule buttons() {\n    // Control buttons\n    color(\"red\")\n    translate([body_length/2 - 30, -body_width/3, body_height/2 + 1])\n        cylinder(h = 1, d = 3, center = true);\n    \n    color(\"green\")\n    translate([body_length/2 - 25, -body_width/3, body_height/2 + 1])\n        cylinder(h = 1, d = 3, center = true);\n    \n    color(\"yellow\")\n    translate([body_length/2 - 20, -body_width/3, body_height/2 + 1])\n        cylinder(h = 1, d = 3, center = true);\n}\n\n// Assemble the tensiometer\nunion() {\n    body();\n    handle();\n    display();\n    probe();\n    calibration_markings();\n    buttons();\n}",
    "renders": true
  },
  {
    "tool": "manometer",
    "openscad_code": "// Manometer Tool - Realistic Style, Medium Complexity\n// U-tube manometer with pressure fittings, scale markings, and base\n\n// Main parameters\nbase_width = 40;\nbase_depth = 20;\nbase_height = 8;\ntube_diameter = 6;\ntube_wall = 1;\ntube_height = 50;\nmanometer_width = 30;\nscale_length = 40;\n\n// Colors\nbase_color = [0.2, 0.2, 0.2];\ntube_color = [0.8, 0.8, 0.9, 0.7];\nfluid_color = [0.1, 0.6, 0.9, 0.8];\nmetal_color = [0.7, 0.7, 0.7];\n\n// Base with mounting holes\nmodule manometer_base() {\n    color(base_color)\n    difference() {\n        // Main base\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Mounting holes\n        translate([15, 0, -base_height/2])\n            cylinder(h=base_height+1, d=3, center=true);\n        translate([-15, 0, -base_height/2])\n            cylinder(h=base_height+1, d=3, center=true);\n        \n        // Label recess\n        translate([0, 8, base_height/2-1])\n            cube([20, 8, 2], center=true);\n    }\n}\n\n// U-tube assembly\nmodule u_tube() {\n    color(tube_color)\n    union() {\n        // Left vertical tube\n        translate([-manometer_width/2, 0, tube_height/2])\n            cylinder(h=tube_height, d=tube_diameter+tube_wall*2, center=true);\n        \n        // Right vertical tube\n        translate([manometer_width/2, 0, tube_height/2])\n            cylinder(h=tube_height, d=tube_diameter+tube_wall*2, center=true);\n        \n        // Bottom connecting tube\n        translate([0, 0, tube_wall])\n            rotate([90, 0, 0])\n            cylinder(h=manometer_width+tube_diameter, d=tube_diameter+tube_wall*2, center=true);\n        \n        // Left pressure fitting\n        color(metal_color)\n        translate([-manometer_width/2, 0, tube_height+3])\n            cylinder(h=6, d=8, center=true);\n        \n        // Right pressure fitting\n        translate([manometer_width/2, 0, tube_height+3])\n            cylinder(h=6, d=8, center=true);\n    }\n    \n    // Fluid inside tube\n    color(fluid_color)\n    difference() {\n        // Left fluid column\n        translate([-manometer_width/2, 0, tube_height/4])\n            cylinder(h=tube_height/2, d=tube_diameter, center=true);\n        \n        // Right fluid column (higher due to pressure)\n        translate([manometer_width/2, 0, tube_height/3])\n            cylinder(h=tube_height/1.5, d=tube_diameter, center=true);\n        \n        // Bottom fluid connection\n        translate([0, 0, tube_wall])\n            rotate([90, 0, 0])\n            cylinder(h=manometer_width, d=tube_diameter, center=true);\n    }\n}\n\n// Scale markings\nmodule scale_markings() {\n    color([0.1, 0.1, 0.1])\n    for(i=[-20:1:20]) {\n        height = i * 1 + tube_height/2;\n        if(i%5 == 0) {\n            // Major tick marks\n            translate([manometer_width/2+5, 0, height])\n                cube([3, 1, 0.5], center=true);\n            translate([-manometer_width/2-5, 0, height])\n                cube([3, 1, 0.5], center=true);\n        } else {\n            // Minor tick marks\n            translate([manometer_width/2+4, 0, height])\n                cube([2, 0.5, 0.3], center=true);\n            translate([-manometer_width/2-4, 0, height])\n                cube([2, 0.5, 0.3], center=true);\n        }\n    }\n}\n\n// Support structure\nmodule support_structure() {\n    color(metal_color)\n    union() {\n        // Left support\n        translate([-manometer_width/2-2, 0, tube_height/2])\n            cylinder(h=tube_height, d=4, center=true);\n        \n        // Right support\n        translate([manometer_width/2+2, 0, tube_height/2])\n            cylinder(h=tube_height, d=4, center=true);\n        \n        // Top cross bar\n        translate([0, 0, tube_height+1])\n            rotate([90, 0, 0])\n            cylinder(h=manometer_width+8, d=3, center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_height/2])\n    manometer_base();\n\ntranslate([0, 0, base_height])\n    u_tube();\n\ntranslate([0, 0, base_height])\n    scale_markings();\n\ntranslate([0, 0, base_height])\n    support_structure();",
    "renders": true
  },
  {
    "tool": "vacuometer",
    "openscad_code": "// Realistic vacuometer (vacuum gauge) model\n// Medium complexity: 50-150 lines, recognizable tool with functional features\n\n// Main module for the vacuometer\nmodule vacuometer() {\n    // Colors\n    color(\"silver\") body();\n    color(\"black\") face();\n    color(\"red\") needle();\n    color(\"white\") glass();\n    color(\"gray\") connector();\n}\n\n// Main body cylinder\nmodule body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 20, d = 60, $fn = 64);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h = 22, d = 58, $fn = 64);\n    }\n    \n    // Base mounting flange\n    translate([0, 0, -2])\n        cylinder(h = 3, d = 70, $fn = 64);\n    \n    // Side connection port\n    translate([30, 0, 10])\n        rotate([0, 90, 0])\n            cylinder(h = 15, d = 12, $fn = 32);\n}\n\n// Gauge face with markings\nmodule face() {\n    translate([0, 0, 19.5])\n        difference() {\n            // Face disk\n            cylinder(h = 1, d = 58, $fn = 64);\n            \n            // Center hole\n            cylinder(h = 2, d = 4, $fn = 32);\n            \n            // Text markings (simplified as grooves)\n            for(a = [0:18:180]) {\n                rotate([0, 0, a])\n                    translate([25, -0.5, 0])\n                        cube([5, 1, 2]);\n            }\n        }\n}\n\n// Gauge needle\nmodule needle() {\n    translate([0, 0, 20.5])\n        rotate([0, 0, 45])\n            union() {\n                // Needle body\n                cube([25, 1.5, 0.5], center = true);\n                \n                // Needle hub\n                cylinder(h = 2, d = 3, $fn = 16);\n            }\n}\n\n// Protective glass cover\nmodule glass() {\n    translate([0, 0, 21])\n        cylinder(h = 2, d = 56, $fn = 64);\n}\n\n// Vacuum connector fitting\nmodule connector() {\n    translate([37.5, 0, 10])\n        rotate([0, 90, 0])\n            union() {\n                // Main connector\n                cylinder(h = 10, d = 8, $fn = 32);\n                \n                // Barbed fitting\n                for(i = [1:3]) {\n                    translate([0, 0, 2*i])\n                        cylinder(h = 1, d = 10, $fn = 32);\n                }\n                \n                // Thread relief\n                translate([0, 0, 8])\n                    cylinder(h = 2, d = 6, $fn = 32);\n            }\n}\n\n// Assembly\nvacuometer();",
    "renders": true
  },
  {
    "tool": "barograph",
    "openscad_code": "// Realistic Barograph Model (Medium Complexity)\n// Features: Base with pressure chart, rotating drum with stylus arm, ink reservoir, and adjustment mechanism\n\n// Overall scale factor\nscale_factor = 1.2;\n\n// Base dimensions\nbase_len = 70 * scale_factor;\nbase_wid = 40 * scale_factor;\nbase_height = 8 * scale_factor;\n\n// Drum dimensions\ndrum_d = 20 * scale_factor;\ndrum_h = 35 * scale_factor;\n\n// Stylus arm dimensions\narm_len = 35 * scale_factor;\narm_width = 4 * scale_factor;\narm_thick = 2 * scale_factor;\n\n// Ink reservoir\nink_d = 6 * scale_factor;\nink_h = 8 * scale_factor;\n\n// Support pillars\npillar_d = 3 * scale_factor;\npillar_h = 30 * scale_factor;\n\n// Chart paper thickness\npaper_thick = 0.5 * scale_factor;\n\n// Base module with chart paper\nmodule base_with_chart() {\n    // Main base\n    color(\"burlywood\")\n    cube([base_len, base_wid, base_height], center=true);\n    \n    // Chart paper on top\n    translate([0, 0, base_height/2 + paper_thick/2])\n    color(\"ivory\")\n    cube([base_len - 4, base_wid - 4, paper_thick], center=true);\n    \n    // Chart grid lines\n    for(i = [-30:5:30]) {\n        translate([i, 0, base_height/2 + paper_thick + 0.1])\n        color(\"gray\")\n        cube([0.5, base_wid - 6, 0.3], center=true);\n    }\n    for(i = [-15:5:15]) {\n        translate([0, i, base_height/2 + paper_thick + 0.1])\n        color(\"gray\")\n        cube([base_len - 6, 0.5, 0.3], center=true);\n    }\n}\n\n// Drum module\nmodule drum() {\n    // Main drum body\n    color(\"darkgray\")\n    rotate([90, 0, 0])\n    cylinder(h=drum_h, d=drum_d, $fn=32);\n    \n    // Drum end caps\n    translate([0, -drum_h/2, 0])\n    rotate([90, 0, 0])\n    cylinder(h=2, d=drum_d + 2, $fn=32);\n    translate([0, drum_h/2, 0])\n    rotate([90, 0, 0])\n    cylinder(h=2, d=drum_d + 2, $fn=32);\n    \n    // Drum surface texture (grooves)\n    for(i = [-drum_h/2 + 2:2:drum_h/2 - 2]) {\n        translate([0, i, 0])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, d=drum_d + 0.2, $fn=32);\n    }\n}\n\n// Stylus arm module\nmodule stylus_arm() {\n    // Main arm\n    translate([0, 0, arm_thick/2])\n    color(\"silver\")\n    cube([arm_len, arm_width, arm_thick], center=true);\n    \n    // Stylus tip\n    translate([arm_len/2, 0, arm_thick/2])\n    color(\"black\")\n    sphere(d=1.5, $fn=16);\n    \n    // Arm pivot\n    translate([-arm_len/2 + 5, 0, arm_thick/2])\n    rotate([90, 0, 0])\n    cylinder(h=arm_width + 2, d=3, $fn=16);\n}\n\n// Ink reservoir module\nmodule ink_reservoir() {\n    // Reservoir body\n    color(\"navy\")\n    cylinder(h=ink_h, d=ink_d, $fn=32);\n    \n    // Cap\n    translate([0, 0, ink_h])\n    color(\"silver\")\n    cylinder(h=2, d=ink_d + 1, $fn=32);\n    \n    // Mounting bracket\n    translate([0, -ink_d/2 - 2, ink_h/2])\n    color(\"gray\")\n    cube([ink_d + 4, 2, ink_h], center=true);\n}\n\n// Support pillars module\nmodule pillars() {\n    // Left pillar\n    translate([-base_len/4, 0, base_height/2 + pillar_h/2])\n    color(\"darkgray\")\n    cylinder(h=pillar_h, d=pillar_d, $fn=16);\n    \n    // Right pillar\n    translate([base_len/4, 0, base_height/2 + pillar_h/2])\n    color(\"darkgray\")\n    cylinder(h=pillar_h, d=pillar_d, $fn=16);\n    \n    // Cross bar\n    translate([0, 0, base_height/2 + pillar_h - 3])\n    color(\"darkgray\")\n    cube([base_len/2 + 5, 3, 3], center=true);\n}\n\n// Adjustment mechanism\nmodule adjustment_mechanism() {\n    // Knob\n    translate([-base_len/2 + 8, base_wid/2 - 5, base_height/2 + 5])\n    color(\"black\")\n    rotate([90, 0, 0])\n    cylinder(h=4, d=6, $fn=20);\n    \n    // Knob grip lines\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([-base_len/2 + 8, base_wid/2 - 5, base_height/2 + 5.5])\n        color(\"gray\")\n        cube([0.3, 3, 0.5], center=true);\n    }\n    \n    // Adjustment rod\n    translate([-base_len/2 + 8, base_wid/2 - 10, base_height/2 + 5])\n    color(\"silver\")\n    rotate([90, 0, 0])\n    cylinder(h=10, d=2, $fn=16);\n}\n\n// Main assembly\nbase_with_chart();\npillars();\n\n// Drum positioned between pillars\ntranslate([0, 0, base_height/2 + pillar_h - drum_d/2])\ndrum();\n\n// Stylus arm mounted on cross bar\ntranslate([0, 0, base_height/2 + pillar_h - 3])\nrotate([0, 0, -15])\nstylus_arm();\n\n// Ink reservoir mounted on right side\ntranslate([base_len/4 - 5, 0, base_height/2 + pillar_h + 5])\nink_reservoir();\n\n// Adjustment mechanism\nadjustment_mechanism();",
    "renders": true
  },
  {
    "tool": "hygrograph",
    "openscad_code": "// Hygrograph - Realistic Style, Medium Complexity\n// Measures and records humidity over time on a paper chart\n\n$fn = 64;\n\n// Main colors\ncolor_case = [0.8, 0.8, 0.75];      // Light gray plastic\ncolor_metal = [0.4, 0.4, 0.4];      // Dark gray metal\ncolor_paper = [0.95, 0.93, 0.85];   // Off-white paper\ncolor_pen = [0.2, 0.2, 0.2];        // Black pen\ncolor_sensor = [0.6, 0.6, 0.7];     // Silver metal\n\n// Main body dimensions\nbody_width = 70;\nbody_height = 50;\nbody_depth = 25;\nwall_thickness = 2;\n\n// Chart drum\ndrum_radius = 18;\ndrum_height = 40;\ndrum_wall = 1.5;\n\n// Pen arm\narm_length = 30;\narm_width = 3;\narm_thickness = 2;\n\n// Humidity sensor\nsensor_length = 15;\nsensor_width = 8;\nsensor_thickness = 1;\n\n// Main case\nmodule main_case() {\n    color(color_case)\n    difference() {\n        // Outer shell\n        cube([body_width, body_height, body_depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([body_width-wall_thickness*2, body_height-wall_thickness*2, body_depth], center=true);\n        \n        // Chart viewing window\n        translate([0, 0, body_depth/2 - 0.1])\n        cube([body_width - 10, body_height - 10, wall_thickness*2], center=true);\n    }\n}\n\n// Rotating chart drum\nmodule chart_drum() {\n    translate([body_width/4, 0, 0])\n    rotate([0, 90, 0])\n    union() {\n        // Drum cylinder\n        color(color_metal)\n        difference() {\n            cylinder(h=drum_height, r=drum_radius, center=true);\n            cylinder(h=drum_height+1, r=drum_radius-drum_wall, center=true);\n        }\n        \n        // Paper chart\n        color(color_paper)\n        rotate([0, 0, 45])\n        cylinder(h=drum_height-2, r=drum_radius-1, center=true);\n        \n        // Drive gear teeth\n        for(i=[0:15:359]) {\n            rotate([0, 0, i])\n            translate([drum_radius+1, 0, 0])\n            color(color_metal)\n            cube([2, 1, drum_height-4], center=true);\n        }\n    }\n}\n\n// Pen mounting arm\nmodule pen_arm() {\n    translate([-body_width/4, 0, body_depth/4])\n    union() {\n        // Main arm\n        color(color_metal)\n        cube([arm_length, arm_width, arm_thickness], center=true);\n        \n        // Pen holder\n        translate([arm_length/2, 0, 0])\n        color(color_metal)\n        cylinder(h=arm_width+2, r=2, center=true);\n        \n        // Pivot point\n        translate([-arm_length/2, 0, 0])\n        color(color_metal)\n        sphere(r=3);\n    }\n}\n\n// Humidity sensor mechanism\nmodule humidity_sensor() {\n    translate([-body_width/3, body_height/3, 0])\n    rotate([0, 0, -30])\n    union() {\n        // Sensor housing\n        color(color_sensor)\n        cube([sensor_length, sensor_width, sensor_thickness], center=true);\n        \n        // Hair bundle (simplified)\n        for(i=[-3:3]) {\n            translate([i*1.5, sensor_width/4, sensor_thickness/2])\n            color([0.1, 0.1, 0.1])\n            cylinder(h=sensor_length/2, r=0.3, center=false);\n        }\n        \n        // Connection rod\n        translate([sensor_length/2, 0, sensor_thickness/2])\n        rotate([0, 90, 0])\n        color(color_metal)\n        cylinder(h=20, r=1, center=false);\n    }\n}\n\n// Calibration dial\nmodule calibration_dial() {\n    translate([body_width/3, -body_height/3, body_depth/4])\n    union() {\n        // Dial base\n        color(color_metal)\n        cylinder(h=3, r=8, center=false);\n        \n        // Pointer\n        color(color_metal)\n        translate([0, 0, 3])\n        rotate([0, 0, 45])\n        cube([12, 1, 0.5], center=true);\n        \n        // Markings\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n            translate([6, 0, 3.1])\n            color([0.1, 0.1, 0.1])\n            cube([2, 0.5, 0.3], center=true);\n        }\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    color(color_metal)\n    translate([0, -body_height/2 - 5, 0])\n    union() {\n        // Bracket base\n        cube([body_width/2, 10, 5], center=true);\n        \n        // Mounting holes\n        for(i=[-1:1]) {\n            translate([i*15, -body_height/2 - 5, 0])\n            cylinder(h=6, r=2, center=true);\n        }\n    }\n}\n\n// Assembly\nmain_case();\nchart_drum();\npen_arm();\nhumidity_sensor();\ncalibration_dial();\nmounting_bracket();",
    "renders": true
  },
  {
    "tool": "thermograph",
    "openscad_code": "// Thermograph tool - realistic style, medium complexity\n\n// Parameters\nhandle_length = 80;\nhandle_diameter = 12;\nprobe_length = 60;\nprobe_diameter = 4;\nscreen_width = 20;\nscreen_height = 15;\nscreen_depth = 3;\nbutton_diameter = 3;\nbutton_height = 1;\n\n// Colors\ncolor_handle = [0.1, 0.1, 0.1];\ncolor_body = [0.8, 0.8, 0.8];\ncolor_probe = [0.9, 0.9, 0.9];\ncolor_screen = [0.2, 0.2, 0.8];\ncolor_button = [0.9, 0.1, 0.1];\n\n// Main assembly\nmodule thermograph() {\n    // Handle with grip texture\n    translate([0, 0, 0])\n        handle();\n    \n    // Main body\n    translate([0, 0, handle_length])\n        body();\n    \n    // Probe\n    translate([0, 0, handle_length + 20])\n        probe();\n}\n\n// Handle module with grip rings\nmodule handle() {\n    color(color_handle) {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [5:10:handle_length-15]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=handle_diameter + 2, $fn=32);\n        }\n        \n        // Battery cap at bottom\n        translate([0, 0, -5])\n            cylinder(h=5, d=handle_diameter + 1, $fn=32);\n    }\n}\n\n// Main body with screen and buttons\nmodule body() {\n    color(color_body) {\n        // Main body\n        difference() {\n            cube([25, 15, 20], center=true);\n            \n            // Screen recess\n            translate([12.5, 0, 8])\n                cube([screen_width + 2, screen_height + 2, screen_depth + 1], center=true);\n            \n            // Button holes\n            for(i = [0:2]) {\n                translate([10, -5 + i*5, 8])\n                    cylinder(h=3, d=button_diameter + 0.5, $fn=16);\n            }\n        }\n        \n        // Screen\n        color(color_screen)\n            translate([12.5, 0, 8])\n                cube([screen_width, screen_height, screen_depth], center=true);\n        \n        // Buttons\n        for(i = [0:2]) {\n            color(color_button)\n                translate([10, -5 + i*5, 10])\n                    cylinder(h=button_height, d=button_diameter, $fn=16);\n        }\n        \n        // Trigger button\n        translate([0, -8, 5])\n            rotate([90, 0, 0])\n                cylinder(h=8, d1=8, d2=6, $fn=16);\n    }\n}\n\n// Probe with sensor tip\nmodule probe() {\n    color(color_probe) {\n        // Probe shaft\n        cylinder(h=probe_length - 10, d=probe_diameter, $fn=32);\n        \n        // Tapered tip\n        translate([0, 0, probe_length - 10])\n            cylinder(h=10, d1=probe_diameter, d2=probe_diameter/3, $fn=32);\n        \n        // Sensor housing ring\n        translate([0, 0, probe_length - 15])\n            cylinder(h=3, d=probe_diameter + 2, $fn=32);\n    }\n}\n\n// Generate the complete thermograph\nthermograph();",
    "renders": true
  },
  {
    "tool": "seismograph",
    "openscad_code": "// Seismograph Tool - Realistic Style, Medium Complexity\n\n// Base dimensions\nbase_width = 60;\nbase_depth = 80;\nbase_height = 5;\n\n// Leg dimensions\nleg_height = 15;\nleg_diameter = 8;\n\n// Drum dimensions\ndrum_radius = 20;\ndrum_height = 30;\ndrum_offset = 20;\n\n// Pen arm dimensions\narm_length = 35;\narm_thickness = 2;\narm_height = 25;\n\n// Sensor dimensions\nsensor_size = 10;\nsensor_height = 8;\n\n// Paper roll dimensions\npaper_thickness = 0.5;\npaper_width = 25;\n\n// Colors\nbase_color = [0.2, 0.2, 0.2];\nleg_color = [0.1, 0.1, 0.1];\ndrum_color = [0.8, 0.8, 0.8];\npen_color = [0.1, 0.1, 0.1];\nsensor_color = [0.5, 0.5, 0.5];\npaper_color = [1, 1, 1];\n\n// Base with mounting holes\nmodule base() {\n    color(base_color)\n    difference() {\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Mounting holes - 4 corners\n        for(x = [-base_width/2 + 10, base_width/2 - 10])\n        for(y = [-base_depth/2 + 10, base_depth/2 - 10]) {\n            translate([x, y, 0])\n            cylinder(h=base_height+1, r=2, center=true);\n        }\n    }\n}\n\n// Support legs\nmodule legs() {\n    color(leg_color)\n    for(x = [-base_width/2 + 15, base_width/2 - 15])\n    for(y = [-base_depth/2 + 15, base_depth/2 - 15]) {\n        translate([x, y, -leg_height/2]) {\n            cylinder(h=leg_height, r=leg_diameter/2, center=true);\n        }\n    }\n}\n\n// Rotating drum with paper\nmodule drum() {\n    // Drum body\n    color(drum_color)\n    translate([0, -drum_offset, drum_height/2])\n    cylinder(h=drum_height, r=drum_radius);\n    \n    // Paper roll\n    color(paper_color)\n    translate([0, -drum_offset, drum_height/2])\n    cylinder(h=paper_width, r=drum_radius + paper_thickness);\n    \n    // Drum end caps\n    color(leg_color)\n    translate([0, -drum_offset, -0.5])\n    cylinder(h=1, r=drum_radius + 2);\n    \n    translate([0, -drum_offset, drum_height + 0.5])\n    cylinder(h=1, r=drum_radius + 2);\n}\n\n// Pen arm mechanism\nmodule pen_arm() {\n    color(pen_color)\n    union() {\n        // Main arm\n        translate([-arm_length/2, 0, arm_height])\n        cube([arm_length, arm_thickness, arm_thickness], center=true);\n        \n        // Pen holder\n        translate([arm_length/2, 0, arm_height])\n        cylinder(h=5, r=1.5);\n        \n        // Pivot point\n        translate([-arm_length/2, 0, arm_height])\n        cylinder(h=arm_thickness + 2, r=3, center=true);\n        \n        // Counterweight\n        translate([-arm_length/2 + 5, 0, arm_height + 5])\n        sphere(r=3);\n    }\n}\n\n// Seismic sensor\nmodule sensor() {\n    color(sensor_color)\n    translate([0, drum_offset, sensor_height/2])\n    cube([sensor_size, sensor_size, sensor_height], center=true);\n    \n    // Sensor detail - top plate\n    translate([0, drum_offset, sensor_height])\n    cube([sensor_size + 2, sensor_size + 2, 1], center=true);\n    \n    // Connection wire\n    color([0, 0, 0])\n    translate([0, drum_offset - sensor_size/2 - 5, sensor_height])\n    cylinder(h=10, r=0.5);\n}\n\n// Control knobs\nmodule knobs() {\n    color(leg_color)\n    for(i = [1:3]) {\n        translate([base_width/2 - 5 - (i-1)*8, base_depth/2 - 8, base_height + 3])\n        cylinder(h=5, r=3);\n    }\n}\n\n// Scale markings on drum\nmodule markings() {\n    color([0, 0, 0])\n    for(i = [0:5]) {\n        translate([drum_radius + 0.5, -drum_offset, i * 5])\n        cube([0.5, 0.2, 1]);\n    }\n}\n\n// Main assembly\nunion() {\n    base();\n    legs();\n    drum();\n    pen_arm();\n    sensor();\n    knobs();\n    \n    // Add markings to drum\n    rotate([0, 0, 45])\n    markings();\n}",
    "renders": true
  },
  {
    "tool": "actinograph",
    "openscad_code": "// Actinograph - Historical sunlight recording instrument\n// Medium complexity realistic style for 3D printing\n\nmodule actinograph() {\n    // Main base platform\n    color(\"saddlebrown\")\n    translate([0, 0, 0])\n    cube([60, 80, 5], center=true);\n    \n    // Central pivot post\n    color(\"gray20\")\n    translate([0, 0, 2.5])\n    cylinder(h=15, d=8, $fn=16);\n    \n    // Rotating arm assembly\n    color(\"dimgray\")\n    rotate([0, 0, $t*360])  // Animated rotation for demo\n    translate([0, 0, 17.5])\n    union() {\n        // Main arm\n        translate([15, 0, 0])\n        cube([30, 6, 3], center=true);\n        \n        // Counterweight\n        translate([-20, 0, 0])\n        sphere(d=12, $fn=20);\n        \n        // Paper drum mount\n        translate([30, 0, 2])\n        cylinder(h=10, d=4, $fn=12);\n    }\n    \n    // Paper drum (recording cylinder)\n    color(\"ivory\")\n    rotate([0, 0, $t*-360])  // Counter-rotate for paper\n    translate([30, 0, 12])\n    difference() {\n        cylinder(h=15, d=20, $fn=32);\n        // Hollow center\n        cylinder(h=16, d=16, $fn=32);\n    }\n    \n    // Light aperture/slit\n    color(\"black\")\n    translate([30, 0, 20])\n    cube([0.5, 2, 8], center=true);\n    \n    // Support brackets (4 corners)\n    for(i=[-1,1])\n    for(j=[-1,1]) {\n        color(\"darkgoldenrod\")\n        translate([i*25, j*35, 2.5])\n        cylinder(h=5, d=6, $fn=8);\n    }\n    \n    // Compass rose markings\n    color(\"gold\")\n    translate([0, 0, 5.5])\n    for(angle=[0:30:330]) {\n        rotate([0, 0, angle])\n        translate([22, 0, 0])\n        cube([8, 1, 0.5], center=true);\n    }\n    \n    // North indicator\n    color(\"red\")\n    translate([0, 30, 6])\n    rotate([0, 0, 0])\n    cylinder(h=1, d=4, $fn=6);\n    \n    // Calibration scale\n    color(\"black\")\n    translate([30, 12, 20.5])\n    for(i=[0:5:30]) {\n        translate([0, i, 0])\n        cube([0.5, 3, 0.5], center=true);\n    }\n    \n    // Mounting holes (for 3D printing - reduce material)\n    color(\"white\", 0.0)\n    for(i=[-1,1])\n    for(j=[-1,1]) {\n        translate([i*20, j*30, 2.5])\n        cylinder(h=5, d=3, $fn=12);\n    }\n}\n\n// Render the complete actinograph\nactinograph();",
    "renders": true
  },
  {
    "tool": "heliograph",
    "openscad_code": "// Heliograph - Solar Signaling Mirror Tool\n// Realistic style with medium complexity\n\n// Main parameters\nmirror_diameter = 40;\nmirror_thickness = 2;\nbody_length = 60;\nbody_width = 20;\nbody_thickness = 8;\nhinge_radius = 3;\nhandle_length = 35;\nhandle_diameter = 12;\n\n// Colors\nmirror_color = \"silver\";\nbody_color = [0.2, 0.2, 0.2]; // dark gray\nhandle_color = [0.3, 0.2, 0.1]; // brown wood\n\nmodule mirror() {\n    // Main mirror disk\n    color(mirror_color)\n    difference() {\n        cylinder(h=mirror_thickness, d=mirror_diameter, $fn=64);\n        // Small sight hole in center\n        translate([0, 0, -1])\n        cylinder(h=mirror_thickness+2, d=2, $fn=32);\n    }\n    \n    // Mirror backing with cross pattern\n    color(body_color)\n    translate([0, 0, -1.5])\n    difference() {\n        cylinder(h=1.5, d=mirror_diameter, $fn=64);\n        // Cutouts for weight reduction\n        for(i=[-1, 1]) {\n            translate([i*8, 0, -0.5])\n            cube([16, 4, 2], center=true);\n            translate([0, i*8, -0.5])\n            cube([4, 16, 2], center=true);\n        }\n    }\n}\n\nmodule sighting_arm() {\n    // Main arm body\n    color(body_color)\n    union() {\n        // Hinge part\n        translate([0, 0, hinge_radius])\n        rotate([90, 0, 0])\n        cylinder(h=body_width, r=hinge_radius, $fn=16);\n        \n        // Arm extension\n        translate([0, body_width/2, 0])\n        cube([body_length, body_thickness, body_width], center=true);\n        \n        // End cap\n        translate([body_length/2, body_width/2, 0])\n        cube([body_thickness, body_thickness, body_width], center=true);\n    }\n    \n    // Sighting hole\n    color(\"black\")\n    translate([body_length/2, body_width/2, 0])\n    cylinder(h=body_thickness+1, d=3, $fn=16);\n}\n\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle cylinder\n        translate([0, -handle_length/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip grooves\n        for(i=[-12:4:12]) {\n            translate([0, i, handle_diameter/2-1])\n            rotate([90, 0, 0])\n            cylinder(h=handle_diameter, d=handle_diameter-2, $fn=32);\n        }\n    }\n    \n    // Metal end cap\n    color(body_color)\n    translate([0, -handle_length/2-2, 0])\n    rotate([90, 0, 0])\n    cylinder(h=4, d=handle_diameter+2, $fn=32);\n}\n\nmodule mounting_bracket() {\n    color(body_color)\n    // Bracket base\n    translate([0, 0, -body_thickness/2])\n    cube([mirror_diameter+10, 8, body_thickness], center=true);\n    \n    // Mounting posts\n    for(pos=[-1, 1]) {\n        translate([pos*15, 0, 0])\n        cylinder(h=10, r=2, $fn=16);\n    }\n}\n\n// Assembly\n// Main mirror assembly\nmirror();\n\n// Sighting arm attached with hinge\ntranslate([0, mirror_diameter/2+hinge_radius, mirror_thickness/2])\nrotate([0, 0, -30])\nsighting_arm();\n\n// Handle attached at bottom\ntranslate([0, 0, -body_thickness-5])\nhandle();\n\n// Mounting bracket\ntranslate([0, -mirror_diameter/2-5, 0])\nmounting_bracket();\n\n// Small adjustment knobs\nfor(pos=[-1, 1]) {\n    color(body_color)\n    translate([pos*18, mirror_diameter/2+5, 3])\n    rotate([90, 0, 0])\n    cylinder(h=6, r=4, $fn=16);\n    translate([pos*18, mirror_diameter/2+5, 6])\n    sphere(r=4, $fn=16);\n}",
    "renders": true
  },
  {
    "tool": "microscope",
    "openscad_code": "// Realistic Microscope Model - Medium Complexity\n// Approximate size: 80mm tall, 40mm wide, 60mm deep\n\n// Base plate\nmodule base() {\n    color(\"silver\")\n    difference() {\n        cube([40, 50, 4], center=true);\n        translate([0, 0, 2])\n        cube([36, 46, 4], center=true);\n    }\n}\n\n// Vertical column\nmodule column() {\n    color(\"silver\")\n    translate([0, 0, 20])\n    cylinder(h=40, d=8, center=true);\n}\n\n// Stage platform\nmodule stage() {\n    color(\"silver\")\n    translate([0, 0, 26])\n    cube([30, 30, 2], center=true);\n    \n    // Stage clips\n    for(x=[-12, 12]) {\n        color(\"black\")\n        translate([x, 0, 27.5])\n        cube([3, 20, 1], center=true);\n    }\n}\n\n// Objective lenses turret\nmodule objectives() {\n    color(\"black\")\n    translate([0, 0, 32])\n    cylinder(h=6, d=15);\n    \n    // Three objective lenses\n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([6, 0, 35])\n        color(\"silver\")\n        cylinder(h=8, d=4);\n    }\n}\n\n// Arm connecting eyepiece to base\nmodule arm() {\n    color(\"silver\")\n    translate([0, 12, 42])\n    rotate([30, 0, 0])\n    cube([8, 8, 30], center=true);\n}\n\n// Eyepiece tube and eyepiece\nmodule eyepiece() {\n    color(\"black\")\n    translate([0, 12, 58])\n    rotate([30, 0, 0])\n    cylinder(h=15, d=10);\n    \n    color(\"silver\")\n    translate([0, 12, 65])\n    rotate([30, 0, 0])\n    cylinder(h=5, d=8);\n}\n\n// Light source\nmodule light() {\n    color(\"silver\")\n    translate([0, 0, 1])\n    cylinder(h=2, d=12);\n    \n    color(\"yellow\")\n    translate([0, 0, 0.5])\n    sphere(d=10);\n}\n\n// Coarse focus knobs\nmodule focus_knobs() {\n    for(y=[-15, 15]) {\n        color(\"black\")\n        translate([0, y, 26])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=6);\n        \n        color(\"silver\")\n        translate([0, y, 30])\n        rotate([90, 0, 0])\n        cylinder(h=2, d=4);\n    }\n}\n\n// Fine focus knob\nmodule fine_focus() {\n    color(\"black\")\n    translate([0, 0, 42])\n    rotate([90, 0, 0])\n    cylinder(h=6, d=4);\n}\n\n// Main assembly\nbase();\ncolumn();\nstage();\nobjectives();\narm();\neyepiece();\nlight();\nfocus_knobs();\nfine_focus();",
    "renders": true
  },
  {
    "tool": "telescop",
    "openscad_code": "// Telescoping tool with extendable handle and interchangeable bits\n// Overall length: 60mm retracted, 100mm extended\n// Features: threaded sections, knurled grip, keyring loop, magnetic bit holder\n\n$fn = 50;\nwall = 1.5;\nbit_d = 6;\nhandle_d = 12;\n\nmodule knurl(diameter, height, knurl_w=1.2, knurl_h=0.5) {\n    difference() {\n        cylinder(d=diameter, h=height, center=true);\n        for(i=[0:30:359]) {\n            rotate([0,0,i])\n                translate([diameter/2, 0, 0])\n                    cube([knurl_w, diameter, height+1], center=true);\n            rotate([90,0,i])\n                translate([diameter/2, 0, 0])\n                    cube([knurl_w, diameter, height+1], center=true);\n        }\n    }\n    color(\"silver\") cylinder(d=diameter, h=height, center=true);\n}\n\nmodule screw_thread(outer_d, inner_d, height, pitch=2) {\n    slices = floor(height/pitch);\n    for(i=[0:slices-1]) {\n        translate([0,0,i*pitch-pitch/2])\n            color(\"silver\") cylinder(d1=outer_d, d2=inner_d, h=pitch, center=true);\n    }\n}\n\nmodule bit_holder() {\n    color(\"darkgray\") {\n        difference() {\n            cylinder(d=bit_d+2, h=8, center=true);\n            cylinder(d=bit_d+0.5, h=9, center=true);\n        }\n        cylinder(d=bit_d+4, h=2, center=true);\n    }\n    \n    // Magnet cavity\n    color(\"red\") translate([0,0,-3.5])\n        cylinder(d=bit_d-1, h=3, center=true);\n}\n\nmodule handle_main() {\n    color(\"black\") {\n        // Main tube\n        difference() {\n            cylinder(d=handle_d, h=40, center=true);\n            cylinder(d=handle_d-wall*2, h=42, center=true);\n        }\n        \n        // Grip section\n        translate([0,0,-15])\n            knurl(handle_d, 10);\n        \n        // Keyring loop\n        translate([0,handle_d/2,15])\n            rotate([90,0,0])\n                difference() {\n                    torus(handle_d/4, 2);\n                    translate([-handle_d/2-1,0,0])\n                        cube([handle_d+2, handle_d+2, 4], center=true);\n                }\n    }\n}\n\nmodule inner_tube() {\n    color(\"darkgray\") {\n        difference() {\n            cylinder(d=handle_d-4, h=45, center=true);\n            cylinder(d=handle_d-4-wall*2, h=47, center=true);\n        }\n        \n        // Threaded end\n        translate([0,0,20])\n            screw_thread(handle_d-4, handle_d-6, 5);\n    }\n}\n\nmodule outer_tube() {\n    color(\"silver\") {\n        difference() {\n            cylinder(d=handle_d-8, h=50, center=true);\n            cylinder(d=handle_d-8-wall*2, h=52, center=true);\n        }\n        \n        // Threaded end\n        translate([0,0,23])\n            screw_thread(handle_d-8, handle_d-10, 5);\n    }\n}\n\nmodule phillips_bit() {\n    color(\"gold\") {\n        union() {\n            cylinder(d=bit_d, h=20, center=true);\n            translate([0,0,10.5]) {\n                cube([bit_d, 1, 2], center=true);\n                cube([1, bit_d, 2], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Main handle\n        handle_main();\n        \n        // Telescoping tubes\n        translate([0,0,40])\n            inner_tube();\n            \n        translate([0,0,85])\n            outer_tube();\n            \n        // Bit holder on end\n        translate([0,0,110])\n            bit_holder();\n    }\n    \n    // Remove internal voids\n    translate([0,0,20])\n        cylinder(d=handle_d-wall*2, h=200, center=true);\n}\n\n// Phillips bit attached\ntranslate([0,0,114])\n    phillips_bit();",
    "renders": true
  },
  {
    "tool": "loupe",
    "openscad_code": "// Loupe tool - realistic style, medium complexity\n// Dimensions in mm\n\n$fn=50;\n\n// Main parameters\nlens_diameter = 40;\nlens_thickness = 3;\nhandle_length = 80;\nhandle_diameter = 18;\nframe_thickness = 4;\nhinge_diameter = 6;\n\nmodule loupe_assembly() {\n    // Main lens frame\n    color([0.2, 0.2, 0.2]) \n    difference() {\n        // Outer frame\n        cylinder(h=lens_thickness + 2, r=lens_diameter/2 + frame_thickness, center=true);\n        \n        // Lens cavity\n        cylinder(h=lens_thickness + 2.2, r=lens_diameter/2 + 0.5, center=true);\n        \n        // Handle attachment cutout\n        translate([0, lens_diameter/2 + frame_thickness/2, 0])\n        cube([handle_diameter, frame_thickness + 2, lens_thickness + 4], center=true);\n    }\n    \n    // Glass lens\n    color([0.8, 0.9, 1.0, 0.7])\n    translate([0, 0, -0.1])\n    cylinder(h=lens_thickness, r=lens_diameter/2, center=true);\n    \n    // Handle\n    color([0.1, 0.1, 0.1])\n    rotate([90, 0, 0])\n    translate([0, -handle_length/2, lens_diameter/2 + frame_thickness/2])\n    difference() {\n        // Main handle body\n        cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Grip grooves\n        for(i = [-30:10:30]) {\n            translate([0, i, 0])\n            rotate([0, 90, 0])\n            cylinder(h=handle_diameter - 2, r=1, center=true);\n        }\n    }\n    \n    // Hinge mechanism\n    color([0.3, 0.3, 0.3])\n    translate([0, lens_diameter/2 + frame_thickness/2, 0])\n    rotate([0, 90, 0])\n    cylinder(h=frame_thickness + 4, r=hinge_diameter/2, center=true);\n    \n    // Second lens frame (folding)\n    color([0.2, 0.2, 0.2])\n    translate([0, lens_diameter/2 + frame_thickness + 15, 0])\n    rotate([90, 0, 0])\n    difference() {\n        // Secondary frame\n        cylinder(h=lens_thickness + 2, r=lens_diameter/2 * 0.7 + frame_thickness, center=true);\n        \n        // Secondary lens cavity\n        cylinder(h=lens_thickness + 2.2, r=lens_diameter/2 * 0.7 + 0.5, center=true);\n    }\n    \n    // Secondary lens\n    color([0.8, 0.9, 1.0, 0.7])\n    translate([0, lens_diameter/2 + frame_thickness + 15, lens_thickness/2 + 1])\n    rotate([90, 0, 0])\n    cylinder(h=lens_thickness, r=lens_diameter/2 * 0.7, center=true);\n    \n    // Connection arm\n    color([0.15, 0.15, 0.15])\n    translate([0, lens_diameter/2 + frame_thickness/2 + 7.5, 0])\n    rotate([0, 0, 90])\n    cube([15, frame_thickness - 1, lens_thickness], center=true);\n    \n    // Knurled grip rings\n    color([0.25, 0.25, 0.25])\n    for(pos = [-25, -15, -5, 5, 15, 25]) {\n        translate([0, pos, handle_diameter/2 - 1])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=2, r=handle_diameter/2 + 0.5, center=true);\n            for(i = [0:15:360]) {\n                rotate([0, 0, i])\n                translate([handle_diameter/2 - 0.5, 0, 0])\n                cube([1, 0.5, 2.2], center=true);\n            }\n        }\n    }\n    \n    // Text/markings on handle\n    color([0.4, 0.4, 0.4])\n    translate([handle_diameter/2 + 0.1, 20, 0])\n    rotate([0, 90, 0])\n    linear_extrude(height=0.3)\n    text(\"10X\", size=5, halign=\"center\", valign=\"center\");\n}\n\nloupe_assembly();",
    "renders": true
  },
  {
    "tool": "magnifier",
    "openscad_code": "$fs = 0.5;\n$fa = 1;\n\n// Magnifying Glass - Realistic Style, Medium Complexity\n\n// Colors\ncolor_handle = \"SaddleBrown\";\ncolor_lens = \"LightSkyBlue\";\ncolor_rim = \"DimGray\";\ncolor_screw = \"Silver\";\n\n// Overall dimensions\nhandle_length = 80;\nhandle_diameter = 12;\nlens_diameter = 50;\nlens_thickness = 5;\nrim_thickness = 3;\n\n// Handle with grip texture\nmodule handle() {\n    color(color_handle) {\n        // Main handle body\n        difference() {\n            cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n            // Hollow for weight reduction\n            cylinder(h = handle_length - 4, d = handle_diameter - 4, $fn = 32);\n        }\n        \n        // Grip rings\n        for(i = [10:15:handle_length - 20]) {\n            translate([0, 0, i])\n                cylinder(h = 2, d = handle_diameter + 2, $fn = 32);\n        }\n        \n        // Top cap\n        translate([0, 0, handle_length])\n            cylinder(h = 3, d = handle_diameter + 1, $fn = 32);\n    }\n}\n\n// Lens assembly\nmodule lens_assembly() {\n    // Lens\n    color(color_lens) {\n        translate([0, 0, -lens_thickness/2])\n            cylinder(h = lens_thickness, d = lens_diameter - rim_thickness*2, $fn = 64);\n    }\n    \n    // Rim\n    color(color_rim) {\n        difference() {\n            cylinder(h = lens_thickness + 2, d = lens_diameter, $fn = 64);\n            cylinder(h = lens_thickness + 3, d = lens_diameter - rim_thickness*2, $fn = 64);\n        }\n    }\n    \n    // Mounting bracket\n    color(color_rim) {\n        translate([0, lens_diameter/2 + 2, 0])\n            cube([8, 4, lens_thickness + 2], center = true);\n    }\n}\n\n// Screw connector\nmodule screw() {\n    color(color_screw) {\n        // Threaded rod\n        cylinder(h = 10, d = 4, $fn = 16);\n        \n        // Screw head\n        translate([0, 0, 10])\n            cylinder(h = 3, d = 8, $fn = 6);\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2])\n    rotate([0, 90, 0])\n        handle();\n\ntranslate([0, 0, handle_diameter/2 + 5])\n    rotate([0, 90, 0])\n        screw();\n\ntranslate([0, 0, handle_diameter/2 + 15])\n    lens_assembly();",
    "renders": true
  },
  {
    "tool": "reticle",
    "openscad_code": "// Reticle Tool - OpenSCAD Code\n// Medium complexity realistic style\n\n// Overall dimensions\nreticle_diameter = 80;\nframe_thickness = 4;\nlens_thickness = 2;\n\n// Colors\nframe_color = \"Silver\";\nlens_color = [0.8,0.9,1,0.6];\ncrosshair_color = \"Black\";\n\n// Main frame module\nmodule reticle_frame() {\n    color(frame_color)\n    difference() {\n        // Outer ring\n        cylinder(h=frame_thickness, d=reticle_diameter, $fn=100);\n        \n        // Inner cutout for lens\n        translate([0,0,-0.1])\n            cylinder(h=frame_thickness+0.2, d=reticle_diameter-8, $fn=100);\n        \n        // Grip notches\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([reticle_diameter/2-2, -3, -0.1])\n                    cube([4,6,frame_thickness+0.2]);\n        }\n    }\n}\n\n// Lens module\nmodule lens() {\n    color(lens_color)\n    translate([0,0,frame_thickness/2-lens_thickness/2])\n        cylinder(h=lens_thickness, d=reticle_diameter-8, $fn=100);\n}\n\n// Crosshair module\nmodule crosshair(width=0.5, height=0.2) {\n    color(crosshair_color)\n    translate([0,0,frame_thickness/2+lens_thickness/2+0.1]) {\n        // Vertical line\n        cube([width, reticle_diameter-20, height], center=true);\n        \n        // Horizontal line\n        cube([reticle_diameter-20, width, height], center=true);\n        \n        // Center dot\n        cylinder(h=height+0.1, d=2, $fn=20);\n    }\n}\n\n// Range markings\nmodule range_markings() {\n    color(\"Black\")\n    translate([0,0,frame_thickness/2+lens_thickness/2+0.1]) {\n        // Horizontal marks\n        for(pos=[-30:10:30]) {\n            if(pos != 0)\n                translate([pos, 0, 0])\n                    cube([0.5, 8, 0.2], center=true);\n        }\n        \n        // Vertical marks\n        for(pos=[-30:10:30]) {\n            if(pos != 0)\n                translate([0, pos, 0])\n                    cube([8, 0.5, 0.2], center=true);\n        }\n    }\n}\n\n// Handle module\nmodule handle() {\n    color(frame_color)\n    translate([0, reticle_diameter/2+15, 0])\n        rotate([90,0,0])\n            cylinder(h=30, d=12, $fn=20);\n    \n    // Handle grip texture\n    color(\"Black\")\n    for(i=[0:4]) {\n        translate([0, reticle_diameter/2+20-i*5, 0])\n            rotate([90,0,0])\n                cylinder(h=2, d=14, $fn=20);\n    }\n}\n\n// Assembly\nunion() {\n    reticle_frame();\n    lens();\n    crosshair();\n    range_markings();\n    handle();\n}",
    "renders": true
  },
  {
    "tool": "graticule",
    "openscad_code": "// Graticule Tool - Medium Complexity Realistic Style\n// A measuring tool with crosshairs for alignment and measurement\n\n$fn = 32;  // Smooth curves\n\n// Main color scheme\ncolor_rgb = [0.2, 0.2, 0.2];  // Dark gray metal\nhandle_color = [0.1, 0.1, 0.1];  // Black handle\nmarking_color = [1, 1, 1];  // White markings\n\n// Tool dimensions (mm)\nbase_width = 80;\nbase_height = 6;\nhandle_length = 40;\nhandle_diameter = 15;\ncrosshair_thickness = 1;\ncrosshair_length = 60;\ngraticule_radius = 25;\ngraticule_thickness = 2;\n\nmodule base_plate() {\n    color(color_rgb)\n    difference() {\n        // Main base plate\n        cube([base_width, base_width, base_height], center=true);\n        \n        // Center hole for graticule\n        translate([0, 0, -1])\n        cylinder(h=base_height+2, r=graticule_radius+2, center=true);\n        \n        // Corner mounting holes\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n        translate([x * 30, y * 30, -1])\n        cylinder(h=base_height+2, r=2, center=true);\n    }\n}\n\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Main handle body\n        translate([0, -base_width/2 - handle_length/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Handle grip rings\n        for(i = [-1, 0, 1])\n        translate([0, -base_width/2 - handle_length/2 + i*10, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=5, r=handle_diameter/2 + 1, center=true);\n            cylinder(h=7, r=handle_diameter/2 - 1, center=true);\n        }\n    }\n}\n\nmodule crosshair() {\n    color(marking_color)\n    union() {\n        // Horizontal line\n        translate([0, 0, base_height/2 + 0.1])\n        cube([crosshair_length, crosshair_thickness, 0.2], center=true);\n        \n        // Vertical line\n        translate([0, 0, base_height/2 + 0.1])\n        cube([crosshair_thickness, crosshair_length, 0.2], center=true);\n        \n        // Center dot\n        translate([0, 0, base_height/2 + 0.1])\n        cylinder(h=0.2, r=2, center=true);\n    }\n}\n\nmodule graticule_circle() {\n    color(marking_color)\n    translate([0, 0, base_height/2 + 0.1])\n    difference() {\n        cylinder(h=0.2, r=graticule_radius, center=true);\n        cylinder(h=0.3, r=graticule_radius - graticule_thickness, center=true);\n    }\n}\n\nmodule measurement_marks() {\n    color(marking_color)\n    for(i = [-4:4]) {\n        if(i != 0) {\n            // Horizontal marks\n            translate([i * 10, graticule_radius * 0.8, base_height/2 + 0.1])\n            cube([0.5, 3, 0.2], center=true);\n            \n            // Vertical marks\n            translate([graticule_radius * 0.8, i * 10, base_height/2 + 0.1])\n            cube([3, 0.5, 0.2], center=true);\n        }\n    }\n}\n\nmodule level_bubble() {\n    color([0.8, 0.8, 0.8])\n    translate([base_width/2 - 10, base_width/2 - 10, base_height/2])\n    difference() {\n        sphere(r=5);\n        scale([1, 1, 0.3])\n        sphere(r=4);\n    }\n}\n\n// Assemble the tool\nbase_plate();\nhandle();\ncrosshair();\ngraticule_circle();\nmeasurement_marks();\nlevel_bubble();",
    "renders": true
  },
  {
    "tool": "dioptometer",
    "openscad_code": "// Dioptometer Tool - Medium Complexity Realistic Style\n// Approximate size: 80mm x 40mm x 25mm\n\n$fn=50;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_lens = [0.8, 0.8, 0.9];\ncolor_grip = [0.1, 0.1, 0.1];\ncolor_markings = [1, 1, 0];\n\n// Main body assembly\nmodule dioptometer_body() {\n    difference() {\n        // Main frame\n        color(color_body)\n        union() {\n            // Handle base\n            translate([0, 0, 0])\n                cube([15, 35, 20], center=true);\n            \n            // Top bridge\n            translate([0, 0, 15])\n                cube([30, 8, 10], center=true);\n            \n            // Front support\n            translate([-20, 0, 5])\n                cube([25, 6, 15], center=true);\n        }\n        \n        // Lens hole\n        translate([-20, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=6, center=true);\n    }\n}\n\n// Eyepiece assembly\nmodule eyepiece() {\n    color(color_body)\n    translate([22, 0, 15])\n    difference() {\n        // Main eyepiece tube\n        cylinder(h=15, r1=7, r2=6);\n        \n        // Inner lens cavity\n        translate([0, 0, 5])\n            cylinder(h=10, r=4.5);\n        \n        // Light path\n        translate([0, 0, -1])\n            cylinder(h=17, r=2);\n    }\n}\n\n// Lens holder mechanism\nmodule lens_holder() {\n    color(color_body)\n    translate([-20, 0, 5])\n    rotate([90, 0, 0])\n    union() {\n        // Outer ring\n        cylinder(h=3, r=8);\n        \n        // Inner lens mount\n        translate([0, 0, 1])\n            color(color_lens)\n            cylinder(h=1, r=5.8);\n        \n        // Adjustment screw\n        translate([0, 8.5, 0])\n            rotate([0, 90, 0])\n                cylinder(h=3, r=1.5);\n    }\n}\n\n// Grip pattern\nmodule grip_pattern() {\n    color(color_grip)\n    for(i = [-12:4:12]) {\n        translate([0, i, -8])\n            cube([13, 3, 2], center=true);\n    }\n}\n\n// Measurement scale\nmodule measurement_scale() {\n    color(color_markings)\n    for(i = [0:5:30]) {\n        translate([i-15, 0, 20.5])\n            cube([0.5, 8, 0.5], center=true);\n    }\n}\n\n// Thumb wheel\nmodule thumb_wheel() {\n    color(color_body)\n    translate([8, 0, 15])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=8, r=6);\n        // Knurling pattern\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([5.5, -4.5, 0])\n                    cube([1, 9, 8]);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 10])\nunion() {\n    dioptometer_body();\n    eyepiece();\n    lens_holder();\n    grip_pattern();\n    measurement_scale();\n    thumb_wheel();\n}",
    "renders": true
  },
  {
    "tool": "refractometer",
    "openscad_code": "// Refractometer Tool - Realistic Medium Complexity\n// 3D printable handheld refractometer with functional features\n\n// Color definitions\n$fn = 50;\n\n// Main body module\nmodule main_body() {\n    color(\"silver\") \n    difference() {\n        // Main body cylinder\n        cylinder(h = 60, d = 35, center = true);\n        \n        // Prism viewing window\n        translate([0, 0, 25])\n            cylinder(h = 10, d = 15, center = true);\n        \n        // Eyepiece opening\n        translate([0, 0, -25])\n            cylinder(h = 10, d = 12, center = true);\n    }\n}\n\n// Eyepiece module\nmodule eyepiece() {\n    color(\"darkgray\") \n    translate([0, 0, -35])\n    union() {\n        // Eyepiece tube\n        cylinder(h = 15, d1 = 15, d2 = 10);\n        \n        // Eyepiece lens frame\n        translate([0, 0, -5])\n            cylinder(h = 3, d = 12);\n    }\n}\n\n// Light cover module\nmodule light_cover() {\n    color(\"lightgray\") \n    translate([0, 0, 35])\n    union() {\n        // Cover plate\n        cylinder(h = 3, d = 25);\n        \n        // Hinge detail\n        translate([10, 0, 1.5])\n            cube([5, 2, 3], center = true);\n    }\n}\n\n// Prism cover module\nmodule prism_cover() {\n    color(\"transparent\") \n    translate([0, 0, 30])\n    cylinder(h = 2, d = 20);\n}\n\n// Grip texture module\nmodule grip_textures() {\n    color(\"silver\") \n    for (i = [0:35:360]) {\n        rotate([0, 0, i])\n        translate([17.5, 0, 0])\n        scale([0.1, 2, 1])\n        cube([1, 1, 50], center = true);\n    }\n}\n\n// Calibrate screw module\nmodule calibrate_screw() {\n    color(\"black\") \n    translate([18, 0, 20])\n    union() {\n        // Screw head\n        cylinder(h = 3, d = 8);\n        \n        // Screw slot\n        rotate([0, 90, 0])\n        translate([0, 0, 1.5])\n        cube([6, 1, 2], center = true);\n    }\n}\n\n// Scale markings module\nmodule scale_markings() {\n    color(\"black\") \n    for (i = [0:5:45]) {\n        rotate([0, 0, i - 22.5])\n        translate([0, 13, -20])\n        cube([0.5, i % 10 == 0 ? 3 : 1.5, 0.5], center = true);\n    }\n}\n\n// Sample plate module\nmodule sample_plate() {\n    color(\"lightgray\") \n    translate([0, 0, 32])\n    difference() {\n        cylinder(h = 1, d = 30);\n        \n        // Drain channel\n        translate([0, -12, -0.5])\n        cube([2, 10, 2], center = true);\n    }\n}\n\n// Temperature compensation dial\nmodule temp_dial() {\n    color(\"black\") \n    translate([-18, 0, 20])\n    union() {\n        // Dial body\n        cylinder(h = 2, d = 10);\n        \n        // Dial pointer\n        rotate([0, 0, 45])\n        translate([4, 0, 1])\n        cube([6, 1, 1], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_body();\n    eyepiece();\n    light_cover();\n    prism_cover();\n    \n    // Functional details\n    grip_textures();\n    calibrate_screw();\n    scale_markings();\n    sample_plate();\n    temp_dial();\n}",
    "renders": true
  },
  {
    "tool": "goniophotometer",
    "openscad_code": "// Goniophotometer Tool - Realistic Style\n// Medium complexity with 3D-printable features\n\n$fn = 32;\n\n// Main dimensions\nbase_diameter = 60;\nbase_height = 8;\narm_length = 45;\narm_thickness = 6;\ndetector_housing_size = 12;\nlight_source_diameter = 10;\nlight_source_height = 15;\n\n// Colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_arm = [0.7, 0.7, 0.7];\ncolor_detector = [0.1, 0.1, 0.8];\ncolor_light = [1, 0.9, 0.7];\ncolor_labels = [0.9, 0.1, 0.1];\n\n// Base with protractor markings\nmodule base() {\n    color(color_base) {\n        // Main base cylinder\n        cylinder(h = base_height, d = base_diameter);\n        \n        // Protractor degree markings\n        for (i = [0:5:359]) {\n            rotate([0, 0, i])\n            translate([base_diameter/2 - 4, 0, base_height - 0.5])\n            cube([3, 0.5, 1]);\n        }\n        \n        // Main degree numbers (every 30 degrees)\n        for (i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([base_diameter/2 - 8, 0, base_height - 0.5])\n            color(color_labels)\n            cube([1, 0.5, 0.8]);\n        }\n        \n        // Center pivot\n        translate([0, 0, base_height])\n        cylinder(h = 4, d = 8);\n    }\n}\n\n// Rotating arm assembly\nmodule rotating_arm() {\n    color(color_arm) {\n        // Main arm\n        translate([0, 0, base_height + 4])\n        rotate([90, 0, 0])\n        cylinder(h = arm_length, d = arm_thickness);\n        \n        // Arm support structure\n        translate([0, 0, base_height + 4])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d1 = arm_thickness, d2 = 10);\n        \n        // Detector housing at end of arm\n        translate([0, 0, base_height + 4 + arm_length - detector_housing_size/2])\n        cube([detector_housing_size, detector_housing_size, detector_housing_size], center = true);\n        \n        // Detector lens\n        translate([0, 0, base_height + 4 + arm_length - detector_housing_size/2 - 1])\n        color(color_detector)\n        sphere(d = detector_housing_size * 0.6);\n    }\n}\n\n// Light source mount\nmodule light_source_mount() {\n    color(color_arm) {\n        // Vertical post\n        translate([0, -base_diameter/2 + 10, 0])\n        cylinder(h = light_source_height, d = 6);\n        \n        // Light source holder\n        translate([0, -base_diameter/2 + 10, light_source_height])\n        rotate([90, 0, 0])\n        cylinder(h = 12, d = 8);\n        \n        // Light source (LED)\n        translate([0, -base_diameter/2 + 10 + 6, light_source_height])\n        color(color_light)\n        sphere(d = light_source_diameter);\n    }\n}\n\n// Stabilizing feet\nmodule feet() {\n    color(color_base) {\n        // Three feet for stability\n        for (angle = [0:120:240]) {\n            rotate([0, 0, angle])\n            translate([base_diameter/2 - 5, 0, -2])\n            cylinder(h = 4, d = 6);\n        }\n    }\n}\n\n// Assembly\nbase();\nrotating_arm();\nlight_source_mount();\nfeet();\n\n// Handle for rotation\ntranslate([0, 0, base_height + 4])\nrotate([0, 90, 0])\nrotate([0, 0, 45])\ncolor(color_base)\ncylinder(h = 15, d = 4);",
    "renders": true
  },
  {
    "tool": "ellipsometer",
    "openscad_code": "// OpenSCAD Ellipsometer Tool (medium-complexity, realistic style)\n\n// Parameters for overall size\n$fn = 48;\nmain_base_w = 80;\nmain_base_d = 60;\nmain_base_h = 8;\narm_len = 70;\narm_w = 12;\narm_h = 12;\nsample_stage_d = 40;\nsample_stage_h = 6;\nlens_r = 6;\nlens_h = 10;\ndetector_r = 8;\ndetector_h = 15;\n\n// Main base plate\nmodule base_plate() {\n    color(\"gray\")\n    difference() {\n        cube([main_base_w, main_base_d, main_base_h], center=true);\n        // Mounting holes\n        for (x = [-30, 30])\n            for (y = [-20, 20])\n                translate([x, y, -main_base_h/2])\n                    cylinder(h = main_base_h+2, r = 2.5, center=true);\n    }\n}\n\n// Rotating arm assembly\nmodule arm() {\n    color(\"silver\")\n    rotate([0, 0, 45]) {\n        difference() {\n            cube([arm_len, arm_w, arm_h], center=true);\n            // Light path hole\n            translate([arm_len/2 - 15, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = arm_w+2, r = 3, center=true);\n        }\n        // Pivot bearing\n        translate([0, 0, 0])\n            cylinder(h = arm_h+2, r = 8, center=true);\n    }\n}\n\n// Light source module\nmodule light_source() {\n    color(\"yellow\")\n    translate([-arm_len/2 + 5, 0, arm_h/2 + lens_h/2])\n        cylinder(h = lens_h, r = lens_r, center=true);\n}\n\n// Detector module\nmodule detector() {\n    color(\"darkgreen\")\n    translate([arm_len/2 - 5, 0, arm_h/2 + detector_h/2])\n        cylinder(h = detector_h, r = detector_r, center=true);\n}\n\n// Sample stage\nmodule sample_stage() {\n    color(\"black\")\n    translate([0, 0, -main_base_h/2 - sample_stage_h/2])\n        difference() {\n            cylinder(h = sample_stage_h, r = sample_stage_d/2, center=true);\n            // Center hole for laser alignment\n            cylinder(h = sample_stage_h+2, r = 3, center=true);\n            // Vacuum grooves\n            for (r = [15, 20]) {\n                rotate([90, 0, 0])\n                    cylinder(h = sample_stage_h, r = r, center=true);\n            }\n        }\n}\n\n// Angle scale\nmodule angle_scale() {\n    color(\"white\")\n    translate([0, 0, main_base_h/2 + 0.5])\n        difference() {\n            cylinder(h = 1, r = 35, center=true);\n            for (a = [0:15:359])\n                rotate([0, 0, a])\n                    translate([28, 0, -1])\n                        cube([5, 1, 3], center=true);\n        }\n}\n\n// Support posts\nmodule support_posts() {\n    color(\"gray\")\n    for (x = [-25, 25])\n        translate([x, 0, -main_base_h/2 - 15])\n            cylinder(h = 30, r = 4, center=true);\n}\n\n// Assembly\nunion() {\n    base_plate();\n    translate([0, 0, main_base_h/2 + arm_h/2])\n        arm();\n    light_source();\n    detector();\n    sample_stage();\n    angle_scale();\n    support_posts();\n}",
    "renders": true
  },
  {
    "tool": "interferometer",
    "openscad_code": "// Michelson Interferometer - Medium Complexity Realistic Style\n// Size: 80mm x 60mm x 70mm\n\n// Color definitions\n$fn = 30;\n\n// Main assembly\nunion() {\n    // Base platform\n    color(\"gray\") base();\n    \n    // Laser source\n    color(\"red\") laser_source();\n    \n    // Beam splitter\n    color(\"lightblue\") beam_splitter();\n    \n    // Fixed mirror\n    color(\"silver\") fixed_mirror();\n    \n    // Movable mirror with micrometer\n    color(\"silver\") movable_mirror();\n    \n    // Detector screen\n    color(\"black\") detector();\n}\n\nmodule base() {\n    // Main platform with mounting holes\n    difference() {\n        cube([80, 60, 5], center=true);\n        \n        // Mounting holes\n        for(x = [-30, 30])\n            for(y = [-20, 20])\n                translate([x, y, -2.5])\n                    cylinder(h=10, r=2, center=true);\n    }\n    \n    // Support posts\n    for(pos = [[-25, 0], [25, 0], [0, 25], [0, -25]]) {\n        translate([pos[0], pos[1], 2.5])\n            cylinder(h=15, r=3);\n    }\n}\n\nmodule laser_source() {\n    translate([-35, 0, 20]) {\n        // Laser housing\n        rotate([0, 90, 0])\n            cylinder(h=15, r=4);\n        \n        // Mounting bracket\n        translate([0, 0, -7.5])\n            cube([8, 8, 3], center=true);\n    }\n}\n\nmodule beam_splitter() {\n    translate([0, 0, 20]) {\n        rotate([0, 0, 45])\n            cube([10, 10, 2], center=true);\n        \n        // Support block\n        translate([0, 0, -6])\n            cube([12, 12, 10], center=true);\n    }\n}\n\nmodule fixed_mirror() {\n    translate([25, 0, 20]) {\n        // Mirror\n        rotate([0, 0, 0])\n            cube([12, 12, 2], center=true);\n        \n        // Adjustment screws\n        for(x = [-5, 5])\n            for(y = [-5, 5]) {\n                translate([x, y, 6])\n                    cylinder(h=3, r=1);\n            }\n        \n        // Mount\n        translate([0, 0, -5])\n            cube([15, 15, 8], center=true);\n    }\n}\n\nmodule movable_mirror() {\n    translate([-25, 0, 20]) {\n        // Mirror\n        translate([0, 0, 5])\n            cube([12, 12, 2], center=true);\n        \n        // Micrometer adjustment\n        translate([-8, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=3);\n        \n        // Micrometer knob\n        translate([-18, 0, 5])\n            cylinder(h=5, r=6);\n        \n        // Fine threads\n        for(i = [0:2:18])\n            translate([-8 - i/4, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=0.5, r=3.5);\n        \n        // Linear stage\n        translate([0, 0, -2])\n            cube([20, 15, 6], center=true);\n        \n        // Rails\n        for(y = [-6, 6])\n            translate([0, y, -4])\n                cube([25, 2, 2], center=true);\n    }\n}\n\nmodule detector() {\n    translate([0, -25, 20]) {\n        // Screen\n        cube([20, 2, 15], center=true);\n        \n        // Screen frame\n        difference() {\n            cube([22, 3, 17], center=true);\n            translate([0, -1, 0])\n                cube([18, 4, 13], center=true);\n        }\n        \n        // Mounting arm\n        translate([0, 2.5, -7.5])\n            cube([4, 4, 15], center=true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "spectroscope",
    "openscad_code": "// Realistic 3D-printable spectroscope (diffraction-grating viewer)\n// Overall length â‰ˆ 85 mm, safe for FDM printing\n\n$fn = 36;          // good balance of smooth curves & print time\nwall = 1.6;        // two 0.4 mm perimeters\nslot_w = 0.3;      // thin slit width (0.3 mm prints reliably)\ngrating_t = 0.4;   // diffraction-grating film thickness\n\n// Main body tube -------------------------------------------------\nmodule tube() {\n    difference() {\n        // outer shell\n        color(\"silver\")\n        cylinder(h = 65, d = 28, center = true);\n\n        // bore\n        translate([0, 0, -1])\n            cylinder(h = 67, d = 28 - 2*wall, center = true);\n    }\n}\n\n// Eyepiece holder ------------------------------------------------\nmodule eyepiece() {\n    color(\"black\")\n    translate([0, 0, 30])\n    difference() {\n        cylinder(h = 12, d = 28 + 2*wall, center = true);\n        cylinder(h = 13, d = 22, center = true);\n    }\n}\n\n// Entrance slit --------------------------------------------------\nmodule slit_block() {\n    color(\"dimgray\")\n    translate([0, 0, -30])\n    difference() {\n        // block\n        cube([8, 12, 6], center = true);\n\n        // slit\n        translate([0, 0, 3.1])\n            cube([slot_w, 12 + 0.2, 0.4], center = true);\n    }\n}\n\n// Diffraction-grating disk ---------------------------------------\nmodule grating_disk() {\n    color(\"darkgreen\")\n    translate([0, 0, -20])\n    difference() {\n        cylinder(h = grating_t, d = 24, center = true);\n        cylinder(h = grating_t + 0.1, d = 8, center = true);\n    }\n}\n\n// Alignment ridge (print-friendly, no overhang) ------------------\nmodule ridge() {\n    color(\"gray\")\n    for(i = [-1, 1])\n        translate([i*10, 0, 0])\n            cube([2, 28, 1.6], center = true);\n}\n\n// Assembly -------------------------------------------------------\nunion() {\n    tube();\n    eyepiece();\n    slit_block();\n    grating_disk();\n    ridge();\n}",
    "renders": true
  },
  {
    "tool": "spectrograph",
    "openscad_code": "// Spectrograph Tool - Realistic Style, Medium Complexity\n// A handheld spectrograph with diffraction grating and display screen\n\n// Color definitions\ncolor_case = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.3];\ncolor_lens = [0.7, 0.7, 0.9];\ncolor_grating = [0.8, 0.8, 0.8];\ncolor_buttons = [0.9, 0.1, 0.1];\n\n// Main body dimensions\nbody_length = 80;\nbody_width = 35;\nbody_height = 25;\nwall_thickness = 2;\n\n// Screen dimensions\nscreen_width = 30;\nscreen_height = 15;\nscreen_depth = 1;\n\n// Lens dimensions\nlens_diameter = 12;\nlens_length = 8;\n\n// Grating dimensions\ngrating_width = 20;\ngrating_height = 15;\ngrating_thickness = 1;\n\n// Button dimensions\nbutton_diameter = 4;\nbutton_height = 1;\n\n// Create the main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(color_case)\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Hollow out the inside\n        translate([0, 0, 0])\n        cube([body_length - wall_thickness*2, body_width - wall_thickness*2, body_height - wall_thickness*2], center=true);\n    }\n}\n\n// Display screen\nmodule display_screen() {\n    translate([body_length/2 - screen_depth - 5, 0, body_height/2 - screen_height/2 - 2])\n    color(color_screen)\n    cube([screen_depth, screen_width, screen_height], center=false);\n    \n    // Screen bezel\n    translate([body_length/2 - screen_depth - 6, 0, body_height/2 - screen_height/2 - 3])\n    color(color_case)\n    cube([screen_depth + 2, screen_width + 4, screen_height + 4], center=false);\n}\n\n// Optical lens assembly\nmodule lens_assembly() {\n    translate([-body_length/2 + lens_length/2 + 5, 0, 0])\n    union() {\n        // Lens tube\n        color(color_case)\n        cylinder(h=lens_length + 2, r1=lens_diameter/2 + 3, r2=lens_diameter/2 + 2, center=true);\n        \n        // Lens\n        translate([0, 0, 0])\n        color(color_lens)\n        cylinder(h=lens_length, r=lens_diameter/2, center=true);\n        \n        // Lens holder ring\n        translate([lens_length/2 + 1, 0, 0])\n        color(color_case)\n        cylinder(h=2, r=lens_diameter/2 + 3, center=true);\n    }\n}\n\n// Diffraction grating module\nmodule diffraction_grating() {\n    translate([-body_length/2 + lens_length + 15, 0, 0])\n    rotate([0, 90, 0])\n    color(color_grating)\n    cube([grating_thickness, grating_width, grating_height], center=true);\n    \n    // Grating holder\n    color(color_case)\n    translate([-body_length/2 + lens_length + 15, 0, 0])\n    difference() {\n        cube([grating_thickness + 4, grating_width + 6, grating_height + 6], center=true);\n        cube([grating_thickness + 5, grating_width + 2, grating_height + 2], center=true);\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    // Power button\n    translate([body_length/2 - 10, -body_width/2 + button_diameter/2 + 3, body_height/2 - button_height/2 - 2])\n    color(color_buttons)\n    cylinder(h=button_height, r=button_diameter/2, center=true);\n    \n    // Mode button\n    translate([body_length/2 - 10, 0, body_height/2 - button_height/2 - 2])\n    color(color_buttons)\n    cylinder(h=button_height, r=button_diameter/2, center=true);\n    \n    // Calibrate button\n    translate([body_length/2 - 10, body_width/2 - button_diameter/2 - 3, body_height/2 - button_height/2 - 2])\n    color(color_buttons)\n    cylinder(h=button_height, r=button_diameter/2, center=true);\n}\n\n// Grips on the sides\nmodule side_grips() {\n    // Left grip\n    translate([0, -body_width/2 - 1, 0])\n    color(color_case)\n    for(i = [-body_length/2 + 10 : 10 : body_length/2 - 10]) {\n        translate([i, 0, 0])\n        cube([8, 2, body_height - 4], center=true);\n    }\n    \n    // Right grip\n    translate([0, body_width/2 + 1, 0])\n    color(color_case)\n    for(i = [-body_length/2 + 10 : 10 : body_length/2 - 10]) {\n        translate([i, 0, 0])\n        cube([8, 2, body_height - 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    display_screen();\n    lens_assembly();\n    diffraction_grating();\n    control_buttons();\n    side_grips();\n}",
    "renders": true
  },
  {
    "tool": "spectrophotometer",
    "openscad_code": "// Spectrophotometer Tool - Realistic Style, Medium Complexity\n\n// Overall dimensions\nwidth = 60;\ndepth = 45;\nheight = 35;\n\n// Main body with display and keypad\nmodule body() {\n    color(\"lightgrey\")\n    difference() {\n        cube([width, depth, height]);\n        \n        // Display recess\n        translate([10, 2, height-1])\n        cube([width-20, 15, 1]);\n        \n        // Keypad recess\n        translate([10, 20, height-1])\n        cube([width-20, 10, 1]);\n        \n        // Sample compartment opening\n        translate([width-15, 5, 5])\n        cube([10, 35, 25]);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"black\")\n    translate([12, 4, height-0.5])\n    cube([width-24, 11, 0.5]);\n}\n\n// Keypad buttons\nmodule keypad() {\n    for(i = [0:4]) {\n        translate([15 + i*6, 22, height-0.5])\n        color(\"darkgrey\")\n        cylinder(h=0.5, d=4, $fn=16);\n    }\n}\n\n// Sample compartment cover\nmodule sample_cover() {\n    color(\"transparent\")\n    translate([width-15, 5, 30])\n    cube([10, 35, 0.5]);\n    \n    // Handle\n    color(\"black\")\n    translate([width-10, 25, 31])\n    rotate([90,0,0])\n    cylinder(h=8, d=3, $fn=16);\n}\n\n// Light source indicator\nmodule light_source() {\n    color(\"yellow\")\n    translate([width-10, 10, 15])\n    sphere(d=5);\n    \n    color(\"darkgrey\")\n    translate([width-10, 10, 15])\n    rotate([90,0,0])\n    cylinder(h=3, d=4, $fn=16);\n}\n\n// Detector window\nmodule detector() {\n    color(\"blue\")\n    translate([width-10, 30, 15])\n    sphere(d=5);\n    \n    color(\"darkgrey\")\n    translate([width-10, 30, 15])\n    rotate([90,0,0])\n    cylinder(h=3, d=4, $fn=16);\n}\n\n// Control knob\nmodule control_knob() {\n    color(\"black\")\n    translate([5, depth-5, 20])\n    rotate([90,0,0])\n    cylinder(h=8, d=6, $fn=16);\n    \n    // Knob indicator mark\n    color(\"white\")\n    translate([5, depth-5, 28])\n    cube([1, 2, 0.5]);\n}\n\n// Ventilation slots\nmodule vents() {\n    for(i = [0:3]) {\n        translate([width/2-15, depth-1, 5 + i*6])\n        color(\"black\")\n        cube([30, 1, 3]);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    color(\"black\")\n    translate([2, depth/2, 10])\n    cube([1, 8, 4]);\n}\n\n// Rubber feet\nmodule feet() {\n    for(x = [5, width-5]) {\n        for(y = [5, depth-5]) {\n            translate([x, y, -1])\n            color(\"black\")\n            cylinder(h=1, d=3, $fn=16);\n        }\n    }\n}\n\n// Brand label\nmodule label() {\n    color(\"blue\")\n    translate([width/2-10, 2, height-0.3])\n    cube([20, 4, 0.3]);\n}\n\n// Assembly\nunion() {\n    body();\n    display();\n    keypad();\n    sample_cover();\n    light_source();\n    detector();\n    control_knob();\n    vents();\n    usb_port();\n    feet();\n    label();\n}",
    "renders": true
  },
  {
    "tool": "tintometer",
    "openscad_code": "// Tintometer (Lovibond Comparator) - Medium complexity realistic style\n// Designed for 3D printing with 1mm wall thickness and no overhangs\n\n// Global parameters\nbase_width = 80;\nbase_depth = 40;\nbase_height = 15;\nslide_width = 70;\nslide_depth = 35;\nslide_height = 12;\nwindow_diameter = 8;\nwindow_spacing = 20;\nhandle_length = 40;\nhandle_diameter = 15;\nleg_height = 8;\nleg_diameter = 6;\n\n// Main assembly\nmodule tintometer() {\n    color(\"black\") base();\n    color(\"darkgray\") slide();\n    color(\"yellow\") windows();\n    color(\"gray\") handle();\n    color(\"black\") legs();\n}\n\n// Base with viewing windows\nmodule base() {\n    difference() {\n        // Main base block\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Viewing windows\n        for (i = [-1, 0, 1]) {\n            translate([i * window_spacing, 0, base_height/2 - 1])\n                cylinder(h=2, r=window_diameter/2, center=true);\n        }\n        \n        // Sample chamber\n        translate([0, 0, 0])\n            cube([slide_width + 4, slide_depth + 2, slide_height + 2], center=true);\n    }\n}\n\n// Sliding color filter holder\nmodule slide() {\n    translate([0, 0, (base_height + slide_height)/2 + 0.5])\n    difference() {\n        // Main slide block\n        cube([slide_width, slide_depth, slide_height], center=true);\n        \n        // Filter windows\n        for (i = [-1, 0, 1]) {\n            translate([i * window_spacing, 0, 0])\n                cylinder(h=slide_height + 1, r=window_diameter/2, center=true);\n        }\n        \n        // Finger grip\n        translate([0, slide_depth/2 - 2, 0])\n            cube([slide_width - 10, 4, 3], center=true);\n    }\n}\n\n// Color filter windows (simulated colored glass)\nmodule windows() {\n    for (i = [-1, 0, 1]) {\n        translate([i * window_spacing, 0, base_height/2 + slide_height/2 + 1])\n            cylinder(h=1, r=window_diameter/2 - 0.5, center=true);\n    }\n}\n\n// Handle for holding the device\nmodule handle() {\n    translate([base_width/2 + handle_length/2, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Grip texture\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([0, handle_length/2 - 5, handle_diameter/2 - 1])\n                cube([2, 10, 2], center=true);\n        }\n    }\n}\n\n// Support legs\nmodule legs() {\n    positions = [\n        [-base_width/2 + leg_diameter, base_depth/2 - leg_diameter, -base_height/2 - leg_height/2],\n        [base_width/2 - leg_diameter, base_depth/2 - leg_diameter, -base_height/2 - leg_height/2],\n        [-base_width/2 + leg_diameter, -base_depth/2 + leg_diameter, -base_height/2 - leg_height/2],\n        [base_width/2 - leg_diameter, -base_depth/2 + leg_diameter, -base_height/2 - leg_height/2]\n    ];\n    \n    for (pos = positions) {\n        translate(pos)\n            cylinder(h=leg_height, r=leg_diameter/2, center=true);\n    }\n}\n\n// Render the complete tintometer\ntintometer();",
    "renders": true
  },
  {
    "tool": "nephelometer",
    "openscad_code": "// Nephelometer - Medium complexity realistic style\n$fn = 50;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_light = [1, 1, 0.8];\ncolor_lens = [0.3, 0.6, 1, 0.7];\ncolor_grip = [0.1, 0.1, 0.1];\ncolor_sensor = [0.8, 0.8, 0.8];\n\n// Main body module\nmodule main_body() {\n    color(color_body)\n    union() {\n        // Central tube\n        cylinder(h = 60, d = 25);\n        \n        // Front cone\n        translate([0, 0, 30])\n        cylinder(h = 20, d1 = 25, d2 = 15);\n        \n        // Rear cone\n        translate([0, 0, -30])\n        cylinder(h = 15, d1 = 25, d2 = 20);\n    }\n}\n\n// Light source housing\nmodule light_source() {\n    color(color_light)\n    translate([12, 0, 15])\n    rotate([90, 0, 0])\n    union() {\n        cylinder(h = 12, d = 8);\n        translate([0, 0, 6])\n        sphere(d = 8);\n    }\n}\n\n// Detector housing\nmodule detector() {\n    color(color_sensor)\n    translate([-12, 0, 15])\n    rotate([90, 0, 0])\n    union() {\n        cylinder(h = 12, d = 8);\n        translate([0, 0, 6])\n        sphere(d = 8);\n        \n        // Detector window\n        translate([0, 0, -2])\n        color(color_lens)\n        cylinder(h = 2, d = 6);\n    }\n}\n\n// Sample chamber\nmodule sample_chamber() {\n    color([0.4, 0.4, 0.4, 0.3])\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = 30, d = 20);\n        translate([0, 0, -1])\n        cylinder(h = 32, d = 18);\n    }\n}\n\n// Optical windows\nmodule optical_windows() {\n    color(color_lens)\n    for (i = [0, 1]) {\n        rotate([0, 0, i * 180])\n        translate([0, 9.5, 0])\n        cylinder(h = 2, d = 8);\n    }\n}\n\n// Handle grips\nmodule handle_grips() {\n    color(color_grip)\n    for (i = [0:2]) {\n        translate([0, 0, -25 + i * 20])\n        difference() {\n            cylinder(h = 8, d = 28);\n            cylinder(h = 10, d = 24);\n        }\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    color([0.1, 0.1, 0.1])\n    translate([13, 0, -10])\n    rotate([0, 90, 0])\n    union() {\n        cube([15, 8, 3]);\n        \n        // Buttons\n        for (i = [0:2]) {\n            translate([3 + i * 4, 0, 1.5])\n            color([0.8, 0.2, 0.2])\n            cylinder(h = 1, d = 2);\n        }\n    }\n}\n\n// Display\nmodule display() {\n    color([0, 0, 0])\n    translate([13, 0, 0])\n    rotate([0, 90, 0])\n    cube([12, 6, 0.5]);\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    color(color_body)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([11, 0, 25])\n        cube([2, 15, 3]);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    light_source();\n    detector();\n    sample_chamber();\n    optical_windows();\n    handle_grips();\n    control_panel();\n    display();\n    ventilation_slots();\n}",
    "renders": true
  },
  {
    "tool": "turbidimeter",
    "openscad_code": "// Turbidimeter â€“ realistic, medium complexity\n// All measurements in millimetres\n\n$fn = 36;\n\n// Main scale factor so the whole tool fits ~70 mm\nscale_factor = 0.7;\n\nmodule turbidimeter() {\n    // Main body housing\n    color(\"LightGray\") \n    cube([40, 30, 80], center = true);\n\n    // Curved front window for sample chamber\n    translate([0, 15.5, 0])\n        rotate([90, 0, 0])\n            color(\"SkyBlue\", 0.6)\n            cylinder(h = 30, r = 20);\n\n    // Sample chamber cavity\n    translate([0, 0, 0])\n        color(\"SkyBlue\", 0.2)\n        cube([25, 25, 70], center = true);\n\n    // LED light source left side\n    translate([-20, 0, 25])\n        color(\"Yellow\", 0.8)\n        cylinder(h = 10, r = 5);\n\n    // Photodiode detector right side\n    translate([20, 0, 25])\n        color(\"Crimson\", 0.8)\n        cylinder(h = 10, r = 5);\n\n    // LCD display on top face\n    translate([0, -10, 40.5])\n        color(\"Black\")\n        cube([30, 15, 2], center = true);\n\n    // Display bezel border\n    translate([0, -10, 41.5])\n        color(\"Gray\")\n        difference() {\n            cube([32, 17, 1], center = true);\n            cube([29, 14, 2], center = true);\n        }\n\n    // Keypad buttons\n    for (x = [-12, 0, 12])\n        translate([x, 10, 41])\n            color(\"DarkSlateGray\")\n            cylinder(h = 2, r = 4);\n\n    // Battery compartment base\n    translate([0, 0, -45])\n        color(\"DimGray\")\n        cube([35, 25, 10], center = true);\n\n    // Battery door screw heads\n    for (x = [-10, 10])\n        translate([x, -8, -45])\n            color(\"Silver\")\n            cylinder(h = 1, r = 2);\n\n    // Handle grip\n    translate([0, -25, 0])\n        rotate([90, 0, 0])\n            color(\"Navy\")\n            difference() {\n                cylinder(h = 50, r = 8);\n                cylinder(h = 52, r = 5);\n            }\n\n    // Ventilation slots on rear\n    for (z = [-20, -10, 0, 10, 20])\n        translate([0, 15.5, z])\n            rotate([0, 90, 0])\n                color(\"LightGray\")\n                cube([2, 15, 1], center = true);\n\n    // Calibration mark indicator\n    translate([0, 0, 30])\n        rotate([90, 0, 0])\n            color(\"Red\")\n            cylinder(h = 1, r = 4);\n}\n\n// Apply scale and centre\ntranslate([0, 0, 0])\n    scale([scale_factor, scale_factor, scale_factor])\n        turbidimeter();",
    "renders": true
  },
  {
    "tool": "densimeter",
    "openscad_code": "// Realistic Densimeter (Hydrometer) - Medium Complexity\n// 3D printable version with proper clearances and wall thickness\n\n// Main parameters\n$fn = 32;\noverall_length = 85;\nstem_length = 40;\nbulb_length = 35;\nstem_diameter = 6;\nbulb_diameter = 18;\nwall_thickness = 1.5;\nscale_markings = 5;\n\n// Color definitions\nglass_color = [0.8, 0.9, 1.0, 0.6];\nscale_color = [0.2, 0.2, 0.2];\nweight_color = [0.4, 0.4, 0.4];\n\n// Main body module\nmodule densimeter_body() {\n    color(glass_color) {\n        difference() {\n            // Outer shell\n            union() {\n                // Stem\n                translate([0, 0, bulb_length])\n                    cylinder(h = stem_length, d = stem_diameter, center = false);\n                \n                // Bulb\n                translate([0, 0, 0])\n                    sphere(d = bulb_diameter);\n                \n                // Transition cone\n                translate([0, 0, bulb_length])\n                    cylinder(h = 5, d1 = bulb_diameter, d2 = stem_diameter, center = false);\n            }\n            \n            // Hollow interior\n            translate([0, 0, -2])\n                sphere(d = bulb_diameter - wall_thickness*2);\n            \n            translate([0, 0, bulb_length])\n                cylinder(h = stem_length + 5, d = stem_diameter - wall_thickness*2, center = false);\n        }\n    }\n}\n\n// Scale markings on stem\nmodule scale_markings() {\n    color(scale_color) {\n        for(i = [0:scale_markings-1]) {\n            // Main markings\n            translate([0, stem_diameter/2 + 0.2, bulb_length + stem_length*i/(scale_markings-1)])\n                cube([0.5, 0.2, 1], center = true);\n            \n            // Number indicators\n            translate([0, stem_diameter/2 + 0.8, bulb_length + stem_length*i/(scale_markings-1)])\n                cube([2, 0.2, 0.2], center = true);\n        }\n        \n        // 1.000 reference line\n        translate([0, stem_diameter/2 + 0.2, bulb_length + stem_length*0.4])\n            cube([1.2, 0.3, 1.5], center = true);\n    }\n}\n\n// Weight at bottom\nmodule bottom_weight() {\n    color(weight_color) {\n        difference() {\n            // Main weight\n            translate([0, 0, -bulb_length/2 - 3])\n                sphere(d = bulb_diameter - 2);\n            \n            // Hollow section\n            translate([0, 0, -bulb_length/2 - 3])\n                sphere(d = bulb_diameter - 6);\n        }\n        \n        // Weight retaining ring\n        translate([0, 0, -2])\n            cylinder(h = 2, d = bulb_diameter + 2, d1 = bulb_diameter + 2, d2 = bulb_diameter, center = false);\n    }\n}\n\n// Top loop/handle\nmodule top_handle() {\n    color(glass_color) {\n        // Handle ring\n        translate([0, 0, bulb_length + stem_length + 3])\n            rotate([90, 0, 0])\n                torus(stem_diameter/3, stem_diameter/2);\n    }\n}\n\n// Helper module for torus (handle ring)\nmodule torus(r, tube_r) {\n    rotate_extrude()\n        translate([r, 0, 0])\n            circle(tube_r);\n}\n\n// Assembly\ndensimeter_body();\nscale_markings();\nbottom_weight();\ntop_handle();",
    "renders": true
  },
  {
    "tool": "hydrometer",
    "openscad_code": "// Hydrometer for measuring specific gravity of liquids\n// Overall height: 80mm, designed for 3D printing without supports\n\n$fn = 50;\n\n// Main colors\ncolor_body = \"lightgray\";\ncolor_bulb = \"silver\";\ncolor_markings = \"black\";\ncolor_scale = \"white\";\n\n// Scale module for printing markings\nmodule marking(tick_len, height) {\n    translate([0, 0, height])\n        color(color_markings)\n        cube([0.2, tick_len, 0.5], center=true);\n}\n\n// Weight bulb at bottom\nmodule weight_bulb() {\n    color(color_body)\n    difference() {\n        sphere(d=18);\n        // Remove top for hollow design\n        translate([0, 0, 8])\n            cube(20, center=true);\n    }\n}\n\n// Stem with measurement markings\nmodule stem() {\n    union() {\n        // Main stem cylinder\n        color(color_body)\n        cylinder(h=60, d1=5, d2=5);\n        \n        // Measurement scale markings\n        for (i=[-20:5:20]) {\n            translate([0, 2.5, 30+i])\n                marking(2, 0);\n        }\n        \n        // Scale band\n        color(color_scale)\n        translate([0, 0, 30])\n            cylinder(h=2, d=6.5);\n    }\n}\n\n// Top handle\nmodule handle() {\n    color(color_body)\n    union() {\n        // Main handle\n        cylinder(h=8, d1=5, d2=8);\n        \n        // Grip rings\n        for (i=[0:2:6]) {\n            translate([0, 0, i])\n                cylinder(h=1.5, d=8.5);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 9])\n    weight_bulb();\n\ntranslate([0, 0, 18])\n    stem();\n\ntranslate([0, 0, 78])\n    handle();",
    "renders": true
  },
  {
    "tool": "lactometer",
    "openscad_code": "// Lactometer (Milk Hydrometer) - Medium Complexity Realistic Design\n// This lactometer includes a weighted bulb, graduated stem, and calibration marks\n\n$fn = 100;\n\n// Overall dimensions\nstem_length = 80;\nstem_diameter = 8;\nbulb_length = 35;\nbulb_diameter = 18;\nweight_cavity = 12;\nscale_markings = 15;\n\n// Colors\ncolor_milk = [0.95, 0.95, 0.9];\ncolor_glass = [0.8, 0.9, 1, 0.6];\ncolor_marks = [0.1, 0.1, 0.1];\ncolor_weight = [0.5, 0.5, 0.5];\n\nmodule main_body() {\n    // Glass bulb with weighted bottom\n    difference() {\n        // Main bulb\n        color(color_glass)\n        union() {\n            // Spherical bulb\n            translate([0, 0, bulb_length/2])\n            sphere(d=bulb_diameter);\n            \n            // Cylindrical neck transition\n            translate([0, 0, bulb_length])\n            cylinder(d1=bulb_diameter, d2=stem_diameter, h=5);\n        }\n        \n        // Hollow interior\n        translate([0, 0, -5])\n        sphere(d=bulb_diameter-2);\n        \n        // Weight cavity\n        translate([0, 0, bulb_length/4])\n        cylinder(d=weight_cavity, h=weight_cavity/2);\n    }\n    \n    // Stem\n    color(color_glass)\n    translate([0, 0, bulb_length+5])\n    cylinder(d=stem_diameter, h=stem_length);\n}\n\nmodule calibration_marks() {\n    // Graduation marks on stem\n    for(i=[0:scale_markings-1]) {\n        height = (i * (stem_length-10) / scale_markings) + bulb_length + 10;\n        mark_length = (i % 5 == 0) ? 6 : 3;\n        mark_width = (i % 5 == 0) ? 1.5 : 1;\n        \n        color(color_marks)\n        translate([stem_diameter/2 + mark_length/2, 0, height])\n        cube([mark_length, mark_width, 0.5], center=true);\n        \n        // Numbers every 5th mark\n        if(i % 5 == 0 && i > 0) {\n            translate([stem_diameter/2 + 10, 0, height-2])\n            linear_extrude(0.5)\n            text(str(i*5), size=3, halign=\"center\", valign=\"center\");\n        }\n    }\n}\n\nmodule weight_ballast() {\n    // Lead weight in bulb base\n    color(color_weight)\n    translate([0, 0, bulb_length/4])\n    cylinder(d=weight_cavity-1, h=weight_cavity/2-1);\n}\n\nmodule top_cap() {\n    // Protective top cap\n    color(color_marks)\n    translate([0, 0, bulb_length+stem_length+5])\n    cylinder(d=stem_diameter+2, h=3);\n    \n    // Hanging loop\n    translate([0, 0, bulb_length+stem_length+8])\n    rotate([90, 0, 0])\n    difference() {\n        torus(stem_diameter/2+3, 1.5);\n        translate([0, 0, -1.6])\n        cube([20, 3, 3], center=true);\n    }\n}\n\n// Helper module for torus\nmodule torus(r, thickness) {\n    rotate_extrude()\n    translate([r, 0])\n    circle(thickness);\n}\n\n// Assembly\nunion() {\n    main_body();\n    weight_ballast();\n    calibration_marks();\n    top_cap();\n}",
    "renders": true
  },
  {
    "tool": "alcoholmeter",
    "openscad_code": "// Alcoholmeter - Realistic Style, Medium Complexity\n// A hydrometer for measuring alcohol content in spirits\n\n// Parameters\n$fn = 60;\nscale_length = 70;\nscale_diameter = 8;\nbulb_diameter = 22;\nbulb_length = 35;\nstem_length = 20;\nstem_diameter = 6;\nweight_length = 15;\nweight_diameter = 18;\nweight_wall = 2;\n\n// Main module\ndifference() {\n    // Main body assembly\n    union() {\n        // Glass bulb\n        color([0.9, 0.95, 1, 0.7]) {\n            // Main bulb\n            translate([0, 0, (scale_length + stem_length) * 0.5]) {\n                cylinder(h = bulb_length, d1 = bulb_diameter, d2 = bulb_diameter * 0.9);\n            }\n            // Rounded bottom\n            translate([0, 0, (scale_length + stem_length) * 0.5 - bulb_length * 0.5]) {\n                sphere(d = bulb_diameter);\n            }\n            // Transition to stem\n            translate([0, 0, (scale_length + stem_length) * 0.5 + bulb_length * 0.5]) {\n                cylinder(h = stem_length, d1 = bulb_diameter * 0.9, d2 = stem_diameter);\n            }\n        }\n        \n        // Scale tube (upper part)\n        color([0.9, 0.95, 1, 0.7]) {\n            translate([0, 0, stem_length + (scale_length + stem_length) * 0.5 + bulb_length * 0.5]) {\n                cylinder(h = scale_length, d = scale_diameter);\n            }\n        }\n        \n        // Weight chamber (bottom)\n        color([0.7, 0.7, 0.7]) {\n            translate([0, 0, (scale_length + stem_length) * 0.5 - bulb_length * 0.5 - weight_length * 0.5]) {\n                difference() {\n                    cylinder(h = weight_length, d = weight_diameter);\n                    cylinder(h = weight_length + 2, d = weight_diameter - weight_wall * 2);\n                }\n            }\n        }\n        \n        // Measurement scale markings (0-100%)\n        for(i = [0:10:100]) {\n            color([0, 0, 0]) {\n                translate([scale_diameter * 0.5 + 0.1, 0, \n                    stem_length + (scale_length + stem_length) * 0.5 + bulb_length * 0.5 + scale_length * (i/100)]) {\n                    cube([1, 0.2, 0.5]);\n                }\n                if(i % 20 == 0) {\n                    translate([scale_diameter * 0.5 + 1.5, 0, \n                        stem_length + (scale_length + stem_length) * 0.5 + bulb_length * 0.5 + scale_length * (i/100)]) {\n                        cube([2, 0.2, 1]);\n                    }\n                }\n            }\n        }\n        \n        // Paper scale insert\n        color([1, 1, 0.9]) {\n            translate([0, 0, stem_length + (scale_length + stem_length) * 0.5 + bulb_length * 0.5 + scale_length * 0.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = scale_length - 2, d = scale_diameter - 1.5);\n                }\n            }\n        }\n    }\n    \n    // Hollow out the glass parts\n    color([0.9, 0.95, 1, 0.7]) {\n        // Main bulb hollow\n        translate([0, 0, (scale_length + stem_length) * 0.5]) {\n            cylinder(h = bulb_length + 5, d = bulb_diameter - 2);\n        }\n        translate([0, 0, (scale_length + stem_length) * 0.5 - bulb_length * 0.5 - 2]) {\n            sphere(d = bulb_diameter - 2);\n        }\n        \n        // Stem hollow\n        translate([0, 0, (scale_length + stem_length) * 0.5 + bulb_length * 0.5 + stem_length * 0.5]) {\n            cylinder(h = stem_length + 5, d = stem_diameter - 1.5);\n        }\n        \n        // Scale tube hollow\n        translate([0, 0, stem_length + (scale_length + stem_length) * 0.5 + bulb_length * 0.5 + scale_length * 0.5]) {\n            cylinder(h = scale_length + 2, d = scale_diameter - 2);\n        }\n    }\n}\n\n// Reinforcement ring at bulb-stem junction\ncolor([0.8, 0.8, 0.8]) {\n    translate([0, 0, (scale_length + stem_length) * 0.5 + bulb_length * 0.5]) {\n        cylinder(h = 2, d = bulb_diameter * 1.1, center = true);\n    }\n}\n\n// Top safety cap\ncolor([0.9, 0.9, 0.9]) {\n    translate([0, 0, stem_length + (scale_length + stem_length) * 0.5 + bulb_length * 0.5 + scale_length + 1]) {\n        cylinder(h = 3, d = scale_diameter + 1, center = true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "saccharimeter",
    "openscad_code": "// Saccharimeter - Polarimeter for measuring sugar concentration\n// Medium complexity realistic model with functional details\n\n// Main parameters\nbase_width = 35;\nbase_length = 60;\nbase_height = 8;\ntube_length = 80;\ntube_diameter = 12;\nscale_length = 70;\nscale_height = 15;\nscale_thickness = 3;\n\n// Base with rounded corners\nmodule base() {\n    color([0.2, 0.2, 0.2])\n    difference() {\n        union() {\n            // Main base block\n            translate([0, 0, base_height/2])\n                cube([base_width, base_length, base_height], center=true);\n            \n            // Rounded front edge\n            translate([0, base_length/2 - 4, base_height/2])\n                cylinder(h=base_height, r=4, center=true);\n        }\n        \n        // Cutout for tube\n        translate([0, 0, base_height])\n            cube([tube_diameter + 6, tube_length + 10, base_height*2], center=true);\n    }\n}\n\n// Sample tube holder\nmodule tube_holder() {\n    color([0.3, 0.3, 0.3])\n    union() {\n        // Left support\n        translate([-base_width/2 + 8, 0, base_height + tube_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=4, center=true);\n        \n        // Right support\n        translate([base_width/2 - 8, 0, base_height + tube_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=4, center=true);\n        \n        // Support arms\n        translate([-base_width/2 + 8, 0, base_height + tube_diameter/2])\n            cube([8, tube_length/2 - 15, tube_diameter], center=true);\n        translate([base_width/2 - 8, 0, base_height + tube_diameter/2])\n            cube([8, tube_length/2 - 15, tube_diameter], center=true);\n    }\n}\n\n// Sample tube with caps\nmodule sample_tube() {\n    color([0.9, 0.9, 0.9])\n    union() {\n        // Main tube\n        translate([0, 0, base_height + tube_diameter/2])\n            rotate([90, 0, 0])\n                cylinder(h=tube_length, r=tube_diameter/2 - 1, center=true);\n        \n        // End caps\n        translate([0, tube_length/2, base_height + tube_diameter/2])\n            cylinder(h=4, r=tube_diameter/2 + 1, center=false);\n        translate([0, -tube_length/2 - 4, base_height + tube_diameter/2])\n            cylinder(h=4, r=tube_diameter/2 + 1, center=false);\n    }\n}\n\n// Eyepiece assembly\nmodule eyepiece() {\n    color([0.1, 0.1, 0.1])\n    union() {\n        // Main eyepiece tube\n        translate([0, base_length/2 - 15, base_height + tube_diameter + 8])\n            rotate([0, 90, 0])\n                cylinder(h=20, r=6, center=true);\n        \n        // Eyepiece lens housing\n        translate([0, base_length/2 - 15, base_height + tube_diameter + 8])\n            rotate([0, 90, 0])\n                cylinder(h=8, r=8, center=true);\n        \n        // Adjustment ring\n        translate([0, base_length/2 - 15, base_height + tube_diameter + 8])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h=4, r=7, center=true);\n                cylinder(h=5, r=5.5, center=true);\n            }\n    }\n}\n\n// Polarizer adjustment wheel\nmodule polarizer_wheel() {\n    color([0.3, 0.3, 0.3])\n    difference() {\n        // Wheel body\n        translate([0, -base_length/2 + 15, base_height + tube_diameter/2 + 5])\n            cylinder(h=6, r=10, center=true);\n        \n        // Knurling grooves\n        for(i=[0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([0, -base_length/2 + 15, base_height + tube_diameter/2 + 2])\n                    cube([1, 10, 10], center=true);\n        }\n        \n        // Center hole\n        translate([0, -base_length/2 + 15, base_height + tube_diameter/2 + 5])\n            cylinder(h=8, r=3, center=true);\n    }\n}\n\n// Scale with markings\nmodule scale() {\n    color([0.8, 0.8, 0.8])\n    union() {\n        // Main scale plate\n        translate([0, 0, base_height + tube_diameter + 12])\n            cube([scale_length, scale_thickness, scale_height], center=true);\n        \n        // Scale markings\n        color([0, 0, 0])\n        for(i=[-35:5:35]) {\n            translate([i, 0, base_height + tube_diameter + 12 + scale_height/2 - 1])\n                cube([0.5, scale_thickness + 0.5, 6], center=true);\n        }\n        \n        // Zero mark\n        translate([0, 0, base_height + tube_diameter + 12 + scale_height/2 - 1])\n            cube([1, scale_thickness + 1, 8], center=true);\n    }\n}\n\n// Light source\nmodule light_source() {\n    color([0.9, 0.9, 0.1])\n    translate([0, -base_length/2 + 5, base_height + tube_diameter/2])\n        cube([8, 8, 6], center=true);\n}\n\n// Leveling screws\nmodule leveling_screws() {\n    color([0.4, 0.4, 0.4])\n    union() {\n        // Front screws\n        translate([-base_width/2 + 5, base_length/2 - 5, 0])\n            cylinder(h=base_height + 2, r=2, center=false);\n        translate([base_width/2 - 5, base_length/2 - 5, 0])\n            cylinder(h=base_height + 2, r=2, center=false);\n        \n        // Rear screws\n        translate([-base_width/2 + 5, -base_length/2 + 5, 0])\n            cylinder(h=base_height + 2, r=2, center=false);\n        translate([base_width/2 - 5, -base_length/2 + 5, 0])\n            cylinder(h=base_height + 2, r=2, center=false);\n    }\n}\n\n// Assembly\nbase();\ntube_holder();\nsample_tube();\neyepiece();\npolarizer_wheel();\nscale();\nlight_source();\nleveling_screws();",
    "renders": true
  },
  {
    "tool": "salinometer",
    "openscad_code": "// Salinometer - Medium complexity realistic style\n// A hydrometer-style tool for measuring salt concentration in water\n\n$fn = 32;\n\n// Main dimensions\nbody_length = 80;\nbody_diameter = 12;\nbulb_diameter = 18;\nstem_length = 50;\nscale_length = 30;\n\n// Colors\nglass_color = [0.9, 0.95, 1, 0.7];\nscale_color = [0.2, 0.2, 0.2];\nweight_color = [0.4, 0.4, 0.4];\n\n// Main body - glass tube with bulb at bottom\nmodule salinometer_body() {\n    color(glass_color) {\n        // Main cylindrical tube\n        cylinder(h=body_length, d=body_diameter, center=false);\n        \n        // Weight bulb at bottom\n        translate([0, 0, -bulb_diameter/2])\n            sphere(d=bulb_diameter);\n        \n        // Thin stem at top for reading\n        translate([0, 0, body_length])\n            cylinder(h=stem_length, d=body_diameter-4, center=false);\n    }\n}\n\n// Internal weight for proper buoyancy\nmodule internal_weight() {\n    color(weight_color) {\n        // Lead shot chamber in bulb\n        translate([0, 0, -bulb_diameter/3])\n            sphere(d=bulb_diameter-2);\n        \n        // Additional weight cylinder\n        translate([0, 0, 0])\n            cylinder(h=10, d=body_diameter-2, center=false);\n    }\n}\n\n// Scale markings for salinity reading\nmodule scale_markings() {\n    color(scale_color) {\n        // Main scale line\n        translate([body_diameter/2 + 1, 0, body_length/2])\n            cube([0.5, 0.5, scale_length], center=true);\n        \n        // Individual graduations\n        for (i = [0:4]) {\n            translate([body_diameter/2 + 1, 0, body_length/2 + i*6])\n                cube([2, 0.5, 0.5], center=true);\n            \n            translate([body_diameter/2 + 1, 0, body_length/2 + i*6 + 3])\n                cube([1.5, 0.3, 0.3], center=true);\n        }\n        \n        // Salinity labels (0-25%)\n        for (i = [0:4]) {\n            translate([body_diameter/2 + 3.5, 0, body_length/2 + i*6])\n                rotate([0, 90, 0])\n                    cylinder(h=0.5, d=0.5, center=true);\n        }\n    }\n}\n\n// Reading line indicator\nmodule reading_line() {\n    color([1, 0, 0, 0.8]) {\n        translate([0, 0, body_length/2 + 12])\n            rotate([90, 0, 0])\n                cylinder(h=body_diameter+2, d=0.5, center=true);\n    }\n}\n\n// Support stand for storage\nmodule storage_stand() {\n    color([0.3, 0.3, 0.3]) {\n        // Base\n        translate([0, 0, -bulb_diameter/2 - 5])\n            cylinder(h=5, d=25, center=false);\n        \n        // Support arms\n        for (a = [0:120:240]) {\n            rotate([0, 0, a])\n                translate([10, 0, -2.5])\n                    cube([20, 3, 5], center=true);\n        }\n        \n        // Center hole\n        translate([0, 0, -bulb_diameter/2 - 5])\n            cylinder(h=10, d=body_diameter+4, center=false);\n    }\n}\n\n// Assembly\n// Main salinometer\nunion() {\n    salinometer_body();\n    \n    // Internal weights (not visible but affects buoyancy)\n    %internal_weight();\n    \n    // Scale markings on side\n    scale_markings();\n    \n    // Reading line\n    reading_line();\n}\n\n// Optional storage stand\ntranslate([40, 0, 0])\n    storage_stand();",
    "renders": true
  },
  {
    "tool": "polarimeter",
    "openscad_code": "// Polarimeter Tool - Realistic Style, Medium Complexity\n// Features: Sample chamber, rotating analyzer, graduated scale, light source\n\n$fn = 50;\nwall_thickness = 2;\nbody_color = [0.8, 0.8, 0.8];\nanalyzer_color = [0.2, 0.2, 0.8];\nscale_color = [0.1, 0.1, 0.1];\nlight_color = [1, 1, 0.5];\n\nmodule polarimeter() {\n    // Base cylinder for the main body\n    color(body_color) {\n        difference() {\n            cylinder(h = 80, r = 25, center = true);\n            cylinder(h = 82, r = 23, center = true);\n        }\n    }\n    \n    // Light source at bottom\n    translate([0, 0, -40]) {\n        color(light_color) {\n            sphere(r = 8);\n            translate([0, 0, 2]) {\n                cylinder(h = 5, r = 6);\n            }\n        }\n    }\n    \n    // Sample tube holder\n    translate([0, 0, 0]) {\n        color(body_color) {\n            difference() {\n                cylinder(h = 40, r = 15);\n                cylinder(h = 42, r = 13);\n            }\n        }\n        \n        // Sample tube (glass)\n        color([0.9, 0.9, 1, 0.5]) {\n            cylinder(h = 38, r = 12);\n        }\n    }\n    \n    // Rotating analyzer assembly\n    module analyzer() {\n        rotate([0, 0, $t * 360]) {\n            // Analyzer disk\n            color(analyzer_color) {\n                difference() {\n                    cylinder(h = 3, r = 20);\n                    cylinder(h = 4, r = 18);\n                }\n            }\n            \n            // Polarizing filter lines\n            for (i = [0:5]) {\n                rotate([0, 0, i * 30]) {\n                    translate([-20, -0.5, 0]) {\n                        cube([40, 1, 3]);\n                    }\n                }\n            }\n            \n            // Handle for rotation\n            translate([15, 0, 1.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 8, r = 2);\n                }\n            }\n        }\n    }\n    \n    translate([0, 0, 30]) {\n        analyzer();\n    }\n    \n    // Graduated scale\n    translate([0, 0, 31.5]) {\n        color(scale_color) {\n            difference() {\n                cylinder(h = 1, r = 22);\n                for (i = [0:359]) {\n                    if (i % 10 == 0) {\n                        rotate([0, 0, i]) {\n                            translate([20, -0.5, 0]) {\n                                cube([2, 1, 1]);\n                            }\n                        }\n                    } else if (i % 5 == 0) {\n                        rotate([0, 0, i]) {\n                            translate([20.5, -0.25, 0]) {\n                                cube([1, 0.5, 1]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyepiece\n    translate([0, 0, 40]) {\n        color(body_color) {\n            difference() {\n                cylinder(h = 15, r = 12);\n                cylinder(h = 16, r = 10);\n            }\n        }\n        \n        // Eyepiece lens\n        color([0.8, 0.8, 1, 0.7]) {\n            translate([0, 0, 7.5]) {\n                sphere(r = 10);\n            }\n        }\n    }\n    \n    // Support feet\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 20, -40]) {\n                color(body_color) {\n                    cylinder(h = 5, r = 3);\n                }\n            }\n        }\n    }\n}\n\n// Render the polarimeter\npolarimeter();",
    "renders": true
  },
  {
    "tool": "brixmeter",
    "openscad_code": "// Brixmeter (Refractometer) - Medium Complexity\n// Realistic style with printable features\n\n// Color definitions\n$fn=50;\n\nmodule brixmeter_body() {\n    // Main body cylinder - slightly tapered\n    difference() {\n        // Outer shell\n        cylinder(h=35, r1=12, r2=10);\n        \n        // Internal cavity for optics\n        translate([0,0,5])\n            cylinder(h=25, r1=9, r2=7);\n    }\n}\n\nmodule eyepiece() {\n    // Eyepiece with rubber grip\n    color(\"black\")\n    difference() {\n        // Main eyepiece tube\n        translate([0,0,35])\n            cylinder(h=15, r=6);\n        \n        // Viewing hole\n        translate([0,0,35])\n            cylinder(h=15, r=3);\n    }\n    \n    // Rubber grip rings\n    for(i=[0:1]) {\n        color(\"darkgray\")\n        translate([0,0,37+i*6])\n            rotate_extrude()\n                translate([6,0,0])\n                    circle(r=0.5);\n    }\n}\n\nmodule prism_compartment() {\n    // Sample prism housing at bottom\n    color(\"gray\")\n    difference() {\n        // Rectangular housing\n        translate([0,0,-5])\n            cube([18,18,5], center=true);\n        \n        // Prism cavity\n        translate([0,0,-2.5])\n            cube([14,14,6], center=true);\n        \n        // Sample window\n        translate([0,0,-5.1])\n            cube([10,10,1], center=true);\n    }\n    \n    // Hinged cover\n    color(\"silver\")\n    translate([9,0,-5])\n        rotate([0,0,90])\n            cube([12,1.5,8]);\n}\n\nmodule focus_knob() {\n    // Focusing adjustment ring\n    color(\"darkgray\")\n    rotate([90,0,0])\n        translate([0,-12,15])\n            difference() {\n                // Main ring\n                cylinder(h=5, r=4);\n                \n                // Knurling cuts\n                for(i=[0:11]) {\n                    rotate([0,0,i*30])\n                        translate([-0.5,-4.5,0])\n                            cube([1,5,5]);\n                }\n            }\n}\n\nmodule calibration_screw() {\n    // Calibration adjustment screw\n    color(\"silver\")\n    translate([10,0,25])\n        rotate([90,0,0])\n            cylinder(h=3, r=2);\n    \n    // Screw head slot\n    color(\"black\")\n    translate([10,0,25])\n        rotate([0,90,0])\n            cube([3,0.5,1.5], center=true);\n}\n\nmodule measurement_scale() {\n    // Brix scale markings\n    color(\"black\")\n    for(i=[0:20]) {\n        translate([0,10.1,30-i*1.2])\n            rotate([90,0,0])\n                linear_extrude(0.1)\n                    text(str(i), size=1, halign=\"center\");\n    }\n}\n\nmodule grip_texture() {\n    // Anti-slip texture on body\n    color(\"darkgray\")\n    for(i=[0:7]) {\n        rotate([0,0,i*45])\n            translate([11,0,15])\n                rotate([90,0,0])\n                    cylinder(h=20, r=0.5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body in silver\n    color(\"silver\") brixmeter_body();\n    \n    // All components\n    eyepiece();\n    prism_compartment();\n    focus_knob();\n    calibration_screw();\n    measurement_scale();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "tool": "pycnometer",
    "openscad_code": "// Realistic Pycnometer (density bottle) \n// Medium complexity, 3D-printable, ~70 mm tall\n\n// Overall scale factor\nscale_factor = 1;\n\n// Colors\nglass_color = [0.8, 0.9, 1.0, 0.4];\ncap_color   = [0.2, 0.2, 0.2, 1.0];\nmetal_color = [0.5, 0.5, 0.5, 1.0];\nlabel_color = [0.0, 0.0, 0.0, 0.6];\n\n// Main dimensions\nbody_h  = 55 * scale_factor;\nbody_r  = 15 * scale_factor;\nneck_h  = 12 * scale_factor;\nneck_r  = 6 * scale_factor;\ncap_h   = 15 * scale_factor;\ncap_r   = 8 * scale_factor;\n\n// Wall thickness for 3D printing\nwall = 2 * scale_factor;\n\nmodule body() {\n    // Hollow glass bulb\n    difference() {\n        color(glass_color) cylinder(h = body_h, r = body_r, center = true);\n        translate([0, 0, -wall/2])\n            cylinder(h = body_h + wall, r = body_r - wall, center = true);\n    }\n}\n\nmodule neck() {\n    // Cylindrical neck with small opening\n    difference() {\n        color(glass_color) cylinder(h = neck_h, r = neck_r, center = true);\n        translate([0, 0, -wall/2])\n            cylinder(h = neck_h + wall, r = neck_r - wall, center = true);\n    }\n}\n\nmodule cap() {\n    // Screw cap with knurled grip\n    difference() {\n        color(cap_color) cylinder(h = cap_h, r = cap_r, center = true);\n        translate([0, 0, -wall/2])\n            cylinder(h = cap_h + wall, r = cap_r - wall, center = true);\n    }\n    \n    // Knurled texture around cap\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([cap_r - 1.5, 0, 0])\n                difference() {\n                    color(cap_color) cube([1.5, 1, cap_h - 2], center = true);\n                    translate([0, 0, -1])\n                        cube([1.5, 1.2, cap_h], center = true);\n                }\n    }\n}\n\nmodule stopper() {\n    // Glass stopper with capillary tube\n    difference() {\n        color(glass_color) cylinder(h = neck_h - 2, r = neck_r - 0.5, center = true);\n        // Capillary bore\n        cylinder(h = neck_h - 1, r = 1.5, center = true);\n    }\n}\n\nmodule labeling() {\n    // Raised volume marking\n    translate([0, body_r + 0.5, 0])\n        rotate([90, 0, 0])\n            color(label_color) linear_extrude(height = 0.5)\n                text(\"25 mL\", size = 4, halign = \"center\");\n}\n\n// Assembly\ntranslate([0, 0, body_h/2 + neck_h/2])\n    union() {\n        body();\n        translate([0, 0, body_h/2 + neck_h/2])\n            neck();\n        translate([0, 0, body_h/2 + neck_h + cap_h/2])\n            cap();\n        translate([0, 0, body_h/2 + neck_h/2])\n            stopper();\n        labeling();\n    }",
    "renders": true
  },
  {
    "tool": "areometer",
    "openscad_code": "// Areometer (Hydrometer) - Realistic Style, Medium Complexity\n// 3D printable hydrometer for measuring liquid density\n\n// Parameters\n$fn = 36;  // Smoothness\nwall = 1.5;  // Wall thickness for 3D printing\nscale_min = 1.0;\nscale_max = 1.2;\n\n// Colors\ncolor_body = \"White\";\ncolor_scale = \"Black\";\ncolor_bulb = \"Crimson\";\n\n// Main module\nmodule areometer() {\n    // Base bulb for buoyancy\n    color(color_bulb) translate([0, 0, 8]) \n        difference() {\n            sphere(d = 22);\n            cylinder(h = 12, d1 = 22, d2 = 18);  // Flatten bottom\n        }\n    \n    // Main stem tube\n    color(color_body) translate([0, 0, 22])\n        difference() {\n            cylinder(h = 60, d = 8);\n            translate([0, 0, -1]) cylinder(h = 62, d = 8 - 2*wall);\n        }\n    \n    // Top weight chamber\n    color(color_body) translate([0, 0, 82])\n        difference() {\n            sphere(d = 12);\n            sphere(d = 12 - 2*wall);\n        }\n    \n    // Scale markings module\n    module scale_mark(pos, length, width, height) {\n        translate([0, 0, pos])\n            cube([width, length, height], center = true);\n    }\n    \n    // Generate scale markings\n    color(color_scale) {\n        for (i = [0:10]) {\n            pos = 25 + i * 5;\n            // Long marks every 2nd position\n            mark_length = (i % 2 == 0) ? 3 : 1.5;\n            mark_width = (i % 2 == 0) ? 0.8 : 0.5;\n            scale_mark(pos, mark_length, mark_width, 0.2);\n            \n            // Numbers on long marks\n            if (i % 2 == 0) {\n                translate([4, 0, pos - 1])\n                    rotate([0, 90, 0])\n                    linear_extrude(0.5)\n                    text(str(scale_min + i * 0.02), size = 2, halign = \"left\");\n            }\n        }\n    }\n    \n    // Reference line\n    color(\"Blue\") translate([0, -4.5, 0])\n        cube([0.5, 9, 100], center = true);\n}\n\n// Add support ring for 3D printing\ncolor(\"Gray\") translate([0, 0, -1])\n    difference() {\n        cylinder(h = 2, d = 30);\n        cylinder(h = 2.5, d = 20);\n    }\n\n// Render the complete areometer\nareometer();",
    "renders": true
  },
  {
    "tool": "spirometer",
    "openscad_code": "// Spirometer - Medium Complexity Realistic Style\n// Dimensions in mm, designed for 3D printing\n\n// Color definitions\ncolor_body = [0.9, 0.9, 0.9];  // Light gray plastic\ncolor_tube = [0.8, 0.8, 1];    // Light blue translucent\ncolor_grip = [0.2, 0.2, 0.2];  // Black rubber\ncolor_markings = [0.1, 0.1, 0.1]; // Dark gray\n\n// Main body parameters\nbody_length = 80;\nbody_diameter = 35;\ntube_diameter = 22;\nmouthpiece_length = 25;\nmouthpiece_diameter = 18;\n\n// Scale markings\nscale_positions = [10, 20, 30, 40, 50, 60, 70];\nscale_width = 2;\nscale_height = 1;\n\nmodule main_body() {\n    color(color_body) {\n        // Central cylindrical body\n        difference() {\n            cylinder(h=body_length, d=body_diameter, center=true);\n            // Hollow center\n            cylinder(h=body_length+2, d=tube_diameter, center=true);\n        }\n        \n        // End caps with rounded edges\n        translate([0, 0, body_length/2]) {\n            cylinder(h=3, d1=body_diameter, d2=body_diameter-4);\n        }\n        translate([0, 0, -body_length/2]) {\n            cylinder(h=3, d1=body_diameter-4, d2=body_diameter);\n        }\n    }\n}\n\nmodule mouthpiece() {\n    color(color_tube) {\n        // Mouthpiece tube\n        translate([0, 0, body_length/2 + mouthpiece_length/2]) {\n            cylinder(h=mouthpiece_length, d1=tube_diameter, d2=mouthpiece_diameter);\n        }\n        \n        // Flared end for comfort\n        translate([0, 0, body_length/2 + mouthpiece_length]) {\n            cylinder(h=5, d1=mouthpiece_diameter, d2=mouthpiece_diameter+4);\n        }\n    }\n}\n\nmodule grip_zones() {\n    color(color_grip) {\n        // Left grip zone\n        for(i = [-1, 1]) {\n            rotate([0, 90, 0]) {\n                translate([i * (body_diameter/2 + 3), 0, 0]) {\n                    difference() {\n                        cylinder(h=30, d=8, center=true);\n                        cylinder(h=32, d=6, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Texture rings on grips\n        for(i = [-1, 1]) {\n            rotate([0, 90, 0]) {\n                translate([i * (body_diameter/2 + 3), 0, -10]) {\n                    for(z = [-10:5:10]) {\n                        translate([0, 0, z]) {\n                            cylinder(h=1, d=9);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule measurement_scale() {\n    color(color_markings) {\n        // Main scale markings\n        for(pos = scale_positions) {\n            translate([tube_diameter/2 + 1, 0, -body_length/2 + pos]) {\n                cube([scale_width, body_diameter/2, scale_height], center=true);\n            }\n            \n            // Number indicators (simplified as blocks)\n            if(pos % 20 == 0) {\n                translate([tube_diameter/2 + 4, 0, -body_length/2 + pos]) {\n                    cube([4, 2, 8], center=true);\n                }\n            }\n        }\n        \n        // Maximum capacity indicator\n        translate([tube_diameter/2 + 1, 0, body_length/2 - 5]) {\n            color([0.8, 0.2, 0.2])  // Red warning zone\n            cube([scale_width+2, body_diameter/2-2, 3], center=true);\n        }\n    }\n}\n\nmodule air_outlet() {\n    color(color_tube) {\n        // Outlet tube at bottom\n        translate([0, 0, -body_length/2 - 10]) {\n            cylinder(h=15, d=tube_diameter-4);\n            \n            // Connection flange\n            translate([0, 0, -2]) {\n                cylinder(h=3, d=tube_diameter+2);\n            }\n        }\n    }\n}\n\n// Assembly\n$fn = 32;  // Smooth curves\n\nunion() {\n    main_body();\n    mouthpiece();\n    grip_zones();\n    measurement_scale();\n    air_outlet();\n}",
    "renders": true
  },
  {
    "tool": "respirometer",
    "openscad_code": "// Respirometer Tool - Medium Complexity\n// Includes main chamber, graduated markings, connecting tubes, and base stand\n\n// Color definitions\ncolor_body = [0.9, 0.9, 0.9];  // White plastic\ncolor_markings = [0.2, 0.2, 0.2];  // Black markings\ncolor_tubes = [0.1, 0.9, 0.2];  // Green tubes\ncolor_base = [0.4, 0.4, 0.4];  // Gray base\n\n// Overall dimensions\nbase_length = 80;\nbase_width = 40;\nbase_height = 10;\nchamber_diameter = 20;\nchamber_height = 60;\ntube_diameter = 4;\ntube_length = 25;\n\n// Main chamber module\nmodule chamber() {\n    color(color_body) {\n        // Main cylindrical chamber\n        cylinder(h=chamber_height, d=chamber_diameter, $fn=32);\n        \n        // Chamber top cap\n        translate([0, 0, chamber_height])\n            cylinder(h=3, d=chamber_diameter+2, $fn=32);\n        \n        // Chamber bottom\n        translate([0, 0, -1])\n            cylinder(h=2, d=chamber_diameter+2, $fn=32);\n    }\n    \n    // Graduated markings\n    color(color_markings) {\n        for(i=[0:5:50]) {\n            translate([chamber_diameter/2 + 1, 0, i])\n                cube([1, 0.5, 0.5], center=true);\n        }\n    }\n}\n\n// Tube connection module\nmodule tube_connection(pos, angle) {\n    translate(pos) {\n        rotate([90, angle, 0]) {\n            color(color_tubes) {\n                // Main tube\n                cylinder(h=tube_length, d=tube_diameter, $fn=16);\n                \n                // Tube connector\n                translate([0, 0, tube_length])\n                    cylinder(h=5, d=tube_diameter+2, $fn=16);\n                \n                // Tube base\n                translate([0, 0, -1])\n                    cylinder(h=2, d=tube_diameter+2, $fn=16);\n            }\n        }\n    }\n}\n\n// Base stand module\nmodule base() {\n    color(color_base) {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_length, base_width, base_height], center=true);\n        \n        // Chamber support\n        translate([0, 0, base_height + chamber_height/2])\n            difference() {\n                cube([chamber_diameter + 6, chamber_diameter + 6, chamber_height], center=true);\n                cube([chamber_diameter + 2, chamber_diameter + 2, chamber_height + 2], center=true);\n            }\n        \n        // Base supports\n        for(i=[-1:1]) {\n            translate([i * 25, 0, base_height + 5])\n                cube([5, base_width - 10, 10], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base and chamber\n    base();\n    \n    translate([0, 0, base_height + 5]) {\n        chamber();\n        \n        // Tube connections\n        tube_connection([0, chamber_diameter/2 + 5, chamber_height - 10], 0);\n        tube_connection([chamber_diameter/2 + 5, 0, chamber_height/2], 90);\n        tube_connection([-chamber_diameter/2 - 5, 0, chamber_height/2], -90);\n    }\n    \n    // Additional support structures\n    color(color_body) {\n        translate([0, 0, base_height + 2])\n            cylinder(h=3, d=chamber_diameter + 4, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "tool": "dosimeter",
    "openscad_code": "// Realistic 3D printable dosimeter (medium complexity)\n// Overall size: 70mm x 40mm x 25mm\n\n// Main colors\n$fn = 36;\nwall_thickness = 2;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main housing\n        color(\"silver\")\n        cube([65, 35, 20], center=true);\n        \n        // Display window cutout\n        translate([0, 8, 10.1])\n            cube([40, 15, 1], center=true);\n        \n        // Button holes\n        translate([-15, -12, 10.1])\n            cylinder(h=2, r=3);\n        translate([0, -12, 10.1])\n            cylinder(h=2, r=3);\n        translate([15, -12, 10.1])\n            cylinder(h=2, r=3);\n        \n        // Battery compartment\n        translate([0, 12, -10.1])\n            cube([30, 10, 1], center=true);\n    }\n    \n    // Display screen\n    translate([0, 8, 10])\n        color(\"darkblue\")\n        cube([38, 13, 0.5], center=true);\n    \n    // Buttons\n    translate([-15, -12, 11])\n        color(\"red\")\n        cylinder(h=2, r=2.5);\n    translate([0, -12, 11])\n        color(\"green\")\n        cylinder(h=2, r=2.5);\n    translate([15, -12, 11])\n        color(\"yellow\")\n        cylinder(h=2, r=2.5);\n}\n\n// Geiger tube module\nmodule geiger_tube() {\n    translate([0, 0, -8])\n        difference() {\n            // Tube housing\n            color(\"darkgray\")\n            cube([55, 25, 8], center=true);\n            \n            // Tube cavity\n            translate([0, 0, -3])\n                cube([45, 15, 6], center=true);\n            \n            // Wire holes\n            for(x = [-20, 20])\n                translate([x, 0, 0])\n                    cylinder(h=10, r=2);\n        }\n    \n    // End caps\n    for(x = [-27.5, 27.5])\n        translate([x, 0, -4])\n            color(\"black\")\n            cylinder(h=8, r=3);\n}\n\n// Clip module\nmodule clip() {\n    translate([0, 0, 15])\n        difference() {\n            // Main clip body\n            color(\"black\")\n            union() {\n                translate([0, -20, 0])\n                    cube([20, 5, 8], center=true);\n                translate([0, -22.5, -2])\n                    cube([10, 10, 4], center=true);\n            }\n            \n            // Spring space\n            translate([0, -20, 2])\n                cube([18, 3, 4], center=true);\n        }\n}\n\n// Speaker grill\nmodule speaker() {\n    translate([0, 12, 0])\n        difference() {\n            // Speaker housing\n            color(\"darkgray\")\n            translate([0, 0, 10])\n                cube([25, 8, 2], center=true);\n            \n            // Grill holes\n            for(x = [-10:5:10])\n                for(y = [-2:2:2])\n                    translate([x, y, 11])\n                        cylinder(h=2, r=1);\n        }\n}\n\n// Warning label\nmodule label() {\n    translate([20, 0, 10.5])\n        color(\"red\")\n        cube([15, 8, 0.2], center=true);\n    \n    translate([20, 0, 10.7])\n        color(\"white\")\n        cube([13, 6, 0.1], center=true);\n}\n\n// Assemble the dosimeter\nbody();\ngeiger_tube();\nclip();\nspeaker();\nlabel();",
    "renders": true
  },
  {
    "tool": "radiometer",
    "openscad_code": "// Radiometer (Crookes Radiometer) - Realistic Style, Medium Complexity\n// Features: Glass bulb, partial vacuum, vanes with black/white sides, spindle, stand\n\n// Constants\n$fn = 50;\nwall = 1.2;          // Wall thickness for 3D printing\nscale_factor = 0.8;  // Overall scale for 50-100mm target\n\n// Colors\ncolor_glass = [0.7, 0.9, 1.0, 0.5];  // Transparent blue-white glass\ncolor_metal = [0.6, 0.6, 0.65];      // Nickel/chrome finish\ncolor_black = [0.1, 0.1, 0.1];       // Black vane side\ncolor_white = [0.95, 0.95, 0.95];    // White vane side\n\n// Main assembly\nmodule radiometer() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Glass bulb\n        translate([0, 0, 35])\n        glass_bulb();\n        \n        // Vane assembly\n        translate([0, 0, 35])\n        rotate([0, 0, $t*360])  // Animation rotation\n        vane_assembly();\n        \n        // Stand/base\n        base_assembly();\n    }\n}\n\n// Glass bulb with neck\nmodule glass_bulb() {\n    color(color_glass) difference() {\n        // Main bulb\n        sphere(d = 50);\n        \n        // Neck opening for spindle\n        translate([0, 0, -25])\n        cylinder(h = 30, d1 = 8, d2 = 10, center = false);\n        \n        // Internal space (hollow bulb)\n        scale([0.9, 0.9, 0.9])\n        sphere(d = 48);\n    }\n}\n\n// Vane assembly with 4 vanes\nmodule vane_assembly() {\n    // Central spindle\n    color(color_metal) {\n        cylinder(h = 40, d = 2, center = true);\n        translate([0, 0, 20]) sphere(d = 3);\n        translate([0, 0, -20]) sphere(d = 3);\n    }\n    \n    // Four vanes at 90 degrees\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 12, 0])\n        vane();\n    }\n}\n\n// Single vane with black and white sides\nmodule vane() {\n    // Vane body\n    difference() {\n        cube([20, 0.5, 8], center = true);\n        \n        // Lightening holes\n        for (j = [0:1]) {\n            translate([0, 0, j*4 - 2])\n            cylinder(h = 2, d = 3, center = true);\n        }\n    }\n    \n    // Black side\n    color(color_black)\n    translate([10.1, 0.3, 0])\n    cube([0.2, 0.1, 8], center = true);\n    \n    // White side\n    color(color_white)\n    translate([-10.1, 0.3, 0])\n    cube([0.2, 0.1, 8], center = true);\n}\n\n// Base assembly with stand\nmodule base_assembly() {\n    // Circular base\n    color(color_metal)\n    difference() {\n        cylinder(h = 8, d = 35);\n        translate([0, 0, -1])\n        cylinder(h = 10, d = 30);\n    }\n    \n    // Support column\n    translate([0, 0, 4])\n    color(color_metal)\n    cylinder(h = 25, d = 6);\n    \n    // Decorative ring\n    translate([0, 0, 10])\n    color(color_metal)\n    difference() {\n        cylinder(h = 3, d = 10);\n        cylinder(h = 3.5, d = 8);\n    }\n    \n    // Stability feet\n    for (k = [0:3]) {\n        rotate([0, 0, k*90 + 45])\n        translate([13, 0, 4])\n        color(color_metal)\n        cube([8, 3, 2], center = true);\n    }\n}\n\n// Render the radiometer\nradiometer();",
    "renders": true
  },
  {
    "tool": "geiger",
    "openscad_code": "// Geiger Counter - Realistic Style, Medium Complexity\n// Basic dimensions in mm\n$fn=32;\n\n// Main body parameters\nbody_length = 70;\nbody_width = 40;\nbody_height = 25;\nwall_thickness = 2;\n\n// Tube parameters\ntube_diameter = 20;\ntube_length = 55;\n\n// Handle parameters\nhandle_length = 35;\nhandle_diameter = 12;\n\n// Display parameters\nscreen_width = 25;\nscreen_height = 15;\nscreen_depth = 3;\n\n// Speaker grill parameters\ngrill_width = 15;\ngrill_height = 8;\ngrill_holes = 6;\n\n// Button parameters\nbutton_diameter = 6;\nbutton_height = 2;\n\nmodule geiger_body() {\n    difference() {\n        // Main body\n        color(\"darkolivegreen\")\n        rounded_box(body_length, body_width, body_height, 3);\n        \n        // Tube cavity\n        translate([body_length/2 - tube_length/2 - 5, 0, body_height/2 - tube_diameter/2])\n            rotate([0, 90, 0])\n            cylinder(d=tube_diameter + 1, h=tube_length + 2, center=true);\n        \n        // Display window\n        translate([-body_length/2 + 10, 0, body_height/2 - 1])\n            cube([screen_depth + 1, screen_width + 2, screen_height + 2], center=true);\n        \n        // Speaker grill holes\n        translate([0, body_width/2 - 1, body_height/2 - 5])\n            for(i=[-grill_holes/2+0.5:grill_holes/2-0.5]) {\n                translate([i * 3, 0, 0])\n                    cube([1.5, 2, grill_height + 2], center=true);\n            }\n    }\n}\n\nmodule rounded_box(l, w, h, r) {\n    hull() {\n        for(i=[[-1,-1,-1],[-1,-1,1],[-1,1,-1],[-1,1,1],\n               [1,-1,-1],[1,-1,1],[1,1,-1],[1,1,1]]) {\n            translate([i[0] * (l/2 - r), i[1] * (w/2 - r), i[2] * (h/2 - r)])\n                sphere(r=r);\n        }\n    }\n}\n\nmodule geiger_tube() {\n    // Glass tube\n    color(\"grey\", 0.6)\n    translate([body_length/2 - tube_length/2 - 5, 0, body_height/2])\n        rotate([0, 90, 0])\n        cylinder(d=tube_diameter, h=tube_length, center=true);\n    \n    // End caps\n    color(\"silver\")\n    translate([body_length/2 - tube_length - 5, 0, body_height/2])\n        sphere(d=tube_diameter + 2);\n    translate([body_length/2 - 5, 0, body_height/2])\n        sphere(d=tube_diameter + 2);\n}\n\nmodule handle() {\n    color(\"black\")\n    // Main grip\n    translate([0, 0, -handle_length/2 - body_height/2 - 5])\n        cylinder(d=handle_diameter, h=handle_length, center=true);\n    \n    // Grip rings\n    for(i=[-1:0.5:1]) {\n        translate([0, 0, -handle_length/2 - body_height/2 - 5 + i * 10])\n            color(\"darkgrey\")\n            cylinder(d=handle_diameter + 2, h=2, center=true);\n    }\n}\n\nmodule display() {\n    // Screen\n    translate([-body_length/2 + 10, 0, body_height/2 + screen_depth/2])\n        color(\"black\")\n        cube([screen_depth, screen_width, screen_height], center=true);\n    \n    // Screen bezel\n    translate([-body_length/2 + 9.5, 0, body_height/2 + screen_depth/2])\n        color(\"silver\")\n        cube([screen_depth + 1, screen_width + 4, screen_height + 4], center=true);\n}\n\nmodule control_panel() {\n    // Power button\n    translate([body_length/2 - 15, body_width/2 - 5, body_height/2 + 1])\n        color(\"red\")\n        cylinder(d=button_diameter, h=button_height);\n    \n    // Mode button\n    translate([body_length/2 - 15, body_width/2 - 12, body_height/2 + 1])\n        color(\"yellow\")\n        cylinder(d=button_diameter, h=button_height);\n    \n    // LED indicator\n    translate([body_length/2 - 15, -body_width/2 + 5, body_height/2 + 1])\n        color(\"green\")\n        sphere(d=3);\n}\n\n// Assembly\ngeiger_body();\ngeiger_tube();\nhandle();\ndisplay();\ncontrol_panel();\n\n// Text label\ntranslate([0, 0, body_height/2 + 2])\n    rotate([0, 0, 0])\n    color(\"white\")\n    linear_extrude(0.5)\n    text(\"GEIGER\", size=5, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "tool": "scintillometer",
    "openscad_code": "// Realistic 3D-printable scintillometer model (medium complexity)\n// Overall size ~60 mm, printable in PLA with no support\n\n// Main color palette\n$fn = 32;  // Smooth curves for better realism\n\n// Module for the main optical tube\nmodule optical_tube() {\n    difference() {\n        color(\"silver\") \n            cylinder(h = 45, d = 20, center = true);  // Main tube body\n        \n        // Hollow out the tube\n        color(\"silver\")\n            cylinder(h = 47, d = 16, center = true);\n    }\n    \n    // Front lens bezel\n    translate([0, 0, 22.5])\n        color(\"darkgray\")\n            cylinder(h = 3, d1 = 22, d2 = 20, center = false);\n    \n    // Rear eyepiece bezel\n    translate([0, 0, -22.5])\n        color(\"darkgray\")\n            cylinder(h = 3, d1 = 20, d2 = 22, center = false);\n}\n\n// Module for the detector housing\nmodule detector_housing() {\n    translate([11, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        color(\"darkgray\")\n            cylinder(h = 14, d = 12, center = true);  // Detector block\n        \n        // Sensor window\n        translate([0, 0, 7])\n            color(\"white\")\n                cylinder(h = 1, d = 8, center = false);\n        \n        // Alignment notch\n        translate([0, 0, -7])\n            cube([10, 2, 2], center = true);\n    }\n}\n\n// Module for the control panel\nmodule control_panel() {\n    translate([0, 12, 0])\n    rotate([90, 0, 0])\n    difference() {\n        color(\"black\")\n            cube([16, 8, 2], center = true);  // Panel base\n        \n        // LCD screen\n        translate([0, 0, 1.1])\n            color(\"lightblue\")\n                cube([14, 6, 0.5], center = true);\n        \n        // Buttons\n        for (i = [-1:1]) {\n            translate([i * 4, -3, 1.1])\n                color(\"red\")\n                    cylinder(h = 0.5, d = 2, center = false);\n        }\n    }\n}\n\n// Module for the handle grip\nmodule handle_grip() {\n    translate([0, -15, 0])\n    rotate([0, 90, 0])\n    difference() {\n        color(\"darkslategray\")\n            difference() {\n                cylinder(h = 25, d = 12, center = true);  // Handle body\n                \n                // Ergonomic finger grooves\n                for (i = [-2:2]) {\n                    translate([0, 0, i * 5])\n                        rotate([0, 90, 0])\n                            scale([1, 1, 0.8])\n                                cube([10, 3, 2], center = true);\n                }\n            }\n        \n        // Battery compartment cover\n        translate([0, 0, 12.5])\n            color(\"black\")\n                cube([8, 6, 1], center = true);\n    }\n}\n\n// Module for tripod mount\nmodule tripod_mount() {\n    translate([0, 0, -30])\n    difference() {\n        color(\"darkgray\")\n            cylinder(h = 8, d = 15, center = false);\n        \n        // 1/4-20 threaded insert hole\n        translate([0, 0, -0.5])\n            color(\"silver\")\n                cylinder(h = 10, d = 6.5, center = false);\n        \n        // Locking pin\n        translate([7, 0, 4])\n            color(\"black\")\n                cylinder(h = 8, d = 3, center = false);\n    }\n}\n\n// Module for sun shade\nmodule sun_shade() {\n    translate([0, 0, 25])\n    color(\"black\")\n        cylinder(h1 = 8, h2 = 10, d1 = 22, d2 = 28, center = false);\n}\n\n// Assembly of the complete scintillometer\nunion() {\n    optical_tube();\n    detector_housing();\n    control_panel();\n    handle_grip();\n    tripod_mount();\n    sun_shade();\n    \n    // Calibration markings on tube\n    for (i = [1:4]) {\n        rotate([0, 0, i * 90])\n            translate([0, 10, 0])\n                color(\"white\")\n                    cube([0.5, 2, 0.2], center = true);\n    }\n    \n    // Serial number plate\n    translate([0, 0, -20])\n    rotate([0, 0, 0])\n        color(\"brass\")\n            cube([8, 4, 0.5], center = true);\n}",
    "renders": true
  },
  {
    "tool": "actinometer",
    "openscad_code": "// Actinometer - Realistic Style, Medium Complexity\n// Measures UV light intensity using photo-sensitive paper\n\n// Top-level assembly\nactinometer();\n\nmodule actinometer() {\n    // Main body cylinder\n    color(\"silver\")\n    difference() {\n        cylinder(h=40, d=50, $fn=100);\n        translate([0, 0, -1])\n            cylinder(h=42, d=45, $fn=100);\n    }\n    \n    // Top lid with hinge\n    translate([25, 0, 40])\n    rotate([0, 0, 0])\n    color(\"silver\")\n    difference() {\n        cylinder(h=5, d=50, $fn=100);\n        translate([0, 0, -1])\n            cylinder(h=7, d=45, $fn=100);\n    }\n    \n    // Hinge pin\n    translate([25, 0, 42.5])\n    rotate([90, 0, 0])\n    color(\"gray\")\n    cylinder(h=10, d=3, $fn=20);\n    \n    // UV filter window\n    translate([0, 0, 5])\n    color(\"royalblue\")\n    difference() {\n        cylinder(h=3, d=30, $fn=100);\n        translate([0, 0, -1])\n            cylinder(h=5, d=28, $fn=100);\n    }\n    \n    // Paper holder grid\n    translate([0, 0, 10])\n    paper_holder();\n    \n    // Viewing window\n    translate([-20, 0, 20])\n    rotate([0, 90, 0])\n    color(\"royalblue\")\n    cylinder(h=15, d=10, $fn=50);\n    \n    // Scale markings\n    translate([-24.9, -15, 20])\n    rotate([0, 90, 0])\n    scale_markings();\n    \n    // Base stand\n    translate([0, 0, -5])\n    color(\"gray\")\n    cylinder(h=5, d=60, $fn=100);\n    \n    // Grip ridges on side\n    for(i=[-20:10:20])\n    translate([0, i+2.5, 20])\n    color(\"darkgray\")\n    cube([50, 5, 0.5], center=true);\n    \n    // Calibration screw\n    translate([20, 20, -2.5])\n    color(\"gold\")\n    cylinder(h=5, d=8, $fn=20);\n    translate([20, 20, 2.5])\n    color(\"gold\")\n    cylinder(h=3, d=5, $fn=6);\n}\n\nmodule paper_holder() {\n    // Grid pattern for paper support\n    for(i=[-10:5:10])\n    for(j=[-10:5:10])\n    translate([i, j, 0])\n    color(\"lightgray\")\n    cube([2, 2, 1], center=true);\n    \n    // Paper alignment tabs\n    translate([12, 12, 0])\n    color(\"darkgray\")\n    cube([2, 2, 3], center=true);\n    translate([-12, 12, 0])\n    color(\"darkgray\")\n    cube([2, 2, 3], center=true);\n    translate([12, -12, 0])\n    color(\"darkgray\")\n    cube([2, 2, 3], center=true);\n    translate([-12, -12, 0])\n    color(\"darkgray\")\n    cube([2, 2, 3], center=true);\n}\n\nmodule scale_markings() {\n    // UV index scale from 0-11\n    for(i=[0:11]) {\n        rotate([0, 0, i*12])\n        translate([0, 0, 0])\n        color(\"black\")\n        cube([0.5, 2, 0.5], center=true);\n        \n        if(i % 2 == 0) {\n            rotate([0, 0, i*12])\n            translate([0, 3, 0])\n            color(\"black\")\n            scale([0.5, 0.5, 0.5])\n            text(str(i), size=2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "radiograph",
    "openscad_code": "// Radiograph tool (X-ray positioning tool) - medium complexity realistic style\n// Overall dimensions: ~65mm length\n\n// Constants\n$fn=32;\nhandle_length = 45;\nhandle_diameter = 12;\ngrip_length = 30;\ngrip_diameter = 14;\nshaft_length = 20;\nshaft_diameter = 8;\nhead_width = 25;\nhead_height = 8;\nhead_depth = 3;\nscale_markings = 5;\n\n// Main module\nmodule radiograph_tool() {\n    color(\"silver\") {\n        // Handle assembly\n        union() {\n            // Main handle\n            difference() {\n                cylinder(h=handle_length, d=handle_diameter);\n                translate([0, 0, handle_length - 2])\n                    cylinder(h=2, d=handle_diameter - 1);\n            }\n            \n            // Grip pattern\n            for(i=[0:5:handle_length - 5]) {\n                translate([0, 0, i + 2.5])\n                    difference() {\n                        cylinder(h=5, d=grip_diameter);\n                        cylinder(h=5, d=grip_diameter - 2);\n                    }\n            }\n            \n            // End cap\n            translate([0, 0, handle_length])\n                cylinder(h=3, d=handle_diameter + 1);\n        }\n        \n        // Shaft\n        translate([0, 0, -shaft_length])\n            cylinder(h=shaft_length, d=shaft_diameter);\n            \n        // Radiograph head\n        translate([0, 0, -shaft_length - head_height/2])\n            union() {\n                // Main head body\n                cube([head_width, head_depth, head_height], center=true);\n                \n                // Rounded corners\n                translate([head_width/2 - 1.5, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=head_depth, d=3, center=true);\n                translate([-head_width/2 + 1.5, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h=head_depth, d=3, center=true);\n                        \n                // Measurement scale\n                for(i=[-head_width/2 + 5:5:head_width/2 - 5]) {\n                    translate([i, head_depth/2 + 0.1, 0])\n                        cube([0.5, 0.2, head_height - 2]);\n                }\n                \n                // Center line marking\n                translate([0, head_depth/2 + 0.1, 0])\n                    cube([head_width - 4, 0.1, 0.5]);\n            }\n            \n        // Alignment pointer\n        translate([0, 0, -shaft_length - head_height - 2])\n            cylinder(h=4, d1=2, d2=0);\n    }\n    \n    // Grip texture details\n    color(\"black\") {\n        for(i=[0:5:handle_length - 5]) {\n            for(j=[0:60:360]) {\n                rotate([0, 0, j])\n                    translate([handle_diameter/2 - 0.5, 0, i + 2.5])\n                        cube([0.5, 0.5, 5]);\n            }\n        }\n    }\n    \n    // Measurement markings on handle\n    color(\"black\") {\n        for(i=[0:10:handle_length]) {\n            translate([0, handle_diameter/2 + 0.1, i])\n                cube([1, 0.2, 0.5]);\n        }\n    }\n}\n\n// Render the tool\nradiograph_tool();",
    "renders": true
  },
  {
    "tool": "dosigraph",
    "openscad_code": "// Dosigraph Tool - Realistic Style, Medium Complexity\n// A tool for measuring and marking dosage amounts\n\n// Main parameters\nhandle_length = 80;\nhandle_diameter = 15;\nhead_width = 40;\nhead_height = 8;\nblade_length = 35;\nblade_width = 3;\nblade_thickness = 1.5;\ndose_markings = 10;\nmarking_spacing = 3;\n\n// Color definitions\ncolor_handle = \"SaddleBrown\";\ncolor_head = \"Silver\";\ncolor_blade = \"LightGray\";\ncolor_markings = \"Black\";\n\n// Handle with grip texture\nmodule handle() {\n    color(color_handle) {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [1:5:handle_length-10]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=3, d=handle_diameter+2, $fn=32);\n                    cylinder(h=3.5, d=handle_diameter-1, $fn=32);\n                }\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length]) {\n            sphere(d=handle_diameter+2, $fn=32);\n        }\n    }\n}\n\n// Measuring head with markings\nmodule measuring_head() {\n    color(color_head) {\n        // Main head body\n        translate([0, 0, -head_height/2]) {\n            cube([head_width, head_width/2, head_height], center=true);\n        }\n        \n        // Curved top surface\n        translate([0, 0, head_height/2]) {\n            cylinder(h=head_height/2, d=head_width, $fn=64);\n        }\n        \n        // Measurement markings\n        color(color_markings) {\n            for(i = [0:dose_markings-1]) {\n                x_pos = -head_width/2 + 5 + i * marking_spacing;\n                translate([x_pos, 0, head_height + 0.5]) {\n                    cube([0.5, head_width/2, 1]);\n                }\n            }\n        }\n        \n        // Marking numbers (represented as small cubes)\n        for(i = [0:2:dose_markings-1]) {\n            x_pos = -head_width/2 + 5 + i * marking_spacing;\n            translate([x_pos, -head_width/4, head_height + 2]) {\n                cube([1, 1, 0.5]);\n            }\n        }\n    }\n}\n\n// Dosage blade\nmodule dosage_blade() {\n    color(color_blade) {\n        // Tapered blade\n        translate([head_width/2 + blade_length/2, 0, 0]) {\n            hull() {\n                translate([-blade_length/2, 0, 0]) {\n                    cube([blade_thickness, blade_width, 2], center=true);\n                }\n                translate([blade_length/2, 0, 0]) {\n                    cube([blade_thickness, blade_width/2, 1], center=true);\n                }\n            }\n        }\n        \n        // Safety edge\n        translate([head_width/2 + blade_length - 2, 0, 0]) {\n            sphere(d=blade_width, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0]) {\n        handle();\n    }\n    \n    // Measuring head\n    translate([0, 0, handle_length - 10]) {\n        rotate([90, 0, 0]) {\n            measuring_head();\n        }\n    }\n    \n    // Dosage blade\n    translate([0, 0, handle_length - 10]) {\n        rotate([90, 0, 0]) {\n            dosage_blade();\n        }\n    }\n    \n    // Reinforcement ring\n    color(color_head) {\n        translate([0, 0, handle_length - 12]) {\n            cylinder(h=4, d=handle_diameter + 2, $fn=32);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "manograph",
    "openscad_code": "// Manograph Tool - Realistic Style with Medium Complexity\n// A manograph is a pressure measuring device used in railway brake systems\n\n$fn = 50;\n\n// Overall dimensions\nbody_length = 80;\nbody_diameter = 25;\nhandle_length = 40;\ngauge_diameter = 35;\n\n// Main body module\nmodule manograph_body() {\n    color(\"silver\")\n    union() {\n        // Main cylindrical body\n        cylinder(h=body_length, d=body_diameter, center=true);\n        \n        // Pressure inlet connector\n        translate([0, 0, body_length/2 + 5])\n        cylinder(h=10, d=8);\n        \n        // Gauge mounting flange\n        translate([0, 0, -body_length/2 - 3])\n        cylinder(h=6, d=30);\n    }\n}\n\n// Pressure gauge module\nmodule pressure_gauge() {\n    color(\"darkgray\")\n    union() {\n        // Gauge housing\n        translate([0, 0, -body_length/2 - 9])\n        cylinder(h=12, d=gauge_diameter);\n        \n        // Gauge face\n        translate([0, 0, -body_length/2 - 6])\n        color(\"white\")\n        cylinder(h=1, d=gauge_diameter - 4);\n        \n        // Gauge markings (simplified)\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([gauge_diameter/2 - 8, 0, -body_length/2 - 5.5])\n            color(\"black\")\n            cube([6, 1, 0.5]);\n        }\n        \n        // Gauge needle\n        translate([0, 0, -body_length/2 - 5])\n        rotate([0, 0, 45])\n        color(\"red\")\n        cube([gauge_diameter/4, 1, 1]);\n        \n        // Needle hub\n        translate([0, 0, -body_length/2 - 5])\n        color(\"black\")\n        cylinder(h=2, d=4);\n    }\n}\n\n// Handle module\nmodule handle() {\n    color(\"darkblue\")\n    difference() {\n        // Main handle\n        translate([0, 0, body_length/2 + handle_length/2 + 5])\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, d=15);\n        \n        // Handle grip pattern\n        for(i = [0:3:handle_length-3]) {\n            translate([0, 0, body_length/2 + i + 7])\n            rotate([90, 0, 0])\n            cylinder(h=2, d=14);\n        }\n    }\n}\n\n// Pressure connector module\nmodule pressure_connector() {\n    color(\"brass\")\n    union() {\n        // Main connector\n        translate([0, 0, body_length/2 + 15])\n        cylinder(h=8, d=6);\n        \n        // Thread detail\n        for(i = [0:1:6]) {\n            translate([0, 0, body_length/2 + 15 + i])\n            cylinder(h=0.5, d=6.5);\n        }\n        \n        // Hex nut\n        translate([0, 0, body_length/2 + 23])\n        cylinder(h=5, d=10, $fn=6);\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    color(\"gray\")\n    translate([body_diameter/2 + 10, 0, 0])\n    union() {\n        // Bracket base\n        cube([20, 8, body_length]);\n        \n        // Mounting holes\n        for(i = [-1:1]) {\n            translate([10, 0, i * 25])\n            rotate([0, 90, 0])\n            cylinder(h=20, d=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    manograph_body();\n    pressure_gauge();\n    handle();\n    pressure_connector();\n    mounting_bracket();\n}",
    "renders": true
  },
  {
    "tool": "baroscope",
    "openscad_code": "// Baroscope - atmospheric pressure measurement tool\n// Realistic style, medium complexity\n\n$fn = 50;\nwall_thickness = 2;\n\n// Main body dimensions\nbody_length = 80;\nbody_diameter = 25;\nglass_diameter = 18;\nglass_length = 60;\n\n// Handle dimensions\nhandle_length = 35;\nhandle_diameter = 8;\ngrip_length = 20;\n\n// Scale dimensions\nscale_width = 30;\nscale_height = 15;\nscale_depth = 2;\n\n// Display\ncolor(\"silver\") main_assembly();\n\nmodule main_assembly() {\n    // Central glass tube\n    difference() {\n        cylinder(h=glass_length, d=glass_diameter, center=true);\n        cylinder(h=glass_length+2, d=glass_diameter-wall_thickness, center=true);\n    }\n    \n    // Metal end caps\n    translate([0, 0, glass_length/2 + wall_thickness/2]) \n        cap();\n    translate([0, 0, -glass_length/2 - wall_thickness/2]) \n        cap();\n    \n    // Handle\n    translate([0, 0, -glass_length/2 - wall_thickness - handle_length/2]) \n        handle();\n    \n    // Measurement scale\n    translate([glass_diameter/2 + scale_depth/2 + 2, 0, 0]) \n        rotate([0, 90, 0]) \n            measurement_scale();\n    \n    // Internal mercury indicator\n    translate([0, 0, -glass_length/4]) \n        mercury_indicator();\n}\n\nmodule cap() {\n    difference() {\n        cylinder(h=wall_thickness*2, d=body_diameter);\n        cylinder(h=wall_thickness*2+1, d=glass_diameter-wall_thickness);\n    }\n}\n\nmodule handle() {\n    color(\"black\") {\n        cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip rings\n        for(i = [0:4]) {\n            translate([0, 0, i*grip_length/5]) \n                cylinder(h=2, d=handle_diameter+2);\n        }\n    }\n}\n\nmodule measurement_scale() {\n    // Scale backing\n    color(\"white\") {\n        cube([scale_width, scale_height, scale_depth], center=true);\n        \n        // Scale markings\n        for(i = [-10:10]) {\n            translate([i*scale_width/22, 0, scale_depth/2 + 0.1]) \n                cube([0.5, i%5==0 ? scale_height/3 : scale_height/5, 0.2]);\n        }\n        \n        // Numbers\n        translate([0, scale_height/4, scale_depth/2 + 0.1]) \n            color(\"black\") \n                cube([scale_width-5, 2, 0.2]);\n    }\n}\n\nmodule mercury_indicator() {\n    color(\"red\") {\n        cylinder(h=glass_length/10, d=glass_diameter-wall_thickness-2);\n    }\n}",
    "renders": true
  },
  {
    "tool": "thermoscope",
    "openscad_code": "// Thermoscope - Realistic Style, Medium Complexity\n// A traditional temperature measurement tool with liquid expansion chamber\n\n$fn = 36;\n\n// Overall dimensions\nbase_d = 40;\nbase_h = 8;\ntube_d = 8;\ntube_h = 60;\nbulb_d = 12;\nbulb_h = 15;\nscale_w = 3;\nscale_h = 40;\nscale_d = 2;\n\n// Colors\nbase_color = \"Gray\";\ntube_color = \"LightBlue\";\nliquid_color = \"Red\";\nscale_color = \"Black\";\nmark_color = \"White\";\n\n// Main assembly\nmodule thermoscope() {\n    // Base with integrated stand\n    color(base_color) base();\n    \n    // Glass tube assembly\n    color(tube_color) glass_tube();\n    \n    // Mercury-like liquid inside\n    color(liquid_color) liquid();\n    \n    // Temperature scale\n    color(scale_color) scale();\n    \n    // Decorative rings\n    color(base_color) rings();\n}\n\n// Solid base with ergonomic grip\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(d = base_d, h = base_h);\n        \n        // Grip grooves on sides\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([base_d/2 - 3, -1.5, 1])\n                    cube([5, 3, base_h - 2], center = false);\n        }\n        \n        // Center hole for tube\n        translate([0, 0, -1])\n            cylinder(d = tube_d + 2, h = base_h + 2);\n    }\n    \n    // Stabilizing ring on bottom\n    translate([0, 0, -1])\n        cylinder(d1 = base_d, d2 = base_d + 5, h = 3);\n}\n\n// Glass tube with expansion bulb\nmodule glass_tube() {\n    // Vertical tube\n    translate([0, 0, base_h])\n        cylinder(d = tube_d, h = tube_h);\n    \n    // Expansion bulb at bottom\n    translate([0, 0, base_h - bulb_h/2])\n        sphere(d = bulb_d);\n    \n    // Top cap\n    translate([0, 0, base_h + tube_h])\n        cylinder(d = tube_d + 2, h = 3);\n}\n\n// Liquid mercury simulation\nmodule liquid() {\n    // In bulb\n    translate([0, 0, base_h - bulb_h/2])\n        sphere(d = bulb_d - 1);\n    \n    // In tube (height varies with temperature)\n    translate([0, 0, base_h])\n        cylinder(d = tube_d - 1, h = tube_h * 0.6);\n}\n\n// Temperature scale with markings\nmodule scale() {\n    // Main scale bar\n    translate([tube_d/2 + scale_w/2 + 1, 0, base_h + scale_h/2])\n        cube([scale_w, scale_d, scale_h], center = true);\n    \n    // Temperature markings\n    for (i = [0:5]) {\n        // Marking lines\n        translate([tube_d/2 + scale_w + 1.5, 0, base_h + i * (scale_h/5)])\n            cube([2, scale_d, 0.5], center = true);\n        \n        // Numbers (represented as boxes)\n        color(mark_color)\n            translate([tube_d/2 + scale_w + 3, 0, base_h + i * (scale_h/5)])\n                cube([1, 1, 0.5], center = true);\n    }\n}\n\n// Decorative rings on tube\nmodule rings() {\n    for (pos = [base_h + 10, base_h + 20, base_h + 40]) {\n        translate([0, 0, pos])\n            cylinder(d = tube_d + 2, h = 1);\n    }\n}\n\n// Generate the complete thermoscope\nthermoscope();",
    "renders": true
  },
  {
    "tool": "hygroscope",
    "openscad_code": "// Hygroscope Tool - Realistic Style, Medium Complexity\n// A tool for measuring humidity via hair tension mechanism\n\n// Overall scale factor\nscale = 1;\n\n// Main body dimensions\nbody_width = 40;\nbody_height = 60;\nbody_depth = 15;\n\n// Dial dimensions\ndial_radius = 18;\ndial_thickness = 3;\n\n// Handle dimensions\nhandle_length = 30;\nhandle_diameter = 8;\n\n// Hair tension mechanism\nhair_length = 25;\nhair_diameter = 1;\n\n// Color definitions\ncolor_body = [0.7, 0.7, 0.7];  // Light gray metal\ncolor_dial = [0.9, 0.9, 0.9];   // Silver\ncolor_hair = [0.4, 0.3, 0.2];   // Dark brown\ncolor_glass = [0.8, 0.9, 1.0, 0.5];  // Transparent blue\ncolor_markings = [0, 0, 0];     // Black\n\n// Main assembly\nmodule hygroscope() {\n    // Main instrument body\n    color(color_body)\n    translate([0, 0, 0])\n        instrument_body();\n    \n    // Dial assembly\n    color(color_dial)\n    translate([0, body_height/2 - dial_thickness - 2, body_depth/2 + 1])\n        rotate([90, 0, 0])\n            dial_assembly();\n    \n    // Hair tension mechanism\n    color(color_hair)\n    translate([0, body_height/2 - 10, body_depth/2 - 5])\n        hair_mechanism();\n    \n    // Handle\n    color(color_body)\n    translate([0, -body_height/2 - handle_length/2, 0])\n        rotate([90, 0, 0])\n            handle();\n    \n    // Protective glass cover\n    color(color_glass)\n    translate([0, body_height/2 - dial_thickness - 2, body_depth/2 + 3])\n        rotate([90, 0, 0])\n            glass_cover();\n}\n\n// Instrument body with mounting features\nmodule instrument_body() {\n    difference() {\n        // Main body\n        cube([body_width, body_height, body_depth], center=true);\n        \n        // Rounded edges\n        translate([0, 0, body_depth/2])\n            cylinder(h=body_depth+2, r=body_width/2-5, $fn=20);\n        \n        // Mounting holes\n        for(x = [-body_width/3, body_width/3]) {\n            for(y = [-body_height/3, body_height/3]) {\n                translate([x, y, 0])\n                    cylinder(h=body_depth+2, r=2, $fn=12);\n            }\n        }\n        \n        // Ventilation slots\n        for(i = [-2:2]) {\n            translate([i*6, body_height/2 - 10, 0])\n                cube([2, 20, body_depth+1], center=true);\n        }\n    }\n}\n\n// Dial assembly with markings\nmodule dial_assembly() {\n    difference() {\n        // Main dial\n        cylinder(h=dial_thickness, r=dial_radius, $fn=60);\n        \n        // Center hole\n        cylinder(h=dial_thickness+1, r=3, $fn=20);\n    }\n    \n    // Dial markings\n    color(color_markings)\n    for(i = [0:359:30]) {\n        rotate([0, 0, i])\n            translate([dial_radius-5, 0, dial_thickness/2])\n                cube([5, 1, 0.5], center=true);\n    }\n    \n    // Humidity scale labels\n    for(i = [0:3]) {\n        angle = i * 90;\n        value = i * 25;\n        rotate([0, 0, angle - 90])\n            translate([dial_radius-10, 0, dial_thickness/2 + 0.1])\n                rotate([0, 0, -angle + 90])\n                    scale([0.1, 0.1, 0.1])\n                        linear_extrude(height=1)\n                            text(str(value), size=5, halign=\"center\");\n    }\n    \n    // Indicator needle\n    color(color_markings)\n    translate([0, 0, dial_thickness/2 + 0.2])\n        rotate([0, 0, 45])  // Set to 45% humidity\n        union() {\n            cube([dial_radius-8, 1.5, 0.5], center=true);\n            translate([dial_radius-8, 0, 0])\n                sphere(d=1.5);\n        }\n}\n\n// Hair tension mechanism\nmodule hair_mechanism() {\n    // Hair mounting posts\n    for(x = [-hair_length/2, hair_length/2]) {\n        translate([x, 0, 0])\n            cylinder(h=10, r=2, $fn=12);\n    }\n    \n    // Human hair strand (simplified as cylinder)\n    translate([0, 0, 5])\n        rotate([90, 0, 0])\n            cylinder(h=hair_length, r=hair_diameter, $fn=8);\n    \n    // Tension adjustment screw\n    translate([hair_length/2 + 5, 0, 5])\n        union() {\n            cylinder(h=8, r=3, $fn=12);\n            translate([0, 0, 8])\n                cylinder(h=3, r=5, $fn=6);\n        }\n}\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle\n        cylinder(h=handle_length, r=handle_diameter/2, $fn=20);\n        \n        // Grip rings\n        for(i = [0:handle_length/5:handle_length-5]) {\n            translate([0, 0, i])\n                cylinder(h=1, r=handle_diameter/2 + 0.5, $fn=20);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n        sphere(d=handle_diameter, $fn=20);\n}\n\n// Glass protective cover\nmodule glass_cover() {\n    difference() {\n        cylinder(h=8, r=dial_radius + 3, $fn=40);\n        cylinder(h=9, r=dial_radius + 1, $fn=40);\n    }\n}\n\n// Generate the complete hygroscope\nhygroscope();",
    "renders": true
  },
  {
    "tool": "anemoscope",
    "openscad_code": "// Anemoscope (Wind Direction Indicator) - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm tall, ~60mm diameter\n\n// Constants\nbase_h = 8;\npole_h = 50;\nvane_w = 35;\nvane_h = 20;\narrow_l = 25;\nbearing_r = 4;\nwall_t = 2;\n\n// Base plate with compass rose\nmodule base() {\n    color(\"dimgray\")\n    union() {\n        // Main base disc\n        cylinder(h=base_h, r=30, $fn=64);\n        \n        // Compass rose markings\n        color(\"white\")\n        for (a=[0:45:359]) {\n            rotate([0,0,a]) {\n                translate([26,0,base_h-0.1])\n                    cube([8,1,0.2]);\n            }\n        }\n        \n        // Cardinal direction letters\n        color(\"white\")\n        translate([0,22,base_h-0.1]) {\n            rotate([0,0,0]) cube([2,4,0.2]);\n            rotate([0,0,0]) cube([4,2,0.2]);\n        }\n        translate([-2,-22,base_h-0.1]) {\n            rotate([0,0,180]) cube([2,4,0.2]);\n            rotate([0,0,180]) cube([4,2,0.2]);\n        }\n        translate([22,0,base_h-0.1]) {\n            rotate([0,0,90]) cube([2,4,0.2]);\n            rotate([0,0,90]) cube([4,2,0.2]);\n        }\n        translate([-22,0,base_h-0.1]) {\n            rotate([0,0,-90]) cube([2,4,0.2]);\n            rotate([0,0,-90]) cube([4,2,0.2]);\n        }\n    }\n}\n\n// Central pole with bearing\nmodule pole() {\n    color(\"silver\")\n    union() {\n        // Main pole\n        translate([0,0,base_h])\n            cylinder(h=pole_h, r=3, $fn=32);\n            \n        // Bearing housing top\n        translate([0,0,base_h+pole_h-2])\n            cylinder(h=4, r=bearing_r+2, $fn=32);\n            \n        // Bearing hole\n        color(\"gray\")\n        translate([0,0,base_h+pole_h-2])\n            cylinder(h=4, r=bearing_r, $fn=32);\n    }\n}\n\n// Wind vane assembly\nmodule vane() {\n    color(\"red\")\n    union() {\n        // Vane body\n        translate([0,0,base_h+pole_h])\n            rotate([90,0,0])\n            cube([vane_w, wall_t, vane_h], center=true);\n            \n        // Arrow tail fins\n        translate([-vane_w/2-5,0,base_h+pole_h])\n            rotate([90,0,0])\n            cube([10, wall_t, 15], center=true);\n            \n        // Arrow head\n        color(\"silver\")\n        translate([vane_w/2+arrow_l/2,0,base_h+pole_h])\n            rotate([90,0,0])\n            cylinder(h=arrow_l, r1=2, r2=0, $fn=8);\n            \n        // N-S indicator fin\n        color(\"white\")\n        translate([0,0,base_h+pole_h+vane_h/2])\n            rotate([0,0,0])\n            cube([wall_t, 15, 8], center=true);\n    }\n}\n\n// Counterweight\nmodule counterweight() {\n    color(\"darkgray\")\n    translate([-vane_w/2-10,0,base_h+pole_h])\n        sphere(r=4, $fn=16);\n}\n\n// Assembly\nbase();\npole();\nvane();\ncounterweight();",
    "renders": true
  },
  {
    "tool": "seismoscope",
    "openscad_code": "// Seismoscope - realistic style, medium complexity\n// Overall dimensions: ~80mm x 60mm x 60mm\n\nmodule seismoscope() {\n    // Base platform\n    color(\"dimgray\")\n    cube([80, 60, 5], center=true);\n    \n    // Main frame uprights\n    translate([-30, -25, 2.5])\n        color(\"silver\")\n        cube([5, 5, 50]);\n    translate([30, -25, 2.5])\n        color(\"silver\")\n        cube([5, 5, 50]);\n    translate([-30, 25, 2.5])\n        color(\"silver\")\n        cube([5, 5, 50]);\n    translate([30, 25, 2.5])\n        color(\"silver\")\n        cube([5, 5, 50]);\n    \n    // Top crossbar\n    translate([0, 0, 27.5])\n        color(\"silver\")\n        cube([65, 5, 5]);\n    \n    // Pendulum rod\n    translate([0, 0, 35])\n        rotate([0, 0, 5])\n        color(\"gray\")\n        cylinder(h=30, d=3, center=false);\n    \n    // Pendulum bob\n    translate([0, 0, 50])\n        rotate([0, 0, 5])\n        color(\"gold\")\n        sphere(d=8);\n    \n    // Recording drum\n    translate([0, -20, 5])\n        rotate([0, 90, 0])\n        color(\"brown\")\n        difference() {\n            cylinder(h=30, d=15, center=true);\n            cylinder(h=32, d=12, center=true);\n        }\n    \n    // Drum support left\n    translate([-15, -20, 5])\n        color(\"silver\")\n        cube([5, 5, 10]);\n    \n    // Drum support right\n    translate([15, -20, 5])\n        color(\"silver\")\n        cube([5, 5, 10]);\n    \n    // Recording needle\n    translate([0, -20, 12])\n        rotate([0, 0, 5])\n        color(\"silver\")\n        cylinder(h=25, d=1, center=false);\n    \n    // Tension springs (simplified)\n    for(i=[-20:5:20]) {\n        translate([i, 0, 27.5])\n            color(\"lightgray\")\n            cylinder(h=7.5, d=2, center=false);\n    }\n    \n    // Control knobs\n    translate([-35, -30, 5])\n        color(\"black\")\n        cylinder(h=5, d=6, center=true);\n    \n    translate([35, -30, 5])\n        color(\"black\")\n        cylinder(h=5, d=6, center=true);\n    \n    // Calibration scale\n    translate([0, 30, 7])\n        color(\"white\")\n        cube([40, 2, 0.5]);\n    \n    // Scale markings\n    for(i=[-18:3:18]) {\n        translate([i, 31, 7])\n            color(\"black\")\n            cube([0.5, 1, 0.5]);\n    }\n    \n    // Leveling feet\n    translate([-35, -25, -2.5])\n        color(\"darkgray\")\n        cylinder(h=5, d=4, center=true);\n    \n    translate([35, -25, -2.5])\n        color(\"darkgray\")\n        cylinder(h=5, d=4, center=true);\n    \n    translate([-35, 25, -2.5])\n        color(\"darkgray\")\n        cylinder(h=5, d=4, center=true);\n    \n    translate([35, 25, -2.5])\n        color(\"darkgray\")\n        cylinder(h=5, d=4, center=true);\n}\n\n// Render the seismoscope\nseismoscope();",
    "renders": true
  },
  {
    "tool": "micrograph",
    "openscad_code": "// Micrograph Tool - Realistic Style, Medium Complexity\n// 3D printable micrograph (microtome knife) model\n\nmodule blade(width = 25, height = 3, length = 60) {\n    // Main blade body\n    difference() {\n        // Blade base\n        translate([0, 0, height/2])\n            cube([width, length, height], center = true);\n        \n        // Taper blade edge\n        translate([0, length/2 - 2, height/2])\n            cube([width + 2, 4, height + 1], center = true);\n    }\n    \n    // Blade edge bevel\n    difference() {\n        translate([0, length/2 - 1, height/2 - 0.5])\n            cube([width, 2, height], center = true);\n        \n        translate([0, length/2 + 1, height/2 - 1])\n            rotate([45, 0, 0])\n            cube([width + 2, 5, height], center = true);\n    }\n}\n\nmodule handle(length = 80, diameter = 12) {\n    // Main handle body\n    color([0.2, 0.2, 0.2])\n    difference() {\n        cylinder(h = length, d = diameter);\n        \n        // Grip grooves\n        for(i = [0:4:length-8]) {\n            translate([0, 0, i + 4])\n                cylinder(h = 2, d = diameter - 2);\n        }\n    }\n    \n    // Handle ferrule\n    color([0.8, 0.8, 0.8])\n    translate([0, 0, -1])\n        cylinder(h = 8, d = diameter + 2);\n    \n    // End cap\n    color([0.6, 0.6, 0.6])\n    translate([0, 0, length])\n        cylinder(h = 4, d = diameter - 2);\n}\n\nmodule micrograph_assembly() {\n    // Blade assembly\n    color([0.7, 0.7, 0.8])\n    rotate([0, 0, 90])\n    translate([0, 0, 0])\n        blade();\n    \n    // Handle connection\n    color([0.8, 0.8, 0.8])\n    rotate([0, 0, 90])\n    translate([-15, 0, 0])\n        cube([30, 12, 6]);\n    \n    // Handle\n    rotate([0, 90, 0])\n    translate([0, 0, -30])\n        handle();\n    \n    // Finger guard\n    color([0.6, 0.6, 0.6])\n    rotate([0, 0, 90])\n    translate([-20, 0, 0])\n        cylinder(h = 20, d = 25, center = true);\n    \n    // Guard details\n    color([0.5, 0.5, 0.5])\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([-20, 0, 0])\n            cube([20, 2, 2], center = true);\n    }\n    \n    // Blade markings\n    color([0, 0, 0])\n    for(i = [0:5:25]) {\n        rotate([0, 0, 90])\n        translate([i - 12.5, 15, 1.6])\n            cube([0.5, 5, 0.2]);\n    }\n}\n\n// Main assembly\nmicrograph_assembly();",
    "renders": true
  },
  {
    "tool": "telegraph",
    "openscad_code": "// Telegraph Key - Realistic Style, Medium Complexity\n// Based on classic 19th century Morse telegraph key design\n\n// Color definitions\ncolor_base = [0.2, 0.2, 0.2]; // Dark gray metal\ncolor_lever = [0.8, 0.8, 0.8]; // Bright metal\ncolor_wood = [0.4, 0.3, 0.2]; // Dark wood\ncolor_wire = [0.1, 0.1, 0.1]; // Black wire\n\n// Overall dimensions\nbase_width = 60;\nbase_length = 80;\nbase_height = 8;\nlever_length = 70;\nlever_width = 8;\nlever_thickness = 4;\n\n// Base assembly\nmodule base_assembly() {\n    color(color_base) {\n        // Main base plate\n        cube([base_width, base_length, base_height], center=true);\n        \n        // Front terminal posts\n        translate([base_width/2 - 8, base_length/2 - 15, base_height/2])\n            cylinder(h=12, d=6, $fn=20);\n        translate([base_width/2 - 8, -base_length/2 + 15, base_height/2])\n            cylinder(h=12, d=6, $fn=20);\n            \n        // Rear binding posts\n        translate([-base_width/2 + 8, base_length/2 - 15, base_height/2])\n            cylinder(h=10, d=4, $fn=16);\n        translate([-base_width/2 + 8, -base_length/2 + 15, base_height/2])\n            cylinder(h=10, d=4, $fn=16);\n            \n        // Center support posts for lever\n        for(x = [-15, 15]) {\n            translate([x, 0, base_height/2])\n                cylinder(h=15, d=4, $fn=16);\n        }\n    }\n}\n\n// Lever mechanism\nmodule lever_assembly() {\n    color(color_lever) {\n        // Main lever arm\n        translate([0, 0, 15])\n            rotate([0, 20, 0])\n            cube([lever_length, lever_width, lever_thickness], center=true);\n            \n        // Contact screw at front\n        translate([lever_length/2 - 5, 0, 15 + lever_thickness/2 + 3])\n            cylinder(h=8, d=3, $fn=12);\n            \n        // Knob at rear\n        translate([-lever_length/2 + 5, 0, 15 + lever_thickness/2])\n            union() {\n                cylinder(h=8, d=12, $fn=32);\n                sphere(d=12, $fn=32);\n            }\n            \n        // Pivot bar\n        translate([0, 0, 15 + lever_thickness/2 + 2])\n            rotate([90, 0, 0])\n            cylinder(h=lever_width + 4, d=3, $fn=16);\n    }\n}\n\n// Wooden knob details\nmodule wooden_knob() {\n    color(color_wood) {\n        // Main knob body\n        translate([-lever_length/2 + 5, 0, 15 + lever_thickness/2 + 8])\n            cylinder(h=10, d=14, $fn=32);\n            \n        // Grip rings\n        for(i = [0:2:8]) {\n            translate([-lever_length/2 + 5, 0, 15 + lever_thickness/2 + 8 + i])\n                difference() {\n                    cylinder(h=1, d=14.5, $fn=32);\n                    cylinder(h=1.2, d=12, $fn=32);\n                }\n        }\n    }\n}\n\n// Contact points\nmodule contacts() {\n    color(color_base) {\n        // Front contact\n        translate([lever_length/2 - 5, 0, base_height/2])\n            union() {\n                cylinder(h=3, d=8, $fn=20);\n                translate([0, 0, 3])\n                    cylinder(h=2, d=4, $fn=16);\n            }\n            \n        // Rear spring mount\n        translate([-lever_length/2 - 5, 0, base_height/2])\n            union() {\n                cube([10, 6, 8], center=true);\n                translate([0, 0, 4])\n                    cylinder(h=4, d=3, $fn=12);\n            }\n    }\n}\n\n// Wire connections\nmodule wiring() {\n    color(color_wire) {\n        // Terminal to binding post\n        translate([base_width/2 - 8, base_length/2 - 15, base_height/2 + 6])\n            rotate([90, 0, 0])\n            cylinder(h=20, d=1, $fn=8);\n            \n        // Spring wire\n        translate([-lever_length/2 - 5, 0, base_height/2 + 8])\n            rotate([0, 90, 0])\n            cylinder(h=20, d=1.5, $fn=8);\n    }\n}\n\n// Assembly\nbase_assembly();\nlever_assembly();\nwooden_knob();\ncontacts();\nwiring();",
    "renders": true
  },
  {
    "tool": "chronograph",
    "openscad_code": "// Chronograph stopwatch tool - medium complexity realistic style\n// 3D printable at ~80mm diameter\n\n$fn = 64;  // Smooth curves\n\n// Main colors\ncolor_case = \"Silver\";\ncolor_buttons = \"Red\";\ncolor_display = \"Black\";\ncolor_glass = \"White\";\ncolor_strap = \"DarkGray\";\n\n// Case dimensions\ncase_d = 80;\ncase_h = 15;\nbezel_w = 5;\n\n// Button dimensions\nbutton_d = 8;\nbutton_h = 20;\nbutton_gap = 5;\n\n// Display dimensions\ndisplay_d = 60;\ndisplay_h = 1;\ndisplay_offset = 2;\n\n// Crown dimensions\ncrown_d = 12;\ncrown_h = 8;\n\n// Strap dimensions\nstrap_w = 22;\nstrap_h = 3;\nstrap_l = 100;\n\n// Main case\nmodule case() {\n    color(color_case)\n    difference() {\n        // Outer case with beveled edges\n        cylinder(d = case_d, h = case_h);\n        translate([0, 0, -0.1])\n            cylinder(d = case_d - 2*bezel_w, h = case_h + 0.2);\n        \n        // Button holes\n        for (i = [-1, 1]) {\n            translate([i * (case_d/2 + button_gap), 0, case_h/2])\n                rotate([0, 90, 0])\n                    cylinder(d = button_d, h = button_gap + 2);\n        }\n        \n        // Crown hole\n        translate([0, case_d/2 + crown_h/2, case_h/2 - crown_d/2])\n            rotate([90, 0, 0])\n                cylinder(d = crown_d, h = crown_h + 2);\n    }\n}\n\n// Bezel with markings\nmodule bezel() {\n    color(color_case)\n    difference() {\n        cylinder(d = case_d, h = bezel_w);\n        translate([0, 0, -0.1])\n            cylinder(d = case_d - 2*bezel_w, h = bezel_w + 0.2);\n    }\n    \n    // Tachymeter markings\n    for (i = [0:5:355]) {\n        translate([0, 0, bezel_w - 0.5])\n            rotate([0, 0, i])\n                translate([(case_d - bezel_w)/2 - 2, 0, 0])\n                    cube([4, 1, 0.5], center = true);\n    }\n}\n\n// Display assembly\nmodule display() {\n    // Glass cover\n    color(color_glass, 0.3)\n    translate([0, 0, case_h - display_offset])\n        cylinder(d = display_d, h = 1);\n    \n    // LCD display\n    color(color_display)\n    translate([0, 0, case_h - display_offset - 1])\n        cylinder(d = display_d - 2, h = display_h);\n    \n    // Sub-dials\n    for (pos = [[-20, 15], [20, 15], [0, -20]]) {\n        translate([pos[0], pos[1], case_h - display_offset - 0.5])\n            cylinder(d = 12, h = 0.5);\n        translate([pos[0], pos[1], case_h - display_offset])\n            cylinder(d = 1, h = 2);\n    }\n}\n\n// Push buttons\nmodule buttons() {\n    for (i = [-1, 1]) {\n        color(color_buttons)\n        translate([i * (case_d/2 + button_gap/2), 0, case_h/2])\n            rotate([0, 90, 0])\n                cylinder(d1 = button_d, d2 = button_d*0.8, h = button_h);\n    }\n}\n\n// Crown\nmodule crown() {\n    color(color_case)\n    translate([0, case_d/2 + crown_h/2, case_h/2 - crown_d/2])\n        rotate([90, 0, 0])\n            cylinder(d = crown_d, h = crown_h);\n    \n    // Crown grip pattern\n    for (i = [0:30:330]) {\n        translate([0, case_d/2 + crown_h/2, case_h/2 - crown_d/2])\n            rotate([90, i, 0])\n                translate([crown_d/2 - 0.5, 0, 0])\n                    cube([1, crown_d*0.8, 0.5], center = true);\n    }\n}\n\n// Watch strap\nmodule strap() {\n    // Top strap\n    color(color_strap)\n    translate([0, case_d/2 + strap_l/2, -case_h/2])\n        cube([strap_w, strap_l, strap_h], center = true);\n    \n    // Bottom strap\n    translate([0, -case_d/2 - strap_l/2, -case_h/2])\n        cube([strap_w, strap_l, strap_h], center = true);\n    \n    // Strap loops\n    for (i = [0:20:60]) {\n        translate([0, case_d/2 + strap_l - i, -case_h/2])\n            difference() {\n                cube([strap_w + 2, 8, strap_h + 2], center = true);\n                cube([strap_w - 2, 12, strap_h], center = true);\n            }\n    }\n}\n\n// Assembly\ncase();\nbezel();\ndisplay();\nbuttons();\ncrown();\nstrap();",
    "renders": true
  },
  {
    "tool": "planigraph",
    "openscad_code": "// Planigraph - Medium Complexity Realistic Style\n// A drawing tool for creating parallel lines and measurements\n\n$fn=50;\n\n// Main colors\ncolor_plastic = [0.15,0.15,0.15];  // Dark grey body\ncolor_metal = [0.7,0.7,0.7];       // Light grey metal parts\ncolor_rubber = [0.1,0.1,0.1];      // Black rubber grips\ncolor_highlight = [0.9,0.1,0.1];   // Red accent\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 15;\nbody_height = 8;\n\nmodule body() {\n    color(color_plastic)\n    difference() {\n        // Main body\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Center slot for ruler\n        translate([0, 0, body_height/2 - 0.5])\n        cube([body_length - 10, 6, 1.5], center=true);\n    }\n}\n\nmodule grip_texture() {\n    // Rubber grip pattern\n    for(i=[-30:5:30]) {\n        translate([i, body_width/2 + 2, 0])\n        color(color_rubber)\n        cube([3, 4, body_height - 1]);\n    }\n}\n\nmodule ruler_slot() {\n    // Metal ruler channel\n    translate([0, 0, body_height/2 + 1])\n    color(color_metal)\n    cube([body_length - 8, 2, 1], center=true);\n}\n\nmodule ruler() {\n    // Sliding ruler\n    translate([0, 0, body_height/2 + 1.5])\n    color(color_metal)\n    difference() {\n        cube([body_length - 12, 1.5, 0.5], center=true);\n        \n        // Measurement markings\n        for(i=[-35:5:35]) {\n            translate([i, 0, 0.25])\n            cube([0.5, 1.5, 0.25]);\n        }\n        \n        // Every 10mm longer mark\n        for(i=[-30:10:30]) {\n            translate([i, 0, 0.25])\n            cube([1, 1.5, 0.25]);\n        }\n    }\n}\n\nmodule thumb_wheel() {\n    // Adjustment wheel on side\n    translate([body_length/2 - 5, body_width/2 + 3, 0])\n    rotate([90,0,0])\n    color(color_metal)\n    difference() {\n        cylinder(h=3, r=6, center=true);\n        \n        // Knurling pattern\n        for(i=[0:15:359]) {\n            rotate([0,0,i])\n            translate([5.5, 0, 0])\n            cube([1, 0.5, 3.2], center=true);\n        }\n        \n        // Center hole\n        cylinder(h=4, r=1.5, center=true);\n    }\n}\n\nmodule guide_pins() {\n    // Two metal guide pins at ends\n    for(pos=[-35, 35]) {\n        translate([pos, 0, -body_height/2 - 2])\n        color(color_metal)\n        cylinder(h=4, r=2);\n    }\n}\n\nmodule pencil_holder() {\n    // Pencil clamp mechanism\n    translate([-body_length/2 - 10, 0, 0])\n    color(color_plastic)\n    union() {\n        // Clamp body\n        cube([10, 8, body_height], center=true);\n        \n        // Pencil hole\n        translate([0, 0, 0])\n        rotate([90,0,0])\n        color(color_highlight)\n        cylinder(h=12, r=3.5);\n        \n        // Clamp screw\n        translate([5, 0, body_height/2 + 2])\n        color(color_metal)\n        cylinder(h=6, r=2);\n    }\n    \n    // Actual pencil hole (negative)\n    translate([-body_length/2 - 10, 0, 0])\n    rotate([90,0,0])\n    cylinder(h=20, r=4);\n}\n\nmodule scale_markings() {\n    // Body scale markings\n    for(i=[-35:5:35]) {\n        translate([i, body_width/2 + 1, body_height/2 - 0.5])\n        color([1,1,1])\n        cube([0.5, 0.5, 0.5]);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    grip_texture();\n    ruler_slot();\n    ruler();\n    thumb_wheel();\n    guide_pins();\n    pencil_holder();\n    scale_markings();\n}",
    "renders": true
  },
  {
    "tool": "goniograph",
    "openscad_code": "// Goniograph Tool - Medium Complexity Realistic Style\n// A tool for measuring crystal angles and orientations\n\n// Color definitions\ncolor_handle = \"DarkGoldenrod\";\ncolor_metal = \"Silver\";\ncolor_scale = \"Black\";\ncolor_glass = \"LightBlue\";\n\n// Main parameters\nbase_diameter = 60;\nbase_height = 8;\nhandle_length = 80;\nhandle_diameter = 12;\narm_length = 45;\narm_thickness = 4;\nstage_diameter = 35;\nstage_height = 3;\nlens_diameter = 18;\nlens_height = 8;\n\n// Base module with degree markings\nmodule base() {\n    color(color_metal)\n    difference() {\n        cylinder(h=base_height, d=base_diameter, $fn=60);\n        \n        // Central hole for handle\n        cylinder(h=base_height+1, d=handle_diameter+2, $fn=30);\n        \n        // Degree markings (every 10 degrees)\n        for(i=[0:35]) {\n            rotate([0,0,i*10])\n            translate([base_diameter/2-4, -0.5, -0.1])\n            cube([4,1,base_height+0.2]);\n        }\n        \n        // Main degree numbers\n        for(i=[0:11]) {\n            rotate([0,0,i*30])\n            translate([base_diameter/2-7, -1.5, -0.1])\n            cube([2,3,base_height+0.2]);\n        }\n    }\n    \n    // Number indicators\n    color(color_scale)\n    for(i=[0:11]) {\n        rotate([0,0,i*30])\n        translate([base_diameter/2-10, -2, base_height/2+1])\n        linear_extrude(height=2)\n        text(str(i*30), size=3, halign=\"center\");\n    }\n}\n\n// Rotating handle with grip texture\nmodule handle() {\n    color(color_handle)\n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, $fn=30);\n        \n        // Grip rings\n        for(i=[handle_diameter:handle_length-handle_diameter]) {\n            translate([0,0,i])\n            cylinder(h=1.5, d=handle_diameter-2, $fn=30);\n        }\n    }\n    \n    // Top collar\n    color(color_metal)\n    translate([0,0,handle_length])\n    cylinder(h=6, d=handle_diameter+4, $fn=30);\n}\n\n// Measuring arm with vernier scale\nmodule measuring_arm() {\n    color(color_metal)\n    union() {\n        // Main arm\n        translate([handle_diameter/2+2, -arm_thickness/2, 0])\n        cube([arm_length, arm_thickness, 6]);\n        \n        // Vernier scale attachment\n        translate([arm_length-5, -arm_thickness/2-3, 3])\n        cube([10, arm_thickness+6, 2]);\n        \n        // Vernier scale markings\n        color(color_scale)\n        for(i=[0:9]) {\n            translate([arm_length-4.5+i, -arm_thickness/2-2, 5.1])\n            cube([0.5, arm_thickness+4, 0.2]);\n        }\n    }\n    \n    // Pointer tip\n    translate([arm_length, -1, 0])\n    cylinder(h=6, d1=2, d2=0, $fn=16);\n}\n\n// Sample stage with crystal holder\nmodule sample_stage() {\n    color(color_metal)\n    difference() {\n        // Main stage\n        cylinder(h=stage_height, d=stage_diameter, $fn=60);\n        \n        // Center hole\n        cylinder(h=stage_height+1, d=4, $fn=20);\n        \n        // Radial grooves for crystal alignment\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n            translate([2, -0.5, -0.1])\n            cube([stage_diameter/2-2, 1, stage_height+0.2]);\n        }\n    }\n    \n    // Crystal clamp\n    color(color_metal)\n    translate([0, stage_diameter/2-3, stage_height])\n    rotate([90,0,0])\n    cylinder(h=8, d1=4, d2=2, $fn=16);\n}\n\n// Magnifying lens assembly\nmodule lens_assembly() {\n    color(color_metal)\n    difference() {\n        // Lens housing\n        cylinder(h=lens_height, d=lens_diameter+4, $fn=30);\n        \n        // Lens cavity\n        translate([0,0,1])\n        cylinder(h=lens_height-2, d=lens_diameter, $fn=30);\n        \n        // Light path\n        translate([0,0,-0.1])\n        cylinder(h=lens_height+0.2, d=lens_diameter/2, $fn=20);\n    }\n    \n    // Actual lens\n    color(color_glass, 0.6)\n    translate([0,0,lens_height/2])\n    sphere(d=lens_diameter, $fn=30);\n}\n\n// Assembly\n// Base\nbase();\n\n// Handle (rotating part)\ntranslate([0,0,base_height])\nhandle();\n\n// Measuring arm (attached to handle collar)\ntranslate([0,0,base_height+handle_length+6])\nrotate([90,0,0])\nmeasuring_arm();\n\n// Sample stage\ntranslate([0,0,base_height+handle_length+12])\nsample_stage();\n\n// Lens assembly (adjustable position)\ntranslate([arm_length-15, 0, base_height+handle_length+15])\nrotate([90,0,0])\nlens_assembly();",
    "renders": true
  },
  {
    "tool": "dynamometer",
    "openscad_code": "// Dynamometer Tool - Realistic Style, Medium Complexity\n// 3D printable handheld force gauge with digital display\n\n// Main parameters\n$fn = 32;\nbody_length = 80;\nbody_width = 40;\nbody_height = 20;\nhandle_length = 60;\nhandle_diameter = 12;\nhook_thickness = 3;\nhook_radius = 8;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        color(\"silver\") {\n            translate([0, 0, body_height/2])\n                cube([body_length, body_width, body_height], center=true);\n        }\n        \n        // Screen cavity\n        color(\"white\") {\n            translate([-body_length/2 + 10, 0, body_height/2 + 0.5])\n                cube([30, 25, 5], center=true);\n        }\n        \n        // Grip indentations\n        for(i = [0:3]) {\n            translate([body_length/2 - 15 - i*10, body_width/2, body_height/2])\n                cube([8, 2, 12], center=true);\n        }\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    color(\"darkblue\") {\n        translate([body_length/2 + handle_length/2 - 10, 0, -body_height/2 + handle_diameter/2])\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n    }\n    \n    // Handle grip rings\n    for(i = [0:4]) {\n        color(\"black\") {\n            translate([body_length/2 + 5 + i*10, 0, -body_height/2 + handle_diameter/2])\n                cylinder(h=2, d=handle_diameter + 2, center=true);\n        }\n    }\n}\n\n// Digital display\nmodule display() {\n    color(\"black\") {\n        translate([-body_length/2 + 12, 0, body_height/2 + 1])\n            cube([26, 21, 0.5], center=true);\n    }\n    \n    // Display digits\n    color(\"green\") {\n        for(x = [-10:10:10]) {\n            translate([x, -5, body_height/2 + 2])\n                cube([1, 8, 0.2], center=true);\n        }\n    }\n}\n\n// Hook assembly\nmodule measurement_hook() {\n    // Hook base\n    color(\"silver\") {\n        translate([-body_length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, d=8, center=true);\n    }\n    \n    // Hook curve\n    color(\"silver\") {\n        translate([-body_length/2 - 12, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=hook_thickness, d=hook_radius*2, center=true);\n                    translate([0, -hook_radius, 0])\n                        cube([hook_thickness*2, hook_radius*2, hook_thickness*2], center=true);\n                }\n    }\n    \n    // Hook tip\n    color(\"silver\") {\n        translate([-body_length/2 - 12, hook_radius, 0])\n            rotate([0, 90, 0])\n                cylinder(h=hook_thickness, d=2, center=true);\n    }\n}\n\n// Buttons\nmodule control_buttons() {\n    for(i = [0:1]) {\n        color(\"red\") {\n            translate([-body_length/2 + 25, body_width/2 - 5 - i*8, body_height/2 + 1])\n                cylinder(h=2, d=6, center=false);\n        }\n    }\n    color(\"green\") {\n        translate([-body_length/2 + 35, body_width/2 - 5, body_height/2 + 1])\n            cylinder(h=2, d=6, center=false);\n    }\n}\n\n// Assembly\nmain_body();\nhandle();\ndisplay();\nmeasurement_hook();\ncontrol_buttons();",
    "renders": true
  },
  {
    "tool": "dynamograph",
    "openscad_code": "// Dynamograph - Medium complexity realistic style\n// A dynamograph is a device for measuring and recording force or power\n\n$fn = 50;\n\n// Main parameters\nbody_length = 80;\nbody_width = 25;\nbody_height = 15;\nhandle_diameter = 12;\nhandle_length = 60;\nscreen_width = 30;\nscreen_height = 20;\nbutton_rows = 3;\nbutton_cols = 2;\n\n// Main body\nmodule main_body() {\n    color(\"silver\") {\n        // Main casing\n        translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Front bevel\n        translate([body_length/2 - 5, 0, body_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=body_width, r1=5, r2=0);\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    color(\"darkslategray\") {\n        // Main handle cylinder\n        rotate([90, 0, 0])\n            cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip rings\n        for(i = [0:5]) {\n            translate([0, 0, i * 10 - 25])\n                rotate([90, 0, 0])\n                    cylinder(h=2, d=handle_diameter + 2);\n        }\n        \n        // End cap\n        translate([0, 0, -handle_length/2 - 2])\n            rotate([90, 0, 0])\n                cylinder(h=4, d=handle_diameter + 4);\n    }\n}\n\n// LCD screen\nmodule screen() {\n    color(\"black\") {\n        translate([-body_length/4, 0, body_height + 1])\n            cube([screen_width, screen_height, 1], center=true);\n    }\n    \n    // Screen bezel\n    color(\"dimgray\") {\n        translate([-body_length/4, 0, body_height + 0.5])\n            cube([screen_width + 4, screen_height + 4, 2], center=true);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    for(row = [0:button_rows-1]) {\n        for(col = [0:button_cols-1]) {\n            translate([\n                body_length/4 + col * 8 - 4,\n                body_width/4 + row * 8 - 8,\n                body_height + 1\n            ]) {\n                color(\"red\") {\n                    cylinder(h=2, d=4);\n                }\n            }\n        }\n    }\n}\n\n// Measurement probe connector\nmodule probe_connector() {\n    color(\"gold\") {\n        translate([body_length/2 + 2, 0, body_height/2])\n            cylinder(h=8, d1=6, d2=4);\n        \n        // Threads\n        for(i = [0:3]) {\n            translate([body_length/2 + 4, 0, body_height/2 - 4 + i * 2])\n                rotate([0, 90, 0])\n                    cylinder(h=0.5, d=6.5);\n        }\n    }\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    color(\"black\") {\n        difference() {\n            translate([0, -body_width/2 - 0.5, 2])\n                cube([30, 1, 6], center=true);\n            \n            // Screws\n            translate([-10, -body_width/2 - 0.5, 2])\n                cylinder(h=2, d=2);\n            translate([10, -body_width/2 - 0.5, 2])\n                cylinder(h=2, d=2);\n        }\n    }\n}\n\n// Label area\nmodule label() {\n    color(\"white\") {\n        translate([-body_length/4, body_width/2 + 0.5, body_height/2])\n            cube([20, 0.5, 8], center=true);\n    }\n}\n\n// Assembly\nmain_body();\ntranslate([0, 0, -body_height/2 - handle_length/2])\n    handle();\nscreen();\nbuttons();\nprobe_connector();\nbattery_cover();\nlabel();",
    "renders": true
  },
  {
    "tool": "ergometer",
    "openscad_code": "// OpenSCAD Ergometer (Rowing Machine) - Realistic Style, Medium Complexity\n// Approximate dimensions: 100mm x 40mm x 30mm\n\n// Main colors\n$fn = 32;\n\n// Rail assembly\nmodule rail_assembly() {\n    color(\"silver\")\n    difference() {\n        // Main rail\n        translate([-45, 0, 0])\n            cube([90, 8, 6], center=true);\n        \n        // Recess for seat\n        translate([-45, 0, 2.5])\n            cube([85, 6, 4], center=true);\n    }\n}\n\n// Seat with rollers\nmodule seat() {\n    color(\"darkblue\")\n    union() {\n        // Seat base\n        translate([0, 0, 3.5])\n            cube([20, 12, 3], center=true);\n        \n        // Seat back support\n        translate([8, 0, 6.5])\n            cube([6, 12, 8], center=true);\n        \n        // Rollers\n        for(i = [-6, 6]) {\n            translate([i, 0, 2])\n                cylinder(h=2, r=2.5, center=true);\n        }\n    }\n}\n\n// Handle and cord mechanism\nmodule handle_mechanism() {\n    color(\"silver\")\n    union() {\n        // Flywheel housing\n        translate([-30, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=15, center=true);\n        \n        // Flywheel\n        color(\"gray\")\n        translate([-30, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=12, center=true);\n        \n        // Handle bar\n        color(\"black\")\n        translate([25, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h=50, r=1.5, center=true);\n        \n        // Handle grips\n        color(\"red\")\n        for(g = [-20, 20]) {\n            translate([g, 0, 15])\n                rotate([0, 90, 0])\n                    cylinder(h=8, r=2, center=true);\n        }\n        \n        // Cord (simplified as cylinder)\n        color(\"darkgray\")\n        translate([-5, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h=30, r=0.5, center=true);\n    }\n}\n\n// Footplates with straps\nmodule footplates() {\n    color(\"black\")\n    for(side = [-8, 8]) {\n        translate([-40, side, 8])\n            rotate([30, 0, 0])\n                cube([15, 8, 3], center=true);\n        \n        // Foot straps\n        color(\"darkgray\")\n        translate([-40, side, 10])\n            rotate([30, 0, 0])\n                cube([12, 1, 1], center=true);\n    }\n}\n\n// Support legs\nmodule support_legs() {\n    color(\"silver\")\n    union() {\n        // Front support\n        translate([-45, 0, -1.5])\n            cube([50, 30, 3], center=true);\n        \n        // Rear support\n        translate([40, 0, -1.5])\n            cube([20, 30, 3], center=true);\n        \n        // Side stabilizers\n        for(side = [-14, 14]) {\n            translate([0, side, -1.5])\n                cube([90, 2, 3], center=true);\n        }\n    }\n}\n\n// Monitor/display\nmodule monitor() {\n    color(\"black\")\n    union() {\n        // Monitor arm\n        translate([-25, 0, 25])\n            rotate([-30, 0, 0])\n                cube([2, 2, 15], center=true);\n        \n        // Monitor screen\n        translate([-25, 0, 32])\n            cube([12, 15, 3], center=true);\n        \n        // Screen display\n        color(\"cyan\")\n        translate([-25, 0, 33.5])\n            cube([10, 13, 0.5], center=true);\n    }\n}\n\n// Assembly\nsupport_legs();\nrail_assembly();\ntranslate([0, 0, 0]) seat();\nhandle_mechanism();\nfootplates();\nmonitor();",
    "renders": true
  },
  {
    "tool": "loadmeter",
    "openscad_code": "// Loadmeter (spring scale) in realistic style\n// 3D printable, medium complexity, ~70 mm total length\n\n// Main color scheme\ncolor(\"silver\") \ndifference() {\n    // Main body - cylindrical with flat sides\n    union() {\n        // Central body - 60 mm long cylinder\n        translate([0, 0, 5])\n            cylinder(d=20, h=50, $fn=32);\n        \n        // Flattened sides for grip\n        translate([-15, 0, 5])\n            cube([30, 5, 50]);\n        translate([0, -15, 5])\n            cube([5, 30, 50]);\n    }\n    \n    // Central hole for mechanism window\n    translate([0, 0, 10])\n        cylinder(d=8, h=40, $fn=32);\n    \n    // Side windows to view scale\n    for(i = [1:5]) {\n        translate([10, 0, 15 + (i-1)*8])\n            cube([5, 3, 2]);\n    }\n}\n\n// Hook attachment point at bottom\ncolor(\"darkgray\")\ntranslate([0, 0, 0])\n    difference() {\n        cylinder(d=8, h=5, $fn=16);\n        translate([0, 0, 2.5])\n            rotate([0, 90, 0])\n                cylinder(d=3, h=10, $fn=16);\n    }\n\n// Hook assembly\ncolor(\"gray\")\ntranslate([0, 0, -5])\n    rotate([0, 0, 45])\n        difference() {\n            // Hook body\n            torus(5, 1.5);\n            \n            // Hook opening\n            translate([5, 0, 0])\n                cube([10, 10, 10], center=true);\n        }\n\n// Top eyelet for hanging\ncolor(\"darkgray\")\ntranslate([0, 0, 60])\n    difference() {\n        cylinder(d=8, h=8, $fn=16);\n        rotate([0, 90, 0])\n            cylinder(d=4, h=12, $fn=16);\n    }\n\n// Scale markings\ncolor(\"black\")\nfor(i = [0:4]) {\n    translate([11, 1.5, 17 + i*8])\n        cube([3, 0.5, 0.5]);\n}\n\n// Knurled grip ring at top\ncolor(\"dimgray\")\nfor(i = [0:11]) {\n    rotate([0, 0, i*30])\n        translate([10, 0, 52])\n            cube([2, 1, 10]);\n}\n\n// Calibration screw detail\ncolor(\"gold\")\ntranslate([0, 8, 55])\n    cylinder(d=3, h=2, $fn=12);\n\n// Internal indicator (visible through windows)\ncolor(\"red\")\ntranslate([0, 0, 25])\n    cube([2, 1, 20], center=true);\n\n// Helper module for torus shape\nmodule torus(outer_r, inner_r) {\n    rotate_extrude()\n        translate([outer_r, 0, 0])\n            circle(r=inner_r);\n}",
    "renders": true
  },
  {
    "tool": "forcemeter",
    "openscad_code": "// Forcemeter (spring scale) - medium complexity realistic style\n// Total length ~70mm\n\n// Colors\n$fn = 32;\n\nmodule body() {\n    difference() {\n        union() {\n            // Main cylindrical body\n            color(\"silver\")\n            cylinder(h=50, d=22, center=false);\n            \n            // Grip rings\n            for(i=[5:10:45]) {\n                translate([0,0,i])\n                color(\"black\")\n                cylinder(h=2, d=23.5, center=false);\n            }\n        }\n        \n        // Hollow center\n        translate([0,0,-1])\n        cylinder(h=52, d=18, center=false);\n        \n        // Window cutout\n        translate([-11,0,25])\n        cube([22,5,15]);\n    }\n}\n\nmodule hook() {\n    // Hook arm\n    translate([0,0,-5])\n    rotate([90,0,0])\n    difference() {\n        color(\"silver\")\n        cylinder(h=15, d=3, center=false);\n        \n        // Threaded section\n        for(i=[0:1.5:15]) {\n            translate([0,0,i])\n            rotate([0,0,45])\n            cube([3.5,0.5,1], center=true);\n        }\n    }\n    \n    // Hook loop\n    translate([0,-8,-20])\n    rotate([90,0,0])\n    color(\"silver\")\n    difference() {\n        torus(5,2);\n        translate([0,0,-5])\n        cube([20,20,10], center=true);\n    }\n}\n\nmodule indicator() {\n    // Spring\n    translate([0,0,-5])\n    color(\"gold\")\n    for(i=[0:2:40]) {\n        rotate([0,0,i*15])\n        translate([7.5,0,i])\n        sphere(d=1.5, $fn=8);\n    }\n    \n    // Indicator rod\n    translate([0,0,35])\n    color(\"red\")\n    cylinder(h=15, d=1.5, center=false);\n    \n    // Indicator plate\n    translate([0,0,35])\n    color(\"white\")\n    cylinder(h=1, d=5, center=false);\n}\n\nmodule scale() {\n    // Scale markings\n    for(i=[0:5:40]) {\n        translate([9.5,0,i+10])\n        color(\"black\")\n        cube([2,0.5,0.5], center=true);\n        \n        // Numbers every 10 units\n        if(i % 10 == 0) {\n            translate([12,0,i+10])\n            rotate([0,90,0])\n            color(\"black\")\n            linear_extrude(height=0.5)\n            text(str(i), size=2, halign=\"center\", valign=\"center\");\n        }\n    }\n}\n\nmodule top_loop() {\n    // Top hanging loop\n    translate([0,0,50])\n    rotate([90,0,0])\n    color(\"silver\")\n    difference() {\n        torus(6,2);\n        translate([0,0,-6])\n        cube([20,20,12], center=true);\n    }\n}\n\n// Assembly\nbody();\nhook();\nindicator();\nscale();\ntop_loop();",
    "renders": true
  },
  {
    "tool": "torquemeter",
    "openscad_code": "// Torque Wrench / Torquemeter Tool\n// Realistic style, medium complexity\n\n// Overall dimensions\n$fn = 32;\n\nmodule handle() {\n    // Main handle body\n    color(\"darkslategray\")\n    difference() {\n        cylinder(h=80, r1=10, r2=9);\n        // Grip grooves\n        for(i=[0:10:70]) {\n            translate([0, 0, i+5])\n            rotate([0, 0, 45])\n            cube([18, 2.5, 5], center=true);\n        }\n    }\n    \n    // Rubber grip rings\n    color(\"black\")\n    for(i=[15:15:60]) {\n        translate([0, 0, i])\n        cylinder(h=8, r=11);\n    }\n    \n    // End cap\n    color(\"silver\")\n    translate([0, 0, 80])\n    cylinder(h=8, r=11);\n}\n\nmodule ratchet_head() {\n    // Main ratchet housing\n    color(\"silver\")\n    difference() {\n        union() {\n            // Rectangular body\n            translate([-12, -8, 0])\n            cube([24, 16, 20]);\n            \n            // Rounded top\n            translate([0, 0, 20])\n            cylinder(h=8, r=12);\n        }\n        \n        // Square drive hole\n        translate([0, 0, 5])\n        rotate([0, 0, 45])\n        cube([8, 8, 25], center=true);\n    }\n    \n    // Direction selector\n    color(\"red\")\n    translate([0, 12, 15])\n    rotate([90, 0, 0])\n    cylinder(h=6, r=3);\n    \n    // Selector markings\n    color(\"white\")\n    translate([0, 12, 12])\n    cube([0.5, 3, 0.5], center=true);\n}\n\nmodule torque_adjustment() {\n    // Adjustment collar\n    color(\"silver\")\n    translate([0, 0, 10])\n    cylinder(h=15, r=12);\n    \n    // Knurled grip\n    color(\"darkgray\")\n    for(i=[0:10:350]) {\n        rotate([0, 0, i])\n        translate([11.5, 0, 10])\n        cube([1, 0.5, 15]);\n    }\n    \n    // Scale markings\n    color(\"black\")\n    for(i=[0:18:180]) {\n        rotate([0, 0, i])\n        translate([11, 0, 17])\n        cube([1, 0.2, 2]);\n    }\n}\n\nmodule torque_indicator() {\n    // Spring indicator\n    color(\"yellow\")\n    translate([0, 0, -5])\n    difference() {\n        cylinder(h=5, r=4);\n        translate([0, 0, -1])\n        cylinder(h=7, r=2);\n    }\n    \n    // Pointer\n    color(\"red\")\n    translate([0, 0, -6])\n    rotate([0, 0, 0])\n    cube([20, 2, 1]);\n}\n\n// Assembly\nhandle();\ntranslate([0, 0, 0])\nratchet_head();\n\ntranslate([0, 0, 0])\ntorque_adjustment();\n\ntranslate([0, 0, -6])\ntorque_indicator();",
    "renders": true
  },
  {
    "tool": "springmeter",
    "openscad_code": "// Springmeter (spring scale) - Realistic style, medium complexity\n// Overall dimensions: ~80mm length, ~20mm width\n\n// Parameters\n$fn = 32;\nspring_length = 60;\nspring_diameter = 8;\nbody_width = 18;\nbody_height = 12;\nhook_diameter = 3;\nhook_length = 15;\nscale_marking_length = 6;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_spring = [0.8, 0.8, 0.8];\ncolor_hook = [0.7, 0.7, 0.7];\ncolor_markings = [1, 1, 1];\n\n// Main body assembly\nunion() {\n    // Main body tube\n    color(color_body)\n    difference() {\n        // Outer tube\n        cylinder(h = spring_length, r = body_width/2, center = true);\n        \n        // Inner hollow\n        cylinder(h = spring_length + 1, r = body_width/2 - 2, center = true);\n    }\n    \n    // Top end cap\n    translate([0, 0, spring_length/2])\n    color(color_body)\n    cylinder(h = 4, r = body_width/2 + 1, center = false);\n    \n    // Bottom end cap with hook hole\n    translate([0, 0, -spring_length/2 - 4])\n    color(color_body)\n    difference() {\n        cylinder(h = 4, r = body_width/2 + 1, center = false);\n        // Hook hole\n        translate([0, 0, -1])\n        cylinder(h = 6, r = hook_diameter/2 + 0.5, center = false);\n    }\n    \n    // Measurement scale window\n    translate([body_width/2 - 1, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        // Window frame\n        cube([spring_length, body_height, 2], center = true);\n        \n        // Window opening\n        translate([0, 0, -1])\n        cube([spring_length - 4, body_height - 4, 3], center = true);\n    }\n    \n    // Scale markings\n    for(i = [0:5]) {\n        translate([body_width/2, -body_height/2 + 2 + i*2, -spring_length/2 + 5 + i*10])\n        color(color_markings)\n        cube([scale_marking_length, 0.5, 1]);\n    }\n    \n    // Spring assembly\n    translate([0, 0, -spring_length/2 + 2])\n    spring_coil(spring_length - 4, spring_diameter, 8);\n    \n    // Top hook\n    translate([0, 0, spring_length/2 + 2])\n    hook_assembly();\n    \n    // Bottom hook\n    translate([0, 0, -spring_length/2 - 2])\n    rotate([180, 0, 0])\n    hook_assembly();\n    \n    // Grip texture rings\n    for(i = [0:4]) {\n        translate([0, 0, -spring_length/2 + 8 + i*10])\n        color([0.1, 0.1, 0.1])\n        difference() {\n            cylinder(h = 2, r = body_width/2 + 0.5, center = true);\n            cylinder(h = 3, r = body_width/2 - 1, center = true);\n        }\n    }\n}\n\n// Spring coil module\nmodule spring_coil(height, diameter, coils) {\n    color(color_spring)\n    for(i = [0:coils*8]) {\n        rotate([0, 0, i * 360/(coils*8)])\n        translate([diameter/2 * cos(i * 360/(coils*8)), \n                   diameter/2 * sin(i * 360/(coils*8)), \n                   i * height/(coils*8)])\n        sphere(d = 1.2, $fn = 8);\n    }\n}\n\n// Hook assembly module\nmodule hook_assembly() {\n    color(color_hook)\n    union() {\n        // Hook stem\n        cylinder(h = 5, r = hook_diameter/2);\n        \n        // Hook curve\n        translate([0, hook_diameter, -hook_length/2])\n        rotate([90, 0, 0])\n        difference() {\n            torus(hook_diameter*2, hook_diameter/2);\n            // Cut for opening\n            translate([0, -hook_diameter, 0])\n            cube([hook_diameter*4, hook_diameter*2, hook_diameter*2], center = true);\n        }\n    }\n}\n\n// Torus helper for hook curve\nmodule torus(outer_r, inner_r) {\n    rotate_extrude()\n    translate([outer_r, 0, 0])\n    circle(r = inner_r);\n}",
    "renders": true
  },
  {
    "tool": "springbalance",
    "openscad_code": "// Realistic Spring Balance - Medium Complexity\n// Overall size: ~70mm height, 25mm diameter\n\n$fn = 48;\n\n// Main colors\ncolor_body = [0.8, 0.8, 0.8]; // Gray\ncolor_hook = [0.6, 0.6, 0.6]; // Dark gray\ncolor_scale = [1, 1, 1]; // White\ncolor_red = [0.8, 0.2, 0.2]; // Red indicator\n\n// Main body assembly\nmodule spring_balance() {\n    union() {\n        // Main cylindrical body\n        color(color_body)\n        translate([0, 0, 30])\n        cylinder(h = 60, d = 25, center = false);\n        \n        // Top cap with hole for hook\n        color(color_body)\n        translate([0, 0, 90])\n        cylinder(h = 5, d1 = 25, d2 = 20, center = false);\n        \n        // Bottom cap\n        color(color_body)\n        translate([0, 0, 25])\n        cylinder(h = 5, d1 = 20, d2 = 25, center = false);\n        \n        // Hook at top\n        color(color_hook)\n        translate([0, 0, 95])\n        hook();\n        \n        // Hook at bottom\n        color(color_hook)\n        translate([0, 0, 20])\n        rotate([180, 0, 0])\n        hook();\n        \n        // Scale window\n        color(color_scale)\n        translate([12.5, 0, 55])\n        rotate([0, 90, 0])\n        cylinder(h = 30, d = 3, center = true);\n        \n        // Scale markings\n        scale_markings();\n        \n        // Indicator needle\n        color(color_red)\n        translate([11, 0, 55])\n        rotate([0, 90, 0])\n        indicator_needle();\n        \n        // Grip rings\n        grip_rings();\n    }\n}\n\n// Hook module\nmodule hook() {\n    difference() {\n        // Hook base\n        cylinder(h = 5, d = 8, center = false);\n        \n        // Central hole\n        translate([0, 0, -1])\n        cylinder(h = 7, d = 4, center = false);\n    }\n    \n    // Hook curve\n    rotate_extrude(angle = 180, $fn = 32)\n    translate([6, 0, 0])\n    circle(r = 2, $fn = 16);\n}\n\n// Scale markings module\nmodule scale_markings() {\n    for (i = [0:5]) {\n        // Major tick marks\n        color([0, 0, 0])\n        translate([12.7, -1, 40 + i * 5])\n        cube([2, 2, 0.5]);\n        \n        // Minor tick marks\n        for (j = [1:4]) {\n            color([0.4, 0.4, 0.4])\n            translate([12.7, -0.5, 41 + i * 5 + j])\n            cube([1, 1, 0.3]);\n        }\n    }\n    \n    // Numbers\n    color([0, 0, 0])\n    translate([15, -2, 40])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"0\", size = 3);\n    \n    color([0, 0, 0])\n    translate([15, -2, 65])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"5\", size = 3);\n}\n\n// Indicator needle\nmodule indicator_needle() {\n    difference() {\n        cylinder(h = 2, d = 4, center = true);\n        translate([0, 0, -1])\n        cylinder(h = 4, d = 2, center = true);\n    }\n    \n    // Needle pointer\n    translate([0, 0, 1])\n    cube([15, 1, 2], center = true);\n}\n\n// Grip rings for better handling\nmodule grip_rings() {\n    for (i = [0:4]) {\n        color([0.7, 0.7, 0.7])\n        translate([0, 0, 35 + i * 10])\n        difference() {\n            cylinder(h = 2, d = 26, center = true);\n            cylinder(h = 3, d = 24, center = true);\n        }\n    }\n}\n\n// Render the spring balance\nspring_balance();",
    "renders": true
  },
  {
    "tool": "dynamoscope",
    "openscad_code": "// Dynamoscope (Stethoscope) - Realistic Medium Complexity\n// Overall dimensions approximately 80mm x 60mm x 20mm\n\n// Colors\n$fn=50;\n\n// Main tube assembly\nmodule tubing() {\n    color([0.2,0.2,0.2]) {\n        // Y-shaped tube junction\n        translate([0,0,5]) {\n            difference() {\n                sphere(d=8);\n                cube([20,20,10], center=true);\n            }\n        }\n        \n        // Left ear tube\n        rotate([0,20,0]) {\n            cylinder(h=25, d=5);\n            translate([0,0,25]) {\n                rotate([0,20,0]) {\n                    cylinder(h=25, d1=5, d2=4);\n                }\n            }\n        }\n        \n        // Right ear tube\n        rotate([0,-20,0]) {\n            cylinder(h=25, d=5);\n            translate([0,0,25]) {\n                rotate([0,-20,0]) {\n                    cylinder(h=25, d1=5, d2=4);\n                }\n            }\n        }\n        \n        // Main tube\n        translate([0,0,-35]) {\n            cylinder(h=40, d=5);\n        }\n    }\n}\n\n// Ear tips\nmodule ear_tips() {\n    for (angle=[20,-20]) {\n        color([0.1,0.1,0.1]) {\n            rotate([0,angle,0]) {\n                translate([0,0,50]) {\n                    rotate([0,angle,0]) {\n                        sphere(d=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Chest piece (diaphragm)\nmodule chest_piece() {\n    color([0.7,0.7,0.7]) {\n        // Main diaphragm housing\n        translate([0,0,-45]) {\n            cylinder(h=8, d=20);\n            \n            // Diaphragm membrane\n            translate([0,0,-0.5]) {\n                cylinder(h=1, d=18);\n            }\n            \n            // Bell side\n            difference() {\n                translate([0,0,8]) {\n                    cylinder(h=10, d=18);\n                }\n                translate([0,0,8]) {\n                    cylinder(h=11, d=15);\n                }\n            }\n        }\n        \n        // Tubing connector\n        color([0.2,0.2,0.2]) {\n            translate([0,0,-5]) {\n                cylinder(h=5, d=4);\n            }\n        }\n    }\n}\n\n// Spring mechanism\nmodule spring_mechanism() {\n    color([0.8,0.8,0.8]) {\n        // Spring housing\n        translate([0,0,5]) {\n            rotate([90,0,0]) {\n                difference() {\n                    cylinder(h=15, d=4);\n                    cylinder(h=16, d=3);\n                }\n            }\n        }\n        \n        // Spring coils (simplified)\n        for (i=[0:3]) {\n            translate([0,0,5+i*3]) {\n                rotate([90,0,0]) {\n                    rotate([0,0,i*90]) {\n                        cube([0.8,10,0.8], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    tubing();\n    ear_tips();\n    chest_piece();\n    spring_mechanism();\n}",
    "renders": true
  },
  {
    "tool": "tensometer",
    "openscad_code": "// Tensometer Tool - Realistic Style, Medium Complexity\n// A handheld device for measuring tension in materials\n\n$fn = 36;\n\n// Main parameters\ntool_length = 80;\ntool_width = 25;\ntool_height = 15;\nhandle_length = 40;\ngrip_diameter = 12;\n\nmodule handle() {\n    // Main handle body\n    color(\"darkslategray\")\n    difference() {\n        cylinder(h=handle_length, d=grip_diameter, center=true);\n        // Finger grooves\n        for(i=[-1:1]) {\n            translate([0, 0, -handle_length/2 + 10 + i*10])\n            rotate([90,0,0])\n            cylinder(h=grip_diameter+2, d=2, center=true);\n        }\n    }\n    \n    // Grip texture rings\n    color(\"black\")\n    for(z=[-handle_length/2+5:5:handle_length/2-5]) {\n        translate([0,0,z])\n        cylinder(h=1, d=grip_diameter+0.5, center=true);\n    }\n}\n\nmodule body() {\n    color(\"silver\")\n    difference() {\n        // Main body\n        translate([0,0,0])\n        cube([tool_length, tool_width, tool_height], center=true);\n        \n        // Display window\n        translate([-tool_length/2+10, 0, tool_height/2-1])\n        cube([20, tool_width-6, 2], center=true);\n        \n        // Calibration port\n        translate([tool_length/2-8, 0, tool_height/2-3])\n        cylinder(h=5, d=4, center=true);\n    }\n    \n    // Display screen\n    color(\"royalblue\")\n    translate([-tool_length/2+10, 0, tool_height/2+0.1])\n    cube([18, tool_width-8, 0.5], center=true);\n    \n    // Control buttons\n    color(\"dimgray\")\n    translate([-tool_length/2+25, tool_width/4, tool_height/2+0.5])\n    cylinder(h=1, d=6, center=true);\n    \n    translate([-tool_length/2+25, -tool_width/4, tool_height/2+0.5])\n    cylinder(h=1, d=6, center=true);\n}\n\nmodule measurement_jaws() {\n    // Fixed jaw\n    color(\"lightgray\")\n    translate([tool_length/2-2, 0, -tool_height/4])\n    cube([4, 8, tool_height/2], center=true);\n    \n    // Movable jaw mechanism\n    color(\"darkgray\")\n    translate([tool_length/2+3, 0, 0])\n    cube([6, tool_width-4, tool_height/2], center=true);\n    \n    // Measurement teeth\n    color(\"silver\")\n    for(i=[-1:0.5:1]) {\n        translate([tool_length/2-2, i*3, -tool_height/4])\n        cube([1, 0.5, 2], center=true);\n        translate([tool_length/2+6, i*3, -tool_height/4])\n        cube([1, 0.5, 2], center=true);\n    }\n}\n\nmodule strain_gauge() {\n    // Protective housing\n    color(\"darkslateblue\")\n    translate([0, 0, -tool_height/2-3])\n    cube([30, 20, 6], center=true);\n    \n    // Sensor wire\n    color(\"gold\")\n    translate([0, 0, -tool_height/2-5])\n    cylinder(h=0.5, d=0.5, center=true);\n}\n\nmodule markings() {\n    // Measurement scale\n    color(\"black\")\n    for(i=[0:5:30]) {\n        translate([tool_length/2-15-i, tool_width/2+0.1, 0])\n        cube([0.5, 2, 0.1], center=true);\n        \n        if(i%10 == 0) {\n            translate([tool_length/2-15-i, tool_width/2+2, 0])\n            cube([0.5, 4, 0.1], center=true);\n        }\n    }\n}\n\n// Assemble the tensometer\nunion() {\n    // Main assembly\n    translate([0, 0, 0])\n    body();\n    \n    // Handle attached at 90 degrees\n    translate([-tool_length/2-10, 0, 0])\n    rotate([0, 90, 0])\n    handle();\n    \n    // Measurement components\n    translate([0, 0, 0])\n    measurement_jaws();\n    \n    // Strain gauge assembly\n    translate([0, 0, 0])\n    strain_gauge();\n    \n    // Markings\n    markings();\n}",
    "renders": true
  },
  {
    "tool": "extensometer",
    "openscad_code": "// Extensometer Tool - Realistic Style, Medium Complexity\n// 3D Printable Version\n\n// Overall dimensions\nbody_length = 80;\nbody_height = 12;\nbody_width = 20;\nhandle_length = 30;\nprobe_diameter = 3;\nprobe_length = 25;\n\n// Colors\nbody_color = \"Silver\";\nhandle_color = \"Black\";\nprobe_color = \"Gray\";\nscale_color = \"Red\";\nmarking_color = \"Black\";\n\n// Main body with rounded edges\nmodule main_body() {\n    color(body_color)\n    union() {\n        // Central body\n        translate([0, 0, body_height/2])\n            difference() {\n                cube([body_length, body_width, body_height], center=true);\n                \n                // Rounded edges\n                translate([body_length/2-5, 0, body_height/2])\n                    rotate([0, 90, 0])\n                        cylinder(h=body_width+2, r=5, $fn=20);\n                translate([-body_length/2+5, 0, body_height/2])\n                    rotate([0, 90, 0])\n                        cylinder(h=body_width+2, r=5, $fn=20);\n            }\n        \n        // Reinforcement ribs\n        for(i = [-30:20:30]) {\n            translate([i, 0, -body_height/4])\n                cube([2, body_width-2, body_height/2], center=true);\n        }\n    }\n}\n\n// Digital display housing\nmodule display_housing() {\n    color(\"DarkGray\")\n    translate([body_length/2-15, 0, body_height+3])\n        cube([20, body_width-4, 8], center=true);\n}\n\n// Measurement scale markings\nmodule scale_markings() {\n    color(scale_color)\n    union() {\n        // Main scale\n        translate([0, body_width/2+1, body_height/2])\n            cube([body_length-10, 0.5, 0.5], center=true);\n        \n        // Tick marks\n        for(i = [-35:5:35]) {\n            translate([i, body_width/2+1.5, body_height/2])\n                cube([0.5, 2, 0.5], center=true);\n        }\n    }\n}\n\n// Gripping handle\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Main handle\n        translate([-body_length/2-handle_length/2-2, 0, body_height/2])\n            difference() {\n                cube([handle_length, body_width-4, body_height], center=true);\n                \n                // Finger grooves\n                for(i = [-10:5:10]) {\n                    translate([-body_length/2-handle_length/2-2, i, body_height/2])\n                        sphere(r=2, $fn=15);\n                }\n            }\n        \n        // Handle end cap\n        translate([-body_length/2-handle_length-2, 0, body_height/2])\n            cylinder(h=body_width-4, r=body_width/2-2, $fn=20);\n    }\n}\n\n// Measurement probes\nmodule probe(position, angle) {\n    color(probe_color)\n    rotate([0, 0, angle])\n    translate([position, 0, -probe_length/2])\n        union() {\n            // Probe shaft\n            cylinder(h=probe_length, r=probe_diameter/2, $fn=8);\n            \n            // Probe tip\n            translate([0, 0, -probe_length/2-2])\n                cylinder(h=4, r1=probe_diameter/2, r2=0.5, $fn=8);\n            \n            // Contact pad\n            translate([0, 0, probe_length/2])\n                cylinder(h=2, r=probe_diameter*1.5, $fn=8);\n        }\n}\n\n// Adjustment screw\nmodule adjustment_screw() {\n    color(\"Silver\")\n    translate([body_length/2-5, 0, body_height+5])\n        union() {\n            // Threaded rod\n            cylinder(h=10, r=3, $fn=8);\n            \n            // Knurled knob\n            translate([0, 0, 10])\n                cylinder(h=6, r=5, $fn=30);\n            \n            // Knurling grooves\n            for(i = [0:15:360]) {\n                rotate([0, 0, i])\n                    translate([4.5, 0, 10])\n                        cube([1, 0.5, 6], center=true);\n            }\n        }\n}\n\n// Assembly\nmain_body();\ndisplay_housing();\nscale_markings();\nhandle();\n\n// Probes (left and right)\nprobe(body_length/2-10, 0);\nprobe(-body_length/2+10, 0);\n\nadjustment_screw();\n\n// Model orientation for printing\nrotate([0, 180, 0])\n    translate([0, 0, -body_height/2]);",
    "renders": true
  },
  {
    "tool": "strainmeter",
    "openscad_code": "// Strainmeter (extensometer) â€“ 3D-printable, realistic style, medium complexity\n// Overall length ~80 mm, designed for FDM printing with 0.8 mm walls\n// All overhangs â‰¤ 45Â° or bridged\n\n$fn = 36;               // Smooth cylinders & spheres\nwall = 1.6;             // 2 perimeters on 0.4 mm nozzle\n\nmodule mainBody() {\n    color(\"silver\")\n    difference() {\n        // Main tube 60 mm long, 12 mm OD\n        cylinder(h = 60, d = 12, center = true);\n        translate([0,0,-30.5])\n            cylinder(h = 61, d = 12 - 2*wall, center = false);\n    }\n}\n\nmodule pointedTip() {\n    color(\"silver\")\n    rotate([0,180,0])        // cone points outward\n    cylinder(h = 10, d1 = 12, d2 = 0, center = true);\n}\n\nmodule flatTip() {\n    color(\"silver\")\n    cylinder(h = 2, d = 12, center = true);\n}\n\nmodule knurledGrip(dia, len) {\n    color(\"black\")\n    difference() {\n        cylinder(h = len, d = dia, center = true);\n        // Simple knurl via subtracted small cylinders\n        for (i = [0:30]) {\n            rotate([0, 0, i*12])\n            translate([dia/2 - 0.3, 0, -len/2 - 0.1])\n                rotate([90,0,0])\n                cylinder(h = len + 0.2, d = 0.8, $fn = 6);\n        }\n    }\n}\n\nmodule scaleMarks() {\n    color(\"red\")\n    for (i = [0:10]) {\n        translate([0, 6.5, -25 + i*5])\n            cube([0.4, 2, 0.2], center = true);\n    }\n}\n\nmodule digitalReadout() {\n    color(\"darkslategray\")\n    translate([0, 8, 0])\n    cube([20, 8, 5], center = true);\n    color(\"lime\")\n    translate([0, 8.5, 0])\n    cube([16, 5, 0.5], center = true);\n}\n\nmodule thumbWheel() {\n    color(\"silver\")\n    rotate([90,0,0])\n    difference() {\n        cylinder(h = 8, d = 16, center = true);\n        // Spoke cutouts\n        for (a = [0:60:359])\n            rotate([0,0,a])\n            translate([4,0,0])\n            cube([8, 2, 10], center = true);\n    }\n}\n\nmodule strainmeter() {\n    union() {\n        // Left side\n        translate([-30,0,0]) mainBody();\n        translate([-65,0,0]) pointedTip();\n        translate([-35,0,0]) knurledGrip(14, 10);\n\n        // Right side (movable rod)\n        translate([30,0,0]) mirror([1,0,0]) mainBody();\n        translate([65,0,0]) flatTip();\n        translate([35,0,0]) knurledGrip(14, 10);\n\n        // Central carriage\n        translate([0,0,0]) digitalReadout();\n        translate([0, 8, 10]) thumbWheel();\n        translate([0,0,0]) scaleMarks();\n        // Protective bridge over scale\n        color(\"silver\")\n        translate([0, 6, 0])\n        cube([62, 3, 6], center = true);\n    }\n}\n\nstrainmeter();",
    "renders": true
  },
  {
    "tool": "stressmeter",
    "openscad_code": "// Stressmeter Tool - OpenSCAD\n// A handheld stress measurement device with digital display and grip\n\n// Main parameters\nbody_length = 85;\nbody_width = 45;\nbody_thickness = 25;\nhandle_length = 70;\nhandle_diameter = 22;\ndisplay_width = 35;\ndisplay_height = 20;\nbutton_diameter = 6;\nsensor_diameter = 12;\n\n// Colors\n$fn = 32;\n\n// Main body\nmodule main_body() {\n    color(\"silver\") {\n        // Main housing\n        difference() {\n            rounded_box([body_length, body_width, body_thickness], 3);\n            // Battery compartment\n            translate([body_length/2 - 15, 0, body_thickness/2 - 2])\n                cube([25, 20, 1.5], center=true);\n        }\n        \n        // Display bezel\n        translate([body_length/2 - 20, 0, body_thickness/2 + 1])\n            color(\"darkslategray\")\n            cube([display_width + 6, display_height + 6, 2], center=true);\n    }\n}\n\n// Rounded box helper\nmodule rounded_box(size, radius) {\n    hull() {\n        for (x = [-size[0]/2 + radius, size[0]/2 - radius])\n            for (y = [-size[1]/2 + radius, size[1]/2 - radius])\n                for (z = [-size[2]/2 + radius, size[2]/2 - radius])\n                    translate([x, y, z])\n                        sphere(r=radius);\n    }\n}\n\n// Handle with grip\nmodule handle() {\n    color(\"black\") {\n        // Main handle\n        translate([0, 0, -handle_length/2])\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip rings\n        for (i = [-25:10:25]) {\n            translate([0, i, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=2, d=handle_diameter + 3);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    color(\"black\") {\n        translate([body_length/2 - 20, 0, body_thickness/2 + 2.5])\n            cube([display_width, display_height, 0.5], center=true);\n    }\n    \n    // Stress level bars\n    for (i = [0:4]) {\n        color(\"limegreen\") {\n            translate([body_length/2 - 35 + i*7, -5, body_thickness/2 + 3.5])\n                cube([4, 10, 0.2]);\n        }\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    color(\"red\") {\n        translate([body_length/2 - 5, -body_width/4, body_thickness/2 + 1])\n            cylinder(h=1.5, d=button_diameter);\n    }\n    color(\"green\") {\n        translate([body_length/2 - 5, body_width/4, body_thickness/2 + 1])\n            cylinder(h=1.5, d=button_diameter);\n    }\n}\n\n// Sensor pad\nmodule sensor() {\n    color(\"steelblue\") {\n        translate([body_length - 5, 0, body_thickness/2 - 2])\n            difference() {\n                cylinder(h=4, d=sensor_diameter);\n                translate([0, 0, -1])\n                    cylinder(h=2, d=sensor_diameter - 4);\n            }\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    color(\"silver\") {\n        for (i = [0:3]) {\n            translate([body_length/2 + 15, -body_width/3 + i*10, body_thickness/2 - 1])\n                cube([15, 2, 2]);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2 + body_thickness/2])\n    union() {\n        main_body();\n        handle();\n        display();\n        buttons();\n        sensor();\n        vents();\n    }",
    "renders": true
  },
  {
    "tool": "deflectometer",
    "openscad_code": "// OpenSCAD Deflectometer Tool - Realistic Style, Medium Complexity\n// Approx 80mm x 50mm x 30mm\n\n// Main body parameters\nbody_length = 80;\nbody_width = 20;\nbody_height = 15;\nhandle_length = 50;\n\n// Module for rounded rectangle (used throughout)\nmodule rounded_rect(l, w, h, r) {\n    translate([0, 0, h/2])\n    minkowski() {\n        cube([l-2*r, w-2*r, h], center=true);\n        cylinder(r=r, h=h, center=true);\n    }\n}\n\n// Main body with measurement scale\nmodule main_body() {\n    color(\"silver\")\n    difference() {\n        rounded_rect(body_length, body_width, body_height, 3);\n        \n        // Measurement scale markings\n        for(i=[0:10]) {\n            translate([-body_length/2 + 5 + i*7, body_width/2 - 1, -body_height/2 - 0.5])\n            cube([0.5, 2, body_height + 1]);\n        }\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    color(\"darkgray\")\n    union() {\n        // Main handle tube\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, r=8, center=true);\n        \n        // Grip rings\n        for(i=[-20:5:20]) {\n            color(\"black\")\n            rotate([90, 0, 0])\n            translate([0, 0, i])\n            cylinder(h=3, r=8.5, center=true);\n        }\n    }\n}\n\n// Dial indicator mechanism\nmodule dial_indicator() {\n    color(\"silver\")\n    union() {\n        // Dial housing\n        translate([body_length/2 + 10, 0, body_height/2 + 15])\n        rotate([0, 90, 0])\n        cylinder(h=20, r1=12, r2=12, center=true);\n        \n        // Dial face\n        color(\"white\")\n        translate([body_length/2 + 20, 0, body_height/2 + 15])\n        rotate([0, 90, 0])\n        cylinder(h=1, r=10, center=true);\n        \n        // Indicator needle\n        color(\"red\")\n        translate([body_length/2 + 21, 0, body_height/2 + 15])\n        rotate([0, 90, 0])\n        rotate([0, 0, 45])\n        cube([8, 0.5, 1], center=true);\n    }\n}\n\n// Contact point/probe\nmodule probe() {\n    color(\"silver\")\n    union() {\n        // Probe shaft\n        translate([-body_length/2 - 15, 0, 0])\n        cylinder(h=20, r=2, center=true);\n        \n        // Probe tip\n        translate([-body_length/2 - 25, 0, 0])\n        sphere(r=3);\n    }\n}\n\n// Support legs\nmodule support_legs() {\n    color(\"darkgray\")\n    for(x=[-25, 25]) {\n        for(y=[-8, 8]) {\n            translate([x, y, -body_height/2 - 5])\n            cylinder(h=10, r=2, center=true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 15])\nunion() {\n    main_body();\n    translate([0, 0, body_height/2])\n    handle();\n    dial_indicator();\n    probe();\n    support_legs();\n}",
    "renders": true
  },
  {
    "tool": "vibrometer",
    "openscad_code": "// Vibrometer Tool - Realistic Style, Medium Complexity\n// A handheld vibration measurement device with sensor probe and display\n\n// Overall dimensions\nbody_len = 75;\nbody_width = 35;\nbody_height = 20;\nhandle_dia = 25;\nhandle_len = 60;\nprobe_len = 40;\nprobe_dia = 8;\n\n// Display dimensions\ndisplay_width = 30;\ndisplay_height = 20;\ndisplay_depth = 2;\n\n// Colors\n$fn = 32;\n\n// Main body module\nmodule body() {\n    difference() {\n        // Main housing\n        translate([0, 0, body_height/2])\n            cube([body_len, body_width, body_height], center=true);\n        \n        // Display cutout\n        translate([body_len/4, 0, body_height/2])\n            cube([display_width+4, body_width-10, display_depth+2], center=true);\n        \n        // Battery compartment\n        translate([-body_len/3, 0, -2])\n            cube([20, body_width-8, 8], center=true);\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    // Handle shaft\n    color(\"darkgray\")\n    translate([0, 0, -handle_len/2])\n        cylinder(h=handle_len, d=handle_dia);\n    \n    // Grip rings\n    for(i = [0:8]) {\n        color(\"black\")\n        translate([0, 0, -i*6-8])\n            difference() {\n                cylinder(h=3, d=handle_dia+2);\n                cylinder(h=3.5, d=handle_dia);\n            }\n    }\n}\n\n// Display screen\nmodule display() {\n    // Screen\n    color(\"lightblue\")\n    translate([body_len/4, 0, body_height/2+display_depth/2])\n        cube([display_width, display_height, display_depth], center=true);\n    \n    // Bezel\n    color(\"gray\")\n    translate([body_len/4, 0, body_height/2+display_depth/2-0.5])\n        cube([display_width+2, display_height+2, display_depth/2], center=true);\n}\n\n// Control buttons\nmodule buttons() {\n    for(i = [0:2]) {\n        color(\"darkred\")\n        translate([body_len/4-8+i*8, body_width/2+2, body_height/2])\n            cylinder(h=3, d=4);\n    }\n}\n\n// Probe assembly\nmodule probe() {\n    // Probe shaft\n    color(\"silver\")\n    translate([body_len/2+probe_len/2, 0, 0])\n        cylinder(h=probe_len, d=probe_dia);\n    \n    // Probe tip\n    color(\"darkgray\")\n    translate([body_len/2+probe_len, 0, 0])\n        sphere(d=probe_dia);\n    \n    // Probe guard\n    color(\"gray\")\n    translate([body_len/2+5, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, d1=12, d2=8);\n}\n\n// LED indicator\nmodule led() {\n    color(\"red\")\n    translate([body_len/4, body_width/2-2, body_height-1])\n        sphere(d=3);\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    color(\"black\")\n    translate([-body_len/3, 0, -1])\n        cube([22, body_width-6, 1], center=true);\n    \n    // Screws\n    for(pos = [[-5, -body_width/4], [-5, body_width/4]]) {\n        color(\"gray\")\n        translate([pos[0], pos[1], -1.5])\n            cylinder(h=2, d=3);\n    }\n}\n\n// Assembly\nmodule vibrometer() {\n    union() {\n        // Main components\n        body();\n        translate([0, 0, -handle_len/2-body_height/2-5])\n            handle();\n        display();\n        buttons();\n        probe();\n        led();\n        battery_cover();\n        \n        // Side labels\n        color(\"white\")\n        translate([0, body_width/2+0.1, body_height/4])\n            cube([body_len-10, 0.2, 5], center=true);\n        translate([0, -body_width/2-0.1, body_height/4])\n            cube([body_len-10, 0.2, 5], center=true);\n    }\n}\n\n// Render the vibrometer\nvibrometer();",
    "renders": true
  },
  {
    "tool": "accelerometer",
    "openscad_code": "// OpenSCAD Accelerometer Tool â€“ 3-axis MEMS breakout, medium complexity\n// Overall size ~70 mm Ã— 40 mm Ã— 18 mm, 3D-printable (no steep overhangs)\n\n// ------------------ Parameters ------------------\nboard_w      = 60;      // PCB width (mm)\nboard_l      = 30;      // PCB length\nboard_t      = 1.6;     // PCB thickness\nhole_d       = 2.2;     // Mounting hole diameter\nhole_margin  = 2.5;     // Distance from edge to hole\nchip_size    = 5;       // Accelerometer IC body size\nheader_pitch = 2.54;    // Standard 0.1\" header pitch\nheader_pins  = 6;       // 6-pin right-angle header\nheader_len   = 6;       // Pin length protruding under board\nwall_t       = 1.2;     // Safe print wall thickness\n\n// ------------------ Colors ----------------------\npcb_color   = \"green\";\nchip_color  = \"black\";\npin_color   = \"silver\";\nsilk_color  = \"white\";\nmask_color  = \"blue\";\n\n// ------------------ PCB with holes --------------\nmodule pcb() {\n    color(pcb_color)\n    difference() {\n        // Main board\n        translate([0, 0, board_t/2])\n            cube([board_w, board_l, board_t], center=true);\n\n        // Mounting holes (4 corners)\n        for (x = [-1, 1], y = [-1, 1])\n            translate([x*(board_w/2 - hole_margin),\n                       y*(board_l/2 - hole_margin),\n                       0])\n                cylinder(d=hole_d, h=board_t+0.1, center=true, $fn=16);\n    }\n}\n\n// ------------------ 6-pin right-angle header ----\nmodule header() {\n    color(pin_color)\n    for (i = [0:header_pins-1]) {\n        // Vertical pin\n        translate([board_w/2 - 3 - i*header_pitch,\n                   board_l/2,\n                   board_t + header_len/2])\n            cylinder(d=0.64, h=header_len, $fn=8);\n        // Horizontal pin (right angle)\n        translate([board_w/2 - 3 - i*header_pitch,\n                   board_l/2 + header_len/2,\n                   board_t])\n            rotate([90, 0, 0])\n                cylinder(d=0.64, h=header_len, $fn=8);\n    }\n}\n\n// ------------------ Accelerometer IC ------------\nmodule ic() {\n    color(chip_color)\n    translate([0, 0, board_t + chip_size/2])\n        cube([chip_size, chip_size, chip_size], center=true);\n\n    // Tiny fake bond pads\n    color(silk_color)\n    for (tx = [-1, 1], ty = [-1, 1])\n        translate([tx*chip_size/3, ty*chip_size/3, board_t + chip_size + 0.1])\n            cube([0.5, 0.5, 0.2], center=true);\n}\n\n// ------------------ Silkscreen labels -----------\nmodule silk() {\n    color(silk_color)\n    translate([board_w/2 - 12, board_l/2 - 5, board_t + 0.1])\n        cube([10, 2, 0.2]);\n    translate([-board_w/2 + 4, board_l/2 - 5, board_t + 0.1])\n        cube([8, 2, 0.2]);\n}\n\n// ------------------ Solder-mask dots (vias) -----\nmodule mask_dots() {\n    color(mask_color)\n    for (i = [1, 3, 5])\n        translate([board_w/2 - 4 - i*header_pitch,\n                   board_l/2 - 8,\n                   board_t + 0.1])\n            cylinder(d=0.8, h=0.2, $fn=8);\n}\n\n// ------------------ Main assembly ---------------\npcb();\nheader();\nic();\nsilk();\nmask_dots();",
    "renders": true
  },
  {
    "tool": "vibrograph",
    "openscad_code": "// Vibrograph Tool - Medium Complexity Realistic Style\n// A handheld vibrograph for recording and measuring vibrations\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_base = [0.2, 0.2, 0.2];      // Dark gray body\ncolor_grip = [0.1, 0.1, 0.1];      // Black grip\ncolor_metal = [0.7, 0.7, 0.7];     // Silver metal parts\ncolor_accent = [0.8, 0.2, 0.2];    // Red accent details\ncolor_screen = [0.1, 0.2, 0.3];    // Dark blue screen\n\n// Overall dimensions\nlength = 80;\nwidth = 35;\nheight = 25;\n\nmodule main_body() {\n    color(color_base) {\n        // Main body block\n        difference() {\n            cube([length, width, height], center=true);\n            \n            // Rounded edges\n            translate([0, 0, height/2 - 5])\n                cylinder(h=10, r=5, center=true);\n            \n            // Screen cavity\n            translate([-length/2 + 15, 0, height/2 - 2])\n                cube([20, 25, 4], center=true);\n        }\n    }\n}\n\nmodule handle_grip() {\n    color(color_grip) {\n        // Ergonomic handle grip\n        difference() {\n            union() {\n                // Main grip\n                translate([length/2 - 15, 0, -height/2 - 8])\n                    cube([30, 25, 16], center=true);\n                \n                // Grip ridges\n                for(i = [0:4]) {\n                    translate([length/2 - 25 + i*4, 0, -height/2 - 4])\n                        cube([3, 27, 8], center=true);\n                }\n            }\n            \n            // Finger grooves\n            for(i = [0:2]) {\n                translate([length/2 - 15, -10 + i*10, -height/2 - 12])\n                    cylinder(h=8, r=4, center=true);\n            }\n        }\n    }\n}\n\nmodule sensor_head() {\n    color(color_metal) {\n        // Cylindrical sensor head\n        translate([-length/2 - 8, 0, 0])\n            cylinder(h=16, r=8, center=true);\n        \n        // Sensor tip\n        translate([-length/2 - 16, 0, 0])\n            cylinder(h=8, r=3, center=true);\n        \n        // Mounting ring\n        translate([-length/2 - 8, 0, 0])\n            cylinder(h=3, r=12, center=true);\n    }\n}\n\nmodule display_screen() {\n    color(color_screen) {\n        // Screen surface\n        translate([-length/2 + 15, 0, height/2 - 1.5])\n            cube([18, 23, 1], center=true);\n        \n        // Screen bezel\n        color(color_metal)\n            translate([-length/2 + 15, 0, height/2 - 1])\n                cube([20, 25, 0.5], center=true);\n    }\n}\n\nmodule control_buttons() {\n    color(color_accent) {\n        // Power button\n        translate([length/2 - 10, width/2 + 2, 0])\n            cylinder(h=3, r=3, center=true);\n        \n        // Menu buttons\n        for(i = [0:2]) {\n            translate([length/2 - 20 - i*8, width/2 + 2, 0])\n                cylinder(h=2, r=2, center=true);\n        }\n    }\n}\n\nmodule connection_ports() {\n    color(color_metal) {\n        // USB port\n        translate([0, -width/2 - 1, 0])\n            cube([8, 2, 4], center=true);\n        \n        // LED indicator\n        translate([length/2 - 5, 0, height/2 + 1])\n            cylinder(h=1, r=2, center=true);\n    }\n}\n\nmodule calibration_markings() {\n    color([0, 0, 0]) {\n        // Scale markings on sensor head\n        for(i = [0:4]) {\n            rotate([0, 90, 0])\n                translate([-length/2 - 8 - i*2, 0, 8])\n                    cube([0.5, 0.5, 2], center=true);\n        }\n        \n        // Model number\n        translate([length/2 - 25, 0, height/2 + 1])\n            cube([10, 0.5, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    handle_grip();\n    sensor_head();\n    display_screen();\n    control_buttons();\n    connection_ports();\n    calibration_markings();\n}",
    "renders": true
  },
  {
    "tool": "seismometer",
    "openscad_code": "// OpenSCAD Seismometer Tool (Medium Complexity)\n// Realistic style, ~100mm tall, 3D-printable\n\n$fn = 32;\n\n// Main assembly\nmodule seismometer() {\n    // Base platform with adjustable feet\n    difference() {\n        cube([80, 80, 8], center = true);\n        // Center hole for cable\n        translate([0, 0, -1])\n            cylinder(h = 10, d = 10, center = true);\n    }\n    \n    // Adjustable feet (4 corners)\n    for (x = [-35, 35])\n        for (y = [-35, 35])\n            translate([x, y, -7])\n                cylinder(h = 10, d = 8);\n    \n    // Main housing\n    translate([0, 0, 12])\n        difference() {\n            cube([50, 50, 40], center = true);\n            // Inner cavity\n            translate([0, 0, 2])\n                cube([44, 44, 36], center = true);\n        }\n    \n    // Top cover with window\n    translate([0, 0, 34])\n        difference() {\n            cube([54, 54, 6], center = true);\n            translate([0, 0, -1])\n                cube([40, 40, 8], center = true);\n        }\n    \n    // Seismic mass (pendulum bob)\n    color(\"silver\")\n    translate([0, 0, 15])\n        sphere(d = 20);\n    \n    // Suspension rod\n    color(\"silver\")\n    translate([0, 0, 15])\n        rotate([90, 0, 0])\n            cylinder(h = 30, d = 2);\n    \n    // Sensor coil housing\n    color(\"black\")\n    translate([0, 0, 8])\n        cylinder(h = 6, d = 12);\n    \n    // Calibration screws (4 corners)\n    for (x = [-20, 20])\n        for (y = [-20, 20])\n            translate([x, y, 42])\n                cylinder(h = 8, d = 4);\n    \n    // Cable connector\n    color(\"gray\")\n    translate([0, -45, 4])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d1 = 12, d2 = 8);\n    \n    // Leveling bubble\n    color(\"blue\")\n    translate([20, 20, 35])\n        sphere(d = 8);\n    \n    // Mounting brackets\n    for (x = [-30, 30])\n        color(\"darkgray\")\n        translate([x, 0, -4])\n            cube([8, 60, 4], center = true);\n    \n    // Identification label\n    color(\"white\")\n    translate([0, 0, 37])\n        cube([20, 10, 0.5], center = true);\n}\n\n// Render the complete seismometer\nseismometer();",
    "renders": true
  },
  {
    "tool": "tiltmeter",
    "openscad_code": "// Realistic 3D-printable Tiltmeter Tool â€“ medium complexity\n// Outer dimensions roughly 80 mm Ã— 60 mm Ã— 35 mm\n\n// ------------- PARAMETERS -------------\nbodyLen = 80;\nbodyW   = 60;\nbodyH   = 20;\n\nwallThk  = 2;\nwindowD  = 1.5;   // clear lid thickness\nbubbleD  = 14;\nbubbleH  = 7;\nvialD    = 20;\nvialLen  = 55;\n\nhandleW  = 30;\nhandleH  = 12;\nhandleR  = 6;\n\n// ------------- COLORS -------------\n$vpr = [55, 0, 25]; // initial view\ncolorBody   = [0.15, 0.15, 0.15];   // dark grey plastic\ncolorWindow = [0.8, 0.9, 1, 0.6];   // transparent blue\ncolorVial   = [0.9, 0.9, 0.9];      // clear acrylic\ncolorBubble = [1, 0, 0];            // red spirit bubble\ncolorMark   = [1, 1, 1];            // white graduations\n\n// ------------- MAIN ASSEMBLY -------------\ndifference() {\n    // Main body shell\n    color(colorBody)\n    translate([0, 0, bodyH/2])\n        roundedBox([bodyLen, bodyW, bodyH], 4);\n\n    // Hollow cavity\n    translate([0, 0, wallThk])\n        roundedBox([bodyLen-2*wallThk, bodyW-2*wallThk, bodyH], 4-wallThk);\n\n    // Window opening\n    translate([0, 0, bodyH-windowD])\n        cube([bodyLen-10, bodyW-10, windowD+0.1], center=true);\n}\n\n// ------------- CLEAR WINDOW -------------\ntranslate([0, 0, bodyH-windowD/2])\n    color(colorWindow)\n    cube([bodyLen-10, bodyW-10, windowD], center=true);\n\n// ------------- SPIRIT LEVEL VIAL -------------\nmodule spiritVial() {\n    // outer cylinder\n    color(colorVial)\n    rotate([90, 0, 0])\n        cylinder(h=vialLen, d=vialD, $fn=64);\n\n    // red bubble\n    color(colorBubble)\n    translate([0, 0, -vialLen/2+bubbleH/2])\n        sphere(d=bubbleD, $fn=32);\n}\n\ntranslate([0, 0, bodyH/2])\n    spiritVial();\n\n// ------------- GRADUATION MARKS -------------\nmodule graduationMarks() {\n    for (i = [-2:1:2]) {\n        translate([i*8, 0, bodyH/2+vialD/2+0.1])\n            color(colorMark)\n            cube([0.5, 6, 0.2], center=true);\n    }\n}\n\ngraduationMarks();\n\n// ------------- HANDLE -------------\nmodule handle() {\n    difference() {\n        union() {\n            // grip bar\n            color(colorBody)\n            translate([0, 0, bodyH+handleH/2])\n                roundedBox([handleW, handleH, handleH], handleR);\n\n            // two support arms\n            for (x = [-handleW/2+handleR, handleW/2-handleR]) {\n                translate([x, bodyW/2-handleR, bodyH+handleH/2])\n                    rotate([90, 0, 0])\n                        cylinder(h=bodyW/2-handleR, d=handleR*2, $fn=24);\n            }\n        }\n        // hollow grip\n        translate([0, 0, bodyH+handleH/2])\n            roundedBox([handleW-2*wallThk, handleH-2*wallThk, handleH-2*wallThk], handleR-wallThk);\n    }\n}\n\nhandle();\n\n// ------------- UTILITY MODULES -------------\nmodule roundedBox(size, r) {\n    // rounded box without minkowski for faster preview\n    hull() {\n        for (dx = [-1, 1], dy = [-1, 1], dz = [-1, 1]) {\n            translate([dx*(size[0]/2-r), dy*(size[1]/2-r), dz*(size[2]/2-r)])\n                sphere(r=r, $fn=12);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "inclinometer",
    "openscad_code": "// Inclinometer Tool â€“ OpenSCAD â€“ Realistic Style â€“ Medium Complexity\n// Overall footprint â‰ˆ 75 mm Ã— 60 mm Ã— 20 mm\n\n$fn = 72;\n\nmodule body() {\n    color(\"silver\")\n    difference() {\n        // Main frame\n        translate([-35, -30, 0])\n            cube([70, 60, 15]);\n        // Large view window\n        translate([-25, -20, 7])\n            cube([50, 40, 10]);\n        // Screw holes\n        for (x = [-20, 20])\n            translate([x, -25, 0])\n                cylinder(h = 16, d = 3.4);\n    }\n}\n\nmodule ruler() {\n    color([0.8, 0.8, 0.8])\n    difference() {\n        translate([-25, -1.5, 8])\n            cube([50, 3, 2]);\n        // Degree marks (every 5Â°)\n        for (a = [-45:5:45])\n            translate([a, -1.5, 10])\n                cube([0.4, 3, 0.5]);\n    }\n}\n\nmodule pendulum() {\n    // Pivot pin\n    color(\"gray\")\n    translate([0, 0, 13])\n        rotate([90, 0, 0])\n            cylinder(h = 6, d = 2);\n\n    // Arm\n    color(\"black\")\n    translate([0, 0, 10])\n        cube([1, 1, 20], center = true);\n\n    // Weight disc\n    color(\"silver\")\n    translate([0, 0, 0])\n        cylinder(h = 4, d = 8);\n}\n\nmodule grip() {\n    color(\"darkgreen\")\n    union() {\n        // Left grip pad\n        translate([-34.5, -30, 0])\n            difference() {\n                cube([3, 60, 15]);\n                for (i = [0:4])\n                    translate([-1, -28 + i * 14, 1])\n                        cylinder(h = 13, d = 5);\n            }\n        // Right grip pad\n        mirror([1, 0, 0])\n            children();\n    }\n}\n\nbody();\nruler();\ntranslate([0, 0, 0])\n    pendulum();\ngrip();",
    "renders": true
  },
  {
    "tool": "gyroscope",
    "openscad_code": "// Realistic 3D-printable gyroscope tool â€“ medium complexity\n// Overall size â‰ˆ 85 mm Ã˜ Ã— 30 mm thick, wall 2 mm, no steep overhangs\n\n$fn = 64;\n\n// --- Adjustable parameters ---------------------------------------------------\nring_od   = 80;     // outer ring diameter\nring_id   = 76;     // inner ring diameter\naxle_d    = 6;      // gimbal axle diameter\nhandle_l  = 25;     // handle length\nhandle_d  = 12;     // handle diameter\ngrip_d    = 16;     // grip collar diameter\ngrip_r    = 1;      // grip ridge radius\n// -----------------------------------------------------------------------------\n\n// Colors\ncolor_ring   = [0.7,0.7,0.7];   // aluminium\ncolor_axle   = [0.5,0.5,0.5];   // steel\ncolor_spin   = [0.9,0.1,0.1];   // red rotor\ncolor_handle = [0.2,0.2,0.2];   // black grip\n\n// Helper: thin ring with rectangular cross-section\nmodule thin_ring(od,id,h){\n    difference(){\n        cylinder(d=od,h=h,center=true);\n        cylinder(d=id,h=h+0.2,center=true); // small clearance\n    }\n}\n\n// Rotor disc (flywheel)\nmodule rotor(){\n    color(color_spin){\n        cylinder(d=ring_id-6,h=6,center=true);\n        // spokes for realism â€“ printable from bed\n        for(i=[0:60:359]){\n            rotate([0,0,i])\n                translate([ring_id/2-3,0,0])\n                    cube([6,2,6.2],center=true);\n        }\n    }\n}\n\n// Handle with grip ridges\nmodule handle(){\n    color(color_handle){\n        // main handle body\n        cylinder(d=handle_d,h=handle_l,center=false);\n        // grip ridges\n        for(z=[5:5:handle_l-5]){\n            translate([0,0,z])\n                cylinder(d=grip_d,h=2,center=false);\n        }\n        // smooth base\n        translate([0,0,handle_l])\n            cylinder(d=handle_d,h=2,$fn=32);\n    }\n}\n\n// Gimbal axle pin\nmodule axle(len){\n    color(color_axle){\n        cylinder(d=axle_d,h=len,center=true);\n        // small heads for press-fit\n        translate([0,0,len/2])\n            sphere(d=axle_d+2);\n        translate([0,0,-len/2])\n            sphere(d=axle_d+2);\n    }\n}\n\n// --- Main assembly ----------------------------------------------------------\ndifference(){\n    union(){\n        // Outer gimbal ring\n        color(color_ring) rotate([90,0,0])\n            thin_ring(ring_od,ring_id,4);\n\n        // Inner gimbal ring (perpendicular to outer)\n        color(color_ring) rotate([0,90,0])\n            thin_ring(ring_od-10,ring_od-14,4);\n\n        // Rotor inside inner ring\n        rotate([0,0,0]) rotor();\n\n        // Axles between rings\n        color(color_axle){\n            translate([0,ring_od/2-2,0])\n                rotate([90,0,0])\n                    axle(6);\n            translate([0,-ring_od/2+2,0])\n                rotate([90,0,0])\n                    axle(6);\n        }\n\n        // Handle attached to outer ring\n        translate([0,ring_od/2+handle_l/2+3,0])\n            rotate([90,0,0])\n                handle();\n    }\n\n    // Cutouts for press-fit axle holes (simple cylinder subtractions)\n    translate([0,ring_od/2-2,0])\n        rotate([90,0,0])\n            cylinder(d=axle_d+0.4,h=10,center=true);\n    translate([0,-ring_od/2+2,0])\n        rotate([90,0,0])\n            cylinder(d=axle_d+0.4,h=10,center=true);\n    translate([0,0,ring_od/2-2])\n        rotate([0,90,0])\n            cylinder(d=axle_d+0.4,h=10,center=true);\n    translate([0,0,-ring_od/2+2])\n        rotate([0,90,0])\n            cylinder(d=axle_d+0.4,h=10,center=true);\n}",
    "renders": true
  },
  {
    "tool": "gyrocompass",
    "openscad_code": "// Gyrocompass Tool - Realistic Style, Medium Complexity\n// Based on traditional marine gyrocompass design\n\n$fn = 64; // Smooth curves for 3D printing\n\n// Main colors\ncolor_base = [0.2, 0.2, 0.3]; // Dark metallic\ncolor_detail = [0.8, 0.8, 0.9]; // Light gray\ncolor_accent = [0.1, 0.1, 0.1]; // Black\ncolor_glass = [0.5, 0.7, 0.9, 0.6]; // Transparent blue\n\n// Main module\nmodule gyrocompass() {\n    // Base platform\n    color(color_base)\n    cylinder(h=8, r1=35, r2=38);\n    \n    // Main housing\n    translate([0, 0, 8])\n    color(color_base)\n    cylinder(h=25, r1=30, r2=28);\n    \n    // Top ring\n    translate([0, 0, 33])\n    color(color_detail)\n    cylinder(h=5, r1=32, r2=32);\n    \n    // Glass dome\n    translate([0, 0, 38])\n    color(color_glass)\n    sphere(r=25);\n    \n    // Internal gimbal ring\n    translate([0, 0, 45])\n    rotate([0, 0, 45])\n    color(color_accent)\n    difference() {\n        cylinder(h=3, r1=22, r2=22);\n        cylinder(h=4, r1=18, r2=18);\n    }\n    \n    // Second gimbal ring (perpendicular)\n    translate([0, 0, 45])\n    rotate([90, 0, 0])\n    color(color_accent)\n    difference() {\n        cylinder(h=3, r1=22, r2=22);\n        cylinder(h=4, r1=18, r2=18);\n    }\n    \n    // Central rotor/spindle\n    translate([0, 0, 45])\n    color(color_accent)\n    cylinder(h=15, r=5);\n    \n    // Compass card\n    translate([0, 0, 50])\n    color(color_detail)\n    cylinder(h=1, r=20);\n    \n    // Cardinal markings (N, S, E, W)\n    for (angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle])\n        translate([15, 0, 51])\n        color(color_accent)\n        cube([6, 2, 1.5], center=true);\n    }\n    \n    // Support brackets (4 legs)\n    for (i = [0:90:270]) {\n        rotate([0, 0, i+45])\n        translate([25, 0, 4])\n        color(color_base)\n        cube([8, 6, 8], center=true);\n    }\n    \n    // Adjustment knobs\n    translate([32, 0, 15])\n    rotate([0, 90, 0])\n    color(color_detail)\n    cylinder(h=8, r=6);\n    \n    translate([0, 32, 15])\n    rotate([90, 0, 0])\n    color(color_detail)\n    cylinder(h=8, r=6);\n    \n    // Calibration marks on base\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([34, 0, 0.5])\n        color(color_accent)\n        cube([1, 3, 1], center=true);\n    }\n    \n    // Mounting holes in base\n    for (i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([28, 0, -1])\n        color(color_accent)\n        cylinder(h=10, r=3);\n    }\n}\n\n// Render the gyrocompass\ngyrocompass();",
    "renders": true
  },
  {
    "tool": "fluxgate",
    "openscad_code": "// Fluxgate Magnetometer Tool - Realistic Style\n// Medium complexity OpenSCAD model with 3D printability\n\n// Dimensions (mm)\nbody_length = 80;\nbody_diameter = 25;\nhandle_length = 40;\nhandle_diameter = 20;\nsensor_length = 15;\nsensor_diameter = 12;\ncore_diameter = 6;\nwire_thickness = 1.5;\nwall_thickness = 2;\n\n// Color definitions\ncolor_body = \"silver\";\ncolor_handle = [0.2, 0.2, 0.2];\ncolor_sensor = \"gold\";\ncolor_wires = \"red\";\ncolor_markings = \"white\";\n\n// Main module\nmodule fluxgate_tool() {\n    union() {\n        // Central body tube\n        color(color_body)\n        difference() {\n            cylinder(h=body_length, d=body_diameter, center=true);\n            cylinder(h=body_length+2, d=body_diameter-wall_thickness*2, center=true);\n        }\n        \n        // Handle grip\n        translate([0, 0, -(body_length/2 + handle_length/2)])\n        color(color_handle)\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter);\n            // Grip texture rings\n            for(i = [1:3:handle_length-3]) {\n                translate([0, 0, i])\n                cylinder(h=1.5, d=handle_diameter-2);\n            }\n        }\n        \n        // Sensor housing at front\n        translate([0, 0, body_length/2 + sensor_length/2])\n        union() {\n            // Main sensor body\n            color(color_sensor)\n            cylinder(h=sensor_length, d=sensor_diameter);\n            \n            // Fluxgate core inside\n            color(\"gray\")\n            cylinder(h=sensor_length-2, d=core_diameter);\n            \n            // Wire coils\n            for(i = [-1, 1]) {\n                color(color_wires)\n                translate([sensor_diameter/2 + wire_thickness, 0, i*sensor_length/4])\n                rotate([90, 0, 0])\n                cylinder(h=sensor_length/3, d=wire_thickness*2);\n            }\n        }\n        \n        // End cap with markings\n        translate([0, 0, body_length/2 + sensor_length + 3])\n        union() {\n            color(color_body)\n            cylinder(h=3, d=sensor_diameter);\n            \n            // Calibration marks\n            color(color_markings)\n            for(angle = [0:45:315]) {\n                rotate([0, 0, angle])\n                translate([sensor_diameter/2 - 1, 0, 1.5])\n                cube([2, 0.5, 1]);\n            }\n        }\n        \n        // Cable strain relief\n        translate([0, 0, -(body_length/2 + handle_length + 5)])\n        union() {\n            color(color_body)\n            cylinder(h=5, d=handle_diameter-5);\n            \n            // Cable entry\n            color(\"black\")\n            translate([0, 0, 2.5])\n            cylinder(h=2, d=3);\n        }\n        \n        // Mounting bracket\n        color(\"silver\")\n        translate([body_diameter/2 + 5, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=10, d=8);\n            cylinder(h=11, d=4);\n        }\n    }\n}\n\n// Display the complete tool\nfluxgate_tool();",
    "renders": true
  },
  {
    "tool": "magnetometer",
    "openscad_code": "// Magnetometer (compass) tool - realistic style with medium complexity\n// Dimensions in millimeters, suitable for 3D printing\n\n// Main colors\n$fn = 32;\n\n// Main body dimensions\nbody_diameter = 50;\nbody_height = 10;\n\n// Needle dimensions\nneedle_length = 40;\nneedle_width = 3;\nneedle_thickness = 1.5;\n\n// Lid dimensions\nlid_thickness = 2;\nlid_clearance = 0.2;\n\n// Handle dimensions\nhandle_length = 15;\nhandle_diameter = 8;\n\n// Scale markings\nscale_marks = 24;\nscale_radius = 22;\n\n// Main magnetometer module\nmodule magnetometer() {\n    color([0.8, 0.8, 0.8]) {\n        // Base body - cylindrical housing\n        cylinder(h=body_height, d=body_diameter, $fn=64);\n        \n        // Raised rim for lid seating\n        translate([0, 0, body_height - 1])\n            cylinder(h=1, d1=body_diameter, d2=body_diameter - 2, $fn=64);\n    }\n    \n    // Lid - removable top\n    color([0.9, 0.9, 0.9]) {\n        translate([0, 0, body_height + lid_clearance]) {\n            // Lid base\n            cylinder(h=lid_thickness, d=body_diameter - 2, $fn=64);\n            \n            // Lid rim\n            difference() {\n                cylinder(h=lid_thickness, d=body_diameter, $fn=64);\n                translate([0, 0, -0.1])\n                    cylinder(h=lid_thickness + 0.2, d=body_diameter - 4, $fn=64);\n            }\n            \n            // Central dome\n            translate([0, 0, lid_thickness]) {\n                sphere(d=10);\n            }\n        }\n    }\n    \n    // Needle assembly\n    translate([0, 0, body_height/2 + 1]) {\n        // Needle pivot post\n        color([0.5, 0.5, 0.5]) {\n            cylinder(h=3, d=3, $fn=16);\n        }\n        \n        // Magnetic needle - red end for north\n        translate([0, 0, 1.5]) {\n            rotate([0, 0, $t * 360]) {\n                // North end (red)\n                color([0.8, 0, 0]) {\n                    translate([0, needle_length/4, 0])\n                        cube([needle_width, needle_length/2, needle_thickness], center=true);\n                }\n                \n                // South end (white)\n                color([0.9, 0.9, 0.9]) {\n                    translate([0, -needle_length/4, 0])\n                        cube([needle_width, needle_length/2, needle_thickness], center=true);\n                }\n                \n                // Central hub\n                color([0.4, 0.4, 0.4]) {\n                    cylinder(h=needle_thickness, d=6, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Scale markings\n    color([0, 0, 0]) {\n        for(i = [0:scale_marks-1]) {\n            rotate([0, 0, i * 360/scale_marks]) {\n                translate([scale_radius, 0, body_height - 0.5]) {\n                    if(i % 6 == 0) {\n                        // Cardinal points\n                        cube([1, 4, 0.8], center=true);\n                    } else if(i % 3 == 0) {\n                        // Ordinal points\n                        cube([0.8, 3, 0.6], center=true);\n                    } else {\n                        // Minor marks\n                        cube([0.5, 2, 0.4], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Cardinal direction labels (N, E, S, W)\n    color([0.1, 0.1, 0.1]) {\n        translate([0, scale_radius + 6, body_height - 0.5]) {\n            cube([2, 2, 0.5], center=true); // N\n        }\n        rotate([0, 0, 90])\n            translate([0, scale_radius + 6, body_height - 0.5]) {\n                cube([2, 2, 0.5], center=true); // E\n            }\n        rotate([0, 0, 180])\n            translate([0, scale_radius + 6, body_height - 0.5]) {\n                cube([2, 2, 0.5], center=true); // S\n            }\n        rotate([0, 0, 270])\n            translate([0, scale_radius + 6, body_height - 0.5]) {\n                cube([2, 2, 0.5], center=true); // W\n            }\n    }\n    \n    // Handle attachment\n    color([0.7, 0.7, 0.7]) {\n        translate([body_diameter/2 + handle_length/2, 0, body_height/2]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            }\n            \n            // Handle grip texture\n            for(i = [0:3]) {\n                rotate([0, 90, i * 90]) {\n                    translate([handle_length/2 - 2, 0, handle_diameter/2 + 0.5]) {\n                        cube([4, 1, 1], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Sighting notch\n    color([0.6, 0.6, 0.6]) {\n        translate([0, body_diameter/2, body_height/2]) {\n            difference() {\n                cube([6, 2, 6], center=true);\n                translate([0, 1, 0])\n                    cube([4, 2, 4], center=true);\n            }\n        }\n    }\n    \n    // Sighting post\n    translate([0, -body_diameter/2 - 2, body_height/2]) {\n        color([0.6, 0.6, 0.6]) {\n            cube([2, 4, 2], center=true);\n        }\n    }\n}\n\n// Render the complete magnetometer\nmagnetometer();",
    "renders": true
  },
  {
    "tool": "declinometer",
    "openscad_code": "// Declinometer Tool - Medium Complexity Realistic Style\n// A 3D printable magnetic declination measurement instrument\n\n// Main parameters\nbase_diameter = 60;\nbase_thickness = 8;\ncompass_diameter = 40;\ncompass_thickness = 5;\nneedle_length = 35;\nneedle_width = 3;\nneedle_thickness = 1.5;\nsighting_arm_length = 80;\nsighting_arm_width = 8;\nsighting_arm_thickness = 4;\nmirror_size = 25;\nmirror_thickness = 2;\nhandle_length = 30;\nhandle_diameter = 12;\n\n// Base module\nmodule base() {\n    color(\"darkslategray\")\n    difference() {\n        cylinder(d=base_diameter, h=base_thickness, $fn=64);\n        \n        // Central hole for compass\n        translate([0, 0, -1])\n        cylinder(d=compass_diameter+2, h=base_thickness+2, $fn=64);\n        \n        // Degree markings (0-360)\n        for(i=[0:15:359]) {\n            rotate([0, 0, i])\n            translate([compass_diameter/2 + 2, -1, base_thickness - 1.5])\n            cube([2, 2, 1.5]);\n        }\n    }\n}\n\n// Compass card module\nmodule compass_card() {\n    color(\"lightgray\")\n    difference() {\n        cylinder(d=compass_diameter, h=compass_thickness, $fn=64);\n        \n        // Cardinal points N, S, E, W\n        color(\"red\")\n        for(dir=[0, 90, 180, 270]) {\n            rotate([0, 0, dir])\n            translate([0, compass_diameter/2 - 8, compass_thickness/2])\n            cube([6, 8, compass_thickness + 0.1], center=true);\n        }\n    }\n}\n\n// Magnetic needle module\nmodule needle() {\n    color(\"firebrick\")\n    translate([0, 0, compass_thickness + needle_thickness/2 + 0.1])\n    rotate([0, 0, 0])\n    union() {\n        // North end (red)\n        color(\"red\")\n        cube([needle_length/2, needle_width, needle_thickness], center=true);\n        \n        // South end (white)\n        color(\"white\")\n        translate([-needle_length/4 - needle_length/8, 0, 0])\n        cube([needle_length/2, needle_width, needle_thickness], center=true);\n        \n        // Center pivot\n        color(\"gold\")\n        cylinder(d=3, h=needle_thickness + 0.2, $fn=16);\n    }\n}\n\n// Sighting arm module\nmodule sighting_arm() {\n    color(\"darkgreen\")\n    translate([0, 0, base_thickness + compass_thickness + 2])\n    rotate([0, 0, 0])\n    union() {\n        // Main arm\n        translate([0, -sighting_arm_width/2, 0])\n        cube([sighting_arm_length, sighting_arm_width, sighting_arm_thickness]);\n        \n        // Sighting vane\n        translate([sighting_arm_length - 5, -sighting_arm_width/2 - 2, 0])\n        cube([5, sighting_arm_width + 4, sighting_arm_thickness + 2]);\n        \n        // Vernier scale marks\n        for(i=[0:5:75]) {\n            translate([i, sighting_arm_width/2 + 0.5, sighting_arm_thickness/2])\n            cube([1, 2, 0.5]);\n        }\n    }\n}\n\n// Mirror module\nmodule mirror() {\n    color(\"silver\")\n    translate([sighting_arm_length/2 - mirror_size/2, -sighting_arm_width - mirror_size - 5, \n               base_thickness + compass_thickness + sighting_arm_thickness + 2])\n    rotate([45, 0, 0])\n    cube([mirror_size, mirror_size, mirror_thickness]);\n}\n\n// Handle module\nmodule handle() {\n    color(\"black\")\n    translate([0, -(base_diameter/2 + handle_length/2), base_thickness/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(d=handle_diameter, h=handle_length, $fn=32);\n        \n        // Grip texture\n        for(i=[5:5:handle_length-5]) {\n            translate([0, 0, i])\n            cylinder(d=handle_diameter - 2, h=2, $fn=32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    translate([0, 0, base_thickness])\n    compass_card();\n    needle();\n    sighting_arm();\n    mirror();\n    handle();\n}\n\n// Declination scale\ncolor(\"white\")\nfor(i=[0:5:30]) {\n    rotate([0, 0, i])\n    translate([base_diameter/2 + 6, -1, base_thickness - 1])\n    linear_extrude(height=1.5)\n    text(str(i), size=2, halign=\"center\");\n    \n    rotate([0, 0, -i])\n    translate([base_diameter/2 + 6, -1, base_thickness - 1])\n    linear_extrude(height=1.5)\n    text(str(-i), size=2, halign=\"center\");\n}",
    "renders": true
  },
  {
    "tool": "variometer",
    "openscad_code": "// Variometer (climb-rate indicator) - medium-complexity realistic model\n// Approx. 80 mm tall, 3D-printable\n\n// Body color: dark grey\n// Dial color: off-white\n// Needle color: bright red\n// Window color: clear blue-tinted\n\n// Main body cylinder\nmodule body() {\n    color(\"DarkSlateGray\") {\n        // Outer wall\n        difference() {\n            cylinder(h = 70, d = 55, $fn = 90);\n            translate([0, 0, -1]) cylinder(h = 72, d = 49, $fn = 90);\n        }\n        \n        // Bottom plate\n        translate([0, 0, -1]) cylinder(h = 4, d = 55, $fn = 90);\n        \n        // Top bezel ring\n        translate([0, 0, 69]) cylinder(h = 5, d = 60, $fn = 90);\n    }\n}\n\n// Window dome\nmodule window() {\n    color(\"SkyBlue\", 0.4) {\n        translate([0, 0, 70]) {\n            difference() {\n                sphere(d = 58, $fn = 60);\n                translate([0, 0, -29]) cube([70, 70, 35], center = true);\n            }\n        }\n    }\n}\n\n// Dial face\nmodule dial() {\n    color(\"AntiqueWhite\") {\n        translate([0, 0, 68]) cylinder(h = 1, d = 48, $fn = 90);\n    }\n}\n\n// Needle and hub\nmodule needle() {\n    color(\"Red\") {\n        translate([0, 0, 69]) {\n            // Needle\n            rotate([0, 0, 45]) {\n                // Main shaft\n                cube([25, 1.5, 1], center = true);\n                // Counterweight\n                translate([-15, 0, 0]) cube([8, 2.5, 1], center = true);\n            }\n            // Center hub\n            cylinder(h = 2.5, d = 5, $fn = 30);\n        }\n    }\n}\n\n// Dial markings\nmodule markings() {\n    // Major ticks every 30Â°\n    for (a = [0 : 30 : 330]) {\n        rotate([0, 0, a]) {\n            translate([20, 0, 69.5]) cube([6, 1, 0.5], center = true);\n        }\n    }\n    \n    // Minor ticks every 6Â°\n    for (a = [6 : 6 : 354])\n        if (a % 30 != 0) {\n            rotate([0, 0, a]) {\n                translate([21, 0, 69.5]) cube([3, 0.5, 0.5], center = true);\n            }\n        }\n}\n\n// Connection nipples (inlet/outlet)\nmodule fittings() {\n    color(\"DarkSlateGray\") {\n        // Left nipple\n        translate([-30, 0, 25]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 12, d1 = 12, d2 = 8, $fn = 30);\n                cylinder(h = 8, d = 8, $fn = 30);\n            }\n        }\n        // Right nipple\n        translate([30, 0, 25]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 12, d1 = 12, d2 = 8, $fn = 30);\n                cylinder(h = 8, d = 8, $fn = 30);\n            }\n        }\n    }\n}\n\n// Mounting bracket\nmodule bracket() {\n    color(\"DarkSlateGray\") {\n        translate([0, 28, 35]) {\n            difference() {\n                union() {\n                    cube([40, 6, 15], center = true);\n                    translate([0, 3, -7.5]) cube([10, 6, 30], center = true);\n                }\n                // Screw holes\n                translate([-15, 0, -7.5]) cylinder(h = 7, d = 4, $fn = 20);\n                translate([15, 0, -7.5]) cylinder(h = 7, d = 4, $fn = 20);\n            }\n        }\n    }\n}\n\n// Assemble variometer\nbody();\nwindow();\ndial();\nmarkings();\nneedle();\nfittings();\nbracket();",
    "renders": true
  },
  {
    "tool": "gradiometer",
    "openscad_code": "// Gradiometer Tool (Geological Survey Style)\n// 3D printable with medium complexity and realistic styling\n\n// Color constants\n$fn = 36;\n\nmodule main_body() {\n    color(\"silver\")\n    difference() {\n        // Main frame tube\n        cylinder(h=80, d=12, center=true);\n        // Hollow center\n        cylinder(h=82, d=10, center=true);\n    }\n}\n\nmodule spirit_level() {\n    color(\"darkgreen\")\n    translate([0, 6, 0])\n    difference() {\n        // Level vial\n        cylinder(h=20, d=8);\n        // Inner bubble space\n        cylinder(h=21, d=6);\n    }\n    \n    // Bubble indicator\n    color(\"lightblue\")\n    translate([0, 6, 10.5])\n    sphere(d=4);\n}\n\nmodule sighting_vane() {\n    color(\"silver\")\n    union() {\n        // Left vane\n        translate([-15, 0, 35])\n        cube([8, 2, 15]);\n        \n        // Right vane\n        translate([7, 0, 35])\n        cube([8, 2, 15]);\n        \n        // Center post\n        translate([0, 0, 42.5])\n        cylinder(h=10, d=4);\n    }\n}\n\nmodule scale_arm() {\n    color(\"silver\")\n    union() {\n        // Main arm\n        translate([0, -25, 0])\n        cube([3, 50, 3], center=true);\n        \n        // Pivot point\n        translate([0, 0, 0])\n        cylinder(h=5, d=6, center=true);\n    }\n}\n\nmodule weight_pans() {\n    // Left pan\n    color(\"gold\")\n    translate([-30, 0, -20])\n    difference() {\n        cylinder(h=5, d=15);\n        cylinder(h=6, d=13);\n    }\n    \n    // Right pan\n    color(\"gold\")\n    translate([30, 0, -20])\n    difference() {\n        cylinder(h=5, d=15);\n        cylinder(h=6, d=13);\n    }\n    \n    // Support strings\n    color(\"black\")\n    union() {\n        translate([-30, 0, -12.5])\n        cylinder(h=20, d=0.5);\n        translate([30, 0, -12.5])\n        cylinder(h=20, d=0.5);\n    }\n}\n\nmodule adjustment_knobs() {\n    // Left knob\n    color(\"darkgray\")\n    translate([-40, 0, 0])\n    union() {\n        cylinder(h=8, d=10);\n        // Knurled grip\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([5, 0, 4])\n            cube([2, 0.5, 8]);\n        }\n    }\n    \n    // Right knob\n    color(\"darkgray\")\n    translate([40, 0, 0])\n    union() {\n        cylinder(h=8, d=10);\n        // Knurled grip\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([5, 0, 4])\n            cube([2, 0.5, 8]);\n        }\n    }\n}\n\nmodule base_support() {\n    color(\"gray\")\n    difference() {\n        // Base platform\n        cube([90, 20, 5], center=true);\n        // Mounting holes\n        for(x = [-35, 0, 35]) {\n            translate([x, 0, 2.5])\n            cylinder(h=6, d=3);\n        }\n    }\n    \n    // Support posts\n    color(\"gray\")\n    union() {\n        translate([-35, 0, -15])\n        cube([5, 5, 30], center=true);\n        translate([35, 0, -15])\n        cube([5, 5, 30], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base_support();\n    \n    // Main components\n    translate([0, 0, 5])\n    main_body();\n    \n    translate([0, 0, 5])\n    scale_arm();\n    \n    translate([0, 0, 5])\n    weight_pans();\n    \n    translate([0, 0, 5])\n    adjustment_knobs();\n    \n    // Details\n    translate([0, 0, 5])\n    spirit_level();\n    \n    translate([0, 0, 5])\n    sighting_vane();\n}",
    "renders": true
  },
  {
    "tool": "electrometer",
    "openscad_code": "// Electrometer Tool - Realistic Style, Medium Complexity\n// 3D printable electrometer with typical features\n\n// Color definitions\n$fn = 50;\n\n// Main body dimensions\nbody_width = 20;\nbody_height = 60;\nbody_depth = 15;\n\n// Electrode dimensions\nelectrode_radius = 2;\nelectrode_height = 25;\n\n// Scale dimensions\nscale_width = 30;\nscale_height = 15;\nscale_depth = 3;\n\n// Base dimensions\nbase_width = 40;\nbase_height = 5;\nbase_depth = 25;\n\n// Assembly\nmodule electrometer() {\n    // Base\n    color(\"gray\") translate([0,0,0]) cube([base_width,base_depth,base_height], center=true);\n    \n    // Main body housing\n    color(\"black\") translate([0,0,base_height/2 + body_height/2]) \n        cube([body_width,body_depth,body_height], center=true);\n    \n    // Front panel\n    color(\"white\") translate([0,body_depth/2+0.1,base_height/2 + body_height/2]) \n        cube([body_width-2,0.5,body_height-2], center=true);\n    \n    // Scale window\n    color(\"lightblue\") translate([0,body_depth/2+0.2,base_height + body_height - 15]) \n        cube([scale_width-10,0.5,scale_height-5], center=true);\n    \n    // Scale markings\n    for(i = [-5:5]) {\n        color(\"black\") translate([i*2.5,body_depth/2+0.3,base_height + body_height - 15]) \n            cube([0.5,0.2,2], center=true);\n    }\n    \n    // Left electrode\n    color(\"gold\") translate([-10,0,base_height + body_height + 2]) \n        cylinder(r=electrode_radius, h=electrode_height);\n    color(\"gold\") translate([-10,0,base_height + body_height + electrode_height + 2]) \n        sphere(r=electrode_radius);\n    \n    // Right electrode\n    color(\"gold\") translate([10,0,base_height + body_height + 2]) \n        cylinder(r=electrode_radius, h=electrode_height);\n    color(\"gold\") translate([10,0,base_height + body_height + electrode_height + 2]) \n        sphere(r=electrode_radius);\n    \n    // Support rods\n    color(\"silver\") translate([-10,0,base_height + body_height/2]) \n        cylinder(r=1, h=body_height/2);\n    color(\"silver\") translate([10,0,base_height + body_height/2]) \n        cylinder(r=1, h=body_height/2);\n    \n    // Adjustment knob\n    color(\"black\") translate([0,body_depth/2+3,base_height + body_height/2]) \n        rotate([90,0,0]) cylinder(r=4, h=3);\n    color(\"silver\") translate([0,body_depth/2+3,base_height + body_height/2]) \n        rotate([90,0,0]) cylinder(r=1, h=4);\n    \n    // Ventilation holes\n    for(i = [0:2]) {\n        color(\"black\") translate([-6 + i*6,body_depth/2+0.1,base_height + 20 + i*5]) \n            cylinder(r=1, h=0.5);\n    }\n    \n    // Grounding post\n    color(\"gold\") translate([-15,-body_depth/2-1,base_height/2]) \n        cylinder(r=2, h=3);\n    \n    // Calibration screw\n    color(\"silver\") translate([0,0,base_height/2 + 5]) \n        cylinder(r=1.5, h=2);\n}\n\n// Render the electrometer\nelectorometer();",
    "renders": true
  },
  {
    "tool": "voltmeter",
    "openscad_code": "// Digital Multimeter / Voltmeter (Medium complexity realistic style)\n// Approx 90 x 150 x 35 mm\n\n// Overall dimensions\n$fn = 30;      // Smooth curves\n\n// Main body\nmodule body() {\n    difference() {\n        // Main enclosure\n        translate([0, 0, 12.5])\n            cube([85, 140, 25], center = true);\n        \n        // Front display cutout\n        translate([0, 35, 12.5])\n            cube([60, 35, 26], center = true);\n        \n        // Probe socket holes (left side)\n        for(y = [-30, -15]) {\n            translate([-42, y, 12.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 5, d = 8, center = true);\n        }\n        \n        // Back cover screws (4 corners)\n        for(x = [-35, 35])\n            for(y = [-60, 60]) {\n                translate([x, y, 25])\n                    cylinder(h = 3, d = 6, center = false);\n            }\n    }\n}\n\n// Display screen\nmodule display() {\n    color([0.1, 0.1, 0.1])\n    translate([0, 35, 25.1])\n        cube([55, 30, 1], center = true);\n    \n    // LCD segments\n    color([0, 0.8, 0.2])\n    for(i = [-20, -10, 0, 10, 20])\n        translate([i, 35, 25.2])\n            cube([8, 20, 0.2], center = true);\n}\n\n// Rotary selector knob\nmodule selector_knob() {\n    color([0.2, 0.2, 0.2])\n    translate([0, -5, 25])\n        cylinder(h = 8, d = 25, center = false);\n    \n    // Knob grip ridges\n    color([0.3, 0.3, 0.3])\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n            translate([10, -5, 25.5])\n                cube([2, 8, 2], center = true);\n    }\n    \n    // Pointer mark\n    color([1, 1, 1])\n    translate([0, -17, 29])\n        cube([2, 10, 1], center = true);\n}\n\n// Front panel labels/modes\nfunction modes() = [\"V~\", \"V-\", \"A~\", \"A-\", \"Î©\", \"OFF\"];\nmodule mode_labels() {\n    color([0.9, 0.9, 0.9])\n    for(i = [0:5]) {\n        rotate([0, 0, i*30 - 75])\n            translate([0, -35, 25.1])\n                cube([10, 2, 1], center = true);\n    }\n}\n\n// Probe sockets\nmodule probe_sockets() {\n    color([0.8, 0.8, 0.8])\n    for(y = [-30, -15]) {\n        translate([-42.5, y, 12.5])\n            rotate([0, 90, 0])\n                cylinder(h = 10, d = 12, center = true);\n    }\n    \n    // Color coding\n    translate([-42.5, -30, 12.5])\n        color([1, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 2, d = 14, center = true);\n    \n    translate([-42.5, -15, 12.5])\n        color([0, 0, 1])\n        rotate([0, 90, 0])\n            cylinder(h = 2, d = 14, center = true);\n}\n\n// Buttons\nmodule buttons() {\n    color([0.8, 0.8, 0.8])\n    translate([25, 15, 25])\n        cylinder(h = 3, d = 8, center = false);\n    \n    translate([-25, 15, 25])\n        cylinder(h = 3, d = 8, center = false);\n    \n    // Button labels\n    color([0, 0, 0])\n    translate([25, 15, 28.1])\n        cube([6, 2, 0.5], center = true);\n    \n    translate([-25, 15, 28.1])\n        cube([6, 2, 0.5], center = true);\n}\n\n// Rubber grips on sides\nmodule side_grips() {\n    color([0.1, 0.1, 0.1])\n    difference() {\n        translate([42.5, 0, 12.5])\n            cube([5, 130, 27], center = true);\n        \n        for(i = [-50:10:50])\n            translate([42.5, i, 12.5])\n                cube([6, 6, 29], center = true);\n    }\n    \n    mirror([1, 0, 0])\n        difference() {\n            translate([42.5, 0, 12.5])\n                cube([5, 130, 27], center = true);\n            \n            for(i = [-50:10:50])\n                translate([42.5, i, 12.5])\n                    cube([6, 6, 29], center = true);\n        }\n}\n\n// Battery compartment cover\nmodule battery_cover() {\n    color([0.7, 0.7, 0.7])\n    translate([0, 60, 0])\n        cube([70, 30, 1], center = true);\n    \n    // Screw\n    translate([20, 60, 0])\n        cylinder(h = 2, d = 5, center = true);\n}\n\n// Main assembly\ncolor([0.9, 0.9, 0.9]) body();\ncolor([0.8, 0.8, 0.8]) probe_sockets();\ndisplay();\nselector_knob();\nmode_labels();\nbuttons();\nside_grips();\nbattery_cover();",
    "renders": true
  },
  {
    "tool": "ammeter",
    "openscad_code": "// OpenSCAD Ammeter (medium complexity, realistic style)\n// Outer dimensions: ~60 mm wide Ã— 85 mm tall Ã— 30 mm deep\n\n// Body color\nbody_color = \"DarkSlateGray\";\n// Face color  \nface_color = \"gray80\";\n// Detail colors\nneedle_color = \"red\";\nterminal_color = \"gold\";\n\n// Main meter body\nmodule meter_body() {\n    difference() {\n        // Outer shell\n        color(body_color)\n        translate([0, 0, 15])\n        cube([60, 85, 30], center = true);\n\n        // Front recess for face\n        translate([0, 0, 31])\n        cube([56, 81, 2], center = true);\n\n        // Back recess for cover plate\n        translate([0, 0, -1])\n        cube([56, 81, 2], center = true);\n    }\n}\n\n// Front scale face\nmodule scale_face() {\n    color(face_color)\n    translate([0, 0, 31.5])\n    cube([56, 81, 1], center = true);\n}\n\n// Needle pointer\nmodule needle() {\n    color(needle_color)\n    translate([0, 15, 32])\n    rotate([0, 0, -30])\n    linear_extrude(height = 1)\n    polygon(points = [[0, 0], [-3, -25], [3, -25]]);\n}\n\n// Scale marks (radial)\nmodule scale_marks() {\n    color(\"black\")\n    for (a = [-45:5:45]) {\n        translate([0, 15, 32.5])\n        rotate([0, 0, a])\n        translate([0, -38, 0])\n        cube([0.5, 5, 0.5], center = true);\n    }\n}\n\n// Scale numbers\nmodule scale_numbers() {\n    color(\"black\")\n    for (a = [-45:15:45])\n        translate([0, 15, 32.5])\n        rotate([0, 0, a])\n        translate([0, -30, 0])\n        scale([0.3, 0.3, 1])\n        text(str((a + 45) / 9), size = 5, halign = \"center\", valign = \"center\");\n}\n\n// Terminal posts\nmodule terminal_post(x_pos) {\n    color(terminal_color)\n    translate([x_pos, -42.5, 15])\n    cylinder(h = 10, d = 5, center = true);\n    translate([x_pos, -42.5, 20])\n    sphere(d = 6);\n}\n\n// Knurled adjustment knob on side\nmodule adjustment_knob() {\n    color(\"silver\")\n    translate([30, 0, 15])\n    rotate([0, 90, 0])\n    cylinder(h = 15, d = 10, $fn = 16);\n    for (i = [0:15:165])\n        rotate([0, 0, i])\n        translate([0, 5, 0])\n        cube([0.5, 1, 15], center = true);\n}\n\n// Carry handle\nmodule handle() {\n    color(\"black\")\n    translate([0, 42.5, 25])\n    rotate([90, 0, 0])\n    cylinder(h = 50, d = 6, center = true);\n    translate([25, 42.5, 25])\n    sphere(d = 6);\n    translate([-25, 42.5, 25])\n    sphere(d = 6);\n}\n\n// Assemble the ammeter\nmeter_body();\nscale_face();\nneedle();\nscale_marks();\nscale_numbers();\nterminal_post(20);\nterminal_post(-20);\nadjustment_knob();\nhandle();",
    "renders": true
  },
  {
    "tool": "ohmmeter",
    "openscad_code": "// Digital Ohmmeter (Multimeter Style)\n// 3D printable at ~75 mm length\n\n// Color definitions\ncolor_body = \"darkslategray\";\ncolor_display = \"black\"; \ncolor_leads = \"red\";\ncolor_probes = \"silver\";\ncolor_buttons = \"lightgray\";\n\n// Main body\nmodule body() {\n    color(color_body) difference() {\n        // Main housing\n        cube([55, 90, 25], center=true);\n        \n        // Display cutout\n        translate([0, 20, 12])\n            cube([40, 25, 1], center=true);\n            \n        // Button holes\n        for(y = [-10:10:20]) {\n            translate([-22, y, 12])\n                cylinder(h=2, r=4, $fn=16);\n        }\n    }\n}\n\n// Display screen\nmodule display() {\n    color(color_display)\n    translate([0, 20, 13.5])\n        cube([38, 23, 0.5], center=true);\n}\n\n// Buttons\nmodule buttons() {\n    for(y = [-10:10:20]) {\n        color(color_buttons)\n        translate([-22, y, 10])\n            cylinder(h=4, r=3.5, $fn=16);\n    }\n}\n\n// Dial selector\nmodule dial() {\n    color(\"darkgray\")\n    translate([20, -25, 12])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=5, r=8, $fn=32);\n        cylinder(h=6, r=2, $fn=16);\n    }\n}\n\n// Probe connector jacks\nmodule jacks() {\n    // Common jack\n    color(\"black\")\n    translate([15, -45, 0])\n        cylinder(h=10, r=3, $fn=16);\n        \n    // V/Î© jack\n    color(\"red\")\n    translate([-15, -45, 0])\n        cylinder(h=10, r=3, $fn=16);\n}\n\n// Test leads\nmodule test_leads() {\n    // Left lead\n    color(color_leads)\n    translate([-25, -55, 0])\n    rotate([90, 0, 0])\n    cylinder(h=50, r=1.5, $fn=8);\n    \n    color(color_probes)\n    translate([-25, -105, 0])\n    rotate([90, 0, 0])\n    cylinder(h=15, r=2, $fn=8);\n    \n    // Right lead\n    color(color_leads)\n    translate([25, -55, 0])\n    rotate([90, 0, 0])\n    cylinder(h=50, r=1.5, $fn=8);\n    \n    color(color_probes)\n    translate([25, -105, 0])\n    rotate([90, 0, 0])\n    cylinder(h=15, r=2, $fn=8);\n}\n\n// Grip texture\nmodule grip_texture() {\n    color(\"black\")\n    for(i = [-30:5:30]) {\n        translate([0, i, -12])\n            cube([50, 2, 1], center=true);\n    }\n}\n\n// Assembly\nbody();\ndisplay();\nbuttons();\ndial();\njacks();\ntest_leads();\ngrip_texture();",
    "renders": true
  },
  {
    "tool": "multimeter",
    "openscad_code": "// Realistic Multimeter - Medium Complexity\n// Approximate size: 80mm x 160mm x 35mm\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule multimeter() {\n    // Main body\n    color(\"#2C2C2C\") {\n        difference() {\n            rounded_cube([80, 160, 35], 5);\n            \n            // Display window cutout\n            translate([10, 130, 34.5])\n                cube([60, 20, 2]);\n                \n            // Dial cutout\n            translate([40, 110, 34.5])\n                cylinder(h=3, r=12, $fn=32);\n        }\n    }\n    \n    // Display screen\n    color(\"#001122\") {\n        translate([12, 132, 34])\n            cube([56, 16, 0.5]);\n    }\n    \n    // Display glass effect\n    color(\"#4488FF\", 0.3) {\n        translate([12, 132, 34.5])\n            cube([56, 16, 0.1]);\n    }\n    \n    // Selection dial\n    color(\"#333333\") {\n        translate([40, 110, 35])\n            cylinder(h=5, r=15, $fn=32);\n    }\n    \n    // Dial knob\n    color(\"#CC0000\") {\n        translate([40, 110, 40])\n            cylinder(h=3, r=8, $fn=32);\n    }\n    \n    // Dial indicator\n    color(\"#FFFFFF\") {\n        translate([40, 118, 41])\n            cube([2, 6, 0.5]);\n    }\n    \n    // Function markings around dial\n    for (i = [0:11]) {\n        color(\"#FFFFFF\") {\n            rotate([0, 0, i * 30])\n                translate([40, 125, 34.8])\n                    cube([1, 4, 0.2]);\n        }\n    }\n    \n    // Probe jacks\n    color(\"#000000\") {\n        translate([20, 20, 34.5])\n            cylinder(h=5, r=4, $fn=16);\n        translate([60, 20, 34.5])\n            cylinder(h=5, r=4, $fn=16);\n    }\n    \n    // Jack labels\n    color(\"#FF0000\") {\n        translate([15, 10, 34.5])\n            cube([10, 8, 0.5]);\n    }\n    \n    color(\"#000000\") {\n        translate([55, 10, 34.5])\n            cube([10, 8, 0.5]);\n    }\n    \n    // Side grips\n    color(\"#444444\") {\n        for (i = [0:3]) {\n            translate([0, 30 + i * 30, 10])\n                cube([5, 15, 15]);\n            translate([75, 30 + i * 30, 10])\n                cube([5, 15, 15]);\n        }\n    }\n    \n    // Back stand\n    color(\"#222222\") {\n        translate([60, 70, 0])\n            rotate([75, 0, 0])\n                cube([15, 2, 30]);\n    }\n    \n    // Battery compartment\n    color(\"#111111\") {\n        translate([20, 50, 0])\n            difference() {\n                cube([40, 40, 2]);\n                translate([5, 5, -1])\n                    cube([30, 30, 4]);\n            }\n    }\n    \n    // Brand label area\n    color(\"#666666\") {\n        translate([25, 85, 34.8])\n            cube([30, 15, 0.5]);\n    }\n    \n    // Mode buttons\n    color(\"#333333\") {\n        translate([15, 100, 34.5])\n            cylinder(h=2, r=3, $fn=16);\n        translate([65, 100, 34.5])\n            cylinder(h=2, r=3, $fn=16);\n    }\n}\n\n// Helper module for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (i = [0, 1], j = [0, 1], k = [0, 1]) {\n            translate([i * (size[0] - 2 * radius), j * (size[1] - 2 * radius), k * (size[2] - 2 * radius)])\n                sphere(radius, $fn=16);\n        }\n    }\n}\n\n// Generate the multimeter\nmultimeter();",
    "renders": true
  },
  {
    "tool": "wattmeter",
    "openscad_code": "// Wattmeter - Realistic Style, Medium Complexity\n// Dimensions: 80mm x 50mm x 30mm\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.15, 0.15, 0.15];  // Dark gray\ncolor_display = [0.1, 0.1, 0.1];  // Black\ncolor_accent = [0.8, 0.2, 0.2];   // Red accent\ncolor_probe = [0.9, 0.9, 0.9];    // Light gray\ncolor_text = [0.95, 0.95, 0.95];  // White\n\n// Main body\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Main housing\n        cube([70, 45, 25], center = true);\n        \n        // Display cutout\n        translate([0, 5, 12])\n            cube([50, 25, 2], center = true);\n        \n        // Button holes\n        translate([-20, -15, 12])\n            cylinder(h = 3, r = 3);\n        translate([0, -15, 12])\n            cylinder(h = 3, r = 3);\n        translate([20, -15, 12])\n            cylinder(h = 3, r = 3);\n        \n        // Screw holes\n        for(x = [-30, 30])\n            for(y = [-15, 15])\n                translate([x, y, 12])\n                    cylinder(h = 3, r = 2);\n    }\n}\n\n// Display screen\nmodule display() {\n    color(color_display)\n    translate([0, 5, 13])\n        cube([48, 23, 0.5], center = true);\n    \n    // Display segments\n    color(color_text)\n    for(i = [-15, -5, 5, 15]) {\n        translate([i, 5, 13.5])\n            cube([3, 12, 0.1], center = true);\n    }\n}\n\n// Buttons\nmodule buttons() {\n    color(color_accent)\n    translate([-20, -15, 13.5])\n        cylinder(h = 2, r = 2.5);\n    translate([0, -15, 13.5])\n        cylinder(h = 2, r = 2.5);\n    translate([20, -15, 13.5])\n        cylinder(h = 2, r = 2.5);\n}\n\n// Side probes\nmodule probes() {\n    // Left probe\n    color(color_probe)\n    translate([-45, 0, 0])\n        rotate([90, 0, 0])\n        union() {\n            // Handle\n            cylinder(h = 20, r = 3);\n            // Tip\n            translate([0, 0, 20])\n                cylinder(h = 8, r1 = 1, r2 = 0.5);\n            // Grip rings\n            for(i = [2, 6, 10, 14, 18])\n                translate([0, 0, i])\n                    cylinder(h = 1, r = 3.5);\n        }\n    \n    // Right probe\n    translate([45, 0, 0])\n        rotate([90, 0, 0])\n        union() {\n            cylinder(h = 20, r = 3);\n            translate([0, 0, 20])\n                cylinder(h = 8, r1 = 1, r2 = 0.5);\n            for(i = [2, 6, 10, 14, 18])\n                translate([0, 0, i])\n                    cylinder(h = 1, r = 3.5);\n        }\n    \n    // Probe cables\n    color([0, 0, 0])\n    translate([-40, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 35, r = 1.5);\n    translate([40, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 35, r = 1.5);\n}\n\n// Ventilation slots\nmodule vents() {\n    color(color_body)\n    difference() {\n        translate([0, 0, -12.5])\n            cube([60, 40, 1], center = true);\n        for(i = [-25:5:25])\n            translate([i, 0, -12])\n                cube([2, 35, 2], center = true);\n    }\n}\n\n// Brand label\nmodule label() {\n    color(color_text)\n    translate([0, 17, 0])\n        cube([30, 2, 0.5], center = true);\n}\n\n// Power connector\nmodule power_connector() {\n    color([0.7, 0.7, 0.7])\n    translate([0, -20, 0])\n        union() {\n            // Main connector\n            cube([15, 8, 8], center = true);\n            // Pins\n            for(i = [-5, 0, 5])\n                translate([i, -4, 0])\n                    cylinder(h = 4, r = 1);\n        }\n}\n\n// Assembly\ntranslate([0, 0, 12.5])\n    main_body();\ntranslate([0, 0, 12.5])\n    display();\ntranslate([0, 0, 12.5])\n    buttons();\ntranslate([0, 0, 12.5])\n    vents();\ntranslate([0, 0, 12.5])\n    label();\ntranslate([0, 0, 12.5])\n    power_connector();\nprobes();",
    "renders": true
  },
  {
    "tool": "varmeter",
    "openscad_code": "// Varmeter (VARiable capacitor METER) tool - realistic 3D printable model\n// A device used to measure small capacitance values via variable capacitor tuning\n\n// Main dimensions (mm)\n$fa = 2;\n$fs = 0.5;\nbody_w = 35;\nbody_h = 22;\nbody_l = 80;\nknob_d = 18;\nknob_h = 8;\ndisplay_w = 28;\ndisplay_h = 15;\nprobe_l = 45;\nprobe_d = 4;\nclip_w = 12;\nclip_h = 6;\n\n// Colors\nbody_color = \"DarkSlateGray\";\nknob_color = \"Black\";\ndisplay_color = \"LightGray\";\nprobe_color = \"Silver\";\nclip_color = \"Red\";\n\n// Main body with rounded edges\nmodule body() {\n    color(body_color)\n    union() {\n        // Main rectangular body\n        translate([0, 0, body_h/2])\n            cube([body_l, body_w, body_h], center=true);\n        \n        // Rounded front edge\n        translate([body_l/2, 0, body_h/2])\n            rotate([0, 90, 0])\n                cylinder(h=body_w, r=body_h/2, center=true);\n    }\n}\n\n// Tuning knob with grip ridges\nmodule tuning_knob() {\n    color(knob_color)\n    union() {\n        // Main knob cylinder\n        translate([-body_l/2 - 2, 0, body_h/2])\n            cylinder(h=knob_h, r=knob_d/2, center=true);\n        \n        // Grip ridges\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([-body_l/2 - 2, knob_d/2 - 1, body_h/2])\n                    cube([2, 2, knob_h], center=true);\n        }\n        \n        // Center indicator line\n        translate([-body_l/2 - 2, 0, body_h/2 + knob_h/2 + 0.5])\n            cube([1, knob_d/2, 0.5], center=true);\n    }\n}\n\n// Analog display window\nmodule display() {\n    color(display_color)\n    difference() {\n        // Main display bezel\n        translate([body_l/4, 0, body_h/2 + 1])\n            cube([display_w, display_h, 2], center=true);\n        \n        // Display recess\n        translate([body_l/4, 0, body_h/2 + 2])\n            cube([display_w - 4, display_h - 4, 3], center=true);\n    }\n    \n    // Calibration marks\n    color(\"Black\")\n    for(i=[-45:15:45]) {\n        rotate([0, 0, i])\n            translate([body_l/4 + display_w/2 - 2, 0, body_h/2 + 3])\n                cube([0.5, 1, 0.5], center=true);\n    }\n}\n\n// Test probe with clip\nmodule test_probe() {\n    color(probe_color)\n    union() {\n        // Probe body\n        translate([body_l/2 + probe_l/2, 0, body_h/2])\n            cylinder(h=probe_l, r=probe_d/2, center=true);\n        \n        // Probe tip\n        translate([body_l/2 + probe_l, 0, body_h/2])\n            cone(r1=probe_d/2, r2=0, h=5);\n        \n        // Insulating sleeve\n        color(\"Black\")\n        translate([body_l/2 + 5, 0, body_h/2])\n            cylinder(h=10, r=probe_d/2 + 1, center=true);\n    }\n    \n    // Test clip\n    color(clip_color)\n    translate([body_l/2 + probe_l + 8, 0, body_h/2])\n    union() {\n        // Clip body\n        cube([clip_w, clip_h, 3], center=true);\n        \n        // Clip teeth\n        for(i=[-1:1]) {\n            translate([clip_w/2 + 1, i*2, 0])\n                cube([2, 1, 2], center=true);\n        }\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    color(\"DarkGray\")\n    // Range selector button\n    translate([-body_l/4, body_w/2 - 3, body_h/2 + 1])\n        cube([6, 3, 1], center=true);\n    \n    // Zero adjust knob\n    translate([-body_l/4, -body_w/2 + 3, body_h/2 + 1])\n        cylinder(h=1, r=3, center=true);\n}\n\n// Connection terminals\nmodule terminals() {\n    color(\"Gold\")\n    // Positive terminal\n    translate([body_l/2 - 5, body_w/2 - 3, 0])\n        cylinder(h=body_h, r=2);\n    \n    // Negative terminal\n    translate([body_l/2 - 5, -body_w/2 + 3, 0])\n        cylinder(h=body_h, r=2);\n}\n\n// Assembly\nunion() {\n    body();\n    tuning_knob();\n    display();\n    test_probe();\n    control_buttons();\n    terminals();\n    \n    // Model label\n    color(\"White\")\n    translate([0, 0, body_h + 1])\n        linear_extrude(height=0.5)\n            text(\"VAR-METER\", size=4, halign=\"center\");\n}",
    "renders": true
  },
  {
    "tool": "phase",
    "openscad_code": "// Phase Tool - Realistic Style, Medium Complexity\n// A 3D printable phase tool with handle, blade guard, and cutting edge\n\n// Tool dimensions (mm)\nhandle_length = 80;\nhandle_diameter = 25;\nblade_length = 60;\nblade_width = 30;\nblade_thickness = 3;\nguard_width = 40;\nguard_thickness = 8;\n\n// Main module\nmodule phase_tool() {\n    translate([0, 0, handle_length/2]) {\n        // Handle with grip texture\n        union() {\n            color([0.2, 0.1, 0.05]) handle();\n            color([0.3, 0.15, 0.08]) grip_texture();\n        }\n        \n        // Blade guard (ferrule)\n        color([0.7, 0.7, 0.7]) translate([0, 0, handle_length/2 + guard_thickness/2]) \n            blade_guard();\n        \n        // Blade assembly\n        translate([0, 0, handle_length/2 + guard_thickness + blade_length/2]) {\n            color([0.8, 0.8, 0.8]) blade();\n            color([0.9, 0.9, 0.9]) cutting_edge();\n        }\n    }\n}\n\n// Handle module with ergonomic shape\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h=handle_length, r1=handle_diameter/2, r2=handle_diameter/2 - 2, center=true);\n        \n        // Hollow center for weight reduction\n        cylinder(h=handle_length - 10, r=handle_diameter/2 - 5, center=true);\n        \n        // Hanging hole\n        rotate([90, 0, 0]) \n            translate([0, handle_length/2 - 10, 0]) \n                cylinder(h=handle_diameter, r=3, center=true);\n    }\n}\n\n// Grip texture rings\nmodule grip_texture() {\n    for(i = [-handle_length/2 + 10 : 5 : handle_length/2 - 10]) {\n        translate([0, 0, i]) \n            difference() {\n                cylinder(h=2, r=handle_diameter/2, center=true);\n                cylinder(h=3, r=handle_diameter/2 - 2, center=true);\n            }\n    }\n}\n\n// Blade guard (ferrule)\nmodule blade_guard() {\n    difference() {\n        // Main guard body\n        cube([guard_width, guard_thickness, guard_thickness], center=true);\n        \n        // Rounded edges\n        for(x = [-1, 1]) {\n            translate([x * (guard_width/2 - guard_thickness/2), 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=guard_thickness, r=guard_thickness/2, center=true);\n        }\n    }\n}\n\n// Main blade body\nmodule blade() {\n    difference() {\n        // Blade shape with taper\n        hull() {\n            // Base of blade\n            translate([0, 0, -blade_length/2 + 10]) \n                cube([blade_width, blade_thickness, 20], center=true);\n            \n            // Tip of blade\n            translate([0, 0, blade_length/2]) \n                cube([blade_width/4, blade_thickness, 1], center=true);\n        }\n        \n        // Phase reference markings\n        for(i = [-20:10:20]) {\n            translate([i, 0, blade_length/2 - 10])\n                cube([0.5, blade_thickness + 0.1, 5], center=true);\n        }\n        \n        // Center alignment groove\n        translate([0, 0, 0])\n            cube([blade_width, 1, blade_length], center=true);\n    }\n}\n\n// Cutting edge detail\nmodule cutting_edge() {\n    translate([0, blade_thickness/2 + 0.1, blade_length/2 - 5])\n        cube([blade_width * 0.9, 0.2, 10], center=true);\n}\n\n// Generate the complete tool\nphase_tool();",
    "renders": true
  },
  {
    "tool": "frequency",
    "openscad_code": "// Frequency Counter / Tuning Fork Tool\n// Realistic style, medium complexity\n\n// Color definitions\nfork_color = \"silver\";\nhandle_color = \"darkslategray\";\nmarking_color = \"black\";\n\n// Overall dimensions\ntotal_length = 80;\nfork_length = 35;\nhandle_length = 45;\nfork_width = 25;\nfork_thickness = 4;\nhandle_diameter = 12;\n\n// Tuning fork tines\nmodule fork_tine(width, length, thickness) {\n    difference() {\n        // Main tine body\n        translate([0, 0, length/2])\n            cube([width, thickness, length], center=true);\n        \n        // Rounded tip\n        translate([0, 0, length])\n            sphere(d=thickness, $fn=16);\n        \n        // Taper the end slightly\n        translate([0, 0, length - 4])\n            cube([width*1.2, thickness*1.2, 8], center=true);\n    }\n}\n\n// Fork base with frequency marking\nmodule fork_base() {\n    union() {\n        // Main base block\n        translate([0, 0, fork_length/2])\n            cube([fork_width, fork_thickness, fork_length], center=true);\n        \n        // Rounded top\n        translate([0, 0, fork_length])\n            sphere(d=fork_thickness*1.2, $fn=20);\n        \n        // Frequency marking (440 Hz)\n        color(marking_color)\n        translate([-fork_width/4, fork_thickness/2 + 0.1, fork_length - 8])\n            rotate([90, 0, 0])\n            linear_extrude(height=0.2)\n                text(\"440\", size=4, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Handle with grip pattern\nmodule handle() {\n    union() {\n        // Main cylindrical handle\n        color(handle_color)\n        translate([0, 0, -handle_length/2])\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [1:4]) {\n            translate([0, 0, -i * 10])\n                cylinder(h=2, d=handle_diameter + 1, $fn=32);\n        }\n        \n        // End cap\n        translate([0, 0, -handle_length])\n            sphere(d=handle_diameter, $fn=32);\n    }\n}\n\n// Main assembly\nmodule frequency_tool() {\n    union() {\n        // Handle\n        handle();\n        \n        // Fork base\n        color(fork_color)\n        translate([0, 0, 0])\n            fork_base();\n        \n        // Two fork tines\n        translate([-fork_width/4, 0, fork_length/2])\n            fork_tine(fork_width/4, fork_length, fork_thickness);\n        \n        translate([fork_width/4, 0, fork_length/2])\n            fork_tine(fork_width/4, fork_length, fork_thickness);\n    }\n}\n\n// Generate the tool\nfrequency_tool();",
    "renders": true
  },
  {
    "tool": "counter",
    "openscad_code": "// Counter Tool - Mechanical Tally Counter\n// Realistic style, medium complexity\n\n$fn=50;\n\n// Main body dimensions\nbody_w = 60;\nbody_h = 45;\nbody_d = 30;\nwall_t = 2.5;\nwindow_w = 15;\nwindow_h = 10;\n\n// Button dimensions\nbutton_w = 25;\nbutton_h = 8;\nbutton_d = 18;\nbutton_gap = 1;\n\n// Counter wheel dimensions\nwheel_r = 8;\nwheel_h = 3;\nwheel_gap = 1;\nnum_wheels = 4;\n\n// Reset knob\nknob_r = 6;\nknob_h = 10;\n\n// Colors\nbody_color = [0.2, 0.2, 0.2];\nbutton_color = [0.1, 0.1, 0.1];\nwindow_color = [0.3, 0.3, 0.7];\nwheel_color = [0.8, 0.8, 0.8];\nknob_color = [0.6, 0.6, 0.6];\n\n// Main body shell\nmodule body() {\n    color(body_color)\n    difference() {\n        // Outer shell\n        cube([body_w, body_d, body_h], center=true);\n        \n        // Hollow inside\n        translate([0, 0, wall_t/2])\n        cube([body_w-wall_t*2, body_d-wall_t, body_h-wall_t*2], center=true);\n        \n        // Display windows\n        for(i=[-1.5, -0.5, 0.5, 1.5]) {\n            translate([i*(window_w+2), body_d/2-wall_t, 5])\n            cube([window_w, wall_t+1, window_h], center=true);\n        }\n        \n        // Button hole\n        translate([0, body_d/2-wall_t, -body_h/4])\n        cube([button_w+button_gap*2, wall_t+1, button_h+button_gap*2], center=true);\n    }\n}\n\n// Counter button\nmodule counter_button() {\n    color(button_color)\n    translate([0, 0, -body_h/4])\n    difference() {\n        // Button body\n        cube([button_w, button_d, button_h], center=true);\n        \n        // Finger dimple\n        translate([0, button_d/2-2, 0])\n        sphere(r=button_w/3);\n        \n        // Spring cavity\n        translate([0, -button_d/4, -button_h/4])\n        cube([button_w/2, button_d/2, button_h/2], center=true);\n    }\n}\n\n// Counter wheels (digits)\nmodule counter_wheels() {\n    color(wheel_color)\n    for(i=[0:num_wheels-1]) {\n        translate([(i-1.5)*(wheel_r*2+wheel_gap), 0, 5])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(r=wheel_r, h=wheel_h, center=true);\n            \n            // Digit notches\n            for(j=[0:9]) {\n                rotate([0, 0, j*36])\n                translate([wheel_r-1, 0, 0])\n                cube([1, 2, wheel_h+0.1], center=true);\n            }\n            \n            // Center hole\n            cylinder(r=2, h=wheel_h+0.2, center=true);\n        }\n    }\n}\n\n// Reset knob\nmodule reset_knob() {\n    color(knob_color)\n    translate([body_w/2-wall_t-2, 0, 0])\n    rotate([0, 90, 0])\n    union() {\n        cylinder(r=knob_r, h=knob_h, center=true);\n        \n        // Grip texture\n        for(i=[0:7]) {\n            rotate([0, 0, i*45])\n            translate([knob_r, 0, 0])\n            cube([1, knob_r/3, knob_h], center=true);\n        }\n        \n        // Shaft\n        translate([-knob_h/2-5, 0, 0])\n        cylinder(r=2, h=10, center=true);\n    }\n}\n\n// Display window covers\nmodule windows() {\n    color(window_color)\n    translate([0, body_d/2-wall_t/2, 5])\n    for(i=[-1.5, -0.5, 0.5, 1.5]) {\n        translate([i*(window_w+2), 0, 0])\n        cube([window_w, 0.5, window_h], center=true);\n    }\n}\n\n// Assembly\nbody();\ncounter_button();\ncounter_wheels();\nreset_knob();\nwindows();",
    "renders": true
  },
  {
    "tool": "tachoscope",
    "openscad_code": "// Tachoscope (Tachometer) Tool - Realistic Medium Complexity\n// 3D printable tachoscope with rotating dial and measurement probe\n\n// Main dimensions\nbody_length = 80;\nbody_width = 40;\nbody_height = 25;\ndial_diameter = 30;\nprobe_length = 60;\nprobe_diameter = 6;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];  // Dark grey\ncolor_dial = [0.9, 0.9, 0.9];  // Light grey\ncolor_probe = [0.8, 0.8, 0.8]; // Silver\ncolor_details = [0.1, 0.1, 0.1]; // Black\n\n// Main body\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Main housing\n        union() {\n            // Central body\n            translate([0, 0, body_height/2])\n                cube([body_length, body_width, body_height], center=true);\n            \n            // Grip extensions\n            translate([body_length/2 - 10, 0, body_height/2])\n                cube([20, body_width + 10, body_height - 5], center=true);\n            \n            // Dial housing\n            translate([-body_length/3, 0, body_height])\n                cylinder(h=10, d=dial_diameter + 10, center=true);\n        }\n        \n        // Display window\n        translate([-body_length/3, 0, body_height + 5])\n            cube([20, 15, 2], center=true);\n    }\n}\n\n// Rotating dial\nmodule dial() {\n    color(color_dial)\n    translate([-body_length/3, 0, body_height + 5])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=3, d=dial_diameter, center=true);\n        \n        // Dial markings\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([dial_diameter/2 - 15, 0, 0])\n                    cube([10, 1, 3.1], center=true);\n        }\n        \n        // Center hole\n        cylinder(h=4, d=4, center=true);\n    }\n}\n\n// Dial pointer\nmodule dial_pointer() {\n    color(color_details)\n    translate([-body_length/3, 0, body_height + 7])\n    rotate([90, 0, 0])\n    union() {\n        // Pointer arm\n        translate([0, dial_diameter/4, 0])\n            cube([dial_diameter/2, 2, 1], center=true);\n        \n        // Pointer tip\n        translate([dial_diameter/2 - 2, 0, 0])\n            cylinder(h=1, d=3, center=true);\n    }\n}\n\n// Measurement probe\nmodule probe() {\n    color(color_probe)\n    translate([body_length/2 + probe_length/2 - 10, 0, body_height/2])\n    union() {\n        // Main probe shaft\n        rotate([0, 90, 0])\n            cylinder(h=probe_length, d=probe_diameter, center=true);\n        \n        // Probe tip\n        translate([probe_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, d1=probe_diameter, d2=1, center=true);\n        \n        // Probe housing\n        translate([-probe_length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, d=probe_diameter + 4, center=true);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    color(color_details)\n    for(i = [0:1:2]) {\n        translate([body_length/4 - 10, -body_width/3 + i*10, body_height + 2])\n            cylinder(h=3, d=6, center=true);\n    }\n}\n\n// Grip texture\nmodule grip_texture() {\n    color(color_body)\n    difference() {\n        translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Grip pattern\n        for(i = [-body_length/2 + 5:5:body_length/2 - 5]) {\n            translate([i, 0, body_height/2])\n                cube([2, body_width - 5, body_height - 2], center=true);\n        }\n    }\n}\n\n// Assembly\nmain_body();\ntranslate([0, 0, 0.1]) grip_texture();\ndial();\ndial_pointer();\nprobe();\nbuttons();\n\n// Text labels (simplified as raised rectangles)\ncolor(color_details)\ntranslate([-body_length/3 - 10, body_width/2 + 5, body_height + 2])\n    cube([15, 2, 1]);\n\ntranslate([-body_length/3 + 5, body_width/2 + 5, body_height + 2])\n    cube([8, 2, 1]);",
    "renders": true
  },
  {
    "tool": "stroboscope",
    "openscad_code": "// Stroboscope Tool - OpenSCAD\n// Realistic style, medium complexity\n\n// Main parameters\n$fn = 50;\nbody_length = 85;\nbody_diameter = 25;\nhandle_length = 40;\nhandle_diameter = 20;\nflash_diameter = 22;\nflash_depth = 8;\nbutton_diameter = 8;\nbutton_height = 3;\nscreen_width = 25;\nscreen_height = 12;\nscreen_depth = 2;\nwall_thickness = 2;\n\n// Main body module\nmodule stroboscope_body() {\n    difference() {\n        // Main cylindrical body\n        color([0.2, 0.2, 0.2])\n        cylinder(h=body_length, d=body_diameter, center=true);\n        \n        // Hollow out the body\n        translate([0, 0, -wall_thickness/2])\n        cylinder(h=body_length + 1, d=body_diameter - 2*wall_thickness, center=true);\n        \n        // Flash opening\n        translate([0, 0, body_length/2 - flash_depth/2])\n        cylinder(h=flash_depth + 1, d=flash_diameter, center=true);\n        \n        // Screen opening\n        translate([0, body_diameter/2 - screen_depth/2, body_length/4])\n        cube([screen_width, screen_depth + 1, screen_height], center=true);\n    }\n}\n\n// Handle module\nmodule handle() {\n    difference() {\n        // Main handle cylinder\n        color([0.1, 0.1, 0.1])\n        translate([0, 0, -body_length/2 - handle_length/2])\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip pattern - hollowed out rings\n        for(i = [0:5]) {\n            translate([0, 0, -body_length/2 - handle_length + i*6 + 3])\n            rotate([0, 90, 0])\n            cylinder(h=handle_diameter - 2*wall_thickness, d=handle_diameter - 4, center=true);\n        }\n        \n        // Battery compartment\n        translate([0, 0, -body_length/2 - handle_length + 15])\n        cylinder(h=25, d=handle_diameter - 6, center=true);\n    }\n}\n\n// Flash assembly\nmodule flash() {\n    // Flash reflector\n    color([0.9, 0.9, 0.9])\n    translate([0, 0, body_length/2])\n    cylinder(h=flash_depth/2, d1=flash_diameter, d2=flash_diameter*0.8);\n    \n    // Flash lens\n    color([0.7, 0.7, 0.9, 0.6])\n    translate([0, 0, body_length/2 + flash_depth/4])\n    cylinder(h=flash_depth/4, d=flash_diameter*0.75);\n    \n    // LED array\n    for(i = [-1:1]) {\n        for(j = [-1:1]) {\n            color([1, 1, 0.9])\n            translate([i*5, j*5, body_length/2 + flash_depth/2 - 1])\n            sphere(d=3);\n        }\n    }\n}\n\n// Control button\nmodule control_button() {\n    color([0.8, 0.8, 0.8])\n    translate([body_diameter/2 + button_height/2, 0, body_length/4])\n    rotate([0, 90, 0])\n    cylinder(h=button_height, d=button_diameter, center=true);\n    \n    // Button top surface\n    color([0.9, 0.9, 0.9])\n    translate([body_diameter/2 + button_height, 0, body_length/4])\n    sphere(d=button_diameter);\n}\n\n// LCD screen\nmodule lcd_screen() {\n    color([0.1, 0.1, 0.1])\n    translate([0, body_diameter/2 - screen_depth/2, body_length/4])\n    cube([screen_width, screen_depth, screen_height], center=true);\n    \n    // Screen display\n    color([0.2, 0.3, 0.5])\n    translate([0, body_diameter/2 - screen_depth/2 + 0.1, body_length/4])\n    cube([screen_width - 2, 0.2, screen_height - 2], center=true);\n}\n\n// Adjustment dial\nmodule adjustment_dial() {\n    color([0.3, 0.3, 0.3])\n    translate([0, -body_diameter/2 - 3, -body_length/4])\n    rotate([90, 0, 0])\n    cylinder(h=6, d=15);\n    \n    // Knurling pattern\n    for(i = [0:15]) {\n        rotate([0, 0, i*24])\n        translate([7.5, 0, -3])\n        cube([0.5, 1, 6], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    stroboscope_body();\n    handle();\n    flash();\n    control_button();\n    lcd_screen();\n    adjustment_dial();\n}",
    "renders": true
  },
  {
    "tool": "oscilloscope",
    "openscad_code": "// Realistic Oscilloscope Model - Medium Complexity\n// 3D printable with proper wall thickness and no overhangs\n\n// Main dimensions\nscope_width = 80;\nscope_height = 45;\nscope_depth = 60;\nscreen_width = 50;\nscreen_height = 30;\nhandle_radius = 8;\nhandle_length = 40;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_screen = [0.1, 0.1, 0.1];\ncolor_bevel = [0.3, 0.3, 0.3];\ncolor_controls = [0.8, 0.8, 0.8];\ncolor_text = [1, 1, 1];\ncolor_accent = [0.9, 0.1, 0.1];\n\nmodule oscilloscope() {\n    // Main body\n    color(color_body)\n    difference() {\n        // Outer shell with rounded edges\n        hull() {\n            translate([-scope_width/2, -scope_depth/2, 0])\n                cube([scope_width, scope_depth, scope_height], center=false);\n            translate([-scope_width/2 + 3, -scope_depth/2 + 3, 3])\n                cube([scope_width - 6, scope_depth - 6, scope_height - 6], center=false);\n        }\n        \n        // Hollow interior\n        translate([-scope_width/2 + 4, -scope_depth/2 + 4, 4])\n            cube([scope_width - 8, scope_depth - 8, scope_height - 8], center=false);\n    }\n    \n    // Front panel with screen\n    color(color_bevel)\n    translate([-scope_width/2, -scope_depth/2 - 0.1, 0])\n        cube([scope_width, scope_depth/10, scope_height], center=false);\n    \n    // Screen bezel\n    color(color_body)\n    translate([0, -scope_depth/2 - 0.5, scope_height/2])\n        difference() {\n            cube([screen_width + 8, 2, screen_height + 8], center=true);\n            cube([screen_width + 4, 3, screen_height + 4], center=true);\n        }\n    \n    // Screen\n    color(color_screen)\n    translate([0, -scope_depth/2 - 1, scope_height/2])\n        cube([screen_width, 1, screen_height], center=true);\n    \n    // Grid lines on screen\n    for (i = [-2:2]) {\n        color([0.3, 0.3, 0.3])\n        translate([i * 10, -scope_depth/2 - 0.9, scope_height/2])\n            cube([0.5, 0.5, screen_height - 4], center=true);\n        translate([0, -scope_depth/2 - 0.9, scope_height/2 + i * 10])\n            cube([screen_width - 4, 0.5, 0.5], center=true);\n    }\n    \n    // Control knobs\n    for (i = [0:3]) {\n        color(color_controls)\n        translate([30 - i * 15, -scope_depth/2 - 3, 8])\n            cylinder(h=3, r=4, $fn=20);\n        color(color_body)\n        translate([30 - i * 15, -scope_depth/2 - 3.5, 8])\n            cylinder(h=1, r=3, $fn=20);\n    }\n    \n    // Channel inputs\n    for (i = [0:1]) {\n        color(color_accent)\n        translate([-30 + i * 20, -scope_depth/2 - 2, 5])\n            cylinder(h=2, r=2.5, $fn=16);\n        translate([-30 + i * 20, -scope_depth/2 - 2.5, 5])\n            cylinder(h=1, r=2, $fn=16);\n    }\n    \n    // Power button\n    color([0, 1, 0])\n    translate([35, -scope_depth/2 - 2, 5])\n        cylinder(h=2, r=3, $fn=16);\n    \n    // Carrying handle\n    color(color_body)\n    translate([0, 0, scope_height + 5])\n        difference() {\n            // Handle arch\n            rotate([90, 0, 0])\n                cylinder(h=scope_width - 10, r=handle_radius, center=true, $fn=20);\n            // Hollow handle\n            rotate([90, 0, 0])\n                cylinder(h=scope_width - 8, r=handle_radius - 2, center=true, $fn=20);\n        }\n    \n    // Feet\n    color(color_body)\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * 30, y * 25, -2])\n                cylinder(h=2, r=3, $fn=16);\n    \n    // Ventilation slots\n    color(color_body)\n    for (i = [0:4]) {\n        translate([0, scope_depth/2 - 5 - i * 8, scope_height/2])\n            cube([scope_width - 10, 1, 3], center=true);\n    }\n    \n    // Brand label\n    color(color_text)\n    translate([0, -scope_depth/2 - 2, scope_height - 8])\n        cube([25, 0.5, 6], center=true);\n}\n\n// Render the oscilloscope\noscilloscope();",
    "renders": true
  },
  {
    "tool": "wavemeter",
    "openscad_code": "// Wavemeter tool - a handheld device for measuring wave parameters\n// Realistic style, medium complexity\n\n$fn = 50;\n\n// Main colors\nwavemeter_body = [0.2, 0.2, 0.2];\nwavemeter_grip = [0.1, 0.1, 0.1];\nwavemeter_screen = [0.8, 0.9, 1.0];\nwavemeter_button = [0.9, 0.1, 0.1];\nwavemeter_antenna = [0.3, 0.3, 0.3];\n\n// Overall dimensions\nlength = 80;\nwidth = 45;\nheight = 25;\n\nmodule main_body() {\n    // Main rectangular body\n    color(wavemeter_body)\n    difference() {\n        cube([length, width, height], center = true);\n        \n        // Screen opening\n        translate([length/2 - 20, 0, height/2 - 2])\n            cube([25, 35, 2]);\n        \n        // Button holes\n        for(i = [0:2]) {\n            translate([length/2 - 35, -15 + i*15, height/2 - 2])\n                cylinder(h = 3, r = 3);\n        }\n    }\n}\n\nmodule screen() {\n    // LCD display\n    color(wavemeter_screen)\n    translate([length/2 - 20, 0, height/2 - 1])\n        cube([23, 33, 1]);\n}\n\nmodule buttons() {\n    // Control buttons\n    color(wavemeter_button)\n    for(i = [0:2]) {\n        translate([length/2 - 35, -15 + i*15, height/2])\n            cylinder(h = 2, r = 2.5);\n    }\n}\n\nmodule grip() {\n    // Ergonomic grip on back\n    color(wavemeter_grip)\n    difference() {\n        translate([0, 0, -height/2 - 3])\n            cube([length*0.8, width*0.9, 6], center = true);\n        \n        // Grip texture grooves\n        for(i = [-3:3]) {\n            translate([i*8, 0, -height/2 - 4])\n                cube([2, width*0.85, 8], center = true);\n        }\n    }\n}\n\nmodule antenna_housing() {\n    // Antenna connector housing\n    color(wavemeter_body)\n    translate([-length/2 - 8, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 15, r1 = 8, r2 = 6);\n}\n\nmodule antenna() {\n    // Foldable antenna\n    color(wavemeter_antenna)\n    translate([-length/2 - 15, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h = 30, r = 1.5);\n    \n    // Antenna tip\n    translate([-length/2 - 15, 0, 30])\n        sphere(r = 2);\n}\n\nmodule side_ports() {\n    // USB and power ports\n    color(wavemeter_body)\n    translate([0, -width/2 - 2, -5])\n        cube([10, 4, 6], center = true);\n    \n    translate([15, -width/2 - 2, -5])\n        cube([10, 4, 6], center = true);\n}\n\nmodule measurement_markings() {\n    // Frequency scale markings\n    color([0.4, 0.4, 0.4])\n    for(i = [0:9]) {\n        translate([length/2 - 30 + i*3, width/2 - 5, height/2 - 0.5])\n            cube([0.5, 3, 1]);\n    }\n}\n\n// Assembly\nmain_body();\nscreen();\nbuttons();\ngrip();\nantenna_housing();\nantenna();\nside_ports();\nmeasurement_markings();",
    "renders": true
  },
  {
    "tool": "resonator",
    "openscad_code": "// Resonator Tool - OpenSCAD Model\n// Medium complexity, realistic style\n\n// Color definitions\nresonator_color = [0.8, 0.8, 0.9];  // Light metallic gray\nhandle_color = [0.2, 0.2, 0.2];     // Black rubber\ndetail_color = [0.9, 0.9, 0.95];    // Chrome\n\n// Main parameters\nhandle_length = 80;\nhandle_diameter = 12;\nhead_width = 25;\nhead_height = 15;\nhead_length = 30;\nmembrane_diameter = 18;\nmembrane_thickness = 0.5;\n\n// Handle module\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle body\n        translate([0, 0, handle_length/2])\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [1:4]) {\n            translate([0, 0, i * 15])\n                cylinder(h=2, d=handle_diameter + 2, $fn=32);\n        }\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([handle_diameter/2 - 1, 0, 10])\n                    rotate([90, 0, 0])\n                        cylinder(h=2, d=3, $fn=16);\n        }\n    }\n}\n\n// Resonator head module\nmodule resonator_head() {\n    color(resonator_color)\n    union() {\n        // Main head body\n        translate([0, 0, head_height/2])\n            cube([head_width, head_length, head_height], center=true);\n        \n        // Rounded edges\n        translate([head_width/2 - 2, 0, head_height/2])\n            cylinder(h=head_length - 4, d=4, center=true, $fn=32);\n        translate([-head_width/2 + 2, 0, head_height/2])\n            cylinder(h=head_length - 4, d=4, center=true, $fn=32);\n    }\n}\n\n// Membrane assembly\nmodule membrane_assembly() {\n    color(detail_color)\n    union() {\n        // Membrane ring\n        difference() {\n            translate([0, 0, head_height - 1])\n                cylinder(h=2, d=membrane_diameter + 2, $fn=32);\n            translate([0, 0, head_height - 1.5])\n                cylinder(h=3, d=membrane_diameter, $fn=32);\n        }\n        \n        // Membrane surface\n        color([0.95, 0.95, 1])\n        translate([0, 0, head_height + 0.5])\n            cylinder(h=membrane_thickness, d=membrane_diameter - 1, $fn=32);\n    }\n}\n\n// Tuning mechanism\nmodule tuning_mechanism() {\n    color(detail_color)\n    union() {\n        // Tuning screw\n        translate([0, head_length/2 + 8, head_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=10, d=4, $fn=16);\n        \n        // Screw head\n        translate([0, head_length/2 + 13, head_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=2, d=6, $fn=6);\n        \n        // Reinforcement ribs\n        for(i = [-1:1]) {\n            translate([i * 8, 0, head_height - 3])\n                cube([2, head_length - 10, 6]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Head assembly\n    translate([0, 0, handle_length])\n        rotate([90, 0, 0])\n            union() {\n                resonator_head();\n                membrane_assembly();\n                tuning_mechanism();\n            }\n    \n    // Connection joint\n    color(resonator_color)\n    translate([0, 0, handle_length - 5])\n        cylinder(h=10, d1=handle_diameter, d2=head_width, $fn=32);\n}",
    "renders": true
  },
  {
    "tool": "cavity",
    "openscad_code": "// Cavity Tool (Dental Mirror / Explorer Hybrid)\n// Realistic style, medium complexity (~100 lines)\n\n// Overall dimensions\ntool_length = 85;\nhandle_diameter = 8;\nmirror_diameter = 18;\nprobe_length = 22;\n\n// Main handle with grip texture\nmodule handle() {\n    color(\"silver\")\n    difference() {\n        // Main handle cylinder\n        cylinder(h=tool_length*0.7, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [1:6]) {\n            translate([0, 0, i*10-5])\n                cylinder(h=2, d=handle_diameter+0.5, $fn=32);\n        }\n    }\n    \n    // Grip texture rings\n    color(\"gray\")\n    for(i = [1:12]) {\n        translate([0, 0, i*5])\n            difference() {\n                cylinder(h=1, d=handle_diameter-0.5, $fn=32);\n                cylinder(h=1.1, d=handle_diameter-2, $fn=32);\n            }\n    }\n}\n\n// Mirror head assembly\nmodule mirror_head() {\n    color(\"silver\")\n    union() {\n        // Mirror holder\n        translate([0, 0, -mirror_diameter/4])\n            cylinder(h=mirror_diameter/2, d=mirror_diameter, $fn=32);\n        \n        // Mirror surface (slightly recessed)\n        color(\"lightblue\")\n        translate([0, 0, -mirror_diameter/4+1])\n            cylinder(h=0.5, d=mirror_diameter-2, $fn=32);\n    }\n}\n\n// Explorer probe\nmodule explorer() {\n    color(\"silver\")\n    union() {\n        // Probe shaft\n        cylinder(h=probe_length, d1=3, d2=1, $fn=16);\n        \n        // Sharp explorer tip\n        translate([0, 0, probe_length])\n            cylinder(h=5, d1=1, d2=0.1, $fn=8);\n    }\n}\n\n// Neck connecting handle to tools\nmodule neck() {\n    color(\"silver\")\n    hull() {\n        // Handle end\n        translate([0, 0, 0])\n            sphere(d=handle_diameter, $fn=16);\n        \n        // Tool junction\n        translate([0, 12, 0])\n            sphere(d=5, $fn=16);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, tool_length*0.35])\n    rotate([90, 0, 0])\n    union() {\n        // Handle\n        handle();\n        \n        // Neck transition\n        translate([0, 0, tool_length*0.35])\n            neck();\n        \n        // Mirror head\n        translate([0, 12, 0])\n            rotate([0, 90, 0])\n            mirror_head();\n        \n        // Explorer probe\n        translate([0, 12, 0])\n            rotate([0, -30, 0])\n            translate([0, 0, mirror_diameter/2 + 2])\n            explorer();\n    }\n\n// Tool identification markings\ncolor(\"black\")\ntranslate([0, -handle_diameter/2-0.5, tool_length*0.2])\n    rotate([90, 0, 0])\n    linear_extrude(height=0.5)\n    text(\"CAVITY\", size=3, halign=\"center\");",
    "renders": true
  },
  {
    "tool": "etalon",
    "openscad_code": "// Etalon tool (precision thickness gauge) - Realistic style, medium complexity\n// Overall dimensions: ~80mm x 35mm x 20mm\n\n// Constants\nbase_w = 80;\nbase_h = 4;\nbase_d = 30;\nhandle_w = 15;\nhandle_h = 16;\nhandle_d = 15;\netalon_w = 2;\netalon_h = 12;\netalon_d = 25;\nslot_w = 3;\nslot_gap = 1.5;\ntext_depth = 0.5;\n\n// Main body module\nmodule etalon_body() {\n    color(\"silver\") union() {\n        // Base plate with rounded edges\n        translate([0, 0, base_h/2])\n            minkowski() {\n                cube([base_w, base_d, base_h], center=true);\n                sphere(1);\n            }\n        \n        // Handle block\n        translate([-base_w/2 + handle_w/2, 0, base_h + handle_h/2])\n            cube([handle_w, handle_d, handle_h], center=true);\n        \n        // Rounded handle top\n        translate([-base_w/2 + handle_w/2, 0, base_h + handle_h])\n            scale([1, 0.8, 0.5])\n                sphere(handle_w/2);\n    }\n}\n\n// Etalon blade module\nmodule etalon_blade(width, label) {\n    color(\"gold\") union() {\n        // Main blade\n        translate([base_w/2 - etalon_w/2 - width, 0, base_h + etalon_h/2])\n            cube([etalon_w, etalon_d, etalon_h], center=true);\n        \n        // Thickness label base\n        translate([base_w/2 - etalon_w - width - 8, 0, base_h + 2])\n            cube([8, 6, 4], center=true);\n        \n        // Engraved text\n        translate([base_w/2 - etalon_w - width - 8, 0, base_h + 4])\n            linear_extrude(height=text_depth)\n                text(str(width, \"mm\"), size=3, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Grip pattern on handle\nmodule handle_grip() {\n    color(\"gray\") for(i = [0:3]) {\n        translate([-base_w/2 + handle_w/2, -handle_d/2 + 2 + i*3.5, base_h + 3])\n            rotate([0, 90, 0])\n                cylinder(h=handle_w-2, r=0.5, center=true);\n    }\n}\n\n// Measuring slots\nmodule measuring_slots() {\n    color(\"silver\") difference() {\n        // Base with slots\n        cube([base_w, base_d, base_h], center=true);\n        \n        // Create slots\n        for(i = [0:5]) {\n            translate([base_w/2 - 20 - i*8, 0, -base_h/2])\n                cube([slot_w, etalon_d + 2, base_h + 0.1], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    etalon_body();\n    handle_grip();\n    measuring_slots();\n    \n    // Multiple etalon blades with different thicknesses\n    etalon_blade(1.00, \"1.0\");\n    etalon_blade(1.50, \"1.5\");\n    etalon_blade(2.00, \"2.0\");\n    etalon_blade(2.50, \"2.5\");\n    etalon_blade(3.00, \"3.0\");\n    etalon_blade(4.00, \"4.0\");\n    etalon_blade(5.00, \"5.0\");\n    etalon_blade(6.00, \"6.0\");\n    \n    // Protective edge guard\n    color(\"black\") translate([base_w/2 + 1, 0, base_h/2])\n        cube([2, etalon_d + 4, etalon_h + 2], center=true);\n}",
    "renders": true
  },
  {
    "tool": "gaugeblock",
    "openscad_code": "// Gauge Block Set - Realistic Style, Medium Complexity\n// 3D printable gauge block with common sizes and storage base\n\n// Overall dimensions (mm)\nblock_length = 50;\nblock_width = 20;\nblock_height = 8;\nbase_length = 120;\nbase_width = 70;\nbase_height = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\nhandle_radius = 6;\nhandle_length = 30;\n\n// Module for rounded corners\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, radius])\n    minkowski() {\n        cube([size[0]-2*radius, size[1]-2*radius, size[2]-2*radius]);\n        sphere(radius);\n    }\n}\n\n// Module for a single gauge block\nmodule gauge_block(height, engraved_text) {\n    difference() {\n        // Main block body\n        color(\"silver\")\n        rounded_cube([block_length, block_width, height], 2);\n        \n        // Identification slot on top\n        translate([block_length/2-5, block_width/2-2, height-1])\n        cube([10, 4, 1]);\n        \n        // Engraved text (simplified as grooves)\n        translate([block_length-12, 2, height/2-1])\n        cube([10, 16, 2]);\n    }\n    \n    // Engraved markings\n    translate([block_length-10, block_width/2, height/2-0.5])\n    color(\"gray\")\n    linear_extrude(0.5)\n    text(str(height, \"mm\"), size=3, font=\"Liberation Sans:style=Bold\");\n}\n\n// Module for storage base with compartments\nmodule storage_base() {\n    difference() {\n        // Base body\n        color(\"darkslategray\")\n        rounded_cube([base_length, base_width, base_height], 3);\n        \n        // Compartments for blocks\n        translate([5, 5, 3])\n        for(i=[0:3]) {\n            translate([i*(block_length+5), 0, 0])\n            cube([block_length+2, block_width+2, base_height-3]);\n        }\n        \n        translate([5, 30, 3])\n        for(i=[0:3]) {\n            translate([i*(block_length+5), 0, 0])\n            cube([block_length+2, block_width+2, base_height-3]);\n        }\n        \n        // Central handle hole\n        translate([base_length/2, base_width/2, 0])\n        cylinder(h=base_height+1, r=handle_radius, $fn=32);\n    }\n    \n    // Handle\n    translate([base_length/2, base_width/2, base_height])\n    color(\"dimgray\")\n    cylinder(h=handle_length, r=handle_radius-2, $fn=32);\n    \n    // Handle grip\n    translate([base_length/2, base_width/2, base_height+handle_length])\n    color(\"black\")\n    cylinder(h=8, r=handle_radius+1, $fn=32);\n}\n\n// Main assembly\nunion() {\n    // Storage base\n    storage_base();\n    \n    // Gauge blocks in compartments\n    translate([6, 6, base_height+1])\n    gauge_block(1.0, \"1.0\");\n    \n    translate([61, 6, base_height+1])\n    gauge_block(2.0, \"2.0\");\n    \n    translate([116, 6, base_height+1])\n    gauge_block(3.0, \"3.0\");\n    \n    translate([6, 31, base_height+1])\n    gauge_block(4.0, \"4.0\");\n    \n    translate([61, 31, base_height+1])\n    gauge_block(5.0, \"5.0\");\n    \n    translate([116, 31, base_height+1])\n    gauge_block(6.0, \"6.0\");\n    \n    // Additional precision blocks\n    translate([6, 56, base_height+1])\n    gauge_block(10.0, \"10.0\");\n    \n    translate([61, 56, base_height+1])\n    gauge_block(20.0, \"20.0\");\n}",
    "renders": true
  },
  {
    "tool": "slipgauge",
    "openscad_code": "// Slip-gauge block set (realistic, medium complexity)\n// Overall block dimensions: 35 x 9 x 1 mm base plate + handle\n\n// Main parameters\nblock_w = 35;\nblock_d = 9;\nblock_h = 1;\nhandle_l = 15;\nhandle_h = 6;\nhandle_d = 6;\nchamfer = 0.4;\ntext_depth = 0.2;\n\nmodule chamfer_box(w,d,h,r)\n{\n    difference()\n    {\n        cube([w,d,h]);\n        for(x=[-1,1], y=[-1,1])\n            translate([x>0?w-r:0, y>0?d-r:0, -1])\n                cylinder(r=r, h=h+2, $fn=16);\n    }\n}\n\nmodule block_body()\n{\n    difference()\n    {\n        // Main block with chamfers\n        chamfer_box(block_w, block_d, block_h, chamfer);\n\n        // Identification slot (center top)\n        translate([block_w*0.7, block_d/2, block_h-text_depth])\n            cube([block_w*0.25, block_d*0.4, text_depth+0.1]);\n    }\n}\n\nmodule handle()\n{\n    color(\"silver\")\n    union()\n    {\n        // Handle shaft\n        translate([-handle_l+0.5, block_d/2-handle_d/2, block_h])\n            rotate([0,90,0])\n                cylinder(h=handle_l, r=handle_d/2, $fn=32);\n\n        // Grip knurls\n        for(i=[0:3])\n            translate([-handle_l*0.8+i*3, block_d/2-handle_d/2, block_h+i*0.3])\n                rotate([0,90,0])\n                    cylinder(h=handle_d, r=handle_d/2+0.1, $fn=6);\n    }\n}\n\nmodule markings()\n{\n    color(\"black\")\n    linear_extrude(height=text_depth+0.05)\n    translate([block_w*0.1, block_d*0.3, 0])\n        text(\"5 mm\", size=2.5, font=\"Arial:style=Bold\");\n}\n\n// Assemble the slip-gauge\nunion()\n{\n    color([0.85,0.85,0.85])  // Steel color\n    block_body();\n\n    handle();\n\n    // Protective pads (bottom corners to avoid rocking)\n    for(x=[0,1])\n        translate([x*(block_w-2)+1, 1, -0.2])\n            cube([2, block_d-2, 0.2]);\n\n    // Markings on top face\n    translate([0,0,block_h])\n        markings();\n}",
    "renders": true
  },
  {
    "tool": "pin",
    "openscad_code": "// Realistic pin tool - OpenSCAD\n// Medium complexity with functional details\n\n// Pin tool dimensions (mm)\npin_length = 90;\npin_diameter = 8;\nhandle_length = 40;\nhandle_diameter = 15;\ngrip_length = 25;\npoint_length = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 1.5;\n\n// Module for knurled grip pattern\nmodule knurled_grip(length, diameter, segments=24) {\n    difference() {\n        // Main handle body\n        cylinder(h=length, d=diameter, $fn=segments);\n        \n        // Knurling cuts\n        for (i = [0:segments-1]) {\n            rotate([0, 0, i * 360/segments]) {\n                translate([diameter/2 - wall_thickness, -0.5, 0]) {\n                    cube([wall_thickness, 1, length], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Module for the pointed tip\nmodule pointed_tip(length, diameter) {\n    difference() {\n        union() {\n            // Tapered cone section\n            cylinder(h=length * 0.7, d1=diameter, d2=diameter/3, $fn=16);\n            \n            // Fine point\n            translate([0, 0, length * 0.7]) {\n                cylinder(h=length * 0.3, d1=diameter/3, d2=0.5, $fn=8);\n            }\n        }\n        \n        // Hollow core for printing\n        translate([0, 0, -1]) {\n            cylinder(h=length + 2, d=diameter - 2*wall_thickness, $fn=8);\n        }\n    }\n}\n\n// Main pin body\nmodule pin_body() {\n    difference() {\n        union() {\n            // Handle section\n            color(\"silver\") {\n                translate([0, 0, 0]) {\n                    knurled_grip(grip_length, handle_diameter);\n                }\n                \n                // Handle collar\n                translate([0, 0, grip_length]) {\n                    cylinder(h=3, d=handle_diameter + 2, $fn=32);\n                }\n                \n                // Transition to pin shaft\n                translate([0, 0, grip_length + 3]) {\n                    cylinder(h=handle_length - grip_length - 3, d=handle_diameter - 2, $fn=32);\n                }\n            }\n            \n            // Main pin shaft\n            color(\"silver\") {\n                translate([0, 0, handle_length]) {\n                    cylinder(h=pin_length - handle_length - point_length, d=pin_diameter, $fn=16);\n                }\n            }\n            \n            // Pointed tip\n            color(\"silver\") {\n                translate([0, 0, pin_length - point_length]) {\n                    pointed_tip(point_length, pin_diameter);\n                }\n            }\n        }\n        \n        // Center hole for weight reduction and printing\n        translate([0, 0, -1]) {\n            cylinder(h=handle_length + 1, d=handle_diameter - 2*wall_thickness, $fn=16);\n        }\n    }\n}\n\n// End cap detail\nmodule end_cap() {\n    color(\"silver\") {\n        translate([0, 0, -2]) {\n            difference() {\n                cylinder(h=2, d=handle_diameter, $fn=32);\n                cylinder(h=3, d=handle_diameter - 2*wall_thickness, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    pin_body();\n    end_cap();\n    \n    // Small alignment ring near tip\n    color(\"silver\") {\n        translate([0, 0, handle_length + (pin_length - handle_length - point_length) * 0.7]) {\n            cylinder(h=1, d=pin_diameter + 1, $fn=16);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "plug",
    "openscad_code": "// Plug Tool - Medium complexity realistic style\n// Features: insulated handle, metal prongs, strain relief, grip texture\n\n// Overall dimensions\nhandle_length = 80;\nhandle_diameter = 26;\nprong_length = 32;\nprong_diameter = 4.5;\nprong_spacing = 12;\nstrain_relief_length = 15;\n\n// Colors\ncolor_handle = \"DarkSlateGray\";\ncolor_prongs = \"Goldenrod\";\ncolor_strain = \"Black\";\n\n// Main handle with grip texture\nmodule handle() {\n    color(color_handle) {\n        // Main handle body\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n            // Wire channel\n            translate([0, 0, -1])\n                cylinder(h=handle_length + 2, d=6, $fn=16);\n            \n            // Prong holes\n            translate([prong_spacing/2, 0, handle_length - 15])\n                rotate([90, 0, 0])\n                    cylinder(h=20, d=prong_diameter + 1, $fn=16);\n            translate([-prong_spacing/2, 0, handle_length - 15])\n                rotate([90, 0, 0])\n                    cylinder(h=20, d=prong_diameter + 1, $fn=16);\n        }\n        \n        // Grip rings\n        for(i = [1:4:handle_length - 10]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=handle_diameter + 2, $fn=32);\n        }\n    }\n}\n\n// Metal prongs\nmodule prongs() {\n    color(color_prongs) {\n        // Right prong\n        translate([prong_spacing/2, 0, handle_length - 15])\n            rotate([90, 0, 0])\n                cylinder(h=prong_length, d=prong_diameter, $fn=16);\n        \n        // Left prong\n        translate([-prong_spacing/2, 0, handle_length - 15])\n            rotate([90, 0, 0])\n                cylinder(h=prong_length, d=prong_diameter, $fn=16);\n    }\n}\n\n// Strain relief at wire entry\nmodule strain_relief() {\n    color(color_strain) {\n        translate([0, 0, 0])\n            cylinder(h=strain_relief_length, d1=handle_diameter - 4, d2=10, $fn=32);\n        \n        // Flexible ridges\n        for(i = [1:3:strain_relief_length - 2]) {\n            translate([0, 0, i])\n                cylinder(h=1.5, d=handle_diameter - 4 - i/2, $fn=32);\n        }\n    }\n}\n\n// Assembly\nhandle();\nprongs();\nstrain_relief();",
    "renders": true
  },
  {
    "tool": "ring",
    "openscad_code": "// Ring Tool - OpenSCAD Code\n// A realistic ring mandrel with sizing grooves and measurement marks\n\n// Parameters\nmandrel_length = 80;\nbase_diameter = 25;\ntip_diameter = 16;\nhandle_length = 30;\nhandle_diameter = 20;\ngroove_depth = 0.5;\ngroove_width = 1.2;\nmarking_depth = 0.2;\nwall_thickness = 2;\n\n// Colors\ncolor_metal = [0.7, 0.7, 0.75];\ncolor_grip = [0.2, 0.2, 0.2];\ncolor_markings = [0.1, 0.1, 0.1];\n\n// Main module\nmodule ring_tool() {\n    union() {\n        // Handle\n        color(color_grip)\n        translate([0, 0, 0])\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Handle grip texture\n        color(color_grip)\n        for(i = [0:5:handle_length-5]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=5, d=handle_diameter, $fn=32);\n                cylinder(h=5, d=handle_diameter-4, $fn=32);\n            }\n        }\n        \n        // Mandrel shaft\n        color(color_metal)\n        translate([0, 0, handle_length])\n        cylinder(h=mandrel_length, d1=base_diameter, d2=tip_diameter, $fn=64);\n        \n        // Sizing grooves\n        color(color_metal)\n        for(size = [1:18]) {\n            pos = handle_length + (size-1) * (mandrel_length/18);\n            dia = base_diameter - (base_diameter-tip_diameter) * (size-1)/18;\n            translate([0, 0, pos])\n            difference() {\n                cylinder(h=groove_width, d=dia, $fn=64);\n                cylinder(h=groove_width+0.1, d=dia-2*groove_depth, $fn=64);\n            }\n        }\n        \n        // Size markings\n        color(color_markings)\n        for(size = [1:2:17]) {\n            pos = handle_length + (size-1) * (mandrel_length/18) + groove_width/2;\n            dia = base_diameter - (base_diameter-tip_diameter) * (size-1)/18;\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle])\n                translate([dia/2 - marking_depth, 0, pos])\n                cube([marking_depth*2, 1, groove_width], center=true);\n            }\n        }\n        \n        // Base collar\n        color(color_metal)\n        translate([0, 0, 0])\n        difference() {\n            cylinder(h=5, d=handle_diameter+6, $fn=32);\n            cylinder(h=5.1, d=handle_diameter, $fn=32);\n        }\n        \n        // Tip detail\n        color(color_metal)\n        translate([0, 0, handle_length+mandrel_length])\n        sphere(d=tip_diameter, $fn=32);\n    }\n}\n\n// Render the tool\nring_tool();",
    "renders": true
  },
  {
    "tool": "snap",
    "openscad_code": "// Snap Tool - Realistic Style, Medium Complexity\n// A 3D printable snap tool with realistic features\n\n// Color definitions\n$fn = 50;\n\nmodule snap_tool() {\n    // Main body - handle and snap mechanism\n    color(\"silver\")\n    union() {\n        // Handle grip\n        difference() {\n            cylinder(h=80, d1=25, d2=22);\n            // Grip texture\n            for(i=[0:5:75]) {\n                translate([0, 0, i])\n                cylinder(h=3, d1=23, d2=20);\n            }\n        }\n        \n        // Handle end cap\n        translate([0, 0, 80])\n        cylinder(h=5, d=26);\n        \n        // Snap head assembly\n        translate([0, 0, -15])\n        union() {\n            // Main snap head housing\n            cube([35, 15, 20], center=true);\n            \n            // Snap arms\n            for(side=[-1, 1]) {\n                translate([side * 17.5, 0, 0])\n                rotate([0, 0, side * 15])\n                cube([12, 3, 18], center=true);\n            }\n            \n            // Spring mechanism housing\n            translate([0, 0, -5])\n            cylinder(h=8, d=8);\n        }\n        \n        // Trigger mechanism\n        translate([0, -10, 30])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=15, d=12);\n            // Trigger slot\n            translate([0, -7.5, 0])\n            cube([2, 15, 8], center=true);\n        }\n    }\n    \n    // Snap mechanism details\n    color(\"darkgray\")\n    union() {\n        // Snap teeth\n        for(side=[-1, 1]) {\n            for(i=[0:2]) {\n                translate([side * (15 + i*2), 0, 5])\n                cube([2, 1, 3], center=true);\n            }\n        }\n        \n        // Spring coil representation\n        translate([0, 0, -9])\n        for(i=[0:5]) {\n            rotate([0, 0, i*30])\n            translate([3, 0, 0])\n            cylinder(h=1, d=2);\n        }\n        \n        // Pivot point\n        translate([0, 8, 0])\n        sphere(d=4);\n    }\n    \n    // Safety lock\n    color(\"red\")\n    translate([0, 0, 40])\n    rotate([90, 0, 0])\n    cylinder(h=8, d=6);\n    \n    // Measurement markings on handle\n    color(\"black\")\n    for(i=[1:4]) {\n        translate([12, 0, i*15])\n        cube([6, 0.5, 0.5], center=true);\n    }\n}\n\n// Assembly\nsnap_tool();\n\n// Print orientation helper (comment out for final print)\n%translate([0, 50, 0])\nrotate([90, 0, 0])\nsnap_tool();",
    "renders": true
  },
  {
    "tool": "feeler",
    "openscad_code": "// Feeler gauge set - 8 blades stored in a folding handle\n// Overall length when open: ~85 mm\n// Thickness range: 0.05 mm â€“ 0.50 mm\n\n$fn = 36;\n\n// Colors\nblade_color = [0.85, 0.85, 0.85];\nhandle_color = [0.25, 0.25, 0.25];\ngrip_color = [0.10, 0.10, 0.10];\nmark_color = [1, 1, 1];\n\n// Blade thicknesses in mm\nthicknesses = [0.05, 0.10, 0.15, 0.20, 0.25, 0.30, 0.40, 0.50];\n\nmodule blade(t, L = 60, W = 12) {\n    // Single feeler blade with rounded tip\n    linear_extrude(height = t, center = true, convexity = 4)\n    polygon(points = [\n        [-L/2+5, -W/2],\n        [ L/2-5, -W/2],\n        [ L/2, 0],\n        [ L/2-5,  W/2],\n        [-L/2+5,  W/2]\n    ]);\n}\n\nmodule blade_with_markings(t) {\n    color(blade_color)\n    blade(t);\n    \n    // Stamped thickness value\n    color(mark_color)\n    translate([15, -0.5, t/2+0.01])\n    linear_extrude(height = 0.2)\n    text(str(t), size = 3, halign = \"center\", valign = \"center\");\n}\n\nmodule handle_half() {\n    // One half of the folding handle\n    difference() {\n        // Main handle body\n        color(handle_color)\n        translate([-40, -6, -3])\n        cube([80, 12, 6]);\n        \n        // Groove for blades\n        translate([-38, -5, -2.5])\n        cube([76, 10, 4.5]);\n        \n        // Pivot hole\n        translate([0, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r = 2.2, center = true);\n        \n        // Thumb grip ridges\n        for (i = [-35:10:35])\n        translate([i, -6.1, -1])\n        cube([1.5, 0.2, 4]);\n    }\n}\n\nmodule grip_insert() {\n    // Rubber-like grip pad\n    color(grip_color)\n    translate([-30, -6.5, -2.5])\n    cube([60, 1, 5]);\n}\n\n// Assembly\n\n// Stack of blades\nunion() {\n    for (i = [0:len(thicknesses)-1]) {\n        translate([0, 0, i*0.6 - 2.4])\n        blade_with_markings(thicknesses[i]);\n    }\n    \n    // Pivot pin\n    color(handle_color)\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 14, r = 2, center = true);\n}\n\n// Handle halves\ntranslate([0, 20, 0])\ndifference() {\n    union() {\n        handle_half();\n        grip_insert();\n    }\n    // Clearance for blades\n    translate([-40, -7, -4])\n    cube([80, 14, 8.5]);\n}\n\nmirror([0, 1, 0])\ndifference() {\n    union() {\n        handle_half();\n        grip_insert();\n    }\n    // Clearance for blades\n    translate([-40, -7, -4])\n    cube([80, 14, 8.5]);\n}",
    "renders": true
  },
  {
    "tool": "thickness",
    "openscad_code": "// Digital Thickness Caliper - Realistic Medium Complexity\n// Overall length: 80mm, height: 20mm, thickness: 8mm\n\n$fn = 64;\n\nmodule caliper_body() {\n    // Main frame rail\n    color(\"silver\")\n    difference() {\n        cube([70, 8, 6], center = true);\n        translate([0, 0, 3.1])\n            cube([72, 6, 1], center = true);\n    }\n    \n    // Fixed jaw\n    color(\"silver\")\n    union() {\n        translate([-35, 0, 3])\n            cube([10, 8, 15]);\n        translate([-35, -4, 18])\n            cube([10, 8, 4]);\n    }\n    \n    // Thumb wheel support\n    color(\"silver\")\n    translate([15, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h = 6, r1 = 4, r2 = 4);\n}\n\nmodule sliding_jaw() {\n    // Sliding carriage\n    color(\"silver\")\n    union() {\n        translate([0, 0, 3])\n            cube([12, 8, 15]);\n        translate([0, -4, 18])\n            cube([12, 8, 4]);\n    }\n    \n    // Thumb wheel\n    color(\"darkgray\")\n    translate([15, 0, -5])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r1 = 6, r2 = 6);\n    \n    // Wheel knurling\n    for(i = [0:15]) {\n        rotate(i * 22.5)\n        translate([15, 0, -9])\n            cube([1, 0.5, 8], center = true);\n    }\n}\n\nmodule depth_rod() {\n    color(\"silver\")\n    translate([20, 0, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 30, r = 1.5);\n}\n\nmodule measurement_scale() {\n    // Imperial scale markings\n    color(\"black\")\n    for(i = [0:20]) {\n        translate([-30 + i * 3, 0, 3.5])\n            cube([0.2, 7, 0.1]);\n    }\n    \n    // Metric scale markings\n    for(i = [0:50]) {\n        translate([-30 + i * 1.2, -3.5, 3.5])\n            cube([0.1, 3.5, 0.1]);\n    }\n}\n\nmodule locking_screw() {\n    color(\"darkgray\")\n    translate([0, 0, 12])\n    cylinder(h = 8, r = 2);\n    \n    // Screw head\n    translate([0, 0, 16])\n    cylinder(h = 2, r = 4);\n    \n    // Knurled grip\n    for(i = [0:11]) {\n        rotate(i * 30)\n        translate([0, 3.5, 17])\n            cube([0.5, 1, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    caliper_body();\n    \n    translate([x, 0, 0]) sliding_jaw();\n    \n    depth_rod();\n    \n    measurement_scale();\n    \n    locking_screw();\n}\n\n// Adjustable sliding jaw position\nx = -10; // Adjust from -30 to 30 for demonstration",
    "renders": true
  },
  {
    "tool": "feller",
    "openscad_code": "// Feller tool (tree felling axe) - medium complexity, realistic style\n// Overall length ~130mm, printable without supports\n\n// Main parameters\nhandle_length = 120;\nhandle_diameter = 24;\nhead_length = 85;\nhead_height = 30;\nhead_thickness = 10;\nblade_curve = 40;\n\n// Colors\n$fn = 32;\n\nmodule feller_axe() {\n    color(\"brown\") handle();\n    color(\"gray\") axe_head();\n    color(\"darkgray\") blade_edge();\n}\n\nmodule handle() {\n    // Main handle shaft\n    difference() {\n        cylinder(h = handle_length, d = handle_diameter, center = false);\n        // Grip texture - subtle grooves\n        for(i = [5:15:handle_length-20]) {\n            translate([0, 0, i])\n                rotate([0, 0, 0])\n                cylinder(h = 2, d = handle_diameter + 1, center = true);\n        }\n    }\n    \n    // Handle end knob\n    translate([0, 0, handle_length - 10]) {\n        sphere(d = handle_diameter + 10);\n    }\n    \n    // Handle start flare\n    translate([0, 0, 0]) {\n        cylinder(h = 10, d1 = handle_diameter + 8, d2 = handle_diameter, center = false);\n    }\n}\n\nmodule axe_head() {\n    translate([0, 0, handle_length - 35]) {\n        rotate([0, 90, 0]) {\n            // Main head body\n            difference() {\n                // Head shape\n                hull() {\n                    translate([-head_length/2, -head_height/2, -head_thickness/2])\n                        cube([head_length, head_height, head_thickness]);\n                    translate([head_length/2 - 10, -head_height/4, -head_thickness/2])\n                        cube([20, head_height/2, head_thickness]);\n                }\n                \n                // Handle slot\n                rotate([0, 0, 0])\n                    cylinder(h = head_thickness + 2, d = handle_diameter - 2, center = true);\n            }\n            \n            // Poll (back of axe)\n            translate([-head_length/2, 0, 0]) {\n                sphere(d = head_height * 0.8);\n            }\n        }\n    }\n}\n\nmodule blade_edge() {\n    translate([0, 0, handle_length - 35]) {\n        rotate([0, 90, 0]) {\n            translate([head_length/2 - 15, 0, 0]) {\n                // Curved blade edge\n                difference() {\n                    hull() {\n                        // Blade body\n                        translate([0, 0, -head_thickness/2])\n                            cube([30, head_height * 0.8, head_thickness]);\n                        // Curved tip\n                        translate([25, 0, -head_thickness/2])\n                            cylinder(h = head_thickness, r = head_height * 0.4, center = true);\n                    }\n                    \n                    // Bevel the edge\n                    rotate([0, 15, 0])\n                        translate([-5, 0, -head_thickness/2 - 2])\n                            cube([35, head_height * 1.2, head_thickness + 4]);\n                }\n                \n                // Secondary bevel for sharp edge\n                translate([26, 0, -head_thickness/2 - 1])\n                    cube([5, head_height * 0.2, head_thickness + 2]);\n            }\n        }\n    }\n}\n\n// Assemble the axe\nfeller_axe();",
    "renders": true
  },
  {
    "tool": "dial",
    "openscad_code": "// Dial Tool - Realistic Style, Medium Complexity\n// Features: knurled grip, calibrated scale, rotating bezel, pointer indicator\n\n$fn = 50;\n\n// Main dimensions\nbase_diameter = 80;\nbase_height = 12;\nbezel_diameter = 78;\nbezel_height = 8;\ngrip_diameter = 30;\ngrip_height = 25;\npointer_length = 35;\npointer_width = 3;\n\n// Colors\nbase_color = [0.2, 0.2, 0.2]; // dark grey\nbezel_color = [0.8, 0.8, 0.8]; // light grey\ngrip_color = [0.1, 0.1, 0.1]; // black\npointer_color = [1, 0, 0]; // red\nmarking_color = [1, 1, 1]; // white\n\n// Base cylinder with hollow center\nmodule base() {\n    color(base_color)\n    difference() {\n        cylinder(h = base_height, d = base_diameter);\n        translate([0, 0, -0.1])\n            cylinder(h = base_height + 0.2, d = base_diameter - 6);\n    }\n}\n\n// Bezel with calibration marks\nmodule bezel() {\n    color(bezel_color)\n    union() {\n        // Main bezel ring\n        difference() {\n            cylinder(h = bezel_height, d = bezel_diameter);\n            translate([0, 0, -0.1])\n                cylinder(h = bezel_height + 0.2, d = bezel_diameter - 4);\n        }\n        \n        // Calibration marks (every 10 degrees)\n        for(i = [0:9:359]) {\n            rotate([0, 0, i])\n                translate([bezel_diameter/2 - 2, 0, bezel_height/2])\n                    cube([4, 1, bezel_height], center = true);\n        }\n        \n        // Numbers every 30 degrees\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n                translate([bezel_diameter/2 - 6, 0, 0]) {\n                    // Raised number indicators\n                    rotate([90, 0, 90])\n                        linear_extrude(height = 1)\n                            text(str(i/30), size = 3, valign = \"center\", halign = \"center\");\n                }\n        }\n    }\n}\n\n// Knurled grip handle\nmodule grip() {\n    color(grip_color)\n    union() {\n        // Main grip cylinder\n        cylinder(h = grip_height, d = grip_diameter);\n        \n        // Knurling pattern\n        for(i = [0:15:359]) {\n            rotate([0, 0, i])\n                for(j = [0:2:grip_height-2]) {\n                    translate([0, 0, j])\n                        cube([grip_diameter, 2, 1], center = true);\n                }\n        }\n    }\n}\n\n// Pointer indicator\nmodule pointer() {\n    color(pointer_color)\n    union() {\n        // Main pointer arm\n        translate([pointer_length/2 - 5, 0, 0])\n            cube([pointer_length, pointer_width, 2], center = true);\n        \n        // Pointer tip\n        translate([pointer_length - 2, 0, 0])\n            cylinder(h = 2, r = pointer_width/2);\n        \n        // Counterweight\n        translate([-pointer_length/2 + 5, 0, 0])\n            cube([10, pointer_width*2, 2], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    base();\n\ntranslate([0, 0, base_height])\n    rotate([0, 0, $t*360])  // Animate rotation\n    bezel();\n\ntranslate([0, 0, base_height + bezel_height])\n    grip();\n\ntranslate([0, 0, base_height + bezel_height + grip_height/2])\n    rotate([90, 0, 0])\n    pointer();",
    "renders": true
  },
  {
    "tool": "vernier",
    "openscad_code": "// Vernier Caliper - Medium complexity realistic model\n// Overall dimensions: 150mm length, 50mm height, 12mm thickness\n\n// Main body color (silver)\ncolor(\"silver\") {\n\n// Fixed jaw main body\ndifference() {\n    // Main beam\n    cube([120, 12, 8], center=false);\n    \n    // Vernier scale window\n    translate([90, 0, 7.9])\n        cube([30, 12, 0.2], center=false);\n}\n\n// Fixed measuring jaw\ntranslate([0, 12, 0])\n    cube([20, 15, 8], center=false);\n\n// Depth probe\ntranslate([0, 0, 8])\n    cube([5, 12, 10], center=false);\n}\n\n// Vernier slider\ncolor(\"lightgray\") {\ndifference() {\n    // Main slider body\n    translate([20, 0, 0])\n        cube([100, 12, 8], center=false);\n    \n    // Thumb wheel hole\n    translate([85, 6, 4])\n        rotate([90, 0, 0])\n            cylinder(h=12, d=8, $fn=20);\n    \n    // Lock screw hole\n    translate([60, 6, 4])\n        rotate([90, 0, 0])\n            cylinder(h=12, d=4, $fn=20);\n}}\n\n// Movable jaw\ncolor(\"silver\") {\ndifference() {\n    // Movable jaw body\n    translate([20, 12, 0])\n        cube([20, 15, 8], center=false);\n    \n    // Jaw relief\n    translate([25, 12, 1])\n        cube([10, 8, 6], center=false);\n}}\n\n// Thumb wheel\ncolor(\"darkgray\") {\ntranslate([85, 6, 4])\n    rotate([90, 0, 0])\n        cylinder(h=12, d=12, $fn=20);\n}\n\n// Lock screw\ncolor(\"black\") {\ntranslate([60, 6, 4])\n    rotate([90, 0, 0])\n        cylinder(h=12, d=6, $fn=20);\n}\n\n// Main scale markings (metric - 1mm divisions)\nmodule main_scale_marks() {\n    for(i = [0:119]) {\n        translate([i, 0, 7.9])\n            cube([0.1, i % 10 == 0 ? 6 : 3, 0.1], center=false);\n    }\n}\n\n// Vernier scale markings\nmodule vernier_scale_marks() {\n    for(i = [0:49]) {\n        translate([90 + i * 0.5, 0, 7.9])\n            cube([0.1, i % 5 == 0 ? 4 : 2, 0.1], center=false);\n    }\n}\n\n// Scale numbers (simplified)\nmodule scale_numbers() {\n    for(i = [0:11]) {\n        translate([i * 10 + 2, 2, 7.9])\n            cube([2, 1, 0.1], center=false);\n    }\n}\n\n// Apply markings\ncolor(\"black\") {\nmain_scale_marks();\nvernier_scale_marks();\nscale_numbers();\n}\n\n// Grip textures on slider\nmodule grip_texture() {\n    for(i = [0:4]) {\n        translate([75 + i * 2, 0, 8.1])\n            cylinder(h=0.5, d=10, $fn=20);\n    }\n}\n\ncolor(\"darkgray\") {\ngrip_texture();\n}\n\n// Jaw measuring surfaces\ncolor(\"silver\") {\ntranslate([0, 27, 0])\n    cube([0.5, 0.5, 8], center=false);\ntranslate([20, 27, 0])\n    cube([0.5, 0.5, 8], center=false);\n}",
    "renders": true
  },
  {
    "tool": "height",
    "openscad_code": "// Height Gauge Tool - Realistic Style\n// Digital height gauge with sliding arm and digital display\n\n// Main parameters\n$fn = 32;\nbase_width = 60;\nbase_depth = 40;\nbase_height = 10;\ncolumn_width = 12;\ncolumn_height = 80;\nslider_thickness = 8;\nslider_width = 40;\nmeasure_arm_length = 50;\nmeasure_arm_thickness = 3;\n\n// Colors\ncolor_base = [0.3, 0.3, 0.3];\ncolor_column = [0.7, 0.7, 0.7];\ncolor_slider = [0.2, 0.2, 0.2];\ncolor_display = [0.1, 0.1, 0.1];\ncolor_metal = [0.8, 0.8, 0.8];\n\n// Base with measurement markings\nmodule base() {\n    color(color_base)\n    union() {\n        // Main base block\n        cube([base_width, base_depth, base_height]);\n        \n        // Front measurement scale\n        for(i = [0:5:base_width-5]) {\n            translate([i, base_depth-2, base_height-0.1])\n            cube([0.5, 2, 0.2]);\n        }\n        \n        // Base foot pads\n        translate([5, 5, -1])\n        cylinder(h=2, r=3);\n        translate([base_width-5, 5, -1])\n        cylinder(h=2, r=3);\n        translate([5, base_depth-5, -1])\n        cylinder(h=2, r=3);\n        translate([base_width-5, base_depth-5, -1])\n        cylinder(h=2, r=3);\n    }\n}\n\n// Vertical column with scale markings\nmodule column() {\n    color(color_column)\n    union() {\n        // Main column\n        translate([(base_width-column_width)/2, (base_depth-column_width)/2, base_height])\n        cube([column_width, column_width, column_height]);\n        \n        // Measurement scale grooves\n        for(i = [5:5:column_height-5]) {\n            translate([(base_width-column_width)/2, (base_depth-column_width)/2-0.1, base_height+i])\n            cube([column_width, 0.2, 0.5]);\n            translate([(base_width-column_width)/2-0.1, (base_depth-column_width)/2, base_height+i])\n            cube([0.2, column_width, 0.5]);\n        }\n    }\n}\n\n// Sliding measurement arm assembly\nmodule slider() {\n    color(color_slider)\n    union() {\n        // Main slider body\n        translate([(base_width-slider_width)/2, (base_depth-slider_thickness)/2, base_height+30])\n        cube([slider_width, slider_thickness, slider_width/2]);\n        \n        // Digital display housing\n        translate([(base_width-slider_width)/2+5, (base_depth-slider_thickness)/2-2, base_height+30+slider_width/2])\n        cube([slider_width-10, 4, 8]);\n        \n        // Display screen\n        color(color_display)\n        translate([(base_width-slider_width)/2+6, (base_depth-slider_thickness)/2-1.9, base_height+30+slider_width/2+1])\n        cube([slider_width-12, 3.8, 6]);\n        \n        // Slider clamp mechanism\n        translate([(base_width-column_width)/2-2, (base_depth-4)/2, base_height+30])\n        cube([column_width+4, 4, 8]);\n        \n        // Thumb wheel for adjustment\n        color(color_metal)\n        translate([(base_width-column_width)/2-3, (base_depth-4)/2-1, base_height+34])\n        rotate([90, 0, 0])\n        cylinder(h=6, r=3, $fn=12);\n    }\n}\n\n// Measurement arm with scribe point\nmodule measurement_arm() {\n    color(color_metal)\n    union() {\n        // Main measurement arm\n        translate([(base_width-slider_width)/2, (base_depth-slider_thickness)/2, base_height+30])\n        rotate([0, 90, 0])\n        cube([measure_arm_length, measure_arm_thickness, slider_thickness]);\n        \n        // Fine adjustment wheel\n        translate([(base_width-slider_width)/2+measure_arm_length-5, (base_depth-slider_thickness)/2, base_height+30])\n        rotate([0, 0, 90])\n        cylinder(h=4, r=2, $fn=12);\n        \n        // Scribe point\n        translate([(base_width-slider_width)/2+measure_arm_length, (base_depth-slider_thickness)/2, base_height+30-measure_arm_thickness/2])\n        rotate([0, 0, 90])\n        cylinder(h=8, r1=measure_arm_thickness/2, r2=0.5);\n    }\n}\n\n// Assembly\nbase();\ncolumn();\nslider();\nmeasurement_arm();",
    "renders": true
  },
  {
    "tool": "depth",
    "openscad_code": "// Digital Depth Gauge / Height Gauge\n// Realistic appearance, medium complexity\n// Overall printable size â‰ˆ 80 mm tall\n\n$fa=1; $fs=0.5;\n\n// Colors\ncolor_base   = [0.15,0.15,0.15];   // anodised aluminium\ncolor_rule   = [0.9,0.9,0.9];    // stainless steel\ncolor_grip   = [0.05,0.05,0.05]; // rubber\ncolor_lcd    = [0.1,0.1,0.2];    // lcd bezel\ncolor_screen = [0,0.8,0.8,0.7];  // lcd digits\n\n// Main assembly\nmodule depth_gauge() {\n    difference() {\n        union() {\n            base_block();\n            ruler_rod();\n            slider_assembly();\n        }\n        // LCD window\n        translate([0, 14.5, 35]) cube([28, 9, 2], center=true);\n    }\n}\n\n// Anodised aluminium base plate with reference foot\nmodule base_block() {\n    color(color_base)\n    difference() {\n        union() {\n            // Foot\n            translate([0,-12.5,0])\n                cube([25, 25, 8], center=true);\n            // Body\n            translate([0,0,4])\n                cube([25, 50, 8], center=true);\n            // Rounded top corners\n            translate([0,0,8])\n                cylinder(h=2, d=25, center=true);\n        }\n        // Screw holes\n        for(x=[-8,8])\n            translate([x,0,4])\n                cylinder(h=10, d=3.2, center=true);\n    }\n}\n\n// Precision stainless steel rod\nmodule ruler_rod() {\n    color(color_rule) {\n        // Rod shaft\n        translate([0,0,25])\n            cylinder(h=55, d=6, center=true);\n        // Reference ridge\n        translate([0,0,52])\n            cube([0.5, 6, 1], center=true);\n    }\n}\n\n// Movable slider with digital readout\nmodule slider_assembly() {\n    color(color_base) {\n        translate([0,0,27])\n            difference() {\n                // Main slider body\n                cube([32, 16, 28], center=true);\n                // Rod channel\n                translate([0,0,10])\n                    cylinder(h=32, d=7, center=true);\n            }\n    }\n    // Rubber grip pads\n    color(color_grip)\n    for(side=[-1,1])\n        translate([side*15.3,0,27])\n            cube([0.8, 14, 26], center=true);\n\n    // LCD housing\n    color(color_lcd) {\n        translate([0,0,38])\n            cube([30, 12, 6], center=true);\n    }\n\n    // LCD screen digits\n    color(color_screen)\n    translate([0,14.5,36])\n        for(digit=[-1,0,1])\n            translate([digit*8,0,0])\n                cube([4, 6, 0.5], center=true);\n}\n\ndepth_gauge();",
    "renders": true
  },
  {
    "tool": "bore",
    "openscad_code": "// Bore tool - Realistic style, medium complexity\n// 3D printable bore gauge tool for measuring hole diameters\n\n// Main parameters\n$fn = 32;\nhandle_length = 80;\nhandle_diameter = 12;\nshaft_length = 40;\nshaft_diameter = 8;\nhead_length = 25;\nhead_diameter = 16;\nmeasurement_range = 10;\n\n// Main module\nmodule bore_tool() {\n    color(\"silver\") {\n        // Handle assembly\n        handle();\n        \n        // Shaft\n        shaft();\n        \n        // Measuring head with contact points\n        measuring_head();\n        \n        // Calibration markings\n        markings();\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    // Main handle body\n    cylinder(h=handle_length, d=handle_diameter, center=false);\n    \n    // Grip rings\n    for(i = [5:10:handle_length-15]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h=3, d=handle_diameter+1, center=false);\n                cylinder(h=3.5, d=handle_diameter-2, center=false);\n            }\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length]) {\n        sphere(d=handle_diameter);\n    }\n}\n\n// Shaft section\nmodule shaft() {\n    translate([0, 0, handle_length]) {\n        cylinder(h=shaft_length, d=shaft_diameter, center=false);\n    }\n}\n\n// Measuring head with adjustable contacts\nmodule measuring_head() {\n    translate([0, 0, handle_length+shaft_length]) {\n        union() {\n            // Head body\n            cylinder(h=head_length, d=head_diameter, center=false);\n            \n            // Contact rods (3-point measurement)\n            for(i = [0:120:240]) {\n                rotate([0, 0, i]) {\n                    translate([head_diameter/2 + 2, 0, head_length/2]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=measurement_range+5, d=2, center=false);\n                        }\n                    }\n                }\n            }\n            \n            // Protective collar\n            translate([0, 0, -2]) {\n                cylinder(h=3, d=head_diameter+4, center=false);\n            }\n        }\n    }\n}\n\n// Calibration markings on shaft\nmodule markings() {\n    color(\"black\") {\n        for(i = [0:5:shaft_length-5]) {\n            translate([shaft_diameter/2 + 1, 0, handle_length + i]) {\n                rotate([0, 90, 0]) {\n                    cube([0.5, 5, 0.3], center=true);\n                }\n            }\n        }\n        \n        // Main measurement scale\n        for(i = [0:2:measurement_range]) {\n            translate([0, 0, handle_length+shaft_length+head_length+i+2]) {\n                rotate([90, 0, 0]) {\n                    color(\"red\") cylinder(h=0.5, d=15, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nbore_tool();",
    "renders": true
  },
  {
    "tool": "inside",
    "openscad_code": "// OpenSCAD Inside Caliper (Vernier Caliper - Inside Jaws)\n// Medium complexity realistic style\n// Measures internal diameters and grooves\n// Designed for 3D printing - no overhangs\n\n// Color definitions\n$fn = 64;\n\n// Main module\nmodule inside_caliper() {\n    // Main beam\n    color(\"silver\")\n    difference() {\n        union() {\n            // Beam body\n            translate([-5, -3, 0])\n                cube([120, 6, 8]);\n            \n            // Measurement scale (raised ridges)\n            for(i = [0:19]) {\n                translate([10 + i*5, 3.1, 0.5])\n                    cube([0.2, 0.5, 7]);\n            }\n        }\n        \n        // Vernier scale window\n        translate([85, -0.5, 1])\n            cube([15, 6.5, 6]);\n    }\n    \n    // Fixed jaw (left side)\n    color(\"silver\")\n    union() {\n        // Main jaw body\n        translate([-15, -8, 0])\n            cube([10, 16, 8]);\n        \n        // Inside measuring surface\n        translate([-15, -8, 0])\n            cube([2, 16, 8]);\n        \n        // Reinforcement\n        translate([-15, -8, 8])\n            cube([10, 16, 2]);\n    }\n    \n    // Sliding jaw assembly\n    module sliding_jaw(pos) {\n        color(\"silver\")\n        union() {\n            // Slider body\n            translate([pos-3, -8, 0])\n                cube([6, 16, 8]);\n            \n            // Inside measuring surface\n            translate([pos+3, -8, 0])\n                cube([2, 16, 8]);\n            \n            // Thumb wheel support\n            translate([pos-2, 8, 4])\n                cube([4, 4, 4]);\n            \n            // Thumb wheel\n            color(\"black\")\n            rotate([90, 0, 0])\n                translate([pos, 12, 4])\n                    cylinder(h=2, r=4);\n            \n            // Vernier scale\n            color(\"black\")\n            translate([pos+3.5, 0.5, 1])\n                cube([10, 0.2, 6]);\n            \n            // Vernier marks\n            for(i = [0:9]) {\n                translate([pos+4 + i*1, 0.5, 2.5])\n                    cube([0.1, 0.2, 3]);\n            }\n            \n            // Locking screw\n            color(\"gray\")\n            translate([pos-1, 0, 9])\n                cylinder(h=3, r=1.5);\n            \n            // Locking lever\n            translate([pos-1, -2, 12])\n                rotate([90, 0, 0])\n                    cylinder(h=5, r=0.8);\n        }\n    }\n    \n    // Depth rod (stored position)\n    color(\"silver\")\n    translate([110, 0, 4])\n        rotate([0, 90, 0])\n            cylinder(h=50, r=1);\n    \n    // Depth rod holder\n    translate([108, -2, 2])\n        cube([4, 4, 4]);\n    \n    // Generate sliding jaw at position 50\n    sliding_jaw(50);\n    \n    // Grip texture on beam\n    color(\"black\")\n    difference() {\n        translate([20, -4, -0.5])\n            cube([60, 8, 1]);\n        \n        for(i = [0:5]) {\n            translate([25 + i*10, -3.5, -0.4])\n                cube([8, 7, 0.8]);\n        }\n    }\n}\n\n// Center the model\ntranslate([-20, 0, 0])\n    inside_caliper();",
    "renders": true
  },
  {
    "tool": "outside",
    "openscad_code": "// Garden Trowel - Medium Complexity Realistic Style\n// Includes handle grip, blade curvature, and hanging hole\n\n// Overall dimensions\nhandle_length = 80;\nhandle_diameter = 22;\nblade_length = 60;\nblade_width = 45;\nblade_thickness = 2.5;\n\n// Handle grip module\nmodule handle_grip() {\n    difference() {\n        // Main handle cylinder\n        color(\"darkgreen\")\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings (recessed)\n        for(i = [10:15:handle_length-20]) {\n            translate([0, 0, i])\n            cylinder(h=3, d=handle_diameter+2, $fn=32);\n        }\n        \n        // Hanging hole\n        translate([0, handle_diameter/2 + 5, handle_length - 15])\n        rotate([90, 0, 0])\n        cylinder(h=handle_diameter+2, d=6, $fn=20);\n    }\n}\n\n// Blade module with realistic scoop shape\nmodule blade() {\n    difference() {\n        union() {\n            // Main blade body - tapered cylinder segment\n            translate([0, 0, handle_length])\n            rotate([90, 0, 0])\n            linear_extrude(height=blade_length, scale=[1, 0.3])\n            difference() {\n                circle(d=blade_width, $fn=50);\n                translate([0, -blade_width/2, 0])\n                square([blade_width, blade_width/2]);\n            }\n            \n            // Blade thickness\n            translate([0, 0, handle_length])\n            rotate([90, 0, 0])\n            linear_extrude(height=blade_length, scale=[1, 0.3])\n            offset(r=-blade_thickness)\n            difference() {\n                circle(d=blade_width, $fn=50);\n                translate([0, -blade_width/2, 0])\n                square([blade_width, blade_width/2]);\n            }\n            \n            // Reinforcement ridge\n            translate([0, 0, handle_length + blade_length/2])\n            rotate([90, 0, 0])\n            cube([blade_length, blade_thickness*3, blade_width/10], center=true);\n        }\n        \n        // Cut scoop cavity\n        translate([0, 0, handle_length + blade_length/2])\n        rotate([90, 0, 0])\n        linear_extrude(height=blade_length*1.1, scale=[1.2, 0.5], center=true)\n        circle(d=blade_width*0.9, $fn=40);\n    }\n}\n\n// Handle to blade transition\nmodule transition() {\n    color(\"darkgreen\")\n    translate([0, 0, handle_length - 5])\n    hull() {\n        cylinder(h=10, d1=handle_diameter, d2=blade_width*0.4, $fn=32);\n        translate([0, 0, 10])\n        cylinder(h=5, d=blade_width*0.4, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    handle_grip();\n    transition();\n    color(\"silver\")\n    blade();\n}",
    "renders": true
  },
  {
    "tool": "telescoping",
    "openscad_code": "// Telescoping Utility Knife\n// Medium complexity realistic design\n\n$fn = 32;\n\n// Main dimensions\nknife_length = 85;\nhandle_dia = 22;\nblade_width = 18;\nblade_thickness = 1.2;\ntelescope_length = 35;\n\n// Colors\nhandle_color = [0.15, 0.15, 0.15]; // Dark gray\nblade_color = [0.7, 0.7, 0.7];   // Silver\ngrip_color = [0.05, 0.05, 0.05]; // Black\naccent_color = [0.8, 0.1, 0.1];  // Red\n\nmodule grip_texture() {\n    difference() {\n        scale([1, 1, 1]) sphere(d = handle_dia);\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45]) \n                translate([-handle_dia/2 - 1, -2, -handle_dia/2])\n                    cube([handle_dia + 2, 4, handle_dia]);\n        }\n    }\n}\n\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        difference() {\n            cylinder(h = knife_length - telescope_length, d = handle_dia);\n            // Internal cavity for telescoping\n            translate([0, 0, -1])\n                cylinder(h = knife_length - telescope_length + 2, d = handle_dia - 4);\n        }\n        \n        // Grip pattern\n        color(grip_color) {\n            translate([0, 0, 5]) grip_texture();\n            translate([0, 0, 15]) grip_texture();\n            translate([0, 0, 25]) grip_texture();\n        }\n        \n        // Thumb slider slot\n        translate([0, handle_dia/2 - 2, knife_length - telescope_length - 15])\n            cube([handle_dia - 8, 4, 15], center = true);\n    }\n}\n\nmodule telescoping_section() {\n    color(handle_color) {\n        difference() {\n            cylinder(h = telescope_length, d = handle_dia - 4.5);\n            // Internal cavity\n            translate([0, 0, -1])\n                cylinder(h = telescope_length + 2, d = handle_dia - 8);\n        }\n        \n        // Thumb slider\n        color(accent_color) {\n            translate([0, handle_dia/2 - 4.5, 8])\n                cube([10, 3, 8], center = true);\n        }\n    }\n}\n\nmodule blade() {\n    color(blade_color) {\n        // Main blade body\n        translate([0, 0, telescope_length]) {\n            difference() {\n                cube([blade_width, blade_thickness, 35], center = true);\n                // Tapered tip\n                translate([0, 0, 17.5])\n                    rotate([0, 90, 0])\n                        cylinder(h = blade_width, r1 = 0, r2 = blade_width/2);\n            }\n            \n            // Blade edge\n            translate([0, blade_thickness/2 + 0.1, 0])\n                cube([blade_width - 2, 0.2, 30], center = true);\n            \n            // Score lines for breaking\n            for (z = [5:7:30]) {\n                translate([0, 0, z])\n                    cube([blade_width - 2, blade_thickness + 0.2, 0.5], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nhandle();\n\ntranslate([0, 0, knife_length - telescope_length]) {\n    telescoping_section();\n    blade();\n}",
    "renders": true
  },
  {
    "tool": "divider",
    "openscad_code": "// Realistic 3D-printable Divider Tool\n// Overall dimensions: ~85 mm long, ~25 mm wide\n\n// Parameters\n$fn=50;\nblade_len=40;\nblade_thick=2;\nblade_width=15;\nhandle_len=35;\nhandle_dia=12;\npivot_dia=5;\npivot_h=20;\ngap=0.2;\n\n// Colors\ncolor_steel=[0.6,0.6,0.6];\ncolor_handle=[0.15,0.15,0.15];\n\nmodule blade() {\n    difference() {\n        // Main blade\n        color(color_steel)\n        linear_extrude(height=blade_thick) {\n            polygon(points=[\n                [0,0],\n                [blade_len,0],\n                [blade_len-15, blade_width/2],\n                [0, blade_width/2-2]\n            ]);\n        }\n        // Tip bevel\n        translate([blade_len-8, blade_width/2-4, 0])\n        rotate([0,45,0])\n        cube([10, 10, blade_thick+0.1], center=true);\n        \n        // Blade edge chamfer\n        translate([blade_len/2,0,blade_thick-0.5])\n        cube([blade_len+0.2, 0.5, 1], center=true);\n    }\n}\n\nmodule handle() {\n    difference() {\n        // Octagonal grip\n        color(color_handle)\n        cylinder(h=handle_len, d=handle_dia, $fn=8);\n        \n        // Grip rings\n        for(i=[1:4]) {\n            translate([0,0,i*handle_len/5])\n            cylinder(h=2.5, d=handle_dia-2, $fn=8);\n        }\n    }\n}\n\nmodule pivot_pin() {\n    // Pivot cylinder\n    cylinder(h=pivot_h, d=pivot_dia, center=true);\n    \n    // Washer\n    translate([0,0,pivot_h/2+1])\n    cylinder(h=1.5, d=pivot_dia+3, center=true);\n}\n\nmodule divider_arm() {\n    union() {\n        // Handle\n        translate([-handle_len-5, 0, 0])\n        rotate([0,90,0])\n        handle();\n        \n        // Blade\n        translate([0, 0, -blade_width/2])\n        blade();\n        \n        // Pivot hole\n        translate([0,0,0])\n        rotate([90,0,0])\n        cylinder(h=20, d=pivot_dia+gap, center=true);\n    }\n}\n\nmodule spring() {\n    // Simple spring representation\n    color([0.7,0.7,0.7])\n    for(i=[-2:2]) {\n        translate([0, i*2.5, 0])\n        rotate([0,90,0])\n        cylinder(h=8, d=1.5, center=true);\n    }\n}\n\n// Main assembly\ntranslate([0, -10, 0])\nunion() {\n    // First arm\n    divider_arm();\n    \n    // Second arm (mirrored)\n    mirror([0,1,0])\n    divider_arm();\n    \n    // Pivot pin\n    translate([0,0,0])\n    rotate([90,0,0])\n    pivot_pin();\n    \n    // Spring between arms\n    translate([0,0,10])\n    spring();\n}",
    "renders": true
  },
  {
    "tool": "pruner",
    "openscad_code": "// ------------------------------\n// OpenSCAD : 3D-printable Hand Pruner\n// Medium-complexity, realistic style\n// ------------------------------\n\n// Overall scale factor â€“ makes the pruner â‰ˆ 90 mm long\nscale_factor = 1.0;\n\n// Wall thickness for FDM printing\nwall = 1.2;\n\n// ---- Colors ----\ncolor_handle = \"DarkOliveGreen\";\ncolor_blade = \"Silver\";\ncolor_screw = \"DimGray\";\ncolor_spring = \"GoldenRod\";\n\n// ---- Modules ----\n\n// Grip pattern for handles\nmodule grip_pattern(len = 40, dia = 12) {\n    n = 12;\n    for (i = [0 : n-1])\n        rotate([0, 0, i * 360 / n])\n            translate([dia / 2 - 0.5, 0, 0])\n                cube([1, 1, len], center = true);\n}\n\n// Main handle body\nmodule handle_body(len = 60, dia = 12) {\n    difference() {\n        // Outer shell with slight taper\n        cylinder(h = len, d1 = dia, d2 = dia * 0.9, $fn = 36);\n        // Hollow core\n        translate([0, 0, -1])\n            cylinder(h = len + 2, d = dia - 2 * wall, $fn = 36);\n    }\n    // Grip ridges\n    grip_pattern(len - 10, dia - 1);\n}\n\n// Blade â€“ curved bypass style\nmodule blade() {\n    // Main blade body\n    linear_extrude(height = 2.4, center = true, convexity = 4)\n        polygon(points = [\n            [0, 0],\n            [3, 0],\n            [40, 12],\n            [45, 14],\n            [45, 16],\n            [42, 17],\n            [35, 15],\n            [30, 14],\n            [25, 13],\n            [20, 12],\n            [10, 8],\n            [0, 0]\n        ]);\n    // Cutting edge bevel\n    translate([0, 0, -1.2])\n        linear_extrude(height = 0.6, center = true, convexity = 4)\n            polygon(points = [\n                [0, 0],\n                [3, 0],\n                [40, 12],\n                [45, 14],\n                [45, 15.5],\n                [0, 0]\n            ]);\n}\n\n// Pivot screw / rivet\nmodule pivot_screw() {\n    difference() {\n        cylinder(h = 10, d = 6, $fn = 20);\n        translate([0, 0, -1])\n            cylinder(h = 12, d = 3, $fn = 20);\n    }\n    // Head indent\n    translate([0, 0, 5])\n        cylinder(h = 1, d = 8, $fn = 6);\n}\n\n// Torsion spring (simplified helix)\nmodule spring() {\n    spring_r = 4; turns = 2.5; wire_r = 0.8;\n    $fn = 8;\n    for (i = [0 : 5 : turns * 360])\n        rotate([0, 0, i])\n            translate([spring_r, 0, i / 5])\n                rotate([90, 0, 0])\n                    cylinder(h = wire_r * 2, d = wire_r * 2, center = true);\n}\n\n// Lower handle with anvil\nmodule lower_handle(len = 60, dia = 12) {\n    difference() {\n        cylinder(h = len, d1 = dia * 0.9, d2 = dia, $fn = 36);\n        translate([0, 0, -1])\n            cylinder(h = len + 2, d = dia - 2 * wall, $fn = 36);\n    }\n    grip_pattern(len - 10, dia - 1);\n\n    // Anvil plate\n    translate([0, 0, len])\n        rotate([90, 0, 0])\n            cube([25, 6, 2], center = true);\n}\n\n// ------------------------------\n// Assembly\n// ------------------------------\n\n// Scale everything\nscale(scale_factor) {\n    // Lower handle + anvil\n    color(color_handle)\n        translate([0, 0, 0])\n            lower_handle();\n\n    // Upper handle\n    color(color_handle)\n        rotate([0, 0, 25])\n            translate([0, 0, -15])\n                handle_body();\n\n    // Pivot\n    color(color_screw)\n        translate([0, 0, 10])\n            pivot_screw();\n\n    // Blade (upper)\n    color(color_blade)\n        rotate([0, 0, 25])\n            translate([0, 0, 0])\n                rotate([0, 0, -90])\n                    translate([0, 0, 1.2])\n                        blade();\n\n    // Spring\n    color(color_spring)\n        translate([0, 0, 5])\n            spring();\n}",
    "renders": true
  },
  {
    "tool": "pickaxe",
    "openscad_code": "// Pickaxe Tool - Realistic Style, Medium Complexity\n// Approximate size: 100mm total length\n\n$fn = 50;\n\n// Main assembly\nmodule pickaxe() {\n    // Handle\n    color(\"saddlebrown\")\n    handle();\n    \n    // Metal head\n    color(\"silver\")\n    translate([0, 0, 85])\n    head();\n    \n    // Handle collar\n    color(\"dimgray\")\n    translate([0, 0, 80])\n    collar();\n}\n\n// Handle with grip pattern\nmodule handle() {\n    difference() {\n        // Main handle shaft\n        cylinder(h=90, d=10, center=false);\n        \n        // Grip rings\n        for(i = [0:5:80]) {\n            translate([0, 0, i])\n            cylinder(h=2, d=12, center=false);\n        }\n        \n        // Handle end taper\n        translate([0, 0, -5])\n        cylinder(h=10, d1=12, d2=8, center=false);\n    }\n    \n    // Crosshatch texture on grip area\n    for(i = [10:10:70]) {\n        rotate([0, 0, 0])\n        translate([5.5, 0, i])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=0.5, center=true);\n        \n        rotate([0, 0, 90])\n        translate([5.5, 0, i])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=0.5, center=true);\n    }\n}\n\n// Metal collar connecting handle and head\nmodule collar() {\n    difference() {\n        cylinder(h=8, d=14);\n        \n        // Taper inner hole\n        translate([0, 0, -1])\n        cylinder(h=10, d1=12, d2=8, center=false);\n    }\n    \n    // Decorative ring\n    translate([0, 0, 4])\n    cylinder(h=1, d=16);\n}\n\n// Pickaxe head with pick and adze\nmodule head() {\n    union() {\n        // Central mounting block\n        cube([12, 12, 20], center=true);\n        \n        // Pick (pointed end)\n        translate([0, 20, 5])\n        rotate([0, 90, 0])\n        pick_end();\n        \n        // Adze (flat chisel end)\n        translate([0, -20, 5])\n        rotate([0, 90, 0])\n        adze_end();\n    }\n}\n\n// Pointed pick end\nmodule pick_end() {\n    difference() {\n        // Main pick shaft\n        cylinder(h=30, d1=8, d2=4, center=false);\n        \n        // Taper to point\n        translate([0, 0, 30])\n        sphere(d=4);\n        \n        // Reinforcement ridge\n        translate([0, 0, 10])\n        cylinder(h=3, d=10);\n    }\n}\n\n// Flat chisel adze end\nmodule adze_end() {\n    difference() {\n        // Main adze shaft\n        cylinder(h=25, d1=8, d2=6, center=false);\n        \n        // Chisel blade\n        translate([0, 0, 25])\n        rotate([0, 0, 0])\n        cube([20, 2, 8], center=true);\n        \n        // Blade bevel\n        translate([10, 0, 29])\n        rotate([0, 0, 45])\n        cube([15, 2, 6], center=true);\n    }\n    \n    // Reinforcement ridge\n    translate([0, 0, 10])\n    cylinder(h=3, d=10);\n}\n\n// Generate the complete pickaxe\npickaxe();",
    "renders": true
  },
  {
    "tool": "lopper",
    "openscad_code": "// Lopper Tool - Realistic Medium Complexity\n// Overall dimensions: ~90mm length\n\n// Color definitions\n$fn = 32;\n\nmodule handle() {\n    // Main handle tube\n    color(\"dimgray\") {\n        difference() {\n            cylinder(h=35, d=6, center=false);\n            translate([0, 0, 1]) cylinder(h=33, d=4.5, center=false);\n        }\n        \n        // Grip texture rings\n        for(i=[0:2:10]) {\n            translate([0, 0, 2+i*3]) \n                cylinder(h=1.5, d=6.5, center=false);\n        }\n        \n        // Handle end cap\n        translate([0, 0, 35]) \n            cylinder(h=3, d=7, center=false);\n    }\n}\n\nmodule blade() {\n    color(\"silver\") {\n        // Main blade base\n        translate([-2, 0, 0]) cube([25, 4, 2]);\n        \n        // Blade bevel\n        difference() {\n            translate([-2, 0, 0]) cube([25, 4, 2]);\n            translate([20, 2, -0.5]) rotate([0, 45, 0]) \n                cube([10, 4, 4]);\n        }\n        \n        // Curved blade tip\n        translate([23, 2, 0]) rotate([0, 0, -30]) \n            cylinder(h=8, d=4, center=false);\n        \n        // Blade edge detail\n        translate([5, 1.8, 0]) cube([20, 0.4, 2.2]);\n    }\n}\n\nmodule pivot_mechanism() {\n    color(\"silver\") {\n        // Pivot bolt\n        cylinder(h=8, d=3, center=true);\n        \n        // Bolt head\n        translate([0, 0, 4]) \n            cylinder(h=2, d=5, center=true);\n        \n        // Nut\n        translate([0, 0, -4]) \n            cylinder(h=2, d=5, center=true);\n        \n        // Washer\n        translate([0, 0, 2.5]) \n            cylinder(h=0.5, d=6, center=true);\n        translate([0, 0, -2.5]) \n            cylinder(h=0.5, d=6, center=true);\n    }\n}\n\nmodule jaw_arm() {\n    color(\"darkgray\") {\n        // Upper arm\n        translate([0, 0, 4]) cube([25, 3, 2]);\n        \n        // Reinforcement ridge\n        translate([10, 1.5, 4]) cube([15, 1, 3]);\n        \n        // Handle connector\n        translate([0, 0, 0]) rotate([0, 90, 0]) \n            cylinder(h=8, d=4, center=false);\n    }\n}\n\nmodule lopper_assembly() {\n    // Bottom handle and blade\n    translate([0, 0, 0]) {\n        handle();\n        translate([0, 0, 0]) rotate([90, 0, 0]) \n            translate([0, 0, 6]) blade();\n    }\n    \n    // Top handle and blade (mirrored)\n    translate([0, 25, 0]) rotate([180, 0, 0]) {\n        handle();\n        translate([0, 0, 0]) rotate([90, 0, 0]) \n            translate([0, 0, 6]) blade();\n    }\n    \n    // Pivot mechanism\n    translate([0, 12.5, 4]) pivot_mechanism();\n    \n    // Jaw arms\n    translate([0, 12.5, 0]) rotate([0, 0, 25]) jaw_arm();\n    translate([0, 12.5, 0]) rotate([0, 0, -25]) mirror([0, 1, 0]) jaw_arm();\n    \n    // Safety latch\n    color(\"black\") {\n        translate([0, 12.5, 8]) rotate([0, 90, 0]) \n            cylinder(h=5, d=1, center=false);\n    }\n}\n\n// Render the complete lopper\nlopper_assembly();",
    "renders": true
  },
  {
    "tool": "mower",
    "openscad_code": "// Lawn mower â€“ realistic, medium-complexity, 3D-printable\n// Overall length â‰ˆ 80 mm\n\n// ---------- PARAMETERS ----------\nblade_d   = 38;      // cutting-disk diameter\nblade_h   = 2.5;     // blade thickness\ndeck_h    = 15;      // mower-deck height\nhandle_L  = 60;      // handle length\nhandle_D  = 5;       // handle tube diameter\nwheel_D   = 12;      // wheel diameter\nwheel_W   = 4;       // wheel width\nwall_t    = 1.5;     // printable wall thickness\nscale     = 0.8;     // global shrink to fit 80 mm bounding box\n\n// ---------- COLORS ----------\ncolor_deck  = [0,0.6,0.1];\ncolor_metal = [0.6,0.6,0.6];\ncolor_wheel = [0.15,0.15,0.15];\ncolor_grip  = [0.05,0.05,0.05];\n\n// ---------- MODULES ----------\nmodule wheel(pos=[0,0,0]) {\n    translate(pos)\n    color(color_wheel)\n    rotate([90,0,0])\n    difference() {\n        cylinder(d=wheel_D, h=wheel_W, $fn=20);\n        cylinder(d=wheel_D-2*wall_t, h=wheel_W+0.2, $fn=20);\n    }\n}\n\nmodule blade() {\n    color(\"silver\")\n    linear_extrude(height=blade_h, center=true)\n    union() {\n        for(i=[0:120:359])\n            rotate([0,0,i])\n            translate([blade_d/2*0.75,0,0])\n            cube([blade_d/2,4,1], center=true);\n        circle(d=blade_d/4, $fn=32);\n    }\n}\n\nmodule deck() {\n    color(color_deck)\n    union() {\n        difference() {\n            // main deck shell\n            cylinder(d=blade_d+10, h=deck_h, $fn=64);\n            cylinder(d=blade_d+10-2*wall_t, h=deck_h+0.2, $fn=64);\n        }\n        // engine housing bump\n        translate([0,0,deck_h])\n        cylinder(d=blade_d*0.6, h=8, $fn=32);\n    }\n}\n\nmodule handle_bar() {\n    color(color_metal)\n    union() {\n        // lower U\n        translate([0,0,deck_h+4])\n        rotate([90,0,0])\n        difference() {\n            cylinder(h=blade_d*0.7, d=handle_D, $fn=16);\n            cylinder(h=blade_d*0.7+0.2, d=handle_D-2*wall_t, $fn=16);\n        }\n        // upright posts\n        for(x=[-1,1])\n            translate([x*(blade_d*0.35),0,deck_h+4+handle_L/2])\n            rotate([0,90,0])\n            difference() {\n                cylinder(h=handle_L/2, d=handle_D, $fn=16);\n                cylinder(h=handle_L/2+0.2, d=handle_D-2*wall_t, $fn=16);\n            }\n        // upper bar\n        translate([0,0,deck_h+4+handle_L])\n        rotate([90,0,0])\n        difference() {\n            cylinder(h=blade_d*0.5, d=handle_D, $fn=16);\n            cylinder(h=blade_d*0.5+0.2, d=handle_D-2*wall_t, $fn=16);\n        }\n        // grips\n        color(color_grip)\n        for(x=[-1,1])\n            translate([x*blade_d*0.25,0,deck_h+4+handle_L])\n            rotate([90,0,0])\n            cylinder(h=15, d=handle_D+2, $fn=16);\n    }\n}\n\n// ---------- ASSEMBLY ----------\nscale(scale)\nunion() {\n    deck();\n    blade();\n    handle_bar();\n    // wheels\n    wheel([ blade_d/2+wheel_W/2, 0, wheel_D/2]);\n    wheel([-blade_d/2-wheel_W/2, 0, wheel_D/2]);\n    wheel([0,  blade_d/2+wheel_W/2, wheel_D/2]);\n    wheel([0, -blade_d/2-wheel_W/2, wheel_D/2]);\n}",
    "renders": true
  },
  {
    "tool": "broom",
    "openscad_code": "// Realistic Broom Model - Medium Complexity\n// 3D printable broom with handle and bristles\n\n// Parameters\nhandle_length = 75;\nhandle_diameter = 8;\nbroom_head_length = 30;\nbroom_head_width = 20;\nbroom_head_thickness = 12;\nbristle_length = 25;\nbristle_diameter = 2;\nbristle_rows = 6;\nbristles_per_row = 8;\n\n// Colors\ncolor_handle = [139/255, 69/255, 19/255]; // Brown\ncolor_bristles = [255/255, 248/255, 220/255]; // Beige\ncolor_metal = [192/255, 192/255, 192/255]; // Silver\n\n// Main assembly\nmodule broom() {\n    union() {\n        // Handle\n        color(color_handle)\n            handle();\n        \n        // Broom head\n        translate([0, 0, handle_length])\n            color(color_handle)\n            broom_head();\n        \n        // Metal band\n        translate([0, 0, handle_length - 5])\n            color(color_metal)\n            metal_band();\n        \n        // Bristles\n        translate([0, 0, handle_length + broom_head_thickness])\n            color(color_bristles)\n            bristles();\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    union() {\n        // Main handle cylinder\n        cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        \n        // Grip rings\n        for(i = [1:5:handle_length-10]) {\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h = 2, d = handle_diameter + 1, $fn = 32);\n                    cylinder(h = 2.1, d = handle_diameter, $fn = 32);\n                }\n        }\n    }\n}\n\n// Broom head block\nmodule broom_head() {\n    difference() {\n        // Main block\n        cube([broom_head_width, broom_head_length, broom_head_thickness], center = true);\n        \n        // Rounded edges\n        translate([broom_head_width/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = broom_head_length, d = broom_head_thickness, center = true, $fn = 32);\n        translate([-broom_head_width/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = broom_head_length, d = broom_head_thickness, center = true, $fn = 32);\n    }\n}\n\n// Metal band around handle connection\nmodule metal_band() {\n    cylinder(h = 10, d = handle_diameter + 4, center = true, $fn = 32);\n}\n\n// Individual bristle\nmodule bristle() {\n    cylinder(h = bristle_length, d = bristle_diameter, $fn = 8);\n}\n\n// Array of bristles\nmodule bristles() {\n    // Calculate spacing\n    bristle_spacing_x = broom_head_width / (bristles_per_row + 1);\n    bristle_spacing_y = broom_head_length / (bristle_rows + 1);\n    \n    // Create grid of bristles\n    for(i = [1:bristles_per_row]) {\n        for(j = [1:bristle_rows]) {\n            translate([\n                -broom_head_width/2 + i * bristle_spacing_x,\n                -broom_head_length/2 + j * bristle_spacing_y,\n                0\n            ]) {\n                // Slight random angle for realistic look\n                rotate([random(i*j) * 5 - 2.5, random(i*j+1) * 5 - 2.5, 0])\n                    bristle();\n            }\n        }\n    }\n}\n\n// Helper function for random variation\nfunction random(seed) = (seed * 9301 + 49297) % 233280 / 233280;\n\n// Generate the broom\nbroom();",
    "renders": true
  },
  {
    "tool": "aerator",
    "openscad_code": "// Garden Lawn Aerator - Realistic Style, Medium Complexity\n// Overall dimensions: ~90mm long x 25mm wide x 30mm high\n\nmodule handle() {\n    // Main handle grip\n    color(\"darkgreen\")\n    difference() {\n        cylinder(h=35, d1=12, d2=10, $fn=32);\n        translate([0, 0, -1])\n            cylinder(h=37, d1=10, d2=8, $fn=32);\n    }\n    \n    // Handle grip texture rings\n    for(i=[5:5:30]) {\n        translate([0, 0, i])\n        color(\"darkgreen\")\n        difference() {\n            cylinder(h=2, d=12, $fn=32);\n            cylinder(h=2.2, d=11, $fn=32);\n        }\n    }\n}\n\nmodule shaft() {\n    // Main shaft tube\n    color(\"silver\")\n    difference() {\n        cylinder(h=45, d=8, $fn=24);\n        translate([0, 0, -1])\n            cylinder(h=47, d=6, $fn=24);\n    }\n    \n    // Shaft reinforcement ring at base\n    translate([0, 0, 42])\n    color(\"silver\")\n    cylinder(h=5, d=12, $fn=24);\n}\n\nmodule aerator_head() {\n    // Main head block\n    color(\"gray\")\n    translate([0, 0, -8])\n    cube([20, 25, 12], center=true);\n    \n    // Head reinforcement ribs\n    for(x=[-7:7:7]) {\n        translate([x, 0, -8])\n        color(\"gray\")\n        cube([2, 25, 12], center=true);\n    }\n    \n    // Aerator tines/spikes\n    for(x=[-7:7:7]) {\n        for(y=[-9:6:9]) {\n            translate([x, y, -14])\n            color(\"silver\")\n            cylinder(h=6, d1=3, d2=2, $fn=16);\n        }\n    }\n    \n    // Side support brackets\n    translate([0, 13, -2])\n    color(\"gray\")\n    cube([24, 3, 8], center=true);\n    \n    translate([0, -13, -2])\n    color(\"gray\")\n    cube([24, 3, 8], center=true);\n}\n\nmodule step_plate() {\n    // Foot step plate on top of head\n    translate([0, 0, -2])\n    color(\"yellow\")\n    cube([25, 30, 3], center=true);\n    \n    // Traction pattern on step plate\n    for(x=[-10:5:10]) {\n        translate([x, 0, -0.5])\n        color(\"yellow\")\n        cube([1, 28, 1], center=true);\n    }\n    for(y=[-12:6:12]) {\n        translate([0, y, -0.5])\n        color(\"yellow\")\n        cube([23, 1, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle at top\n    translate([0, 0, 45])\n    handle();\n    \n    // Shaft connecting handle to head\n    translate([0, 0, 22])\n    rotate([90, 0, 0])\n    shaft();\n    \n    // Aerator head assembly\n    aerator_head();\n    \n    // Step plate for foot pressure\n    step_plate();\n}",
    "renders": true
  },
  {
    "tool": "spreader",
    "openscad_code": "// Spreader tool - realistic style, medium complexity\n// Overall size: ~85mm length, designed for 3D printing\n\n// Color definitions\n$fn = 50;\n\n// Main handle with ergonomic grip\nmodule handle() {\n    color(\"DarkGrey\") {\n        // Main handle body\n        difference() {\n            cylinder(h=60, d1=15, d2=12);\n            // Grip grooves\n            for(i = [0:4]) {\n                translate([0, 0, 10 + i*10])\n                    rotate([0, 0, 45])\n                    cube([20, 2, 5], center=true);\n            }\n        }\n        \n        // End cap\n        translate([0, 0, 60])\n            cylinder(h=5, d=13);\n    }\n}\n\n// Spreader arms\nmodule spreader_arms() {\n    color(\"Silver\") {\n        // Left arm\n        translate([-8, 0, 0])\n            rotate([0, -15, 0])\n            difference() {\n                cube([35, 5, 4]);\n                // Tapered end\n                translate([30, 0, 2])\n                    rotate([0, 90, 0])\n                    cylinder(h=5, r1=2, r2=0);\n            }\n        \n        // Right arm\n        translate([8, 0, 0])\n            rotate([0, 15, 0])\n            difference() {\n                cube([35, 5, 4]);\n                // Tapered end\n                translate([30, 0, 2])\n                    rotate([0, 90, 0])\n                    cylinder(h=5, r1=2, r2=0);\n            }\n    }\n}\n\n// Hinge mechanism\nmodule hinge() {\n    color(\"Silver\") {\n        // Central pivot cylinder\n        cylinder(h=8, d=6);\n        \n        // Pivot pins\n        for(i = [-1, 1]) {\n            translate([i*3, 0, 0])\n                cylinder(h=10, d=2);\n        }\n    }\n}\n\n// Adjustment mechanism\nmodule adjustment_mechanism() {\n    color(\"Black\") {\n        // Thumb wheel\n        translate([0, 0, 15])\n            difference() {\n                cylinder(h=10, d=12);\n                // Knurling pattern\n                for(i = [0:15]) {\n                    rotate([0, 0, i*22.5])\n                        translate([5.5, 0, 0])\n                        cube([1, 1, 10]);\n                }\n                // Center hole\n                cylinder(h=11, d=4);\n            }\n        \n        // Threaded rod\n        translate([0, 0, 25])\n            cylinder(h=20, d=4);\n    }\n}\n\n// Spring mechanism\nmodule spring() {\n    color(\"Gold\") {\n        // Simplified coil spring\n        for(i = [0:10]) {\n            translate([0, 0, 5 + i*2])\n                rotate([0, 0, i*30])\n                sphere(d=3);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 30])\n    rotate([90, 0, 0]) {\n        // Handle\n        handle();\n        \n        // Hinge at end of handle\n        translate([0, 0, 65])\n            hinge();\n        \n        // Spreader arms\n        translate([0, 0, 70])\n            spreader_arms();\n        \n        // Adjustment mechanism\n        translate([0, 0, 65])\n            adjustment_mechanism();\n        \n        // Spring between arms\n        translate([0, 0, 72])\n            spring();\n    }",
    "renders": true
  },
  {
    "tool": "digger",
    "openscad_code": "// Realistic 3D-printable digger tool â€“ medium complexity\n// Overall length â‰ˆ 80 mm, no overhangs > 45Â°, 1.2 mm wall thickness\n\n$fn = 36;\n\n// Main colors\ncolor_handle = [0.25, 0.20, 0.15];   // stained wood\ncolor_metal  = [0.40, 0.40, 0.45];   // galvanized steel\ncolor_rubber = [0.10, 0.10, 0.10];   // black grip rings\n\n// Build the complete digger\nmodule digger() {\n    union() {\n        // Handle\n        handle();\n\n        // Shank (long neck)\n        translate([0, 0, 65])\n            shank();\n\n        // Blade assembly\n        translate([0, 0, 110])\n            rotate([0, 0, 0])\n            blade_assembly();\n    }\n}\n\nmodule handle() {\n    color(color_handle)\n    difference() {\n        // Main wooden cylinder\n        cylinder(h = 65, d = 12, center = false);\n\n        // Grip rings grooves â€“ subtract slight indents\n        for (i = [10:15:60])\n            translate([0, 0, i])\n                cylinder(h = 3, d = 10.4, center = false);\n    }\n\n    // Rubber grip rings added back\n    color(color_rubber)\n    for (i = [10:15:60])\n        translate([0, 0, i])\n            cylinder(h = 3, d = 12.4, center = false);\n}\n\nmodule shank() {\n    color(color_metal)\n    difference() {\n        // Tapered neck\n        cylinder(h1 = 45, h2 = 45, r1 = 5, r2 = 3);\n\n        // Rivet detail on side\n        translate([0, 6, 30])\n            rotate([90, 0, 0])\n                cylinder(h = 15, d = 5, center = true);\n    }\n}\n\nmodule blade_assembly() {\n    color(color_metal)\n    union() {\n        // Curved blade\n        translate([0, 0, 0])\n            blade();\n\n        // Step on back for foot force\n        translate([0, -18, 7])\n            rotate([90, 0, 0])\n                cube([30, 8, 2], center = true);\n    }\n}\n\nmodule blade() {\n    difference() {\n        union() {\n            // Basic blade shape â€“ rounded end\n            hull() {\n                translate([-25, 0, 0])\n                    sphere(d = 20);\n                translate([25, 0, 0])\n                    sphere(d = 20);\n            }\n\n            // Extend backwards into shank\n            translate([0, 0, -5])\n                cube([50, 6, 10], center = true);\n        }\n\n        // Cutting edge chamfer\n        translate([0, 0, -2])\n            rotate([0, 0, 0])\n                cube([52, 8, 2], center = true);\n    }\n\n    // Center rib for strength\n    translate([0, 0, 3])\n        cube([46, 2, 6], center = true);\n}\n\ndigger();",
    "renders": true
  },
  {
    "tool": "dibber",
    "openscad_code": "// Realistic Dibber Tool - Medium Complexity\n// Garden dibber for making planting holes\n\n$fn = 32;\n\n// Overall dimensions\ndibber_length = 85;\nhandle_length = 35;\ntaper_length = 45;\nhandle_diameter = 22;\ntip_diameter = 4;\n\n// Module for creating knurled grip pattern\nmodule knurled_grip(diameter, length, segments=36) {\n    difference() {\n        cylinder(h=length, d=diameter, center=false);\n        \n        // Create diamond pattern cuts\n        for(i=[0:segments-1]) {\n            rotate([0, 0, i * 360/segments]) {\n                translate([diameter/2 - 1, -1, -1]) {\n                    rotate([0, 45, 0]) {\n                        cube([2, 2, length + 2]);\n                    }\n                }\n            }\n        }\n        \n        for(i=[0:segments-1]) {\n            rotate([0, 0, i * 360/segments + 180/segments]) {\n                translate([diameter/2 - 1, -1, -1]) {\n                    rotate([0, -45, 0]) {\n                        cube([2, 2, length + 2]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Module for depth marking rings\nmodule depth_marks() {\n    for(depth=[10:10:40]) {\n        translate([0, 0, handle_length - depth]) {\n            difference() {\n                cylinder(h=1, d1=handle_diameter + 2, d2=handle_diameter + 1);\n                cylinder(h=2, d=handle_diameter - 2);\n            }\n        }\n    }\n}\n\n// Main dibber body\nmodule dibber_body() {\n    color(\"BurlyWood\") {\n        union() {\n            // Handle grip section\n            translate([0, 0, handle_length - 25]) {\n                knurled_grip(handle_diameter, 25);\n            }\n            \n            // Handle top dome\n            translate([0, 0, handle_length]) {\n                sphere(d=handle_diameter);\n            }\n            \n            // Tapered shaft\n            translate([0, 0, 0]) {\n                cylinder(h=taper_length, d1=handle_diameter * 0.9, d2=tip_diameter);\n            }\n            \n            // Sharp tip\n            translate([0, 0, 0]) {\n                cylinder(h=5, d1=tip_diameter, d2=0);\n            }\n        }\n    }\n}\n\n// Depth markings with numbers\nmodule depth_markings() {\n    color(\"SaddleBrown\") {\n        depth_marks();\n        \n        // Measurement indicators\n        for(depth=[10:10:40]) {\n            translate([handle_diameter/2 + 3, 0, handle_length - depth - 0.5]) {\n                rotate([0, 90, 0]) {\n                    linear_extrude(height=0.5) {\n                        text(str(depth), size=2, halign=\"center\");\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Hanging hole\nmodule hanging_hole() {\n    color(\"BurlyWood\") {\n        translate([0, 0, handle_length - 5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=handle_diameter + 2, d=5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    dibber_body();\n    depth_markings();\n    \n    difference() {\n        translate([0, 0, handle_length - 5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=handle_diameter + 2, d=5);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "transplanter",
    "openscad_code": "// Realistic Transplanter Tool - OpenSCAD\n// Medium complexity with 3D printing considerations\n\n$fn = 50;\n\n// Main colors\ncolor(\"forestgreen\") transplanter();\n\nmodule transplanter() {\n    // Main handle\n    handle();\n    \n    // Planting head assembly\n    translate([0, 0, 75]) planting_head();\n    \n    // Depth marking scale\n    translate([0, -15, 40]) depth_markings();\n}\n\nmodule handle() {\n    // Handle grip with ergonomic shape\n    difference() {\n        // Main grip cylinder\n        cylinder(h=70, d=25, center=false);\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) \n                translate([0, 10.5, 15]) \n                    cube([22, 3, 10], center=true);\n        }\n    }\n    \n    // Handle shaft\n    translate([0, 0, 70]) \n        cylinder(h=5, d=18);\n}\n\nmodule planting_head() {\n    // Main shaft\n    cylinder(h=60, d=18);\n    \n    // T-shaped release handle\n    translate([0, 0, 30]) release_handle();\n    \n    // Planting blade assembly\n    translate([0, 0, 60]) blade_assembly();\n}\n\nmodule release_handle() {\n    // Cross bar\n    color(\"darkgreen\") {\n        translate([0, 0, 0]) \n            rotate([90, 0, 0]) \n                cylinder(h=50, d=8);\n        \n        // Grip ends\n        for(side = [-1, 1]) {\n            translate([side*25, 0, 0]) \n                rotate([90, 0, 0]) \n                    cylinder(h=10, d=12);\n        }\n    }\n}\n\nmodule blade_assembly() {\n    // Blade support structure\n    color(\"silver\") {\n        // Central core\n        cylinder(h=15, d=16);\n        \n        // Two curved blades\n        for(angle = [0, 180]) {\n            rotate([0, 0, angle]) {\n                // Blade arm\n                translate([5, 0, 7.5]) \n                    rotate([90, 0, 0]) \n                        cylinder(h=35, d=3);\n                \n                // Blade tip\n                translate([5, 0, -10]) \n                    rotate([0, 90, 0]) \n                        cylinder(h=30, d1=3, d2=1);\n            }\n        }\n        \n        // Soil release mechanism\n        translate([0, 0, -10]) {\n            // Base plate\n            cylinder(h=2, d=30);\n            \n            // Release pins\n            for(i = [0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([12, 0, 0]) \n                        cylinder(h=15, d=3);\n                }\n            }\n        }\n    }\n}\n\nmodule depth_markings() {\n    // Measurement scale\n    color(\"black\") {\n        for(depth = [0:10:50]) {\n            translate([0, 0, depth]) {\n                // Main mark\n                cube([20, 1, 0.5], center=true);\n                \n                // Every 20mm add number\n                if(depth % 20 == 0) {\n                    translate([12, 0, 0]) \n                        rotate([90, 0, 0]) \n                            linear_extrude(height=1) \n                                text(str(depth), size=3, valign=\"center\");\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "weeder",
    "openscad_code": "// Weeder Tool - Hand-held with forked tip\n// Approximate overall length 90mm, width 25mm, height 20mm\n\n// Colors\n$fn = 32;\n\nmodule handle() {\n    // Ergonomic grip handle\n    color(\"DarkGreen\")\n    difference() {\n        // Main handle body\n        hull() {\n            translate([0, 0, 5]) cylinder(h = 20, d = 15, center = true);\n            translate([0, 0, 25]) cylinder(h = 15, d = 12, center = true);\n        }\n        \n        // Ergonomic finger grooves\n        for (i = [0:3]) {\n            rotate([0, 0, i * 45])\n            translate([7, 0, 15])\n            rotate([90, 0, 0])\n            cylinder(h = 15, d = 3);\n        }\n    }\n    \n    // Grip texture rings\n    color(\"Black\")\n    for (i = [0:3]) {\n        translate([0, 0, 10 + i * 5])\n        cylinder(h = 1, d = 16);\n    }\n}\n\nmodule shaft() {\n    // Steel shaft connecting handle to blade\n    color(\"Silver\")\n    translate([0, 0, 30])\n    cylinder(h = 35, d = 8);\n    \n    // Reinforcement collar\n    color(\"Silver\")\n    translate([0, 0, 30])\n    cylinder(h = 5, d = 12);\n}\n\nmodule blade() {\n    // Forked weeder blade\n    color(\"Silver\")\n    union() {\n        // Main blade stem\n        translate([0, 0, 62])\n        cylinder(h = 25, d = 6);\n        \n        // Forked tips\n        for (x = [-4, 4]) {\n            translate([x, 0, 74])\n            rotate([0, 0, x > 0 ? 15 : -15])\n            union() {\n                cylinder(h = 15, d = 3);\n                translate([0, 0, 15])\n                sphere(d = 4);\n            }\n        }\n        \n        // Blade reinforcement\n        translate([0, 0, 65])\n        rotate([90, 0, 0])\n        cylinder(h = 15, d = 2);\n    }\n    \n    // Cutting edge bevel\n    color(\"Gray\")\n    translate([0, 0, 74])\n    rotate([0, 0, 0])\n    cylinder(h = 2, d = 8);\n}\n\n// Assemble the weeder\nunion() {\n    handle();\n    shaft();\n    blade();\n}",
    "renders": true
  },
  {
    "tool": "machete",
    "openscad_code": "// Realistic 3D printable machete model\n// Overall length: 80mm, blade length: 55mm, handle length: 25mm\n\n// Blade profile points for realistic curvature\nblade_profile = [\n    [0, 0], [3, 0], [5, 1], [52, 8], [55, 15], [55, 18], [50, 20], [5, 15], [0, 12]\n];\n\n// Handle grip texture pattern\nmodule grip_texture() {\n    for (i = [0:4]) {\n        translate([0, 0, i * 2.5]) {\n            difference() {\n                cylinder(h=1.2, r=6.5, $fn=32);\n                cylinder(h=1.3, r=5.8, $fn=32);\n            }\n        }\n    }\n}\n\n// Main blade with realistic taper\nmodule blade() {\n    color(\"silver\") {\n        // Blade body with polygon extrusion\n        linear_extrude(height=2, center=true) {\n            polygon(points=blade_profile);\n        }\n        \n        // Blade spine thickness\n        translate([0, 0, 1.1]) {\n            linear_extrude(height=0.8, center=true) {\n                polygon(points=[\n                    [0, 0], [52, 0], [52, 6], [0, 0]\n                ]);\n            }\n        }\n        \n        // Cutting edge bevel\n        translate([0, 0, -1.1]) {\n            linear_extrude(height=0.8, center=true) {\n                polygon(points=[\n                    [5, 1], [52, 8], [52, 10], [5, 5]\n                ]);\n            }\n        }\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    // Main handle core\n    color(\"darkolivegreen\") {\n        translate([-25, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=25, r=5.5, $fn=32);\n            }\n        }\n    }\n    \n    // Handle grip rings\n    color(\"black\") {\n        translate([-25, 0, 0]) {\n            rotate([0, 90, 0]) {\n                grip_texture();\n            }\n        }\n    }\n    \n    // Handle end cap\n    color(\"silver\") {\n        translate([-50, 0, 0]) {\n            sphere(d=11, $fn=32);\n        }\n    }\n    \n    // Handle guard\n    color(\"silver\") {\n        translate([0, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=3, r=8, $fn=32);\n            }\n        }\n    }\n}\n\n// Rivets for handle attachment\nmodule rivets() {\n    color(\"silver\") {\n        for (pos = [-15, -20, -30, -40]) {\n            translate([pos, 0, 0]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=12, r=1.2, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Position blade at origin\n    blade();\n    \n    // Attach handle\n    handle();\n    \n    // Add rivets\n    rivets();\n}",
    "renders": true
  },
  {
    "tool": "hatchet",
    "openscad_code": "// Realistic Hatchet Tool - Medium Complexity\n// Overall dimensions: ~90mm length\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Blade parameters\nblade_length = 40;\nblade_width = 25;\nblade_thickness = 3;\nblade_curve = 15;\n\n// Handle parameters\nhandle_length = 50;\nhandle_diameter = 12;\ngrip_length = 30;\n\n// Head parameters\nhead_length = 20;\nhead_height = 15;\neye_diameter = handle_diameter + 2;\n\n// Blade module with cutting edge and bevel\nmodule blade() {\n    color(\"silver\") {\n        // Main blade body\n        difference() {\n            // Curved blade shape\n            union() {\n                linear_extrude(height = blade_thickness)\n                    polygon(points = [\n                        [0, 0],\n                        [blade_length, 0],\n                        [blade_length - blade_curve, blade_width/2],\n                        [blade_length - blade_curve*2, blade_width],\n                        [0, blade_width]\n                    ]);\n                \n                // Reinforcement ridge\n                translate([blade_length/2, blade_width/2, blade_thickness/2])\n                    rotate([90, 0, 0])\n                        cylinder(h = blade_length/2, d = 5, $fn = 20);\n            }\n            \n            // Cutting bevel\n            translate([blade_length - blade_thickness*2, 0, -0.5])\n                cube([blade_thickness*3, blade_width, blade_thickness + 1]);\n            \n            // Edge sharpening\n            translate([blade_length - blade_thickness, 0, -0.5])\n                rotate([0, 0, 30])\n                    cube([blade_thickness*2, blade_width, blade_thickness + 1]);\n        }\n        \n        // Nail puller slot\n        translate([head_length - 5, blade_width/2 - 1, blade_thickness/2])\n            cube([10, 2, blade_thickness], center = true);\n    }\n}\n\n// Hatchet head with eye\nmodule head() {\n    color(\"gray\") {\n        union() {\n            // Main head body\n            translate([0, 0, -head_height/2])\n                cube([head_length, blade_width, head_height], center = false);\n            \n            // Eye for handle\n            translate([head_length - 5, blade_width/2, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = head_height, d = eye_diameter, $fn = 32);\n            \n            // Poll (back of head)\n            translate([0, 0, -head_height/2])\n                cube([head_length/3, blade_width, head_height]);\n            \n            // Cheek reinforcements\n            for(i = [0, 1]) {\n                translate([head_length/2, i ? blade_width : 0, 0])\n                    cube([head_length/2, 1, head_height], center = true);\n            }\n        }\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    color(\"brown\") {\n        union() {\n            // Main handle shaft\n            cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n            \n            // Grip rings\n            for(i = [1:3]) {\n                translate([0, 0, i * grip_length/4])\n                    cylinder(h = 2, d = handle_diameter + 1, $fn = 32);\n            }\n            \n            // Knob at end\n            translate([0, 0, handle_length])\n                sphere(d = handle_diameter + 3, $fn = 32);\n            \n            // Grip texture\n            difference() {\n                // Main handle\n                cylinder(h = grip_length, d = handle_diameter, $fn = 32);\n                \n                // Texture grooves\n                for(i = [0:10]) {\n                    rotate([0, 0, i * 36])\n                        translate([-handle_diameter/2 - 1, -0.5, 0])\n                            cube([handle_diameter + 2, 1, grip_length]);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2])\n    handle();\n\ntranslate([handle_diameter/2 + head_length/2, 0, handle_length - head_height/2])\n    rotate([0, 90, 0])\n        head();\n\ntranslate([head_length - 2, blade_width/2, handle_length - head_height/2])\n    rotate([0, 90, 90])\n        blade();",
    "renders": true
  },
  {
    "tool": "maul",
    "openscad_code": "// Realistic 3D printable maul tool (medium complexity)\n// Overall length ~95 mm, printable without supports\n\n// Color definitions\ncolor_head = [0.7, 0.7, 0.7];     // Steel gray\ncolor_handle = [0.4, 0.2, 0.1];  // Dark wood brown\ncolor_grip = [0.1, 0.1, 0.1];    // Black rubber grip\ncolor_stripe = [1, 0, 0];        // Red safety stripe\n\n// Main module\nmodule maul() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 5]) handle();\n        \n        // Head assembly\n        translate([0, 0, 75]) head();\n    }\n}\n\n// Handle module\nmodule handle() {\n    union() {\n        // Main handle shaft\n        color(color_handle) \n        cylinder(h = 70, d = 12, $fn = 32);\n        \n        // Rubber grip section\n        color(color_grip)\n        translate([0, 0, 25])\n        cylinder(h = 30, d = 14, $fn = 32);\n        \n        // Safety stripe rings\n        for (i = [0:2]) {\n            color(color_stripe)\n            translate([0, 0, 27 + i * 10])\n            cylinder(h = 2, d = 15, $fn = 32);\n        }\n        \n        // Handle end cap\n        color(color_head)\n        translate([0, 0, -1])\n        cylinder(h = 3, d1 = 12, d2 = 14, $fn = 32);\n    }\n}\n\n// Head module\nmodule head() {\n    union() {\n        // Main striking face (flat hammer side)\n        color(color_head) {\n            translate([0, 0, 0])\n            cube([25, 25, 8], center = true);\n            \n            // Tapered body\n            translate([0, 0, 8])\n            cylinder(h = 15, d1 = 25, d2 = 22, $fn = 6);\n        }\n        \n        // Wedge side (splitting maul)\n        color(color_head) {\n            // Wedge body\n            translate([0, -12.5, 8])\n            cube([25, 25, 15], center = true);\n            \n            // Wedge taper\n            difference() {\n                translate([0, -12.5, 15.5])\n                cube([25, 25, 15], center = true);\n                \n                // Cutting edge\n                translate([0, -25, 15.5])\n                rotate([0, 90, 0])\n                cylinder(h = 26, d = 25, $fn = 2);\n            }\n        }\n        \n        // Eye hole for handle\n        color(color_head)\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h = 15, d = 12.5, $fn = 32);\n        \n        // Reinforcement collar\n        color(color_head)\n        translate([0, 0, 0])\n        cylinder(h = 5, d = 18, $fn = 32);\n        \n        // Beveled edges on striking face\n        difference() {\n            translate([0, 0, 0])\n            cube([25, 25, 8], center = true);\n            \n            translate([0, 0, -1])\n            cube([23, 23, 10], center = true);\n        }\n    }\n}\n\n// Render the maul\n$fn = 32;  // Smoother curves\nmaul();",
    "renders": true
  },
  {
    "tool": "sledgehammer",
    "openscad_code": "// Sledgehammer - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n// Overall dimensions\nhandle_length = 75;\nhandle_diameter = 8;\nhead_width = 20;\nhead_height = 12;\nhead_thickness = 12;\n\n// Colors\n$fn = 32;\n\n// Handle grip texture using loops\nmodule grip_ring(d, h, count) {\n    for(i = [0:count-1]) {\n        translate([0, 0, i * h/count]) {\n            difference() {\n                cylinder(h=2, d=d+1.5, $fn=32);\n                cylinder(h=2.2, d=d-0.5, $fn=32);\n            }\n        }\n    }\n}\n\n// Main handle\nmodule handle() {\n    color(\"saddlebrown\") {\n        // Main handle shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings at bottom\n        translate([0, 0, 5]) {\n            grip_ring(handle_diameter, 15, 5);\n        }\n        \n        // Top grip rings\n        translate([0, 0, handle_length-20]) {\n            grip_ring(handle_diameter, 15, 5);\n        }\n    }\n}\n\n// Wedge for securing head\nmodule wedge() {\n    color(\"darkgoldenrod\") {\n        translate([0, head_thickness/2 - 1, handle_length - head_height/2]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height=2) {\n                    polygon(points=[\n                        [-2, 0],\n                        [2, 0],\n                        [1, 3],\n                        [-1, 3]\n                    ]);\n                }\n            }\n        }\n    }\n}\n\n// Hammer head - double-faced sledge\nmodule hammer_head() {\n    color(\"silver\") {\n        // Main head body\n        translate([0, 0, handle_length - head_height/2]) {\n            cube([head_width, head_thickness, head_height], center=true);\n        }\n        \n        // Left striking face\n        translate([-head_width/2 - 0.5, 0, handle_length - head_height/2]) {\n            cylinder(h=head_height + 1, d=head_thickness - 2, $fn=32);\n        }\n        \n        // Right striking face\n        translate([head_width/2 + 0.5, 0, handle_length - head_height/2]) {\n            cylinder(h=head_height + 1, d=head_thickness - 2, $fn=32);\n        }\n        \n        // Handle hole\n        translate([0, 0, handle_length - head_height/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=head_thickness + 2, d=handle_diameter + 1, $fn=32);\n            }\n        }\n        \n        // Chamfers on edges\n        for(x = [-1, 1]) {\n            translate([x * head_width/2, 0, handle_length - head_height/2]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=2, d=head_height, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    hammer_head();\n    wedge();\n}",
    "renders": true
  },
  {
    "tool": "line",
    "openscad_code": "// OpenSCAD code for a realistic Line Tool (Chalk Line Reel)\n// A chalk line tool used for marking straight reference lines in construction\n\n// Color definitions\ncolor_body = [0.2, 0.2, 0.2];      // Dark grey plastic body\ncolor_cap = [0.9, 0.1, 0.1];      // Red end cap\ncolor_metal = [0.5, 0.5, 0.5];    // Metal components\ncolor_chalk = [0.95, 0.8, 0.7];   // Chalk color\n\n// Main parameters\nbody_length = 75;\nbody_diameter = 25;\nhandle_length = 30;\nhandle_diameter = 15;\nline_exit_diameter = 3;\nwall_thickness = 1.5;\n\nmodule chalk_line_tool() {\n    union() {\n        // Main body cylinder\n        color(color_body)\n        difference() {\n            cylinder(h=body_length, d=body_diameter, $fn=48);\n            \n            // Hollow center for chalk storage\n            translate([0, 0, wall_thickness])\n                cylinder(h=body_length-wall_thickness*2, d=body_diameter-wall_thickness*2, $fn=48);\n            \n            // Line exit hole\n            translate([0, body_diameter/2, body_length/2])\n                rotate([90, 0, 0])\n                    cylinder(h=body_diameter, d=line_exit_diameter, $fn=16);\n        }\n        \n        // Crank handle\n        translate([0, 0, body_length])\n        union() {\n            // Handle base\n            color(color_body)\n            cylinder(h=5, d=20, $fn=32);\n            \n            // Rotating handle\n            translate([0, 0, 5])\n            rotate([0, 0, 0])\n            union() {\n                // Handle arm\n                color(color_metal)\n                rotate([90, 0, 0])\n                    cylinder(h=15, d=3, $fn=16);\n                \n                // Handle grip\n                color(color_body)\n                translate([0, 0, 15])\n                    sphere(d=handle_diameter, $fn=32);\n            }\n        }\n        \n        // End cap with grip texture\n        translate([0, 0, -5])\n        color(color_cap)\n        difference() {\n            cylinder(h=10, d=body_diameter, $fn=48);\n            \n            // Internal threads (simplified)\n            for(i=[0:5:355]) {\n                rotate([0, 0, i])\n                    translate([body_diameter/2-1, 0, 5])\n                        cube([2, 1, 10]);\n            }\n        }\n        \n        // Grip texture rings on body\n        for(pos=[15:12:55]) {\n            color(color_body)\n            translate([0, 0, pos])\n                difference() {\n                    cylinder(h=2, d=body_diameter+1, $fn=48);\n                    cylinder(h=2.1, d=body_diameter-1, $fn=48);\n                }\n        }\n        \n        // Line anchor hook\n        translate([0, body_diameter/2+5, body_length/2+5])\n        color(color_metal)\n        rotate([90, 0, 0])\n        difference() {\n            // Hook base\n            cylinder(h=8, d=5, $fn=16);\n            \n            // Hook slot\n            translate([0, 0, 4])\n                cube([1, 10, 3], center=true);\n            \n            // Hook point\n            translate([0, 7, 8])\n                rotate([90, 0, 0])\n                    cylinder(h=3, d1=3, d2=0, $fn=16);\n        }\n        \n        // Fill level window\n        translate([body_diameter/2-0.1, 0, 35])\n        color([0.8, 0.8, 0.9, 0.6])\n        cube([0.1, 10, 20], center=true);\n    }\n}\n\n// Render the complete tool\nchalk_line_tool();",
    "renders": true
  },
  {
    "tool": "chalk",
    "openscad_code": "// Realistic Chalk Tool - OpenSCAD\n// Medium complexity with functional details\n\n// Tool dimensions (mm)\nchalk_diameter = 12;\nchalk_length = 80;\ngrip_length = 35;\ngrip_diameter = 18;\nholder_wall = 2.5;\ncutter_width = 3;\ncutter_height = 8;\n\n// Colors\nchalk_color = \"LightGray\";\nholder_color = \"DarkSlateGray\";\ngrip_color = \"Black\";\ncutter_color = \"Silver\";\n\n// Chalk stick\nmodule chalk_stick() {\n    color(chalk_color)\n    translate([0, 0, -chalk_length/2])\n    cylinder(d=chalk_diameter, h=chalk_length, $fn=32);\n}\n\n// Tapered chalk tip\nmodule chalk_tip() {\n    color(chalk_color)\n    translate([0, 0, chalk_length/2])\n    cylinder(d1=chalk_diameter, d2=chalk_diameter*0.7, h=chalk_length*0.15, $fn=32);\n}\n\n// Knurled grip pattern\nmodule grip_pattern() {\n    difference() {\n        // Main grip cylinder\n        color(grip_color)\n        cylinder(d=grip_diameter, h=grip_length, $fn=32);\n        \n        // Knurling cuts\n        for(i = [0:15]) {\n            rotate([0, 0, i*22.5])\n            translate([0, grip_diameter/2 - 1, -1])\n            cube([cutter_width, 2, grip_length + 2], center=true);\n        }\n    }\n}\n\n// Holder body\nmodule holder_body() {\n    difference() {\n        // Outer cylinder\n        color(holder_color)\n        cylinder(d=grip_diameter + 2*holder_wall, h=grip_length + 5, $fn=32);\n        \n        // Inner bore for chalk\n        translate([0, 0, -1])\n        cylinder(d=chalk_diameter + 1, h=grip_length + 7, $fn=32);\n        \n        // Grip window\n        translate([0, grip_diameter/2 + holder_wall/2, grip_length/2])\n        cube([grip_diameter*0.8, holder_wall + 1, grip_length*0.8], center=true);\n    }\n}\n\n// Retention clip\nmodule retention_clip() {\n    color(cutter_color)\n    translate([0, grip_diameter/2 + holder_wall + 1, grip_length*0.7])\n    rotate([90, 0, 0])\n    difference() {\n        // Clip base\n        union() {\n            cylinder(d1=6, d2=4, h=8, $fn=16);\n            translate([0, 0, 4])\n            cube([6, 2, 12], center=true);\n        }\n        // Spring slot\n        translate([0, -1, 2])\n        cube([3, 2, 8], center=true);\n    }\n}\n\n// Chalk advancement mechanism\nmodule advance_mechanism() {\n    color(holder_color)\n    translate([0, 0, -grip_length/2 - 5])\n    difference() {\n        // Base plate\n        cylinder(d=grip_diameter + 2*holder_wall, h=3, $fn=32);\n        \n        // Center hole\n        cylinder(d=chalk_diameter/2, h=4, $fn=16);\n        \n        // Drive slots\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n            translate([chalk_diameter/2 + 2, 0, -1])\n            cube([4, 1.5, 5], center=true);\n        }\n    }\n}\n\n// Assembly\nmodule chalk_tool() {\n    union() {\n        // Chalk assembly\n        translate([0, 0, grip_length/2 + 10])\n        union() {\n            chalk_stick();\n            chalk_tip();\n        }\n        \n        // Holder assembly\n        union() {\n            holder_body();\n            grip_pattern();\n            retention_clip();\n            advance_mechanism();\n        }\n    }\n}\n\n// Render the tool\nchalk_tool();",
    "renders": true
  },
  {
    "tool": "twine",
    "openscad_code": "// Twine dispenser tool - realistic style, medium complexity\n// Features: rotating spool, cutting blade, handle grip, mounting holes\n\n// Color definitions\n$fn = 50;\n\n// Main body with handle\nmodule body() {\n    // Main housing - hollow box shape\n    difference() {\n        // Outer shell\n        union() {\n            // Main housing\n            cube([60, 40, 30], center=true);\n            \n            // Handle grip\n            translate([-40, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=20, d=15, center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cube([55, 35, 26], center=true);\n            \n        // Handle hole\n        translate([-40, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=22, d=10, center=true);\n    }\n}\n\n// Spool for twine\nmodule spool() {\n    // Central axle\n    cylinder(h=35, d=8, center=true);\n    \n    // Left flange\n    translate([0, 0, -15])\n        cylinder(h=3, d=30);\n    \n    // Right flange\n    translate([0, 0, 15])\n        cylinder(h=3, d=30);\n    \n    // Grooves for grip\n    for(i = [-12:3:12]) {\n        translate([0, 0, i])\n            cylinder(h=1, d=28);\n    }\n}\n\n// Cutting blade\nmodule blade() {\n    // Blade base\n    translate([30, 0, 15])\n        rotate([0, 0, 45])\n            cube([20, 2, 5], center=true);\n    \n    // Serrated edge\n    for(i = [-8:2:8]) {\n        translate([30, i, 17])\n            cube([1, 1, 3]);\n    }\n}\n\n// Mounting brackets\nmodule mounts() {\n    // Left mount\n    translate([-30, -25, -20])\n        cube([8, 8, 10]);\n    translate([-30, -25, -15])\n        cylinder(h=10, d=5);\n    \n    // Right mount\n    translate([-30, 25, -20])\n        cube([8, 8, 10]);\n    translate([-30, 25, -15])\n        cylinder(h=10, d=5);\n}\n\n// Twine guide hole\nmodule guide() {\n    translate([30, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=20, d=6);\n    \n    // Guide funnel\n    translate([30, -10, 0])\n        rotate([90, 0, 0])\n            cylinder(h=5, d1=10, d2=6);\n}\n\n// Assembly\ncolor(\"gray40\") body();\ncolor(\"burlywood\") translate([0, 0, 0]) spool();\ncolor(\"silver\") blade();\ncolor(\"gray30\") mounts();\ncolor(\"gray60\") guide();\n\n// Textured grip pattern on handle\nfor(i = [-3:1:3]) {\n    for(j = [-3:1:3]) {\n        color(\"black\")\n            translate([-40, i*2, j*2])\n                sphere(d=1);\n    }\n}",
    "renders": true
  },
  {
    "tool": "stakes",
    "openscad_code": "// Stakes tool - realistic style, medium complexity\n// Overall dimensions: 100mm length, 35mm width, 20mm height\n\n$fn = 32;\n\n// Main colors\ncolor_steel = [0.7, 0.7, 0.75];\ncolor_handle = [0.1, 0.1, 0.1];\ncolor_grip = [0.2, 0.2, 0.2];\n\n// Handle module\nmodule handle() {\n    color(color_handle) {\n        // Main handle body\n        difference() {\n            cylinder(h=80, d=25, center=true);\n            cylinder(h=82, d=20, center=true);\n        }\n        \n        // Grip rings\n        for(i = [-30:15:30]) {\n            translate([0, 0, i]) {\n                cylinder(h=4, d1=24, d2=26, center=true);\n            }\n        }\n        \n        // End cap\n        translate([0, 0, 40]) {\n            cylinder(h=5, d=28);\n            cylinder(h=3, d=26);\n        }\n    }\n}\n\n// Stake shaft module\nmodule stake_shaft() {\n    color(color_steel) {\n        // Main shaft\n        difference() {\n            cylinder(h=50, d=8, center=true);\n            cylinder(h=52, d=6, center=true);\n        }\n        \n        // Threading\n        for(i = [0:2:48]) {\n            rotate([0, 0, i * 15]) {\n                translate([0, 0, i - 24]) {\n                    difference() {\n                        cylinder(h=2, d=9, center=true);\n                        cylinder(h=3, d=7, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Point\n        translate([0, 0, 25]) {\n            cylinder(h=10, d1=8, d2=0);\n        }\n    }\n}\n\n// Adjustment mechanism\nmodule adjustment_mechanism() {\n    color(color_steel) {\n        // Knurled knob\n        translate([0, 0, -30]) {\n            cylinder(h=15, d=20);\n            \n            // Knurling\n            for(i = [0:15:360]) {\n                rotate([0, 0, i]) {\n                    translate([9.5, 0, 0]) {\n                        cube([1, 0.5, 15], center=true);\n                    }\n                }\n            }\n            \n            // Center hole\n            cylinder(h=16, d=10);\n        }\n        \n        // Locking collar\n        translate([0, 0, -40]) {\n            difference() {\n                cylinder(h=8, d=15);\n                cylinder(h=9, d=8);\n            }\n            \n            // Set screw\n            rotate([0, 90, 0]) {\n                translate([7.5, 0, 0]) {\n                    cylinder(h=3, d=4);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Shaft\n    translate([0, 0, 45]) {\n        rotate([90, 0, 0]) {\n            stake_shaft();\n        }\n    }\n    \n    // Adjustment mechanism\n    adjustment_mechanism();\n    \n    // Safety collar\n    color(color_steel) {\n        translate([0, 0, -45]) {\n            difference() {\n                cylinder(h=5, d=30);\n                cylinder(h=6, d=18);\n            }\n        }\n    }\n    \n    // Measurement markings\n    for(i = [0:5:40]) {\n        color([0.95, 0.95, 0.95]) {\n            translate([12.5, 0, -40 + i]) {\n                cube([3, 0.5, 0.5]);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "trellis",
    "openscad_code": "// Garden Trellis Tool - Realistic Style, Medium Complexity\n\n// Parameters for realistic scaling\ntrellis_height = 80;\ntrellis_width = 60;\npost_diameter = 4;\ncrossbar_diameter = 2.5;\nwall_thickness = 1.5;\n\n// Main trellis structure\nmodule trellis_frame() {\n    color(\"forestgreen\") {\n        // Left vertical post\n        translate([-trellis_width/2 + post_diameter/2, 0, trellis_height/2]) \n            cylinder(h=trellis_height, d=post_diameter, $fn=16);\n        \n        // Right vertical post\n        translate([trellis_width/2 - post_diameter/2, 0, trellis_height/2]) \n            cylinder(h=trellis_height, d=post_diameter, $fn=16);\n        \n        // Top crossbar\n        translate([0, 0, trellis_height - crossbar_diameter/2]) \n            rotate([90,0,0]) cylinder(h=trellis_width, d=crossbar_diameter, $fn=16);\n        \n        // Bottom crossbar\n        translate([0, 0, crossbar_diameter/2]) \n            rotate([90,0,0]) cylinder(h=trellis_width, d=crossbar_diameter, $fn=16);\n    }\n}\n\n// Horizontal support wires\nmodule horizontal_wires() {\n    color(\"silver\") {\n        for (i = [1:7]) {\n            translate([0, 0, i * (trellis_height/8)]) \n                rotate([90,0,0]) cylinder(h=trellis_width - post_diameter, d=1, $fn=8);\n        }\n    }\n}\n\n// Vertical support wires\nmodule vertical_wires() {\n    color(\"silver\") {\n        for (i = [1:5]) {\n            x_pos = -trellis_width/2 + post_diameter + i * ((trellis_width - 2*post_diameter)/6);\n            translate([x_pos, 0, trellis_height/2]) \n                cylinder(h=trellis_height - crossbar_diameter, d=1, $fn=8);\n        }\n    }\n}\n\n// Ground spikes for insertion into soil\nmodule ground_spikes() {\n    color(\"darkgreen\") {\n        // Left spike\n        translate([-trellis_width/2 + post_diameter/2, 0, -5]) \n            cylinder(h=10, d1=post_diameter, d2=1, $fn=16);\n        \n        // Right spike\n        translate([trellis_width/2 - post_diameter/2, 0, -5]) \n            cylinder(h=10, d1=post_diameter, d2=1, $fn=16);\n    }\n}\n\n// Support brackets for reinforcement\nmodule support_brackets() {\n    color(\"forestgreen\") {\n        // Left bracket\n        translate([-trellis_width/2 + post_diameter/2, -2, crossbar_diameter + 5]) \n            rotate([0,45,0]) cube([5, 1, 5]);\n        \n        // Right bracket\n        translate([trellis_width/2 - post_diameter/2, -2, crossbar_diameter + 5]) \n            rotate([0,-45,0]) cube([5, 1, 5]);\n    }\n}\n\n// Tool handle grip\nmodule handle_grip() {\n    color(\"black\") {\n        translate([0, 0, trellis_height + 15]) \n            cylinder(h=20, d=6, $fn=32);\n        \n        // Grip texture\n        for (i = [0:3]) {\n            translate([0, 0, trellis_height + 15 + i*5]) \n                rotate([90,0,0]) cylinder(h=6.1, d=0.5, $fn=32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    trellis_frame();\n    horizontal_wires();\n    vertical_wires();\n    ground_spikes();\n    support_brackets();\n    handle_grip();\n}",
    "renders": true
  },
  {
    "tool": "mesh",
    "openscad_code": "// Mesh Strainer - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm diameter x 40mm height\n\n// Main strainer bowl\nmodule strainer_bowl() {\n    // Outer bowl\n    difference() {\n        cylinder(h=30, d=80, $fn=100);\n        translate([0, 0, 5])\n            cylinder(h=25, d=76, $fn=100);\n    }\n    \n    // Rim reinforcement\n    translate([0, 0, 28])\n        cylinder(h=5, d=82, $fn=100);\n}\n\n// Mesh holes pattern\nmodule mesh_holes() {\n    // Create array of holes in hexagonal pattern\n    spacing = 3.5;\n    rows = 8;\n    cols = 12;\n    \n    for (r = [-rows:rows]) {\n        for (c = [-cols:cols]) {\n            x_offset = (r % 2) * spacing/2;\n            x = c * spacing + x_offset;\n            y = r * spacing * 0.866;\n            \n            if (sqrt(x*x + y*y) < 34) {\n                translate([x, y, 15])\n                    cylinder(h=20, d=2.5, $fn=16);\n            }\n        }\n    }\n}\n\n// Handle grip pattern\nmodule grip_pattern() {\n    rings = 8;\n    for (i = [0:rings-1]) {\n        translate([0, 0, i * 4 + 2])\n            rotate([90, 0, 0])\n                cylinder(h=1, d=14, $fn=60);\n    }\n}\n\n// Main handle\nmodule handle() {\n    // Handle shaft\n    translate([-50, 0, 15])\n        rotate([90, 0, 0])\n            cylinder(h=50, d=12, $fn=32);\n    \n    // Handle grip\n    translate([-50, 0, 15])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=35, d=14, $fn=32);\n                grip_pattern();\n            }\n    \n    // Handle end cap\n    translate([-50, 0, 0])\n        sphere(d=14, $fn=32);\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 39, 15])\n                cube([2, 1, 25], center=true);\n    }\n}\n\n// Assembly\ncolor(\"silver\") {\n    difference() {\n        // Main strainer body\n        union() {\n            strainer_bowl();\n            handle();\n            ribs();\n        }\n        \n        // Mesh holes\n        mesh_holes();\n    }\n}",
    "renders": true
  },
  {
    "tool": "netting",
    "openscad_code": "// Netting Tool - Realistic Style, Medium Complexity\n// A handheld netting tool with folding handle and replaceable net\n\n$fn = 50;\n\n// Main parameters\nhandle_length = 80;\nhandle_diameter = 12;\nring_diameter = 45;\nnet_depth = 25;\nblade_width = 8;\n\n// Colors\nhandle_color = \"SaddleBrown\";\nmetal_color = \"Silver\";\nnet_color = \"DarkGray\";\n\n// Handle module with grip texture\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip indentations\n        for(i = [10:15:handle_length-20]) {\n            translate([0, 0, i])\n            rotate([0, 90, 0])\n            cylinder(h=handle_diameter+2, d=2, center=true);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n    color(metal_color)\n    cylinder(h=3, d=handle_diameter+2, center=false);\n}\n\n// Hinge mechanism for folding handle\nmodule hinge() {\n    color(metal_color) {\n        // Fixed part\n        difference() {\n            cylinder(h=8, d=10, center=true);\n            translate([0, 0, -5])\n            cube([6, 6, 10], center=true);\n        }\n        \n        // Rotating pin\n        translate([0, 0, 5])\n        cylinder(h=12, d=4, center=true);\n    }\n}\n\n// Netting ring with blade edge\nmodule netting_ring() {\n    color(metal_color) {\n        // Main ring\n        difference() {\n            cylinder(h=3, d=ring_diameter, center=true);\n            cylinder(h=4, d=ring_diameter-blade_width*2, center=true);\n        }\n        \n        // Blade edge\n        translate([0, 0, 2])\n        cylinder(h=1, d=ring_diameter+2, center=true);\n        \n        // Attachment points for net\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n            translate([ring_diameter/2 - blade_width, 0, 0])\n            sphere(d=2);\n        }\n    }\n}\n\n// Net mesh (simplified representation)\nmodule net_mesh() {\n    color(net_color) {\n        // Net ring attachment\n        translate([0, 0, -net_depth/2])\n        cylinder(h=net_depth, d=ring_diameter-blade_width*2-4, center=true);\n        \n        // Cross pattern for net\n        for(i = [-1, 1]) {\n            rotate([0, 90*i, 0])\n            cylinder(h=ring_diameter-blade_width*2-4, d=1, center=true);\n        }\n        \n        // Diagonal supports\n        for(angle = [45:90:315]) {\n            rotate([0, 0, angle])\n            translate([0, 0, -net_depth/2])\n            cylinder(h=net_depth, d=0.5, center=true);\n        }\n    }\n}\n\n// Locking mechanism for handle\nmodule lock_mechanism() {\n    color(metal_color) {\n        translate([0, handle_diameter/2+3, handle_length-10])\n        difference() {\n            cube([handle_diameter, 6, 15], center=true);\n            translate([0, 0, 5])\n            cylinder(h=16, d=3, center=true);\n        }\n        \n        // Lock button\n        translate([0, handle_diameter/2+6, handle_length-5])\n        sphere(d=4);\n    }\n}\n\n// Assembly\n// Handle in folded position\ntranslate([0, 0, 0])\nhandle();\n\n// Hinge connecting handle to ring\ntranslate([0, 0, handle_length])\nrotate([90, 0, 0])\nhinge();\n\n// Netting ring assembly\ntranslate([0, 0, handle_length+25])\nrotate([90, 0, 0])\nunion() {\n    netting_ring();\n    translate([0, 0, 2])\n    net_mesh();\n}\n\n// Lock mechanism on handle\nlock_mechanism();",
    "renders": true
  },
  {
    "tool": "tarp",
    "openscad_code": "// Tarp Tool - Medium Complexity Realistic Style\n// A compact tarp grommet installation tool for 3D printing\n\n// Parameters\n$fn = 32;\nhandle_length = 80;\nhandle_diameter = 12;\nhead_length = 25;\nhead_width = 18;\nhead_height = 8;\ngrommet_diameter = 6;\ngrommet_height = 3;\ngrip_ring_count = 6;\ngrip_ring_depth = 1;\ncolor_main = \"DarkSlateGray\";\ncolor_grip = \"Black\";\ncolor_metal = \"Silver\";\n\n// Main handle with grip texture\nmodule handle() {\n    color(color_main) {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip rings\n        for (i = [1:grip_ring_count]) {\n            translate([0, 0, (handle_length/(grip_ring_count+1)) * i])\n                difference() {\n                    cylinder(h=grip_ring_depth*2, d=handle_diameter+2, center=true);\n                    cylinder(h=grip_ring_depth*2+0.1, d=handle_diameter-1, center=true);\n                }\n        }\n    }\n}\n\n// Tool head with grommet press\nmodule tool_head() {\n    color(color_main) {\n        // Main head block\n        translate([0, 0, handle_length])\n            cube([head_width, head_length, head_height], center=true);\n        \n        // Reinforcement ribs\n        translate([0, head_length/2 - 2, handle_length])\n            cube([head_width-4, 4, head_height-2], center=true);\n        \n        translate([0, -head_length/2 + 2, handle_length])\n            cube([head_width-4, 4, head_height-2], center=true);\n    }\n}\n\n// Grommet pressing die (male part)\nmodule male_die() {\n    color(color_metal) {\n        translate([0, head_length/2 - 1, handle_length + head_height/2])\n            cylinder(h=grommet_height, d=grommet_diameter, center=true);\n        \n        // Alignment pin\n        translate([0, head_length/2 - 1, handle_length + head_height/2 + grommet_height/2])\n            cylinder(h=2, d=2, center=true);\n    }\n}\n\n// Grommet receiving die (female part)\nmodule female_die() {\n    color(color_metal) {\n        translate([0, -head_length/2 + 1, handle_length + head_height/2])\n            difference() {\n                cylinder(h=grommet_height, d=grommet_diameter+2, center=true);\n                cylinder(h=grommet_height+0.1, d=grommet_diameter, center=true);\n            }\n    }\n}\n\n// Grip texture on handle ends\nmodule handle_grip() {\n    color(color_grip) {\n        // Top grip\n        translate([0, 0, handle_length + head_height/2 + 2])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=handle_diameter-2, center=true);\n        \n        // Bottom grip\n        translate([0, 0, -2])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=handle_diameter-2, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    tool_head();\n    male_die();\n    female_die();\n    handle_grip();\n    \n    // Chamfers for printability\n    color(color_main) {\n        translate([0, 0, handle_length + head_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=head_width, d=head_height, center=true);\n        \n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(h=handle_diameter, d=handle_diameter, center=true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "mat",
    "openscad_code": "// Self-healing Cutting Mat Tool\n// A realistic 3D printable cutting mat with measurement grid and corner radius\n\n// Main dimensions\nmat_length = 80;\nmat_width = 60;\nmat_thickness = 3;\ncorner_radius = 5;\nwall_thickness = 1.5;\n\n// Color definitions\nmat_color = [0.1, 0.15, 0.05];  // Dark green self-healing mat\ngrid_color = [1, 1, 1];         // White grid lines\ntext_color = [0.8, 0.8, 0.8];   // Light gray text/numbers\n\n// Create the main mat body\nmodule cutting_mat() {\n    difference() {\n        // Main mat body with rounded corners\n        translate([0, 0, -mat_thickness/2])\n            minkowski() {\n                cube([mat_length - 2*corner_radius, mat_width - 2*corner_radius, mat_thickness], center=true);\n                cylinder(r=corner_radius, h=mat_thickness, $fn=20);\n            }\n        \n        // Center cutting surface (slightly recessed)\n        translate([0, 0, -0.5])\n            cube([mat_length - 8, mat_width - 8, 1], center=true);\n    }\n}\n\n// Create measurement grid lines\nmodule grid_lines() {\n    // Horizontal lines\n    for (y = [-30:5:30]) {\n        if (y >= -25 && y <= 25) {\n            color(grid_color)\n                translate([0, y, mat_thickness/2 - 0.1])\n                    cube([mat_length - 2, 0.2, 0.2], center=true);\n        }\n    }\n    \n    // Vertical lines\n    for (x = [-40:5:40]) {\n        if (x >= -35 && x <= 35) {\n            color(grid_color)\n                translate([x, 0, mat_thickness/2 - 0.1])\n                    cube([0.2, mat_width - 2, 0.2], center=true);\n        }\n    }\n    \n    // Bold 10mm lines\n    for (x = [-40:10:40]) {\n        if (x >= -30 && x <= 30) {\n            color(grid_color)\n                translate([x, 0, mat_thickness/2 - 0.1])\n                    cube([0.4, mat_width - 2, 0.2], center=true);\n        }\n    }\n    \n    for (y = [-30:10:30]) {\n        if (y >= -20 && y <= 20) {\n            color(grid_color)\n                translate([0, y, mat_thickness/2 - 0.1])\n                    cube([mat_length - 2, 0.4, 0.2], center=true);\n        }\n    }\n}\n\n// Create corner angle guides\nmodule angle_guides() {\n    // 45 degree angle guides in corners\n    for (i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([mat_length/2 - 10, mat_width/2 - 10, mat_thickness/2 - 0.1])\n                color(grid_color)\n                    cube([15, 0.2, 0.2]);\n    }\n}\n\n// Create measurement markings (simplified as small cubes)\nmodule measurements() {\n    // Top edge numbers\n    for (x = [-30:10:30]) {\n        color(text_color)\n            translate([x, mat_width/2 - 2, mat_thickness/2 - 0.1])\n                cube([0.8, 0.8, 0.2], center=true);\n    }\n    \n    // Left edge numbers\n    for (y = [-20:10:20]) {\n        color(text_color)\n            translate([-mat_length/2 + 2, y, mat_thickness/2 - 0.1])\n                cube([0.8, 0.8, 0.2], center=true);\n    }\n}\n\n// Create non-slip feet\nmodule feet() {\n    foot_radius = 2;\n    foot_height = 0.8;\n    \n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (mat_length/2 - 10), y * (mat_width/2 - 8), -mat_thickness/2 - foot_height/2])\n                cylinder(r=foot_radius, h=foot_height, $fn=16);\n        }\n    }\n}\n\n// Assembly\ncolor(mat_color) cutting_mat();\ngrid_lines();\nangle_guides();\nmeasurements();\ncolor([0.05, 0.05, 0.05]) feet();",
    "renders": true
  },
  {
    "tool": "pad",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity pad tool\n// Overall dimensions: ~70mm length, ~20mm width, ~12mm height\n\n// Tool colors\ncolor(\"DimGray\") difference() {\n    // Main handle body\n    union() {\n        translate([0,0,0]) \n            rounded_cube([65,18,8], 2);\n        \n        // Grip texture with ribs\n        for(i=[-22:4:22]) {\n            translate([i,0,8]) \n                cube([3.5,18,1.2], center=true);\n        }\n        \n        // Thumb rest pad\n        translate([-30,0,9.2]) \n            rounded_cube([10,14,3], 1.5);\n    }\n    \n    // Grip holes\n    for(i=[-22:8:22]) {\n        translate([i,0,4]) \n            cylinder(h=9, d=4, $fn=20);\n    }\n}\n\n// Metal striking pad\ncolor(\"Silver\") union() {\n    // Main pad\n    translate([32,0,4]) \n        rounded_cube([35,20,4], 2);\n    \n    // Reinforcement ridge\n    translate([40,0,8]) \n        rounded_cube([19,16,2], 1);\n    \n    // Rivets\n    for(pos=[[28,6,6],[28,-6,6],[52,6,6],[52,-6,6]]) {\n        translate(pos) \n            cylinder(h=2, d=3, $fn=12);\n    }\n}\n\n// Pivot pin\ncolor(\"Black\") \n    rotate([90,0,0]) \n        translate([0,0,32]) \n            cylinder(h=20, d=4.5, $fn=20);\n\n// Handle core for weight\ncolor(\"DarkGray\") \n    translate([-5,0,3.5]) \n        rounded_cube([45,12,5], 1.5);\n\n// Helper module for rounded cube\nmodule rounded_cube(size, r) {\n    hull() {\n        for(dx=[r,size.x-r], dy=[r,size.y-r], dz=[r,size.z-r]) {\n            translate([dx,dy,dz]) \n                sphere(r=r, $fn=16);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "gloves",
    "openscad_code": "// Realistic Gloves Tool - Medium Complexity\n// 3D printable work gloves for handling tools, approximately 85mm long\n\n// Color constants\n$fa = 2;\n$fs = 0.5;\n\n// Main glove module\nmodule glove(is_right = true) {\n    // Wrist cuff\n    color([0.2, 0.2, 0.2]) \n    translate([0, 0, 0])\n    cylinder(h=15, r1=15, r2=13, $fn=32);\n    \n    // Palm base\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, 15])\n    scale([1, 1.2, 0.8])\n    sphere(r=12);\n    \n    // Thumb base\n    color([0.25, 0.25, 0.25])\n    translate([is_right ? 10 : -10, -5, 15])\n    rotate([0, 0, is_right ? -30 : 30])\n    scale([0.8, 1, 1.2])\n    cylinder(h=20, r1=5, r2=4, $fn=16);\n    \n    // Thumb tip\n    translate([is_right ? 15 : -15, -8, 32])\n    scale([0.7, 0.9, 1.1])\n    sphere(r=4);\n    \n    // Fingers (4 fingers)\n    for(i = [0:3]) {\n        finger(i, is_right);\n    }\n    \n    // Knuckle guards\n    for(i = [0:2]) {\n        color([0.4, 0.4, 0.4])\n        translate([is_right ? -5+i*5 : 5-i*5, 10, 22])\n        scale([1.5, 0.5, 0.5])\n        sphere(r=3);\n    }\n    \n    // Wrist strap\n    color([0.15, 0.15, 0.15])\n    translate([0, 0, 10])\n    difference() {\n        cylinder(h=5, r=16, $fn=32);\n        cylinder(h=6, r=14, $fn=32);\n    }\n    \n    // Grip texture on palm\n    grip_texture(is_right);\n}\n\nmodule finger(index, is_right) {\n    // Position fingers in arc\n    angle = -20 + index * 15;\n    x_pos = is_right ? -8 + index * 6 : 8 - index * 6;\n    \n    // Finger base\n    color([0.35, 0.35, 0.35])\n    translate([x_pos, 12, 20])\n    rotate([0, 0, is_right ? angle : -angle])\n    scale([0.7, 0.8, 1.5])\n    cylinder(h=15, r1=3, r2=2.5, $fn=12);\n    \n    // Finger middle segment\n    translate([x_pos + sin(angle) * 12, 12 + cos(angle) * 12, 32])\n    rotate([0, 0, is_right ? angle : -angle])\n    scale([0.6, 0.7, 1.2])\n    cylinder(h=12, r1=2.5, r2=2, $fn=12);\n    \n    // Finger tip\n    translate([x_pos + sin(angle) * 20, 12 + cos(angle) * 20, 42])\n    scale([0.5, 0.6, 1])\n    sphere(r=2.5);\n}\n\nmodule grip_texture(is_right) {\n    // Diamond pattern on palm\n    for(x = [-8:4:8]) {\n        for(y = [2:4:12]) {\n            color([0.5, 0.5, 0.5])\n            translate([is_right ? x : -x, y, 15 + 0.5])\n            rotate([0, 0, 45])\n            cube([2, 2, 0.5], center=true);\n        }\n    }\n}\n\n// Create left and right gloves\ntranslate([-30, 0, 0]) \nglove(false);\n\ntranslate([30, 0, 0]) \nglove(true);",
    "renders": true
  },
  {
    "tool": "boots",
    "openscad_code": "// Boot Jack - realistic style, medium complexity\n// A tool used to remove boots without bending over\n\n// Colors\ncolor_bootjack = \"BurlyWood\";\ncolor_grip = \"SaddleBrown\";\ncolor_rubber = \"DimGray\";\n\n// Dimensions (mm)\noverall_length = 80;\nhandle_length = 40;\nhandle_width = 20;\nhandle_thickness = 8;\njack_length = 60;\njack_width = 35;\njack_height = 15;\nheel_gap = 20;\nheel_width = 25;\nwall_thickness = 3;\ngrip_depth = 1;\n\n// Handle module with ergonomic grip\nmodule handle() {\n    color(color_bootjack) {\n        // Main handle body\n        linear_extrude(height=handle_thickness) {\n            offset(r=2) offset(r=-2) {\n                polygon([\n                    [0, 0],\n                    [handle_length, 0],\n                    [handle_length-10, handle_width/2],\n                    [handle_length-10, handle_width],\n                    [0, handle_width]\n                ]);\n            }\n        }\n        \n        // Grip texture lines\n        color(color_grip) {\n            for(i = [5:5:handle_length-15]) {\n                translate([i, 2, -0.1]) cube([0.5, handle_width-4, grip_depth+0.2]);\n                translate([i+2, 2, -0.1]) cube([0.5, handle_width-4, grip_depth+0.2]);\n            }\n        }\n    }\n}\n\n// Boot jack fork with heel rest\nmodule boot_jack() {\n    color(color_bootjack) {\n        // Base platform\n        difference() {\n            // Main platform\n            cube([jack_length, jack_width, jack_height], center=true);\n            \n            // Heel gap - U-shaped cutout\n            translate([jack_length/2 - heel_gap/2, 0, -jack_height/2])\n                cube([heel_gap, heel_width, jack_height+1], center=true);\n            \n            // Rounded edges on cutout\n            translate([jack_length/2 - heel_gap/2, heel_width/2, -jack_height/2])\n                rotate([0, 0, 180])\n                cylinder(h=jack_height+1, r=heel_width/4, $fn=20);\n            translate([jack_length/2 - heel_gap/2, -heel_width/2, -jack_height/2])\n                cylinder(h=jack_height+1, r=heel_width/4, $fn=20);\n        }\n        \n        // Reinforcement ribs\n        for(i = [-1, 1]) {\n            translate([0, i*jack_width/4, 0])\n                cube([jack_length-10, wall_thickness, jack_height-2], center=true);\n        }\n        \n        // Rubber pads\n        color(color_rubber) {\n            for(i = [-1, 1]) {\n                translate([jack_length/2 - 10, i*jack_width/2 + 2, -jack_height/2 - 0.5])\n                    cube([15, 4, 1]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Boot jack fork\n    translate([handle_length-15, handle_width/2 - jack_width/2, handle_thickness/2 - jack_height/2])\n        rotate([0, 0, 0])\n        boot_jack();\n    \n    // Reinforcement joint\n    color(color_bootjack) {\n        translate([handle_length-15, handle_width/2 - jack_width/2, -jack_height/2])\n            cube([15, jack_width, wall_thickness]);\n    }\n}",
    "renders": true
  },
  {
    "tool": "hat",
    "openscad_code": "// Realistic Hat Tool - Medium Complexity\n// A classic adjustable wrench styled as a wearable hat\n\n// Overall dimensions\nhat_diameter = 80;\nhat_height = 40;\nwall_thickness = 2;\n\n// Colors\n$fn = 50;\n\nmodule hat_tool() {\n    // Main hat crown - wrench handle shape\n    union() {\n        // Crown base - cylindrical with flat top\n        difference() {\n            cylinder(h=hat_height, d=hat_diameter, center=true);\n            translate([0, 0, wall_thickness])\n                cylinder(h=hat_height, d=hat_diameter-wall_thickness*2, center=true);\n        }\n        \n        // Brim - wrench jaw section\n        translate([0, 0, -hat_height/2 - 5])\n        difference() {\n            cylinder(h=10, d=hat_diameter + 20, center=true);\n            translate([0, 0, -5])\n                cylinder(h=20, d=hat_diameter, center=true);\n        }\n        \n        // Adjustable jaw mechanism on front\n        translate([0, hat_diameter/2 - 5, 0])\n        rotate([90, 0, 0])\n        difference() {\n            // Fixed jaw\n            color(\"silver\")\n            cube([30, 15, 10], center=true);\n            \n            // Movable jaw\n            translate([0, -8, 0])\n            color(\"silver\")\n            cube([28, 12, 8], center=true);\n        }\n        \n        // Knurled adjustment knob\n        translate([0, hat_diameter/2 - 5, -15])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=8, d=12, center=true);\n            // Knurling pattern\n            for(i = [0:15]) {\n                rotate([0, 0, i * 22.5])\n                translate([5.5, 0, 0])\n                cube([1, 12, 1], center=true);\n            }\n        }\n        \n        // Handle grip texture on sides\n        for(side = [-1, 1]) {\n            translate([side * (hat_diameter/2 - 10), 0, 0])\n            rotate([90, 0, 0])\n            for(i = [-3:3]) {\n                translate([0, i * 5, 0])\n                color(\"black\")\n                cube([hat_height - 10, 1, 2], center=true);\n            }\n        }\n        \n        // Size markings on adjustment mechanism\n        translate([0, hat_diameter/2 + 5, -10])\n        rotate([90, 0, 0])\n        for(i = [0:4]) {\n            translate([i * 4 - 8, 0, 0])\n            color(\"red\")\n            cylinder(h=1, d=1, center=true);\n        }\n        \n        // Ventilation holes in wrench handle pattern\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle])\n            translate([hat_diameter/2 - wall_thickness - 5, 0, 10])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness*2, d=3, center=true);\n        }\n        \n        // Reinforcement ribs inside\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([hat_diameter/4, 0, 0])\n            cube([hat_diameter/2, wall_thickness, hat_height - 4], center=true);\n        }\n    }\n}\n\n// Render the hat\nhat_tool();",
    "renders": true
  },
  {
    "tool": "kneeler",
    "openscad_code": "// Kneeler tool - realistic style, medium complexity\n// A handheld gardening tool used for weeding and planting\n\n// Color definitions\n$fn = 32;\nhandle_color = \"SaddleBrown\";\nmetal_color = \"Silver\";\ngrip_color = \"DarkGreen\";\n\n// Overall dimensions (mm)\ntotal_length = 90;\nhandle_length = 50;\nblade_width = 25;\nblade_length = 40;\nblade_thickness = 3;\n\n// Handle module\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        difference() {\n            cylinder(h=handle_length, d1=12, d2=10);\n            // Hollow center for weight reduction\n            cylinder(h=handle_length-5, d1=8, d2=6);\n        }\n        \n        // Grip ring near top\n        translate([0, 0, handle_length-10])\n            color(grip_color)\n            cylinder(h=8, d=14);\n            \n        // End cap\n        translate([0, 0, handle_length])\n            cylinder(h=3, d=12);\n    }\n}\n\n// Blade module with characteristic kneeler shape\nmodule blade() {\n    color(metal_color) {\n        // Main blade body - curved shape\n        difference() {\n            // Base blade shape\n            translate([0, 0, -blade_length/2])\n            scale([1, 1, 1.5])\n            sphere(d=blade_length);\n            \n            // Cut to create flat blade\n            translate([0, 0, -blade_length])\n                cube([blade_width*2, blade_length*2, blade_length], center=true);\n                \n            // Taper the end\n            translate([0, 0, -blade_length/2])\n                rotate([0, 15, 0])\n                cube([blade_width*2, blade_length*2, blade_length], center=true);\n        }\n        \n        // Sharpened edge\n        translate([0, 0, -blade_length/2 + 2])\n            cube([blade_width, blade_thickness, blade_length-4], center=true);\n            \n        // Notches for weeding\n        for(i = [1:3]) {\n            translate([0, 0, -blade_length/2 + i*10])\n                difference() {\n                    cube([blade_width, blade_thickness+1, 2], center=true);\n                    translate([0, 0, 0])\n                        cylinder(h=3, d=6, center=true);\n                }\n        }\n        \n        // Reinforcement ridge\n        translate([0, 0, 0])\n            cube([blade_width/3, blade_thickness*2, blade_length/2], center=true);\n    }\n}\n\n// Handle to blade connection\nmodule tang() {\n    color(metal_color) {\n        // Hidden tang extending into handle\n        translate([0, 0, handle_length/2])\n            cylinder(h=handle_length-5, d=8);\n            \n        // Ferrule\n        translate([0, 0, 0])\n            cylinder(h=5, d=14);\n    }\n}\n\n// Assembly\nmodule kneeler_tool() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 0])\n            handle();\n            \n        // Tang connection\n        translate([0, 0, 0])\n            rotate([180, 0, 0])\n            tang();\n            \n        // Blade assembly\n        translate([0, 0, 0])\n            rotate([180, 0, 0])\n            translate([0, 0, 5])\n            blade();\n    }\n}\n\n// Render the tool\nkneeler_tool();",
    "renders": true
  },
  {
    "tool": "bucket",
    "openscad_code": "// Realistic Medium-Complexity Bucket Tool (OpenSCAD)\n// Height â‰ˆ 75 mm, diameter â‰ˆ 65 mm, wall thickness 2 mm\n\n// Color constants\n$fn = 48;\n\n// Main bucket body\nmodule bucket_body() {\n    difference() {\n        // Outer shell with slight taper\n        cylinder(h = 55, r1 = 32.5, r2 = 30, center = false);\n\n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = 55, r1 = 30.5, r2 = 28, center = false);\n        \n        // Bottom fillet cut\n        translate([0, 0, -0.1])\n            cylinder(h = 3, r1 = 28, r2 = 28, center = false);\n    }\n}\n\n// Reinforced bottom rim\nmodule bottom_rim() {\n    difference() {\n        cylinder(h = 4, r = 33, center = false);\n        cylinder(h = 4.2, r = 30.5, center = false);\n    }\n}\n\n// Sturdy handle brackets\nmodule handle_brackets() {\n    for (a = [0, 180]) {\n        rotate([0, 0, a])\n            translate([29, 0, 45])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h = 10, r = 4, center = true);\n                        cylinder(h = 11, r = 2, center = true);\n                    }\n    }\n}\n\n// Comfortable grip handle\nmodule handle() {\n    translate([0, 0, 50])\n        rotate([90, 0, 0])\n            difference() {\n                // Main handle bar\n                rotate_extrude(angle = 180, $fn = 64)\n                    translate([35, 0, 0])\n                        circle(r = 3);\n                \n                // Grip grooves\n                for (i = [-20:10:20]) {\n                    rotate([0, i, 0])\n                        translate([35, 0, -2])\n                            cube([6, 0.5, 4], center = true);\n                }\n            }\n}\n\n// Pouring spout\nmodule spout() {\n    translate([0, 30.5, 45])\n        rotate([0, 0, 0])\n            difference() {\n                // Spout body\n                hull() {\n                    translate([0, 0, 0])\n                        cube([20, 5, 10], center = true);\n                    translate([0, 8, 5])\n                        cube([12, 1, 2], center = true);\n                }\n                \n                // Interior hollow\n                translate([0, 0, 0])\n                    cube([18, 3, 8], center = true);\n            }\n}\n\n// Volume markings\nmodule volume_marks() {\n    for (i = [1:3]) {\n        translate([22, 0, 10 * i])\n            rotate([90, 0, 0])\n                cylinder(h = 1, r = 0.5);\n        translate([24, 0, 10 * i])\n            cube([4, 0.5, 0.5], center = true);\n    }\n}\n\n// Assembly\ncolor(\"FireBrick\")\n    union() {\n        bucket_body();\n        \n        color(\"DarkRed\")\n            bottom_rim();\n        \n        color(\"SaddleBrown\")\n            handle_brackets();\n        \n        color(\"SaddleBrown\")\n            handle();\n        \n        color(\"FireBrick\")\n            spout();\n        \n        color(\"White\")\n            volume_marks();\n    }",
    "renders": true
  },
  {
    "tool": "pail",
    "openscad_code": "// Realistic Pail Tool - Medium Complexity\n// 3D printable pail with handle, spout and reinforced base\n// Overall height: 75mm, diameter: 60mm\n\n$fn = 32;\nwall_thickness = 2;\nbase_thickness = 3;\n\n// Main pail body\nmodule pail_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=50, d=60, center=false);\n        \n        // Inner hollow space\n        translate([0, 0, base_thickness])\n            cylinder(h=47, d=60-2*wall_thickness, center=false);\n    }\n}\n\n// Reinforced base with ribs\nmodule reinforced_base() {\n    union() {\n        // Base plate\n        cylinder(h=base_thickness, d=62, center=false);\n        \n        // Radial ribs for strength\n        for(i=[0:30:359]) {\n            rotate([0, 0, i])\n                translate([23, 0, 0])\n                    cube([8, 3, base_thickness], center=true);\n        }\n        \n        // Center reinforcement\n        cylinder(h=base_thickness, d=10, center=false);\n    }\n}\n\n// Handle attachment points\nmodule handle_mount() {\n    difference() {\n        // Mount block\n        translate([0, 0, 45])\n            cube([12, 8, 10], center=true);\n        \n        // Hole for handle pin\n        translate([0, 0, 50])\n            rotate([90, 0, 0])\n                cylinder(h=12, d=3.5, center=true);\n    }\n}\n\n// Handle grip\nmodule handle() {\n    color(\"silver\")\n    difference() {\n        // Main handle arc\n        rotate([90, 0, 0])\n            translate([0, 0, 35])\n                difference() {\n                    torus(30, 3);\n                    // Flatten bottom for printing\n                    translate([0, 0, -3])\n                        cube([100, 100, 6], center=true);\n                }\n        \n        // Grip texture\n        for(i=[0:15:359]) {\n            rotate([0, 0, i])\n                translate([30, 0, 0])\n                    cylinder(h=6, d=2, center=true);\n        }\n    }\n}\n\n// Pouring spout\nmodule spout() {\n    difference() {\n        // Spout shape\n        translate([0, 30, 35])\n            rotate([0, 15, 0])\n                cube([25, 15, 15], center=true);\n        \n        // Hollow spout\n        translate([0, 30, 35])\n            rotate([0, 15, 0])\n                cube([21, 11, 11], center=true);\n    }\n}\n\n// Volume markings\nmodule volume_markings() {\n    color(\"black\")\n    for(height=[10:10:40]) {\n        translate([0, 29.5, height])\n            cube([5, 0.5, 0.5], center=false);\n    }\n}\n\n// Complete pail assembly\nunion() {\n    // Main pail structure\n    color(\"red\")\n    union() {\n        pail_body();\n        \n        // Base\n        translate([0, 0, 0])\n            reinforced_base();\n        \n        // Spout\n        spout();\n        \n        // Handle mounts (both sides)\n        translate([0, 0, 0])\n            handle_mount();\n        mirror([1, 0, 0])\n            handle_mount();\n        \n        // Rim reinforcement\n        translate([0, 0, 50])\n            cylinder(h=wall_thickness, d=64, center=false);\n    }\n    \n    // Volume markings\n    volume_markings();\n    \n    // Handle (print separately)\n    translate([0, 0, 0])\n        handle();\n}\n\n// Print orientation indicator\ncolor(\"gray\")\ntranslate([0, 0, -5])\n    cube([1, 1, 1], center=true);",
    "renders": true
  },
  {
    "tool": "barrel",
    "openscad_code": "// Barrel Tool - Medium Complexity Realistic Style\n// A hand tool for installing barrel nuts, featuring a hexagonal shaft and ergonomic handle\n\n// Color definitions\n$fn = 32;\n\nmodule handle() {\n    // Main handle body - ergonomic grip\n    difference() {\n        // Handle core - slightly curved shape\n        color(\"dimgray\") {\n            hull() {\n                translate([-5, -15, 0]) sphere(d=20);\n                translate([5, 15, 0]) sphere(d=20);\n                translate([-5, -15, 80]) sphere(d=20);\n                translate([5, 15, 80]) sphere(d=20);\n            }\n            \n            // Add grip texture rings\n            for (i = [5:10:75]) {\n                translate([0, 0, i]) rotate([0, 90, 0]) \n                    cylinder(h=2, d=22, $fn=6);\n            }\n        }\n        \n        // Finger grooves\n        color(\"dimgray\") {\n            for (i = [20:15:65]) {\n                translate([0, -10, i]) rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h=20, d=18);\n                        translate([0, 0, -1]) cube([20, 20, 22], center=true);\n                    }\n            }\n        }\n    }\n}\n\nmodule shaft() {\n    // Hexagonal shaft for barrel nut engagement\n    color(\"silver\") {\n        // Main hex shaft\n        translate([0, 0, 80]) \n            cylinder(h=60, d=10, $fn=6);\n        \n        // Tapered transition from handle to shaft\n        translate([0, 0, 75]) \n            cylinder(h=5, d1=20, d2=10);\n        \n        // Chamfered tip\n        translate([0, 0, 140]) \n            cylinder(h=2, d1=10, d2=8, $fn=6);\n        \n        // Length markings\n        for (i = [85:10:135]) {\n            translate([0, 0, i]) rotate([0, 90, 0]) \n                cylinder(h=0.5, d=12);\n        }\n    }\n}\n\nmodule handle_cap() {\n    // Metal cap at handle end\n    color(\"silver\") {\n        translate([0, 0, 0]) \n            cylinder(h=5, d=24);\n        \n        // Hanging hole\n        difference() {\n            translate([0, -10, 2.5]) \n                rotate([90, 0, 0]) cylinder(h=20, d=5);\n            translate([0, 0, 0]) cube([50, 50, 5], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    shaft();\n    handle_cap();\n    \n    // Branding/label area\n    color(\"black\") {\n        translate([0, 8, 40]) rotate([0, 0, 0]) \n            cube([15, 0.5, 20], center=true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "can",
    "openscad_code": "// Can Opener - Realistic Style, Medium Complexity\n// 3D printable can opener with functional features\n\n$fn = 36;\n\n// Main colors\ncolor_body = [0.7, 0.7, 0.7];\ncolor_handle = [0.2, 0.2, 0.2];\ncolor_blade = [0.8, 0.8, 0.8];\ncolor_grip = [0.1, 0.1, 0.1];\n\n// Overall dimensions (mm)\ntotal_length = 85;\nhandle_length = 50;\nhandle_diameter = 12;\nblade_length = 25;\nblade_width = 8;\n\nmodule main_body() {\n    color(color_body)\n    difference() {\n        // Main cylindrical body\n        cylinder(h=10, d=20, center=true);\n        \n        // Hole for rotating shaft\n        rotate([90, 0, 0])\n            cylinder(h=25, d=6, center=true);\n    }\n}\n\nmodule turning_handle() {\n    color(color_handle)\n    union() {\n        // Handle shaft\n        rotate([90, 0, 0])\n            cylinder(h=35, d=8, center=true);\n        \n        // Handle grip\n        translate([0, 0, 18])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=12, center=true);\n        \n        // Grip ridges\n        for(i = [-6:6]) {\n            translate([0, 0, 18 + i*1.2])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=1.5, d=12.2, center=true);\n                        cylinder(h=2, d=11.5, center=true);\n                    }\n        }\n    }\n}\n\nmodule cutting_wheel() {\n    color(color_blade)\n    rotate([90, 0, 0])\n    difference() {\n        // Main cutting wheel\n        cylinder(h=3, d=18, center=true);\n        \n        // Cutting edge\n        for(i = [0:30]) {\n            rotate([0, 0, i*12])\n                translate([8.5, 0, 0])\n                    cube([1, 1, 4], center=true);\n        }\n        \n        // Center hole\n        cylinder(h=4, d=6, center=true);\n    }\n}\n\nmodule fixed_handle() {\n    color(color_handle)\n    union() {\n        // Main handle bar\n        translate([0, 0, -20])\n            cube([10, 8, 40], center=true);\n        \n        // Handle grip\n        translate([0, 0, -35])\n            difference() {\n                cube([12, 10, 15], center=true);\n                // Finger grooves\n                for(i = [-2:2]) {\n                    translate([0, 0, -42 + i*3])\n                        cube([13, 11, 2.5], center=true);\n                }\n            }\n        \n        // Reinforcement\n        translate([0, 0, -15])\n            cylinder(h=10, d1=12, d2=8, center=true);\n    }\n}\n\nmodule blade_assembly() {\n    color(color_blade)\n    union() {\n        // Blade arm\n        translate([10, 0, 0])\n            rotate([0, 0, -30])\n                cube([blade_length, blade_width, 3], center=true);\n        \n        // Cutting blade\n        translate([20, 0, 0])\n            rotate([0, 0, -30])\n                cube([3, blade_width, 2], center=true);\n        \n        // Blade tip\n        translate([22, 0, 0])\n            rotate([0, 0, -30])\n                cylinder(h=3, d1=blade_width, d2=blade_width*0.7, center=true);\n    }\n}\n\nmodule magnet_holder() {\n    color(color_body)\n    translate([0, 0, 15])\n        difference() {\n            cylinder(h=5, d=8, center=true);\n            cylinder(h=6, d=4, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Main body assembly\n    main_body();\n    \n    // Turning handle\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            turning_handle();\n    \n    // Cutting wheel\n    translate([0, 10, 0])\n        cutting_wheel();\n    \n    // Fixed handle\n    translate([0, 0, 0])\n        fixed_handle();\n    \n    // Blade assembly\n    translate([0, 0, 8])\n        blade_assembly();\n    \n    // Magnet holder\n    magnet_holder();\n}",
    "renders": true
  },
  {
    "tool": "jug",
    "openscad_code": "// Realistic 3D-printable jug (medium complexity)\n// Approx. 80 mm tall, 60 mm wide, 80 mm deep\n// All walls â‰¥ 1.5 mm for FDM printing\n\n$fn = 48;          // Smooth curves\nwall = 2;          // Wall thickness (mm)\nscaleFactor = 0.8; // Overall scale to ~80 mm max dimension\n\n// Jug body â€“ hollow cylinder with rounded bottom\nmodule jugBody() {\n    difference() {\n        // Outer shell\n        union() {\n            // Cylindrical main body\n            cylinder(h = 60, d = 50);\n\n            // Rounded bottom\n            translate([0, 0, 60])\n                sphere(d = 50);\n        }\n\n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h = 61, d = 50 - 2 * wall);\n\n        translate([0, 0, 60])\n            sphere(d = 50 - 2 * wall);\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    // Main loop\n    rotate([0, 90, 0])\n        difference() {\n            // Outer torus\n            torus(8, 4);\n            // Inner torus (hollow)\n            torus(8 - wall, 4 - wall);\n        }\n\n    // Top connector\n    translate([0, 25, 55])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 8);\n\n    // Bottom connector\n    translate([0, 25, 5])\n        rotate([90, 0, 0])\n            cylinder(h = 10, d = 8);\n}\n\n// Spout for pouring\nmodule spout() {\n    union() {\n        // Base cylinder\n        translate([25, 0, 45])\n            rotate([0, -30, 0])\n                cylinder(h = 20, d1 = 15, d2 = 10);\n\n        // Outer lip\n        translate([40, 0, 55])\n            rotate([0, -30, 0])\n                cylinder(h = 5, d = 12);\n\n        // Hollow core\n        translate([25, 0, 45])\n            rotate([0, -30, 0])\n                cylinder(h = 25, d = 15 - 2 * wall);\n    }\n}\n\n// Measurement markings (embossed)\nmodule markings() {\n    for (i = [1:4]) {\n        translate([0, -22, 10 * i])\n            cube([0.5, 5, 1]);\n    }\n}\n\n// Torus helper\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r = minor);\n}\n\n// Assemble complete jug\nscale([scaleFactor, scaleFactor, scaleFactor]) {\n    color(\"LightSteelBlue\") {\n        union() {\n            jugBody();\n            handle();\n            spout();\n            markings();\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "bottle",
    "openscad_code": "// Realistic Bottle Tool - Medium Complexity\n// A combination bottle opener and corkscrew with ergonomic handle\n\n// Overall dimensions\nbottle_length = 85;\nbottle_width = 25;\nhandle_length = 45;\nhandle_diameter = 20;\n\n// Colors\nmetal_color = \"Silver\";\nhandle_color = \"DarkRed\";\n\n// Main handle with ergonomic grip\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle body\n        union() {\n            // Central cylinder\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n            // Grip rings\n            for(i = [0:4]) {\n                translate([0, 0, i*9])\n                    cylinder(h=3, d=handle_diameter+2, $fn=32);\n            }\n        }\n        \n        // Grip indentations\n        rotate([90, 0, 0])\n            for(i = [0:3]) {\n                translate([0, -handle_length/2 + i*12, 0])\n                    cube([handle_diameter-4, 8, 4], center=true);\n            }\n    }\n}\n\n// Bottle opener head\nmodule opener_head() {\n    color(metal_color)\n    union() {\n        // Main opener body\n        translate([0, 0, -10])\n            cube([bottle_width, 15, 20], center=true);\n        \n        // Cap gripper\n        difference() {\n            translate([0, 0, -5])\n                cube([bottle_width-2, 12, 10], center=true);\n            \n            // Bottle cap cavity\n            translate([0, 2, -5])\n                cube([bottle_width-8, 6, 10], center=true);\n            \n            // Lip for leverage\n            translate([0, -8, -5])\n                cube([bottle_width-4, 2, 10], center=true);\n        }\n        \n        // Reinforcement ridge\n        translate([0, 8, 0])\n            cube([bottle_width-6, 4, 15], center=true);\n    }\n}\n\n// Corkscrew mechanism\nmodule corkscrew() {\n    color(metal_color)\n    union() {\n        // Spiral worm\n        rotate([0, 90, 0])\n            translate([0, -bottle_length/2, 0])\n                linear_extrude(height=30, twist=1080, $fn=8)\n                    circle(d=4);\n        \n        // Center shaft\n        rotate([0, 90, 0])\n            cylinder(h=35, d=3, center=true);\n        \n        // Pivot housing\n        translate([0, 0, 5])\n            rotate([90, 0, 0])\n                cylinder(h=10, d1=8, d2=6, $fn=16);\n        \n        // Lever arms\n        for(i = [0:1]) {\n            rotate([0, 0, i*180])\n                translate([0, 15, 5])\n                    cube([3, 20, 6], center=true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2])\n    handle();\n\ntranslate([0, 0, -5])\n    opener_head();\n\ntranslate([0, -bottle_width/2-5, -handle_length/2-15])\n    corkscrew();\n\n// Safety ring\ncolor(\"Gray\")\nrotate([90, 0, 0])\n    translate([0, -handle_length/2-25, 0])\n        cylinder(h=2, d=12, $fn=32);",
    "renders": true
  },
  {
    "tool": "hose",
    "openscad_code": "// Realistic Garden Hose Nozzle Tool - Medium Complexity\n// 3D printable with no overhangs, proper wall thickness\n\n// Color definitions for realistic appearance\n$fn=50;\n\n// Main nozzle body\nmodule nozzle_body() {\n    color(\"silver\") difference() {\n        // Main cylindrical body\n        cylinder(h=40, r1=15, r2=13, center=true);\n        \n        // Hollow center\n        translate([0,0,-20])\n            cylinder(h=45, r=8, center=true);\n            \n        // Grip knurling cuts\n        for(i=[0:15]) {\n            rotate([0,0,i*22.5])\n                translate([11,0,-20])\n                    cube([4,2,40], center=true);\n        }\n    }\n}\n\n// Trigger mechanism\nmodule trigger() {\n    color(\"darkgray\")\n    translate([0,-15,-10])\n        rotate([90,0,0])\n            difference() {\n                // Trigger body\n                cylinder(h=20, r1=8, r2=6);\n                \n                // Finger groove\n                translate([0,0,10])\n                    rotate([0,90,0])\n                        cylinder(h=15, r=5, center=true);\n            }\n}\n\n// Spray head with multiple patterns\nmodule spray_head() {\n    color(\"silver\") union() {\n        // Rotating head base\n        translate([0,0,25])\n            cylinder(h=10, r=18, center=true);\n            \n        // Spray face\n        translate([0,0,30])\n            difference() {\n                cylinder(h=5, r=16);\n                \n                // Central spray hole\n                translate([0,0,-1])\n                    cylinder(h=7, r=2);\n                    \n                // Pattern holes\n                for(i=[0:5]) {\n                    rotate([0,0,i*60])\n                        translate([8,0,0])\n                            cylinder(h=7, r=1);\n                }\n                \n                // Flat spray slot\n                translate([0,0,-1])\n                    rotate([0,0,45])\n                        cube([20,2,7], center=true);\n            }\n    }\n}\n\n// Hose connector\nmodule hose_connector() {\n    color(\"black\") union() {\n        // Threaded connector\n        translate([0,0,-30])\n            cylinder(h=15, r=12, center=true);\n            \n        // Barbed insert\n        translate([0,0,-40])\n            cylinder(h=10, r1=10, r2=8);\n            \n        // Thread details\n        for(i=[0:8]) {\n            translate([0,0,-30+i*1.5])\n                rotate([0,0,0])\n                    difference() {\n                        cylinder(h=1, r=12.5);\n                        cylinder(h=2, r=11);\n                    }\n        }\n    }\n}\n\n// Flow control ring\nmodule flow_control() {\n    color(\"red\") difference() {\n        // Control ring\n        translate([0,0,-17])\n            cylinder(h=8, r=17);\n            \n        // Grip ridges\n        for(i=[0:23]) {\n            rotate([0,0,i*15])\n                translate([15,0,-17])\n                    cube([3,2,8], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    nozzle_body();\n    trigger();\n    spray_head();\n    hose_connector();\n    flow_control();\n}",
    "renders": true
  },
  {
    "tool": "nozzle",
    "openscad_code": "// Nozzle Tool - Realistic Style, Medium Complexity\n// A 3D printable nozzle tool for various applications\n\n// Overall dimensions\nnozzle_length = 80;\nnozzle_diameter = 12;\nhandle_length = 50;\nhandle_diameter = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Nozzle tip parameters\ntip_angle = 30;\ntip_length = 15;\n\n// Grip parameters\ngrip_rings = 8;\ngrip_ring_width = 3;\ngrip_ring_spacing = 4;\n\n// Color definitions\n$fn = 50;\n\nmodule nozzle_body() {\n    color(\"silver\")\n    union() {\n        // Main cylindrical body\n        cylinder(h=nozzle_length - tip_length, d=nozzle_diameter, center=false);\n        \n        // Tapered tip\n        translate([0, 0, nozzle_length - tip_length])\n        cylinder(h=tip_length, d1=nozzle_diameter, d2=nozzle_diameter/3, center=false);\n        \n        // Internal bore\n        difference() {\n            cylinder(h=nozzle_length, d=nozzle_diameter - wall_thickness*2, center=false);\n            translate([0, 0, -0.1])\n            cylinder(h=nozzle_length + 0.2, d=nozzle_diameter - wall_thickness*2, center=false);\n        }\n    }\n}\n\nmodule handle() {\n    color(\"darkslategray\")\n    difference() {\n        union() {\n            // Main handle cylinder\n            translate([0, 0, -handle_length])\n            cylinder(h=handle_length, d=handle_diameter, center=false);\n            \n            // Handle base flare\n            translate([0, 0, -handle_length - 5])\n            cylinder(h=5, d1=handle_diameter, d2=handle_diameter + 5, center=false);\n            \n            // Connection to nozzle\n            translate([0, 0, -handle_length])\n            cylinder(h=wall_thickness*2, d=nozzle_diameter + wall_thickness*2, center=false);\n        }\n        \n        // Internal bore\n        translate([0, 0, -handle_length - 1])\n        cylinder(h=handle_length + 1, d=handle_diameter - wall_thickness*2, center=false);\n    }\n}\n\nmodule grip_rings() {\n    color(\"dimgray\")\n    for(i = [0:grip_rings-1]) {\n        translate([0, 0, -handle_length + grip_ring_spacing + i*(grip_ring_width + grip_ring_spacing)])\n        difference() {\n            cylinder(h=grip_ring_width, d=handle_diameter + 1, center=false);\n            cylinder(h=grip_ring_width + 0.2, d=handle_diameter - 1, center=false);\n        }\n    }\n}\n\nmodule flow_control() {\n    color(\"silver\")\n    // Side control knob\n    translate([nozzle_diameter/2 + 5, 0, nozzle_length/2])\n    rotate([0, 90, 0])\n    union() {\n        cylinder(h=10, d=8, center=true);\n        cube([15, 2, 2], center=true);\n    }\n}\n\nmodule alignment_markings() {\n    color(\"black\")\n    // Markings on nozzle\n    for(i = [1:4]) {\n        translate([nozzle_diameter/2 + 0.1, 0, i*15])\n        rotate([0, 90, 0])\n        cube([0.5, 2, 0.2]);\n    }\n    \n    // Markings on handle\n    for(i = [1:3]) {\n        translate([handle_diameter/2 + 0.1, 0, -i*12])\n        rotate([0, 90, 0])\n        cube([0.5, 3, 0.2]);\n    }\n}\n\n// Assembly\nunion() {\n    nozzle_body();\n    handle();\n    grip_rings();\n    flow_control();\n    alignment_markings();\n}",
    "renders": true
  },
  {
    "tool": "wand",
    "openscad_code": "// Realistic Medium-Complexity Wand Tool\n// Total length â‰ˆ 70 mm, ready for 3-D printing\n\n$fn = 36;          // smooth curves\nwall = 1.2;        // safe wall thickness for printing\n\nmodule wand() {\n    color(\"SaddleBrown\")\n    union() {\n        // 1. Core shaft\n        translate([0,0,5])\n        cylinder(h = 60, d1 = 5, d2 = 4.5);\n\n        // 2. Handle grip rings\n        for(i = [0:4]) {\n            translate([0,0,5 + i*10])\n            difference() {\n                cylinder(h = 2, d = 7);\n                cylinder(h = 2.2, d = 5);   // hollow to slide over shaft\n            }\n        }\n\n        // 3. Pommel bulb\n        translate([0,0,0])\n        sphere(d = 8);\n\n        // 4. Ferrule ring between shaft and tip\n        translate([0,0,65])\n        cylinder(h = 3, d = 6);\n\n        // 5. Tapered tip\n        translate([0,0,68])\n        cylinder(h = 10, d1 = 6, d2 = 1.5);\n\n        // 6. Engraved rune band\n        translate([0,0,35])\n        difference() {\n            cylinder(h = 6, d = 5.8);\n            // rune grooves\n            for(a = [0:45:315]) {\n                rotate([0,0,a])\n                translate([2.9, -0.4, 0])\n                cube([0.8, 0.8, 6.2]);\n            }\n        }\n    }\n\n    // 7. Small activation crystal\n    color(\"RoyalBlue\")\n    translate([0,0,65.5])\n    scale([1,1,0.7])\n    sphere(d = 3.5);\n}\n\nwand();",
    "renders": true
  },
  {
    "tool": "lance",
    "openscad_code": "// Realistic Lance Tool - Medium Complexity\n// Total length: ~90mm, designed for 3D printing\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule lance() {\n    color(\"silver\") {\n        // Lance tip (sharp point)\n        translate([0, 0, 85]) rotate([180, 0, 0]) \n            cylinder(h=15, r1=2, r2=0, $fn=6);\n        \n        // Blade section\n        translate([0, 0, 80]) \n            cylinder(h=5, r=3, $fn=8);\n        \n        // Main shaft\n        translate([0, 0, 40]) \n            cylinder(h=40, r=2.5, $fn=8);\n        \n        // Reinforcement ring\n        translate([0, 0, 75]) \n            cylinder(h=3, r=3.5, $fn=16);\n    }\n    \n    // Handle grip section\n    color(\"darkslategray\") {\n        translate([0, 0, 20]) \n            cylinder(h=20, r=3, $fn=8);\n        \n        // Grip rings\n        for(i = [0:4]) {\n            translate([0, 0, 22 + i * 3.5]) \n                cylinder(h=1.5, r=3.3, $fn=16);\n        }\n    }\n    \n    // Butt cap\n    color(\"silver\") {\n        translate([0, 0, 0]) {\n            cylinder(h=5, r=4, $fn=16);\n            translate([0, 0, 5]) cylinder(h=2, r1=4, r2=2.5, $fn=16);\n        }\n    }\n    \n    // Decorative bands\n    color(\"goldenrod\") {\n        // Mid-shaft band\n        translate([0, 0, 50]) \n            cylinder(h=2, r=3.2, $fn=32);\n        \n        // Tip band\n        translate([0, 0, 78]) \n            cylinder(h=1.5, r=3.1, $fn=32);\n    }\n    \n    // Cross-guard (small wings)\n    color(\"silver\") {\n        translate([0, 0, 80]) {\n            // Left wing\n            translate([-4, 0, 0]) \n                cube([8, 1, 0.5], center=true);\n            \n            // Right wing  \n            translate([4, 0, 0]) \n                cube([8, 1, 0.5], center=true);\n            \n            // Front wing\n            translate([0, -4, 0]) \n                cube([1, 8, 0.5], center=true);\n            \n            // Back wing\n            translate([0, 4, 0]) \n                cube([1, 8, 0.5], center=true);\n        }\n    }\n    \n    // Engraved grooves on handle\n    color(\"black\") {\n        for(i = [0:3]) {\n            rotate([0, 0, i * 45]) \n                translate([2.5, 0, 25]) \n                    cube([0.5, 0.5, 10], center=true);\n        }\n    }\n    \n    // Lanyard hole\n    color(\"silver\") {\n        translate([0, 3, 2]) \n            rotate([90, 0, 0]) \n                cylinder(h=6, r=1, $fn=16);\n        \n        // Remove hole\n        translate([0, 3, 2]) \n            rotate([90, 0, 0]) \n                cylinder(h=7, r=0.5, $fn=16);\n    }\n}\n\n// Render the lance\nlance();",
    "renders": true
  },
  {
    "tool": "sprinkler",
    "openscad_code": "// Realistic Garden Sprinkler Tool - Medium Complexity\n// Dimensions: ~80mm diameter, 120mm height\n\n$fn = 48;\n\n// Main colors\ncolor(\"darkgreen\") sprinkler_base();\ncolor(\"gray\") sprinkler_head();\ncolor(\"lime\") sprinkler_body();\ncolor(\"black\") grip_details();\n\n// Base assembly\nmodule sprinkler_base() {\n    union() {\n        // Water inlet connector\n        translate([0, 0, -5]) {\n            cylinder(h=15, d=20);\n            translate([0, 0, 15]) cylinder(h=5, d1=20, d2=15);\n        }\n        \n        // Base plate\n        translate([0, 0, 0]) {\n            difference() {\n                cylinder(h=8, d=60);\n                // Screw holes\n                for(i=[0:3]) {\n                    rotate([0, 0, i*90+45]) \n                        translate([20, 0, -1]) \n                            cylinder(h=10, d=4);\n                }\n            }\n        }\n    }\n}\n\n// Main sprinkler body\nmodule sprinkler_body() {\n    union() {\n        // Central tube\n        translate([0, 0, 8]) {\n            cylinder(h=60, d=25);\n            translate([0, 0, 60]) cylinder(h=10, d1=25, d2=15);\n        }\n        \n        // Grip ring\n        translate([0, 0, 35]) {\n            difference() {\n                cylinder(h=15, d=35);\n                translate([0, 0, -1]) cylinder(h=17, d=28);\n            }\n        }\n        \n        // Flow control lever\n        translate([15, 0, 25]) {\n            rotate([90, 0, 0]) {\n                union() {\n                    cylinder(h=20, d=6);\n                    translate([0, 0, 20]) cube([3, 8, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Sprinkler head with nozzles\nmodule sprinkler_head() {\n    translate([0, 0, 78]) {\n        difference() {\n            // Main head body\n            cylinder(h=25, d=50);\n            \n            // Central hole\n            translate([0, 0, -1]) cylinder(h=27, d=8);\n        }\n        \n        // Nozzle arms\n        for(i=[0:5]) {\n            rotate([0, 0, i*60]) {\n                translate([0, 20, 10]) {\n                    rotate([90, 0, 0]) {\n                        // Arm\n                        cylinder(h=12, d=6);\n                        \n                        // Nozzle\n                        translate([0, 0, 12]) {\n                            cylinder(h=3, d1=6, d2=4);\n                            translate([0, 0, 3]) cylinder(h=2, d=2.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Top adjustment dial\n        translate([0, 0, 25]) {\n            difference() {\n                cylinder(h=8, d1=45, d2=40);\n                // Grip ridges\n                for(j=[0:11]) {\n                    rotate([0, 0, j*30]) {\n                        translate([18, 0, 2]) cube([3, 2, 8], center=true);\n                    }\n                }\n            }\n            // Center indicator\n            translate([0, 0, 8]) cylinder(h=1, d=5);\n        }\n    }\n}\n\n// Grip details and markings\nmodule grip_details() {\n    // Grip textures on body\n    translate([0, 0, 30]) {\n        for(k=[0:7]) {\n            rotate([0, 0, k*45]) {\n                translate([16, 0, 0]) cube([1, 2, 15], center=true);\n            }\n        }\n    }\n    \n    // Flow indicators\n    translate([0, -20, 25]) {\n        rotate([90, 0, 0]) {\n            %cylinder(h=1, d=3);\n            translate([0, 0, 0.5]) {\n                rotate([0, 0, 45]) cube([2, 0.5, 1], center=true);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "timer",
    "openscad_code": "// Mechanical kitchen timer â€“ realistic, medium-complexity\n// All dimensions in millimetres, 3D-printable\n\n$fn = 36;\n\n// Overall scale factor for easy re-sizing\nscaleFactor = 0.7;\n\n// Colour scheme\ncolorBody = \"LightGray\";\ncolorKnob  = \"FireBrick\";\ncolorDial  = \"White\";\ncolorHands = \"Black\";\n\nmodule timer() {\n    scale([scaleFactor,scaleFactor,scaleFactor]) {\n\n        /* ---------- Body / bell housing ---------- */\n        difference() {\n            // Main hemispherical shell\n            color(colorBody)\n            sphere(d = 70);\n\n            // Cut off bottom so it sits flat\n            translate([0,0,-35])\n                cube([100,100,40], center=true);\n\n            // Sound slots\n            for(a = [0:60:359])\n                rotate([0,0,a])\n                translate([0,34,-20])\n                    cube([2,8,40], center=true);\n        }\n\n        // Cylindrical base ring for stable standing\n        color(colorBody)\n        translate([0,0,-35])\n        cylinder(h = 8, d = 75);\n\n        /* ---------- Mechanical mechanism housing ---------- */\n        translate([0,0,0])\n        difference() {\n            // Central column\n            cylinder(h = 40, d = 18);\n\n            // Top hole for winding shaft\n            translate([0,0,30])\n                cylinder(h = 15, d = 6);\n        }\n\n        /* ---------- Wind-up knob ---------- */\n        translate([0,0,35])\n        color(colorKnob)\n        union() {\n            cylinder(h = 10, d = 22);\n            // Grip ridges\n            for(a = [0:45:359])\n                rotate([0,0,a])\n                translate([9.5,0,5])\n                    cube([4,2,10], center=true);\n        }\n\n        /* ---------- Dial face ---------- */\n        translate([0,0,15])\n        color(colorDial)\n        cylinder(h = 1.2, d = 55);\n\n        // Minute markings\n        for(m = [0:5:55])\n            rotate([0,0,m*6])\n            translate([0,23.5,16.2])\n                cube([0.8,2.5,1.2], center=true);\n\n        // Numbers 00-55\n        for(m = [0:5:55])\n            rotate([0,0,m*6])\n            translate([0,19,16.3])\n                text(str(m/5*5,2), size=3, h=0.4, center=true);\n\n        /* ---------- Timer hand ---------- */\n        rotate([0,0,270])  // set to zero position\n        translate([0,0,16.5])\n        color(colorHands)\n        union() {\n            // Pointer\n            cube([2,19,1], center=true);\n            // Hub\n            cylinder(h = 2.5, d = 6);\n        }\n\n        /* ---------- Carry handle ---------- */\n        color(colorBody)\n        translate([0,0,35]) {\n            difference() {\n                union() {\n                    // Arc\n                    rotate_extrude(angle = 180, $fn = 64)\n                        translate([35,0,0])\n                            circle(d = 6);\n                    // Side supports\n                    translate([0,-35,0])\n                        rotate([90,0,0])\n                            cylinder(h = 10, d = 6);\n                    translate([0, 35,0])\n                        rotate([90,0,0])\n                            cylinder(h = 10, d = 6);\n                }\n                // Make handle hollow for printing\n                rotate_extrude(angle = 180, $fn = 64)\n                    translate([35,0,0])\n                        circle(d = 3);\n            }\n        }\n    }\n}\n\ntimer();",
    "renders": true
  },
  {
    "tool": "probe",
    "openscad_code": "// Realistic Probe Tool - Medium Complexity\n// Stylus-style measurement probe with knurled grip and M4 threaded tip\n\nmodule knurl_grip(diameter, height, knurl_depth, count) {\n    difference() {\n        cylinder(h=height, d=diameter, $fn=60);\n        for (i = [0:count-1]) {\n            rotate([0, 0, i * 360/count])\n                translate([diameter/2 - knurl_depth, -height/2, 0])\n                    cube([knurl_depth*2, height, 1], center=true);\n        }\n    }\n}\n\nmodule probe_body() {\n    color(\"silver\") {\n        // Main body cylinder\n        cylinder(h=45, d=16, $fn=60);\n        \n        // Tapered section\n        translate([0, 0, 45])\n            cylinder(h1=8, h2=0, d1=16, d2=10, $fn=60);\n            \n        // Knurled grip section\n        translate([0, 0, 8])\n            knurl_grip(diameter=16, height=25, knurl_depth=0.5, count=30);\n    }\n}\n\nmodule probe_shank() {\n    color(\"silver\") {\n        // Narrow shank\n        translate([0, 0, 53])\n            cylinder(h=15, d=6, $fn=30);\n            \n        // Threaded section (simulated)\n        translate([0, 0, 68])\n            cylinder(h=8, d=4.5, $fn=30);\n            \n        // Thread ridges\n        for (i = [0:5]) {\n            translate([0, 0, 68 + i*1.2])\n                cylinder(h=0.8, d=5.5, $fn=30);\n        }\n    }\n}\n\nmodule probe_tip() {\n    color(\"ruby\") {\n        // Ruby ball tip (simulated with red sphere)\n        translate([0, 0, 78])\n            sphere(d=2, $fn=20);\n            \n        // Tip holder cone\n        translate([0, 0, 77])\n            cylinder(h1=3, h2=0, d1=3, d2=2, $fn=30);\n    }\n}\n\nmodule end_cap() {\n    color(\"black\") {\n        // Top cap with chamfer\n        translate([0, 0, -2])\n            cylinder(h1=3, h2=0, d1=16, d2=14, $fn=60);\n            \n        // Alignment notch\n        translate([0, -8.5, -1.5]) {\n            cube([2, 2, 3], center=true);\n        }\n    }\n}\n\nmodule markings() {\n    color(\"black\") {\n        // Size marking\n        translate([0, -9, 20])\n            rotate([90, 0, 0])\n                linear_extrude(0.3)\n                    text(\"Ã˜2mm\", size=2, halign=\"center\");\n                    \n        // Model marking\n        translate([0, -9, 15])\n            rotate([90, 0, 0])\n                linear_extrude(0.3)\n                    text(\"PROBE-01\", size=1.5, halign=\"center\");\n    }\n}\n\n// Assembly\nunion() {\n    probe_body();\n    probe_shank();\n    probe_tip();\n    end_cap();\n    markings();\n}",
    "renders": true
  },
  {
    "tool": "scope",
    "openscad_code": "// Realistic Scope Tool - Medium Complexity\n// OpenSCAD code for 3D printable scope\n\n// Main parameters\n$fn = 32;\nscope_length = 80;\nscope_diameter = 25;\neyepiece_diameter = 30;\nobjective_diameter = 35;\n\n// Color definitions\ncolor_body = [0.2, 0.2, 0.2];\ncolor_lens = [0.1, 0.1, 0.3];\ncolor_adjust = [0.4, 0.4, 0.4];\ncolor_grip = [0.1, 0.1, 0.1];\n\n// Main body module\nmodule scope_body() {\n    color(color_body)\n    difference() {\n        // Main tube\n        cylinder(h = scope_length, d = scope_diameter, center = true);\n        \n        // Hollow center\n        translate([0, 0, 0])\n        cylinder(h = scope_length + 2, d = scope_diameter - 4, center = true);\n    }\n}\n\n// Objective lens housing\nmodule objective_lens() {\n    color(color_lens)\n    translate([-scope_length/2 - 8, 0, 0])\n    difference() {\n        cylinder(h = 8, d = objective_diameter);\n        translate([0, 0, -1])\n        cylinder(h = 10, d = objective_diameter - 6);\n    }\n}\n\n// Eyepiece lens housing\nmodule eyepiece_lens() {\n    color(color_lens)\n    translate([scope_length/2 + 6, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 8, d = eyepiece_diameter);\n        translate([0, 0, -1])\n        cylinder(h = 10, d = eyepiece_diameter - 6);\n    }\n}\n\n// Adjustment turrets\nmodule adjustment_turret(height, angle) {\n    color(color_adjust)\n    rotate([0, 90, angle])\n    translate([0, 0, scope_diameter/2 + height/2])\n    difference() {\n        cylinder(h = height, d = 8);\n        translate([0, 0, -1])\n        cylinder(h = height + 2, d = 6);\n    }\n}\n\n// Windage and elevation knobs\nmodule adjustment_knobs() {\n    // Windage knob (left side)\n    translate([-scope_length/4, -scope_diameter/2 - 5, 0])\n    rotate([90, 0, 0])\n    cylinder(h = 4, d = 6);\n    \n    // Elevation knob (top)\n    translate([0, 0, scope_diameter/2 + 5])\n    rotate([0, 90, 0])\n    cylinder(h = 4, d = 6);\n}\n\n// Grip rings\nmodule grip_rings() {\n    color(color_grip)\n    for(i = [-1, 0, 1]) {\n        translate([i * 15, 0, 0])\n        difference() {\n            cylinder(h = 5, d = scope_diameter + 4);\n            cylinder(h = 7, d = scope_diameter);\n        }\n    }\n}\n\n// Mounting rail\nmodule mounting_rail() {\n    color(color_body)\n    translate([0, 0, -scope_diameter/2 - 3])\n    cube([scope_length + 20, 8, 3], center = true);\n    \n    // Rail slots\n    for(i = [-3:1:3]) {\n        translate([i * 8, 0, -scope_diameter/2 - 1.5])\n        cube([2, 6, 3], center = true);\n    }\n}\n\n// Lens caps\nmodule lens_cap(position) {\n    color(color_body)\n    translate([position, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 4, d = objective_diameter + 2);\n        cylinder(h = 5, d = objective_diameter - 2);\n    }\n}\n\n// Assembly\nunion() {\n    scope_body();\n    objective_lens();\n    eyepiece_lens();\n    \n    // Adjustment turrets\n    adjustment_turret(6, 0);\n    adjustment_turret(6, 90);\n    \n    adjustment_knobs();\n    grip_rings();\n    mounting_rail();\n    \n    // Optional lens caps\n    // lens_cap(-scope_length/2 - 12);\n    // lens_cap(scope_length/2 + 12);\n}",
    "renders": true
  },
  {
    "tool": "glass",
    "openscad_code": "// Realistic Glass Tool - Medium Complexity\n// A glass cutter with carbide wheel head and textured grip handle\n\n// Colors\ncutter_color = \"Silver\";\nhandle_color = \"DarkBlue\";\nwheel_color = \"Black\";\naccent_color = \"Red\";\n\n// Dimensions (mm)\nhandle_length = 80;\nhandle_diameter = 12;\ngrip_length = 45;\ngrip_diameter = 14;\nhead_length = 25;\nhead_width = 8;\nhead_height = 5;\nwheel_diameter = 5;\nwheel_thickness = 1.5;\nshaft_diameter = 6;\nshaft_length = 15;\n\n// Main assembly\nmodule glass_cutter() {\n    color(cutter_color) {\n        // Handle with grip texture\n        union() {\n            // Main handle body\n            translate([0, 0, handle_length/2])\n                cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n            // Textured grip section\n            color(handle_color)\n            translate([0, 0, handle_length - grip_length/2])\n                cylinder(h=grip_length, d=grip_diameter, $fn=32);\n            \n            // Grip rings\n            for(i = [0:4]) {\n                color(accent_color)\n                translate([0, 0, handle_length - grip_length + i*10])\n                    cylinder(h=2, d=grip_diameter + 1, $fn=32);\n            }\n        }\n    }\n    \n    // Cutting head assembly\n    color(cutter_color) {\n        translate([0, 0, handle_length + head_length/2])\n        rotate([90, 0, 0])\n        difference() {\n            // Main head body\n            cube([head_width, head_length, head_height], center=true);\n            \n            // Wheel cavity\n            translate([0, head_length/2 - wheel_diameter/2 - 1, 0])\n                cube([wheel_diameter + 2, wheel_diameter + 2, head_height + 1], center=true);\n            \n            // Shaft hole\n            translate([0, -head_length/2 + shaft_length/2, 0])\n                rotate([0, 90, 0])\n                cylinder(h=head_width + 2, d=shaft_diameter, center=true, $fn=16);\n        }\n    }\n    \n    // Cutting wheel\n    color(wheel_color)\n    translate([0, handle_length + head_length - wheel_diameter/2 - 1, wheel_thickness/2])\n    rotate([90, 0, 0])\n    cylinder(h=wheel_thickness, d=wheel_diameter, $fn=32);\n    \n    // Shaft\n    color(cutter_color)\n    translate([0, handle_length + head_length/2 - shaft_length/2, 0])\n    rotate([90, 0, 0])\n    cylinder(h=shaft_length, d=shaft_diameter, $fn=16);\n    \n    // Alignment marks\n    for(i = [0:2]) {\n        color(accent_color)\n        translate([0, handle_length + head_length - 5 - i*5, head_height/2 + 0.5])\n            cube([0.5, 3, 0.3], center=true);\n    }\n}\n\n// Render the glass cutter\nglass_cutter();",
    "renders": true
  },
  {
    "tool": "lamp",
    "openscad_code": "// Lamp Tool - Realistic Style, Medium Complexity\n// A 3D printable desk lamp with adjustable arm and tool-like features\n\n// Main color scheme\ncolor(\"dimgray\") base();\ncolor(\"silver\") arm();\ncolor(\"yellow\") light();\ncolor(\"black\") grip();\n\n// Base with stability feet\nmodule base() {\n    difference() {\n        // Main cylindrical base\n        cylinder(h=8, r=25, $fn=60);\n        \n        // Tool grip pattern on sides\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n                translate([20,0,2])\n                    cube([8,2,4], center=true);\n        }\n    }\n    \n    // Stability feet\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n            translate([18,0,-2])\n                cylinder(h=4, r=8, $fn=20);\n    }\n}\n\n// Adjustable arm with tool-like joints\nmodule arm() {\n    // Lower arm segment\n    translate([0,0,8])\n        rotate([0,0,0])\n            arm_segment(30);\n    \n    // Middle joint\n    translate([0,0,38])\n        rotate([0,45,0])\n            joint();\n    \n    // Upper arm segment\n    translate([0,21,50])\n        rotate([0,45,0])\n            arm_segment(25);\n    \n    // Head joint\n    translate([0,38,68])\n        rotate([0,90,0])\n            joint();\n}\n\n// Tool-like arm segment with hexagonal profile\nmodule arm_segment(length) {\n    difference() {\n        // Main hexagonal arm\n        cylinder(h=length, r=4, $fn=6);\n        \n        // Tool grip grooves\n        for(i=[1:length/4-1]) {\n            translate([0,0,i*4])\n                cylinder(h=1.5, r=3.5, $fn=6);\n        }\n    }\n}\n\n// Mechanical joint with tool-like appearance\nmodule joint() {\n    difference() {\n        union() {\n            // Main joint body\n            cylinder(h=10, r=5, $fn=20);\n            \n            // Tool adjustment knob\n            translate([0,0,10])\n                cylinder(h=3, r=7, $fn=20);\n        }\n        \n        // Knurling pattern\n        for(i=[0:19]) {\n            rotate([0,0,i*18])\n                translate([6.5,0,10.5])\n                    cube([1,1.5,2], center=true);\n        }\n    }\n}\n\n// LED light assembly with tool-style housing\nmodule light() {\n    translate([0,38,78])\n        rotate([0,90,0]) {\n            // Tool housing\n            difference() {\n                cylinder(h=15, r=12, $fn=6);\n                \n                // Cooling fins\n                for(i=[0:5]) {\n                    rotate([0,0,i*60])\n                        translate([10,0,7.5])\n                            cube([4,1,15], center=true);\n                }\n            }\n            \n            // LED panel\n            translate([0,0,15])\n                cylinder(h=2, r=10, $fn=30);\n            \n            // Tool-style adjustment ring\n            translate([0,0,-2])\n                rotate([0,0,30])\n                    cylinder(h=4, r=14, $fn=6);\n        }\n}\n\n// Ergonomic grip for positioning\nmodule grip() {\n    // Grip on base for adjustment\n    translate([0,0,8])\n        difference() {\n            cylinder(h=4, r=30, $fn=30);\n            \n            // Finger grooves\n            for(i=[0:29]) {\n                rotate([0,0,i*12])\n                    translate([28,0,2])\n                        cube([3,2,4], center=true);\n            }\n        }\n}",
    "renders": true
  },
  {
    "tool": "light",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions\nbody_len = 80;\nhead_d = 45;\nhandle_d = 25;\nhandle_len = 60;\n\n// Color constants\nBLACK = [0.1, 0.1, 0.1];\nSILVER = [0.75, 0.75, 0.75];\nYELLOW = [1, 0.85, 0.2];\nCLEAR = [1, 1, 0.9, 0.5];\n\nmodule handle() {\n    // Main grip\n    difference() {\n        color(BLACK) cylinder(d = handle_d, h = handle_len, $fn = 40);\n        // Finger grooves\n        for (i = [0:3])\n            translate([0, 0, 5 + i * 12])\n                rotate([90, 0, 0])\n                    cylinder(d = handle_d * 0.9, h = 8, $fn = 40);\n    }\n    \n    // Switch\n    translate([handle_d * 0.35, 0, handle_len * 0.6])\n        color(SILVER) cube([8, 12, 5], center = true);\n    \n    // End cap\n    translate([0, 0, handle_len])\n        color(SILVER) cylinder(d = handle_d + 4, h = 5, $fn = 40);\n}\n\nmodule head() {\n    // Reflector cone\n    difference() {\n        // Outer shell\n        color(SILVER) cylinder(d1 = head_d, d2 = head_d * 0.7, h = 25, $fn = 60);\n        // Inner cone\n        translate([0, 0, -1])\n            cylinder(d1 = head_d - 4, d2 = head_d * 0.7 - 4, h = 27, $fn = 60);\n    }\n    \n    // Lens\n    translate([0, 0, 25])\n        color(CLEAR) cylinder(d = head_d - 2, h = 2, $fn = 60);\n    \n    // LED mount\n    translate([0, 0, 22])\n        color(YELLOW) sphere(d = 8, $fn = 20);\n    \n    // Cooling fins\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([head_d / 2, 0, 10])\n                color(SILVER) cube([2, 8, 15], center = true);\n    }\n}\n\nmodule body_tube() {\n    // Main tube\n    color(BLACK) cylinder(d = handle_d - 4, h = body_len, $fn = 40);\n    \n    // Threads for head\n    translate([0, 0, 0])\n        for (i = [0:15])\n            translate([0, 0, i * 2])\n                color(BLACK) \n                    rotate_extrude($fn = 60)\n                        polygon(points = [[handle_d/2 - 2, 0], [handle_d/2, 1], [handle_d/2 - 2, 2]]);\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle();\n\ntranslate([0, 0, handle_len])\n    body_tube();\n\ntranslate([0, 0, handle_len + body_len])\n    head();",
    "renders": true
  },
  {
    "tool": "lantern",
    "openscad_code": "// Realistic 3D-printable lantern tool\n// Medium complexity, no extreme overhangs, 60 mm height\n\n$fn=36;\n\nmodule lantern() {\n    // Main body shell\n    difference() {\n        // Outer cylinder\n        translate([0,0,10])\n            cylinder(h=40, d=30, $fn=60);\n        // Inner cavity\n        translate([0,0,10])\n            cylinder(h=40, d=26);\n    }\n\n    // Top rim collar\n    difference() {\n        translate([0,0,50])\n            cylinder(h=5, d=35);\n        translate([0,0,49.9])\n            cylinder(h=6, d=30);\n    }\n\n    // Base plate\n    difference() {\n        translate([0,0,0])\n            cylinder(h=10, d=35);\n        translate([0,0,-0.1])\n            cylinder(h=10.2, d=26);\n    }\n\n    // Ventilation slots around top\n    for (i=[0:60:359])\n        rotate([0,0,i])\n            translate([13,0,45])\n                cube([2,3,8], center=true);\n\n    // Glass window panels (4 sides)\n    for (i=[0:90:359]) {\n        rotate([0,0,i])\n            translate([13,0,30])\n                cube([2,2,30], center=true);\n    }\n\n    // Wire cage vertical ribs\n    for (i=[0:30:359]) {\n        rotate([0,0,i])\n            translate([14.5,0,30])\n                cylinder(h=35, d=1.2);\n    }\n\n    // Wire cage top ring\n    translate([0,0,48])\n        cylinder(h=2, d=30, $fn=60);\n\n    // Wire cage bottom ring\n    translate([0,0,12])\n        cylinder(h=2, d=30, $fn=60);\n\n    // Handle pivot mounts\n    translate([15,0,48])\n        rotate([90,0,0])\n            cylinder(h=6, d=4);\n    translate([-15,0,48])\n        rotate([90,0,0])\n            cylinder(h=6, d=4);\n\n    // Handle arch\n    translate([0,0,55])\n        rotate([90,0,0])\n            difference() {\n                cylinder(h=30, d=6);\n                translate([0,0,-0.1])\n                    cylinder(h=30.2, d=4);\n            }\n\n    // Handle grip\n    translate([0,0,70])\n        color(\"DarkGoldenrod\")\n            cylinder(h=15, d=8, $fn=20);\n\n    // LED base platform inside\n    translate([0,0,5])\n        cylinder(h=2, d=22);\n\n    // Battery compartment slot\n    difference() {\n        translate([0,0,2])\n            cube([12,20,6], center=true);\n        translate([0,0,1.9])\n            cube([12.2,20.2,6.2], center=true);\n    }\n\n    // Switch toggle\n    color(\"DimGray\")\n        translate([6.5,0,5])\n            rotate([0,90,0])\n                cylinder(h=4, d=3);\n}\n\n// Assemble lantern\ncolor(\"Gold\") lantern();",
    "renders": true
  },
  {
    "tool": "candle",
    "openscad_code": "// Candle Snuffer Tool - Realistic Style\n// Used to safely extinguish candle flames\n\n$fn = 32;\n\n// Main dimensions\nhandle_length = 80;\nhandle_diameter = 10;\ncone_height = 35;\ncone_base_diameter = 30;\ncone_top_diameter = 8;\nhinge_length = 15;\ngrip_length = 25;\n\n// Colors\ncolor_handle = [0.6, 0.3, 0.1];  // Wooden brown\ncolor_cone = [0.7, 0.7, 0.7];   // Metallic silver\ncolor_grip = [0.2, 0.2, 0.2];   // Black rubber\n\n// Wooden handle with ergonomic grip\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle shaft\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip rings for better handling\n        for(i=[0:5:handle_length-5]) {\n            if(i > 10 && i < handle_length - grip_length) {\n                translate([0, 0, i])\n                difference() {\n                    cylinder(h=3, d=handle_diameter + 2, center=false);\n                    cylinder(h=4, d=handle_diameter - 1, center=true);\n                }\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n        sphere(d=handle_diameter + 2);\n    }\n}\n\n// Rubber grip section\nmodule rubber_grip() {\n    color(color_grip)\n    translate([0, 0, handle_length - grip_length])\n    difference() {\n        cylinder(h=grip_length, d=handle_diameter + 3, center=false);\n        \n        // Grip texture grooves\n        for(i=[0:2:grip_length-2]) {\n            translate([0, 0, i])\n            cylinder(h=1, d=handle_diameter + 1, center=false);\n        }\n    }\n}\n\n// Snuffer cone with ventilation holes\nmodule snuffer_cone() {\n    color(color_cone)\n    union() {\n        // Main cone body\n        cylinder(h1=cone_height, h2=0, r1=cone_base_diameter/2, r2=cone_top_diameter/2, center=false);\n        \n        // Reinforcement ring at base\n        translate([0, 0, 0])\n        cylinder(h=3, d=cone_base_diameter + 4, center=false);\n        \n        // Ventilation holes for smoke escape\n        for(angle=[0:30:330]) {\n            rotate([0, 0, angle])\n            translate([cone_base_diameter/2 - 2, 0, cone_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=cone_height, d=2, center=true);\n        }\n        \n        // Hinge connection point\n        translate([0, 0, -5])\n        rotate([90, 0, 0])\n        union() {\n            cylinder(h=hinge_length, d=6, center=true);\n            sphere(d=6);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nunion() {\n    handle();\n    rubber_grip();\n    \n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    translate([0, handle_diameter/2, 0])\n    snuffer_cone();\n}",
    "renders": true
  },
  {
    "tool": "stake",
    "openscad_code": "// Stake Tool - Realistic Style (Medium Complexity)\n// A tent stake with functional features for camping use\n\n$fn = 50;\n\n// Main dimensions\nstake_length = 75;\nhead_height = 12;\nshaft_diameter = 6;\nhook_width = 8;\nhook_thickness = 2;\n\n// Color definitions\nmetal_color = [0.7, 0.7, 0.75];\nhighlight_color = [0.8, 0.8, 0.85];\n\nmodule stake_head() {\n    difference() {\n        // Main head body\n        color(metal_color)\n        union() {\n            // Cylindrical head\n            cylinder(h = head_height, d1 = shaft_diameter * 2.5, d2 = shaft_diameter * 2.2);\n            \n            // Hook for rope attachment\n            translate([0, hook_width/2, head_height - hook_thickness])\n            rotate([90, 0, 0])\n            cylinder(h = hook_width, d = hook_thickness);\n            \n            // Reinforcement ring\n            translate([0, 0, 2])\n            cylinder(h = 3, d = shaft_diameter * 2.3);\n        }\n        \n        // Hole for rope threading\n        color(highlight_color)\n        translate([0, 0, head_height/2])\n        rotate([90, 0, 0])\n        cylinder(h = shaft_diameter * 2.5, d = 3);\n    }\n}\n\nmodule stake_shaft() {\n    color(metal_color)\n    difference() {\n        // Tapered shaft\n        cylinder(h = stake_length, d1 = shaft_diameter * 1.2, d2 = shaft_diameter);\n        \n        // Grip rings along shaft\n        for(i = [1:5:stake_length-15]) {\n            translate([0, 0, i])\n            cylinder(h = 1.5, d = shaft_diameter * 1.4);\n        }\n        \n        // Point tip\n        translate([0, 0, stake_length - 8])\n        cylinder(h = 8, d1 = shaft_diameter, d2 = 0.5);\n    }\n}\n\nmodule stake_markings() {\n    // Length markings in cm\n    for(cm = [5:5:30]) {\n        color([0.5, 0.5, 0.5])\n        translate([0, shaft_diameter/2 + 0.5, cm * 10])\n        cube([1, 0.5, 0.3]);\n    }\n    \n    // Manufacturer mark\n    translate([0, -shaft_diameter/2 - 1, head_height + 10])\n    rotate([0, 90, 0])\n    linear_extrude(height = 0.5)\n    text(\"CAMP\", size = 3);\n}\n\n// Assembly\nunion() {\n    // Main stake parts\n    stake_head();\n    translate([0, 0, head_height])\n    stake_shaft();\n    \n    // Additional features\n    translate([0, 0, head_height])\n    stake_markings();\n}",
    "renders": true
  },
  {
    "tool": "peg",
    "openscad_code": "// Realistic Peg Tool - Medium Complexity\n// A peg tool for adjusting and removing tent pegs, featuring ergonomic grip and hook\n\n// Color definitions\n$fn = 50;\n\n// Main dimensions\npeg_length = 80;\nhandle_length = 60;\nhandle_diameter = 22;\nhook_length = 25;\nhook_width = 8;\nhook_thickness = 4;\n\n// Handle module with grip texture\nmodule handle() {\n    color([0.2, 0.2, 0.2]) // Dark gray for rubber grip\n    difference() {\n        // Main handle body\n        cylinder(h=handle_length, d1=handle_diameter, d2=handle_diameter*0.9, center=false);\n        \n        // Grip rings\n        for(i = [5:10:handle_length-10]) {\n            translate([0, 0, i])\n                cylinder(h=3, d=handle_diameter-2, center=false);\n        }\n    }\n    \n    // End cap\n    color([0.8, 0.8, 0.8]) // Light gray\n    translate([0, 0, handle_length])\n        cylinder(h=5, d=handle_diameter*1.05, center=false);\n}\n\n// Hook module for pulling pegs\nmodule peg_hook() {\n    color([0.7, 0.7, 0.7]) // Metallic gray\n    \n    // Hook base cylinder\n    cylinder(h=hook_length, d=hook_width, center=false);\n    \n    // Hook tip\n    translate([0, 0, hook_length])\n        rotate([90, 0, 0])\n            cylinder(h=hook_width*1.2, d=hook_thickness, center=false);\n    \n    // Reinforcement ring\n    translate([0, 0, hook_length/2])\n        cylinder(h=hook_thickness, d=hook_width+4, center=true);\n}\n\n// Shaft with peg insertion end\nmodule shaft() {\n    color([0.75, 0.75, 0.75]) // Metallic\n    \n    // Main shaft\n    cylinder(h=peg_length, d=handle_diameter*0.7, center=false);\n    \n    // Tapered end for peg insertion\n    translate([0, 0, peg_length])\n        cylinder(h=15, d1=handle_diameter*0.7, d2=handle_diameter*0.4, center=false);\n    \n    // Guide slot for peg\n    translate([0, -handle_diameter*0.35, peg_length-10])\n        cube([handle_diameter*0.7, handle_diameter*0.7, 20], center=false);\n}\n\n// Assembly\nmodule peg_tool() {\n    // Handle\n    handle();\n    \n    // Shaft\n    translate([0, 0, handle_length+5])\n        rotate([180, 0, 0])\n            shaft();\n    \n    // Peg hook\n    translate([handle_diameter/2+5, 0, handle_length-30])\n        rotate([90, 0, 0])\n            peg_hook();\n    \n    // Hanging hole\n    color([0.1, 0.1, 0.1])\n    translate([0, 0, handle_length/2])\n        rotate([90, 0, 0])\n            cylinder(h=handle_diameter+2, d=6, center=true);\n}\n\npeg_tool();",
    "renders": true
  },
  {
    "tool": "clip",
    "openscad_code": "// Realistic 3D-printable spring paper-clip tool (medium complexity, ~120 lines)\n// Overall size: ~70 mm long, 30 mm wide, 20 mm thick\n\n// ---- Parameters ----------------------------------------------------------\n$fn = 36;                // Resolution for curves\nwall = 1.8;              // Wall thickness for 3D printing\ns = 1.05;                // Small tolerance for moving parts\ngrip_d = 7;              // Handle grip diameter\nclip_l = 35;             // Actual clip jaw length\nspring_od = 8;           // Coil spring outer diameter\nspring_w = 1.2;          // Spring wire diameter\n\n// ---- Main assembly -------------------------------------------------------\nmodule clip_tool() {\n    color(\"silver\")\n    union() {\n        left_handle();\n        right_handle();\n        coil_spring();\n    }\n}\n\n// ---- Left handle ---------------------------------------------------------\nmodule left_handle() {\n    difference() {\n        // Main handle\n        translate([0, 0, 0])\n            handle_body();\n\n        // Finger grooves on grip\n        for (i = [-1:1])\n            translate([0, -12 + i*5, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=grip_d*0.9, $fn=12);\n\n        // Jaw inner bevel\n        translate([clip_l, 0, 0])\n            rotate([0, 0, 20])\n                cube([clip_l, 50, 50], center=true);\n    }\n}\n\n// ---- Right handle (mirrored) ---------------------------------------------\nmodule right_handle() {\n    mirror([0, 1, 0])\n        left_handle();\n}\n\n// ---- Handle body ---------------------------------------------------------\nmodule handle_body() {\n    union() {\n        // Grip\n        translate([-clip_l/2, -15, 0])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=grip_d);\n\n        // Arm\n        translate([clip_l/2, 0, 0])\n            cube([clip_l, 10, 5], center=true);\n\n        // Reinforcement rib\n        translate([clip_l*0.75, 0, -2.5])\n            cube([clip_l/2, 8, 2.5]);\n    }\n}\n\n// ---- Coil spring ---------------------------------------------------------\nmodule coil_spring() {\n    // Central pivot cylinder\n    translate([0, 0, 0])\n        cylinder(h=wall*2, d=4);\n\n    // Spring coils\n    for (i = [0:359])\n        rotate([0, 0, i])\n            translate([spring_od/2, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=spring_w*1.2, d=spring_w);\n}\n\n// ---- Render --------------------------------------------------------------\nclip_tool();",
    "renders": true
  },
  {
    "tool": "tie",
    "openscad_code": "// Tie Tool - OpenSCAD\n// Realistic style, medium complexity\n\n// Color definitions\n$fn = 32;\n\n// Main dimensions (mm)\ntie_width = 25;\ntie_length = 80;\ntie_thickness = 6;\nhandle_length = 50;\nhandle_diameter = 12;\n\n// Colors\ntie_color = \"#2C3E50\";\nhandle_color = \"#34495E\";\ngrip_color = \"#7F8C8D\";\nmetal_color = \"#BDC3C7\";\n\n// Handle module with grip texture\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        cylinder(h = handle_length, d = handle_diameter);\n        \n        // Grip rings\n        color(grip_color) {\n            for(i = [0:6:handle_length-10]) {\n                translate([0, 0, i+5]) {\n                    difference() {\n                        cylinder(h = 3, d = handle_diameter + 2);\n                        cylinder(h = 3.5, d = handle_diameter - 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tie mechanism module\nmodule tie_mechanism() {\n    color(tie_color) {\n        // Main tie body\n        translate([0, 0, tie_thickness/2]) {\n            cube([tie_width, tie_length, tie_thickness], center = true);\n        }\n        \n        // Tapered end\n        translate([0, tie_length/2 + 5, tie_thickness/2]) {\n            scale([0.7, 1, 1]) {\n                cube([tie_width, 10, tie_thickness], center = true);\n            }\n        }\n        \n        // Tie adjustment slots\n        for(i = [1:3]) {\n            translate([0, -tie_length/2 + i*15, tie_thickness/2]) {\n                cube([tie_width * 0.6, 2, tie_thickness + 0.5], center = true);\n            }\n        }\n    }\n    \n    // Metal adjustment mechanism\n    color(metal_color) {\n        // Top plate\n        translate([0, tie_length/4, tie_thickness + 1]) {\n            cube([tie_width * 0.8, 20, 1], center = true);\n        }\n        \n        // Bottom plate\n        translate([0, -tie_length/4, -1]) {\n            cube([tie_width * 0.8, 20, 1], center = true);\n        }\n        \n        // Side rails\n        for(side = [-1, 1]) {\n            translate([side * (tie_width/2 + 1), 0, tie_thickness/2]) {\n                cube([2, tie_length + 10, tie_thickness], center = true);\n            }\n        }\n    }\n}\n\n// Assembly\nmodule tie_tool() {\n    // Handle\n    translate([0, -handle_length/2 - tie_length/2 - 5, 0]) {\n        rotate([0, 0, 0]) {\n            handle();\n        }\n    }\n    \n    // Connection piece\n    color(metal_color) {\n        translate([0, -tie_length/2 - 5, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 10, d = handle_diameter - 2);\n            }\n        }\n    }\n    \n    // Tie mechanism\n    translate([0, 0, 0]) {\n        rotate([0, 0, 0]) {\n            tie_mechanism();\n        }\n    }\n    \n    // Reinforcement ribs\n    color(tie_color) {\n        for(pos = [-tie_width/4, tie_width/4]) {\n            translate([pos, 0, tie_thickness + 2]) {\n                cube([3, tie_length * 0.8, 2], center = true);\n            }\n        }\n    }\n}\n\n// Render the complete tool\ntie_tool();",
    "renders": true
  },
  {
    "tool": "strap",
    "openscad_code": "// Strap tool (strap wrench) - medium complexity\n// Realistic style with functional features\n\n// Color definitions\n$fn = 32;\n\n// Main handle parameters\nhandle_length = 80;\nhandle_diameter = 12;\nhandle_inner_diameter = 8;\n\n// Strap parameters\nstrap_width = 15;\nstrap_thickness = 2;\nstrap_length = 60;\n\n// Ratchet mechanism parameters\nratchet_diameter = 20;\nratchet_thickness = 8;\npawl_thickness = 3;\npawl_length = 10;\n\n// Handle grip texture\nmodule grip_texture() {\n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        for (i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n            translate([handle_diameter/2 - 0.5, 0, -handle_length/2 - 1])\n            cube([1, 1, handle_length + 2], center=true);\n        }\n    }\n}\n\n// Main handle with hollow center\nmodule handle() {\n    color(\"darkslategray\")\n    difference() {\n        grip_texture();\n        translate([0, 0, 0])\n        cylinder(h=handle_length + 2, d=handle_inner_diameter, center=true);\n    }\n}\n\n// Ratchet wheel with teeth\nmodule ratchet_wheel() {\n    color(\"silver\")\n    union() {\n        cylinder(h=ratchet_thickness, d=ratchet_diameter, center=true);\n        for (i = [0:23]) {\n            rotate([0, 0, i * 15])\n            translate([ratchet_diameter/2 - 2, 0, 0])\n            cube([4, ratchet_thickness + 0.2, 2], center=true);\n        }\n    }\n}\n\n// Pawl mechanism\nmodule pawl() {\n    color(\"dimgray\")\n    union() {\n        // Pawl body\n        translate([ratchet_diameter/2 - 1, 0, 0])\n        cube([pawl_length, pawl_thickness, ratchet_thickness], center=true);\n        \n        // Pawl spring\n        translate([ratchet_diameter/2 + pawl_length/2, 0, 0])\n        cylinder(h=ratchet_thickness, d=3, center=true);\n    }\n}\n\n// Strap segment\nmodule strap_segment() {\n    color(\"brown\")\n    cube([strap_length, strap_width, strap_thickness], center=true);\n}\n\n// Strap holes for adjustment\nmodule strap_holes() {\n    for (i = [1:5]) {\n        translate([-strap_length/2 + i * 10, 0, 0])\n        cylinder(h=strap_thickness + 1, d=3, center=true);\n    }\n}\n\n// Complete strap assembly\nmodule strap() {\n    difference() {\n        strap_segment();\n        strap_holes();\n    }\n    \n    // Strap end reinforcement\n    translate([-strap_length/2 - 3, 0, 0])\n    cube([6, strap_width + 2, strap_thickness + 1], center=true);\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    color(\"gray\")\n    union() {\n        // Main bracket\n        translate([ratchet_diameter/2 + 5, 0, 0])\n        cube([10, 20, ratchet_thickness + 4], center=true);\n        \n        // Mounting holes\n        translate([ratchet_diameter/2 + 5, 7, 0])\n        cylinder(h=ratchet_thickness + 5, d=3, center=true);\n        translate([ratchet_diameter/2 + 5, -7, 0])\n        cylinder(h=ratchet_thickness + 5, d=3, center=true);\n    }\n}\n\n// Assembly\nmodule strap_tool() {\n    // Handle\n    handle();\n    \n    // Ratchet mechanism\n    translate([0, 0, handle_length/2 + ratchet_thickness/2 + 2])\n    union() {\n        ratchet_wheel();\n        \n        // Pawl\n        translate([0, ratchet_diameter/2 + 2, 0])\n        rotate([0, 0, 30])\n        pawl();\n    }\n    \n    // Strap attachment\n    translate([0, 0, handle_length/2 + ratchet_thickness + 4])\n    rotate([90, 0, 0])\n    translate([0, 0, ratchet_diameter/2])\n    strap();\n    \n    // Mounting bracket\n    translate([0, 0, handle_length/2 + ratchet_thickness/2 + 2])\n    mounting_bracket();\n}\n\n// Render the complete tool\nstrap_tool();",
    "renders": true
  },
  {
    "tool": "cord",
    "openscad_code": "// Cord Tool - Realistic Style, Medium Complexity\n// A compact cord winding tool with ergonomic handle and storage compartment\n\n// Main parameters\ncord_diameter = 3;\nhandle_length = 80;\nhandle_diameter = 25;\ncore_diameter = 15;\nspool_width = 35;\nwall_thickness = 2;\n\n// Color definitions\nhandle_color = \"DarkSlateGray\";\ncore_color = \"SaddleBrown\";\nmetal_color = \"Silver\";\n\n// Ergonomic handle with grip pattern\nmodule handle() {\n    color(handle_color) {\n        // Main handle cylinder\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter, $fn=48);\n            \n            // Cutout for finger grip\n            translate([0, 0, handle_length/2])\n                cube([handle_diameter * 0.6, handle_diameter * 0.8, handle_length * 0.4], center=true);\n        }\n        \n        // Grip rings\n        for(i = [1:3:handle_length-10]) {\n            translate([0, 0, i])\n                cylinder(h=2, d1=handle_diameter, d2=handle_diameter - 2, $fn=32);\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n            cylinder(h=5, d=handle_diameter + 2, $fn=32);\n    }\n}\n\n// Cord spool mechanism\nmodule spool() {\n    color(core_color) {\n        // Central core\n        cylinder(h=spool_width, d=core_diameter, $fn=32);\n        \n        // End flanges\n        for(side = [-1, 1]) {\n            translate([0, 0, side * (spool_width/2 + wall_thickness)])\n                cylinder(h=wall_thickness, d=core_diameter + 15, $fn=32);\n        }\n        \n        // Cord entry slot\n        translate([0, core_diameter/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=spool_width, d=cord_diameter + 1, $fn=16);\n    }\n}\n\n// Cutting blade housing\nmodule cutter() {\n    color(metal_color) {\n        // Blade housing\n        translate([0, handle_diameter/2 + 5, handle_length - 15])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=12, d=8, $fn=24);\n                    translate([0, 0, -1])\n                        cube([6, 2, 14], center=true);\n                }\n        \n        // Blade (recessed for safety)\n        translate([0, handle_diameter/2 + 5, handle_length - 15])\n            rotate([90, 0, 0])\n                translate([0, 0, 6])\n                    cube([5, 0.5, 3], center=true);\n    }\n}\n\n// Cord guide mechanism\nmodule cord_guide() {\n    color(metal_color) {\n        // Guide arm\n        translate([0, -handle_diameter/2 - 10, handle_length/2])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=20, d=6, $fn=24);\n                    translate([0, 0, -1])\n                        cube([4, 4, 22], center=true);\n                }\n        \n        // Guide rollers\n        for(pos = [5, 15]) {\n            translate([0, -handle_diameter/2 - 10 - pos, handle_length/2])\n                rotate([90, 0, 0])\n                    cylinder(h=4, d=4, $fn=16);\n        }\n    }\n}\n\n// Assembly\nhandle();\ntranslate([0, 0, handle_length/2 + 5])\n    spool();\ncutter();\ncord_guide();\n\n// Storage compartment cap\ncolor(handle_color) {\n    translate([0, 0, -handle_length/2 - 5])\n        difference() {\n            cylinder(h=8, d=handle_diameter - 4, $fn=32);\n            translate([0, 0, 4])\n                cylinder(h=4, d=handle_diameter - 8, $fn=32);\n        }\n}\n\n// Reinforcement ribs\nfor(angle = [0:120:240]) {\n    rotate([0, 0, angle])\n        translate([0, handle_diameter/2 - 3, handle_length/2])\n            cube([wall_thickness * 2, 6, handle_length - 10], center=true);\n}",
    "renders": true
  },
  {
    "tool": "rope",
    "openscad_code": "// Rope Tool - Realistic Style\n// Medium complexity with realistic details for 3D printing\n\n// Overall dimensions\ntool_length = 90;\ntool_width = 25;\ntool_height = 15;\n\n// Handle parameters\nhandle_length = 45;\nhandle_diameter = 12;\ngrip_depth = 0.8;\n\n// Blade parameters\nblade_length = 35;\nblade_width = 20;\nblade_thickness = 2;\n\n// Rope channel parameters\nchannel_radius = 4;\nchannel_depth = 6;\n\n// Colors\nhandle_color = [0.2, 0.2, 0.2]; // Dark gray\nblade_color = [0.7, 0.7, 0.7];  // Light gray\ngrip_color = [0.1, 0.1, 0.1];   // Black\n\n// Main assembly\nmodule rope_tool() {\n    difference() {\n        union() {\n            // Handle with grip texture\n            color(handle_color)\n            translate([0, 0, 0])\n                handle_with_grip();\n            \n            // Blade with rope channel\n            color(blade_color)\n            translate([handle_length - 5, 0, 0])\n                blade_with_channel();\n            \n            // Reinforcement between handle and blade\n            color(handle_color)\n            translate([handle_length - 8, 0, 0])\n                reinforcement();\n        }\n        \n        // Remove cutting edge chamfer\n        translate([handle_length + blade_length - 2, 0, -1])\n            rotate([0, 45, 0])\n            cube([5, blade_width + 2, 10]);\n    }\n}\n\n// Handle with grip texture\nmodule handle_with_grip() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        \n        // Grip rings\n        for(i = [5:8:handle_length - 10]) {\n            translate([0, 0, i])\n                cylinder(h = grip_depth, d = handle_diameter + 0.5, $fn = 32);\n        }\n    }\n    \n    // Grip texture dots\n    color(grip_color)\n    for(i = [8:8:handle_length - 10]) {\n        rotate([0, 0, 0])\n        for(j = [0:30:330]) {\n            rotate([0, 0, j])\n            translate([handle_diameter/2 - 0.5, 0, i + grip_depth/2])\n                sphere(d = 1.5, $fn = 8);\n        }\n    }\n}\n\n// Blade with rope channel\nmodule blade_with_channel() {\n    difference() {\n        // Main blade\n        cube([blade_length, blade_width, blade_thickness]);\n        \n        // Rope channel\n        translate([blade_length/2, 0, blade_thickness/2])\n            rotate([90, 0, 0])\n            cylinder(h = blade_width + 2, r = channel_radius, $fn = 32);\n        \n        // Secondary guide channel\n        translate([blade_length/2 - 10, 0, blade_thickness/2])\n            rotate([90, 0, 0])\n            cylinder(h = blade_width/2, r = channel_radius - 1, $fn = 32);\n    }\n    \n    // Cutting edge indicator\n    color([0.9, 0.9, 0.9])\n    translate([blade_length - 1, 0, blade_thickness/2])\n        cube([0.5, blade_width, blade_thickness]);\n}\n\n// Reinforcement between handle and blade\nmodule reinforcement() {\n    hull() {\n        translate([0, -handle_diameter/2, 0])\n            cube([5, handle_diameter, 5]);\n        translate([0, -blade_width/2, -2])\n            cube([5, blade_width, 2]);\n    }\n}\n\n// Render the tool\nrope_tool();",
    "renders": true
  },
  {
    "tool": "chain",
    "openscad_code": "// Chain Tool - Bicycle Chain Breaker\n// Medium complexity realistic style\n\n// Overall dimensions\n$fn = 30;\n\n// Main body parameters\nbody_length = 80;\nbody_width = 15;\nbody_height = 12;\nhandle_length = 60;\nhandle_diameter = 12;\n\n// Pin parameters\npin_diameter = 3;\npin_length = 25;\npin_head_diameter = 6;\n\n// Chain cradle parameters\ncradle_width = 8;\ncradle_depth = 4;\ncradle_radius = 4;\n\n// Thread parameters\nthread_diameter = 8;\nthread_length = 30;\nthread_pitch = 1.5;\n\nmodule main_body() {\n    color(\"silver\")\n    difference() {\n        // Main rectangular body\n        translate([0, 0, body_height/2])\n            cube([body_length, body_width, body_height], center=true);\n        \n        // Chain cradle cutout\n        translate([body_length/4, 0, body_height/2])\n            cube([cradle_width, body_width + 2, cradle_depth + 2], center=true);\n        \n        // Thread hole\n        translate([-body_length/4, 0, body_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=body_width + 2, d=thread_diameter + 1, center=true);\n        \n        // Pin guide hole\n        translate([body_length/4, 0, body_height])\n            rotate([0, 0, 0])\n                cylinder(h=body_height + 2, d=pin_diameter + 0.5, center=false);\n    }\n}\n\nmodule handle() {\n    color(\"darkslategray\")\n    union() {\n        // Handle grip\n        translate([-handle_length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Threaded shaft\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=thread_length, d=thread_diameter, center=false);\n        \n        // Handle end cap\n        translate([-handle_length - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=5, d=handle_diameter + 2, center=false);\n    }\n}\n\nmodule pin_assembly() {\n    color(\"silver\")\n    union() {\n        // Pin shaft\n        translate([body_length/4, 0, body_height + pin_length/2])\n            cylinder(h=pin_length, d=pin_diameter, center=true);\n        \n        // Pin head\n        translate([body_length/4, 0, body_height + pin_length])\n            cylinder(h=3, d=pin_head_diameter, center=false);\n    }\n}\n\nmodule chain_support() {\n    color(\"silver\")\n    union() {\n        // Left support\n        translate([body_length/4 - cradle_width/2 - 2, 0, cradle_depth/2])\n            cube([2, body_width - 4, cradle_depth], center=true);\n        \n        // Right support\n        translate([body_length/4 + cradle_width/2 + 2, 0, cradle_depth/2])\n            cube([2, body_width - 4, cradle_depth], center=true);\n        \n        // Bottom support bridge\n        translate([body_length/4, 0, cradle_depth - 1])\n            cube([cradle_width + 8, body_width - 6, 2], center=true);\n    }\n}\n\nmodule handle_grip_texture() {\n    color(\"darkslategray\")\n    for(i = [0:5:handle_length-10]) {\n        translate([-i - 10, 0, 0])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=2, d=handle_diameter + 0.5, center=true);\n                    cylinder(h=3, d=handle_diameter - 0.5, center=true);\n                }\n    }\n}\n\nmodule body_markings() {\n    color(\"black\")\n    // Size markings\n    translate([body_length/2 + 2, body_width/2 - 2, body_height + 1])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"8-10sp\", size=2);\n    \n    // Brand marking\n    translate([-body_length/2 + 5, body_width/2 - 2, body_height + 1])\n        rotate([90, 0, 0])\n            linear_extrude(height=0.5)\n                text(\"CT-5\", size=2);\n}\n\n// Assembly\nmain_body();\npin_assembly();\nchain_support();\ntranslate([body_length/4 + thread_length/2, 0, 0])\n    rotate([0, 0, 90])\n    handle();\nhandle_grip_texture();\nbody_markings();",
    "renders": true
  },
  {
    "tool": "hook",
    "openscad_code": "// Hook Tool - Realistic Style, Medium Complexity\n// Overall dimensions: ~85mm L x 25mm W x 20mm H\n// 3D-printable, no support needed\n\n// Color definitions\n$fn = 32;\n\n// Main handle module\nmodule handle() {\n    // Ergonomic grip with finger grooves\n    difference() {\n        // Main handle body\n        color(\"saddlebrown\") {\n            hull() {\n                translate([-5, 0, 0]) cylinder(h=60, d=20);\n                translate([5, 0, 0]) cylinder(h=60, d=20);\n            }\n        }\n        \n        // Finger grooves\n        for(i = [0:1:3]) {\n            translate([0, 0, 10 + i*12])\n                rotate([90, 0, 0])\n                    cylinder(h=25, d1=18, d2=12, $fn=6);\n        }\n        \n        // Hanging hole\n        translate([0, 0, 55])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=6);\n    }\n    \n    // Grip texture rings\n    for(i = [0:1:4]) {\n        color(\"darkgoldenrod\") {\n            translate([0, 0, 5 + i*12])\n                difference() {\n                    cylinder(h=2, d=22);\n                    cylinder(h=3, d=18);\n                }\n        }\n    }\n}\n\n// Hook shaft module\nmodule shaft() {\n    color(\"silver\") {\n        // Tapered shaft\n        hull() {\n            translate([0, 0, 0]) cylinder(h=15, d=12);\n            translate([0, 0, -25]) cylinder(h=15, d=8);\n        }\n        \n        // Reinforcement ring\n        translate([0, 0, -12])\n            cylinder(h=5, d=14);\n    }\n}\n\n// Hook tip module\nmodule hook_tip() {\n    color(\"silver\") {\n        // Curved hook\n        difference() {\n            // Main hook body\n            rotate([0, 90, 0]) {\n                translate([0, 0, 0])\n                    rotate_extrude(angle=200) {\n                        translate([20, 0]) circle(d=8);\n                        translate([15, 0]) circle(d=8);\n                    }\n            }\n            \n            // Inner curve\n            rotate([0, 90, 0]) {\n                translate([0, 0, 0])\n                    rotate_extrude(angle=200) {\n                        translate([15, 0]) circle(d=4);\n                        translate([12, 0]) circle(d=4);\n                    }\n            }\n        }\n        \n        // Sharp point\n        translate([0, -22, -6])\n            rotate([0, 0, -20])\n                cylinder(h=15, d1=2, d2=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0]) handle();\n    \n    // Shaft\n    translate([0, 0, 60]) shaft();\n    \n    // Hook tip\n    translate([0, 0, 35]) hook_tip();\n    \n    // Safety guard ring\n    color(\"darkgray\") {\n        translate([0, 0, 30])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=15, d=20);\n                    cylinder(h=16, d=16);\n                }\n    }\n}",
    "renders": true
  },
  {
    "tool": "hanger",
    "openscad_code": "// Hanger Tool - Realistic Medium Complexity\n// A functional 3D printable hanger with hook, body, and grip features\n\n// Color definitions\ncolor_clothes = [0.8, 0.2, 0.2];  // Red hanger body\ncolor_hook = [0.7, 0.7, 0.7];    // Metallic hook\ncolor_grip = [0.1, 0.1, 0.1];    // Black rubber grips\n\n// Overall dimensions (mm)\nhook_height = 35;\nhook_radius = 4;\nbody_width = 80;\nbody_thickness = 6;\nbody_height = 15;\ngrip_width = 15;\ngrip_depth = 3;\n\n// Hook module - smooth curved hook for hanging\nmodule hook() {\n    color(color_hook)\n    translate([0, 0, hook_height + body_height/2]) {\n        // Main hook curve\n        rotate([0, 90, 0])\n        cylinder(h=hook_height, r1=hook_radius, r2=hook_radius, $fn=32);\n        \n        // Hook tip\n        translate([hook_height, 0, 0])\n        sphere(r=hook_radius, $fn=32);\n        \n        // Hook base transition\n        translate([0, 0, -hook_radius])\n        cylinder(h=hook_radius*2, r=hook_radius*1.2, r2=hook_radius, $fn=32);\n    }\n}\n\n// Body module - main hanger structure with shoulders\nmodule body() {\n    color(color_clothes)\n    translate([0, 0, body_height/2]) {\n        // Central body\n        cube([body_width, body_thickness, body_height], center=true);\n        \n        // Left shoulder extension\n        translate([-body_width/2 - 5, 0, body_height/4])\n        cube([10, body_thickness, body_height/2], center=true);\n        \n        // Right shoulder extension\n        translate([body_width/2 + 5, 0, body_height/4])\n        cube([10, body_thickness, body_height/2], center=true);\n        \n        // Shoulder curves\n        for (i = [-1, 1]) {\n            translate([i * (body_width/2 + 5), 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=body_thickness, r=5, $fn=32);\n        }\n    }\n}\n\n// Grip module - non-slip rubber grips\nmodule grips() {\n    color(color_grip)\n    difference() {\n        // Left grip\n        translate([-body_width/2 + 10, 0, 0])\n        cube([grip_width, body_thickness + 1, body_height], center=true);\n        \n        // Grip texture pattern\n        for (i = [0:3]) {\n            translate([-body_width/2 + 10, 0, -body_height/2 + 2 + i*3])\n            cube([grip_width, body_thickness + 2, 0.5], center=true);\n        }\n    }\n    \n    difference() {\n        // Right grip\n        translate([body_width/2 - 10, 0, 0])\n        cube([grip_width, body_thickness + 1, body_height], center=true);\n        \n        // Grip texture pattern\n        for (i = [0:3]) {\n            translate([body_width/2 - 10, 0, -body_height/2 + 2 + i*3])\n            cube([grip_width, body_thickness + 2, 0.5], center=true);\n        }\n    }\n}\n\n// Notches for straps - small V-cuts at ends\nmodule strap_notches() {\n    color(color_clothes)\n    for (i = [-1, 1]) {\n        translate([i * (body_width/2 + 5), 0, body_height/4])\n        rotate([0, 0, i * 45])\n        cube([3, body_thickness + 2, body_height/2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    hook();\n    body();\n    grips();\n    strap_notches();\n}\n\n// Print orientation - lay flat\nrotate([90, 0, 0])\ntranslate([0, 0, -body_height/2])\ncube([body_width + 20, body_thickness + 10, body_height], center=true);",
    "renders": true
  },
  {
    "tool": "bracket",
    "openscad_code": "// Adjustable bracket tool - realistic OpenSCAD model\n// Medium complexity with functional features\n\n// Main parameters\nbracket_width = 80;\nbracket_height = 60;\nbracket_thickness = 8;\nslot_width = 10;\nslot_height = 30;\nhandle_length = 40;\nhandle_diameter = 12;\n\n// Colors\n$fn = 50;\n\nmodule bracket_base() {\n    difference() {\n        // Main bracket body\n        color([0.7, 0.7, 0.7]) \n        cube([bracket_width, bracket_thickness, bracket_height], center=true);\n        \n        // Central slot for adjustment\n        translate([0, bracket_thickness/2 + 0.1, 0])\n        color([0, 0, 0])\n        cube([slot_width, bracket_thickness + 1, slot_height], center=true);\n        \n        // Mounting holes - left\n        translate([-bracket_width/4, bracket_thickness/2 + 0.1, bracket_height/3])\n        rotate([90, 0, 0])\n        cylinder(h=bracket_thickness + 2, d=4, center=true);\n        \n        // Mounting holes - right\n        translate([bracket_width/4, bracket_thickness/2 + 0.1, bracket_height/3])\n        rotate([90, 0, 0])\n        cylinder(h=bracket_thickness + 2, d=4, center=true);\n        \n        // Reinforcement cutouts\n        translate([-bracket_width/3, bracket_thickness/2 + 0.1, -bracket_height/4])\n        cube([8, bracket_thickness + 1, 6], center=true);\n        \n        translate([bracket_width/3, bracket_thickness/2 + 0.1, -bracket_height/4])\n        cube([8, bracket_thickness + 1, 6], center=true);\n    }\n}\n\nmodule handle() {\n    // Handle grip\n    translate([0, 0, bracket_height/2 + handle_length/2])\n    rotate([90, 0, 0])\n    color([0.1, 0.1, 0.1])\n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip texture - knurled pattern\n        for(i = [0:5:handle_length-5]) {\n            translate([0, 0, -handle_length/2 + i])\n            rotate([0, 0, 45])\n            cube([handle_diameter*0.8, handle_diameter*0.8, 2], center=true);\n        }\n    }\n    \n    // Handle collar\n    translate([0, 0, bracket_height/2])\n    color([0.8, 0.8, 0.8])\n    cylinder(h=6, d=16, center=true);\n}\n\nmodule reinforcement_ribs() {\n    // Side ribs for strength\n    translate([bracket_width/2 - 4, 0, 0])\n    color([0.6, 0.6, 0.6])\n    cube([8, bracket_thickness + 4, bracket_height], center=true);\n    \n    translate([-bracket_width/2 + 4, 0, 0])\n    color([0.6, 0.6, 0.6])\n    cube([8, bracket_thickness + 4, bracket_height], center=true);\n    \n    // Bottom rib\n    translate([0, 0, -bracket_height/2 + 4])\n    color([0.6, 0.6, 0.6])\n    cube([bracket_width - 8, bracket_thickness + 4, 8], center=true);\n}\n\nmodule measurement_markings() {\n    // Markings along the slot edge\n    for(i = [-1:0.2:1]) {\n        translate([slot_width/2 + 2, bracket_thickness/2 + 0.1, i * slot_height/2])\n        color([0, 0, 0])\n        cube([1, bracket_thickness + 0.2, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    bracket_base();\n    handle();\n    reinforcement_ribs();\n    measurement_markings();\n    \n    // Additional mounting features\n    translate([0, 0, bracket_height/3])\n    color([0.5, 0.5, 0.5])\n    cube([slot_width + 4, bracket_thickness + 2, 4], center=true);\n}",
    "renders": true
  },
  {
    "tool": "shelf",
    "openscad_code": "// Shelf Tool - OpenSCAD\n// A medium-complexity realistic shelf tool for 3D printing\n\n// Tool dimensions (in mm)\ntool_length = 85;\ntool_width = 12;\ntool_height = 8;\nhandle_length = 35;\nblade_length = 50;\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Main handle with ergonomic grip\nmodule handle() {\n    color(\"dimgray\") {\n        // Main handle body\n        translate([0, 0, -tool_height/2]) {\n            cube([handle_length, tool_width, tool_height], center=false);\n        }\n        \n        // Grip texture - horizontal ridges\n        for(i = [2:4:handle_length-6]) {\n            translate([i, 0, -tool_height/2]) {\n                cube([2, tool_width, tool_height*0.8], center=false);\n            }\n        }\n        \n        // End cap\n        translate([handle_length-2, 0, -tool_height/2]) {\n            difference() {\n                cube([2, tool_width, tool_height], center=false);\n                translate([1, 1, 1]) {\n                    cube([wall*2, tool_width-2, tool_height-2], center=false);\n                }\n            }\n        }\n    }\n}\n\n// Blade with measurement markings\nmodule blade() {\n    color(\"silver\") {\n        // Main blade\n        translate([handle_length, 0, -tool_height/4]) {\n            cube([blade_length, tool_width/2, tool_height/2], center=false);\n        }\n        \n        // Reinforcement spine\n        translate([handle_length-2, tool_width/4, -tool_height/4]) {\n            cube([blade_length+2, 1, tool_height/2], center=false);\n        }\n        \n        // Measurement markings (every 5mm)\n        for(i = [5:5:blade_length-5]) {\n            translate([handle_length+i, -tool_width/4, -tool_height/4]) {\n                cube([0.5, tool_width/2, tool_height/10], center=false);\n            }\n        }\n        \n        // Main measurement lines (10mm)\n        for(i = [10:10:blade_length-10]) {\n            translate([handle_length+i, -tool_width/4, -tool_height/4]) {\n                cube([0.5, tool_width/2, tool_height/6], center=false);\n            }\n        }\n    }\n}\n\n// Hook mechanism for shelf marking\nmodule hook() {\n    color(\"black\") {\n        // Hook pivot point\n        translate([handle_length+blade_length-8, tool_width/4, tool_height/4]) {\n            cylinder(h=3, r=2);\n        }\n        \n        // Hook blade\n        translate([handle_length+blade_length-8, tool_width/4, tool_height/4]) {\n            rotate([0, 0, -45]) {\n                difference() {\n                    cube([8, 2, 1], center=true);\n                    translate([3, 0, 0]) {\n                        cylinder(h=2.2, r=1, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Level bubble\nmodule level() {\n    color(\"skyblue\") {\n        translate([handle_length/2, tool_width/2+1, tool_height/4]) {\n            difference() {\n                sphere(r=3);\n                sphere(r=2.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    blade();\n    hook();\n    level();\n    \n    // Hanging hole\n    translate([-5, tool_width/2, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=tool_width, r=2.5);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "rack",
    "openscad_code": "// Rack Tool - Realistic Style, Medium Complexity\n// A 3D printable rack tool with handle and toothed blade\n\n// Color definitions\nrack_color = \"Silver\";\nhandle_color = \"DarkGray\";\n\n// Main dimensions (mm)\nrack_length = 80;\nrack_height = 25;\nrack_width = 12;\nhandle_length = 40;\nhandle_diameter = 15;\ntooth_count = 20;\ntooth_height = 8;\ntooth_width = 3;\n\n// Handle module with grip texture\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Main handle cylinder\n        translate([rack_length/2 + handle_length/2 - 5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = handle_length, d = handle_diameter, $fn = 32);\n        \n        // Grip rings\n        for(i = [0:4]) {\n            translate([rack_length/2 + 5 + i * 8, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 2, d1 = handle_diameter + 2, d2 = handle_diameter, $fn = 32);\n        }\n    }\n}\n\n// Tooth module for cutting edge\nmodule tooth(pos) {\n    translate([pos, 0, rack_height/2])\n        cube([tooth_width, rack_width, tooth_height], center = true);\n}\n\n// Main rack body with tapered end\nmodule rack_body() {\n    color(rack_color)\n    union() {\n        // Main rectangular body\n        translate([0, 0, rack_height/2])\n            cube([rack_length - 10, rack_width, rack_height], center = false);\n        \n        // Tapered end\n        hull() {\n            translate([rack_length - 10, rack_width/2, rack_height/2])\n                sphere(d = rack_width);\n            translate([rack_length, rack_width/2, rack_height/2])\n                sphere(d = rack_width/2);\n        }\n        \n        // Reinforcement ridge\n        translate([rack_length/2, 0, rack_height + 1])\n            cube([rack_length, rack_width + 2, 2], center = true);\n    }\n}\n\n// Cutting teeth along bottom edge\nmodule cutting_teeth() {\n    color(rack_color)\n    for(i = [0:tooth_count-1]) {\n        tooth(i * (rack_length - 20)/tooth_count + 10);\n    }\n}\n\n// Assembly\nunion() {\n    rack_body();\n    cutting_teeth();\n    handle();\n    \n    // Alignment pin hole\n    translate([rack_length - 15, 0, rack_height/2])\n        rotate([90, 0, 0])\n            cylinder(h = rack_width + 2, d = 3, center = true, $fn = 16);\n}",
    "renders": true
  },
  {
    "tool": "stand",
    "openscad_code": "// Realistic Medium-Complexity Adjustable Wrench Stand\n// 3D-printable wall-mounted wrench holder\n\n// Overall dimensions (fits 50-100mm tools)\nstand_width = 80;\nstand_height = 65;\nstand_depth = 30;\nwall_thickness = 3;\nslot_clearance = 1.5;\ncolor(\"DimGray\") {\n\ndifference() {\n    // Main stand block\n    cube([stand_width, stand_depth, stand_height], center=false);\n    \n    // Central wrench slot (tapered to match wrench profile)\n    translate([stand_width/2, stand_depth/2 - wall_thickness/2, 10])\n        rotate([0, 90, 0])\n            cylinder(h=stand_width - 2*wall_thickness, \n                     r1=4 + slot_clearance, \n                     r2=6 + slot_clearance, \n                     $fn=32);\n    \n    // Screw-mount holes (2x)\n    for(x=[stand_width*0.25, stand_width*0.75])\n        translate([x, stand_depth/2, stand_height - 5])\n            rotate([180, 0, 0])\n                cylinder(h=stand_depth, r=2.5, $fn=16);\n}\n\n// Reinforcement ribs\nmodule rib(x) {\n    translate([x, 0, 0])\n        cube([1, stand_depth, stand_height - 10]);\n}\nrib(5); rib(stand_width - 5);\n\n// Tool-specific grip pads (rubber-like)\ncolor(\"DarkGray\") {\n    for(y=[stand_depth*0.3, stand_depth*0.7]) {\n        translate([stand_width*0.4, y, 5])\n            cube([10, 2, 5]);\n        translate([stand_width*0.6, y, 5])\n            cube([10, 2, 5]);\n    }\n}\n\n// Wrench jaw detail (decorative)\ncolor(\"Silver\") {\n    translate([stand_width/2 - 12, stand_depth - wall_thickness - 2, 15])\n        cube([24, 4, 8]);\n    translate([stand_width/2 - 10, stand_depth - wall_thickness - 2.5, 17])\n        cube([20, 1, 4]);\n}\n\n// Mounting label recess\ntranslate([stand_width/2 - 15, 0, stand_height - 8])\n    cube([30, 1, 6]);\n}",
    "renders": true
  },
  {
    "tool": "bench",
    "openscad_code": "// Bench Vise - Medium Complexity Realistic Style\n// Overall size: ~80mm width, 30mm depth, 35mm height\n\n// Color definitions\n$fn = 32;\n\n// Main vise body\nmodule vise_body() {\n    color(\"gray40\") {\n        // Base plate\n        translate([0, 0, 0]) cube([80, 30, 4], center=true);\n        \n        // Rear support block\n        translate([-30, 0, 9.5]) cube([18, 26, 11], center=true);\n        \n        // Front fixed jaw\n        translate([30, 0, 9.5]) cube([20, 28, 11], center=true);\n    }\n}\n\n// Movable jaw assembly\nmodule movable_jaw() {\n    color(\"gray35\") {\n        // Main jaw block\n        translate([5, 0, 9.5]) cube([18, 28, 11], center=true);\n        \n        // Jaw face with ridges\n        difference() {\n            translate([14, 0, 9.5]) cube([3, 28, 11], center=true);\n            for(i = [-10:5:10]) {\n                translate([15.5, i, 9.5]) cube([1, 2, 9], center=true);\n            }\n        }\n    }\n}\n\n// Lead screw mechanism\nmodule lead_screw() {\n    color(\"silver\") {\n        // Threaded rod\n        rotate([0, 90, 0]) \n            translate([-40, 0, 0]) \n                cylinder(h=80, r=3, center=true);\n        \n        // Handle\n        translate([-35, 0, 9.5]) {\n            // Handle grip\n            rotate([0, 90, 0]) \n                cylinder(h=20, r=4, center=true);\n            \n            // Handle arms\n            for(i = [0:120:359]) {\n                rotate([0, 0, i]) \n                    translate([10, 0, 0]) \n                        cube([15, 2, 2], center=true);\n            }\n        }\n    }\n}\n\n// Guide rods\nmodule guide_rods() {\n    color(\"gray30\") {\n        for(y = [-10, 10]) {\n            translate([-10, y, 5]) \n                rotate([0, 90, 0]) \n                    cylinder(h=60, r=2, center=true);\n        }\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    color(\"black\") {\n        for(x = [-35, -15, 15, 35]) {\n            for(y = [-10, 10]) {\n                translate([x, y, 0]) \n                    cylinder(h=5, r=2.5, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    vise_body();\n    movable_jaw();\n    lead_screw();\n    guide_rods();\n    \n    difference() {\n        cube([80, 30, 4], center=true);\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "tool": "chair",
    "openscad_code": "// Chair tool - 3D printable miniature chair\n// Realistic style with medium complexity\n// Overall size: ~60mm tall (scaled for 3D printing)\n\n// Color constants\n$chair_color = \"Brown\";\n$metal_color = \"Silver\";\n\n// Main chair assembly\nmodule chair() {\n    union() {\n        // Seat\n        color($chair_color)\n        translate([0, 0, 30])\n        cube([40, 40, 4], center = true);\n        \n        // Backrest\n        color($chair_color)\n        translate([0, -15, 45])\n        cube([38, 3, 30], center = true);\n        \n        // Backrest slats\n        for(i = [-15, -5, 5, 15]) {\n            color($chair_color)\n            translate([i, -15, 45])\n            cube([3, 3, 25], center = true);\n        }\n        \n        // Legs\n        leg_positions = [[-15, -15], [15, -15], [-15, 15], [15, 15]];\n        for(pos = leg_positions) {\n            color($chair_color)\n            translate([pos[0], pos[1], 15])\n            cylinder(h = 30, d = 6, center = true);\n        }\n        \n        // Support bars between legs\n        color($chair_color)\n        translate([0, -15, 15])\n        cube([34, 4, 4], center = true);\n        \n        color($chair_color)\n        translate([0, 15, 15])\n        cube([34, 4, 4], center = true);\n        \n        color($chair_color)\n        translate([-15, 0, 15])\n        cube([4, 34, 4], center = true);\n        \n        color($chair_color)\n        translate([15, 0, 15])\n        cube([4, 34, 4], center = true);\n        \n        // Armrests\n        color($chair_color)\n        translate([-22, 0, 40])\n        cube([4, 30, 4], center = true);\n        \n        color($chair_color)\n        translate([22, 0, 40])\n        cube([4, 30, 4], center = true);\n        \n        // Armrest supports\n        color($chair_color)\n        translate([-22, -15, 35])\n        cylinder(h = 10, d = 4, center = true);\n        \n        color($chair_color)\n        translate([22, -15, 35])\n        cylinder(h = 10, d = 4, center = true);\n        \n        // Cross support under seat\n        color($metal_color)\n        translate([0, 0, 28])\n        cube([36, 36, 1], center = true);\n        \n        // Screw heads for realistic detail\n        screw_positions = [[-12, -12], [12, -12], [-12, 12], [12, 12]];\n        for(pos = screw_positions) {\n            color($metal_color)\n            translate([pos[0], pos[1], 29.5])\n            cylinder(h = 1, d = 3, $fn = 6);\n        }\n    }\n}\n\n// Scale for 3D printing (60mm tall)\nscale(1.2)\nchair();",
    "renders": true
  },
  {
    "tool": "seat",
    "openscad_code": "// Seat Tool - OpenSCAD Code\n// A realistic 3D printable seat tool for positioning and adjusting bicycle seats\n\n// Color definitions\n$fn = 50;\n\n// Main module\nmodule seat_tool() {\n    color(\"silver\") {\n        // Handle assembly\n        handle();\n        \n        // Tool head with wrench and socket\n        tool_head();\n        \n        // Grip texture on handle\n        grip_texture();\n    }\n}\n\n// Handle module\nmodule handle() {\n    // Main handle tube\n    cylinder(h=80, d=12, center=false);\n    \n    // Handle end cap\n    translate([0, 0, 80])\n        cylinder(h=5, d=15, center=false);\n    \n    // Transition to tool head\n    translate([0, 0, -5])\n        cylinder(h=10, d1=12, d2=16, center=false);\n}\n\n// Tool head module\nmodule tool_head() {\n    // Main tool head body\n    translate([0, 0, -15])\n        cube([30, 14, 10], center=true);\n    \n    // 6mm hex socket for seat bolts\n    translate([0, 0, -20])\n        rotate([0, 0, 0])\n            difference() {\n                cylinder(h=8, d=12, center=false);\n                cylinder(h=10, d=6.2, center=false);\n            }\n    \n    // 13mm open wrench for seat rails\n    translate([-10, 0, -25])\n        rotate([0, 90, 0])\n            difference() {\n                cube([20, 6, 3], center=true);\n                translate([0, 0, 1.5])\n                    cube([18, 4.2, 3], center=true);\n            }\n    \n    // Reinforcement gusset\n    translate([0, 0, -10])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=20, d=20, center=true);\n                translate([0, 0, -10.1])\n                    cube([30, 30, 20], center=true);\n            }\n}\n\n// Grip texture module\nmodule grip_texture() {\n    // Knurled grip pattern\n    for(i = [10:5:70]) {\n        color(\"black\") {\n            translate([0, 0, i])\n                rotate([0, 0, 0])\n                    difference() {\n                        cylinder(h=2, d=12.5, center=false);\n                        for(j = [0:30:360]) {\n                            rotate([0, 0, j])\n                                translate([0, -6.5, -0.1])\n                                    cube([1, 13, 2.2], center=false);\n                        }\n                    }\n        }\n    }\n}\n\n// Generate the tool\nseat_tool();",
    "renders": true
  },
  {
    "tool": "stool",
    "openscad_code": "// Stool Tool - Realistic Style, Medium Complexity\n// A functional miniature stool with tool-like features\n\n// Overall dimensions\nstool_height = 70;\nseat_diameter = 40;\nleg_length = 55;\nleg_thickness = 6;\n\n// Colors\nseat_color = [0.8, 0.6, 0.4]; // Wood brown\nleg_color = [0.5, 0.5, 0.5]; // Metal gray\ntool_color = [0.7, 0.7, 0.7]; // Tool steel\n\n// Main stool assembly\nmodule stool() {\n    // Seat with tool storage cavity\n    union() {\n        difference() {\n            // Main seat\n            color(seat_color)\n            cylinder(h=8, d=seat_diameter+4, $fn=60);\n            \n            // Tool storage cavity\n            translate([0, 0, -1])\n            cylinder(h=10, d=seat_diameter-10, $fn=60);\n            \n            // Grip holes around edge\n            for(i=[0:5:360]) {\n                rotate([0, 0, i])\n                translate([seat_diameter/2-3, 0, 2])\n                rotate([90, 0, 0])\n                cylinder(h=8, d=3, $fn=12);\n            }\n        }\n        \n        // Reinforcement ring\n        color(leg_color)\n        translate([0, 0, 2])\n        cylinder(h=2, d=seat_diameter+2, $fn=60);\n    }\n    \n    // Leg assembly\n    legs();\n    \n    // Folding mechanism\n    mechanisms();\n    \n    // Tool features\n    tool_features();\n}\n\n// Generate four legs with cross-bracing\nmodule legs() {\n    for(i=[0:90:270]) {\n        rotate([0, 0, i])\n        translate([seat_diameter/2-3, 0, -leg_length/2-4])\n        single_leg();\n    }\n}\n\n// Single leg with tool-like features\nmodule single_leg() {\n    color(leg_color)\n    union() {\n        // Main leg\n        cylinder(h=leg_length, d=leg_thickness, $fn=16);\n        \n        // Foot with non-slip pad\n        translate([0, 0, -leg_length/2-1])\n        cylinder(h=3, d=8, $fn=32);\n        \n        // Measurement markings\n        for(h=[10:10:50]) {\n            translate([0, 0, -leg_length/2+h])\n            rotate([0, 0, 45])\n            cube([0.5, 2, 0.5], center=true);\n        }\n        \n        // Cross-brace connection points\n        translate([0, 0, -20])\n        sphere(d=leg_thickness+2, $fn=16);\n    }\n}\n\n// Tool mechanisms (adjustable height)\nmodule mechanisms() {\n    // Height adjustment screws\n    for(i=[0:90:270]) {\n        rotate([0, 0, i])\n        translate([seat_diameter/2-3, 0, -25])\n        adjustment_screw();\n    }\n    \n    // Cross-bracing between legs\n    cross_bracing();\n}\n\n// Height adjustment screw mechanism\nmodule adjustment_screw() {\n    color(tool_color)\n    union() {\n        // Threaded insert\n        translate([0, -leg_thickness/2-2, 0])\n        rotate([90, 0, 0])\n        cylinder(h=5, d=4, $fn=12);\n        \n        // Knurled knob\n        translate([0, -leg_thickness/2-5, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=6, d=8, $fn=32);\n            for(i=[0:45:315]) {\n                rotate([0, 0, i])\n                translate([3.5, 0, 0])\n                cube([1, 1, 6], center=true);\n            }\n        }\n    }\n}\n\n// Cross-bracing system\nmodule cross_bracing() {\n    color(leg_color)\n    for(i=[0:90:270]) {\n        rotate([0, 0, i])\n        translate([seat_diameter/2-3, 0, -20])\n        rotate([90, 0, 0])\n        cylinder(h=seat_diameter-10, d=3, $fn=12);\n    }\n}\n\n// Additional tool features\nmodule tool_features() {\n    // Center handle for carrying\n    color(tool_color)\n    translate([0, 0, stool_height/2])\n    rotate([0, 0, 45])\n    union() {\n        // Handle shaft\n        cylinder(h=20, d=4, $fn=16);\n        \n        // Handle grip\n        translate([0, 0, 10])\n        cylinder(h=15, d=6, $fn=20);\n        \n        // Grip texture\n        for(i=[0:15:360]) {\n            rotate([0, 0, i])\n            translate([3, 0, 17])\n            cube([0.5, 1, 8], center=true);\n        }\n    }\n    \n    // Level indicator\n    color([0.2, 0.8, 0.2])\n    translate([0, seat_diameter/2-5, 4])\n    difference() {\n        cylinder(h=2, d=8, $fn=32);\n        translate([0, 0, -0.5])\n        cylinder(h=3, d=6, $fn=32);\n    }\n}\n\n// Render the complete stool tool\nstool();",
    "renders": true
  },
  {
    "tool": "ladder",
    "openscad_code": "$fs = 0.5;\n$fa = 1;\n\n// Ladder dimensions\nladder_height = 80;\nladder_width = 30;\nrail_thickness = 3;\nrung_thickness = 2.5;\nrung_spacing = 10;\nrung_count = 7;\nfeet_height = 2;\nhinge_pin_radius = 1.5;\n\n// Colors\nrail_color = [0.7, 0.7, 0.7];\nrung_color = [0.6, 0.6, 0.6];\ngrip_color = [0.2, 0.2, 0.2];\nhinge_color = [0.5, 0.5, 0.5];\n\nmodule ladder() {\n    // Left rail\n    color(rail_color) {\n        translate([-ladder_width/2, 0, 0])\n            cube([rail_thickness, ladder_height, rail_thickness]);\n        \n        // Rail cap\n        translate([-ladder_width/2, -rail_thickness/2, ladder_height])\n            cube([rail_thickness, rail_thickness*2, rail_thickness]);\n    }\n    \n    // Right rail\n    color(rail_color) {\n        translate([ladder_width/2 - rail_thickness, 0, 0])\n            cube([rail_thickness, ladder_height, rail_thickness]);\n        \n        // Rail cap\n        translate([ladder_width/2 - rail_thickness, -rail_thickness/2, ladder_height])\n            cube([rail_thickness, rail_thickness*2, rail_thickness]);\n    }\n    \n    // Rungs\n    for (i = [0:rung_count-1]) {\n        color(rung_color) {\n            translate([-ladder_width/2 + rail_thickness, \n                     i*rung_spacing + rung_spacing, \n                     rail_thickness/2])\n                cube([ladder_width - rail_thickness*2, rung_thickness, rung_thickness]);\n        }\n        \n        // Anti-slip texture on rungs\n        color(grip_color) {\n            for (j = [0:3]) {\n                translate([-ladder_width/2 + rail_thickness + 2 + j*5, \n                         i*rung_spacing + rung_spacing + rung_thickness/2 - 0.5, \n                         rail_thickness/2 + rung_thickness])\n                    cube([1, 1, 0.5]);\n            }\n        }\n    }\n    \n    // Bottom feet with non-slip pads\n    color(grip_color) {\n        // Left foot\n        translate([-ladder_width/2 - 1, -1, -feet_height])\n            cube([rail_thickness + 2, rail_thickness + 2, feet_height]);\n        \n        // Right foot\n        translate([ladder_width/2 - rail_thickness - 1, -1, -feet_height])\n            cube([rail_thickness + 2, rail_thickness + 2, feet_height]);\n    }\n    \n    // Hinge mechanism for folding\n    color(hinge_color) {\n        // Left hinge half\n        translate([-ladder_width/2, -rail_thickness, ladder_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=rail_thickness, r=hinge_pin_radius, $fn=8);\n        \n        // Right hinge half\n        translate([ladder_width/2 - rail_thickness, -rail_thickness, ladder_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=rail_thickness, r=hinge_pin_radius, $fn=8);\n        \n        // Hinge pin\n        translate([-ladder_width/2 + rail_thickness/2, -rail_thickness, ladder_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=ladder_width - rail_thickness, r=hinge_pin_radius*0.7, $fn=8);\n    }\n    \n    // Support braces\n    color(rail_color) {\n        translate([-ladder_width/2 + rail_thickness, -rail_thickness/2, 0])\n            cube([ladder_width - rail_thickness*2, rail_thickness, rail_thickness]);\n    }\n    \n    // Safety warnings\n    color([1, 0.2, 0.2]) {\n        translate([-ladder_width/2 + rail_thickness + 1, 5, rail_thickness + 0.1])\n            cube([ladder_width - rail_thickness*2 - 2, 2, 0.2]);\n    }\n}\n\n// Assemble the ladder\nladder();",
    "renders": true
  },
  {
    "tool": "step",
    "openscad_code": "// Realistic style step tool (medium complexity)\n// 3D printable step stool with proper wall thickness and no overhangs\n\n// Dimensions in mm\nstool_width = 80;\nstool_depth = 60;\nstep_height = 25;\nleg_height = 50;\nwall_thickness = 3;\ngrip_radius = 2;\ngrip_spacing = 15;\n\n// Colors\nstep_color = \"#E0E0E0\";\nleg_color = \"#404040\";\ngrip_color = \"#202020\";\n\n// Main step platform with rounded edges\nmodule step_platform() {\n    color(step_color) {\n        // Main platform\n        translate([0, 0, step_height/2]) {\n            difference() {\n                // Main block\n                cube([stool_width, stool_depth, step_height], center=true);\n                \n                // Hollow interior\n                cube([stool_width - 2*wall_thickness, \n                      stool_depth - 2*wall_thickness, \n                      step_height - wall_thickness], center=true);\n            }\n        }\n        \n        // Rounded top edges using cylinders\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i*(stool_width/2 - wall_thickness), \n                          j*(stool_depth/2 - wall_thickness), \n                          step_height - wall_thickness/2]) {\n                    cylinder(h=wall_thickness, r=wall_thickness, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Anti-slip grips on top surface\nmodule anti_slip_grips() {\n    color(grip_color) {\n        // Horizontal grips\n        for(x = [-30: grip_spacing: 30]) {\n            translate([x, 0, step_height + 0.5]) {\n                cube([grip_radius*2, stool_depth - 10, grip_radius], center=true);\n            }\n        }\n    }\n}\n\n// Support leg with rounded base\nmodule support_leg(x_pos, y_pos) {\n    color(leg_color) {\n        // Vertical support\n        translate([x_pos, y_pos, leg_height/2]) {\n            difference() {\n                cylinder(h=leg_height, r=wall_thickness*2, center=true);\n                cylinder(h=leg_height + 1, r=wall_thickness*2 - wall_thickness, center=true);\n            }\n        }\n        \n        // Rounded base pad\n        translate([x_pos, y_pos, -1]) {\n            cylinder(h=3, r=wall_thickness*2.5, $fn=20);\n        }\n    }\n}\n\n// Reinforcement rib between legs\nmodule reinforcement_rib(x1, y1, x2, y2, height) {\n    color(leg_color) {\n        translate([(x1+x2)/2, (y1+y2)/2, height/2]) {\n            rotate([0, 0, atan2(y2-y1, x2-x1)]) {\n                cube([sqrt(pow(x2-x1, 2) + pow(y2-y1, 2)), wall_thickness, height], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nstep_platform();\nanti_slip_grips();\n\n// Four support legs\nsupport_leg(stool_width/2 - wall_thickness*3, stool_depth/2 - wall_thickness*3, leg_height);\nsupport_leg(-stool_width/2 + wall_thickness*3, stool_depth/2 - wall_thickness*3, leg_height);\nsupport_leg(stool_width/2 - wall_thickness*3, -stool_depth/2 + wall_thickness*3, leg_height);\nsupport_leg(-stool_width/2 + wall_thickness*3, -stool_depth/2 + wall_thickness*3, leg_height);\n\n// Reinforcement ribs\nreinforcement_rib(stool_width/2 - wall_thickness*3, stool_depth/2 - wall_thickness*3, \n                  -stool_width/2 + wall_thickness*3, stool_depth/2 - wall_thickness*3, \n                  leg_height - 10);\n\nreinforcement_rib(stool_width/2 - wall_thickness*3, -stool_depth/2 + wall_thickness*3, \n                  -stool_width/2 + wall_thickness*3, -stool_depth/2 + wall_thickness*3, \n                  leg_height - 10);\n\nreinforcement_rib(stool_width/2 - wall_thickness*3, stool_depth/2 - wall_thickness*3, \n                  stool_width/2 - wall_thickness*3, -stool_depth/2 + wall_thickness*3, \n                  leg_height - 10);\n\nreinforcement_rib(-stool_width/2 + wall_thickness*3, stool_depth/2 - wall_thickness*3, \n                  -stool_width/2 + wall_thickness*3, -stool_depth/2 + wall_thickness*3, \n                  leg_height - 10);",
    "renders": true
  },
  {
    "tool": "platform",
    "openscad_code": "// Realistic Platform Tool - Medium Complexity (OpenSCAD)\n// A mechanic's platform tool for lifting and supporting small parts\n\n// Overall dimensions\nplatform_w = 40;\nplatform_l = 80;\nplatform_h = 12;\nhandle_len = 60;\nhandle_d = 8;\n\nmodule platform_base() {\n    // Main platform body\n    difference() {\n        // Base block\n        translate([0, 0, platform_h/2])\n            cube([platform_w, platform_l, platform_h], center=true);\n        \n        // Grip slots on sides\n        for (i = [-1, 1]) {\n            translate([i * (platform_w/2 - 2), 0, platform_h/2])\n                cube([4, platform_l - 10, platform_h], center=true);\n        }\n        \n        // Center hole for tools\n        translate([0, 0, -1])\n            cylinder(h=platform_h+2, r=6, $fn=32);\n    }\n    \n    // Raised edges for part retention\n    for (edge = [-1, 1]) {\n        translate([0, edge * (platform_l/2 - 2), platform_h - 1])\n            cube([platform_w - 4, 2, 2], center=true);\n    }\n    \n    // Grip texture on top surface\n    for (x = [-15:5:15]) {\n        for (y = [-30:5:30]) {\n            translate([x, y, platform_h + 0.1])\n                cube([1, 1, 0.5], center=true);\n        }\n    }\n}\n\nmodule handle() {\n    // Main handle shaft\n    rotate([90, 0, 0])\n        cylinder(h=handle_len, r=handle_d/2, center=true, $fn=32);\n    \n    // Handle grip\n    translate([0, handle_len/2 + 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h=15, r=handle_d/2 + 2, center=true, $fn=32);\n    \n    // Grip rings\n    for (i = [0:2:12]) {\n        translate([0, handle_len/2 - i, 0])\n            rotate([90, 0, 0])\n                cylinder(h=1, r=handle_d/2 + 2.5, center=true, $fn=32);\n    }\n    \n    // Connection bracket\n    translate([0, -handle_len/2 - 5, 0])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=handle_d/2 + 1, center=true, $fn=32);\n    \n    // Mounting plate\n    translate([0, -handle_len/2 - 10, 0])\n        cube([platform_w/2, 5, 8], center=true);\n}\n\nmodule support_brackets() {\n    // Side support brackets\n    for (side = [-1, 1]) {\n        color(\"Silver\")\n        translate([side * (platform_w/2 + 2), 0, platform_h/2 - 3])\n            rotate([0, 90, 0])\n                cylinder(h=8, r=2, center=true, $fn=16);\n        \n        color(\"Silver\")\n        translate([side * (platform_w/2 + 2), 0, platform_h/2 - 3])\n            cube([4, 6, 8], center=true);\n    }\n    \n    // Rear support\n    color(\"Silver\")\n    translate([0, platform_l/2 + 2, platform_h/2 - 3])\n        rotate([90, 0, 0])\n            cylinder(h=6, r=2, center=true, $fn=16);\n    \n    color(\"Silver\")\n    translate([0, platform_l/2 + 2, platform_h/2 - 3])\n        cube([platform_w - 4, 4, 8], center=true);\n}\n\n// Assembly\ncolor(\"DarkSlateGray\") platform_base();\ntranslate([0, -platform_l/2 - handle_len/2, 0]) color(\"Black\") handle();\nsupport_brackets();\n\n// Alignment pins for accessories\ncolor(\"Gold\")\nfor (pin = [[-15, 15], [15, 15], [-15, -15], [15, -15]]) {\n    translate([pin[0], pin[1], platform_h + 2])\n        cylinder(h=4, r=1.5, $fn=16);\n}\n\n// Scale marks for measurement reference\ncolor(\"White\")\nfor (i = [-30:10:30]) {\n    translate([platform_w/2 + 1, i, platform_h/2])\n        cube([2, 0.5, 0.5], center=true);\n}",
    "renders": true
  },
  {
    "tool": "scaffold",
    "openscad_code": "// Scaffold tool (brick-jointer) â€“ realistic, medium complexity\n// 3D-printable, ~70 mm long, 20 mm wide, 15 mm thick\n\n$fs = 0.4;\n$fa = 2;\n\n// Main color palette\ncolor_steel   = [0.45,0.48,0.52];\ncolor_handle  = [0.18,0.18,0.18];\ncolor_grip    = [0.05,0.05,0.05];\n\n// Wall / blade thickness\nblade_t = 1.6;      // 1.6 mm printable walls\nhandle_t = 3;\n\n// Central handle\nmodule handle_body() {\n    color(color_handle)\n    difference() {\n        hull() {\n            // Ergonomic oval handle\n            translate([-3,0,0]) cylinder(h = 70, d = 18, center = true);\n            translate([ 3,0,0]) cylinder(h = 70, d = 18, center = true);\n        }\n        // Grip cavity\n        translate([0,0,0])\n            cube([22, 22, 72], center = true);\n    }\n}\n\n// Rubberised grip inserts\nmodule grip_strips() {\n    color(color_grip)\n    for (z = [-25, -15, -5, 5, 15, 25]) {\n        translate([0, 0, z])\n            scale([1, 0.7, 1])\n                cylinder(h = 6, d = 20, $fn = 60);\n    }\n}\n\n// Blade profile helper\nmodule half_blade(radius, width) {\n    difference() {\n        // Semi-cylindrical blade\n        intersection() {\n            cylinder(h = width, d = radius*2, center = true);\n            translate([0, -radius, 0]) cube([radius*2, radius, width+0.1], center = true);\n        }\n        // Hollow underside to reduce material and avoid overhang\n        translate([0, 0, -width/2-0.1])\n            cube([radius*2-1, radius-0.8, width+0.2], center = true);\n    }\n}\n\n// Blade with shaft\nmodule blade(size, width) {\n    color(color_steel)\n    union() {\n        // Shaft\n        translate([0, 0, 0])\n            cube([blade_t, 12, width], center = true);\n\n        // Curved blade end\n        translate([0, -12/2 - size/2, 0])\n            rotate([90, 0, 0])\n                half_blade(size, width);\n    }\n}\n\n// Assembly\nmodule scaffold_tool() {\n    // Handle\n    handle_body();\n    grip_strips();\n\n    // Left blade (small)\n    translate([0, 9.5, -30])\n        blade(6, 15);\n\n    // Right blade (large)\n    translate([0, 9.5, 30])\n        blade(10, 15);\n}\n\nscaffold_tool();",
    "renders": true
  },
  {
    "tool": "barrow",
    "openscad_code": "// Realistic Barrow (Garden Wheelbarrow) - 3D Printable\n// Medium complexity with functional details\n\n$fn = 24;\n\n// Colors\ncolor_body = [0.8, 0.2, 0.1];    // Rusty red\ncolor_handle = [0.3, 0.2, 0.1];  // Dark wood\ncolor_wheel = [0.1, 0.1, 0.1];   // Black tire\ncolor_axle = [0.5, 0.5, 0.5];    // Gray metal\n\n// Dimensions (mm)\ntray_length = 60;\ntray_width = 40;\ntray_height = 15;\nhandle_length = 55;\nhandle_diameter = 4;\nwheel_radius = 12;\nwheel_width = 6;\nleg_height = 20;\n\nmodule tray() {\n    // Main tray body\n    color(color_body)\n    difference() {\n        union() {\n            // Base tray\n            translate([-tray_length/2, -tray_width/2, 0])\n                cube([tray_length, tray_width, tray_height]);\n            \n            // Front slope\n            translate([-tray_length/2 - 8, -tray_width/2, tray_height - 3])\n                rotate([90, 0, 0])\n                    cylinder(h=10, r1=10, r2=8);\n            translate([-tray_length/2 - 8, tray_width/2, tray_height - 3])\n                rotate([90, 0, 0])\n                    cylinder(h=10, r1=10, r2=8);\n        }\n        \n        // Hollow out the tray\n        translate([-tray_length/2 + 2, -tray_width/2 + 2, 2])\n            cube([tray_length - 4, tray_width - 4, tray_height + 5]);\n        \n        // Drain hole\n        translate([tray_length/2 - 8, 0, 1])\n            cylinder(h=3, r=2);\n    }\n    \n    // Reinforcement ribs\n    for(i = [-1, 0, 1]) {\n        translate([i * 15, -tray_width/2 - 1, 0])\n            cube([2, tray_width + 2, tray_height]);\n    }\n}\n\nmodule handles() {\n    color(color_handle)\n    union() {\n        // Left handle\n        translate([-tray_length/2 + 5, -tray_width/2 - 8, tray_height - 2])\n            rotate([0, 70, 0])\n                cylinder(h=handle_length, d=handle_diameter);\n        \n        // Right handle\n        translate([-tray_length/2 + 5, tray_width/2 + 8, tray_height - 2])\n            rotate([0, 70, 0])\n                cylinder(h=handle_length, d=handle_diameter);\n        \n        // Cross brace\n        translate([-tray_length/2 + 12, -tray_width/2 - 8, tray_height + 15])\n            rotate([90, 0, 90])\n                cylinder(h=tray_width + 16, d=handle_diameter * 0.8);\n        \n        // Grips\n        translate([-tray_length/2 + 5, -tray_width/2 - 8 - handle_length/2, tray_height - 2 + handle_length/2 * sin(70)])\n            rotate([0, 90, 0])\n                cylinder(h=8, d=handle_diameter * 1.2);\n        translate([-tray_length/2 + 5, tray_width/2 + 8 + handle_length/2, tray_height - 2 + handle_length/2 * sin(70)])\n            rotate([0, 90, 0])\n                cylinder(h=8, d=handle_diameter * 1.2);\n    }\n}\n\nmodule wheel() {\n    color(color_wheel)\n    union() {\n        // Tire\n        difference() {\n            cylinder(h=wheel_width, r=wheel_radius, center=true);\n            cylinder(h=wheel_width + 1, r=wheel_radius - 3, center=true);\n        }\n        \n        // Hub\n        color(color_axle)\n        cylinder(h=wheel_width + 2, r=3, center=true);\n        \n        // Spokes\n        for(i = [0:6]) {\n            rotate([0, 0, i * 60])\n                translate([wheel_radius/2, 0, 0])\n                    cube([wheel_radius - 2, 1, wheel_width], center=true);\n        }\n    }\n}\n\nmodule legs() {\n    color(color_axle)\n    union() {\n        // Left leg\n        translate([-tray_length/2 + 10, -tray_width/2 - 2, 0])\n            cube([2, 4, leg_height]);\n        \n        // Right leg\n        translate([-tray_length/2 + 10, tray_width/2 - 2, 0])\n            cube([2, 4, leg_height]);\n        \n        // Support struts\n        translate([-tray_length/2 + 5, -tray_width/4, 0])\n            rotate([0, -30, 0])\n                cube([2, 2, 15]);\n        translate([-tray_length/2 + 5, tray_width/4, 0])\n            rotate([0, 30, 0])\n                cube([2, 2, 15]);\n    }\n}\n\nmodule axle() {\n    color(color_axle)\n    cylinder(h=tray_width + 20, r=2, center=true);\n}\n\n// Assemble the barrow\nunion() {\n    tray();\n    handles();\n    legs();\n    \n    // Wheel assembly\n    translate([tray_length/2 - 5, 0, wheel_radius + 2])\n        rotate([90, 0, 0])\n            axle();\n    \n    translate([tray_length/2 - 5, 0, wheel_radius + 2])\n        rotate([90, 0, 0])\n            wheel();\n}",
    "renders": true
  },
  {
    "tool": "cart",
    "openscad_code": "// Realistic Medium-Complexity OpenSCAD Cart Tool (Garden Cart / Wheelbarrow Style)\n// Size: ~80 mm long, printable on most FDM machines\n// No steep overhangs, 2 mm wall thickness throughout\n\n$fn = 36; // Smooth curves\n\n// Basic color set\ncolor_cart = \"Silver\";\ncolor_wheel = \"Black\";\ncolor_handle = \"Brown\";\n\nmodule cart_tool() {\n    // Main tub\n    color(color_cart)\n    difference() {\n        // Outer shell\n        translate([0, 0, 10])\n            cube([50, 35, 15], center = true);\n\n        // Inner cavity\n        translate([0, 0, 12])\n            cube([46, 31, 12], center = true);\n\n        // Front slope\n        translate([24, 0, 2])\n            rotate([0, -30, 0])\n            cube([40, 40, 40], center = true);\n    }\n\n    // Front support beam\n    color(color_cart)\n    translate([25, 0, 0])\n    cube([5, 30, 10], center = true);\n\n    // Rear support beam\n    color(color_cart)\n    translate([-25, 0, 0])\n    cube([5, 30, 10], center = true);\n\n    // Axle holders\n    for (y = [-20, 20]) {\n        color(color_cart)\n        translate([25, y, 0])\n        cylinder(h = 8, d = 6, center = true);\n    }\n\n    // Axle rod\n    color(color_cart)\n    translate([25, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 45, d = 4, center = true);\n\n    // Wheel\n    color(color_wheel)\n    translate([25, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 10, d = 20, center = true); // Tire\n        cylinder(h = 11, d = 12, center = true); // Hub hole\n    }\n\n    // Wheel hub cap\n    color(color_cart)\n    translate([25, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h = 11, d = 8, center = true);\n\n    // Handle arms\n    for (y = [-10, 10]) {\n        color(color_handle)\n        translate([-30, y, 5])\n        rotate([0, 30, 0])\n        cylinder(h = 35, d = 4, center = false);\n    }\n\n    // Handle grip\n    color(color_handle)\n    translate([-48, 0, 15])\n    rotate([0, 30, 0])\n    cube([25, 20, 6], center = true);\n\n    // Bottom skid rails\n    for (x = [-15, 15]) {\n        color(color_cart)\n        translate([x, 0, -5])\n        cube([20, 35, 4], center = true);\n    }\n\n    // Reinforcement ribs\n    color(color_cart)\n    for (x = [-15, 0, 15]) {\n        translate([x, 0, 10])\n        cube([2, 33, 12], center = true);\n    }\n}\n\n// Render the cart\ncart_tool();",
    "renders": true
  },
  {
    "tool": "wagon",
    "openscad_code": "// WAGON TOOL â€“ OpenSCAD\n// Medium-complexity realistic style for 3D printing  \n// Overall footprint â‰ˆ 80 mm\n\n// --- PARAMETERS ---------------------------------------------\nwheel_d = 16;\nwheel_w = 6;\naxle_d = 4;\nbed_l = 70;\nbed_w = 45;\nbed_h = 12;\nwall_t = 2;\nhandle_rod_d = 5;\nhandle_len = 50;\nhandle_grip_l = 30;\nhandle_grip_d = 9;\n// -----------------------------------------------------------\n\nmodule wheel() {\n    color(\"dimgray\")\n    difference() {\n        cylinder(h = wheel_w, d = wheel_d, $fn = 30);\n        // axle hole\n        translate([0, 0, -1])\n            cylinder(h = wheel_w + 2, d = axle_d, $fn = 20);\n    }\n}\n\nmodule axle() {\n    color(\"silver\")\n    rotate([90, 0, 0])\n        cylinder(h = bed_w + 2 * wheel_w, d = axle_d, $fn = 12);\n}\n\nmodule wheels_assembly() {\n    translate([-bed_l/2 - wheel_w/2, 0, wheel_d/2])\n        wheel();\n    translate([-bed_l/2 - wheel_w/2, 0, wheel_d/2])\n        axle();\n    translate([-bed_l/2 - wheel_w/2, 0, wheel_d/2])\n        mirror([0, 1, 0])\n            wheel();\n}\n\nmodule wagon_bed() {\n    color(\"firebrick\")\n    difference() {\n        // outer bed\n        translate([0, 0, bed_h/2])\n            cube([bed_l, bed_w, bed_h], center = true);\n        // hollow inside\n        translate([0, 0, bed_h/2 + wall_t/2])\n            cube([bed_l - 2 * wall_t, bed_w - 2 * wall_t, bed_h], center = true);\n        // front slope\n        translate([bed_l/2 - wall_t, 0, bed_h/2 + wall_t/2])\n            rotate([0, 45, 0])\n                cube([bed_h * 1.5, bed_w, bed_h * 1.5], center = true);\n    }\n}\n\nmodule side_rail() {\n    color(\"firebrick\")\n    translate([0, bed_w/2 - wall_t/2, bed_h + wall_t/2])\n        cube([bed_l, wall_t, wall_t * 2]);\n}\n\nmodule handle_rod() {\n    color(\"silver\")\n    rotate([90, 0, 0])\n        cylinder(h = handle_len, d = handle_rod_d, $fn = 12);\n}\n\nmodule handle_grip() {\n    color(\"black\")\n    rotate([90, 0, 0])\n        cylinder(h = handle_grip_l, d = handle_grip_d, $fn = 20);\n}\n\nmodule handle_assembly() {\n    translate([-bed_l/2 - handle_len, 0, bed_h - handle_rod_d/2]) {\n        handle_rod();\n        translate([0, 0, handle_len - handle_grip_l/2])\n            handle_grip();\n    }\n}\n\nmodule wagon_tool() {\n    union() {\n        wagon_bed();\n        side_rail();\n        mirror([0, 1, 0])\n            side_rail();\n        wheels_assembly();\n        mirror([1, 0, 0])\n            wheels_assembly();\n        handle_assembly();\n    }\n}\n\nwagon_tool();",
    "renders": true
  },
  {
    "tool": "sled",
    "openscad_code": "// Sled Tool - Realistic Style, Medium Complexity\n// A handheld sled tool for woodworking with adjustable fence and blade guard\n\n// Overall dimensions\ntool_length = 90;\ntool_width = 45;\ntool_height = 25;\n\n// Colors\nhandle_color = [0.1, 0.1, 0.1]; // Black handle\nbody_color = [0.8, 0.8, 0.8]; // Aluminum body\nblade_color = [0.5, 0.5, 0.5]; // Steel blade\nfence_color = [0.9, 0.2, 0.2]; // Red fence\nsafety_color = [0.9, 0.9, 0.1]; // Yellow safety features\n\n// Main body base\nmodule sled_base() {\n    difference() {\n        // Main platform\n        color(body_color)\n        cube([tool_length, tool_width, 5], center=false);\n        \n        // Slot for blade\n        translate([tool_length/2 - 2, tool_width/2 - 15, -0.1])\n            cube([4, 30, 5.2]);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    // Main handle grip\n    translate([5, tool_width/2 - 8, 5])\n    rotate([0, 90, 0])\n    color(handle_color)\n    cylinder(h=16, d=8, $fn=20);\n    \n    // Handle supports\n    for(i = [0:1]) {\n        translate([2, tool_width/2 - 8 + i*16, 5])\n        rotate([0, 90, 0])\n        color(body_color)\n        cylinder(h=5, d=6, $fn=8);\n    }\n}\n\n// Adjustable fence\nmodule fence() {\n    // Fence body\n    translate([tool_length - 15, 0, 0])\n    color(fence_color)\n    cube([15, tool_width, 8]);\n    \n    // Fence adjustment knobs\n    for(i = [0:1]) {\n        translate([tool_length - 10, 5 + i*35, 8])\n        color([0.2, 0.2, 0.2])\n        cylinder(h=5, d=6, $fn=12);\n    }\n    \n    // Measurement scale\n    for(i = [0:3]) {\n        translate([tool_length - 12 - i*3, tool_width - 2, 8.1])\n        color([0, 0, 0])\n        cube([0.5, 1, 0.5]);\n    }\n}\n\n// Blade guard\nmodule blade_guard() {\n    // Main guard\n    translate([tool_length/2 - 5, tool_width/2 - 10, 5])\n    color(safety_color)\n    cube([10, 20, 8]);\n    \n    // Guard mounting\n    translate([tool_length/2, tool_width/2 - 15, 5])\n    color(body_color)\n    cylinder(h=3, d=4, $fn=8);\n}\n\n// Cutting blade\nmodule blade() {\n    translate([tool_length/2, tool_width/2, 2.5])\n    rotate([0, 0, 0])\n    color(blade_color)\n    linear_extrude(height=3)\n    circle(d=20, $fn=24);\n    \n    // Blade teeth\n    for(i = [0:23]) {\n        rotate([0, 0, i*15])\n        translate([tool_length/2 + 9.5, tool_width/2, 2.5])\n        color(blade_color)\n        cube([1, 1, 3]);\n    }\n}\n\n// Non-slip pads\nmodule grip_pads() {\n    for(x = [10:20:tool_length-10]) {\n        for(y = [5:10:tool_width-5]) {\n            translate([x, y, -0.5])\n            color([0.1, 0.1, 0.1])\n            cylinder(h=1, d=3, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    sled_base();\n    handle();\n    fence();\n    blade_guard();\n    blade();\n    grip_pads();\n}",
    "renders": true
  },
  {
    "tool": "tray",
    "openscad_code": "// Tray Tool â€“ OpenSCAD\n// Medium complexity, realistic style, 3D-printable\n// Typical small parts tray with handle and feet\n\n// Overall dimensions\ntray_l = 90;\ntray_w = 60;\ntray_h = 20;\nwall_t = 2.5;\nhandle_l = 40;\nhandle_r = 6;\nfoot_h = 3;\nfoot_r = 5;\ngrip_ridges = 8;\ngrip_depth = 0.8;\nlabel_h = 1.2;\n\n// Colors\ncolor_tray = \"Silver\";\ncolor_handle = \"DimGray\";\ncolor_label = \"Black\";\n\n// Main tray body\nmodule tray_body() {\n    difference() {\n        // Outer shell\n        cube([tray_l, tray_w, tray_h]);\n\n        // Hollow cavity\n        translate([wall_t, wall_t, -0.1])\n            cube([tray_l - 2*wall_t, tray_w - 2*wall_t, tray_h + 0.2]);\n    }\n}\n\n// Handle grip ridges\nmodule grip_ridges() {\n    ridge_w = handle_l / grip_ridges;\n    for (i = [0 : grip_ridges-1]) {\n        translate([i*ridge_w + ridge_w/2, -grip_depth/2, 0])\n            cube([ridge_w*0.6, grip_depth, handle_r*2]);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    color(color_handle) {\n        union() {\n            // Main handle bar\n            translate([tray_l/2 - handle_l/2, -handle_r*1.5, tray_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h = handle_l, r = handle_r, $fn = 32);\n\n            // Grip ridges\n            translate([tray_l/2 - handle_l/2, -handle_r*1.5 - handle_r, tray_h/2])\n                rotate([0, 90, 0])\n                    grip_ridges();\n        }\n    }\n}\n\n// Feet to lift tray slightly\nmodule feet() {\n    positions = [\n        [foot_r + 5, foot_r + 5],\n        [tray_l - foot_r - 5, foot_r + 5],\n        [foot_r + 5, tray_w - foot_r - 5],\n        [tray_l - foot_r - 5, tray_w - foot_r - 5]\n    ];\n    for (p = positions) {\n        translate([p.x, p.y, -foot_h])\n            cylinder(h = foot_h, r = foot_r, $fn = 20);\n    }\n}\n\n// Engraved label plate\nmodule label() {\n    color(color_label) {\n        translate([tray_l/2 - 15, tray_w/2 - 5, tray_h - label_h])\n            cube([30, 10, label_h]);\n    }\n}\n\n// Assembly\ncolor(color_tray) {\n    union() {\n        tray_body();\n        feet();\n    }\n}\nhandle();\nlabel();",
    "renders": true
  },
  {
    "tool": "board",
    "openscad_code": "// Realistic Medium-Complexity Board Tool â€“ \"Cutting Board with Juice Groove & Handles\"\n// Overall size ~200 mm x 130 mm x 15 mm\n\n// Color constants\nWOOD = [0.82, 0.71, 0.55];\nJUICE = \"LightBlue\";   // purely visual for preview\n\n// Main board body\nmodule board_body() {\n    difference() {\n        // Solid board\n        color(WOOD)\n        cube([200, 130, 15], center = true);\n\n        // Juice groove on top face\n        translate([0, 0, 7.6])\n            color(JUICE)\n            cube([180, 110, 1.5], center = true);\n    }\n}\n\n// Handle cut-out shape\nmodule handle_cutout() {\n    // Rounded slot\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = 20, d = 30, $fn = 32);\n        translate([0, 50, 0])\n            cylinder(h = 20, d = 30, $fn = 32);\n    }\n}\n\n// Left handle\nmodule handle_left() {\n    difference() {\n        color(WOOD)\n        translate([-115, 0, 0])\n            cube([30, 80, 15], center = true);\n        translate([-115, 0, 0])\n            rotate([90, 0, 0])\n            handle_cutout();\n    }\n}\n\n// Right handle (mirror of left)\nmodule handle_right() {\n    mirror([1, 0, 0])\n        handle_left();\n}\n\n// Rubber feet (4 simple cylinders underneath)\nmodule feet() {\n    for (dx = [-80, 80], dy = [-45, 45])\n        translate([dx, dy, -8.5])\n            color(\"Black\")\n            cylinder(h = 2, d = 12, $fn = 24);\n}\n\n// Assembly\nboard_body();\nhandle_left();\nhandle_right();\nfeet();",
    "renders": true
  },
  {
    "tool": "plank",
    "openscad_code": "// Plank Tool - Realistic Style, Medium Complexity\n// A handheld plank cutting/rasping tool with ergonomic grip and cutting teeth\n\n// Main parameters\nplank_length = 80;\nplank_width = 25;\nplank_thickness = 8;\nhandle_length = 30;\nhandle_diameter = 15;\ncutting_teeth_count = 12;\n\n// Colors\nwood_color = [0.72, 0.53, 0.38];\nmetal_color = [0.5, 0.5, 0.5];\nhandle_color = [0.1, 0.1, 0.1];\n\n// Main plank body\nmodule plank_body() {\n    color(wood_color)\n    difference() {\n        // Main cuboid shape\n        cube([plank_length, plank_width, plank_thickness], center=true);\n        \n        // Rounded edges - remove corners\n        translate([plank_length/2 - 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=plank_width, r=2, center=true);\n        translate([-plank_length/2 + 2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=plank_width, r=2, center=true);\n    }\n}\n\n// Cutting teeth along one edge\nmodule cutting_teeth() {\n    color(metal_color)\n    for(i = [0:cutting_teeth_count-1]) {\n        translate([\n            -plank_length/2 + 5 + (i * (plank_length-10)/(cutting_teeth_count-1)),\n            plank_width/2 - 1,\n            0\n        ]) {\n            rotate([0, 0, 45])\n                cube([3, 3, plank_thickness], center=true);\n            rotate([0, 0, -45])\n                cube([3, 3, plank_thickness], center=true);\n        }\n    }\n}\n\n// Ergonomic handle\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle cylinder\n        translate([-plank_length/2 - handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Grip pattern - subtract grooves\n        for(i = [0:3]) {\n            rotate([0, 90, 0])\n                translate([\n                    -plank_length/2 - handle_length/2 + 5 + i*5,\n                    0,\n                    handle_diameter/2 - 1\n                ])\n                    cube([2, handle_diameter, 1], center=true);\n        }\n    }\n}\n\n// Metal reinforcement strip\nmodule reinforcement_strip() {\n    color(metal_color)\n    translate([0, 0, plank_thickness/2 + 0.5])\n        cube([plank_length - 10, plank_width - 4, 1], center=true);\n}\n\n// Hanging hole\nmodule hanging_hole() {\n    translate([plank_length/2 - 8, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h=plank_thickness + 1, r=2, center=true);\n}\n\n// Assembly\nunion() {\n    // Main components\n    plank_body();\n    cutting_teeth();\n    handle();\n    reinforcement_strip();\n    \n    // Remove hanging hole\n    difference() {\n        children();\n        hanging_hole();\n    }\n}",
    "renders": true
  },
  {
    "tool": "slab",
    "openscad_code": "// Concrete Slab Tool - Realistic Style, Medium Complexity\n// Designed for 3D printing with no overhangs\n\n$fn = 50;\n\n// Overall dimensions\nslab_length = 80;\nslab_width = 40;\nslab_height = 8;\nhandle_length = 25;\nhandle_diameter = 12;\ngrip_depth = 2;\n\n// Colors\nconcrete_color = [0.7, 0.7, 0.65];\nhandle_color = [0.1, 0.1, 0.1];\ngrip_color = [0.05, 0.05, 0.05];\n\nmodule slab_body() {\n    difference() {\n        // Main slab body\n        color(concrete_color)\n        cube([slab_length, slab_width, slab_height], center=true);\n        \n        // Rounded edges on top\n        translate([0, 0, slab_height/2 - 1])\n        minkowski() {\n            cube([slab_length - 4, slab_width - 4, 1], center=true);\n            sphere(1);\n        }\n        \n        // Handle cavity\n        translate([slab_length/2 - 5, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=10, d=handle_diameter + 2, center=true);\n    }\n}\n\nmodule handle() {\n    // Main handle rod\n    color(handle_color)\n    translate([slab_length/2 + handle_length/2, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=handle_length, d=handle_diameter, center=true);\n    \n    // Handle grip\n    color(grip_color)\n    for(i = [0:3]) {\n        translate([slab_length/2 + 5 + i * 5, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=3, d=handle_diameter + 1, center=true);\n            cylinder(h=3.1, d=handle_diameter - 2, center=true);\n        }\n    }\n    \n    // End cap\n    translate([slab_length/2 + handle_length, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=2, d=handle_diameter + 2, center=true);\n}\n\nmodule surface_texture() {\n    // Concrete texture pattern\n    for(x = [-slab_length/2 + 5:5:slab_length/2 - 5]) {\n        for(y = [-slab_width/2 + 5:5:slab_width/2 - 5]) {\n            translate([x, y, slab_height/2 - 0.5])\n            sphere(d=1, $fn=8);\n        }\n    }\n}\n\nmodule measurement_markings() {\n    // Metric markings on side\n    for(i = [0:5:20]) {\n        translate([-slab_length/2 + i + 5, -slab_width/2 - 0.5, 0])\n        cube([0.5, 2, 1]);\n    }\n    \n    // Center line marking\n    translate([0, -slab_width/2 - 0.5, 0])\n    cube([0.5, 4, 1]);\n}\n\n// Assemble the tool\nunion() {\n    slab_body();\n    handle();\n    \n    // Optional: Surface texture\n    surface_texture();\n    \n    // Optional: Measurement markings\n    measurement_markings();\n}\n\n// Support base for printing\ntranslate([0, 0, -slab_height/2 - 0.5])\ncolor([0.8, 0.8, 0.8])\ncube([slab_length + 10, slab_width + 10, 1], center=true);",
    "renders": true
  },
  {
    "tool": "rock",
    "openscad_code": "// Geological Rock Pick Tool - Realistic Style\n// Rock hammer with pick end and chisel end, ergonomic grip, and geological features\n\n$fn = 32;\n\n// Main module for the rock pick\nmodule rock_pick() {\n    color([0.3, 0.3, 0.3]) {\n        // Handle grip\n        handle_grip();\n        \n        // Shaft\n        shaft();\n        \n        // Pick head\n        pick_head();\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle_grip() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=120, d1=28, d2=22, center=false);\n        \n        // Grip rings for better handling\n        for(i = [10:20:110]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=30, $fn=6);\n        }\n        \n        // Finger grooves\n        for(i = [30:15:90]) {\n            translate([0, -11, i])\n                rotate([90, 0, 0])\n                    cylinder(h=20, d1=8, d2=6, $fn=8);\n        }\n    }\n    \n    // Rubber grip overlay\n    color([0.2, 0.1, 0.1]) {\n        translate([0, 0, 50])\n            cylinder(h=70, d=26, $fn=32);\n    }\n}\n\n// Metal shaft\nmodule shaft() {\n    translate([0, 0, 120]) {\n        // Main shaft\n        cylinder(h=80, d=12);\n        \n        // Taper\n        translate([0, 0, 80])\n            cylinder(h=20, d1=12, d2=16);\n    }\n}\n\n// Pick head assembly\nmodule pick_head() {\n    translate([0, 0, 200]) {\n        // Main head body\n        difference() {\n            cube([40, 20, 25], center=true);\n            \n            // Center hole for shaft\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=30, d=17);\n        }\n        \n        // Pick end - sharp point\n        translate([20, 0, 12.5])\n            rotate([0, -90, 0])\n                cylinder(h=45, d1=6, d2=0);\n        \n        // Flat chisel end\n        translate([-20, 0, 12.5])\n            rotate([0, 90, 0])\n                cube([35, 20, 2]);\n        \n        // Reinforcement ribs\n        for(side = [-1, 1]) {\n            translate([0, side * 10, 12.5])\n                cube([40, 2, 25]);\n        }\n        \n        // Weight balance holes\n        color([0.1, 0.1, 0.1]) {\n            for(x = [-15, -5, 5, 15]) {\n                translate([x, 0, 12.5])\n                    cylinder(h=25, d=3);\n            }\n        }\n        \n        // Manufacturer marking\n        translate([8, 0, 25.5])\n            linear_extrude(height=1)\n                text(\"GEO\", size=4, halign=\"center\");\n    }\n}\n\n// Create the rock pick\nrock_pick();",
    "renders": true
  },
  {
    "tool": "gravel",
    "openscad_code": "// Gravel Rake - Realistic Style, Medium Complexity\n// Overall length ~180mm, width ~150mm, handle diameter 25mm\n\n$fn = 36;\n\n// Main assembly\nmodule gravel_rake() {\n    color(\"saddlebrown\") handle();\n    color(\"darkgray\") rake_head();\n    color(\"silver\") hardware();\n}\n\n// Handle with grip texture\nmodule handle() {\n    // Main handle shaft\n    translate([0, 0, 90]) \n        rotate([90, 0, 0]) \n            cylinder(h=150, d1=25, d2=22);\n    \n    // Grip rings for better handling\n    for(i = [0:15:135]) {\n        translate([0, 0, i+10]) \n            rotate([90, 0, 0]) \n                cylinder(h=3, d=28);\n    }\n    \n    // End cap\n    translate([0, 0, 5]) \n        rotate([90, 0, 0])\n            cylinder(h=8, d=30);\n}\n\n// Rake head with tines\nmodule rake_head() {\n    // Head bracket\n    translate([0, 0, 30])\n        cube([120, 30, 8], center=true);\n    \n    // Reinforcement rib\n    translate([0, 10, 34])\n        cube([100, 10, 6], center=true);\n    \n    // Mounting bracket\n    translate([0, -20, 34])\n        cube([25, 12, 20], center=true);\n    \n    // Tines\n    for(x = [-55:10:55]) {\n        translate([x, 0, 26])\n            rake_tine();\n    }\n}\n\n// Individual rake tine\nmodule rake_tine() {\n    // Tapered tine\n    difference() {\n        translate([0, 0, -10])\n            cylinder(h=20, d1=4, d2=2.5);\n        \n        // Chamfer bottom\n        translate([0, 0, -11])\n            cylinder(h=2, d=5);\n    }\n}\n\n// Hardware connections\nmodule hardware() {\n    // Handle bolt\n    translate([0, -20, 34])\n        rotate([90, 0, 0])\n            cylinder(h=25, d=6);\n    \n    // Bolt head\n    translate([0, -32.5, 34])\n        rotate([90, 0, 0])\n            cylinder(h=4, d=10, $fn=6);\n    \n    // Side bolts\n    for(x = [-40:40:40]) {\n        translate([x, 0, 34])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=5);\n        \n        // Nut\n        translate([x, 16, 34])\n            rotate([0, 90, 0])\n                cylinder(h=5, d=8, $fn=6);\n    }\n}\n\ngravel_rake();",
    "renders": true
  },
  {
    "tool": "sand",
    "openscad_code": "// Sand scoop for realistic beach use\n// Dimensions in mm - total length ~80mm, printable without supports\n\n$fn = 32;  // Smooth curves\n\n// Main colors\ncolor(\"BurlyWood\") \n\n// Main assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Scoop bowl\n    translate([0, 0, 15]) \n        rotate([0, 90, 0])\n        scoop_bowl();\n    \n    // Handle grip\n    translate([-30, 0, 0])\n        grip();\n    \n    // Drainage holes\n    translate([30, 0, 15])\n        rotate([0, 90, 0])\n        drainage_holes();\n}\n\n// Handle module\nmodule handle() {\n    // Main handle shaft\n    color(\"SaddleBrown\")\n    cylinder(h = 60, d1 = 12, d2 = 10, center = false);\n    \n    // Handle end cap\n    translate([0, 0, 60])\n        sphere(d = 14);\n    \n    // Handle reinforcement ring\n    translate([0, 0, 5])\n        cylinder(h = 3, d = 16);\n}\n\n// Grip texture module\nmodule grip() {\n    for(i = [0:5:50]) {\n        translate([0, 0, i])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 3, d = 14);\n            cylinder(h = 4, d = 10);\n        }\n    }\n}\n\n// Scoop bowl module\nmodule scoop_bowl() {\n    difference() {\n        // Main bowl\n        union() {\n            // Bowl body\n            scale([1, 1.2, 0.8])\n                sphere(d = 50);\n            \n            // Bowl rim\n            translate([0, 0, 20])\n                cylinder(h = 3, d = 52);\n                \n            // Connection to handle\n            translate([-25, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h = 20, d = 12);\n        }\n        \n        // Inner cavity\n        scale([0.9, 1.1, 0.7])\n            sphere(d = 48);\n            \n        // Handle hole\n        translate([-25, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 25, d = 10);\n    }\n}\n\n// Drainage holes module\nmodule drainage_holes() {\n    for(i = [0:120:240]) {\n        rotate([0, 0, i])\n        translate([0, 18, 0])\n        cylinder(h = 5, d = 3, center = true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "soil",
    "openscad_code": "// Hand-held Soil Auger for soil sampling\n// Medium complexity, realistic style\n// Overall length â‰ˆ 110 mm, handle diameter â‰ˆ 30 mm\n\n$fn=64;\n\n// Color constants\nhandle_col   = \"BurlyWood\";\nshaft_col    = \"Silver\";\nblade_col    = \"DarkSlateGray\";\ngrip_col     = \"SaddleBrown\";\n\n// Parameters\nhandle_len   = 40;\nhandle_d     = 30;\nshaft_len    = 60;\nshaft_d      = 8;\nblade_len    = 25;\nblade_d      = 20;\ngrip_len     = 30;\ngrip_d       = 32;\n\n// Main assembly\nmodule soil_auger() {\n    union() {\n        // T-handle\n        translate([0,0,shaft_len+handle_len/2])\n            color(handle_col) handle();\n\n        // Shaft\n        translate([0,0,shaft_len/2])\n            color(shaft_col) shaft();\n\n        // Auger blade (helix)\n        translate([0,0,-blade_len/2])\n            color(blade_col) helical_blade();\n\n        // Cross-grips on handle\n        color(grip_col)\n            for(i=[-1,1])\n                translate([0,0,shaft_len+handle_len-grip_len/2])\n                rotate([0,0,i*90])\n                    grip();\n    }\n}\n\n// T-shaped handle\nmodule handle() {\n    difference() {\n        // Main cylinder\n        cylinder(h=handle_len, d=handle_d, center=true);\n\n        // Flattened ends for finger comfort\n        translate([0,0,handle_len/2])\n            cube([handle_d*1.1, handle_d*1.1, 2], center=true);\n        translate([0,0,-handle_len/2])\n            cube([handle_d*1.1, handle_d*1.1, 2], center=true);\n    }\n}\n\n// Grip rings for T-handle\nmodule grip() {\n    difference() {\n        cylinder(h=grip_len, d=grip_d, center=true);\n        cylinder(h=grip_len+2, d=grip_d-4, center=true);\n    }\n}\n\n// Shaft rod\nmodule shaft() {\n    cylinder(h=shaft_len, d=shaft_d, center=true);\n}\n\n// Helical auger blade\nmodule helical_blade() {\n    union() {\n        // Central core\n        cylinder(h=blade_len, d=shaft_d+2, center=true);\n\n        // Helical blade\n    for (i = [0:10]) {\n        rotate([0,0,i*36])\n            translate([0,0,(i-5)*2.5])\n            blade_flange();\n    }\n    }\n}\n\n// Single segment of the blade\nmodule blade_flange() {\n    difference() {\n        // Main segment\n        rotate_extrude(angle=36, convexity=10)\n            translate([shaft_d/2+1,0])\n                square([blade_d/2-shaft_d/2-1, 2]);\n\n        // Taper outer edge\n        translate([(shaft_d+blade_d)/4,0,0])\n            rotate([0,90,0])\n                cylinder(h=blade_d/2-shaft_d/2-1, d1=3, d2=0.5);\n    }\n}\n\n// Render the tool\nsoil_auger();",
    "renders": true
  },
  {
    "tool": "compost",
    "openscad_code": "// Compost Turner Tool - Realistic Style\n// A handheld tool for mixing and aerating compost bins\n\n// Overall dimensions\nhandle_length = 80;\nhandle_diameter = 12;\nblade_diameter = 40;\nblade_length = 30;\ngrip_length = 40;\ngrip_diameter = 16;\n\n// Colors\ncolor_handle = \"SaddleBrown\";\ncolor_blade = \"DarkGreen\";\ncolor_grip = \"Black\";\n\n// Handle grip texture\nmodule grip_texture() {\n    difference() {\n        cylinder(h=grip_length, d=grip_diameter, $fn=32);\n        for(i = [0:5:grip_length-5]) {\n            translate([0, 0, i]) {\n                rotate([0, 0, 45]) {\n                    cube([20, 2, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main handle\nmodule handle() {\n    color(color_handle) {\n        // Main shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip section\n        translate([0, 0, handle_length-grip_length]) {\n            color(color_grip) grip_texture();\n        }\n        \n        // End cap\n        translate([0, 0, handle_length]) {\n            cylinder(h=3, d=handle_diameter+2, $fn=32);\n        }\n        \n        // Hanging hole\n        translate([0, 0, handle_length-5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=20, d=3, $fn=16);\n            }\n        }\n    }\n}\n\n// Aeration blade with mixing fins\nmodule aeration_blade() {\n    color(color_blade) {\n        // Central hub\n        cylinder(h=blade_length, d=10, $fn=32);\n        \n        // Main spiral blade\n    rotate_extrude(angle=360, $fn=64) {\n        translate([blade_diameter/2-5, 0, 0]) {\n            square([5, blade_length]);\n        }\n    }\n    \n    // Mixing fins\n    for(i = [0:60:359]) {\n        rotate([0, 0, i]) {\n            translate([blade_diameter/2-2, 0, blade_length/2]) {\n                cube([blade_diameter/2, 2, 8], center=true);\n            }\n        }\n    }\n    \n    // Pointed tip\n    translate([0, 0, blade_length]) {\n        cone_height = 15;\n        cylinder(h=cone_height, d1=10, d2=2, $fn=32);\n    }\n}\n}\n\n// Reinforcement collar\nmodule collar() {\n    color(\"Silver\") {\n        difference() {\n            cylinder(h=8, d=18, $fn=32);\n            cylinder(h=10, d=handle_diameter+2, $fn=32);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, -handle_length/2]) {\n    handle();\n}\n\ntranslate([0, 0, handle_length/2+3]) {\n    collar();\n}\n\ntranslate([0, 0, handle_length/2+7]) {\n    aeration_blade();\n}",
    "renders": true
  },
  {
    "tool": "mulch",
    "openscad_code": "// Mulch Spreader Tool - Realistic Style, Medium Complexity\n// Designed for 3D printing, no overhangs\n\n// Main parameters\nhandle_length = 80;\nhandle_diameter = 12;\nfork_width = 60;\nfork_length = 45;\nfork_tine_count = 4;\nfork_tine_thickness = 3;\ngrip_length = 30;\ngrip_diameter = 16;\n\n// Colors\ncolor_handle = \"SaddleBrown\";\ncolor_fork = \"DarkGray\";\ncolor_grip = \"Black\";\n\n// Handle grip module\nmodule grip() {\n    color(color_grip)\n    difference() {\n        cylinder(h=grip_length, d=grip_diameter, $fn=32);\n        // Add grip texture with grooves\n        for(i = [0:4]) {\n            translate([0, 0, i*6 + 2])\n            rotate([0, 0, 45])\n            cube([grip_diameter*1.5, 2, 3], center=true);\n        }\n    }\n}\n\n// Fork tine module\nmodule tine() {\n    color(color_fork)\n    difference() {\n        // Main tine shape\n        translate([0, 0, fork_length/2])\n        cube([fork_tine_thickness, fork_tine_thickness, fork_length], center=true);\n        \n        // Tapered end\n        translate([0, 0, fork_length-2])\n        cube([fork_tine_thickness*2, fork_tine_thickness*2, 4], center=true);\n    }\n}\n\n// Fork head module\nmodule fork_head() {\n    color(color_fork)\n    union() {\n        // Base plate\n        translate([0, 0, -2])\n        cube([fork_width, fork_tine_thickness*2, 4], center=true);\n        \n        // Tines\n        spacing = fork_width / (fork_tine_count + 1);\n        for(i = [1:fork_tine_count]) {\n            translate([-fork_width/2 + i*spacing, 0, 0])\n            tine();\n        }\n        \n        // Reinforcement rib\n        translate([0, 0, -5])\n        cube([fork_width*0.8, 5, 6], center=true);\n    }\n}\n\n// Handle shaft module\nmodule handle_shaft() {\n    color(color_handle)\n    union() {\n        // Main shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // End cap\n        translate([0, 0, handle_length])\n        cylinder(h=5, d1=handle_diameter, d2=handle_diameter*1.2, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle assembly\n    translate([0, 0, handle_length/2])\n    rotate([90, 0, 0])\n    handle_shaft();\n    \n    // Grip\n    translate([0, 0, handle_length-15])\n    rotate([90, 0, 0])\n    grip();\n    \n    // Fork attached to handle end\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    translate([0, handle_length, 0])\n    fork_head();\n}\n\n// Hanging hole\ntranslate([0, handle_length-10, 0])\nrotate([90, 0, 0])\ndifference() {\n    cylinder(h=5, d=handle_diameter+4, $fn=32);\n    cylinder(h=6, d=handle_diameter-4, $fn=32);\n}",
    "renders": true
  },
  {
    "tool": "peat",
    "openscad_code": "// Peat Spade (Turf Cutter) â€“ OpenSCAD\n// Realistic, medium complexity\n// Overall length ~180 mm, scaled for 3D printing\n\n// Parameters\nhandle_len = 90;\nhandle_d = 12;\nshaft_len = 40;\nshaft_d = 16;\nblade_h = 8;\nblade_w = 40;\nblade_l = 55;\ngrip_ring_d = 14;\ngrip_ring_h = 6;\nrivet_r = 1.5;\nrivet_h = 2;\n\n// Colors\ncolor_handle = \"SaddleBrown\";\ncolor_shaft = \"DarkOliveGreen\";\ncolor_blade = \"Gray\";\n\n// Main assembly\ndifference() {\n    union() {\n        // Handle\n        color(color_handle)\n        translate([0, 0, 0])\n        cylinder(h = handle_len, d = handle_d, $fn = 32);\n\n        // Grip rings on handle\n        for (i = [1:3]) {\n            color(color_handle)\n            translate([0, 0, handle_len * 0.15 * i])\n            cylinder(h = grip_ring_h, d = grip_ring_d, $fn = 32);\n        }\n\n        // Shaft\n        color(color_shaft)\n        translate([0, 0, handle_len])\n        cylinder(h = shaft_len, d = shaft_d, $fn = 32);\n\n        // Blade body\n        color(color_blade)\n        translate([0, 0, handle_len + shaft_len])\n        linear_extrude(height = blade_h)\n        polygon(points = [\n            [-blade_w/2, 0],\n            [blade_w/2, 0],\n            [blade_w/2*0.8, blade_l],\n            [-blade_w/2*0.8, blade_l]\n        ]);\n\n        // Blade edge\n        color(\"DarkGray\")\n        translate([0, 0, handle_len + shaft_len])\n        linear_extrude(height = blade_h)\n        polygon(points = [\n            [-blade_w/2*0.8, blade_l],\n            [blade_w/2*0.8, blade_l],\n            [0, blade_l + 6]\n        ]);\n\n        // Rivets fixing shaft to blade\n        for (x = [-shaft_d/3, shaft_d/3]) {\n            color(\"DarkGray\")\n            translate([x, 0, handle_len + shaft_len - rivet_h/2])\n            rotate([90, 0, 0])\n            cylinder(h = rivet_h, r = rivet_r, $fn = 12);\n        }\n    }\n\n    // Hollow shaft for weight reduction\n    color(color_shaft)\n    translate([0, 0, handle_len + 2])\n    cylinder(h = shaft_len - 4, d = shaft_d - 4, $fn = 32);\n\n    // Handle cavity\n    translate([0, 0, 2])\n    cylinder(h = handle_len - 4, d = handle_d - 4, $fn = 32);\n}",
    "renders": true
  },
  {
    "tool": "coir",
    "openscad_code": "// Coir Tool (Coconut Fiber Extractor) - Realistic Style, Medium Complexity\n// This is a traditional South-Indian coir tool with handle, blade, and collection mechanism\n\n// Tool dimensions (in mm)\nhandle_length = 80;\nhandle_diameter = 12;\nblade_width = 25;\nblade_height = 40;\nblade_thickness = 3;\ncollection_box_length = 35;\ncollection_box_width = 20;\ncollection_box_height = 15;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255];  // Dark wood\nmetal_color = [192/255, 192/255, 192/255];  // Steel\nleather_color = [101/255, 67/255, 33/255];  // Dark leather\n\nmodule handle() {\n    // Main handle with ergonomic grip\n    color(wood_color) {\n        // Handle shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=20);\n        \n        // Grip rings for better hold\n        for(i = [0:8]) {\n            translate([0, 0, i * 8 + 5]) {\n                cylinder(h=3, d=handle_diameter + 2, $fn=16);\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length]) {\n            sphere(d=handle_diameter + 4, $fn=20);\n        }\n    }\n}\n\nmodule blade() {\n    color(metal_color) {\n        // Main blade body\n        translate([0, 0, -blade_height/2]) {\n            cube([blade_thickness, blade_width, blade_height], center=true);\n        }\n        \n        // Curved cutting edge\n        translate([blade_thickness/2 + 0.5, 0, -blade_height/2 - 5]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=blade_width + 5, d=blade_height + 10, center=true, $fn=100);\n            }\n        }\n        \n        // Blade reinforcement ribs\n        for(i = [-1, 1]) {\n            translate([0, i * blade_width/4, 0]) {\n                cube([blade_thickness + 2, 2, blade_height - 5], center=true);\n            }\n        }\n    }\n}\n\nmodule collection_box() {\n    color(leather_color) {\n        // Main box\n        translate([0, -blade_width/2 - collection_box_width/2 - 5, -collection_box_height/2]) {\n            difference() {\n                cube([collection_box_length, collection_box_width, collection_box_height], center=false);\n                \n                // Hollow interior\n                translate([2, 2, 2]) {\n                    cube([collection_box_length - 4, collection_box_width - 4, collection_box_height - 2], center=false);\n                }\n            }\n            \n            // Drainage holes\n            for(i = [1:3]) {\n                for(j = [1:2]) {\n                    translate([i * 10, j * 7, -1]) {\n                        cylinder(h=3, d=2, $fn=10);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule mounting_bracket() {\n    color(metal_color) {\n        // Bracket to attach blade to handle\n        translate([handle_diameter/2, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cube([handle_diameter, blade_thickness + 4, 10], center=true);\n            }\n            \n            // Mounting screws\n            for(i = [-1, 1]) {\n                translate([handle_diameter/2 + 2, i * 3, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=8, d=2, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Mounting bracket\n    translate([0, 0, handle_length/2 + 10]) {\n        mounting_bracket();\n    }\n    \n    // Blade\n    translate([handle_diameter/2 + blade_thickness/2 + 2, 0, handle_length/2 + 10]) {\n        blade();\n    }\n    \n    // Collection box\n    translate([handle_diameter/2 + blade_thickness/2 + 2, 0, handle_length/2 + 10 - blade_height/2 + collection_box_height/2]) {\n        collection_box();\n    }\n}\n\n// Tool identification marking\ntranslate([0, 0, handle_length + 5]) {\n    color([0, 0, 0]) {\n        rotate([0, 90, 0]) {\n            linear_extrude(height=0.5) {\n                text(\"COIR\", size=6, halign=\"center\", valign=\"center\");\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "perlite",
    "openscad_code": "// Perlite Spreader Tool - Realistic Style, Medium Complexity\n// Used for evenly distributing perlite in gardening applications\n\n$fn = 32;\n\n// Main dimensions\nhandle_length = 120;\nhandle_diameter = 25;\nspreader_width = 80;\nspreader_depth = 60;\nspreader_thickness = 3;\ngrip_length = 80;\ngrip_diameter = 28;\n\nmodule handle() {\n    // Main handle tube with slight taper\n    color(\"darkslategray\")\n    union() {\n        // Handle tube\n        cylinder(h=handle_length, d1=handle_diameter, d2=handle_diameter*0.9);\n        \n        // Grip section with texture\n        translate([0, 0, handle_length-grip_length])\n        difference() {\n            cylinder(h=grip_length, d=grip_diameter);\n            // Grip rings for better hold\n            for(i = [0:8]) {\n                translate([0, 0, i*10])\n                cylinder(h=2, d=grip_diameter-2);\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n        cylinder(h=5, d=grip_diameter+2);\n    }\n}\n\nmodule spreader_head() {\n    color(\"silver\")\n    union() {\n        // Main spreader body - perforated tray\n        difference() {\n            // Outer shell\n            translate([0, 0, -spreader_depth/2])\n            cube([spreader_width, spreader_thickness, spreader_depth], center=true);\n            \n            // Distribution holes - staggered pattern\n            for(x = [-spreader_width/2+5:10:spreader_width/2-5]) {\n                for(z = [-spreader_depth/2+5:10:spreader_depth/2-5]) {\n                    if((x/10 + z/10) % 2 == 0) {\n                        translate([x, 0, z])\n                        cylinder(h=spreader_thickness+2, d=4, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Side rails to contain perlite\n        translate([spreader_width/2-1, 0, 0])\n        cube([2, 8, spreader_depth-10], center=true);\n        translate([-spreader_width/2+1, 0, 0])\n        cube([2, 8, spreader_depth-10], center=true);\n        \n        // Reinforcement ribs underneath\n        for(x = [-spreader_width/2+10:20:spreader_width/2-10]) {\n            translate([x, -spreader_thickness/2-2, 0])\n            cube([2, 4, spreader_depth-10], center=true);\n        }\n    }\n}\n\nmodule mounting_bracket() {\n    color(\"silver\")\n    union() {\n        // Curved bracket connecting handle to spreader\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        difference() {\n            // Main bracket\n            cylinder(h=25, d=20);\n            // Hollow center\n            cylinder(h=26, d=15);\n        }\n        \n        // Reinforcement gussets\n        for(angle = [45, 135]) {\n            rotate([0, 0, angle])\n            translate([0, -10, 0])\n            cube([15, 3, 8], center=true);\n        }\n        \n        // Mounting screws\n        color(\"black\")\n        for(pos = [[5, 0, 5], [-5, 0, 5]]) {\n            translate(pos)\n            cylinder(h=8, d=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle with slight angle for ergonomic use\n    rotate([15, 0, 0])\n    handle();\n    \n    // Mounting bracket at end of handle\n    translate([0, 0, handle_length-10])\n    mounting_bracket();\n    \n    // Spreader head\n    translate([0, -20, handle_length-5])\n    rotate([105, 0, 0])\n    spreader_head();\n}",
    "renders": true
  },
  {
    "tool": "vermiculite",
    "openscad_code": "// Vermiculite tool (soil scoop / garden hand tool)\n// Overall length ~95 mm, blade width ~60 mm, handle grip Ã˜22 mm\n// Wall thickness â‰¥1.2 mm for FDM printing (0.4 mm nozzle, 3 perimeters)\n\n// --- color constants ---\n$fn = 40;\nmetal_col = [0.60,0.60,0.60];   // galvanized steel\ngrip_col  = [0.10,0.10,0.10];   // soft TPR over-mold\n\n// --- main assembly ---\nmodule vermiculite_tool(){\n    union(){\n        // scoop blade\n        translate([0,0,8])\n            color(metal_col) scoop_blade();\n\n        // handle shaft\n        translate([0,0,0])\n            color(metal_col) handle_shaft();\n\n        // ergonomic grip sleeve\n        translate([0,0,25])\n            color(grip_col) grip_sleeve();\n\n        // hanging hole at butt\n        translate([0,0,48])\n            color(metal_col) hanging_hole();\n    }\n}\n\n// --- scoop blade ---\nmodule scoop_blade(){\n    difference(){\n        // basic elliptical bowl\n        scale([1,1.4,0.5])\n            sphere(d=60, center=true);\n\n        // thin bottom shell\n        translate([0,0,-3])\n            scale([0.9,1.25,0.25])\n                sphere(d=60, center=true);\n\n        // cut rear flat\n        translate([0,-45,0])\n            cube([100,50,50], center=true);\n\n        // side drain slots\n        for(y=[-18,-6,6,18])\n            translate([0,y,-5])\n                rotate([90,0,0])\n                    cylinder(d=3, h=4, center=true);\n    }\n\n    // sharpened front lip\n    translate([0,39,0])\n        rotate([90,0,0])\n            cylinder(h=2, r1=30, r2=28, center=true);\n}\n\n// --- handle shaft ---\nmodule handle_shaft(){\n    // central tube\n    cylinder(h=50, d=16, center=false);\n\n    // reinforcing ribs\n    for(i=[1:3])\n        translate([0,0,i*10])\n            rotate([0,0,i*120])\n                cube([16,2,10], center=true);\n}\n\n// --- ergonomic grip sleeve ---\nmodule grip_sleeve(){\n    difference(){\n        // main sleeve\n        cylinder(h=25, d=22, center=true);\n\n        // finger grooves\n        for(i=[0:3])\n            rotate([0,0,i*90])\n                translate([11,0,0])\n                    cylinder(d=8, h=30, center=true);\n\n        // logo recess\n        translate([0,0,12.5])\n            cube([18,6,2], center=true);\n    }\n}\n\n// --- hanging hole ---\nmodule hanging_hole(){\n    // boss\n    cylinder(h=8, d=12, center=true);\n\n    // 6 mm hole\n    translate([0,0,-1])\n        cylinder(h=10, d=6, center=true);\n}\n\n// --- render ---\nvermiculite_tool();",
    "renders": true
  },
  {
    "tool": "lime",
    "openscad_code": "// Lime Tool (Citrus Press/Juicer)\n// Medium complexity realistic style\n\n// Color definitions\nlime_color = [0.6, 0.8, 0.2];\nyellow_color = [0.95, 0.8, 0.1];\nmetal_color = [0.7, 0.7, 0.75];\nblack_color = [0.1, 0.1, 0.1];\n\n// Overall dimensions\ntotal_height = 85;\nbase_diameter = 60;\nhandle_length = 90;\nhandle_diameter = 12;\n\n// Module for the lime half\nmodule lime_half() {\n    color(lime_color) {\n        // Main lime body\n        difference() {\n            sphere(d=35, $fn=64);\n            // Cut in half\n            translate([0, 0, -17.5]) cube([70, 70, 35], center=true);\n            // Add segments\n            for(i=[1:8]) {\n                rotate([0, 0, i*22.5]) {\n                    translate([0, -5, 0]) cube([70, 10, 35], center=true);\n                }\n            }\n        }\n        // Lime flesh texture\n        color(yellow_color) {\n            for(i=[1:6]) {\n                rotate([0, 0, i*30]) {\n                    translate([0, 0, -16]) cylinder(h=2, r1=12, r2=10, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Juicer cone with holes\nmodule juicer_cone() {\n    color(metal_color) {\n        // Main cone\n        cylinder(h=25, r1=8, r2=20, $fn=64);\n        // Juice holes\n        for(i=[1:12]) {\n            rotate([0, 0, i*30]) {\n                translate([15, 0, 10]) rotate([90, 0, 0]) \n                    cylinder(h=5, r=2, $fn=16);\n            }\n        }\n    }\n}\n\n// Handle module with grip texture\nmodule handle() {\n    color(black_color) {\n        // Main handle\n        cylinder(h=handle_length, r=handle_diameter/2, $fn=32);\n        // Grip rings\n        for(i=[1:5]) {\n            translate([0, 0, i*15-10]) \n                cylinder(h=3, r=handle_diameter/2+1, $fn=32);\n        }\n    }\n}\n\n// Base with juice reservoir\nmodule base() {\n    color(metal_color) {\n        difference() {\n            // Main base\n            cylinder(h=30, r=base_diameter/2, $fn=64);\n            // Center hole for cone\n            cylinder(h=35, r=21, $fn=64);\n            // Pour spout\n            translate([base_diameter/2-10, 0, 15]) \n                rotate([90, 0, 0]) cylinder(h=20, r=5, $fn=16);\n        }\n        // Base ring for stability\n        translate([0, 0, 2]) \n            cylinder(h=5, r=base_diameter/2+2, r2=base_diameter/2, $fn=64);\n    }\n}\n\n// Hinge mechanism\nmodule hinge() {\n    color(metal_color) {\n        // Left part\n        translate([-base_diameter/2-5, 0, 30]) \n            cube([10, 5, 15], center=true);\n        // Right part\n        translate([base_diameter/2+5, 0, 30]) \n            cube([10, 5, 15], center=true);\n        // Pin\n        translate([-base_diameter/2, 0, 37.5]) \n            cylinder(h=base_diameter+10, r=2, $fn=16);\n    }\n}\n\n// Press arm\nmodule press_arm() {\n    color(metal_color) {\n        // Main arm\n        translate([0, 0, 65]) \n            cube([base_diameter+20, 15, 8], center=true);\n        // Reinforcement\n        translate([0, 0, 61]) \n            cube([base_diameter+10, 13, 4], center=true);\n        // Handle mount\n        translate([base_diameter/2+10, 0, 75]) \n            rotate([90, 0, 0]) cylinder(h=20, r=handle_diameter/2+2, $fn=16);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) base();\ntranslate([0, 0, 30]) juicer_cone();\ntranslate([0, 0, 30]) hinge();\ntranslate([0, 0, 0]) press_arm();\ntranslate([base_diameter/2+20, 0, 75]) rotate([90, 0, 90]) handle();\ntranslate([0, 0, 55]) lime_half();",
    "renders": true
  },
  {
    "tool": "fertilizer",
    "openscad_code": "// Handheld fertilizer spreader with crank mechanism\n// 75mm total length, 30mm diameter drum\n\n// Main colors\ncolor(\"ForestGreen\") \nunion() {\n    // Seed drum assembly\n    translate([0,0,0]) seed_drum();\n    \n    // Crank handle assembly\n    translate([0,0,0]) crank_handle();\n    \n    // Distribution spout\n    translate([0,-25,5]) distribution_spout();\n    \n    // Seed level window\n    translate([8,0,15]) seed_window();\n}\n\n// Seed drum module\nmodule seed_drum() {\n    difference() {\n        // Main cylindrical tank\n        cylinder(h=60, r=15, $fn=48);\n        \n        // Hollow center\n        translate([0,0,-2]) cylinder(h=64, r=13, $fn=48);\n        \n        // Fill port on top\n        translate([0,0,63]) cylinder(h=5, r=5, $fn=24);\n        \n        // Small fill opening\n        translate([0,0,65]) cylinder(h=3, r=3, $fn=24);\n    }\n    \n    // Internal agitator fins (3x)\n    for(i=[0:120:359]) {\n        rotate([0,0,i]) translate([10,0,30]) cube([5,2,30], center=true);\n    }\n    \n    // End caps\n    translate([0,0,0]) cylinder(h=3, r=15, $fn=48);\n    translate([0,0,60]) cylinder(h=3, r=15, $fn=48);\n}\n\n// Crank handle module\nmodule crank_handle() {\n    // Main crank arm\n    color(\"DimGray\")\n    translate([0,0,60]) rotate([90,0,0]) cylinder(h=25, r=3, $fn=16);\n    \n    // Crank knob\n    translate([0,25,60]) sphere(r=5, $fn=16);\n    \n    // Knob grip ring\n    difference() {\n        translate([0,25,60]) cylinder(h=8, r=4, $fn=16);\n        translate([0,25,56]) cylinder(h=10, r=3, $fn=16);\n    }\n    \n    // Connection to drum\n    color(\"ForestGreen\")\n    translate([0,0,60]) cylinder(h=5, r=3, $fn=16);\n}\n\n// Distribution spout module\nmodule distribution_spout() {\n    difference() {\n        // Main spout body\n        color(\"DarkGreen\")\n        hull() {\n            translate([0,0,0]) cylinder(h=2, r=8, $fn=24);\n            translate([0,-8,0]) cylinder(h=2, r=12, $fn=24);\n        }\n        \n        // Seed exit holes (5x small holes)\n        for(x=[-6:3:6]) {\n            translate([x,-8,0]) cylinder(h=3, r=1.5, $fn=8);\n        }\n    }\n    \n    // Spout support ribs\n    color(\"ForestGreen\")\n    for(i=[-1:1]) {\n        translate([i*8,-15,2]) rotate([90,0,0]) cylinder(h=5, r=1, $fn=8);\n    }\n}\n\n// Seed level window module\nmodule seed_window() {\n    // Clear window\n    color(\"LightBlue\", 0.6)\n    difference() {\n        translate([0,0,0]) cube([10,2,20], center=true);\n        translate([0,0,0]) cube([8,3,18], center=true);\n    }\n    \n    // Window frame\n    color(\"DarkGray\")\n    translate([0,0,0]) difference() {\n        cube([12,3,22], center=true);\n        cube([11,4,21], center=true);\n    }\n    \n    // Measurement marks\n    color(\"Black\")\n    for(h=[-8:4:8]) {\n        translate([5.5,0,h]) cube([1,4,0.5], center=true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "feed",
    "openscad_code": "// Realistic Feed Tool - Medium Complexity\n// A combined feed scoop and pusher for livestock feeding\n\n$fn = 32;\n\nmodule handle() {\n    // Main handle grip with ergonomic shape\n    translate([0, 0, 105]) rotate([90, 0, 0]) {\n        // Handle core\n        color(\"saddlebrown\") {\n            cylinder(h=80, d1=25, d2=22);\n            \n            // Grip rings for better hold\n            for(i = [0:10:70]) {\n                translate([0, 0, i]) \n                    cylinder(h=3, d1=28, d2=28);\n            }\n            \n            // End cap\n            translate([0, 0, 80])\n                sphere(d=30);\n        }\n    }\n}\n\nmodule scoop() {\n    // Main feed scoop bowl\n    translate([0, -40, 0]) {\n        color(\"silver\") {\n            // Scoop body - half cylinder shape\n            difference() {\n                rotate([0, 90, 0]) \n                    cylinder(h=80, r=35);\n                \n                // Cut away back half\n                translate([-50, -35, -35])\n                    cube([100, 70, 70]);\n                \n                // Taper the front edge\n                translate([0, -35, 35])\n                    rotate([0, 0, 45])\n                        cube([50, 70, 50]);\n            }\n            \n            // Reinforcement ribs on back\n            for(i = [-25:25:25]) {\n                translate([i, 35, 0])\n                    cube([3, 5, 30]);\n            }\n        }\n    }\n}\n\nmodule pusher_blade() {\n    // Flat pusher blade on opposite end\n    translate([0, 40, 0]) {\n        color(\"silver\") {\n            // Main blade\n            translate([0, 0, 15])\n                cube([60, 3, 30]);\n            \n            // Blade support structure\n            translate([0, 0, 0]) {\n                difference() {\n                    cube([60, 8, 15]);\n                    \n                    // Rounded edges\n                    for(corner = [[-30, 0], [30, 0]]) {\n                        translate([corner[0], 8, corner[1]])\n                            rotate([0, -90, 0])\n                                cylinder(h=8, r=7.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule hanging_hook() {\n    // Hook for hanging storage\n    translate([0, 35, 30]) {\n        color(\"darkgray\") {\n            rotate([0, 90, 0]) {\n                difference() {\n                    // Hook body\n                    cylinder(h=15, r=5);\n                    \n                    // Hook opening\n                    translate([0, -5, 0])\n                        cube([10, 10, 15]);\n                }\n                \n                // Hook curve\n                translate([0, 0, 7.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=20, r=5);\n            }\n        }\n    }\n}\n\nmodule measurement_marks() {\n    // Measurement markings on scoop\n    color(\"black\") {\n        for(level = [1:3]) {\n            translate([0, -40 + level * 10, 35])\n                cube([60, 0.5, 0.5]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Central shaft connecting all parts\n    color(\"silver\") {\n        cylinder(h=100, r=10);\n    }\n    \n    handle();\n    scoop();\n    pusher_blade();\n    hanging_hook();\n    measurement_marks();\n}",
    "renders": true
  },
  {
    "tool": "mix",
    "openscad_code": "// Realistic medium-complexity OpenSCAD model: Hand-held Mixing Paddle\n// Overall length â‰ˆ 90 mm, blade diameter â‰ˆ 45 mm, handle Ã˜ 20 mm\n// 3D-printable with no steep overhangs (>60Â°)\n\nuse <colors.scad>   // Standard color names\n\n$fn = 36;\n\n// Main assembly\nunion() {\n    // Handle\n    color(\"black\")\n    translate([0,0,0])\n        handle_assembly();\n\n    // Shaft\n    color(\"silver\")\n    translate([0,0,35])\n        shaft_assembly();\n\n    // Paddle head\n    color(\"silver\")\n    translate([0,0,75])\n        paddle_assembly();\n}\n\n// ---------- Modules ----------\n\nmodule handle_assembly() {\n    // Main grip\n    difference() {\n        cylinder(h = 35, d = 20, center = false);\n        // Light knurling grooves\n        for (i = [0:8]) {\n            rotate([0,0,i*22.5])\n            translate([9.5,0,2])\n                cube([1, 0.5, 31]);\n        }\n    }\n    // End cap with slight fillet\n    translate([0,0,35])\n        cylinder(h = 3, d1 = 20, d2 = 18, center = false);\n}\n\nmodule shaft_assembly() {\n    // Straight rod\n    cylinder(h = 40, d = 8, center = false);\n\n    // Reinforcement collar at bottom\n    translate([0,0,0])\n        cylinder(h = 4, d = 12, center = false);\n\n    // Reinforcement collar at top\n    translate([0,0,36])\n        cylinder(h = 4, d = 12, center = false);\n}\n\nmodule paddle_assembly() {\n    // Central hub\n    cylinder(h = 6, d = 10, center = false);\n\n    // Four curved mixing blades\n    for (a = [0:90:270]) {\n        rotate([0,0,a])\n        translate([0,0,3])\n            single_blade();\n    }\n\n    // Drip ring under blades\n    translate([0,0,-2])\n        cylinder(h = 2, d = 50, center = false);\n}\n\nmodule single_blade() {\n    // Blade profile: curved and twisted\n    difference() {\n        union() {\n            // Main blade body\n            translate([0,12,0])\n                rotate([0,0,-15])\n                scale([1,1.2,0.8])\n                cylinder(h = 15, d = 6, center = true);\n\n            // Outer tip flare\n            translate([0,24,0])\n                rotate([0,0,-25])\n                scale([1.2,1,1])\n                sphere(d = 7);\n        }\n\n        // Hollow underside to reduce weight\n        translate([0,12,-1])\n            rotate([0,0,-15])\n            scale([0.6,1,1.2])\n            cylinder(h = 18, d = 4, center = true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "blend",
    "openscad_code": "// Realistic Blend Tool (Blender) - Medium Complexity\n// Overall dimensions: ~85mm height, ~70mm width\n\n// Color constants\ncolor_body = [0.2, 0.2, 0.2];  // Dark grey\ncolor_jar = [0.8, 0.8, 0.9];  // Light frosted glass\ncolor_blades = [0.6, 0.6, 0.6];  // Metallic\ncolor_controls = [0.1, 0.1, 0.1];  // Black\ncolor_accents = [0.9, 0.1, 0.1];  // Red accents\n\n// Base module with motor housing\nmodule base() {\n    color(color_body)\n    union() {\n        // Main base cylinder\n        cylinder(h=35, d=65, $fn=64);\n        \n        // Control panel area\n        translate([0, -25, 35])\n            cube([40, 12, 15], center=true);\n        \n        // Control buttons\n        translate([-15, -25, 43]) {\n            color(color_controls)\n            cylinder(h=3, d=8, $fn=32);\n            translate([10, 0, 0])\n                cylinder(h=3, d=8, $fn=32);\n            translate([20, 0, 0])\n                cylinder(h=3, d=8, $fn=32);\n        }\n        \n        // Power indicator light\n        translate([0, -30, 43]) {\n            color(color_accents)\n            sphere(d=4);\n        }\n    }\n}\n\n// Jar with measurement markings\nmodule jar() {\n    color(color_jar)\n    difference() {\n        // Main jar body\n        cylinder(h=50, d1=55, d2=45, $fn=64);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=52, d1=50, d2=40, $fn=64);\n        \n        // Measurement markings\n        for(i = [1:4]) {\n            translate([23, 0, i*10])\n                rotate([90, 0, 0])\n                    cube([0.5, 5, 1], center=true);\n        }\n    }\n}\n\n// Blade assembly\nmodule blades() {\n    color(color_blades)\n    union() {\n        // Central hub\n        cylinder(h=15, d=15, $fn=32);\n        \n        // Four blade arms\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) {\n                // Blade base\n                translate([7.5, 0, 7.5])\n                    rotate([90, 0, 0])\n                        cube([20, 3, 1.5], center=true);\n                \n                // Blade tip\n                translate([17.5, 0, 7.5])\n                    rotate([90, 0, 0])\n                        cube([5, 2, 1], center=true);\n            }\n        }\n    }\n}\n\n// Lid with handle\nmodule lid() {\n    color(color_body)\n    union() {\n        // Main lid disk\n        cylinder(h=3, d=50, $fn=64);\n        \n        // Handle grip\n        translate([0, 0, 10])\n            cylinder(h=15, d=20, $fn=32);\n        \n        // Grip ridges\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n                translate([10, 0, 17.5])\n                    cube([0.5, 4, 15], center=true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) base();\ntranslate([0, 0, 35]) jar();\ntranslate([0, 0, 45]) blades();\ntranslate([0, 0, 90]) lid();",
    "renders": true
  },
  {
    "tool": "seed",
    "openscad_code": "// Seed Planting Tool (Realistic Style)\n// Multi-function dibber with depth markings and ergonomic handle\n\n// Global parameters\nhandle_length = 85;\nhandle_diameter = 25;\nshaft_length = 60;\nshaft_diameter = 15;\ntip_length = 25;\nwall_thickness = 3;\ngrip_depth = 1.5;\n\n// Handle module with ergonomic grip\nmodule handle() {\n    color(\"BurlyWood\")\n    union() {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([0, -handle_diameter/2 + grip_depth, handle_length/2])\n            difference() {\n                cylinder(h=handle_length * 0.8, d=handle_diameter + 2, $fn=32);\n                translate([0, 0, -1])\n                cylinder(h=handle_length * 0.8 + 2, d=handle_diameter - grip_depth * 2, $fn=32);\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n        cylinder(h=5, d=handle_diameter + 4, $fn=32);\n        \n        // Hanging hole\n        translate([0, 0, handle_length - 10])\n        rotate([90, 0, 0])\n        cylinder(h=handle_diameter, d=6, $fn=16);\n    }\n}\n\n// Shaft with depth markings\nmodule shaft() {\n    color(\"Silver\")\n    union() {\n        // Main shaft\n        cylinder(h=shaft_length + tip_length, d=shaft_diameter, $fn=24);\n        \n        // Depth markings (every 1cm)\n        for(depth = [10:10:shaft_length]) {\n            translate([0, 0, depth])\n            difference() {\n                cylinder(h=2, d=shaft_diameter + 4, $fn=24);\n                cylinder(h=3, d=shaft_diameter - 1, $fn=24);\n            }\n        }\n        \n        // Measurement numbers (raised bumps)\n        for(depth = [20:20:shaft_length]) {\n            translate([shaft_diameter/2 + 2, -2, depth - 1])\n            cube([4, 4, 2]);\n            translate([shaft_diameter/2 + 2, -2, depth - 1])\n            cube([2, 2, 4]);\n        }\n    }\n}\n\n// Pointed tip for soil penetration\nmodule tip() {\n    color(\"DarkGray\")\n    translate([0, 0, shaft_length])\n    cylinder(h=tip_length, d1=shaft_diameter, d2=1, $fn=16);\n}\n\n// Seed dispenser mechanism\nmodule seed_dispenser() {\n    color(\"Gold\")\n    translate([0, 0, shaft_length - 15])\n    difference() {\n        // Main chamber\n        sphere(d=shaft_diameter + 8);\n        \n        // Seed storage cavity\n        sphere(d=shaft_diameter + 4);\n        \n        // Dispensing holes\n        rotate([0, 90, 0])\n        for(angle = [45:90:315]) {\n            rotate([0, 0, angle])\n            translate([0, 0, -shaft_diameter/2])\n            cylinder(h=shaft_diameter, d=3, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Transition from handle to shaft\n    translate([0, 0, handle_length - 5])\n    color(\"Brown\")\n    cylinder(h=10, d1=handle_diameter, d2=shaft_diameter + 4, $fn=32);\n    \n    // Shaft and tip\n    translate([0, 0, handle_length + 5])\n    union() {\n        shaft();\n        tip();\n        seed_dispenser();\n    }\n}\n\n// Grip enhancement rings\ncolor(\"Black\")\nfor(pos = [15:20:handle_length - 20]) {\n    translate([0, 0, pos])\n    difference() {\n        cylinder(h=3, d=handle_diameter + 2, $fn=32);\n        cylinder(h=4, d=handle_diameter - 2, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "tool": "bulb",
    "openscad_code": "// OpenSCAD Bulb Tool - Realistic Style, Medium Complexity\n// Designed for 3D printing - approximately 80mm total length\n\n// Bulb parameters\nbulb_radius = 18;\nneck_length = 12;\nneck_radius = 8;\nbase_height = 15;\nbase_radius = 12;\nthread_height = 2;\nthread_depth = 1;\nhandle_length = 45;\nhandle_diameter = 15;\ngrip_length = 30;\n\n// Main module\nmodule bulb_tool() {\n    color(\"ivory\") {\n        // Glass bulb with slight taper\n        translate([0, 0, base_height + neck_length + bulb_radius/2]) {\n            sphere(r = bulb_radius, $fn = 32);\n        }\n        \n        // Neck connecting bulb to base\n        translate([0, 0, base_height + neck_length/2]) {\n            cylinder(h = neck_length, r1 = neck_radius, r2 = neck_radius * 0.9, $fn = 32);\n        }\n    }\n    \n    // Metal base with threads\n    color(\"silver\") {\n        difference() {\n            // Main base cylinder\n            cylinder(h = base_height, r = base_radius, $fn = 32);\n            \n            // Thread grooves\n            for(i = [0:3]) {\n                translate([0, 0, i * thread_height + 1]) {\n                    rotate([0, 0, i * 30]) {\n                        cylinder(h = thread_height + 0.1, r = base_radius - thread_depth, $fn = 32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Handle with grip texture\n    color(\"black\") {\n        // Main handle\n        translate([0, 0, -handle_length]) {\n            cylinder(h = handle_length - 5, r = handle_diameter/2, $fn = 32);\n        }\n        \n        // Grip texture rings\n        for(i = [0:5]) {\n            translate([0, 0, -handle_length + 5 + i * 5]) {\n                difference() {\n                    cylinder(h = 3, r = handle_diameter/2 + 1, $fn = 32);\n                    cylinder(h = 3.1, r = handle_diameter/2 - 1, $fn = 32);\n                }\n            }\n        }\n    }\n    \n    // End cap\n    color(\"silver\") {\n        translate([0, 0, -handle_length - 5]) {\n            cylinder(h = 5, r = handle_diameter/2 + 2, $fn = 32);\n        }\n    }\n    \n    // Filament support wires inside bulb\n    color(\"gray\") {\n        translate([0, 0, base_height + neck_length + bulb_radius/2]) {\n            for(i = [0:2]) {\n                rotate([0, 0, i * 120]) {\n                    translate([bulb_radius * 0.3, 0, 0]) {\n                        cylinder(h = bulb_radius * 0.8, r = 0.5, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete tool\nbulb_tool();",
    "renders": true
  },
  {
    "tool": "tuber",
    "openscad_code": "// Tuber Tool - Potato Eye Remover\n// Realistic style, medium complexity\n\n$fn = 30;\n\n// Main dimensions\nhandle_length = 80;\nhandle_diameter = 20;\nhead_diameter = 15;\nblade_depth = 8;\nblade_diameter = 12;\n\n// Colors\nhandle_color = \"SaddleBrown\";\nmetal_color = \"Silver\";\nblade_color = \"LightGray\";\n\n// Handle grip texture\nmodule grip_texture() {\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36]) \n            translate([0, handle_diameter/2 - 1, 0])\n                color(handle_color)\n                    cube([handle_diameter * 0.8, 2, handle_length/10], center=true);\n    }\n}\n\n// Handle with ergonomic shape\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        cylinder(h=handle_length, d1=handle_diameter, d2=handle_diameter * 0.9);\n        \n        // Grip rings\n        for (i = [1:3:handle_length-10]) {\n            translate([0, 0, i])\n                cylinder(h=3, d=handle_diameter + 2, center=true);\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n            sphere(d=handle_diameter);\n    }\n    \n    // Grip texture\n    translate([0, 0, handle_length/2])\n        grip_texture();\n}\n\n// Tool head with cutter mechanism\nmodule tool_head() {\n    // Head base\n    color(metal_color) {\n        translate([0, 0, -5])\n            cylinder(h=10, d=head_diameter);\n    }\n    \n    // Blade assembly\n    color(blade_color) {\n        // Cylindrical cutter\n        translate([0, 0, -blade_depth - 2])\n            cylinder(h=blade_depth, d=blade_diameter);\n        \n        // Inner cutting edge\n        translate([0, 0, -blade_depth - 2.5])\n            cylinder(h=blade_depth + 1, d=blade_diameter - 2);\n        \n        // Pointed tip\n        translate([0, 0, -blade_depth - 2])\n            cylinder(h=5, d1=blade_diameter, d2=0);\n    }\n    \n    // Reinforcement ring\n    color(metal_color) {\n        translate([0, 0, -2])\n            cylinder(h=3, d=head_diameter + 4);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, 0])\n        handle();\n    \n    // Tool head\n    translate([0, 0, 0])\n        tool_head();\n}\n\n// Hanging loop\ncolor(metal_color) {\n    translate([handle_diameter/2 + 3, 0, handle_length - 15])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=5, d=10);\n                translate([0, 0, -1])\n                    cylinder(h=7, d=6);\n            }\n}",
    "renders": true
  },
  {
    "tool": "corm",
    "openscad_code": "// Corm tool - medium complexity realistic style\n\nmodule handle() {\n    // Main grip with ergonomic curves\n    color([0.15, 0.15, 0.15]) {\n        // Handle grip\n        difference() {\n            cylinder(h=60, d=25, $fn=32);\n            // Finger grooves\n            for(i=[-20:10:20]) {\n                translate([0, i, 30]) rotate([0,90,0]) \n                    cylinder(h=15, d1=20, d2=25, $fn=16);\n            }\n        }\n        \n        // Handle cap\n        translate([0,0,60]) cylinder(h=5, d=28, $fn=32);\n    }\n    \n    // Rubber grip insert\n    color([0.1, 0.1, 0.1]) {\n        translate([0,0,25]) cylinder(h=30, d=22, $fn=32);\n    }\n}\n\nmodule shaft() {\n    // Metal shaft\n    color([0.7, 0.7, 0.7]) {\n        cylinder(h=80, d=8, $fn=16);\n        \n        // Reinforcement ring\n        translate([0,0,75]) cylinder(h=5, d=12, $fn=16);\n    }\n}\n\nmodule cutter_assembly() {\n    // Main cutter body\n    color([0.6, 0.6, 0.6]) {\n        translate([0,0,80]) cylinder(h=15, d=20, $fn=32);\n        \n        // Cutter blades (4 curved blades)\n        for(i=[0:90:359]) {\n            rotate([0,0,i]) translate([8,0,87]) \n                rotate([0,90,0]) \n                    cylinder(h=12, d1=4, d2=2, $fn=8);\n        }\n        \n        // Center spike\n        translate([0,0,85]) cylinder(h=10, d=3, $fn=16);\n    }\n    \n    // Blade edges\n    color([0.8, 0.8, 0.8]) {\n        for(i=[0:90:359]) {\n            rotate([0,0,i]) translate([8,0,87]) \n                rotate([0,90,0]) \n                    cylinder(h=11, d1=3.5, d2=1.5, $fn=8);\n        }\n    }\n}\n\nmodule safety_cover() {\n    // Protective cover (removable)\n    color([0.2, 0.2, 0.3, 0.6]) {\n        difference() {\n            // Main cover shape\n            cylinder(h=25, d=24, $fn=32);\n            \n            // Hollow center\n            cylinder(h=27, d=18, $fn=32);\n            \n            // Grip slots\n            for(i=[0:120:359]) {\n                rotate([0,0,i]) translate([11,0,12]) \n                    cube([2, 8, 25], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nhandle();\ntranslate([0,0,60]) shaft();\ntranslate([0,0,140]) cutter_assembly();\n\n// Optional safety cover\n// translate([0,0,130]) safety_cover();",
    "renders": true
  },
  {
    "tool": "rhizome",
    "openscad_code": "// Rhizome Tool - Realistic Style\n// A specialized gardening tool for harvesting and dividing rhizomes\n\n// Tool dimensions (mm)\nhandle_length = 120;\nhandle_diameter = 25;\nblade_length = 80;\nblade_width = 35;\nblade_thickness = 3;\ntang_length = 40;\nferrule_length = 20;\nferrule_diameter = 28;\n\n// Colors\nwood_color = \"#8B4513\";\nmetal_color = \"#C0C0C0\";\ngrip_color = \"#2F4F4F\";\n\n// Handle with ergonomic grip\nmodule handle() {\n    color(wood_color) {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Ergonomic grip pattern\n        for(i = [10:20:handle_length-30]) {\n            translate([0, 0, i])\n            difference() {\n                cylinder(h=5, d=handle_diameter+2, $fn=32);\n                cylinder(h=5.1, d=handle_diameter-2, $fn=32);\n            }\n        }\n    }\n    \n    // Rubber grip overlay\n    color(grip_color) {\n        translate([0, 0, handle_length/2])\n        cylinder(h=handle_length/2+10, d=handle_diameter-2, $fn=32);\n    }\n}\n\n// Metal ferrule connecting handle to blade\nmodule ferrule() {\n    color(metal_color) {\n        cylinder(h=ferrule_length, d=ferrule_diameter, $fn=32);\n        \n        // Decorative ring\n        translate([0, 0, ferrule_length-5])\n        cylinder(h=2, d=ferrule_diameter+2, $fn=32);\n        \n        // Rivet details\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n            translate([ferrule_diameter/2-2, 0, ferrule_length/2])\n            cylinder(h=ferrule_diameter, d=2, $fn=8);\n        }\n    }\n}\n\n// Curved blade for rhizome cutting\nmodule blade() {\n    color(metal_color) {\n        // Blade tang\n        translate([0, 0, -tang_length/2])\n        cube([blade_thickness, blade_width/3, tang_length], center=true);\n        \n        // Main blade body\n        translate([0, 0, blade_length/2])\n        linear_extrude(height=blade_thickness, center=true, convexity=10)\n        polygon(points=[\n            [-blade_thickness/2, 0],\n            [-blade_width/2, blade_length/4],\n            [-blade_width/2+5, blade_length],\n            [blade_width/2-5, blade_length],\n            [blade_width/2, blade_length/4],\n            [blade_thickness/2, 0]\n        ]);\n        \n        // Cutting edge bevel\n        translate([0, 0, blade_length-5])\n        rotate([90, 0, 0])\n        cylinder(h=blade_width-10, r1=blade_thickness, r2=0, center=true);\n        \n        // Blade serrations for root cutting\n        for(i = [10:5:blade_length-10]) {\n            translate([0, 0, i])\n            difference() {\n                cube([blade_thickness+1, blade_width-10, 2], center=true);\n                cube([blade_thickness-1, blade_width-14, 2.1], center=true);\n            }\n        }\n    }\n}\n\n// Assemble the tool\ntranslate([0, 0, handle_length/2])\nhandle();\n\ntranslate([0, 0, -ferrule_length/2])\nferrule();\n\ntranslate([0, 0, -ferrule_length-tang_length/2])\nrotate([0, 90, 0])\nblade();",
    "renders": true
  },
  {
    "tool": "cutting",
    "openscad_code": "// Realistic medium-complexity 3D-printable box-cutter (utility knife)\n// Overall length ~95 mm, blade retracts, grip textures, pocket clip\n\n// Colors\nblade_color   = [0.7,0.7,0.7];   // steel\nbody_color    = [0.1,0.1,0.1];   // black ABS\ngrip_color    = [0.15,0.15,0.15];\nclip_color    = [0.8,0.8,0.8];\n\n// Main body shell\nmodule body_shell(){\n    difference(){\n        // Outer shell\n        color(body_color)\n        hull(){\n            translate([-4,0,0]) cylinder(h=90,r=8,$fn=32);\n            translate([ 4,0,0]) cylinder(h=90,r=8,$fn=32);\n        }\n        // Blade channel\n        translate([0,0,-1]) cube([2.6,20,92],center=true);\n        // Front slot for blade exit\n        translate([0,0,44.5]) cube([3,12,5],center=true);\n    }\n}\n\n// Rubber grip inserts\nmodule grip_inserts(){\n    color(grip_color)\n    for(i=[-30:5:25])\n        translate([0,9.5,i])\n            rotate([0,90,0])\n                cylinder(h=2,r=1,$fn=16);\n}\n\n// Blade with trapezoid tip\nmodule blade(length=30){\n    color(blade_color){\n        linear_extrude(height=0.6){\n            polygon(points=[\n                [-15, 0],\n                [length-5, 0],\n                [length, 2],\n                [length, 4],\n                [length-5, 6],\n                [-15, 6]\n            ]);\n        }\n    }\n}\n\n// Thumb slider mechanism\nmodule slider(){\n    color(clip_color)\n    union(){\n        // Slider block\n        translate([0,-7,0])\n            cube([8,4,12],center=true);\n        // Grip ridges\n        for(i=[-4:2:4])\n            translate([i,-5,0])\n                cube([0.8,2,12],center=true);\n    }\n}\n\n// Pocket clip\nmodule pocket_clip(){\n    color(clip_color)\n    difference(){\n        union(){\n            // Clip arc\n            translate([0,9,-35])\n                rotate([90,0,0])\n                    cylinder(h=40,r=2,$fn=32);\n            // Mount base\n            translate([0,9,-35])\n                cube([3,4,10],center=true);\n        }\n        // Remove inner volume\n        translate([0,9,-35])\n            rotate([90,0,0])\n                cylinder(h=45,r=1.2,$fn=32);\n    }\n}\n\n// Assembly\nbody_shell();\ngrip_inserts();\n\n// Blade in extended position\ntranslate([0,0,30])\n    rotate([0,90,0])\n        blade(25);\n\n// Slider attached to blade\ntranslate([0,-7,30])\n    slider();\n\npocket_clip();",
    "renders": true
  },
  {
    "tool": "slip",
    "openscad_code": "// Slip Tool - Realistic Style with Medium Complexity\n// Based on masonry jointing tool for finishing mortar joints\n\n$fn = 48;  // Smooth curves for 3D printing\n\n// Main colors\ncolor_tool = \"silver\";\ncolor_grip = \"darkslategray\";\n\n// Overall dimensions (mm)\noverall_length = 90;\nhandle_length = 60;\nhead_width = 25;\nhead_height = 15;\n\n// Handle diameter for comfortable grip\nhandle_diameter = 12;\n\n// Grip texture pattern\nmodule grip_texture() {\n    for (i = [0:5:handle_length-10]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h=2, d=handle_diameter + 2, center=true);\n                cylinder(h=3, d=handle_diameter, center=true);\n            }\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    color(color_grip) {\n        // Main handle body\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n            // Hollow core for weight reduction\n            cylinder(h=handle_length + 2, d=6, center=true);\n        }\n        \n        // Grip rings\n        grip_texture();\n        \n        // End cap\n        translate([0, 0, handle_length/2 + 1]) {\n            cylinder(h=3, d=handle_diameter + 2);\n        }\n    }\n}\n\n// Curved slip head for concave joints\nmodule curved_slip() {\n    color(color_tool) {\n        // Main curved head\n        difference() {\n            // Outer shape\n            union() {\n                // Curved blade\n                translate([-head_width/2, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=head_width, d=head_height);\n                    }\n                }\n                \n                // Transition to handle\n                translate([0, 0, -head_height/2]) {\n                    cylinder(h=head_height, d1=head_width, d2=handle_diameter);\n                }\n            }\n            \n            // Inner curve for joint profile\n            translate([0, head_height/2 - 2, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=head_width + 2, d=head_height - 4);\n                }\n            }\n            \n            // Remove back half for tool profile\n            translate([0, 0, -head_height]) {\n                cube([head_width*2, head_height*2, head_height*2], center=true);\n            }\n        }\n        \n        // Reinforcement ribs\n        for (x = [-head_width/3, 0, head_width/3]) {\n            translate([x, 0, -head_height/4]) {\n                cube([2, head_height/2, 3], center=true);\n            }\n        }\n    }\n}\n\n// Flat edge for corner work\nmodule flat_edge() {\n    color(color_tool) {\n        translate([head_width/2 + 5, 0, -head_height/2]) {\n            cube([3, head_height, head_height]);\n        }\n    }\n}\n\n// Assembly\nmodule slip_tool() {\n    // Handle\n    translate([0, 0, -overall_length/2 + handle_length/2]) {\n        handle();\n    }\n    \n    // Tool head\n    translate([0, 0, -overall_length/2 + handle_length]) {\n        union() {\n            curved_slip();\n            flat_edge();\n        }\n    }\n}\n\n// Render the complete tool\nslip_tool();",
    "renders": true
  },
  {
    "tool": "scion",
    "openscad_code": "// Scion tool - grafting knife for plant propagation\n// Realistic style, medium complexity\n\n// Parameters\nblade_length = 40;\nblade_width = 12;\nblade_thickness = 2;\nhandle_length = 65;\nhandle_width = 20;\nhandle_thickness = 15;\ntang_length = 25;\ntang_width = 8;\n\n// Handle grip pattern\ngrip_width = 2;\ngrip_spacing = 5;\ngrip_depth = 1;\n\n// Blade features\nblade_curve = 15;\ntip_length = 8;\n\nmodule handle_grip() {\n    difference() {\n        cube([handle_length - 10, handle_width, handle_thickness], center = true);\n        for (i = [-2:2]) {\n            translate([i * grip_spacing, 0, handle_thickness/2 - grip_depth/2])\n                cube([grip_width, handle_width - 4, grip_depth], center = true);\n        }\n    }\n}\n\nmodule handle() {\n    color(\"saddlebrown\") {\n        // Main handle body\n        difference() {\n            cube([handle_length, handle_width, handle_thickness], center = true);\n            // Rounded edges\n            translate([0, 0, -handle_thickness/2 - 0.1])\n                cube([handle_length + 2, handle_width - 2, handle_thickness + 0.2], center = true);\n        }\n        \n        // Grip pattern\n        translate([0, 0, handle_thickness/2 - grip_depth/2 - 0.5])\n            handle_grip();\n        \n        // Finger grooves\n        for (i = [-1.5:1.5]) {\n            translate([i * 8, 0, -handle_thickness/2 - 0.1])\n                cylinder(h = handle_thickness + 0.2, r = 3, $fn = 20);\n        }\n    }\n}\n\nmodule tang() {\n    color(\"silver\") {\n        // Hidden tang\n        translate([-handle_length/2 + tang_length/2, 0, 0])\n            cube([tang_length, tang_width, blade_thickness], center = true);\n        \n        // Rivets\n        for (i = [-1:1]) {\n            translate([-handle_length/2 + 15 + i * 15, handle_width/4, 0])\n                cylinder(h = handle_thickness + 2, r = 2, $fn = 12);\n            translate([-handle_length/2 + 15 + i * 15, -handle_width/4, 0])\n                cylinder(h = handle_thickness + 2, r = 2, $fn = 12);\n        }\n    }\n}\n\nmodule blade() {\n    color(\"silver\") {\n        union() {\n            // Main blade\n            translate([handle_length/2 + blade_length/2, 0, 0])\n                difference() {\n                    cube([blade_length, blade_width, blade_thickness], center = true);\n                    // Curved cutting edge\n                    translate([handle_length/2 + blade_length - 5, 0, -blade_thickness/2 - 0.1])\n                        rotate([0, 0, -blade_curve])\n                        cube([blade_length + 5, blade_width + 5, blade_thickness + 0.2]);\n                }\n            \n            // Blade tip\n            translate([handle_length/2 + blade_length + tip_length/2, 0, 0])\n                rotate([0, 0, -90])\n                cylinder(h = tip_length, r1 = blade_thickness, r2 = 0, $fn = 3);\n            \n            // Blade spine\n            translate([handle_length/2 + blade_length/2, 0, blade_thickness/2])\n                cube([blade_length, blade_width * 0.8, blade_thickness/4], center = true);\n            \n            // Bolster\n            translate([handle_length/2 - 2, 0, 0])\n                cylinder(h = handle_thickness, r = handle_width/2, $fn = 32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    tang();\n    blade();\n}\n\n// Cutting edge detail\ncolor(\"lightgray\") {\n    translate([handle_length/2 + blade_length/2 - 10, blade_width/2 - 0.5, 0])\n        cube([blade_length - 5, 1, blade_thickness * 0.8], center = true);\n}",
    "renders": true
  },
  {
    "tool": "graft",
    "openscad_code": "// Grafting Tool - Realistic Style, Medium Complexity\n// 3D printable grafting knife with replaceable blade and ergonomic handle\n\nblade_width = 8;\nblade_length = 35;\nblade_thickness = 1.2;\nhandle_length = 65;\nhandle_diameter = 22;\nguard_height = 5;\nscrew_diameter = 3;\n\n// Main blade assembly\nmodule blade() {\n    color(\"silver\")\n    union() {\n        // Blade body\n        translate([0, 0, blade_thickness/2])\n        difference() {\n            cube([blade_length, blade_width, blade_thickness], center=true);\n            // Taper blade tip\n            translate([blade_length/2 - 5, 0, 0])\n            rotate([0, 0, -15])\n            cube([blade_length, blade_width*2, blade_thickness*2], center=true);\n            // Cutting edge bevel\n            translate([blade_length/2 - 10, 0, blade_thickness/2])\n            rotate([0, -20, 0])\n            cube([blade_length, blade_width*2, blade_thickness], center=true);\n        }\n        \n        // Blade tang\n        translate([-blade_length/2 - 10, 0, 0])\n        cube([20, 6, 2], center=true);\n        \n        // Screw hole\n        translate([-blade_length/2 - 5, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=screw_diameter, center=true, $fn=16);\n    }\n}\n\n// Ergonomic handle with grip pattern\nmodule handle() {\n    color(\"darkgreen\")\n    difference() {\n        // Main handle\n        translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=handle_length, d=handle_diameter, center=true, $fn=32);\n        \n        // Finger grooves\n        for(i = [-20:10:20]) {\n            translate([i, 0, handle_diameter/2 - 2])\n            rotate([0, 90, 0])\n            cylinder(h=handle_diameter - 4, d=handle_diameter - 6, center=true, $fn=32);\n        }\n        \n        // Blade slot\n        translate([-handle_length/2, 0, 0])\n        cube([10, 7, 3], center=true);\n        \n        // Screw hole\n        translate([-handle_length/2 + 5, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=handle_diameter, d=screw_diameter, center=true, $fn=16);\n    }\n    \n    // Grip texture rings\n    for(i = [-25:5:25]) {\n        color(\"black\", 0.8)\n        translate([i, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=1, d=handle_diameter, center=true, $fn=32);\n            cylinder(h=2, d=handle_diameter - 2, center=true, $fn=32);\n        }\n    }\n}\n\n// Safety guard\nmodule guard() {\n    color(\"silver\")\n    difference() {\n        // Main guard\n        translate([0, 0, handle_diameter/2 + guard_height/2])\n        cube([handle_length/4, blade_width + 10, guard_height], center=true);\n        \n        // Thumb rest cutout\n        translate([0, 0, handle_diameter/2 + guard_height])\n        cube([handle_length/6, blade_width + 5, guard_height], center=true);\n        \n        // Blade passage\n        translate([0, 0, handle_diameter/2 + guard_height/2])\n        cube([blade_length/2, blade_width + 2, guard_height + 1], center=true);\n    }\n}\n\n// Securing screw\nmodule screw() {\n    color(\"gold\")\n    union() {\n        // Screw head\n        translate([-handle_length/2 + 5, 0, handle_diameter/2 + 2])\n        rotate([90, 0, 0])\n        cylinder(h=3, d=6, center=true, $fn=6);\n        \n        // Screw threads\n        translate([-handle_length/2 + 5, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=handle_diameter + 2, d=screw_diameter, center=true, $fn=16);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nhandle();\n\ntranslate([0, 0, 0])\nblade();\n\ntranslate([-handle_length/2 + 5, 0, 0])\nguard();\n\ntranslate([0, 0, 0])\nscrew();",
    "renders": true
  },
  {
    "tool": "bud",
    "openscad_code": "// Marijuana Bud Trimming Tool (realistic style, medium complexity)\n\n// Main parameters\n$fn = 32;  // Smooth curves\nhandle_length = 80;\nhandle_diameter = 12;\nblade_length = 35;\nblade_width = 18;\nspring_diameter = 5;\nspring_coils = 5;\n\n// Colors\ncolor_handle = \"DarkOliveGreen\";\ncolor_blade = \"Silver\";\ncolor_spring = \"LightGray\";\ncolor_grip = \"Black\";\n\n// Handle with grip pattern\nmodule handle() {\n    color(color_handle) {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip rings\n        color(color_grip) {\n            for(i = [-35:10:35]) {\n                translate([0, 0, i])\n                    cylinder(h=3, d=handle_diameter + 2, center=true);\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length/2 + 2])\n            cylinder(h=4, d=handle_diameter + 1, center=true);\n    }\n}\n\n// Curved trimming blade\nmodule blade() {\n    color(color_blade) {\n        // Main blade\n        translate([0, 0, 0])\n            rotate([0, 0, 0])\n                linear_extrude(height=1.5, convexity=10)\n                    difference() {\n                        // Outer blade shape\n                        translate([-blade_length/2, 0, 0])\n                            square([blade_length, blade_width], center=true);\n                        \n                        // Inner curve for blade edge\n                        for(i = [0:2:blade_length-10]) {\n                            translate([i - blade_length/2, blade_width/2 - 3, 0])\n                                circle(r=3);\n                        }\n                        \n                        // Serrations\n                        for(i = [0:3:blade_length-15]) {\n                            translate([i - blade_length/2, -blade_width/2 + 1, 0])\n                                circle(r=1.5);\n                        }\n                    }\n        \n        // Blade backing\n        translate([0, 0, -1])\n            cube([blade_length, 3, 2], center=true);\n    }\n}\n\n// Spring mechanism\nmodule spring() {\n    color(color_spring) {\n        for(i = [0:spring_coils]) {\n            rotate([0, 0, i * 360/spring_coils])\n                translate([spring_diameter, 0, i * 5])\n                    rotate([90, 0, 0])\n                        cylinder(h=5, d=1.5, center=true);\n        }\n    }\n}\n\n// Pivot joint\nmodule pivot() {\n    color(\"DimGray\") {\n        cylinder(h=8, d=6, center=true);\n        rotate([90, 0, 0])\n            cylinder(h=6, d=3, center=true);\n    }\n}\n\n// Complete tool assembly\nmodule bud_tool() {\n    // First handle and blade\n    translate([0, -handle_diameter/2 - blade_width/2, 0]) {\n        rotate([90, 0, 0]) {\n            translate([0, 0, handle_length/2])\n                handle();\n            translate([0, 0, -handle_length/2 - blade_length/2])\n                rotate([0, 90, 0])\n                    blade();\n        }\n    }\n    \n    // Second handle and blade (mirrored)\n    translate([0, handle_diameter/2 + blade_width/2, 0]) {\n        rotate([90, 0, 180]) {\n            translate([0, 0, handle_length/2])\n                handle();\n            translate([0, 0, -handle_length/2 - blade_length/2])\n                rotate([0, 90, 0])\n                    blade();\n        }\n    }\n    \n    // Pivot point\n    translate([0, 0, 0])\n        pivot();\n    \n    // Spring between handles\n    translate([0, 0, 5])\n        rotate([90, 0, 90])\n            spring();\n}\n\n// Render the tool\nbud_tool();\n\n// Optional: Display stand\ncolor(\"Brown\") {\n    translate([0, 0, -handle_length/2 - 10])\n        cube([40, 20, 5], center=true);\n}",
    "renders": true
  },
  {
    "tool": "eye",
    "openscad_code": "// Eye Speculum Tool - Realistic Style with Medium Complexity\n// Ophthalmic tool used to keep eyelids open during examination\n\n// Color definitions\n$fn=50;\n\n// Main module for the eye speculum\nmodule eye_speculum() {\n    // Handle assembly\n    color(\"silver\") handle();\n    \n    // Left arm assembly\n    translate([-8, 0, 0]) color(\"silver\") arm_assembly();\n    \n    // Right arm assembly\n    translate([8, 0, 0]) mirror([1,0,0]) color(\"silver\") arm_assembly();\n    \n    // Adjustment mechanism\n    translate([0, 25, 0]) color(\"silver\") adjustment_mechanism();\n}\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=80, r1=6, r2=5, center=false);\n        \n        // Grip grooves\n        for(i=[0:5:70]) {\n            translate([0, 0, i]) rotate([0,0,0]) \n                cylinder(h=2, r=6.5, center=false, $fn=6);\n        }\n    }\n    \n    // Handle base\n    translate([0, 0, -5]) cylinder(h=5, r=7, center=false);\n}\n\n// Arm assembly including speculum blade\nmodule arm_assembly() {\n    // Main arm\n    rotate([0, 90, 0]) cylinder(h=35, r=2, center=false);\n    \n    // Joint connector\n    translate([0, 35, 0]) sphere(r=3);\n    \n    // Speculum blade (curved)\n    translate([0, 38, -3]) rotate([0, 0, -30]) {\n        // Blade base\n        cube([2, 15, 3], center=true);\n        \n        // Curved blade surface\n        translate([1, 7.5, 1.5]) rotate([90, 0, 0])\n            cylinder(h=15, r1=2, r2=0.5, center=false);\n    }\n    \n    // Support strut\n    translate([0, 20, 0]) rotate([45, 0, 0]) \n        cylinder(h=8, r=1, center=false);\n}\n\n// Adjustment screw mechanism\nmodule adjustment_mechanism() {\n    // Screw housing\n    difference() {\n        cylinder(h=10, r=5, center=true);\n        cylinder(h=12, r=2.5, center=true);\n    }\n    \n    // Adjustment screw\n    translate([0, 0, 5]) rotate([0, 0, 0]) {\n        // Screw head\n        cylinder(h=3, r=4, center=false);\n        \n        // Screw threads (simplified)\n        for(i=[0:0.5:4]) {\n            translate([0, 0, i]) rotate([0, 0, 45 + i*30])\n                cylinder(h=0.3, r=2.7, center=true, $fn=8);\n        }\n    }\n    \n    // Locking tab\n    translate([5, 0, 0]) cube([2, 1, 3], center=true);\n}\n\n// Scale the entire tool to 75mm length\nscale(0.75) eye_speculum();",
    "renders": true
  },
  {
    "tool": "node",
    "openscad_code": "// Node.js tool model - realistic medium complexity\n// A hex nut driver with ergonomic handle and magnetic socket\n\n$fn = 100;  // Smooth curves\n\n// Overall dimensions\nmodule nut_driver() {\n    // Main shaft\n    union() {\n        // Handle grip section\n        handle_grip();\n        \n        // Shaft transition\n        shaft_transition();\n        \n        // Hex socket end\n        hex_socket_end();\n    }\n}\n\n// Ergonomic handle with finger grooves\nmodule handle_grip() {\n    color([0.1, 0.1, 0.1])  // Dark rubber color\n    \n    // Main handle body\n    translate([0, 0, 40]) {\n        difference() {\n            // Tapered cylinder for handle\n            cylinder(h=50, r1=15, r2=12);\n            \n            // Finger grooves\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90]) {\n                    translate([14, 0, 10 + i * 10]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=8, r=2, $fn=20);\n                        }\n                    }\n                }\n            }\n            \n            // Grip texture rings\n            for(i = [0:4]) {\n                translate([0, 0, 5 + i * 10]) {\n                    cylinder(h=1, r=14.5);\n                }\n            }\n        }\n    }\n}\n\n// Transition from handle to shaft\nmodule shaft_transition() {\n    color([0.7, 0.7, 0.7])  // Metallic silver\n    \n    translate([0, 0, 15]) {\n        // Tapered transition\n        cylinder(h=10, r1=12, r2=6);\n        \n        // Reinforcement ring\n        translate([0, 0, -2]) {\n            cylinder(h=4, r=13);\n        }\n    }\n}\n\n// Hex socket working end\nmodule hex_socket_end() {\n    color([0.8, 0.8, 0.8])  // Chrome color\n    \n    // Main shaft\n    translate([0, 0, 5]) {\n        cylinder(h=10, r=6);\n    }\n    \n    // Hex socket\n    translate([0, 0, 0]) {\n        difference() {\n            // Outer hex shape\n            cylinder(h=8, r=8);\n            \n            // Inner hex socket (8mm)\n            rotate([0, 0, 30]) {\n                cylinder(h=10, r=4.5, $fn=6);\n            }\n            \n            // Magnetic insert recess\n            translate([0, 0, 7]) {\n                cylinder(h=3, r=3);\n            }\n        }\n    }\n    \n    // Size marking\n    color([0, 0, 0])  // Black engraving\n    translate([0, -7, 4]) {\n        linear_extrude(height=0.5) {\n            text(\"8mm\", size=2, halign=\"center\");\n        }\n    }\n}\n\n// Assembly\nnut_driver();",
    "renders": true
  },
  {
    "tool": "root",
    "openscad_code": "// Root Tool - Garden Weeder with Dandelion Extractor\n// Realistic style, medium complexity\n\n// Overall dimensions\ntool_length = 150;\nhandle_diameter = 28;\nblade_width = 35;\nblade_height = 12;\n\n// Colors\nhandle_color = \"#8B4513\";  // Brown wood\nmetal_color = \"#C0C0C0\";   // Silver metal\ngrip_color = \"#006400\";    // Dark green rubber\n\n// Handle module\nmodule handle() {\n    // Main wooden handle\n    color(handle_color) {\n        cylinder(h=100, d1=handle_diameter, d2=handle_diameter-2, $fn=32);\n    }\n    \n    // Rubber grip rings\n    color(grip_color) {\n        for(i = [0:15:75]) {\n            translate([0, 0, 15+i]) {\n                difference() {\n                    cylinder(h=8, d=handle_diameter+4, $fn=32);\n                    cylinder(h=10, d=handle_diameter-2, $fn=32);\n                }\n            }\n        }\n    }\n    \n    // Handle end cap\n    translate([0, 0, 100]) {\n        color(metal_color) {\n            cylinder(h=5, d=handle_diameter+2, $fn=32);\n            sphere(d=handle_diameter+2, $fn=32);\n        }\n    }\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    // Metal ferrule connecting handle to blade\n    translate([0, 0, -15]) {\n        color(metal_color) {\n            cylinder(h=15, d=handle_diameter-4, $fn=32);\n        }\n    }\n    \n    // Main blade body\n    translate([0, 0, -blade_height-15]) {\n        color(metal_color) {\n            // Central blade spine\n            cube([blade_width-20, 3, blade_height], center=true);\n            \n            // Curved blade wings\n            for(side = [-1, 1]) {\n                translate([side*12, 0, 0]) {\n                    rotate([0, 0, side*-20]) {\n                        cube([15, 3, blade_height], center=true);\n                    }\n                }\n            }\n            \n            // Sharpened blade edge\n            translate([0, 2, -blade_height/2-1]) {\n                cube([blade_width, 1, 2], center=true);\n            }\n        }\n    }\n    \n    // Root splitting V-notch\n    translate([0, 3, -blade_height-15]) {\n        color(metal_color) {\n            difference() {\n                cube([blade_width-10, 2, 8], center=true);\n                translate([0, -1, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=blade_width-5, d1=3, d2=0, $fn=3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Dandelion extractor spike\n    translate([0, 5, -blade_height-25]) {\n        color(metal_color) {\n            cylinder(h=20, d1=2, d2=0, $fn=16);\n        }\n    }\n}\n\n// Assembly\nmodule root_tool() {\n    union() {\n        // Handle with slight angle for ergonomics\n        rotate([5, 0, 0]) {\n            handle();\n        }\n        \n        // Blade assembly\n        translate([0, 0, 100]) {\n            blade_assembly();\n        }\n        \n        // Hanging hole\n        translate([0, -handle_diameter/2-5, 90]) {\n            rotate([90, 0, 0]) {\n                color(metal_color) {\n                    difference() {\n                        cylinder(h=3, d=8, $fn=32);\n                        cylinder(h=5, d=4, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the tool\nroot_tool();",
    "renders": true
  },
  {
    "tool": "stem",
    "openscad_code": "// Realistic Stem Tool - Garden Weeder/Transplanter\n// Overall length: ~85mm, designed for 3D printing\n\n// Color definitions\n$fn = 50;\nhandle_color = \"OliveDrab\";\nblade_color = \"Silver\";\n\n// Main module\nmodule stem_tool() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 0]) handle();\n        \n        // Shaft assembly\n        translate([0, 0, 35]) shaft();\n        \n        // Blade assembly\n        translate([0, 0, 75]) blade();\n    }\n}\n\n// Ergonomic handle with grip texture\nmodule handle() {\n    color(handle_color) {\n        union() {\n            // Main handle body\n            difference() {\n                // Tapered handle shape\n                cylinder(h = 35, r1 = 12, r2 = 8, center = false);\n                \n                // Finger grooves on bottom\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 120]) \n                    translate([8, 0, 8 + i * 7]) \n                    cube([3, 8, 5], center = true);\n                }\n                \n                // Hanging hole\n                translate([0, 0, 30])\n                rotate([90, 0, 0])\n                cylinder(h = 20, r = 3, center = true);\n            }\n            \n            // Grip rings for texture\n            for(i = [0:6]) {\n                translate([0, 0, 5 + i * 4])\n                difference() {\n                    cylinder(h = 1.5, r = 11.5, center = false);\n                    cylinder(h = 2, r = 10, center = false);\n                }\n            }\n        }\n    }\n}\n\n// Reinforced shaft with strength ribs\nmodule shaft() {\n    color(handle_color) {\n        union() {\n            // Main shaft\n            cylinder(h = 40, r = 5, center = false);\n            \n            // Strength ribs\n            for(i = [0:4]) {\n                translate([0, 0, 38 - i * 8])\n                difference() {\n                    cylinder(h = 2, r = 7, center = false);\n                    cylinder(h = 3, r = 5.5, center = false);\n                }\n            }\n            \n            // Transition collar\n            translate([0, 0, 39])\n            cylinder(h = 3, r = 7, center = false);\n        }\n    }\n}\n\n// Dual-purpose blade - weeder and transplanter\nmodule blade() {\n    color(blade_color) {\n        union() {\n            // Main blade body\n            translate([0, 0, 0])\n            difference() {\n                // Tapered blade\n                linear_extrude(height = 15, scale = [0.2, 1])\n                circle(r = 12);\n                \n                // Cutting edge bevel\n                translate([0, 0, -1])\n                rotate([90, 0, 0])\n                cylinder(h = 25, r = 15, center = true);\n            }\n            \n            // Scoop depth\n            translate([0, 0, 0])\n            difference() {\n                cube([25, 20, 15], center = true);\n                translate([5, 0, 7.5])\n                sphere(r = 12);\n            }\n            \n            // Serrated edge for weeding\n            for(i = [0:8]) {\n                rotate([0, 0, -60 + i * 15])\n                translate([12, 0, 0])\n                cube([2, 1, 3], center = true);\n            }\n            \n            // Measurement markings (mm)\n            for(i = [1:3]) {\n                rotate([0, 0, 45])\n                translate([10 + i * 3, 0, 12])\n                cube([0.5, 0.5, 2], center = true);\n            }\n        }\n    }\n}\n\n// Render the complete tool\nstem_tool();",
    "renders": true
  },
  {
    "tool": "leaf",
    "openscad_code": "// Leaf Tool - Realistic Style, Medium Complexity\n// A gardening tool combining leaf shape with functional cutting edge\n\n$fn = 32;\n\n// Overall dimensions (mm)\nleaf_length = 80;\nleaf_width = 45;\nhandle_length = 70;\nblade_thickness = 2.5;\n\nmodule leaf_shape() {\n    // Main leaf body with curved edges\n    union() {\n        // Central vein - raised ridge\n        translate([0, 0, 1]) {\n            color(\"OliveDrab\") \n            scale([leaf_length*0.9, leaf_width*0.1, 2])\n                sphere(r=1);\n        }\n        \n        // Left side of leaf\n        difference() {\n            translate([-leaf_length/4, -leaf_width/4, 0]) {\n                color(\"ForestGreen\") \n                scale([leaf_length/2, leaf_width/2, blade_thickness])\n                    sphere(r=1);\n            }\n            \n            // Cut leaf tip\n            translate([leaf_length/2 - 5, 0, -1])\n                rotate([0, 0, 30])\n                    cube([leaf_length/2, leaf_width, blade_thickness+2]);\n        }\n        \n        // Right side of leaf\n        mirror([0, 1, 0]) {\n            difference() {\n                translate([-leaf_length/4, -leaf_width/4, 0]) {\n                    color(\"ForestGreen\") \n                    scale([leaf_length/2, leaf_width/2, blade_thickness])\n                        sphere(r=1);\n                }\n                \n                // Cut leaf tip\n                translate([leaf_length/2 - 5, 0, -1])\n                    rotate([0, 0, 30])\n                        cube([leaf_length/2, leaf_width, blade_thickness+2]);\n            }\n        }\n        \n        // Serrated edges - small triangles\n        for(i = [0:5:leaf_length-10]) {\n            translate([i-leaf_length/2, leaf_width/2, 0]) {\n                rotate([0, 0, -45])\n                    color(\"DarkGreen\") \n                    cube([5, 3, blade_thickness+0.5], center=true);\n            }\n            mirror([0, 1, 0]) {\n                translate([i-leaf_length/2, leaf_width/2, 0]) {\n                    rotate([0, 0, -45])\n                        color(\"DarkGreen\") \n                        cube([5, 3, blade_thickness+0.5], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule handle() {\n    // Main handle shaft\n    translate([-leaf_length/2 - handle_length/2, 0, 0]) {\n        rotate([90, 0, 0]) {\n            color(\"SaddleBrown\") \n            cylinder(h=handle_length, r1=8, r2=6);\n        }\n    }\n    \n    // Handle grip texture - rings\n    for(i = [0:5:handle_length-10]) {\n        translate([-leaf_length/2 - i - 10, 0, 0]) {\n            rotate([90, 0, 0]) {\n                color(\"SaddleBrown\") \n                cylinder(h=2, r1=8.5, r2=6.5);\n            }\n        }\n    }\n    \n    // Handle end cap\n    translate([-leaf_length/2 - handle_length - 5, 0, 0]) {\n        rotate([90, 0, 0]) {\n            color(\"DarkGoldenrod\") \n            sphere(r=6.5);\n        }\n    }\n}\n\nmodule blade_edge() {\n    // Sharp cutting edge on leaf underside\n    translate([-leaf_length/4, 0, -blade_thickness/2 - 0.5]) {\n        color(\"Silver\") \n        linear_extrude(height=1.5)\n            polygon(points=[\n                [0, -leaf_width/2],\n                [leaf_length/2, 0],\n                [0, leaf_width/2],\n                [-leaf_length/4, 0]\n            ]);\n    }\n}\n\n// Assembly\nunion() {\n    // Position leaf at end of handle\n    translate([-leaf_length/2, 0, 0]) {\n        leaf_shape();\n        blade_edge();\n    }\n    \n    handle();\n    \n    // Reinforcement joint\n    translate([-leaf_length/2, 0, -5]) {\n        color(\"DarkOliveGreen\") \n        cylinder(h=10, r1=12, r2=8);\n    }\n}\n\n// Hanging hole\ntranslate([-leaf_length/2 - handle_length/2, 0, 6]) {\n    color(\"SaddleBrown\") \n    rotate([90, 0, 0])\n        cylinder(h=10, r1=3, r2=3);\n}",
    "renders": true
  },
  {
    "tool": "flower",
    "openscad_code": "// Realistic Flower Tool - Medium Complexity\n// A hand trowel with decorative flower-pattern handle\n\n$fn = 32;\n\n// Main colors\ncolor_plastic = \"DarkGreen\";\ncolor_metal = \"Silver\";\ncolor_grip = \"Brown\";\n\n// Overall dimensions (mm)\ntotal_length = 160;\nblade_length = 90;\nhandle_length = 70;\nmax_width = 55;\n\nmodule flower_tool() {\n    union() {\n        // Metal blade\n        translate([0, 0, 0])\n        color(color_metal)\n        blade();\n        \n        // Handle assembly\n        translate([-handle_length, 0, 0])\n        color(color_plastic)\n        handle();\n    }\n}\n\nmodule blade() {\n    difference() {\n        // Main blade shape\n        union() {\n            // Tapered blade\n            hull() {\n                translate([0, 0, 2])\n                cylinder(h=3, r1=25, r2=28);\n                \n                translate([blade_length-2, 0, 2])\n                cylinder(h=3, r1=12, r2=15);\n                \n                translate([blade_length, 0, 2])\n                cylinder(h=3, r1=2, r2=5);\n            }\n            \n            // Blade thickness\n            translate([0, 0, -1])\n            cylinder(h=5, r=28);\n            \n            // Blade neck transition\n            translate([-5, 0, 0])\n            cylinder(h=10, r=8);\n            \n            // Reinforcement ridge\n            translate([blade_length/2, 0, 3])\n            cube([blade_length/2, 2, 3], center=true);\n        }\n        \n        // Blade cutting edge bevel\n        translate([blade_length/2, 0, -3])\n        rotate([0, 15, 0])\n        cube([blade_length+5, 60, 5], center=true);\n        \n        // Drainage hole\n        translate([30, 0, 2])\n        rotate([90, 0, 0])\n        cylinder(h=10, r=4);\n    }\n}\n\nmodule handle() {\n    difference() {\n        union() {\n            // Handle grip core\n            cylinder(h=handle_length, r=12);\n            \n            // Flower decorations on handle\n            for(i = [0:10:handle_length-10]) {\n                translate([-i, 0, 12])\n                rotate([90, 0, 0])\n                flower_decoration(5);\n            }\n            \n            // Grip texture rings\n            for(i = [10:10:handle_length-10]) {\n                translate([-i, 0, 0])\n                cylinder(h=2, r=13);\n            }\n        }\n        \n        // Finger grooves\n        for(i = [15:15:handle_length-15]) {\n            translate([-i, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=25, r=3, center=true);\n        }\n        \n        // Hanging hole\n        translate([-handle_length+5, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=30, r=3);\n    }\n}\n\nmodule flower_decoration(size) {\n    union() {\n        // Flower center\n        sphere(r=size/3);\n        \n        // Flower petals\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([size, 0, 0])\n            scale([1.5, 0.7, 0.3])\n            sphere(r=size/2);\n        }\n    }\n}\n\n// Render the complete tool\nflower_tool();",
    "renders": true
  },
  {
    "tool": "fruit",
    "openscad_code": "// Apple corer - realistic style, medium complexity\n// 3D printable fruit tool with proper wall thickness and no overhangs\n// Designed for 3D printing - no support needed\n\n// Main parameters\n$fn = 50;\nhandle_length = 90;\nhandle_diameter = 25;\ntube_length = 70;\ntube_outer_diameter = 22;\ntube_inner_diameter = 18;\nblade_thickness = 2.5;\ngrip_ring_count = 8;\ngrip_ring_spacing = 8;\n\n// Main assembly\ncolor(\"SaddleBrown\") {\n    handle();\n}\ncolor(\"Silver\") {\n    tube();\n    blade();\n}\ncolor(\"Black\") {\n    grip_rings();\n}\n\n// Handle module - ergonomic grip\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Top indent for thumb\n        translate([0, 0, handle_length - 12])\n            scale([1.2, 1, 0.8])\n                sphere(d=handle_diameter * 0.8);\n        \n        // Bottom indent for fingers\n        translate([0, 0, 8])\n            scale([1.2, 1, 0.8])\n                sphere(d=handle_diameter * 0.8);\n    }\n    \n    // Handle cap detail\n    translate([0, 0, handle_length])\n        cylinder(h=3, d=handle_diameter + 2, center=false);\n}\n\n// Grip rings for better handling\nmodule grip_rings() {\n    for (i = [1:grip_ring_count]) {\n        translate([0, 0, i * grip_ring_spacing])\n            difference() {\n                cylinder(h=2, d=handle_diameter + 1, center=false);\n                cylinder(h=3, d=handle_diameter - 2, center=false);\n            }\n    }\n}\n\n// Main coring tube\nmodule tube() {\n    difference() {\n        // Outer tube\n        cylinder(h=tube_length, d=tube_outer_diameter, center=false);\n        \n        // Inner hollow\n        cylinder(h=tube_length + 1, d=tube_inner_diameter, center=false);\n    }\n    \n    // Reinforcement ring at top\n    translate([0, 0, tube_length - 5])\n        cylinder(h=5, d=tube_outer_diameter + 2, center=false);\n}\n\n// Serrated cutting blade at bottom\nmodule blade() {\n    // Main blade cylinder\n    cylinder(h=blade_thickness, d=tube_outer_diameter, center=false);\n    \n    // Serrated teeth\n    teeth_count = 8;\n    for (i = [0:teeth_count - 1]) {\n        rotate([0, 0, i * (360/teeth_count)])\n            translate([tube_outer_diameter/2 - 1, 0, -1])\n                cube([3, 2, blade_thickness + 2], center=true);\n    }\n}\n\n// Assembly positioning\ntranslate([0, 0, 0]) {\n    // Handle is already at origin\n}\n\ntranslate([0, 0, 0]) {\n    rotate([180, 0, 0])\n        translate([0, 0, -tube_length])\n            tube();\n}\n\ntranslate([0, 0, 0]) {\n    rotate([180, 0, 0])\n        translate([0, 0, -blade_thickness])\n            blade();\n}",
    "renders": true
  },
  {
    "tool": "pod",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Pod tool parameters\npod_length = 80;\npod_diameter = 35;\nwall_thickness = 2;\nhandle_length = 30;\nhandle_diameter = 12;\nnozzle_length = 15;\nnozzle_diameter = 8;\n\n// Main pod body module\nmodule pod_body() {\n    color(\"LightGray\") {\n        difference() {\n            // Outer shell\n            cylinder(h = pod_length, d = pod_diameter, center = true);\n            \n            // Inner cavity\n            translate([0, 0, wall_thickness/2])\n                cylinder(h = pod_length + 1, d = pod_diameter - 2*wall_thickness, center = true);\n            \n            // Top cutout for filling\n            translate([0, 0, pod_length/2 - 5])\n                cylinder(h = 10, d = 20, center = false);\n        }\n        \n        // Rim detail\n        translate([0, 0, pod_length/2])\n            cylinder(h = 3, d1 = pod_diameter + 2, d2 = pod_diameter, center = false);\n            \n        translate([0, 0, -pod_length/2])\n            cylinder(h = 3, d1 = pod_diameter, d2 = pod_diameter + 2, center = false);\n    }\n}\n\n// Handle module\nmodule handle() {\n    color(\"DarkGray\") {\n        // Main grip\n        cylinder(h = handle_length, d = handle_diameter, center = true);\n        \n        // Grip rings\n        for(i = [-1:1]) {\n            translate([0, 0, i * 8])\n                difference() {\n                    cylinder(h = 2, d = handle_diameter + 2, center = true);\n                    cylinder(h = 2.2, d = handle_diameter - 1, center = true);\n                }\n        }\n    }\n}\n\n// Nozzle module\nmodule nozzle() {\n    color(\"Silver\") {\n        // Main nozzle\n        cylinder(h = nozzle_length, d1 = nozzle_diameter, d2 = nozzle_diameter * 1.2, center = true);\n        \n        // Nozzle tip detail\n        translate([0, 0, nozzle_length/2])\n            cylinder(h = 3, d1 = nozzle_diameter * 0.8, d2 = nozzle_diameter, center = false);\n            \n        // Threads\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([nozzle_diameter/2 + 0.5, 0, -nozzle_length/2 + 2 + i * 2])\n                    cube([1, 1, 1.5], center = true);\n        }\n    }\n}\n\n// Pod window\nmodule window() {\n    color(\"Blue\", 0.6) {\n        translate([pod_diameter/2 - 1, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h = 25, d = 10, center = true);\n    }\n}\n\n// Fill indicator marks\nmodule fill_marks() {\n    color(\"Black\") {\n        for(i = [0:3]) {\n            translate([pod_diameter/2 - 1, 0, -pod_length/2 + 10 + i * 15])\n                cube([3, 0.5, 0.5], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main pod\n    pod_body();\n    \n    // Handle attached to side\n    translate([pod_diameter/2 + handle_diameter/2, 0, pod_length/2 - handle_length/2 - 5])\n        rotate([90, 0, 0])\n            handle();\n    \n    // Nozzle at bottom\n    translate([0, 0, -pod_length/2 - nozzle_length/2])\n        nozzle();\n    \n    // Side window\n    window();\n    \n    // Fill marks\n    fill_marks();\n}",
    "renders": true
  },
  {
    "tool": "nut",
    "openscad_code": "// OpenSCAD Nut Tool - Realistic Style, Medium Complexity\n// A hex nut driver with ergonomic handle and hexagonal socket\n\n$fn = 64;  // Smooth curves\nwall_thickness = 2;\n\n// Main colors\ncolor_tool(\"#C0C0C0\")  // Silver metal\nunion() {\n    \n    // Handle grip section\n    color(\"#2F2F2F\")\n    difference() {\n        // Main handle body - slightly tapered cylinder\n        cylinder(h = 80, r1 = 12, r2 = 10, center = false);\n        \n        // Grip rings - subtracted for texture\n        for (i = [10:10:70]) {\n            translate([0, 0, i])\n            cylinder(h = 3, r = 11.5, center = false);\n        }\n        \n        // Finger grooves on sides\n        rotate([90, 0, 0])\n        for (angle = [0:60:359]) {\n            rotate([0, 0, angle])\n            translate([12, 0, -40])\n            sphere(r = 2);\n        }\n    }\n    \n    // Metal shaft\n    color(\"#A8A8A8\")\n    translate([0, 0, 80])\n    difference() {\n        cylinder(h = 60, r = 6, center = false);\n        \n        // Hollow center for weight reduction\n        cylinder(h = 58, r = 3, center = false);\n    }\n    \n    // Hex socket head\n    color(\"#A8A8A8\")\n    translate([0, 0, 140])\n    difference() {\n        // Outer hexagonal prism\n        cylinder(h = 25, r = 10, center = false);\n        \n        // Hexagonal socket cavity\n        rotate([0, 0, 30])\n        cylinder(h = 25, r = 7.5, $fn = 6, center = false);\n    }\n    \n    // Socket chamfer/bevel for easier nut insertion\n    color(\"#A8A8A8\")\n    translate([0, 0, 140])\n    difference() {\n        cylinder(h = 3, r1 = 10, r2 = 9, center = false);\n        rotate([0, 0, 30])\n        cylinder(h = 3, r1 = 7.5, r2 = 6.5, $fn = 6, center = false);\n    }\n    \n    // Size marking on handle (8mm)\n    color(\"#FFFFFF\")\n    translate([-1, 11, 40])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"8MM\", size = 4, font = \"Arial:style=Bold\");\n    \n    // Brand marking\n    color(\"#FFFFFF\")\n    translate([-2, 11, 50])\n    rotate([90, 0, 0])\n    linear_extrude(height = 0.5)\n    text(\"PRO\", size = 3, font = \"Arial:style=Bold\");\n    \n    // Torque indicator lines on shaft\n    color(\"#000000\")\n    for (z = [85:5:135]) {\n        translate([0, 6, z])\n        rotate([90, 0, 0])\n        cylinder(h = 0.5, r = 1, center = false);\n    }\n}",
    "renders": true
  },
  {
    "tool": "cone",
    "openscad_code": "// Realistic Cone Tool - OpenSCAD\n// A 3D printable cone marking/scribing tool with grip and measurement markings\n\n// Overall dimensions\ncone_height = 60;\ncone_base_diameter = 25;\nhandle_length = 40;\nhandle_diameter = 15;\ntip_sharpness = 1.5;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Colors\ncone_color = \"#888888\";\nhandle_color = \"#2E2E2E\";\ngrip_color = \"#1A1A1A\";\ntip_color = \"#CCCCCC\";\n\n// Main cone body\nmodule cone_body() {\n    difference() {\n        // Outer cone\n        cylinder(h=cone_height, d1=cone_base_diameter, d2=0, $fn=100);\n        \n        // Inner hollow cone\n        translate([0, 0, wall_thickness])\n        cylinder(h=cone_height - wall_thickness, \n                 d1=cone_base_diameter - wall_thickness*2, \n                 d2=tip_sharpness, \n                 $fn=100);\n    }\n}\n\n// Measurement markings along cone\nmodule measurement_markings() {\n    for(i=[1:9]) {\n        translate([0, 0, i * cone_height/10])\n        rotate([0, 0, 45])\n        difference() {\n            cylinder(h=0.5, d1=cone_base_diameter - 2, d2=cone_base_diameter - 4, $fn=4);\n            cylinder(h=1, d1=cone_base_diameter - 4, d2=cone_base_diameter - 6, $fn=4);\n        }\n    }\n}\n\n// Handle with knurled grip\nmodule handle() {\n    union() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=50);\n        \n        // Knurled grip pattern\n        for(i=[0:15]) {\n            rotate([0, 0, i * 360/16])\n            translate([handle_diameter/2 - 0.5, 0, -1])\n            cube([1, 1, handle_length + 2], center=true);\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n        cylinder(h=3, d1=handle_diameter, d2=handle_diameter + 2, $fn=50);\n    }\n}\n\n// Sharp tip insert\nmodule tip_insert() {\n    // Metal tip insert\n    cylinder(h=5, d=3, $fn=30);\n    \n    // Taper to point\n    translate([0, 0, 5])\n    cylinder(h=2, d1=3, d2=tip_sharpness, $fn=30);\n}\n\n// Assembly\nunion() {\n    // Cone body\n    color(cone_color) cone_body();\n    \n    // Measurement markings\n    color([0.2, 0.2, 0.2, 0.3]) measurement_markings();\n    \n    // Handle attached to cone base\n    color(handle_color) \n    translate([0, 0, -handle_length])\n    handle();\n    \n    // Grip texture on handle\n    color(grip_color) {\n        translate([0, 0, -handle_length])\n        handle();\n    }\n    \n    // Sharp tip at cone apex\n    color(tip_color) \n    translate([0, 0, cone_height])\n    tip_insert();\n    \n    // Reinforcement ring at cone-handle junction\n    color(cone_color)\n    translate([0, 0, 0])\n    cylinder(h=3, d1=cone_base_diameter + 2, d2=cone_base_diameter, $fn=50);\n}",
    "renders": true
  },
  {
    "tool": "berry",
    "openscad_code": "// Berry Picker Tool - Realistic Style, Medium Complexity\n// A handheld tool for harvesting berries with gentle comb-like prongs\n\n// Overall dimensions (mm)\ntool_length = 90;\ntool_width = 45;\ntool_height = 25;\nhandle_diameter = 20;\nhandle_length = 80;\n\n// Colors\nberry_red = [0.8, 0.1, 0.2];\ntool_gray = [0.5, 0.5, 0.5];\ngrip_black = [0.1, 0.1, 0.1];\n\n// Main module\nmodule berry_picker() {\n    // Handle assembly\n    color(grip_black) handle();\n    \n    // Tool head assembly\n    translate([0, 0, handle_length/2 + tool_height/2])\n    color(tool_gray) tool_head();\n    \n    // Berry basket attachment\n    translate([0, -tool_width/2 - 15, handle_length/2 - 10])\n    color(berry_red) berry_basket();\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    difference() {\n        // Main handle cylinder\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip texture - subtracted grooves\n        for(i = [-3:1:3]) {\n            translate([0, 0, i*10 - 5])\n            rotate([90, 0, 0])\n            cylinder(h=handle_length + 5, d=handle_diameter - 2, center=true);\n        }\n        \n        // Finger indentations\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle])\n            translate([0, handle_diameter/2 - 2, 0])\n            sphere(d=8);\n        }\n    }\n}\n\n// Tool head with picking prongs\nmodule tool_head() {\n    difference() {\n        // Main tool body\n        union() {\n            // Base plate\n            cube([tool_length, tool_width, 5], center=true);\n            \n            // Reinforcement ribs\n            for(i = [-1:1:1]) {\n                translate([i * 25, 0, -2.5])\n                cube([5, tool_width - 10, 10], center=true);\n            }\n            \n            // Mounting collar for handle\n            translate([0, 0, -7.5])\n            cylinder(h=10, d=handle_diameter + 10, center=true);\n        }\n        \n        // Handle mounting hole\n        translate([0, 0, -12.5])\n        cylinder(h=20, d=handle_diameter, center=true);\n        \n        // Weight reduction holes\n        for(x = [-30:15:30]) {\n            for(y = [-15:15:15]) {\n                translate([x, y, -2.5])\n                cylinder(h=10, d=8);\n            }\n        }\n    }\n    \n    // Picking prongs\n    translate([tool_length/2 + 5, 0, 0])\n    picking_prongs();\n}\n\n// Comb-like picking prongs\nmodule picking_prongs() {\n    prong_length = 30;\n    prong_width = 3;\n    prong_thickness = 2;\n    prong_count = 7;\n    spacing = tool_width / (prong_count - 1);\n    \n    for(i = [0:1:prong_count-1]) {\n        y_pos = -tool_width/2 + i * spacing;\n        \n        // Main prong\n        translate([0, y_pos, 0])\n        rotate([0, -30, 0])\n        cube([prong_length, prong_width, prong_thickness], center=true);\n        \n        // Rounded prong tip\n        translate([prong_length/2 + 1, y_pos, 0])\n        rotate([0, -30, 0])\n        sphere(d=prong_width);\n        \n        // Reinforcement web between prongs\n        if(i < prong_count - 1) {\n            translate([prong_length/4, y_pos + spacing/2, 0])\n            rotate([0, -30, 0])\n            cube([prong_length/2, spacing - prong_width, prong_thickness/2], center=true);\n        }\n    }\n}\n\n// Small berry collection basket\nmodule berry_basket() {\n    basket_width = 35;\n    basket_height = 25;\n    basket_depth = 30;\n    wall_thickness = 2;\n    \n    difference() {\n        // Outer shell\n        cube([basket_width, basket_depth, basket_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness/2])\n        cube([basket_width - 2*wall_thickness, \n              basket_depth - 2*wall_thickness, \n              basket_height - wall_thickness], center=true);\n        \n        // Drainage holes\n        for(x = [-10:10:10]) {\n            for(z = [-10:10:10]) {\n                translate([x, -basket_depth/2 - 1, z])\n                cylinder(h=wall_thickness + 2, d=3);\n            }\n        }\n    }\n    \n    // Mounting clips\n    clip_height = 5;\n    translate([basket_width/2 + 2, 0, basket_height/2 - clip_height])\n    cube([4, 8, clip_height]);\n    translate([-basket_width/2 - 2, 0, basket_height/2 - clip_height])\n    cube([4, 8, clip_height]);\n}\n\n// Render the complete tool\nberry_picker();",
    "renders": true
  },
  {
    "tool": "grain",
    "openscad_code": "// Grain Tool - Realistic Style, Medium Complexity\n// A hand-held grain scoop for measuring and pouring grain\n// Approximate size: 90mm length x 40mm width x 35mm height\n\n// Main parameters\n$fn = 64;\n\n// Colors\ncolor_wood = [0.72, 0.53, 0.38];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_plastic = [0.2, 0.2, 0.2];\n\n// Handle dimensions\nhandle_length = 70;\nhandle_diameter = 22;\ngrip_length = 50;\ngrip_diameter = 25;\n\n// Scoop dimensions\nscoop_width = 40;\nscoop_length = 40;\nscoop_height = 30;\nwall_thickness = 2;\n\n// Spout parameters\nspout_width = 25;\nspout_length = 15;\nspout_angle = 30;\n\n// Rivet parameters\nrivet_radius = 2.5;\nrivet_height = 1.5;\nnum_rivets = 3;\n\nmodule wooden_handle() {\n    color(color_wood) {\n        // Main handle shaft\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip area with textured rings\n        translate([0, 0, (handle_length - grip_length)/2])\n        difference() {\n            cylinder(h=grip_length, d=grip_diameter, center=false);\n            \n            // Grip rings\n            for(i = [0:4]) {\n                translate([0, 0, i * 10 + 2])\n                cylinder(h=1, d=grip_diameter + 1, center=false);\n            }\n        }\n        \n        // Handle end cap\n        translate([0, 0, handle_length])\n        sphere(d=handle_diameter * 1.1);\n    }\n}\n\nmodule metal_scoop() {\n    color(color_metal) {\n        // Main scoop body\n        difference() {\n            // Outer shape\n            translate([0, scoop_width/2, 0])\n            cube([scoop_length, scoop_width, scoop_height], center=false);\n            \n            // Taper the bottom for pouring\n            translate([-5, 0, -5])\n            rotate([0, spout_angle, 0])\n            cube([scoop_length * 2, scoop_width * 2, scoop_height * 2], center=false);\n            \n            // Hollow interior\n            translate([wall_thickness, wall_thickness + 2, wall_thickness])\n            cube([scoop_length - wall_thickness, scoop_width - wall_thickness * 2 - 4, scoop_height - wall_thickness], center=false);\n            \n            // Spout cut\n            translate([scoop_length, scoop_width/2 - spout_width/2, 0])\n            cube([spout_length, spout_width, scoop_height * 0.8], center=false);\n        }\n        \n        // Reinforcement lip\n        translate([0, 0, scoop_height - 1])\n        linear_extrude(height=2)\n        offset(r=2)\n        square([scoop_length, scoop_width], center=false);\n        \n        // Measurement markings (embossed)\n        translate([scoop_length/2, scoop_width + 1, scoop_height/2])\n        rotate([90, 0, 0])\n        linear_extrude(height=0.5)\n        text(\"500ml\", size=8, halign=\"center\");\n    }\n}\n\nmodule rivets() {\n    color(color_metal) {\n        for(i = [0:num_rivets-1]) {\n            translate([i * 15 + 10, -wall_thickness/2, scoop_height/2])\n            rotate([90, 0, 0])\n            cylinder(h=rivet_height, d=rivet_radius * 2, center=true);\n        }\n    }\n}\n\nmodule handle_attachment() {\n    color(color_metal) {\n        // U-shaped bracket\n        translate([-5, scoop_width/2 - 5, 10])\n        difference() {\n            // Main bracket\n            cube([10, 10, 20], center=false);\n            \n            // Hole for handle\n            translate([5, 5, 10])\n            rotate([90, 0, 0])\n            cylinder(h=12, d=handle_diameter + 1, center=true);\n        }\n        \n        // Side supports\n        translate([-5, scoop_width/2 - 5, 0])\n        cube([10, 10, 10], center=false);\n        translate([-5, scoop_width/2 - 5, 20])\n        cube([10, 10, 10], center=false);\n    }\n}\n\n// Assembly\nrotate([0, -15, 0]) {\n    // Handle\n    translate([-handle_length/2, 0, scoop_height/2])\n    rotate([0, 90, 0])\n    wooden_handle();\n    \n    // Scoop body\n    translate([0, 0, 0])\n    metal_scoop();\n    \n    // Handle attachment\n    translate([0, 0, 0])\n    handle_attachment();\n    \n    // Rivets attaching scoop to bracket\n    translate([0, 0, 0])\n    rivets();\n}",
    "renders": true
  },
  {
    "tool": "herb",
    "openscad_code": "// Herb Stripper Tool - Realistic Style, Medium Complexity\n// A kitchen tool for stripping leaves from herb stems\n\n// Overall dimensions\ntool_length = 85;\ntool_width = 35;\ntool_thickness = 8;\n\n// Handle parameters\nhandle_length = 55;\nhandle_diameter = 25;\ngrip_ring_count = 8;\n\n// Stripping holes\nhole_sizes = [1.5, 2.5, 3.5, 5, 7];  // mm diameters for different herb stems\nhole_spacing = 8;\n\n// Main module\nmodule herb_stripper() {\n    color(\"ForestGreen\")\n    union() {\n        // Handle\n        handle();\n        \n        // Stripping head\n        translate([handle_length - tool_thickness/2, 0, 0])\n        rotate([0, 90, 0])\n        stripping_head();\n    }\n}\n\n// Handle with grip rings\nmodule handle() {\n    color(\"DarkOliveGreen\")\n    union() {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [1:grip_ring_count]) {\n            translate([0, 0, i * (handle_length/(grip_ring_count+1))])\n            cylinder(h=2, d=handle_diameter + 2, $fn=32);\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n        cylinder(h=3, d=handle_diameter + 4, $fn=32);\n    }\n}\n\n// Stripping head with holes\nmodule stripping_head() {\n    color(\"ForestGreen\")\n    difference() {\n        // Main head body\n        cube([tool_width, tool_thickness, tool_width], center=true);\n        \n        // Rounded edges for comfort\n        translate([0, tool_thickness/2 + 0.1, 0])\n        rotate([90, 0, 0])\n        cylinder(h=tool_width, r=tool_thickness/2, center=true, $fn=32);\n        \n        // Stripping holes\n        for(i = [0:len(hole_sizes)-1]) {\n            translate([(i - (len(hole_sizes)-1)/2) * hole_spacing, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=tool_thickness + 2, d=hole_sizes[i], center=true, $fn=32);\n        }\n        \n        // Tapered entry for each hole\n        for(i = [0:len(hole_sizes)-1]) {\n            translate([(i - (len(hole_sizes)-1)/2) * hole_spacing, 0, tool_width/2])\n            cylinder(h=5, d1=hole_sizes[i] + 3, d2=hole_sizes[i], $fn=32);\n        }\n        \n        // Hanging hole\n        translate([0, 0, -tool_width/2 - 1])\n        rotate([90, 0, 0])\n        cylinder(h=tool_thickness + 2, d=3, center=true, $fn=32);\n    }\n    \n    // Measurement markings\n    color(\"White\")\n    for(i = [0:len(hole_sizes)-1]) {\n        translate([(i - (len(hole_sizes)-1)/2) * hole_spacing, -tool_thickness/2 - 0.1, 0])\n        linear_extrude(height=0.5)\n        text(str(hole_sizes[i]), size=2, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Render the tool\nherb_stripper();",
    "renders": true
  },
  {
    "tool": "spice",
    "openscad_code": "// OpenSCAD Spice Mill (Pepper Grinder)\n// Realistic style, medium complexity\n// Overall height: ~90 mm, diameter: ~50 mm\n\n// Colors\n$fn = 48;\n\n// Main body module\nmodule spiceMill() {\n    // Main cylindrical body\n    color(\"BurlyWood\") \n    cylinder(h=75, r=25, center=false);\n    \n    // Top knob for grinding mechanism\n    translate([0, 0, 75]) \n    color(\"SaddleBrown\") \n    sphere(r=15);\n    \n    // Grinding adjustment knob at bottom\n    translate([0, 0, -2]) \n    color(\"SaddleBrown\") \n    cylinder(h=8, r1=20, r2=18, center=false);\n    \n    // Window slots to see spice level (3 vertical slots)\n    for(i = [0:120:240]) {\n        rotate([0, 0, i]) \n        translate([23, 0, 25]) \n        color(\"White\") \n        cube([4, 15, 35], center=true);\n    }\n    \n    // Grip rings around body\n    for(z = [15:15:60]) {\n        translate([0, 0, z]) \n        color(\"Sienna\") \n        difference() {\n            cylinder(h=3, r=26, center=false);\n            cylinder(h=3.5, r=24, center=false);\n        }\n    }\n    \n    // Fill cap on top side\n    rotate([0, 0, 30]) \n    translate([0, 25, 65]) \n    color(\"Sienna\") \n    difference() {\n        cylinder(h=12, r=8, center=true);\n        translate([0, 0, -6.5]) \n        cylinder(h=2, r=6, center=false);\n    }\n    \n    // Metal grinding mechanism visible at bottom\n    translate([0, 0, 0]) \n    color(\"Silver\") \n    difference() {\n        cylinder(h=5, r=18, center=false);\n        // Grinding teeth pattern\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) \n            translate([12, 0, 2.5]) \n            cube([8, 2, 5], center=true);\n        }\n    }\n    \n    // Base ring for stability\n    translate([0, 0, -5]) \n    color(\"SaddleBrown\") \n    difference() {\n        cylinder(h=5, r=30, center=false);\n        cylinder(h=6, r=25, center=false);\n    }\n}\n\n// Assembly\nspiceMill();",
    "renders": true
  },
  {
    "tool": "tea",
    "openscad_code": "// Tea Infuser Tool - Realistic Style, Medium Complexity\n// A 3D printable tea infuser with chain and hook\n\n// Main parameters\n$fn = 50;\nhandle_length = 70;\nhandle_diameter = 8;\nbasket_diameter = 35;\nbasket_height = 40;\nchain_length = 50;\nchain_link_size = 4;\nwall_thickness = 1.5;\n\n// Colors\ncolor_handle = \"SaddleBrown\";\ncolor_basket = \"Silver\";\ncolor_chain = \"Goldenrod\";\n\n// Handle with grip pattern\nmodule handle() {\n    color(color_handle) {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip rings\n        for(i = [10:15:handle_length-20]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=3, d=handle_diameter + 2, center=false);\n                    cylinder(h=3.5, d=handle_diameter - 1, center=false);\n                }\n            }\n        }\n        \n        // Top cap\n        translate([0, 0, handle_length]) {\n            sphere(d=handle_diameter + 2);\n        }\n    }\n}\n\n// Perforated tea basket\nmodule tea_basket() {\n    color(color_basket) {\n        difference() {\n            // Main basket\n            cylinder(h=basket_height, d=basket_diameter, center=true);\n            \n            // Hollow interior\n            cylinder(h=basket_height - 2*wall_thickness, d=basket_diameter - 2*wall_thickness, center=true);\n            \n            // Perforations - small holes for water flow\n            for(angle = [0:30:359]) {\n                rotate([0, 0, angle]) {\n                    for(h = [-15:10:15]) {\n                        translate([basket_diameter/2 - wall_thickness, 0, h]) {\n                            rotate([0, 90, 0]) {\n                                cylinder(h=wall_thickness + 1, d=2, center=true);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Top opening\n            translate([0, 0, basket_height/2]) {\n                cylinder(h=wall_thickness + 1, d=basket_diameter - 2*wall_thickness, center=true);\n            }\n        }\n        \n        // Hinge for basket lid\n        translate([0, -basket_diameter/2, basket_height/2 - 3]) {\n            cube([2, 5, 2], center=true);\n        }\n        \n        // Latch on opposite side\n        translate([0, basket_diameter/2 - wall_thickness, basket_height/2 - 3]) {\n            cube([2, wall_thickness, 2], center=true);\n        }\n    }\n}\n\n// Basket lid\nmodule basket_lid() {\n    color(color_basket) {\n        difference() {\n            // Main lid\n            cylinder(h=wall_thickness, d=basket_diameter - 0.5, center=true);\n            \n            // Handle on lid\n            translate([0, 0, wall_thickness/2]) {\n                cylinder(h=5, d=5, center=false);\n            }\n        }\n    }\n}\n\n// Individual chain link\nmodule chain_link() {\n    color(color_chain) {\n        difference() {\n            // Main ring\n            rotate([90, 0, 0]) {\n                torus(r1=chain_link_size/2, r2=chain_link_size/6);\n            }\n            \n            // Gap for assembly\n            translate([-chain_link_size/2 - 1, 0, 0]) {\n                cube([chain_link_size + 2, chain_link_size/3, chain_link_size/3], center=true);\n            }\n        }\n    }\n}\n\n// Complete chain\nmodule chain() {\n    for(i = [0:chain_link_size*1.5:chain_length-chain_link_size*1.5]) {\n        translate([0, 0, i]) {\n            chain_link();\n        }\n    }\n}\n\n// Hook for hanging\nmodule hook() {\n    color(color_chain) {\n        difference() {\n            // Main hook shape\n            rotate([0, 90, 0]) {\n                rotate_extrude(angle=270) {\n                    translate([15, 0, 0]) {\n                        circle(r=2);\n                    }\n                }\n            }\n            \n            // Point\n            translate([0, 0, -15]) {\n                cylinder(h=15, d1=4, d2=0, center=false);\n            }\n        }\n    }\n}\n\n// Assembly\n// Handle at top\nhandle();\n\n// Chain connecting handle to basket\ntranslate([0, 0, handle_length - 5]) {\n    chain();\n}\n\n// Hook at end of chain\ntranslate([0, 0, handle_length - 5 - chain_length]) {\n    hook();\n}\n\n// Tea basket at bottom\ntranslate([0, 0, handle_length - 5 - chain_length - chain_link_size*2]) {\n    tea_basket();\n}\n\n// Basket lid attached via hinge\ntranslate([0, -basket_diameter/2 + wall_thickness/2, handle_length - 5 - chain_length - chain_link_size*2 + basket_height/2 - 3]) {\n    rotate([90, 0, 0]) {\n        rotate([0, 90, 0]) {\n            basket_lid();\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "oil",
    "openscad_code": "// Realistic Oil Filter Wrench - Medium Complexity\n// Designed for 3D printing, 86mm overall length\n\n// Main parameters\n$fn = 36;\nwrench_length = 86;\nhandle_length = 60;\nhandle_diameter = 22;\nhead_diameter = 50;\nhead_thickness = 15;\ngrip_depth = 3;\ngrip_spacing = 6;\ntooth_count = 8;\ntooth_height = 8;\nwall_thickness = 2.5;\n\nmodule handle() {\n    // Main handle body\n    color(\"silver\")\n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip grooves\n        for(i = [5:10:handle_length-15]) {\n            translate([0, 0, i])\n                cylinder(h=grip_depth, d=handle_diameter+1, center=false);\n        }\n    }\n    \n    // End cap\n    translate([0, 0, handle_length])\n        color(\"red\")\n        cylinder(h=5, d=handle_diameter+2, center=false);\n}\n\nmodule wrench_head() {\n    // Main head body\n    color(\"silver\")\n    difference() {\n        // Thick disc\n        cylinder(h=head_thickness, d=head_diameter, center=true);\n        \n        // Central hole\n        cylinder(h=head_thickness+2, d=30, center=true);\n    }\n    \n    // Gripping teeth\n    for(i = [0:tooth_count-1]) {\n        rotate([0, 0, i * (360/tooth_count)])\n        translate([18, 0, 0])\n            color(\"darkgray\")\n            cube([tooth_height, 3, head_thickness], center=true);\n    }\n}\n\nmodule reinforcing_rib() {\n    // Structural rib between handle and head\n    color(\"silver\")\n    difference() {\n        union() {\n            // Main rib\n            translate([0, 0, -5])\n                cube([30, wall_thickness*2, 10], center=true);\n            \n            // Transition fillet\n            translate([-15, 0, -4])\n                rotate([90, 0, 0])\n                    cylinder(h=30, d1=5, d2=8, center=false);\n        }\n        \n        // Remove center\n        translate([-15, 0, -5])\n            cube([30, wall_thickness*2+2, 10], center=true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2])\n    rotate([90, 0, 0])\n        handle();\n\ntranslate([0, 0, 0])\n    rotate([90, 0, 0])\n        wrench_head();\n\ntranslate([0, 0, 0])\n    rotate([90, 0, 0])\n        reinforcing_rib();\n\n// Size marking\ntranslate([0, -handle_diameter/2-2, handle_length/2])\n    rotate([0, 90, 0])\n        color(\"black\")\n        linear_extrude(height=0.5)\n            text(\"86mm\", size=4, halign=\"center\");",
    "renders": true
  },
  {
    "tool": "wax",
    "openscad_code": "// Realistic Wax Tool - Medium Complexity\n// Features: ergonomic handle, serrated blade, safety guard, hanging loop\n\n// Dimensions in mm\nhandle_len = 80;\nhandle_dia = 12;\nblade_len = 60;\nblade_width = 15;\nblade_thick = 2;\nguard_len = 25;\nguard_height = 8;\nloop_radius = 5;\n\n// Main assembly\nmodule wax_tool() {\n    color(\"silver\") {\n        // Handle with grip texture\n        difference() {\n            // Main handle body\n            translate([0, 0, -handle_len/2]) \n                cylinder(h=handle_len, d=handle_dia, $fn=32);\n            \n            // Grip grooves\n            for(i = [1:5:handle_len-10]) {\n                translate([0, 0, -handle_len/2 + i])\n                    cylinder(h=2, d=handle_dia+0.5, $fn=32);\n            }\n            \n            // Hanging loop hole\n            translate([handle_dia/2 + loop_radius, 0, handle_len/2 - 10])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=loop_radius*2, $fn=16);\n        }\n        \n        // Hanging loop\n        translate([handle_dia/2 + loop_radius, 0, handle_len/2 - 10])\n            rotate([90, 0, 0])\n                rotate_extrude(angle=180, $fn=16)\n                    translate([loop_radius, 0, 0])\n                        circle(r=2);\n    }\n    \n    // Safety guard\n    color(\"darkgray\") {\n        translate([0, 0, -handle_len/2 - guard_height/2])\n            difference() {\n                cube([guard_len, blade_width*1.5, guard_height], center=true);\n                cube([guard_len+2, blade_width*1.5-4, guard_height+2], center=true);\n            }\n    }\n    \n    // Blade assembly\n    color(\"silver\") {\n        // Blade base\n        translate([0, 0, -handle_len/2 - guard_height - blade_len/2])\n            cube([blade_thick, blade_width, blade_len], center=true);\n        \n        // Serrated edge\n        for(i = [0:3:blade_len-3]) {\n            translate([blade_thick/2, 0, -handle_len/2 - guard_height - i])\n                rotate([0, 90, 0])\n                    cylinder(h=blade_width, d=3, $fn=6);\n        }\n        \n        // Blade tip\n        translate([blade_thick/2, 0, -handle_len/2 - guard_height - blade_len + 2])\n            rotate([0, 90, 0])\n                cylinder(h=blade_width, d=blade_thick*2, $fn=3);\n    }\n}\n\n// Render the tool\nwax_tool();",
    "renders": true
  },
  {
    "tool": "soap",
    "openscad_code": "// Realistic Soap Bar Tool\n// Includes soap bar with embossed logo, drainage tray, and grip ridges\n\n// Parameters\nsoap_length = 80;\nsoap_width = 50;\nsoap_height = 25;\ntray_length = 90;\ntray_width = 60;\ntray_height = 8;\nwall_thickness = 3;\ngrip_depth = 2;\nlogo_height = 1.5;\n\n// Colors\nsoap_color = [0.9, 0.9, 0.85];\ntray_color = [0.2, 0.2, 0.25];\n\n// Main soap module\nmodule soap_bar() {\n    color(soap_color) {\n        difference() {\n            // Main soap body with rounded edges\n            union() {\n                // Core shape\n                translate([0, 0, soap_height/2])\n                    rounded_cube([soap_length, soap_width, soap_height], 5);\n                \n                // Grip ridges on sides\n                for (i = [-1, 1]) {\n                    translate([0, i*(soap_width/2 - wall_thickness/2), soap_height/2])\n                        rounded_cube([soap_length*0.8, wall_thickness, soap_height - 4], 2);\n                }\n            }\n            \n            // Embossed logo (simple wave pattern)\n            translate([0, 0, soap_height - logo_height - 0.1])\n                linear_extrude(height=logo_height + 0.2) {\n                    translate([0, 0, 0])\n                        text(\"SOAP\", size=12, halign=\"center\", valign=\"center\");\n                }\n            \n            // Drainage grooves on bottom\n            for (i = [-20, 0, 20]) {\n                translate([i, 0, -0.1])\n                    cube([3, soap_width - 10, 2]);\n            }\n        }\n    }\n}\n\n// Drainage tray module\nmodule soap_tray() {\n    color(tray_color) {\n        difference() {\n            // Main tray base\n            union() {\n                // Base plate\n                translate([0, 0, tray_height/2])\n                    rounded_cube([tray_length, tray_width, tray_height], 3);\n                \n                // Raised edges\n                translate([0, 0, tray_height + wall_thickness/2])\n                    rounded_cube([tray_length, tray_width, wall_thickness], 3);\n            }\n            \n            // Central cavity for soap\n            translate([0, 0, tray_height - 0.1])\n                rounded_cube([soap_length + 4, soap_width + 4, tray_height + 0.2], 4);\n            \n            // Drainage holes\n            for (x = [-30, -10, 10, 30]) {\n                for (y = [-15, 0, 15]) {\n                    translate([x, y, 0])\n                        cylinder(h=tray_height + 1, r=2, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Helper module for rounded cubes\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                for (z = [-1, 1]) {\n                    translate([x*(size[0]/2 - radius), y*(size[1]/2 - radius), z*(size[2]/2 - radius)])\n                        sphere(r=radius, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, tray_height + soap_height/2 + 5])\n    soap_bar();\n\nsoap_tray();",
    "renders": true
  },
  {
    "tool": "spray",
    "openscad_code": "// Spray bottle - OpenSCAD realistic style with medium complexity\n// Overall height ~85 mm, suitable for 3D printing\n\n// Main dimensions\n$fn = 50;\nwall = 1.2;      // Wall thickness for 3D printing\nscale = 1;\n\nmodule bottle_body() {\n    // Main cylindrical bottle\n    difference() {\n        cylinder(h=60, d=36, center=false);\n        translate([0, 0, wall])\n            cylinder(h=60 - wall*2, d=36 - wall*2, center=false);\n    }\n    \n    // Top shoulder rounding\n    translate([0, 0, 60])\n        cylinder(h=4, d1=36, d2=30, center=false);\n}\n\nmodule trigger() {\n    color(\"lightgray\")\n    union() {\n        // Trigger body\n        translate([-15, 0, 60])\n            rotate([0, 0, -15])\n            cube([20, 12, 8], center=true);\n        \n        // Trigger guard\n        translate([-20, 0, 56])\n            difference() {\n                cube([10, 16, 12], center=true);\n                translate([2, 0, 2])\n                    cube([6, 12, 8], center=true);\n            }\n    }\n}\n\nmodule nozzle() {\n    color(\"darkgray\")\n    union() {\n        // Nozzle base\n        translate([0, 0, 64])\n            cylinder(h=6, d=20, center=false);\n        \n        // Nozzle tip\n        translate([10, 0, 67])\n            rotate([0, 90, 0])\n            cylinder(h=10, d=6, center=false);\n    }\n}\n\nmodule cap() {\n    color(\"blue\")\n    difference() {\n        // Cap main body\n        cylinder(h=8, d=30, center=false);\n        // Inner cavity\n        translate([0, 0, wall])\n            cylinder(h=8, d=30 - wall*2, center=false);\n    }\n}\n\nmodule grip_pattern() {\n    // Horizontal grip rings\n    for(i=[5:5:50]) {\n        color(\"white\", 0.3)\n        translate([0, 0, i])\n            cylinder(h=1, d=38, center=false);\n    }\n}\n\nmodule label_area() {\n    // Flat label panel\n    difference() {\n        translate([0, 19, 30])\n            cube([25, 2, 30], center=true);\n        translate([0, 20, 30])\n            cube([23, 1, 28], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    color([0.9, 0.9, 0.9]) bottle_body();\n    color(\"gray\") grip_pattern();\n    color(\"white\") label_area();\n    \n    // Sprayer mechanism\n    color(\"black\") cap();\n    trigger();\n    nozzle();\n    \n    // Tube inside (visual only)\n    color(\"lightgray\", 0.5)\n    translate([0, 0, 20])\n        cylinder(h=40, d=4, center=false);\n}",
    "renders": true
  },
  {
    "tool": "dust",
    "openscad_code": "// Dust brush tool - realistic style, medium complexity\n// 3D printable handheld dust brush for cleaning keyboards and small items\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main colors\ncolor_brush = \"dimgray\";\ncolor_handle = \"darkslategray\";\ncolor_bristles = \"ivory\";\n\n// Overall dimensions\nhandle_length = 80;\nhandle_diameter = 15;\nbrush_width = 35;\nbrush_height = 25;\nbristle_length = 20;\n\nmodule handle() {\n    color(color_handle) {\n        // Main grip section\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip rings for better handling\n        for(i = [10:15:handle_length-20]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=handle_diameter+2, center=false);\n        }\n        \n        // Tapered end\n        translate([0, 0, handle_length])\n            cylinder(h=5, d1=handle_diameter, d2=handle_diameter-4, center=false);\n    }\n}\n\nmodule ferrule() {\n    color(\"silver\") {\n        // Metal collar connecting handle to brush head\n        translate([0, 0, 0])\n            cylinder(h=8, d=handle_diameter+6, center=false);\n        \n        // Decorative ring\n        translate([0, 0, 2])\n            cylinder(h=1, d=handle_diameter+8, center=false);\n    }\n}\n\nmodule brush_head() {\n    color(color_brush) {\n        // Main brush body - slightly curved\n        difference() {\n            // Basic curved shape\n            translate([-brush_width/2, -brush_height/2, 0])\n                cube([brush_width, brush_height, 15]);\n            \n            // Rounded top\n            translate([0, 0, 15])\n                sphere(d=brush_width);\n        }\n        \n        // Attachment point for bristles\n        translate([0, -brush_height/2 - 2, 0])\n            cube([brush_width, 4, 10], center=true);\n    }\n}\n\nmodule bristles() {\n    color(color_bristles) {\n        // Dense bristle pattern\n        for(x = [-brush_width/2+3:3:brush_width/2-3]) {\n            for(y = [-brush_height/2:2:brush_height/2]) {\n                translate([x, y, -bristle_length])\n                    cylinder(h=bristle_length, d=1, center=false);\n            }\n        }\n        \n        // Reinforcement at base of bristles\n        translate([0, 0, -bristle_length-0.5])\n            cube([brush_width-2, brush_height, 1], center=true);\n    }\n}\n\nmodule logo() {\n    color(\"white\") {\n        // Simple embossed logo on handle\n        translate([0, handle_diameter/2+0.1, handle_length/2])\n            rotate([90, 0, 0])\n                linear_extrude(height=0.5)\n                    text(\"DUST\", size=6, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    handle();\n\ntranslate([0, 0, handle_length])\n    ferrule();\n\ntranslate([0, 0, handle_length+8])\n    rotate([0, 180, 0])\n        brush_head();\n\ntranslate([0, 0, handle_length+8])\n    bristles();\n\ntranslate([0, handle_diameter/2, 0])\n    logo();",
    "renders": true
  },
  {
    "tool": "powder",
    "openscad_code": "// Realistic Powder Tool - Medium Complexity\n// A cosmetic powder applicator with puff and compact case\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Main colors\ncase_color = \"Gold\";\npuff_color = \"LightPink\";\nmirror_color = \"Silver\";\nhinge_color = \"DimGray\";\n\n// Overall dimensions\ncase_diameter = 60;\ncase_height = 15;\nwall_thickness = 2;\npuff_diameter = 50;\npuff_height = 8;\n\n// Create the complete powder compact\nmodule powder_compact() {\n    // Main case bottom\n    translate([0, 0, 0])\n        case_bottom();\n    \n    // Case top with mirror\n    translate([0, case_diameter * 0.8, case_height])\n        rotate([0, 180, 0])\n        case_top();\n    \n    // Puff inside\n    translate([0, 0, wall_thickness + 2])\n        puff();\n    \n    // Hinge mechanism\n    translate([case_diameter * 0.4, 0, case_height])\n        rotate([90, 0, 0])\n        hinge();\n}\n\n// Case bottom with powder reservoir\nmodule case_bottom() {\n    difference() {\n        // Outer shell\n        color(case_color)\n        cylinder(h = case_height, r = case_diameter/2);\n        \n        // Inner cavity for powder\n        translate([0, 0, wall_thickness])\n            cylinder(h = case_height - wall_thickness - 1, r = case_diameter/2 - wall_thickness);\n        \n        // Decorative ring groove\n        translate([0, 0, case_height - 2])\n            cylinder(h = 1, r = case_diameter/2 - 3);\n    }\n    \n    // Internal powder surface\n    translate([0, 0, wall_thickness + 1])\n        color(\"Beige\")\n        cylinder(h = 0.5, r = case_diameter/2 - wall_thickness - 1);\n}\n\n// Case top with mirror\nmodule case_top() {\n    difference() {\n        // Outer shell\n        color(case_color)\n        cylinder(h = case_height, r = case_diameter/2);\n        \n        // Mirror recess\n        translate([0, 0, wall_thickness])\n            cylinder(h = case_height - wall_thickness - 2, r = case_diameter/2 - wall_thickness);\n    }\n    \n    // Mirror\n    translate([0, 0, wall_thickness + 0.5])\n        color(mirror_color)\n        cylinder(h = 0.5, r = case_diameter/2 - wall_thickness - 1);\n    \n    // Closure latch\n    translate([case_diameter/2 - 3, 0, case_height - 3])\n        cube([3, 6, 3], center = true);\n}\n\n// Soft puff applicator\nmodule puff() {\n    // Main puff body\n    color(puff_color)\n    translate([0, 0, 0])\n        cylinder(h = puff_height, r = puff_diameter/2);\n    \n    // Ribbed texture lines\n    for (i = [1:4]) {\n        rotate([0, 0, i * 45])\n            translate([puff_diameter/4, 0, puff_height/2])\n                scale([1, 0.1, 1])\n                    sphere(r = puff_height/2);\n    }\n    \n    // Handle grip\n    translate([0, 0, puff_height])\n        cylinder(h = 8, r1 = 8, r2 = 6);\n}\n\n// Hinge mechanism\nmodule hinge() {\n    color(hinge_color) {\n        // Main hinge pin\n        cylinder(h = case_diameter/4, r = 2);\n        \n        // Hinge knuckles\n        for (i = [-1, 1]) {\n            translate([0, i * 5, 0])\n                cylinder(h = 4, r = 3);\n        }\n    }\n}\n\n// Assemble the complete model\nrotate([30, 0, 0])\n    powder_compact();",
    "renders": true
  },
  {
    "tool": "granule",
    "openscad_code": "// Granule Tool - Realistic Style, Medium Complexity\n// A handheld tool for granulated material handling and dispensing\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_grip = [0.1, 0.1, 0.1];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_transparent = [0.8, 0.8, 0.9, 0.6];\n\n// Overall dimensions\nlength = 85;\nwidth = 35;\nheight = 45;\n\nmodule handle_grip() {\n    // Ergonomic handle with rubber grip texture\n    color(color_grip)\n    difference() {\n        union() {\n            // Main handle body\n            translate([0, 0, 15])\n                scale([1, 1.1, 1])\n                cylinder(h = 50, d = 25, center = true);\n            \n            // Gripping ridges\n            for(i = [0:5]) {\n                rotate([90, 0, i * 60])\n                    translate([0, 0, 15 - i * 8])\n                        cylinder(h = 6, d = 28, center = true);\n            }\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 15])\n            cylinder(h = 52, d = 15, center = true);\n    }\n}\n\nmodule dispensing_mechanism() {\n    // Main dispensing chamber\n    color(color_body)\n    union() {\n        // Storage hopper\n        translate([0, 0, -10])\n            cylinder(h = 30, d1 = 30, d2 = 20);\n        \n        // Dispensing tube\n        translate([0, 0, -25])\n            cylinder(h = 20, d = 12);\n        \n        // Control lever mechanism\n        translate([20, 0, -15])\n            rotate([0, 90, 0])\n                cylinder(h = 15, d = 8);\n    }\n    \n    // Adjustable flow gate\n    color(color_metal)\n    translate([15, 0, -20])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 20, d = 14);\n                translate([0, 0, -1])\n                    cube([16, 12, 2], center = true);\n            }\n}\n\nmodule measurement_window() {\n    // Transparent measurement window\n    color(color_transparent)\n    difference() {\n        // Main window\n        translate([0, 15, -5])\n            cube([25, 4, 20], center = true);\n        \n        // Measurement marks\n        for(i = [0:3]) {\n            translate([0, 17, -15 + i * 10])\n                cube([20, 1, 1], center = true);\n        }\n    }\n}\n\nmodule filling_cap() {\n    // Screw-on filling cap with grip ridges\n    color(color_body)\n    difference() {\n        union() {\n            translate([0, 0, 20])\n                cylinder(h = 10, d = 35);\n            \n            // Grip ridges on cap\n            for(i = [0:15]) {\n                rotate([0, 0, i * 24])\n                    translate([16, 0, 25])\n                        cube([3, 2, 8], center = true);\n            }\n        }\n        \n        // Air vent hole\n        translate([0, 0, 25])\n            cylinder(h = 12, d = 5);\n    }\n}\n\nmodule tool_body() {\n    // Main assembly\n    union() {\n        // Handle assembly\n        translate([-30, 0, 0])\n            handle_grip();\n        \n        // Dispensing assembly\n        translate([0, 0, 0])\n            dispensing_mechanism();\n        \n        // Measurement window\n        measurement_window();\n        \n        // Filling cap on top\n        filling_cap();\n        \n        // Reinforcement ribs\n        color(color_body)\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 0])\n                rotate([0, side * 15, 0])\n                    cube([3, 30, 40], center = true);\n        }\n    }\n}\n\n// Render the complete tool\ntool_body();",
    "renders": true
  },
  {
    "tool": "pellet",
    "openscad_code": "// Pellet tool (pellet sizer & cutter) â€“ realistic, medium complexity\n// Overall length â‰ˆ 90 mm, printed lying flat (no overhangs)\n\n// Color scheme\npelletColor = \"silver\";\nhandleColor = \"darkolivegreen\";\nbladeColor = \"silver\";\nmarkColor  = \"black\";\n\n// ---------- PARAMETERS ----------\npelletD  = 5.5;      // .22 cal pellet diameter\npelletL  = 10;       // pellet length\nhandleL  = 65;\nhandleD  = 20;\ncutterL  = 15;\ncutterD  = 8;\nbladeT   = 0.6;      // cutting blade thickness\ngripR    = 1.0;      // grip ring radius\ngripStep = 4;        // spacing between grip rings\nwall     = 2.0;      // minimum wall thickness\n\n// ---------- MODULES ----------\n\n// Pellet sizing die (cavity)\nmodule pelletDie() {\n    difference() {\n        color(pelletColor) cylinder(h=pelletL, d=pelletD+2*wall, $fn=64);\n        translate([0,0,-1]) cylinder(h=pelletL+2, d=pelletD, $fn=64);\n    }\n}\n\n// Handle with grip rings\nmodule handle() {\n    color(handleColor) {\n        difference() {\n            // Main handle body\n            cylinder(h=handleL, d=handleD, $fn=64);\n            // Center bore for pellet path\n            translate([0,0,-1]) cylinder(h=handleL+2, d=pelletD+2*wall, $fn=64);\n        }\n        // Grip rings\n        for(i=[0:ceil(handleL/gripStep)]) {\n            translate([0,0,i*gripStep]) {\n                difference() {\n                    cylinder(h=gripR*2, d=handleD+2*gripR, $fn=64);\n                    cylinder(h=gripR*2+0.1, d=handleD, $fn=64);\n                }\n            }\n        }\n    }\n}\n\n// Cutting head with blade\nmodule cutterHead() {\n    color(bladeColor) {\n        difference() {\n            cylinder(h=cutterL, d=cutterD, $fn=64);\n            // Blade slot\n            translate([0,0,cutterL/2-bladeT/2])\n                cube([cutterD+2, 0.2, bladeT+0.1], center=true);\n            // Pellet exit hole\n            translate([0,0,-1]) cylinder(h=cutterL+2, d=pelletD*1.2, $fn=64);\n        }\n        // Actual blade insert\n        translate([0,0,cutterL/2-bladeT/2])\n            rotate([0,90,0]) cube([cutterD*0.9, cutterD*0.9, bladeT], center=true);\n    }\n}\n\n// Markings\nmodule markings() {\n    color(markColor) {\n        // Size label\n        translate([handleD/2+0.2,0,handleL/2])\n            rotate([0,90,0])\n            linear_extrude(height=0.5) text(\".22\", size=3, halign=\"center\");\n    }\n}\n\n// ---------- ASSEMBLY ----------\nhandle();\ntranslate([0,0,handleL]) union() {\n    pelletDie();\n    translate([0,0,pelletL]) cutterHead();\n}\nmarkings();",
    "renders": true
  },
  {
    "tool": "cake",
    "openscad_code": "// Cake server - realistic style with medium complexity\n\n// Overall dimensions\ncake_width = 80;\ncake_length = 100;\ncake_height = 25;\nhandle_length = 70;\nhandle_diameter = 12;\n\nmodule cake_slice() {\n    // Main cake slice body\n    difference() {\n        // Outer shape of cake slice\n        union() {\n            // Base cake\n            translate([0, 0, 0])\n                cube([cake_width, cake_length, cake_height], center=true);\n            \n            // Rounded top edge\n            translate([0, cake_length/2 - cake_height/2, cake_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=cake_width, r=cake_height/2, center=true);\n        }\n        \n        // Cut slice shape (triangular cutout)\n        translate([0, cake_length/2, 0])\n            rotate([0, 0, 0])\n                cube([cake_width*2, cake_length*2, cake_height*2], center=true);\n        \n        // Taper the slice\n        translate([0, 0, -cake_height/2 - 0.1])\n            rotate([0, 15, 0])\n                cube([cake_width*2, cake_length*2, cake_height], center=true);\n    }\n}\n\nmodule frosting_details() {\n    // Top frosting layer\n    color(\"white\")\n    translate([0, 0, cake_height/2 + 1])\n        cube([cake_width - 4, cake_length - 4, 2], center=true);\n    \n    // Frosting swirls\n    for(i = [-30:15:30]) {\n        for(j = [-40:15:40]) {\n            color(\"white\")\n            translate([i, j, cake_height/2 + 2])\n                cylinder(h=2, r=3, $fn=12);\n        }\n    }\n}\n\nmodule handle_grip() {\n    // Main handle shaft\n    color(\"silver\")\n    translate([0, -cake_length/2 - handle_length/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=handle_length, r=handle_diameter/2, center=true, $fn=32);\n    \n    // Grip rings for better hold\n    for(pos = [0.2, 0.4, 0.6, 0.8]) {\n        color(\"gray\")\n        translate([0, -cake_length/2 - handle_length*pos, 0])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=handle_diameter/2 + 1, center=true, $fn=32);\n    }\n}\n\nmodule blade_edge() {\n    // Sharp edge for cutting\n    color(\"silver\")\n    translate([0, cake_length/2 - 1, 0])\n        rotate([90, 0, 0])\n            cylinder(h=2, r=cake_height - 2, center=true, $fn=3);\n    \n    // Blade reinforcement\n    color(\"silver\")\n    translate([0, cake_length/2 - 5, 0])\n        cube([cake_width - 2, 8, 1], center=true);\n}\n\n// Assembly\nunion() {\n    // Cake slice\n    color(\"beige\")\n    cake_slice();\n    \n    // Frosting details\n    frosting_details();\n    \n    // Handle\n    handle_grip();\n    \n    // Cutting edge\n    blade_edge();\n}",
    "renders": true
  },
  {
    "tool": "bar",
    "openscad_code": "// Boston-style cocktail shaker (tin-on-tin) â€“ realistic, medium complexity\n// Approx. 85 mm tall, two-piece shaker with realistic details\n\n$fn = 50;\n\ncolor(\"silver\")\nunion() {\n    // Bottom cup\n    translate([0, 0, 0]) bottom_cup();\n\n    // Top cup / lid\n    translate([0, 0, 45]) rotate([0, 0, 0]) top_cup();\n}\n\nmodule bottom_cup() {\n    difference() {\n        // Main cup body\n        cylinder(h = 50, r1 = 38/2, r2 = 35/2);\n\n        // Hollow interior\n        translate([0, 0, 3])\n            cylinder(h = 47, r1 = 35/2, r2 = 32/2);\n    }\n\n    // Bevelled rim lip\n    translate([0, 0, 50])\n        cylinder(h = 2, r1 = 39/2, r2 = 38/2);\n\n    // Reinforcing base ring\n    translate([0, 0, 0])\n        cylinder(h = 2, r = 38/2);\n\n    // Grip rings â€“ three evenly spaced\n    for (z = [10, 25, 40]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 1.5, r = 38.5/2);\n                cylinder(h = 1.5, r = 37/2);\n            }\n    }\n}\n\nmodule top_cup() {\n    difference() {\n        // Main cup body\n        cylinder(h = 40, r1 = 37/2, r2 = 34/2);\n\n        // Hollow interior\n        translate([0, 0, 3])\n            cylinder(h = 37, r1 = 34/2, r2 = 31/2);\n    }\n\n    // Bevelled rim lip\n    translate([0, 0, 40])\n        cylinder(h = 2, r1 = 38/2, r2 = 37/2);\n\n    // Built-in strainer slots\n    translate([0, 0, 35])\n        strainer_slots();\n\n    // Grip rings â€“ two evenly spaced\n    for (z = [8, 25]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 1.5, r = 37.5/2);\n                cylinder(h = 1.5, r = 36/2);\n            }\n    }\n}\n\nmodule strainer_slots() {\n    // Six radial rectangular slots\n    for (a = [0:60:359])\n        rotate([0, 0, a])\n            translate([35/2 - 1, 0, 0])\n                cube([2, 5, 2], center = true);\n}",
    "renders": true
  },
  {
    "tool": "block",
    "openscad_code": "// Block Plane - Realistic Medium Complexity\n// A hand-held woodworking block plane for trimming and smoothing wood surfaces\n\n// Main color scheme\ncolor_plastic = \"DarkGray\";\ncolor_metal = \"Silver\";\ncolor_wood = \"SaddleBrown\";\ncolor_blade = \"LightGray\";\n\n// Overall dimensions\nplane_length = 85;\nplane_width = 50;\nplane_height = 35;\nhandle_length = 60;\n\n// Main body of the plane\nmodule plane_body() {\n    color(color_plastic)\n    difference() {\n        // Main block shape\n        translate([-plane_length/2, -plane_width/2, 0])\n            cube([plane_length, plane_width, plane_height]);\n        \n        // Front mouth opening for blade\n        translate([plane_length/2 - 15, -plane_width/2 + 5, 0])\n            cube([20, plane_width - 10, plane_height - 5]);\n        \n        // Blade adjustment slot\n        translate([-plane_length/2 + 30, -plane_width/2 + 20, plane_height - 3])\n            cube([15, 10, 5]);\n    }\n}\n\n// Metal sole plate\nmodule sole_plate() {\n    color(color_metal)\n    translate([-plane_length/2 - 2, -plane_width/2 - 2, -1])\n        cube([plane_length + 4, plane_width + 4, 2]);\n}\n\n// Adjustable blade assembly\nmodule blade_assembly() {\n    color(color_blade)\n    // Main blade\n    translate([plane_length/2 - 25, -plane_width/2 + 2, 5])\n        rotate([0, 25, 0])\n        cube([25, plane_width - 4, 2]);\n    \n    // Blade cap\n    color(color_metal)\n    translate([plane_length/2 - 30, -plane_width/2 + 5, 10])\n        cube([20, plane_width - 10, 3]);\n    \n    // Adjustment knob\n    color(color_metal)\n    translate([-plane_length/2 + 35, -plane_width/2 + 25, plane_height + 5])\n        cylinder(h = 8, r = 5, $fn = 16);\n}\n\n// Front knob for control\nmodule front_knob() {\n    color(color_wood)\n    translate([plane_length/2 - 15, 0, plane_height + 15])\n        rotate([90, 0, 0])\n        cylinder(h = 25, r1 = 8, r2 = 6, $fn = 16);\n}\n\n// Rear handle with grip texture\nmodule rear_handle() {\n    color(color_wood)\n    difference() {\n        // Main handle shape\n        translate([-plane_length/2 + 15, 0, plane_height + 5])\n            rotate([90, 0, 0])\n            cylinder(h = handle_length, r1 = 6, r2 = 8, $fn = 16);\n        \n        // Grip rings\n        for (i = [1:4]) {\n            translate([-plane_length/2 + 15, 0, plane_height + 5 + i * 12])\n                rotate([90, 0, 0])\n                cylinder(h = 2, r1 = 5, r2 = 9, $fn = 16);\n        }\n    }\n}\n\n// Side adjustment lever\nmodule side_lever() {\n    color(color_metal)\n    translate([-plane_length/2 + 20, plane_width/2 + 1, plane_height/2])\n        rotate([0, 0, 45])\n        cube([15, 2, 8]);\n}\n\n// Blade depth adjustment wheel\nmodule depth_wheel() {\n    color(color_metal)\n    translate([-plane_length/2 + 5, 0, plane_height/2])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r = 6, $fn = 32);\n    \n    // Knurling pattern\n    color(color_metal)\n    for (i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([-plane_length/2 + 5, 0, plane_height/2 + 4])\n                cube([0.5, 6, 0.5], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    plane_body();\n    sole_plate();\n    blade_assembly();\n    front_knob();\n    rear_handle();\n    side_lever();\n    depth_wheel();\n}",
    "renders": true
  },
  {
    "tool": "brick",
    "openscad_code": "// Brick Trowel - Realistic style, medium complexity\n// Overall length ~180mm, blade width ~100mm\n\n// Main colors\nblade_color = \"#C0C0C0\";\nhandle_color = \"#8B4513\";\ngrip_color = \"#2F4F4F\";\n\n// Basic dimensions\nblade_length = 120;\nblade_width = 100;\nblade_thickness = 2;\ntang_length = 40;\nhandle_length = 80;\nhandle_diameter = 30;\n\n// Create the blade\nmodule blade() {\n    color(blade_color) {\n        // Main blade shape - tapered rectangle with rounded front\n        linear_extrude(height=blade_thickness, convexity=10) {\n            polygon(points=[\n                [0, 0],  // Handle end\n                [0, blade_width],  // Handle end\n                [blade_length-20, blade_width-10],  // Tapered sides\n                [blade_length, blade_width/2],  // Rounded tip\n                [blade_length-20, 10]  // Tapered sides\n            ]);\n        }\n        \n        // Reinforcement ridge along blade center\n        translate([blade_length/2, blade_width/2, 0])\n            cube([blade_length-20, 5, 3], center=true);\n        \n        // Tang connecting to handle\n        translate([-tang_length/2, blade_width/2, 0])\n            cube([tang_length, 15, 10], center=true);\n    }\n}\n\n// Create the handle\nmodule handle() {\n    color(handle_color) {\n        // Main handle body - slightly tapered cylinder\n        translate([-tang_length - handle_length/2, blade_width/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, r1=handle_diameter/2, r2=handle_diameter/2 - 3, $fn=32);\n        \n        // Handle ferrule (metal ring)\n        color(\"#B87333\")\n            translate([-tang_length - 5, blade_width/2, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=10, r=handle_diameter/2 + 2, $fn=32);\n    }\n    \n    // Grip texture - raised rings\n    color(grip_color) {\n        for(i=[1:4]) {\n            translate([-tang_length - i*18 - 10, blade_width/2, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=5, r=handle_diameter/2, $fn=32);\n        }\n    }\n}\n\n// Create the curved neck transition between blade and handle\nmodule neck_transition() {\n    color(blade_color) {\n        translate([-5, blade_width/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, r1=8, r2=12, $fn=32);\n    }\n}\n\n// Create the blade edge detail\nmodule blade_edge() {\n    color(\"#A0A0A0\") {\n        // Thinner cutting edge\n        translate([0, blade_width/2, -1])\n            linear_extrude(height=1, convexity=10) {\n                polygon(points=[\n                    [0, 0],\n                    [0, blade_width],\n                    [blade_length-15, blade_width-5],\n                    [blade_length-5, blade_width/2],\n                    [blade_length-15, 5]\n                ]);\n            }\n    }\n}\n\n// Add some surface details\nmodule surface_details() {\n    // Manufacturer's mark on blade\n    color(\"#808080\")\n        translate([blade_length/2, blade_width/2, blade_thickness+0.1])\n            rotate([0, 0, 15])\n                cube([20, 3, 0.5], center=true);\n    \n    // Handle end cap\n    color(\"#B87333\")\n        translate([-tang_length - handle_length - 5, blade_width/2, 0])\n            rotate([0, 90, 0])\n                sphere(r=handle_diameter/2, $fn=32);\n}\n\n// Assembly\nunion() {\n    blade();\n    handle();\n    neck_transition();\n    blade_edge();\n    surface_details();\n}\n\n// Add support for 3D printing - small base plate\ntranslate([-tang_length - handle_length - 10, -5, -5])\n    color(\"#CCCCCC\")\n        cube([blade_length + handle_length + tang_length + 20, blade_width + 10, 1]);",
    "renders": true
  },
  {
    "tool": "slate",
    "openscad_code": "// Realistic Slate Tool - Medium Complexity\n// A traditional roofing slate with hole and beveled edges\n\n// Color definitions\nslate_color = [0.25, 0.26, 0.28];      // Dark slate gray\nhole_color = [0.15, 0.15, 0.15];       // Darker hole interior\n\n// Main parameters\nslate_length = 80;\nslate_width = 50;\nslate_thickness = 4;\nhole_diameter = 6;\nhole_offset = 8;\nbevel_angle = 15;\n\n// Create realistic slate with beveled edges\nmodule slate_body() {\n    difference() {\n        // Main slate body with beveled top\n        union() {\n            // Bottom flat part\n            translate([0, 0, slate_thickness/2])\n                cube([slate_length, slate_width, slate_thickness], center=true);\n            \n            // Beveled top edges\n            for(x = [-slate_length/2 + 2, slate_length/2 - 2]) {\n                translate([x, 0, slate_thickness + 1])\n                    rotate([0, 0, x > 0 ? 0 : 180])\n                        linear_extrude(height=2)\n                            polygon(points=[\n                                [0, -slate_width/2],\n                                [2, -slate_width/2 + 2],\n                                [2, slate_width/2 - 2],\n                                [0, slate_width/2]\n                            ]);\n            }\n            \n            // Side bevels\n            for(y = [-slate_width/2 + 2, slate_width/2 - 2]) {\n                translate([0, y, slate_thickness + 1])\n                    rotate([0, 0, y > 0 ? 90 : -90])\n                        linear_extrude(height=2)\n                            polygon(points=[\n                                [0, -slate_length/2],\n                                [2, -slate_length/2 + 2],\n                                [2, slate_length/2 - 2],\n                                [0, slate_length/2]\n                            ]);\n            }\n        }\n        \n        // Mounting hole\n        translate([slate_length/2 - hole_offset, 0, 0])\n            cylinder(h=slate_thickness + 2, d=hole_diameter, $fn=32);\n        \n        // Countersink for screw head\n        translate([slate_length/2 - hole_offset, 0, slate_thickness/2 + 1])\n            cylinder(h=2, d1=hole_diameter * 1.8, d2=hole_diameter, $fn=32);\n        \n        // Natural slate texture - small chips\n        for(i = [1:8]) {\n            rotate([0, 0, i * 45])\n                translate([\n                    (i % 2 == 0 ? 1 : -1) * (5 + i * 3),\n                    (i % 3 == 0 ? 1 : -1) * (3 + i * 2),\n                    slate_thickness\n                ])\n                    sphere(d=1.5 + (i % 3), $fn=8);\n        }\n    }\n}\n\n// Natural slate surface texture\nmodule slate_texture() {\n    // Random small surface variations\n    for(i = [1:20]) {\n        translate([\n            (rand(i) - 0.5) * slate_length * 0.8,\n            (rand(i * 2) - 0.5) * slate_width * 0.8,\n            slate_thickness + 0.1\n        ])\n            sphere(d=0.5 + rand(i * 3) * 0.5, $fn=6);\n    }\n}\n\n// Helper function for pseudo-random values\nfunction rand(n) = (n * 9301 + 49297) % 233280 / 233280;\n\n// Create the complete slate\ncolor(slate_color) {\n    union() {\n        slate_body();\n        \n        // Add subtle texture\n        color([0.2, 0.21, 0.23]) {\n            slate_texture();\n        }\n    }\n}\n\n// Add the hole interior in darker color\ncolor(hole_color) {\n    translate([slate_length/2 - hole_offset, 0, -slate_thickness/2])\n        cylinder(h=slate_thickness + 1, d=hole_diameter - 0.2, $fn=32);\n}",
    "renders": true
  },
  {
    "tool": "shingle",
    "openscad_code": "// Realistic Roofing-Shingle Tool\n// A hand-held cutter / punch for asphalt shingles\n// ~90 mm total length, 3D-printable with no supports\n\n$fn = 48;            // smooth curves\nwall = 1.6;          // nozzle-friendly wall thickness\n\n// ---------- main assembly ----------\nmodule shingle_tool() {\n    union() {\n        color(\"silver\") handle();          // main grip\n        color(\"gray\")  blade_assembly();   // cutting head\n        color(\"black\") safety_latch();     // lock lever\n    }\n}\n\n// ---------- ergonomic handle ----------\nmodule handle() {\n    difference() {\n        // main grip body\n        hull() {\n            translate([-5, -8, 0]) cube([10, 16, 35]);\n            translate([-7, -10, 30]) cube([14, 20, 10]);\n        }\n\n        // finger grooves\n        for (z = [5:9:35])\n            translate([0, 0, z])\n                rotate([90, 0, 0])\n                    cylinder(h = 12, d = 5, center = true);\n\n        // hanging hole\n        translate([0, 12, 10])\n            rotate([90, 0, 0])\n                cylinder(h = wall + 1, d = 8, center = true);\n    }\n\n    // rubber-like grip pads\n    color(\"darkblue\")\n    for (i = [0:1])\n        translate([0, -9 + i * 18, 20])\n            scale([1, 0.3, 1])\n                sphere(d = 10);\n}\n\n// ---------- blade mechanism ----------\nmodule blade_assembly() {\n    translate([0, 0, 40])\n        union() {\n            // frame\n            difference() {\n                cube([14, 22, 50], center = true);\n                translate([0, 0, 25 - wall])\n                    cube([14 - 2 * wall, 22 - 2 * wall, 50], center = true);\n            }\n\n            // cutting blade\n            color(\"silver\")\n            translate([0, 0, 15])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, d = 0.6, center = true);\n\n            // alignment rails\n            color(\"gray\")\n            for (y = [-9, 9])\n                translate([7, y, 0])\n                    cube([wall, wall, 40], center = true);\n        }\n}\n\n// ---------- safety latch ----------\nmodule safety_latch() {\n    translate([0, -15, 30])\n        rotate([0, 0, 30])\n            difference() {\n                hull() {\n                    cube([8, wall * 2, 20], center = true);\n                    translate([0, 0, 12])\n                        cube([6, wall * 2, 8], center = true);\n                }\n                translate([0, wall, 0])\n                    cube([9, wall * 3, 25], center = true);\n            }\n}\n\n// ---------- render ----------\nshingle_tool();",
    "renders": true
  },
  {
    "tool": "thatch",
    "openscad_code": "// OpenSCAD Thatch Tool - Realistic Style, Medium Complexity\n// A traditional thatching tool for combing and trimming thatch\n\n$fn = 50;\nwall_thickness = 2;\n\nmodule handle() {\n    // Main wooden handle\n    color(\"saddlebrown\") {\n        // Handle shaft\n        cylinder(h=80, d1=25, d2=22);\n        translate([0, 0, 80]) cylinder(h=20, d1=22, d2=28);\n        \n        // Grip rings for better hold\n        for(i = [1:4]) {\n            translate([0, 0, i*20-5]) \n            cylinder(h=3, d=28, $fn=6);\n        }\n    }\n}\n\nmodule tool_head() {\n    // Metal tool head with comb teeth\n    color(\"silver\") {\n        // Main head body\n        translate([0, 0, 100]) rotate([90, 0, 0]) {\n            // Base plate\n            cube([60, 15, wall_thickness], center=true);\n            \n            // Mounting block\n            translate([0, 0, -10]) \n            cube([30, 12, 20], center=true);\n            \n            // Rounded front edge\n            translate([0, 7.5, 0]) \n            rotate([90, 0, 0]) \n            cylinder(h=60, d=15, center=true);\n        }\n        \n        // Comb teeth array\n        for(i = [-28:4:28]) {\n            translate([i, 7.5, 100]) rotate([90, 0, 0]) {\n                // Tooth base\n                cylinder(h=10, d=3);\n                // Tooth tip\n                translate([0, 0, 10]) cylinder(h=8, d1=3, d2=1.5);\n            }\n        }\n    }\n}\n\nmodule blade_edge() {\n    // Sharp cutting edge on back side\n    color(\"silver\") translate([0, -7.5, 100]) rotate([90, 0, 0]) {\n        difference() {\n            cube([58, 2, 8], center=true);\n            translate([0, -1, 0]) cube([60, 2, 10], center=true);\n        }\n    }\n}\n\nmodule hanging_loop() {\n    // Metal loop for hanging storage\n    color(\"silver\") translate([0, 0, 95]) rotate([0, 90, 0]) {\n        difference() {\n            torus(major=8, minor=3);\n            translate([0, 0, -10]) cube([20, 20, 20], center=true);\n        }\n    }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude() translate([major, 0, 0]) circle(minor);\n}\n\n// Assembly\nunion() {\n    handle();\n    tool_head();\n    blade_edge();\n    hanging_loop();\n}",
    "renders": true
  },
  {
    "tool": "carpet",
    "openscad_code": "// Carpet Laying Knee Kicker Tool\n// Medium complexity realistic style\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body dimensions\nbody_length = 80;\nbody_width = 25;\nbody_height = 35;\n\n// Handle dimensions\nhandle_diameter = 22;\nhandle_length = 70;\n\n// Kicker pad dimensions\npad_width = 40;\npad_length = 15;\npad_height = 8;\nteeth_count = 12;\n\n// Adjustment mechanism\ngear_radius = 8;\ngear_height = 6;\n\nmodule handle() {\n    color(\"silver\") {\n        difference() {\n            // Main handle tube\n            translate([0, 0, handle_length/2])\n                cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n            // Grip pattern - concentric rings\n            for(i = [1:3:handle_length-10]) {\n                translate([0, 0, i+5])\n                    cylinder(h=1.5, d=handle_diameter+1, $fn=32);\n            }\n            \n            // Hollow interior\n            translate([0, 0, handle_length/2])\n                cylinder(h=handle_length, d=handle_diameter-wall*2, $fn=32);\n        }\n    }\n}\n\nmodule kicker_pad() {\n    color(\"black\") {\n        // Main pad body\n        translate([0, 0, pad_height/2])\n            cube([pad_width, pad_length, pad_height], center=true);\n        \n        // Grip teeth\n        for(i = [-pad_width/2+2 : 3 : pad_width/2-2]) {\n            translate([i, 0, pad_height])\n                cube([1, pad_length-2, 2], center=true);\n        }\n    }\n}\n\nmodule adjustment_mechanism() {\n    color(\"gray\") {\n        // Main gear\n        translate([0, 0, 0])\n            cylinder(h=gear_height, r=gear_radius, $fn=20);\n        \n        // Gear teeth\n        for(i = [0:20]) {\n            rotate([0, 0, i*360/20])\n                translate([gear_radius-1, 0, 0])\n                    cube([2, 1, gear_height], center=true);\n        }\n        \n        // Adjustment knob\n        translate([0, 0, -gear_height-3])\n            cylinder(h=6, r=gear_radius+2, $fn=8);\n    }\n}\n\nmodule body() {\n    color(\"red\") {\n        difference() {\n            // Main body\n            translate([0, 0, body_height/2])\n                cube([body_length, body_width, body_height], center=true);\n            \n            // Weight reduction holes\n            translate([body_length/2-15, 0, body_height/2])\n                cylinder(h=body_height-wall*2, r=8, $fn=16);\n            \n            // Mounting slot for pad\n            translate([-body_length/2+10, 0, -body_height/2+pad_height/2+wall])\n                cube([20, pad_width, pad_height+wall], center=true);\n        }\n        \n        // Reinforcement ribs\n        for(i = [-body_length/2+20 : 15 : body_length/2-20]) {\n            translate([i, 0, body_height/2])\n                cube([2, body_width, body_height/2], center=true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2+body_height/2])\n    rotate([90, 0, 0])\n    handle();\n\ntranslate([0, 0, 0])\n    body();\n\ntranslate([-body_length/2+10, 0, -body_height/2+pad_height/2])\n    kicker_pad();\n\ntranslate([body_length/2-gear_radius-5, body_width/2+gear_radius, body_height/2-gear_height/2])\n    adjustment_mechanism();",
    "renders": true
  },
  {
    "tool": "fabric",
    "openscad_code": "// Fabric Rotary Cutter - Medium Complexity Realistic Style\n// Overall dimensions: 45mm diameter wheel, 130mm total length\n\n$fn = 36;\n\nmodule handle_grip() {\n    // Textured grip section with raised ridges\n    difference() {\n        cylinder(h=60, d=20, center=true);\n        for(i=[0:5:55]) {\n            rotate([0, 90, 0]) \n                translate([0, i-27.5, 0])\n                    cube([20, 2, 20], center=true);\n        }\n    }\n}\n\nmodule safety_guard() {\n    // Curved safety guard that pivots\n    difference() {\n        // Main curved guard body\n        translate([0, -15, 0])\n            rotate_extrude(angle=120)\n                translate([25, 0, 0])\n                    circle(r=3);\n        \n        // Cutouts for wheel visibility\n        for(i=[-20:10:20]) {\n            rotate([0, 0, i])\n                translate([25, 0, 0])\n                    cylinder(h=10, r=5);\n        }\n    }\n}\n\nmodule cutting_wheel() {\n    // Sharp circular blade\n    color([0.7, 0.7, 0.7])\n    difference() {\n        // Main blade disk\n        cylinder(h=2, r=22.5, center=true);\n        \n        // Blade edge bevel\n        cylinder(h=2, r=20, center=true);\n        \n        // Central mounting hole\n        cylinder(h=3, r=3, center=true);\n    }\n    \n    // Blade teeth pattern\n    for(i=[0:15:360]) {\n        rotate([0, 0, i])\n            translate([21, 0, 0])\n                cube([2, 1, 2], center=true);\n    }\n}\n\nmodule handle_body() {\n    // Ergonomic handle with curves\n    color([0.2, 0.2, 0.2])\n    hull() {\n        // Front grip area\n        translate([-50, 0, 0])\n            sphere(d=18);\n        \n        // Rear wider section\n        translate([10, 0, 0])\n            sphere(d=22);\n        \n        // Middle transition\n        translate([-20, 0, 0])\n            sphere(d=20);\n    }\n}\n\nmodule pivot_mechanism() {\n    // Metal pivot pin and washers\n    color([0.8, 0.8, 0.8])\n    union() {\n        // Pivot pin\n        rotate([90, 0, 0])\n            cylinder(h=35, r=2.5);\n        \n        // Washers\n        for(i=[-1, 1]) {\n            translate([0, i*8, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=1, r=5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main handle\n    handle_body();\n    \n    // Grip texture overlay\n    translate([-25, 0, 0])\n        color([0.1, 0.1, 0.1])\n        handle_grip();\n    \n    // Pivot assembly\n    translate([-65, 0, 0])\n        pivot_mechanism();\n    \n    // Cutting wheel\n    translate([-65, 0, 0])\n        cutting_wheel();\n    \n    // Safety guard (currently in open position)\n    translate([-65, 0, 0])\n        rotate([0, 0, -30])\n        color([0.9, 0.9, 0.9])\n        safety_guard();\n}\n\n// Additional details\n// Handle end cap\ntranslate([15, 0, 0])\n    color([0.9, 0.9, 0.9])\n    cylinder(h=5, r=11);\n\n// Blade size marking on handle\ntranslate([-35, 10, 0])\n    rotate([90, 0, 0])\n    linear_extrude(height=1)\n        text(\"45mm\", size=4, halign=\"center\");",
    "renders": true
  },
  {
    "tool": "cloth",
    "openscad_code": "// Realistic cloth tool (seam ripper) - medium complexity\n// Size: ~80mm total length\n\n// Color constants\nblade_color = \"Silver\";\nhandle_color = [0.2, 0.2, 0.2];\ncap_color = [0.1, 0.1, 0.1];\ngrip_color = [0.3, 0.3, 0.3];\n\n// Main handle\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle body\n        union() {\n            // Handle shaft\n            cylinder(h=60, d1=8, d2=10, $fn=64);\n            \n            // Grip rings\n            for(i = [0:3]) {\n                translate([0, 0, 10 + i*12])\n                color(grip_color)\n                cylinder(h=3, d=11.5, $fn=64);\n            }\n        }\n        \n        // Center hole for blade\n        translate([0, 0, 60])\n        rotate([90, 0, 0])\n        cylinder(h=20, d=3.5, $fn=32);\n    }\n}\n\n// Blade assembly\nmodule blade() {\n    color(blade_color)\n    difference() {\n        // Blade base\n        rotate([90, 0, 0])\n        translate([0, 0, -5])\n        cylinder(h=10, d=3, $fn=32);\n        \n        // Blade hole\n        translate([0, 0, -2])\n        rotate([90, 0, 0])\n        cylinder(h=15, d=1.5, $fn=32);\n    }\n    \n    // Curved blade\n    rotate([90, 0, 0])\n    translate([0, 0, 5])\n    difference() {\n        union() {\n            // Main blade curve\n            rotate_extrude(angle=90, $fn=64)\n            translate([8.5, 0, 0])\n            circle(r=0.8, $fn=32);\n            \n            // Blade tip\n            translate([0, 8.5, 0])\n            sphere(r=1.2, $fn=32);\n            \n            // Connection to base\n            translate([0, 0, -1])\n            cylinder(h=2, d=2.5, $fn=32);\n        }\n        \n        // Cutting edge curve\n        rotate([0, -45, 0])\n        translate([0, 8.5, -1])\n        cube([2, 2, 2], center=true);\n    }\n    \n    // Red safety ball\n    color(\"red\")\n    translate([0, 8.5, 0])\n    sphere(r=1.8, $fn=32);\n}\n\n// Protective cap\nmodule cap() {\n    color(cap_color)\n    difference() {\n        // Cap body\n        cylinder(h=25, d=12, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        cylinder(h=23, d=10.5, $fn=64);\n        \n        // Air hole\n        translate([0, 0, 24])\n        cylinder(h=2, d=2, $fn=32);\n    }\n    \n    // Grip ridges\n    for(i = [0:2]) {\n        translate([0, 0, 5 + i*8])\n        color(grip_color)\n        cylinder(h=1.5, d=12.5, $fn=64);\n    }\n}\n\n// Assembly\nhandle();\ntranslate([0, 0, 60])\nrotate([0, 90, 0])\nblade();\n\n// Optional cap placement\ntranslate([20, 0, 0])\ncap();",
    "renders": true
  },
  {
    "tool": "net",
    "openscad_code": "// Fishing Net Tool - OpenSCAD\n// Realistic style, medium complexity\n\n$fn = 36;\n\n// Overall dimensions\nhandle_length = 80;\nhandle_diameter = 12;\nhoop_outer = 60;\nhoop_thickness = 4;\nnet_depth = 40;\n\n// Colors\ncolor_handle = \"SaddleBrown\";\ncolor_hoop = \"Silver\";\ncolor_net = \"DarkGreen\";\n\n// Handle with grip pattern\nmodule handle() {\n    color(color_handle) {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip rings\n        for(i = [5:10:handle_length-15]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=3, d=handle_diameter+2, center=false);\n                    cylinder(h=3.5, d=handle_diameter, center=false);\n                }\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length]) {\n            sphere(d=handle_diameter+2);\n        }\n    }\n}\n\n// Hoop frame for net\nmodule hoop() {\n    color(color_hoop) {\n        // Main hoop ring\n        rotate_extrude(angle=360) {\n            translate([hoop_outer/2, 0, 0]) {\n                circle(d=hoop_thickness);\n            }\n        }\n        \n        // Support arms\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle]) {\n                translate([hoop_outer/4, 0, -hoop_thickness/2]) {\n                    cube([hoop_outer/2, hoop_thickness, hoop_thickness]);\n                }\n            }\n        }\n    }\n}\n\n// Net mesh\nmodule net() {\n    color(color_net) {\n        // Net bottom\n        translate([0, 0, -net_depth]) {\n            cylinder(h=1, d=hoop_outer-10);\n        }\n        \n        // Net sides - simplified mesh pattern\n        for(i = [0:15:360]) {\n            rotate([0, 0, i]) {\n                // Vertical strands\n                for(j = [0:5:net_depth]) {\n                    translate([(hoop_outer-10)/2-1, 0, -j]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h=2, d=1.5);\n                        }\n                    }\n                }\n                \n                // Diagonal strands\n                rotate([0, 0, 15]) {\n                    for(j = [0:8:net_depth]) {\n                        translate([(hoop_outer-10)/2-1, 0, -j]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h=2, d=1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Hoop to handle connector\nmodule connector() {\n    color(color_hoop) {\n        // Main connector body\n        translate([0, 0, -5]) {\n            cylinder(h=10, d=handle_diameter+4);\n        }\n        \n        // Reinforcement ribs\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle]) {\n                translate([handle_diameter/2+1, 0, -5]) {\n                    cube([3, 2, 10]);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Handle\n    handle();\n    \n    // Connector\n    translate([0, 0, handle_length]) {\n        connector();\n        \n        // Hoop\n        translate([0, 0, 10]) {\n            hoop();\n            \n            // Net\n            translate([0, 0, -hoop_thickness/2]) {\n                net();\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "screen",
    "openscad_code": "// Screen Tool - Realistic Style\n// A screen printing squeegee with handle and blade\n\n// Tool dimensions (mm)\nhandle_length = 80;\nhandle_diameter = 15;\nblade_width = 60;\nblade_height = 30;\nblade_thickness = 3;\ngrip_length = 50;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Colors\nhandle_color = \"DarkSlateGray\";\nblade_color = \"LightGray\";\ngrip_color = \"Black\";\n\n// Handle with grip texture\nmodule handle() {\n    color(handle_color) {\n        // Main handle tube\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            cylinder(h=handle_length, d=handle_diameter - wall_thickness*2, $fn=32);\n        }\n        \n        // End caps\n        translate([0, 0, handle_length/2]) cylinder(h=wall_thickness, d=handle_diameter+1, $fn=32);\n        translate([0, 0, -handle_length/2]) cylinder(h=wall_thickness, d=handle_diameter+1, $fn=32);\n    }\n    \n    // Grip texture rings\n    color(grip_color) {\n        for(i = [-grip_length/2+5 : 5 : grip_length/2-5]) {\n            translate([0, 0, i]) \n                cylinder(h=2, d=handle_diameter+0.5, $fn=32);\n        }\n    }\n}\n\n// Blade holder\nmodule blade_holder() {\n    color(handle_color) {\n        // Main holder block\n        cube([blade_width + 10, 8, 12], center=true);\n        \n        // Mounting holes\n        for(x = [-blade_width/2+10 : 20 : blade_width/2-10]) {\n            translate([x, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=3, $fn=16);\n        }\n    }\n}\n\n// Flexible blade\nmodule blade() {\n    color(blade_color) {\n        // Main blade\n        translate([0, -blade_height/2, 0])\n            cube([blade_width, blade_height, blade_thickness], center=true);\n        \n        // Reinforcement ribs\n        for(x = [-blade_width/2+5 : 10 : blade_width/2-5]) {\n            translate([x, -blade_height/2 + 2, 0])\n                cube([2, 4, blade_thickness], center=true);\n        }\n    }\n}\n\n// Assembly\nmodule screen_tool() {\n    // Handle assembly\n    rotate([90, 0, 0])\n        translate([0, -handle_length/2 - 6, 0])\n            handle();\n    \n    // Blade holder\n    translate([0, 0, 0])\n        blade_holder();\n    \n    // Blade\n    translate([0, -blade_height - 4, 0])\n        blade();\n    \n    // Handle to blade connector\n    color(handle_color) {\n        hull() {\n            translate([0, 0, 0])\n                sphere(d=8, $fn=32);\n            translate([0, -handle_length/2 - 6, 0])\n                rotate([90, 0, 0])\n                    sphere(d=8, $fn=32);\n        }\n    }\n}\n\n// Render the complete tool\nscreen_tool();",
    "renders": true
  },
  {
    "tool": "film",
    "openscad_code": "// Film Rewinder Tool - Medium complexity realistic style\n\n// Overall dimensions\n$fn = 32;\n\n// Main handle\nhandle_diameter = 25;\nhandle_length = 80;\nhandle_color = \"DarkGrey\";\n\n// Crank arm\ncrank_length = 40;\ncrank_width = 8;\ncrank_thickness = 5;\ncrank_color = \"Silver\";\n\n// Hub dimensions\nhub_diameter = 15;\nhub_height = 20;\nhub_color = \"Black\";\n\n// Spindle dimensions\nspindle_diameter = 8;\nspindle_length = 30;\nspindle_color = \"Silver\";\n\n// Grip ring\ngrip_ring_diameter = 28;\ngrip_ring_thickness = 3;\ngrip_ring_color = \"Red\";\n\n// Film core adapter\nadapter_diameter = 30;\nadapter_height = 10;\nadapter_color = \"Blue\";\n\n// Handle grip texture\ntexture_height = 1;\ntexture_width = 2;\ntexture_spacing = 5;\n\n// Main handle with grip texture\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip texture grooves\n        for(i = [0:10:handle_length-10]) {\n            translate([0, 0, i + 5])\n                cylinder(h=texture_height, d=grip_ring_diameter, center=false);\n        }\n    }\n    \n    // Grip ring at end\n    color(grip_ring_color)\n    translate([0, 0, handle_length - grip_ring_thickness])\n        cylinder(h=grip_ring_thickness, d=grip_ring_diameter, center=false);\n}\n\n// Crank mechanism\nmodule crank() {\n    color(crank_color)\n    union() {\n        // Main crank arm\n        translate([0, 0, handle_length - 5])\n            rotate([90, 0, 0])\n                cube([crank_length, crank_width, crank_thickness], center=true);\n        \n        // Crank handle\n        translate([crank_length/2 + 5, 0, handle_length - 5])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=12, center=true);\n    }\n}\n\n// Hub assembly\nmodule hub() {\n    color(hub_color)\n    union() {\n        // Main hub\n        translate([0, 0, handle_length])\n            cylinder(h=hub_height, d=hub_diameter, center=false);\n        \n        // Spindle\n        color(spindle_color)\n        translate([0, 0, handle_length + hub_height])\n            cylinder(h=spindle_length, d=spindle_diameter, center=false);\n    }\n}\n\n// Film core adapter\nmodule adapter() {\n    color(adapter_color)\n    difference() {\n        // Main adapter cylinder\n        translate([0, 0, handle_length + hub_height + spindle_length])\n            cylinder(h=adapter_height, d=adapter_diameter, center=false);\n        \n        // Center hole for spindle\n        translate([0, 0, handle_length + hub_height + spindle_length - 1])\n            cylinder(h=adapter_height + 2, d=spindle_diameter + 1, center=false);\n        \n        // Key slots for film core\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([adapter_diameter/2 - 3, -1.5, handle_length + hub_height + spindle_length])\n                    cube([3, 3, adapter_height], center=false);\n        }\n    }\n}\n\n// Assembly\nhandle();\ncrank();\nhub();\nadapter();",
    "renders": true
  },
  {
    "tool": "foil",
    "openscad_code": "// OpenSCAD code for a realistic 3D-printable foil (fencing sword) tool\n// Overall length ~100mm\n\n// Colors\nblade_color = \"silver\";\nguard_color = \"gray\";\nhandle_color = \"darkolivegreen\";\npommel_color = \"dimgray\";\nbutton_color = \"red\";\n\n// Main dimensions (mm)\nblade_length = 80;\nblade_width = 5;\nblade_thickness = 1.5;\nguard_diameter = 25;\nguard_thickness = 3;\nhandle_length = 18;\nhandle_diameter = 12;\npommel_diameter = 14;\npommel_length = 5;\nbutton_diameter = 3;\nbutton_length = 2;\n\nmodule blade() {\n    color(blade_color)\n    difference() {\n        // Tapered blade\n        hull() {\n            translate([0, 0, blade_length])\n                cube([blade_width*0.3, blade_thickness*0.3, 0.1], center=true);\n            translate([0, 0, 0])\n                cube([blade_width, blade_thickness, 0.1], center=true);\n        }\n        \n        // Fuller groove\n        translate([0, 0, blade_length/2])\n            cube([blade_width*0.3, blade_thickness+0.1, blade_length], center=true);\n            \n        // Blade tip safety button\n        translate([0, 0, blade_length - button_length/2])\n            cylinder(d=button_diameter*1.5, h=button_length*2, center=true);\n    }\n}\n\nmodule guard() {\n    color(guard_color)\n    difference() {\n        // Main guard dish\n        cylinder(d=guard_diameter, h=guard_thickness, center=true);\n        \n        // Center hole\n        cylinder(d=handle_diameter*0.9, h=guard_thickness+1, center=true);\n        \n        // Lightening holes\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n                translate([guard_diameter*0.3, 0, 0])\n                    cylinder(d=3, h=guard_thickness+1, center=true);\n        }\n    }\n}\n\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle\n        cylinder(d=handle_diameter, h=handle_length, center=true);\n        \n        // Grip spiral grooves\n        for(i=[0:30:330]) {\n            rotate([0, 0, i])\n                translate([handle_diameter/2 - 1, 0, 0])\n                    cube([2, 1, handle_length], center=true);\n        }\n    }\n}\n\nmodule pommel() {\n    color(pommel_color)\n    difference() {\n        // Main pommel\n        cylinder(d=pommel_diameter, h=pommel_length, center=true);\n        \n        // Threading hole\n        cylinder(d=3, h=pommel_length+1, center=true);\n        \n        // Wrench flats\n        for(i=[0:90:270]) {\n            rotate([0, 0, i])\n                translate([pommel_diameter*0.35, 0, 0])\n                    cube([pommel_diameter*0.3, pommel_diameter*0.8, pommel_length+1], center=true);\n        }\n    }\n}\n\nmodule tip_button() {\n    color(button_color)\n    translate([0, 0, blade_length - button_length/2])\n        cylinder(d=button_diameter, h=button_length, center=true);\n}\n\n// Assembly\nmodule foil_assembly() {\n    union() {\n        // Blade\n        translate([0, 0, -blade_length/2])\n            blade();\n            \n        // Guard\n        translate([0, 0, -blade_length - guard_thickness/2])\n            guard();\n            \n        // Handle\n        translate([0, 0, -blade_length - guard_thickness - handle_length/2])\n            handle();\n            \n        // Pommel\n        translate([0, 0, -blade_length - guard_thickness - handle_length - pommel_length/2])\n            pommel();\n            \n        // Tip button\n        tip_button();\n    }\n}\n\n// Render the complete foil\nfoil_assembly();",
    "renders": true
  },
  {
    "tool": "wrap",
    "openscad_code": "// Realistic Wrap Tool - OpenSCAD\n// Medium complexity model with functional details\n\n$fn = 50;\n\nmodule grip_pattern() {\n    // Raised diamond pattern for grip\n    for (i = [0:3]) {\n        translate([i * 4 - 6, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h = 1, r = 1.5, center = true);\n            }\n        }\n    }\n}\n\nmodule handle() {\n    // Main handle body\n    color(\"darkslategray\") {\n        difference() {\n            cylinder(h = 50, r = 8, center = true);\n            \n            // Center hole for weight reduction\n            cylinder(h = 52, r = 4, center = true);\n            \n            // Grip grooves\n            for (i = [0:4]) {\n                translate([0, 0, -25 + i * 10]) {\n                    rotate([0, 0, 45])\n                        cube([16, 2, 2], center = true);\n                }\n            }\n        }\n        \n        // Grip inserts\n        translate([0, 0, -20]) {\n            rotate([90, 0, 0]) {\n                for (j = [0:3]) {\n                    rotate([0, 0, j * 90]) {\n                        grip_pattern();\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule blade() {\n    // Main blade assembly\n    color(\"silver\") {\n        // Blade base\n        translate([0, 0, 35]) {\n            difference() {\n                cube([30, 2, 15], center = true);\n                \n                // Blade edge bevel\n                translate([0, 1.5, 5]) {\n                    rotate([0, 30, 0])\n                        cube([32, 3, 10], center = true);\n                }\n            }\n            \n            // Cutting edge\n            translate([0, 1, 7.5]) {\n                cube([28, 0.5, 0.2], center = true);\n            }\n        }\n        \n        // Blade support\n        translate([0, 0, 25]) {\n            difference() {\n                cylinder(h = 20, r1 = 5, r2 = 3);\n                \n                // Weight reduction holes\n                for (i = [0:2]) {\n                    rotate([0, 0, i * 120]) {\n                        translate([3, 0, 10]) {\n                            rotate([90, 0, 0])\n                                cylinder(h = 8, r = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tension_mechanism() {\n    // Tension adjustment knob\n    color(\"dimgray\") {\n        translate([0, 0, 50]) {\n            difference() {\n                cylinder(h = 8, r = 6);\n                \n                // Knob grip\n                for (i = [0:5]) {\n                    rotate([0, 0, i * 60]) {\n                        translate([4, 0, 4]) {\n                            cube([2, 1, 8], center = true);\n                        }\n                    }\n                }\n                \n                // Center hole\n                cylinder(h = 10, r = 2);\n            }\n        }\n        \n        // Spring guide\n        color(\"silver\") {\n            translate([0, 0, 58]) {\n                cylinder(h = 5, r = 2.5);\n            }\n        }\n    }\n}\n\nmodule safety_guard() {\n    // Protective guard\n    color(\"darkgray\") {\n        translate([0, -8, 35]) {\n            difference() {\n                cube([35, 2, 20], center = true);\n                \n                // Finger relief cutouts\n                for (i = [-1:1]) {\n                    translate([i * 10, 0, 0]) {\n                        sphere(r = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    blade();\n    tension_mechanism();\n    safety_guard();\n    \n    // Mounting bracket\n    color(\"black\") {\n        translate([0, 0, -30]) {\n            difference() {\n                cube([20, 8, 4], center = true);\n                \n                // Screw holes\n                for (i = [-1:1]) {\n                    translate([i * 6, 0, 0]) {\n                        cylinder(h = 6, r = 1.5);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "cover",
    "openscad_code": "// OpenSCAD - Realistic Protective Cover Tool\n// A versatile cover for tools (e.g. wrench, screwdriver bits) with vent slots and grip ridges\n\nmodule ventSlot() {\n    // Creates a single ventilation slot\n    translate([0, 0, 5])\n        cube([25, 2, 10], center=true);\n}\n\nmodule gripRidge() {\n    // Creates a single ridge for better grip\n    translate([0, 0, 2])\n        cube([30, 1, 4], center=true);\n}\n\nmodule handle() {\n    // Main handle body with ergonomic curves\n    difference() {\n        // Main handle shape\n        color(\"darkslategray\")\n        hull() {\n            translate([0, 0, 0])\n                cylinder(h=15, d=22, $fn=64);\n            translate([0, 0, 60])\n                cylinder(h=15, d=25, $fn=64);\n        }\n        \n        // Ventilation slots\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([15, 0, 30])\n                    ventSlot();\n        }\n        \n        // Internal cavity for tool storage\n        translate([0, 0, 5])\n            cylinder(h=55, d=18, $fn=64);\n    }\n}\n\nmodule gripTexture() {\n    // Adds grip ridges around handle\n    for (i = [0:7]) {\n        rotate([0, 0, i * 22.5])\n            translate([12.5, 0, 30])\n                gripRidge();\n    }\n}\n\nmodule cap() {\n    // Protective cap with retention lip\n    difference() {\n        // Main cap shape\n        color(\"dimgray\")\n        union() {\n            // Top dome\n            translate([0, 0, 60])\n                scale([1, 1, 0.5])\n                    sphere(d=25, $fn=64);\n            \n            // Cylindrical section\n            translate([0, 0, 52.5])\n                cylinder(h=15, d=25, $fn=64);\n            \n            // Retention lip\n            translate([0, 0, 47.5])\n                cylinder(h=5, d=27, $fn=64);\n        }\n        \n        // Internal cavity\n        translate([0, 0, 50])\n            cylinder(h=20, d=20.5, $fn=64);\n    }\n}\n\nmodule hangingLoop() {\n    // Loop for hanging storage\n    color(\"black\")\n    translate([0, 15, 65])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=8, d=6, $fn=32);\n                translate([0, 0, -1])\n                    cylinder(h=10, d=3, $fn=32);\n            }\n}\n\n// Assembly\nunion() {\n    handle();\n    \n    translate([0, 0, 0])\n        gripTexture();\n    \n    translate([0, 0, 0])\n        cap();\n    \n    hangingLoop();\n}\n\n// Test print dimensions\n%translate([0, 40, 0])\n    cube([30, 30, 70], center=true);",
    "renders": true
  },
  {
    "tool": "cap",
    "openscad_code": "// Realistic Cap Tool (Bottle Cap Opener)\n// Medium complexity, 3D-printable design\n\n$fn = 60;\n\n// Main color scheme\ncap_color = \"silver\";\nhandle_color = \"black\";\ngrip_color = \"red\";\n\n// Overall dimensions\ncap_diameter = 35;\ncap_height = 12;\nhandle_length = 70;\nhandle_diameter = 18;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule cap_opener() {\n    // Main cap body - hollow cylinder\n    difference() {\n        cylinder(h=cap_height, d=cap_diameter, center=true);\n        cylinder(h=cap_height+0.1, d=cap_diameter-wall_thickness*2, center=true);\n    }\n    \n    // Top rim reinforcement\n    translate([0, 0, cap_height/2 - wall_thickness/2])\n    cylinder(h=wall_thickness, d=cap_diameter+2, center=true);\n    \n    // Bottom rim reinforcement\n    translate([0, 0, -cap_height/2 + wall_thickness/2])\n    cylinder(h=wall_thickness, d=cap_diameter+2, center=true);\n    \n    // Grip teeth inside cap - angled for bottle cap grip\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([cap_diameter/2 - wall_thickness - 2, 0, 0])\n        rotate([0, 15, 0])\n        cube([4, 2, cap_height - 4], center=true);\n    }\n    \n    // Handle attachment point\n    translate([0, cap_diameter/2, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=10, d=handle_diameter, center=true);\n        cylinder(h=11, d=handle_diameter-wall_thickness*2, center=true);\n    }\n}\n\nmodule handle() {\n    // Main handle shaft\n    translate([0, cap_diameter/2 + handle_length/2, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        cylinder(h=handle_length+0.1, d=handle_diameter-wall_thickness*2, center=true);\n    }\n    \n    // Ergonomic grip rings\n    for(i = [1:4]) {\n        translate([0, cap_diameter/2 + 15 + i*12, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=4, d=handle_diameter+2, center=true);\n            cylinder(h=4.1, d=handle_diameter, center=true);\n        }\n    }\n    \n    // End cap\n    translate([0, cap_diameter/2 + handle_length, 0])\n    sphere(d=handle_diameter);\n    \n    // Hole for keychain\n    translate([0, cap_diameter/2 + handle_length - 5, 0])\n    rotate([90, 0, 0])\n    cylinder(h=handle_diameter+1, d=4, center=true);\n}\n\n// Bottle opener hook on back\nmodule opener_hook() {\n    translate([0, -cap_diameter/2 - 10, 0])\n    union() {\n        // Main hook arm\n        translate([0, -5, 0])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=10, d=8, center=true);\n            cylinder(h=11, d=4, center=true);\n        }\n        \n        // Hook lip\n        translate([0, -10, -4])\n        rotate([90, 0, 0])\n        difference() {\n            cube([8, 12, 8], center=true);\n            translate([0, -2, 0])\n            cube([4, 8, 9], center=true);\n        }\n    }\n}\n\n// Assembly\ncolor(cap_color) cap_opener();\ncolor(handle_color) handle();\ncolor(cap_color) opener_hook();\n\n// Branding/texture on handle\nmodule handle_texture() {\n    color(grip_color)\n    for(i = [0:3]) {\n        translate([0, cap_diameter/2 + 25 + i*10, handle_diameter/2 - 1])\n        rotate([0, 90, 0])\n        linear_extrude(height=0.5)\n        text(\"GRIP\", size=6, halign=\"center\");\n    }\n}\n\nhandle_texture();",
    "renders": true
  },
  {
    "tool": "lid",
    "openscad_code": "// Realistic Medium-Complexity Jar Lid Tool\n// A 3D-printable grip tool for opening stubborn jar lids\n// Overall dimensions: ~80 mm diameter\n\n// Color definitions\n$fa = 2; $fs = 0.5;\n\nmodule lidTool() {\n    // Main grip ring\n    color(\"DarkGoldenrod\") difference() {\n        cylinder(h = 30, d = 80, center = true);\n        cylinder(h = 32, d = 73, center = true);  // Hollow center\n    }\n\n    // Inner rubber grip ridges\n    color(\"FireBrick\") for (i = [0:11]) {\n        rotate([0, 0, i * 30]) translate([0, 34, 0]) \n            cube([2, 6, 28], center = true);\n    }\n\n    // Top ergonomic handle ring\n    color(\"DarkGoldenrod\") difference() {\n        translate([0, 0, 15]) cylinder(h = 12, d = 60, center = true);\n        translate([0, 0, 15]) cylinder(h = 14, d = 50, center = true);\n    }\n\n    // Handle comfort grips\n    color(\"FireBrick\") for (i = [0:5]) {\n        rotate([0, 0, i * 60]) translate([0, 27, 15]) \n            cylinder(h = 12, d = 8, center = true);\n    }\n\n    // Bottom lip for lid engagement\n    color(\"Goldenrod\") difference() {\n        translate([0, 0, -16]) cylinder(h = 5, d = 83, center = true);\n        translate([0, 0, -16]) cylinder(h = 6, d = 70, center = true);\n    }\n\n    // Reinforcement ribs\n    color(\"Goldenrod\") for (i = [0:5]) {\n        rotate([0, 0, i * 60]) union() {\n            translate([0, 20, 0]) cube([3, 20, 28], center = true);\n            translate([0, 35, 15]) cylinder(h = 12, d = 4, center = true);\n        }\n    }\n\n    // Size indicators on top\n    color(\"White\") for (size = [55, 65, 75]) {\n        translate([0, 0, 21]) {\n            rotate([0, 0, (size - 55) * 6]) \n                linear_extrude(1) text(str(size), size = 3, halign = \"center\");\n        }\n    }\n\n    // Hanging hole\n    color(\"DarkGoldenrod\") translate([0, 38, 0]) rotate([90, 0, 0])\n        cylinder(h = 10, d = 6, center = true);\n}\n\n// Assembly\nlidTool();",
    "renders": true
  },
  {
    "tool": "stopper",
    "openscad_code": "// Realistic stopper tool - rubber sink stopper with metal pull ring\n// Overall dimensions: ~60mm diameter, ~45mm height\n\n$fn = 50;  // Smooth curves for realism\n\n// Color constants\ncolor_rubber = [0.2, 0.2, 0.2];  // Dark gray rubber\ncolor_metal = [0.7, 0.7, 0.7];   // Silver metal\ncolor_highlight = [1, 1, 1];     // White highlights\n\n// Main rubber stopper body\nmodule stopper_body() {\n    color(color_rubber) {\n        difference() {\n            // Main conical body\n            union() {\n                cylinder(h = 35, d1 = 55, d2 = 45);  // Tapered body\n                \n                // Top rim with slight lip\n                translate([0, 0, 35])\n                    cylinder(h = 5, d1 = 48, d2 = 50);\n            }\n            \n            // Center hole for pull ring\n            cylinder(h = 40, d = 8);\n            \n            // Drainage grooves on bottom\n            translate([0, 0, -1])\n                for(i = [0:5:355]) {\n                    rotate([0, 0, i])\n                        translate([20, 0, 0])\n                            cube([3, 8, 37], center = true);\n                }\n        }\n        \n        // Rubber seal ridges for better grip\n        for(h = [5, 15, 25]) {\n            translate([0, 0, h])\n                cylinder(h = 2, d = 52);\n        }\n        \n        // Textured grip pattern on sides\n        for(angle = [0:30:359]) {\n            rotate([0, 0, angle])\n                translate([26, 0, 17.5])\n                    cube([1, 1, 30], center = true);\n        }\n    }\n}\n\n// Metal pull ring assembly\nmodule pull_ring() {\n    color(color_metal) {\n        // Ring handle\n        rotate([90, 0, 0])\n            translate([0, 0, 2])\n                difference() {\n                    torus(12, 2);\n                    cube([30, 30, 30], center = true);  // Cut bottom half\n                }\n        \n        // Vertical post\n        translate([0, 0, 37])\n            cylinder(h = 8, d = 6);\n            \n        // Connecting pin through stopper\n        translate([0, 0, 20])\n            cylinder(h = 30, d = 5);\n    }\n}\n\n// Optional branding/label area\nmodule branding() {\n    color(color_highlight) {\n        translate([0, 23, 30])\n            linear_extrude(height = 0.5)\n                text(\"STOP\", size = 5, halign = \"center\");\n    }\n}\n\n// Assembly\nstopper_body();\npull_ring();\nbranding();",
    "renders": true
  },
  {
    "tool": "seal",
    "openscad_code": "// Seal tool - realistic style with medium complexity\n// A handheld seal embosser tool with handle and mechanism\n\n$fn = 50;\n\n// Main body dimensions\nhandle_length = 80;\nhandle_diameter = 25;\nhead_width = 45;\nhead_height = 35;\nhead_depth = 30;\n\n// Color definitions\nhandle_color = [0.2, 0.2, 0.2];  // Dark gray plastic\nmetal_color = [0.7, 0.7, 0.7];  // Silver metal\naccent_color = [0.1, 0.1, 0.1];  // Black accents\n\nmodule seal_tool() {\n    union() {\n        // Handle with grip pattern\n        color(handle_color) {\n            // Main handle tube\n            cylinder(h=handle_length, d=handle_diameter, center=false);\n            \n            // Grip rings\n            for(i = [5:10:handle_length-10]) {\n                translate([0, 0, i]) {\n                    difference() {\n                        cylinder(h=3, d=handle_diameter+2, center=false);\n                        cylinder(h=4, d=handle_diameter, center=false);\n                    }\n                }\n            }\n        }\n        \n        // Head assembly\n        translate([0, 0, handle_length]) {\n            // Main head casing\n            color(metal_color) {\n                cube([head_width, head_depth, head_height], center=true);\n                \n                // Side reinforcements\n                translate([0, head_depth/2, -head_height/2 + 5]) {\n                    cube([head_width-10, 5, 10], center=true);\n                }\n                translate([0, -head_depth/2, -head_height/2 + 5]) {\n                    cube([head_width-10, 5, 10], center=true);\n                }\n            }\n            \n            // Top cover plate\n            color(accent_color) {\n                translate([0, 0, head_height/2 + 1]) {\n                    cube([head_width+2, head_depth+2, 2], center=true);\n                }\n            }\n            \n            // Mechanism lever\n            color(metal_color) {\n                translate([head_width/2 - 10, 0, 0]) {\n                    rotate([0, 0, 30]) {\n                        cube([30, 8, 8], center=true);\n                    }\n                }\n            }\n            \n            // Seal plates\n            color(metal_color) {\n                // Top seal plate\n                translate([0, 0, -head_height/2 + 8]) {\n                    cube([30, 20, 3], center=true);\n                }\n                \n                // Bottom seal plate\n                translate([0, 0, -head_height/2 + 3]) {\n                    cube([30, 20, 3], center=true);\n                }\n            }\n            \n            // Alignment pins\n            color(metal_color) {\n                for(x = [-12, 12]) {\n                    for(y = [-8, 8]) {\n                        translate([x, y, -head_height/2 + 1.5]) {\n                            cylinder(h=3, d=4, center=false);\n                        }\n                    }\n                }\n            }\n            \n            // Hinge mechanism\n            color(metal_color) {\n                translate([head_width/2 - 5, 0, -head_height/2 + 15]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=20, d=6, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Safety lock\n        color(accent_color) {\n            translate([head_width/2 - 15, head_depth/2 + 2, handle_length + head_height/2 - 10]) {\n                cube([10, 4, 6], center=true);\n            }\n        }\n        \n        // Branding text area on handle\n        color(accent_color) {\n            translate([handle_diameter/2 + 1, 0, handle_length/2]) {\n                rotate([0, 90, 0]) {\n                    cube([20, 12, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Render the tool\nseal_tool();",
    "renders": true
  },
  {
    "tool": "gasket",
    "openscad_code": "// Realistic 3D-printable gasket tool â€“ medium complexity\n// Outer diameter â‰ˆ 75 mm, thickness â‰ˆ 10 mm\n// No overhangs, 2 mm min wall thickness, ready for FDM printing\n\n// Main color\ncolor(\"silver\")\n\n// Complete tool assembly\nunion() {\n    // Central cutting disc\n    difference() {\n        cylinder(h = 2, d = 75, $fn = 120);          // main disc\n        cylinder(h = 3, d = 5, $fn = 60);            // center hole for alignment pin\n    }\n\n    // Circular cutting blade (outer edge)\n    difference() {\n        cylinder(h = 3, d = 75 + 2, $fn = 120);\n        cylinder(h = 4, d = 75, $fn = 120);\n    }\n\n    // Handle base ring\n    translate([0, 0, 2]) {\n        difference() {\n            cylinder(h = 8, d = 85, $fn = 120);      // wider base\n            cylinder(h = 9, d = 75, $fn = 120);\n        }\n    }\n\n    // Handle arms (three evenly spaced for grip)\n    module handle_arm(angle) {\n        rotate([0, 0, angle])\n            translate([32, 0, 5])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h = 20, d = 8, $fn = 24);   // grip cylinder\n                        translate([-2, 0, 0])\n                            cube([4, 8.2, 20.2]);           // flat on top for printing\n                    }\n    }\n\n    // Generate three handle arms\n    for (a = [0, 120, 240]) handle_arm(a);\n\n    // Alignment ridge on top\n    translate([0, 0, 10])\n        difference() {\n            cylinder(h = 2, d = 25, $fn = 60);         // ridge\n            cylinder(h = 3, d = 5, $fn = 60);          // keep center hole open\n        }\n\n    // Textured grip rings on handle base\n    module grip_ring(z) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 1, d = 85, $fn = 120);      // ring\n                cylinder(h = 1.2, d = 82, $fn = 120);    // groove\n            }\n    }\n\n    // Add three grip rings\n    for (z = [3, 5, 7]) grip_ring(z);\n}",
    "renders": true
  },
  {
    "tool": "washer",
    "openscad_code": "// Realistic Washer Tool â€“ OpenSCAD\n// Medium complexity, 3D-printable, no overhangs\n\n$fn = 36;\n\n/* ---------- CONFIGURATION ---------- */\nbody_d   = 70;          // overall diameter\nbody_h   = 15;          // overall thickness\nshaft_d  = 12;          // shaft hole\ngrip_d   = 30;          // grip ring diameter\ngrip_h   = 8;           // grip ring thickness\ngrip_r   = 2;           // grip ring fillet radius\nknurl_n  = 60;          // number of knurls around grip\nknurl_w  = 1.2;         // knurl width\nknurl_h  = 0.8;         // knurl height\nwasher_d = 22;          // washer seat diameter\nwasher_t = 2;           // washer seat thickness\nslot_w   = 8;           // slot width for washer removal\nslot_h   = 2;           // slot depth\ncolor_tool   = [0.7,0.7,0.75];  // aluminium\ncolor_grip   = [0.1,0.1,0.1];   // rubber\ncolor_insert = [0.9,0.9,0.9];   // washer seat\n\n/* ---------- MODULES ---------- */\nmodule main_body() {\n    difference() {\n        cylinder(d=body_d, h=body_h, center=true);\n        // shaft hole\n        translate([0,0,-body_h/2-1])\n            cylinder(d=shaft_d, h=body_h+2, center=false);\n        // slot for washer removal\n        translate([0, -body_d/2, 0])\n            rotate([90,0,0])\n            cube([slot_w, body_h+2, body_d], center=true);\n    }\n}\n\nmodule grip_ring() {\n    difference() {\n        // main ring\n        cylinder(d=grip_d, h=grip_h, center=true);\n        // inner hole to fit body\n        translate([0,0,-grip_h/2-1])\n            cylinder(d=body_d-4, h=grip_h+2, center=false);\n    }\n}\n\nmodule knurls() {\n    // knurls around grip ring\n    for(i=[0:knurl_n-1]) {\n        rotate([0,0,i*360/knurl_n])\n        translate([grip_d/2, 0, 0])\n            cube([knurl_w, grip_h, knurl_h], center=true);\n    }\n}\n\nmodule washer_seat() {\n    difference() {\n        // washer pocket\n        cylinder(d=washer_d, h=washer_t, center=true);\n        // shaft hole continues\n        translate([0,0,-washer_t/2-1])\n            cylinder(d=shaft_d, h=washer_t+2, center=false);\n    }\n}\n\n/* ---------- ASSEMBLY ---------- */\nunion() {\n    color(color_tool)   main_body();\n    color(color_insert) translate([0,0,body_h/2-washer_t/2]) washer_seat();\n    color(color_grip) {\n        grip_ring();\n        translate([0,0,grip_h/2+0.1]) knurls();\n        translate([0,0,-grip_h/2-0.1]) mirror([0,0,1]) knurls();\n    }\n}",
    "renders": true
  },
  {
    "tool": "nail",
    "openscad_code": "// Nail Tool - Realistic Style, Medium Complexity\n// A 3D printable nail clipper with integrated file and key-ring loop\n\nmodule nail_clipper() {\n    // Main body - lower jaw\n    color([0.7, 0.7, 0.7]) {\n        difference() {\n            union() {\n                // Lower jaw base\n                translate([-12, -5, 0]) cube([24, 10, 3]);\n                \n                // Rounded front edge\n                translate([12, 0, 1.5]) rotate([0, 90, 0]) \n                    cylinder(h=10, r=1.5, $fn=20);\n                \n                // Cutting blade edge\n                translate([12, -4.5, 2]) cube([0.5, 9, 1]);\n            }\n            \n            // Screw hole\n            translate([-8, 0, -0.5]) cylinder(h=4, r=1.5, $fn=20);\n            \n            // Grip texture grooves\n            for(i = [-4:2:4]) {\n                translate([-10, i, 2.9]) cube([20, 0.5, 0.2]);\n            }\n        }\n    }\n    \n    // Upper jaw\n    color([0.75, 0.75, 0.75]) {\n        difference() {\n            union() {\n                // Upper arm\n                translate([-12, -5, 7]) cube([24, 10, 3]);\n                \n                // Curved cutting blade\n                translate([12, -4.5, 7]) cube([0.5, 9, 1]);\n                \n                // Lever connection point\n                translate([-12, -2, 7]) cube([4, 4, 3]);\n            }\n            \n            // Screw hole\n            translate([-8, 0, 6.5]) cylinder(h=4, r=1.5, $fn=20);\n            \n            // Grip texture grooves\n            for(i = [-4:2:4]) {\n                translate([-10, i, 9.9]) cube([20, 0.5, 0.2]);\n            }\n        }\n    }\n    \n    // Hinge pin\n    color([0.9, 0.9, 0.9]) {\n        translate([-8, 0, 3]) cylinder(h=4, r=1.4, $fn=20);\n    }\n    \n    // Lever arm\n    color([0.8, 0.8, 0.8]) {\n        difference() {\n            union() {\n                // Main lever body\n                rotate([0, 20, 0]) {\n                    translate([-16, -3, 7]) cube([20, 6, 2]);\n                }\n                \n                // Rounded lever end\n                rotate([0, 20, 0]) {\n                    translate([4, 0, 8]) rotate([90, 0, 0]) \n                        cylinder(h=6, r=3, $fn=20);\n                }\n                \n                // Connection tab\n                translate([-12, -2, 7]) cube([4, 4, 2]);\n            }\n            \n            // Key-ring hole\n            translate([4, 0, 8]) rotate([90, 0, 0]) \n                cylinder(h=6, r=1.5, $fn=20);\n        }\n    }\n    \n    // Nail file integrated on lever\n    color([0.85, 0.85, 0.85]) {\n        difference() {\n            // File base\n            translate([-15, -1, 5.5]) cube([18, 2, 0.8]);\n            \n            // File teeth pattern\n            for(i = [0:0.5:17.5]) {\n                translate([-15 + i, -1, 6.2]) cube([0.1, 2, 0.1]);\n            }\n        }\n    }\n    \n    // Spring mechanism\n    color([0.6, 0.6, 0.6]) {\n        union() {\n            // Lower spring support\n            translate([0, 0, 3]) cylinder(h=0.5, r=2, $fn=20);\n            \n            // Upper spring support\n            translate([0, 0, 7]) cylinder(h=0.5, r=2, $fn=20);\n            \n            // Spring coil representation\n            for(i = [0:20:360]) {\n                rotate([0, 0, i]) \n                    translate([2, 0, 3 + (i/90)]) \n                    sphere(r=0.3, $fn=8);\n            }\n        }\n    }\n}\n\n// Add small chamfers for realism\nmodule chamfer_edge() {\n    color([0.7, 0.7, 0.7]) {\n        translate([12, -5, 0]) \n            rotate([0, 90, 0]) \n            cylinder(h=0.5, r1=1.5, r2=0, $fn=10);\n    }\n}\n\n// Assemble the complete nail tool\nunion() {\n    nail_clipper();\n    chamfer_edge();\n    \n    // Additional detail - manufacturer marking\n    color([0.3, 0.3, 0.3]) {\n        translate([-5, 2.5, 3]) \n            linear_extrude(height=0.1) \n            text(\"STAINLESS\", size=2, halign=\"center\");\n    }\n}",
    "renders": true
  },
  {
    "tool": "screw",
    "openscad_code": "// Phillips-head screwdriver, 90 mm overall length\n// All dimensions in mm\n\n// Helper module to round edges safely for printing\nmodule rounded_cylinder(h, r1, r2, center = false) {\n    // Adds small chamfer to avoid 45Â° overhangs\n    cylinder(h = h, r1 = r1, r2 = r2, center = center, $fn = 32);\n}\n\n// Handle grip rings\nmodule grip_ring(od, id, h, n) {\n    for (i = [0 : n - 1]) {\n        translate([0, 0, h * i / n])\n            difference() {\n                cylinder(h = 1.5, r = od / 2, $fn = 32);\n                cylinder(h = 2, r = id / 2, $fn = 32);\n            }\n    }\n}\n\n// Main handle\nmodule handle() {\n    color([0.1, 0.1, 0.1]) // Dark grey\n    difference() {\n        union() {\n            // Main ergonomic grip body\n            cylinder(h = 55, r1 = 15, r2 = 12, $fn = 32);\n            // End cap\n            translate([0, 0, 55])\n                sphere(r = 12, $fn = 32);\n        }\n        // Hex socket for torque (6 mm across flats)\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 3.5, $fn = 6);\n    }\n    \n    // Rubber grip rings\n    color([0.25, 0.25, 0.25])\n    grip_ring(od = 15.5, id = 13, h = 45, n = 8);\n}\n\n// Shaft collar\nmodule collar() {\n    color([0.2, 0.2, 0.2])\n    difference() {\n        cylinder(h = 5, r = 9, $fn = 32);\n        cylinder(h = 6, r = 3.5, $fn = 32);\n    }\n}\n\n// Main shaft\nmodule shaft() {\n    color([0.8, 0.8, 0.8]) // Chrome\n    // Tapered shaft with flat sides\n    difference() {\n        union() {\n            cylinder(h = 30, r = 3.5, $fn = 32);\n            rounded_cylinder(h = 5, r1 = 3.5, r2 = 2.5);\n        }\n        // Flat sides for anti-roll\n        for (a = [0, 180])\n            rotate([0, 0, a])\n                translate([2.5, 0, 0])\n                    cube([5, 0.5, 40], center = true);\n    }\n}\n\n// Phillips tip (#2 size)\nmodule phillips_tip() {\n    color([0.8, 0.8, 0.8])\n    difference() {\n        cylinder(h = 5, r = 2.5, $fn = 32);\n        \n        // Four flutes creating the cross\n        for (a = [45, 135])\n            rotate([0, 0, a])\n                translate([0, 1.2, -0.5])\n                    cube([4, 2.4, 6], center = true);\n        \n        // Taper the tip\n        translate([0, 0, 5])\n            cylinder(h = 3, r1 = 2.5, r2 = 0.5, $fn = 32);\n    }\n}\n\n// Assembly\nhandle();\ntranslate([0, 0, 55]) collar();\ntranslate([0, 0, 60]) shaft();\ntranslate([0, 0, 90]) phillips_tip();",
    "renders": true
  },
  {
    "tool": "bolt",
    "openscad_code": "// OpenSCAD Bolt Tool (Medium Complexity - Realistic Style)\n// 3D printable wrench/socket tool for M8 bolts/nuts\n// Overall length: 80 mm, handle diameter: 25 mm\n\n$fn = 32;\n\n// Main colors\ncolor_handle = [0.2, 0.2, 0.2];  // Dark gray rubber\ncolor_metal = [0.7, 0.7, 0.7];   // Metallic gray\ncolor_grip = [0.1, 0.1, 0.1];    // Black rubber\n\n// Handle with ergonomic grip\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle tube\n        cylinder(h = 60, d = 25, center = true);\n        \n        // Grip rings\n        for(i = [-25:5:25]) {\n            translate([0, 0, i])\n            cylinder(h = 2.5, d = 27, center = true);\n        }\n        \n        // End cap\n        translate([0, 0, 31])\n        cylinder(h = 5, d1 = 25, d2 = 22, center = false);\n    }\n}\n\n// Socket head with hex opening\nmodule socket_head() {\n    color(color_metal)\n    union() {\n        // Outer cylinder\n        cylinder(h = 20, d = 22, center = true);\n        \n        // Hex socket for M8 nut (13mm across flats)\n        translate([0, 0, -1])\n        rotate([0, 0, 30])\n        cylinder(h = 22, d = 15.2, $fn = 6, center = true);\n        \n        // Chamfered entry\n        translate([0, 0, 10])\n        cylinder(h = 3, d1 = 22, d2 = 18, center = false);\n        \n        // Drive square (1/4\" = 6.35mm)\n        translate([0, 0, -11])\n        cube([6.35, 6.35, 5], center = true);\n    }\n}\n\n// Drive shaft connecting handle to socket\nmodule drive_shaft() {\n    color(color_metal)\n    union() {\n        // Main shaft\n        cylinder(h = 15, d = 12, center = true);\n        \n        // Reinforcement ring\n        translate([0, 0, -5])\n        cylinder(h = 3, d = 16, center = true);\n    }\n}\n\n// Direction switch mechanism\nmodule direction_switch() {\n    color(color_grip)\n    translate([0, 0, -15])\n    difference() {\n        cylinder(h = 8, d = 14, center = true);\n        // Arrow indicators\n        for(angle = [0, 180]) {\n            rotate([0, 0, angle])\n            translate([0, 4, 0])\n            cube([2, 4, 10], center = true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nhandle();\n\ntranslate([0, 0, 37.5])\ndrive_shaft();\n\ntranslate([0, 0, 45])\nsocket_head();\n\ntranslate([0, 12.5, 0])\ndirection_switch();",
    "renders": true
  },
  {
    "tool": "rivet",
    "openscad_code": "// Rivet Tool - OpenSCAD\n// Medium complexity realistic style\n// Overall length ~80mm\n\n$fn=50;\n\n// Main colors\ncolor_tool = \"Silver\";\ncolor_grip = \"DarkGray\";\ncolor_handle = \"Black\";\n\n// Main body assembly\nmodule rivet_tool() {\n    union() {\n        // Handle assembly\n        translate([0,0,0]) handle_assembly();\n        \n        // Tool head assembly\n        translate([0,0,25]) tool_head_assembly();\n        \n        // Spring mechanism\n        translate([0,0,35]) spring_assembly();\n    }\n}\n\n// Handle assembly with grip\nmodule handle_assembly() {\n    color(color_handle) {\n        // Main handle tube\n        cylinder(h=60, r1=8, r2=8, center=false);\n        \n        // Handle end cap\n        translate([0,0,60]) cylinder(h=5, r1=9, r2=7, center=false);\n        \n        // Grip rings\n        for(i=[5:10:55]) {\n            translate([0,0,i]) color(color_grip) cylinder(h=3, r1=8.5, r2=8.5, center=false);\n        }\n        \n        // Gripping texture - small cylinders\n        for(i=[8:4:58]) {\n            rotate([0,0,i*5]) {\n                translate([7,0,i]) color(color_grip) cylinder(h=2, r1=0.8, r2=0.8, center=true);\n            }\n        }\n    }\n}\n\n// Tool head assembly\nmodule tool_head_assembly() {\n    color(color_tool) {\n        // Main tool shaft\n        cylinder(h=15, r1=6, r2=5, center=false);\n        \n        // Tool head base\n        translate([0,0,15]) cylinder(h=8, r1=7, r2=5, center=false);\n        \n        // Rivet jaws\n        difference() {\n            // Jaw base\n            translate([0,0,23]) cube([12,6,4], center=true);\n            \n            // Jaw grooves\n            for(i=[-4:4:4]) {\n                translate([i,0,23]) cube([1.5,6.5,4.5], center=true);\n            }\n            \n            // Rivet cavity\n            translate([0,3.5,25]) rotate([90,0,0]) cylinder(h=5, r1=2, r2=1.5, center=true);\n        }\n        \n        // Side supports\n        translate([6,0,19]) rotate([0,-30,0]) cylinder(h=10, r1=2, r2=1, center=false);\n        translate([-6,0,19]) rotate([0,30,0]) cylinder(h=10, r1=2, r2=1, center=false);\n    }\n}\n\n// Spring mechanism\nmodule spring_assembly() {\n    color(color_tool) {\n        // Spring coil simulation\n        rotate([0,0,0]) {\n            for(i=[0:15:360]) {\n                rotate([0,0,i]) {\n                    translate([4.5,0,35+i/60]) sphere(r=0.8);\n                }\n            }\n        }\n        \n        // Spring housing\n        translate([0,0,35]) cylinder(h=8, r1=4, r2=4, center=false);\n    }\n}\n\n// Render the complete tool\nrivet_tool();",
    "renders": true
  },
  {
    "tool": "staple",
    "openscad_code": "// Staple Tool (Stapler) - Realistic Style, Medium Complexity\n// Overall dimensions: ~90mm x 30mm x 45mm\n\n$fn = 50;\n\nmodule base() {\n    // Main base body\n    difference() {\n        union() {\n            // Base platform\n            translate([0, 0, 5])\n                cube([85, 28, 15], center=true);\n            \n            // Front rounded edge\n            translate([37, 0, 5])\n                rotate([0, 90, 0])\n                    cylinder(h=28, r=7.5, center=true);\n            \n            // Rear support\n            translate([-35, 0, 12])\n                cube([15, 28, 8], center=true);\n        }\n        \n        // Staple magazine cavity\n        translate([0, 0, 10])\n            cube([60, 22, 8], center=true);\n        \n        // Front staple exit slot\n        translate([42.5, 0, 12])\n            cube([3, 20, 6], center=true);\n    }\n}\n\nmodule top_arm() {\n    color([0.15, 0.15, 0.15])\n    difference() {\n        union() {\n            // Main arm\n            translate([0, 0, 35])\n                cube([75, 26, 8], center=true);\n            \n            // Front curve\n            translate([30, 0, 35])\n                rotate([0, 90, 0])\n                    cylinder(h=26, r=4, center=true);\n            \n            // Rear pivot\n            translate([-35, 0, 30])\n                rotate([0, 90, 0])\n                    cylinder(h=26, r=6, center=true);\n        }\n        \n        // Handle grip cavity\n        translate([0, 0, 39])\n            cube([65, 20, 4], center=true);\n    }\n}\n\nmodule handle_grip() {\n    color([0.2, 0.2, 0.2])\n    difference() {\n        // Main grip\n        translate([0, 0, 39])\n            cube([65, 22, 4], center=true);\n        \n        // Grip texture grooves\n        for(i = [-30:5:30]) {\n            translate([i, 0, 41])\n                cube([1.5, 20, 1], center=true);\n        }\n    }\n}\n\nmodule metal_strike_plate() {\n    color([0.8, 0.8, 0.8])\n    translate([35, 0, 8])\n        cube([6, 24, 2], center=true);\n}\n\nmodule hinge_pin() {\n    color([0.7, 0.7, 0.7])\n    translate([-35, 0, 20])\n        rotate([90, 0, 0])\n            cylinder(h=26, r=2, center=true);\n}\n\nmodule staple_magazine() {\n    color([0.6, 0.6, 0.6])\n    translate([15, 0, 6])\n        cube([50, 20, 2], center=true);\n}\n\nmodule magazine_spring() {\n    color([0.5, 0.5, 0.5])\n    for(i = [1:3:40]) {\n        translate([-10 + i, 0, 6])\n            rotate([90, 0, 0])\n                cylinder(h=18, r=1.5, center=true);\n    }\n}\n\nmodule bottom_pad() {\n    color([0.3, 0.3, 0.3])\n    translate([0, 0, -2.5])\n        cube([85, 28, 3], center=true);\n}\n\n// Assembly\nunion() {\n    base();\n    top_arm();\n    handle_grip();\n    metal_strike_plate();\n    hinge_pin();\n    staple_magazine();\n    magazine_spring();\n    bottom_pad();\n}",
    "renders": true
  },
  {
    "tool": "tack",
    "openscad_code": "// Tack Tool - Realistic Medium Complexity\n// 3D printable tack remover with ergonomic handle and sharp claw\n\n$fn = 64;  // Smooth curves for realism\n\n// Main module\nmodule tack_tool() {\n    color(\"silver\") {\n        // Handle grip\n        translate([0, 0, 0]) grip_handle();\n        \n        // Shaft\n        translate([0, 0, 50]) shaft();\n        \n        // Claw head\n        translate([0, 0, 100]) claw_head();\n        \n        // Reinforcement ring\n        translate([0, 0, 45]) reinforcement_ring();\n    }\n}\n\n// Ergonomic grip handle\nmodule grip_handle() {\n    difference() {\n        union() {\n            // Main handle body\n            cylinder(h = 50, d1 = 25, d2 = 22, center = false);\n            \n            // Finger grooves\n            for(i = [0:4]) {\n                rotate([0, 0, 72 * i])\n                translate([0, 10, 15])\n                scale([1, 0.3, 1])\n                cylinder(h = 20, d = 8, center = true);\n            }\n        }\n        \n        // Hollow center for weight reduction\n        cylinder(h = 60, d = 12, center = false);\n        \n        // Grip texture holes\n        for(i = [0:7]) {\n            rotate([0, 0, 45 * i])\n            for(j = [0:2]) {\n                translate([0, 11, 10 + j * 15])\n                sphere(d = 3);\n            }\n        }\n    }\n}\n\n// Shaft connecting handle to claw\nmodule shaft() {\n    cylinder(h = 50, d = 12, center = false);\n    \n    // Tapered section\n    translate([0, 0, 45])\n    cylinder(h = 5, d1 = 12, d2 = 8, center = false);\n}\n\n// Reinforcement ring for strength\nmodule reinforcement_ring() {\n    difference() {\n        cylinder(h = 10, d = 20, center = false);\n        cylinder(h = 12, d = 12, center = false);\n    }\n}\n\n// Claw head for removing tacks\nmodule claw_head() {\n    difference() {\n        union() {\n            // Main claw body\n            translate([0, 0, 0])\n            cylinder(h = 15, d = 8, center = false);\n            \n            // Curved claw\n            translate([0, 0, 10])\n            rotate_extrude(angle = 90, convexity = 10)\n            translate([8, 0, 0])\n            circle(d = 4);\n            \n            // Straight section of claw\n            translate([0, 8, 15])\n            rotate([90, 0, 0])\n            cylinder(h = 20, d = 4, center = false);\n            \n            // Forked tip\n            translate([0, 8, 35])\n            rotate([90, 0, 0])\n            forked_tip();\n        }\n        \n        // Sharp inner edge\n        translate([0, 5, 15])\n        rotate([90, 0, 0])\n        cube([20, 10, 2], center = true);\n        \n        // Claw hollow\n        translate([0, 0, 10])\n        rotate_extrude(angle = 90, convexity = 10)\n        translate([6, 0, 0])\n        circle(d = 2);\n    }\n}\n\n// Forked tip for gripping tacks\nmodule forked_tip() {\n    difference() {\n        cylinder(h = 15, d = 4, center = false);\n        \n        // Split fork\n        translate([0, 0, 10])\n        cube([3, 4, 5], center = true);\n        \n        // Tapered end\n        translate([0, 0, 13])\n        cylinder(h = 2, d1 = 4, d2 = 2, center = false);\n    }\n}\n\n// Render the complete tool\ntack_tool();",
    "renders": true
  },
  {
    "tool": "loop",
    "openscad_code": "// Loop Tool - Realistic Style, Medium Complexity\n// A sturdy 3D printable loop tool with ergonomic handle and reinforced blade\n\n$fn = 64; // Smooth curves\n\n// Main dimensions\nhandle_length = 85;\nhandle_diameter = 18;\nloop_inner_diameter = 35;\nloop_outer_diameter = 42;\nblade_thickness = 2.5;\ntransition_length = 12;\n\n// Colors\ncolor_handle = [0.1, 0.1, 0.1]; // Dark gray/black\ncolor_loop = [0.7, 0.7, 0.7]; // Metallic gray\ncolor_grip = [0.2, 0.2, 0.2]; // Darker grip texture\n\nmodule loop_tool() {\n    // Handle with ergonomic grip\n    color(color_handle) {\n        // Main handle body\n        translate([0, 0, handle_length/2]) {\n            cylinder(h=handle_length, d=handle_diameter, center=true);\n        }\n        \n        // Grip texture rings\n        for(i = [10:10:handle_length-10]) {\n            color(color_grip) {\n                translate([0, 0, i]) {\n                    difference() {\n                        cylinder(h=3, d=handle_diameter+1, center=true);\n                        cylinder(h=3.5, d=handle_diameter-2, center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Transition from handle to loop\n    color(color_loop) {\n        translate([0, 0, handle_length]) {\n            // Tapered transition\n            cylinder(h=transition_length, d1=handle_diameter, d2=loop_outer_diameter);\n            \n            // Reinforcement ring\n            translate([0, 0, transition_length/2]) {\n                cylinder(h=transition_length+2, d=loop_outer_diameter+6, center=true);\n            }\n        }\n    }\n    \n    // Main loop blade\n    color(color_loop) {\n        translate([0, 0, handle_length + transition_length + loop_outer_diameter/2]) {\n            difference() {\n                // Outer loop\n                cylinder(h=blade_thickness, d=loop_outer_diameter, center=true);\n                \n                // Inner hole\n                cylinder(h=blade_thickness+1, d=loop_inner_diameter, center=true);\n            }\n            \n            // Blade edge bevel\n            difference() {\n                cylinder(h=blade_thickness, d=loop_outer_diameter, center=true);\n                cylinder(h=blade_thickness+0.5, d=loop_outer_diameter-3, center=true);\n            }\n        }\n    }\n    \n    // Reinforcement struts\n    color(color_loop) {\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle]) {\n                translate([loop_outer_diameter/2 + 5, 0, handle_length + transition_length/2]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=loop_outer_diameter/2 + 5, d=4);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Handle end cap\n    color(color_handle) {\n        translate([0, 0, 5]) {\n            sphere(d=handle_diameter);\n        }\n    }\n    \n    // Hanging hole\n    difference() {\n        loop_tool();\n        translate([0, 0, 5]) {\n            cylinder(h=10, d=6);\n        }\n    }\n}\n\nloop_tool();",
    "renders": true
  },
  {
    "tool": "link",
    "openscad_code": "// Link tool - Realistic style, medium complexity\n// 3D printable chain link tool for assembly/disassembly of roller chain\n// Overall length: ~80mm\n\n// Main colors\n$fn = 64;\n\n// Grip handle module\nmodule grip_handle(length=40, radius=8) {\n    color(\"firebrick\") {\n        // Main handle body\n        cylinder(h=length, r=radius, center=false);\n        \n        // Grip rings\n        for(i=[0:4]) {\n            translate([0, 0, i*8])\n            difference() {\n                cylinder(h=2, r=radius+1, center=false);\n                cylinder(h=2.2, r=radius-0.5, center=false);\n            }\n        }\n    }\n}\n\n// Tool head with pin extractor\nmodule tool_head() {\n    color(\"silver\") {\n        // Main head body\n        translate([0, 0, 5])\n        cube([20, 15, 10], center=true);\n        \n        // Pin extractor tip - tapered\n        translate([10, 0, 5])\n        cylinder(h=8, r1=3, r2=1.5, center=true);\n        \n        // Jaw opening\n        translate([5, 0, 5])\n        difference() {\n            cube([15, 12, 8], center=true);\n            cube([16, 10, 6], center=true);\n        }\n    }\n}\n\n// Jaw mechanism\nmodule jaw_mechanism() {\n    color(\"silver\") {\n        // Fixed jaw\n        translate([-5, 8, 5])\n        cube([12, 3, 8], center=true);\n        \n        // Movable jaw\n        translate([-5, -8, 5])\n        cube([12, 3, 8], center=true);\n        \n        // Adjustment screw\n        translate([-5, -12, 5])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=2, center=true);\n    }\n}\n\n// Handle connector\nmodule handle_connector() {\n    color(\"silver\") {\n        // Transition piece\n        translate([-15, 0, 5])\n        cube([10, 12, 10], center=true);\n        \n        // Reinforcement ribs\n        for(i=[-1, 1]) {\n            translate([-15, i*6, 5])\n            cube([10, 1, 8], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([-35, 0, 0])\n    grip_handle();\n    \n    // Connector\n    handle_connector();\n    \n    // Tool head\n    translate([0, 0, 0])\n    tool_head();\n    \n    // Jaws\n    jaw_mechanism();\n}\n\n// Optional: Add manufacturer's mark\ntranslate([0, 0, 12])\ncolor(\"black\")\nrotate([90, 0, 0])\nlinear_extrude(height=0.5)\ntext(\"LINK\", size=3, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "tool": "joint",
    "openscad_code": "// Joint Tool - Realistic Style\n// A handheld joint cutting and finishing tool for woodworking\n\n$fn = 32;\n\nmodule handle() {\n    // Main handle body with ergonomic grip\n    color(\"saddlebrown\")\n    difference() {\n        union() {\n            // Main handle cylinder\n            cylinder(h = 80, d1 = 28, d2 = 24);\n            \n            // Grip rings\n            for (i = [10:15:70]) {\n                translate([0, 0, i])\n                    cylinder(h = 5, d = 30);\n            }\n        }\n        \n        // Center bore for weight reduction\n        translate([0, 0, -1])\n            cylinder(h = 82, d = 12);\n    }\n}\n\nmodule blade_holder() {\n    // Metal blade holder assembly\n    color(\"silver\")\n    union() {\n        // Main blade holder body\n        translate([0, 0, 85])\n            cube([35, 12, 25], center = true);\n            \n        // Reinforcement ribs\n        for (i = [-10, 10]) {\n            translate([i, 0, 85])\n                cube([3, 12, 25], center = true);\n        }\n        \n        // Blade clamp screws\n        for (i = [-12, 12]) {\n            translate([i, 8, 92])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, d = 6, $fn = 6);\n        }\n    }\n}\n\nmodule cutting_blade() {\n    // Replaceable cutting blade\n    color(\"lightgray\")\n    difference() {\n        // Blade body\n        translate([0, 0, 97])\n            cube([30, 0.8, 20], center = true);\n            \n        // Cutting edge bevel\n        translate([0, -1, 97])\n            rotate([0, 45, 0])\n                cube([40, 2, 20], center = true);\n                \n        // Blade mounting holes\n        for (i = [-8, 8]) {\n            translate([i, 0, 92])\n                cylinder(h = 2, d = 3, center = true);\n        }\n    }\n}\n\nmodule depth_stop() {\n    // Adjustable depth stop mechanism\n    color(\"darkgray\")\n    union() {\n        // Guide rod\n        translate([0, 25, 85])\n            rotate([90, 0, 0])\n                cylinder(h = 30, d = 6);\n                \n        // Thumb wheel\n        translate([0, 25, 100])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 8, d = 20);\n                // Knurling pattern\n                for (i = [0:15:359]) {\n                    rotate([0, 0, i])\n                        translate([9, 0, 0])\n                            cube([1, 0.5, 8], center = true);\n                }\n                // Center hole\n                cylinder(h = 10, d = 7);\n            }\n            \n        // Stop plate\n        translate([0, 40, 85])\n            rotate([90, 0, 0])\n                cylinder(h = 3, d = 15);\n    }\n}\n\nmodule safety_guard() {\n    // Retractable safety guard\n    color(\"gold\")\n    translate([0, -5, 90])\n    difference() {\n        // Guard body\n        cube([35, 5, 15], center = true);\n        \n        // Blade slot\n        translate([0, -3, 0])\n            cube([25, 2, 10], center = true);\n    }\n}\n\n// Main assembly\nhandle();\nblade_holder();\ncutting_blade();\ndepth_stop();\nsafety_guard();",
    "renders": true
  },
  {
    "tool": "hinge",
    "openscad_code": "// Hinge Tool - Realistic Medium Complexity\n// A functional hinge installation tool with punch, guide, and alignment features\n\n$fn = 50;\n\n// Colors\nhinge_color = \"Silver\";\nhandle_color = \"DarkGray\";\ngrip_color = \"Black\";\nmarking_color = \"White\";\n\n// Dimensions (mm)\noverall_length = 85;\nhandle_length = 60;\nhandle_diameter = 25;\nshaft_diameter = 8;\npunch_length = 15;\npunch_diameter = 4;\nguide_thickness = 3;\nguide_diameter = 12;\nalignment_pin_diameter = 2;\nalignment_pin_length = 8;\n\nmodule handle_grooves() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, handle_diameter/2 - 1, 0])\n        cube([handle_length - 10, 2, 3], center = true);\n    }\n}\n\nmodule handle_knurling() {\n    for (i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([handle_length/2 - 5, handle_diameter/2 - 0.5, 0])\n        cube([1, 1, handle_diameter], center = true);\n    }\n}\n\nmodule alignment_pins() {\n    // Two alignment pins for hinge positioning\n    color(grip_color)\n    for (pos = [-1, 1]) {\n        translate([0, pos * (guide_diameter/2 + alignment_pin_diameter/2 + 1), 0])\n        cylinder(h = alignment_pin_length, d = alignment_pin_diameter, center = true);\n    }\n}\n\nmodule hinge_punch() {\n    // Main punch tip for marking screw holes\n    color(hinge_color)\n    union() {\n        // Punch shaft\n        translate([0, 0, punch_length/2])\n        cylinder(h = punch_length, d = punch_diameter);\n        \n        // Tapered tip\n        translate([0, 0, punch_length])\n        cylinder(h = 2, d1 = punch_diameter, d2 = 0);\n    }\n}\n\nmodule guide_ring() {\n    // Guide ring for accurate hinge positioning\n    color(hinge_color)\n    difference() {\n        cylinder(h = guide_thickness, d = guide_diameter);\n        translate([0, 0, -1])\n        cylinder(h = guide_thickness + 2, d = shaft_diameter + 1);\n    }\n}\n\nmodule main_tool() {\n    color(handle_color)\n    union() {\n        // Main handle\n        translate([0, 0, handle_length/2])\n        cylinder(h = handle_length, d = handle_diameter);\n        \n        // Handle grip pattern\n        color(grip_color)\n        handle_grooves();\n        \n        // Knurled grip section\n        color(grip_color)\n        handle_knurling();\n        \n        // Shaft\n        color(hinge_color)\n        translate([0, 0, handle_length])\n        cylinder(h = overall_length - handle_length, d = shaft_diameter);\n        \n        // Guide ring\n        translate([0, 0, handle_length + (overall_length - handle_length)/2])\n        guide_ring();\n        \n        // Alignment pins\n        translate([0, 0, handle_length + (overall_length - handle_length)/2])\n        alignment_pins();\n        \n        // Punch tip\n        translate([0, 0, overall_length])\n        hinge_punch();\n        \n        // Measurement markings\n        color(marking_color)\n        for (i = [1:3]) {\n            translate([handle_diameter/2 + 1, 0, i * (handle_length/4)])\n            cube([2, 0.5, 0.5], center = true);\n        }\n    }\n}\n\n// Render the complete hinge tool\nmain_tool();",
    "renders": true
  },
  {
    "tool": "lock",
    "openscad_code": "// Realistic 3D printable lock-pick set with a medium-complexity handle and two pick blades\n// Overall footprint â‰ˆ 90 mm long, 25 mm wide, 15 mm thick â€“ fits most FDM printers\n\n// ---------- CONFIGURATION ----------\n$fn = 64;               // Smooth curves\nhandle_len   = 70;\nhandle_w     = 18;\nhandle_h     = 12;\nblade1_len   = 22;\nblade2_len   = 25;\nblade_w      = 2.0;     // 2 mm strong enough for PETG/PLA\nblade_h      = 1.0;\ngrip_depth   = 0.8;\ngrip_pitch   = 4;\n\n// ---------- COLOURS ----------\ncolor_handle = [0.15,0.15,0.15];  // Dark grey\ncolor_blades = [0.65,0.65,0.65];  // Steel\n\n// ---------- MAIN ----------\nmodule lock_tool() {\n    color(color_handle) handle();\n    translate([handle_len*0.7,0,0]) color(color_blades) blade1();\n    translate([handle_len*0.75,-6,0]) color(color_blades) blade2();\n}\n\n// ---------- HANDLE ----------\nmodule handle() {\n    difference() {\n        // Smooth ergonomic body\n        hull() {\n            translate([-handle_len/2,0,0])\n                cube([handle_len,handle_w,handle_h], center=true);\n            translate([-handle_len/2+5,0,0])\n                scale([1,0.9,0.9]) sphere(d=handle_w);\n            translate([ handle_len/2-5,0,0])\n                scale([1,0.9,0.9]) sphere(d=handle_w);\n        }\n\n        // Finger-grip grooves\n        for(i=[-handle_len/2+10 : grip_pitch : handle_len/2-10])\n            translate([i,0,-handle_h/2])\n                cube([grip_pitch*0.5, handle_w-2, grip_depth], center=true);\n\n        // Hollow core to save material\n        translate([0,0,0])\n            cube([handle_len-6, handle_w-4, handle_h-2], center=true);\n    }\n}\n\n// ---------- BLADE 1 â€“ HOOK PICK ----------\nmodule blade1() {\n    linear_extrude(height=blade_h, center=true, convexity=4)\n    polygon(points=[\n        [0,0],\n        [blade1_len-4,0],\n        [blade1_len-4,2],\n        [blade1_len-2,2.5],\n        [blade1_len,1.5],\n        [blade1_len-1,0.5],\n        [0,0]\n    ]);\n}\n\n// ---------- BLADE 2 â€“ HALF-DIAMOND PICK ----------\nmodule blade2() {\n    linear_extrude(height=blade_h, center=true, convexity=4)\n    polygon(points=[\n        [0,0],\n        [blade2_len-5,0],\n        [blade2_len-2.5,2.5],\n        [blade2_len,0],\n        [blade2_len-2.5,-2.5],\n        [blade2_len-5,0],\n        [0,0]\n    ]);\n}\n\n// ---------- RENDER ----------\nlock_tool();",
    "renders": true
  },
  {
    "tool": "latch",
    "openscad_code": "// Latch Tool - Medium Complexity Realistic Style\n// A hand-held latch installation tool for door hardware\n\n// Main dimensions\ntool_length = 85;\ntool_width = 25;\nhandle_diameter = 18;\nbit_length = 20;\nbit_width = 8;\ngrip_length = 50;\n\n// Colors\ncolor_handle = [0.2, 0.2, 0.2];  // Dark gray rubber grip\ncolor_shaft = [0.7, 0.7, 0.7];  // Metallic silver\ncolor_bit = [0.5, 0.5, 0.5];    // Steel gray\n\n// Handle with rubber grip pattern\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle body\n        cylinder(h=grip_length, d=handle_diameter, $fn=64);\n        \n        // Grip rings\n        for(i = [0:4:48]) {\n            translate([0, 0, i])\n            cylinder(h=2, d1=handle_diameter, d2=handle_diameter * 0.9, $fn=64);\n        }\n        \n        // End cap\n        translate([0, 0, grip_length])\n        cylinder(h=3, d=handle_diameter + 2, $fn=64);\n    }\n}\n\n// Hexagonal shaft\nmodule shaft() {\n    color(color_shaft)\n    union() {\n        // Main shaft\n        cylinder(h=tool_length - grip_length - bit_length, d=8, $fn=6);\n        \n        // Shoulder transition\n        translate([0, 0, tool_length - grip_length - bit_length])\n        cylinder(h=2, d1=8, d2=bit_width, $fn=6);\n    }\n}\n\n// Latch bit with flat blade\nmodule latch_bit() {\n    color(color_bit)\n    union() {\n        // Hex base\n        cylinder(h=5, d=bit_width, $fn=6);\n        \n        // Main blade\n        translate([0, 0, 5])\n        cube([bit_width * 0.6, bit_width * 2.5, bit_length - 5], center=true);\n        \n        // Tapered tip\n        translate([0, 0, bit_length - 3])\n        cube([bit_width * 0.3, bit_width * 2, 6], center=true);\n        \n        // Notch for latch mechanism\n        translate([0, -bit_width, 10])\n        cube([bit_width * 0.3, bit_width, 3], center=true);\n    }\n}\n\n// Assembly\nmodule latch_tool() {\n    union() {\n        // Handle at base\n        translate([0, 0, 0])\n        handle();\n        \n        // Shaft extending from handle\n        translate([0, 0, grip_length])\n        shaft();\n        \n        // Latch bit at end\n        translate([0, 0, tool_length - bit_length])\n        latch_bit();\n        \n        // Size markings on shaft\n        color([0, 0, 0])\n        for(i = [0:5:30]) {\n            translate([4, 0, grip_length + 5 + i])\n            rotate([0, 90, 0])\n            linear_extrude(0.5)\n            text(\"8mm\", size=2, valign=\"center\");\n        }\n    }\n}\n\n// Render the complete tool\nlatch_tool();",
    "renders": true
  },
  {
    "tool": "catch",
    "openscad_code": "// Catch Tool - Realistic Style, Medium Complexity\n// A handheld catch tool for securing cables or wires\n\n// Color scheme\n$fn = 50;\n\n// Main body module\nmodule catch_tool() {\n    // Handle section\n    color(\"dimgray\") handle();\n    \n    // Jaw mechanism\n    color(\"silver\") jaws();\n    \n    // Trigger mechanism\n    color(\"black\") trigger();\n    \n    // Safety latch\n    color(\"red\") safety();\n}\n\n// Handle with grip texture\nmodule handle() {\n    // Main handle body\n    difference() {\n        cylinder(h=80, d=25, center=true);\n        translate([0, 0, 40]) cylinder(h=20, d=20, center=true);\n    }\n    \n    // Grip rings\n    for(i = [-35:10:35]) {\n        translate([0, 0, i]) \n        rotate([90, 0, 0]) \n        cylinder(h=2, d=28, center=true);\n    }\n}\n\n// Jaws mechanism\nmodule jaws() {\n    // Fixed jaw\n    translate([0, 15, 40]) {\n        difference() {\n            cube([20, 10, 30], center=true);\n            translate([0, 5, 10]) cube([18, 10, 25], center=true);\n        }\n    }\n    \n    // Moving jaw\n    translate([0, -15, 40]) {\n        rotate([0, 30, 0]) {\n            difference() {\n                cube([20, 10, 30], center=true);\n                translate([0, -5, 10]) cube([18, 10, 25], center=true);\n            }\n        }\n    }\n    \n    // Hinge pin\n    translate([12, 0, 40]) \n    rotate([90, 0, 0]) \n    cylinder(h=35, d=4, center=true);\n    \n    // Spring mechanism\n    translate([0, 0, 25]) {\n        difference() {\n            cylinder(h=15, d=8, center=true);\n            cylinder(h=16, d=5, center=true);\n        }\n    }\n}\n\n// Trigger mechanism\nmodule trigger() {\n    // Trigger guard\n    difference() {\n        translate([0, -25, 20]) \n        cube([30, 15, 20], center=true);\n        translate([0, -25, 20]) \n        cube([26, 11, 16], center=true);\n    }\n    \n    // Trigger lever\n    translate([0, -25, 15]) {\n        difference() {\n            cube([8, 20, 10], center=true);\n            translate([0, 5, 0]) \n            cube([6, 15, 8], center=true);\n        }\n    }\n    \n    // Trigger pivot\n    translate([0, -15, 15]) \n    rotate([90, 0, 0]) \n    cylinder(h=12, d=3, center=true);\n}\n\n// Safety latch\nmodule safety() {\n    // Safety switch\n    translate([12, -20, 30]) {\n        difference() {\n            cube([8, 15, 5], center=true);\n            translate([0, 7.5, 0]) \n            cube([6, 12, 3], center=true);\n        }\n    }\n    \n    // Safety indicator\n    translate([16, -20, 30]) \n    color(\"red\") sphere(d=3);\n}\n\n// Assembly\ncatch_tool();",
    "renders": true
  },
  {
    "tool": "press",
    "openscad_code": "// Press tool - medium complexity realistic version\n// Dimensions: 80mm x 40mm x 100mm overall\n\n// Colors\n$fn = 32;\n\n// Main press body\nmodule press_body() {\n    color(\"silver\")\n    union() {\n        // Base plate\n        translate([0, 0, 0])\n            cube([80, 40, 5], center=true);\n        \n        // Vertical columns\n        for(side = [-1, 1])\n            translate([side * 30, 0, 25])\n                cube([8, 8, 50], center=true);\n    }\n}\n\n// Press mechanism\nmodule press_mechanism() {\n    color(\"darkgray\")\n    union() {\n        // Horizontal beam\n        translate([0, 0, 52])\n            cube([70, 10, 6], center=true);\n        \n        // Press shaft\n        translate([0, 0, 35])\n            cylinder(h=30, r=6, center=true);\n        \n        // Threaded rod\n        color(\"silver\")\n        translate([0, 0, 35])\n            cylinder(h=50, r=3, center=true);\n    }\n}\n\n// Press handle\nmodule press_handle() {\n    color(\"black\")\n    union() {\n        // Handle bar\n        rotate([90, 0, 0])\n            translate([0, 0, -35])\n                cylinder(h=40, r=4, center=true);\n        \n        // Handle grip\n        color(\"red\")\n        rotate([90, 0, 0])\n            translate([0, 0, -55])\n                cylinder(h=15, r=6, center=true);\n    }\n}\n\n// Press plate\nmodule press_plate() {\n    color(\"silver\")\n    difference() {\n        // Main plate\n        translate([0, 0, 20])\n            cube([50, 30, 4], center=true);\n        \n        // Reinforcement ribs\n        for(side = [-1, 1])\n            translate([side * 20, 0, 18])\n                cube([2, 26, 8], center=true);\n    }\n}\n\n// Base support\nmodule base_support() {\n    color(\"gray\")\n    difference() {\n        // Base platform\n        translate([0, 0, 2.5])\n            cube([70, 35, 5], center=true);\n        \n        // Center hole\n        translate([0, 0, 0])\n            cylinder(h=10, r=8, center=true);\n    }\n}\n\n// Side handles for stability\nmodule side_handles() {\n    color(\"black\")\n    for(side = [-1, 1])\n        translate([side * 45, 0, 10])\n            rotate([0, 90, 0])\n                cylinder(h=15, r=3, center=true);\n}\n\n// Assembly\nunion() {\n    press_body();\n    press_mechanism();\n    press_handle();\n    press_plate();\n    base_support();\n    side_handles();\n}",
    "renders": true
  },
  {
    "tool": "jack",
    "openscad_code": "// Realistic Jack Tool - Medium Complexity OpenSCAD Model\n// A 3D printable scissor jack for automotive use\n\n$fn = 32;\n\n// Main colors\ncolor_carjack = [0.7, 0.7, 0.7]; // Metallic gray\ncolor_handle = [0.8, 0.2, 0.2]; // Red handle\ncolor_rubber = [0.1, 0.1, 0.1]; // Black rubber pads\ncolor_bolt = [0.5, 0.5, 0.5]; // Darker bolts\n\nmodule jack_assembly() {\n    // Base platform\n    difference() {\n        color(color_carjack) \n            cube([80, 80, 8], center=true);\n        \n        // Lightening holes\n        for (x = [-30, 0, 30]) {\n            for (y = [-30, 0, 30]) {\n                translate([x, y, 0])\n                    cylinder(h=10, r=8, center=true);\n            }\n        }\n    }\n    \n    // Rubber pads on corners\n    for (x = [-35, 35]) {\n        for (y = [-35, 35]) {\n            translate([x, y, 4.5])\n                color(color_rubber)\n                    cylinder(h=2, r=5);\n        }\n    }\n    \n    // Center threaded rod\n    translate([0, 0, 4])\n        rotate([90, 0, 0])\n            threaded_rod();\n    \n    // Scissor arms\n    scissor_arm(1);\n    scissor_arm(-1);\n    \n    // Top platform\n    translate([0, 0, 65])\n        top_platform();\n}\n\nmodule threaded_rod() {\n    // Threaded rod body\n    difference() {\n        color(color_carjack)\n            cylinder(h=120, r=6);\n        \n        // Thread grooves\n        for (i = [-60:5:60]) {\n            translate([0, 0, i])\n                cylinder(h=2, r=5.5);\n        }\n    }\n    \n    // Handle attachment\n    translate([0, 0, 65])\n        handle_assembly();\n}\n\nmodule handle_assembly() {\n    // Handle socket\n    difference() {\n        color(color_carjack)\n            cylinder(h=15, r=8);\n        \n        translate([0, 0, -1])\n            cylinder(h=17, r=4);\n    }\n    \n    // Crank handle\n    rotate([0, 0, $t*360])\n        translate([0, 0, 15])\n            color(color_handle)\n                handle_bar();\n}\n\nmodule handle_bar() {\n    // Main handle bar\n    rotate([0, 90, 0])\n        cylinder(h=120, r=4);\n    \n    // Handle grip\n    translate([0, 0, 120])\n        rotate([0, 90, 0])\n            color(color_rubber)\n                cylinder(h=20, r=6);\n    \n    // Grip ridges\n    for (i = [5:5:15]) {\n        translate([0, 0, 120+i])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=3, r=6);\n                    cylinder(h=4, r=5);\n                }\n    }\n}\n\nmodule scissor_arm(side) {\n    // Bottom pivot\n    translate([side * 35, 0, 4])\n        rotate([0, 90, 0])\n            pivot_pin();\n    \n    // Top pivot\n    translate([side * 25, 0, 60])\n        rotate([0, 90, 0])\n            pivot_pin();\n    \n    // Scissor arms\n    for (i = [0:3]) {\n        translate([0, side * (i*8 - 12), 0])\n            color(color_carjack)\n                arm_segment(side, i);\n    }\n}\n\nmodule pivot_pin() {\n    difference() {\n        color(color_bolt)\n            cylinder(h=20, r=3);\n        cylinder(h=22, r=2);\n    }\n}\n\nmodule arm_segment(side, index) {\n    // Calculate arm angle based on index\n    angle = 15 + index * 10;\n    \n    rotate([0, side * angle, 0])\n        translate([side * 20, 0, 0])\n            difference() {\n                // Arm body\n                cube([40, 6, 3], center=true);\n                \n                // Holes for pins\n                translate([-20, 0, 0])\n                    cylinder(h=10, r=3, center=true);\n                translate([20, 0, 0])\n                    cylinder(h=10, r=3, center=true);\n            }\n}\n\nmodule top_platform() {\n    // Top lifting platform\n    difference() {\n        color(color_carjack)\n            cube([70, 70, 6], center=true);\n        \n        // Lifting pad recess\n        translate([0, 0, -4])\n            cube([50, 50, 4], center=true);\n    }\n    \n    // Rubber lifting pad\n    translate([0, 0, 3])\n        color(color_rubber)\n            cube([50, 50, 3], center=true);\n}\n\n// Render the complete jack\njack_assembly();",
    "renders": true
  },
  {
    "tool": "lift",
    "openscad_code": "// Lift Tool - Car Jack Style\n// Realistic medium complexity 3D printable model\n\n// Overall dimensions\njack_base = 80;\njack_height = 60;\nhandle_length = 40;\n\n// Colors\n$fn = 50;\n\n// Main base frame\nmodule base_frame() {\n    difference() {\n        // Main base platform\n        color(\"darkgray\") \n        cube([jack_base, jack_base, 8], center=true);\n        \n        // Mounting holes\n        for(x=[-25, 25], y=[-25, 25]) {\n            translate([x, y, 0])\n            cylinder(h=10, r=3, center=true);\n        }\n        \n        // Center hole for mechanism\n        translate([0, 0, 0])\n        cylinder(h=10, r=6, center=true);\n    }\n}\n\n// Scissor mechanism\nmodule scissor_link(width=35, height=30) {\n    color(\"silver\")\n    for(i=[0:1]) {\n        rotate([0, 0, i*90])\n        difference() {\n            // Main link arm\n            translate([0, 0, -2])\n            cube([width, 4, 4], center=true);\n            \n            // Pivot holes\n            translate([-width/2+3, 0, 0])\n            cylinder(h=6, r=2, center=true);\n            translate([width/2-3, 0, 0])\n            cylinder(h=6, r=2, center=true);\n        }\n    }\n}\n\n// Lift pad\nmodule lift_pad() {\n    color(\"red\")\n    union() {\n        // Main pad\n        translate([0, 0, jack_height/2-2])\n        cube([30, 30, 4], center=true);\n        \n        // Rubber grip surface\n        color(\"black\")\n        translate([0, 0, jack_height/2])\n        difference() {\n            cube([28, 28, 2], center=true);\n            for(x=[-10:10:10], y=[-10:10:10]) {\n                translate([x, y, 0])\n                cylinder(h=3, r=1, center=true);\n            }\n        }\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    color(\"gray\")\n    union() {\n        // Main handle bar\n        rotate([90, 0, 0])\n        translate([0, -jack_base/2-10, 0])\n        cylinder(h=handle_length, r=3);\n        \n        // Handle grip\n        color(\"blue\")\n        translate([0, -jack_base/2-handle_length, 0])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=4);\n        \n        // Handle socket\n        color(\"darkgray\")\n        translate([0, -jack_base/2-5, 0])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=5);\n    }\n}\n\n// Support legs\nmodule support_legs() {\n    color(\"gray\")\n    for(angle=[0:90:270]) {\n        rotate([0, 0, angle])\n        translate([jack_base/2-5, 0, -2])\n        cube([10, 8, 12], center=true);\n    }\n}\n\n// Assembly\nsupport_legs();\nbase_frame();\n\n// Scissor mechanism assembly\ntranslate([0, 0, 4])\nrotate([0, 0, 45])\nscissor_link(35, 25);\n\ntranslate([0, 0, 4+15])\nrotate([0, 0, -45])\nscissor_link(35, 25);\n\ntranslate([0, 0, 4+30])\nrotate([0, 0, 45])\nscissor_link(35, 25);\n\n// Lift pad on top\ntranslate([0, 0, 0])\nlift_pad();\n\n// Handle attached to base\nhandle();",
    "renders": true
  },
  {
    "tool": "winch",
    "openscad_code": "// Winch Tool - Medium Complexity\n// Basic hand-crank winch with drum and ratchet mechanism\n\n// Parameters\n$fn = 50;  // Smoothness\n\n// Colors\ncolor_frame = [0.2, 0.2, 0.2];\ncolor_handle = [0.8, 0.4, 0.1];\ncolor_gear = [0.5, 0.5, 0.5];\ncolor_cable = [0.1, 0.1, 0.1];\n\n// Main assembly\nmodule winch_assembly() {\n    // Base frame\n    union() {\n        color(color_frame)\n        base_frame();\n        \n        // Drum assembly\n        translate([0, 0, 15])\n            color(color_gear)\n            drum_assembly();\n        \n        // Handle mechanism\n        translate([-40, 0, 30])\n            color(color_handle)\n            handle_assembly();\n        \n        // Ratchet pawl\n        translate([20, 0, 25])\n            color(color_frame)\n            ratchet_pawl();\n    }\n}\n\n// Base frame with mounting holes\nmodule base_frame() {\n    difference() {\n        // Main frame body\n        union() {\n            // Base plate\n            cube([80, 40, 8], center=true);\n            \n            // Side supports\n            translate([-25, 0, 10])\n                cube([10, 30, 20], center=true);\n            translate([25, 0, 10])\n                cube([10, 30, 20], center=true);\n        }\n        \n        // Mounting holes\n        for(x = [-30, 30])\n            for(y = [-15, 15])\n                translate([x, y, 0])\n                    cylinder(h=10, r=2.5, center=true);\n    }\n}\n\n// Cable drum with flanges\nmodule drum_assembly() {\n    union() {\n        // Central drum\n        cylinder(h=35, r=15);\n        \n        // Side flanges\n        translate([0, 0, -2])\n            cylinder(h=5, r=20);\n        translate([0, 0, 32])\n            cylinder(h=5, r=20);\n        \n        // Gear teeth\n        for(i = [0:15:359]) {\n            rotate([0, 0, i])\n                translate([22, 0, 0])\n                    cube([8, 4, 35], center=true);\n        }\n        \n        // Central shaft\n        color(color_frame)\n        cylinder(h=50, r=4);\n    }\n}\n\n// Crank handle with grip\nmodule handle_assembly() {\n    union() {\n        // Main crank arm\n        rotate([0, 90, 0])\n            cylinder(h=35, r=4);\n        \n        // Handle grip\n        translate([0, -25, 0])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=6);\n        \n        // Grip ridges\n        for(i = [0:2:19]) {\n            color([0.6, 0.3, 0.05])\n            translate([0, -25, -10 + i])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r=6.5);\n        }\n        \n        // Connection to drum\n        translate([35, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=8, r=4);\n    }\n}\n\n// Ratchet pawl mechanism\nmodule ratchet_pawl() {\n    union() {\n        // Pawl body\n        rotate([0, 0, -30])\n            cube([15, 8, 10], center=true);\n        \n        // Pawl tip\n        translate([12, 0, 0])\n            rotate([0, 0, -30])\n                cube([5, 6, 6], center=true);\n        \n        // Mounting pin\n        translate([0, 0, -8])\n            cylinder(h=15, r=3);\n    }\n}\n\n// Cable simulation\nmodule cable() {\n    color(color_cable)\n    translate([0, 15, 20])\n        rotate([90, 0, 0])\n            for(i = [0:5:50]) {\n                translate([0, 0, i])\n                    cylinder(h=4, r=1.5);\n            }\n}\n\n// Render the complete winch\nwinch_assembly();\ntranslate([0, 30, 20])\n    cable();",
    "renders": true
  },
  {
    "tool": "crank",
    "openscad_code": "// Crank Tool - Medium Complexity Realistic Style\n// A 3D printable hand crank with ergonomic grip and hex socket interface\n\ncrank_color = \"Silver\";\ngrip_color = \"Black\";\nhex_color = \"SteelBlue\";\n\n// Main crank assembly\nmodule crank_assembly() {\n    // Handle grip\n    color(grip_color) {\n        translate([0, 0, 15]) {\n            difference() {\n                cylinder(h = 30, d = 20, $fn = 32);\n                // Grip texture grooves\n                for(i = [0:5:25]) {\n                    translate([0, 0, i - 1]) {\n                        cylinder(h = 2, d = 18, $fn = 32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Handle shaft\n    color(crank_color) {\n        translate([0, 0, 0]) {\n            cylinder(h = 15, d = 12, $fn = 32);\n        }\n    }\n    \n    // Crank arm\n    translate([0, 0, -5]) {\n        union() {\n            // Main arm\n            rotate([0, 90, 0]) {\n                difference() {\n                    cube([60, 15, 8], center = true);\n                    // Lightening holes\n                    for(i = [-20:20:20]) {\n                        translate([i, 0, 0]) {\n                            cylinder(h = 10, d = 5, center = true);\n                        }\n                    }\n                }\n            }\n            \n            // Reinforcement rib\n            rotate([0, 90, 0]) {\n                translate([0, 0, -6]) {\n                    cube([40, 18, 2], center = true);\n                }\n            }\n        }\n    }\n    \n    // Rotating joint\n    translate([0, 0, -25]) {\n        color(crank_color) {\n            difference() {\n                sphere(d = 12, $fn = 32);\n                // Bearing surface\n                translate([0, 0, -6]) {\n                    cylinder(h = 12, d = 8, $fn = 32);\n                }\n            }\n        }\n    }\n    \n    // Output shaft\n    translate([50, 0, -25]) {\n        color(crank_color) {\n            cylinder(h = 20, d = 10, $fn = 32);\n            \n            // Hex socket interface\n            color(hex_color) {\n                translate([0, 0, 20]) {\n                    difference() {\n                        cylinder(h = 15, d = 10, $fn = 32);\n                        cylinder(h = 16, d = 6, $fn = 6);\n                    }\n                }\n                \n                // Chamfer\n                translate([0, 0, 19]) {\n                    cylinder(h1 = 2, h2 = 0, d1 = 10, d2 = 8, $fn = 32);\n                }\n            }\n        }\n    }\n    \n    // Counterweight\n    translate([-40, 0, -25]) {\n        color(crank_color) {\n            difference() {\n                sphere(d = 15, $fn = 32);\n                // Weight reduction cavity\n                sphere(d = 10, $fn = 32);\n            }\n        }\n    }\n}\n\n// Base mounting bracket\nmodule base_bracket() {\n    color(crank_color) {\n        translate([0, 0, -35]) {\n            difference() {\n                cube([70, 30, 10], center = true);\n                // Mounting holes\n                for(x = [-25:50:25]) {\n                    for(y = [-10:20:10]) {\n                        translate([x, y, 0]) {\n                            cylinder(h = 12, d = 4, center = true);\n                        }\n                    }\n                }\n                \n                // Central bearing hole\n                translate([0, 0, 0]) {\n                    cylinder(h = 12, d = 12, center = true);\n                }\n            }\n        }\n    }\n}\n\n// Add directional arrow marking\nmodule direction_marker() {\n    color(\"Red\") {\n        translate([0, 0, 30]) {\n            linear_extrude(height = 0.5) {\n                text(\"â†’\", size = 5, halign = \"center\", valign = \"center\");\n            }\n        }\n    }\n}\n\n// Assemble complete tool\ncrank_assembly();\ntranslate([0, 0, 0]) base_bracket();\ndirection_marker();",
    "renders": true
  },
  {
    "tool": "handle",
    "openscad_code": "// Adjustable Wrench Handle Tool\n// Realistic style with medium complexity\n\n// Parameters\n$fn = 50;\nhandle_length = 85;\nhandle_diameter = 15;\nhead_width = 25;\nhead_thickness = 8;\njaw_max_open = 20;\njaw_thickness = 6;\n\n// Colors\ncolor_handle = [0.1, 0.1, 0.1];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_grip = [0.2, 0.2, 0.2];\n\n// Main wrench assembly\nmodule wrench() {\n    union() {\n        // Handle with grip pattern\n        color(color_handle)\n        translate([0, 0, -handle_length/2])\n        handle();\n        \n        // Wrench head\n        color(color_metal)\n        translate([0, 0, handle_length/2 + head_thickness/2])\n        wrench_head();\n        \n        // Adjustment mechanism\n        color(color_metal)\n        translate([0, 0, handle_length/2 + head_thickness/2])\n        adjustment_screw();\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    difference() {\n        union() {\n            // Main handle cylinder\n            cylinder(h = handle_length, d = handle_diameter, center = true);\n            \n            // Grip rings\n            for (i = [-handle_length/2 + 5 : 7 : handle_length/2 - 10]) {\n                translate([0, 0, i])\n                cylinder(h = 2, d = handle_diameter + 2, center = true);\n            }\n        }\n        \n        // Grip texture holes\n        for (i = [-handle_length/2 + 3 : 5 : handle_length/2 - 3]) {\n            rotate([0, 90, 0])\n            translate([0, 0, i])\n            cylinder(h = 1, d = 2, center = true);\n        }\n    }\n}\n\n// Wrench head with fixed jaw\nmodule wrench_head() {\n    difference() {\n        union() {\n            // Main head body\n            cube([head_width, head_thickness, head_width], center = true);\n            \n            // Fixed jaw\n            translate([head_width/2 - jaw_thickness, 0, jaw_max_open/2])\n            cube([jaw_thickness, head_thickness, jaw_max_open], center = true);\n            \n            // Reinforcement ridges\n            for (i = [-head_width/4, head_width/4]) {\n                translate([i, 0, -head_width/2 - 5])\n                cube([2, head_thickness, 5], center = true);\n            }\n        }\n        \n        // Movable jaw slot\n        translate([-head_width/2, 0, -jaw_max_open/2 - 2])\n        cube([head_width/2, head_thickness + 1, jaw_max_open + 4], center = true);\n        \n        // Screw hole\n        rotate([90, 0, 0])\n        translate([0, -head_width/2 - 5, 0])\n        cylinder(h = head_width + 10, d = 3, center = true);\n    }\n}\n\n// Adjustment screw mechanism\nmodule adjustment_screw() {\n    // Screw threads\n    for (i = [-5 : 1 : 5]) {\n        rotate([0, 0, i * 30])\n        translate([0, -head_width/2 - 5, 0])\n        cylinder(h = 1, d1 = 3, d2 = 2.8, center = true);\n    }\n    \n    // Screw head\n    translate([0, -head_width/2 - 8, 0])\n    cylinder(h = 3, d = 5, center = true);\n    \n    // Screw slot\n    translate([0, -head_width/2 - 8, 0])\n    rotate([90, 0, 0])\n    cube([3, 0.5, 5], center = true);\n}\n\n// Render the complete wrench\nwrench();",
    "renders": true
  },
  {
    "tool": "grip",
    "openscad_code": "// Realistic Grip Tool - Medium Complexity\n// A locking pliers style grip tool with adjustment mechanism\n\n$fn = 50;\n\n// Main colors\ncolor_handle = [0.2, 0.2, 0.2];        // Dark gray/black handle\ncolor_metal = [0.7, 0.7, 0.75];        // Steel/silver metal\ncolor_grip = [0.1, 0.1, 0.1];          // Black grip surface\ncolor_screw = [0.8, 0.8, 0.8];         // Lighter metal for screw\n\n// Main module\nmodule grip_tool() {\n    // Position the entire tool\n    rotate([0, 0, 45]) {\n        union() {\n            // Left handle assembly\n            translate([-25, 0, 0]) {\n                color(color_handle) handle_assembly();\n            }\n            \n            // Right handle assembly\n            mirror([1, 0, 0]) {\n                color(color_handle) handle_assembly();\n            }\n            \n            // Jaw mechanism\n            color(color_metal) jaw_mechanism();\n            \n            // Adjustment screw\n            translate([0, 0, 8]) {\n                color(color_screw) adjustment_screw();\n            }\n            \n            // Pivot bolt\n            translate([0, 0, 0]) {\n                color(color_metal) pivot_bolt();\n            }\n        }\n    }\n}\n\n// Handle assembly module\nmodule handle_assembly() {\n    // Main handle body\n    difference() {\n        // Handle grip\n        rotate([0, 90, 0]) {\n            cylinder(h=60, r1=6, r2=5);\n        }\n        \n        // Grip pattern grooves\n        for(i = [-20:10:20]) {\n            translate([i, 0, -6]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=1, r=5.5);\n                }\n            }\n        }\n    }\n    \n    // Handle padding\n    difference() {\n        color(color_grip) {\n            rotate([0, 90, 0]) {\n                cylinder(h=50, r=5.5, r2=4.5);\n            }\n        }\n        \n        // Textured grip pattern\n        for(i = [-20:5:20]) {\n            for(j = [-2:2:2]) {\n                translate([i, j, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=0.5, r=0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Jaw mechanism\nmodule jaw_mechanism() {\n    // Left jaw\n    translate([-15, 0, -15]) {\n        difference() {\n            // Main jaw body\n            cube([30, 8, 15]);\n            \n            // Grip teeth\n            for(i = [0:2:12]) {\n                translate([i, 8, 0]) {\n                    cube([2, 1, 15]);\n                }\n            }\n            \n            // Jaw curve\n            translate([15, 0, 0]) {\n                rotate([0, 0, 90]) {\n                    cylinder(h=30, r=8);\n                }\n            }\n        }\n    }\n    \n    // Jaw pivot\n    translate([0, 0, -7.5]) {\n        cylinder(h=15, r=2);\n    }\n}\n\n// Adjustment screw\nmodule adjustment_screw() {\n    // Screw body\n    cylinder(h=20, r=3);\n    \n    // Screw head\n    translate([0, 0, 20]) {\n        cylinder(h=5, r=5);\n    }\n    \n    // Screw threads\n    for(i = [0:2:20]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h=2, r=3.2);\n                cylinder(h=2, r=2.8);\n            }\n        }\n    }\n    \n    // Adjustment knob\n    translate([0, 0, 25]) {\n        difference() {\n            cylinder(h=8, r=6);\n            // Knurling grooves\n            for(i = [0:30:360]) {\n                rotate([0, 0, i]) {\n                    translate([5.5, 0, 0]) {\n                        cube([1, 1, 8]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Pivot bolt\nmodule pivot_bolt() {\n    // Main bolt\n    cylinder(h=15, r=2.5);\n    \n    // Bolt head\n    translate([0, 0, 15]) {\n        cylinder(h=3, r=4);\n    }\n    \n    // Threading\n    for(i = [-7.5:1:7.5]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h=0.5, r=2.6);\n                cylinder(h=0.5, r=2.3);\n            }\n        }\n    }\n}\n\n// Generate the tool\ngrip_tool();",
    "renders": true
  },
  {
    "tool": "knob",
    "openscad_code": "// Realistic Medium-Complexity Knob Tool\n// Approx. 80 mm tall knob with grip ridges and mounting hole\n\n// Color definitions\ncolor_base = [0.2, 0.2, 0.2];      // Dark gray body\ncolor_grip = [0.15, 0.15, 0.15];   // Slightly darker grip\ncolor_highlight = [0.3, 0.3, 0.3]; // Lighter highlight edges\n\n// Main parameters\nknob_diameter = 45;\nknob_height = 25;\ngrip_height = 12;\nshaft_diameter = 12;\nshaft_length = 55;\nmounting_hole_diameter = 6;\nmounting_hole_depth = 35;\n\n// Grip ridge parameters\nnum_ridges = 24;\nridge_width = 1.5;\nridge_height = 1.2;\n\n// Create the complete knob assembly\nmodule knob_tool() {\n    // Main knob body\n    color(color_base)\n    difference() {\n        // Outer body with slight taper\n        cylinder(h=knob_height, d1=knob_diameter, d2=knob_diameter*0.95, $fn=64);\n        \n        // Top chamfer\n        translate([0, 0, knob_height-3])\n            cylinder(h=3, d1=knob_diameter*0.9, d2=knob_diameter, $fn=64);\n        \n        // Mounting hole\n        translate([0, 0, -1])\n            cylinder(h=mounting_hole_depth+1, d=mounting_hole_diameter, $fn=32);\n    }\n    \n    // Grip ridges around circumference\n    color(color_grip)\n    for(i = [0:num_ridges-1]) {\n        rotate([0, 0, i*360/num_ridges])\n            translate([knob_diameter/2 - ridge_width/2 - 1, 0, knob_height-grip_height])\n                cube([ridge_width, ridge_height*2, grip_height], center=true);\n    }\n    \n    // Top surface grip pattern\n    color(color_grip)\n    difference() {\n        // Raised center disc\n        translate([0, 0, knob_height])\n            cylinder(h=2, d=knob_diameter*0.6, $fn=64);\n        \n        // Concentric rings for grip\n        for(r = [knob_diameter*0.15 : knob_diameter*0.08 : knob_diameter*0.55]) {\n            translate([0, 0, knob_height+1.5])\n                cylinder(h=1, d=r, $fn=64);\n        }\n    }\n    \n    // Shaft/collar below knob\n    color(color_highlight)\n    translate([0, 0, -shaft_length])\n        cylinder(h=shaft_length, d=shaft_diameter, $fn=32);\n    \n    // Shaft keyway (D-cut)\n    color(color_highlight)\n    translate([0, -shaft_diameter/2, -shaft_length])\n        cube([shaft_diameter, shaft_diameter/2, shaft_length]);\n    \n    // Reinforcement ribs\n    color(color_base)\n    for(angle = [0, 120, 240]) {\n        rotate([0, 0, angle])\n            translate([0, shaft_diameter/2, -shaft_length/2])\n                cube([4, shaft_diameter/2+2, shaft_length], center=true);\n    }\n    \n    // Index mark on top\n    color([1, 0, 0])  // Red indicator\n    translate([0, knob_diameter*0.35, knob_height+2.5])\n        cube([3, 8, 1], center=true);\n}\n\n// Render the complete tool\nknob_tool();",
    "renders": true
  },
  {
    "tool": "pedal",
    "openscad_code": "// Realistic medium-complexity 3D printable pedal wrench in OpenSCAD\n// Overall length â‰ˆ 90 mm\n\n// Color constants\n$fn = 32;\n\nmodule handle() {\n    color(\"silver\")\n    difference() {\n        // Main handle shaft\n        translate([0,0,8])\n        rotate([90,0,0])\n        cylinder(h=65, r1=5, r2=5.5);\n\n        // Grip knurling\n        for(i = [-30:6:30])\n            translate([i,0,0])\n            rotate([90,0,0])\n            cylinder(h=7, r1=5.4, r2=5.4);\n    }\n\n    // Rubber grip rings\n    color(\"darkgrey\")\n    for(i = [-25:10:25])\n        translate([i,0,9.5])\n        rotate([90,0,0])\n        cylinder(h=3, r1=6, r2=6);\n\n    // End cap\n    color(\"black\")\n    translate([0,0,73.5])\n    rotate([90,0,0])\n    cylinder(h=3, r1=5.8, r2=5.8);\n}\n\nmodule head() {\n    color(\"silver\")\n    union() {\n        // Socket body\n        difference() {\n            translate([-15,0,8])\n            rotate([90,0,0])\n            cylinder(h=18, r1=8, r2=8);\n\n            // 15 mm hex socket\n            translate([-6,0,8])\n            rotate([90,0,0])\n            cylinder(h=20, r1=7.5, r2=7.5);\n        }\n\n        // Wrench jaw\n        difference() {\n            translate([-30,0,8])\n            cube([15,15,8], center=true);\n\n            // Jaw opening\n            translate([-22.5,0,4])\n            cube([15,8,9], center=true);\n        }\n\n        // Reinforcement web\n        translate([-22,0,12])\n        rotate([0,0,45])\n        cube([3,10,3], center=true);\n\n        // Hook spanner pin\n        translate([-22,7.5,8])\n        cylinder(h=2, r1=1.5, r2=1.5);\n    }\n}\n\nmodule markings() {\n    color(\"black\")\n    translate([0,0,9])\n    linear_extrude(height=0.2)\n    text(\"15mm\", size=4, halign=\"center\");\n}\n\n// Assembly\nhandle();\nhead();\nmarkings();",
    "renders": true
  },
  {
    "tool": "switch",
    "openscad_code": "// OpenSCAD Switch Tool - Network Cable Punch Down Tool\n// Medium complexity realistic style\n\n// Overall dimensions\nhandle_length = 70;\nhandle_diameter = 20;\nhead_width = 30;\nhead_length = 40;\nhead_height = 15;\nblade_length = 25;\nblade_width = 5;\nblade_thickness = 1.5;\n\n// Colors\n$fn = 64;\n\nmodule handle_grip() {\n    // Main handle body\n    color(\"blue\") \n    difference() {\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Grip texture - longitudinal grooves\n        for (i = [0:9]) {\n            rotate([0, 0, i * 36])\n            translate([handle_diameter/2 - 1, -1, 0])\n            cube([2, 2, handle_length]);\n        }\n    }\n    \n    // End cap\n    color(\"darkgray\")\n    translate([0, 0, handle_length])\n    cylinder(h=5, d=handle_diameter + 2, center=false);\n}\n\nmodule cutting_blade() {\n    color(\"silver\") {\n        // Main blade\n        translate([0, 0, head_height/2])\n        cube([blade_length, blade_width, blade_thickness], center=true);\n        \n        // Blade tip - sharpened end\n        translate([blade_length/2, 0, head_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=blade_width, d1=blade_thickness*2, d2=0, center=true);\n    }\n}\n\nmodule punch_mechanism() {\n    color(\"silver\") {\n        // Punch pin\n        translate([0, 0, head_height/2])\n        cube([head_length/3, head_width/3, head_height], center=true);\n    }\n    \n    color(\"black\") {\n        // Spring cavity\n        translate([0, 0, head_height/2])\n        cube([head_length/3 + 2, head_width/3 + 2, head_height - 2], center=true);\n    }\n}\n\nmodule tool_head() {\n    color(\"red\") {\n        // Main head body\n        translate([0, 0, 0])\n        cube([head_length, head_width, head_height], center=true);\n        \n        // Rounded edges\n        translate([head_length/2, 0, head_height/2])\n        rotate([0, 90, 0])\n        cylinder(h=head_width, d=head_height, center=true);\n        \n        translate([-head_length/2, 0, head_height/2])\n        rotate([0, 90, 0])\n        cylinder(h=head_width, d=head_height, center=true);\n    }\n    \n    // Add cutting blade on one side\n    translate([head_length/2, 0, 0])\n    cutting_blade();\n    \n    // Add punch mechanism\n    punch_mechanism();\n    \n    // Wire guide channel\n    color(\"red\") {\n        translate([0, 0, -head_height/2 - 1])\n        cube([head_length, head_width/4, 2], center=true);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0])\nunion() {\n    // Handle\n    handle_grip();\n    \n    // Head assembly\n    translate([0, 0, handle_length])\n    rotate([90, 0, 0])\n    tool_head();\n}\n\n// Safety latch\ncolor(\"black\") {\n    translate([handle_diameter/2, 0, handle_length - 10])\n    cube([3, 10, 5], center=true);\n}\n\n// Manufacturer marking\ncolor(\"white\") {\n    translate([handle_diameter/2 + 1, 0, handle_length/2])\n    rotate([0, 90, 0])\n    linear_extrude(height=0.5)\n    text(\"CAT5E\", size=4, center=true);\n}",
    "renders": true
  },
  {
    "tool": "valve",
    "openscad_code": "// Valve Tool - Realistic Style with Medium Complexity\n\n// Overall dimensions\ntool_length = 80;\nhandle_length = 40;\nhandle_diameter = 12;\nwrench_size = 8;\nwrench_length = 15;\ngrip_diameter = 16;\ngrip_length = 25;\n\n// Colors\nhandle_color = [0.2, 0.2, 0.2];  // Dark gray\ngrip_color = [0.1, 0.1, 0.1];    // Black\nmetal_color = [0.7, 0.7, 0.7];   // Silver\n\nmodule valve_tool() {\n    union() {\n        // Main handle shaft\n        color(handle_color)\n        translate([0, 0, tool_length/2])\n            cylinder(h=tool_length, d=handle_diameter, $fn=32);\n        \n        // Grip section with knurling\n        color(grip_color)\n        translate([0, 0, tool_length - grip_length/2])\n            cylinder(h=grip_length, d=grip_diameter, $fn=32);\n        \n        // Knurling pattern on grip\n        color(grip_color)\n        for(i = [0:9]) {\n            rotate([0, 0, i * 36])\n                translate([grip_diameter/2 - 1, 0, tool_length - grip_length])\n                rotate([90, 0, 0])\n                    cylinder(h=grip_length, d=1.5, $fn=8);\n        }\n        \n        // Hexagonal wrench end\n        color(metal_color)\n        translate([0, 0, wrench_length/2])\n            cylinder(h=wrench_length, d=wrench_size * 1.05, $fn=6);\n        \n        // Valve wheel gripper\n        color(metal_color)\n        translate([0, 0, 0])\n        union() {\n            // Main body\n            cylinder(h=10, d=20, $fn=32);\n            \n            // Two prongs for valve wheel\n            translate([10, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=4, $fn=16);\n            \n            translate([-10, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h=8, d=4, $fn=16);\n            \n            // Center hole for valve stem\n            translate([0, 0, -1])\n                cylinder(h=12, d=6, $fn=32);\n        }\n        \n        // Reinforcement ring\n        color(metal_color)\n        translate([0, 0, 15])\n            cylinder(h=3, d=24, $fn=32);\n        \n        // Hanging hole\n        color(handle_color)\n        translate([0, handle_diameter/2 + 3, tool_length - 8])\n        rotate([90, 0, 0])\n            cylinder(h=handle_diameter + 6, d=6, $fn=32);\n        \n        difference() {\n            translate([0, handle_diameter/2 + 3, tool_length - 8])\n                rotate([90, 0, 0])\n                    cylinder(h=handle_diameter + 6, d=3, $fn=32);\n        }\n    }\n}\n\n// Render the tool\nvalve_tool();",
    "renders": true
  },
  {
    "tool": "cock",
    "openscad_code": "// Realistic screwdriver - medium complexity\n// Overall length: 90mm, handle diameter: 25mm, shaft diameter: 6mm\n\n$fn = 50;\n\n// Main assembly\nunion() {\n    // Handle\n    color([0.1, 0.1, 0.1]) \n    handle();\n    \n    // Shaft\n    color([0.8, 0.8, 0.8])\n    translate([0, 0, 55]) \n    shaft();\n    \n    // Tip\n    color([0.7, 0.7, 0.7])\n    translate([0, 0, 105])\n    tip();\n}\n\nmodule handle() {\n    difference() {\n        // Main handle body\n        cylinder(h=50, d1=25, d2=22);\n        \n        // Grip grooves\n        for(i = [5:5:45]) {\n            translate([0, 0, i])\n            rotate([0, 0, 45])\n            linear_extrude(height=2)\n            polygon(points=[[-11, -11], [11, -11], [11, 11], [-11, 11]]);\n        }\n        \n        // Hex socket at top\n        translate([0, 0, 48])\n        cylinder(h=5, d=8, $fn=6);\n    }\n    \n    // Torx markings\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([0, 0, 48])\n        rotate([90, 0, 0])\n        cylinder(h=3, d=1, center=true);\n    }\n}\n\nmodule shaft() {\n    difference() {\n        cylinder(h=50, d=6);\n        \n        // Flat section\n        translate([-3, -3, 0])\n        cube([6, 3, 50]);\n    }\n}\n\nmodule tip() {\n    // Phillips #2 tip\n    difference() {\n        cylinder(h=10, d=6);\n        \n        // Cross grooves\n        translate([-0.5, -3, 0])\n        cube([1, 6, 10]);\n        translate([-3, -0.5, 0])\n        cube([6, 1, 10]);\n    }\n}",
    "renders": true
  },
  {
    "tool": "petcock",
    "openscad_code": "// Petcock Tool - Realistic Style with Medium Complexity\n// Size: ~70mm total length\n\n// Color definitions\n$fn = 30;\n\n// Main body module\nmodule petcock_body() {\n    color(\"silver\")\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 35, d1 = 18, d2 = 22, center = false);\n        \n        // Thread relief\n        translate([0, 0, 5])\n            cylinder(h = 25, d = 16);\n            \n        // Top chamfer\n        translate([0, 0, 30])\n            cylinder(h = 5, d1 = 16, d2 = 22);\n    }\n}\n\n// Handle grip module\nmodule handle_grip() {\n    color(\"darkgrey\")\n    translate([0, 0, 35])\n    difference() {\n        cylinder(h = 15, d = 22);\n        \n        // Knurling pattern\n        for (i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n            translate([9, 0, 5])\n            cube([3, 2, 10]);\n        }\n    }\n}\n\n// Lever arm\nmodule lever_arm() {\n    color(\"silver\")\n    union() {\n        // Main lever\n        translate([0, 0, 50])\n        rotate([90, 0, 0])\n        cylinder(h = 30, d = 8);\n        \n        // Grip end\n        translate([0, 0, 80])\n        rotate([90, 0, 0])\n        sphere(d = 12);\n        \n        // Reinforcement rib\n        translate([0, 0, 65])\n        rotate([90, 0, 0])\n        cube([20, 8, 3], center = true);\n    }\n}\n\n// Petcock valve stem\nmodule valve_stem() {\n    color(\"silver\")\n    translate([0, 0, 10])\n    cylinder(h = 20, d = 6);\n}\n\n// Port openings\nmodule ports() {\n    color(\"silver\")\n    union() {\n        // Inlet port\n        rotate([0, 90, 0])\n        translate([0, 9, 0])\n        cylinder(h = 15, d = 8);\n        \n        // Outlet port\n        rotate([0, -90, 0])\n        translate([0, 9, 0])\n        cylinder(h = 15, d = 8);\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    color(\"silver\")\n    difference() {\n        // Bracket body\n        translate([0, -18, 12])\n        cube([25, 6, 16], center = true);\n        \n        // Mounting holes\n        translate([8, -18, 12])\n        rotate([90, 0, 0])\n        cylinder(h = 7, d = 4);\n        \n        translate([-8, -18, 12])\n        rotate([90, 0, 0])\n        cylinder(h = 7, d = 4);\n    }\n}\n\n// Assembly\npetcock_body();\nhandle_grip();\nlever_arm();\nvalve_stem();\nports();\nmounting_bracket();\n\n// Flow direction indicator arrow\ncolor(\"red\")\ntranslate([0, 0, 40])\nrotate([0, 0, 45])\nlinear_extrude(height = 1)\npolygon(points=[[0,0], [5,2], [3,0], [5,-2]]);",
    "renders": true
  },
  {
    "tool": "spigot",
    "openscad_code": "// Spigot Tool - Medium Complexity Realistic Style\n// Overall dimensions: ~80mm long, ~60mm tall\n\n$fn = 50;\n\n// Main colors\ncolor(\"silver\") {\n    // Handle body\n    difference() {\n        union() {\n            // Main handle cylinder\n            cylinder(h=60, d=25, center=false);\n            \n            // Grip rings\n            for(i=[5:10:50]) {\n                translate([0, 0, i])\n                    cylinder(h=3, d=28, center=false);\n            }\n            \n            // Base flare\n            translate([0, 0, 0])\n                cylinder(h=5, d1=30, d2=25, center=false);\n        }\n        \n        // Handle hollow\n        translate([0, 0, -5])\n            cylinder(h=70, d=15, center=false);\n    }\n}\n\n// Top cap with logo\ncolor(\"darkgray\") {\n    translate([0, 0, 60])\n        difference() {\n            cylinder(h=8, d=26, center=false);\n            translate([0, 0, -1])\n                cylinder(h=10, d=20, center=false);\n        }\n    \n    // Logo engraving\n    translate([0, 0, 66])\n        rotate([180, 0, 0])\n            linear_extrude(height=1)\n                text(\"SPIGOT\", size=8, halign=\"center\", valign=\"center\");\n}\n\n// Valve mechanism\ncolor(\"silver\") {\n    translate([0, 0, 30])\n        rotate([90, 0, 0])\n            cylinder(h=40, d=18, center=true);\n    \n    // Valve threads\n    translate([0, -20, 30])\n        rotate([90, 0, 0])\n            cylinder(h=10, d1=18, d2=16, center=true);\n}\n\n// Outlet spout\ncolor(\"silver\") {\n    translate([0, -30, 30])\n        rotate([90, 0, 0])\n            cylinder(h=25, d1=12, d2=8, center=true);\n    \n    // Spout tip\n    translate([0, -45, 30])\n        rotate([90, 0, 0])\n            cylinder(h=5, d=8, center=true);\n}\n\n// Control lever\ncolor(\"black\") {\n    translate([0, 0, 38])\n        rotate([90, 0, 0])\n            cylinder(h=25, d=6, center=true);\n    \n    // Lever handle\n    translate([0, -20, 38])\n        rotate([0, 0, 90])\n            cube([15, 8, 4], center=true);\n    \n    // Grip texture\n    for(i=[-6:3:6]) {\n        translate([i, -20, 38])\n            rotate([0, 0, 90])\n                cube([2, 8, 0.5], center=true);\n    }\n}\n\n// Mounting bracket\ncolor(\"gray\") {\n    translate([0, 10, 15])\n        rotate([90, 0, 0])\n            difference() {\n                // Main bracket\n                cube([30, 15, 8], center=true);\n                \n                // Mounting holes\n                for(i=[-10:20:10]) {\n                    translate([i, 0, 0])\n                        cylinder(h=10, d=5, center=true);\n                }\n            }\n}\n\n// Washer detail\ncolor(\"lightblue\") {\n    translate([0, -30, 30])\n        rotate([90, 0, 0])\n            difference() {\n                cylinder(h=2, d=14, center=true);\n                cylinder(h=3, d=10, center=true);\n            }\n}\n\n// Flow direction indicator\ncolor(\"red\") {\n    translate([0, -40, 35])\n        rotate([0, 90, 0])\n            cylinder(h=3, d=3, center=true);\n    \n    // Arrow head\n    translate([0, -42, 35])\n        rotate([0, 90, 0])\n            cylinder(h=2, d1=3, d2=0, center=true);\n}",
    "renders": true
  },
  {
    "tool": "jet",
    "openscad_code": "// Jet Tool - Realistic Style\n// A compact jet flame lighter tool with safety features\n\n// Main parameters\n$fn = 32;\nbody_length = 80;\nbody_diameter = 20;\nnozzle_length = 15;\nnozzle_diameter = 8;\ntank_length = 50;\ntank_diameter = 18;\ntrigger_width = 12;\ntrigger_height = 25;\nsafety_width = 8;\nsafety_height = 6;\nwindow_height = 8;\nwindow_width = 15;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_metal = [0.8, 0.8, 0.8];\ncolor_red = [0.8, 0.2, 0.2];\ncolor_orange = [0.9, 0.5, 0.1];\ncolor_blue = [0.2, 0.3, 0.8];\ncolor_clear = [0.8, 0.8, 0.9, 0.5];\n\n// Main assembly\nmodule jet_tool() {\n    // Main body cylinder\n    color(color_body)\n    cylinder(h = body_length, d = body_diameter, center = false);\n    \n    // Fuel tank section\n    color(color_blue)\n    translate([0, 0, body_length - tank_length])\n    cylinder(h = tank_length + 2, d = tank_diameter, center = false);\n    \n    // Fuel level window\n    color(color_clear)\n    translate([tank_diameter/2 + 0.5, 0, body_length - tank_length/2])\n    cube([1, window_width, window_height], center = true);\n    \n    // Nozzle assembly\n    color(color_metal)\n    translate([0, 0, body_length])\n    cylinder(h = nozzle_length, d = nozzle_diameter, center = false);\n    \n    // Flame guard\n    color(color_metal)\n    translate([0, 0, body_length + nozzle_length - 2])\n    cylinder(h = 8, d1 = nozzle_diameter + 2, d2 = nozzle_diameter + 6, center = false);\n    \n    // Trigger mechanism\n    color(color_red)\n    translate([body_diameter/2 + 2, 0, body_length/2])\n    rotate([0, 90, 0])\n    cylinder(h = trigger_width, d = trigger_height, center = true);\n    \n    // Trigger guard\n    color(color_body)\n    difference() {\n        translate([body_diameter/2 + 2, 0, body_length/2 - 15])\n        cube([5, trigger_width + 4, 30], center = true);\n        \n        translate([body_diameter/2 + 4, 0, body_length/2 - 15])\n        cube([6, trigger_width + 2, 28], center = true);\n    }\n    \n    // Safety switch\n    color(color_orange)\n    translate([-body_diameter/2 - 1, 0, body_length - 25])\n    cube([safety_width, safety_height, 4], center = true);\n    \n    // Refill valve\n    color(color_metal)\n    translate([0, 0, 2])\n    cylinder(h = 4, d = 6, center = false);\n    \n    // Grip texture rings\n    for(i = [1:5:body_length - 20]) {\n        color(color_body)\n        translate([0, 0, i])\n        cylinder(h = 2, d = body_diameter + 1, center = false);\n    }\n    \n    // Air intake holes\n    for(angle = [0:60:359]) {\n        color(color_body)\n        translate([0, 0, body_length/2])\n        rotate([0, 0, angle])\n        translate([tank_diameter/2 - 1, 0, 0])\n        cylinder(h = 5, d = 3, center = true);\n    }\n    \n    // Adjustment wheel\n    color(color_metal)\n    translate([0, body_diameter/2 + 3, body_length - 10])\n    rotate([90, 0, 0])\n    cylinder(h = 6, d = 8, center = true);\n    \n    // Serrated wheel surface\n    for(i = [0:15:359]) {\n        color(color_metal)\n        translate([0, body_diameter/2 + 3, body_length - 10])\n        rotate([90, 0, i])\n        translate([4, 0, 0])\n        cube([0.5, 1, 6], center = true);\n    }\n}\n\n// Render the tool\njet_tool();",
    "renders": true
  },
  {
    "tool": "orifice",
    "openscad_code": "// Medium-complexity 3D-printable orifice tool (tapered plug gauge with handle)\n// Overall length â‰ˆ 85 mm, max Ã˜ â‰ˆ 25 mm, safe for FDM printing\n\n$fn = 48;                // smooth curves\nhandle_d = 14;           // comfortable grip\nhandle_l = 55;\ngauge_l = 25;\nmin_orifice_d = 6;       // small end\nmax_orifice_d = 12;      // large end\nwall = 1.8;              // sturdy walls\n\n// ----- Colors -----\ncolor_handle  = \"SlateGray\";\ncolor_gauge   = \"Silver\";\ncolor_mark    = \"Black\";\n\n// ----- Main assembly -----\nunion() {\n    // ergonomic handle\n    color(color_handle)\n    translate([0, 0, -handle_l])\n    handle();\n\n    // measurement gauge\n    color(color_gauge)\n    gauge();\n\n    // engraved size marks\n    color(color_mark)\n    marks();\n}\n\n// ----- Modules -----\nmodule handle() {\n    difference() {\n        union() {\n            // main grip cylinder\n            cylinder(h = handle_l, d = handle_d);\n\n            // flared end stop\n            translate([0, 0, -2])\n            cylinder(h = 4, d1 = handle_d + 4, d2 = handle_d);\n        }\n\n        // knurled grip pattern (subtractive)\n        rotate([0, 0, 0])\n        for (i = [0:15])\n            rotate([0, 0, i * 22.5])\n            translate([handle_d/2 - 0.5, 0, -handle_l + 5])\n            cube([wall + 1, 0.6, handle_l - 10], center = true);\n    }\n}\n\nmodule gauge() {\n    // tapered plug\n    cylinder(h = gauge_l, d1 = max_orifice_d, d2 = min_orifice_d);\n\n    // small collar / datum\n    translate([0, 0, -1])\n    cylinder(h = 2, d = max_orifice_d + 3);\n}\n\nmodule marks() {\n    // engraved size indicators (0.5 mm deep)\n    depth = 0.5;\n\n    // \"6\" mark at small end\n    translate([0, min_orifice_d/2 + depth/2, gauge_l - 3])\n    rotate([90, 0, 0])\n    linear_extrude(height = depth, center = true)\n    text(\"6\", size = 3, halign = \"center\", valign = \"center\");\n\n    // \"12\" mark at large end\n    translate([0, max_orifice_d/2 + depth/2, 3])\n    rotate([90, 0, 0])\n    linear_extrude(height = depth, center = true)\n    text(\"12\", size = 3, halign = \"center\", valign = \"center\");\n}",
    "renders": true
  },
  {
    "tool": "vent",
    "openscad_code": "// Vent Tool - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm length, ~20mm diameter handle\n\n// Main colors\nhandle_color = \"DarkSlateGray\";\nblade_color = \"Silver\";\ngrip_color = \"Black\";\n\n// Handle with ergonomic grip\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        translate([0, 0, 35])\n            cylinder(h=70, r1=10, r2=8, $fn=32);\n        \n        // Rubber grip rings\n        color(grip_color)\n        for(i=[0:4]) {\n            translate([0, 0, 25 + i*12])\n                cylinder(h=8, r=11, $fn=32);\n        }\n        \n        // End cap\n        translate([0, 0, 0])\n            cylinder(h=5, r=9, $fn=32);\n    }\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    color(blade_color) {\n        // Main blade shaft\n        translate([0, 0, 105])\n            cylinder(h=15, r=3, $fn=16);\n        \n        // Tapered blade\n        translate([0, 0, 115])\n            cylinder(h=25, r1=3, r2=0.5, $fn=16);\n        \n        // Blade tip detail\n        translate([0, 0, 138])\n            sphere(r=0.5);\n        \n        // Safety collar\n        translate([0, 0, 100])\n            cylinder(h=5, r=6, $fn=32);\n    }\n}\n\n// Vent cutting head\nmodule vent_head() {\n    color(blade_color) {\n        // Main head body\n        translate([0, 0, 120])\n            rotate([0, 0, 0])\n                cylinder(h=8, r=5, $fn=6);\n        \n        // Cutting teeth\n        for(angle=[0:60:359]) {\n            rotate([0, 0, angle])\n                translate([4.5, 0, 120])\n                    cube([3, 1, 8], center=true);\n        }\n        \n        // Center spike\n        translate([0, 0, 128])\n            cylinder(h=5, r=1, $fn=16);\n    }\n}\n\n// Tool markings\nmodule markings() {\n    color(\"White\")\n    translate([0, -10.1, 50])\n        rotate([0, 90, 0])\n            linear_extrude(0.5)\n                text(\"VENT\", size=4, halign=\"center\");\n}\n\n// Assembly\nunion() {\n    handle();\n    blade_assembly();\n    vent_head();\n    markings();\n}",
    "renders": true
  },
  {
    "tool": "flue",
    "openscad_code": "// Flue tool for cleaning fireplace flues\n// Realistic style, medium complexity, 3D printable\n\n// Main dimensions\nhandle_length = 80;\nhandle_diameter = 12;\nbrush_length = 40;\nbrush_diameter = 25;\nspike_length = 15;\nspike_diameter = 3;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Handle with grip texture\nmodule handle() {\n    color(\"SaddleBrown\")\n    union() {\n        // Main handle tube\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            translate([0, 0, -1])\n            cylinder(h=handle_length+2, d=handle_diameter-wall_thickness*2, $fn=32);\n        }\n        \n        // Grip rings\n        for(i = [5:10:handle_length-15]) {\n            translate([0, 0, i])\n            cylinder(h=2, d=handle_diameter+2, $fn=32);\n        }\n        \n        // End cap\n        translate([0, 0, handle_length])\n    cylinder(h=4, d=handle_diameter, $fn=32);\n    }\n}\n\n// Wire brush head\nmodule brush_head() {\n    color(\"DimGray\")\n    union() {\n        // Brush base\n        difference() {\n            cylinder(h=brush_length, d=brush_diameter, $fn=32);\n            translate([0, 0, -1])\n            cylinder(h=brush_length+2, d=brush_diameter-wall_thickness*2, $fn=32);\n        }\n        \n        // Brush bristles (simplified as cylinders)\n        for(angle = [0:30:330]) {\n            for(z = [5:5:brush_length-5]) {\n                rotate([0, 0, angle])\n                translate([brush_diameter/2 - 2, 0, z])\n                cylinder(h=8, d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Cleaning spike\nmodule spike() {\n    color(\"Silver\")\n    union() {\n        // Spike base\n        cylinder(h=5, d=6, $fn=16);\n        \n        // Tapered spike\n        translate([0, 0, 5])\n        cylinder(h=spike_length, d1=spike_diameter, d2=1, $fn=16);\n    }\n}\n\n// Hanger loop\nmodule hanger() {\n    color(\"SaddleBrown\")\n    rotate([90, 0, 0])\n    difference() {\n        torus(6, 2, $fn=32);\n        translate([0, 0, -2])\n        cube([15, 2, 4], center=true);\n    }\n}\n\n// Helper module for torus\nmodule torus(outer, inner, fn=32) {\n    rotate_extrude($fn=fn)\n    translate([outer, 0, 0])\n    circle(r=inner, $fn=fn);\n}\n\n// Assembly\nunion() {\n    // Main handle\n    handle();\n    \n    // Brush at one end\n    translate([0, 0, handle_length])\n    brush_head();\n    \n    // Spike at other end\n    translate([0, 0, 0])\n    rotate([180, 0, 0])\n    spike();\n    \n    // Hanger loop on side\n    translate([handle_diameter/2+6, 0, handle_length/2])\n    hanger();\n}",
    "renders": true
  },
  {
    "tool": "duct",
    "openscad_code": "// Duct tool for realistic manipulation and cutting\n// Overall length 80mm, designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main body of the duct tool\nmodule duct_tool() {\n    color([0.2, 0.2, 0.2]) {\n        // Handle grip\n        translate([0, 0, 0]) {\n            cylinder(h = 35, d = 12, center = true);\n        }\n        \n        // Handle transition\n        translate([0, 0, 22]) {\n            cylinder(h = 8, d1 = 12, d2 = 8, center = true);\n        }\n        \n        // Shaft\n        translate([0, 0, 40]) {\n            cylinder(h = 35, d = 8, center = true);\n        }\n        \n        // Working head base\n        translate([0, 0, 58]) {\n            cylinder(h = 12, d = 15, center = true);\n        }\n    }\n    \n    // Grip texture rings\n    color([0.3, 0.3, 0.3]) {\n        for (i = [-12:5:12]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h = 2.5, d = 13);\n                    cylinder(h = 3, d = 11);\n                }\n            }\n        }\n    }\n    \n    // Cutting blade assembly\n    color([0.7, 0.7, 0.7]) {\n        // Main blade holder\n        translate([0, 0, 65]) {\n            cylinder(h = 8, d1 = 15, d2 = 12, center = true);\n        }\n        \n        // Blade mount\n        translate([0, 0, 69]) {\n            cube([20, 2, 8], center = true);\n        }\n        \n        // Actual cutting blade\n        color([0.9, 0.9, 0.9]) {\n            translate([0, 0, 72]) {\n                cube([18, 0.5, 6], center = true);\n            }\n            \n            // Blade tip\n            translate([9.5, 0, 72]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 0.5, d1 = 6, d2 = 0, center = true);\n                }\n            }\n            translate([-9.5, 0, 72]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 0.5, d1 = 6, d2 = 0, center = true);\n                }\n            }\n        }\n    }\n    \n    // Safety guard\n    color([0.4, 0.4, 0.4]) {\n        // Guard base\n        translate([0, 0, 63]) {\n            difference() {\n                cylinder(h = 4, d = 18, center = true);\n                cylinder(h = 5, d = 16, center = true);\n            }\n        }\n        \n        // Guard prongs\n        for (angle = [0:120:240]) {\n            rotate([0, 0, angle]) {\n                translate([8, 0, 65]) {\n                    cube([12, 2, 2], center = true);\n                }\n            }\n        }\n    }\n    \n    // Tool markings\n    color([0.1, 0.1, 0.1]) {\n        // Scale markings on shaft\n        for (i = [0:5:30]) {\n            translate([0, 4.2, 25 + i]) {\n                cube([0.5, 0.2, 0.5], center = true);\n            }\n        }\n        \n        // Manufacturer text (simplified as grooves)\n        translate([0, -6.2, 15]) {\n            rotate([0, 90, 0]) {\n                cube([8, 0.3, 2], center = true);\n            }\n        }\n    }\n}\n\n// Render the complete tool\nduct_tool();",
    "renders": true
  },
  {
    "tool": "pipe",
    "openscad_code": "// Pipe Tool - Realistic Style, Medium Complexity\n// A plumber's pipe wrench with adjustable jaw mechanism\n\n$fn = 50;  // Smooth curves\n\n// Main colors\ncolor_handle = \"SaddleBrown\";\ncolor_metal = \"Silver\";\ncolor_grip = \"Black\";\n\n// Overall dimensions (mm)\nhandle_len = 80;\nhandle_diam = 12;\njaw_width = 20;\njaw_height = 15;\n\nmodule handle() {\n    // Main handle with grip texture\n    color(color_handle)\n    difference() {\n        // Main handle cylinder\n        cylinder(h = handle_len, d = handle_diam, center = true);\n        \n        // Grip rings\n        for (i = [-handle_len/2 + 5 : 8 : handle_len/2 - 5]) {\n            translate([0, 0, i])\n                cylinder(h = 2, d = handle_diam - 2, center = true);\n        }\n    }\n    \n    // End grip cap\n    color(color_grip)\n    translate([0, 0, handle_len/2])\n        cylinder(h = 5, d = handle_diam + 2, $fn = 6);\n}\n\nmodule head() {\n    // Fixed jaw\n    color(color_metal) {\n        translate([0, 0, handle_len/2 + 10])\n            rotate([90, 0, 0])\n                cube([jaw_width, jaw_height, 25], center = true);\n        \n        // Teeth on fixed jaw\n        for (i = [-8 : 4 : 8]) {\n            translate([i, jaw_height/2, handle_len/2 + 15])\n                cube([2, 2, 8]);\n        }\n        \n        // Connecting bridge\n        translate([0, 0, handle_len/2 + 5])\n            rotate([90, 0, 0])\n                cube([10, 8, 20], center = true);\n    }\n}\n\nmodule adjustable_jaw() {\n    // Moving jaw with screw mechanism\n    color(color_metal) {\n        // Jaw body\n        translate([0, -jaw_height - 10, handle_len/2 + 15])\n            rotate([90, 0, 0])\n                cube([jaw_width, jaw_height, 20], center = true);\n        \n        // Teeth on adjustable jaw\n        for (i = [-8 : 4 : 8]) {\n            translate([i, -jaw_height - 10 - jaw_height/2, handle_len/2 + 15])\n                cube([2, 2, 8]);\n        }\n        \n        // Adjustment screw\n        translate([0, -jaw_height - 20, handle_len/2 + 5])\n            rotate([0, 90, 0])\n                cylinder(h = 30, d = 5);\n        \n        // Screw head\n        translate([0, -jaw_height - 20, handle_len/2 - 10])\n            rotate([0, 90, 0])\n                cylinder(h = 8, d = 10, $fn = 6);\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    head();\n    adjustable_jaw();\n    \n    // Reinforcement plate\n    color(color_metal)\n    translate([0, 0, handle_len/2 + 5])\n        rotate([90, 0, 0])\n            cube([12, 5, 15], center = true);\n}",
    "renders": true
  },
  {
    "tool": "tube",
    "openscad_code": "// Tube tool - realistic style with medium complexity\n// A metal tube with threaded ends and hexagonal flats for tightening\n\n// Overall dimensions\ntube_length = 80;\ntube_diameter = 25;\nwall_thickness = 2.5;\n\n// Thread parameters\nthread_pitch = 2;\nthread_depth = 1;\nthread_segments = 32;\n\n// Hexagonal flats\nhex_size = 32;\nhex_height = 10;\n\n// Grip texture parameters\ngrip_ridges = 12;\ngrip_width = 2;\ngrip_depth = 0.5;\n\nmodule tube_body() {\n    difference() {\n        // Main tube cylinder\n        cylinder(h=tube_length, d=tube_diameter, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=tube_length+2, d=tube_diameter-2*wall_thickness, $fn=64);\n    }\n}\n\nmodule external_threads(start_z, direction=1) {\n    // Create helical threads on outside\n    for (i = [0:thread_segments-1]) {\n        angle = i * 360 / thread_segments;\n        translate([0, 0, start_z + direction * i * thread_pitch / thread_segments]) {\n            rotate([0, 0, angle]) {\n                translate([tube_diameter/2, 0, 0]) {\n                    cube([thread_depth, thread_pitch/2, thread_pitch/2], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule hex_flats() {\n    // Top hexagonal nut\n    translate([0, 0, tube_length - hex_height/2])\n        cylinder(h=hex_height, d=hex_size, $fn=6);\n    \n    // Bottom hexagonal nut\n    translate([0, 0, hex_height/2])\n        cylinder(h=hex_height, d=hex_size, $fn=6);\n}\n\nmodule grip_texture() {\n    // Add grip ridges between hex flats\n    for (i = [0:grip_ridges-1]) {\n        rotate([0, 0, i * 360 / grip_ridges]) {\n            translate([tube_diameter/2 - grip_depth/2, 0, tube_length/2]) {\n                cube([grip_depth, grip_width, tube_length - 2*hex_height - 4], center=true);\n            }\n        }\n    }\n}\n\nmodule chamfer_edges() {\n    // Top chamfer\n    translate([0, 0, tube_length-1])\n        cylinder(h=2, d1=tube_diameter, d2=tube_diameter-2, $fn=64);\n    \n    // Bottom chamfer\n    translate([0, 0, 1])\n        cylinder(h=2, d1=tube_diameter-2, d2=tube_diameter, $fn=64);\n}\n\n// Main assembly\ncolor(\"silver\") union() {\n    tube_body();\n    \n    // Add hexagonal flats\n    color(\"gray40\") hex_flats();\n    \n    // Add grip texture\n    color(\"gray60\") grip_texture();\n    \n    // Add chamfers for printability\n    color(\"silver\") chamfer_edges();\n    \n    // Add external threads\n    color(\"gray50\") {\n        external_threads(hex_height, 1);\n        external_threads(tube_length - hex_height - thread_pitch*3, -1);\n    }\n}",
    "renders": true
  },
  {
    "tool": "channel",
    "openscad_code": "// OpenSCAD Channel Tool - Realistic Medium Complexity\n// A 3D printable channel tool with handle and cutting blade\n\n// Overall dimensions\ntool_length = 85;\ntool_width = 25;\ntool_height = 12;\nhandle_length = 45;\nchannel_width = 6;\nchannel_depth = 8;\n\n// Colors\ncolor_handle = [0.2, 0.2, 0.2];\ncolor_shaft = [0.7, 0.7, 0.7];\ncolor_blade = [0.8, 0.8, 0.8];\ncolor_grip = [0.1, 0.1, 0.1];\n\n// Handle module with grip pattern\nmodule handle() {\n    color(color_handle)\n    difference() {\n        // Main handle body\n        translate([0, 0, tool_height/2])\n            cube([handle_length, tool_width, tool_height], center=true);\n        \n        // Finger grooves\n        for (i = [-1, 0, 1]) {\n            translate([i * 8, 0, tool_height/2 - 1])\n                cube([6, tool_width + 2, 2], center=true);\n        }\n        \n        // Thumb rest\n        translate([handle_length/2 - 8, tool_width/2 + 1, 0])\n            cube([12, 2, tool_height - 2], center=true);\n    }\n    \n    // Grip texture rings\n    color(color_grip)\n    for (i = [-15, -10, -5, 0, 5, 10, 15]) {\n        translate([i, 0, tool_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=tool_width + 2, r=tool_height/2 + 0.5, $fn=32);\n    }\n}\n\n// Shaft module with reinforcement\nmodule shaft() {\n    color(color_shaft)\n    union() {\n        // Main shaft\n        translate([handle_length/2 + (tool_length - handle_length)/2, 0, tool_height/2])\n            cube([tool_length - handle_length, tool_width - 4, tool_height - 2], center=true);\n        \n        // Reinforcement ribs\n        for (i = [0:5:20]) {\n            translate([handle_length + 5 + i, 0, tool_height/2 - 2])\n                cube([2, tool_width - 6, 4], center=true);\n        }\n    }\n}\n\n// Blade module with channel\nmodule blade() {\n    color(color_blade)\n    difference() {\n        // Main blade body\n        translate([tool_length - 8, 0, tool_height/2])\n            cube([16, tool_width - 2, tool_height - 1], center=true);\n        \n        // Channel cutout\n        translate([tool_length - 8, 0, tool_height/2 + channel_depth/2])\n            cube([12, channel_width, channel_depth], center=true);\n        \n        // Blade bevel\n        translate([tool_length - 2, 0, tool_height/2 - 3])\n            rotate([0, 45, 0])\n                cube([8, tool_width, 6], center=true);\n    }\n    \n    // Cutting edge\n    color([0.9, 0.9, 0.9])\n    translate([tool_length - 1, 0, tool_height/2 - channel_depth/2])\n        cube([2, channel_width + 1, 0.5], center=true);\n}\n\n// Assembly\nunion() {\n    handle();\n    shaft();\n    blade();\n}\n\n// Mounting hole\ncolor([0.3, 0.3, 0.3])\ntranslate([handle_length/2 - 15, 0, tool_height/2])\n    rotate([90, 0, 0])\n        cylinder(h=tool_width, r=3, $fn=32);\n\n// Size reference cube (comment out for printing)\n// %translate([0, 0, 20]) cube([100, 100, 100], center=true);",
    "renders": true
  },
  {
    "tool": "gutter",
    "openscad_code": "// Gutter cleaning tool - realistic style, medium complexity\n// Overall dimensions: ~85mm long, 35mm wide, 20mm high\n\n// Main color scheme\ncolor(\"dimgray\") difference() {\n    // Handle grip - rubberized section\n    color(\"black\") \n    translate([0, 0, 2]) \n    cylinder(h=25, d1=18, d2=16, $fn=32);\n    \n    // Handle core\n    color(\"silver\") \n    translate([0, 0, 27]) \n    cylinder(h=30, d=14, $fn=32);\n    \n    // Shaft\n    color(\"silver\") \n    translate([0, 0, 57]) \n    cylinder(h=25, d=10, $fn=32);\n}\n\n// Hook blade assembly\nmodule hook_blade() {\n    color(\"darkgray\") {\n        // Main curved hook\n        translate([0, 0, 82]) rotate([90, 0, 0]) \n        difference() {\n            cylinder(h=20, d=8, $fn=32);\n            translate([0, 0, -1]) cylinder(h=22, d=6, $fn=32);\n        }\n        \n        // Hook tip\n        translate([0, 18, 82]) rotate([90, 0, 0]) \n        sphere(d=8, $fn=16);\n        \n        // Inner cutting edge\n        color(\"silver\") \n        translate([0, 12, 82]) rotate([90, 0, 0]) \n        cylinder(h=3, d=2, $fn=16);\n    }\n}\n\n// Scoop blade assembly  \nmodule scoop_blade() {\n    color(\"darkgray\") {\n        // Main scoop body\n        translate([0, 0, 82]) rotate([0, 20, 0]) \n        difference() {\n            cube([20, 15, 3], center=true);\n            translate([0, 2, 0]) cube([18, 11, 4], center=true);\n        }\n        \n        // Scoop teeth\n        for(i=[-8:4:8]) {\n            translate([i, 7.5, 82]) rotate([0, 20, 0]) \n            cube([3, 2, 2], center=true);\n        }\n    }\n}\n\n// Attachment mechanism\nmodule blade_mount() {\n    color(\"silver\") {\n        // Mount collar\n        translate([0, 0, 80]) \n        cylinder(h=5, d=12, $fn=32);\n        \n        // Locking pin holes\n        for(angle=[0:120:240]) {\n            rotate([0, 0, angle]) \n            translate([6, 0, 82.5]) \n            cylinder(h=2, d=3, $fn=16);\n        }\n    }\n}\n\n// Grip texture rings\nmodule grip_rings() {\n    color(\"black\") \n    for(z=[5:3:25]) {\n        translate([0, 0, z]) \n        cylinder(h=1, d=19, $fn=32);\n    }\n}\n\n// Assembly\nhook_blade();\ntranslate([0, 20, 0]) scoop_blade();\nblade_mount();\ngrip_rings();\n\n// Hanging hole\ncolor(\"silver\") \ntranslate([0, -7, 15]) rotate([90, 0, 0]) \ncylinder(h=5, d=5, $fn=32);",
    "renders": true
  },
  {
    "tool": "drain",
    "openscad_code": "// Drain Hair Removal Tool (Medium Complexity, Realistic Style)\n// Tool for pulling hair clogs from sink/bathtub drains\n// Overall length: 85mm, handle width: 40mm\n\n$fn = 36;\n\n// Main body module\nmodule drain_tool() {\n    color(\"DarkSlateGray\") {\n        union() {\n            // Handle with ergonomic grip\n            handle();\n            \n            // Shaft\n            shaft();\n            \n            // Barbed extraction head\n            extraction_head();\n        }\n    }\n}\n\n// Ergonomic handle with grip pattern\nmodule handle() {\n    // Main handle body\n    difference() {\n        // Handle core\n        translate([0, 0, 5]) {\n            scale([1, 0.6, 0.3]) {\n                sphere(d = 40);\n            }\n        }\n        \n        // Finger grooves (top)\n        for (i = [-1, 0, 1]) {\n            translate([i * 8, 0, 12]) {\n                scale([0.8, 0.8, 0.5]) {\n                    sphere(d = 10);\n                }\n            }\n        }\n        \n        // Thumb groove (bottom)\n        translate([0, 15, 5]) {\n            scale([1.2, 0.6, 0.3]) {\n                sphere(d = 12);\n            }\n        }\n    }\n    \n    // Rubber grip rings\n    color(\"Black\") {\n        for (i = [-12, -8, -4, 0, 4, 8, 12]) {\n            translate([i, 0, 8]) {\n                difference() {\n                    cylinder(h = 2, d = 36);\n                    cylinder(h = 2.2, d = 30);\n                }\n            }\n        }\n    }\n}\n\n// Flexible shaft with reinforcement\nmodule shaft() {\n    // Central core\n    color(\"Silver\") {\n        cylinder(h = 60, d = 6);\n    }\n    \n    // Spring reinforcement (simulated with rings)\n    color(\"LightGray\") {\n        for (i = [5:5:55]) {\n            translate([0, 0, i]) {\n                cylinder(h = 1.5, d = 8);\n            }\n        }\n    }\n    \n    // Flexible joint\n    translate([0, 0, 60]) {\n        color(\"Silver\") {\n            sphere(d = 8);\n        }\n    }\n}\n\n// Barbed extraction head for grabbing hair\nmodule extraction_head() {\n    translate([0, 0, 65]) {\n        // Central spine\n        cylinder(h = 20, d = 3);\n        \n        // Barbs arrayed around spine\n    color(\"Silver\") {\n        for (angle = [0:45:315]) {\n            rotate([0, 0, angle]) {\n                // Upper barbs\n                translate([0, 0, 75]) {\n                    rotate([angle, 0, 0]) {\n                        cube([1, 8, 0.5], center = true);\n                    }\n                }\n                \n                // Lower barbs\n                translate([0, 0, 70]) {\n                    rotate([angle + 22.5, 0, 0]) {\n                        cube([1, 6, 0.5], center = true);\n                    }\n                }\n                \n                // Hook tips\n                translate([0, 0, 82]) {\n                    rotate([0, 0, angle]) {\n                        translate([0, 8, 0]) {\n                            sphere(d = 2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n        // Protective tip\n        color(\"Red\") {\n            translate([0, 0, 85]) {\n                sphere(d = 4);\n            }\n        }\n    }\n}\n\n// Generate the complete tool\ndrain_tool();",
    "renders": true
  },
  {
    "tool": "culvert",
    "openscad_code": "// Culvert tool for 3D printing\n// Realistic style, medium complexity\n\n// Overall dimensions (in mm)\ntool_length = 80;\ntool_width = 15;\ntool_height = 8;\n\n// Main handle parameters\nhandle_length = 60;\nhandle_diameter = 8;\n\n// Blade parameters\nblade_length = 25;\nblade_width = 15;\nblade_thickness = 2;\n\n// Grip texture parameters\ngrip_ring_count = 8;\ngrip_ring_width = 2;\ngrip_ring_depth = 0.5;\n\n// Culvert-specific features\nculvert_radius = 6;\nculvert_wall = 1.5;\nmeasure_markings = 5;\n\nmodule handle_grip() {\n    difference() {\n        // Main handle cylinder\n        color([0.8, 0.4, 0.2]) \n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings for better handling\n        for (i = [0:grip_ring_count-1]) {\n            translate([0, 0, i * (handle_length / grip_ring_count) + grip_ring_width/2])\n            cylinder(h=grip_ring_width, d=handle_diameter + grip_ring_depth*2, $fn=32);\n        }\n    }\n}\n\nmodule culvert_blade() {\n    // Main blade body\n    color([0.7, 0.7, 0.7])\n    translate([handle_length/2 - blade_length/2, 0, -tool_height/2])\n    cube([blade_length, blade_width, blade_thickness]);\n    \n    // Culvert forming half-cylinder\n    color([0.6, 0.6, 0.6])\n    translate([handle_length/2 + blade_length/4, 0, -tool_height/2 + blade_thickness/2])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=blade_width, r=culvert_radius, $fn=32);\n        translate([0, 0, -culvert_wall])\n        cylinder(h=blade_width, r=culvert_radius - culvert_wall, $fn=32);\n    }\n    \n    // Cutting edge\n    color([0.5, 0.5, 0.5])\n    translate([handle_length/2 + blade_length - 1, 0, -tool_height/2])\n    cube([2, blade_width, blade_thickness + 1]);\n}\n\nmodule measurement_scale() {\n    color([0.2, 0.2, 0.2])\n    for (i = [0:measure_markings-1]) {\n        translate([handle_length - 5 - i * 10, handle_diameter/2 + 0.1, 0])\n        cube([0.5, 2, 0.5]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle assembly\n    rotate([0, 90, 0])\n    translate([0, 0, -handle_length/2])\n    handle_grip();\n    \n    // Blade assembly\n    culvert_blade();\n    \n    // Measurement markings\n    measurement_scale();\n    \n    // Reinforcement ridge\n    color([0.6, 0.6, 0.6])\n    translate([handle_length/2 - 5, 0, -tool_height/2 - 1])\n    cube([10, blade_width/2, 1]);\n}",
    "renders": true
  },
  {
    "tool": "cable",
    "openscad_code": "// Realistic Cable Stripper Tool - Medium Complexity\n// Overall length: 85mm, designed for 3D printing\n\n// Color definitions\n$fn = 32;\n\n// Main handle module\nmodule handle() {\n    difference() {\n        // Main handle body\n        color(\"darkslategray\")\n        hull() {\n            translate([0, 0, -2]) cylinder(h=4, r1=10, r2=12);\n            translate([0, 0, 35]) cylinder(h=5, r1=12, r2=10);\n            translate([0, 0, 45]) cylinder(h=5, r1=10, r2=8);\n        }\n        \n        // Grip texture - concentric rings\n        for(i = [0:3:35]) {\n            translate([0, 0, i]) rotate_extrude() \n                translate([11, 0, 0]) circle(r=0.5);\n        }\n        \n        // Finger grooves\n        for(i = [0:9:27]) {\n            translate([0, 0, 5+i]) rotate_extrude() \n                translate([12, 0, 0]) circle(r=1.5);\n        }\n    }\n}\n\n// Cutting head mechanism\nmodule cutting_head() {\n    // Main body\n    color(\"silver\")\n    union() {\n        // Base plate\n        translate([0, 0, 45]) cylinder(h=8, r1=8, r2=12);\n        \n        // Adjustment wheel base\n        translate([0, 0, 53]) cylinder(h=3, r=14);\n        \n        // Cutting blades housing\n        translate([0, 0, 56]) \n            cylinder(h=12, r=10, center=true);\n    }\n}\n\n// Adjustment wheel\nmodule adjustment_wheel() {\n    color(\"red\")\n    difference() {\n        // Main wheel\n        translate([0, 0, 56]) cylinder(h=4, r=12);\n        \n        // Knurling pattern\n        for(i = [0:15:359]) {\n            rotate([0, 0, i])\n            translate([11, 0, 56])\n            cube([2, 1, 4], center=true);\n        }\n        \n        // Center hole\n        translate([0, 0, 54]) cylinder(h=8, r=2);\n    }\n}\n\n// Cable guide slots\nmodule cable_guides() {\n    color(\"silver\")\n    difference() {\n        // Main guide block\n        translate([0, 0, 62]) \n            cube([20, 10, 6], center=true);\n        \n        // Cable slots - different sizes\n        translate([0, 0, 65]) \n            cylinder(h=10, r=2.5, center=true);\n        translate([0, 0, 65]) \n            cylinder(h=10, r=4, center=true);\n        translate([0, 0, 65]) \n            cylinder(h=10, r=6, center=true);\n    }\n}\n\n// Cutting blades\nmodule cutting_blades() {\n    color(\"silver\")\n    // Blade 1\n    translate([6, 0, 62]) \n        rotate([90, 0, 0]) \n        cube([0.5, 8, 3], center=true);\n    \n    // Blade 2\n    translate([-6, 0, 62]) \n        rotate([90, 0, 0]) \n        cube([0.5, 8, 3], center=true);\n}\n\n// Wire stripper teeth\nmodule stripper_teeth() {\n    color(\"silver\")\n    for(i = [0:2:10]) {\n        translate([i-5, 0, 59]) \n            cube([1.5, 8, 0.5]);\n    }\n}\n\n// Assembly\nhandle();\ncutting_head();\nadjustment_wheel();\ncable_guides();\ncutting_blades();\nstripper_teeth();",
    "renders": true
  },
  {
    "tool": "rod",
    "openscad_code": "// Rod Tool - Realistic Style, Medium Complexity\n// 3D printable rod tool with handle and measurement markings\n\n// Overall dimensions (mm)\nhandle_len = 60;\nhandle_dia = 12;\nrod_len = 80;\nrod_dia = 6;\ntip_len = 15;\n\n// Colors\nhandle_color = \"DarkGoldenRod\";\nrod_color = \"Silver\";\ntip_color = \"Gray\";\n\n// Handle grip texture module\nmodule grip_texture(radius, length, spacing) {\n    for (i = [0:spacing:length]) {\n        rotate([0, 90, 0])\n            translate([0, 0, -i])\n                difference() {\n                    cylinder(h=spacing*0.6, r=radius+0.5, $fn=20);\n                    cylinder(h=spacing*0.6, r=radius, $fn=20);\n                }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        difference() {\n            cylinder(h=handle_len, r=handle_dia/2, $fn=32);\n            // Finger grooves\n            for (i = [0:120:359]) {\n                rotate([0, 0, i])\n                    translate([handle_dia/2-1, 0, 10])\n                        cube([2, 1, handle_len-20], center=true);\n            }\n        }\n        \n        // Top cap\n        translate([0, 0, handle_len])\n            cylinder(h=3, r1=handle_dia/2, r2=handle_dia/2-1, $fn=32);\n            \n        // Bottom collar\n        translate([0, 0, -1])\n            cylinder(h=3, r=handle_dia/2+1, $fn=32);\n            \n        // Grip texture\n        grip_texture(handle_dia/2, handle_len-10, 5);\n    }\n}\n\n// Rod shaft with measurement markings\nmodule rod() {\n    color(rod_color) {\n        // Main rod\n        cylinder(h=rod_len, r=rod_dia/2, $fn=32);\n        \n        // Measurement markings every 10mm\n        for (i = [0:10:rod_len]) {\n            if (i > 0) {\n                translate([0, 0, i])\n                    rotate([0, 90, 0])\n                        cylinder(h=1, r=rod_dia/2+0.5, $fn=16);\n            }\n        }\n        \n        // Number every 20mm\n        for (i = [0:20:rod_len]) {\n            if (i > 0) {\n                translate([rod_dia/2+2, 0, i])\n                    rotate([0, 90, 0])\n                        linear_extrude(height=1)\n                            text(str(i), size=2, halign=\"center\");\n            }\n        }\n    }\n}\n\n// Pointed tip\nmodule tip() {\n    color(tip_color) {\n        translate([0, 0, rod_len])\n            cylinder(h=tip_len, r1=rod_dia/2, r2=0, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Rod\n    translate([0, 0, handle_len+2])\n        rod();\n        \n    // Tip\n    tip();\n}",
    "renders": true
  },
  {
    "tool": "shaft",
    "openscad_code": "// Shaft Tool - Realistic Medium Complexity OpenSCAD Model\n// A 3D printable hex key/Allen wrench shaft tool with ergonomic handle and size markings\n\n// Parameters\nhandle_length = 80;\nhandle_diameter = 20;\nshaft_length = 60;\nshaft_diameter = 6;\nkey_size = 4;\ngrip_rings = 5;\ncolor_handle = [0.2, 0.2, 0.2];\ncolor_shaft = [0.7, 0.7, 0.7];\ncolor_markings = [1, 0.2, 0.2];\n\n// Main assembly\nunion() {\n    // Handle with ergonomic grip\n    color(color_handle)\n    translate([0, 0, handle_length/2])\n    handle_assembly();\n    \n    // Shaft\n    color(color_shaft)\n    translate([0, 0, handle_length])\n    shaft_assembly();\n    \n    // Size marking\n    color(color_markings)\n    translate([handle_diameter/2 + 1, 0, handle_length/2])\n    rotate([0, 90, 0])\n    size_marking();\n}\n\n// Handle assembly with grip rings\nmodule handle_assembly() {\n    difference() {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [1:grip_rings]) {\n            translate([0, 0, (i-0.5)*handle_length/grip_rings])\n            cylinder(h=2, d=handle_diameter-4, $fn=32);\n        }\n        \n        // Hex socket for shaft\n        translate([0, 0, handle_length])\n        rotate([0, 0, 30])\n        cylinder(h=10, d=shaft_diameter+0.2, $fn=6);\n    }\n    \n    // Grip texture rings\n    for(i = [1:grip_rings*2]) {\n        translate([0, 0, (i-0.5)*handle_length/(grip_rings*2)])\n        difference() {\n            cylinder(h=1, d=handle_diameter, $fn=32);\n            cylinder(h=1.1, d=handle_diameter-2, $fn=32);\n        }\n    }\n}\n\n// Shaft assembly with hex key end\nmodule shaft_assembly() {\n    union() {\n        // Main shaft\n        cylinder(h=shaft_length-10, d=shaft_diameter, $fn=32);\n        \n        // Hex key end\n        translate([0, 0, shaft_length-10])\n        rotate([0, 0, 30])\n        cylinder(h=10, d=key_size, $fn=6);\n        \n        // Transition collar\n        translate([0, 0, -5])\n        cylinder(h=5, d1=shaft_diameter+4, d2=shaft_diameter, $fn=32);\n        \n        // Ball end detail\n        translate([0, 0, shaft_length])\n        sphere(d=key_size, $fn=12);\n    }\n}\n\n// Size marking text (4mm)\nmodule size_marking() {\n    linear_extrude(height=0.5)\n    text(\"4mm\", size=4, halign=\"center\", valign=\"center\");\n}",
    "renders": true
  },
  {
    "tool": "pole",
    "openscad_code": "// Realistic Pole Tool - Garden Hoe with Handle\n// Medium complexity - uses basic primitives and transformations\n\n$fa = 2;\n$fs = 0.5;\n\nmodule hoe_blade() {\n    color(\"silver\")\n    difference() {\n        // Main blade body\n        translate([-20, 0, 0])\n        cube([40, 25, 2]);\n        \n        // Blade edge taper\n        translate([-25, 2, -1])\n        cube([45, 21, 4]);\n        \n        // Rivet holes\n        for(x = [-10, 10]) {\n            translate([x, 12.5, -1])\n            cylinder(h=4, r=1.5, $fn=8);\n        }\n    }\n}\n\nmodule hoe_neck() {\n    color(\"gray\")\n    union() {\n        // Curved neck connection\n        translate([-5, 0, 0])\n        rotate([0, -20, 0])\n        cylinder(h=15, r1=4, r2=3, $fn=8);\n        \n        // Reinforcement collar\n        translate([-8, 0, 0])\n        cylinder(h=8, r=5, $fn=8);\n    }\n}\n\nmodule handle_grip() {\n    color(\"brown\")\n    difference() {\n        // Main handle\n        cylinder(h=80, r=6, $fn=16);\n        \n        // Grip grooves\n        for(i = [10:10:70]) {\n            translate([0, 0, i])\n            cylinder(h=2, r=5.5, $fn=16);\n        }\n    }\n}\n\nmodule handle_end() {\n    color(\"brown\")\n    union() {\n        // End cap\n        translate([0, 0, 80])\n        cylinder(h=10, r=7, $fn=16);\n        \n        // Hanging hole\n        translate([0, 0, 85])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=2, $fn=16);\n    }\n}\n\nmodule pole_tool() {\n    // Assemble the complete tool\n    union() {\n        // Handle assembly\n        translate([0, 0, 0])\n        handle_grip();\n        \n        // Handle end\n        translate([0, 0, 0])\n        handle_end();\n        \n        // Blade assembly\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        union() {\n            hoe_neck();\n            translate([0, 15, 0])\n            hoe_blade();\n        }\n    }\n}\n\n// Render the complete tool\ntranslate([0, 0, 0])\npole_tool();",
    "renders": true
  },
  {
    "tool": "post",
    "openscad_code": "// Post tool (fence post driver) - medium complexity realistic style\n// Overall dimensions: ~60mm tall, ~35mm wide\n\n// Main color scheme\ncolor(\"slategray\") {\n    // Handle grip\n    difference() {\n        cylinder(h=25, d1=14, d2=12, $fn=32);  // Tapered handle\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) \n                translate([0, -7, 10])\n                    cube([14, 2, 10], center=true);  // Grip grooves\n        }\n    }\n}\n\n// Handle shaft\ntranslate([0, 0, 25]) {\n    color(\"silver\") {\n        difference() {\n            cylinder(h=20, d=10, $fn=32);\n            // Hollow shaft for weight reduction\n            cylinder(h=20, d=6, $fn=32);\n        }\n    }\n}\n\n// Main weight block\ntranslate([0, 0, 45]) {\n    color(\"darkgray\") {\n        difference() {\n            cube([30, 30, 15], center=true);\n            // Center hole for post\n            cylinder(h=16, d=12, center=true, $fn=32);\n            // Weight reduction pockets\n            for(a = [0:90:270]) {\n                rotate([0, 0, a]) {\n                    translate([8, 8, 0]) \n                        cylinder(h=16, d=6, center=true, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Top striking surface\ntranslate([0, 0, 60]) {\n    color(\"silver\") {\n        difference() {\n            cylinder(h=3, d=35, $fn=32);\n            cylinder(h=4, d=12, center=true, $fn=32);\n        }\n    }\n}\n\n// Side reinforcement plates\ncolor(\"slategray\") {\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle]) {\n            translate([15, 0, 52.5]) {\n                difference() {\n                    cube([6, 20, 10], center=true);\n                    cylinder(h=11, d=12, center=true, $fn=32);\n                }\n            }\n        }\n    }\n}\n\n// Bottom guide collar\ntranslate([0, 0, 45]) {\n    color(\"silver\") {\n        difference() {\n            cylinder(h=8, d1=28, d2=32, $fn=32);\n            cylinder(h=8, d=12, $fn=32);\n        }\n    }\n}\n\n// Safety warning label\ntranslate([10, 10, 52.5]) {\n    color(\"red\") {\n        cube([5, 0.5, 8], center=true);\n    }\n}\n\n// Manufacturer marking\ntranslate([0, 0, 63]) {\n    color(\"black\") {\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) {\n                translate([12, 0, 0]) {\n                    cube([1, 0.5, 1], center=true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "mast",
    "openscad_code": "// Mast Tool - Realistic Style, Medium Complexity\n// Overall size: ~80mm height, 15mm diameter mast at base\n\n$fn = 50;\n\n// Main colors\ncolor_mast = [0.8, 0.8, 0.8];\ncolor_handle = [0.3, 0.2, 0.1];\ncolor_grip = [0.1, 0.1, 0.1];\ncolor_metal = [0.5, 0.5, 0.5];\n\n// Main assembly\nmodule mast_tool() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 0]) handle_assembly();\n        \n        // Mast assembly\n        translate([0, 0, 25]) mast_assembly();\n    }\n}\n\n// Handle assembly with grip\nmodule handle_assembly() {\n    color(color_handle) {\n        // Main handle body - tapered cylinder\n        cylinder(h = 25, d1 = 12, d2 = 10);\n        \n        // Grip rings\n        for(i = [0:4]) {\n            translate([0, 0, 5 + i*4]) {\n                color(color_grip) {\n                    difference() {\n                        cylinder(h = 3, d = 12.5);\n                        cylinder(h = 3.2, d = 10.5);\n                    }\n                }\n            }\n        }\n        \n        // End cap\n        translate([0, 0, -1]) {\n            color(color_metal) {\n                cylinder(h = 2, d = 14);\n            }\n        }\n    }\n}\n\n// Mast assembly\nmodule mast_assembly() {\n    color(color_mast) {\n        union() {\n            // Main mast shaft\n            cylinder(h = 55, d = 15);\n            \n            // Reinforcement rings\n            translate([0, 0, 0]) reinforcement_ring(17);\n            translate([0, 0, 55]) reinforcement_ring(17);\n            \n            // Halyard guide at top\n            translate([0, 0, 55]) halyard_guide();\n            \n            // Spreader arms\n            for(i = [0:1]) {\n                rotate([0, 0, i*90]) {\n                    translate([7.5, 0, 40]) spreader_arm();\n                }\n            }\n            \n            // Base reinforcement\n            translate([0, 0, 0]) {\n                cylinder(h = 5, d = 20);\n            }\n        }\n    }\n}\n\n// Reinforcement ring\nmodule reinforcement_ring(diameter) {\n    difference() {\n        cylinder(h = 3, d = diameter);\n        cylinder(h = 3.2, d = 15);\n    }\n}\n\n// Halyard guide for rope routing\nmodule halyard_guide() {\n    color(color_metal) {\n        union() {\n            // Main guide block\n            translate([0, 8, 0]) cube([3, 6, 3], center = true);\n            \n            // Pulley wheel\n            translate([0, 8, 1.5]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 2, d = 5);\n                }\n            }\n            \n            // Support arms\n            translate([-2, 8, 0]) cube([1, 6, 3]);\n            translate([2, 8, 0]) cube([1, 6, 3]);\n        }\n    }\n}\n\n// Spreader arm for sail support\nmodule spreader_arm() {\n    color(color_mast) {\n        union() {\n            // Main arm\n            cube([20, 2, 1], center = true);\n            \n            // End fitting\n            translate([10, 0, 0]) {\n                color(color_metal) {\n                    cylinder(h = 2, d = 3);\n                }\n            }\n            \n            // Support struts\n            translate([5, 0, 0]) cube([0.5, 0.5, 8]);\n            translate([15, 0, 0]) cube([0.5, 0.5, 6]);\n        }\n    }\n}\n\n// Generate the mast tool\nmast_tool();",
    "renders": true
  },
  {
    "tool": "tower",
    "openscad_code": "// Tower Tool - OpenSCAD\n// A realistic tower tool with medium complexity\n\n$fn = 50;  // Smooth curves\n\n// Overall dimensions\ntower_height = 80;\nbase_diameter = 40;\ngrip_diameter = 25;\n\n// Colors\ntower_color = \"#4A4A4A\";\ngrip_color = \"#2E2E2E\";\nblade_color = \"#C0C0C0\";\naccent_color = \"#FF4444\";\n\n// Main tower body\nmodule tower_body() {\n    color(tower_color) {\n        // Main cylindrical shaft\n        cylinder(h = tower_height, d1 = base_diameter, d2 = grip_diameter, center = false);\n        \n        // Reinforcement rings\n        for (i = [1:3]) {\n            translate([0, 0, i * 20])\n                cylinder(h = 2, d = base_diameter + 4, center = false);\n        }\n    }\n}\n\n// Grip section with knurling\nmodule grip_section() {\n    color(grip_color) {\n        // Main grip cylinder\n        translate([0, 0, tower_height - 30])\n            cylinder(h = 30, d = grip_diameter, center = false);\n        \n        // Knurled pattern\n        for (i = [0:35]) {\n            rotate([0, 0, i * 10])\n                translate([grip_diameter/2 - 1, 0, tower_height - 30])\n                    cube([2, 1, 30], center = true);\n        }\n    }\n}\n\n// Tool head with blade mechanism\nmodule tool_head() {\n    color(blade_color) {\n        // Head base\n        translate([0, 0, tower_height])\n            cylinder(h = 15, d = 30, center = false);\n        \n        // Blade housing\n        translate([0, 0, tower_height + 15])\n            cube([25, 8, 10], center = true);\n        \n        // Blade slot\n        translate([0, 0, tower_height + 20])\n            cube([20, 1, 5], center = true);\n    }\n}\n\n// Adjustment mechanism\nmodule adjustment_mechanism() {\n    color(accent_color) {\n        // Thumb wheel\n        translate([0, 15, tower_height - 40])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 20, center = true);\n        \n        // Wheel spokes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([7, 0, tower_height - 40])\n                    cube([14, 3, 2], center = true);\n        }\n        \n        // Adjustment scale\n        for (i = [0:9]) {\n            rotate([0, 0, i * 20 - 90])\n                translate([15, 0, tower_height - 40])\n                    cube([2, 1, 1], center = true);\n        }\n    }\n}\n\n// Safety lock\nmodule safety_lock() {\n    color(tower_color) {\n        // Lock housing\n        translate([12, 0, tower_height - 25])\n            cube([8, 6, 12], center = true);\n        \n        // Lock button\n        color(accent_color)\n            translate([16, 0, tower_height - 25])\n                sphere(d = 4);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    tower_body();\n    grip_section();\n    tool_head();\n    adjustment_mechanism();\n    safety_lock();\n    \n    // Additional details\n    color(\"#333333\")\n    translate([0, 0, 5])\n        cylinder(h = 5, d = base_diameter - 2, center = false);\n    \n    // Serial number engraving\n    color(\"#111111\")\n    translate([0, -grip_diameter/2 - 1, tower_height - 15])\n        cube([20, 0.5, 3], center = true);\n}",
    "renders": true
  },
  {
    "tool": "pylon",
    "openscad_code": "// Realistic Pylon Tool - OpenSCAD Model\n// Medium complexity, 3D printable design\n\n// Overall dimensions\nbase_width = 40;\nbase_length = 80;\nbase_height = 8;\npylon_height = 85;\nhandle_diameter = 12;\nhandle_length = 25;\nblade_width = 3;\nblade_length = 30;\n\n// Colors\nbase_color = [0.1, 0.1, 0.1]; // Dark gray\nhandle_color = [0.3, 0.3, 0.3]; // Medium gray\nblade_color = [0.7, 0.7, 0.7]; // Silver\ngrip_color = [0.1, 0.1, 0.1]; // Black\naccent_color = [0.9, 0.1, 0.1]; // Red\n\n// Base plate with mounting holes\nmodule base_plate() {\n    color(base_color)\n    difference() {\n        // Main base\n        cube([base_width, base_length, base_height], center=true);\n        \n        // Mounting holes\n        for (x = [-base_width/4, base_width/4])\n            for (y = [-base_length/4, base_length/4])\n                translate([x, y, 0])\n                    cylinder(h=base_height+1, r=3, center=true);\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Main handle\n        translate([0, 0, pylon_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=handle_length, r=handle_diameter/2, center=true);\n        \n        // Grip rings\n        color(grip_color)\n        for (i = [-2:2]) {\n            translate([0, 0, pylon_height/2 + i*4])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r=handle_diameter/2 + 1, center=true);\n        }\n    }\n}\n\n// Pylon shaft with structural ribs\nmodule pylon_shaft() {\n    color(base_color)\n    union() {\n        // Main shaft\n        translate([0, 0, pylon_height/2 + base_height/2])\n            cube([12, 12, pylon_height], center=true);\n        \n        // Structural ribs\n        color(handle_color)\n        for (dir = [0, 90]) {\n            rotate([0, 0, dir])\n                translate([0, 6, pylon_height/2 + base_height/2])\n                    cube([2, 12, pylon_height], center=true);\n        }\n    }\n}\n\n// Cutting blade\nmodule blade() {\n    color(blade_color)\n    union() {\n        // Main blade\n        translate([0, base_length/2 + blade_length/2, pylon_height/2 + base_height/2])\n            cube([blade_width, blade_length, 15], center=true);\n        \n        // Blade tip\n        translate([0, base_length/2 + blade_length, pylon_height/2 + base_height/2])\n            rotate([0, 0, 0])\n                cylinder(h=blade_width, r1=15, r2=0, center=true);\n    }\n}\n\n// Safety guard\nmodule safety_guard() {\n    color(accent_color)\n    translate([0, base_length/2 - 10, pylon_height/2 + base_height/2 - 5])\n        cube([20, 2, 20], center=true);\n}\n\n// Assembly\nunion() {\n    // Base components\n    base_plate();\n    pylon_shaft();\n    \n    // Functional parts\n    handle();\n    blade();\n    safety_guard();\n    \n    // Reinforcement plates\n    color(base_color)\n    translate([0, 0, base_height/2])\n        cube([20, base_length - 20, base_height/2], center=true);\n    \n    // Detail markings\n    color([1, 1, 1])\n    translate([0, 0, base_height + 2])\n        cylinder(h=1, r=2, center=true);\n}",
    "renders": true
  },
  {
    "tool": "antenna",
    "openscad_code": "// Antenna alignment tool for satellite dishes\n// Realistic style, medium complexity\n\n// Parameters for 3D printing\nwall = 1.2;\nhandle_length = 60;\nhandle_diameter = 12;\nhead_width = 22;\nhead_thickness = 8;\nprobe_length = 45;\nprobe_diameter = 6;\n\n// Color definitions\nhandle_color = \"#333333\";\nhead_color = \"#666666\";\nprobe_color = \"#ffcc00\";\nmarking_color = \"#ffffff\";\n\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        for(i = [5:10:handle_length-10]) {\n            translate([0, 0, i])\n                cylinder(h=2, d=handle_diameter-1, $fn=32);\n        }\n        \n        // Thumb rest indentation\n        translate([handle_diameter/2-1, 0, handle_length-20])\n            rotate([0, 90, 0])\n                cylinder(h=8, d=6, $fn=16);\n    }\n    \n    // Grip texture rings\n    color(marking_color)\n    for(i = [10:10:handle_length-10]) {\n        translate([0, 0, i])\n            cylinder(h=0.5, d=handle_diameter+0.2, $fn=32);\n    }\n}\n\nmodule tool_head() {\n    color(head_color)\n    union() {\n        // Main head body\n        cube([head_width, head_width, head_thickness], center=true);\n        \n        // Reinforcement ribs\n        for(i = [-1, 1]) {\n            translate([i * head_width/4, 0, 0])\n                cube([wall, head_width, head_thickness], center=true);\n            translate([0, i * head_width/4, 0])\n                cube([head_width, wall, head_thickness], center=true);\n        }\n        \n        // Mounting holes\n        for(x = [-head_width/3, head_width/3]) {\n            for(y = [-head_width/3, head_width/3]) {\n                translate([x, y, 0])\n                    cylinder(h=head_thickness+1, d=3, center=true, $fn=16);\n            }\n        }\n        \n        // Degree scale markings\n        color(marking_color)\n        for(angle = [0:15:360-15]) {\n            rotate([0, 0, angle])\n                translate([head_width/2-2, 0, head_thickness/2+0.1])\n                    cube([4, 0.5, 0.3], center=true);\n        }\n    }\n}\n\nmodule probe() {\n    color(probe_color)\n    union() {\n        // Main probe shaft\n        cylinder(h=probe_length, d=probe_diameter, $fn=16);\n        \n        // Tip\n        translate([0, 0, probe_length])\n            cylinder(h=8, d1=probe_diameter, d2=0, $fn=16);\n        \n        // Calibration marks\n        color(head_color)\n        for(i = [5:5:probe_length-10]) {\n            translate([0, 0, i])\n                cylinder(h=0.3, d=probe_diameter+0.5, $fn=16);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, handle_length/2])\n    handle();\n\ntranslate([0, 0, handle_length + head_thickness/2])\n    rotate([180, 0, 0])\n        tool_head();\n\ntranslate([0, 0, handle_length + head_thickness + probe_length/2])\n    probe();",
    "renders": true
  },
  {
    "tool": "aerial",
    "openscad_code": "// Realistic Aerial Tool - Medium Complexity\n// Aerial (Antenna) Installation Tool with telescoping mast and directional antenna\n\n// Tool Parameters\nmast_diameter = 8;\nmast_height = 60;\nantenna_width = 25;\nantenna_height = 20;\nhandle_length = 30;\nbase_size = 20;\n\n// Colors\ncolor_metal = [0.7, 0.7, 0.75];\ncolor_plastic = [0.2, 0.2, 0.2];\ncolor_rubber = [0.1, 0.1, 0.1];\ncolor_antenna = [0.8, 0.8, 0.8];\n\n// Main assembly\nmodule aerial_tool() {\n    union() {\n        // Base with rubber grip\n        color(color_rubber)\n        translate([0, 0, 0])\n            base_assembly();\n        \n        // Telescoping mast sections\n        color(color_metal)\n        translate([0, 0, 5])\n            mast_assembly();\n        \n        // Directional antenna array\n        color(color_antenna)\n        translate([0, 0, mast_height + 10])\n            antenna_assembly();\n        \n        // Adjustment handle\n        color(color_plastic)\n        translate([mast_diameter/2 + 2, 0, mast_height/2 + 5])\n            rotate([0, 90, 0])\n                handle();\n    }\n}\n\n// Rubber grip base with texture\nmodule base_assembly() {\n    difference() {\n        union() {\n            // Main base cylinder\n            cylinder(h=10, d=base_size, $fn=32);\n            \n            // Grip rings\n            for(i = [1:3]) {\n                translate([0, 0, i*2.5])\n                    cylinder(h=1, d=base_size + 2, $fn=32);\n            }\n        }\n        \n        // Center hole for mast\n        translate([0, 0, -1])\n            cylinder(h=12, d=mast_diameter + 2, $fn=32);\n    }\n}\n\n// Telescoping mast with 3 sections\nmodule mast_assembly() {\n    // Bottom section\n    cylinder(h=mast_height/3, d=mast_diameter, $fn=16);\n    \n    // Middle section\n    translate([0, 0, mast_height/3])\n        cylinder(h=mast_height/3, d=mast_diameter - 2, $fn=16);\n    \n    // Top section\n    translate([0, 0, 2*mast_height/3])\n        cylinder(h=mast_height/3, d=mast_diameter - 4, $fn=16);\n    \n    // Locking rings\n    for(i = [1:2]) {\n        translate([0, 0, i*mast_height/3 - 2])\n            difference() {\n                cylinder(h=4, d=mast_diameter + 4, $fn=16);\n                cylinder(h=4, d=mast_diameter + 1, $fn=16);\n            }\n    }\n}\n\n// Directional antenna array\nmodule antenna_assembly() {\n    union() {\n        // Mounting bracket\n        rotate([90, 0, 0])\n            cylinder(h=8, d=mast_diameter, $fn=16);\n        \n        // Antenna reflector\n        translate([0, -antenna_height/2 - 5, 0])\n            cube([antenna_width, antenna_height/4, antenna_height], center=true);\n        \n        // Driven element\n        translate([0, 0, 0])\n            cube([antenna_width/2, 2, antenna_height/2], center=true);\n        \n        // Directors (3 elements)\n        for(i = [1:3]) {\n            translate([0, i*5, 0])\n                cube([antenna_width - i*5, 1, antenna_height - i*3], center=true);\n        }\n        \n        // Support struts\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle])\n                translate([antenna_width/2 + 2, 0, 0])\n                    cube([antenna_width/4, 2, antenna_height/4], center=true);\n        }\n    }\n}\n\n// Adjustment handle with grip\nmodule handle() {\n    union() {\n        // Handle shaft\n        cylinder(h=handle_length, d=6, $fn=16);\n        \n        // Grip end\n        translate([0, 0, handle_length])\n            sphere(d=8, $fn=16);\n        \n        // Knurled grip pattern\n        for(i = [2:handle_length-2:2]) {\n            translate([0, 0, i])\n                cylinder(h=1, d=7, $fn=8);\n        }\n    }\n}\n\n// Render the complete tool\naerial_tool();",
    "renders": true
  },
  {
    "tool": "dish",
    "openscad_code": "// Realistic Dish Tool - Medium Complexity\n// A multi-purpose dish tool with ergonomic handle and serrated edges\n\n// Color definitions\n$fn = 50;\n\n// Main tool body\nmodule dish_tool() {\n    // Handle - ergonomic grip with texture\n    color(\"DarkSlateGray\") {\n        // Handle shaft\n        translate([0, 0, 5]) {\n            difference() {\n                cylinder(h=70, d1=12, d2=10);\n                // Grip texture - 8 grooves\n                for(i = [0:7]) {\n                    rotate([0, 0, i * 45]) {\n                        translate([-6, -0.5, 5]) {\n                            cube([12, 1, 60]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Handle end cap\n        translate([0, 0, 75]) {\n            sphere(d=12);\n        }\n        \n        // Handle base flare\n        translate([0, 0, 0]) {\n            cylinder(h=5, d1=14, d2=12);\n        }\n    }\n    \n    // Tool head - curved dish scraper\n    color(\"LightGray\") {\n        // Main scraper blade\n        translate([0, 0, 5]) {\n            difference() {\n                // Curved blade body\n                linear_extrude(height=2, convexity=10) {\n                    difference() {\n                        // Main curve\n                        offset(r=2) {\n                            polygon(points=[\n                                [-3, 0], [-5, 15], [-8, 30], [-10, 45], \n                                [-8, 60], [-5, 70], [0, 72], \n                                [5, 70], [8, 60], [10, 45], \n                                [8, 30], [5, 15], [3, 0]\n                            ]);\n                        }\n                    }\n                }\n                \n                // Center hole for hanging\n                translate([0, 35, 0]) {\n                    cylinder(h=3, d=4);\n                }\n            }\n        }\n        \n        // Reinforced spine\n        translate([0, 0, 6]) {\n            linear_extrude(height=3, convexity=10) {\n                polygon(points=[\n                    [-2, 10], [-3, 25], [-4, 40], [-3, 55], [-2, 65],\n                    [0, 67], [2, 65], [3, 55], [4, 40], [3, 25], [2, 10]\n                ]);\n            }\n        }\n    }\n    \n    // Serrated edge detail\n    color(\"Silver\") {\n        translate([0, 0, 5]) {\n            // Create serrations along curved edge\n            for(i = [0:15]) {\n                angle = i * 11.25;\n                radius = 35 + 2 * sin(i * 30);\n                x = cos(angle) * radius;\n                y = 35 + sin(angle) * 35;\n                \n                if(abs(x) > 2) {\n                    translate([x, y, 0]) {\n                        rotate([0, 0, angle + 90]) {\n                            cube([0.5, 3, 2.5], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Measurement markings\n    color(\"Black\") {\n        for(i = [0:3]) {\n            y_pos = 20 + i * 15;\n            translate([-11, y_pos, 7]) {\n                cube([2, 0.5, 0.3]);\n            }\n            translate([9, y_pos, 7]) {\n                cube([2, 0.5, 0.3]);\n            }\n        }\n    }\n    \n    // Logo/text area\n    color(\"White\") {\n        translate([-5, 50, 7.5]) {\n            cube([10, 5, 0.2]);\n        }\n    }\n}\n\n// Assembly\ndish_tool();\n\n// Optional support base for printing\n%translate([0, 0, -1]) {\n    color(\"Gray\", 0.2) {\n        cylinder(h=1, d=100);\n    }\n}",
    "renders": true
  },
  {
    "tool": "reflector",
    "openscad_code": "// Realistic Reflector Tool - OpenSCAD\n// Medium complexity 3D printable reflector with handle, adjustment mechanism and mounting bracket\n\n// Overall dimensions\nhandle_length = 70;\nhandle_diameter = 12;\nreflector_diameter = 50;\nreflector_depth = 15;\nbracket_width = 20;\nbracket_height = 25;\n\n// Colors\nhandle_color = [0.1, 0.1, 0.1];  // Black plastic\nreflector_color = [0.9, 0.9, 0.9];  // Silver\nbracket_color = [0.7, 0.7, 0.7];  // Gray metal\ngrip_color = [0.2, 0.2, 0.2];  // Dark gray grip\n\nmodule handle_grooves() {\n    for (i = [0:4]) {\n        translate([0, 0, -handle_length/2 + i*15])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=2, d=handle_diameter + 2, $fn=32);\n                    cylinder(h=3, d=handle_diameter - 2, $fn=32);\n                }\n    }\n}\n\nmodule handle() {\n    color(handle_color)\n    difference() {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip grooves\n        handle_grooves();\n    }\n    \n    // Rubber grip rings\n    color(grip_color)\n    for (i = [0:2]) {\n        translate([0, 0, -handle_length/2 + 10 + i*25])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=handle_diameter + 1, $fn=32);\n    }\n}\n\nmodule reflector_bowl() {\n    color(reflector_color)\n    difference() {\n        // Main reflector shape\n        sphere(d=reflector_diameter, $fn=48);\n        \n        // Hollow out back\n        translate([0, 0, reflector_diameter/2 - reflector_depth])\n            sphere(d=reflector_diameter - 4, $fn=48);\n        \n        // Flatten back\n        translate([0, 0, -reflector_diameter/2])\n            cube([reflector_diameter, reflector_diameter, reflector_diameter], center=true);\n    }\n}\n\nmodule adjustment_mechanism() {\n    color(bracket_color)\n    union() {\n        // Ball joint base\n        sphere(d=10, $fn=24);\n        \n        // Mounting post\n        translate([0, 0, 5])\n            cylinder(h=8, d1=10, d2=6, $fn=16);\n        \n        // Locking collar\n        translate([0, 0, 13])\n            cylinder(h=4, d=8, $fn=16);\n        \n        // Locking screw\n        translate([6, 0, 13])\n            rotate([90, 0, 0])\n                cylinder(h=8, d=3, $fn=12);\n    }\n}\n\nmodule mounting_bracket() {\n    color(bracket_color)\n    difference() {\n        // Main bracket\n        translate([0, 0, bracket_height/2])\n            cube([bracket_width, 6, bracket_height], center=true);\n        \n        // Mounting holes\n        for (pos = [-bracket_width/3, bracket_width/3]) {\n            translate([pos, 0, bracket_height/4])\n                cylinder(h=8, d=3.5, $fn=16);\n            translate([pos, 0, 3*bracket_height/4])\n                cylinder(h=8, d=3.5, $fn=16);\n        }\n        \n        // Cable channel\n        translate([0, -3, bracket_height/2])\n            cube([8, 3, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, -handle_length/2])\n        handle();\n    \n    // Adjustment mechanism\n    translate([0, 0, handle_length/2 + 5])\n        adjustment_mechanism();\n    \n    // Reflector\n    translate([0, 0, handle_length/2 + 20])\n        rotate([0, 180, 0])\n            reflector_bowl();\n    \n    // Mounting bracket\n    translate([0, 8, handle_length/2 + 10])\n        rotate([90, 0, 0])\n            mounting_bracket();\n}",
    "renders": true
  },
  {
    "tool": "mirror",
    "openscad_code": "// Realistic 3D Printable Mirror Tool\n// Medium complexity with functional details\n\n$fn = 64;\n\n// Main mirror assembly\nmodule mirror_tool() {\n    // Handle\n    color(\"silver\") handle();\n    \n    // Frame\n    color(\"gray\") frame();\n    \n    // Mirror surface\n    color(\"lightblue\") mirror_surface();\n    \n    // Hanging ring\n    color(\"gold\") hanging_ring();\n    \n    // Grip texture rings\n    color(\"darkgray\") grip_rings();\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    difference() {\n        // Main handle body\n        translate([0, -60, 0])\n            rotate([90, 0, 0])\n                cylinder(h=50, r1=8, r2=6, center=true);\n        \n        // Grip grooves\n        for(i = [-20:10:20]) {\n            translate([0, -60 + i, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r=7.5, center=true);\n        }\n    }\n}\n\n// Decorative frame around mirror\nmodule frame() {\n    difference() {\n        // Outer frame\n        rotate([0, 0, 0])\n            cylinder(h=8, r=25, center=true);\n        \n        // Inner cutout for mirror\n        rotate([0, 0, 0])\n            cylinder(h=9, r=22, center=true);\n    }\n    \n    // Frame bevel detail\n    difference() {\n        translate([0, 0, 4.5])\n            cylinder(h=1, r1=25, r2=24, center=true);\n        translate([0, 0, 4])\n            cylinder(h=2, r=22.5, center=true);\n    }\n}\n\n// Reflective mirror surface\nmodule mirror_surface() {\n    translate([0, 0, 0.5])\n        cylinder(h=0.5, r=21.5, center=true);\n}\n\n// Hanging ring for wall mount\nmodule hanging_ring() {\n    rotate([90, 0, 0])\n        translate([0, -10, 0])\n            difference() {\n                torus(8, 2);\n                translate([0, 0, 2])\n                    cube([20, 2, 4], center=true);\n            }\n}\n\n// Torus helper for ring\nmodule torus(outer_r, inner_r) {\n    rotate_extrude()\n        translate([outer_r, 0])\n            circle(r=inner_r);\n}\n\n// Grip texture rings\nmodule grip_rings() {\n    for(i = [-15:5:15]) {\n        translate([0, -60 + i, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=1, r=8.5, center=true);\n                    cylinder(h=2, r=7.5, center=true);\n                }\n    }\n}\n\n// Render the complete mirror\nmirror_tool();",
    "renders": true
  },
  {
    "tool": "lens",
    "openscad_code": "// Lens Tool - Realistic Style, Medium Complexity\n// A 3D printable dual-ended lens removal/installation tool\n\n$fn = 50;\n\n// Overall dimensions\ntool_length = 80;\nhandle_length = 40;\nblade_width = 25;\nblade_thickness = 2.5;\nwall_thickness = 3;\n\n// Colors\nhandle_color = \"#2C3E50\";\nmetal_color = \"#BDC3C7\";\ngrip_color = \"#34495E\";\n\n// Main handle\nmodule handle() {\n    color(handle_color) {\n        // Central grip section\n        difference() {\n            cylinder(h=handle_length, d=20, center=true);\n            // Grip pattern - hexagonal cutouts\n            for(i = [-2:2]) {\n                translate([0, 0, i * 8 - 8]) {\n                    rotate([0, 0, 30]) {\n                        cylinder(h=3, d1=16, d2=14, center=true);\n                    }\n                }\n            }\n            // Center hole for weight reduction\n            cylinder(h=handle_length + 2, d=8, center=true);\n        }\n        \n        // End caps\n        translate([0, 0, handle_length/2 + 1]) {\n            cylinder(h=3, d1=18, d2=20, center=true);\n        }\n        translate([0, 0, -handle_length/2 - 1]) {\n            cylinder(h=3, d1=20, d2=18, center=true);\n        }\n    }\n}\n\n// Blade with lens engagement features\nmodule blade(blade_type) {\n    color(metal_color) {\n        if(blade_type == \"removal\") {\n            // Removal blade - forked design\n            difference() {\n                // Main blade body\n                cube([blade_width, blade_thickness, 20], center=true);\n                \n                // Fork cutout\n                translate([0, 0, 0]) {\n                    cube([blade_width - 6, blade_thickness + 1, 18], center=true);\n                }\n                \n                // Rounded edges\n                translate([blade_width/2 - 2, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=4, r=2, center=true);\n                    }\n                }\n                translate([-blade_width/2 + 2, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=4, r=2, center=true);\n                    }\n                }\n            }\n            \n            // Hook for lens removal\n            translate([0, blade_thickness/2 + 1, -8]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=15, r1=1.5, r2=0.5);\n                }\n            }\n            \n        } else {\n            // Installation blade - flat with guides\n            difference() {\n                // Main blade\n                cube([blade_width, blade_thickness, 15], center=true);\n                \n                // Alignment guides\n                for(i = [-1, 1]) {\n                    translate([i * 8, 0, 0]) {\n                        cube([2, blade_thickness + 0.5, 12], center=true);\n                    }\n                }\n                \n                // Center notch for lens alignment\n                translate([0, 0, -5]) {\n                    cube([4, blade_thickness + 1, 8], center=true);\n                }\n            }\n            \n            // Installation tabs\n            for(i = [-1, 1]) {\n                translate([i * 10, blade_thickness/2 + 0.5, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=3, r=2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    color(metal_color) {\n        for(i = [-1, 1]) {\n            translate([0, i * 5, handle_length/4]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=10, r1=3, r2=2);\n                        cylinder(h=10, r1=2, r2=1.5);\n                    }\n                }\n            }\n            translate([0, i * 5, -handle_length/4]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=10, r1=3, r2=2);\n                        cylinder(h=10, r1=2, r2=1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    handle();\n}\n\ntranslate([0, 0, handle_length/2 + 10]) {\n    blade(\"removal\");\n}\n\ntranslate([0, 0, -handle_length/2 - 7.5]) {\n    rotate([180, 0, 0]) {\n        blade(\"installation\");\n    }\n}\n\nribs();\n\n// Manufacturer markings\ncolor(\"#7F8C8D\") {\n    translate([0, -10.5, 0]) {\n        rotate([90, 0, 0]) {\n            linear_extrude(height=0.5) {\n                text(\"LENS-TOOL v2.0\", size=3, halign=\"center\");\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "prism",
    "openscad_code": "// Prism Tool - Optical Prism with Mount\n// Medium complexity realistic style\n\n// Main parameters\nprism_size = 40; // Base size of the prism\nmount_thickness = 3;\nhandle_length = 80;\nhandle_diameter = 15;\n\n// Colors\nprism_color = \"lightblue\";\nmount_color = \"gray\";\nhandle_color = \"darkslategray\";\n\n// Prism module - triangular prism\nmodule triangular_prism(height, base_width) {\n    // Create the triangular cross-section using difference\n    linear_extrude(height = height, center = true) {\n        difference() {\n            // Main square to cut from\n            square([base_width, base_width], center = true);\n            // Cut out the triangle\n            translate([-base_width/2, -base_width/2, 0])\n                polygon(points=[[0,0], [base_width,0], [base_width/2,base_width/2]]);\n        }\n    }\n}\n\n// Prism mount with adjustment mechanism\nmodule prism_mount(size, thickness) {\n    difference() {\n        // Main mount base\n        cube([size + thickness*2, size + thickness*2, thickness], center = true);\n        \n        // Cutout for prism\n        translate([0, 0, -thickness/2])\n            triangular_prism(size + 2, size + 2);\n        \n        // Mounting holes\n        for(i = [-1, 1]) {\n            translate([i*(size/2 + thickness/2), 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = thickness*2, d = 4, center = true);\n        }\n    }\n}\n\n// Handle with grip texture\nmodule handle(length, diameter) {\n    difference() {\n        // Main handle cylinder\n        color(handle_color)\n            cylinder(h = length, d = diameter, center = true);\n        \n        // Grip grooves\n        for(i = [1:5:length-5]) {\n            translate([0, 0, -length/2 + i])\n                cylinder(h = 2, d = diameter + 2, center = true);\n        }\n    }\n    \n    // End caps\n    translate([0, 0, -length/2 - 1])\n        cylinder(h = 2, d = diameter + 4, center = true);\n    translate([0, 0, length/2 + 1])\n        cylinder(h = 2, d = diameter + 4, center = true);\n}\n\n// Adjustment wheel\nmodule adjustment_wheel(radius, thickness) {\n    difference() {\n        cylinder(h = thickness, d = radius * 2, center = true);\n        \n        // Knurling pattern\n        for(i = [0:15:360]) {\n            rotate([0, 0, i])\n                translate([radius - 1, 0, 0])\n                    cube([2, 1, thickness + 0.1], center = true);\n        }\n        \n        // Center hole\n        cylinder(h = thickness + 0.1, d = 3, center = true);\n    }\n}\n\n// Assemble the prism tool\nunion() {\n    // Prism\n    color(prism_color)\n        translate([0, 0, mount_thickness/2 + prism_size/2])\n            rotate([0, 90, 0])\n                triangular_prism(prism_size, prism_size);\n    \n    // Mount\n    color(mount_color)\n        translate([0, 0, 0])\n            prism_mount(prism_size, mount_thickness);\n    \n    // Handle\n    translate([0, -prism_size/2 - handle_diameter/2 - 5, 0])\n        rotate([90, 0, 0])\n            handle(handle_length, handle_diameter);\n    \n    // Adjustment mechanism\n    translate([prism_size/2 + mount_thickness + 10, 0, 0])\n        rotate([0, 90, 0])\n            adjustment_wheel(8, 4);\n    \n    // Support struts\n    for(i = [-1, 1]) {\n        color(mount_color)\n            translate([i*(prism_size/4), -prism_size/4 - handle_diameter/2 - 2.5, 0])\n                cube([3, 5, mount_thickness], center = true);\n    }\n    \n    // Scale markings\n    for(i = [0:4]) {\n        color(\"black\")\n            translate([prism_size/2 + mount_thickness + 15, 0, -mount_thickness/2 + i*mount_thickness/4])\n                cube([0.5, 2, 0.2], center = true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "filter",
    "openscad_code": "// Realistic 3D-printable filter wrench for automotive oil filters\n// Overall length ~90 mm, fits 65â€“80 mm diameter filters\n// No support needed; all angles â‰¤45Â°\n\n$fn = 50;\n\nmodule handle() {\n    // Ergonomic grip with finger grooves\n    difference() {\n        union() {\n            // Main grip body\n            color(\"DarkSlateGray\")\n            hull() {\n                translate([-5,0,0]) cylinder(h = 80, d1 = 22, d2 = 25);\n                translate([5,0,0])  cylinder(h = 80, d1 = 22, d2 = 25);\n            }\n            // End cap flare\n            translate([0,0,85]) cylinder(h = 10, d1 = 25, d2 = 30);\n        }\n        // Finger grooves\n        for (z = [20:20:60])\n            translate([0,0,z])\n            rotate([90,0,0])\n            cylinder(h = 30, d = 6, $fn = 6);\n    }\n}\n\nmodule band() {\n    // Flexible band with teeth\n    color(\"Silver\")\n    difference() {\n        // Main curved band\n        difference() {\n            // Outer shell\n            rotate_extrude(angle = 200)\n            polygon([[72,0],[78,0],[78,8],[72,8]]);\n            // Tapered ends\n            translate([72,0,0]) cube([6,20,8], center = true);\n            mirror([1,0,0]) translate([72,0,0]) cube([6,20,8], center = true);\n        }\n        // Gripping teeth inside\n        for (a = [10:10:190])\n            rotate([0,0,a])\n            translate([73,0,4])\n            cube([2.5,1,4], center = true);\n    }\n}\n\nmodule pivot() {\n    // Hinge rivet\n    color(\"DimGray\")\n    translate([0,-20,8]) rotate([90,0,0]) cylinder(h = 10, d = 6);\n}\n\nmodule adjustment_screw() {\n    // Thumb wheel for tightening\n    color(\"Black\")\n    translate([-25,-20,4])\n    difference() {\n        cylinder(h = 8, d = 14);\n        // Knurl grooves\n        for (i = [0:15:360])\n            rotate([0,0,i])\n            translate([6,0,0])\n            cube([2,1,8], center = true);\n        // Center hole\n        cylinder(h = 10, d = 3);\n    }\n}\n\n// Assembly\nhandle();\ntranslate([0,0,85]) band();\npivot();\nadjustment_screw();",
    "renders": true
  },
  {
    "tool": "shield",
    "openscad_code": "// Realistic Shield Tool - Medium Complexity OpenSCAD Model\n// A warrior's shield with realistic proportions and 3D printable features\n\n// Shield parameters\nshield_width = 80;\nshield_height = 95;\nshield_thickness = 6;\nwall_thickness = 3;\n\n// Handle parameters\nhandle_length = 70;\nhandle_diameter = 12;\nhandle_offset = 15;\n\n// Boss (center dome) parameters\nboss_radius = 18;\nboss_height = 10;\n\n// Rivet parameters\nrivet_radius = 2.5;\nrivet_height = 1.5;\nnum_rivets = 8;\n\n// Shield face with rounded edges\nmodule shield_face() {\n    difference() {\n        // Main shield body\n        union() {\n            // Central rounded rectangle\n            translate([0, 0, shield_thickness/2])\n                minkowski() {\n                    cube([shield_width-20, shield_height-30, shield_thickness], center=true);\n                    sphere(10);\n                }\n            \n            // Top curved extension\n            translate([0, shield_height/2 - 10, 0])\n                rotate_extrude(angle=180)\n                    translate([shield_width/2 - 25, 0, 0])\n                        circle(r=25);\n            \n            // Bottom pointed extension\n            translate([0, -shield_height/2 + 15, -5])\n                rotate([90, 0, 0])\n                    cylinder(h=30, r1=25, r2=0, center=true);\n        }\n        \n        // Hollow out the shield\n        scale([0.85, 0.85, 0.9])\n            minkowski() {\n                cube([shield_width-20, shield_height-30, shield_thickness+2], center=true);\n                sphere(8);\n            }\n    }\n}\n\n// Central boss/dome\nmodule shield_boss() {\n    color(\"silver\")\n    difference() {\n        // Main dome\n        translate([0, 0, boss_height/2])\n            scale([1, 1, 0.8])\n                sphere(r=boss_radius);\n        \n        // Hollow interior\n        translate([0, 0, boss_height/2])\n            scale([0.8, 0.8, 0.6])\n                sphere(r=boss_radius-2);\n    }\n}\n\n// Handle with grip texture\nmodule shield_handle() {\n    color(\"brown\")\n    translate([0, handle_offset, -shield_thickness/2 - handle_diameter/2])\n        rotate([90, 0, 0])\n            difference() {\n                // Main handle\n                cylinder(h=handle_length, d=handle_diameter, center=true);\n                \n                // Grip grooves\n                for(i = [-30:10:30]) {\n                    translate([0, 0, i])\n                        cube([handle_diameter*2, handle_diameter/3, 2], center=true);\n                }\n            }\n}\n\n// Handle brackets\nmodule handle_brackets() {\n    color(\"silver\")\n    union() {\n        // Left bracket\n        translate([-shield_width/4, handle_offset, -shield_thickness/2 - handle_diameter/2])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=handle_diameter+4, d=handle_diameter+6);\n                    cylinder(h=handle_diameter+5, d=handle_diameter);\n                }\n        \n        // Right bracket\n        translate([shield_width/4, handle_offset, -shield_thickness/2 - handle_diameter/2])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=handle_diameter+4, d=handle_diameter+6);\n                    cylinder(h=handle_diameter+5, d=handle_diameter);\n                }\n    }\n}\n\n// Decorative rivets around the edge\nmodule shield_rivets() {\n    color(\"silver\")\n    for(i = [0:360/num_rivets:360-360/num_rivets]) {\n        rotate([0, 0, i])\n            translate([shield_width/2 - 10, 0, shield_thickness/2])\n                cylinder(h=rivet_height, r=rivet_radius);\n    }\n    \n    // Additional rivets on boss perimeter\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([boss_radius + 5, 0, shield_thickness/2])\n                cylinder(h=rivet_height, r=rivet_radius);\n    }\n}\n\n// Shield surface texture (subtle wood grain effect)\nmodule shield_texture() {\n    color(\"burlywood\")\n    translate([0, 0, shield_thickness/2 + 0.5])\n        for(i = [-shield_height/2:5:shield_height/2]) {\n            rotate([0, 0, 0])\n                translate([0, i, 0])\n                    cube([shield_width, 1, 0.5], center=true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Shield body\n    color(\"burlywood\")\n    shield_face();\n    \n    // Boss\n    shield_boss();\n    \n    // Handle\n    shield_handle();\n    \n    // Handle brackets\n    handle_brackets();\n    \n    // Rivets\n    shield_rivets();\n    \n    // Surface texture\n    shield_texture();\n}\n\n// Print orientation helper (comment out for final print)\n%translate([0, 0, -shield_thickness])\n    cube([shield_width+20, shield_height+20, 1], center=true);",
    "renders": true
  },
  {
    "tool": "guard",
    "openscad_code": "// Guard tool - realistic style, medium complexity\n// A protective hand guard for woodworking or crafting\n\n// Parameters\nhandle_length = 80;\nhandle_diameter = 25;\nguard_width = 60;\nguard_height = 40;\nguard_thickness = 8;\nblade_slot_width = 3;\nblade_slot_depth = 30;\nfinger_grooves = 5;\ngrip_texture_depth = 1;\n\n// Main assembly\nmodule guard_tool() {\n    color(\"silver\") {\n        union() {\n            // Handle\n            handle();\n            \n            // Guard plate\n            guard_plate();\n            \n            // Reinforcement ribs\n            reinforcement_ribs();\n            \n            // Mounting hardware\n            mounting_bolts();\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Finger grooves\n        for(i=[0:finger_grooves-1]) {\n            rotate([0, 0, i * (360/finger_grooves)])\n            translate([handle_diameter/2 - grip_texture_depth, 0, handle_length/2])\n            rotate([90, 0, 0])\n            cylinder(h=handle_diameter/2, d1=handle_diameter/3, d2=handle_diameter/4, $fn=16);\n        }\n        \n        // Center hole for weight reduction\n        cylinder(h=handle_length, d=handle_diameter/3, $fn=32);\n    }\n    \n    // Grip texture rings\n    for(i=[0:3]) {\n        translate([0, 0, i * (handle_length/4) + handle_length/8])\n        difference() {\n            cylinder(h=3, d=handle_diameter + 2, $fn=32);\n            cylinder(h=3.5, d=handle_diameter - 2, $fn=32);\n        }\n    }\n}\n\n// Main guard plate\nmodule guard_plate() {\n    translate([0, handle_diameter/2 + guard_thickness/2, handle_length - guard_height/2])\n    rotate([0, 90, 0])\n    difference() {\n        // Main plate\n        cube([guard_width, guard_height, guard_thickness], center=true);\n        \n        // Blade slot\n        translate([0, 0, 0])\n        cube([blade_slot_width, blade_slot_depth, guard_thickness + 2], center=true);\n        \n        // Corner chamfers\n        for(x=[-1, 1])\n        for(y=[-1, 1])\n        translate([x * (guard_width/2 - 5), y * (guard_height/2 - 5), 0])\n        cylinder(h=guard_thickness + 2, r=5, $fn=16);\n        \n        // Lightening holes\n        for(i=[-1, 1])\n        for(j=[-1, 1])\n        translate([i * guard_width/4, j * guard_height/4, 0])\n        cylinder(h=guard_thickness + 2, d=8, $fn=16);\n    }\n}\n\n// Reinforcement ribs\nmodule reinforcement_ribs() {\n    color(\"gray\") {\n        for(angle=[-30, 30]) {\n            rotate([0, angle, 0])\n            translate([0, handle_diameter/2, handle_length - 20])\n            cube([guard_thickness, 15, 40], center=true);\n        }\n    }\n}\n\n// Mounting bolts\nmodule mounting_bolts() {\n    color(\"black\") {\n        // Top bolts\n        for(x=[-20, 20])\n        translate([x, handle_diameter/2 + guard_thickness + 3, handle_length - 10])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=6, $fn=12);\n        \n        // Bottom bolts\n        for(x=[-20, 20])\n        translate([x, handle_diameter/2 + guard_thickness + 3, handle_length - 30])\n        rotate([90, 0, 0])\n        cylinder(h=8, d=6, $fn=12);\n    }\n}\n\n// Render the guard tool\nguard_tool();",
    "renders": true
  },
  {
    "tool": "hood",
    "openscad_code": "// Realistic Hood Tool - Medium Complexity OpenSCAD Model\n// A hood tool with functional features for 3D printing\n\n$fn = 32;\n\n// Main colors\ncolor_hood = [0.85, 0.85, 0.85];  // Light gray\ncolor_handle = [0.2, 0.2, 0.2];   // Dark gray\ncolor_grip = [0.1, 0.1, 0.1];     // Black\ncolor_clip = [0.7, 0.7, 0.7];     // Medium gray\n\n// Overall dimensions\nhood_length = 75;\nhood_width = 45;\nhood_height = 25;\nhandle_length = 60;\nhandle_diameter = 12;\n\nmodule hood_body() {\n    color(color_hood)\n    union() {\n        // Main hood shell\n        translate([0, 0, 0])\n        difference() {\n            // Outer shell\n            hull() {\n                cube([hood_length, hood_width, hood_height], center = true);\n                translate([hood_length/2 - 5, 0, hood_height/2 - 5])\n                sphere(d = 15);\n            }\n            \n            // Inner cavity\n            translate([0, 0, -2])\n            cube([hood_length - 8, hood_width - 8, hood_height - 2], center = true);\n            \n            // Front opening\n            translate([hood_length/2, 0, 0])\n            cube([10, hood_width - 10, hood_height - 4], center = true);\n        }\n        \n        // Reinforcement ribs\n        for (i = [-1:1]) {\n            translate([i * 15, 0, hood_height/2 - 2])\n            cube([3, hood_width - 6, 4], center = true);\n        }\n    }\n}\n\nmodule handle_assembly() {\n    color(color_handle)\n    union() {\n        // Main handle shaft\n        translate([-hood_length/2 - handle_length/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = handle_length, d = handle_diameter, center = true);\n        \n        // Handle grip texture\n        color(color_grip)\n        for (i = [0:5:handle_length - 10]) {\n            translate([-hood_length/2 - handle_length + 5 + i, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 3, d = handle_diameter + 2, center = true);\n        }\n        \n        // End cap\n        translate([-hood_length/2 - handle_length, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 5, d = handle_diameter + 4, center = true);\n    }\n}\n\nmodule mounting_clip() {\n    color(color_clip)\n    union() {\n        // Main clip body\n        translate([hood_length/2 - 10, 0, -hood_height/2 + 5])\n        cube([15, 8, 10], center = true);\n        \n        // Clip spring detail\n        translate([hood_length/2 - 5, 0, -hood_height/2 + 10])\n        difference() {\n            cube([5, 6, 5], center = true);\n            translate([0, 0, 2.5])\n            cylinder(h = 5.1, d = 3, center = true);\n        }\n        \n        // Mounting holes\n        for (i = [-1:1]) {\n            translate([hood_length/2 - 10, (i * 3) + 4, -hood_height/2 + 5])\n            cylinder(h = 11, d = 2, center = true);\n        }\n    }\n}\n\nmodule adjustment_mechanism() {\n    color([0.5, 0.5, 0.5])\n    union() {\n        // Adjustment wheel\n        translate([-hood_length/2 + 10, hood_width/2 + 8, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 5, d = 12, center = true);\n        \n        // Wheel knurling\n        for (i = [0:15:360]) {\n            rotate([0, 0, i])\n            translate([-hood_length/2 + 10, hood_width/2 + 8 + 5.5, 0])\n            cube([0.5, 1, 5], center = true);\n        }\n        \n        // Adjustment rod\n        translate([-hood_length/2 + 10, hood_width/2 + 5, 0])\n        rotate([0, 90, 0])\n        cylinder(h = 20, d = 3, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    hood_body();\n    handle_assembly();\n    mounting_clip();\n    adjustment_mechanism();\n    \n    // Alignment marks\n    color([0.3, 0.3, 0.3])\n    for (i = [0:2]) {\n        translate([-hood_length/2 + 15 + (i * 15), 0, hood_height/2 + 1])\n        cube([2, 2, 1], center = true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "canopy",
    "openscad_code": "$fn = 32;\n\n// Colors\ncanopyColor = \"DarkOliveGreen\";\nframeColor = \"SlateGray\";\nhandleColor = \"Black\";\n\n// Overall dimensions\ncanopyLength = 85;\ncanopyHeight = 50;\nhandleLength = 35;\nhandleDiameter = 8;\n\nmodule canopyTool() {\n    // Main canopy frame - arch shape\n    color(frameColor)\n    translate([0, 0, 0])\n    difference() {\n        union() {\n            // Main arch tube\n            rotate([0, 90, 0])\n            cylinder(h=canopyLength, d=3, center=true);\n            \n            // Side supports\n            translate([0, -canopyLength/2, 0])\n            cylinder(h=canopyHeight, d=3, center=false);\n            translate([0, canopyLength/2, 0])\n            cylinder(h=canopyHeight, d=3, center=false);\n            \n            // Cross bracing\n            for(i = [-1, 1]) {\n                translate([0, i*canopyLength/4, canopyHeight/3])\n                rotate([0, 90, 0])\n                cylinder(h=canopyLength/2, d=2, center=true);\n            }\n        }\n        \n        // Remove bottom for canopy fabric\n        translate([0, 0, -1])\n        cube([canopyLength+5, canopyLength+5, 2], center=true);\n    }\n    \n    // Canopy fabric\n    color(canopyColor)\n    translate([0, 0, 1])\n    difference() {\n        // Main canopy cover\n        translate([0, 0, canopyHeight/2])\n        scale([1, 1, 0.5])\n        sphere(d=canopyLength);\n        \n        // Cut bottom flat\n        translate([0, 0, -canopyHeight/2])\n        cube([canopyLength*2, canopyLength*2, canopyHeight], center=true);\n        \n        // Cut sides for realistic shape\n        translate([canopyLength/2+5, 0, 0])\n        cube([canopyLength, canopyLength*2, canopyHeight*2], center=true);\n        translate([-canopyLength/2-5, 0, 0])\n        cube([canopyLength, canopyLength*2, canopyHeight*2], center=true);\n    }\n    \n    // Handle grip\n    color(handleColor)\n    translate([0, 0, -handleLength/2-5])\n    cylinder(h=handleLength, d=handleDiameter, center=true);\n    \n    // Handle grip texture rings\n    color(handleColor)\n    for(i = [0:3]) {\n        translate([0, 0, -handleLength/2 + i*8 + 4])\n        cylinder(h=2, d=handleDiameter+2, center=true);\n    }\n    \n    // Hook mechanism\n    color(frameColor)\n    translate([0, 0, -handleLength-8])\n    difference() {\n        sphere(d=6);\n        translate([-3, 0, 0])\n        cube([6, 6, 6], center=true);\n    }\n    \n    // Adjustment mechanism detail\n    color(frameColor)\n    translate([0, 0, canopyHeight/2+8])\n    rotate([0, 90, 0])\n    cylinder(h=8, d=5, center=true);\n    \n    // Canopy edge reinforcement\n    color(frameColor)\n    translate([0, 0, canopyHeight-2])\n    difference() {\n        cylinder(h=4, d=canopyLength-5);\n        cylinder(h=5, d=canopyLength-15);\n    }\n}\n\ncanopyTool();",
    "renders": true
  },
  {
    "tool": "awning",
    "openscad_code": "$fn = 50;\n\n// Overall dimensions (mm)\nawning_width = 80;\nawning_depth = 50;\nawning_height = 15;\nframe_thickness = 2;\nfabric_thickness = 1;\n\n// Colors\nframe_color = [0.6, 0.6, 0.6];  // aluminum\nfabric_color = [0.9, 0.9, 0.9]; // canvas\nmount_color = [0.3, 0.3, 0.3];  // steel\n\nmodule frame_bar(length, width, height) {\n    cube([length, width, height], center = true);\n}\n\nmodule roller_diameter() = 6;\n\nmodule awning_frame() {\n    // Main frame - front and back bars\n    translate([0, awning_depth/2 - frame_thickness/2, awning_height/2])\n        frame_bar(awning_width, frame_thickness, frame_thickness*2);\n    \n    translate([0, -awning_depth/2 + frame_thickness/2, awning_height/2])\n        frame_bar(awning_width, frame_thickness, frame_thickness*2);\n    \n    // Side bars\n    translate([awning_width/2 - frame_thickness/2, 0, awning_height/2])\n        frame_bar(frame_thickness, awning_depth - frame_thickness*2, frame_thickness*2);\n    \n    translate([-awning_width/2 + frame_thickness/2, 0, awning_height/2])\n        frame_bar(frame_thickness, awning_depth - frame_thickness*2, frame_thickness*2);\n}\n\nmodule support_arms() {\n    // Left support arm\n    translate([-awning_width/2 + 10, -awning_depth/2, -5])\n        rotate([0, 45, 0])\n        cube([20, frame_thickness, frame_thickness], center = true);\n    \n    // Right support arm\n    translate([awning_width/2 - 10, -awning_depth/2, -5])\n        rotate([0, 45, 0])\n        cube([20, frame_thickness, frame_thickness], center = true);\n}\n\nmodule mounting_brackets() {\n    // Left bracket\n    difference() {\n        translate([-awning_width/2 + 5, -awning_depth/2 - 5, -awning_height/2 - 5])\n            cube([10, 10, 10]);\n        \n        // Mounting hole\n        translate([-awning_width/2 + 5, -awning_depth/2 - 5, -awning_height/2 - 2])\n            cylinder(h = 10, r = 2, center = true);\n    }\n    \n    // Right bracket\n    difference() {\n        translate([awning_width/2 - 5, -awning_depth/2 - 5, -awning_height/2 - 5])\n            cube([10, 10, 10]);\n        \n        // Mounting hole\n        translate([awning_width/2 - 5, -awning_depth/2 - 5, -awning_height/2 - 2])\n            cylinder(h = 10, r = 2, center = true);\n    }\n}\n\nmodule fabric() {\n    // Main awning fabric\n    translate([0, 0, awning_height - fabric_thickness/2])\n        cube([awning_width - frame_thickness*2, awning_depth - frame_thickness*2, fabric_thickness], center = true);\n    \n    // Roller tube at front\n    translate([0, awning_depth/2 - frame_thickness/2, awning_height - roller_diameter()/2 - fabric_thickness])\n        cylinder(h = awning_width - frame_thickness*2, r = roller_diameter()/2, center = true);\n}\n\nmodule awning_tool() {\n    // Frame\n    color(frame_color)\n    awning_frame();\n    \n    // Support arms\n    color(frame_color)\n    support_arms();\n    \n    // Mounting brackets\n    color(mount_color)\n    mounting_brackets();\n    \n    // Fabric\n    color(fabric_color)\n    fabric();\n    \n    // Small wind sensor detail\n    color([0.2, 0.2, 0.2])\n    translate([0, awning_depth/2 - 2, awning_height + 3])\n        sphere(r = 2);\n}\n\n// Render the complete awning tool\nawning_tool();",
    "renders": true
  },
  {
    "tool": "tent",
    "openscad_code": "// Tent tool - camping stake puller\n// Realistic style, medium complexity\n\n$fn = 36;\n\n// Main colors\ncolor_tent = [0.2, 0.4, 0.7];\ncolor_handle = [0.1, 0.1, 0.1];\ncolor_metal = [0.7, 0.7, 0.7];\ncolor_grip = [0.3, 0.3, 0.3];\n\nmodule tent_stake_puller() {\n    // Handle grip\n    difference() {\n        color(color_handle) \n        cylinder(h = 60, d = 25);\n        \n        // Grip texture\n        for (i = [0:2:58]) {\n            translate([0, 0, i])\n            cylinder(h = 1, d = 24);\n        }\n    }\n    \n    // Handle end cap\n    translate([0, 0, 60])\n    color(color_grip)\n    cylinder(h = 8, d = 28);\n    \n    // Shaft\n    translate([0, 0, 68])\n    color(color_metal)\n    cylinder(h = 40, d = 6);\n    \n    // Hook mechanism\n    translate([0, 0, 108])\n    union() {\n        // Main hook\n        rotate([90, 0, 0])\n        color(color_metal)\n        difference() {\n            cylinder(h = 25, d = 10);\n            translate([0, 0, -1])\n            cylinder(h = 27, d = 8);\n        }\n        \n        // Hook tip\n        rotate([90, 0, 0])\n        translate([0, 20, 0])\n        color(color_metal)\n        cylinder(h = 8, d1 = 10, d2 = 8);\n        \n        // Reinforcement ring\n        rotate([90, 0, 0])\n        translate([0, 10, 0])\n        color(color_metal)\n        cylinder(h = 5, d = 12);\n    }\n    \n    // Tent stake storage slots\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([12.5, 0, 20])\n        color(color_tent) {\n            difference() {\n                cube([3, 8, 40], center = true);\n                translate([0, 0, -20])\n                cube([2.5, 7.5, 40.5], center = true);\n            }\n        }\n    }\n    \n    // Hanging loop\n    translate([0, 0, -5])\n    color(color_metal)\n    rotate_extrude()\n    translate([15, 0, 0])\n    circle(r = 2);\n}\n\n// Build the tool\ntent_stake_puller();",
    "renders": true
  },
  {
    "tool": "shelter",
    "openscad_code": "// Emergency Shelter Tool (Multi-tool for Survival)\n// Includes hammer, pry-bar, wrench, and tent stake puller\n// Designed for 3D printing - no support needed\n\n$fn = 36;\n\nmodule handle() {\n    // Main grip handle with texture\n    color(\"darkslategray\")\n    difference() {\n        union() {\n            // Main handle body\n            cylinder(h=70, d1=22, d2=20);\n            // Grip rings\n            for(i = [5:10:65]) {\n                translate([0, 0, i])\n                cylinder(h=3, d=24);\n            }\n        }\n        // Hollow center for weight reduction\n        cylinder(h=68, d=16);\n    }\n}\n\nmodule hammer_head() {\n    // Hammer head with nail puller\n    color(\"silver\")\n    union() {\n        // Main hammer head\n        translate([0, 0, 70])\n        cube([35, 25, 25], center=true);\n        \n        // Claw for nail pulling\n        translate([17, 0, 70])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=20, d=12);\n            translate([0, 0, -1])\n            cylinder(h=22, d=8);\n        }\n        \n        // Hammer face\n        translate([-17, 0, 70])\n        cylinder(h=5, d=20);\n    }\n}\n\nmodule pry_bar() {\n    // Flat pry bar end\n    color(\"silver\")\n    translate([0, 0, -15])\n    rotate([0, 90, 0])\n    union() {\n        // Main bar\n        cube([30, 8, 3], center=true);\n        \n        // Chisel tip\n        translate([15, 0, 0])\n        cube([5, 8, 3], center=true);\n        \n        // Nail puller slot\n        translate([12, 0, 0])\n        cube([6, 2, 3], center=true);\n    }\n}\n\nmodule wrench_jaws() {\n    // Adjustable wrench head\n    color(\"silver\")\n    translate([0, 25, 30])\n    rotate([0, 90, 0])\n    difference() {\n        union() {\n            // Main wrench body\n            cube([20, 15, 8], center=true);\n            \n            // Fixed jaw\n            translate([10, -5, 0])\n            cube([5, 10, 8], center=true);\n        }\n        // Adjustable jaw channel\n        translate([5, 0, 0])\n        cube([10, 15, 8], center=true);\n        \n        // Hex bolt grip\n        translate([10, 0, 0])\n        rotate([0, 0, 30])\n        cylinder(h=8, d=10, $fn=6);\n    }\n}\n\nmodule tent_stake_puller() {\n    // Hook for pulling tent stakes\n    color(\"silver\")\n    translate([0, -25, 30])\n    rotate([0, 90, 0])\n    difference() {\n        // Main hook body\n        cylinder(h=15, d=8, center=true);\n        \n        // Hook opening\n        translate([0, 0, -5])\n        cube([20, 5, 10], center=true);\n    }\n}\n\nmodule ruler_markings() {\n    // Measurement markings in cm\n    color(\"black\")\n    for(i = [0:5:50]) {\n        translate([-5, 0, i])\n        cube([10, 1, 0.5], center=true);\n    }\n    for(i = [0:10:50]) {\n        translate([-7, 0, i])\n        cube([14, 1, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    handle();\n    hammer_head();\n    pry_bar();\n    wrench_jaws();\n    tent_stake_puller();\n    ruler_markings();\n}",
    "renders": true
  },
  {
    "tool": "hut",
    "openscad_code": "// Hut Tool - Realistic Style\n// A handheld tool shaped like a small hut for 3D printing\n\n// Overall dimensions\nhut_width = 40;\nhut_length = 50;\nhut_height = 60;\nwall_thickness = 2;\n\n// Colors\nroof_color = \"#8B4513\";\nwall_color = \"#DEB887\";\ndoor_color = \"#A0522D\";\nwindow_color = \"#87CEEB\";\nhandle_color = \"#5D4037\";\n\n// Main hut tool body\nmodule hut_tool() {\n    // Hut base\n    difference() {\n        cube([hut_width, hut_length, hut_height/2]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, 0])\n            cube([hut_width-2*wall_thickness, hut_length-2*wall_thickness, hut_height/2]);\n    }\n    \n    // Roof\n    translate([-5, -5, hut_height/2]) {\n        color(roof_color) {\n            difference() {\n                // Main roof block\n                cube([hut_width+10, hut_length+10, hut_height/4]);\n                \n                // Angled roof cuts\n                for(i = [0:1]) {\n                    rotate([0, 45-i*90, 0])\n                        translate([-20, -20, 0])\n                            cube([hut_width*2, hut_length*2, hut_height/2]);\n                }\n            }\n            \n            // Ridge beam\n            translate([hut_width/2-2, hut_length/2-2, hut_height/4-2])\n                cube([4, hut_length+4, 4]);\n        }\n    }\n    \n    // Front wall\n    translate([0, 0, hut_height/2])\n        difference() {\n            cube([hut_width, wall_thickness, hut_height/2]);\n            \n            // Door\n            translate([hut_width/2-5, -1, 5])\n                cube([10, wall_thickness+1, 20]);\n                \n            // Windows\n            translate([10, -1, 25])\n                cube([8, wall_thickness+1, 8]);\n            translate([hut_width-18, -1, 25])\n                cube([8, wall_thickness+1, 8]);\n        }\n    \n    // Side walls\n    for(side = [0,1]) {\n        translate([side*(hut_width-wall_thickness), wall_thickness, hut_height/2])\n            cube([wall_thickness, hut_length-2*wall_thickness, hut_height/2]);\n    }\n    \n    // Back wall\n    translate([0, hut_length-wall_thickness, hut_height/2])\n        cube([hut_width, wall_thickness, hut_height/2]);\n}\n\n// Handle for tool functionality\nmodule tool_handle() {\n    color(handle_color) {\n        // Main handle\n        translate([hut_width/2-5, -20, 0])\n            cylinder(h=20, r1=5, r2=3);\n            \n        // Handle grip rings\n        for(i = [0:2]) {\n            translate([hut_width/2-5, -20+i*6, 0])\n                rotate([90,0,0])\n                    cylinder(h=2, r=5.5);\n        }\n    }\n}\n\n// Window details\nmodule windows() {\n    color(window_color) {\n        translate([10+4, -0.5, 25+4])\n            cube([0.5, 1, 0.5]);\n        translate([hut_width-18+4, -0.5, 25+4])\n            cube([0.5, 1, 0.5]);\n    }\n}\n\n// Door details\nmodule door() {\n    color(door_color) {\n        translate([hut_width/2-5+5, -0.5, 5+10])\n            cube([0.5, 1, 0.5]);\n            \n        // Door knob\n        translate([hut_width/2-5+8, -0.5, 5+12])\n            sphere(1);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    color(\"#696969\") {\n        translate([hut_width-10, hut_length-10, hut_height/2+hut_height/4-5])\n            difference() {\n                cube([6, 6, 10]);\n                translate([1, 1, 0])\n                    cube([4, 4, 10]);\n            }\n    }\n}\n\n// Assembly\nhut_tool();\ntool_handle();\nwindows();\ndoor();\nchimney();",
    "renders": true
  },
  {
    "tool": "shed",
    "openscad_code": "// Shed tool - medium complexity realistic style\n// A small garden shed with tools and details\n\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 0.5;\n\n// Main shed body\nmodule shed_body() {\n    color(\"#8B4513\")  // Brown wood color\n    difference() {\n        // Main structure\n        cube([50, 40, 35]);\n        \n        // Door opening\n        translate([48, 10, 0])\n            cube([3, 20, 25]);\n        \n        // Window\n        translate([10, 38, 15])\n            cube([10, 3, 8]);\n    }\n    \n    // Roof\n    color(\"#A52A2A\")  // Red roof\n    translate([-5, -5, 35])\n        rotate([0, 0, 0])\n        linear_extrude(height=2)\n        polygon(points=[[0,0], [60,0], [30,20]]);\n}\n\n// Door details\nmodule shed_door() {\n    color(\"#654321\")  // Dark wood\n    translate([48, 10, 0])\n        cube([2, 20, 25]);\n    \n    // Door handle\n    color(\"#FFD700\")  // Gold\n    translate([50, 20, 15])\n        sphere(1);\n}\n\n// Window frame\nmodule window_frame() {\n    color(\"#FFFFFF\")  // White\n    translate([10, 37, 15])\n        cube([10, 2, 8]);\n    \n    translate([10, 37, 15])\n        cube([2, 6, 8]);\n    \n    translate([18, 37, 15])\n        cube([2, 6, 8]);\n}\n\n// Tools inside shed\nmodule tools() {\n    // Shovel\n    color(\"#C0C0C0\")  // Silver\n    translate([25, 25, 0])\n        rotate([90, 0, 0])\n        cylinder(h=25, r=1);\n    \n    translate([25, 25, 25])\n        difference() {\n            cube([8, 1, 10], center=true);\n            translate([0, 0, 5])\n                cube([6, 3, 5], center=true);\n        }\n    \n    // Rake\n    color(\"#8B4513\")  // Wood\n    translate([35, 25, 0])\n        rotate([90, 0, 0])\n        cylinder(h=25, r=0.8);\n    \n    color(\"#696969\")  // Dark metal\n    translate([35, 25, 25])\n        for(i=[-2:1:2])\n            translate([i*2, 0, 0])\n                cube([0.5, 0.5, 5]);\n    \n    // Wheelbarrow\n    color(\"#B8860B\")  // Dark gold\n    translate([15, 5, 5])\n        rotate([0, 15, 0])\n        difference() {\n            cube([12, 8, 5]);\n            translate([1, 1, 3])\n                cube([10, 6, 3]);\n        }\n    \n    // Wheelbarrow handles\n    translate([2, 5, 8])\n        rotate([0, 30, 0])\n        cylinder(h=12, r=0.5);\n    \n    translate([2, 13, 8])\n        rotate([0, 30, 0])\n        cylinder(h=12, r=0.5);\n}\n\n// Base/foundation\nmodule foundation() {\n    color(\"#808080\")  // Gray concrete\n    translate([-2, -2, -3])\n        cube([54, 44, 3]);\n}\n\n// Assemble the shed\nscale([scale_factor, scale_factor, scale_factor]) {\n    foundation();\n    shed_body();\n    shed_door();\n    window_frame();\n    tools();\n}",
    "renders": true
  },
  {
    "tool": "barn",
    "openscad_code": "// Barn Tool - Realistic Style with Medium Complexity\n// A traditional hay fork for moving loose hay in a barn\n\n// Overall dimensions\nfork_length = 80;\nhandle_length = 60;\nhandle_diameter = 8;\nfork_width = 15;\nfork_height = 20;\n\n// Colors\nwood_color = [139/255, 69/255, 19/255];\nmetal_color = [169/255, 169/255, 169/255];\nrust_color = [183/255, 65/255, 14/255];\n\nmodule handle() {\n    // Main wooden handle\n    color(wood_color) {\n        // Handle shaft with slight taper\n        cylinder(h=handle_length, d1=handle_diameter, d2=handle_diameter*0.9, $fn=32);\n        \n        // Handle grip end - slightly thicker\n        translate([0, 0, handle_length]) {\n            cylinder(h=15, d=handle_diameter*1.2, $fn=32);\n            \n            // Grip ring detail\n            translate([0, 0, 5]) {\n                difference() {\n                    cylinder(h=3, d=handle_diameter*1.3, $fn=32);\n                    cylinder(h=3.2, d=handle_diameter*1.1, $fn=32);\n                }\n            }\n        }\n    }\n}\n\nmodule metal_socket() {\n    // Metal socket where handle meets fork\n    color(rust_color) {\n        translate([0, 0, handle_length-5]) {\n            difference() {\n                cylinder(h=15, d=handle_diameter*1.5, $fn=32);\n                cylinder(h=16, d=handle_diameter*0.9, $fn=32);\n            }\n            \n            // Rivet detail\n            for(i=[-60:60:120]) {\n                rotate([0, 0, i]) {\n                    translate([handle_diameter*0.6, 0, 7.5]) {\n                        sphere(d=2, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule fork_tines() {\n    // Fork head with multiple curved tines\n    color(metal_color) {\n        translate([0, 0, handle_length+10]) {\n            // Fork base plate\n            cube([fork_width*2, 8, 5], center=true);\n            \n            // Individual tines\n            for(i=[-2:1:2]) {\n                translate([i*fork_width/2, 0, 0]) {\n                    union() {\n                        // Tine base\n                        cube([2, 6, 5], center=true);\n                        \n                        // Curved tine\n                        translate([0, 3, 2.5]) {\n                            rotate([0, 90, 0]) {\n                                difference() {\n                                    // Outer curve\n                                    cylinder(h=15, d=2, $fn=8);\n                                    \n                                    // Inner bevel for sharp edge\n                                    translate([-0.3, -0.3, 0]) {\n                                        cylinder(h=15.5, d=1.4, $fn=8);\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // Tine tip\n                        translate([0, 3, 17.5]) {\n                            sphere(d=2.5, $fn=8);\n                        }\n                    }\n                }\n            }\n            \n            // Reinforcement plate\n            translate([0, -5, -2.5]) {\n                cube([fork_width*2.5, 3, 2], center=true);\n            }\n        }\n    }\n}\n\nmodule wear_marks() {\n    // Realistic wear and tear on the tines\n    color(rust_color) {\n        for(i=[-2:1:2]) {\n            translate([i*fork_width/2, 3, 12]) {\n                sphere(d=0.8, $fn=8);\n            }\n        }\n    }\n}\n\n// Assemble the barn tool\nunion() {\n    handle();\n    metal_socket();\n    fork_tines();\n    wear_marks();\n}\n\n// Add some wood grain texture details\ntranslate([0, -handle_diameter/2, handle_length/2]) {\n    rotate([0, 90, 0]) {\n        for(i=[0:5:handle_length]) {\n            color([0.5, 0.3, 0.1]) {\n                translate([0, 0, i]) {\n                    scale([1, 0.01, 1]) {\n                        cylinder(h=handle_diameter, d=handle_diameter*2, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "coop",
    "openscad_code": "// Chicken Coop Tool - Realistic Style\n// A medium-complexity 3D printable chicken coop maintenance tool\n\n// Overall dimensions\ncoop_length = 80;\ncoop_width = 60;\ncoop_height = 50;\nwall_thickness = 2;\n\n// Colors\ncoop_color = \"BurlyWood\";\nroof_color = \"FireBrick\";\ndoor_color = \"SaddleBrown\";\nhandle_color = \"Black\";\nwire_color = \"Silver\";\n\nmodule coop_body() {\n    // Main coop structure\n    color(coop_color) {\n        // Base platform\n        cube([coop_length, coop_width, 5]);\n        \n        // Back wall\n        translate([0, 0, 0])\n            cube([coop_length, wall_thickness, coop_height]);\n        \n        // Side walls\n        translate([0, 0, 0])\n            cube([wall_thickness, coop_width, coop_height]);\n        translate([coop_length-wall_thickness, 0, 0])\n            cube([wall_thickness, coop_width, coop_height]);\n            \n        // Front wall with door opening\n        translate([0, coop_width-wall_thickness, 0]) {\n            difference() {\n                cube([coop_length, wall_thickness, coop_height]);\n                // Door opening\n                translate([coop_length*0.4, -wall_thickness, 0])\n                    cube([coop_length*0.2, wall_thickness+1, coop_height*0.7]);\n            }\n        }\n    }\n}\n\nmodule roof() {\n    color(roof_color) {\n        // Roof panels\n        translate([-5, -5, coop_height])\n            rotate([0, 45, 0])\n            cube([coop_length+10, coop_width+10, wall_thickness]);\n            \n        translate([-5, -5, coop_height])\n            rotate([0, -45, 0])\n            cube([coop_length+10, coop_width+10, wall_thickness]);\n            \n        // Ridge cap\n        translate([-5, (coop_width+10)/2-2.5, coop_height+20])\n            cube([coop_length+10, 5, 5]);\n    }\n}\n\nmodule door() {\n    color(door_color) {\n        // Door panel\n        translate([coop_length*0.4, coop_width-wall_thickness-1, 0])\n            cube([coop_length*0.2, 1, coop_height*0.7]);\n            \n        // Door handle\n        color(handle_color)\n            translate([coop_length*0.5-2, coop_width-wall_thickness-2, coop_height*0.35])\n                cylinder(h=3, r=1.5);\n    }\n}\n\nmodule wire_mesh() {\n    color(wire_color) {\n        // Front mesh area above door\n        for(i = [0:5:coop_length-5]) {\n            for(j = [0:5:coop_height*0.25]) {\n                translate([i, coop_width-wall_thickness+0.5, coop_height*0.7+j])\n                    sphere(r=0.5);\n            }\n        }\n    }\n}\n\nmodule nesting_boxes() {\n    color(\"Tan\") {\n        // Three nesting boxes\n        for(i = [0:2]) {\n            translate([10 + i*25, wall_thickness, 5])\n                cube([20, 15, 10]);\n        }\n        \n        // Dividers\n        for(i = [0:2]) {\n            translate([30 + i*25, wall_thickness, 5])\n                cube([wall_thickness, 15, 10]);\n        }\n    }\n}\n\nmodule perch() {\n    color(\"SaddleBrown\") {\n        // Perch rod\n        translate([coop_length*0.7, coop_width*0.3, 10])\n            rotate([0, 90, 0])\n            cylinder(h=30, r=1.5);\n            \n        // Support brackets\n        for(side = [0, 1]) {\n            translate([coop_length*0.7, coop_width*0.3 + (side ? 15 : -15), 5])\n                cube([2, 2, 5]);\n        }\n    }\n}\n\nmodule ventilation_holes() {\n    // Circular ventilation holes in side walls\n    color(coop_color) {\n        translate([wall_thickness, coop_width/2, coop_height*0.6])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness+1, r=3);\n            \n        translate([coop_length-wall_thickness, coop_width/2, coop_height*0.6])\n            rotate([-90, 0, 0])\n            cylinder(h=wall_thickness+1, r=3);\n    }\n}\n\n// Assembly\ncoop_body();\nroof();\ndoor();\nwire_mesh();\nnesting_boxes();\nperch();\nventilation_holes();",
    "renders": true
  },
  {
    "tool": "pen",
    "openscad_code": "// Realistic medium-complexity 3D-printable pen\n// Overall length â‰ˆ 140 mm, Ã˜ 12 mm barrel\n\n$fn = 36;               // Smooth curves\nmodule pen() {\n    color(\"silver\")\n    union() {\n        // 1. Pen tip (cone + small safety sphere)\n        translate([0,0,-4])\n            cylinder(h=8, r1=6, r2=3, center=true);\n\n        // 2. Metal nose cone\n        translate([0,0,2])\n            cylinder(h=10, r1=6.2, r2=6.2, center=true);\n\n        // 3. Main barrel\n        translate([0,0,12])\n            cylinder(h=90, r=6, center=true);\n\n        // 4. Grip zone â€“ rubber rings\n        for (i=[0:4]) {\n            translate([0,0,18 + i*7])\n                color(\"darkslategray\")\n                cylinder(h=4, r=6.5, center=true);\n        }\n\n        // 5. Button mechanism\n        translate([0,0,57])\n            cylinder(h=6, r=5.8, center=true);\n\n        // 6. Clip\n        translate([6,0,57])\n            rotate([90,0,0])\n            difference() {\n                cube([2, 30, 1.5], center=true);          // clip body\n                translate([0,-15,0])\n                    cube([3, 3, 2.5], center=true);       // finger relief\n            }\n\n        // 7. End-cap\n        translate([0,0,63])\n            cylinder(h=10, r=6, center=true);\n\n        // 8. Push-button\n        translate([0,0,68])\n            cylinder(h=7, r1=5.5, r2=3.5, center=true);\n    }\n}\n\npen();",
    "renders": true
  },
  {
    "tool": "run",
    "openscad_code": "// OpenSCAD code for a realistic medium-complexity RUNNING SHOE (Tool for running)\n// Overall length ~95 mm, suitable for 3D printing\n\n// Color definitions\n$fn = 50;          // Higher resolution for realism\n\nmodule sole_base() {\n    difference() {\n        // Full-length midsole\n        color(\"LightGray\")\n        scale([1, 0.35, 1])\n        hull() {\n            translate([-45, 0, 0]) sphere(d=30);\n            translate([45, 0, 0]) sphere(d=28);\n        }\n        \n        // Remove cavity under arch for weight reduction\n        translate([0, -12, -7])\n        scale([0.55, 0.3, 0.3])\n        cylinder(h=20, d1=40, d2=30, center=true);\n    }\n}\n\nmodule outsole_tread() {\n    // Tread pattern: longitudinal grooves\n    for (x = [-40:10:40]) {\n        translate([x, -5, -8])\n        color(\"Black\")\n        cube([2, 25, 2], center=true);\n    }\n    // Heel strike pad\n    translate([-42, 0, -8.5])\n    color(\"Black\")\n    scale([1, 0.9, 1])\n    cylinder(h=2, d=28, $fn=6);\n    \n    // Forefoot pads\n    for (x = [25:12:42]) {\n        translate([x, 0, -8.5])\n        color(\"Black\")\n        rotate([0, 0, 30])\n        scale([1, 0.6, 1])\n        cylinder(h=2, d=14, $fn=6);\n    }\n}\n\nmodule upper_overlays() {\n    // Swoosh-like logo\n    color(\"DeepSkyBlue\")\n    translate([15, -5, 2])\n    rotate([90, 0, -10])\n    linear_extrude(height=1)\n    polygon(points=[[0,0],[12,4],[20,0],[12,-4]]);\n    \n    // Heel counter overlay\n    translate([-42, 0, 5])\n    color(\"DimGray\")\n    rotate([90, 0, 0])\n    cylinder(h=18, r1=14, r2=10, center=true);\n}\n\nmodule laces() {\n    // Lace loops (eyelets)\n    for (y = [-6, 6]) {\n        for (z = [0:5:20]) {\n            translate([5+z, y, 3+z*0.35])\n            rotate([90, 0, 0])\n            color(\"White\")\n            difference() {\n                cylinder(h=3, d=3);\n                cylinder(h=4, d=1.5);\n            }\n        }\n    }\n    \n    // Lace strand\n    color(\"White\")\n    hull() {\n        translate([5, -6, 3]) sphere(d=1.5);\n        translate([25, 6, 10]) sphere(d=1.5);\n        translate([40, 0, 15]) sphere(d=1.5);\n    }\n}\n\nmodule mesh_upper() {\n    difference() {\n        // Main upper shell\n        color(\"Gainsboro\")\n        translate([0, 0, 8])\n        scale([1, 0.45, 1])\n        hull() {\n            translate([-45, 0, 0]) sphere(d=28);\n            translate([45, 0, 0]) sphere(d=26);\n        }\n        \n        // Toe box ventilation holes\n        for (x = [20:4:40]) {\n            for (y = [-2.5:2.5:2.5]) {\n                translate([x, y, 10])\n                rotate([0, 45, 0])\n                cylinder(h=5, d=1.5, $fn=6);\n            }\n        }\n        \n        // Lace opening\n        translate([5, 0, 8])\n        rotate([0, 30, 0])\n        cube([40, 12, 12], center=true);\n    }\n}\n\nmodule tongue() {\n    color(\"White\")\n    translate([2, 0, 10])\n    rotate([0, 10, 0])\n    scale([1, 0.3, 1])\n    hull() {\n        translate([0, 0, 0]) sphere(d=10);\n        translate([35, 0, 0]) sphere(d=12);\n    }\n}\n\n// Assemble the running shoe\nunion() {\n    sole_base();\n    outsole_tread();\n    mesh_upper();\n    tongue();\n    upper_overlays();\n    laces();\n}",
    "renders": true
  },
  {
    "tool": "yard",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\nmodule shovel_blade() {\n    // Main blade shape\n    difference() {\n        intersection() {\n            // Elongated oval blade\n            scale([1, 0.6, 0.2])\n                cylinder(h=50, d=40, center=true);\n            // Taper the bottom\n            translate([0, 0, -2])\n                cube([60, 40, 10], center=true);\n        }\n        // Create scoop curve\n        translate([0, 0, -3])\n            scale([0.8, 0.4, 1])\n                cylinder(h=50, d=40, center=true);\n    }\n    \n    // Reinforcement rib\n    color(\"silver\")\n    translate([0, 0, -4])\n        scale([1, 0.1, 0.5])\n            cylinder(h=8, d=30, center=true);\n}\n\nmodule shovel_handle() {\n    // Main handle shaft\n    color(\"peru\")\n    cylinder(h=80, d=8, center=false);\n    \n    // Handle grip\n    color(\"saddlebrown\")\n    translate([0, 0, 75])\n        cylinder(h=15, d=12, center=false);\n    \n    // Grip rings\n    for(i = [78:2:88]) {\n        color(\"saddlebrown\")\n        translate([0, 0, i])\n            cylinder(h=1, d=13, center=false);\n    }\n}\n\nmodule shovel_neck() {\n    // Transition piece\n    color(\"silver\")\n    union() {\n        // Socket for handle\n        translate([0, 0, -5])\n            cylinder(h=15, d=10, center=false);\n        \n        // Curved neck to blade\n        translate([0, -5, -8])\n            rotate([90, 0, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=15, d=20, center=true);\n        \n        // Side supports\n        translate([5, -5, -12])\n            rotate([90, 0, 30])\n                cube([2, 10, 8]);\n        translate([-5, -5, -12])\n            rotate([90, 0, -30])\n                cube([2, 10, 8]);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    shovel_blade();\n    translate([0, 0, 5])\n        shovel_neck();\n    translate([0, 0, 13])\n        shovel_handle();\n}",
    "renders": true
  },
  {
    "tool": "plot",
    "openscad_code": "// Realistic plot tool (garden trowel) - medium complexity\n// Overall dimensions: ~80mm length\n\n$fn = 24;  // Smooth curves\n\nmodule handle() {\n    color(\"saddlebrown\") {\n        // Main handle body\n        difference() {\n            // Tapered cylinder for grip\n            cylinder(h = 40, r1 = 8, r2 = 6, center = false);\n            // Finger grooves\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90]) {\n                    translate([0, 5.5, 15]) {\n                        cube([3, 2, 10], center = true);\n                    }\n                }\n            }\n        }\n        \n        // End cap\n        translate([0, 0, 40]) {\n            cylinder(h = 5, r = 8.5, center = false);\n        }\n    }\n}\n\nmodule neck() {\n    color(\"lightgray\") {\n        // Tapered neck connecting handle to blade\n        difference() {\n            hull() {\n                translate([0, 0, 0]) {\n                    cylinder(h = 3, r = 6, center = false);\n                }\n                translate([0, 0, 15]) {\n                    cylinder(h = 3, r = 4, center = false);\n                }\n            }\n            // Hollow center for weight reduction\n            cylinder(h = 18, r = 3, center = false);\n        }\n    }\n}\n\nmodule blade() {\n    color(\"darkgray\") {\n        union() {\n            // Blade body - curved scoop\n            difference() {\n                // Main blade shape\n                hull() {\n                    translate([0, 0, 0]) {\n                        sphere(r = 25);\n                    }\n                    translate([0, 0, -15]) {\n                        sphere(r = 20);\n                    }\n                    translate([0, 0, -30]) {\n                        sphere(r = 15);\n                    }\n                }\n                // Hollow out the scoop\n                translate([0, 0, 5]) {\n                    sphere(r = 22);\n                }\n                // Create flat back\n                translate([0, 10, -15]) {\n                    cube([50, 20, 30], center = true);\n                }\n            }\n            \n            // Reinforcement ridge\n            translate([0, -4, -10]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = 25, r = 2, center = false);\n                }\n            }\n            \n            // Measurement markings (mm)\n            color(\"white\") {\n                for(i = [1:5]) {\n                    translate([-5 + i * 2, -6, -i * 5]) {\n                        cube([0.5, 2, 0.5], center = true);\n                    }\n                }\n            }\n            \n            // Cutting edge\n            difference() {\n                translate([0, -8, -35]) {\n                    cube([30, 2, 1], center = true);\n                }\n                // Serrated edge\n                for(i = [-10:2:10]) {\n                    translate([i, -9, -35]) {\n                        cylinder(h = 3, r = 1, center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    handle();\n    translate([0, 0, 45]) {\n        neck();\n    }\n    translate([0, 0, 63]) {\n        rotate([90, 0, 0]) {\n            blade();\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "bed",
    "openscad_code": "// Bed Tool - 3D Printable Model\n// Realistic style, medium complexity\n\n// Main dimensions (mm)\nbed_length = 80;\nbed_width = 60;\nbed_height = 15;\nframe_thickness = 3;\nmattress_thickness = 8;\nheadboard_height = 25;\nfootboard_height = 15;\nleg_height = 12;\nleg_size = 4;\n\n// Colors\ncolor_frame = [0.4, 0.2, 0.1];\ncolor_mattress = [0.9, 0.9, 0.85];\ncolor_pillows = [0.95, 0.95, 0.9];\ncolor_blanket = [0.2, 0.3, 0.6];\ncolor_legs = [0.3, 0.15, 0.08];\n\n// Bed frame module\nmodule bed_frame() {\n    color(color_frame)\n    union() {\n        // Side rails\n        translate([0, bed_width/2 - frame_thickness/2, mattress_thickness])\n            cube([bed_length, frame_thickness, bed_height - mattress_thickness], center=true);\n        translate([0, -bed_width/2 + frame_thickness/2, mattress_thickness])\n            cube([bed_length, frame_thickness, bed_height - mattress_thickness], center=true);\n        \n        // Headboard\n        translate([-bed_length/2 - frame_thickness/2, 0, headboard_height/2 + mattress_thickness])\n            cube([frame_thickness, bed_width, headboard_height], center=true);\n        \n        // Footboard\n        translate([bed_length/2 + frame_thickness/2, 0, footboard_height/2 + mattress_thickness])\n            cube([frame_thickness, bed_width, footboard_height], center=true);\n        \n        // Slats\n        for(i = [-bed_length/2 + 10 : 10 : bed_length/2 - 10]) {\n            translate([i, 0, mattress_thickness/2])\n                cube([2, bed_width - 2*frame_thickness, 1], center=true);\n        }\n    }\n}\n\n// Mattress module\nmodule mattress() {\n    color(color_mattress)\n    translate([0, 0, bed_height + mattress_thickness/2])\n        cube([bed_length - 2*frame_thickness, bed_width - 2*frame_thickness, mattress_thickness], center=true);\n}\n\n// Pillows module\nmodule pillows() {\n    color(color_pillows)\n    for(x = [-20, 0, 20]) {\n        translate([x, 0, bed_height + mattress_thickness + 2])\n            scale([1, 0.7, 0.3])\n                sphere(10, $fn=20);\n    }\n}\n\n// Blanket module\nmodule blanket() {\n    color(color_blanket)\n    translate([0, 0, bed_height + mattress_thickness + 1])\n        cube([bed_length - 2*frame_thickness - 10, bed_width - 2*frame_thickness - 5, 1.5], center=true);\n}\n\n// Legs module\nmodule legs() {\n    color(color_legs)\n    union() {\n        // Four legs\n        translate([bed_length/2 - 5, bed_width/2 - 5, leg_height/2])\n            cylinder(h=leg_height, r=leg_size/2, $fn=8);\n        translate([-bed_length/2 + 5, bed_width/2 - 5, leg_height/2])\n            cylinder(h=leg_height, r=leg_size/2, $fn=8);\n        translate([bed_length/2 - 5, -bed_width/2 + 5, leg_height/2])\n            cylinder(h=leg_height, r=leg_size/2, $fn=8);\n        translate([-bed_length/2 + 5, -bed_width/2 + 5, leg_height/2])\n            cylinder(h=leg_height, r=leg_size/2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    bed_frame();\n    mattress();\n    pillows();\n    blanket();\n    legs();\n}",
    "renders": true
  },
  {
    "tool": "border",
    "openscad_code": "// Border Tool - Realistic Style, Medium Complexity\n// A 3D printable border grooving tool with adjustable fence and depth stop\n\n$fn = 36;\n\n// Main dimensions (mm)\ntool_length = 85;\nhandle_diameter = 25;\nhandle_length = 40;\nblade_width = 12;\nblade_length = 35;\nfence_height = 15;\nfence_length = 40;\n\n// Colors\ncolor_handle = [0.1, 0.1, 0.1];  // Dark gray\ncolor_blade = [0.7, 0.7, 0.7];   // Silver\ncolor_fence = [0.8, 0.2, 0.2];   // Red accent\ncolor_screws = [0.5, 0.5, 0.5];  // Gray\n\n// Main assembly\nmodule border_tool() {\n    union() {\n        // Handle with ergonomic grip\n        translate([0, 0, handle_length/2]) {\n            color(color_handle) handle();\n        }\n        \n        // Blade assembly\n        translate([0, 0, handle_length + blade_length/2]) {\n            color(color_blade) blade_assembly();\n        }\n        \n        // Adjustable fence\n        translate([0, -fence_length/2 - 5, handle_length + 5]) {\n            color(color_fence) fence();\n        }\n        \n        // Depth stop mechanism\n        translate([blade_width/2 + 3, 0, handle_length + blade_length - 8]) {\n            color(color_blade) depth_stop();\n        }\n    }\n}\n\n// Ergonomic handle with grip ridges\nmodule handle() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, center=true);\n        \n        // Grip texture - concentric rings\n        for(i = [-handle_length/2 + 5 : 3 : handle_length/2 - 5]) {\n            translate([0, 0, i]) {\n                cylinder(h=1, d=handle_diameter + 1, center=true);\n            }\n        }\n        \n        // Through hole for hanging\n        rotate([90, 0, 0]) {\n            cylinder(h=handle_diameter + 2, d=3, center=true);\n        }\n    }\n}\n\n// Blade assembly with mounting plate\nmodule blade_assembly() {\n    union() {\n        // Blade body\n        difference() {\n            cube([blade_width, 3, blade_length], center=true);\n            \n            // Cutting edge angle\n            translate([0, 1.5, blade_length/2 - 5]) {\n                rotate([0, 45, 0]) {\n                    cube([blade_width + 2, 3, 10], center=true);\n                }\n            }\n            \n            // Screw holes\n            for(pos = [-10, 10]) {\n                translate([0, 0, pos]) {\n                    cylinder(h=4, d=2.5, center=true);\n                }\n            }\n        }\n        \n        // Mounting plate\n        translate([0, -2, 0]) {\n            cube([blade_width + 6, 1, blade_length - 5], center=true);\n        }\n        \n        // Screws\n        for(pos = [-10, 10]) {\n            translate([0, -2.5, pos]) {\n                color(color_screws) screw();\n            }\n        }\n    }\n}\n\n// Adjustable fence with thumb screws\nmodule fence() {\n    difference() {\n        // Main fence body\n        union() {\n            // Fence plate\n            cube([5, fence_length, fence_height], center=true);\n            \n            // Fence support\n            translate([0, 0, -fence_height/2 - 2.5]) {\n                cube([8, 5, 5], center=true);\n            }\n            \n            // Thumb screw knobs\n            for(pos = [-15, 15]) {\n                translate([-fence_length/2 - 3, pos, 0]) {\n                    color(color_screws) cylinder(h=6, d=8, center=true);\n                }\n            }\n        }\n        \n        // Adjustment slots\n        for(pos = [-15, 15]) {\n            translate([-fence_length/2, pos, 0]) {\n                cube([10, 4, 3], center=true);\n            }\n        }\n    }\n}\n\n// Depth stop mechanism\nmodule depth_stop() {\n    difference() {\n        union() {\n            // Stop block\n            cube([8, 6, 6], center=true);\n            \n            // Thumb wheel\n            translate([6, 0, 0]) {\n                color(color_screws) difference() {\n                    cylinder(h=4, d=12, center=true);\n                    cylinder(h=5, d=6, center=true);\n                }\n            }\n        }\n        \n        // Threaded hole\n        rotate([90, 0, 0]) {\n            cylinder(h=10, d=3, center=true);\n        }\n    }\n}\n\n// Simple screw representation\nmodule screw() {\n    union() {\n        cylinder(h=5, d=3);\n        translate([0, 0, 2.5]) {\n            cylinder(h=2, d=5);\n        }\n    }\n}\n\n// Render the complete tool\nborder_tool();",
    "renders": true
  },
  {
    "tool": "row",
    "openscad_code": "// Row tool (oar) - realistic style, medium complexity\n// Approximate size: 600mm length scaled to 100mm for 3D printing\n\n// Scale factor for 3D printing (real oar is ~600mm, scale to 100mm)\nscale_factor = 100/600;\n\n// Main colors\nblade_color = \"#8B4513\";  // Brown for wood\nshaft_color = \"#A0522D\";  // Sienna for wood\nhandle_color = \"#DEB887\"; // Burlywood for lighter wood\ngrip_color = \"#000000\";   // Black for rubber grip\n\n// Blade dimensions (scaled)\nblade_length = 120 * scale_factor;\nblade_width = 25 * scale_factor;\nblade_thickness = 4 * scale_factor;\n\n// Shaft dimensions\nshaft_length = 400 * scale_factor;\nshaft_diameter = 5 * scale_factor;\n\n// Handle dimensions\nhandle_length = 80 * scale_factor;\nhandle_diameter = 8 * scale_factor;\n\n// Grip ring dimensions\ngrip_ring_width = 15 * scale_factor;\ngrip_ring_diameter = 12 * scale_factor;\n\n// Union all parts together\nunion() {\n    // Main shaft\n    color(shaft_color) {\n        translate([0, 0, 0]) {\n            cylinder(h=shaft_length, d=shaft_diameter, $fn=16);\n        }\n    }\n    \n    // Blade\n    color(blade_color) {\n        translate([0, 0, shaft_length]) {\n            rotate([0, 90, 0]) {\n                // Main blade body\n                difference() {\n                    // Tapered blade shape\n                    hull() {\n                        translate([-blade_width/2, 0, 0]) {\n                            cube([blade_width, blade_length, blade_thickness]);\n                        }\n                        translate([-blade_width/3, blade_length*0.7, 0]) {\n                            cube([blade_width*2/3, blade_length*0.3, blade_thickness]);\n                        }\n                    }\n                    \n                    // Taper the edges\n                    for(i = [0:1]) {\n                        mirror([i, 0, 0]) {\n                            translate([0, 0, -1]) {\n                                cylinder(h=blade_thickness+2, r1=blade_width/2, r2=0, $fn=3);\n                            }\n                        }\n                    }\n                }\n                \n                // Reinforcement ridge on blade\n                translate([0, blade_length*0.3, blade_thickness/2]) {\n                    cube([blade_width*0.8, blade_length*0.4, blade_thickness*0.3], center=true);\n                }\n            }\n        }\n    }\n    \n    // Handle\n    color(handle_color) {\n        translate([0, 0, -handle_length]) {\n            cylinder(h=handle_length, d=handle_diameter, $fn=16);\n        }\n    }\n    \n    // Handle grip rings\n    color(grip_color) {\n        for(i = [0:2]) {\n            translate([0, 0, -handle_length*0.2 - i*handle_length*0.3]) {\n                cylinder(h=grip_ring_width, d=grip_ring_diameter, $fn=32);\n            }\n        }\n    }\n    \n    // Shaft collar at blade junction\n    color(grip_color) {\n        translate([0, 0, shaft_length*0.95]) {\n            cylinder(h=shaft_length*0.05, d=shaft_diameter*1.5, $fn=16);\n        }\n    }\n    \n    // Decorative grooves on shaft\n    for(i = [0:4]) {\n        color(shaft_color) {\n            translate([0, 0, shaft_length*0.2 + i*shaft_length*0.15]) {\n                cylinder(h=1, d=shaft_diameter*0.9, $fn=16);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "ridge",
    "openscad_code": "// Ridge Tool (Roofing Ridge Lifter)\n// Medium complexity, realistic style\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 50;\n\n// Main colors\ncolor_handle = \"#8B4513\";\ncolor_grip = \"#1C1C1C\";\ncolor_metal = \"#C0C0C0\";\ncolor_rubber = \"#2F2F2F\";\n\n// Overall dimensions\nhandle_length = 120;\nhandle_diameter = 25;\nhead_width = 80;\nhead_length = 100;\nhead_thickness = 15;\n\n// Handle grip pattern module\nmodule grip_pattern(diameter, length) {\n    for (i = [0:4:length-6]) {\n        color(color_grip) {\n            translate([0, 0, i]) \n                rotate([0, 90, 0])\n                    cylinder(h=diameter+2, d=4, center=true);\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    color(color_handle) {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, center=false);\n        \n        // Tapered end\n        translate([0, 0, handle_length])\n            cylinder(h=10, d1=handle_diameter, d2=handle_diameter-5);\n    }\n    \n    // Rubber grip rings\n    grip_pattern(handle_diameter, handle_length-20);\n    \n    // End cap\n    color(color_rubber) {\n        translate([0, 0, handle_length+10])\n            cylinder(h=5, d=handle_diameter+2);\n    }\n}\n\n// Ridge lifting head\nmodule lifting_head() {\n    color(color_metal) {\n        // Main head plate\n        cube([head_width, head_thickness, head_length], center=true);\n        \n        // Reinforcement ribs\n        for (i = [-30:30:30]) {\n            translate([i, 0, head_length/2-5])\n                cube([5, head_thickness+4, 10]);\n        }\n        \n        // Angled lifting edges\n        translate([0, head_thickness/2+2, head_length/2-25])\n            rotate([30, 0, 0])\n                cube([head_width-10, 3, 30]);\n        \n        translate([0, -head_thickness/2-2, head_length/2-25])\n            rotate([-30, 0, 0])\n                cube([head_width-10, 3, 30]);\n    }\n}\n\n// Handle-to-head connector\nmodule connector() {\n    color(color_metal) {\n        // Curved neck\n        translate([0, 0, handle_length/2])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=60, d=20);\n                    // Hollow center for weight reduction\n                    cylinder(h=60, d=16);\n                }\n        \n        // Reinforcement plate\n        translate([0, 0, handle_length/2+25])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=5, d=30);\n                    cylinder(h=5, d=20);\n                }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    handle();\n    translate([0, 0, handle_length/2+30])\n        rotate([90, 0, 0])\n            lifting_head();\n    connector();\n}\n\n// Holes for screws (for assembly)\ncolor(color_metal) {\n    translate([0, 0, handle_length-15])\n        rotate([90, 0, 0])\n            cylinder(h=30, d=5);\n    \n    translate([0, 0, handle_length/2+25])\n        rotate([90, 0, 0])\n            cylinder(h=30, d=3);\n}",
    "renders": true
  },
  {
    "tool": "furrow",
    "openscad_code": "// Furrow tool - Realistic style, medium complexity\n// A traditional soil furrower for creating planting rows\n\n$fn = 50;\n\n// Main dimensions (mm)\nhandle_len = 80;\nhandle_dia = 12;\nhead_width = 45;\nhead_height = 25;\nblade_thickness = 3;\ngrip_len = 30;\n\n// Colors\nwood_color = [0.7, 0.5, 0.3];\nmetal_color = [0.5, 0.5, 0.55];\ndark_metal = [0.3, 0.3, 0.35];\n\nmodule handle_grooves() {\n    for(i = [0:5:25]) {\n        translate([i, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=handle_dia*1.2, d=handle_dia+1, $fn=6);\n            cylinder(h=handle_dia*1.2, d=handle_dia-1, $fn=6);\n        }\n    }\n}\n\nmodule handle() {\n    color(wood_color) {\n        // Main handle shaft\n        translate([handle_len/2, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=handle_len, d=handle_dia);\n        \n        // Grip area with grooves\n        translate([handle_len - grip_len/2, 0, 0])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=grip_len, d=handle_dia);\n            handle_grooves();\n        }\n        \n        // End cap\n        translate([0, 0, 0])\n        sphere(d=handle_dia*1.2);\n    }\n}\n\nmodule furrow_head() {\n    color(metal_color) {\n        // Main head body\n        translate([0, 0, -head_height/2])\n        cube([head_width, blade_thickness*2, head_height], center=true);\n        \n        // Reinforcement ridge\n        translate([0, 0, head_height/4])\n        cube([head_width*0.8, blade_thickness*2.5, head_height/2], center=true);\n    }\n}\n\nmodule furrow_blades() {\n    color(dark_metal) {\n        // Left blade\n        translate([-head_width/3, blade_thickness/2, -head_height/2])\n        rotate([0, 0, -30])\n        cube([head_width/2, blade_thickness, head_height*1.2]);\n        \n        // Right blade\n        translate([head_width/3, blade_thickness/2, -head_height/2])\n        rotate([0, 0, 30])\n        cube([head_width/2, blade_thickness, head_height*1.2]);\n        \n        // Center point\n        translate([0, blade_thickness/2, -head_height*0.7])\n        rotate([0, 0, 0])\n        cube([blade_thickness*2, blade_thickness, head_height*1.5]);\n    }\n}\n\nmodule connection_bracket() {\n    color(metal_color) {\n        // Bracket body\n        translate([-handle_dia/2, 0, 0])\n        cube([handle_dia*2, blade_thickness*3, head_height/2]);\n        \n        // Mounting holes\n        for(x = [-handle_dia/4, handle_dia/4]) {\n            translate([x, -blade_thickness*2, 0])\n            rotate([90, 0, 0])\n            cylinder(h=blade_thickness*6, d=3, $fn=20);\n        }\n    }\n}\n\n// Assembly\ntranslate([handle_len, 0, 0])\nhandle();\n\ntranslate([0, 0, 0])\nfurrow_head();\n\ntranslate([0, 0, 0])\nfurrow_blades();\n\ntranslate([0, 0, head_height/4])\nconnection_bracket();",
    "renders": true
  },
  {
    "tool": "trench",
    "openscad_code": "// Trench Tool (Entrenching Tool / Folding Shovel)\n// Realistic style with medium complexity\n\n$fn = 36;\n\n// Main dimensions\noverall_length = 85;\nhandle_length = 45;\nshovel_width = 20;\nshovel_height = 15;\n\n// Colors\ncolor_handle = [0.2, 0.15, 0.1];\ncolor_metal = [0.5, 0.5, 0.55];\ncolor_grip = [0.1, 0.1, 0.1];\n\nmodule handle_grip() {\n    difference() {\n        // Main grip tube\n        color(color_handle)\n        cylinder(h = handle_length, r1 = 3, r2 = 2.8);\n        \n        // Grip rings\n        for (i = [5:8:handle_length-5]) {\n            translate([0, 0, i])\n            color(color_grip)\n            cylinder(h = 2, r = 3.2);\n        }\n        \n        // Hollow core\n        translate([0, 0, -1])\n        cylinder(h = handle_length + 2, r = 1.5);\n    }\n}\n\nmodule hinge_mechanism() {\n    difference() {\n        // Main hinge block\n        color(color_metal)\n        translate([0, 0, -3])\n        cube([6, 4, 6], center = true);\n        \n        // Pivot hole\n        rotate([90, 0, 0])\n        cylinder(h = 7, r = 1.5);\n        \n        // Lock pin holes\n        for (angle = [0, 90]) {\n            rotate([0, 0, angle])\n            translate([2.5, 0, -1.5])\n            cylinder(h = 3, r = 0.8);\n        }\n    }\n}\n\nmodule shovel_blade() {\n    difference() {\n        union() {\n            // Main blade\n            color(color_metal)\n            translate([0, 0, shovel_height/2])\n            scale([1, 0.3, 1])\n            sphere(d = shovel_width);\n            \n            // Blade extension\n            translate([0, -shovel_width * 0.3, -shovel_height/2])\n            cube([shovel_width * 0.8, shovel_width * 0.6, shovel_height], center = true);\n            \n            // Reinforcement ribs\n            for (x = [-shovel_width/3, 0, shovel_width/3]) {\n                translate([x, -shovel_width * 0.1, 0])\n                cube([1, shovel_width * 0.4, shovel_height * 0.8], center = true);\n            }\n        }\n        \n        // Blade edge bevel\n        translate([0, -shovel_width * 0.6, -shovel_height/2 - 1])\n        cube([shovel_width * 1.2, shovel_width * 0.3, 2], center = true);\n        \n        // Mounting hole\n        translate([0, shovel_width * 0.2, 0])\n        rotate([90, 0, 0])\n        cylinder(h = shovel_width * 0.4, r = 1.5);\n    }\n}\n\nmodule trench_tool() {\n    // Handle assembly\n    translate([0, 0, handle_length/2])\n    handle_grip();\n    \n    // Hinge at end of handle\n    translate([0, 0, handle_length])\n    hinge_mechanism();\n    \n    // Shovel blade\n    translate([0, -shovel_width * 0.3, handle_length + shovel_height/2])\n    rotate([0, 0, 90])\n    shovel_blade();\n    \n    // Handle end cap\n    color(color_metal)\n    translate([0, 0, 0.5])\n    cylinder(h = 1, r = 3);\n    \n    // Lanyard hole\n    translate([0, 0, 1])\n    rotate([90, 0, 0])\n    cylinder(h = 6, r = 1);\n}\n\n// Render the complete tool\ntrench_tool();",
    "renders": true
  },
  {
    "tool": "ditch",
    "openscad_code": "// Ditch Tool - Realistic style, medium complexity\n// A sturdy trenching/ditch digging tool with handle and blade\n\n// Overall dimensions\ntool_length = 80;\nhandle_length = 60;\nblade_width = 25;\nblade_height = 30;\nhandle_diameter = 12;\n\n// Colors\nhandle_color = \"SaddleBrown\";\nblade_color = \"Gray\";\ngrip_color = \"DarkRed\";\n\n// Main handle\nmodule handle() {\n    color(handle_color) {\n        // Main handle shaft\n        translate([0, 0, handle_length/2])\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Handle end cap\n        translate([0, 0, handle_length])\n            sphere(d=handle_diameter+2, $fn=32);\n        \n        // Grips along handle\n        for(i = [10:15:handle_length-15]) {\n            color(grip_color) {\n                translate([0, 0, i])\n                    cylinder(h=8, d=handle_diameter+3, $fn=32);\n            }\n        }\n    }\n}\n\n// Blade assembly\nmodule blade() {\n    color(blade_color) {\n        // Main blade body\n        translate([0, 0, -blade_height/2])\n            cube([blade_width, 15, blade_height], center=true);\n        \n        // Blade cutting edge\n        translate([0, 7.5, -blade_height-5])\n            cube([blade_width, 15, 10], center=true);\n        \n        // Reinforcement ribs\n        for(i = [-blade_width/3, 0, blade_width/3]) {\n            translate([i, 0, -blade_height/2])\n                cube([3, 20, blade_height], center=true);\n        }\n        \n        // Blade tip\n        translate([0, 10, -blade_height-10])\n            rotate([90, 0, 0])\n                cylinder(h=blade_width, d1=2, d2=0, $fn=3);\n    }\n}\n\n// Handle-to-blade connector\nmodule connector() {\n    union() {\n        color(handle_color) {\n            // Transition piece\n            translate([0, 0, 0])\n                cylinder(h=20, d1=handle_diameter, d2=blade_width, $fn=32);\n            \n            // Reinforcement collar\n            translate([0, 0, 10])\n                cylinder(h=5, d=handle_diameter+6, $fn=32);\n        }\n    }\n}\n\n// Assembly\nmodule ditch_tool() {\n    union() {\n        // Handle\n        translate([0, 0, 20])\n            handle();\n        \n        // Connector\n        connector();\n        \n        // Blade\n        translate([0, 15, -blade_height/2-10])\n            blade();\n        \n        // Foot rest\n        color(blade_color) {\n            translate([0, 15, blade_height/2-15])\n                cube([blade_width-4, 3, 8], center=true);\n        }\n    }\n}\n\n// Render the tool\nrotate([0, -20, 0])\n    ditch_tool();",
    "renders": true
  },
  {
    "tool": "moat",
    "openscad_code": "// Moat Tool (realistic style, medium complexity)\n// A specialized tool for creating grooves/moats in wood or soft materials\n\n// Overall dimensions: ~80mm long, ~25mm wide, ~20mm high\n\n// Main body module\nmodule moat_tool() {\n    color(\"silver\") {\n        // Main handle - ergonomic grip\n        translate([0, 0, 0]) {\n            difference() {\n                // Handle body\n                hull() {\n                    translate([-30, -8, 0]) cylinder(h=15, d=15, $fn=20);\n                    translate([30, -8, 0]) cylinder(h=15, d=15, $fn=20);\n                }\n                \n                // Grip grooves\n                for(i = [-25:10:25]) {\n                    translate([i, -8, 7]) rotate([90, 0, 0]) \n                        cylinder(h=16, d=3, $fn=16);\n                }\n                \n                // Center hole for weight reduction\n                translate([0, -8, 7.5]) cylinder(h=16, d=8, $fn=20);\n            }\n        }\n        \n        // Tool shaft\n        translate([35, 0, 7.5]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=40, d=12, $fn=20);\n            }\n        }\n        \n        // Cutting head assembly\n        translate([65, 0, 7.5]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    // Main cutting head body\n                    cylinder(h=15, d=20, $fn=30);\n                    \n                    // Cutting blade slot\n                    translate([7.5, 0, 0]) rotate([0, 90, 0]) \n                        cube([1, 16, 10], center=true);\n                    \n                    // Depth adjustment markings\n                    for(i = [2:2:12]) {\n                        translate([i, 0, -10]) \n                            cube([0.5, 18, 0.5], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Cutting blade\n        color(\"gray\") {\n            translate([72.5, 0, 7.5]) {\n                rotate([0, 90, 0]) {\n                    difference() {\n                        // Blade body\n                        cube([1, 16, 10], center=true);\n                        \n                        // Cutting edge profile\n                        translate([0, 0, 5]) \n                            cube([2, 2, 2], center=true);\n                        translate([0, 0, -5]) \n                            cube([2, 2, 2], center=true);\n                        \n                        // Blade relief cuts\n                        translate([0, 6, 0]) \n                            cube([1.5, 2, 6], center=true);\n                        translate([0, -6, 0]) \n                            cube([1.5, 2, 6], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Depth adjustment mechanism\n        color(\"darkslategray\") {\n            translate([65, 0, 17.5]) {\n                // Thumb wheel\n                difference() {\n                    cylinder(h=6, d=12, $fn=20);\n                    for(i = [0:60:300]) {\n                        rotate([0, 0, i]) \n                            translate([5, 0, 3]) \n                                cube([2, 1, 6], center=true);\n                    }\n                }\n                \n                // Adjustment screw\n                translate([0, 0, 3]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=10, d=4, $fn=12);\n                    }\n                }\n            }\n        }\n        \n        // Safety guard\n        color(\"dimgray\") {\n            translate([55, 0, 7.5]) {\n                rotate([0, 90, 0]) {\n                    difference() {\n                        cylinder(h=10, d=14, $fn=20);\n                        cylinder(h=12, d=10, $fn=20);\n                    }\n                }\n            }\n        }\n        \n        // Handle end cap\n        translate([-40, -8, 7.5]) {\n            difference() {\n                cylinder(h=5, d=16, $fn=20);\n                translate([0, 0, 2.5]) \n                    cylinder(h=5, d=10, $fn=20);\n            }\n        }\n        \n        // Hanging loop\n        color(\"silver\") {\n            translate([-42, -8, 15]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=3, d=8, $fn=20);\n                        translate([0, 0, -1.5]) \n                            cylinder(h=5, d=4, $fn=20);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nmoat_tool();",
    "renders": true
  },
  {
    "tool": "pond",
    "openscad_code": "// Pond tool - realistic style, medium complexity\n// A ladle-style pond tool for skimming debris and water transfer\n// Overall length ~85mm, bowl diameter ~45mm\n\n// Tool dimensions\nhandle_length = 65;\nhandle_diameter = 8;\nbowl_radius = 22;\nbowl_thickness = 2;\nmesh_hole_radius = 3;\nmesh_rows = 6;\nmesh_cols = 4;\n\n// Colors\nhandle_color = \"SaddleBrown\";\nbowl_color = \"LightGray\";\nmesh_color = \"DarkGray\";\n\n// Main assembly\nmodule pond_tool() {\n    union() {\n        // Handle\n        color(handle_color) handle();\n        \n        // Bowl\n        color(bowl_color) bowl();\n        \n        // Mesh/skimming surface\n        color(mesh_color) mesh_surface();\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    // Main handle shaft\n    cylinder(h=handle_length, d=handle_diameter, $fn=32);\n    \n    // Grip rings\n    for(i = [0:5]) {\n        translate([0, 0, i*10+5])\n            difference() {\n                cylinder(h=2.5, d=handle_diameter+2, $fn=32);\n                cylinder(h=2.5, d=handle_diameter, $fn=32);\n            }\n    }\n    \n    // Handle end cap\n    translate([0, 0, handle_length])\n        cylinder(h=4, d=handle_diameter+4, $fn=32);\n}\n\n// Bowl with proper thickness\nmodule bowl() {\n    // Position bowl at end of handle\n    translate([0, 0, -bowl_radius])\n        rotate([0, 90, 0])\n            difference() {\n                // Outer bowl\n                sphere(r=bowl_radius, $fn=64);\n                \n                // Inner hollow\n                sphere(r=bowl_radius-bowl_thickness, $fn=64);\n                \n                // Flatten bottom for printing\n                translate([0, 0, -bowl_radius])\n                    cube([bowl_radius*2, bowl_radius*2, bowl_radius], center=true);\n            }\n}\n\n// Mesh/skimming surface\nmodule mesh_surface() {\n    translate([0, -bowl_radius+2, 0])\n        rotate([0, 90, 0])\n            difference() {\n                // Mesh base\n                cylinder(h=1.5, r=bowl_radius-2, $fn=64);\n                \n                // Drainage holes\n                for(i = [0:mesh_rows-1]) {\n                    for(j = [0:mesh_cols-1]) {\n                        translate([\n                            -20 + j * 13,\n                            -15 + i * 6,\n                            -1\n                        ])\n                            cylinder(h=3, r=mesh_hole_radius, $fn=16);\n                    }\n                }\n            }\n}\n\n// Connection between handle and bowl\nmodule connection() {\n    // Reinforcement collar\n    translate([0, 0, -bowl_radius/2])\n        rotate([0, 90, 0])\n            cylinder(h=8, d1=handle_diameter+4, d2=handle_diameter+8, $fn=32);\n}\n\n// Render the complete tool\npond_tool();\nconnection();",
    "renders": true
  },
  {
    "tool": "pool",
    "openscad_code": "// Pool Tool - Realistic Style Medium Complexity\n// A combination pool skimmer net and brush tool with telescoping handle\n\n// Main dimensions in mm\nhandle_length = 70;\nhandle_diameter = 6;\nnet_width = 40;\nnet_depth = 35;\nbrush_width = 40;\nbrush_height = 15;\ngrip_length = 15;\n\n// Colors\ncolor_handle = \"silver\";\ncolor_net = \"blue\";\ncolor_brush = \"black\";\ncolor_grip = \"red\";\n\n// Telescoping handle segments\nmodule handle_segment(length, diameter, wall) {\n    difference() {\n        cylinder(h=length, d=diameter, $fn=32);\n        translate([0, 0, wall]) cylinder(h=length-wall*2, d=diameter-wall*2, $fn=32);\n    }\n}\n\n// Handle grip with texture\nmodule handle_grip(length, diameter) {\n    color(color_grip) {\n        union() {\n            // Main grip sleeve\n            cylinder(h=length, d=diameter+2, $fn=32);\n            \n            // Grip rings\n            for(i=[0:2:length-2]) {\n                translate([0, 0, i]) cylinder(h=1.5, d=diameter+3, $fn=32);\n            }\n        }\n    }\n}\n\n// Pool net frame\nmodule net_frame(width, depth) {\n    color(color_net, 0.7) {\n        difference() {\n            // Outer frame\n            cube([width, depth, 4], center=true);\n            \n            // Inner opening\n            cube([width-4, depth-4, 6], center=true);\n        }\n        \n        // Net mesh simulation\n        for(i=[-width/2+2:3:width/2-2]) {\n            for(j=[-depth/2+2:3:depth/2-2]) {\n                translate([i, j, 0]) cube([0.5, 0.5, 2], center=true);\n            }\n        }\n    }\n}\n\n// Pool brush with bristles\nmodule pool_brush(width, height) {\n    union() {\n        // Brush base\n        color(color_brush) {\n            cube([width, 10, height], center=true);\n        }\n        \n        // Bristles\n        for(i=[-width/2+2:2:width/2-2]) {\n            color(\"gray\") {\n                translate([i, 5, -height/2-1]) \n                    cylinder(h=3, d=0.8, $fn=8);\n            }\n        }\n        \n        // Reinforcement ribs\n        color(color_brush) {\n            for(i=[-width/2+5:10:width/2-5]) {\n                translate([i, 0, 0]) cube([1, 10, height-2], center=true);\n            }\n        }\n    }\n}\n\n// Tool head combining net and brush\nmodule tool_head() {\n    union() {\n        // Net assembly\n        translate([0, -net_depth/2-5, 0]) {\n            // Net frame\n            net_frame(net_width, net_depth);\n            \n            // Support arms\n            color(color_handle) {\n                translate([0, net_depth/2+2, 0]) \n                    cube([2, 4, 4], center=true);\n                translate([-net_width/2+2, net_depth/2+2, 0]) \n                    cube([2, 4, 4], center=true);\n                translate([net_width/2-2, net_depth/2+2, 0]) \n                    cube([2, 4, 4], center=true);\n            }\n        }\n        \n        // Brush assembly\n        translate([0, net_depth/2+15, 0]) {\n            rotate([90, 0, 0]) pool_brush(brush_width, brush_height);\n        }\n        \n        // Connection point\n        color(color_handle) {\n            translate([0, 0, 4]) \n                cylinder(h=8, d=handle_diameter+2, $fn=32);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle segments (telescoping)\n    color(color_handle) {\n        handle_segment(handle_length*0.4, handle_diameter, 1);\n        translate([0, 0, handle_length*0.4]) \n            handle_segment(handle_length*0.35, handle_diameter*0.85, 0.8);\n        translate([0, 0, handle_length*0.75]) \n            handle_segment(handle_length*0.25, handle_diameter*0.7, 0.6);\n    }\n    \n    // Grip at end\n    translate([0, 0, handle_length-2]) \n        handle_grip(grip_length, handle_diameter);\n    \n    // Tool head\n    translate([0, 0, 8]) \n        tool_head();\n}",
    "renders": true
  },
  {
    "tool": "tank",
    "openscad_code": "// Realistic Tank Tool - Medium Complexity\n// 3D printable tank with tool features\n\n// Main dimensions\ntank_length = 80;\ntank_width = 40;\ntank_height = 35;\nwall_thickness = 2;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2]; // Dark gray\ncolor_tracks = [0.1, 0.1, 0.1]; // Black\ncolor_tool = [0.8, 0.8, 0.8]; // Light gray\ncolor_details = [0.9, 0.2, 0.2]; // Red accents\n\nmodule tank_body() {\n    difference() {\n        // Main body\n        color(color_body)\n        cube([tank_length, tank_width, tank_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall_thickness/2])\n        cube([tank_length-wall_thickness*2, tank_width-wall_thickness*2, tank_height-wall_thickness], center=true);\n        \n        // Top hatch opening\n        translate([0, 0, tank_height/2])\n        cube([20, 15, wall_thickness*2], center=true);\n    }\n}\n\nmodule tracks() {\n    // Left track\n    translate([-tank_length/2 - 8, -tank_width/2 - 5, 0])\n    color(color_tracks) {\n        difference() {\n            cube([16, 8, tank_height*0.8]);\n            for(i = [1:4]) {\n                translate([2, 2, i * 6])\n                cube([12, 4, 2]);\n            }\n        }\n    }\n    \n    // Right track (mirrored)\n    translate([-tank_length/2 - 8, tank_width/2 - 3, 0])\n    color(color_tracks) {\n        difference() {\n            cube([16, 8, tank_height*0.8]);\n            for(i = [1:4]) {\n                translate([2, 2, i * 6])\n                cube([12, 4, 2]);\n            }\n        }\n    }\n}\n\nmodule turret() {\n    translate([10, 0, tank_height/2 + 5])\n    color(color_body) {\n        // Turret base\n        cylinder(h=8, r1=15, r2=15, center=true);\n        \n        // Turret top\n        translate([0, 0, 4])\n        cylinder(h=3, r1=12, r2=12, center=true);\n        \n        // Gun barrel\n        translate([15, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=30, r1=3, r2=2);\n    }\n}\n\nmodule tool_attachment() {\n    // Front tool mount\n    translate([tank_length/2 + 5, 0, -tank_height/4])\n    color(color_tool) {\n        // Mount bracket\n        cube([8, 20, 10], center=true);\n        \n        // Tool blade\n        translate([5, 0, -5])\n        cube([15, 25, 2]);\n        \n        // Reinforcement ribs\n        for(i = [-1:1]) {\n            translate([2, i * 8, 0])\n            cube([10, 2, 6]);\n        }\n    }\n    \n    // Side tool storage\n    translate([0, tank_width/2 + 2, 0])\n    color(color_tool) {\n        // Tool rack\n        cube([30, 4, 15], center=true);\n        \n        // Individual tool slots\n        for(i = [-1:1]) {\n            translate([i * 10, 2, 0])\n            cylinder(h=4, r=3, center=true);\n        }\n    }\n}\n\nmodule details() {\n    // Headlights\n    translate([tank_length/2 - 5, -tank_width/3, tank_height/4])\n    color([1,1,0])\n    sphere(r=3);\n    \n    translate([tank_length/2 - 5, tank_width/3, tank_height/4])\n    color([1,1,0])\n    sphere(r=3);\n    \n    // Warning stripes\n    color(color_details) {\n        translate([tank_length/2 - 10, 0, -tank_height/2 + 5])\n        cube([20, tank_width, 2]);\n        \n        translate([tank_length/2 - 15, 0, -tank_height/2 + 8])\n        cube([20, tank_width, 2]);\n    }\n    \n    // Control panel\n    translate([-tank_length/4, -tank_width/2 - 2, tank_height/4])\n    color([0.1, 0.1, 0.1])\n    cube([15, 2, 8]);\n}\n\n// Assembly\nunion() {\n    tank_body();\n    tracks();\n    turret();\n    tool_attachment();\n    details();\n}",
    "renders": true
  },
  {
    "tool": "tub",
    "openscad_code": "// Tub tool - bathtub drain removal tool\n// Realistic style with medium complexity\n// Sized for 3D printing (~80mm length)\n\n// Main colors\nhandle_color = \"Silver\";\ngrip_color = \"Black\";\ntool_color = \"Gray\";\n\n// Overall dimensions\ntool_length = 80;\nhandle_length = 35;\nhandle_diameter = 12;\nshaft_diameter = 8;\ncrossbar_length = 30;\ncrossbar_diameter = 4;\n\n// Handle with hexagonal grip pattern\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Hexagonal grip pattern\n        color(grip_color) {\n            for(i = [0:5:handle_length-5]) {\n                translate([0, 0, i+2.5]) {\n                    cylinder(h=3, d1=handle_diameter*1.05, d2=handle_diameter*0.95, $fn=6);\n                }\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length]) {\n            cylinder(h=3, d1=handle_diameter, d2=handle_diameter*1.1, $fn=32);\n        }\n    }\n}\n\n// Crossbar with rounded ends\nmodule crossbar() {\n    color(tool_color) {\n        // Main crossbar\n        translate([0, 0, -crossbar_diameter/2]) {\n            cube([crossbar_length, crossbar_diameter, crossbar_diameter], center=true);\n        }\n        \n        // Rounded ends\n        translate([crossbar_length/2, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=crossbar_diameter, d=crossbar_diameter, $fn=16);\n            }\n        }\n        \n        translate([-crossbar_length/2, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=crossbar_diameter, d=crossbar_diameter, $fn=16);\n            }\n        }\n    }\n}\n\n// Four-prong removal tool\nmodule removal_tool() {\n    color(tool_color) {\n        // Center hub\n        cylinder(h=5, d=shaft_diameter+2, $fn=32);\n        \n        // Four prongs\n        for(i = [0:90:270]) {\n            rotate([0, 0, i]) {\n                translate([0, shaft_diameter/2 + 2, 2.5]) {\n                    cube([4, 12, 5], center=true);\n                }\n                \n                // Prong tip\n                translate([0, shaft_diameter/2 + 8, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=8, d1=4, d2=2, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Reinforcement ring\n        translate([0, 0, -2]) {\n            cylinder(h=2, d=shaft_diameter+16, $fn=32);\n        }\n    }\n}\n\n// Shaft connecting handle to tool\nmodule shaft() {\n    color(tool_color) {\n        cylinder(h=tool_length - handle_length - 15, d=shaft_diameter, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle at top\n    handle();\n    \n    // Shaft\n    translate([0, 0, handle_length]) {\n        shaft();\n    }\n    \n    // Crossbar perpendicular to shaft\n    translate([0, 0, handle_length + (tool_length - handle_length - 15)]) {\n        crossbar();\n    }\n    \n    // Removal tool at bottom\n    translate([0, 0, tool_length - 10]) {\n        removal_tool();\n    }\n}",
    "renders": true
  },
  {
    "tool": "trough",
    "openscad_code": "// Realistic Trough Tool - Medium Complexity\n// A masonry trough for holding mortar/plaster with realistic features\n\n// Parameters\nwall_thickness = 2;\ntrough_length = 80;\ntrough_width = 60;\ntrough_height = 45;\nhandle_diameter = 12;\nhandle_length = 30;\ngrip_depth = 3;\n\n// Main module\nmodule trough_tool() {\n    // Main trough body\n    difference() {\n        // Outer shell\n        color([0.7, 0.5, 0.3])  // Brown/rust color\n        union() {\n            // Base trough shape\n            rounded_trough(trough_length, trough_width, trough_height, 5);\n            \n            // Reinforcement ribs on bottom\n            for(i = [-1, 0, 1]) {\n                translate([i * 25, 0, -wall_thickness/2]) {\n                    cube([8, trough_width - 10, wall_thickness], center=true);\n                }\n            }\n        }\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness]) {\n            rounded_trough(trough_length - 2*wall_thickness, \n                          trough_width - 2*wall_thickness, \n                          trough_height - wall_thickness, 3);\n        }\n    }\n    \n    // Left handle\n    translate([-trough_length/2 - handle_length/2, 0, trough_height/2]) {\n        handle();\n    }\n    \n    // Right handle\n    translate([trough_length/2 + handle_length/2, 0, trough_height/2]) {\n        handle();\n    }\n    \n    // Drainage spout\n    translate([0, trough_width/2, trough_height/2 - 5]) {\n        spout();\n    }\n}\n\n// Rounded trough shape with fillet\nmodule rounded_trough(l, w, h, radius) {\n    hull() {\n        // Bottom corners\n        translate([-l/2 + radius, -w/2 + radius, 0])\n            cylinder(r=radius, h=h, center=true);\n        translate([l/2 - radius, -w/2 + radius, 0])\n            cylinder(r=radius, h=h, center=true);\n        translate([-l/2 + radius, w/2 - radius, 0])\n            cylinder(r=radius, h=h, center=true);\n        translate([l/2 - radius, w/2 - radius, 0])\n            cylinder(r=radius, h=h, center=true);\n            \n        // Top corners\n        translate([-l/2 + radius, -w/2 + radius, h])\n            cylinder(r=radius, h=1, center=true);\n        translate([l/2 - radius, -w/2 + radius, h])\n            cylinder(r=radius, h=1, center=true);\n        translate([-l/2 + radius, w/2 - radius, h])\n            cylinder(r=radius, h=1, center=true);\n        translate([l/2 - radius, w/2 - radius, h])\n            cylinder(r=radius, h=1, center=true);\n    }\n}\n\n// Handle with grip\nmodule handle() {\n    color([0.1, 0.1, 0.1])  // Black rubberized grip\n    union() {\n        // Main handle shaft\n        rotate([90, 0, 0]) {\n            cylinder(r=handle_diameter/2, h=handle_length, center=true);\n        }\n        \n        // Grip rings\n        for(i = [0:5]) {\n            translate([0, 0, -handle_length/2 + i*5 + 2.5]) {\n                difference() {\n                    cylinder(r=handle_diameter/2 + 1, h=3, center=true);\n                    rotate([90, 0, 0]) {\n                        cube([handle_diameter + 3, grip_depth*2, 4], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Pouring spout\nmodule spout() {\n    color([0.7, 0.5, 0.3])\n    union() {\n        // Spout base\n        translate([0, 0, 0])\n            cube([20, 10, 10], center=true);\n        \n        // Tapered spout\n        hull() {\n            translate([0, 0, 0])\n                cube([20, 8, 8], center=true);\n            translate([0, 8, 0])\n                cube([12, 1, 4], center=true);\n        }\n    }\n}\n\n// Render the trough tool\ntrough_tool();",
    "renders": true
  },
  {
    "tool": "basin",
    "openscad_code": "// Basin Tool - OpenSCAD Code\n// A realistic basin tool for mixing plaster or similar materials\n// Size: ~80mm diameter, 3D printable with proper wall thickness\n\n$fn = 36;\n\n// Main color scheme\nbasin_color = [0.9, 0.9, 0.95];\nhandle_color = [0.2, 0.2, 0.2];\nrim_color = [0.7, 0.7, 0.8];\n\n// Overall dimensions\nbasin_diameter = 80;\nbasin_height = 35;\nwall_thickness = 2.5;\nbase_thickness = 3;\n\nmodule basin_body() {\n    difference() {\n        // Outer bowl\n        cylinder(h = basin_height, d = basin_diameter, center = false);\n        \n        // Inner cavity\n        translate([0, 0, base_thickness])\n        cylinder(h = basin_height - base_thickness + 1, d = basin_diameter - 2*wall_thickness, center = false);\n    }\n}\n\nmodule pouring_spout() {\n    // Create pouring spout on one side\n    translate([0, basin_diameter/2 - 5, basin_height/2])\n    rotate([90, 0, 0])\n    difference() {\n        // Spout shape\n        cylinder(h = 15, d1 = 12, d2 = 8, center = true);\n        \n        // Hollow out spout\n        cylinder(h = 16, d1 = 8, d2 = 4, center = true);\n    }\n}\n\nmodule base_reinforcement() {\n    // Add base ring for stability\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = 3, d = basin_diameter + 5, center = false);\n        cylinder(h = 3.1, d = basin_diameter - 5, center = false);\n    }\n}\n\nmodule handle_mount() {\n    // Mounting point for handle\n    translate([0, -basin_diameter/2 - 5, basin_height/2])\n    rotate([90, 0, 0])\n    cylinder(h = 10, d = 8, center = true);\n}\n\nmodule handle() {\n    // Ergonomic handle with grip texture\n    translate([0, -basin_diameter/2 - 15, basin_height/2])\n    rotate([0, 0, 0])\n    union() {\n        // Main handle shaft\n        rotate([90, 0, 0])\n        cylinder(h = 25, d = 12, center = true);\n        \n        // Grip rings\n        for(i = [-10:5:10]) {\n            translate([0, 0, i])\n            rotate([90, 0, 0])\n            cylinder(h = 2, d = 14, center = true);\n        }\n    }\n}\n\nmodule measurement_marks() {\n    // Internal measurement markings\n    for(level = [0.25, 0.5, 0.75]) {\n        translate([0, 0, base_thickness + level * (basin_height - base_thickness - 5)])\n        rotate([0, 0, 0])\n        difference() {\n            cylinder(h = 0.5, d = basin_diameter - 2*wall_thickness, center = false);\n            cylinder(h = 0.6, d = basin_diameter - 2*wall_thickness - 4, center = false);\n        }\n    }\n}\n\n// Assemble the basin tool\nunion() {\n    color(basin_color) {\n        union() {\n            basin_body();\n            pouring_spout();\n            base_reinforcement();\n            handle_mount();\n        }\n    }\n    \n    color(handle_color) {\n        handle();\n    }\n    \n    color(rim_color) {\n        // Reinforced rim\n        translate([0, 0, basin_height - 3])\n        difference() {\n            cylinder(h = 3, d = basin_diameter, center = false);\n            cylinder(h = 3.1, d = basin_diameter - 2*wall_thickness - 2, center = false);\n        }\n    }\n    \n    // Measurement marks in slightly darker color\n    color([0.8, 0.8, 0.85])\n    measurement_marks();\n}",
    "renders": true
  },
  {
    "tool": "bowl",
    "openscad_code": "// Realistic 3D-printable bowl tool (medium complexity)\n// Overall dimensions: ~80 mm diameter, 45 mm height, 2 mm wall thickness\n\n$fn = 64;\n\n// Main bowl body with slight taper\nmodule bowl_body() {\n    difference() {\n        // Exterior\n        cylinder(h = 35, d1 = 80, d2 = 75);\n        \n        // Interior cavity\n        translate([0, 0, -1])\n            cylinder(h = 34, d1 = 76, d2 = 71);\n    }\n}\n\n// Rounded bottom for better printability\nmodule rounded_bottom() {\n    difference() {\n        // Solid rounded base\n        translate([0, 0, -10])\n            scale([1, 1, 0.3])\n                sphere(d = 80);\n        \n        // Hollow interior\n        translate([0, 0, -9])\n            scale([1, 1, 0.29])\n                sphere(d = 76);\n    }\n}\n\n// Handle grip with ergonomic curve\nmodule handle() {\n    color(\"slategray\")\n    union() {\n        // Main handle shaft\n        translate([45, 0, 25])\n            rotate([0, 90, 0])\n                cylinder(h = 50, d = 12, $fn = 32);\n        \n        // Ergonomic grip pattern\n        for (i = [0:4]) {\n            translate([45 + 2 - i*8, 0, 25])\n                rotate([0, 90, 0])\n                    cylinder(h = 6, d = 14, $fn = 32);\n        }\n        \n        // End cap\n        translate([-5, 0, 25])\n            rotate([0, 90, 0])\n                cylinder(h = 4, d = 14);\n    }\n}\n\n// Pouring spout\nmodule spout() {\n    color(\"silver\")\n    translate([0, 40, 30])\n        rotate([90, 0, 0])\n            difference() {\n                // Spout shape\n                union() {\n                    cube([15, 8, 15], center = true);\n                    translate([0, 4, 0])\n                        cylinder(h = 15, d = 8, center = true);\n                }\n                \n                // Hollow interior\n                translate([0, 0, 2])\n                    scale([0.8, 0.7, 0.8])\n                        cube([15, 8, 15], center = true);\n            }\n}\n\n// Measurement markings\nmodule markings() {\n    color(\"dimgray\")\n    for (i = [1:3]) {\n        translate([0, 35 - i*10, 5 + i*10])\n            rotate([90, 0, 0])\n                linear_extrude(height = 0.5)\n                    text(str(i*100, \"ml\"), size = 3, halign = \"center\");\n    }\n}\n\n// Rim reinforcement\nmodule rim() {\n    color(\"lightgray\")\n    difference() {\n        // Outer rim\n        translate([0, 0, 35])\n            cylinder(h = 5, d1 = 82, d2 = 80);\n        \n        // Inner rim\n        translate([0, 0, 34])\n            cylinder(h = 5, d1 = 78, d2 = 76);\n    }\n}\n\n// Stable base ring\nmodule base_ring() {\n    color(\"darkgray\")\n    difference() {\n        cylinder(h = 3, d = 78);\n        cylinder(h = 3.1, d = 74);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"whitesmoke\") {\n        bowl_body();\n        rounded_bottom();\n        rim();\n        base_ring();\n    }\n    \n    handle();\n    spout();\n    markings();\n}",
    "renders": true
  },
  {
    "tool": "pan",
    "openscad_code": "// Realistic 3D-Printable Pan Tool â€“ OpenSCAD\n// Overall size â‰ˆ 90 mm\n// Wall thickness â‰¥ 1.2 mm for FDM printing\n\n$fn = 36;\n\n// Colors\ncolor_pan   = [0.25, 0.25, 0.25];   // dark grey non-stick\ncolor_handle= [0.10, 0.10, 0.10];   // black phenolic\ncolor_grip  = [0.85, 0.20, 0.20];   // red silicone strips\n\nmodule pan() {\n    // Main bowl\n    difference() {\n        // Outer shell\n        color(color_pan)\n        rotate_extrude()\n            translate([0, 30, 0])\n                rotate([0, -90, 0])\n                    circle(r = 45, $fn = 100);\n        \n        // Inner cavity\n        translate([0, 0, 2.5])\n            rotate_extrude()\n                translate([0, 30, 0])\n                    rotate([0, -90, 0])\n                        circle(r = 42.5, $fn = 100);\n        \n        // Flat bottom inside\n        translate([-50, -50, 2.5])\n            cube([100, 100, 5]);\n    }\n    \n    // Bottom flat base\n    color(color_pan)\n    translate([0, 0, -2.5])\n        cylinder(h = 2.5, r1 = 45, r2 = 45);\n}\n\nmodule handle() {\n    // Main handle\n    color(color_handle)\n    difference() {\n        // Tapered handle body\n        hull() {\n            translate([0, 0, 0])\n                cube([7, 7, 45], center = true);\n            translate([0, 0, 75])\n                cube([5, 5, 45], center = true);\n        }\n        \n        // Hanging hole\n        translate([0, 0, 65])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 2.5, center = true);\n    }\n    \n    // Silicone grip strips\n    for (z = [20:15:65]) {\n        color(color_grip)\n        translate([0, 0, z])\n            scale([1.1, 1.1, 1])\n                difference() {\n                    cube([5.2, 5.2, 4], center = true);\n                    cube([4.8, 4.8, 4.5], center = true);\n                }\n    }\n    \n    // Rivets\n    for (dz = [0, 10, 20]) {\n        color(color_pan)\n        translate([0, 3.8, dz])\n            sphere(d = 2.5);\n    }\n}\n\nmodule rivet_plate() {\n    // Mounting plate\n    color(color_pan)\n    difference() {\n        cube([15, 5, 25], center = true);\n        translate([0, 2.6, 0])\n            cube([11, 3, 21], center = true);\n    }\n}\n\n// Assembly\npan();\ntranslate([45, 0, 0])\n    rotate([0, 90, 0])\n        union() {\n            rivet_plate();\n            translate([7.5, 0, 0])\n                handle();\n        }",
    "renders": true
  },
  {
    "tool": "plate",
    "openscad_code": "// Plate tool - realistic style, medium complexity\n// A 3D printable plate tool with handle and grip features\n\n$fn = 50;\n\n// Main dimensions\nplate_diameter = 60;\nplate_thickness = 8;\nhandle_length = 40;\nhandle_diameter = 12;\ngrip_length = 25;\ngrip_diameter = 18;\nboss_height = 5;\nboss_diameter = 20;\n\n// Colors\nplate_color = [0.8, 0.8, 0.8];  // Light gray\nhandle_color = [0.2, 0.2, 0.2]; // Dark gray\ngrip_color = [0.1, 0.1, 0.1];   // Black\naccent_color = [0.9, 0.1, 0.1]; // Red accent\n\n// Main assembly\nunion() {\n    // Plate body\n    color(plate_color)\n    difference() {\n        // Main plate disk\n        cylinder(h = plate_thickness, d = plate_diameter);\n        \n        // Center hole for handle boss\n        translate([0, 0, -0.1])\n            cylinder(h = plate_thickness + 0.2, d = 8);\n        \n        // Ventilation holes around perimeter\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([plate_diameter/2 - 8, 0, 3])\n                    cylinder(h = 2, d = 4);\n        }\n    }\n    \n    // Handle boss\n    color(handle_color)\n    translate([0, 0, plate_thickness])\n        cylinder(h = boss_height, d = boss_diameter);\n    \n    // Handle shaft\n    color(handle_color)\n    translate([0, 0, plate_thickness + boss_height])\n        cylinder(h = handle_length, d = handle_diameter);\n    \n    // Handle grip\n    color(grip_color)\n    translate([0, 0, plate_thickness + boss_height + handle_length - grip_length])\n        cylinder(h = grip_length, d = grip_diameter);\n    \n    // Grip knurling pattern\n    color(grip_color)\n    translate([0, 0, plate_thickness + boss_height + handle_length - grip_length])\n    union() {\n        for(i = [0:23]) {\n            rotate([0, 0, i * 15])\n                translate([grip_diameter/2 - 1, -1, 0])\n                    cube([2, 2, grip_length]);\n        }\n    }\n    \n    // Reinforcement ribs\n    color(plate_color)\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([plate_diameter/4, -3, 0])\n                cube([plate_diameter/2, 6, plate_thickness]);\n    }\n    \n    // Red alignment mark\n    color(accent_color)\n    translate([plate_diameter/2 - 2, -1, plate_thickness - 1])\n        cube([4, 2, 1]);\n    \n    // Serial number engraving\n    color([0.5, 0.5, 0.5])\n    translate([plate_diameter/2 - 15, -3, 0])\n        linear_extrude(height = 0.5)\n            text(\"PLT-2024\", size = 3);\n}",
    "renders": true
  },
  {
    "tool": "platter",
    "openscad_code": "// Realistic medium-complexity platter tool (rotating presentation tray)\n// Overall size ~90 mm diameter, designed for 3D printing\n\n// Parameters\n$fn = 36;\nplatter_d = 90;\nplatter_h = 3;\nrim_h = 6;\nrim_t = 2;\nbase_d = 30;\nbase_h = 8;\nhandle_l = 40;\nhandle_r = 6;\ngrip_d = 12;\ngrip_h = 10;\nn_divots = 12;\ndivot_r = 4;\ndivot_d = 1;\n\nmodule platter_top() {\n    difference() {\n        // Main platter disc\n        color(\"silver\") cylinder(d = platter_d, h = platter_h);\n        \n        // Top rim recess\n        translate([0, 0, platter_h - 0.2])\n            cylinder(d = platter_d - rim_t*2, h = 0.2);\n        \n        // Divots for food placement\n        for (i = [0:n_divots-1]) {\n            rotate([0, 0, i * 360 / n_divots])\n                translate([platter_d/2 - rim_t - divot_r - 2, 0, platter_h - divot_d])\n                    sphere(r = divot_r);\n        }\n    }\n}\n\nmodule rim() {\n    // Outer rim wall\n    color(\"silver\") difference() {\n        cylinder(d = platter_d, h = rim_h);\n        translate([0, 0, -0.1])\n            cylinder(d = platter_d - rim_t*2, h = rim_h + 0.2);\n    }\n}\n\nmodule handle() {\n    color(\"dimgray\") union() {\n        // Handle shaft\n        rotate([90, 0, 0])\n            translate([0, 0, -handle_l/2])\n                cylinder(h = handle_l, r = handle_r);\n        \n        // Comfortable grip\n        translate([0, -handle_l - handle_r, 0])\n            color(\"black\") cylinder(h = grip_h, d = grip_d);\n        \n        // Transition fillet\n        translate([0, -handle_r, 0])\n            rotate([90, 0, 0])\n                cylinder(h1 = handle_r*2, h2 = 0, r1 = handle_r, r2 = handle_r*1.5);\n    }\n}\n\nmodule base() {\n    color(\"silver\") union() {\n        // Solid cylindrical base\n        cylinder(d = base_d, h = base_h);\n        \n        // Chamfered bottom edge\n        translate([0, 0, -0.1])\n            cylinder(h1 = base_h + 0.1, h2 = base_h - 1, r1 = base_d/2, r2 = base_d/2 - 1);\n        \n        // Centering nub for bearing (if desired)\n        translate([0, 0, base_h])\n            cylinder(h = 2, r = 5);\n    }\n}\n\nmodule grip_texture() {\n    // Knurled texture on grip\n    color(\"black\") for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([grip_d/2 - 1, 0, 0])\n                cube([2, 1, grip_h], center = true);\n    }\n}\n\n// Assemble the platter tool\nunion() {\n    // Base\n    base();\n    \n    // Platter assembly\n    translate([0, 0, base_h])\n        union() {\n            platter_top();\n            translate([0, 0, platter_h])\n                rim();\n        }\n    \n    // Handle attached to rim edge\n    translate([platter_d/2 - rim_t/2, 0, platter_h + rim_h/2])\n        rotate([0, 90, 90])\n            handle();\n    \n    // Add grip texture\n    translate([platter_d/2 - rim_t/2, -handle_l - handle_r, platter_h + rim_h/2])\n        grip_texture();\n}",
    "renders": true
  },
  {
    "tool": "cube",
    "openscad_code": "// Cube Tool - Medium Complexity Realistic Style\n// A compact 3D printable cube tool with functional features\n\n$fn = 36;\n\n// Main dimensions\ntool_size = 60;  // Overall tool size in mm\nwall_thickness = 3;\nhandle_diameter = 12;\nhandle_length = 25;\ngrip_depth = 1.5;\n\nmodule main_body() {\n    difference() {\n        // Main cube body\n        color(\"silver\")\n        cube([tool_size, tool_size, tool_size], center=true);\n        \n        // Hollow interior\n        color(\"silver\")\n        cube([tool_size-wall_thickness*2, tool_size-wall_thickness*2, tool_size-wall_thickness*2], center=true);\n        \n        // Top access hole\n        translate([0, 0, tool_size/2 - wall_thickness])\n            cylinder(h=wall_thickness+1, r=handle_diameter/2+2);\n        \n        // Bottom access hole\n        translate([0, 0, -tool_size/2 + wall_thickness])\n            cylinder(h=wall_thickness+1, r=handle_diameter/2+2);\n    }\n}\n\nmodule handle() {\n    // Central handle shaft\n    color(\"darkslategray\")\n    translate([0, 0, 0])\n        cylinder(h=tool_size - wall_thickness*2, r=handle_diameter/2);\n    \n    // Grip rings\n    for(i = [-1:1]) {\n        translate([0, 0, i * (handle_length/3)])\n            color(\"black\")\n            difference() {\n                cylinder(h=5, r=handle_diameter/2 + grip_depth);\n                cylinder(h=5.1, r=handle_diameter/2);\n            }\n    }\n}\n\nmodule measurement_markings() {\n    // Metric markings on three faces\n    for(face = [0:2]) {\n        rotate([0, face*90, 0])\n        translate([tool_size/2 + 0.1, 0, 0])\n        for(i = [1:9]) {\n            translate([0, -tool_size/2 + i*tool_size/10, -tool_size/2 + 5])\n                color(\"white\")\n                cube([0.5, 0.5, 5]);\n            \n            if(i % 2 == 0) {\n                translate([0, -tool_size/2 + i*tool_size/10, -tool_size/2 + 7])\n                    color(\"white\")\n                    cube([0.5, 3, 0.5]);\n            }\n        }\n    }\n}\n\nmodule corner_reinforcements() {\n    // Reinforced corners for durability\n    for(x = [-1,1]) {\n        for(y = [-1,1]) {\n            for(z = [-1,1]) {\n                translate([x*(tool_size/2 - 5), y*(tool_size/2 - 5), z*(tool_size/2 - 5)])\n                    color(\"dimgray\")\n                    sphere(r=5);\n            }\n        }\n    }\n}\n\nmodule center_finder() {\n    // Crosshair at center of each face\n    for(axis = [[1,0,0], [0,1,0], [0,0,1]]) {\n        color(\"red\") {\n            translate([axis[0]*(tool_size/2 + 0.1), 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=tool_size, r=0.5);\n            translate([0, axis[1]*(tool_size/2 + 0.1), 0])\n                rotate([90, 0, 0])\n                    cylinder(h=tool_size, r=0.5);\n            translate([0, 0, axis[2]*(tool_size/2 + 0.1)])\n                cylinder(h=tool_size, r=0.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    handle();\n    measurement_markings();\n    corner_reinforcements();\n    center_finder();\n}",
    "renders": true
  },
  {
    "tool": "timber",
    "openscad_code": "// Timber Clamp Tool - Medium Complexity Realistic Design\n// Overall dimensions: ~80mm length x ~30mm height x ~25mm width\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule main_body() {\n    color(\"saddlebrown\") {\n        // Main bar with rounded edges\n        difference() {\n            hull() {\n                translate([0, 0, 10]) cylinder(h=15, d=20, $fn=32);\n                translate([60, 0, 10]) cylinder(h=15, d=20, $fn=32);\n            }\n            \n            // Hollow center for weight reduction\n            translate([30, 0, 17.5]) cube([80, 12, 20], center=true);\n        }\n        \n        // Handle grip\n        translate([0, 0, 17.5]) {\n            difference() {\n                cylinder(h=25, d=22, $fn=32);\n                translate([0, 0, 2]) cylinder(h=20, d=18, $fn=32);\n            }\n        }\n        \n        // Texture rings on handle\n        for(i = [1:3]) {\n            translate([0, 0, 5 + i*6]) {\n                color(\"darkgoldenrod\") \n                rotate([90, 0, 0]) cylinder(h=0.5, d=22.5, $fn=64);\n            }\n        }\n    }\n}\n\nmodule clamp_jaw() {\n    color(\"dimgray\") {\n        // Fixed jaw\n        translate([60, 0, 5]) {\n            difference() {\n                union() {\n                    cube([15, 25, 5], center=true);\n                    translate([7.5, 0, 2.5]) cube([15, 22, 5], center=true);\n                }\n                // Grip teeth\n                for(i = [-10:2:10]) {\n                    translate([7.5, i, 2.5]) cube([16, 1, 6], center=true);\n                }\n            }\n        }\n        \n        // Movable jaw\n        translate([30, 0, 5]) {\n            difference() {\n                union() {\n                    cube([15, 25, 5], center=true);\n                    translate([-7.5, 0, 2.5]) cube([15, 22, 5], center=true);\n                }\n                // Grip teeth\n                for(i = [-10:2:10]) {\n                    translate([-7.5, i, 2.5]) cube([16, 1, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule screw_mechanism() {\n    color(\"silver\") {\n        // Threaded rod\n        translate([45, 0, 17.5]) {\n            difference() {\n                cylinder(h=35, d=8, $fn=32);\n                // Thread grooves\n                for(i = [0:2:35]) {\n                    rotate([0, 0, i*15]) \n                    translate([0, 4, i]) cube([8.1, 0.5, 1], center=true);\n                }\n            }\n        }\n        \n        // Handle wheel\n        translate([0, 0, 17.5]) {\n            difference() {\n                cylinder(h=8, d=20, $fn=24);\n                // Spoke holes\n                for(i = [0:60:300]) {\n                    rotate([0, 0, i]) \n                    translate([7, 0, 4]) cylinder(h=8.1, d=3, $fn=16);\n                }\n            }\n            \n            // Handle grip\n            color(\"darkred\")\n            rotate([90, 0, 0]) \n            translate([15, 0, 0]) cylinder(h=15, d=8, $fn=16);\n        }\n        \n        // Nut bracket\n        color(\"silver\")\n        translate([30, 0, 17.5]) {\n            difference() {\n                cube([10, 12, 15], center=true);\n                translate([0, 0, 7.5]) cylinder(h=15.1, d=9, $fn=32);\n            }\n        }\n    }\n}\n\nmodule guide_rails() {\n    color(\"darkgoldenrod\") {\n        // Top rail\n        translate([45, 12, 17.5]) {\n            cube([30, 3, 15], center=true);\n        }\n        \n        // Bottom rail\n        translate([45, -12, 17.5]) {\n            cube([30, 3, 15], center=true);\n        }\n        \n        // Rail supports\n        for(pos = [15, 75]) {\n            translate([pos, 0, 17.5]) {\n                cube([5, 25, 15], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    main_body();\n    clamp_jaw();\n    screw_mechanism();\n    guide_rails();\n    \n    // Measurement scale\n    color(\"black\") {\n        for(i = [0:5:50]) {\n            translate([i, 0, 26]) cube([0.5, 1, 0.5], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "log",
    "openscad_code": "// Log Tool - Realistic style\n// A traditional splitting wedge for firewood processing\n\n// Overall dimensions\noverall_length = 90;\nhandle_length = 40;\nblade_length = 50;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Colors\nmetal_color = [0.7, 0.7, 0.7];\nhandle_color = [0.3, 0.2, 0.1];\n\n// Main module\nmodule log_tool() {\n    // Handle assembly\n    translate([0, 0, -handle_length/2]) {\n        // Handle grip\n        color(handle_color) handle_grip();\n        \n        // Metal collar\n        translate([0, 0, handle_length/2 - 5]) {\n            color(metal_color) cylinder(h=5, r1=8, r2=7, $fn=32);\n        }\n    }\n    \n    // Blade assembly\n    translate([0, 0, handle_length/2]) {\n        color(metal_color) blade_assembly();\n    }\n}\n\n// Handle grip with texture\nmodule handle_grip() {\n    difference() {\n        // Main handle body\n        cylinder(h=handle_length, r=6, $fn=32);\n        \n        // Grip grooves\n        for(i = [0:4]) {\n            translate([0, 0, 5 + i*7]) {\n                rotate([0, 0, 45]) {\n                    cube([12, 1, 3], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Blade assembly with wedge shape\nmodule blade_assembly() {\n    union() {\n        // Transition from handle to blade\n        cylinder(h=8, r1=7, r2=6, $fn=32);\n        \n        // Main blade body\n        translate([0, 0, 4]) {\n            difference() {\n                // Wedge shape\n                hull() {\n                    translate([0, 0, 0]) cube([12, 6, 2], center=true);\n                    translate([0, 0, blade_length-8]) cube([2, 30, 2], center=true);\n                }\n                \n                // Cutting edge bevel\n                translate([0, -15, blade_length-8]) {\n                    rotate([0, 45, 0]) {\n                        cube([30, 30, 30], center=true);\n                    }\n                }\n                mirror([0, 1, 0]) {\n                    translate([0, -15, blade_length-8]) {\n                        rotate([0, 45, 0]) {\n                            cube([30, 30, 30], center=true);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Reinforcement ribs\n        for(i = [-1:1]) {\n            if(i != 0) {\n                translate([i*4, 0, blade_length/2]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h=blade_length-8, r=0.5, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Striking surface\n        translate([0, 0, blade_length-6]) {\n            cube([14, 8, 3], center=true);\n        }\n        \n        // Safety groove\n        translate([0, 0, 10]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=12, r=0.5, center=true, $fn=16);\n            }\n        }\n    }\n}\n\n// Generate the tool\nlog_tool();",
    "renders": true
  },
  {
    "tool": "staff",
    "openscad_code": "// Realistic Medium-Complexity Staff Tool (Quarterstaff)\n// Approx 100 mm tall, 3D-printable, no overhangs\n\n// Overall scale factor\nscale_factor = 1.0;\n\n// Dimensions in mm\nstaff_length = 100 * scale_factor;\nstaff_diameter = 8 * scale_factor;\ngrip_length = 30 * scale_factor;\ngrip_diameter = 12 * scale_factor;\nferrule_length = 8 * scale_factor;\nferrule_diameter = 10 * scale_factor;\nring_width = 2 * scale_factor;\nring_gap = 1.5 * scale_factor;\nnum_rings = 4;\n\n// Main staff body\nmodule staff_body() {\n    color(\"BurlyWood\")\n    cylinder(h = staff_length, d = staff_diameter, center = true, $fn = 32);\n}\n\n// Leather grip with embossed rings\nmodule grip() {\n    difference() {\n        color(\"SaddleBrown\")\n        cylinder(h = grip_length, d = grip_diameter, center = true, $fn = 32);\n        \n        // Central hole\n        cylinder(h = grip_length + 1, d = staff_diameter, center = true, $fn = 32);\n        \n        // Embossed rings\n        for (i = [0 : num_rings - 1]) {\n            translate([0, 0, -grip_length/2 + (i + 0.5) * (ring_width + ring_gap)])\n            cylinder(h = ring_width, d = grip_diameter + 0.5, center = true, $fn = 32);\n        }\n    }\n}\n\n// Metal ferrule at bottom\nmodule ferrule() {\n    difference() {\n        color(\"Silver\")\n        cylinder(h = ferrule_length, d = ferrule_diameter, center = true, $fn = 32);\n        cylinder(h = ferrule_length + 1, d = staff_diameter + 0.5, center = true, $fn = 32);\n    }\n}\n\n// Runes along top half\nmodule runes() {\n    color(\"DimGray\")\n    for (i = [0 : 5]) {\n        rotate([0, 0, i * 30])\n        translate([staff_diameter/2 + 0.3, 0, staff_length/4 + i * 5])\n        cube([1, 0.5, 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    staff_body();\n    \n    // Grip centered on staff\n    translate([0, 0, 0])\n    grip();\n    \n    // Ferrule at bottom\n    translate([0, 0, -staff_length/2 + ferrule_length/2])\n    ferrule();\n    \n    // Runes on upper half\n    translate([0, 0, 0])\n    runes();\n}",
    "renders": true
  },
  {
    "tool": "baton",
    "openscad_code": "// Realistic Baton Tool (Medium Complexity)\n// Approx. 80mm total length\n\n// Color definitions\nbaton_color = \"Silver\";\nhandle_color = \"Black\";\ngrip_color = \"DarkGray\";\ntip_color = \"Gray\";\n\n// Main module\nmodule baton() {\n    // Handle assembly\n    union() {\n        // Handle grip\n        color(handle_color) handle_grip();\n        \n        // Baton shaft\n        color(baton_color) translate([0, 0, 25]) baton_shaft();\n        \n        // End cap\n        color(handle_color) translate([0, 0, 0]) end_cap();\n    }\n}\n\n// Handle grip with textured pattern\nmodule handle_grip() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=25, r1=6, r2=5.5, $fn=32);\n        \n        // Grip rings - removed to create texture\n        for(i = [1:2:23]) {\n            translate([0, 0, i]) \n                cylinder(h=1.5, r1=5.8, r2=5.8, $fn=32);\n        }\n    }\n    \n    // Raised grip bumps\n    for(i = [5:5:20]) {\n        rotate([0, 0, 0]) \n            translate([5, 0, i]) \n                sphere(r=0.8, $fn=8);\n        rotate([0, 0, 120]) \n            translate([5, 0, i]) \n                sphere(r=0.8, $fn=8);\n        rotate([0, 0, 240]) \n            translate([5, 0, i]) \n                sphere(r=0.8, $fn=8);\n    }\n}\n\n// Baton shaft with tapered end\nmodule baton_shaft() {\n    union() {\n        // Main shaft\n        cylinder(h=50, r1=5.5, r2=4, $fn=32);\n        \n        // Reinforcement rings\n        translate([0, 0, 45]) \n            cylinder(h=3, r1=4.2, r2=4.2, $fn=32);\n        \n        // Tip detail\n        color(tip_color) translate([0, 0, 50]) baton_tip();\n    }\n}\n\n// Baton tip with rounded end\nmodule baton_tip() {\n    // Cylindrical tip base\n    cylinder(h=5, r1=4, r2=3.5, $fn=32);\n    \n    // Rounded tip\n    translate([0, 0, 5]) \n        sphere(r=3.5, $fn=32);\n}\n\n// End cap with lanyard hole\nmodule end_cap() {\n    difference() {\n        // Main cap\n        cylinder(h=5, r1=6, r2=6, $fn=32);\n        \n        // Chamfer bottom edge\n        translate([0, 0, -0.1]) \n            cylinder(h=2, r1=6.5, r2=6, $fn=32);\n        \n        // Lanyard hole\n        rotate([90, 0, 0]) \n            cylinder(h=12, r1=1.5, r2=1.5, $fn=16);\n    }\n    \n    // Small detail ring\n    translate([0, 0, 2.5]) \n        cylinder(h=0.5, r1=6.2, r2=6.2, $fn=32);\n}\n\n// Generate the baton\nbaton();",
    "renders": true
  },
  {
    "tool": "cane",
    "openscad_code": "// Realistic Cane Tool - Medium Complexity\n// Includes handle, shaft, rubber tip, and decorative collar\n\n// Parameters\nhandle_length = 25;\nhandle_thickness = 12;\nshaft_length = 60;\nshaft_diameter = 8;\ntip_diameter = 12;\ntip_height = 10;\ncollar_height = 8;\ncollar_diameter = 12;\n\n// Main cane assembly\nunion() {\n    // Handle - curved ergonomic grip\n    translate([0, 0, shaft_length + handle_thickness/2]) {\n        difference() {\n            // Main handle body\n            color([0.6, 0.3, 0.1]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h = handle_length, d = handle_thickness, $fn = 32);\n                }\n            }\n            \n            // Finger grooves on underside\n            for(i = [0:3]) {\n                translate([0, -handle_thickness/2 + 2 + i*5, 0]) {\n                    scale([1, 0.3, 0.3]) {\n                        sphere(4, $fn = 16);\n                    }\n                }\n            }\n        }\n        \n        // Handle end cap\n        translate([-handle_length/2, 0, 0]) {\n            color([0.4, 0.2, 0.1]) {\n                sphere(handle_thickness/2, $fn = 32);\n            }\n        }\n    }\n    \n    // Shaft - main body\n    color([0.5, 0.25, 0.1]) {\n        cylinder(h = shaft_length, d = shaft_diameter, $fn = 32);\n    }\n    \n    // Decorative collar near handle\n    translate([0, 0, shaft_length - collar_height]) {\n        color([0.7, 0.7, 0.6]) {\n            difference() {\n                cylinder(h = collar_height, d = collar_diameter, $fn = 32);\n                cylinder(h = collar_height + 0.2, d = shaft_diameter + 1, $fn = 32);\n            }\n            \n            // Ornamental ridges\n            for(i = [0:2]) {\n                translate([0, 0, i * (collar_height/3)]) {\n                    cylinder(h = 1, d = collar_diameter - 1, $fn = 32);\n                }\n            }\n        }\n    }\n    \n    // Rubber tip - slightly domed\n    translate([0, 0, -tip_height/2]) {\n        color([0.1, 0.1, 0.1]) {\n            difference() {\n                cylinder(h = tip_height, d = tip_diameter, $fn = 32);\n                translate([0, 0, tip_height - 1]) {\n                    sphere(tip_diameter/2, $fn = 32);\n                }\n            }\n            \n            // Traction rings\n            for(i = [1:3]) {\n                translate([0, 0, i * 2]) {\n                    cylinder(h = 0.5, d = tip_diameter - 1, $fn = 32);\n                }\n            }\n        }\n    }\n    \n    // Shaft texture - subtle wood grain\n    difference() {\n        cylinder(h = shaft_length, d = shaft_diameter + 0.5, $fn = 32);\n        for(i = [0:5:shaft_length]) {\n            rotate([0, 0, i * 5]) {\n                translate([0, shaft_diameter/2 - 0.2, i]) {\n                    cube([0.2, 0.4, 2], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Support base for 3D printing\n%translate([0, 0, -tip_height - 2]) {\n    cylinder(h = 2, d = tip_diameter + 4, $fn = 32);\n}",
    "renders": true
  },
  {
    "tool": "crop",
    "openscad_code": "// Crop Tool - Garden Pruning Shears\n// Medium complexity realistic style\n\n// Constants\nhandle_length = 45;\nhandle_diameter = 12;\nblade_length = 70;\nblade_width = 20;\nblade_thickness = 3;\npivot_radius = 5;\nsafety_lock_width = 8;\n\n// Main assembly\nmodule pruning_shears() {\n    color(\"silver\") {\n        union() {\n            // Left handle\n            translate([-blade_length/2 - 10, 0, 0]) \n                rotate([0, 0, -15]) \n                handle_assembly();\n            \n            // Left blade\n            translate([0, 0, 0]) \n                rotate([0, 0, -15]) \n                blade_assembly(true);\n                \n            // Right handle\n            translate([-blade_length/2 - 10, 0, 0]) \n                rotate([0, 0, 15]) \n                mirror([1, 0, 0]) \n                handle_assembly();\n                \n            // Right blade\n            translate([0, 0, 0]) \n                rotate([0, 0, 15]) \n                mirror([1, 0, 0]) \n                blade_assembly(false);\n                \n            // Pivot bolt\n            translate([0, 0, 0]) \n                pivot_mechanism();\n                \n            // Safety lock\n            translate([0, -handle_diameter/2 - 2, 0]) \n                rotate([90, 0, 0]) \n                safety_lock();\n        }\n    }\n}\n\n// Handle assembly with grip\nmodule handle_assembly() {\n    union() {\n        // Main handle tube\n        translate([0, 0, -handle_length/2]) \n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n        // Ergonomic grip\n        for(i = [0:3]) {\n            translate([0, 0, -handle_length/2 + i*10 + 5]) \n                rotate([0, 0, 45]) \n                cube([handle_diameter*1.2, handle_diameter*1.2, 8], center=true);\n        }\n        \n        // End cap\n        translate([0, 0, handle_length/2]) \n            cylinder(h=5, d=handle_diameter*1.2, $fn=32);\n            \n        // Hanging hole\n        translate([0, 0, handle_length/2 - 2.5]) \n            difference() {\n                cylinder(h=5, d=handle_diameter*1.2, $fn=32);\n                translate([0, 0, -1]) \n                    cylinder(h=7, d=5, $fn=32);\n            }\n    }\n}\n\n// Blade assembly\nmodule blade_assembly(is_left) {\n    union() {\n        // Blade base\n        translate([blade_length/2, 0, 0]) \n            cube([blade_length, blade_width, blade_thickness], center=true);\n            \n        // Curved cutting edge\n        difference() {\n            translate([blade_length/2, 0, 0]) \n                cube([blade_length, blade_width, blade_thickness], center=true);\n                \n            // Cutting bevel\n            translate([blade_length*0.75, 0, blade_thickness/2]) \n                rotate([0, 15, 0]) \n                cube([blade_length*1.5, blade_width*2, blade_thickness*2], center=true);\n                \n            // Serrated edge\n            for(i = [0:10]) {\n                translate([i*6, blade_width/2 - 1, 0]) \n                    rotate([0, 0, -30]) \n                    cube([2, 3, blade_thickness*1.1], center=true);\n            }\n        }\n        \n        // Blade reinforcement\n        translate([blade_length*0.3, 0, blade_thickness/2 + 1]) \n            cube([blade_length*0.4, blade_width*0.6, 2], center=true);\n            \n        // Pivot hole\n        translate([0, 0, 0]) \n            cylinder(h=blade_thickness*2, d=pivot_radius*2, center=true, $fn=32);\n    }\n}\n\n// Pivot mechanism\nmodule pivot_mechanism() {\n    union() {\n        // Main bolt\n        cylinder(h=blade_thickness*2 + 4, d=pivot_radius*2, center=true, $fn=32);\n        \n        // Bolt head\n        translate([0, 0, blade_thickness + 2]) \n            cylinder(h=3, d=pivot_radius*3, $fn=6);\n            \n        // Nut\n        translate([0, 0, -blade_thickness - 2]) \n            difference() {\n                cylinder(h=3, d=pivot_radius*3, $fn=6);\n                cylinder(h=5, d=pivot_radius, center=true, $fn=32);\n            }\n    }\n}\n\n// Safety lock mechanism\nmodule safety_lock() {\n    color(\"red\") {\n        difference() {\n            // Lock slider\n            cube([safety_lock_width, safety_lock_width, 15], center=true);\n            \n            // Grip ridges\n            for(i = [0:2]) {\n                translate([-safety_lock_width/2 + i*3, 0, 0]) \n                    cube([0.5, safety_lock_width + 2, 14], center=true);\n            }\n            \n            // Mounting hole\n            translate([0, 0, -8]) \n                cylinder(h=20, d=4, $fn=32);\n        }\n    }\n}\n\n// Render the shears\npruning_shears();",
    "renders": true
  },
  {
    "tool": "whip",
    "openscad_code": "// Realistic whip with medium complexity\n// 3D printable whip tool ~90mm long\n\n// Handle segments\nmodule handle_segment(length, radius, grip_depth) {\n    // Main cylinder\n    cylinder(h=length, r=radius, $fn=32);\n    \n    // Grip rings\n    for(i=[1:grip_depth:length-5]) {\n        translate([0,0,i]) \n            cylinder(h=2, r=radius+0.5, $fn=32);\n    }\n}\n\n// Handle tip with loop\nmodule handle_tip() {\n    difference() {\n        union() {\n            // Tapered end\n            cylinder(h=8, r1=4, r2=2, $fn=32);\n            \n            // Loop for hanging\n            translate([0,0,8])\n                rotate([90,0,0])\n                    torus(2, 1, 16);\n        }\n        \n        // Remove loop hole\n        translate([0,0,8])\n            rotate([90,0,0])\n                cylinder(h=5, r=1, $fn=16);\n    }\n}\n\n// Torus helper\nmodule torus(r_major, r_minor, fn) {\n    rotate_extrude($fn=fn) {\n        translate([r_major, 0, 0])\n            circle(r=r_minor, $fn=fn);\n    }\n}\n\n// Whip thong segments\nmodule thong_segment(length, start_width, end_width, thickness) {\n    hull() {\n        translate([0,0,0])\n            scale([start_width, thickness, 1])\n                sphere(r=1, $fn=16);\n        \n        translate([0,0,length])\n            scale([end_width, thickness, 1])\n                sphere(r=1, $fn=16);\n    }\n}\n\n// Cracker end\nmodule cracker() {\n    // Tapered cracker\n    difference() {\n        union() {\n            // Main cracker\n            translate([0,0,0])\n                thong_segment(15, 1.5, 0.5, 0.3);\n            \n            // Knot detail\n            translate([0,0,15])\n                sphere(r=0.7, $fn=16);\n        }\n        \n        // Split ends\n        translate([0,0,15])\n            rotate([0,90,0])\n                cube([10,0.2,0.2], center=true);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    color([0.4, 0.2, 0.1]) {\n        union() {\n            // Main handle\n            handle_segment(40, 6, 5);\n            \n            // End cap\n            translate([0,0,40])\n                handle_tip();\n            \n            // Ferrule\n            translate([0,0,-2])\n                cylinder(h=3, r=7, $fn=32);\n        }\n    }\n}\n\n// Thong assembly\nmodule thong() {\n    color([0.3, 0.15, 0.05]) {\n        union() {\n            // First segment\n            translate([0,0,-2])\n                thong_segment(20, 4, 3, 1.2);\n            \n            // Second segment\n            translate([0,0,-22])\n                thong_segment(15, 3, 2, 0.8);\n            \n            // Third segment\n            translate([0,0,-37])\n                thong_segment(12, 2, 1.5, 0.5);\n            \n            // Fourth segment\n            translate([0,0,-49])\n                thong_segment(10, 1.5, 1, 0.4);\n            \n            // Cracker\n            translate([0,0,-59])\n                cracker();\n        }\n    }\n}\n\n// Main assembly\nhandle();\ntranslate([0,0,0])\n    rotate([180,0,0])\n        thong();",
    "renders": true
  },
  {
    "tool": "flail",
    "openscad_code": "// Realistic Flail Tool - OpenSCAD\n// Medium complexity with 3D-printable features\n\n// Color constants\nWOOD = [139/255, 90/255, 43/255];\nMETAL = [180/255, 180/255, 180/255];\nDARK_METAL = [100/255, 100/255, 100/255];\n\n// Main parameters\nflail_length = 80;\nhandle_diameter = 8;\nchain_link_diameter = 3;\nchain_link_length = 6;\nspike_ball_radius = 10;\n\nmodule handle() {\n    color(WOOD)\n    union() {\n        // Main handle\n        cylinder(h = flail_length * 0.7, d = handle_diameter, $fn = 16);\n        \n        // Handle grip rings\n        for(i = [1:4]) {\n            translate([0, 0, i * 12])\n            cylinder(h = 2, d = handle_diameter + 2, $fn = 16);\n        }\n        \n        // Handle end cap\n        translate([0, 0, -1])\n        cylinder(h = 3, d = handle_diameter + 2, $fn = 16);\n    }\n}\n\nmodule chain_link() {\n    color(METAL)\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = chain_link_length, d = chain_link_diameter * 2, $fn = 16);\n        translate([0, 0, -1])\n        cylinder(h = chain_link_length + 2, d = chain_link_diameter * 1.2, $fn = 16);\n    }\n}\n\nmodule chain() {\n    links = 4;\n    for(i = [0:links-1]) {\n        translate([0, 0, -i * chain_link_length])\n        chain_link();\n    }\n}\n\nmodule spiked_ball() {\n    color(DARK_METAL)\n    union() {\n        // Main ball\n        sphere(r = spike_ball_radius, $fn = 32);\n        \n        // Spikes\n        for(i = [0:15]) {\n            rotate([i * 45, 0, 0])\n            translate([spike_ball_radius, 0, 0])\n            rotate([0, 0, 90])\n            cylinder(h = 8, d1 = 3, d2 = 1, $fn = 8);\n        }\n        \n        // Connection ring\n        translate([0, 0, spike_ball_radius])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 4, d = 6, $fn = 16);\n            translate([0, 0, -1])\n            cylinder(h = 6, d = 3, $fn = 16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    handle();\n    \n    // Chain connection point\n    translate([0, 0, flail_length * 0.7])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h = 12, d = 6, $fn = 16);\n        translate([0, 0, -1])\n        cylinder(h = 14, d = 3, $fn = 16);\n    }\n    \n    // Chain\n    translate([0, 6, flail_length * 0.7])\n    chain();\n    \n    // Spiked ball\n    translate([0, 6, flail_length * 0.7 - (4 * chain_link_length) - spike_ball_radius])\n    spiked_ball();\n}",
    "renders": true
  },
  {
    "tool": "thrasher",
    "openscad_code": "// Thresher Tool - Realistic Style, Medium Complexity\n// OpenSCAD 3D Printable Model\n\n// Overall dimensions (mm)\ntotal_length = 90;\nhandle_length = 45;\nhead_width = 35;\nhead_height = 25;\n\n// Colors\nwood_color = [0.72, 0.53, 0.38];\nmetal_color = [0.5, 0.5, 0.55];\nleather_color = [0.4, 0.25, 0.15];\n\n// Main handle\nmodule handle() {\n    color(wood_color) {\n        // Main handle shaft\n        translate([0, 0, handle_length/2])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, d=8, $fn=20);\n        \n        // Leather grip wraps\n        for(i = [0:6]) {\n            color(leather_color) {\n                translate([0, 0, i*5 + 5])\n                    rotate([0, 90, 0])\n                        cylinder(h=4, d=10, $fn=20);\n            }\n        }\n    }\n}\n\n// Thresher head with flailing mechanism\nmodule thresher_head() {\n    color(metal_color) {\n        // Main head block\n        translate([0, 0, head_height/2])\n            cube([head_width, 12, head_height], center=true);\n        \n        // Mounting bracket\n        translate([0, 0, head_height + 3])\n            difference() {\n                cube([head_width/2, 8, 6], center=true);\n                translate([0, 0, -1])\n                    cube([head_width/2 - 2, 4, 8], center=true);\n            }\n        \n        // Swinging flail bars\n        for(j = [0:2]) {\n            rotate([0, 0, j*120]) {\n                translate([head_width/2 - 3, 0, head_height/2])\n                    rotate([90, 0, 0])\n                        cylinder(h=15, d=2, $fn=8);\n                \n                // Flail weights\n                translate([head_width/2 - 3, 0, head_height/2 - 10])\n                    sphere(d=4, $fn=12);\n            }\n        }\n        \n        // Reinforcement plates\n        for(side = [-1, 1]) {\n            translate([side * (head_width/2 - 2), 0, head_height/2])\n                cube([4, 14, head_height - 4], center=true);\n        }\n    }\n}\n\n// Handle connector\nmodule connector() {\n    color(metal_color) {\n        // Main connector sleeve\n        translate([0, 0, handle_length + 8])\n            difference() {\n                cylinder(h=16, d=12, $fn=20);\n                translate([0, 0, -1])\n                    cylinder(h=18, d=8, $fn=20);\n            }\n        \n        // Locking pin\n        translate([6, 0, handle_length + 12])\n            rotate([90, 0, 0])\n                cylinder(h=12, d=2, $fn=8);\n    }\n}\n\n// Assembly\nhandle();\nthresher_head();\nconnector();\n\n// Position head relative to handle\ntranslate([0, 0, handle_length + 16])\n    thresher_head();",
    "renders": true
  },
  {
    "tool": "beater",
    "openscad_code": "// Realistic Beater Tool (Kitchen Whisk Beater)\n// Medium complexity with functional features\n\n$fn = 32;\n\n// Colors\ncolor_handle = [0.2, 0.1, 0.05];\ncolor_metal = [0.7, 0.7, 0.75];\ncolor_grip = [0.1, 0.1, 0.1];\n\n// Main handle\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle body\n        cylinder(h = 80, d = 22, center = false);\n        \n        // Comfortable grip rings\n        for(i = [5:10:75]) {\n            translate([0, 0, i])\n                cylinder(h = 3, d1 = 24, d2 = 22);\n        }\n        \n        // Top cap with hanging hole\n        translate([0, 0, 80])\n        union() {\n            cylinder(h = 8, d = 26);\n            translate([0, 0, 4])\n                rotate([90, 0, 0])\n                    cylinder(h = 30, d = 6);\n        }\n    }\n}\n\n// Metal connector piece\nmodule connector() {\n    color(color_metal)\n    union() {\n        // Tapered neck\n        translate([0, 0, -15])\n            cylinder(h = 15, d1 = 22, d2 = 12);\n            \n        // Connection head\n        cylinder(h = 8, d = 12);\n    }\n}\n\n// Whisk wires\nmodule whisk_wires() {\n    color(color_metal)\n    difference() {\n        union() {\n            // Main whisk loops\n            for(i = [0:45:315]) {\n                rotate([0, 0, i])\n                    whisk_loop();\n            }\n            \n            // Bottom reinforcement ring\n            translate([0, 0, -25])\n                cylinder(h = 2, d = 35);\n                \n            // Top connection bridge\n            translate([0, 0, -8])\n                cylinder(h = 8, d = 10);\n        }\n        \n        // Remove bottom for better print\n        translate([0, 0, -30])\n            cube([50, 50, 10], center = true);\n    }\n}\n\n// Single whisk loop\nmodule whisk_loop() {\n    // Create elliptical whisk wire\n    translate([0, 0, -12])\n    rotate_extrude(angle = 360, $fn = 16)\n        translate([15, 0, 0])\n            circle(r = 1.5);\n}\n\n// Rubber grip texture\nmodule grip_texture() {\n    color(color_grip)\n    for(i = [10:15:70]) {\n        for(j = [0:30:330]) {\n            rotate([0, 0, j])\n                translate([9, 0, i])\n                    sphere(r = 1.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    translate([0, 0, 80]) grip_texture();\n    translate([0, 0, -15]) connector();\n    translate([0, 0, -23]) whisk_wires();\n}\n\n// Print orientation helper\n%translate([0, 50, 0])\n    cube([1, 1, 1]);",
    "renders": true
  },
  {
    "tool": "mace",
    "openscad_code": "// Realistic 3D-printable medieval mace, medium complexity\n// ~85 mm total length, printable without supports\n\n$fn = 36;               // smooth curves\nwall = 2;               // 3D-print wall thickness\ngrip_d = 12;            // handle diameter\ngrip_l = 55;            // handle length\nhead_d = 32;            // mace head diameter\nflange_h = 18;          // flanges height\nflange_t = 5;           // flanges thickness\ncollar_h = 6;           // collar height\n\n// Wood-grain handle\nmodule handle() {\n    color(\"saddlebrown\")\n    difference() {\n        cylinder(d = grip_d, h = grip_l, center = false);\n        // shallow grooves for grip\n        for (i = [0:6]) {\n            rotate([0, 0, i * 60])\n            translate([grip_d/2 - wall/2 - 0.5, -0.8, 0])\n            cube([wall + 1, 1.6, grip_l]);\n        }\n    }\n}\n\n// Metal collar between handle and head\nmodule collar() {\n    color(\"silver\")\n    union() {\n        cylinder(d = grip_d + 2*wall, h = collar_h, center = false);\n        // decorative ring\n        translate([0, 0, collar_h/2])\n        cylinder(d1 = grip_d + 2*wall + 2, d2 = grip_d + 2*wall, h = collar_h/2, center = true);\n    }\n}\n\n// Single steel flange\nmodule flange() {\n    color(\"silver\")\n    difference() {\n        union() {\n            // main blade\n            translate([0, 0, -flange_h/2])\n            cube([flange_t, head_d/2 + flange_h/2, flange_h], center = true);\n            // reinforcing ridge\n            translate([0, 0, -flange_h/2])\n            cube([flange_t*2, 4, flange_h], center = true);\n        }\n        // chamfer edges\n        for (z = [-1, 1]) {\n            translate([0, 0, z * (flange_h/2 - 1)])\n            rotate([0, 0, 45])\n            cube([flange_t*2, 3, 3], center = true);\n        }\n    }\n}\n\n// Mace head with 8 flanges\nmodule mace_head() {\n    color(\"silver\")\n    union() {\n        // central sphere\n        sphere(d = head_d);\n        // 8 flanges around sphere\n        for (i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([0, head_d/2 - flange_h/4, 0])\n            rotate([90, 0, 0])\n            flange();\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\nhandle();\n\ntranslate([0, 0, grip_l])\ncollar();\n\ntranslate([0, 0, grip_l + collar_h])\nmace_head();",
    "renders": true
  },
  {
    "tool": "club",
    "openscad_code": "// Realistic 3D Printable Club Tool â€“ Medium Complexity OpenSCAD\n// Overall length ~90 mm, all walls â‰¥1.2 mm, no steep overhangs\n\n// Color definitions\ncolor_wood   = \"BurlyWood\";\ncolor_leather= \"SaddleBrown\";\ncolor_steel  = \"Silver\";\n\n// Main module\nmodule club() {\n    // Handle assembly\n    union() {\n        color(color_wood) handle();\n        color(color_leather) grip_bands();\n    }\n    \n    // Head assembly\n    translate([0,0,70]) color(color_steel) head();\n}\n\n// Handle (straight cylindrical shaft)\nmodule handle() {\n    // Wood shaft\n    cylinder(h=70, d=12, $fn=32);\n    \n    // Tapered end for ergonomics\n    translate([0,0,-1])\n        cylinder(h=5, d1=12, d2=10, $fn=32);\n}\n\n// Leather grip rings\nmodule grip_bands() {\n    // Two leather bands with shallow grooves\n    for(z=[20, 45]) {\n        translate([0,0,z])\n            difference() {\n                cylinder(h=8, d=14, $fn=64);\n                // Grooves\n                for(i=[-2, 2]) {\n                    translate([0,0,4+i])\n                        cylinder(h=1, d=13, $fn=64);\n                }\n            }\n    }\n}\n\n// Club head\nmodule head() {\n    difference() {\n        union() {\n            // Main striking mass (rounded cuboid)\n            rounded_box([30, 22, 40], 5);\n            \n            // Reinforcement ridge on top\n            translate([0,0,38])\n                rounded_box([26, 18, 4], 3);\n            \n            // Socket for handle\n            translate([0,0,-5])\n                cylinder(h=15, d=13, $fn=32);\n        }\n        \n        // Bore hole for handle insertion\n        translate([0,0,-7])\n            cylinder(h=20, d=10.2, $fn=32);\n    }\n    \n    // Studded texture on striking face\n    studs();\n}\n\n// Helper: rounded box for head\nmodule rounded_box(size, r) {\n    x=size.x-2*r; y=size.y-2*r; z=size.z-2*r;\n    hull() {\n        for(dx=[-1,1], dy=[-1,1], dz=[-1,1])\n            translate([dx*r, dy*r, dz*r])\n                sphere(r=r, $fn=16);\n    }\n}\n\n// Small raised studs for grip\nmodule studs() {\n    rows=3; cols=4;\n    spacing_x=6; spacing_y=5;\n    offset_x=(cols-1)*spacing_x/2;\n    offset_y=(rows-1)*spacing_y/2;\n    \n    for(i=[0:cols-1], j=[0:rows-1]) {\n        translate([i*spacing_x-offset_x, j*spacing_y-offset_y, 20.5])\n            cylinder(h=1.5, d=3, $fn=16);\n    }\n}\n\n// Render the club\nclub();",
    "renders": true
  },
  {
    "tool": "bat",
    "openscad_code": "// Realistic Baseball Bat - Medium Complexity\n// Overall length ~90mm, 3D printable with no overhangs\n\n$fn = 32;\n\n// Main bat color - natural wood\ncolor([0.82, 0.64, 0.42]) {\n    // Handle section\n    module handle() {\n        // Main handle cylinder\n        cylinder(h = 30, d1 = 15, d2 = 18, center = false);\n        \n        // Grip rings\n        for(i = [1:5]) {\n            translate([0, 0, i * 5.5 - 1]) {\n                difference() {\n                    cylinder(h = 2, d = 18, center = false);\n                    cylinder(h = 2.5, d = 16, center = false);\n                }\n            }\n        }\n        \n        // Knob at bottom\n        translate([0, 0, 28]) {\n            difference() {\n                cylinder(h = 6, d = 22, center = false);\n                cylinder(h = 7, d = 15, center = false);\n            }\n        }\n    }\n    \n    // Tapered barrel section\n    module barrel() {\n        // Main barrel\n        translate([0, 0, 30]) {\n            cylinder(h = 55, d1 = 18, d2 = 45, center = false);\n        }\n        \n        // Barrel end dome\n        translate([0, 0, 85]) {\n            sphere(d = 45);\n            \n            // Flatten the very end slightly\n            translate([0, 0, -2]) {\n                cube([45, 45, 10], center = true);\n            }\n        }\n    }\n    \n    // Wood grain texture rings\n    module wood_grain() {\n        color([0.75, 0.58, 0.38]) {\n            // Fine rings along the barrel\n            for(i = [1:15]) {\n                translate([0, 0, 30 + i * 3.5]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 0.3, d = 18 + (i * 1.8), center = true);\n                    }\n                }\n            }\n            \n            // Rings on handle\n            for(i = [1:8]) {\n                translate([0, 0, i * 3.5]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 0.2, d = 15 + (i * 0.4), center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Assembly\n    union() {\n        handle();\n        barrel();\n        wood_grain();\n    }\n}\n\n// Brand/logo area on barrel\ncolor([0.9, 0.9, 0.9]) {\n    translate([0, 22.5, 50]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 0.5, d = 12, center = true);\n        }\n    }\n}\n\n// Brand text (simplified as raised rectangle)\ncolor([0.1, 0.1, 0.1]) {\n    translate([0, 22.5, 50.5]) {\n        cube([8, 0.3, 3], center = true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "stave",
    "openscad_code": "// Stave Tool - Realistic Medium Complexity\n// 80mm length, 3D printable with no overhangs\n\n// Parameters\nstave_length = 80;\nstave_diameter = 6;\nhandle_length = 25;\nhandle_diameter = 8;\nferrule_height = 4;\nferrule_diameter = 9;\ngrip_rings = 5;\ngrip_ring_depth = 0.5;\ntip_length = 8;\ntip_diameter = 2.5;\n\n// Main stave body\nmodule stave_body() {\n    color(\"burlywood\") {\n        // Main shaft\n        cylinder(h = stave_length - handle_length - tip_length, \n                 r = stave_diameter/2, $fn = 32);\n        \n        // Tapered tip\n        translate([0, 0, stave_length - handle_length - tip_length]) {\n            cylinder(h = tip_length, \n                     r1 = stave_diameter/2, \n                     r2 = tip_diameter/2, $fn = 32);\n        }\n    }\n}\n\n// Handle with grip rings\nmodule handle() {\n    color(\"darkgreen\") {\n        // Main handle\n        cylinder(h = handle_length, r = handle_diameter/2, $fn = 32);\n        \n        // Grip rings\n        for(i = [0:grip_rings-1]) {\n            translate([0, 0, i * (handle_length/grip_rings)]) {\n                difference() {\n                    cylinder(h = 2, r = handle_diameter/2, $fn = 32);\n                    cylinder(h = 2.2, r = handle_diameter/2 - grip_ring_depth, $fn = 32);\n                }\n            }\n        }\n    }\n}\n\n// Metal ferrule\nmodule ferrule() {\n    color(\"silver\") {\n        translate([0, 0, handle_length]) {\n            cylinder(h = ferrule_height, r = ferrule_diameter/2, $fn = 32);\n            \n            // Decorative band\n            translate([0, 0, ferrule_height/2]) {\n                cylinder(h = 1, r = ferrule_diameter/2 - 0.5, $fn = 32);\n            }\n        }\n    }\n}\n\n// Tool tip detail\nmodule tip_detail() {\n    color(\"silver\") {\n        translate([0, 0, stave_length - handle_length - tip_length]) {\n            // Reinforcement ring\n            cylinder(h = 2, r = stave_diameter/2 + 0.5, $fn = 32);\n            \n            // Tip protector\n            translate([0, 0, tip_length]) {\n                sphere(d = tip_diameter, $fn = 16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Position stave vertically centered\n    translate([0, 0, -stave_length/2]) {\n        stave_body();\n        \n        // Handle at bottom\n        translate([0, 0, 0]) {\n            handle();\n        }\n        \n        // Ferrule between handle and stave\n        ferrule();\n        \n        // Tip details\n        tip_detail();\n    }\n}\n\n// Alignment mark\ncolor(\"black\") {\n    translate([0, handle_diameter/2 + 0.1, handle_length/2]) {\n        cube([0.5, 0.1, handle_length/3]);\n    }\n}",
    "renders": true
  },
  {
    "tool": "haft",
    "openscad_code": "// Realistic Haft Tool - Medium Complexity\n// A sturdy haft for attaching an axe or hammer head\n\n// Color definitions\nhandle_color = \"#8B4513\";  // Brown wood\nmetal_color = \"#C0C0C0\";   // Silver metal\naccent_color = \"#654321\";  // Darker wood accent\n\n// Main parameters\ntotal_length = 85;\nhandle_diameter = 22;\nmetal_sleeve_length = 20;\ngrip_length = 45;\ntaper_start = 35;\n\n// Wood grain texture module\nmodule wood_ring(height, radius, segments=16) {\n    for(i=[0:segments-1]) {\n        rotate([0, 0, i*360/segments]) \n            translate([0, 0, 0])\n            cylinder(h=height, r1=radius, r2=radius*1.01, $fn=20);\n    }\n}\n\n// Handle grip texture\nmodule grip_texture() {\n    color(handle_color) {\n        // Main grip with carved rings\n        for(i=[0:4]) {\n            translate([0, 0, 15 + i*8]) \n                difference() {\n                    cylinder(h=4, r=handle_diameter/2, $fn=32);\n                    translate([0, 0, -1])\n                        cylinder(h=6, r=handle_diameter/2 - 2, $fn=32);\n                }\n        }\n    }\n}\n\n// Main handle\nmodule handle() {\n    color(handle_color) {\n        // Tapered main body\n        difference() {\n            cylinder(h=total_length - metal_sleeve_length, \n                     r1=handle_diameter/2, \n                     r2=handle_diameter/2 - 3, \n                     $fn=32);\n            \n            // Hollow core for weight reduction\n            translate([0, 0, 10])\n                cylinder(h=total_length - metal_sleeve_length - 20, \n                         r=handle_diameter/4, $fn=16);\n        }\n        \n        // Wood grain rings\n        for(z=[10:5:total_length - metal_sleeve_length - 10]) {\n            wood_ring(0.5, handle_diameter/2 - 1 - (z/50), 8);\n        }\n    }\n}\n\n// Metal sleeve/ferrule\nmodule metal_sleeve() {\n    color(metal_color) {\n        translate([0, 0, total_length - metal_sleeve_length]) {\n            difference() {\n                cylinder(h=metal_sleeve_length, \n                         r=handle_diameter/2 + 2, \n                         $fn=32);\n                \n                // Inner taper for tool head insertion\n                translate([0, 0, -1])\n                    cylinder(h=metal_sleeve_length + 2, \n                             r1=handle_diameter/2, \n                             r2=handle_diameter/2 - 1, \n                             $fn=32);\n                \n                // Keyway slot\n                translate([handle_diameter/3, 0, metal_sleeve_length/2])\n                    cube([2, handle_diameter/3, metal_sleeve_length], center=true);\n            }\n            \n            // Decorative rings\n            for(i=[1:2]) {\n                translate([0, 0, i*6])\n                    cylinder(h=1, r=handle_diameter/2 + 2.5, $fn=32);\n            }\n        }\n    }\n}\n\n// End cap/butt\nmodule end_cap() {\n    color(metal_color) {\n        translate([0, 0, 0]) {\n            difference() {\n                cylinder(h=8, r=handle_diameter/2 + 1, $fn=32);\n                translate([0, 0, -1])\n                    cylinder(h=10, r=handle_diameter/2 - 1, $fn=32);\n            }\n            \n            // Hanging hole\n            rotate([90, 0, 0])\n                translate([0, 0, 4])\n                    cylinder(h=handle_diameter/2 + 2, r=2.5, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    metal_sleeve();\n    end_cap();\n    grip_texture();\n}",
    "renders": true
  },
  {
    "tool": "helve",
    "openscad_code": "// Helve Tool (Hammer) - Realistic Style, Medium Complexity\n// A 3D printable carpenter's hammer with realistic proportions and features\n\n// Global parameters\nhandle_length = 85;\nhandle_diameter = 12;\nhead_length = 55;\nhead_height = 25;\nhead_width = 20;\nclaw_length = 40;\nclaw_width = 8;\ngrip_length = 60;\n\n// Handle with grip texture\nmodule handle() {\n    color(\"saddlebrown\") {\n        // Main handle shaft\n        cylinder(h=handle_length, d=handle_diameter, $fn=20);\n        \n        // Grip rings\n        for(i = [5:5:grip_length-5]) {\n            translate([0, 0, i]) {\n                difference() {\n                    cylinder(h=3, d=handle_diameter+2, $fn=20);\n                    cylinder(h=3, d=handle_diameter, $fn=20);\n                }\n            }\n        }\n        \n        // End cap\n        translate([0, 0, handle_length-5]) {\n            sphere(d=handle_diameter+4, $fn=20);\n        }\n    }\n}\n\n// Hammer head with striking face and claw\nmodule hammer_head() {\n    color(\"silver\") {\n        // Main head body\n        translate([0, 0, head_height/2]) {\n            cube([head_length, head_width, head_height], center=true);\n        }\n        \n        // Rounded striking face\n        translate([head_length/2, 0, head_height/2]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=head_width, d=head_height, $fn=30);\n            }\n        }\n        \n        // Claw curve\n        translate([-head_length/2, 0, head_height/2]) {\n            rotate([0, 0, -15]) {\n                // Claw base\n                cube([claw_length/2, claw_width, head_height*0.8], center=true);\n                \n                // Curved claw tips\n                for(side = [-1, 1]) {\n                    translate([side*claw_width/2, claw_length*0.7, 0]) {\n                        rotate([0, 90*side, 0]) {\n                            cylinder(h=claw_width/2, d=head_height*0.7, $fn=20);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Center wedge slot\n        translate([0, 0, head_height+5]) {\n            cube([handle_diameter+2, head_width*0.6, 10], center=true);\n        }\n    }\n}\n\n// Handle insertion wedge\nmodule wedge() {\n    color(\"burlywood\") {\n        translate([0, 0, head_height+5]) {\n            rotate([90, 0, 0]) {\n                cube([handle_diameter+1, 8, 3], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, handle_length/2]) {\n    rotate([90, 0, 0]) {\n        handle();\n    }\n}\n\ntranslate([0, 0, handle_length+head_height/2]) {\n    hammer_head();\n}\n\ntranslate([0, 0, handle_length+head_height+5]) {\n    wedge();\n}",
    "renders": true
  },
  {
    "tool": "button",
    "openscad_code": "// Button Tool - Realistic Style, Medium Complexity\n// A professional button press tool for garment work\n// Size: 80mm x 45mm x 25mm\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 45;\nbase_height = 8;\nhandle_length = 70;\nhandle_diameter = 12;\npress_head_radius = 18;\npress_head_height = 15;\ngrip_ridges = 8;\n\n// Colors\ncolor_base = [0.2, 0.2, 0.2];\ncolor_handle = [0.3, 0.3, 0.3];\ncolor_head = [0.8, 0.8, 0.8];\ncolor_grip = [0.1, 0.1, 0.1];\n\nmodule base_platform() {\n    color(color_base)\n    difference() {\n        // Main base\n        translate([0, 0, base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded edges for comfort\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x*(base_width/2-3), y*(base_depth/2-3), base_height/2])\n                cylinder(h=base_height+1, r=2.5, center=true);\n        \n        // Mounting holes\n        for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x*25, y*15, 0])\n                cylinder(h=base_height+2, r=2, center=false);\n    }\n}\n\nmodule handle_assembly() {\n    color(color_handle)\n    translate([-handle_length/2+base_width/2-5, 0, base_height+handle_diameter/2])\n    rotate([0, 90, 0])\n    union() {\n        // Main handle shaft\n        cylinder(h=handle_length, r=handle_diameter/2, center=true, $fn=32);\n        \n        // Grip ridges\n        color(color_grip)\n        for(i = [1:grip_ridges]) {\n            translate([0, 0, -handle_length/2 + i*(handle_length/(grip_ridges+1))])\n                cylinder(h=2, r=handle_diameter/2+0.5, center=true, $fn=32);\n        }\n        \n        // End cap\n        translate([0, 0, handle_length/2])\n            sphere(r=handle_diameter/2, $fn=32);\n    }\n}\n\nmodule press_mechanism() {\n    color(color_head)\n    translate([base_width/2-5, 0, base_height+handle_diameter/2])\n    union() {\n        // Press head\n        cylinder(h=press_head_height, r=press_head_radius, center=true, $fn=64);\n        \n        // Button press surface\n        translate([0, 0, press_head_height/2])\n        difference() {\n            cylinder(h=3, r=press_head_radius-3, center=false, $fn=64);\n            // Alignment guide\n            translate([0, 0, -1])\n                cylinder(h=5, r=press_head_radius-10, center=false, $fn=32);\n        }\n        \n        // Reinforcement ribs\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n            translate([0, press_head_radius-5, 0])\n                cube([2, 8, press_head_height], center=true);\n        }\n    }\n}\n\nmodule support_bracket() {\n    color(color_base)\n    difference() {\n        // Main bracket\n        translate([base_width/2-15, 0, base_height+handle_diameter/2])\n            cube([30, 20, 25], center=true);\n        \n        // Handle clearance\n        rotate([0, 90, 0])\n            translate([0, 0, base_height+handle_diameter/2-base_width/2+15])\n                cylinder(h=25, r=handle_diameter/2+3, center=true, $fn=32);\n        \n        // Mounting slot\n        translate([base_width/2-15, 0, base_height+12])\n            cube([25, 4, 8], center=true);\n    }\n}\n\n// Assembly\nbase_platform();\nhandle_assembly();\npress_mechanism();\nsupport_bracket();\n\n// Alignment marks\ncolor([1, 1, 0])\nfor(i = [-1, 1])\n    translate([base_width/2-5 + i*2, 0, base_height+handle_diameter/2+press_head_height/2+1])\n        cube([0.5, 0.5, 0.5], center=true);",
    "renders": true
  },
  {
    "tool": "treadle",
    "openscad_code": "// Treadle tool - OpenSCAD code\n// Medium complexity realistic style\n\n// Base dimensions\nbase_w = 40;\nbase_l = 80;\nbase_h = 8;\nhandle_d = 12;\nhandle_l = 50;\npedal_w = 30;\npedal_l = 60;\npedal_h = 5;\n\n// Main body\nmodule treadle_base() {\n    color(\"dimgray\")\n    difference() {\n        // Main base block\n        translate([0, 0, base_h/2])\n            cube([base_w, base_l, base_h], center=true);\n        \n        // Grip grooves on top\n        for(i = [-35:10:35]) {\n            translate([i, 0, base_h-1])\n                cube([2, base_l-10, 2], center=true);\n        }\n        \n        // Mounting holes\n        for(pos = [[-15, 30], [15, 30], [-15, -30], [15, -30]]) {\n            translate([pos[0], pos[1], base_h/2])\n                cylinder(h=base_h+1, d=3, center=true);\n        }\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    color(\"darkslategray\")\n    union() {\n        // Main handle tube\n        translate([0, 0, base_h + handle_l/2])\n            cylinder(h=handle_l, d=handle_d, center=true);\n        \n        // Handle grip\n        translate([0, 0, base_h + handle_l - 10])\n            color(\"black\")\n            difference() {\n                cylinder(h=20, d=handle_d+2, center=true);\n                for(i = [0:30:330]) {\n                    rotate([0, 0, i])\n                        translate([handle_d/2+1, 0, 0])\n                            cube([2, 1, 22], center=true);\n                }\n            }\n        \n        // Reinforcement ring\n        translate([0, 0, base_h + 5])\n            cylinder(h=3, d=handle_d+6, center=true);\n    }\n}\n\n// Pedal mechanism\nmodule pedal() {\n    color(\"silver\")\n    union() {\n        // Main pedal plate\n        translate([0, 0, base_h + pedal_h/2])\n            cube([pedal_w, pedal_l, pedal_h], center=true);\n        \n        // Tread surface texture\n        for(i = [-20:5:20]) {\n            translate([0, i, base_h + pedal_h])\n                color(\"gray\")\n                cube([pedal_w-4, 3, 1], center=true);\n        }\n        \n        // Pivot brackets\n        for(side = [-1, 1]) {\n            translate([side * pedal_w/2 - side * 5, pedal_l/2 - 10, base_h + pedal_h/2])\n                rotate([0, 90, 0])\n                    cylinder(h=10, d=6, center=true);\n        }\n    }\n}\n\n// Support arms\nmodule support_arms() {\n    color(\"darkgray\")\n    for(side = [-1, 1]) {\n        translate([side * base_w/2 + side * 5, 0, base_h/2 + handle_l/2])\n            rotate([90, 0, 0])\n                cylinder(h=handle_l, d=5, center=true);\n    }\n}\n\n// Spring mechanism\nmodule spring() {\n    color(\"gold\")\n    translate([0, -20, base_h + pedal_h + 5])\n        for(i = [0:2:20]) {\n            rotate([0, 0, i * 30])\n                translate([sin(i) * 3, 0, i])\n                    cylinder(h=2, d=2, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    treadle_base();\n    handle();\n    pedal();\n    support_arms();\n    spring();\n}",
    "renders": true
  },
  {
    "tool": "windlass",
    "openscad_code": "// Windlass Tool - Realistic Style, Medium Complexity\n// Size: ~80mm length for 3D printing\n\n$fn = 50;  // Smooth curves\n\n// Main dimensions\nwheel_d = 60;\nwheel_thick = 8;\nhandle_d = 12;\nhandle_l = 40;\nshaft_d = 8;\nshaft_l = 80;\nratchet_teeth = 12;\npawl_len = 15;\nbase_w = 25;\nbase_h = 15;\n\n// Colors\ncolor_wheel = [0.2, 0.2, 0.2];      // Dark gray metal\ncolor_handle = [0.4, 0.2, 0.1];   // Brown wood\ncolor_base = [0.3, 0.3, 0.3];     // Medium gray\n\n// Main assembly\nmodule windlass_assembly() {\n    union() {\n        // Wheel with ratchet teeth\n        translate([0, 0, shaft_l/2]) rotate([90, 0, 0])\n            wheel();\n            \n        // Handle on wheel\n        translate([wheel_d/2 + handle_l/2, 0, shaft_l/2]) \n            rotate([90, 0, 0]) \n                handle();\n                \n        // Central shaft\n        translate([0, 0, shaft_l/2]) \n            rotate([90, 0, 0]) \n                shaft();\n                \n        // Mounting base\n        translate([0, 0, 0]) \n            base();\n            \n        // Ratchet pawl mechanism\n        translate([wheel_d/2 - 5, 0, shaft_l/2 + wheel_thick/2 + 2]) \n            pawl();\n    }\n}\n\n// Wheel with ratchet teeth\nmodule wheel() {\n    color(color_wheel) {\n        difference() {\n            // Main wheel disc\n            cylinder(d=wheel_d, h=wheel_thick);\n            \n            // Center hole\n            cylinder(d=shaft_d + 2, h=wheel_thick + 0.1);\n            \n            // Spoke holes for weight reduction\n            for(i = [0:3:359]) {\n                rotate([0, 0, i]) \n                    translate([wheel_d/3, 0, -0.1]) \n                        cylinder(d=6, h=wheel_thick + 0.2);\n            }\n        }\n        \n        // Ratchet teeth around edge\n        for(i = [0:360/ratchet_teeth:359]) {\n            rotate([0, 0, i]) \n                translate([wheel_d/2 - 1, 0, 0]) \n                    cube([2, 1, wheel_thick], center=true);\n        }\n    }\n}\n\n// Wooden crank handle\nmodule handle() {\n    color(color_handle) {\n        difference() {\n            // Main handle\n            cylinder(d=handle_d, h=handle_l);\n            \n            // Grip grooves\n            for(i = [5:5:handle_l-5]) {\n                translate([0, 0, i]) \n                    cylinder(d=handle_d - 1, h=0.5);\n            }\n        }\n        \n        // Handle knob\n        translate([0, 0, handle_l]) \n            sphere(d=handle_d + 2);\n    }\n}\n\n// Central shaft\nmodule shaft() {\n    color(color_wheel) {\n        cylinder(d=shaft_d, h=shaft_l);\n        \n        // Keyway slot\n        translate([shaft_d/2 - 1, 0, 0]) \n            cube([2, shaft_d, shaft_l]);\n    }\n}\n\n// Mounting base\nmodule base() {\n    color(color_base) {\n        // Main base\n        cube([base_w, base_w, base_h], center=true);\n        \n        // Mounting holes\n        for(x = [-base_w/3, base_w/3]) {\n            for(y = [-base_w/3, base_w/3]) {\n                translate([x, y, -0.1]) \n                    cylinder(d=4, h=base_h + 0.2);\n            }\n        }\n        \n        // Shaft support\n        translate([0, 0, base_h/2]) \n            cylinder(d=shaft_d + 8, h=base_h/2);\n    }\n}\n\n// Ratchet pawl\nmodule pawl() {\n    color(color_wheel) {\n        union() {\n            // Pawl body\n            cube([3, pawl_len, 4], center=true);\n            \n            // Pawl tip\n            translate([0, pawl_len/2, 0]) \n                cube([1, 2, 4], center=true);\n                \n            // Spring attachment point\n            translate([0, -pawl_len/2, 0]) \n                cylinder(d=2, h=5);\n        }\n    }\n}\n\n// Render the complete windlass\nwindlass_assembly();",
    "renders": true
  },
  {
    "tool": "capstan",
    "openscad_code": "// Capstan Tool - Realistic Style, Medium Complexity\n// Features: Main drum, crank handle, ratchet mechanism, mounting base\n\n// Overall dimensions (mm)\nbase_diameter = 80;\nbase_height = 10;\ndrum_diameter = 60;\ndrum_height = 50;\nhandle_length = 70;\nhandle_diameter = 12;\n\n// Colors\ncolor_base = \"dimgray\";\ncolor_drum = \"silver\";\ncolor_handle = \"black\";\ncolor_ratchet = \"gold\";\n\n// Base module\nmodule base() {\n    color(color_base) {\n        // Main base cylinder\n        cylinder(h=base_height, d=base_diameter, $fn=64);\n        \n        // Mounting holes (4 holes for bolts)\n        difference() {\n            cylinder(h=base_height, d=base_diameter, $fn=64);\n            for(i=[0:90:360-90]) {\n                rotate([0, 0, i])\n                    translate([base_diameter/2 - 10, 0, -1])\n                        cylinder(h=base_height+2, d=6, $fn=16);\n            }\n        }\n        \n        // Base rim detail\n        translate([0, 0, base_height])\n            cylinder(h=3, d=base_diameter+2, $fn=64);\n    }\n}\n\n// Drum module with grooves for rope\nmodule drum() {\n    color(color_drum) {\n        // Main drum\n        cylinder(h=drum_height, d=drum_diameter, $fn=64);\n        \n        // Rope grooves (8 grooves)\n        for(i=[0:drum_height/8:drum_height]) {\n            translate([0, 0, i])\n                difference() {\n                    cylinder(h=2, d=drum_diameter, $fn=64);\n                    cylinder(h=2.2, d=drum_diameter - 6, $fn=64);\n                }\n        }\n        \n        // Top cap\n        translate([0, 0, drum_height])\n            cylinder(h=5, d=drum_diameter + 4, $fn=64);\n    }\n}\n\n// Crank handle module\nmodule crank_handle() {\n    color(color_handle) {\n        // Main handle shaft\n        rotate([90, 0, 0])\n            translate([0, 0, -handle_length/2])\n                cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Handle grip\n        rotate([90, 0, 0])\n            translate([0, 0, handle_length/2 - 10])\n                cylinder(h=20, d=18, $fn=32);\n        \n        // Connection arm to drum\n        rotate([90, 0, 0])\n            translate([0, drum_diameter/2 + handle_length/2, 0])\n                cube([handle_diameter, drum_diameter/2 + handle_length, handle_diameter], center=true);\n    }\n}\n\n// Ratchet mechanism\nmodule ratchet() {\n    color(color_ratchet) {\n        // Ratchet wheel\n        rotate([0, 0, 0])\n            cylinder(h=8, d=30, $fn=24);\n        \n        // Ratchet teeth (12 teeth)\n        for(i=[0:30:360-30]) {\n            rotate([0, 0, i])\n                translate([15, 0, 0])\n                    cube([8, 4, 8], center=true);\n        }\n        \n        // Pawl mechanism\n        translate([20, 0, 4])\n            rotate([0, 0, 30])\n                cube([15, 3, 6], center=false);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    base();\n\ntranslate([0, 0, base_height])\n    drum();\n\ntranslate([0, 0, base_height + drum_height/2])\n    rotate([0, 0, 0])\n        crank_handle();\n\ntranslate([0, 0, base_height + drum_height + 5])\n    rotate([0, 0, 15])\n        ratchet();",
    "renders": true
  },
  {
    "tool": "pulley",
    "openscad_code": "// Pulley Tool - Realistic Style, Medium Complexity\n// 3D printable, ~70mm long, includes functional pulley wheel and handle\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main colors\ncolor_handle = [0.2, 0.2, 0.2];  // Dark gray\ncolor_metal = [0.7, 0.7, 0.7];   // Silver\ncolor_wheel = [0.1, 0.1, 0.1];   // Black\n\n// Overall dimensions\nhandle_length = 75;\nhandle_diameter = 12;\npulley_width = 18;\npulley_diameter = 35;\nframe_thickness = 3;\n\n// Main assembly\nmodule pulley_tool() {\n    union() {\n        // Handle with grip texture\n        handle();\n        \n        // Frame connecting handle to pulley\n        frame();\n        \n        // Rotating pulley wheel\n        translate([handle_length/2 + 25, 0, 0])\n            rotate([0, 0, 0])\n                pulley_wheel();\n    }\n}\n\n// Handle with ergonomic grip pattern\nmodule handle() {\n    color(color_handle)\n    union() {\n        // Main handle body\n        translate([-handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=handle_length, d=handle_diameter);\n        \n        // Grip rings\n        for(i = [-30:10:30]) {\n            translate([i, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=2, d=handle_diameter + 2, center=true);\n        }\n        \n        // End cap\n        translate([handle_length/2, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=3, d1=handle_diameter + 2, d2=handle_diameter);\n    }\n}\n\n// Metal frame holding the pulley\nmodule frame() {\n    color(color_metal)\n    union() {\n        // Main frame arm\n        translate([handle_length/2 - 10, 0, 0])\n            cube([45, frame_thickness, 25]);\n        \n        // Side supports\n        translate([handle_length/2 + 15, 0, 12.5])\n            cube([10, frame_thickness, 10]);\n        translate([handle_length/2 + 15, 0, -12.5])\n            cube([10, frame_thickness, 10]);\n    }\n}\n\n// Detailed pulley wheel with bearings and grooves\nmodule pulley_wheel() {\n    color(color_wheel)\n    difference() {\n        // Main wheel\n        union() {\n            cylinder(h=pulley_width, d=pulley_diameter);\n            \n            // Side flanges\n            translate([0, 0, pulley_width/2 + 1])\n                cylinder(h=1, d=pulley_diameter + 4);\n            translate([0, 0, -pulley_width/2 - 1])\n                cylinder(h=1, d=pulley_diameter + 4);\n        }\n        \n        // Central bearing hole\n        cylinder(h=pulley_width + 2, d=8);\n        \n        // Rope grooves\n        for(i = [-2:1:2]) {\n            rotate([0, 90, 0])\n                translate([i * 3, 0, 0])\n                    cylinder(h=pulley_diameter + 2, d=3);\n        }\n    }\n    \n    // Metal bearing sleeve\n    color(color_metal)\n    translate([0, 0, 0])\n        cylinder(h=pulley_width, d=7.8);\n    \n    // Retention clips\n    translate([0, 0, pulley_width/2 + 2])\n        cylinder(h=1, d=10);\n    translate([0, 0, -pulley_width/2 - 2])\n        cylinder(h=1, d=10);\n}\n\n// Generate the complete tool\npulley_tool();",
    "renders": true
  },
  {
    "tool": "tackle",
    "openscad_code": "// Multi-Purpose Fishing Crimping Tool (Tackle Tool)\n// Suitable for crimping sleeves, cutting wire, and forming leaders\n\n// Overall dimensions: ~90 mm length, 45 mm width (closed), 15 mm thickness\n\n// Color constants\n$fn = 36;\n\nmodule handle(grip_color=[0.2,0.2,0.2], metal_color=[0.7,0.7,0.7]) {\n    // Main handle body with ergonomic grip\n    color(grip_color) {\n        difference() {\n            // Main grip body\n            translate([0,0,2.5]) cube([40,12,10], center=true);\n            // Finger grooves\n            for(i=[-1,0,1]) {\n                translate([i*8,0,5]) rotate([90,0,0])\n                    cylinder(h=12, d1=4, d2=4, center=true);\n            }\n        }\n    }\n    \n    // Metal reinforcement strip\n    color(metal_color) {\n        translate([0,6.5,2.5]) cube([38,1,5], center=true);\n    }\n}\n\nmodule jaw_half(side=1) {\n    // Jaw mechanism with cutting blade and crimping stations\n    color([0.8,0.8,0.8]) {\n        difference() {\n            union() {\n                // Main jaw body\n                translate([0,0,0]) cube([35,8,6], center=true);\n                \n                // Cutting blade edge\n                translate([0,side*3.5,0]) cube([25,0.5,5], center=true);\n                \n                // Crimping stations\n                // Small crimp station (1-2mm sleeves)\n                translate([-10,side*2,0]) \n                    cylinder(h=6, d=side*4, center=true);\n                \n                // Medium crimp station (2-4mm sleeves)\n                translate([0,side*2,0]) \n                    cylinder(h=6, d=side*6, center=true);\n                \n                // Large crimp station (4-6mm sleeves)\n                translate([10,side*2,0]) \n                    cylinder(h=6, d=side*8, center=true);\n            }\n            \n            // Remove material to form half-cylinders\n            translate([-10,side*2,0]) \n                cylinder(h=7, d=side*2.5, center=true);\n            translate([0,side*2,0]) \n                cylinder(h=7, d=side*4.5, center=true);\n            translate([10,side*2,0]) \n                cylinder(h=7, d=side*6.5, center=true);\n        }\n    }\n}\n\nmodule pivot_pin() {\n    // Hinge pin for tool rotation\n    color([0.6,0.6,0.6]) {\n        rotate([90,0,0]) cylinder(h=10, d=3, center=true);\n    }\n    \n    // End caps\n    color([0.3,0.3,0.3]) {\n        translate([0,0,5]) sphere(d=4);\n        translate([0,0,-5]) sphere(d=4);\n    }\n}\n\nmodule safety_lock() {\n    // Locking mechanism to keep tool closed\n    color([0.4,0.4,0.4]) {\n        // Lock arm\n        translate([15,0,0]) rotate([0,90,0]) \n            cylinder(h=8, d=4, center=true);\n        \n        // Lock notch\n        translate([15,0,0]) cube([6,3,4], center=true);\n    }\n}\n\n// Build the complete tool\nmodule crimping_tool(closed=true) {\n    // Calculate open angle (30 degrees when open)\n    open_angle = closed ? 0 : 30;\n    \n    // First handle and jaw\n    translate([0,0,0]) {\n        handle();\n        translate([20,0,0]) rotate([0,0,-open_angle]) {\n            jaw_half(1);\n        }\n    }\n    \n    // Second handle and jaw (mirrored)\n    translate([0,0,0]) {\n        rotate([0,0,open_angle]) {\n            handle();\n            translate([20,0,0]) rotate([0,0,0]) {\n                jaw_half(-1);\n            }\n        }\n    }\n    \n    // Pivot pin at center\n    translate([20,0,3]) pivot_pin();\n    \n    // Safety lock on first handle\n    translate([35,6,2.5]) rotate([0,0,open_angle]) safety_lock();\n}\n\n// Assemble the tool (closed position for 3D printing)\ncrimping_tool(closed=true);",
    "renders": true
  },
  {
    "tool": "hoist",
    "openscad_code": "// Realistic Hoist Tool - Medium Complexity\n// Overall dimensions: ~70mm height, 50mm width\n\n$fn=50;\n\nmodule hoist_frame() {\n    // Main frame base\n    color(\"silver\")\n    difference() {\n        cube([40, 30, 5], center=true);\n        translate([0, 0, -2.5])\n        cube([35, 25, 6], center=true);\n    }\n    \n    // Vertical support posts\n    for(side=[-1, 1]) {\n        translate([side*15, 0, 15])\n        color(\"silver\")\n        cube([3, 25, 30], center=true);\n    }\n    \n    // Top cross beam\n    translate([0, 0, 30])\n    color(\"silver\")\n    cube([35, 25, 3], center=true);\n}\n\nmodule pulley_wheel() {\n    // Pulley wheel assembly\n    translate([0, 0, 25])\n    rotate([90, 0, 0])\n    union() {\n        // Wheel\n        color(\"darkgray\")\n        cylinder(h=8, r=10, center=true);\n        \n        // Groove for cable\n        translate([0, 0, -1])\n        color(\"silver\")\n        cylinder(h=10, r=8, center=true);\n        \n        // Center axle\n        color(\"black\")\n        cylinder(h=15, r=2, center=true);\n    }\n}\n\nmodule crank_handle() {\n    // Crank mechanism\n    translate([20, 0, 30])\n    rotate([0, 90, 0])\n    union() {\n        // Handle shaft\n        color(\"silver\")\n        cylinder(h=15, r=2);\n        \n        // Crank handle grip\n        translate([0, 0, 15])\n        rotate([90, 0, 0])\n        color(\"red\")\n        cylinder(h=20, r=3, center=true);\n        \n        // Crank arm\n        translate([0, 10, 0])\n        color(\"silver\")\n        cube([3, 15, 3], center=true);\n    }\n}\n\nmodule hook_assembly() {\n    // Hook and cable\n    translate([0, 0, 15])\n    union() {\n        // Cable going up to pulley\n        color(\"black\")\n        cylinder(h=10, r=0.5);\n        \n        // Hook\n        translate([0, 0, -5])\n        rotate([0, 0, 0])\n        color(\"darkgray\")\n        difference() {\n            // Hook body\n            union() {\n                cylinder(h=2, r=5);\n                translate([0, -5, 0])\n                rotate([90, 0, 0])\n                cylinder(h=10, r=2);\n                translate([0, -5, -5])\n                sphere(r=3);\n            }\n            // Hook opening\n            translate([0, -5, -5])\n            rotate([90, 0, 0])\n            cylinder(h=8, r=1.5);\n        }\n    }\n}\n\nmodule base_supports() {\n    // Triangular supports for stability\n    for(side=[-1, 1]) {\n        translate([side*15, 12, 2.5])\n        rotate([0, side*15, 0])\n        color(\"silver\")\n        cube([3, 5, 5], center=true);\n        \n        translate([side*15, -12, 2.5])\n        rotate([0, -side*15, 0])\n        color(\"silver\")\n        cube([3, 5, 5], center=true);\n    }\n}\n\nmodule mounting_holes() {\n    // Holes for mounting\n    for(x=[-15, 15])\n    for(y=[-10, 10]) {\n        translate([x, y, 0])\n        rotate([0, 0, 0])\n        color(\"black\")\n        cylinder(h=6, r=1.5, center=true);\n    }\n}\n\n// Assemble the complete hoist\nunion() {\n    hoist_frame();\n    pulley_wheel();\n    crank_handle();\n    hook_assembly();\n    base_supports();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "tool": "elevator",
    "openscad_code": "// Realistic Elevator Tool - Medium Complexity\n// A 3D printable miniature elevator with functional doors and control panel\n\n// Main dimensions (in mm)\nfloor_w = 40;\nfloor_d = 40;\nfloor_h = 3;\nwall_t = 2;\ndoor_w = 18;\ndoor_h = 30;\ncabin_h = 35;\nhandle_w = 8;\nhandle_h = 10;\nbutton_size = 3;\n\n// Elevator Floor Module\nmodule elevator_floor() {\n    color(\"silver\")\n    cube([floor_w, floor_d, floor_h], center=true);\n}\n\n// Elevator Walls Module\nmodule elevator_walls() {\n    color(\"silver\")\n    difference() {\n        // Main frame\n        translate([0, 0, cabin_h/2])\n        cube([floor_w, floor_d, cabin_h], center=true);\n        \n        // Hollow interior\n        translate([0, 0, cabin_h/2])\n        cube([floor_w-wall_t*2, floor_d-wall_t*2, cabin_h+1], center=true);\n    }\n}\n\n// Door Panels Module\nmodule elevator_doors(x_pos) {\n    color(\"lightblue\") {\n        translate([x_pos, 0, door_h/2+floor_h/2])\n        cube([door_w, wall_t+1, door_h], center=true);\n        \n        // Door handle\n        color(\"black\")\n        translate([x_pos+door_w/2-2, wall_t/2+1, door_h/2+floor_h/2])\n        rotate([90, 0, 0])\n        cylinder(h=handle_w, d=1.5, $fn=12);\n    }\n}\n\n// Control Panel Module\nmodule control_panel() {\n    color(\"gray\") {\n        // Panel housing\n        translate([floor_w/2-wall_t/2, 0, 10+floor_h/2])\n        cube([wall_t+1, 10, 20], center=true);\n        \n        // Buttons\n        for(i=[0:2]) {\n            color(\"red\")\n            translate([floor_w/2+0.5, -3+i*3, 15+i*3+floor_h/2])\n            sphere(button_size/2, $fn=16);\n        }\n        \n        // Display\n        color(\"green\")\n        translate([floor_w/2+0.5, 0, 25+floor_h/2])\n        cube([1, 6, 4], center=true);\n    }\n}\n\n// Ceiling Light Module\nmodule ceiling_light() {\n    color(\"yellow\")\n    translate([0, 0, cabin_h-1+floor_h/2])\n    cube([floor_w-wall_t*4, floor_d-wall_t*4, 1], center=true);\n}\n\n// Floor Indicator Strip\nmodule floor_indicator() {\n    color(\"black\")\n    translate([0, floor_d/2-wall_t/2-0.5, 5+floor_h/2])\n    cube([floor_w-wall_t*2, 1, 10], center=true);\n}\n\n// Assembly\nunion() {\n    // Base structure\n    elevator_floor();\n    elevator_walls();\n    \n    // Doors (left and right)\n    elevator_doors(-door_w/2);\n    elevator_doors(door_w/2);\n    \n    // Control panel inside\n    control_panel();\n    \n    // Ceiling features\n    ceiling_light();\n    floor_indicator();\n    \n    // Ventilation slits on sides\n    for(i=[-1:1]) {\n        color(\"black\")\n        translate([floor_w/2-wall_t/2, i*10, 20+floor_h/2])\n        cube([0.5, 2, 8], center=true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "crane",
    "openscad_code": "// Realistic 3D-printable crane tool (medium complexity)\n// Overall size roughly 85 mm long, 20 mm wide at jaws, 7 mm thick\n\n// Color constants\n$fn = 32;\n\nmodule main_body() {\n    // Central beam\n    difference() {\n        hull() {\n            translate([0, 0, 3.5]) cube([60, 12, 7], center=true);\n            translate([-25, 0, 3.5]) cube([30, 8, 5], center=true);\n        }\n        // Lightening holes\n        for (i = [0:1:2])\n            translate([-20 + i*10, 0, 3.5])\n                cylinder(h=7.1, d=3, center=true);\n    }\n}\n\nmodule pivot_pin() {\n    // Pivot rivet\n    cylinder(h=12, d=3.2, center=true);\n}\n\nmodule jaw_half(side) {\n    // Half-jaw with gripping teeth\n    color(\"#444444\")\n    difference() {\n        union() {\n            translate([0, side*5, 0])\n                cube([20, 5, 4], center=true);\n            // Grip teeth\n            for (i = [0:1:4])\n                translate([5 + i*2, side*7.5, 0])\n                    cube([2, 2.5, 4], center=true);\n        }\n        // Rivet hole\n        translate([0, 0, 0])\n            cylinder(h=4.2, d=3.2, center=true);\n    }\n}\n\nmodule handle_half(side) {\n    // Ergonomic handle half\n    color(\"#222222\")\n    difference() {\n        hull() {\n            translate([-32, side*3, 3.5])\n                cube([36, 6, 7], center=true);\n            translate([-52, side*2, 3.5])\n                cube([20, 4, 5], center=true);\n        }\n        // Lightening hole\n        translate([-42, side*2.5, 3.5])\n            cylinder(h=7.1, d=3, center=true);\n    }\n}\n\nmodule spring() {\n    // Flat spring\n    color(\"#888888\")\n    difference() {\n        hull() {\n            translate([-5, 0, 3.5])\n                cube([10, 2, 0.6], center=true);\n            translate([-30, 0, 3.5])\n                cube([10, 2, 0.6], center=true);\n        }\n        // Rivet hole\n        translate([0, 0, 0])\n            cylinder(h=1, d=3.4, center=true);\n    }\n}\n\n// Assembly\n// Left half\ntranslate([0, 0, 0]) {\n    union() {\n        main_body();\n        handle_half(-1);\n        rotate([0, 0, -10]) jaw_half(-1);\n        translate([0, 0, 3.5]) pivot_pin();\n    }\n}\n\n// Right half\ntranslate([0, 0, 7.5]) {\n    rotate([0, 180, 0]) {\n        union() {\n            main_body();\n            handle_half(1);\n            rotate([0, 0, 10]) jaw_half(1);\n            translate([0, 0, -3.5]) pivot_pin();\n            // Spring between halves\n            translate([0, 0, -3.5]) spring();\n        }\n    }\n}",
    "renders": true
  },
  {
    "tool": "derrick",
    "openscad_code": "// Realistic Derrick Tool - Medium Complexity\n// Oil drilling derrick with functional components\n\n// Main parameters\n$fn = 32;\ntower_height = 80;\nbase_size = 30;\nleg_diameter = 4;\ncrossbeam_diameter = 3;\nplatform_height = 8;\n\n// Color definitions\ncolor_structure = [0.7, 0.7, 0.7]; // Steel gray\ncolor_platform = [0.5, 0.5, 0.5]; // Darker gray\ncolor_details = [0.8, 0.6, 0.2]; // Brass/yellow\ncolor_pipe = [0.9, 0.9, 0.9]; // Light gray\n\nmodule derrick_leg(height, angle = 0) {\n    rotate([0, angle, 0])\n        cylinder(h = height, d = leg_diameter, center = true);\n}\n\nmodule crossbeam(length, rotation = 0) {\n    rotate([0, 0, rotation])\n        cylinder(h = length, d = crossbeam_diameter, center = true);\n}\n\nmodule support_base() {\n    color(color_structure)\n    difference() {\n        cube([base_size, base_size, platform_height], center = true);\n        translate([0, 0, platform_height/2])\n            cube([base_size-4, base_size-4, platform_height+1], center = true);\n    }\n}\n\nmodule drilling_platform() {\n    color(color_platform)\n    translate([0, 0, tower_height/2 - platform_height/2])\n    difference() {\n        cube([base_size-5, base_size-5, platform_height], center = true);\n        translate([0, 0, platform_height/2])\n            cube([base_size-15, base_size-15, platform_height+1], center = true);\n    }\n}\n\nmodule derrick_tower() {\n    color(color_structure)\n    union() {\n        // Four legs\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([base_size/2-2, base_size/2-2, 0])\n                derrick_leg(tower_height, atan((base_size-4)/tower_height));\n        }\n        \n        // Horizontal crossbeams\n        for(h = [platform_height+5:15:tower_height-15]) {\n            for(i = [0:1]) {\n                rotate([0, 0, i*90])\n                translate([0, 0, h-tower_height/2])\n                    crossbeam(base_size-4);\n            }\n        }\n        \n        // Diagonal supports\n        for(h = [platform_height+10:15:tower_height-15]) {\n            rotate([0, 0, 45])\n            translate([0, 0, h-tower_height/2])\n                crossbeam((base_size-4)*sqrt(2));\n        }\n    }\n}\n\nmodule crown_block() {\n    color(color_structure)\n    translate([0, 0, tower_height/2+5])\n    union() {\n        // Crown block housing\n        cube([base_size-10, 6, 8], center = true);\n        \n        // Sheaves\n        color(color_details)\n        for(i = [-1, 1]) {\n            translate([i*8, 0, 0])\n                cylinder(h = 3, d = 5, center = true);\n            translate([i*8, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 3.1, d = 1, center = true);\n        }\n    }\n}\n\nmodule drill_pipe() {\n    color(color_pipe)\n    translate([0, 0, -tower_height/2+2])\n    cylinder(h = tower_height-10, d = 3, center = false);\n}\n\nmodule catwalk() {\n    color(color_platform)\n    translate([base_size/2+2, 0, -tower_height/2+platform_height/2])\n    rotate([0, 0, 90])\n    cube([tower_height/2, 8, platform_height/2], center = true);\n}\n\nmodule ladder() {\n    color(color_structure)\n    translate([0, base_size/2-1, 0])\n    union() {\n        // Side rails\n        for(x = [-2, 2]) {\n            translate([x, 0, 0])\n                cube([1, 2, tower_height-10], center = true);\n        }\n        \n        // Rungs\n        for(h = [-tower_height/2+5:5:tower_height/2-5]) {\n            translate([0, 0, h])\n                cube([5, 2, 1], center = true);\n        }\n    }\n}\n\n// Assemble the complete derrick\nunion() {\n    support_base();\n    derrick_tower();\n    drilling_platform();\n    crown_block();\n    drill_pipe();\n    catwalk();\n    ladder();\n}",
    "renders": true
  },
  {
    "tool": "boom",
    "openscad_code": "// Boom Mic Tool - Realistic Style, Medium Complexity\n// OpenSCAD code for 3D printable boom microphone tool\n\n// Overall size control\nboom_length = 80;\nhandle_length = 25;\nhead_diameter = 15;\nwall_thickness = 1.5;\n\n// Colors\nmic_color = [0.8, 0.8, 0.8];\nhandle_color = [0.3, 0.3, 0.3];\nfoam_color = [0.9, 0.9, 0.9];\ngrill_color = [0.5, 0.5, 0.5];\n\nmodule boom_head() {\n    // Main microphone cylinder\n    color(mic_color)\n    cylinder(h=20, d=head_diameter, $fn=32);\n    \n    // Microphone grill holes\n    difference() {\n        cylinder(h=8, d=head_diameter-2, $fn=32);\n        // Ventilation holes\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n            translate([head_diameter/2-3, 0, 3])\n            cylinder(h=5, d=1.5, $fn=8);\n        }\n    }\n    \n    // Foam windscreen\n    translate([0, 0, 10])\n    color(foam_color)\n    cylinder(h=12, d=head_diameter+4, $fn=32);\n    \n    // Connector base\n    translate([0, 0, -2])\n    color(mic_color)\n    cylinder(h=4, d=head_diameter+2, $fn=32);\n}\n\nmodule handle_grips() {\n    // Handle with ergonomic grips\n    color(handle_color)\n    difference() {\n        cylinder(h=handle_length, d=8, $fn=32);\n        \n        // Grip rings\n        for(i=[1:3]) {\n            translate([0, 0, i*6])\n            rotate([0, 0, 15])\n            cube([8.5, 0.5, 2], center=true);\n        }\n        \n        // Cable channel\n        translate([4, 0, handle_length/2])\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, d=1.5, $fn=8);\n    }\n}\n\nmodule boom_arm() {\n    // Main boom tube\n    color(grill_color)\n    difference() {\n        cylinder(h=boom_length, d=6, $fn=24);\n        \n        // Internal cable channel\n        translate([0, 0, boom_length/2])\n        cylinder(h=boom_length+2, d=3, $fn=16);\n        \n        // Mounting holes\n        for(i=[20:20:60]) {\n            translate([0, 0, i])\n            rotate([0, 90, 0])\n            cylinder(h=10, d=2.5, $fn=8);\n        }\n    }\n    \n    // Reinforcement rings\n    for(i=[0:20:boom_length-10]) {\n        translate([0, 0, i])\n        color(grill_color)\n        cylinder(h=1, d=7, $fn=24);\n    }\n}\n\nmodule connector_joint() {\n    // Rotating joint piece\n    color(handle_color)\n    union() {\n        // Main joint body\n        cylinder(h=6, d=10, $fn=32);\n        \n        // Locking knob\n        translate([0, 0, 3])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=8, d=4, $fn=6);\n            translate([0, 0, -1])\n            cylinder(h=10, d=2, $fn=8);\n        }\n        \n        // Mounting bracket\n        translate([0, 0, -3])\n        difference() {\n            cube([12, 6, 2], center=true);\n            cylinder(h=3, d=3, $fn=16);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, handle_length]) {\n    // Boom arm\n    boom_arm();\n    \n    // Connector at end\n    translate([0, 0, boom_length])\n    connector_joint();\n    \n    // Microphone head\n    translate([0, 0, boom_length+8])\n    boom_head();\n}\n\n// Handle\ntranslate([0, 0, 0])\nrotate([0, 0, 0])\nhandle_grips();\n\n// Base stand mount\ntranslate([0, 0, -5])\ncolor(handle_color)\ndifference() {\n    cylinder(h=5, d=12, $fn=32);\n    cylinder(h=6, d=6, $fn=24);\n}\n\n// Cable strain relief\ntranslate([0, 0, handle_length-5])\nrotate([90, 0, 0])\ncolor(handle_color)\ndifference() {\n    cylinder(h=6, d=4, $fn=16);\n    cylinder(h=7, d=2, $fn=8);\n}",
    "renders": true
  },
  {
    "tool": "arm",
    "openscad_code": "// Realistic Medium-Complexity Robotic Gripper Arm Tool\n// Overall length â‰ˆ 85 mm, designed for FDM printing (no supports)\n\n// Base colors\ncolor(\"silver\") \nrobotic_gripper();\n\nmodule robotic_gripper() {\n    // Main body cylinder (45 mm long, 20 mm diameter)\n    translate([0, 0, 20]) rotate([90, 0, 0])\n        cylinder(h = 45, d = 20, $fn = 40);\n\n    // Mounting flange (25 mm diameter, 5 mm thick)\n    translate([0, 0, 42.5]) rotate([90, 0, 0])\n        cylinder(h = 5, d = 25, $fn = 40);\n\n    // Actuator rod (M5 threaded look)\n    translate([0, 0, 45]) rotate([90, 0, 0])\n        cylinder(h = 12, d = 5, $fn = 20);\n\n    // Wrist joint housing (ball-socket style)\n    color(\"dimgray\")\n    translate([0, 0, 0]) rotate([90, 0, 0]) difference() {\n        sphere(d = 18, $fn = 40);\n        translate([0, 8, 0]) rotate([0, 90, 0])\n            cylinder(h = 20, d = 8, $fn = 20);\n    }\n\n    // Left gripper finger assembly\n    color(\"darkslategray\")\n    translate([0, 0, 0]) rotate([0, 0, -30]) gripper_finger();\n\n    // Right gripper finger assembly (mirrored)\n    translate([0, 0, 0]) mirror([1, 0, 0]) rotate([0, 0, -30]) gripper_finger();\n}\n\nmodule gripper_finger() {\n    // Finger base link (20 mm long, 8 mm thick)\n    translate([9, 0, 0]) rotate([0, 90, 0])\n        cylinder(h = 20, d = 8, $fn = 20);\n\n    // Finger pivot joint\n    translate([9, 0, 20]) sphere(d = 6, $fn = 20);\n\n    // Finger tip link (15 mm long, 6 mm thick)\n    translate([9, 0, 20]) rotate([0, 90, 45])\n        cylinder(h = 15, d = 6, $fn = 20);\n\n    // Rubber grip pad (2 mm thick)\n    color(\"black\")\n    translate([9 + 7.5 * sin(45), -3, 20 + 7.5 * cos(45)]) rotate([0, 45, 0])\n        cube([15, 2, 6], center = true);\n\n    // Finger tip pad\n    translate([9 + 15 * sin(45), 0, 20 + 15 * cos(45)])\n        sphere(d = 4, $fn = 20);\n}\n\n// Cable channel on body\ncolor(\"black\")\ntranslate([0, 10, 20]) rotate([90, 0, 0])\n    cylinder(h = 45, d = 3, $fn = 20);\n\n// Ventilation slots (3 slots around body)\nfor (i = [0:120:359]) {\n    rotate([0, 0, i]) translate([10, 0, 20]) rotate([90, 0, 0])\n        cube([2, 15, 3], center = true);\n}\n\n// Mounting holes on flange (4 holes M3)\nfor (a = [45, 135, 225, 315]) {\n    rotate([0, 0, a]) translate([10, 0, 42.5]) rotate([90, 0, 0])\n        cylinder(h = 6, d = 3.2, $fn = 20);\n}",
    "renders": true
  },
  {
    "tool": "jib",
    "openscad_code": "// OpenSCAD code for a realistic jib tool (soldering iron style)\n// Medium complexity, 3D printable\n\n// Overall dimensions\n$fn = 36;\n\nmodule handle() {\n    color(\"DarkBlue\") {\n        // Main grip body\n        difference() {\n            cylinder(h = 60, d = 20);\n            // Ventilation holes\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([8, 0, 30])\n                        cylinder(h = 10, d = 3);\n            }\n        }\n        \n        // Grip texture rings\n        for(i = [1:6]) {\n            translate([0, 0, i * 10])\n                cylinder(h = 2, d = 22);\n        }\n        \n        // End cap\n        translate([0, 0, 60])\n            cylinder(h = 5, d = 19);\n    }\n}\n\nmodule shaft() {\n    color(\"Silver\") {\n        // Metal shaft\n        cylinder(h = 40, d = 8);\n        \n        // Heat shield collar\n        translate([0, 0, -5])\n            cylinder(h = 8, d = 12);\n    }\n}\n\nmodule tip() {\n    color(\"DarkGray\") {\n        // Conical tip\n        cylinder(h = 15, d1 = 8, d2 = 2);\n        \n        // Fine point\n        translate([0, 0, 15])\n            cylinder(h = 5, d = 2);\n    }\n}\n\nmodule cable_entry() {\n    color(\"Black\") {\n        // Cable strain relief\n        translate([0, 0, 65])\n            rotate([90, 0, 0])\n                cylinder(h = 15, d = 6);\n        \n        // Cable\n        translate([0, 7.5, 65])\n            rotate([90, 0, 0])\n                cylinder(h = 25, d = 4);\n    }\n}\n\nmodule standoff() {\n    color(\"DarkBlue\") {\n        // Support bracket\n        translate([-10, -5, 35])\n            cube([20, 10, 5]);\n        \n        // Mounting hole\n        translate([0, 0, 35])\n            cylinder(h = 6, d = 3);\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle assembly\n    handle();\n    \n    // Shaft assembly\n    translate([0, 0, 60])\n        union() {\n            shaft();\n            translate([0, 0, 40])\n                tip();\n        }\n    \n    // Cable entry\n    cable_entry();\n    \n    // Optional standoff bracket\n    // standoff();\n}",
    "renders": true
  },
  {
    "tool": "gib",
    "openscad_code": "// Gib Tool - OpenSCAD Model\n// A realistic style gib for precision adjustment in machine tools\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main dimensions (mm)\noverall_length = 85;\nbody_width = 25;\nbody_height = 15;\ngib_angle = 5;  // degrees for taper\n\n// Colors\nmetal_color = [0.7, 0.7, 0.75];\nblack_color = [0.1, 0.1, 0.1];\nsteel_color = [0.5, 0.5, 0.6];\n\n// Main body with tapered gib surface\nmodule gib_body() {\n    color(metal_color)\n    difference() {\n        // Main block\n        translate([0, 0, body_height/2])\n            cube([overall_length, body_width, body_height], center=true);\n        \n        // Tapered surface\n        translate([overall_length/2 - 5, 0, body_height])\n            rotate([0, gib_angle, 0])\n            translate([0, 0, -body_height])\n            cube([overall_length, body_width + 2, body_height * 2]);\n    }\n}\n\n// Adjustment screw with hex head\nmodule adjustment_screw() {\n    translate([10, 0, body_height + 8])\n    rotate([0, 90, 0])\n    union() {\n        // Threaded shaft\n        color(steel_color)\n        cylinder(h=20, d=6, $fn=20);\n        \n        // Hex head\n        color(black_color)\n        translate([-8, 0, 0])\n        cylinder(h=8, d=12, $fn=6);\n        \n        // Slot in head\n        translate([-8, 0, 0])\n        rotate([0, 90, 0])\n        cube([10, 2, 1.5], center=true);\n    }\n}\n\n// Locking screws (2x)\nmodule locking_screw(pos) {\n    translate([pos, body_width/4, body_height + 5])\n    rotate([0, 90, 0])\n    union() {\n        // Screw head\n        color(black_color)\n        cylinder(h=4, d=8, $fn=20);\n        \n        // Phillips pattern\n        cube([6, 1, 1], center=true);\n        cube([1, 6, 1], center=true);\n        \n        // Shaft\n        color(steel_color)\n        translate([2, 0, 0])\n        cylinder(h=10, d=4.5, $fn=16);\n    }\n}\n\n// Oil grooves on gib surface\nmodule oil_grooves() {\n    color([0.8, 0.8, 0.85])\n    for(i = [0:2]) {\n        translate([overall_length/2 + i*15 - 15, -body_width/2 + 3, 0.5])\n        rotate([0, 90 - gib_angle, 0])\n        translate([0, 0, -body_height/2])\n        cube([body_width - 6, 1, 1], center=true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for(pos = [overall_length/4, overall_length*3/4]) {\n        translate([pos, 0, -body_height/2])\n        rotate([0, 0, 0])\n        cylinder(h=body_height + 2, d=4.5, $fn=20);\n    }\n}\n\n// Grip knurls on adjustment end\nmodule grip_knurls() {\n    color([0.6, 0.6, 0.65])\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([overall_length - 8, body_width/2 - 2, body_height/2])\n        cube([2, 4, 0.5], center=true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        gib_body();\n        adjustment_screw();\n        locking_screw(overall_length/2);\n        locking_screw(overall_length/2 - 20);\n        oil_grooves();\n        grip_knurls();\n    }\n    \n    // Mounting holes (cut through)\n    mounting_holes();\n}\n\n// Marking text (simulated with small cubes)\ncolor([0.2, 0.2, 0.2])\ntranslate([overall_length - 12, 0, body_height + 1])\nrotate([0, 0, 0])\nunion() {\n    cube([8, 1, 0.5]);      // \"G\"\n    translate([0, -3, 0]) cube([8, 1, 0.5]);  // \"I\"\n    translate([0, 3, 0]) cube([8, 1, 0.5]);   // \"B\"\n}",
    "renders": true
  },
  {
    "tool": "spar",
    "openscad_code": "// Realistic 3D-printable spar tool (medium complexity)\n// Overall length â‰ˆ 90 mm, designed for FDM printing\n\n// Color constants\n$fn = 32;  // Smooth curves\n\nmodule main_shaft() {\n    // Central carbon-fiber tube\n    color(\"dimgray\")\n    difference() {\n        cylinder(h=70, d=8.5, center=true);\n        translate([0,0,-35])\n            cylinder(h=70, d=6.5);  // Hollow core\n    }\n}\n\nmodule left_handle() {\n    // Left handle with finger grooves\n    translate([-40, 0, 0])\n    rotate([90, 0, 0])\n    color(\"lightgray\")\n    difference() {\n        // Main grip\n        cylinder(h=25, d=12);\n        // Finger grooves\n        for(i=[-2:2])\n            translate([0, -3, i*4.2])\n                cube([12, 2, 3.5], center=true);\n    }\n}\n\nmodule right_handle() {\n    // Right handle with thumb rest\n    translate([40, 0, 0])\n    rotate([90, 0, 0])\n    color(\"lightgray\")\n    union() {\n        difference() {\n            // Main grip\n            cylinder(h=25, d=12);\n            // Finger grooves\n            for(i=[-2:2])\n                translate([0, -3, i*4.2])\n                    cube([12, 2, 3.5], center=true);\n        }\n        // Thumb rest\n        translate([0, 6, 8])\n            rotate([0, -10, 0])\n            cube([12, 3, 8], center=true);\n    }\n}\n\nmodule end_cap(lr) {\n    // Threaded end caps with knurling\n    translate([lr*35, 0, 0])\n    color(\"silver\")\n    union() {\n        difference() {\n            cylinder(h=6, d=10);\n            cylinder(h=7, d=7.5);  // Internal thread\n        }\n        // Knurling pattern\n        for(i=[0:15])\n            rotate([0, 0, i*22.5])\n            translate([5.5, 0, 3])\n                cube([1, 0.5, 6], center=true);\n    }\n}\n\nmodule safety_sheath() {\n    // Removable safety cover\n    translate([0, 0, 15])\n    color(\"red\", 0.7)\n    difference() {\n        // Main sheath\n        cube([90, 8, 3], center=true);\n        // Shaft channel\n        translate([0, 0, -1])\n            cube([75, 7, 5], center=true);\n        // Grip notches\n        for(pos=[-35, 35])\n            translate([pos, 0, 1.5])\n                cube([10, 10, 3], center=true);\n    }\n}\n\nmodule label() {\n    // Engraved branding\n    translate([0, 0, 5])\n    color(\"white\")\n    linear_extrude(0.3)\n    text(\"SPAR-90\", size=4, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nunion() {\n    main_shaft();\n    left_handle();\n    right_handle();\n    end_cap(-1);\n    end_cap(1);\n    label();\n    // Optional safety sheath (comment out to print separately)\n    // safety_sheath();\n}",
    "renders": true
  },
  {
    "tool": "gaff",
    "openscad_code": "// Realistic Gaff Hook Tool\n// Overall length: ~90 mm for 3D printing\n\n// Colors\nhook_color = \"Silver\";\nhandle_color = \"SaddleBrown\";\ngrip_color = \"Black\";\n\n// Main dimensions\nhandle_length = 60;\nhandle_diameter = 12;\nhook_length = 25;\nhook_thickness = 5;\nbarb_length = 8;\nbarb_thickness = 2;\n\n// Handle with grip texture\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        color(grip_color)\n        for (i = [1:7]) {\n            translate([0, 0, i*7+5])\n                cylinder(h=2, d=handle_diameter+2, $fn=32);\n        }\n    }\n}\n\n// Hook tip with barb\nmodule hook_tip() {\n    color(hook_color)\n    union() {\n        // Main hook curve\n        difference() {\n            // Outer curve\n            rotate([90, 0, 0])\n                cylinder(h=hook_length, d=hook_thickness*2, $fn=32);\n            \n            // Inner hollow for curve\n            translate([0, 0, -1])\n                rotate([90, 0, 0])\n                    cylinder(h=hook_length+2, d=hook_thickness*1.4, $fn=32);\n        }\n        \n        // Barb\n        translate([hook_thickness, hook_length-barb_length-2, 0])\n            rotate([0, 90, 0])\n                cube([barb_length, barb_thickness, hook_thickness*1.5]);\n    }\n}\n\n// Reinforcement collar\nmodule collar() {\n    color(hook_color)\n    cylinder(h=8, d=handle_diameter+4, $fn=32);\n}\n\n// Assemble the gaff\ntranslate([0, 0, handle_length/2])\n    handle();\n\n// Collar at handle end\ntranslate([0, 0, handle_length-2])\n    collar();\n\n// Hook attached to collar\ntranslate([0, handle_diameter/2+hook_thickness, handle_length+2])\n    rotate([0, 90, 0])\n        hook_tip();",
    "renders": true
  },
  {
    "tool": "dowel",
    "openscad_code": "// Dowel Center Locating Tool - Medium Detail Realistic Version\n// A 3D printable tool used to mark center points for drilling dowel holes\n\n// Main parameters\nhandle_length = 70;\nhandle_diameter = 12;\ntip_length = 15;\ntip_diameter = 6;\ngrip_ring_count = 5;\ngrip_ring_depth = 0.5;\nmarking_tip_length = 3;\n\n// Handle with ergonomic grip rings\nmodule handle() {\n    color(\"DimGray\") {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings for better handling\n        for(i = [1:grip_ring_count]) {\n            translate([0, 0, (handle_length/(grip_ring_count+1))*i])\n                difference() {\n                    cylinder(h=2, d=handle_diameter+2, $fn=32);\n                    cylinder(h=2.2, d=handle_diameter, $fn=32);\n                }\n        }\n        \n        // End cap detail\n        translate([0, 0, handle_length])\n            cylinder(h=3, d=handle_diameter+1, $fn=32);\n    }\n}\n\n// Precision center point tip\nmodule center_tip() {\n    color(\"Silver\") {\n        // Main conical tip\n        translate([0, 0, -tip_length])\n            cylinder(h=tip_length, d1=0.5, d2=tip_diameter, $fn=16);\n        \n        // Sharp marking point\n        translate([0, 0, -tip_length-marking_tip_length])\n            cylinder(h=marking_tip_length, d1=0.1, d2=0.5, $fn=8);\n            \n        // Transition collar\n        translate([0, 0, -tip_length])\n            cylinder(h=2, d=tip_diameter*1.2, $fn=16);\n    }\n}\n\n// Alignment markings\nmodule alignment_marks() {\n    color(\"Black\") {\n        // Index line for alignment\n        translate([handle_diameter/2+0.1, 0, handle_length/2])\n            rotate([0, 90, 0])\n                cube([0.5, 0.2, handle_length/3], center=true);\n                \n        // 45-degree mark\n        translate([handle_diameter/2+0.1, 0, handle_length/2+10])\n            rotate([0, 90, 45])\n                cube([0.5, 0.2, 5], center=true);\n    }\n}\n\n// Manufacturer markings\nmodule engravings() {\n    color(\"Black\") {\n        // Engraved text \"6mm\"\n        translate([handle_diameter/2+0.2, -2, handle_length-15])\n            rotate([0, 90, 0])\n                cube([0.3, 4, 8]);\n                \n        // Center line\n        translate([0, 0, handle_length-15])\n            rotate([0, 90, 0])\n                cube([0.3, 0.5, 8]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Assemble the tool\n    handle();\n    center_tip();\n    \n    // Add alignment features\n    alignment_marks();\n    engravings();\n    \n    // Chamfer the handle end for comfort\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=3, d=handle_diameter, $fn=32);\n            translate([0, 0, -0.1])\n                cylinder(h=3.2, d=handle_diameter-2, $fn=32);\n        }\n}",
    "renders": true
  },
  {
    "tool": "axle",
    "openscad_code": "// OpenSCAD Axle Tool - Realistic Style, Medium Complexity\n// 3D printable axle tool for removing and installing wheel axles\n\n// Tool dimensions (mm)\ntool_length = 85;\nhandle_length = 40;\nshaft_length = 45;\nhandle_diameter = 20;\nshaft_diameter = 12;\ngrip_diameter = 22;\ngrip_length = 35;\n\n// Tip dimensions\nfork_width = 8;\nfork_thickness = 3;\nfork_gap = 5;\nfork_length = 15;\n\n// Handle grip pattern\ngrip_ridges = 12;\nridge_height = 0.5;\n\n// Quality settings\n$fn = 32;\n\n// Main tool assembly\nmodule axle_tool() {\n    union() {\n        // Handle assembly\n        color([0.2, 0.2, 0.2]) {\n            handle();\n        }\n        \n        // Shaft\n        color([0.7, 0.7, 0.7]) {\n            shaft();\n        }\n        \n        // Fork tip\n        color([0.8, 0.8, 0.8]) {\n            fork_tip();\n        }\n    }\n}\n\n// Handle with grip pattern\nmodule handle() {\n    // Main handle cylinder\n    cylinder(h=handle_length, d=grip_diameter, center=false);\n    \n    // Grip ridges\n    for(i = [0:grip_ridges-1]) {\n        translate([0, 0, i * (grip_length / grip_ridges)]) {\n            difference() {\n                cylinder(h=grip_length / grip_ridges + 1, d=grip_diameter + ridge_height * 2, center=false);\n                cylinder(h=grip_length / grip_ridges + 2, d=grip_diameter, center=false);\n            }\n        }\n    }\n}\n\n// Main shaft\nmodule shaft() {\n    translate([0, 0, handle_length]) {\n        // Tapered section\n        cylinder(h=5, d1=grip_diameter, d2=shaft_diameter, center=false);\n        \n        // Main shaft\n        translate([0, 0, 5]) {\n            cylinder(h=shaft_length - 5 - fork_length, d=shaft_diameter, center=false);\n        }\n    }\n}\n\n// Fork tip for axle removal\nmodule fork_tip() {\n    translate([0, 0, handle_length + (shaft_length - fork_length)]) {\n        // Main shaft continues\n        cylinder(h=fork_length, d=shaft_diameter, center=false);\n        \n        // Remove center to create fork\n        translate([0, 0, -0.1]) {\n            cube([fork_gap, fork_thickness + 0.2, fork_length + 0.2], center=true);\n        }\n        \n        // Add chamfer to fork tips\n        translate([0, 0, handle_length + (shaft_length - fork_length) + fork_length]) {\n            cylinder(h=2, d1=shaft_diameter, d2=shaft_diameter - 2, center=false);\n        }\n        \n        // Strengthening ribs\n        for(side = [-1, 1]) {\n            translate([side * (fork_width/2 - fork_thickness/2), 0, 0]) {\n                cube([fork_thickness, fork_thickness, fork_length], center=true);\n            }\n        }\n    }\n}\n\n// Alignment marks\nmodule alignment_marks() {\n    color([0.1, 0.1, 0.1]) {\n        // Center line indicator\n        translate([0, grip_diameter/2 + 0.1, handle_length/2]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=handle_length * 0.8, d=1, center=true);\n            }\n        }\n        \n        // Measurement marks\n        for(i = [0:4]) {\n            translate([grip_diameter/2 + 0.1, 0, handle_length - i * 10]) {\n                cube([2, 1, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Generate the tool\naxle_tool();\nalignment_marks();",
    "renders": true
  },
  {
    "tool": "joist",
    "openscad_code": "// Joist Tool for marking rafter/joist angles\n// Overall scale: ~90 mm long\n\n// Main colors\nhandle_color = \"DarkGoldenrod\";\nblade_color = \"Silver\";\ngrip_color = \"SaddleBrown\";\n\n// Parameters\nhandle_length = 55;\nhandle_diameter = 12;\nblade_length = 30;\nblade_width = 18;\nblade_thickness = 2.5;\nbolt_diameter = 4;\nbolt_head_diameter = 7;\ngrip_ring_height = 4;\ngrip_ring_gap = 6;\nprotractor_radius = 15;\nprotractor_thickness = 1.2;\n\n// Handle with ergonomic ridges\nmodule handle() {\n    color(handle_color)\n    union() {\n        // Main cylinder\n        cylinder(h = handle_length, d = handle_diameter, $fn = 60);\n\n        // Grip rings\n        for (i = [0 : grip_ring_gap : handle_length - grip_ring_height]) {\n            translate([0, 0, i])\n                cylinder(h = grip_ring_height, d1 = handle_diameter + 2, d2 = handle_diameter + 1, $fn = 60);\n        }\n\n        // End cap\n        translate([0, 0, handle_length])\n            cylinder(h = 3, d1 = handle_diameter, d2 = handle_diameter + 4, $fn = 60);\n    }\n}\n\n// Blade with protractor markings\nmodule blade() {\n    color(blade_color)\n    union() {\n        // Main blade body\n        translate([0, 0, -blade_thickness / 2])\n            cube([blade_length, blade_width, blade_thickness], center = true);\n\n        // Strengthening spine\n        translate([0, 0, -blade_thickness / 2])\n            cube([blade_length, 4, blade_thickness + 1], center = true);\n\n        // Protractor arc\n        translate([0, -blade_width / 2 + 2, blade_thickness / 2 + 0.1])\n            color(\"Black\")\n            linear_extrude(height = protractor_thickness)\n                arc(0, 90, protractor_radius, 1.2);\n\n        // Angle marks\n        for (angle = [0 : 15 : 90]) {\n            rotate([0, 0, angle])\n                translate([protractor_radius - 2, 0, blade_thickness / 2 + 0.1])\n                    rotate([0, 0, -angle])\n                        cube([3, 0.6, protractor_thickness + 0.1]);\n        }\n    }\n}\n\n// Pivot bolt\nmodule pivot_bolt() {\n    union() {\n        // Bolt head\n        color(blade_color)\n        translate([0, 0, -bolt_head_diameter / 2])\n            cylinder(h = bolt_head_diameter, d = bolt_head_diameter, $fn = 6);\n\n        // Shaft\n        color(\"Gray\")\n        translate([0, 0, -blade_thickness / 2 - 1])\n            cylinder(h = blade_thickness + 2, d = bolt_diameter, $fn = 20);\n    }\n}\n\n// Helper: arc primitive\nmodule arc(a0, a1, r, w, h = 1) {\n    difference() {\n        circle(r = r, $fn = 60);\n        circle(r = r - w, $fn = 60);\n    }\n}\n\n// Assembly\nhandle();\ntranslate([handle_length / 2 + blade_length / 2 - 10, 0, 0])\n    rotate([0, 90, 0])\n        blade();\ntranslate([handle_length / 2 + 2, 0, 0])\n    rotate([0, 90, 0])\n        pivot_bolt();",
    "renders": true
  },
  {
    "tool": "rafter",
    "openscad_code": "// Rafter Square Tool - Medium Complexity Realistic Style\n// A 3D printable carpenter's rafter square with common features\n\n$fn = 48;  // Smooth curves for printing\n\n// Overall dimensions (mm)\nlength = 85;\nwidth = 55;\nthickness = 6;\n\n// Color definitions\naluminum = [0.7, 0.7, 0.8];\nblack = [0.1, 0.1, 0.1];\nred = [0.8, 0.1, 0.1];\nwhite = [0.9, 0.9, 0.9];\n\nmodule rafter_square() {\n    difference() {\n        // Main L-shaped body\n        union() {\n            // Long arm\n            color(aluminum) translate([0, 0, 0])\n                cube([length, thickness, width]);\n            \n            // Short arm\n            color(aluminum) translate([0, 0, 0])\n                cube([thickness, width, width]);\n            \n            // Reinforcement fillet\n            color(aluminum) \n                translate([thickness, 0, 0])\n                cube([length-thickness, thickness, thickness]);\n        }\n        \n        // Scribe holes along long arm\n        for(i = [1:12]) {\n            translate([i*6 + 5, thickness/2, width/2])\n                rotate([90, 0, 0])\n                cylinder(h=thickness+1, r=1.5, $fn=16);\n        }\n        \n        // Common angles cutout\n        translate([length-15, thickness/2, width-15])\n            rotate([0, 90, 0])\n            cube([30, thickness+1, 15]);\n        \n        // Branding area recess\n        translate([10, thickness/2, 5])\n            cube([25, thickness+1, 12]);\n    }\n}\n\nmodule measurement_markings() {\n    // Long arm markings (inches)\n    for(i = [0:12]) {\n        if(i % 2 == 0) {\n            // Major tick marks\n            color(black) translate([5 + i*5, thickness+0.1, 2])\n                cube([0.5, 0.2, 8]);\n        } else {\n            // Minor tick marks\n            color(black) translate([5 + i*5, thickness+0.1, 2])\n                cube([0.3, 0.2, 5]);\n        }\n    }\n    \n    // Short arm markings (inches)\n    for(i = [0:5]) {\n        color(black) translate([2, thickness+0.1, 5 + i*5])\n            cube([8, 0.2, 0.5]);\n    }\n}\n\nmodule grip_pattern() {\n    // Diamond knurl pattern on back\n    for(x = [10:5:length-10]) {\n        for(y = [5:5:width-5]) {\n            color(black) translate([x, thickness-0.5, y])\n                rotate([0, 90, 45])\n                cylinder(h=0.5, r1=1.2, r2=0.8, $fn=4);\n        }\n    }\n}\n\nmodule angle_markings() {\n    // Common rafter angles\n    angles = [15, 30, 45];\n    for(angle = angles) {\n        translate([length-20, thickness/2, 20])\n            rotate([0, -angle, 0])\n            color(red) cube([15, 0.2, 1]);\n    }\n}\n\nmodule text_markings() {\n    // Brand text (represented as raised blocks)\n    translate([12, thickness+0.2, 8])\n        color(white) cube([2, 0.5, 0.5]);\n    \n    translate([15, thickness+0.2, 8])\n        color(white) cube([2, 0.5, 0.5]);\n        \n    translate([18, thickness+0.2, 8])\n        color(white) cube([2, 0.5, 0.5]);\n}\n\n// Assembly\nrafter_square();\nmeasurement_markings();\ngrip_pattern();\nangle_markings();\ntext_markings();\n\n// Add hanging hole\ntranslate([5, thickness/2, width-10])\n    rotate([90, 0, 0])\n    cylinder(h=thickness+1, r=2.5, $fn=16);",
    "renders": true
  },
  {
    "tool": "stud",
    "openscad_code": "// Realistic Stud Tool - OpenSCAD\n// Medium complexity with 3D-printable features\n\n$fn = 50;\n\n// Main stud tool module\nmodule stud_tool() {\n    color([0.8, 0.8, 0.8]) {\n        // Handle grip area\n        handle_grip();\n        \n        // Main shaft\n        translate([0, 0, 30]) main_shaft();\n        \n        // Stud finder sensor housing\n        translate([0, 0, 10]) sensor_housing();\n        \n        // Button controls\n        translate([12, -8, 35]) button();\n        translate([12, 8, 35]) button();\n        \n        // Display screen\n        translate([0, 20, 40]) display_screen();\n        \n        // Battery compartment\n        translate([0, -20, 25]) battery_compartment();\n        \n        // LED indicators\n        translate([-15, 0, 38]) led_indicator();\n        translate([-15, -5, 38]) led_indicator();\n        translate([-15, 5, 38]) led_indicator();\n    }\n}\n\n// Handle with rubber grip texture\nmodule handle_grip() {\n    difference() {\n        // Main handle\n        cylinder(h=25, d1=25, d2=22);\n        \n        // Grip grooves\n        for(i = [1:5]) {\n            translate([0, 0, i*4]) \n            cylinder(h=1.5, d1=28, d2=25);\n        }\n    }\n    \n    // Rubber grip rings\n    color([0.2, 0.2, 0.2]) {\n        for(i = [0.5:1:4.5]) {\n            translate([0, 0, i*5]) \n            difference() {\n                cylinder(h=2, d=24);\n                cylinder(h=2.5, d=20);\n            }\n        }\n    }\n}\n\n// Main shaft with internal structure\nmodule main_shaft() {\n    difference() {\n        // Outer shell\n        cylinder(h=40, d1=22, d2=18);\n        \n        // Internal cavity for electronics\n        translate([0, 0, 5]) \n        cylinder(h=30, d=15);\n    }\n    \n    // Reinforcement ribs\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle]) {\n            translate([7, 0, 10]) \n            cube([1, 10, 20], center=true);\n        }\n    }\n}\n\n// Sensor housing at the bottom\nmodule sensor_housing() {\n    difference() {\n        // Housing body\n        cube([40, 20, 10], center=true);\n        \n        // Sensor window\n        translate([0, 0, -1]) \n        cube([35, 15, 2], center=true);\n        \n        // Mounting holes\n        for(x = [-15, 15]) {\n            for(y = [-7, 7]) {\n                translate([x, y, 0]) \n                cylinder(h=12, d=3);\n            }\n        }\n    }\n    \n    // Sensor lens\n    color([0.1, 0.1, 0.8, 0.7]) {\n        translate([0, 0, 5.5]) \n        cube([34, 14, 0.5], center=true);\n    }\n}\n\n// Buttons for controls\nmodule button() {\n    difference() {\n        // Button body\n        translate([0, 0, 2]) \n        cylinder(h=3, d=5);\n        \n        // Button top\n        translate([0, 0, 5]) \n        cylinder(h=1, d=6);\n    }\n    \n    // Button labels\n    color([0, 0, 0]) {\n        translate([0, 0, 6.5]) \n        cylinder(h=0.1, d=4);\n    }\n}\n\n// LCD display screen\nmodule display_screen() {\n    difference() {\n        // Screen bezel\n        cube([25, 15, 3], center=true);\n        \n        // Display area\n        translate([0, 0, -1]) \n        cube([22, 12, 2], center=true);\n    }\n    \n    // Screen surface\n    color([0.1, 0.1, 0.1, 0.8]) {\n        translate([0, 0, 2]) \n        cube([22, 12, 0.1], center=true);\n    }\n}\n\n// Battery compartment cover\nmodule battery_compartment() {\n    difference() {\n        // Cover plate\n        cube([30, 12, 2], center=true);\n        \n        // Grip texture\n        for(i = [-12:4:12]) {\n            translate([i, 0, -1]) \n            cube([3, 10, 0.5], center=true);\n        }\n        \n        // Screw holes\n        translate([10, 0, 0]) \n        cylinder(h=3, d=3);\n        translate([-10, 0, 0]) \n        cylinder(h=3, d=3);\n    }\n}\n\n// LED indicator lights\nmodule led_indicator() {\n    difference() {\n        // LED housing\n        cylinder(h=2, d=4);\n        \n        // LED lens\n        translate([0, 0, 1]) \n        cylinder(h=1.5, d=3);\n    }\n    \n    // LED surface\n    color([1, 0, 0, 0.7]) {\n        translate([0, 0, 2]) \n        cylinder(h=0.1, d=2.5);\n    }\n}\n\n// Assemble the tool\nstud_tool();",
    "renders": true
  },
  {
    "tool": "strut",
    "openscad_code": "// Strut Tool - Realistic Style, Medium Complexity\n// A 3D printable strut removal tool for automotive suspension work\n// Features angled handle, forked strut engagement, and grip patterns\n\n// Main parameters\nhandle_length = 80;\nhandle_diameter = 22;\nfork_width = 35;\nfork_thickness = 8;\nfork_length = 45;\nbend_angle = 30;\n\n// Color constants\nhandle_color = \"DarkSlateGray\";\nfork_color = \"Silver\";\ngrip_color = \"Black\";\n\nmodule handle_grip() {\n    // Create knurled grip pattern\n    color(grip_color) {\n        difference() {\n            cylinder(h=handle_length, d=handle_diameter, $fn=50);\n            \n            // Cut knurling grooves\n            for(i = [0:5:handle_length-5]) {\n                translate([0, 0, i])\n                rotate([0, 0, 45])\n                linear_extrude(height=3)\n                circle(d=handle_diameter-2, $fn=6);\n            }\n        }\n    }\n}\n\nmodule handle_body() {\n    color(handle_color) {\n        difference() {\n            // Main handle cylinder\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n            // Add grip section\n            translate([0, 0, 5])\n            cylinder(h=handle_length-10, d=handle_diameter-2, $fn=32);\n            \n            // End cap recess\n            translate([0, 0, handle_length-2])\n            cylinder(h=3, d=handle_diameter-6, $fn=32);\n        }\n    }\n}\n\nmodule fork_prongs() {\n    color(fork_color) {\n        // Left prong\n        translate([-fork_width/4, 0, 0])\n        union() {\n            // Main prong body\n            cube([fork_width/2, fork_thickness, fork_length]);\n            \n            // Rounded tip\n            translate([fork_width/4, fork_thickness/2, fork_length])\n            rotate([90, 0, 0])\n            cylinder(h=fork_width/2, d=fork_thickness, $fn=16);\n            \n            // Reinforcement rib\n            translate([0, -1, fork_length/2])\n            cube([fork_width/2, 2, fork_length/4]);\n        }\n        \n        // Right prong\n        translate([fork_width/4, 0, 0])\n        mirror([1, 0, 0])\n        union() {\n            cube([fork_width/2, fork_thickness, fork_length]);\n            \n            translate([fork_width/4, fork_thickness/2, fork_length])\n            rotate([90, 0, 0])\n            cylinder(h=fork_width/2, d=fork_thickness, $fn=16);\n            \n            translate([0, -1, fork_length/2])\n            cube([fork_width/2, 2, fork_length/4]);\n        }\n    }\n}\n\nmodule fork_base() {\n    color(fork_color) {\n        // Transition from handle to fork\n        hull() {\n            // Handle connection\n            translate([0, 0, -5])\n            cylinder(h=10, d=handle_diameter, $fn=32);\n            \n            // Fork base\n            cube([fork_width, fork_thickness, 15], center=true);\n        }\n    }\n}\n\nmodule strut_tool() {\n    // Handle assembly\n    translate([0, 0, 0])\n    union() {\n        handle_body();\n        handle_grip();\n    }\n    \n    // Fork assembly with bend\n    translate([0, 0, handle_length])\n    rotate([bend_angle, 0, 0])\n    translate([0, 0, 5])\n    union() {\n        fork_base();\n        fork_prongs();\n    }\n    \n    // Add tool markings\n    color(\"White\") {\n        translate([handle_diameter/2 + 1, 0, handle_length/2])\n        rotate([0, 90, 0])\n        linear_extrude(height=0.5)\n        text(\"STRUT\", size=4, halign=\"center\", valign=\"center\");\n    }\n}\n\n// Render the complete tool\nstrut_tool();",
    "renders": true
  },
  {
    "tool": "prop",
    "openscad_code": "// Prop Cordless Drill â€“ realistic style, medium complexity\n// Overall length ~80 mm, printable without supports\n\n// Color definitions\nhandle_color = \"DarkSlateGray\";\nbody_color = \"FireBrick\";\nchuck_color = \"Silver\";\nbit_color = \"GoldenRod\";\n\n// Dimensions (mm)\nhandle_len = 42;\nhandle_dia = 18;\ntransition_h = 8;\nbody_len = 28;\nbody_dia = 30;\nchuck_len = 12;\nchuck_dia = 16;\nbit_len = 18;\nbit_dia = 3;\n\n// Optional helper module for rounded edges\nmodule rounded_cube(size, r) {\n    translate([r,r,0]) cube([size.x-2*r,size.y-2*r,size.z]);\n    translate([r,r,size.z-r]) sphere(r);\n    translate([size.x-r,r,size.z-r]) sphere(r);\n    translate([r,size.y-r,size.z-r]) sphere(r);\n    translate([size.x-r,size.y-r,size.z-r]) sphere(r);\n}\n\n// Handle with finger grooves\nmodule drill_handle() {\n    color(handle_color)\n    difference() {\n        cylinder(h = handle_len, d = handle_dia, $fn = 40);\n        // Internal hollow for printability / weight\n        cylinder(h = handle_len + 2, d = handle_dia - 4, $fn = 40);\n        // Finger grooves\n        for (i = [1:4]) {\n            translate([0, 0, i*handle_len/5])\n                rotate([90,0,0])\n                    cylinder(h = 4, d = 6, $fn = 20);\n        }\n    }\n}\n\n// Motor body\nmodule drill_body() {\n    color(body_color)\n    union() {\n        // Main cylindrical body\n        translate([0, 0, handle_len])\n            cylinder(h = body_len, d = body_dia, $fn = 40);\n        // Transition cone\n        translate([0, 0, handle_len])\n            cylinder(h = transition_h, d1 = handle_dia, d2 = body_dia, $fn = 40);\n        // Top flat cap\n        translate([0, 0, handle_len + body_len])\n            cylinder(h = 2, d = body_dia, $fn = 40);\n        // Trigger guard\n        translate([body_dia/2 - 2, 0, handle_len - 10])\n            rotate([0,90,0])\n                difference() {\n                    cylinder(h = 8, d = 8, $fn = 20);\n                    cylinder(h = 9, d = 5, $fn = 20);\n                }\n    }\n}\n\n// Three-jaw chuck\nmodule chuck() {\n    color(chuck_color)\n    union() {\n        // Main chuck cylinder\n        translate([0, 0, handle_len + body_len])\n            cylinder(h = chuck_len, d = chuck_dia, $fn = 40);\n        // Chuck jaws (simplified as three ridges)\n        for (a = [0:120:240]) {\n            rotate([0,0,a])\n                translate([chuck_dia/2 - 2, 0, handle_len + body_len])\n                    cube([4, 1.5, chuck_len], center = true);\n        }\n    }\n}\n\n// Drill bit\nmodule bit() {\n    color(bit_color)\n    translate([0, 0, handle_len + body_len + chuck_len])\n        cylinder(h = bit_len, d = bit_dia, $fn = 12);\n}\n\n// Assembly\ndrill_handle();\ndrill_body();\nchuck();\nbit();",
    "renders": true
  },
  {
    "tool": "support",
    "openscad_code": "// Adjustable Wrench - OpenSCAD Support Tool\n// Realistic style, medium complexity\n\n// Color definitions\n$fn=50;\n\nmodule handle() {\n    color([0.1, 0.1, 0.1]) {\n        // Main handle body\n        translate([0, 0, 5]) {\n            difference() {\n                cube([15, 12, 100], center=true);\n                // Grip grooves\n                for(i=[-40:10:40]) {\n                    translate([0, 0, i]) {\n                        cube([16, 13, 2], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Handle end cap\n        translate([0, 0, -55]) {\n            cylinder(h=10, r=8);\n        }\n        \n        // Handle grip texture\n        for(i=[-35:7:35]) {\n            color([0.2, 0.2, 0.2]) {\n                translate([0, 7, i]) {\n                    cube([15, 1.5, 4], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule jaw_base() {\n    color([0.7, 0.7, 0.7]) {\n        // Fixed jaw\n        translate([-20, -15, 45]) {\n            cube([20, 30, 25]);\n        }\n        \n        // Jaw reinforcement\n        translate([-25, -10, 45]) {\n            cube([5, 20, 25]);\n        }\n    }\n}\n\nmodule movable_jaw() {\n    color([0.7, 0.7, 0.7]) {\n        // Moving jaw\n        translate([5, -15, 45]) {\n            cube([20, 30, 25]);\n        }\n        \n        // Jaw guide\n        translate([5, -10, 35]) {\n            cube([15, 20, 5]);\n        }\n    }\n}\n\nmodule adjustment_mechanism() {\n    color([0.5, 0.5, 0.5]) {\n        // Threaded rod\n        translate([10, 0, 35]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=30, r=3);\n            }\n        }\n        \n        // Adjustment knob\n        translate([10, 0, 20]) {\n            cylinder(h=15, r=8);\n            \n            // Knurling on knob\n            for(i=[0:20:359]) {\n                rotate([0, 0, i]) {\n                    translate([7.5, 0, 0]) {\n                        cube([1, 0.5, 15], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule jaw_teeth() {\n    color([0.8, 0.8, 0.8]) {\n        // Fixed jaw teeth\n        for(i=[-10:5:10]) {\n            translate([-20, i, 57.5]) {\n                cube([3, 2, 5]);\n            }\n        }\n        \n        // Moving jaw teeth\n        for(i=[-10:5:10]) {\n            translate([22, i, 57.5]) {\n                cube([3, 2, 5]);\n            }\n        }\n    }\n}\n\nmodule size_indicator() {\n    color([0, 0, 0]) {\n        // Measurement marks\n        for(i=[0:2:20]) {\n            translate([i-10, 0, 30]) {\n                cube([0.5, 5, 0.2]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    jaw_base();\n    movable_jaw();\n    adjustment_mechanism();\n    jaw_teeth();\n    size_indicator();\n}",
    "renders": true
  },
  {
    "tool": "base",
    "openscad_code": "// Adjustable wrench base tool - realistic style, medium complexity\n// Overall dimensions: ~85mm length, 30mm width, 12mm height\n\n// Main color scheme\n$fn = 50;\n\n// Main handle body\nmodule handle() {\n    color([0.2, 0.2, 0.2]) {\n        // Main grip section\n        difference() {\n            // Handle core\n            union() {\n                translate([0, 0, 6]) \n                    cube([60, 20, 12], center=true);\n                \n                // Rounded ends\n                translate([30, 0, 6]) \n                    cylinder(h=12, r=10, center=true);\n                translate([-30, 0, 6]) \n                    cylinder(h=12, r=10, center=true);\n            }\n            \n            // Finger grooves\n            for(i = [-1, 0, 1]) {\n                translate([i * 15, 0, 12]) \n                    cylinder(h=5, r=4, center=true);\n            }\n        }\n        \n        // Rubber grip texture\n        color([0.1, 0.1, 0.1]) {\n            for(i = [-20:5:20]) {\n                translate([i, 0, 12.1]) \n                    cube([3, 18, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Adjustable jaw mechanism\nmodule jaw_assembly() {\n    color([0.7, 0.7, 0.7]) {\n        // Fixed jaw\n        union() {\n            // Main jaw body\n            translate([-5, 0, 6]) \n                cube([15, 20, 15], center=true);\n            \n            // Jaw teeth\n            difference() {\n                translate([-12, 0, 13]) \n                    cube([8, 20, 6], center=true);\n                \n                // Teeth grooves\n                for(i = [-8:4:8]) {\n                    translate([-12, i, 16]) \n                        cube([8, 1, 6], center=true);\n                }\n            }\n        }\n        \n        // Movable jaw\n        translate([15, 0, 0]) {\n            // Slider base\n            difference() {\n                cube([25, 18, 12], center=true);\n                \n                // Adjustment slot\n                translate([0, 0, -1]) \n                    cube([20, 8, 14], center=true);\n            }\n            \n            // Movable jaw teeth\n            difference() {\n                translate([10, 0, 13]) \n                    cube([8, 20, 6], center=true);\n                \n                for(i = [-8:4:8]) {\n                    translate([10, i, 16]) \n                        cube([8, 1, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Adjustment mechanism\nmodule adjustment_mechanism() {\n    color([0.5, 0.5, 0.5]) {\n        // Worm screw\n        translate([0, 11, 6]) {\n            rotate([90, 0, 0]) \n                cylinder(h=25, r=3, center=true);\n            \n            // Screw head\n            translate([0, 12.5, 0]) \n                cylinder(h=6, r=5, center=true);\n            \n            // Knurling on screw head\n            difference() {\n                cylinder(h=6.1, r=5, center=true);\n                for(i = [0:15:360]) {\n                    rotate([0, 0, i]) {\n                        translate([4, 0, 0]) \n                            cube([2, 1, 6.2], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Guide rails\n        for(side = [-1, 1]) {\n            translate([5, side * 9, 6]) \n                cube([20, 2, 10], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    translate([30, 0, 0]) {\n        jaw_assembly();\n        adjustment_mechanism();\n    }\n    \n    // Size reference (comment out for print)\n    // %cube([85, 30, 12], center=true);\n}",
    "renders": true
  },
  {
    "tool": "pedestal",
    "openscad_code": "// Pedestal Tool - Realistic Style, Medium Complexity\n// A small pedestal tool with adjustable height and tool holder\n\n// Overall dimensions\npedestal_height = 80;\npedestal_base_d = 50;\npedestal_top_d = 35;\ntool_holder_d = 12;\ntool_holder_h = 25;\n\n// Base module\nmodule base() {\n    difference() {\n        // Main base cylinder\n        color(\"gray\") cylinder(h=15, d=pedestal_base_d, $fn=60);\n        \n        // Bottom recess for print stability\n        translate([0, 0, -1]) \n            cylinder(h=5, d=pedestal_base_d - 6, $fn=60);\n            \n        // Ventilation holes\n        for(i = [0:3]) {\n            rotate([0, 0, i * 90 + 45]) \n                translate([pedestal_base_d/2 - 10, 0, 7.5]) \n                    rotate([0, 90, 0]) \n                        cylinder(h=20, d=4, $fn=20);\n        }\n    }\n}\n\n// Adjustable height column\nmodule column() {\n    color(\"silver\") {\n        // Main column\n        difference() {\n            cylinder(h=pedestal_height - 30, d1=pedestal_base_d - 10, d2=pedestal_top_d, $fn=50);\n            \n            // Height adjustment slots\n            for(i = [1:4]) {\n                translate([0, 0, i * 15]) \n                    rotate([0, 0, 0]) \n                        translate([pedestal_base_d/2 - 5 - i*2, 0, 0]) \n                            cube([3, pedestal_base_d - 10 - i*4, 5], center=true);\n            }\n        }\n        \n        // Adjustment mechanism\n        translate([0, pedestal_top_d/2 + 5, pedestal_height - 35]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=15, d=8, $fn=20);\n                translate([0, 0, 15]) sphere(d=8);\n            }\n        }\n    }\n}\n\n// Tool holder top\nmodule tool_holder() {\n    color(\"darkgray\") {\n        difference() {\n            // Main holder\n            translate([0, 0, pedestal_height - 15]) \n                cylinder(h=15, d=pedestal_top_d, $fn=40);\n                \n            // Central hole for tools\n            translate([0, 0, pedestal_height - 15]) \n                cylinder(h=20, d=tool_holder_d, $fn=30);\n                \n            // Tool slots\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90]) \n                    translate([pedestal_top_d/2 - 5, 0, pedestal_height - 7.5]) \n                        cube([1, 8, 15], center=true);\n            }\n        }\n        \n        // Grip ring\n        translate([0, 0, pedestal_height - 20]) {\n            color(\"black\") cylinder(h=3, d=pedestal_top_d + 2, $fn=40);\n        }\n    }\n}\n\n// Rubber feet\nmodule feet() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([pedestal_base_d/2 - 8, 0, 0]) {\n                color(\"black\") {\n                    translate([0, 0, -1]) sphere(d=5);\n                    cylinder(h=3, d1=5, d2=3);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    column();\n    tool_holder();\n    feet();\n}\n\n// Optional tool in holder\nmodule sample_tool() {\n    color(\"red\") {\n        translate([0, 0, pedestal_height + 5]) {\n            // Screwdriver handle\n            cylinder(h=20, d=8, $fn=20);\n            \n            // Shaft\n            translate([0, 0, 20]) \n                cylinder(h=30, d=3, $fn=12);\n                \n            // Tip\n            translate([0, 0, 50]) \n                cylinder(h=10, d1=3, d2=0.5, $fn=6);\n        }\n    }\n}\n\n// Uncomment to show sample tool\n// sample_tool();",
    "renders": true
  },
  {
    "tool": "foot",
    "openscad_code": "// Foot Tool - Realistic Style, Medium Complexity\n// A realistic representation of a foot callus remover tool\n\n// Overall dimensions\nfoot_length = 85;\nfoot_width = 35;\nfoot_height = 20;\n\n// Colors\nmetal_color = [0.7, 0.7, 0.75];\nrubber_color = [0.1, 0.1, 0.1];\nblade_color = [0.8, 0.8, 0.85];\n\n// Main handle with ergonomic grip\nmodule handle() {\n    // Central handle core\n    color(rubber_color)\n    difference() {\n        union() {\n            // Main handle body\n            hull() {\n                translate([-5, -12, 0])\n                    cylinder(h=foot_height, r=6, $fn=20);\n                translate([5, -12, 0])\n                    cylinder(h=foot_height, r=6, $fn=20);\n                translate([-5, 12, 0])\n                    cylinder(h=foot_height, r=7, $fn=20);\n                translate([5, 12, 0])\n                    cylinder(h=foot_height, r=7, $fn=20);\n            }\n            \n            // Grip texture rings\n            for(i = [1:5]) {\n                translate([0, -10 + i*5, foot_height/2])\n                    rotate([90, 0, 0])\n                    cylinder(h=25, r1=7.5, r2=7.5, $fn=30);\n            }\n        }\n        \n        // Grip grooves\n        for(i = [1:4]) {\n            translate([0, -7.5 + i*5, foot_height/2])\n                rotate([90, 0, 0])\n                cylinder(h=26, r1=6.8, r2=6.8, $fn=30);\n        }\n    }\n}\n\n// Metal blade holder\nmodule blade_holder() {\n    color(metal_color)\n    union() {\n        // Main holder body\n        translate([-foot_width/2 + 5, -foot_length/2 + 15, 0])\n            cube([foot_width - 10, 20, foot_height - 5]);\n        \n        // Rounded end\n        translate([0, -foot_length/2 + 15, 0])\n            cylinder(h=foot_height - 5, r=foot_width/2 - 5, $fn=30);\n        \n        // Blade mounting area\n        translate([0, -foot_length/2 + 25, foot_height - 2])\n            cube([foot_width - 15, 10, 2], center=true);\n    }\n}\n\n// Micro-plane blade\nmodule blade() {\n    color(blade_color)\n    difference() {\n        // Blade base\n        translate([0, -foot_length/2 + 25, foot_height - 1])\n            cube([foot_width - 18, 8, 1], center=true);\n        \n        // Cutting holes pattern\n        for(y = [-3:3]) {\n            for(x = [-8:8]) {\n                if((x + y) % 2 == 0) {\n                    translate([x*2, y*2 + 25 - foot_length/2, foot_height - 0.5])\n                        cylinder(h=2, r=0.4, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Safety guard\nmodule safety_guard() {\n    color(metal_color)\n    difference() {\n        // Main guard\n        translate([0, -foot_length/2 + 10, foot_height/2])\n            rotate([0, 0, 0])\n            cylinder(h=foot_height + 2, r1=foot_width/2 - 3, r2=foot_width/2 - 6, $fn=30);\n        \n        // Opening for blade\n        translate([0, -foot_length/2 + 25, foot_height/2])\n            cube([foot_width - 16, 12, foot_height + 4], center=true);\n    }\n}\n\n// Hanging loop\nmodule hanging_loop() {\n    color(metal_color)\n    translate([0, foot_length/2 - 5, foot_height - 5])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=5, r=4, $fn=20);\n            translate([0, 0, -1])\n                cylinder(h=7, r=2, $fn=20);\n        }\n}\n\n// Assembly\nunion() {\n    handle();\n    blade_holder();\n    blade();\n    safety_guard();\n    hanging_loop();\n}",
    "renders": true
  },
  {
    "tool": "leg",
    "openscad_code": "// Leg Tool - Realistic Style, Medium Complexity\n// A realistic leg tool with grip, shaft, and foot pad\n\n// Tool dimensions (mm)\nhandle_length = 35;\nhandle_diameter = 12;\nshaft_length = 65;\nshaft_diameter = 6;\nfoot_width = 25;\nfoot_length = 45;\nfoot_thickness = 8;\n\n// Colors\nhandle_color = \"SaddleBrown\";\nshaft_color = \"Silver\";\nfoot_color = \"DarkGray\";\n\n// Handle grip texture module\nmodule grip_texture(diameter, length, rings) {\n    for(i = [0:rings-1]) {\n        translate([0, 0, i * (length/rings)])\n        difference() {\n            cylinder(h=2.5, d=diameter+2, $fn=32);\n            cylinder(h=2.7, d=diameter-1, $fn=32);\n        }\n    }\n}\n\n// Handle with grip pattern\nmodule handle() {\n    color(handle_color) {\n        // Main handle body\n        cylinder(h=handle_length, d=handle_diameter, $fn=32);\n        \n        // Grip rings\n        grip_texture(handle_diameter, handle_length, 8);\n        \n        // End cap\n        translate([0, 0, handle_length])\n        cylinder(h=3, d=handle_diameter+2, $fn=32);\n    }\n}\n\n// Shaft with slight taper\nmodule shaft() {\n    color(shaft_color) {\n        translate([0, 0, handle_length])\n        cylinder(h=shaft_length, d1=shaft_diameter+1, d2=shaft_diameter, $fn=16);\n    }\n}\n\n// Foot pad with realistic features\nmodule foot_pad() {\n    color(foot_color) {\n        // Main foot pad\n        translate([0, 0, handle_length+shaft_length])\n        rotate([90, 0, 0])\n        difference() {\n            // Outer shape\n            union() {\n                // Main pad\n                cube([foot_length, foot_width, foot_thickness], center=true);\n                \n                // Rounded edges\n                translate([foot_length/2-2, 0, 0])\n                cylinder(h=foot_width, d=foot_thickness, center=true);\n                translate([-foot_length/2+2, 0, 0])\n                cylinder(h=foot_width, d=foot_thickness, center=true);\n            }\n            \n            // Grip pattern on bottom\n            for(i = [-2:2]) {\n                for(j = [-1:1]) {\n                    translate([i*5, j*5, -foot_thickness/2-0.1])\n                    cube([3, 3, 1], center=true);\n                }\n            }\n            \n            // Center hole for shaft\n            rotate([0, 90, 0])\n            cylinder(h=foot_length+2, d=shaft_diameter+2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    shaft();\n    foot_pad();\n    \n    // Reinforcement ring\n    color(shaft_color) {\n        translate([0, 0, handle_length+shaft_length-foot_thickness/2])\n        rotate([90, 0, 0])\n        cylinder(h=foot_thickness+2, d=shaft_diameter+4, center=true);\n    }\n}",
    "renders": true
  },
  {
    "tool": "pillar",
    "openscad_code": "// Pillar Tool - Realistic Style, Medium Complexity\n// A masonry chisel designed for precise stone carving\n\n$fn = 50;\n\n// Main color scheme\ncolor(\"silver\") difference() {\n    // Main chisel body - cylindrical shaft\n    union() {\n        // Handle grip section\n        translate([0, 0, 85]) {\n            color(\"darkslategray\") \n            cylinder(h=20, d1=18, d2=16);\n            \n            // Grip rings for better handling\n            for(i = [0:3]) {\n                translate([0, 0, 85 + i*5]) \n                cylinder(h=2, d=19);\n            }\n        }\n        \n        // Shaft transition\n        translate([0, 0, 65])\n        cylinder(h=20, d1=16, d2=12);\n        \n        // Main shaft\n        translate([0, 0, 15])\n        cylinder(h=50, d=12);\n        \n        // Shaft to blade transition\n        translate([0, 0, 5])\n        cylinder(h=10, d1=12, d2=8);\n    }\n    \n    // Center hole for weight reduction\n    translate([0, 0, 15])\n    cylinder(h=70, d=6);\n    \n    // Grip texture grooves\n    for(i = [0:7]) {\n        rotate([0, 0, i*45]) {\n            translate([8.5, 0, 90])\n            cube([1, 1, 15], center=true);\n        }\n    }\n}\n\n// Hardened steel blade\ncolor(\"lightgray\") union() {\n    // Blade body\n    translate([0, 0, -5])\n    cylinder(h=10, d=8);\n    \n    // Blade taper\n    translate([0, 0, -15])\n    cylinder(h=10, d1=8, d2=0.5);\n    \n    // Blade edges - four-sided taper\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([2, 0, -15])\n            cube([4, 1, 10]);\n            \n            translate([4, 0, -15])\n            cube([2, 0.5, 10]);\n        }\n    }\n}\n\n// Strike cap - hardened end for hammering\ncolor(\"darkgray\")\ntranslate([0, 0, 105])\ncylinder(h=5, d=20);\n\n// Safety collar between handle and shaft\ncolor(\"black\")\ntranslate([0, 0, 80])\ncylinder(h=5, d=22);\n\n// Manufacturer marking on shaft\ncolor(\"white\")\ntranslate([6, 0, 40])\nrotate([0, 90, 0])\nlinear_extrude(height=0.5)\ntext(\"STEEL\", size=2, halign=\"center\");\n\n// Usage wear indicators on blade\ncolor(\"darkred\")\nfor(i = [0:2]) {\n    translate([4*cos(i*120), 4*sin(i*120), -12])\n    sphere(d=0.5);\n}",
    "renders": true
  },
  {
    "tool": "column",
    "openscad_code": "// OpenSCAD Column Tool - Realistic Medium Complexity\n// Column marking tool for metalworking / woodworking\n\n// Overall dimensions\ncolumn_height = 85;\ncolumn_diameter = 22;\nbase_diameter = 28;\nhandle_length = 40;\nhandle_diameter = 12;\n\n// Create the main column body with knurled grip\nmodule column_body() {\n    color(\"silver\")\n    difference() {\n        // Main cylindrical body\n        cylinder(h=column_height, d=column_diameter, $fn=64);\n        \n        // Knurling pattern - cut shallow grooves\n        for(i=[0:35]) {\n            rotate([0, 0, i*10])\n            translate([-column_diameter/2-0.1, -1, 5])\n            cube([column_diameter+0.2, 2, column_height-10]);\n        }\n    }\n}\n\n// Create the pointed scribe tip\nmodule scribe_tip() {\n    color(\"silver\")\n    union() {\n        // Conical tip\n        cylinder(h=8, d1=column_diameter, d2=2, $fn=32);\n        \n        // Sharp point\n        cylinder(h=4, d1=2, d2=0.5, $fn=16);\n    }\n}\n\n// Create the measurement scale markings\nmodule scale_markings() {\n    color(\"black\")\n    for(i=[0:10]) {\n        height = i * 7;\n        if(i % 5 == 0) {\n            // Major marks\n            translate([column_diameter/2+0.1, -2, height])\n            cube([3, 4, 0.5]);\n        } else {\n            // Minor marks\n            translate([column_diameter/2+0.1, -1, height])\n            cube([2, 2, 0.5]);\n        }\n    }\n}\n\n// Create the ergonomic handle\nmodule handle() {\n    color(\"darkslategray\")\n    difference() {\n        union() {\n            // Main handle cylinder\n            translate([0, 0, column_height])\n            cylinder(h=handle_length, d=handle_diameter, $fn=32);\n            \n            // Handle grip rings\n            for(i=[0:3]) {\n                translate([0, 0, column_height + 5 + i*10])\n                cylinder(h=2, d=handle_diameter+2, $fn=32);\n            }\n        }\n        \n        // Finger grooves\n        for(i=[0:2]) {\n            rotate([0, 0, 45 + i*45])\n            translate([handle_diameter/2-1, -2, column_height+5])\n            cube([4, 4, handle_length-10]);\n        }\n    }\n}\n\n// Create the base collar\nmodule base_collar() {\n    color(\"silver\")\n    difference() {\n        // Main base\n        cylinder(h=6, d=base_diameter, $fn=64);\n        \n        // Chamfer\n        translate([0, 0, -0.1])\n        cylinder(h=6.2, d1=base_diameter-2, d2=base_diameter, $fn=64);\n    }\n}\n\n// Create the depth adjustment mechanism\nmodule depth_adjuster() {\n    color(\"gold\")\n    union() {\n        // Adjustment knob\n        translate([0, 0, -12])\n        cylinder(h=8, d=15, $fn=32);\n        \n        // Knurling on knob\n        for(i=[0:15]) {\n            rotate([0, 0, i*22.5])\n            translate([-7.5-0.1, -0.5, -12])\n            cube([15+0.2, 1, 8]);\n        }\n        \n        // Threaded section\n        translate([0, 0, -20])\n        cylinder(h=8, d=10, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    // Base at bottom\n    translate([0, 0, 0])\n    base_collar();\n    \n    // Main column body\n    translate([0, 0, 6])\n    column_body();\n    \n    // Scale markings on column\n    scale_markings();\n    \n    // Handle on top\n    handle();\n    \n    // Scribe tip at bottom\n    translate([0, 0, -20])\n    depth_adjuster();\n    \n    // Scribe tip extends through base\n    translate([0, 0, 6])\n    scribe_tip();\n}",
    "renders": true
  },
  {
    "tool": "pier",
    "openscad_code": "// Pier Tool - Realistic Style, Medium Complexity\n// A handheld tool used by mechanics for removing and installing pier pins\n\n$fn = 50;\n\n// Main colors\ncolor_tool = \"#4A4A4A\";\ncolor_handle = \"#2E2E2E\";\ncolor_grip = \"#FF4444\";\ncolor_metal = \"#C0C0C0\";\n\n// Overall dimensions\nlength = 85;\nwidth = 20;\nheight = 15;\n\nmodule handle() {\n    // Main handle body\n    color(color_handle)\n    difference() {\n        union() {\n            // Handle shaft\n            translate([0, 0, 0])\n                cylinder(h=60, d=12, center=true);\n            \n            // End cap\n            translate([30, 0, 0])\n                sphere(d=13);\n        }\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cylinder(h=70, d=6, center=true);\n    }\n    \n    // Grip rings\n    for(i = [-25:7:25]) {\n        color(color_grip)\n        translate([i, 0, 0])\n            cylinder(h=5, d=14.5);\n    }\n}\n\nmodule working_head() {\n    // Main head body\n    color(color_tool)\n    union() {\n        // Cylindrical neck\n        translate([-32, 0, 0])\n            cylinder(h=15, d=10);\n        \n        // Forked end\n        translate([-40, 0, 0])\n            rotate([0, 90, 0])\n            linear_extrude(height=4)\n            polygon(points=[\n                [0, -8],\n                [15, -8],\n                [15, -3],\n                [20, 0],\n                [15, 3],\n                [15, 8],\n                [0, 8]\n            ]);\n        \n        // Reinforcement ridge\n        translate([-39, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=6, d=12);\n    }\n    \n    // Pier pin slot\n    color(\"black\")\n    translate([-42, 0, 0])\n        rotate([0, 90, 0])\n        cube([8, 3, 4], center=true);\n}\n\nmodule pivot_pin() {\n    // Pivot pin mechanism\n    color(color_metal)\n    union() {\n        // Pin head\n        translate([-20, 0, 0])\n            cylinder(h=3, d=6);\n        \n        // Pin shaft\n        translate([-20, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=width+2, d=4);\n    }\n}\n\nmodule text_marks() {\n    // Tool markings\n    color(\"white\")\n    translate([0, 0, 7.5])\n        linear_extrude(height=0.3)\n        text(\"PIER TOOL\", size=3, halign=\"center\", valign=\"center\");\n}\n\n// Assembly\nunion() {\n    handle();\n    translate([30, 0, 0])\n        working_head();\n    pivot_pin();\n    text_marks();\n}",
    "renders": true
  },
  {
    "tool": "abutment",
    "openscad_code": "// OpenSCAD Abutment Tool â€“ medium-complexity, realistic style\n// Overall footprint â‰ˆ 60 mm long, 25 mm tall, 20 mm wide â€“ 3-D-print friendly\n\n$fn = 64;                       // Smooth curves\n\n// --- Color constants ---\nc_body   = \"#B0B0B0\";          // anodized aluminium look\nc_grip   = \"#202020\";          // rubberized handle\nc_mark   = \"#FF0000\";          // red depth marks\n\n// --- Main assembly ---\nmodule abutment_assembly() {\n    union() {\n        base_block();          // main rectangular body\n        grip_handle();         // ergonomic handle\n        reference_lip();       // vertical registration edge\n        depth_marks();         // laser-etched style markings\n        drill_guide_holes();   // two bushings\n    }\n}\n\n// --- Rectangular base body ---\nmodule base_block() {\n    color(c_body)\n    difference() {\n        // Main block\n        translate([0, 0, 5])\n            cube([60, 20, 10], center = true);\n\n        // Central light-weighting pocket (top)\n        translate([0, 0, 8])\n            cube([40, 14, 4], center = true);\n\n        // Chamfers on long edges (bottom)\n        for (x = [-25, 25])\n            translate([x, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, r = 2, center = true);\n    }\n}\n\n// --- Rubberized grip handle ---\nmodule grip_handle() {\n    color(c_grip)\n    difference() {\n        // Main curved handle\n        translate([-30, 0, 0])\n            rotate([0, 90, 0])\n                scale([1, 1, 0.8])\n                    cylinder(h = 30, r = 8, center = true);\n\n        // Finger grooves (3 evenly spaced)\n        for (i = [-1:1])\n            translate([-30, i*7, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 30, r = 3, center = true);\n    }\n}\n\n// --- Vertical reference lip ---\nmodule reference_lip() {\n    color(c_body)\n    translate([25, 0, 10])\n        cube([2, 20, 15], center = true);\n}\n\n// --- Red depth graduation marks ---\nmodule depth_marks() {\n    color(c_mark)\n    for (d = [5:5:20]) {\n        translate([0, 11, d])\n            cube([60, 0.5, 0.5], center = true);\n    }\n}\n\n// --- Drill-guide bushings (press-fit brass tube placeholders) ---\nmodule drill_guide_holes() {\n    spacing = 15;\n    for (y = [-spacing/2, spacing/2]) {\n        color(c_body)\n        translate([0, y, 10])\n            cylinder(h = 20, r = 3.5, center = true);\n        // Actual hole (subtract)\n        translate([0, y, 10])\n            cylinder(h = 22, r = 2, center = true);\n    }\n}\n\n// --- Render the complete tool ---\nabutment_assembly();",
    "renders": true
  },
  {
    "tool": "buttress",
    "openscad_code": "// Buttress Tool - Realistic Style, Medium Complexity\n// Overall dimensions: ~80mm tall x 60mm wide x 20mm thick\n\n// Colors\n$fn = 32;\nhandle_color = \"DimGray\";\nshaft_color = \"Silver\";\nhead_color = \"DarkSlateGray\";\ngrip_color = \"Black\";\nmarking_color = \"Red\";\n\n// Main module\nmodule buttress_tool() {\n    union() {\n        // Handle assembly\n        translate([0, 0, 0]) handle_assembly();\n        \n        // Shaft\n        translate([0, 0, 35]) shaft();\n        \n        // Buttress head\n        translate([0, 0, 65]) buttress_head();\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle_assembly() {\n    color(handle_color) {\n        // Main handle body\n        cylinder(h = 30, d = 20, $fn = 32);\n        \n        // Ergonomic grip rings\n        for(i = [5:5:25]) {\n            translate([0, 0, i]) color(grip_color) \n                cylinder(h = 2, d1 = 22, d2 = 20);\n        }\n        \n        // Base cap\n        translate([0, 0, 0]) \n            cylinder(h = 3, d = 22);\n    }\n}\n\n// Central shaft\nmodule shaft() {\n    color(shaft_color) {\n        // Main shaft\n        cylinder(h = 25, d = 10);\n        \n        // Reinforcement ring\n        translate([0, 0, 0]) \n            cylinder(h = 3, d = 12);\n        \n        // Model identification marking\n        translate([6, 0, 12]) rotate([0, 90, 0]) \n            color(marking_color) \n            linear_extrude(height = 0.5) \n            text(\"8mm\", size = 3);\n    }\n}\n\n// Buttress thread head\nmodule buttress_head() {\n    color(head_color) {\n        // Main head body\n        cylinder(h = 12, d = 18);\n        \n        // Buttress thread cutting teeth\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) \n                translate([8, 0, 0]) \n                cutting_tooth();\n        }\n        \n        // Central guide hole\n        translate([0, 0, -1]) \n            cylinder(h = 14, d = 6);\n        \n        // Top chamfer\n        translate([0, 0, 12]) \n            cylinder(h = 2, d1 = 18, d2 = 14);\n    }\n}\n\n// Individual cutting tooth\nmodule cutting_tooth() {\n    difference() {\n        // Main tooth body\n        translate([0, 0, 6]) \n            cube([6, 4, 8], center = true);\n        \n        // Cutting edge angle\n        translate([3, 0, 2]) \n            rotate([0, 0, -15]) \n            cube([6, 4.2, 8], center = true);\n        \n        // Relief angle\n        translate([1.5, 0, 6]) \n            rotate([0, 0, 45]) \n            cube([6, 4.2, 4], center = true);\n    }\n}\n\n// Render the tool\nbuttress_tool();",
    "renders": true
  },
  {
    "tool": "arch",
    "openscad_code": "// Arch tool for drawing smooth curved shapes\n// 3D printable version with ergonomic grip and replaceable blade\n\n// Main parameters\nblade_length = 30;\nblade_width = 2;\nblade_thickness = 0.5;\nhandle_length = 60;\nhandle_diameter = 12;\narch_radius = 25;\narch_thickness = 3;\n\n// Colors\nhandle_color = \"BurlyWood\";\nblade_color = \"Silver\";\naccent_color = \"DimGray\";\n\n// Main assembly\nunion() {\n    // Handle assembly\n    color(handle_color) handle_assembly();\n    \n    // Blade assembly\n    color(blade_color) blade_assembly();\n    \n    // Accent rings\n    color(accent_color) accent_details();\n}\n\n// Handle with grip texture\nmodule handle_assembly() {\n    difference() {\n        union() {\n            // Main handle cylinder\n            cylinder(h=handle_length, d=handle_diameter, center=false);\n            \n            // End cap\n            translate([0, 0, handle_length])\n            cylinder(h=5, d=handle_diameter+2, center=false);\n            \n            // Grip rings\n            for(i = [5:10:handle_length-15]) {\n                translate([0, 0, i])\n                cylinder(h=2, d=handle_diameter+1, center=false);\n            }\n        }\n        \n        // Center hole for weight reduction\n        cylinder(h=handle_length+5, d=handle_diameter/2, center=false);\n    }\n}\n\n// Curved blade assembly\nmodule blade_assembly() {\n    // Rotate to align with handle\n    translate([0, 0, handle_length-5])\n    rotate([90, 0, 0])\n    union() {\n        // Main arch blade\n        difference() {\n            // Outer arch\n            intersection() {\n                // Full arch\n                rotate_extrude(angle=180, $fn=50)\n                translate([arch_radius, 0, 0])\n                square([blade_thickness, blade_length]);\n                \n                // Taper the ends\n                translate([0, 0, -blade_length/2])\n                cube([arch_radius*2+blade_thickness, blade_length*2, blade_length], center=true);\n            }\n            \n            // Inner arch for blade edge\n            rotate_extrude(angle=180, $fn=50)\n            translate([arch_radius-blade_width, 0, 0])\n            square([blade_thickness+0.5, blade_length+1]);\n        }\n        \n        // Blade support ribs\n        for(angle = [30:30:150]) {\n            rotate([0, 0, angle])\n            translate([arch_radius, 0, -blade_length/2])\n            cube([blade_thickness*2, blade_length, blade_thickness], center=true);\n        }\n    }\n}\n\n// Accent details and markings\nmodule accent_details() {\n    // Ring at handle base\n    translate([0, 0, handle_length-10])\n    difference() {\n        cylinder(h=3, d=handle_diameter+2, center=true);\n        cylinder(h=4, d=handle_diameter, center=true);\n    }\n    \n    // Measurement marks on handle\n    for(i = [10:10:handle_length-20]) {\n        translate([handle_diameter/2, 0, i])\n        cube([1, 0.5, 0.5], center=true);\n    }\n    \n    // Branding plate\n    translate([handle_diameter/2+0.5, 0, handle_length/2])\n    cube([2, 8, 4], center=true);\n}",
    "renders": true
  }
]